; ModuleID = '../../third_party/libaom/source/libaom/av1/encoder/nonrd_pickmode.c'
source_filename = "../../third_party/libaom/source/libaom/av1/encoder/nonrd_pickmode.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"
module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"
module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%struct.REF_MODE = type { i8, i8 }
%struct.SCAN_ORDER = type { i16*, i16* }
%struct.AV1_COMP = type { %struct.AV1_PRIMARY*, [8 x i8], %struct.EncQuantDequantParams, %struct.ThreadData, %struct.FRAME_COUNTS, %struct.MBMIExtFrameBufferInfo, %struct.CB_COEFF_BUFFER*, %struct.CoeffBufferPool, %struct.AV1Common, %struct.AV1EncoderConfig, i32, [8 x i8], %struct.yv12_buffer_config*, %struct.yv12_buffer_config*, %struct.yv12_buffer_config*, %struct.yv12_buffer_config, %struct.yv12_buffer_config*, %struct.yv12_buffer_config, %struct.yv12_buffer_config*, i32, %struct.TemporalFilterCtx, i32, %struct.ForceIntegerMVInfo, [7 x %struct.RefCntBuffer*], %struct.RefCntBuffer*, %struct.RefreshFrameFlagsInfo, [8 x i32], %struct.ExternalFlags, %struct.yv12_buffer_config, %struct.yv12_buffer_config, i64, %struct.RD_OPT, %struct.CODING_CONTEXT, %struct.GlobalMotionInfo, %struct.WinnerModeParams, %struct.TimeStamps, %struct.RATE_CONTROL, double, i32, i32, %struct.SPEED_FEATURES, %struct.MotionVectorSearchParams, i32, %struct.EncSegmentationInfo, %struct.CYCLIC_REFRESH*, %struct.ActiveMap, i8, %struct.RefBufferStack, i32, i32, %struct.FRAME_INFO, %struct.FRAME_INDEX_SET, %struct.InitialDimensions, i32, %struct.ResizePendingParams, %struct.TileDataEnc*, i32, %struct.TokenInfo, i32, %struct.VarBasedPartitionInfo, %struct.FrameProbInfo, %struct.MultiThreadInfo, i32, i32, i32, %struct.AV1LrStruct, %struct.aom_film_grain_table_t*, %struct.aom_denoise_and_model_t*, %struct.InterpSearchFlags, i32, i32, i32, i32, %struct.RefFrameDistanceInfo, double*, %struct.SVC, i8, %struct.MV_STATS, i8, i32, i32, %struct.FirstPassData, %struct.noise_estimate, %struct.av1_denoiser, i8*, i8, i32, i64, [8 x i8] }
%struct.AV1_PRIMARY = type { %struct.AV1_COMP*, %struct.AV1_COMP*, %struct.lookahead_ctx*, i32, %struct.aom_codec_pkt_list*, i32, %struct.GF_GROUP, %struct.GF_STATE, i32, %struct.AV1LevelParams, i32, i32, %struct.TWO_PASS, %struct.PRIMARY_RATE_CONTROL, %struct.yv12_buffer_config, %struct.SequenceHeader, i32, i8, i32, i32, %struct.aom_internal_error_info, [22 x %struct.aom_variance_vtable], double*, double*, %struct.TplParams }
%struct.lookahead_ctx = type { i32, i32, [2 x %struct.read_ctx], %struct.lookahead_entry*, i32, i8 }
%struct.read_ctx = type { i32, i32, i32, i32 }
%struct.lookahead_entry = type { %struct.yv12_buffer_config, i64, i64, i32, i64 }
%struct.aom_codec_pkt_list = type { i32, i32, [1 x %struct.aom_codec_cx_pkt] }
%struct.aom_codec_cx_pkt = type { i32, %union.anon.10 }
%union.anon.10 = type { %struct.aom_psnr_pkt }
%struct.aom_psnr_pkt = type { [4 x i32], [4 x i64], [4 x double], [4 x i32], [4 x i64], [4 x double] }
%struct.GF_GROUP = type { [250 x i8], [250 x i8], [250 x i8], [250 x i32], [250 x i32], i32, i32, [250 x i8], [250 x i32], [250 x i8], [250 x i8], i32, i32 }
%struct.GF_STATE = type { i32 }
%struct.AV1LevelParams = type { [32 x i8], i32, [32 x %struct.AV1LevelInfo*] }
%struct.AV1LevelInfo = type { %struct.AV1LevelStats, %struct.AV1LevelSpec, %struct.FrameWindowBuffer, [24 x %struct.DECODER_MODEL] }
%struct.AV1LevelStats = type { i32, i32, i32, i32, i32, i32, i32, i32, double, double, double }
%struct.AV1LevelSpec = type { i8, i32, i32, i32, i32, i32, i32, i32, i64, i64, double, double, double, double }
%struct.FrameWindowBuffer = type { [256 x %struct.FrameRecord], i32, i32 }
%struct.FrameRecord = type { i64, i64, i64, i32, i32, i32, i32, i32 }
%struct.DECODER_MODEL = type { i8, i8, i8, i8, i32, i32, i32, i32, i64, double, double, double, double, i32, i32, i32, [8 x i32], [10 x %struct.FRAME_BUFFER], %struct.DFG_INTERVAL_QUEUE, double, double, i64, double, double, i32, i32, double, double }
%struct.FRAME_BUFFER = type { i32, i32, i32, i8, double }
%struct.DFG_INTERVAL_QUEUE = type { i32, i32, double, [64 x %struct.DFG_INTERVAL] }
%struct.DFG_INTERVAL = type { double, double, double }
%struct.TWO_PASS = type { i32, [36 x %struct.FIRSTPASS_STATS*], i32, %struct.FIRSTPASS_STATS*, %struct.STATS_BUFFER_CTX*, i32, i64, double, double, double, double, double, i8, i64, i64, double, i32, i32, i32, i32, i32, i32, i32, i32 }
%struct.FIRSTPASS_STATS = type { double, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double, i64, double, double }
%struct.STATS_BUFFER_CTX = type { %struct.FIRSTPASS_STATS*, %struct.FIRSTPASS_STATS*, %struct.FIRSTPASS_STATS*, %struct.FIRSTPASS_STATS*, %struct.FIRSTPASS_STATS* }
%struct.PRIMARY_RATE_CONTROL = type { i64, i32, i32, [15 x i32], i32, i32, [150 x %struct.regions], i32, i32, i32, i32, i32, i32, i64, i64, i64, i32, float, i32, i32, i32, i32, i32, i32, i32, i32 }
%struct.regions = type { i32, i32, double, double, double, double, double, i32 }
%struct.SequenceHeader = type { i32, i32, i32, i32, i8, i32, i32, i8, i32, i32, %struct.OrderHintInfo, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i32, i8, i8, i32, i32, i32, i32, i32, i32, i32, i8, i8, i32, [32 x i32], i32, %struct.aom_timing, i8, %struct.aom_dec_model_info, i8, [32 x i8], [32 x i8], [33 x %struct.aom_dec_model_op_parameters] }
%struct.OrderHintInfo = type { i32, i32, i32, i32 }
%struct.aom_timing = type { i32, i32, i32, i32 }
%struct.aom_dec_model_info = type { i32, i32, i32, i32 }
%struct.aom_dec_model_op_parameters = type { i32, i64, i64, i32, i32, i32, i32, i32 }
%struct.aom_internal_error_info = type { i32, i32, [200 x i8], i32, [1 x %struct.__jmp_buf_tag] }
%struct.__jmp_buf_tag = type { [8 x i64], i32, %struct.__sigset_t }
%struct.__sigset_t = type { [16 x i64] }
%struct.aom_variance_vtable = type { i32 (i8*, i32, i8*, i32)*, i32 (i8*, i32, i8*, i32)*, i32 (i8*, i32, i8*, i32, i8*)*, i32 (i8*, i32, i8*, i32, i32*)*, i32 (i8*, i32, i32, i32, i8*, i32, i32*)*, i32 (i8*, i32, i32, i32, i8*, i32, i32*, i8*)*, void (i8*, i32, i8**, i32, i32*)*, void (i8*, i32, i8**, i32, i32*)*, i32 (i8*, i32, i8*, i32, i8*, i8*, i32, i32)*, i32 (i8*, i32, i32, i32, i8*, i32, i8*, i8*, i32, i32, i32*)*, i32 (i8*, i32, i32*, i32*)*, i32 (i8*, i32, i32*, i32*, i32*)*, i32 (i8*, i32, i32, i32, i32*, i32*, i32*)*, i32 (i8*, i32, i8*, i32, i8*, %struct.dist_wtd_comp_params*)*, i32 (i8*, i32, i32, i32, i8*, i32, i32*, i8*, %struct.dist_wtd_comp_params*)* }
%struct.dist_wtd_comp_params = type { i32, i32, i32 }
%struct.TplParams = type { i8, i8, [79 x %struct.TplDepFrame], [35 x %struct.TplDepStats*], [35 x %struct.yv12_buffer_config], %struct.TplDepFrame*, %struct.scale_factors, i32, [7 x %struct.yv12_buffer_config*], [7 x %struct.yv12_buffer_config*], %struct.AV1TplRowMultiThreadSync, i32 }
%struct.TplDepFrame = type { i8, %struct.TplDepStats*, %struct.yv12_buffer_config*, %struct.yv12_buffer_config*, [8 x i32], i32, i32, i32, i32, i32, i32, i32, [256 x double], [256 x double], i32, i32 }
%struct.TplDepStats = type { i64, i64, i64, i64, [2 x i64], i64, i64, [2 x i64], i64, i64, [7 x %union.int_mv], [2 x i32], [7 x i64] }
%union.int_mv = type { i32 }
%struct.scale_factors = type { i32, i32, i32, i32, i32 (i32, %struct.scale_factors*)*, i32 (i32, %struct.scale_factors*)* }
%struct.AV1TplRowMultiThreadSync = type { %union.pthread_mutex_t*, %union.pthread_cond_t*, i32*, i32, i32, i32 }
%union.pthread_mutex_t = type { %struct.__pthread_mutex_s }
%struct.__pthread_mutex_s = type { i32, i32, i32, i32, i32, i16, i16, %struct.__pthread_internal_list }
%struct.__pthread_internal_list = type { %struct.__pthread_internal_list*, %struct.__pthread_internal_list* }
%union.pthread_cond_t = type { %struct.__pthread_cond_s }
%struct.__pthread_cond_s = type { %union.anon.12, %union.anon.14, [2 x i32], [2 x i32], i32, i32, [2 x i32] }
%union.anon.12 = type { i64 }
%union.anon.14 = type { i64 }
%struct.EncQuantDequantParams = type { %struct.QUANTS, %struct.Dequants }
%struct.QUANTS = type { [256 x [8 x i16]], [256 x [8 x i16]], [256 x [8 x i16]], [256 x [8 x i16]], [256 x [8 x i16]], [256 x [8 x i16]], [256 x [8 x i16]], [256 x [8 x i16]], [256 x [8 x i16]], [256 x [8 x i16]], [256 x [8 x i16]], [256 x [8 x i16]], [256 x [8 x i16]], [256 x [8 x i16]], [256 x [8 x i16]], [256 x [8 x i16]], [256 x [8 x i16]], [256 x [8 x i16]] }
%struct.Dequants = type { [256 x [8 x i16]], [256 x [8 x i16]], [256 x [8 x i16]] }
%struct.ThreadData = type { %struct.macroblock, %struct.RD_COUNTS, %struct.FRAME_COUNTS*, %struct.PC_TREE_SHARED_BUFFERS, %struct.SIMPLE_MOTION_DATA_TREE*, %struct.SIMPLE_MOTION_DATA_TREE*, %struct.inter_modes_info*, [2 x [2 x i32*]], %struct.OBMCBuffer, %struct.PALETTE_BUFFER*, %struct.CompoundTypeRdBuffers, i16*, [2 x i8*], i32, i32, i32, i32, [4 x i32], %struct.frame_contexts*, %struct.VP64x64*, i32, %struct.PICK_MODE_CONTEXT*, %struct.TemporalFilterData, %struct.TplTxfmStats, %struct.PixelLevelGradientInfo*, [8 x i8] }
%struct.macroblock = type { [3 x %struct.macroblock_plane], [8 x i8], %struct.macroblockd, %struct.MB_MODE_INFO_EXT, %struct.MB_MODE_INFO_EXT_FRAME*, %struct.frame_contexts*, %struct.frame_contexts*, %struct.CB_COEFF_BUFFER*, [2 x i16], %struct.OBMCBuffer, %struct.PALETTE_BUFFER*, %struct.CompoundTypeRdBuffers, i16*, %struct.aom_internal_error_info*, [2 x i8*], i32, i32, i32, i32, i32, %struct.ModeCosts, %struct.MvCosts*, %struct.IntraBCMVCosts*, %struct.CoeffCosts, i32, i32, i32, i32, i32, i32, %struct.SuperBlockEnc, %struct.CONTENT_STATE_SB, [8 x i32], i32, [8 x i8], [8 x %struct.WARP_SAMPLE_INFO], [1024 x i32], i32, %struct.PartitionSearchInfo, i32, i32, [22 x [169 x i32]], %struct.WinnerModeStats*, i32, i8, %struct.inter_modes_info*, i8, [64 x %struct.COMP_RD_STATS], i32, i32, %struct.intrabc_hash_info, i32, %struct.MB_MODE_INFO*, %struct.PixelLevelGradientInfo*, [2 x i8], [8 x i32], %struct.FullMvLimits, %struct.TxfmSearchParams, %struct.TxfmSearchInfo, [2 x i8], i32, [8 x i32] }
%struct.macroblock_plane = type { i16*, i32*, i32*, i32*, i16*, i8*, %struct.buf_2d, i16*, i16*, i16*, i16*, i16*, i16*, i16* }
%struct.buf_2d = type { i8*, i8*, i32, i32, i32 }
%struct.macroblockd = type { i32, i32, i32, i8, [3 x %struct.macroblockd_plane], %struct.TileInfo, %struct.MB_MODE_INFO**, i8, i8, i8, i8, %struct.MB_MODE_INFO*, %struct.MB_MODE_INFO*, %struct.MB_MODE_INFO*, %struct.MB_MODE_INFO*, i8*, i32, i32, i32, i32, i32, [2 x %struct.scale_factors*], %struct.yv12_buffer_config*, [3 x i8*], [3 x [32 x i8]], i8*, [32 x i8], i8*, i8*, [32 x i8], [3 x %struct.WienerInfo], [3 x %struct.SgrprojInfo], i8, i8, [29 x [8 x %struct.candidate_mv]], [29 x [8 x i16]], i8, i8, [8 x i8], %struct.frame_contexts*, i32, [8 x i32], [8 x i32], i32, i32, %struct.aom_internal_error_info*, %struct.WarpedMotionParams*, i8, [4 x i8], [4 x i8], i8*, %struct.cfl_ctx, [2 x i16], i16*, [2 x i8*], [8 x i8] }
%struct.macroblockd_plane = type { i8, i32, i32, %struct.buf_2d, [2 x %struct.buf_2d], i8*, i8*, [8 x [2 x i16]], i8*, i8, i8, [8 x [19 x i8*]], [8 x [19 x i8*]] }
%struct.TileInfo = type { i32, i32, i32, i32, i32, i32 }
%struct.WienerInfo = type { [8 x i16], [8 x i16] }
%struct.SgrprojInfo = type { i32, [2 x i32] }
%struct.candidate_mv = type { %union.int_mv, %union.int_mv }
%struct.WarpedMotionParams = type { [8 x i32], i16, i16, i16, i16, i8, i8 }
%struct.cfl_ctx = type { [1024 x i16], [1024 x i16], [2 x i32], i32, [2 x [32 x i16]], i32, i32, i32, i32, i32, i32 }
%struct.MB_MODE_INFO_EXT = type { [29 x [4 x %struct.candidate_mv]], [29 x [4 x i16]], [29 x i8], [8 x %union.int_mv], [29 x i16] }
%struct.MB_MODE_INFO_EXT_FRAME = type { [4 x %struct.candidate_mv], [4 x i16], i8, [8 x %union.int_mv], i16, [2 x i16] }
%struct.ModeCosts = type { [20 x [10 x i32]], [4 x [13 x i32]], [13 x [13 x [13 x i32]]], [2 x [13 x [14 x i32]]], [22 x [2 x i32]], [5 x i32], [8 x [7 x i32]], [8 x [2 x [16 x i32]]], [2 x i32], [7 x [7 x i32]], [7 x [7 x i32]], [7 x [5 x [8 x i32]]], [7 x [5 x [8 x i32]]], [7 x [3 x [2 x i32]]], [2 x [2 x i32]], [3 x [2 x i32]], [6 x [2 x i32]], [2 x [2 x i32]], [6 x [2 x i32]], [3 x [2 x i32]], [3 x [6 x [2 x i32]]], [5 x [2 x i32]], [5 x [3 x i32]], [3 x [3 x [3 x i32]]], [3 x [3 x [2 x i32]]], [3 x [2 x [2 x i32]]], [4 x [2 x i32]], [8 x [8 x i32]], [22 x [2 x i32]], [22 x [16 x i32]], [4 x [2 x i32]], [22 x [2 x i32]], [4 x [4 x i32]], [6 x [2 x i32]], [6 x [2 x i32]], [22 x [3 x i32]], [22 x [2 x i32]], [16 x [3 x i32]], [3 x [2 x i32]], [4 x [3 x [5 x i32]]], [21 x [2 x i32]], [4 x [4 x [16 x i32]]], [3 x [4 x [13 x [16 x i32]]]], [3 x i32], [2 x i32], [2 x i32] }
%struct.MvCosts = type { [4 x i32], [2 x [32767 x i32]], [2 x [32767 x i32]], [2 x i32*], [2 x i32*], i32** }
%struct.IntraBCMVCosts = type { [4 x i32], [2 x [32767 x i32]], [2 x i32*] }
%struct.CoeffCosts = type { [5 x [2 x %struct.LV_MAP_COEFF_COST]], [7 x [2 x %struct.LV_MAP_EOB_COST]] }
%struct.LV_MAP_COEFF_COST = type { [13 x [2 x i32]], [4 x [3 x i32]], [42 x [8 x i32]], [9 x [2 x i32]], [3 x [2 x i32]], [21 x [26 x i32]] }
%struct.LV_MAP_EOB_COST = type { [2 x [11 x i32]] }
%struct.SuperBlockEnc = type { i8, i8, i32, [64 x i64], [64 x i64], [64 x [7 x %union.int_mv]], i32 }
%struct.CONTENT_STATE_SB = type { i32, i32, i32 }
%struct.WARP_SAMPLE_INFO = type { i32, [16 x i32], [16 x i32] }
%struct.PartitionSearchInfo = type { [105 x i8] }
%struct.WinnerModeStats = type { %struct.MB_MODE_INFO, %struct.RD_STATS, i64, i32, i32, [16384 x i8], i8 }
%struct.MB_MODE_INFO = type <{ i8, i8, i8, i8, i32, [2 x %union.int_mv], [2 x i8], [2 x i8], %union.int_interpfilters, i8, i8, i8, i8, %struct.WarpedMotionParams, i8, i8, [6 x i8], %struct.INTERINTER_COMPOUND_DATA, [2 x i8], %struct.FILTER_INTRA_MODE_INFO, i8, i8, %struct.PALETTE_MODE_INFO, i8, i8, [16 x i8], i8, [4 x i8], i16, [7 x i8] }>
%union.int_interpfilters = type { i32 }
%struct.INTERINTER_COMPOUND_DATA = type { i8*, i8, i8, i8, i8 }
%struct.FILTER_INTRA_MODE_INFO = type { i8, i8 }
%struct.PALETTE_MODE_INFO = type { [24 x i16], [2 x i8] }
%struct.RD_STATS = type { i32, i64, i64, i64, i32, i32 }
%struct.COMP_RD_STATS = type { [4 x i32], [4 x i64], [4 x i32], [4 x i64], [4 x i32], [2 x %union.int_mv], [2 x i8], i8, %union.int_interpfilters, i32, [2 x i32], %struct.INTERINTER_COMPOUND_DATA }
%struct.intrabc_hash_info = type { [2 x [2 x i32*]], %struct._hash_table, %struct._crc_calculator, %struct._crc_calculator, i32 }
%struct._hash_table = type { %struct.Vector** }
%struct.Vector = type { i64, i64, i64, i8* }
%struct._crc_calculator = type { i32, i32, i32, [256 x i32], i32 }
%struct.FullMvLimits = type { i32, i32, i32, i32 }
%struct.TxfmSearchParams = type { i32, i32, i32, [2 x i32], i32, i8, i32, i32, i8, i32 }
%struct.TxfmSearchInfo = type { i32, [1024 x i8], [1024 x i8], %struct.TxbRdRecords*, i32 }
%struct.TxbRdRecords = type { %struct.MB_RD_RECORD, [256 x %struct.TXB_RD_RECORD], [64 x %struct.TXB_RD_RECORD], [16 x %struct.TXB_RD_RECORD], [4 x %struct.TXB_RD_RECORD], %struct.TXB_RD_RECORD }
%struct.MB_RD_RECORD = type { [8 x %struct.MB_RD_INFO], i32, i32, %struct._CRC32C }
%struct.MB_RD_INFO = type { i8, [16 x i8], [1024 x i8], [1024 x i8], %struct.RD_STATS, i32 }
%struct._CRC32C = type { [8 x [256 x i32]] }
%struct.TXB_RD_RECORD = type { [256 x i32], [256 x %struct.TXB_RD_INFO], i32, i32 }
%struct.TXB_RD_INFO = type { i64, i64, i32, i16, i8, i16, i8, i8, i8, i8 }
%struct.RD_COUNTS = type { [3 x i64], i32, i32, [19 x [16 x i32]], [22 x [2 x i32]], [2 x i32] }
%struct.PC_TREE_SHARED_BUFFERS = type { [3 x i32*], [3 x i32*], [3 x i32*] }
%struct.SIMPLE_MOTION_DATA_TREE = type { i8, i8, [4 x %struct.SIMPLE_MOTION_DATA_TREE*], [8 x %struct.fullpel_mv], [2 x i32], [8 x i32], i32, i32 }
%struct.fullpel_mv = type { i16, i16 }
%struct.inter_modes_info = type { i32, [4 x i8], [1024 x %struct.MB_MODE_INFO], [1024 x i32], [1024 x i64], [1024 x i64], [1024 x %struct.RdIdxPair], [1024 x %struct.RD_STATS], [1024 x %struct.RD_STATS], [1024 x %struct.RD_STATS] }
%struct.RdIdxPair = type { i32, i64 }
%struct.OBMCBuffer = type { i32*, i32*, i8*, i8* }
%struct.PALETTE_BUFFER = type { [4096 x i8], [8192 x i32] }
%struct.CompoundTypeRdBuffers = type { i8*, i8*, i16*, i16*, i8* }
%struct.frame_contexts = type { [5 x [13 x [3 x i16]]], [5 x [2 x [9 x [3 x i16]]]], [2 x [3 x [3 x i16]]], [2 x [2 x [6 x i16]]], [2 x [2 x [7 x i16]]], [2 x [2 x [8 x i16]]], [2 x [2 x [9 x i16]]], [2 x [2 x [10 x i16]]], [2 x [2 x [11 x i16]]], [2 x [2 x [12 x i16]]], [5 x [2 x [4 x [4 x i16]]]], [5 x [2 x [42 x [5 x i16]]]], [5 x [2 x [21 x [5 x i16]]]], [6 x [3 x i16]], [2 x [3 x i16]], [6 x [3 x i16]], [3 x [3 x i16]], [8 x [9 x i16]], [22 x [3 x i16]], [22 x [17 x i16]], [4 x [3 x i16]], [22 x [3 x i16]], [4 x [5 x i16]], [22 x [4 x i16]], [22 x [3 x i16]], [7 x [8 x i16]], [7 x [8 x i16]], [7 x [5 x [9 x i16]]], [7 x [5 x [9 x i16]]], [7 x [3 x [3 x i16]]], [2 x [3 x i16]], [5 x [3 x i16]], [3 x [6 x [3 x i16]]], [5 x [3 x i16]], [3 x [3 x [3 x i16]]], [3 x [3 x [3 x i16]]], [3 x [2 x [3 x i16]]], [21 x [3 x i16]], [6 x [3 x i16]], [6 x [3 x i16]], [3 x [3 x i16]], [3 x [3 x i16]], [4 x [3 x i16]], %struct.nmv_context, %struct.nmv_context, [3 x i16], %struct.segmentation_probs, [22 x [3 x i16]], [6 x i16], [4 x i16], [3 x i16], [3 x i16], [4 x [14 x i16]], [2 x [13 x [15 x i16]]], [20 x [11 x i16]], [16 x [4 x i16]], [5 x [5 x [14 x i16]]], [8 x [8 x i16]], [4 x [3 x [4 x i16]]], [5 x i16], [4 x [5 x i16]], [5 x i16], [3 x [4 x [13 x [17 x i16]]]], [4 x [4 x [17 x i16]]], [9 x i16], [6 x [17 x i16]], i32 }
%struct.nmv_context = type { [5 x i16], [2 x %struct.nmv_component] }
%struct.nmv_component = type { [12 x i16], [2 x [5 x i16]], [5 x i16], [3 x i16], [3 x i16], [3 x i16], [3 x i16], [10 x [3 x i16]] }
%struct.segmentation_probs = type { [9 x i16], [3 x [3 x i16]], [3 x [9 x i16]] }
%struct.VP64x64 = type { %struct.VPVariance, [4 x %struct.VP32x32] }
%struct.VPVariance = type { %struct.VPartVar, [2 x %struct.VPartVar], [2 x %struct.VPartVar] }
%struct.VPartVar = type { i32, i32, i32, i32 }
%struct.VP32x32 = type { %struct.VPVariance, [4 x %struct.VP16x16] }
%struct.VP16x16 = type { %struct.VPVariance, [4 x %struct.VP8x8] }
%struct.VP8x8 = type { %struct.VPVariance, [4 x %struct.VP4x4] }
%struct.VP4x4 = type { %struct.VPVariance, [4 x %struct.VPartVar] }
%struct.TemporalFilterData = type { %struct.FRAME_DIFF, %struct.MB_MODE_INFO*, i32*, i16*, i8* }
%struct.FRAME_DIFF = type { i64, i64 }
%struct.TplTxfmStats = type { [256 x double], i32 }
%struct.PixelLevelGradientInfo = type { i16, i8, i8 }
%struct.FRAME_COUNTS = type { [16 x [3 x i32]] }
%struct.MBMIExtFrameBufferInfo = type { %struct.MB_MODE_INFO_EXT_FRAME*, i32, i32 }
%struct.CB_COEFF_BUFFER = type { [3 x i32*], [3 x i16*], [3 x i8*] }
%struct.CoeffBufferPool = type { i32*, i16*, i8* }
%struct.AV1Common = type { %struct.CurrentFrame, %struct.aom_internal_error_info*, i32, i32, i32, i32, i32, i32, i8, [33 x i32], i32, %struct.RefCntBuffer*, %struct.RefCntBuffer*, [8 x i32], %struct.scale_factors, [8 x %struct.scale_factors], [8 x %struct.RefCntBuffer*], i32, i32, i32, %struct.FeatureFlags, %struct.CommonModeInfoParams, %struct.CommonQuantParams, %struct.segmentation, i8*, %struct.loop_filter_info_n, %struct.loopfilter, [3 x %struct.RestorationInfo], i32*, %struct.RestorationLineBuffers*, %struct.yv12_buffer_config, %struct.CdefInfo, %struct.aom_film_grain_t, %struct.DeltaQInfo, [8 x %struct.WarpedMotionParams], %struct.SequenceHeader*, %struct.frame_contexts*, %struct.frame_contexts*, %struct.CommonTileParams, %struct.BufferPool*, %struct.CommonContexts, i32, [8 x i32], %struct.TPL_MV_REF*, i32, [8 x i32], [8 x i8], i32, i32 }
%struct.CurrentFrame = type { i8, i8, i32, i32, i32, %struct.SkipModeInfo, i32, i32 }
%struct.SkipModeInfo = type { i32, i32, i32, i32 }
%struct.FeatureFlags = type { i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i32, i32, i8 }
%struct.CommonModeInfoParams = type { i32, i32, i32, i32, i32, %struct.MB_MODE_INFO*, i32, i32, i8, %struct.MB_MODE_INFO**, i32, i32, i8*, void (%struct.CommonModeInfoParams*)*, void (%struct.CommonModeInfoParams*)*, void (%struct.CommonModeInfoParams*, i32, i32)* }
%struct.CommonQuantParams = type { i32, i32, i32, i32, i32, i32, [8 x [2 x i16]], [8 x [2 x i16]], [8 x [2 x i16]], [16 x [3 x [19 x i8*]]], [16 x [3 x [19 x i8*]]], [8 x [19 x i8*]], [8 x [19 x i8*]], [8 x [19 x i8*]], i8, i32, i32, i32 }
%struct.segmentation = type { i8, i8, i8, i8, [8 x [8 x i16]], [8 x i32], i32, i8 }
%struct.loop_filter_info_n = type { [64 x %struct.loop_filter_thresh], [3 x [8 x [2 x [8 x [2 x i8]]]]] }
%struct.loop_filter_thresh = type { [16 x i8], [16 x i8], [16 x i8] }
%struct.loopfilter = type { [2 x i32], i32, i32, i32, i8, i8, [8 x i8], [2 x i8], i32 }
%struct.RestorationInfo = type { i32, i32, i32, i32, i32, %struct.RestorationUnitInfo*, %struct.RestorationStripeBoundaries, i32 }
%struct.RestorationUnitInfo = type { i32, [12 x i8], %struct.WienerInfo, %struct.SgrprojInfo, [4 x i8] }
%struct.RestorationStripeBoundaries = type { i8*, i8*, i32, i32 }
%struct.RestorationLineBuffers = type { [3 x [392 x i16]], [3 x [392 x i16]] }
%struct.CdefInfo = type { [3 x i16*], [3 x i16*], i16*, [3 x i64], [3 x i64], i64, i32, i32, [16 x i32], [16 x i32], i32, i32, i32 }
%struct.aom_film_grain_t = type { i32, i32, [14 x [2 x i32]], i32, [10 x [2 x i32]], i32, [10 x [2 x i32]], i32, i32, i32, [24 x i32], [25 x i32], [25 x i32], i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i16 }
%struct.DeltaQInfo = type { i32, i32, i32, i32, i32 }
%struct.CommonTileParams = type { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, [65 x i32], [65 x i32], i32, i32 }
%struct.BufferPool = type { %union.pthread_mutex_t, i8*, i32 (i8*, i64, %struct.aom_codec_frame_buffer*)*, i32 (i8*, %struct.aom_codec_frame_buffer*)*, [16 x %struct.RefCntBuffer], %struct.InternalFrameBufferList }
%struct.aom_codec_frame_buffer = type { i8*, i64, i8* }
%struct.RefCntBuffer = type { i32, i32, [7 x i32], i32, [7 x i32], %struct.MV_REF*, i8*, %struct.segmentation, i32, i32, i32, i32, [8 x %struct.WarpedMotionParams], i32, i8, %struct.aom_film_grain_t, %struct.aom_codec_frame_buffer, %struct.yv12_buffer_config, i8, [4 x i32], [8 x i8], [2 x i8], %struct.frame_contexts }
%struct.MV_REF = type { %union.int_mv, i8 }
%struct.InternalFrameBufferList = type { i32, %struct.InternalFrameBuffer* }
%struct.InternalFrameBuffer = type { i8*, i64, i32 }
%struct.CommonContexts = type { i8**, [3 x i8**], i8**, i32, i32, i32 }
%struct.TPL_MV_REF = type { %union.int_mv, i8 }
%struct.AV1EncoderConfig = type { %struct.InputCfg, %struct.FrameDimensionCfg, %struct.AlgoCfg, %struct.KeyFrameCfg, %struct.RateControlCfg, %struct.QuantizationCfg, %struct.ResizeCfg, %struct.SuperResCfg, %struct.aom_fixed_buf, %struct.ToolCfg, %struct.GFConfig, %struct.TileConfig, %struct.TuneCfg, %struct.ColorCfg, %struct.DecoderModelCfg, %struct.RefFrameCfg, %struct.UnitTestCfg, %struct.MotionModeCfg, %struct.IntraModeCfg, %struct.TxfmSizeTypeCfg, %struct.CompoundTypeCfg, %struct.PartitionCfg, %struct.CostUpdateFreq, float, i32, i32, i32, i32, i32, i32, i32, [32 x i8], i8, i32, i8, i8, i8, i8, i8* }
%struct.InputCfg = type { double, i32, i32, i32, i32 }
%struct.FrameDimensionCfg = type { i32, i32, i32, i32, i32, i32 }
%struct.AlgoCfg = type { i32, i32, i32, i32, i8, i8, i8 }
%struct.KeyFrameCfg = type { i32, i32, i32, i32, i32, i8, i8, i8, i8 }
%struct.RateControlCfg = type { i64, i64, i64, i64, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }
%struct.QuantizationCfg = type { [5 x double], i32, i32, i32, i32, i8, i8, i8, i8 }
%struct.ResizeCfg = type { i8, i8, i8 }
%struct.SuperResCfg = type { i32, i32, i8, i8, i32, i8 }
%struct.aom_fixed_buf = type { i8*, i64 }
%struct.ToolCfg = type { i32, i32, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8 }
%struct.GFConfig = type { i32, i32, i32, i32, i32, i8, i8 }
%struct.TileConfig = type { i32, i32, i32, i32, i32, i32, [64 x i32], [64 x i32], i8, i8, i8 }
%struct.TuneCfg = type { i8*, i8*, i32, i32, i32 }
%struct.ColorCfg = type { i32, i32, i32, i32, i32 }
%struct.DecoderModelCfg = type { %struct.aom_timing, i32, i8, i8, i8 }
%struct.RefFrameCfg = type { i32, i8, i8 }
%struct.UnitTestCfg = type { i32, i32 }
%struct.MotionModeCfg = type { i8, i8, i8 }
%struct.IntraModeCfg = type { i8, i8, i8, i8, i8, i8, i8 }
%struct.TxfmSizeTypeCfg = type { i8, i8, i8, i8, i8, i8, i8 }
%struct.CompoundTypeCfg = type { i8, i8, i8, i8, i8, i8 }
%struct.PartitionCfg = type { i8, i8, i8, i8, i8 }
%struct.CostUpdateFreq = type { i32, i32, i32, i32 }
%struct.TemporalFilterCtx = type { [35 x %struct.yv12_buffer_config*], i32, i32, i32, %struct.scale_factors, [3 x double], i32, i32, i32, i32, i32 }
%struct.ForceIntegerMVInfo = type { [32 x double], i32, i32 }
%struct.RefreshFrameFlagsInfo = type { i8, i8, i8 }
%struct.ExternalFlags = type { i32, %struct.ExtRefreshFrameFlagsInfo, i8, i8, i8, i8, i8, i8 }
%struct.ExtRefreshFrameFlagsInfo = type { i8, i8, i8, i8, i8, i8 }
%struct.yv12_buffer_config = type { %union.anon, %union.anon.0, %union.anon.2, %union.anon.4, %union.anon.6, %union.anon.8, i32, [3 x i8*], i8*, i32, i8*, i64, i32, i64, i32, i32, i32, i32, i32, i32, i8, i32, i32, i32, i32, i32, i32, %struct.aom_metadata_array* }
%union.anon = type { %struct.anon }
%struct.anon = type { i32, i32 }
%union.anon.0 = type { %struct.anon.1 }
%struct.anon.1 = type { i32, i32 }
%union.anon.2 = type { %struct.anon.3 }
%struct.anon.3 = type { i32, i32 }
%union.anon.4 = type { %struct.anon.5 }
%struct.anon.5 = type { i32, i32 }
%union.anon.6 = type { %struct.anon.7 }
%struct.anon.7 = type { i32, i32 }
%union.anon.8 = type { %struct.anon.9 }
%struct.anon.9 = type { i8*, i8*, i8* }
%struct.aom_metadata_array = type { i64, %struct.aom_metadata** }
%struct.aom_metadata = type { i32, i8*, i64, i32 }
%struct.RD_OPT = type { [169 x i32], [8 x [22 x [169 x i32]]], i32, double }
%struct.CODING_CONTEXT = type { %struct.loopfilter, %struct.CdefInfo, %struct.yv12_buffer_config, %struct.RATE_CONTROL, %struct.MV_STATS }
%struct.GlobalMotionInfo = type { i8, [8 x %struct.yv12_buffer_config*], i8*, [2 x i32], [2 x [7 x %struct.FrameDistPair]], i32, i32, i32, [8192 x i32] }
%struct.FrameDistPair = type { i32, i8 }
%struct.WinnerModeParams = type { [3 x [2 x i32]], [3 x i8], [3 x i32], [3 x i32], [3 x i32], [3 x i32] }
%struct.TimeStamps = type { i64, i64, i64 }
%struct.RATE_CONTROL = type { i32, i32, i32, i32, i32, [4 x i32], i32, [4 x double], i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i64, i64, i32, i32, i32, i32, i32, i32, i32, [4 x i32], double, double, i64, i64, i64, i64, i32, i32, i32, i32, i32, i64, i64, i32, i32, i32, i32, i32, i32, i32, [7 x i32], i32, i32, i32, i32, i32 }
%struct.SPEED_FEATURES = type { %struct.HIGH_LEVEL_SPEED_FEATURES, %struct.FIRST_PASS_SPEED_FEATURES, %struct.TPL_SPEED_FEATURES, %struct.GLOBAL_MOTION_SPEED_FEATURES, %struct.PARTITION_SPEED_FEATURES, %struct.MV_SPEED_FEATURES, %struct.INTER_MODE_SPEED_FEATURES, %struct.INTERP_FILTER_SPEED_FEATURES, %struct.INTRA_MODE_SPEED_FEATURES, %struct.TX_SPEED_FEATURES, %struct.RD_CALC_SPEED_FEATURES, %struct.WINNER_MODE_SPEED_FEATURES, %struct.LOOP_FILTER_SPEED_FEATURES, %struct.REAL_TIME_SPEED_FEATURES }
%struct.HIGH_LEVEL_SPEED_FEATURES = type { i32, i8, i32, i8, i32, i8, i32, i32 }
%struct.FIRST_PASS_SPEED_FEATURES = type { i32, i32 }
%struct.TPL_SPEED_FEATURES = type { i32, i32, i32, i32, i8, i8, i32, i32, i32, i32, i32 }
%struct.GLOBAL_MOTION_SPEED_FEATURES = type { i8, i32, i32 }
%struct.PARTITION_SPEED_FEATURES = type { i8, i8, i32, i32, i32, i32, i32, i8, i8, i8, i8, i32, i64, i32, [5 x i32], i32, i32, i32, i32, i32, i32, i8, i32, i8, i32, i32, i32, i32, i32, i32, i32 }
%struct.MV_SPEED_FEATURES = type { i8, i32, i32, i8, i32, i8, i8, i8, i32, [4 x %struct.MESH_PATTERN], [4 x %struct.MESH_PATTERN], i32, i32, i32, i32, i32, i32, i32, i32 }
%struct.MESH_PATTERN = type { i32, i32 }
%struct.INTER_MODE_SPEED_FEATURES = type { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i8, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i8, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }
%struct.INTERP_FILTER_SPEED_FEATURES = type { i32, i32, i32, i32, i32, i32 }
%struct.INTRA_MODE_SPEED_FEATURES = type { [5 x i32], [5 x i32], i32, i32, i32, i32, i32, i32, i32, i32, i32 }
%struct.TX_SPEED_FEATURES = type { i32, i32, i32, i32, i32, %struct.TX_TYPE_SEARCH, i32, i32, i32, i32, i32, i32, i32 }
%struct.TX_TYPE_SEARCH = type { i8, i32, i32, i32, i32, i32, i32, i32, i32, i32 }
%struct.RD_CALC_SPEED_FEATURES = type { i32, i32, i32, i8, i32, i32 }
%struct.WINNER_MODE_SPEED_FEATURES = type { i32, i32, i32, i32, i8, i32, i32 }
%struct.LOOP_FILTER_SPEED_FEATURES = type { i8, i32, i32, i32, i32, i32, i32, i32, i32, i32 }
%struct.REAL_TIME_SPEED_FEATURES = type { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i8, i32, i32, i32, i32, i32, [16 x i32], i32 }
%struct.MotionVectorSearchParams = type { i32, i32, i32 (%struct.macroblockd*, %struct.AV1Common*, %struct.SUBPEL_MOTION_SEARCH_PARAMS*, i32, %struct.mv*, i32*, i32*, %union.int_mv*)*, [3 x [7 x %struct.search_site_config]] }
%struct.SUBPEL_MOTION_SEARCH_PARAMS = type { i32, i32*, i8, i32, %struct.SubpelMvLimits, %struct.MV_COST_PARAMS, %struct.SUBPEL_SEARCH_VAR_PARAMS }
%struct.SubpelMvLimits = type { i32, i32, i32, i32 }
%struct.MV_COST_PARAMS = type { %struct.mv*, %struct.fullpel_mv, i8, i32*, [2 x i32*], i32, i32 }
%struct.SUBPEL_SEARCH_VAR_PARAMS = type { %struct.aom_variance_vtable*, i8, %struct.MSBuffers, i32, i32 }
%struct.MSBuffers = type { %struct.buf_2d*, %struct.buf_2d*, i8*, i8*, i32, i32, i32*, i32* }
%struct.mv = type { i16, i16 }
%struct.search_site_config = type { [22 x [17 x %struct.search_site]], i32, [22 x i32], [22 x i32], i32 }
%struct.search_site = type { %struct.fullpel_mv, i32 }
%struct.EncSegmentationInfo = type { i8*, i8 }
%struct.CYCLIC_REFRESH = type { i32, i32, i32, i32, i32, i32, i32, i32, i32, i8*, i8*, i64, i64, i16, double, i32, [3 x i32], double, i32 }
%struct.ActiveMap = type { i32, i32, i8* }
%struct.RefBufferStack = type { [16 x i32], i32, [16 x i32], i32, [16 x i32], i32 }
%struct.FRAME_INFO = type { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }
%struct.FRAME_INDEX_SET = type { i32 }
%struct.InitialDimensions = type { i32, i32 }
%struct.ResizePendingParams = type { i32, i32 }
%struct.TileDataEnc = type { %struct.TileInfo, [8 x i8], %struct.frame_contexts, %struct.frame_contexts*, i8, [22 x %struct.InterModeRdModel], %struct.AV1EncRowMultiThreadSync, %struct.mv }
%struct.InterModeRdModel = type { i32, double, double, double, double, double, double, double, i32, double, double, double, double, double }
%struct.AV1EncRowMultiThreadSync = type { %union.pthread_mutex_t*, %union.pthread_cond_t*, i32*, i32, i32, i32, i32 }
%struct.TokenInfo = type { [64 x [64 x %struct.TokenExtra*]], [64 x [64 x %struct.TokenList*]] }
%struct.TokenExtra = type { i8 }
%struct.TokenList = type { %struct.TokenExtra*, i32 }
%struct.VarBasedPartitionInfo = type { [5 x i64], i64 }
%struct.FrameProbInfo = type { [7 x [22 x i32]], [7 x i32], [7 x [19 x [16 x i32]]], [7 x [16 x [3 x i32]]] }
%struct.MultiThreadInfo = type { i32, [10 x i32], i32, i32, %struct.AVxWorker*, %struct.EncWorkerData*, i8, %struct.AV1EncRowMultiThreadInfo, %struct.AV1TplRowMultiThreadInfo, %struct.AV1LfSyncData, %struct.AV1LrSyncData, %struct.AV1EncPackBSSync, %struct.AV1GlobalMotionSync, %struct.AV1TemporalFilterSync, %struct.AV1CdefSyncData, %struct.AV1CdefWorker* }
%struct.AVxWorker = type { %struct.AVxWorkerImpl*, i32, i8*, i32 (i8*, i8*)*, i8*, i8*, i32 }
%struct.AVxWorkerImpl = type opaque
%struct.EncWorkerData = type opaque
%struct.AV1EncRowMultiThreadInfo = type { i32, i32, i32, i32, [64 x i32], %union.pthread_mutex_t*, void (%struct.AV1EncRowMultiThreadSync*, i32, i32)*, void (%struct.AV1EncRowMultiThreadSync*, i32, i32, i32)* }
%struct.AV1TplRowMultiThreadInfo = type { void (%struct.AV1TplRowMultiThreadSync*, i32, i32)*, void (%struct.AV1TplRowMultiThreadSync*, i32, i32, i32)* }
%struct.AV1LfSyncData = type { [3 x %union.pthread_mutex_t*], [3 x %union.pthread_cond_t*], [3 x i32*], i32, i32, %struct.LoopFilterWorkerData*, i32, %union.pthread_mutex_t*, %struct.AV1LfMTInfo*, i32, i32 }
%struct.LoopFilterWorkerData = type { %struct.yv12_buffer_config*, %struct.AV1Common*, [3 x %struct.macroblockd_plane], %struct.macroblockd* }
%struct.AV1LfMTInfo = type { i32, i32, i32 }
%struct.AV1LrSyncData = type { [3 x %union.pthread_mutex_t*], [3 x %union.pthread_cond_t*], [3 x i32*], i32, i32, i32, i32, %union.pthread_mutex_t*, %struct.LoopRestorationWorkerData*, %struct.AV1LrMTInfo*, i32, i32 }
%struct.LoopRestorationWorkerData = type { i32*, i8*, i8* }
%struct.AV1LrMTInfo = type { i32, i32, i32, i32, i32, i32, i32 }
%struct.AV1EncPackBSSync = type { %union.pthread_mutex_t*, [512 x %struct.PackBSTileOrder], i32 }
%struct.PackBSTileOrder = type { i16, i32 }
%struct.AV1GlobalMotionSync = type { %struct.JobInfo, %struct.GlobalMotionThreadData*, %union.pthread_mutex_t*, i32, i32, i8 }
%struct.JobInfo = type { [64 x i8], [2 x i8], [2 x i8] }
%struct.GlobalMotionThreadData = type { [1 x %struct.MotionModel], i8* }
%struct.MotionModel = type { [8 x double], i32*, i32 }
%struct.AV1TemporalFilterSync = type { %union.pthread_mutex_t*, i32 }
%struct.AV1CdefSyncData = type { %union.pthread_mutex_t*, %struct.AV1CdefRowSync*, i32, i32, i32 }
%struct.AV1CdefRowSync = type { %union.pthread_mutex_t*, %union.pthread_cond_t*, i32 }
%struct.AV1CdefWorker = type { %struct.AV1Common*, %struct.macroblockd*, [3 x i16*], i16*, [3 x i16*], void (%struct.AV1Common*, %struct.macroblockd*, %struct.CdefBlockInfo*, i16**, i16*, %struct.AV1CdefSyncData*, i32)* }
%struct.CdefBlockInfo = type { i16*, [3 x i16*], [3 x i16*], i8*, [256 x %struct.cdef_list], i32, i32, i32, i32, [4 x i32], i32, i32, i32, i32, i32, i32, [16 x [16 x i32]], [16 x [16 x i32]], i32, i32, i32 }
%struct.cdef_list = type { i8, i8 }
%struct.AV1LrStruct = type { void (%struct.RestorationTileLimits*, %struct.AV1PixelRect*, i32, i8*, i32*, %struct.RestorationLineBuffers*)*, [3 x %struct.FilterFrameCtxt], %struct.yv12_buffer_config*, %struct.yv12_buffer_config* }
%struct.RestorationTileLimits = type { i32, i32, i32, i32 }
%struct.AV1PixelRect = type { i32, i32, i32, i32 }
%struct.FilterFrameCtxt = type { %struct.RestorationInfo*, i32, i32, i32, i32, i32, i8*, i8*, i32, i32, %struct.AV1PixelRect }
%struct.aom_film_grain_table_t = type { %struct.aom_film_grain_table_entry_t*, %struct.aom_film_grain_table_entry_t* }
%struct.aom_film_grain_table_entry_t = type { %struct.aom_film_grain_t, i64, i64, %struct.aom_film_grain_table_entry_t* }
%struct.aom_denoise_and_model_t = type opaque
%struct.InterpSearchFlags = type { i32, i16 }
%struct.RefFrameDistanceInfo = type { [7 x i32], i8, i8 }
%struct.SVC = type { i32, i32, i32, i32, i32, i32, i32, i32, [7 x i32], [7 x i32], [8 x i32], double, i32, [8 x i32], [8 x i8], i32, i32, [8 x i32], [8 x i32], i32, i32, [32 x %struct.LAYER_CONTEXT], [4 x i8], [4 x i32], i32 }
%struct.LAYER_CONTEXT = type { %struct.RATE_CONTROL, %struct.PRIMARY_RATE_CONTROL, i32, i64, i32, i32, i64, i64, double, i32, i32, i32, i32, i32, i8*, i8*, i32, i32, i32, i8, i8, i32, i32 }
%struct.MV_STATS = type { i32, i32, i32, i32, i32, i32, [4 x i32], i32, i32, i32, i32, i32, i32, i32, i32, i32 }
%struct.FirstPassData = type { %struct.FRAME_STATS*, i32* }
%struct.FRAME_STATS = type { i64, i64, i64, i64, i64, i32, i32, i32, i32, double, i32, i32, i32, i32, i32, i32, i32, i32, i64, i64, double, double }
%struct.noise_estimate = type { i32, i32, i32, i32, i32, i32, i32, i32, i32 }
%struct.av1_denoiser = type { %struct.yv12_buffer_config*, %struct.yv12_buffer_config*, %struct.yv12_buffer_config, i32, i32, i32, i32, i32, i32, i32 }
%struct.PICK_MODE_CONTEXT = type { %struct.MB_MODE_INFO, %struct.MB_MODE_INFO_EXT_FRAME, [2 x i8*], i8*, [3 x i32*], [3 x i32*], [3 x i32*], [3 x i16*], [3 x i8*], i8*, i32, i32, i32, i32, i32, %struct.RD_STATS, i32, i64, i64, i64, i8, %union.int_mv, i8, i8, i32 }
%struct.estimate_block_intra_args = type { %struct.AV1_COMP*, %struct.macroblock*, i8, i32, %struct.RD_STATS* }
%struct.FULLPEL_MOTION_SEARCH_PARAMS = type { i8, %struct.aom_variance_vtable*, %struct.MSBuffers, i8, %struct.search_site_config*, %struct.FullMvLimits, i32, i32, i32, [2 x %struct.MESH_PATTERN*], i32, i32, i32, %struct.MV_COST_PARAMS, i32 (i8*, i32, i8*, i32)*, void (i8*, i32, i8**, i32, i32*)* }
%struct.PRED_BUFFER = type { i8*, i32, i32 }
%struct.BUFFER_SET = type { [3 x i8*], [3 x i32] }

@max_txsize_lookup = internal unnamed_addr constant [22 x i8] c"\00\00\00\01\01\01\02\02\02\03\03\03\04\04\04\04\00\00\01\01\02\02", align 16
@tx_mode_to_biggest_tx_size = internal unnamed_addr constant [3 x i8] c"\00\04\04", align 1
@intra_mode_context = internal unnamed_addr constant [13 x i32] [i32 0, i32 1, i32 2, i32 3, i32 4, i32 4, i32 4, i32 4, i32 3, i32 0, i32 1, i32 2, i32 0], align 16
@intra_mode_list = internal unnamed_addr constant [4 x i8] c"\00\01\02\09", align 1
@ref_mode_set_reduced = internal unnamed_addr constant [8 x %struct.REF_MODE] [%struct.REF_MODE { i8 1, i8 15 }, %struct.REF_MODE { i8 1, i8 13 }, %struct.REF_MODE { i8 4, i8 15 }, %struct.REF_MODE { i8 1, i8 14 }, %struct.REF_MODE { i8 1, i8 16 }, %struct.REF_MODE { i8 4, i8 13 }, %struct.REF_MODE { i8 4, i8 14 }, %struct.REF_MODE { i8 4, i8 16 }], align 16
@ref_mode_set_rt = internal unnamed_addr constant [9 x %struct.REF_MODE] [%struct.REF_MODE { i8 1, i8 13 }, %struct.REF_MODE { i8 1, i8 14 }, %struct.REF_MODE { i8 1, i8 16 }, %struct.REF_MODE { i8 4, i8 13 }, %struct.REF_MODE { i8 4, i8 14 }, %struct.REF_MODE { i8 4, i8 16 }, %struct.REF_MODE { i8 7, i8 13 }, %struct.REF_MODE { i8 7, i8 14 }, %struct.REF_MODE { i8 7, i8 16 }], align 16
@block_size_high = internal unnamed_addr constant [22 x i8] c"\04\08\04\08\10\08\10 \10 @ @\80@\80\10\04 \08@\10", align 16
@block_size_wide = internal unnamed_addr constant [22 x i8] c"\04\04\08\08\08\10\10\10   @@@\80\80\04\10\08 \10@", align 16
@b_width_log2_lookup = internal unnamed_addr constant [16 x i8] c"\00\00\01\01\01\02\02\02\03\03\03\04\04\04\05\05", align 16
@b_height_log2_lookup = internal unnamed_addr constant [16 x i8] c"\00\01\00\01\02\01\02\03\02\03\04\03\04\05\04\05", align 16
@aom_convolve_copy = external local_unnamed_addr global void (i8*, i64, i8*, i64, i32, i32)*, align 8
@mode_idx = internal unnamed_addr constant [8 x [4 x i8]] [[4 x i8] c"\9C\A2\A1\9E", [4 x i8] c"\00\0E\15\07", [4 x i8] c"\01\0F\16\08", [4 x i8] c"\02\10\17\09", [4 x i8] c"\06\14\15\0D", [4 x i8] zeroinitializer, [4 x i8] zeroinitializer, [4 x i8] zeroinitializer], align 16
@txsize_to_bsize = internal unnamed_addr constant [19 x i8] c"\00\03\06\09\0C\01\02\04\05\07\08\0A\0B\10\11\12\13\14\15", align 16
@pos_shift_16x16 = internal unnamed_addr constant [4 x [4 x i32]] [[4 x i32] [i32 9, i32 10, i32 13, i32 14], [4 x i32] [i32 11, i32 12, i32 15, i32 16], [4 x i32] [i32 17, i32 18, i32 21, i32 22], [4 x i32] [i32 19, i32 20, i32 23, i32 24]], align 16
@mi_size_wide_log2 = internal unnamed_addr constant [22 x i8] c"\00\00\01\01\01\02\02\02\03\03\03\04\04\04\05\05\00\02\01\03\02\04", align 16
@__const.search_new_mv.cost_list = private unnamed_addr constant [5 x i32] [i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647], align 16
@__const.search_filter_ref.filters = private unnamed_addr constant [2 x i8] c"\00\01", align 1
@mi_size_wide = internal unnamed_addr constant [22 x i8] c"\01\01\02\02\02\04\04\04\08\08\08\10\10\10  \01\04\02\08\04\10", align 16
@mi_size_high = internal unnamed_addr constant [22 x i8] c"\01\02\01\02\04\02\04\08\04\08\10\08\10 \10 \04\01\08\02\10\04", align 16
@aom_subtract_block = external local_unnamed_addr global void (i32, i32, i16*, i64, i8*, i64, i8*, i64)*, align 8
@av1_scan_orders = external local_unnamed_addr constant [19 x [16 x %struct.SCAN_ORDER]], align 16
@aom_hadamard_lp_16x16 = external local_unnamed_addr global void (i16*, i64, i16*)*, align 8
@av1_quantize_lp = external local_unnamed_addr global void (i16*, i64, i16*, i16*, i16*, i16*, i16*, i16*, i16*)*, align 8
@aom_satd_lp = external local_unnamed_addr global i32 (i16*, i32)*, align 8
@av1_block_error_lp = external local_unnamed_addr global i64 (i16*, i16*, i64)*, align 8
@ss_size_lookup = internal unnamed_addr constant [22 x [2 x [2 x i8]]] [[2 x [2 x i8]] zeroinitializer, [2 x [2 x i8]] [[2 x i8] c"\01\00", [2 x i8] c"\FF\00"], [2 x [2 x i8]] [[2 x i8] c"\02\FF", [2 x i8] zeroinitializer], [2 x [2 x i8]] [[2 x i8] c"\03\02", [2 x i8] c"\01\00"], [2 x [2 x i8]] [[2 x i8] c"\04\03", [2 x i8] c"\FF\01"], [2 x [2 x i8]] [[2 x i8] c"\05\FF", [2 x i8] c"\03\02"], [2 x [2 x i8]] [[2 x i8] c"\06\05", [2 x i8] c"\04\03"], [2 x [2 x i8]] [[2 x i8] c"\07\06", [2 x i8] c"\FF\04"], [2 x [2 x i8]] [[2 x i8] c"\08\FF", [2 x i8] c"\06\05"], [2 x [2 x i8]] [[2 x i8] c"\09\08", [2 x i8] c"\07\06"], [2 x [2 x i8]] [[2 x i8] c"\0A\09", [2 x i8] c"\FF\07"], [2 x [2 x i8]] [[2 x i8] c"\0B\FF", [2 x i8] c"\09\08"], [2 x [2 x i8]] [[2 x i8] c"\0C\0B", [2 x i8] c"\0A\09"], [2 x [2 x i8]] [[2 x i8] c"\0D\0C", [2 x i8] c"\FF\0A"], [2 x [2 x i8]] [[2 x i8] c"\0E\FF", [2 x i8] c"\0C\0B"], [2 x [2 x i8]] [[2 x i8] c"\0F\0E", [2 x i8] c"\0D\0C"], [2 x [2 x i8]] [[2 x i8] c"\10\01", [2 x i8] c"\FF\01"], [2 x [2 x i8]] [[2 x i8] c"\11\FF", [2 x i8] c"\02\02"], [2 x [2 x i8]] [[2 x i8] c"\12\04", [2 x i8] c"\FF\10"], [2 x [2 x i8]] [[2 x i8] c"\13\FF", [2 x i8] c"\05\11"], [2 x [2 x i8]] [[2 x i8] c"\14\07", [2 x i8] c"\FF\12"], [2 x [2 x i8]] [[2 x i8] c"\15\FF", [2 x i8] c"\08\13"]], align 16
@num_pels_log2_lookup = internal unnamed_addr constant [22 x i8] c"\04\05\05\06\07\07\08\09\09\0A\0B\0B\0C\0D\0D\0E\06\06\08\08\0A\0A", align 16
@compound_mode_ctx_map = internal unnamed_addr constant [3 x [5 x i16]] [[5 x i16] [i16 0, i16 1, i16 1, i16 1, i16 1], [5 x i16] [i16 1, i16 2, i16 3, i16 4, i16 4], [5 x i16] [i16 4, i16 4, i16 5, i16 6, i16 7]], align 16
@switch.table.av1_nonrd_pick_inter_mode_sb.1 = private unnamed_addr constant [10 x i64] [i64 0, i64 1, i64 2, i64 -1, i64 -1, i64 -1, i64 -1, i64 -1, i64 -1, i64 3], align 8

; Function Attrs: nounwind ssp uwtable
define hidden void @av1_nonrd_pick_intra_mode(%struct.AV1_COMP*, %struct.macroblock*, %struct.RD_STATS* nocapture, i8 zeroext, %struct.PICK_MODE_CONTEXT* nocapture) local_unnamed_addr #0 {
  %6 = alloca %struct.RD_STATS, align 8
  %7 = alloca %struct.estimate_block_intra_args, align 8
  %8 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 2
  %9 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 2, i32 6
  %10 = load %struct.MB_MODE_INFO**, %struct.MB_MODE_INFO*** %9, align 8
  %11 = load %struct.MB_MODE_INFO*, %struct.MB_MODE_INFO** %10, align 8
  %12 = bitcast %struct.RD_STATS* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %12) #4
  %13 = bitcast %struct.RD_STATS* %6 to i64*
  store i64 -6148914691236517206, i64* %13, align 8
  %14 = bitcast %struct.estimate_block_intra_args* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %14) #4
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %14, i8 -86, i64 32, i1 false)
  %15 = getelementptr inbounds %struct.estimate_block_intra_args, %struct.estimate_block_intra_args* %7, i64 0, i32 0
  store %struct.AV1_COMP* %0, %struct.AV1_COMP** %15, align 8
  %16 = getelementptr inbounds %struct.estimate_block_intra_args, %struct.estimate_block_intra_args* %7, i64 0, i32 1
  store %struct.macroblock* %1, %struct.macroblock** %16, align 8
  %17 = getelementptr inbounds %struct.estimate_block_intra_args, %struct.estimate_block_intra_args* %7, i64 0, i32 2
  store i8 0, i8* %17, align 8
  %18 = getelementptr inbounds %struct.estimate_block_intra_args, %struct.estimate_block_intra_args* %7, i64 0, i32 3
  store i32 1, i32* %18, align 4
  %19 = getelementptr inbounds %struct.estimate_block_intra_args, %struct.estimate_block_intra_args* %7, i64 0, i32 4
  store %struct.RD_STATS* null, %struct.RD_STATS** %19, align 8
  %20 = zext i8 %3 to i64
  %21 = getelementptr inbounds [22 x i8], [22 x i8]* @max_txsize_lookup, i64 0, i64 %20
  %22 = load i8, i8* %21, align 1
  %23 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 57, i32 8
  %24 = load i8, i8* %23, align 4
  %25 = zext i8 %24 to i64
  %26 = getelementptr inbounds [3 x i8], [3 x i8]* @tx_mode_to_biggest_tx_size, i64 0, i64 %25
  %27 = load i8, i8* %26, align 1
  %28 = icmp ult i8 %22, %27
  %29 = select i1 %28, i8 %22, i8 %27
  %30 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 2, i32 12
  %31 = load %struct.MB_MODE_INFO*, %struct.MB_MODE_INFO** %30, align 16
  %32 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 2, i32 11
  %33 = load %struct.MB_MODE_INFO*, %struct.MB_MODE_INFO** %32, align 8
  %34 = tail call zeroext i8 @av1_above_block_mode(%struct.MB_MODE_INFO* %31) #4
  %35 = tail call zeroext i8 @av1_left_block_mode(%struct.MB_MODE_INFO* %33) #4
  %36 = zext i8 %34 to i64
  %37 = getelementptr inbounds [13 x i32], [13 x i32]* @intra_mode_context, i64 0, i64 %36
  %38 = load i32, i32* %37, align 4
  %39 = zext i8 %35 to i64
  %40 = getelementptr inbounds [13 x i32], [13 x i32]* @intra_mode_context, i64 0, i64 %39
  %41 = load i32, i32* %40, align 4
  %42 = sext i32 %38 to i64
  %43 = sext i32 %41 to i64
  %44 = getelementptr inbounds %struct.RD_STATS, %struct.RD_STATS* %6, i64 0, i32 0
  store i32 2147483647, i32* %44, align 8
  %45 = getelementptr inbounds %struct.RD_STATS, %struct.RD_STATS* %6, i64 0, i32 1
  %46 = getelementptr inbounds %struct.RD_STATS, %struct.RD_STATS* %6, i64 0, i32 2
  %47 = bitcast i64* %45 to <2 x i64>*
  store <2 x i64> <i64 9223372036854775807, i64 9223372036854775807>, <2 x i64>* %47, align 8
  %48 = getelementptr inbounds %struct.RD_STATS, %struct.RD_STATS* %6, i64 0, i32 3
  store i64 9223372036854775807, i64* %48, align 8
  %49 = getelementptr inbounds %struct.RD_STATS, %struct.RD_STATS* %6, i64 0, i32 4
  store i32 0, i32* %49, align 8
  %50 = getelementptr inbounds %struct.RD_STATS, %struct.RD_STATS* %6, i64 0, i32 5
  store i32 0, i32* %50, align 4
  %51 = getelementptr inbounds %struct.MB_MODE_INFO, %struct.MB_MODE_INFO* %11, i64 0, i32 28
  %52 = load i16, i16* %51, align 1
  %53 = and i16 %52, -49
  store i16 %53, i16* %51, align 1
  %54 = getelementptr inbounds %struct.MB_MODE_INFO, %struct.MB_MODE_INFO* %11, i64 0, i32 2
  store i8 0, i8* %54, align 2
  %55 = getelementptr inbounds %struct.MB_MODE_INFO, %struct.MB_MODE_INFO* %11, i64 0, i32 3
  store i8 0, i8* %55, align 1
  %56 = getelementptr inbounds %struct.MB_MODE_INFO, %struct.MB_MODE_INFO* %11, i64 0, i32 6, i64 0
  store i8 0, i8* %56, align 8
  %57 = getelementptr inbounds %struct.MB_MODE_INFO, %struct.MB_MODE_INFO* %11, i64 0, i32 6, i64 1
  store i8 -1, i8* %57, align 1
  %58 = getelementptr inbounds %struct.MB_MODE_INFO, %struct.MB_MODE_INFO* %11, i64 0, i32 22, i32 1, i64 0
  store i8 0, i8* %58, align 2
  %59 = getelementptr inbounds %struct.MB_MODE_INFO, %struct.MB_MODE_INFO* %11, i64 0, i32 22, i32 1, i64 1
  store i8 0, i8* %59, align 1
  %60 = getelementptr inbounds %struct.MB_MODE_INFO, %struct.MB_MODE_INFO* %11, i64 0, i32 19, i32 1
  store i8 0, i8* %60, align 1
  %61 = getelementptr inbounds %struct.MB_MODE_INFO, %struct.MB_MODE_INFO* %11, i64 0, i32 5, i64 1, i32 0
  store i32 0, i32* %61, align 4
  %62 = getelementptr inbounds %struct.MB_MODE_INFO, %struct.MB_MODE_INFO* %11, i64 0, i32 5, i64 0, i32 0
  store i32 0, i32* %62, align 8
  %63 = getelementptr inbounds %struct.MB_MODE_INFO, %struct.MB_MODE_INFO* %11, i64 0, i32 9
  store i8 0, i8* %63, align 8
  %64 = getelementptr inbounds %struct.MB_MODE_INFO, %struct.MB_MODE_INFO* %11, i64 0, i32 10
  store i8 1, i8* %64, align 1
  %65 = getelementptr inbounds %struct.MB_MODE_INFO, %struct.MB_MODE_INFO* %11, i64 0, i32 14
  store i8 0, i8* %65, align 8
  %66 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 20, i32 13
  %67 = load i8, i8* %66, align 1
  %68 = icmp eq i8 %67, 4
  %69 = select i1 %68, i8 0, i8 %67
  %70 = zext i8 %69 to i32
  %71 = shl nuw nsw i32 %70, 16
  %72 = or i32 %71, %70
  %73 = getelementptr inbounds %struct.MB_MODE_INFO, %struct.MB_MODE_INFO* %11, i64 0, i32 8, i32 0
  store i32 %72, i32* %73, align 4
  store i32 -2147450880, i32* %61, align 4
  store i32 -2147450880, i32* %62, align 8
  %74 = getelementptr inbounds %struct.MB_MODE_INFO, %struct.MB_MODE_INFO* %11, i64 0, i32 24
  %75 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 17
  %76 = getelementptr inbounds i8, i8* %12, i64 4
  %77 = bitcast i8* %76 to i32*
  br label %88

78:                                               ; preds = %148
  store i8 %156, i8* %54, align 2
  store i8 0, i8* %55, align 1
  %79 = bitcast %struct.RD_STATS* %2 to i8*
  %80 = getelementptr inbounds %struct.RD_STATS, %struct.RD_STATS* %2, i64 0, i32 0
  store i32 %149, i32* %80, align 8
  %81 = getelementptr inbounds i8, i8* %79, i64 4
  %82 = bitcast i8* %81 to i32*
  store i32 %150, i32* %82, align 4
  %83 = getelementptr inbounds %struct.RD_STATS, %struct.RD_STATS* %2, i64 0, i32 1
  store i64 %151, i64* %83, align 8
  %84 = getelementptr inbounds %struct.RD_STATS, %struct.RD_STATS* %2, i64 0, i32 2
  store i64 %152, i64* %84, align 8
  %85 = getelementptr inbounds %struct.RD_STATS, %struct.RD_STATS* %2, i64 0, i32 3
  store i64 %153, i64* %85, align 8
  %86 = getelementptr inbounds %struct.RD_STATS, %struct.RD_STATS* %2, i64 0, i32 4
  store i32 %154, i32* %86, align 8
  %87 = getelementptr inbounds %struct.RD_STATS, %struct.RD_STATS* %2, i64 0, i32 5
  store i32 %155, i32* %87, align 4
  call fastcc void @store_coding_context(%struct.macroblock* %1, %struct.PICK_MODE_CONTEXT* %4)
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %14) #4
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %12) #4
  ret void

88:                                               ; preds = %148, %5
  %89 = phi i64 [ 0, %5 ], [ %157, %148 ]
  %90 = phi i8 [ 0, %5 ], [ %156, %148 ]
  %91 = phi i32 [ 0, %5 ], [ %155, %148 ]
  %92 = phi i32 [ 0, %5 ], [ %154, %148 ]
  %93 = phi i64 [ 9223372036854775807, %5 ], [ %153, %148 ]
  %94 = phi i64 [ 9223372036854775807, %5 ], [ %152, %148 ]
  %95 = phi i64 [ 9223372036854775807, %5 ], [ %151, %148 ]
  %96 = phi i32 [ -1431655766, %5 ], [ %150, %148 ]
  %97 = phi i32 [ 2147483647, %5 ], [ %149, %148 ]
  %98 = getelementptr inbounds [4 x i8], [4 x i8]* @intra_mode_list, i64 0, i64 %89
  %99 = load i8, i8* %98, align 1
  store i32 0, i32* %44, align 8
  store i64 0, i64* %45, align 8
  store i8 %99, i8* %17, align 8
  store i32 1, i32* %18, align 4
  store %struct.RD_STATS* %6, %struct.RD_STATS** %19, align 8
  store i8 %29, i8* %74, align 1
  store i8 %99, i8* %54, align 2
  call void @av1_foreach_transformed_block_in_plane(%struct.macroblockd* %8, i8 zeroext %3, i32 0, void (i32, i32, i32, i32, i8, i8, i8*)* nonnull @estimate_block_intra, i8* nonnull %14) #4
  %100 = load %struct.MB_MODE_INFO*, %struct.MB_MODE_INFO** %30, align 16
  %101 = load %struct.MB_MODE_INFO*, %struct.MB_MODE_INFO** %32, align 8
  %102 = icmp eq %struct.MB_MODE_INFO* %100, null
  br i1 %102, label %107, label %103

103:                                              ; preds = %88
  %104 = getelementptr inbounds %struct.MB_MODE_INFO, %struct.MB_MODE_INFO* %100, i64 0, i32 23
  %105 = load i8, i8* %104, align 8
  %106 = sext i8 %105 to i64
  br label %107

107:                                              ; preds = %103, %88
  %108 = phi i64 [ %106, %103 ], [ 0, %88 ]
  %109 = icmp eq %struct.MB_MODE_INFO* %101, null
  br i1 %109, label %114, label %110

110:                                              ; preds = %107
  %111 = getelementptr inbounds %struct.MB_MODE_INFO, %struct.MB_MODE_INFO* %101, i64 0, i32 23
  %112 = load i8, i8* %111, align 8
  %113 = sext i8 %112 to i64
  br label %114

114:                                              ; preds = %107, %110
  %115 = phi i64 [ %113, %110 ], [ 0, %107 ]
  %116 = add nsw i64 %115, %108
  %117 = load i32, i32* %18, align 4
  %118 = icmp eq i32 %117, 0
  br i1 %118, label %122, label %119

119:                                              ; preds = %114
  %120 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 20, i32 38, i64 %116, i64 1
  %121 = load i32, i32* %120, align 4
  br label %127

122:                                              ; preds = %114
  %123 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 20, i32 38, i64 %116, i64 0
  %124 = load i32, i32* %123, align 4
  %125 = load i32, i32* %44, align 8
  %126 = add nsw i32 %125, %124
  br label %127

127:                                              ; preds = %122, %119
  %128 = phi i32 [ %126, %122 ], [ %121, %119 ]
  %129 = zext i8 %99 to i64
  %130 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 20, i32 2, i64 %42, i64 %43, i64 %129
  %131 = load i32, i32* %130, align 4
  %132 = add nsw i32 %131, %128
  store i32 %132, i32* %44, align 8
  %133 = sext i32 %132 to i64
  %134 = load i32, i32* %75, align 8
  %135 = sext i32 %134 to i64
  %136 = mul nsw i64 %135, %133
  %137 = add nsw i64 %136, 256
  %138 = ashr i64 %137, 9
  %139 = load i64, i64* %45, align 8
  %140 = shl nsw i64 %139, 7
  %141 = add nsw i64 %138, %140
  store i64 %141, i64* %46, align 8
  %142 = icmp slt i64 %141, %94
  br i1 %142, label %143, label %148

143:                                              ; preds = %127
  %144 = load i32, i32* %77, align 4
  %145 = load i64, i64* %48, align 8
  %146 = load i32, i32* %49, align 8
  %147 = load i32, i32* %50, align 4
  br label %148

148:                                              ; preds = %143, %127
  %149 = phi i32 [ %132, %143 ], [ %97, %127 ]
  %150 = phi i32 [ %144, %143 ], [ %96, %127 ]
  %151 = phi i64 [ %139, %143 ], [ %95, %127 ]
  %152 = phi i64 [ %141, %143 ], [ %94, %127 ]
  %153 = phi i64 [ %145, %143 ], [ %93, %127 ]
  %154 = phi i32 [ %146, %143 ], [ %92, %127 ]
  %155 = phi i32 [ %147, %143 ], [ %91, %127 ]
  %156 = phi i8 [ %99, %143 ], [ %90, %127 ]
  %157 = add nuw nsw i64 %89, 1
  %158 = icmp eq i64 %157, 4
  br i1 %158, label %78, label %88
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #1

declare zeroext i8 @av1_above_block_mode(%struct.MB_MODE_INFO*) local_unnamed_addr #2

declare zeroext i8 @av1_left_block_mode(%struct.MB_MODE_INFO*) local_unnamed_addr #2

declare void @av1_foreach_transformed_block_in_plane(%struct.macroblockd*, i8 zeroext, i32, void (i32, i32, i32, i32, i8, i8, i8*)*, i8*) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define internal void @estimate_block_intra(i32, i32, i32, i32, i8 zeroext, i8 zeroext, i8* nocapture) #0 {
  %8 = alloca %struct.RD_STATS, align 8
  %9 = alloca i64, align 8
  %10 = bitcast i8* %6 to %struct.AV1_COMP**
  %11 = load %struct.AV1_COMP*, %struct.AV1_COMP** %10, align 8
  %12 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %11, i64 0, i32 8
  %13 = getelementptr inbounds i8, i8* %6, i64 8
  %14 = bitcast i8* %13 to %struct.macroblock**
  %15 = load %struct.macroblock*, %struct.macroblock** %14, align 8
  %16 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %15, i64 0, i32 2
  %17 = sext i32 %0 to i64
  %18 = zext i8 %5 to i64
  %19 = getelementptr inbounds [19 x i8], [19 x i8]* @txsize_to_bsize, i64 0, i64 %18
  %20 = load i8, i8* %19, align 1
  %21 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %15, i64 0, i32 0, i64 %17, i32 6, i32 0
  %22 = load i8*, i8** %21, align 8
  %23 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %15, i64 0, i32 2, i32 4, i64 %17, i32 3, i32 0
  %24 = load i8*, i8** %23, align 8
  %25 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %15, i64 0, i32 0, i64 %17, i32 6, i32 4
  %26 = load i32, i32* %25, align 8
  %27 = sext i32 %26 to i64
  %28 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %15, i64 0, i32 2, i32 4, i64 %17, i32 3, i32 4
  %29 = load i32, i32* %28, align 8
  %30 = sext i32 %29 to i64
  %31 = bitcast %struct.RD_STATS* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %31) #4
  %32 = bitcast %struct.RD_STATS* %8 to i64*
  store i64 -6148914691236517206, i64* %32, align 8
  tail call void @av1_predict_intra_block_facade(%struct.AV1Common* %12, %struct.macroblockd* %16, i32 %0, i32 %3, i32 %2, i8 zeroext %5) #4
  %33 = getelementptr inbounds %struct.RD_STATS, %struct.RD_STATS* %8, i64 0, i32 0
  store i32 2147483647, i32* %33, align 8
  %34 = getelementptr inbounds %struct.RD_STATS, %struct.RD_STATS* %8, i64 0, i32 1
  %35 = bitcast i64* %34 to <2 x i64>*
  store <2 x i64> <i64 9223372036854775807, i64 9223372036854775807>, <2 x i64>* %35, align 8
  %36 = getelementptr inbounds %struct.RD_STATS, %struct.RD_STATS* %8, i64 0, i32 3
  store i64 9223372036854775807, i64* %36, align 8
  %37 = getelementptr inbounds %struct.RD_STATS, %struct.RD_STATS* %8, i64 0, i32 4
  store i32 0, i32* %37, align 8
  %38 = getelementptr inbounds %struct.RD_STATS, %struct.RD_STATS* %8, i64 0, i32 5
  store i32 0, i32* %38, align 4
  %39 = sext i32 %2 to i64
  %40 = mul nsw i64 %27, %39
  %41 = sext i32 %3 to i64
  %42 = add nsw i64 %40, %41
  %43 = shl nsw i64 %42, 2
  %44 = getelementptr inbounds i8, i8* %22, i64 %43
  store i8* %44, i8** %21, align 8
  %45 = mul nsw i64 %30, %39
  %46 = add nsw i64 %45, %41
  %47 = shl nsw i64 %46, 2
  %48 = getelementptr inbounds i8, i8* %24, i64 %47
  store i8* %48, i8** %23, align 8
  %49 = icmp eq i32 %0, 0
  br i1 %49, label %50, label %55

50:                                               ; preds = %7
  %51 = getelementptr inbounds i8, i8* %6, i64 20
  %52 = bitcast i8* %51 to i32*
  %53 = icmp ult i8 %5, 2
  %54 = select i1 %53, i8 %5, i8 2
  call fastcc void @block_yrd(%struct.macroblock* %15, %struct.RD_STATS* nonnull %8, i32* %52, i8 zeroext %20, i8 zeroext %54)
  br label %57

55:                                               ; preds = %7
  %56 = bitcast i64* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %56) #4
  store i64 0, i64* %9, align 8
  call fastcc void @model_rd_for_sb_uv(%struct.AV1_COMP* %11, i8 zeroext %4, %struct.macroblock* %15, %struct.macroblockd* %16, %struct.RD_STATS* nonnull %8, i64* nonnull %9, i32 %0, i32 %0)
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %56) #4
  br label %57

57:                                               ; preds = %55, %50
  store i8* %22, i8** %21, align 8
  store i8* %24, i8** %23, align 8
  %58 = load i32, i32* %33, align 8
  %59 = getelementptr inbounds i8, i8* %6, i64 24
  %60 = bitcast i8* %59 to %struct.RD_STATS**
  %61 = load %struct.RD_STATS*, %struct.RD_STATS** %60, align 8
  %62 = getelementptr inbounds %struct.RD_STATS, %struct.RD_STATS* %61, i64 0, i32 0
  %63 = load i32, i32* %62, align 8
  %64 = add nsw i32 %63, %58
  store i32 %64, i32* %62, align 8
  %65 = load i64, i64* %34, align 8
  %66 = load %struct.RD_STATS*, %struct.RD_STATS** %60, align 8
  %67 = getelementptr inbounds %struct.RD_STATS, %struct.RD_STATS* %66, i64 0, i32 1
  %68 = load i64, i64* %67, align 8
  %69 = add nsw i64 %68, %65
  store i64 %69, i64* %67, align 8
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %31) #4
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: nounwind ssp uwtable
define internal fastcc void @store_coding_context(%struct.macroblock* nocapture readonly, %struct.PICK_MODE_CONTEXT* nocapture) unnamed_addr #0 {
  %3 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %0, i64 0, i32 58, i32 0
  %4 = load i32, i32* %3, align 8
  %5 = getelementptr inbounds %struct.PICK_MODE_CONTEXT, %struct.PICK_MODE_CONTEXT* %1, i64 0, i32 15, i32 4
  store i32 %4, i32* %5, align 8
  %6 = getelementptr inbounds %struct.PICK_MODE_CONTEXT, %struct.PICK_MODE_CONTEXT* %1, i64 0, i32 3
  %7 = load i8*, i8** %6, align 8
  %8 = getelementptr inbounds %struct.PICK_MODE_CONTEXT, %struct.PICK_MODE_CONTEXT* %1, i64 0, i32 10
  %9 = load i32, i32* %8, align 8
  %10 = sext i32 %9 to i64
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %7, i8 0, i64 %10, i1 false)
  %11 = getelementptr inbounds %struct.PICK_MODE_CONTEXT, %struct.PICK_MODE_CONTEXT* %1, i64 0, i32 9
  %12 = load i8*, i8** %11, align 8
  %13 = load i32, i32* %8, align 8
  %14 = sext i32 %13 to i64
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %12, i8 0, i64 %14, i1 false)
  %15 = load i32, i32* %3, align 8
  %16 = getelementptr inbounds %struct.PICK_MODE_CONTEXT, %struct.PICK_MODE_CONTEXT* %1, i64 0, i32 11
  store i32 %15, i32* %16, align 4
  %17 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %0, i64 0, i32 2, i32 6
  %18 = bitcast %struct.MB_MODE_INFO*** %17 to i8***
  %19 = load i8**, i8*** %18, align 8
  %20 = load i8*, i8** %19, align 8
  %21 = getelementptr inbounds %struct.PICK_MODE_CONTEXT, %struct.PICK_MODE_CONTEXT* %1, i64 0, i32 0, i32 0
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %21, i8* align 8 %20, i64 184, i1 false)
  %22 = load i32, i32* %3, align 8
  store i32 %22, i32* %16, align 4
  %23 = getelementptr inbounds %struct.PICK_MODE_CONTEXT, %struct.PICK_MODE_CONTEXT* %1, i64 0, i32 1
  %24 = load %struct.MB_MODE_INFO**, %struct.MB_MODE_INFO*** %17, align 8
  %25 = load %struct.MB_MODE_INFO*, %struct.MB_MODE_INFO** %24, align 8
  %26 = getelementptr inbounds %struct.MB_MODE_INFO, %struct.MB_MODE_INFO* %25, i64 0, i32 6, i64 0
  %27 = getelementptr inbounds %struct.MB_MODE_INFO, %struct.MB_MODE_INFO* %25, i64 0, i32 6, i64 1
  %28 = load i8, i8* %27, align 1
  %29 = icmp sgt i8 %28, 0
  %30 = load i8, i8* %26, align 1
  br i1 %29, label %31, label %61

31:                                               ; preds = %2
  %32 = icmp slt i8 %30, 5
  %33 = icmp sgt i8 %28, 4
  %34 = and i1 %33, %32
  br i1 %34, label %57, label %35

35:                                               ; preds = %31
  switch i8 %30, label %57 [
    i8 1, label %36
    i8 5, label %39
    i8 2, label %43
    i8 3, label %47
    i8 6, label %49
  ]

36:                                               ; preds = %35
  %37 = add i8 %28, -2
  %38 = icmp ult i8 %37, 3
  br i1 %38, label %54, label %57

39:                                               ; preds = %35
  %40 = icmp eq i8 %28, 6
  %41 = select i1 %40, i8 7, i8 -1
  %42 = icmp eq i8 %28, 7
  br i1 %42, label %54, label %51

43:                                               ; preds = %35
  %44 = icmp eq i8 %28, 4
  %45 = select i1 %44, i8 5, i8 -1
  %46 = icmp eq i8 %28, 3
  br i1 %46, label %54, label %51

47:                                               ; preds = %35
  %48 = icmp eq i8 %28, 4
  br i1 %48, label %54, label %57

49:                                               ; preds = %35
  %50 = icmp eq i8 %28, 7
  br i1 %50, label %54, label %57

51:                                               ; preds = %43, %39
  %52 = phi i8 [ %41, %39 ], [ %45, %43 ]
  %53 = icmp sgt i8 %52, -1
  br i1 %53, label %54, label %57

54:                                               ; preds = %36, %51, %49, %47, %43, %39
  %55 = phi i8 [ %52, %51 ], [ 8, %49 ], [ 6, %47 ], [ 3, %39 ], [ 4, %43 ], [ %37, %36 ]
  %56 = add nuw nsw i8 %55, 20
  br label %61

57:                                               ; preds = %36, %51, %49, %47, %35, %31
  %58 = shl i8 %28, 2
  %59 = add i8 %58, -13
  %60 = add i8 %59, %30
  br label %61

61:                                               ; preds = %2, %54, %57
  %62 = phi i8 [ %56, %54 ], [ %60, %57 ], [ %30, %2 ]
  %63 = bitcast %struct.MB_MODE_INFO_EXT_FRAME* %23 to i8*
  %64 = zext i8 %62 to i64
  %65 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %0, i64 0, i32 3, i32 0, i64 %64, i64 0
  %66 = bitcast %struct.candidate_mv* %65 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %63, i8* align 4 %66, i64 32, i1 false) #4
  %67 = getelementptr inbounds %struct.PICK_MODE_CONTEXT, %struct.PICK_MODE_CONTEXT* %1, i64 0, i32 1, i32 1, i64 0
  %68 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %0, i64 0, i32 3, i32 1, i64 %64, i64 0
  %69 = bitcast i16* %68 to i64*
  %70 = bitcast i16* %67 to i64*
  %71 = load i64, i64* %69, align 4
  store i64 %71, i64* %70, align 4
  %72 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %0, i64 0, i32 3, i32 4, i64 %64
  %73 = load i16, i16* %72, align 2
  %74 = getelementptr inbounds %struct.PICK_MODE_CONTEXT, %struct.PICK_MODE_CONTEXT* %1, i64 0, i32 1, i32 4
  store i16 %73, i16* %74, align 4
  %75 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %0, i64 0, i32 3, i32 2, i64 %64
  %76 = load i8, i8* %75, align 1
  %77 = getelementptr inbounds %struct.PICK_MODE_CONTEXT, %struct.PICK_MODE_CONTEXT* %1, i64 0, i32 1, i32 2
  store i8 %76, i8* %77, align 4
  %78 = getelementptr inbounds %struct.PICK_MODE_CONTEXT, %struct.PICK_MODE_CONTEXT* %1, i64 0, i32 1, i32 3, i64 0
  %79 = bitcast %union.int_mv* %78 to i8*
  %80 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %0, i64 0, i32 3, i32 3, i64 0
  %81 = bitcast %union.int_mv* %80 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %79, i8* align 4 %81, i64 32, i1 false) #4
  %82 = getelementptr inbounds %struct.PICK_MODE_CONTEXT, %struct.PICK_MODE_CONTEXT* %1, i64 0, i32 13
  store i32 0, i32* %82, align 4
  %83 = getelementptr inbounds %struct.PICK_MODE_CONTEXT, %struct.PICK_MODE_CONTEXT* %1, i64 0, i32 12
  store i32 0, i32* %83, align 8
  %84 = getelementptr inbounds %struct.PICK_MODE_CONTEXT, %struct.PICK_MODE_CONTEXT* %1, i64 0, i32 14
  store i32 0, i32* %84, align 8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @av1_nonrd_pick_inter_mode_sb(%struct.AV1_COMP*, %struct.TileDataEnc* nocapture readnone, %struct.macroblock*, %struct.RD_STATS* nocapture, i8 zeroext, %struct.PICK_MODE_CONTEXT*) local_unnamed_addr #0 {
  %7 = alloca %struct.RD_STATS, align 8
  %8 = alloca %struct.estimate_block_intra_args, align 8
  %9 = alloca [2 x %struct.RD_STATS], align 16
  %10 = alloca i16, align 2
  %11 = alloca [3 x %struct.buf_2d], align 16
  %12 = alloca i32, align 4
  %13 = alloca i32, align 4
  %14 = alloca i32, align 4
  %15 = alloca [5 x i32], align 16
  %16 = alloca %struct.FULLPEL_MOTION_SEARCH_PARAMS, align 8
  %17 = alloca i32, align 4
  %18 = alloca %struct.SUBPEL_MOTION_SEARCH_PARAMS, align 8
  %19 = alloca i32, align 4
  %20 = alloca [5 x i32], align 16
  %21 = alloca %union.int_mv, align 4
  %22 = alloca i32, align 4
  %23 = alloca %struct.SUBPEL_MOTION_SEARCH_PARAMS, align 8
  %24 = alloca %struct.RD_STATS, align 8
  %25 = alloca [25 x [8 x %union.int_mv]], align 16
  %26 = alloca [25 x [8 x i8]], align 16
  %27 = alloca [8 x [3 x %struct.buf_2d]], align 16
  %28 = alloca %struct.RD_STATS, align 8
  %29 = alloca [8 x i32], align 16
  %30 = alloca [8 x i32], align 16
  %31 = alloca [4 x %struct.PRED_BUFFER], align 16
  %32 = alloca [49152 x i8], align 16
  %33 = alloca { i8*, i32, i32, i32 }, align 8
  %34 = alloca i32, align 4
  %35 = alloca i32, align 4
  %36 = alloca %struct.RD_STATS, align 8
  %37 = alloca i32, align 4
  %38 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8
  %39 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 75
  %40 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %2, i64 0, i32 2
  %41 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %2, i64 0, i32 2, i32 6
  %42 = load %struct.MB_MODE_INFO**, %struct.MB_MODE_INFO*** %41, align 8
  %43 = load %struct.MB_MODE_INFO*, %struct.MB_MODE_INFO** %42, align 8
  %44 = bitcast [25 x [8 x %union.int_mv]]* %25 to i8*
  call void @llvm.lifetime.start.p0i8(i64 800, i8* nonnull %44) #4
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %44, i8 -86, i64 800, i1 false)
  %45 = getelementptr inbounds [25 x [8 x i8]], [25 x [8 x i8]]* %26, i64 0, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 200, i8* nonnull %45) #4
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %45, i8 -86, i64 200, i1 false)
  %46 = bitcast [8 x [3 x %struct.buf_2d]]* %27 to i8*
  call void @llvm.lifetime.start.p0i8(i64 768, i8* nonnull %46) #4
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %46, i8 -86, i64 768, i1 false)
  %47 = bitcast %struct.RD_STATS* %28 to i8*
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %47) #4
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %47, i8 -86, i64 40, i1 false)
  %48 = getelementptr inbounds %struct.MB_MODE_INFO, %struct.MB_MODE_INFO* %43, i64 0, i32 28
  %49 = load i16, i16* %48, align 1
  %50 = and i16 %49, 7
  %51 = zext i16 %50 to i64
  %52 = zext i8 %4 to i64
  %53 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 20, i32 13
  %54 = load i8, i8* %53, align 1
  %55 = bitcast [8 x i32]* %29 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %55) #4
  %56 = getelementptr inbounds [8 x i32], [8 x i32]* %29, i64 0, i64 0
  %57 = getelementptr inbounds [8 x i32], [8 x i32]* %29, i64 0, i64 1
  %58 = getelementptr inbounds [8 x i32], [8 x i32]* %29, i64 0, i64 4
  %59 = getelementptr inbounds [8 x i32], [8 x i32]* %29, i64 0, i64 7
  %60 = bitcast [8 x i32]* %30 to i8*
  %61 = bitcast [8 x i32]* %29 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %61, i8 -86, i64 32, i1 false)
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %60) #4
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %60, i8 0, i64 32, i1 false)
  %62 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 9, i32 30
  %63 = load i32, i32* %62, align 4
  %64 = icmp sgt i32 %63, 8
  br i1 %64, label %65, label %69

65:                                               ; preds = %6
  %66 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 36, i32 50
  %67 = load i32, i32* %66, align 8
  %68 = icmp sgt i32 %67, 70
  br i1 %68, label %73, label %69

69:                                               ; preds = %6, %65
  %70 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 40, i32 13, i32 28
  %71 = load i32, i32* %70, align 4
  %72 = icmp eq i32 %71, 0
  br i1 %72, label %74, label %73

73:                                               ; preds = %69, %65
  br label %74

74:                                               ; preds = %69, %73
  %75 = phi i64 [ 8, %73 ], [ 9, %69 ]
  %76 = phi %struct.REF_MODE* [ getelementptr inbounds ([8 x %struct.REF_MODE], [8 x %struct.REF_MODE]* @ref_mode_set_reduced, i64 0, i64 0), %73 ], [ getelementptr inbounds ([9 x %struct.REF_MODE], [9 x %struct.REF_MODE]* @ref_mode_set_rt, i64 0, i64 0), %69 ]
  %77 = bitcast [4 x %struct.PRED_BUFFER]* %31 to i8*
  call void @llvm.lifetime.start.p0i8(i64 64, i8* nonnull %77) #4
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %77, i8 -86, i64 64, i1 false)
  %78 = getelementptr inbounds [49152 x i8], [49152 x i8]* %32, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 49152, i8* nonnull %78) #4
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %78, i8 -86, i64 49152, i1 false)
  %79 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 40, i32 13, i32 13
  %80 = load i32, i32* %79, align 4
  %81 = icmp eq i32 %80, 0
  br i1 %81, label %88, label %82

82:                                               ; preds = %74
  %83 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 35
  %84 = load %struct.SequenceHeader*, %struct.SequenceHeader** %83, align 16
  %85 = getelementptr inbounds %struct.SequenceHeader, %struct.SequenceHeader* %84, i64 0, i32 25
  %86 = load i32, i32* %85, align 8
  %87 = icmp eq i32 %86, 8
  br label %88

88:                                               ; preds = %74, %82
  %89 = phi i1 [ false, %74 ], [ %87, %82 ]
  %90 = getelementptr inbounds [22 x i8], [22 x i8]* @block_size_high, i64 0, i64 %52
  %91 = load i8, i8* %90, align 1
  %92 = zext i8 %91 to i32
  %93 = getelementptr inbounds [22 x i8], [22 x i8]* @block_size_wide, i64 0, i64 %52
  %94 = load i8, i8* %93, align 1
  %95 = zext i8 %94 to i32
  %96 = mul nuw nsw i32 %95, %92
  %97 = bitcast { i8*, i32, i32, i32 }* %33 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %97)
  %98 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %2, i64 0, i32 2, i32 4, i64 0, i32 3
  %99 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %2, i64 0, i32 2, i32 4, i64 0, i32 3, i32 0
  %100 = load i8*, i8** %99, align 8
  %101 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %2, i64 0, i32 2, i32 4, i64 0, i32 3, i32 1
  %102 = bitcast i8** %101 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %97, i8* align 8 %102, i64 24, i1 false)
  %103 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 22
  %104 = getelementptr inbounds %struct.macroblockd, %struct.macroblockd* %40, i64 0, i32 0
  %105 = load i32, i32* %104, align 16
  %106 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %2, i64 0, i32 2, i32 1
  %107 = load i32, i32* %106, align 4
  %108 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 54, i32 0
  %109 = load i32, i32* %108, align 16
  %110 = icmp eq i32 %109, 0
  br i1 %110, label %123, label %111

111:                                              ; preds = %88
  %112 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 54, i32 1
  %113 = load i32, i32* %112, align 4
  %114 = icmp eq i32 %113, 0
  br i1 %114, label %123, label %115

115:                                              ; preds = %111
  %116 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 2
  %117 = load i32, i32* %116, align 16
  %118 = icmp eq i32 %117, %109
  br i1 %118, label %119, label %123

119:                                              ; preds = %115
  %120 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 3
  %121 = load i32, i32* %120, align 4
  %122 = icmp eq i32 %121, %113
  br label %123

123:                                              ; preds = %115, %111, %88, %119
  %124 = phi i1 [ true, %111 ], [ true, %88 ], [ false, %115 ], [ %122, %119 ]
  %125 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 23, i32 0
  %126 = load i8, i8* %125, align 4
  %127 = icmp eq i8 %126, 0
  br i1 %127, label %134, label %128

128:                                              ; preds = %123
  %129 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 23, i32 5, i64 %51
  %130 = load i32, i32* %129, align 4
  %131 = and i32 %130, 32
  %132 = icmp eq i32 %131, 0
  br i1 %132, label %134, label %133

133:                                              ; preds = %128
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %55, i8 0, i64 32, i1 false) #4
  br label %153

134:                                              ; preds = %128, %123
  %135 = tail call i32 @av1_get_intra_inter_context(%struct.macroblockd* %40) #4
  %136 = sext i32 %135 to i64
  %137 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %2, i64 0, i32 20, i32 26, i64 %136, i64 0
  %138 = load i32, i32* %137, align 4
  store i32 %138, i32* %56, align 16
  %139 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %2, i64 0, i32 20, i32 26, i64 %136, i64 1
  %140 = load i32, i32* %139, align 4
  %141 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %2, i64 0, i32 20, i32 20, i64 0, i64 0, i64 0
  %142 = load i32, i32* %141, align 4
  %143 = add i32 %142, %140
  store i32 %143, i32* %57, align 4
  %144 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %2, i64 0, i32 20, i32 20, i64 0, i64 0, i64 1
  %145 = load i32, i32* %144, align 4
  %146 = add i32 %145, %140
  %147 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %2, i64 0, i32 20, i32 20, i64 0, i64 1, i64 0
  %148 = load i32, i32* %147, align 4
  %149 = add i32 %148, %146
  store i32 %149, i32* %58, align 16
  %150 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %2, i64 0, i32 20, i32 20, i64 0, i64 2, i64 0
  %151 = load i32, i32* %150, align 4
  %152 = add i32 %151, %146
  store i32 %152, i32* %59, align 4
  br label %153

153:                                              ; preds = %133, %134
  %154 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 40, i32 13, i32 9
  %155 = load i32, i32* %154, align 4
  %156 = icmp eq i32 %155, 0
  br i1 %156, label %180, label %157

157:                                              ; preds = %153
  %158 = load i8, i8* %125, align 4
  %159 = icmp eq i8 %158, 0
  br i1 %159, label %165, label %160

160:                                              ; preds = %157
  %161 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 23, i32 5, i64 %51
  %162 = load i32, i32* %161, align 4
  %163 = and i32 %162, 32
  %164 = icmp eq i32 %163, 0
  br i1 %164, label %165, label %180

165:                                              ; preds = %160, %157
  %166 = tail call i32 @av1_get_intra_inter_context(%struct.macroblockd* %40) #4
  %167 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 0, i32 1
  %168 = load i8, i8* %167, align 1
  %169 = icmp eq i8 %168, 0
  br i1 %169, label %180, label %170

170:                                              ; preds = %165
  %171 = tail call i32 @av1_get_pred_context_comp_bwdref_p(%struct.macroblockd* %40) #4
  %172 = tail call i32 @av1_get_pred_context_comp_bwdref_p1(%struct.macroblockd* %40) #4
  %173 = tail call i32 @av1_get_pred_context_comp_ref_p(%struct.macroblockd* %40) #4
  %174 = tail call i32 @av1_get_pred_context_comp_ref_p1(%struct.macroblockd* %40) #4
  %175 = tail call i32 @av1_get_pred_context_comp_ref_p2(%struct.macroblockd* %40) #4
  %176 = tail call i32 @av1_get_comp_reference_type_context(%struct.macroblockd* %40) #4
  %177 = tail call i32 @av1_get_pred_context_uni_comp_ref_p(%struct.macroblockd* %40) #4
  %178 = tail call i32 @av1_get_pred_context_uni_comp_ref_p1(%struct.macroblockd* %40) #4
  %179 = tail call i32 @av1_get_pred_context_uni_comp_ref_p2(%struct.macroblockd* %40) #4
  br label %180

180:                                              ; preds = %160, %170, %165, %153
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %45, i8 0, i64 200, i1 false)
  br i1 %89, label %181, label %204

181:                                              ; preds = %180
  %182 = zext i32 %96 to i64
  %183 = getelementptr inbounds [4 x %struct.PRED_BUFFER], [4 x %struct.PRED_BUFFER]* %31, i64 0, i64 0, i32 0
  store i8* %78, i8** %183, align 16
  %184 = getelementptr inbounds [4 x %struct.PRED_BUFFER], [4 x %struct.PRED_BUFFER]* %31, i64 0, i64 0, i32 1
  store i32 %95, i32* %184, align 8
  %185 = getelementptr inbounds [4 x %struct.PRED_BUFFER], [4 x %struct.PRED_BUFFER]* %31, i64 0, i64 0, i32 2
  store i32 0, i32* %185, align 4
  %186 = getelementptr inbounds [49152 x i8], [49152 x i8]* %32, i64 0, i64 %182
  %187 = getelementptr inbounds [4 x %struct.PRED_BUFFER], [4 x %struct.PRED_BUFFER]* %31, i64 0, i64 1, i32 0
  store i8* %186, i8** %187, align 16
  %188 = getelementptr inbounds [4 x %struct.PRED_BUFFER], [4 x %struct.PRED_BUFFER]* %31, i64 0, i64 1, i32 1
  store i32 %95, i32* %188, align 8
  %189 = getelementptr inbounds [4 x %struct.PRED_BUFFER], [4 x %struct.PRED_BUFFER]* %31, i64 0, i64 1, i32 2
  store i32 0, i32* %189, align 4
  %190 = shl nuw nsw i32 %96, 1
  %191 = zext i32 %190 to i64
  %192 = getelementptr inbounds [49152 x i8], [49152 x i8]* %32, i64 0, i64 %191
  %193 = getelementptr inbounds [4 x %struct.PRED_BUFFER], [4 x %struct.PRED_BUFFER]* %31, i64 0, i64 2, i32 0
  store i8* %192, i8** %193, align 16
  %194 = getelementptr inbounds [4 x %struct.PRED_BUFFER], [4 x %struct.PRED_BUFFER]* %31, i64 0, i64 2, i32 1
  store i32 %95, i32* %194, align 8
  %195 = getelementptr inbounds [4 x %struct.PRED_BUFFER], [4 x %struct.PRED_BUFFER]* %31, i64 0, i64 2, i32 2
  store i32 0, i32* %195, align 4
  %196 = bitcast %struct.buf_2d* %98 to i64*
  %197 = load i64, i64* %196, align 8
  %198 = getelementptr inbounds [4 x %struct.PRED_BUFFER], [4 x %struct.PRED_BUFFER]* %31, i64 0, i64 3
  %199 = bitcast %struct.PRED_BUFFER* %198 to i64*
  store i64 %197, i64* %199, align 16
  %200 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %2, i64 0, i32 2, i32 4, i64 0, i32 3, i32 4
  %201 = load i32, i32* %200, align 8
  %202 = getelementptr inbounds [4 x %struct.PRED_BUFFER], [4 x %struct.PRED_BUFFER]* %31, i64 0, i64 3, i32 1
  store i32 %201, i32* %202, align 8
  %203 = getelementptr inbounds [4 x %struct.PRED_BUFFER], [4 x %struct.PRED_BUFFER]* %31, i64 0, i64 3, i32 2
  store i32 0, i32* %203, align 4
  br label %204

204:                                              ; preds = %181, %180
  %205 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %2, i64 0, i32 58, i32 0
  store i32 0, i32* %205, align 8
  %206 = getelementptr inbounds %struct.RD_STATS, %struct.RD_STATS* %28, i64 0, i32 0
  store i32 2147483647, i32* %206, align 8
  %207 = getelementptr inbounds %struct.RD_STATS, %struct.RD_STATS* %28, i64 0, i32 1
  %208 = getelementptr inbounds %struct.RD_STATS, %struct.RD_STATS* %28, i64 0, i32 2
  %209 = bitcast i64* %207 to <2 x i64>*
  store <2 x i64> <i64 9223372036854775807, i64 9223372036854775807>, <2 x i64>* %209, align 8
  %210 = getelementptr inbounds %struct.RD_STATS, %struct.RD_STATS* %28, i64 0, i32 3
  store i64 9223372036854775807, i64* %210, align 8
  %211 = getelementptr inbounds %struct.RD_STATS, %struct.RD_STATS* %28, i64 0, i32 4
  store i32 0, i32* %211, align 8
  %212 = getelementptr inbounds %struct.RD_STATS, %struct.RD_STATS* %28, i64 0, i32 5
  store i32 0, i32* %212, align 4
  %213 = getelementptr inbounds %struct.RD_STATS, %struct.RD_STATS* %3, i64 0, i32 0
  store i32 2147483647, i32* %213, align 8
  %214 = getelementptr inbounds %struct.RD_STATS, %struct.RD_STATS* %3, i64 0, i32 1
  %215 = getelementptr inbounds %struct.RD_STATS, %struct.RD_STATS* %3, i64 0, i32 2
  %216 = bitcast i64* %214 to <2 x i64>*
  store <2 x i64> <i64 9223372036854775807, i64 9223372036854775807>, <2 x i64>* %216, align 8
  %217 = getelementptr inbounds %struct.RD_STATS, %struct.RD_STATS* %3, i64 0, i32 3
  store i64 9223372036854775807, i64* %217, align 8
  %218 = getelementptr inbounds %struct.RD_STATS, %struct.RD_STATS* %3, i64 0, i32 4
  store i32 0, i32* %218, align 8
  %219 = getelementptr inbounds %struct.RD_STATS, %struct.RD_STATS* %3, i64 0, i32 5
  store i32 0, i32* %219, align 4
  %220 = getelementptr inbounds %struct.MB_MODE_INFO, %struct.MB_MODE_INFO* %43, i64 0, i32 0
  store i8 %4, i8* %220, align 8
  %221 = getelementptr inbounds %struct.MB_MODE_INFO, %struct.MB_MODE_INFO* %43, i64 0, i32 6, i64 0
  store i8 -1, i8* %221, align 8
  %222 = getelementptr inbounds %struct.MB_MODE_INFO, %struct.MB_MODE_INFO* %43, i64 0, i32 6, i64 1
  store i8 -1, i8* %222, align 1
  %223 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 9, i32 26
  %224 = load i32, i32* %223, align 4
  %225 = icmp sgt i32 %224, 0
  br i1 %225, label %226, label %231

226:                                              ; preds = %204
  %227 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 83, i32 8
  %228 = load i32, i32* %227, align 4
  %229 = icmp eq i32 %228, 0
  br i1 %229, label %231, label %230

230:                                              ; preds = %226
  call void @av1_denoiser_reset_frame_stats(%struct.PICK_MODE_CONTEXT* %5) #4
  br label %231

231:                                              ; preds = %226, %230, %204
  %232 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 13, i64 0
  %233 = load i32, i32* %232, align 4
  %234 = icmp eq i32 %233, -1
  %235 = sext i32 %233 to i64
  %236 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 15, i64 %235
  %237 = select i1 %234, %struct.scale_factors* null, %struct.scale_factors* %236
  %238 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 13, i64 3
  %239 = load i32, i32* %238, align 4
  %240 = icmp eq i32 %239, -1
  %241 = sext i32 %239 to i64
  %242 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 15, i64 %241
  %243 = select i1 %240, %struct.scale_factors* null, %struct.scale_factors* %242
  %244 = getelementptr inbounds %struct.scale_factors, %struct.scale_factors* %237, i64 0, i32 0
  %245 = load i32, i32* %244, align 8
  %246 = getelementptr inbounds %struct.scale_factors, %struct.scale_factors* %243, i64 0, i32 0
  %247 = load i32, i32* %246, align 8
  %248 = icmp eq i32 %245, %247
  br i1 %248, label %249, label %256

249:                                              ; preds = %231
  %250 = getelementptr inbounds %struct.scale_factors, %struct.scale_factors* %237, i64 0, i32 1
  %251 = load i32, i32* %250, align 4
  %252 = getelementptr inbounds %struct.scale_factors, %struct.scale_factors* %243, i64 0, i32 1
  %253 = load i32, i32* %252, align 4
  %254 = icmp eq i32 %251, %253
  %255 = zext i1 %254 to i32
  br label %256

256:                                              ; preds = %231, %249
  %257 = phi i32 [ 0, %231 ], [ %255, %249 ]
  %258 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 0
  %259 = load %struct.AV1_PRIMARY*, %struct.AV1_PRIMARY** %258, align 16
  %260 = getelementptr inbounds %struct.AV1_PRIMARY, %struct.AV1_PRIMARY* %259, i64 0, i32 16
  %261 = load i32, i32* %260, align 8
  %262 = icmp eq i32 %261, 0
  br i1 %262, label %281, label %263

263:                                              ; preds = %256
  %264 = getelementptr inbounds %struct.SVC, %struct.SVC* %39, i64 0, i32 0
  %265 = load i32, i32* %264, align 8
  %266 = icmp sgt i32 %265, 0
  br i1 %266, label %267, label %286

267:                                              ; preds = %263
  %268 = add nsw i32 %265, -1
  %269 = sext i32 %268 to i64
  %270 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 75, i32 23, i64 %269
  %271 = load i32, i32* %270, align 4
  %272 = icmp eq i32 %271, 8
  br i1 %272, label %273, label %286

273:                                              ; preds = %267
  %274 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 2
  %275 = load i32, i32* %274, align 16
  %276 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 3
  %277 = load i32, i32* %276, align 4
  %278 = mul nsw i32 %277, %275
  %279 = icmp sgt i32 %278, 307200
  %280 = select i1 %279, i32 -4, i32 0
  br label %286

281:                                              ; preds = %256
  %282 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 40, i32 13, i32 8
  %283 = load i32, i32* %282, align 8
  %284 = icmp ne i32 %283, 0
  %285 = zext i1 %284 to i32
  br label %286

286:                                              ; preds = %263, %267, %273, %281
  %287 = phi i32 [ 0, %281 ], [ %280, %273 ], [ 0, %263 ], [ 0, %267 ]
  %288 = phi i32 [ %285, %281 ], [ 1, %273 ], [ 1, %263 ], [ 1, %267 ]
  %289 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 35
  %290 = load %struct.SequenceHeader*, %struct.SequenceHeader** %289, align 16
  %291 = getelementptr inbounds %struct.SequenceHeader, %struct.SequenceHeader* %290, i64 0, i32 7
  %292 = load i8, i8* %291, align 4
  %293 = icmp eq i8 %292, 12
  %294 = getelementptr inbounds [8 x i32], [8 x i32]* %30, i64 0, i64 1
  store i32 1, i32* %294, align 4
  %295 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 36, i32 8
  %296 = load i32, i32* %295, align 8
  %297 = icmp ne i32 %296, 0
  %298 = icmp eq i32 %257, 0
  %299 = or i1 %298, %297
  %300 = zext i1 %297 to i32
  %301 = xor i32 %257, 1
  %302 = or i32 %301, %300
  %303 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 40, i32 13, i32 11
  %304 = load i32, i32* %303, align 4
  %305 = icmp eq i32 %304, 0
  br i1 %305, label %455, label %306

306:                                              ; preds = %286
  %307 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %2, i64 0, i32 37
  %308 = load i32, i32* %307, align 16
  %309 = icmp eq i32 %308, 0
  br i1 %309, label %455, label %310

310:                                              ; preds = %306
  %311 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %2, i64 0, i32 38, i32 0, i64 0
  br i1 %293, label %312, label %380

312:                                              ; preds = %310
  %313 = and i32 %105, 15
  %314 = and i32 %107, 15
  switch i8 %4, label %448 [
    i8 12, label %315
    i8 11, label %317
    i8 10, label %331
    i8 9, label %345
    i8 8, label %370
    i8 7, label %370
    i8 6, label %370
  ]

315:                                              ; preds = %312
  %316 = load i8, i8* %311, align 1
  br label %448

317:                                              ; preds = %312
  %318 = or i32 %107, %105
  %319 = and i32 %318, 15
  %320 = icmp eq i32 %319, 0
  br i1 %320, label %321, label %324

321:                                              ; preds = %317
  %322 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %2, i64 0, i32 38, i32 0, i64 1
  %323 = load i8, i8* %322, align 1
  br label %448

324:                                              ; preds = %317
  %325 = icmp ne i32 %313, 0
  %326 = icmp eq i32 %314, 0
  %327 = and i1 %325, %326
  br i1 %327, label %328, label %448

328:                                              ; preds = %324
  %329 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %2, i64 0, i32 38, i32 0, i64 2
  %330 = load i8, i8* %329, align 1
  br label %448

331:                                              ; preds = %312
  %332 = or i32 %107, %105
  %333 = and i32 %332, 15
  %334 = icmp eq i32 %333, 0
  br i1 %334, label %335, label %338

335:                                              ; preds = %331
  %336 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %2, i64 0, i32 38, i32 0, i64 3
  %337 = load i8, i8* %336, align 1
  br label %448

338:                                              ; preds = %331
  %339 = icmp ne i32 %313, 0
  %340 = icmp eq i32 %314, 0
  %341 = or i1 %339, %340
  br i1 %341, label %448, label %342

342:                                              ; preds = %338
  %343 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %2, i64 0, i32 38, i32 0, i64 4
  %344 = load i8, i8* %343, align 1
  br label %448

345:                                              ; preds = %312
  %346 = icmp ne i32 %314, 0
  %347 = icmp ne i32 %313, 0
  %348 = or i32 %107, %105
  %349 = and i32 %348, 15
  %350 = icmp eq i32 %349, 0
  br i1 %350, label %351, label %354

351:                                              ; preds = %345
  %352 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %2, i64 0, i32 38, i32 0, i64 5
  %353 = load i8, i8* %352, align 1
  br label %448

354:                                              ; preds = %345
  %355 = icmp eq i32 %314, 0
  %356 = or i1 %347, %355
  br i1 %356, label %360, label %357

357:                                              ; preds = %354
  %358 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %2, i64 0, i32 38, i32 0, i64 6
  %359 = load i8, i8* %358, align 1
  br label %448

360:                                              ; preds = %354
  %361 = and i1 %347, %355
  br i1 %361, label %362, label %365

362:                                              ; preds = %360
  %363 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %2, i64 0, i32 38, i32 0, i64 7
  %364 = load i8, i8* %363, align 1
  br label %448

365:                                              ; preds = %360
  %366 = and i1 %347, %346
  br i1 %366, label %367, label %448

367:                                              ; preds = %365
  %368 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %2, i64 0, i32 38, i32 0, i64 8
  %369 = load i8, i8* %368, align 1
  br label %448

370:                                              ; preds = %312, %312, %312
  %371 = lshr i32 %314, 2
  %372 = lshr i32 %313, 2
  %373 = zext i32 %372 to i64
  %374 = zext i32 %371 to i64
  %375 = getelementptr inbounds [4 x [4 x i32]], [4 x [4 x i32]]* @pos_shift_16x16, i64 0, i64 %373, i64 %374
  %376 = load i32, i32* %375, align 4
  %377 = sext i32 %376 to i64
  %378 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %2, i64 0, i32 38, i32 0, i64 %377
  %379 = load i8, i8* %378, align 1
  br label %448

380:                                              ; preds = %310
  %381 = and i32 %107, 31
  %382 = lshr i32 %381, 4
  %383 = lshr i32 %105, 3
  %384 = and i32 %383, 2
  %385 = or i32 %382, %384
  %386 = lshr i32 %107, 3
  %387 = and i32 %386, 1
  %388 = lshr i32 %105, 2
  %389 = and i32 %388, 2
  %390 = or i32 %387, %389
  switch i8 %4, label %448 [
    i8 15, label %391
    i8 14, label %393
    i8 13, label %399
    i8 12, label %404
    i8 11, label %409
    i8 10, label %419
    i8 9, label %427
    i8 8, label %434
    i8 7, label %434
    i8 6, label %434
  ]

391:                                              ; preds = %380
  %392 = load i8, i8* %311, align 1
  br label %448

393:                                              ; preds = %380
  %394 = and i32 %105, 31
  %395 = icmp eq i32 %394, 0
  %396 = select i1 %395, i64 1, i64 2
  %397 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %2, i64 0, i32 38, i32 0, i64 %396
  %398 = load i8, i8* %397, align 1
  br label %448

399:                                              ; preds = %380
  %400 = icmp eq i32 %381, 0
  %401 = select i1 %400, i64 3, i64 4
  %402 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %2, i64 0, i32 38, i32 0, i64 %401
  %403 = load i8, i8* %402, align 1
  br label %448

404:                                              ; preds = %380
  %405 = add nuw nsw i32 %385, 5
  %406 = zext i32 %405 to i64
  %407 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %2, i64 0, i32 38, i32 0, i64 %406
  %408 = load i8, i8* %407, align 1
  br label %448

409:                                              ; preds = %380
  %410 = shl nuw nsw i32 %382, 1
  %411 = and i32 %383, 1
  %412 = and i32 %388, 4
  %413 = or i32 %412, %411
  %414 = or i32 %413, %410
  %415 = add nuw nsw i32 %414, 9
  %416 = zext i32 %415 to i64
  %417 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %2, i64 0, i32 38, i32 0, i64 %416
  %418 = load i8, i8* %417, align 1
  br label %448

419:                                              ; preds = %380
  %420 = lshr i32 %381, 3
  %421 = and i32 %388, 4
  %422 = or i32 %420, %421
  %423 = add nuw nsw i32 %422, 17
  %424 = zext i32 %423 to i64
  %425 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %2, i64 0, i32 38, i32 0, i64 %424
  %426 = load i8, i8* %425, align 1
  br label %448

427:                                              ; preds = %380
  %428 = shl nuw nsw i32 %385, 2
  %429 = add nuw nsw i32 %390, 25
  %430 = add nuw nsw i32 %429, %428
  %431 = zext i32 %430 to i64
  %432 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %2, i64 0, i32 38, i32 0, i64 %431
  %433 = load i8, i8* %432, align 1
  br label %448

434:                                              ; preds = %380, %380, %380
  %435 = lshr i32 %105, 1
  %436 = and i32 %435, 2
  %437 = lshr i32 %107, 2
  %438 = and i32 %437, 1
  %439 = or i32 %438, %436
  %440 = shl nuw nsw i32 %385, 4
  %441 = shl nuw nsw i32 %390, 2
  %442 = add nuw nsw i32 %439, 41
  %443 = add nuw nsw i32 %442, %440
  %444 = add nuw nsw i32 %443, %441
  %445 = zext i32 %444 to i64
  %446 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %2, i64 0, i32 38, i32 0, i64 %445
  %447 = load i8, i8* %446, align 1
  br label %448

448:                                              ; preds = %434, %427, %419, %409, %404, %399, %393, %391, %380, %370, %367, %365, %362, %357, %351, %342, %338, %335, %328, %324, %321, %315, %312
  %449 = phi i8 [ 0, %312 ], [ %379, %370 ], [ %364, %362 ], [ %369, %367 ], [ 0, %365 ], [ %359, %357 ], [ %353, %351 ], [ 0, %338 ], [ %344, %342 ], [ %337, %335 ], [ %330, %328 ], [ 0, %324 ], [ %323, %321 ], [ %316, %315 ], [ 0, %380 ], [ %447, %434 ], [ %433, %427 ], [ %426, %419 ], [ %418, %409 ], [ %408, %404 ], [ %403, %399 ], [ %398, %393 ], [ %392, %391 ]
  %450 = zext i8 %449 to i32
  %451 = icmp eq i8 %449, 0
  %452 = select i1 %451, i32 %288, i32 0
  %453 = and i1 %299, %451
  %454 = zext i1 %453 to i32
  br label %455

455:                                              ; preds = %448, %306, %286
  %456 = phi i32 [ 0, %286 ], [ 0, %306 ], [ %450, %448 ]
  %457 = phi i32 [ %288, %286 ], [ %288, %306 ], [ %452, %448 ]
  %458 = phi i32 [ %302, %286 ], [ %302, %306 ], [ %454, %448 ]
  %459 = load i8, i8* %125, align 4
  %460 = icmp eq i8 %459, 0
  br i1 %460, label %475, label %461

461:                                              ; preds = %455
  %462 = load i16, i16* %48, align 1
  %463 = and i16 %462, 7
  %464 = zext i16 %463 to i64
  %465 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 23, i32 5, i64 %464
  %466 = load i32, i32* %465, align 4
  %467 = and i32 %466, 32
  %468 = icmp eq i32 %467, 0
  br i1 %468, label %475, label %469

469:                                              ; preds = %461
  %470 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 23, i32 4, i64 %464, i64 5
  %471 = load i16, i16* %470, align 2
  %472 = icmp eq i16 %471, 4
  %473 = select i1 %472, i32 0, i32 %457
  %474 = select i1 %472, i32 1, i32 %458
  br label %475

475:                                              ; preds = %455, %461, %469
  %476 = phi i32 [ %457, %461 ], [ %473, %469 ], [ %457, %455 ]
  %477 = phi i32 [ %458, %461 ], [ %474, %469 ], [ %458, %455 ]
  %478 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 38
  %479 = load i32, i32* %478, align 8
  %480 = and i32 %479, 64
  %481 = icmp eq i32 %480, 0
  %482 = select i1 %481, i32 0, i32 %476
  %483 = and i32 %479, 8
  %484 = icmp eq i32 %483, 0
  %485 = select i1 %484, i32 0, i32 %477
  %486 = getelementptr inbounds [8 x i32], [8 x i32]* %30, i64 0, i64 7
  store i32 %482, i32* %486, align 4
  %487 = getelementptr inbounds [8 x i32], [8 x i32]* %30, i64 0, i64 4
  store i32 %485, i32* %487, align 16
  %488 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %2, i64 0, i32 3
  %489 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %2, i64 0, i32 3, i32 2, i64 0
  %490 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %2, i64 0, i32 2, i32 34, i64 0
  %491 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %2, i64 0, i32 2, i32 35, i64 0
  %492 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %2, i64 0, i32 3, i32 3, i64 0
  %493 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %2, i64 0, i32 3, i32 4, i64 0
  %494 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 20, i32 1
  %495 = icmp ugt i8 %4, 2
  %496 = icmp eq i32 %456, 0
  br label %505

497:                                              ; preds = %582
  %498 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %2, i64 0, i32 32, i64 1
  %499 = load i32, i32* %498, align 4
  %500 = sext i32 %499 to i64
  %501 = shl nsw i64 %500, 1
  %502 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 40, i32 13, i32 6
  %503 = load i32, i32* %502, align 8
  %504 = icmp eq i32 %503, 1
  br i1 %504, label %588, label %592

505:                                              ; preds = %585, %475
  %506 = phi i32 [ 1, %475 ], [ %587, %585 ]
  %507 = phi i64 [ 1, %475 ], [ %583, %585 ]
  %508 = icmp eq i32 %506, 0
  br i1 %508, label %582, label %509

509:                                              ; preds = %505
  %510 = load %struct.MB_MODE_INFO**, %struct.MB_MODE_INFO*** %41, align 8
  %511 = load %struct.MB_MODE_INFO*, %struct.MB_MODE_INFO** %510, align 8
  %512 = add nsw i64 %507, -1
  %513 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 13, i64 %512
  %514 = load i32, i32* %513, align 4
  %515 = icmp eq i32 %514, -1
  br i1 %515, label %520, label %516

516:                                              ; preds = %509
  %517 = sext i32 %514 to i64
  %518 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 16, i64 %517
  %519 = load %struct.RefCntBuffer*, %struct.RefCntBuffer** %518, align 8
  br label %520

520:                                              ; preds = %516, %509
  %521 = phi %struct.RefCntBuffer* [ null, %509 ], [ %519, %516 ]
  %522 = icmp eq %struct.RefCntBuffer* %521, null
  %523 = load %struct.SequenceHeader*, %struct.SequenceHeader** %289, align 16
  %524 = getelementptr inbounds %struct.SequenceHeader, %struct.SequenceHeader* %523, i64 0, i32 27
  %525 = load i8, i8* %524, align 1
  %526 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %2, i64 0, i32 32, i64 %507
  store i32 2147483647, i32* %526, align 4
  %527 = getelementptr inbounds [25 x [8 x %union.int_mv]], [25 x [8 x %union.int_mv]]* %25, i64 0, i64 16, i64 %507, i32 0
  store i32 -2147450880, i32* %527, align 4
  br i1 %522, label %580, label %528

528:                                              ; preds = %520
  %529 = icmp eq i8 %525, 0
  %530 = select i1 %529, i32 3, i32 1
  %531 = getelementptr inbounds %struct.RefCntBuffer, %struct.RefCntBuffer* %521, i64 0, i32 17
  %532 = add nsw i64 %507, -1
  %533 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 13, i64 %532
  %534 = load i32, i32* %533, align 4
  %535 = icmp eq i32 %534, -1
  %536 = sext i32 %534 to i64
  %537 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 15, i64 %536
  %538 = select i1 %535, %struct.scale_factors* null, %struct.scale_factors* %537
  %539 = getelementptr inbounds [8 x [3 x %struct.buf_2d]], [8 x [3 x %struct.buf_2d]]* %27, i64 0, i64 %507, i64 0
  call void @av1_setup_pred_block(%struct.macroblockd* %40, %struct.buf_2d* %539, %struct.yv12_buffer_config* nonnull %531, %struct.scale_factors* %538, %struct.scale_factors* %538, i32 %530) #4
  %540 = trunc i64 %507 to i8
  call void @av1_find_mv_refs(%struct.AV1Common* %38, %struct.macroblockd* %40, %struct.MB_MODE_INFO* %511, i8 signext %540, i8* %489, [8 x %struct.candidate_mv]* %490, [8 x i16]* %491, [2 x %union.int_mv]* null, %union.int_mv* %492, i16* %493) #4
  %541 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %2, i64 0, i32 3, i32 1, i64 %507, i64 0
  %542 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %2, i64 0, i32 2, i32 35, i64 %507, i64 0
  %543 = bitcast i16* %542 to i64*
  %544 = bitcast i16* %541 to i64*
  %545 = load i64, i64* %543, align 8
  store i64 %545, i64* %544, align 4
  %546 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %2, i64 0, i32 3, i32 0, i64 %507, i64 0
  %547 = bitcast %struct.candidate_mv* %546 to i8*
  %548 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %2, i64 0, i32 2, i32 34, i64 %507, i64 0
  %549 = bitcast %struct.candidate_mv* %548 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %547, i8* align 8 %549, i64 32, i1 false) #4
  %550 = load i8, i8* %494, align 1, !range !2
  %551 = zext i8 %550 to i32
  %552 = getelementptr inbounds [25 x [8 x %union.int_mv]], [25 x [8 x %union.int_mv]]* %25, i64 0, i64 13, i64 %507
  %553 = getelementptr inbounds [25 x [8 x %union.int_mv]], [25 x [8 x %union.int_mv]]* %25, i64 0, i64 14, i64 %507
  call void @av1_find_best_ref_mvs_from_stack(i32 %551, %struct.MB_MODE_INFO_EXT* %488, i8 signext %540, %union.int_mv* %552, %union.int_mv* %553, i32 0) #4
  %554 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %2, i64 0, i32 3, i32 3, i64 %507, i32 0
  %555 = getelementptr inbounds [25 x [8 x %union.int_mv]], [25 x [8 x %union.int_mv]]* %25, i64 0, i64 15, i64 %507, i32 0
  %556 = load i32, i32* %554, align 4
  store i32 %556, i32* %555, align 4
  %557 = getelementptr inbounds %struct.scale_factors, %struct.scale_factors* %538, i64 0, i32 0
  %558 = load i32, i32* %557, align 8
  %559 = icmp eq i32 %558, -1
  br i1 %559, label %568, label %560

560:                                              ; preds = %528
  %561 = getelementptr inbounds %struct.scale_factors, %struct.scale_factors* %538, i64 0, i32 1
  %562 = load i32, i32* %561, align 4
  %563 = icmp eq i32 %562, -1
  br i1 %563, label %568, label %564

564:                                              ; preds = %560
  %565 = icmp eq i32 %558, 16384
  br i1 %565, label %566, label %580

566:                                              ; preds = %564
  %567 = icmp eq i32 %562, 16384
  br label %568

568:                                              ; preds = %566, %560, %528
  %569 = phi i1 [ true, %560 ], [ %567, %566 ], [ true, %528 ]
  %570 = and i1 %495, %569
  %571 = icmp eq i64 %507, 1
  %572 = or i1 %496, %571
  %573 = and i1 %570, %572
  br i1 %573, label %574, label %580

574:                                              ; preds = %568
  %575 = getelementptr inbounds %struct.buf_2d, %struct.buf_2d* %539, i64 0, i32 0
  %576 = load i8*, i8** %575, align 16
  %577 = getelementptr inbounds %struct.RefCntBuffer, %struct.RefCntBuffer* %521, i64 0, i32 17, i32 4, i32 0, i32 0
  %578 = load i32, i32* %577, align 8
  %579 = trunc i64 %507 to i32
  call void @av1_mv_pred(%struct.AV1_COMP* %0, %struct.macroblock* %2, i8* %576, i32 %578, i32 %579, i8 zeroext %4) #4
  br label %580

580:                                              ; preds = %520, %564, %568, %574
  call void @av1_count_overlappable_neighbors(%struct.AV1Common* %38, %struct.macroblockd* %40) #4
  %581 = getelementptr inbounds %struct.MB_MODE_INFO, %struct.MB_MODE_INFO* %511, i64 0, i32 10
  store i8 1, i8* %581, align 1
  br label %582

582:                                              ; preds = %505, %580
  %583 = add nuw nsw i64 %507, 1
  %584 = icmp eq i64 %583, 8
  br i1 %584, label %497, label %585

585:                                              ; preds = %582
  %586 = getelementptr inbounds [8 x i32], [8 x i32]* %30, i64 0, i64 %583
  %587 = load i32, i32* %586, align 4
  br label %505

588:                                              ; preds = %497
  %589 = ashr i32 %499, 2
  %590 = sext i32 %589 to i64
  %591 = add nsw i64 %501, %590
  br label %592

592:                                              ; preds = %588, %497
  %593 = phi i64 [ %591, %588 ], [ %501, %497 ]
  %594 = icmp ugt i8 %4, 8
  %595 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 9, i32 4, i32 15
  %596 = load i32, i32* %595, align 4
  %597 = icmp eq i32 %596, 1
  %598 = and i1 %594, %597
  br i1 %598, label %599, label %617

599:                                              ; preds = %592
  %600 = load %struct.MB_MODE_INFO**, %struct.MB_MODE_INFO*** %41, align 8
  %601 = load %struct.MB_MODE_INFO*, %struct.MB_MODE_INFO** %600, align 8
  %602 = getelementptr inbounds %struct.MB_MODE_INFO, %struct.MB_MODE_INFO* %601, i64 0, i32 28
  %603 = load i16, i16* %602, align 1
  %604 = and i16 %603, 7
  %605 = zext i16 %604 to i32
  %606 = add nsw i32 %605, -1
  %607 = icmp ugt i32 %606, 1
  br i1 %607, label %608, label %617

608:                                              ; preds = %599
  %609 = getelementptr inbounds %struct.CommonQuantParams, %struct.CommonQuantParams* %103, i64 0, i32 0
  %610 = load i32, i32* %609, align 8
  %611 = icmp eq i32 %610, 0
  br i1 %611, label %617, label %612

612:                                              ; preds = %608
  %613 = load %struct.SequenceHeader*, %struct.SequenceHeader** %289, align 16
  %614 = getelementptr inbounds %struct.SequenceHeader, %struct.SequenceHeader* %613, i64 0, i32 25
  %615 = load i32, i32* %614, align 8
  %616 = icmp eq i32 %615, 8
  br label %617

617:                                              ; preds = %608, %599, %612, %592
  %618 = phi i1 [ false, %608 ], [ false, %599 ], [ false, %592 ], [ %616, %612 ]
  %619 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 40, i32 13, i32 16
  %620 = load i32, i32* %619, align 8
  %621 = icmp eq i32 %620, 0
  br i1 %621, label %636, label %622

622:                                              ; preds = %617
  %623 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 40, i32 7, i32 4
  %624 = load i32, i32* %623, align 16
  %625 = icmp eq i32 %624, 0
  br i1 %625, label %636, label %626

626:                                              ; preds = %622
  %627 = getelementptr inbounds [22 x i8], [22 x i8]* @mi_size_wide_log2, i64 0, i64 %52
  %628 = load i8, i8* %627, align 1
  %629 = zext i8 %628 to i32
  %630 = add nsw i32 %107, %105
  %631 = lshr i32 %630, %629
  %632 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 0, i32 4
  %633 = load i32, i32* %632, align 4
  %634 = add i32 %631, %633
  %635 = and i32 %634, 1
  br label %636

636:                                              ; preds = %617, %622, %626
  %637 = phi i32 [ %635, %626 ], [ 1, %622 ], [ 0, %617 ]
  %638 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 40, i32 13, i32 12
  %639 = load i32, i32* %638, align 8
  %640 = icmp eq i32 %639, 0
  br i1 %640, label %674, label %641

641:                                              ; preds = %636
  %642 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 75, i32 5
  %643 = load i32, i32* %642, align 4
  %644 = icmp eq i32 %643, 0
  br i1 %644, label %645, label %674

645:                                              ; preds = %641
  %646 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 75, i32 3
  %647 = load i32, i32* %646, align 4
  %648 = icmp sgt i32 %647, 1
  br i1 %648, label %649, label %653

649:                                              ; preds = %645
  %650 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 75, i32 1
  %651 = load i32, i32* %650, align 4
  %652 = icmp eq i32 %651, 0
  br i1 %652, label %674, label %653

653:                                              ; preds = %649, %645
  %654 = getelementptr inbounds %struct.CommonQuantParams, %struct.CommonQuantParams* %103, i64 0, i32 0
  %655 = load i32, i32* %654, align 8
  %656 = icmp sgt i32 %655, 120
  br i1 %656, label %657, label %671

657:                                              ; preds = %653
  %658 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %2, i64 0, i32 60
  %659 = load i32, i32* %658, align 4
  %660 = icmp ugt i32 %659, 100
  %661 = icmp ult i8 %4, 7
  %662 = and i1 %661, %660
  br i1 %662, label %663, label %671

663:                                              ; preds = %657
  %664 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %2, i64 0, i32 31, i32 1
  %665 = load i32, i32* %664, align 4
  %666 = icmp eq i32 %665, 0
  br i1 %666, label %667, label %671

667:                                              ; preds = %663
  %668 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %2, i64 0, i32 31, i32 0
  %669 = load i32, i32* %668, align 8
  %670 = icmp ne i32 %669, 3
  br label %671

671:                                              ; preds = %663, %667, %657, %653
  %672 = phi i1 [ false, %663 ], [ false, %657 ], [ false, %653 ], [ %670, %667 ]
  %673 = zext i1 %672 to i32
  br label %674

674:                                              ; preds = %649, %641, %636, %671
  %675 = phi i32 [ %673, %671 ], [ 0, %636 ], [ 1, %641 ], [ 0, %649 ]
  %676 = load i16, i16* %48, align 1
  %677 = and i16 %676, -49
  store i16 %677, i16* %48, align 1
  %678 = getelementptr inbounds %struct.MB_MODE_INFO, %struct.MB_MODE_INFO* %43, i64 0, i32 2
  store i8 0, i8* %678, align 2
  %679 = getelementptr inbounds %struct.MB_MODE_INFO, %struct.MB_MODE_INFO* %43, i64 0, i32 3
  store i8 0, i8* %679, align 1
  store i8 -1, i8* %221, align 8
  store i8 -1, i8* %222, align 1
  %680 = getelementptr inbounds %struct.MB_MODE_INFO, %struct.MB_MODE_INFO* %43, i64 0, i32 22, i32 1, i64 0
  store i8 0, i8* %680, align 2
  %681 = getelementptr inbounds %struct.MB_MODE_INFO, %struct.MB_MODE_INFO* %43, i64 0, i32 22, i32 1, i64 1
  store i8 0, i8* %681, align 1
  %682 = getelementptr inbounds %struct.MB_MODE_INFO, %struct.MB_MODE_INFO* %43, i64 0, i32 19, i32 1
  store i8 0, i8* %682, align 1
  %683 = getelementptr inbounds %struct.MB_MODE_INFO, %struct.MB_MODE_INFO* %43, i64 0, i32 5, i64 1, i32 0
  store i32 0, i32* %683, align 4
  %684 = getelementptr inbounds %struct.MB_MODE_INFO, %struct.MB_MODE_INFO* %43, i64 0, i32 5, i64 0, i32 0
  store i32 0, i32* %684, align 8
  %685 = getelementptr inbounds %struct.MB_MODE_INFO, %struct.MB_MODE_INFO* %43, i64 0, i32 9
  store i8 0, i8* %685, align 8
  %686 = getelementptr inbounds %struct.MB_MODE_INFO, %struct.MB_MODE_INFO* %43, i64 0, i32 10
  store i8 1, i8* %686, align 1
  %687 = getelementptr inbounds %struct.MB_MODE_INFO, %struct.MB_MODE_INFO* %43, i64 0, i32 14
  store i8 0, i8* %687, align 8
  %688 = load i8, i8* %53, align 1
  %689 = icmp eq i8 %688, 4
  %690 = select i1 %689, i8 0, i8 %688
  %691 = zext i8 %690 to i32
  %692 = shl nuw nsw i32 %691, 16
  %693 = or i32 %692, %691
  %694 = getelementptr inbounds %struct.MB_MODE_INFO, %struct.MB_MODE_INFO* %43, i64 0, i32 8, i32 0
  store i32 %693, i32* %694, align 4
  %695 = getelementptr inbounds [22 x i8], [22 x i8]* @max_txsize_lookup, i64 0, i64 %52
  %696 = load i8, i8* %695, align 1
  %697 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %2, i64 0, i32 57, i32 8
  %698 = load i8, i8* %697, align 4
  %699 = zext i8 %698 to i64
  %700 = getelementptr inbounds [3 x i8], [3 x i8]* @tx_mode_to_biggest_tx_size, i64 0, i64 %699
  %701 = load i8, i8* %700, align 1
  %702 = icmp ult i8 %696, %701
  %703 = select i1 %702, i8 %696, i8 %701
  %704 = icmp ult i8 %703, 2
  %705 = select i1 %704, i8 %703, i8 2
  %706 = getelementptr inbounds %struct.MB_MODE_INFO, %struct.MB_MODE_INFO* %43, i64 0, i32 24
  store i8 %705, i8* %706, align 1
  %707 = bitcast i32* %34 to i8*
  %708 = bitcast i32* %35 to i8*
  %709 = getelementptr inbounds %struct.SVC, %struct.SVC* %39, i64 0, i32 0
  %710 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 75, i32 16
  %711 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 75, i32 15
  %712 = trunc i32 %287 to i16
  %713 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 23, i32 5, i64 %51
  %714 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 23, i32 4, i64 %51, i64 5
  %715 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %2, i64 0, i32 37
  %716 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 40, i32 13, i32 28
  %717 = icmp eq i8 %4, 15
  %718 = icmp ugt i8 %4, 12
  %719 = icmp ugt i8 %4, 6
  %720 = icmp ne i32 %456, 0
  %721 = xor i1 %720, true
  %722 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %2, i64 0, i32 31
  %723 = bitcast %struct.CONTENT_STATE_SB* %722 to i64*
  %724 = icmp ugt i8 %4, 11
  %725 = and i1 %724, %720
  %726 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %2, i64 0, i32 2, i32 21, i64 0
  %727 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %2, i64 0, i32 2, i32 21, i64 1
  %728 = bitcast i32* %22 to %struct.mv*
  %729 = icmp ne i32 %257, 0
  %730 = bitcast i32* %12 to %struct.mv*
  %731 = bitcast i32* %13 to %struct.mv*
  %732 = bitcast i32* %17 to %struct.mv*
  %733 = bitcast [3 x %struct.buf_2d]* %11 to i8*
  %734 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 40, i32 13, i32 25
  %735 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 41, i32 1
  %736 = bitcast i32* %12 to i8*
  %737 = bitcast i32* %12 to i16*
  %738 = getelementptr inbounds %struct.mv, %struct.mv* %730, i64 0, i32 1
  %739 = bitcast i32* %13 to i8*
  %740 = bitcast i32* %13 to i16*
  %741 = getelementptr inbounds %struct.mv, %struct.mv* %731, i64 0, i32 1
  %742 = bitcast i32* %14 to i8*
  %743 = bitcast [5 x i32]* %15 to i8*
  %744 = getelementptr inbounds [5 x i32], [5 x i32]* %15, i64 0, i64 0
  %745 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %2, i64 0, i32 2, i32 4, i64 0, i32 4, i64 0
  %746 = bitcast %struct.buf_2d* %745 to i8*
  %747 = getelementptr inbounds [3 x %struct.buf_2d], [3 x %struct.buf_2d]* %11, i64 0, i64 1
  %748 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %2, i64 0, i32 2, i32 4, i64 1, i32 4, i64 0
  %749 = bitcast %struct.buf_2d* %747 to i8*
  %750 = bitcast %struct.buf_2d* %748 to i8*
  %751 = getelementptr inbounds [3 x %struct.buf_2d], [3 x %struct.buf_2d]* %11, i64 0, i64 2
  %752 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %2, i64 0, i32 2, i32 4, i64 2, i32 4, i64 0
  %753 = bitcast %struct.buf_2d* %751 to i8*
  %754 = bitcast %struct.buf_2d* %752 to i8*
  %755 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 41, i32 3, i64 0, i64 0
  %756 = getelementptr inbounds %struct.FULLPEL_MOTION_SEARCH_PARAMS, %struct.FULLPEL_MOTION_SEARCH_PARAMS* %16, i64 0, i32 0
  %757 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 40, i32 5, i32 3
  %758 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 40, i32 5, i32 13
  %759 = bitcast i32* %17 to i8*
  %760 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %2, i64 0, i32 21
  %761 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %2, i64 0, i32 17
  %762 = bitcast %struct.SUBPEL_MOTION_SEARCH_PARAMS* %18 to i8*
  %763 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 41, i32 2
  %764 = bitcast i32* %19 to i8*
  %765 = bitcast [5 x i32]* %20 to i8*
  %766 = icmp ult i8 %4, 6
  %767 = bitcast %union.int_mv* %21 to i8*
  %768 = getelementptr inbounds %union.int_mv, %union.int_mv* %21, i64 0, i32 0
  %769 = bitcast %union.int_mv* %21 to %struct.mv*
  %770 = bitcast %union.int_mv* %21 to i16*
  %771 = getelementptr inbounds %struct.mv, %struct.mv* %769, i64 0, i32 1
  %772 = bitcast i32* %22 to i8*
  %773 = bitcast %struct.SUBPEL_MOTION_SEARCH_PARAMS* %23 to i8*
  %774 = getelementptr inbounds [5 x i32], [5 x i32]* %20, i64 0, i64 0
  %775 = getelementptr inbounds %struct.MB_MODE_INFO, %struct.MB_MODE_INFO* %43, i64 0, i32 5
  %776 = getelementptr inbounds [2 x %union.int_mv], [2 x %union.int_mv]* %775, i64 0, i64 0, i32 0
  %777 = getelementptr inbounds [4 x %struct.PRED_BUFFER], [4 x %struct.PRED_BUFFER]* %31, i64 0, i64 0, i32 2
  %778 = getelementptr inbounds [4 x %struct.PRED_BUFFER], [4 x %struct.PRED_BUFFER]* %31, i64 0, i64 1, i32 2
  %779 = getelementptr inbounds [4 x %struct.PRED_BUFFER], [4 x %struct.PRED_BUFFER]* %31, i64 0, i64 2, i32 2
  %780 = bitcast %struct.buf_2d* %98 to i64*
  %781 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %2, i64 0, i32 2, i32 4, i64 0, i32 3, i32 4
  %782 = getelementptr inbounds [4 x %struct.PRED_BUFFER], [4 x %struct.PRED_BUFFER]* %31, i64 0, i64 3
  %783 = ptrtoint %struct.PRED_BUFFER* %782 to i64
  %784 = icmp eq i32 %637, 0
  %785 = bitcast [2 x %union.int_mv]* %775 to i16*
  %786 = bitcast [2 x %union.int_mv]* %775 to %struct.mv*
  %787 = getelementptr inbounds %struct.mv, %struct.mv* %786, i64 0, i32 1
  %788 = bitcast i16* %10 to [2 x i8]*
  %789 = bitcast [2 x %struct.RD_STATS]* %9 to i8*
  %790 = bitcast i16* %10 to i8*
  %791 = icmp eq i8 %54, 4
  %792 = zext i8 %54 to i32
  %793 = shl nuw nsw i32 %792, 16
  %794 = or i32 %793, %792
  %795 = getelementptr inbounds [16 x i8], [16 x i8]* @b_width_log2_lookup, i64 0, i64 %52
  %796 = getelementptr inbounds [16 x i8], [16 x i8]* @b_height_log2_lookup, i64 0, i64 %52
  %797 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %2, i64 0, i32 2, i32 12
  %798 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %2, i64 0, i32 2, i32 11
  %799 = icmp eq i32 %675, 0
  %800 = getelementptr inbounds i8, i8* %47, i64 4
  %801 = bitcast i8* %800 to i32*
  %802 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %2, i64 0, i32 59, i64 0
  %803 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %2, i64 0, i32 59, i64 1
  %804 = bitcast %struct.RD_STATS* %36 to i8*
  %805 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %2, i64 0, i32 2, i32 4, i64 1, i32 1
  %806 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %2, i64 0, i32 2, i32 4, i64 1, i32 2
  %807 = getelementptr inbounds %struct.RD_STATS, %struct.RD_STATS* %36, i64 0, i32 4
  %808 = getelementptr inbounds %struct.RD_STATS, %struct.RD_STATS* %36, i64 0, i32 0
  %809 = getelementptr inbounds %struct.RD_STATS, %struct.RD_STATS* %36, i64 0, i32 1
  %810 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %2, i64 0, i32 60
  %811 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %2, i64 0, i32 31, i32 0
  %812 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 39
  %813 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 83, i32 8
  %814 = xor i1 %89, true
  br label %815

815:                                              ; preds = %1746, %674
  %816 = phi i64 [ 0, %674 ], [ %1765, %1746 ]
  %817 = phi i64 [ 9223372036854775807, %674 ], [ %1764, %1746 ]
  %818 = phi i32 [ 0, %674 ], [ %1763, %1746 ]
  %819 = phi i32 [ -1, %674 ], [ %1762, %1746 ]
  %820 = phi i32 [ 0, %674 ], [ %1761, %1746 ]
  %821 = phi i64 [ 0, %674 ], [ %1760, %1746 ]
  %822 = phi i32 [ 0, %674 ], [ %1759, %1746 ]
  %823 = phi i32 [ 0, %674 ], [ %1758, %1746 ]
  %824 = phi i64 [ 9223372036854775807, %674 ], [ %1757, %1746 ]
  %825 = phi i64 [ 9223372036854775807, %674 ], [ %1756, %1746 ]
  %826 = phi i64 [ 9223372036854775807, %674 ], [ %1755, %1746 ]
  %827 = phi i32 [ -1431655766, %674 ], [ %1754, %1746 ]
  %828 = phi i32 [ 2147483647, %674 ], [ %1753, %1746 ]
  %829 = phi i64 [ 0, %674 ], [ %1752, %1746 ]
  %830 = phi i8 [ 13, %674 ], [ %1751, %1746 ]
  %831 = phi i8 [ 1, %674 ], [ %1750, %1746 ]
  %832 = phi i8 [ 1, %674 ], [ %1749, %1746 ]
  %833 = phi i8 [ 0, %674 ], [ %1748, %1746 ]
  %834 = phi i8 [ 0, %674 ], [ %1747, %1746 ]
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %707) #4
  store i32 -1431655766, i32* %34, align 4
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %708) #4
  store i32 0, i32* %35, align 4
  %835 = getelementptr inbounds %struct.REF_MODE, %struct.REF_MODE* %76, i64 %816, i32 1
  %836 = load i8, i8* %835, align 1
  %837 = getelementptr inbounds %struct.REF_MODE, %struct.REF_MODE* %76, i64 %816, i32 0
  %838 = load i8, i8* %837, align 2
  store i8 %836, i8* %678, align 2
  store i8 %838, i8* %221, align 8
  %839 = sext i8 %838 to i64
  %840 = getelementptr inbounds [8 x i32], [8 x i32]* %30, i64 0, i64 %839
  %841 = load i32, i32* %840, align 4
  %842 = icmp eq i32 %841, 0
  br i1 %842, label %1746, label %843

843:                                              ; preds = %815
  %844 = load %struct.AV1_PRIMARY*, %struct.AV1_PRIMARY** %258, align 16
  %845 = getelementptr inbounds %struct.AV1_PRIMARY, %struct.AV1_PRIMARY* %844, i64 0, i32 16
  %846 = load i32, i32* %845, align 8
  %847 = icmp eq i32 %846, 0
  br i1 %847, label %875, label %848

848:                                              ; preds = %843
  %849 = load i32, i32* %709, align 8
  %850 = icmp sgt i32 %849, 0
  br i1 %850, label %851, label %875

851:                                              ; preds = %848
  switch i8 %838, label %875 [
    i8 1, label %852
    i8 4, label %855
  ]

852:                                              ; preds = %851
  %853 = load i32, i32* %711, align 4
  %854 = icmp eq i32 %853, 0
  br i1 %854, label %875, label %858

855:                                              ; preds = %851
  %856 = load i32, i32* %710, align 8
  %857 = icmp eq i32 %856, 0
  br i1 %857, label %875, label %858

858:                                              ; preds = %852, %855
  %859 = icmp eq i8 %836, 16
  %860 = zext i8 %836 to i64
  %861 = getelementptr inbounds [25 x [8 x %union.int_mv]], [25 x [8 x %union.int_mv]]* %25, i64 0, i64 %860, i64 %839
  %862 = bitcast %union.int_mv* %861 to %struct.mv*
  %863 = getelementptr inbounds %struct.mv, %struct.mv* %862, i64 0, i32 1
  br i1 %859, label %864, label %866

864:                                              ; preds = %858
  store i16 %712, i16* %863, align 2
  %865 = bitcast %union.int_mv* %861 to i16*
  store i16 %712, i16* %865, align 4
  br label %875

866:                                              ; preds = %858
  %867 = load i16, i16* %863, align 2
  %868 = sext i16 %867 to i32
  %869 = icmp eq i32 %287, %868
  br i1 %869, label %870, label %1746

870:                                              ; preds = %866
  %871 = bitcast %union.int_mv* %861 to i16*
  %872 = load i16, i16* %871, align 4
  %873 = sext i16 %872 to i32
  %874 = icmp eq i32 %287, %873
  br i1 %874, label %875, label %1746

875:                                              ; preds = %852, %851, %870, %855, %843, %864, %848
  %876 = phi i32 [ 1, %864 ], [ 1, %870 ], [ 0, %855 ], [ 0, %848 ], [ 0, %843 ], [ 0, %851 ], [ 0, %852 ]
  %877 = load i8, i8* %125, align 4
  %878 = icmp eq i8 %877, 0
  br i1 %878, label %888, label %879

879:                                              ; preds = %875
  %880 = load i32, i32* %713, align 4
  %881 = and i32 %880, 32
  %882 = icmp eq i32 %881, 0
  br i1 %882, label %888, label %883

883:                                              ; preds = %879
  %884 = load i16, i16* %714, align 2
  %885 = sext i16 %884 to i32
  %886 = sext i8 %838 to i32
  %887 = icmp eq i32 %885, %886
  br i1 %887, label %888, label %1746

888:                                              ; preds = %875, %883, %879
  %889 = load i32, i32* %715, align 16
  %890 = load i32, i32* %716, align 4
  %891 = icmp ne i8 %838, 1
  %892 = icmp ult i32 %819, 500
  %893 = and i1 %892, %891
  %894 = icmp eq i8 %836, 16
  %895 = or i1 %717, %893
  %896 = and i1 %894, %895
  br i1 %896, label %1746, label %897

897:                                              ; preds = %888
  %898 = icmp eq i32 %889, 0
  br i1 %898, label %912, label %899

899:                                              ; preds = %897
  %900 = icmp sgt i32 %889, 1
  %901 = and i1 %891, %900
  %902 = and i1 %719, %894
  %903 = or i1 %718, %902
  %904 = and i1 %901, %903
  br i1 %904, label %1746, label %905

905:                                              ; preds = %899
  %906 = icmp eq i8 %836, 14
  %907 = and i1 %906, %891
  br i1 %907, label %1746, label %908

908:                                              ; preds = %905
  %909 = icmp ne i32 %890, 0
  %910 = and i1 %594, %909
  %911 = and i1 %906, %910
  br i1 %911, label %1746, label %912

912:                                              ; preds = %908, %897
  %913 = zext i8 %836 to i64
  %914 = getelementptr inbounds [25 x [8 x %union.int_mv]], [25 x [8 x %union.int_mv]]* %25, i64 0, i64 %913, i64 %839
  %915 = getelementptr inbounds %union.int_mv, %union.int_mv* %914, i64 0, i32 0
  %916 = load i32, i32* %915, align 4
  %917 = icmp eq i8 %838, 1
  %918 = or i1 %917, %721
  %919 = icmp eq i32 %916, 0
  %920 = or i1 %918, %919
  br i1 %920, label %921, label %1746

921:                                              ; preds = %912
  %922 = load i64, i64* %723, align 8
  %923 = trunc i64 %922 to i32
  %924 = icmp ne i32 %923, 3
  %925 = and i1 %725, %924
  %926 = and i1 %894, %925
  br i1 %926, label %1746, label %927

927:                                              ; preds = %921
  br i1 %878, label %932, label %928

928:                                              ; preds = %927
  %929 = load i32, i32* %713, align 4
  %930 = and i32 %929, 32
  %931 = icmp eq i32 %930, 0
  br i1 %931, label %932, label %944

932:                                              ; preds = %927, %928
  %933 = load i32, i32* %502, align 8
  %934 = icmp sgt i32 %933, 0
  br i1 %934, label %935, label %944

935:                                              ; preds = %932
  %936 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %2, i64 0, i32 32, i64 %839
  %937 = load i32, i32* %936, align 4
  %938 = icmp eq i32 %937, 2147483647
  %939 = or i1 %917, %938
  %940 = xor i1 %939, true
  %941 = sext i32 %937 to i64
  %942 = icmp slt i64 %593, %941
  %943 = and i1 %942, %940
  br i1 %943, label %1746, label %944

944:                                              ; preds = %935, %928, %932
  %945 = icmp ne i32 %890, 0
  %946 = add nsw i64 %913, -13
  %947 = getelementptr inbounds [8 x [4 x i8]], [8 x [4 x i8]]* @mode_idx, i64 0, i64 %839, i64 %946
  %948 = load i8, i8* %947, align 1
  %949 = icmp eq i8 %833, 0
  %950 = zext i8 %948 to i64
  %951 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 31, i32 1, i64 %51, i64 %52, i64 %950
  %952 = load i32, i32* %951, align 4
  %953 = sext i32 %952 to i64
  %954 = select i1 %945, i64 2, i64 1
  %955 = zext i1 %945 to i64
  %956 = select i1 %949, i64 %955, i64 %954
  %957 = shl i64 %953, %956
  br i1 %917, label %966, label %958

958:                                              ; preds = %944
  %959 = load i32, i32* %295, align 8
  %960 = shl i64 %957, 1
  %961 = icmp eq i8 %838, 4
  %962 = icmp sgt i32 %959, 4
  %963 = and i1 %961, %962
  %964 = select i1 %963, i64 %954, i64 0
  %965 = shl i64 %960, %964
  br label %966

966:                                              ; preds = %944, %958
  %967 = phi i64 [ %957, %944 ], [ %965, %958 ]
  %968 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %2, i64 0, i32 41, i64 %52, i64 %950
  %969 = load i32, i32* %968, align 4
  %970 = sext i32 %969 to i64
  %971 = mul nsw i64 %967, %970
  %972 = ashr i64 %971, 5
  %973 = icmp sle i64 %972, %825
  %974 = icmp ne i64 %967, 2147483647
  %975 = and i1 %974, %973
  %976 = or i1 %919, %975
  br i1 %976, label %977, label %1746

977:                                              ; preds = %966
  %978 = getelementptr inbounds [8 x [3 x %struct.buf_2d]], [8 x [3 x %struct.buf_2d]]* %27, i64 0, i64 %839, i64 0
  %979 = bitcast %struct.buf_2d* %978 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 16 %746, i8* align 16 %979, i64 32, i1 false)
  %980 = getelementptr inbounds [8 x [3 x %struct.buf_2d]], [8 x [3 x %struct.buf_2d]]* %27, i64 0, i64 %839, i64 1
  %981 = bitcast %struct.buf_2d* %980 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 16 %750, i8* align 16 %981, i64 32, i1 false)
  %982 = getelementptr inbounds [8 x [3 x %struct.buf_2d]], [8 x [3 x %struct.buf_2d]]* %27, i64 0, i64 %839, i64 2
  %983 = bitcast %struct.buf_2d* %982 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 16 %754, i8* align 16 %983, i64 32, i1 false)
  store i8 %838, i8* %221, align 8
  store i8 -1, i8* %222, align 1
  %984 = icmp sgt i8 %838, 1
  %985 = select i1 %984, i8 %838, i8 1
  %986 = add nsw i8 %985, -1
  %987 = icmp ult i8 %986, 8
  br i1 %987, label %988, label %996

988:                                              ; preds = %977
  %989 = zext i8 %985 to i64
  %990 = add nsw i64 %989, -1
  %991 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 13, i64 %990
  %992 = load i32, i32* %991, align 4
  %993 = icmp eq i32 %992, -1
  %994 = sext i32 %992 to i64
  %995 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 15, i64 %994
  br i1 %993, label %996, label %997

996:                                              ; preds = %988, %977
  br label %997

997:                                              ; preds = %988, %996
  %998 = phi %struct.scale_factors* [ null, %996 ], [ %995, %988 ]
  store %struct.scale_factors* %998, %struct.scale_factors** %726, align 8
  %999 = load i32, i32* %232, align 4
  %1000 = icmp eq i32 %999, -1
  %1001 = sext i32 %999 to i64
  %1002 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 15, i64 %1001
  %1003 = select i1 %1000, %struct.scale_factors* null, %struct.scale_factors* %1002
  store %struct.scale_factors* %1003, %struct.scale_factors** %727, align 8
  %1004 = icmp ne i8 %836, 16
  %1005 = icmp ne i32 %876, 0
  %1006 = or i1 %1004, %1005
  br i1 %1006, label %1159, label %1007

1007:                                             ; preds = %997
  %1008 = load %struct.MB_MODE_INFO**, %struct.MB_MODE_INFO*** %41, align 8
  %1009 = load %struct.MB_MODE_INFO*, %struct.MB_MODE_INFO** %1008, align 8
  br i1 %984, label %1010, label %1051

1010:                                             ; preds = %1007
  %1011 = load i32, i32* %595, align 4
  %1012 = icmp eq i32 %1011, 1
  %1013 = and i1 %729, %1012
  br i1 %1013, label %1014, label %1051

1014:                                             ; preds = %1010
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %764) #4
  store i32 -1431655766, i32* %19, align 4
  call void @llvm.lifetime.start.p0i8(i64 20, i8* nonnull %765) #4
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 16 %765, i8* align 16 bitcast ([5 x i32]* @__const.search_new_mv.cost_list to i8*), i64 20, i1 false) #4
  br i1 %766, label %1050, label %1015

1015:                                             ; preds = %1014
  %1016 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %2, i64 0, i32 3, i32 0, i64 %839, i64 0, i32 0
  %1017 = bitcast %union.int_mv* %1016 to %struct.mv*
  %1018 = call i32 @av1_int_pro_motion_estimation(%struct.AV1_COMP* %0, %struct.macroblock* %2, i8 zeroext %4, i32 %105, i32 %107, %struct.mv* %1017) #4
  %1019 = load i32, i32* %498, align 4
  %1020 = icmp sgt i32 %1018, %1019
  br i1 %1020, label %1050, label %1021

1021:                                             ; preds = %1015
  %1022 = getelementptr inbounds %struct.MB_MODE_INFO, %struct.MB_MODE_INFO* %1009, i64 0, i32 5, i64 0, i32 0
  %1023 = load i32, i32* %1022, align 8
  %1024 = getelementptr inbounds [25 x [8 x %union.int_mv]], [25 x [8 x %union.int_mv]]* %25, i64 0, i64 16, i64 %839
  %1025 = getelementptr inbounds %union.int_mv, %union.int_mv* %1024, i64 0, i32 0
  store i32 %1023, i32* %1025, align 4
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %767) #4
  %1026 = load i32, i32* %1022, align 8
  %1027 = trunc i32 %1026 to i16
  %1028 = ashr i16 %1027, 3
  store i16 %1028, i16* %770, align 4
  %1029 = lshr i32 %1026, 16
  %1030 = trunc i32 %1029 to i16
  %1031 = ashr i16 %1030, 3
  store i16 %1031, i16* %771, align 2
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %772) #4
  %1032 = call i32 @av1_get_ref_mv(%struct.macroblock* %2, i32 0) #4
  store i32 %1032, i32* %22, align 4
  %1033 = bitcast %union.int_mv* %1024 to %struct.mv*
  %1034 = load %struct.MvCosts*, %struct.MvCosts** %760, align 16
  %1035 = getelementptr inbounds %struct.MvCosts, %struct.MvCosts* %1034, i64 0, i32 0, i64 0
  %1036 = getelementptr inbounds %struct.MvCosts, %struct.MvCosts* %1034, i64 0, i32 5
  %1037 = load i32**, i32*** %1036, align 8
  %1038 = call i32 @av1_mv_bit_cost(%struct.mv* %1033, %struct.mv* nonnull %728, i32* %1035, i32** %1037, i32 108) #4
  %1039 = bitcast %union.int_mv* %1024 to i16*
  %1040 = load i16, i16* %1039, align 4
  %1041 = ashr i16 %1040, 3
  store i16 %1041, i16* %1039, align 4
  %1042 = getelementptr inbounds %struct.mv, %struct.mv* %1033, i64 0, i32 1
  %1043 = load i16, i16* %1042, align 2
  %1044 = ashr i16 %1043, 3
  store i16 %1044, i16* %1042, align 2
  call void @llvm.lifetime.start.p0i8(i64 168, i8* nonnull %773) #4
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %773, i8 -86, i64 168, i1 false) #4
  call void @av1_make_default_subpel_ms_params(%struct.SUBPEL_MOTION_SEARCH_PARAMS* nonnull %23, %struct.AV1_COMP* %0, %struct.macroblock* %2, i8 zeroext %4, %struct.mv* nonnull %728, i32* nonnull %774) #4
  %1045 = and i32 %1026, -458760
  %1046 = load i32 (%struct.macroblockd*, %struct.AV1Common*, %struct.SUBPEL_MOTION_SEARCH_PARAMS*, i32, %struct.mv*, i32*, i32*, %union.int_mv*)*, i32 (%struct.macroblockd*, %struct.AV1Common*, %struct.SUBPEL_MOTION_SEARCH_PARAMS*, i32, %struct.mv*, i32*, i32*, %union.int_mv*)** %763, align 8
  %1047 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %2, i64 0, i32 61, i64 %839
  %1048 = call i32 %1046(%struct.macroblockd* %40, %struct.AV1Common* %38, %struct.SUBPEL_MOTION_SEARCH_PARAMS* nonnull %23, i32 %1045, %struct.mv* nonnull %769, i32* nonnull %19, i32* %1047, %union.int_mv* null) #4
  %1049 = load i32, i32* %768, align 4
  store i32 %1049, i32* %1025, align 4
  call void @llvm.lifetime.end.p0i8(i64 168, i8* nonnull %773) #4
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %772) #4
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %767) #4
  call void @llvm.lifetime.end.p0i8(i64 20, i8* nonnull %765) #4
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %764) #4
  br label %1161

1050:                                             ; preds = %1015, %1014
  call void @llvm.lifetime.end.p0i8(i64 20, i8* nonnull %765) #4
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %764) #4
  br label %1746

1051:                                             ; preds = %1010, %1007
  %1052 = getelementptr inbounds [25 x [8 x %union.int_mv]], [25 x [8 x %union.int_mv]]* %25, i64 0, i64 16, i64 %839
  %1053 = load %struct.SequenceHeader*, %struct.SequenceHeader** %289, align 16
  %1054 = getelementptr inbounds %struct.SequenceHeader, %struct.SequenceHeader* %1053, i64 0, i32 27
  %1055 = load i8, i8* %1054, align 1
  %1056 = icmp eq i8 %1055, 0
  %1057 = select i1 %1056, i32 3, i32 1
  call void @llvm.lifetime.start.p0i8(i64 96, i8* nonnull %733)
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %733, i8 0, i64 96, i1 false)
  %1058 = load i32, i32* %734, align 4
  %1059 = icmp eq i32 %1058, 0
  br i1 %1059, label %1060, label %1062

1060:                                             ; preds = %1051
  %1061 = load i32, i32* %735, align 4
  br label %1062

1062:                                             ; preds = %1060, %1051
  %1063 = phi i32 [ %1061, %1060 ], [ %1058, %1051 ]
  %1064 = getelementptr inbounds %struct.MB_MODE_INFO, %struct.MB_MODE_INFO* %1009, i64 0, i32 6, i64 0
  %1065 = load i8, i8* %1064, align 8
  %1066 = sext i8 %1065 to i32
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %736) #4
  %1067 = getelementptr inbounds %struct.MB_MODE_INFO, %struct.MB_MODE_INFO* %1009, i64 0, i32 28
  %1068 = load i16, i16* %1067, align 1
  %1069 = lshr i16 %1068, 4
  %1070 = and i16 %1069, 3
  %1071 = zext i16 %1070 to i32
  %1072 = call i32 @av1_get_ref_mv(%struct.macroblock* %2, i32 %1071) #4
  store i32 %1072, i32* %12, align 4
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %739) #4
  store i16 -21846, i16* %740, align 4
  store i16 -21846, i16* %741, align 2
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %742) #4
  store i32 -1431655766, i32* %14, align 4
  call void @llvm.lifetime.start.p0i8(i64 20, i8* nonnull %743) #4
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %743, i8 -86, i64 20, i1 false) #4
  %1073 = call %struct.yv12_buffer_config* @av1_get_scaled_ref_frame(%struct.AV1_COMP* %0, i32 %1066) #4
  %1074 = icmp ne %struct.yv12_buffer_config* %1073, null
  %1075 = lshr i32 %1072, 31
  br i1 %1074, label %1076, label %1077

1076:                                             ; preds = %1062
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 16 %733, i8* align 16 %746, i64 32, i1 false) #4
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 16 %749, i8* align 16 %750, i64 32, i1 false) #4
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 16 %753, i8* align 16 %754, i64 32, i1 false) #4
  call void @av1_setup_pre_planes(%struct.macroblockd* %40, i32 0, %struct.yv12_buffer_config* nonnull %1073, i32 %105, i32 %107, %struct.scale_factors* null, i32 %1057) #4
  br label %1077

1077:                                             ; preds = %1076, %1062
  %1078 = shl i32 %1072, 16
  %1079 = ashr exact i32 %1078, 16
  %1080 = add nsw i32 %1079, 3
  %1081 = lshr i32 %1072, 15
  %1082 = and i32 %1081, 1
  %1083 = xor i32 %1082, 1
  %1084 = add nsw i32 %1080, %1083
  %1085 = ashr i32 %1084, 3
  %1086 = ashr i32 %1072, 16
  %1087 = add nsw i32 %1086, 3
  %1088 = xor i32 %1075, 1
  %1089 = add nsw i32 %1087, %1088
  %1090 = ashr i32 %1089, 3
  %1091 = shl nsw i32 %1090, 16
  %1092 = and i32 %1085, 65535
  %1093 = or i32 %1092, %1091
  store i32 %1072, i32* %13, align 4
  call void @llvm.lifetime.start.p0i8(i64 216, i8* nonnull %756) #4
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %756, i8 -86, i64 216, i1 false) #4
  call void @av1_make_default_fullpel_ms_params(%struct.FULLPEL_MOTION_SEARCH_PARAMS* nonnull %16, %struct.AV1_COMP* %0, %struct.macroblock* %2, i8 zeroext %4, %struct.mv* nonnull %731, %struct.search_site_config* %755, i32 0) #4
  %1094 = load i8, i8* %757, align 4
  %1095 = icmp eq i8 %1094, 0
  br i1 %1095, label %1100, label %1096

1096:                                             ; preds = %1077
  %1097 = load i32, i32* %758, align 4
  %1098 = icmp eq i32 %1097, 0
  %1099 = select i1 %1098, i32* null, i32* %744
  br label %1100

1100:                                             ; preds = %1096, %1077
  %1101 = phi i32* [ null, %1077 ], [ %1099, %1096 ]
  %1102 = bitcast %union.int_mv* %1052 to %struct.fullpel_mv*
  %1103 = call i32 @av1_full_pixel_search(i32 %1093, %struct.FULLPEL_MOTION_SEARCH_PARAMS* nonnull %16, i32 %1063, i32* %1101, %struct.fullpel_mv* %1102, %struct.fullpel_mv* null) #4
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %759) #4
  %1104 = bitcast %union.int_mv* %1052 to i16*
  %1105 = load i16, i16* %1104, align 4
  %1106 = shl i16 %1105, 3
  %1107 = getelementptr inbounds %struct.fullpel_mv, %struct.fullpel_mv* %1102, i64 0, i32 1
  %1108 = load i16, i16* %1107, align 2
  %1109 = shl i16 %1108, 3
  %1110 = zext i16 %1109 to i32
  %1111 = shl nuw i32 %1110, 16
  %1112 = zext i16 %1106 to i32
  %1113 = or i32 %1111, %1112
  store i32 %1113, i32* %17, align 4
  %1114 = load %struct.MvCosts*, %struct.MvCosts** %760, align 16
  %1115 = getelementptr inbounds %struct.MvCosts, %struct.MvCosts* %1114, i64 0, i32 0, i64 0
  %1116 = getelementptr inbounds %struct.MvCosts, %struct.MvCosts* %1114, i64 0, i32 5
  %1117 = load i32**, i32*** %1116, align 8
  %1118 = call i32 @av1_mv_bit_cost(%struct.mv* nonnull %732, %struct.mv* nonnull %730, i32* %1115, i32** %1117, i32 108) #4
  %1119 = sext i32 %1118 to i64
  %1120 = load i32, i32* %761, align 8
  %1121 = sext i32 %1120 to i64
  %1122 = mul nsw i64 %1121, %1119
  %1123 = add nsw i64 %1122, 256
  %1124 = ashr i64 %1123, 9
  %1125 = icmp sgt i64 %1124, %825
  br i1 %1125, label %1145, label %1126

1126:                                             ; preds = %1100
  call void @llvm.lifetime.start.p0i8(i64 168, i8* nonnull %762) #4
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %762, i8 -86, i64 168, i1 false) #4
  call void @av1_make_default_subpel_ms_params(%struct.SUBPEL_MOTION_SEARCH_PARAMS* nonnull %18, %struct.AV1_COMP* %0, %struct.macroblock* %2, i8 zeroext %4, %struct.mv* nonnull %730, i32* nonnull %744) #4
  %1127 = load i16, i16* %1104, align 4
  %1128 = shl i16 %1127, 3
  %1129 = load i16, i16* %1107, align 2
  %1130 = shl i16 %1129, 3
  %1131 = zext i16 %1130 to i32
  %1132 = shl nuw i32 %1131, 16
  %1133 = zext i16 %1128 to i32
  %1134 = or i32 %1132, %1133
  %1135 = load i32 (%struct.macroblockd*, %struct.AV1Common*, %struct.SUBPEL_MOTION_SEARCH_PARAMS*, i32, %struct.mv*, i32*, i32*, %union.int_mv*)*, i32 (%struct.macroblockd*, %struct.AV1Common*, %struct.SUBPEL_MOTION_SEARCH_PARAMS*, i32, %struct.mv*, i32*, i32*, %union.int_mv*)** %763, align 8
  %1136 = bitcast %union.int_mv* %1052 to %struct.mv*
  %1137 = sext i8 %1065 to i64
  %1138 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %2, i64 0, i32 61, i64 %1137
  %1139 = call i32 %1135(%struct.macroblockd* %40, %struct.AV1Common* %38, %struct.SUBPEL_MOTION_SEARCH_PARAMS* nonnull %18, i32 %1134, %struct.mv* %1136, i32* nonnull %14, i32* %1138, %union.int_mv* null) #4
  %1140 = load %struct.MvCosts*, %struct.MvCosts** %760, align 16
  %1141 = getelementptr inbounds %struct.MvCosts, %struct.MvCosts* %1140, i64 0, i32 0, i64 0
  %1142 = getelementptr inbounds %struct.MvCosts, %struct.MvCosts* %1140, i64 0, i32 5
  %1143 = load i32**, i32*** %1142, align 8
  %1144 = call i32 @av1_mv_bit_cost(%struct.mv* %1136, %struct.mv* nonnull %730, i32* %1141, i32** %1143, i32 108) #4
  call void @llvm.lifetime.end.p0i8(i64 168, i8* nonnull %762) #4
  br label %1145

1145:                                             ; preds = %1126, %1100
  %1146 = phi i32 [ %1118, %1100 ], [ %1144, %1126 ]
  br i1 %1074, label %1147, label %1148

1147:                                             ; preds = %1145
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 16 %746, i8* nonnull align 16 %733, i64 32, i1 false) #4
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 16 %750, i8* align 16 %749, i64 32, i1 false) #4
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 16 %754, i8* align 16 %753, i64 32, i1 false) #4
  br label %1148

1148:                                             ; preds = %1147, %1145
  %1149 = bitcast %union.int_mv* %1052 to %struct.mv*
  %1150 = getelementptr inbounds %struct.mv, %struct.mv* %1149, i64 0, i32 1
  %1151 = load i16, i16* %1150, align 2
  %1152 = load i16, i16* %738, align 2
  %1153 = icmp eq i16 %1151, %1152
  br i1 %1153, label %1154, label %1158

1154:                                             ; preds = %1148
  %1155 = load i16, i16* %1104, align 4
  %1156 = load i16, i16* %737, align 4
  %1157 = icmp eq i16 %1155, %1156
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %759) #4
  call void @llvm.lifetime.end.p0i8(i64 216, i8* nonnull %756) #4
  call void @llvm.lifetime.end.p0i8(i64 20, i8* nonnull %743) #4
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %742) #4
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %739) #4
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %736) #4
  call void @llvm.lifetime.end.p0i8(i64 96, i8* nonnull %733)
  br i1 %1157, label %1746, label %1161

1158:                                             ; preds = %1148
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %759) #4
  call void @llvm.lifetime.end.p0i8(i64 216, i8* nonnull %756) #4
  call void @llvm.lifetime.end.p0i8(i64 20, i8* nonnull %743) #4
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %742) #4
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %739) #4
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %736) #4
  call void @llvm.lifetime.end.p0i8(i64 96, i8* nonnull %733)
  br label %1161

1159:                                             ; preds = %997
  %1160 = icmp eq i8 %836, 13
  br i1 %1160, label %2639, label %1161

1161:                                             ; preds = %1021, %1154, %1158, %1159
  %1162 = phi i32 [ 0, %1159 ], [ %1146, %1158 ], [ %1146, %1154 ], [ %1038, %1021 ]
  %1163 = getelementptr inbounds [25 x [8 x i8]], [25 x [8 x i8]]* %26, i64 0, i64 13, i64 %839
  %1164 = load i8, i8* %1163, align 1
  %1165 = icmp eq i8 %1164, 0
  br i1 %1165, label %1171, label %1166

1166:                                             ; preds = %1161
  %1167 = load i32, i32* %915, align 4
  %1168 = getelementptr inbounds [25 x [8 x %union.int_mv]], [25 x [8 x %union.int_mv]]* %25, i64 0, i64 13, i64 %839, i32 0
  %1169 = load i32, i32* %1168, align 4
  %1170 = icmp eq i32 %1167, %1169
  br i1 %1170, label %1746, label %1171

1171:                                             ; preds = %1161, %1166
  %1172 = icmp eq i8 %836, 14
  br i1 %1172, label %2651, label %2639

1173:                                             ; preds = %2673
  %1174 = icmp eq i64 %821, 0
  br i1 %1174, label %1193, label %1175

1175:                                             ; preds = %1173
  %1176 = load i32, i32* %777, align 4
  %1177 = icmp eq i32 %1176, 0
  br i1 %1177, label %1181, label %1178

1178:                                             ; preds = %1175
  %1179 = load i32, i32* %778, align 4
  %1180 = icmp eq i32 %1179, 0
  br i1 %1180, label %1181, label %1184

1181:                                             ; preds = %1184, %1178, %1175
  %1182 = phi i64 [ 0, %1175 ], [ 1, %1178 ], [ 2, %1184 ]
  %1183 = phi i32* [ %777, %1175 ], [ %778, %1178 ], [ %779, %1184 ]
  store i32 1, i32* %1183, align 4
  br label %1187

1184:                                             ; preds = %1178
  %1185 = load i32, i32* %779, align 4
  %1186 = icmp eq i32 %1185, 0
  br i1 %1186, label %1181, label %1187

1187:                                             ; preds = %1181, %1184
  %1188 = phi i64 [ %1182, %1181 ], [ -1, %1184 ]
  %1189 = getelementptr inbounds [4 x %struct.PRED_BUFFER], [4 x %struct.PRED_BUFFER]* %31, i64 0, i64 %1188
  %1190 = ptrtoint %struct.PRED_BUFFER* %1189 to i64
  %1191 = bitcast %struct.PRED_BUFFER* %1189 to i64*
  %1192 = load i64, i64* %1191, align 16
  store i64 %1192, i64* %780, align 8
  store i32 %95, i32* %781, align 8
  br label %1193

1193:                                             ; preds = %1173, %1187, %2673
  %1194 = phi i64 [ %1190, %1187 ], [ %821, %2673 ], [ %783, %1173 ]
  %1195 = or i1 %784, %1005
  br i1 %1195, label %1330, label %1196

1196:                                             ; preds = %1193
  %1197 = load i16, i16* %785, align 8
  %1198 = and i16 %1197, 7
  %1199 = icmp eq i16 %1198, 0
  br i1 %1199, label %1200, label %1204

1200:                                             ; preds = %1196
  %1201 = load i16, i16* %787, align 2
  %1202 = and i16 %1201, 7
  %1203 = icmp eq i16 %1202, 0
  br i1 %1203, label %1330, label %1204

1204:                                             ; preds = %1200, %1196
  br i1 %917, label %1208, label %1205

1205:                                             ; preds = %1204
  %1206 = load i32, i32* %715, align 16
  %1207 = icmp eq i32 %1206, 0
  br i1 %1207, label %1208, label %1330

1208:                                             ; preds = %1205, %1204
  %1209 = load %struct.MB_MODE_INFO**, %struct.MB_MODE_INFO*** %41, align 8
  %1210 = load %struct.MB_MODE_INFO*, %struct.MB_MODE_INFO** %1209, align 8
  call void @llvm.lifetime.start.p0i8(i64 80, i8* nonnull %789) #4
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %789, i8 0, i64 80, i1 false) #4
  call void @llvm.lifetime.start.p0i8(i64 2, i8* nonnull %790) #4
  store i16 0, i16* %10, align 2
  %1211 = inttoptr i64 %1194 to %struct.PRED_BUFFER*
  %1212 = getelementptr inbounds %struct.MB_MODE_INFO, %struct.MB_MODE_INFO* %1210, i64 0, i32 8, i32 0
  %1213 = getelementptr inbounds %struct.MB_MODE_INFO, %struct.MB_MODE_INFO* %1210, i64 0, i32 24
  br label %1215

1214:                                             ; preds = %1286
  br i1 %89, label %1295, label %1302

1215:                                             ; preds = %1286, %1208
  %1216 = phi i64 [ %1194, %1208 ], [ %1287, %1286 ]
  %1217 = phi i64 [ 0, %1208 ], [ %1293, %1286 ]
  %1218 = phi i32 [ -1, %1208 ], [ %1292, %1286 ]
  %1219 = phi i64 [ 9223372036854775807, %1208 ], [ %1291, %1286 ]
  %1220 = phi i32 [ 0, %1208 ], [ %1290, %1286 ]
  %1221 = phi i32 [ 0, %1208 ], [ %1289, %1286 ]
  %1222 = phi %struct.PRED_BUFFER* [ %1211, %1208 ], [ %1288, %1286 ]
  %1223 = getelementptr inbounds [2 x i8], [2 x i8]* @__const.search_filter_ref.filters, i64 0, i64 %1217
  %1224 = load i8, i8* %1223, align 1
  %1225 = zext i8 %1224 to i32
  %1226 = shl nuw nsw i32 %1225, 16
  %1227 = or i32 %1226, %1225
  store i32 %1227, i32* %1212, align 4
  call void @av1_enc_build_inter_predictor_y(%struct.macroblockd* %40, i32 %105, i32 %107) #4
  %1228 = getelementptr inbounds [2 x %struct.RD_STATS], [2 x %struct.RD_STATS]* %9, i64 0, i64 %1217
  br i1 %618, label %1229, label %1230

1229:                                             ; preds = %1215
  call fastcc void @model_skip_for_sb_y_large(%struct.AV1_COMP* %0, i8 zeroext %4, i32 %105, i32 %107, %struct.macroblock* %2, %struct.macroblockd* %40, %struct.RD_STATS* %1228, i32* nonnull %35, i32 1) #4
  br label %1231

1230:                                             ; preds = %1215
  call fastcc void @model_rd_for_sb_y(%struct.AV1_COMP* %0, i8 zeroext %4, %struct.macroblock* %2, %struct.macroblockd* %40, %struct.RD_STATS* %1228, i32 1) #4
  br label %1231

1231:                                             ; preds = %1230, %1229
  %1232 = load i8, i8* %53, align 1
  %1233 = load %struct.SequenceHeader*, %struct.SequenceHeader** %289, align 16
  %1234 = getelementptr inbounds %struct.SequenceHeader, %struct.SequenceHeader* %1233, i64 0, i32 19
  %1235 = load i8, i8* %1234, align 8
  %1236 = zext i8 %1235 to i32
  %1237 = call i32 @av1_get_switchable_rate(%struct.macroblock* %2, %struct.macroblockd* %40, i8 zeroext %1232, i32 %1236) #4
  %1238 = getelementptr inbounds [2 x %struct.RD_STATS], [2 x %struct.RD_STATS]* %9, i64 0, i64 %1217, i32 0
  %1239 = load i32, i32* %1238, align 8
  %1240 = add nsw i32 %1239, %1237
  store i32 %1240, i32* %1238, align 8
  %1241 = sext i32 %1240 to i64
  %1242 = load i32, i32* %761, align 8
  %1243 = sext i32 %1242 to i64
  %1244 = mul nsw i64 %1243, %1241
  %1245 = add nsw i64 %1244, 256
  %1246 = ashr i64 %1245, 9
  %1247 = getelementptr inbounds [2 x %struct.RD_STATS], [2 x %struct.RD_STATS]* %9, i64 0, i64 %1217, i32 1
  %1248 = load i64, i64* %1247, align 8
  %1249 = shl nsw i64 %1248, 7
  %1250 = add nsw i64 %1246, %1249
  %1251 = load i8, i8* %1213, align 1
  %1252 = getelementptr inbounds [2 x i8], [2 x i8]* %788, i64 0, i64 %1217
  store i8 %1251, i8* %1252, align 1
  %1253 = icmp slt i64 %1250, %1219
  br i1 %1253, label %1254, label %1286

1254:                                             ; preds = %1231
  %1255 = getelementptr inbounds [2 x %struct.RD_STATS], [2 x %struct.RD_STATS]* %9, i64 0, i64 %1217, i32 4
  %1256 = load i32, i32* %1255, align 8
  %1257 = load i32, i32* %35, align 4
  %1258 = trunc i64 %1217 to i32
  br i1 %89, label %1259, label %1286

1259:                                             ; preds = %1254
  %1260 = inttoptr i64 %1216 to %struct.PRED_BUFFER*
  %1261 = icmp eq %struct.PRED_BUFFER* %1222, %1260
  br i1 %1261, label %1268, label %1262

1262:                                             ; preds = %1259
  %1263 = icmp eq i64 %1216, 0
  br i1 %1263, label %1266, label %1264

1264:                                             ; preds = %1262
  %1265 = getelementptr inbounds %struct.PRED_BUFFER, %struct.PRED_BUFFER* %1260, i64 0, i32 2
  store i32 0, i32* %1265, align 4
  br label %1266

1266:                                             ; preds = %1264, %1262
  %1267 = ptrtoint %struct.PRED_BUFFER* %1222 to i64
  br label %1268

1268:                                             ; preds = %1266, %1259
  %1269 = phi i64 [ %1216, %1259 ], [ %1267, %1266 ]
  %1270 = load i32, i32* %777, align 4
  %1271 = icmp eq i32 %1270, 0
  br i1 %1271, label %1275, label %1272

1272:                                             ; preds = %1268
  %1273 = load i32, i32* %778, align 4
  %1274 = icmp eq i32 %1273, 0
  br i1 %1274, label %1275, label %1278

1275:                                             ; preds = %1278, %1272, %1268
  %1276 = phi i64 [ 0, %1268 ], [ 1, %1272 ], [ 2, %1278 ]
  %1277 = phi i32* [ %777, %1268 ], [ %778, %1272 ], [ %779, %1278 ]
  store i32 1, i32* %1277, align 4
  br label %1281

1278:                                             ; preds = %1272
  %1279 = load i32, i32* %779, align 4
  %1280 = icmp eq i32 %1279, 0
  br i1 %1280, label %1275, label %1281

1281:                                             ; preds = %1278, %1275
  %1282 = phi i64 [ %1276, %1275 ], [ -1, %1278 ]
  %1283 = getelementptr inbounds [4 x %struct.PRED_BUFFER], [4 x %struct.PRED_BUFFER]* %31, i64 0, i64 %1282
  %1284 = bitcast %struct.PRED_BUFFER* %1283 to i64*
  %1285 = load i64, i64* %1284, align 16
  store i64 %1285, i64* %780, align 8
  store i32 %95, i32* %781, align 8
  br label %1286

1286:                                             ; preds = %1254, %1281, %1231
  %1287 = phi i64 [ %1216, %1254 ], [ %1269, %1281 ], [ %1216, %1231 ]
  %1288 = phi %struct.PRED_BUFFER* [ %1222, %1254 ], [ %1283, %1281 ], [ %1222, %1231 ]
  %1289 = phi i32 [ %1256, %1254 ], [ %1256, %1281 ], [ %1221, %1231 ]
  %1290 = phi i32 [ %1257, %1254 ], [ %1257, %1281 ], [ %1220, %1231 ]
  %1291 = phi i64 [ %1250, %1254 ], [ %1250, %1281 ], [ %1219, %1231 ]
  %1292 = phi i32 [ %1258, %1254 ], [ %1258, %1281 ], [ %1218, %1231 ]
  %1293 = add nuw nsw i64 %1217, 1
  %1294 = icmp eq i64 %1293, 2
  br i1 %1294, label %1214, label %1215

1295:                                             ; preds = %1214
  %1296 = inttoptr i64 %1287 to %struct.PRED_BUFFER*
  %1297 = icmp eq %struct.PRED_BUFFER* %1288, %1296
  %1298 = icmp eq %struct.PRED_BUFFER* %1288, null
  %1299 = or i1 %1298, %1297
  br i1 %1299, label %1302, label %1300

1300:                                             ; preds = %1295
  %1301 = getelementptr inbounds %struct.PRED_BUFFER, %struct.PRED_BUFFER* %1288, i64 0, i32 2
  store i32 0, i32* %1301, align 4
  br label %1302

1302:                                             ; preds = %1300, %1295, %1214
  %1303 = sext i32 %1292 to i64
  %1304 = getelementptr inbounds [2 x i8], [2 x i8]* @__const.search_filter_ref.filters, i64 0, i64 %1303
  %1305 = load i8, i8* %1304, align 1
  %1306 = zext i8 %1305 to i32
  %1307 = shl nuw nsw i32 %1306, 16
  %1308 = or i32 %1307, %1306
  store i32 %1308, i32* %1212, align 4
  %1309 = getelementptr inbounds [2 x i8], [2 x i8]* %788, i64 0, i64 %1303
  %1310 = load i8, i8* %1309, align 1
  store i8 %1310, i8* %1213, align 1
  %1311 = getelementptr inbounds [2 x %struct.RD_STATS], [2 x %struct.RD_STATS]* %9, i64 0, i64 %1303, i32 0
  %1312 = load i32, i32* %1311, align 8
  store i32 %1312, i32* %206, align 8
  %1313 = getelementptr inbounds [2 x %struct.RD_STATS], [2 x %struct.RD_STATS]* %9, i64 0, i64 %1303, i32 1
  %1314 = load i64, i64* %1313, align 8
  store i64 %1314, i64* %207, align 8
  %1315 = getelementptr inbounds [2 x %struct.RD_STATS], [2 x %struct.RD_STATS]* %9, i64 0, i64 %1303, i32 3
  %1316 = load i64, i64* %1315, align 8
  store i64 %1316, i64* %210, align 8
  %1317 = or i32 %1290, %1289
  %1318 = icmp ne i32 %1317, 0
  %1319 = zext i1 %1318 to i32
  store i32 %1319, i32* %211, align 8
  store i32 %1290, i32* %35, align 4
  br i1 %89, label %1320, label %1326

1320:                                             ; preds = %1302
  %1321 = inttoptr i64 %1287 to i64*
  %1322 = load i64, i64* %1321, align 8
  store i64 %1322, i64* %780, align 8
  %1323 = inttoptr i64 %1287 to %struct.PRED_BUFFER*
  %1324 = getelementptr inbounds %struct.PRED_BUFFER, %struct.PRED_BUFFER* %1323, i64 0, i32 1
  %1325 = load i32, i32* %1324, align 8
  store i32 %1325, i32* %781, align 8
  br label %1329

1326:                                             ; preds = %1302
  %1327 = icmp slt i32 %1292, 1
  br i1 %1327, label %1328, label %1329

1328:                                             ; preds = %1326
  call void @av1_enc_build_inter_predictor_y(%struct.macroblockd* %40, i32 %105, i32 %107) #4
  br label %1329

1329:                                             ; preds = %1320, %1326, %1328
  call void @llvm.lifetime.end.p0i8(i64 2, i8* nonnull %790) #4
  call void @llvm.lifetime.end.p0i8(i64 80, i8* nonnull %789) #4
  br label %1335

1330:                                             ; preds = %1205, %1200, %1193
  %1331 = or i1 %1005, %791
  %1332 = select i1 %1331, i32 0, i32 %794
  store i32 %1332, i32* %694, align 4
  call void @av1_enc_build_inter_predictor_y(%struct.macroblockd* %40, i32 %105, i32 %107) #4
  br i1 %618, label %1333, label %1334

1333:                                             ; preds = %1330
  call fastcc void @model_skip_for_sb_y_large(%struct.AV1_COMP* %0, i8 zeroext %4, i32 %105, i32 %107, %struct.macroblock* %2, %struct.macroblockd* %40, %struct.RD_STATS* nonnull %28, i32* nonnull %35, i32 %675)
  br label %1335

1334:                                             ; preds = %1330
  call fastcc void @model_rd_for_sb_y(%struct.AV1_COMP* %0, i8 zeroext %4, %struct.macroblock* %2, %struct.macroblockd* %40, %struct.RD_STATS* nonnull %28, i32 %675)
  br label %1335

1335:                                             ; preds = %1333, %1334, %1329
  %1336 = phi i64 [ %1194, %1333 ], [ %1194, %1334 ], [ %1287, %1329 ]
  br i1 %917, label %1337, label %1349

1337:                                             ; preds = %1335
  %1338 = load i32, i32* %915, align 4
  %1339 = icmp eq i32 %1338, 0
  br i1 %1339, label %1340, label %1349

1340:                                             ; preds = %1337
  %1341 = load i64, i64* %210, align 8
  %1342 = load i8, i8* %795, align 1
  %1343 = zext i8 %1342 to i64
  %1344 = load i8, i8* %796, align 1
  %1345 = zext i8 %1344 to i64
  %1346 = add nuw nsw i64 %1345, %1343
  %1347 = ashr i64 %1341, %1346
  %1348 = trunc i64 %1347 to i32
  br label %1349

1349:                                             ; preds = %1340, %1337, %1335
  %1350 = phi i32 [ %1348, %1340 ], [ %819, %1337 ], [ %819, %1335 ]
  %1351 = load %struct.MB_MODE_INFO*, %struct.MB_MODE_INFO** %797, align 16
  %1352 = load %struct.MB_MODE_INFO*, %struct.MB_MODE_INFO** %798, align 8
  %1353 = icmp eq %struct.MB_MODE_INFO* %1351, null
  br i1 %1353, label %1358, label %1354

1354:                                             ; preds = %1349
  %1355 = getelementptr inbounds %struct.MB_MODE_INFO, %struct.MB_MODE_INFO* %1351, i64 0, i32 23
  %1356 = load i8, i8* %1355, align 8
  %1357 = sext i8 %1356 to i64
  br label %1358

1358:                                             ; preds = %1354, %1349
  %1359 = phi i64 [ %1357, %1354 ], [ 0, %1349 ]
  %1360 = icmp eq %struct.MB_MODE_INFO* %1352, null
  br i1 %1360, label %1365, label %1361

1361:                                             ; preds = %1358
  %1362 = getelementptr inbounds %struct.MB_MODE_INFO, %struct.MB_MODE_INFO* %1352, i64 0, i32 23
  %1363 = load i8, i8* %1362, align 8
  %1364 = sext i8 %1363 to i64
  br label %1365

1365:                                             ; preds = %1358, %1361
  %1366 = phi i64 [ %1364, %1361 ], [ 0, %1358 ]
  %1367 = add nsw i64 %1366, %1359
  %1368 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %2, i64 0, i32 20, i32 38, i64 %1367, i64 1
  %1369 = load i32, i32* %1368, align 4
  %1370 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %2, i64 0, i32 20, i32 38, i64 %1367, i64 0
  %1371 = load i32, i32* %1370, align 4
  %1372 = load i64, i64* %210, align 8
  %1373 = load i32, i32* %35, align 4
  %1374 = icmp eq i32 %1373, 0
  br i1 %1374, label %1377, label %1375

1375:                                             ; preds = %1365
  store i32 1, i32* %211, align 8
  store i32 %1369, i32* %206, align 8
  %1376 = shl i64 %1372, 4
  store i64 %1376, i64* %207, align 8
  br label %1467

1377:                                             ; preds = %1365
  br i1 %799, label %1385, label %1378

1378:                                             ; preds = %1377
  %1379 = load i32, i32* %211, align 8
  %1380 = icmp eq i32 %1379, 0
  br i1 %1380, label %1382, label %1381

1381:                                             ; preds = %1378
  store i32 %1369, i32* %206, align 8
  br label %1420

1382:                                             ; preds = %1378
  %1383 = load i32, i32* %206, align 8
  %1384 = add nsw i32 %1383, %1371
  store i32 %1384, i32* %206, align 8
  br label %1420

1385:                                             ; preds = %1377
  %1386 = load i8, i8* %706, align 1
  call fastcc void @block_yrd(%struct.macroblock* %2, %struct.RD_STATS* nonnull %28, i32* nonnull %34, i8 zeroext %4, i8 zeroext %1386)
  %1387 = load i32, i32* %211, align 8
  %1388 = icmp eq i32 %1387, 0
  br i1 %1388, label %1391, label %1389

1389:                                             ; preds = %1385
  %1390 = load i64, i64* %210, align 8
  br label %1410

1391:                                             ; preds = %1385
  %1392 = load i32, i32* %206, align 8
  %1393 = sext i32 %1392 to i64
  %1394 = load i32, i32* %761, align 8
  %1395 = sext i32 %1394 to i64
  %1396 = mul nsw i64 %1395, %1393
  %1397 = add nsw i64 %1396, 256
  %1398 = ashr i64 %1397, 9
  %1399 = load i64, i64* %207, align 8
  %1400 = shl i64 %1399, 7
  %1401 = add nsw i64 %1398, %1400
  %1402 = load i64, i64* %210, align 8
  %1403 = shl nsw i64 %1402, 7
  %1404 = icmp slt i64 %1401, %1403
  br i1 %1404, label %1418, label %1405

1405:                                             ; preds = %1391
  %1406 = load i32, i32* %801, align 4
  %1407 = load i64, i64* %208, align 8
  %1408 = load i32, i32* %212, align 4
  %1409 = add nsw i32 %1392, %1371
  br label %1410

1410:                                             ; preds = %1389, %1405
  %1411 = phi i64 [ %1402, %1405 ], [ %1390, %1389 ]
  %1412 = phi i32 [ %1409, %1405 ], [ 2147483647, %1389 ]
  %1413 = phi i32 [ %1406, %1405 ], [ -1431655766, %1389 ]
  %1414 = phi i64 [ %1399, %1405 ], [ 9223372036854775807, %1389 ]
  %1415 = phi i64 [ %1407, %1405 ], [ 9223372036854775807, %1389 ]
  %1416 = phi i64 [ %1402, %1405 ], [ 9223372036854775807, %1389 ]
  %1417 = phi i32 [ %1408, %1405 ], [ 0, %1389 ]
  store i32 %1369, i32* %206, align 8
  store i32 1, i32* %211, align 8
  store i64 %1411, i64* %207, align 8
  br label %1420

1418:                                             ; preds = %1391
  %1419 = add nsw i32 %1392, %1371
  store i32 %1419, i32* %206, align 8
  br label %1420

1420:                                             ; preds = %1410, %1418, %1381, %1382
  %1421 = phi i32 [ %1419, %1418 ], [ %1369, %1410 ], [ %1384, %1382 ], [ %1369, %1381 ]
  %1422 = phi i32 [ 2147483647, %1418 ], [ %1412, %1410 ], [ 2147483647, %1382 ], [ 2147483647, %1381 ]
  %1423 = phi i32 [ -1431655766, %1418 ], [ %1413, %1410 ], [ -1431655766, %1382 ], [ -1431655766, %1381 ]
  %1424 = phi i64 [ 9223372036854775807, %1418 ], [ %1414, %1410 ], [ 9223372036854775807, %1382 ], [ 9223372036854775807, %1381 ]
  %1425 = phi i64 [ 9223372036854775807, %1418 ], [ %1415, %1410 ], [ 9223372036854775807, %1382 ], [ 9223372036854775807, %1381 ]
  %1426 = phi i64 [ 9223372036854775807, %1418 ], [ %1416, %1410 ], [ 9223372036854775807, %1382 ], [ 9223372036854775807, %1381 ]
  %1427 = phi i32 [ 0, %1418 ], [ %1417, %1410 ], [ 0, %1382 ], [ 0, %1381 ]
  %1428 = load i8, i8* %802, align 8
  %1429 = icmp eq i8 %1428, 0
  br i1 %1429, label %1430, label %1433

1430:                                             ; preds = %1420
  %1431 = load i8, i8* %803, align 1
  %1432 = icmp eq i8 %1431, 0
  br i1 %1432, label %1467, label %1433

1433:                                             ; preds = %1430, %1420
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %804) #4
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %804, i8 -86, i64 40, i1 false)
  %1434 = load i32, i32* %805, align 4
  %1435 = load i32, i32* %806, align 8
  %1436 = sext i32 %1434 to i64
  %1437 = sext i32 %1435 to i64
  %1438 = getelementptr inbounds [22 x [2 x [2 x i8]]], [22 x [2 x [2 x i8]]]* @ss_size_lookup, i64 0, i64 %52, i64 %1436, i64 %1437
  %1439 = load i8, i8* %1438, align 1
  br i1 %1429, label %1441, label %1440

1440:                                             ; preds = %1433
  call void @av1_enc_build_inter_predictor(%struct.AV1Common* %38, %struct.macroblockd* %40, i32 %105, i32 %107, %struct.BUFFER_SET* null, i8 zeroext %4, i32 1, i32 1) #4
  br label %1441

1441:                                             ; preds = %1433, %1440
  %1442 = load i8, i8* %803, align 1
  %1443 = icmp eq i8 %1442, 0
  br i1 %1443, label %1445, label %1444

1444:                                             ; preds = %1441
  call void @av1_enc_build_inter_predictor(%struct.AV1Common* %38, %struct.macroblockd* %40, i32 %105, i32 %107, %struct.BUFFER_SET* null, i8 zeroext %4, i32 2, i32 2) #4
  br label %1445

1445:                                             ; preds = %1441, %1444
  call fastcc void @model_rd_for_sb_uv(%struct.AV1_COMP* %0, i8 zeroext %1439, %struct.macroblock* %2, %struct.macroblockd* %40, %struct.RD_STATS* nonnull %36, i64* %210, i32 1, i32 2)
  %1446 = load i32, i32* %211, align 8
  %1447 = icmp eq i32 %1446, 0
  %1448 = load i32, i32* %807, align 8
  br i1 %1447, label %1454, label %1449

1449:                                             ; preds = %1445
  %1450 = icmp ne i32 %1448, 0
  %1451 = icmp eq i32 %1422, 2147483647
  %1452 = or i1 %1451, %1450
  br i1 %1452, label %1454, label %1453

1453:                                             ; preds = %1449
  store i32 %1422, i32* %206, align 8
  store i32 %1423, i32* %801, align 4
  store i64 %1424, i64* %207, align 8
  store i64 %1425, i64* %208, align 8
  store i64 %1426, i64* %210, align 8
  store i32 0, i32* %211, align 8
  store i32 %1427, i32* %212, align 4
  br label %1454

1454:                                             ; preds = %1445, %1449, %1453
  %1455 = phi i32 [ %1448, %1449 ], [ 0, %1453 ], [ %1448, %1445 ]
  %1456 = phi i32 [ %1446, %1449 ], [ 0, %1453 ], [ 0, %1445 ]
  %1457 = load i32, i32* %808, align 8
  %1458 = load i32, i32* %206, align 8
  %1459 = add nsw i32 %1458, %1457
  store i32 %1459, i32* %206, align 8
  %1460 = load i64, i64* %809, align 8
  %1461 = load i64, i64* %207, align 8
  %1462 = add nsw i64 %1461, %1460
  store i64 %1462, i64* %207, align 8
  %1463 = icmp ne i32 %1456, 0
  %1464 = icmp ne i32 %1455, 0
  %1465 = and i1 %1463, %1464
  %1466 = zext i1 %1465 to i32
  store i32 %1466, i32* %211, align 8
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %804) #4
  br label %1467

1467:                                             ; preds = %1430, %1454, %1375
  %1468 = phi i32 [ %1421, %1430 ], [ %1459, %1454 ], [ %1369, %1375 ]
  %1469 = phi i32 [ %1422, %1430 ], [ %1422, %1454 ], [ 2147483647, %1375 ]
  %1470 = add nsw i32 %1468, %2674
  store i32 %1470, i32* %206, align 8
  %1471 = load i8, i8* %222, align 1
  %1472 = icmp sgt i8 %1471, 0
  %1473 = load i8, i8* %221, align 1
  br i1 %1472, label %1474, label %1504

1474:                                             ; preds = %1467
  %1475 = icmp slt i8 %1473, 5
  %1476 = icmp sgt i8 %1471, 4
  %1477 = and i1 %1476, %1475
  br i1 %1477, label %1500, label %1478

1478:                                             ; preds = %1474
  switch i8 %1473, label %1500 [
    i8 1, label %1479
    i8 5, label %1482
    i8 2, label %1486
    i8 3, label %1490
    i8 6, label %1492
  ]

1479:                                             ; preds = %1478
  %1480 = add i8 %1471, -2
  %1481 = icmp ult i8 %1480, 3
  br i1 %1481, label %1497, label %1500

1482:                                             ; preds = %1478
  %1483 = icmp eq i8 %1471, 6
  %1484 = select i1 %1483, i8 7, i8 -1
  %1485 = icmp eq i8 %1471, 7
  br i1 %1485, label %1497, label %1494

1486:                                             ; preds = %1478
  %1487 = icmp eq i8 %1471, 4
  %1488 = select i1 %1487, i8 5, i8 -1
  %1489 = icmp eq i8 %1471, 3
  br i1 %1489, label %1497, label %1494

1490:                                             ; preds = %1478
  %1491 = icmp eq i8 %1471, 4
  br i1 %1491, label %1497, label %1500

1492:                                             ; preds = %1478
  %1493 = icmp eq i8 %1471, 7
  br i1 %1493, label %1497, label %1500

1494:                                             ; preds = %1486, %1482
  %1495 = phi i8 [ %1484, %1482 ], [ %1488, %1486 ]
  %1496 = icmp sgt i8 %1495, -1
  br i1 %1496, label %1497, label %1500

1497:                                             ; preds = %1479, %1494, %1492, %1490, %1486, %1482
  %1498 = phi i8 [ %1495, %1494 ], [ 8, %1492 ], [ 6, %1490 ], [ 3, %1482 ], [ 4, %1486 ], [ %1480, %1479 ]
  %1499 = add nuw nsw i8 %1498, 20
  br label %1507

1500:                                             ; preds = %1479, %1494, %1492, %1490, %1478, %1474
  %1501 = shl i8 %1471, 2
  %1502 = add i8 %1501, -13
  %1503 = add i8 %1502, %1473
  br label %1507

1504:                                             ; preds = %1467
  %1505 = sext i8 %1473 to i64
  %1506 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %2, i64 0, i32 3, i32 4, i64 %1505
  br label %1521

1507:                                             ; preds = %1500, %1497
  %1508 = phi i8 [ %1503, %1500 ], [ %1499, %1497 ]
  %1509 = sext i8 %1508 to i64
  %1510 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %2, i64 0, i32 3, i32 4, i64 %1509
  %1511 = load i16, i16* %1510, align 2
  %1512 = and i16 %1511, 7
  %1513 = lshr i16 %1511, 5
  %1514 = and i16 %1513, 7
  %1515 = zext i16 %1514 to i64
  %1516 = zext i16 %1512 to i32
  %1517 = icmp ult i32 %1516, 4
  %1518 = select i1 %1517, i32 %1516, i32 4
  %1519 = zext i32 %1518 to i64
  %1520 = getelementptr inbounds [3 x [5 x i16]], [3 x [5 x i16]]* @compound_mode_ctx_map, i64 0, i64 %1515, i64 %1519
  br label %1521

1521:                                             ; preds = %1504, %1507
  %1522 = phi i16* [ %1520, %1507 ], [ %1506, %1504 ]
  %1523 = load i16, i16* %1522, align 2
  %1524 = add i8 %836, -17
  %1525 = icmp ugt i8 %1524, 7
  br i1 %1525, label %1531, label %1526

1526:                                             ; preds = %1521
  %1527 = sext i16 %1523 to i64
  %1528 = zext i8 %1524 to i64
  %1529 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %2, i64 0, i32 20, i32 27, i64 %1527, i64 %1528
  %1530 = load i32, i32* %1529, align 4
  br label %1560

1531:                                             ; preds = %1521
  %1532 = and i16 %1523, 7
  %1533 = zext i16 %1532 to i64
  br i1 %894, label %1534, label %1537

1534:                                             ; preds = %1531
  %1535 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %2, i64 0, i32 20, i32 16, i64 %1533, i64 0
  %1536 = load i32, i32* %1535, align 4
  br label %1560

1537:                                             ; preds = %1531
  %1538 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %2, i64 0, i32 20, i32 16, i64 %1533, i64 1
  %1539 = load i32, i32* %1538, align 4
  %1540 = lshr i16 %1523, 3
  %1541 = and i16 %1540, 1
  %1542 = icmp eq i8 %836, 15
  %1543 = zext i16 %1541 to i64
  br i1 %1542, label %1544, label %1548

1544:                                             ; preds = %1537
  %1545 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %2, i64 0, i32 20, i32 17, i64 %1543, i64 0
  %1546 = load i32, i32* %1545, align 4
  %1547 = add nsw i32 %1546, %1539
  br label %1560

1548:                                             ; preds = %1537
  %1549 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %2, i64 0, i32 20, i32 17, i64 %1543, i64 1
  %1550 = load i32, i32* %1549, align 4
  %1551 = add nsw i32 %1550, %1539
  %1552 = lshr i16 %1523, 4
  %1553 = and i16 %1552, 15
  %1554 = zext i16 %1553 to i64
  %1555 = icmp ne i8 %836, 13
  %1556 = zext i1 %1555 to i64
  %1557 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %2, i64 0, i32 20, i32 18, i64 %1554, i64 %1556
  %1558 = load i32, i32* %1557, align 4
  %1559 = add nsw i32 %1551, %1558
  br label %1560

1560:                                             ; preds = %1526, %1534, %1544, %1548
  %1561 = phi i32 [ %1530, %1526 ], [ %1536, %1534 ], [ %1547, %1544 ], [ %1559, %1548 ]
  %1562 = add nsw i32 %1561, %1470
  %1563 = getelementptr inbounds [8 x i32], [8 x i32]* %29, i64 0, i64 %839
  %1564 = load i32, i32* %1563, align 4
  %1565 = add i32 %1564, %1562
  store i32 %1565, i32* %206, align 8
  %1566 = sext i32 %1565 to i64
  %1567 = load i32, i32* %761, align 8
  %1568 = sext i32 %1567 to i64
  %1569 = mul nsw i64 %1568, %1566
  %1570 = add nsw i64 %1569, 256
  %1571 = ashr i64 %1570, 9
  %1572 = load i64, i64* %207, align 8
  %1573 = shl nsw i64 %1572, 7
  %1574 = add nsw i64 %1571, %1573
  store i64 %1574, i64* %208, align 8
  %1575 = load i32, i32* %595, align 4
  %1576 = icmp eq i32 %1575, 1
  br i1 %1576, label %1577, label %1678

1577:                                             ; preds = %1560
  %1578 = bitcast %union.int_mv* %914 to %struct.mv*
  %1579 = bitcast %union.int_mv* %914 to i16*
  %1580 = load i16, i16* %1579, align 4
  %1581 = sext i16 %1580 to i32
  %1582 = getelementptr inbounds %struct.mv, %struct.mv* %1578, i64 0, i32 1
  %1583 = load i16, i16* %1582, align 2
  %1584 = sext i16 %1583 to i32
  %1585 = load i32, i32* %810, align 4
  %1586 = load i32, i32* %811, align 1
  br i1 %894, label %1587, label %1664

1587:                                             ; preds = %1577
  br i1 %724, label %1588, label %1600

1588:                                             ; preds = %1587
  %1589 = icmp ne i32 %1586, 3
  %1590 = icmp ult i32 %1585, 300
  %1591 = and i1 %1590, %1589
  br i1 %1591, label %1592, label %1600

1592:                                             ; preds = %1588
  %1593 = add nsw i32 %1581, 16
  %1594 = icmp ugt i32 %1593, 32
  %1595 = add nsw i32 %1584, 16
  %1596 = icmp ugt i32 %1595, 32
  %1597 = or i1 %1594, %1596
  br i1 %1597, label %1598, label %1600

1598:                                             ; preds = %1592
  %1599 = shl i64 %1574, 2
  store i64 %1599, i64* %208, align 8
  br label %1678

1600:                                             ; preds = %1592, %1588, %1587
  %1601 = load %struct.MB_MODE_INFO*, %struct.MB_MODE_INFO** %797, align 16
  %1602 = icmp eq %struct.MB_MODE_INFO* %1601, null
  br i1 %1602, label %1615, label %1603

1603:                                             ; preds = %1600
  %1604 = getelementptr inbounds %struct.MB_MODE_INFO, %struct.MB_MODE_INFO* %1601, i64 0, i32 5, i64 0
  %1605 = getelementptr inbounds %union.int_mv, %union.int_mv* %1604, i64 0, i32 0
  %1606 = load i32, i32* %1605, align 8
  %1607 = icmp ne i32 %1606, -2147450880
  %1608 = zext i1 %1607 to i32
  %1609 = bitcast %union.int_mv* %1604 to %struct.mv*
  %1610 = shl i32 %1606, 16
  %1611 = ashr exact i32 %1610, 16
  %1612 = getelementptr inbounds %struct.mv, %struct.mv* %1609, i64 0, i32 1
  %1613 = load i16, i16* %1612, align 2
  %1614 = sext i16 %1613 to i32
  br label %1615

1615:                                             ; preds = %1603, %1600
  %1616 = phi i32 [ %1608, %1603 ], [ 0, %1600 ]
  %1617 = phi i32 [ %1611, %1603 ], [ 0, %1600 ]
  %1618 = phi i32 [ %1614, %1603 ], [ 0, %1600 ]
  %1619 = load %struct.MB_MODE_INFO*, %struct.MB_MODE_INFO** %798, align 8
  %1620 = icmp eq %struct.MB_MODE_INFO* %1619, null
  br i1 %1620, label %1621, label %1623

1621:                                             ; preds = %1615
  %1622 = icmp eq i32 %1616, 0
  br i1 %1622, label %1647, label %1648

1623:                                             ; preds = %1615
  %1624 = getelementptr inbounds %struct.MB_MODE_INFO, %struct.MB_MODE_INFO* %1619, i64 0, i32 5, i64 0
  %1625 = getelementptr inbounds %union.int_mv, %union.int_mv* %1624, i64 0, i32 0
  %1626 = load i32, i32* %1625, align 8
  %1627 = icmp ne i32 %1626, -2147450880
  %1628 = bitcast %union.int_mv* %1624 to %struct.mv*
  %1629 = shl i32 %1626, 16
  %1630 = ashr exact i32 %1629, 16
  %1631 = getelementptr inbounds %struct.mv, %struct.mv* %1628, i64 0, i32 1
  %1632 = load i16, i16* %1631, align 2
  %1633 = sext i16 %1632 to i32
  %1634 = icmp ne i32 %1616, 0
  %1635 = and i1 %1634, %1627
  br i1 %1635, label %1636, label %1643

1636:                                             ; preds = %1623
  %1637 = add nsw i32 %1617, 1
  %1638 = add nsw i32 %1637, %1630
  %1639 = ashr i32 %1638, 1
  %1640 = add nsw i32 %1618, 1
  %1641 = add nsw i32 %1640, %1633
  %1642 = ashr i32 %1641, 1
  br label %1648

1643:                                             ; preds = %1623
  %1644 = or i1 %1634, %1627
  %1645 = select i1 %1634, i32 %1617, i32 %1630
  %1646 = select i1 %1634, i32 %1618, i32 %1633
  br i1 %1644, label %1648, label %1647

1647:                                             ; preds = %1643, %1621
  br label %1648

1648:                                             ; preds = %1647, %1643, %1636, %1621
  %1649 = phi i32 [ %1639, %1636 ], [ %1645, %1643 ], [ %1617, %1621 ], [ 0, %1647 ]
  %1650 = phi i32 [ %1642, %1636 ], [ %1646, %1643 ], [ %1618, %1621 ], [ 0, %1647 ]
  %1651 = sub nsw i32 80, %1581
  %1652 = add nsw i32 %1651, %1649
  %1653 = icmp ugt i32 %1652, 160
  %1654 = sub nsw i32 80, %1584
  %1655 = add nsw i32 %1654, %1650
  %1656 = icmp ugt i32 %1655, 160
  %1657 = or i1 %1653, %1656
  br i1 %1657, label %1658, label %1678

1658:                                             ; preds = %1648
  br i1 %594, label %1659, label %1661

1659:                                             ; preds = %1658
  %1660 = shl i64 %1574, 1
  store i64 %1660, i64* %208, align 8
  br label %1678

1661:                                             ; preds = %1658
  %1662 = mul nsw i64 %1574, 5
  %1663 = ashr i64 %1662, 2
  store i64 %1663, i64* %208, align 8
  br label %1678

1664:                                             ; preds = %1577
  %1665 = load i32, i32* %812, align 4
  %1666 = icmp sgt i32 %1665, 7
  %1667 = icmp ult i32 %1585, 150
  %1668 = and i1 %1667, %1666
  br i1 %1668, label %1669, label %1678

1669:                                             ; preds = %1664
  %1670 = add nsw i32 %1581, 64
  %1671 = icmp ugt i32 %1670, 128
  %1672 = add nsw i32 %1584, 64
  %1673 = icmp ugt i32 %1672, 128
  %1674 = or i1 %1671, %1673
  br i1 %1674, label %1675, label %1678

1675:                                             ; preds = %1669
  %1676 = mul nsw i64 %1574, 5
  %1677 = ashr i64 %1676, 2
  store i64 %1677, i64* %208, align 8
  br label %1678

1678:                                             ; preds = %1675, %1669, %1664, %1661, %1659, %1648, %1598, %1560
  %1679 = phi i64 [ %1677, %1675 ], [ %1574, %1669 ], [ %1574, %1664 ], [ %1663, %1661 ], [ %1660, %1659 ], [ %1574, %1648 ], [ %1599, %1598 ], [ %1574, %1560 ]
  %1680 = load i32, i32* %223, align 4
  %1681 = icmp sgt i32 %1680, 0
  br i1 %1681, label %1682, label %1693

1682:                                             ; preds = %1678
  %1683 = load i32, i32* %813, align 4
  %1684 = icmp eq i32 %1683, 0
  br i1 %1684, label %1693, label %1685

1685:                                             ; preds = %1682
  call void @av1_denoiser_update_frame_stats(%struct.MB_MODE_INFO* %43, i64 %1372, i8 zeroext %836, %struct.PICK_MODE_CONTEXT* %5) #4
  br i1 %917, label %1688, label %1686

1686:                                             ; preds = %1685
  %1687 = load i64, i64* %208, align 8
  br label %1693

1688:                                             ; preds = %1685
  %1689 = load i32, i32* %915, align 4
  %1690 = icmp eq i32 %1689, 0
  %1691 = load i64, i64* %208, align 8
  %1692 = select i1 %1690, i64 %1691, i64 %817
  br label %1693

1693:                                             ; preds = %1686, %1688, %1682, %1678
  %1694 = phi i64 [ %1687, %1686 ], [ %1679, %1682 ], [ %1679, %1678 ], [ %1691, %1688 ]
  %1695 = phi i64 [ %817, %1686 ], [ %817, %1682 ], [ %817, %1678 ], [ %1692, %1688 ]
  %1696 = getelementptr inbounds [25 x [8 x i8]], [25 x [8 x i8]]* %26, i64 0, i64 %913, i64 %839
  store i8 1, i8* %1696, align 1
  %1697 = icmp slt i64 %1694, %825
  br i1 %1697, label %1698, label %1717

1698:                                             ; preds = %1693
  %1699 = load i32, i32* %206, align 8
  %1700 = load i32, i32* %801, align 4
  %1701 = load i64, i64* %207, align 8
  %1702 = load i64, i64* %210, align 8
  %1703 = load i32, i32* %211, align 8
  %1704 = load i32, i32* %212, align 4
  %1705 = load i32, i32* %694, align 4
  %1706 = load i8, i8* %706, align 1
  %1707 = trunc i32 %1703 to i8
  %1708 = icmp eq i32 %1469, 2147483647
  %1709 = icmp ne i32 %1703, 0
  %1710 = and i1 %1708, %1709
  %1711 = zext i1 %1710 to i8
  br i1 %89, label %1712, label %1723

1712:                                             ; preds = %1698
  %1713 = icmp eq i64 %829, 0
  br i1 %1713, label %1723, label %1714

1714:                                             ; preds = %1712
  %1715 = inttoptr i64 %829 to %struct.PRED_BUFFER*
  %1716 = getelementptr inbounds %struct.PRED_BUFFER, %struct.PRED_BUFFER* %1715, i64 0, i32 2
  store i32 0, i32* %1716, align 4
  br label %1723

1717:                                             ; preds = %1693
  %1718 = icmp eq i64 %1336, 0
  %1719 = or i1 %1718, %814
  br i1 %1719, label %1723, label %1720

1720:                                             ; preds = %1717
  %1721 = inttoptr i64 %1336 to %struct.PRED_BUFFER*
  %1722 = getelementptr inbounds %struct.PRED_BUFFER, %struct.PRED_BUFFER* %1721, i64 0, i32 2
  store i32 0, i32* %1722, align 4
  br label %1723

1723:                                             ; preds = %1717, %1720, %1714, %1712, %1698
  %1724 = phi i8 [ %1711, %1698 ], [ %834, %1717 ], [ %1711, %1712 ], [ %1711, %1714 ], [ %834, %1720 ]
  %1725 = phi i8 [ %1707, %1698 ], [ %833, %1717 ], [ %1707, %1712 ], [ %1707, %1714 ], [ %833, %1720 ]
  %1726 = phi i8 [ %838, %1698 ], [ %832, %1717 ], [ %838, %1712 ], [ %838, %1714 ], [ %832, %1720 ]
  %1727 = phi i8 [ %1706, %1698 ], [ %831, %1717 ], [ %1706, %1712 ], [ %1706, %1714 ], [ %831, %1720 ]
  %1728 = phi i8 [ %836, %1698 ], [ %830, %1717 ], [ %836, %1712 ], [ %836, %1714 ], [ %830, %1720 ]
  %1729 = phi i64 [ %829, %1698 ], [ %829, %1717 ], [ %1336, %1712 ], [ %1336, %1714 ], [ %829, %1720 ]
  %1730 = phi i32 [ %1699, %1698 ], [ %828, %1717 ], [ %1699, %1712 ], [ %1699, %1714 ], [ %828, %1720 ]
  %1731 = phi i32 [ %1700, %1698 ], [ %827, %1717 ], [ %1700, %1712 ], [ %1700, %1714 ], [ %827, %1720 ]
  %1732 = phi i64 [ %1701, %1698 ], [ %826, %1717 ], [ %1701, %1712 ], [ %1701, %1714 ], [ %826, %1720 ]
  %1733 = phi i64 [ %1694, %1698 ], [ %825, %1717 ], [ %1694, %1712 ], [ %1694, %1714 ], [ %825, %1720 ]
  %1734 = phi i64 [ %1702, %1698 ], [ %824, %1717 ], [ %1702, %1712 ], [ %1702, %1714 ], [ %824, %1720 ]
  %1735 = phi i32 [ %1703, %1698 ], [ %823, %1717 ], [ %1703, %1712 ], [ %1703, %1714 ], [ %823, %1720 ]
  %1736 = phi i32 [ %1704, %1698 ], [ %822, %1717 ], [ %1704, %1712 ], [ %1704, %1714 ], [ %822, %1720 ]
  %1737 = phi i32 [ %1705, %1698 ], [ %820, %1717 ], [ %1705, %1712 ], [ %1705, %1714 ], [ %820, %1720 ]
  %1738 = phi i32 [ %1373, %1698 ], [ %818, %1717 ], [ %1373, %1712 ], [ %1373, %1714 ], [ %818, %1720 ]
  %1739 = icmp eq i32 %1738, 0
  br i1 %1739, label %1746, label %1740

1740:                                             ; preds = %1723
  %1741 = icmp eq i64 %816, 0
  br i1 %1741, label %1742, label %1745

1742:                                             ; preds = %1740
  %1743 = load i32, i32* %716, align 4
  %1744 = icmp eq i32 %1743, 0
  br i1 %1744, label %1746, label %1745

1745:                                             ; preds = %1740, %1742
  store i32 1, i32* %205, align 8
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %708) #4
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %707) #4
  br label %1767

1746:                                             ; preds = %1166, %2644, %2656, %2668, %899, %921, %1154, %1050, %912, %908, %905, %888, %815, %870, %866, %883, %935, %966, %1742, %1723
  %1747 = phi i8 [ %834, %866 ], [ %834, %870 ], [ %834, %883 ], [ %834, %921 ], [ %834, %966 ], [ %1724, %1742 ], [ %1724, %1723 ], [ %834, %935 ], [ %834, %815 ], [ %834, %888 ], [ %834, %905 ], [ %834, %908 ], [ %834, %912 ], [ %834, %1050 ], [ %834, %1154 ], [ %834, %899 ], [ %834, %2668 ], [ %834, %2656 ], [ %834, %2644 ], [ %834, %1166 ]
  %1748 = phi i8 [ %833, %866 ], [ %833, %870 ], [ %833, %883 ], [ %833, %921 ], [ %833, %966 ], [ %1725, %1742 ], [ %1725, %1723 ], [ %833, %935 ], [ %833, %815 ], [ %833, %888 ], [ %833, %905 ], [ %833, %908 ], [ %833, %912 ], [ %833, %1050 ], [ %833, %1154 ], [ %833, %899 ], [ %833, %2668 ], [ %833, %2656 ], [ %833, %2644 ], [ %833, %1166 ]
  %1749 = phi i8 [ %832, %866 ], [ %832, %870 ], [ %832, %883 ], [ %832, %921 ], [ %832, %966 ], [ %1726, %1742 ], [ %1726, %1723 ], [ %832, %935 ], [ %832, %815 ], [ %832, %888 ], [ %832, %905 ], [ %832, %908 ], [ %832, %912 ], [ %832, %1050 ], [ %832, %1154 ], [ %832, %899 ], [ %832, %2668 ], [ %832, %2656 ], [ %832, %2644 ], [ %832, %1166 ]
  %1750 = phi i8 [ %831, %866 ], [ %831, %870 ], [ %831, %883 ], [ %831, %921 ], [ %831, %966 ], [ %1727, %1742 ], [ %1727, %1723 ], [ %831, %935 ], [ %831, %815 ], [ %831, %888 ], [ %831, %905 ], [ %831, %908 ], [ %831, %912 ], [ %831, %1050 ], [ %831, %1154 ], [ %831, %899 ], [ %831, %2668 ], [ %831, %2656 ], [ %831, %2644 ], [ %831, %1166 ]
  %1751 = phi i8 [ %830, %866 ], [ %830, %870 ], [ %830, %883 ], [ %830, %921 ], [ %830, %966 ], [ %1728, %1742 ], [ %1728, %1723 ], [ %830, %935 ], [ %830, %815 ], [ %830, %888 ], [ %830, %905 ], [ %830, %908 ], [ %830, %912 ], [ %830, %1050 ], [ %830, %1154 ], [ %830, %899 ], [ %830, %2668 ], [ %830, %2656 ], [ %830, %2644 ], [ %830, %1166 ]
  %1752 = phi i64 [ %829, %866 ], [ %829, %870 ], [ %829, %883 ], [ %829, %921 ], [ %829, %966 ], [ %1729, %1742 ], [ %1729, %1723 ], [ %829, %935 ], [ %829, %815 ], [ %829, %888 ], [ %829, %905 ], [ %829, %908 ], [ %829, %912 ], [ %829, %1050 ], [ %829, %1154 ], [ %829, %899 ], [ %829, %2668 ], [ %829, %2656 ], [ %829, %2644 ], [ %829, %1166 ]
  %1753 = phi i32 [ %828, %866 ], [ %828, %870 ], [ %828, %883 ], [ %828, %921 ], [ %828, %966 ], [ %1730, %1742 ], [ %1730, %1723 ], [ %828, %935 ], [ %828, %815 ], [ %828, %888 ], [ %828, %905 ], [ %828, %908 ], [ %828, %912 ], [ %828, %1050 ], [ %828, %1154 ], [ %828, %899 ], [ %828, %2668 ], [ %828, %2656 ], [ %828, %2644 ], [ %828, %1166 ]
  %1754 = phi i32 [ %827, %866 ], [ %827, %870 ], [ %827, %883 ], [ %827, %921 ], [ %827, %966 ], [ %1731, %1742 ], [ %1731, %1723 ], [ %827, %935 ], [ %827, %815 ], [ %827, %888 ], [ %827, %905 ], [ %827, %908 ], [ %827, %912 ], [ %827, %1050 ], [ %827, %1154 ], [ %827, %899 ], [ %827, %2668 ], [ %827, %2656 ], [ %827, %2644 ], [ %827, %1166 ]
  %1755 = phi i64 [ %826, %866 ], [ %826, %870 ], [ %826, %883 ], [ %826, %921 ], [ %826, %966 ], [ %1732, %1742 ], [ %1732, %1723 ], [ %826, %935 ], [ %826, %815 ], [ %826, %888 ], [ %826, %905 ], [ %826, %908 ], [ %826, %912 ], [ %826, %1050 ], [ %826, %1154 ], [ %826, %899 ], [ %826, %2668 ], [ %826, %2656 ], [ %826, %2644 ], [ %826, %1166 ]
  %1756 = phi i64 [ %825, %866 ], [ %825, %870 ], [ %825, %883 ], [ %825, %921 ], [ %825, %966 ], [ %1733, %1742 ], [ %1733, %1723 ], [ %825, %935 ], [ %825, %815 ], [ %825, %888 ], [ %825, %905 ], [ %825, %908 ], [ %825, %912 ], [ %825, %1050 ], [ %825, %1154 ], [ %825, %899 ], [ %825, %2668 ], [ %825, %2656 ], [ %825, %2644 ], [ %825, %1166 ]
  %1757 = phi i64 [ %824, %866 ], [ %824, %870 ], [ %824, %883 ], [ %824, %921 ], [ %824, %966 ], [ %1734, %1742 ], [ %1734, %1723 ], [ %824, %935 ], [ %824, %815 ], [ %824, %888 ], [ %824, %905 ], [ %824, %908 ], [ %824, %912 ], [ %824, %1050 ], [ %824, %1154 ], [ %824, %899 ], [ %824, %2668 ], [ %824, %2656 ], [ %824, %2644 ], [ %824, %1166 ]
  %1758 = phi i32 [ %823, %866 ], [ %823, %870 ], [ %823, %883 ], [ %823, %921 ], [ %823, %966 ], [ %1735, %1742 ], [ %1735, %1723 ], [ %823, %935 ], [ %823, %815 ], [ %823, %888 ], [ %823, %905 ], [ %823, %908 ], [ %823, %912 ], [ %823, %1050 ], [ %823, %1154 ], [ %823, %899 ], [ %823, %2668 ], [ %823, %2656 ], [ %823, %2644 ], [ %823, %1166 ]
  %1759 = phi i32 [ %822, %866 ], [ %822, %870 ], [ %822, %883 ], [ %822, %921 ], [ %822, %966 ], [ %1736, %1742 ], [ %1736, %1723 ], [ %822, %935 ], [ %822, %815 ], [ %822, %888 ], [ %822, %905 ], [ %822, %908 ], [ %822, %912 ], [ %822, %1050 ], [ %822, %1154 ], [ %822, %899 ], [ %822, %2668 ], [ %822, %2656 ], [ %822, %2644 ], [ %822, %1166 ]
  %1760 = phi i64 [ %821, %866 ], [ %821, %870 ], [ %821, %883 ], [ %821, %921 ], [ %821, %966 ], [ %1336, %1742 ], [ %1336, %1723 ], [ %821, %935 ], [ %821, %815 ], [ %821, %888 ], [ %821, %905 ], [ %821, %908 ], [ %821, %912 ], [ %821, %1050 ], [ %821, %1154 ], [ %821, %899 ], [ %821, %2668 ], [ %821, %2656 ], [ %821, %2644 ], [ %821, %1166 ]
  %1761 = phi i32 [ %820, %866 ], [ %820, %870 ], [ %820, %883 ], [ %820, %921 ], [ %820, %966 ], [ %1737, %1742 ], [ %1737, %1723 ], [ %820, %935 ], [ %820, %815 ], [ %820, %888 ], [ %820, %905 ], [ %820, %908 ], [ %820, %912 ], [ %820, %1050 ], [ %820, %1154 ], [ %820, %899 ], [ %820, %2668 ], [ %820, %2656 ], [ %820, %2644 ], [ %820, %1166 ]
  %1762 = phi i32 [ %819, %866 ], [ %819, %870 ], [ %819, %883 ], [ %819, %921 ], [ %819, %966 ], [ %1350, %1742 ], [ %1350, %1723 ], [ %819, %935 ], [ %819, %815 ], [ %819, %888 ], [ %819, %905 ], [ %819, %908 ], [ %819, %912 ], [ %819, %1050 ], [ %819, %1154 ], [ %819, %899 ], [ %819, %2668 ], [ %819, %2656 ], [ %819, %2644 ], [ %819, %1166 ]
  %1763 = phi i32 [ %818, %866 ], [ %818, %870 ], [ %818, %883 ], [ %818, %921 ], [ %818, %966 ], [ %1738, %1742 ], [ 0, %1723 ], [ %818, %935 ], [ %818, %815 ], [ %818, %888 ], [ %818, %905 ], [ %818, %908 ], [ %818, %912 ], [ %818, %1050 ], [ %818, %1154 ], [ %818, %899 ], [ %818, %2668 ], [ %818, %2656 ], [ %818, %2644 ], [ %818, %1166 ]
  %1764 = phi i64 [ %817, %866 ], [ %817, %870 ], [ %817, %883 ], [ %817, %921 ], [ %817, %966 ], [ %1695, %1742 ], [ %1695, %1723 ], [ %817, %935 ], [ %817, %815 ], [ %817, %888 ], [ %817, %905 ], [ %817, %908 ], [ %817, %912 ], [ %817, %1050 ], [ %817, %1154 ], [ %817, %899 ], [ %817, %2668 ], [ %817, %2656 ], [ %817, %2644 ], [ %817, %1166 ]
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %708) #4
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %707) #4
  %1765 = add nuw nsw i64 %816, 1
  %1766 = icmp eq i64 %1765, %75
  br i1 %1766, label %1767, label %815

1767:                                             ; preds = %1746, %1745
  %1768 = phi i8 [ %1724, %1745 ], [ %1747, %1746 ]
  %1769 = phi i8 [ %1725, %1745 ], [ %1748, %1746 ]
  %1770 = phi i8 [ %1726, %1745 ], [ %1749, %1746 ]
  %1771 = phi i8 [ %1727, %1745 ], [ %1750, %1746 ]
  %1772 = phi i8 [ %1728, %1745 ], [ %1751, %1746 ]
  %1773 = phi i64 [ %1729, %1745 ], [ %1752, %1746 ]
  %1774 = phi i32 [ %1730, %1745 ], [ %1753, %1746 ]
  %1775 = phi i32 [ %1731, %1745 ], [ %1754, %1746 ]
  %1776 = phi i64 [ %1732, %1745 ], [ %1755, %1746 ]
  %1777 = phi i64 [ %1733, %1745 ], [ %1756, %1746 ]
  %1778 = phi i64 [ %1734, %1745 ], [ %1757, %1746 ]
  %1779 = phi i32 [ %1735, %1745 ], [ %1758, %1746 ]
  %1780 = phi i32 [ %1736, %1745 ], [ %1759, %1746 ]
  %1781 = phi i32 [ %1737, %1745 ], [ %1761, %1746 ]
  %1782 = phi i32 [ %1738, %1745 ], [ %1763, %1746 ]
  %1783 = phi i64 [ %1695, %1745 ], [ %1764, %1746 ]
  store i8 %1772, i8* %678, align 2
  store i32 %1781, i32* %694, align 4
  call void @llvm.memset.p0i8.i64(i8* align 1 %706, i8 %1771, i64 17, i1 false)
  store i8 %1770, i8* %221, align 8
  %1784 = zext i8 %1772 to i64
  %1785 = sext i8 %1770 to i64
  %1786 = getelementptr inbounds [25 x [8 x %union.int_mv]], [25 x [8 x %union.int_mv]]* %25, i64 0, i64 %1784, i64 %1785, i32 0
  %1787 = load i32, i32* %1786, align 4
  store i32 %1787, i32* %684, align 8
  %1788 = getelementptr inbounds %struct.MB_MODE_INFO, %struct.MB_MODE_INFO* %43, i64 0, i32 18, i64 0
  store i8 0, i8* %1788, align 8
  %1789 = getelementptr inbounds %struct.MB_MODE_INFO, %struct.MB_MODE_INFO* %43, i64 0, i32 18, i64 1
  store i8 0, i8* %1789, align 1
  store i8 0, i8* %682, align 1
  %1790 = load i32, i32* %56, align 16
  %1791 = load %struct.MB_MODE_INFO**, %struct.MB_MODE_INFO*** %41, align 8
  %1792 = load %struct.MB_MODE_INFO*, %struct.MB_MODE_INFO** %1791, align 8
  %1793 = getelementptr inbounds %struct.MB_MODE_INFO, %struct.MB_MODE_INFO* %1792, i64 0, i32 28
  %1794 = load i16, i16* %1793, align 1
  %1795 = and i16 %1794, 7
  %1796 = zext i16 %1795 to i64
  %1797 = bitcast %struct.RD_STATS* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %1797) #4
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %1797, i8 -86, i64 40, i1 false) #4
  %1798 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 22, i32 0
  %1799 = load i32, i32* %1798, align 8
  %1800 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 22, i32 1
  %1801 = load i32, i32* %1800, align 4
  %1802 = load %struct.SequenceHeader*, %struct.SequenceHeader** %289, align 16
  %1803 = getelementptr inbounds %struct.SequenceHeader, %struct.SequenceHeader* %1802, i64 0, i32 25
  %1804 = load i32, i32* %1803, align 8
  %1805 = call i32 @av1_get_intra_cost_penalty(i32 %1799, i32 %1801, i32 %1804) #4
  %1806 = sext i32 %1805 to i64
  %1807 = load i32, i32* %761, align 8
  %1808 = sext i32 %1807 to i64
  %1809 = mul nsw i64 %1808, %1806
  %1810 = add nsw i64 %1809, 256
  %1811 = ashr i64 %1810, 9
  %1812 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 40, i32 13, i32 0
  %1813 = load i32, i32* %1812, align 8
  %1814 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 75, i32 0
  %1815 = load i32, i32* %1814, align 16
  %1816 = icmp slt i32 %1815, 1
  %1817 = icmp eq i8 %1770, 4
  %1818 = or i1 %1817, %1816
  br i1 %1818, label %1829, label %1819

1819:                                             ; preds = %1767
  %1820 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 75, i32 1
  %1821 = load i32, i32* %1820, align 4
  %1822 = icmp sgt i32 %1821, 0
  br i1 %1822, label %1823, label %1829

1823:                                             ; preds = %1819
  %1824 = sext i32 %1821 to i64
  %1825 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 75, i32 21, i64 %1824, i32 21
  %1826 = load i32, i32* %1825, align 8
  %1827 = icmp eq i32 %1826, 0
  %1828 = select i1 %1827, i32 0, i32 %1813
  br label %1829

1829:                                             ; preds = %1767, %1823, %1819
  %1830 = phi i32 [ %1813, %1819 ], [ %1813, %1767 ], [ %1828, %1823 ]
  %1831 = load %struct.AV1_PRIMARY*, %struct.AV1_PRIMARY** %258, align 16
  %1832 = getelementptr inbounds %struct.AV1_PRIMARY, %struct.AV1_PRIMARY* %1831, i64 0, i32 16
  %1833 = load i32, i32* %1832, align 8
  %1834 = icmp eq i32 %1833, 0
  br i1 %1834, label %1835, label %1842

1835:                                             ; preds = %1829
  %1836 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 40, i32 13, i32 8
  %1837 = load i32, i32* %1836, align 8
  %1838 = icmp eq i32 %1837, 0
  br i1 %1838, label %1839, label %1843

1839:                                             ; preds = %1835
  %1840 = load i32, i32* %502, align 8
  %1841 = icmp sgt i32 %1840, 0
  br i1 %1841, label %1842, label %1843

1842:                                             ; preds = %1839, %1829
  br label %1843

1843:                                             ; preds = %1842, %1839, %1835
  %1844 = phi i32 [ 150, %1842 ], [ 50, %1839 ], [ 50, %1835 ]
  %1845 = phi i32 [ 0, %1842 ], [ 32, %1839 ], [ 32, %1835 ]
  %1846 = load i32, i32* %810, align 4
  %1847 = icmp ult i32 %1846, %1844
  br i1 %1847, label %1848, label %1879

1848:                                             ; preds = %1843
  %1849 = icmp eq i8 %1770, 1
  br i1 %1849, label %1850, label %1868

1850:                                             ; preds = %1848
  %1851 = getelementptr inbounds %struct.MB_MODE_INFO, %struct.MB_MODE_INFO* %1792, i64 0, i32 5, i64 0
  %1852 = bitcast %union.int_mv* %1851 to i16*
  %1853 = load i16, i16* %1852, align 8
  %1854 = sext i16 %1853 to i32
  %1855 = icmp slt i32 %1854, 0
  %1856 = sub nsw i32 0, %1854
  %1857 = select i1 %1855, i32 %1856, i32 %1854
  %1858 = icmp slt i32 %1857, %1845
  br i1 %1858, label %1859, label %1868

1859:                                             ; preds = %1850
  %1860 = bitcast %union.int_mv* %1851 to %struct.mv*
  %1861 = getelementptr inbounds %struct.mv, %struct.mv* %1860, i64 0, i32 1
  %1862 = load i16, i16* %1861, align 2
  %1863 = sext i16 %1862 to i32
  %1864 = icmp slt i32 %1863, 0
  %1865 = sub nsw i32 0, %1863
  %1866 = select i1 %1864, i32 %1865, i32 %1863
  %1867 = icmp slt i32 %1866, %1845
  br i1 %1867, label %1874, label %1868

1868:                                             ; preds = %1859, %1850, %1848
  %1869 = ashr i32 %1805, 2
  %1870 = sext i32 %1869 to i64
  %1871 = mul nsw i64 %1870, %1808
  %1872 = add nsw i64 %1871, 256
  %1873 = ashr i64 %1872, 9
  br label %1874

1874:                                             ; preds = %1868, %1859
  %1875 = phi i32 [ %1869, %1868 ], [ %1805, %1859 ]
  %1876 = phi i64 [ %1873, %1868 ], [ %1811, %1859 ]
  %1877 = phi i32 [ 0, %1868 ], [ 1, %1859 ]
  %1878 = select i1 %594, i32 0, i32 %1782
  br label %1887

1879:                                             ; preds = %1843
  %1880 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 40, i32 13, i32 20
  %1881 = load i32, i32* %1880, align 8
  %1882 = icmp eq i32 %1881, 0
  br i1 %1882, label %1887, label %1883

1883:                                             ; preds = %1879
  %1884 = load i32, i32* %811, align 8
  %1885 = icmp eq i32 %1884, 1
  %1886 = select i1 %1885, i32 0, i32 %1830
  br label %1887

1887:                                             ; preds = %1883, %1879, %1874
  %1888 = phi i32 [ %1782, %1879 ], [ %1878, %1874 ], [ %1782, %1883 ]
  %1889 = phi i32 [ %1805, %1879 ], [ %1875, %1874 ], [ %1805, %1883 ]
  %1890 = phi i64 [ %1811, %1879 ], [ %1876, %1874 ], [ %1811, %1883 ]
  %1891 = phi i32 [ %1830, %1879 ], [ %1830, %1874 ], [ %1886, %1883 ]
  %1892 = phi i32 [ 1, %1879 ], [ %1877, %1874 ], [ 1, %1883 ]
  %1893 = icmp eq i64 %1777, 9223372036854775807
  br i1 %1893, label %1912, label %1894

1894:                                             ; preds = %1887
  %1895 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 40, i32 13, i32 1
  %1896 = load i32, i32* %1895, align 4
  %1897 = icmp eq i32 %1896, 0
  %1898 = icmp eq i32 %1779, 0
  %1899 = or i1 %1898, %1897
  %1900 = icmp eq i8 %1768, 0
  %1901 = or i1 %1900, %1899
  %1902 = icmp ne i32 %1891, 0
  %1903 = and i1 %1902, %1901
  %1904 = icmp eq i32 %1888, 0
  %1905 = and i1 %1904, %1903
  %1906 = icmp sgt i64 %1777, %1890
  %1907 = and i1 %1906, %1905
  br i1 %1907, label %1908, label %2183

1908:                                             ; preds = %1894
  %1909 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 40, i32 4, i32 21
  %1910 = load i8, i8* %1909, align 8
  %1911 = icmp ult i8 %1910, %4
  br i1 %1911, label %2183, label %1912

1912:                                             ; preds = %1908, %1887
  %1913 = bitcast %struct.estimate_block_intra_args* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %1913) #4
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %1913, i8 -86, i64 32, i1 false) #4
  %1914 = getelementptr inbounds %struct.estimate_block_intra_args, %struct.estimate_block_intra_args* %8, i64 0, i32 0
  store %struct.AV1_COMP* %0, %struct.AV1_COMP** %1914, align 8
  %1915 = getelementptr inbounds %struct.estimate_block_intra_args, %struct.estimate_block_intra_args* %8, i64 0, i32 1
  store %struct.macroblock* %2, %struct.macroblock** %1915, align 8
  %1916 = getelementptr inbounds %struct.estimate_block_intra_args, %struct.estimate_block_intra_args* %8, i64 0, i32 2
  store i8 0, i8* %1916, align 8
  %1917 = getelementptr inbounds %struct.estimate_block_intra_args, %struct.estimate_block_intra_args* %8, i64 0, i32 3
  store i32 1, i32* %1917, align 4
  %1918 = getelementptr inbounds %struct.estimate_block_intra_args, %struct.estimate_block_intra_args* %8, i64 0, i32 4
  store %struct.RD_STATS* null, %struct.RD_STATS** %1918, align 8
  %1919 = load i8, i8* %697, align 4
  %1920 = zext i8 %1919 to i64
  %1921 = getelementptr inbounds [3 x i8], [3 x i8]* @tx_mode_to_biggest_tx_size, i64 0, i64 %1920
  %1922 = load i8, i8* %1921, align 1
  %1923 = icmp ult i8 %696, %1922
  %1924 = select i1 %1923, i8 %696, i8 %1922
  %1925 = icmp ult i8 %1924, 2
  %1926 = select i1 %1925, i8 %1924, i8 2
  %1927 = inttoptr i64 %1773 to %struct.PRED_BUFFER*
  %1928 = icmp ne i64 %1773, 0
  %1929 = and i1 %89, %1928
  br i1 %1929, label %1930, label %1961

1930:                                             ; preds = %1912
  %1931 = getelementptr inbounds %struct.PRED_BUFFER, %struct.PRED_BUFFER* %1927, i64 0, i32 0
  %1932 = load i8*, i8** %1931, align 8
  %1933 = icmp eq i8* %1932, %100
  br i1 %1933, label %1934, label %1961

1934:                                             ; preds = %1930
  %1935 = load i32, i32* %777, align 4
  %1936 = icmp eq i32 %1935, 0
  br i1 %1936, label %1940, label %1937

1937:                                             ; preds = %1934
  %1938 = load i32, i32* %778, align 4
  %1939 = icmp eq i32 %1938, 0
  br i1 %1939, label %1940, label %1944

1940:                                             ; preds = %1944, %1937, %1934
  %1941 = phi i64 [ 0, %1934 ], [ 1, %1937 ], [ 2, %1944 ]
  %1942 = phi i32* [ %777, %1934 ], [ %778, %1937 ], [ %779, %1944 ]
  store i32 1, i32* %1942, align 4
  %1943 = load i8*, i8** %1931, align 8
  br label %1947

1944:                                             ; preds = %1937
  %1945 = load i32, i32* %779, align 4
  %1946 = icmp eq i32 %1945, 0
  br i1 %1946, label %1940, label %1947

1947:                                             ; preds = %1944, %1940
  %1948 = phi i8* [ %1943, %1940 ], [ %100, %1944 ]
  %1949 = phi i64 [ %1941, %1940 ], [ -1, %1944 ]
  %1950 = getelementptr inbounds [4 x %struct.PRED_BUFFER], [4 x %struct.PRED_BUFFER]* %31, i64 0, i64 %1949
  %1951 = ptrtoint %struct.PRED_BUFFER* %1950 to i64
  %1952 = load void (i8*, i64, i8*, i64, i32, i32)*, void (i8*, i64, i8*, i64, i32, i32)** @aom_convolve_copy, align 8
  %1953 = getelementptr inbounds %struct.PRED_BUFFER, %struct.PRED_BUFFER* %1927, i64 0, i32 1
  %1954 = load i32, i32* %1953, align 8
  %1955 = sext i32 %1954 to i64
  %1956 = getelementptr inbounds %struct.PRED_BUFFER, %struct.PRED_BUFFER* %1950, i64 0, i32 0
  %1957 = load i8*, i8** %1956, align 16
  %1958 = getelementptr inbounds [4 x %struct.PRED_BUFFER], [4 x %struct.PRED_BUFFER]* %31, i64 0, i64 %1949, i32 1
  %1959 = load i32, i32* %1958, align 8
  %1960 = sext i32 %1959 to i64
  call void %1952(i8* %1948, i64 %1955, i8* %1957, i64 %1960, i32 %95, i32 %92) #4
  br label %1961

1961:                                             ; preds = %1947, %1930, %1912
  %1962 = phi i64 [ %1951, %1947 ], [ %1773, %1930 ], [ %1773, %1912 ]
  store i8* %100, i8** %99, align 8
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %102, i8* nonnull align 8 %97, i64 24, i1 false)
  %1963 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 40, i32 13, i32 27, i64 %52
  %1964 = icmp ne i32 %1892, 0
  %1965 = getelementptr inbounds %struct.MB_MODE_INFO, %struct.MB_MODE_INFO* %1792, i64 0, i32 2
  %1966 = getelementptr inbounds %struct.MB_MODE_INFO, %struct.MB_MODE_INFO* %1792, i64 0, i32 6, i64 0
  %1967 = getelementptr inbounds %struct.MB_MODE_INFO, %struct.MB_MODE_INFO* %1792, i64 0, i32 6, i64 1
  %1968 = getelementptr inbounds %struct.RD_STATS, %struct.RD_STATS* %7, i64 0, i32 0
  %1969 = getelementptr inbounds %struct.RD_STATS, %struct.RD_STATS* %7, i64 0, i32 1
  %1970 = getelementptr inbounds %struct.RD_STATS, %struct.RD_STATS* %7, i64 0, i32 2
  %1971 = getelementptr inbounds %struct.RD_STATS, %struct.RD_STATS* %7, i64 0, i32 3
  %1972 = getelementptr inbounds %struct.RD_STATS, %struct.RD_STATS* %7, i64 0, i32 4
  %1973 = getelementptr inbounds %struct.RD_STATS, %struct.RD_STATS* %7, i64 0, i32 5
  %1974 = getelementptr inbounds %struct.MB_MODE_INFO, %struct.MB_MODE_INFO* %1792, i64 0, i32 24
  %1975 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %2, i64 0, i32 0, i64 0, i32 6, i32 0
  %1976 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %2, i64 0, i32 0, i64 0, i32 6, i32 4
  %1977 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %2, i64 0, i32 2, i32 4, i64 0, i32 1
  %1978 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %2, i64 0, i32 2, i32 4, i64 0, i32 2
  %1979 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %2, i64 0, i32 2, i32 18
  %1980 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %2, i64 0, i32 2, i32 20
  %1981 = zext i8 %696 to i32
  %1982 = shl i32 1, %1981
  %1983 = sext i32 %1982 to i64
  %1984 = icmp ult i8 %4, 3
  %1985 = getelementptr inbounds %struct.MB_MODE_INFO, %struct.MB_MODE_INFO* %1792, i64 0, i32 18, i64 0
  %1986 = icmp eq i8 %4, -1
  %1987 = lshr i64 984063, %52
  %1988 = and i64 %1987, 1
  %1989 = icmp eq i64 %1988, 0
  %1990 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %2, i64 0, i32 20, i32 4, i64 %52, i64 0
  %1991 = add i32 %1889, %1790
  %1992 = getelementptr inbounds %struct.MB_MODE_INFO, %struct.MB_MODE_INFO* %1792, i64 0, i32 3
  %1993 = getelementptr inbounds %struct.MB_MODE_INFO, %struct.MB_MODE_INFO* %1792, i64 0, i32 5, i64 0, i32 0
  %1994 = getelementptr inbounds %struct.MB_MODE_INFO, %struct.MB_MODE_INFO* %1792, i64 0, i32 5, i64 1, i32 0
  %1995 = getelementptr inbounds i8, i8* %1797, i64 4
  %1996 = bitcast i8* %1995 to i32*
  %1997 = bitcast i64* %1969 to <2 x i64>*
  br label %1999

1998:                                             ; preds = %2170
  store i8 %2172, i8* %1974, align 1
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %1913) #4
  br label %2183

1999:                                             ; preds = %2170, %1961
  %2000 = phi i8 [ %1770, %1961 ], [ %2171, %2170 ]
  %2001 = phi i8 [ %1771, %1961 ], [ %2172, %2170 ]
  %2002 = phi i8 [ %1772, %1961 ], [ %2173, %2170 ]
  %2003 = phi i32 [ %1774, %1961 ], [ %2174, %2170 ]
  %2004 = phi i32 [ %1775, %1961 ], [ %2175, %2170 ]
  %2005 = phi i64 [ %1776, %1961 ], [ %2176, %2170 ]
  %2006 = phi i64 [ %1777, %1961 ], [ %2177, %2170 ]
  %2007 = phi i64 [ %1778, %1961 ], [ %2178, %2170 ]
  %2008 = phi i32 [ %1779, %1961 ], [ %2179, %2170 ]
  %2009 = phi i32 [ %1780, %1961 ], [ %2180, %2170 ]
  %2010 = phi i64 [ 0, %1961 ], [ %2181, %2170 ]
  %2011 = getelementptr inbounds [4 x i8], [4 x i8]* @intra_mode_list, i64 0, i64 %2010
  %2012 = load i8, i8* %2011, align 1
  %2013 = sext i8 %2012 to i64
  %2014 = getelementptr inbounds [10 x i64], [10 x i64]* @switch.table.av1_nonrd_pick_inter_mode_sb.1, i64 0, i64 %2013
  %2015 = load i64, i64* %2014, align 8
  %2016 = getelementptr inbounds [8 x [4 x i8]], [8 x [4 x i8]]* @mode_idx, i64 0, i64 0, i64 %2015
  %2017 = load i8, i8* %2016, align 1
  %2018 = zext i8 %2017 to i64
  %2019 = zext i8 %2012 to i32
  %2020 = shl i32 1, %2019
  %2021 = load i32, i32* %1963, align 4
  %2022 = and i32 %2021, %2020
  %2023 = icmp eq i32 %2022, 0
  br i1 %2023, label %2170, label %2024

2024:                                             ; preds = %1999
  %2025 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 31, i32 1, i64 %1796, i64 %52, i64 %2018
  %2026 = load i32, i32* %2025, align 4
  %2027 = sext i32 %2026 to i64
  %2028 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %2, i64 0, i32 41, i64 %52, i64 %2018
  %2029 = load i32, i32* %2028, align 4
  %2030 = sext i32 %2029 to i64
  %2031 = mul nsw i64 %2030, %2027
  %2032 = ashr i64 %2031, 5
  %2033 = icmp sgt i64 %2032, %2006
  %2034 = icmp eq i32 %2026, 2147483647
  %2035 = or i1 %2034, %2033
  %2036 = icmp eq i64 %2010, 3
  %2037 = or i1 %1964, %2036
  %2038 = and i1 %2037, %2035
  br i1 %2038, label %2170, label %2039

2039:                                             ; preds = %2024
  %2040 = load i32, i32* %805, align 4
  %2041 = load i32, i32* %806, align 8
  %2042 = sext i32 %2040 to i64
  %2043 = sext i32 %2041 to i64
  %2044 = getelementptr inbounds [22 x [2 x [2 x i8]]], [22 x [2 x [2 x i8]]]* @ss_size_lookup, i64 0, i64 %52, i64 %2042, i64 %2043
  %2045 = load i8, i8* %2044, align 1
  store i8 %2012, i8* %1965, align 2
  store i8 0, i8* %1966, align 8
  store i8 -1, i8* %1967, align 1
  store i32 2147483647, i32* %1968, align 8
  store <2 x i64> <i64 9223372036854775807, i64 9223372036854775807>, <2 x i64>* %1997, align 8
  store i64 9223372036854775807, i64* %1971, align 8
  store i32 0, i32* %1972, align 8
  store i32 0, i32* %1973, align 4
  store i8 %2012, i8* %1916, align 8
  store i32 1, i32* %1917, align 4
  store %struct.RD_STATS* %7, %struct.RD_STATS** %1918, align 8
  store i8 %1926, i8* %1974, align 1
  %2046 = load %struct.SequenceHeader*, %struct.SequenceHeader** %289, align 16
  %2047 = load i8*, i8** %1975, align 8
  %2048 = load i8*, i8** %99, align 8
  %2049 = load i32, i32* %1976, align 8
  %2050 = load i32, i32* %781, align 8
  %2051 = load i32, i32* %1977, align 4
  %2052 = load i32, i32* %1978, align 8
  %2053 = sext i32 %2051 to i64
  %2054 = sext i32 %2052 to i64
  %2055 = getelementptr inbounds [22 x [2 x [2 x i8]]], [22 x [2 x [2 x i8]]]* @ss_size_lookup, i64 0, i64 %52, i64 %2053, i64 %2054
  %2056 = load i8, i8* %2055, align 1
  %2057 = zext i8 %2056 to i64
  %2058 = getelementptr inbounds [22 x i8], [22 x i8]* @block_size_wide, i64 0, i64 %2057
  %2059 = load i8, i8* %2058, align 1
  %2060 = zext i8 %2059 to i32
  %2061 = load i32, i32* %1979, align 8
  %2062 = icmp slt i32 %2061, 0
  br i1 %2062, label %2063, label %2067

2063:                                             ; preds = %2039
  %2064 = add nsw i32 %2051, 3
  %2065 = ashr i32 %2061, %2064
  %2066 = add nsw i32 %2065, %2060
  br label %2067

2067:                                             ; preds = %2063, %2039
  %2068 = phi i32 [ %2066, %2063 ], [ %2060, %2039 ]
  %2069 = ashr i32 %2068, 2
  %2070 = getelementptr inbounds [22 x i8], [22 x i8]* @block_size_high, i64 0, i64 %2057
  %2071 = load i8, i8* %2070, align 1
  %2072 = zext i8 %2071 to i32
  %2073 = load i32, i32* %1980, align 16
  %2074 = icmp slt i32 %2073, 0
  br i1 %2074, label %2075, label %2079

2075:                                             ; preds = %2067
  %2076 = add nsw i32 %2052, 3
  %2077 = ashr i32 %2073, %2076
  %2078 = add nsw i32 %2077, %2072
  br label %2079

2079:                                             ; preds = %2075, %2067
  %2080 = phi i32 [ %2078, %2075 ], [ %2072, %2067 ]
  %2081 = icmp sgt i32 %2080, 3
  br i1 %2081, label %2082, label %2112

2082:                                             ; preds = %2079
  %2083 = lshr i32 %2080, 2
  %2084 = icmp sgt i32 %2068, 3
  %2085 = sext i32 %2049 to i64
  %2086 = sext i32 %2050 to i64
  %2087 = getelementptr inbounds %struct.SequenceHeader, %struct.SequenceHeader* %2046, i64 0, i32 7
  %2088 = getelementptr inbounds %struct.SequenceHeader, %struct.SequenceHeader* %2046, i64 0, i32 16
  %2089 = sext i32 %2069 to i64
  %2090 = zext i32 %2083 to i64
  br label %2091

2091:                                             ; preds = %2109, %2082
  %2092 = phi i64 [ 0, %2082 ], [ %2110, %2109 ]
  br i1 %2084, label %2093, label %2109

2093:                                             ; preds = %2091
  %2094 = mul nsw i64 %2092, %2085
  %2095 = mul nsw i64 %2092, %2086
  br label %2096

2096:                                             ; preds = %2096, %2093
  %2097 = phi i64 [ 0, %2093 ], [ %2107, %2096 ]
  %2098 = add nsw i64 %2097, %2094
  %2099 = shl nsw i64 %2098, 2
  %2100 = getelementptr inbounds i8, i8* %2047, i64 %2099
  store i8* %2100, i8** %1975, align 8
  %2101 = add nsw i64 %2097, %2095
  %2102 = shl nsw i64 %2101, 2
  %2103 = getelementptr inbounds i8, i8* %2048, i64 %2102
  store i8* %2103, i8** %99, align 8
  %2104 = load i8, i8* %2087, align 4
  %2105 = load i8, i8* %2088, align 1
  %2106 = zext i8 %2105 to i32
  call void @av1_predict_intra_block(%struct.macroblockd* %40, i8 zeroext %2104, i32 %2106, i32 %95, i32 %92, i8 zeroext %696, i8 zeroext %2012, i32 0, i32 0, i8 zeroext 5, i8* %2103, i32 %2050, i8* %2103, i32 %2050, i32 0, i32 0, i32 0) #4
  %2107 = add i64 %2097, %1983
  %2108 = icmp slt i64 %2107, %2089
  br i1 %2108, label %2096, label %2109

2109:                                             ; preds = %2096, %2091
  %2110 = add i64 %2092, %1983
  %2111 = icmp slt i64 %2110, %2090
  br i1 %2111, label %2091, label %2112

2112:                                             ; preds = %2109, %2079
  store i8* %2047, i8** %1975, align 8
  store i8* %2048, i8** %99, align 8
  br i1 %799, label %2114, label %2113

2113:                                             ; preds = %2112
  call fastcc void @model_rd_for_sb_y(%struct.AV1_COMP* %0, i8 zeroext %4, %struct.macroblock* %2, %struct.macroblockd* %40, %struct.RD_STATS* nonnull %7, i32 1) #4
  br label %2116

2114:                                             ; preds = %2112
  %2115 = load i8, i8* %1974, align 1
  call fastcc void @block_yrd(%struct.macroblock* %2, %struct.RD_STATS* nonnull %7, i32* %1917, i8 zeroext %4, i8 zeroext %2115) #4
  br label %2116

2116:                                             ; preds = %2114, %2113
  %2117 = load i8, i8* %802, align 8
  %2118 = icmp eq i8 %2117, 0
  br i1 %2118, label %2120, label %2119

2119:                                             ; preds = %2116
  call void @av1_foreach_transformed_block_in_plane(%struct.macroblockd* %40, i8 zeroext %2045, i32 1, void (i32, i32, i32, i32, i8, i8, i8*)* nonnull @estimate_block_intra, i8* nonnull %1913) #4
  br label %2120

2120:                                             ; preds = %2119, %2116
  %2121 = load i8, i8* %803, align 1
  %2122 = icmp eq i8 %2121, 0
  br i1 %2122, label %2124, label %2123

2123:                                             ; preds = %2120
  call void @av1_foreach_transformed_block_in_plane(%struct.macroblockd* %40, i8 zeroext %2045, i32 2, void (i32, i32, i32, i32, i8, i8, i8*)* nonnull @estimate_block_intra, i8* nonnull %1913) #4
  br label %2124

2124:                                             ; preds = %2123, %2120
  %2125 = add i8 %2012, -1
  %2126 = icmp ugt i8 %2125, 7
  %2127 = or i1 %1984, %2126
  br i1 %2127, label %2136, label %2128

2128:                                             ; preds = %2124
  %2129 = add nsw i32 %2019, -1
  %2130 = sext i32 %2129 to i64
  %2131 = load i8, i8* %1985, align 8
  %2132 = sext i8 %2131 to i64
  %2133 = add nsw i64 %2132, 3
  %2134 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %2, i64 0, i32 20, i32 6, i64 %2130, i64 %2133
  %2135 = load i32, i32* %2134, align 4
  br label %2136

2136:                                             ; preds = %2128, %2124
  %2137 = phi i32 [ %2135, %2128 ], [ 0, %2124 ]
  %2138 = icmp eq i64 %2010, 0
  br i1 %2138, label %2139, label %2149

2139:                                             ; preds = %2136
  %2140 = load %struct.SequenceHeader*, %struct.SequenceHeader** %289, align 16
  %2141 = getelementptr inbounds %struct.SequenceHeader, %struct.SequenceHeader* %2140, i64 0, i32 15
  %2142 = load i8, i8* %2141, align 4
  %2143 = icmp eq i8 %2142, 0
  %2144 = or i1 %1986, %2143
  %2145 = or i1 %1989, %2144
  br i1 %2145, label %2149, label %2146

2146:                                             ; preds = %2139
  %2147 = load i32, i32* %1990, align 4
  %2148 = add nsw i32 %2147, %2137
  br label %2149

2149:                                             ; preds = %2146, %2139, %2136
  %2150 = phi i32 [ %2148, %2146 ], [ %2137, %2136 ], [ %2137, %2139 ]
  %2151 = load i32, i32* %1968, align 8
  %2152 = add i32 %1991, %2150
  %2153 = add i32 %2152, %2151
  store i32 %2153, i32* %1968, align 8
  %2154 = sext i32 %2153 to i64
  %2155 = load i32, i32* %761, align 8
  %2156 = sext i32 %2155 to i64
  %2157 = mul nsw i64 %2156, %2154
  %2158 = add nsw i64 %2157, 256
  %2159 = ashr i64 %2158, 9
  %2160 = load i64, i64* %1969, align 8
  %2161 = shl nsw i64 %2160, 7
  %2162 = add nsw i64 %2159, %2161
  store i64 %2162, i64* %1970, align 8
  %2163 = icmp slt i64 %2162, %2006
  br i1 %2163, label %2164, label %2170

2164:                                             ; preds = %2149
  %2165 = load i32, i32* %1996, align 4
  %2166 = load i64, i64* %1971, align 8
  %2167 = load i32, i32* %1972, align 8
  %2168 = load i32, i32* %1973, align 4
  %2169 = load i8, i8* %1974, align 1
  store i8 %2012, i8* %1992, align 1
  store i32 -2147450880, i32* %1993, align 8
  store i32 -2147450880, i32* %1994, align 4
  br label %2170

2170:                                             ; preds = %2164, %2149, %2024, %1999
  %2171 = phi i8 [ %2000, %1999 ], [ %2000, %2024 ], [ 0, %2164 ], [ %2000, %2149 ]
  %2172 = phi i8 [ %2001, %1999 ], [ %2001, %2024 ], [ %2169, %2164 ], [ %2001, %2149 ]
  %2173 = phi i8 [ %2002, %1999 ], [ %2002, %2024 ], [ %2012, %2164 ], [ %2002, %2149 ]
  %2174 = phi i32 [ %2003, %1999 ], [ %2003, %2024 ], [ %2153, %2164 ], [ %2003, %2149 ]
  %2175 = phi i32 [ %2004, %1999 ], [ %2004, %2024 ], [ %2165, %2164 ], [ %2004, %2149 ]
  %2176 = phi i64 [ %2005, %1999 ], [ %2005, %2024 ], [ %2160, %2164 ], [ %2005, %2149 ]
  %2177 = phi i64 [ %2006, %1999 ], [ %2006, %2024 ], [ %2162, %2164 ], [ %2006, %2149 ]
  %2178 = phi i64 [ %2007, %1999 ], [ %2007, %2024 ], [ %2166, %2164 ], [ %2007, %2149 ]
  %2179 = phi i32 [ %2008, %1999 ], [ %2008, %2024 ], [ %2167, %2164 ], [ %2008, %2149 ]
  %2180 = phi i32 [ %2009, %1999 ], [ %2009, %2024 ], [ %2168, %2164 ], [ %2009, %2149 ]
  %2181 = add nuw nsw i64 %2010, 1
  %2182 = icmp eq i64 %2181, 4
  br i1 %2182, label %1998, label %1999

2183:                                             ; preds = %1894, %1908, %1998
  %2184 = phi i8 [ %2171, %1998 ], [ %1770, %1908 ], [ %1770, %1894 ]
  %2185 = phi i8 [ %2172, %1998 ], [ %1771, %1908 ], [ %1771, %1894 ]
  %2186 = phi i8 [ %2173, %1998 ], [ %1772, %1908 ], [ %1772, %1894 ]
  %2187 = phi i64 [ %1962, %1998 ], [ %1773, %1908 ], [ %1773, %1894 ]
  %2188 = phi i32 [ %2174, %1998 ], [ %1774, %1908 ], [ %1774, %1894 ]
  %2189 = phi i32 [ %2175, %1998 ], [ %1775, %1908 ], [ %1775, %1894 ]
  %2190 = phi i64 [ %2176, %1998 ], [ %1776, %1908 ], [ %1776, %1894 ]
  %2191 = phi i64 [ %2177, %1998 ], [ %1777, %1908 ], [ %1777, %1894 ]
  %2192 = phi i64 [ %2178, %1998 ], [ %1778, %1908 ], [ %1778, %1894 ]
  %2193 = phi i32 [ %2179, %1998 ], [ %1779, %1908 ], [ %1779, %1894 ]
  %2194 = phi i32 [ %2180, %1998 ], [ %1780, %1908 ], [ %1780, %1894 ]
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %1797) #4
  store i8* %100, i8** %99, align 8
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %102, i8* nonnull align 8 %97, i64 24, i1 false)
  store i8 %2186, i8* %678, align 2
  store i8 %2184, i8* %221, align 8
  store i32 %2193, i32* %205, align 8
  %2195 = load i16, i16* %48, align 1
  %2196 = trunc i16 %2195 to i8
  %2197 = icmp sgt i8 %2196, -1
  br i1 %2197, label %2198, label %2202

2198:                                             ; preds = %2183
  %2199 = load i8, i8* %221, align 8
  %2200 = icmp slt i8 %2199, 1
  br i1 %2200, label %2201, label %2202

2201:                                             ; preds = %2198
  store i32 196611, i32* %694, align 4
  br label %2202

2202:                                             ; preds = %2183, %2198, %2201
  br i1 %89, label %2203, label %2223

2203:                                             ; preds = %2202
  %2204 = inttoptr i64 %2187 to %struct.PRED_BUFFER*
  %2205 = icmp eq i64 %2187, 0
  br i1 %2205, label %2223, label %2206

2206:                                             ; preds = %2203
  %2207 = getelementptr inbounds %struct.PRED_BUFFER, %struct.PRED_BUFFER* %2204, i64 0, i32 0
  %2208 = load i8*, i8** %2207, align 8
  %2209 = icmp eq i8* %2208, %100
  br i1 %2209, label %2223, label %2210

2210:                                             ; preds = %2206
  %2211 = load i8, i8* %678, align 2
  %2212 = add i8 %2211, -13
  %2213 = icmp ugt i8 %2212, 11
  br i1 %2213, label %2223, label %2214

2214:                                             ; preds = %2210
  %2215 = load void (i8*, i64, i8*, i64, i32, i32)*, void (i8*, i64, i8*, i64, i32, i32)** @aom_convolve_copy, align 8
  %2216 = getelementptr inbounds %struct.PRED_BUFFER, %struct.PRED_BUFFER* %2204, i64 0, i32 1
  %2217 = load i32, i32* %2216, align 8
  %2218 = sext i32 %2217 to i64
  %2219 = getelementptr inbounds %struct.buf_2d, %struct.buf_2d* %98, i64 0, i32 0
  %2220 = load i8*, i8** %2219, align 8
  %2221 = load i32, i32* %781, align 8
  %2222 = sext i32 %2221 to i64
  call void %2215(i8* %2208, i64 %2218, i8* %2220, i64 %2222, i32 %95, i32 %92) #4
  br label %2223

2223:                                             ; preds = %2214, %2206, %2210, %2203, %2202
  %2224 = load i32, i32* %223, align 4
  %2225 = icmp sgt i32 %2224, 0
  %2226 = and i1 %124, %2225
  br i1 %2226, label %2227, label %2418

2227:                                             ; preds = %2223
  %2228 = load i32, i32* %813, align 4
  %2229 = icmp eq i32 %2228, 0
  br i1 %2229, label %2418, label %2230

2230:                                             ; preds = %2227
  %2231 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 83, i32 4
  %2232 = load i32, i32* %2231, align 4
  %2233 = icmp eq i32 %2232, 0
  br i1 %2233, label %2234, label %2418

2234:                                             ; preds = %2230
  %2235 = bitcast i32* %37 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %2235) #4
  store i32 0, i32* %37, align 4
  %2236 = getelementptr inbounds %struct.PICK_MODE_CONTEXT, %struct.PICK_MODE_CONTEXT* %5, i64 0, i32 24
  store i32 0, i32* %2236, align 4
  call void @av1_denoiser_denoise(%struct.AV1_COMP* %0, %struct.macroblock* %2, i32 %105, i32 %107, i8 zeroext %4, %struct.PICK_MODE_CONTEXT* %5, i32* nonnull %37, i32 %257) #4
  %2237 = load i32, i32* %37, align 4
  %2238 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 82, i32 0
  %2239 = load i32, i32* %2238, align 8
  %2240 = icmp eq i32 %2239, 0
  br i1 %2240, label %2409, label %2241

2241:                                             ; preds = %2234
  %2242 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 82, i32 1
  %2243 = load i32, i32* %2242, align 4
  %2244 = icmp ugt i32 %2243, 1
  %2245 = shl i64 %2191, 3
  %2246 = icmp slt i64 %1783, %2245
  %2247 = and i1 %2246, %2244
  br i1 %2247, label %2248, label %2409

2248:                                             ; preds = %2241
  %2249 = icmp eq i8 %2184, 0
  %2250 = icmp ne i32 %2237, 0
  %2251 = and i1 %2249, %2250
  br i1 %2251, label %2260, label %2252

2252:                                             ; preds = %2248
  %2253 = icmp eq i8 %2184, 4
  br i1 %2253, label %2254, label %2409

2254:                                             ; preds = %2252
  %2255 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 75, i32 2
  %2256 = load i32, i32* %2255, align 8
  %2257 = icmp eq i32 %2256, 1
  %2258 = icmp eq i32 %2237, 2
  %2259 = and i1 %2258, %2257
  br i1 %2259, label %2260, label %2409

2260:                                             ; preds = %2254, %2248
  %2261 = bitcast %struct.RD_STATS* %24 to i8*
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %2261) #4
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %2261, i8 -86, i64 40, i1 false) #4
  store i8 15, i8* %678, align 2
  store i8 1, i8* %221, align 8
  store i8 -1, i8* %222, align 1
  %2262 = load i32, i32* %232, align 4
  %2263 = icmp eq i32 %2262, -1
  %2264 = sext i32 %2262 to i64
  %2265 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 15, i64 %2264
  %2266 = select i1 %2263, %struct.scale_factors* null, %struct.scale_factors* %2265
  store %struct.scale_factors* %2266, %struct.scale_factors** %726, align 8
  %2267 = load i32, i32* %232, align 4
  %2268 = icmp eq i32 %2267, -1
  %2269 = sext i32 %2267 to i64
  %2270 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 15, i64 %2269
  %2271 = select i1 %2268, %struct.scale_factors* null, %struct.scale_factors* %2270
  store %struct.scale_factors* %2271, %struct.scale_factors** %727, align 8
  store i32 0, i32* %684, align 8
  store i32 0, i32* %694, align 4
  %2272 = getelementptr inbounds [8 x [3 x %struct.buf_2d]], [8 x [3 x %struct.buf_2d]]* %27, i64 0, i64 1, i64 0
  %2273 = bitcast %struct.buf_2d* %2272 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 16 %746, i8* align 16 %2273, i64 32, i1 false) #4
  call void @av1_enc_build_inter_predictor_y(%struct.macroblockd* %40, i32 %105, i32 %107) #4
  call fastcc void @model_rd_for_sb_y(%struct.AV1_COMP* %0, i8 zeroext %4, %struct.macroblock* %2, %struct.macroblockd* %40, %struct.RD_STATS* nonnull %24, i32 1) #4
  %2274 = load i8, i8* %222, align 1
  %2275 = icmp sgt i8 %2274, 0
  %2276 = load i8, i8* %221, align 1
  br i1 %2275, label %2277, label %2307

2277:                                             ; preds = %2260
  %2278 = icmp slt i8 %2276, 5
  %2279 = icmp sgt i8 %2274, 4
  %2280 = and i1 %2279, %2278
  br i1 %2280, label %2303, label %2281

2281:                                             ; preds = %2277
  switch i8 %2276, label %2303 [
    i8 1, label %2282
    i8 5, label %2285
    i8 2, label %2289
    i8 3, label %2293
    i8 6, label %2295
  ]

2282:                                             ; preds = %2281
  %2283 = add i8 %2274, -2
  %2284 = icmp ult i8 %2283, 3
  br i1 %2284, label %2300, label %2303

2285:                                             ; preds = %2281
  %2286 = icmp eq i8 %2274, 6
  %2287 = select i1 %2286, i8 7, i8 -1
  %2288 = icmp eq i8 %2274, 7
  br i1 %2288, label %2300, label %2297

2289:                                             ; preds = %2281
  %2290 = icmp eq i8 %2274, 4
  %2291 = select i1 %2290, i8 5, i8 -1
  %2292 = icmp eq i8 %2274, 3
  br i1 %2292, label %2300, label %2297

2293:                                             ; preds = %2281
  %2294 = icmp eq i8 %2274, 4
  br i1 %2294, label %2300, label %2303

2295:                                             ; preds = %2281
  %2296 = icmp eq i8 %2274, 7
  br i1 %2296, label %2300, label %2303

2297:                                             ; preds = %2289, %2285
  %2298 = phi i8 [ %2287, %2285 ], [ %2291, %2289 ]
  %2299 = icmp sgt i8 %2298, -1
  br i1 %2299, label %2300, label %2303

2300:                                             ; preds = %2282, %2297, %2295, %2293, %2289, %2285
  %2301 = phi i8 [ %2298, %2297 ], [ 8, %2295 ], [ 6, %2293 ], [ 3, %2285 ], [ 4, %2289 ], [ %2283, %2282 ]
  %2302 = add nuw nsw i8 %2301, 20
  br label %2310

2303:                                             ; preds = %2282, %2297, %2295, %2293, %2281, %2277
  %2304 = shl i8 %2274, 2
  %2305 = add i8 %2304, -13
  %2306 = add i8 %2305, %2276
  br label %2310

2307:                                             ; preds = %2260
  %2308 = sext i8 %2276 to i64
  %2309 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %2, i64 0, i32 3, i32 4, i64 %2308
  br label %2324

2310:                                             ; preds = %2303, %2300
  %2311 = phi i8 [ %2306, %2303 ], [ %2302, %2300 ]
  %2312 = sext i8 %2311 to i64
  %2313 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %2, i64 0, i32 3, i32 4, i64 %2312
  %2314 = load i16, i16* %2313, align 2
  %2315 = and i16 %2314, 7
  %2316 = lshr i16 %2314, 5
  %2317 = and i16 %2316, 7
  %2318 = zext i16 %2317 to i64
  %2319 = zext i16 %2315 to i32
  %2320 = icmp ult i32 %2319, 4
  %2321 = select i1 %2320, i32 %2319, i32 4
  %2322 = zext i32 %2321 to i64
  %2323 = getelementptr inbounds [3 x [5 x i16]], [3 x [5 x i16]]* @compound_mode_ctx_map, i64 0, i64 %2318, i64 %2322
  br label %2324

2324:                                             ; preds = %2310, %2307
  %2325 = phi i16* [ %2323, %2310 ], [ %2309, %2307 ]
  %2326 = load i16, i16* %2325, align 2
  %2327 = and i16 %2326, 7
  %2328 = zext i16 %2327 to i64
  %2329 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %2, i64 0, i32 20, i32 16, i64 %2328, i64 1
  %2330 = load i32, i32* %2329, align 4
  %2331 = lshr i16 %2326, 3
  %2332 = and i16 %2331, 1
  %2333 = zext i16 %2332 to i64
  %2334 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %2, i64 0, i32 20, i32 17, i64 %2333, i64 0
  %2335 = load i32, i32* %2334, align 4
  %2336 = add nsw i32 %2335, %2330
  %2337 = getelementptr inbounds %struct.RD_STATS, %struct.RD_STATS* %24, i64 0, i32 0
  %2338 = load i32, i32* %2337, align 8
  %2339 = add nsw i32 %2336, %2338
  %2340 = load i32, i32* %57, align 4
  %2341 = add i32 %2339, %2340
  store i32 %2341, i32* %2337, align 8
  %2342 = sext i32 %2341 to i64
  %2343 = load i32, i32* %761, align 8
  %2344 = sext i32 %2343 to i64
  %2345 = mul nsw i64 %2344, %2342
  %2346 = add nsw i64 %2345, 256
  %2347 = ashr i64 %2346, 9
  %2348 = getelementptr inbounds %struct.RD_STATS, %struct.RD_STATS* %24, i64 0, i32 1
  %2349 = load i64, i64* %2348, align 8
  %2350 = shl nsw i64 %2349, 7
  %2351 = add nsw i64 %2347, %2350
  %2352 = getelementptr inbounds %struct.RD_STATS, %struct.RD_STATS* %24, i64 0, i32 2
  store i64 %2351, i64* %2352, align 8
  %2353 = getelementptr inbounds %struct.RD_STATS, %struct.RD_STATS* %24, i64 0, i32 4
  %2354 = load i32, i32* %2353, align 8
  store i32 %2354, i32* %205, align 8
  %2355 = icmp sgt i64 %2351, %2191
  br i1 %2355, label %2356, label %2392

2356:                                             ; preds = %2324
  store i32 %2188, i32* %2337, align 8
  %2357 = getelementptr inbounds i8, i8* %2261, i64 4
  %2358 = bitcast i8* %2357 to i32*
  store i32 %2189, i32* %2358, align 4
  store i64 %2190, i64* %2348, align 8
  store i64 %2191, i64* %2352, align 8
  %2359 = getelementptr inbounds %struct.RD_STATS, %struct.RD_STATS* %24, i64 0, i32 3
  store i64 %2192, i64* %2359, align 8
  store i32 %2193, i32* %2353, align 8
  %2360 = getelementptr inbounds %struct.RD_STATS, %struct.RD_STATS* %24, i64 0, i32 5
  store i32 %2194, i32* %2360, align 4
  store i8 %2186, i8* %678, align 2
  store i8 %2184, i8* %221, align 8
  %2361 = icmp sgt i8 %2184, 1
  %2362 = select i1 %2361, i8 %2184, i8 1
  %2363 = add nsw i8 %2362, -1
  %2364 = icmp ult i8 %2363, 8
  br i1 %2364, label %2365, label %2373

2365:                                             ; preds = %2356
  %2366 = zext i8 %2362 to i64
  %2367 = add nsw i64 %2366, -1
  %2368 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 13, i64 %2367
  %2369 = load i32, i32* %2368, align 4
  %2370 = icmp eq i32 %2369, -1
  %2371 = sext i32 %2369 to i64
  %2372 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 15, i64 %2371
  br i1 %2370, label %2373, label %2374

2373:                                             ; preds = %2365, %2356
  br label %2374

2374:                                             ; preds = %2373, %2365
  %2375 = phi %struct.scale_factors* [ null, %2373 ], [ %2372, %2365 ]
  store %struct.scale_factors* %2375, %struct.scale_factors** %726, align 8
  %2376 = load i32, i32* %232, align 4
  %2377 = icmp eq i32 %2376, -1
  %2378 = sext i32 %2376 to i64
  %2379 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 15, i64 %2378
  %2380 = select i1 %2377, %struct.scale_factors* null, %struct.scale_factors* %2379
  store %struct.scale_factors* %2380, %struct.scale_factors** %727, align 8
  store i32 %1781, i32* %694, align 4
  br i1 %2249, label %2381, label %2382

2381:                                             ; preds = %2374
  store i32 -2147450880, i32* %684, align 8
  br label %2390

2382:                                             ; preds = %2374
  %2383 = zext i8 %2186 to i64
  %2384 = sext i8 %2184 to i64
  %2385 = getelementptr inbounds [25 x [8 x %union.int_mv]], [25 x [8 x %union.int_mv]]* %25, i64 0, i64 %2383, i64 %2384, i32 0
  %2386 = load i32, i32* %2385, align 4
  store i32 %2386, i32* %684, align 8
  br i1 %89, label %2387, label %2390

2387:                                             ; preds = %2382
  %2388 = getelementptr inbounds [8 x [3 x %struct.buf_2d]], [8 x [3 x %struct.buf_2d]]* %27, i64 0, i64 4, i64 0
  %2389 = bitcast %struct.buf_2d* %2388 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 16 %746, i8* align 16 %2389, i64 32, i1 false) #4
  call void @av1_enc_build_inter_predictor_y(%struct.macroblockd* %40, i32 %105, i32 %107) #4
  br label %2390

2390:                                             ; preds = %2382, %2387, %2381
  store i8 %2185, i8* %706, align 1
  %2391 = zext i8 %1769 to i32
  store i32 %2391, i32* %205, align 8
  br label %2400

2392:                                             ; preds = %2324
  %2393 = getelementptr inbounds i8, i8* %2261, i64 4
  %2394 = bitcast i8* %2393 to i32*
  %2395 = load i32, i32* %2394, align 4
  %2396 = getelementptr inbounds %struct.RD_STATS, %struct.RD_STATS* %24, i64 0, i32 3
  %2397 = load i64, i64* %2396, align 8
  %2398 = getelementptr inbounds %struct.RD_STATS, %struct.RD_STATS* %24, i64 0, i32 5
  %2399 = load i32, i32* %2398, align 4
  br label %2400

2400:                                             ; preds = %2392, %2390
  %2401 = phi i32 [ %2188, %2390 ], [ %2341, %2392 ]
  %2402 = phi i32 [ %2189, %2390 ], [ %2395, %2392 ]
  %2403 = phi i64 [ %2190, %2390 ], [ %2349, %2392 ]
  %2404 = phi i64 [ %2191, %2390 ], [ %2351, %2392 ]
  %2405 = phi i64 [ %2192, %2390 ], [ %2397, %2392 ]
  %2406 = phi i32 [ %2193, %2390 ], [ %2354, %2392 ]
  %2407 = phi i32 [ %2194, %2390 ], [ %2399, %2392 ]
  %2408 = phi i8 [ %2184, %2390 ], [ 1, %2392 ]
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %2261) #4
  br label %2409

2409:                                             ; preds = %2234, %2241, %2252, %2254, %2400
  %2410 = phi i32 [ %2188, %2234 ], [ %2401, %2400 ], [ %2188, %2254 ], [ %2188, %2252 ], [ %2188, %2241 ]
  %2411 = phi i32 [ %2189, %2234 ], [ %2402, %2400 ], [ %2189, %2254 ], [ %2189, %2252 ], [ %2189, %2241 ]
  %2412 = phi i64 [ %2190, %2234 ], [ %2403, %2400 ], [ %2190, %2254 ], [ %2190, %2252 ], [ %2190, %2241 ]
  %2413 = phi i64 [ %2191, %2234 ], [ %2404, %2400 ], [ %2191, %2254 ], [ %2191, %2252 ], [ %2191, %2241 ]
  %2414 = phi i64 [ %2192, %2234 ], [ %2405, %2400 ], [ %2192, %2254 ], [ %2192, %2252 ], [ %2192, %2241 ]
  %2415 = phi i32 [ %2193, %2234 ], [ %2406, %2400 ], [ %2193, %2254 ], [ %2193, %2252 ], [ %2193, %2241 ]
  %2416 = phi i32 [ %2194, %2234 ], [ %2407, %2400 ], [ %2194, %2254 ], [ %2194, %2252 ], [ %2194, %2241 ]
  %2417 = phi i8 [ %2184, %2234 ], [ %2408, %2400 ], [ 4, %2254 ], [ %2184, %2252 ], [ %2184, %2241 ]
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %2235) #4
  br label %2418

2418:                                             ; preds = %2227, %2409, %2230, %2223
  %2419 = phi i8 [ %2184, %2227 ], [ %2417, %2409 ], [ %2184, %2230 ], [ %2184, %2223 ]
  %2420 = phi i32 [ %2188, %2227 ], [ %2410, %2409 ], [ %2188, %2230 ], [ %2188, %2223 ]
  %2421 = phi i32 [ %2189, %2227 ], [ %2411, %2409 ], [ %2189, %2230 ], [ %2189, %2223 ]
  %2422 = phi i64 [ %2190, %2227 ], [ %2412, %2409 ], [ %2190, %2230 ], [ %2190, %2223 ]
  %2423 = phi i64 [ %2191, %2227 ], [ %2413, %2409 ], [ %2191, %2230 ], [ %2191, %2223 ]
  %2424 = phi i64 [ %2192, %2227 ], [ %2414, %2409 ], [ %2192, %2230 ], [ %2192, %2223 ]
  %2425 = phi i32 [ %2193, %2227 ], [ %2415, %2409 ], [ %2193, %2230 ], [ %2193, %2223 ]
  %2426 = phi i32 [ %2194, %2227 ], [ %2416, %2409 ], [ %2194, %2230 ], [ %2194, %2223 ]
  %2427 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 40, i32 6, i32 3
  %2428 = load i32, i32* %2427, align 4
  %2429 = icmp eq i32 %2428, 0
  br i1 %2429, label %2500, label %2430

2430:                                             ; preds = %2418
  %2431 = sext i8 %2419 to i64
  %2432 = load i8, i8* %678, align 2
  %2433 = icmp ugt i8 %2432, 12
  br i1 %2433, label %2434, label %2437

2434:                                             ; preds = %2430
  %2435 = zext i8 %2432 to i64
  %2436 = add nsw i64 %2435, -13
  br label %2443

2437:                                             ; preds = %2430
  %2438 = icmp ult i8 %2432, 10
  br i1 %2438, label %2439, label %2443

2439:                                             ; preds = %2437
  %2440 = sext i8 %2432 to i64
  %2441 = getelementptr inbounds [10 x i64], [10 x i64]* @switch.table.av1_nonrd_pick_inter_mode_sb.1, i64 0, i64 %2440
  %2442 = load i64, i64* %2441, align 8
  br label %2443

2443:                                             ; preds = %2437, %2439, %2434
  %2444 = phi i64 [ %2436, %2434 ], [ %2442, %2439 ], [ -1, %2437 ]
  %2445 = getelementptr inbounds [8 x [4 x i8]], [8 x [4 x i8]]* @mode_idx, i64 0, i64 %2431, i64 %2444
  %2446 = load i8, i8* %2445, align 1
  %2447 = icmp eq i8 %2419, 0
  %2448 = icmp ugt i8 %4, 3
  %2449 = select i1 %2448, i8 %4, i8 3
  %2450 = add i8 %2449, -3
  %2451 = icmp ult i8 %4, 9
  %2452 = select i1 %2451, i8 %4, i8 9
  %2453 = add nuw nsw i8 %2452, 6
  %2454 = icmp ugt i8 %2450, %2453
  br i1 %2447, label %2455, label %2476

2455:                                             ; preds = %2443
  br i1 %2454, label %2500, label %2456

2456:                                             ; preds = %2455
  %2457 = icmp eq i8 %2446, -100
  br label %2458

2458:                                             ; preds = %2472, %2456
  %2459 = phi i8 [ %2450, %2456 ], [ %2474, %2472 ]
  %2460 = zext i8 %2459 to i64
  %2461 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %2, i64 0, i32 41, i64 %2460, i64 156
  %2462 = load i32, i32* %2461, align 4
  br i1 %2457, label %2463, label %2466

2463:                                             ; preds = %2458
  %2464 = ashr i32 %2462, 4
  %2465 = sub nsw i32 %2462, %2464
  br label %2472

2466:                                             ; preds = %2458
  %2467 = add nsw i32 %2462, 1
  %2468 = load i32, i32* %2427, align 4
  %2469 = shl nsw i32 %2468, 6
  %2470 = icmp slt i32 %2467, %2469
  %2471 = select i1 %2470, i32 %2467, i32 %2469
  br label %2472

2472:                                             ; preds = %2466, %2463
  %2473 = phi i32 [ %2471, %2466 ], [ %2465, %2463 ]
  store i32 %2473, i32* %2461, align 4
  %2474 = add i8 %2459, 3
  %2475 = icmp ugt i8 %2474, %2453
  br i1 %2475, label %2504, label %2458

2476:                                             ; preds = %2443
  %2477 = getelementptr inbounds [8 x [4 x i8]], [8 x [4 x i8]]* @mode_idx, i64 0, i64 %2431, i64 0
  %2478 = load i8, i8* %2477, align 4
  br i1 %2454, label %2500, label %2479

2479:                                             ; preds = %2476
  %2480 = zext i8 %2478 to i64
  %2481 = icmp eq i8 %2478, %2446
  br label %2482

2482:                                             ; preds = %2496, %2479
  %2483 = phi i8 [ %2450, %2479 ], [ %2498, %2496 ]
  %2484 = zext i8 %2483 to i64
  %2485 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %2, i64 0, i32 41, i64 %2484, i64 %2480
  %2486 = load i32, i32* %2485, align 4
  br i1 %2481, label %2487, label %2490

2487:                                             ; preds = %2482
  %2488 = ashr i32 %2486, 4
  %2489 = sub nsw i32 %2486, %2488
  br label %2496

2490:                                             ; preds = %2482
  %2491 = add nsw i32 %2486, 1
  %2492 = load i32, i32* %2427, align 4
  %2493 = shl nsw i32 %2492, 6
  %2494 = icmp slt i32 %2491, %2493
  %2495 = select i1 %2494, i32 %2491, i32 %2493
  br label %2496

2496:                                             ; preds = %2490, %2487
  %2497 = phi i32 [ %2495, %2490 ], [ %2489, %2487 ]
  store i32 %2497, i32* %2485, align 4
  %2498 = add i8 %2483, 3
  %2499 = icmp ugt i8 %2498, %2453
  br i1 %2499, label %2567, label %2482

2500:                                             ; preds = %2635, %2563, %2476, %2567, %2591, %2455, %2504, %2525, %2615, %2546, %2418
  call fastcc void @store_coding_context(%struct.macroblock* %2, %struct.PICK_MODE_CONTEXT* %5)
  %2501 = bitcast %struct.RD_STATS* %3 to i8*
  store i32 %2420, i32* %213, align 8
  %2502 = getelementptr inbounds i8, i8* %2501, i64 4
  %2503 = bitcast i8* %2502 to i32*
  store i32 %2421, i32* %2503, align 4
  store i64 %2422, i64* %214, align 8
  store i64 %2423, i64* %215, align 8
  store i64 %2424, i64* %217, align 8
  store i32 %2425, i32* %218, align 8
  store i32 %2426, i32* %219, align 4
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %97)
  call void @llvm.lifetime.end.p0i8(i64 49152, i8* nonnull %78) #4
  call void @llvm.lifetime.end.p0i8(i64 64, i8* nonnull %77) #4
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %60) #4
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %55) #4
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %47) #4
  call void @llvm.lifetime.end.p0i8(i64 768, i8* nonnull %46) #4
  call void @llvm.lifetime.end.p0i8(i64 200, i8* nonnull %45) #4
  call void @llvm.lifetime.end.p0i8(i64 800, i8* nonnull %44) #4
  ret void

2504:                                             ; preds = %2472
  br i1 %2454, label %2500, label %2505

2505:                                             ; preds = %2504
  %2506 = icmp eq i8 %2446, -94
  br label %2507

2507:                                             ; preds = %2521, %2505
  %2508 = phi i8 [ %2450, %2505 ], [ %2523, %2521 ]
  %2509 = zext i8 %2508 to i64
  %2510 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %2, i64 0, i32 41, i64 %2509, i64 162
  %2511 = load i32, i32* %2510, align 4
  br i1 %2506, label %2518, label %2512

2512:                                             ; preds = %2507
  %2513 = add nsw i32 %2511, 1
  %2514 = load i32, i32* %2427, align 4
  %2515 = shl nsw i32 %2514, 6
  %2516 = icmp slt i32 %2513, %2515
  %2517 = select i1 %2516, i32 %2513, i32 %2515
  br label %2521

2518:                                             ; preds = %2507
  %2519 = ashr i32 %2511, 4
  %2520 = sub nsw i32 %2511, %2519
  br label %2521

2521:                                             ; preds = %2518, %2512
  %2522 = phi i32 [ %2517, %2512 ], [ %2520, %2518 ]
  store i32 %2522, i32* %2510, align 4
  %2523 = add i8 %2508, 3
  %2524 = icmp ugt i8 %2523, %2453
  br i1 %2524, label %2525, label %2507

2525:                                             ; preds = %2521
  br i1 %2454, label %2500, label %2526

2526:                                             ; preds = %2525
  %2527 = icmp eq i8 %2446, -95
  br label %2528

2528:                                             ; preds = %2542, %2526
  %2529 = phi i8 [ %2450, %2526 ], [ %2544, %2542 ]
  %2530 = zext i8 %2529 to i64
  %2531 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %2, i64 0, i32 41, i64 %2530, i64 161
  %2532 = load i32, i32* %2531, align 4
  br i1 %2527, label %2539, label %2533

2533:                                             ; preds = %2528
  %2534 = add nsw i32 %2532, 1
  %2535 = load i32, i32* %2427, align 4
  %2536 = shl nsw i32 %2535, 6
  %2537 = icmp slt i32 %2534, %2536
  %2538 = select i1 %2537, i32 %2534, i32 %2536
  br label %2542

2539:                                             ; preds = %2528
  %2540 = ashr i32 %2532, 4
  %2541 = sub nsw i32 %2532, %2540
  br label %2542

2542:                                             ; preds = %2539, %2533
  %2543 = phi i32 [ %2538, %2533 ], [ %2541, %2539 ]
  store i32 %2543, i32* %2531, align 4
  %2544 = add i8 %2529, 3
  %2545 = icmp ugt i8 %2544, %2453
  br i1 %2545, label %2546, label %2528

2546:                                             ; preds = %2542
  br i1 %2454, label %2500, label %2547

2547:                                             ; preds = %2546
  %2548 = icmp eq i8 %2446, -98
  br label %2549

2549:                                             ; preds = %2563, %2547
  %2550 = phi i8 [ %2450, %2547 ], [ %2565, %2563 ]
  %2551 = zext i8 %2550 to i64
  %2552 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %2, i64 0, i32 41, i64 %2551, i64 158
  %2553 = load i32, i32* %2552, align 4
  br i1 %2548, label %2560, label %2554

2554:                                             ; preds = %2549
  %2555 = add nsw i32 %2553, 1
  %2556 = load i32, i32* %2427, align 4
  %2557 = shl nsw i32 %2556, 6
  %2558 = icmp slt i32 %2555, %2557
  %2559 = select i1 %2558, i32 %2555, i32 %2557
  br label %2563

2560:                                             ; preds = %2549
  %2561 = ashr i32 %2553, 4
  %2562 = sub nsw i32 %2553, %2561
  br label %2563

2563:                                             ; preds = %2560, %2554
  %2564 = phi i32 [ %2559, %2554 ], [ %2562, %2560 ]
  store i32 %2564, i32* %2552, align 4
  %2565 = add i8 %2550, 3
  %2566 = icmp ugt i8 %2565, %2453
  br i1 %2566, label %2500, label %2549

2567:                                             ; preds = %2496
  %2568 = getelementptr inbounds [8 x [4 x i8]], [8 x [4 x i8]]* @mode_idx, i64 0, i64 %2431, i64 1
  %2569 = load i8, i8* %2568, align 1
  br i1 %2454, label %2500, label %2570

2570:                                             ; preds = %2567
  %2571 = zext i8 %2569 to i64
  %2572 = icmp eq i8 %2569, %2446
  br label %2573

2573:                                             ; preds = %2587, %2570
  %2574 = phi i8 [ %2450, %2570 ], [ %2589, %2587 ]
  %2575 = zext i8 %2574 to i64
  %2576 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %2, i64 0, i32 41, i64 %2575, i64 %2571
  %2577 = load i32, i32* %2576, align 4
  br i1 %2572, label %2584, label %2578

2578:                                             ; preds = %2573
  %2579 = add nsw i32 %2577, 1
  %2580 = load i32, i32* %2427, align 4
  %2581 = shl nsw i32 %2580, 6
  %2582 = icmp slt i32 %2579, %2581
  %2583 = select i1 %2582, i32 %2579, i32 %2581
  br label %2587

2584:                                             ; preds = %2573
  %2585 = ashr i32 %2577, 4
  %2586 = sub nsw i32 %2577, %2585
  br label %2587

2587:                                             ; preds = %2584, %2578
  %2588 = phi i32 [ %2583, %2578 ], [ %2586, %2584 ]
  store i32 %2588, i32* %2576, align 4
  %2589 = add i8 %2574, 3
  %2590 = icmp ugt i8 %2589, %2453
  br i1 %2590, label %2591, label %2573

2591:                                             ; preds = %2587
  %2592 = getelementptr inbounds [8 x [4 x i8]], [8 x [4 x i8]]* @mode_idx, i64 0, i64 %2431, i64 2
  %2593 = load i8, i8* %2592, align 2
  br i1 %2454, label %2500, label %2594

2594:                                             ; preds = %2591
  %2595 = zext i8 %2593 to i64
  %2596 = icmp eq i8 %2593, %2446
  br label %2597

2597:                                             ; preds = %2611, %2594
  %2598 = phi i8 [ %2450, %2594 ], [ %2613, %2611 ]
  %2599 = zext i8 %2598 to i64
  %2600 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %2, i64 0, i32 41, i64 %2599, i64 %2595
  %2601 = load i32, i32* %2600, align 4
  br i1 %2596, label %2608, label %2602

2602:                                             ; preds = %2597
  %2603 = add nsw i32 %2601, 1
  %2604 = load i32, i32* %2427, align 4
  %2605 = shl nsw i32 %2604, 6
  %2606 = icmp slt i32 %2603, %2605
  %2607 = select i1 %2606, i32 %2603, i32 %2605
  br label %2611

2608:                                             ; preds = %2597
  %2609 = ashr i32 %2601, 4
  %2610 = sub nsw i32 %2601, %2609
  br label %2611

2611:                                             ; preds = %2608, %2602
  %2612 = phi i32 [ %2607, %2602 ], [ %2610, %2608 ]
  store i32 %2612, i32* %2600, align 4
  %2613 = add i8 %2598, 3
  %2614 = icmp ugt i8 %2613, %2453
  br i1 %2614, label %2615, label %2597

2615:                                             ; preds = %2611
  %2616 = getelementptr inbounds [8 x [4 x i8]], [8 x [4 x i8]]* @mode_idx, i64 0, i64 %2431, i64 3
  %2617 = load i8, i8* %2616, align 1
  br i1 %2454, label %2500, label %2618

2618:                                             ; preds = %2615
  %2619 = zext i8 %2617 to i64
  %2620 = icmp eq i8 %2617, %2446
  br label %2621

2621:                                             ; preds = %2635, %2618
  %2622 = phi i8 [ %2450, %2618 ], [ %2637, %2635 ]
  %2623 = zext i8 %2622 to i64
  %2624 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %2, i64 0, i32 41, i64 %2623, i64 %2619
  %2625 = load i32, i32* %2624, align 4
  br i1 %2620, label %2632, label %2626

2626:                                             ; preds = %2621
  %2627 = add nsw i32 %2625, 1
  %2628 = load i32, i32* %2427, align 4
  %2629 = shl nsw i32 %2628, 6
  %2630 = icmp slt i32 %2627, %2629
  %2631 = select i1 %2630, i32 %2627, i32 %2629
  br label %2635

2632:                                             ; preds = %2621
  %2633 = ashr i32 %2625, 4
  %2634 = sub nsw i32 %2625, %2633
  br label %2635

2635:                                             ; preds = %2632, %2626
  %2636 = phi i32 [ %2631, %2626 ], [ %2634, %2632 ]
  store i32 %2636, i32* %2624, align 4
  %2637 = add i8 %2622, 3
  %2638 = icmp ugt i8 %2637, %2453
  br i1 %2638, label %2500, label %2621

2639:                                             ; preds = %1159, %1171
  %2640 = phi i32 [ %1162, %1171 ], [ 0, %1159 ]
  %2641 = getelementptr inbounds [25 x [8 x i8]], [25 x [8 x i8]]* %26, i64 0, i64 14, i64 %839
  %2642 = load i8, i8* %2641, align 1
  %2643 = icmp eq i8 %2642, 0
  br i1 %2643, label %2649, label %2644

2644:                                             ; preds = %2639
  %2645 = load i32, i32* %915, align 4
  %2646 = getelementptr inbounds [25 x [8 x %union.int_mv]], [25 x [8 x %union.int_mv]]* %25, i64 0, i64 14, i64 %839, i32 0
  %2647 = load i32, i32* %2646, align 4
  %2648 = icmp eq i32 %2645, %2647
  br i1 %2648, label %1746, label %2649

2649:                                             ; preds = %2644, %2639
  %2650 = icmp eq i8 %836, 15
  br i1 %2650, label %2663, label %2651

2651:                                             ; preds = %1171, %2649
  %2652 = phi i32 [ %2640, %2649 ], [ %1162, %1171 ]
  %2653 = getelementptr inbounds [25 x [8 x i8]], [25 x [8 x i8]]* %26, i64 0, i64 15, i64 %839
  %2654 = load i8, i8* %2653, align 1
  %2655 = icmp eq i8 %2654, 0
  br i1 %2655, label %2661, label %2656

2656:                                             ; preds = %2651
  %2657 = load i32, i32* %915, align 4
  %2658 = getelementptr inbounds [25 x [8 x %union.int_mv]], [25 x [8 x %union.int_mv]]* %25, i64 0, i64 15, i64 %839, i32 0
  %2659 = load i32, i32* %2658, align 4
  %2660 = icmp eq i32 %2657, %2659
  br i1 %2660, label %1746, label %2661

2661:                                             ; preds = %2656, %2651
  %2662 = icmp eq i8 %836, 16
  br i1 %2662, label %2673, label %2663

2663:                                             ; preds = %2649, %2661
  %2664 = phi i32 [ %2652, %2661 ], [ %2640, %2649 ]
  %2665 = getelementptr inbounds [25 x [8 x i8]], [25 x [8 x i8]]* %26, i64 0, i64 16, i64 %839
  %2666 = load i8, i8* %2665, align 1
  %2667 = icmp eq i8 %2666, 0
  br i1 %2667, label %2673, label %2668

2668:                                             ; preds = %2663
  %2669 = load i32, i32* %915, align 4
  %2670 = getelementptr inbounds [25 x [8 x %union.int_mv]], [25 x [8 x %union.int_mv]]* %25, i64 0, i64 16, i64 %839, i32 0
  %2671 = load i32, i32* %2670, align 4
  %2672 = icmp eq i32 %2669, %2671
  br i1 %2672, label %1746, label %2673

2673:                                             ; preds = %2668, %2663, %2661
  %2674 = phi i32 [ %2664, %2668 ], [ %2664, %2663 ], [ %2652, %2661 ]
  store i8 %836, i8* %678, align 2
  %2675 = load i32, i32* %915, align 4
  store i32 %2675, i32* %776, align 8
  store i32 0, i32* %683, align 4
  br i1 %89, label %1173, label %1193
}

declare void @av1_denoiser_reset_frame_stats(%struct.PICK_MODE_CONTEXT*) local_unnamed_addr #2

declare void @av1_enc_build_inter_predictor_y(%struct.macroblockd*, i32, i32) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define internal fastcc void @model_skip_for_sb_y_large(%struct.AV1_COMP*, i8 zeroext, i32, i32, %struct.macroblock* nocapture readonly, %struct.macroblockd*, %struct.RD_STATS*, i32* nocapture, i32) unnamed_addr #0 {
  %10 = alloca double, align 8
  %11 = alloca double, align 8
  %12 = alloca [256 x i32], align 16
  %13 = alloca [256 x i32], align 16
  %14 = alloca [256 x i32], align 16
  %15 = alloca [64 x i32], align 16
  %16 = alloca [64 x i32], align 16
  %17 = alloca [16 x i32], align 16
  %18 = alloca [16 x i32], align 16
  %19 = alloca [2 x i32], align 4
  %20 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %4, i64 0, i32 0, i64 0, i32 13
  %21 = load i16*, i16** %20, align 8
  %22 = load i16, i16* %21, align 2
  %23 = sext i16 %22 to i32
  %24 = getelementptr inbounds i16, i16* %21, i64 1
  %25 = load i16, i16* %24, align 2
  %26 = sext i16 %25 to i32
  %27 = mul nsw i32 %23, %23
  %28 = lshr i32 %27, 6
  %29 = mul nsw i32 %26, %26
  %30 = lshr i32 %29, 6
  %31 = zext i32 %30 to i64
  %32 = zext i8 %1 to i64
  %33 = getelementptr inbounds [16 x i8], [16 x i8]* @b_width_log2_lookup, i64 0, i64 %32
  %34 = load i8, i8* %33, align 1
  %35 = zext i8 %34 to i32
  %36 = getelementptr inbounds [16 x i8], [16 x i8]* @b_height_log2_lookup, i64 0, i64 %32
  %37 = load i8, i8* %36, align 1
  %38 = zext i8 %37 to i32
  %39 = add nuw nsw i32 %38, %35
  %40 = add nsw i32 %39, -2
  %41 = shl i32 1, %40
  %42 = bitcast [256 x i32]* %12 to i8*
  call void @llvm.lifetime.start.p0i8(i64 1024, i8* nonnull %42) #4
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %42, i8 0, i64 1024, i1 false)
  %43 = bitcast [256 x i32]* %13 to i8*
  call void @llvm.lifetime.start.p0i8(i64 1024, i8* nonnull %43) #4
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %43, i8 0, i64 1024, i1 false)
  %44 = bitcast [256 x i32]* %14 to i8*
  call void @llvm.lifetime.start.p0i8(i64 1024, i8* nonnull %44) #4
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %44, i8 0, i64 1024, i1 false)
  %45 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %4, i64 0, i32 0, i64 0, i32 6, i32 0
  %46 = load i8*, i8** %45, align 8
  %47 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %4, i64 0, i32 0, i64 0, i32 6, i32 4
  %48 = load i32, i32* %47, align 8
  %49 = getelementptr inbounds %struct.macroblockd, %struct.macroblockd* %5, i64 0, i32 4, i64 0, i32 3, i32 0
  %50 = load i8*, i8** %49, align 8
  %51 = getelementptr inbounds %struct.macroblockd, %struct.macroblockd* %5, i64 0, i32 4, i64 0, i32 3, i32 4
  %52 = load i32, i32* %51, align 8
  %53 = shl i32 4, %35
  %54 = shl i32 4, %38
  %55 = getelementptr inbounds [256 x i32], [256 x i32]* %12, i64 0, i64 0
  %56 = getelementptr inbounds [256 x i32], [256 x i32]* %14, i64 0, i64 0
  %57 = icmp sgt i32 %54, 0
  br i1 %57, label %58, label %105

58:                                               ; preds = %9
  %59 = icmp sgt i32 %53, 0
  %60 = sext i32 %52 to i64
  %61 = sext i32 %48 to i64
  %62 = sext i32 %54 to i64
  br label %63

63:                                               ; preds = %99, %58
  %64 = phi i32 [ 0, %58 ], [ %100, %99 ]
  %65 = phi i32 [ 0, %58 ], [ %101, %99 ]
  %66 = phi i64 [ 0, %58 ], [ %103, %99 ]
  %67 = phi i32 [ 0, %58 ], [ %102, %99 ]
  br i1 %59, label %68, label %99

68:                                               ; preds = %63
  %69 = mul nsw i64 %66, %61
  %70 = getelementptr inbounds i8, i8* %46, i64 %69
  %71 = mul nsw i64 %66, %60
  %72 = getelementptr inbounds i8, i8* %50, i64 %71
  %73 = sext i32 %67 to i64
  br label %74

74:                                               ; preds = %74, %68
  %75 = phi i32 [ %64, %68 ], [ %84, %74 ]
  %76 = phi i32 [ %65, %68 ], [ %86, %74 ]
  %77 = phi i64 [ 0, %68 ], [ %94, %74 ]
  %78 = phi i64 [ %73, %68 ], [ %93, %74 ]
  %79 = getelementptr inbounds i8, i8* %70, i64 %77
  %80 = getelementptr inbounds i8, i8* %72, i64 %77
  %81 = getelementptr inbounds [256 x i32], [256 x i32]* %12, i64 0, i64 %78
  %82 = getelementptr inbounds [256 x i32], [256 x i32]* %13, i64 0, i64 %78
  call void @aom_get8x8var_sse2(i8* %79, i32 %48, i8* %80, i32 %52, i32* %81, i32* %82) #4
  %83 = load i32, i32* %81, align 4
  %84 = add i32 %83, %75
  %85 = load i32, i32* %82, align 4
  %86 = add nsw i32 %85, %76
  %87 = sext i32 %85 to i64
  %88 = mul nsw i64 %87, %87
  %89 = lshr i64 %88, 6
  %90 = trunc i64 %89 to i32
  %91 = sub i32 %83, %90
  %92 = getelementptr inbounds [256 x i32], [256 x i32]* %14, i64 0, i64 %78
  store i32 %91, i32* %92, align 4
  %93 = add i64 %78, 1
  %94 = add nuw i64 %77, 8
  %95 = trunc i64 %94 to i32
  %96 = icmp sgt i32 %53, %95
  br i1 %96, label %74, label %97

97:                                               ; preds = %74
  %98 = trunc i64 %93 to i32
  br label %99

99:                                               ; preds = %97, %63
  %100 = phi i32 [ %84, %97 ], [ %64, %63 ]
  %101 = phi i32 [ %86, %97 ], [ %65, %63 ]
  %102 = phi i32 [ %98, %97 ], [ %67, %63 ]
  %103 = add nuw nsw i64 %66, 8
  %104 = icmp slt i64 %103, %62
  br i1 %104, label %63, label %105

105:                                              ; preds = %99, %9
  %106 = phi i32 [ 0, %9 ], [ %100, %99 ]
  %107 = phi i32 [ 0, %9 ], [ %101, %99 ]
  %108 = sext i32 %107 to i64
  %109 = mul nsw i64 %108, %108
  %110 = add nuw nsw i32 %39, 4
  %111 = zext i32 %110 to i64
  %112 = lshr i64 %109, %111
  %113 = trunc i64 %112 to i32
  %114 = sub i32 %106, %113
  %115 = zext i32 %106 to i64
  %116 = getelementptr inbounds %struct.RD_STATS, %struct.RD_STATS* %6, i64 0, i32 3
  store i64 %115, i64* %116, align 8
  %117 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 9, i32 26
  %118 = load i32, i32* %117, align 4
  %119 = icmp sgt i32 %118, 0
  br i1 %119, label %120, label %146

120:                                              ; preds = %105
  %121 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 0
  %122 = load %struct.AV1_PRIMARY*, %struct.AV1_PRIMARY** %121, align 16
  %123 = getelementptr inbounds %struct.AV1_PRIMARY, %struct.AV1_PRIMARY* %122, i64 0, i32 16
  %124 = load i32, i32* %123, align 8
  %125 = icmp eq i32 %124, 0
  br i1 %125, label %132, label %126

126:                                              ; preds = %120
  %127 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 75, i32 0
  %128 = load i32, i32* %127, align 16
  %129 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 75, i32 20
  %130 = load i32, i32* %129, align 8
  %131 = icmp slt i32 %128, %130
  br i1 %131, label %146, label %132

132:                                              ; preds = %120, %126
  %133 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 9, i32 30
  %134 = load i32, i32* %133, align 4
  %135 = icmp sgt i32 %134, 5
  br i1 %135, label %136, label %146

136:                                              ; preds = %132
  %137 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 83, i32 8
  %138 = load i32, i32* %137, align 4
  %139 = icmp slt i32 %107, 0
  %140 = sub nsw i32 0, %107
  %141 = select i1 %139, i32 %140, i32 %107
  %142 = lshr i32 %141, %39
  %143 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 75, i32 1
  %144 = load i32, i32* %143, align 4
  %145 = call i64 @av1_scale_acskip_thresh(i64 %31, i32 %138, i32 %142, i32 %144) #4
  br label %168

146:                                              ; preds = %126, %132, %105
  %147 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 9, i32 30
  %148 = load i32, i32* %147, align 4
  %149 = icmp slt i32 %107, 0
  %150 = sub nsw i32 0, %107
  %151 = select i1 %149, i32 %150, i32 %107
  %152 = lshr i32 %151, %39
  %153 = icmp sgt i32 %148, 7
  %154 = icmp slt i32 %152, 5
  %155 = and i1 %154, %153
  br i1 %155, label %156, label %165

156:                                              ; preds = %146
  %157 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 3
  %158 = load i32, i32* %157, align 4
  %159 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 2
  %160 = load i32, i32* %159, align 16
  %161 = icmp slt i32 %160, 641
  %162 = icmp slt i32 %158, 481
  %163 = and i1 %162, %161
  %164 = select i1 %163, i64 4, i64 2
  br label %165

165:                                              ; preds = %146, %156
  %166 = phi i64 [ %164, %156 ], [ 1, %146 ]
  %167 = mul nuw nsw i64 %166, %31
  br label %168

168:                                              ; preds = %165, %136
  %169 = phi i64 [ %145, %136 ], [ %167, %165 ]
  %170 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %4, i64 0, i32 57, i32 8
  %171 = load i8, i8* %170, align 4
  %172 = icmp eq i8 %171, 2
  br i1 %172, label %173, label %199

173:                                              ; preds = %168
  %174 = shl i32 %114, 1
  %175 = icmp ult i32 %174, %106
  br i1 %175, label %176, label %181

176:                                              ; preds = %173
  %177 = getelementptr inbounds [22 x i8], [22 x i8]* @max_txsize_lookup, i64 0, i64 %32
  %178 = load i8, i8* %177, align 1
  %179 = icmp ult i8 %178, 4
  %180 = select i1 %179, i8 %178, i8 4
  br label %181

181:                                              ; preds = %176, %173
  %182 = phi i8 [ %180, %176 ], [ 1, %173 ]
  %183 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 9, i32 5, i32 5
  %184 = load i8, i8* %183, align 8
  %185 = icmp eq i8 %184, 3
  br i1 %185, label %186, label %196

186:                                              ; preds = %181
  %187 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %4, i64 0, i32 2, i32 6
  %188 = load %struct.MB_MODE_INFO**, %struct.MB_MODE_INFO*** %187, align 8
  %189 = load %struct.MB_MODE_INFO*, %struct.MB_MODE_INFO** %188, align 8
  %190 = getelementptr inbounds %struct.MB_MODE_INFO, %struct.MB_MODE_INFO* %189, i64 0, i32 28
  %191 = load i16, i16* %190, align 1
  %192 = and i16 %191, 7
  %193 = zext i16 %192 to i32
  %194 = add nsw i32 %193, -1
  %195 = icmp ugt i32 %194, 1
  br i1 %195, label %196, label %207

196:                                              ; preds = %186, %181
  %197 = icmp ult i8 %182, 2
  %198 = select i1 %197, i8 %182, i8 2
  br label %207

199:                                              ; preds = %168
  %200 = getelementptr inbounds [22 x i8], [22 x i8]* @max_txsize_lookup, i64 0, i64 %32
  %201 = load i8, i8* %200, align 1
  %202 = zext i8 %171 to i64
  %203 = getelementptr inbounds [3 x i8], [3 x i8]* @tx_mode_to_biggest_tx_size, i64 0, i64 %202
  %204 = load i8, i8* %203, align 1
  %205 = icmp ult i8 %201, %204
  %206 = select i1 %205, i8 %201, i8 %204
  br label %207

207:                                              ; preds = %186, %196, %199
  %208 = phi i8 [ %206, %199 ], [ 1, %186 ], [ %198, %196 ]
  %209 = icmp ne i8 %171, 0
  %210 = icmp ugt i8 %1, 9
  %211 = and i1 %210, %209
  %212 = select i1 %211, i8 2, i8 %208
  %213 = icmp ult i8 %212, 2
  %214 = select i1 %213, i8 %212, i8 2
  %215 = icmp eq i8 %214, 0
  %216 = select i1 %215, i8 1, i8 %214
  %217 = getelementptr inbounds %struct.macroblockd, %struct.macroblockd* %5, i64 0, i32 6
  %218 = load %struct.MB_MODE_INFO**, %struct.MB_MODE_INFO*** %217, align 8
  %219 = load %struct.MB_MODE_INFO*, %struct.MB_MODE_INFO** %218, align 8
  %220 = getelementptr inbounds %struct.MB_MODE_INFO, %struct.MB_MODE_INFO* %219, i64 0, i32 24
  store i8 %216, i8* %220, align 1
  %221 = bitcast [64 x i32]* %15 to i8*
  call void @llvm.lifetime.start.p0i8(i64 256, i8* nonnull %221) #4
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %221, i8 0, i64 256, i1 false)
  %222 = bitcast [64 x i32]* %16 to i8*
  call void @llvm.lifetime.start.p0i8(i64 256, i8* nonnull %222) #4
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %222, i8 0, i64 256, i1 false)
  %223 = bitcast [16 x i32]* %17 to i8*
  call void @llvm.lifetime.start.p0i8(i64 64, i8* nonnull %223) #4
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %223, i8 0, i64 64, i1 false)
  %224 = bitcast [16 x i32]* %18 to i8*
  call void @llvm.lifetime.start.p0i8(i64 64, i8* nonnull %224) #4
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %224, i8 0, i64 64, i1 false)
  %225 = icmp eq i8 %216, 1
  br i1 %225, label %230, label %226

226:                                              ; preds = %207
  %227 = icmp eq i8 %216, 2
  %228 = select i1 %227, i32 2, i32 4
  %229 = ashr i32 %41, %228
  br label %230

230:                                              ; preds = %207, %226
  %231 = phi i32 [ %229, %226 ], [ %41, %207 ]
  %232 = icmp eq i8 %216, 2
  %233 = getelementptr inbounds [64 x i32], [64 x i32]* %15, i64 0, i64 0
  %234 = getelementptr inbounds [16 x i32], [16 x i32]* %17, i64 0, i64 0
  %235 = select i1 %232, i32* %233, i32* %234
  %236 = select i1 %225, i32* %55, i32* %235
  %237 = getelementptr inbounds [64 x i32], [64 x i32]* %16, i64 0, i64 0
  %238 = getelementptr inbounds [16 x i32], [16 x i32]* %18, i64 0, i64 0
  %239 = select i1 %232, i32* %237, i32* %238
  %240 = select i1 %225, i32* %56, i32* %239
  %241 = icmp ugt i8 %216, 1
  br i1 %241, label %242, label %306

242:                                              ; preds = %230
  %243 = add nsw i32 %35, -1
  %244 = add nsw i32 %38, -1
  %245 = shl i32 1, %244
  %246 = icmp eq i32 %244, 31
  br i1 %246, label %306, label %247

247:                                              ; preds = %242
  %248 = shl i32 1, %243
  %249 = icmp eq i32 %243, 31
  %250 = sext i32 %248 to i64
  br label %251

251:                                              ; preds = %302, %247
  %252 = phi i32 [ 0, %247 ], [ %303, %302 ]
  %253 = phi i32 [ 0, %247 ], [ %304, %302 ]
  br i1 %249, label %302, label %254

254:                                              ; preds = %251
  %255 = shl i32 %253, %243
  %256 = or i32 %253, 1
  %257 = shl i32 %256, %243
  %258 = sext i32 %252 to i64
  %259 = sext i32 %257 to i64
  %260 = sext i32 %255 to i64
  br label %261

261:                                              ; preds = %261, %254
  %262 = phi i64 [ 0, %254 ], [ %298, %261 ]
  %263 = phi i64 [ %258, %254 ], [ %297, %261 ]
  %264 = add nsw i64 %262, %260
  %265 = getelementptr inbounds [256 x i32], [256 x i32]* %12, i64 0, i64 %264
  %266 = load i32, i32* %265, align 4
  %267 = add nsw i64 %264, 1
  %268 = getelementptr inbounds [256 x i32], [256 x i32]* %12, i64 0, i64 %267
  %269 = load i32, i32* %268, align 4
  %270 = add i32 %269, %266
  %271 = add nsw i64 %262, %259
  %272 = getelementptr inbounds [256 x i32], [256 x i32]* %12, i64 0, i64 %271
  %273 = load i32, i32* %272, align 4
  %274 = add i32 %270, %273
  %275 = add nsw i64 %271, 1
  %276 = getelementptr inbounds [256 x i32], [256 x i32]* %12, i64 0, i64 %275
  %277 = load i32, i32* %276, align 4
  %278 = add i32 %274, %277
  %279 = getelementptr inbounds [64 x i32], [64 x i32]* %15, i64 0, i64 %263
  store i32 %278, i32* %279, align 4
  %280 = getelementptr inbounds [256 x i32], [256 x i32]* %13, i64 0, i64 %264
  %281 = load i32, i32* %280, align 4
  %282 = getelementptr inbounds [256 x i32], [256 x i32]* %13, i64 0, i64 %267
  %283 = load i32, i32* %282, align 4
  %284 = add nsw i32 %283, %281
  %285 = getelementptr inbounds [256 x i32], [256 x i32]* %13, i64 0, i64 %271
  %286 = load i32, i32* %285, align 4
  %287 = add nsw i32 %284, %286
  %288 = getelementptr inbounds [256 x i32], [256 x i32]* %13, i64 0, i64 %275
  %289 = load i32, i32* %288, align 4
  %290 = add nsw i32 %287, %289
  %291 = sext i32 %290 to i64
  %292 = mul nsw i64 %291, %291
  %293 = lshr i64 %292, 8
  %294 = trunc i64 %293 to i32
  %295 = sub i32 %278, %294
  %296 = getelementptr inbounds [64 x i32], [64 x i32]* %16, i64 0, i64 %263
  store i32 %295, i32* %296, align 4
  %297 = add nsw i64 %263, 1
  %298 = add nuw nsw i64 %262, 2
  %299 = icmp slt i64 %298, %250
  br i1 %299, label %261, label %300

300:                                              ; preds = %261
  %301 = trunc i64 %297 to i32
  br label %302

302:                                              ; preds = %300, %251
  %303 = phi i32 [ %252, %251 ], [ %301, %300 ]
  %304 = add nuw nsw i32 %253, 2
  %305 = icmp slt i32 %304, %245
  br i1 %305, label %251, label %306

306:                                              ; preds = %302, %230, %242
  store i32 0, i32* %7, align 4
  %307 = icmp sgt i32 %231, 0
  br i1 %307, label %308, label %340

308:                                              ; preds = %306
  %309 = icmp eq i32 %114, 0
  %310 = zext i32 %231 to i64
  br label %313

311:                                              ; preds = %313
  %312 = icmp eq i64 %320, %310
  br i1 %312, label %321, label %313

313:                                              ; preds = %311, %308
  %314 = phi i64 [ 0, %308 ], [ %320, %311 ]
  %315 = getelementptr inbounds i32, i32* %240, i64 %314
  %316 = load i32, i32* %315, align 4
  %317 = zext i32 %316 to i64
  %318 = icmp sgt i64 %169, %317
  %319 = or i1 %309, %318
  %320 = add nuw nsw i64 %314, 1
  br i1 %319, label %311, label %321

321:                                              ; preds = %313, %311
  %322 = phi i32 [ 1, %311 ], [ 0, %313 ]
  br i1 %307, label %323, label %338

323:                                              ; preds = %321
  %324 = icmp eq i32 %113, 0
  %325 = zext i32 %231 to i64
  br label %328

326:                                              ; preds = %328
  %327 = icmp eq i64 %337, %325
  br i1 %327, label %338, label %328

328:                                              ; preds = %326, %323
  %329 = phi i64 [ 0, %323 ], [ %337, %326 ]
  %330 = getelementptr inbounds i32, i32* %236, i64 %329
  %331 = load i32, i32* %330, align 4
  %332 = getelementptr inbounds i32, i32* %240, i64 %329
  %333 = load i32, i32* %332, align 4
  %334 = sub i32 %331, %333
  %335 = icmp ult i32 %334, %28
  %336 = or i1 %324, %335
  %337 = add nuw nsw i64 %329, 1
  br i1 %336, label %326, label %402

338:                                              ; preds = %326, %321
  %339 = icmp eq i32 %322, 0
  br i1 %339, label %402, label %340

340:                                              ; preds = %306, %338
  %341 = bitcast [2 x i32]* %19 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %341) #4
  %342 = getelementptr inbounds [2 x i32], [2 x i32]* %19, i64 0, i64 0
  store i32 -1431655766, i32* %342, align 4
  %343 = getelementptr inbounds [2 x i32], [2 x i32]* %19, i64 0, i64 1
  store i32 -1431655766, i32* %343, align 4
  %344 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8
  %345 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 0
  %346 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %4, i64 0, i32 59, i64 0
  %347 = load i8, i8* %346, align 1
  %348 = icmp eq i8 %347, 0
  br i1 %348, label %391, label %349

349:                                              ; preds = %340
  %350 = getelementptr inbounds %struct.macroblockd, %struct.macroblockd* %5, i64 0, i32 4, i64 1, i32 1
  %351 = load i32, i32* %350, align 4
  %352 = getelementptr inbounds %struct.macroblockd, %struct.macroblockd* %5, i64 0, i32 4, i64 1, i32 2
  %353 = load i32, i32* %352, align 8
  %354 = sext i32 %351 to i64
  %355 = sext i32 %353 to i64
  %356 = getelementptr inbounds [22 x [2 x [2 x i8]]], [22 x [2 x [2 x i8]]]* @ss_size_lookup, i64 0, i64 %32, i64 %354, i64 %355
  %357 = load i8, i8* %356, align 1
  %358 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %4, i64 0, i32 0, i64 1, i32 13
  %359 = load i16*, i16** %358, align 8
  %360 = load i16, i16* %359, align 2
  %361 = sext i16 %360 to i32
  %362 = getelementptr inbounds i16, i16* %359, i64 1
  %363 = load i16, i16* %362, align 2
  %364 = sext i16 %363 to i32
  %365 = mul nsw i32 %364, %364
  %366 = lshr i32 %365, 3
  call void @av1_enc_build_inter_predictor(%struct.AV1Common* %344, %struct.macroblockd* %5, i32 %2, i32 %3, %struct.BUFFER_SET* null, i8 zeroext %1, i32 1, i32 1) #4
  %367 = load %struct.AV1_PRIMARY*, %struct.AV1_PRIMARY** %345, align 16
  %368 = zext i8 %357 to i64
  %369 = getelementptr inbounds %struct.AV1_PRIMARY, %struct.AV1_PRIMARY* %367, i64 0, i32 21, i64 %368, i32 3
  %370 = load i32 (i8*, i32, i8*, i32, i32*)*, i32 (i8*, i32, i8*, i32, i32*)** %369, align 8
  %371 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %4, i64 0, i32 0, i64 1, i32 6, i32 0
  %372 = load i8*, i8** %371, align 8
  %373 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %4, i64 0, i32 0, i64 1, i32 6, i32 4
  %374 = load i32, i32* %373, align 8
  %375 = getelementptr inbounds %struct.macroblockd, %struct.macroblockd* %5, i64 0, i32 4, i64 1, i32 3, i32 0
  %376 = load i8*, i8** %375, align 8
  %377 = getelementptr inbounds %struct.macroblockd, %struct.macroblockd* %5, i64 0, i32 4, i64 1, i32 3, i32 4
  %378 = load i32, i32* %377, align 8
  %379 = call i32 %370(i8* %372, i32 %374, i8* %376, i32 %378, i32* nonnull %342) #4
  %380 = icmp ult i32 %379, %366
  %381 = icmp eq i32 %379, 0
  %382 = or i1 %380, %381
  br i1 %382, label %383, label %395

383:                                              ; preds = %349
  %384 = mul nsw i32 %361, %361
  %385 = lshr i32 %384, 3
  %386 = load i32, i32* %342, align 4
  %387 = sub i32 %386, %379
  %388 = icmp ult i32 %387, %385
  %389 = icmp eq i32 %386, %379
  %390 = or i1 %389, %388
  br i1 %390, label %391, label %395

391:                                              ; preds = %383, %340
  %392 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %4, i64 0, i32 59, i64 1
  %393 = load i8, i8* %392, align 1
  %394 = icmp eq i8 %393, 0
  br i1 %394, label %531, label %489

395:                                              ; preds = %531, %523, %489, %349, %383
  %396 = phi i32 [ 1, %531 ], [ 0, %523 ], [ 0, %489 ], [ 0, %349 ], [ 0, %383 ]
  %397 = phi i32 [ 1, %531 ], [ 1, %523 ], [ 1, %489 ], [ 0, %349 ], [ 0, %383 ]
  %398 = and i32 %396, %397
  %399 = icmp eq i32 %398, 0
  br i1 %399, label %401, label %400

400:                                              ; preds = %395
  store i32 1, i32* %7, align 4
  br label %401

401:                                              ; preds = %395, %400
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %341) #4
  br label %402

402:                                              ; preds = %328, %338, %401
  call void @llvm.lifetime.end.p0i8(i64 64, i8* nonnull %224) #4
  call void @llvm.lifetime.end.p0i8(i64 64, i8* nonnull %223) #4
  call void @llvm.lifetime.end.p0i8(i64 256, i8* nonnull %222) #4
  call void @llvm.lifetime.end.p0i8(i64 256, i8* nonnull %221) #4
  %403 = icmp eq i32 %8, 0
  br i1 %403, label %488, label %404

404:                                              ; preds = %402
  %405 = load i32, i32* %7, align 4
  %406 = icmp eq i32 %405, 0
  br i1 %406, label %407, label %483

407:                                              ; preds = %404
  %408 = getelementptr inbounds %struct.RD_STATS, %struct.RD_STATS* %6, i64 0, i32 0
  %409 = getelementptr inbounds %struct.RD_STATS, %struct.RD_STATS* %6, i64 0, i32 1
  %410 = load i16*, i16** %20, align 8
  %411 = getelementptr inbounds i16, i16* %410, i64 1
  %412 = load i16, i16* %411, align 2
  %413 = icmp sgt i16 %412, 15
  %414 = ashr i16 %412, 3
  %415 = sitofp i16 %414 to double
  %416 = select i1 %413, double %415, double 1.000000e+00
  %417 = icmp eq i32 %106, 0
  br i1 %417, label %418, label %424

418:                                              ; preds = %407
  %419 = icmp eq %struct.RD_STATS* %6, null
  br i1 %419, label %421, label %420

420:                                              ; preds = %418
  store i32 0, i32* %408, align 4
  br label %421

421:                                              ; preds = %420, %418
  %422 = icmp eq i64* %409, null
  br i1 %422, label %480, label %423

423:                                              ; preds = %421
  store i64 0, i64* %409, align 8
  br label %480

424:                                              ; preds = %407
  %425 = getelementptr inbounds [22 x i8], [22 x i8]* @block_size_wide, i64 0, i64 %32
  %426 = load i8, i8* %425, align 1
  %427 = zext i8 %426 to i32
  %428 = getelementptr inbounds [22 x i8], [22 x i8]* @block_size_high, i64 0, i64 %32
  %429 = load i8, i8* %428, align 1
  %430 = zext i8 %429 to i32
  %431 = mul nuw nsw i32 %430, %427
  %432 = uitofp i32 %106 to double
  %433 = sitofp i32 %431 to double
  %434 = fdiv double %432, %433
  %435 = fmul double %416, %416
  %436 = fdiv double %434, %435
  %437 = call double @log2(double %436) #4
  %438 = bitcast double* %10 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %438) #4
  store double 0xFFFFFFFFFFFFFFFF, double* %10, align 8
  %439 = bitcast double* %11 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %439) #4
  store double 0xFFFFFFFFFFFFFFFF, double* %11, align 8
  call void @av1_model_rd_curvfit(i8 zeroext %1, double %434, double %437, double* nonnull %10, double* nonnull %11) #4
  %440 = load double, double* %11, align 8
  %441 = fmul double %434, %440
  %442 = load double, double* %10, align 8
  %443 = fmul double %442, %433
  %444 = fcmp olt double %443, 0.000000e+00
  %445 = fadd double %443, 5.000000e-01
  %446 = fptosi double %445 to i32
  %447 = fmul double %441, %433
  %448 = fcmp olt double %447, 0.000000e+00
  %449 = fadd double %447, 5.000000e-01
  %450 = fptosi double %449 to i64
  %451 = select i1 %448, i64 0, i64 %450
  %452 = icmp eq i32 %446, 0
  %453 = or i1 %444, %452
  br i1 %453, label %454, label %456

454:                                              ; preds = %424
  %455 = shl nuw nsw i64 %115, 4
  br label %471

456:                                              ; preds = %424
  %457 = sext i32 %446 to i64
  %458 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %4, i64 0, i32 17
  %459 = load i32, i32* %458, align 8
  %460 = sext i32 %459 to i64
  %461 = mul nsw i64 %460, %457
  %462 = add nsw i64 %461, 256
  %463 = ashr i64 %462, 9
  %464 = shl i64 %451, 7
  %465 = add nsw i64 %463, %464
  %466 = shl nuw nsw i64 %115, 11
  %467 = icmp slt i64 %465, %466
  %468 = shl nuw nsw i64 %115, 4
  %469 = select i1 %467, i32 %446, i32 0
  %470 = select i1 %467, i64 %451, i64 %468
  br label %471

471:                                              ; preds = %456, %454
  %472 = phi i32 [ 0, %454 ], [ %469, %456 ]
  %473 = phi i64 [ %455, %454 ], [ %470, %456 ]
  %474 = icmp eq %struct.RD_STATS* %6, null
  br i1 %474, label %476, label %475

475:                                              ; preds = %471
  store i32 %472, i32* %408, align 4
  br label %476

476:                                              ; preds = %475, %471
  %477 = icmp eq i64* %409, null
  br i1 %477, label %479, label %478

478:                                              ; preds = %476
  store i64 %473, i64* %409, align 8
  br label %479

479:                                              ; preds = %478, %476
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %439) #4
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %438) #4
  br label %480

480:                                              ; preds = %479, %423, %421
  %481 = load i32, i32* %7, align 4
  %482 = icmp eq i32 %481, 0
  br i1 %482, label %488, label %483

483:                                              ; preds = %404, %480
  %484 = getelementptr inbounds %struct.RD_STATS, %struct.RD_STATS* %6, i64 0, i32 0
  store i32 0, i32* %484, align 8
  %485 = shl i32 %106, 4
  %486 = zext i32 %485 to i64
  %487 = getelementptr inbounds %struct.RD_STATS, %struct.RD_STATS* %6, i64 0, i32 1
  store i64 %486, i64* %487, align 8
  br label %488

488:                                              ; preds = %480, %402, %483
  call void @llvm.lifetime.end.p0i8(i64 1024, i8* nonnull %44) #4
  call void @llvm.lifetime.end.p0i8(i64 1024, i8* nonnull %43) #4
  call void @llvm.lifetime.end.p0i8(i64 1024, i8* nonnull %42) #4
  ret void

489:                                              ; preds = %391
  %490 = getelementptr inbounds %struct.macroblockd, %struct.macroblockd* %5, i64 0, i32 4, i64 2, i32 1
  %491 = load i32, i32* %490, align 4
  %492 = getelementptr inbounds %struct.macroblockd, %struct.macroblockd* %5, i64 0, i32 4, i64 2, i32 2
  %493 = load i32, i32* %492, align 8
  %494 = sext i32 %491 to i64
  %495 = sext i32 %493 to i64
  %496 = getelementptr inbounds [22 x [2 x [2 x i8]]], [22 x [2 x [2 x i8]]]* @ss_size_lookup, i64 0, i64 %32, i64 %494, i64 %495
  %497 = load i8, i8* %496, align 1
  %498 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %4, i64 0, i32 0, i64 2, i32 13
  %499 = load i16*, i16** %498, align 8
  %500 = load i16, i16* %499, align 2
  %501 = sext i16 %500 to i32
  %502 = getelementptr inbounds i16, i16* %499, i64 1
  %503 = load i16, i16* %502, align 2
  %504 = sext i16 %503 to i32
  %505 = mul nsw i32 %504, %504
  %506 = lshr i32 %505, 3
  call void @av1_enc_build_inter_predictor(%struct.AV1Common* %344, %struct.macroblockd* %5, i32 %2, i32 %3, %struct.BUFFER_SET* null, i8 zeroext %1, i32 2, i32 2) #4
  %507 = load %struct.AV1_PRIMARY*, %struct.AV1_PRIMARY** %345, align 16
  %508 = zext i8 %497 to i64
  %509 = getelementptr inbounds %struct.AV1_PRIMARY, %struct.AV1_PRIMARY* %507, i64 0, i32 21, i64 %508, i32 3
  %510 = load i32 (i8*, i32, i8*, i32, i32*)*, i32 (i8*, i32, i8*, i32, i32*)** %509, align 8
  %511 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %4, i64 0, i32 0, i64 2, i32 6, i32 0
  %512 = load i8*, i8** %511, align 8
  %513 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %4, i64 0, i32 0, i64 2, i32 6, i32 4
  %514 = load i32, i32* %513, align 8
  %515 = getelementptr inbounds %struct.macroblockd, %struct.macroblockd* %5, i64 0, i32 4, i64 2, i32 3, i32 0
  %516 = load i8*, i8** %515, align 8
  %517 = getelementptr inbounds %struct.macroblockd, %struct.macroblockd* %5, i64 0, i32 4, i64 2, i32 3, i32 4
  %518 = load i32, i32* %517, align 8
  %519 = call i32 %510(i8* %512, i32 %514, i8* %516, i32 %518, i32* %343) #4
  %520 = icmp ult i32 %519, %506
  %521 = icmp eq i32 %519, 0
  %522 = or i1 %520, %521
  br i1 %522, label %523, label %395

523:                                              ; preds = %489
  %524 = mul nsw i32 %501, %501
  %525 = lshr i32 %524, 3
  %526 = load i32, i32* %343, align 4
  %527 = sub i32 %526, %519
  %528 = icmp ult i32 %527, %525
  %529 = icmp eq i32 %526, %519
  %530 = or i1 %529, %528
  br i1 %530, label %531, label %395

531:                                              ; preds = %523, %391
  br label %395
}

; Function Attrs: nounwind ssp uwtable
define internal fastcc void @model_rd_for_sb_y(%struct.AV1_COMP* nocapture readonly, i8 zeroext, %struct.macroblock* nocapture, %struct.macroblockd* nocapture readonly, %struct.RD_STATS* nocapture, i32) unnamed_addr #0 {
  %7 = alloca double, align 8
  %8 = alloca double, align 8
  %9 = alloca i32, align 4
  %10 = getelementptr inbounds %struct.macroblockd, %struct.macroblockd* %3, i64 0, i32 6
  %11 = load %struct.MB_MODE_INFO**, %struct.MB_MODE_INFO*** %10, align 8
  %12 = load %struct.MB_MODE_INFO*, %struct.MB_MODE_INFO** %11, align 8
  %13 = getelementptr inbounds %struct.MB_MODE_INFO, %struct.MB_MODE_INFO* %12, i64 0, i32 6, i64 0
  %14 = load i8, i8* %13, align 8
  %15 = bitcast i32* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %15) #4
  store i32 -1431655766, i32* %9, align 4
  %16 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 0
  %17 = load %struct.AV1_PRIMARY*, %struct.AV1_PRIMARY** %16, align 16
  %18 = zext i8 %1 to i64
  %19 = getelementptr inbounds %struct.AV1_PRIMARY, %struct.AV1_PRIMARY* %17, i64 0, i32 21, i64 %18, i32 3
  %20 = load i32 (i8*, i32, i8*, i32, i32*)*, i32 (i8*, i32, i8*, i32, i32*)** %19, align 8
  %21 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %2, i64 0, i32 0, i64 0, i32 6, i32 0
  %22 = load i8*, i8** %21, align 8
  %23 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %2, i64 0, i32 0, i64 0, i32 6, i32 4
  %24 = load i32, i32* %23, align 8
  %25 = getelementptr inbounds %struct.macroblockd, %struct.macroblockd* %3, i64 0, i32 4, i64 0, i32 3, i32 0
  %26 = load i8*, i8** %25, align 8
  %27 = getelementptr inbounds %struct.macroblockd, %struct.macroblockd* %3, i64 0, i32 4, i64 0, i32 3, i32 4
  %28 = load i32, i32* %27, align 8
  %29 = call i32 %20(i8* %22, i32 %24, i8* %26, i32 %28, i32* nonnull %9) #4
  %30 = load i32, i32* %9, align 4
  %31 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %2, i64 0, i32 57, i32 8
  %32 = load i8, i8* %31, align 4
  %33 = icmp eq i8 %32, 2
  br i1 %33, label %34, label %60

34:                                               ; preds = %6
  %35 = shl i32 %29, 1
  %36 = icmp ult i32 %35, %30
  br i1 %36, label %37, label %42

37:                                               ; preds = %34
  %38 = getelementptr inbounds [22 x i8], [22 x i8]* @max_txsize_lookup, i64 0, i64 %18
  %39 = load i8, i8* %38, align 1
  %40 = icmp ult i8 %39, 4
  %41 = select i1 %40, i8 %39, i8 4
  br label %42

42:                                               ; preds = %37, %34
  %43 = phi i8 [ %41, %37 ], [ 1, %34 ]
  %44 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 9, i32 5, i32 5
  %45 = load i8, i8* %44, align 8
  %46 = icmp eq i8 %45, 3
  br i1 %46, label %47, label %57

47:                                               ; preds = %42
  %48 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %2, i64 0, i32 2, i32 6
  %49 = load %struct.MB_MODE_INFO**, %struct.MB_MODE_INFO*** %48, align 8
  %50 = load %struct.MB_MODE_INFO*, %struct.MB_MODE_INFO** %49, align 8
  %51 = getelementptr inbounds %struct.MB_MODE_INFO, %struct.MB_MODE_INFO* %50, i64 0, i32 28
  %52 = load i16, i16* %51, align 1
  %53 = and i16 %52, 7
  %54 = zext i16 %53 to i32
  %55 = add nsw i32 %54, -1
  %56 = icmp ugt i32 %55, 1
  br i1 %56, label %57, label %68

57:                                               ; preds = %47, %42
  %58 = icmp ult i8 %43, 2
  %59 = select i1 %58, i8 %43, i8 2
  br label %68

60:                                               ; preds = %6
  %61 = getelementptr inbounds [22 x i8], [22 x i8]* @max_txsize_lookup, i64 0, i64 %18
  %62 = load i8, i8* %61, align 1
  %63 = zext i8 %32 to i64
  %64 = getelementptr inbounds [3 x i8], [3 x i8]* @tx_mode_to_biggest_tx_size, i64 0, i64 %63
  %65 = load i8, i8* %64, align 1
  %66 = icmp ult i8 %62, %65
  %67 = select i1 %66, i8 %62, i8 %65
  br label %68

68:                                               ; preds = %47, %57, %60
  %69 = phi i8 [ %67, %60 ], [ 1, %47 ], [ %59, %57 ]
  %70 = icmp ne i8 %32, 0
  %71 = icmp ugt i8 %1, 9
  %72 = and i1 %71, %70
  %73 = select i1 %72, i8 2, i8 %69
  %74 = icmp ult i8 %73, 2
  %75 = select i1 %74, i8 %73, i8 2
  %76 = load %struct.MB_MODE_INFO**, %struct.MB_MODE_INFO*** %10, align 8
  %77 = load %struct.MB_MODE_INFO*, %struct.MB_MODE_INFO** %76, align 8
  %78 = getelementptr inbounds %struct.MB_MODE_INFO, %struct.MB_MODE_INFO* %77, i64 0, i32 24
  store i8 %75, i8* %78, align 1
  %79 = icmp eq i32 %5, 0
  br i1 %79, label %142, label %80

80:                                               ; preds = %68
  %81 = zext i32 %30 to i64
  %82 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %2, i64 0, i32 0, i64 0, i32 13
  %83 = load i16*, i16** %82, align 8
  %84 = getelementptr inbounds i16, i16* %83, i64 1
  %85 = load i16, i16* %84, align 2
  %86 = icmp sgt i16 %85, 15
  %87 = ashr i16 %85, 3
  %88 = sitofp i16 %87 to double
  %89 = select i1 %86, double %88, double 1.000000e+00
  %90 = icmp eq i32 %30, 0
  br i1 %90, label %142, label %91

91:                                               ; preds = %80
  %92 = getelementptr inbounds [22 x i8], [22 x i8]* @block_size_wide, i64 0, i64 %18
  %93 = load i8, i8* %92, align 1
  %94 = zext i8 %93 to i32
  %95 = getelementptr inbounds [22 x i8], [22 x i8]* @block_size_high, i64 0, i64 %18
  %96 = load i8, i8* %95, align 1
  %97 = zext i8 %96 to i32
  %98 = mul nuw nsw i32 %97, %94
  %99 = uitofp i32 %30 to double
  %100 = sitofp i32 %98 to double
  %101 = fdiv double %99, %100
  %102 = fmul double %89, %89
  %103 = fdiv double %101, %102
  %104 = call double @log2(double %103) #4
  %105 = bitcast double* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %105) #4
  store double 0xFFFFFFFFFFFFFFFF, double* %7, align 8
  %106 = bitcast double* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %106) #4
  store double 0xFFFFFFFFFFFFFFFF, double* %8, align 8
  call void @av1_model_rd_curvfit(i8 zeroext %1, double %101, double %104, double* nonnull %7, double* nonnull %8) #4
  %107 = load double, double* %8, align 8
  %108 = fmul double %101, %107
  %109 = load double, double* %7, align 8
  %110 = fmul double %109, %100
  %111 = fcmp olt double %110, 0.000000e+00
  %112 = fadd double %110, 5.000000e-01
  %113 = fptosi double %112 to i32
  %114 = fmul double %108, %100
  %115 = fcmp olt double %114, 0.000000e+00
  %116 = fadd double %114, 5.000000e-01
  %117 = fptosi double %116 to i64
  %118 = select i1 %115, i64 0, i64 %117
  %119 = icmp eq i32 %113, 0
  %120 = or i1 %111, %119
  br i1 %120, label %121, label %123

121:                                              ; preds = %91
  %122 = shl nuw nsw i64 %81, 4
  br label %138

123:                                              ; preds = %91
  %124 = sext i32 %113 to i64
  %125 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %2, i64 0, i32 17
  %126 = load i32, i32* %125, align 8
  %127 = sext i32 %126 to i64
  %128 = mul nsw i64 %127, %124
  %129 = add nsw i64 %128, 256
  %130 = ashr i64 %129, 9
  %131 = shl i64 %118, 7
  %132 = add nsw i64 %130, %131
  %133 = shl nuw nsw i64 %81, 11
  %134 = icmp slt i64 %132, %133
  %135 = shl nuw nsw i64 %81, 4
  %136 = select i1 %134, i32 %113, i32 0
  %137 = select i1 %134, i64 %118, i64 %135
  br label %138

138:                                              ; preds = %123, %121
  %139 = phi i32 [ 0, %121 ], [ %136, %123 ]
  %140 = phi i64 [ %122, %121 ], [ %137, %123 ]
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %106) #4
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %105) #4
  %141 = load i32, i32* %9, align 4
  br label %142

142:                                              ; preds = %68, %138, %80
  %143 = phi i32 [ %141, %138 ], [ 0, %80 ], [ %30, %68 ]
  %144 = phi i32 [ %139, %138 ], [ 0, %80 ], [ 2147483647, %68 ]
  %145 = phi i64 [ %140, %138 ], [ 0, %80 ], [ 2147483647, %68 ]
  %146 = zext i32 %143 to i64
  %147 = getelementptr inbounds %struct.RD_STATS, %struct.RD_STATS* %4, i64 0, i32 3
  store i64 %146, i64* %147, align 8
  %148 = sext i8 %14 to i64
  %149 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %2, i64 0, i32 61, i64 %148
  store i32 %143, i32* %149, align 4
  %150 = icmp eq i32 %144, 0
  %151 = zext i1 %150 to i32
  %152 = getelementptr inbounds %struct.RD_STATS, %struct.RD_STATS* %4, i64 0, i32 4
  store i32 %151, i32* %152, align 8
  %153 = getelementptr inbounds %struct.RD_STATS, %struct.RD_STATS* %4, i64 0, i32 0
  store i32 %144, i32* %153, align 8
  %154 = getelementptr inbounds %struct.RD_STATS, %struct.RD_STATS* %4, i64 0, i32 1
  store i64 %145, i64* %154, align 8
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %15) #4
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal fastcc void @block_yrd(%struct.macroblock* readonly, %struct.RD_STATS* nocapture, i32* nocapture, i8 zeroext, i8 zeroext) unnamed_addr #0 {
  %6 = zext i8 %3 to i64
  %7 = getelementptr inbounds [22 x i8], [22 x i8]* @mi_size_wide, i64 0, i64 %6
  %8 = load i8, i8* %7, align 1
  %9 = zext i8 %8 to i32
  %10 = getelementptr inbounds [22 x i8], [22 x i8]* @mi_size_high, i64 0, i64 %6
  %11 = load i8, i8* %10, align 1
  %12 = zext i8 %11 to i32
  %13 = zext i8 %4 to i32
  %14 = shl nuw nsw i32 %13, 1
  %15 = shl i32 1, %14
  %16 = shl i32 1, %13
  %17 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %0, i64 0, i32 2, i32 18
  %18 = load i32, i32* %17, align 8
  %19 = icmp sgt i32 %18, -1
  %20 = ashr i32 %18, 5
  %21 = select i1 %19, i32 0, i32 %20
  %22 = add nsw i32 %21, %9
  %23 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %0, i64 0, i32 2, i32 20
  %24 = load i32, i32* %23, align 16
  %25 = icmp sgt i32 %24, -1
  %26 = ashr i32 %24, 5
  %27 = select i1 %25, i32 0, i32 %26
  %28 = add nsw i32 %27, %12
  %29 = shl nuw nsw i32 %9, 2
  %30 = shl nuw nsw i32 %12, 2
  %31 = load void (i32, i32, i16*, i64, i8*, i64, i8*, i64)*, void (i32, i32, i16*, i64, i8*, i64, i8*, i64)** @aom_subtract_block, align 8
  %32 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %0, i64 0, i32 0, i64 0, i32 0
  %33 = load i16*, i16** %32, align 8
  %34 = zext i32 %29 to i64
  %35 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %0, i64 0, i32 0, i64 0, i32 6, i32 0
  %36 = load i8*, i8** %35, align 8
  %37 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %0, i64 0, i32 0, i64 0, i32 6, i32 4
  %38 = load i32, i32* %37, align 8
  %39 = sext i32 %38 to i64
  %40 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %0, i64 0, i32 2, i32 4, i64 0, i32 3, i32 0
  %41 = load i8*, i8** %40, align 8
  %42 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %0, i64 0, i32 2, i32 4, i64 0, i32 3, i32 4
  %43 = load i32, i32* %42, align 8
  %44 = sext i32 %43 to i64
  tail call void %31(i32 %30, i32 %29, i16* %33, i64 %34, i8* %36, i64 %39, i8* %41, i64 %44) #4
  store i32 1, i32* %2, align 4
  %45 = icmp sgt i32 %28, 0
  br i1 %45, label %46, label %73

46:                                               ; preds = %5
  %47 = zext i8 %4 to i64
  %48 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %0, i64 0, i32 0, i64 0, i32 3
  %49 = bitcast i32** %48 to i16**
  %50 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %0, i64 0, i32 0, i64 0, i32 2
  %51 = bitcast i32** %50 to i16**
  %52 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %0, i64 0, i32 0, i64 0, i32 1
  %53 = bitcast i32** %52 to i16**
  %54 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %0, i64 0, i32 0, i64 0, i32 4
  %55 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %0, i64 0, i32 0, i64 0, i32 8
  %56 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %0, i64 0, i32 0, i64 0, i32 7
  %57 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %0, i64 0, i32 0, i64 0, i32 13
  %58 = getelementptr inbounds [19 x [16 x %struct.SCAN_ORDER]], [19 x [16 x %struct.SCAN_ORDER]]* @av1_scan_orders, i64 0, i64 %47, i64 0, i32 0
  %59 = sext i32 %16 to i64
  %60 = zext i8 %8 to i64
  %61 = sext i32 %22 to i64
  %62 = sext i32 %15 to i64
  %63 = zext i32 %29 to i64
  %64 = sext i32 %28 to i64
  br label %65

65:                                               ; preds = %81, %46
  %66 = phi i32 [ 1, %46 ], [ %135, %81 ]
  %67 = phi i64 [ 0, %46 ], [ %82, %81 ]
  %68 = phi i32 [ 0, %46 ], [ %136, %81 ]
  %69 = phi i64 [ 0, %46 ], [ %137, %81 ]
  %70 = mul nsw i64 %67, %63
  %71 = shl i64 %69, 32
  %72 = ashr exact i64 %71, 32
  br label %84

73:                                               ; preds = %81, %5
  %74 = phi i32 [ 1, %5 ], [ %135, %81 ]
  %75 = phi i32 [ 0, %5 ], [ %136, %81 ]
  %76 = getelementptr inbounds %struct.RD_STATS, %struct.RD_STATS* %1, i64 0, i32 4
  store i32 %74, i32* %76, align 8
  %77 = getelementptr inbounds %struct.RD_STATS, %struct.RD_STATS* %1, i64 0, i32 0
  store i32 0, i32* %77, align 8
  %78 = getelementptr inbounds %struct.RD_STATS, %struct.RD_STATS* %1, i64 0, i32 3
  %79 = load i64, i64* %78, align 8
  %80 = icmp eq i64 %79, 9223372036854775807
  br i1 %80, label %147, label %140

81:                                               ; preds = %134
  %82 = add i64 %67, %59
  %83 = icmp slt i64 %82, %64
  br i1 %83, label %65, label %73

84:                                               ; preds = %65, %134
  %85 = phi i32 [ %66, %65 ], [ %135, %134 ]
  %86 = phi i64 [ %72, %65 ], [ %137, %134 ]
  %87 = phi i64 [ 0, %65 ], [ %138, %134 ]
  %88 = phi i32 [ %68, %65 ], [ %136, %134 ]
  %89 = icmp slt i64 %87, %61
  br i1 %89, label %90, label %134

90:                                               ; preds = %84
  %91 = trunc i64 %86 to i32
  %92 = shl i32 %91, 4
  %93 = load i16*, i16** %49, align 8
  %94 = sext i32 %92 to i64
  %95 = getelementptr inbounds i16, i16* %93, i64 %94
  %96 = load i16*, i16** %51, align 8
  %97 = getelementptr inbounds i16, i16* %96, i64 %94
  %98 = load i16*, i16** %53, align 8
  %99 = getelementptr inbounds i16, i16* %98, i64 %94
  %100 = load i16*, i16** %54, align 8
  %101 = getelementptr inbounds i16, i16* %100, i64 %86
  %102 = load i16*, i16** %32, align 8
  %103 = add nsw i64 %87, %70
  %104 = trunc i64 %103 to i32
  %105 = shl i32 %104, 2
  %106 = sext i32 %105 to i64
  %107 = getelementptr inbounds i16, i16* %102, i64 %106
  switch i8 %4, label %121 [
    i8 4, label %127
    i8 3, label %127
    i8 2, label %108
    i8 1, label %115
  ]

108:                                              ; preds = %90
  %109 = load void (i16*, i64, i16*)*, void (i16*, i64, i16*)** @aom_hadamard_lp_16x16, align 8
  tail call void %109(i16* %107, i64 %34, i16* %95) #4
  %110 = load void (i16*, i64, i16*, i16*, i16*, i16*, i16*, i16*, i16*)*, void (i16*, i64, i16*, i16*, i16*, i16*, i16*, i16*, i16*)** @av1_quantize_lp, align 8
  %111 = load i16*, i16** %55, align 8
  %112 = load i16*, i16** %56, align 8
  %113 = load i16*, i16** %57, align 8
  %114 = load i16*, i16** %58, align 16
  tail call void %110(i16* %95, i64 256, i16* %111, i16* %112, i16* %97, i16* %99, i16* %113, i16* %101, i16* %114) #4
  br label %127

115:                                              ; preds = %90
  tail call void @aom_hadamard_lp_8x8_sse2(i16* %107, i64 %34, i16* %95) #4
  %116 = load void (i16*, i64, i16*, i16*, i16*, i16*, i16*, i16*, i16*)*, void (i16*, i64, i16*, i16*, i16*, i16*, i16*, i16*, i16*)** @av1_quantize_lp, align 8
  %117 = load i16*, i16** %55, align 8
  %118 = load i16*, i16** %56, align 8
  %119 = load i16*, i16** %57, align 8
  %120 = load i16*, i16** %58, align 16
  tail call void %116(i16* %95, i64 64, i16* %117, i16* %118, i16* %97, i16* %99, i16* %119, i16* %101, i16* %120) #4
  br label %127

121:                                              ; preds = %90
  tail call void @aom_fdct4x4_lp_sse2(i16* %107, i16* %95, i32 %29) #4
  %122 = load void (i16*, i64, i16*, i16*, i16*, i16*, i16*, i16*, i16*)*, void (i16*, i64, i16*, i16*, i16*, i16*, i16*, i16*, i16*)** @av1_quantize_lp, align 8
  %123 = load i16*, i16** %55, align 8
  %124 = load i16*, i16** %56, align 8
  %125 = load i16*, i16** %57, align 8
  %126 = load i16*, i16** %58, align 16
  tail call void %122(i16* %95, i64 16, i16* %123, i16* %124, i16* %97, i16* %99, i16* %125, i16* %101, i16* %126) #4
  br label %127

127:                                              ; preds = %90, %90, %121, %115, %108
  %128 = load i16, i16* %101, align 2
  %129 = icmp eq i16 %128, 0
  %130 = zext i1 %129 to i32
  %131 = load i32, i32* %2, align 4
  %132 = and i32 %131, %130
  store i32 %132, i32* %2, align 4
  %133 = add nsw i32 %88, 1
  br label %134

134:                                              ; preds = %127, %84
  %135 = phi i32 [ %132, %127 ], [ %85, %84 ]
  %136 = phi i32 [ %133, %127 ], [ %88, %84 ]
  %137 = add i64 %86, %62
  %138 = add i64 %87, %59
  %139 = icmp slt i64 %138, %60
  br i1 %139, label %84, label %81

140:                                              ; preds = %73
  %141 = shl i64 %79, 6
  %142 = ashr exact i64 %141, 2
  store i64 %142, i64* %78, align 8
  %143 = load i32, i32* %2, align 4
  %144 = icmp eq i32 %143, 0
  br i1 %144, label %147, label %145

145:                                              ; preds = %140
  %146 = getelementptr inbounds %struct.RD_STATS, %struct.RD_STATS* %1, i64 0, i32 1
  store i64 %142, i64* %146, align 8
  br label %217

147:                                              ; preds = %140, %73
  %148 = getelementptr inbounds %struct.RD_STATS, %struct.RD_STATS* %1, i64 0, i32 1
  store i64 0, i64* %148, align 8
  br i1 %45, label %149, label %168

149:                                              ; preds = %147
  %150 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %0, i64 0, i32 0, i64 0, i32 4
  %151 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %0, i64 0, i32 0, i64 0, i32 3
  %152 = bitcast i32** %151 to i16**
  %153 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %0, i64 0, i32 0, i64 0, i32 2
  %154 = bitcast i32** %153 to i16**
  %155 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %0, i64 0, i32 0, i64 0, i32 1
  %156 = bitcast i32** %155 to i16**
  %157 = shl i32 %15, 4
  %158 = sext i32 %157 to i64
  %159 = sext i32 %15 to i64
  br label %160

160:                                              ; preds = %172, %149
  %161 = phi i32 [ 0, %149 ], [ %173, %172 ]
  %162 = phi i64 [ 0, %149 ], [ %214, %172 ]
  %163 = shl i64 %162, 32
  %164 = ashr exact i64 %163, 32
  br label %175

165:                                              ; preds = %172
  %166 = load i32, i32* %77, align 8
  %167 = shl i32 %166, 11
  br label %168

168:                                              ; preds = %165, %147
  %169 = phi i32 [ %167, %165 ], [ 0, %147 ]
  %170 = shl i32 %75, 9
  %171 = add nsw i32 %169, %170
  store i32 %171, i32* %77, align 8
  br label %217

172:                                              ; preds = %213
  %173 = add nsw i32 %161, %16
  %174 = icmp slt i32 %173, %28
  br i1 %174, label %160, label %165

175:                                              ; preds = %160, %213
  %176 = phi i64 [ %164, %160 ], [ %214, %213 ]
  %177 = phi i32 [ 0, %160 ], [ %215, %213 ]
  %178 = icmp slt i32 %177, %22
  br i1 %178, label %179, label %213

179:                                              ; preds = %175
  %180 = trunc i64 %176 to i32
  %181 = shl i32 %180, 4
  %182 = load i16*, i16** %150, align 8
  %183 = getelementptr inbounds i16, i16* %182, i64 %176
  %184 = load i16*, i16** %152, align 8
  %185 = sext i32 %181 to i64
  %186 = getelementptr inbounds i16, i16* %184, i64 %185
  %187 = load i16*, i16** %154, align 8
  %188 = getelementptr inbounds i16, i16* %187, i64 %185
  %189 = load i16*, i16** %156, align 8
  %190 = getelementptr inbounds i16, i16* %189, i64 %185
  %191 = load i16, i16* %183, align 2
  switch i16 %191, label %199 [
    i16 1, label %192
    i16 0, label %207
  ]

192:                                              ; preds = %179
  %193 = load i16, i16* %188, align 2
  %194 = sext i16 %193 to i32
  %195 = icmp slt i32 %194, 0
  %196 = sub nsw i32 0, %194
  %197 = select i1 %195, i32 %196, i32 %194
  %198 = load i32, i32* %77, align 8
  br label %203

199:                                              ; preds = %179
  %200 = load i32 (i16*, i32)*, i32 (i16*, i32)** @aom_satd_lp, align 8
  %201 = tail call i32 %200(i16* %188, i32 %157) #4
  %202 = load i32, i32* %77, align 8
  br label %203

203:                                              ; preds = %192, %199
  %204 = phi i32 [ %201, %199 ], [ %198, %192 ]
  %205 = phi i32 [ %202, %199 ], [ %197, %192 ]
  %206 = add nsw i32 %205, %204
  store i32 %206, i32* %77, align 8
  br label %207

207:                                              ; preds = %203, %179
  %208 = load i64 (i16*, i16*, i64)*, i64 (i16*, i16*, i64)** @av1_block_error_lp, align 8
  %209 = tail call i64 %208(i16* %186, i16* %190, i64 %158) #4
  %210 = ashr i64 %209, 2
  %211 = load i64, i64* %148, align 8
  %212 = add nsw i64 %211, %210
  store i64 %212, i64* %148, align 8
  br label %213

213:                                              ; preds = %207, %175
  %214 = add i64 %176, %159
  %215 = add nsw i32 %177, %16
  %216 = icmp slt i32 %215, %9
  br i1 %216, label %175, label %172

217:                                              ; preds = %168, %145
  ret void
}

declare void @av1_enc_build_inter_predictor(%struct.AV1Common*, %struct.macroblockd*, i32, i32, %struct.BUFFER_SET*, i8 zeroext, i32, i32) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define internal fastcc void @model_rd_for_sb_uv(%struct.AV1_COMP* nocapture readonly, i8 zeroext, %struct.macroblock* nocapture readonly, %struct.macroblockd* nocapture readonly, %struct.RD_STATS* nocapture, i64* nocapture, i32, i32) unnamed_addr #0 {
  %9 = alloca i32, align 4
  %10 = alloca i32, align 4
  %11 = alloca i64, align 8
  %12 = bitcast i32* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %12) #4
  store i32 -1431655766, i32* %9, align 4
  %13 = bitcast i32* %10 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %13) #4
  store i32 -1431655766, i32* %10, align 4
  %14 = bitcast i64* %11 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %14) #4
  store i64 -6148914691236517206, i64* %11, align 8
  %15 = load i64, i64* %5, align 8
  %16 = getelementptr inbounds %struct.RD_STATS, %struct.RD_STATS* %4, i64 0, i32 0
  store i32 0, i32* %16, align 8
  %17 = getelementptr inbounds %struct.RD_STATS, %struct.RD_STATS* %4, i64 0, i32 1
  store i64 0, i64* %17, align 8
  %18 = getelementptr inbounds %struct.RD_STATS, %struct.RD_STATS* %4, i64 0, i32 4
  store i32 0, i32* %18, align 8
  %19 = icmp sgt i32 %6, %7
  br i1 %19, label %88, label %20

20:                                               ; preds = %8
  %21 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 0
  %22 = zext i8 %1 to i64
  %23 = getelementptr inbounds [22 x i8], [22 x i8]* @num_pels_log2_lookup, i64 0, i64 %22
  %24 = sext i32 %6 to i64
  %25 = sext i32 %7 to i64
  br label %26

26:                                               ; preds = %80, %20
  %27 = phi i64 [ %81, %80 ], [ 0, %20 ]
  %28 = phi i32 [ %82, %80 ], [ 0, %20 ]
  %29 = phi i64 [ %84, %80 ], [ %24, %20 ]
  %30 = phi i64 [ %83, %80 ], [ %15, %20 ]
  %31 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %2, i64 0, i32 0, i64 %29, i32 13
  %32 = load i16*, i16** %31, align 8
  %33 = add nsw i64 %29, -1
  %34 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %2, i64 0, i32 59, i64 %33
  %35 = load i8, i8* %34, align 1
  %36 = icmp eq i8 %35, 0
  br i1 %36, label %80, label %37

37:                                               ; preds = %26
  %38 = getelementptr inbounds i16, i16* %32, i64 1
  %39 = load i16, i16* %38, align 2
  %40 = sext i16 %39 to i32
  %41 = load i16, i16* %32, align 2
  %42 = sext i16 %41 to i32
  %43 = load %struct.AV1_PRIMARY*, %struct.AV1_PRIMARY** %21, align 16
  %44 = getelementptr inbounds %struct.AV1_PRIMARY, %struct.AV1_PRIMARY* %43, i64 0, i32 21, i64 %22, i32 3
  %45 = load i32 (i8*, i32, i8*, i32, i32*)*, i32 (i8*, i32, i8*, i32, i32*)** %44, align 8
  %46 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %2, i64 0, i32 0, i64 %29, i32 6, i32 0
  %47 = load i8*, i8** %46, align 8
  %48 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %2, i64 0, i32 0, i64 %29, i32 6, i32 4
  %49 = load i32, i32* %48, align 8
  %50 = getelementptr inbounds %struct.macroblockd, %struct.macroblockd* %3, i64 0, i32 4, i64 %29, i32 3, i32 0
  %51 = load i8*, i8** %50, align 8
  %52 = getelementptr inbounds %struct.macroblockd, %struct.macroblockd* %3, i64 0, i32 4, i64 %29, i32 3, i32 4
  %53 = load i32, i32* %52, align 8
  %54 = call i32 %45(i8* %47, i32 %49, i8* %51, i32 %53, i32* nonnull %9) #4
  %55 = load i32, i32* %9, align 4
  %56 = zext i32 %55 to i64
  %57 = add nsw i64 %30, %56
  %58 = sub i32 %55, %54
  %59 = zext i32 %58 to i64
  %60 = load i8, i8* %23, align 1
  %61 = zext i8 %60 to i32
  %62 = lshr i32 %42, 3
  call void @av1_model_rd_from_var_lapndz(i64 %59, i32 %61, i32 %62, i32* nonnull %10, i64* nonnull %11) #4
  %63 = load i32, i32* %10, align 4
  %64 = ashr i32 %63, 1
  %65 = load i32, i32* %16, align 8
  %66 = add nsw i32 %65, %64
  store i32 %66, i32* %16, align 8
  %67 = load i64, i64* %11, align 8
  %68 = shl i64 %67, 3
  %69 = load i64, i64* %17, align 8
  %70 = add nsw i64 %69, %68
  store i64 %70, i64* %17, align 8
  %71 = zext i32 %54 to i64
  %72 = lshr i32 %40, 3
  call void @av1_model_rd_from_var_lapndz(i64 %71, i32 %61, i32 %72, i32* nonnull %10, i64* nonnull %11) #4
  %73 = load i32, i32* %10, align 4
  %74 = load i32, i32* %16, align 8
  %75 = add nsw i32 %74, %73
  store i32 %75, i32* %16, align 8
  %76 = load i64, i64* %11, align 8
  %77 = shl i64 %76, 4
  %78 = load i64, i64* %17, align 8
  %79 = add nsw i64 %78, %77
  store i64 %79, i64* %17, align 8
  br label %80

80:                                               ; preds = %26, %37
  %81 = phi i64 [ %79, %37 ], [ %27, %26 ]
  %82 = phi i32 [ %75, %37 ], [ %28, %26 ]
  %83 = phi i64 [ %57, %37 ], [ %30, %26 ]
  %84 = add nsw i64 %29, 1
  %85 = icmp slt i64 %29, %25
  br i1 %85, label %26, label %86

86:                                               ; preds = %80
  %87 = icmp eq i32 %82, 0
  br i1 %87, label %88, label %91

88:                                               ; preds = %8, %86
  %89 = phi i64 [ %83, %86 ], [ %15, %8 ]
  %90 = phi i64 [ %81, %86 ], [ 0, %8 ]
  store i32 1, i32* %18, align 8
  br label %91

91:                                               ; preds = %88, %86
  %92 = phi i64 [ %89, %88 ], [ %83, %86 ]
  %93 = phi i32 [ 0, %88 ], [ %82, %86 ]
  %94 = phi i64 [ %90, %88 ], [ %81, %86 ]
  %95 = sext i32 %93 to i64
  %96 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %2, i64 0, i32 17
  %97 = load i32, i32* %96, align 8
  %98 = sext i32 %97 to i64
  %99 = mul nsw i64 %98, %95
  %100 = add nsw i64 %99, 256
  %101 = ashr i64 %100, 9
  %102 = shl i64 %94, 7
  %103 = add nsw i64 %101, %102
  %104 = shl i64 %92, 11
  %105 = icmp slt i64 %103, %104
  br i1 %105, label %108, label %106

106:                                              ; preds = %91
  %107 = shl i64 %92, 4
  store i32 0, i32* %16, align 8
  store i64 %107, i64* %17, align 8
  store i32 1, i32* %18, align 8
  br label %108

108:                                              ; preds = %91, %106
  store i64 %92, i64* %5, align 8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %14) #4
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %13) #4
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %12) #4
  ret void
}

declare void @av1_denoiser_update_frame_stats(%struct.MB_MODE_INFO*, i64, i8 zeroext, %struct.PICK_MODE_CONTEXT*) local_unnamed_addr #2

declare void @av1_denoiser_denoise(%struct.AV1_COMP*, %struct.macroblock*, i32, i32, i8 zeroext, %struct.PICK_MODE_CONTEXT*, i32*, i32) local_unnamed_addr #2

declare void @av1_predict_intra_block_facade(%struct.AV1Common*, %struct.macroblockd*, i32, i32, i32, i8 zeroext) local_unnamed_addr #2

declare i32 @av1_get_intra_inter_context(%struct.macroblockd*) local_unnamed_addr #2

declare i32 @av1_get_pred_context_comp_bwdref_p(%struct.macroblockd*) local_unnamed_addr #2

declare i32 @av1_get_pred_context_comp_bwdref_p1(%struct.macroblockd*) local_unnamed_addr #2

declare i32 @av1_get_pred_context_comp_ref_p(%struct.macroblockd*) local_unnamed_addr #2

declare i32 @av1_get_pred_context_comp_ref_p1(%struct.macroblockd*) local_unnamed_addr #2

declare i32 @av1_get_pred_context_comp_ref_p2(%struct.macroblockd*) local_unnamed_addr #2

declare i32 @av1_get_comp_reference_type_context(%struct.macroblockd*) local_unnamed_addr #2

declare i32 @av1_get_pred_context_uni_comp_ref_p(%struct.macroblockd*) local_unnamed_addr #2

declare i32 @av1_get_pred_context_uni_comp_ref_p1(%struct.macroblockd*) local_unnamed_addr #2

declare i32 @av1_get_pred_context_uni_comp_ref_p2(%struct.macroblockd*) local_unnamed_addr #2

declare void @av1_setup_pred_block(%struct.macroblockd*, %struct.buf_2d*, %struct.yv12_buffer_config*, %struct.scale_factors*, %struct.scale_factors*, i32) local_unnamed_addr #2

declare void @av1_find_mv_refs(%struct.AV1Common*, %struct.macroblockd*, %struct.MB_MODE_INFO*, i8 signext, i8*, [8 x %struct.candidate_mv]*, [8 x i16]*, [2 x %union.int_mv]*, %union.int_mv*, i16*) local_unnamed_addr #2

declare void @av1_find_best_ref_mvs_from_stack(i32, %struct.MB_MODE_INFO_EXT*, i8 signext, %union.int_mv*, %union.int_mv*, i32) local_unnamed_addr #2

declare void @av1_mv_pred(%struct.AV1_COMP*, %struct.macroblock*, i8*, i32, i32, i8 zeroext) local_unnamed_addr #2

declare void @av1_count_overlappable_neighbors(%struct.AV1Common*, %struct.macroblockd*) local_unnamed_addr #2

declare i32 @av1_int_pro_motion_estimation(%struct.AV1_COMP*, %struct.macroblock*, i8 zeroext, i32, i32, %struct.mv*) local_unnamed_addr #2

declare i32 @av1_get_ref_mv(%struct.macroblock*, i32) local_unnamed_addr #2

declare i32 @av1_mv_bit_cost(%struct.mv*, %struct.mv*, i32*, i32**, i32) local_unnamed_addr #2

declare void @av1_make_default_subpel_ms_params(%struct.SUBPEL_MOTION_SEARCH_PARAMS*, %struct.AV1_COMP*, %struct.macroblock*, i8 zeroext, %struct.mv*, i32*) local_unnamed_addr #2

declare %struct.yv12_buffer_config* @av1_get_scaled_ref_frame(%struct.AV1_COMP*, i32) local_unnamed_addr #2

declare void @av1_setup_pre_planes(%struct.macroblockd*, i32, %struct.yv12_buffer_config*, i32, i32, %struct.scale_factors*, i32) local_unnamed_addr #2

declare void @av1_make_default_fullpel_ms_params(%struct.FULLPEL_MOTION_SEARCH_PARAMS*, %struct.AV1_COMP*, %struct.macroblock*, i8 zeroext, %struct.mv*, %struct.search_site_config*, i32) local_unnamed_addr #2

declare i32 @av1_full_pixel_search(i32, %struct.FULLPEL_MOTION_SEARCH_PARAMS*, i32, i32*, %struct.fullpel_mv*, %struct.fullpel_mv*) local_unnamed_addr #2

declare i32 @av1_get_switchable_rate(%struct.macroblock*, %struct.macroblockd*, i8 zeroext, i32) local_unnamed_addr #2

declare i64 @av1_scale_acskip_thresh(i64, i32, i32, i32) local_unnamed_addr #2

declare void @aom_get8x8var_sse2(i8*, i32, i8*, i32, i32*, i32*) local_unnamed_addr #2

; Function Attrs: nofree nounwind
declare double @log2(double) local_unnamed_addr #3

declare void @av1_model_rd_curvfit(i8 zeroext, double, double, double*, double*) local_unnamed_addr #2

declare void @aom_hadamard_lp_8x8_sse2(i16*, i64, i16*) local_unnamed_addr #2

declare void @aom_fdct4x4_lp_sse2(i16*, i16*, i32) local_unnamed_addr #2

declare void @av1_model_rd_from_var_lapndz(i64, i32, i32, i32*, i64*) local_unnamed_addr #2

declare i32 @av1_get_intra_cost_penalty(i32, i32, i32) local_unnamed_addr #2

declare void @av1_predict_intra_block(%struct.macroblockd*, i8 zeroext, i32, i32, i32, i8 zeroext, i8 zeroext, i32, i32, i8 zeroext, i8*, i32, i8*, i32, i32, i32, i32) local_unnamed_addr #2

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{i8 0, i8 2}
