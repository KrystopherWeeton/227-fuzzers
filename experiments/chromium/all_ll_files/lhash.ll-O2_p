; ModuleID = '../../third_party/boringssl/src/crypto/lhash/lhash.c'
source_filename = "../../third_party/boringssl/src/crypto/lhash/lhash.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.lhash_st = type { i64, %struct.lhash_item_st**, i64, i32, i32 (i8*, i8*)*, i32 (i8*)* }
%struct.lhash_item_st = type { i8*, %struct.lhash_item_st*, i32 }

; Function Attrs: nounwind ssp uwtable
define hidden %struct.lhash_st* @lh_new(i32 (i8*)*, i32 (i8*, i8*)*) local_unnamed_addr #0 {
  %3 = tail call i8* @OPENSSL_malloc(i64 48) #5
  %4 = bitcast i8* %3 to %struct.lhash_st*
  %5 = icmp eq i8* %3, null
  br i1 %5, label %24, label %6

6:                                                ; preds = %2
  tail call void @llvm.memset.p0i8.i64(i8* nonnull align 1 %3, i8 0, i64 48, i1 false) #5
  %7 = getelementptr inbounds i8, i8* %3, i64 16
  %8 = bitcast i8* %7 to i64*
  store i64 16, i64* %8, align 8
  %9 = tail call i8* @OPENSSL_malloc(i64 128) #5
  %10 = getelementptr inbounds i8, i8* %3, i64 8
  %11 = bitcast i8* %10 to i8**
  store i8* %9, i8** %11, align 8
  %12 = icmp eq i8* %9, null
  br i1 %12, label %13, label %14

13:                                               ; preds = %6
  tail call void @OPENSSL_free(i8* nonnull %3) #5
  br label %24

14:                                               ; preds = %6
  %15 = load i64, i64* %8, align 8
  %16 = shl i64 %15, 3
  %17 = icmp eq i64 %16, 0
  br i1 %17, label %19, label %18

18:                                               ; preds = %14
  tail call void @llvm.memset.p0i8.i64(i8* nonnull align 1 %9, i8 0, i64 %16, i1 false) #5
  br label %19

19:                                               ; preds = %14, %18
  %20 = getelementptr inbounds i8, i8* %3, i64 32
  %21 = bitcast i8* %20 to i32 (i8*, i8*)**
  store i32 (i8*, i8*)* %1, i32 (i8*, i8*)** %21, align 8
  %22 = getelementptr inbounds i8, i8* %3, i64 40
  %23 = bitcast i8* %22 to i32 (i8*)**
  store i32 (i8*)* %0, i32 (i8*)** %23, align 8
  br label %24

24:                                               ; preds = %2, %19, %13
  %25 = phi %struct.lhash_st* [ null, %13 ], [ %4, %19 ], [ null, %2 ]
  ret %struct.lhash_st* %25
}

declare i8* @OPENSSL_malloc(i64) local_unnamed_addr #1

declare void @OPENSSL_free(i8*) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define hidden void @lh_free(%struct.lhash_st*) local_unnamed_addr #0 {
  %2 = icmp eq %struct.lhash_st* %0, null
  br i1 %2, label %31, label %3

3:                                                ; preds = %1
  %4 = getelementptr inbounds %struct.lhash_st, %struct.lhash_st* %0, i64 0, i32 2
  %5 = load i64, i64* %4, align 8
  %6 = icmp eq i64 %5, 0
  %7 = getelementptr inbounds %struct.lhash_st, %struct.lhash_st* %0, i64 0, i32 1
  br i1 %6, label %8, label %12

8:                                                ; preds = %21, %3
  %9 = bitcast %struct.lhash_item_st*** %7 to i8**
  %10 = load i8*, i8** %9, align 8
  tail call void @OPENSSL_free(i8* %10) #5
  %11 = bitcast %struct.lhash_st* %0 to i8*
  tail call void @OPENSSL_free(i8* nonnull %11) #5
  br label %31

12:                                               ; preds = %3, %21
  %13 = phi i64 [ %22, %21 ], [ %5, %3 ]
  %14 = phi i64 [ %23, %21 ], [ 0, %3 ]
  %15 = load %struct.lhash_item_st**, %struct.lhash_item_st*** %7, align 8
  %16 = getelementptr inbounds %struct.lhash_item_st*, %struct.lhash_item_st** %15, i64 %14
  %17 = load %struct.lhash_item_st*, %struct.lhash_item_st** %16, align 8
  %18 = icmp eq %struct.lhash_item_st* %17, null
  br i1 %18, label %21, label %25

19:                                               ; preds = %25
  %20 = load i64, i64* %4, align 8
  br label %21

21:                                               ; preds = %19, %12
  %22 = phi i64 [ %20, %19 ], [ %13, %12 ]
  %23 = add nuw i64 %14, 1
  %24 = icmp ult i64 %23, %22
  br i1 %24, label %12, label %8

25:                                               ; preds = %12, %25
  %26 = phi %struct.lhash_item_st* [ %29, %25 ], [ %17, %12 ]
  %27 = bitcast %struct.lhash_item_st* %26 to i8*
  %28 = getelementptr inbounds %struct.lhash_item_st, %struct.lhash_item_st* %26, i64 0, i32 1
  %29 = load %struct.lhash_item_st*, %struct.lhash_item_st** %28, align 8
  tail call void @OPENSSL_free(i8* %27) #5
  %30 = icmp eq %struct.lhash_item_st* %29, null
  br i1 %30, label %19, label %25

31:                                               ; preds = %1, %8
  ret void
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden i64 @lh_num_items(%struct.lhash_st* nocapture readonly) local_unnamed_addr #2 {
  %2 = getelementptr inbounds %struct.lhash_st, %struct.lhash_st* %0, i64 0, i32 0
  %3 = load i64, i64* %2, align 8
  ret i64 %3
}

; Function Attrs: nounwind ssp uwtable
define hidden i8* @lh_retrieve(%struct.lhash_st* nocapture readonly, i8*, i32 (i32 (i8*)*, i8*)* nocapture, i32 (i32 (i8*, i8*)*, i8*, i8*)* nocapture) local_unnamed_addr #0 {
  %5 = getelementptr inbounds %struct.lhash_st, %struct.lhash_st* %0, i64 0, i32 5
  %6 = load i32 (i8*)*, i32 (i8*)** %5, align 8
  %7 = tail call i32 %2(i32 (i8*)* %6, i8* %1) #5
  %8 = getelementptr inbounds %struct.lhash_st, %struct.lhash_st* %0, i64 0, i32 1
  %9 = load %struct.lhash_item_st**, %struct.lhash_item_st*** %8, align 8
  %10 = zext i32 %7 to i64
  %11 = getelementptr inbounds %struct.lhash_st, %struct.lhash_st* %0, i64 0, i32 2
  %12 = load i64, i64* %11, align 8
  %13 = urem i64 %10, %12
  %14 = getelementptr inbounds %struct.lhash_item_st*, %struct.lhash_item_st** %9, i64 %13
  %15 = getelementptr inbounds %struct.lhash_st, %struct.lhash_st* %0, i64 0, i32 4
  %16 = load %struct.lhash_item_st*, %struct.lhash_item_st** %14, align 8
  %17 = icmp eq %struct.lhash_item_st* %16, null
  br i1 %17, label %44, label %18

18:                                               ; preds = %4
  %19 = load i32 (i8*, i8*)*, i32 (i8*, i8*)** %15, align 8
  %20 = getelementptr inbounds %struct.lhash_item_st, %struct.lhash_item_st* %16, i64 0, i32 0
  %21 = load i8*, i8** %20, align 8
  %22 = tail call i32 %3(i32 (i8*, i8*)* %19, i8* %21, i8* %1) #5
  %23 = icmp eq i32 %22, 0
  br i1 %23, label %37, label %24

24:                                               ; preds = %18, %29
  %25 = phi %struct.lhash_item_st* [ %27, %29 ], [ %16, %18 ]
  %26 = getelementptr inbounds %struct.lhash_item_st, %struct.lhash_item_st* %25, i64 0, i32 1
  %27 = load %struct.lhash_item_st*, %struct.lhash_item_st** %26, align 8
  %28 = icmp eq %struct.lhash_item_st* %27, null
  br i1 %28, label %44, label %29

29:                                               ; preds = %24
  %30 = load i32 (i8*, i8*)*, i32 (i8*, i8*)** %15, align 8
  %31 = getelementptr inbounds %struct.lhash_item_st, %struct.lhash_item_st* %27, i64 0, i32 0
  %32 = load i8*, i8** %31, align 8
  %33 = tail call i32 %3(i32 (i8*, i8*)* %30, i8* %32, i8* %1) #5
  %34 = icmp eq i32 %33, 0
  br i1 %34, label %35, label %24

35:                                               ; preds = %29
  %36 = getelementptr inbounds %struct.lhash_item_st, %struct.lhash_item_st* %25, i64 0, i32 1
  br label %37

37:                                               ; preds = %35, %18
  %38 = phi %struct.lhash_item_st** [ %14, %18 ], [ %36, %35 ]
  %39 = load %struct.lhash_item_st*, %struct.lhash_item_st** %38, align 8
  %40 = icmp eq %struct.lhash_item_st* %39, null
  br i1 %40, label %44, label %41

41:                                               ; preds = %37
  %42 = getelementptr inbounds %struct.lhash_item_st, %struct.lhash_item_st* %39, i64 0, i32 0
  %43 = load i8*, i8** %42, align 8
  br label %44

44:                                               ; preds = %24, %4, %37, %41
  %45 = phi i8* [ %43, %41 ], [ null, %37 ], [ null, %4 ], [ null, %24 ]
  ret i8* %45
}

; Function Attrs: nounwind ssp uwtable
define hidden i8* @lh_retrieve_key(%struct.lhash_st* nocapture readonly, i8*, i32, i32 (i8*, i8*)* nocapture) local_unnamed_addr #0 {
  %5 = getelementptr inbounds %struct.lhash_st, %struct.lhash_st* %0, i64 0, i32 1
  %6 = load %struct.lhash_item_st**, %struct.lhash_item_st*** %5, align 8
  %7 = zext i32 %2 to i64
  %8 = getelementptr inbounds %struct.lhash_st, %struct.lhash_st* %0, i64 0, i32 2
  %9 = load i64, i64* %8, align 8
  %10 = urem i64 %7, %9
  %11 = getelementptr inbounds %struct.lhash_item_st*, %struct.lhash_item_st** %6, i64 %10
  %12 = load %struct.lhash_item_st*, %struct.lhash_item_st** %11, align 8
  %13 = icmp eq %struct.lhash_item_st* %12, null
  br i1 %13, label %38, label %14

14:                                               ; preds = %4
  %15 = getelementptr inbounds %struct.lhash_item_st, %struct.lhash_item_st* %12, i64 0, i32 0
  %16 = load i8*, i8** %15, align 8
  %17 = tail call i32 %3(i8* %1, i8* %16) #5
  %18 = icmp eq i32 %17, 0
  br i1 %18, label %31, label %19

19:                                               ; preds = %14, %24
  %20 = phi %struct.lhash_item_st* [ %22, %24 ], [ %12, %14 ]
  %21 = getelementptr inbounds %struct.lhash_item_st, %struct.lhash_item_st* %20, i64 0, i32 1
  %22 = load %struct.lhash_item_st*, %struct.lhash_item_st** %21, align 8
  %23 = icmp eq %struct.lhash_item_st* %22, null
  br i1 %23, label %38, label %24

24:                                               ; preds = %19
  %25 = getelementptr inbounds %struct.lhash_item_st, %struct.lhash_item_st* %22, i64 0, i32 0
  %26 = load i8*, i8** %25, align 8
  %27 = tail call i32 %3(i8* %1, i8* %26) #5
  %28 = icmp eq i32 %27, 0
  br i1 %28, label %29, label %19

29:                                               ; preds = %24
  %30 = getelementptr inbounds %struct.lhash_item_st, %struct.lhash_item_st* %20, i64 0, i32 1
  br label %31

31:                                               ; preds = %29, %14
  %32 = phi %struct.lhash_item_st** [ %11, %14 ], [ %30, %29 ]
  %33 = load %struct.lhash_item_st*, %struct.lhash_item_st** %32, align 8
  %34 = icmp eq %struct.lhash_item_st* %33, null
  br i1 %34, label %38, label %35

35:                                               ; preds = %31
  %36 = getelementptr inbounds %struct.lhash_item_st, %struct.lhash_item_st* %33, i64 0, i32 0
  %37 = load i8*, i8** %36, align 8
  br label %38

38:                                               ; preds = %19, %4, %31, %35
  %39 = phi i8* [ %37, %35 ], [ null, %31 ], [ null, %4 ], [ null, %19 ]
  ret i8* %39
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @lh_insert(%struct.lhash_st* nocapture, i8** nocapture, i8*, i32 (i32 (i8*)*, i8*)* nocapture, i32 (i32 (i8*, i8*)*, i8*, i8*)* nocapture) local_unnamed_addr #0 {
  store i8* null, i8** %1, align 8
  %6 = getelementptr inbounds %struct.lhash_st, %struct.lhash_st* %0, i64 0, i32 5
  %7 = load i32 (i8*)*, i32 (i8*)** %6, align 8
  %8 = tail call i32 %3(i32 (i8*)* %7, i8* %2) #5
  %9 = getelementptr inbounds %struct.lhash_st, %struct.lhash_st* %0, i64 0, i32 1
  %10 = load %struct.lhash_item_st**, %struct.lhash_item_st*** %9, align 8
  %11 = zext i32 %8 to i64
  %12 = getelementptr inbounds %struct.lhash_st, %struct.lhash_st* %0, i64 0, i32 2
  %13 = load i64, i64* %12, align 8
  %14 = urem i64 %11, %13
  %15 = getelementptr inbounds %struct.lhash_item_st*, %struct.lhash_item_st** %10, i64 %14
  %16 = getelementptr inbounds %struct.lhash_st, %struct.lhash_st* %0, i64 0, i32 4
  %17 = load %struct.lhash_item_st*, %struct.lhash_item_st** %15, align 8
  %18 = icmp eq %struct.lhash_item_st* %17, null
  br i1 %18, label %50, label %19

19:                                               ; preds = %5
  %20 = load i32 (i8*, i8*)*, i32 (i8*, i8*)** %16, align 8
  %21 = getelementptr inbounds %struct.lhash_item_st, %struct.lhash_item_st* %17, i64 0, i32 0
  %22 = load i8*, i8** %21, align 8
  %23 = tail call i32 %4(i32 (i8*, i8*)* %20, i8* %22, i8* %2) #5
  %24 = icmp eq i32 %23, 0
  br i1 %24, label %38, label %25

25:                                               ; preds = %19, %30
  %26 = phi %struct.lhash_item_st* [ %28, %30 ], [ %17, %19 ]
  %27 = getelementptr inbounds %struct.lhash_item_st, %struct.lhash_item_st* %26, i64 0, i32 1
  %28 = load %struct.lhash_item_st*, %struct.lhash_item_st** %27, align 8
  %29 = icmp eq %struct.lhash_item_st* %28, null
  br i1 %29, label %48, label %30

30:                                               ; preds = %25
  %31 = load i32 (i8*, i8*)*, i32 (i8*, i8*)** %16, align 8
  %32 = getelementptr inbounds %struct.lhash_item_st, %struct.lhash_item_st* %28, i64 0, i32 0
  %33 = load i8*, i8** %32, align 8
  %34 = tail call i32 %4(i32 (i8*, i8*)* %31, i8* %33, i8* %2) #5
  %35 = icmp eq i32 %34, 0
  br i1 %35, label %36, label %25

36:                                               ; preds = %30
  %37 = getelementptr inbounds %struct.lhash_item_st, %struct.lhash_item_st* %26, i64 0, i32 1
  br label %38

38:                                               ; preds = %36, %19
  %39 = phi %struct.lhash_item_st** [ %15, %19 ], [ %37, %36 ]
  %40 = load %struct.lhash_item_st*, %struct.lhash_item_st** %39, align 8
  %41 = icmp eq %struct.lhash_item_st* %40, null
  br i1 %41, label %50, label %42

42:                                               ; preds = %38
  %43 = bitcast %struct.lhash_item_st* %40 to i64*
  %44 = load i64, i64* %43, align 8
  %45 = bitcast i8** %1 to i64*
  store i64 %44, i64* %45, align 8
  %46 = load %struct.lhash_item_st*, %struct.lhash_item_st** %39, align 8
  %47 = getelementptr inbounds %struct.lhash_item_st, %struct.lhash_item_st* %46, i64 0, i32 0
  store i8* %2, i8** %47, align 8
  br label %173

48:                                               ; preds = %25
  %49 = getelementptr inbounds %struct.lhash_item_st, %struct.lhash_item_st* %26, i64 0, i32 1
  br label %50

50:                                               ; preds = %48, %5, %38
  %51 = phi %struct.lhash_item_st** [ %39, %38 ], [ %15, %5 ], [ %49, %48 ]
  %52 = tail call i8* @OPENSSL_malloc(i64 24) #5
  %53 = icmp eq i8* %52, null
  br i1 %53, label %173, label %54

54:                                               ; preds = %50
  %55 = bitcast i8* %52 to i8**
  store i8* %2, i8** %55, align 8
  %56 = getelementptr inbounds i8, i8* %52, i64 16
  %57 = bitcast i8* %56 to i32*
  store i32 %8, i32* %57, align 8
  %58 = getelementptr inbounds i8, i8* %52, i64 8
  %59 = bitcast i8* %58 to %struct.lhash_item_st**
  store %struct.lhash_item_st* null, %struct.lhash_item_st** %59, align 8
  %60 = bitcast %struct.lhash_item_st** %51 to i8**
  store i8* %52, i8** %60, align 8
  %61 = getelementptr inbounds %struct.lhash_st, %struct.lhash_st* %0, i64 0, i32 0
  %62 = load i64, i64* %61, align 8
  %63 = add i64 %62, 1
  store i64 %63, i64* %61, align 8
  %64 = getelementptr inbounds %struct.lhash_st, %struct.lhash_st* %0, i64 0, i32 3
  %65 = load i32, i32* %64, align 8
  %66 = icmp eq i32 %65, 0
  br i1 %66, label %67, label %173

67:                                               ; preds = %54
  %68 = load i64, i64* %12, align 8
  %69 = udiv i64 %63, %68
  %70 = icmp ugt i64 %69, 2
  br i1 %70, label %71, label %120

71:                                               ; preds = %67
  %72 = shl i64 %68, 1
  %73 = icmp ugt i64 %72, %68
  br i1 %73, label %74, label %173

74:                                               ; preds = %71
  %75 = shl i64 %68, 4
  %76 = icmp ugt i64 %72, 2305843009213693951
  br i1 %76, label %173, label %77

77:                                               ; preds = %74
  %78 = tail call i8* @OPENSSL_malloc(i64 %75) #5
  %79 = bitcast i8* %78 to %struct.lhash_item_st**
  %80 = icmp eq i8* %78, null
  br i1 %80, label %173, label %81

81:                                               ; preds = %77
  %82 = icmp eq i64 %75, 0
  br i1 %82, label %84, label %83

83:                                               ; preds = %81
  tail call void @llvm.memset.p0i8.i64(i8* nonnull align 1 %78, i8 0, i64 %75, i1 false) #5
  br label %84

84:                                               ; preds = %83, %81
  %85 = load i64, i64* %12, align 8
  %86 = icmp eq i64 %85, 0
  %87 = load %struct.lhash_item_st**, %struct.lhash_item_st*** %9, align 8
  br i1 %86, label %116, label %88

88:                                               ; preds = %84, %111
  %89 = phi %struct.lhash_item_st** [ %112, %111 ], [ %87, %84 ]
  %90 = phi i64 [ %113, %111 ], [ %85, %84 ]
  %91 = phi i64 [ %114, %111 ], [ 0, %84 ]
  %92 = getelementptr inbounds %struct.lhash_item_st*, %struct.lhash_item_st** %89, i64 %91
  %93 = load %struct.lhash_item_st*, %struct.lhash_item_st** %92, align 8
  %94 = icmp eq %struct.lhash_item_st* %93, null
  br i1 %94, label %111, label %95

95:                                               ; preds = %88, %95
  %96 = phi %struct.lhash_item_st* [ %102, %95 ], [ %93, %88 ]
  %97 = getelementptr inbounds %struct.lhash_item_st, %struct.lhash_item_st* %96, i64 0, i32 2
  %98 = load i32, i32* %97, align 8
  %99 = zext i32 %98 to i64
  %100 = urem i64 %99, %72
  %101 = getelementptr inbounds %struct.lhash_item_st, %struct.lhash_item_st* %96, i64 0, i32 1
  %102 = load %struct.lhash_item_st*, %struct.lhash_item_st** %101, align 8
  %103 = getelementptr inbounds %struct.lhash_item_st*, %struct.lhash_item_st** %79, i64 %100
  %104 = bitcast %struct.lhash_item_st** %103 to i64*
  %105 = load i64, i64* %104, align 8
  %106 = bitcast %struct.lhash_item_st** %101 to i64*
  store i64 %105, i64* %106, align 8
  store %struct.lhash_item_st* %96, %struct.lhash_item_st** %103, align 8
  %107 = icmp eq %struct.lhash_item_st* %102, null
  br i1 %107, label %108, label %95

108:                                              ; preds = %95
  %109 = load i64, i64* %12, align 8
  %110 = load %struct.lhash_item_st**, %struct.lhash_item_st*** %9, align 8
  br label %111

111:                                              ; preds = %108, %88
  %112 = phi %struct.lhash_item_st** [ %110, %108 ], [ %89, %88 ]
  %113 = phi i64 [ %109, %108 ], [ %90, %88 ]
  %114 = add nuw i64 %91, 1
  %115 = icmp ult i64 %114, %113
  br i1 %115, label %88, label %116

116:                                              ; preds = %111, %84
  %117 = phi %struct.lhash_item_st** [ %87, %84 ], [ %112, %111 ]
  %118 = bitcast %struct.lhash_item_st** %117 to i8*
  tail call void @OPENSSL_free(i8* %118) #5
  store i64 %72, i64* %12, align 8
  %119 = bitcast %struct.lhash_item_st*** %9 to i8**
  store i8* %78, i8** %119, align 8
  br label %173

120:                                              ; preds = %67
  %121 = icmp ugt i64 %68, %63
  %122 = icmp ugt i64 %68, 16
  %123 = and i1 %121, %122
  br i1 %123, label %124, label %173

124:                                              ; preds = %120
  %125 = lshr i64 %68, 1
  %126 = icmp ugt i64 %125, 16
  %127 = select i1 %126, i64 %125, i64 16
  %128 = shl i64 %127, 3
  %129 = icmp ugt i64 %127, 2305843009213693951
  br i1 %129, label %173, label %130

130:                                              ; preds = %124
  %131 = tail call i8* @OPENSSL_malloc(i64 %128) #5
  %132 = bitcast i8* %131 to %struct.lhash_item_st**
  %133 = icmp eq i8* %131, null
  br i1 %133, label %173, label %134

134:                                              ; preds = %130
  %135 = icmp eq i64 %128, 0
  br i1 %135, label %137, label %136

136:                                              ; preds = %134
  tail call void @llvm.memset.p0i8.i64(i8* nonnull align 1 %131, i8 0, i64 %128, i1 false) #5
  br label %137

137:                                              ; preds = %136, %134
  %138 = load i64, i64* %12, align 8
  %139 = icmp eq i64 %138, 0
  %140 = load %struct.lhash_item_st**, %struct.lhash_item_st*** %9, align 8
  br i1 %139, label %169, label %141

141:                                              ; preds = %137, %164
  %142 = phi %struct.lhash_item_st** [ %165, %164 ], [ %140, %137 ]
  %143 = phi i64 [ %166, %164 ], [ %138, %137 ]
  %144 = phi i64 [ %167, %164 ], [ 0, %137 ]
  %145 = getelementptr inbounds %struct.lhash_item_st*, %struct.lhash_item_st** %142, i64 %144
  %146 = load %struct.lhash_item_st*, %struct.lhash_item_st** %145, align 8
  %147 = icmp eq %struct.lhash_item_st* %146, null
  br i1 %147, label %164, label %148

148:                                              ; preds = %141, %148
  %149 = phi %struct.lhash_item_st* [ %155, %148 ], [ %146, %141 ]
  %150 = getelementptr inbounds %struct.lhash_item_st, %struct.lhash_item_st* %149, i64 0, i32 2
  %151 = load i32, i32* %150, align 8
  %152 = zext i32 %151 to i64
  %153 = urem i64 %152, %127
  %154 = getelementptr inbounds %struct.lhash_item_st, %struct.lhash_item_st* %149, i64 0, i32 1
  %155 = load %struct.lhash_item_st*, %struct.lhash_item_st** %154, align 8
  %156 = getelementptr inbounds %struct.lhash_item_st*, %struct.lhash_item_st** %132, i64 %153
  %157 = bitcast %struct.lhash_item_st** %156 to i64*
  %158 = load i64, i64* %157, align 8
  %159 = bitcast %struct.lhash_item_st** %154 to i64*
  store i64 %158, i64* %159, align 8
  store %struct.lhash_item_st* %149, %struct.lhash_item_st** %156, align 8
  %160 = icmp eq %struct.lhash_item_st* %155, null
  br i1 %160, label %161, label %148

161:                                              ; preds = %148
  %162 = load i64, i64* %12, align 8
  %163 = load %struct.lhash_item_st**, %struct.lhash_item_st*** %9, align 8
  br label %164

164:                                              ; preds = %161, %141
  %165 = phi %struct.lhash_item_st** [ %163, %161 ], [ %142, %141 ]
  %166 = phi i64 [ %162, %161 ], [ %143, %141 ]
  %167 = add nuw i64 %144, 1
  %168 = icmp ult i64 %167, %166
  br i1 %168, label %141, label %169

169:                                              ; preds = %164, %137
  %170 = phi %struct.lhash_item_st** [ %140, %137 ], [ %165, %164 ]
  %171 = bitcast %struct.lhash_item_st** %170 to i8*
  tail call void @OPENSSL_free(i8* %171) #5
  store i64 %127, i64* %12, align 8
  %172 = bitcast %struct.lhash_item_st*** %9 to i8**
  store i8* %131, i8** %172, align 8
  br label %173

173:                                              ; preds = %120, %71, %54, %74, %77, %116, %124, %130, %169, %50, %42
  %174 = phi i32 [ 1, %42 ], [ 0, %50 ], [ 1, %169 ], [ 1, %130 ], [ 1, %124 ], [ 1, %116 ], [ 1, %77 ], [ 1, %74 ], [ 1, %54 ], [ 1, %71 ], [ 1, %120 ]
  ret i32 %174
}

; Function Attrs: nounwind ssp uwtable
define hidden i8* @lh_delete(%struct.lhash_st* nocapture, i8*, i32 (i32 (i8*)*, i8*)* nocapture, i32 (i32 (i8*, i8*)*, i8*, i8*)* nocapture) local_unnamed_addr #0 {
  %5 = getelementptr inbounds %struct.lhash_st, %struct.lhash_st* %0, i64 0, i32 5
  %6 = load i32 (i8*)*, i32 (i8*)** %5, align 8
  %7 = tail call i32 %2(i32 (i8*)* %6, i8* %1) #5
  %8 = getelementptr inbounds %struct.lhash_st, %struct.lhash_st* %0, i64 0, i32 1
  %9 = load %struct.lhash_item_st**, %struct.lhash_item_st*** %8, align 8
  %10 = zext i32 %7 to i64
  %11 = getelementptr inbounds %struct.lhash_st, %struct.lhash_st* %0, i64 0, i32 2
  %12 = load i64, i64* %11, align 8
  %13 = urem i64 %10, %12
  %14 = getelementptr inbounds %struct.lhash_item_st*, %struct.lhash_item_st** %9, i64 %13
  %15 = getelementptr inbounds %struct.lhash_st, %struct.lhash_st* %0, i64 0, i32 4
  %16 = load %struct.lhash_item_st*, %struct.lhash_item_st** %14, align 8
  %17 = icmp eq %struct.lhash_item_st* %16, null
  br i1 %17, label %161, label %18

18:                                               ; preds = %4
  %19 = load i32 (i8*, i8*)*, i32 (i8*, i8*)** %15, align 8
  %20 = getelementptr inbounds %struct.lhash_item_st, %struct.lhash_item_st* %16, i64 0, i32 0
  %21 = load i8*, i8** %20, align 8
  %22 = tail call i32 %3(i32 (i8*, i8*)* %19, i8* %21, i8* %1) #5
  %23 = icmp eq i32 %22, 0
  br i1 %23, label %37, label %24

24:                                               ; preds = %18, %29
  %25 = phi %struct.lhash_item_st* [ %27, %29 ], [ %16, %18 ]
  %26 = getelementptr inbounds %struct.lhash_item_st, %struct.lhash_item_st* %25, i64 0, i32 1
  %27 = load %struct.lhash_item_st*, %struct.lhash_item_st** %26, align 8
  %28 = icmp eq %struct.lhash_item_st* %27, null
  br i1 %28, label %161, label %29

29:                                               ; preds = %24
  %30 = load i32 (i8*, i8*)*, i32 (i8*, i8*)** %15, align 8
  %31 = getelementptr inbounds %struct.lhash_item_st, %struct.lhash_item_st* %27, i64 0, i32 0
  %32 = load i8*, i8** %31, align 8
  %33 = tail call i32 %3(i32 (i8*, i8*)* %30, i8* %32, i8* %1) #5
  %34 = icmp eq i32 %33, 0
  br i1 %34, label %35, label %24

35:                                               ; preds = %29
  %36 = getelementptr inbounds %struct.lhash_item_st, %struct.lhash_item_st* %25, i64 0, i32 1
  br label %37

37:                                               ; preds = %35, %18
  %38 = phi %struct.lhash_item_st** [ %14, %18 ], [ %36, %35 ]
  %39 = load %struct.lhash_item_st*, %struct.lhash_item_st** %38, align 8
  %40 = icmp eq %struct.lhash_item_st* %39, null
  br i1 %40, label %161, label %41

41:                                               ; preds = %37
  %42 = getelementptr inbounds %struct.lhash_item_st, %struct.lhash_item_st* %39, i64 0, i32 1
  %43 = bitcast %struct.lhash_item_st** %42 to i64*
  %44 = load i64, i64* %43, align 8
  %45 = bitcast %struct.lhash_item_st** %38 to i64*
  store i64 %44, i64* %45, align 8
  %46 = getelementptr inbounds %struct.lhash_item_st, %struct.lhash_item_st* %39, i64 0, i32 0
  %47 = load i8*, i8** %46, align 8
  %48 = bitcast %struct.lhash_item_st* %39 to i8*
  tail call void @OPENSSL_free(i8* nonnull %48) #5
  %49 = getelementptr inbounds %struct.lhash_st, %struct.lhash_st* %0, i64 0, i32 0
  %50 = load i64, i64* %49, align 8
  %51 = add i64 %50, -1
  store i64 %51, i64* %49, align 8
  %52 = getelementptr inbounds %struct.lhash_st, %struct.lhash_st* %0, i64 0, i32 3
  %53 = load i32, i32* %52, align 8
  %54 = icmp eq i32 %53, 0
  br i1 %54, label %55, label %161

55:                                               ; preds = %41
  %56 = load i64, i64* %11, align 8
  %57 = udiv i64 %51, %56
  %58 = icmp ugt i64 %57, 2
  br i1 %58, label %59, label %108

59:                                               ; preds = %55
  %60 = shl i64 %56, 1
  %61 = icmp ugt i64 %60, %56
  br i1 %61, label %62, label %161

62:                                               ; preds = %59
  %63 = shl i64 %56, 4
  %64 = icmp ugt i64 %60, 2305843009213693951
  br i1 %64, label %161, label %65

65:                                               ; preds = %62
  %66 = tail call i8* @OPENSSL_malloc(i64 %63) #5
  %67 = bitcast i8* %66 to %struct.lhash_item_st**
  %68 = icmp eq i8* %66, null
  br i1 %68, label %161, label %69

69:                                               ; preds = %65
  %70 = icmp eq i64 %63, 0
  br i1 %70, label %72, label %71

71:                                               ; preds = %69
  tail call void @llvm.memset.p0i8.i64(i8* nonnull align 1 %66, i8 0, i64 %63, i1 false) #5
  br label %72

72:                                               ; preds = %71, %69
  %73 = load i64, i64* %11, align 8
  %74 = icmp eq i64 %73, 0
  %75 = load %struct.lhash_item_st**, %struct.lhash_item_st*** %8, align 8
  br i1 %74, label %104, label %76

76:                                               ; preds = %72, %99
  %77 = phi %struct.lhash_item_st** [ %100, %99 ], [ %75, %72 ]
  %78 = phi i64 [ %101, %99 ], [ %73, %72 ]
  %79 = phi i64 [ %102, %99 ], [ 0, %72 ]
  %80 = getelementptr inbounds %struct.lhash_item_st*, %struct.lhash_item_st** %77, i64 %79
  %81 = load %struct.lhash_item_st*, %struct.lhash_item_st** %80, align 8
  %82 = icmp eq %struct.lhash_item_st* %81, null
  br i1 %82, label %99, label %83

83:                                               ; preds = %76, %83
  %84 = phi %struct.lhash_item_st* [ %90, %83 ], [ %81, %76 ]
  %85 = getelementptr inbounds %struct.lhash_item_st, %struct.lhash_item_st* %84, i64 0, i32 2
  %86 = load i32, i32* %85, align 8
  %87 = zext i32 %86 to i64
  %88 = urem i64 %87, %60
  %89 = getelementptr inbounds %struct.lhash_item_st, %struct.lhash_item_st* %84, i64 0, i32 1
  %90 = load %struct.lhash_item_st*, %struct.lhash_item_st** %89, align 8
  %91 = getelementptr inbounds %struct.lhash_item_st*, %struct.lhash_item_st** %67, i64 %88
  %92 = bitcast %struct.lhash_item_st** %91 to i64*
  %93 = load i64, i64* %92, align 8
  %94 = bitcast %struct.lhash_item_st** %89 to i64*
  store i64 %93, i64* %94, align 8
  store %struct.lhash_item_st* %84, %struct.lhash_item_st** %91, align 8
  %95 = icmp eq %struct.lhash_item_st* %90, null
  br i1 %95, label %96, label %83

96:                                               ; preds = %83
  %97 = load i64, i64* %11, align 8
  %98 = load %struct.lhash_item_st**, %struct.lhash_item_st*** %8, align 8
  br label %99

99:                                               ; preds = %96, %76
  %100 = phi %struct.lhash_item_st** [ %98, %96 ], [ %77, %76 ]
  %101 = phi i64 [ %97, %96 ], [ %78, %76 ]
  %102 = add nuw i64 %79, 1
  %103 = icmp ult i64 %102, %101
  br i1 %103, label %76, label %104

104:                                              ; preds = %99, %72
  %105 = phi %struct.lhash_item_st** [ %75, %72 ], [ %100, %99 ]
  %106 = bitcast %struct.lhash_item_st** %105 to i8*
  tail call void @OPENSSL_free(i8* %106) #5
  store i64 %60, i64* %11, align 8
  %107 = bitcast %struct.lhash_item_st*** %8 to i8**
  store i8* %66, i8** %107, align 8
  br label %161

108:                                              ; preds = %55
  %109 = icmp ugt i64 %56, %51
  %110 = icmp ugt i64 %56, 16
  %111 = and i1 %109, %110
  br i1 %111, label %112, label %161

112:                                              ; preds = %108
  %113 = lshr i64 %56, 1
  %114 = icmp ugt i64 %113, 16
  %115 = select i1 %114, i64 %113, i64 16
  %116 = shl i64 %115, 3
  %117 = icmp ugt i64 %115, 2305843009213693951
  br i1 %117, label %161, label %118

118:                                              ; preds = %112
  %119 = tail call i8* @OPENSSL_malloc(i64 %116) #5
  %120 = bitcast i8* %119 to %struct.lhash_item_st**
  %121 = icmp eq i8* %119, null
  br i1 %121, label %161, label %122

122:                                              ; preds = %118
  %123 = icmp eq i64 %116, 0
  br i1 %123, label %125, label %124

124:                                              ; preds = %122
  tail call void @llvm.memset.p0i8.i64(i8* nonnull align 1 %119, i8 0, i64 %116, i1 false) #5
  br label %125

125:                                              ; preds = %124, %122
  %126 = load i64, i64* %11, align 8
  %127 = icmp eq i64 %126, 0
  %128 = load %struct.lhash_item_st**, %struct.lhash_item_st*** %8, align 8
  br i1 %127, label %157, label %129

129:                                              ; preds = %125, %152
  %130 = phi %struct.lhash_item_st** [ %153, %152 ], [ %128, %125 ]
  %131 = phi i64 [ %154, %152 ], [ %126, %125 ]
  %132 = phi i64 [ %155, %152 ], [ 0, %125 ]
  %133 = getelementptr inbounds %struct.lhash_item_st*, %struct.lhash_item_st** %130, i64 %132
  %134 = load %struct.lhash_item_st*, %struct.lhash_item_st** %133, align 8
  %135 = icmp eq %struct.lhash_item_st* %134, null
  br i1 %135, label %152, label %136

136:                                              ; preds = %129, %136
  %137 = phi %struct.lhash_item_st* [ %143, %136 ], [ %134, %129 ]
  %138 = getelementptr inbounds %struct.lhash_item_st, %struct.lhash_item_st* %137, i64 0, i32 2
  %139 = load i32, i32* %138, align 8
  %140 = zext i32 %139 to i64
  %141 = urem i64 %140, %115
  %142 = getelementptr inbounds %struct.lhash_item_st, %struct.lhash_item_st* %137, i64 0, i32 1
  %143 = load %struct.lhash_item_st*, %struct.lhash_item_st** %142, align 8
  %144 = getelementptr inbounds %struct.lhash_item_st*, %struct.lhash_item_st** %120, i64 %141
  %145 = bitcast %struct.lhash_item_st** %144 to i64*
  %146 = load i64, i64* %145, align 8
  %147 = bitcast %struct.lhash_item_st** %142 to i64*
  store i64 %146, i64* %147, align 8
  store %struct.lhash_item_st* %137, %struct.lhash_item_st** %144, align 8
  %148 = icmp eq %struct.lhash_item_st* %143, null
  br i1 %148, label %149, label %136

149:                                              ; preds = %136
  %150 = load i64, i64* %11, align 8
  %151 = load %struct.lhash_item_st**, %struct.lhash_item_st*** %8, align 8
  br label %152

152:                                              ; preds = %149, %129
  %153 = phi %struct.lhash_item_st** [ %151, %149 ], [ %130, %129 ]
  %154 = phi i64 [ %150, %149 ], [ %131, %129 ]
  %155 = add nuw i64 %132, 1
  %156 = icmp ult i64 %155, %154
  br i1 %156, label %129, label %157

157:                                              ; preds = %152, %125
  %158 = phi %struct.lhash_item_st** [ %128, %125 ], [ %153, %152 ]
  %159 = bitcast %struct.lhash_item_st** %158 to i8*
  tail call void @OPENSSL_free(i8* %159) #5
  store i64 %115, i64* %11, align 8
  %160 = bitcast %struct.lhash_item_st*** %8 to i8**
  store i8* %119, i8** %160, align 8
  br label %161

161:                                              ; preds = %24, %4, %108, %59, %41, %62, %65, %104, %112, %118, %157, %37
  %162 = phi i8* [ null, %37 ], [ %47, %157 ], [ %47, %118 ], [ %47, %112 ], [ %47, %104 ], [ %47, %65 ], [ %47, %62 ], [ %47, %41 ], [ %47, %59 ], [ %47, %108 ], [ null, %4 ], [ null, %24 ]
  ret i8* %162
}

; Function Attrs: nounwind ssp uwtable
define hidden void @lh_doall_arg(%struct.lhash_st*, void (i8*, i8*)* nocapture, i8*) local_unnamed_addr #0 {
  %4 = icmp eq %struct.lhash_st* %0, null
  br i1 %4, label %156, label %5

5:                                                ; preds = %3
  %6 = getelementptr inbounds %struct.lhash_st, %struct.lhash_st* %0, i64 0, i32 3
  %7 = load i32, i32* %6, align 8
  %8 = icmp eq i32 %7, -1
  br i1 %8, label %11, label %9

9:                                                ; preds = %5
  %10 = add nuw i32 %7, 1
  store i32 %10, i32* %6, align 8
  br label %11

11:                                               ; preds = %5, %9
  %12 = phi i32 [ -1, %5 ], [ %10, %9 ]
  %13 = getelementptr inbounds %struct.lhash_st, %struct.lhash_st* %0, i64 0, i32 2
  %14 = load i64, i64* %13, align 8
  %15 = icmp eq i64 %14, 0
  br i1 %15, label %20, label %16

16:                                               ; preds = %11
  %17 = getelementptr inbounds %struct.lhash_st, %struct.lhash_st* %0, i64 0, i32 1
  br label %24

18:                                               ; preds = %33
  %19 = load i32, i32* %6, align 8
  br label %20

20:                                               ; preds = %18, %11
  %21 = phi i32 [ %12, %11 ], [ %19, %18 ]
  %22 = phi i64 [ 0, %11 ], [ %34, %18 ]
  %23 = icmp eq i32 %21, -1
  br i1 %23, label %156, label %44

24:                                               ; preds = %16, %33
  %25 = phi i64 [ %14, %16 ], [ %34, %33 ]
  %26 = phi i64 [ 0, %16 ], [ %35, %33 ]
  %27 = load %struct.lhash_item_st**, %struct.lhash_item_st*** %17, align 8
  %28 = getelementptr inbounds %struct.lhash_item_st*, %struct.lhash_item_st** %27, i64 %26
  %29 = load %struct.lhash_item_st*, %struct.lhash_item_st** %28, align 8
  %30 = icmp eq %struct.lhash_item_st* %29, null
  br i1 %30, label %33, label %37

31:                                               ; preds = %37
  %32 = load i64, i64* %13, align 8
  br label %33

33:                                               ; preds = %31, %24
  %34 = phi i64 [ %32, %31 ], [ %25, %24 ]
  %35 = add nuw i64 %26, 1
  %36 = icmp ult i64 %35, %34
  br i1 %36, label %24, label %18

37:                                               ; preds = %24, %37
  %38 = phi %struct.lhash_item_st* [ %40, %37 ], [ %29, %24 ]
  %39 = getelementptr inbounds %struct.lhash_item_st, %struct.lhash_item_st* %38, i64 0, i32 1
  %40 = load %struct.lhash_item_st*, %struct.lhash_item_st** %39, align 8
  %41 = getelementptr inbounds %struct.lhash_item_st, %struct.lhash_item_st* %38, i64 0, i32 0
  %42 = load i8*, i8** %41, align 8
  tail call void %1(i8* %42, i8* %2) #5
  %43 = icmp eq %struct.lhash_item_st* %40, null
  br i1 %43, label %31, label %37

44:                                               ; preds = %20
  %45 = add i32 %21, -1
  store i32 %45, i32* %6, align 8
  %46 = icmp eq i32 %45, 0
  br i1 %46, label %47, label %156

47:                                               ; preds = %44
  %48 = getelementptr inbounds %struct.lhash_st, %struct.lhash_st* %0, i64 0, i32 0
  %49 = load i64, i64* %48, align 8
  %50 = udiv i64 %49, %22
  %51 = icmp ugt i64 %50, 2
  br i1 %51, label %52, label %102

52:                                               ; preds = %47
  %53 = shl i64 %22, 1
  %54 = icmp ugt i64 %53, %22
  br i1 %54, label %55, label %156

55:                                               ; preds = %52
  %56 = shl i64 %22, 4
  %57 = icmp ugt i64 %53, 2305843009213693951
  br i1 %57, label %156, label %58

58:                                               ; preds = %55
  %59 = tail call i8* @OPENSSL_malloc(i64 %56) #5
  %60 = bitcast i8* %59 to %struct.lhash_item_st**
  %61 = icmp eq i8* %59, null
  br i1 %61, label %156, label %62

62:                                               ; preds = %58
  %63 = icmp eq i64 %56, 0
  br i1 %63, label %65, label %64

64:                                               ; preds = %62
  tail call void @llvm.memset.p0i8.i64(i8* nonnull align 1 %59, i8 0, i64 %56, i1 false) #5
  br label %65

65:                                               ; preds = %64, %62
  %66 = load i64, i64* %13, align 8
  %67 = icmp eq i64 %66, 0
  %68 = getelementptr inbounds %struct.lhash_st, %struct.lhash_st* %0, i64 0, i32 1
  %69 = load %struct.lhash_item_st**, %struct.lhash_item_st*** %68, align 8
  br i1 %67, label %98, label %70

70:                                               ; preds = %65, %93
  %71 = phi %struct.lhash_item_st** [ %94, %93 ], [ %69, %65 ]
  %72 = phi i64 [ %95, %93 ], [ %66, %65 ]
  %73 = phi i64 [ %96, %93 ], [ 0, %65 ]
  %74 = getelementptr inbounds %struct.lhash_item_st*, %struct.lhash_item_st** %71, i64 %73
  %75 = load %struct.lhash_item_st*, %struct.lhash_item_st** %74, align 8
  %76 = icmp eq %struct.lhash_item_st* %75, null
  br i1 %76, label %93, label %77

77:                                               ; preds = %70, %77
  %78 = phi %struct.lhash_item_st* [ %84, %77 ], [ %75, %70 ]
  %79 = getelementptr inbounds %struct.lhash_item_st, %struct.lhash_item_st* %78, i64 0, i32 2
  %80 = load i32, i32* %79, align 8
  %81 = zext i32 %80 to i64
  %82 = urem i64 %81, %53
  %83 = getelementptr inbounds %struct.lhash_item_st, %struct.lhash_item_st* %78, i64 0, i32 1
  %84 = load %struct.lhash_item_st*, %struct.lhash_item_st** %83, align 8
  %85 = getelementptr inbounds %struct.lhash_item_st*, %struct.lhash_item_st** %60, i64 %82
  %86 = bitcast %struct.lhash_item_st** %85 to i64*
  %87 = load i64, i64* %86, align 8
  %88 = bitcast %struct.lhash_item_st** %83 to i64*
  store i64 %87, i64* %88, align 8
  store %struct.lhash_item_st* %78, %struct.lhash_item_st** %85, align 8
  %89 = icmp eq %struct.lhash_item_st* %84, null
  br i1 %89, label %90, label %77

90:                                               ; preds = %77
  %91 = load i64, i64* %13, align 8
  %92 = load %struct.lhash_item_st**, %struct.lhash_item_st*** %68, align 8
  br label %93

93:                                               ; preds = %90, %70
  %94 = phi %struct.lhash_item_st** [ %92, %90 ], [ %71, %70 ]
  %95 = phi i64 [ %91, %90 ], [ %72, %70 ]
  %96 = add nuw i64 %73, 1
  %97 = icmp ult i64 %96, %95
  br i1 %97, label %70, label %98

98:                                               ; preds = %93, %65
  %99 = phi %struct.lhash_item_st** [ %69, %65 ], [ %94, %93 ]
  %100 = bitcast %struct.lhash_item_st** %99 to i8*
  tail call void @OPENSSL_free(i8* %100) #5
  store i64 %53, i64* %13, align 8
  %101 = bitcast %struct.lhash_item_st*** %68 to i8**
  store i8* %59, i8** %101, align 8
  br label %156

102:                                              ; preds = %47
  %103 = icmp ugt i64 %22, %49
  %104 = icmp ugt i64 %22, 16
  %105 = and i1 %104, %103
  br i1 %105, label %106, label %156

106:                                              ; preds = %102
  %107 = lshr i64 %22, 1
  %108 = icmp ugt i64 %107, 16
  %109 = select i1 %108, i64 %107, i64 16
  %110 = shl i64 %109, 3
  %111 = icmp ugt i64 %109, 2305843009213693951
  br i1 %111, label %156, label %112

112:                                              ; preds = %106
  %113 = tail call i8* @OPENSSL_malloc(i64 %110) #5
  %114 = bitcast i8* %113 to %struct.lhash_item_st**
  %115 = icmp eq i8* %113, null
  br i1 %115, label %156, label %116

116:                                              ; preds = %112
  %117 = icmp eq i64 %110, 0
  br i1 %117, label %119, label %118

118:                                              ; preds = %116
  tail call void @llvm.memset.p0i8.i64(i8* nonnull align 1 %113, i8 0, i64 %110, i1 false) #5
  br label %119

119:                                              ; preds = %118, %116
  %120 = load i64, i64* %13, align 8
  %121 = icmp eq i64 %120, 0
  %122 = getelementptr inbounds %struct.lhash_st, %struct.lhash_st* %0, i64 0, i32 1
  %123 = load %struct.lhash_item_st**, %struct.lhash_item_st*** %122, align 8
  br i1 %121, label %152, label %124

124:                                              ; preds = %119, %147
  %125 = phi %struct.lhash_item_st** [ %148, %147 ], [ %123, %119 ]
  %126 = phi i64 [ %149, %147 ], [ %120, %119 ]
  %127 = phi i64 [ %150, %147 ], [ 0, %119 ]
  %128 = getelementptr inbounds %struct.lhash_item_st*, %struct.lhash_item_st** %125, i64 %127
  %129 = load %struct.lhash_item_st*, %struct.lhash_item_st** %128, align 8
  %130 = icmp eq %struct.lhash_item_st* %129, null
  br i1 %130, label %147, label %131

131:                                              ; preds = %124, %131
  %132 = phi %struct.lhash_item_st* [ %138, %131 ], [ %129, %124 ]
  %133 = getelementptr inbounds %struct.lhash_item_st, %struct.lhash_item_st* %132, i64 0, i32 2
  %134 = load i32, i32* %133, align 8
  %135 = zext i32 %134 to i64
  %136 = urem i64 %135, %109
  %137 = getelementptr inbounds %struct.lhash_item_st, %struct.lhash_item_st* %132, i64 0, i32 1
  %138 = load %struct.lhash_item_st*, %struct.lhash_item_st** %137, align 8
  %139 = getelementptr inbounds %struct.lhash_item_st*, %struct.lhash_item_st** %114, i64 %136
  %140 = bitcast %struct.lhash_item_st** %139 to i64*
  %141 = load i64, i64* %140, align 8
  %142 = bitcast %struct.lhash_item_st** %137 to i64*
  store i64 %141, i64* %142, align 8
  store %struct.lhash_item_st* %132, %struct.lhash_item_st** %139, align 8
  %143 = icmp eq %struct.lhash_item_st* %138, null
  br i1 %143, label %144, label %131

144:                                              ; preds = %131
  %145 = load i64, i64* %13, align 8
  %146 = load %struct.lhash_item_st**, %struct.lhash_item_st*** %122, align 8
  br label %147

147:                                              ; preds = %144, %124
  %148 = phi %struct.lhash_item_st** [ %146, %144 ], [ %125, %124 ]
  %149 = phi i64 [ %145, %144 ], [ %126, %124 ]
  %150 = add nuw i64 %127, 1
  %151 = icmp ult i64 %150, %149
  br i1 %151, label %124, label %152

152:                                              ; preds = %147, %119
  %153 = phi %struct.lhash_item_st** [ %123, %119 ], [ %148, %147 ]
  %154 = bitcast %struct.lhash_item_st** %153 to i8*
  tail call void @OPENSSL_free(i8* %154) #5
  store i64 %109, i64* %13, align 8
  %155 = bitcast %struct.lhash_item_st*** %122 to i8**
  store i8* %113, i8** %155, align 8
  br label %156

156:                                              ; preds = %20, %102, %52, %44, %55, %58, %98, %106, %112, %152, %3
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @lh_strhash(i8*) local_unnamed_addr #0 {
  %2 = icmp eq i8* %0, null
  br i1 %2, label %6, label %3

3:                                                ; preds = %1
  %4 = tail call i64 @strlen(i8* nonnull %0) #6
  %5 = tail call i32 @OPENSSL_hash32(i8* nonnull %0, i64 %4) #5
  br label %6

6:                                                ; preds = %1, %3
  %7 = phi i32 [ %5, %3 ], [ 0, %1 ]
  ret i32 %7
}

declare i32 @OPENSSL_hash32(i8*, i64) local_unnamed_addr #1

; Function Attrs: argmemonly nofree nounwind readonly
declare i64 @strlen(i8* nocapture) local_unnamed_addr #3

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #4

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { norecurse nounwind readonly ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { argmemonly nofree nounwind readonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { argmemonly nounwind }
attributes #5 = { nounwind }
attributes #6 = { nounwind readonly }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
