; ModuleID = '../../third_party/blink/renderer/core/fetch/fetch_response_data.cc'
source_filename = "../../third_party/blink/renderer/core/fetch/fetch_response_data.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"class.WTF::AtomicString" = type { %"class.WTF::String" }
%"class.WTF::String" = type { %class.scoped_refptr }
%class.scoped_refptr = type { %"class.WTF::StringImpl"* }
%"class.WTF::StringImpl" = type { i32, i32, %"struct.std::__1::atomic" }
%"struct.std::__1::atomic" = type { %"struct.std::__1::__atomic_base" }
%"struct.std::__1::__atomic_base" = type { %"struct.std::__1::__atomic_base.1" }
%"struct.std::__1::__atomic_base.1" = type { %"struct.std::__1::__cxx_atomic_impl" }
%"struct.std::__1::__cxx_atomic_impl" = type { %"struct.std::__1::__cxx_atomic_base_impl" }
%"struct.std::__1::__cxx_atomic_base_impl" = type { i32 }
%"class.blink::AtomicEntryFlag" = type { %"struct.std::__1::atomic.258" }
%"struct.std::__1::atomic.258" = type { %"struct.std::__1::__atomic_base.259" }
%"struct.std::__1::__atomic_base.259" = type { %"struct.std::__1::__atomic_base.260" }
%"struct.std::__1::__atomic_base.260" = type { %"struct.std::__1::__cxx_atomic_impl.261" }
%"struct.std::__1::__cxx_atomic_impl.261" = type { %"struct.std::__1::__cxx_atomic_base_impl.262" }
%"struct.std::__1::__cxx_atomic_base_impl.262" = type { i32 }
%"class.WTF::ThreadSpecific" = type { %"class.blink::ThreadState"**, %"class.base::ThreadLocalStorage::Slot" }
%"class.blink::ThreadState" = type <{ %"class.std::__1::unique_ptr.34", i32, [4 x i8], %"class.std::__1::unique_ptr.171", %"class.std::__1::unique_ptr.171", i8**, i8, i8, i8, i8, i8, i8, [2 x i8], i64, i64, i32, i32, i32, [4 x i8], %"class.WTF::Deque", %"class.v8::Isolate"*, void (%"class.v8::Isolate"*, %"class.v8::EmbedderGraph"*, i8*)*, %"class.std::__1::unique_ptr.181", %"class.std::__1::unique_ptr.187", %"struct.blink::ThreadState::GCData", %"class.std::__1::unique_ptr.199", %"class.std::__1::unique_ptr.205", %"class.base::JobHandle", %"class.base::JobHandle", %"struct.std::__1::atomic.212", [7 x i8], i64, i8, [7 x i8], i64, %"class.base::TimeTicks", i8, i8, [6 x i8] }>
%"class.std::__1::unique_ptr.34" = type { %"class.std::__1::__compressed_pair.35" }
%"class.std::__1::__compressed_pair.35" = type { %"struct.std::__1::__compressed_pair_elem.36" }
%"struct.std::__1::__compressed_pair_elem.36" = type { %"class.blink::ThreadHeap"* }
%"class.blink::ThreadHeap" = type { %"class.blink::ThreadState"*, %"class.std::__1::unique_ptr.37", %"class.std::__1::unique_ptr.43", %"class.std::__1::unique_ptr.49", %"class.std::__1::unique_ptr.55", %"class.std::__1::unique_ptr.61", %"class.std::__1::unique_ptr.67", %"class.std::__1::unique_ptr.78", %"class.std::__1::unique_ptr.85", %"class.std::__1::unique_ptr.85", %"class.std::__1::unique_ptr.92", %"class.std::__1::unique_ptr.99", %"class.std::__1::unique_ptr.106", %"class.std::__1::unique_ptr.106", %"class.std::__1::unique_ptr.113", %"class.std::__1::unique_ptr.120", %"class.std::__1::unique_ptr.127", %"class.std::__1::unique_ptr.151", %"struct.blink::ThreadHeap::LastAllocatedRegion", [9 x %"class.blink::BaseArena"*], i64, i64 }
%"class.std::__1::unique_ptr.37" = type { %"class.std::__1::__compressed_pair.38" }
%"class.std::__1::__compressed_pair.38" = type { %"struct.std::__1::__compressed_pair_elem.39" }
%"struct.std::__1::__compressed_pair_elem.39" = type { %"class.blink::ThreadHeapStatsCollector"* }
%"class.blink::ThreadHeapStatsCollector" = type opaque
%"class.std::__1::unique_ptr.43" = type { %"class.std::__1::__compressed_pair.44" }
%"class.std::__1::__compressed_pair.44" = type { %"struct.std::__1::__compressed_pair_elem.45" }
%"struct.std::__1::__compressed_pair_elem.45" = type { %"class.blink::RegionTree"* }
%"class.blink::RegionTree" = type opaque
%"class.std::__1::unique_ptr.49" = type { %"class.std::__1::__compressed_pair.50" }
%"class.std::__1::__compressed_pair.50" = type { %"struct.std::__1::__compressed_pair_elem.51" }
%"struct.std::__1::__compressed_pair_elem.51" = type { %"class.blink::PageBloomFilter"* }
%"class.blink::PageBloomFilter" = type opaque
%"class.std::__1::unique_ptr.55" = type { %"class.std::__1::__compressed_pair.56" }
%"class.std::__1::__compressed_pair.56" = type { %"struct.std::__1::__compressed_pair_elem.57" }
%"struct.std::__1::__compressed_pair_elem.57" = type { %"class.blink::PagePool"* }
%"class.blink::PagePool" = type opaque
%"class.std::__1::unique_ptr.61" = type { %"class.std::__1::__compressed_pair.62" }
%"class.std::__1::__compressed_pair.62" = type { %"struct.std::__1::__compressed_pair_elem.63" }
%"struct.std::__1::__compressed_pair_elem.63" = type { %"class.blink::ProcessHeapReporter"* }
%"class.blink::ProcessHeapReporter" = type opaque
%"class.std::__1::unique_ptr.67" = type { %"class.std::__1::__compressed_pair.68" }
%"class.std::__1::__compressed_pair.68" = type { %"struct.std::__1::__compressed_pair_elem.69" }
%"struct.std::__1::__compressed_pair_elem.69" = type { %"class.blink::Worklist"* }
%"class.blink::Worklist" = type { [4 x %"struct.blink::Worklist<blink::TraceDescriptor, 512, 4>::PrivateSegmentHolder"], %"class.blink::Worklist<blink::TraceDescriptor, 512, 4>::GlobalPool" }
%"struct.blink::Worklist<blink::TraceDescriptor, 512, 4>::PrivateSegmentHolder" = type { %"class.blink::Worklist<blink::TraceDescriptor, 512, 4>::Segment"*, %"class.blink::Worklist<blink::TraceDescriptor, 512, 4>::Segment"*, [64 x i8] }
%"class.blink::Worklist<blink::TraceDescriptor, 512, 4>::Segment" = type { %"class.blink::Worklist<blink::TraceDescriptor, 512, 4>::Segment"*, i64, [512 x %"struct.blink::TraceDescriptor"] }
%"struct.blink::TraceDescriptor" = type { i8*, void (%"class.blink::Visitor"*, i8*)* }
%"class.blink::Visitor" = type { i32 (...)**, %"class.blink::ThreadState"* }
%"class.blink::Worklist<blink::TraceDescriptor, 512, 4>::GlobalPool" = type { %"class.base::Lock", %"class.blink::Worklist<blink::TraceDescriptor, 512, 4>::Segment"*, %"struct.std::__1::atomic.70" }
%"class.base::Lock" = type { %"class.base::internal::LockImpl" }
%"class.base::internal::LockImpl" = type { %union.pthread_mutex_t }
%union.pthread_mutex_t = type { %struct.__pthread_mutex_s }
%struct.__pthread_mutex_s = type { i32, i32, i32, i32, i32, i16, i16, %struct.__pthread_internal_list }
%struct.__pthread_internal_list = type { %struct.__pthread_internal_list*, %struct.__pthread_internal_list* }
%"struct.std::__1::atomic.70" = type { %"struct.std::__1::__atomic_base.71" }
%"struct.std::__1::__atomic_base.71" = type { %"struct.std::__1::__atomic_base.72" }
%"struct.std::__1::__atomic_base.72" = type { %"struct.std::__1::__cxx_atomic_impl.73" }
%"struct.std::__1::__cxx_atomic_impl.73" = type { %"struct.std::__1::__cxx_atomic_base_impl.74" }
%"struct.std::__1::__cxx_atomic_base_impl.74" = type { i64 }
%"class.std::__1::unique_ptr.78" = type { %"class.std::__1::__compressed_pair.79" }
%"class.std::__1::__compressed_pair.79" = type { %"struct.std::__1::__compressed_pair_elem.80" }
%"struct.std::__1::__compressed_pair_elem.80" = type { %"class.blink::Worklist.81"* }
%"class.blink::Worklist.81" = type { [4 x %"struct.blink::Worklist<blink::HeapObjectHeader *, 64, 4>::PrivateSegmentHolder"], %"class.blink::Worklist<blink::HeapObjectHeader *, 64, 4>::GlobalPool" }
%"struct.blink::Worklist<blink::HeapObjectHeader *, 64, 4>::PrivateSegmentHolder" = type { %"class.blink::Worklist<blink::HeapObjectHeader *, 64, 4>::Segment"*, %"class.blink::Worklist<blink::HeapObjectHeader *, 64, 4>::Segment"*, [64 x i8] }
%"class.blink::Worklist<blink::HeapObjectHeader *, 64, 4>::Segment" = type opaque
%"class.blink::Worklist<blink::HeapObjectHeader *, 64, 4>::GlobalPool" = type { %"class.base::Lock", %"class.blink::Worklist<blink::HeapObjectHeader *, 64, 4>::Segment"*, %"struct.std::__1::atomic.70" }
%"class.std::__1::unique_ptr.85" = type { %"class.std::__1::__compressed_pair.86" }
%"class.std::__1::__compressed_pair.86" = type { %"struct.std::__1::__compressed_pair_elem.87" }
%"struct.std::__1::__compressed_pair_elem.87" = type { %"class.blink::Worklist.88"* }
%"class.blink::Worklist.88" = type { [4 x %"struct.blink::Worklist<const void *, 16, 4>::PrivateSegmentHolder"], %"class.blink::Worklist<const void *, 16, 4>::GlobalPool" }
%"struct.blink::Worklist<const void *, 16, 4>::PrivateSegmentHolder" = type { %"class.blink::Worklist<const void *, 16, 4>::Segment"*, %"class.blink::Worklist<const void *, 16, 4>::Segment"*, [64 x i8] }
%"class.blink::Worklist<const void *, 16, 4>::Segment" = type { %"class.blink::Worklist<const void *, 16, 4>::Segment"*, i64, [16 x i8*] }
%"class.blink::Worklist<const void *, 16, 4>::GlobalPool" = type { %"class.base::Lock", %"class.blink::Worklist<const void *, 16, 4>::Segment"*, %"struct.std::__1::atomic.70" }
%"class.std::__1::unique_ptr.92" = type { %"class.std::__1::__compressed_pair.93" }
%"class.std::__1::__compressed_pair.93" = type { %"struct.std::__1::__compressed_pair_elem.94" }
%"struct.std::__1::__compressed_pair_elem.94" = type { %"class.blink::Worklist.95"* }
%"class.blink::Worklist.95" = type { [4 x %"struct.blink::Worklist<blink::CustomCallbackItem, 64, 4>::PrivateSegmentHolder"], %"class.blink::Worklist<blink::CustomCallbackItem, 64, 4>::GlobalPool" }
%"struct.blink::Worklist<blink::CustomCallbackItem, 64, 4>::PrivateSegmentHolder" = type { %"class.blink::Worklist<blink::CustomCallbackItem, 64, 4>::Segment"*, %"class.blink::Worklist<blink::CustomCallbackItem, 64, 4>::Segment"*, [64 x i8] }
%"class.blink::Worklist<blink::CustomCallbackItem, 64, 4>::Segment" = type opaque
%"class.blink::Worklist<blink::CustomCallbackItem, 64, 4>::GlobalPool" = type { %"class.base::Lock", %"class.blink::Worklist<blink::CustomCallbackItem, 64, 4>::Segment"*, %"struct.std::__1::atomic.70" }
%"class.std::__1::unique_ptr.99" = type { %"class.std::__1::__compressed_pair.100" }
%"class.std::__1::__compressed_pair.100" = type { %"struct.std::__1::__compressed_pair_elem.101" }
%"struct.std::__1::__compressed_pair_elem.101" = type { %"class.blink::Worklist.102"* }
%"class.blink::Worklist.102" = type { [4 x %"struct.blink::Worklist<const void *const *, 256, 4>::PrivateSegmentHolder"], %"class.blink::Worklist<const void *const *, 256, 4>::GlobalPool" }
%"struct.blink::Worklist<const void *const *, 256, 4>::PrivateSegmentHolder" = type { %"class.blink::Worklist<const void *const *, 256, 4>::Segment"*, %"class.blink::Worklist<const void *const *, 256, 4>::Segment"*, [64 x i8] }
%"class.blink::Worklist<const void *const *, 256, 4>::Segment" = type opaque
%"class.blink::Worklist<const void *const *, 256, 4>::GlobalPool" = type { %"class.base::Lock", %"class.blink::Worklist<const void *const *, 256, 4>::Segment"*, %"struct.std::__1::atomic.70" }
%"class.std::__1::unique_ptr.106" = type { %"class.std::__1::__compressed_pair.107" }
%"class.std::__1::__compressed_pair.107" = type { %"struct.std::__1::__compressed_pair_elem.108" }
%"struct.std::__1::__compressed_pair_elem.108" = type { %"class.blink::Worklist.109"* }
%"class.blink::Worklist.109" = type { [4 x %"struct.blink::Worklist<blink::EphemeronPairItem, 64, 4>::PrivateSegmentHolder"], %"class.blink::Worklist<blink::EphemeronPairItem, 64, 4>::GlobalPool" }
%"struct.blink::Worklist<blink::EphemeronPairItem, 64, 4>::PrivateSegmentHolder" = type { %"class.blink::Worklist<blink::EphemeronPairItem, 64, 4>::Segment"*, %"class.blink::Worklist<blink::EphemeronPairItem, 64, 4>::Segment"*, [64 x i8] }
%"class.blink::Worklist<blink::EphemeronPairItem, 64, 4>::Segment" = type opaque
%"class.blink::Worklist<blink::EphemeronPairItem, 64, 4>::GlobalPool" = type { %"class.base::Lock", %"class.blink::Worklist<blink::EphemeronPairItem, 64, 4>::Segment"*, %"struct.std::__1::atomic.70" }
%"class.std::__1::unique_ptr.113" = type { %"class.std::__1::__compressed_pair.114" }
%"class.std::__1::__compressed_pair.114" = type { %"struct.std::__1::__compressed_pair_elem.115" }
%"struct.std::__1::__compressed_pair_elem.115" = type { %"class.blink::Worklist.116"* }
%"class.blink::Worklist.116" = type { [4 x %"struct.blink::Worklist<const blink::TraceWrapperV8Reference<v8::Value> *, 16, 4>::PrivateSegmentHolder"], %"class.blink::Worklist<const blink::TraceWrapperV8Reference<v8::Value> *, 16, 4>::GlobalPool" }
%"struct.blink::Worklist<const blink::TraceWrapperV8Reference<v8::Value> *, 16, 4>::PrivateSegmentHolder" = type { %"class.blink::Worklist<const blink::TraceWrapperV8Reference<v8::Value> *, 16, 4>::Segment"*, %"class.blink::Worklist<const blink::TraceWrapperV8Reference<v8::Value> *, 16, 4>::Segment"*, [64 x i8] }
%"class.blink::Worklist<const blink::TraceWrapperV8Reference<v8::Value> *, 16, 4>::Segment" = type opaque
%"class.blink::Worklist<const blink::TraceWrapperV8Reference<v8::Value> *, 16, 4>::GlobalPool" = type { %"class.base::Lock", %"class.blink::Worklist<const blink::TraceWrapperV8Reference<v8::Value> *, 16, 4>::Segment"*, %"struct.std::__1::atomic.70" }
%"class.std::__1::unique_ptr.120" = type { %"class.std::__1::__compressed_pair.121" }
%"class.std::__1::__compressed_pair.121" = type { %"struct.std::__1::__compressed_pair_elem.122" }
%"struct.std::__1::__compressed_pair_elem.122" = type { %"class.blink::Worklist.123"* }
%"class.blink::Worklist.123" = type { [4 x %"struct.blink::Worklist<blink::NotSafeToConcurrentlyTraceItem, 64, 4>::PrivateSegmentHolder"], %"class.blink::Worklist<blink::NotSafeToConcurrentlyTraceItem, 64, 4>::GlobalPool" }
%"struct.blink::Worklist<blink::NotSafeToConcurrentlyTraceItem, 64, 4>::PrivateSegmentHolder" = type { %"class.blink::Worklist<blink::NotSafeToConcurrentlyTraceItem, 64, 4>::Segment"*, %"class.blink::Worklist<blink::NotSafeToConcurrentlyTraceItem, 64, 4>::Segment"*, [64 x i8] }
%"class.blink::Worklist<blink::NotSafeToConcurrentlyTraceItem, 64, 4>::Segment" = type { %"class.blink::Worklist<blink::NotSafeToConcurrentlyTraceItem, 64, 4>::Segment"*, i64, [64 x %"struct.blink::NotSafeToConcurrentlyTraceItem"] }
%"struct.blink::NotSafeToConcurrentlyTraceItem" = type { %"struct.blink::TraceDescriptor", i64 }
%"class.blink::Worklist<blink::NotSafeToConcurrentlyTraceItem, 64, 4>::GlobalPool" = type { %"class.base::Lock", %"class.blink::Worklist<blink::NotSafeToConcurrentlyTraceItem, 64, 4>::Segment"*, %"struct.std::__1::atomic.70" }
%"class.std::__1::unique_ptr.127" = type { %"class.std::__1::__compressed_pair.128" }
%"class.std::__1::__compressed_pair.128" = type { %"struct.std::__1::__compressed_pair_elem.129" }
%"struct.std::__1::__compressed_pair_elem.129" = type { %"class.blink::WeakContainersWorklist"* }
%"class.blink::WeakContainersWorklist" = type { %"class.WTF::Mutex", %"class.std::__1::unordered_set" }
%"class.WTF::Mutex" = type { %"class.WTF::MutexBase" }
%"class.WTF::MutexBase" = type { %"struct.WTF::PlatformMutex" }
%"struct.WTF::PlatformMutex" = type { %union.pthread_mutex_t }
%"class.std::__1::unordered_set" = type { %"class.std::__1::__hash_table" }
%"class.std::__1::__hash_table" = type <{ %"class.std::__1::unique_ptr.130", %"class.std::__1::__compressed_pair.138", %"class.std::__1::__compressed_pair.143", %"class.std::__1::__compressed_pair.145", [4 x i8] }>
%"class.std::__1::unique_ptr.130" = type { %"class.std::__1::__compressed_pair.131" }
%"class.std::__1::__compressed_pair.131" = type { %"struct.std::__1::__compressed_pair_elem.132", %"struct.std::__1::__compressed_pair_elem.133" }
%"struct.std::__1::__compressed_pair_elem.132" = type { %"struct.std::__1::__hash_node_base"** }
%"struct.std::__1::__hash_node_base" = type { %"struct.std::__1::__hash_node_base"* }
%"struct.std::__1::__compressed_pair_elem.133" = type { %"class.std::__1::__bucket_list_deallocator" }
%"class.std::__1::__bucket_list_deallocator" = type { %"class.std::__1::__compressed_pair.134" }
%"class.std::__1::__compressed_pair.134" = type { %"struct.std::__1::__compressed_pair_elem.14" }
%"struct.std::__1::__compressed_pair_elem.14" = type { i64 }
%"class.std::__1::__compressed_pair.138" = type { %"struct.std::__1::__compressed_pair_elem.139" }
%"struct.std::__1::__compressed_pair_elem.139" = type { %"struct.std::__1::__hash_node_base" }
%"class.std::__1::__compressed_pair.143" = type { %"struct.std::__1::__compressed_pair_elem.14" }
%"class.std::__1::__compressed_pair.145" = type { %"struct.std::__1::__compressed_pair_elem.146" }
%"struct.std::__1::__compressed_pair_elem.146" = type { float }
%"class.std::__1::unique_ptr.151" = type { %"class.std::__1::__compressed_pair.152" }
%"class.std::__1::__compressed_pair.152" = type { %"struct.std::__1::__compressed_pair_elem.153" }
%"struct.std::__1::__compressed_pair_elem.153" = type { %"class.blink::HeapCompact"* }
%"class.blink::HeapCompact" = type <{ %"class.blink::ThreadHeap"*, %"class.std::__1::unique_ptr.154", i8, [7 x i8], i64, i64, i32, [4 x i8], i64, i8, [7 x i8] }>
%"class.std::__1::unique_ptr.154" = type { %"class.std::__1::__compressed_pair.155" }
%"class.std::__1::__compressed_pair.155" = type { %"struct.std::__1::__compressed_pair_elem.156" }
%"struct.std::__1::__compressed_pair_elem.156" = type { %"class.blink::HeapCompact::MovableObjectFixups"* }
%"class.blink::HeapCompact::MovableObjectFixups" = type opaque
%"struct.blink::ThreadHeap::LastAllocatedRegion" = type { i8*, i64 }
%"class.blink::BaseArena" = type <{ i32 (...)**, %"class.blink::PageStackThreadSafe", %"class.blink::PageStackThreadSafe", %"class.blink::PageStackThreadSafe", %"class.blink::PageStackThreadSafe", %"class.blink::ThreadState"*, i32, [4 x i8] }>
%"class.blink::PageStackThreadSafe" = type { %"class.blink::PageStack", %"class.WTF::Mutex" }
%"class.blink::PageStack" = type { %"class.WTF::Vector.163" }
%"class.WTF::Vector.163" = type { %"class.WTF::VectorBuffer.164" }
%"class.WTF::VectorBuffer.164" = type { %"class.WTF::VectorBufferBase.165" }
%"class.WTF::VectorBufferBase.165" = type { %"class.blink::BasePage"**, i32, i32 }
%"class.blink::BasePage" = type <{ i32 (...)**, %"class.blink::PageMemory"*, %"class.blink::BaseArena"*, %"class.blink::ThreadState"*, i64, i8, i8, i8, [5 x i8] }>
%"class.blink::PageMemory" = type opaque
%"class.std::__1::unique_ptr.171" = type { %"class.std::__1::__compressed_pair.172" }
%"class.std::__1::__compressed_pair.172" = type { %"struct.std::__1::__compressed_pair_elem.173" }
%"struct.std::__1::__compressed_pair_elem.173" = type { %"class.blink::PersistentRegion"* }
%"class.blink::PersistentRegion" = type { %"class.blink::PersistentRegionBase" }
%"class.blink::PersistentRegionBase" = type { %"class.blink::PersistentNode"*, %"struct.blink::PersistentNodeSlots"* }
%"class.blink::PersistentNode" = type { i8*, void (%"class.blink::Visitor"*, i8*)* }
%"struct.blink::PersistentNodeSlots" = type { %"struct.blink::PersistentNodeSlots"*, [256 x %"class.blink::PersistentNode"] }
%"class.WTF::Deque" = type { %"class.WTF::Deque<std::__1::pair<void *, bool (*)(const blink::LivenessBroker &, void *)>, 0, WTF::PartitionAllocator>::BackingBuffer", i32, i32 }
%"class.WTF::Deque<std::__1::pair<void *, bool (*)(const blink::LivenessBroker &, void *)>, 0, WTF::PartitionAllocator>::BackingBuffer" = type { %"class.WTF::VectorBuffer.179" }
%"class.WTF::VectorBuffer.179" = type { %"class.WTF::VectorBufferBase.180" }
%"class.WTF::VectorBufferBase.180" = type { %"struct.std::__1::pair"*, i32, i32 }
%"struct.std::__1::pair" = type { i8*, i1 (%"class.blink::LivenessBroker"*, i8*)* }
%"class.blink::LivenessBroker" = type { i8 }
%"class.v8::Isolate" = type { i8 }
%"class.v8::EmbedderGraph" = type opaque
%"class.std::__1::unique_ptr.181" = type { %"class.std::__1::__compressed_pair.182" }
%"class.std::__1::__compressed_pair.182" = type { %"struct.std::__1::__compressed_pair_elem.183" }
%"struct.std::__1::__compressed_pair_elem.183" = type { %"class.blink::UnifiedHeapController"* }
%"class.blink::UnifiedHeapController" = type opaque
%"class.std::__1::unique_ptr.187" = type { %"class.std::__1::__compressed_pair.188" }
%"class.std::__1::__compressed_pair.188" = type { %"struct.std::__1::__compressed_pair_elem.189" }
%"struct.std::__1::__compressed_pair_elem.189" = type { %"class.v8::EmbedderRootsHandler"* }
%"class.v8::EmbedderRootsHandler" = type { i32 (...)** }
%"struct.blink::ThreadState::GCData" = type { i32, i32, i32, i32, %"class.std::__1::unique_ptr.193" }
%"class.std::__1::unique_ptr.193" = type { %"class.std::__1::__compressed_pair.194" }
%"class.std::__1::__compressed_pair.194" = type { %"struct.std::__1::__compressed_pair_elem.195" }
%"struct.std::__1::__compressed_pair_elem.195" = type { %"class.blink::MarkingVisitor"* }
%"class.blink::MarkingVisitor" = type { %"class.blink::MarkingVisitorBase", %"class.blink::MarkingVisitor::RecentlyRetracedWeakContainers" }
%"class.blink::MarkingVisitorBase" = type { %"class.blink::Visitor", %"class.blink::Worklist<blink::TraceDescriptor, 512, 4>::View", %"class.blink::Worklist<blink::HeapObjectHeader *, 64, 4>::View", %"class.blink::Worklist<const void *, 16, 4>::View", %"class.blink::Worklist<blink::CustomCallbackItem, 64, 4>::View", %"class.blink::Worklist<const void *const *, 256, 4>::View", %"class.blink::Worklist<blink::EphemeronPairItem, 64, 4>::View", %"class.blink::Worklist<blink::EphemeronPairItem, 64, 4>::View", %"class.blink::WeakContainersWorklist"*, i64, i32, i32 }
%"class.blink::Worklist<blink::TraceDescriptor, 512, 4>::View" = type <{ %"class.blink::Worklist"*, i32, [4 x i8] }>
%"class.blink::Worklist<blink::HeapObjectHeader *, 64, 4>::View" = type <{ %"class.blink::Worklist.81"*, i32, [4 x i8] }>
%"class.blink::Worklist<const void *, 16, 4>::View" = type <{ %"class.blink::Worklist.88"*, i32, [4 x i8] }>
%"class.blink::Worklist<blink::CustomCallbackItem, 64, 4>::View" = type <{ %"class.blink::Worklist.95"*, i32, [4 x i8] }>
%"class.blink::Worklist<const void *const *, 256, 4>::View" = type <{ %"class.blink::Worklist.102"*, i32, [4 x i8] }>
%"class.blink::Worklist<blink::EphemeronPairItem, 64, 4>::View" = type <{ %"class.blink::Worklist.109"*, i32, [4 x i8] }>
%"class.blink::MarkingVisitor::RecentlyRetracedWeakContainers" = type { %"class.std::__1::vector", i64 }
%"class.std::__1::vector" = type { %"class.std::__1::__vector_base" }
%"class.std::__1::__vector_base" = type { %"class.blink::HeapObjectHeader"**, %"class.blink::HeapObjectHeader"**, %"class.std::__1::__compressed_pair.361" }
%"class.blink::HeapObjectHeader" = type { i32, i16, i16 }
%"class.std::__1::__compressed_pair.361" = type { %"struct.std::__1::__compressed_pair_elem.362" }
%"struct.std::__1::__compressed_pair_elem.362" = type { %"class.blink::HeapObjectHeader"** }
%"class.std::__1::unique_ptr.199" = type { %"class.std::__1::__compressed_pair.200" }
%"class.std::__1::__compressed_pair.200" = type { %"struct.std::__1::__compressed_pair_elem.201" }
%"struct.std::__1::__compressed_pair_elem.201" = type { %"class.blink::ThreadState::IncrementalMarkingScheduler"* }
%"class.blink::ThreadState::IncrementalMarkingScheduler" = type opaque
%"class.std::__1::unique_ptr.205" = type { %"class.std::__1::__compressed_pair.206" }
%"class.std::__1::__compressed_pair.206" = type { %"struct.std::__1::__compressed_pair_elem.207" }
%"struct.std::__1::__compressed_pair_elem.207" = type { %"class.blink::MarkingSchedulingOracle"* }
%"class.blink::MarkingSchedulingOracle" = type opaque
%"class.base::JobHandle" = type { %class.scoped_refptr.211 }
%class.scoped_refptr.211 = type { %"class.base::internal::JobTaskSource"* }
%"class.base::internal::JobTaskSource" = type opaque
%"struct.std::__1::atomic.212" = type { %"struct.std::__1::__atomic_base.213" }
%"struct.std::__1::__atomic_base.213" = type { %"struct.std::__1::__cxx_atomic_impl.214" }
%"struct.std::__1::__cxx_atomic_impl.214" = type { %"struct.std::__1::__cxx_atomic_base_impl.215" }
%"struct.std::__1::__cxx_atomic_base_impl.215" = type { i8 }
%"class.base::TimeTicks" = type { %"class.base::time_internal::TimeBase" }
%"class.base::time_internal::TimeBase" = type { i64 }
%"class.base::ThreadLocalStorage::Slot" = type { i32, i32 }
%"struct.blink::GCInfo" = type { void (%"class.blink::Visitor"*, i8*)*, void (i8*)*, { i8*, i8 } (i8*)*, i8 }
%"class.blink::GCInfoTable" = type { %"struct.blink::GCInfo"**, i32, i32, %"class.WTF::Mutex" }
%"class.blink::FetchResponseData" = type { i32, i64, i32, %"class.std::__1::unique_ptr", %"class.WTF::Vector", i16, %"class.WTF::AtomicString", %"class.blink::Member", %"class.blink::Member.16", %"class.blink::Member.18", %"class.WTF::String", %"class.WTF::AtomicString", %"class.base::Time", %"class.WTF::String", %"class.std::__1::set", i32, %"class.WTF::AtomicString", i8, i8, %"class.std::__1::unique_ptr.286" }
%"class.std::__1::unique_ptr" = type { %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { i32* }
%"class.WTF::Vector" = type { %"class.WTF::VectorBuffer" }
%"class.WTF::VectorBuffer" = type { %"class.WTF::VectorBufferBase" }
%"class.WTF::VectorBufferBase" = type { %"class.blink::KURL"*, i32, i32 }
%"class.blink::KURL" = type { i8, i8, %"class.WTF::String", %"struct.url::Parsed", %"class.WTF::String", %"class.std::__1::unique_ptr.2" }
%"struct.url::Parsed" = type { %"struct.url::Component", %"struct.url::Component", %"struct.url::Component", %"struct.url::Component", %"struct.url::Component", %"struct.url::Component", %"struct.url::Component", %"struct.url::Component", i8, %"struct.url::Parsed"* }
%"struct.url::Component" = type { i32, i32 }
%"class.std::__1::unique_ptr.2" = type { %"class.std::__1::__compressed_pair.3" }
%"class.std::__1::__compressed_pair.3" = type { %"struct.std::__1::__compressed_pair_elem.4" }
%"struct.std::__1::__compressed_pair_elem.4" = type { %"class.blink::KURL"* }
%"class.blink::Member" = type { %"class.blink::MemberBase" }
%"class.blink::MemberBase" = type { %"class.blink::FetchHeaderList"* }
%"class.blink::FetchHeaderList" = type { %"class.std::__1::multimap" }
%"class.std::__1::multimap" = type { %"class.std::__1::__tree" }
%"class.std::__1::__tree" = type { %"class.std::__1::__tree_end_node"*, %"class.std::__1::__compressed_pair.10", %"class.std::__1::__compressed_pair.13" }
%"class.std::__1::__tree_end_node" = type { %"class.std::__1::__tree_node_base"* }
%"class.std::__1::__tree_node_base" = type <{ %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_end_node"*, i8, [7 x i8] }>
%"class.std::__1::__compressed_pair.10" = type { %"struct.std::__1::__compressed_pair_elem.11" }
%"struct.std::__1::__compressed_pair_elem.11" = type { %"class.std::__1::__tree_end_node" }
%"class.std::__1::__compressed_pair.13" = type { %"struct.std::__1::__compressed_pair_elem.14" }
%"class.blink::Member.16" = type { %"class.blink::MemberBase.17" }
%"class.blink::MemberBase.17" = type { %"class.blink::FetchResponseData"* }
%"class.blink::Member.18" = type { %"class.blink::MemberBase.19" }
%"class.blink::MemberBase.19" = type { %"class.blink::BodyStreamBuffer"* }
%"class.blink::BodyStreamBuffer" = type <{ %"class.blink::UnderlyingSourceBase", %"class.blink::BytesConsumer::Client", %"class.blink::Member.29", %"class.blink::Member.220", %"class.blink::Member.222", %"class.blink::Member.224", %"class.blink::Member.228", %"class.blink::Member.232", %"class.blink::Member.274", %class.scoped_refptr.276, i8, i8, i8, i8, [4 x i8] }>
%"class.blink::UnderlyingSourceBase" = type { %"class.blink::ScriptWrappable", %"class.blink::ExecutionContextLifecycleObserver.base", %"class.blink::Member.27" }
%"class.blink::ScriptWrappable" = type { %"class.blink::NameClient", %"class.blink::TraceWrapperV8Reference" }
%"class.blink::NameClient" = type { i32 (...)** }
%"class.blink::TraceWrapperV8Reference" = type { %"class.v8::TracedReference" }
%"class.v8::TracedReference" = type { %"class.v8::BasicTracedReference" }
%"class.v8::BasicTracedReference" = type { %"class.v8::TracedReferenceBase" }
%"class.v8::TracedReferenceBase" = type { i64* }
%"class.blink::ExecutionContextLifecycleObserver.base" = type <{ %"class.blink::ContextLifecycleObserver", i32 }>
%"class.blink::ContextLifecycleObserver" = type { %"class.blink::GarbageCollectedMixin", %"class.blink::WeakMember" }
%"class.blink::GarbageCollectedMixin" = type { i32 (...)** }
%"class.blink::WeakMember" = type { %"class.blink::MemberBase.22" }
%"class.blink::MemberBase.22" = type { %"class.blink::ContextLifecycleNotifier"* }
%"class.blink::ContextLifecycleNotifier" = type { %"class.blink::GarbageCollectedMixin", %"class.blink::HeapObserverSet" }
%"class.blink::HeapObserverSet" = type { i32, [4 x i8], %"class.blink::HeapHashSet" }
%"class.blink::HeapHashSet" = type { %"class.WTF::HashSet" }
%"class.WTF::HashSet" = type { %"class.WTF::HashTable" }
%"class.WTF::HashTable" = type <{ %"class.blink::WeakMember.26"*, i32, i32, i32, [4 x i8] }>
%"class.blink::WeakMember.26" = type opaque
%"class.blink::Member.27" = type { %"class.blink::MemberBase.28" }
%"class.blink::MemberBase.28" = type { %"class.blink::ReadableStreamDefaultControllerWithScriptScope"* }
%"class.blink::ReadableStreamDefaultControllerWithScriptScope" = type opaque
%"class.blink::BytesConsumer::Client" = type { %"class.blink::GarbageCollectedMixin" }
%"class.blink::Member.29" = type { %"class.blink::MemberBase.30" }
%"class.blink::MemberBase.30" = type { %"class.blink::ScriptState"* }
%"class.blink::ScriptState" = type { %"class.v8::Isolate"*, %"class.blink::ScopedPersistent", %class.scoped_refptr.33, %"class.blink::Member.216", %"class.blink::SelfKeepAlive", %"class.util::TokenType" }
%"class.blink::ScopedPersistent" = type { %"class.v8::Persistent" }
%"class.v8::Persistent" = type { %"class.v8::PersistentBase" }
%"class.v8::PersistentBase" = type { %"class.v8::Context"* }
%"class.v8::Context" = type { i8 }
%class.scoped_refptr.33 = type { %"class.blink::DOMWrapperWorld"* }
%"class.blink::DOMWrapperWorld" = type { %"class.WTF::RefCounted", i32, i32, %"class.blink::Persistent" }
%"class.WTF::RefCounted" = type { %"class.base::RefCounted" }
%"class.base::RefCounted" = type { %"class.base::subtle::RefCountedBase" }
%"class.base::subtle::RefCountedBase" = type { i32 }
%"class.blink::Persistent" = type { %"class.blink::PersistentBase" }
%"class.blink::PersistentBase" = type { %"class.blink::DOMDataStore"*, %"class.blink::PersistentNodePtr" }
%"class.blink::DOMDataStore" = type opaque
%"class.blink::PersistentNodePtr" = type { %"class.blink::PersistentNode"* }
%"class.blink::Member.216" = type { %"class.blink::MemberBase.217" }
%"class.blink::MemberBase.217" = type { %"class.blink::V8PerContextData"* }
%"class.blink::V8PerContextData" = type opaque
%"class.blink::SelfKeepAlive" = type { %"class.blink::Persistent.218" }
%"class.blink::Persistent.218" = type { %"class.blink::PersistentBase.219" }
%"class.blink::PersistentBase.219" = type { %"class.blink::ScriptState"*, %"class.blink::PersistentNodePtr" }
%"class.util::TokenType" = type { %"class.base::StrongAlias" }
%"class.base::StrongAlias" = type { %"class.base::UnguessableToken" }
%"class.base::UnguessableToken" = type { %"class.base::Token" }
%"class.base::Token" = type { i64, i64 }
%"class.blink::Member.220" = type { %"class.blink::MemberBase.221" }
%"class.blink::MemberBase.221" = type { %"class.blink::ReadableStream"* }
%"class.blink::ReadableStream" = type opaque
%"class.blink::Member.222" = type { %"class.blink::MemberBase.223" }
%"class.blink::MemberBase.223" = type { %"class.blink::BytesUploader"* }
%"class.blink::BytesUploader" = type opaque
%"class.blink::Member.224" = type { %"class.blink::MemberBase.225" }
%"class.blink::MemberBase.225" = type { %"class.blink::BytesConsumer"* }
%"class.blink::BytesConsumer" = type { i32 (...)** }
%"class.blink::Member.228" = type { %"class.blink::MemberBase.229" }
%"class.blink::MemberBase.229" = type { %"class.blink::FetchDataLoader"* }
%"class.blink::FetchDataLoader" = type { i32 (...)** }
%"class.blink::Member.232" = type { %"class.blink::MemberBase.233" }
%"class.blink::MemberBase.233" = type { %"class.blink::AbortSignal"* }
%"class.blink::AbortSignal" = type { %"class.blink::EventTargetWithInlineData", i8, %"class.WTF::Vector.254", %"class.blink::HeapVector.265", %"class.blink::Member.272" }
%"class.blink::EventTargetWithInlineData" = type { %"class.blink::EventTarget", %"class.blink::EventTargetData" }
%"class.blink::EventTarget" = type { %"class.blink::ScriptWrappable" }
%"class.blink::EventTargetData" = type { %"class.blink::EventListenerMap", %"class.std::__1::unique_ptr.247" }
%"class.blink::EventListenerMap" = type { %"class.blink::HeapVector" }
%"class.blink::HeapVector" = type { %"class.WTF::Vector.238" }
%"class.WTF::Vector.238" = type { %"class.WTF::VectorBuffer.239" }
%"class.WTF::VectorBuffer.239" = type { %"class.WTF::VectorBufferBase.240", [32 x i8] }
%"class.WTF::VectorBufferBase.240" = type { %"struct.std::__1::pair.241"*, i32, i32 }
%"struct.std::__1::pair.241" = type { %"class.WTF::AtomicString", %"class.blink::Member.242" }
%"class.blink::Member.242" = type { %"class.blink::MemberBase.243" }
%"class.blink::MemberBase.243" = type { %"class.blink::HeapVector.244"* }
%"class.blink::HeapVector.244" = type opaque
%"class.std::__1::unique_ptr.247" = type { %"class.std::__1::__compressed_pair.248" }
%"class.std::__1::__compressed_pair.248" = type { %"struct.std::__1::__compressed_pair_elem.249" }
%"struct.std::__1::__compressed_pair_elem.249" = type { %"class.WTF::Vector.250"* }
%"class.WTF::Vector.250" = type opaque
%"class.WTF::Vector.254" = type { %"class.WTF::VectorBuffer.255" }
%"class.WTF::VectorBuffer.255" = type { %"class.WTF::VectorBufferBase.256" }
%"class.WTF::VectorBufferBase.256" = type { %"class.base::OnceCallback"*, i32, i32 }
%"class.base::OnceCallback" = type { %"class.base::internal::CallbackBase" }
%"class.base::internal::CallbackBase" = type { %class.scoped_refptr.257 }
%class.scoped_refptr.257 = type { %"class.base::internal::BindStateBase"* }
%"class.base::internal::BindStateBase" = type { %"class.base::RefCountedThreadSafe", void ()*, void (%"class.base::internal::BindStateBase"*)*, i1 (%"class.base::internal::BindStateBase"*, i32)* }
%"class.base::RefCountedThreadSafe" = type { %"class.base::subtle::RefCountedThreadSafeBase" }
%"class.base::subtle::RefCountedThreadSafeBase" = type { %"class.base::AtomicRefCount" }
%"class.base::AtomicRefCount" = type { %"struct.std::__1::atomic.258" }
%"class.blink::HeapVector.265" = type { %"class.WTF::Vector.268" }
%"class.WTF::Vector.268" = type { %"class.WTF::VectorBuffer.269" }
%"class.WTF::VectorBuffer.269" = type { %"class.WTF::VectorBufferBase.270" }
%"class.WTF::VectorBufferBase.270" = type { %"class.blink::Member.232"*, i32, i32 }
%"class.blink::Member.272" = type { %"class.blink::MemberBase.273" }
%"class.blink::MemberBase.273" = type { %"class.blink::ExecutionContext"* }
%"class.blink::ExecutionContext" = type <{ %"class.blink::Supplementable", %"class.blink::MojoBindingContext", %"class.blink::ConsoleLogger", %"class.blink::UseCounter", %"class.blink::FeatureContext", %"class.v8::Isolate"*, %"class.blink::SecurityContext", %"class.blink::Member.330", i32, i8, [3 x i8], %"class.blink::HeapVector.332", i32, i8, i8, i8, i8, i8, i8, [6 x i8], %"class.blink::Member.340", %"class.blink::Member.342", %"class.blink::DOMTimerCoordinator", i32, [4 x i8], %"class.std::__1::unique_ptr.351", %"class.blink::Member.357", %"class.blink::Member.359", i8, [7 x i8] }>
%"class.blink::Supplementable" = type { %"class.blink::GarbageCollectedMixin", %"class.blink::HeapHashMap" }
%"class.blink::HeapHashMap" = type { %"class.WTF::HashMap" }
%"class.WTF::HashMap" = type { %"class.WTF::HashTable.300" }
%"class.WTF::HashTable.300" = type <{ %"struct.WTF::KeyValuePair"*, i32, i32, i32, [4 x i8] }>
%"struct.WTF::KeyValuePair" = type opaque
%"class.blink::MojoBindingContext" = type { %"class.blink::ContextLifecycleNotifier", %"class.blink::Supplementable.302" }
%"class.blink::Supplementable.302" = type { %"class.blink::GarbageCollectedMixin", %"class.blink::HeapHashMap.303" }
%"class.blink::HeapHashMap.303" = type { %"class.WTF::HashMap.306" }
%"class.WTF::HashMap.306" = type { %"class.WTF::HashTable.307" }
%"class.WTF::HashTable.307" = type <{ %"struct.WTF::KeyValuePair.309"*, i32, i32, i32, [4 x i8] }>
%"struct.WTF::KeyValuePair.309" = type { i8*, %"class.blink::Member.513" }
%"class.blink::Member.513" = type { %"class.blink::MemberBase.514" }
%"class.blink::MemberBase.514" = type { %"class.blink::Supplement"* }
%"class.blink::Supplement" = type { %"class.blink::GarbageCollectedMixin", %"class.blink::Member.515" }
%"class.blink::Member.515" = type { %"class.blink::MemberBase.516" }
%"class.blink::MemberBase.516" = type { %"class.blink::MojoBindingContext"* }
%"class.blink::ConsoleLogger" = type { %"class.blink::GarbageCollectedMixin" }
%"class.blink::UseCounter" = type { %"class.blink::GarbageCollectedMixin" }
%"class.blink::FeatureContext" = type { i32 (...)** }
%"class.blink::SecurityContext" = type { i32 (...)**, i32, %class.scoped_refptr.310, %"class.std::__1::unique_ptr.314", %"class.std::__1::unique_ptr.314", %"class.std::__1::unique_ptr.320", %"class.std::__1::unique_ptr.320", %"class.blink::Member.272", i32, [4 x i8], %"class.WTF::HashSet.326", i32, i32 }
%class.scoped_refptr.310 = type { %"class.blink::SecurityOrigin"* }
%"class.blink::SecurityOrigin" = type { %"class.WTF::RefCounted.311", %"class.WTF::String", %"class.WTF::String", %"class.WTF::String", i16, %"class.absl::optional", i8, i8, i8, i8, i8, i8, %"class.base::UnguessableToken", %class.scoped_refptr.313 }
%"class.WTF::RefCounted.311" = type { %"class.base::RefCounted.312" }
%"class.base::RefCounted.312" = type { %"class.base::subtle::RefCountedBase" }
%"class.absl::optional" = type { %"class.absl::optional_internal::optional_data" }
%"class.absl::optional_internal::optional_data" = type { %"class.absl::optional_internal::optional_data_base" }
%"class.absl::optional_internal::optional_data_base" = type { %"class.absl::optional_internal::optional_data_dtor_base" }
%"class.absl::optional_internal::optional_data_dtor_base" = type { i8, %union.anon.294 }
%union.anon.294 = type { %"class.url::Origin::Nonce" }
%"class.url::Origin::Nonce" = type { %"class.base::UnguessableToken" }
%class.scoped_refptr.313 = type { %"class.blink::SecurityOrigin"* }
%"class.std::__1::unique_ptr.314" = type { %"class.std::__1::__compressed_pair.315" }
%"class.std::__1::__compressed_pair.315" = type { %"struct.std::__1::__compressed_pair_elem.316" }
%"struct.std::__1::__compressed_pair_elem.316" = type { %"class.blink::PermissionsPolicy"* }
%"class.blink::PermissionsPolicy" = type opaque
%"class.std::__1::unique_ptr.320" = type { %"class.std::__1::__compressed_pair.321" }
%"class.std::__1::__compressed_pair.321" = type { %"struct.std::__1::__compressed_pair_elem.322" }
%"struct.std::__1::__compressed_pair_elem.322" = type { %"class.blink::DocumentPolicy"* }
%"class.blink::DocumentPolicy" = type opaque
%"class.WTF::HashSet.326" = type { %"class.WTF::HashTable.327" }
%"class.WTF::HashTable.327" = type <{ i32*, i32, i32, i32, [4 x i8] }>
%"class.blink::Member.330" = type { %"class.blink::MemberBase.331" }
%"class.blink::MemberBase.331" = type { %"class.blink::Agent"* }
%"class.blink::Agent" = type opaque
%"class.blink::HeapVector.332" = type { %"class.WTF::Vector.335" }
%"class.WTF::Vector.335" = type { %"class.WTF::VectorBuffer.336" }
%"class.WTF::VectorBuffer.336" = type { %"class.WTF::VectorBufferBase.337" }
%"class.WTF::VectorBufferBase.337" = type { %"class.blink::Member.338"*, i32, i32 }
%"class.blink::Member.338" = type opaque
%"class.blink::Member.340" = type { %"class.blink::MemberBase.341" }
%"class.blink::MemberBase.341" = type { %"class.blink::PublicURLManager"* }
%"class.blink::PublicURLManager" = type opaque
%"class.blink::Member.342" = type { %"class.blink::MemberBase.343" }
%"class.blink::MemberBase.343" = type { %"class.blink::ContentSecurityPolicyDelegate"* }
%"class.blink::ContentSecurityPolicyDelegate" = type opaque
%"class.blink::DOMTimerCoordinator" = type { %"class.blink::HeapHashMap.344", i32, i32 }
%"class.blink::HeapHashMap.344" = type { %"class.WTF::HashMap.347" }
%"class.WTF::HashMap.347" = type { %"class.WTF::HashTable.348" }
%"class.WTF::HashTable.348" = type <{ %"struct.WTF::KeyValuePair.350"*, i32, i32, i32, [4 x i8] }>
%"struct.WTF::KeyValuePair.350" = type opaque
%"class.std::__1::unique_ptr.351" = type { %"class.std::__1::__compressed_pair.352" }
%"class.std::__1::__compressed_pair.352" = type { %"struct.std::__1::__compressed_pair_elem.353" }
%"struct.std::__1::__compressed_pair_elem.353" = type { %"class.blink::PolicyContainer"* }
%"class.blink::PolicyContainer" = type opaque
%"class.blink::Member.357" = type { %"class.blink::MemberBase.358" }
%"class.blink::MemberBase.358" = type { %"class.blink::OriginTrialContext"* }
%"class.blink::OriginTrialContext" = type opaque
%"class.blink::Member.359" = type { %"class.blink::MemberBase.360" }
%"class.blink::MemberBase.360" = type { %"class.blink::ContentSecurityPolicy"* }
%"class.blink::ContentSecurityPolicy" = type opaque
%"class.blink::Member.274" = type { %"class.blink::MemberBase.275" }
%"class.blink::MemberBase.275" = type { %"class.blink::ScriptCachedMetadataHandler"* }
%"class.blink::ScriptCachedMetadataHandler" = type opaque
%class.scoped_refptr.276 = type { %"class.blink::BlobDataHandle"* }
%"class.blink::BlobDataHandle" = type { %"class.WTF::ThreadSafeRefCounted", %"class.WTF::String", %"class.WTF::String", i64, i8, %"class.mojo::PendingRemote", %"class.WTF::Mutex" }
%"class.WTF::ThreadSafeRefCounted" = type { %"class.base::RefCountedThreadSafe.277" }
%"class.base::RefCountedThreadSafe.277" = type { %"class.base::subtle::RefCountedThreadSafeBase" }
%"class.mojo::PendingRemote" = type { %"struct.mojo::internal::PendingRemoteState" }
%"struct.mojo::internal::PendingRemoteState" = type { %"class.mojo::ScopedHandleBase", i32 }
%"class.mojo::ScopedHandleBase" = type { %"class.mojo::MessagePipeHandle" }
%"class.mojo::MessagePipeHandle" = type { %"class.mojo::Handle" }
%"class.mojo::Handle" = type { i32 }
%"class.base::Time" = type { %"class.base::time_internal::TimeBase.278" }
%"class.base::time_internal::TimeBase.278" = type { i64 }
%"class.std::__1::set" = type { %"class.std::__1::__tree.279" }
%"class.std::__1::__tree.279" = type { %"class.std::__1::__tree_end_node"*, %"class.std::__1::__compressed_pair.280", %"class.std::__1::__compressed_pair.284" }
%"class.std::__1::__compressed_pair.280" = type { %"struct.std::__1::__compressed_pair_elem.11" }
%"class.std::__1::__compressed_pair.284" = type { %"struct.std::__1::__compressed_pair_elem.14" }
%"class.std::__1::unique_ptr.286" = type { %"class.std::__1::__compressed_pair.287" }
%"class.std::__1::__compressed_pair.287" = type { %"struct.std::__1::__compressed_pair_elem.288" }
%"struct.std::__1::__compressed_pair_elem.288" = type { %"class.net::AuthChallengeInfo"* }
%"class.net::AuthChallengeInfo" = type { i8, %"class.url::Origin", %"class.std::__1::basic_string", %"class.std::__1::basic_string", %"class.std::__1::basic_string", %"class.std::__1::basic_string" }
%"class.url::Origin" = type { %"class.url::SchemeHostPort", %"class.absl::optional" }
%"class.url::SchemeHostPort" = type <{ %"class.std::__1::basic_string", %"class.std::__1::basic_string", i16, [6 x i8] }>
%"class.std::__1::basic_string" = type { %"class.std::__1::__compressed_pair.289" }
%"class.std::__1::__compressed_pair.289" = type { %"struct.std::__1::__compressed_pair_elem.290" }
%"struct.std::__1::__compressed_pair_elem.290" = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" = type { %union.anon }
%union.anon = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" = type { i8*, i64, i64 }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short" = type { [23 x i8], %struct.anon }
%struct.anon = type { i8 }
%"class.blink::ExceptionState" = type { i32 (...)**, %"class.blink::ExceptionContext", %"class.blink::ExceptionState::ContextScope"*, %"class.v8::Isolate"*, i32, %"class.WTF::String", %"class.blink::TraceWrapperV8Reference.368" }
%"class.blink::ExceptionContext" = type { i16, i16, i8*, i8* }
%"class.blink::ExceptionState::ContextScope" = type { %"class.blink::ExceptionState"*, %"class.blink::ExceptionState::ContextScope"*, %"class.blink::ExceptionContext" }
%"class.blink::TraceWrapperV8Reference.368" = type { %"class.v8::TracedReference.369" }
%"class.v8::TracedReference.369" = type { %"class.v8::BasicTracedReference.370" }
%"class.v8::BasicTracedReference.370" = type { %"class.v8::TracedReferenceBase" }
%"class.mojo::StructPtr" = type { %"class.std::__1::unique_ptr.371" }
%"class.std::__1::unique_ptr.371" = type { %"class.std::__1::__compressed_pair.372" }
%"class.std::__1::__compressed_pair.372" = type { %"struct.std::__1::__compressed_pair_elem.373" }
%"struct.std::__1::__compressed_pair_elem.373" = type { %"class.blink::mojom::blink::FetchAPIResponse"* }
%"class.blink::mojom::blink::FetchAPIResponse" = type { %"class.WTF::Vector", i16, %"class.WTF::String", i32, i64, i32, [4 x i8], %"class.WTF::HashMap.374", %"class.WTF::String", %"class.WTF::String", %class.scoped_refptr.276, i32, %"class.base::Time", %"class.WTF::String", %"class.WTF::Vector.379", %class.scoped_refptr.276, %class.scoped_refptr.276, %"class.mojo::StructPtr.384", i32, %"class.WTF::String", i8, i8, %"class.absl::optional.468" }
%"class.WTF::HashMap.374" = type { %"class.WTF::HashTable.375" }
%"class.WTF::HashTable.375" = type <{ %"struct.WTF::KeyValuePair.378"*, i32, i32, i32, [4 x i8] }>
%"struct.WTF::KeyValuePair.378" = type { %"class.WTF::String", %"class.WTF::String" }
%"class.WTF::Vector.379" = type { %"class.WTF::VectorBuffer.380" }
%"class.WTF::VectorBuffer.380" = type { %"class.WTF::VectorBufferBase.381" }
%"class.WTF::VectorBufferBase.381" = type { %"class.WTF::String"*, i32, i32 }
%"class.mojo::StructPtr.384" = type { %"class.std::__1::unique_ptr.385" }
%"class.std::__1::unique_ptr.385" = type { %"class.std::__1::__compressed_pair.386" }
%"class.std::__1::__compressed_pair.386" = type { %"struct.std::__1::__compressed_pair_elem.387" }
%"struct.std::__1::__compressed_pair_elem.387" = type { %"class.network::mojom::blink::ParsedHeaders"* }
%"class.network::mojom::blink::ParsedHeaders" = type <{ %"class.WTF::Vector.388", %"class.mojo::StructPtr.424", %"struct.network::CrossOriginEmbedderPolicy", %"struct.network::CrossOriginOpenerPolicy", i8, [7 x i8], %"class.absl::optional.436", %"class.base::TimeDelta", %"class.absl::optional.436", i32, [4 x i8], %"class.WTF::Vector.446", %"class.mojo::StructPtr.458", i8, [7 x i8] }>
%"class.WTF::Vector.388" = type { %"class.WTF::VectorBuffer.389" }
%"class.WTF::VectorBuffer.389" = type { %"class.WTF::VectorBufferBase.390" }
%"class.WTF::VectorBufferBase.390" = type { %"class.mojo::StructPtr.391"*, i32, i32 }
%"class.mojo::StructPtr.391" = type { %"class.std::__1::unique_ptr.392" }
%"class.std::__1::unique_ptr.392" = type { %"class.std::__1::__compressed_pair.393" }
%"class.std::__1::__compressed_pair.393" = type { %"struct.std::__1::__compressed_pair_elem.394" }
%"struct.std::__1::__compressed_pair_elem.394" = type { %"class.network::mojom::blink::ContentSecurityPolicy"* }
%"class.network::mojom::blink::ContentSecurityPolicy" = type { %"class.mojo::StructPtr.395", %"class.WTF::HashMap.402", %"class.WTF::HashMap.407", i8, i8, i8, i32, %"class.mojo::InlinedStructPtr", i8, %"class.WTF::Vector.379", i32, %"class.mojo::StructPtr.412", %"class.WTF::Vector.379" }
%"class.mojo::StructPtr.395" = type { %"class.std::__1::unique_ptr.396" }
%"class.std::__1::unique_ptr.396" = type { %"class.std::__1::__compressed_pair.397" }
%"class.std::__1::__compressed_pair.397" = type { %"struct.std::__1::__compressed_pair_elem.398" }
%"struct.std::__1::__compressed_pair_elem.398" = type { %"class.network::mojom::blink::CSPSource"* }
%"class.network::mojom::blink::CSPSource" = type <{ %"class.WTF::String", %"class.WTF::String", i32, [4 x i8], %"class.WTF::String", i8, i8, [6 x i8] }>
%"class.WTF::HashMap.402" = type { %"class.WTF::HashTable.403" }
%"class.WTF::HashTable.403" = type <{ %"struct.WTF::KeyValuePair.406"*, i32, i32, i32, [4 x i8] }>
%"struct.WTF::KeyValuePair.406" = type opaque
%"class.WTF::HashMap.407" = type { %"class.WTF::HashTable.408" }
%"class.WTF::HashTable.408" = type <{ %"struct.WTF::KeyValuePair.411"*, i32, i32, i32, [4 x i8] }>
%"struct.WTF::KeyValuePair.411" = type opaque
%"class.mojo::InlinedStructPtr" = type <{ %"class.network::mojom::blink::ContentSecurityPolicyHeader", i32, [4 x i8] }>
%"class.network::mojom::blink::ContentSecurityPolicyHeader" = type { %"class.WTF::String", i32, i32 }
%"class.mojo::StructPtr.412" = type { %"class.std::__1::unique_ptr.413" }
%"class.std::__1::unique_ptr.413" = type { %"class.std::__1::__compressed_pair.414" }
%"class.std::__1::__compressed_pair.414" = type { %"struct.std::__1::__compressed_pair_elem.415" }
%"struct.std::__1::__compressed_pair_elem.415" = type { %"class.network::mojom::blink::CSPTrustedTypes"* }
%"class.network::mojom::blink::CSPTrustedTypes" = type <{ %"class.WTF::Vector.379", i8, i8, [6 x i8] }>
%"class.mojo::StructPtr.424" = type { %"class.std::__1::unique_ptr.425" }
%"class.std::__1::unique_ptr.425" = type { %"class.std::__1::__compressed_pair.426" }
%"class.std::__1::__compressed_pair.426" = type { %"struct.std::__1::__compressed_pair_elem.427" }
%"struct.std::__1::__compressed_pair_elem.427" = type { %"class.network::mojom::blink::AllowCSPFromHeaderValue"* }
%"class.network::mojom::blink::AllowCSPFromHeaderValue" = type { i32, %"union.network::mojom::blink::AllowCSPFromHeaderValue::Union_" }
%"union.network::mojom::blink::AllowCSPFromHeaderValue::Union_" = type { %class.scoped_refptr.313* }
%"struct.network::CrossOriginEmbedderPolicy" = type { i32, %"class.absl::optional.431", i32, %"class.absl::optional.431" }
%"class.absl::optional.431" = type { %"class.absl::optional_internal::optional_data.432" }
%"class.absl::optional_internal::optional_data.432" = type { %"class.absl::optional_internal::optional_data_base.433" }
%"class.absl::optional_internal::optional_data_base.433" = type { %"class.absl::optional_internal::optional_data_dtor_base.434" }
%"class.absl::optional_internal::optional_data_dtor_base.434" = type { i8, %union.anon.435 }
%union.anon.435 = type { %"class.std::__1::basic_string" }
%"struct.network::CrossOriginOpenerPolicy" = type { i32, %"class.absl::optional.431", i32, %"class.absl::optional.431" }
%"class.base::TimeDelta" = type { i64 }
%"class.absl::optional.436" = type { %"class.absl::optional_internal::optional_data.437" }
%"class.absl::optional_internal::optional_data.437" = type { %"class.absl::optional_internal::optional_data_base.438" }
%"class.absl::optional_internal::optional_data_base.438" = type { %"class.absl::optional_internal::optional_data_dtor_base.439" }
%"class.absl::optional_internal::optional_data_dtor_base.439" = type { i8, %union.anon.440 }
%union.anon.440 = type { %"class.WTF::Vector.441" }
%"class.WTF::Vector.441" = type { %"class.WTF::VectorBuffer.442" }
%"class.WTF::VectorBuffer.442" = type { %"class.WTF::VectorBufferBase.443" }
%"class.WTF::VectorBufferBase.443" = type { i32*, i32, i32 }
%"class.WTF::Vector.446" = type { %"class.WTF::VectorBuffer.447" }
%"class.WTF::VectorBuffer.447" = type { %"class.WTF::VectorBufferBase.448" }
%"class.WTF::VectorBufferBase.448" = type { %"class.mojo::StructPtr.449"*, i32, i32 }
%"class.mojo::StructPtr.449" = type { %"class.std::__1::unique_ptr.450" }
%"class.std::__1::unique_ptr.450" = type { %"class.std::__1::__compressed_pair.451" }
%"class.std::__1::__compressed_pair.451" = type { %"struct.std::__1::__compressed_pair_elem.452" }
%"struct.std::__1::__compressed_pair_elem.452" = type { %"class.network::mojom::blink::LinkHeader"* }
%"class.network::mojom::blink::LinkHeader" = type { %"class.blink::KURL", i32, i32, i32, %"class.WTF::String" }
%"class.mojo::StructPtr.458" = type { %"class.std::__1::unique_ptr.459" }
%"class.std::__1::unique_ptr.459" = type { %"class.std::__1::__compressed_pair.460" }
%"class.std::__1::__compressed_pair.460" = type { %"struct.std::__1::__compressed_pair_elem.461" }
%"struct.std::__1::__compressed_pair_elem.461" = type { %"class.network::mojom::blink::TimingAllowOrigin"* }
%"class.network::mojom::blink::TimingAllowOrigin" = type { i32, %"union.network::mojom::blink::TimingAllowOrigin::Union_" }
%"union.network::mojom::blink::TimingAllowOrigin::Union_" = type { %"class.WTF::Vector.379"* }
%"class.absl::optional.468" = type { %"class.absl::optional_internal::optional_data.469" }
%"class.absl::optional_internal::optional_data.469" = type { %"class.absl::optional_internal::optional_data_base.470" }
%"class.absl::optional_internal::optional_data_base.470" = type { %"class.absl::optional_internal::optional_data_dtor_base.471" }
%"class.absl::optional_internal::optional_data_dtor_base.471" = type { i8, %union.anon.472 }
%union.anon.472 = type { %"class.net::AuthChallengeInfo" }
%"class.blink::ResourceResponse" = type { %"class.blink::KURL", %"class.WTF::AtomicString", i64, %"class.WTF::AtomicString", i32, i32, %"class.WTF::AtomicString", %"class.blink::HTTPHeaderMap", %"class.net::IPEndPoint", i32, i8, i8, i8, i8, i8, i8, i8, i8, i32, i8, i8, i8, %"class.base::Time", i8, i8, i32, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i32, i64, i8, i32, i32, %"class.absl::optional.481", %class.scoped_refptr.496, %class.scoped_refptr.497, %"struct.blink::CacheControlHeader", %"class.absl::optional.498", %"class.absl::optional.503", %"class.absl::optional.503", %"class.absl::optional.503", i64, %"class.blink::KURL", %"class.WTF::Vector", %"class.WTF::String", %"class.WTF::Vector.379", %"class.base::Time", %"class.WTF::AtomicString", i32, i8, i64, i64, i64, %"class.absl::optional.508", %"class.WTF::Vector.379", %"class.blink::KURL", %"class.absl::optional.468" }
%"class.blink::HTTPHeaderMap" = type { %"class.WTF::HashMap.476" }
%"class.WTF::HashMap.476" = type { %"class.WTF::HashTable.477" }
%"class.WTF::HashTable.477" = type <{ %"struct.WTF::KeyValuePair.480"*, i32, i32, i32, [4 x i8] }>
%"struct.WTF::KeyValuePair.480" = type { %"class.WTF::AtomicString", %"class.WTF::AtomicString" }
%"class.net::IPEndPoint" = type { %"class.net::IPAddress", i16 }
%"class.net::IPAddress" = type { %"class.net::IPAddressBytes" }
%"class.net::IPAddressBytes" = type { %"struct.std::__1::array", i8 }
%"struct.std::__1::array" = type { [16 x i8] }
%"class.absl::optional.481" = type { %"class.absl::optional_internal::optional_data.482" }
%"class.absl::optional_internal::optional_data.482" = type { %"class.absl::optional_internal::optional_data_base.483" }
%"class.absl::optional_internal::optional_data_base.483" = type { %"class.absl::optional_internal::optional_data_dtor_base.484" }
%"class.absl::optional_internal::optional_data_dtor_base.484" = type { i8, %union.anon.485 }
%union.anon.485 = type { %"struct.blink::ResourceResponse::SecurityDetails" }
%"struct.blink::ResourceResponse::SecurityDetails" = type { %"class.WTF::String", %"class.WTF::String", %"class.WTF::String", %"class.WTF::String", %"class.WTF::String", %"class.WTF::String", %"class.WTF::Vector.379", %"class.WTF::String", i64, i64, %"class.WTF::Vector.486", %"class.WTF::Vector.491" }
%"class.WTF::Vector.486" = type { %"class.WTF::VectorBuffer.487" }
%"class.WTF::VectorBuffer.487" = type { %"class.WTF::VectorBufferBase.488" }
%"class.WTF::VectorBufferBase.488" = type { %"class.WTF::AtomicString"*, i32, i32 }
%"class.WTF::Vector.491" = type { %"class.WTF::VectorBuffer.492" }
%"class.WTF::VectorBuffer.492" = type { %"class.WTF::VectorBufferBase.493" }
%"class.WTF::VectorBufferBase.493" = type { %"class.blink::ResourceResponse::SignedCertificateTimestamp"*, i32, i32 }
%"class.blink::ResourceResponse::SignedCertificateTimestamp" = type { %"class.WTF::String", %"class.WTF::String", %"class.WTF::String", %"class.WTF::String", i64, %"class.WTF::String", %"class.WTF::String", %"class.WTF::String" }
%class.scoped_refptr.496 = type { %"class.blink::ResourceLoadTiming"* }
%"class.blink::ResourceLoadTiming" = type opaque
%class.scoped_refptr.497 = type { %"struct.blink::ResourceLoadInfo"* }
%"struct.blink::ResourceLoadInfo" = type opaque
%"struct.blink::CacheControlHeader" = type { i8, %"class.absl::optional.498", %"class.absl::optional.498" }
%"class.absl::optional.498" = type { %"class.absl::optional_internal::optional_data.499" }
%"class.absl::optional_internal::optional_data.499" = type { %"class.absl::optional_internal::optional_data_base.500" }
%"class.absl::optional_internal::optional_data_base.500" = type { %"class.absl::optional_internal::optional_data_dtor_base.501" }
%"class.absl::optional_internal::optional_data_dtor_base.501" = type { i8, %union.anon.502 }
%union.anon.502 = type { %"class.base::TimeDelta" }
%"class.absl::optional.503" = type { %"class.absl::optional_internal::optional_data.504" }
%"class.absl::optional_internal::optional_data.504" = type { %"class.absl::optional_internal::optional_data_base.505" }
%"class.absl::optional_internal::optional_data_base.505" = type { %"class.absl::optional_internal::optional_data_dtor_base.506" }
%"class.absl::optional_internal::optional_data_dtor_base.506" = type { i8, %union.anon.507 }
%union.anon.507 = type { %"class.base::Time" }
%"class.absl::optional.508" = type { %"class.absl::optional_internal::optional_data.509" }
%"class.absl::optional_internal::optional_data.509" = type { %"class.absl::optional_internal::optional_data_base.510" }
%"class.absl::optional_internal::optional_data_base.510" = type { %"class.absl::optional_internal::optional_data_dtor_base.511" }
%"class.absl::optional_internal::optional_data_dtor_base.511" = type { i8, %union.anon.512 }
%union.anon.512 = type { %"class.base::UnguessableToken" }
%"class.WTF::StringView" = type <{ %"class.WTF::StringImpl"*, i8*, i32, [4 x i8] }>
%"class.logging::CheckOpResult" = type { i8* }
%"class.logging::CheckError" = type { %"class.logging::LogMessage"* }
%"class.logging::LogMessage" = type { i32 (...)**, i32, %"class.std::__1::basic_ostringstream", i64, i8*, i32, %"class.base::ScopedClearLastErrorBase" }
%"class.std::__1::basic_ostringstream" = type { %"class.std::__1::basic_ostream.base", %"class.std::__1::basic_stringbuf", %"class.std::__1::basic_ios.base" }
%"class.std::__1::basic_ostream.base" = type { i32 (...)** }
%"class.std::__1::basic_stringbuf" = type <{ %"class.std::__1::basic_streambuf", %"class.std::__1::basic_string", i8*, i32, [4 x i8] }>
%"class.std::__1::basic_streambuf" = type { i32 (...)**, %"class.std::__1::locale", i8*, i8*, i8*, i8*, i8*, i8* }
%"class.std::__1::locale" = type { %"class.std::__1::locale::__imp"* }
%"class.std::__1::locale::__imp" = type opaque
%"class.std::__1::basic_ios.base" = type <{ %"class.std::__1::ios_base", %"class.std::__1::basic_ostream"*, i32 }>
%"class.std::__1::ios_base" = type { i32 (...)**, i32, i64, i64, i32, i32, i8*, i8*, void (i32, %"class.std::__1::ios_base"*, i32)**, i32*, i64, i64, i64*, i64, i64, i8**, i64, i64 }
%"class.std::__1::basic_ostream" = type { i32 (...)**, %"class.std::__1::basic_ios.base" }
%"class.base::ScopedClearLastErrorBase" = type { i32 }
%"class.std::__1::__tree_node" = type { %"class.std::__1::__tree_node_base.base", %"class.std::__1::basic_string" }
%"class.std::__1::__tree_node_base.base" = type <{ %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_end_node"*, i8 }>
%"class.blink::NormalPageArena" = type { %"class.blink::BaseArena.base", [4 x i8], %"class.blink::FreeList", i8*, i64, i64 }
%"class.blink::BaseArena.base" = type <{ i32 (...)**, %"class.blink::PageStackThreadSafe", %"class.blink::PageStackThreadSafe", %"class.blink::PageStackThreadSafe", %"class.blink::PageStackThreadSafe", %"class.blink::ThreadState"*, i32 }>
%"class.blink::FreeList" = type <{ [17 x %"class.blink::FreeListEntry"*], [17 x %"class.blink::FreeListEntry"*], i32, [4 x i8] }>
%"class.blink::FreeListEntry" = type { %"class.blink::HeapObjectHeader", %"class.blink::FreeListEntry"* }
%"class.blink::PlatformAwareObjectStartBitmap" = type { %"class.blink::ObjectStartBitmap" }
%"class.blink::ObjectStartBitmap" = type { i8*, [2048 x i8] }

$_ZN3WTF6VectorIN5blink4KURLELj0ENS_18PartitionAllocatorEEaSERKS4_ = comdat any

$_ZN5blink17FetchResponseData16SetStatusMessageEN3WTF12AtomicStringE = comdat any

$_ZN5blink17FetchResponseData25SetAlpnNegotiatedProtocolEN3WTF12AtomicStringE = comdat any

$_ZN3WTF18PartitionAllocator13QuantizedSizeINS_6StringEEEmm = comdat any

$_ZN3WTF6VectorINS_6StringELj0ENS_18PartitionAllocatorEE14AppendSlowCaseIS1_EEvOT_ = comdat any

$_ZN3WTF9HashTableINS_6StringENS_12KeyValuePairIS1_S1_EENS_24KeyValuePairKeyExtractorENS_10StringHashENS_18HashMapValueTraitsINS_10HashTraitsIS1_EES8_EES8_NS_18PartitionAllocatorEE6insertINS_17HashMapTranslatorIS9_S5_SA_EERKS1_SG_EENS_18HashTableAddResultISB_S3_EEOT0_OT1_ = comdat any

$_ZN3WTF9HashTableINS_6StringENS_12KeyValuePairIS1_S1_EENS_24KeyValuePairKeyExtractorENS_10StringHashENS_18HashMapValueTraitsINS_10HashTraitsIS1_EES8_EES8_NS_18PartitionAllocatorEE6ExpandEPS3_ = comdat any

$_ZN3WTF17HashMapTranslatorINS_18HashMapValueTraitsINS_10HashTraitsINS_6StringEEES4_EENS_10StringHashENS_18PartitionAllocatorEE9TranslateINS_12KeyValuePairIS3_S3_EERKS3_SD_EEvRT_OT0_OT1_ = comdat any

$_ZN3WTF9HashTableINS_6StringENS_12KeyValuePairIS1_S1_EENS_24KeyValuePairKeyExtractorENS_10StringHashENS_18HashMapValueTraitsINS_10HashTraitsIS1_EES8_EES8_NS_18PartitionAllocatorEE8RehashToEPS3_jSC_ = comdat any

$_ZN3WTF9HashTableINS_6StringENS_12KeyValuePairIS1_S1_EENS_24KeyValuePairKeyExtractorENS_10StringHashENS_18HashMapValueTraitsINS_10HashTraitsIS1_EES8_EES8_NS_18PartitionAllocatorEE8ReinsertEOS3_ = comdat any

$_ZN3WTF9HashTableINS_6StringENS_12KeyValuePairIS1_S1_EENS_24KeyValuePairKeyExtractorENS_10StringHashENS_18HashMapValueTraitsINS_10HashTraitsIS1_EES8_EES8_NS_18PartitionAllocatorEE16LookupForWritingERKS1_ = comdat any

$_ZN3WTF9HashTableINS_6StringENS_12KeyValuePairIS1_S1_EENS_24KeyValuePairKeyExtractorENS_10StringHashENS_18HashMapValueTraitsINS_10HashTraitsIS1_EES8_EES8_NS_18PartitionAllocatorEE29DeleteAllBucketsAndDeallocateEPS3_j = comdat any

$_ZN3WTF6VectorIN5blink4KURLELj0ENS_18PartitionAllocatorEE16ReallocateBufferEj = comdat any

$_ZN3WTF18PartitionAllocator13QuantizedSizeIN5blink4KURLEEEmm = comdat any

$_ZNSt3__16__treeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEN5blink17CompareIgnoreCaseENS4_IS6_EEE14__assign_multiINS_21__tree_const_iteratorIS6_PNS_11__tree_nodeIS6_PvEElEEEEvT_SI_ = comdat any

$_ZNSt3__16__treeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEN5blink17CompareIgnoreCaseENS4_IS6_EEE19__node_insert_multiEPNS_11__tree_nodeIS6_PvEE = comdat any

$_ZNSt3__127__tree_balance_after_insertIPNS_16__tree_node_baseIPvEEEEvT_S5_ = comdat any

$_ZNSt3__16__treeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEN5blink17CompareIgnoreCaseENS4_IS6_EEE7destroyEPNS_11__tree_nodeIS6_PvEE = comdat any

$_ZNSt3__16__treeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEN5blink17CompareIgnoreCaseENS4_IS6_EEE15__emplace_multiIJRKS6_EEENS_15__tree_iteratorIS6_PNS_11__tree_nodeIS6_PvEElEEDpOT_ = comdat any

$_ZN5blink10ThreadHeap8AllocateINS_17FetchResponseDataEEEPhm = comdat any

$_ZN5blink10ThreadHeap20AllocateOnArenaIndexEPNS_11ThreadStateEmijPKc = comdat any

$_ZN5blink10TraceTraitINS_17FetchResponseDataEE5TraceEPNS_7VisitorEPKv = comdat any

$_ZN5blink8internal14FinalizerTraitINS_17FetchResponseDataEE8FinalizeEPv = comdat any

$_ZN5blink9NameTraitINS_17FetchResponseDataEE7GetNameEPKv = comdat any

$_ZN5blink17FetchResponseDataD2Ev = comdat any

$_ZNKSt3__16__treeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEN5blink17CompareIgnoreCaseENS4_IS6_EEE4findIS6_EENS_21__tree_const_iteratorIS6_PNS_11__tree_nodeIS6_PvEElEERKT_ = comdat any

$_ZNK3WTF6VectorIN5blink4KURLELj0ENS_18PartitionAllocatorEE2atEj = comdat any

$_ZN3net17AuthChallengeInfoaSERKS0_ = comdat any

$_ZN5blink10ThreadHeap8AllocateINS_15FetchHeaderListEEEPhm = comdat any

$_ZN5blink10TraceTraitINS_15FetchHeaderListEE5TraceEPNS_7VisitorEPKv = comdat any

$_ZN5blink8internal14FinalizerTraitINS_15FetchHeaderListEE8FinalizeEPv = comdat any

$_ZN5blink9NameTraitINS_15FetchHeaderListEE7GetNameEPKv = comdat any

$_ZN5blink10TraceTraitINS_16BodyStreamBufferEE5TraceEPNS_7VisitorEPKv = comdat any

$_ZZN5blink11GCInfoTraitINS_17FetchResponseDataEE5IndexEvE7kGcInfo = comdat any

$_ZZN5blink11GCInfoTraitINS_17FetchResponseDataEE5IndexEvE13gc_info_index = comdat any

$_ZZN5blink11GCInfoTraitINS_15FetchHeaderListEE5IndexEvE7kGcInfo = comdat any

$_ZZN5blink11GCInfoTraitINS_15FetchHeaderListEE5IndexEvE13gc_info_index = comdat any

@_ZN3WTF12g_empty_atomE = external local_unnamed_addr constant %"class.WTF::AtomicString"*, align 8
@.str = private unnamed_addr constant [5 x i8] c"blob\00", align 1
@.str.1 = private unnamed_addr constant [3 x i8] c"OK\00", align 1
@.str.2 = private unnamed_addr constant [8 x i8] c"unknown\00", align 1
@.str.3 = private unnamed_addr constant [44 x i8] c"count <= MaxElementCountInBackingStore<T>()\00", align 1
@.str.4 = private unnamed_addr constant [78 x i8] c"../../third_party/blink/renderer/platform/wtf/allocator/partition_allocator.h\00", align 1
@__PRETTY_FUNCTION__._ZN3WTF21GetStringWithTypeNameINS_6StringEEEPKcv = private unnamed_addr constant [59 x i8] c"const char *WTF::GetStringWithTypeName() [T = WTF::String]\00", align 1
@.str.5 = private unnamed_addr constant [55 x i8] c"../../third_party/blink/renderer/platform/wtf/vector.h\00", align 1
@.str.7 = private unnamed_addr constant [6 x i8] c"about\00", align 1
@.str.8 = private unnamed_addr constant [5 x i8] c"data\00", align 1
@_ZN3WTF10StringImpl6empty_E = external local_unnamed_addr global %"class.WTF::StringImpl"*, align 8
@.str.9 = private unnamed_addr constant [23 x i8] c"new_size > table_size_\00", align 1
@.str.10 = private unnamed_addr constant [59 x i8] c"../../third_party/blink/renderer/platform/wtf/hash_table.h\00", align 1
@__PRETTY_FUNCTION__._ZN3WTF21GetStringWithTypeNameINS_12KeyValuePairINS_6StringES2_EEEEPKcv = private unnamed_addr constant [91 x i8] c"const char *WTF::GetStringWithTypeName() [T = WTF::KeyValuePair<WTF::String, WTF::String>]\00", align 1
@_ZN5blink11ThreadState25incremental_marking_flag_E = external local_unnamed_addr global %"class.blink::AtomicEntryFlag", align 4
@__PRETTY_FUNCTION__._ZN3WTF21GetStringWithTypeNameIN5blink4KURLEEEPKcv = private unnamed_addr constant [59 x i8] c"const char *WTF::GetStringWithTypeName() [T = blink::KURL]\00", align 1
@_ZN5blink11ThreadState16thread_specific_E = external local_unnamed_addr global %"class.WTF::ThreadSpecific"*, align 8
@__PRETTY_FUNCTION__._ZN3WTF21GetStringWithTypeNameIPN5blink11ThreadStateEEEPKcv = private unnamed_addr constant [68 x i8] c"const char *WTF::GetStringWithTypeName() [T = blink::ThreadState *]\00", align 1
@__PRETTY_FUNCTION__._ZN3WTF21GetStringWithTypeNameIN5blink17FetchResponseDataEEEPKcv = private unnamed_addr constant [72 x i8] c"const char *WTF::GetStringWithTypeName() [T = blink::FetchResponseData]\00", align 1
@.str.12 = private unnamed_addr constant [23 x i8] c"allocation_size > size\00", align 1
@.str.13 = private unnamed_addr constant [59 x i8] c"../../third_party/blink/renderer/platform/heap/impl/heap.h\00", align 1
@_ZZN5blink11GCInfoTraitINS_17FetchResponseDataEE5IndexEvE7kGcInfo = linkonce_odr hidden constant %"struct.blink::GCInfo" { void (%"class.blink::Visitor"*, i8*)* @_ZN5blink10TraceTraitINS_17FetchResponseDataEE5TraceEPNS_7VisitorEPKv, void (i8*)* @_ZN5blink8internal14FinalizerTraitINS_17FetchResponseDataEE8FinalizeEPv, { i8*, i8 } (i8*)* @_ZN5blink9NameTraitINS_17FetchResponseDataEE7GetNameEPKv, i8 0 }, comdat, align 8
@_ZZN5blink11GCInfoTraitINS_17FetchResponseDataEE5IndexEvE13gc_info_index = linkonce_odr hidden global { { i32 } } zeroinitializer, comdat, align 4
@.str.14 = private unnamed_addr constant [13 x i8] c"InternalNode\00", align 1
@_ZN5blink11GCInfoTable13global_table_E = external local_unnamed_addr global %"class.blink::GCInfoTable"*, align 8
@.str.15 = private unnamed_addr constant [11 x i8] c"i < size()\00", align 1
@__PRETTY_FUNCTION__._ZN3WTF21GetStringWithTypeNameIN5blink15FetchHeaderListEEEPKcv = private unnamed_addr constant [70 x i8] c"const char *WTF::GetStringWithTypeName() [T = blink::FetchHeaderList]\00", align 1
@_ZZN5blink11GCInfoTraitINS_15FetchHeaderListEE5IndexEvE7kGcInfo = linkonce_odr hidden constant %"struct.blink::GCInfo" { void (%"class.blink::Visitor"*, i8*)* @_ZN5blink10TraceTraitINS_15FetchHeaderListEE5TraceEPNS_7VisitorEPKv, void (i8*)* @_ZN5blink8internal14FinalizerTraitINS_15FetchHeaderListEE8FinalizeEPv, { i8*, i8 } (i8*)* @_ZN5blink9NameTraitINS_15FetchHeaderListEE7GetNameEPKv, i8 0 }, comdat, align 8
@_ZZN5blink11GCInfoTraitINS_15FetchHeaderListEE5IndexEvE13gc_info_index = linkonce_odr hidden global { { i32 } } zeroinitializer, comdat, align 4

@_ZN5blink17FetchResponseDataC1EN7network5mojom17FetchResponseTypeENS2_19FetchResponseSourceEtN3WTF12AtomicStringE = hidden unnamed_addr alias void (%"class.blink::FetchResponseData"*, i32, i32, i16, %"class.WTF::StringImpl"*), void (%"class.blink::FetchResponseData"*, i32, i32, i16, %"class.WTF::StringImpl"*)* @_ZN5blink17FetchResponseDataC2EN7network5mojom17FetchResponseTypeENS2_19FetchResponseSourceEtN3WTF12AtomicStringE

; Function Attrs: nounwind ssp uwtable
define hidden %"class.blink::FetchResponseData"* @_ZN5blink17FetchResponseData6CreateEv() local_unnamed_addr #0 align 2 {
  %1 = load %"class.WTF::AtomicString"*, %"class.WTF::AtomicString"** @_ZN3WTF12g_empty_atomE, align 8
  %2 = tail call i8* @_ZN5blink10ThreadHeap8AllocateINS_17FetchResponseDataEEEPhm(i64 176) #11
  %3 = bitcast i8* %2 to %"class.blink::FetchResponseData"*
  %4 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %1, i64 0, i32 0, i32 0, i32 0
  %5 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %4, align 8
  %6 = icmp eq %"class.WTF::StringImpl"* %5, null
  br i1 %6, label %24, label %7

7:                                                ; preds = %0
  %8 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %5, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %9 = load atomic i32, i32* %8 monotonic, align 4
  %10 = and i32 %9, 2
  %11 = icmp eq i32 %10, 0
  br i1 %11, label %12, label %24

12:                                               ; preds = %7
  %13 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %5, i64 0, i32 0
  %14 = load i32, i32* %13, align 4
  %15 = zext i32 %14 to i33
  %16 = tail call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %15, i33 1) #11
  %17 = extractvalue { i33, i1 } %16, 1
  %18 = extractvalue { i33, i1 } %16, 0
  %19 = icmp slt i33 %18, 0
  %20 = or i1 %17, %19
  br i1 %20, label %21, label %22, !prof !2

21:                                               ; preds = %12
  tail call void @llvm.trap() #11
  unreachable

22:                                               ; preds = %12
  %23 = trunc i33 %18 to i32
  store i32 %23, i32* %13, align 4
  br label %24

24:                                               ; preds = %0, %7, %22
  tail call void @_ZN5blink17FetchResponseDataC2EN7network5mojom17FetchResponseTypeENS2_19FetchResponseSourceEtN3WTF12AtomicStringE(%"class.blink::FetchResponseData"* %3, i32 2, i32 0, i16 zeroext 200, %"class.WTF::StringImpl"* %5) #11
  %25 = getelementptr inbounds i8, i8* %2, i64 -4
  %26 = bitcast i8* %25 to i16*
  %27 = load atomic i16, i16* %26 monotonic, align 2
  %28 = or i16 %27, 1
  store atomic i16 %28, i16* %26 release, align 2
  ret %"class.blink::FetchResponseData"* %3
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: nounwind ssp uwtable
define hidden %"class.blink::FetchResponseData"* @_ZN5blink17FetchResponseData26CreateNetworkErrorResponseEv() local_unnamed_addr #0 align 2 {
  %1 = load %"class.WTF::AtomicString"*, %"class.WTF::AtomicString"** @_ZN3WTF12g_empty_atomE, align 8
  %2 = tail call i8* @_ZN5blink10ThreadHeap8AllocateINS_17FetchResponseDataEEEPhm(i64 176) #11
  %3 = bitcast i8* %2 to %"class.blink::FetchResponseData"*
  %4 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %1, i64 0, i32 0, i32 0, i32 0
  %5 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %4, align 8
  %6 = icmp eq %"class.WTF::StringImpl"* %5, null
  br i1 %6, label %24, label %7

7:                                                ; preds = %0
  %8 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %5, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %9 = load atomic i32, i32* %8 monotonic, align 4
  %10 = and i32 %9, 2
  %11 = icmp eq i32 %10, 0
  br i1 %11, label %12, label %24

12:                                               ; preds = %7
  %13 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %5, i64 0, i32 0
  %14 = load i32, i32* %13, align 4
  %15 = zext i32 %14 to i33
  %16 = tail call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %15, i33 1) #11
  %17 = extractvalue { i33, i1 } %16, 1
  %18 = extractvalue { i33, i1 } %16, 0
  %19 = icmp slt i33 %18, 0
  %20 = or i1 %17, %19
  br i1 %20, label %21, label %22, !prof !2

21:                                               ; preds = %12
  tail call void @llvm.trap() #11
  unreachable

22:                                               ; preds = %12
  %23 = trunc i33 %18 to i32
  store i32 %23, i32* %13, align 4
  br label %24

24:                                               ; preds = %0, %7, %22
  tail call void @_ZN5blink17FetchResponseDataC2EN7network5mojom17FetchResponseTypeENS2_19FetchResponseSourceEtN3WTF12AtomicStringE(%"class.blink::FetchResponseData"* %3, i32 3, i32 0, i16 zeroext 0, %"class.WTF::StringImpl"* %5) #11
  %25 = getelementptr inbounds i8, i8* %2, i64 -4
  %26 = bitcast i8* %25 to i16*
  %27 = load atomic i16, i16* %26 monotonic, align 2
  %28 = or i16 %27, 1
  store atomic i16 %28, i16* %26 release, align 2
  ret %"class.blink::FetchResponseData"* %3
}

; Function Attrs: nounwind ssp uwtable
define hidden %"class.blink::FetchResponseData"* @_ZN5blink17FetchResponseData16CreateWithBufferEPNS_16BodyStreamBufferE(%"class.blink::BodyStreamBuffer"*) local_unnamed_addr #0 align 2 {
  %2 = load %"class.WTF::AtomicString"*, %"class.WTF::AtomicString"** @_ZN3WTF12g_empty_atomE, align 8
  %3 = tail call i8* @_ZN5blink10ThreadHeap8AllocateINS_17FetchResponseDataEEEPhm(i64 176) #11
  %4 = bitcast i8* %3 to %"class.blink::FetchResponseData"*
  %5 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %2, i64 0, i32 0, i32 0, i32 0
  %6 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %5, align 8
  %7 = icmp eq %"class.WTF::StringImpl"* %6, null
  br i1 %7, label %25, label %8

8:                                                ; preds = %1
  %9 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %6, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %10 = load atomic i32, i32* %9 monotonic, align 4
  %11 = and i32 %10, 2
  %12 = icmp eq i32 %11, 0
  br i1 %12, label %13, label %25

13:                                               ; preds = %8
  %14 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %6, i64 0, i32 0
  %15 = load i32, i32* %14, align 4
  %16 = zext i32 %15 to i33
  %17 = tail call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %16, i33 1) #11
  %18 = extractvalue { i33, i1 } %17, 1
  %19 = extractvalue { i33, i1 } %17, 0
  %20 = icmp slt i33 %19, 0
  %21 = or i1 %18, %20
  br i1 %21, label %22, label %23, !prof !2

22:                                               ; preds = %13
  tail call void @llvm.trap() #11
  unreachable

23:                                               ; preds = %13
  %24 = trunc i33 %19 to i32
  store i32 %24, i32* %14, align 4
  br label %25

25:                                               ; preds = %1, %8, %23
  tail call void @_ZN5blink17FetchResponseDataC2EN7network5mojom17FetchResponseTypeENS2_19FetchResponseSourceEtN3WTF12AtomicStringE(%"class.blink::FetchResponseData"* %4, i32 2, i32 0, i16 zeroext 200, %"class.WTF::StringImpl"* %6) #11
  %26 = getelementptr inbounds i8, i8* %3, i64 -4
  %27 = bitcast i8* %26 to i16*
  %28 = load atomic i16, i16* %27 monotonic, align 2
  %29 = or i16 %28, 1
  store atomic i16 %29, i16* %27 release, align 2
  %30 = getelementptr inbounds i8, i8* %3, i64 80
  %31 = ptrtoint %"class.blink::BodyStreamBuffer"* %0 to i64
  %32 = bitcast i8* %30 to i64*
  store atomic i64 %31, i64* %32 monotonic, align 8
  %33 = load atomic i32, i32* getelementptr inbounds (%"class.blink::AtomicEntryFlag", %"class.blink::AtomicEntryFlag"* @_ZN5blink11ThreadState25incremental_marking_flag_E, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0) monotonic, align 4
  %34 = icmp eq i32 %33, 0
  br i1 %34, label %38, label %35

35:                                               ; preds = %25
  %36 = bitcast %"class.blink::BodyStreamBuffer"* %0 to i8*
  %37 = tail call zeroext i1 @_ZN5blink14MarkingVisitor16WriteBarrierSlowEPv(i8* %36) #11
  br label %38

38:                                               ; preds = %25, %35
  ret %"class.blink::FetchResponseData"* %4
}

; Function Attrs: nounwind ssp uwtable
define hidden %"class.blink::FetchResponseData"* @_ZNK5blink17FetchResponseData27CreateBasicFilteredResponseEv(%"class.blink::FetchResponseData"*) local_unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.blink::FetchResponseData", %"class.blink::FetchResponseData"* %0, i64 0, i32 2
  %3 = getelementptr inbounds %"class.blink::FetchResponseData", %"class.blink::FetchResponseData"* %0, i64 0, i32 5
  %4 = tail call i8* @_ZN5blink10ThreadHeap8AllocateINS_17FetchResponseDataEEEPhm(i64 176) #11
  %5 = bitcast i8* %4 to %"class.blink::FetchResponseData"*
  %6 = load i32, i32* %2, align 4
  %7 = load i16, i16* %3, align 2
  %8 = getelementptr inbounds %"class.blink::FetchResponseData", %"class.blink::FetchResponseData"* %0, i64 0, i32 6, i32 0, i32 0, i32 0
  %9 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %8, align 8
  %10 = icmp eq %"class.WTF::StringImpl"* %9, null
  br i1 %10, label %28, label %11

11:                                               ; preds = %1
  %12 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %9, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %13 = load atomic i32, i32* %12 monotonic, align 4
  %14 = and i32 %13, 2
  %15 = icmp eq i32 %14, 0
  br i1 %15, label %16, label %28

16:                                               ; preds = %11
  %17 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %9, i64 0, i32 0
  %18 = load i32, i32* %17, align 4
  %19 = zext i32 %18 to i33
  %20 = tail call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %19, i33 1) #11
  %21 = extractvalue { i33, i1 } %20, 1
  %22 = extractvalue { i33, i1 } %20, 0
  %23 = icmp slt i33 %22, 0
  %24 = or i1 %21, %23
  br i1 %24, label %25, label %26, !prof !2

25:                                               ; preds = %16
  tail call void @llvm.trap() #11
  unreachable

26:                                               ; preds = %16
  %27 = trunc i33 %22 to i32
  store i32 %27, i32* %17, align 4
  br label %28

28:                                               ; preds = %1, %11, %26
  tail call void @_ZN5blink17FetchResponseDataC2EN7network5mojom17FetchResponseTypeENS2_19FetchResponseSourceEtN3WTF12AtomicStringE(%"class.blink::FetchResponseData"* %5, i32 0, i32 %6, i16 zeroext %7, %"class.WTF::StringImpl"* %9) #11
  %29 = getelementptr inbounds i8, i8* %4, i64 -4
  %30 = bitcast i8* %29 to i16*
  %31 = load atomic i16, i16* %30 monotonic, align 2
  %32 = or i16 %31, 1
  store atomic i16 %32, i16* %30 release, align 2
  %33 = getelementptr inbounds %"class.blink::FetchResponseData", %"class.blink::FetchResponseData"* %0, i64 0, i32 4
  %34 = getelementptr inbounds i8, i8* %4, i64 32
  %35 = bitcast i8* %34 to %"class.WTF::Vector"*
  %36 = tail call dereferenceable(16) %"class.WTF::Vector"* @_ZN3WTF6VectorIN5blink4KURLELj0ENS_18PartitionAllocatorEEaSERKS4_(%"class.WTF::Vector"* %35, %"class.WTF::Vector"* dereferenceable(16) %33) #11
  %37 = getelementptr inbounds %"class.blink::FetchResponseData", %"class.blink::FetchResponseData"* %0, i64 0, i32 7, i32 0, i32 0
  %38 = load %"class.blink::FetchHeaderList"*, %"class.blink::FetchHeaderList"** %37, align 8
  %39 = getelementptr inbounds %"class.blink::FetchHeaderList", %"class.blink::FetchHeaderList"* %38, i64 0, i32 0, i32 0, i32 0
  %40 = load %"class.std::__1::__tree_end_node"*, %"class.std::__1::__tree_end_node"** %39, align 8
  %41 = getelementptr inbounds %"class.blink::FetchHeaderList", %"class.blink::FetchHeaderList"* %38, i64 0, i32 0, i32 0, i32 1, i32 0, i32 0
  %42 = icmp eq %"class.std::__1::__tree_end_node"* %40, %41
  br i1 %42, label %46, label %43

43:                                               ; preds = %28
  %44 = getelementptr inbounds i8, i8* %4, i64 64
  %45 = bitcast i8* %44 to %"class.blink::FetchHeaderList"**
  br label %108

46:                                               ; preds = %145, %28
  %47 = getelementptr inbounds %"class.blink::FetchResponseData", %"class.blink::FetchResponseData"* %0, i64 0, i32 9
  %48 = getelementptr inbounds i8, i8* %4, i64 80
  %49 = bitcast %"class.blink::Member.18"* %47 to i64*
  %50 = load i64, i64* %49, align 8
  %51 = bitcast i8* %48 to i64*
  store atomic i64 %50, i64* %51 monotonic, align 8
  %52 = load atomic i32, i32* getelementptr inbounds (%"class.blink::AtomicEntryFlag", %"class.blink::AtomicEntryFlag"* @_ZN5blink11ThreadState25incremental_marking_flag_E, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0) monotonic, align 4
  %53 = icmp eq i32 %52, 0
  br i1 %53, label %57, label %54

54:                                               ; preds = %46
  %55 = inttoptr i64 %50 to i8*
  %56 = tail call zeroext i1 @_ZN5blink14MarkingVisitor16WriteBarrierSlowEPv(i8* %55) #11
  br label %57

57:                                               ; preds = %46, %54
  %58 = getelementptr inbounds i8, i8* %4, i64 88
  %59 = getelementptr inbounds %"class.blink::FetchResponseData", %"class.blink::FetchResponseData"* %0, i64 0, i32 10, i32 0, i32 0
  %60 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %59, align 8
  %61 = icmp eq %"class.WTF::StringImpl"* %60, null
  br i1 %61, label %79, label %62

62:                                               ; preds = %57
  %63 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %60, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %64 = load atomic i32, i32* %63 monotonic, align 4
  %65 = and i32 %64, 2
  %66 = icmp eq i32 %65, 0
  br i1 %66, label %67, label %79

67:                                               ; preds = %62
  %68 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %60, i64 0, i32 0
  %69 = load i32, i32* %68, align 4
  %70 = zext i32 %69 to i33
  %71 = tail call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %70, i33 1) #11
  %72 = extractvalue { i33, i1 } %71, 1
  %73 = extractvalue { i33, i1 } %71, 0
  %74 = icmp slt i33 %73, 0
  %75 = or i1 %72, %74
  br i1 %75, label %76, label %77, !prof !2

76:                                               ; preds = %67
  tail call void @llvm.trap() #11
  unreachable

77:                                               ; preds = %67
  %78 = trunc i33 %73 to i32
  store i32 %78, i32* %68, align 4
  br label %79

79:                                               ; preds = %77, %62, %57
  %80 = ptrtoint %"class.WTF::StringImpl"* %60 to i64
  %81 = bitcast i8* %58 to i64*
  %82 = bitcast i8* %58 to %"class.WTF::StringImpl"**
  %83 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %82, align 8
  store i64 %80, i64* %81, align 8
  %84 = icmp eq %"class.WTF::StringImpl"* %83, null
  br i1 %84, label %98, label %85

85:                                               ; preds = %79
  %86 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %83, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %87 = load atomic i32, i32* %86 monotonic, align 4
  %88 = and i32 %87, 2
  %89 = icmp eq i32 %88, 0
  %90 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %83, i64 0, i32 0
  %91 = load i32, i32* %90, align 4
  br i1 %89, label %92, label %94

92:                                               ; preds = %85
  %93 = add i32 %91, -1
  store i32 %93, i32* %90, align 4
  br label %94

94:                                               ; preds = %92, %85
  %95 = phi i32 [ %93, %92 ], [ %91, %85 ]
  %96 = icmp eq i32 %95, 0
  br i1 %96, label %97, label %98

97:                                               ; preds = %94
  tail call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %83) #11
  br label %98

98:                                               ; preds = %79, %94, %97
  %99 = getelementptr inbounds i8, i8* %4, i64 72
  %100 = ptrtoint %"class.blink::FetchResponseData"* %0 to i64
  %101 = bitcast i8* %99 to i64*
  store atomic i64 %100, i64* %101 monotonic, align 8
  %102 = load atomic i32, i32* getelementptr inbounds (%"class.blink::AtomicEntryFlag", %"class.blink::AtomicEntryFlag"* @_ZN5blink11ThreadState25incremental_marking_flag_E, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0) monotonic, align 4
  %103 = icmp eq i32 %102, 0
  br i1 %103, label %107, label %104

104:                                              ; preds = %98
  %105 = bitcast %"class.blink::FetchResponseData"* %0 to i8*
  %106 = tail call zeroext i1 @_ZN5blink14MarkingVisitor16WriteBarrierSlowEPv(i8* %105) #11
  br label %107

107:                                              ; preds = %98, %104
  ret %"class.blink::FetchResponseData"* %5

108:                                              ; preds = %43, %145
  %109 = phi %"class.std::__1::__tree_end_node"* [ %40, %43 ], [ %146, %145 ]
  %110 = getelementptr inbounds %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_end_node"* %109, i64 4
  %111 = bitcast %"class.std::__1::__tree_end_node"* %110 to %"class.WTF::String"*
  %112 = tail call zeroext i1 @_ZN5blink10FetchUtils29IsForbiddenResponseHeaderNameERKN3WTF6StringE(%"class.WTF::String"* dereferenceable(8) %111) #11
  br i1 %112, label %117, label %113

113:                                              ; preds = %108
  %114 = load %"class.blink::FetchHeaderList"*, %"class.blink::FetchHeaderList"** %45, align 8
  %115 = getelementptr inbounds %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_end_node"* %109, i64 5
  %116 = bitcast %"class.std::__1::__tree_end_node"* %115 to %"class.WTF::String"*
  tail call void @_ZN5blink15FetchHeaderList6AppendERKN3WTF6StringES4_(%"class.blink::FetchHeaderList"* %114, %"class.WTF::String"* dereferenceable(8) %111, %"class.WTF::String"* dereferenceable(8) %116) #11
  br label %117

117:                                              ; preds = %108, %113
  %118 = getelementptr inbounds %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_end_node"* %109, i64 1, i32 0
  %119 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %118, align 8
  %120 = icmp eq %"class.std::__1::__tree_node_base"* %119, null
  br i1 %120, label %121, label %129

121:                                              ; preds = %117
  %122 = bitcast %"class.std::__1::__tree_end_node"* %109 to %"class.std::__1::__tree_node_base"*
  %123 = getelementptr inbounds %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_end_node"* %109, i64 2
  %124 = bitcast %"class.std::__1::__tree_end_node"* %123 to %"class.std::__1::__tree_end_node"**
  %125 = load %"class.std::__1::__tree_end_node"*, %"class.std::__1::__tree_end_node"** %124, align 8
  %126 = getelementptr inbounds %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_end_node"* %125, i64 0, i32 0
  %127 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %126, align 8
  %128 = icmp eq %"class.std::__1::__tree_node_base"* %127, %122
  br i1 %128, label %145, label %136

129:                                              ; preds = %117, %129
  %130 = phi %"class.std::__1::__tree_node_base"* [ %132, %129 ], [ %119, %117 ]
  %131 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %130, i64 0, i32 0, i32 0
  %132 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %131, align 8
  %133 = icmp eq %"class.std::__1::__tree_node_base"* %132, null
  br i1 %133, label %134, label %129

134:                                              ; preds = %129
  %135 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %130, i64 0, i32 0
  br label %145

136:                                              ; preds = %121, %136
  %137 = phi %"class.std::__1::__tree_end_node"** [ %140, %136 ], [ %124, %121 ]
  %138 = bitcast %"class.std::__1::__tree_end_node"** %137 to %"class.std::__1::__tree_node_base"**
  %139 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %138, align 8
  %140 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %139, i64 0, i32 2
  %141 = load %"class.std::__1::__tree_end_node"*, %"class.std::__1::__tree_end_node"** %140, align 8
  %142 = getelementptr inbounds %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_end_node"* %141, i64 0, i32 0
  %143 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %142, align 8
  %144 = icmp eq %"class.std::__1::__tree_node_base"* %143, %139
  br i1 %144, label %145, label %136

145:                                              ; preds = %136, %121, %134
  %146 = phi %"class.std::__1::__tree_end_node"* [ %135, %134 ], [ %125, %121 ], [ %141, %136 ]
  %147 = icmp eq %"class.std::__1::__tree_end_node"* %146, %41
  br i1 %147, label %46, label %108
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5blink17FetchResponseData10SetURLListERKN3WTF6VectorINS_4KURLELj0ENS1_18PartitionAllocatorEEE(%"class.blink::FetchResponseData"*, %"class.WTF::Vector"* dereferenceable(16)) local_unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"class.blink::FetchResponseData", %"class.blink::FetchResponseData"* %0, i64 0, i32 4
  %4 = tail call dereferenceable(16) %"class.WTF::Vector"* @_ZN3WTF6VectorIN5blink4KURLELj0ENS_18PartitionAllocatorEEaSERKS4_(%"class.WTF::Vector"* %3, %"class.WTF::Vector"* dereferenceable(16) %1)
  ret void
}

declare zeroext i1 @_ZN5blink10FetchUtils29IsForbiddenResponseHeaderNameERKN3WTF6StringE(%"class.WTF::String"* dereferenceable(8)) local_unnamed_addr #2

declare void @_ZN5blink15FetchHeaderList6AppendERKN3WTF6StringES4_(%"class.blink::FetchHeaderList"*, %"class.WTF::String"* dereferenceable(8), %"class.WTF::String"* dereferenceable(8)) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden %"class.blink::FetchResponseData"* @_ZNK5blink17FetchResponseData26CreateCorsFilteredResponseERKNSt3__13setINS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEENS_17CompareIgnoreCaseENS6_IS8_EEEE(%"class.blink::FetchResponseData"*, %"class.std::__1::set"* dereferenceable(24)) local_unnamed_addr #0 align 2 {
  %3 = alloca %"class.std::__1::basic_string", align 8
  %4 = getelementptr inbounds %"class.blink::FetchResponseData", %"class.blink::FetchResponseData"* %0, i64 0, i32 2
  %5 = getelementptr inbounds %"class.blink::FetchResponseData", %"class.blink::FetchResponseData"* %0, i64 0, i32 5
  %6 = tail call i8* @_ZN5blink10ThreadHeap8AllocateINS_17FetchResponseDataEEEPhm(i64 176) #11
  %7 = bitcast i8* %6 to %"class.blink::FetchResponseData"*
  %8 = load i32, i32* %4, align 4
  %9 = load i16, i16* %5, align 2
  %10 = getelementptr inbounds %"class.blink::FetchResponseData", %"class.blink::FetchResponseData"* %0, i64 0, i32 6, i32 0, i32 0, i32 0
  %11 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %10, align 8
  %12 = icmp eq %"class.WTF::StringImpl"* %11, null
  br i1 %12, label %30, label %13

13:                                               ; preds = %2
  %14 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %11, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %15 = load atomic i32, i32* %14 monotonic, align 4
  %16 = and i32 %15, 2
  %17 = icmp eq i32 %16, 0
  br i1 %17, label %18, label %30

18:                                               ; preds = %13
  %19 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %11, i64 0, i32 0
  %20 = load i32, i32* %19, align 4
  %21 = zext i32 %20 to i33
  %22 = tail call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %21, i33 1) #11
  %23 = extractvalue { i33, i1 } %22, 1
  %24 = extractvalue { i33, i1 } %22, 0
  %25 = icmp slt i33 %24, 0
  %26 = or i1 %23, %25
  br i1 %26, label %27, label %28, !prof !2

27:                                               ; preds = %18
  tail call void @llvm.trap() #11
  unreachable

28:                                               ; preds = %18
  %29 = trunc i33 %24 to i32
  store i32 %29, i32* %19, align 4
  br label %30

30:                                               ; preds = %2, %13, %28
  tail call void @_ZN5blink17FetchResponseDataC2EN7network5mojom17FetchResponseTypeENS2_19FetchResponseSourceEtN3WTF12AtomicStringE(%"class.blink::FetchResponseData"* %7, i32 1, i32 %8, i16 zeroext %9, %"class.WTF::StringImpl"* %11) #11
  %31 = getelementptr inbounds i8, i8* %6, i64 -4
  %32 = bitcast i8* %31 to i16*
  %33 = load atomic i16, i16* %32 monotonic, align 2
  %34 = or i16 %33, 1
  store atomic i16 %34, i16* %32 release, align 2
  %35 = getelementptr inbounds %"class.blink::FetchResponseData", %"class.blink::FetchResponseData"* %0, i64 0, i32 4
  %36 = getelementptr inbounds i8, i8* %6, i64 32
  %37 = bitcast i8* %36 to %"class.WTF::Vector"*
  %38 = tail call dereferenceable(16) %"class.WTF::Vector"* @_ZN3WTF6VectorIN5blink4KURLELj0ENS_18PartitionAllocatorEEaSERKS4_(%"class.WTF::Vector"* %37, %"class.WTF::Vector"* dereferenceable(16) %35) #11
  %39 = getelementptr inbounds %"class.blink::FetchResponseData", %"class.blink::FetchResponseData"* %0, i64 0, i32 7, i32 0, i32 0
  %40 = load %"class.blink::FetchHeaderList"*, %"class.blink::FetchHeaderList"** %39, align 8
  %41 = getelementptr inbounds %"class.blink::FetchHeaderList", %"class.blink::FetchHeaderList"* %40, i64 0, i32 0, i32 0, i32 0
  %42 = load %"class.std::__1::__tree_end_node"*, %"class.std::__1::__tree_end_node"** %41, align 8
  %43 = getelementptr inbounds %"class.blink::FetchHeaderList", %"class.blink::FetchHeaderList"* %40, i64 0, i32 0, i32 0, i32 1, i32 0, i32 0
  %44 = icmp eq %"class.std::__1::__tree_end_node"* %42, %43
  br i1 %44, label %54, label %45

45:                                               ; preds = %30
  %46 = bitcast %"class.std::__1::basic_string"* %3 to i8*
  %47 = getelementptr inbounds %"class.std::__1::set", %"class.std::__1::set"* %1, i64 0, i32 0
  %48 = getelementptr inbounds %"class.std::__1::set", %"class.std::__1::set"* %1, i64 0, i32 0, i32 1, i32 0, i32 0
  %49 = bitcast %"class.std::__1::basic_string"* %3 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %50 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %49, i64 0, i32 1, i32 0
  %51 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %3, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %52 = getelementptr inbounds i8, i8* %6, i64 64
  %53 = bitcast i8* %52 to %"class.blink::FetchHeaderList"**
  br label %125

54:                                               ; preds = %175, %30
  %55 = getelementptr inbounds i8, i8* %6, i64 120
  %56 = bitcast i8* %55 to %"class.std::__1::set"*
  %57 = icmp eq %"class.std::__1::set"* %56, %1
  br i1 %57, label %63, label %58

58:                                               ; preds = %54
  %59 = bitcast i8* %55 to %"class.std::__1::__tree.279"*
  %60 = getelementptr inbounds %"class.std::__1::set", %"class.std::__1::set"* %1, i64 0, i32 0, i32 0
  %61 = load %"class.std::__1::__tree_end_node"*, %"class.std::__1::__tree_end_node"** %60, align 8
  %62 = getelementptr inbounds %"class.std::__1::set", %"class.std::__1::set"* %1, i64 0, i32 0, i32 1, i32 0, i32 0
  call void @_ZNSt3__16__treeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEN5blink17CompareIgnoreCaseENS4_IS6_EEE14__assign_multiINS_21__tree_const_iteratorIS6_PNS_11__tree_nodeIS6_PvEElEEEEvT_SI_(%"class.std::__1::__tree.279"* %59, %"class.std::__1::__tree_end_node"* %61, %"class.std::__1::__tree_end_node"* %62) #11
  br label %63

63:                                               ; preds = %54, %58
  %64 = getelementptr inbounds %"class.blink::FetchResponseData", %"class.blink::FetchResponseData"* %0, i64 0, i32 9
  %65 = getelementptr inbounds i8, i8* %6, i64 80
  %66 = bitcast %"class.blink::Member.18"* %64 to i64*
  %67 = load i64, i64* %66, align 8
  %68 = bitcast i8* %65 to i64*
  store atomic i64 %67, i64* %68 monotonic, align 8
  %69 = load atomic i32, i32* getelementptr inbounds (%"class.blink::AtomicEntryFlag", %"class.blink::AtomicEntryFlag"* @_ZN5blink11ThreadState25incremental_marking_flag_E, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0) monotonic, align 4
  %70 = icmp eq i32 %69, 0
  br i1 %70, label %74, label %71

71:                                               ; preds = %63
  %72 = inttoptr i64 %67 to i8*
  %73 = call zeroext i1 @_ZN5blink14MarkingVisitor16WriteBarrierSlowEPv(i8* %72) #11
  br label %74

74:                                               ; preds = %63, %71
  %75 = getelementptr inbounds i8, i8* %6, i64 88
  %76 = getelementptr inbounds %"class.blink::FetchResponseData", %"class.blink::FetchResponseData"* %0, i64 0, i32 10, i32 0, i32 0
  %77 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %76, align 8
  %78 = icmp eq %"class.WTF::StringImpl"* %77, null
  br i1 %78, label %96, label %79

79:                                               ; preds = %74
  %80 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %77, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %81 = load atomic i32, i32* %80 monotonic, align 4
  %82 = and i32 %81, 2
  %83 = icmp eq i32 %82, 0
  br i1 %83, label %84, label %96

84:                                               ; preds = %79
  %85 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %77, i64 0, i32 0
  %86 = load i32, i32* %85, align 4
  %87 = zext i32 %86 to i33
  %88 = call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %87, i33 1) #11
  %89 = extractvalue { i33, i1 } %88, 1
  %90 = extractvalue { i33, i1 } %88, 0
  %91 = icmp slt i33 %90, 0
  %92 = or i1 %89, %91
  br i1 %92, label %93, label %94, !prof !2

93:                                               ; preds = %84
  call void @llvm.trap() #11
  unreachable

94:                                               ; preds = %84
  %95 = trunc i33 %90 to i32
  store i32 %95, i32* %85, align 4
  br label %96

96:                                               ; preds = %94, %79, %74
  %97 = ptrtoint %"class.WTF::StringImpl"* %77 to i64
  %98 = bitcast i8* %75 to i64*
  %99 = bitcast i8* %75 to %"class.WTF::StringImpl"**
  %100 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %99, align 8
  store i64 %97, i64* %98, align 8
  %101 = icmp eq %"class.WTF::StringImpl"* %100, null
  br i1 %101, label %115, label %102

102:                                              ; preds = %96
  %103 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %100, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %104 = load atomic i32, i32* %103 monotonic, align 4
  %105 = and i32 %104, 2
  %106 = icmp eq i32 %105, 0
  %107 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %100, i64 0, i32 0
  %108 = load i32, i32* %107, align 4
  br i1 %106, label %109, label %111

109:                                              ; preds = %102
  %110 = add i32 %108, -1
  store i32 %110, i32* %107, align 4
  br label %111

111:                                              ; preds = %109, %102
  %112 = phi i32 [ %110, %109 ], [ %108, %102 ]
  %113 = icmp eq i32 %112, 0
  br i1 %113, label %114, label %115

114:                                              ; preds = %111
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %100) #11
  br label %115

115:                                              ; preds = %96, %111, %114
  %116 = getelementptr inbounds i8, i8* %6, i64 72
  %117 = ptrtoint %"class.blink::FetchResponseData"* %0 to i64
  %118 = bitcast i8* %116 to i64*
  store atomic i64 %117, i64* %118 monotonic, align 8
  %119 = load atomic i32, i32* getelementptr inbounds (%"class.blink::AtomicEntryFlag", %"class.blink::AtomicEntryFlag"* @_ZN5blink11ThreadState25incremental_marking_flag_E, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0) monotonic, align 4
  %120 = icmp eq i32 %119, 0
  br i1 %120, label %124, label %121

121:                                              ; preds = %115
  %122 = bitcast %"class.blink::FetchResponseData"* %0 to i8*
  %123 = call zeroext i1 @_ZN5blink14MarkingVisitor16WriteBarrierSlowEPv(i8* %122) #11
  br label %124

124:                                              ; preds = %115, %121
  ret %"class.blink::FetchResponseData"* %7

125:                                              ; preds = %45, %175
  %126 = phi %"class.std::__1::__tree_end_node"* [ %42, %45 ], [ %176, %175 ]
  %127 = getelementptr inbounds %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_end_node"* %126, i64 4
  %128 = bitcast %"class.std::__1::__tree_end_node"* %127 to %"class.WTF::String"*
  %129 = call zeroext i1 @_ZN5blink4cors30IsCorsSafelistedResponseHeaderERKN3WTF6StringE(%"class.WTF::String"* dereferenceable(8) %128) #11
  br i1 %129, label %143, label %130

130:                                              ; preds = %125
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %46) #11
  call void @_ZNK3WTF6String5AsciiEv(%"class.std::__1::basic_string"* nonnull sret %3, %"class.WTF::String"* %128) #11
  %131 = call %"class.std::__1::__tree_end_node"* @_ZNKSt3__16__treeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEN5blink17CompareIgnoreCaseENS4_IS6_EEE4findIS6_EENS_21__tree_const_iteratorIS6_PNS_11__tree_nodeIS6_PvEElEERKT_(%"class.std::__1::__tree.279"* %47, %"class.std::__1::basic_string"* nonnull dereferenceable(24) %3) #11
  %132 = icmp eq %"class.std::__1::__tree_end_node"* %131, %48
  br i1 %132, label %136, label %133

133:                                              ; preds = %130
  %134 = call zeroext i1 @_ZN5blink10FetchUtils29IsForbiddenResponseHeaderNameERKN3WTF6StringE(%"class.WTF::String"* dereferenceable(8) %128) #11
  %135 = xor i1 %134, true
  br label %136

136:                                              ; preds = %130, %133
  %137 = phi i1 [ false, %130 ], [ %135, %133 ]
  %138 = load i8, i8* %50, align 1
  %139 = icmp slt i8 %138, 0
  br i1 %139, label %140, label %142

140:                                              ; preds = %136
  %141 = load i8*, i8** %51, align 8
  call void @_ZdlPv(i8* %141) #12
  br label %142

142:                                              ; preds = %140, %136
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %46) #11
  br i1 %137, label %143, label %147

143:                                              ; preds = %125, %142
  %144 = load %"class.blink::FetchHeaderList"*, %"class.blink::FetchHeaderList"** %53, align 8
  %145 = getelementptr inbounds %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_end_node"* %126, i64 5
  %146 = bitcast %"class.std::__1::__tree_end_node"* %145 to %"class.WTF::String"*
  call void @_ZN5blink15FetchHeaderList6AppendERKN3WTF6StringES4_(%"class.blink::FetchHeaderList"* %144, %"class.WTF::String"* dereferenceable(8) %128, %"class.WTF::String"* dereferenceable(8) %146) #11
  br label %147

147:                                              ; preds = %143, %142
  %148 = getelementptr inbounds %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_end_node"* %126, i64 1, i32 0
  %149 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %148, align 8
  %150 = icmp eq %"class.std::__1::__tree_node_base"* %149, null
  br i1 %150, label %151, label %159

151:                                              ; preds = %147
  %152 = bitcast %"class.std::__1::__tree_end_node"* %126 to %"class.std::__1::__tree_node_base"*
  %153 = getelementptr inbounds %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_end_node"* %126, i64 2
  %154 = bitcast %"class.std::__1::__tree_end_node"* %153 to %"class.std::__1::__tree_end_node"**
  %155 = load %"class.std::__1::__tree_end_node"*, %"class.std::__1::__tree_end_node"** %154, align 8
  %156 = getelementptr inbounds %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_end_node"* %155, i64 0, i32 0
  %157 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %156, align 8
  %158 = icmp eq %"class.std::__1::__tree_node_base"* %157, %152
  br i1 %158, label %175, label %166

159:                                              ; preds = %147, %159
  %160 = phi %"class.std::__1::__tree_node_base"* [ %162, %159 ], [ %149, %147 ]
  %161 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %160, i64 0, i32 0, i32 0
  %162 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %161, align 8
  %163 = icmp eq %"class.std::__1::__tree_node_base"* %162, null
  br i1 %163, label %164, label %159

164:                                              ; preds = %159
  %165 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %160, i64 0, i32 0
  br label %175

166:                                              ; preds = %151, %166
  %167 = phi %"class.std::__1::__tree_end_node"** [ %170, %166 ], [ %154, %151 ]
  %168 = bitcast %"class.std::__1::__tree_end_node"** %167 to %"class.std::__1::__tree_node_base"**
  %169 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %168, align 8
  %170 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %169, i64 0, i32 2
  %171 = load %"class.std::__1::__tree_end_node"*, %"class.std::__1::__tree_end_node"** %170, align 8
  %172 = getelementptr inbounds %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_end_node"* %171, i64 0, i32 0
  %173 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %172, align 8
  %174 = icmp eq %"class.std::__1::__tree_node_base"* %173, %169
  br i1 %174, label %175, label %166

175:                                              ; preds = %166, %151, %164
  %176 = phi %"class.std::__1::__tree_end_node"* [ %165, %164 ], [ %155, %151 ], [ %171, %166 ]
  %177 = icmp eq %"class.std::__1::__tree_end_node"* %176, %43
  br i1 %177, label %54, label %125
}

declare zeroext i1 @_ZN5blink4cors30IsCorsSafelistedResponseHeaderERKN3WTF6StringE(%"class.WTF::String"* dereferenceable(8)) local_unnamed_addr #2

declare void @_ZNK3WTF6String5AsciiEv(%"class.std::__1::basic_string"* sret, %"class.WTF::String"*) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden %"class.blink::FetchResponseData"* @_ZNK5blink17FetchResponseData28CreateOpaqueFilteredResponseEv(%"class.blink::FetchResponseData"*) local_unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.blink::FetchResponseData", %"class.blink::FetchResponseData"* %0, i64 0, i32 2
  %3 = load %"class.WTF::AtomicString"*, %"class.WTF::AtomicString"** @_ZN3WTF12g_empty_atomE, align 8
  %4 = tail call i8* @_ZN5blink10ThreadHeap8AllocateINS_17FetchResponseDataEEEPhm(i64 176) #11
  %5 = bitcast i8* %4 to %"class.blink::FetchResponseData"*
  %6 = load i32, i32* %2, align 4
  %7 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %3, i64 0, i32 0, i32 0, i32 0
  %8 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %7, align 8
  %9 = icmp eq %"class.WTF::StringImpl"* %8, null
  br i1 %9, label %27, label %10

10:                                               ; preds = %1
  %11 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %8, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %12 = load atomic i32, i32* %11 monotonic, align 4
  %13 = and i32 %12, 2
  %14 = icmp eq i32 %13, 0
  br i1 %14, label %15, label %27

15:                                               ; preds = %10
  %16 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %8, i64 0, i32 0
  %17 = load i32, i32* %16, align 4
  %18 = zext i32 %17 to i33
  %19 = tail call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %18, i33 1) #11
  %20 = extractvalue { i33, i1 } %19, 1
  %21 = extractvalue { i33, i1 } %19, 0
  %22 = icmp slt i33 %21, 0
  %23 = or i1 %20, %22
  br i1 %23, label %24, label %25, !prof !2

24:                                               ; preds = %15
  tail call void @llvm.trap() #11
  unreachable

25:                                               ; preds = %15
  %26 = trunc i33 %21 to i32
  store i32 %26, i32* %16, align 4
  br label %27

27:                                               ; preds = %1, %10, %25
  tail call void @_ZN5blink17FetchResponseDataC2EN7network5mojom17FetchResponseTypeENS2_19FetchResponseSourceEtN3WTF12AtomicStringE(%"class.blink::FetchResponseData"* %5, i32 4, i32 %6, i16 zeroext 0, %"class.WTF::StringImpl"* %8) #11
  %28 = getelementptr inbounds i8, i8* %4, i64 -4
  %29 = bitcast i8* %28 to i16*
  %30 = load atomic i16, i16* %29 monotonic, align 2
  %31 = or i16 %30, 1
  store atomic i16 %31, i16* %29 release, align 2
  %32 = getelementptr inbounds i8, i8* %4, i64 72
  %33 = ptrtoint %"class.blink::FetchResponseData"* %0 to i64
  %34 = bitcast i8* %32 to i64*
  store atomic i64 %33, i64* %34 monotonic, align 8
  %35 = load atomic i32, i32* getelementptr inbounds (%"class.blink::AtomicEntryFlag", %"class.blink::AtomicEntryFlag"* @_ZN5blink11ThreadState25incremental_marking_flag_E, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0) monotonic, align 4
  %36 = icmp eq i32 %35, 0
  br i1 %36, label %40, label %37

37:                                               ; preds = %27
  %38 = bitcast %"class.blink::FetchResponseData"* %0 to i8*
  %39 = tail call zeroext i1 @_ZN5blink14MarkingVisitor16WriteBarrierSlowEPv(i8* %38) #11
  br label %40

40:                                               ; preds = %27, %37
  ret %"class.blink::FetchResponseData"* %5
}

; Function Attrs: nounwind ssp uwtable
define hidden %"class.blink::FetchResponseData"* @_ZNK5blink17FetchResponseData36CreateOpaqueRedirectFilteredResponseEv(%"class.blink::FetchResponseData"*) local_unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.blink::FetchResponseData", %"class.blink::FetchResponseData"* %0, i64 0, i32 2
  %3 = load %"class.WTF::AtomicString"*, %"class.WTF::AtomicString"** @_ZN3WTF12g_empty_atomE, align 8
  %4 = tail call i8* @_ZN5blink10ThreadHeap8AllocateINS_17FetchResponseDataEEEPhm(i64 176) #11
  %5 = bitcast i8* %4 to %"class.blink::FetchResponseData"*
  %6 = load i32, i32* %2, align 4
  %7 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %3, i64 0, i32 0, i32 0, i32 0
  %8 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %7, align 8
  %9 = icmp eq %"class.WTF::StringImpl"* %8, null
  br i1 %9, label %27, label %10

10:                                               ; preds = %1
  %11 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %8, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %12 = load atomic i32, i32* %11 monotonic, align 4
  %13 = and i32 %12, 2
  %14 = icmp eq i32 %13, 0
  br i1 %14, label %15, label %27

15:                                               ; preds = %10
  %16 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %8, i64 0, i32 0
  %17 = load i32, i32* %16, align 4
  %18 = zext i32 %17 to i33
  %19 = tail call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %18, i33 1) #11
  %20 = extractvalue { i33, i1 } %19, 1
  %21 = extractvalue { i33, i1 } %19, 0
  %22 = icmp slt i33 %21, 0
  %23 = or i1 %20, %22
  br i1 %23, label %24, label %25, !prof !2

24:                                               ; preds = %15
  tail call void @llvm.trap() #11
  unreachable

25:                                               ; preds = %15
  %26 = trunc i33 %21 to i32
  store i32 %26, i32* %16, align 4
  br label %27

27:                                               ; preds = %1, %10, %25
  tail call void @_ZN5blink17FetchResponseDataC2EN7network5mojom17FetchResponseTypeENS2_19FetchResponseSourceEtN3WTF12AtomicStringE(%"class.blink::FetchResponseData"* %5, i32 5, i32 %6, i16 zeroext 0, %"class.WTF::StringImpl"* %8) #11
  %28 = getelementptr inbounds i8, i8* %4, i64 -4
  %29 = bitcast i8* %28 to i16*
  %30 = load atomic i16, i16* %29 monotonic, align 2
  %31 = or i16 %30, 1
  store atomic i16 %31, i16* %29 release, align 2
  %32 = getelementptr inbounds %"class.blink::FetchResponseData", %"class.blink::FetchResponseData"* %0, i64 0, i32 4
  %33 = getelementptr inbounds i8, i8* %4, i64 32
  %34 = bitcast i8* %33 to %"class.WTF::Vector"*
  %35 = tail call dereferenceable(16) %"class.WTF::Vector"* @_ZN3WTF6VectorIN5blink4KURLELj0ENS_18PartitionAllocatorEEaSERKS4_(%"class.WTF::Vector"* %34, %"class.WTF::Vector"* dereferenceable(16) %32) #11
  %36 = getelementptr inbounds i8, i8* %4, i64 72
  %37 = ptrtoint %"class.blink::FetchResponseData"* %0 to i64
  %38 = bitcast i8* %36 to i64*
  store atomic i64 %37, i64* %38 monotonic, align 8
  %39 = load atomic i32, i32* getelementptr inbounds (%"class.blink::AtomicEntryFlag", %"class.blink::AtomicEntryFlag"* @_ZN5blink11ThreadState25incremental_marking_flag_E, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0) monotonic, align 4
  %40 = icmp eq i32 %39, 0
  br i1 %40, label %44, label %41

41:                                               ; preds = %27
  %42 = bitcast %"class.blink::FetchResponseData"* %0 to i8*
  %43 = tail call zeroext i1 @_ZN5blink14MarkingVisitor16WriteBarrierSlowEPv(i8* %42) #11
  br label %44

44:                                               ; preds = %27, %41
  ret %"class.blink::FetchResponseData"* %5
}

; Function Attrs: nounwind ssp uwtable
define hidden %"class.blink::KURL"* @_ZNK5blink17FetchResponseData3UrlEv(%"class.blink::FetchResponseData"*) local_unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.blink::FetchResponseData", %"class.blink::FetchResponseData"* %0, i64 0, i32 4, i32 0, i32 0, i32 2
  %3 = load i32, i32* %2, align 4
  %4 = icmp eq i32 %3, 0
  br i1 %4, label %9, label %5

5:                                                ; preds = %1
  %6 = getelementptr inbounds %"class.blink::FetchResponseData", %"class.blink::FetchResponseData"* %0, i64 0, i32 4
  %7 = add i32 %3, -1
  %8 = tail call dereferenceable(112) %"class.blink::KURL"* @_ZNK3WTF6VectorIN5blink4KURLELj0ENS_18PartitionAllocatorEE2atEj(%"class.WTF::Vector"* %6, i32 %7) #11
  br label %9

9:                                                ; preds = %1, %5
  %10 = phi %"class.blink::KURL"* [ %8, %5 ], [ null, %1 ]
  ret %"class.blink::KURL"* %10
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden zeroext i16 @_ZNK5blink17FetchResponseData14InternalStatusEv(%"class.blink::FetchResponseData"* nocapture readonly) local_unnamed_addr #3 align 2 {
  %2 = getelementptr inbounds %"class.blink::FetchResponseData", %"class.blink::FetchResponseData"* %0, i64 0, i32 8, i32 0, i32 0
  %3 = load %"class.blink::FetchResponseData"*, %"class.blink::FetchResponseData"** %2, align 8
  %4 = icmp eq %"class.blink::FetchResponseData"* %3, null
  %5 = select i1 %4, %"class.blink::FetchResponseData"* %0, %"class.blink::FetchResponseData"* %3
  %6 = getelementptr inbounds %"class.blink::FetchResponseData", %"class.blink::FetchResponseData"* %5, i64 0, i32 5
  %7 = load i16, i16* %6, align 8
  ret i16 %7
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden %"class.blink::FetchHeaderList"* @_ZNK5blink17FetchResponseData18InternalHeaderListEv(%"class.blink::FetchResponseData"* nocapture readonly) local_unnamed_addr #3 align 2 {
  %2 = getelementptr inbounds %"class.blink::FetchResponseData", %"class.blink::FetchResponseData"* %0, i64 0, i32 8, i32 0, i32 0
  %3 = load %"class.blink::FetchResponseData"*, %"class.blink::FetchResponseData"** %2, align 8
  %4 = icmp eq %"class.blink::FetchResponseData"* %3, null
  %5 = select i1 %4, %"class.blink::FetchResponseData"* %0, %"class.blink::FetchResponseData"* %3
  %6 = getelementptr inbounds %"class.blink::FetchResponseData", %"class.blink::FetchResponseData"* %5, i64 0, i32 7, i32 0, i32 0
  %7 = load %"class.blink::FetchHeaderList"*, %"class.blink::FetchHeaderList"** %6, align 8
  ret %"class.blink::FetchHeaderList"* %7
}

; Function Attrs: nounwind ssp uwtable
define hidden %"class.WTF::StringImpl"* @_ZNK5blink17FetchResponseData8MimeTypeEv(%"class.blink::FetchResponseData"* nocapture readonly) local_unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.blink::FetchResponseData", %"class.blink::FetchResponseData"* %0, i64 0, i32 10, i32 0, i32 0
  %3 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %2, align 8
  %4 = icmp eq %"class.WTF::StringImpl"* %3, null
  br i1 %4, label %22, label %5

5:                                                ; preds = %1
  %6 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %3, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %7 = load atomic i32, i32* %6 monotonic, align 4
  %8 = and i32 %7, 2
  %9 = icmp eq i32 %8, 0
  br i1 %9, label %10, label %22

10:                                               ; preds = %5
  %11 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %3, i64 0, i32 0
  %12 = load i32, i32* %11, align 4
  %13 = zext i32 %12 to i33
  %14 = tail call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %13, i33 1) #11
  %15 = extractvalue { i33, i1 } %14, 1
  %16 = extractvalue { i33, i1 } %14, 0
  %17 = icmp slt i33 %16, 0
  %18 = or i1 %15, %17
  br i1 %18, label %19, label %20, !prof !2

19:                                               ; preds = %10
  tail call void @llvm.trap() #11
  unreachable

20:                                               ; preds = %10
  %21 = trunc i33 %16 to i32
  store i32 %21, i32* %11, align 4
  br label %22

22:                                               ; preds = %1, %5, %20
  ret %"class.WTF::StringImpl"* %3
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden %"class.blink::BodyStreamBuffer"* @_ZNK5blink17FetchResponseData14InternalBufferEv(%"class.blink::FetchResponseData"* nocapture readonly) local_unnamed_addr #3 align 2 {
  %2 = getelementptr inbounds %"class.blink::FetchResponseData", %"class.blink::FetchResponseData"* %0, i64 0, i32 8, i32 0, i32 0
  %3 = load %"class.blink::FetchResponseData"*, %"class.blink::FetchResponseData"** %2, align 8
  %4 = icmp eq %"class.blink::FetchResponseData"* %3, null
  %5 = select i1 %4, %"class.blink::FetchResponseData"* %0, %"class.blink::FetchResponseData"* %3
  %6 = getelementptr inbounds %"class.blink::FetchResponseData", %"class.blink::FetchResponseData"* %5, i64 0, i32 9, i32 0, i32 0
  %7 = load %"class.blink::BodyStreamBuffer"*, %"class.blink::BodyStreamBuffer"** %6, align 8
  ret %"class.blink::BodyStreamBuffer"* %7
}

; Function Attrs: nounwind ssp uwtable
define hidden %"class.WTF::StringImpl"* @_ZNK5blink17FetchResponseData16InternalMIMETypeEv(%"class.blink::FetchResponseData"* nocapture readonly) local_unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.blink::FetchResponseData", %"class.blink::FetchResponseData"* %0, i64 0, i32 8, i32 0, i32 0
  %3 = load %"class.blink::FetchResponseData"*, %"class.blink::FetchResponseData"** %2, align 8
  %4 = icmp eq %"class.blink::FetchResponseData"* %3, null
  br i1 %4, label %26, label %5

5:                                                ; preds = %1
  %6 = getelementptr inbounds %"class.blink::FetchResponseData", %"class.blink::FetchResponseData"* %3, i64 0, i32 10, i32 0, i32 0
  %7 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %6, align 8
  %8 = icmp eq %"class.WTF::StringImpl"* %7, null
  br i1 %8, label %47, label %9

9:                                                ; preds = %5
  %10 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %7, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %11 = load atomic i32, i32* %10 monotonic, align 4
  %12 = and i32 %11, 2
  %13 = icmp eq i32 %12, 0
  br i1 %13, label %14, label %47

14:                                               ; preds = %9
  %15 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %7, i64 0, i32 0
  %16 = load i32, i32* %15, align 4
  %17 = zext i32 %16 to i33
  %18 = tail call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %17, i33 1) #11
  %19 = extractvalue { i33, i1 } %18, 1
  %20 = extractvalue { i33, i1 } %18, 0
  %21 = icmp slt i33 %20, 0
  %22 = or i1 %19, %21
  br i1 %22, label %23, label %24, !prof !2

23:                                               ; preds = %14
  tail call void @llvm.trap() #11
  unreachable

24:                                               ; preds = %14
  %25 = trunc i33 %20 to i32
  store i32 %25, i32* %15, align 4
  br label %47

26:                                               ; preds = %1
  %27 = getelementptr inbounds %"class.blink::FetchResponseData", %"class.blink::FetchResponseData"* %0, i64 0, i32 10, i32 0, i32 0
  %28 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %27, align 8
  %29 = icmp eq %"class.WTF::StringImpl"* %28, null
  br i1 %29, label %47, label %30

30:                                               ; preds = %26
  %31 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %28, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %32 = load atomic i32, i32* %31 monotonic, align 4
  %33 = and i32 %32, 2
  %34 = icmp eq i32 %33, 0
  br i1 %34, label %35, label %47

35:                                               ; preds = %30
  %36 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %28, i64 0, i32 0
  %37 = load i32, i32* %36, align 4
  %38 = zext i32 %37 to i33
  %39 = tail call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %38, i33 1) #11
  %40 = extractvalue { i33, i1 } %39, 1
  %41 = extractvalue { i33, i1 } %39, 0
  %42 = icmp slt i33 %41, 0
  %43 = or i1 %40, %42
  br i1 %43, label %44, label %45, !prof !2

44:                                               ; preds = %35
  tail call void @llvm.trap() #11
  unreachable

45:                                               ; preds = %35
  %46 = trunc i33 %41 to i32
  store i32 %46, i32* %36, align 4
  br label %47

47:                                               ; preds = %45, %30, %26, %24, %9, %5
  %48 = phi %"class.WTF::StringImpl"* [ null, %5 ], [ %7, %9 ], [ %7, %24 ], [ null, %26 ], [ %28, %30 ], [ %28, %45 ]
  ret %"class.WTF::StringImpl"* %48
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden dereferenceable(16) %"class.WTF::Vector"* @_ZN3WTF6VectorIN5blink4KURLELj0ENS_18PartitionAllocatorEEaSERKS4_(%"class.WTF::Vector"*, %"class.WTF::Vector"* dereferenceable(16)) local_unnamed_addr #0 comdat align 2 {
  %3 = icmp eq %"class.WTF::Vector"* %1, %0
  br i1 %3, label %108, label %4, !prof !2

4:                                                ; preds = %2
  %5 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %0, i64 0, i32 0, i32 0, i32 2
  %6 = load i32, i32* %5, align 4
  %7 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %1, i64 0, i32 0, i32 0, i32 2
  %8 = load i32, i32* %7, align 4
  %9 = icmp ugt i32 %6, %8
  br i1 %9, label %10, label %22

10:                                               ; preds = %4
  %11 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %0, i64 0, i32 0, i32 0, i32 0
  %12 = load %"class.blink::KURL"*, %"class.blink::KURL"** %11, align 8
  %13 = zext i32 %6 to i64
  %14 = getelementptr inbounds %"class.blink::KURL", %"class.blink::KURL"* %12, i64 %13
  %15 = zext i32 %8 to i64
  %16 = getelementptr inbounds %"class.blink::KURL", %"class.blink::KURL"* %12, i64 %15
  br label %17

17:                                               ; preds = %17, %10
  %18 = phi %"class.blink::KURL"* [ %19, %17 ], [ %16, %10 ]
  tail call void @_ZN5blink4KURLD1Ev(%"class.blink::KURL"* %18) #11
  %19 = getelementptr inbounds %"class.blink::KURL", %"class.blink::KURL"* %18, i64 1
  %20 = icmp eq %"class.blink::KURL"* %19, %14
  br i1 %20, label %21, label %17

21:                                               ; preds = %17
  store i32 %8, i32* %5, align 4
  br label %66

22:                                               ; preds = %4
  %23 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %0, i64 0, i32 0, i32 0, i32 1
  %24 = load i32, i32* %23, align 8
  %25 = icmp ugt i32 %8, %24
  br i1 %25, label %26, label %64

26:                                               ; preds = %22
  %27 = icmp eq i32 %24, 0
  br i1 %27, label %47, label %28

28:                                               ; preds = %26
  %29 = icmp eq i32 %6, 0
  br i1 %29, label %40, label %30

30:                                               ; preds = %28
  %31 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %0, i64 0, i32 0, i32 0, i32 0
  %32 = load %"class.blink::KURL"*, %"class.blink::KURL"** %31, align 8
  %33 = zext i32 %6 to i64
  %34 = getelementptr inbounds %"class.blink::KURL", %"class.blink::KURL"* %32, i64 %33
  br label %35

35:                                               ; preds = %35, %30
  %36 = phi %"class.blink::KURL"* [ %37, %35 ], [ %32, %30 ]
  tail call void @_ZN5blink4KURLD1Ev(%"class.blink::KURL"* %36) #11
  %37 = getelementptr inbounds %"class.blink::KURL", %"class.blink::KURL"* %36, i64 1
  %38 = icmp eq %"class.blink::KURL"* %37, %34
  br i1 %38, label %39, label %35

39:                                               ; preds = %35
  store i32 0, i32* %5, align 4
  br label %40

40:                                               ; preds = %39, %28
  %41 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %0, i64 0, i32 0, i32 0, i32 0
  %42 = load %"class.blink::KURL"*, %"class.blink::KURL"** %41, align 8
  %43 = bitcast %"class.WTF::Vector"* %0 to i64*
  store atomic i64 0, i64* %43 monotonic, align 8
  store i32 0, i32* %23, align 8
  %44 = getelementptr inbounds %"class.blink::KURL", %"class.blink::KURL"* %42, i64 0, i32 0
  tail call void @_ZN3WTF18PartitionAllocator11FreeBackingEPv(i8* %44) #11
  %45 = load i32, i32* %7, align 4
  %46 = load i32, i32* %23, align 8
  br label %47

47:                                               ; preds = %26, %40
  %48 = phi i32 [ 0, %26 ], [ %46, %40 ]
  %49 = phi i32 [ %8, %26 ], [ %45, %40 ]
  %50 = icmp ult i32 %48, %49
  br i1 %50, label %51, label %64, !prof !3

51:                                               ; preds = %47
  %52 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %0, i64 0, i32 0, i32 0, i32 0
  %53 = load %"class.blink::KURL"*, %"class.blink::KURL"** %52, align 8
  %54 = icmp eq %"class.blink::KURL"* %53, null
  br i1 %54, label %55, label %63

55:                                               ; preds = %51
  %56 = zext i32 %49 to i64
  %57 = tail call i64 @_ZN3WTF18PartitionAllocator13QuantizedSizeIN5blink4KURLEEEmm(i64 %56) #11
  %58 = tail call i8* @_ZN3WTF18PartitionAllocator15AllocateBackingEmPKc(i64 %57, i8* getelementptr inbounds ([59 x i8], [59 x i8]* @__PRETTY_FUNCTION__._ZN3WTF21GetStringWithTypeNameIN5blink4KURLEEEPKcv, i64 0, i64 0)) #11
  %59 = ptrtoint i8* %58 to i64
  %60 = bitcast %"class.WTF::Vector"* %0 to i64*
  store atomic i64 %59, i64* %60 monotonic, align 8
  %61 = udiv i64 %57, 112
  %62 = trunc i64 %61 to i32
  store i32 %62, i32* %23, align 8
  br label %64

63:                                               ; preds = %51
  tail call void @_ZN3WTF6VectorIN5blink4KURLELj0ENS_18PartitionAllocatorEE16ReallocateBufferEj(%"class.WTF::Vector"* %0, i32 %49) #11
  br label %64

64:                                               ; preds = %22, %47, %55, %63
  %65 = load i32, i32* %5, align 4
  br label %66

66:                                               ; preds = %64, %21
  %67 = phi i32 [ %65, %64 ], [ %8, %21 ]
  %68 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %1, i64 0, i32 0, i32 0, i32 0
  %69 = load %"class.blink::KURL"*, %"class.blink::KURL"** %68, align 8
  %70 = zext i32 %67 to i64
  %71 = getelementptr inbounds %"class.blink::KURL", %"class.blink::KURL"* %69, i64 %70
  %72 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %0, i64 0, i32 0, i32 0, i32 0
  %73 = load %"class.blink::KURL"*, %"class.blink::KURL"** %72, align 8
  %74 = icmp eq i32 %67, 0
  br i1 %74, label %86, label %75

75:                                               ; preds = %66, %75
  %76 = phi %"class.blink::KURL"* [ %80, %75 ], [ %73, %66 ]
  %77 = phi %"class.blink::KURL"* [ %79, %75 ], [ %69, %66 ]
  %78 = tail call dereferenceable(112) %"class.blink::KURL"* @_ZN5blink4KURLaSERKS0_(%"class.blink::KURL"* %76, %"class.blink::KURL"* dereferenceable(112) %77) #11
  %79 = getelementptr inbounds %"class.blink::KURL", %"class.blink::KURL"* %77, i64 1
  %80 = getelementptr inbounds %"class.blink::KURL", %"class.blink::KURL"* %76, i64 1
  %81 = icmp eq %"class.blink::KURL"* %79, %71
  br i1 %81, label %82, label %75

82:                                               ; preds = %75
  %83 = load %"class.blink::KURL"*, %"class.blink::KURL"** %68, align 8
  %84 = load i32, i32* %5, align 4
  %85 = load %"class.blink::KURL"*, %"class.blink::KURL"** %72, align 8
  br label %86

86:                                               ; preds = %82, %66
  %87 = phi %"class.blink::KURL"* [ %85, %82 ], [ %73, %66 ]
  %88 = phi i32 [ %84, %82 ], [ 0, %66 ]
  %89 = phi %"class.blink::KURL"* [ %83, %82 ], [ %69, %66 ]
  %90 = zext i32 %88 to i64
  %91 = load i32, i32* %7, align 4
  %92 = zext i32 %91 to i64
  %93 = getelementptr inbounds %"class.blink::KURL", %"class.blink::KURL"* %89, i64 %92
  %94 = icmp eq i32 %88, %91
  br i1 %94, label %106, label %95

95:                                               ; preds = %86
  %96 = getelementptr inbounds %"class.blink::KURL", %"class.blink::KURL"* %87, i64 %90
  %97 = getelementptr inbounds %"class.blink::KURL", %"class.blink::KURL"* %89, i64 %90
  br label %98

98:                                               ; preds = %95, %98
  %99 = phi %"class.blink::KURL"* [ %101, %98 ], [ %96, %95 ]
  %100 = phi %"class.blink::KURL"* [ %102, %98 ], [ %97, %95 ]
  tail call void @_ZN5blink4KURLC1ERKS0_(%"class.blink::KURL"* %99, %"class.blink::KURL"* dereferenceable(112) %100) #11
  %101 = getelementptr inbounds %"class.blink::KURL", %"class.blink::KURL"* %99, i64 1
  %102 = getelementptr inbounds %"class.blink::KURL", %"class.blink::KURL"* %100, i64 1
  %103 = icmp eq %"class.blink::KURL"* %102, %93
  br i1 %103, label %104, label %98

104:                                              ; preds = %98
  %105 = load i32, i32* %7, align 4
  br label %106

106:                                              ; preds = %104, %86
  %107 = phi i32 [ %105, %104 ], [ %88, %86 ]
  store i32 %107, i32* %5, align 4
  br label %108

108:                                              ; preds = %2, %106
  ret %"class.WTF::Vector"* %0
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden dereferenceable(16) %"class.WTF::Vector"* @_ZNK5blink17FetchResponseData15InternalURLListEv(%"class.blink::FetchResponseData"* readonly) local_unnamed_addr #3 align 2 {
  %2 = getelementptr inbounds %"class.blink::FetchResponseData", %"class.blink::FetchResponseData"* %0, i64 0, i32 8, i32 0, i32 0
  %3 = load %"class.blink::FetchResponseData"*, %"class.blink::FetchResponseData"** %2, align 8
  %4 = icmp eq %"class.blink::FetchResponseData"* %3, null
  %5 = select i1 %4, %"class.blink::FetchResponseData"* %0, %"class.blink::FetchResponseData"* %3
  %6 = getelementptr inbounds %"class.blink::FetchResponseData", %"class.blink::FetchResponseData"* %5, i64 0, i32 4
  ret %"class.WTF::Vector"* %6
}

; Function Attrs: nounwind ssp uwtable
define hidden %"class.blink::FetchResponseData"* @_ZN5blink17FetchResponseData5CloneEPNS_11ScriptStateERNS_14ExceptionStateE(%"class.blink::FetchResponseData"*, %"class.blink::ScriptState"*, %"class.blink::ExceptionState"* dereferenceable(72)) local_unnamed_addr #0 align 2 {
  %4 = alloca %"class.blink::BodyStreamBuffer"*, align 8
  %5 = alloca %"class.blink::BodyStreamBuffer"*, align 8
  %6 = load %"class.WTF::AtomicString"*, %"class.WTF::AtomicString"** @_ZN3WTF12g_empty_atomE, align 8
  %7 = tail call i8* @_ZN5blink10ThreadHeap8AllocateINS_17FetchResponseDataEEEPhm(i64 176) #11
  %8 = bitcast i8* %7 to %"class.blink::FetchResponseData"*
  %9 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %6, i64 0, i32 0, i32 0, i32 0
  %10 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %9, align 8
  %11 = icmp eq %"class.WTF::StringImpl"* %10, null
  br i1 %11, label %29, label %12

12:                                               ; preds = %3
  %13 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %10, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %14 = load atomic i32, i32* %13 monotonic, align 4
  %15 = and i32 %14, 2
  %16 = icmp eq i32 %15, 0
  br i1 %16, label %17, label %29

17:                                               ; preds = %12
  %18 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %10, i64 0, i32 0
  %19 = load i32, i32* %18, align 4
  %20 = zext i32 %19 to i33
  %21 = tail call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %20, i33 1) #11
  %22 = extractvalue { i33, i1 } %21, 1
  %23 = extractvalue { i33, i1 } %21, 0
  %24 = icmp slt i33 %23, 0
  %25 = or i1 %22, %24
  br i1 %25, label %26, label %27, !prof !2

26:                                               ; preds = %17
  tail call void @llvm.trap() #11
  unreachable

27:                                               ; preds = %17
  %28 = trunc i33 %23 to i32
  store i32 %28, i32* %18, align 4
  br label %29

29:                                               ; preds = %3, %12, %27
  tail call void @_ZN5blink17FetchResponseDataC2EN7network5mojom17FetchResponseTypeENS2_19FetchResponseSourceEtN3WTF12AtomicStringE(%"class.blink::FetchResponseData"* %8, i32 2, i32 0, i16 zeroext 200, %"class.WTF::StringImpl"* %10) #11
  %30 = getelementptr inbounds i8, i8* %7, i64 -4
  %31 = bitcast i8* %30 to i16*
  %32 = load atomic i16, i16* %31 monotonic, align 2
  %33 = or i16 %32, 1
  store atomic i16 %33, i16* %31 release, align 2
  %34 = getelementptr inbounds %"class.blink::FetchResponseData", %"class.blink::FetchResponseData"* %0, i64 0, i32 0
  %35 = load i32, i32* %34, align 8
  %36 = bitcast i8* %7 to i32*
  store i32 %35, i32* %36, align 8
  %37 = getelementptr inbounds %"class.blink::FetchResponseData", %"class.blink::FetchResponseData"* %0, i64 0, i32 1
  %38 = load i64, i64* %37, align 8
  %39 = getelementptr inbounds i8, i8* %7, i64 8
  %40 = bitcast i8* %39 to i64*
  store i64 %38, i64* %40, align 8
  %41 = getelementptr inbounds %"class.blink::FetchResponseData", %"class.blink::FetchResponseData"* %0, i64 0, i32 2
  %42 = load i32, i32* %41, align 8
  %43 = getelementptr inbounds i8, i8* %7, i64 16
  %44 = bitcast i8* %43 to i32*
  store i32 %42, i32* %44, align 8
  %45 = getelementptr inbounds %"class.blink::FetchResponseData", %"class.blink::FetchResponseData"* %0, i64 0, i32 3, i32 0, i32 0, i32 0
  %46 = load i32*, i32** %45, align 8
  %47 = icmp eq i32* %46, null
  br i1 %47, label %65, label %48

48:                                               ; preds = %29
  %49 = tail call i8* @_Znwm(i64 4) #12
  %50 = bitcast i8* %49 to i32*
  store i32 0, i32* %50, align 4
  %51 = ptrtoint i8* %49 to i64
  %52 = getelementptr inbounds i8, i8* %7, i64 24
  %53 = bitcast i8* %52 to i32**
  %54 = load i32*, i32** %53, align 8
  %55 = bitcast i8* %52 to i64*
  store i64 %51, i64* %55, align 8
  %56 = icmp eq i32* %54, null
  %57 = bitcast i8* %49 to i32*
  br i1 %56, label %61, label %58

58:                                               ; preds = %48
  %59 = bitcast i32* %54 to i8*
  tail call void @_ZdlPv(i8* %59) #12
  %60 = load i32*, i32** %53, align 8
  br label %61

61:                                               ; preds = %58, %48
  %62 = phi i32* [ %60, %58 ], [ %57, %48 ]
  %63 = load i32*, i32** %45, align 8
  %64 = load i32, i32* %63, align 4
  store i32 %64, i32* %62, align 4
  br label %65

65:                                               ; preds = %29, %61
  %66 = getelementptr inbounds %"class.blink::FetchResponseData", %"class.blink::FetchResponseData"* %0, i64 0, i32 4
  %67 = getelementptr inbounds i8, i8* %7, i64 32
  %68 = bitcast i8* %67 to %"class.WTF::Vector"*
  %69 = tail call dereferenceable(16) %"class.WTF::Vector"* @_ZN3WTF6VectorIN5blink4KURLELj0ENS_18PartitionAllocatorEEaSERKS4_(%"class.WTF::Vector"* %68, %"class.WTF::Vector"* dereferenceable(16) %66) #11
  %70 = getelementptr inbounds %"class.blink::FetchResponseData", %"class.blink::FetchResponseData"* %0, i64 0, i32 5
  %71 = load i16, i16* %70, align 8
  %72 = getelementptr inbounds i8, i8* %7, i64 48
  %73 = bitcast i8* %72 to i16*
  store i16 %71, i16* %73, align 8
  %74 = getelementptr inbounds i8, i8* %7, i64 56
  %75 = getelementptr inbounds %"class.blink::FetchResponseData", %"class.blink::FetchResponseData"* %0, i64 0, i32 6, i32 0, i32 0, i32 0
  %76 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %75, align 8
  %77 = icmp eq %"class.WTF::StringImpl"* %76, null
  br i1 %77, label %95, label %78

78:                                               ; preds = %65
  %79 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %76, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %80 = load atomic i32, i32* %79 monotonic, align 4
  %81 = and i32 %80, 2
  %82 = icmp eq i32 %81, 0
  br i1 %82, label %83, label %95

83:                                               ; preds = %78
  %84 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %76, i64 0, i32 0
  %85 = load i32, i32* %84, align 4
  %86 = zext i32 %85 to i33
  %87 = tail call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %86, i33 1) #11
  %88 = extractvalue { i33, i1 } %87, 1
  %89 = extractvalue { i33, i1 } %87, 0
  %90 = icmp slt i33 %89, 0
  %91 = or i1 %88, %90
  br i1 %91, label %92, label %93, !prof !2

92:                                               ; preds = %83
  tail call void @llvm.trap() #11
  unreachable

93:                                               ; preds = %83
  %94 = trunc i33 %89 to i32
  store i32 %94, i32* %84, align 4
  br label %95

95:                                               ; preds = %93, %78, %65
  %96 = ptrtoint %"class.WTF::StringImpl"* %76 to i64
  %97 = bitcast i8* %74 to i64*
  %98 = bitcast i8* %74 to %"class.WTF::StringImpl"**
  %99 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %98, align 8
  store i64 %96, i64* %97, align 8
  %100 = icmp eq %"class.WTF::StringImpl"* %99, null
  br i1 %100, label %114, label %101

101:                                              ; preds = %95
  %102 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %99, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %103 = load atomic i32, i32* %102 monotonic, align 4
  %104 = and i32 %103, 2
  %105 = icmp eq i32 %104, 0
  %106 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %99, i64 0, i32 0
  %107 = load i32, i32* %106, align 4
  br i1 %105, label %108, label %110

108:                                              ; preds = %101
  %109 = add i32 %107, -1
  store i32 %109, i32* %106, align 4
  br label %110

110:                                              ; preds = %108, %101
  %111 = phi i32 [ %109, %108 ], [ %107, %101 ]
  %112 = icmp eq i32 %111, 0
  br i1 %112, label %113, label %114

113:                                              ; preds = %110
  tail call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %99) #11
  br label %114

114:                                              ; preds = %95, %110, %113
  %115 = getelementptr inbounds %"class.blink::FetchResponseData", %"class.blink::FetchResponseData"* %0, i64 0, i32 7, i32 0, i32 0
  %116 = load %"class.blink::FetchHeaderList"*, %"class.blink::FetchHeaderList"** %115, align 8
  %117 = tail call %"class.blink::FetchHeaderList"* @_ZNK5blink15FetchHeaderList5CloneEv(%"class.blink::FetchHeaderList"* %116) #11
  %118 = getelementptr inbounds i8, i8* %7, i64 64
  %119 = ptrtoint %"class.blink::FetchHeaderList"* %117 to i64
  %120 = bitcast i8* %118 to i64*
  store atomic i64 %119, i64* %120 monotonic, align 8
  %121 = load atomic i32, i32* getelementptr inbounds (%"class.blink::AtomicEntryFlag", %"class.blink::AtomicEntryFlag"* @_ZN5blink11ThreadState25incremental_marking_flag_E, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0) monotonic, align 4
  %122 = icmp eq i32 %121, 0
  br i1 %122, label %126, label %123

123:                                              ; preds = %114
  %124 = bitcast %"class.blink::FetchHeaderList"* %117 to i8*
  %125 = tail call zeroext i1 @_ZN5blink14MarkingVisitor16WriteBarrierSlowEPv(i8* %124) #11
  br label %126

126:                                              ; preds = %114, %123
  %127 = getelementptr inbounds i8, i8* %7, i64 88
  %128 = getelementptr inbounds %"class.blink::FetchResponseData", %"class.blink::FetchResponseData"* %0, i64 0, i32 10, i32 0, i32 0
  %129 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %128, align 8
  %130 = icmp eq %"class.WTF::StringImpl"* %129, null
  br i1 %130, label %148, label %131

131:                                              ; preds = %126
  %132 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %129, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %133 = load atomic i32, i32* %132 monotonic, align 4
  %134 = and i32 %133, 2
  %135 = icmp eq i32 %134, 0
  br i1 %135, label %136, label %148

136:                                              ; preds = %131
  %137 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %129, i64 0, i32 0
  %138 = load i32, i32* %137, align 4
  %139 = zext i32 %138 to i33
  %140 = tail call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %139, i33 1) #11
  %141 = extractvalue { i33, i1 } %140, 1
  %142 = extractvalue { i33, i1 } %140, 0
  %143 = icmp slt i33 %142, 0
  %144 = or i1 %141, %143
  br i1 %144, label %145, label %146, !prof !2

145:                                              ; preds = %136
  tail call void @llvm.trap() #11
  unreachable

146:                                              ; preds = %136
  %147 = trunc i33 %142 to i32
  store i32 %147, i32* %137, align 4
  br label %148

148:                                              ; preds = %146, %131, %126
  %149 = ptrtoint %"class.WTF::StringImpl"* %129 to i64
  %150 = bitcast i8* %127 to i64*
  %151 = bitcast i8* %127 to %"class.WTF::StringImpl"**
  %152 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %151, align 8
  store i64 %149, i64* %150, align 8
  %153 = icmp eq %"class.WTF::StringImpl"* %152, null
  br i1 %153, label %167, label %154

154:                                              ; preds = %148
  %155 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %152, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %156 = load atomic i32, i32* %155 monotonic, align 4
  %157 = and i32 %156, 2
  %158 = icmp eq i32 %157, 0
  %159 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %152, i64 0, i32 0
  %160 = load i32, i32* %159, align 4
  br i1 %158, label %161, label %163

161:                                              ; preds = %154
  %162 = add i32 %160, -1
  store i32 %162, i32* %159, align 4
  br label %163

163:                                              ; preds = %161, %154
  %164 = phi i32 [ %162, %161 ], [ %160, %154 ]
  %165 = icmp eq i32 %164, 0
  br i1 %165, label %166, label %167

166:                                              ; preds = %163
  tail call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %152) #11
  br label %167

167:                                              ; preds = %148, %163, %166
  %168 = getelementptr inbounds i8, i8* %7, i64 96
  %169 = getelementptr inbounds %"class.blink::FetchResponseData", %"class.blink::FetchResponseData"* %0, i64 0, i32 11, i32 0, i32 0, i32 0
  %170 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %169, align 8
  %171 = icmp eq %"class.WTF::StringImpl"* %170, null
  br i1 %171, label %189, label %172

172:                                              ; preds = %167
  %173 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %170, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %174 = load atomic i32, i32* %173 monotonic, align 4
  %175 = and i32 %174, 2
  %176 = icmp eq i32 %175, 0
  br i1 %176, label %177, label %189

177:                                              ; preds = %172
  %178 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %170, i64 0, i32 0
  %179 = load i32, i32* %178, align 4
  %180 = zext i32 %179 to i33
  %181 = tail call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %180, i33 1) #11
  %182 = extractvalue { i33, i1 } %181, 1
  %183 = extractvalue { i33, i1 } %181, 0
  %184 = icmp slt i33 %183, 0
  %185 = or i1 %182, %184
  br i1 %185, label %186, label %187, !prof !2

186:                                              ; preds = %177
  tail call void @llvm.trap() #11
  unreachable

187:                                              ; preds = %177
  %188 = trunc i33 %183 to i32
  store i32 %188, i32* %178, align 4
  br label %189

189:                                              ; preds = %187, %172, %167
  %190 = ptrtoint %"class.WTF::StringImpl"* %170 to i64
  %191 = bitcast i8* %168 to i64*
  %192 = bitcast i8* %168 to %"class.WTF::StringImpl"**
  %193 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %192, align 8
  store i64 %190, i64* %191, align 8
  %194 = icmp eq %"class.WTF::StringImpl"* %193, null
  br i1 %194, label %208, label %195

195:                                              ; preds = %189
  %196 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %193, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %197 = load atomic i32, i32* %196 monotonic, align 4
  %198 = and i32 %197, 2
  %199 = icmp eq i32 %198, 0
  %200 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %193, i64 0, i32 0
  %201 = load i32, i32* %200, align 4
  br i1 %199, label %202, label %204

202:                                              ; preds = %195
  %203 = add i32 %201, -1
  store i32 %203, i32* %200, align 4
  br label %204

204:                                              ; preds = %202, %195
  %205 = phi i32 [ %203, %202 ], [ %201, %195 ]
  %206 = icmp eq i32 %205, 0
  br i1 %206, label %207, label %208

207:                                              ; preds = %204
  tail call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %193) #11
  br label %208

208:                                              ; preds = %189, %204, %207
  %209 = getelementptr inbounds %"class.blink::FetchResponseData", %"class.blink::FetchResponseData"* %0, i64 0, i32 12, i32 0, i32 0
  %210 = getelementptr inbounds i8, i8* %7, i64 104
  %211 = bitcast i8* %210 to i64*
  %212 = load i64, i64* %209, align 8
  store i64 %212, i64* %211, align 8
  %213 = getelementptr inbounds i8, i8* %7, i64 112
  %214 = getelementptr inbounds %"class.blink::FetchResponseData", %"class.blink::FetchResponseData"* %0, i64 0, i32 13, i32 0, i32 0
  %215 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %214, align 8
  %216 = icmp eq %"class.WTF::StringImpl"* %215, null
  br i1 %216, label %234, label %217

217:                                              ; preds = %208
  %218 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %215, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %219 = load atomic i32, i32* %218 monotonic, align 4
  %220 = and i32 %219, 2
  %221 = icmp eq i32 %220, 0
  br i1 %221, label %222, label %234

222:                                              ; preds = %217
  %223 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %215, i64 0, i32 0
  %224 = load i32, i32* %223, align 4
  %225 = zext i32 %224 to i33
  %226 = tail call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %225, i33 1) #11
  %227 = extractvalue { i33, i1 } %226, 1
  %228 = extractvalue { i33, i1 } %226, 0
  %229 = icmp slt i33 %228, 0
  %230 = or i1 %227, %229
  br i1 %230, label %231, label %232, !prof !2

231:                                              ; preds = %222
  tail call void @llvm.trap() #11
  unreachable

232:                                              ; preds = %222
  %233 = trunc i33 %228 to i32
  store i32 %233, i32* %223, align 4
  br label %234

234:                                              ; preds = %232, %217, %208
  %235 = ptrtoint %"class.WTF::StringImpl"* %215 to i64
  %236 = bitcast i8* %213 to i64*
  %237 = bitcast i8* %213 to %"class.WTF::StringImpl"**
  %238 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %237, align 8
  store i64 %235, i64* %236, align 8
  %239 = icmp eq %"class.WTF::StringImpl"* %238, null
  br i1 %239, label %253, label %240

240:                                              ; preds = %234
  %241 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %238, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %242 = load atomic i32, i32* %241 monotonic, align 4
  %243 = and i32 %242, 2
  %244 = icmp eq i32 %243, 0
  %245 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %238, i64 0, i32 0
  %246 = load i32, i32* %245, align 4
  br i1 %244, label %247, label %249

247:                                              ; preds = %240
  %248 = add i32 %246, -1
  store i32 %248, i32* %245, align 4
  br label %249

249:                                              ; preds = %247, %240
  %250 = phi i32 [ %248, %247 ], [ %246, %240 ]
  %251 = icmp eq i32 %250, 0
  br i1 %251, label %252, label %253

252:                                              ; preds = %249
  tail call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %238) #11
  br label %253

253:                                              ; preds = %234, %249, %252
  %254 = getelementptr inbounds %"class.blink::FetchResponseData", %"class.blink::FetchResponseData"* %0, i64 0, i32 14
  %255 = getelementptr inbounds i8, i8* %7, i64 120
  %256 = bitcast i8* %255 to %"class.std::__1::set"*
  %257 = icmp eq %"class.std::__1::set"* %254, %256
  br i1 %257, label %263, label %258

258:                                              ; preds = %253
  %259 = bitcast i8* %255 to %"class.std::__1::__tree.279"*
  %260 = getelementptr inbounds %"class.std::__1::set", %"class.std::__1::set"* %254, i64 0, i32 0, i32 0
  %261 = load %"class.std::__1::__tree_end_node"*, %"class.std::__1::__tree_end_node"** %260, align 8
  %262 = getelementptr inbounds %"class.blink::FetchResponseData", %"class.blink::FetchResponseData"* %0, i64 0, i32 14, i32 0, i32 1, i32 0, i32 0
  tail call void @_ZNSt3__16__treeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEN5blink17CompareIgnoreCaseENS4_IS6_EEE14__assign_multiINS_21__tree_const_iteratorIS6_PNS_11__tree_nodeIS6_PvEElEEEEvT_SI_(%"class.std::__1::__tree.279"* %259, %"class.std::__1::__tree_end_node"* %261, %"class.std::__1::__tree_end_node"* %262) #11
  br label %263

263:                                              ; preds = %253, %258
  %264 = getelementptr inbounds %"class.blink::FetchResponseData", %"class.blink::FetchResponseData"* %0, i64 0, i32 15
  %265 = load i32, i32* %264, align 8
  %266 = getelementptr inbounds i8, i8* %7, i64 144
  %267 = bitcast i8* %266 to i32*
  store i32 %265, i32* %267, align 8
  %268 = getelementptr inbounds i8, i8* %7, i64 152
  %269 = getelementptr inbounds %"class.blink::FetchResponseData", %"class.blink::FetchResponseData"* %0, i64 0, i32 16, i32 0, i32 0, i32 0
  %270 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %269, align 8
  %271 = icmp eq %"class.WTF::StringImpl"* %270, null
  br i1 %271, label %289, label %272

272:                                              ; preds = %263
  %273 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %270, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %274 = load atomic i32, i32* %273 monotonic, align 4
  %275 = and i32 %274, 2
  %276 = icmp eq i32 %275, 0
  br i1 %276, label %277, label %289

277:                                              ; preds = %272
  %278 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %270, i64 0, i32 0
  %279 = load i32, i32* %278, align 4
  %280 = zext i32 %279 to i33
  %281 = tail call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %280, i33 1) #11
  %282 = extractvalue { i33, i1 } %281, 1
  %283 = extractvalue { i33, i1 } %281, 0
  %284 = icmp slt i33 %283, 0
  %285 = or i1 %282, %284
  br i1 %285, label %286, label %287, !prof !2

286:                                              ; preds = %277
  tail call void @llvm.trap() #11
  unreachable

287:                                              ; preds = %277
  %288 = trunc i33 %283 to i32
  store i32 %288, i32* %278, align 4
  br label %289

289:                                              ; preds = %287, %272, %263
  %290 = ptrtoint %"class.WTF::StringImpl"* %270 to i64
  %291 = bitcast i8* %268 to i64*
  %292 = bitcast i8* %268 to %"class.WTF::StringImpl"**
  %293 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %292, align 8
  store i64 %290, i64* %291, align 8
  %294 = icmp eq %"class.WTF::StringImpl"* %293, null
  br i1 %294, label %308, label %295

295:                                              ; preds = %289
  %296 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %293, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %297 = load atomic i32, i32* %296 monotonic, align 4
  %298 = and i32 %297, 2
  %299 = icmp eq i32 %298, 0
  %300 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %293, i64 0, i32 0
  %301 = load i32, i32* %300, align 4
  br i1 %299, label %302, label %304

302:                                              ; preds = %295
  %303 = add i32 %301, -1
  store i32 %303, i32* %300, align 4
  br label %304

304:                                              ; preds = %302, %295
  %305 = phi i32 [ %303, %302 ], [ %301, %295 ]
  %306 = icmp eq i32 %305, 0
  br i1 %306, label %307, label %308

307:                                              ; preds = %304
  tail call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %293) #11
  br label %308

308:                                              ; preds = %289, %304, %307
  %309 = getelementptr inbounds %"class.blink::FetchResponseData", %"class.blink::FetchResponseData"* %0, i64 0, i32 17
  %310 = load i8, i8* %309, align 8, !range !4
  %311 = getelementptr inbounds i8, i8* %7, i64 160
  store i8 %310, i8* %311, align 8
  %312 = getelementptr inbounds %"class.blink::FetchResponseData", %"class.blink::FetchResponseData"* %0, i64 0, i32 18
  %313 = load i8, i8* %312, align 1, !range !4
  %314 = getelementptr inbounds i8, i8* %7, i64 161
  store i8 %313, i8* %314, align 1
  %315 = getelementptr inbounds %"class.blink::FetchResponseData", %"class.blink::FetchResponseData"* %0, i64 0, i32 19, i32 0, i32 0, i32 0
  %316 = load %"class.net::AuthChallengeInfo"*, %"class.net::AuthChallengeInfo"** %315, align 8
  %317 = icmp eq %"class.net::AuthChallengeInfo"* %316, null
  br i1 %317, label %329, label %318

318:                                              ; preds = %308
  %319 = tail call i8* @_Znwm(i64 184) #12
  %320 = bitcast i8* %319 to %"class.net::AuthChallengeInfo"*
  tail call void @_ZN3net17AuthChallengeInfoC1ERKS0_(%"class.net::AuthChallengeInfo"* nonnull %320, %"class.net::AuthChallengeInfo"* nonnull dereferenceable(184) %316) #11
  %321 = ptrtoint i8* %319 to i64
  %322 = getelementptr inbounds i8, i8* %7, i64 168
  %323 = bitcast i8* %322 to %"class.net::AuthChallengeInfo"**
  %324 = load %"class.net::AuthChallengeInfo"*, %"class.net::AuthChallengeInfo"** %323, align 8
  %325 = bitcast i8* %322 to i64*
  store i64 %321, i64* %325, align 8
  %326 = icmp eq %"class.net::AuthChallengeInfo"* %324, null
  br i1 %326, label %329, label %327

327:                                              ; preds = %318
  tail call void @_ZN3net17AuthChallengeInfoD1Ev(%"class.net::AuthChallengeInfo"* nonnull %324) #11
  %328 = getelementptr inbounds %"class.net::AuthChallengeInfo", %"class.net::AuthChallengeInfo"* %324, i64 0, i32 0
  tail call void @_ZdlPv(i8* %328) #12
  br label %329

329:                                              ; preds = %308, %318, %327
  %330 = load i32, i32* %34, align 8
  switch i32 %330, label %420 [
    i32 0, label %331
    i32 1, label %331
    i32 2, label %372
    i32 5, label %404
    i32 4, label %404
  ]

331:                                              ; preds = %329, %329
  %332 = getelementptr inbounds %"class.blink::FetchResponseData", %"class.blink::FetchResponseData"* %0, i64 0, i32 8, i32 0, i32 0
  %333 = load %"class.blink::FetchResponseData"*, %"class.blink::FetchResponseData"** %332, align 8
  %334 = tail call %"class.blink::FetchResponseData"* @_ZN5blink17FetchResponseData5CloneEPNS_11ScriptStateERNS_14ExceptionStateE(%"class.blink::FetchResponseData"* %333, %"class.blink::ScriptState"* %1, %"class.blink::ExceptionState"* dereferenceable(72) %2)
  %335 = getelementptr inbounds i8, i8* %7, i64 72
  %336 = ptrtoint %"class.blink::FetchResponseData"* %334 to i64
  %337 = bitcast i8* %335 to i64*
  store atomic i64 %336, i64* %337 monotonic, align 8
  %338 = load atomic i32, i32* getelementptr inbounds (%"class.blink::AtomicEntryFlag", %"class.blink::AtomicEntryFlag"* @_ZN5blink11ThreadState25incremental_marking_flag_E, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0) monotonic, align 4
  %339 = icmp eq i32 %338, 0
  br i1 %339, label %343, label %340

340:                                              ; preds = %331
  %341 = bitcast %"class.blink::FetchResponseData"* %334 to i8*
  %342 = tail call zeroext i1 @_ZN5blink14MarkingVisitor16WriteBarrierSlowEPv(i8* %341) #11
  br label %343

343:                                              ; preds = %331, %340
  %344 = getelementptr inbounds %"class.blink::ExceptionState", %"class.blink::ExceptionState"* %2, i64 0, i32 4
  %345 = load i32, i32* %344, align 8
  %346 = icmp eq i32 %345, 0
  br i1 %346, label %347, label %421

347:                                              ; preds = %343
  %348 = load %"class.blink::FetchResponseData"*, %"class.blink::FetchResponseData"** %332, align 8
  %349 = getelementptr inbounds %"class.blink::FetchResponseData", %"class.blink::FetchResponseData"* %348, i64 0, i32 9
  %350 = getelementptr inbounds %"class.blink::FetchResponseData", %"class.blink::FetchResponseData"* %0, i64 0, i32 9
  %351 = bitcast %"class.blink::Member.18"* %349 to i64*
  %352 = load i64, i64* %351, align 8
  %353 = bitcast %"class.blink::Member.18"* %350 to i64*
  store atomic i64 %352, i64* %353 monotonic, align 8
  %354 = load atomic i32, i32* getelementptr inbounds (%"class.blink::AtomicEntryFlag", %"class.blink::AtomicEntryFlag"* @_ZN5blink11ThreadState25incremental_marking_flag_E, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0) monotonic, align 4
  %355 = icmp eq i32 %354, 0
  br i1 %355, label %359, label %356

356:                                              ; preds = %347
  %357 = inttoptr i64 %352 to i8*
  %358 = tail call zeroext i1 @_ZN5blink14MarkingVisitor16WriteBarrierSlowEPv(i8* %357) #11
  br label %359

359:                                              ; preds = %347, %356
  %360 = bitcast i8* %335 to %"class.blink::FetchResponseData"**
  %361 = load %"class.blink::FetchResponseData"*, %"class.blink::FetchResponseData"** %360, align 8
  %362 = getelementptr inbounds %"class.blink::FetchResponseData", %"class.blink::FetchResponseData"* %361, i64 0, i32 9
  %363 = getelementptr inbounds i8, i8* %7, i64 80
  %364 = bitcast %"class.blink::Member.18"* %362 to i64*
  %365 = load i64, i64* %364, align 8
  %366 = bitcast i8* %363 to i64*
  store atomic i64 %365, i64* %366 monotonic, align 8
  %367 = load atomic i32, i32* getelementptr inbounds (%"class.blink::AtomicEntryFlag", %"class.blink::AtomicEntryFlag"* @_ZN5blink11ThreadState25incremental_marking_flag_E, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0) monotonic, align 4
  %368 = icmp eq i32 %367, 0
  br i1 %368, label %420, label %369

369:                                              ; preds = %359
  %370 = inttoptr i64 %365 to i8*
  %371 = tail call zeroext i1 @_ZN5blink14MarkingVisitor16WriteBarrierSlowEPv(i8* %370) #11
  br label %420

372:                                              ; preds = %329
  %373 = getelementptr inbounds %"class.blink::FetchResponseData", %"class.blink::FetchResponseData"* %0, i64 0, i32 9
  %374 = getelementptr inbounds %"class.blink::Member.18", %"class.blink::Member.18"* %373, i64 0, i32 0, i32 0
  %375 = load %"class.blink::BodyStreamBuffer"*, %"class.blink::BodyStreamBuffer"** %374, align 8
  %376 = icmp eq %"class.blink::BodyStreamBuffer"* %375, null
  br i1 %376, label %420, label %377

377:                                              ; preds = %372
  %378 = bitcast %"class.blink::BodyStreamBuffer"** %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %378) #11
  store %"class.blink::BodyStreamBuffer"* null, %"class.blink::BodyStreamBuffer"** %4, align 8
  %379 = bitcast %"class.blink::BodyStreamBuffer"** %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %379) #11
  store %"class.blink::BodyStreamBuffer"* null, %"class.blink::BodyStreamBuffer"** %5, align 8
  call void @_ZN5blink16BodyStreamBuffer3TeeEPPS0_S2_RNS_14ExceptionStateE(%"class.blink::BodyStreamBuffer"* nonnull %375, %"class.blink::BodyStreamBuffer"** nonnull %4, %"class.blink::BodyStreamBuffer"** nonnull %5, %"class.blink::ExceptionState"* dereferenceable(72) %2) #11
  %380 = getelementptr inbounds %"class.blink::ExceptionState", %"class.blink::ExceptionState"* %2, i64 0, i32 4
  %381 = load i32, i32* %380, align 8
  %382 = icmp eq i32 %381, 0
  br i1 %382, label %383, label %403

383:                                              ; preds = %377
  %384 = load %"class.blink::BodyStreamBuffer"*, %"class.blink::BodyStreamBuffer"** %4, align 8
  %385 = ptrtoint %"class.blink::BodyStreamBuffer"* %384 to i64
  %386 = bitcast %"class.blink::Member.18"* %373 to i64*
  store atomic i64 %385, i64* %386 monotonic, align 8
  %387 = load atomic i32, i32* getelementptr inbounds (%"class.blink::AtomicEntryFlag", %"class.blink::AtomicEntryFlag"* @_ZN5blink11ThreadState25incremental_marking_flag_E, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0) monotonic, align 4
  %388 = icmp eq i32 %387, 0
  br i1 %388, label %392, label %389

389:                                              ; preds = %383
  %390 = bitcast %"class.blink::BodyStreamBuffer"* %384 to i8*
  %391 = call zeroext i1 @_ZN5blink14MarkingVisitor16WriteBarrierSlowEPv(i8* %390) #11
  br label %392

392:                                              ; preds = %383, %389
  %393 = load %"class.blink::BodyStreamBuffer"*, %"class.blink::BodyStreamBuffer"** %5, align 8
  %394 = getelementptr inbounds i8, i8* %7, i64 80
  %395 = ptrtoint %"class.blink::BodyStreamBuffer"* %393 to i64
  %396 = bitcast i8* %394 to i64*
  store atomic i64 %395, i64* %396 monotonic, align 8
  %397 = load atomic i32, i32* getelementptr inbounds (%"class.blink::AtomicEntryFlag", %"class.blink::AtomicEntryFlag"* @_ZN5blink11ThreadState25incremental_marking_flag_E, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0) monotonic, align 4
  %398 = icmp eq i32 %397, 0
  br i1 %398, label %402, label %399

399:                                              ; preds = %392
  %400 = bitcast %"class.blink::BodyStreamBuffer"* %393 to i8*
  %401 = call zeroext i1 @_ZN5blink14MarkingVisitor16WriteBarrierSlowEPv(i8* %400) #11
  br label %402

402:                                              ; preds = %392, %399
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %379) #11
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %378) #11
  br label %420

403:                                              ; preds = %377
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %379) #11
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %378) #11
  br label %421

404:                                              ; preds = %329, %329
  %405 = getelementptr inbounds %"class.blink::FetchResponseData", %"class.blink::FetchResponseData"* %0, i64 0, i32 8, i32 0, i32 0
  %406 = load %"class.blink::FetchResponseData"*, %"class.blink::FetchResponseData"** %405, align 8
  %407 = tail call %"class.blink::FetchResponseData"* @_ZN5blink17FetchResponseData5CloneEPNS_11ScriptStateERNS_14ExceptionStateE(%"class.blink::FetchResponseData"* %406, %"class.blink::ScriptState"* %1, %"class.blink::ExceptionState"* dereferenceable(72) %2)
  %408 = getelementptr inbounds i8, i8* %7, i64 72
  %409 = ptrtoint %"class.blink::FetchResponseData"* %407 to i64
  %410 = bitcast i8* %408 to i64*
  store atomic i64 %409, i64* %410 monotonic, align 8
  %411 = load atomic i32, i32* getelementptr inbounds (%"class.blink::AtomicEntryFlag", %"class.blink::AtomicEntryFlag"* @_ZN5blink11ThreadState25incremental_marking_flag_E, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0) monotonic, align 4
  %412 = icmp eq i32 %411, 0
  br i1 %412, label %416, label %413

413:                                              ; preds = %404
  %414 = bitcast %"class.blink::FetchResponseData"* %407 to i8*
  %415 = tail call zeroext i1 @_ZN5blink14MarkingVisitor16WriteBarrierSlowEPv(i8* %414) #11
  br label %416

416:                                              ; preds = %404, %413
  %417 = getelementptr inbounds %"class.blink::ExceptionState", %"class.blink::ExceptionState"* %2, i64 0, i32 4
  %418 = load i32, i32* %417, align 8
  %419 = icmp eq i32 %418, 0
  br i1 %419, label %420, label %421

420:                                              ; preds = %372, %416, %369, %359, %402, %329
  br label %421

421:                                              ; preds = %343, %416, %403, %420
  %422 = phi %"class.blink::FetchResponseData"* [ %8, %420 ], [ null, %403 ], [ null, %343 ], [ null, %416 ]
  ret %"class.blink::FetchResponseData"* %422
}

declare %"class.blink::FetchHeaderList"* @_ZNK5blink15FetchHeaderList5CloneEv(%"class.blink::FetchHeaderList"*) local_unnamed_addr #2

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #1

declare void @_ZN5blink16BodyStreamBuffer3TeeEPPS0_S2_RNS_14ExceptionStateE(%"class.blink::BodyStreamBuffer"*, %"class.blink::BodyStreamBuffer"**, %"class.blink::BodyStreamBuffer"**, %"class.blink::ExceptionState"* dereferenceable(72)) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5blink17FetchResponseData24PopulateFetchAPIResponseERKNS_4KURLE(%"class.mojo::StructPtr"* noalias nocapture sret, %"class.blink::FetchResponseData"*, %"class.blink::KURL"* dereferenceable(112)) local_unnamed_addr #0 align 2 {
  %4 = alloca %"class.WTF::Vector.379", align 8
  %5 = alloca %"class.WTF::Vector.379", align 8
  %6 = alloca %"class.mojo::StructPtr.384", align 8
  %7 = alloca %"class.WTF::String", align 8
  %8 = getelementptr inbounds %"class.blink::FetchResponseData", %"class.blink::FetchResponseData"* %1, i64 0, i32 8, i32 0, i32 0
  %9 = load %"class.blink::FetchResponseData"*, %"class.blink::FetchResponseData"** %8, align 8
  %10 = icmp eq %"class.blink::FetchResponseData"* %9, null
  br i1 %10, label %71, label %11

11:                                               ; preds = %3
  %12 = getelementptr inbounds %"class.mojo::StructPtr", %"class.mojo::StructPtr"* %0, i64 0, i32 0, i32 0, i32 0, i32 0
  store %"class.blink::mojom::blink::FetchAPIResponse"* inttoptr (i64 -6148914691236517206 to %"class.blink::mojom::blink::FetchAPIResponse"*), %"class.blink::mojom::blink::FetchAPIResponse"** %12, align 8
  tail call void @_ZN5blink17FetchResponseData24PopulateFetchAPIResponseERKNS_4KURLE(%"class.mojo::StructPtr"* sret %0, %"class.blink::FetchResponseData"* nonnull %9, %"class.blink::KURL"* dereferenceable(112) %2)
  %13 = getelementptr inbounds %"class.blink::FetchResponseData", %"class.blink::FetchResponseData"* %1, i64 0, i32 0
  %14 = load i32, i32* %13, align 8
  %15 = load %"class.blink::mojom::blink::FetchAPIResponse"*, %"class.blink::mojom::blink::FetchAPIResponse"** %12, align 8
  %16 = getelementptr inbounds %"class.blink::mojom::blink::FetchAPIResponse", %"class.blink::mojom::blink::FetchAPIResponse"* %15, i64 0, i32 3
  store i32 %14, i32* %16, align 8
  %17 = getelementptr inbounds %"class.blink::FetchResponseData", %"class.blink::FetchResponseData"* %1, i64 0, i32 2
  %18 = load i32, i32* %17, align 8
  %19 = getelementptr inbounds %"class.blink::mojom::blink::FetchAPIResponse", %"class.blink::mojom::blink::FetchAPIResponse"* %15, i64 0, i32 5
  store i32 %18, i32* %19, align 8
  %20 = bitcast %"class.WTF::Vector.379"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %20) #11
  %21 = getelementptr inbounds %"class.blink::FetchResponseData", %"class.blink::FetchResponseData"* %1, i64 0, i32 14
  call fastcc void @_ZN5blink12_GLOBAL__N_117HeaderSetToVectorERKNSt3__13setINS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEENS_17CompareIgnoreCaseENS6_IS8_EEEE(%"class.WTF::Vector.379"* nonnull sret %4, %"class.std::__1::set"* dereferenceable(24) %21)
  %22 = getelementptr inbounds %"class.blink::mojom::blink::FetchAPIResponse", %"class.blink::mojom::blink::FetchAPIResponse"* %15, i64 0, i32 14
  %23 = bitcast %"class.WTF::Vector.379"* %4 to i64*
  %24 = load i64, i64* %23, align 8
  %25 = bitcast %"class.WTF::Vector.379"* %22 to i64*
  %26 = load i64, i64* %25, align 8
  store atomic i64 %26, i64* %23 monotonic, align 8
  store atomic i64 %24, i64* %25 monotonic, align 8
  %27 = getelementptr inbounds %"class.blink::mojom::blink::FetchAPIResponse", %"class.blink::mojom::blink::FetchAPIResponse"* %15, i64 0, i32 14, i32 0, i32 0, i32 1
  %28 = getelementptr inbounds %"class.WTF::Vector.379", %"class.WTF::Vector.379"* %4, i64 0, i32 0, i32 0, i32 1
  %29 = load i32, i32* %27, align 4
  %30 = load i32, i32* %28, align 8
  store i32 %30, i32* %27, align 4
  store i32 %29, i32* %28, align 8
  %31 = getelementptr inbounds %"class.blink::mojom::blink::FetchAPIResponse", %"class.blink::mojom::blink::FetchAPIResponse"* %15, i64 0, i32 14, i32 0, i32 0, i32 2
  %32 = getelementptr inbounds %"class.WTF::Vector.379", %"class.WTF::Vector.379"* %4, i64 0, i32 0, i32 0, i32 2
  %33 = load i32, i32* %31, align 4
  %34 = load i32, i32* %32, align 4
  store i32 %34, i32* %31, align 4
  store i32 %33, i32* %32, align 4
  %35 = getelementptr inbounds %"class.WTF::Vector.379", %"class.WTF::Vector.379"* %4, i64 0, i32 0, i32 0, i32 0
  %36 = inttoptr i64 %26 to %"class.WTF::String"*
  %37 = icmp eq i64 %26, 0
  br i1 %37, label %70, label %38, !prof !3

38:                                               ; preds = %11
  %39 = inttoptr i64 %26 to i8*
  %40 = icmp eq i32 %33, 0
  br i1 %40, label %68, label %41, !prof !2

41:                                               ; preds = %38
  %42 = zext i32 %33 to i64
  %43 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %36, i64 %42
  br label %44

44:                                               ; preds = %62, %41
  %45 = phi %"class.WTF::String"* [ %63, %62 ], [ %36, %41 ]
  %46 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %45, i64 0, i32 0, i32 0
  %47 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %46, align 8
  %48 = icmp eq %"class.WTF::StringImpl"* %47, null
  br i1 %48, label %62, label %49

49:                                               ; preds = %44
  %50 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %47, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %51 = load atomic i32, i32* %50 monotonic, align 4
  %52 = and i32 %51, 2
  %53 = icmp eq i32 %52, 0
  %54 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %47, i64 0, i32 0
  %55 = load i32, i32* %54, align 4
  br i1 %53, label %56, label %58

56:                                               ; preds = %49
  %57 = add i32 %55, -1
  store i32 %57, i32* %54, align 4
  br label %58

58:                                               ; preds = %56, %49
  %59 = phi i32 [ %57, %56 ], [ %55, %49 ]
  %60 = icmp eq i32 %59, 0
  br i1 %60, label %61, label %62

61:                                               ; preds = %58
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %47) #11
  br label %62

62:                                               ; preds = %61, %58, %44
  %63 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %45, i64 1
  %64 = icmp eq %"class.WTF::String"* %63, %43
  br i1 %64, label %65, label %44

65:                                               ; preds = %62
  store i32 0, i32* %32, align 4
  %66 = bitcast %"class.WTF::Vector.379"* %4 to i8**
  %67 = load i8*, i8** %66, align 8
  br label %68

68:                                               ; preds = %65, %38
  %69 = phi i8* [ %67, %65 ], [ %39, %38 ]
  call void @_ZN3WTF18PartitionAllocator11FreeBackingEPv(i8* %69) #11
  store %"class.WTF::String"* null, %"class.WTF::String"** %35, align 8
  br label %70

70:                                               ; preds = %11, %68
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %20) #11
  br label %493

71:                                               ; preds = %3
  %72 = tail call i8* @_Znwm(i64 384) #12, !noalias !5
  %73 = bitcast i8* %72 to %"class.blink::mojom::blink::FetchAPIResponse"*
  tail call void @_ZN5blink5mojom5blink16FetchAPIResponseC1Ev(%"class.blink::mojom::blink::FetchAPIResponse"* nonnull %73) #11, !noalias !5
  %74 = ptrtoint i8* %72 to i64
  %75 = getelementptr inbounds %"class.blink::FetchResponseData", %"class.blink::FetchResponseData"* %1, i64 0, i32 4
  %76 = bitcast i8* %72 to %"class.WTF::Vector"*
  %77 = tail call dereferenceable(16) %"class.WTF::Vector"* @_ZN3WTF6VectorIN5blink4KURLELj0ENS_18PartitionAllocatorEEaSERKS4_(%"class.WTF::Vector"* nonnull %76, %"class.WTF::Vector"* dereferenceable(16) %75)
  %78 = getelementptr inbounds %"class.blink::FetchResponseData", %"class.blink::FetchResponseData"* %1, i64 0, i32 5
  %79 = load i16, i16* %78, align 8
  %80 = getelementptr inbounds i8, i8* %72, i64 16
  %81 = bitcast i8* %80 to i16*
  store i16 %79, i16* %81, align 8
  %82 = getelementptr inbounds i8, i8* %72, i64 24
  %83 = getelementptr inbounds %"class.blink::FetchResponseData", %"class.blink::FetchResponseData"* %1, i64 0, i32 6, i32 0, i32 0, i32 0
  %84 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %83, align 8
  %85 = icmp eq %"class.WTF::StringImpl"* %84, null
  br i1 %85, label %103, label %86

86:                                               ; preds = %71
  %87 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %84, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %88 = load atomic i32, i32* %87 monotonic, align 4
  %89 = and i32 %88, 2
  %90 = icmp eq i32 %89, 0
  br i1 %90, label %91, label %103

91:                                               ; preds = %86
  %92 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %84, i64 0, i32 0
  %93 = load i32, i32* %92, align 4
  %94 = zext i32 %93 to i33
  %95 = tail call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %94, i33 1) #11
  %96 = extractvalue { i33, i1 } %95, 1
  %97 = extractvalue { i33, i1 } %95, 0
  %98 = icmp slt i33 %97, 0
  %99 = or i1 %96, %98
  br i1 %99, label %100, label %101, !prof !2

100:                                              ; preds = %91
  tail call void @llvm.trap() #11
  unreachable

101:                                              ; preds = %91
  %102 = trunc i33 %97 to i32
  store i32 %102, i32* %92, align 4
  br label %103

103:                                              ; preds = %101, %86, %71
  %104 = ptrtoint %"class.WTF::StringImpl"* %84 to i64
  %105 = bitcast i8* %82 to i64*
  %106 = bitcast i8* %82 to %"class.WTF::StringImpl"**
  %107 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %106, align 8
  store i64 %104, i64* %105, align 8
  %108 = icmp eq %"class.WTF::StringImpl"* %107, null
  br i1 %108, label %122, label %109

109:                                              ; preds = %103
  %110 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %107, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %111 = load atomic i32, i32* %110 monotonic, align 4
  %112 = and i32 %111, 2
  %113 = icmp eq i32 %112, 0
  %114 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %107, i64 0, i32 0
  %115 = load i32, i32* %114, align 4
  br i1 %113, label %116, label %118

116:                                              ; preds = %109
  %117 = add i32 %115, -1
  store i32 %117, i32* %114, align 4
  br label %118

118:                                              ; preds = %116, %109
  %119 = phi i32 [ %117, %116 ], [ %115, %109 ]
  %120 = icmp eq i32 %119, 0
  br i1 %120, label %121, label %122

121:                                              ; preds = %118
  tail call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %107) #11
  br label %122

122:                                              ; preds = %103, %118, %121
  %123 = getelementptr inbounds %"class.blink::FetchResponseData", %"class.blink::FetchResponseData"* %1, i64 0, i32 0
  %124 = load i32, i32* %123, align 8
  %125 = getelementptr inbounds i8, i8* %72, i64 32
  %126 = bitcast i8* %125 to i32*
  store i32 %124, i32* %126, align 8
  %127 = getelementptr inbounds %"class.blink::FetchResponseData", %"class.blink::FetchResponseData"* %1, i64 0, i32 1
  %128 = load i64, i64* %127, align 8
  %129 = getelementptr inbounds i8, i8* %72, i64 40
  %130 = bitcast i8* %129 to i64*
  store i64 %128, i64* %130, align 8
  %131 = getelementptr inbounds %"class.blink::FetchResponseData", %"class.blink::FetchResponseData"* %1, i64 0, i32 2
  %132 = load i32, i32* %131, align 8
  %133 = getelementptr inbounds i8, i8* %72, i64 48
  %134 = bitcast i8* %133 to i32*
  store i32 %132, i32* %134, align 8
  %135 = getelementptr inbounds i8, i8* %72, i64 80
  %136 = getelementptr inbounds %"class.blink::FetchResponseData", %"class.blink::FetchResponseData"* %1, i64 0, i32 10, i32 0, i32 0
  %137 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %136, align 8
  %138 = icmp eq %"class.WTF::StringImpl"* %137, null
  br i1 %138, label %156, label %139

139:                                              ; preds = %122
  %140 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %137, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %141 = load atomic i32, i32* %140 monotonic, align 4
  %142 = and i32 %141, 2
  %143 = icmp eq i32 %142, 0
  br i1 %143, label %144, label %156

144:                                              ; preds = %139
  %145 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %137, i64 0, i32 0
  %146 = load i32, i32* %145, align 4
  %147 = zext i32 %146 to i33
  %148 = tail call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %147, i33 1) #11
  %149 = extractvalue { i33, i1 } %148, 1
  %150 = extractvalue { i33, i1 } %148, 0
  %151 = icmp slt i33 %150, 0
  %152 = or i1 %149, %151
  br i1 %152, label %153, label %154, !prof !2

153:                                              ; preds = %144
  tail call void @llvm.trap() #11
  unreachable

154:                                              ; preds = %144
  %155 = trunc i33 %150 to i32
  store i32 %155, i32* %145, align 4
  br label %156

156:                                              ; preds = %154, %139, %122
  %157 = ptrtoint %"class.WTF::StringImpl"* %137 to i64
  %158 = bitcast i8* %135 to i64*
  %159 = bitcast i8* %135 to %"class.WTF::StringImpl"**
  %160 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %159, align 8
  store i64 %157, i64* %158, align 8
  %161 = icmp eq %"class.WTF::StringImpl"* %160, null
  br i1 %161, label %175, label %162

162:                                              ; preds = %156
  %163 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %160, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %164 = load atomic i32, i32* %163 monotonic, align 4
  %165 = and i32 %164, 2
  %166 = icmp eq i32 %165, 0
  %167 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %160, i64 0, i32 0
  %168 = load i32, i32* %167, align 4
  br i1 %166, label %169, label %171

169:                                              ; preds = %162
  %170 = add i32 %168, -1
  store i32 %170, i32* %167, align 4
  br label %171

171:                                              ; preds = %169, %162
  %172 = phi i32 [ %170, %169 ], [ %168, %162 ]
  %173 = icmp eq i32 %172, 0
  br i1 %173, label %174, label %175

174:                                              ; preds = %171
  tail call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %160) #11
  br label %175

175:                                              ; preds = %156, %171, %174
  %176 = getelementptr inbounds i8, i8* %72, i64 88
  %177 = getelementptr inbounds %"class.blink::FetchResponseData", %"class.blink::FetchResponseData"* %1, i64 0, i32 11, i32 0, i32 0, i32 0
  %178 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %177, align 8
  %179 = icmp eq %"class.WTF::StringImpl"* %178, null
  br i1 %179, label %197, label %180

180:                                              ; preds = %175
  %181 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %178, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %182 = load atomic i32, i32* %181 monotonic, align 4
  %183 = and i32 %182, 2
  %184 = icmp eq i32 %183, 0
  br i1 %184, label %185, label %197

185:                                              ; preds = %180
  %186 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %178, i64 0, i32 0
  %187 = load i32, i32* %186, align 4
  %188 = zext i32 %187 to i33
  %189 = tail call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %188, i33 1) #11
  %190 = extractvalue { i33, i1 } %189, 1
  %191 = extractvalue { i33, i1 } %189, 0
  %192 = icmp slt i33 %191, 0
  %193 = or i1 %190, %192
  br i1 %193, label %194, label %195, !prof !2

194:                                              ; preds = %185
  tail call void @llvm.trap() #11
  unreachable

195:                                              ; preds = %185
  %196 = trunc i33 %191 to i32
  store i32 %196, i32* %186, align 4
  br label %197

197:                                              ; preds = %195, %180, %175
  %198 = ptrtoint %"class.WTF::StringImpl"* %178 to i64
  %199 = bitcast i8* %176 to i64*
  %200 = bitcast i8* %176 to %"class.WTF::StringImpl"**
  %201 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %200, align 8
  store i64 %198, i64* %199, align 8
  %202 = icmp eq %"class.WTF::StringImpl"* %201, null
  br i1 %202, label %216, label %203

203:                                              ; preds = %197
  %204 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %201, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %205 = load atomic i32, i32* %204 monotonic, align 4
  %206 = and i32 %205, 2
  %207 = icmp eq i32 %206, 0
  %208 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %201, i64 0, i32 0
  %209 = load i32, i32* %208, align 4
  br i1 %207, label %210, label %212

210:                                              ; preds = %203
  %211 = add i32 %209, -1
  store i32 %211, i32* %208, align 4
  br label %212

212:                                              ; preds = %210, %203
  %213 = phi i32 [ %211, %210 ], [ %209, %203 ]
  %214 = icmp eq i32 %213, 0
  br i1 %214, label %215, label %216

215:                                              ; preds = %212
  tail call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %201) #11
  br label %216

216:                                              ; preds = %197, %212, %215
  %217 = getelementptr inbounds %"class.blink::FetchResponseData", %"class.blink::FetchResponseData"* %1, i64 0, i32 12, i32 0, i32 0
  %218 = getelementptr inbounds i8, i8* %72, i64 112
  %219 = bitcast i8* %218 to i64*
  %220 = load i64, i64* %217, align 8
  store i64 %220, i64* %219, align 8
  %221 = getelementptr inbounds i8, i8* %72, i64 120
  %222 = getelementptr inbounds %"class.blink::FetchResponseData", %"class.blink::FetchResponseData"* %1, i64 0, i32 13, i32 0, i32 0
  %223 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %222, align 8
  %224 = icmp eq %"class.WTF::StringImpl"* %223, null
  br i1 %224, label %242, label %225

225:                                              ; preds = %216
  %226 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %223, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %227 = load atomic i32, i32* %226 monotonic, align 4
  %228 = and i32 %227, 2
  %229 = icmp eq i32 %228, 0
  br i1 %229, label %230, label %242

230:                                              ; preds = %225
  %231 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %223, i64 0, i32 0
  %232 = load i32, i32* %231, align 4
  %233 = zext i32 %232 to i33
  %234 = tail call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %233, i33 1) #11
  %235 = extractvalue { i33, i1 } %234, 1
  %236 = extractvalue { i33, i1 } %234, 0
  %237 = icmp slt i33 %236, 0
  %238 = or i1 %235, %237
  br i1 %238, label %239, label %240, !prof !2

239:                                              ; preds = %230
  tail call void @llvm.trap() #11
  unreachable

240:                                              ; preds = %230
  %241 = trunc i33 %236 to i32
  store i32 %241, i32* %231, align 4
  br label %242

242:                                              ; preds = %240, %225, %216
  %243 = ptrtoint %"class.WTF::StringImpl"* %223 to i64
  %244 = bitcast i8* %221 to i64*
  %245 = bitcast i8* %221 to %"class.WTF::StringImpl"**
  %246 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %245, align 8
  store i64 %243, i64* %244, align 8
  %247 = icmp eq %"class.WTF::StringImpl"* %246, null
  br i1 %247, label %261, label %248

248:                                              ; preds = %242
  %249 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %246, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %250 = load atomic i32, i32* %249 monotonic, align 4
  %251 = and i32 %250, 2
  %252 = icmp eq i32 %251, 0
  %253 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %246, i64 0, i32 0
  %254 = load i32, i32* %253, align 4
  br i1 %252, label %255, label %257

255:                                              ; preds = %248
  %256 = add i32 %254, -1
  store i32 %256, i32* %253, align 4
  br label %257

257:                                              ; preds = %255, %248
  %258 = phi i32 [ %256, %255 ], [ %254, %248 ]
  %259 = icmp eq i32 %258, 0
  br i1 %259, label %260, label %261

260:                                              ; preds = %257
  tail call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %246) #11
  br label %261

261:                                              ; preds = %242, %257, %260
  %262 = bitcast %"class.WTF::Vector.379"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %262) #11
  %263 = getelementptr inbounds %"class.blink::FetchResponseData", %"class.blink::FetchResponseData"* %1, i64 0, i32 14
  call fastcc void @_ZN5blink12_GLOBAL__N_117HeaderSetToVectorERKNSt3__13setINS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEENS_17CompareIgnoreCaseENS6_IS8_EEEE(%"class.WTF::Vector.379"* nonnull sret %5, %"class.std::__1::set"* dereferenceable(24) %263)
  %264 = getelementptr inbounds i8, i8* %72, i64 128
  %265 = bitcast %"class.WTF::Vector.379"* %5 to i64*
  %266 = load i64, i64* %265, align 8
  %267 = bitcast i8* %264 to i64*
  %268 = load i64, i64* %267, align 8
  store atomic i64 %268, i64* %265 monotonic, align 8
  store atomic i64 %266, i64* %267 monotonic, align 8
  %269 = getelementptr inbounds i8, i8* %72, i64 136
  %270 = bitcast i8* %269 to i32*
  %271 = getelementptr inbounds %"class.WTF::Vector.379", %"class.WTF::Vector.379"* %5, i64 0, i32 0, i32 0, i32 1
  %272 = load i32, i32* %270, align 4
  %273 = load i32, i32* %271, align 8
  store i32 %273, i32* %270, align 4
  store i32 %272, i32* %271, align 8
  %274 = getelementptr inbounds i8, i8* %72, i64 140
  %275 = bitcast i8* %274 to i32*
  %276 = getelementptr inbounds %"class.WTF::Vector.379", %"class.WTF::Vector.379"* %5, i64 0, i32 0, i32 0, i32 2
  %277 = load i32, i32* %275, align 4
  %278 = load i32, i32* %276, align 4
  store i32 %278, i32* %275, align 4
  store i32 %277, i32* %276, align 4
  %279 = getelementptr inbounds %"class.WTF::Vector.379", %"class.WTF::Vector.379"* %5, i64 0, i32 0, i32 0, i32 0
  %280 = inttoptr i64 %268 to %"class.WTF::String"*
  %281 = icmp eq i64 %268, 0
  br i1 %281, label %314, label %282, !prof !3

282:                                              ; preds = %261
  %283 = inttoptr i64 %268 to i8*
  %284 = icmp eq i32 %277, 0
  br i1 %284, label %312, label %285, !prof !2

285:                                              ; preds = %282
  %286 = zext i32 %277 to i64
  %287 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %280, i64 %286
  br label %288

288:                                              ; preds = %306, %285
  %289 = phi %"class.WTF::String"* [ %307, %306 ], [ %280, %285 ]
  %290 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %289, i64 0, i32 0, i32 0
  %291 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %290, align 8
  %292 = icmp eq %"class.WTF::StringImpl"* %291, null
  br i1 %292, label %306, label %293

293:                                              ; preds = %288
  %294 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %291, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %295 = load atomic i32, i32* %294 monotonic, align 4
  %296 = and i32 %295, 2
  %297 = icmp eq i32 %296, 0
  %298 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %291, i64 0, i32 0
  %299 = load i32, i32* %298, align 4
  br i1 %297, label %300, label %302

300:                                              ; preds = %293
  %301 = add i32 %299, -1
  store i32 %301, i32* %298, align 4
  br label %302

302:                                              ; preds = %300, %293
  %303 = phi i32 [ %301, %300 ], [ %299, %293 ]
  %304 = icmp eq i32 %303, 0
  br i1 %304, label %305, label %306

305:                                              ; preds = %302
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %291) #11
  br label %306

306:                                              ; preds = %305, %302, %288
  %307 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %289, i64 1
  %308 = icmp eq %"class.WTF::String"* %307, %287
  br i1 %308, label %309, label %288

309:                                              ; preds = %306
  store i32 0, i32* %276, align 4
  %310 = bitcast %"class.WTF::Vector.379"* %5 to i8**
  %311 = load i8*, i8** %310, align 8
  br label %312

312:                                              ; preds = %309, %282
  %313 = phi i8* [ %311, %309 ], [ %283, %282 ]
  call void @_ZN3WTF18PartitionAllocator11FreeBackingEPv(i8* %313) #11
  store %"class.WTF::String"* null, %"class.WTF::String"** %279, align 8
  br label %314

314:                                              ; preds = %261, %312
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %262) #11
  %315 = getelementptr inbounds %"class.blink::FetchResponseData", %"class.blink::FetchResponseData"* %1, i64 0, i32 15
  %316 = load i32, i32* %315, align 8
  %317 = getelementptr inbounds i8, i8* %72, i64 168
  %318 = bitcast i8* %317 to i32*
  store i32 %316, i32* %318, align 8
  %319 = getelementptr inbounds i8, i8* %72, i64 176
  %320 = getelementptr inbounds %"class.blink::FetchResponseData", %"class.blink::FetchResponseData"* %1, i64 0, i32 16, i32 0, i32 0, i32 0
  %321 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %320, align 8
  %322 = icmp eq %"class.WTF::StringImpl"* %321, null
  br i1 %322, label %340, label %323

323:                                              ; preds = %314
  %324 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %321, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %325 = load atomic i32, i32* %324 monotonic, align 4
  %326 = and i32 %325, 2
  %327 = icmp eq i32 %326, 0
  br i1 %327, label %328, label %340

328:                                              ; preds = %323
  %329 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %321, i64 0, i32 0
  %330 = load i32, i32* %329, align 4
  %331 = zext i32 %330 to i33
  %332 = call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %331, i33 1) #11
  %333 = extractvalue { i33, i1 } %332, 1
  %334 = extractvalue { i33, i1 } %332, 0
  %335 = icmp slt i33 %334, 0
  %336 = or i1 %333, %335
  br i1 %336, label %337, label %338, !prof !2

337:                                              ; preds = %328
  call void @llvm.trap() #11
  unreachable

338:                                              ; preds = %328
  %339 = trunc i33 %334 to i32
  store i32 %339, i32* %329, align 4
  br label %340

340:                                              ; preds = %338, %323, %314
  %341 = ptrtoint %"class.WTF::StringImpl"* %321 to i64
  %342 = bitcast i8* %319 to i64*
  %343 = bitcast i8* %319 to %"class.WTF::StringImpl"**
  %344 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %343, align 8
  store i64 %341, i64* %342, align 8
  %345 = icmp eq %"class.WTF::StringImpl"* %344, null
  br i1 %345, label %359, label %346

346:                                              ; preds = %340
  %347 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %344, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %348 = load atomic i32, i32* %347 monotonic, align 4
  %349 = and i32 %348, 2
  %350 = icmp eq i32 %349, 0
  %351 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %344, i64 0, i32 0
  %352 = load i32, i32* %351, align 4
  br i1 %350, label %353, label %355

353:                                              ; preds = %346
  %354 = add i32 %352, -1
  store i32 %354, i32* %351, align 4
  br label %355

355:                                              ; preds = %353, %346
  %356 = phi i32 [ %354, %353 ], [ %352, %346 ]
  %357 = icmp eq i32 %356, 0
  br i1 %357, label %358, label %359

358:                                              ; preds = %355
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %344) #11
  br label %359

359:                                              ; preds = %340, %355, %358
  %360 = getelementptr inbounds %"class.blink::FetchResponseData", %"class.blink::FetchResponseData"* %1, i64 0, i32 17
  %361 = load i8, i8* %360, align 8, !range !4
  %362 = getelementptr inbounds i8, i8* %72, i64 184
  store i8 %361, i8* %362, align 8
  %363 = getelementptr inbounds %"class.blink::FetchResponseData", %"class.blink::FetchResponseData"* %1, i64 0, i32 18
  %364 = load i8, i8* %363, align 1, !range !4
  %365 = getelementptr inbounds i8, i8* %72, i64 185
  store i8 %364, i8* %365, align 1
  %366 = getelementptr inbounds %"class.blink::FetchResponseData", %"class.blink::FetchResponseData"* %1, i64 0, i32 7, i32 0, i32 0
  %367 = load %"class.blink::FetchHeaderList"*, %"class.blink::FetchHeaderList"** %366, align 8
  %368 = getelementptr inbounds %"class.blink::FetchHeaderList", %"class.blink::FetchHeaderList"* %367, i64 0, i32 0, i32 0, i32 0
  %369 = load %"class.std::__1::__tree_end_node"*, %"class.std::__1::__tree_end_node"** %368, align 8
  %370 = getelementptr inbounds %"class.blink::FetchHeaderList", %"class.blink::FetchHeaderList"* %367, i64 0, i32 0, i32 0, i32 1, i32 0, i32 0
  %371 = icmp eq %"class.std::__1::__tree_end_node"* %369, %370
  br i1 %371, label %377, label %372

372:                                              ; preds = %359
  %373 = getelementptr inbounds i8, i8* %72, i64 56
  %374 = bitcast i8* %373 to %"class.WTF::HashTable.375"*
  br label %445

375:                                              ; preds = %479
  %376 = load %"class.blink::FetchHeaderList"*, %"class.blink::FetchHeaderList"** %366, align 8
  br label %377

377:                                              ; preds = %375, %359
  %378 = phi %"class.blink::FetchHeaderList"* [ %376, %375 ], [ %367, %359 ]
  %379 = bitcast %"class.mojo::StructPtr.384"* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %379) #11
  %380 = bitcast %"class.WTF::String"* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %380) #11
  %381 = load i16, i16* %78, align 8
  %382 = zext i16 %381 to i32
  %383 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %83, align 8
  %384 = icmp eq %"class.WTF::StringImpl"* %383, null
  br i1 %384, label %402, label %385

385:                                              ; preds = %377
  %386 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %383, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %387 = load atomic i32, i32* %386 monotonic, align 4
  %388 = and i32 %387, 2
  %389 = icmp eq i32 %388, 0
  br i1 %389, label %390, label %402

390:                                              ; preds = %385
  %391 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %383, i64 0, i32 0
  %392 = load i32, i32* %391, align 4
  %393 = zext i32 %392 to i33
  %394 = call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %393, i33 1) #11
  %395 = extractvalue { i33, i1 } %394, 1
  %396 = extractvalue { i33, i1 } %394, 0
  %397 = icmp slt i33 %396, 0
  %398 = or i1 %395, %397
  br i1 %398, label %399, label %400, !prof !2

399:                                              ; preds = %390
  call void @llvm.trap() #11
  unreachable

400:                                              ; preds = %390
  %401 = trunc i33 %396 to i32
  store i32 %401, i32* %391, align 4
  br label %402

402:                                              ; preds = %377, %385, %400
  %403 = call %"class.WTF::StringImpl"* @_ZNK5blink15FetchHeaderList14GetAsRawStringEiN3WTF6StringE(%"class.blink::FetchHeaderList"* %378, i32 %382, %"class.WTF::StringImpl"* %383) #11
  %404 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %7, i64 0, i32 0, i32 0
  store %"class.WTF::StringImpl"* %403, %"class.WTF::StringImpl"** %404, align 8
  call void @_ZN5blink12ParseHeadersERKN3WTF6StringERKNS_4KURLE(%"class.mojo::StructPtr.384"* nonnull sret %6, %"class.WTF::String"* nonnull dereferenceable(8) %7, %"class.blink::KURL"* dereferenceable(112) %2) #11
  %405 = getelementptr inbounds i8, i8* %72, i64 160
  %406 = bitcast i8* %405 to %"class.network::mojom::blink::ParsedHeaders"**
  %407 = load %"class.network::mojom::blink::ParsedHeaders"*, %"class.network::mojom::blink::ParsedHeaders"** %406, align 8
  store %"class.network::mojom::blink::ParsedHeaders"* null, %"class.network::mojom::blink::ParsedHeaders"** %406, align 8
  %408 = icmp eq %"class.network::mojom::blink::ParsedHeaders"* %407, null
  br i1 %408, label %409, label %414

409:                                              ; preds = %402
  %410 = bitcast i8* %405 to i64*
  %411 = bitcast %"class.mojo::StructPtr.384"* %6 to i64*
  %412 = load i64, i64* %411, align 8
  store i64 %412, i64* %410, align 8
  %413 = getelementptr inbounds %"class.mojo::StructPtr.384", %"class.mojo::StructPtr.384"* %6, i64 0, i32 0, i32 0, i32 0, i32 0
  store %"class.network::mojom::blink::ParsedHeaders"* null, %"class.network::mojom::blink::ParsedHeaders"** %413, align 8
  br label %425

414:                                              ; preds = %402
  call void @_ZN7network5mojom5blink13ParsedHeadersD1Ev(%"class.network::mojom::blink::ParsedHeaders"* nonnull %407) #11
  %415 = bitcast %"class.network::mojom::blink::ParsedHeaders"* %407 to i8*
  call void @_ZdlPv(i8* %415) #12
  %416 = bitcast i8* %405 to i64*
  %417 = load i64, i64* %416, align 8
  %418 = bitcast %"class.mojo::StructPtr.384"* %6 to i64*
  %419 = load i64, i64* %418, align 8
  store i64 %419, i64* %416, align 8
  %420 = getelementptr inbounds %"class.mojo::StructPtr.384", %"class.mojo::StructPtr.384"* %6, i64 0, i32 0, i32 0, i32 0, i32 0
  store %"class.network::mojom::blink::ParsedHeaders"* null, %"class.network::mojom::blink::ParsedHeaders"** %420, align 8
  %421 = icmp eq i64 %417, 0
  br i1 %421, label %425, label %422

422:                                              ; preds = %414
  %423 = inttoptr i64 %417 to %"class.network::mojom::blink::ParsedHeaders"*
  call void @_ZN7network5mojom5blink13ParsedHeadersD1Ev(%"class.network::mojom::blink::ParsedHeaders"* nonnull %423) #11
  %424 = inttoptr i64 %417 to i8*
  call void @_ZdlPv(i8* %424) #12
  br label %425

425:                                              ; preds = %409, %414, %422
  %426 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %404, align 8
  %427 = icmp eq %"class.WTF::StringImpl"* %426, null
  br i1 %427, label %441, label %428

428:                                              ; preds = %425
  %429 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %426, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %430 = load atomic i32, i32* %429 monotonic, align 4
  %431 = and i32 %430, 2
  %432 = icmp eq i32 %431, 0
  %433 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %426, i64 0, i32 0
  %434 = load i32, i32* %433, align 4
  br i1 %432, label %435, label %437

435:                                              ; preds = %428
  %436 = add i32 %434, -1
  store i32 %436, i32* %433, align 4
  br label %437

437:                                              ; preds = %435, %428
  %438 = phi i32 [ %436, %435 ], [ %434, %428 ]
  %439 = icmp eq i32 %438, 0
  br i1 %439, label %440, label %441

440:                                              ; preds = %437
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %426) #11
  br label %441

441:                                              ; preds = %425, %437, %440
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %380) #11
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %379) #11
  %442 = getelementptr inbounds %"class.blink::FetchResponseData", %"class.blink::FetchResponseData"* %1, i64 0, i32 19, i32 0, i32 0, i32 0
  %443 = load %"class.net::AuthChallengeInfo"*, %"class.net::AuthChallengeInfo"** %442, align 8
  %444 = icmp eq %"class.net::AuthChallengeInfo"* %443, null
  br i1 %444, label %491, label %482

445:                                              ; preds = %372, %479
  %446 = phi %"class.std::__1::__tree_end_node"* [ %369, %372 ], [ %480, %479 ]
  %447 = getelementptr inbounds %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_end_node"* %446, i64 4
  %448 = bitcast %"class.std::__1::__tree_end_node"* %447 to %"class.WTF::String"*
  %449 = getelementptr inbounds %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_end_node"* %446, i64 5
  %450 = bitcast %"class.std::__1::__tree_end_node"* %449 to %"class.WTF::String"*
  %451 = call { %"struct.WTF::KeyValuePair.378"*, i8 } @_ZN3WTF9HashTableINS_6StringENS_12KeyValuePairIS1_S1_EENS_24KeyValuePairKeyExtractorENS_10StringHashENS_18HashMapValueTraitsINS_10HashTraitsIS1_EES8_EES8_NS_18PartitionAllocatorEE6insertINS_17HashMapTranslatorIS9_S5_SA_EERKS1_SG_EENS_18HashTableAddResultISB_S3_EEOT0_OT1_(%"class.WTF::HashTable.375"* %374, %"class.WTF::String"* dereferenceable(8) %448, %"class.WTF::String"* dereferenceable(8) %450) #11
  %452 = getelementptr inbounds %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_end_node"* %446, i64 1, i32 0
  %453 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %452, align 8
  %454 = icmp eq %"class.std::__1::__tree_node_base"* %453, null
  br i1 %454, label %455, label %463

455:                                              ; preds = %445
  %456 = bitcast %"class.std::__1::__tree_end_node"* %446 to %"class.std::__1::__tree_node_base"*
  %457 = getelementptr inbounds %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_end_node"* %446, i64 2
  %458 = bitcast %"class.std::__1::__tree_end_node"* %457 to %"class.std::__1::__tree_end_node"**
  %459 = load %"class.std::__1::__tree_end_node"*, %"class.std::__1::__tree_end_node"** %458, align 8
  %460 = getelementptr inbounds %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_end_node"* %459, i64 0, i32 0
  %461 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %460, align 8
  %462 = icmp eq %"class.std::__1::__tree_node_base"* %461, %456
  br i1 %462, label %479, label %470

463:                                              ; preds = %445, %463
  %464 = phi %"class.std::__1::__tree_node_base"* [ %466, %463 ], [ %453, %445 ]
  %465 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %464, i64 0, i32 0, i32 0
  %466 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %465, align 8
  %467 = icmp eq %"class.std::__1::__tree_node_base"* %466, null
  br i1 %467, label %468, label %463

468:                                              ; preds = %463
  %469 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %464, i64 0, i32 0
  br label %479

470:                                              ; preds = %455, %470
  %471 = phi %"class.std::__1::__tree_end_node"** [ %474, %470 ], [ %458, %455 ]
  %472 = bitcast %"class.std::__1::__tree_end_node"** %471 to %"class.std::__1::__tree_node_base"**
  %473 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %472, align 8
  %474 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %473, i64 0, i32 2
  %475 = load %"class.std::__1::__tree_end_node"*, %"class.std::__1::__tree_end_node"** %474, align 8
  %476 = getelementptr inbounds %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_end_node"* %475, i64 0, i32 0
  %477 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %476, align 8
  %478 = icmp eq %"class.std::__1::__tree_node_base"* %477, %473
  br i1 %478, label %479, label %470

479:                                              ; preds = %470, %455, %468
  %480 = phi %"class.std::__1::__tree_end_node"* [ %469, %468 ], [ %459, %455 ], [ %475, %470 ]
  %481 = icmp eq %"class.std::__1::__tree_end_node"* %480, %370
  br i1 %481, label %375, label %445

482:                                              ; preds = %441
  %483 = getelementptr inbounds i8, i8* %72, i64 192
  %484 = load i8, i8* %483, align 8, !range !4
  %485 = icmp eq i8 %484, 0
  %486 = getelementptr inbounds i8, i8* %72, i64 200
  %487 = bitcast i8* %486 to %"class.net::AuthChallengeInfo"*
  br i1 %485, label %490, label %488

488:                                              ; preds = %482
  %489 = call dereferenceable(184) %"class.net::AuthChallengeInfo"* @_ZN3net17AuthChallengeInfoaSERKS0_(%"class.net::AuthChallengeInfo"* %487, %"class.net::AuthChallengeInfo"* nonnull dereferenceable(184) %443) #11
  br label %491

490:                                              ; preds = %482
  call void @_ZN3net17AuthChallengeInfoC1ERKS0_(%"class.net::AuthChallengeInfo"* %487, %"class.net::AuthChallengeInfo"* nonnull dereferenceable(184) %443) #11
  store i8 1, i8* %483, align 8
  br label %491

491:                                              ; preds = %441, %488, %490
  %492 = bitcast %"class.mojo::StructPtr"* %0 to i64*
  store i64 %74, i64* %492, align 8
  br label %493

493:                                              ; preds = %70, %491
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal fastcc void @_ZN5blink12_GLOBAL__N_117HeaderSetToVectorERKNSt3__13setINS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEENS_17CompareIgnoreCaseENS6_IS8_EEEE(%"class.WTF::Vector.379"* noalias sret, %"class.std::__1::set"* dereferenceable(24)) unnamed_addr #0 {
  %3 = alloca %"class.WTF::String", align 8
  %4 = getelementptr inbounds %"class.WTF::Vector.379", %"class.WTF::Vector.379"* %0, i64 0, i32 0, i32 0, i32 0
  %5 = getelementptr inbounds %"class.WTF::Vector.379", %"class.WTF::Vector.379"* %0, i64 0, i32 0, i32 0, i32 1
  %6 = getelementptr inbounds %"class.WTF::Vector.379", %"class.WTF::Vector.379"* %0, i64 0, i32 0, i32 0, i32 2
  %7 = bitcast %"class.WTF::Vector.379"* %0 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %7, i8 0, i64 16, i1 false) #11
  %8 = getelementptr inbounds %"class.std::__1::set", %"class.std::__1::set"* %1, i64 0, i32 0, i32 2, i32 0, i32 0
  %9 = load i64, i64* %8, align 8
  %10 = icmp ult i64 %9, 4294967296
  br i1 %10, label %12, label %11, !prof !3

11:                                               ; preds = %2
  tail call void @llvm.trap() #11
  unreachable

12:                                               ; preds = %2
  %13 = trunc i64 %9 to i32
  %14 = icmp eq i32 %13, 0
  br i1 %14, label %23, label %15

15:                                               ; preds = %12
  %16 = and i64 %9, 4294967295
  %17 = tail call i64 @_ZN3WTF18PartitionAllocator13QuantizedSizeINS_6StringEEEmm(i64 %16) #11
  %18 = tail call i8* @_ZN3WTF18PartitionAllocator15AllocateBackingEmPKc(i64 %17, i8* getelementptr inbounds ([59 x i8], [59 x i8]* @__PRETTY_FUNCTION__._ZN3WTF21GetStringWithTypeNameINS_6StringEEEPKcv, i64 0, i64 0)) #11
  %19 = ptrtoint i8* %18 to i64
  %20 = bitcast %"class.WTF::Vector.379"* %0 to i64*
  store atomic i64 %19, i64* %20 monotonic, align 8
  %21 = lshr i64 %17, 3
  %22 = trunc i64 %21 to i32
  store i32 %22, i32* %5, align 8
  br label %23

23:                                               ; preds = %12, %15
  %24 = getelementptr inbounds %"class.std::__1::set", %"class.std::__1::set"* %1, i64 0, i32 0, i32 0
  %25 = load %"class.std::__1::__tree_end_node"*, %"class.std::__1::__tree_end_node"** %24, align 8
  %26 = getelementptr inbounds %"class.std::__1::set", %"class.std::__1::set"* %1, i64 0, i32 0, i32 1, i32 0, i32 0
  %27 = icmp eq %"class.std::__1::__tree_end_node"* %25, %26
  br i1 %27, label %32, label %28

28:                                               ; preds = %23
  %29 = bitcast %"class.WTF::String"* %3 to i8*
  %30 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %3, i64 0, i32 0, i32 0
  %31 = bitcast %"class.WTF::String"* %3 to i64*
  br label %33

32:                                               ; preds = %107, %23
  ret void

33:                                               ; preds = %28, %107
  %34 = phi %"class.std::__1::__tree_end_node"* [ %25, %28 ], [ %108, %107 ]
  %35 = getelementptr inbounds %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_end_node"* %34, i64 4
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %29) #11
  %36 = bitcast %"class.std::__1::__tree_end_node"* %35 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %37 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %36, i64 0, i32 1, i32 0
  %38 = load i8, i8* %37, align 1
  %39 = icmp slt i8 %38, 0
  br i1 %39, label %40, label %46

40:                                               ; preds = %33
  %41 = bitcast %"class.std::__1::__tree_end_node"* %35 to i8**
  %42 = load i8*, i8** %41, align 8
  %43 = getelementptr inbounds %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_end_node"* %34, i64 5
  %44 = bitcast %"class.std::__1::__tree_end_node"* %43 to i64*
  %45 = load i64, i64* %44, align 8
  br label %49

46:                                               ; preds = %33
  %47 = bitcast %"class.std::__1::__tree_end_node"* %35 to i8*
  %48 = zext i8 %38 to i64
  br label %49

49:                                               ; preds = %40, %46
  %50 = phi i8* [ %42, %40 ], [ %47, %46 ]
  %51 = phi i64 [ %45, %40 ], [ %48, %46 ]
  call void @_ZN3WTF6StringC1EPKcm(%"class.WTF::String"* nonnull %3, i8* %50, i64 %51) #11
  %52 = load i32, i32* %6, align 4
  %53 = load i32, i32* %5, align 8
  %54 = icmp eq i32 %52, %53
  br i1 %54, label %63, label %55, !prof !2

55:                                               ; preds = %49
  %56 = load %"class.WTF::String"*, %"class.WTF::String"** %4, align 8
  %57 = zext i32 %52 to i64
  %58 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %56, i64 %57
  %59 = load i64, i64* %31, align 8
  %60 = bitcast %"class.WTF::String"* %58 to i64*
  store i64 %59, i64* %60, align 8
  store %"class.WTF::StringImpl"* null, %"class.WTF::StringImpl"** %30, align 8
  %61 = load i32, i32* %6, align 4
  %62 = add i32 %61, 1
  store i32 %62, i32* %6, align 4
  br label %79

63:                                               ; preds = %49
  call void @_ZN3WTF6VectorINS_6StringELj0ENS_18PartitionAllocatorEE14AppendSlowCaseIS1_EEvOT_(%"class.WTF::Vector.379"* %0, %"class.WTF::String"* nonnull dereferenceable(8) %3) #11
  %64 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %30, align 8
  %65 = icmp eq %"class.WTF::StringImpl"* %64, null
  br i1 %65, label %79, label %66

66:                                               ; preds = %63
  %67 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %64, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %68 = load atomic i32, i32* %67 monotonic, align 4
  %69 = and i32 %68, 2
  %70 = icmp eq i32 %69, 0
  %71 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %64, i64 0, i32 0
  %72 = load i32, i32* %71, align 4
  br i1 %70, label %73, label %75

73:                                               ; preds = %66
  %74 = add i32 %72, -1
  store i32 %74, i32* %71, align 4
  br label %75

75:                                               ; preds = %73, %66
  %76 = phi i32 [ %74, %73 ], [ %72, %66 ]
  %77 = icmp eq i32 %76, 0
  br i1 %77, label %78, label %79

78:                                               ; preds = %75
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %64) #11
  br label %79

79:                                               ; preds = %55, %63, %75, %78
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %29) #11
  %80 = getelementptr inbounds %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_end_node"* %34, i64 1, i32 0
  %81 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %80, align 8
  %82 = icmp eq %"class.std::__1::__tree_node_base"* %81, null
  br i1 %82, label %83, label %91

83:                                               ; preds = %79
  %84 = bitcast %"class.std::__1::__tree_end_node"* %34 to %"class.std::__1::__tree_node_base"*
  %85 = getelementptr inbounds %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_end_node"* %34, i64 2
  %86 = bitcast %"class.std::__1::__tree_end_node"* %85 to %"class.std::__1::__tree_end_node"**
  %87 = load %"class.std::__1::__tree_end_node"*, %"class.std::__1::__tree_end_node"** %86, align 8
  %88 = getelementptr inbounds %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_end_node"* %87, i64 0, i32 0
  %89 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %88, align 8
  %90 = icmp eq %"class.std::__1::__tree_node_base"* %89, %84
  br i1 %90, label %107, label %98

91:                                               ; preds = %79, %91
  %92 = phi %"class.std::__1::__tree_node_base"* [ %94, %91 ], [ %81, %79 ]
  %93 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %92, i64 0, i32 0, i32 0
  %94 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %93, align 8
  %95 = icmp eq %"class.std::__1::__tree_node_base"* %94, null
  br i1 %95, label %96, label %91

96:                                               ; preds = %91
  %97 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %92, i64 0, i32 0
  br label %107

98:                                               ; preds = %83, %98
  %99 = phi %"class.std::__1::__tree_end_node"** [ %102, %98 ], [ %86, %83 ]
  %100 = bitcast %"class.std::__1::__tree_end_node"** %99 to %"class.std::__1::__tree_node_base"**
  %101 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %100, align 8
  %102 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %101, i64 0, i32 2
  %103 = load %"class.std::__1::__tree_end_node"*, %"class.std::__1::__tree_end_node"** %102, align 8
  %104 = getelementptr inbounds %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_end_node"* %103, i64 0, i32 0
  %105 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %104, align 8
  %106 = icmp eq %"class.std::__1::__tree_node_base"* %105, %101
  br i1 %106, label %107, label %98

107:                                              ; preds = %98, %83, %96
  %108 = phi %"class.std::__1::__tree_end_node"* [ %97, %96 ], [ %87, %83 ], [ %103, %98 ]
  %109 = icmp eq %"class.std::__1::__tree_end_node"* %108, %26
  br i1 %109, label %32, label %33
}

declare void @_ZN5blink12ParseHeadersERKN3WTF6StringERKNS_4KURLE(%"class.mojo::StructPtr.384"* sret, %"class.WTF::String"* dereferenceable(8), %"class.blink::KURL"* dereferenceable(112)) local_unnamed_addr #2

declare %"class.WTF::StringImpl"* @_ZNK5blink15FetchHeaderList14GetAsRawStringEiN3WTF6StringE(%"class.blink::FetchHeaderList"*, i32, %"class.WTF::StringImpl"*) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5blink17FetchResponseData24InitFromResourceResponseEPNS_16ExecutionContextEN7network5mojom17FetchResponseTypeERKN3WTF6VectorINS_4KURLELj0ENS6_18PartitionAllocatorEEERKNS6_12AtomicStringENS4_15CredentialsModeERKNS_16ResourceResponseE(%"class.blink::FetchResponseData"*, %"class.blink::ExecutionContext"*, i32, %"class.WTF::Vector"* dereferenceable(16), %"class.WTF::AtomicString"* dereferenceable(8), i32, %"class.blink::ResourceResponse"* dereferenceable(1072)) local_unnamed_addr #0 align 2 {
  %8 = alloca %"class.WTF::StringView", align 8
  %9 = alloca %"class.WTF::StringView", align 8
  %10 = alloca %"class.WTF::StringView", align 8
  %11 = alloca %"class.WTF::AtomicString", align 8
  %12 = alloca %"class.url::Origin", align 8
  %13 = alloca %"class.std::__1::basic_string", align 8
  %14 = alloca %"class.base::Time", align 8
  %15 = alloca %"class.std::__1::basic_string", align 8
  %16 = tail call i32 @_ZNK5blink16ResourceResponse14HttpStatusCodeEv(%"class.blink::ResourceResponse"* %6) #11
  %17 = trunc i32 %16 to i16
  %18 = getelementptr inbounds %"class.blink::FetchResponseData", %"class.blink::FetchResponseData"* %0, i64 0, i32 5
  store i16 %17, i16* %18, align 8
  %19 = tail call dereferenceable(112) %"class.blink::KURL"* @_ZNK5blink16ResourceResponse17CurrentRequestUrlEv(%"class.blink::ResourceResponse"* %6) #11
  %20 = bitcast %"class.WTF::StringView"* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %20)
  %21 = load i64, i64* bitcast (%"class.WTF::StringImpl"** @_ZN3WTF10StringImpl6empty_E to i64*), align 8
  %22 = bitcast %"class.WTF::StringView"* %9 to i64*
  store i64 %21, i64* %22, align 8
  %23 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %9, i64 0, i32 1
  store i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.7, i64 0, i64 0), i8** %23, align 8
  %24 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %9, i64 0, i32 2
  store i32 5, i32* %24, align 8
  %25 = tail call zeroext i1 @_ZNK5blink4KURL10ProtocolIsEN3WTF10StringViewE(%"class.blink::KURL"* %19, %"class.WTF::StringView"* nonnull byval(%"class.WTF::StringView") align 8 %9) #11
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %20)
  br i1 %25, label %41, label %26

26:                                               ; preds = %7
  %27 = tail call dereferenceable(112) %"class.blink::KURL"* @_ZNK5blink16ResourceResponse17CurrentRequestUrlEv(%"class.blink::ResourceResponse"* %6) #11
  %28 = bitcast %"class.WTF::StringView"* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %28)
  %29 = load i64, i64* bitcast (%"class.WTF::StringImpl"** @_ZN3WTF10StringImpl6empty_E to i64*), align 8
  %30 = bitcast %"class.WTF::StringView"* %8 to i64*
  store i64 %29, i64* %30, align 8
  %31 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %8, i64 0, i32 1
  store i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.8, i64 0, i64 0), i8** %31, align 8
  %32 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %8, i64 0, i32 2
  store i32 4, i32* %32, align 8
  %33 = tail call zeroext i1 @_ZNK5blink4KURL10ProtocolIsEN3WTF10StringViewE(%"class.blink::KURL"* %27, %"class.WTF::StringView"* nonnull byval(%"class.WTF::StringView") align 8 %8) #11
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %28)
  br i1 %33, label %41, label %34

34:                                               ; preds = %26
  %35 = tail call dereferenceable(112) %"class.blink::KURL"* @_ZNK5blink16ResourceResponse17CurrentRequestUrlEv(%"class.blink::ResourceResponse"* %6) #11
  %36 = load i64, i64* bitcast (%"class.WTF::StringImpl"** @_ZN3WTF10StringImpl6empty_E to i64*), align 8
  %37 = bitcast %"class.WTF::StringView"* %10 to i64*
  store i64 %36, i64* %37, align 8
  %38 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %10, i64 0, i32 1
  store i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i64 0, i64 0), i8** %38, align 8
  %39 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %10, i64 0, i32 2
  store i32 4, i32* %39, align 8
  %40 = tail call zeroext i1 @_ZNK5blink4KURL10ProtocolIsEN3WTF10StringViewE(%"class.blink::KURL"* %35, %"class.WTF::StringView"* nonnull byval(%"class.WTF::StringView") align 8 %10) #11
  br i1 %40, label %41, label %44

41:                                               ; preds = %7, %26, %34
  call void @_ZN3WTF12AtomicStringC2EPKhm(%"class.WTF::AtomicString"* nonnull %11, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.1, i64 0, i64 0), i64 2) #11
  %42 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %11, i64 0, i32 0, i32 0, i32 0
  %43 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %42, align 8
  call void @_ZN5blink17FetchResponseData16SetStatusMessageEN3WTF12AtomicStringE(%"class.blink::FetchResponseData"* %0, %"class.WTF::StringImpl"* %43)
  br label %67

44:                                               ; preds = %34
  %45 = tail call dereferenceable(8) %"class.WTF::AtomicString"* @_ZNK5blink16ResourceResponse14HttpStatusTextEv(%"class.blink::ResourceResponse"* %6) #11
  %46 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %45, i64 0, i32 0, i32 0, i32 0
  %47 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %46, align 8
  %48 = icmp eq %"class.WTF::StringImpl"* %47, null
  br i1 %48, label %66, label %49

49:                                               ; preds = %44
  %50 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %47, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %51 = load atomic i32, i32* %50 monotonic, align 4
  %52 = and i32 %51, 2
  %53 = icmp eq i32 %52, 0
  br i1 %53, label %54, label %66

54:                                               ; preds = %49
  %55 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %47, i64 0, i32 0
  %56 = load i32, i32* %55, align 4
  %57 = zext i32 %56 to i33
  %58 = tail call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %57, i33 1) #11
  %59 = extractvalue { i33, i1 } %58, 1
  %60 = extractvalue { i33, i1 } %58, 0
  %61 = icmp slt i33 %60, 0
  %62 = or i1 %59, %61
  br i1 %62, label %63, label %64, !prof !2

63:                                               ; preds = %54
  tail call void @llvm.trap() #11
  unreachable

64:                                               ; preds = %54
  %65 = trunc i33 %60 to i32
  store i32 %65, i32* %55, align 4
  br label %66

66:                                               ; preds = %44, %49, %64
  tail call void @_ZN5blink17FetchResponseData16SetStatusMessageEN3WTF12AtomicStringE(%"class.blink::FetchResponseData"* %0, %"class.WTF::StringImpl"* %47)
  br label %67

67:                                               ; preds = %66, %41
  %68 = call dereferenceable(24) %"class.blink::HTTPHeaderMap"* @_ZNK5blink16ResourceResponse16HttpHeaderFieldsEv(%"class.blink::ResourceResponse"* %6) #11
  %69 = getelementptr inbounds %"class.blink::HTTPHeaderMap", %"class.blink::HTTPHeaderMap"* %68, i64 0, i32 0, i32 0, i32 2
  %70 = load i32, i32* %69, align 4
  %71 = icmp eq i32 %70, 0
  %72 = getelementptr inbounds %"class.blink::HTTPHeaderMap", %"class.blink::HTTPHeaderMap"* %68, i64 0, i32 0, i32 0, i32 0
  %73 = load %"struct.WTF::KeyValuePair.480"*, %"struct.WTF::KeyValuePair.480"** %72, align 8
  %74 = getelementptr inbounds %"class.blink::HTTPHeaderMap", %"class.blink::HTTPHeaderMap"* %68, i64 0, i32 0, i32 0, i32 1
  %75 = load i32, i32* %74, align 8
  %76 = zext i32 %75 to i64
  %77 = getelementptr inbounds %"struct.WTF::KeyValuePair.480", %"struct.WTF::KeyValuePair.480"* %73, i64 %76
  br i1 %71, label %92, label %78

78:                                               ; preds = %67
  %79 = icmp eq i32 %75, 0
  br i1 %79, label %87, label %80

80:                                               ; preds = %78, %84
  %81 = phi %"struct.WTF::KeyValuePair.480"* [ %85, %84 ], [ %73, %78 ]
  %82 = bitcast %"struct.WTF::KeyValuePair.480"* %81 to i64*
  %83 = load i64, i64* %82, align 8
  switch i64 %83, label %87 [
    i64 -1, label %84
    i64 0, label %84
  ]

84:                                               ; preds = %80, %80
  %85 = getelementptr inbounds %"struct.WTF::KeyValuePair.480", %"struct.WTF::KeyValuePair.480"* %81, i64 1
  %86 = icmp eq %"struct.WTF::KeyValuePair.480"* %85, %77
  br i1 %86, label %92, label %80

87:                                               ; preds = %80, %78
  %88 = phi %"struct.WTF::KeyValuePair.480"* [ %73, %78 ], [ %81, %80 ]
  %89 = icmp eq %"struct.WTF::KeyValuePair.480"* %88, %77
  br i1 %89, label %92, label %90

90:                                               ; preds = %87
  %91 = getelementptr inbounds %"class.blink::FetchResponseData", %"class.blink::FetchResponseData"* %0, i64 0, i32 7, i32 0, i32 0
  br label %105

92:                                               ; preds = %84, %105, %119, %116, %67, %87
  %93 = getelementptr inbounds %"class.blink::ResourceResponse", %"class.blink::ResourceResponse"* %6, i64 0, i32 51, i32 0, i32 0, i32 2
  %94 = load i32, i32* %93, align 4
  %95 = icmp eq i32 %94, 0
  %96 = getelementptr inbounds %"class.blink::FetchResponseData", %"class.blink::FetchResponseData"* %0, i64 0, i32 4
  %97 = getelementptr inbounds %"class.blink::ResourceResponse", %"class.blink::ResourceResponse"* %6, i64 0, i32 51
  %98 = select i1 %95, %"class.WTF::Vector"* %3, %"class.WTF::Vector"* %97
  %99 = call dereferenceable(16) %"class.WTF::Vector"* @_ZN3WTF6VectorIN5blink4KURLELj0ENS_18PartitionAllocatorEEaSERKS4_(%"class.WTF::Vector"* %96, %"class.WTF::Vector"* dereferenceable(16) %98) #11
  %100 = call dereferenceable(8) %"class.WTF::AtomicString"* @_ZNK5blink16ResourceResponse8MimeTypeEv(%"class.blink::ResourceResponse"* %6) #11
  %101 = getelementptr inbounds %"class.blink::FetchResponseData", %"class.blink::FetchResponseData"* %0, i64 0, i32 10
  %102 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %100, i64 0, i32 0, i32 0, i32 0
  %103 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %102, align 8
  %104 = icmp eq %"class.WTF::StringImpl"* %103, null
  br i1 %104, label %138, label %121

105:                                              ; preds = %90, %119
  %106 = phi %"struct.WTF::KeyValuePair.480"* [ %88, %90 ], [ %113, %119 ]
  %107 = load %"class.blink::FetchHeaderList"*, %"class.blink::FetchHeaderList"** %91, align 8
  %108 = getelementptr inbounds %"struct.WTF::KeyValuePair.480", %"struct.WTF::KeyValuePair.480"* %106, i64 0, i32 0, i32 0
  %109 = getelementptr inbounds %"struct.WTF::KeyValuePair.480", %"struct.WTF::KeyValuePair.480"* %106, i64 0, i32 1, i32 0
  call void @_ZN5blink15FetchHeaderList6AppendERKN3WTF6StringES4_(%"class.blink::FetchHeaderList"* %107, %"class.WTF::String"* dereferenceable(8) %108, %"class.WTF::String"* dereferenceable(8) %109) #11
  %110 = getelementptr inbounds %"struct.WTF::KeyValuePair.480", %"struct.WTF::KeyValuePair.480"* %106, i64 1
  %111 = icmp eq %"struct.WTF::KeyValuePair.480"* %110, %77
  br i1 %111, label %92, label %112

112:                                              ; preds = %105, %116
  %113 = phi %"struct.WTF::KeyValuePair.480"* [ %117, %116 ], [ %110, %105 ]
  %114 = bitcast %"struct.WTF::KeyValuePair.480"* %113 to i64*
  %115 = load i64, i64* %114, align 8
  switch i64 %115, label %119 [
    i64 -1, label %116
    i64 0, label %116
  ]

116:                                              ; preds = %112, %112
  %117 = getelementptr inbounds %"struct.WTF::KeyValuePair.480", %"struct.WTF::KeyValuePair.480"* %113, i64 1
  %118 = icmp eq %"struct.WTF::KeyValuePair.480"* %117, %77
  br i1 %118, label %92, label %112

119:                                              ; preds = %112
  %120 = icmp eq %"struct.WTF::KeyValuePair.480"* %113, %77
  br i1 %120, label %92, label %105

121:                                              ; preds = %92
  %122 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %103, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %123 = load atomic i32, i32* %122 monotonic, align 4
  %124 = and i32 %123, 2
  %125 = icmp eq i32 %124, 0
  br i1 %125, label %126, label %138

126:                                              ; preds = %121
  %127 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %103, i64 0, i32 0
  %128 = load i32, i32* %127, align 4
  %129 = zext i32 %128 to i33
  %130 = call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %129, i33 1) #11
  %131 = extractvalue { i33, i1 } %130, 1
  %132 = extractvalue { i33, i1 } %130, 0
  %133 = icmp slt i33 %132, 0
  %134 = or i1 %131, %133
  br i1 %134, label %135, label %136, !prof !2

135:                                              ; preds = %126
  call void @llvm.trap() #11
  unreachable

136:                                              ; preds = %126
  %137 = trunc i33 %132 to i32
  store i32 %137, i32* %127, align 4
  br label %138

138:                                              ; preds = %136, %121, %92
  %139 = ptrtoint %"class.WTF::StringImpl"* %103 to i64
  %140 = bitcast %"class.WTF::String"* %101 to i64*
  %141 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %101, i64 0, i32 0, i32 0
  %142 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %141, align 8
  store i64 %139, i64* %140, align 8
  %143 = icmp eq %"class.WTF::StringImpl"* %142, null
  br i1 %143, label %157, label %144

144:                                              ; preds = %138
  %145 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %142, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %146 = load atomic i32, i32* %145 monotonic, align 4
  %147 = and i32 %146, 2
  %148 = icmp eq i32 %147, 0
  %149 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %142, i64 0, i32 0
  %150 = load i32, i32* %149, align 4
  br i1 %148, label %151, label %153

151:                                              ; preds = %144
  %152 = add i32 %150, -1
  store i32 %152, i32* %149, align 4
  br label %153

153:                                              ; preds = %151, %144
  %154 = phi i32 [ %152, %151 ], [ %150, %144 ]
  %155 = icmp eq i32 %154, 0
  br i1 %155, label %156, label %157

156:                                              ; preds = %153
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %142) #11
  br label %157

157:                                              ; preds = %138, %153, %156
  %158 = getelementptr inbounds %"class.blink::FetchResponseData", %"class.blink::FetchResponseData"* %0, i64 0, i32 11
  %159 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %4, i64 0, i32 0, i32 0, i32 0
  %160 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %159, align 8
  %161 = icmp eq %"class.WTF::StringImpl"* %160, null
  br i1 %161, label %179, label %162

162:                                              ; preds = %157
  %163 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %160, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %164 = load atomic i32, i32* %163 monotonic, align 4
  %165 = and i32 %164, 2
  %166 = icmp eq i32 %165, 0
  br i1 %166, label %167, label %179

167:                                              ; preds = %162
  %168 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %160, i64 0, i32 0
  %169 = load i32, i32* %168, align 4
  %170 = zext i32 %169 to i33
  %171 = call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %170, i33 1) #11
  %172 = extractvalue { i33, i1 } %171, 1
  %173 = extractvalue { i33, i1 } %171, 0
  %174 = icmp slt i33 %173, 0
  %175 = or i1 %172, %174
  br i1 %175, label %176, label %177, !prof !2

176:                                              ; preds = %167
  call void @llvm.trap() #11
  unreachable

177:                                              ; preds = %167
  %178 = trunc i33 %173 to i32
  store i32 %178, i32* %168, align 4
  br label %179

179:                                              ; preds = %177, %162, %157
  %180 = ptrtoint %"class.WTF::StringImpl"* %160 to i64
  %181 = bitcast %"class.WTF::AtomicString"* %158 to i64*
  %182 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %158, i64 0, i32 0, i32 0, i32 0
  %183 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %182, align 8
  store i64 %180, i64* %181, align 8
  %184 = icmp eq %"class.WTF::StringImpl"* %183, null
  br i1 %184, label %198, label %185

185:                                              ; preds = %179
  %186 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %183, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %187 = load atomic i32, i32* %186 monotonic, align 4
  %188 = and i32 %187, 2
  %189 = icmp eq i32 %188, 0
  %190 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %183, i64 0, i32 0
  %191 = load i32, i32* %190, align 4
  br i1 %189, label %192, label %194

192:                                              ; preds = %185
  %193 = add i32 %191, -1
  store i32 %193, i32* %190, align 4
  br label %194

194:                                              ; preds = %192, %185
  %195 = phi i32 [ %193, %192 ], [ %191, %185 ]
  %196 = icmp eq i32 %195, 0
  br i1 %196, label %197, label %198

197:                                              ; preds = %194
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %183) #11
  br label %198

198:                                              ; preds = %179, %194, %197
  %199 = getelementptr inbounds %"class.blink::ResourceResponse", %"class.blink::ResourceResponse"* %6, i64 0, i32 54, i32 0, i32 0
  %200 = load i64, i64* %199, align 8
  %201 = getelementptr inbounds %"class.blink::FetchResponseData", %"class.blink::FetchResponseData"* %0, i64 0, i32 12, i32 0, i32 0
  store i64 %200, i64* %201, align 8
  %202 = call zeroext i1 @_ZNK5blink16ResourceResponse9WasCachedEv(%"class.blink::ResourceResponse"* %6) #11
  br i1 %202, label %207, label %203

203:                                              ; preds = %198
  %204 = getelementptr inbounds %"class.blink::ResourceResponse", %"class.blink::ResourceResponse"* %6, i64 0, i32 24
  %205 = load i8, i8* %204, align 1, !range !4
  %206 = icmp eq i8 %205, 0
  br i1 %206, label %207, label %210

207:                                              ; preds = %203, %198
  %208 = phi i32 [ 2, %198 ], [ 1, %203 ]
  %209 = getelementptr inbounds %"class.blink::FetchResponseData", %"class.blink::FetchResponseData"* %0, i64 0, i32 2
  store i32 %208, i32* %209, align 8
  br label %210

210:                                              ; preds = %207, %203
  %211 = getelementptr inbounds %"class.blink::ResourceResponse", %"class.blink::ResourceResponse"* %6, i64 0, i32 56
  %212 = load i32, i32* %211, align 8
  %213 = getelementptr inbounds %"class.blink::FetchResponseData", %"class.blink::FetchResponseData"* %0, i64 0, i32 15
  store i32 %212, i32* %213, align 8
  %214 = getelementptr inbounds %"class.blink::ResourceResponse", %"class.blink::ResourceResponse"* %6, i64 0, i32 55, i32 0, i32 0, i32 0
  %215 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %214, align 8
  %216 = icmp eq %"class.WTF::StringImpl"* %215, null
  br i1 %216, label %235, label %217

217:                                              ; preds = %210
  %218 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %215, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %219 = load atomic i32, i32* %218 monotonic, align 4
  %220 = and i32 %219, 2
  %221 = icmp eq i32 %220, 0
  br i1 %221, label %222, label %234

222:                                              ; preds = %217
  %223 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %215, i64 0, i32 0
  %224 = load i32, i32* %223, align 4
  %225 = zext i32 %224 to i33
  %226 = call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %225, i33 1) #11
  %227 = extractvalue { i33, i1 } %226, 1
  %228 = extractvalue { i33, i1 } %226, 0
  %229 = icmp slt i33 %228, 0
  %230 = or i1 %227, %229
  br i1 %230, label %231, label %232, !prof !2

231:                                              ; preds = %222
  call void @llvm.trap() #11
  unreachable

232:                                              ; preds = %222
  %233 = trunc i33 %228 to i32
  store i32 %233, i32* %223, align 4
  br label %234

234:                                              ; preds = %217, %232
  call void @_ZN5blink17FetchResponseData25SetAlpnNegotiatedProtocolEN3WTF12AtomicStringE(%"class.blink::FetchResponseData"* %0, %"class.WTF::StringImpl"* nonnull %215)
  br label %235

235:                                              ; preds = %234, %210
  %236 = getelementptr inbounds %"class.blink::ResourceResponse", %"class.blink::ResourceResponse"* %6, i64 0, i32 23
  %237 = load i8, i8* %236, align 8, !range !4
  %238 = getelementptr inbounds %"class.blink::FetchResponseData", %"class.blink::FetchResponseData"* %0, i64 0, i32 17
  store i8 %237, i8* %238, align 8
  %239 = getelementptr inbounds %"class.blink::ResourceResponse", %"class.blink::ResourceResponse"* %6, i64 0, i32 20
  %240 = load i8, i8* %239, align 1, !range !4
  %241 = getelementptr inbounds %"class.blink::FetchResponseData", %"class.blink::FetchResponseData"* %0, i64 0, i32 18
  store i8 %240, i8* %241, align 1
  %242 = getelementptr inbounds %"class.blink::ResourceResponse", %"class.blink::ResourceResponse"* %6, i64 0, i32 37
  %243 = load i64, i64* %242, align 8
  %244 = icmp eq i64 %243, 0
  br i1 %244, label %245, label %286

245:                                              ; preds = %235
  %246 = call zeroext i1 @_ZN7storage21ShouldPadResponseTypeEN7network5mojom17FetchResponseTypeE(i32 %2) #11
  br i1 %246, label %247, label %289

247:                                              ; preds = %245
  %248 = call zeroext i1 @_ZNK5blink16ResourceResponse9WasCachedEv(%"class.blink::ResourceResponse"* %6) #11
  %249 = bitcast %"class.base::Time"* %14 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %249) #11
  br i1 %248, label %250, label %283

250:                                              ; preds = %247
  %251 = bitcast %"class.url::Origin"* %12 to i8*
  call void @llvm.lifetime.start.p0i8(i64 80, i8* nonnull %251) #11
  %252 = call %"class.blink::SecurityOrigin"* @_ZNK5blink16ExecutionContext17GetSecurityOriginEv(%"class.blink::ExecutionContext"* %1) #11
  call void @_ZNK5blink14SecurityOrigin11ToUrlOriginEv(%"class.url::Origin"* nonnull sret %12, %"class.blink::SecurityOrigin"* %252) #11
  %253 = bitcast %"class.std::__1::basic_string"* %13 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %253) #11
  %254 = getelementptr inbounds %"class.blink::FetchResponseData", %"class.blink::FetchResponseData"* %0, i64 0, i32 4, i32 0, i32 0, i32 2
  %255 = load i32, i32* %254, align 4
  %256 = icmp eq i32 %255, 0
  br i1 %256, label %260, label %257

257:                                              ; preds = %250
  %258 = add i32 %255, -1
  %259 = call dereferenceable(112) %"class.blink::KURL"* @_ZNK3WTF6VectorIN5blink4KURLELj0ENS_18PartitionAllocatorEE2atEj(%"class.WTF::Vector"* %96, i32 %258) #11
  br label %260

260:                                              ; preds = %257, %250
  %261 = phi %"class.blink::KURL"* [ %259, %257 ], [ null, %250 ]
  %262 = getelementptr inbounds %"class.blink::KURL", %"class.blink::KURL"* %261, i64 0, i32 4
  call void @_ZNK3WTF6String4Utf8ENS_18UTF8ConversionModeE(%"class.std::__1::basic_string"* nonnull sret %13, %"class.WTF::String"* %262, i32 0) #11
  %263 = load i64, i64* %201, align 8
  %264 = getelementptr inbounds %"class.base::Time", %"class.base::Time"* %14, i64 0, i32 0, i32 0
  store i64 %263, i64* %264, align 8
  %265 = bitcast %"class.std::__1::basic_string"* %15 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %265) #11
  %266 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %4, i64 0, i32 0
  call void @_ZNK3WTF6String4Utf8ENS_18UTF8ConversionModeE(%"class.std::__1::basic_string"* nonnull sret %15, %"class.WTF::String"* %266, i32 0) #11
  %267 = call i64 @_ZN7storage28ComputeStableResponsePaddingERKN3url6OriginERKNSt3__112basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEERKN4base4TimeESC_l(%"class.url::Origin"* nonnull dereferenceable(80) %12, %"class.std::__1::basic_string"* nonnull dereferenceable(24) %13, %"class.base::Time"* nonnull dereferenceable(8) %14, %"class.std::__1::basic_string"* nonnull dereferenceable(24) %15, i64 0) #11
  %268 = bitcast %"class.std::__1::basic_string"* %15 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %269 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %268, i64 0, i32 1, i32 0
  %270 = load i8, i8* %269, align 1
  %271 = icmp slt i8 %270, 0
  br i1 %271, label %272, label %275

272:                                              ; preds = %260
  %273 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %15, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %274 = load i8*, i8** %273, align 8
  call void @_ZdlPv(i8* %274) #12
  br label %275

275:                                              ; preds = %260, %272
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %265) #11
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %249) #11
  %276 = bitcast %"class.std::__1::basic_string"* %13 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %277 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %276, i64 0, i32 1, i32 0
  %278 = load i8, i8* %277, align 1
  %279 = icmp slt i8 %278, 0
  br i1 %279, label %280, label %285

280:                                              ; preds = %275
  %281 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %13, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %282 = load i8*, i8** %281, align 8
  call void @_ZdlPv(i8* %282) #12
  br label %285

283:                                              ; preds = %247
  %284 = call i64 @_ZN7storage28ComputeRandomResponsePaddingEv() #11
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %249) #11
  br label %286

285:                                              ; preds = %275, %280
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %253) #11
  call void @_ZN3url6OriginD1Ev(%"class.url::Origin"* nonnull %12) #11
  call void @llvm.lifetime.end.p0i8(i64 80, i8* nonnull %251) #11
  br label %286

286:                                              ; preds = %285, %283, %235
  %287 = phi i64 [ %243, %235 ], [ %284, %283 ], [ %267, %285 ]
  %288 = getelementptr inbounds %"class.blink::FetchResponseData", %"class.blink::FetchResponseData"* %0, i64 0, i32 1
  store i64 %287, i64* %288, align 8
  br label %289

289:                                              ; preds = %286, %245
  %290 = getelementptr inbounds %"class.blink::ResourceResponse", %"class.blink::ResourceResponse"* %6, i64 0, i32 64, i32 0, i32 0, i32 0, i32 0
  %291 = load i8, i8* %290, align 8, !range !4
  %292 = icmp eq i8 %291, 0
  br i1 %292, label %305, label %293

293:                                              ; preds = %289
  %294 = getelementptr inbounds %"class.blink::ResourceResponse", %"class.blink::ResourceResponse"* %6, i64 0, i32 64, i32 0, i32 0, i32 0, i32 1, i32 0
  %295 = call i8* @_Znwm(i64 184) #12
  %296 = bitcast i8* %295 to %"class.net::AuthChallengeInfo"*
  call void @_ZN3net17AuthChallengeInfoC1ERKS0_(%"class.net::AuthChallengeInfo"* nonnull %296, %"class.net::AuthChallengeInfo"* dereferenceable(184) %294) #11
  %297 = ptrtoint i8* %295 to i64
  %298 = getelementptr inbounds %"class.blink::FetchResponseData", %"class.blink::FetchResponseData"* %0, i64 0, i32 19
  %299 = getelementptr inbounds %"class.std::__1::unique_ptr.286", %"class.std::__1::unique_ptr.286"* %298, i64 0, i32 0, i32 0, i32 0
  %300 = load %"class.net::AuthChallengeInfo"*, %"class.net::AuthChallengeInfo"** %299, align 8
  %301 = bitcast %"class.std::__1::unique_ptr.286"* %298 to i64*
  store i64 %297, i64* %301, align 8
  %302 = icmp eq %"class.net::AuthChallengeInfo"* %300, null
  br i1 %302, label %305, label %303

303:                                              ; preds = %293
  call void @_ZN3net17AuthChallengeInfoD1Ev(%"class.net::AuthChallengeInfo"* nonnull %300) #11
  %304 = getelementptr inbounds %"class.net::AuthChallengeInfo", %"class.net::AuthChallengeInfo"* %300, i64 0, i32 0
  call void @_ZdlPv(i8* %304) #12
  br label %305

305:                                              ; preds = %289, %293, %303
  ret void
}

declare i32 @_ZNK5blink16ResourceResponse14HttpStatusCodeEv(%"class.blink::ResourceResponse"*) local_unnamed_addr #2

declare dereferenceable(112) %"class.blink::KURL"* @_ZNK5blink16ResourceResponse17CurrentRequestUrlEv(%"class.blink::ResourceResponse"*) local_unnamed_addr #2

declare zeroext i1 @_ZNK5blink4KURL10ProtocolIsEN3WTF10StringViewE(%"class.blink::KURL"*, %"class.WTF::StringView"* byval(%"class.WTF::StringView") align 8) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN5blink17FetchResponseData16SetStatusMessageEN3WTF12AtomicStringE(%"class.blink::FetchResponseData"*, %"class.WTF::StringImpl"*) local_unnamed_addr #0 comdat align 2 {
  %3 = getelementptr inbounds %"class.blink::FetchResponseData", %"class.blink::FetchResponseData"* %0, i64 0, i32 6
  %4 = icmp eq %"class.WTF::StringImpl"* %1, null
  br i1 %4, label %22, label %5

5:                                                ; preds = %2
  %6 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %1, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %7 = load atomic i32, i32* %6 monotonic, align 4
  %8 = and i32 %7, 2
  %9 = icmp eq i32 %8, 0
  br i1 %9, label %10, label %22

10:                                               ; preds = %5
  %11 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %1, i64 0, i32 0
  %12 = load i32, i32* %11, align 4
  %13 = zext i32 %12 to i33
  %14 = tail call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %13, i33 1) #11
  %15 = extractvalue { i33, i1 } %14, 1
  %16 = extractvalue { i33, i1 } %14, 0
  %17 = icmp slt i33 %16, 0
  %18 = or i1 %15, %17
  br i1 %18, label %19, label %20, !prof !2

19:                                               ; preds = %10
  tail call void @llvm.trap() #11
  unreachable

20:                                               ; preds = %10
  %21 = trunc i33 %16 to i32
  store i32 %21, i32* %11, align 4
  br label %22

22:                                               ; preds = %20, %5, %2
  %23 = ptrtoint %"class.WTF::StringImpl"* %1 to i64
  %24 = bitcast %"class.WTF::AtomicString"* %3 to i64*
  %25 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %3, i64 0, i32 0, i32 0, i32 0
  %26 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %25, align 8
  store i64 %23, i64* %24, align 8
  %27 = icmp eq %"class.WTF::StringImpl"* %26, null
  br i1 %27, label %41, label %28

28:                                               ; preds = %22
  %29 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %26, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %30 = load atomic i32, i32* %29 monotonic, align 4
  %31 = and i32 %30, 2
  %32 = icmp eq i32 %31, 0
  %33 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %26, i64 0, i32 0
  %34 = load i32, i32* %33, align 4
  br i1 %32, label %35, label %37

35:                                               ; preds = %28
  %36 = add i32 %34, -1
  store i32 %36, i32* %33, align 4
  br label %37

37:                                               ; preds = %35, %28
  %38 = phi i32 [ %36, %35 ], [ %34, %28 ]
  %39 = icmp eq i32 %38, 0
  br i1 %39, label %40, label %41

40:                                               ; preds = %37
  tail call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %26) #11
  br label %41

41:                                               ; preds = %22, %37, %40
  br i1 %4, label %55, label %42

42:                                               ; preds = %41
  %43 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %1, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %44 = load atomic i32, i32* %43 monotonic, align 4
  %45 = and i32 %44, 2
  %46 = icmp eq i32 %45, 0
  %47 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %1, i64 0, i32 0
  %48 = load i32, i32* %47, align 4
  br i1 %46, label %49, label %51

49:                                               ; preds = %42
  %50 = add i32 %48, -1
  store i32 %50, i32* %47, align 4
  br label %51

51:                                               ; preds = %49, %42
  %52 = phi i32 [ %50, %49 ], [ %48, %42 ]
  %53 = icmp eq i32 %52, 0
  br i1 %53, label %54, label %55

54:                                               ; preds = %51
  tail call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %1) #11
  br label %55

55:                                               ; preds = %41, %51, %54
  ret void
}

declare dereferenceable(8) %"class.WTF::AtomicString"* @_ZNK5blink16ResourceResponse14HttpStatusTextEv(%"class.blink::ResourceResponse"*) local_unnamed_addr #2

declare dereferenceable(24) %"class.blink::HTTPHeaderMap"* @_ZNK5blink16ResourceResponse16HttpHeaderFieldsEv(%"class.blink::ResourceResponse"*) local_unnamed_addr #2

declare dereferenceable(8) %"class.WTF::AtomicString"* @_ZNK5blink16ResourceResponse8MimeTypeEv(%"class.blink::ResourceResponse"*) local_unnamed_addr #2

declare zeroext i1 @_ZNK5blink16ResourceResponse9WasCachedEv(%"class.blink::ResourceResponse"*) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN5blink17FetchResponseData25SetAlpnNegotiatedProtocolEN3WTF12AtomicStringE(%"class.blink::FetchResponseData"*, %"class.WTF::StringImpl"*) local_unnamed_addr #0 comdat align 2 {
  %3 = getelementptr inbounds %"class.blink::FetchResponseData", %"class.blink::FetchResponseData"* %0, i64 0, i32 16
  %4 = icmp eq %"class.WTF::StringImpl"* %1, null
  br i1 %4, label %22, label %5

5:                                                ; preds = %2
  %6 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %1, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %7 = load atomic i32, i32* %6 monotonic, align 4
  %8 = and i32 %7, 2
  %9 = icmp eq i32 %8, 0
  br i1 %9, label %10, label %22

10:                                               ; preds = %5
  %11 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %1, i64 0, i32 0
  %12 = load i32, i32* %11, align 4
  %13 = zext i32 %12 to i33
  %14 = tail call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %13, i33 1) #11
  %15 = extractvalue { i33, i1 } %14, 1
  %16 = extractvalue { i33, i1 } %14, 0
  %17 = icmp slt i33 %16, 0
  %18 = or i1 %15, %17
  br i1 %18, label %19, label %20, !prof !2

19:                                               ; preds = %10
  tail call void @llvm.trap() #11
  unreachable

20:                                               ; preds = %10
  %21 = trunc i33 %16 to i32
  store i32 %21, i32* %11, align 4
  br label %22

22:                                               ; preds = %20, %5, %2
  %23 = ptrtoint %"class.WTF::StringImpl"* %1 to i64
  %24 = bitcast %"class.WTF::AtomicString"* %3 to i64*
  %25 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %3, i64 0, i32 0, i32 0, i32 0
  %26 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %25, align 8
  store i64 %23, i64* %24, align 8
  %27 = icmp eq %"class.WTF::StringImpl"* %26, null
  br i1 %27, label %41, label %28

28:                                               ; preds = %22
  %29 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %26, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %30 = load atomic i32, i32* %29 monotonic, align 4
  %31 = and i32 %30, 2
  %32 = icmp eq i32 %31, 0
  %33 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %26, i64 0, i32 0
  %34 = load i32, i32* %33, align 4
  br i1 %32, label %35, label %37

35:                                               ; preds = %28
  %36 = add i32 %34, -1
  store i32 %36, i32* %33, align 4
  br label %37

37:                                               ; preds = %35, %28
  %38 = phi i32 [ %36, %35 ], [ %34, %28 ]
  %39 = icmp eq i32 %38, 0
  br i1 %39, label %40, label %41

40:                                               ; preds = %37
  tail call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %26) #11
  br label %41

41:                                               ; preds = %22, %37, %40
  br i1 %4, label %55, label %42

42:                                               ; preds = %41
  %43 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %1, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %44 = load atomic i32, i32* %43 monotonic, align 4
  %45 = and i32 %44, 2
  %46 = icmp eq i32 %45, 0
  %47 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %1, i64 0, i32 0
  %48 = load i32, i32* %47, align 4
  br i1 %46, label %49, label %51

49:                                               ; preds = %42
  %50 = add i32 %48, -1
  store i32 %50, i32* %47, align 4
  br label %51

51:                                               ; preds = %49, %42
  %52 = phi i32 [ %50, %49 ], [ %48, %42 ]
  %53 = icmp eq i32 %52, 0
  br i1 %53, label %54, label %55

54:                                               ; preds = %51
  tail call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %1) #11
  br label %55

55:                                               ; preds = %41, %51, %54
  ret void
}

declare zeroext i1 @_ZN7storage21ShouldPadResponseTypeEN7network5mojom17FetchResponseTypeE(i32) local_unnamed_addr #2

declare i64 @_ZN7storage28ComputeStableResponsePaddingERKN3url6OriginERKNSt3__112basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEERKN4base4TimeESC_l(%"class.url::Origin"* dereferenceable(80), %"class.std::__1::basic_string"* dereferenceable(24), %"class.base::Time"* dereferenceable(8), %"class.std::__1::basic_string"* dereferenceable(24), i64) local_unnamed_addr #2

declare %"class.blink::SecurityOrigin"* @_ZNK5blink16ExecutionContext17GetSecurityOriginEv(%"class.blink::ExecutionContext"*) local_unnamed_addr #2

declare void @_ZNK5blink14SecurityOrigin11ToUrlOriginEv(%"class.url::Origin"* sret, %"class.blink::SecurityOrigin"*) local_unnamed_addr #2

declare void @_ZNK3WTF6String4Utf8ENS_18UTF8ConversionModeE(%"class.std::__1::basic_string"* sret, %"class.WTF::String"*, i32) local_unnamed_addr #2

declare i64 @_ZN7storage28ComputeRandomResponsePaddingEv() local_unnamed_addr #2

; Function Attrs: nounwind
declare void @_ZN3url6OriginD1Ev(%"class.url::Origin"*) unnamed_addr #4

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5blink17FetchResponseData20SetAuthChallengeInfoERKN4absl8optionalIN3net17AuthChallengeInfoEEE(%"class.blink::FetchResponseData"* nocapture, %"class.absl::optional.468"* dereferenceable(192)) local_unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"class.absl::optional.468", %"class.absl::optional.468"* %1, i64 0, i32 0, i32 0, i32 0, i32 0
  %4 = load i8, i8* %3, align 8, !range !4
  %5 = icmp eq i8 %4, 0
  br i1 %5, label %18, label %6

6:                                                ; preds = %2
  %7 = getelementptr inbounds %"class.absl::optional.468", %"class.absl::optional.468"* %1, i64 0, i32 0, i32 0, i32 0, i32 1, i32 0
  %8 = tail call i8* @_Znwm(i64 184) #12
  %9 = bitcast i8* %8 to %"class.net::AuthChallengeInfo"*
  tail call void @_ZN3net17AuthChallengeInfoC1ERKS0_(%"class.net::AuthChallengeInfo"* nonnull %9, %"class.net::AuthChallengeInfo"* dereferenceable(184) %7) #11
  %10 = ptrtoint i8* %8 to i64
  %11 = getelementptr inbounds %"class.blink::FetchResponseData", %"class.blink::FetchResponseData"* %0, i64 0, i32 19
  %12 = getelementptr inbounds %"class.std::__1::unique_ptr.286", %"class.std::__1::unique_ptr.286"* %11, i64 0, i32 0, i32 0, i32 0
  %13 = load %"class.net::AuthChallengeInfo"*, %"class.net::AuthChallengeInfo"** %12, align 8
  %14 = bitcast %"class.std::__1::unique_ptr.286"* %11 to i64*
  store i64 %10, i64* %14, align 8
  %15 = icmp eq %"class.net::AuthChallengeInfo"* %13, null
  br i1 %15, label %18, label %16

16:                                               ; preds = %6
  tail call void @_ZN3net17AuthChallengeInfoD1Ev(%"class.net::AuthChallengeInfo"* nonnull %13) #11
  %17 = getelementptr inbounds %"class.net::AuthChallengeInfo", %"class.net::AuthChallengeInfo"* %13, i64 0, i32 0
  tail call void @_ZdlPv(i8* %17) #12
  br label %18

18:                                               ; preds = %2, %6, %16
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5blink17FetchResponseDataC2EN7network5mojom17FetchResponseTypeENS2_19FetchResponseSourceEtN3WTF12AtomicStringE(%"class.blink::FetchResponseData"*, i32, i32, i16 zeroext, %"class.WTF::StringImpl"*) unnamed_addr #0 align 2 {
  %6 = getelementptr inbounds %"class.blink::FetchResponseData", %"class.blink::FetchResponseData"* %0, i64 0, i32 0
  store i32 %1, i32* %6, align 8
  %7 = getelementptr inbounds %"class.blink::FetchResponseData", %"class.blink::FetchResponseData"* %0, i64 0, i32 1
  store i64 0, i64* %7, align 8
  %8 = getelementptr inbounds %"class.blink::FetchResponseData", %"class.blink::FetchResponseData"* %0, i64 0, i32 2
  store i32 %2, i32* %8, align 8
  %9 = getelementptr inbounds %"class.blink::FetchResponseData", %"class.blink::FetchResponseData"* %0, i64 0, i32 3
  %10 = getelementptr inbounds %"class.blink::FetchResponseData", %"class.blink::FetchResponseData"* %0, i64 0, i32 5
  %11 = bitcast %"class.std::__1::unique_ptr"* %9 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %11, i8 0, i64 24, i1 false)
  store i16 %3, i16* %10, align 8
  %12 = getelementptr inbounds %"class.blink::FetchResponseData", %"class.blink::FetchResponseData"* %0, i64 0, i32 6, i32 0, i32 0, i32 0
  store %"class.WTF::StringImpl"* %4, %"class.WTF::StringImpl"** %12, align 8
  %13 = icmp eq %"class.WTF::StringImpl"* %4, null
  br i1 %13, label %31, label %14

14:                                               ; preds = %5
  %15 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %4, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %16 = load atomic i32, i32* %15 monotonic, align 4
  %17 = and i32 %16, 2
  %18 = icmp eq i32 %17, 0
  br i1 %18, label %19, label %31

19:                                               ; preds = %14
  %20 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %4, i64 0, i32 0
  %21 = load i32, i32* %20, align 4
  %22 = zext i32 %21 to i33
  %23 = tail call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %22, i33 1) #11
  %24 = extractvalue { i33, i1 } %23, 1
  %25 = extractvalue { i33, i1 } %23, 0
  %26 = icmp slt i33 %25, 0
  %27 = or i1 %24, %26
  br i1 %27, label %28, label %29, !prof !2

28:                                               ; preds = %19
  tail call void @llvm.trap() #11
  unreachable

29:                                               ; preds = %19
  %30 = trunc i33 %25 to i32
  store i32 %30, i32* %20, align 4
  br label %31

31:                                               ; preds = %5, %14, %29
  %32 = tail call i8* @_ZN5blink10ThreadHeap8AllocateINS_15FetchHeaderListEEEPhm(i64 24) #11
  %33 = bitcast i8* %32 to %"class.blink::FetchHeaderList"*
  tail call void @_ZN5blink15FetchHeaderListC1Ev(%"class.blink::FetchHeaderList"* %33) #11
  %34 = getelementptr inbounds i8, i8* %32, i64 -4
  %35 = bitcast i8* %34 to i16*
  %36 = load atomic i16, i16* %35 monotonic, align 2
  %37 = or i16 %36, 1
  store atomic i16 %37, i16* %35 release, align 2
  %38 = getelementptr inbounds %"class.blink::FetchResponseData", %"class.blink::FetchResponseData"* %0, i64 0, i32 7, i32 0, i32 0
  %39 = bitcast %"class.blink::FetchHeaderList"** %38 to i8**
  store i8* %32, i8** %39, align 8
  %40 = getelementptr inbounds %"class.blink::FetchResponseData", %"class.blink::FetchResponseData"* %0, i64 0, i32 8, i32 0, i32 0
  %41 = bitcast %"class.blink::FetchResponseData"** %40 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %41, i8 0, i64 32, i1 false)
  %42 = tail call i64 @_ZN4base4Time3NowEv() #11
  %43 = getelementptr inbounds %"class.blink::FetchResponseData", %"class.blink::FetchResponseData"* %0, i64 0, i32 12, i32 0, i32 0
  store i64 %42, i64* %43, align 8
  %44 = getelementptr inbounds %"class.blink::FetchResponseData", %"class.blink::FetchResponseData"* %0, i64 0, i32 13, i32 0, i32 0
  store %"class.WTF::StringImpl"* null, %"class.WTF::StringImpl"** %44, align 8
  %45 = getelementptr inbounds %"class.blink::FetchResponseData", %"class.blink::FetchResponseData"* %0, i64 0, i32 14, i32 0, i32 1, i32 0, i32 0, i32 0
  %46 = getelementptr inbounds %"class.blink::FetchResponseData", %"class.blink::FetchResponseData"* %0, i64 0, i32 14, i32 0, i32 1, i32 0, i32 0
  %47 = getelementptr inbounds %"class.blink::FetchResponseData", %"class.blink::FetchResponseData"* %0, i64 0, i32 14, i32 0, i32 0
  %48 = bitcast %"class.std::__1::__tree_node_base"** %45 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %48, i8 0, i64 16, i1 false) #11
  store %"class.std::__1::__tree_end_node"* %46, %"class.std::__1::__tree_end_node"** %47, align 8
  %49 = getelementptr inbounds %"class.blink::FetchResponseData", %"class.blink::FetchResponseData"* %0, i64 0, i32 15
  store i32 0, i32* %49, align 8
  %50 = getelementptr inbounds %"class.blink::FetchResponseData", %"class.blink::FetchResponseData"* %0, i64 0, i32 16
  tail call void @_ZN3WTF12AtomicStringC2EPKhm(%"class.WTF::AtomicString"* %50, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.2, i64 0, i64 0), i64 7) #11
  %51 = getelementptr inbounds %"class.blink::FetchResponseData", %"class.blink::FetchResponseData"* %0, i64 0, i32 17
  store i8 0, i8* %51, align 8
  %52 = getelementptr inbounds %"class.blink::FetchResponseData", %"class.blink::FetchResponseData"* %0, i64 0, i32 18
  store i8 0, i8* %52, align 1
  %53 = getelementptr inbounds %"class.blink::FetchResponseData", %"class.blink::FetchResponseData"* %0, i64 0, i32 19
  %54 = bitcast %"class.std::__1::unique_ptr.286"* %53 to i64*
  store i64 0, i64* %54, align 8
  br i1 %13, label %68, label %55

55:                                               ; preds = %31
  %56 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %4, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %57 = load atomic i32, i32* %56 monotonic, align 4
  %58 = and i32 %57, 2
  %59 = icmp eq i32 %58, 0
  %60 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %4, i64 0, i32 0
  %61 = load i32, i32* %60, align 4
  br i1 %59, label %62, label %64

62:                                               ; preds = %55
  %63 = add i32 %61, -1
  store i32 %63, i32* %60, align 4
  br label %64

64:                                               ; preds = %62, %55
  %65 = phi i32 [ %63, %62 ], [ %61, %55 ]
  %66 = icmp eq i32 %65, 0
  br i1 %66, label %67, label %68

67:                                               ; preds = %64
  tail call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %4) #11
  br label %68

68:                                               ; preds = %31, %64, %67
  ret void
}

declare i64 @_ZN4base4Time3NowEv() local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5blink17FetchResponseData23ReplaceBodyStreamBufferEPNS_16BodyStreamBufferE(%"class.blink::FetchResponseData"* nocapture, %"class.blink::BodyStreamBuffer"*) local_unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"class.blink::FetchResponseData", %"class.blink::FetchResponseData"* %0, i64 0, i32 0
  %4 = load i32, i32* %3, align 8
  switch i32 %4, label %33 [
    i32 0, label %5
    i32 1, label %5
    i32 2, label %24
  ]

5:                                                ; preds = %2, %2
  %6 = getelementptr inbounds %"class.blink::FetchResponseData", %"class.blink::FetchResponseData"* %0, i64 0, i32 8, i32 0, i32 0
  %7 = load %"class.blink::FetchResponseData"*, %"class.blink::FetchResponseData"** %6, align 8
  %8 = getelementptr inbounds %"class.blink::FetchResponseData", %"class.blink::FetchResponseData"* %7, i64 0, i32 9
  %9 = ptrtoint %"class.blink::BodyStreamBuffer"* %1 to i64
  %10 = bitcast %"class.blink::Member.18"* %8 to i64*
  store atomic i64 %9, i64* %10 monotonic, align 8
  %11 = load atomic i32, i32* getelementptr inbounds (%"class.blink::AtomicEntryFlag", %"class.blink::AtomicEntryFlag"* @_ZN5blink11ThreadState25incremental_marking_flag_E, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0) monotonic, align 4
  %12 = icmp eq i32 %11, 0
  br i1 %12, label %16, label %13

13:                                               ; preds = %5
  %14 = bitcast %"class.blink::BodyStreamBuffer"* %1 to i8*
  %15 = tail call zeroext i1 @_ZN5blink14MarkingVisitor16WriteBarrierSlowEPv(i8* %14) #11
  br label %16

16:                                               ; preds = %5, %13
  %17 = getelementptr inbounds %"class.blink::FetchResponseData", %"class.blink::FetchResponseData"* %0, i64 0, i32 9
  %18 = bitcast %"class.blink::Member.18"* %17 to i64*
  store atomic i64 %9, i64* %18 monotonic, align 8
  %19 = load atomic i32, i32* getelementptr inbounds (%"class.blink::AtomicEntryFlag", %"class.blink::AtomicEntryFlag"* @_ZN5blink11ThreadState25incremental_marking_flag_E, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0) monotonic, align 4
  %20 = icmp eq i32 %19, 0
  br i1 %20, label %33, label %21

21:                                               ; preds = %16
  %22 = bitcast %"class.blink::BodyStreamBuffer"* %1 to i8*
  %23 = tail call zeroext i1 @_ZN5blink14MarkingVisitor16WriteBarrierSlowEPv(i8* %22) #11
  br label %33

24:                                               ; preds = %2
  %25 = getelementptr inbounds %"class.blink::FetchResponseData", %"class.blink::FetchResponseData"* %0, i64 0, i32 9
  %26 = ptrtoint %"class.blink::BodyStreamBuffer"* %1 to i64
  %27 = bitcast %"class.blink::Member.18"* %25 to i64*
  store atomic i64 %26, i64* %27 monotonic, align 8
  %28 = load atomic i32, i32* getelementptr inbounds (%"class.blink::AtomicEntryFlag", %"class.blink::AtomicEntryFlag"* @_ZN5blink11ThreadState25incremental_marking_flag_E, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0) monotonic, align 4
  %29 = icmp eq i32 %28, 0
  br i1 %29, label %33, label %30

30:                                               ; preds = %24
  %31 = bitcast %"class.blink::BodyStreamBuffer"* %1 to i8*
  %32 = tail call zeroext i1 @_ZN5blink14MarkingVisitor16WriteBarrierSlowEPv(i8* %31) #11
  br label %33

33:                                               ; preds = %30, %24, %21, %16, %2
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZNK5blink17FetchResponseData5TraceEPNS_7VisitorE(%"class.blink::FetchResponseData"* nocapture readonly, %"class.blink::Visitor"*) local_unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"class.blink::FetchResponseData", %"class.blink::FetchResponseData"* %0, i64 0, i32 7
  %4 = bitcast %"class.blink::Member"* %3 to i64*
  %5 = load atomic i64, i64* %4 monotonic, align 8
  %6 = icmp eq i64 %5, 0
  br i1 %6, label %13, label %7

7:                                                ; preds = %2
  %8 = inttoptr i64 %5 to i8*
  %9 = bitcast %"class.blink::Visitor"* %1 to void (%"class.blink::Visitor"*, i8*, i8*, void (%"class.blink::Visitor"*, i8*)*)***
  %10 = load void (%"class.blink::Visitor"*, i8*, i8*, void (%"class.blink::Visitor"*, i8*)*)**, void (%"class.blink::Visitor"*, i8*, i8*, void (%"class.blink::Visitor"*, i8*)*)*** %9, align 8
  %11 = getelementptr inbounds void (%"class.blink::Visitor"*, i8*, i8*, void (%"class.blink::Visitor"*, i8*)*)*, void (%"class.blink::Visitor"*, i8*, i8*, void (%"class.blink::Visitor"*, i8*)*)** %10, i64 5
  %12 = load void (%"class.blink::Visitor"*, i8*, i8*, void (%"class.blink::Visitor"*, i8*)*)*, void (%"class.blink::Visitor"*, i8*, i8*, void (%"class.blink::Visitor"*, i8*)*)** %11, align 8
  tail call void %12(%"class.blink::Visitor"* %1, i8* nonnull %8, i8* nonnull %8, void (%"class.blink::Visitor"*, i8*)* nonnull @_ZN5blink10TraceTraitINS_15FetchHeaderListEE5TraceEPNS_7VisitorEPKv) #11
  br label %13

13:                                               ; preds = %2, %7
  %14 = getelementptr inbounds %"class.blink::FetchResponseData", %"class.blink::FetchResponseData"* %0, i64 0, i32 8
  %15 = bitcast %"class.blink::Member.16"* %14 to i64*
  %16 = load atomic i64, i64* %15 monotonic, align 8
  %17 = icmp eq i64 %16, 0
  br i1 %17, label %24, label %18

18:                                               ; preds = %13
  %19 = inttoptr i64 %16 to i8*
  %20 = bitcast %"class.blink::Visitor"* %1 to void (%"class.blink::Visitor"*, i8*, i8*, void (%"class.blink::Visitor"*, i8*)*)***
  %21 = load void (%"class.blink::Visitor"*, i8*, i8*, void (%"class.blink::Visitor"*, i8*)*)**, void (%"class.blink::Visitor"*, i8*, i8*, void (%"class.blink::Visitor"*, i8*)*)*** %20, align 8
  %22 = getelementptr inbounds void (%"class.blink::Visitor"*, i8*, i8*, void (%"class.blink::Visitor"*, i8*)*)*, void (%"class.blink::Visitor"*, i8*, i8*, void (%"class.blink::Visitor"*, i8*)*)** %21, i64 5
  %23 = load void (%"class.blink::Visitor"*, i8*, i8*, void (%"class.blink::Visitor"*, i8*)*)*, void (%"class.blink::Visitor"*, i8*, i8*, void (%"class.blink::Visitor"*, i8*)*)** %22, align 8
  tail call void %23(%"class.blink::Visitor"* %1, i8* nonnull %19, i8* nonnull %19, void (%"class.blink::Visitor"*, i8*)* nonnull @_ZN5blink10TraceTraitINS_17FetchResponseDataEE5TraceEPNS_7VisitorEPKv) #11
  br label %24

24:                                               ; preds = %13, %18
  %25 = getelementptr inbounds %"class.blink::FetchResponseData", %"class.blink::FetchResponseData"* %0, i64 0, i32 9
  %26 = bitcast %"class.blink::Member.18"* %25 to i64*
  %27 = load atomic i64, i64* %26 monotonic, align 8
  %28 = icmp eq i64 %27, 0
  br i1 %28, label %35, label %29

29:                                               ; preds = %24
  %30 = inttoptr i64 %27 to i8*
  %31 = bitcast %"class.blink::Visitor"* %1 to void (%"class.blink::Visitor"*, i8*, i8*, void (%"class.blink::Visitor"*, i8*)*)***
  %32 = load void (%"class.blink::Visitor"*, i8*, i8*, void (%"class.blink::Visitor"*, i8*)*)**, void (%"class.blink::Visitor"*, i8*, i8*, void (%"class.blink::Visitor"*, i8*)*)*** %31, align 8
  %33 = getelementptr inbounds void (%"class.blink::Visitor"*, i8*, i8*, void (%"class.blink::Visitor"*, i8*)*)*, void (%"class.blink::Visitor"*, i8*, i8*, void (%"class.blink::Visitor"*, i8*)*)** %32, i64 5
  %34 = load void (%"class.blink::Visitor"*, i8*, i8*, void (%"class.blink::Visitor"*, i8*)*)*, void (%"class.blink::Visitor"*, i8*, i8*, void (%"class.blink::Visitor"*, i8*)*)** %33, align 8
  tail call void %34(%"class.blink::Visitor"* %1, i8* nonnull %30, i8* nonnull %30, void (%"class.blink::Visitor"*, i8*)* nonnull @_ZN5blink10TraceTraitINS_16BodyStreamBufferEE5TraceEPNS_7VisitorEPKv) #11
  br label %35

35:                                               ; preds = %24, %29
  ret void
}

declare void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"*) local_unnamed_addr #2

; Function Attrs: nounwind readnone speculatable
declare { i33, i1 } @llvm.sadd.with.overflow.i33(i33, i33) #5

; Function Attrs: cold noreturn nounwind
declare void @llvm.trap() #6

declare void @_ZN3WTF6StringC1EPKcm(%"class.WTF::String"*, i8*, i64) unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden i64 @_ZN3WTF18PartitionAllocator13QuantizedSizeINS_6StringEEEmm(i64) local_unnamed_addr #0 comdat align 2 {
  %2 = alloca %"class.logging::CheckOpResult", align 8
  %3 = alloca %"class.logging::CheckOpResult", align 8
  %4 = alloca %"class.logging::CheckError", align 8
  %5 = bitcast %"class.logging::CheckOpResult"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %5) #11
  %6 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %3, i64 0, i32 0
  store i8* inttoptr (i64 -6148914691236517206 to i8*), i8** %6, align 8
  %7 = bitcast %"class.logging::CheckOpResult"* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %7)
  %8 = icmp ugt i64 %0, 268173312
  br i1 %8, label %10, label %9

9:                                                ; preds = %1
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %7)
  store i8* null, i8** %6, align 8
  br label %19

10:                                               ; preds = %1
  %11 = tail call i8* @_ZN7logging15CheckOpValueStrEm(i64 %0) #11
  %12 = tail call i8* @_ZN7logging15CheckOpValueStrEm(i64 268173312) #11
  call void @_ZN7logging13CheckOpResultC1EPKcPcS3_(%"class.logging::CheckOpResult"* nonnull %2, i8* getelementptr inbounds ([44 x i8], [44 x i8]* @.str.3, i64 0, i64 0), i8* %11, i8* %12) #11
  %13 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %2, i64 0, i32 0
  %14 = load i8*, i8** %13, align 8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %7)
  store i8* %14, i8** %6, align 8
  %15 = icmp eq i8* %14, null
  br i1 %15, label %19, label %16

16:                                               ; preds = %10
  %17 = bitcast %"class.logging::CheckError"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %17) #11
  call void @_ZN7logging10CheckError7CheckOpEPKciPNS_13CheckOpResultE(%"class.logging::CheckError"* nonnull sret %4, i8* getelementptr inbounds ([78 x i8], [78 x i8]* @.str.4, i64 0, i64 0), i32 31, %"class.logging::CheckOpResult"* nonnull %3) #11
  %18 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %4) #11
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %4) #11
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %17) #11
  br label %19

19:                                               ; preds = %9, %10, %16
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %5) #11
  %20 = shl i64 %0, 3
  %21 = call i64 @_ZN3WTF10Partitions23BufferPotentialCapacityEm(i64 %20) #11
  ret i64 %21
}

declare void @_ZN7logging10CheckError7CheckOpEPKciPNS_13CheckOpResultE(%"class.logging::CheckError"* sret, i8*, i32, %"class.logging::CheckOpResult"*) local_unnamed_addr #2

declare dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"*) local_unnamed_addr #2

; Function Attrs: nounwind
declare void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"*) unnamed_addr #4

declare i64 @_ZN3WTF10Partitions23BufferPotentialCapacityEm(i64) local_unnamed_addr #2

declare i8* @_ZN7logging15CheckOpValueStrEm(i64) local_unnamed_addr #2

declare void @_ZN7logging13CheckOpResultC1EPKcPcS3_(%"class.logging::CheckOpResult"*, i8*, i8*, i8*) unnamed_addr #2

declare i8* @_ZN3WTF18PartitionAllocator15AllocateBackingEmPKc(i64, i8*) local_unnamed_addr #2

; Function Attrs: noinline nounwind ssp uwtable
define linkonce_odr hidden void @_ZN3WTF6VectorINS_6StringELj0ENS_18PartitionAllocatorEE14AppendSlowCaseIS1_EEvOT_(%"class.WTF::Vector.379"*, %"class.WTF::String"* dereferenceable(8)) local_unnamed_addr #7 comdat align 2 {
  %3 = getelementptr inbounds %"class.WTF::Vector.379", %"class.WTF::Vector.379"* %0, i64 0, i32 0, i32 0, i32 2
  %4 = load i32, i32* %3, align 4
  %5 = add i32 %4, 1
  %6 = getelementptr inbounds %"class.WTF::Vector.379", %"class.WTF::Vector.379"* %0, i64 0, i32 0, i32 0, i32 0
  %7 = load %"class.WTF::String"*, %"class.WTF::String"** %6, align 8
  %8 = icmp ugt %"class.WTF::String"* %7, %1
  br i1 %8, label %13, label %9

9:                                                ; preds = %2
  %10 = zext i32 %4 to i64
  %11 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %7, i64 %10
  %12 = icmp ugt %"class.WTF::String"* %11, %1
  br i1 %12, label %54, label %13

13:                                               ; preds = %9, %2
  %14 = getelementptr inbounds %"class.WTF::Vector.379", %"class.WTF::Vector.379"* %0, i64 0, i32 0, i32 0, i32 1
  %15 = load i32, i32* %14, align 8
  %16 = lshr i32 %15, 2
  %17 = add i32 %15, 1
  %18 = add i32 %17, %16
  %19 = icmp ugt i32 %18, 4
  %20 = select i1 %19, i32 %18, i32 4
  %21 = icmp ugt i32 %20, %5
  %22 = select i1 %21, i32 %20, i32 %5
  %23 = icmp ult i32 %15, %22
  br i1 %23, label %24, label %99, !prof !3

24:                                               ; preds = %13
  %25 = icmp eq %"class.WTF::String"* %7, null
  %26 = zext i32 %22 to i64
  %27 = tail call i64 @_ZN3WTF18PartitionAllocator13QuantizedSizeINS_6StringEEEmm(i64 %26) #11
  %28 = tail call i8* @_ZN3WTF18PartitionAllocator15AllocateBackingEmPKc(i64 %27, i8* getelementptr inbounds ([59 x i8], [59 x i8]* @__PRETTY_FUNCTION__._ZN3WTF21GetStringWithTypeNameINS_6StringEEEPKcv, i64 0, i64 0)) #11
  br i1 %25, label %29, label %35

29:                                               ; preds = %24
  %30 = ptrtoint i8* %28 to i64
  %31 = bitcast %"class.WTF::Vector.379"* %0 to i64*
  store atomic i64 %30, i64* %31 monotonic, align 8
  %32 = lshr i64 %27, 3
  %33 = trunc i64 %32 to i32
  store i32 %33, i32* %14, align 8
  %34 = bitcast i8* %28 to %"class.WTF::String"*
  br label %99

35:                                               ; preds = %24
  %36 = lshr i64 %27, 3
  %37 = ptrtoint i8* %28 to i64
  %38 = load %"class.WTF::String"*, %"class.WTF::String"** %6, align 8
  %39 = icmp ne i8* %28, null
  %40 = icmp ne %"class.WTF::String"* %38, null
  %41 = and i1 %39, %40
  %42 = bitcast %"class.WTF::String"* %38 to i8*
  br i1 %41, label %43, label %49, !prof !3

43:                                               ; preds = %35
  %44 = load i32, i32* %3, align 4
  %45 = zext i32 %44 to i64
  %46 = shl nuw nsw i64 %45, 3
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %28, i8* nonnull align 8 %42, i64 %46, i1 false) #11
  %47 = bitcast %"class.WTF::Vector.379"* %0 to i8**
  %48 = load i8*, i8** %47, align 8
  br label %49

49:                                               ; preds = %43, %35
  %50 = phi i8* [ %48, %43 ], [ %42, %35 ]
  tail call void @_ZN3WTF18PartitionAllocator11FreeBackingEPv(i8* %50) #11
  %51 = bitcast %"class.WTF::Vector.379"* %0 to i64*
  store atomic i64 %37, i64* %51 monotonic, align 8
  %52 = trunc i64 %36 to i32
  store i32 %52, i32* %14, align 8
  %53 = bitcast i8* %28 to %"class.WTF::String"*
  br label %99

54:                                               ; preds = %9
  %55 = ptrtoint %"class.WTF::String"* %1 to i64
  %56 = ptrtoint %"class.WTF::String"* %7 to i64
  %57 = sub i64 %55, %56
  %58 = ashr exact i64 %57, 3
  %59 = getelementptr inbounds %"class.WTF::Vector.379", %"class.WTF::Vector.379"* %0, i64 0, i32 0, i32 0, i32 1
  %60 = load i32, i32* %59, align 8
  %61 = lshr i32 %60, 2
  %62 = add i32 %60, 1
  %63 = add i32 %62, %61
  %64 = icmp ugt i32 %63, 4
  %65 = select i1 %64, i32 %63, i32 4
  %66 = icmp ugt i32 %65, %5
  %67 = select i1 %66, i32 %65, i32 %5
  %68 = icmp ult i32 %60, %67
  br i1 %68, label %69, label %96, !prof !3

69:                                               ; preds = %54
  %70 = icmp eq %"class.WTF::String"* %7, null
  %71 = zext i32 %67 to i64
  %72 = tail call i64 @_ZN3WTF18PartitionAllocator13QuantizedSizeINS_6StringEEEmm(i64 %71) #11
  %73 = tail call i8* @_ZN3WTF18PartitionAllocator15AllocateBackingEmPKc(i64 %72, i8* getelementptr inbounds ([59 x i8], [59 x i8]* @__PRETTY_FUNCTION__._ZN3WTF21GetStringWithTypeNameINS_6StringEEEPKcv, i64 0, i64 0)) #11
  %74 = ptrtoint i8* %73 to i64
  br i1 %70, label %75, label %77

75:                                               ; preds = %69
  %76 = bitcast %"class.WTF::Vector.379"* %0 to i64*
  store atomic i64 %74, i64* %76 monotonic, align 8
  br label %92

77:                                               ; preds = %69
  %78 = load %"class.WTF::String"*, %"class.WTF::String"** %6, align 8
  %79 = icmp ne i8* %73, null
  %80 = icmp ne %"class.WTF::String"* %78, null
  %81 = and i1 %79, %80
  %82 = bitcast %"class.WTF::String"* %78 to i8*
  br i1 %81, label %83, label %89, !prof !3

83:                                               ; preds = %77
  %84 = load i32, i32* %3, align 4
  %85 = zext i32 %84 to i64
  %86 = shl nuw nsw i64 %85, 3
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %73, i8* nonnull align 8 %82, i64 %86, i1 false) #11
  %87 = bitcast %"class.WTF::Vector.379"* %0 to i8**
  %88 = load i8*, i8** %87, align 8
  br label %89

89:                                               ; preds = %83, %77
  %90 = phi i8* [ %88, %83 ], [ %82, %77 ]
  tail call void @_ZN3WTF18PartitionAllocator11FreeBackingEPv(i8* %90) #11
  %91 = bitcast %"class.WTF::Vector.379"* %0 to i64*
  store atomic i64 %74, i64* %91 monotonic, align 8
  br label %92

92:                                               ; preds = %89, %75
  %93 = lshr i64 %72, 3
  %94 = trunc i64 %93 to i32
  store i32 %94, i32* %59, align 8
  %95 = bitcast i8* %73 to %"class.WTF::String"*
  br label %96

96:                                               ; preds = %92, %54
  %97 = phi %"class.WTF::String"* [ %7, %54 ], [ %95, %92 ]
  %98 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %97, i64 %58
  br label %99

99:                                               ; preds = %49, %29, %13, %96
  %100 = phi %"class.WTF::String"* [ %97, %96 ], [ %7, %13 ], [ %34, %29 ], [ %53, %49 ]
  %101 = phi %"class.WTF::String"* [ %98, %96 ], [ %1, %13 ], [ %1, %29 ], [ %1, %49 ]
  %102 = load i32, i32* %3, align 4
  %103 = zext i32 %102 to i64
  %104 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %100, i64 %103
  %105 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %101, i64 0, i32 0, i32 0
  %106 = bitcast %"class.WTF::String"* %101 to i64*
  %107 = load i64, i64* %106, align 8
  %108 = bitcast %"class.WTF::String"* %104 to i64*
  store i64 %107, i64* %108, align 8
  store %"class.WTF::StringImpl"* null, %"class.WTF::StringImpl"** %105, align 8
  %109 = load i32, i32* %3, align 4
  %110 = add i32 %109, 1
  store i32 %110, i32* %3, align 4
  ret void
}

declare void @_ZN3WTF18PartitionAllocator11FreeBackingEPv(i8*) local_unnamed_addr #2

; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(i8*) local_unnamed_addr #8

; Function Attrs: nounwind
declare void @_ZN7network5mojom5blink13ParsedHeadersD1Ev(%"class.network::mojom::blink::ParsedHeaders"*) unnamed_addr #4

declare void @_ZN3WTF12AtomicStringC2EPKhm(%"class.WTF::AtomicString"*, i8*, i64) unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden { %"struct.WTF::KeyValuePair.378"*, i8 } @_ZN3WTF9HashTableINS_6StringENS_12KeyValuePairIS1_S1_EENS_24KeyValuePairKeyExtractorENS_10StringHashENS_18HashMapValueTraitsINS_10HashTraitsIS1_EES8_EES8_NS_18PartitionAllocatorEE6insertINS_17HashMapTranslatorIS9_S5_SA_EERKS1_SG_EENS_18HashTableAddResultISB_S3_EEOT0_OT1_(%"class.WTF::HashTable.375"*, %"class.WTF::String"* dereferenceable(8), %"class.WTF::String"* dereferenceable(8)) local_unnamed_addr #0 comdat align 2 {
  %4 = getelementptr inbounds %"class.WTF::HashTable.375", %"class.WTF::HashTable.375"* %0, i64 0, i32 0
  %5 = load %"struct.WTF::KeyValuePair.378"*, %"struct.WTF::KeyValuePair.378"** %4, align 8
  %6 = icmp eq %"struct.WTF::KeyValuePair.378"* %5, null
  br i1 %6, label %7, label %10

7:                                                ; preds = %3
  %8 = tail call %"struct.WTF::KeyValuePair.378"* @_ZN3WTF9HashTableINS_6StringENS_12KeyValuePairIS1_S1_EENS_24KeyValuePairKeyExtractorENS_10StringHashENS_18HashMapValueTraitsINS_10HashTraitsIS1_EES8_EES8_NS_18PartitionAllocatorEE6ExpandEPS3_(%"class.WTF::HashTable.375"* %0, %"struct.WTF::KeyValuePair.378"* null)
  %9 = load %"struct.WTF::KeyValuePair.378"*, %"struct.WTF::KeyValuePair.378"** %4, align 8
  br label %10

10:                                               ; preds = %3, %7
  %11 = phi %"struct.WTF::KeyValuePair.378"* [ %5, %3 ], [ %9, %7 ]
  %12 = getelementptr inbounds %"class.WTF::HashTable.375", %"class.WTF::HashTable.375"* %0, i64 0, i32 1
  %13 = load i32, i32* %12, align 8
  %14 = add i32 %13, -1
  %15 = zext i32 %14 to i64
  %16 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %1, i64 0, i32 0, i32 0
  %17 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %16, align 8
  %18 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %17, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %19 = load atomic i32, i32* %18 monotonic, align 4
  %20 = lshr i32 %19, 8
  %21 = icmp eq i32 %20, 0
  br i1 %21, label %22, label %24

22:                                               ; preds = %10
  %23 = tail call i32 @_ZNK3WTF10StringImpl12HashSlowCaseEv(%"class.WTF::StringImpl"* %17) #11
  br label %24

24:                                               ; preds = %10, %22
  %25 = phi i32 [ %23, %22 ], [ %20, %10 ]
  %26 = and i32 %25, %14
  %27 = zext i32 %26 to i64
  %28 = getelementptr inbounds %"struct.WTF::KeyValuePair.378", %"struct.WTF::KeyValuePair.378"* %11, i64 %27
  %29 = getelementptr inbounds %"struct.WTF::KeyValuePair.378", %"struct.WTF::KeyValuePair.378"* %28, i64 0, i32 0, i32 0, i32 0
  %30 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %29, align 8
  %31 = icmp eq %"class.WTF::StringImpl"* %30, null
  br i1 %31, label %78, label %32

32:                                               ; preds = %24
  %33 = xor i32 %25, -1
  %34 = lshr i32 %25, 23
  %35 = add i32 %34, %33
  %36 = shl i32 %35, 12
  %37 = xor i32 %36, %35
  %38 = lshr i32 %37, 7
  %39 = xor i32 %38, %37
  %40 = shl i32 %39, 2
  %41 = xor i32 %40, %39
  %42 = lshr i32 %41, 20
  %43 = xor i32 %42, %41
  %44 = or i32 %43, 1
  %45 = zext i32 %44 to i64
  br label %46

46:                                               ; preds = %32, %58
  %47 = phi %"struct.WTF::KeyValuePair.378"* [ %28, %32 ], [ %64, %58 ]
  %48 = phi %"struct.WTF::KeyValuePair.378"* [ null, %32 ], [ %59, %58 ]
  %49 = phi i64 [ %27, %32 ], [ %63, %58 ]
  %50 = phi i64 [ 0, %32 ], [ %61, %58 ]
  %51 = bitcast %"struct.WTF::KeyValuePair.378"* %47 to i8**
  %52 = load i8*, i8** %51, align 8
  %53 = icmp eq i8* %52, inttoptr (i64 -1 to i8*)
  br i1 %53, label %58, label %54

54:                                               ; preds = %46
  %55 = bitcast i8* %52 to %"class.WTF::StringImpl"*
  %56 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %16, align 8
  %57 = tail call zeroext i1 @_ZN3WTF12EqualNonNullEPKNS_10StringImplES2_(%"class.WTF::StringImpl"* %55, %"class.WTF::StringImpl"* %56) #11
  br i1 %57, label %91, label %58

58:                                               ; preds = %46, %54
  %59 = phi %"struct.WTF::KeyValuePair.378"* [ %48, %54 ], [ %47, %46 ]
  %60 = icmp eq i64 %50, 0
  %61 = select i1 %60, i64 %45, i64 %50
  %62 = add i64 %61, %49
  %63 = and i64 %62, %15
  %64 = getelementptr inbounds %"struct.WTF::KeyValuePair.378", %"struct.WTF::KeyValuePair.378"* %11, i64 %63
  %65 = getelementptr inbounds %"struct.WTF::KeyValuePair.378", %"struct.WTF::KeyValuePair.378"* %64, i64 0, i32 0, i32 0, i32 0
  %66 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %65, align 8
  %67 = icmp eq %"class.WTF::StringImpl"* %66, null
  br i1 %67, label %68, label %46

68:                                               ; preds = %58
  %69 = icmp eq %"struct.WTF::KeyValuePair.378"* %59, null
  br i1 %69, label %78, label %70

70:                                               ; preds = %68
  %71 = bitcast %"struct.WTF::KeyValuePair.378"* %59 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %71, i8 0, i64 16, i1 false) #11
  %72 = getelementptr inbounds %"class.WTF::HashTable.375", %"class.WTF::HashTable.375"* %0, i64 0, i32 3
  %73 = load i32, i32* %72, align 8
  %74 = add i32 %73, 2147483647
  %75 = and i32 %74, 2147483647
  %76 = and i32 %73, -2147483648
  %77 = or i32 %75, %76
  store i32 %77, i32* %72, align 8
  br label %78

78:                                               ; preds = %24, %68, %70
  %79 = phi %"struct.WTF::KeyValuePair.378"* [ %59, %70 ], [ %64, %68 ], [ %28, %24 ]
  tail call void @_ZN3WTF17HashMapTranslatorINS_18HashMapValueTraitsINS_10HashTraitsINS_6StringEEES4_EENS_10StringHashENS_18PartitionAllocatorEE9TranslateINS_12KeyValuePairIS3_S3_EERKS3_SD_EEvRT_OT0_OT1_(%"struct.WTF::KeyValuePair.378"* dereferenceable(16) %79, %"class.WTF::String"* dereferenceable(8) %1, %"class.WTF::String"* dereferenceable(8) %2)
  %80 = getelementptr inbounds %"class.WTF::HashTable.375", %"class.WTF::HashTable.375"* %0, i64 0, i32 2
  %81 = load i32, i32* %80, align 4
  %82 = add i32 %81, 1
  store i32 %82, i32* %80, align 4
  %83 = getelementptr inbounds %"class.WTF::HashTable.375", %"class.WTF::HashTable.375"* %0, i64 0, i32 3
  %84 = load i32, i32* %83, align 8
  %85 = add i32 %84, %82
  %86 = shl i32 %85, 1
  %87 = load i32, i32* %12, align 8
  %88 = icmp ult i32 %86, %87
  br i1 %88, label %91, label %89

89:                                               ; preds = %78
  %90 = tail call %"struct.WTF::KeyValuePair.378"* @_ZN3WTF9HashTableINS_6StringENS_12KeyValuePairIS1_S1_EENS_24KeyValuePairKeyExtractorENS_10StringHashENS_18HashMapValueTraitsINS_10HashTraitsIS1_EES8_EES8_NS_18PartitionAllocatorEE6ExpandEPS3_(%"class.WTF::HashTable.375"* %0, %"struct.WTF::KeyValuePair.378"* %79)
  br label %91

91:                                               ; preds = %54, %78, %89
  %92 = phi i8 [ 1, %78 ], [ 1, %89 ], [ 0, %54 ]
  %93 = phi %"struct.WTF::KeyValuePair.378"* [ %79, %78 ], [ %90, %89 ], [ %47, %54 ]
  %94 = insertvalue { %"struct.WTF::KeyValuePair.378"*, i8 } undef, %"struct.WTF::KeyValuePair.378"* %93, 0
  %95 = insertvalue { %"struct.WTF::KeyValuePair.378"*, i8 } %94, i8 %92, 1
  ret { %"struct.WTF::KeyValuePair.378"*, i8 } %95
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden %"struct.WTF::KeyValuePair.378"* @_ZN3WTF9HashTableINS_6StringENS_12KeyValuePairIS1_S1_EENS_24KeyValuePairKeyExtractorENS_10StringHashENS_18HashMapValueTraitsINS_10HashTraitsIS1_EES8_EES8_NS_18PartitionAllocatorEE6ExpandEPS3_(%"class.WTF::HashTable.375"*, %"struct.WTF::KeyValuePair.378"*) local_unnamed_addr #0 comdat align 2 {
  %3 = alloca %"class.logging::CheckOpResult", align 8
  %4 = alloca %"class.logging::CheckOpResult", align 8
  %5 = alloca %"class.logging::CheckError", align 8
  %6 = getelementptr inbounds %"class.WTF::HashTable.375", %"class.WTF::HashTable.375"* %0, i64 0, i32 1
  %7 = load i32, i32* %6, align 8
  %8 = icmp eq i32 %7, 0
  br i1 %8, label %31, label %9

9:                                                ; preds = %2
  %10 = getelementptr inbounds %"class.WTF::HashTable.375", %"class.WTF::HashTable.375"* %0, i64 0, i32 2
  %11 = load i32, i32* %10, align 4
  %12 = mul i32 %11, 6
  %13 = shl i32 %7, 1
  %14 = icmp ult i32 %12, %13
  br i1 %14, label %31, label %15

15:                                               ; preds = %9
  %16 = bitcast %"class.logging::CheckOpResult"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %16) #11
  %17 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %4, i64 0, i32 0
  store i8* inttoptr (i64 -6148914691236517206 to i8*), i8** %17, align 8
  %18 = bitcast %"class.logging::CheckOpResult"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %18)
  %19 = icmp ugt i32 %13, %7
  br i1 %19, label %20, label %21

20:                                               ; preds = %15
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %18)
  store i8* null, i8** %17, align 8
  br label %30

21:                                               ; preds = %15
  %22 = tail call i8* @_ZN7logging15CheckOpValueStrEj(i32 %13) #11
  %23 = tail call i8* @_ZN7logging15CheckOpValueStrEj(i32 %7) #11
  call void @_ZN7logging13CheckOpResultC1EPKcPcS3_(%"class.logging::CheckOpResult"* nonnull %3, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.9, i64 0, i64 0), i8* %22, i8* %23) #11
  %24 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %3, i64 0, i32 0
  %25 = load i8*, i8** %24, align 8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %18)
  store i8* %25, i8** %17, align 8
  %26 = icmp eq i8* %25, null
  br i1 %26, label %30, label %27

27:                                               ; preds = %21
  %28 = bitcast %"class.logging::CheckError"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %28) #11
  call void @_ZN7logging10CheckError7CheckOpEPKciPNS_13CheckOpResultE(%"class.logging::CheckError"* nonnull sret %5, i8* getelementptr inbounds ([59 x i8], [59 x i8]* @.str.10, i64 0, i64 0), i32 1783, %"class.logging::CheckOpResult"* nonnull %4) #11
  %29 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %5) #11
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %5) #11
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %28) #11
  br label %30

30:                                               ; preds = %20, %21, %27
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %16) #11
  br label %31

31:                                               ; preds = %9, %2, %30
  %32 = phi i32 [ %13, %30 ], [ 8, %2 ], [ %7, %9 ]
  %33 = zext i32 %32 to i64
  %34 = shl nuw nsw i64 %33, 4
  %35 = call i8* @_ZN3WTF18PartitionAllocator15AllocateBackingEmPKc(i64 %34, i8* getelementptr inbounds ([91 x i8], [91 x i8]* @__PRETTY_FUNCTION__._ZN3WTF21GetStringWithTypeNameINS_12KeyValuePairINS_6StringES2_EEEEPKcv, i64 0, i64 0)) #11
  call void @llvm.memset.p0i8.i64(i8* align 1 %35, i8 0, i64 %34, i1 false) #11
  %36 = bitcast i8* %35 to %"struct.WTF::KeyValuePair.378"*
  %37 = call %"struct.WTF::KeyValuePair.378"* @_ZN3WTF9HashTableINS_6StringENS_12KeyValuePairIS1_S1_EENS_24KeyValuePairKeyExtractorENS_10StringHashENS_18HashMapValueTraitsINS_10HashTraitsIS1_EES8_EES8_NS_18PartitionAllocatorEE8RehashToEPS3_jSC_(%"class.WTF::HashTable.375"* %0, %"struct.WTF::KeyValuePair.378"* %36, i32 %32, %"struct.WTF::KeyValuePair.378"* %1) #11
  ret %"struct.WTF::KeyValuePair.378"* %37
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN3WTF17HashMapTranslatorINS_18HashMapValueTraitsINS_10HashTraitsINS_6StringEEES4_EENS_10StringHashENS_18PartitionAllocatorEE9TranslateINS_12KeyValuePairIS3_S3_EERKS3_SD_EEvRT_OT0_OT1_(%"struct.WTF::KeyValuePair.378"* dereferenceable(16), %"class.WTF::String"* dereferenceable(8), %"class.WTF::String"* dereferenceable(8)) local_unnamed_addr #0 comdat align 2 {
  %4 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %1, i64 0, i32 0, i32 0
  %5 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %4, align 8
  %6 = icmp eq %"class.WTF::StringImpl"* %5, null
  br i1 %6, label %24, label %7

7:                                                ; preds = %3
  %8 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %5, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %9 = load atomic i32, i32* %8 monotonic, align 4
  %10 = and i32 %9, 2
  %11 = icmp eq i32 %10, 0
  br i1 %11, label %12, label %24

12:                                               ; preds = %7
  %13 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %5, i64 0, i32 0
  %14 = load i32, i32* %13, align 4
  %15 = zext i32 %14 to i33
  %16 = tail call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %15, i33 1) #11
  %17 = extractvalue { i33, i1 } %16, 1
  %18 = extractvalue { i33, i1 } %16, 0
  %19 = icmp slt i33 %18, 0
  %20 = or i1 %17, %19
  br i1 %20, label %21, label %22, !prof !2

21:                                               ; preds = %12
  tail call void @llvm.trap() #11
  unreachable

22:                                               ; preds = %12
  %23 = trunc i33 %18 to i32
  store i32 %23, i32* %13, align 4
  br label %24

24:                                               ; preds = %22, %7, %3
  %25 = ptrtoint %"class.WTF::StringImpl"* %5 to i64
  %26 = bitcast %"struct.WTF::KeyValuePair.378"* %0 to i64*
  %27 = getelementptr inbounds %"struct.WTF::KeyValuePair.378", %"struct.WTF::KeyValuePair.378"* %0, i64 0, i32 0, i32 0, i32 0
  %28 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %27, align 8
  store i64 %25, i64* %26, align 8
  %29 = icmp eq %"class.WTF::StringImpl"* %28, null
  br i1 %29, label %43, label %30

30:                                               ; preds = %24
  %31 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %28, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %32 = load atomic i32, i32* %31 monotonic, align 4
  %33 = and i32 %32, 2
  %34 = icmp eq i32 %33, 0
  %35 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %28, i64 0, i32 0
  %36 = load i32, i32* %35, align 4
  br i1 %34, label %37, label %39

37:                                               ; preds = %30
  %38 = add i32 %36, -1
  store i32 %38, i32* %35, align 4
  br label %39

39:                                               ; preds = %37, %30
  %40 = phi i32 [ %38, %37 ], [ %36, %30 ]
  %41 = icmp eq i32 %40, 0
  br i1 %41, label %42, label %43

42:                                               ; preds = %39
  tail call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %28) #11
  br label %43

43:                                               ; preds = %24, %39, %42
  %44 = getelementptr inbounds %"struct.WTF::KeyValuePair.378", %"struct.WTF::KeyValuePair.378"* %0, i64 0, i32 1
  %45 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %2, i64 0, i32 0, i32 0
  %46 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %45, align 8
  %47 = icmp eq %"class.WTF::StringImpl"* %46, null
  br i1 %47, label %65, label %48

48:                                               ; preds = %43
  %49 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %46, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %50 = load atomic i32, i32* %49 monotonic, align 4
  %51 = and i32 %50, 2
  %52 = icmp eq i32 %51, 0
  br i1 %52, label %53, label %65

53:                                               ; preds = %48
  %54 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %46, i64 0, i32 0
  %55 = load i32, i32* %54, align 4
  %56 = zext i32 %55 to i33
  %57 = tail call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %56, i33 1) #11
  %58 = extractvalue { i33, i1 } %57, 1
  %59 = extractvalue { i33, i1 } %57, 0
  %60 = icmp slt i33 %59, 0
  %61 = or i1 %58, %60
  br i1 %61, label %62, label %63, !prof !2

62:                                               ; preds = %53
  tail call void @llvm.trap() #11
  unreachable

63:                                               ; preds = %53
  %64 = trunc i33 %59 to i32
  store i32 %64, i32* %54, align 4
  br label %65

65:                                               ; preds = %63, %48, %43
  %66 = ptrtoint %"class.WTF::StringImpl"* %46 to i64
  %67 = bitcast %"class.WTF::String"* %44 to i64*
  %68 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %44, i64 0, i32 0, i32 0
  %69 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %68, align 8
  store i64 %66, i64* %67, align 8
  %70 = icmp eq %"class.WTF::StringImpl"* %69, null
  br i1 %70, label %84, label %71

71:                                               ; preds = %65
  %72 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %69, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %73 = load atomic i32, i32* %72 monotonic, align 4
  %74 = and i32 %73, 2
  %75 = icmp eq i32 %74, 0
  %76 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %69, i64 0, i32 0
  %77 = load i32, i32* %76, align 4
  br i1 %75, label %78, label %80

78:                                               ; preds = %71
  %79 = add i32 %77, -1
  store i32 %79, i32* %76, align 4
  br label %80

80:                                               ; preds = %78, %71
  %81 = phi i32 [ %79, %78 ], [ %77, %71 ]
  %82 = icmp eq i32 %81, 0
  br i1 %82, label %83, label %84

83:                                               ; preds = %80
  tail call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %69) #11
  br label %84

84:                                               ; preds = %65, %80, %83
  ret void
}

declare i8* @_ZN7logging15CheckOpValueStrEj(i32) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden %"struct.WTF::KeyValuePair.378"* @_ZN3WTF9HashTableINS_6StringENS_12KeyValuePairIS1_S1_EENS_24KeyValuePairKeyExtractorENS_10StringHashENS_18HashMapValueTraitsINS_10HashTraitsIS1_EES8_EES8_NS_18PartitionAllocatorEE8RehashToEPS3_jSC_(%"class.WTF::HashTable.375"*, %"struct.WTF::KeyValuePair.378"*, i32, %"struct.WTF::KeyValuePair.378"*) local_unnamed_addr #0 comdat align 2 {
  %5 = alloca %"class.WTF::HashTable.375", align 8
  %6 = bitcast %"class.WTF::HashTable.375"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %6) #11
  %7 = getelementptr inbounds %"class.WTF::HashTable.375", %"class.WTF::HashTable.375"* %5, i64 0, i32 0
  %8 = getelementptr inbounds %"class.WTF::HashTable.375", %"class.WTF::HashTable.375"* %5, i64 0, i32 1
  %9 = getelementptr inbounds %"class.WTF::HashTable.375", %"class.WTF::HashTable.375"* %5, i64 0, i32 2
  %10 = getelementptr inbounds %"class.WTF::HashTable.375", %"class.WTF::HashTable.375"* %5, i64 0, i32 3
  %11 = bitcast %"class.WTF::HashTable.375"* %5 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %11, i8 -86, i64 24, i1 false)
  store %"struct.WTF::KeyValuePair.378"* %1, %"struct.WTF::KeyValuePair.378"** %7, align 8
  store i32 %2, i32* %8, align 8
  store i32 0, i32* %9, align 4
  store i32 0, i32* %10, align 8
  %12 = getelementptr inbounds %"class.WTF::HashTable.375", %"class.WTF::HashTable.375"* %0, i64 0, i32 1
  %13 = load i32, i32* %12, align 8
  %14 = icmp eq i32 %13, 0
  %15 = getelementptr inbounds %"class.WTF::HashTable.375", %"class.WTF::HashTable.375"* %0, i64 0, i32 0
  br i1 %14, label %16, label %21

16:                                               ; preds = %4
  %17 = ptrtoint %"struct.WTF::KeyValuePair.378"* %1 to i64
  %18 = bitcast %"class.WTF::HashTable.375"* %0 to i64*
  %19 = load i64, i64* %18, align 8
  %20 = bitcast %"class.WTF::HashTable.375"* %5 to i64*
  br label %28

21:                                               ; preds = %4
  %22 = load %"struct.WTF::KeyValuePair.378"*, %"struct.WTF::KeyValuePair.378"** %15, align 8
  %23 = ptrtoint %"struct.WTF::KeyValuePair.378"* %22 to i64
  br label %42

24:                                               ; preds = %60
  %25 = bitcast %"class.WTF::HashTable.375"* %5 to i64*
  %26 = load i64, i64* %25, align 8
  %27 = bitcast %"class.WTF::HashTable.375"* %0 to i64*
  br label %28

28:                                               ; preds = %16, %24
  %29 = phi i64* [ %20, %16 ], [ %25, %24 ]
  %30 = phi i64* [ %18, %16 ], [ %27, %24 ]
  %31 = phi i64 [ %17, %16 ], [ %26, %24 ]
  %32 = phi i64 [ %19, %16 ], [ %61, %24 ]
  %33 = phi %"struct.WTF::KeyValuePair.378"* [ null, %16 ], [ %64, %24 ]
  %34 = phi i32 [ 0, %16 ], [ %62, %24 ]
  store atomic i64 %31, i64* %30 monotonic, align 8
  store i32 %2, i32* %12, align 8
  store i64 %32, i64* %29, align 8
  store i32 %34, i32* %8, align 8
  %35 = icmp eq i64 %32, 0
  br i1 %35, label %38, label %36

36:                                               ; preds = %28
  %37 = inttoptr i64 %32 to %"struct.WTF::KeyValuePair.378"*
  call void @_ZN3WTF9HashTableINS_6StringENS_12KeyValuePairIS1_S1_EENS_24KeyValuePairKeyExtractorENS_10StringHashENS_18HashMapValueTraitsINS_10HashTraitsIS1_EES8_EES8_NS_18PartitionAllocatorEE29DeleteAllBucketsAndDeallocateEPS3_j(%"struct.WTF::KeyValuePair.378"* nonnull %37, i32 %34) #11
  store atomic i64 0, i64* %29 monotonic, align 8
  store i32 0, i32* %8, align 8
  store i32 0, i32* %9, align 4
  br label %38

38:                                               ; preds = %28, %36
  %39 = getelementptr inbounds %"class.WTF::HashTable.375", %"class.WTF::HashTable.375"* %0, i64 0, i32 3
  %40 = load i32, i32* %39, align 8
  %41 = and i32 %40, -2147483648
  store i32 %41, i32* %39, align 8
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %6) #11
  ret %"struct.WTF::KeyValuePair.378"* %33

42:                                               ; preds = %21, %60
  %43 = phi i64 [ %61, %60 ], [ %23, %21 ]
  %44 = phi i32 [ %62, %60 ], [ %13, %21 ]
  %45 = phi %"struct.WTF::KeyValuePair.378"* [ %63, %60 ], [ %22, %21 ]
  %46 = phi %"struct.WTF::KeyValuePair.378"* [ %64, %60 ], [ null, %21 ]
  %47 = phi i32 [ %65, %60 ], [ 0, %21 ]
  %48 = zext i32 %47 to i64
  %49 = getelementptr inbounds %"struct.WTF::KeyValuePair.378", %"struct.WTF::KeyValuePair.378"* %45, i64 %48
  %50 = bitcast %"struct.WTF::KeyValuePair.378"* %49 to i64*
  %51 = load i64, i64* %50, align 8
  switch i64 %51, label %52 [
    i64 -1, label %60
    i64 0, label %60
  ]

52:                                               ; preds = %42
  %53 = call %"struct.WTF::KeyValuePair.378"* @_ZN3WTF9HashTableINS_6StringENS_12KeyValuePairIS1_S1_EENS_24KeyValuePairKeyExtractorENS_10StringHashENS_18HashMapValueTraitsINS_10HashTraitsIS1_EES8_EES8_NS_18PartitionAllocatorEE8ReinsertEOS3_(%"class.WTF::HashTable.375"* nonnull %5, %"struct.WTF::KeyValuePair.378"* dereferenceable(16) %49)
  %54 = load %"struct.WTF::KeyValuePair.378"*, %"struct.WTF::KeyValuePair.378"** %15, align 8
  %55 = getelementptr inbounds %"struct.WTF::KeyValuePair.378", %"struct.WTF::KeyValuePair.378"* %54, i64 %48
  %56 = icmp eq %"struct.WTF::KeyValuePair.378"* %55, %3
  %57 = select i1 %56, %"struct.WTF::KeyValuePair.378"* %53, %"struct.WTF::KeyValuePair.378"* %46
  %58 = load i32, i32* %12, align 8
  %59 = ptrtoint %"struct.WTF::KeyValuePair.378"* %54 to i64
  br label %60

60:                                               ; preds = %42, %42, %52
  %61 = phi i64 [ %43, %42 ], [ %59, %52 ], [ %43, %42 ]
  %62 = phi i32 [ %44, %42 ], [ %58, %52 ], [ %44, %42 ]
  %63 = phi %"struct.WTF::KeyValuePair.378"* [ %45, %42 ], [ %54, %52 ], [ %45, %42 ]
  %64 = phi %"struct.WTF::KeyValuePair.378"* [ %46, %42 ], [ %57, %52 ], [ %46, %42 ]
  %65 = add i32 %47, 1
  %66 = icmp eq i32 %65, %62
  br i1 %66, label %24, label %42
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden %"struct.WTF::KeyValuePair.378"* @_ZN3WTF9HashTableINS_6StringENS_12KeyValuePairIS1_S1_EENS_24KeyValuePairKeyExtractorENS_10StringHashENS_18HashMapValueTraitsINS_10HashTraitsIS1_EES8_EES8_NS_18PartitionAllocatorEE8ReinsertEOS3_(%"class.WTF::HashTable.375"*, %"struct.WTF::KeyValuePair.378"* dereferenceable(16)) local_unnamed_addr #0 comdat align 2 {
  %3 = getelementptr inbounds %"struct.WTF::KeyValuePair.378", %"struct.WTF::KeyValuePair.378"* %1, i64 0, i32 0
  %4 = tail call { %"struct.WTF::KeyValuePair.378"*, i8 } @_ZN3WTF9HashTableINS_6StringENS_12KeyValuePairIS1_S1_EENS_24KeyValuePairKeyExtractorENS_10StringHashENS_18HashMapValueTraitsINS_10HashTraitsIS1_EES8_EES8_NS_18PartitionAllocatorEE16LookupForWritingERKS1_(%"class.WTF::HashTable.375"* %0, %"class.WTF::String"* dereferenceable(8) %3)
  %5 = extractvalue { %"struct.WTF::KeyValuePair.378"*, i8 } %4, 0
  %6 = getelementptr inbounds %"struct.WTF::KeyValuePair.378", %"struct.WTF::KeyValuePair.378"* %5, i64 0, i32 1, i32 0, i32 0
  %7 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %6, align 8
  %8 = icmp eq %"class.WTF::StringImpl"* %7, null
  br i1 %8, label %22, label %9

9:                                                ; preds = %2
  %10 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %7, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %11 = load atomic i32, i32* %10 monotonic, align 4
  %12 = and i32 %11, 2
  %13 = icmp eq i32 %12, 0
  %14 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %7, i64 0, i32 0
  %15 = load i32, i32* %14, align 4
  br i1 %13, label %16, label %18

16:                                               ; preds = %9
  %17 = add i32 %15, -1
  store i32 %17, i32* %14, align 4
  br label %18

18:                                               ; preds = %16, %9
  %19 = phi i32 [ %17, %16 ], [ %15, %9 ]
  %20 = icmp eq i32 %19, 0
  br i1 %20, label %21, label %22

21:                                               ; preds = %18
  tail call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %7) #11
  br label %22

22:                                               ; preds = %21, %18, %2
  %23 = getelementptr inbounds %"struct.WTF::KeyValuePair.378", %"struct.WTF::KeyValuePair.378"* %5, i64 0, i32 0, i32 0, i32 0
  %24 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %23, align 8
  %25 = icmp eq %"class.WTF::StringImpl"* %24, null
  br i1 %25, label %39, label %26

26:                                               ; preds = %22
  %27 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %24, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %28 = load atomic i32, i32* %27 monotonic, align 4
  %29 = and i32 %28, 2
  %30 = icmp eq i32 %29, 0
  %31 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %24, i64 0, i32 0
  %32 = load i32, i32* %31, align 4
  br i1 %30, label %33, label %35

33:                                               ; preds = %26
  %34 = add i32 %32, -1
  store i32 %34, i32* %31, align 4
  br label %35

35:                                               ; preds = %33, %26
  %36 = phi i32 [ %34, %33 ], [ %32, %26 ]
  %37 = icmp eq i32 %36, 0
  br i1 %37, label %38, label %39

38:                                               ; preds = %35
  tail call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %24) #11
  br label %39

39:                                               ; preds = %22, %35, %38
  %40 = getelementptr inbounds %"struct.WTF::KeyValuePair.378", %"struct.WTF::KeyValuePair.378"* %1, i64 0, i32 0, i32 0, i32 0
  %41 = bitcast %"struct.WTF::KeyValuePair.378"* %1 to i64*
  %42 = load i64, i64* %41, align 8
  %43 = bitcast %"struct.WTF::KeyValuePair.378"* %5 to i64*
  store i64 %42, i64* %43, align 8
  store %"class.WTF::StringImpl"* null, %"class.WTF::StringImpl"** %40, align 8
  %44 = getelementptr inbounds %"struct.WTF::KeyValuePair.378", %"struct.WTF::KeyValuePair.378"* %5, i64 0, i32 1
  %45 = getelementptr inbounds %"struct.WTF::KeyValuePair.378", %"struct.WTF::KeyValuePair.378"* %1, i64 0, i32 1
  %46 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %45, i64 0, i32 0, i32 0
  %47 = bitcast %"class.WTF::String"* %45 to i64*
  %48 = load i64, i64* %47, align 8
  %49 = bitcast %"class.WTF::String"* %44 to i64*
  store i64 %48, i64* %49, align 8
  store %"class.WTF::StringImpl"* null, %"class.WTF::StringImpl"** %46, align 8
  ret %"struct.WTF::KeyValuePair.378"* %5
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden { %"struct.WTF::KeyValuePair.378"*, i8 } @_ZN3WTF9HashTableINS_6StringENS_12KeyValuePairIS1_S1_EENS_24KeyValuePairKeyExtractorENS_10StringHashENS_18HashMapValueTraitsINS_10HashTraitsIS1_EES8_EES8_NS_18PartitionAllocatorEE16LookupForWritingERKS1_(%"class.WTF::HashTable.375"*, %"class.WTF::String"* dereferenceable(8)) local_unnamed_addr #0 comdat align 2 {
  %3 = getelementptr inbounds %"class.WTF::HashTable.375", %"class.WTF::HashTable.375"* %0, i64 0, i32 0
  %4 = load %"struct.WTF::KeyValuePair.378"*, %"struct.WTF::KeyValuePair.378"** %3, align 8
  %5 = getelementptr inbounds %"class.WTF::HashTable.375", %"class.WTF::HashTable.375"* %0, i64 0, i32 1
  %6 = load i32, i32* %5, align 8
  %7 = add i32 %6, -1
  %8 = zext i32 %7 to i64
  %9 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %1, i64 0, i32 0, i32 0
  %10 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %9, align 8
  %11 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %10, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %12 = load atomic i32, i32* %11 monotonic, align 4
  %13 = lshr i32 %12, 8
  %14 = icmp eq i32 %13, 0
  br i1 %14, label %15, label %17

15:                                               ; preds = %2
  %16 = tail call i32 @_ZNK3WTF10StringImpl12HashSlowCaseEv(%"class.WTF::StringImpl"* %10) #11
  br label %17

17:                                               ; preds = %15, %2
  %18 = phi i32 [ %16, %15 ], [ %13, %2 ]
  %19 = and i32 %18, %7
  %20 = zext i32 %19 to i64
  %21 = getelementptr inbounds %"struct.WTF::KeyValuePair.378", %"struct.WTF::KeyValuePair.378"* %4, i64 %20
  %22 = ptrtoint %"struct.WTF::KeyValuePair.378"* %21 to i64
  %23 = getelementptr inbounds %"struct.WTF::KeyValuePair.378", %"struct.WTF::KeyValuePair.378"* %21, i64 0, i32 0, i32 0, i32 0
  %24 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %23, align 8
  %25 = icmp eq %"class.WTF::StringImpl"* %24, null
  br i1 %25, label %42, label %26

26:                                               ; preds = %17
  %27 = xor i32 %18, -1
  %28 = lshr i32 %18, 23
  %29 = add i32 %28, %27
  %30 = shl i32 %29, 12
  %31 = xor i32 %30, %29
  %32 = lshr i32 %31, 7
  %33 = xor i32 %32, %31
  %34 = shl i32 %33, 2
  %35 = xor i32 %34, %33
  %36 = lshr i32 %35, 20
  %37 = xor i32 %36, %35
  %38 = or i32 %37, 1
  %39 = zext i32 %38 to i64
  br label %48

40:                                               ; preds = %61
  %41 = ptrtoint %"struct.WTF::KeyValuePair.378"* %67 to i64
  br label %42

42:                                               ; preds = %40, %17
  %43 = phi i64 [ %22, %17 ], [ %41, %40 ]
  %44 = phi %"struct.WTF::KeyValuePair.378"* [ null, %17 ], [ %62, %40 ]
  %45 = icmp eq %"struct.WTF::KeyValuePair.378"* %44, null
  %46 = ptrtoint %"struct.WTF::KeyValuePair.378"* %44 to i64
  %47 = select i1 %45, i64 %43, i64 %46
  br label %72

48:                                               ; preds = %61, %26
  %49 = phi %"struct.WTF::KeyValuePair.378"* [ null, %26 ], [ %62, %61 ]
  %50 = phi i64 [ %22, %26 ], [ %68, %61 ]
  %51 = phi %"struct.WTF::KeyValuePair.378"* [ %21, %26 ], [ %67, %61 ]
  %52 = phi i64 [ %20, %26 ], [ %66, %61 ]
  %53 = phi i64 [ 0, %26 ], [ %64, %61 ]
  %54 = bitcast %"struct.WTF::KeyValuePair.378"* %51 to i8**
  %55 = load i8*, i8** %54, align 8
  %56 = icmp eq i8* %55, inttoptr (i64 -1 to i8*)
  br i1 %56, label %61, label %57

57:                                               ; preds = %48
  %58 = bitcast i8* %55 to %"class.WTF::StringImpl"*
  %59 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %9, align 8
  %60 = tail call zeroext i1 @_ZN3WTF12EqualNonNullEPKNS_10StringImplES2_(%"class.WTF::StringImpl"* %58, %"class.WTF::StringImpl"* %59) #11
  br i1 %60, label %72, label %61

61:                                               ; preds = %57, %48
  %62 = phi %"struct.WTF::KeyValuePair.378"* [ %49, %57 ], [ %51, %48 ]
  %63 = icmp eq i64 %53, 0
  %64 = select i1 %63, i64 %39, i64 %53
  %65 = add i64 %64, %52
  %66 = and i64 %65, %8
  %67 = getelementptr inbounds %"struct.WTF::KeyValuePair.378", %"struct.WTF::KeyValuePair.378"* %4, i64 %66
  %68 = ptrtoint %"struct.WTF::KeyValuePair.378"* %67 to i64
  %69 = getelementptr inbounds %"struct.WTF::KeyValuePair.378", %"struct.WTF::KeyValuePair.378"* %67, i64 0, i32 0, i32 0, i32 0
  %70 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %69, align 8
  %71 = icmp eq %"class.WTF::StringImpl"* %70, null
  br i1 %71, label %40, label %48

72:                                               ; preds = %57, %42
  %73 = phi i64 [ %47, %42 ], [ %50, %57 ]
  %74 = phi i8 [ 0, %42 ], [ 1, %57 ]
  %75 = inttoptr i64 %73 to %"struct.WTF::KeyValuePair.378"*
  %76 = insertvalue { %"struct.WTF::KeyValuePair.378"*, i8 } undef, %"struct.WTF::KeyValuePair.378"* %75, 0
  %77 = insertvalue { %"struct.WTF::KeyValuePair.378"*, i8 } %76, i8 %74, 1
  ret { %"struct.WTF::KeyValuePair.378"*, i8 } %77
}

declare i32 @_ZNK3WTF10StringImpl12HashSlowCaseEv(%"class.WTF::StringImpl"*) local_unnamed_addr #2

declare zeroext i1 @_ZN3WTF12EqualNonNullEPKNS_10StringImplES2_(%"class.WTF::StringImpl"*, %"class.WTF::StringImpl"*) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN3WTF9HashTableINS_6StringENS_12KeyValuePairIS1_S1_EENS_24KeyValuePairKeyExtractorENS_10StringHashENS_18HashMapValueTraitsINS_10HashTraitsIS1_EES8_EES8_NS_18PartitionAllocatorEE29DeleteAllBucketsAndDeallocateEPS3_j(%"struct.WTF::KeyValuePair.378"*, i32) local_unnamed_addr #0 comdat align 2 {
  %3 = icmp eq i32 %1, 0
  br i1 %3, label %6, label %4

4:                                                ; preds = %2
  %5 = zext i32 %1 to i64
  br label %8

6:                                                ; preds = %48, %2
  %7 = bitcast %"struct.WTF::KeyValuePair.378"* %0 to i8*
  tail call void @_ZN3WTF18PartitionAllocator11FreeBackingEPv(i8* %7) #11
  ret void

8:                                                ; preds = %48, %4
  %9 = phi i64 [ 0, %4 ], [ %49, %48 ]
  %10 = getelementptr inbounds %"struct.WTF::KeyValuePair.378", %"struct.WTF::KeyValuePair.378"* %0, i64 %9
  %11 = bitcast %"struct.WTF::KeyValuePair.378"* %10 to i8**
  %12 = load i8*, i8** %11, align 8
  %13 = icmp eq i8* %12, inttoptr (i64 -1 to i8*)
  br i1 %13, label %48, label %14

14:                                               ; preds = %8
  %15 = getelementptr inbounds %"struct.WTF::KeyValuePair.378", %"struct.WTF::KeyValuePair.378"* %0, i64 %9, i32 1, i32 0, i32 0
  %16 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %15, align 8
  %17 = icmp eq %"class.WTF::StringImpl"* %16, null
  br i1 %17, label %31, label %18

18:                                               ; preds = %14
  %19 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %16, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %20 = load atomic i32, i32* %19 monotonic, align 4
  %21 = and i32 %20, 2
  %22 = icmp eq i32 %21, 0
  %23 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %16, i64 0, i32 0
  %24 = load i32, i32* %23, align 4
  br i1 %22, label %25, label %27

25:                                               ; preds = %18
  %26 = add i32 %24, -1
  store i32 %26, i32* %23, align 4
  br label %27

27:                                               ; preds = %25, %18
  %28 = phi i32 [ %26, %25 ], [ %24, %18 ]
  %29 = icmp eq i32 %28, 0
  br i1 %29, label %30, label %31

30:                                               ; preds = %27
  tail call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %16) #11
  br label %31

31:                                               ; preds = %30, %27, %14
  %32 = getelementptr inbounds %"struct.WTF::KeyValuePair.378", %"struct.WTF::KeyValuePair.378"* %10, i64 0, i32 0, i32 0, i32 0
  %33 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %32, align 8
  %34 = icmp eq %"class.WTF::StringImpl"* %33, null
  br i1 %34, label %48, label %35

35:                                               ; preds = %31
  %36 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %33, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %37 = load atomic i32, i32* %36 monotonic, align 4
  %38 = and i32 %37, 2
  %39 = icmp eq i32 %38, 0
  %40 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %33, i64 0, i32 0
  %41 = load i32, i32* %40, align 4
  br i1 %39, label %42, label %44

42:                                               ; preds = %35
  %43 = add i32 %41, -1
  store i32 %43, i32* %40, align 4
  br label %44

44:                                               ; preds = %42, %35
  %45 = phi i32 [ %43, %42 ], [ %41, %35 ]
  %46 = icmp eq i32 %45, 0
  br i1 %46, label %47, label %48

47:                                               ; preds = %44
  tail call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %33) #11
  br label %48

48:                                               ; preds = %47, %44, %31, %8
  %49 = add nuw nsw i64 %9, 1
  %50 = icmp eq i64 %49, %5
  br i1 %50, label %6, label %8
}

declare zeroext i1 @_ZN5blink14MarkingVisitor16WriteBarrierSlowEPv(i8*) local_unnamed_addr #2

; Function Attrs: nounwind
declare void @_ZN5blink4KURLD1Ev(%"class.blink::KURL"*) unnamed_addr #4

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN3WTF6VectorIN5blink4KURLELj0ENS_18PartitionAllocatorEE16ReallocateBufferEj(%"class.WTF::Vector"*, i32) local_unnamed_addr #0 comdat align 2 {
  %3 = icmp eq i32 %1, 0
  br i1 %3, label %4, label %22

4:                                                ; preds = %2
  %5 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %0, i64 0, i32 0, i32 0, i32 0
  %6 = load %"class.blink::KURL"*, %"class.blink::KURL"** %5, align 8
  %7 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %0, i64 0, i32 0, i32 0, i32 2
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  %10 = getelementptr inbounds %"class.blink::KURL", %"class.blink::KURL"* %6, i64 %9
  %11 = bitcast %"class.WTF::Vector"* %0 to i64*
  store atomic i64 0, i64* %11 monotonic, align 8
  %12 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %0, i64 0, i32 0, i32 0, i32 1
  store i32 0, i32* %12, align 8
  %13 = icmp eq i32 %8, 0
  br i1 %13, label %20, label %14

14:                                               ; preds = %4, %14
  %15 = phi %"class.blink::KURL"* [ %18, %14 ], [ %6, %4 ]
  %16 = phi %"class.blink::KURL"* [ %17, %14 ], [ null, %4 ]
  tail call void @_ZN5blink4KURLC1ERKS0_(%"class.blink::KURL"* %16, %"class.blink::KURL"* dereferenceable(112) %15) #11
  tail call void @_ZN5blink4KURLD1Ev(%"class.blink::KURL"* %15) #11
  %17 = getelementptr inbounds %"class.blink::KURL", %"class.blink::KURL"* %16, i64 1
  %18 = getelementptr inbounds %"class.blink::KURL", %"class.blink::KURL"* %15, i64 1
  %19 = icmp eq %"class.blink::KURL"* %18, %10
  br i1 %19, label %20, label %14

20:                                               ; preds = %14, %4
  %21 = getelementptr inbounds %"class.blink::KURL", %"class.blink::KURL"* %6, i64 0, i32 0
  tail call void @_ZN3WTF18PartitionAllocator11FreeBackingEPv(i8* %21) #11
  br label %51

22:                                               ; preds = %2
  %23 = zext i32 %1 to i64
  %24 = tail call i64 @_ZN3WTF18PartitionAllocator13QuantizedSizeIN5blink4KURLEEEmm(i64 %23) #11
  %25 = tail call i8* @_ZN3WTF18PartitionAllocator15AllocateBackingEmPKc(i64 %24, i8* getelementptr inbounds ([59 x i8], [59 x i8]* @__PRETTY_FUNCTION__._ZN3WTF21GetStringWithTypeNameIN5blink4KURLEEEPKcv, i64 0, i64 0)) #11
  %26 = udiv i64 %24, 112
  %27 = ptrtoint i8* %25 to i64
  %28 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %0, i64 0, i32 0, i32 0, i32 0
  %29 = load %"class.blink::KURL"*, %"class.blink::KURL"** %28, align 8
  %30 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %0, i64 0, i32 0, i32 0, i32 2
  %31 = load i32, i32* %30, align 4
  %32 = zext i32 %31 to i64
  %33 = getelementptr inbounds %"class.blink::KURL", %"class.blink::KURL"* %29, i64 %32
  %34 = icmp eq i32 %31, 0
  br i1 %34, label %45, label %35

35:                                               ; preds = %22
  %36 = bitcast i8* %25 to %"class.blink::KURL"*
  br label %37

37:                                               ; preds = %35, %37
  %38 = phi %"class.blink::KURL"* [ %41, %37 ], [ %29, %35 ]
  %39 = phi %"class.blink::KURL"* [ %40, %37 ], [ %36, %35 ]
  tail call void @_ZN5blink4KURLC1ERKS0_(%"class.blink::KURL"* %39, %"class.blink::KURL"* dereferenceable(112) %38) #11
  tail call void @_ZN5blink4KURLD1Ev(%"class.blink::KURL"* %38) #11
  %40 = getelementptr inbounds %"class.blink::KURL", %"class.blink::KURL"* %39, i64 1
  %41 = getelementptr inbounds %"class.blink::KURL", %"class.blink::KURL"* %38, i64 1
  %42 = icmp eq %"class.blink::KURL"* %41, %33
  br i1 %42, label %43, label %37

43:                                               ; preds = %37
  %44 = load %"class.blink::KURL"*, %"class.blink::KURL"** %28, align 8
  br label %45

45:                                               ; preds = %43, %22
  %46 = phi %"class.blink::KURL"* [ %44, %43 ], [ %29, %22 ]
  %47 = getelementptr inbounds %"class.blink::KURL", %"class.blink::KURL"* %46, i64 0, i32 0
  tail call void @_ZN3WTF18PartitionAllocator11FreeBackingEPv(i8* %47) #11
  %48 = bitcast %"class.WTF::Vector"* %0 to i64*
  store atomic i64 %27, i64* %48 monotonic, align 8
  %49 = trunc i64 %26 to i32
  %50 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %0, i64 0, i32 0, i32 0, i32 1
  store i32 %49, i32* %50, align 8
  br label %51

51:                                               ; preds = %45, %20
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden i64 @_ZN3WTF18PartitionAllocator13QuantizedSizeIN5blink4KURLEEEmm(i64) local_unnamed_addr #0 comdat align 2 {
  %2 = alloca %"class.logging::CheckOpResult", align 8
  %3 = alloca %"class.logging::CheckOpResult", align 8
  %4 = alloca %"class.logging::CheckError", align 8
  %5 = bitcast %"class.logging::CheckOpResult"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %5) #11
  %6 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %3, i64 0, i32 0
  store i8* inttoptr (i64 -6148914691236517206 to i8*), i8** %6, align 8
  %7 = bitcast %"class.logging::CheckOpResult"* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %7)
  %8 = icmp ugt i64 %0, 19155236
  br i1 %8, label %10, label %9

9:                                                ; preds = %1
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %7)
  store i8* null, i8** %6, align 8
  br label %19

10:                                               ; preds = %1
  %11 = tail call i8* @_ZN7logging15CheckOpValueStrEm(i64 %0) #11
  %12 = tail call i8* @_ZN7logging15CheckOpValueStrEm(i64 19155236) #11
  call void @_ZN7logging13CheckOpResultC1EPKcPcS3_(%"class.logging::CheckOpResult"* nonnull %2, i8* getelementptr inbounds ([44 x i8], [44 x i8]* @.str.3, i64 0, i64 0), i8* %11, i8* %12) #11
  %13 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %2, i64 0, i32 0
  %14 = load i8*, i8** %13, align 8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %7)
  store i8* %14, i8** %6, align 8
  %15 = icmp eq i8* %14, null
  br i1 %15, label %19, label %16

16:                                               ; preds = %10
  %17 = bitcast %"class.logging::CheckError"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %17) #11
  call void @_ZN7logging10CheckError7CheckOpEPKciPNS_13CheckOpResultE(%"class.logging::CheckError"* nonnull sret %4, i8* getelementptr inbounds ([78 x i8], [78 x i8]* @.str.4, i64 0, i64 0), i32 31, %"class.logging::CheckOpResult"* nonnull %3) #11
  %18 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %4) #11
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %4) #11
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %17) #11
  br label %19

19:                                               ; preds = %9, %10, %16
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %5) #11
  %20 = mul i64 %0, 112
  %21 = call i64 @_ZN3WTF10Partitions23BufferPotentialCapacityEm(i64 %20) #11
  ret i64 %21
}

declare void @_ZN5blink4KURLC1ERKS0_(%"class.blink::KURL"*, %"class.blink::KURL"* dereferenceable(112)) unnamed_addr #2

declare dereferenceable(112) %"class.blink::KURL"* @_ZN5blink4KURLaSERKS0_(%"class.blink::KURL"*, %"class.blink::KURL"* dereferenceable(112)) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__16__treeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEN5blink17CompareIgnoreCaseENS4_IS6_EEE14__assign_multiINS_21__tree_const_iteratorIS6_PNS_11__tree_nodeIS6_PvEElEEEEvT_SI_(%"class.std::__1::__tree.279"*, %"class.std::__1::__tree_end_node"*, %"class.std::__1::__tree_end_node"*) local_unnamed_addr #0 comdat align 2 {
  %4 = getelementptr inbounds %"class.std::__1::__tree.279", %"class.std::__1::__tree.279"* %0, i64 0, i32 2, i32 0, i32 0
  %5 = load i64, i64* %4, align 8
  %6 = icmp eq i64 %5, 0
  br i1 %6, label %229, label %7

7:                                                ; preds = %3
  %8 = getelementptr inbounds %"class.std::__1::__tree.279", %"class.std::__1::__tree.279"* %0, i64 0, i32 0
  %9 = bitcast %"class.std::__1::__tree.279"* %0 to %"class.std::__1::__tree_node"**
  %10 = load %"class.std::__1::__tree_node"*, %"class.std::__1::__tree_node"** %9, align 8
  %11 = getelementptr inbounds %"class.std::__1::__tree.279", %"class.std::__1::__tree.279"* %0, i64 0, i32 1, i32 0, i32 0
  store %"class.std::__1::__tree_end_node"* %11, %"class.std::__1::__tree_end_node"** %8, align 8
  %12 = getelementptr inbounds %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_end_node"* %11, i64 0, i32 0
  %13 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %12, align 8
  %14 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %13, i64 0, i32 2
  store %"class.std::__1::__tree_end_node"* null, %"class.std::__1::__tree_end_node"** %14, align 8
  %15 = getelementptr inbounds %"class.std::__1::__tree_node", %"class.std::__1::__tree_node"* %10, i64 0, i32 0, i32 1
  %16 = bitcast %"class.std::__1::__tree_end_node"* %11 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %16, i8 0, i64 16, i1 false) #11
  %17 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %15, align 8
  %18 = icmp eq %"class.std::__1::__tree_node_base"* %17, null
  %19 = bitcast %"class.std::__1::__tree_node_base"* %17 to %"class.std::__1::__tree_node"*
  %20 = select i1 %18, %"class.std::__1::__tree_node"* %10, %"class.std::__1::__tree_node"* %19
  %21 = icmp eq %"class.std::__1::__tree_node"* %20, null
  br i1 %21, label %22, label %23

22:                                               ; preds = %7
  tail call void @_ZNSt3__16__treeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEN5blink17CompareIgnoreCaseENS4_IS6_EEE7destroyEPNS_11__tree_nodeIS6_PvEE(%"class.std::__1::__tree.279"* %0, %"class.std::__1::__tree_node"* %20) #11
  br label %229

23:                                               ; preds = %7
  %24 = getelementptr inbounds %"class.std::__1::__tree_node", %"class.std::__1::__tree_node"* %20, i64 0, i32 0, i32 2
  %25 = load %"class.std::__1::__tree_end_node"*, %"class.std::__1::__tree_end_node"** %24, align 8
  %26 = icmp eq %"class.std::__1::__tree_end_node"* %25, null
  br i1 %26, label %72, label %27

27:                                               ; preds = %23
  %28 = bitcast %"class.std::__1::__tree_node"* %20 to %"class.std::__1::__tree_node_base"*
  %29 = getelementptr inbounds %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_end_node"* %25, i64 0, i32 0
  %30 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %29, align 8
  %31 = icmp eq %"class.std::__1::__tree_node_base"* %30, %28
  br i1 %31, label %32, label %51

32:                                               ; preds = %27
  store %"class.std::__1::__tree_node_base"* null, %"class.std::__1::__tree_node_base"** %29, align 8
  %33 = bitcast %"class.std::__1::__tree_end_node"** %24 to %"class.std::__1::__tree_node"**
  %34 = load %"class.std::__1::__tree_node"*, %"class.std::__1::__tree_node"** %33, align 8
  %35 = getelementptr inbounds %"class.std::__1::__tree_node", %"class.std::__1::__tree_node"* %34, i64 0, i32 0, i32 1
  %36 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %35, align 8
  %37 = icmp eq %"class.std::__1::__tree_node_base"* %36, null
  br i1 %37, label %72, label %38

38:                                               ; preds = %32, %47
  %39 = phi %"class.std::__1::__tree_node_base"* [ %48, %47 ], [ %36, %32 ]
  %40 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %39, i64 0, i32 0, i32 0
  %41 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %40, align 8
  %42 = icmp eq %"class.std::__1::__tree_node_base"* %41, null
  br i1 %42, label %43, label %47

43:                                               ; preds = %38
  %44 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %39, i64 0, i32 1
  %45 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %44, align 8
  %46 = icmp eq %"class.std::__1::__tree_node_base"* %45, null
  br i1 %46, label %49, label %47

47:                                               ; preds = %43, %38
  %48 = phi %"class.std::__1::__tree_node_base"* [ %41, %38 ], [ %45, %43 ]
  br label %38

49:                                               ; preds = %43
  %50 = bitcast %"class.std::__1::__tree_node_base"* %39 to %"class.std::__1::__tree_node"*
  br label %72

51:                                               ; preds = %27
  %52 = getelementptr inbounds %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_end_node"* %25, i64 1, i32 0
  store %"class.std::__1::__tree_node_base"* null, %"class.std::__1::__tree_node_base"** %52, align 8
  %53 = load %"class.std::__1::__tree_end_node"*, %"class.std::__1::__tree_end_node"** %24, align 8
  %54 = getelementptr inbounds %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_end_node"* %53, i64 0, i32 0
  %55 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %54, align 8
  %56 = icmp eq %"class.std::__1::__tree_node_base"* %55, null
  br i1 %56, label %57, label %59

57:                                               ; preds = %51
  %58 = bitcast %"class.std::__1::__tree_end_node"* %53 to %"class.std::__1::__tree_node"*
  br label %72

59:                                               ; preds = %51, %68
  %60 = phi %"class.std::__1::__tree_node_base"* [ %69, %68 ], [ %55, %51 ]
  %61 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %60, i64 0, i32 0, i32 0
  %62 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %61, align 8
  %63 = icmp eq %"class.std::__1::__tree_node_base"* %62, null
  br i1 %63, label %64, label %68

64:                                               ; preds = %59
  %65 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %60, i64 0, i32 1
  %66 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %65, align 8
  %67 = icmp eq %"class.std::__1::__tree_node_base"* %66, null
  br i1 %67, label %70, label %68

68:                                               ; preds = %64, %59
  %69 = phi %"class.std::__1::__tree_node_base"* [ %62, %59 ], [ %66, %64 ]
  br label %59

70:                                               ; preds = %64
  %71 = bitcast %"class.std::__1::__tree_node_base"* %60 to %"class.std::__1::__tree_node"*
  br label %72

72:                                               ; preds = %23, %32, %49, %57, %70
  %73 = phi %"class.std::__1::__tree_node"* [ %50, %49 ], [ %58, %57 ], [ %71, %70 ], [ null, %23 ], [ %34, %32 ]
  %74 = ptrtoint %"class.std::__1::__tree_node"* %73 to i64
  %75 = icmp eq %"class.std::__1::__tree_end_node"* %1, %2
  br i1 %75, label %209, label %76

76:                                               ; preds = %72, %201
  %77 = phi %"class.std::__1::__tree_node"* [ %203, %201 ], [ %73, %72 ]
  %78 = phi i64 [ %173, %201 ], [ %74, %72 ]
  %79 = phi %"class.std::__1::__tree_node"* [ %77, %201 ], [ %20, %72 ]
  %80 = phi %"class.std::__1::__tree_end_node"* [ %202, %201 ], [ %1, %72 ]
  %81 = getelementptr inbounds %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_end_node"* %80, i64 4
  %82 = bitcast %"class.std::__1::__tree_end_node"* %81 to %"class.std::__1::basic_string"*
  %83 = getelementptr inbounds %"class.std::__1::__tree_node", %"class.std::__1::__tree_node"* %79, i64 0, i32 1
  %84 = icmp eq %"class.std::__1::basic_string"* %83, %82
  br i1 %84, label %116, label %85

85:                                               ; preds = %76
  %86 = bitcast %"class.std::__1::basic_string"* %83 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %87 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %86, i64 0, i32 1, i32 0
  %88 = load i8, i8* %87, align 1
  %89 = icmp slt i8 %88, 0
  %90 = bitcast %"class.std::__1::__tree_end_node"* %81 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %91 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %90, i64 0, i32 1, i32 0
  %92 = load i8, i8* %91, align 1
  %93 = icmp slt i8 %92, 0
  br i1 %89, label %105, label %94

94:                                               ; preds = %85
  br i1 %93, label %98, label %95

95:                                               ; preds = %94
  %96 = bitcast %"class.std::__1::basic_string"* %83 to i8*
  %97 = bitcast %"class.std::__1::__tree_end_node"* %81 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %96, i8* align 8 %97, i64 24, i1 false) #11
  br label %116

98:                                               ; preds = %94
  %99 = bitcast %"class.std::__1::__tree_end_node"* %81 to i8**
  %100 = load i8*, i8** %99, align 8
  %101 = getelementptr inbounds %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_end_node"* %80, i64 5
  %102 = bitcast %"class.std::__1::__tree_end_node"* %101 to i64*
  %103 = load i64, i64* %102, align 8
  %104 = tail call dereferenceable(24) %"class.std::__1::basic_string"* @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE17__assign_no_aliasILb1EEERS5_PKcm(%"class.std::__1::basic_string"* %83, i8* %100, i64 %103) #11
  br label %116

105:                                              ; preds = %85
  %106 = bitcast %"class.std::__1::__tree_end_node"* %81 to i8**
  %107 = load i8*, i8** %106, align 8
  %108 = getelementptr inbounds %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_end_node"* %80, i64 5
  %109 = bitcast %"class.std::__1::__tree_end_node"* %108 to i64*
  %110 = load i64, i64* %109, align 8
  %111 = bitcast %"class.std::__1::__tree_end_node"* %81 to i8*
  %112 = zext i8 %92 to i64
  %113 = select i1 %93, i8* %107, i8* %111
  %114 = select i1 %93, i64 %110, i64 %112
  %115 = tail call dereferenceable(24) %"class.std::__1::basic_string"* @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE17__assign_no_aliasILb0EEERS5_PKcm(%"class.std::__1::basic_string"* %83, i8* %113, i64 %114) #11
  br label %116

116:                                              ; preds = %76, %95, %98, %105
  %117 = tail call %"class.std::__1::__tree_end_node"* @_ZNSt3__16__treeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEN5blink17CompareIgnoreCaseENS4_IS6_EEE19__node_insert_multiEPNS_11__tree_nodeIS6_PvEE(%"class.std::__1::__tree.279"* %0, %"class.std::__1::__tree_node"* nonnull %79)
  %118 = icmp eq i64 %78, 0
  br i1 %118, label %172, label %119

119:                                              ; preds = %116
  %120 = inttoptr i64 %78 to %"class.std::__1::__tree_node"*
  %121 = getelementptr inbounds %"class.std::__1::__tree_node", %"class.std::__1::__tree_node"* %120, i64 0, i32 0, i32 2
  %122 = load %"class.std::__1::__tree_end_node"*, %"class.std::__1::__tree_end_node"** %121, align 8
  %123 = icmp eq %"class.std::__1::__tree_end_node"* %122, null
  br i1 %123, label %169, label %124

124:                                              ; preds = %119
  %125 = inttoptr i64 %78 to %"class.std::__1::__tree_node_base"*
  %126 = getelementptr inbounds %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_end_node"* %122, i64 0, i32 0
  %127 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %126, align 8
  %128 = icmp eq %"class.std::__1::__tree_node_base"* %127, %125
  br i1 %128, label %129, label %148

129:                                              ; preds = %124
  store %"class.std::__1::__tree_node_base"* null, %"class.std::__1::__tree_node_base"** %126, align 8
  %130 = bitcast %"class.std::__1::__tree_end_node"** %121 to %"class.std::__1::__tree_node"**
  %131 = load %"class.std::__1::__tree_node"*, %"class.std::__1::__tree_node"** %130, align 8
  %132 = getelementptr inbounds %"class.std::__1::__tree_node", %"class.std::__1::__tree_node"* %131, i64 0, i32 0, i32 1
  %133 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %132, align 8
  %134 = icmp eq %"class.std::__1::__tree_node_base"* %133, null
  br i1 %134, label %169, label %135

135:                                              ; preds = %129, %144
  %136 = phi %"class.std::__1::__tree_node_base"* [ %145, %144 ], [ %133, %129 ]
  %137 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %136, i64 0, i32 0, i32 0
  %138 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %137, align 8
  %139 = icmp eq %"class.std::__1::__tree_node_base"* %138, null
  br i1 %139, label %140, label %144

140:                                              ; preds = %135
  %141 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %136, i64 0, i32 1
  %142 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %141, align 8
  %143 = icmp eq %"class.std::__1::__tree_node_base"* %142, null
  br i1 %143, label %146, label %144

144:                                              ; preds = %140, %135
  %145 = phi %"class.std::__1::__tree_node_base"* [ %138, %135 ], [ %142, %140 ]
  br label %135

146:                                              ; preds = %140
  %147 = bitcast %"class.std::__1::__tree_node_base"* %136 to %"class.std::__1::__tree_node"*
  br label %169

148:                                              ; preds = %124
  %149 = getelementptr inbounds %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_end_node"* %122, i64 1, i32 0
  store %"class.std::__1::__tree_node_base"* null, %"class.std::__1::__tree_node_base"** %149, align 8
  %150 = load %"class.std::__1::__tree_end_node"*, %"class.std::__1::__tree_end_node"** %121, align 8
  %151 = getelementptr inbounds %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_end_node"* %150, i64 0, i32 0
  %152 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %151, align 8
  %153 = icmp eq %"class.std::__1::__tree_node_base"* %152, null
  br i1 %153, label %154, label %156

154:                                              ; preds = %148
  %155 = bitcast %"class.std::__1::__tree_end_node"* %150 to %"class.std::__1::__tree_node"*
  br label %169

156:                                              ; preds = %148, %165
  %157 = phi %"class.std::__1::__tree_node_base"* [ %166, %165 ], [ %152, %148 ]
  %158 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %157, i64 0, i32 0, i32 0
  %159 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %158, align 8
  %160 = icmp eq %"class.std::__1::__tree_node_base"* %159, null
  br i1 %160, label %161, label %165

161:                                              ; preds = %156
  %162 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %157, i64 0, i32 1
  %163 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %162, align 8
  %164 = icmp eq %"class.std::__1::__tree_node_base"* %163, null
  br i1 %164, label %167, label %165

165:                                              ; preds = %161, %156
  %166 = phi %"class.std::__1::__tree_node_base"* [ %159, %156 ], [ %163, %161 ]
  br label %156

167:                                              ; preds = %161
  %168 = bitcast %"class.std::__1::__tree_node_base"* %157 to %"class.std::__1::__tree_node"*
  br label %169

169:                                              ; preds = %167, %154, %146, %129, %119
  %170 = phi %"class.std::__1::__tree_node"* [ %147, %146 ], [ %155, %154 ], [ %168, %167 ], [ null, %119 ], [ %131, %129 ]
  %171 = ptrtoint %"class.std::__1::__tree_node"* %170 to i64
  br label %172

172:                                              ; preds = %116, %169
  %173 = phi i64 [ 0, %116 ], [ %171, %169 ]
  %174 = getelementptr inbounds %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_end_node"* %80, i64 1, i32 0
  %175 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %174, align 8
  %176 = icmp eq %"class.std::__1::__tree_node_base"* %175, null
  br i1 %176, label %177, label %185

177:                                              ; preds = %172
  %178 = bitcast %"class.std::__1::__tree_end_node"* %80 to %"class.std::__1::__tree_node_base"*
  %179 = getelementptr inbounds %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_end_node"* %80, i64 2
  %180 = bitcast %"class.std::__1::__tree_end_node"* %179 to %"class.std::__1::__tree_end_node"**
  %181 = load %"class.std::__1::__tree_end_node"*, %"class.std::__1::__tree_end_node"** %180, align 8
  %182 = getelementptr inbounds %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_end_node"* %181, i64 0, i32 0
  %183 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %182, align 8
  %184 = icmp eq %"class.std::__1::__tree_node_base"* %183, %178
  br i1 %184, label %201, label %192

185:                                              ; preds = %172, %185
  %186 = phi %"class.std::__1::__tree_node_base"* [ %188, %185 ], [ %175, %172 ]
  %187 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %186, i64 0, i32 0, i32 0
  %188 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %187, align 8
  %189 = icmp eq %"class.std::__1::__tree_node_base"* %188, null
  br i1 %189, label %190, label %185

190:                                              ; preds = %185
  %191 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %186, i64 0, i32 0
  br label %201

192:                                              ; preds = %177, %192
  %193 = phi %"class.std::__1::__tree_end_node"** [ %196, %192 ], [ %180, %177 ]
  %194 = bitcast %"class.std::__1::__tree_end_node"** %193 to %"class.std::__1::__tree_node_base"**
  %195 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %194, align 8
  %196 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %195, i64 0, i32 2
  %197 = load %"class.std::__1::__tree_end_node"*, %"class.std::__1::__tree_end_node"** %196, align 8
  %198 = getelementptr inbounds %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_end_node"* %197, i64 0, i32 0
  %199 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %198, align 8
  %200 = icmp eq %"class.std::__1::__tree_node_base"* %199, %195
  br i1 %200, label %201, label %192

201:                                              ; preds = %192, %177, %190
  %202 = phi %"class.std::__1::__tree_end_node"* [ %191, %190 ], [ %181, %177 ], [ %197, %192 ]
  %203 = inttoptr i64 %173 to %"class.std::__1::__tree_node"*
  %204 = icmp ne %"class.std::__1::__tree_node"* %77, null
  %205 = icmp ne %"class.std::__1::__tree_end_node"* %202, %2
  %206 = and i1 %205, %204
  br i1 %206, label %76, label %207

207:                                              ; preds = %201
  %208 = inttoptr i64 %173 to %"class.std::__1::__tree_node"*
  br label %209

209:                                              ; preds = %72, %207
  %210 = phi %"class.std::__1::__tree_node"* [ %73, %72 ], [ %208, %207 ]
  %211 = phi %"class.std::__1::__tree_end_node"* [ %1, %72 ], [ %202, %207 ]
  %212 = phi %"class.std::__1::__tree_node"* [ %20, %72 ], [ %77, %207 ]
  %213 = phi i64 [ %74, %72 ], [ %173, %207 ]
  tail call void @_ZNSt3__16__treeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEN5blink17CompareIgnoreCaseENS4_IS6_EEE7destroyEPNS_11__tree_nodeIS6_PvEE(%"class.std::__1::__tree.279"* %0, %"class.std::__1::__tree_node"* %212) #11
  %214 = icmp eq i64 %213, 0
  br i1 %214, label %229, label %215

215:                                              ; preds = %209
  %216 = getelementptr inbounds %"class.std::__1::__tree_node", %"class.std::__1::__tree_node"* %210, i64 0, i32 0, i32 2
  %217 = load %"class.std::__1::__tree_end_node"*, %"class.std::__1::__tree_end_node"** %216, align 8
  %218 = icmp eq %"class.std::__1::__tree_end_node"* %217, null
  br i1 %218, label %227, label %219

219:                                              ; preds = %215, %219
  %220 = phi %"class.std::__1::__tree_end_node"* [ %223, %219 ], [ %217, %215 ]
  %221 = getelementptr inbounds %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_end_node"* %220, i64 2
  %222 = bitcast %"class.std::__1::__tree_end_node"* %221 to %"class.std::__1::__tree_end_node"**
  %223 = load %"class.std::__1::__tree_end_node"*, %"class.std::__1::__tree_end_node"** %222, align 8
  %224 = icmp eq %"class.std::__1::__tree_end_node"* %223, null
  br i1 %224, label %225, label %219

225:                                              ; preds = %219
  %226 = bitcast %"class.std::__1::__tree_end_node"* %220 to %"class.std::__1::__tree_node"*
  br label %227

227:                                              ; preds = %225, %215
  %228 = phi %"class.std::__1::__tree_node"* [ %210, %215 ], [ %226, %225 ]
  tail call void @_ZNSt3__16__treeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEN5blink17CompareIgnoreCaseENS4_IS6_EEE7destroyEPNS_11__tree_nodeIS6_PvEE(%"class.std::__1::__tree.279"* %0, %"class.std::__1::__tree_node"* %228) #11
  br label %229

229:                                              ; preds = %22, %227, %209, %3
  %230 = phi %"class.std::__1::__tree_end_node"* [ %1, %3 ], [ %211, %209 ], [ %211, %227 ], [ %1, %22 ]
  %231 = icmp eq %"class.std::__1::__tree_end_node"* %230, %2
  br i1 %231, label %267, label %232

232:                                              ; preds = %229, %264
  %233 = phi %"class.std::__1::__tree_end_node"* [ %265, %264 ], [ %230, %229 ]
  %234 = getelementptr inbounds %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_end_node"* %233, i64 4
  %235 = bitcast %"class.std::__1::__tree_end_node"* %234 to %"class.std::__1::basic_string"*
  %236 = tail call %"class.std::__1::__tree_end_node"* @_ZNSt3__16__treeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEN5blink17CompareIgnoreCaseENS4_IS6_EEE15__emplace_multiIJRKS6_EEENS_15__tree_iteratorIS6_PNS_11__tree_nodeIS6_PvEElEEDpOT_(%"class.std::__1::__tree.279"* %0, %"class.std::__1::basic_string"* dereferenceable(24) %235) #11
  %237 = getelementptr inbounds %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_end_node"* %233, i64 1, i32 0
  %238 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %237, align 8
  %239 = icmp eq %"class.std::__1::__tree_node_base"* %238, null
  br i1 %239, label %240, label %248

240:                                              ; preds = %232
  %241 = bitcast %"class.std::__1::__tree_end_node"* %233 to %"class.std::__1::__tree_node_base"*
  %242 = getelementptr inbounds %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_end_node"* %233, i64 2
  %243 = bitcast %"class.std::__1::__tree_end_node"* %242 to %"class.std::__1::__tree_end_node"**
  %244 = load %"class.std::__1::__tree_end_node"*, %"class.std::__1::__tree_end_node"** %243, align 8
  %245 = getelementptr inbounds %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_end_node"* %244, i64 0, i32 0
  %246 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %245, align 8
  %247 = icmp eq %"class.std::__1::__tree_node_base"* %246, %241
  br i1 %247, label %264, label %255

248:                                              ; preds = %232, %248
  %249 = phi %"class.std::__1::__tree_node_base"* [ %251, %248 ], [ %238, %232 ]
  %250 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %249, i64 0, i32 0, i32 0
  %251 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %250, align 8
  %252 = icmp eq %"class.std::__1::__tree_node_base"* %251, null
  br i1 %252, label %253, label %248

253:                                              ; preds = %248
  %254 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %249, i64 0, i32 0
  br label %264

255:                                              ; preds = %240, %255
  %256 = phi %"class.std::__1::__tree_end_node"** [ %259, %255 ], [ %243, %240 ]
  %257 = bitcast %"class.std::__1::__tree_end_node"** %256 to %"class.std::__1::__tree_node_base"**
  %258 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %257, align 8
  %259 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %258, i64 0, i32 2
  %260 = load %"class.std::__1::__tree_end_node"*, %"class.std::__1::__tree_end_node"** %259, align 8
  %261 = getelementptr inbounds %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_end_node"* %260, i64 0, i32 0
  %262 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %261, align 8
  %263 = icmp eq %"class.std::__1::__tree_node_base"* %262, %258
  br i1 %263, label %264, label %255

264:                                              ; preds = %255, %240, %253
  %265 = phi %"class.std::__1::__tree_end_node"* [ %254, %253 ], [ %244, %240 ], [ %260, %255 ]
  %266 = icmp eq %"class.std::__1::__tree_end_node"* %265, %2
  br i1 %266, label %267, label %232

267:                                              ; preds = %264, %229
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden %"class.std::__1::__tree_end_node"* @_ZNSt3__16__treeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEN5blink17CompareIgnoreCaseENS4_IS6_EEE19__node_insert_multiEPNS_11__tree_nodeIS6_PvEE(%"class.std::__1::__tree.279"*, %"class.std::__1::__tree_node"*) local_unnamed_addr #0 comdat align 2 {
  %3 = getelementptr inbounds %"class.std::__1::__tree_node", %"class.std::__1::__tree_node"* %1, i64 0, i32 1
  %4 = getelementptr inbounds %"class.std::__1::__tree.279", %"class.std::__1::__tree.279"* %0, i64 0, i32 1, i32 0, i32 0
  %5 = bitcast %"class.std::__1::__tree_end_node"* %4 to %"class.std::__1::__tree_node"**
  %6 = load %"class.std::__1::__tree_node"*, %"class.std::__1::__tree_node"** %5, align 8
  %7 = icmp eq %"class.std::__1::__tree_node"* %6, null
  br i1 %7, label %55, label %8

8:                                                ; preds = %2
  %9 = bitcast %"class.std::__1::basic_string"* %3 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %10 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %9, i64 0, i32 1, i32 0
  %11 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %3, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %12 = bitcast %"class.std::__1::basic_string"* %3 to i8*
  %13 = getelementptr inbounds %"class.std::__1::__tree_node", %"class.std::__1::__tree_node"* %1, i64 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  br label %14

14:                                               ; preds = %52, %8
  %15 = phi %"class.std::__1::__tree_node"* [ %54, %52 ], [ %6, %8 ]
  %16 = getelementptr inbounds %"class.std::__1::__tree_node", %"class.std::__1::__tree_node"* %15, i64 0, i32 1
  %17 = load i8, i8* %10, align 1
  %18 = icmp slt i8 %17, 0
  %19 = load i8*, i8** %11, align 8
  %20 = select i1 %18, i8* %19, i8* %12
  %21 = load i64, i64* %13, align 8
  %22 = zext i8 %17 to i64
  %23 = select i1 %18, i64 %21, i64 %22
  %24 = bitcast %"class.std::__1::basic_string"* %16 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %25 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %24, i64 0, i32 1, i32 0
  %26 = load i8, i8* %25, align 1
  %27 = icmp slt i8 %26, 0
  %28 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %16, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %29 = load i8*, i8** %28, align 8
  %30 = bitcast %"class.std::__1::basic_string"* %16 to i8*
  %31 = select i1 %27, i8* %29, i8* %30
  %32 = getelementptr inbounds %"class.std::__1::__tree_node", %"class.std::__1::__tree_node"* %15, i64 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %33 = load i64, i64* %32, align 8
  %34 = zext i8 %26 to i64
  %35 = select i1 %27, i64 %33, i64 %34
  %36 = tail call i32 @_ZN4base27CompareCaseInsensitiveASCIIENS_16BasicStringPieceIcNSt3__111char_traitsIcEEEES4_(i8* %20, i64 %23, i8* %31, i64 %35) #11
  %37 = icmp slt i32 %36, 0
  br i1 %37, label %38, label %45

38:                                               ; preds = %14
  %39 = getelementptr inbounds %"class.std::__1::__tree_node", %"class.std::__1::__tree_node"* %15, i64 0, i32 0, i32 0, i32 0
  %40 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %39, align 8
  %41 = icmp eq %"class.std::__1::__tree_node_base"* %40, null
  br i1 %41, label %42, label %52

42:                                               ; preds = %38
  %43 = getelementptr inbounds %"class.std::__1::__tree_node", %"class.std::__1::__tree_node"* %15, i64 0, i32 0, i32 0, i32 0
  %44 = getelementptr inbounds %"class.std::__1::__tree_node", %"class.std::__1::__tree_node"* %15, i64 0, i32 0, i32 0
  br label %57

45:                                               ; preds = %14
  %46 = getelementptr inbounds %"class.std::__1::__tree_node", %"class.std::__1::__tree_node"* %15, i64 0, i32 0, i32 1
  %47 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %46, align 8
  %48 = icmp eq %"class.std::__1::__tree_node_base"* %47, null
  br i1 %48, label %49, label %52

49:                                               ; preds = %45
  %50 = getelementptr inbounds %"class.std::__1::__tree_node", %"class.std::__1::__tree_node"* %15, i64 0, i32 0, i32 1
  %51 = getelementptr inbounds %"class.std::__1::__tree_node", %"class.std::__1::__tree_node"* %15, i64 0, i32 0, i32 0
  br label %57

52:                                               ; preds = %45, %38
  %53 = phi %"class.std::__1::__tree_node_base"* [ %40, %38 ], [ %47, %45 ]
  %54 = bitcast %"class.std::__1::__tree_node_base"* %53 to %"class.std::__1::__tree_node"*
  br label %14

55:                                               ; preds = %2
  %56 = getelementptr inbounds %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_end_node"* %4, i64 0, i32 0
  br label %57

57:                                               ; preds = %42, %49, %55
  %58 = phi %"class.std::__1::__tree_end_node"* [ %4, %55 ], [ %44, %42 ], [ %51, %49 ]
  %59 = phi %"class.std::__1::__tree_node_base"** [ %56, %55 ], [ %43, %42 ], [ %50, %49 ]
  %60 = bitcast %"class.std::__1::__tree_node"* %1 to %"class.std::__1::__tree_node_base"*
  %61 = getelementptr inbounds %"class.std::__1::__tree_node", %"class.std::__1::__tree_node"* %1, i64 0, i32 0, i32 2
  %62 = bitcast %"class.std::__1::__tree_node"* %1 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %62, i8 0, i64 16, i1 false) #11
  store %"class.std::__1::__tree_end_node"* %58, %"class.std::__1::__tree_end_node"** %61, align 8
  %63 = bitcast %"class.std::__1::__tree_node_base"** %59 to %"class.std::__1::__tree_node"**
  store %"class.std::__1::__tree_node"* %1, %"class.std::__1::__tree_node"** %63, align 8
  %64 = getelementptr inbounds %"class.std::__1::__tree.279", %"class.std::__1::__tree.279"* %0, i64 0, i32 0
  %65 = load %"class.std::__1::__tree_end_node"*, %"class.std::__1::__tree_end_node"** %64, align 8
  %66 = getelementptr inbounds %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_end_node"* %65, i64 0, i32 0
  %67 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %66, align 8
  %68 = icmp eq %"class.std::__1::__tree_node_base"* %67, null
  br i1 %68, label %73, label %69

69:                                               ; preds = %57
  %70 = ptrtoint %"class.std::__1::__tree_node_base"* %67 to i64
  %71 = bitcast %"class.std::__1::__tree.279"* %0 to i64*
  store i64 %70, i64* %71, align 8
  %72 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %59, align 8
  br label %73

73:                                               ; preds = %57, %69
  %74 = phi %"class.std::__1::__tree_node_base"* [ %60, %57 ], [ %72, %69 ]
  %75 = getelementptr inbounds %"class.std::__1::__tree.279", %"class.std::__1::__tree.279"* %0, i64 0, i32 1, i32 0, i32 0, i32 0
  %76 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %75, align 8
  tail call void @_ZNSt3__127__tree_balance_after_insertIPNS_16__tree_node_baseIPvEEEEvT_S5_(%"class.std::__1::__tree_node_base"* %76, %"class.std::__1::__tree_node_base"* %74) #11
  %77 = getelementptr inbounds %"class.std::__1::__tree.279", %"class.std::__1::__tree.279"* %0, i64 0, i32 2, i32 0, i32 0
  %78 = load i64, i64* %77, align 8
  %79 = add i64 %78, 1
  store i64 %79, i64* %77, align 8
  %80 = getelementptr inbounds %"class.std::__1::__tree_node", %"class.std::__1::__tree_node"* %1, i64 0, i32 0, i32 0
  ret %"class.std::__1::__tree_end_node"* %80
}

declare dereferenceable(24) %"class.std::__1::basic_string"* @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE17__assign_no_aliasILb1EEERS5_PKcm(%"class.std::__1::basic_string"*, i8*, i64) local_unnamed_addr #2

declare dereferenceable(24) %"class.std::__1::basic_string"* @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE17__assign_no_aliasILb0EEERS5_PKcm(%"class.std::__1::basic_string"*, i8*, i64) local_unnamed_addr #2

declare i32 @_ZN4base27CompareCaseInsensitiveASCIIENS_16BasicStringPieceIcNSt3__111char_traitsIcEEEES4_(i8*, i64, i8*, i64) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__127__tree_balance_after_insertIPNS_16__tree_node_baseIPvEEEEvT_S5_(%"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"*) local_unnamed_addr #0 comdat {
  %3 = icmp eq %"class.std::__1::__tree_node_base"* %1, %0
  %4 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %1, i64 0, i32 3
  %5 = zext i1 %3 to i8
  store i8 %5, i8* %4, align 8
  br i1 %3, label %156, label %6

6:                                                ; preds = %2, %149
  %7 = phi %"class.std::__1::__tree_node_base"* [ %20, %149 ], [ %1, %2 ]
  %8 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %7, i64 0, i32 2
  %9 = bitcast %"class.std::__1::__tree_end_node"** %8 to %"class.std::__1::__tree_node_base"**
  %10 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %9, align 8
  %11 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %10, i64 0, i32 3
  %12 = load i8, i8* %11, align 8, !range !4
  %13 = icmp eq i8 %12, 0
  br i1 %13, label %14, label %156

14:                                               ; preds = %6
  %15 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %10, i64 0, i32 2
  %16 = load %"class.std::__1::__tree_end_node"*, %"class.std::__1::__tree_end_node"** %15, align 8
  %17 = getelementptr inbounds %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_end_node"* %16, i64 0, i32 0
  %18 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %17, align 8
  %19 = icmp eq %"class.std::__1::__tree_node_base"* %18, %10
  %20 = bitcast %"class.std::__1::__tree_end_node"* %16 to %"class.std::__1::__tree_node_base"*
  br i1 %19, label %21, label %87

21:                                               ; preds = %14
  %22 = getelementptr inbounds %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_end_node"* %16, i64 1, i32 0
  %23 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %22, align 8
  %24 = icmp eq %"class.std::__1::__tree_node_base"* %23, null
  br i1 %24, label %29, label %25

25:                                               ; preds = %21
  %26 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %23, i64 0, i32 3
  %27 = load i8, i8* %26, align 8, !range !4
  %28 = icmp eq i8 %27, 0
  br i1 %28, label %149, label %29

29:                                               ; preds = %25, %21
  %30 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %10, i64 0, i32 2
  %31 = bitcast %"class.std::__1::__tree_end_node"* %16 to %"class.std::__1::__tree_node_base"*
  %32 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %10, i64 0, i32 0, i32 0
  %33 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %32, align 8
  %34 = icmp eq %"class.std::__1::__tree_node_base"* %33, %7
  br i1 %34, label %61, label %35

35:                                               ; preds = %29
  %36 = ptrtoint %"class.std::__1::__tree_end_node"* %16 to i64
  %37 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %10, i64 0, i32 1
  %38 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %37, align 8
  %39 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %38, i64 0, i32 0, i32 0
  %40 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %39, align 8
  store %"class.std::__1::__tree_node_base"* %40, %"class.std::__1::__tree_node_base"** %37, align 8
  %41 = icmp eq %"class.std::__1::__tree_node_base"* %40, null
  br i1 %41, label %47, label %42

42:                                               ; preds = %35
  %43 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %10, i64 0, i32 0
  %44 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %40, i64 0, i32 2
  store %"class.std::__1::__tree_end_node"* %43, %"class.std::__1::__tree_end_node"** %44, align 8
  %45 = bitcast %"class.std::__1::__tree_end_node"** %30 to i64*
  %46 = load i64, i64* %45, align 8
  br label %47

47:                                               ; preds = %35, %42
  %48 = phi i64 [ %46, %42 ], [ %36, %35 ]
  %49 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %38, i64 0, i32 2
  %50 = bitcast %"class.std::__1::__tree_end_node"** %49 to i64*
  store i64 %48, i64* %50, align 8
  %51 = load %"class.std::__1::__tree_end_node"*, %"class.std::__1::__tree_end_node"** %30, align 8
  %52 = getelementptr inbounds %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_end_node"* %51, i64 0, i32 0
  %53 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %52, align 8
  %54 = icmp eq %"class.std::__1::__tree_node_base"* %53, %10
  %55 = getelementptr inbounds %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_end_node"* %51, i64 1, i32 0
  %56 = select i1 %54, %"class.std::__1::__tree_node_base"** %52, %"class.std::__1::__tree_node_base"** %55
  store %"class.std::__1::__tree_node_base"* %38, %"class.std::__1::__tree_node_base"** %56, align 8
  store %"class.std::__1::__tree_node_base"* %10, %"class.std::__1::__tree_node_base"** %39, align 8
  %57 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %38, i64 0, i32 0
  store %"class.std::__1::__tree_end_node"* %57, %"class.std::__1::__tree_end_node"** %30, align 8
  %58 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %38, i64 0, i32 2
  %59 = bitcast %"class.std::__1::__tree_end_node"** %58 to %"class.std::__1::__tree_node_base"**
  %60 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %59, align 8
  br label %61

61:                                               ; preds = %47, %29
  %62 = phi %"class.std::__1::__tree_node_base"* [ %31, %29 ], [ %60, %47 ]
  %63 = phi %"class.std::__1::__tree_node_base"* [ %10, %29 ], [ %38, %47 ]
  %64 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %63, i64 0, i32 3
  store i8 1, i8* %64, align 8
  %65 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %62, i64 0, i32 3
  store i8 0, i8* %65, align 8
  %66 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %62, i64 0, i32 0, i32 0
  %67 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %66, align 8
  %68 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %67, i64 0, i32 1
  %69 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %68, align 8
  store %"class.std::__1::__tree_node_base"* %69, %"class.std::__1::__tree_node_base"** %66, align 8
  %70 = icmp eq %"class.std::__1::__tree_node_base"* %69, null
  br i1 %70, label %74, label %71

71:                                               ; preds = %61
  %72 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %62, i64 0, i32 0
  %73 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %69, i64 0, i32 2
  store %"class.std::__1::__tree_end_node"* %72, %"class.std::__1::__tree_end_node"** %73, align 8
  br label %74

74:                                               ; preds = %71, %61
  %75 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %62, i64 0, i32 2
  %76 = bitcast %"class.std::__1::__tree_end_node"** %75 to i64*
  %77 = load i64, i64* %76, align 8
  %78 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %67, i64 0, i32 2
  %79 = bitcast %"class.std::__1::__tree_end_node"** %78 to i64*
  store i64 %77, i64* %79, align 8
  %80 = load %"class.std::__1::__tree_end_node"*, %"class.std::__1::__tree_end_node"** %75, align 8
  %81 = getelementptr inbounds %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_end_node"* %80, i64 0, i32 0
  %82 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %81, align 8
  %83 = icmp eq %"class.std::__1::__tree_node_base"* %82, %62
  %84 = getelementptr inbounds %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_end_node"* %80, i64 1, i32 0
  %85 = select i1 %83, %"class.std::__1::__tree_node_base"** %81, %"class.std::__1::__tree_node_base"** %84
  store %"class.std::__1::__tree_node_base"* %67, %"class.std::__1::__tree_node_base"** %85, align 8
  store %"class.std::__1::__tree_node_base"* %62, %"class.std::__1::__tree_node_base"** %68, align 8
  %86 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %67, i64 0, i32 0
  store %"class.std::__1::__tree_end_node"* %86, %"class.std::__1::__tree_end_node"** %75, align 8
  br label %156

87:                                               ; preds = %14
  %88 = icmp eq %"class.std::__1::__tree_node_base"* %18, null
  br i1 %88, label %93, label %89

89:                                               ; preds = %87
  %90 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %18, i64 0, i32 3
  %91 = load i8, i8* %90, align 8, !range !4
  %92 = icmp eq i8 %91, 0
  br i1 %92, label %149, label %93

93:                                               ; preds = %89, %87
  %94 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %10, i64 0, i32 2
  %95 = bitcast %"class.std::__1::__tree_end_node"* %16 to %"class.std::__1::__tree_node_base"*
  %96 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %10, i64 0, i32 0, i32 0
  %97 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %96, align 8
  %98 = icmp eq %"class.std::__1::__tree_node_base"* %97, %7
  br i1 %98, label %99, label %123

99:                                               ; preds = %93
  %100 = ptrtoint %"class.std::__1::__tree_end_node"* %16 to i64
  %101 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %10, i64 0, i32 0, i32 0
  %102 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %7, i64 0, i32 1
  %103 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %102, align 8
  store %"class.std::__1::__tree_node_base"* %103, %"class.std::__1::__tree_node_base"** %101, align 8
  %104 = icmp eq %"class.std::__1::__tree_node_base"* %103, null
  br i1 %104, label %110, label %105

105:                                              ; preds = %99
  %106 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %10, i64 0, i32 0
  %107 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %103, i64 0, i32 2
  store %"class.std::__1::__tree_end_node"* %106, %"class.std::__1::__tree_end_node"** %107, align 8
  %108 = bitcast %"class.std::__1::__tree_end_node"** %94 to i64*
  %109 = load i64, i64* %108, align 8
  br label %110

110:                                              ; preds = %99, %105
  %111 = phi i64 [ %109, %105 ], [ %100, %99 ]
  %112 = bitcast %"class.std::__1::__tree_end_node"** %8 to i64*
  store i64 %111, i64* %112, align 8
  %113 = load %"class.std::__1::__tree_end_node"*, %"class.std::__1::__tree_end_node"** %94, align 8
  %114 = getelementptr inbounds %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_end_node"* %113, i64 0, i32 0
  %115 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %114, align 8
  %116 = icmp eq %"class.std::__1::__tree_node_base"* %115, %10
  %117 = getelementptr inbounds %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_end_node"* %113, i64 1, i32 0
  %118 = select i1 %116, %"class.std::__1::__tree_node_base"** %114, %"class.std::__1::__tree_node_base"** %117
  store %"class.std::__1::__tree_node_base"* %7, %"class.std::__1::__tree_node_base"** %118, align 8
  store %"class.std::__1::__tree_node_base"* %10, %"class.std::__1::__tree_node_base"** %102, align 8
  %119 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %7, i64 0, i32 0
  store %"class.std::__1::__tree_end_node"* %119, %"class.std::__1::__tree_end_node"** %94, align 8
  %120 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %7, i64 0, i32 2
  %121 = bitcast %"class.std::__1::__tree_end_node"** %120 to %"class.std::__1::__tree_node_base"**
  %122 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %121, align 8
  br label %123

123:                                              ; preds = %93, %110
  %124 = phi %"class.std::__1::__tree_node_base"* [ %122, %110 ], [ %95, %93 ]
  %125 = phi %"class.std::__1::__tree_node_base"* [ %7, %110 ], [ %10, %93 ]
  %126 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %125, i64 0, i32 3
  store i8 1, i8* %126, align 8
  %127 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %124, i64 0, i32 3
  store i8 0, i8* %127, align 8
  %128 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %124, i64 0, i32 1
  %129 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %128, align 8
  %130 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %129, i64 0, i32 0, i32 0
  %131 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %130, align 8
  store %"class.std::__1::__tree_node_base"* %131, %"class.std::__1::__tree_node_base"** %128, align 8
  %132 = icmp eq %"class.std::__1::__tree_node_base"* %131, null
  br i1 %132, label %136, label %133

133:                                              ; preds = %123
  %134 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %124, i64 0, i32 0
  %135 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %131, i64 0, i32 2
  store %"class.std::__1::__tree_end_node"* %134, %"class.std::__1::__tree_end_node"** %135, align 8
  br label %136

136:                                              ; preds = %133, %123
  %137 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %124, i64 0, i32 2
  %138 = bitcast %"class.std::__1::__tree_end_node"** %137 to i64*
  %139 = load i64, i64* %138, align 8
  %140 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %129, i64 0, i32 2
  %141 = bitcast %"class.std::__1::__tree_end_node"** %140 to i64*
  store i64 %139, i64* %141, align 8
  %142 = load %"class.std::__1::__tree_end_node"*, %"class.std::__1::__tree_end_node"** %137, align 8
  %143 = getelementptr inbounds %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_end_node"* %142, i64 0, i32 0
  %144 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %143, align 8
  %145 = icmp eq %"class.std::__1::__tree_node_base"* %144, %124
  %146 = getelementptr inbounds %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_end_node"* %142, i64 1, i32 0
  %147 = select i1 %145, %"class.std::__1::__tree_node_base"** %143, %"class.std::__1::__tree_node_base"** %146
  store %"class.std::__1::__tree_node_base"* %129, %"class.std::__1::__tree_node_base"** %147, align 8
  store %"class.std::__1::__tree_node_base"* %124, %"class.std::__1::__tree_node_base"** %130, align 8
  %148 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %129, i64 0, i32 0
  store %"class.std::__1::__tree_end_node"* %148, %"class.std::__1::__tree_end_node"** %137, align 8
  br label %156

149:                                              ; preds = %89, %25
  %150 = phi i8* [ %26, %25 ], [ %90, %89 ]
  store i8 1, i8* %11, align 8
  %151 = icmp eq %"class.std::__1::__tree_node_base"* %20, %0
  %152 = getelementptr inbounds %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_end_node"* %16, i64 3
  %153 = bitcast %"class.std::__1::__tree_end_node"* %152 to i8*
  %154 = zext i1 %151 to i8
  store i8 %154, i8* %153, align 8
  store i8 1, i8* %150, align 8
  %155 = icmp eq %"class.std::__1::__tree_node_base"* %20, %0
  br i1 %155, label %156, label %6

156:                                              ; preds = %6, %149, %2, %136, %74
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__16__treeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEN5blink17CompareIgnoreCaseENS4_IS6_EEE7destroyEPNS_11__tree_nodeIS6_PvEE(%"class.std::__1::__tree.279"*, %"class.std::__1::__tree_node"*) local_unnamed_addr #0 comdat align 2 {
  %3 = icmp eq %"class.std::__1::__tree_node"* %1, null
  br i1 %3, label %20, label %4

4:                                                ; preds = %2
  %5 = bitcast %"class.std::__1::__tree_node"* %1 to %"class.std::__1::__tree_node"**
  %6 = load %"class.std::__1::__tree_node"*, %"class.std::__1::__tree_node"** %5, align 8
  tail call void @_ZNSt3__16__treeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEN5blink17CompareIgnoreCaseENS4_IS6_EEE7destroyEPNS_11__tree_nodeIS6_PvEE(%"class.std::__1::__tree.279"* %0, %"class.std::__1::__tree_node"* %6) #11
  %7 = getelementptr inbounds %"class.std::__1::__tree_node", %"class.std::__1::__tree_node"* %1, i64 0, i32 0, i32 1
  %8 = bitcast %"class.std::__1::__tree_node_base"** %7 to %"class.std::__1::__tree_node"**
  %9 = load %"class.std::__1::__tree_node"*, %"class.std::__1::__tree_node"** %8, align 8
  tail call void @_ZNSt3__16__treeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEN5blink17CompareIgnoreCaseENS4_IS6_EEE7destroyEPNS_11__tree_nodeIS6_PvEE(%"class.std::__1::__tree.279"* %0, %"class.std::__1::__tree_node"* %9) #11
  %10 = getelementptr inbounds %"class.std::__1::__tree_node", %"class.std::__1::__tree_node"* %1, i64 0, i32 1
  %11 = bitcast %"class.std::__1::basic_string"* %10 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %12 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %11, i64 0, i32 1, i32 0
  %13 = load i8, i8* %12, align 1
  %14 = icmp slt i8 %13, 0
  br i1 %14, label %15, label %18

15:                                               ; preds = %4
  %16 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %10, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %17 = load i8*, i8** %16, align 8
  tail call void @_ZdlPv(i8* %17) #12
  br label %18

18:                                               ; preds = %4, %15
  %19 = bitcast %"class.std::__1::__tree_node"* %1 to i8*
  tail call void @_ZdlPv(i8* %19) #12
  br label %20

20:                                               ; preds = %2, %18
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden %"class.std::__1::__tree_end_node"* @_ZNSt3__16__treeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEN5blink17CompareIgnoreCaseENS4_IS6_EEE15__emplace_multiIJRKS6_EEENS_15__tree_iteratorIS6_PNS_11__tree_nodeIS6_PvEElEEDpOT_(%"class.std::__1::__tree.279"*, %"class.std::__1::basic_string"* dereferenceable(24)) local_unnamed_addr #0 comdat align 2 {
  %3 = tail call i8* @_Znwm(i64 56) #12, !noalias !8
  %4 = getelementptr inbounds i8, i8* %3, i64 32
  %5 = bitcast %"class.std::__1::basic_string"* %1 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %6 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %5, i64 0, i32 1, i32 0
  %7 = load i8, i8* %6, align 1, !noalias !8
  %8 = icmp slt i8 %7, 0
  br i1 %8, label %11, label %9

9:                                                ; preds = %2
  %10 = bitcast %"class.std::__1::basic_string"* %1 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %4, i8* align 8 %10, i64 24, i1 false) #11, !noalias !8
  br label %17

11:                                               ; preds = %2
  %12 = bitcast i8* %4 to %"class.std::__1::basic_string"*
  %13 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %1, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %14 = load i8*, i8** %13, align 8, !noalias !8
  %15 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %1, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %16 = load i64, i64* %15, align 8, !noalias !8
  tail call void @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE25__init_copy_ctor_externalEPKcm(%"class.std::__1::basic_string"* %12, i8* %14, i64 %16) #11, !noalias !8
  br label %17

17:                                               ; preds = %9, %11
  %18 = getelementptr inbounds %"class.std::__1::__tree.279", %"class.std::__1::__tree.279"* %0, i64 0, i32 1, i32 0, i32 0
  %19 = bitcast %"class.std::__1::__tree_end_node"* %18 to %"class.std::__1::__tree_node"**
  %20 = load %"class.std::__1::__tree_node"*, %"class.std::__1::__tree_node"** %19, align 8
  %21 = icmp eq %"class.std::__1::__tree_node"* %20, null
  br i1 %21, label %68, label %22

22:                                               ; preds = %17
  %23 = getelementptr inbounds i8, i8* %3, i64 55
  %24 = bitcast i8* %4 to i8**
  %25 = getelementptr inbounds i8, i8* %3, i64 40
  %26 = bitcast i8* %25 to i64*
  br label %27

27:                                               ; preds = %65, %22
  %28 = phi %"class.std::__1::__tree_node"* [ %67, %65 ], [ %20, %22 ]
  %29 = getelementptr inbounds %"class.std::__1::__tree_node", %"class.std::__1::__tree_node"* %28, i64 0, i32 1
  %30 = load i8, i8* %23, align 1
  %31 = icmp slt i8 %30, 0
  %32 = load i8*, i8** %24, align 8
  %33 = select i1 %31, i8* %32, i8* %4
  %34 = load i64, i64* %26, align 8
  %35 = zext i8 %30 to i64
  %36 = select i1 %31, i64 %34, i64 %35
  %37 = bitcast %"class.std::__1::basic_string"* %29 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %38 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %37, i64 0, i32 1, i32 0
  %39 = load i8, i8* %38, align 1
  %40 = icmp slt i8 %39, 0
  %41 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %29, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %42 = load i8*, i8** %41, align 8
  %43 = bitcast %"class.std::__1::basic_string"* %29 to i8*
  %44 = select i1 %40, i8* %42, i8* %43
  %45 = getelementptr inbounds %"class.std::__1::__tree_node", %"class.std::__1::__tree_node"* %28, i64 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %46 = load i64, i64* %45, align 8
  %47 = zext i8 %39 to i64
  %48 = select i1 %40, i64 %46, i64 %47
  %49 = tail call i32 @_ZN4base27CompareCaseInsensitiveASCIIENS_16BasicStringPieceIcNSt3__111char_traitsIcEEEES4_(i8* %33, i64 %36, i8* %44, i64 %48) #11
  %50 = icmp slt i32 %49, 0
  br i1 %50, label %51, label %58

51:                                               ; preds = %27
  %52 = getelementptr inbounds %"class.std::__1::__tree_node", %"class.std::__1::__tree_node"* %28, i64 0, i32 0, i32 0, i32 0
  %53 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %52, align 8
  %54 = icmp eq %"class.std::__1::__tree_node_base"* %53, null
  br i1 %54, label %55, label %65

55:                                               ; preds = %51
  %56 = getelementptr inbounds %"class.std::__1::__tree_node", %"class.std::__1::__tree_node"* %28, i64 0, i32 0, i32 0, i32 0
  %57 = getelementptr inbounds %"class.std::__1::__tree_node", %"class.std::__1::__tree_node"* %28, i64 0, i32 0, i32 0
  br label %70

58:                                               ; preds = %27
  %59 = getelementptr inbounds %"class.std::__1::__tree_node", %"class.std::__1::__tree_node"* %28, i64 0, i32 0, i32 1
  %60 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %59, align 8
  %61 = icmp eq %"class.std::__1::__tree_node_base"* %60, null
  br i1 %61, label %62, label %65

62:                                               ; preds = %58
  %63 = getelementptr inbounds %"class.std::__1::__tree_node", %"class.std::__1::__tree_node"* %28, i64 0, i32 0, i32 1
  %64 = getelementptr inbounds %"class.std::__1::__tree_node", %"class.std::__1::__tree_node"* %28, i64 0, i32 0, i32 0
  br label %70

65:                                               ; preds = %58, %51
  %66 = phi %"class.std::__1::__tree_node_base"* [ %53, %51 ], [ %60, %58 ]
  %67 = bitcast %"class.std::__1::__tree_node_base"* %66 to %"class.std::__1::__tree_node"*
  br label %27

68:                                               ; preds = %17
  %69 = getelementptr inbounds %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_end_node"* %18, i64 0, i32 0
  br label %70

70:                                               ; preds = %55, %62, %68
  %71 = phi %"class.std::__1::__tree_end_node"* [ %18, %68 ], [ %57, %55 ], [ %64, %62 ]
  %72 = phi %"class.std::__1::__tree_node_base"** [ %69, %68 ], [ %56, %55 ], [ %63, %62 ]
  %73 = bitcast i8* %3 to %"class.std::__1::__tree_node_base"*
  %74 = getelementptr inbounds i8, i8* %3, i64 16
  %75 = bitcast i8* %74 to %"class.std::__1::__tree_end_node"**
  tail call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %3, i8 0, i64 16, i1 false) #11
  store %"class.std::__1::__tree_end_node"* %71, %"class.std::__1::__tree_end_node"** %75, align 8
  %76 = bitcast %"class.std::__1::__tree_node_base"** %72 to i8**
  store i8* %3, i8** %76, align 8
  %77 = getelementptr inbounds %"class.std::__1::__tree.279", %"class.std::__1::__tree.279"* %0, i64 0, i32 0
  %78 = load %"class.std::__1::__tree_end_node"*, %"class.std::__1::__tree_end_node"** %77, align 8
  %79 = getelementptr inbounds %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_end_node"* %78, i64 0, i32 0
  %80 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %79, align 8
  %81 = icmp eq %"class.std::__1::__tree_node_base"* %80, null
  br i1 %81, label %86, label %82

82:                                               ; preds = %70
  %83 = ptrtoint %"class.std::__1::__tree_node_base"* %80 to i64
  %84 = bitcast %"class.std::__1::__tree.279"* %0 to i64*
  store i64 %83, i64* %84, align 8
  %85 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %72, align 8
  br label %86

86:                                               ; preds = %82, %70
  %87 = phi %"class.std::__1::__tree_node_base"* [ %73, %70 ], [ %85, %82 ]
  %88 = getelementptr inbounds %"class.std::__1::__tree.279", %"class.std::__1::__tree.279"* %0, i64 0, i32 1, i32 0, i32 0, i32 0
  %89 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %88, align 8
  tail call void @_ZNSt3__127__tree_balance_after_insertIPNS_16__tree_node_baseIPvEEEEvT_S5_(%"class.std::__1::__tree_node_base"* %89, %"class.std::__1::__tree_node_base"* %87) #11
  %90 = getelementptr inbounds %"class.std::__1::__tree.279", %"class.std::__1::__tree.279"* %0, i64 0, i32 2, i32 0, i32 0
  %91 = load i64, i64* %90, align 8
  %92 = add i64 %91, 1
  store i64 %92, i64* %90, align 8
  %93 = bitcast i8* %3 to %"class.std::__1::__tree_end_node"*
  ret %"class.std::__1::__tree_end_node"* %93
}

; Function Attrs: nobuiltin nofree
declare noalias nonnull i8* @_Znwm(i64) local_unnamed_addr #9

declare void @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE25__init_copy_ctor_externalEPKcm(%"class.std::__1::basic_string"*, i8*, i64) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden i8* @_ZN5blink10ThreadHeap8AllocateINS_17FetchResponseDataEEEPhm(i64) local_unnamed_addr #0 comdat align 2 {
  %2 = load %"class.WTF::ThreadSpecific"*, %"class.WTF::ThreadSpecific"** @_ZN5blink11ThreadState16thread_specific_E, align 8
  %3 = getelementptr inbounds %"class.WTF::ThreadSpecific", %"class.WTF::ThreadSpecific"* %2, i64 0, i32 1
  %4 = tail call i8* @_ZNK4base18ThreadLocalStorage4Slot3GetEv(%"class.base::ThreadLocalStorage::Slot"* %3) #11
  %5 = icmp eq i8* %4, null
  br i1 %5, label %6, label %8, !prof !2

6:                                                ; preds = %1
  %7 = tail call i8* @_ZN3WTF10Partitions16FastZeroedMallocEmPKc(i64 8, i8* getelementptr inbounds ([68 x i8], [68 x i8]* @__PRETTY_FUNCTION__._ZN3WTF21GetStringWithTypeNameIPN5blink11ThreadStateEEEPKcv, i64 0, i64 0)) #11
  tail call void @_ZN4base18ThreadLocalStorage4Slot3SetEPv(%"class.base::ThreadLocalStorage::Slot"* %3, i8* %7) #11
  br label %8

8:                                                ; preds = %1, %6
  %9 = phi i8* [ %7, %6 ], [ %4, %1 ]
  %10 = bitcast i8* %9 to %"class.blink::ThreadState"**
  %11 = load %"class.blink::ThreadState"*, %"class.blink::ThreadState"** %10, align 8
  %12 = getelementptr inbounds %"class.blink::ThreadState", %"class.blink::ThreadState"* %11, i64 0, i32 0, i32 0, i32 0, i32 0
  %13 = load %"class.blink::ThreadHeap"*, %"class.blink::ThreadHeap"** %12, align 8
  %14 = icmp ult i64 %0, 64
  %15 = icmp ugt i64 %0, 31
  %16 = zext i1 %15 to i32
  %17 = icmp ult i64 %0, 128
  %18 = select i1 %17, i32 2, i32 3
  %19 = select i1 %14, i32 %16, i32 %18
  %20 = load atomic i32, i32* getelementptr inbounds ({ { i32 } }, { { i32 } }* @_ZZN5blink11GCInfoTraitINS_17FetchResponseDataEE5IndexEvE13gc_info_index, i64 0, i32 0, i32 0) acquire, align 4
  %21 = icmp eq i32 %20, 0
  br i1 %21, label %22, label %25

22:                                               ; preds = %8
  %23 = load %"class.blink::GCInfoTable"*, %"class.blink::GCInfoTable"** @_ZN5blink11GCInfoTable13global_table_E, align 8
  %24 = tail call i32 @_ZN5blink11GCInfoTable17EnsureGCInfoIndexEPKNS_6GCInfoEPNSt3__16atomicIjEE(%"class.blink::GCInfoTable"* %23, %"struct.blink::GCInfo"* nonnull @_ZZN5blink11GCInfoTraitINS_17FetchResponseDataEE5IndexEvE7kGcInfo, %"struct.std::__1::atomic"* bitcast ({ { i32 } }* @_ZZN5blink11GCInfoTraitINS_17FetchResponseDataEE5IndexEvE13gc_info_index to %"struct.std::__1::atomic"*)) #11
  br label %25

25:                                               ; preds = %8, %22
  %26 = phi i32 [ %20, %8 ], [ %24, %22 ]
  %27 = tail call i8* @_ZN5blink10ThreadHeap20AllocateOnArenaIndexEPNS_11ThreadStateEmijPKc(%"class.blink::ThreadHeap"* %13, %"class.blink::ThreadState"* %11, i64 %0, i32 %19, i32 %26, i8* getelementptr inbounds ([72 x i8], [72 x i8]* @__PRETTY_FUNCTION__._ZN3WTF21GetStringWithTypeNameIN5blink17FetchResponseDataEEEPKcv, i64 0, i64 0))
  ret i8* %27
}

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden i8* @_ZN5blink10ThreadHeap20AllocateOnArenaIndexEPNS_11ThreadStateEmijPKc(%"class.blink::ThreadHeap"*, %"class.blink::ThreadState"*, i64, i32, i32, i8*) local_unnamed_addr #10 comdat align 2 {
  %7 = alloca %"class.logging::CheckOpResult", align 8
  %8 = alloca %"class.logging::CheckOpResult", align 8
  %9 = alloca %"class.logging::CheckError", align 8
  %10 = sext i32 %3 to i64
  %11 = getelementptr inbounds %"class.blink::ThreadHeap", %"class.blink::ThreadHeap"* %0, i64 0, i32 19, i64 %10
  %12 = bitcast %"class.blink::BaseArena"** %11 to %"class.blink::NormalPageArena"**
  %13 = load %"class.blink::NormalPageArena"*, %"class.blink::NormalPageArena"** %12, align 8
  %14 = bitcast %"class.logging::CheckOpResult"* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %14) #11
  %15 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %8, i64 0, i32 0
  store i8* inttoptr (i64 -6148914691236517206 to i8*), i8** %15, align 8
  %16 = bitcast %"class.logging::CheckOpResult"* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %16) #11
  %17 = icmp ult i64 %2, -8
  br i1 %17, label %18, label %19

18:                                               ; preds = %6
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %16) #11
  store i8* null, i8** %15, align 8
  br label %29

19:                                               ; preds = %6
  %20 = add nsw i64 %2, 8
  %21 = tail call i8* @_ZN7logging15CheckOpValueStrEm(i64 %20) #11
  %22 = tail call i8* @_ZN7logging15CheckOpValueStrEm(i64 %2) #11
  call void @_ZN7logging13CheckOpResultC1EPKcPcS3_(%"class.logging::CheckOpResult"* nonnull %7, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.12, i64 0, i64 0), i8* %21, i8* %22) #11
  %23 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %7, i64 0, i32 0
  %24 = load i8*, i8** %23, align 8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %16) #11
  store i8* %24, i8** %15, align 8
  %25 = icmp eq i8* %24, null
  br i1 %25, label %29, label %26

26:                                               ; preds = %19
  %27 = bitcast %"class.logging::CheckError"* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %27) #11
  call void @_ZN7logging10CheckError7CheckOpEPKciPNS_13CheckOpResultE(%"class.logging::CheckError"* nonnull sret %9, i8* getelementptr inbounds ([59 x i8], [59 x i8]* @.str.13, i64 0, i64 0), i32 246, %"class.logging::CheckOpResult"* nonnull %8) #11
  %28 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %9) #11
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %9) #11
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %27) #11
  br label %29

29:                                               ; preds = %18, %19, %26
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %14) #11
  %30 = add i64 %2, 15
  %31 = and i64 %30, -8
  %32 = getelementptr inbounds %"class.blink::NormalPageArena", %"class.blink::NormalPageArena"* %13, i64 0, i32 4
  %33 = load i64, i64* %32, align 8
  %34 = icmp ult i64 %33, %31
  br i1 %34, label %67, label %35, !prof !2

35:                                               ; preds = %29
  %36 = getelementptr inbounds %"class.blink::NormalPageArena", %"class.blink::NormalPageArena"* %13, i64 0, i32 3
  %37 = load i8*, i8** %36, align 8
  %38 = getelementptr inbounds i8, i8* %37, i64 %31
  store i8* %38, i8** %36, align 8
  %39 = sub i64 %33, %31
  store i64 %39, i64* %32, align 8
  %40 = bitcast i8* %37 to i32*
  store i32 0, i32* %40, align 4
  %41 = getelementptr inbounds i8, i8* %37, i64 4
  %42 = bitcast i8* %41 to i16*
  %43 = trunc i32 %4 to i16
  %44 = shl i16 %43, 2
  store atomic i16 %44, i16* %42 monotonic, align 2
  %45 = lshr exact i64 %31, 1
  %46 = trunc i64 %45 to i16
  %47 = getelementptr inbounds i8, i8* %37, i64 6
  %48 = bitcast i8* %47 to i16*
  store i16 %46, i16* %48, align 2
  %49 = ptrtoint i8* %37 to i64
  %50 = and i64 %49, -131072
  %51 = inttoptr i64 %50 to i8*
  %52 = getelementptr inbounds i8, i8* %51, i64 4400
  %53 = bitcast i8* %52 to %"class.blink::PlatformAwareObjectStartBitmap"*
  %54 = bitcast i8* %52 to i64*
  %55 = load i64, i64* %54, align 16
  %56 = sub i64 %49, %55
  %57 = lshr i64 %56, 3
  %58 = lshr i64 %56, 6
  %59 = getelementptr inbounds %"class.blink::PlatformAwareObjectStartBitmap", %"class.blink::PlatformAwareObjectStartBitmap"* %53, i64 0, i32 0, i32 1, i64 %58
  %60 = load i8, i8* %59, align 1
  %61 = trunc i64 %57 to i32
  %62 = and i32 %61, 7
  %63 = shl i32 1, %62
  %64 = trunc i32 %63 to i8
  %65 = or i8 %60, %64
  store atomic i8 %65, i8* %59 release, align 1
  %66 = getelementptr inbounds i8, i8* %37, i64 8
  br label %70

67:                                               ; preds = %29
  %68 = zext i32 %4 to i64
  %69 = call i8* @_ZN5blink15NormalPageArena17OutOfLineAllocateEmm(%"class.blink::NormalPageArena"* %13, i64 %31, i64 %68) #11
  br label %70

70:                                               ; preds = %35, %67
  %71 = phi i8* [ %66, %35 ], [ %69, %67 ]
  ret i8* %71
}

declare i8* @_ZN3WTF10Partitions16FastZeroedMallocEmPKc(i64, i8*) local_unnamed_addr #2

declare i8* @_ZNK4base18ThreadLocalStorage4Slot3GetEv(%"class.base::ThreadLocalStorage::Slot"*) local_unnamed_addr #2

declare void @_ZN4base18ThreadLocalStorage4Slot3SetEPv(%"class.base::ThreadLocalStorage::Slot"*, i8*) local_unnamed_addr #2

declare i8* @_ZN5blink15NormalPageArena17OutOfLineAllocateEmm(%"class.blink::NormalPageArena"*, i64, i64) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN5blink10TraceTraitINS_17FetchResponseDataEE5TraceEPNS_7VisitorEPKv(%"class.blink::Visitor"*, i8*) #0 comdat align 2 {
  %3 = getelementptr inbounds i8, i8* %1, i64 64
  %4 = bitcast i8* %3 to i64*
  %5 = load atomic i64, i64* %4 monotonic, align 8
  %6 = icmp eq i64 %5, 0
  br i1 %6, label %13, label %7

7:                                                ; preds = %2
  %8 = inttoptr i64 %5 to i8*
  %9 = bitcast %"class.blink::Visitor"* %0 to void (%"class.blink::Visitor"*, i8*, i8*, void (%"class.blink::Visitor"*, i8*)*)***
  %10 = load void (%"class.blink::Visitor"*, i8*, i8*, void (%"class.blink::Visitor"*, i8*)*)**, void (%"class.blink::Visitor"*, i8*, i8*, void (%"class.blink::Visitor"*, i8*)*)*** %9, align 8
  %11 = getelementptr inbounds void (%"class.blink::Visitor"*, i8*, i8*, void (%"class.blink::Visitor"*, i8*)*)*, void (%"class.blink::Visitor"*, i8*, i8*, void (%"class.blink::Visitor"*, i8*)*)** %10, i64 5
  %12 = load void (%"class.blink::Visitor"*, i8*, i8*, void (%"class.blink::Visitor"*, i8*)*)*, void (%"class.blink::Visitor"*, i8*, i8*, void (%"class.blink::Visitor"*, i8*)*)** %11, align 8
  tail call void %12(%"class.blink::Visitor"* %0, i8* nonnull %8, i8* nonnull %8, void (%"class.blink::Visitor"*, i8*)* nonnull @_ZN5blink10TraceTraitINS_15FetchHeaderListEE5TraceEPNS_7VisitorEPKv) #11
  br label %13

13:                                               ; preds = %7, %2
  %14 = getelementptr inbounds i8, i8* %1, i64 72
  %15 = bitcast i8* %14 to i64*
  %16 = load atomic i64, i64* %15 monotonic, align 8
  %17 = icmp eq i64 %16, 0
  br i1 %17, label %24, label %18

18:                                               ; preds = %13
  %19 = inttoptr i64 %16 to i8*
  %20 = bitcast %"class.blink::Visitor"* %0 to void (%"class.blink::Visitor"*, i8*, i8*, void (%"class.blink::Visitor"*, i8*)*)***
  %21 = load void (%"class.blink::Visitor"*, i8*, i8*, void (%"class.blink::Visitor"*, i8*)*)**, void (%"class.blink::Visitor"*, i8*, i8*, void (%"class.blink::Visitor"*, i8*)*)*** %20, align 8
  %22 = getelementptr inbounds void (%"class.blink::Visitor"*, i8*, i8*, void (%"class.blink::Visitor"*, i8*)*)*, void (%"class.blink::Visitor"*, i8*, i8*, void (%"class.blink::Visitor"*, i8*)*)** %21, i64 5
  %23 = load void (%"class.blink::Visitor"*, i8*, i8*, void (%"class.blink::Visitor"*, i8*)*)*, void (%"class.blink::Visitor"*, i8*, i8*, void (%"class.blink::Visitor"*, i8*)*)** %22, align 8
  tail call void %23(%"class.blink::Visitor"* %0, i8* nonnull %19, i8* nonnull %19, void (%"class.blink::Visitor"*, i8*)* nonnull @_ZN5blink10TraceTraitINS_17FetchResponseDataEE5TraceEPNS_7VisitorEPKv) #11
  br label %24

24:                                               ; preds = %18, %13
  %25 = getelementptr inbounds i8, i8* %1, i64 80
  %26 = bitcast i8* %25 to i64*
  %27 = load atomic i64, i64* %26 monotonic, align 8
  %28 = icmp eq i64 %27, 0
  br i1 %28, label %35, label %29

29:                                               ; preds = %24
  %30 = inttoptr i64 %27 to i8*
  %31 = bitcast %"class.blink::Visitor"* %0 to void (%"class.blink::Visitor"*, i8*, i8*, void (%"class.blink::Visitor"*, i8*)*)***
  %32 = load void (%"class.blink::Visitor"*, i8*, i8*, void (%"class.blink::Visitor"*, i8*)*)**, void (%"class.blink::Visitor"*, i8*, i8*, void (%"class.blink::Visitor"*, i8*)*)*** %31, align 8
  %33 = getelementptr inbounds void (%"class.blink::Visitor"*, i8*, i8*, void (%"class.blink::Visitor"*, i8*)*)*, void (%"class.blink::Visitor"*, i8*, i8*, void (%"class.blink::Visitor"*, i8*)*)** %32, i64 5
  %34 = load void (%"class.blink::Visitor"*, i8*, i8*, void (%"class.blink::Visitor"*, i8*)*)*, void (%"class.blink::Visitor"*, i8*, i8*, void (%"class.blink::Visitor"*, i8*)*)** %33, align 8
  tail call void %34(%"class.blink::Visitor"* %0, i8* nonnull %30, i8* nonnull %30, void (%"class.blink::Visitor"*, i8*)* nonnull @_ZN5blink10TraceTraitINS_16BodyStreamBufferEE5TraceEPNS_7VisitorEPKv) #11
  br label %35

35:                                               ; preds = %24, %29
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN5blink8internal14FinalizerTraitINS_17FetchResponseDataEE8FinalizeEPv(i8*) #0 comdat align 2 {
  %2 = bitcast i8* %0 to %"class.blink::FetchResponseData"*
  tail call void @_ZN5blink17FetchResponseDataD2Ev(%"class.blink::FetchResponseData"* %2) #11
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden { i8*, i8 } @_ZN5blink9NameTraitINS_17FetchResponseDataEE7GetNameEPKv(i8*) #0 comdat align 2 {
  ret { i8*, i8 } { i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.14, i64 0, i64 0), i8 1 }
}

declare i32 @_ZN5blink11GCInfoTable17EnsureGCInfoIndexEPKNS_6GCInfoEPNSt3__16atomicIjEE(%"class.blink::GCInfoTable"*, %"struct.blink::GCInfo"*, %"struct.std::__1::atomic"*) local_unnamed_addr #2

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZN5blink17FetchResponseDataD2Ev(%"class.blink::FetchResponseData"*) unnamed_addr #10 comdat align 2 {
  %2 = getelementptr inbounds %"class.blink::FetchResponseData", %"class.blink::FetchResponseData"* %0, i64 0, i32 19, i32 0, i32 0, i32 0
  %3 = load %"class.net::AuthChallengeInfo"*, %"class.net::AuthChallengeInfo"** %2, align 8
  store %"class.net::AuthChallengeInfo"* null, %"class.net::AuthChallengeInfo"** %2, align 8
  %4 = icmp eq %"class.net::AuthChallengeInfo"* %3, null
  br i1 %4, label %7, label %5

5:                                                ; preds = %1
  tail call void @_ZN3net17AuthChallengeInfoD1Ev(%"class.net::AuthChallengeInfo"* nonnull %3) #11
  %6 = getelementptr inbounds %"class.net::AuthChallengeInfo", %"class.net::AuthChallengeInfo"* %3, i64 0, i32 0
  tail call void @_ZdlPv(i8* %6) #12
  br label %7

7:                                                ; preds = %1, %5
  %8 = getelementptr inbounds %"class.blink::FetchResponseData", %"class.blink::FetchResponseData"* %0, i64 0, i32 16, i32 0, i32 0, i32 0
  %9 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %8, align 8
  %10 = icmp eq %"class.WTF::StringImpl"* %9, null
  br i1 %10, label %24, label %11

11:                                               ; preds = %7
  %12 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %9, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %13 = load atomic i32, i32* %12 monotonic, align 4
  %14 = and i32 %13, 2
  %15 = icmp eq i32 %14, 0
  %16 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %9, i64 0, i32 0
  %17 = load i32, i32* %16, align 4
  br i1 %15, label %18, label %20

18:                                               ; preds = %11
  %19 = add i32 %17, -1
  store i32 %19, i32* %16, align 4
  br label %20

20:                                               ; preds = %18, %11
  %21 = phi i32 [ %19, %18 ], [ %17, %11 ]
  %22 = icmp eq i32 %21, 0
  br i1 %22, label %23, label %24

23:                                               ; preds = %20
  tail call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %9) #11
  br label %24

24:                                               ; preds = %7, %20, %23
  %25 = getelementptr inbounds %"class.blink::FetchResponseData", %"class.blink::FetchResponseData"* %0, i64 0, i32 14, i32 0
  %26 = getelementptr inbounds %"class.blink::FetchResponseData", %"class.blink::FetchResponseData"* %0, i64 0, i32 14, i32 0, i32 1, i32 0, i32 0
  %27 = bitcast %"class.std::__1::__tree_end_node"* %26 to %"class.std::__1::__tree_node"**
  %28 = load %"class.std::__1::__tree_node"*, %"class.std::__1::__tree_node"** %27, align 8
  tail call void @_ZNSt3__16__treeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEN5blink17CompareIgnoreCaseENS4_IS6_EEE7destroyEPNS_11__tree_nodeIS6_PvEE(%"class.std::__1::__tree.279"* %25, %"class.std::__1::__tree_node"* %28) #11
  %29 = getelementptr inbounds %"class.blink::FetchResponseData", %"class.blink::FetchResponseData"* %0, i64 0, i32 13, i32 0, i32 0
  %30 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %29, align 8
  %31 = icmp eq %"class.WTF::StringImpl"* %30, null
  br i1 %31, label %45, label %32

32:                                               ; preds = %24
  %33 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %30, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %34 = load atomic i32, i32* %33 monotonic, align 4
  %35 = and i32 %34, 2
  %36 = icmp eq i32 %35, 0
  %37 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %30, i64 0, i32 0
  %38 = load i32, i32* %37, align 4
  br i1 %36, label %39, label %41

39:                                               ; preds = %32
  %40 = add i32 %38, -1
  store i32 %40, i32* %37, align 4
  br label %41

41:                                               ; preds = %39, %32
  %42 = phi i32 [ %40, %39 ], [ %38, %32 ]
  %43 = icmp eq i32 %42, 0
  br i1 %43, label %44, label %45

44:                                               ; preds = %41
  tail call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %30) #11
  br label %45

45:                                               ; preds = %24, %41, %44
  %46 = getelementptr inbounds %"class.blink::FetchResponseData", %"class.blink::FetchResponseData"* %0, i64 0, i32 11, i32 0, i32 0, i32 0
  %47 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %46, align 8
  %48 = icmp eq %"class.WTF::StringImpl"* %47, null
  br i1 %48, label %62, label %49

49:                                               ; preds = %45
  %50 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %47, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %51 = load atomic i32, i32* %50 monotonic, align 4
  %52 = and i32 %51, 2
  %53 = icmp eq i32 %52, 0
  %54 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %47, i64 0, i32 0
  %55 = load i32, i32* %54, align 4
  br i1 %53, label %56, label %58

56:                                               ; preds = %49
  %57 = add i32 %55, -1
  store i32 %57, i32* %54, align 4
  br label %58

58:                                               ; preds = %56, %49
  %59 = phi i32 [ %57, %56 ], [ %55, %49 ]
  %60 = icmp eq i32 %59, 0
  br i1 %60, label %61, label %62

61:                                               ; preds = %58
  tail call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %47) #11
  br label %62

62:                                               ; preds = %45, %58, %61
  %63 = getelementptr inbounds %"class.blink::FetchResponseData", %"class.blink::FetchResponseData"* %0, i64 0, i32 10, i32 0, i32 0
  %64 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %63, align 8
  %65 = icmp eq %"class.WTF::StringImpl"* %64, null
  br i1 %65, label %79, label %66

66:                                               ; preds = %62
  %67 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %64, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %68 = load atomic i32, i32* %67 monotonic, align 4
  %69 = and i32 %68, 2
  %70 = icmp eq i32 %69, 0
  %71 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %64, i64 0, i32 0
  %72 = load i32, i32* %71, align 4
  br i1 %70, label %73, label %75

73:                                               ; preds = %66
  %74 = add i32 %72, -1
  store i32 %74, i32* %71, align 4
  br label %75

75:                                               ; preds = %73, %66
  %76 = phi i32 [ %74, %73 ], [ %72, %66 ]
  %77 = icmp eq i32 %76, 0
  br i1 %77, label %78, label %79

78:                                               ; preds = %75
  tail call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %64) #11
  br label %79

79:                                               ; preds = %62, %75, %78
  %80 = getelementptr inbounds %"class.blink::FetchResponseData", %"class.blink::FetchResponseData"* %0, i64 0, i32 6, i32 0, i32 0, i32 0
  %81 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %80, align 8
  %82 = icmp eq %"class.WTF::StringImpl"* %81, null
  br i1 %82, label %96, label %83

83:                                               ; preds = %79
  %84 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %81, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %85 = load atomic i32, i32* %84 monotonic, align 4
  %86 = and i32 %85, 2
  %87 = icmp eq i32 %86, 0
  %88 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %81, i64 0, i32 0
  %89 = load i32, i32* %88, align 4
  br i1 %87, label %90, label %92

90:                                               ; preds = %83
  %91 = add i32 %89, -1
  store i32 %91, i32* %88, align 4
  br label %92

92:                                               ; preds = %90, %83
  %93 = phi i32 [ %91, %90 ], [ %89, %83 ]
  %94 = icmp eq i32 %93, 0
  br i1 %94, label %95, label %96

95:                                               ; preds = %92
  tail call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %81) #11
  br label %96

96:                                               ; preds = %79, %92, %95
  %97 = getelementptr inbounds %"class.blink::FetchResponseData", %"class.blink::FetchResponseData"* %0, i64 0, i32 4, i32 0, i32 0, i32 0
  %98 = load %"class.blink::KURL"*, %"class.blink::KURL"** %97, align 8
  %99 = icmp eq %"class.blink::KURL"* %98, null
  br i1 %99, label %116, label %100, !prof !3

100:                                              ; preds = %96
  %101 = getelementptr inbounds %"class.blink::FetchResponseData", %"class.blink::FetchResponseData"* %0, i64 0, i32 4, i32 0, i32 0, i32 2
  %102 = load i32, i32* %101, align 4
  %103 = icmp eq i32 %102, 0
  br i1 %103, label %113, label %104, !prof !2

104:                                              ; preds = %100
  %105 = zext i32 %102 to i64
  %106 = getelementptr inbounds %"class.blink::KURL", %"class.blink::KURL"* %98, i64 %105
  br label %107

107:                                              ; preds = %107, %104
  %108 = phi %"class.blink::KURL"* [ %109, %107 ], [ %98, %104 ]
  tail call void @_ZN5blink4KURLD1Ev(%"class.blink::KURL"* %108) #11
  %109 = getelementptr inbounds %"class.blink::KURL", %"class.blink::KURL"* %108, i64 1
  %110 = icmp eq %"class.blink::KURL"* %109, %106
  br i1 %110, label %111, label %107

111:                                              ; preds = %107
  store i32 0, i32* %101, align 4
  %112 = load %"class.blink::KURL"*, %"class.blink::KURL"** %97, align 8
  br label %113

113:                                              ; preds = %111, %100
  %114 = phi %"class.blink::KURL"* [ %98, %100 ], [ %112, %111 ]
  %115 = getelementptr inbounds %"class.blink::KURL", %"class.blink::KURL"* %114, i64 0, i32 0
  tail call void @_ZN3WTF18PartitionAllocator11FreeBackingEPv(i8* %115) #11
  store %"class.blink::KURL"* null, %"class.blink::KURL"** %97, align 8
  br label %116

116:                                              ; preds = %96, %113
  %117 = getelementptr inbounds %"class.blink::FetchResponseData", %"class.blink::FetchResponseData"* %0, i64 0, i32 3, i32 0, i32 0, i32 0
  %118 = load i32*, i32** %117, align 8
  store i32* null, i32** %117, align 8
  %119 = icmp eq i32* %118, null
  br i1 %119, label %122, label %120

120:                                              ; preds = %116
  %121 = bitcast i32* %118 to i8*
  tail call void @_ZdlPv(i8* %121) #12
  br label %122

122:                                              ; preds = %116, %120
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden %"class.std::__1::__tree_end_node"* @_ZNKSt3__16__treeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEN5blink17CompareIgnoreCaseENS4_IS6_EEE4findIS6_EENS_21__tree_const_iteratorIS6_PNS_11__tree_nodeIS6_PvEElEERKT_(%"class.std::__1::__tree.279"*, %"class.std::__1::basic_string"* dereferenceable(24)) local_unnamed_addr #0 comdat align 2 {
  %3 = getelementptr inbounds %"class.std::__1::__tree.279", %"class.std::__1::__tree.279"* %0, i64 0, i32 1, i32 0, i32 0
  %4 = bitcast %"class.std::__1::__tree_end_node"* %3 to %"class.std::__1::__tree_node"**
  %5 = load %"class.std::__1::__tree_node"*, %"class.std::__1::__tree_node"** %4, align 8
  %6 = icmp eq %"class.std::__1::__tree_node"* %5, null
  br i1 %6, label %72, label %7

7:                                                ; preds = %2
  %8 = bitcast %"class.std::__1::basic_string"* %1 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %9 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %8, i64 0, i32 1, i32 0
  %10 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %1, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %11 = bitcast %"class.std::__1::basic_string"* %1 to i8*
  %12 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %1, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  br label %13

13:                                               ; preds = %13, %7
  %14 = phi %"class.std::__1::__tree_end_node"* [ %3, %7 ], [ %43, %13 ]
  %15 = phi %"class.std::__1::__tree_node"* [ %5, %7 ], [ %44, %13 ]
  %16 = getelementptr inbounds %"class.std::__1::__tree_node", %"class.std::__1::__tree_node"* %15, i64 0, i32 1
  %17 = bitcast %"class.std::__1::basic_string"* %16 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %18 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %17, i64 0, i32 1, i32 0
  %19 = load i8, i8* %18, align 1
  %20 = icmp slt i8 %19, 0
  %21 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %16, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %22 = load i8*, i8** %21, align 8
  %23 = bitcast %"class.std::__1::basic_string"* %16 to i8*
  %24 = select i1 %20, i8* %22, i8* %23
  %25 = getelementptr inbounds %"class.std::__1::__tree_node", %"class.std::__1::__tree_node"* %15, i64 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %26 = load i64, i64* %25, align 8
  %27 = zext i8 %19 to i64
  %28 = select i1 %20, i64 %26, i64 %27
  %29 = load i8, i8* %9, align 1
  %30 = icmp slt i8 %29, 0
  %31 = load i8*, i8** %10, align 8
  %32 = select i1 %30, i8* %31, i8* %11
  %33 = load i64, i64* %12, align 8
  %34 = zext i8 %29 to i64
  %35 = select i1 %30, i64 %33, i64 %34
  %36 = tail call i32 @_ZN4base27CompareCaseInsensitiveASCIIENS_16BasicStringPieceIcNSt3__111char_traitsIcEEEES4_(i8* %24, i64 %28, i8* %32, i64 %35) #11
  %37 = icmp slt i32 %36, 0
  %38 = getelementptr inbounds %"class.std::__1::__tree_node", %"class.std::__1::__tree_node"* %15, i64 0, i32 0, i32 1
  %39 = bitcast %"class.std::__1::__tree_node_base"** %38 to %"class.std::__1::__tree_node"**
  %40 = getelementptr inbounds %"class.std::__1::__tree_node", %"class.std::__1::__tree_node"* %15, i64 0, i32 0, i32 0
  %41 = bitcast %"class.std::__1::__tree_node"* %15 to %"class.std::__1::__tree_node"**
  %42 = select i1 %37, %"class.std::__1::__tree_node"** %39, %"class.std::__1::__tree_node"** %41
  %43 = select i1 %37, %"class.std::__1::__tree_end_node"* %14, %"class.std::__1::__tree_end_node"* %40
  %44 = load %"class.std::__1::__tree_node"*, %"class.std::__1::__tree_node"** %42, align 8
  %45 = icmp eq %"class.std::__1::__tree_node"* %44, null
  br i1 %45, label %46, label %13

46:                                               ; preds = %13
  %47 = icmp eq %"class.std::__1::__tree_end_node"* %43, %3
  br i1 %47, label %72, label %48

48:                                               ; preds = %46
  %49 = getelementptr inbounds %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_end_node"* %43, i64 4
  %50 = load i8, i8* %9, align 1
  %51 = icmp slt i8 %50, 0
  %52 = load i8*, i8** %10, align 8
  %53 = select i1 %51, i8* %52, i8* %11
  %54 = load i64, i64* %12, align 8
  %55 = zext i8 %50 to i64
  %56 = select i1 %51, i64 %54, i64 %55
  %57 = bitcast %"class.std::__1::__tree_end_node"* %49 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %58 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %57, i64 0, i32 1, i32 0
  %59 = load i8, i8* %58, align 1
  %60 = icmp slt i8 %59, 0
  %61 = bitcast %"class.std::__1::__tree_end_node"* %49 to i8**
  %62 = load i8*, i8** %61, align 8
  %63 = bitcast %"class.std::__1::__tree_end_node"* %49 to i8*
  %64 = select i1 %60, i8* %62, i8* %63
  %65 = getelementptr inbounds %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_end_node"* %43, i64 5
  %66 = bitcast %"class.std::__1::__tree_end_node"* %65 to i64*
  %67 = load i64, i64* %66, align 8
  %68 = zext i8 %59 to i64
  %69 = select i1 %60, i64 %67, i64 %68
  %70 = tail call i32 @_ZN4base27CompareCaseInsensitiveASCIIENS_16BasicStringPieceIcNSt3__111char_traitsIcEEEES4_(i8* %53, i64 %56, i8* %64, i64 %69) #11
  %71 = icmp slt i32 %70, 0
  br i1 %71, label %72, label %73

72:                                               ; preds = %46, %2, %48
  br label %73

73:                                               ; preds = %48, %72
  %74 = phi %"class.std::__1::__tree_end_node"* [ %3, %72 ], [ %43, %48 ]
  ret %"class.std::__1::__tree_end_node"* %74
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden dereferenceable(112) %"class.blink::KURL"* @_ZNK3WTF6VectorIN5blink4KURLELj0ENS_18PartitionAllocatorEE2atEj(%"class.WTF::Vector"*, i32) local_unnamed_addr #0 comdat align 2 {
  %3 = alloca %"class.logging::CheckOpResult", align 8
  %4 = alloca %"class.logging::CheckOpResult", align 8
  %5 = alloca %"class.logging::CheckError", align 8
  %6 = bitcast %"class.logging::CheckOpResult"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %6) #11
  %7 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %4, i64 0, i32 0
  store i8* inttoptr (i64 -6148914691236517206 to i8*), i8** %7, align 8
  %8 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %0, i64 0, i32 0, i32 0, i32 2
  %9 = load i32, i32* %8, align 4
  %10 = bitcast %"class.logging::CheckOpResult"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %10)
  %11 = icmp ugt i32 %9, %1
  br i1 %11, label %12, label %13

12:                                               ; preds = %2
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %10)
  store i8* null, i8** %7, align 8
  br label %22

13:                                               ; preds = %2
  %14 = tail call i8* @_ZN7logging15CheckOpValueStrEj(i32 %1) #11
  %15 = tail call i8* @_ZN7logging15CheckOpValueStrEj(i32 %9) #11
  call void @_ZN7logging13CheckOpResultC1EPKcPcS3_(%"class.logging::CheckOpResult"* nonnull %3, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.15, i64 0, i64 0), i8* %14, i8* %15) #11
  %16 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %3, i64 0, i32 0
  %17 = load i8*, i8** %16, align 8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %10)
  store i8* %17, i8** %7, align 8
  %18 = icmp eq i8* %17, null
  br i1 %18, label %22, label %19

19:                                               ; preds = %13
  %20 = bitcast %"class.logging::CheckError"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %20) #11
  call void @_ZN7logging10CheckError7CheckOpEPKciPNS_13CheckOpResultE(%"class.logging::CheckError"* nonnull sret %5, i8* getelementptr inbounds ([55 x i8], [55 x i8]* @.str.5, i64 0, i64 0), i32 1176, %"class.logging::CheckOpResult"* nonnull %4) #11
  %21 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %5) #11
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %5) #11
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %20) #11
  br label %22

22:                                               ; preds = %12, %13, %19
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %6) #11
  %23 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %0, i64 0, i32 0, i32 0, i32 0
  %24 = load %"class.blink::KURL"*, %"class.blink::KURL"** %23, align 8
  %25 = zext i32 %1 to i64
  %26 = getelementptr inbounds %"class.blink::KURL", %"class.blink::KURL"* %24, i64 %25
  ret %"class.blink::KURL"* %26
}

declare void @_ZN3net17AuthChallengeInfoC1ERKS0_(%"class.net::AuthChallengeInfo"*, %"class.net::AuthChallengeInfo"* dereferenceable(184)) unnamed_addr #2

; Function Attrs: nounwind
declare void @_ZN3net17AuthChallengeInfoD1Ev(%"class.net::AuthChallengeInfo"*) unnamed_addr #4

declare void @_ZN5blink5mojom5blink16FetchAPIResponseC1Ev(%"class.blink::mojom::blink::FetchAPIResponse"*) unnamed_addr #2

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden dereferenceable(184) %"class.net::AuthChallengeInfo"* @_ZN3net17AuthChallengeInfoaSERKS0_(%"class.net::AuthChallengeInfo"*, %"class.net::AuthChallengeInfo"* dereferenceable(184)) local_unnamed_addr #10 comdat align 2 {
  %3 = getelementptr inbounds %"class.net::AuthChallengeInfo", %"class.net::AuthChallengeInfo"* %1, i64 0, i32 0
  %4 = load i8, i8* %3, align 8, !range !4
  %5 = getelementptr inbounds %"class.net::AuthChallengeInfo", %"class.net::AuthChallengeInfo"* %0, i64 0, i32 0
  store i8 %4, i8* %5, align 8
  %6 = getelementptr inbounds %"class.net::AuthChallengeInfo", %"class.net::AuthChallengeInfo"* %0, i64 0, i32 1
  %7 = getelementptr inbounds %"class.net::AuthChallengeInfo", %"class.net::AuthChallengeInfo"* %1, i64 0, i32 1
  %8 = tail call dereferenceable(80) %"class.url::Origin"* @_ZN3url6OriginaSERKS0_(%"class.url::Origin"* %6, %"class.url::Origin"* dereferenceable(80) %7) #11
  %9 = getelementptr inbounds %"class.net::AuthChallengeInfo", %"class.net::AuthChallengeInfo"* %0, i64 0, i32 2
  %10 = getelementptr inbounds %"class.net::AuthChallengeInfo", %"class.net::AuthChallengeInfo"* %1, i64 0, i32 2
  %11 = icmp eq %"class.net::AuthChallengeInfo"* %0, %1
  br i1 %11, label %134, label %12

12:                                               ; preds = %2
  %13 = bitcast %"class.std::__1::basic_string"* %9 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %14 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %13, i64 0, i32 1, i32 0
  %15 = load i8, i8* %14, align 1
  %16 = icmp slt i8 %15, 0
  %17 = bitcast %"class.std::__1::basic_string"* %10 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %18 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %17, i64 0, i32 1, i32 0
  %19 = load i8, i8* %18, align 1
  %20 = icmp slt i8 %19, 0
  br i1 %16, label %31, label %21

21:                                               ; preds = %12
  br i1 %20, label %25, label %22

22:                                               ; preds = %21
  %23 = bitcast %"class.std::__1::basic_string"* %9 to i8*
  %24 = bitcast %"class.std::__1::basic_string"* %10 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %23, i8* align 8 %24, i64 24, i1 false) #11
  br label %41

25:                                               ; preds = %21
  %26 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %10, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %27 = load i8*, i8** %26, align 8
  %28 = getelementptr inbounds %"class.net::AuthChallengeInfo", %"class.net::AuthChallengeInfo"* %1, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %29 = load i64, i64* %28, align 8
  %30 = tail call dereferenceable(24) %"class.std::__1::basic_string"* @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE17__assign_no_aliasILb1EEERS5_PKcm(%"class.std::__1::basic_string"* %9, i8* %27, i64 %29) #11
  br label %41

31:                                               ; preds = %12
  %32 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %10, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %33 = load i8*, i8** %32, align 8
  %34 = getelementptr inbounds %"class.net::AuthChallengeInfo", %"class.net::AuthChallengeInfo"* %1, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %35 = load i64, i64* %34, align 8
  %36 = bitcast %"class.std::__1::basic_string"* %10 to i8*
  %37 = zext i8 %19 to i64
  %38 = select i1 %20, i8* %33, i8* %36
  %39 = select i1 %20, i64 %35, i64 %37
  %40 = tail call dereferenceable(24) %"class.std::__1::basic_string"* @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE17__assign_no_aliasILb0EEERS5_PKcm(%"class.std::__1::basic_string"* %9, i8* %38, i64 %39) #11
  br label %41

41:                                               ; preds = %22, %25, %31
  %42 = getelementptr inbounds %"class.net::AuthChallengeInfo", %"class.net::AuthChallengeInfo"* %0, i64 0, i32 3
  %43 = getelementptr inbounds %"class.net::AuthChallengeInfo", %"class.net::AuthChallengeInfo"* %1, i64 0, i32 3
  %44 = bitcast %"class.std::__1::basic_string"* %42 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %45 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %44, i64 0, i32 1, i32 0
  %46 = load i8, i8* %45, align 1
  %47 = icmp slt i8 %46, 0
  %48 = bitcast %"class.std::__1::basic_string"* %43 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %49 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %48, i64 0, i32 1, i32 0
  %50 = load i8, i8* %49, align 1
  %51 = icmp slt i8 %50, 0
  br i1 %47, label %62, label %52

52:                                               ; preds = %41
  br i1 %51, label %56, label %53

53:                                               ; preds = %52
  %54 = bitcast %"class.std::__1::basic_string"* %42 to i8*
  %55 = bitcast %"class.std::__1::basic_string"* %43 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %54, i8* align 8 %55, i64 24, i1 false) #11
  br label %72

56:                                               ; preds = %52
  %57 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %43, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %58 = load i8*, i8** %57, align 8
  %59 = getelementptr inbounds %"class.net::AuthChallengeInfo", %"class.net::AuthChallengeInfo"* %1, i64 0, i32 3, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %60 = load i64, i64* %59, align 8
  %61 = tail call dereferenceable(24) %"class.std::__1::basic_string"* @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE17__assign_no_aliasILb1EEERS5_PKcm(%"class.std::__1::basic_string"* %42, i8* %58, i64 %60) #11
  br label %72

62:                                               ; preds = %41
  %63 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %43, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %64 = load i8*, i8** %63, align 8
  %65 = getelementptr inbounds %"class.net::AuthChallengeInfo", %"class.net::AuthChallengeInfo"* %1, i64 0, i32 3, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %66 = load i64, i64* %65, align 8
  %67 = bitcast %"class.std::__1::basic_string"* %43 to i8*
  %68 = zext i8 %50 to i64
  %69 = select i1 %51, i8* %64, i8* %67
  %70 = select i1 %51, i64 %66, i64 %68
  %71 = tail call dereferenceable(24) %"class.std::__1::basic_string"* @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE17__assign_no_aliasILb0EEERS5_PKcm(%"class.std::__1::basic_string"* %42, i8* %69, i64 %70) #11
  br label %72

72:                                               ; preds = %53, %56, %62
  %73 = getelementptr inbounds %"class.net::AuthChallengeInfo", %"class.net::AuthChallengeInfo"* %0, i64 0, i32 4
  %74 = getelementptr inbounds %"class.net::AuthChallengeInfo", %"class.net::AuthChallengeInfo"* %1, i64 0, i32 4
  %75 = bitcast %"class.std::__1::basic_string"* %73 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %76 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %75, i64 0, i32 1, i32 0
  %77 = load i8, i8* %76, align 1
  %78 = icmp slt i8 %77, 0
  %79 = bitcast %"class.std::__1::basic_string"* %74 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %80 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %79, i64 0, i32 1, i32 0
  %81 = load i8, i8* %80, align 1
  %82 = icmp slt i8 %81, 0
  br i1 %78, label %93, label %83

83:                                               ; preds = %72
  br i1 %82, label %87, label %84

84:                                               ; preds = %83
  %85 = bitcast %"class.std::__1::basic_string"* %73 to i8*
  %86 = bitcast %"class.std::__1::basic_string"* %74 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %85, i8* align 8 %86, i64 24, i1 false) #11
  br label %103

87:                                               ; preds = %83
  %88 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %74, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %89 = load i8*, i8** %88, align 8
  %90 = getelementptr inbounds %"class.net::AuthChallengeInfo", %"class.net::AuthChallengeInfo"* %1, i64 0, i32 4, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %91 = load i64, i64* %90, align 8
  %92 = tail call dereferenceable(24) %"class.std::__1::basic_string"* @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE17__assign_no_aliasILb1EEERS5_PKcm(%"class.std::__1::basic_string"* %73, i8* %89, i64 %91) #11
  br label %103

93:                                               ; preds = %72
  %94 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %74, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %95 = load i8*, i8** %94, align 8
  %96 = getelementptr inbounds %"class.net::AuthChallengeInfo", %"class.net::AuthChallengeInfo"* %1, i64 0, i32 4, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %97 = load i64, i64* %96, align 8
  %98 = bitcast %"class.std::__1::basic_string"* %74 to i8*
  %99 = zext i8 %81 to i64
  %100 = select i1 %82, i8* %95, i8* %98
  %101 = select i1 %82, i64 %97, i64 %99
  %102 = tail call dereferenceable(24) %"class.std::__1::basic_string"* @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE17__assign_no_aliasILb0EEERS5_PKcm(%"class.std::__1::basic_string"* %73, i8* %100, i64 %101) #11
  br label %103

103:                                              ; preds = %84, %87, %93
  %104 = getelementptr inbounds %"class.net::AuthChallengeInfo", %"class.net::AuthChallengeInfo"* %0, i64 0, i32 5
  %105 = getelementptr inbounds %"class.net::AuthChallengeInfo", %"class.net::AuthChallengeInfo"* %1, i64 0, i32 5
  %106 = bitcast %"class.std::__1::basic_string"* %104 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %107 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %106, i64 0, i32 1, i32 0
  %108 = load i8, i8* %107, align 1
  %109 = icmp slt i8 %108, 0
  %110 = bitcast %"class.std::__1::basic_string"* %105 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %111 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %110, i64 0, i32 1, i32 0
  %112 = load i8, i8* %111, align 1
  %113 = icmp slt i8 %112, 0
  br i1 %109, label %124, label %114

114:                                              ; preds = %103
  br i1 %113, label %118, label %115

115:                                              ; preds = %114
  %116 = bitcast %"class.std::__1::basic_string"* %104 to i8*
  %117 = bitcast %"class.std::__1::basic_string"* %105 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %116, i8* align 8 %117, i64 24, i1 false) #11
  br label %134

118:                                              ; preds = %114
  %119 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %105, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %120 = load i8*, i8** %119, align 8
  %121 = getelementptr inbounds %"class.net::AuthChallengeInfo", %"class.net::AuthChallengeInfo"* %1, i64 0, i32 5, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %122 = load i64, i64* %121, align 8
  %123 = tail call dereferenceable(24) %"class.std::__1::basic_string"* @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE17__assign_no_aliasILb1EEERS5_PKcm(%"class.std::__1::basic_string"* %104, i8* %120, i64 %122) #11
  br label %134

124:                                              ; preds = %103
  %125 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %105, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %126 = load i8*, i8** %125, align 8
  %127 = getelementptr inbounds %"class.net::AuthChallengeInfo", %"class.net::AuthChallengeInfo"* %1, i64 0, i32 5, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %128 = load i64, i64* %127, align 8
  %129 = bitcast %"class.std::__1::basic_string"* %105 to i8*
  %130 = zext i8 %112 to i64
  %131 = select i1 %113, i8* %126, i8* %129
  %132 = select i1 %113, i64 %128, i64 %130
  %133 = tail call dereferenceable(24) %"class.std::__1::basic_string"* @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE17__assign_no_aliasILb0EEERS5_PKcm(%"class.std::__1::basic_string"* %104, i8* %131, i64 %132) #11
  br label %134

134:                                              ; preds = %2, %115, %118, %124
  ret %"class.net::AuthChallengeInfo"* %0
}

declare dereferenceable(80) %"class.url::Origin"* @_ZN3url6OriginaSERKS0_(%"class.url::Origin"*, %"class.url::Origin"* dereferenceable(80)) local_unnamed_addr #2

declare void @_ZN5blink15FetchHeaderListC1Ev(%"class.blink::FetchHeaderList"*) unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden i8* @_ZN5blink10ThreadHeap8AllocateINS_15FetchHeaderListEEEPhm(i64) local_unnamed_addr #0 comdat align 2 {
  %2 = load %"class.WTF::ThreadSpecific"*, %"class.WTF::ThreadSpecific"** @_ZN5blink11ThreadState16thread_specific_E, align 8
  %3 = getelementptr inbounds %"class.WTF::ThreadSpecific", %"class.WTF::ThreadSpecific"* %2, i64 0, i32 1
  %4 = tail call i8* @_ZNK4base18ThreadLocalStorage4Slot3GetEv(%"class.base::ThreadLocalStorage::Slot"* %3) #11
  %5 = icmp eq i8* %4, null
  br i1 %5, label %6, label %8, !prof !2

6:                                                ; preds = %1
  %7 = tail call i8* @_ZN3WTF10Partitions16FastZeroedMallocEmPKc(i64 8, i8* getelementptr inbounds ([68 x i8], [68 x i8]* @__PRETTY_FUNCTION__._ZN3WTF21GetStringWithTypeNameIPN5blink11ThreadStateEEEPKcv, i64 0, i64 0)) #11
  tail call void @_ZN4base18ThreadLocalStorage4Slot3SetEPv(%"class.base::ThreadLocalStorage::Slot"* %3, i8* %7) #11
  br label %8

8:                                                ; preds = %1, %6
  %9 = phi i8* [ %7, %6 ], [ %4, %1 ]
  %10 = bitcast i8* %9 to %"class.blink::ThreadState"**
  %11 = load %"class.blink::ThreadState"*, %"class.blink::ThreadState"** %10, align 8
  %12 = getelementptr inbounds %"class.blink::ThreadState", %"class.blink::ThreadState"* %11, i64 0, i32 0, i32 0, i32 0, i32 0
  %13 = load %"class.blink::ThreadHeap"*, %"class.blink::ThreadHeap"** %12, align 8
  %14 = icmp ult i64 %0, 64
  %15 = icmp ugt i64 %0, 31
  %16 = zext i1 %15 to i32
  %17 = icmp ult i64 %0, 128
  %18 = select i1 %17, i32 2, i32 3
  %19 = select i1 %14, i32 %16, i32 %18
  %20 = load atomic i32, i32* getelementptr inbounds ({ { i32 } }, { { i32 } }* @_ZZN5blink11GCInfoTraitINS_15FetchHeaderListEE5IndexEvE13gc_info_index, i64 0, i32 0, i32 0) acquire, align 4
  %21 = icmp eq i32 %20, 0
  br i1 %21, label %22, label %25

22:                                               ; preds = %8
  %23 = load %"class.blink::GCInfoTable"*, %"class.blink::GCInfoTable"** @_ZN5blink11GCInfoTable13global_table_E, align 8
  %24 = tail call i32 @_ZN5blink11GCInfoTable17EnsureGCInfoIndexEPKNS_6GCInfoEPNSt3__16atomicIjEE(%"class.blink::GCInfoTable"* %23, %"struct.blink::GCInfo"* nonnull @_ZZN5blink11GCInfoTraitINS_15FetchHeaderListEE5IndexEvE7kGcInfo, %"struct.std::__1::atomic"* bitcast ({ { i32 } }* @_ZZN5blink11GCInfoTraitINS_15FetchHeaderListEE5IndexEvE13gc_info_index to %"struct.std::__1::atomic"*)) #11
  br label %25

25:                                               ; preds = %8, %22
  %26 = phi i32 [ %20, %8 ], [ %24, %22 ]
  %27 = tail call i8* @_ZN5blink10ThreadHeap20AllocateOnArenaIndexEPNS_11ThreadStateEmijPKc(%"class.blink::ThreadHeap"* %13, %"class.blink::ThreadState"* %11, i64 %0, i32 %19, i32 %26, i8* getelementptr inbounds ([70 x i8], [70 x i8]* @__PRETTY_FUNCTION__._ZN3WTF21GetStringWithTypeNameIN5blink15FetchHeaderListEEEPKcv, i64 0, i64 0))
  ret i8* %27
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN5blink10TraceTraitINS_15FetchHeaderListEE5TraceEPNS_7VisitorEPKv(%"class.blink::Visitor"*, i8*) #0 comdat align 2 {
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN5blink8internal14FinalizerTraitINS_15FetchHeaderListEE8FinalizeEPv(i8*) #0 comdat align 2 {
  %2 = bitcast i8* %0 to %"class.blink::FetchHeaderList"*
  tail call void @_ZN5blink15FetchHeaderListD1Ev(%"class.blink::FetchHeaderList"* %2) #11
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden { i8*, i8 } @_ZN5blink9NameTraitINS_15FetchHeaderListEE7GetNameEPKv(i8*) #0 comdat align 2 {
  ret { i8*, i8 } { i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.14, i64 0, i64 0), i8 1 }
}

; Function Attrs: nounwind
declare void @_ZN5blink15FetchHeaderListD1Ev(%"class.blink::FetchHeaderList"*) unnamed_addr #4

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN5blink10TraceTraitINS_16BodyStreamBufferEE5TraceEPNS_7VisitorEPKv(%"class.blink::Visitor"*, i8*) #0 comdat align 2 {
  %3 = bitcast i8* %1 to %"class.blink::BodyStreamBuffer"*
  tail call void @_ZNK5blink16BodyStreamBuffer5TraceEPNS_7VisitorE(%"class.blink::BodyStreamBuffer"* %3, %"class.blink::Visitor"* %0) #11
  ret void
}

declare void @_ZNK5blink16BodyStreamBuffer5TraceEPNS_7VisitorE(%"class.blink::BodyStreamBuffer"*, %"class.blink::Visitor"*) unnamed_addr #2

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { norecurse nounwind readonly ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind readnone speculatable }
attributes #6 = { cold noreturn nounwind }
attributes #7 = { noinline nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #8 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #9 = { nobuiltin nofree "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #10 = { inlinehint nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #11 = { nounwind }
attributes #12 = { builtin nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{!"branch_weights", i32 1, i32 2000}
!3 = !{!"branch_weights", i32 2000, i32 1}
!4 = !{i8 0, i8 2}
!5 = !{!6}
!6 = distinct !{!6, !7, !"_ZN5blink5mojom5blink16FetchAPIResponse3NewIJEEEN4mojo9StructPtrIS2_EEDpOT_: argument 0"}
!7 = distinct !{!7, !"_ZN5blink5mojom5blink16FetchAPIResponse3NewIJEEEN4mojo9StructPtrIS2_EEDpOT_"}
!8 = !{!9}
!9 = distinct !{!9, !10, !"_ZNSt3__16__treeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEN5blink17CompareIgnoreCaseENS4_IS6_EEE16__construct_nodeIJRKS6_EEENS_10unique_ptrINS_11__tree_nodeIS6_PvEENS_22__tree_node_destructorINS4_ISH_EEEEEEDpOT_: argument 0"}
!10 = distinct !{!10, !"_ZNSt3__16__treeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEN5blink17CompareIgnoreCaseENS4_IS6_EEE16__construct_nodeIJRKS6_EEENS_10unique_ptrINS_11__tree_nodeIS6_PvEENS_22__tree_node_destructorINS4_ISH_EEEEEEDpOT_"}
