; ModuleID = '../../third_party/opus/src/src/mapping_matrix.c'
source_filename = "../../third_party/opus/src/src/mapping_matrix.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%struct.MappingMatrix = type { i32, i32, i32 }

@.str = private unnamed_addr constant [78 x i8] c"assertion failed: align(data_size) == align(rows * cols * sizeof(opus_int16))\00", align 1
@.str.1 = private unnamed_addr constant [48 x i8] c"../../third_party/opus/src/src/mapping_matrix.c\00", align 1
@.str.2 = private unnamed_addr constant [76 x i8] c"assertion failed: input_rows <= matrix->cols && output_rows <= matrix->rows\00", align 1
@mapping_matrix_foa_mixing = hidden local_unnamed_addr constant %struct.MappingMatrix { i32 6, i32 6, i32 0 }, align 4
@mapping_matrix_foa_mixing_data = hidden local_unnamed_addr constant [36 x i16] [i16 16384, i16 0, i16 -16384, i16 23170, i16 0, i16 0, i16 16384, i16 23170, i16 16384, i16 0, i16 0, i16 0, i16 16384, i16 0, i16 -16384, i16 -23170, i16 0, i16 0, i16 16384, i16 -23170, i16 16384, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 32767, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 32767], align 16
@mapping_matrix_soa_mixing = hidden local_unnamed_addr constant %struct.MappingMatrix { i32 11, i32 11, i32 0 }, align 4
@mapping_matrix_soa_mixing_data = hidden local_unnamed_addr constant [121 x i16] [i16 10923, i16 7723, i16 13377, i16 -13377, i16 11585, i16 9459, i16 7723, i16 -16384, i16 -6689, i16 0, i16 0, i16 10923, i16 7723, i16 13377, i16 13377, i16 -11585, i16 9459, i16 7723, i16 16384, i16 -6689, i16 0, i16 0, i16 10923, i16 -15447, i16 13377, i16 0, i16 0, i16 -18919, i16 7723, i16 0, i16 13377, i16 0, i16 0, i16 10923, i16 7723, i16 -13377, i16 -13377, i16 11585, i16 -9459, i16 7723, i16 16384, i16 -6689, i16 0, i16 0, i16 10923, i16 -7723, i16 0, i16 13377, i16 -16384, i16 0, i16 -15447, i16 0, i16 9459, i16 0, i16 0, i16 10923, i16 -7723, i16 0, i16 -13377, i16 16384, i16 0, i16 -15447, i16 0, i16 9459, i16 0, i16 0, i16 10923, i16 15447, i16 0, i16 0, i16 0, i16 0, i16 -15447, i16 0, i16 -18919, i16 0, i16 0, i16 10923, i16 7723, i16 -13377, i16 13377, i16 -11585, i16 -9459, i16 7723, i16 -16384, i16 -6689, i16 0, i16 0, i16 10923, i16 -15447, i16 -13377, i16 0, i16 0, i16 18919, i16 7723, i16 0, i16 13377, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 32767, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 32767], align 16
@mapping_matrix_toa_mixing = hidden local_unnamed_addr constant %struct.MappingMatrix { i32 18, i32 18, i32 0 }, align 4
@mapping_matrix_toa_mixing_data = hidden local_unnamed_addr constant [324 x i16] [i16 8208, i16 0, i16 -881, i16 14369, i16 0, i16 0, i16 -8192, i16 -4163, i16 13218, i16 0, i16 0, i16 0, i16 11095, i16 -8836, i16 -6218, i16 14833, i16 0, i16 0, i16 8208, i16 -10161, i16 881, i16 10161, i16 -13218, i16 -2944, i16 -8192, i16 2944, i16 0, i16 -10488, i16 -6218, i16 6248, i16 -11095, i16 -6248, i16 0, i16 -10488, i16 0, i16 0, i16 8208, i16 10161, i16 881, i16 -10161, i16 -13218, i16 2944, i16 -8192, i16 -2944, i16 0, i16 10488, i16 -6218, i16 -6248, i16 -11095, i16 6248, i16 0, i16 10488, i16 0, i16 0, i16 8176, i16 5566, i16 -11552, i16 5566, i16 9681, i16 -11205, i16 8192, i16 -11205, i16 0, i16 4920, i16 -15158, i16 9756, i16 -3334, i16 9756, i16 0, i16 -4920, i16 0, i16 0, i16 8176, i16 7871, i16 11552, i16 0, i16 0, i16 15846, i16 8192, i16 0, i16 -9681, i16 -6958, i16 0, i16 13797, i16 3334, i16 0, i16 -15158, i16 0, i16 0, i16 0, i16 8176, i16 0, i16 11552, i16 7871, i16 0, i16 0, i16 8192, i16 15846, i16 9681, i16 0, i16 0, i16 0, i16 3334, i16 13797, i16 15158, i16 6958, i16 0, i16 0, i16 8176, i16 5566, i16 -11552, i16 -5566, i16 -9681, i16 -11205, i16 8192, i16 11205, i16 0, i16 4920, i16 15158, i16 9756, i16 -3334, i16 -9756, i16 0, i16 4920, i16 0, i16 0, i16 8208, i16 14369, i16 -881, i16 0, i16 0, i16 -4163, i16 -8192, i16 0, i16 -13218, i16 -14833, i16 0, i16 -8836, i16 11095, i16 0, i16 6218, i16 0, i16 0, i16 0, i16 8208, i16 10161, i16 881, i16 10161, i16 13218, i16 2944, i16 -8192, i16 2944, i16 0, i16 10488, i16 6218, i16 -6248, i16 -11095, i16 -6248, i16 0, i16 -10488, i16 0, i16 0, i16 8208, i16 -14369, i16 -881, i16 0, i16 0, i16 4163, i16 -8192, i16 0, i16 -13218, i16 14833, i16 0, i16 8836, i16 11095, i16 0, i16 6218, i16 0, i16 0, i16 0, i16 8208, i16 0, i16 -881, i16 -14369, i16 0, i16 0, i16 -8192, i16 4163, i16 13218, i16 0, i16 0, i16 0, i16 11095, i16 8836, i16 -6218, i16 -14833, i16 0, i16 0, i16 8176, i16 -5566, i16 -11552, i16 5566, i16 -9681, i16 11205, i16 8192, i16 -11205, i16 0, i16 -4920, i16 15158, i16 -9756, i16 -3334, i16 9756, i16 0, i16 -4920, i16 0, i16 0, i16 8176, i16 0, i16 11552, i16 -7871, i16 0, i16 0, i16 8192, i16 -15846, i16 9681, i16 0, i16 0, i16 0, i16 3334, i16 -13797, i16 15158, i16 -6958, i16 0, i16 0, i16 8176, i16 -7871, i16 11552, i16 0, i16 0, i16 -15846, i16 8192, i16 0, i16 -9681, i16 6958, i16 0, i16 -13797, i16 3334, i16 0, i16 -15158, i16 0, i16 0, i16 0, i16 8176, i16 -5566, i16 -11552, i16 -5566, i16 9681, i16 11205, i16 8192, i16 11205, i16 0, i16 -4920, i16 -15158, i16 -9756, i16 -3334, i16 -9756, i16 0, i16 4920, i16 0, i16 0, i16 8208, i16 -10161, i16 881, i16 -10161, i16 13218, i16 -2944, i16 -8192, i16 -2944, i16 0, i16 -10488, i16 6218, i16 6248, i16 -11095, i16 6248, i16 0, i16 10488, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 32767, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 32767], align 16
@mapping_matrix_foa_demixing = hidden local_unnamed_addr constant %struct.MappingMatrix { i32 6, i32 6, i32 0 }, align 4
@mapping_matrix_foa_demixing_data = hidden local_unnamed_addr constant [36 x i16] [i16 16384, i16 16384, i16 16384, i16 16384, i16 0, i16 0, i16 0, i16 23170, i16 0, i16 -23170, i16 0, i16 0, i16 -16384, i16 16384, i16 -16384, i16 16384, i16 0, i16 0, i16 23170, i16 0, i16 -23170, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 32767, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 32767], align 16
@mapping_matrix_soa_demixing = hidden local_unnamed_addr constant %struct.MappingMatrix { i32 11, i32 11, i32 3050 }, align 4
@mapping_matrix_soa_demixing_data = hidden local_unnamed_addr constant [121 x i16] [i16 2771, i16 2771, i16 2771, i16 2771, i16 2771, i16 2771, i16 2771, i16 2771, i16 2771, i16 0, i16 0, i16 10033, i16 10033, i16 -20066, i16 10033, i16 14189, i16 14189, i16 -28378, i16 10033, i16 -20066, i16 0, i16 0, i16 3393, i16 3393, i16 3393, i16 -3393, i16 0, i16 0, i16 0, i16 -3393, i16 -3393, i16 0, i16 0, i16 -17378, i16 17378, i16 0, i16 -17378, i16 -24576, i16 24576, i16 0, i16 17378, i16 0, i16 0, i16 0, i16 -14189, i16 14189, i16 0, i16 -14189, i16 -28378, i16 28378, i16 0, i16 14189, i16 0, i16 0, i16 0, i16 2399, i16 2399, i16 -4799, i16 -2399, i16 0, i16 0, i16 0, i16 -2399, i16 4799, i16 0, i16 0, i16 1959, i16 1959, i16 1959, i16 1959, i16 -3918, i16 -3918, i16 -3918, i16 1959, i16 1959, i16 0, i16 0, i16 -4156, i16 4156, i16 0, i16 4156, i16 0, i16 0, i16 0, i16 -4156, i16 0, i16 0, i16 0, i16 8192, i16 8192, i16 -16384, i16 8192, i16 16384, i16 16384, i16 -32768, i16 8192, i16 -16384, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 8312, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 8312], align 16
@mapping_matrix_toa_demixing = hidden local_unnamed_addr constant %struct.MappingMatrix { i32 18, i32 18, i32 0 }, align 4
@mapping_matrix_toa_demixing_data = hidden local_unnamed_addr constant [324 x i16] [i16 8192, i16 8192, i16 8192, i16 8192, i16 8192, i16 8192, i16 8192, i16 8192, i16 8192, i16 8192, i16 8192, i16 8192, i16 8192, i16 8192, i16 8192, i16 8192, i16 0, i16 0, i16 0, i16 -9779, i16 9779, i16 6263, i16 8857, i16 0, i16 6263, i16 13829, i16 9779, i16 -13829, i16 0, i16 -6263, i16 0, i16 -8857, i16 -6263, i16 -9779, i16 0, i16 0, i16 -3413, i16 3413, i16 3413, i16 -11359, i16 11359, i16 11359, i16 -11359, i16 -3413, i16 3413, i16 -3413, i16 -3413, i16 -11359, i16 11359, i16 11359, i16 -11359, i16 3413, i16 0, i16 0, i16 13829, i16 9779, i16 -9779, i16 6263, i16 0, i16 8857, i16 -6263, i16 0, i16 9779, i16 0, i16 -13829, i16 6263, i16 -8857, i16 0, i16 -6263, i16 -9779, i16 0, i16 0, i16 0, i16 -15617, i16 -15617, i16 6406, i16 0, i16 0, i16 -6406, i16 0, i16 15617, i16 0, i16 0, i16 -6406, i16 0, i16 0, i16 6406, i16 15617, i16 0, i16 0, i16 0, i16 -5003, i16 5003, i16 -10664, i16 15081, i16 0, i16 -10664, i16 -7075, i16 5003, i16 7075, i16 0, i16 10664, i16 0, i16 -15081, i16 10664, i16 -5003, i16 0, i16 0, i16 -8176, i16 -8176, i16 -8176, i16 8208, i16 8208, i16 8208, i16 8208, i16 -8176, i16 -8176, i16 -8176, i16 -8176, i16 8208, i16 8208, i16 8208, i16 8208, i16 -8176, i16 0, i16 0, i16 -7075, i16 5003, i16 -5003, i16 -10664, i16 0, i16 15081, i16 10664, i16 0, i16 5003, i16 0, i16 7075, i16 -10664, i16 -15081, i16 0, i16 10664, i16 -5003, i16 0, i16 0, i16 15617, i16 0, i16 0, i16 0, i16 -6406, i16 6406, i16 0, i16 -15617, i16 0, i16 -15617, i16 15617, i16 0, i16 6406, i16 -6406, i16 0, i16 0, i16 0, i16 0, i16 0, i16 -11393, i16 11393, i16 2993, i16 -4233, i16 0, i16 2993, i16 -16112, i16 11393, i16 16112, i16 0, i16 -2993, i16 0, i16 4233, i16 -2993, i16 -11393, i16 0, i16 0, i16 0, i16 -9974, i16 -9974, i16 -13617, i16 0, i16 0, i16 13617, i16 0, i16 9974, i16 0, i16 0, i16 13617, i16 0, i16 0, i16 -13617, i16 9974, i16 0, i16 0, i16 0, i16 5579, i16 -5579, i16 10185, i16 14403, i16 0, i16 10185, i16 -7890, i16 -5579, i16 7890, i16 0, i16 -10185, i16 0, i16 -14403, i16 -10185, i16 5579, i16 0, i16 0, i16 11826, i16 -11826, i16 -11826, i16 -901, i16 901, i16 901, i16 -901, i16 11826, i16 -11826, i16 11826, i16 11826, i16 -901, i16 901, i16 901, i16 -901, i16 -11826, i16 0, i16 0, i16 -7890, i16 -5579, i16 5579, i16 10185, i16 0, i16 14403, i16 -10185, i16 0, i16 -5579, i16 0, i16 7890, i16 10185, i16 -14403, i16 0, i16 -10185, i16 5579, i16 0, i16 0, i16 -9974, i16 0, i16 0, i16 0, i16 -13617, i16 13617, i16 0, i16 9974, i16 0, i16 9974, i16 -9974, i16 0, i16 13617, i16 -13617, i16 0, i16 0, i16 0, i16 0, i16 16112, i16 -11393, i16 11393, i16 -2993, i16 0, i16 4233, i16 2993, i16 0, i16 -11393, i16 0, i16 -16112, i16 -2993, i16 -4233, i16 0, i16 2993, i16 11393, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 32767, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 32767], align 16

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden i32 @mapping_matrix_get_size(i32, i32) local_unnamed_addr #0 {
  %3 = icmp sgt i32 %0, 255
  %4 = icmp sgt i32 %1, 255
  %5 = or i1 %3, %4
  br i1 %5, label %13, label %6

6:                                                ; preds = %2
  %7 = shl i32 %0, 1
  %8 = mul i32 %7, %1
  %9 = icmp sgt i32 %8, 65004
  br i1 %9, label %13, label %10

10:                                               ; preds = %6
  %11 = add nsw i32 %8, 23
  %12 = and i32 %11, -8
  br label %13

13:                                               ; preds = %6, %2, %10
  %14 = phi i32 [ %12, %10 ], [ 0, %2 ], [ 0, %6 ]
  ret i32 %14
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden i16* @mapping_matrix_get_data(%struct.MappingMatrix* readnone) local_unnamed_addr #0 {
  %2 = getelementptr inbounds %struct.MappingMatrix, %struct.MappingMatrix* %0, i64 1, i32 1
  %3 = bitcast i32* %2 to i16*
  ret i16* %3
}

; Function Attrs: nounwind ssp uwtable
define hidden void @mapping_matrix_init(%struct.MappingMatrix* nocapture, i32, i32, i32, i16* nocapture readonly, i32) local_unnamed_addr #1 {
  %7 = bitcast i16* %4 to i8*
  %8 = add i32 %5, 7
  %9 = mul i32 %2, %1
  %10 = shl i32 %9, 1
  %11 = add i32 %10, 7
  %12 = xor i32 %8, %11
  %13 = icmp ult i32 %12, 8
  br i1 %13, label %15, label %14

14:                                               ; preds = %6
  tail call void @celt_fatal(i8* getelementptr inbounds ([78 x i8], [78 x i8]* @.str, i64 0, i64 0), i8* getelementptr inbounds ([48 x i8], [48 x i8]* @.str.1, i64 0, i64 0), i32 72) #5
  unreachable

15:                                               ; preds = %6
  %16 = getelementptr inbounds %struct.MappingMatrix, %struct.MappingMatrix* %0, i64 0, i32 0
  store i32 %1, i32* %16, align 4
  %17 = getelementptr inbounds %struct.MappingMatrix, %struct.MappingMatrix* %0, i64 0, i32 1
  store i32 %2, i32* %17, align 4
  %18 = getelementptr inbounds %struct.MappingMatrix, %struct.MappingMatrix* %0, i64 0, i32 2
  store i32 %3, i32* %18, align 4
  %19 = getelementptr inbounds %struct.MappingMatrix, %struct.MappingMatrix* %0, i64 1, i32 1
  %20 = bitcast i32* %19 to i16*
  %21 = icmp sgt i32 %9, 0
  br i1 %21, label %22, label %152

22:                                               ; preds = %15
  %23 = zext i32 %9 to i64
  %24 = icmp ult i32 %9, 16
  br i1 %24, label %115, label %25

25:                                               ; preds = %22
  %26 = getelementptr %struct.MappingMatrix, %struct.MappingMatrix* %0, i64 1, i32 1
  %27 = getelementptr %struct.MappingMatrix, %struct.MappingMatrix* %0, i64 1, i32 1
  %28 = bitcast i32* %27 to i8*
  %29 = shl nuw nsw i64 %23, 1
  %30 = getelementptr i8, i8* %28, i64 %29
  %31 = getelementptr i16, i16* %4, i64 %23
  %32 = bitcast i16* %31 to i32*
  %33 = icmp ult i32* %26, %32
  %34 = icmp ugt i8* %30, %7
  %35 = and i1 %33, %34
  br i1 %35, label %115, label %36

36:                                               ; preds = %25
  %37 = and i64 %23, 4294967280
  %38 = add nsw i64 %37, -16
  %39 = lshr exact i64 %38, 4
  %40 = add nuw nsw i64 %39, 1
  %41 = and i64 %40, 3
  %42 = icmp ult i64 %38, 48
  br i1 %42, label %94, label %43

43:                                               ; preds = %36
  %44 = sub nsw i64 %40, %41
  br label %45

45:                                               ; preds = %45, %43
  %46 = phi i64 [ 0, %43 ], [ %91, %45 ]
  %47 = phi i64 [ %44, %43 ], [ %92, %45 ]
  %48 = getelementptr inbounds i16, i16* %4, i64 %46
  %49 = bitcast i16* %48 to <8 x i16>*
  %50 = load <8 x i16>, <8 x i16>* %49, align 2, !alias.scope !2
  %51 = getelementptr inbounds i16, i16* %48, i64 8
  %52 = bitcast i16* %51 to <8 x i16>*
  %53 = load <8 x i16>, <8 x i16>* %52, align 2, !alias.scope !2
  %54 = getelementptr inbounds i16, i16* %20, i64 %46
  %55 = bitcast i16* %54 to <8 x i16>*
  store <8 x i16> %50, <8 x i16>* %55, align 2, !alias.scope !5, !noalias !2
  %56 = getelementptr inbounds i16, i16* %54, i64 8
  %57 = bitcast i16* %56 to <8 x i16>*
  store <8 x i16> %53, <8 x i16>* %57, align 2, !alias.scope !5, !noalias !2
  %58 = or i64 %46, 16
  %59 = getelementptr inbounds i16, i16* %4, i64 %58
  %60 = bitcast i16* %59 to <8 x i16>*
  %61 = load <8 x i16>, <8 x i16>* %60, align 2, !alias.scope !2
  %62 = getelementptr inbounds i16, i16* %59, i64 8
  %63 = bitcast i16* %62 to <8 x i16>*
  %64 = load <8 x i16>, <8 x i16>* %63, align 2, !alias.scope !2
  %65 = getelementptr inbounds i16, i16* %20, i64 %58
  %66 = bitcast i16* %65 to <8 x i16>*
  store <8 x i16> %61, <8 x i16>* %66, align 2, !alias.scope !5, !noalias !2
  %67 = getelementptr inbounds i16, i16* %65, i64 8
  %68 = bitcast i16* %67 to <8 x i16>*
  store <8 x i16> %64, <8 x i16>* %68, align 2, !alias.scope !5, !noalias !2
  %69 = or i64 %46, 32
  %70 = getelementptr inbounds i16, i16* %4, i64 %69
  %71 = bitcast i16* %70 to <8 x i16>*
  %72 = load <8 x i16>, <8 x i16>* %71, align 2, !alias.scope !2
  %73 = getelementptr inbounds i16, i16* %70, i64 8
  %74 = bitcast i16* %73 to <8 x i16>*
  %75 = load <8 x i16>, <8 x i16>* %74, align 2, !alias.scope !2
  %76 = getelementptr inbounds i16, i16* %20, i64 %69
  %77 = bitcast i16* %76 to <8 x i16>*
  store <8 x i16> %72, <8 x i16>* %77, align 2, !alias.scope !5, !noalias !2
  %78 = getelementptr inbounds i16, i16* %76, i64 8
  %79 = bitcast i16* %78 to <8 x i16>*
  store <8 x i16> %75, <8 x i16>* %79, align 2, !alias.scope !5, !noalias !2
  %80 = or i64 %46, 48
  %81 = getelementptr inbounds i16, i16* %4, i64 %80
  %82 = bitcast i16* %81 to <8 x i16>*
  %83 = load <8 x i16>, <8 x i16>* %82, align 2, !alias.scope !2
  %84 = getelementptr inbounds i16, i16* %81, i64 8
  %85 = bitcast i16* %84 to <8 x i16>*
  %86 = load <8 x i16>, <8 x i16>* %85, align 2, !alias.scope !2
  %87 = getelementptr inbounds i16, i16* %20, i64 %80
  %88 = bitcast i16* %87 to <8 x i16>*
  store <8 x i16> %83, <8 x i16>* %88, align 2, !alias.scope !5, !noalias !2
  %89 = getelementptr inbounds i16, i16* %87, i64 8
  %90 = bitcast i16* %89 to <8 x i16>*
  store <8 x i16> %86, <8 x i16>* %90, align 2, !alias.scope !5, !noalias !2
  %91 = add i64 %46, 64
  %92 = add i64 %47, -4
  %93 = icmp eq i64 %92, 0
  br i1 %93, label %94, label %45, !llvm.loop !7

94:                                               ; preds = %45, %36
  %95 = phi i64 [ 0, %36 ], [ %91, %45 ]
  %96 = icmp eq i64 %41, 0
  br i1 %96, label %113, label %97

97:                                               ; preds = %94, %97
  %98 = phi i64 [ %110, %97 ], [ %95, %94 ]
  %99 = phi i64 [ %111, %97 ], [ %41, %94 ]
  %100 = getelementptr inbounds i16, i16* %4, i64 %98
  %101 = bitcast i16* %100 to <8 x i16>*
  %102 = load <8 x i16>, <8 x i16>* %101, align 2, !alias.scope !2
  %103 = getelementptr inbounds i16, i16* %100, i64 8
  %104 = bitcast i16* %103 to <8 x i16>*
  %105 = load <8 x i16>, <8 x i16>* %104, align 2, !alias.scope !2
  %106 = getelementptr inbounds i16, i16* %20, i64 %98
  %107 = bitcast i16* %106 to <8 x i16>*
  store <8 x i16> %102, <8 x i16>* %107, align 2, !alias.scope !5, !noalias !2
  %108 = getelementptr inbounds i16, i16* %106, i64 8
  %109 = bitcast i16* %108 to <8 x i16>*
  store <8 x i16> %105, <8 x i16>* %109, align 2, !alias.scope !5, !noalias !2
  %110 = add i64 %98, 16
  %111 = add i64 %99, -1
  %112 = icmp eq i64 %111, 0
  br i1 %112, label %113, label %97, !llvm.loop !9

113:                                              ; preds = %97, %94
  %114 = icmp eq i64 %37, %23
  br i1 %114, label %152, label %115

115:                                              ; preds = %113, %25, %22
  %116 = phi i64 [ 0, %25 ], [ 0, %22 ], [ %37, %113 ]
  %117 = xor i64 %116, -1
  %118 = add nsw i64 %117, %23
  %119 = and i64 %23, 3
  %120 = icmp eq i64 %119, 0
  br i1 %120, label %130, label %121

121:                                              ; preds = %115, %121
  %122 = phi i64 [ %127, %121 ], [ %116, %115 ]
  %123 = phi i64 [ %128, %121 ], [ %119, %115 ]
  %124 = getelementptr inbounds i16, i16* %4, i64 %122
  %125 = load i16, i16* %124, align 2
  %126 = getelementptr inbounds i16, i16* %20, i64 %122
  store i16 %125, i16* %126, align 2
  %127 = add nuw nsw i64 %122, 1
  %128 = add i64 %123, -1
  %129 = icmp eq i64 %128, 0
  br i1 %129, label %130, label %121, !llvm.loop !11

130:                                              ; preds = %121, %115
  %131 = phi i64 [ %116, %115 ], [ %127, %121 ]
  %132 = icmp ult i64 %118, 3
  br i1 %132, label %152, label %133

133:                                              ; preds = %130, %133
  %134 = phi i64 [ %150, %133 ], [ %131, %130 ]
  %135 = getelementptr inbounds i16, i16* %4, i64 %134
  %136 = load i16, i16* %135, align 2
  %137 = getelementptr inbounds i16, i16* %20, i64 %134
  store i16 %136, i16* %137, align 2
  %138 = add nuw nsw i64 %134, 1
  %139 = getelementptr inbounds i16, i16* %4, i64 %138
  %140 = load i16, i16* %139, align 2
  %141 = getelementptr inbounds i16, i16* %20, i64 %138
  store i16 %140, i16* %141, align 2
  %142 = add nuw nsw i64 %134, 2
  %143 = getelementptr inbounds i16, i16* %4, i64 %142
  %144 = load i16, i16* %143, align 2
  %145 = getelementptr inbounds i16, i16* %20, i64 %142
  store i16 %144, i16* %145, align 2
  %146 = add nuw nsw i64 %134, 3
  %147 = getelementptr inbounds i16, i16* %4, i64 %146
  %148 = load i16, i16* %147, align 2
  %149 = getelementptr inbounds i16, i16* %20, i64 %146
  store i16 %148, i16* %149, align 2
  %150 = add nuw nsw i64 %134, 4
  %151 = icmp eq i64 %150, %23
  br i1 %151, label %152, label %133, !llvm.loop !12

152:                                              ; preds = %130, %133, %113, %15
  ret void
}

; Function Attrs: noreturn
declare void @celt_fatal(i8*, i8*, i32) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden void @mapping_matrix_multiply_channel_in_float(%struct.MappingMatrix* nocapture readonly, float* nocapture readonly, i32, float* nocapture, i32, i32, i32) local_unnamed_addr #1 {
  %8 = getelementptr inbounds %struct.MappingMatrix, %struct.MappingMatrix* %0, i64 0, i32 1
  %9 = load i32, i32* %8, align 4
  %10 = icmp slt i32 %9, %2
  br i1 %10, label %15, label %11

11:                                               ; preds = %7
  %12 = getelementptr inbounds %struct.MappingMatrix, %struct.MappingMatrix* %0, i64 0, i32 0
  %13 = load i32, i32* %12, align 4
  %14 = icmp slt i32 %13, %5
  br i1 %14, label %15, label %16

15:                                               ; preds = %11, %7
  tail call void @celt_fatal(i8* getelementptr inbounds ([76 x i8], [76 x i8]* @.str.2, i64 0, i64 0), i8* getelementptr inbounds ([48 x i8], [48 x i8]* @.str.1, i64 0, i64 0), i32 98) #5
  unreachable

16:                                               ; preds = %11
  %17 = getelementptr inbounds %struct.MappingMatrix, %struct.MappingMatrix* %0, i64 1, i32 1
  %18 = bitcast i32* %17 to i16*
  %19 = icmp sgt i32 %6, 0
  br i1 %19, label %20, label %125

20:                                               ; preds = %16
  %21 = icmp sgt i32 %2, 0
  br i1 %21, label %30, label %22

22:                                               ; preds = %20
  %23 = sext i32 %5 to i64
  %24 = zext i32 %6 to i64
  %25 = add nsw i64 %24, -1
  %26 = and i64 %24, 3
  %27 = icmp ult i64 %25, 3
  br i1 %27, label %114, label %28

28:                                               ; preds = %22
  %29 = sub nsw i64 %24, %26
  br label %97

30:                                               ; preds = %20
  %31 = sext i32 %4 to i64
  %32 = sext i32 %2 to i64
  %33 = sext i32 %5 to i64
  %34 = zext i32 %6 to i64
  %35 = zext i32 %2 to i64
  %36 = and i64 %35, 1
  %37 = icmp eq i32 %2, 1
  %38 = sub nsw i64 %35, %36
  %39 = icmp eq i64 %36, 0
  br label %40

40:                                               ; preds = %95, %30
  %41 = phi i32 [ %13, %30 ], [ %96, %95 ]
  %42 = phi i64 [ 0, %30 ], [ %93, %95 ]
  %43 = mul nsw i64 %42, %32
  %44 = sext i32 %41 to i64
  br i1 %37, label %73, label %45

45:                                               ; preds = %40, %45
  %46 = phi i64 [ %70, %45 ], [ 0, %40 ]
  %47 = phi float [ %69, %45 ], [ 0.000000e+00, %40 ]
  %48 = phi i64 [ %71, %45 ], [ %38, %40 ]
  %49 = mul nsw i64 %46, %44
  %50 = add nsw i64 %49, %31
  %51 = getelementptr inbounds i16, i16* %18, i64 %50
  %52 = load i16, i16* %51, align 2
  %53 = sitofp i16 %52 to float
  %54 = add nsw i64 %46, %43
  %55 = getelementptr inbounds float, float* %1, i64 %54
  %56 = load float, float* %55, align 4
  %57 = fmul float %56, %53
  %58 = fadd float %47, %57
  %59 = or i64 %46, 1
  %60 = mul nsw i64 %59, %44
  %61 = add nsw i64 %60, %31
  %62 = getelementptr inbounds i16, i16* %18, i64 %61
  %63 = load i16, i16* %62, align 2
  %64 = sitofp i16 %63 to float
  %65 = add nsw i64 %59, %43
  %66 = getelementptr inbounds float, float* %1, i64 %65
  %67 = load float, float* %66, align 4
  %68 = fmul float %67, %64
  %69 = fadd float %58, %68
  %70 = add nuw nsw i64 %46, 2
  %71 = add i64 %48, -2
  %72 = icmp eq i64 %71, 0
  br i1 %72, label %73, label %45

73:                                               ; preds = %45, %40
  %74 = phi float [ undef, %40 ], [ %69, %45 ]
  %75 = phi i64 [ 0, %40 ], [ %70, %45 ]
  %76 = phi float [ 0.000000e+00, %40 ], [ %69, %45 ]
  br i1 %39, label %88, label %77

77:                                               ; preds = %73
  %78 = add nsw i64 %75, %43
  %79 = getelementptr inbounds float, float* %1, i64 %78
  %80 = load float, float* %79, align 4
  %81 = mul nsw i64 %75, %44
  %82 = add nsw i64 %81, %31
  %83 = getelementptr inbounds i16, i16* %18, i64 %82
  %84 = load i16, i16* %83, align 2
  %85 = sitofp i16 %84 to float
  %86 = fmul float %80, %85
  %87 = fadd float %76, %86
  br label %88

88:                                               ; preds = %73, %77
  %89 = phi float [ %74, %73 ], [ %87, %77 ]
  %90 = fmul float %89, 0x3F00000000000000
  %91 = mul nsw i64 %42, %33
  %92 = getelementptr inbounds float, float* %3, i64 %91
  store float %90, float* %92, align 4
  %93 = add nuw nsw i64 %42, 1
  %94 = icmp eq i64 %93, %34
  br i1 %94, label %125, label %95

95:                                               ; preds = %88
  %96 = load i32, i32* %12, align 4
  br label %40

97:                                               ; preds = %97, %28
  %98 = phi i64 [ 0, %28 ], [ %111, %97 ]
  %99 = phi i64 [ %29, %28 ], [ %112, %97 ]
  %100 = mul nsw i64 %98, %23
  %101 = getelementptr inbounds float, float* %3, i64 %100
  store float 0.000000e+00, float* %101, align 4
  %102 = or i64 %98, 1
  %103 = mul nsw i64 %102, %23
  %104 = getelementptr inbounds float, float* %3, i64 %103
  store float 0.000000e+00, float* %104, align 4
  %105 = or i64 %98, 2
  %106 = mul nsw i64 %105, %23
  %107 = getelementptr inbounds float, float* %3, i64 %106
  store float 0.000000e+00, float* %107, align 4
  %108 = or i64 %98, 3
  %109 = mul nsw i64 %108, %23
  %110 = getelementptr inbounds float, float* %3, i64 %109
  store float 0.000000e+00, float* %110, align 4
  %111 = add nuw nsw i64 %98, 4
  %112 = add i64 %99, -4
  %113 = icmp eq i64 %112, 0
  br i1 %113, label %114, label %97

114:                                              ; preds = %97, %22
  %115 = phi i64 [ 0, %22 ], [ %111, %97 ]
  %116 = icmp eq i64 %26, 0
  br i1 %116, label %125, label %117

117:                                              ; preds = %114, %117
  %118 = phi i64 [ %122, %117 ], [ %115, %114 ]
  %119 = phi i64 [ %123, %117 ], [ %26, %114 ]
  %120 = mul nsw i64 %118, %23
  %121 = getelementptr inbounds float, float* %3, i64 %120
  store float 0.000000e+00, float* %121, align 4
  %122 = add nuw nsw i64 %118, 1
  %123 = add i64 %119, -1
  %124 = icmp eq i64 %123, 0
  br i1 %124, label %125, label %117, !llvm.loop !13

125:                                              ; preds = %114, %117, %88, %16
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @mapping_matrix_multiply_channel_out_float(%struct.MappingMatrix* nocapture readonly, float* nocapture readonly, i32, i32, float* nocapture, i32, i32) local_unnamed_addr #1 {
  %8 = getelementptr inbounds %struct.MappingMatrix, %struct.MappingMatrix* %0, i64 0, i32 1
  %9 = load i32, i32* %8, align 4
  %10 = icmp slt i32 %9, %3
  br i1 %10, label %15, label %11

11:                                               ; preds = %7
  %12 = getelementptr inbounds %struct.MappingMatrix, %struct.MappingMatrix* %0, i64 0, i32 0
  %13 = load i32, i32* %12, align 4
  %14 = icmp slt i32 %13, %5
  br i1 %14, label %15, label %16

15:                                               ; preds = %11, %7
  tail call void @celt_fatal(i8* getelementptr inbounds ([76 x i8], [76 x i8]* @.str.2, i64 0, i64 0), i8* getelementptr inbounds ([48 x i8], [48 x i8]* @.str.1, i64 0, i64 0), i32 134) #5
  unreachable

16:                                               ; preds = %11
  %17 = getelementptr inbounds %struct.MappingMatrix, %struct.MappingMatrix* %0, i64 1, i32 1
  %18 = bitcast i32* %17 to i16*
  %19 = icmp sgt i32 %6, 0
  %20 = icmp sgt i32 %5, 0
  %21 = and i1 %19, %20
  br i1 %21, label %22, label %54

22:                                               ; preds = %16
  %23 = sext i32 %3 to i64
  %24 = sext i32 %5 to i64
  %25 = zext i32 %6 to i64
  %26 = zext i32 %5 to i64
  br label %27

27:                                               ; preds = %51, %22
  %28 = phi i64 [ 0, %22 ], [ %52, %51 ]
  %29 = mul nsw i64 %28, %23
  %30 = getelementptr inbounds float, float* %1, i64 %29
  %31 = load float, float* %30, align 4
  %32 = mul nsw i64 %28, %24
  br label %33

33:                                               ; preds = %33, %27
  %34 = phi i64 [ 0, %27 ], [ %49, %33 ]
  %35 = load i32, i32* %12, align 4
  %36 = mul nsw i32 %35, %2
  %37 = trunc i64 %34 to i32
  %38 = add nsw i32 %36, %37
  %39 = sext i32 %38 to i64
  %40 = getelementptr inbounds i16, i16* %18, i64 %39
  %41 = load i16, i16* %40, align 2
  %42 = sitofp i16 %41 to float
  %43 = fmul float %42, 0x3F00000000000000
  %44 = fmul float %31, %43
  %45 = add nsw i64 %34, %32
  %46 = getelementptr inbounds float, float* %4, i64 %45
  %47 = load float, float* %46, align 4
  %48 = fadd float %47, %44
  store float %48, float* %46, align 4
  %49 = add nuw nsw i64 %34, 1
  %50 = icmp eq i64 %49, %26
  br i1 %50, label %51, label %33

51:                                               ; preds = %33
  %52 = add nuw nsw i64 %28, 1
  %53 = icmp eq i64 %52, %25
  br i1 %53, label %54, label %27

54:                                               ; preds = %51, %16
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @mapping_matrix_multiply_channel_in_short(%struct.MappingMatrix* nocapture readonly, i16* nocapture readonly, i32, float* nocapture, i32, i32, i32) local_unnamed_addr #1 {
  %8 = getelementptr inbounds %struct.MappingMatrix, %struct.MappingMatrix* %0, i64 0, i32 1
  %9 = load i32, i32* %8, align 4
  %10 = icmp slt i32 %9, %2
  br i1 %10, label %15, label %11

11:                                               ; preds = %7
  %12 = getelementptr inbounds %struct.MappingMatrix, %struct.MappingMatrix* %0, i64 0, i32 0
  %13 = load i32, i32* %12, align 4
  %14 = icmp slt i32 %13, %5
  br i1 %14, label %15, label %16

15:                                               ; preds = %11, %7
  tail call void @celt_fatal(i8* getelementptr inbounds ([76 x i8], [76 x i8]* @.str.2, i64 0, i64 0), i8* getelementptr inbounds ([48 x i8], [48 x i8]* @.str.1, i64 0, i64 0), i32 169) #5
  unreachable

16:                                               ; preds = %11
  %17 = getelementptr inbounds %struct.MappingMatrix, %struct.MappingMatrix* %0, i64 1, i32 1
  %18 = bitcast i32* %17 to i16*
  %19 = icmp sgt i32 %6, 0
  br i1 %19, label %20, label %131

20:                                               ; preds = %16
  %21 = icmp sgt i32 %2, 0
  br i1 %21, label %30, label %22

22:                                               ; preds = %20
  %23 = sext i32 %5 to i64
  %24 = zext i32 %6 to i64
  %25 = add nsw i64 %24, -1
  %26 = and i64 %24, 3
  %27 = icmp ult i64 %25, 3
  br i1 %27, label %120, label %28

28:                                               ; preds = %22
  %29 = sub nsw i64 %24, %26
  br label %103

30:                                               ; preds = %20
  %31 = sext i32 %4 to i64
  %32 = sext i32 %2 to i64
  %33 = sext i32 %5 to i64
  %34 = zext i32 %6 to i64
  %35 = zext i32 %2 to i64
  %36 = and i64 %35, 1
  %37 = icmp eq i32 %2, 1
  %38 = sub nsw i64 %35, %36
  %39 = icmp eq i64 %36, 0
  br label %40

40:                                               ; preds = %101, %30
  %41 = phi i32 [ %13, %30 ], [ %102, %101 ]
  %42 = phi i64 [ 0, %30 ], [ %99, %101 ]
  %43 = mul nsw i64 %42, %32
  %44 = sext i32 %41 to i64
  br i1 %37, label %77, label %45

45:                                               ; preds = %40, %45
  %46 = phi i64 [ %74, %45 ], [ 0, %40 ]
  %47 = phi float [ %73, %45 ], [ 0.000000e+00, %40 ]
  %48 = phi i64 [ %75, %45 ], [ %38, %40 ]
  %49 = mul nsw i64 %46, %44
  %50 = add nsw i64 %49, %31
  %51 = getelementptr inbounds i16, i16* %18, i64 %50
  %52 = load i16, i16* %51, align 2
  %53 = sext i16 %52 to i32
  %54 = add nsw i64 %46, %43
  %55 = getelementptr inbounds i16, i16* %1, i64 %54
  %56 = load i16, i16* %55, align 2
  %57 = sext i16 %56 to i32
  %58 = mul nsw i32 %57, %53
  %59 = sitofp i32 %58 to float
  %60 = fadd float %47, %59
  %61 = or i64 %46, 1
  %62 = mul nsw i64 %61, %44
  %63 = add nsw i64 %62, %31
  %64 = getelementptr inbounds i16, i16* %18, i64 %63
  %65 = load i16, i16* %64, align 2
  %66 = sext i16 %65 to i32
  %67 = add nsw i64 %61, %43
  %68 = getelementptr inbounds i16, i16* %1, i64 %67
  %69 = load i16, i16* %68, align 2
  %70 = sext i16 %69 to i32
  %71 = mul nsw i32 %70, %66
  %72 = sitofp i32 %71 to float
  %73 = fadd float %60, %72
  %74 = add nuw nsw i64 %46, 2
  %75 = add i64 %48, -2
  %76 = icmp eq i64 %75, 0
  br i1 %76, label %77, label %45

77:                                               ; preds = %45, %40
  %78 = phi float [ undef, %40 ], [ %73, %45 ]
  %79 = phi i64 [ 0, %40 ], [ %74, %45 ]
  %80 = phi float [ 0.000000e+00, %40 ], [ %73, %45 ]
  br i1 %39, label %94, label %81

81:                                               ; preds = %77
  %82 = add nsw i64 %79, %43
  %83 = getelementptr inbounds i16, i16* %1, i64 %82
  %84 = load i16, i16* %83, align 2
  %85 = sext i16 %84 to i32
  %86 = mul nsw i64 %79, %44
  %87 = add nsw i64 %86, %31
  %88 = getelementptr inbounds i16, i16* %18, i64 %87
  %89 = load i16, i16* %88, align 2
  %90 = sext i16 %89 to i32
  %91 = mul nsw i32 %85, %90
  %92 = sitofp i32 %91 to float
  %93 = fadd float %80, %92
  br label %94

94:                                               ; preds = %77, %81
  %95 = phi float [ %78, %77 ], [ %93, %81 ]
  %96 = fmul float %95, 0x3E10000000000000
  %97 = mul nsw i64 %42, %33
  %98 = getelementptr inbounds float, float* %3, i64 %97
  store float %96, float* %98, align 4
  %99 = add nuw nsw i64 %42, 1
  %100 = icmp eq i64 %99, %34
  br i1 %100, label %131, label %101

101:                                              ; preds = %94
  %102 = load i32, i32* %12, align 4
  br label %40

103:                                              ; preds = %103, %28
  %104 = phi i64 [ 0, %28 ], [ %117, %103 ]
  %105 = phi i64 [ %29, %28 ], [ %118, %103 ]
  %106 = mul nsw i64 %104, %23
  %107 = getelementptr inbounds float, float* %3, i64 %106
  store float 0.000000e+00, float* %107, align 4
  %108 = or i64 %104, 1
  %109 = mul nsw i64 %108, %23
  %110 = getelementptr inbounds float, float* %3, i64 %109
  store float 0.000000e+00, float* %110, align 4
  %111 = or i64 %104, 2
  %112 = mul nsw i64 %111, %23
  %113 = getelementptr inbounds float, float* %3, i64 %112
  store float 0.000000e+00, float* %113, align 4
  %114 = or i64 %104, 3
  %115 = mul nsw i64 %114, %23
  %116 = getelementptr inbounds float, float* %3, i64 %115
  store float 0.000000e+00, float* %116, align 4
  %117 = add nuw nsw i64 %104, 4
  %118 = add i64 %105, -4
  %119 = icmp eq i64 %118, 0
  br i1 %119, label %120, label %103

120:                                              ; preds = %103, %22
  %121 = phi i64 [ 0, %22 ], [ %117, %103 ]
  %122 = icmp eq i64 %26, 0
  br i1 %122, label %131, label %123

123:                                              ; preds = %120, %123
  %124 = phi i64 [ %128, %123 ], [ %121, %120 ]
  %125 = phi i64 [ %129, %123 ], [ %26, %120 ]
  %126 = mul nsw i64 %124, %23
  %127 = getelementptr inbounds float, float* %3, i64 %126
  store float 0.000000e+00, float* %127, align 4
  %128 = add nuw nsw i64 %124, 1
  %129 = add i64 %125, -1
  %130 = icmp eq i64 %129, 0
  br i1 %130, label %131, label %123, !llvm.loop !14

131:                                              ; preds = %120, %123, %94, %16
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @mapping_matrix_multiply_channel_out_short(%struct.MappingMatrix* nocapture readonly, float* nocapture readonly, i32, i32, i16* nocapture, i32, i32) local_unnamed_addr #3 {
  %8 = getelementptr inbounds %struct.MappingMatrix, %struct.MappingMatrix* %0, i64 0, i32 1
  %9 = load i32, i32* %8, align 4
  %10 = icmp slt i32 %9, %3
  br i1 %10, label %15, label %11

11:                                               ; preds = %7
  %12 = getelementptr inbounds %struct.MappingMatrix, %struct.MappingMatrix* %0, i64 0, i32 0
  %13 = load i32, i32* %12, align 4
  %14 = icmp slt i32 %13, %5
  br i1 %14, label %15, label %16

15:                                               ; preds = %11, %7
  tail call void @celt_fatal(i8* getelementptr inbounds ([76 x i8], [76 x i8]* @.str.2, i64 0, i64 0), i8* getelementptr inbounds ([48 x i8], [48 x i8]* @.str.1, i64 0, i64 0), i32 210) #5
  unreachable

16:                                               ; preds = %11
  %17 = getelementptr inbounds %struct.MappingMatrix, %struct.MappingMatrix* %0, i64 1, i32 1
  %18 = bitcast i32* %17 to i16*
  %19 = icmp sgt i32 %6, 0
  %20 = icmp sgt i32 %5, 0
  %21 = and i1 %19, %20
  br i1 %21, label %22, label %65

22:                                               ; preds = %16
  %23 = sext i32 %3 to i64
  %24 = sext i32 %5 to i64
  %25 = zext i32 %6 to i64
  %26 = zext i32 %5 to i64
  br label %27

27:                                               ; preds = %62, %22
  %28 = phi i64 [ 0, %22 ], [ %63, %62 ]
  %29 = mul nsw i64 %28, %23
  %30 = getelementptr inbounds float, float* %1, i64 %29
  %31 = load float, float* %30, align 4
  %32 = fmul float %31, 3.276800e+04
  %33 = fcmp ogt float %32, -3.276800e+04
  %34 = select i1 %33, float %32, float -3.276800e+04
  %35 = fcmp olt float %34, 3.276700e+04
  %36 = select i1 %35, float %34, float 3.276700e+04
  %37 = insertelement <4 x float> undef, float %36, i32 0
  %38 = tail call i32 @llvm.x86.sse.cvtss2si(<4 x float> %37) #6
  %39 = shl i32 %38, 16
  %40 = ashr exact i32 %39, 16
  %41 = mul nsw i64 %28, %24
  br label %42

42:                                               ; preds = %42, %27
  %43 = phi i64 [ 0, %27 ], [ %60, %42 ]
  %44 = load i32, i32* %12, align 4
  %45 = mul nsw i32 %44, %2
  %46 = trunc i64 %43 to i32
  %47 = add nsw i32 %45, %46
  %48 = sext i32 %47 to i64
  %49 = getelementptr inbounds i16, i16* %18, i64 %48
  %50 = load i16, i16* %49, align 2
  %51 = sext i16 %50 to i32
  %52 = mul nsw i32 %40, %51
  %53 = add nsw i32 %52, 16384
  %54 = lshr i32 %53, 15
  %55 = add nsw i64 %43, %41
  %56 = getelementptr inbounds i16, i16* %4, i64 %55
  %57 = load i16, i16* %56, align 2
  %58 = trunc i32 %54 to i16
  %59 = add i16 %57, %58
  store i16 %59, i16* %56, align 2
  %60 = add nuw nsw i64 %43, 1
  %61 = icmp eq i64 %60, %26
  br i1 %61, label %62, label %42

62:                                               ; preds = %42
  %63 = add nuw nsw i64 %28, 1
  %64 = icmp eq i64 %63, %25
  br i1 %64, label %65, label %27

65:                                               ; preds = %62, %16
  ret void
}

; Function Attrs: nounwind readnone
declare i32 @llvm.x86.sse.cvtss2si(<4 x float>) #4

attributes #0 = { norecurse nounwind readnone ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="128" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind readnone }
attributes #5 = { noreturn nounwind }
attributes #6 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{!3}
!3 = distinct !{!3, !4}
!4 = distinct !{!4, !"LVerDomain"}
!5 = !{!6}
!6 = distinct !{!6, !4}
!7 = distinct !{!7, !8}
!8 = !{!"llvm.loop.isvectorized", i32 1}
!9 = distinct !{!9, !10}
!10 = !{!"llvm.loop.unroll.disable"}
!11 = distinct !{!11, !10}
!12 = distinct !{!12, !8}
!13 = distinct !{!13, !10}
!14 = distinct !{!14, !10}
