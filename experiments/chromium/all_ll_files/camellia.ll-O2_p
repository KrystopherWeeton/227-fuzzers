; ModuleID = '../../third_party/ffmpeg/libavutil/camellia.c'
source_filename = "../../third_party/ffmpeg/libavutil/camellia.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"
module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"
module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%struct.AVCAMELLIA = type { [4 x i64], [6 x i64], [24 x i64], i32 }

@av_camellia_size = hidden local_unnamed_addr constant i32 280, align 4
@SBOX1 = internal unnamed_addr constant [256 x i8] c"p\82,\EC\B3'\C0\E5\E4\85W5\EA\0C\AEA#\EFk\93E\19\A5!\ED\0EON\1De\92\BD\86\B8\AF\8F|\EB\1F\CE>0\DC_^\C5\0B\1A\A6\E19\CA\D5G]=\D9\01Z\D6QVlM\8B\0D\9Af\FB\CC\B0-t\12+ \F0\B1\84\99\DFL\CB\C24~v\05m\B7\A91\D1\17\04\D7\14X:a\DE\1B\11\1C2\0F\9C\16S\18\F2\22\FED\CF\B2\C3\B5z\91$\08\E8\A8`\FCiP\AA\D0\A0}\A1\89b\97T[\1E\95\E0\FFd\D2\10\C4\00H\A3\F7u\DB\8A\03\E6\DA\09?\DD\94\87\5C\83\02\CDJ\903sg\F6\F3\9D\7F\BF\E2R\9B\D8&\C87\C6;\81\96oK\13\BEc.\E9y\A7\8C\9Fn\BC\8E)\F5\F9\B6/\FD\B4Yx\98\06j\E7Fq\BA\D4%\ABB\88\A2\8D\FAr\07\B9U\F8\EE\AC\0A6I*h<8\F1\A4@(\D3{\BB\C9C\C1\15\E3\AD\F4w\C7\80\9E", align 16
@SP = internal unnamed_addr global [8 x [256 x i64]] zeroinitializer, align 16
@SBOX2 = internal unnamed_addr constant [256 x i8] c"\E0\05X\D9gN\81\CB\C9\0B\AEj\D5\18]\82F\DF\D6'\8A2KB\DB\1C\9E\9C:\CA%{\0Dq_\1F\F8\D7>\9D|`\B9\BE\BC\8B\164M\C3r\95\AB\8E\BAz\B3\02\B4\AD\A2\AC\D8\9A\17\1A5\CC\F7\99aZ\E8$V@\E1c\093\BF\98\97\85h\FC\EC\0A\DAoSb\A3.\08\AF(\B0t\C2\BD6\228d\1E9,\A60\E5D\FD\88\9Fe\87k\F4#H\10\D1Q\C0\F9\D2\A0U\A1A\FAC\13\C4/\A8\B6<+\C1\FF\C8\A5 \89\00\90G\EF\EA\B7\15\06\CD\B5\12~\BB)\0F\B8\07\04\9B\94!f\E6\CE\ED\E7;\FE\7F\C5\A47\B1L\91n\8Dv\03-\DE\96&}\C6\5C\D3\F2O\19?\DCy\1DR\EB\F3m^\FBi\B2\F01\0C\D4\CF\8C\E2u\A9JW\84\11E\1B\F5\E4\0Es\AA\F1\DDY\14l\92T\D0xp\E3I\80P\A7\F6w\93\86\83*\C7[\E9\EE\8F\01=", align 16
@SBOX3 = internal unnamed_addr constant [256 x i8] c"8A\16v\D9\93`\F2r\C2\AB\9Au\06W\A0\91\F7\B5\C9\A2\8C\D2\90\F6\07\A7'\8E\B2I\DEC\5C\D7\C7>\F5\8Fg\1F\18n\AF/\E2\85\0DS\F0\9Ce\EA\A3\AE\9E\EC\80-k\A8+6\A6\C5\86M3\FDfX\96:\09\95\10x\D8B\CC\EF&\E5a\1A?;\82\B6\DB\D4\98\E8\8B\02\EB\0A,\1D\B0o\8D\88\0E\19\87N\0B\A9\0Cy\11\7F\22\E7Y\E1\DA=\C8\12\04tT0~\B4(UhP\BE\D0\C41\CB*\AD\0F\CAp\FF2i\08b\00$\D1\FB\BA\EDE\81sm\84\9F\EEJ\C3.\C1\01\E6%H\99\B9\B3{\F9\CE\BF\DFq)\CDl\13d\9Bc\9D\C0K\B7\A5\89_\B1\17\F4\BC\D3F\CF7^G\94\FA\FC[\97\FEZ\AC<L\035\F3#\B8]j\92\D5!DQ\C6}9\83\DC\AA|wV\05\1B\A4\154\1E\1C\F8R \14\E9\BD\DD\E4\A1\E0\8A\F1\D6z\BB\E3@O", align 16
@SBOX4 = internal unnamed_addr constant [256 x i8] c"p,\B3\C0\E4W\EA\AE#kE\A5\EDO\1D\92\86\AF|\1F>\DC^\0B\A69\D5]\D9ZQl\8B\9A\FB\B0t+\F0\84\DF\CB4vm\A9\D1\04\14:\DE\112\9CS\F2\FE\CF\C3z$\E8`i\AA\A0\A1bT\1E\E0d\10\00\A3u\8A\E6\09\DD\87\83\CD\90s\F6\9D\BFR\D8\C8\C6\81o\13c\E9\A7\9F\BC)\F9/\B4x\06\E7q\D4\AB\88\8Dr\B9\F8\AC6*<\F1@\D3\BBC\15\ADw\80\82\EC'\E5\855\0CA\EF\93\19!\0ENe\BD\B8\8F\EB\CE0_\C5\1A\E1\CAG=\01\D6VM\0Df\CC-\12 \B1\99L\C2~\05\B71\17\D7Xa\1B\1C\0F\16\18\22D\B2\B5\91\08\A8\FCP\D0}\89\97[\95\FF\D2\C4H\F7\DB\03\DA?\94\5C\02J3g\F3\7F\E2\9B&7;\96K\BE.y\8Cn\8E\F5\B6\FDY\98jF\BA%B\A2\FA\07U\EE\0AIh8\A4({\C9\C1\E3\F4\C7\9E", align 16
@vars = internal unnamed_addr constant [2 x [12 x i8]] [[12 x i8] c"\02\00\02\00\02\02\00\02\00\00\00\00", [12 x i8] c"\03\01\02\03\00\02\01\03\00\01\02\00"], align 16
@shifts = internal unnamed_addr constant [2 x [12 x i8]] [[12 x i8] c"\00\0F\0F--<^^o\00\00\00", [12 x i8] c"\00\0F\0F\1E--<<M^^o"], align 16

; Function Attrs: nounwind ssp uwtable
define hidden noalias %struct.AVCAMELLIA* @av_camellia_alloc() local_unnamed_addr #0 {
  %1 = tail call noalias i8* @av_mallocz(i64 280) #5
  %2 = bitcast i8* %1 to %struct.AVCAMELLIA*
  ret %struct.AVCAMELLIA* %2
}

declare noalias i8* @av_mallocz(i64) local_unnamed_addr #1

; Function Attrs: cold nounwind optsize ssp uwtable
define hidden i32 @av_camellia_init(%struct.AVCAMELLIA*, i8* nocapture readonly, i32) local_unnamed_addr #2 {
  %4 = alloca [4 x i64*], align 16
  %5 = alloca [2 x i64], align 16
  %6 = alloca [2 x i64], align 16
  %7 = alloca [2 x i64], align 16
  %8 = alloca [2 x i64], align 16
  %9 = bitcast [2 x i64]* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %9) #5
  %10 = getelementptr inbounds [2 x i64], [2 x i64]* %5, i64 0, i64 0
  %11 = bitcast [2 x i64]* %6 to i8*
  %12 = bitcast [2 x i64]* %5 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %12, i8 -86, i64 16, i1 false)
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %11) #5
  %13 = getelementptr inbounds [2 x i64], [2 x i64]* %6, i64 0, i64 0
  %14 = getelementptr inbounds [2 x i64], [2 x i64]* %6, i64 0, i64 1
  %15 = bitcast [2 x i64]* %7 to i8*
  %16 = bitcast [2 x i64]* %6 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %16, i8 -86, i64 16, i1 false)
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %15) #5
  %17 = getelementptr inbounds [2 x i64], [2 x i64]* %7, i64 0, i64 0
  %18 = getelementptr inbounds [2 x i64], [2 x i64]* %7, i64 0, i64 1
  %19 = bitcast [2 x i64]* %8 to i8*
  %20 = bitcast [2 x i64]* %7 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %20, i8 -86, i64 16, i1 false)
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %19) #5
  %21 = getelementptr inbounds [2 x i64], [2 x i64]* %8, i64 0, i64 0
  %22 = getelementptr inbounds [2 x i64], [2 x i64]* %8, i64 0, i64 1
  %23 = icmp eq i32 %2, 128
  %24 = bitcast [2 x i64]* %8 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %24, i8 -86, i64 16, i1 false)
  switch i32 %2, label %315 [
    i32 256, label %25
    i32 192, label %25
    i32 128, label %25
  ]

25:                                               ; preds = %3, %3, %3
  %26 = getelementptr inbounds [2 x i64], [2 x i64]* %5, i64 0, i64 1
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %19, i8 0, i64 16, i1 false)
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %11, i8 0, i64 16, i1 false)
  %27 = getelementptr inbounds %struct.AVCAMELLIA, %struct.AVCAMELLIA* %0, i64 0, i32 3
  store i32 %2, i32* %27, align 8
  %28 = bitcast i8* %1 to i64*
  %29 = load i64, i64* %28, align 1
  %30 = tail call i64 asm "bswap  $0", "=r,0,~{dirflag},~{fpsr},~{flags}"(i64 %29) #6, !srcloc !2
  store i64 %30, i64* %10, align 16
  %31 = getelementptr inbounds i8, i8* %1, i64 8
  %32 = bitcast i8* %31 to i64*
  %33 = load i64, i64* %32, align 1
  %34 = tail call i64 asm "bswap  $0", "=r,0,~{dirflag},~{fpsr},~{flags}"(i64 %33) #6, !srcloc !2
  store i64 %34, i64* %26, align 8
  switch i32 %2, label %53 [
    i32 192, label %35
    i32 256, label %41
  ]

35:                                               ; preds = %25
  %36 = getelementptr inbounds i8, i8* %1, i64 16
  %37 = bitcast i8* %36 to i64*
  %38 = load i64, i64* %37, align 1
  %39 = tail call i64 asm "bswap  $0", "=r,0,~{dirflag},~{fpsr},~{flags}"(i64 %38) #6, !srcloc !2
  store i64 %39, i64* %13, align 16
  %40 = xor i64 %39, -1
  br label %50

41:                                               ; preds = %25
  %42 = getelementptr inbounds i8, i8* %1, i64 16
  %43 = bitcast i8* %42 to i64*
  %44 = load i64, i64* %43, align 1
  %45 = tail call i64 asm "bswap  $0", "=r,0,~{dirflag},~{fpsr},~{flags}"(i64 %44) #6, !srcloc !2
  store i64 %45, i64* %13, align 16
  %46 = getelementptr inbounds i8, i8* %1, i64 24
  %47 = bitcast i8* %46 to i64*
  %48 = load i64, i64* %47, align 1
  %49 = tail call i64 asm "bswap  $0", "=r,0,~{dirflag},~{fpsr},~{flags}"(i64 %48) #6, !srcloc !2
  br label %50

50:                                               ; preds = %35, %41
  %51 = phi i64 [ %49, %41 ], [ %40, %35 ]
  %52 = phi i64 [ %45, %41 ], [ %39, %35 ]
  store i64 %51, i64* %14, align 8
  br label %53

53:                                               ; preds = %50, %25
  %54 = phi i64 [ 0, %25 ], [ %51, %50 ]
  %55 = phi i64 [ 0, %25 ], [ %52, %50 ]
  br label %56

56:                                               ; preds = %56, %53
  %57 = phi i64 [ 0, %53 ], [ %126, %56 ]
  %58 = getelementptr inbounds [256 x i8], [256 x i8]* @SBOX1, i64 0, i64 %57
  %59 = load i8, i8* %58, align 1
  %60 = zext i8 %59 to i64
  %61 = shl nuw i64 %60, 56
  %62 = shl nuw nsw i64 %60, 48
  %63 = or i64 %61, %62
  %64 = shl nuw nsw i64 %60, 40
  %65 = or i64 %63, %64
  %66 = shl nuw nsw i64 %60, 24
  %67 = or i64 %65, %66
  %68 = or i64 %67, %60
  %69 = getelementptr inbounds [8 x [256 x i64]], [8 x [256 x i64]]* @SP, i64 0, i64 0, i64 %57
  store i64 %68, i64* %69, align 8
  %70 = shl nuw nsw i64 %60, 16
  %71 = shl nuw nsw i64 %60, 8
  %72 = or i64 %71, %70
  %73 = or i64 %72, %67
  %74 = getelementptr inbounds [8 x [256 x i64]], [8 x [256 x i64]]* @SP, i64 0, i64 7, i64 %57
  store i64 %73, i64* %74, align 8
  %75 = getelementptr inbounds [256 x i8], [256 x i8]* @SBOX2, i64 0, i64 %57
  %76 = load i8, i8* %75, align 1
  %77 = zext i8 %76 to i64
  %78 = shl nuw nsw i64 %77, 48
  %79 = shl nuw nsw i64 %77, 40
  %80 = or i64 %78, %79
  %81 = shl nuw nsw i64 %77, 32
  %82 = or i64 %80, %81
  %83 = shl nuw nsw i64 %77, 24
  %84 = shl nuw nsw i64 %77, 16
  %85 = or i64 %82, %84
  %86 = or i64 %85, %83
  %87 = getelementptr inbounds [8 x [256 x i64]], [8 x [256 x i64]]* @SP, i64 0, i64 1, i64 %57
  store i64 %86, i64* %87, align 8
  %88 = shl nuw nsw i64 %77, 8
  %89 = or i64 %88, %77
  %90 = or i64 %89, %85
  %91 = getelementptr inbounds [8 x [256 x i64]], [8 x [256 x i64]]* @SP, i64 0, i64 4, i64 %57
  store i64 %90, i64* %91, align 8
  %92 = getelementptr inbounds [256 x i8], [256 x i8]* @SBOX3, i64 0, i64 %57
  %93 = load i8, i8* %92, align 1
  %94 = zext i8 %93 to i64
  %95 = shl nuw i64 %94, 56
  %96 = shl nuw nsw i64 %94, 40
  %97 = or i64 %95, %96
  %98 = shl nuw nsw i64 %94, 32
  %99 = or i64 %97, %98
  %100 = shl nuw nsw i64 %94, 16
  %101 = shl nuw nsw i64 %94, 8
  %102 = or i64 %99, %101
  %103 = or i64 %102, %100
  %104 = getelementptr inbounds [8 x [256 x i64]], [8 x [256 x i64]]* @SP, i64 0, i64 2, i64 %57
  store i64 %103, i64* %104, align 8
  %105 = shl nuw nsw i64 %94, 24
  %106 = or i64 %105, %94
  %107 = or i64 %106, %102
  %108 = getelementptr inbounds [8 x [256 x i64]], [8 x [256 x i64]]* @SP, i64 0, i64 5, i64 %57
  store i64 %107, i64* %108, align 8
  %109 = getelementptr inbounds [256 x i8], [256 x i8]* @SBOX4, i64 0, i64 %57
  %110 = load i8, i8* %109, align 1
  %111 = zext i8 %110 to i64
  %112 = shl nuw i64 %111, 56
  %113 = shl nuw nsw i64 %111, 48
  %114 = shl nuw nsw i64 %111, 32
  %115 = shl nuw nsw i64 %111, 8
  %116 = or i64 %113, %111
  %117 = or i64 %116, %112
  %118 = or i64 %117, %114
  %119 = or i64 %118, %115
  %120 = getelementptr inbounds [8 x [256 x i64]], [8 x [256 x i64]]* @SP, i64 0, i64 3, i64 %57
  store i64 %119, i64* %120, align 8
  %121 = shl nuw nsw i64 %111, 24
  %122 = shl nuw nsw i64 %111, 16
  %123 = or i64 %122, %121
  %124 = or i64 %123, %118
  %125 = getelementptr inbounds [8 x [256 x i64]], [8 x [256 x i64]]* @SP, i64 0, i64 6, i64 %57
  store i64 %124, i64* %125, align 8
  %126 = add nuw nsw i64 %57, 1
  %127 = icmp eq i64 %126, 256
  br i1 %127, label %128, label %56

128:                                              ; preds = %56
  %129 = xor i64 %55, %30
  %130 = tail call fastcc i64 @F(i64 %129, i64 -6872943284670656373)
  %131 = xor i64 %130, %54
  %132 = xor i64 %131, %34
  %133 = tail call fastcc i64 @F(i64 %132, i64 -5297666545706961998)
  %134 = xor i64 %133, %55
  %135 = tail call fastcc i64 @F(i64 %134, i64 -4112007255848680770)
  %136 = xor i64 %131, %135
  %137 = tail call fastcc i64 @F(i64 %136, i64 6124705990439038748)
  %138 = xor i64 %137, %134
  store i64 %138, i64* %17, align 16
  store i64 %136, i64* %18, align 8
  br i1 %23, label %146, label %139

139:                                              ; preds = %128
  %140 = xor i64 %137, %133
  %141 = xor i64 %135, %130
  %142 = tail call fastcc i64 @F(i64 %140, i64 1217423232700263709)
  %143 = xor i64 %141, %142
  %144 = tail call fastcc i64 @F(i64 %143, i64 -5740250305213840899)
  %145 = xor i64 %144, %140
  store i64 %145, i64* %21, align 16
  store i64 %143, i64* %22, align 8
  br label %146

146:                                              ; preds = %128, %139
  %147 = phi i64 [ 0, %128 ], [ %145, %139 ]
  %148 = phi i64 [ 0, %128 ], [ %143, %139 ]
  %149 = bitcast [4 x i64*]* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %149) #5
  %150 = getelementptr inbounds [4 x i64*], [4 x i64*]* %4, i64 0, i64 0
  %151 = getelementptr inbounds [4 x i64*], [4 x i64*]* %4, i64 0, i64 1
  %152 = getelementptr inbounds [4 x i64*], [4 x i64*]* %4, i64 0, i64 2
  %153 = getelementptr inbounds [4 x i64*], [4 x i64*]* %4, i64 0, i64 3
  store i64* %10, i64** %150, align 16
  store i64* %13, i64** %151, align 8
  store i64* %17, i64** %152, align 16
  store i64* %21, i64** %153, align 8
  %154 = getelementptr inbounds %struct.AVCAMELLIA, %struct.AVCAMELLIA* %0, i64 0, i32 0, i64 0
  store i64 %30, i64* %154, align 8
  %155 = getelementptr inbounds %struct.AVCAMELLIA, %struct.AVCAMELLIA* %0, i64 0, i32 0, i64 1
  store i64 %34, i64* %155, align 8
  br i1 %23, label %156, label %230

156:                                              ; preds = %146, %195
  %157 = phi i64 [ %202, %195 ], [ 0, %146 ]
  %158 = getelementptr inbounds [2 x [12 x i8]], [2 x [12 x i8]]* @vars, i64 0, i64 0, i64 %157
  %159 = load i8, i8* %158, align 1
  %160 = zext i8 %159 to i64
  %161 = getelementptr inbounds [4 x i64*], [4 x i64*]* %4, i64 0, i64 %160
  %162 = load i64*, i64** %161, align 8
  %163 = getelementptr inbounds [2 x [12 x i8]], [2 x [12 x i8]]* @shifts, i64 0, i64 0, i64 %157
  %164 = load i8, i8* %163, align 1
  %165 = zext i8 %164 to i32
  %166 = and i32 %165, 192
  %167 = icmp eq i32 %166, 64
  %168 = add nsw i32 %165, -64
  %169 = select i1 %167, i32 %168, i32 %165
  %170 = zext i1 %167 to i32
  %171 = add nsw i32 %169, -1
  %172 = icmp ugt i32 %171, 126
  %173 = zext i1 %167 to i64
  %174 = getelementptr inbounds i64, i64* %162, i64 %173
  %175 = load i64, i64* %174, align 8
  br i1 %172, label %176, label %181

176:                                              ; preds = %156
  %177 = xor i32 %170, 1
  %178 = zext i32 %177 to i64
  %179 = getelementptr inbounds i64, i64* %162, i64 %178
  %180 = load i64, i64* %179, align 8
  br label %195

181:                                              ; preds = %156
  %182 = zext i32 %169 to i64
  %183 = shl i64 %175, %182
  %184 = xor i32 %170, 1
  %185 = zext i32 %184 to i64
  %186 = getelementptr inbounds i64, i64* %162, i64 %185
  %187 = load i64, i64* %186, align 8
  %188 = sub nsw i32 64, %169
  %189 = zext i32 %188 to i64
  %190 = lshr i64 %187, %189
  %191 = or i64 %190, %183
  %192 = shl i64 %187, %182
  %193 = lshr i64 %175, %189
  %194 = or i64 %192, %193
  br label %195

195:                                              ; preds = %181, %176
  %196 = phi i64 [ %175, %176 ], [ %191, %181 ]
  %197 = phi i64 [ %180, %176 ], [ %194, %181 ]
  %198 = shl nuw nsw i64 %157, 1
  %199 = getelementptr inbounds %struct.AVCAMELLIA, %struct.AVCAMELLIA* %0, i64 0, i32 2, i64 %198
  store i64 %196, i64* %199, align 8
  %200 = or i64 %198, 1
  %201 = getelementptr inbounds %struct.AVCAMELLIA, %struct.AVCAMELLIA* %0, i64 0, i32 2, i64 %200
  store i64 %197, i64* %201, align 8
  %202 = add nuw nsw i64 %157, 1
  %203 = icmp eq i64 %202, 9
  br i1 %203, label %204, label %156

204:                                              ; preds = %195
  %205 = shl i64 %34, 60
  %206 = lshr i64 %30, 4
  %207 = or i64 %205, %206
  %208 = getelementptr inbounds %struct.AVCAMELLIA, %struct.AVCAMELLIA* %0, i64 0, i32 2, i64 9
  store i64 %207, i64* %208, align 8
  %209 = shl i64 %138, 30
  %210 = lshr i64 %136, 34
  %211 = or i64 %210, %209
  %212 = shl i64 %136, 30
  %213 = lshr i64 %138, 34
  %214 = or i64 %212, %213
  %215 = getelementptr inbounds %struct.AVCAMELLIA, %struct.AVCAMELLIA* %0, i64 0, i32 1, i64 0
  store i64 %211, i64* %215, align 8
  %216 = getelementptr inbounds %struct.AVCAMELLIA, %struct.AVCAMELLIA* %0, i64 0, i32 1, i64 1
  store i64 %214, i64* %216, align 8
  %217 = shl i64 %34, 13
  %218 = lshr i64 %30, 51
  %219 = or i64 %217, %218
  %220 = shl i64 %30, 13
  %221 = lshr i64 %34, 51
  %222 = or i64 %221, %220
  %223 = getelementptr inbounds %struct.AVCAMELLIA, %struct.AVCAMELLIA* %0, i64 0, i32 1, i64 2
  store i64 %219, i64* %223, align 8
  %224 = getelementptr inbounds %struct.AVCAMELLIA, %struct.AVCAMELLIA* %0, i64 0, i32 1, i64 3
  store i64 %222, i64* %224, align 8
  %225 = shl i64 %136, 47
  %226 = lshr i64 %138, 17
  %227 = or i64 %225, %226
  %228 = shl i64 %138, 47
  %229 = lshr i64 %136, 17
  br label %308

230:                                              ; preds = %146, %269
  %231 = phi i64 [ %276, %269 ], [ 0, %146 ]
  %232 = getelementptr inbounds [2 x [12 x i8]], [2 x [12 x i8]]* @vars, i64 0, i64 1, i64 %231
  %233 = load i8, i8* %232, align 1
  %234 = zext i8 %233 to i64
  %235 = getelementptr inbounds [4 x i64*], [4 x i64*]* %4, i64 0, i64 %234
  %236 = load i64*, i64** %235, align 8
  %237 = getelementptr inbounds [2 x [12 x i8]], [2 x [12 x i8]]* @shifts, i64 0, i64 1, i64 %231
  %238 = load i8, i8* %237, align 1
  %239 = zext i8 %238 to i32
  %240 = and i32 %239, 192
  %241 = icmp eq i32 %240, 64
  %242 = add nsw i32 %239, -64
  %243 = select i1 %241, i32 %242, i32 %239
  %244 = zext i1 %241 to i32
  %245 = add nsw i32 %243, -1
  %246 = icmp ugt i32 %245, 126
  %247 = zext i1 %241 to i64
  %248 = getelementptr inbounds i64, i64* %236, i64 %247
  %249 = load i64, i64* %248, align 8
  br i1 %246, label %250, label %255

250:                                              ; preds = %230
  %251 = xor i32 %244, 1
  %252 = zext i32 %251 to i64
  %253 = getelementptr inbounds i64, i64* %236, i64 %252
  %254 = load i64, i64* %253, align 8
  br label %269

255:                                              ; preds = %230
  %256 = zext i32 %243 to i64
  %257 = shl i64 %249, %256
  %258 = xor i32 %244, 1
  %259 = zext i32 %258 to i64
  %260 = getelementptr inbounds i64, i64* %236, i64 %259
  %261 = load i64, i64* %260, align 8
  %262 = sub nsw i32 64, %243
  %263 = zext i32 %262 to i64
  %264 = lshr i64 %261, %263
  %265 = or i64 %264, %257
  %266 = shl i64 %261, %256
  %267 = lshr i64 %249, %263
  %268 = or i64 %266, %267
  br label %269

269:                                              ; preds = %255, %250
  %270 = phi i64 [ %249, %250 ], [ %265, %255 ]
  %271 = phi i64 [ %254, %250 ], [ %268, %255 ]
  %272 = shl nuw nsw i64 %231, 1
  %273 = getelementptr inbounds %struct.AVCAMELLIA, %struct.AVCAMELLIA* %0, i64 0, i32 2, i64 %272
  store i64 %270, i64* %273, align 8
  %274 = or i64 %272, 1
  %275 = getelementptr inbounds %struct.AVCAMELLIA, %struct.AVCAMELLIA* %0, i64 0, i32 2, i64 %274
  store i64 %271, i64* %275, align 8
  %276 = add nuw nsw i64 %231, 1
  %277 = icmp eq i64 %276, 12
  br i1 %277, label %278, label %230

278:                                              ; preds = %269
  %279 = shl i64 %55, 30
  %280 = lshr i64 %54, 34
  %281 = or i64 %280, %279
  %282 = shl i64 %54, 30
  %283 = lshr i64 %55, 34
  %284 = or i64 %282, %283
  %285 = getelementptr inbounds %struct.AVCAMELLIA, %struct.AVCAMELLIA* %0, i64 0, i32 1, i64 0
  store i64 %281, i64* %285, align 8
  %286 = getelementptr inbounds %struct.AVCAMELLIA, %struct.AVCAMELLIA* %0, i64 0, i32 1, i64 1
  store i64 %284, i64* %286, align 8
  %287 = shl i64 %30, 60
  %288 = lshr i64 %34, 4
  %289 = or i64 %288, %287
  %290 = shl i64 %34, 60
  %291 = lshr i64 %30, 4
  %292 = or i64 %290, %291
  %293 = getelementptr inbounds %struct.AVCAMELLIA, %struct.AVCAMELLIA* %0, i64 0, i32 1, i64 2
  store i64 %289, i64* %293, align 8
  %294 = getelementptr inbounds %struct.AVCAMELLIA, %struct.AVCAMELLIA* %0, i64 0, i32 1, i64 3
  store i64 %292, i64* %294, align 8
  %295 = shl i64 %136, 13
  %296 = lshr i64 %138, 51
  %297 = or i64 %295, %296
  %298 = shl i64 %138, 13
  %299 = lshr i64 %136, 51
  %300 = or i64 %299, %298
  %301 = getelementptr inbounds %struct.AVCAMELLIA, %struct.AVCAMELLIA* %0, i64 0, i32 1, i64 4
  store i64 %297, i64* %301, align 8
  %302 = getelementptr inbounds %struct.AVCAMELLIA, %struct.AVCAMELLIA* %0, i64 0, i32 1, i64 5
  store i64 %300, i64* %302, align 8
  %303 = shl i64 %148, 47
  %304 = lshr i64 %147, 17
  %305 = or i64 %304, %303
  %306 = shl i64 %147, 47
  %307 = lshr i64 %148, 17
  br label %308

308:                                              ; preds = %204, %278
  %309 = phi i64 [ %228, %204 ], [ %307, %278 ]
  %310 = phi i64 [ %229, %204 ], [ %306, %278 ]
  %311 = phi i64 [ %227, %204 ], [ %305, %278 ]
  %312 = or i64 %310, %309
  %313 = getelementptr inbounds %struct.AVCAMELLIA, %struct.AVCAMELLIA* %0, i64 0, i32 0, i64 2
  store i64 %311, i64* %313, align 8
  %314 = getelementptr inbounds %struct.AVCAMELLIA, %struct.AVCAMELLIA* %0, i64 0, i32 0, i64 3
  store i64 %312, i64* %314, align 8
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %149) #5
  br label %315

315:                                              ; preds = %3, %308
  %316 = phi i32 [ 0, %308 ], [ -22, %3 ]
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %19) #5
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %15) #5
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %11) #5
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %9) #5
  ret i32 %316
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #3

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #3

; Function Attrs: norecurse nounwind readonly ssp uwtable
define internal fastcc i64 @F(i64, i64) unnamed_addr #4 {
  %3 = xor i64 %1, %0
  %4 = lshr i64 %3, 56
  %5 = getelementptr inbounds [8 x [256 x i64]], [8 x [256 x i64]]* @SP, i64 0, i64 0, i64 %4
  %6 = load i64, i64* %5, align 8
  %7 = lshr i64 %3, 48
  %8 = and i64 %7, 255
  %9 = getelementptr inbounds [8 x [256 x i64]], [8 x [256 x i64]]* @SP, i64 0, i64 1, i64 %8
  %10 = load i64, i64* %9, align 8
  %11 = xor i64 %10, %6
  %12 = lshr i64 %3, 40
  %13 = and i64 %12, 255
  %14 = getelementptr inbounds [8 x [256 x i64]], [8 x [256 x i64]]* @SP, i64 0, i64 2, i64 %13
  %15 = load i64, i64* %14, align 8
  %16 = xor i64 %11, %15
  %17 = lshr i64 %3, 32
  %18 = and i64 %17, 255
  %19 = getelementptr inbounds [8 x [256 x i64]], [8 x [256 x i64]]* @SP, i64 0, i64 3, i64 %18
  %20 = load i64, i64* %19, align 8
  %21 = xor i64 %16, %20
  %22 = lshr i64 %3, 24
  %23 = and i64 %22, 255
  %24 = getelementptr inbounds [8 x [256 x i64]], [8 x [256 x i64]]* @SP, i64 0, i64 4, i64 %23
  %25 = load i64, i64* %24, align 8
  %26 = xor i64 %21, %25
  %27 = lshr i64 %3, 16
  %28 = and i64 %27, 255
  %29 = getelementptr inbounds [8 x [256 x i64]], [8 x [256 x i64]]* @SP, i64 0, i64 5, i64 %28
  %30 = load i64, i64* %29, align 8
  %31 = xor i64 %26, %30
  %32 = lshr i64 %3, 8
  %33 = and i64 %32, 255
  %34 = getelementptr inbounds [8 x [256 x i64]], [8 x [256 x i64]]* @SP, i64 0, i64 6, i64 %33
  %35 = load i64, i64* %34, align 8
  %36 = xor i64 %31, %35
  %37 = and i64 %3, 255
  %38 = getelementptr inbounds [8 x [256 x i64]], [8 x [256 x i64]]* @SP, i64 0, i64 7, i64 %37
  %39 = load i64, i64* %38, align 8
  %40 = xor i64 %36, %39
  ret i64 %40
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #3

; Function Attrs: nounwind ssp uwtable
define hidden void @av_camellia_crypt(%struct.AVCAMELLIA* readonly, i8* nocapture, i8* nocapture readonly, i32, i8*, i32) local_unnamed_addr #0 {
  %7 = icmp eq i32 %3, 0
  br i1 %7, label %1249, label %8

8:                                                ; preds = %6
  %9 = icmp eq i32 %5, 0
  %10 = getelementptr inbounds %struct.AVCAMELLIA, %struct.AVCAMELLIA* %0, i64 0, i32 0, i64 2
  %11 = getelementptr inbounds %struct.AVCAMELLIA, %struct.AVCAMELLIA* %0, i64 0, i32 0, i64 3
  %12 = getelementptr inbounds %struct.AVCAMELLIA, %struct.AVCAMELLIA* %0, i64 0, i32 3
  %13 = getelementptr inbounds %struct.AVCAMELLIA, %struct.AVCAMELLIA* %0, i64 0, i32 2, i64 23
  %14 = getelementptr inbounds %struct.AVCAMELLIA, %struct.AVCAMELLIA* %0, i64 0, i32 2, i64 22
  %15 = getelementptr inbounds %struct.AVCAMELLIA, %struct.AVCAMELLIA* %0, i64 0, i32 2, i64 21
  %16 = getelementptr inbounds %struct.AVCAMELLIA, %struct.AVCAMELLIA* %0, i64 0, i32 2, i64 20
  %17 = getelementptr inbounds %struct.AVCAMELLIA, %struct.AVCAMELLIA* %0, i64 0, i32 2, i64 19
  %18 = getelementptr inbounds %struct.AVCAMELLIA, %struct.AVCAMELLIA* %0, i64 0, i32 2, i64 18
  %19 = getelementptr inbounds %struct.AVCAMELLIA, %struct.AVCAMELLIA* %0, i64 0, i32 1, i64 5
  %20 = getelementptr inbounds %struct.AVCAMELLIA, %struct.AVCAMELLIA* %0, i64 0, i32 1, i64 4
  %21 = getelementptr inbounds %struct.AVCAMELLIA, %struct.AVCAMELLIA* %0, i64 0, i32 2, i64 17
  %22 = getelementptr inbounds %struct.AVCAMELLIA, %struct.AVCAMELLIA* %0, i64 0, i32 2, i64 16
  %23 = getelementptr inbounds %struct.AVCAMELLIA, %struct.AVCAMELLIA* %0, i64 0, i32 2, i64 15
  %24 = getelementptr inbounds %struct.AVCAMELLIA, %struct.AVCAMELLIA* %0, i64 0, i32 2, i64 14
  %25 = getelementptr inbounds %struct.AVCAMELLIA, %struct.AVCAMELLIA* %0, i64 0, i32 2, i64 13
  %26 = getelementptr inbounds %struct.AVCAMELLIA, %struct.AVCAMELLIA* %0, i64 0, i32 2, i64 12
  %27 = getelementptr inbounds %struct.AVCAMELLIA, %struct.AVCAMELLIA* %0, i64 0, i32 1, i64 3
  %28 = getelementptr inbounds %struct.AVCAMELLIA, %struct.AVCAMELLIA* %0, i64 0, i32 1, i64 2
  %29 = getelementptr inbounds %struct.AVCAMELLIA, %struct.AVCAMELLIA* %0, i64 0, i32 2, i64 11
  %30 = getelementptr inbounds %struct.AVCAMELLIA, %struct.AVCAMELLIA* %0, i64 0, i32 2, i64 10
  %31 = getelementptr inbounds %struct.AVCAMELLIA, %struct.AVCAMELLIA* %0, i64 0, i32 2, i64 9
  %32 = getelementptr inbounds %struct.AVCAMELLIA, %struct.AVCAMELLIA* %0, i64 0, i32 2, i64 8
  %33 = getelementptr inbounds %struct.AVCAMELLIA, %struct.AVCAMELLIA* %0, i64 0, i32 2, i64 7
  %34 = getelementptr inbounds %struct.AVCAMELLIA, %struct.AVCAMELLIA* %0, i64 0, i32 2, i64 6
  %35 = getelementptr inbounds %struct.AVCAMELLIA, %struct.AVCAMELLIA* %0, i64 0, i32 1, i64 1
  %36 = getelementptr inbounds %struct.AVCAMELLIA, %struct.AVCAMELLIA* %0, i64 0, i32 1, i64 0
  %37 = getelementptr inbounds %struct.AVCAMELLIA, %struct.AVCAMELLIA* %0, i64 0, i32 2, i64 5
  %38 = getelementptr inbounds %struct.AVCAMELLIA, %struct.AVCAMELLIA* %0, i64 0, i32 2, i64 4
  %39 = getelementptr inbounds %struct.AVCAMELLIA, %struct.AVCAMELLIA* %0, i64 0, i32 2, i64 3
  %40 = getelementptr inbounds %struct.AVCAMELLIA, %struct.AVCAMELLIA* %0, i64 0, i32 2, i64 2
  %41 = getelementptr inbounds %struct.AVCAMELLIA, %struct.AVCAMELLIA* %0, i64 0, i32 2, i64 1
  %42 = getelementptr inbounds %struct.AVCAMELLIA, %struct.AVCAMELLIA* %0, i64 0, i32 2, i64 0
  %43 = getelementptr inbounds %struct.AVCAMELLIA, %struct.AVCAMELLIA* %0, i64 0, i32 0, i64 0
  %44 = getelementptr inbounds %struct.AVCAMELLIA, %struct.AVCAMELLIA* %0, i64 0, i32 0, i64 1
  %45 = icmp eq i8* %4, null
  %46 = bitcast i8* %4 to i64*
  %47 = getelementptr inbounds i8, i8* %4, i64 8
  %48 = bitcast i8* %47 to i64*
  %49 = getelementptr inbounds i8, i8* %4, i64 1
  %50 = getelementptr inbounds i8, i8* %4, i64 2
  %51 = getelementptr inbounds i8, i8* %4, i64 3
  %52 = getelementptr inbounds i8, i8* %4, i64 4
  %53 = getelementptr inbounds i8, i8* %4, i64 5
  %54 = getelementptr inbounds i8, i8* %4, i64 6
  %55 = getelementptr inbounds i8, i8* %4, i64 7
  %56 = getelementptr inbounds i8, i8* %4, i64 9
  %57 = getelementptr inbounds i8, i8* %4, i64 10
  %58 = getelementptr inbounds i8, i8* %4, i64 11
  %59 = getelementptr inbounds i8, i8* %4, i64 12
  %60 = getelementptr inbounds i8, i8* %4, i64 13
  %61 = getelementptr inbounds i8, i8* %4, i64 14
  %62 = getelementptr inbounds i8, i8* %4, i64 15
  br label %63

63:                                               ; preds = %8, %1245
  %64 = phi i32 [ %3, %8 ], [ %67, %1245 ]
  %65 = phi i8* [ %1, %8 ], [ %1247, %1245 ]
  %66 = phi i8* [ %2, %8 ], [ %1246, %1245 ]
  %67 = add nsw i32 %64, -1
  br i1 %9, label %1164, label %68

68:                                               ; preds = %63
  %69 = bitcast i8* %66 to i64*
  %70 = load i64, i64* %69, align 1
  %71 = tail call i64 asm "bswap  $0", "=r,0,~{dirflag},~{fpsr},~{flags}"(i64 %70) #6, !srcloc !2
  %72 = getelementptr inbounds i8, i8* %66, i64 8
  %73 = bitcast i8* %72 to i64*
  %74 = load i64, i64* %73, align 1
  %75 = tail call i64 asm "bswap  $0", "=r,0,~{dirflag},~{fpsr},~{flags}"(i64 %74) #6, !srcloc !2
  %76 = load i64, i64* %10, align 8
  %77 = xor i64 %76, %71
  %78 = load i64, i64* %11, align 8
  %79 = xor i64 %78, %75
  %80 = load i32, i32* %12, align 8
  %81 = icmp eq i32 %80, 128
  br i1 %81, label %356, label %82

82:                                               ; preds = %68
  %83 = load i64, i64* %13, align 8
  %84 = xor i64 %83, %77
  %85 = lshr i64 %84, 56
  %86 = getelementptr inbounds [8 x [256 x i64]], [8 x [256 x i64]]* @SP, i64 0, i64 0, i64 %85
  %87 = load i64, i64* %86, align 8
  %88 = lshr i64 %84, 48
  %89 = and i64 %88, 255
  %90 = getelementptr inbounds [8 x [256 x i64]], [8 x [256 x i64]]* @SP, i64 0, i64 1, i64 %89
  %91 = load i64, i64* %90, align 8
  %92 = lshr i64 %84, 40
  %93 = and i64 %92, 255
  %94 = getelementptr inbounds [8 x [256 x i64]], [8 x [256 x i64]]* @SP, i64 0, i64 2, i64 %93
  %95 = load i64, i64* %94, align 8
  %96 = lshr i64 %84, 32
  %97 = and i64 %96, 255
  %98 = getelementptr inbounds [8 x [256 x i64]], [8 x [256 x i64]]* @SP, i64 0, i64 3, i64 %97
  %99 = load i64, i64* %98, align 8
  %100 = lshr i64 %84, 24
  %101 = and i64 %100, 255
  %102 = getelementptr inbounds [8 x [256 x i64]], [8 x [256 x i64]]* @SP, i64 0, i64 4, i64 %101
  %103 = load i64, i64* %102, align 8
  %104 = lshr i64 %84, 16
  %105 = and i64 %104, 255
  %106 = getelementptr inbounds [8 x [256 x i64]], [8 x [256 x i64]]* @SP, i64 0, i64 5, i64 %105
  %107 = load i64, i64* %106, align 8
  %108 = lshr i64 %84, 8
  %109 = and i64 %108, 255
  %110 = getelementptr inbounds [8 x [256 x i64]], [8 x [256 x i64]]* @SP, i64 0, i64 6, i64 %109
  %111 = load i64, i64* %110, align 8
  %112 = and i64 %84, 255
  %113 = getelementptr inbounds [8 x [256 x i64]], [8 x [256 x i64]]* @SP, i64 0, i64 7, i64 %112
  %114 = load i64, i64* %113, align 8
  %115 = xor i64 %87, %79
  %116 = xor i64 %115, %91
  %117 = xor i64 %116, %95
  %118 = xor i64 %117, %99
  %119 = xor i64 %118, %103
  %120 = xor i64 %119, %107
  %121 = xor i64 %120, %111
  %122 = xor i64 %121, %114
  %123 = load i64, i64* %14, align 8
  %124 = xor i64 %122, %123
  %125 = lshr i64 %124, 56
  %126 = getelementptr inbounds [8 x [256 x i64]], [8 x [256 x i64]]* @SP, i64 0, i64 0, i64 %125
  %127 = load i64, i64* %126, align 8
  %128 = lshr i64 %124, 48
  %129 = and i64 %128, 255
  %130 = getelementptr inbounds [8 x [256 x i64]], [8 x [256 x i64]]* @SP, i64 0, i64 1, i64 %129
  %131 = load i64, i64* %130, align 8
  %132 = lshr i64 %124, 40
  %133 = and i64 %132, 255
  %134 = getelementptr inbounds [8 x [256 x i64]], [8 x [256 x i64]]* @SP, i64 0, i64 2, i64 %133
  %135 = load i64, i64* %134, align 8
  %136 = lshr i64 %124, 32
  %137 = and i64 %136, 255
  %138 = getelementptr inbounds [8 x [256 x i64]], [8 x [256 x i64]]* @SP, i64 0, i64 3, i64 %137
  %139 = load i64, i64* %138, align 8
  %140 = lshr i64 %124, 24
  %141 = and i64 %140, 255
  %142 = getelementptr inbounds [8 x [256 x i64]], [8 x [256 x i64]]* @SP, i64 0, i64 4, i64 %141
  %143 = load i64, i64* %142, align 8
  %144 = lshr i64 %124, 16
  %145 = and i64 %144, 255
  %146 = getelementptr inbounds [8 x [256 x i64]], [8 x [256 x i64]]* @SP, i64 0, i64 5, i64 %145
  %147 = load i64, i64* %146, align 8
  %148 = lshr i64 %124, 8
  %149 = and i64 %148, 255
  %150 = getelementptr inbounds [8 x [256 x i64]], [8 x [256 x i64]]* @SP, i64 0, i64 6, i64 %149
  %151 = load i64, i64* %150, align 8
  %152 = and i64 %124, 255
  %153 = getelementptr inbounds [8 x [256 x i64]], [8 x [256 x i64]]* @SP, i64 0, i64 7, i64 %152
  %154 = load i64, i64* %153, align 8
  %155 = xor i64 %127, %77
  %156 = xor i64 %155, %131
  %157 = xor i64 %156, %135
  %158 = xor i64 %157, %139
  %159 = xor i64 %158, %143
  %160 = xor i64 %159, %147
  %161 = xor i64 %160, %151
  %162 = xor i64 %161, %154
  %163 = load i64, i64* %15, align 8
  %164 = xor i64 %162, %163
  %165 = lshr i64 %164, 56
  %166 = getelementptr inbounds [8 x [256 x i64]], [8 x [256 x i64]]* @SP, i64 0, i64 0, i64 %165
  %167 = load i64, i64* %166, align 8
  %168 = lshr i64 %164, 48
  %169 = and i64 %168, 255
  %170 = getelementptr inbounds [8 x [256 x i64]], [8 x [256 x i64]]* @SP, i64 0, i64 1, i64 %169
  %171 = load i64, i64* %170, align 8
  %172 = lshr i64 %164, 40
  %173 = and i64 %172, 255
  %174 = getelementptr inbounds [8 x [256 x i64]], [8 x [256 x i64]]* @SP, i64 0, i64 2, i64 %173
  %175 = load i64, i64* %174, align 8
  %176 = lshr i64 %164, 32
  %177 = and i64 %176, 255
  %178 = getelementptr inbounds [8 x [256 x i64]], [8 x [256 x i64]]* @SP, i64 0, i64 3, i64 %177
  %179 = load i64, i64* %178, align 8
  %180 = lshr i64 %164, 24
  %181 = and i64 %180, 255
  %182 = getelementptr inbounds [8 x [256 x i64]], [8 x [256 x i64]]* @SP, i64 0, i64 4, i64 %181
  %183 = load i64, i64* %182, align 8
  %184 = lshr i64 %164, 16
  %185 = and i64 %184, 255
  %186 = getelementptr inbounds [8 x [256 x i64]], [8 x [256 x i64]]* @SP, i64 0, i64 5, i64 %185
  %187 = load i64, i64* %186, align 8
  %188 = lshr i64 %164, 8
  %189 = and i64 %188, 255
  %190 = getelementptr inbounds [8 x [256 x i64]], [8 x [256 x i64]]* @SP, i64 0, i64 6, i64 %189
  %191 = load i64, i64* %190, align 8
  %192 = and i64 %164, 255
  %193 = getelementptr inbounds [8 x [256 x i64]], [8 x [256 x i64]]* @SP, i64 0, i64 7, i64 %192
  %194 = load i64, i64* %193, align 8
  %195 = xor i64 %167, %122
  %196 = xor i64 %195, %171
  %197 = xor i64 %196, %175
  %198 = xor i64 %197, %179
  %199 = xor i64 %198, %183
  %200 = xor i64 %199, %187
  %201 = xor i64 %200, %191
  %202 = xor i64 %201, %194
  %203 = load i64, i64* %16, align 8
  %204 = xor i64 %202, %203
  %205 = lshr i64 %204, 56
  %206 = getelementptr inbounds [8 x [256 x i64]], [8 x [256 x i64]]* @SP, i64 0, i64 0, i64 %205
  %207 = load i64, i64* %206, align 8
  %208 = lshr i64 %204, 48
  %209 = and i64 %208, 255
  %210 = getelementptr inbounds [8 x [256 x i64]], [8 x [256 x i64]]* @SP, i64 0, i64 1, i64 %209
  %211 = load i64, i64* %210, align 8
  %212 = lshr i64 %204, 40
  %213 = and i64 %212, 255
  %214 = getelementptr inbounds [8 x [256 x i64]], [8 x [256 x i64]]* @SP, i64 0, i64 2, i64 %213
  %215 = load i64, i64* %214, align 8
  %216 = lshr i64 %204, 32
  %217 = and i64 %216, 255
  %218 = getelementptr inbounds [8 x [256 x i64]], [8 x [256 x i64]]* @SP, i64 0, i64 3, i64 %217
  %219 = load i64, i64* %218, align 8
  %220 = lshr i64 %204, 24
  %221 = and i64 %220, 255
  %222 = getelementptr inbounds [8 x [256 x i64]], [8 x [256 x i64]]* @SP, i64 0, i64 4, i64 %221
  %223 = load i64, i64* %222, align 8
  %224 = lshr i64 %204, 16
  %225 = and i64 %224, 255
  %226 = getelementptr inbounds [8 x [256 x i64]], [8 x [256 x i64]]* @SP, i64 0, i64 5, i64 %225
  %227 = load i64, i64* %226, align 8
  %228 = lshr i64 %204, 8
  %229 = and i64 %228, 255
  %230 = getelementptr inbounds [8 x [256 x i64]], [8 x [256 x i64]]* @SP, i64 0, i64 6, i64 %229
  %231 = load i64, i64* %230, align 8
  %232 = and i64 %204, 255
  %233 = getelementptr inbounds [8 x [256 x i64]], [8 x [256 x i64]]* @SP, i64 0, i64 7, i64 %232
  %234 = load i64, i64* %233, align 8
  %235 = xor i64 %207, %162
  %236 = xor i64 %235, %211
  %237 = xor i64 %236, %215
  %238 = xor i64 %237, %219
  %239 = xor i64 %238, %223
  %240 = xor i64 %239, %227
  %241 = xor i64 %240, %231
  %242 = xor i64 %241, %234
  %243 = load i64, i64* %17, align 8
  %244 = xor i64 %242, %243
  %245 = lshr i64 %244, 56
  %246 = getelementptr inbounds [8 x [256 x i64]], [8 x [256 x i64]]* @SP, i64 0, i64 0, i64 %245
  %247 = load i64, i64* %246, align 8
  %248 = lshr i64 %244, 48
  %249 = and i64 %248, 255
  %250 = getelementptr inbounds [8 x [256 x i64]], [8 x [256 x i64]]* @SP, i64 0, i64 1, i64 %249
  %251 = load i64, i64* %250, align 8
  %252 = lshr i64 %244, 40
  %253 = and i64 %252, 255
  %254 = getelementptr inbounds [8 x [256 x i64]], [8 x [256 x i64]]* @SP, i64 0, i64 2, i64 %253
  %255 = load i64, i64* %254, align 8
  %256 = lshr i64 %244, 32
  %257 = and i64 %256, 255
  %258 = getelementptr inbounds [8 x [256 x i64]], [8 x [256 x i64]]* @SP, i64 0, i64 3, i64 %257
  %259 = load i64, i64* %258, align 8
  %260 = lshr i64 %244, 24
  %261 = and i64 %260, 255
  %262 = getelementptr inbounds [8 x [256 x i64]], [8 x [256 x i64]]* @SP, i64 0, i64 4, i64 %261
  %263 = load i64, i64* %262, align 8
  %264 = lshr i64 %244, 16
  %265 = and i64 %264, 255
  %266 = getelementptr inbounds [8 x [256 x i64]], [8 x [256 x i64]]* @SP, i64 0, i64 5, i64 %265
  %267 = load i64, i64* %266, align 8
  %268 = lshr i64 %244, 8
  %269 = and i64 %268, 255
  %270 = getelementptr inbounds [8 x [256 x i64]], [8 x [256 x i64]]* @SP, i64 0, i64 6, i64 %269
  %271 = load i64, i64* %270, align 8
  %272 = and i64 %244, 255
  %273 = getelementptr inbounds [8 x [256 x i64]], [8 x [256 x i64]]* @SP, i64 0, i64 7, i64 %272
  %274 = load i64, i64* %273, align 8
  %275 = xor i64 %247, %202
  %276 = xor i64 %275, %251
  %277 = xor i64 %276, %255
  %278 = xor i64 %277, %259
  %279 = xor i64 %278, %263
  %280 = xor i64 %279, %267
  %281 = xor i64 %280, %271
  %282 = xor i64 %281, %274
  %283 = load i64, i64* %18, align 8
  %284 = xor i64 %282, %283
  %285 = lshr i64 %284, 56
  %286 = getelementptr inbounds [8 x [256 x i64]], [8 x [256 x i64]]* @SP, i64 0, i64 0, i64 %285
  %287 = load i64, i64* %286, align 8
  %288 = lshr i64 %284, 48
  %289 = and i64 %288, 255
  %290 = getelementptr inbounds [8 x [256 x i64]], [8 x [256 x i64]]* @SP, i64 0, i64 1, i64 %289
  %291 = load i64, i64* %290, align 8
  %292 = lshr i64 %284, 40
  %293 = and i64 %292, 255
  %294 = getelementptr inbounds [8 x [256 x i64]], [8 x [256 x i64]]* @SP, i64 0, i64 2, i64 %293
  %295 = load i64, i64* %294, align 8
  %296 = lshr i64 %284, 32
  %297 = and i64 %296, 255
  %298 = getelementptr inbounds [8 x [256 x i64]], [8 x [256 x i64]]* @SP, i64 0, i64 3, i64 %297
  %299 = load i64, i64* %298, align 8
  %300 = lshr i64 %284, 24
  %301 = and i64 %300, 255
  %302 = getelementptr inbounds [8 x [256 x i64]], [8 x [256 x i64]]* @SP, i64 0, i64 4, i64 %301
  %303 = load i64, i64* %302, align 8
  %304 = lshr i64 %284, 16
  %305 = and i64 %304, 255
  %306 = getelementptr inbounds [8 x [256 x i64]], [8 x [256 x i64]]* @SP, i64 0, i64 5, i64 %305
  %307 = load i64, i64* %306, align 8
  %308 = lshr i64 %284, 8
  %309 = and i64 %308, 255
  %310 = getelementptr inbounds [8 x [256 x i64]], [8 x [256 x i64]]* @SP, i64 0, i64 6, i64 %309
  %311 = load i64, i64* %310, align 8
  %312 = and i64 %284, 255
  %313 = getelementptr inbounds [8 x [256 x i64]], [8 x [256 x i64]]* @SP, i64 0, i64 7, i64 %312
  %314 = load i64, i64* %313, align 8
  %315 = xor i64 %287, %242
  %316 = xor i64 %315, %291
  %317 = xor i64 %316, %295
  %318 = xor i64 %317, %299
  %319 = xor i64 %318, %303
  %320 = xor i64 %319, %307
  %321 = xor i64 %320, %311
  %322 = xor i64 %321, %314
  %323 = load i64, i64* %19, align 8
  %324 = lshr i64 %322, 32
  %325 = trunc i64 %324 to i32
  %326 = trunc i64 %322 to i32
  %327 = lshr i64 %323, 32
  %328 = trunc i64 %323 to i32
  %329 = and i64 %324, %327
  %330 = trunc i64 %329 to i32
  %331 = shl i32 %330, 1
  %332 = lshr i32 %330, 31
  %333 = or i32 %331, %332
  %334 = xor i32 %333, %326
  %335 = or i32 %334, %328
  %336 = xor i32 %335, %325
  %337 = zext i32 %336 to i64
  %338 = shl nuw i64 %337, 32
  %339 = zext i32 %334 to i64
  %340 = or i64 %338, %339
  %341 = load i64, i64* %20, align 8
  %342 = lshr i64 %282, 32
  %343 = trunc i64 %282 to i32
  %344 = lshr i64 %341, 32
  %345 = or i64 %341, %282
  %346 = xor i64 %345, %342
  %347 = and i64 %346, %344
  %348 = trunc i64 %347 to i32
  %349 = shl i32 %348, 1
  %350 = lshr i32 %348, 31
  %351 = or i32 %349, %350
  %352 = xor i32 %351, %343
  %353 = shl i64 %346, 32
  %354 = zext i32 %352 to i64
  %355 = or i64 %353, %354
  br label %356

356:                                              ; preds = %82, %68
  %357 = phi i64 [ %340, %82 ], [ %77, %68 ]
  %358 = phi i64 [ %355, %82 ], [ %79, %68 ]
  %359 = load i64, i64* %21, align 8
  %360 = xor i64 %359, %357
  %361 = lshr i64 %360, 56
  %362 = getelementptr inbounds [8 x [256 x i64]], [8 x [256 x i64]]* @SP, i64 0, i64 0, i64 %361
  %363 = load i64, i64* %362, align 8
  %364 = lshr i64 %360, 48
  %365 = and i64 %364, 255
  %366 = getelementptr inbounds [8 x [256 x i64]], [8 x [256 x i64]]* @SP, i64 0, i64 1, i64 %365
  %367 = load i64, i64* %366, align 8
  %368 = lshr i64 %360, 40
  %369 = and i64 %368, 255
  %370 = getelementptr inbounds [8 x [256 x i64]], [8 x [256 x i64]]* @SP, i64 0, i64 2, i64 %369
  %371 = load i64, i64* %370, align 8
  %372 = lshr i64 %360, 32
  %373 = and i64 %372, 255
  %374 = getelementptr inbounds [8 x [256 x i64]], [8 x [256 x i64]]* @SP, i64 0, i64 3, i64 %373
  %375 = load i64, i64* %374, align 8
  %376 = lshr i64 %360, 24
  %377 = and i64 %376, 255
  %378 = getelementptr inbounds [8 x [256 x i64]], [8 x [256 x i64]]* @SP, i64 0, i64 4, i64 %377
  %379 = load i64, i64* %378, align 8
  %380 = lshr i64 %360, 16
  %381 = and i64 %380, 255
  %382 = getelementptr inbounds [8 x [256 x i64]], [8 x [256 x i64]]* @SP, i64 0, i64 5, i64 %381
  %383 = load i64, i64* %382, align 8
  %384 = lshr i64 %360, 8
  %385 = and i64 %384, 255
  %386 = getelementptr inbounds [8 x [256 x i64]], [8 x [256 x i64]]* @SP, i64 0, i64 6, i64 %385
  %387 = load i64, i64* %386, align 8
  %388 = and i64 %360, 255
  %389 = getelementptr inbounds [8 x [256 x i64]], [8 x [256 x i64]]* @SP, i64 0, i64 7, i64 %388
  %390 = load i64, i64* %389, align 8
  %391 = xor i64 %363, %358
  %392 = xor i64 %391, %367
  %393 = xor i64 %392, %371
  %394 = xor i64 %393, %375
  %395 = xor i64 %394, %379
  %396 = xor i64 %395, %383
  %397 = xor i64 %396, %387
  %398 = xor i64 %397, %390
  %399 = load i64, i64* %22, align 8
  %400 = xor i64 %398, %399
  %401 = lshr i64 %400, 56
  %402 = getelementptr inbounds [8 x [256 x i64]], [8 x [256 x i64]]* @SP, i64 0, i64 0, i64 %401
  %403 = load i64, i64* %402, align 8
  %404 = lshr i64 %400, 48
  %405 = and i64 %404, 255
  %406 = getelementptr inbounds [8 x [256 x i64]], [8 x [256 x i64]]* @SP, i64 0, i64 1, i64 %405
  %407 = load i64, i64* %406, align 8
  %408 = lshr i64 %400, 40
  %409 = and i64 %408, 255
  %410 = getelementptr inbounds [8 x [256 x i64]], [8 x [256 x i64]]* @SP, i64 0, i64 2, i64 %409
  %411 = load i64, i64* %410, align 8
  %412 = lshr i64 %400, 32
  %413 = and i64 %412, 255
  %414 = getelementptr inbounds [8 x [256 x i64]], [8 x [256 x i64]]* @SP, i64 0, i64 3, i64 %413
  %415 = load i64, i64* %414, align 8
  %416 = lshr i64 %400, 24
  %417 = and i64 %416, 255
  %418 = getelementptr inbounds [8 x [256 x i64]], [8 x [256 x i64]]* @SP, i64 0, i64 4, i64 %417
  %419 = load i64, i64* %418, align 8
  %420 = lshr i64 %400, 16
  %421 = and i64 %420, 255
  %422 = getelementptr inbounds [8 x [256 x i64]], [8 x [256 x i64]]* @SP, i64 0, i64 5, i64 %421
  %423 = load i64, i64* %422, align 8
  %424 = lshr i64 %400, 8
  %425 = and i64 %424, 255
  %426 = getelementptr inbounds [8 x [256 x i64]], [8 x [256 x i64]]* @SP, i64 0, i64 6, i64 %425
  %427 = load i64, i64* %426, align 8
  %428 = and i64 %400, 255
  %429 = getelementptr inbounds [8 x [256 x i64]], [8 x [256 x i64]]* @SP, i64 0, i64 7, i64 %428
  %430 = load i64, i64* %429, align 8
  %431 = xor i64 %403, %357
  %432 = xor i64 %431, %407
  %433 = xor i64 %432, %411
  %434 = xor i64 %433, %415
  %435 = xor i64 %434, %419
  %436 = xor i64 %435, %423
  %437 = xor i64 %436, %427
  %438 = xor i64 %437, %430
  %439 = load i64, i64* %23, align 8
  %440 = xor i64 %438, %439
  %441 = lshr i64 %440, 56
  %442 = getelementptr inbounds [8 x [256 x i64]], [8 x [256 x i64]]* @SP, i64 0, i64 0, i64 %441
  %443 = load i64, i64* %442, align 8
  %444 = lshr i64 %440, 48
  %445 = and i64 %444, 255
  %446 = getelementptr inbounds [8 x [256 x i64]], [8 x [256 x i64]]* @SP, i64 0, i64 1, i64 %445
  %447 = load i64, i64* %446, align 8
  %448 = lshr i64 %440, 40
  %449 = and i64 %448, 255
  %450 = getelementptr inbounds [8 x [256 x i64]], [8 x [256 x i64]]* @SP, i64 0, i64 2, i64 %449
  %451 = load i64, i64* %450, align 8
  %452 = lshr i64 %440, 32
  %453 = and i64 %452, 255
  %454 = getelementptr inbounds [8 x [256 x i64]], [8 x [256 x i64]]* @SP, i64 0, i64 3, i64 %453
  %455 = load i64, i64* %454, align 8
  %456 = lshr i64 %440, 24
  %457 = and i64 %456, 255
  %458 = getelementptr inbounds [8 x [256 x i64]], [8 x [256 x i64]]* @SP, i64 0, i64 4, i64 %457
  %459 = load i64, i64* %458, align 8
  %460 = lshr i64 %440, 16
  %461 = and i64 %460, 255
  %462 = getelementptr inbounds [8 x [256 x i64]], [8 x [256 x i64]]* @SP, i64 0, i64 5, i64 %461
  %463 = load i64, i64* %462, align 8
  %464 = lshr i64 %440, 8
  %465 = and i64 %464, 255
  %466 = getelementptr inbounds [8 x [256 x i64]], [8 x [256 x i64]]* @SP, i64 0, i64 6, i64 %465
  %467 = load i64, i64* %466, align 8
  %468 = and i64 %440, 255
  %469 = getelementptr inbounds [8 x [256 x i64]], [8 x [256 x i64]]* @SP, i64 0, i64 7, i64 %468
  %470 = load i64, i64* %469, align 8
  %471 = xor i64 %443, %398
  %472 = xor i64 %471, %447
  %473 = xor i64 %472, %451
  %474 = xor i64 %473, %455
  %475 = xor i64 %474, %459
  %476 = xor i64 %475, %463
  %477 = xor i64 %476, %467
  %478 = xor i64 %477, %470
  %479 = load i64, i64* %24, align 8
  %480 = xor i64 %478, %479
  %481 = lshr i64 %480, 56
  %482 = getelementptr inbounds [8 x [256 x i64]], [8 x [256 x i64]]* @SP, i64 0, i64 0, i64 %481
  %483 = load i64, i64* %482, align 8
  %484 = lshr i64 %480, 48
  %485 = and i64 %484, 255
  %486 = getelementptr inbounds [8 x [256 x i64]], [8 x [256 x i64]]* @SP, i64 0, i64 1, i64 %485
  %487 = load i64, i64* %486, align 8
  %488 = lshr i64 %480, 40
  %489 = and i64 %488, 255
  %490 = getelementptr inbounds [8 x [256 x i64]], [8 x [256 x i64]]* @SP, i64 0, i64 2, i64 %489
  %491 = load i64, i64* %490, align 8
  %492 = lshr i64 %480, 32
  %493 = and i64 %492, 255
  %494 = getelementptr inbounds [8 x [256 x i64]], [8 x [256 x i64]]* @SP, i64 0, i64 3, i64 %493
  %495 = load i64, i64* %494, align 8
  %496 = lshr i64 %480, 24
  %497 = and i64 %496, 255
  %498 = getelementptr inbounds [8 x [256 x i64]], [8 x [256 x i64]]* @SP, i64 0, i64 4, i64 %497
  %499 = load i64, i64* %498, align 8
  %500 = lshr i64 %480, 16
  %501 = and i64 %500, 255
  %502 = getelementptr inbounds [8 x [256 x i64]], [8 x [256 x i64]]* @SP, i64 0, i64 5, i64 %501
  %503 = load i64, i64* %502, align 8
  %504 = lshr i64 %480, 8
  %505 = and i64 %504, 255
  %506 = getelementptr inbounds [8 x [256 x i64]], [8 x [256 x i64]]* @SP, i64 0, i64 6, i64 %505
  %507 = load i64, i64* %506, align 8
  %508 = and i64 %480, 255
  %509 = getelementptr inbounds [8 x [256 x i64]], [8 x [256 x i64]]* @SP, i64 0, i64 7, i64 %508
  %510 = load i64, i64* %509, align 8
  %511 = xor i64 %483, %438
  %512 = xor i64 %511, %487
  %513 = xor i64 %512, %491
  %514 = xor i64 %513, %495
  %515 = xor i64 %514, %499
  %516 = xor i64 %515, %503
  %517 = xor i64 %516, %507
  %518 = xor i64 %517, %510
  %519 = load i64, i64* %25, align 8
  %520 = xor i64 %518, %519
  %521 = lshr i64 %520, 56
  %522 = getelementptr inbounds [8 x [256 x i64]], [8 x [256 x i64]]* @SP, i64 0, i64 0, i64 %521
  %523 = load i64, i64* %522, align 8
  %524 = lshr i64 %520, 48
  %525 = and i64 %524, 255
  %526 = getelementptr inbounds [8 x [256 x i64]], [8 x [256 x i64]]* @SP, i64 0, i64 1, i64 %525
  %527 = load i64, i64* %526, align 8
  %528 = lshr i64 %520, 40
  %529 = and i64 %528, 255
  %530 = getelementptr inbounds [8 x [256 x i64]], [8 x [256 x i64]]* @SP, i64 0, i64 2, i64 %529
  %531 = load i64, i64* %530, align 8
  %532 = lshr i64 %520, 32
  %533 = and i64 %532, 255
  %534 = getelementptr inbounds [8 x [256 x i64]], [8 x [256 x i64]]* @SP, i64 0, i64 3, i64 %533
  %535 = load i64, i64* %534, align 8
  %536 = lshr i64 %520, 24
  %537 = and i64 %536, 255
  %538 = getelementptr inbounds [8 x [256 x i64]], [8 x [256 x i64]]* @SP, i64 0, i64 4, i64 %537
  %539 = load i64, i64* %538, align 8
  %540 = lshr i64 %520, 16
  %541 = and i64 %540, 255
  %542 = getelementptr inbounds [8 x [256 x i64]], [8 x [256 x i64]]* @SP, i64 0, i64 5, i64 %541
  %543 = load i64, i64* %542, align 8
  %544 = lshr i64 %520, 8
  %545 = and i64 %544, 255
  %546 = getelementptr inbounds [8 x [256 x i64]], [8 x [256 x i64]]* @SP, i64 0, i64 6, i64 %545
  %547 = load i64, i64* %546, align 8
  %548 = and i64 %520, 255
  %549 = getelementptr inbounds [8 x [256 x i64]], [8 x [256 x i64]]* @SP, i64 0, i64 7, i64 %548
  %550 = load i64, i64* %549, align 8
  %551 = xor i64 %523, %478
  %552 = xor i64 %551, %527
  %553 = xor i64 %552, %531
  %554 = xor i64 %553, %535
  %555 = xor i64 %554, %539
  %556 = xor i64 %555, %543
  %557 = xor i64 %556, %547
  %558 = xor i64 %557, %550
  %559 = load i64, i64* %26, align 8
  %560 = xor i64 %558, %559
  %561 = lshr i64 %560, 56
  %562 = getelementptr inbounds [8 x [256 x i64]], [8 x [256 x i64]]* @SP, i64 0, i64 0, i64 %561
  %563 = load i64, i64* %562, align 8
  %564 = lshr i64 %560, 48
  %565 = and i64 %564, 255
  %566 = getelementptr inbounds [8 x [256 x i64]], [8 x [256 x i64]]* @SP, i64 0, i64 1, i64 %565
  %567 = load i64, i64* %566, align 8
  %568 = lshr i64 %560, 40
  %569 = and i64 %568, 255
  %570 = getelementptr inbounds [8 x [256 x i64]], [8 x [256 x i64]]* @SP, i64 0, i64 2, i64 %569
  %571 = load i64, i64* %570, align 8
  %572 = lshr i64 %560, 32
  %573 = and i64 %572, 255
  %574 = getelementptr inbounds [8 x [256 x i64]], [8 x [256 x i64]]* @SP, i64 0, i64 3, i64 %573
  %575 = load i64, i64* %574, align 8
  %576 = lshr i64 %560, 24
  %577 = and i64 %576, 255
  %578 = getelementptr inbounds [8 x [256 x i64]], [8 x [256 x i64]]* @SP, i64 0, i64 4, i64 %577
  %579 = load i64, i64* %578, align 8
  %580 = lshr i64 %560, 16
  %581 = and i64 %580, 255
  %582 = getelementptr inbounds [8 x [256 x i64]], [8 x [256 x i64]]* @SP, i64 0, i64 5, i64 %581
  %583 = load i64, i64* %582, align 8
  %584 = lshr i64 %560, 8
  %585 = and i64 %584, 255
  %586 = getelementptr inbounds [8 x [256 x i64]], [8 x [256 x i64]]* @SP, i64 0, i64 6, i64 %585
  %587 = load i64, i64* %586, align 8
  %588 = and i64 %560, 255
  %589 = getelementptr inbounds [8 x [256 x i64]], [8 x [256 x i64]]* @SP, i64 0, i64 7, i64 %588
  %590 = load i64, i64* %589, align 8
  %591 = xor i64 %563, %518
  %592 = xor i64 %591, %567
  %593 = xor i64 %592, %571
  %594 = xor i64 %593, %575
  %595 = xor i64 %594, %579
  %596 = xor i64 %595, %583
  %597 = xor i64 %596, %587
  %598 = xor i64 %597, %590
  %599 = load i64, i64* %27, align 8
  %600 = lshr i64 %598, 32
  %601 = trunc i64 %600 to i32
  %602 = trunc i64 %598 to i32
  %603 = lshr i64 %599, 32
  %604 = trunc i64 %599 to i32
  %605 = and i64 %600, %603
  %606 = trunc i64 %605 to i32
  %607 = shl i32 %606, 1
  %608 = lshr i32 %606, 31
  %609 = or i32 %607, %608
  %610 = xor i32 %609, %602
  %611 = or i32 %610, %604
  %612 = xor i32 %611, %601
  %613 = zext i32 %612 to i64
  %614 = shl nuw i64 %613, 32
  %615 = zext i32 %610 to i64
  %616 = or i64 %614, %615
  %617 = load i64, i64* %28, align 8
  %618 = lshr i64 %558, 32
  %619 = trunc i64 %558 to i32
  %620 = lshr i64 %617, 32
  %621 = or i64 %617, %558
  %622 = xor i64 %621, %618
  %623 = and i64 %622, %620
  %624 = trunc i64 %623 to i32
  %625 = shl i32 %624, 1
  %626 = lshr i32 %624, 31
  %627 = or i32 %625, %626
  %628 = xor i32 %627, %619
  %629 = shl i64 %622, 32
  %630 = zext i32 %628 to i64
  %631 = or i64 %629, %630
  %632 = load i64, i64* %29, align 8
  %633 = xor i64 %616, %632
  %634 = lshr i64 %633, 56
  %635 = getelementptr inbounds [8 x [256 x i64]], [8 x [256 x i64]]* @SP, i64 0, i64 0, i64 %634
  %636 = load i64, i64* %635, align 8
  %637 = lshr i64 %633, 48
  %638 = and i64 %637, 255
  %639 = getelementptr inbounds [8 x [256 x i64]], [8 x [256 x i64]]* @SP, i64 0, i64 1, i64 %638
  %640 = load i64, i64* %639, align 8
  %641 = xor i64 %640, %636
  %642 = lshr i64 %633, 40
  %643 = and i64 %642, 255
  %644 = getelementptr inbounds [8 x [256 x i64]], [8 x [256 x i64]]* @SP, i64 0, i64 2, i64 %643
  %645 = load i64, i64* %644, align 8
  %646 = xor i64 %641, %645
  %647 = lshr i64 %633, 32
  %648 = and i64 %647, 255
  %649 = getelementptr inbounds [8 x [256 x i64]], [8 x [256 x i64]]* @SP, i64 0, i64 3, i64 %648
  %650 = load i64, i64* %649, align 8
  %651 = xor i64 %646, %650
  %652 = lshr i64 %633, 24
  %653 = and i64 %652, 255
  %654 = getelementptr inbounds [8 x [256 x i64]], [8 x [256 x i64]]* @SP, i64 0, i64 4, i64 %653
  %655 = load i64, i64* %654, align 8
  %656 = xor i64 %651, %655
  %657 = lshr i64 %633, 16
  %658 = and i64 %657, 255
  %659 = getelementptr inbounds [8 x [256 x i64]], [8 x [256 x i64]]* @SP, i64 0, i64 5, i64 %658
  %660 = load i64, i64* %659, align 8
  %661 = xor i64 %656, %660
  %662 = lshr i64 %633, 8
  %663 = and i64 %662, 255
  %664 = getelementptr inbounds [8 x [256 x i64]], [8 x [256 x i64]]* @SP, i64 0, i64 6, i64 %663
  %665 = load i64, i64* %664, align 8
  %666 = xor i64 %661, %665
  %667 = and i64 %633, 255
  %668 = getelementptr inbounds [8 x [256 x i64]], [8 x [256 x i64]]* @SP, i64 0, i64 7, i64 %667
  %669 = load i64, i64* %668, align 8
  %670 = xor i64 %666, %669
  %671 = xor i64 %670, %631
  %672 = load i64, i64* %30, align 8
  %673 = xor i64 %671, %672
  %674 = lshr i64 %673, 56
  %675 = getelementptr inbounds [8 x [256 x i64]], [8 x [256 x i64]]* @SP, i64 0, i64 0, i64 %674
  %676 = load i64, i64* %675, align 8
  %677 = lshr i64 %673, 48
  %678 = and i64 %677, 255
  %679 = getelementptr inbounds [8 x [256 x i64]], [8 x [256 x i64]]* @SP, i64 0, i64 1, i64 %678
  %680 = load i64, i64* %679, align 8
  %681 = lshr i64 %673, 40
  %682 = and i64 %681, 255
  %683 = getelementptr inbounds [8 x [256 x i64]], [8 x [256 x i64]]* @SP, i64 0, i64 2, i64 %682
  %684 = load i64, i64* %683, align 8
  %685 = lshr i64 %673, 32
  %686 = and i64 %685, 255
  %687 = getelementptr inbounds [8 x [256 x i64]], [8 x [256 x i64]]* @SP, i64 0, i64 3, i64 %686
  %688 = load i64, i64* %687, align 8
  %689 = lshr i64 %673, 24
  %690 = and i64 %689, 255
  %691 = getelementptr inbounds [8 x [256 x i64]], [8 x [256 x i64]]* @SP, i64 0, i64 4, i64 %690
  %692 = load i64, i64* %691, align 8
  %693 = lshr i64 %673, 16
  %694 = and i64 %693, 255
  %695 = getelementptr inbounds [8 x [256 x i64]], [8 x [256 x i64]]* @SP, i64 0, i64 5, i64 %694
  %696 = load i64, i64* %695, align 8
  %697 = lshr i64 %673, 8
  %698 = and i64 %697, 255
  %699 = getelementptr inbounds [8 x [256 x i64]], [8 x [256 x i64]]* @SP, i64 0, i64 6, i64 %698
  %700 = load i64, i64* %699, align 8
  %701 = and i64 %673, 255
  %702 = getelementptr inbounds [8 x [256 x i64]], [8 x [256 x i64]]* @SP, i64 0, i64 7, i64 %701
  %703 = load i64, i64* %702, align 8
  %704 = xor i64 %676, %616
  %705 = xor i64 %704, %680
  %706 = xor i64 %705, %684
  %707 = xor i64 %706, %688
  %708 = xor i64 %707, %692
  %709 = xor i64 %708, %696
  %710 = xor i64 %709, %700
  %711 = xor i64 %710, %703
  %712 = load i64, i64* %31, align 8
  %713 = xor i64 %711, %712
  %714 = lshr i64 %713, 56
  %715 = getelementptr inbounds [8 x [256 x i64]], [8 x [256 x i64]]* @SP, i64 0, i64 0, i64 %714
  %716 = load i64, i64* %715, align 8
  %717 = lshr i64 %713, 48
  %718 = and i64 %717, 255
  %719 = getelementptr inbounds [8 x [256 x i64]], [8 x [256 x i64]]* @SP, i64 0, i64 1, i64 %718
  %720 = load i64, i64* %719, align 8
  %721 = lshr i64 %713, 40
  %722 = and i64 %721, 255
  %723 = getelementptr inbounds [8 x [256 x i64]], [8 x [256 x i64]]* @SP, i64 0, i64 2, i64 %722
  %724 = load i64, i64* %723, align 8
  %725 = lshr i64 %713, 32
  %726 = and i64 %725, 255
  %727 = getelementptr inbounds [8 x [256 x i64]], [8 x [256 x i64]]* @SP, i64 0, i64 3, i64 %726
  %728 = load i64, i64* %727, align 8
  %729 = lshr i64 %713, 24
  %730 = and i64 %729, 255
  %731 = getelementptr inbounds [8 x [256 x i64]], [8 x [256 x i64]]* @SP, i64 0, i64 4, i64 %730
  %732 = load i64, i64* %731, align 8
  %733 = lshr i64 %713, 16
  %734 = and i64 %733, 255
  %735 = getelementptr inbounds [8 x [256 x i64]], [8 x [256 x i64]]* @SP, i64 0, i64 5, i64 %734
  %736 = load i64, i64* %735, align 8
  %737 = lshr i64 %713, 8
  %738 = and i64 %737, 255
  %739 = getelementptr inbounds [8 x [256 x i64]], [8 x [256 x i64]]* @SP, i64 0, i64 6, i64 %738
  %740 = load i64, i64* %739, align 8
  %741 = and i64 %713, 255
  %742 = getelementptr inbounds [8 x [256 x i64]], [8 x [256 x i64]]* @SP, i64 0, i64 7, i64 %741
  %743 = load i64, i64* %742, align 8
  %744 = xor i64 %716, %671
  %745 = xor i64 %744, %720
  %746 = xor i64 %745, %724
  %747 = xor i64 %746, %728
  %748 = xor i64 %747, %732
  %749 = xor i64 %748, %736
  %750 = xor i64 %749, %740
  %751 = xor i64 %750, %743
  %752 = load i64, i64* %32, align 8
  %753 = xor i64 %751, %752
  %754 = lshr i64 %753, 56
  %755 = getelementptr inbounds [8 x [256 x i64]], [8 x [256 x i64]]* @SP, i64 0, i64 0, i64 %754
  %756 = load i64, i64* %755, align 8
  %757 = lshr i64 %753, 48
  %758 = and i64 %757, 255
  %759 = getelementptr inbounds [8 x [256 x i64]], [8 x [256 x i64]]* @SP, i64 0, i64 1, i64 %758
  %760 = load i64, i64* %759, align 8
  %761 = lshr i64 %753, 40
  %762 = and i64 %761, 255
  %763 = getelementptr inbounds [8 x [256 x i64]], [8 x [256 x i64]]* @SP, i64 0, i64 2, i64 %762
  %764 = load i64, i64* %763, align 8
  %765 = lshr i64 %753, 32
  %766 = and i64 %765, 255
  %767 = getelementptr inbounds [8 x [256 x i64]], [8 x [256 x i64]]* @SP, i64 0, i64 3, i64 %766
  %768 = load i64, i64* %767, align 8
  %769 = lshr i64 %753, 24
  %770 = and i64 %769, 255
  %771 = getelementptr inbounds [8 x [256 x i64]], [8 x [256 x i64]]* @SP, i64 0, i64 4, i64 %770
  %772 = load i64, i64* %771, align 8
  %773 = lshr i64 %753, 16
  %774 = and i64 %773, 255
  %775 = getelementptr inbounds [8 x [256 x i64]], [8 x [256 x i64]]* @SP, i64 0, i64 5, i64 %774
  %776 = load i64, i64* %775, align 8
  %777 = lshr i64 %753, 8
  %778 = and i64 %777, 255
  %779 = getelementptr inbounds [8 x [256 x i64]], [8 x [256 x i64]]* @SP, i64 0, i64 6, i64 %778
  %780 = load i64, i64* %779, align 8
  %781 = and i64 %753, 255
  %782 = getelementptr inbounds [8 x [256 x i64]], [8 x [256 x i64]]* @SP, i64 0, i64 7, i64 %781
  %783 = load i64, i64* %782, align 8
  %784 = xor i64 %756, %711
  %785 = xor i64 %784, %760
  %786 = xor i64 %785, %764
  %787 = xor i64 %786, %768
  %788 = xor i64 %787, %772
  %789 = xor i64 %788, %776
  %790 = xor i64 %789, %780
  %791 = xor i64 %790, %783
  %792 = load i64, i64* %33, align 8
  %793 = xor i64 %791, %792
  %794 = lshr i64 %793, 56
  %795 = getelementptr inbounds [8 x [256 x i64]], [8 x [256 x i64]]* @SP, i64 0, i64 0, i64 %794
  %796 = load i64, i64* %795, align 8
  %797 = lshr i64 %793, 48
  %798 = and i64 %797, 255
  %799 = getelementptr inbounds [8 x [256 x i64]], [8 x [256 x i64]]* @SP, i64 0, i64 1, i64 %798
  %800 = load i64, i64* %799, align 8
  %801 = lshr i64 %793, 40
  %802 = and i64 %801, 255
  %803 = getelementptr inbounds [8 x [256 x i64]], [8 x [256 x i64]]* @SP, i64 0, i64 2, i64 %802
  %804 = load i64, i64* %803, align 8
  %805 = lshr i64 %793, 32
  %806 = and i64 %805, 255
  %807 = getelementptr inbounds [8 x [256 x i64]], [8 x [256 x i64]]* @SP, i64 0, i64 3, i64 %806
  %808 = load i64, i64* %807, align 8
  %809 = lshr i64 %793, 24
  %810 = and i64 %809, 255
  %811 = getelementptr inbounds [8 x [256 x i64]], [8 x [256 x i64]]* @SP, i64 0, i64 4, i64 %810
  %812 = load i64, i64* %811, align 8
  %813 = lshr i64 %793, 16
  %814 = and i64 %813, 255
  %815 = getelementptr inbounds [8 x [256 x i64]], [8 x [256 x i64]]* @SP, i64 0, i64 5, i64 %814
  %816 = load i64, i64* %815, align 8
  %817 = lshr i64 %793, 8
  %818 = and i64 %817, 255
  %819 = getelementptr inbounds [8 x [256 x i64]], [8 x [256 x i64]]* @SP, i64 0, i64 6, i64 %818
  %820 = load i64, i64* %819, align 8
  %821 = and i64 %793, 255
  %822 = getelementptr inbounds [8 x [256 x i64]], [8 x [256 x i64]]* @SP, i64 0, i64 7, i64 %821
  %823 = load i64, i64* %822, align 8
  %824 = xor i64 %796, %751
  %825 = xor i64 %824, %800
  %826 = xor i64 %825, %804
  %827 = xor i64 %826, %808
  %828 = xor i64 %827, %812
  %829 = xor i64 %828, %816
  %830 = xor i64 %829, %820
  %831 = xor i64 %830, %823
  %832 = load i64, i64* %34, align 8
  %833 = xor i64 %831, %832
  %834 = lshr i64 %833, 56
  %835 = getelementptr inbounds [8 x [256 x i64]], [8 x [256 x i64]]* @SP, i64 0, i64 0, i64 %834
  %836 = load i64, i64* %835, align 8
  %837 = lshr i64 %833, 48
  %838 = and i64 %837, 255
  %839 = getelementptr inbounds [8 x [256 x i64]], [8 x [256 x i64]]* @SP, i64 0, i64 1, i64 %838
  %840 = load i64, i64* %839, align 8
  %841 = lshr i64 %833, 40
  %842 = and i64 %841, 255
  %843 = getelementptr inbounds [8 x [256 x i64]], [8 x [256 x i64]]* @SP, i64 0, i64 2, i64 %842
  %844 = load i64, i64* %843, align 8
  %845 = lshr i64 %833, 32
  %846 = and i64 %845, 255
  %847 = getelementptr inbounds [8 x [256 x i64]], [8 x [256 x i64]]* @SP, i64 0, i64 3, i64 %846
  %848 = load i64, i64* %847, align 8
  %849 = lshr i64 %833, 24
  %850 = and i64 %849, 255
  %851 = getelementptr inbounds [8 x [256 x i64]], [8 x [256 x i64]]* @SP, i64 0, i64 4, i64 %850
  %852 = load i64, i64* %851, align 8
  %853 = lshr i64 %833, 16
  %854 = and i64 %853, 255
  %855 = getelementptr inbounds [8 x [256 x i64]], [8 x [256 x i64]]* @SP, i64 0, i64 5, i64 %854
  %856 = load i64, i64* %855, align 8
  %857 = lshr i64 %833, 8
  %858 = and i64 %857, 255
  %859 = getelementptr inbounds [8 x [256 x i64]], [8 x [256 x i64]]* @SP, i64 0, i64 6, i64 %858
  %860 = load i64, i64* %859, align 8
  %861 = and i64 %833, 255
  %862 = getelementptr inbounds [8 x [256 x i64]], [8 x [256 x i64]]* @SP, i64 0, i64 7, i64 %861
  %863 = load i64, i64* %862, align 8
  %864 = xor i64 %836, %791
  %865 = xor i64 %864, %840
  %866 = xor i64 %865, %844
  %867 = xor i64 %866, %848
  %868 = xor i64 %867, %852
  %869 = xor i64 %868, %856
  %870 = xor i64 %869, %860
  %871 = xor i64 %870, %863
  %872 = load i64, i64* %35, align 8
  %873 = lshr i64 %871, 32
  %874 = trunc i64 %873 to i32
  %875 = trunc i64 %871 to i32
  %876 = lshr i64 %872, 32
  %877 = trunc i64 %872 to i32
  %878 = and i64 %873, %876
  %879 = trunc i64 %878 to i32
  %880 = shl i32 %879, 1
  %881 = lshr i32 %879, 31
  %882 = or i32 %880, %881
  %883 = xor i32 %882, %875
  %884 = or i32 %883, %877
  %885 = xor i32 %884, %874
  %886 = zext i32 %885 to i64
  %887 = shl nuw i64 %886, 32
  %888 = zext i32 %883 to i64
  %889 = or i64 %887, %888
  %890 = load i64, i64* %36, align 8
  %891 = lshr i64 %831, 32
  %892 = trunc i64 %831 to i32
  %893 = lshr i64 %890, 32
  %894 = or i64 %890, %831
  %895 = xor i64 %894, %891
  %896 = and i64 %895, %893
  %897 = trunc i64 %896 to i32
  %898 = shl i32 %897, 1
  %899 = lshr i32 %897, 31
  %900 = or i32 %898, %899
  %901 = xor i32 %900, %892
  %902 = shl i64 %895, 32
  %903 = zext i32 %901 to i64
  %904 = or i64 %902, %903
  %905 = load i64, i64* %37, align 8
  %906 = xor i64 %889, %905
  %907 = lshr i64 %906, 56
  %908 = getelementptr inbounds [8 x [256 x i64]], [8 x [256 x i64]]* @SP, i64 0, i64 0, i64 %907
  %909 = load i64, i64* %908, align 8
  %910 = lshr i64 %906, 48
  %911 = and i64 %910, 255
  %912 = getelementptr inbounds [8 x [256 x i64]], [8 x [256 x i64]]* @SP, i64 0, i64 1, i64 %911
  %913 = load i64, i64* %912, align 8
  %914 = xor i64 %913, %909
  %915 = lshr i64 %906, 40
  %916 = and i64 %915, 255
  %917 = getelementptr inbounds [8 x [256 x i64]], [8 x [256 x i64]]* @SP, i64 0, i64 2, i64 %916
  %918 = load i64, i64* %917, align 8
  %919 = xor i64 %914, %918
  %920 = lshr i64 %906, 32
  %921 = and i64 %920, 255
  %922 = getelementptr inbounds [8 x [256 x i64]], [8 x [256 x i64]]* @SP, i64 0, i64 3, i64 %921
  %923 = load i64, i64* %922, align 8
  %924 = xor i64 %919, %923
  %925 = lshr i64 %906, 24
  %926 = and i64 %925, 255
  %927 = getelementptr inbounds [8 x [256 x i64]], [8 x [256 x i64]]* @SP, i64 0, i64 4, i64 %926
  %928 = load i64, i64* %927, align 8
  %929 = xor i64 %924, %928
  %930 = lshr i64 %906, 16
  %931 = and i64 %930, 255
  %932 = getelementptr inbounds [8 x [256 x i64]], [8 x [256 x i64]]* @SP, i64 0, i64 5, i64 %931
  %933 = load i64, i64* %932, align 8
  %934 = xor i64 %929, %933
  %935 = lshr i64 %906, 8
  %936 = and i64 %935, 255
  %937 = getelementptr inbounds [8 x [256 x i64]], [8 x [256 x i64]]* @SP, i64 0, i64 6, i64 %936
  %938 = load i64, i64* %937, align 8
  %939 = xor i64 %934, %938
  %940 = and i64 %906, 255
  %941 = getelementptr inbounds [8 x [256 x i64]], [8 x [256 x i64]]* @SP, i64 0, i64 7, i64 %940
  %942 = load i64, i64* %941, align 8
  %943 = xor i64 %939, %942
  %944 = xor i64 %943, %904
  %945 = load i64, i64* %38, align 8
  %946 = xor i64 %944, %945
  %947 = lshr i64 %946, 56
  %948 = getelementptr inbounds [8 x [256 x i64]], [8 x [256 x i64]]* @SP, i64 0, i64 0, i64 %947
  %949 = load i64, i64* %948, align 8
  %950 = lshr i64 %946, 48
  %951 = and i64 %950, 255
  %952 = getelementptr inbounds [8 x [256 x i64]], [8 x [256 x i64]]* @SP, i64 0, i64 1, i64 %951
  %953 = load i64, i64* %952, align 8
  %954 = lshr i64 %946, 40
  %955 = and i64 %954, 255
  %956 = getelementptr inbounds [8 x [256 x i64]], [8 x [256 x i64]]* @SP, i64 0, i64 2, i64 %955
  %957 = load i64, i64* %956, align 8
  %958 = lshr i64 %946, 32
  %959 = and i64 %958, 255
  %960 = getelementptr inbounds [8 x [256 x i64]], [8 x [256 x i64]]* @SP, i64 0, i64 3, i64 %959
  %961 = load i64, i64* %960, align 8
  %962 = lshr i64 %946, 24
  %963 = and i64 %962, 255
  %964 = getelementptr inbounds [8 x [256 x i64]], [8 x [256 x i64]]* @SP, i64 0, i64 4, i64 %963
  %965 = load i64, i64* %964, align 8
  %966 = lshr i64 %946, 16
  %967 = and i64 %966, 255
  %968 = getelementptr inbounds [8 x [256 x i64]], [8 x [256 x i64]]* @SP, i64 0, i64 5, i64 %967
  %969 = load i64, i64* %968, align 8
  %970 = lshr i64 %946, 8
  %971 = and i64 %970, 255
  %972 = getelementptr inbounds [8 x [256 x i64]], [8 x [256 x i64]]* @SP, i64 0, i64 6, i64 %971
  %973 = load i64, i64* %972, align 8
  %974 = and i64 %946, 255
  %975 = getelementptr inbounds [8 x [256 x i64]], [8 x [256 x i64]]* @SP, i64 0, i64 7, i64 %974
  %976 = load i64, i64* %975, align 8
  %977 = xor i64 %949, %889
  %978 = xor i64 %977, %953
  %979 = xor i64 %978, %957
  %980 = xor i64 %979, %961
  %981 = xor i64 %980, %965
  %982 = xor i64 %981, %969
  %983 = xor i64 %982, %973
  %984 = xor i64 %983, %976
  %985 = load i64, i64* %39, align 8
  %986 = xor i64 %984, %985
  %987 = lshr i64 %986, 56
  %988 = getelementptr inbounds [8 x [256 x i64]], [8 x [256 x i64]]* @SP, i64 0, i64 0, i64 %987
  %989 = load i64, i64* %988, align 8
  %990 = lshr i64 %986, 48
  %991 = and i64 %990, 255
  %992 = getelementptr inbounds [8 x [256 x i64]], [8 x [256 x i64]]* @SP, i64 0, i64 1, i64 %991
  %993 = load i64, i64* %992, align 8
  %994 = lshr i64 %986, 40
  %995 = and i64 %994, 255
  %996 = getelementptr inbounds [8 x [256 x i64]], [8 x [256 x i64]]* @SP, i64 0, i64 2, i64 %995
  %997 = load i64, i64* %996, align 8
  %998 = lshr i64 %986, 32
  %999 = and i64 %998, 255
  %1000 = getelementptr inbounds [8 x [256 x i64]], [8 x [256 x i64]]* @SP, i64 0, i64 3, i64 %999
  %1001 = load i64, i64* %1000, align 8
  %1002 = lshr i64 %986, 24
  %1003 = and i64 %1002, 255
  %1004 = getelementptr inbounds [8 x [256 x i64]], [8 x [256 x i64]]* @SP, i64 0, i64 4, i64 %1003
  %1005 = load i64, i64* %1004, align 8
  %1006 = lshr i64 %986, 16
  %1007 = and i64 %1006, 255
  %1008 = getelementptr inbounds [8 x [256 x i64]], [8 x [256 x i64]]* @SP, i64 0, i64 5, i64 %1007
  %1009 = load i64, i64* %1008, align 8
  %1010 = lshr i64 %986, 8
  %1011 = and i64 %1010, 255
  %1012 = getelementptr inbounds [8 x [256 x i64]], [8 x [256 x i64]]* @SP, i64 0, i64 6, i64 %1011
  %1013 = load i64, i64* %1012, align 8
  %1014 = and i64 %986, 255
  %1015 = getelementptr inbounds [8 x [256 x i64]], [8 x [256 x i64]]* @SP, i64 0, i64 7, i64 %1014
  %1016 = load i64, i64* %1015, align 8
  %1017 = xor i64 %989, %944
  %1018 = xor i64 %1017, %993
  %1019 = xor i64 %1018, %997
  %1020 = xor i64 %1019, %1001
  %1021 = xor i64 %1020, %1005
  %1022 = xor i64 %1021, %1009
  %1023 = xor i64 %1022, %1013
  %1024 = xor i64 %1023, %1016
  %1025 = load i64, i64* %40, align 8
  %1026 = xor i64 %1024, %1025
  %1027 = lshr i64 %1026, 56
  %1028 = getelementptr inbounds [8 x [256 x i64]], [8 x [256 x i64]]* @SP, i64 0, i64 0, i64 %1027
  %1029 = load i64, i64* %1028, align 8
  %1030 = lshr i64 %1026, 48
  %1031 = and i64 %1030, 255
  %1032 = getelementptr inbounds [8 x [256 x i64]], [8 x [256 x i64]]* @SP, i64 0, i64 1, i64 %1031
  %1033 = load i64, i64* %1032, align 8
  %1034 = lshr i64 %1026, 40
  %1035 = and i64 %1034, 255
  %1036 = getelementptr inbounds [8 x [256 x i64]], [8 x [256 x i64]]* @SP, i64 0, i64 2, i64 %1035
  %1037 = load i64, i64* %1036, align 8
  %1038 = lshr i64 %1026, 32
  %1039 = and i64 %1038, 255
  %1040 = getelementptr inbounds [8 x [256 x i64]], [8 x [256 x i64]]* @SP, i64 0, i64 3, i64 %1039
  %1041 = load i64, i64* %1040, align 8
  %1042 = lshr i64 %1026, 24
  %1043 = and i64 %1042, 255
  %1044 = getelementptr inbounds [8 x [256 x i64]], [8 x [256 x i64]]* @SP, i64 0, i64 4, i64 %1043
  %1045 = load i64, i64* %1044, align 8
  %1046 = lshr i64 %1026, 16
  %1047 = and i64 %1046, 255
  %1048 = getelementptr inbounds [8 x [256 x i64]], [8 x [256 x i64]]* @SP, i64 0, i64 5, i64 %1047
  %1049 = load i64, i64* %1048, align 8
  %1050 = lshr i64 %1026, 8
  %1051 = and i64 %1050, 255
  %1052 = getelementptr inbounds [8 x [256 x i64]], [8 x [256 x i64]]* @SP, i64 0, i64 6, i64 %1051
  %1053 = load i64, i64* %1052, align 8
  %1054 = and i64 %1026, 255
  %1055 = getelementptr inbounds [8 x [256 x i64]], [8 x [256 x i64]]* @SP, i64 0, i64 7, i64 %1054
  %1056 = load i64, i64* %1055, align 8
  %1057 = xor i64 %1029, %984
  %1058 = xor i64 %1057, %1033
  %1059 = xor i64 %1058, %1037
  %1060 = xor i64 %1059, %1041
  %1061 = xor i64 %1060, %1045
  %1062 = xor i64 %1061, %1049
  %1063 = xor i64 %1062, %1053
  %1064 = xor i64 %1063, %1056
  %1065 = load i64, i64* %41, align 8
  %1066 = xor i64 %1064, %1065
  %1067 = lshr i64 %1066, 56
  %1068 = getelementptr inbounds [8 x [256 x i64]], [8 x [256 x i64]]* @SP, i64 0, i64 0, i64 %1067
  %1069 = load i64, i64* %1068, align 8
  %1070 = lshr i64 %1066, 48
  %1071 = and i64 %1070, 255
  %1072 = getelementptr inbounds [8 x [256 x i64]], [8 x [256 x i64]]* @SP, i64 0, i64 1, i64 %1071
  %1073 = load i64, i64* %1072, align 8
  %1074 = lshr i64 %1066, 40
  %1075 = and i64 %1074, 255
  %1076 = getelementptr inbounds [8 x [256 x i64]], [8 x [256 x i64]]* @SP, i64 0, i64 2, i64 %1075
  %1077 = load i64, i64* %1076, align 8
  %1078 = lshr i64 %1066, 32
  %1079 = and i64 %1078, 255
  %1080 = getelementptr inbounds [8 x [256 x i64]], [8 x [256 x i64]]* @SP, i64 0, i64 3, i64 %1079
  %1081 = load i64, i64* %1080, align 8
  %1082 = lshr i64 %1066, 24
  %1083 = and i64 %1082, 255
  %1084 = getelementptr inbounds [8 x [256 x i64]], [8 x [256 x i64]]* @SP, i64 0, i64 4, i64 %1083
  %1085 = load i64, i64* %1084, align 8
  %1086 = lshr i64 %1066, 16
  %1087 = and i64 %1086, 255
  %1088 = getelementptr inbounds [8 x [256 x i64]], [8 x [256 x i64]]* @SP, i64 0, i64 5, i64 %1087
  %1089 = load i64, i64* %1088, align 8
  %1090 = lshr i64 %1066, 8
  %1091 = and i64 %1090, 255
  %1092 = getelementptr inbounds [8 x [256 x i64]], [8 x [256 x i64]]* @SP, i64 0, i64 6, i64 %1091
  %1093 = load i64, i64* %1092, align 8
  %1094 = and i64 %1066, 255
  %1095 = getelementptr inbounds [8 x [256 x i64]], [8 x [256 x i64]]* @SP, i64 0, i64 7, i64 %1094
  %1096 = load i64, i64* %1095, align 8
  %1097 = xor i64 %1069, %1024
  %1098 = xor i64 %1097, %1073
  %1099 = xor i64 %1098, %1077
  %1100 = xor i64 %1099, %1081
  %1101 = xor i64 %1100, %1085
  %1102 = xor i64 %1101, %1089
  %1103 = xor i64 %1102, %1093
  %1104 = xor i64 %1103, %1096
  %1105 = load i64, i64* %42, align 8
  %1106 = xor i64 %1104, %1105
  %1107 = lshr i64 %1106, 56
  %1108 = getelementptr inbounds [8 x [256 x i64]], [8 x [256 x i64]]* @SP, i64 0, i64 0, i64 %1107
  %1109 = load i64, i64* %1108, align 8
  %1110 = lshr i64 %1106, 48
  %1111 = and i64 %1110, 255
  %1112 = getelementptr inbounds [8 x [256 x i64]], [8 x [256 x i64]]* @SP, i64 0, i64 1, i64 %1111
  %1113 = load i64, i64* %1112, align 8
  %1114 = lshr i64 %1106, 40
  %1115 = and i64 %1114, 255
  %1116 = getelementptr inbounds [8 x [256 x i64]], [8 x [256 x i64]]* @SP, i64 0, i64 2, i64 %1115
  %1117 = load i64, i64* %1116, align 8
  %1118 = lshr i64 %1106, 32
  %1119 = and i64 %1118, 255
  %1120 = getelementptr inbounds [8 x [256 x i64]], [8 x [256 x i64]]* @SP, i64 0, i64 3, i64 %1119
  %1121 = load i64, i64* %1120, align 8
  %1122 = lshr i64 %1106, 24
  %1123 = and i64 %1122, 255
  %1124 = getelementptr inbounds [8 x [256 x i64]], [8 x [256 x i64]]* @SP, i64 0, i64 4, i64 %1123
  %1125 = load i64, i64* %1124, align 8
  %1126 = lshr i64 %1106, 16
  %1127 = and i64 %1126, 255
  %1128 = getelementptr inbounds [8 x [256 x i64]], [8 x [256 x i64]]* @SP, i64 0, i64 5, i64 %1127
  %1129 = load i64, i64* %1128, align 8
  %1130 = lshr i64 %1106, 8
  %1131 = and i64 %1130, 255
  %1132 = getelementptr inbounds [8 x [256 x i64]], [8 x [256 x i64]]* @SP, i64 0, i64 6, i64 %1131
  %1133 = load i64, i64* %1132, align 8
  %1134 = and i64 %1106, 255
  %1135 = getelementptr inbounds [8 x [256 x i64]], [8 x [256 x i64]]* @SP, i64 0, i64 7, i64 %1134
  %1136 = load i64, i64* %1135, align 8
  %1137 = load i64, i64* %43, align 8
  %1138 = xor i64 %1137, %1104
  %1139 = load i64, i64* %44, align 8
  %1140 = xor i64 %1109, %1064
  %1141 = xor i64 %1140, %1113
  %1142 = xor i64 %1141, %1117
  %1143 = xor i64 %1142, %1121
  %1144 = xor i64 %1143, %1125
  %1145 = xor i64 %1144, %1129
  %1146 = xor i64 %1145, %1133
  %1147 = xor i64 %1146, %1136
  %1148 = xor i64 %1147, %1139
  br i1 %45, label %1156, label %1149

1149:                                             ; preds = %356
  %1150 = load i64, i64* %46, align 1
  %1151 = tail call i64 asm "bswap  $0", "=r,0,~{dirflag},~{fpsr},~{flags}"(i64 %1150) #6, !srcloc !2
  %1152 = xor i64 %1151, %1138
  %1153 = load i64, i64* %48, align 1
  %1154 = tail call i64 asm "bswap  $0", "=r,0,~{dirflag},~{fpsr},~{flags}"(i64 %1153) #6, !srcloc !2
  %1155 = xor i64 %1154, %1148
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 1 %4, i8* align 1 %66, i64 16, i1 false) #5
  br label %1156

1156:                                             ; preds = %356, %1149
  %1157 = phi i64 [ %1155, %1149 ], [ %1148, %356 ]
  %1158 = phi i64 [ %1152, %1149 ], [ %1138, %356 ]
  %1159 = tail call i64 asm "bswap  $0", "=r,0,~{dirflag},~{fpsr},~{flags}"(i64 %1158) #6, !srcloc !2
  %1160 = bitcast i8* %65 to i64*
  store i64 %1159, i64* %1160, align 1
  %1161 = tail call i64 asm "bswap  $0", "=r,0,~{dirflag},~{fpsr},~{flags}"(i64 %1157) #6, !srcloc !2
  %1162 = getelementptr inbounds i8, i8* %65, i64 8
  %1163 = bitcast i8* %1162 to i64*
  store i64 %1161, i64* %1163, align 1
  br label %1245

1164:                                             ; preds = %63
  br i1 %45, label %1244, label %1165

1165:                                             ; preds = %1164
  %1166 = load i8, i8* %66, align 1
  %1167 = load i8, i8* %4, align 1
  %1168 = xor i8 %1167, %1166
  store i8 %1168, i8* %65, align 1
  %1169 = getelementptr inbounds i8, i8* %66, i64 1
  %1170 = load i8, i8* %1169, align 1
  %1171 = load i8, i8* %49, align 1
  %1172 = xor i8 %1171, %1170
  %1173 = getelementptr inbounds i8, i8* %65, i64 1
  store i8 %1172, i8* %1173, align 1
  %1174 = getelementptr inbounds i8, i8* %66, i64 2
  %1175 = load i8, i8* %1174, align 1
  %1176 = load i8, i8* %50, align 1
  %1177 = xor i8 %1176, %1175
  %1178 = getelementptr inbounds i8, i8* %65, i64 2
  store i8 %1177, i8* %1178, align 1
  %1179 = getelementptr inbounds i8, i8* %66, i64 3
  %1180 = load i8, i8* %1179, align 1
  %1181 = load i8, i8* %51, align 1
  %1182 = xor i8 %1181, %1180
  %1183 = getelementptr inbounds i8, i8* %65, i64 3
  store i8 %1182, i8* %1183, align 1
  %1184 = getelementptr inbounds i8, i8* %66, i64 4
  %1185 = load i8, i8* %1184, align 1
  %1186 = load i8, i8* %52, align 1
  %1187 = xor i8 %1186, %1185
  %1188 = getelementptr inbounds i8, i8* %65, i64 4
  store i8 %1187, i8* %1188, align 1
  %1189 = getelementptr inbounds i8, i8* %66, i64 5
  %1190 = load i8, i8* %1189, align 1
  %1191 = load i8, i8* %53, align 1
  %1192 = xor i8 %1191, %1190
  %1193 = getelementptr inbounds i8, i8* %65, i64 5
  store i8 %1192, i8* %1193, align 1
  %1194 = getelementptr inbounds i8, i8* %66, i64 6
  %1195 = load i8, i8* %1194, align 1
  %1196 = load i8, i8* %54, align 1
  %1197 = xor i8 %1196, %1195
  %1198 = getelementptr inbounds i8, i8* %65, i64 6
  store i8 %1197, i8* %1198, align 1
  %1199 = getelementptr inbounds i8, i8* %66, i64 7
  %1200 = load i8, i8* %1199, align 1
  %1201 = load i8, i8* %55, align 1
  %1202 = xor i8 %1201, %1200
  %1203 = getelementptr inbounds i8, i8* %65, i64 7
  store i8 %1202, i8* %1203, align 1
  %1204 = getelementptr inbounds i8, i8* %66, i64 8
  %1205 = load i8, i8* %1204, align 1
  %1206 = load i8, i8* %47, align 1
  %1207 = xor i8 %1206, %1205
  %1208 = getelementptr inbounds i8, i8* %65, i64 8
  store i8 %1207, i8* %1208, align 1
  %1209 = getelementptr inbounds i8, i8* %66, i64 9
  %1210 = load i8, i8* %1209, align 1
  %1211 = load i8, i8* %56, align 1
  %1212 = xor i8 %1211, %1210
  %1213 = getelementptr inbounds i8, i8* %65, i64 9
  store i8 %1212, i8* %1213, align 1
  %1214 = getelementptr inbounds i8, i8* %66, i64 10
  %1215 = load i8, i8* %1214, align 1
  %1216 = load i8, i8* %57, align 1
  %1217 = xor i8 %1216, %1215
  %1218 = getelementptr inbounds i8, i8* %65, i64 10
  store i8 %1217, i8* %1218, align 1
  %1219 = getelementptr inbounds i8, i8* %66, i64 11
  %1220 = load i8, i8* %1219, align 1
  %1221 = load i8, i8* %58, align 1
  %1222 = xor i8 %1221, %1220
  %1223 = getelementptr inbounds i8, i8* %65, i64 11
  store i8 %1222, i8* %1223, align 1
  %1224 = getelementptr inbounds i8, i8* %66, i64 12
  %1225 = load i8, i8* %1224, align 1
  %1226 = load i8, i8* %59, align 1
  %1227 = xor i8 %1226, %1225
  %1228 = getelementptr inbounds i8, i8* %65, i64 12
  store i8 %1227, i8* %1228, align 1
  %1229 = getelementptr inbounds i8, i8* %66, i64 13
  %1230 = load i8, i8* %1229, align 1
  %1231 = load i8, i8* %60, align 1
  %1232 = xor i8 %1231, %1230
  %1233 = getelementptr inbounds i8, i8* %65, i64 13
  store i8 %1232, i8* %1233, align 1
  %1234 = getelementptr inbounds i8, i8* %66, i64 14
  %1235 = load i8, i8* %1234, align 1
  %1236 = load i8, i8* %61, align 1
  %1237 = xor i8 %1236, %1235
  %1238 = getelementptr inbounds i8, i8* %65, i64 14
  store i8 %1237, i8* %1238, align 1
  %1239 = getelementptr inbounds i8, i8* %66, i64 15
  %1240 = load i8, i8* %1239, align 1
  %1241 = load i8, i8* %62, align 1
  %1242 = xor i8 %1241, %1240
  %1243 = getelementptr inbounds i8, i8* %65, i64 15
  store i8 %1242, i8* %1243, align 1
  tail call fastcc void @camellia_encrypt(%struct.AVCAMELLIA* %0, i8* %65, i8* %65)
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 1 %4, i8* align 1 %65, i64 16, i1 false)
  br label %1245

1244:                                             ; preds = %1164
  tail call fastcc void @camellia_encrypt(%struct.AVCAMELLIA* %0, i8* %65, i8* %66)
  br label %1245

1245:                                             ; preds = %1165, %1244, %1156
  %1246 = getelementptr inbounds i8, i8* %66, i64 16
  %1247 = getelementptr inbounds i8, i8* %65, i64 16
  %1248 = icmp eq i32 %67, 0
  br i1 %1248, label %1249, label %63

1249:                                             ; preds = %1245, %6
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal fastcc void @camellia_encrypt(%struct.AVCAMELLIA* readonly, i8* nocapture, i8* nocapture readonly) unnamed_addr #0 {
  %4 = bitcast i8* %2 to i64*
  %5 = load i64, i64* %4, align 1
  %6 = tail call i64 asm "bswap  $0", "=r,0,~{dirflag},~{fpsr},~{flags}"(i64 %5) #6, !srcloc !2
  %7 = getelementptr inbounds i8, i8* %2, i64 8
  %8 = bitcast i8* %7 to i64*
  %9 = load i64, i64* %8, align 1
  %10 = tail call i64 asm "bswap  $0", "=r,0,~{dirflag},~{fpsr},~{flags}"(i64 %9) #6, !srcloc !2
  %11 = getelementptr inbounds %struct.AVCAMELLIA, %struct.AVCAMELLIA* %0, i64 0, i32 0, i64 0
  %12 = load i64, i64* %11, align 8
  %13 = xor i64 %12, %6
  %14 = getelementptr inbounds %struct.AVCAMELLIA, %struct.AVCAMELLIA* %0, i64 0, i32 0, i64 1
  %15 = load i64, i64* %14, align 8
  %16 = getelementptr inbounds %struct.AVCAMELLIA, %struct.AVCAMELLIA* %0, i64 0, i32 2, i64 0
  %17 = load i64, i64* %16, align 8
  %18 = xor i64 %17, %13
  %19 = lshr i64 %18, 56
  %20 = getelementptr inbounds [8 x [256 x i64]], [8 x [256 x i64]]* @SP, i64 0, i64 0, i64 %19
  %21 = load i64, i64* %20, align 8
  %22 = lshr i64 %18, 48
  %23 = and i64 %22, 255
  %24 = getelementptr inbounds [8 x [256 x i64]], [8 x [256 x i64]]* @SP, i64 0, i64 1, i64 %23
  %25 = load i64, i64* %24, align 8
  %26 = lshr i64 %18, 40
  %27 = and i64 %26, 255
  %28 = getelementptr inbounds [8 x [256 x i64]], [8 x [256 x i64]]* @SP, i64 0, i64 2, i64 %27
  %29 = load i64, i64* %28, align 8
  %30 = lshr i64 %18, 32
  %31 = and i64 %30, 255
  %32 = getelementptr inbounds [8 x [256 x i64]], [8 x [256 x i64]]* @SP, i64 0, i64 3, i64 %31
  %33 = load i64, i64* %32, align 8
  %34 = lshr i64 %18, 24
  %35 = and i64 %34, 255
  %36 = getelementptr inbounds [8 x [256 x i64]], [8 x [256 x i64]]* @SP, i64 0, i64 4, i64 %35
  %37 = load i64, i64* %36, align 8
  %38 = lshr i64 %18, 16
  %39 = and i64 %38, 255
  %40 = getelementptr inbounds [8 x [256 x i64]], [8 x [256 x i64]]* @SP, i64 0, i64 5, i64 %39
  %41 = load i64, i64* %40, align 8
  %42 = lshr i64 %18, 8
  %43 = and i64 %42, 255
  %44 = getelementptr inbounds [8 x [256 x i64]], [8 x [256 x i64]]* @SP, i64 0, i64 6, i64 %43
  %45 = load i64, i64* %44, align 8
  %46 = and i64 %18, 255
  %47 = getelementptr inbounds [8 x [256 x i64]], [8 x [256 x i64]]* @SP, i64 0, i64 7, i64 %46
  %48 = load i64, i64* %47, align 8
  %49 = xor i64 %15, %10
  %50 = xor i64 %49, %21
  %51 = xor i64 %50, %25
  %52 = xor i64 %51, %29
  %53 = xor i64 %52, %33
  %54 = xor i64 %53, %37
  %55 = xor i64 %54, %41
  %56 = xor i64 %55, %45
  %57 = xor i64 %56, %48
  %58 = getelementptr inbounds %struct.AVCAMELLIA, %struct.AVCAMELLIA* %0, i64 0, i32 2, i64 1
  %59 = load i64, i64* %58, align 8
  %60 = xor i64 %59, %57
  %61 = lshr i64 %60, 56
  %62 = getelementptr inbounds [8 x [256 x i64]], [8 x [256 x i64]]* @SP, i64 0, i64 0, i64 %61
  %63 = load i64, i64* %62, align 8
  %64 = lshr i64 %60, 48
  %65 = and i64 %64, 255
  %66 = getelementptr inbounds [8 x [256 x i64]], [8 x [256 x i64]]* @SP, i64 0, i64 1, i64 %65
  %67 = load i64, i64* %66, align 8
  %68 = lshr i64 %60, 40
  %69 = and i64 %68, 255
  %70 = getelementptr inbounds [8 x [256 x i64]], [8 x [256 x i64]]* @SP, i64 0, i64 2, i64 %69
  %71 = load i64, i64* %70, align 8
  %72 = lshr i64 %60, 32
  %73 = and i64 %72, 255
  %74 = getelementptr inbounds [8 x [256 x i64]], [8 x [256 x i64]]* @SP, i64 0, i64 3, i64 %73
  %75 = load i64, i64* %74, align 8
  %76 = lshr i64 %60, 24
  %77 = and i64 %76, 255
  %78 = getelementptr inbounds [8 x [256 x i64]], [8 x [256 x i64]]* @SP, i64 0, i64 4, i64 %77
  %79 = load i64, i64* %78, align 8
  %80 = lshr i64 %60, 16
  %81 = and i64 %80, 255
  %82 = getelementptr inbounds [8 x [256 x i64]], [8 x [256 x i64]]* @SP, i64 0, i64 5, i64 %81
  %83 = load i64, i64* %82, align 8
  %84 = lshr i64 %60, 8
  %85 = and i64 %84, 255
  %86 = getelementptr inbounds [8 x [256 x i64]], [8 x [256 x i64]]* @SP, i64 0, i64 6, i64 %85
  %87 = load i64, i64* %86, align 8
  %88 = and i64 %60, 255
  %89 = getelementptr inbounds [8 x [256 x i64]], [8 x [256 x i64]]* @SP, i64 0, i64 7, i64 %88
  %90 = load i64, i64* %89, align 8
  %91 = xor i64 %63, %13
  %92 = xor i64 %91, %67
  %93 = xor i64 %92, %71
  %94 = xor i64 %93, %75
  %95 = xor i64 %94, %79
  %96 = xor i64 %95, %83
  %97 = xor i64 %96, %87
  %98 = xor i64 %97, %90
  %99 = getelementptr inbounds %struct.AVCAMELLIA, %struct.AVCAMELLIA* %0, i64 0, i32 2, i64 2
  %100 = load i64, i64* %99, align 8
  %101 = xor i64 %98, %100
  %102 = lshr i64 %101, 56
  %103 = getelementptr inbounds [8 x [256 x i64]], [8 x [256 x i64]]* @SP, i64 0, i64 0, i64 %102
  %104 = load i64, i64* %103, align 8
  %105 = lshr i64 %101, 48
  %106 = and i64 %105, 255
  %107 = getelementptr inbounds [8 x [256 x i64]], [8 x [256 x i64]]* @SP, i64 0, i64 1, i64 %106
  %108 = load i64, i64* %107, align 8
  %109 = lshr i64 %101, 40
  %110 = and i64 %109, 255
  %111 = getelementptr inbounds [8 x [256 x i64]], [8 x [256 x i64]]* @SP, i64 0, i64 2, i64 %110
  %112 = load i64, i64* %111, align 8
  %113 = lshr i64 %101, 32
  %114 = and i64 %113, 255
  %115 = getelementptr inbounds [8 x [256 x i64]], [8 x [256 x i64]]* @SP, i64 0, i64 3, i64 %114
  %116 = load i64, i64* %115, align 8
  %117 = lshr i64 %101, 24
  %118 = and i64 %117, 255
  %119 = getelementptr inbounds [8 x [256 x i64]], [8 x [256 x i64]]* @SP, i64 0, i64 4, i64 %118
  %120 = load i64, i64* %119, align 8
  %121 = lshr i64 %101, 16
  %122 = and i64 %121, 255
  %123 = getelementptr inbounds [8 x [256 x i64]], [8 x [256 x i64]]* @SP, i64 0, i64 5, i64 %122
  %124 = load i64, i64* %123, align 8
  %125 = lshr i64 %101, 8
  %126 = and i64 %125, 255
  %127 = getelementptr inbounds [8 x [256 x i64]], [8 x [256 x i64]]* @SP, i64 0, i64 6, i64 %126
  %128 = load i64, i64* %127, align 8
  %129 = and i64 %101, 255
  %130 = getelementptr inbounds [8 x [256 x i64]], [8 x [256 x i64]]* @SP, i64 0, i64 7, i64 %129
  %131 = load i64, i64* %130, align 8
  %132 = xor i64 %104, %57
  %133 = xor i64 %132, %108
  %134 = xor i64 %133, %112
  %135 = xor i64 %134, %116
  %136 = xor i64 %135, %120
  %137 = xor i64 %136, %124
  %138 = xor i64 %137, %128
  %139 = xor i64 %138, %131
  %140 = getelementptr inbounds %struct.AVCAMELLIA, %struct.AVCAMELLIA* %0, i64 0, i32 2, i64 3
  %141 = load i64, i64* %140, align 8
  %142 = xor i64 %139, %141
  %143 = lshr i64 %142, 56
  %144 = getelementptr inbounds [8 x [256 x i64]], [8 x [256 x i64]]* @SP, i64 0, i64 0, i64 %143
  %145 = load i64, i64* %144, align 8
  %146 = lshr i64 %142, 48
  %147 = and i64 %146, 255
  %148 = getelementptr inbounds [8 x [256 x i64]], [8 x [256 x i64]]* @SP, i64 0, i64 1, i64 %147
  %149 = load i64, i64* %148, align 8
  %150 = lshr i64 %142, 40
  %151 = and i64 %150, 255
  %152 = getelementptr inbounds [8 x [256 x i64]], [8 x [256 x i64]]* @SP, i64 0, i64 2, i64 %151
  %153 = load i64, i64* %152, align 8
  %154 = lshr i64 %142, 32
  %155 = and i64 %154, 255
  %156 = getelementptr inbounds [8 x [256 x i64]], [8 x [256 x i64]]* @SP, i64 0, i64 3, i64 %155
  %157 = load i64, i64* %156, align 8
  %158 = lshr i64 %142, 24
  %159 = and i64 %158, 255
  %160 = getelementptr inbounds [8 x [256 x i64]], [8 x [256 x i64]]* @SP, i64 0, i64 4, i64 %159
  %161 = load i64, i64* %160, align 8
  %162 = lshr i64 %142, 16
  %163 = and i64 %162, 255
  %164 = getelementptr inbounds [8 x [256 x i64]], [8 x [256 x i64]]* @SP, i64 0, i64 5, i64 %163
  %165 = load i64, i64* %164, align 8
  %166 = lshr i64 %142, 8
  %167 = and i64 %166, 255
  %168 = getelementptr inbounds [8 x [256 x i64]], [8 x [256 x i64]]* @SP, i64 0, i64 6, i64 %167
  %169 = load i64, i64* %168, align 8
  %170 = and i64 %142, 255
  %171 = getelementptr inbounds [8 x [256 x i64]], [8 x [256 x i64]]* @SP, i64 0, i64 7, i64 %170
  %172 = load i64, i64* %171, align 8
  %173 = xor i64 %145, %98
  %174 = xor i64 %173, %149
  %175 = xor i64 %174, %153
  %176 = xor i64 %175, %157
  %177 = xor i64 %176, %161
  %178 = xor i64 %177, %165
  %179 = xor i64 %178, %169
  %180 = xor i64 %179, %172
  %181 = getelementptr inbounds %struct.AVCAMELLIA, %struct.AVCAMELLIA* %0, i64 0, i32 2, i64 4
  %182 = load i64, i64* %181, align 8
  %183 = xor i64 %180, %182
  %184 = lshr i64 %183, 56
  %185 = getelementptr inbounds [8 x [256 x i64]], [8 x [256 x i64]]* @SP, i64 0, i64 0, i64 %184
  %186 = load i64, i64* %185, align 8
  %187 = lshr i64 %183, 48
  %188 = and i64 %187, 255
  %189 = getelementptr inbounds [8 x [256 x i64]], [8 x [256 x i64]]* @SP, i64 0, i64 1, i64 %188
  %190 = load i64, i64* %189, align 8
  %191 = lshr i64 %183, 40
  %192 = and i64 %191, 255
  %193 = getelementptr inbounds [8 x [256 x i64]], [8 x [256 x i64]]* @SP, i64 0, i64 2, i64 %192
  %194 = load i64, i64* %193, align 8
  %195 = lshr i64 %183, 32
  %196 = and i64 %195, 255
  %197 = getelementptr inbounds [8 x [256 x i64]], [8 x [256 x i64]]* @SP, i64 0, i64 3, i64 %196
  %198 = load i64, i64* %197, align 8
  %199 = lshr i64 %183, 24
  %200 = and i64 %199, 255
  %201 = getelementptr inbounds [8 x [256 x i64]], [8 x [256 x i64]]* @SP, i64 0, i64 4, i64 %200
  %202 = load i64, i64* %201, align 8
  %203 = lshr i64 %183, 16
  %204 = and i64 %203, 255
  %205 = getelementptr inbounds [8 x [256 x i64]], [8 x [256 x i64]]* @SP, i64 0, i64 5, i64 %204
  %206 = load i64, i64* %205, align 8
  %207 = lshr i64 %183, 8
  %208 = and i64 %207, 255
  %209 = getelementptr inbounds [8 x [256 x i64]], [8 x [256 x i64]]* @SP, i64 0, i64 6, i64 %208
  %210 = load i64, i64* %209, align 8
  %211 = and i64 %183, 255
  %212 = getelementptr inbounds [8 x [256 x i64]], [8 x [256 x i64]]* @SP, i64 0, i64 7, i64 %211
  %213 = load i64, i64* %212, align 8
  %214 = xor i64 %186, %139
  %215 = xor i64 %214, %190
  %216 = xor i64 %215, %194
  %217 = xor i64 %216, %198
  %218 = xor i64 %217, %202
  %219 = xor i64 %218, %206
  %220 = xor i64 %219, %210
  %221 = xor i64 %220, %213
  %222 = getelementptr inbounds %struct.AVCAMELLIA, %struct.AVCAMELLIA* %0, i64 0, i32 2, i64 5
  %223 = load i64, i64* %222, align 8
  %224 = xor i64 %221, %223
  %225 = lshr i64 %224, 56
  %226 = getelementptr inbounds [8 x [256 x i64]], [8 x [256 x i64]]* @SP, i64 0, i64 0, i64 %225
  %227 = load i64, i64* %226, align 8
  %228 = lshr i64 %224, 48
  %229 = and i64 %228, 255
  %230 = getelementptr inbounds [8 x [256 x i64]], [8 x [256 x i64]]* @SP, i64 0, i64 1, i64 %229
  %231 = load i64, i64* %230, align 8
  %232 = lshr i64 %224, 40
  %233 = and i64 %232, 255
  %234 = getelementptr inbounds [8 x [256 x i64]], [8 x [256 x i64]]* @SP, i64 0, i64 2, i64 %233
  %235 = load i64, i64* %234, align 8
  %236 = lshr i64 %224, 32
  %237 = and i64 %236, 255
  %238 = getelementptr inbounds [8 x [256 x i64]], [8 x [256 x i64]]* @SP, i64 0, i64 3, i64 %237
  %239 = load i64, i64* %238, align 8
  %240 = lshr i64 %224, 24
  %241 = and i64 %240, 255
  %242 = getelementptr inbounds [8 x [256 x i64]], [8 x [256 x i64]]* @SP, i64 0, i64 4, i64 %241
  %243 = load i64, i64* %242, align 8
  %244 = lshr i64 %224, 16
  %245 = and i64 %244, 255
  %246 = getelementptr inbounds [8 x [256 x i64]], [8 x [256 x i64]]* @SP, i64 0, i64 5, i64 %245
  %247 = load i64, i64* %246, align 8
  %248 = lshr i64 %224, 8
  %249 = and i64 %248, 255
  %250 = getelementptr inbounds [8 x [256 x i64]], [8 x [256 x i64]]* @SP, i64 0, i64 6, i64 %249
  %251 = load i64, i64* %250, align 8
  %252 = and i64 %224, 255
  %253 = getelementptr inbounds [8 x [256 x i64]], [8 x [256 x i64]]* @SP, i64 0, i64 7, i64 %252
  %254 = load i64, i64* %253, align 8
  %255 = xor i64 %227, %180
  %256 = xor i64 %255, %231
  %257 = xor i64 %256, %235
  %258 = xor i64 %257, %239
  %259 = xor i64 %258, %243
  %260 = xor i64 %259, %247
  %261 = xor i64 %260, %251
  %262 = xor i64 %261, %254
  %263 = getelementptr inbounds %struct.AVCAMELLIA, %struct.AVCAMELLIA* %0, i64 0, i32 1, i64 0
  %264 = load i64, i64* %263, align 8
  %265 = lshr i64 %262, 32
  %266 = trunc i64 %265 to i32
  %267 = trunc i64 %262 to i32
  %268 = lshr i64 %264, 32
  %269 = trunc i64 %264 to i32
  %270 = and i64 %265, %268
  %271 = trunc i64 %270 to i32
  %272 = shl i32 %271, 1
  %273 = lshr i32 %271, 31
  %274 = or i32 %272, %273
  %275 = xor i32 %274, %267
  %276 = or i32 %275, %269
  %277 = xor i32 %276, %266
  %278 = zext i32 %277 to i64
  %279 = shl nuw i64 %278, 32
  %280 = zext i32 %275 to i64
  %281 = or i64 %279, %280
  %282 = getelementptr inbounds %struct.AVCAMELLIA, %struct.AVCAMELLIA* %0, i64 0, i32 1, i64 1
  %283 = load i64, i64* %282, align 8
  %284 = lshr i64 %221, 32
  %285 = trunc i64 %221 to i32
  %286 = lshr i64 %283, 32
  %287 = or i64 %283, %221
  %288 = xor i64 %287, %284
  %289 = and i64 %288, %286
  %290 = trunc i64 %289 to i32
  %291 = shl i32 %290, 1
  %292 = lshr i32 %290, 31
  %293 = or i32 %291, %292
  %294 = xor i32 %293, %285
  %295 = shl i64 %288, 32
  %296 = zext i32 %294 to i64
  %297 = or i64 %295, %296
  %298 = getelementptr inbounds %struct.AVCAMELLIA, %struct.AVCAMELLIA* %0, i64 0, i32 2, i64 6
  %299 = load i64, i64* %298, align 8
  %300 = xor i64 %281, %299
  %301 = lshr i64 %300, 56
  %302 = getelementptr inbounds [8 x [256 x i64]], [8 x [256 x i64]]* @SP, i64 0, i64 0, i64 %301
  %303 = load i64, i64* %302, align 8
  %304 = lshr i64 %300, 48
  %305 = and i64 %304, 255
  %306 = getelementptr inbounds [8 x [256 x i64]], [8 x [256 x i64]]* @SP, i64 0, i64 1, i64 %305
  %307 = load i64, i64* %306, align 8
  %308 = xor i64 %307, %303
  %309 = lshr i64 %300, 40
  %310 = and i64 %309, 255
  %311 = getelementptr inbounds [8 x [256 x i64]], [8 x [256 x i64]]* @SP, i64 0, i64 2, i64 %310
  %312 = load i64, i64* %311, align 8
  %313 = xor i64 %308, %312
  %314 = lshr i64 %300, 32
  %315 = and i64 %314, 255
  %316 = getelementptr inbounds [8 x [256 x i64]], [8 x [256 x i64]]* @SP, i64 0, i64 3, i64 %315
  %317 = load i64, i64* %316, align 8
  %318 = xor i64 %313, %317
  %319 = lshr i64 %300, 24
  %320 = and i64 %319, 255
  %321 = getelementptr inbounds [8 x [256 x i64]], [8 x [256 x i64]]* @SP, i64 0, i64 4, i64 %320
  %322 = load i64, i64* %321, align 8
  %323 = xor i64 %318, %322
  %324 = lshr i64 %300, 16
  %325 = and i64 %324, 255
  %326 = getelementptr inbounds [8 x [256 x i64]], [8 x [256 x i64]]* @SP, i64 0, i64 5, i64 %325
  %327 = load i64, i64* %326, align 8
  %328 = xor i64 %323, %327
  %329 = lshr i64 %300, 8
  %330 = and i64 %329, 255
  %331 = getelementptr inbounds [8 x [256 x i64]], [8 x [256 x i64]]* @SP, i64 0, i64 6, i64 %330
  %332 = load i64, i64* %331, align 8
  %333 = xor i64 %328, %332
  %334 = and i64 %300, 255
  %335 = getelementptr inbounds [8 x [256 x i64]], [8 x [256 x i64]]* @SP, i64 0, i64 7, i64 %334
  %336 = load i64, i64* %335, align 8
  %337 = xor i64 %333, %336
  %338 = xor i64 %337, %297
  %339 = getelementptr inbounds %struct.AVCAMELLIA, %struct.AVCAMELLIA* %0, i64 0, i32 2, i64 7
  %340 = load i64, i64* %339, align 8
  %341 = xor i64 %338, %340
  %342 = lshr i64 %341, 56
  %343 = getelementptr inbounds [8 x [256 x i64]], [8 x [256 x i64]]* @SP, i64 0, i64 0, i64 %342
  %344 = load i64, i64* %343, align 8
  %345 = lshr i64 %341, 48
  %346 = and i64 %345, 255
  %347 = getelementptr inbounds [8 x [256 x i64]], [8 x [256 x i64]]* @SP, i64 0, i64 1, i64 %346
  %348 = load i64, i64* %347, align 8
  %349 = lshr i64 %341, 40
  %350 = and i64 %349, 255
  %351 = getelementptr inbounds [8 x [256 x i64]], [8 x [256 x i64]]* @SP, i64 0, i64 2, i64 %350
  %352 = load i64, i64* %351, align 8
  %353 = lshr i64 %341, 32
  %354 = and i64 %353, 255
  %355 = getelementptr inbounds [8 x [256 x i64]], [8 x [256 x i64]]* @SP, i64 0, i64 3, i64 %354
  %356 = load i64, i64* %355, align 8
  %357 = lshr i64 %341, 24
  %358 = and i64 %357, 255
  %359 = getelementptr inbounds [8 x [256 x i64]], [8 x [256 x i64]]* @SP, i64 0, i64 4, i64 %358
  %360 = load i64, i64* %359, align 8
  %361 = lshr i64 %341, 16
  %362 = and i64 %361, 255
  %363 = getelementptr inbounds [8 x [256 x i64]], [8 x [256 x i64]]* @SP, i64 0, i64 5, i64 %362
  %364 = load i64, i64* %363, align 8
  %365 = lshr i64 %341, 8
  %366 = and i64 %365, 255
  %367 = getelementptr inbounds [8 x [256 x i64]], [8 x [256 x i64]]* @SP, i64 0, i64 6, i64 %366
  %368 = load i64, i64* %367, align 8
  %369 = and i64 %341, 255
  %370 = getelementptr inbounds [8 x [256 x i64]], [8 x [256 x i64]]* @SP, i64 0, i64 7, i64 %369
  %371 = load i64, i64* %370, align 8
  %372 = xor i64 %281, %344
  %373 = xor i64 %372, %348
  %374 = xor i64 %373, %352
  %375 = xor i64 %374, %356
  %376 = xor i64 %375, %360
  %377 = xor i64 %376, %364
  %378 = xor i64 %377, %368
  %379 = xor i64 %378, %371
  %380 = getelementptr inbounds %struct.AVCAMELLIA, %struct.AVCAMELLIA* %0, i64 0, i32 2, i64 8
  %381 = load i64, i64* %380, align 8
  %382 = xor i64 %379, %381
  %383 = lshr i64 %382, 56
  %384 = getelementptr inbounds [8 x [256 x i64]], [8 x [256 x i64]]* @SP, i64 0, i64 0, i64 %383
  %385 = load i64, i64* %384, align 8
  %386 = lshr i64 %382, 48
  %387 = and i64 %386, 255
  %388 = getelementptr inbounds [8 x [256 x i64]], [8 x [256 x i64]]* @SP, i64 0, i64 1, i64 %387
  %389 = load i64, i64* %388, align 8
  %390 = lshr i64 %382, 40
  %391 = and i64 %390, 255
  %392 = getelementptr inbounds [8 x [256 x i64]], [8 x [256 x i64]]* @SP, i64 0, i64 2, i64 %391
  %393 = load i64, i64* %392, align 8
  %394 = lshr i64 %382, 32
  %395 = and i64 %394, 255
  %396 = getelementptr inbounds [8 x [256 x i64]], [8 x [256 x i64]]* @SP, i64 0, i64 3, i64 %395
  %397 = load i64, i64* %396, align 8
  %398 = lshr i64 %382, 24
  %399 = and i64 %398, 255
  %400 = getelementptr inbounds [8 x [256 x i64]], [8 x [256 x i64]]* @SP, i64 0, i64 4, i64 %399
  %401 = load i64, i64* %400, align 8
  %402 = lshr i64 %382, 16
  %403 = and i64 %402, 255
  %404 = getelementptr inbounds [8 x [256 x i64]], [8 x [256 x i64]]* @SP, i64 0, i64 5, i64 %403
  %405 = load i64, i64* %404, align 8
  %406 = lshr i64 %382, 8
  %407 = and i64 %406, 255
  %408 = getelementptr inbounds [8 x [256 x i64]], [8 x [256 x i64]]* @SP, i64 0, i64 6, i64 %407
  %409 = load i64, i64* %408, align 8
  %410 = and i64 %382, 255
  %411 = getelementptr inbounds [8 x [256 x i64]], [8 x [256 x i64]]* @SP, i64 0, i64 7, i64 %410
  %412 = load i64, i64* %411, align 8
  %413 = xor i64 %385, %338
  %414 = xor i64 %413, %389
  %415 = xor i64 %414, %393
  %416 = xor i64 %415, %397
  %417 = xor i64 %416, %401
  %418 = xor i64 %417, %405
  %419 = xor i64 %418, %409
  %420 = xor i64 %419, %412
  %421 = getelementptr inbounds %struct.AVCAMELLIA, %struct.AVCAMELLIA* %0, i64 0, i32 2, i64 9
  %422 = load i64, i64* %421, align 8
  %423 = xor i64 %420, %422
  %424 = lshr i64 %423, 56
  %425 = getelementptr inbounds [8 x [256 x i64]], [8 x [256 x i64]]* @SP, i64 0, i64 0, i64 %424
  %426 = load i64, i64* %425, align 8
  %427 = lshr i64 %423, 48
  %428 = and i64 %427, 255
  %429 = getelementptr inbounds [8 x [256 x i64]], [8 x [256 x i64]]* @SP, i64 0, i64 1, i64 %428
  %430 = load i64, i64* %429, align 8
  %431 = lshr i64 %423, 40
  %432 = and i64 %431, 255
  %433 = getelementptr inbounds [8 x [256 x i64]], [8 x [256 x i64]]* @SP, i64 0, i64 2, i64 %432
  %434 = load i64, i64* %433, align 8
  %435 = lshr i64 %423, 32
  %436 = and i64 %435, 255
  %437 = getelementptr inbounds [8 x [256 x i64]], [8 x [256 x i64]]* @SP, i64 0, i64 3, i64 %436
  %438 = load i64, i64* %437, align 8
  %439 = lshr i64 %423, 24
  %440 = and i64 %439, 255
  %441 = getelementptr inbounds [8 x [256 x i64]], [8 x [256 x i64]]* @SP, i64 0, i64 4, i64 %440
  %442 = load i64, i64* %441, align 8
  %443 = lshr i64 %423, 16
  %444 = and i64 %443, 255
  %445 = getelementptr inbounds [8 x [256 x i64]], [8 x [256 x i64]]* @SP, i64 0, i64 5, i64 %444
  %446 = load i64, i64* %445, align 8
  %447 = lshr i64 %423, 8
  %448 = and i64 %447, 255
  %449 = getelementptr inbounds [8 x [256 x i64]], [8 x [256 x i64]]* @SP, i64 0, i64 6, i64 %448
  %450 = load i64, i64* %449, align 8
  %451 = and i64 %423, 255
  %452 = getelementptr inbounds [8 x [256 x i64]], [8 x [256 x i64]]* @SP, i64 0, i64 7, i64 %451
  %453 = load i64, i64* %452, align 8
  %454 = xor i64 %426, %379
  %455 = xor i64 %454, %430
  %456 = xor i64 %455, %434
  %457 = xor i64 %456, %438
  %458 = xor i64 %457, %442
  %459 = xor i64 %458, %446
  %460 = xor i64 %459, %450
  %461 = xor i64 %460, %453
  %462 = getelementptr inbounds %struct.AVCAMELLIA, %struct.AVCAMELLIA* %0, i64 0, i32 2, i64 10
  %463 = load i64, i64* %462, align 8
  %464 = xor i64 %461, %463
  %465 = lshr i64 %464, 56
  %466 = getelementptr inbounds [8 x [256 x i64]], [8 x [256 x i64]]* @SP, i64 0, i64 0, i64 %465
  %467 = load i64, i64* %466, align 8
  %468 = lshr i64 %464, 48
  %469 = and i64 %468, 255
  %470 = getelementptr inbounds [8 x [256 x i64]], [8 x [256 x i64]]* @SP, i64 0, i64 1, i64 %469
  %471 = load i64, i64* %470, align 8
  %472 = lshr i64 %464, 40
  %473 = and i64 %472, 255
  %474 = getelementptr inbounds [8 x [256 x i64]], [8 x [256 x i64]]* @SP, i64 0, i64 2, i64 %473
  %475 = load i64, i64* %474, align 8
  %476 = lshr i64 %464, 32
  %477 = and i64 %476, 255
  %478 = getelementptr inbounds [8 x [256 x i64]], [8 x [256 x i64]]* @SP, i64 0, i64 3, i64 %477
  %479 = load i64, i64* %478, align 8
  %480 = lshr i64 %464, 24
  %481 = and i64 %480, 255
  %482 = getelementptr inbounds [8 x [256 x i64]], [8 x [256 x i64]]* @SP, i64 0, i64 4, i64 %481
  %483 = load i64, i64* %482, align 8
  %484 = lshr i64 %464, 16
  %485 = and i64 %484, 255
  %486 = getelementptr inbounds [8 x [256 x i64]], [8 x [256 x i64]]* @SP, i64 0, i64 5, i64 %485
  %487 = load i64, i64* %486, align 8
  %488 = lshr i64 %464, 8
  %489 = and i64 %488, 255
  %490 = getelementptr inbounds [8 x [256 x i64]], [8 x [256 x i64]]* @SP, i64 0, i64 6, i64 %489
  %491 = load i64, i64* %490, align 8
  %492 = and i64 %464, 255
  %493 = getelementptr inbounds [8 x [256 x i64]], [8 x [256 x i64]]* @SP, i64 0, i64 7, i64 %492
  %494 = load i64, i64* %493, align 8
  %495 = xor i64 %467, %420
  %496 = xor i64 %495, %471
  %497 = xor i64 %496, %475
  %498 = xor i64 %497, %479
  %499 = xor i64 %498, %483
  %500 = xor i64 %499, %487
  %501 = xor i64 %500, %491
  %502 = xor i64 %501, %494
  %503 = getelementptr inbounds %struct.AVCAMELLIA, %struct.AVCAMELLIA* %0, i64 0, i32 2, i64 11
  %504 = load i64, i64* %503, align 8
  %505 = xor i64 %502, %504
  %506 = lshr i64 %505, 56
  %507 = getelementptr inbounds [8 x [256 x i64]], [8 x [256 x i64]]* @SP, i64 0, i64 0, i64 %506
  %508 = load i64, i64* %507, align 8
  %509 = lshr i64 %505, 48
  %510 = and i64 %509, 255
  %511 = getelementptr inbounds [8 x [256 x i64]], [8 x [256 x i64]]* @SP, i64 0, i64 1, i64 %510
  %512 = load i64, i64* %511, align 8
  %513 = lshr i64 %505, 40
  %514 = and i64 %513, 255
  %515 = getelementptr inbounds [8 x [256 x i64]], [8 x [256 x i64]]* @SP, i64 0, i64 2, i64 %514
  %516 = load i64, i64* %515, align 8
  %517 = lshr i64 %505, 32
  %518 = and i64 %517, 255
  %519 = getelementptr inbounds [8 x [256 x i64]], [8 x [256 x i64]]* @SP, i64 0, i64 3, i64 %518
  %520 = load i64, i64* %519, align 8
  %521 = lshr i64 %505, 24
  %522 = and i64 %521, 255
  %523 = getelementptr inbounds [8 x [256 x i64]], [8 x [256 x i64]]* @SP, i64 0, i64 4, i64 %522
  %524 = load i64, i64* %523, align 8
  %525 = lshr i64 %505, 16
  %526 = and i64 %525, 255
  %527 = getelementptr inbounds [8 x [256 x i64]], [8 x [256 x i64]]* @SP, i64 0, i64 5, i64 %526
  %528 = load i64, i64* %527, align 8
  %529 = lshr i64 %505, 8
  %530 = and i64 %529, 255
  %531 = getelementptr inbounds [8 x [256 x i64]], [8 x [256 x i64]]* @SP, i64 0, i64 6, i64 %530
  %532 = load i64, i64* %531, align 8
  %533 = and i64 %505, 255
  %534 = getelementptr inbounds [8 x [256 x i64]], [8 x [256 x i64]]* @SP, i64 0, i64 7, i64 %533
  %535 = load i64, i64* %534, align 8
  %536 = xor i64 %508, %461
  %537 = xor i64 %536, %512
  %538 = xor i64 %537, %516
  %539 = xor i64 %538, %520
  %540 = xor i64 %539, %524
  %541 = xor i64 %540, %528
  %542 = xor i64 %541, %532
  %543 = xor i64 %542, %535
  %544 = getelementptr inbounds %struct.AVCAMELLIA, %struct.AVCAMELLIA* %0, i64 0, i32 1, i64 2
  %545 = load i64, i64* %544, align 8
  %546 = lshr i64 %543, 32
  %547 = trunc i64 %546 to i32
  %548 = trunc i64 %543 to i32
  %549 = lshr i64 %545, 32
  %550 = trunc i64 %545 to i32
  %551 = and i64 %546, %549
  %552 = trunc i64 %551 to i32
  %553 = shl i32 %552, 1
  %554 = lshr i32 %552, 31
  %555 = or i32 %553, %554
  %556 = xor i32 %555, %548
  %557 = or i32 %556, %550
  %558 = xor i32 %557, %547
  %559 = zext i32 %558 to i64
  %560 = shl nuw i64 %559, 32
  %561 = zext i32 %556 to i64
  %562 = or i64 %560, %561
  %563 = getelementptr inbounds %struct.AVCAMELLIA, %struct.AVCAMELLIA* %0, i64 0, i32 1, i64 3
  %564 = load i64, i64* %563, align 8
  %565 = lshr i64 %502, 32
  %566 = trunc i64 %502 to i32
  %567 = lshr i64 %564, 32
  %568 = or i64 %564, %502
  %569 = xor i64 %568, %565
  %570 = and i64 %569, %567
  %571 = trunc i64 %570 to i32
  %572 = shl i32 %571, 1
  %573 = lshr i32 %571, 31
  %574 = or i32 %572, %573
  %575 = xor i32 %574, %566
  %576 = shl i64 %569, 32
  %577 = zext i32 %575 to i64
  %578 = or i64 %576, %577
  %579 = getelementptr inbounds %struct.AVCAMELLIA, %struct.AVCAMELLIA* %0, i64 0, i32 2, i64 12
  %580 = load i64, i64* %579, align 8
  %581 = xor i64 %562, %580
  %582 = lshr i64 %581, 56
  %583 = getelementptr inbounds [8 x [256 x i64]], [8 x [256 x i64]]* @SP, i64 0, i64 0, i64 %582
  %584 = load i64, i64* %583, align 8
  %585 = lshr i64 %581, 48
  %586 = and i64 %585, 255
  %587 = getelementptr inbounds [8 x [256 x i64]], [8 x [256 x i64]]* @SP, i64 0, i64 1, i64 %586
  %588 = load i64, i64* %587, align 8
  %589 = xor i64 %588, %584
  %590 = lshr i64 %581, 40
  %591 = and i64 %590, 255
  %592 = getelementptr inbounds [8 x [256 x i64]], [8 x [256 x i64]]* @SP, i64 0, i64 2, i64 %591
  %593 = load i64, i64* %592, align 8
  %594 = xor i64 %589, %593
  %595 = lshr i64 %581, 32
  %596 = and i64 %595, 255
  %597 = getelementptr inbounds [8 x [256 x i64]], [8 x [256 x i64]]* @SP, i64 0, i64 3, i64 %596
  %598 = load i64, i64* %597, align 8
  %599 = xor i64 %594, %598
  %600 = lshr i64 %581, 24
  %601 = and i64 %600, 255
  %602 = getelementptr inbounds [8 x [256 x i64]], [8 x [256 x i64]]* @SP, i64 0, i64 4, i64 %601
  %603 = load i64, i64* %602, align 8
  %604 = xor i64 %599, %603
  %605 = lshr i64 %581, 16
  %606 = and i64 %605, 255
  %607 = getelementptr inbounds [8 x [256 x i64]], [8 x [256 x i64]]* @SP, i64 0, i64 5, i64 %606
  %608 = load i64, i64* %607, align 8
  %609 = xor i64 %604, %608
  %610 = lshr i64 %581, 8
  %611 = and i64 %610, 255
  %612 = getelementptr inbounds [8 x [256 x i64]], [8 x [256 x i64]]* @SP, i64 0, i64 6, i64 %611
  %613 = load i64, i64* %612, align 8
  %614 = xor i64 %609, %613
  %615 = and i64 %581, 255
  %616 = getelementptr inbounds [8 x [256 x i64]], [8 x [256 x i64]]* @SP, i64 0, i64 7, i64 %615
  %617 = load i64, i64* %616, align 8
  %618 = xor i64 %614, %617
  %619 = xor i64 %618, %578
  %620 = getelementptr inbounds %struct.AVCAMELLIA, %struct.AVCAMELLIA* %0, i64 0, i32 2, i64 13
  %621 = load i64, i64* %620, align 8
  %622 = xor i64 %619, %621
  %623 = lshr i64 %622, 56
  %624 = getelementptr inbounds [8 x [256 x i64]], [8 x [256 x i64]]* @SP, i64 0, i64 0, i64 %623
  %625 = load i64, i64* %624, align 8
  %626 = lshr i64 %622, 48
  %627 = and i64 %626, 255
  %628 = getelementptr inbounds [8 x [256 x i64]], [8 x [256 x i64]]* @SP, i64 0, i64 1, i64 %627
  %629 = load i64, i64* %628, align 8
  %630 = lshr i64 %622, 40
  %631 = and i64 %630, 255
  %632 = getelementptr inbounds [8 x [256 x i64]], [8 x [256 x i64]]* @SP, i64 0, i64 2, i64 %631
  %633 = load i64, i64* %632, align 8
  %634 = lshr i64 %622, 32
  %635 = and i64 %634, 255
  %636 = getelementptr inbounds [8 x [256 x i64]], [8 x [256 x i64]]* @SP, i64 0, i64 3, i64 %635
  %637 = load i64, i64* %636, align 8
  %638 = lshr i64 %622, 24
  %639 = and i64 %638, 255
  %640 = getelementptr inbounds [8 x [256 x i64]], [8 x [256 x i64]]* @SP, i64 0, i64 4, i64 %639
  %641 = load i64, i64* %640, align 8
  %642 = lshr i64 %622, 16
  %643 = and i64 %642, 255
  %644 = getelementptr inbounds [8 x [256 x i64]], [8 x [256 x i64]]* @SP, i64 0, i64 5, i64 %643
  %645 = load i64, i64* %644, align 8
  %646 = lshr i64 %622, 8
  %647 = and i64 %646, 255
  %648 = getelementptr inbounds [8 x [256 x i64]], [8 x [256 x i64]]* @SP, i64 0, i64 6, i64 %647
  %649 = load i64, i64* %648, align 8
  %650 = and i64 %622, 255
  %651 = getelementptr inbounds [8 x [256 x i64]], [8 x [256 x i64]]* @SP, i64 0, i64 7, i64 %650
  %652 = load i64, i64* %651, align 8
  %653 = xor i64 %562, %625
  %654 = xor i64 %653, %629
  %655 = xor i64 %654, %633
  %656 = xor i64 %655, %637
  %657 = xor i64 %656, %641
  %658 = xor i64 %657, %645
  %659 = xor i64 %658, %649
  %660 = xor i64 %659, %652
  %661 = getelementptr inbounds %struct.AVCAMELLIA, %struct.AVCAMELLIA* %0, i64 0, i32 2, i64 14
  %662 = load i64, i64* %661, align 8
  %663 = xor i64 %660, %662
  %664 = lshr i64 %663, 56
  %665 = getelementptr inbounds [8 x [256 x i64]], [8 x [256 x i64]]* @SP, i64 0, i64 0, i64 %664
  %666 = load i64, i64* %665, align 8
  %667 = lshr i64 %663, 48
  %668 = and i64 %667, 255
  %669 = getelementptr inbounds [8 x [256 x i64]], [8 x [256 x i64]]* @SP, i64 0, i64 1, i64 %668
  %670 = load i64, i64* %669, align 8
  %671 = lshr i64 %663, 40
  %672 = and i64 %671, 255
  %673 = getelementptr inbounds [8 x [256 x i64]], [8 x [256 x i64]]* @SP, i64 0, i64 2, i64 %672
  %674 = load i64, i64* %673, align 8
  %675 = lshr i64 %663, 32
  %676 = and i64 %675, 255
  %677 = getelementptr inbounds [8 x [256 x i64]], [8 x [256 x i64]]* @SP, i64 0, i64 3, i64 %676
  %678 = load i64, i64* %677, align 8
  %679 = lshr i64 %663, 24
  %680 = and i64 %679, 255
  %681 = getelementptr inbounds [8 x [256 x i64]], [8 x [256 x i64]]* @SP, i64 0, i64 4, i64 %680
  %682 = load i64, i64* %681, align 8
  %683 = lshr i64 %663, 16
  %684 = and i64 %683, 255
  %685 = getelementptr inbounds [8 x [256 x i64]], [8 x [256 x i64]]* @SP, i64 0, i64 5, i64 %684
  %686 = load i64, i64* %685, align 8
  %687 = lshr i64 %663, 8
  %688 = and i64 %687, 255
  %689 = getelementptr inbounds [8 x [256 x i64]], [8 x [256 x i64]]* @SP, i64 0, i64 6, i64 %688
  %690 = load i64, i64* %689, align 8
  %691 = and i64 %663, 255
  %692 = getelementptr inbounds [8 x [256 x i64]], [8 x [256 x i64]]* @SP, i64 0, i64 7, i64 %691
  %693 = load i64, i64* %692, align 8
  %694 = xor i64 %666, %619
  %695 = xor i64 %694, %670
  %696 = xor i64 %695, %674
  %697 = xor i64 %696, %678
  %698 = xor i64 %697, %682
  %699 = xor i64 %698, %686
  %700 = xor i64 %699, %690
  %701 = xor i64 %700, %693
  %702 = getelementptr inbounds %struct.AVCAMELLIA, %struct.AVCAMELLIA* %0, i64 0, i32 2, i64 15
  %703 = load i64, i64* %702, align 8
  %704 = xor i64 %701, %703
  %705 = lshr i64 %704, 56
  %706 = getelementptr inbounds [8 x [256 x i64]], [8 x [256 x i64]]* @SP, i64 0, i64 0, i64 %705
  %707 = load i64, i64* %706, align 8
  %708 = lshr i64 %704, 48
  %709 = and i64 %708, 255
  %710 = getelementptr inbounds [8 x [256 x i64]], [8 x [256 x i64]]* @SP, i64 0, i64 1, i64 %709
  %711 = load i64, i64* %710, align 8
  %712 = lshr i64 %704, 40
  %713 = and i64 %712, 255
  %714 = getelementptr inbounds [8 x [256 x i64]], [8 x [256 x i64]]* @SP, i64 0, i64 2, i64 %713
  %715 = load i64, i64* %714, align 8
  %716 = lshr i64 %704, 32
  %717 = and i64 %716, 255
  %718 = getelementptr inbounds [8 x [256 x i64]], [8 x [256 x i64]]* @SP, i64 0, i64 3, i64 %717
  %719 = load i64, i64* %718, align 8
  %720 = lshr i64 %704, 24
  %721 = and i64 %720, 255
  %722 = getelementptr inbounds [8 x [256 x i64]], [8 x [256 x i64]]* @SP, i64 0, i64 4, i64 %721
  %723 = load i64, i64* %722, align 8
  %724 = lshr i64 %704, 16
  %725 = and i64 %724, 255
  %726 = getelementptr inbounds [8 x [256 x i64]], [8 x [256 x i64]]* @SP, i64 0, i64 5, i64 %725
  %727 = load i64, i64* %726, align 8
  %728 = lshr i64 %704, 8
  %729 = and i64 %728, 255
  %730 = getelementptr inbounds [8 x [256 x i64]], [8 x [256 x i64]]* @SP, i64 0, i64 6, i64 %729
  %731 = load i64, i64* %730, align 8
  %732 = and i64 %704, 255
  %733 = getelementptr inbounds [8 x [256 x i64]], [8 x [256 x i64]]* @SP, i64 0, i64 7, i64 %732
  %734 = load i64, i64* %733, align 8
  %735 = xor i64 %707, %660
  %736 = xor i64 %735, %711
  %737 = xor i64 %736, %715
  %738 = xor i64 %737, %719
  %739 = xor i64 %738, %723
  %740 = xor i64 %739, %727
  %741 = xor i64 %740, %731
  %742 = xor i64 %741, %734
  %743 = getelementptr inbounds %struct.AVCAMELLIA, %struct.AVCAMELLIA* %0, i64 0, i32 2, i64 16
  %744 = load i64, i64* %743, align 8
  %745 = xor i64 %742, %744
  %746 = lshr i64 %745, 56
  %747 = getelementptr inbounds [8 x [256 x i64]], [8 x [256 x i64]]* @SP, i64 0, i64 0, i64 %746
  %748 = load i64, i64* %747, align 8
  %749 = lshr i64 %745, 48
  %750 = and i64 %749, 255
  %751 = getelementptr inbounds [8 x [256 x i64]], [8 x [256 x i64]]* @SP, i64 0, i64 1, i64 %750
  %752 = load i64, i64* %751, align 8
  %753 = lshr i64 %745, 40
  %754 = and i64 %753, 255
  %755 = getelementptr inbounds [8 x [256 x i64]], [8 x [256 x i64]]* @SP, i64 0, i64 2, i64 %754
  %756 = load i64, i64* %755, align 8
  %757 = lshr i64 %745, 32
  %758 = and i64 %757, 255
  %759 = getelementptr inbounds [8 x [256 x i64]], [8 x [256 x i64]]* @SP, i64 0, i64 3, i64 %758
  %760 = load i64, i64* %759, align 8
  %761 = lshr i64 %745, 24
  %762 = and i64 %761, 255
  %763 = getelementptr inbounds [8 x [256 x i64]], [8 x [256 x i64]]* @SP, i64 0, i64 4, i64 %762
  %764 = load i64, i64* %763, align 8
  %765 = lshr i64 %745, 16
  %766 = and i64 %765, 255
  %767 = getelementptr inbounds [8 x [256 x i64]], [8 x [256 x i64]]* @SP, i64 0, i64 5, i64 %766
  %768 = load i64, i64* %767, align 8
  %769 = lshr i64 %745, 8
  %770 = and i64 %769, 255
  %771 = getelementptr inbounds [8 x [256 x i64]], [8 x [256 x i64]]* @SP, i64 0, i64 6, i64 %770
  %772 = load i64, i64* %771, align 8
  %773 = and i64 %745, 255
  %774 = getelementptr inbounds [8 x [256 x i64]], [8 x [256 x i64]]* @SP, i64 0, i64 7, i64 %773
  %775 = load i64, i64* %774, align 8
  %776 = xor i64 %748, %701
  %777 = xor i64 %776, %752
  %778 = xor i64 %777, %756
  %779 = xor i64 %778, %760
  %780 = xor i64 %779, %764
  %781 = xor i64 %780, %768
  %782 = xor i64 %781, %772
  %783 = xor i64 %782, %775
  %784 = getelementptr inbounds %struct.AVCAMELLIA, %struct.AVCAMELLIA* %0, i64 0, i32 2, i64 17
  %785 = load i64, i64* %784, align 8
  %786 = xor i64 %783, %785
  %787 = lshr i64 %786, 56
  %788 = getelementptr inbounds [8 x [256 x i64]], [8 x [256 x i64]]* @SP, i64 0, i64 0, i64 %787
  %789 = load i64, i64* %788, align 8
  %790 = lshr i64 %786, 48
  %791 = and i64 %790, 255
  %792 = getelementptr inbounds [8 x [256 x i64]], [8 x [256 x i64]]* @SP, i64 0, i64 1, i64 %791
  %793 = load i64, i64* %792, align 8
  %794 = lshr i64 %786, 40
  %795 = and i64 %794, 255
  %796 = getelementptr inbounds [8 x [256 x i64]], [8 x [256 x i64]]* @SP, i64 0, i64 2, i64 %795
  %797 = load i64, i64* %796, align 8
  %798 = lshr i64 %786, 32
  %799 = and i64 %798, 255
  %800 = getelementptr inbounds [8 x [256 x i64]], [8 x [256 x i64]]* @SP, i64 0, i64 3, i64 %799
  %801 = load i64, i64* %800, align 8
  %802 = lshr i64 %786, 24
  %803 = and i64 %802, 255
  %804 = getelementptr inbounds [8 x [256 x i64]], [8 x [256 x i64]]* @SP, i64 0, i64 4, i64 %803
  %805 = load i64, i64* %804, align 8
  %806 = lshr i64 %786, 16
  %807 = and i64 %806, 255
  %808 = getelementptr inbounds [8 x [256 x i64]], [8 x [256 x i64]]* @SP, i64 0, i64 5, i64 %807
  %809 = load i64, i64* %808, align 8
  %810 = lshr i64 %786, 8
  %811 = and i64 %810, 255
  %812 = getelementptr inbounds [8 x [256 x i64]], [8 x [256 x i64]]* @SP, i64 0, i64 6, i64 %811
  %813 = load i64, i64* %812, align 8
  %814 = and i64 %786, 255
  %815 = getelementptr inbounds [8 x [256 x i64]], [8 x [256 x i64]]* @SP, i64 0, i64 7, i64 %814
  %816 = load i64, i64* %815, align 8
  %817 = xor i64 %789, %742
  %818 = xor i64 %817, %793
  %819 = xor i64 %818, %797
  %820 = xor i64 %819, %801
  %821 = xor i64 %820, %805
  %822 = xor i64 %821, %809
  %823 = xor i64 %822, %813
  %824 = xor i64 %823, %816
  %825 = getelementptr inbounds %struct.AVCAMELLIA, %struct.AVCAMELLIA* %0, i64 0, i32 3
  %826 = load i32, i32* %825, align 8
  %827 = icmp eq i32 %826, 128
  br i1 %827, label %1110, label %828

828:                                              ; preds = %3
  %829 = getelementptr inbounds %struct.AVCAMELLIA, %struct.AVCAMELLIA* %0, i64 0, i32 1, i64 4
  %830 = load i64, i64* %829, align 8
  %831 = lshr i64 %824, 32
  %832 = trunc i64 %831 to i32
  %833 = trunc i64 %824 to i32
  %834 = lshr i64 %830, 32
  %835 = trunc i64 %830 to i32
  %836 = and i64 %834, %831
  %837 = trunc i64 %836 to i32
  %838 = shl i32 %837, 1
  %839 = lshr i32 %837, 31
  %840 = or i32 %838, %839
  %841 = xor i32 %840, %833
  %842 = or i32 %841, %835
  %843 = xor i32 %842, %832
  %844 = zext i32 %843 to i64
  %845 = shl nuw i64 %844, 32
  %846 = zext i32 %841 to i64
  %847 = or i64 %845, %846
  %848 = getelementptr inbounds %struct.AVCAMELLIA, %struct.AVCAMELLIA* %0, i64 0, i32 1, i64 5
  %849 = load i64, i64* %848, align 8
  %850 = lshr i64 %783, 32
  %851 = trunc i64 %783 to i32
  %852 = lshr i64 %849, 32
  %853 = or i64 %849, %783
  %854 = xor i64 %853, %850
  %855 = and i64 %854, %852
  %856 = trunc i64 %855 to i32
  %857 = shl i32 %856, 1
  %858 = lshr i32 %856, 31
  %859 = or i32 %857, %858
  %860 = xor i32 %859, %851
  %861 = shl i64 %854, 32
  %862 = zext i32 %860 to i64
  %863 = or i64 %861, %862
  %864 = getelementptr inbounds %struct.AVCAMELLIA, %struct.AVCAMELLIA* %0, i64 0, i32 2, i64 18
  %865 = load i64, i64* %864, align 8
  %866 = xor i64 %847, %865
  %867 = lshr i64 %866, 56
  %868 = getelementptr inbounds [8 x [256 x i64]], [8 x [256 x i64]]* @SP, i64 0, i64 0, i64 %867
  %869 = load i64, i64* %868, align 8
  %870 = lshr i64 %866, 48
  %871 = and i64 %870, 255
  %872 = getelementptr inbounds [8 x [256 x i64]], [8 x [256 x i64]]* @SP, i64 0, i64 1, i64 %871
  %873 = load i64, i64* %872, align 8
  %874 = xor i64 %873, %869
  %875 = lshr i64 %866, 40
  %876 = and i64 %875, 255
  %877 = getelementptr inbounds [8 x [256 x i64]], [8 x [256 x i64]]* @SP, i64 0, i64 2, i64 %876
  %878 = load i64, i64* %877, align 8
  %879 = xor i64 %874, %878
  %880 = lshr i64 %866, 32
  %881 = and i64 %880, 255
  %882 = getelementptr inbounds [8 x [256 x i64]], [8 x [256 x i64]]* @SP, i64 0, i64 3, i64 %881
  %883 = load i64, i64* %882, align 8
  %884 = xor i64 %879, %883
  %885 = lshr i64 %866, 24
  %886 = and i64 %885, 255
  %887 = getelementptr inbounds [8 x [256 x i64]], [8 x [256 x i64]]* @SP, i64 0, i64 4, i64 %886
  %888 = load i64, i64* %887, align 8
  %889 = xor i64 %884, %888
  %890 = lshr i64 %866, 16
  %891 = and i64 %890, 255
  %892 = getelementptr inbounds [8 x [256 x i64]], [8 x [256 x i64]]* @SP, i64 0, i64 5, i64 %891
  %893 = load i64, i64* %892, align 8
  %894 = xor i64 %889, %893
  %895 = lshr i64 %866, 8
  %896 = and i64 %895, 255
  %897 = getelementptr inbounds [8 x [256 x i64]], [8 x [256 x i64]]* @SP, i64 0, i64 6, i64 %896
  %898 = load i64, i64* %897, align 8
  %899 = xor i64 %894, %898
  %900 = and i64 %866, 255
  %901 = getelementptr inbounds [8 x [256 x i64]], [8 x [256 x i64]]* @SP, i64 0, i64 7, i64 %900
  %902 = load i64, i64* %901, align 8
  %903 = xor i64 %899, %902
  %904 = xor i64 %903, %863
  %905 = getelementptr inbounds %struct.AVCAMELLIA, %struct.AVCAMELLIA* %0, i64 0, i32 2, i64 19
  %906 = load i64, i64* %905, align 8
  %907 = xor i64 %904, %906
  %908 = lshr i64 %907, 56
  %909 = getelementptr inbounds [8 x [256 x i64]], [8 x [256 x i64]]* @SP, i64 0, i64 0, i64 %908
  %910 = load i64, i64* %909, align 8
  %911 = lshr i64 %907, 48
  %912 = and i64 %911, 255
  %913 = getelementptr inbounds [8 x [256 x i64]], [8 x [256 x i64]]* @SP, i64 0, i64 1, i64 %912
  %914 = load i64, i64* %913, align 8
  %915 = lshr i64 %907, 40
  %916 = and i64 %915, 255
  %917 = getelementptr inbounds [8 x [256 x i64]], [8 x [256 x i64]]* @SP, i64 0, i64 2, i64 %916
  %918 = load i64, i64* %917, align 8
  %919 = lshr i64 %907, 32
  %920 = and i64 %919, 255
  %921 = getelementptr inbounds [8 x [256 x i64]], [8 x [256 x i64]]* @SP, i64 0, i64 3, i64 %920
  %922 = load i64, i64* %921, align 8
  %923 = lshr i64 %907, 24
  %924 = and i64 %923, 255
  %925 = getelementptr inbounds [8 x [256 x i64]], [8 x [256 x i64]]* @SP, i64 0, i64 4, i64 %924
  %926 = load i64, i64* %925, align 8
  %927 = lshr i64 %907, 16
  %928 = and i64 %927, 255
  %929 = getelementptr inbounds [8 x [256 x i64]], [8 x [256 x i64]]* @SP, i64 0, i64 5, i64 %928
  %930 = load i64, i64* %929, align 8
  %931 = lshr i64 %907, 8
  %932 = and i64 %931, 255
  %933 = getelementptr inbounds [8 x [256 x i64]], [8 x [256 x i64]]* @SP, i64 0, i64 6, i64 %932
  %934 = load i64, i64* %933, align 8
  %935 = and i64 %907, 255
  %936 = getelementptr inbounds [8 x [256 x i64]], [8 x [256 x i64]]* @SP, i64 0, i64 7, i64 %935
  %937 = load i64, i64* %936, align 8
  %938 = xor i64 %910, %847
  %939 = xor i64 %938, %914
  %940 = xor i64 %939, %918
  %941 = xor i64 %940, %922
  %942 = xor i64 %941, %926
  %943 = xor i64 %942, %930
  %944 = xor i64 %943, %934
  %945 = xor i64 %944, %937
  %946 = getelementptr inbounds %struct.AVCAMELLIA, %struct.AVCAMELLIA* %0, i64 0, i32 2, i64 20
  %947 = load i64, i64* %946, align 8
  %948 = xor i64 %945, %947
  %949 = lshr i64 %948, 56
  %950 = getelementptr inbounds [8 x [256 x i64]], [8 x [256 x i64]]* @SP, i64 0, i64 0, i64 %949
  %951 = load i64, i64* %950, align 8
  %952 = lshr i64 %948, 48
  %953 = and i64 %952, 255
  %954 = getelementptr inbounds [8 x [256 x i64]], [8 x [256 x i64]]* @SP, i64 0, i64 1, i64 %953
  %955 = load i64, i64* %954, align 8
  %956 = lshr i64 %948, 40
  %957 = and i64 %956, 255
  %958 = getelementptr inbounds [8 x [256 x i64]], [8 x [256 x i64]]* @SP, i64 0, i64 2, i64 %957
  %959 = load i64, i64* %958, align 8
  %960 = lshr i64 %948, 32
  %961 = and i64 %960, 255
  %962 = getelementptr inbounds [8 x [256 x i64]], [8 x [256 x i64]]* @SP, i64 0, i64 3, i64 %961
  %963 = load i64, i64* %962, align 8
  %964 = lshr i64 %948, 24
  %965 = and i64 %964, 255
  %966 = getelementptr inbounds [8 x [256 x i64]], [8 x [256 x i64]]* @SP, i64 0, i64 4, i64 %965
  %967 = load i64, i64* %966, align 8
  %968 = lshr i64 %948, 16
  %969 = and i64 %968, 255
  %970 = getelementptr inbounds [8 x [256 x i64]], [8 x [256 x i64]]* @SP, i64 0, i64 5, i64 %969
  %971 = load i64, i64* %970, align 8
  %972 = lshr i64 %948, 8
  %973 = and i64 %972, 255
  %974 = getelementptr inbounds [8 x [256 x i64]], [8 x [256 x i64]]* @SP, i64 0, i64 6, i64 %973
  %975 = load i64, i64* %974, align 8
  %976 = and i64 %948, 255
  %977 = getelementptr inbounds [8 x [256 x i64]], [8 x [256 x i64]]* @SP, i64 0, i64 7, i64 %976
  %978 = load i64, i64* %977, align 8
  %979 = xor i64 %951, %904
  %980 = xor i64 %979, %955
  %981 = xor i64 %980, %959
  %982 = xor i64 %981, %963
  %983 = xor i64 %982, %967
  %984 = xor i64 %983, %971
  %985 = xor i64 %984, %975
  %986 = xor i64 %985, %978
  %987 = getelementptr inbounds %struct.AVCAMELLIA, %struct.AVCAMELLIA* %0, i64 0, i32 2, i64 21
  %988 = load i64, i64* %987, align 8
  %989 = xor i64 %986, %988
  %990 = lshr i64 %989, 56
  %991 = getelementptr inbounds [8 x [256 x i64]], [8 x [256 x i64]]* @SP, i64 0, i64 0, i64 %990
  %992 = load i64, i64* %991, align 8
  %993 = lshr i64 %989, 48
  %994 = and i64 %993, 255
  %995 = getelementptr inbounds [8 x [256 x i64]], [8 x [256 x i64]]* @SP, i64 0, i64 1, i64 %994
  %996 = load i64, i64* %995, align 8
  %997 = lshr i64 %989, 40
  %998 = and i64 %997, 255
  %999 = getelementptr inbounds [8 x [256 x i64]], [8 x [256 x i64]]* @SP, i64 0, i64 2, i64 %998
  %1000 = load i64, i64* %999, align 8
  %1001 = lshr i64 %989, 32
  %1002 = and i64 %1001, 255
  %1003 = getelementptr inbounds [8 x [256 x i64]], [8 x [256 x i64]]* @SP, i64 0, i64 3, i64 %1002
  %1004 = load i64, i64* %1003, align 8
  %1005 = lshr i64 %989, 24
  %1006 = and i64 %1005, 255
  %1007 = getelementptr inbounds [8 x [256 x i64]], [8 x [256 x i64]]* @SP, i64 0, i64 4, i64 %1006
  %1008 = load i64, i64* %1007, align 8
  %1009 = lshr i64 %989, 16
  %1010 = and i64 %1009, 255
  %1011 = getelementptr inbounds [8 x [256 x i64]], [8 x [256 x i64]]* @SP, i64 0, i64 5, i64 %1010
  %1012 = load i64, i64* %1011, align 8
  %1013 = lshr i64 %989, 8
  %1014 = and i64 %1013, 255
  %1015 = getelementptr inbounds [8 x [256 x i64]], [8 x [256 x i64]]* @SP, i64 0, i64 6, i64 %1014
  %1016 = load i64, i64* %1015, align 8
  %1017 = and i64 %989, 255
  %1018 = getelementptr inbounds [8 x [256 x i64]], [8 x [256 x i64]]* @SP, i64 0, i64 7, i64 %1017
  %1019 = load i64, i64* %1018, align 8
  %1020 = xor i64 %992, %945
  %1021 = xor i64 %1020, %996
  %1022 = xor i64 %1021, %1000
  %1023 = xor i64 %1022, %1004
  %1024 = xor i64 %1023, %1008
  %1025 = xor i64 %1024, %1012
  %1026 = xor i64 %1025, %1016
  %1027 = xor i64 %1026, %1019
  %1028 = getelementptr inbounds %struct.AVCAMELLIA, %struct.AVCAMELLIA* %0, i64 0, i32 2, i64 22
  %1029 = load i64, i64* %1028, align 8
  %1030 = xor i64 %1027, %1029
  %1031 = lshr i64 %1030, 56
  %1032 = getelementptr inbounds [8 x [256 x i64]], [8 x [256 x i64]]* @SP, i64 0, i64 0, i64 %1031
  %1033 = load i64, i64* %1032, align 8
  %1034 = lshr i64 %1030, 48
  %1035 = and i64 %1034, 255
  %1036 = getelementptr inbounds [8 x [256 x i64]], [8 x [256 x i64]]* @SP, i64 0, i64 1, i64 %1035
  %1037 = load i64, i64* %1036, align 8
  %1038 = lshr i64 %1030, 40
  %1039 = and i64 %1038, 255
  %1040 = getelementptr inbounds [8 x [256 x i64]], [8 x [256 x i64]]* @SP, i64 0, i64 2, i64 %1039
  %1041 = load i64, i64* %1040, align 8
  %1042 = lshr i64 %1030, 32
  %1043 = and i64 %1042, 255
  %1044 = getelementptr inbounds [8 x [256 x i64]], [8 x [256 x i64]]* @SP, i64 0, i64 3, i64 %1043
  %1045 = load i64, i64* %1044, align 8
  %1046 = lshr i64 %1030, 24
  %1047 = and i64 %1046, 255
  %1048 = getelementptr inbounds [8 x [256 x i64]], [8 x [256 x i64]]* @SP, i64 0, i64 4, i64 %1047
  %1049 = load i64, i64* %1048, align 8
  %1050 = lshr i64 %1030, 16
  %1051 = and i64 %1050, 255
  %1052 = getelementptr inbounds [8 x [256 x i64]], [8 x [256 x i64]]* @SP, i64 0, i64 5, i64 %1051
  %1053 = load i64, i64* %1052, align 8
  %1054 = lshr i64 %1030, 8
  %1055 = and i64 %1054, 255
  %1056 = getelementptr inbounds [8 x [256 x i64]], [8 x [256 x i64]]* @SP, i64 0, i64 6, i64 %1055
  %1057 = load i64, i64* %1056, align 8
  %1058 = and i64 %1030, 255
  %1059 = getelementptr inbounds [8 x [256 x i64]], [8 x [256 x i64]]* @SP, i64 0, i64 7, i64 %1058
  %1060 = load i64, i64* %1059, align 8
  %1061 = xor i64 %1033, %986
  %1062 = xor i64 %1061, %1037
  %1063 = xor i64 %1062, %1041
  %1064 = xor i64 %1063, %1045
  %1065 = xor i64 %1064, %1049
  %1066 = xor i64 %1065, %1053
  %1067 = xor i64 %1066, %1057
  %1068 = xor i64 %1067, %1060
  %1069 = getelementptr inbounds %struct.AVCAMELLIA, %struct.AVCAMELLIA* %0, i64 0, i32 2, i64 23
  %1070 = load i64, i64* %1069, align 8
  %1071 = xor i64 %1068, %1070
  %1072 = lshr i64 %1071, 56
  %1073 = getelementptr inbounds [8 x [256 x i64]], [8 x [256 x i64]]* @SP, i64 0, i64 0, i64 %1072
  %1074 = load i64, i64* %1073, align 8
  %1075 = lshr i64 %1071, 48
  %1076 = and i64 %1075, 255
  %1077 = getelementptr inbounds [8 x [256 x i64]], [8 x [256 x i64]]* @SP, i64 0, i64 1, i64 %1076
  %1078 = load i64, i64* %1077, align 8
  %1079 = lshr i64 %1071, 40
  %1080 = and i64 %1079, 255
  %1081 = getelementptr inbounds [8 x [256 x i64]], [8 x [256 x i64]]* @SP, i64 0, i64 2, i64 %1080
  %1082 = load i64, i64* %1081, align 8
  %1083 = lshr i64 %1071, 32
  %1084 = and i64 %1083, 255
  %1085 = getelementptr inbounds [8 x [256 x i64]], [8 x [256 x i64]]* @SP, i64 0, i64 3, i64 %1084
  %1086 = load i64, i64* %1085, align 8
  %1087 = lshr i64 %1071, 24
  %1088 = and i64 %1087, 255
  %1089 = getelementptr inbounds [8 x [256 x i64]], [8 x [256 x i64]]* @SP, i64 0, i64 4, i64 %1088
  %1090 = load i64, i64* %1089, align 8
  %1091 = lshr i64 %1071, 16
  %1092 = and i64 %1091, 255
  %1093 = getelementptr inbounds [8 x [256 x i64]], [8 x [256 x i64]]* @SP, i64 0, i64 5, i64 %1092
  %1094 = load i64, i64* %1093, align 8
  %1095 = lshr i64 %1071, 8
  %1096 = and i64 %1095, 255
  %1097 = getelementptr inbounds [8 x [256 x i64]], [8 x [256 x i64]]* @SP, i64 0, i64 6, i64 %1096
  %1098 = load i64, i64* %1097, align 8
  %1099 = and i64 %1071, 255
  %1100 = getelementptr inbounds [8 x [256 x i64]], [8 x [256 x i64]]* @SP, i64 0, i64 7, i64 %1099
  %1101 = load i64, i64* %1100, align 8
  %1102 = xor i64 %1074, %1027
  %1103 = xor i64 %1102, %1078
  %1104 = xor i64 %1103, %1082
  %1105 = xor i64 %1104, %1086
  %1106 = xor i64 %1105, %1090
  %1107 = xor i64 %1106, %1094
  %1108 = xor i64 %1107, %1098
  %1109 = xor i64 %1108, %1101
  br label %1110

1110:                                             ; preds = %3, %828
  %1111 = phi i64 [ %1109, %828 ], [ %824, %3 ]
  %1112 = phi i64 [ %1068, %828 ], [ %783, %3 ]
  %1113 = getelementptr inbounds %struct.AVCAMELLIA, %struct.AVCAMELLIA* %0, i64 0, i32 0, i64 2
  %1114 = load i64, i64* %1113, align 8
  %1115 = xor i64 %1114, %1112
  %1116 = getelementptr inbounds %struct.AVCAMELLIA, %struct.AVCAMELLIA* %0, i64 0, i32 0, i64 3
  %1117 = load i64, i64* %1116, align 8
  %1118 = xor i64 %1117, %1111
  %1119 = tail call i64 asm "bswap  $0", "=r,0,~{dirflag},~{fpsr},~{flags}"(i64 %1115) #6, !srcloc !2
  %1120 = bitcast i8* %1 to i64*
  store i64 %1119, i64* %1120, align 1
  %1121 = tail call i64 asm "bswap  $0", "=r,0,~{dirflag},~{fpsr},~{flags}"(i64 %1118) #6, !srcloc !2
  %1122 = getelementptr inbounds i8, i8* %1, i64 8
  %1123 = bitcast i8* %1122 to i64*
  store i64 %1121, i64* %1123, align 1
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #3

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="true" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="true" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { cold nounwind optsize ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="true" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { argmemonly nounwind }
attributes #4 = { norecurse nounwind readonly ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="true" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind }
attributes #6 = { nounwind readnone }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{i32 1429560}
