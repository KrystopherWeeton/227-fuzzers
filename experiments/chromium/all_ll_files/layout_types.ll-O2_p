; ModuleID = '../../ui/views/layout/layout_types.cc'
source_filename = "../../ui/views/layout/layout_types.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%union.anon = type { i32 }
%"class.views::SizeBound" = type { %"class.absl::optional" }
%"class.absl::optional" = type { %"class.absl::optional_internal::optional_data" }
%"class.absl::optional_internal::optional_data" = type { %"class.absl::optional_internal::optional_data_base" }
%"class.absl::optional_internal::optional_data_base" = type { %"class.absl::optional_internal::optional_data_dtor_base" }
%"class.absl::optional_internal::optional_data_dtor_base" = type { i8, %union.anon }
%"class.std::__1::basic_string" = type { %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" = type { %union.anon.0 }
%union.anon.0 = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" = type { i8*, i64, i64 }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short" = type { [23 x i8], %struct.anon }
%struct.anon = type { i8 }
%"class.views::SizeBounds" = type { %"class.views::SizeBound", %"class.views::SizeBound" }
%"class.base::BasicStringPiece" = type { i8*, i64 }
%"class.gfx::Size" = type { i32, i32 }

@.ref.tmp.1 = private unnamed_addr constant { { i8, %union.anon } } { { i8, %union.anon } { i8 1, %union.anon zeroinitializer } }, align 4
@.str.2 = private unnamed_addr constant [4 x i8] c" x \00", align 1

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5views9SizeBoundpLERKS0_(%"class.views::SizeBound"* nocapture, %"class.views::SizeBound"* nocapture readonly dereferenceable(8)) local_unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"class.views::SizeBound", %"class.views::SizeBound"* %1, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %4 = load i8, i8* %3, align 4, !range !2
  %5 = icmp eq i8 %4, 0
  %6 = getelementptr inbounds %"class.views::SizeBound", %"class.views::SizeBound"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0
  br i1 %5, label %7, label %8

7:                                                ; preds = %2
  store i8 0, i8* %6, align 4
  br label %17

8:                                                ; preds = %2
  %9 = load i8, i8* %6, align 4, !range !2
  %10 = icmp eq i8 %9, 0
  br i1 %10, label %17, label %11

11:                                               ; preds = %8
  %12 = getelementptr inbounds %"class.views::SizeBound", %"class.views::SizeBound"* %1, i64 0, i32 0, i32 0, i32 0, i32 0, i32 1, i32 0
  %13 = load i32, i32* %12, align 4
  %14 = getelementptr inbounds %"class.views::SizeBound", %"class.views::SizeBound"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 1, i32 0
  %15 = load i32, i32* %14, align 4
  %16 = add nsw i32 %15, %13
  store i32 %16, i32* %14, align 4
  br label %17

17:                                               ; preds = %8, %11, %7
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5views9SizeBoundmIERKS0_(%"class.views::SizeBound"* nocapture, %"class.views::SizeBound"* nocapture readonly dereferenceable(8)) local_unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"class.views::SizeBound", %"class.views::SizeBound"* %1, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %4 = load i8, i8* %3, align 4, !range !2
  %5 = icmp eq i8 %4, 0
  br i1 %5, label %6, label %8

6:                                                ; preds = %2
  %7 = bitcast %"class.views::SizeBound"* %0 to i64*
  store i64 1, i64* %7, align 4
  br label %18

8:                                                ; preds = %2
  %9 = getelementptr inbounds %"class.views::SizeBound", %"class.views::SizeBound"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %10 = load i8, i8* %9, align 4, !range !2
  %11 = icmp eq i8 %10, 0
  br i1 %11, label %18, label %12

12:                                               ; preds = %8
  %13 = getelementptr inbounds %"class.views::SizeBound", %"class.views::SizeBound"* %1, i64 0, i32 0, i32 0, i32 0, i32 0, i32 1, i32 0
  %14 = load i32, i32* %13, align 4
  %15 = getelementptr inbounds %"class.views::SizeBound", %"class.views::SizeBound"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 1, i32 0
  %16 = load i32, i32* %15, align 4
  %17 = sub nsw i32 %16, %14
  store i32 %17, i32* %15, align 4
  br label %18

18:                                               ; preds = %8, %12, %6
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZNK5views9SizeBound8ToStringEv(%"class.std::__1::basic_string"* noalias sret, %"class.views::SizeBound"* nocapture readonly) local_unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"class.views::SizeBound", %"class.views::SizeBound"* %1, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %4 = load i8, i8* %3, align 4, !range !2
  %5 = icmp eq i8 %4, 0
  br i1 %5, label %9, label %6

6:                                                ; preds = %2
  %7 = getelementptr inbounds %"class.views::SizeBound", %"class.views::SizeBound"* %1, i64 0, i32 0, i32 0, i32 0, i32 0, i32 1, i32 0
  %8 = load i32, i32* %7, align 4
  tail call void @_ZN4base14NumberToStringEi(%"class.std::__1::basic_string"* sret %0, i32 %8) #6
  br label %14

9:                                                ; preds = %2
  %10 = bitcast %"class.std::__1::basic_string"* %0 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %11 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %10, i64 0, i32 1, i32 0
  store i8 1, i8* %11, align 1
  %12 = bitcast %"class.std::__1::basic_string"* %0 to i8*
  store i8 95, i8* %12, align 8
  %13 = getelementptr inbounds i8, i8* %12, i64 1
  store i8 0, i8* %13, align 1
  br label %14

14:                                               ; preds = %9, %6
  ret void
}

declare void @_ZN4base14NumberToStringEi(%"class.std::__1::basic_string"* sret, i32) local_unnamed_addr #2

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @_ZN5viewsplERKNS_9SizeBoundES2_(%"class.views::SizeBound"* noalias nocapture sret, %"class.views::SizeBound"* nocapture readonly dereferenceable(8), %"class.views::SizeBound"* nocapture readonly dereferenceable(8)) local_unnamed_addr #3 {
  %4 = bitcast %"class.views::SizeBound"* %0 to i64*
  %5 = bitcast %"class.views::SizeBound"* %1 to i64*
  %6 = load i64, i64* %5, align 4
  store i64 %6, i64* %4, align 4
  %7 = getelementptr inbounds %"class.views::SizeBound", %"class.views::SizeBound"* %2, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %8 = load i8, i8* %7, align 4, !range !2
  %9 = icmp eq i8 %8, 0
  %10 = lshr i64 %6, 32
  %11 = trunc i64 %10 to i32
  br i1 %9, label %12, label %14

12:                                               ; preds = %3
  %13 = getelementptr inbounds %"class.views::SizeBound", %"class.views::SizeBound"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0
  store i8 0, i8* %13, align 4
  br label %22

14:                                               ; preds = %3
  %15 = trunc i64 %6 to i8
  %16 = icmp eq i8 %15, 0
  br i1 %16, label %22, label %17

17:                                               ; preds = %14
  %18 = getelementptr inbounds %"class.views::SizeBound", %"class.views::SizeBound"* %2, i64 0, i32 0, i32 0, i32 0, i32 0, i32 1, i32 0
  %19 = load i32, i32* %18, align 4
  %20 = getelementptr inbounds %"class.views::SizeBound", %"class.views::SizeBound"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 1, i32 0
  %21 = add nsw i32 %19, %11
  store i32 %21, i32* %20, align 4
  br label %22

22:                                               ; preds = %12, %14, %17
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @_ZN5viewsmiERKNS_9SizeBoundES2_(%"class.views::SizeBound"* noalias nocapture sret, %"class.views::SizeBound"* nocapture readonly dereferenceable(8), %"class.views::SizeBound"* nocapture readonly dereferenceable(8)) local_unnamed_addr #3 {
  %4 = bitcast %"class.views::SizeBound"* %0 to i64*
  %5 = bitcast %"class.views::SizeBound"* %1 to i64*
  %6 = load i64, i64* %5, align 4
  store i64 %6, i64* %4, align 4
  %7 = getelementptr inbounds %"class.views::SizeBound", %"class.views::SizeBound"* %2, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %8 = load i8, i8* %7, align 4, !range !2
  %9 = icmp eq i8 %8, 0
  %10 = lshr i64 %6, 32
  %11 = trunc i64 %10 to i32
  br i1 %9, label %12, label %13

12:                                               ; preds = %3
  store i64 1, i64* %4, align 4
  br label %21

13:                                               ; preds = %3
  %14 = trunc i64 %6 to i8
  %15 = icmp eq i8 %14, 0
  br i1 %15, label %21, label %16

16:                                               ; preds = %13
  %17 = getelementptr inbounds %"class.views::SizeBound", %"class.views::SizeBound"* %2, i64 0, i32 0, i32 0, i32 0, i32 0, i32 1, i32 0
  %18 = load i32, i32* %17, align 4
  %19 = getelementptr inbounds %"class.views::SizeBound", %"class.views::SizeBound"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 1, i32 0
  %20 = sub nsw i32 %11, %18
  store i32 %20, i32* %19, align 4
  br label %21

21:                                               ; preds = %12, %13, %16
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5views10SizeBounds7EnlargeEii(%"class.views::SizeBounds"* nocapture, i32, i32) local_unnamed_addr #0 align 2 {
  %4 = alloca i64, align 8
  %5 = alloca i64, align 8
  %6 = bitcast i64* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %6)
  %7 = bitcast %"class.views::SizeBounds"* %0 to i64*
  %8 = load i64, i64* %7, align 4, !noalias !3
  store i64 %8, i64* %4, align 8, !alias.scope !3
  %9 = trunc i64 %8 to i8
  %10 = icmp eq i8 %9, 0
  br i1 %10, label %18, label %11

11:                                               ; preds = %3
  %12 = lshr i64 %8, 32
  %13 = trunc i64 %12 to i32
  %14 = add nsw i32 %13, %1
  %15 = getelementptr inbounds i8, i8* %6, i64 4
  %16 = bitcast i8* %15 to i32*
  store i32 %14, i32* %16, align 4, !alias.scope !3
  %17 = icmp sgt i32 %14, 0
  br i1 %17, label %18, label %19

18:                                               ; preds = %3, %11
  br label %19

19:                                               ; preds = %18, %11
  %20 = phi i64* [ %4, %18 ], [ bitcast ({ { i8, %union.anon } }* @.ref.tmp.1 to i64*), %11 ]
  %21 = load i64, i64* %20, align 4
  store i64 %21, i64* %7, align 4
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %6)
  %22 = bitcast i64* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %22)
  %23 = getelementptr inbounds %"class.views::SizeBounds", %"class.views::SizeBounds"* %0, i64 0, i32 1
  %24 = bitcast %"class.views::SizeBound"* %23 to i64*
  %25 = load i64, i64* %24, align 4, !noalias !6
  store i64 %25, i64* %5, align 8, !alias.scope !6
  %26 = trunc i64 %25 to i8
  %27 = icmp eq i8 %26, 0
  br i1 %27, label %35, label %28

28:                                               ; preds = %19
  %29 = lshr i64 %25, 32
  %30 = trunc i64 %29 to i32
  %31 = add nsw i32 %30, %2
  %32 = getelementptr inbounds i8, i8* %22, i64 4
  %33 = bitcast i8* %32 to i32*
  store i32 %31, i32* %33, align 4, !alias.scope !6
  %34 = icmp sgt i32 %31, 0
  br i1 %34, label %35, label %36

35:                                               ; preds = %19, %28
  br label %36

36:                                               ; preds = %28, %35
  %37 = phi i64* [ %5, %35 ], [ bitcast ({ { i8, %union.anon } }* @.ref.tmp.1 to i64*), %28 ]
  %38 = load i64, i64* %37, align 4
  store i64 %38, i64* %24, align 4
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %22)
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZNK5views10SizeBounds8ToStringEv(%"class.std::__1::basic_string"* noalias sret, %"class.views::SizeBounds"* nocapture readonly) local_unnamed_addr #0 align 2 {
  %3 = alloca [3 x %"class.base::BasicStringPiece"], align 8
  %4 = alloca %"class.std::__1::basic_string", align 8
  %5 = alloca %"class.std::__1::basic_string", align 8
  %6 = bitcast [3 x %"class.base::BasicStringPiece"]* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 48, i8* nonnull %6) #6
  %7 = getelementptr inbounds [3 x %"class.base::BasicStringPiece"], [3 x %"class.base::BasicStringPiece"]* %3, i64 0, i64 0
  %8 = bitcast %"class.std::__1::basic_string"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %8) #6
  %9 = getelementptr inbounds %"class.views::SizeBounds", %"class.views::SizeBounds"* %1, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %10 = load i8, i8* %9, align 4, !range !2, !noalias !9
  %11 = icmp eq i8 %10, 0
  br i1 %11, label %20, label %12

12:                                               ; preds = %2
  %13 = getelementptr inbounds %"class.views::SizeBounds", %"class.views::SizeBounds"* %1, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1, i32 0
  %14 = load i32, i32* %13, align 4, !noalias !9
  call void @_ZN4base14NumberToStringEi(%"class.std::__1::basic_string"* nonnull sret %4, i32 %14) #6
  %15 = bitcast %"class.std::__1::basic_string"* %4 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %16 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %15, i64 0, i32 1, i32 0
  %17 = load i8, i8* %16, align 1
  %18 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %4, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %19 = load i64, i64* %18, align 8
  br label %24

20:                                               ; preds = %2
  %21 = bitcast %"class.std::__1::basic_string"* %4 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %22 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %21, i64 0, i32 1, i32 0
  store i8 1, i8* %22, align 1, !alias.scope !9
  store i8 95, i8* %8, align 8, !alias.scope !9
  %23 = getelementptr inbounds i8, i8* %8, i64 1
  store i8 0, i8* %23, align 1, !alias.scope !9
  br label %24

24:                                               ; preds = %12, %20
  %25 = phi %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* [ %15, %12 ], [ %21, %20 ]
  %26 = phi i64 [ %19, %12 ], [ undef, %20 ]
  %27 = phi i8 [ %17, %12 ], [ 1, %20 ]
  %28 = getelementptr inbounds [3 x %"class.base::BasicStringPiece"], [3 x %"class.base::BasicStringPiece"]* %3, i64 0, i64 0, i32 0
  %29 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %25, i64 0, i32 1, i32 0
  %30 = icmp slt i8 %27, 0
  %31 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %4, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %32 = load i8*, i8** %31, align 8
  %33 = select i1 %30, i8* %32, i8* %8
  store i8* %33, i8** %28, align 8
  %34 = getelementptr inbounds [3 x %"class.base::BasicStringPiece"], [3 x %"class.base::BasicStringPiece"]* %3, i64 0, i64 0, i32 1
  %35 = zext i8 %27 to i64
  %36 = select i1 %30, i64 %26, i64 %35
  store i64 %36, i64* %34, align 8
  %37 = getelementptr inbounds [3 x %"class.base::BasicStringPiece"], [3 x %"class.base::BasicStringPiece"]* %3, i64 0, i64 1, i32 0
  store i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.2, i64 0, i64 0), i8** %37, align 8
  %38 = getelementptr inbounds [3 x %"class.base::BasicStringPiece"], [3 x %"class.base::BasicStringPiece"]* %3, i64 0, i64 1, i32 1
  store i64 3, i64* %38, align 8
  %39 = bitcast %"class.std::__1::basic_string"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %39) #6
  %40 = getelementptr inbounds %"class.views::SizeBounds", %"class.views::SizeBounds"* %1, i64 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0
  %41 = load i8, i8* %40, align 4, !range !2, !noalias !12
  %42 = icmp eq i8 %41, 0
  br i1 %42, label %49, label %43

43:                                               ; preds = %24
  %44 = getelementptr inbounds %"class.views::SizeBounds", %"class.views::SizeBounds"* %1, i64 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 1, i32 0
  %45 = load i32, i32* %44, align 4, !noalias !12
  call void @_ZN4base14NumberToStringEi(%"class.std::__1::basic_string"* nonnull sret %5, i32 %45) #6
  %46 = bitcast %"class.std::__1::basic_string"* %5 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %47 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %46, i64 0, i32 1, i32 0
  %48 = load i8, i8* %47, align 1
  br label %53

49:                                               ; preds = %24
  %50 = bitcast %"class.std::__1::basic_string"* %5 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %51 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %50, i64 0, i32 1, i32 0
  store i8 1, i8* %51, align 1, !alias.scope !12
  store i8 95, i8* %39, align 8, !alias.scope !12
  %52 = getelementptr inbounds i8, i8* %39, i64 1
  store i8 0, i8* %52, align 1, !alias.scope !12
  br label %53

53:                                               ; preds = %43, %49
  %54 = phi %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* [ %46, %43 ], [ %50, %49 ]
  %55 = phi i8 [ %48, %43 ], [ 1, %49 ]
  %56 = getelementptr inbounds [3 x %"class.base::BasicStringPiece"], [3 x %"class.base::BasicStringPiece"]* %3, i64 0, i64 2, i32 0
  %57 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %54, i64 0, i32 1, i32 0
  %58 = icmp slt i8 %55, 0
  %59 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %5, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %60 = load i8*, i8** %59, align 8
  %61 = select i1 %58, i8* %60, i8* %39
  store i8* %61, i8** %56, align 8
  %62 = getelementptr inbounds [3 x %"class.base::BasicStringPiece"], [3 x %"class.base::BasicStringPiece"]* %3, i64 0, i64 2, i32 1
  %63 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %5, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %64 = load i64, i64* %63, align 8
  %65 = zext i8 %55 to i64
  %66 = select i1 %58, i64 %64, i64 %65
  store i64 %66, i64* %62, align 8
  call void @_ZN4base6StrCatENS_4spanIKNS_16BasicStringPieceIcNSt3__111char_traitsIcEEEELm18446744073709551615EEE(%"class.std::__1::basic_string"* sret %0, i64 3, %"class.base::BasicStringPiece"* nonnull %7) #6
  %67 = load i8, i8* %57, align 1
  %68 = icmp slt i8 %67, 0
  br i1 %68, label %69, label %71

69:                                               ; preds = %53
  %70 = load i8*, i8** %59, align 8
  call void @_ZdlPv(i8* %70) #7
  br label %71

71:                                               ; preds = %53, %69
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %39) #6
  %72 = load i8, i8* %29, align 1
  %73 = icmp slt i8 %72, 0
  br i1 %73, label %74, label %76

74:                                               ; preds = %71
  %75 = load i8*, i8** %31, align 8
  call void @_ZdlPv(i8* %75) #7
  br label %76

76:                                               ; preds = %71, %74
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %8) #6
  call void @llvm.lifetime.end.p0i8(i64 48, i8* nonnull %6) #6
  ret void
}

; Function Attrs: nounwind readonly ssp uwtable
define hidden zeroext i1 @_ZN5views14CanFitInBoundsERKN3gfx4SizeERKNS_10SizeBoundsE(%"class.gfx::Size"* nocapture readonly dereferenceable(8), %"class.views::SizeBounds"* nocapture readonly dereferenceable(16)) local_unnamed_addr #4 {
  %3 = getelementptr inbounds %"class.views::SizeBounds", %"class.views::SizeBounds"* %1, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %4 = load i8, i8* %3, align 4, !range !2
  %5 = icmp eq i8 %4, 0
  br i1 %5, label %12, label %6

6:                                                ; preds = %2
  %7 = getelementptr inbounds %"class.gfx::Size", %"class.gfx::Size"* %0, i64 0, i32 0
  %8 = load i32, i32* %7, align 4
  %9 = getelementptr inbounds %"class.views::SizeBounds", %"class.views::SizeBounds"* %1, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1, i32 0
  %10 = load i32, i32* %9, align 4
  %11 = icmp slt i32 %10, %8
  br i1 %11, label %22, label %12

12:                                               ; preds = %6, %2
  %13 = getelementptr inbounds %"class.views::SizeBounds", %"class.views::SizeBounds"* %1, i64 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0
  %14 = load i8, i8* %13, align 4, !range !2
  %15 = icmp eq i8 %14, 0
  br i1 %15, label %22, label %16

16:                                               ; preds = %12
  %17 = getelementptr inbounds %"class.gfx::Size", %"class.gfx::Size"* %0, i64 0, i32 1
  %18 = load i32, i32* %17, align 4
  %19 = getelementptr inbounds %"class.views::SizeBounds", %"class.views::SizeBounds"* %1, i64 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 1, i32 0
  %20 = load i32, i32* %19, align 4
  %21 = icmp sge i32 %20, %18
  br label %22

22:                                               ; preds = %6, %16, %12
  %23 = phi i1 [ false, %6 ], [ true, %12 ], [ %21, %16 ]
  ret i1 %23
}

declare void @_ZN4base6StrCatENS_4spanIKNS_16BasicStringPieceIcNSt3__111char_traitsIcEEEELm18446744073709551615EEE(%"class.std::__1::basic_string"* sret, i64, %"class.base::BasicStringPiece"*) local_unnamed_addr #2

; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(i8*) local_unnamed_addr #5

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nofree norecurse nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind readonly ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nounwind }
attributes #7 = { builtin nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{i8 0, i8 2}
!3 = !{!4}
!4 = distinct !{!4, !5, !"_ZN5viewsplERKNS_9SizeBoundES2_: argument 0"}
!5 = distinct !{!5, !"_ZN5viewsplERKNS_9SizeBoundES2_"}
!6 = !{!7}
!7 = distinct !{!7, !8, !"_ZN5viewsplERKNS_9SizeBoundES2_: argument 0"}
!8 = distinct !{!8, !"_ZN5viewsplERKNS_9SizeBoundES2_"}
!9 = !{!10}
!10 = distinct !{!10, !11, !"_ZNK5views9SizeBound8ToStringEv: argument 0"}
!11 = distinct !{!11, !"_ZNK5views9SizeBound8ToStringEv"}
!12 = !{!13}
!13 = distinct !{!13, !14, !"_ZNK5views9SizeBound8ToStringEv: argument 0"}
!14 = distinct !{!14, !"_ZNK5views9SizeBound8ToStringEv"}
