; ModuleID = '../../third_party/skia/src/core/SkCubicClipper.cpp'
source_filename = "../../third_party/skia/src/core/SkCubicClipper.cpp"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%class.SkCubicClipper = type { %struct.SkRect }
%struct.SkRect = type { float, float, float, float }
%struct.SkIRect = type { i32, i32, i32, i32 }
%struct.SkPoint = type { float, float }

@_ZN14SkCubicClipperC1Ev = hidden unnamed_addr alias void (%class.SkCubicClipper*), void (%class.SkCubicClipper*)* @_ZN14SkCubicClipperC2Ev

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN14SkCubicClipperC2Ev(%class.SkCubicClipper* nocapture) unnamed_addr #0 align 2 {
  %2 = bitcast %class.SkCubicClipper* %0 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 4 %2, i8 0, i64 16, i1 false) #6
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @_ZN14SkCubicClipper7setClipERK7SkIRect(%class.SkCubicClipper* nocapture, %struct.SkIRect* nocapture readonly dereferenceable(16)) local_unnamed_addr #1 align 2 {
  %3 = getelementptr inbounds %struct.SkIRect, %struct.SkIRect* %1, i64 0, i32 0
  %4 = load i32, i32* %3, align 4
  %5 = sitofp i32 %4 to float
  %6 = getelementptr inbounds %class.SkCubicClipper, %class.SkCubicClipper* %0, i64 0, i32 0, i32 0
  store float %5, float* %6, align 4
  %7 = getelementptr inbounds %struct.SkIRect, %struct.SkIRect* %1, i64 0, i32 1
  %8 = load i32, i32* %7, align 4
  %9 = sitofp i32 %8 to float
  %10 = getelementptr inbounds %class.SkCubicClipper, %class.SkCubicClipper* %0, i64 0, i32 0, i32 1
  store float %9, float* %10, align 4
  %11 = getelementptr inbounds %struct.SkIRect, %struct.SkIRect* %1, i64 0, i32 2
  %12 = load i32, i32* %11, align 4
  %13 = sitofp i32 %12 to float
  %14 = getelementptr inbounds %class.SkCubicClipper, %class.SkCubicClipper* %0, i64 0, i32 0, i32 2
  store float %13, float* %14, align 4
  %15 = getelementptr inbounds %struct.SkIRect, %struct.SkIRect* %1, i64 0, i32 3
  %16 = load i32, i32* %15, align 4
  %17 = sitofp i32 %16 to float
  %18 = getelementptr inbounds %class.SkCubicClipper, %class.SkCubicClipper* %0, i64 0, i32 0, i32 3
  store float %17, float* %18, align 4
  ret void
}

; Function Attrs: nofree nounwind ssp uwtable
define hidden zeroext i1 @_ZN14SkCubicClipper11ChopMonoAtYEPK7SkPointfPf(%struct.SkPoint* nocapture readonly, float, float* nocapture) local_unnamed_addr #2 align 2 {
  %4 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %0, i64 0, i32 1
  %5 = load float, float* %4, align 4
  %6 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %0, i64 1, i32 1
  %7 = load float, float* %6, align 4
  %8 = insertelement <2 x float> undef, float %7, i32 0
  %9 = insertelement <2 x float> %8, float %5, i32 1
  %10 = insertelement <2 x float> undef, float %1, i32 0
  %11 = shufflevector <2 x float> %10, <2 x float> undef, <2 x i32> zeroinitializer
  %12 = fsub <2 x float> %9, %11
  %13 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %0, i64 2, i32 1
  %14 = load float, float* %13, align 4
  %15 = fsub float %14, %1
  %16 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %0, i64 3, i32 1
  %17 = load float, float* %16, align 4
  %18 = fsub float %17, %1
  %19 = extractelement <2 x float> %12, i32 1
  %20 = fcmp olt float %19, 0.000000e+00
  br i1 %20, label %21, label %23

21:                                               ; preds = %3
  %22 = fcmp olt float %18, 0.000000e+00
  br i1 %22, label %68, label %28

23:                                               ; preds = %3
  %24 = fcmp ogt float %19, 0.000000e+00
  br i1 %24, label %25, label %27

25:                                               ; preds = %23
  %26 = fcmp ogt float %18, 0.000000e+00
  br i1 %26, label %68, label %28

27:                                               ; preds = %23
  store float 0.000000e+00, float* %2, align 4
  br label %68

28:                                               ; preds = %25, %21
  %29 = phi float [ 1.000000e+00, %21 ], [ 0.000000e+00, %25 ]
  %30 = phi float [ 0.000000e+00, %21 ], [ 1.000000e+00, %25 ]
  %31 = insertelement <2 x float> undef, float %15, i32 0
  %32 = shufflevector <2 x float> %31, <2 x float> %12, <2 x i32> <i32 0, i32 2>
  %33 = fsub <2 x float> %32, %12
  %34 = fsub float %18, %15
  br label %35

35:                                               ; preds = %58, %28
  %36 = phi float [ %29, %28 ], [ %60, %58 ]
  %37 = phi float [ %30, %28 ], [ %61, %58 ]
  %38 = fadd float %36, %37
  %39 = fmul float %38, 5.000000e-01
  %40 = insertelement <2 x float> undef, float %39, i32 0
  %41 = shufflevector <2 x float> %40, <2 x float> undef, <2 x i32> zeroinitializer
  %42 = fmul <2 x float> %33, %41
  %43 = fadd <2 x float> %12, %42
  %44 = fmul float %34, %39
  %45 = fadd float %15, %44
  %46 = insertelement <2 x float> undef, float %45, i32 0
  %47 = shufflevector <2 x float> %46, <2 x float> %43, <2 x i32> <i32 0, i32 2>
  %48 = fsub <2 x float> %47, %43
  %49 = fmul <2 x float> %41, %48
  %50 = fadd <2 x float> %43, %49
  %51 = extractelement <2 x float> %50, i32 0
  %52 = extractelement <2 x float> %50, i32 1
  %53 = fsub float %51, %52
  %54 = fmul float %39, %53
  %55 = fadd float %52, %54
  %56 = fcmp oeq float %55, 0.000000e+00
  br i1 %56, label %57, label %58

57:                                               ; preds = %35
  store float %39, float* %2, align 4
  br label %68

58:                                               ; preds = %35
  %59 = fcmp olt float %55, 0.000000e+00
  %60 = select i1 %59, float %36, float %39
  %61 = select i1 %59, float %39, float %37
  %62 = fsub float %60, %61
  %63 = tail call float @llvm.fabs.f32(float %62)
  %64 = fcmp ugt float %63, 0x3EF0000000000000
  br i1 %64, label %35, label %65

65:                                               ; preds = %58
  %66 = fadd float %61, %60
  %67 = fmul float %66, 5.000000e-01
  store float %67, float* %2, align 4
  br label %68

68:                                               ; preds = %57, %65, %25, %21, %27
  %69 = phi i1 [ true, %27 ], [ false, %21 ], [ false, %25 ], [ true, %57 ], [ true, %65 ]
  ret i1 %69
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #3

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #3

; Function Attrs: nounwind readnone speculatable
declare float @llvm.fabs.f32(float) #4

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZN14SkCubicClipper9clipCubicEPK7SkPointPS0_(%class.SkCubicClipper* nocapture readonly, %struct.SkPoint* nocapture readonly, %struct.SkPoint*) local_unnamed_addr #0 align 2 {
  %4 = alloca [7 x %struct.SkPoint], align 16
  %5 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %1, i64 0, i32 1
  %6 = load float, float* %5, align 4
  %7 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %1, i64 3, i32 1
  %8 = load float, float* %7, align 4
  %9 = fcmp ogt float %6, %8
  br i1 %9, label %10, label %32

10:                                               ; preds = %3
  %11 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %1, i64 3
  %12 = bitcast %struct.SkPoint* %11 to i64*
  %13 = bitcast %struct.SkPoint* %2 to i64*
  %14 = load i64, i64* %12, align 4
  store i64 %14, i64* %13, align 4
  %15 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %1, i64 2
  %16 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %2, i64 1
  %17 = bitcast %struct.SkPoint* %15 to i64*
  %18 = bitcast %struct.SkPoint* %16 to i64*
  %19 = load i64, i64* %17, align 4
  store i64 %19, i64* %18, align 4
  %20 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %1, i64 1
  %21 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %2, i64 2
  %22 = bitcast %struct.SkPoint* %20 to i64*
  %23 = bitcast %struct.SkPoint* %21 to i64*
  %24 = load i64, i64* %22, align 4
  store i64 %24, i64* %23, align 4
  %25 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %2, i64 3
  %26 = bitcast %struct.SkPoint* %1 to i64*
  %27 = bitcast %struct.SkPoint* %25 to i64*
  %28 = load i64, i64* %26, align 4
  store i64 %28, i64* %27, align 4
  %29 = lshr i64 %28, 32
  %30 = trunc i64 %29 to i32
  %31 = bitcast i32 %30 to float
  br label %37

32:                                               ; preds = %3
  %33 = bitcast %struct.SkPoint* %2 to i8*
  %34 = bitcast %struct.SkPoint* %1 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %33, i8* align 4 %34, i64 32, i1 false)
  %35 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %2, i64 3, i32 1
  %36 = load float, float* %35, align 4
  br label %37

37:                                               ; preds = %32, %10
  %38 = phi float [ %31, %10 ], [ %36, %32 ]
  %39 = phi i1 [ true, %10 ], [ false, %32 ]
  %40 = getelementptr inbounds %class.SkCubicClipper, %class.SkCubicClipper* %0, i64 0, i32 0, i32 1
  %41 = load float, float* %40, align 4
  %42 = getelementptr inbounds %class.SkCubicClipper, %class.SkCubicClipper* %0, i64 0, i32 0, i32 3
  %43 = load float, float* %42, align 4
  %44 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %2, i64 3
  %45 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %2, i64 3, i32 1
  %46 = fcmp ugt float %38, %41
  br i1 %46, label %47, label %217

47:                                               ; preds = %37
  %48 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %2, i64 0, i32 1
  %49 = load float, float* %48, align 4
  %50 = fcmp ult float %49, %43
  br i1 %50, label %51, label %217

51:                                               ; preds = %47
  %52 = bitcast [7 x %struct.SkPoint]* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 56, i8* nonnull %52) #6
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %52, i8 -1, i64 56, i1 false)
  %53 = fcmp olt float %49, %41
  br i1 %53, label %54, label %130

54:                                               ; preds = %51
  %55 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %2, i64 1, i32 1
  %56 = load float, float* %55, align 4
  %57 = insertelement <2 x float> undef, float %56, i32 0
  %58 = insertelement <2 x float> %57, float %49, i32 1
  %59 = insertelement <2 x float> undef, float %41, i32 0
  %60 = shufflevector <2 x float> %59, <2 x float> undef, <2 x i32> zeroinitializer
  %61 = fsub <2 x float> %58, %60
  %62 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %2, i64 2, i32 1
  %63 = load float, float* %62, align 4
  %64 = fsub float %63, %41
  %65 = fsub float %38, %41
  %66 = extractelement <2 x float> %61, i32 1
  %67 = fcmp olt float %66, 0.000000e+00
  br i1 %67, label %68, label %70

68:                                               ; preds = %54
  %69 = fcmp olt float %65, 0.000000e+00
  br i1 %69, label %130, label %74

70:                                               ; preds = %54
  %71 = fcmp ogt float %66, 0.000000e+00
  br i1 %71, label %72, label %113

72:                                               ; preds = %70
  %73 = fcmp ogt float %65, 0.000000e+00
  br i1 %73, label %130, label %74

74:                                               ; preds = %72, %68
  %75 = phi float [ 1.000000e+00, %68 ], [ 0.000000e+00, %72 ]
  %76 = phi float [ 0.000000e+00, %68 ], [ 1.000000e+00, %72 ]
  %77 = insertelement <2 x float> undef, float %64, i32 0
  %78 = shufflevector <2 x float> %77, <2 x float> %61, <2 x i32> <i32 0, i32 2>
  %79 = fsub <2 x float> %78, %61
  %80 = fsub float %65, %64
  br label %81

81:                                               ; preds = %103, %74
  %82 = phi float [ %75, %74 ], [ %105, %103 ]
  %83 = phi float [ %76, %74 ], [ %106, %103 ]
  %84 = fadd float %82, %83
  %85 = fmul float %84, 5.000000e-01
  %86 = insertelement <2 x float> undef, float %85, i32 0
  %87 = shufflevector <2 x float> %86, <2 x float> undef, <2 x i32> zeroinitializer
  %88 = fmul <2 x float> %79, %87
  %89 = fadd <2 x float> %61, %88
  %90 = fmul float %80, %85
  %91 = fadd float %64, %90
  %92 = insertelement <2 x float> undef, float %91, i32 0
  %93 = shufflevector <2 x float> %92, <2 x float> %89, <2 x i32> <i32 0, i32 2>
  %94 = fsub <2 x float> %93, %89
  %95 = fmul <2 x float> %87, %94
  %96 = fadd <2 x float> %89, %95
  %97 = extractelement <2 x float> %96, i32 0
  %98 = extractelement <2 x float> %96, i32 1
  %99 = fsub float %97, %98
  %100 = fmul float %85, %99
  %101 = fadd float %98, %100
  %102 = fcmp oeq float %101, 0.000000e+00
  br i1 %102, label %113, label %103

103:                                              ; preds = %81
  %104 = fcmp olt float %101, 0.000000e+00
  %105 = select i1 %104, float %82, float %85
  %106 = select i1 %104, float %85, float %83
  %107 = fsub float %105, %106
  %108 = tail call float @llvm.fabs.f32(float %107) #6
  %109 = fcmp ugt float %108, 0x3EF0000000000000
  br i1 %109, label %81, label %110

110:                                              ; preds = %103
  %111 = fadd float %106, %105
  %112 = fmul float %111, 5.000000e-01
  br label %113

113:                                              ; preds = %81, %110, %70
  %114 = phi float [ 0.000000e+00, %70 ], [ %112, %110 ], [ %85, %81 ]
  %115 = getelementptr inbounds [7 x %struct.SkPoint], [7 x %struct.SkPoint]* %4, i64 0, i64 0
  call void @_Z13SkChopCubicAtPK7SkPointPS_f(%struct.SkPoint* %2, %struct.SkPoint* nonnull %115, float %114) #6
  %116 = getelementptr inbounds [7 x %struct.SkPoint], [7 x %struct.SkPoint]* %4, i64 0, i64 3
  %117 = bitcast %struct.SkPoint* %116 to <2 x i64>*
  %118 = load <2 x i64>, <2 x i64>* %117, align 8
  %119 = bitcast %struct.SkPoint* %2 to <2 x i64>*
  store <2 x i64> %118, <2 x i64>* %119, align 4
  %120 = getelementptr inbounds [7 x %struct.SkPoint], [7 x %struct.SkPoint]* %4, i64 0, i64 5
  %121 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %2, i64 2
  %122 = bitcast %struct.SkPoint* %120 to i64*
  %123 = bitcast %struct.SkPoint* %121 to i64*
  %124 = load i64, i64* %122, align 8
  store i64 %124, i64* %123, align 4
  %125 = extractelement <2 x i64> %118, i32 0
  %126 = lshr i64 %125, 32
  %127 = trunc i64 %126 to i32
  %128 = bitcast i32 %127 to float
  %129 = load float, float* %45, align 4
  br label %130

130:                                              ; preds = %72, %68, %113, %51
  %131 = phi float [ %38, %72 ], [ %38, %68 ], [ %129, %113 ], [ %38, %51 ]
  %132 = phi float [ %49, %72 ], [ %49, %68 ], [ %128, %113 ], [ %49, %51 ]
  %133 = fcmp ogt float %131, %43
  br i1 %133, label %134, label %205

134:                                              ; preds = %130
  %135 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %2, i64 1, i32 1
  %136 = load float, float* %135, align 4
  %137 = insertelement <2 x float> undef, float %136, i32 0
  %138 = insertelement <2 x float> %137, float %132, i32 1
  %139 = insertelement <2 x float> undef, float %43, i32 0
  %140 = shufflevector <2 x float> %139, <2 x float> undef, <2 x i32> zeroinitializer
  %141 = fsub <2 x float> %138, %140
  %142 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %2, i64 2, i32 1
  %143 = load float, float* %142, align 4
  %144 = fsub float %143, %43
  %145 = fsub float %131, %43
  %146 = extractelement <2 x float> %141, i32 1
  %147 = fcmp olt float %146, 0.000000e+00
  br i1 %147, label %148, label %150

148:                                              ; preds = %134
  %149 = fcmp olt float %145, 0.000000e+00
  br i1 %149, label %205, label %154

150:                                              ; preds = %134
  %151 = fcmp ogt float %146, 0.000000e+00
  br i1 %151, label %152, label %193

152:                                              ; preds = %150
  %153 = fcmp ogt float %145, 0.000000e+00
  br i1 %153, label %205, label %154

154:                                              ; preds = %152, %148
  %155 = phi float [ 1.000000e+00, %148 ], [ 0.000000e+00, %152 ]
  %156 = phi float [ 0.000000e+00, %148 ], [ 1.000000e+00, %152 ]
  %157 = insertelement <2 x float> undef, float %144, i32 0
  %158 = shufflevector <2 x float> %157, <2 x float> %141, <2 x i32> <i32 0, i32 2>
  %159 = fsub <2 x float> %158, %141
  %160 = fsub float %145, %144
  br label %161

161:                                              ; preds = %183, %154
  %162 = phi float [ %155, %154 ], [ %185, %183 ]
  %163 = phi float [ %156, %154 ], [ %186, %183 ]
  %164 = fadd float %162, %163
  %165 = fmul float %164, 5.000000e-01
  %166 = insertelement <2 x float> undef, float %165, i32 0
  %167 = shufflevector <2 x float> %166, <2 x float> undef, <2 x i32> zeroinitializer
  %168 = fmul <2 x float> %159, %167
  %169 = fadd <2 x float> %141, %168
  %170 = fmul float %160, %165
  %171 = fadd float %144, %170
  %172 = insertelement <2 x float> undef, float %171, i32 0
  %173 = shufflevector <2 x float> %172, <2 x float> %169, <2 x i32> <i32 0, i32 2>
  %174 = fsub <2 x float> %173, %169
  %175 = fmul <2 x float> %167, %174
  %176 = fadd <2 x float> %169, %175
  %177 = extractelement <2 x float> %176, i32 0
  %178 = extractelement <2 x float> %176, i32 1
  %179 = fsub float %177, %178
  %180 = fmul float %165, %179
  %181 = fadd float %178, %180
  %182 = fcmp oeq float %181, 0.000000e+00
  br i1 %182, label %193, label %183

183:                                              ; preds = %161
  %184 = fcmp olt float %181, 0.000000e+00
  %185 = select i1 %184, float %162, float %165
  %186 = select i1 %184, float %165, float %163
  %187 = fsub float %185, %186
  %188 = call float @llvm.fabs.f32(float %187) #6
  %189 = fcmp ugt float %188, 0x3EF0000000000000
  br i1 %189, label %161, label %190

190:                                              ; preds = %183
  %191 = fadd float %186, %185
  %192 = fmul float %191, 5.000000e-01
  br label %193

193:                                              ; preds = %161, %190, %150
  %194 = phi float [ 0.000000e+00, %150 ], [ %192, %190 ], [ %165, %161 ]
  %195 = getelementptr inbounds [7 x %struct.SkPoint], [7 x %struct.SkPoint]* %4, i64 0, i64 0
  call void @_Z13SkChopCubicAtPK7SkPointPS_f(%struct.SkPoint* %2, %struct.SkPoint* nonnull %195, float %194) #6
  %196 = getelementptr inbounds [7 x %struct.SkPoint], [7 x %struct.SkPoint]* %4, i64 0, i64 1
  %197 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %2, i64 1
  %198 = bitcast %struct.SkPoint* %196 to <2 x i64>*
  %199 = load <2 x i64>, <2 x i64>* %198, align 8
  %200 = bitcast %struct.SkPoint* %197 to <2 x i64>*
  store <2 x i64> %199, <2 x i64>* %200, align 4
  %201 = getelementptr inbounds [7 x %struct.SkPoint], [7 x %struct.SkPoint]* %4, i64 0, i64 3
  %202 = bitcast %struct.SkPoint* %201 to i64*
  %203 = bitcast %struct.SkPoint* %44 to i64*
  %204 = load i64, i64* %202, align 8
  store i64 %204, i64* %203, align 4
  br label %205

205:                                              ; preds = %152, %148, %193, %130
  br i1 %39, label %206, label %216

206:                                              ; preds = %205
  %207 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %2, i64 2
  %208 = bitcast %struct.SkPoint* %207 to <2 x i64>*
  %209 = load <2 x i64>, <2 x i64>* %208, align 4
  %210 = shufflevector <2 x i64> %209, <2 x i64> undef, <2 x i32> <i32 1, i32 0>
  %211 = bitcast %struct.SkPoint* %2 to <4 x i32>*
  %212 = load <4 x i32>, <4 x i32>* %211, align 4
  %213 = shufflevector <4 x i32> %212, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 0, i32 1>
  %214 = bitcast %struct.SkPoint* %2 to <2 x i64>*
  store <2 x i64> %210, <2 x i64>* %214, align 4
  %215 = bitcast %struct.SkPoint* %207 to <4 x i32>*
  store <4 x i32> %213, <4 x i32>* %215, align 4
  br label %216

216:                                              ; preds = %206, %205
  call void @llvm.lifetime.end.p0i8(i64 56, i8* nonnull %52) #6
  br label %217

217:                                              ; preds = %37, %47, %216
  %218 = phi i1 [ true, %216 ], [ false, %47 ], [ false, %37 ]
  ret i1 %218
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #3

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #3

declare void @_Z13SkChopCubicAtPK7SkPointPS_f(%struct.SkPoint*, %struct.SkPoint*, float) local_unnamed_addr #5

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nofree norecurse nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nofree nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { argmemonly nounwind }
attributes #4 = { nounwind readnone speculatable }
attributes #5 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
