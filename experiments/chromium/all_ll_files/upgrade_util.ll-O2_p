; ModuleID = '../../chrome/browser/first_run/upgrade_util.cc'
source_filename = "../../chrome/browser/first_run/upgrade_util.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"class.base::RepeatingCallback" = type { %"class.base::internal::CallbackBaseCopyable" }
%"class.base::internal::CallbackBaseCopyable" = type { %"class.base::internal::CallbackBase" }
%"class.base::internal::CallbackBase" = type { %class.scoped_refptr }
%class.scoped_refptr = type { %"class.base::internal::BindStateBase"* }
%"class.base::internal::BindStateBase" = type { %"class.base::RefCountedThreadSafe", void ()*, void (%"class.base::internal::BindStateBase"*)*, i1 (%"class.base::internal::BindStateBase"*, i32)* }
%"class.base::RefCountedThreadSafe" = type { %"class.base::subtle::RefCountedThreadSafeBase" }
%"class.base::subtle::RefCountedThreadSafeBase" = type { %"class.base::AtomicRefCount" }
%"class.base::AtomicRefCount" = type { %"struct.std::__1::atomic" }
%"struct.std::__1::atomic" = type { %"struct.std::__1::__atomic_base" }
%"struct.std::__1::__atomic_base" = type { %"struct.std::__1::__atomic_base.14" }
%"struct.std::__1::__atomic_base.14" = type { %"struct.std::__1::__cxx_atomic_impl" }
%"struct.std::__1::__cxx_atomic_impl" = type { %"struct.std::__1::__cxx_atomic_base_impl" }
%"struct.std::__1::__cxx_atomic_base_impl" = type { i32 }
%"class.base::CommandLine" = type { %"class.std::__1::vector", %"class.std::__1::map", i64 }
%"class.std::__1::vector" = type { %"class.std::__1::__vector_base" }
%"class.std::__1::__vector_base" = type { %"class.std::__1::basic_string"*, %"class.std::__1::basic_string"*, %"class.std::__1::__compressed_pair.1" }
%"class.std::__1::basic_string" = type { %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" = type { %union.anon }
%union.anon = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" = type { i8*, i64, i64 }
%"class.std::__1::__compressed_pair.1" = type { %"struct.std::__1::__compressed_pair_elem.2" }
%"struct.std::__1::__compressed_pair_elem.2" = type { %"class.std::__1::basic_string"* }
%"class.std::__1::map" = type { %"class.std::__1::__tree" }
%"class.std::__1::__tree" = type { %"class.std::__1::__tree_end_node"*, %"class.std::__1::__compressed_pair.6", %"class.std::__1::__compressed_pair.11" }
%"class.std::__1::__tree_end_node" = type { %"class.std::__1::__tree_node_base"* }
%"class.std::__1::__tree_node_base" = type opaque
%"class.std::__1::__compressed_pair.6" = type { %"struct.std::__1::__compressed_pair_elem.7" }
%"struct.std::__1::__compressed_pair_elem.7" = type { %"class.std::__1::__tree_end_node" }
%"class.std::__1::__compressed_pair.11" = type { %"struct.std::__1::__compressed_pair_elem.12" }
%"struct.std::__1::__compressed_pair_elem.12" = type { i64 }

@_ZN12_GLOBAL__N_144relaunch_chrome_browser_callback_for_testingE = internal unnamed_addr global %"class.base::RepeatingCallback"* null, align 8
@_ZN12_GLOBAL__N_112command_lineE = internal unnamed_addr global %"class.base::CommandLine"* null, align 8

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZN12upgrade_util21RelaunchChromeBrowserERKN4base11CommandLineE(%"class.base::CommandLine"* dereferenceable(56)) local_unnamed_addr #0 {
  %2 = load %"class.base::RepeatingCallback"*, %"class.base::RepeatingCallback"** @_ZN12_GLOBAL__N_144relaunch_chrome_browser_callback_for_testingE, align 8
  %3 = icmp eq %"class.base::RepeatingCallback"* %2, null
  br i1 %3, label %11, label %4

4:                                                ; preds = %1
  %5 = getelementptr inbounds %"class.base::RepeatingCallback", %"class.base::RepeatingCallback"* %2, i64 0, i32 0, i32 0, i32 0, i32 0
  %6 = load %"class.base::internal::BindStateBase"*, %"class.base::internal::BindStateBase"** %5, align 8
  %7 = getelementptr inbounds %"class.base::internal::BindStateBase", %"class.base::internal::BindStateBase"* %6, i64 0, i32 1
  %8 = bitcast void ()** %7 to i1 (%"class.base::internal::BindStateBase"*, %"class.base::CommandLine"*)**
  %9 = load i1 (%"class.base::internal::BindStateBase"*, %"class.base::CommandLine"*)*, i1 (%"class.base::internal::BindStateBase"*, %"class.base::CommandLine"*)** %8, align 8
  %10 = tail call zeroext i1 %9(%"class.base::internal::BindStateBase"* %6, %"class.base::CommandLine"* dereferenceable(56) %0) #5
  br label %13

11:                                               ; preds = %1
  %12 = tail call zeroext i1 @_ZN12upgrade_util25RelaunchChromeBrowserImplERKN4base11CommandLineE(%"class.base::CommandLine"* dereferenceable(56) %0) #5
  br label %13

13:                                               ; preds = %11, %4
  %14 = phi i1 [ %10, %4 ], [ %12, %11 ]
  ret i1 %14
}

declare zeroext i1 @_ZN12upgrade_util25RelaunchChromeBrowserImplERKN4base11CommandLineE(%"class.base::CommandLine"* dereferenceable(56)) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN12upgrade_util17SetNewCommandLineENSt3__110unique_ptrIN4base11CommandLineENS0_14default_deleteIS3_EEEE(%"class.base::CommandLine"*) local_unnamed_addr #0 {
  %2 = load %"class.base::CommandLine"*, %"class.base::CommandLine"** @_ZN12_GLOBAL__N_112command_lineE, align 8
  %3 = icmp eq %"class.base::CommandLine"* %2, null
  br i1 %3, label %6, label %4

4:                                                ; preds = %1
  tail call void @_ZN4base11CommandLineD1Ev(%"class.base::CommandLine"* nonnull %2) #5
  %5 = bitcast %"class.base::CommandLine"* %2 to i8*
  tail call void @_ZdlPv(i8* %5) #6
  br label %6

6:                                                ; preds = %1, %4
  store %"class.base::CommandLine"* %0, %"class.base::CommandLine"** @_ZN12_GLOBAL__N_112command_lineE, align 8
  ret void
}

; Function Attrs: nounwind
declare void @_ZN4base11CommandLineD1Ev(%"class.base::CommandLine"*) unnamed_addr #2

; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(i8*) local_unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN12upgrade_util47RelaunchChromeBrowserWithNewCommandLineIfNeededEv() local_unnamed_addr #0 {
  %1 = load %"class.base::CommandLine"*, %"class.base::CommandLine"** @_ZN12_GLOBAL__N_112command_lineE, align 8
  %2 = icmp eq %"class.base::CommandLine"* %1, null
  br i1 %2, label %21, label %3

3:                                                ; preds = %0
  %4 = load %"class.base::RepeatingCallback"*, %"class.base::RepeatingCallback"** @_ZN12_GLOBAL__N_144relaunch_chrome_browser_callback_for_testingE, align 8
  %5 = icmp eq %"class.base::RepeatingCallback"* %4, null
  br i1 %5, label %13, label %6

6:                                                ; preds = %3
  %7 = getelementptr inbounds %"class.base::RepeatingCallback", %"class.base::RepeatingCallback"* %4, i64 0, i32 0, i32 0, i32 0, i32 0
  %8 = load %"class.base::internal::BindStateBase"*, %"class.base::internal::BindStateBase"** %7, align 8
  %9 = getelementptr inbounds %"class.base::internal::BindStateBase", %"class.base::internal::BindStateBase"* %8, i64 0, i32 1
  %10 = bitcast void ()** %9 to i1 (%"class.base::internal::BindStateBase"*, %"class.base::CommandLine"*)**
  %11 = load i1 (%"class.base::internal::BindStateBase"*, %"class.base::CommandLine"*)*, i1 (%"class.base::internal::BindStateBase"*, %"class.base::CommandLine"*)** %10, align 8
  %12 = tail call zeroext i1 %11(%"class.base::internal::BindStateBase"* %8, %"class.base::CommandLine"* nonnull dereferenceable(56) %1) #5
  br label %15

13:                                               ; preds = %3
  %14 = tail call zeroext i1 @_ZN12upgrade_util25RelaunchChromeBrowserImplERKN4base11CommandLineE(%"class.base::CommandLine"* nonnull dereferenceable(56) %1) #5
  br label %15

15:                                               ; preds = %6, %13
  %16 = load %"class.base::CommandLine"*, %"class.base::CommandLine"** @_ZN12_GLOBAL__N_112command_lineE, align 8
  %17 = icmp eq %"class.base::CommandLine"* %16, null
  br i1 %17, label %20, label %18

18:                                               ; preds = %15
  tail call void @_ZN4base11CommandLineD1Ev(%"class.base::CommandLine"* nonnull %16) #5
  %19 = bitcast %"class.base::CommandLine"* %16 to i8*
  tail call void @_ZdlPv(i8* %19) #6
  br label %20

20:                                               ; preds = %18, %15
  store %"class.base::CommandLine"* null, %"class.base::CommandLine"** @_ZN12_GLOBAL__N_112command_lineE, align 8
  br label %21

21:                                               ; preds = %0, %20
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN12upgrade_util42SetRelaunchChromeBrowserCallbackForTestingEN4base17RepeatingCallbackIFbRKNS0_11CommandLineEEEE(%"class.base::RepeatingCallback"* noalias nocapture sret, %"class.base::RepeatingCallback"*) local_unnamed_addr #0 {
  %3 = getelementptr inbounds %"class.base::RepeatingCallback", %"class.base::RepeatingCallback"* %0, i64 0, i32 0, i32 0, i32 0, i32 0
  store %"class.base::internal::BindStateBase"* inttoptr (i64 -6148914691236517206 to %"class.base::internal::BindStateBase"*), %"class.base::internal::BindStateBase"** %3, align 8
  %4 = load %"class.base::RepeatingCallback"*, %"class.base::RepeatingCallback"** @_ZN12_GLOBAL__N_144relaunch_chrome_browser_callback_for_testingE, align 8
  %5 = icmp eq %"class.base::RepeatingCallback"* %4, null
  br i1 %5, label %11, label %6

6:                                                ; preds = %2
  %7 = getelementptr inbounds %"class.base::RepeatingCallback", %"class.base::RepeatingCallback"* %4, i64 0, i32 0, i32 0, i32 0, i32 0
  %8 = bitcast %"class.base::RepeatingCallback"* %4 to i64*
  %9 = load i64, i64* %8, align 8
  %10 = bitcast %"class.base::RepeatingCallback"* %0 to i64*
  store i64 %9, i64* %10, align 8
  br label %11

11:                                               ; preds = %2, %6
  %12 = phi %"class.base::internal::BindStateBase"** [ %7, %6 ], [ %3, %2 ]
  store %"class.base::internal::BindStateBase"* null, %"class.base::internal::BindStateBase"** %12, align 8
  %13 = ptrtoint %"class.base::RepeatingCallback"* %4 to i64
  %14 = getelementptr inbounds %"class.base::RepeatingCallback", %"class.base::RepeatingCallback"* %1, i64 0, i32 0, i32 0, i32 0, i32 0
  %15 = load %"class.base::internal::BindStateBase"*, %"class.base::internal::BindStateBase"** %14, align 8
  %16 = icmp eq %"class.base::internal::BindStateBase"* %15, null
  %17 = icmp ne %"class.base::RepeatingCallback"* %4, null
  br i1 %16, label %29, label %18

18:                                               ; preds = %11
  br i1 %17, label %23, label %19

19:                                               ; preds = %18
  %20 = tail call i8* @_Znwm(i64 8) #6
  %21 = bitcast i8* %20 to %"class.base::internal::BindStateBase"**
  store %"class.base::internal::BindStateBase"* null, %"class.base::internal::BindStateBase"** %21, align 8
  %22 = ptrtoint i8* %20 to i64
  br label %23

23:                                               ; preds = %19, %18
  %24 = phi i64 [ %13, %18 ], [ %22, %19 ]
  %25 = inttoptr i64 %24 to %"class.base::RepeatingCallback"*
  %26 = getelementptr inbounds %"class.base::RepeatingCallback", %"class.base::RepeatingCallback"* %25, i64 0, i32 0
  %27 = getelementptr inbounds %"class.base::RepeatingCallback", %"class.base::RepeatingCallback"* %1, i64 0, i32 0
  %28 = tail call dereferenceable(8) %"class.base::internal::CallbackBaseCopyable"* @_ZN4base8internal20CallbackBaseCopyableaSEOS1_(%"class.base::internal::CallbackBaseCopyable"* %26, %"class.base::internal::CallbackBaseCopyable"* dereferenceable(8) %27) #5
  br label %33

29:                                               ; preds = %11
  br i1 %17, label %30, label %33

30:                                               ; preds = %29
  %31 = getelementptr inbounds %"class.base::RepeatingCallback", %"class.base::RepeatingCallback"* %4, i64 0, i32 0, i32 0
  tail call void @_ZN4base8internal12CallbackBaseD2Ev(%"class.base::internal::CallbackBase"* nonnull %31) #5
  %32 = bitcast %"class.base::RepeatingCallback"* %4 to i8*
  tail call void @_ZdlPv(i8* %32) #6
  br label %33

33:                                               ; preds = %23, %30, %29
  %34 = phi i64 [ %24, %23 ], [ 0, %30 ], [ %13, %29 ]
  %35 = inttoptr i64 %34 to %"class.base::RepeatingCallback"*
  store %"class.base::RepeatingCallback"* %35, %"class.base::RepeatingCallback"** @_ZN12_GLOBAL__N_144relaunch_chrome_browser_callback_for_testingE, align 8
  ret void
}

; Function Attrs: nounwind
declare void @_ZN4base8internal12CallbackBaseD2Ev(%"class.base::internal::CallbackBase"*) unnamed_addr #2

; Function Attrs: nounwind
declare dereferenceable(8) %"class.base::internal::CallbackBaseCopyable"* @_ZN4base8internal20CallbackBaseCopyableaSEOS1_(%"class.base::internal::CallbackBaseCopyable"*, %"class.base::internal::CallbackBaseCopyable"* dereferenceable(8)) local_unnamed_addr #2

; Function Attrs: nobuiltin nofree
declare noalias nonnull i8* @_Znwm(i64) local_unnamed_addr #4

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nobuiltin nofree "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind }
attributes #6 = { builtin nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
