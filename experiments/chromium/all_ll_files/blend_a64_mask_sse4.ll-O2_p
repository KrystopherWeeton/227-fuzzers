; ModuleID = '../../third_party/libaom/source/libaom/aom_dsp/x86/blend_a64_mask_sse4.c'
source_filename = "../../third_party/libaom/source/libaom/aom_dsp/x86/blend_a64_mask_sse4.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.ConvolveParams = type { i32, i16*, i32, i32, i32, i32, i32, i32, i32, i32 }

@aom_blend_a64_mask_sse4_1.blend = internal unnamed_addr constant [3 x [2 x [2 x void (i8*, i32, i8*, i32, i8*, i32, i8*, i32, i32, i32)*]]] [[2 x [2 x void (i8*, i32, i8*, i32, i8*, i32, i8*, i32, i32, i32)*]] [[2 x void (i8*, i32, i8*, i32, i8*, i32, i8*, i32, i32, i32)*] [void (i8*, i32, i8*, i32, i8*, i32, i8*, i32, i32, i32)* @blend_a64_mask_w16n_sse4_1, void (i8*, i32, i8*, i32, i8*, i32, i8*, i32, i32, i32)* @blend_a64_mask_sy_w16n_sse4_1], [2 x void (i8*, i32, i8*, i32, i8*, i32, i8*, i32, i32, i32)*] [void (i8*, i32, i8*, i32, i8*, i32, i8*, i32, i32, i32)* @blend_a64_mask_sx_w16n_sse4_1, void (i8*, i32, i8*, i32, i8*, i32, i8*, i32, i32, i32)* @blend_a64_mask_sx_sy_w16n_sse4_1]], [2 x [2 x void (i8*, i32, i8*, i32, i8*, i32, i8*, i32, i32, i32)*]] [[2 x void (i8*, i32, i8*, i32, i8*, i32, i8*, i32, i32, i32)*] [void (i8*, i32, i8*, i32, i8*, i32, i8*, i32, i32, i32)* @blend_a64_mask_w4_sse4_1, void (i8*, i32, i8*, i32, i8*, i32, i8*, i32, i32, i32)* @blend_a64_mask_sy_w4_sse4_1], [2 x void (i8*, i32, i8*, i32, i8*, i32, i8*, i32, i32, i32)*] [void (i8*, i32, i8*, i32, i8*, i32, i8*, i32, i32, i32)* @blend_a64_mask_sx_w4_sse4_1, void (i8*, i32, i8*, i32, i8*, i32, i8*, i32, i32, i32)* @blend_a64_mask_sx_sy_w4_sse4_1]], [2 x [2 x void (i8*, i32, i8*, i32, i8*, i32, i8*, i32, i32, i32)*]] [[2 x void (i8*, i32, i8*, i32, i8*, i32, i8*, i32, i32, i32)*] [void (i8*, i32, i8*, i32, i8*, i32, i8*, i32, i32, i32)* @blend_a64_mask_w8_sse4_1, void (i8*, i32, i8*, i32, i8*, i32, i8*, i32, i32, i32)* @blend_a64_mask_sy_w8_sse4_1], [2 x void (i8*, i32, i8*, i32, i8*, i32, i8*, i32, i32, i32)*] [void (i8*, i32, i8*, i32, i8*, i32, i8*, i32, i32, i32)* @blend_a64_mask_sx_w8_sse4_1, void (i8*, i32, i8*, i32, i8*, i32, i8*, i32, i32, i32)* @blend_a64_mask_sx_sy_w8_sse4_1]]], align 16

; Function Attrs: nounwind ssp uwtable
define hidden void @aom_blend_a64_mask_sse4_1(i8*, i32, i8*, i32, i8*, i32, i8*, i32, i32, i32, i32, i32) local_unnamed_addr #0 {
  %13 = or i32 %9, %8
  %14 = and i32 %13, 3
  %15 = icmp eq i32 %14, 0
  br i1 %15, label %17, label %16, !prof !2

16:                                               ; preds = %12
  tail call void @aom_blend_a64_mask_c(i8* %0, i32 %1, i8* %2, i32 %3, i8* %4, i32 %5, i8* %6, i32 %7, i32 %8, i32 %9, i32 %10, i32 %11) #5
  br label %27

17:                                               ; preds = %12
  %18 = lshr i32 %8, 2
  %19 = and i32 %18, 3
  %20 = zext i32 %19 to i64
  %21 = icmp ne i32 %10, 0
  %22 = zext i1 %21 to i64
  %23 = icmp ne i32 %11, 0
  %24 = zext i1 %23 to i64
  %25 = getelementptr inbounds [3 x [2 x [2 x void (i8*, i32, i8*, i32, i8*, i32, i8*, i32, i32, i32)*]]], [3 x [2 x [2 x void (i8*, i32, i8*, i32, i8*, i32, i8*, i32, i32, i32)*]]]* @aom_blend_a64_mask_sse4_1.blend, i64 0, i64 %20, i64 %22, i64 %24
  %26 = load void (i8*, i32, i8*, i32, i8*, i32, i8*, i32, i32, i32)*, void (i8*, i32, i8*, i32, i8*, i32, i8*, i32, i32, i32)** %25, align 8
  tail call void %26(i8* %0, i32 %1, i8* %2, i32 %3, i8* %4, i32 %5, i8* %6, i32 %7, i32 %8, i32 %9) #5
  br label %27

27:                                               ; preds = %17, %16
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @blend_a64_mask_w16n_sse4_1(i8* nocapture, i32, i8* nocapture readonly, i32, i8* nocapture readonly, i32, i8* nocapture readonly, i32, i32, i32) #1 {
  %11 = zext i32 %1 to i64
  %12 = icmp sgt i32 %8, 0
  %13 = zext i32 %3 to i64
  %14 = zext i32 %5 to i64
  %15 = zext i32 %7 to i64
  %16 = sext i32 %8 to i64
  br label %17

17:                                               ; preds = %48, %10
  %18 = phi i8* [ %6, %10 ], [ %52, %48 ]
  %19 = phi i8* [ %4, %10 ], [ %51, %48 ]
  %20 = phi i8* [ %2, %10 ], [ %50, %48 ]
  %21 = phi i32 [ %9, %10 ], [ %53, %48 ]
  %22 = phi i8* [ %0, %10 ], [ %49, %48 ]
  br i1 %12, label %23, label %48

23:                                               ; preds = %17, %23
  %24 = phi i64 [ %46, %23 ], [ 0, %17 ]
  %25 = getelementptr inbounds i8, i8* %18, i64 %24
  %26 = bitcast i8* %25 to <16 x i8>*
  %27 = load <16 x i8>, <16 x i8>* %26, align 1
  %28 = sub <16 x i8> <i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64>, %27
  %29 = getelementptr inbounds i8, i8* %20, i64 %24
  %30 = getelementptr inbounds i8, i8* %19, i64 %24
  %31 = bitcast i8* %29 to <16 x i8>*
  %32 = load <16 x i8>, <16 x i8>* %31, align 1
  %33 = bitcast i8* %30 to <16 x i8>*
  %34 = load <16 x i8>, <16 x i8>* %33, align 1
  %35 = shufflevector <16 x i8> %32, <16 x i8> %34, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %36 = shufflevector <16 x i8> %27, <16 x i8> %28, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %37 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %35, <16 x i8> %36) #5
  %38 = shufflevector <16 x i8> %32, <16 x i8> %34, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %39 = shufflevector <16 x i8> %27, <16 x i8> %28, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %40 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %38, <16 x i8> %39) #5
  %41 = tail call <8 x i16> @llvm.x86.ssse3.pmul.hr.sw.128(<8 x i16> %37, <8 x i16> <i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512>) #5
  %42 = tail call <8 x i16> @llvm.x86.ssse3.pmul.hr.sw.128(<8 x i16> %40, <8 x i16> <i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512>) #5
  %43 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %41, <8 x i16> %42) #5
  %44 = getelementptr inbounds i8, i8* %22, i64 %24
  %45 = bitcast i8* %44 to <16 x i8>*
  store <16 x i8> %43, <16 x i8>* %45, align 1
  %46 = add nuw nsw i64 %24, 16
  %47 = icmp slt i64 %46, %16
  br i1 %47, label %23, label %48

48:                                               ; preds = %23, %17
  %49 = getelementptr inbounds i8, i8* %22, i64 %11
  %50 = getelementptr inbounds i8, i8* %20, i64 %13
  %51 = getelementptr inbounds i8, i8* %19, i64 %14
  %52 = getelementptr inbounds i8, i8* %18, i64 %15
  %53 = add nsw i32 %21, -1
  %54 = icmp eq i32 %53, 0
  br i1 %54, label %55, label %17

55:                                               ; preds = %48
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @blend_a64_mask_sy_w16n_sse4_1(i8* nocapture, i32, i8* nocapture readonly, i32, i8* nocapture readonly, i32, i8* nocapture readonly, i32, i32, i32) #1 {
  %11 = zext i32 %1 to i64
  %12 = icmp sgt i32 %8, 0
  %13 = zext i32 %7 to i64
  %14 = zext i32 %3 to i64
  %15 = zext i32 %5 to i64
  %16 = shl i32 %7, 1
  %17 = zext i32 %16 to i64
  %18 = sext i32 %8 to i64
  br label %19

19:                                               ; preds = %54, %10
  %20 = phi i8* [ %6, %10 ], [ %58, %54 ]
  %21 = phi i32 [ %9, %10 ], [ %59, %54 ]
  %22 = phi i8* [ %4, %10 ], [ %57, %54 ]
  %23 = phi i8* [ %2, %10 ], [ %56, %54 ]
  %24 = phi i8* [ %0, %10 ], [ %55, %54 ]
  br i1 %12, label %25, label %54

25:                                               ; preds = %19, %25
  %26 = phi i64 [ %52, %25 ], [ 0, %19 ]
  %27 = getelementptr inbounds i8, i8* %20, i64 %26
  %28 = bitcast i8* %27 to <16 x i8>*
  %29 = load <16 x i8>, <16 x i8>* %28, align 1
  %30 = getelementptr inbounds i8, i8* %27, i64 %13
  %31 = bitcast i8* %30 to <16 x i8>*
  %32 = load <16 x i8>, <16 x i8>* %31, align 1
  %33 = tail call <16 x i8> @llvm.x86.sse2.pavg.b(<16 x i8> %29, <16 x i8> %32) #5
  %34 = sub <16 x i8> <i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64>, %33
  %35 = getelementptr inbounds i8, i8* %23, i64 %26
  %36 = getelementptr inbounds i8, i8* %22, i64 %26
  %37 = bitcast i8* %35 to <16 x i8>*
  %38 = load <16 x i8>, <16 x i8>* %37, align 1
  %39 = bitcast i8* %36 to <16 x i8>*
  %40 = load <16 x i8>, <16 x i8>* %39, align 1
  %41 = shufflevector <16 x i8> %38, <16 x i8> %40, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %42 = shufflevector <16 x i8> %33, <16 x i8> %34, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %43 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %41, <16 x i8> %42) #5
  %44 = shufflevector <16 x i8> %38, <16 x i8> %40, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %45 = shufflevector <16 x i8> %33, <16 x i8> %34, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %46 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %44, <16 x i8> %45) #5
  %47 = tail call <8 x i16> @llvm.x86.ssse3.pmul.hr.sw.128(<8 x i16> %43, <8 x i16> <i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512>) #5
  %48 = tail call <8 x i16> @llvm.x86.ssse3.pmul.hr.sw.128(<8 x i16> %46, <8 x i16> <i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512>) #5
  %49 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %47, <8 x i16> %48) #5
  %50 = getelementptr inbounds i8, i8* %24, i64 %26
  %51 = bitcast i8* %50 to <16 x i8>*
  store <16 x i8> %49, <16 x i8>* %51, align 1
  %52 = add nuw nsw i64 %26, 16
  %53 = icmp slt i64 %52, %18
  br i1 %53, label %25, label %54

54:                                               ; preds = %25, %19
  %55 = getelementptr inbounds i8, i8* %24, i64 %11
  %56 = getelementptr inbounds i8, i8* %23, i64 %14
  %57 = getelementptr inbounds i8, i8* %22, i64 %15
  %58 = getelementptr inbounds i8, i8* %20, i64 %17
  %59 = add nsw i32 %21, -1
  %60 = icmp eq i32 %59, 0
  br i1 %60, label %61, label %19

61:                                               ; preds = %54
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @blend_a64_mask_sx_w16n_sse4_1(i8* nocapture, i32, i8* nocapture readonly, i32, i8* nocapture readonly, i32, i8* nocapture readonly, i32, i32, i32) #1 {
  %11 = zext i32 %1 to i64
  %12 = icmp sgt i32 %8, 0
  %13 = zext i32 %3 to i64
  %14 = zext i32 %5 to i64
  %15 = zext i32 %7 to i64
  %16 = sext i32 %8 to i64
  br label %17

17:                                               ; preds = %61, %10
  %18 = phi i32 [ %9, %10 ], [ %66, %61 ]
  %19 = phi i8* [ %6, %10 ], [ %65, %61 ]
  %20 = phi i8* [ %4, %10 ], [ %64, %61 ]
  %21 = phi i8* [ %2, %10 ], [ %63, %61 ]
  %22 = phi i8* [ %0, %10 ], [ %62, %61 ]
  br i1 %12, label %23, label %61

23:                                               ; preds = %17, %23
  %24 = phi i64 [ %59, %23 ], [ 0, %17 ]
  %25 = shl nuw nsw i64 %24, 1
  %26 = getelementptr inbounds i8, i8* %19, i64 %25
  %27 = bitcast i8* %26 to <16 x i8>*
  %28 = load <16 x i8>, <16 x i8>* %27, align 1
  %29 = getelementptr inbounds i8, i8* %26, i64 16
  %30 = bitcast i8* %29 to <16 x i8>*
  %31 = load <16 x i8>, <16 x i8>* %30, align 1
  %32 = shufflevector <16 x i8> %28, <16 x i8> undef, <16 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14, i32 1, i32 3, i32 5, i32 7, i32 9, i32 11, i32 13, i32 15>
  %33 = bitcast <16 x i8> %32 to <2 x i64>
  %34 = shufflevector <16 x i8> %31, <16 x i8> undef, <16 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14, i32 1, i32 3, i32 5, i32 7, i32 9, i32 11, i32 13, i32 15>
  %35 = bitcast <16 x i8> %34 to <2 x i64>
  %36 = shufflevector <2 x i64> %33, <2 x i64> %35, <2 x i32> <i32 0, i32 2>
  %37 = shufflevector <2 x i64> %33, <2 x i64> %35, <2 x i32> <i32 1, i32 3>
  %38 = bitcast <2 x i64> %36 to <16 x i8>
  %39 = bitcast <2 x i64> %37 to <16 x i8>
  %40 = tail call <16 x i8> @llvm.x86.sse2.pavg.b(<16 x i8> %38, <16 x i8> %39) #5
  %41 = sub <16 x i8> <i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64>, %40
  %42 = getelementptr inbounds i8, i8* %21, i64 %24
  %43 = getelementptr inbounds i8, i8* %20, i64 %24
  %44 = bitcast i8* %42 to <16 x i8>*
  %45 = load <16 x i8>, <16 x i8>* %44, align 1
  %46 = bitcast i8* %43 to <16 x i8>*
  %47 = load <16 x i8>, <16 x i8>* %46, align 1
  %48 = shufflevector <16 x i8> %45, <16 x i8> %47, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %49 = shufflevector <16 x i8> %40, <16 x i8> %41, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %50 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %48, <16 x i8> %49) #5
  %51 = shufflevector <16 x i8> %45, <16 x i8> %47, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %52 = shufflevector <16 x i8> %40, <16 x i8> %41, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %53 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %51, <16 x i8> %52) #5
  %54 = tail call <8 x i16> @llvm.x86.ssse3.pmul.hr.sw.128(<8 x i16> %50, <8 x i16> <i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512>) #5
  %55 = tail call <8 x i16> @llvm.x86.ssse3.pmul.hr.sw.128(<8 x i16> %53, <8 x i16> <i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512>) #5
  %56 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %54, <8 x i16> %55) #5
  %57 = getelementptr inbounds i8, i8* %22, i64 %24
  %58 = bitcast i8* %57 to <16 x i8>*
  store <16 x i8> %56, <16 x i8>* %58, align 1
  %59 = add nuw nsw i64 %24, 16
  %60 = icmp slt i64 %59, %16
  br i1 %60, label %23, label %61

61:                                               ; preds = %23, %17
  %62 = getelementptr inbounds i8, i8* %22, i64 %11
  %63 = getelementptr inbounds i8, i8* %21, i64 %13
  %64 = getelementptr inbounds i8, i8* %20, i64 %14
  %65 = getelementptr inbounds i8, i8* %19, i64 %15
  %66 = add nsw i32 %18, -1
  %67 = icmp eq i32 %66, 0
  br i1 %67, label %68, label %17

68:                                               ; preds = %61
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @blend_a64_mask_sx_sy_w16n_sse4_1(i8* nocapture, i32, i8* nocapture readonly, i32, i8* nocapture readonly, i32, i8* nocapture readonly, i32, i32, i32) #1 {
  %11 = zext i32 %1 to i64
  %12 = icmp sgt i32 %8, 0
  %13 = zext i32 %7 to i64
  %14 = zext i32 %3 to i64
  %15 = zext i32 %5 to i64
  %16 = shl i32 %7, 1
  %17 = zext i32 %16 to i64
  %18 = sext i32 %8 to i64
  br label %19

19:                                               ; preds = %81, %10
  %20 = phi i32 [ %9, %10 ], [ %86, %81 ]
  %21 = phi i8* [ %6, %10 ], [ %85, %81 ]
  %22 = phi i8* [ %4, %10 ], [ %84, %81 ]
  %23 = phi i8* [ %2, %10 ], [ %83, %81 ]
  %24 = phi i8* [ %0, %10 ], [ %82, %81 ]
  br i1 %12, label %25, label %81

25:                                               ; preds = %19
  %26 = getelementptr inbounds i8, i8* %21, i64 %13
  br label %27

27:                                               ; preds = %25, %27
  %28 = phi i64 [ 0, %25 ], [ %79, %27 ]
  %29 = shl nuw nsw i64 %28, 1
  %30 = getelementptr inbounds i8, i8* %21, i64 %29
  %31 = bitcast i8* %30 to <16 x i8>*
  %32 = load <16 x i8>, <16 x i8>* %31, align 1
  %33 = getelementptr inbounds i8, i8* %30, i64 16
  %34 = bitcast i8* %33 to <16 x i8>*
  %35 = load <16 x i8>, <16 x i8>* %34, align 1
  %36 = getelementptr inbounds i8, i8* %26, i64 %29
  %37 = bitcast i8* %36 to <16 x i8>*
  %38 = load <16 x i8>, <16 x i8>* %37, align 1
  %39 = getelementptr inbounds i8, i8* %36, i64 16
  %40 = bitcast i8* %39 to <16 x i8>*
  %41 = load <16 x i8>, <16 x i8>* %40, align 1
  %42 = add <16 x i8> %38, %32
  %43 = add <16 x i8> %41, %35
  %44 = shufflevector <16 x i8> %42, <16 x i8> <i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16>
  %45 = shufflevector <16 x i8> %43, <16 x i8> <i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16>
  %46 = bitcast <16 x i8> %42 to <8 x i16>
  %47 = and <8 x i16> %46, <i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255>
  %48 = bitcast <16 x i8> %44 to <8 x i16>
  %49 = and <8 x i16> %48, <i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255>
  %50 = add nuw nsw <8 x i16> %49, %47
  %51 = bitcast <16 x i8> %43 to <8 x i16>
  %52 = and <8 x i16> %51, <i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255>
  %53 = bitcast <16 x i8> %45 to <8 x i16>
  %54 = and <8 x i16> %53, <i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255>
  %55 = add nuw nsw <8 x i16> %54, %52
  %56 = lshr <8 x i16> %50, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %57 = tail call <8 x i16> @llvm.x86.sse2.pavg.w(<8 x i16> %56, <8 x i16> zeroinitializer) #5
  %58 = lshr <8 x i16> %55, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %59 = tail call <8 x i16> @llvm.x86.sse2.pavg.w(<8 x i16> %58, <8 x i16> zeroinitializer) #5
  %60 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %57, <8 x i16> %59) #5
  %61 = sub <16 x i8> <i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64>, %60
  %62 = getelementptr inbounds i8, i8* %23, i64 %28
  %63 = getelementptr inbounds i8, i8* %22, i64 %28
  %64 = bitcast i8* %62 to <16 x i8>*
  %65 = load <16 x i8>, <16 x i8>* %64, align 1
  %66 = bitcast i8* %63 to <16 x i8>*
  %67 = load <16 x i8>, <16 x i8>* %66, align 1
  %68 = shufflevector <16 x i8> %65, <16 x i8> %67, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %69 = shufflevector <16 x i8> %60, <16 x i8> %61, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %70 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %68, <16 x i8> %69) #5
  %71 = shufflevector <16 x i8> %65, <16 x i8> %67, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %72 = shufflevector <16 x i8> %60, <16 x i8> %61, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %73 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %71, <16 x i8> %72) #5
  %74 = tail call <8 x i16> @llvm.x86.ssse3.pmul.hr.sw.128(<8 x i16> %70, <8 x i16> <i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512>) #5
  %75 = tail call <8 x i16> @llvm.x86.ssse3.pmul.hr.sw.128(<8 x i16> %73, <8 x i16> <i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512>) #5
  %76 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %74, <8 x i16> %75) #5
  %77 = getelementptr inbounds i8, i8* %24, i64 %28
  %78 = bitcast i8* %77 to <16 x i8>*
  store <16 x i8> %76, <16 x i8>* %78, align 1
  %79 = add nuw nsw i64 %28, 16
  %80 = icmp slt i64 %79, %18
  br i1 %80, label %27, label %81

81:                                               ; preds = %27, %19
  %82 = getelementptr inbounds i8, i8* %24, i64 %11
  %83 = getelementptr inbounds i8, i8* %23, i64 %14
  %84 = getelementptr inbounds i8, i8* %22, i64 %15
  %85 = getelementptr inbounds i8, i8* %21, i64 %17
  %86 = add nsw i32 %20, -1
  %87 = icmp eq i32 %86, 0
  br i1 %87, label %88, label %19

88:                                               ; preds = %81
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @blend_a64_mask_w4_sse4_1(i8* nocapture, i32, i8* nocapture readonly, i32, i8* nocapture readonly, i32, i8* nocapture readonly, i32, i32, i32) #1 {
  %11 = zext i32 %1 to i64
  %12 = zext i32 %3 to i64
  %13 = zext i32 %5 to i64
  %14 = zext i32 %7 to i64
  br label %15

15:                                               ; preds = %15, %10
  %16 = phi i8* [ %6, %10 ], [ %45, %15 ]
  %17 = phi i8* [ %4, %10 ], [ %44, %15 ]
  %18 = phi i8* [ %2, %10 ], [ %43, %15 ]
  %19 = phi i32 [ %9, %10 ], [ %46, %15 ]
  %20 = phi i8* [ %0, %10 ], [ %42, %15 ]
  %21 = bitcast i8* %16 to i32*
  %22 = load i32, i32* %21, align 1
  %23 = insertelement <4 x i32> <i32 undef, i32 0, i32 0, i32 0>, i32 %22, i32 0
  %24 = bitcast <4 x i32> %23 to <16 x i8>
  %25 = sub <16 x i8> <i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, %24
  %26 = bitcast i8* %18 to i32*
  %27 = load i32, i32* %26, align 1
  %28 = insertelement <4 x i32> <i32 undef, i32 0, i32 undef, i32 undef>, i32 %27, i32 0
  %29 = bitcast i8* %17 to i32*
  %30 = load i32, i32* %29, align 1
  %31 = insertelement <4 x i32> <i32 undef, i32 0, i32 undef, i32 undef>, i32 %30, i32 0
  %32 = bitcast <4 x i32> %28 to <16 x i8>
  %33 = bitcast <4 x i32> %31 to <16 x i8>
  %34 = shufflevector <16 x i8> %32, <16 x i8> %33, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %35 = shufflevector <16 x i8> %24, <16 x i8> %25, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %36 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %34, <16 x i8> %35) #5
  %37 = tail call <8 x i16> @llvm.x86.ssse3.pmul.hr.sw.128(<8 x i16> %36, <8 x i16> <i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512>) #5
  %38 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %37, <8 x i16> undef) #5
  %39 = bitcast <16 x i8> %38 to <4 x i32>
  %40 = extractelement <4 x i32> %39, i32 0
  %41 = bitcast i8* %20 to i32*
  store i32 %40, i32* %41, align 1
  %42 = getelementptr inbounds i8, i8* %20, i64 %11
  %43 = getelementptr inbounds i8, i8* %18, i64 %12
  %44 = getelementptr inbounds i8, i8* %17, i64 %13
  %45 = getelementptr inbounds i8, i8* %16, i64 %14
  %46 = add nsw i32 %19, -1
  %47 = icmp eq i32 %46, 0
  br i1 %47, label %48, label %15

48:                                               ; preds = %15
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @blend_a64_mask_sy_w4_sse4_1(i8* nocapture, i32, i8* nocapture readonly, i32, i8* nocapture readonly, i32, i8* nocapture readonly, i32, i32, i32) #1 {
  %11 = zext i32 %7 to i64
  %12 = zext i32 %1 to i64
  %13 = zext i32 %3 to i64
  %14 = zext i32 %5 to i64
  %15 = shl i32 %7, 1
  %16 = zext i32 %15 to i64
  br label %17

17:                                               ; preds = %17, %10
  %18 = phi i8* [ %6, %10 ], [ %53, %17 ]
  %19 = phi i32 [ %9, %10 ], [ %54, %17 ]
  %20 = phi i8* [ %4, %10 ], [ %52, %17 ]
  %21 = phi i8* [ %2, %10 ], [ %51, %17 ]
  %22 = phi i8* [ %0, %10 ], [ %50, %17 ]
  %23 = bitcast i8* %18 to i32*
  %24 = load i32, i32* %23, align 1
  %25 = insertelement <4 x i32> <i32 undef, i32 0, i32 0, i32 0>, i32 %24, i32 0
  %26 = getelementptr inbounds i8, i8* %18, i64 %11
  %27 = bitcast i8* %26 to i32*
  %28 = load i32, i32* %27, align 1
  %29 = insertelement <4 x i32> <i32 undef, i32 0, i32 0, i32 0>, i32 %28, i32 0
  %30 = bitcast <4 x i32> %25 to <16 x i8>
  %31 = bitcast <4 x i32> %29 to <16 x i8>
  %32 = tail call <16 x i8> @llvm.x86.sse2.pavg.b(<16 x i8> %30, <16 x i8> %31) #5
  %33 = sub <16 x i8> <i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, %32
  %34 = bitcast i8* %21 to i32*
  %35 = load i32, i32* %34, align 1
  %36 = insertelement <4 x i32> <i32 undef, i32 0, i32 undef, i32 undef>, i32 %35, i32 0
  %37 = bitcast i8* %20 to i32*
  %38 = load i32, i32* %37, align 1
  %39 = insertelement <4 x i32> <i32 undef, i32 0, i32 undef, i32 undef>, i32 %38, i32 0
  %40 = bitcast <4 x i32> %36 to <16 x i8>
  %41 = bitcast <4 x i32> %39 to <16 x i8>
  %42 = shufflevector <16 x i8> %40, <16 x i8> %41, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %43 = shufflevector <16 x i8> %32, <16 x i8> %33, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %44 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %42, <16 x i8> %43) #5
  %45 = tail call <8 x i16> @llvm.x86.ssse3.pmul.hr.sw.128(<8 x i16> %44, <8 x i16> <i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512>) #5
  %46 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %45, <8 x i16> undef) #5
  %47 = bitcast <16 x i8> %46 to <4 x i32>
  %48 = extractelement <4 x i32> %47, i32 0
  %49 = bitcast i8* %22 to i32*
  store i32 %48, i32* %49, align 1
  %50 = getelementptr inbounds i8, i8* %22, i64 %12
  %51 = getelementptr inbounds i8, i8* %21, i64 %13
  %52 = getelementptr inbounds i8, i8* %20, i64 %14
  %53 = getelementptr inbounds i8, i8* %18, i64 %16
  %54 = add nsw i32 %19, -1
  %55 = icmp eq i32 %54, 0
  br i1 %55, label %56, label %17

56:                                               ; preds = %17
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @blend_a64_mask_sx_w4_sse4_1(i8* nocapture, i32, i8* nocapture readonly, i32, i8* nocapture readonly, i32, i8* nocapture readonly, i32, i32, i32) #1 {
  %11 = zext i32 %1 to i64
  %12 = zext i32 %3 to i64
  %13 = zext i32 %5 to i64
  %14 = zext i32 %7 to i64
  br label %15

15:                                               ; preds = %15, %10
  %16 = phi i32 [ %9, %10 ], [ %53, %15 ]
  %17 = phi i8* [ %6, %10 ], [ %52, %15 ]
  %18 = phi i8* [ %4, %10 ], [ %51, %15 ]
  %19 = phi i8* [ %2, %10 ], [ %50, %15 ]
  %20 = phi i8* [ %0, %10 ], [ %49, %15 ]
  %21 = bitcast i8* %17 to i64*
  %22 = load i64, i64* %21, align 1
  %23 = insertelement <2 x i64> <i64 undef, i64 0>, i64 %22, i32 0
  %24 = bitcast <2 x i64> %23 to <16 x i8>
  %25 = shufflevector <16 x i8> %24, <16 x i8> undef, <16 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14, i32 1, i32 3, i32 5, i32 7, i32 9, i32 11, i32 13, i32 15>
  %26 = bitcast <16 x i8> %25 to <2 x i64>
  %27 = shufflevector <2 x i64> %26, <2 x i64> undef, <2 x i32> zeroinitializer
  %28 = shufflevector <2 x i64> %26, <2 x i64> undef, <2 x i32> <i32 1, i32 1>
  %29 = bitcast <2 x i64> %27 to <16 x i8>
  %30 = bitcast <2 x i64> %28 to <16 x i8>
  %31 = tail call <16 x i8> @llvm.x86.sse2.pavg.b(<16 x i8> %29, <16 x i8> %30) #5
  %32 = sub <16 x i8> <i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, %31
  %33 = bitcast i8* %19 to i32*
  %34 = load i32, i32* %33, align 1
  %35 = insertelement <4 x i32> <i32 undef, i32 0, i32 undef, i32 undef>, i32 %34, i32 0
  %36 = bitcast i8* %18 to i32*
  %37 = load i32, i32* %36, align 1
  %38 = insertelement <4 x i32> <i32 undef, i32 0, i32 undef, i32 undef>, i32 %37, i32 0
  %39 = bitcast <4 x i32> %35 to <16 x i8>
  %40 = bitcast <4 x i32> %38 to <16 x i8>
  %41 = shufflevector <16 x i8> %39, <16 x i8> %40, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %42 = shufflevector <16 x i8> %31, <16 x i8> %32, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %43 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %41, <16 x i8> %42) #5
  %44 = tail call <8 x i16> @llvm.x86.ssse3.pmul.hr.sw.128(<8 x i16> %43, <8 x i16> <i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512>) #5
  %45 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %44, <8 x i16> undef) #5
  %46 = bitcast <16 x i8> %45 to <4 x i32>
  %47 = extractelement <4 x i32> %46, i32 0
  %48 = bitcast i8* %20 to i32*
  store i32 %47, i32* %48, align 1
  %49 = getelementptr inbounds i8, i8* %20, i64 %11
  %50 = getelementptr inbounds i8, i8* %19, i64 %12
  %51 = getelementptr inbounds i8, i8* %18, i64 %13
  %52 = getelementptr inbounds i8, i8* %17, i64 %14
  %53 = add nsw i32 %16, -1
  %54 = icmp eq i32 %53, 0
  br i1 %54, label %55, label %15

55:                                               ; preds = %15
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @blend_a64_mask_sx_sy_w4_sse4_1(i8* nocapture, i32, i8* nocapture readonly, i32, i8* nocapture readonly, i32, i8* nocapture readonly, i32, i32, i32) #1 {
  %11 = zext i32 %7 to i64
  %12 = zext i32 %1 to i64
  %13 = zext i32 %3 to i64
  %14 = zext i32 %5 to i64
  %15 = shl i32 %7, 1
  %16 = zext i32 %15 to i64
  br label %17

17:                                               ; preds = %17, %10
  %18 = phi i32 [ %9, %10 ], [ %63, %17 ]
  %19 = phi i8* [ %6, %10 ], [ %62, %17 ]
  %20 = phi i8* [ %4, %10 ], [ %61, %17 ]
  %21 = phi i8* [ %2, %10 ], [ %60, %17 ]
  %22 = phi i8* [ %0, %10 ], [ %59, %17 ]
  %23 = bitcast i8* %19 to i64*
  %24 = load i64, i64* %23, align 1
  %25 = insertelement <2 x i64> <i64 undef, i64 0>, i64 %24, i32 0
  %26 = getelementptr inbounds i8, i8* %19, i64 %11
  %27 = bitcast i8* %26 to i64*
  %28 = load i64, i64* %27, align 1
  %29 = insertelement <2 x i64> <i64 undef, i64 0>, i64 %28, i32 0
  %30 = bitcast <2 x i64> %25 to <16 x i8>
  %31 = bitcast <2 x i64> %29 to <16 x i8>
  %32 = add <16 x i8> %31, %30
  %33 = shufflevector <16 x i8> %32, <16 x i8> undef, <16 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14, i32 1, i32 3, i32 5, i32 7, i32 9, i32 11, i32 13, i32 15>
  %34 = shufflevector <16 x i8> %33, <16 x i8> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %35 = zext <8 x i8> %34 to <8 x i16>
  %36 = shufflevector <16 x i8> %33, <16 x i8> undef, <8 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %37 = zext <8 x i8> %36 to <8 x i16>
  %38 = add nuw nsw <8 x i16> %37, %35
  %39 = lshr <8 x i16> %38, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %40 = tail call <8 x i16> @llvm.x86.sse2.pavg.w(<8 x i16> %39, <8 x i16> zeroinitializer) #5
  %41 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %40, <8 x i16> %40) #5
  %42 = sub <16 x i8> <i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, %41
  %43 = bitcast i8* %21 to i32*
  %44 = load i32, i32* %43, align 1
  %45 = insertelement <4 x i32> <i32 undef, i32 0, i32 undef, i32 undef>, i32 %44, i32 0
  %46 = bitcast i8* %20 to i32*
  %47 = load i32, i32* %46, align 1
  %48 = insertelement <4 x i32> <i32 undef, i32 0, i32 undef, i32 undef>, i32 %47, i32 0
  %49 = bitcast <4 x i32> %45 to <16 x i8>
  %50 = bitcast <4 x i32> %48 to <16 x i8>
  %51 = shufflevector <16 x i8> %49, <16 x i8> %50, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %52 = shufflevector <16 x i8> %41, <16 x i8> %42, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %53 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %51, <16 x i8> %52) #5
  %54 = tail call <8 x i16> @llvm.x86.ssse3.pmul.hr.sw.128(<8 x i16> %53, <8 x i16> <i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512>) #5
  %55 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %54, <8 x i16> undef) #5
  %56 = bitcast <16 x i8> %55 to <4 x i32>
  %57 = extractelement <4 x i32> %56, i32 0
  %58 = bitcast i8* %22 to i32*
  store i32 %57, i32* %58, align 1
  %59 = getelementptr inbounds i8, i8* %22, i64 %12
  %60 = getelementptr inbounds i8, i8* %21, i64 %13
  %61 = getelementptr inbounds i8, i8* %20, i64 %14
  %62 = getelementptr inbounds i8, i8* %19, i64 %16
  %63 = add nsw i32 %18, -1
  %64 = icmp eq i32 %63, 0
  br i1 %64, label %65, label %17

65:                                               ; preds = %17
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @blend_a64_mask_w8_sse4_1(i8* nocapture, i32, i8* nocapture readonly, i32, i8* nocapture readonly, i32, i8* nocapture readonly, i32, i32, i32) #1 {
  %11 = zext i32 %1 to i64
  %12 = zext i32 %3 to i64
  %13 = zext i32 %5 to i64
  %14 = zext i32 %7 to i64
  br label %15

15:                                               ; preds = %15, %10
  %16 = phi i8* [ %6, %10 ], [ %45, %15 ]
  %17 = phi i8* [ %4, %10 ], [ %44, %15 ]
  %18 = phi i8* [ %2, %10 ], [ %43, %15 ]
  %19 = phi i32 [ %9, %10 ], [ %46, %15 ]
  %20 = phi i8* [ %0, %10 ], [ %42, %15 ]
  %21 = bitcast i8* %16 to i64*
  %22 = load i64, i64* %21, align 1
  %23 = insertelement <2 x i64> <i64 undef, i64 0>, i64 %22, i32 0
  %24 = bitcast <2 x i64> %23 to <16 x i8>
  %25 = sub <16 x i8> <i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, %24
  %26 = bitcast i8* %18 to i64*
  %27 = load i64, i64* %26, align 1
  %28 = insertelement <2 x i64> undef, i64 %27, i32 0
  %29 = bitcast i8* %17 to i64*
  %30 = load i64, i64* %29, align 1
  %31 = insertelement <2 x i64> undef, i64 %30, i32 0
  %32 = bitcast <2 x i64> %28 to <16 x i8>
  %33 = bitcast <2 x i64> %31 to <16 x i8>
  %34 = shufflevector <16 x i8> %32, <16 x i8> %33, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %35 = shufflevector <16 x i8> %24, <16 x i8> %25, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %36 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %34, <16 x i8> %35) #5
  %37 = tail call <8 x i16> @llvm.x86.ssse3.pmul.hr.sw.128(<8 x i16> %36, <8 x i16> <i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512>) #5
  %38 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %37, <8 x i16> undef) #5
  %39 = bitcast <16 x i8> %38 to <2 x i64>
  %40 = extractelement <2 x i64> %39, i32 0
  %41 = bitcast i8* %20 to i64*
  store i64 %40, i64* %41, align 1
  %42 = getelementptr inbounds i8, i8* %20, i64 %11
  %43 = getelementptr inbounds i8, i8* %18, i64 %12
  %44 = getelementptr inbounds i8, i8* %17, i64 %13
  %45 = getelementptr inbounds i8, i8* %16, i64 %14
  %46 = add nsw i32 %19, -1
  %47 = icmp eq i32 %46, 0
  br i1 %47, label %48, label %15

48:                                               ; preds = %15
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @blend_a64_mask_sy_w8_sse4_1(i8* nocapture, i32, i8* nocapture readonly, i32, i8* nocapture readonly, i32, i8* nocapture readonly, i32, i32, i32) #1 {
  %11 = zext i32 %7 to i64
  %12 = zext i32 %1 to i64
  %13 = zext i32 %3 to i64
  %14 = zext i32 %5 to i64
  %15 = shl i32 %7, 1
  %16 = zext i32 %15 to i64
  br label %17

17:                                               ; preds = %17, %10
  %18 = phi i8* [ %6, %10 ], [ %53, %17 ]
  %19 = phi i32 [ %9, %10 ], [ %54, %17 ]
  %20 = phi i8* [ %4, %10 ], [ %52, %17 ]
  %21 = phi i8* [ %2, %10 ], [ %51, %17 ]
  %22 = phi i8* [ %0, %10 ], [ %50, %17 ]
  %23 = bitcast i8* %18 to i64*
  %24 = load i64, i64* %23, align 1
  %25 = insertelement <2 x i64> <i64 undef, i64 0>, i64 %24, i32 0
  %26 = getelementptr inbounds i8, i8* %18, i64 %11
  %27 = bitcast i8* %26 to i64*
  %28 = load i64, i64* %27, align 1
  %29 = insertelement <2 x i64> <i64 undef, i64 0>, i64 %28, i32 0
  %30 = bitcast <2 x i64> %25 to <16 x i8>
  %31 = bitcast <2 x i64> %29 to <16 x i8>
  %32 = tail call <16 x i8> @llvm.x86.sse2.pavg.b(<16 x i8> %30, <16 x i8> %31) #5
  %33 = sub <16 x i8> <i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, %32
  %34 = bitcast i8* %21 to i64*
  %35 = load i64, i64* %34, align 1
  %36 = insertelement <2 x i64> undef, i64 %35, i32 0
  %37 = bitcast i8* %20 to i64*
  %38 = load i64, i64* %37, align 1
  %39 = insertelement <2 x i64> undef, i64 %38, i32 0
  %40 = bitcast <2 x i64> %36 to <16 x i8>
  %41 = bitcast <2 x i64> %39 to <16 x i8>
  %42 = shufflevector <16 x i8> %40, <16 x i8> %41, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %43 = shufflevector <16 x i8> %32, <16 x i8> %33, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %44 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %42, <16 x i8> %43) #5
  %45 = tail call <8 x i16> @llvm.x86.ssse3.pmul.hr.sw.128(<8 x i16> %44, <8 x i16> <i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512>) #5
  %46 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %45, <8 x i16> undef) #5
  %47 = bitcast <16 x i8> %46 to <2 x i64>
  %48 = extractelement <2 x i64> %47, i32 0
  %49 = bitcast i8* %22 to i64*
  store i64 %48, i64* %49, align 1
  %50 = getelementptr inbounds i8, i8* %22, i64 %12
  %51 = getelementptr inbounds i8, i8* %21, i64 %13
  %52 = getelementptr inbounds i8, i8* %20, i64 %14
  %53 = getelementptr inbounds i8, i8* %18, i64 %16
  %54 = add nsw i32 %19, -1
  %55 = icmp eq i32 %54, 0
  br i1 %55, label %56, label %17

56:                                               ; preds = %17
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @blend_a64_mask_sx_w8_sse4_1(i8* nocapture, i32, i8* nocapture readonly, i32, i8* nocapture readonly, i32, i8* nocapture readonly, i32, i32, i32) #1 {
  %11 = zext i32 %1 to i64
  %12 = zext i32 %3 to i64
  %13 = zext i32 %5 to i64
  %14 = zext i32 %7 to i64
  br label %15

15:                                               ; preds = %15, %10
  %16 = phi i32 [ %9, %10 ], [ %51, %15 ]
  %17 = phi i8* [ %6, %10 ], [ %50, %15 ]
  %18 = phi i8* [ %4, %10 ], [ %49, %15 ]
  %19 = phi i8* [ %2, %10 ], [ %48, %15 ]
  %20 = phi i8* [ %0, %10 ], [ %47, %15 ]
  %21 = bitcast i8* %17 to <16 x i8>*
  %22 = load <16 x i8>, <16 x i8>* %21, align 1
  %23 = shufflevector <16 x i8> %22, <16 x i8> undef, <16 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14, i32 1, i32 3, i32 5, i32 7, i32 9, i32 11, i32 13, i32 15>
  %24 = bitcast <16 x i8> %23 to <2 x i64>
  %25 = shufflevector <2 x i64> %24, <2 x i64> undef, <2 x i32> zeroinitializer
  %26 = shufflevector <2 x i64> %24, <2 x i64> undef, <2 x i32> <i32 1, i32 1>
  %27 = bitcast <2 x i64> %25 to <16 x i8>
  %28 = bitcast <2 x i64> %26 to <16 x i8>
  %29 = tail call <16 x i8> @llvm.x86.sse2.pavg.b(<16 x i8> %27, <16 x i8> %28) #5
  %30 = sub <16 x i8> <i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, %29
  %31 = bitcast i8* %19 to i64*
  %32 = load i64, i64* %31, align 1
  %33 = insertelement <2 x i64> undef, i64 %32, i32 0
  %34 = bitcast i8* %18 to i64*
  %35 = load i64, i64* %34, align 1
  %36 = insertelement <2 x i64> undef, i64 %35, i32 0
  %37 = bitcast <2 x i64> %33 to <16 x i8>
  %38 = bitcast <2 x i64> %36 to <16 x i8>
  %39 = shufflevector <16 x i8> %37, <16 x i8> %38, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %40 = shufflevector <16 x i8> %29, <16 x i8> %30, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %41 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %39, <16 x i8> %40) #5
  %42 = tail call <8 x i16> @llvm.x86.ssse3.pmul.hr.sw.128(<8 x i16> %41, <8 x i16> <i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512>) #5
  %43 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %42, <8 x i16> undef) #5
  %44 = bitcast <16 x i8> %43 to <2 x i64>
  %45 = extractelement <2 x i64> %44, i32 0
  %46 = bitcast i8* %20 to i64*
  store i64 %45, i64* %46, align 1
  %47 = getelementptr inbounds i8, i8* %20, i64 %11
  %48 = getelementptr inbounds i8, i8* %19, i64 %12
  %49 = getelementptr inbounds i8, i8* %18, i64 %13
  %50 = getelementptr inbounds i8, i8* %17, i64 %14
  %51 = add nsw i32 %16, -1
  %52 = icmp eq i32 %51, 0
  br i1 %52, label %53, label %15

53:                                               ; preds = %15
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @blend_a64_mask_sx_sy_w8_sse4_1(i8* nocapture, i32, i8* nocapture readonly, i32, i8* nocapture readonly, i32, i8* nocapture readonly, i32, i32, i32) #1 {
  %11 = zext i32 %7 to i64
  %12 = zext i32 %1 to i64
  %13 = zext i32 %3 to i64
  %14 = zext i32 %5 to i64
  %15 = shl i32 %7, 1
  %16 = zext i32 %15 to i64
  br label %17

17:                                               ; preds = %17, %10
  %18 = phi i32 [ %9, %10 ], [ %59, %17 ]
  %19 = phi i8* [ %6, %10 ], [ %58, %17 ]
  %20 = phi i8* [ %4, %10 ], [ %57, %17 ]
  %21 = phi i8* [ %2, %10 ], [ %56, %17 ]
  %22 = phi i8* [ %0, %10 ], [ %55, %17 ]
  %23 = bitcast i8* %19 to <16 x i8>*
  %24 = load <16 x i8>, <16 x i8>* %23, align 1
  %25 = getelementptr inbounds i8, i8* %19, i64 %11
  %26 = bitcast i8* %25 to <16 x i8>*
  %27 = load <16 x i8>, <16 x i8>* %26, align 1
  %28 = add <16 x i8> %27, %24
  %29 = shufflevector <16 x i8> %28, <16 x i8> undef, <16 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14, i32 1, i32 3, i32 5, i32 7, i32 9, i32 11, i32 13, i32 15>
  %30 = shufflevector <16 x i8> %29, <16 x i8> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %31 = zext <8 x i8> %30 to <8 x i16>
  %32 = shufflevector <16 x i8> %29, <16 x i8> undef, <8 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %33 = zext <8 x i8> %32 to <8 x i16>
  %34 = add nuw nsw <8 x i16> %33, %31
  %35 = lshr <8 x i16> %34, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %36 = tail call <8 x i16> @llvm.x86.sse2.pavg.w(<8 x i16> %35, <8 x i16> zeroinitializer) #5
  %37 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %36, <8 x i16> %36) #5
  %38 = sub <16 x i8> <i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, %37
  %39 = bitcast i8* %21 to i64*
  %40 = load i64, i64* %39, align 1
  %41 = insertelement <2 x i64> undef, i64 %40, i32 0
  %42 = bitcast i8* %20 to i64*
  %43 = load i64, i64* %42, align 1
  %44 = insertelement <2 x i64> undef, i64 %43, i32 0
  %45 = bitcast <2 x i64> %41 to <16 x i8>
  %46 = bitcast <2 x i64> %44 to <16 x i8>
  %47 = shufflevector <16 x i8> %45, <16 x i8> %46, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %48 = shufflevector <16 x i8> %37, <16 x i8> %38, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %49 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %47, <16 x i8> %48) #5
  %50 = tail call <8 x i16> @llvm.x86.ssse3.pmul.hr.sw.128(<8 x i16> %49, <8 x i16> <i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512>) #5
  %51 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %50, <8 x i16> undef) #5
  %52 = bitcast <16 x i8> %51 to <2 x i64>
  %53 = extractelement <2 x i64> %52, i32 0
  %54 = bitcast i8* %22 to i64*
  store i64 %53, i64* %54, align 1
  %55 = getelementptr inbounds i8, i8* %22, i64 %12
  %56 = getelementptr inbounds i8, i8* %21, i64 %13
  %57 = getelementptr inbounds i8, i8* %20, i64 %14
  %58 = getelementptr inbounds i8, i8* %19, i64 %16
  %59 = add nsw i32 %18, -1
  %60 = icmp eq i32 %59, 0
  br i1 %60, label %61, label %17

61:                                               ; preds = %17
  ret void
}

declare void @aom_blend_a64_mask_c(i8*, i32, i8*, i32, i8*, i32, i8*, i32, i32, i32, i32, i32) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden void @aom_lowbd_blend_a64_d16_mask_sse4_1(i8* nocapture, i32, i16* nocapture readonly, i32, i16* nocapture readonly, i32, i8* nocapture readonly, i32, i32, i32, i32, i32, %struct.ConvolveParams* nocapture readonly) local_unnamed_addr #1 {
  %14 = getelementptr inbounds %struct.ConvolveParams, %struct.ConvolveParams* %12, i64 0, i32 3
  %15 = load i32, i32* %14, align 4
  %16 = sub nsw i32 14, %15
  %17 = getelementptr inbounds %struct.ConvolveParams, %struct.ConvolveParams* %12, i64 0, i32 4
  %18 = load i32, i32* %17, align 8
  %19 = sub i32 %16, %18
  %20 = add nsw i32 %19, 8
  %21 = shl i32 1, %20
  %22 = add nsw i32 %19, 7
  %23 = shl i32 1, %22
  %24 = add nsw i32 %21, %23
  %25 = add nsw i32 %19, -1
  %26 = shl i32 -1, %25
  %27 = add i32 %24, %26
  %28 = shl i32 %27, 6
  %29 = add nsw i32 %19, 6
  %30 = insertelement <4 x i32> undef, i32 %28, i32 0
  %31 = shufflevector <4 x i32> %30, <4 x i32> undef, <4 x i32> zeroinitializer
  %32 = icmp eq i32 %11, 0
  %33 = or i32 %11, %10
  %34 = icmp eq i32 %33, 0
  br i1 %34, label %35, label %197

35:                                               ; preds = %13
  switch i32 %8, label %125 [
    i32 4, label %36
    i32 8, label %80
  ]

36:                                               ; preds = %35
  %37 = icmp sgt i32 %9, 0
  br i1 %37, label %38, label %750

38:                                               ; preds = %36
  %39 = zext i32 %7 to i64
  %40 = zext i32 %1 to i64
  %41 = zext i32 %3 to i64
  %42 = zext i32 %5 to i64
  br label %43

43:                                               ; preds = %43, %38
  %44 = phi i8* [ %0, %38 ], [ %75, %43 ]
  %45 = phi i32 [ 0, %38 ], [ %78, %43 ]
  %46 = phi i16* [ %2, %38 ], [ %76, %43 ]
  %47 = phi i16* [ %4, %38 ], [ %77, %43 ]
  %48 = phi i8* [ %6, %38 ], [ %74, %43 ]
  %49 = bitcast i8* %48 to i32*
  %50 = load i32, i32* %49, align 1
  %51 = insertelement <4 x i32> <i32 undef, i32 0, i32 undef, i32 undef>, i32 %50, i32 0
  %52 = bitcast <4 x i32> %51 to <16 x i8>
  %53 = shufflevector <16 x i8> %52, <16 x i8> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %54 = zext <8 x i8> %53 to <8 x i16>
  %55 = sub <8 x i16> <i16 64, i16 64, i16 64, i16 64, i16 undef, i16 undef, i16 undef, i16 undef>, %54
  %56 = bitcast i16* %46 to i64*
  %57 = load i64, i64* %56, align 1
  %58 = insertelement <2 x i64> undef, i64 %57, i32 0
  %59 = bitcast i16* %47 to i64*
  %60 = load i64, i64* %59, align 1
  %61 = insertelement <2 x i64> undef, i64 %60, i32 0
  %62 = bitcast <2 x i64> %58 to <8 x i16>
  %63 = bitcast <2 x i64> %61 to <8 x i16>
  %64 = shufflevector <8 x i16> %62, <8 x i16> %63, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %65 = shufflevector <8 x i16> %54, <8 x i16> %55, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %66 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %64, <8 x i16> %65) #5
  %67 = sub <4 x i32> %66, %31
  %68 = tail call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %67, i32 %29) #5
  %69 = tail call <8 x i16> @llvm.x86.sse2.packssdw.128(<4 x i32> %68, <4 x i32> undef) #5
  %70 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %69, <8 x i16> undef) #5
  %71 = bitcast <16 x i8> %70 to <4 x i32>
  %72 = extractelement <4 x i32> %71, i32 0
  %73 = bitcast i8* %44 to i32*
  store i32 %72, i32* %73, align 1
  %74 = getelementptr inbounds i8, i8* %48, i64 %39
  %75 = getelementptr inbounds i8, i8* %44, i64 %40
  %76 = getelementptr inbounds i16, i16* %46, i64 %41
  %77 = getelementptr inbounds i16, i16* %47, i64 %42
  %78 = add nuw nsw i32 %45, 1
  %79 = icmp eq i32 %78, %9
  br i1 %79, label %750, label %43

80:                                               ; preds = %35
  %81 = icmp sgt i32 %9, 0
  br i1 %81, label %82, label %750

82:                                               ; preds = %80
  %83 = zext i32 %7 to i64
  %84 = zext i32 %1 to i64
  %85 = zext i32 %3 to i64
  %86 = zext i32 %5 to i64
  br label %87

87:                                               ; preds = %87, %82
  %88 = phi i8* [ %0, %82 ], [ %120, %87 ]
  %89 = phi i32 [ 0, %82 ], [ %123, %87 ]
  %90 = phi i16* [ %2, %82 ], [ %121, %87 ]
  %91 = phi i16* [ %4, %82 ], [ %122, %87 ]
  %92 = phi i8* [ %6, %82 ], [ %119, %87 ]
  %93 = bitcast i8* %92 to i64*
  %94 = load i64, i64* %93, align 1
  %95 = insertelement <2 x i64> undef, i64 %94, i32 0
  %96 = bitcast <2 x i64> %95 to <16 x i8>
  %97 = shufflevector <16 x i8> %96, <16 x i8> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %98 = zext <8 x i8> %97 to <8 x i16>
  %99 = sub nsw <8 x i16> <i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64>, %98
  %100 = bitcast i16* %90 to <8 x i16>*
  %101 = load <8 x i16>, <8 x i16>* %100, align 1
  %102 = bitcast i16* %91 to <8 x i16>*
  %103 = load <8 x i16>, <8 x i16>* %102, align 1
  %104 = shufflevector <8 x i16> %101, <8 x i16> %103, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %105 = shufflevector <8 x i16> %98, <8 x i16> %99, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %106 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %104, <8 x i16> %105) #5
  %107 = shufflevector <8 x i16> %101, <8 x i16> %103, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %108 = shufflevector <8 x i16> %98, <8 x i16> %99, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %109 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %107, <8 x i16> %108) #5
  %110 = sub <4 x i32> %106, %31
  %111 = tail call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %110, i32 %29) #5
  %112 = sub <4 x i32> %109, %31
  %113 = tail call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %112, i32 %29) #5
  %114 = tail call <8 x i16> @llvm.x86.sse2.packssdw.128(<4 x i32> %111, <4 x i32> %113) #5
  %115 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %114, <8 x i16> undef) #5
  %116 = bitcast <16 x i8> %115 to <2 x i64>
  %117 = extractelement <2 x i64> %116, i32 0
  %118 = bitcast i8* %88 to i64*
  store i64 %117, i64* %118, align 1
  %119 = getelementptr inbounds i8, i8* %92, i64 %83
  %120 = getelementptr inbounds i8, i8* %88, i64 %84
  %121 = getelementptr inbounds i16, i16* %90, i64 %85
  %122 = getelementptr inbounds i16, i16* %91, i64 %86
  %123 = add nuw nsw i32 %89, 1
  %124 = icmp eq i32 %123, %9
  br i1 %124, label %750, label %87

125:                                              ; preds = %35
  %126 = icmp sgt i32 %9, 0
  br i1 %126, label %127, label %750

127:                                              ; preds = %125
  %128 = icmp sgt i32 %8, 0
  %129 = zext i32 %7 to i64
  %130 = zext i32 %1 to i64
  %131 = zext i32 %3 to i64
  %132 = zext i32 %5 to i64
  %133 = sext i32 %8 to i64
  br label %134

134:                                              ; preds = %140, %127
  %135 = phi i8* [ %0, %127 ], [ %142, %140 ]
  %136 = phi i32 [ 0, %127 ], [ %145, %140 ]
  %137 = phi i16* [ %2, %127 ], [ %143, %140 ]
  %138 = phi i16* [ %4, %127 ], [ %144, %140 ]
  %139 = phi i8* [ %6, %127 ], [ %141, %140 ]
  br i1 %128, label %147, label %140

140:                                              ; preds = %147, %134
  %141 = getelementptr inbounds i8, i8* %139, i64 %129
  %142 = getelementptr inbounds i8, i8* %135, i64 %130
  %143 = getelementptr inbounds i16, i16* %137, i64 %131
  %144 = getelementptr inbounds i16, i16* %138, i64 %132
  %145 = add nuw nsw i32 %136, 1
  %146 = icmp eq i32 %145, %9
  br i1 %146, label %750, label %134

147:                                              ; preds = %134, %147
  %148 = phi i64 [ %195, %147 ], [ 0, %134 ]
  %149 = getelementptr inbounds i8, i8* %139, i64 %148
  %150 = bitcast i8* %149 to <16 x i8>*
  %151 = load <16 x i8>, <16 x i8>* %150, align 1
  %152 = shufflevector <16 x i8> %151, <16 x i8> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %153 = zext <8 x i8> %152 to <8 x i16>
  %154 = shufflevector <16 x i8> %151, <16 x i8> undef, <8 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %155 = zext <8 x i8> %154 to <8 x i16>
  %156 = getelementptr inbounds i8, i8* %135, i64 %148
  %157 = getelementptr inbounds i16, i16* %137, i64 %148
  %158 = getelementptr inbounds i16, i16* %138, i64 %148
  %159 = sub nsw <8 x i16> <i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64>, %153
  %160 = sub nsw <8 x i16> <i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64>, %155
  %161 = bitcast i16* %157 to <8 x i16>*
  %162 = load <8 x i16>, <8 x i16>* %161, align 1
  %163 = getelementptr inbounds i16, i16* %157, i64 8
  %164 = bitcast i16* %163 to <8 x i16>*
  %165 = load <8 x i16>, <8 x i16>* %164, align 1
  %166 = bitcast i16* %158 to <8 x i16>*
  %167 = load <8 x i16>, <8 x i16>* %166, align 1
  %168 = getelementptr inbounds i16, i16* %158, i64 8
  %169 = bitcast i16* %168 to <8 x i16>*
  %170 = load <8 x i16>, <8 x i16>* %169, align 1
  %171 = shufflevector <8 x i16> %162, <8 x i16> %167, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %172 = shufflevector <8 x i16> %153, <8 x i16> %159, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %173 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %171, <8 x i16> %172) #5
  %174 = shufflevector <8 x i16> %162, <8 x i16> %167, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %175 = shufflevector <8 x i16> %153, <8 x i16> %159, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %176 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %174, <8 x i16> %175) #5
  %177 = shufflevector <8 x i16> %165, <8 x i16> %170, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %178 = shufflevector <8 x i16> %155, <8 x i16> %160, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %179 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %177, <8 x i16> %178) #5
  %180 = shufflevector <8 x i16> %165, <8 x i16> %170, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %181 = shufflevector <8 x i16> %155, <8 x i16> %160, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %182 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %180, <8 x i16> %181) #5
  %183 = sub <4 x i32> %173, %31
  %184 = tail call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %183, i32 %29) #5
  %185 = sub <4 x i32> %176, %31
  %186 = tail call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %185, i32 %29) #5
  %187 = sub <4 x i32> %179, %31
  %188 = tail call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %187, i32 %29) #5
  %189 = sub <4 x i32> %182, %31
  %190 = tail call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %189, i32 %29) #5
  %191 = tail call <8 x i16> @llvm.x86.sse2.packssdw.128(<4 x i32> %184, <4 x i32> %186) #5
  %192 = tail call <8 x i16> @llvm.x86.sse2.packssdw.128(<4 x i32> %188, <4 x i32> %190) #5
  %193 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %191, <8 x i16> %192) #5
  %194 = bitcast i8* %156 to <16 x i8>*
  store <16 x i8> %193, <16 x i8>* %194, align 1
  %195 = add nuw nsw i64 %148, 16
  %196 = icmp slt i64 %195, %133
  br i1 %196, label %147, label %140

197:                                              ; preds = %13
  %198 = icmp eq i32 %10, 1
  %199 = icmp eq i32 %11, 1
  %200 = and i1 %198, %199
  br i1 %200, label %201, label %395

201:                                              ; preds = %197
  switch i32 %8, label %305 [
    i32 4, label %202
    i32 8, label %255
  ]

202:                                              ; preds = %201
  %203 = icmp sgt i32 %9, 0
  br i1 %203, label %204, label %750

204:                                              ; preds = %202
  %205 = zext i32 %7 to i64
  %206 = shl i32 %7, 1
  %207 = zext i32 %206 to i64
  %208 = zext i32 %1 to i64
  %209 = zext i32 %3 to i64
  %210 = zext i32 %5 to i64
  br label %211

211:                                              ; preds = %211, %204
  %212 = phi i8* [ %0, %204 ], [ %250, %211 ]
  %213 = phi i16* [ %2, %204 ], [ %251, %211 ]
  %214 = phi i16* [ %4, %204 ], [ %252, %211 ]
  %215 = phi i8* [ %6, %204 ], [ %249, %211 ]
  %216 = phi i32 [ 0, %204 ], [ %253, %211 ]
  %217 = bitcast i8* %215 to i64*
  %218 = load i64, i64* %217, align 1
  %219 = insertelement <2 x i64> <i64 undef, i64 0>, i64 %218, i32 0
  %220 = getelementptr inbounds i8, i8* %215, i64 %205
  %221 = bitcast i8* %220 to i64*
  %222 = load i64, i64* %221, align 1
  %223 = insertelement <2 x i64> <i64 undef, i64 0>, i64 %222, i32 0
  %224 = bitcast <2 x i64> %219 to <16 x i8>
  %225 = bitcast <2 x i64> %223 to <16 x i8>
  %226 = tail call <16 x i8> @llvm.uadd.sat.v16i8(<16 x i8> %224, <16 x i8> %225) #5
  %227 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %226, <16 x i8> <i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1>) #5
  %228 = add <8 x i16> %227, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %229 = lshr <8 x i16> %228, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %230 = sub <8 x i16> <i16 64, i16 64, i16 64, i16 64, i16 undef, i16 undef, i16 undef, i16 undef>, %229
  %231 = bitcast i16* %213 to i64*
  %232 = load i64, i64* %231, align 1
  %233 = insertelement <2 x i64> undef, i64 %232, i32 0
  %234 = bitcast i16* %214 to i64*
  %235 = load i64, i64* %234, align 1
  %236 = insertelement <2 x i64> undef, i64 %235, i32 0
  %237 = bitcast <2 x i64> %233 to <8 x i16>
  %238 = bitcast <2 x i64> %236 to <8 x i16>
  %239 = shufflevector <8 x i16> %237, <8 x i16> %238, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %240 = shufflevector <8 x i16> %229, <8 x i16> %230, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %241 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %239, <8 x i16> %240) #5
  %242 = sub <4 x i32> %241, %31
  %243 = tail call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %242, i32 %29) #5
  %244 = tail call <8 x i16> @llvm.x86.sse2.packssdw.128(<4 x i32> %243, <4 x i32> undef) #5
  %245 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %244, <8 x i16> undef) #5
  %246 = bitcast <16 x i8> %245 to <4 x i32>
  %247 = extractelement <4 x i32> %246, i32 0
  %248 = bitcast i8* %212 to i32*
  store i32 %247, i32* %248, align 1
  %249 = getelementptr inbounds i8, i8* %215, i64 %207
  %250 = getelementptr inbounds i8, i8* %212, i64 %208
  %251 = getelementptr inbounds i16, i16* %213, i64 %209
  %252 = getelementptr inbounds i16, i16* %214, i64 %210
  %253 = add nuw nsw i32 %216, 1
  %254 = icmp eq i32 %253, %9
  br i1 %254, label %750, label %211

255:                                              ; preds = %201
  %256 = icmp sgt i32 %9, 0
  br i1 %256, label %257, label %750

257:                                              ; preds = %255
  %258 = zext i32 %7 to i64
  %259 = shl i32 %7, 1
  %260 = zext i32 %259 to i64
  %261 = zext i32 %1 to i64
  %262 = zext i32 %3 to i64
  %263 = zext i32 %5 to i64
  br label %264

264:                                              ; preds = %264, %257
  %265 = phi i8* [ %0, %257 ], [ %300, %264 ]
  %266 = phi i16* [ %2, %257 ], [ %301, %264 ]
  %267 = phi i16* [ %4, %257 ], [ %302, %264 ]
  %268 = phi i8* [ %6, %257 ], [ %299, %264 ]
  %269 = phi i32 [ 0, %257 ], [ %303, %264 ]
  %270 = bitcast i8* %268 to <16 x i8>*
  %271 = load <16 x i8>, <16 x i8>* %270, align 1
  %272 = getelementptr inbounds i8, i8* %268, i64 %258
  %273 = bitcast i8* %272 to <16 x i8>*
  %274 = load <16 x i8>, <16 x i8>* %273, align 1
  %275 = tail call <16 x i8> @llvm.uadd.sat.v16i8(<16 x i8> %271, <16 x i8> %274) #5
  %276 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %275, <16 x i8> <i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1>) #5
  %277 = add <8 x i16> %276, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %278 = lshr <8 x i16> %277, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %279 = sub nsw <8 x i16> <i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64>, %278
  %280 = bitcast i16* %266 to <8 x i16>*
  %281 = load <8 x i16>, <8 x i16>* %280, align 1
  %282 = bitcast i16* %267 to <8 x i16>*
  %283 = load <8 x i16>, <8 x i16>* %282, align 1
  %284 = shufflevector <8 x i16> %281, <8 x i16> %283, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %285 = shufflevector <8 x i16> %278, <8 x i16> %279, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %286 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %284, <8 x i16> %285) #5
  %287 = shufflevector <8 x i16> %281, <8 x i16> %283, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %288 = shufflevector <8 x i16> %278, <8 x i16> %279, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %289 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %287, <8 x i16> %288) #5
  %290 = sub <4 x i32> %286, %31
  %291 = tail call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %290, i32 %29) #5
  %292 = sub <4 x i32> %289, %31
  %293 = tail call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %292, i32 %29) #5
  %294 = tail call <8 x i16> @llvm.x86.sse2.packssdw.128(<4 x i32> %291, <4 x i32> %293) #5
  %295 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %294, <8 x i16> undef) #5
  %296 = bitcast <16 x i8> %295 to <2 x i64>
  %297 = extractelement <2 x i64> %296, i32 0
  %298 = bitcast i8* %265 to i64*
  store i64 %297, i64* %298, align 1
  %299 = getelementptr inbounds i8, i8* %268, i64 %260
  %300 = getelementptr inbounds i8, i8* %265, i64 %261
  %301 = getelementptr inbounds i16, i16* %266, i64 %262
  %302 = getelementptr inbounds i16, i16* %267, i64 %263
  %303 = add nuw nsw i32 %269, 1
  %304 = icmp eq i32 %303, %9
  br i1 %304, label %750, label %264

305:                                              ; preds = %201
  %306 = icmp sgt i32 %9, 0
  br i1 %306, label %307, label %750

307:                                              ; preds = %305
  %308 = icmp sgt i32 %8, 0
  %309 = zext i32 %7 to i64
  %310 = shl i32 %7, 1
  %311 = zext i32 %310 to i64
  %312 = zext i32 %1 to i64
  %313 = zext i32 %3 to i64
  %314 = zext i32 %5 to i64
  %315 = sext i32 %8 to i64
  br label %316

316:                                              ; preds = %324, %307
  %317 = phi i8* [ %0, %307 ], [ %326, %324 ]
  %318 = phi i16* [ %2, %307 ], [ %327, %324 ]
  %319 = phi i16* [ %4, %307 ], [ %328, %324 ]
  %320 = phi i8* [ %6, %307 ], [ %325, %324 ]
  %321 = phi i32 [ 0, %307 ], [ %329, %324 ]
  br i1 %308, label %322, label %324

322:                                              ; preds = %316
  %323 = getelementptr inbounds i8, i8* %320, i64 %309
  br label %331

324:                                              ; preds = %331, %316
  %325 = getelementptr inbounds i8, i8* %320, i64 %311
  %326 = getelementptr inbounds i8, i8* %317, i64 %312
  %327 = getelementptr inbounds i16, i16* %318, i64 %313
  %328 = getelementptr inbounds i16, i16* %319, i64 %314
  %329 = add nuw nsw i32 %321, 1
  %330 = icmp eq i32 %329, %9
  br i1 %330, label %750, label %316

331:                                              ; preds = %331, %322
  %332 = phi i64 [ 0, %322 ], [ %393, %331 ]
  %333 = shl nuw nsw i64 %332, 1
  %334 = getelementptr inbounds i8, i8* %320, i64 %333
  %335 = bitcast i8* %334 to <16 x i8>*
  %336 = load <16 x i8>, <16 x i8>* %335, align 1
  %337 = getelementptr inbounds i8, i8* %334, i64 16
  %338 = bitcast i8* %337 to <16 x i8>*
  %339 = load <16 x i8>, <16 x i8>* %338, align 1
  %340 = getelementptr inbounds i8, i8* %323, i64 %333
  %341 = bitcast i8* %340 to <16 x i8>*
  %342 = load <16 x i8>, <16 x i8>* %341, align 1
  %343 = getelementptr inbounds i8, i8* %340, i64 16
  %344 = bitcast i8* %343 to <16 x i8>*
  %345 = load <16 x i8>, <16 x i8>* %344, align 1
  %346 = tail call <16 x i8> @llvm.uadd.sat.v16i8(<16 x i8> %336, <16 x i8> %342) #5
  %347 = tail call <16 x i8> @llvm.uadd.sat.v16i8(<16 x i8> %339, <16 x i8> %345) #5
  %348 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %346, <16 x i8> <i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1>) #5
  %349 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %347, <16 x i8> <i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1>) #5
  %350 = add <8 x i16> %348, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %351 = lshr <8 x i16> %350, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %352 = add <8 x i16> %349, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %353 = lshr <8 x i16> %352, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %354 = getelementptr inbounds i8, i8* %317, i64 %332
  %355 = getelementptr inbounds i16, i16* %318, i64 %332
  %356 = getelementptr inbounds i16, i16* %319, i64 %332
  %357 = sub nsw <8 x i16> <i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64>, %351
  %358 = sub nsw <8 x i16> <i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64>, %353
  %359 = bitcast i16* %355 to <8 x i16>*
  %360 = load <8 x i16>, <8 x i16>* %359, align 1
  %361 = getelementptr inbounds i16, i16* %355, i64 8
  %362 = bitcast i16* %361 to <8 x i16>*
  %363 = load <8 x i16>, <8 x i16>* %362, align 1
  %364 = bitcast i16* %356 to <8 x i16>*
  %365 = load <8 x i16>, <8 x i16>* %364, align 1
  %366 = getelementptr inbounds i16, i16* %356, i64 8
  %367 = bitcast i16* %366 to <8 x i16>*
  %368 = load <8 x i16>, <8 x i16>* %367, align 1
  %369 = shufflevector <8 x i16> %360, <8 x i16> %365, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %370 = shufflevector <8 x i16> %351, <8 x i16> %357, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %371 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %369, <8 x i16> %370) #5
  %372 = shufflevector <8 x i16> %360, <8 x i16> %365, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %373 = shufflevector <8 x i16> %351, <8 x i16> %357, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %374 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %372, <8 x i16> %373) #5
  %375 = shufflevector <8 x i16> %363, <8 x i16> %368, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %376 = shufflevector <8 x i16> %353, <8 x i16> %358, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %377 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %375, <8 x i16> %376) #5
  %378 = shufflevector <8 x i16> %363, <8 x i16> %368, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %379 = shufflevector <8 x i16> %353, <8 x i16> %358, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %380 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %378, <8 x i16> %379) #5
  %381 = sub <4 x i32> %371, %31
  %382 = tail call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %381, i32 %29) #5
  %383 = sub <4 x i32> %374, %31
  %384 = tail call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %383, i32 %29) #5
  %385 = sub <4 x i32> %377, %31
  %386 = tail call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %385, i32 %29) #5
  %387 = sub <4 x i32> %380, %31
  %388 = tail call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %387, i32 %29) #5
  %389 = tail call <8 x i16> @llvm.x86.sse2.packssdw.128(<4 x i32> %382, <4 x i32> %384) #5
  %390 = tail call <8 x i16> @llvm.x86.sse2.packssdw.128(<4 x i32> %386, <4 x i32> %388) #5
  %391 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %389, <8 x i16> %390) #5
  %392 = bitcast i8* %354 to <16 x i8>*
  store <16 x i8> %391, <16 x i8>* %392, align 1
  %393 = add nuw nsw i64 %332, 16
  %394 = icmp slt i64 %393, %315
  br i1 %394, label %331, label %324

395:                                              ; preds = %197
  %396 = and i1 %198, %32
  br i1 %396, label %397, label %561

397:                                              ; preds = %395
  switch i32 %8, label %485 [
    i32 4, label %398
    i32 8, label %442
  ]

398:                                              ; preds = %397
  %399 = icmp sgt i32 %9, 0
  br i1 %399, label %400, label %750

400:                                              ; preds = %398
  %401 = zext i32 %7 to i64
  %402 = zext i32 %1 to i64
  %403 = zext i32 %3 to i64
  %404 = zext i32 %5 to i64
  br label %405

405:                                              ; preds = %405, %400
  %406 = phi i8* [ %0, %400 ], [ %437, %405 ]
  %407 = phi i16* [ %2, %400 ], [ %438, %405 ]
  %408 = phi i32 [ 0, %400 ], [ %440, %405 ]
  %409 = phi i16* [ %4, %400 ], [ %439, %405 ]
  %410 = phi i8* [ %6, %400 ], [ %436, %405 ]
  %411 = bitcast i8* %410 to i64*
  %412 = load i64, i64* %411, align 1
  %413 = insertelement <2 x i64> <i64 undef, i64 0>, i64 %412, i32 0
  %414 = bitcast <2 x i64> %413 to <16 x i8>
  %415 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %414, <16 x i8> <i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1>) #5
  %416 = tail call <8 x i16> @llvm.x86.sse2.pavg.w(<8 x i16> %415, <8 x i16> zeroinitializer) #5
  %417 = sub <8 x i16> <i16 64, i16 64, i16 64, i16 64, i16 undef, i16 undef, i16 undef, i16 undef>, %416
  %418 = bitcast i16* %407 to i64*
  %419 = load i64, i64* %418, align 1
  %420 = insertelement <2 x i64> undef, i64 %419, i32 0
  %421 = bitcast i16* %409 to i64*
  %422 = load i64, i64* %421, align 1
  %423 = insertelement <2 x i64> undef, i64 %422, i32 0
  %424 = bitcast <2 x i64> %420 to <8 x i16>
  %425 = bitcast <2 x i64> %423 to <8 x i16>
  %426 = shufflevector <8 x i16> %424, <8 x i16> %425, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %427 = shufflevector <8 x i16> %416, <8 x i16> %417, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %428 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %426, <8 x i16> %427) #5
  %429 = sub <4 x i32> %428, %31
  %430 = tail call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %429, i32 %29) #5
  %431 = tail call <8 x i16> @llvm.x86.sse2.packssdw.128(<4 x i32> %430, <4 x i32> undef) #5
  %432 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %431, <8 x i16> undef) #5
  %433 = bitcast <16 x i8> %432 to <4 x i32>
  %434 = extractelement <4 x i32> %433, i32 0
  %435 = bitcast i8* %406 to i32*
  store i32 %434, i32* %435, align 1
  %436 = getelementptr inbounds i8, i8* %410, i64 %401
  %437 = getelementptr inbounds i8, i8* %406, i64 %402
  %438 = getelementptr inbounds i16, i16* %407, i64 %403
  %439 = getelementptr inbounds i16, i16* %409, i64 %404
  %440 = add nuw nsw i32 %408, 1
  %441 = icmp eq i32 %440, %9
  br i1 %441, label %750, label %405

442:                                              ; preds = %397
  %443 = icmp sgt i32 %9, 0
  br i1 %443, label %444, label %750

444:                                              ; preds = %442
  %445 = zext i32 %7 to i64
  %446 = zext i32 %1 to i64
  %447 = zext i32 %3 to i64
  %448 = zext i32 %5 to i64
  br label %449

449:                                              ; preds = %449, %444
  %450 = phi i8* [ %0, %444 ], [ %480, %449 ]
  %451 = phi i16* [ %2, %444 ], [ %481, %449 ]
  %452 = phi i32 [ 0, %444 ], [ %483, %449 ]
  %453 = phi i16* [ %4, %444 ], [ %482, %449 ]
  %454 = phi i8* [ %6, %444 ], [ %479, %449 ]
  %455 = bitcast i8* %454 to <16 x i8>*
  %456 = load <16 x i8>, <16 x i8>* %455, align 1
  %457 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %456, <16 x i8> <i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1>) #5
  %458 = tail call <8 x i16> @llvm.x86.sse2.pavg.w(<8 x i16> %457, <8 x i16> zeroinitializer) #5
  %459 = sub <8 x i16> <i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64>, %458
  %460 = bitcast i16* %451 to <8 x i16>*
  %461 = load <8 x i16>, <8 x i16>* %460, align 1
  %462 = bitcast i16* %453 to <8 x i16>*
  %463 = load <8 x i16>, <8 x i16>* %462, align 1
  %464 = shufflevector <8 x i16> %461, <8 x i16> %463, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %465 = shufflevector <8 x i16> %458, <8 x i16> %459, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %466 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %464, <8 x i16> %465) #5
  %467 = shufflevector <8 x i16> %461, <8 x i16> %463, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %468 = shufflevector <8 x i16> %458, <8 x i16> %459, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %469 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %467, <8 x i16> %468) #5
  %470 = sub <4 x i32> %466, %31
  %471 = tail call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %470, i32 %29) #5
  %472 = sub <4 x i32> %469, %31
  %473 = tail call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %472, i32 %29) #5
  %474 = tail call <8 x i16> @llvm.x86.sse2.packssdw.128(<4 x i32> %471, <4 x i32> %473) #5
  %475 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %474, <8 x i16> undef) #5
  %476 = bitcast <16 x i8> %475 to <2 x i64>
  %477 = extractelement <2 x i64> %476, i32 0
  %478 = bitcast i8* %450 to i64*
  store i64 %477, i64* %478, align 1
  %479 = getelementptr inbounds i8, i8* %454, i64 %445
  %480 = getelementptr inbounds i8, i8* %450, i64 %446
  %481 = getelementptr inbounds i16, i16* %451, i64 %447
  %482 = getelementptr inbounds i16, i16* %453, i64 %448
  %483 = add nuw nsw i32 %452, 1
  %484 = icmp eq i32 %483, %9
  br i1 %484, label %750, label %449

485:                                              ; preds = %397
  %486 = icmp sgt i32 %9, 0
  br i1 %486, label %487, label %750

487:                                              ; preds = %485
  %488 = icmp sgt i32 %8, 0
  %489 = zext i32 %7 to i64
  %490 = zext i32 %1 to i64
  %491 = zext i32 %3 to i64
  %492 = zext i32 %5 to i64
  %493 = sext i32 %8 to i64
  br label %494

494:                                              ; preds = %500, %487
  %495 = phi i8* [ %0, %487 ], [ %502, %500 ]
  %496 = phi i16* [ %2, %487 ], [ %503, %500 ]
  %497 = phi i16* [ %4, %487 ], [ %504, %500 ]
  %498 = phi i8* [ %6, %487 ], [ %501, %500 ]
  %499 = phi i32 [ 0, %487 ], [ %505, %500 ]
  br i1 %488, label %507, label %500

500:                                              ; preds = %507, %494
  %501 = getelementptr inbounds i8, i8* %498, i64 %489
  %502 = getelementptr inbounds i8, i8* %495, i64 %490
  %503 = getelementptr inbounds i16, i16* %496, i64 %491
  %504 = getelementptr inbounds i16, i16* %497, i64 %492
  %505 = add nuw nsw i32 %499, 1
  %506 = icmp eq i32 %505, %9
  br i1 %506, label %750, label %494

507:                                              ; preds = %494, %507
  %508 = phi i64 [ %559, %507 ], [ 0, %494 ]
  %509 = shl nuw nsw i64 %508, 1
  %510 = getelementptr inbounds i8, i8* %498, i64 %509
  %511 = bitcast i8* %510 to <16 x i8>*
  %512 = load <16 x i8>, <16 x i8>* %511, align 1
  %513 = getelementptr inbounds i8, i8* %510, i64 16
  %514 = bitcast i8* %513 to <16 x i8>*
  %515 = load <16 x i8>, <16 x i8>* %514, align 1
  %516 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %512, <16 x i8> <i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1>) #5
  %517 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %515, <16 x i8> <i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1>) #5
  %518 = tail call <8 x i16> @llvm.x86.sse2.pavg.w(<8 x i16> %516, <8 x i16> zeroinitializer) #5
  %519 = tail call <8 x i16> @llvm.x86.sse2.pavg.w(<8 x i16> %517, <8 x i16> zeroinitializer) #5
  %520 = getelementptr inbounds i8, i8* %495, i64 %508
  %521 = getelementptr inbounds i16, i16* %496, i64 %508
  %522 = getelementptr inbounds i16, i16* %497, i64 %508
  %523 = sub <8 x i16> <i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64>, %518
  %524 = sub <8 x i16> <i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64>, %519
  %525 = bitcast i16* %521 to <8 x i16>*
  %526 = load <8 x i16>, <8 x i16>* %525, align 1
  %527 = getelementptr inbounds i16, i16* %521, i64 8
  %528 = bitcast i16* %527 to <8 x i16>*
  %529 = load <8 x i16>, <8 x i16>* %528, align 1
  %530 = bitcast i16* %522 to <8 x i16>*
  %531 = load <8 x i16>, <8 x i16>* %530, align 1
  %532 = getelementptr inbounds i16, i16* %522, i64 8
  %533 = bitcast i16* %532 to <8 x i16>*
  %534 = load <8 x i16>, <8 x i16>* %533, align 1
  %535 = shufflevector <8 x i16> %526, <8 x i16> %531, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %536 = shufflevector <8 x i16> %518, <8 x i16> %523, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %537 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %535, <8 x i16> %536) #5
  %538 = shufflevector <8 x i16> %526, <8 x i16> %531, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %539 = shufflevector <8 x i16> %518, <8 x i16> %523, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %540 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %538, <8 x i16> %539) #5
  %541 = shufflevector <8 x i16> %529, <8 x i16> %534, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %542 = shufflevector <8 x i16> %519, <8 x i16> %524, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %543 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %541, <8 x i16> %542) #5
  %544 = shufflevector <8 x i16> %529, <8 x i16> %534, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %545 = shufflevector <8 x i16> %519, <8 x i16> %524, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %546 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %544, <8 x i16> %545) #5
  %547 = sub <4 x i32> %537, %31
  %548 = tail call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %547, i32 %29) #5
  %549 = sub <4 x i32> %540, %31
  %550 = tail call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %549, i32 %29) #5
  %551 = sub <4 x i32> %543, %31
  %552 = tail call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %551, i32 %29) #5
  %553 = sub <4 x i32> %546, %31
  %554 = tail call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %553, i32 %29) #5
  %555 = tail call <8 x i16> @llvm.x86.sse2.packssdw.128(<4 x i32> %548, <4 x i32> %550) #5
  %556 = tail call <8 x i16> @llvm.x86.sse2.packssdw.128(<4 x i32> %552, <4 x i32> %554) #5
  %557 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %555, <8 x i16> %556) #5
  %558 = bitcast i8* %520 to <16 x i8>*
  store <16 x i8> %557, <16 x i8>* %558, align 1
  %559 = add nuw nsw i64 %508, 16
  %560 = icmp slt i64 %559, %493
  br i1 %560, label %507, label %500

561:                                              ; preds = %395
  switch i32 %8, label %669 [
    i32 4, label %562
    i32 8, label %615
  ]

562:                                              ; preds = %561
  %563 = icmp sgt i32 %9, 0
  br i1 %563, label %564, label %750

564:                                              ; preds = %562
  %565 = zext i32 %7 to i64
  %566 = shl i32 %7, 1
  %567 = zext i32 %566 to i64
  %568 = zext i32 %1 to i64
  %569 = zext i32 %3 to i64
  %570 = zext i32 %5 to i64
  br label %571

571:                                              ; preds = %571, %564
  %572 = phi i8* [ %0, %564 ], [ %610, %571 ]
  %573 = phi i16* [ %2, %564 ], [ %611, %571 ]
  %574 = phi i16* [ %4, %564 ], [ %612, %571 ]
  %575 = phi i32 [ 0, %564 ], [ %613, %571 ]
  %576 = phi i8* [ %6, %564 ], [ %609, %571 ]
  %577 = bitcast i8* %576 to i64*
  %578 = load i64, i64* %577, align 1
  %579 = insertelement <2 x i64> <i64 undef, i64 0>, i64 %578, i32 0
  %580 = getelementptr inbounds i8, i8* %576, i64 %565
  %581 = bitcast i8* %580 to i64*
  %582 = load i64, i64* %581, align 1
  %583 = insertelement <2 x i64> <i64 undef, i64 0>, i64 %582, i32 0
  %584 = bitcast <2 x i64> %579 to <16 x i8>
  %585 = bitcast <2 x i64> %583 to <16 x i8>
  %586 = tail call <16 x i8> @llvm.uadd.sat.v16i8(<16 x i8> %584, <16 x i8> %585) #5
  %587 = tail call <16 x i8> @llvm.x86.sse2.pavg.b(<16 x i8> %586, <16 x i8> zeroinitializer) #5
  %588 = shufflevector <16 x i8> %587, <16 x i8> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %589 = zext <8 x i8> %588 to <8 x i16>
  %590 = sub <8 x i16> <i16 64, i16 64, i16 64, i16 64, i16 undef, i16 undef, i16 undef, i16 undef>, %589
  %591 = bitcast i16* %573 to i64*
  %592 = load i64, i64* %591, align 1
  %593 = insertelement <2 x i64> undef, i64 %592, i32 0
  %594 = bitcast i16* %574 to i64*
  %595 = load i64, i64* %594, align 1
  %596 = insertelement <2 x i64> undef, i64 %595, i32 0
  %597 = bitcast <2 x i64> %593 to <8 x i16>
  %598 = bitcast <2 x i64> %596 to <8 x i16>
  %599 = shufflevector <8 x i16> %597, <8 x i16> %598, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %600 = shufflevector <8 x i16> %589, <8 x i16> %590, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %601 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %599, <8 x i16> %600) #5
  %602 = sub <4 x i32> %601, %31
  %603 = tail call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %602, i32 %29) #5
  %604 = tail call <8 x i16> @llvm.x86.sse2.packssdw.128(<4 x i32> %603, <4 x i32> undef) #5
  %605 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %604, <8 x i16> undef) #5
  %606 = bitcast <16 x i8> %605 to <4 x i32>
  %607 = extractelement <4 x i32> %606, i32 0
  %608 = bitcast i8* %572 to i32*
  store i32 %607, i32* %608, align 1
  %609 = getelementptr inbounds i8, i8* %576, i64 %567
  %610 = getelementptr inbounds i8, i8* %572, i64 %568
  %611 = getelementptr inbounds i16, i16* %573, i64 %569
  %612 = getelementptr inbounds i16, i16* %574, i64 %570
  %613 = add nuw nsw i32 %575, 1
  %614 = icmp eq i32 %613, %9
  br i1 %614, label %750, label %571

615:                                              ; preds = %561
  %616 = icmp sgt i32 %9, 0
  br i1 %616, label %617, label %750

617:                                              ; preds = %615
  %618 = zext i32 %7 to i64
  %619 = shl i32 %7, 1
  %620 = zext i32 %619 to i64
  %621 = zext i32 %1 to i64
  %622 = zext i32 %3 to i64
  %623 = zext i32 %5 to i64
  br label %624

624:                                              ; preds = %624, %617
  %625 = phi i8* [ %0, %617 ], [ %664, %624 ]
  %626 = phi i16* [ %2, %617 ], [ %665, %624 ]
  %627 = phi i16* [ %4, %617 ], [ %666, %624 ]
  %628 = phi i32 [ 0, %617 ], [ %667, %624 ]
  %629 = phi i8* [ %6, %617 ], [ %663, %624 ]
  %630 = bitcast i8* %629 to i64*
  %631 = load i64, i64* %630, align 1
  %632 = insertelement <2 x i64> <i64 undef, i64 0>, i64 %631, i32 0
  %633 = getelementptr inbounds i8, i8* %629, i64 %618
  %634 = bitcast i8* %633 to i64*
  %635 = load i64, i64* %634, align 1
  %636 = insertelement <2 x i64> <i64 undef, i64 0>, i64 %635, i32 0
  %637 = bitcast <2 x i64> %632 to <16 x i8>
  %638 = bitcast <2 x i64> %636 to <16 x i8>
  %639 = tail call <16 x i8> @llvm.uadd.sat.v16i8(<16 x i8> %637, <16 x i8> %638) #5
  %640 = tail call <16 x i8> @llvm.x86.sse2.pavg.b(<16 x i8> %639, <16 x i8> zeroinitializer) #5
  %641 = shufflevector <16 x i8> %640, <16 x i8> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %642 = zext <8 x i8> %641 to <8 x i16>
  %643 = sub nsw <8 x i16> <i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64>, %642
  %644 = bitcast i16* %626 to <8 x i16>*
  %645 = load <8 x i16>, <8 x i16>* %644, align 1
  %646 = bitcast i16* %627 to <8 x i16>*
  %647 = load <8 x i16>, <8 x i16>* %646, align 1
  %648 = shufflevector <8 x i16> %645, <8 x i16> %647, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %649 = shufflevector <8 x i16> %642, <8 x i16> %643, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %650 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %648, <8 x i16> %649) #5
  %651 = shufflevector <8 x i16> %645, <8 x i16> %647, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %652 = shufflevector <8 x i16> %642, <8 x i16> %643, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %653 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %651, <8 x i16> %652) #5
  %654 = sub <4 x i32> %650, %31
  %655 = tail call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %654, i32 %29) #5
  %656 = sub <4 x i32> %653, %31
  %657 = tail call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %656, i32 %29) #5
  %658 = tail call <8 x i16> @llvm.x86.sse2.packssdw.128(<4 x i32> %655, <4 x i32> %657) #5
  %659 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %658, <8 x i16> undef) #5
  %660 = bitcast <16 x i8> %659 to <2 x i64>
  %661 = extractelement <2 x i64> %660, i32 0
  %662 = bitcast i8* %625 to i64*
  store i64 %661, i64* %662, align 1
  %663 = getelementptr inbounds i8, i8* %629, i64 %620
  %664 = getelementptr inbounds i8, i8* %625, i64 %621
  %665 = getelementptr inbounds i16, i16* %626, i64 %622
  %666 = getelementptr inbounds i16, i16* %627, i64 %623
  %667 = add nuw nsw i32 %628, 1
  %668 = icmp eq i32 %667, %9
  br i1 %668, label %750, label %624

669:                                              ; preds = %561
  %670 = icmp sgt i32 %9, 0
  br i1 %670, label %671, label %750

671:                                              ; preds = %669
  %672 = icmp sgt i32 %8, 0
  %673 = zext i32 %7 to i64
  %674 = shl i32 %7, 1
  %675 = zext i32 %674 to i64
  %676 = zext i32 %1 to i64
  %677 = zext i32 %3 to i64
  %678 = zext i32 %5 to i64
  %679 = sext i32 %8 to i64
  br label %680

680:                                              ; preds = %688, %671
  %681 = phi i8* [ %0, %671 ], [ %690, %688 ]
  %682 = phi i16* [ %2, %671 ], [ %691, %688 ]
  %683 = phi i16* [ %4, %671 ], [ %692, %688 ]
  %684 = phi i32 [ 0, %671 ], [ %693, %688 ]
  %685 = phi i8* [ %6, %671 ], [ %689, %688 ]
  br i1 %672, label %686, label %688

686:                                              ; preds = %680
  %687 = getelementptr inbounds i8, i8* %685, i64 %673
  br label %695

688:                                              ; preds = %695, %680
  %689 = getelementptr inbounds i8, i8* %685, i64 %675
  %690 = getelementptr inbounds i8, i8* %681, i64 %676
  %691 = getelementptr inbounds i16, i16* %682, i64 %677
  %692 = getelementptr inbounds i16, i16* %683, i64 %678
  %693 = add nuw nsw i32 %684, 1
  %694 = icmp eq i32 %693, %9
  br i1 %694, label %750, label %680

695:                                              ; preds = %695, %686
  %696 = phi i64 [ 0, %686 ], [ %748, %695 ]
  %697 = getelementptr inbounds i8, i8* %685, i64 %696
  %698 = bitcast i8* %697 to <16 x i8>*
  %699 = load <16 x i8>, <16 x i8>* %698, align 1
  %700 = getelementptr inbounds i8, i8* %687, i64 %696
  %701 = bitcast i8* %700 to <16 x i8>*
  %702 = load <16 x i8>, <16 x i8>* %701, align 1
  %703 = tail call <16 x i8> @llvm.uadd.sat.v16i8(<16 x i8> %699, <16 x i8> %702) #5
  %704 = tail call <16 x i8> @llvm.x86.sse2.pavg.b(<16 x i8> %703, <16 x i8> zeroinitializer) #5
  %705 = shufflevector <16 x i8> %704, <16 x i8> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %706 = zext <8 x i8> %705 to <8 x i16>
  %707 = shufflevector <16 x i8> %704, <16 x i8> undef, <8 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %708 = zext <8 x i8> %707 to <8 x i16>
  %709 = getelementptr inbounds i8, i8* %681, i64 %696
  %710 = getelementptr inbounds i16, i16* %682, i64 %696
  %711 = getelementptr inbounds i16, i16* %683, i64 %696
  %712 = sub nsw <8 x i16> <i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64>, %706
  %713 = sub nsw <8 x i16> <i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64>, %708
  %714 = bitcast i16* %710 to <8 x i16>*
  %715 = load <8 x i16>, <8 x i16>* %714, align 1
  %716 = getelementptr inbounds i16, i16* %710, i64 8
  %717 = bitcast i16* %716 to <8 x i16>*
  %718 = load <8 x i16>, <8 x i16>* %717, align 1
  %719 = bitcast i16* %711 to <8 x i16>*
  %720 = load <8 x i16>, <8 x i16>* %719, align 1
  %721 = getelementptr inbounds i16, i16* %711, i64 8
  %722 = bitcast i16* %721 to <8 x i16>*
  %723 = load <8 x i16>, <8 x i16>* %722, align 1
  %724 = shufflevector <8 x i16> %715, <8 x i16> %720, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %725 = shufflevector <8 x i16> %706, <8 x i16> %712, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %726 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %724, <8 x i16> %725) #5
  %727 = shufflevector <8 x i16> %715, <8 x i16> %720, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %728 = shufflevector <8 x i16> %706, <8 x i16> %712, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %729 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %727, <8 x i16> %728) #5
  %730 = shufflevector <8 x i16> %718, <8 x i16> %723, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %731 = shufflevector <8 x i16> %708, <8 x i16> %713, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %732 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %730, <8 x i16> %731) #5
  %733 = shufflevector <8 x i16> %718, <8 x i16> %723, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %734 = shufflevector <8 x i16> %708, <8 x i16> %713, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %735 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %733, <8 x i16> %734) #5
  %736 = sub <4 x i32> %726, %31
  %737 = tail call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %736, i32 %29) #5
  %738 = sub <4 x i32> %729, %31
  %739 = tail call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %738, i32 %29) #5
  %740 = sub <4 x i32> %732, %31
  %741 = tail call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %740, i32 %29) #5
  %742 = sub <4 x i32> %735, %31
  %743 = tail call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %742, i32 %29) #5
  %744 = tail call <8 x i16> @llvm.x86.sse2.packssdw.128(<4 x i32> %737, <4 x i32> %739) #5
  %745 = tail call <8 x i16> @llvm.x86.sse2.packssdw.128(<4 x i32> %741, <4 x i32> %743) #5
  %746 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %744, <8 x i16> %745) #5
  %747 = bitcast i8* %709 to <16 x i8>*
  store <16 x i8> %746, <16 x i8>* %747, align 1
  %748 = add nuw nsw i64 %696, 16
  %749 = icmp slt i64 %748, %679
  br i1 %749, label %695, label %688

750:                                              ; preds = %624, %571, %688, %449, %405, %500, %264, %211, %324, %87, %43, %140, %669, %615, %562, %485, %442, %398, %305, %255, %202, %125, %80, %36
  ret void
}

; Function Attrs: nounwind readnone
declare <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8>, <16 x i8>) #3

; Function Attrs: nounwind readnone
declare <8 x i16> @llvm.x86.ssse3.pmul.hr.sw.128(<8 x i16>, <8 x i16>) #3

; Function Attrs: nounwind readnone
declare <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16>, <8 x i16>) #3

; Function Attrs: nounwind readnone
declare <16 x i8> @llvm.x86.sse2.pavg.b(<16 x i8>, <16 x i8>) #3

; Function Attrs: nounwind readnone
declare <8 x i16> @llvm.x86.sse2.pavg.w(<8 x i16>, <8 x i16>) #3

; Function Attrs: nounwind readnone
declare <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16>, <8 x i16>) #3

; Function Attrs: nounwind readnone
declare <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32>, i32) #3

; Function Attrs: nounwind readnone
declare <8 x i16> @llvm.x86.sse2.packssdw.128(<4 x i32>, <4 x i32>) #3

; Function Attrs: nounwind readnone speculatable
declare <16 x i8> @llvm.uadd.sat.v16i8(<16 x i8>, <16 x i8>) #4

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+sse4.1,+ssse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="128" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+sse4.1,+ssse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+sse4.1,+ssse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind readnone }
attributes #4 = { nounwind readnone speculatable }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{!"branch_weights", i32 2000, i32 1}
