; ModuleID = '../../third_party/webrtc/common_audio/vad/vad_filterbank.c'
source_filename = "../../third_party/webrtc/common_audio/vad/vad_filterbank.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.VadInstT_ = type { i32, [4 x i32], %struct.WebRtcSpl_State48khzTo8khz, [12 x i16], [12 x i16], [12 x i16], [12 x i16], i32, i16, i16, [96 x i16], [96 x i16], [6 x i16], [5 x i16], [5 x i16], [4 x i16], [3 x i16], [3 x i16], [3 x i16], [3 x i16], i32 }
%struct.WebRtcSpl_State48khzTo8khz = type { [8 x i32], [16 x i32], [8 x i32], [8 x i32] }

; Function Attrs: nounwind ssp uwtable
define hidden signext i16 @WebRtcVad_CalculateFeatures(%struct.VadInstT_* nocapture, i16* nocapture readonly, i64, i16* nocapture) local_unnamed_addr #0 {
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  %7 = alloca i32, align 4
  %8 = alloca i32, align 4
  %9 = alloca i32, align 4
  %10 = alloca i32, align 4
  %11 = alloca [120 x i16], align 16
  %12 = alloca [120 x i16], align 16
  %13 = alloca [60 x i16], align 16
  %14 = alloca [60 x i16], align 16
  %15 = bitcast [120 x i16]* %11 to i8*
  call void @llvm.lifetime.start.p0i8(i64 240, i8* nonnull %15) #4
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %15, i8 -86, i64 240, i1 false)
  %16 = bitcast [120 x i16]* %12 to i8*
  call void @llvm.lifetime.start.p0i8(i64 240, i8* nonnull %16) #4
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %16, i8 -86, i64 240, i1 false)
  %17 = bitcast [60 x i16]* %13 to i8*
  call void @llvm.lifetime.start.p0i8(i64 120, i8* nonnull %17) #4
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %17, i8 -86, i64 120, i1 false)
  %18 = bitcast [60 x i16]* %14 to i8*
  call void @llvm.lifetime.start.p0i8(i64 120, i8* nonnull %18) #4
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %18, i8 -86, i64 120, i1 false)
  %19 = lshr i64 %2, 1
  %20 = getelementptr inbounds [120 x i16], [120 x i16]* %11, i64 0, i64 0
  %21 = getelementptr inbounds [120 x i16], [120 x i16]* %12, i64 0, i64 0
  %22 = getelementptr inbounds %struct.VadInstT_, %struct.VadInstT_* %0, i64 0, i32 13, i64 0
  %23 = getelementptr inbounds %struct.VadInstT_, %struct.VadInstT_* %0, i64 0, i32 14, i64 0
  %24 = icmp eq i64 %19, 0
  br i1 %24, label %250, label %25

25:                                               ; preds = %4
  %26 = load i16, i16* %22, align 2
  %27 = sext i16 %26 to i32
  %28 = shl nsw i32 %27, 16
  %29 = and i64 %19, 1
  %30 = icmp eq i64 %19, 1
  br i1 %30, label %66, label %31

31:                                               ; preds = %25
  %32 = sub nsw i64 %19, %29
  br label %33

33:                                               ; preds = %33, %31
  %34 = phi i32 [ %28, %31 ], [ %62, %33 ]
  %35 = phi i16* [ %20, %31 ], [ %57, %33 ]
  %36 = phi i16* [ %1, %31 ], [ %63, %33 ]
  %37 = phi i64 [ %32, %31 ], [ %64, %33 ]
  %38 = load i16, i16* %36, align 2
  %39 = sext i16 %38 to i32
  %40 = mul nsw i32 %39, 20972
  %41 = add nsw i32 %40, %34
  %42 = lshr i32 %41, 16
  %43 = trunc i32 %42 to i16
  %44 = getelementptr inbounds i16, i16* %35, i64 1
  store i16 %43, i16* %35, align 2
  %45 = shl nsw i32 %39, 14
  %46 = ashr i32 %41, 16
  %47 = mul nsw i32 %46, -20972
  %48 = add i32 %47, %45
  %49 = shl nsw i32 %48, 1
  %50 = getelementptr inbounds i16, i16* %36, i64 2
  %51 = load i16, i16* %50, align 2
  %52 = sext i16 %51 to i32
  %53 = mul nsw i32 %52, 20972
  %54 = add nsw i32 %53, %49
  %55 = lshr i32 %54, 16
  %56 = trunc i32 %55 to i16
  %57 = getelementptr inbounds i16, i16* %35, i64 2
  store i16 %56, i16* %44, align 2
  %58 = shl nsw i32 %52, 14
  %59 = ashr i32 %54, 16
  %60 = mul nsw i32 %59, -20972
  %61 = add i32 %60, %58
  %62 = shl nsw i32 %61, 1
  %63 = getelementptr inbounds i16, i16* %36, i64 4
  %64 = add i64 %37, -2
  %65 = icmp eq i64 %64, 0
  br i1 %65, label %66, label %33

66:                                               ; preds = %33, %25
  %67 = phi i32 [ undef, %25 ], [ %61, %33 ]
  %68 = phi i32 [ %28, %25 ], [ %62, %33 ]
  %69 = phi i16* [ %20, %25 ], [ %57, %33 ]
  %70 = phi i16* [ %1, %25 ], [ %63, %33 ]
  %71 = icmp eq i64 %29, 0
  br i1 %71, label %83, label %72

72:                                               ; preds = %66
  %73 = load i16, i16* %70, align 2
  %74 = sext i16 %73 to i32
  %75 = mul nsw i32 %74, 20972
  %76 = add nsw i32 %75, %68
  %77 = lshr i32 %76, 16
  %78 = trunc i32 %77 to i16
  store i16 %78, i16* %69, align 2
  %79 = ashr i32 %76, 16
  %80 = mul nsw i32 %79, -20972
  %81 = shl nsw i32 %74, 14
  %82 = add i32 %80, %81
  br label %83

83:                                               ; preds = %66, %72
  %84 = phi i32 [ %67, %66 ], [ %82, %72 ]
  %85 = lshr i32 %84, 15
  %86 = trunc i32 %85 to i16
  store i16 %86, i16* %22, align 2
  %87 = load i16, i16* %23, align 2
  %88 = sext i16 %87 to i32
  %89 = shl nsw i32 %88, 16
  %90 = getelementptr inbounds i16, i16* %1, i64 1
  %91 = and i64 %19, 1
  %92 = icmp eq i64 %19, 1
  br i1 %92, label %128, label %93

93:                                               ; preds = %83
  %94 = sub nsw i64 %19, %91
  br label %95

95:                                               ; preds = %95, %93
  %96 = phi i32 [ %89, %93 ], [ %124, %95 ]
  %97 = phi i16* [ %21, %93 ], [ %119, %95 ]
  %98 = phi i16* [ %90, %93 ], [ %125, %95 ]
  %99 = phi i64 [ %94, %93 ], [ %126, %95 ]
  %100 = load i16, i16* %98, align 2
  %101 = sext i16 %100 to i32
  %102 = mul nsw i32 %101, 5571
  %103 = add nsw i32 %102, %96
  %104 = lshr i32 %103, 16
  %105 = trunc i32 %104 to i16
  %106 = getelementptr inbounds i16, i16* %97, i64 1
  store i16 %105, i16* %97, align 2
  %107 = shl nsw i32 %101, 14
  %108 = ashr i32 %103, 16
  %109 = mul nsw i32 %108, -5571
  %110 = add nsw i32 %109, %107
  %111 = shl nsw i32 %110, 1
  %112 = getelementptr inbounds i16, i16* %98, i64 2
  %113 = load i16, i16* %112, align 2
  %114 = sext i16 %113 to i32
  %115 = mul nsw i32 %114, 5571
  %116 = add nsw i32 %115, %111
  %117 = lshr i32 %116, 16
  %118 = trunc i32 %117 to i16
  %119 = getelementptr inbounds i16, i16* %97, i64 2
  store i16 %118, i16* %106, align 2
  %120 = shl nsw i32 %114, 14
  %121 = ashr i32 %116, 16
  %122 = mul nsw i32 %121, -5571
  %123 = add nsw i32 %122, %120
  %124 = shl nsw i32 %123, 1
  %125 = getelementptr inbounds i16, i16* %98, i64 4
  %126 = add i64 %99, -2
  %127 = icmp eq i64 %126, 0
  br i1 %127, label %128, label %95

128:                                              ; preds = %95, %83
  %129 = phi i32 [ undef, %83 ], [ %123, %95 ]
  %130 = phi i32 [ %89, %83 ], [ %124, %95 ]
  %131 = phi i16* [ %21, %83 ], [ %119, %95 ]
  %132 = phi i16* [ %90, %83 ], [ %125, %95 ]
  %133 = icmp eq i64 %91, 0
  br i1 %133, label %145, label %134

134:                                              ; preds = %128
  %135 = load i16, i16* %132, align 2
  %136 = sext i16 %135 to i32
  %137 = mul nsw i32 %136, 5571
  %138 = add nsw i32 %137, %130
  %139 = lshr i32 %138, 16
  %140 = trunc i32 %139 to i16
  store i16 %140, i16* %131, align 2
  %141 = ashr i32 %138, 16
  %142 = mul nsw i32 %141, -5571
  %143 = shl nsw i32 %136, 14
  %144 = add nsw i32 %142, %143
  br label %145

145:                                              ; preds = %128, %134
  %146 = phi i32 [ %129, %128 ], [ %144, %134 ]
  %147 = lshr i32 %146, 15
  %148 = trunc i32 %147 to i16
  store i16 %148, i16* %23, align 2
  %149 = icmp ult i64 %2, 32
  br i1 %149, label %234, label %150

150:                                              ; preds = %145
  %151 = and i64 %19, 9223372036854775792
  %152 = getelementptr [120 x i16], [120 x i16]* %12, i64 0, i64 %151
  %153 = getelementptr [120 x i16], [120 x i16]* %11, i64 0, i64 %151
  %154 = add nsw i64 %151, -16
  %155 = lshr exact i64 %154, 4
  %156 = add nuw nsw i64 %155, 1
  %157 = and i64 %156, 1
  %158 = icmp eq i64 %154, 0
  br i1 %158, label %208, label %159

159:                                              ; preds = %150
  %160 = sub nuw nsw i64 %156, %157
  br label %161

161:                                              ; preds = %161, %159
  %162 = phi i64 [ 0, %159 ], [ %205, %161 ]
  %163 = phi i64 [ %160, %159 ], [ %206, %161 ]
  %164 = getelementptr [120 x i16], [120 x i16]* %12, i64 0, i64 %162
  %165 = getelementptr [120 x i16], [120 x i16]* %11, i64 0, i64 %162
  %166 = bitcast i16* %165 to <8 x i16>*
  %167 = load <8 x i16>, <8 x i16>* %166, align 16
  %168 = getelementptr i16, i16* %165, i64 8
  %169 = bitcast i16* %168 to <8 x i16>*
  %170 = load <8 x i16>, <8 x i16>* %169, align 16
  %171 = bitcast i16* %164 to <8 x i16>*
  %172 = load <8 x i16>, <8 x i16>* %171, align 16
  %173 = getelementptr i16, i16* %164, i64 8
  %174 = bitcast i16* %173 to <8 x i16>*
  %175 = load <8 x i16>, <8 x i16>* %174, align 16
  %176 = sub <8 x i16> %167, %172
  %177 = sub <8 x i16> %170, %175
  %178 = bitcast i16* %165 to <8 x i16>*
  store <8 x i16> %176, <8 x i16>* %178, align 16
  %179 = bitcast i16* %168 to <8 x i16>*
  store <8 x i16> %177, <8 x i16>* %179, align 16
  %180 = add <8 x i16> %172, %167
  %181 = add <8 x i16> %175, %170
  %182 = bitcast i16* %164 to <8 x i16>*
  store <8 x i16> %180, <8 x i16>* %182, align 16
  %183 = bitcast i16* %173 to <8 x i16>*
  store <8 x i16> %181, <8 x i16>* %183, align 16
  %184 = or i64 %162, 16
  %185 = getelementptr [120 x i16], [120 x i16]* %12, i64 0, i64 %184
  %186 = getelementptr [120 x i16], [120 x i16]* %11, i64 0, i64 %184
  %187 = bitcast i16* %186 to <8 x i16>*
  %188 = load <8 x i16>, <8 x i16>* %187, align 16
  %189 = getelementptr i16, i16* %186, i64 8
  %190 = bitcast i16* %189 to <8 x i16>*
  %191 = load <8 x i16>, <8 x i16>* %190, align 16
  %192 = bitcast i16* %185 to <8 x i16>*
  %193 = load <8 x i16>, <8 x i16>* %192, align 16
  %194 = getelementptr i16, i16* %185, i64 8
  %195 = bitcast i16* %194 to <8 x i16>*
  %196 = load <8 x i16>, <8 x i16>* %195, align 16
  %197 = sub <8 x i16> %188, %193
  %198 = sub <8 x i16> %191, %196
  %199 = bitcast i16* %186 to <8 x i16>*
  store <8 x i16> %197, <8 x i16>* %199, align 16
  %200 = bitcast i16* %189 to <8 x i16>*
  store <8 x i16> %198, <8 x i16>* %200, align 16
  %201 = add <8 x i16> %193, %188
  %202 = add <8 x i16> %196, %191
  %203 = bitcast i16* %185 to <8 x i16>*
  store <8 x i16> %201, <8 x i16>* %203, align 16
  %204 = bitcast i16* %194 to <8 x i16>*
  store <8 x i16> %202, <8 x i16>* %204, align 16
  %205 = add i64 %162, 32
  %206 = add i64 %163, -2
  %207 = icmp eq i64 %206, 0
  br i1 %207, label %208, label %161, !llvm.loop !2

208:                                              ; preds = %161, %150
  %209 = phi i64 [ 0, %150 ], [ %205, %161 ]
  %210 = icmp eq i64 %157, 0
  br i1 %210, label %232, label %211

211:                                              ; preds = %208
  %212 = getelementptr [120 x i16], [120 x i16]* %12, i64 0, i64 %209
  %213 = getelementptr [120 x i16], [120 x i16]* %11, i64 0, i64 %209
  %214 = bitcast i16* %213 to <8 x i16>*
  %215 = load <8 x i16>, <8 x i16>* %214, align 16
  %216 = getelementptr i16, i16* %213, i64 8
  %217 = bitcast i16* %216 to <8 x i16>*
  %218 = load <8 x i16>, <8 x i16>* %217, align 16
  %219 = bitcast i16* %212 to <8 x i16>*
  %220 = load <8 x i16>, <8 x i16>* %219, align 16
  %221 = getelementptr i16, i16* %212, i64 8
  %222 = bitcast i16* %221 to <8 x i16>*
  %223 = load <8 x i16>, <8 x i16>* %222, align 16
  %224 = sub <8 x i16> %215, %220
  %225 = sub <8 x i16> %218, %223
  %226 = bitcast i16* %213 to <8 x i16>*
  store <8 x i16> %224, <8 x i16>* %226, align 16
  %227 = bitcast i16* %216 to <8 x i16>*
  store <8 x i16> %225, <8 x i16>* %227, align 16
  %228 = add <8 x i16> %220, %215
  %229 = add <8 x i16> %223, %218
  %230 = bitcast i16* %212 to <8 x i16>*
  store <8 x i16> %228, <8 x i16>* %230, align 16
  %231 = bitcast i16* %221 to <8 x i16>*
  store <8 x i16> %229, <8 x i16>* %231, align 16
  br label %232

232:                                              ; preds = %208, %211
  %233 = icmp eq i64 %19, %151
  br i1 %233, label %250, label %234

234:                                              ; preds = %232, %145
  %235 = phi i64 [ 0, %145 ], [ %151, %232 ]
  %236 = phi i16* [ %21, %145 ], [ %152, %232 ]
  %237 = phi i16* [ %20, %145 ], [ %153, %232 ]
  br label %238

238:                                              ; preds = %234, %238
  %239 = phi i64 [ %248, %238 ], [ %235, %234 ]
  %240 = phi i16* [ %246, %238 ], [ %236, %234 ]
  %241 = phi i16* [ %244, %238 ], [ %237, %234 ]
  %242 = load i16, i16* %241, align 2
  %243 = load i16, i16* %240, align 2
  %244 = getelementptr inbounds i16, i16* %241, i64 1
  %245 = sub i16 %242, %243
  store i16 %245, i16* %241, align 2
  %246 = getelementptr inbounds i16, i16* %240, i64 1
  %247 = add i16 %243, %242
  store i16 %247, i16* %240, align 2
  %248 = add nuw nsw i64 %239, 1
  %249 = icmp eq i64 %248, %19
  br i1 %249, label %250, label %238, !llvm.loop !4

250:                                              ; preds = %238, %232, %4
  %251 = getelementptr inbounds [60 x i16], [60 x i16]* %13, i64 0, i64 0
  %252 = getelementptr inbounds [60 x i16], [60 x i16]* %14, i64 0, i64 0
  %253 = getelementptr inbounds %struct.VadInstT_, %struct.VadInstT_* %0, i64 0, i32 13, i64 1
  %254 = getelementptr inbounds %struct.VadInstT_, %struct.VadInstT_* %0, i64 0, i32 14, i64 1
  %255 = lshr i64 %2, 2
  %256 = icmp eq i64 %255, 0
  br i1 %256, label %482, label %257

257:                                              ; preds = %250
  %258 = load i16, i16* %253, align 2
  %259 = sext i16 %258 to i32
  %260 = shl nsw i32 %259, 16
  %261 = and i64 %255, 1
  %262 = icmp eq i64 %255, 1
  br i1 %262, label %298, label %263

263:                                              ; preds = %257
  %264 = sub nsw i64 %255, %261
  br label %265

265:                                              ; preds = %265, %263
  %266 = phi i32 [ %260, %263 ], [ %294, %265 ]
  %267 = phi i16* [ %251, %263 ], [ %289, %265 ]
  %268 = phi i16* [ %20, %263 ], [ %295, %265 ]
  %269 = phi i64 [ %264, %263 ], [ %296, %265 ]
  %270 = load i16, i16* %268, align 2
  %271 = sext i16 %270 to i32
  %272 = mul nsw i32 %271, 20972
  %273 = add nsw i32 %272, %266
  %274 = lshr i32 %273, 16
  %275 = trunc i32 %274 to i16
  %276 = getelementptr inbounds i16, i16* %267, i64 1
  store i16 %275, i16* %267, align 2
  %277 = shl nsw i32 %271, 14
  %278 = ashr i32 %273, 16
  %279 = mul nsw i32 %278, -20972
  %280 = add i32 %279, %277
  %281 = shl nsw i32 %280, 1
  %282 = getelementptr inbounds i16, i16* %268, i64 2
  %283 = load i16, i16* %282, align 2
  %284 = sext i16 %283 to i32
  %285 = mul nsw i32 %284, 20972
  %286 = add nsw i32 %285, %281
  %287 = lshr i32 %286, 16
  %288 = trunc i32 %287 to i16
  %289 = getelementptr inbounds i16, i16* %267, i64 2
  store i16 %288, i16* %276, align 2
  %290 = shl nsw i32 %284, 14
  %291 = ashr i32 %286, 16
  %292 = mul nsw i32 %291, -20972
  %293 = add i32 %292, %290
  %294 = shl nsw i32 %293, 1
  %295 = getelementptr inbounds i16, i16* %268, i64 4
  %296 = add i64 %269, -2
  %297 = icmp eq i64 %296, 0
  br i1 %297, label %298, label %265

298:                                              ; preds = %265, %257
  %299 = phi i32 [ undef, %257 ], [ %293, %265 ]
  %300 = phi i32 [ %260, %257 ], [ %294, %265 ]
  %301 = phi i16* [ %251, %257 ], [ %289, %265 ]
  %302 = phi i16* [ %20, %257 ], [ %295, %265 ]
  %303 = icmp eq i64 %261, 0
  br i1 %303, label %315, label %304

304:                                              ; preds = %298
  %305 = load i16, i16* %302, align 2
  %306 = sext i16 %305 to i32
  %307 = mul nsw i32 %306, 20972
  %308 = add nsw i32 %307, %300
  %309 = lshr i32 %308, 16
  %310 = trunc i32 %309 to i16
  store i16 %310, i16* %301, align 2
  %311 = ashr i32 %308, 16
  %312 = mul nsw i32 %311, -20972
  %313 = shl nsw i32 %306, 14
  %314 = add i32 %312, %313
  br label %315

315:                                              ; preds = %298, %304
  %316 = phi i32 [ %299, %298 ], [ %314, %304 ]
  %317 = lshr i32 %316, 15
  %318 = trunc i32 %317 to i16
  store i16 %318, i16* %253, align 2
  %319 = load i16, i16* %254, align 2
  %320 = sext i16 %319 to i32
  %321 = shl nsw i32 %320, 16
  %322 = getelementptr inbounds [120 x i16], [120 x i16]* %11, i64 0, i64 1
  %323 = and i64 %255, 1
  %324 = icmp eq i64 %255, 1
  br i1 %324, label %360, label %325

325:                                              ; preds = %315
  %326 = sub nsw i64 %255, %323
  br label %327

327:                                              ; preds = %327, %325
  %328 = phi i32 [ %321, %325 ], [ %356, %327 ]
  %329 = phi i16* [ %252, %325 ], [ %351, %327 ]
  %330 = phi i16* [ %322, %325 ], [ %357, %327 ]
  %331 = phi i64 [ %326, %325 ], [ %358, %327 ]
  %332 = load i16, i16* %330, align 2
  %333 = sext i16 %332 to i32
  %334 = mul nsw i32 %333, 5571
  %335 = add nsw i32 %334, %328
  %336 = lshr i32 %335, 16
  %337 = trunc i32 %336 to i16
  %338 = getelementptr inbounds i16, i16* %329, i64 1
  store i16 %337, i16* %329, align 2
  %339 = shl nsw i32 %333, 14
  %340 = ashr i32 %335, 16
  %341 = mul nsw i32 %340, -5571
  %342 = add nsw i32 %341, %339
  %343 = shl nsw i32 %342, 1
  %344 = getelementptr inbounds i16, i16* %330, i64 2
  %345 = load i16, i16* %344, align 2
  %346 = sext i16 %345 to i32
  %347 = mul nsw i32 %346, 5571
  %348 = add nsw i32 %347, %343
  %349 = lshr i32 %348, 16
  %350 = trunc i32 %349 to i16
  %351 = getelementptr inbounds i16, i16* %329, i64 2
  store i16 %350, i16* %338, align 2
  %352 = shl nsw i32 %346, 14
  %353 = ashr i32 %348, 16
  %354 = mul nsw i32 %353, -5571
  %355 = add nsw i32 %354, %352
  %356 = shl nsw i32 %355, 1
  %357 = getelementptr inbounds i16, i16* %330, i64 4
  %358 = add i64 %331, -2
  %359 = icmp eq i64 %358, 0
  br i1 %359, label %360, label %327

360:                                              ; preds = %327, %315
  %361 = phi i32 [ undef, %315 ], [ %355, %327 ]
  %362 = phi i32 [ %321, %315 ], [ %356, %327 ]
  %363 = phi i16* [ %252, %315 ], [ %351, %327 ]
  %364 = phi i16* [ %322, %315 ], [ %357, %327 ]
  %365 = icmp eq i64 %323, 0
  br i1 %365, label %377, label %366

366:                                              ; preds = %360
  %367 = load i16, i16* %364, align 2
  %368 = sext i16 %367 to i32
  %369 = mul nsw i32 %368, 5571
  %370 = add nsw i32 %369, %362
  %371 = lshr i32 %370, 16
  %372 = trunc i32 %371 to i16
  store i16 %372, i16* %363, align 2
  %373 = ashr i32 %370, 16
  %374 = mul nsw i32 %373, -5571
  %375 = shl nsw i32 %368, 14
  %376 = add nsw i32 %374, %375
  br label %377

377:                                              ; preds = %360, %366
  %378 = phi i32 [ %361, %360 ], [ %376, %366 ]
  %379 = lshr i32 %378, 15
  %380 = trunc i32 %379 to i16
  store i16 %380, i16* %254, align 2
  %381 = icmp ult i64 %2, 64
  br i1 %381, label %466, label %382

382:                                              ; preds = %377
  %383 = and i64 %255, 4611686018427387888
  %384 = getelementptr [60 x i16], [60 x i16]* %14, i64 0, i64 %383
  %385 = getelementptr [60 x i16], [60 x i16]* %13, i64 0, i64 %383
  %386 = add nsw i64 %383, -16
  %387 = lshr exact i64 %386, 4
  %388 = add nuw nsw i64 %387, 1
  %389 = and i64 %388, 1
  %390 = icmp eq i64 %386, 0
  br i1 %390, label %440, label %391

391:                                              ; preds = %382
  %392 = sub nuw nsw i64 %388, %389
  br label %393

393:                                              ; preds = %393, %391
  %394 = phi i64 [ 0, %391 ], [ %437, %393 ]
  %395 = phi i64 [ %392, %391 ], [ %438, %393 ]
  %396 = getelementptr [60 x i16], [60 x i16]* %14, i64 0, i64 %394
  %397 = getelementptr [60 x i16], [60 x i16]* %13, i64 0, i64 %394
  %398 = bitcast i16* %397 to <8 x i16>*
  %399 = load <8 x i16>, <8 x i16>* %398, align 16
  %400 = getelementptr i16, i16* %397, i64 8
  %401 = bitcast i16* %400 to <8 x i16>*
  %402 = load <8 x i16>, <8 x i16>* %401, align 16
  %403 = bitcast i16* %396 to <8 x i16>*
  %404 = load <8 x i16>, <8 x i16>* %403, align 16
  %405 = getelementptr i16, i16* %396, i64 8
  %406 = bitcast i16* %405 to <8 x i16>*
  %407 = load <8 x i16>, <8 x i16>* %406, align 16
  %408 = sub <8 x i16> %399, %404
  %409 = sub <8 x i16> %402, %407
  %410 = bitcast i16* %397 to <8 x i16>*
  store <8 x i16> %408, <8 x i16>* %410, align 16
  %411 = bitcast i16* %400 to <8 x i16>*
  store <8 x i16> %409, <8 x i16>* %411, align 16
  %412 = add <8 x i16> %404, %399
  %413 = add <8 x i16> %407, %402
  %414 = bitcast i16* %396 to <8 x i16>*
  store <8 x i16> %412, <8 x i16>* %414, align 16
  %415 = bitcast i16* %405 to <8 x i16>*
  store <8 x i16> %413, <8 x i16>* %415, align 16
  %416 = or i64 %394, 16
  %417 = getelementptr [60 x i16], [60 x i16]* %14, i64 0, i64 %416
  %418 = getelementptr [60 x i16], [60 x i16]* %13, i64 0, i64 %416
  %419 = bitcast i16* %418 to <8 x i16>*
  %420 = load <8 x i16>, <8 x i16>* %419, align 16
  %421 = getelementptr i16, i16* %418, i64 8
  %422 = bitcast i16* %421 to <8 x i16>*
  %423 = load <8 x i16>, <8 x i16>* %422, align 16
  %424 = bitcast i16* %417 to <8 x i16>*
  %425 = load <8 x i16>, <8 x i16>* %424, align 16
  %426 = getelementptr i16, i16* %417, i64 8
  %427 = bitcast i16* %426 to <8 x i16>*
  %428 = load <8 x i16>, <8 x i16>* %427, align 16
  %429 = sub <8 x i16> %420, %425
  %430 = sub <8 x i16> %423, %428
  %431 = bitcast i16* %418 to <8 x i16>*
  store <8 x i16> %429, <8 x i16>* %431, align 16
  %432 = bitcast i16* %421 to <8 x i16>*
  store <8 x i16> %430, <8 x i16>* %432, align 16
  %433 = add <8 x i16> %425, %420
  %434 = add <8 x i16> %428, %423
  %435 = bitcast i16* %417 to <8 x i16>*
  store <8 x i16> %433, <8 x i16>* %435, align 16
  %436 = bitcast i16* %426 to <8 x i16>*
  store <8 x i16> %434, <8 x i16>* %436, align 16
  %437 = add i64 %394, 32
  %438 = add i64 %395, -2
  %439 = icmp eq i64 %438, 0
  br i1 %439, label %440, label %393, !llvm.loop !6

440:                                              ; preds = %393, %382
  %441 = phi i64 [ 0, %382 ], [ %437, %393 ]
  %442 = icmp eq i64 %389, 0
  br i1 %442, label %464, label %443

443:                                              ; preds = %440
  %444 = getelementptr [60 x i16], [60 x i16]* %14, i64 0, i64 %441
  %445 = getelementptr [60 x i16], [60 x i16]* %13, i64 0, i64 %441
  %446 = bitcast i16* %445 to <8 x i16>*
  %447 = load <8 x i16>, <8 x i16>* %446, align 16
  %448 = getelementptr i16, i16* %445, i64 8
  %449 = bitcast i16* %448 to <8 x i16>*
  %450 = load <8 x i16>, <8 x i16>* %449, align 16
  %451 = bitcast i16* %444 to <8 x i16>*
  %452 = load <8 x i16>, <8 x i16>* %451, align 16
  %453 = getelementptr i16, i16* %444, i64 8
  %454 = bitcast i16* %453 to <8 x i16>*
  %455 = load <8 x i16>, <8 x i16>* %454, align 16
  %456 = sub <8 x i16> %447, %452
  %457 = sub <8 x i16> %450, %455
  %458 = bitcast i16* %445 to <8 x i16>*
  store <8 x i16> %456, <8 x i16>* %458, align 16
  %459 = bitcast i16* %448 to <8 x i16>*
  store <8 x i16> %457, <8 x i16>* %459, align 16
  %460 = add <8 x i16> %452, %447
  %461 = add <8 x i16> %455, %450
  %462 = bitcast i16* %444 to <8 x i16>*
  store <8 x i16> %460, <8 x i16>* %462, align 16
  %463 = bitcast i16* %453 to <8 x i16>*
  store <8 x i16> %461, <8 x i16>* %463, align 16
  br label %464

464:                                              ; preds = %440, %443
  %465 = icmp eq i64 %255, %383
  br i1 %465, label %482, label %466

466:                                              ; preds = %464, %377
  %467 = phi i64 [ 0, %377 ], [ %383, %464 ]
  %468 = phi i16* [ %252, %377 ], [ %384, %464 ]
  %469 = phi i16* [ %251, %377 ], [ %385, %464 ]
  br label %470

470:                                              ; preds = %466, %470
  %471 = phi i64 [ %480, %470 ], [ %467, %466 ]
  %472 = phi i16* [ %478, %470 ], [ %468, %466 ]
  %473 = phi i16* [ %476, %470 ], [ %469, %466 ]
  %474 = load i16, i16* %473, align 2
  %475 = load i16, i16* %472, align 2
  %476 = getelementptr inbounds i16, i16* %473, i64 1
  %477 = sub i16 %474, %475
  store i16 %477, i16* %473, align 2
  %478 = getelementptr inbounds i16, i16* %472, i64 1
  %479 = add i16 %475, %474
  store i16 %479, i16* %472, align 2
  %480 = add nuw nsw i64 %471, 1
  %481 = icmp eq i64 %480, %255
  br i1 %481, label %482, label %470, !llvm.loop !7

482:                                              ; preds = %470, %464, %250
  %483 = getelementptr inbounds i16, i16* %3, i64 5
  %484 = bitcast i32* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %484) #4
  store i32 0, i32* %8, align 4
  %485 = call i32 @WebRtcSpl_Energy(i16* nonnull %251, i64 %255, i32* nonnull %8) #4
  %486 = icmp eq i32 %485, 0
  br i1 %486, label %487, label %488

487:                                              ; preds = %482
  store i16 176, i16* %483, align 2
  br label %516

488:                                              ; preds = %482
  %489 = call i32 @llvm.ctlz.i32(i32 %485, i1 false) #4, !range !8
  %490 = trunc i32 %489 to i16
  %491 = sub nsw i32 17, %489
  %492 = load i32, i32* %8, align 4
  %493 = add nsw i32 %492, %491
  store i32 %493, i32* %8, align 4
  %494 = icmp ugt i16 %490, 17
  %495 = add nsw i32 %489, -17
  %496 = shl i32 %485, %495
  %497 = lshr i32 %485, %491
  %498 = select i1 %494, i32 %496, i32 %497
  %499 = lshr i32 %498, 4
  %500 = and i32 %499, 1023
  %501 = or i32 %500, 14336
  %502 = mul nuw nsw i32 %501, 24660
  %503 = lshr i32 %502, 19
  %504 = mul nsw i32 %493, 24660
  %505 = lshr i32 %504, 9
  %506 = add nuw nsw i32 %505, %503
  %507 = trunc i32 %506 to i16
  %508 = icmp sgt i16 %507, 0
  %509 = select i1 %508, i16 %507, i16 0
  %510 = add nuw i16 %509, 176
  store i16 %510, i16* %483, align 2
  %511 = icmp sgt i32 %493, -1
  br i1 %511, label %516, label %512

512:                                              ; preds = %488
  %513 = sub nsw i32 0, %493
  %514 = lshr i32 %498, %513
  %515 = trunc i32 %514 to i16
  br label %516

516:                                              ; preds = %488, %487, %512
  %517 = phi i16 [ 0, %487 ], [ %515, %512 ], [ 11, %488 ]
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %484) #4
  %518 = getelementptr inbounds i16, i16* %3, i64 4
  %519 = bitcast i32* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %519) #4
  store i32 0, i32* %7, align 4
  %520 = call i32 @WebRtcSpl_Energy(i16* nonnull %252, i64 %255, i32* nonnull %7) #4
  %521 = icmp eq i32 %520, 0
  br i1 %521, label %546, label %522

522:                                              ; preds = %516
  %523 = call i32 @llvm.ctlz.i32(i32 %520, i1 false) #4, !range !8
  %524 = trunc i32 %523 to i16
  %525 = sub nsw i32 17, %523
  %526 = load i32, i32* %7, align 4
  %527 = add nsw i32 %526, %525
  store i32 %527, i32* %7, align 4
  %528 = icmp ugt i16 %524, 17
  %529 = add nsw i32 %523, -17
  %530 = shl i32 %520, %529
  %531 = lshr i32 %520, %525
  %532 = select i1 %528, i32 %530, i32 %531
  %533 = lshr i32 %532, 4
  %534 = and i32 %533, 1023
  %535 = or i32 %534, 14336
  %536 = mul nuw nsw i32 %535, 24660
  %537 = lshr i32 %536, 19
  %538 = mul nsw i32 %527, 24660
  %539 = lshr i32 %538, 9
  %540 = add nuw nsw i32 %539, %537
  %541 = trunc i32 %540 to i16
  %542 = icmp sgt i16 %541, 0
  %543 = select i1 %542, i16 %541, i16 0
  %544 = add nuw i16 %543, 176
  store i16 %544, i16* %518, align 2
  %545 = icmp slt i16 %517, 11
  br i1 %545, label %547, label %556

546:                                              ; preds = %516
  store i16 176, i16* %518, align 2
  br label %556

547:                                              ; preds = %522
  %548 = icmp sgt i32 %527, -1
  br i1 %548, label %549, label %551

549:                                              ; preds = %547
  %550 = add nsw i16 %517, 11
  br label %556

551:                                              ; preds = %547
  %552 = sub nsw i32 0, %527
  %553 = lshr i32 %532, %552
  %554 = trunc i32 %553 to i16
  %555 = add i16 %517, %554
  br label %556

556:                                              ; preds = %522, %546, %549, %551
  %557 = phi i16 [ %517, %546 ], [ %550, %549 ], [ %555, %551 ], [ %517, %522 ]
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %519) #4
  %558 = getelementptr inbounds %struct.VadInstT_, %struct.VadInstT_* %0, i64 0, i32 13, i64 2
  %559 = getelementptr inbounds %struct.VadInstT_, %struct.VadInstT_* %0, i64 0, i32 14, i64 2
  br i1 %256, label %785, label %560

560:                                              ; preds = %556
  %561 = load i16, i16* %558, align 2
  %562 = sext i16 %561 to i32
  %563 = shl nsw i32 %562, 16
  %564 = and i64 %255, 1
  %565 = icmp eq i64 %255, 1
  br i1 %565, label %601, label %566

566:                                              ; preds = %560
  %567 = sub nsw i64 %255, %564
  br label %568

568:                                              ; preds = %568, %566
  %569 = phi i32 [ %563, %566 ], [ %597, %568 ]
  %570 = phi i16* [ %251, %566 ], [ %592, %568 ]
  %571 = phi i16* [ %21, %566 ], [ %598, %568 ]
  %572 = phi i64 [ %567, %566 ], [ %599, %568 ]
  %573 = load i16, i16* %571, align 2
  %574 = sext i16 %573 to i32
  %575 = mul nsw i32 %574, 20972
  %576 = add nsw i32 %575, %569
  %577 = lshr i32 %576, 16
  %578 = trunc i32 %577 to i16
  %579 = getelementptr inbounds i16, i16* %570, i64 1
  store i16 %578, i16* %570, align 2
  %580 = shl nsw i32 %574, 14
  %581 = ashr i32 %576, 16
  %582 = mul nsw i32 %581, -20972
  %583 = add i32 %582, %580
  %584 = shl nsw i32 %583, 1
  %585 = getelementptr inbounds i16, i16* %571, i64 2
  %586 = load i16, i16* %585, align 2
  %587 = sext i16 %586 to i32
  %588 = mul nsw i32 %587, 20972
  %589 = add nsw i32 %588, %584
  %590 = lshr i32 %589, 16
  %591 = trunc i32 %590 to i16
  %592 = getelementptr inbounds i16, i16* %570, i64 2
  store i16 %591, i16* %579, align 2
  %593 = shl nsw i32 %587, 14
  %594 = ashr i32 %589, 16
  %595 = mul nsw i32 %594, -20972
  %596 = add i32 %595, %593
  %597 = shl nsw i32 %596, 1
  %598 = getelementptr inbounds i16, i16* %571, i64 4
  %599 = add i64 %572, -2
  %600 = icmp eq i64 %599, 0
  br i1 %600, label %601, label %568

601:                                              ; preds = %568, %560
  %602 = phi i32 [ undef, %560 ], [ %596, %568 ]
  %603 = phi i32 [ %563, %560 ], [ %597, %568 ]
  %604 = phi i16* [ %251, %560 ], [ %592, %568 ]
  %605 = phi i16* [ %21, %560 ], [ %598, %568 ]
  %606 = icmp eq i64 %564, 0
  br i1 %606, label %618, label %607

607:                                              ; preds = %601
  %608 = load i16, i16* %605, align 2
  %609 = sext i16 %608 to i32
  %610 = mul nsw i32 %609, 20972
  %611 = add nsw i32 %610, %603
  %612 = lshr i32 %611, 16
  %613 = trunc i32 %612 to i16
  store i16 %613, i16* %604, align 2
  %614 = ashr i32 %611, 16
  %615 = mul nsw i32 %614, -20972
  %616 = shl nsw i32 %609, 14
  %617 = add i32 %615, %616
  br label %618

618:                                              ; preds = %601, %607
  %619 = phi i32 [ %602, %601 ], [ %617, %607 ]
  %620 = lshr i32 %619, 15
  %621 = trunc i32 %620 to i16
  store i16 %621, i16* %558, align 2
  %622 = load i16, i16* %559, align 2
  %623 = sext i16 %622 to i32
  %624 = shl nsw i32 %623, 16
  %625 = getelementptr inbounds [120 x i16], [120 x i16]* %12, i64 0, i64 1
  %626 = and i64 %255, 1
  %627 = icmp eq i64 %255, 1
  br i1 %627, label %663, label %628

628:                                              ; preds = %618
  %629 = sub nsw i64 %255, %626
  br label %630

630:                                              ; preds = %630, %628
  %631 = phi i32 [ %624, %628 ], [ %659, %630 ]
  %632 = phi i16* [ %252, %628 ], [ %654, %630 ]
  %633 = phi i16* [ %625, %628 ], [ %660, %630 ]
  %634 = phi i64 [ %629, %628 ], [ %661, %630 ]
  %635 = load i16, i16* %633, align 2
  %636 = sext i16 %635 to i32
  %637 = mul nsw i32 %636, 5571
  %638 = add nsw i32 %637, %631
  %639 = lshr i32 %638, 16
  %640 = trunc i32 %639 to i16
  %641 = getelementptr inbounds i16, i16* %632, i64 1
  store i16 %640, i16* %632, align 2
  %642 = shl nsw i32 %636, 14
  %643 = ashr i32 %638, 16
  %644 = mul nsw i32 %643, -5571
  %645 = add nsw i32 %644, %642
  %646 = shl nsw i32 %645, 1
  %647 = getelementptr inbounds i16, i16* %633, i64 2
  %648 = load i16, i16* %647, align 2
  %649 = sext i16 %648 to i32
  %650 = mul nsw i32 %649, 5571
  %651 = add nsw i32 %650, %646
  %652 = lshr i32 %651, 16
  %653 = trunc i32 %652 to i16
  %654 = getelementptr inbounds i16, i16* %632, i64 2
  store i16 %653, i16* %641, align 2
  %655 = shl nsw i32 %649, 14
  %656 = ashr i32 %651, 16
  %657 = mul nsw i32 %656, -5571
  %658 = add nsw i32 %657, %655
  %659 = shl nsw i32 %658, 1
  %660 = getelementptr inbounds i16, i16* %633, i64 4
  %661 = add i64 %634, -2
  %662 = icmp eq i64 %661, 0
  br i1 %662, label %663, label %630

663:                                              ; preds = %630, %618
  %664 = phi i32 [ undef, %618 ], [ %658, %630 ]
  %665 = phi i32 [ %624, %618 ], [ %659, %630 ]
  %666 = phi i16* [ %252, %618 ], [ %654, %630 ]
  %667 = phi i16* [ %625, %618 ], [ %660, %630 ]
  %668 = icmp eq i64 %626, 0
  br i1 %668, label %680, label %669

669:                                              ; preds = %663
  %670 = load i16, i16* %667, align 2
  %671 = sext i16 %670 to i32
  %672 = mul nsw i32 %671, 5571
  %673 = add nsw i32 %672, %665
  %674 = lshr i32 %673, 16
  %675 = trunc i32 %674 to i16
  store i16 %675, i16* %666, align 2
  %676 = ashr i32 %673, 16
  %677 = mul nsw i32 %676, -5571
  %678 = shl nsw i32 %671, 14
  %679 = add nsw i32 %677, %678
  br label %680

680:                                              ; preds = %663, %669
  %681 = phi i32 [ %664, %663 ], [ %679, %669 ]
  %682 = lshr i32 %681, 15
  %683 = trunc i32 %682 to i16
  store i16 %683, i16* %559, align 2
  %684 = icmp ult i64 %2, 64
  br i1 %684, label %769, label %685

685:                                              ; preds = %680
  %686 = and i64 %255, 4611686018427387888
  %687 = getelementptr [60 x i16], [60 x i16]* %14, i64 0, i64 %686
  %688 = getelementptr [60 x i16], [60 x i16]* %13, i64 0, i64 %686
  %689 = add nsw i64 %686, -16
  %690 = lshr exact i64 %689, 4
  %691 = add nuw nsw i64 %690, 1
  %692 = and i64 %691, 1
  %693 = icmp eq i64 %689, 0
  br i1 %693, label %743, label %694

694:                                              ; preds = %685
  %695 = sub nuw nsw i64 %691, %692
  br label %696

696:                                              ; preds = %696, %694
  %697 = phi i64 [ 0, %694 ], [ %740, %696 ]
  %698 = phi i64 [ %695, %694 ], [ %741, %696 ]
  %699 = getelementptr [60 x i16], [60 x i16]* %14, i64 0, i64 %697
  %700 = getelementptr [60 x i16], [60 x i16]* %13, i64 0, i64 %697
  %701 = bitcast i16* %700 to <8 x i16>*
  %702 = load <8 x i16>, <8 x i16>* %701, align 16
  %703 = getelementptr i16, i16* %700, i64 8
  %704 = bitcast i16* %703 to <8 x i16>*
  %705 = load <8 x i16>, <8 x i16>* %704, align 16
  %706 = bitcast i16* %699 to <8 x i16>*
  %707 = load <8 x i16>, <8 x i16>* %706, align 16
  %708 = getelementptr i16, i16* %699, i64 8
  %709 = bitcast i16* %708 to <8 x i16>*
  %710 = load <8 x i16>, <8 x i16>* %709, align 16
  %711 = sub <8 x i16> %702, %707
  %712 = sub <8 x i16> %705, %710
  %713 = bitcast i16* %700 to <8 x i16>*
  store <8 x i16> %711, <8 x i16>* %713, align 16
  %714 = bitcast i16* %703 to <8 x i16>*
  store <8 x i16> %712, <8 x i16>* %714, align 16
  %715 = add <8 x i16> %707, %702
  %716 = add <8 x i16> %710, %705
  %717 = bitcast i16* %699 to <8 x i16>*
  store <8 x i16> %715, <8 x i16>* %717, align 16
  %718 = bitcast i16* %708 to <8 x i16>*
  store <8 x i16> %716, <8 x i16>* %718, align 16
  %719 = or i64 %697, 16
  %720 = getelementptr [60 x i16], [60 x i16]* %14, i64 0, i64 %719
  %721 = getelementptr [60 x i16], [60 x i16]* %13, i64 0, i64 %719
  %722 = bitcast i16* %721 to <8 x i16>*
  %723 = load <8 x i16>, <8 x i16>* %722, align 16
  %724 = getelementptr i16, i16* %721, i64 8
  %725 = bitcast i16* %724 to <8 x i16>*
  %726 = load <8 x i16>, <8 x i16>* %725, align 16
  %727 = bitcast i16* %720 to <8 x i16>*
  %728 = load <8 x i16>, <8 x i16>* %727, align 16
  %729 = getelementptr i16, i16* %720, i64 8
  %730 = bitcast i16* %729 to <8 x i16>*
  %731 = load <8 x i16>, <8 x i16>* %730, align 16
  %732 = sub <8 x i16> %723, %728
  %733 = sub <8 x i16> %726, %731
  %734 = bitcast i16* %721 to <8 x i16>*
  store <8 x i16> %732, <8 x i16>* %734, align 16
  %735 = bitcast i16* %724 to <8 x i16>*
  store <8 x i16> %733, <8 x i16>* %735, align 16
  %736 = add <8 x i16> %728, %723
  %737 = add <8 x i16> %731, %726
  %738 = bitcast i16* %720 to <8 x i16>*
  store <8 x i16> %736, <8 x i16>* %738, align 16
  %739 = bitcast i16* %729 to <8 x i16>*
  store <8 x i16> %737, <8 x i16>* %739, align 16
  %740 = add i64 %697, 32
  %741 = add i64 %698, -2
  %742 = icmp eq i64 %741, 0
  br i1 %742, label %743, label %696, !llvm.loop !9

743:                                              ; preds = %696, %685
  %744 = phi i64 [ 0, %685 ], [ %740, %696 ]
  %745 = icmp eq i64 %692, 0
  br i1 %745, label %767, label %746

746:                                              ; preds = %743
  %747 = getelementptr [60 x i16], [60 x i16]* %14, i64 0, i64 %744
  %748 = getelementptr [60 x i16], [60 x i16]* %13, i64 0, i64 %744
  %749 = bitcast i16* %748 to <8 x i16>*
  %750 = load <8 x i16>, <8 x i16>* %749, align 16
  %751 = getelementptr i16, i16* %748, i64 8
  %752 = bitcast i16* %751 to <8 x i16>*
  %753 = load <8 x i16>, <8 x i16>* %752, align 16
  %754 = bitcast i16* %747 to <8 x i16>*
  %755 = load <8 x i16>, <8 x i16>* %754, align 16
  %756 = getelementptr i16, i16* %747, i64 8
  %757 = bitcast i16* %756 to <8 x i16>*
  %758 = load <8 x i16>, <8 x i16>* %757, align 16
  %759 = sub <8 x i16> %750, %755
  %760 = sub <8 x i16> %753, %758
  %761 = bitcast i16* %748 to <8 x i16>*
  store <8 x i16> %759, <8 x i16>* %761, align 16
  %762 = bitcast i16* %751 to <8 x i16>*
  store <8 x i16> %760, <8 x i16>* %762, align 16
  %763 = add <8 x i16> %755, %750
  %764 = add <8 x i16> %758, %753
  %765 = bitcast i16* %747 to <8 x i16>*
  store <8 x i16> %763, <8 x i16>* %765, align 16
  %766 = bitcast i16* %756 to <8 x i16>*
  store <8 x i16> %764, <8 x i16>* %766, align 16
  br label %767

767:                                              ; preds = %743, %746
  %768 = icmp eq i64 %255, %686
  br i1 %768, label %785, label %769

769:                                              ; preds = %767, %680
  %770 = phi i64 [ 0, %680 ], [ %686, %767 ]
  %771 = phi i16* [ %252, %680 ], [ %687, %767 ]
  %772 = phi i16* [ %251, %680 ], [ %688, %767 ]
  br label %773

773:                                              ; preds = %769, %773
  %774 = phi i64 [ %783, %773 ], [ %770, %769 ]
  %775 = phi i16* [ %781, %773 ], [ %771, %769 ]
  %776 = phi i16* [ %779, %773 ], [ %772, %769 ]
  %777 = load i16, i16* %776, align 2
  %778 = load i16, i16* %775, align 2
  %779 = getelementptr inbounds i16, i16* %776, i64 1
  %780 = sub i16 %777, %778
  store i16 %780, i16* %776, align 2
  %781 = getelementptr inbounds i16, i16* %775, i64 1
  %782 = add i16 %778, %777
  store i16 %782, i16* %775, align 2
  %783 = add nuw nsw i64 %774, 1
  %784 = icmp eq i64 %783, %255
  br i1 %784, label %785, label %773, !llvm.loop !10

785:                                              ; preds = %773, %767, %556
  %786 = getelementptr inbounds i16, i16* %3, i64 3
  %787 = bitcast i32* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %787) #4
  store i32 0, i32* %5, align 4
  %788 = call i32 @WebRtcSpl_Energy(i16* nonnull %251, i64 %255, i32* nonnull %5) #4
  %789 = icmp eq i32 %788, 0
  br i1 %789, label %814, label %790

790:                                              ; preds = %785
  %791 = call i32 @llvm.ctlz.i32(i32 %788, i1 false) #4, !range !8
  %792 = trunc i32 %791 to i16
  %793 = sub nsw i32 17, %791
  %794 = load i32, i32* %5, align 4
  %795 = add nsw i32 %794, %793
  store i32 %795, i32* %5, align 4
  %796 = icmp ugt i16 %792, 17
  %797 = add nsw i32 %791, -17
  %798 = shl i32 %788, %797
  %799 = lshr i32 %788, %793
  %800 = select i1 %796, i32 %798, i32 %799
  %801 = lshr i32 %800, 4
  %802 = and i32 %801, 1023
  %803 = or i32 %802, 14336
  %804 = mul nuw nsw i32 %803, 24660
  %805 = lshr i32 %804, 19
  %806 = mul nsw i32 %795, 24660
  %807 = lshr i32 %806, 9
  %808 = add nuw nsw i32 %807, %805
  %809 = trunc i32 %808 to i16
  %810 = icmp sgt i16 %809, 0
  %811 = select i1 %810, i16 %809, i16 0
  %812 = add nuw i16 %811, 176
  store i16 %812, i16* %786, align 2
  %813 = icmp slt i16 %557, 11
  br i1 %813, label %815, label %824

814:                                              ; preds = %785
  store i16 176, i16* %786, align 2
  br label %824

815:                                              ; preds = %790
  %816 = icmp sgt i32 %795, -1
  br i1 %816, label %817, label %819

817:                                              ; preds = %815
  %818 = add nsw i16 %557, 11
  br label %824

819:                                              ; preds = %815
  %820 = sub nsw i32 0, %795
  %821 = lshr i32 %800, %820
  %822 = trunc i32 %821 to i16
  %823 = add i16 %557, %822
  br label %824

824:                                              ; preds = %790, %814, %817, %819
  %825 = phi i16 [ %557, %814 ], [ %818, %817 ], [ %823, %819 ], [ %557, %790 ]
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %787) #4
  %826 = getelementptr inbounds %struct.VadInstT_, %struct.VadInstT_* %0, i64 0, i32 13, i64 3
  %827 = getelementptr inbounds %struct.VadInstT_, %struct.VadInstT_* %0, i64 0, i32 14, i64 3
  %828 = lshr i64 %2, 3
  %829 = icmp eq i64 %828, 0
  br i1 %829, label %1055, label %830

830:                                              ; preds = %824
  %831 = load i16, i16* %826, align 2
  %832 = sext i16 %831 to i32
  %833 = shl nsw i32 %832, 16
  %834 = and i64 %828, 1
  %835 = icmp eq i64 %828, 1
  br i1 %835, label %871, label %836

836:                                              ; preds = %830
  %837 = sub nsw i64 %828, %834
  br label %838

838:                                              ; preds = %838, %836
  %839 = phi i32 [ %833, %836 ], [ %867, %838 ]
  %840 = phi i16* [ %20, %836 ], [ %862, %838 ]
  %841 = phi i16* [ %252, %836 ], [ %868, %838 ]
  %842 = phi i64 [ %837, %836 ], [ %869, %838 ]
  %843 = load i16, i16* %841, align 2
  %844 = sext i16 %843 to i32
  %845 = mul nsw i32 %844, 20972
  %846 = add nsw i32 %845, %839
  %847 = lshr i32 %846, 16
  %848 = trunc i32 %847 to i16
  %849 = getelementptr inbounds i16, i16* %840, i64 1
  store i16 %848, i16* %840, align 2
  %850 = shl nsw i32 %844, 14
  %851 = ashr i32 %846, 16
  %852 = mul nsw i32 %851, -20972
  %853 = add i32 %852, %850
  %854 = shl nsw i32 %853, 1
  %855 = getelementptr inbounds i16, i16* %841, i64 2
  %856 = load i16, i16* %855, align 2
  %857 = sext i16 %856 to i32
  %858 = mul nsw i32 %857, 20972
  %859 = add nsw i32 %858, %854
  %860 = lshr i32 %859, 16
  %861 = trunc i32 %860 to i16
  %862 = getelementptr inbounds i16, i16* %840, i64 2
  store i16 %861, i16* %849, align 2
  %863 = shl nsw i32 %857, 14
  %864 = ashr i32 %859, 16
  %865 = mul nsw i32 %864, -20972
  %866 = add i32 %865, %863
  %867 = shl nsw i32 %866, 1
  %868 = getelementptr inbounds i16, i16* %841, i64 4
  %869 = add i64 %842, -2
  %870 = icmp eq i64 %869, 0
  br i1 %870, label %871, label %838

871:                                              ; preds = %838, %830
  %872 = phi i32 [ undef, %830 ], [ %866, %838 ]
  %873 = phi i32 [ %833, %830 ], [ %867, %838 ]
  %874 = phi i16* [ %20, %830 ], [ %862, %838 ]
  %875 = phi i16* [ %252, %830 ], [ %868, %838 ]
  %876 = icmp eq i64 %834, 0
  br i1 %876, label %888, label %877

877:                                              ; preds = %871
  %878 = load i16, i16* %875, align 2
  %879 = sext i16 %878 to i32
  %880 = mul nsw i32 %879, 20972
  %881 = add nsw i32 %880, %873
  %882 = lshr i32 %881, 16
  %883 = trunc i32 %882 to i16
  store i16 %883, i16* %874, align 2
  %884 = ashr i32 %881, 16
  %885 = mul nsw i32 %884, -20972
  %886 = shl nsw i32 %879, 14
  %887 = add i32 %885, %886
  br label %888

888:                                              ; preds = %871, %877
  %889 = phi i32 [ %872, %871 ], [ %887, %877 ]
  %890 = lshr i32 %889, 15
  %891 = trunc i32 %890 to i16
  store i16 %891, i16* %826, align 2
  %892 = load i16, i16* %827, align 2
  %893 = sext i16 %892 to i32
  %894 = shl nsw i32 %893, 16
  %895 = getelementptr inbounds [60 x i16], [60 x i16]* %14, i64 0, i64 1
  %896 = and i64 %828, 1
  %897 = icmp eq i64 %828, 1
  br i1 %897, label %933, label %898

898:                                              ; preds = %888
  %899 = sub nsw i64 %828, %896
  br label %900

900:                                              ; preds = %900, %898
  %901 = phi i32 [ %894, %898 ], [ %929, %900 ]
  %902 = phi i16* [ %21, %898 ], [ %924, %900 ]
  %903 = phi i16* [ %895, %898 ], [ %930, %900 ]
  %904 = phi i64 [ %899, %898 ], [ %931, %900 ]
  %905 = load i16, i16* %903, align 2
  %906 = sext i16 %905 to i32
  %907 = mul nsw i32 %906, 5571
  %908 = add nsw i32 %907, %901
  %909 = lshr i32 %908, 16
  %910 = trunc i32 %909 to i16
  %911 = getelementptr inbounds i16, i16* %902, i64 1
  store i16 %910, i16* %902, align 2
  %912 = shl nsw i32 %906, 14
  %913 = ashr i32 %908, 16
  %914 = mul nsw i32 %913, -5571
  %915 = add nsw i32 %914, %912
  %916 = shl nsw i32 %915, 1
  %917 = getelementptr inbounds i16, i16* %903, i64 2
  %918 = load i16, i16* %917, align 2
  %919 = sext i16 %918 to i32
  %920 = mul nsw i32 %919, 5571
  %921 = add nsw i32 %920, %916
  %922 = lshr i32 %921, 16
  %923 = trunc i32 %922 to i16
  %924 = getelementptr inbounds i16, i16* %902, i64 2
  store i16 %923, i16* %911, align 2
  %925 = shl nsw i32 %919, 14
  %926 = ashr i32 %921, 16
  %927 = mul nsw i32 %926, -5571
  %928 = add nsw i32 %927, %925
  %929 = shl nsw i32 %928, 1
  %930 = getelementptr inbounds i16, i16* %903, i64 4
  %931 = add i64 %904, -2
  %932 = icmp eq i64 %931, 0
  br i1 %932, label %933, label %900

933:                                              ; preds = %900, %888
  %934 = phi i32 [ undef, %888 ], [ %928, %900 ]
  %935 = phi i32 [ %894, %888 ], [ %929, %900 ]
  %936 = phi i16* [ %21, %888 ], [ %924, %900 ]
  %937 = phi i16* [ %895, %888 ], [ %930, %900 ]
  %938 = icmp eq i64 %896, 0
  br i1 %938, label %950, label %939

939:                                              ; preds = %933
  %940 = load i16, i16* %937, align 2
  %941 = sext i16 %940 to i32
  %942 = mul nsw i32 %941, 5571
  %943 = add nsw i32 %942, %935
  %944 = lshr i32 %943, 16
  %945 = trunc i32 %944 to i16
  store i16 %945, i16* %936, align 2
  %946 = ashr i32 %943, 16
  %947 = mul nsw i32 %946, -5571
  %948 = shl nsw i32 %941, 14
  %949 = add nsw i32 %947, %948
  br label %950

950:                                              ; preds = %933, %939
  %951 = phi i32 [ %934, %933 ], [ %949, %939 ]
  %952 = lshr i32 %951, 15
  %953 = trunc i32 %952 to i16
  store i16 %953, i16* %827, align 2
  %954 = icmp ult i64 %2, 128
  br i1 %954, label %1039, label %955

955:                                              ; preds = %950
  %956 = and i64 %828, 2305843009213693936
  %957 = getelementptr [120 x i16], [120 x i16]* %12, i64 0, i64 %956
  %958 = getelementptr [120 x i16], [120 x i16]* %11, i64 0, i64 %956
  %959 = add nsw i64 %956, -16
  %960 = lshr exact i64 %959, 4
  %961 = add nuw nsw i64 %960, 1
  %962 = and i64 %961, 1
  %963 = icmp eq i64 %959, 0
  br i1 %963, label %1013, label %964

964:                                              ; preds = %955
  %965 = sub nuw nsw i64 %961, %962
  br label %966

966:                                              ; preds = %966, %964
  %967 = phi i64 [ 0, %964 ], [ %1010, %966 ]
  %968 = phi i64 [ %965, %964 ], [ %1011, %966 ]
  %969 = getelementptr [120 x i16], [120 x i16]* %12, i64 0, i64 %967
  %970 = getelementptr [120 x i16], [120 x i16]* %11, i64 0, i64 %967
  %971 = bitcast i16* %970 to <8 x i16>*
  %972 = load <8 x i16>, <8 x i16>* %971, align 16
  %973 = getelementptr i16, i16* %970, i64 8
  %974 = bitcast i16* %973 to <8 x i16>*
  %975 = load <8 x i16>, <8 x i16>* %974, align 16
  %976 = bitcast i16* %969 to <8 x i16>*
  %977 = load <8 x i16>, <8 x i16>* %976, align 16
  %978 = getelementptr i16, i16* %969, i64 8
  %979 = bitcast i16* %978 to <8 x i16>*
  %980 = load <8 x i16>, <8 x i16>* %979, align 16
  %981 = sub <8 x i16> %972, %977
  %982 = sub <8 x i16> %975, %980
  %983 = bitcast i16* %970 to <8 x i16>*
  store <8 x i16> %981, <8 x i16>* %983, align 16
  %984 = bitcast i16* %973 to <8 x i16>*
  store <8 x i16> %982, <8 x i16>* %984, align 16
  %985 = add <8 x i16> %977, %972
  %986 = add <8 x i16> %980, %975
  %987 = bitcast i16* %969 to <8 x i16>*
  store <8 x i16> %985, <8 x i16>* %987, align 16
  %988 = bitcast i16* %978 to <8 x i16>*
  store <8 x i16> %986, <8 x i16>* %988, align 16
  %989 = or i64 %967, 16
  %990 = getelementptr [120 x i16], [120 x i16]* %12, i64 0, i64 %989
  %991 = getelementptr [120 x i16], [120 x i16]* %11, i64 0, i64 %989
  %992 = bitcast i16* %991 to <8 x i16>*
  %993 = load <8 x i16>, <8 x i16>* %992, align 16
  %994 = getelementptr i16, i16* %991, i64 8
  %995 = bitcast i16* %994 to <8 x i16>*
  %996 = load <8 x i16>, <8 x i16>* %995, align 16
  %997 = bitcast i16* %990 to <8 x i16>*
  %998 = load <8 x i16>, <8 x i16>* %997, align 16
  %999 = getelementptr i16, i16* %990, i64 8
  %1000 = bitcast i16* %999 to <8 x i16>*
  %1001 = load <8 x i16>, <8 x i16>* %1000, align 16
  %1002 = sub <8 x i16> %993, %998
  %1003 = sub <8 x i16> %996, %1001
  %1004 = bitcast i16* %991 to <8 x i16>*
  store <8 x i16> %1002, <8 x i16>* %1004, align 16
  %1005 = bitcast i16* %994 to <8 x i16>*
  store <8 x i16> %1003, <8 x i16>* %1005, align 16
  %1006 = add <8 x i16> %998, %993
  %1007 = add <8 x i16> %1001, %996
  %1008 = bitcast i16* %990 to <8 x i16>*
  store <8 x i16> %1006, <8 x i16>* %1008, align 16
  %1009 = bitcast i16* %999 to <8 x i16>*
  store <8 x i16> %1007, <8 x i16>* %1009, align 16
  %1010 = add i64 %967, 32
  %1011 = add i64 %968, -2
  %1012 = icmp eq i64 %1011, 0
  br i1 %1012, label %1013, label %966, !llvm.loop !11

1013:                                             ; preds = %966, %955
  %1014 = phi i64 [ 0, %955 ], [ %1010, %966 ]
  %1015 = icmp eq i64 %962, 0
  br i1 %1015, label %1037, label %1016

1016:                                             ; preds = %1013
  %1017 = getelementptr [120 x i16], [120 x i16]* %12, i64 0, i64 %1014
  %1018 = getelementptr [120 x i16], [120 x i16]* %11, i64 0, i64 %1014
  %1019 = bitcast i16* %1018 to <8 x i16>*
  %1020 = load <8 x i16>, <8 x i16>* %1019, align 16
  %1021 = getelementptr i16, i16* %1018, i64 8
  %1022 = bitcast i16* %1021 to <8 x i16>*
  %1023 = load <8 x i16>, <8 x i16>* %1022, align 16
  %1024 = bitcast i16* %1017 to <8 x i16>*
  %1025 = load <8 x i16>, <8 x i16>* %1024, align 16
  %1026 = getelementptr i16, i16* %1017, i64 8
  %1027 = bitcast i16* %1026 to <8 x i16>*
  %1028 = load <8 x i16>, <8 x i16>* %1027, align 16
  %1029 = sub <8 x i16> %1020, %1025
  %1030 = sub <8 x i16> %1023, %1028
  %1031 = bitcast i16* %1018 to <8 x i16>*
  store <8 x i16> %1029, <8 x i16>* %1031, align 16
  %1032 = bitcast i16* %1021 to <8 x i16>*
  store <8 x i16> %1030, <8 x i16>* %1032, align 16
  %1033 = add <8 x i16> %1025, %1020
  %1034 = add <8 x i16> %1028, %1023
  %1035 = bitcast i16* %1017 to <8 x i16>*
  store <8 x i16> %1033, <8 x i16>* %1035, align 16
  %1036 = bitcast i16* %1026 to <8 x i16>*
  store <8 x i16> %1034, <8 x i16>* %1036, align 16
  br label %1037

1037:                                             ; preds = %1013, %1016
  %1038 = icmp eq i64 %828, %956
  br i1 %1038, label %1055, label %1039

1039:                                             ; preds = %1037, %950
  %1040 = phi i64 [ 0, %950 ], [ %956, %1037 ]
  %1041 = phi i16* [ %21, %950 ], [ %957, %1037 ]
  %1042 = phi i16* [ %20, %950 ], [ %958, %1037 ]
  br label %1043

1043:                                             ; preds = %1039, %1043
  %1044 = phi i64 [ %1053, %1043 ], [ %1040, %1039 ]
  %1045 = phi i16* [ %1051, %1043 ], [ %1041, %1039 ]
  %1046 = phi i16* [ %1049, %1043 ], [ %1042, %1039 ]
  %1047 = load i16, i16* %1046, align 2
  %1048 = load i16, i16* %1045, align 2
  %1049 = getelementptr inbounds i16, i16* %1046, i64 1
  %1050 = sub i16 %1047, %1048
  store i16 %1050, i16* %1046, align 2
  %1051 = getelementptr inbounds i16, i16* %1045, i64 1
  %1052 = add i16 %1048, %1047
  store i16 %1052, i16* %1045, align 2
  %1053 = add nuw nsw i64 %1044, 1
  %1054 = icmp eq i64 %1053, %828
  br i1 %1054, label %1055, label %1043, !llvm.loop !12

1055:                                             ; preds = %1043, %1037, %824
  %1056 = getelementptr inbounds i16, i16* %3, i64 2
  %1057 = bitcast i32* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %1057) #4
  store i32 0, i32* %6, align 4
  %1058 = call i32 @WebRtcSpl_Energy(i16* nonnull %20, i64 %828, i32* nonnull %6) #4
  %1059 = icmp eq i32 %1058, 0
  br i1 %1059, label %1084, label %1060

1060:                                             ; preds = %1055
  %1061 = call i32 @llvm.ctlz.i32(i32 %1058, i1 false) #4, !range !8
  %1062 = trunc i32 %1061 to i16
  %1063 = sub nsw i32 17, %1061
  %1064 = load i32, i32* %6, align 4
  %1065 = add nsw i32 %1064, %1063
  store i32 %1065, i32* %6, align 4
  %1066 = icmp ugt i16 %1062, 17
  %1067 = add nsw i32 %1061, -17
  %1068 = shl i32 %1058, %1067
  %1069 = lshr i32 %1058, %1063
  %1070 = select i1 %1066, i32 %1068, i32 %1069
  %1071 = lshr i32 %1070, 4
  %1072 = and i32 %1071, 1023
  %1073 = or i32 %1072, 14336
  %1074 = mul nuw nsw i32 %1073, 24660
  %1075 = lshr i32 %1074, 19
  %1076 = mul nsw i32 %1065, 24660
  %1077 = lshr i32 %1076, 9
  %1078 = add nuw nsw i32 %1077, %1075
  %1079 = trunc i32 %1078 to i16
  %1080 = icmp sgt i16 %1079, 0
  %1081 = select i1 %1080, i16 %1079, i16 0
  %1082 = add nuw i16 %1081, 272
  store i16 %1082, i16* %1056, align 2
  %1083 = icmp slt i16 %825, 11
  br i1 %1083, label %1085, label %1094

1084:                                             ; preds = %1055
  store i16 272, i16* %1056, align 2
  br label %1094

1085:                                             ; preds = %1060
  %1086 = icmp sgt i32 %1065, -1
  br i1 %1086, label %1087, label %1089

1087:                                             ; preds = %1085
  %1088 = add nsw i16 %825, 11
  br label %1094

1089:                                             ; preds = %1085
  %1090 = sub nsw i32 0, %1065
  %1091 = lshr i32 %1070, %1090
  %1092 = trunc i32 %1091 to i16
  %1093 = add i16 %825, %1092
  br label %1094

1094:                                             ; preds = %1060, %1084, %1087, %1089
  %1095 = phi i16 [ %825, %1084 ], [ %1088, %1087 ], [ %1093, %1089 ], [ %825, %1060 ]
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %1057) #4
  %1096 = getelementptr inbounds %struct.VadInstT_, %struct.VadInstT_* %0, i64 0, i32 13, i64 4
  %1097 = getelementptr inbounds %struct.VadInstT_, %struct.VadInstT_* %0, i64 0, i32 14, i64 4
  %1098 = lshr i64 %2, 4
  %1099 = icmp eq i64 %1098, 0
  br i1 %1099, label %1325, label %1100

1100:                                             ; preds = %1094
  %1101 = load i16, i16* %1096, align 2
  %1102 = sext i16 %1101 to i32
  %1103 = shl nsw i32 %1102, 16
  %1104 = and i64 %1098, 1
  %1105 = icmp eq i64 %1098, 1
  br i1 %1105, label %1141, label %1106

1106:                                             ; preds = %1100
  %1107 = sub nsw i64 %1098, %1104
  br label %1108

1108:                                             ; preds = %1108, %1106
  %1109 = phi i32 [ %1103, %1106 ], [ %1137, %1108 ]
  %1110 = phi i16* [ %251, %1106 ], [ %1132, %1108 ]
  %1111 = phi i16* [ %21, %1106 ], [ %1138, %1108 ]
  %1112 = phi i64 [ %1107, %1106 ], [ %1139, %1108 ]
  %1113 = load i16, i16* %1111, align 2
  %1114 = sext i16 %1113 to i32
  %1115 = mul nsw i32 %1114, 20972
  %1116 = add nsw i32 %1115, %1109
  %1117 = lshr i32 %1116, 16
  %1118 = trunc i32 %1117 to i16
  %1119 = getelementptr inbounds i16, i16* %1110, i64 1
  store i16 %1118, i16* %1110, align 2
  %1120 = shl nsw i32 %1114, 14
  %1121 = ashr i32 %1116, 16
  %1122 = mul nsw i32 %1121, -20972
  %1123 = add i32 %1122, %1120
  %1124 = shl nsw i32 %1123, 1
  %1125 = getelementptr inbounds i16, i16* %1111, i64 2
  %1126 = load i16, i16* %1125, align 2
  %1127 = sext i16 %1126 to i32
  %1128 = mul nsw i32 %1127, 20972
  %1129 = add nsw i32 %1128, %1124
  %1130 = lshr i32 %1129, 16
  %1131 = trunc i32 %1130 to i16
  %1132 = getelementptr inbounds i16, i16* %1110, i64 2
  store i16 %1131, i16* %1119, align 2
  %1133 = shl nsw i32 %1127, 14
  %1134 = ashr i32 %1129, 16
  %1135 = mul nsw i32 %1134, -20972
  %1136 = add i32 %1135, %1133
  %1137 = shl nsw i32 %1136, 1
  %1138 = getelementptr inbounds i16, i16* %1111, i64 4
  %1139 = add i64 %1112, -2
  %1140 = icmp eq i64 %1139, 0
  br i1 %1140, label %1141, label %1108

1141:                                             ; preds = %1108, %1100
  %1142 = phi i32 [ undef, %1100 ], [ %1136, %1108 ]
  %1143 = phi i32 [ %1103, %1100 ], [ %1137, %1108 ]
  %1144 = phi i16* [ %251, %1100 ], [ %1132, %1108 ]
  %1145 = phi i16* [ %21, %1100 ], [ %1138, %1108 ]
  %1146 = icmp eq i64 %1104, 0
  br i1 %1146, label %1158, label %1147

1147:                                             ; preds = %1141
  %1148 = load i16, i16* %1145, align 2
  %1149 = sext i16 %1148 to i32
  %1150 = mul nsw i32 %1149, 20972
  %1151 = add nsw i32 %1150, %1143
  %1152 = lshr i32 %1151, 16
  %1153 = trunc i32 %1152 to i16
  store i16 %1153, i16* %1144, align 2
  %1154 = ashr i32 %1151, 16
  %1155 = mul nsw i32 %1154, -20972
  %1156 = shl nsw i32 %1149, 14
  %1157 = add i32 %1155, %1156
  br label %1158

1158:                                             ; preds = %1141, %1147
  %1159 = phi i32 [ %1142, %1141 ], [ %1157, %1147 ]
  %1160 = lshr i32 %1159, 15
  %1161 = trunc i32 %1160 to i16
  store i16 %1161, i16* %1096, align 2
  %1162 = load i16, i16* %1097, align 2
  %1163 = sext i16 %1162 to i32
  %1164 = shl nsw i32 %1163, 16
  %1165 = getelementptr inbounds [120 x i16], [120 x i16]* %12, i64 0, i64 1
  %1166 = and i64 %1098, 1
  %1167 = icmp eq i64 %1098, 1
  br i1 %1167, label %1203, label %1168

1168:                                             ; preds = %1158
  %1169 = sub nsw i64 %1098, %1166
  br label %1170

1170:                                             ; preds = %1170, %1168
  %1171 = phi i32 [ %1164, %1168 ], [ %1199, %1170 ]
  %1172 = phi i16* [ %252, %1168 ], [ %1194, %1170 ]
  %1173 = phi i16* [ %1165, %1168 ], [ %1200, %1170 ]
  %1174 = phi i64 [ %1169, %1168 ], [ %1201, %1170 ]
  %1175 = load i16, i16* %1173, align 2
  %1176 = sext i16 %1175 to i32
  %1177 = mul nsw i32 %1176, 5571
  %1178 = add nsw i32 %1177, %1171
  %1179 = lshr i32 %1178, 16
  %1180 = trunc i32 %1179 to i16
  %1181 = getelementptr inbounds i16, i16* %1172, i64 1
  store i16 %1180, i16* %1172, align 2
  %1182 = shl nsw i32 %1176, 14
  %1183 = ashr i32 %1178, 16
  %1184 = mul nsw i32 %1183, -5571
  %1185 = add nsw i32 %1184, %1182
  %1186 = shl nsw i32 %1185, 1
  %1187 = getelementptr inbounds i16, i16* %1173, i64 2
  %1188 = load i16, i16* %1187, align 2
  %1189 = sext i16 %1188 to i32
  %1190 = mul nsw i32 %1189, 5571
  %1191 = add nsw i32 %1190, %1186
  %1192 = lshr i32 %1191, 16
  %1193 = trunc i32 %1192 to i16
  %1194 = getelementptr inbounds i16, i16* %1172, i64 2
  store i16 %1193, i16* %1181, align 2
  %1195 = shl nsw i32 %1189, 14
  %1196 = ashr i32 %1191, 16
  %1197 = mul nsw i32 %1196, -5571
  %1198 = add nsw i32 %1197, %1195
  %1199 = shl nsw i32 %1198, 1
  %1200 = getelementptr inbounds i16, i16* %1173, i64 4
  %1201 = add i64 %1174, -2
  %1202 = icmp eq i64 %1201, 0
  br i1 %1202, label %1203, label %1170

1203:                                             ; preds = %1170, %1158
  %1204 = phi i32 [ undef, %1158 ], [ %1198, %1170 ]
  %1205 = phi i32 [ %1164, %1158 ], [ %1199, %1170 ]
  %1206 = phi i16* [ %252, %1158 ], [ %1194, %1170 ]
  %1207 = phi i16* [ %1165, %1158 ], [ %1200, %1170 ]
  %1208 = icmp eq i64 %1166, 0
  br i1 %1208, label %1220, label %1209

1209:                                             ; preds = %1203
  %1210 = load i16, i16* %1207, align 2
  %1211 = sext i16 %1210 to i32
  %1212 = mul nsw i32 %1211, 5571
  %1213 = add nsw i32 %1212, %1205
  %1214 = lshr i32 %1213, 16
  %1215 = trunc i32 %1214 to i16
  store i16 %1215, i16* %1206, align 2
  %1216 = ashr i32 %1213, 16
  %1217 = mul nsw i32 %1216, -5571
  %1218 = shl nsw i32 %1211, 14
  %1219 = add nsw i32 %1217, %1218
  br label %1220

1220:                                             ; preds = %1203, %1209
  %1221 = phi i32 [ %1204, %1203 ], [ %1219, %1209 ]
  %1222 = lshr i32 %1221, 15
  %1223 = trunc i32 %1222 to i16
  store i16 %1223, i16* %1097, align 2
  %1224 = icmp ult i64 %2, 256
  br i1 %1224, label %1309, label %1225

1225:                                             ; preds = %1220
  %1226 = and i64 %1098, 1152921504606846960
  %1227 = getelementptr [60 x i16], [60 x i16]* %14, i64 0, i64 %1226
  %1228 = getelementptr [60 x i16], [60 x i16]* %13, i64 0, i64 %1226
  %1229 = add nsw i64 %1226, -16
  %1230 = lshr exact i64 %1229, 4
  %1231 = add nuw nsw i64 %1230, 1
  %1232 = and i64 %1231, 1
  %1233 = icmp eq i64 %1229, 0
  br i1 %1233, label %1283, label %1234

1234:                                             ; preds = %1225
  %1235 = sub nuw nsw i64 %1231, %1232
  br label %1236

1236:                                             ; preds = %1236, %1234
  %1237 = phi i64 [ 0, %1234 ], [ %1280, %1236 ]
  %1238 = phi i64 [ %1235, %1234 ], [ %1281, %1236 ]
  %1239 = getelementptr [60 x i16], [60 x i16]* %14, i64 0, i64 %1237
  %1240 = getelementptr [60 x i16], [60 x i16]* %13, i64 0, i64 %1237
  %1241 = bitcast i16* %1240 to <8 x i16>*
  %1242 = load <8 x i16>, <8 x i16>* %1241, align 16
  %1243 = getelementptr i16, i16* %1240, i64 8
  %1244 = bitcast i16* %1243 to <8 x i16>*
  %1245 = load <8 x i16>, <8 x i16>* %1244, align 16
  %1246 = bitcast i16* %1239 to <8 x i16>*
  %1247 = load <8 x i16>, <8 x i16>* %1246, align 16
  %1248 = getelementptr i16, i16* %1239, i64 8
  %1249 = bitcast i16* %1248 to <8 x i16>*
  %1250 = load <8 x i16>, <8 x i16>* %1249, align 16
  %1251 = sub <8 x i16> %1242, %1247
  %1252 = sub <8 x i16> %1245, %1250
  %1253 = bitcast i16* %1240 to <8 x i16>*
  store <8 x i16> %1251, <8 x i16>* %1253, align 16
  %1254 = bitcast i16* %1243 to <8 x i16>*
  store <8 x i16> %1252, <8 x i16>* %1254, align 16
  %1255 = add <8 x i16> %1247, %1242
  %1256 = add <8 x i16> %1250, %1245
  %1257 = bitcast i16* %1239 to <8 x i16>*
  store <8 x i16> %1255, <8 x i16>* %1257, align 16
  %1258 = bitcast i16* %1248 to <8 x i16>*
  store <8 x i16> %1256, <8 x i16>* %1258, align 16
  %1259 = or i64 %1237, 16
  %1260 = getelementptr [60 x i16], [60 x i16]* %14, i64 0, i64 %1259
  %1261 = getelementptr [60 x i16], [60 x i16]* %13, i64 0, i64 %1259
  %1262 = bitcast i16* %1261 to <8 x i16>*
  %1263 = load <8 x i16>, <8 x i16>* %1262, align 16
  %1264 = getelementptr i16, i16* %1261, i64 8
  %1265 = bitcast i16* %1264 to <8 x i16>*
  %1266 = load <8 x i16>, <8 x i16>* %1265, align 16
  %1267 = bitcast i16* %1260 to <8 x i16>*
  %1268 = load <8 x i16>, <8 x i16>* %1267, align 16
  %1269 = getelementptr i16, i16* %1260, i64 8
  %1270 = bitcast i16* %1269 to <8 x i16>*
  %1271 = load <8 x i16>, <8 x i16>* %1270, align 16
  %1272 = sub <8 x i16> %1263, %1268
  %1273 = sub <8 x i16> %1266, %1271
  %1274 = bitcast i16* %1261 to <8 x i16>*
  store <8 x i16> %1272, <8 x i16>* %1274, align 16
  %1275 = bitcast i16* %1264 to <8 x i16>*
  store <8 x i16> %1273, <8 x i16>* %1275, align 16
  %1276 = add <8 x i16> %1268, %1263
  %1277 = add <8 x i16> %1271, %1266
  %1278 = bitcast i16* %1260 to <8 x i16>*
  store <8 x i16> %1276, <8 x i16>* %1278, align 16
  %1279 = bitcast i16* %1269 to <8 x i16>*
  store <8 x i16> %1277, <8 x i16>* %1279, align 16
  %1280 = add i64 %1237, 32
  %1281 = add i64 %1238, -2
  %1282 = icmp eq i64 %1281, 0
  br i1 %1282, label %1283, label %1236, !llvm.loop !13

1283:                                             ; preds = %1236, %1225
  %1284 = phi i64 [ 0, %1225 ], [ %1280, %1236 ]
  %1285 = icmp eq i64 %1232, 0
  br i1 %1285, label %1307, label %1286

1286:                                             ; preds = %1283
  %1287 = getelementptr [60 x i16], [60 x i16]* %14, i64 0, i64 %1284
  %1288 = getelementptr [60 x i16], [60 x i16]* %13, i64 0, i64 %1284
  %1289 = bitcast i16* %1288 to <8 x i16>*
  %1290 = load <8 x i16>, <8 x i16>* %1289, align 16
  %1291 = getelementptr i16, i16* %1288, i64 8
  %1292 = bitcast i16* %1291 to <8 x i16>*
  %1293 = load <8 x i16>, <8 x i16>* %1292, align 16
  %1294 = bitcast i16* %1287 to <8 x i16>*
  %1295 = load <8 x i16>, <8 x i16>* %1294, align 16
  %1296 = getelementptr i16, i16* %1287, i64 8
  %1297 = bitcast i16* %1296 to <8 x i16>*
  %1298 = load <8 x i16>, <8 x i16>* %1297, align 16
  %1299 = sub <8 x i16> %1290, %1295
  %1300 = sub <8 x i16> %1293, %1298
  %1301 = bitcast i16* %1288 to <8 x i16>*
  store <8 x i16> %1299, <8 x i16>* %1301, align 16
  %1302 = bitcast i16* %1291 to <8 x i16>*
  store <8 x i16> %1300, <8 x i16>* %1302, align 16
  %1303 = add <8 x i16> %1295, %1290
  %1304 = add <8 x i16> %1298, %1293
  %1305 = bitcast i16* %1287 to <8 x i16>*
  store <8 x i16> %1303, <8 x i16>* %1305, align 16
  %1306 = bitcast i16* %1296 to <8 x i16>*
  store <8 x i16> %1304, <8 x i16>* %1306, align 16
  br label %1307

1307:                                             ; preds = %1283, %1286
  %1308 = icmp eq i64 %1098, %1226
  br i1 %1308, label %1325, label %1309

1309:                                             ; preds = %1307, %1220
  %1310 = phi i64 [ 0, %1220 ], [ %1226, %1307 ]
  %1311 = phi i16* [ %252, %1220 ], [ %1227, %1307 ]
  %1312 = phi i16* [ %251, %1220 ], [ %1228, %1307 ]
  br label %1313

1313:                                             ; preds = %1309, %1313
  %1314 = phi i64 [ %1323, %1313 ], [ %1310, %1309 ]
  %1315 = phi i16* [ %1321, %1313 ], [ %1311, %1309 ]
  %1316 = phi i16* [ %1319, %1313 ], [ %1312, %1309 ]
  %1317 = load i16, i16* %1316, align 2
  %1318 = load i16, i16* %1315, align 2
  %1319 = getelementptr inbounds i16, i16* %1316, i64 1
  %1320 = sub i16 %1317, %1318
  store i16 %1320, i16* %1316, align 2
  %1321 = getelementptr inbounds i16, i16* %1315, i64 1
  %1322 = add i16 %1318, %1317
  store i16 %1322, i16* %1315, align 2
  %1323 = add nuw nsw i64 %1314, 1
  %1324 = icmp eq i64 %1323, %1098
  br i1 %1324, label %1325, label %1313, !llvm.loop !14

1325:                                             ; preds = %1313, %1307, %1094
  %1326 = getelementptr inbounds i16, i16* %3, i64 1
  %1327 = bitcast i32* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %1327) #4
  store i32 0, i32* %9, align 4
  %1328 = call i32 @WebRtcSpl_Energy(i16* nonnull %251, i64 %1098, i32* nonnull %9) #4
  %1329 = icmp eq i32 %1328, 0
  br i1 %1329, label %1354, label %1330

1330:                                             ; preds = %1325
  %1331 = call i32 @llvm.ctlz.i32(i32 %1328, i1 false) #4, !range !8
  %1332 = trunc i32 %1331 to i16
  %1333 = sub nsw i32 17, %1331
  %1334 = load i32, i32* %9, align 4
  %1335 = add nsw i32 %1334, %1333
  store i32 %1335, i32* %9, align 4
  %1336 = icmp ugt i16 %1332, 17
  %1337 = add nsw i32 %1331, -17
  %1338 = shl i32 %1328, %1337
  %1339 = lshr i32 %1328, %1333
  %1340 = select i1 %1336, i32 %1338, i32 %1339
  %1341 = lshr i32 %1340, 4
  %1342 = and i32 %1341, 1023
  %1343 = or i32 %1342, 14336
  %1344 = mul nuw nsw i32 %1343, 24660
  %1345 = lshr i32 %1344, 19
  %1346 = mul nsw i32 %1335, 24660
  %1347 = lshr i32 %1346, 9
  %1348 = add nuw nsw i32 %1347, %1345
  %1349 = trunc i32 %1348 to i16
  %1350 = icmp sgt i16 %1349, 0
  %1351 = select i1 %1350, i16 %1349, i16 0
  %1352 = add nuw i16 %1351, 368
  store i16 %1352, i16* %1326, align 2
  %1353 = icmp slt i16 %1095, 11
  br i1 %1353, label %1355, label %1364

1354:                                             ; preds = %1325
  store i16 368, i16* %1326, align 2
  br label %1364

1355:                                             ; preds = %1330
  %1356 = icmp sgt i32 %1335, -1
  br i1 %1356, label %1357, label %1359

1357:                                             ; preds = %1355
  %1358 = add nsw i16 %1095, 11
  br label %1364

1359:                                             ; preds = %1355
  %1360 = sub nsw i32 0, %1335
  %1361 = lshr i32 %1340, %1360
  %1362 = trunc i32 %1361 to i16
  %1363 = add i16 %1095, %1362
  br label %1364

1364:                                             ; preds = %1330, %1354, %1357, %1359
  %1365 = phi i16 [ %1095, %1354 ], [ %1358, %1357 ], [ %1363, %1359 ], [ %1095, %1330 ]
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %1327) #4
  %1366 = getelementptr inbounds %struct.VadInstT_, %struct.VadInstT_* %0, i64 0, i32 15, i64 0
  br i1 %1099, label %1400, label %1367

1367:                                             ; preds = %1364
  %1368 = getelementptr inbounds %struct.VadInstT_, %struct.VadInstT_* %0, i64 0, i32 15, i64 1
  %1369 = getelementptr inbounds %struct.VadInstT_, %struct.VadInstT_* %0, i64 0, i32 15, i64 2
  %1370 = getelementptr inbounds %struct.VadInstT_, %struct.VadInstT_* %0, i64 0, i32 15, i64 3
  br label %1371

1371:                                             ; preds = %1371, %1367
  %1372 = phi i16* [ %20, %1367 ], [ %1397, %1371 ]
  %1373 = phi i16* [ %252, %1367 ], [ %1382, %1371 ]
  %1374 = phi i64 [ 0, %1367 ], [ %1398, %1371 ]
  %1375 = load i16, i16* %1373, align 2
  %1376 = sext i16 %1375 to i32
  %1377 = load i16, i16* %1366, align 2
  %1378 = sext i16 %1377 to i32
  %1379 = mul nsw i32 %1378, -13262
  %1380 = load i16, i16* %1368, align 2
  %1381 = sext i16 %1380 to i32
  store i16 %1377, i16* %1368, align 2
  %1382 = getelementptr inbounds i16, i16* %1373, i64 1
  %1383 = load i16, i16* %1373, align 2
  store i16 %1383, i16* %1366, align 2
  %1384 = load i16, i16* %1369, align 2
  %1385 = sext i16 %1384 to i32
  %1386 = mul nsw i32 %1385, 7756
  %1387 = load i16, i16* %1370, align 2
  %1388 = sext i16 %1387 to i32
  %1389 = mul nsw i32 %1388, -5620
  %1390 = add nsw i32 %1381, %1376
  %1391 = mul nsw i32 %1390, 6631
  %1392 = add nsw i32 %1391, %1379
  %1393 = add nsw i32 %1392, %1386
  %1394 = add nsw i32 %1393, %1389
  store i16 %1384, i16* %1370, align 2
  %1395 = lshr i32 %1394, 14
  %1396 = trunc i32 %1395 to i16
  store i16 %1396, i16* %1369, align 2
  %1397 = getelementptr inbounds i16, i16* %1372, i64 1
  store i16 %1396, i16* %1372, align 2
  %1398 = add nuw nsw i64 %1374, 1
  %1399 = icmp eq i64 %1398, %1098
  br i1 %1399, label %1400, label %1371

1400:                                             ; preds = %1371, %1364
  %1401 = bitcast i32* %10 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %1401) #4
  store i32 0, i32* %10, align 4
  %1402 = call i32 @WebRtcSpl_Energy(i16* nonnull %20, i64 %1098, i32* nonnull %10) #4
  %1403 = icmp eq i32 %1402, 0
  br i1 %1403, label %1428, label %1404

1404:                                             ; preds = %1400
  %1405 = call i32 @llvm.ctlz.i32(i32 %1402, i1 false) #4, !range !8
  %1406 = trunc i32 %1405 to i16
  %1407 = sub nsw i32 17, %1405
  %1408 = load i32, i32* %10, align 4
  %1409 = add nsw i32 %1408, %1407
  store i32 %1409, i32* %10, align 4
  %1410 = icmp ugt i16 %1406, 17
  %1411 = add nsw i32 %1405, -17
  %1412 = shl i32 %1402, %1411
  %1413 = lshr i32 %1402, %1407
  %1414 = select i1 %1410, i32 %1412, i32 %1413
  %1415 = lshr i32 %1414, 4
  %1416 = and i32 %1415, 1023
  %1417 = or i32 %1416, 14336
  %1418 = mul nuw nsw i32 %1417, 24660
  %1419 = lshr i32 %1418, 19
  %1420 = mul nsw i32 %1409, 24660
  %1421 = lshr i32 %1420, 9
  %1422 = add nuw nsw i32 %1421, %1419
  %1423 = trunc i32 %1422 to i16
  %1424 = icmp sgt i16 %1423, 0
  %1425 = select i1 %1424, i16 %1423, i16 0
  %1426 = add nuw i16 %1425, 368
  store i16 %1426, i16* %3, align 2
  %1427 = icmp slt i16 %1365, 11
  br i1 %1427, label %1429, label %1438

1428:                                             ; preds = %1400
  store i16 368, i16* %3, align 2
  br label %1438

1429:                                             ; preds = %1404
  %1430 = icmp sgt i32 %1409, -1
  br i1 %1430, label %1431, label %1433

1431:                                             ; preds = %1429
  %1432 = add nsw i16 %1365, 11
  br label %1438

1433:                                             ; preds = %1429
  %1434 = sub nsw i32 0, %1409
  %1435 = lshr i32 %1414, %1434
  %1436 = trunc i32 %1435 to i16
  %1437 = add i16 %1365, %1436
  br label %1438

1438:                                             ; preds = %1404, %1428, %1431, %1433
  %1439 = phi i16 [ %1365, %1428 ], [ %1432, %1431 ], [ %1437, %1433 ], [ %1365, %1404 ]
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %1401) #4
  call void @llvm.lifetime.end.p0i8(i64 120, i8* nonnull %18) #4
  call void @llvm.lifetime.end.p0i8(i64 120, i8* nonnull %17) #4
  call void @llvm.lifetime.end.p0i8(i64 240, i8* nonnull %16) #4
  call void @llvm.lifetime.end.p0i8(i64 240, i8* nonnull %15) #4
  ret i16 %1439
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

declare i32 @WebRtcSpl_Energy(i16*, i64, i32*) local_unnamed_addr #2

; Function Attrs: nounwind readnone speculatable
declare i32 @llvm.ctlz.i32(i32, i1 immarg) #3

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind readnone speculatable }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = distinct !{!2, !3}
!3 = !{!"llvm.loop.isvectorized", i32 1}
!4 = distinct !{!4, !5, !3}
!5 = !{!"llvm.loop.unroll.runtime.disable"}
!6 = distinct !{!6, !3}
!7 = distinct !{!7, !5, !3}
!8 = !{i32 0, i32 33}
!9 = distinct !{!9, !3}
!10 = distinct !{!10, !5, !3}
!11 = distinct !{!11, !3}
!12 = distinct !{!12, !5, !3}
!13 = distinct !{!13, !3}
!14 = distinct !{!14, !5, !3}
