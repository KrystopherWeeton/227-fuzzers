; ModuleID = '../../ui/ozone/platform/x11/x11_menu_utils.cc'
source_filename = "../../ui/ozone/platform/x11/x11_menu_utils.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"class.ui::X11MenuUtils" = type { %"class.ui::PlatformMenuUtils" }
%"class.ui::PlatformMenuUtils" = type { i32 (...)** }
%"class.std::__1::basic_string" = type { %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" = type { %union.anon }
%union.anon = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" = type { i8*, i64, i64 }
%"class.std::__1::basic_string.1" = type { %"class.std::__1::__compressed_pair.2" }
%"class.std::__1::__compressed_pair.2" = type { %"struct.std::__1::__compressed_pair_elem.3" }
%"struct.std::__1::__compressed_pair_elem.3" = type { %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__rep" }
%"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__rep" = type { %union.anon.4 }
%union.anon.4 = type { %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__long" }
%"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__long" = type { i16*, i64, i64 }
%"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short" = type { [11 x i16], %struct.anon.5 }
%struct.anon.5 = type { %"struct.std::__1::__padding.6", i8 }
%"struct.std::__1::__padding.6" = type { [1 x i8] }

@_ZTVN2ui12X11MenuUtilsE = hidden unnamed_addr constant { [6 x i8*] } { [6 x i8*] [i8* null, i8* null, i8* bitcast (void (%"class.ui::X11MenuUtils"*)* @_ZN2ui12X11MenuUtilsD2Ev to i8*), i8* bitcast (void (%"class.ui::X11MenuUtils"*)* @_ZN2ui12X11MenuUtilsD0Ev to i8*), i8* bitcast (i32 (%"class.ui::X11MenuUtils"*)* @_ZNK2ui12X11MenuUtils22GetCurrentKeyModifiersEv to i8*), i8* bitcast (void (%"class.std::__1::basic_string"*, %"class.ui::X11MenuUtils"*, i32)* @_ZNK2ui12X11MenuUtils12ToDBusKeySymENS_12KeyboardCodeE to i8*)] }, align 8

@_ZN2ui12X11MenuUtilsC1Ev = hidden unnamed_addr alias void (%"class.ui::X11MenuUtils"*), void (%"class.ui::X11MenuUtils"*)* @_ZN2ui12X11MenuUtilsC2Ev
@_ZN2ui12X11MenuUtilsD1Ev = hidden unnamed_addr alias void (%"class.ui::X11MenuUtils"*), void (%"class.ui::X11MenuUtils"*)* @_ZN2ui12X11MenuUtilsD2Ev

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2ui12X11MenuUtilsC2Ev(%"class.ui::X11MenuUtils"*) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.ui::X11MenuUtils", %"class.ui::X11MenuUtils"* %0, i64 0, i32 0
  tail call void @_ZN2ui17PlatformMenuUtilsC2Ev(%"class.ui::PlatformMenuUtils"* %2) #5
  %3 = getelementptr inbounds %"class.ui::X11MenuUtils", %"class.ui::X11MenuUtils"* %0, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [6 x i8*] }, { [6 x i8*] }* @_ZTVN2ui12X11MenuUtilsE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %3, align 8
  ret void
}

declare void @_ZN2ui17PlatformMenuUtilsC2Ev(%"class.ui::PlatformMenuUtils"*) unnamed_addr #1

; Function Attrs: nounwind
declare void @_ZN2ui17PlatformMenuUtilsD2Ev(%"class.ui::PlatformMenuUtils"*) unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2ui12X11MenuUtilsD2Ev(%"class.ui::X11MenuUtils"*) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.ui::X11MenuUtils", %"class.ui::X11MenuUtils"* %0, i64 0, i32 0
  tail call void @_ZN2ui17PlatformMenuUtilsD2Ev(%"class.ui::PlatformMenuUtils"* %2) #5
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2ui12X11MenuUtilsD0Ev(%"class.ui::X11MenuUtils"*) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.ui::X11MenuUtils", %"class.ui::X11MenuUtils"* %0, i64 0, i32 0
  tail call void @_ZN2ui17PlatformMenuUtilsD2Ev(%"class.ui::PlatformMenuUtils"* %2) #5
  %3 = bitcast %"class.ui::X11MenuUtils"* %0 to i8*
  tail call void @_ZdlPv(i8* %3) #6
  ret void
}

; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(i8*) local_unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define hidden i32 @_ZNK2ui12X11MenuUtils22GetCurrentKeyModifiersEv(%"class.ui::X11MenuUtils"* nocapture readnone) unnamed_addr #0 align 2 {
  %2 = tail call i32 @_ZN2ui19GetModifierKeyStateEv() #5
  ret i32 %2
}

declare i32 @_ZN2ui19GetModifierKeyStateEv() local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZNK2ui12X11MenuUtils12ToDBusKeySymENS_12KeyboardCodeE(%"class.std::__1::basic_string"* noalias sret, %"class.ui::X11MenuUtils"* nocapture readnone, i32) unnamed_addr #0 align 2 {
  %4 = alloca %"class.std::__1::basic_string.1", align 8
  %5 = bitcast %"class.std::__1::basic_string.1"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %5) #5
  %6 = tail call i32 @_ZN2ui24XKeysymForWindowsKeyCodeENS_12KeyboardCodeEb(i32 %2, i1 zeroext false) #5
  %7 = sext i32 %6 to i64
  %8 = tail call zeroext i16 @_ZN2ui30GetUnicodeCharacterFromXKeySymEm(i64 %7) #5
  %9 = bitcast %"class.std::__1::basic_string.1"* %4 to %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"*
  %10 = getelementptr inbounds %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short", %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"* %9, i64 0, i32 1, i32 1
  store i8 1, i8* %10, align 1
  %11 = bitcast %"class.std::__1::basic_string.1"* %4 to i16*
  store i16 %8, i16* %11, align 8
  %12 = getelementptr inbounds i16, i16* %11, i64 1
  store i16 0, i16* %12, align 2
  call void @_ZN4base11UTF16ToUTF8ENS_16BasicStringPieceIDsNSt3__111char_traitsIDsEEEE(%"class.std::__1::basic_string"* sret %0, i16* nonnull %11, i64 1) #5
  %13 = load i8, i8* %10, align 1
  %14 = icmp slt i8 %13, 0
  br i1 %14, label %15, label %18

15:                                               ; preds = %3
  %16 = bitcast %"class.std::__1::basic_string.1"* %4 to i8**
  %17 = load i8*, i8** %16, align 8
  call void @_ZdlPv(i8* %17) #6
  br label %18

18:                                               ; preds = %3, %15
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %5) #5
  ret void
}

declare void @_ZN4base11UTF16ToUTF8ENS_16BasicStringPieceIDsNSt3__111char_traitsIDsEEEE(%"class.std::__1::basic_string"* sret, i16*, i64) local_unnamed_addr #1

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #4

declare zeroext i16 @_ZN2ui30GetUnicodeCharacterFromXKeySymEm(i64) local_unnamed_addr #1

declare i32 @_ZN2ui24XKeysymForWindowsKeyCodeENS_12KeyboardCodeEb(i32, i1 zeroext) local_unnamed_addr #1

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #4

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { argmemonly nounwind }
attributes #5 = { nounwind }
attributes #6 = { builtin nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
