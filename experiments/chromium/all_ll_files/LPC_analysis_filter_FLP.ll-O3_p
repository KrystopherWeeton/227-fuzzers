; ModuleID = '../../third_party/opus/src/silk/float/LPC_analysis_filter_FLP.c'
source_filename = "../../third_party/opus/src/silk/float/LPC_analysis_filter_FLP.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"
module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"
module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

@.str = private unnamed_addr constant [34 x i8] c"assertion failed: Order <= length\00", align 1
@.str.1 = private unnamed_addr constant [64 x i8] c"../../third_party/opus/src/silk/float/LPC_analysis_filter_FLP.c\00", align 1
@.str.2 = private unnamed_addr constant [20 x i8] c"assertion failed: 0\00", align 1

; Function Attrs: nounwind ssp uwtable
define hidden void @silk_LPC_analysis_filter_FLP(float* nocapture, float* readonly, float* nocapture readonly, i32, i32) local_unnamed_addr #0 {
  %6 = icmp sgt i32 %4, %3
  br i1 %6, label %7, label %8

7:                                                ; preds = %5
  tail call void @celt_fatal(i8* getelementptr inbounds ([34 x i8], [34 x i8]* @.str, i64 0, i64 0), i8* getelementptr inbounds ([64 x i8], [64 x i8]* @.str.1, i64 0, i64 0), i32 218) #3
  unreachable

8:                                                ; preds = %5
  switch i32 %4, label %967 [
    i32 6, label %9
    i32 8, label %139
    i32 10, label %297
    i32 12, label %483
    i32 16, label %697
  ]

9:                                                ; preds = %8
  %10 = icmp sgt i32 %3, 6
  br i1 %10, label %11, label %968

11:                                               ; preds = %9
  %12 = getelementptr inbounds float, float* %1, i64 1
  %13 = getelementptr inbounds float, float* %1, i64 2
  %14 = getelementptr inbounds float, float* %1, i64 3
  %15 = getelementptr inbounds float, float* %1, i64 4
  %16 = getelementptr inbounds float, float* %1, i64 5
  %17 = zext i32 %3 to i64
  %18 = add nsw i64 %17, -6
  %19 = icmp ult i64 %18, 4
  br i1 %19, label %99, label %20

20:                                               ; preds = %11
  %21 = getelementptr float, float* %0, i64 6
  %22 = bitcast float* %21 to i8*
  %23 = getelementptr float, float* %0, i64 %17
  %24 = getelementptr float, float* %2, i64 %17
  %25 = getelementptr float, float* %1, i64 5
  %26 = bitcast float* %25 to i8*
  %27 = getelementptr i8, i8* %26, i64 1
  %28 = icmp ult float* %21, %24
  %29 = icmp ugt float* %23, %2
  %30 = and i1 %28, %29
  %31 = icmp ugt i8* %27, %22
  %32 = icmp ult float* %16, %23
  %33 = and i1 %31, %32
  %34 = or i1 %30, %33
  br i1 %34, label %99, label %35

35:                                               ; preds = %20
  %36 = and i64 %18, -4
  %37 = add nsw i64 %36, 6
  %38 = load float, float* %1, align 4, !alias.scope !2
  %39 = insertelement <4 x float> undef, float %38, i32 0
  %40 = shufflevector <4 x float> %39, <4 x float> undef, <4 x i32> zeroinitializer
  %41 = load float, float* %12, align 4, !alias.scope !2
  %42 = insertelement <4 x float> undef, float %41, i32 0
  %43 = shufflevector <4 x float> %42, <4 x float> undef, <4 x i32> zeroinitializer
  %44 = load float, float* %13, align 4, !alias.scope !2
  %45 = insertelement <4 x float> undef, float %44, i32 0
  %46 = shufflevector <4 x float> %45, <4 x float> undef, <4 x i32> zeroinitializer
  %47 = load float, float* %14, align 4, !alias.scope !2
  %48 = insertelement <4 x float> undef, float %47, i32 0
  %49 = shufflevector <4 x float> %48, <4 x float> undef, <4 x i32> zeroinitializer
  %50 = load float, float* %15, align 4, !alias.scope !2
  %51 = insertelement <4 x float> undef, float %50, i32 0
  %52 = shufflevector <4 x float> %51, <4 x float> undef, <4 x i32> zeroinitializer
  %53 = load float, float* %16, align 4, !alias.scope !2
  %54 = insertelement <4 x float> undef, float %53, i32 0
  %55 = shufflevector <4 x float> %54, <4 x float> undef, <4 x i32> zeroinitializer
  br label %56

56:                                               ; preds = %56, %35
  %57 = phi i64 [ 0, %35 ], [ %95, %56 ]
  %58 = add i64 %57, 6
  %59 = add i64 %57, 5
  %60 = getelementptr inbounds float, float* %2, i64 %59
  %61 = bitcast float* %60 to <4 x float>*
  %62 = load <4 x float>, <4 x float>* %61, align 4, !alias.scope !5
  %63 = fmul <4 x float> %62, %40
  %64 = getelementptr inbounds float, float* %60, i64 -1
  %65 = bitcast float* %64 to <4 x float>*
  %66 = load <4 x float>, <4 x float>* %65, align 4, !alias.scope !5
  %67 = fmul <4 x float> %66, %43
  %68 = fadd <4 x float> %63, %67
  %69 = getelementptr inbounds float, float* %60, i64 -2
  %70 = bitcast float* %69 to <4 x float>*
  %71 = load <4 x float>, <4 x float>* %70, align 4, !alias.scope !5
  %72 = fmul <4 x float> %71, %46
  %73 = fadd <4 x float> %68, %72
  %74 = getelementptr inbounds float, float* %60, i64 -3
  %75 = bitcast float* %74 to <4 x float>*
  %76 = load <4 x float>, <4 x float>* %75, align 4, !alias.scope !5
  %77 = fmul <4 x float> %76, %49
  %78 = fadd <4 x float> %73, %77
  %79 = getelementptr inbounds float, float* %60, i64 -4
  %80 = bitcast float* %79 to <4 x float>*
  %81 = load <4 x float>, <4 x float>* %80, align 4, !alias.scope !5
  %82 = fmul <4 x float> %81, %52
  %83 = fadd <4 x float> %78, %82
  %84 = getelementptr inbounds float, float* %2, i64 %57
  %85 = bitcast float* %84 to <4 x float>*
  %86 = load <4 x float>, <4 x float>* %85, align 4, !alias.scope !5
  %87 = fmul <4 x float> %86, %55
  %88 = fadd <4 x float> %83, %87
  %89 = getelementptr inbounds float, float* %2, i64 %58
  %90 = bitcast float* %89 to <4 x float>*
  %91 = load <4 x float>, <4 x float>* %90, align 4, !alias.scope !5
  %92 = fsub <4 x float> %91, %88
  %93 = getelementptr inbounds float, float* %0, i64 %58
  %94 = bitcast float* %93 to <4 x float>*
  store <4 x float> %92, <4 x float>* %94, align 4, !alias.scope !7, !noalias !9
  %95 = add i64 %57, 4
  %96 = icmp eq i64 %95, %36
  br i1 %96, label %97, label %56, !llvm.loop !10

97:                                               ; preds = %56
  %98 = icmp eq i64 %18, %36
  br i1 %98, label %968, label %99

99:                                               ; preds = %97, %20, %11
  %100 = phi i64 [ 6, %20 ], [ 6, %11 ], [ %37, %97 ]
  br label %101

101:                                              ; preds = %99, %101
  %102 = phi i64 [ %137, %101 ], [ %100, %99 ]
  %103 = add nsw i64 %102, -1
  %104 = getelementptr inbounds float, float* %2, i64 %103
  %105 = load float, float* %104, align 4
  %106 = load float, float* %1, align 4
  %107 = fmul float %105, %106
  %108 = getelementptr inbounds float, float* %104, i64 -1
  %109 = load float, float* %108, align 4
  %110 = load float, float* %12, align 4
  %111 = fmul float %109, %110
  %112 = fadd float %107, %111
  %113 = getelementptr inbounds float, float* %104, i64 -2
  %114 = load float, float* %113, align 4
  %115 = load float, float* %13, align 4
  %116 = fmul float %114, %115
  %117 = fadd float %112, %116
  %118 = getelementptr inbounds float, float* %104, i64 -3
  %119 = load float, float* %118, align 4
  %120 = load float, float* %14, align 4
  %121 = fmul float %119, %120
  %122 = fadd float %117, %121
  %123 = getelementptr inbounds float, float* %104, i64 -4
  %124 = load float, float* %123, align 4
  %125 = load float, float* %15, align 4
  %126 = fmul float %124, %125
  %127 = fadd float %122, %126
  %128 = getelementptr inbounds float, float* %104, i64 -5
  %129 = load float, float* %128, align 4
  %130 = load float, float* %16, align 4
  %131 = fmul float %129, %130
  %132 = fadd float %127, %131
  %133 = getelementptr inbounds float, float* %2, i64 %102
  %134 = load float, float* %133, align 4
  %135 = fsub float %134, %132
  %136 = getelementptr inbounds float, float* %0, i64 %102
  store float %135, float* %136, align 4
  %137 = add nuw nsw i64 %102, 1
  %138 = icmp eq i64 %137, %17
  br i1 %138, label %968, label %101, !llvm.loop !12

139:                                              ; preds = %8
  %140 = icmp sgt i32 %3, 8
  br i1 %140, label %141, label %968

141:                                              ; preds = %139
  %142 = getelementptr inbounds float, float* %1, i64 1
  %143 = getelementptr inbounds float, float* %1, i64 2
  %144 = getelementptr inbounds float, float* %1, i64 3
  %145 = getelementptr inbounds float, float* %1, i64 4
  %146 = getelementptr inbounds float, float* %1, i64 5
  %147 = getelementptr inbounds float, float* %1, i64 6
  %148 = getelementptr inbounds float, float* %1, i64 7
  %149 = zext i32 %3 to i64
  %150 = add nsw i64 %149, -8
  %151 = icmp ult i64 %150, 4
  br i1 %151, label %247, label %152

152:                                              ; preds = %141
  %153 = getelementptr float, float* %0, i64 8
  %154 = bitcast float* %153 to i8*
  %155 = getelementptr float, float* %0, i64 %149
  %156 = getelementptr float, float* %2, i64 %149
  %157 = getelementptr float, float* %1, i64 7
  %158 = bitcast float* %157 to i8*
  %159 = getelementptr i8, i8* %158, i64 1
  %160 = icmp ult float* %153, %156
  %161 = icmp ugt float* %155, %2
  %162 = and i1 %160, %161
  %163 = icmp ugt i8* %159, %154
  %164 = icmp ult float* %148, %155
  %165 = and i1 %163, %164
  %166 = or i1 %162, %165
  br i1 %166, label %247, label %167

167:                                              ; preds = %152
  %168 = and i64 %150, -4
  %169 = add nsw i64 %168, 8
  %170 = load float, float* %1, align 4, !alias.scope !13
  %171 = insertelement <4 x float> undef, float %170, i32 0
  %172 = shufflevector <4 x float> %171, <4 x float> undef, <4 x i32> zeroinitializer
  %173 = load float, float* %142, align 4, !alias.scope !13
  %174 = insertelement <4 x float> undef, float %173, i32 0
  %175 = shufflevector <4 x float> %174, <4 x float> undef, <4 x i32> zeroinitializer
  %176 = load float, float* %143, align 4, !alias.scope !13
  %177 = insertelement <4 x float> undef, float %176, i32 0
  %178 = shufflevector <4 x float> %177, <4 x float> undef, <4 x i32> zeroinitializer
  %179 = load float, float* %144, align 4, !alias.scope !13
  %180 = insertelement <4 x float> undef, float %179, i32 0
  %181 = shufflevector <4 x float> %180, <4 x float> undef, <4 x i32> zeroinitializer
  %182 = load float, float* %145, align 4, !alias.scope !13
  %183 = insertelement <4 x float> undef, float %182, i32 0
  %184 = shufflevector <4 x float> %183, <4 x float> undef, <4 x i32> zeroinitializer
  %185 = load float, float* %146, align 4, !alias.scope !13
  %186 = insertelement <4 x float> undef, float %185, i32 0
  %187 = shufflevector <4 x float> %186, <4 x float> undef, <4 x i32> zeroinitializer
  %188 = load float, float* %147, align 4, !alias.scope !13
  %189 = insertelement <4 x float> undef, float %188, i32 0
  %190 = shufflevector <4 x float> %189, <4 x float> undef, <4 x i32> zeroinitializer
  %191 = load float, float* %148, align 4, !alias.scope !13
  %192 = insertelement <4 x float> undef, float %191, i32 0
  %193 = shufflevector <4 x float> %192, <4 x float> undef, <4 x i32> zeroinitializer
  br label %194

194:                                              ; preds = %194, %167
  %195 = phi i64 [ 0, %167 ], [ %243, %194 ]
  %196 = add i64 %195, 8
  %197 = add i64 %195, 7
  %198 = getelementptr inbounds float, float* %2, i64 %197
  %199 = bitcast float* %198 to <4 x float>*
  %200 = load <4 x float>, <4 x float>* %199, align 4, !alias.scope !16
  %201 = fmul <4 x float> %200, %172
  %202 = getelementptr inbounds float, float* %198, i64 -1
  %203 = bitcast float* %202 to <4 x float>*
  %204 = load <4 x float>, <4 x float>* %203, align 4, !alias.scope !16
  %205 = fmul <4 x float> %204, %175
  %206 = fadd <4 x float> %201, %205
  %207 = getelementptr inbounds float, float* %198, i64 -2
  %208 = bitcast float* %207 to <4 x float>*
  %209 = load <4 x float>, <4 x float>* %208, align 4, !alias.scope !16
  %210 = fmul <4 x float> %209, %178
  %211 = fadd <4 x float> %206, %210
  %212 = getelementptr inbounds float, float* %198, i64 -3
  %213 = bitcast float* %212 to <4 x float>*
  %214 = load <4 x float>, <4 x float>* %213, align 4, !alias.scope !16
  %215 = fmul <4 x float> %214, %181
  %216 = fadd <4 x float> %211, %215
  %217 = getelementptr inbounds float, float* %198, i64 -4
  %218 = bitcast float* %217 to <4 x float>*
  %219 = load <4 x float>, <4 x float>* %218, align 4, !alias.scope !16
  %220 = fmul <4 x float> %219, %184
  %221 = fadd <4 x float> %216, %220
  %222 = getelementptr inbounds float, float* %198, i64 -5
  %223 = bitcast float* %222 to <4 x float>*
  %224 = load <4 x float>, <4 x float>* %223, align 4, !alias.scope !16
  %225 = fmul <4 x float> %224, %187
  %226 = fadd <4 x float> %221, %225
  %227 = getelementptr inbounds float, float* %198, i64 -6
  %228 = bitcast float* %227 to <4 x float>*
  %229 = load <4 x float>, <4 x float>* %228, align 4, !alias.scope !16
  %230 = fmul <4 x float> %229, %190
  %231 = fadd <4 x float> %226, %230
  %232 = getelementptr inbounds float, float* %2, i64 %195
  %233 = bitcast float* %232 to <4 x float>*
  %234 = load <4 x float>, <4 x float>* %233, align 4, !alias.scope !16
  %235 = fmul <4 x float> %234, %193
  %236 = fadd <4 x float> %231, %235
  %237 = getelementptr inbounds float, float* %2, i64 %196
  %238 = bitcast float* %237 to <4 x float>*
  %239 = load <4 x float>, <4 x float>* %238, align 4, !alias.scope !16
  %240 = fsub <4 x float> %239, %236
  %241 = getelementptr inbounds float, float* %0, i64 %196
  %242 = bitcast float* %241 to <4 x float>*
  store <4 x float> %240, <4 x float>* %242, align 4, !alias.scope !18, !noalias !20
  %243 = add i64 %195, 4
  %244 = icmp eq i64 %243, %168
  br i1 %244, label %245, label %194, !llvm.loop !21

245:                                              ; preds = %194
  %246 = icmp eq i64 %150, %168
  br i1 %246, label %968, label %247

247:                                              ; preds = %245, %152, %141
  %248 = phi i64 [ 8, %152 ], [ 8, %141 ], [ %169, %245 ]
  br label %249

249:                                              ; preds = %247, %249
  %250 = phi i64 [ %295, %249 ], [ %248, %247 ]
  %251 = add nsw i64 %250, -1
  %252 = getelementptr inbounds float, float* %2, i64 %251
  %253 = load float, float* %252, align 4
  %254 = load float, float* %1, align 4
  %255 = fmul float %253, %254
  %256 = getelementptr inbounds float, float* %252, i64 -1
  %257 = load float, float* %256, align 4
  %258 = load float, float* %142, align 4
  %259 = fmul float %257, %258
  %260 = fadd float %255, %259
  %261 = getelementptr inbounds float, float* %252, i64 -2
  %262 = load float, float* %261, align 4
  %263 = load float, float* %143, align 4
  %264 = fmul float %262, %263
  %265 = fadd float %260, %264
  %266 = getelementptr inbounds float, float* %252, i64 -3
  %267 = load float, float* %266, align 4
  %268 = load float, float* %144, align 4
  %269 = fmul float %267, %268
  %270 = fadd float %265, %269
  %271 = getelementptr inbounds float, float* %252, i64 -4
  %272 = load float, float* %271, align 4
  %273 = load float, float* %145, align 4
  %274 = fmul float %272, %273
  %275 = fadd float %270, %274
  %276 = getelementptr inbounds float, float* %252, i64 -5
  %277 = load float, float* %276, align 4
  %278 = load float, float* %146, align 4
  %279 = fmul float %277, %278
  %280 = fadd float %275, %279
  %281 = getelementptr inbounds float, float* %252, i64 -6
  %282 = load float, float* %281, align 4
  %283 = load float, float* %147, align 4
  %284 = fmul float %282, %283
  %285 = fadd float %280, %284
  %286 = getelementptr inbounds float, float* %252, i64 -7
  %287 = load float, float* %286, align 4
  %288 = load float, float* %148, align 4
  %289 = fmul float %287, %288
  %290 = fadd float %285, %289
  %291 = getelementptr inbounds float, float* %2, i64 %250
  %292 = load float, float* %291, align 4
  %293 = fsub float %292, %290
  %294 = getelementptr inbounds float, float* %0, i64 %250
  store float %293, float* %294, align 4
  %295 = add nuw nsw i64 %250, 1
  %296 = icmp eq i64 %295, %149
  br i1 %296, label %968, label %249, !llvm.loop !22

297:                                              ; preds = %8
  %298 = icmp sgt i32 %3, 10
  br i1 %298, label %299, label %968

299:                                              ; preds = %297
  %300 = getelementptr inbounds float, float* %1, i64 1
  %301 = getelementptr inbounds float, float* %1, i64 2
  %302 = getelementptr inbounds float, float* %1, i64 3
  %303 = getelementptr inbounds float, float* %1, i64 4
  %304 = getelementptr inbounds float, float* %1, i64 5
  %305 = getelementptr inbounds float, float* %1, i64 6
  %306 = getelementptr inbounds float, float* %1, i64 7
  %307 = getelementptr inbounds float, float* %1, i64 8
  %308 = getelementptr inbounds float, float* %1, i64 9
  %309 = zext i32 %3 to i64
  %310 = add nsw i64 %309, -10
  %311 = icmp ult i64 %310, 4
  br i1 %311, label %423, label %312

312:                                              ; preds = %299
  %313 = getelementptr float, float* %0, i64 10
  %314 = bitcast float* %313 to i8*
  %315 = getelementptr float, float* %0, i64 %309
  %316 = getelementptr float, float* %2, i64 %309
  %317 = getelementptr float, float* %1, i64 9
  %318 = bitcast float* %317 to i8*
  %319 = getelementptr i8, i8* %318, i64 1
  %320 = icmp ult float* %313, %316
  %321 = icmp ugt float* %315, %2
  %322 = and i1 %320, %321
  %323 = icmp ugt i8* %319, %314
  %324 = icmp ult float* %308, %315
  %325 = and i1 %323, %324
  %326 = or i1 %322, %325
  br i1 %326, label %423, label %327

327:                                              ; preds = %312
  %328 = and i64 %310, -4
  %329 = add nsw i64 %328, 10
  %330 = load float, float* %1, align 4, !alias.scope !23
  %331 = insertelement <4 x float> undef, float %330, i32 0
  %332 = shufflevector <4 x float> %331, <4 x float> undef, <4 x i32> zeroinitializer
  %333 = load float, float* %300, align 4, !alias.scope !23
  %334 = insertelement <4 x float> undef, float %333, i32 0
  %335 = shufflevector <4 x float> %334, <4 x float> undef, <4 x i32> zeroinitializer
  %336 = load float, float* %301, align 4, !alias.scope !23
  %337 = insertelement <4 x float> undef, float %336, i32 0
  %338 = shufflevector <4 x float> %337, <4 x float> undef, <4 x i32> zeroinitializer
  %339 = load float, float* %302, align 4, !alias.scope !23
  %340 = insertelement <4 x float> undef, float %339, i32 0
  %341 = shufflevector <4 x float> %340, <4 x float> undef, <4 x i32> zeroinitializer
  %342 = load float, float* %303, align 4, !alias.scope !23
  %343 = insertelement <4 x float> undef, float %342, i32 0
  %344 = shufflevector <4 x float> %343, <4 x float> undef, <4 x i32> zeroinitializer
  %345 = load float, float* %304, align 4, !alias.scope !23
  %346 = insertelement <4 x float> undef, float %345, i32 0
  %347 = shufflevector <4 x float> %346, <4 x float> undef, <4 x i32> zeroinitializer
  %348 = load float, float* %305, align 4, !alias.scope !23
  %349 = insertelement <4 x float> undef, float %348, i32 0
  %350 = shufflevector <4 x float> %349, <4 x float> undef, <4 x i32> zeroinitializer
  %351 = load float, float* %306, align 4, !alias.scope !23
  %352 = insertelement <4 x float> undef, float %351, i32 0
  %353 = shufflevector <4 x float> %352, <4 x float> undef, <4 x i32> zeroinitializer
  %354 = load float, float* %307, align 4, !alias.scope !23
  %355 = insertelement <4 x float> undef, float %354, i32 0
  %356 = shufflevector <4 x float> %355, <4 x float> undef, <4 x i32> zeroinitializer
  %357 = load float, float* %308, align 4, !alias.scope !23
  %358 = insertelement <4 x float> undef, float %357, i32 0
  %359 = shufflevector <4 x float> %358, <4 x float> undef, <4 x i32> zeroinitializer
  br label %360

360:                                              ; preds = %360, %327
  %361 = phi i64 [ 0, %327 ], [ %419, %360 ]
  %362 = add i64 %361, 10
  %363 = add i64 %361, 9
  %364 = getelementptr inbounds float, float* %2, i64 %363
  %365 = bitcast float* %364 to <4 x float>*
  %366 = load <4 x float>, <4 x float>* %365, align 4, !alias.scope !26
  %367 = fmul <4 x float> %366, %332
  %368 = getelementptr inbounds float, float* %364, i64 -1
  %369 = bitcast float* %368 to <4 x float>*
  %370 = load <4 x float>, <4 x float>* %369, align 4, !alias.scope !26
  %371 = fmul <4 x float> %370, %335
  %372 = fadd <4 x float> %367, %371
  %373 = getelementptr inbounds float, float* %364, i64 -2
  %374 = bitcast float* %373 to <4 x float>*
  %375 = load <4 x float>, <4 x float>* %374, align 4, !alias.scope !26
  %376 = fmul <4 x float> %375, %338
  %377 = fadd <4 x float> %372, %376
  %378 = getelementptr inbounds float, float* %364, i64 -3
  %379 = bitcast float* %378 to <4 x float>*
  %380 = load <4 x float>, <4 x float>* %379, align 4, !alias.scope !26
  %381 = fmul <4 x float> %380, %341
  %382 = fadd <4 x float> %377, %381
  %383 = getelementptr inbounds float, float* %364, i64 -4
  %384 = bitcast float* %383 to <4 x float>*
  %385 = load <4 x float>, <4 x float>* %384, align 4, !alias.scope !26
  %386 = fmul <4 x float> %385, %344
  %387 = fadd <4 x float> %382, %386
  %388 = getelementptr inbounds float, float* %364, i64 -5
  %389 = bitcast float* %388 to <4 x float>*
  %390 = load <4 x float>, <4 x float>* %389, align 4, !alias.scope !26
  %391 = fmul <4 x float> %390, %347
  %392 = fadd <4 x float> %387, %391
  %393 = getelementptr inbounds float, float* %364, i64 -6
  %394 = bitcast float* %393 to <4 x float>*
  %395 = load <4 x float>, <4 x float>* %394, align 4, !alias.scope !26
  %396 = fmul <4 x float> %395, %350
  %397 = fadd <4 x float> %392, %396
  %398 = getelementptr inbounds float, float* %364, i64 -7
  %399 = bitcast float* %398 to <4 x float>*
  %400 = load <4 x float>, <4 x float>* %399, align 4, !alias.scope !26
  %401 = fmul <4 x float> %400, %353
  %402 = fadd <4 x float> %397, %401
  %403 = getelementptr inbounds float, float* %364, i64 -8
  %404 = bitcast float* %403 to <4 x float>*
  %405 = load <4 x float>, <4 x float>* %404, align 4, !alias.scope !26
  %406 = fmul <4 x float> %405, %356
  %407 = fadd <4 x float> %402, %406
  %408 = getelementptr inbounds float, float* %2, i64 %361
  %409 = bitcast float* %408 to <4 x float>*
  %410 = load <4 x float>, <4 x float>* %409, align 4, !alias.scope !26
  %411 = fmul <4 x float> %410, %359
  %412 = fadd <4 x float> %407, %411
  %413 = getelementptr inbounds float, float* %2, i64 %362
  %414 = bitcast float* %413 to <4 x float>*
  %415 = load <4 x float>, <4 x float>* %414, align 4, !alias.scope !26
  %416 = fsub <4 x float> %415, %412
  %417 = getelementptr inbounds float, float* %0, i64 %362
  %418 = bitcast float* %417 to <4 x float>*
  store <4 x float> %416, <4 x float>* %418, align 4, !alias.scope !28, !noalias !30
  %419 = add i64 %361, 4
  %420 = icmp eq i64 %419, %328
  br i1 %420, label %421, label %360, !llvm.loop !31

421:                                              ; preds = %360
  %422 = icmp eq i64 %310, %328
  br i1 %422, label %968, label %423

423:                                              ; preds = %421, %312, %299
  %424 = phi i64 [ 10, %312 ], [ 10, %299 ], [ %329, %421 ]
  br label %425

425:                                              ; preds = %423, %425
  %426 = phi i64 [ %481, %425 ], [ %424, %423 ]
  %427 = add nsw i64 %426, -1
  %428 = getelementptr inbounds float, float* %2, i64 %427
  %429 = load float, float* %428, align 4
  %430 = load float, float* %1, align 4
  %431 = fmul float %429, %430
  %432 = getelementptr inbounds float, float* %428, i64 -1
  %433 = load float, float* %432, align 4
  %434 = load float, float* %300, align 4
  %435 = fmul float %433, %434
  %436 = fadd float %431, %435
  %437 = getelementptr inbounds float, float* %428, i64 -2
  %438 = load float, float* %437, align 4
  %439 = load float, float* %301, align 4
  %440 = fmul float %438, %439
  %441 = fadd float %436, %440
  %442 = getelementptr inbounds float, float* %428, i64 -3
  %443 = load float, float* %442, align 4
  %444 = load float, float* %302, align 4
  %445 = fmul float %443, %444
  %446 = fadd float %441, %445
  %447 = getelementptr inbounds float, float* %428, i64 -4
  %448 = load float, float* %447, align 4
  %449 = load float, float* %303, align 4
  %450 = fmul float %448, %449
  %451 = fadd float %446, %450
  %452 = getelementptr inbounds float, float* %428, i64 -5
  %453 = load float, float* %452, align 4
  %454 = load float, float* %304, align 4
  %455 = fmul float %453, %454
  %456 = fadd float %451, %455
  %457 = getelementptr inbounds float, float* %428, i64 -6
  %458 = load float, float* %457, align 4
  %459 = load float, float* %305, align 4
  %460 = fmul float %458, %459
  %461 = fadd float %456, %460
  %462 = getelementptr inbounds float, float* %428, i64 -7
  %463 = load float, float* %462, align 4
  %464 = load float, float* %306, align 4
  %465 = fmul float %463, %464
  %466 = fadd float %461, %465
  %467 = getelementptr inbounds float, float* %428, i64 -8
  %468 = load float, float* %467, align 4
  %469 = load float, float* %307, align 4
  %470 = fmul float %468, %469
  %471 = fadd float %466, %470
  %472 = getelementptr inbounds float, float* %428, i64 -9
  %473 = load float, float* %472, align 4
  %474 = load float, float* %308, align 4
  %475 = fmul float %473, %474
  %476 = fadd float %471, %475
  %477 = getelementptr inbounds float, float* %2, i64 %426
  %478 = load float, float* %477, align 4
  %479 = fsub float %478, %476
  %480 = getelementptr inbounds float, float* %0, i64 %426
  store float %479, float* %480, align 4
  %481 = add nuw nsw i64 %426, 1
  %482 = icmp eq i64 %481, %309
  br i1 %482, label %968, label %425, !llvm.loop !32

483:                                              ; preds = %8
  %484 = icmp sgt i32 %3, 12
  br i1 %484, label %485, label %968

485:                                              ; preds = %483
  %486 = getelementptr inbounds float, float* %1, i64 1
  %487 = getelementptr inbounds float, float* %1, i64 2
  %488 = getelementptr inbounds float, float* %1, i64 3
  %489 = getelementptr inbounds float, float* %1, i64 4
  %490 = getelementptr inbounds float, float* %1, i64 5
  %491 = getelementptr inbounds float, float* %1, i64 6
  %492 = getelementptr inbounds float, float* %1, i64 7
  %493 = getelementptr inbounds float, float* %1, i64 8
  %494 = getelementptr inbounds float, float* %1, i64 9
  %495 = getelementptr inbounds float, float* %1, i64 10
  %496 = getelementptr inbounds float, float* %1, i64 11
  %497 = zext i32 %3 to i64
  %498 = add nsw i64 %497, -12
  %499 = icmp ult i64 %498, 4
  br i1 %499, label %627, label %500

500:                                              ; preds = %485
  %501 = getelementptr float, float* %0, i64 12
  %502 = bitcast float* %501 to i8*
  %503 = getelementptr float, float* %0, i64 %497
  %504 = getelementptr float, float* %2, i64 %497
  %505 = getelementptr float, float* %1, i64 11
  %506 = bitcast float* %505 to i8*
  %507 = getelementptr i8, i8* %506, i64 1
  %508 = icmp ult float* %501, %504
  %509 = icmp ugt float* %503, %2
  %510 = and i1 %508, %509
  %511 = icmp ugt i8* %507, %502
  %512 = icmp ult float* %496, %503
  %513 = and i1 %511, %512
  %514 = or i1 %510, %513
  br i1 %514, label %627, label %515

515:                                              ; preds = %500
  %516 = and i64 %498, -4
  %517 = add nsw i64 %516, 12
  %518 = load float, float* %1, align 4, !alias.scope !33
  %519 = insertelement <4 x float> undef, float %518, i32 0
  %520 = shufflevector <4 x float> %519, <4 x float> undef, <4 x i32> zeroinitializer
  %521 = load float, float* %486, align 4, !alias.scope !33
  %522 = insertelement <4 x float> undef, float %521, i32 0
  %523 = shufflevector <4 x float> %522, <4 x float> undef, <4 x i32> zeroinitializer
  %524 = load float, float* %487, align 4, !alias.scope !33
  %525 = insertelement <4 x float> undef, float %524, i32 0
  %526 = shufflevector <4 x float> %525, <4 x float> undef, <4 x i32> zeroinitializer
  %527 = load float, float* %488, align 4, !alias.scope !33
  %528 = insertelement <4 x float> undef, float %527, i32 0
  %529 = shufflevector <4 x float> %528, <4 x float> undef, <4 x i32> zeroinitializer
  %530 = load float, float* %489, align 4, !alias.scope !33
  %531 = insertelement <4 x float> undef, float %530, i32 0
  %532 = shufflevector <4 x float> %531, <4 x float> undef, <4 x i32> zeroinitializer
  %533 = load float, float* %490, align 4, !alias.scope !33
  %534 = insertelement <4 x float> undef, float %533, i32 0
  %535 = shufflevector <4 x float> %534, <4 x float> undef, <4 x i32> zeroinitializer
  %536 = load float, float* %491, align 4, !alias.scope !33
  %537 = insertelement <4 x float> undef, float %536, i32 0
  %538 = shufflevector <4 x float> %537, <4 x float> undef, <4 x i32> zeroinitializer
  %539 = load float, float* %492, align 4, !alias.scope !33
  %540 = insertelement <4 x float> undef, float %539, i32 0
  %541 = shufflevector <4 x float> %540, <4 x float> undef, <4 x i32> zeroinitializer
  %542 = load float, float* %493, align 4, !alias.scope !33
  %543 = insertelement <4 x float> undef, float %542, i32 0
  %544 = shufflevector <4 x float> %543, <4 x float> undef, <4 x i32> zeroinitializer
  %545 = load float, float* %494, align 4, !alias.scope !33
  %546 = insertelement <4 x float> undef, float %545, i32 0
  %547 = shufflevector <4 x float> %546, <4 x float> undef, <4 x i32> zeroinitializer
  %548 = load float, float* %495, align 4, !alias.scope !33
  %549 = insertelement <4 x float> undef, float %548, i32 0
  %550 = shufflevector <4 x float> %549, <4 x float> undef, <4 x i32> zeroinitializer
  %551 = load float, float* %496, align 4, !alias.scope !33
  %552 = insertelement <4 x float> undef, float %551, i32 0
  %553 = shufflevector <4 x float> %552, <4 x float> undef, <4 x i32> zeroinitializer
  br label %554

554:                                              ; preds = %554, %515
  %555 = phi i64 [ 0, %515 ], [ %623, %554 ]
  %556 = add i64 %555, 12
  %557 = add i64 %555, 11
  %558 = getelementptr inbounds float, float* %2, i64 %557
  %559 = bitcast float* %558 to <4 x float>*
  %560 = load <4 x float>, <4 x float>* %559, align 4, !alias.scope !36
  %561 = fmul <4 x float> %560, %520
  %562 = getelementptr inbounds float, float* %558, i64 -1
  %563 = bitcast float* %562 to <4 x float>*
  %564 = load <4 x float>, <4 x float>* %563, align 4, !alias.scope !36
  %565 = fmul <4 x float> %564, %523
  %566 = fadd <4 x float> %561, %565
  %567 = getelementptr inbounds float, float* %558, i64 -2
  %568 = bitcast float* %567 to <4 x float>*
  %569 = load <4 x float>, <4 x float>* %568, align 4, !alias.scope !36
  %570 = fmul <4 x float> %569, %526
  %571 = fadd <4 x float> %566, %570
  %572 = getelementptr inbounds float, float* %558, i64 -3
  %573 = bitcast float* %572 to <4 x float>*
  %574 = load <4 x float>, <4 x float>* %573, align 4, !alias.scope !36
  %575 = fmul <4 x float> %574, %529
  %576 = fadd <4 x float> %571, %575
  %577 = getelementptr inbounds float, float* %558, i64 -4
  %578 = bitcast float* %577 to <4 x float>*
  %579 = load <4 x float>, <4 x float>* %578, align 4, !alias.scope !36
  %580 = fmul <4 x float> %579, %532
  %581 = fadd <4 x float> %576, %580
  %582 = getelementptr inbounds float, float* %558, i64 -5
  %583 = bitcast float* %582 to <4 x float>*
  %584 = load <4 x float>, <4 x float>* %583, align 4, !alias.scope !36
  %585 = fmul <4 x float> %584, %535
  %586 = fadd <4 x float> %581, %585
  %587 = getelementptr inbounds float, float* %558, i64 -6
  %588 = bitcast float* %587 to <4 x float>*
  %589 = load <4 x float>, <4 x float>* %588, align 4, !alias.scope !36
  %590 = fmul <4 x float> %589, %538
  %591 = fadd <4 x float> %586, %590
  %592 = getelementptr inbounds float, float* %558, i64 -7
  %593 = bitcast float* %592 to <4 x float>*
  %594 = load <4 x float>, <4 x float>* %593, align 4, !alias.scope !36
  %595 = fmul <4 x float> %594, %541
  %596 = fadd <4 x float> %591, %595
  %597 = getelementptr inbounds float, float* %558, i64 -8
  %598 = bitcast float* %597 to <4 x float>*
  %599 = load <4 x float>, <4 x float>* %598, align 4, !alias.scope !36
  %600 = fmul <4 x float> %599, %544
  %601 = fadd <4 x float> %596, %600
  %602 = getelementptr inbounds float, float* %558, i64 -9
  %603 = bitcast float* %602 to <4 x float>*
  %604 = load <4 x float>, <4 x float>* %603, align 4, !alias.scope !36
  %605 = fmul <4 x float> %604, %547
  %606 = fadd <4 x float> %601, %605
  %607 = getelementptr inbounds float, float* %558, i64 -10
  %608 = bitcast float* %607 to <4 x float>*
  %609 = load <4 x float>, <4 x float>* %608, align 4, !alias.scope !36
  %610 = fmul <4 x float> %609, %550
  %611 = fadd <4 x float> %606, %610
  %612 = getelementptr inbounds float, float* %2, i64 %555
  %613 = bitcast float* %612 to <4 x float>*
  %614 = load <4 x float>, <4 x float>* %613, align 4, !alias.scope !36
  %615 = fmul <4 x float> %614, %553
  %616 = fadd <4 x float> %611, %615
  %617 = getelementptr inbounds float, float* %2, i64 %556
  %618 = bitcast float* %617 to <4 x float>*
  %619 = load <4 x float>, <4 x float>* %618, align 4, !alias.scope !36
  %620 = fsub <4 x float> %619, %616
  %621 = getelementptr inbounds float, float* %0, i64 %556
  %622 = bitcast float* %621 to <4 x float>*
  store <4 x float> %620, <4 x float>* %622, align 4, !alias.scope !38, !noalias !40
  %623 = add i64 %555, 4
  %624 = icmp eq i64 %623, %516
  br i1 %624, label %625, label %554, !llvm.loop !41

625:                                              ; preds = %554
  %626 = icmp eq i64 %498, %516
  br i1 %626, label %968, label %627

627:                                              ; preds = %625, %500, %485
  %628 = phi i64 [ 12, %500 ], [ 12, %485 ], [ %517, %625 ]
  br label %629

629:                                              ; preds = %627, %629
  %630 = phi i64 [ %695, %629 ], [ %628, %627 ]
  %631 = add nsw i64 %630, -1
  %632 = getelementptr inbounds float, float* %2, i64 %631
  %633 = load float, float* %632, align 4
  %634 = load float, float* %1, align 4
  %635 = fmul float %633, %634
  %636 = getelementptr inbounds float, float* %632, i64 -1
  %637 = load float, float* %636, align 4
  %638 = load float, float* %486, align 4
  %639 = fmul float %637, %638
  %640 = fadd float %635, %639
  %641 = getelementptr inbounds float, float* %632, i64 -2
  %642 = load float, float* %641, align 4
  %643 = load float, float* %487, align 4
  %644 = fmul float %642, %643
  %645 = fadd float %640, %644
  %646 = getelementptr inbounds float, float* %632, i64 -3
  %647 = load float, float* %646, align 4
  %648 = load float, float* %488, align 4
  %649 = fmul float %647, %648
  %650 = fadd float %645, %649
  %651 = getelementptr inbounds float, float* %632, i64 -4
  %652 = load float, float* %651, align 4
  %653 = load float, float* %489, align 4
  %654 = fmul float %652, %653
  %655 = fadd float %650, %654
  %656 = getelementptr inbounds float, float* %632, i64 -5
  %657 = load float, float* %656, align 4
  %658 = load float, float* %490, align 4
  %659 = fmul float %657, %658
  %660 = fadd float %655, %659
  %661 = getelementptr inbounds float, float* %632, i64 -6
  %662 = load float, float* %661, align 4
  %663 = load float, float* %491, align 4
  %664 = fmul float %662, %663
  %665 = fadd float %660, %664
  %666 = getelementptr inbounds float, float* %632, i64 -7
  %667 = load float, float* %666, align 4
  %668 = load float, float* %492, align 4
  %669 = fmul float %667, %668
  %670 = fadd float %665, %669
  %671 = getelementptr inbounds float, float* %632, i64 -8
  %672 = load float, float* %671, align 4
  %673 = load float, float* %493, align 4
  %674 = fmul float %672, %673
  %675 = fadd float %670, %674
  %676 = getelementptr inbounds float, float* %632, i64 -9
  %677 = load float, float* %676, align 4
  %678 = load float, float* %494, align 4
  %679 = fmul float %677, %678
  %680 = fadd float %675, %679
  %681 = getelementptr inbounds float, float* %632, i64 -10
  %682 = load float, float* %681, align 4
  %683 = load float, float* %495, align 4
  %684 = fmul float %682, %683
  %685 = fadd float %680, %684
  %686 = getelementptr inbounds float, float* %632, i64 -11
  %687 = load float, float* %686, align 4
  %688 = load float, float* %496, align 4
  %689 = fmul float %687, %688
  %690 = fadd float %685, %689
  %691 = getelementptr inbounds float, float* %2, i64 %630
  %692 = load float, float* %691, align 4
  %693 = fsub float %692, %690
  %694 = getelementptr inbounds float, float* %0, i64 %630
  store float %693, float* %694, align 4
  %695 = add nuw nsw i64 %630, 1
  %696 = icmp eq i64 %695, %497
  br i1 %696, label %968, label %629, !llvm.loop !42

697:                                              ; preds = %8
  %698 = icmp sgt i32 %3, 16
  br i1 %698, label %699, label %968

699:                                              ; preds = %697
  %700 = getelementptr inbounds float, float* %1, i64 1
  %701 = getelementptr inbounds float, float* %1, i64 2
  %702 = getelementptr inbounds float, float* %1, i64 3
  %703 = getelementptr inbounds float, float* %1, i64 4
  %704 = getelementptr inbounds float, float* %1, i64 5
  %705 = getelementptr inbounds float, float* %1, i64 6
  %706 = getelementptr inbounds float, float* %1, i64 7
  %707 = getelementptr inbounds float, float* %1, i64 8
  %708 = getelementptr inbounds float, float* %1, i64 9
  %709 = getelementptr inbounds float, float* %1, i64 10
  %710 = getelementptr inbounds float, float* %1, i64 11
  %711 = getelementptr inbounds float, float* %1, i64 12
  %712 = getelementptr inbounds float, float* %1, i64 13
  %713 = getelementptr inbounds float, float* %1, i64 14
  %714 = getelementptr inbounds float, float* %1, i64 15
  %715 = zext i32 %3 to i64
  %716 = add nsw i64 %715, -16
  %717 = icmp ult i64 %716, 4
  br i1 %717, label %877, label %718

718:                                              ; preds = %699
  %719 = getelementptr float, float* %0, i64 16
  %720 = bitcast float* %719 to i8*
  %721 = getelementptr float, float* %0, i64 %715
  %722 = getelementptr float, float* %2, i64 %715
  %723 = getelementptr float, float* %1, i64 15
  %724 = bitcast float* %723 to i8*
  %725 = getelementptr i8, i8* %724, i64 1
  %726 = icmp ult float* %719, %722
  %727 = icmp ugt float* %721, %2
  %728 = and i1 %726, %727
  %729 = icmp ugt i8* %725, %720
  %730 = icmp ult float* %714, %721
  %731 = and i1 %729, %730
  %732 = or i1 %728, %731
  br i1 %732, label %877, label %733

733:                                              ; preds = %718
  %734 = and i64 %716, -4
  %735 = add nsw i64 %734, 16
  %736 = load float, float* %1, align 4, !alias.scope !43
  %737 = insertelement <4 x float> undef, float %736, i32 0
  %738 = shufflevector <4 x float> %737, <4 x float> undef, <4 x i32> zeroinitializer
  %739 = load float, float* %700, align 4, !alias.scope !43
  %740 = insertelement <4 x float> undef, float %739, i32 0
  %741 = shufflevector <4 x float> %740, <4 x float> undef, <4 x i32> zeroinitializer
  %742 = load float, float* %701, align 4, !alias.scope !43
  %743 = insertelement <4 x float> undef, float %742, i32 0
  %744 = shufflevector <4 x float> %743, <4 x float> undef, <4 x i32> zeroinitializer
  %745 = load float, float* %702, align 4, !alias.scope !43
  %746 = insertelement <4 x float> undef, float %745, i32 0
  %747 = shufflevector <4 x float> %746, <4 x float> undef, <4 x i32> zeroinitializer
  %748 = load float, float* %703, align 4, !alias.scope !43
  %749 = insertelement <4 x float> undef, float %748, i32 0
  %750 = shufflevector <4 x float> %749, <4 x float> undef, <4 x i32> zeroinitializer
  %751 = load float, float* %704, align 4, !alias.scope !43
  %752 = insertelement <4 x float> undef, float %751, i32 0
  %753 = shufflevector <4 x float> %752, <4 x float> undef, <4 x i32> zeroinitializer
  %754 = load float, float* %705, align 4, !alias.scope !43
  %755 = insertelement <4 x float> undef, float %754, i32 0
  %756 = shufflevector <4 x float> %755, <4 x float> undef, <4 x i32> zeroinitializer
  %757 = load float, float* %706, align 4, !alias.scope !43
  %758 = insertelement <4 x float> undef, float %757, i32 0
  %759 = shufflevector <4 x float> %758, <4 x float> undef, <4 x i32> zeroinitializer
  %760 = load float, float* %707, align 4, !alias.scope !43
  %761 = insertelement <4 x float> undef, float %760, i32 0
  %762 = shufflevector <4 x float> %761, <4 x float> undef, <4 x i32> zeroinitializer
  %763 = load float, float* %708, align 4, !alias.scope !43
  %764 = insertelement <4 x float> undef, float %763, i32 0
  %765 = shufflevector <4 x float> %764, <4 x float> undef, <4 x i32> zeroinitializer
  %766 = load float, float* %709, align 4, !alias.scope !43
  %767 = insertelement <4 x float> undef, float %766, i32 0
  %768 = shufflevector <4 x float> %767, <4 x float> undef, <4 x i32> zeroinitializer
  %769 = load float, float* %710, align 4, !alias.scope !43
  %770 = insertelement <4 x float> undef, float %769, i32 0
  %771 = shufflevector <4 x float> %770, <4 x float> undef, <4 x i32> zeroinitializer
  %772 = load float, float* %711, align 4, !alias.scope !43
  %773 = insertelement <4 x float> undef, float %772, i32 0
  %774 = shufflevector <4 x float> %773, <4 x float> undef, <4 x i32> zeroinitializer
  %775 = load float, float* %712, align 4, !alias.scope !43
  %776 = insertelement <4 x float> undef, float %775, i32 0
  %777 = shufflevector <4 x float> %776, <4 x float> undef, <4 x i32> zeroinitializer
  %778 = load float, float* %713, align 4, !alias.scope !43
  %779 = insertelement <4 x float> undef, float %778, i32 0
  %780 = shufflevector <4 x float> %779, <4 x float> undef, <4 x i32> zeroinitializer
  %781 = load float, float* %714, align 4, !alias.scope !43
  %782 = insertelement <4 x float> undef, float %781, i32 0
  %783 = shufflevector <4 x float> %782, <4 x float> undef, <4 x i32> zeroinitializer
  br label %784

784:                                              ; preds = %784, %733
  %785 = phi i64 [ 0, %733 ], [ %873, %784 ]
  %786 = add i64 %785, 16
  %787 = add i64 %785, 15
  %788 = getelementptr inbounds float, float* %2, i64 %787
  %789 = bitcast float* %788 to <4 x float>*
  %790 = load <4 x float>, <4 x float>* %789, align 4, !alias.scope !46
  %791 = fmul <4 x float> %790, %738
  %792 = getelementptr inbounds float, float* %788, i64 -1
  %793 = bitcast float* %792 to <4 x float>*
  %794 = load <4 x float>, <4 x float>* %793, align 4, !alias.scope !46
  %795 = fmul <4 x float> %794, %741
  %796 = fadd <4 x float> %791, %795
  %797 = getelementptr inbounds float, float* %788, i64 -2
  %798 = bitcast float* %797 to <4 x float>*
  %799 = load <4 x float>, <4 x float>* %798, align 4, !alias.scope !46
  %800 = fmul <4 x float> %799, %744
  %801 = fadd <4 x float> %796, %800
  %802 = getelementptr inbounds float, float* %788, i64 -3
  %803 = bitcast float* %802 to <4 x float>*
  %804 = load <4 x float>, <4 x float>* %803, align 4, !alias.scope !46
  %805 = fmul <4 x float> %804, %747
  %806 = fadd <4 x float> %801, %805
  %807 = getelementptr inbounds float, float* %788, i64 -4
  %808 = bitcast float* %807 to <4 x float>*
  %809 = load <4 x float>, <4 x float>* %808, align 4, !alias.scope !46
  %810 = fmul <4 x float> %809, %750
  %811 = fadd <4 x float> %806, %810
  %812 = getelementptr inbounds float, float* %788, i64 -5
  %813 = bitcast float* %812 to <4 x float>*
  %814 = load <4 x float>, <4 x float>* %813, align 4, !alias.scope !46
  %815 = fmul <4 x float> %814, %753
  %816 = fadd <4 x float> %811, %815
  %817 = getelementptr inbounds float, float* %788, i64 -6
  %818 = bitcast float* %817 to <4 x float>*
  %819 = load <4 x float>, <4 x float>* %818, align 4, !alias.scope !46
  %820 = fmul <4 x float> %819, %756
  %821 = fadd <4 x float> %816, %820
  %822 = getelementptr inbounds float, float* %788, i64 -7
  %823 = bitcast float* %822 to <4 x float>*
  %824 = load <4 x float>, <4 x float>* %823, align 4, !alias.scope !46
  %825 = fmul <4 x float> %824, %759
  %826 = fadd <4 x float> %821, %825
  %827 = getelementptr inbounds float, float* %788, i64 -8
  %828 = bitcast float* %827 to <4 x float>*
  %829 = load <4 x float>, <4 x float>* %828, align 4, !alias.scope !46
  %830 = fmul <4 x float> %829, %762
  %831 = fadd <4 x float> %826, %830
  %832 = getelementptr inbounds float, float* %788, i64 -9
  %833 = bitcast float* %832 to <4 x float>*
  %834 = load <4 x float>, <4 x float>* %833, align 4, !alias.scope !46
  %835 = fmul <4 x float> %834, %765
  %836 = fadd <4 x float> %831, %835
  %837 = getelementptr inbounds float, float* %788, i64 -10
  %838 = bitcast float* %837 to <4 x float>*
  %839 = load <4 x float>, <4 x float>* %838, align 4, !alias.scope !46
  %840 = fmul <4 x float> %839, %768
  %841 = fadd <4 x float> %836, %840
  %842 = getelementptr inbounds float, float* %788, i64 -11
  %843 = bitcast float* %842 to <4 x float>*
  %844 = load <4 x float>, <4 x float>* %843, align 4, !alias.scope !46
  %845 = fmul <4 x float> %844, %771
  %846 = fadd <4 x float> %841, %845
  %847 = getelementptr inbounds float, float* %788, i64 -12
  %848 = bitcast float* %847 to <4 x float>*
  %849 = load <4 x float>, <4 x float>* %848, align 4, !alias.scope !46
  %850 = fmul <4 x float> %849, %774
  %851 = fadd <4 x float> %846, %850
  %852 = getelementptr inbounds float, float* %788, i64 -13
  %853 = bitcast float* %852 to <4 x float>*
  %854 = load <4 x float>, <4 x float>* %853, align 4, !alias.scope !46
  %855 = fmul <4 x float> %854, %777
  %856 = fadd <4 x float> %851, %855
  %857 = getelementptr inbounds float, float* %788, i64 -14
  %858 = bitcast float* %857 to <4 x float>*
  %859 = load <4 x float>, <4 x float>* %858, align 4, !alias.scope !46
  %860 = fmul <4 x float> %859, %780
  %861 = fadd <4 x float> %856, %860
  %862 = getelementptr inbounds float, float* %2, i64 %785
  %863 = bitcast float* %862 to <4 x float>*
  %864 = load <4 x float>, <4 x float>* %863, align 4, !alias.scope !46
  %865 = fmul <4 x float> %864, %783
  %866 = fadd <4 x float> %861, %865
  %867 = getelementptr inbounds float, float* %2, i64 %786
  %868 = bitcast float* %867 to <4 x float>*
  %869 = load <4 x float>, <4 x float>* %868, align 4, !alias.scope !46
  %870 = fsub <4 x float> %869, %866
  %871 = getelementptr inbounds float, float* %0, i64 %786
  %872 = bitcast float* %871 to <4 x float>*
  store <4 x float> %870, <4 x float>* %872, align 4, !alias.scope !48, !noalias !50
  %873 = add i64 %785, 4
  %874 = icmp eq i64 %873, %734
  br i1 %874, label %875, label %784, !llvm.loop !51

875:                                              ; preds = %784
  %876 = icmp eq i64 %716, %734
  br i1 %876, label %968, label %877

877:                                              ; preds = %875, %718, %699
  %878 = phi i64 [ 16, %718 ], [ 16, %699 ], [ %735, %875 ]
  br label %879

879:                                              ; preds = %877, %879
  %880 = phi i64 [ %965, %879 ], [ %878, %877 ]
  %881 = add nsw i64 %880, -1
  %882 = getelementptr inbounds float, float* %2, i64 %881
  %883 = load float, float* %882, align 4
  %884 = load float, float* %1, align 4
  %885 = fmul float %883, %884
  %886 = getelementptr inbounds float, float* %882, i64 -1
  %887 = load float, float* %886, align 4
  %888 = load float, float* %700, align 4
  %889 = fmul float %887, %888
  %890 = fadd float %885, %889
  %891 = getelementptr inbounds float, float* %882, i64 -2
  %892 = load float, float* %891, align 4
  %893 = load float, float* %701, align 4
  %894 = fmul float %892, %893
  %895 = fadd float %890, %894
  %896 = getelementptr inbounds float, float* %882, i64 -3
  %897 = load float, float* %896, align 4
  %898 = load float, float* %702, align 4
  %899 = fmul float %897, %898
  %900 = fadd float %895, %899
  %901 = getelementptr inbounds float, float* %882, i64 -4
  %902 = load float, float* %901, align 4
  %903 = load float, float* %703, align 4
  %904 = fmul float %902, %903
  %905 = fadd float %900, %904
  %906 = getelementptr inbounds float, float* %882, i64 -5
  %907 = load float, float* %906, align 4
  %908 = load float, float* %704, align 4
  %909 = fmul float %907, %908
  %910 = fadd float %905, %909
  %911 = getelementptr inbounds float, float* %882, i64 -6
  %912 = load float, float* %911, align 4
  %913 = load float, float* %705, align 4
  %914 = fmul float %912, %913
  %915 = fadd float %910, %914
  %916 = getelementptr inbounds float, float* %882, i64 -7
  %917 = load float, float* %916, align 4
  %918 = load float, float* %706, align 4
  %919 = fmul float %917, %918
  %920 = fadd float %915, %919
  %921 = getelementptr inbounds float, float* %882, i64 -8
  %922 = load float, float* %921, align 4
  %923 = load float, float* %707, align 4
  %924 = fmul float %922, %923
  %925 = fadd float %920, %924
  %926 = getelementptr inbounds float, float* %882, i64 -9
  %927 = load float, float* %926, align 4
  %928 = load float, float* %708, align 4
  %929 = fmul float %927, %928
  %930 = fadd float %925, %929
  %931 = getelementptr inbounds float, float* %882, i64 -10
  %932 = load float, float* %931, align 4
  %933 = load float, float* %709, align 4
  %934 = fmul float %932, %933
  %935 = fadd float %930, %934
  %936 = getelementptr inbounds float, float* %882, i64 -11
  %937 = load float, float* %936, align 4
  %938 = load float, float* %710, align 4
  %939 = fmul float %937, %938
  %940 = fadd float %935, %939
  %941 = getelementptr inbounds float, float* %882, i64 -12
  %942 = load float, float* %941, align 4
  %943 = load float, float* %711, align 4
  %944 = fmul float %942, %943
  %945 = fadd float %940, %944
  %946 = getelementptr inbounds float, float* %882, i64 -13
  %947 = load float, float* %946, align 4
  %948 = load float, float* %712, align 4
  %949 = fmul float %947, %948
  %950 = fadd float %945, %949
  %951 = getelementptr inbounds float, float* %882, i64 -14
  %952 = load float, float* %951, align 4
  %953 = load float, float* %713, align 4
  %954 = fmul float %952, %953
  %955 = fadd float %950, %954
  %956 = getelementptr inbounds float, float* %882, i64 -15
  %957 = load float, float* %956, align 4
  %958 = load float, float* %714, align 4
  %959 = fmul float %957, %958
  %960 = fadd float %955, %959
  %961 = getelementptr inbounds float, float* %2, i64 %880
  %962 = load float, float* %961, align 4
  %963 = fsub float %962, %960
  %964 = getelementptr inbounds float, float* %0, i64 %880
  store float %963, float* %964, align 4
  %965 = add nuw nsw i64 %880, 1
  %966 = icmp eq i64 %965, %715
  br i1 %966, label %968, label %879, !llvm.loop !52

967:                                              ; preds = %8
  tail call void @celt_fatal(i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.2, i64 0, i64 0), i8* getelementptr inbounds ([64 x i8], [64 x i8]* @.str.1, i64 0, i64 0), i32 242) #3
  unreachable

968:                                              ; preds = %879, %629, %425, %249, %101, %875, %625, %421, %245, %97, %697, %483, %297, %139, %9
  %969 = bitcast float* %0 to i8*
  %970 = sext i32 %4 to i64
  %971 = shl nsw i64 %970, 2
  tail call void @llvm.memset.p0i8.i64(i8* align 4 %969, i8 0, i64 %971, i1 false)
  ret void
}

; Function Attrs: noreturn
declare void @celt_fatal(i8*, i8*, i32) local_unnamed_addr #1

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #2

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind }
attributes #3 = { noreturn nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{!3}
!3 = distinct !{!3, !4}
!4 = distinct !{!4, !"LVerDomain"}
!5 = !{!6}
!6 = distinct !{!6, !4}
!7 = !{!8}
!8 = distinct !{!8, !4}
!9 = !{!6, !3}
!10 = distinct !{!10, !11}
!11 = !{!"llvm.loop.isvectorized", i32 1}
!12 = distinct !{!12, !11}
!13 = !{!14}
!14 = distinct !{!14, !15}
!15 = distinct !{!15, !"LVerDomain"}
!16 = !{!17}
!17 = distinct !{!17, !15}
!18 = !{!19}
!19 = distinct !{!19, !15}
!20 = !{!17, !14}
!21 = distinct !{!21, !11}
!22 = distinct !{!22, !11}
!23 = !{!24}
!24 = distinct !{!24, !25}
!25 = distinct !{!25, !"LVerDomain"}
!26 = !{!27}
!27 = distinct !{!27, !25}
!28 = !{!29}
!29 = distinct !{!29, !25}
!30 = !{!27, !24}
!31 = distinct !{!31, !11}
!32 = distinct !{!32, !11}
!33 = !{!34}
!34 = distinct !{!34, !35}
!35 = distinct !{!35, !"LVerDomain"}
!36 = !{!37}
!37 = distinct !{!37, !35}
!38 = !{!39}
!39 = distinct !{!39, !35}
!40 = !{!37, !34}
!41 = distinct !{!41, !11}
!42 = distinct !{!42, !11}
!43 = !{!44}
!44 = distinct !{!44, !45}
!45 = distinct !{!45, !"LVerDomain"}
!46 = !{!47}
!47 = distinct !{!47, !45}
!48 = !{!49}
!49 = distinct !{!49, !45}
!50 = !{!47, !44}
!51 = distinct !{!51, !11}
!52 = distinct !{!52, !11}
