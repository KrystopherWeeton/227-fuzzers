; ModuleID = '../../third_party/angle/src/libANGLE/renderer/gl/glx/PixmapSurfaceGLX.cpp'
source_filename = "../../third_party/angle/src/libANGLE/renderer/gl/glx/PixmapSurfaceGLX.cpp"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"class.std::__1::locale::id" = type <{ %"struct.std::__1::once_flag", i32, [4 x i8] }>
%"struct.std::__1::once_flag" = type { i64 }
%"class.rx::PixmapSurfaceGLX" = type { %"class.rx::SurfaceGLX", i32, i32, %"class.rx::FunctionsGLX"*, i8*, i64, i64, %struct._XDisplay* }
%"class.rx::SurfaceGLX" = type { %"class.rx::SurfaceGL" }
%"class.rx::SurfaceGL" = type { %"class.rx::SurfaceImpl" }
%"class.rx::SurfaceImpl" = type { %"class.rx::FramebufferAttachmentObjectImpl", %"struct.egl::SurfaceState"* }
%"class.rx::FramebufferAttachmentObjectImpl" = type { %"class.angle::Subject" }
%"class.angle::Subject" = type { i32 (...)**, %"class.angle::FastVector" }
%"class.angle::FastVector" = type { %"struct.std::__1::array", %"class.angle::ObserverBindingBase"**, i64, i64 }
%"struct.std::__1::array" = type { [8 x %"class.angle::ObserverBindingBase"*] }
%"class.angle::ObserverBindingBase" = type { i32 (...)**, %"class.angle::ObserverInterface"*, i64 }
%"class.angle::ObserverInterface" = type { i32 (...)** }
%"struct.egl::SurfaceState" = type <{ i8*, %"struct.egl::Config"*, %"class.egl::AttributeMap", i8, [3 x i8], %"class.angle::BitSetT", %"class.angle::BitSetT.4", i8, [3 x i8] }>
%"struct.egl::Config" = type { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }
%"class.egl::AttributeMap" = type { %"class.std::__1::map" }
%"class.std::__1::map" = type { %"class.std::__1::__tree" }
%"class.std::__1::__tree" = type { %"class.std::__1::__tree_end_node"*, %"class.std::__1::__compressed_pair", %"class.std::__1::__compressed_pair.1" }
%"class.std::__1::__tree_end_node" = type { %"class.std::__1::__tree_node_base"* }
%"class.std::__1::__tree_node_base" = type <{ %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_end_node"*, i8, [7 x i8] }>
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %"class.std::__1::__tree_end_node" }
%"class.std::__1::__compressed_pair.1" = type { %"struct.std::__1::__compressed_pair_elem.2" }
%"struct.std::__1::__compressed_pair_elem.2" = type { i64 }
%"class.angle::BitSetT" = type { i32 }
%"class.angle::BitSetT.4" = type { i32 }
%struct._XDisplay = type opaque
%"class.rx::FunctionsGLX" = type { i32, i32, i8* (i8*)*, %struct._XDisplay*, i32, %"struct.rx::FunctionsGLX::GLXFunctionTable"*, %"class.std::__1::vector" }
%"struct.rx::FunctionsGLX::GLXFunctionTable" = type opaque
%"class.std::__1::vector" = type { %"class.std::__1::__vector_base" }
%"class.std::__1::__vector_base" = type { %"class.std::__1::basic_string"*, %"class.std::__1::basic_string"*, %"class.std::__1::__compressed_pair.10" }
%"class.std::__1::basic_string" = type { %"class.std::__1::__compressed_pair.5" }
%"class.std::__1::__compressed_pair.5" = type { %"struct.std::__1::__compressed_pair_elem.6" }
%"struct.std::__1::__compressed_pair_elem.6" = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" = type { %union.anon }
%union.anon = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" = type { i8*, i64, i64 }
%"class.std::__1::__compressed_pair.10" = type { %"struct.std::__1::__compressed_pair_elem.11" }
%"struct.std::__1::__compressed_pair_elem.11" = type { %"class.std::__1::basic_string"* }
%"class.gl::Context" = type opaque
%"class.gl::ImageIndex" = type { i8, i32, i32, i32 }
%"class.rx::FramebufferAttachmentRenderTarget" = type { i32 (...)** }
%"class.egl::Error" = type { i32, i32, %"class.std::__1::unique_ptr.122" }
%"class.std::__1::unique_ptr.122" = type { %"class.std::__1::__compressed_pair.123" }
%"class.std::__1::__compressed_pair.123" = type { %"struct.std::__1::__compressed_pair_elem.11" }
%"class.egl::Display" = type { %"class.egl::LabeledObject", %"class.angle::ObserverInterface", %"struct.egl::DisplayState", %"class.rx::DisplayImpl"*, %"class.angle::ObserverBinding", %"class.egl::AttributeMap", %"class.egl::ConfigSet", %"class.std::__1::set.57", %"class.std::__1::set.67", %"class.std::__1::set.77", %"class.std::__1::set.87", i8, i8, %"struct.egl::Caps", %"struct.egl::DisplayExtensions", %"class.std::__1::basic_string", %"class.std::__1::basic_string", %"class.std::__1::basic_string", %"class.egl::Device"*, %"class.egl::Surface"*, i32, %"class.angle::LoggingAnnotator", %"class.gl::TextureManager"*, %"class.gl::SemaphoreManager"*, %"class.egl::BlobCache", %"class.gl::MemoryProgramCache", i64, i64, %"struct.angle::FrontendFeatures", %"class.std::__1::vector.108", %"class.std::__1::mutex", %"class.std::__1::vector.115", %"class.std::__1::vector.115", %"class.std::__1::mutex", %"class.std::__1::mutex" }
%"class.egl::LabeledObject" = type { i32 (...)** }
%"struct.egl::DisplayState" = type { i8*, %"class.std::__1::set", %"class.std::__1::vector", %"class.std::__1::vector", i8, i64 }
%"class.std::__1::set" = type { %"class.std::__1::__tree.15" }
%"class.std::__1::__tree.15" = type { %"class.std::__1::__tree_end_node"*, %"class.std::__1::__compressed_pair.16", %"class.std::__1::__compressed_pair.20" }
%"class.std::__1::__compressed_pair.16" = type { %"struct.std::__1::__compressed_pair_elem" }
%"class.std::__1::__compressed_pair.20" = type { %"struct.std::__1::__compressed_pair_elem.2" }
%"class.rx::DisplayImpl" = type { %"class.rx::EGLImplFactory", %"class.angle::Subject", %"struct.egl::DisplayState"*, i8, %"struct.egl::DisplayExtensions", i8, %"struct.egl::Caps", %"class.egl::BlobCache"* }
%"class.rx::EGLImplFactory" = type { i32 (...)** }
%"class.angle::ObserverBinding" = type { %"class.angle::ObserverBindingBase", %"class.angle::Subject"* }
%"class.egl::ConfigSet" = type { %"class.std::__1::map.46" }
%"class.std::__1::map.46" = type { %"class.std::__1::__tree.47" }
%"class.std::__1::__tree.47" = type { %"class.std::__1::__tree_end_node"*, %"class.std::__1::__compressed_pair.48", %"class.std::__1::__compressed_pair.52" }
%"class.std::__1::__compressed_pair.48" = type { %"struct.std::__1::__compressed_pair_elem" }
%"class.std::__1::__compressed_pair.52" = type { %"struct.std::__1::__compressed_pair_elem.2" }
%"class.std::__1::set.57" = type { %"class.std::__1::__tree.58" }
%"class.std::__1::__tree.58" = type { %"class.std::__1::__tree_end_node"*, %"class.std::__1::__compressed_pair.59", %"class.std::__1::__compressed_pair.63" }
%"class.std::__1::__compressed_pair.59" = type { %"struct.std::__1::__compressed_pair_elem" }
%"class.std::__1::__compressed_pair.63" = type { %"struct.std::__1::__compressed_pair_elem.2" }
%"class.std::__1::set.67" = type { %"class.std::__1::__tree.68" }
%"class.std::__1::__tree.68" = type { %"class.std::__1::__tree_end_node"*, %"class.std::__1::__compressed_pair.69", %"class.std::__1::__compressed_pair.73" }
%"class.std::__1::__compressed_pair.69" = type { %"struct.std::__1::__compressed_pair_elem" }
%"class.std::__1::__compressed_pair.73" = type { %"struct.std::__1::__compressed_pair_elem.2" }
%"class.std::__1::set.77" = type { %"class.std::__1::__tree.78" }
%"class.std::__1::__tree.78" = type { %"class.std::__1::__tree_end_node"*, %"class.std::__1::__compressed_pair.79", %"class.std::__1::__compressed_pair.83" }
%"class.std::__1::__compressed_pair.79" = type { %"struct.std::__1::__compressed_pair_elem" }
%"class.std::__1::__compressed_pair.83" = type { %"struct.std::__1::__compressed_pair_elem.2" }
%"class.std::__1::set.87" = type { %"class.std::__1::__tree.88" }
%"class.std::__1::__tree.88" = type { %"class.std::__1::__tree_end_node"*, %"class.std::__1::__compressed_pair.89", %"class.std::__1::__compressed_pair.93" }
%"class.std::__1::__compressed_pair.89" = type { %"struct.std::__1::__compressed_pair_elem" }
%"class.std::__1::__compressed_pair.93" = type { %"struct.std::__1::__compressed_pair_elem.2" }
%"struct.egl::Caps" = type { i8, i8 }
%"struct.egl::DisplayExtensions" = type { i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8 }
%"class.egl::Device" = type opaque
%"class.egl::Surface" = type { %"class.egl::LabeledObject", %"class.gl::FramebufferAttachmentObject", %"struct.egl::SurfaceState", %"class.rx::SurfaceImpl"*, i32, i8, i32, i32, i8, i8, i8, i32, i32, i32, i8, i32, i32, i32, i32, i8, i64, i64, i8, i8, i32, i32, i32, i32, i32, %"class.gl::Texture"*, %"struct.gl::Format", %"struct.gl::Format", %"struct.gl::Offset", i32, %"class.angle::ObserverBinding" }
%"class.gl::FramebufferAttachmentObject" = type { %"class.angle::Subject", %"class.angle::ObserverInterface" }
%"class.gl::Texture" = type opaque
%"struct.gl::Format" = type { %"struct.gl::InternalFormat"* }
%"struct.gl::InternalFormat" = type { i32, i8, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i8, i32, i32, i32, i32, i32, i32, i32, i1 (%"struct.gl::Version"*, %"struct.gl::Extensions"*)*, i1 (%"struct.gl::Version"*, %"struct.gl::Extensions"*)*, i1 (%"struct.gl::Version"*, %"struct.gl::Extensions"*)*, i1 (%"struct.gl::Version"*, %"struct.gl::Extensions"*)*, i1 (%"struct.gl::Version"*, %"struct.gl::Extensions"*)* }
%"struct.gl::Version" = type { i32, i32 }
%"struct.gl::Extensions" = type { i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, float, i8, i8, i8, i32, i32, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i32, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i32, i32, i32, i32, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i32, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8 }
%"struct.gl::Offset" = type { i32, i32, i32 }
%"class.angle::LoggingAnnotator" = type { %"class.gl::DebugAnnotator" }
%"class.gl::DebugAnnotator" = type { i32 (...)** }
%"class.gl::TextureManager" = type opaque
%"class.gl::SemaphoreManager" = type opaque
%"class.egl::BlobCache" = type { %"class.std::__1::mutex", %"class.angle::SizedMRUCache", void (i8*, i64, i8*, i64)*, i64 (i8*, i64, i8*, i64)* }
%"class.angle::SizedMRUCache" = type { i64, i64, %"class.angle::base::HashingMRUCache" }
%"class.angle::base::HashingMRUCache" = type { %"class.angle::base::MRUCacheBase" }
%"class.angle::base::MRUCacheBase" = type { i32 (...)**, %"class.std::__1::list", %"class.std::__1::unordered_map", i64 }
%"class.std::__1::list" = type { %"class.std::__1::__list_imp" }
%"class.std::__1::__list_imp" = type { %"struct.std::__1::__list_node_base", %"class.std::__1::__compressed_pair.24" }
%"struct.std::__1::__list_node_base" = type { %"struct.std::__1::__list_node_base"*, %"struct.std::__1::__list_node_base"* }
%"class.std::__1::__compressed_pair.24" = type { %"struct.std::__1::__compressed_pair_elem.2" }
%"class.std::__1::unordered_map" = type { %"class.std::__1::__hash_table" }
%"class.std::__1::__hash_table" = type <{ %"class.std::__1::unique_ptr", %"class.std::__1::__compressed_pair.35", %"class.std::__1::__compressed_pair.40", %"class.std::__1::__compressed_pair.42", [4 x i8] }>
%"class.std::__1::unique_ptr" = type { %"class.std::__1::__compressed_pair.28" }
%"class.std::__1::__compressed_pair.28" = type { %"struct.std::__1::__compressed_pair_elem.29", %"struct.std::__1::__compressed_pair_elem.30" }
%"struct.std::__1::__compressed_pair_elem.29" = type { %"struct.std::__1::__hash_node_base"** }
%"struct.std::__1::__hash_node_base" = type { %"struct.std::__1::__hash_node_base"* }
%"struct.std::__1::__compressed_pair_elem.30" = type { %"class.std::__1::__bucket_list_deallocator" }
%"class.std::__1::__bucket_list_deallocator" = type { %"class.std::__1::__compressed_pair.31" }
%"class.std::__1::__compressed_pair.31" = type { %"struct.std::__1::__compressed_pair_elem.2" }
%"class.std::__1::__compressed_pair.35" = type { %"struct.std::__1::__compressed_pair_elem.36" }
%"struct.std::__1::__compressed_pair_elem.36" = type { %"struct.std::__1::__hash_node_base" }
%"class.std::__1::__compressed_pair.40" = type { %"struct.std::__1::__compressed_pair_elem.2" }
%"class.std::__1::__compressed_pair.42" = type { %"struct.std::__1::__compressed_pair_elem.43" }
%"struct.std::__1::__compressed_pair_elem.43" = type { float }
%"class.gl::MemoryProgramCache" = type <{ %"class.egl::BlobCache"*, i32, [4 x i8] }>
%"struct.angle::FrontendFeatures" = type { %"struct.angle::FeatureSetBase", %"struct.angle::Feature", %"struct.angle::Feature", %"struct.angle::Feature", %"struct.angle::Feature", %"struct.angle::Feature", %"struct.angle::Feature", %"struct.angle::Feature", %"struct.angle::Feature", %"struct.angle::Feature" }
%"struct.angle::FeatureSetBase" = type { %"class.std::__1::map.97" }
%"class.std::__1::map.97" = type { %"class.std::__1::__tree.98" }
%"class.std::__1::__tree.98" = type { %"class.std::__1::__tree_end_node"*, %"class.std::__1::__compressed_pair.99", %"class.std::__1::__compressed_pair.103" }
%"class.std::__1::__compressed_pair.99" = type { %"struct.std::__1::__compressed_pair_elem" }
%"class.std::__1::__compressed_pair.103" = type { %"struct.std::__1::__compressed_pair_elem.2" }
%"struct.angle::Feature" = type { i8*, i32, i8*, i8*, i8, i8* }
%"class.std::__1::vector.108" = type { %"class.std::__1::__vector_base.109" }
%"class.std::__1::__vector_base.109" = type { %"struct.angle::Feature"**, %"struct.angle::Feature"**, %"class.std::__1::__compressed_pair.110" }
%"class.std::__1::__compressed_pair.110" = type { %"struct.std::__1::__compressed_pair_elem.111" }
%"struct.std::__1::__compressed_pair_elem.111" = type { %"struct.angle::Feature"** }
%"class.std::__1::vector.115" = type { %"class.std::__1::__vector_base.116" }
%"class.std::__1::__vector_base.116" = type { %"class.angle::ScratchBuffer"*, %"class.angle::ScratchBuffer"*, %"class.std::__1::__compressed_pair.117" }
%"class.angle::ScratchBuffer" = type { i32, i32, %"class.angle::MemoryBuffer" }
%"class.angle::MemoryBuffer" = type { i64, i8* }
%"class.std::__1::__compressed_pair.117" = type { %"struct.std::__1::__compressed_pair_elem.118" }
%"struct.std::__1::__compressed_pair_elem.118" = type { %"class.angle::ScratchBuffer"* }
%"class.std::__1::mutex" = type { %union.pthread_mutex_t }
%union.pthread_mutex_t = type { %struct.__pthread_mutex_s }
%struct.__pthread_mutex_s = type { i32, i32, i32, i32, i32, i16, i16, %struct.__pthread_internal_list }
%struct.__pthread_internal_list = type { %struct.__pthread_internal_list*, %struct.__pthread_internal_list* }
%"class.angle::ErrorStreamBase" = type { i32, %"class.std::__1::basic_ostringstream" }
%"class.std::__1::basic_ostringstream" = type { %"class.std::__1::basic_ostream.base", %"class.std::__1::basic_stringbuf", %"class.std::__1::basic_ios.base" }
%"class.std::__1::basic_ostream.base" = type { i32 (...)** }
%"class.std::__1::basic_stringbuf" = type <{ %"class.std::__1::basic_streambuf", %"class.std::__1::basic_string", i8*, i32, [4 x i8] }>
%"class.std::__1::basic_streambuf" = type { i32 (...)**, %"class.std::__1::locale", i8*, i8*, i8*, i8*, i8*, i8* }
%"class.std::__1::locale" = type { %"class.std::__1::locale::__imp"* }
%"class.std::__1::locale::__imp" = type opaque
%"class.std::__1::basic_ios.base" = type <{ %"class.std::__1::ios_base", %"class.std::__1::basic_ostream"*, i32 }>
%"class.std::__1::ios_base" = type { i32 (...)**, i32, i64, i64, i32, i32, i8*, i8*, void (i32, %"class.std::__1::ios_base"*, i32)**, i32*, i64, i64, i64*, i64, i64, i8**, i64, i64 }
%"class.std::__1::basic_ostream" = type { i32 (...)**, %"class.std::__1::basic_ios.base" }
%"class.std::__1::vector.179" = type { %"class.std::__1::__vector_base.180" }
%"class.std::__1::__vector_base.180" = type { i32*, i32*, %"class.std::__1::__compressed_pair.181" }
%"class.std::__1::__compressed_pair.181" = type { %"struct.std::__1::__compressed_pair_elem.182" }
%"struct.std::__1::__compressed_pair_elem.182" = type { i32* }
%"class.angle::ErrorStreamBase.202" = type { i32, %"class.std::__1::basic_ostringstream" }
%"class.rx::DisplayGLX" = type { %"class.rx::DisplayGL", %"class.std::__1::shared_ptr", %"class.std::__1::map.170", i32, i8*, %"class.std::__1::vector.179", %struct.XVisualInfo*, i8*, i8*, %"class.absl::flat_hash_map.186", i64, %"class.std::__1::vector.195", i8, i8, i8, i8, i8, i8, i8, i8, i32, i32, i32, i32, i64, %"class.rx::FunctionsGLX", %struct._XDisplay*, %"class.egl::Display"* }
%"class.rx::DisplayGL" = type { %"class.rx::DisplayImpl" }
%"class.std::__1::shared_ptr" = type { %"class.rx::RendererGL"*, %"class.std::__1::__shared_weak_count"* }
%"class.rx::RendererGL" = type <{ i32 (...)**, %"struct.gl::Version", %"class.std::__1::unique_ptr.125", %"class.rx::StateManagerGL"*, %"class.rx::BlitGL"*, %"class.rx::ClearMultiviewGL"*, i8, i8, [6 x i8], %"struct.gl::Caps", %"class.gl::TextureCapsMap", %"struct.gl::Extensions", %"struct.gl::Limitations", i32, [4 x i8], %"class.absl::flat_hash_map", %"class.std::__1::list.163", %"class.std::__1::mutex", i8, [7 x i8], %"struct.angle::FeaturesGL", i8, [7 x i8] }>
%"class.std::__1::unique_ptr.125" = type { %"class.std::__1::__compressed_pair.126" }
%"class.std::__1::__compressed_pair.126" = type { %"struct.std::__1::__compressed_pair_elem.127" }
%"struct.std::__1::__compressed_pair_elem.127" = type { %"class.rx::FunctionsGL"* }
%"class.rx::FunctionsGL" = type { %"class.rx::DispatchTableGL", %"struct.gl::Version", i32, i32, %"class.std::__1::vector" }
%"class.rx::DispatchTableGL" = type { i32 (...)**, void (i32, i32)*, void (i32)*, void (float, float, float, float)*, void (double)*, void (i32)*, void (i8, i8, i8, i8)*, void (i32)*, void (i32)*, void (i8)*, void (double, double)*, void (i32)*, void (i32)*, void (i32)*, void ()*, void ()*, void (i32)*, void (i32, i8*)*, void (i32, double*)*, i32 ()*, void (i32, float*)*, void (i32, i32*)*, i8* (i32)*, void (i32, i32, i32, i32, i8*)*, void (i32, i32, i32, float*)*, void (i32, i32, i32, i32*)*, void (i32, i32, float*)*, void (i32, i32, i32*)*, void (i32, i32)*, i8 (i32)*, void (float)*, void (i32)*, void (i32, float)*, void (i32, i32)*, void (float)*, void (i32, i32)*, void (i32)*, void (i32, i32, i32, i32, i32, i32, i8*)*, void (i32, i32, i32, i32)*, void (i32, i32, i32)*, void (i32)*, void (i32, i32, i32)*, void (i32, i32, i32, i32, i32, i32, i32, i8*)*, void (i32, i32, i32, i32, i32, i32, i32, i32, i8*)*, void (i32, i32, float)*, void (i32, i32, float*)*, void (i32, i32, i32)*, void (i32, i32, i32*)*, void (i32, i32, i32, i32)*, void (i32, i32)*, void (i32, i32, i32, i32, i32, i32, i32)*, void (i32, i32, i32, i32, i32, i32, i32, i32)*, void (i32, i32, i32, i32, i32, i32)*, void (i32, i32, i32, i32, i32, i32, i32, i32)*, void (i32, i32*)*, void (i32, i32, i32)*, void (i32, i32, i32, i8*)*, void (i32, i32*)*, i8 (i32)*, void (float, float)*, void (i32, i32, i32, i32, i32, i32, i8*)*, void (i32, i32, i32, i32, i32, i32, i32, i32, i8*)*, void (float, float, float, float)*, void (i32)*, void (i32, i32, i32, i32, i32, i32, i32, i32, i32)*, void (i32, i32, i32, i32, i32, i8*)*, void (i32, i32, i32, i32, i32, i32, i32, i32, i32, i8*)*, void (i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i8*)*, void (i32, i32*)*, void (i32)*, void (i32, i32*)*, void (i32, i32, i32*)*, i8 (i32)*, void (i32, i32)*, i8 (i32)*, void (i32)*, void (i32, i32, i32, i32, i32, i32, i8*)*, void (i32, i32, i32, i32, i32, i32, i32, i8*)*, void (i32, i32, i32, i32, i32, i32, i32, i32, i8*)*, void (i32, i32, i32, i32, i32, i32, i8*)*, void (i32, i32, i32, i32, i32, i32, i32, i32, i8*)*, void (i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i8*)*, void (i32, i32, i8*)*, void (float, i8)*, void (i32, i32, i32, i32)*, void (i32, i32*, i32*, i32)*, void (i32, i32*, i32, i8**, i32)*, void (i32, float)*, void (i32, float*)*, void (i32, i32)*, void (i32, i32*)*, void (i32, i32)*, void (i32, i32)*, void (i32, i64, i8*, i32)*, void (i32, i64, i64, i8*)*, void (i32, i32*)*, void (i32, i32*)*, void (i32)*, void (i32, i32*)*, void (i32, i32*)*, void (i32, i32, i32*)*, void (i32, i32, i8**)*, void (i32, i64, i64, i8*)*, void (i32, i32, i32*)*, void (i32, i32, i32*)*, void (i32, i32, i32*)*, i8 (i32)*, i8 (i32)*, i8* (i32, i32)*, i8 (i32)*, void (i32, i32)*, void (i32, i32, i8*)*, void (i32, i32)*, void (i32)*, i32 ()*, i32 (i32)*, void (i32)*, void (i32)*, void (i32, i32)*, void (i32)*, void (i32, i32*)*, void (i32)*, void (i32, i32, i32, i32*, i32*, i32*, i8*)*, void (i32, i32, i32, i32*, i32*, i32*, i8*)*, void (i32, i32, i32*, i32*)*, i32 (i32, i8*)*, void (i32, i32, i32*, i8*)*, void (i32, i32, i32*)*, void (i32, i32, i32*, i8*)*, void (i32, i32, i32*, i8*)*, void (i32, i32, i32*)*, i32 (i32, i8*)*, void (i32, i32, float*)*, void (i32, i32, i32*)*, void (i32, i32, i8**)*, void (i32, i32, double*)*, void (i32, i32, float*)*, void (i32, i32, i32*)*, i8 (i32)*, i8 (i32)*, void (i32)*, void (i32, i32, i8**, i32*)*, void (i32, i32, i32, i32)*, void (i32, i32)*, void (i32, i32, i32, i32)*, void (i32, float)*, void (i32, i32, float*)*, void (i32, i32)*, void (i32, i32, i32*)*, void (i32, float, float)*, void (i32, i32, float*)*, void (i32, i32, i32)*, void (i32, i32, i32*)*, void (i32, float, float, float)*, void (i32, i32, float*)*, void (i32, i32, i32, i32)*, void (i32, i32, i32*)*, void (i32, float, float, float, float)*, void (i32, i32, float*)*, void (i32, i32, i32, i32, i32)*, void (i32, i32, i32*)*, void (i32, i32, i8, float*)*, void (i32, i32, i8, float*)*, void (i32, i32, i8, float*)*, void (i32)*, void (i32)*, void (i32, double)*, void (i32, double*)*, void (i32, float)*, void (i32, float*)*, void (i32, i16)*, void (i32, i16*)*, void (i32, double, double)*, void (i32, double*)*, void (i32, float, float)*, void (i32, float*)*, void (i32, i16, i16)*, void (i32, i16*)*, void (i32, double, double, double)*, void (i32, double*)*, void (i32, float, float, float)*, void (i32, float*)*, void (i32, i16, i16, i16)*, void (i32, i16*)*, void (i32, i8*)*, void (i32, i32*)*, void (i32, i16*)*, void (i32, i8, i8, i8, i8)*, void (i32, i8*)*, void (i32, i32*)*, void (i32, i16*)*, void (i32, i8*)*, void (i32, double, double, double, double)*, void (i32, double*)*, void (i32, float, float, float, float)*, void (i32, float*)*, void (i32, i32*)*, void (i32, i16, i16, i16, i16)*, void (i32, i16*)*, void (i32, i8*)*, void (i32, i32*)*, void (i32, i16*)*, void (i32, i32, i32, i8, i32, i8*)*, void (i32, i32, i8, float*)*, void (i32, i32, i8, float*)*, void (i32, i32, i8, float*)*, void (i32, i32, i8, float*)*, void (i32, i32, i8, float*)*, void (i32, i32, i8, float*)*, void (i32, i32)*, void (i32)*, void (i32, i32, i32)*, void (i32, i32, i32, i64, i64)*, void (i32, i32, i8*)*, void (i32, i32)*, void (i32, i32)*, void (i32)*, void (i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)*, i32 (i32)*, void (i32, i32)*, void (i32, i32, float, i32)*, void (i32, i32, float*)*, void (i32, i32, i32*)*, void (i32, i32, i32*)*, void (i32, i8, i8, i8, i8)*, void (i32, i32*)*, void (i32, i32*)*, void (i32, i32*)*, void (i32, i32)*, void (i32, i32)*, void ()*, void ()*, void (i32, i64, i64)*, void (i32, i32, i32, i32)*, void (i32, i32, i32, i32, i32)*, void (i32, i32, i32, i32, i32)*, void (i32, i32, i32, i32, i32, i32)*, void (i32, i32, i32, i32, i32)*, void (i32, i32*)*, void (i32, i32*)*, void (i32, i32*)*, void (i32)*, void (i32, i32, i8*)*, i32 (i32, i8*)*, void (i32, i32, i32, i32*)*, void (i32, i32, i32*)*, void (i32, i32, i32*)*, i8* (i32, i32)*, void (i32, i32, i32*)*, void (i32, i32, i32*)*, void (i32, i32, i32, i32*, i32*, i32*, i8*)*, void (i32, i32, i32*)*, void (i32, i32, i32*)*, void (i32, i32, i32*)*, i8 (i32, i32)*, i8 (i32)*, i8 (i32)*, i8 (i32)*, i8* (i32, i64, i64, i32)*, void (i32, i32, i32, i32)*, void (i32, i32, i32, i32, i32)*, void (i32, i32, i32*)*, void (i32, i32, i32*)*, void (i32, i32, i8**, i32)*, void (i32, i32)*, void (i32, i32, i32*)*, void (i32, i32, i32)*, void (i32, i32, i32*)*, void (i32, i32, i32, i32)*, void (i32, i32, i32*)*, void (i32, i32, i32, i32, i32)*, void (i32, i32, i32*)*, void (i32, i32)*, void (i32, i32*)*, void (i32, i32)*, void (i32, i32*)*, void (i32, i32, i32)*, void (i32, i32*)*, void (i32, i32, i32)*, void (i32, i32*)*, void (i32, i32, i32, i32)*, void (i32, i32*)*, void (i32, i32, i32, i32)*, void (i32, i32*)*, void (i32, i8*)*, void (i32, i32, i32, i32, i32)*, void (i32, i32*)*, void (i32, i16*)*, void (i32, i8*)*, void (i32, i32, i32, i32, i32)*, void (i32, i32*)*, void (i32, i16*)*, void (i32, i32, i32, i32, i8*)*, void (i32, i32, i64, i64, i64)*, void (i32, i32, i32, i32)*, void (i32, i32, i32, i8*, i32)*, void (i32, i32, i32, i32*, i8*)*, void (i32, i32, i32, i32*)*, void (i32, i32, i32, i32*, i8*)*, void (i32, i32, i32*, i32, i32*)*, i32 (i32, i8*)*, void (i32, i32, i8**, i32*)*, void (i32)*, void (i32, i32, i32)*, void (i32, i32, i32)*, i32 (%struct.__GLsync*, i32, i64)*, void (%struct.__GLsync*)*, void (i32, i32, i32, i8*, i32)*, void (i32, i32, i32, i8*, i32, i32)*, void (i32, i32, i32, i32, i32, i8*, i32)*, %struct.__GLsync* (i32, i32)*, void (i32, i32, i32, i32)*, void (i32, i32, i64*)*, void (i32, i32, i64*)*, void (i32, i64*)*, void (i32, i32, float*)*, void (%struct.__GLsync*, i32, i32, i32*, i32*)*, i8 (%struct.__GLsync*)*, void (i32, i32*, i32, i8**, i32, i32*)*, void (i32)*, void (i32, i32)*, void (i32, i32, i32, i32, i32, i8)*, void (i32, i32, i32, i32, i32, i32, i8)*, void (%struct.__GLsync*, i32, i64)*, void (i32, i32, i32, i8*)*, void (i32, i32)*, void (i32, i32*)*, void (i32, i32*)*, i32 (i32, i8*)*, void (i32, i32, i64*)*, void (i32, i32, i64*)*, void (i32, i32, i32*)*, void (i32, i32, i32*)*, void (i32, i32, float*)*, void (i32, i32, i32*)*, i8 (i32)*, void (i32, i32)*, void (i32, i32, i32*)*, void (i32, i32, i32*)*, void (i32, i32, float)*, void (i32, i32, float*)*, void (i32, i32, i32)*, void (i32, i32, i32*)*, void (i32, i32)*, void (i32, i32, i8, i32)*, void (i32, i32, i8, i32*)*, void (i32, i32, i8, i32)*, void (i32, i32, i8, i32*)*, void (i32, i32, i8, i32)*, void (i32, i32, i8, i32*)*, void (i32, i32, i8, i32)*, void (i32, i32, i8, i32*)*, void (i32, i32, i32)*, void (i32, i32)*, void (i32, i32, i32)*, void (i32, i32)*, void (i32, i32, i32, i32, i32)*, void (i32, i32, i32)*, void (i32, i32*)*, void (i32, i8*)*, void (i32, i32, i8*)*, void (i32, i32)*, void (i32, i32, i32)*, void (i32, i32)*, void (i32, i32*)*, void (i32, i32, i32, i32, i32*, i8*)*, void (i32, i32, i32, i32, i32*, i8*)*, void (i32, i32, i32, i32, i32*)*, void (i32, i32, i32, i32*)*, void (i32, i32, i32, i32*)*, i32 (i32, i32, i8*)*, i32 (i32, i32, i8*)*, void (i32, i32, i32*)*, void (i32, i32, double*)*, i8 (i32)*, void (float)*, void (i32, float*)*, void (i32, i32)*, void ()*, void ()*, void (i32, double)*, void (i32, i32, double*)*, void (i32, double, double)*, void (i32, i32, double*)*, void (i32, double, double, double)*, void (i32, i32, double*)*, void (i32, double, double, double, double)*, void (i32, i32, double*)*, void (i32, i32, i8, double*)*, void (i32, i32, i8, double*)*, void (i32, i32, i8, double*)*, void (i32, i32, i8, double*)*, void (i32, i32, i8, double*)*, void (i32, i32, i8, double*)*, void (i32, i32, i8, double*)*, void (i32, i32, i8, double*)*, void (i32, i32, i8, double*)*, void (i32, i32, i32*)*, void (i32, i32)*, void (i32)*, void (float)*, i32 (i32, i32, i8**)*, void (i32, i32*)*, void (i32, i32, double*)*, void (i32, double, double)*, void (float, float)*, void (i32, i32*)*, void (i32, i32, double*)*, void (i32, i32, float*)*, void (i32, i32, i32*, i32*, i8*)*, void (i32, i32, i32*, i8*)*, void (i32, i32, i32*)*, void (i32, i32, i32*, i32*)*, void (i32, i32, double*)*, i8 (i32)*, void (i32, i32, i8*, i32)*, void (i32, i32, i32)*, void (i32, i32, double)*, void (i32, i32, i32, double*)*, void (i32, i32, float)*, void (i32, i32, i32, float*)*, void (i32, i32, i32)*, void (i32, i32, i32, i32*)*, void (i32, i32, i32)*, void (i32, i32, i32, i32*)*, void (i32, i32, double, double)*, void (i32, i32, i32, double*)*, void (i32, i32, float, float)*, void (i32, i32, i32, float*)*, void (i32, i32, i32, i32)*, void (i32, i32, i32, i32*)*, void (i32, i32, i32, i32)*, void (i32, i32, i32, i32*)*, void (i32, i32, double, double, double)*, void (i32, i32, i32, double*)*, void (i32, i32, float, float, float)*, void (i32, i32, i32, float*)*, void (i32, i32, i32, i32, i32)*, void (i32, i32, i32, i32*)*, void (i32, i32, i32, i32, i32)*, void (i32, i32, i32, i32*)*, void (i32, i32, double, double, double, double)*, void (i32, i32, i32, double*)*, void (i32, i32, float, float, float, float)*, void (i32, i32, i32, float*)*, void (i32, i32, i32, i32, i32, i32)*, void (i32, i32, i32, i32*)*, void (i32, i32, i32, i32, i32, i32)*, void (i32, i32, i32, i32*)*, void (i32, i32, i32, i8, double*)*, void (i32, i32, i32, i8, float*)*, void (i32, i32, i32, i8, double*)*, void (i32, i32, i32, i8, float*)*, void (i32, i32, i32, i8, double*)*, void (i32, i32, i32, i8, float*)*, void (i32, i32, i32, i8, double*)*, void (i32, i32, i32, i8, float*)*, void (i32, i32, i32, i8, double*)*, void (i32, i32, i32, i8, float*)*, void (i32, i32, i32, i8, double*)*, void (i32, i32, i32, i8, float*)*, void (i32, i32, i32, i8, double*)*, void (i32, i32, i32, i8, float*)*, void (i32, i32, i32, i8, double*)*, void (i32, i32, i32, i8, float*)*, void (i32, i32, i32, i8, double*)*, void (i32, i32, i32, i8, float*)*, void ()*, void (i32, i32, i32*)*, void (i32, i32, i32, i32, i32)*, void (i32, i32*)*, void (i32, i32*, i32, i8*, i32)*, void (i32, i32, i32)*, void (i32)*, void (i32, double)*, void (i32, double*)*, void (i32, double, double)*, void (i32, double*)*, void (i32, double, double, double)*, void (i32, double*)*, void (i32, double, double, double, double)*, void (i32, double*)*, void (i32, i32, i32, i32, i8*)*, void (i32, i32, float*)*, void (i32, float, float, float, float)*, void (i32, float*)*, void (i32, i32, i32, i8, i32, i32, i32)*, void (i32, i32, i32, i32, i32)*, void (i32, i32, i32, i8*, i32, i32)*, void (i32, i32, i32, i8*, i32, i32, i32)*, void (i32, i32, i32)*, void (i32, i32, i32, i32)*, void (i32, i32, i32, i32*)*, void (i32, i32, i32, i32, i32*)*, void (i32)*, void (i32, i32, i32, i32)*, void (i32, i32, i32, i32, i32)*, void (i32, i32, i32, i32, i32, i32)*, void (i32, i32, i64, i32)*, void (i32, i32, i32, i32, i8*)*, void (i32, i32, i64, i64, i32, i32, i8*)*, void (i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)*, void (i32)*, void (void (i32, i32, i32, i32, i32, i8*, i8*)*, i8*)*, void (i32, i32, i32, i32, i32*, i8)*, void (i32, i32, i32, i32, i32, i8*)*, void (i32, i32, i32)*, void (i64)*, void (i32, i32, i32)*, i32 (i32, i32, i32*, i32*, i32*, i32*, i32*, i8*)*, void (i32, i32, i32*)*, void (i32, i32, i32, i32, i64*)*, void (i32, i32, i32, i32*, i8*)*, void (i8*, i32, i32*, i8*)*, void (i32, i8**)*, void (i32, i32, i32, i32*)*, i32 (i32, i32, i8*)*, i32 (i32, i32, i8*)*, i32 (i32, i32, i8*)*, void (i32, i32, i32, i32, i32*, i8*)*, void (i32, i32, i32, i32, i32*, i32, i32*, i32*)*, void (i32)*, void (i32, i64, i64)*, void (i32, i32, i32*)*, void (i32, i32, i32*, i32, i32, i32, i32)*, void (i32, i32)*, void (i32, i32, i32, i32, i32, i32, i32, i32)*, void (i32, i8*, i32, i32)*, void (i32, i32, i8*, i32, i32)*, void (i32, i32, i32, i8*)*, void (i8*, i32, i8*)*, void ()*, void (i32, i32, i32, i8*)*, void (i32, i32, i32)*, void (i32, i32, i32, i64, i64)*, void (i32, i32, i32, i32, i32, i8)*, void (i32, i32, i32, i32, i32, i32, i8)*, void (i32, i32, i32, i32, i32, i32, i32, i32)*, void (i32, i32)*, void (i32, i32, i32, i8, i32)*, void (i32, i32, i32, i32)*, void (i32, i32, i32, i32)*, void (i32, i32)*, void (i32, i32, i32, i32*)*, void (i32, i32, i32, i32*, i64*, i64*)*, void (i32, i32, i32*)*, void (i32, i32, i32*)*, void (i32, i32, i32*)*, void (i32, i32, i32*, i64*, i32*)*, void (i32, i64, i8*, i32)*, void (i32, i32, i32, i32, i8*)*, void (i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i8*)*, void (i32, i32)*, void (i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)*, i32 (i32, i32)*, void (i32, i32, i32, i32, i8*)*, void (i32, i32, i64, i64, i32, i32, i8*)*, void (i32, i32, i32, float, i32)*, void (i32, i32, i32, float*)*, void (i32, i32, i32, i32*)*, void (i32, i32, i32, i32*)*, void (i32, i32)*, void (i32, i32, i32, i32, i32, i32, i8*)*, void (i32, i32, i32, i32, i32, i32, i32, i32, i8*)*, void (i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i8*)*, void (i32, i32, i64, i64, i64)*, void (i32, i32, i32, i32, i32, i32)*, void (i32, i32, i32, i32, i32, i32, i32, i32)*, void (i32, i32, i32, i32, i32, i32, i32, i32, i32)*, void (i32, i32*)*, void (i32, i32*)*, void (i32, i32*)*, void (i32, i32, i32*)*, void (i32, i32*)*, void (i32, i32*)*, void (i32, i32, i32*)*, void (i32, i32*)*, void (i32, i32*)*, void (i32, i32)*, void (i32, i32)*, void (i32, i64, i64)*, void (i32)*, void (i32, i32, i32, i8*)*, void (i32, i32, i32, i32, i32, i32, i32, i32, i32, i8*)*, i32 ()*, void (i32, i32, i64*)*, void (i32, i32, i32*)*, void (i32, i32, i8**)*, void (i32, i64, i64, i8*)*, void (i32, i32, i32, i32*)*, void (i32, i32, i32*)*, void (i32, i32, i32*)*, void (i32, i32, i32, i64)*, void (i32, i32, i32, i64)*, void (i32, i32, i32, i64)*, void (i32, i32, i32, i64)*, void (i32, i32, i32, i32, i32, i8*)*, void (i32, i32, i32, float*)*, void (i32, i32, i32, i32*)*, void (i32, i32, i32*)*, void (i32, i32, i32*)*, void (i32, i32, float*)*, void (i32, i32, i32*)*, void (i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i8*)*, void (i32, i32, i32, i64*)*, void (i32, i32, i32, i32*)*, void (i32, i32, i32*)*, void (i32, i32, i32, i64*)*, void (i32, i32, i32, i32*)*, void (i32, i32, i32*)*, void (i32, i32, i32, i8*)*, void (i32, i32, i32, i32, i32, i8*)*, void (i32, i32, i32, double*)*, void (i32, i32, i32, float*)*, void (i32, i32, i32, i32*)*, void (i32, i32, i32, i32*)*, void (i32, i32, i32*)*, void (i32, i32, i32*, i32, i32, i32, i32)*, i8* (i32, i32)*, i8* (i32, i64, i64, i32)*, void (i32)*, void (i32, i64, i8*, i32)*, void (i32, i64, i8*, i32)*, void (i32, i64, i64, i8*)*, void (i32, i32)*, void (i32, i32, i32*)*, void (i32, i32, i32)*, void (i32, i32)*, void (i32, i32, i32, i32)*, void (i32, i32, i32, i32)*, void (i32, i32, i32, i32, i32)*, void (i32, i32, i32, i32)*, void (i32, i32, i32, i32, i32)*, void (i32, i32, i32, i32, i32, i32, i32, i8*)*, void ()*, void (i32, i32, i32)*, void (i32, i32, i32, i64, i64)*, void (i32, i32, i32*)*, void (i32, i32, i32*)*, void (i32, i32, float)*, void (i32, i32, float*)*, void (i32, i32, i32)*, void (i32, i32, i32*)*, void (i32, i32, i32, i32)*, void (i32, i32, i32, i32, i32)*, void (i32, i32, i32, i32, i32, i8)*, void (i32, i32, i32, i32, i32, i32)*, void (i32, i32, i32, i32, i32, i32, i8)*, void (i32, i32, i32, i32, i32, i32, i8*)*, void (i32, i32, i32, i32, i32, i32, i32, i32, i8*)*, void (i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i8*)*, void (i32, i32, i32)*, void (i32, i32, i32, i64, i64)*, i8 (i32)*, void (i32, i32, i32)*, void (i32, i32, i32, i32, i8, i32)*, void (i32, i32, i32, i32, i32)*, void (i32, i32, i32, i32, i32)*, void (i32, i32, i32)*, void (i32, i32)*, void (i32, i32, i32, i64, i32)*, void (i32, i32, i32, i32*, i64*, i32*)*, void ()*, void (float, float, float, float, float, float, float, float)*, void (i32)*, void (i32, i8*)*, void ()*, void (i32, i8*)*, void (i32, i32, i32*)*, void (i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)*, void (i32, i64, i32, i64)*, void (i32, i32*)*, void (i32, i32*)*, void (i32, i32, i32*)*, void (i32, i32, i8*)*, void (i32, i8*)*, i8 (i32)*, void (i32, i32, i32*)*, void (i32, i64, i32, i64)*, void (i32, i32, i32, i32, i32, i32, i64)*, void (i32, i32, i32, i32, i32, i8, i32, i64)*, void (i32, i32, i32, i32, i32, i32, i32, i64)*, void (i32, i32, i32, i32, i32, i32, i8, i32, i64)*, void (i32, i32, i32, i32, i32, i32, i64)*, void (i32, i32, i32, i32, i32, i8, i32, i64)*, void (i32, i32, i32, i32, i32, i32, i32, i64)*, void (i32, i32, i32, i32, i32, i32, i8, i32, i64)*, void (i32, i64, i32, i32)*, void (i32, i64, i32, i8*)*, void (i32, i64, i32, i8*)*, void (i32, i32, i32, i32, i32, i32)*, void (i32, i32, i32, i32, i32)*, void (i32, i32*)*, void (i32, i32*)*, void (i32, i32, i64*)*, i8 (i32)*, void (i32, i32, i64*)*, void (i32, i32, i32*, i32, i32*, i32*)*, void (i32, i32, i32*, i32, i32*, i32*)*, void (i32, i32, i32)*, void (i32, i32, i8*)*, void (i32, i32, i8*)*, void (i32, i32, i32)*, void (i32, i32, i32, i64, i64)*, void (i32, i32, i32, i32, i32, i32)*, void (i32, i32, i32, i32, i32)*, void (i32)*, void (i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)*, void (i32, i32, i32, i32, i32, i32*)*, void (i32, i8*)*, void (i32, i8*)*, void (i32, i32, i32)*, void (i32, i32, i32, i64, i64)*, void (i32, i32, i32, i32, i32, i32)* }
%struct.__GLsync = type opaque
%"class.rx::StateManagerGL" = type opaque
%"class.rx::BlitGL" = type opaque
%"class.rx::ClearMultiviewGL" = type opaque
%"struct.gl::Caps" = type <{ float, float, i32, [4 x i8], i64, i32, i32, i32, i32, float, i32, i32, float, float, float, float, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i64, i32, i32, i32, i32, i32, [4 x i8], %"class.std::__1::vector.131", %"class.std::__1::vector.131", %"class.std::__1::vector.131", %"struct.gl::TypePrecision", %"struct.gl::TypePrecision", %"struct.gl::TypePrecision", %"struct.gl::TypePrecision", %"struct.gl::TypePrecision", %"struct.gl::TypePrecision", %"struct.gl::TypePrecision", %"struct.gl::TypePrecision", %"struct.gl::TypePrecision", %"struct.gl::TypePrecision", %"struct.gl::TypePrecision", %"struct.gl::TypePrecision", %"class.angle::PackedEnumMap", %"class.angle::PackedEnumMap", %"class.angle::PackedEnumMap", %"class.angle::PackedEnumMap", %"class.angle::PackedEnumMap", %"class.angle::PackedEnumMap", %"class.angle::PackedEnumMap", %"class.angle::PackedEnumMap.140", i32, i32, i32, i32, i32, i32, i32, i32, i32, %"struct.std::__1::array.142", %"struct.std::__1::array.142", i32, i32, i32, i64, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i64, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, float, float, float, float, i32, i32, [4 x i8] }>
%"class.std::__1::vector.131" = type { %"class.std::__1::__vector_base.132" }
%"class.std::__1::__vector_base.132" = type { i32*, i32*, %"class.std::__1::__compressed_pair.133" }
%"class.std::__1::__compressed_pair.133" = type { %"struct.std::__1::__compressed_pair_elem.134" }
%"struct.std::__1::__compressed_pair_elem.134" = type { i32* }
%"struct.gl::TypePrecision" = type { %"struct.std::__1::array.138", i32 }
%"struct.std::__1::array.138" = type { [2 x i32] }
%"class.angle::PackedEnumMap" = type { %"struct.std::__1::array.139" }
%"struct.std::__1::array.139" = type { [6 x i32] }
%"class.angle::PackedEnumMap.140" = type { %"struct.std::__1::array.141" }
%"struct.std::__1::array.141" = type { [6 x i64] }
%"struct.std::__1::array.142" = type { [3 x i32] }
%"class.gl::TextureCapsMap" = type { %"class.angle::PackedEnumMap.143" }
%"class.angle::PackedEnumMap.143" = type { %"struct.std::__1::array.144" }
%"struct.std::__1::array.144" = type { [227 x %"struct.gl::TextureCaps"] }
%"struct.gl::TextureCaps" = type { i8, i8, i8, i8, i8, %"class.std::__1::set.145" }
%"class.std::__1::set.145" = type { %"class.std::__1::__tree.146" }
%"class.std::__1::__tree.146" = type { %"class.std::__1::__tree_end_node"*, %"class.std::__1::__compressed_pair.147", %"class.std::__1::__compressed_pair.151" }
%"class.std::__1::__compressed_pair.147" = type { %"struct.std::__1::__compressed_pair_elem" }
%"class.std::__1::__compressed_pair.151" = type { %"struct.std::__1::__compressed_pair_elem.2" }
%"struct.gl::Limitations" = type { i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8 }
%"class.absl::flat_hash_map" = type { %"class.absl::container_internal::raw_hash_map" }
%"class.absl::container_internal::raw_hash_map" = type { %"class.absl::container_internal::raw_hash_set" }
%"class.absl::container_internal::raw_hash_set" = type { i8*, %"union.absl::container_internal::map_slot_type"*, i64, i64, %"class.absl::container_internal::CompressedTuple" }
%"union.absl::container_internal::map_slot_type" = type opaque
%"class.absl::container_internal::CompressedTuple" = type { %"struct.absl::container_internal::internal_compressed_tuple::CompressedTupleImpl" }
%"struct.absl::container_internal::internal_compressed_tuple::CompressedTupleImpl" = type { %"struct.absl::container_internal::internal_compressed_tuple::Storage" }
%"struct.absl::container_internal::internal_compressed_tuple::Storage" = type { i64 }
%"class.std::__1::list.163" = type { %"class.std::__1::__list_imp.164" }
%"class.std::__1::__list_imp.164" = type { %"struct.std::__1::__list_node_base.165", %"class.std::__1::__compressed_pair.166" }
%"struct.std::__1::__list_node_base.165" = type { %"struct.std::__1::__list_node_base.165"*, %"struct.std::__1::__list_node_base.165"* }
%"class.std::__1::__compressed_pair.166" = type { %"struct.std::__1::__compressed_pair_elem.2" }
%"struct.angle::FeaturesGL" = type { %"struct.angle::FeatureSetBase", %"struct.angle::Feature", %"struct.angle::Feature", %"struct.angle::Feature", %"struct.angle::Feature", %"struct.angle::Feature", %"struct.angle::Feature", %"struct.angle::Feature", %"struct.angle::Feature", %"struct.angle::Feature", %"struct.angle::Feature", %"struct.angle::Feature", %"struct.angle::Feature", %"struct.angle::Feature", %"struct.angle::Feature", %"struct.angle::Feature", %"struct.angle::Feature", %"struct.angle::Feature", %"struct.angle::Feature", %"struct.angle::Feature", %"struct.angle::Feature", %"struct.angle::Feature", %"struct.angle::Feature", %"struct.angle::Feature", %"struct.angle::Feature", %"struct.angle::Feature", %"struct.angle::Feature", %"struct.angle::Feature", %"struct.angle::Feature", %"struct.angle::Feature", %"struct.angle::Feature", %"struct.angle::Feature", %"struct.angle::Feature", %"struct.angle::Feature", %"struct.angle::Feature", %"struct.angle::Feature", %"struct.angle::Feature", %"struct.angle::Feature", %"struct.angle::Feature", %"struct.angle::Feature", %"struct.angle::Feature", %"struct.angle::Feature", %"struct.angle::Feature", %"struct.angle::Feature", %"struct.angle::Feature", %"struct.angle::Feature", %"struct.angle::Feature", %"struct.angle::Feature", %"struct.angle::Feature", %"struct.angle::Feature", %"struct.angle::Feature", %"struct.angle::Feature", %"struct.angle::Feature", %"struct.angle::Feature", %"struct.angle::Feature", %"struct.angle::Feature", %"struct.angle::Feature", %"struct.angle::Feature", %"struct.angle::Feature", %"struct.angle::Feature", %"struct.angle::Feature", %"struct.angle::Feature", %"struct.angle::Feature", %"struct.angle::Feature", %"struct.angle::Feature", %"struct.angle::Feature", %"struct.angle::Feature", %"struct.angle::Feature", %"struct.angle::Feature", %"struct.angle::Feature", %"struct.angle::Feature", %"struct.angle::Feature", %"struct.angle::Feature", %"struct.angle::Feature", %"struct.angle::Feature" }
%"class.std::__1::__shared_weak_count" = type { %"class.std::__1::__shared_count", i64 }
%"class.std::__1::__shared_count" = type { i32 (...)**, i64 }
%"class.std::__1::map.170" = type { %"class.std::__1::__tree.171" }
%"class.std::__1::__tree.171" = type { %"class.std::__1::__tree_end_node"*, %"class.std::__1::__compressed_pair.172", %"class.std::__1::__compressed_pair.176" }
%"class.std::__1::__compressed_pair.172" = type { %"struct.std::__1::__compressed_pair_elem" }
%"class.std::__1::__compressed_pair.176" = type { %"struct.std::__1::__compressed_pair_elem.2" }
%struct.XVisualInfo = type { %struct.Visual*, i64, i32, i32, i32, i64, i64, i64, i32, i32 }
%struct.Visual = type { %struct._XExtData*, i64, i32, i64, i64, i64, i32, i32 }
%struct._XExtData = type { i32, %struct._XExtData*, i32 (%struct._XExtData*)*, i8* }
%"class.absl::flat_hash_map.186" = type { %"class.absl::container_internal::raw_hash_map.187" }
%"class.absl::container_internal::raw_hash_map.187" = type { %"class.absl::container_internal::raw_hash_set.188" }
%"class.absl::container_internal::raw_hash_set.188" = type { i8*, %"union.absl::container_internal::map_slot_type.189"*, i64, i64, %"class.absl::container_internal::CompressedTuple.190" }
%"union.absl::container_internal::map_slot_type.189" = type opaque
%"class.absl::container_internal::CompressedTuple.190" = type { %"struct.absl::container_internal::internal_compressed_tuple::CompressedTupleImpl.191" }
%"struct.absl::container_internal::internal_compressed_tuple::CompressedTupleImpl.191" = type { %"struct.absl::container_internal::internal_compressed_tuple::Storage" }
%"class.std::__1::vector.195" = type { %"class.std::__1::__vector_base.196" }
%"class.std::__1::__vector_base.196" = type { i64*, i64*, %"class.std::__1::__compressed_pair.197" }
%"class.std::__1::__compressed_pair.197" = type { %"struct.std::__1::__compressed_pair_elem.198" }
%"struct.std::__1::__compressed_pair_elem.198" = type { i64* }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short" = type { [23 x i8], %struct.anon }
%struct.anon = type { i8 }
%"class.std::__1::basic_ios" = type <{ %"class.std::__1::ios_base", %"class.std::__1::basic_ostream"*, i32, [4 x i8] }>
%"class.std::__1::__vector_base_common" = type { i8 }
%"class.rx::FramebufferImpl" = type opaque
%"class.gl::FramebufferState" = type opaque
%"struct.angle::Format" = type { i32, i32, i32, void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, void (i8*, i8*)*, void (i8*, i8*)*, %"class.rx::FastCopyFunctionMap"*, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i8, i8, i8, i8, i8, i32 }
%"class.rx::FastCopyFunctionMap" = type { i64, %"struct.rx::FastCopyFunctionMap::Entry"* }
%"struct.rx::FastCopyFunctionMap::Entry" = type { i32, void (i8*, i8*)* }
%"class.std::__1::basic_ostream<char, std::__1::char_traits<char> >::sentry" = type { i8, %"class.std::__1::basic_ostream"* }
%"class.std::__1::locale::facet" = type { %"class.std::__1::__shared_count" }
%"class.std::__1::ctype" = type <{ %"class.std::__1::locale::facet", i16*, i8, [7 x i8] }>

$_ZN2rx31FramebufferAttachmentObjectImpl25getAttachmentRenderTargetEPKN2gl7ContextEjRKNS1_10ImageIndexEiPPNS_33FramebufferAttachmentRenderTargetE = comdat any

$_ZN2rx11SurfaceImpl7destroyEPKN3egl7DisplayE = comdat any

$_ZNSt3__124__put_character_sequenceIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_PKS4_m = comdat any

$_ZNSt3__116__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_ = comdat any

@_ZTVN2rx16PixmapSurfaceGLXE = hidden unnamed_addr constant { [41 x i8*] } { [41 x i8*] [i8* null, i8* null, i8* bitcast (void (%"class.rx::PixmapSurfaceGLX"*)* @_ZN2rx16PixmapSurfaceGLXD2Ev to i8*), i8* bitcast (void (%"class.rx::PixmapSurfaceGLX"*)* @_ZN2rx16PixmapSurfaceGLXD0Ev to i8*), i8* bitcast (i32 (%"class.rx::FramebufferAttachmentObjectImpl"*, %"class.gl::Context"*, i32, %"class.gl::ImageIndex"*, i32, %"class.rx::FramebufferAttachmentRenderTarget"**)* @_ZN2rx31FramebufferAttachmentObjectImpl25getAttachmentRenderTargetEPKN2gl7ContextEjRKNS1_10ImageIndexEiPPNS_33FramebufferAttachmentRenderTargetE to i8*), i8* bitcast (i32 (%"class.rx::SurfaceGL"*, %"class.gl::Context"*, %"class.gl::ImageIndex"*)* @_ZN2rx9SurfaceGL18initializeContentsEPKN2gl7ContextERKNS1_10ImageIndexE to i8*), i8* bitcast (void (%"class.rx::SurfaceImpl"*, %"class.egl::Display"*)* @_ZN2rx11SurfaceImpl7destroyEPKN3egl7DisplayE to i8*), i8* bitcast (void (%"class.egl::Error"*, %"class.rx::PixmapSurfaceGLX"*, %"class.egl::Display"*)* @_ZN2rx16PixmapSurfaceGLX10initializeEPKN3egl7DisplayE to i8*), i8* bitcast (%"class.rx::FramebufferImpl"* (%"class.rx::SurfaceGL"*, %"class.gl::Context"*, %"class.gl::FramebufferState"*)* @_ZN2rx9SurfaceGL24createDefaultFramebufferEPKN2gl7ContextERKNS1_16FramebufferStateE to i8*), i8* bitcast (void (%"class.egl::Error"*, %"class.rx::PixmapSurfaceGLX"*, %"class.gl::Context"*)* @_ZN2rx16PixmapSurfaceGLX11makeCurrentEPKN2gl7ContextE to i8*), i8* bitcast (void (%"class.egl::Error"*, %"class.rx::SurfaceImpl"*, %"class.gl::Context"*)* @_ZN2rx11SurfaceImpl13unMakeCurrentEPKN2gl7ContextE to i8*), i8* bitcast (void (%"class.egl::Error"*, %"class.rx::PixmapSurfaceGLX"*, %"class.gl::Context"*)* @_ZN2rx16PixmapSurfaceGLX4swapEPKN2gl7ContextE to i8*), i8* bitcast (void (%"class.egl::Error"*, %"class.rx::SurfaceImpl"*, %"class.gl::Context"*, i32*, i32)* @_ZN2rx11SurfaceImpl14swapWithDamageEPKN2gl7ContextEPKii to i8*), i8* bitcast (void (%"class.egl::Error"*, %"class.rx::SurfaceImpl"*, %"class.gl::Context"*, i64)* @_ZN2rx11SurfaceImpl18swapWithFrameTokenEPKN2gl7ContextEm to i8*), i8* bitcast (void (%"class.egl::Error"*, %"class.rx::PixmapSurfaceGLX"*, %"class.gl::Context"*, i32, i32, i32, i32)* @_ZN2rx16PixmapSurfaceGLX13postSubBufferEPKN2gl7ContextEiiii to i8*), i8* bitcast (void (%"class.egl::Error"*, %"class.rx::SurfaceImpl"*, i64)* @_ZN2rx11SurfaceImpl19setPresentationTimeEl to i8*), i8* bitcast (void (%"class.egl::Error"*, %"class.rx::PixmapSurfaceGLX"*, i32, i8**)* @_ZN2rx16PixmapSurfaceGLX24querySurfacePointerANGLEEiPPv to i8*), i8* bitcast (void (%"class.egl::Error"*, %"class.rx::PixmapSurfaceGLX"*, %"class.gl::Context"*, %"class.gl::Texture"*, i32)* @_ZN2rx16PixmapSurfaceGLX12bindTexImageEPKN2gl7ContextEPNS1_7TextureEi to i8*), i8* bitcast (void (%"class.egl::Error"*, %"class.rx::PixmapSurfaceGLX"*, %"class.gl::Context"*, i32)* @_ZN2rx16PixmapSurfaceGLX15releaseTexImageEPKN2gl7ContextEi to i8*), i8* bitcast (void (%"class.egl::Error"*, %"class.rx::SurfaceGL"*, i64*, i64*, i64*)* @_ZN2rx9SurfaceGL13getSyncValuesEPmS1_S1_ to i8*), i8* bitcast (void (%"class.egl::Error"*, %"class.rx::SurfaceGL"*, i32*, i32*)* @_ZN2rx9SurfaceGL10getMscRateEPiS1_ to i8*), i8* bitcast (void (%"class.rx::PixmapSurfaceGLX"*, i32)* @_ZN2rx16PixmapSurfaceGLX15setSwapIntervalEi to i8*), i8* bitcast (void (%"class.rx::SurfaceImpl"*, i32)* @_ZN2rx11SurfaceImpl13setFixedWidthEi to i8*), i8* bitcast (void (%"class.rx::SurfaceImpl"*, i32)* @_ZN2rx11SurfaceImpl14setFixedHeightEi to i8*), i8* bitcast (i32 (%"class.rx::PixmapSurfaceGLX"*)* @_ZNK2rx16PixmapSurfaceGLX8getWidthEv to i8*), i8* bitcast (i32 (%"class.rx::PixmapSurfaceGLX"*)* @_ZNK2rx16PixmapSurfaceGLX9getHeightEv to i8*), i8* bitcast (void (%"class.egl::Error"*, %"class.rx::SurfaceImpl"*, %"class.egl::Display"*, i32*)* @_ZNK2rx11SurfaceImpl12getUserWidthEPKN3egl7DisplayEPi to i8*), i8* bitcast (void (%"class.egl::Error"*, %"class.rx::SurfaceImpl"*, %"class.egl::Display"*, i32*)* @_ZNK2rx11SurfaceImpl13getUserHeightEPKN3egl7DisplayEPi to i8*), i8* bitcast (i32 (%"class.rx::PixmapSurfaceGLX"*)* @_ZNK2rx16PixmapSurfaceGLX24isPostSubBufferSupportedEv to i8*), i8* bitcast (i32 (%"class.rx::PixmapSurfaceGLX"*)* @_ZNK2rx16PixmapSurfaceGLX15getSwapBehaviorEv to i8*), i8* bitcast (%"struct.angle::Format"* (%"class.rx::SurfaceImpl"*)* @_ZNK2rx11SurfaceImpl24getD3DTextureColorFormatEv to i8*), i8* bitcast (void (%"class.rx::SurfaceImpl"*, i1)* @_ZN2rx11SurfaceImpl20setTimestampsEnabledEb to i8*), i8* bitcast (void (%"class.angle::BitSetT"*, %"class.rx::SurfaceImpl"*)* @_ZNK2rx11SurfaceImpl29getSupportedCompositorTimingsEv to i8*), i8* bitcast (void (%"class.egl::Error"*, %"class.rx::SurfaceImpl"*, i32, i32*, i64*)* @_ZNK2rx11SurfaceImpl19getCompositorTimingEiPKiPl to i8*), i8* bitcast (void (%"class.egl::Error"*, %"class.rx::SurfaceImpl"*, i64*)* @_ZNK2rx11SurfaceImpl14getNextFrameIdEPm to i8*), i8* bitcast (void (%"class.angle::BitSetT.4"*, %"class.rx::SurfaceImpl"*)* @_ZNK2rx11SurfaceImpl22getSupportedTimestampsEv to i8*), i8* bitcast (void (%"class.egl::Error"*, %"class.rx::SurfaceImpl"*, i64, i32, i32*, i64*)* @_ZNK2rx11SurfaceImpl18getFrameTimestampsEmiPKiPl to i8*), i8* bitcast (void (%"class.egl::Error"*, %"class.rx::SurfaceImpl"*, %"class.gl::Context"*, i32*)* @_ZN2rx11SurfaceImpl12getBufferAgeEPKN2gl7ContextEPi to i8*), i8* bitcast (i1 (%"class.rx::SurfaceGL"*)* @_ZNK2rx9SurfaceGL23hasEmulatedAlphaChannelEv to i8*), i8* bitcast (void (%"class.egl::Error"*, %"class.rx::PixmapSurfaceGLX"*)* @_ZN2rx16PixmapSurfaceGLX14checkForResizeEv to i8*), i8* bitcast (i64 (%"class.rx::PixmapSurfaceGLX"*)* @_ZNK2rx16PixmapSurfaceGLX11getDrawableEv to i8*)] }, align 8
@.str = private unnamed_addr constant [46 x i8] c"XGetGeometry query failed on pixmap surface: \00", align 1
@.str.1 = private unnamed_addr constant [38 x i8] c"Failed to create a native GLX pixmap.\00", align 1
@_ZZN2rx16PixmapSurfaceGLX12bindTexImageEPKN2gl7ContextEPNS1_7TextureEiE7attribs = internal constant [1 x i32] zeroinitializer, align 4
@_ZTVNSt3__119basic_ostringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEEE = external unnamed_addr constant { [5 x i8*], [5 x i8*] }, align 8
@_ZTTNSt3__119basic_ostringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEEE = external unnamed_addr constant [4 x i8*], align 8
@_ZTVNSt3__115basic_stringbufIcNS_11char_traitsIcEENS_9allocatorIcEEEE = external unnamed_addr constant { [16 x i8*] }, align 8
@_ZNSt3__15ctypeIcE2idE = external global %"class.std::__1::locale::id", align 8

@_ZN2rx16PixmapSurfaceGLXC1ERKN3egl12SurfaceStateEmP9_XDisplayRKNS_12FunctionsGLXEPv = hidden unnamed_addr alias void (%"class.rx::PixmapSurfaceGLX"*, %"struct.egl::SurfaceState"*, i64, %struct._XDisplay*, %"class.rx::FunctionsGLX"*, i8*), void (%"class.rx::PixmapSurfaceGLX"*, %"struct.egl::SurfaceState"*, i64, %struct._XDisplay*, %"class.rx::FunctionsGLX"*, i8*)* @_ZN2rx16PixmapSurfaceGLXC2ERKN3egl12SurfaceStateEmP9_XDisplayRKNS_12FunctionsGLXEPv
@_ZN2rx16PixmapSurfaceGLXD1Ev = hidden unnamed_addr alias void (%"class.rx::PixmapSurfaceGLX"*), void (%"class.rx::PixmapSurfaceGLX"*)* @_ZN2rx16PixmapSurfaceGLXD2Ev

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden i32 @_ZN2rx31FramebufferAttachmentObjectImpl25getAttachmentRenderTargetEPKN2gl7ContextEjRKNS1_10ImageIndexEiPPNS_33FramebufferAttachmentRenderTargetE(%"class.rx::FramebufferAttachmentObjectImpl"*, %"class.gl::Context"*, i32, %"class.gl::ImageIndex"* dereferenceable(16), i32, %"class.rx::FramebufferAttachmentRenderTarget"**) unnamed_addr #0 comdat align 2 {
  ret i32 1
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2rx16PixmapSurfaceGLXC2ERKN3egl12SurfaceStateEmP9_XDisplayRKNS_12FunctionsGLXEPv(%"class.rx::PixmapSurfaceGLX"*, %"struct.egl::SurfaceState"* dereferenceable(56), i64, %struct._XDisplay*, %"class.rx::FunctionsGLX"* dereferenceable(64), i8*) unnamed_addr #1 align 2 {
  %7 = getelementptr inbounds %"class.rx::PixmapSurfaceGLX", %"class.rx::PixmapSurfaceGLX"* %0, i64 0, i32 0, i32 0
  tail call void @_ZN2rx9SurfaceGLC2ERKN3egl12SurfaceStateE(%"class.rx::SurfaceGL"* %7, %"struct.egl::SurfaceState"* dereferenceable(56) %1) #12
  %8 = getelementptr inbounds %"class.rx::PixmapSurfaceGLX", %"class.rx::PixmapSurfaceGLX"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [41 x i8*] }, { [41 x i8*] }* @_ZTVN2rx16PixmapSurfaceGLXE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %8, align 8
  %9 = getelementptr inbounds %"class.rx::PixmapSurfaceGLX", %"class.rx::PixmapSurfaceGLX"* %0, i64 0, i32 1
  store i32 0, i32* %9, align 8
  %10 = getelementptr inbounds %"class.rx::PixmapSurfaceGLX", %"class.rx::PixmapSurfaceGLX"* %0, i64 0, i32 2
  store i32 0, i32* %10, align 4
  %11 = getelementptr inbounds %"class.rx::PixmapSurfaceGLX", %"class.rx::PixmapSurfaceGLX"* %0, i64 0, i32 3
  store %"class.rx::FunctionsGLX"* %4, %"class.rx::FunctionsGLX"** %11, align 8
  %12 = getelementptr inbounds %"class.rx::PixmapSurfaceGLX", %"class.rx::PixmapSurfaceGLX"* %0, i64 0, i32 4
  store i8* %5, i8** %12, align 8
  %13 = getelementptr inbounds %"class.rx::PixmapSurfaceGLX", %"class.rx::PixmapSurfaceGLX"* %0, i64 0, i32 5
  store i64 %2, i64* %13, align 8
  %14 = getelementptr inbounds %"class.rx::PixmapSurfaceGLX", %"class.rx::PixmapSurfaceGLX"* %0, i64 0, i32 6
  store i64 0, i64* %14, align 8
  %15 = getelementptr inbounds %"class.rx::PixmapSurfaceGLX", %"class.rx::PixmapSurfaceGLX"* %0, i64 0, i32 7
  store %struct._XDisplay* %3, %struct._XDisplay** %15, align 8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2rx16PixmapSurfaceGLXD2Ev(%"class.rx::PixmapSurfaceGLX"*) unnamed_addr #1 align 2 {
  %2 = getelementptr inbounds %"class.rx::PixmapSurfaceGLX", %"class.rx::PixmapSurfaceGLX"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [41 x i8*] }, { [41 x i8*] }* @_ZTVN2rx16PixmapSurfaceGLXE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %2, align 8
  %3 = getelementptr inbounds %"class.rx::PixmapSurfaceGLX", %"class.rx::PixmapSurfaceGLX"* %0, i64 0, i32 6
  %4 = load i64, i64* %3, align 8
  %5 = icmp eq i64 %4, 0
  br i1 %5, label %9, label %6

6:                                                ; preds = %1
  %7 = getelementptr inbounds %"class.rx::PixmapSurfaceGLX", %"class.rx::PixmapSurfaceGLX"* %0, i64 0, i32 3
  %8 = load %"class.rx::FunctionsGLX"*, %"class.rx::FunctionsGLX"** %7, align 8
  tail call void @_ZNK2rx12FunctionsGLX13destroyPixmapEm(%"class.rx::FunctionsGLX"* %8, i64 %4) #12
  br label %9

9:                                                ; preds = %1, %6
  %10 = getelementptr inbounds %"class.rx::PixmapSurfaceGLX", %"class.rx::PixmapSurfaceGLX"* %0, i64 0, i32 0, i32 0
  tail call void @_ZN2rx9SurfaceGLD2Ev(%"class.rx::SurfaceGL"* %10) #12
  ret void
}

declare void @_ZNK2rx12FunctionsGLX13destroyPixmapEm(%"class.rx::FunctionsGLX"*, i64) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2rx16PixmapSurfaceGLXD0Ev(%"class.rx::PixmapSurfaceGLX"*) unnamed_addr #1 align 2 {
  %2 = getelementptr inbounds %"class.rx::PixmapSurfaceGLX", %"class.rx::PixmapSurfaceGLX"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [41 x i8*] }, { [41 x i8*] }* @_ZTVN2rx16PixmapSurfaceGLXE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %2, align 8
  %3 = getelementptr inbounds %"class.rx::PixmapSurfaceGLX", %"class.rx::PixmapSurfaceGLX"* %0, i64 0, i32 6
  %4 = load i64, i64* %3, align 8
  %5 = icmp eq i64 %4, 0
  br i1 %5, label %9, label %6

6:                                                ; preds = %1
  %7 = getelementptr inbounds %"class.rx::PixmapSurfaceGLX", %"class.rx::PixmapSurfaceGLX"* %0, i64 0, i32 3
  %8 = load %"class.rx::FunctionsGLX"*, %"class.rx::FunctionsGLX"** %7, align 8
  tail call void @_ZNK2rx12FunctionsGLX13destroyPixmapEm(%"class.rx::FunctionsGLX"* %8, i64 %4) #12
  br label %9

9:                                                ; preds = %1, %6
  %10 = getelementptr inbounds %"class.rx::PixmapSurfaceGLX", %"class.rx::PixmapSurfaceGLX"* %0, i64 0, i32 0, i32 0
  tail call void @_ZN2rx9SurfaceGLD2Ev(%"class.rx::SurfaceGL"* %10) #12
  %11 = bitcast %"class.rx::PixmapSurfaceGLX"* %0 to i8*
  tail call void @_ZdlPv(i8* %11) #13
  ret void
}

; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(i8*) local_unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2rx16PixmapSurfaceGLX10initializeEPKN3egl7DisplayE(%"class.egl::Error"* noalias sret, %"class.rx::PixmapSurfaceGLX"*, %"class.egl::Display"* nocapture readonly) unnamed_addr #1 align 2 {
  %4 = alloca %"class.std::__1::basic_string", align 8
  %5 = alloca %"class.std::__1::basic_string", align 8
  %6 = alloca i64, align 8
  %7 = alloca i32, align 4
  %8 = alloca i32, align 4
  %9 = alloca i32, align 4
  %10 = alloca i32, align 4
  %11 = alloca %"class.angle::ErrorStreamBase", align 8
  %12 = alloca %"class.std::__1::basic_string", align 8
  %13 = alloca %"class.std::__1::vector.179", align 8
  %14 = alloca %"class.angle::ErrorStreamBase.202", align 8
  %15 = getelementptr inbounds %"class.egl::Display", %"class.egl::Display"* %2, i64 0, i32 3
  %16 = bitcast %"class.rx::DisplayImpl"** %15 to %"class.rx::DisplayGLX"**
  %17 = load %"class.rx::DisplayGLX"*, %"class.rx::DisplayGLX"** %16, align 8
  %18 = bitcast i64* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %18) #12
  store i64 -6148914691236517206, i64* %6, align 8
  %19 = bitcast i32* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %19) #12
  store i32 0, i32* %7, align 4
  %20 = bitcast i32* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %20) #12
  store i32 0, i32* %8, align 4
  %21 = bitcast i32* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %21) #12
  store i32 0, i32* %9, align 4
  %22 = bitcast i32* %10 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %22) #12
  store i32 0, i32* %10, align 4
  %23 = getelementptr inbounds %"class.rx::PixmapSurfaceGLX", %"class.rx::PixmapSurfaceGLX"* %1, i64 0, i32 7
  %24 = load %struct._XDisplay*, %struct._XDisplay** %23, align 8
  %25 = getelementptr inbounds %"class.rx::PixmapSurfaceGLX", %"class.rx::PixmapSurfaceGLX"* %1, i64 0, i32 5
  %26 = load i64, i64* %25, align 8
  %27 = getelementptr inbounds %"class.rx::PixmapSurfaceGLX", %"class.rx::PixmapSurfaceGLX"* %1, i64 0, i32 1
  %28 = getelementptr inbounds %"class.rx::PixmapSurfaceGLX", %"class.rx::PixmapSurfaceGLX"* %1, i64 0, i32 2
  %29 = call i32 @XGetGeometry(%struct._XDisplay* %24, i64 %26, i64* nonnull %6, i32* nonnull %7, i32* nonnull %8, i32* %27, i32* %28, i32* nonnull %9, i32* nonnull %10) #12
  %30 = icmp eq i32 %29, 0
  br i1 %30, label %31, label %114

31:                                               ; preds = %3
  %32 = bitcast %"class.angle::ErrorStreamBase"* %11 to i8*
  call void @llvm.lifetime.start.p0i8(i64 272, i8* nonnull %32) #12
  %33 = getelementptr inbounds %"class.angle::ErrorStreamBase", %"class.angle::ErrorStreamBase"* %11, i64 0, i32 0
  store i32 12301, i32* %33, align 8
  %34 = getelementptr inbounds %"class.angle::ErrorStreamBase", %"class.angle::ErrorStreamBase"* %11, i64 0, i32 1
  %35 = getelementptr inbounds %"class.angle::ErrorStreamBase", %"class.angle::ErrorStreamBase"* %11, i64 0, i32 1, i32 2, i32 0, i32 0
  %36 = getelementptr inbounds %"class.std::__1::basic_ostringstream", %"class.std::__1::basic_ostringstream"* %34, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [5 x i8*], [5 x i8*] }, { [5 x i8*], [5 x i8*] }* @_ZTVNSt3__119basic_ostringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEEE, i64 0, inrange i32 1, i64 3) to i32 (...)**), i32 (...)*** %35, align 8
  %37 = getelementptr inbounds %"class.angle::ErrorStreamBase", %"class.angle::ErrorStreamBase"* %11, i64 0, i32 1, i32 1
  %38 = getelementptr inbounds %"class.std::__1::basic_stringbuf", %"class.std::__1::basic_stringbuf"* %37, i64 0, i32 0
  %39 = load i64, i64* bitcast (i8** getelementptr inbounds ([4 x i8*], [4 x i8*]* @_ZTTNSt3__119basic_ostringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEEE, i64 0, i64 1) to i64*), align 8
  %40 = bitcast %"class.std::__1::basic_ostringstream"* %34 to i64*
  store i64 %39, i64* %40, align 8
  %41 = load i64, i64* bitcast (i8** getelementptr inbounds ([4 x i8*], [4 x i8*]* @_ZTTNSt3__119basic_ostringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEEE, i64 0, i64 2) to i64*), align 8
  %42 = bitcast %"class.std::__1::basic_ostringstream"* %34 to i8**
  %43 = inttoptr i64 %39 to i8*
  %44 = getelementptr i8, i8* %43, i64 -24
  %45 = bitcast i8* %44 to i64*
  %46 = load i64, i64* %45, align 8
  %47 = bitcast %"class.std::__1::basic_ostringstream"* %34 to i8*
  %48 = getelementptr inbounds i8, i8* %47, i64 %46
  %49 = bitcast i8* %48 to i64*
  store i64 %41, i64* %49, align 8
  %50 = load i8*, i8** %42, align 8
  %51 = getelementptr i8, i8* %50, i64 -24
  %52 = bitcast i8* %51 to i64*
  %53 = load i64, i64* %52, align 8
  %54 = getelementptr inbounds i8, i8* %47, i64 %53
  %55 = bitcast i8* %54 to %"class.std::__1::ios_base"*
  %56 = bitcast %"class.std::__1::basic_stringbuf"* %37 to i8*
  call void @_ZNSt3__18ios_base4initEPv(%"class.std::__1::ios_base"* %55, i8* %56) #12
  %57 = getelementptr inbounds i8, i8* %54, i64 136
  %58 = bitcast i8* %57 to %"class.std::__1::basic_ostream"**
  store %"class.std::__1::basic_ostream"* null, %"class.std::__1::basic_ostream"** %58, align 8
  %59 = getelementptr inbounds i8, i8* %54, i64 144
  %60 = bitcast i8* %59 to i32*
  store i32 -1, i32* %60, align 8
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [5 x i8*], [5 x i8*] }, { [5 x i8*], [5 x i8*] }* @_ZTVNSt3__119basic_ostringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEEE, i64 0, inrange i32 0, i64 3) to i32 (...)**), i32 (...)*** %36, align 8
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [5 x i8*], [5 x i8*] }, { [5 x i8*], [5 x i8*] }* @_ZTVNSt3__119basic_ostringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEEE, i64 0, inrange i32 1, i64 3) to i32 (...)**), i32 (...)*** %35, align 8
  call void @_ZNSt3__115basic_streambufIcNS_11char_traitsIcEEEC2Ev(%"class.std::__1::basic_streambuf"* %38) #12
  %61 = getelementptr inbounds %"class.std::__1::basic_stringbuf", %"class.std::__1::basic_stringbuf"* %37, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [16 x i8*] }, { [16 x i8*] }* @_ZTVNSt3__115basic_stringbufIcNS_11char_traitsIcEENS_9allocatorIcEEEE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %61, align 8
  %62 = getelementptr inbounds %"class.angle::ErrorStreamBase", %"class.angle::ErrorStreamBase"* %11, i64 0, i32 1, i32 1, i32 1
  %63 = getelementptr inbounds %"class.angle::ErrorStreamBase", %"class.angle::ErrorStreamBase"* %11, i64 0, i32 1, i32 1, i32 3
  %64 = bitcast %"class.std::__1::basic_string"* %62 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %64, i8 0, i64 32, i1 false) #12
  store i32 16, i32* %63, align 8
  %65 = bitcast %"class.std::__1::basic_ostringstream"* %34 to %"class.std::__1::basic_ostream"*
  %66 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZNSt3__124__put_character_sequenceIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_PKS4_m(%"class.std::__1::basic_ostream"* dereferenceable(160) %65, i8* getelementptr inbounds ([46 x i8], [46 x i8]* @.str, i64 0, i64 0), i64 45) #12
  %67 = load %struct._XDisplay*, %struct._XDisplay** %23, align 8
  call void @_ZN2rx3x1114XErrorToStringEP9_XDisplayi(%"class.std::__1::basic_string"* nonnull sret %12, %struct._XDisplay* %67, i32 0) #12
  %68 = bitcast %"class.std::__1::basic_string"* %12 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %69 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %68, i64 0, i32 1, i32 0
  %70 = load i8, i8* %69, align 1
  %71 = icmp slt i8 %70, 0
  %72 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %12, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %73 = load i8*, i8** %72, align 8
  %74 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %12, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %75 = load i64, i64* %74, align 8
  %76 = bitcast %"class.std::__1::basic_string"* %12 to i8*
  %77 = zext i8 %70 to i64
  %78 = select i1 %71, i8* %73, i8* %76
  %79 = select i1 %71, i64 %75, i64 %77
  %80 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZNSt3__124__put_character_sequenceIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_PKS4_m(%"class.std::__1::basic_ostream"* dereferenceable(160) %65, i8* %78, i64 %79) #12
  %81 = load i32, i32* %33, align 8, !noalias !2
  %82 = bitcast %"class.std::__1::basic_string"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %82) #12, !noalias !2
  call void @_ZNKSt3__115basic_stringbufIcNS_11char_traitsIcEENS_9allocatorIcEEE3strEv(%"class.std::__1::basic_string"* nonnull sret %5, %"class.std::__1::basic_stringbuf"* %37) #12, !noalias !2
  call void @_ZN3egl5ErrorC1EiiONSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEE(%"class.egl::Error"* %0, i32 12301, i32 %81, %"class.std::__1::basic_string"* nonnull dereferenceable(24) %5) #12
  %83 = bitcast %"class.std::__1::basic_string"* %5 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %84 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %83, i64 0, i32 1, i32 0
  %85 = load i8, i8* %84, align 1, !noalias !2
  %86 = icmp slt i8 %85, 0
  br i1 %86, label %87, label %90

87:                                               ; preds = %31
  %88 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %5, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %89 = load i8*, i8** %88, align 8, !noalias !2
  call void @_ZdlPv(i8* %89) #13
  br label %90

90:                                               ; preds = %31, %87
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %82) #12, !noalias !2
  %91 = load i8, i8* %69, align 1
  %92 = icmp slt i8 %91, 0
  br i1 %92, label %93, label %95

93:                                               ; preds = %90
  %94 = load i8*, i8** %72, align 8
  call void @_ZdlPv(i8* %94) #13
  br label %95

95:                                               ; preds = %90, %93
  %96 = load i64, i64* bitcast ([4 x i8*]* @_ZTTNSt3__119basic_ostringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEEE to i64*), align 8
  store i64 %96, i64* %40, align 8
  %97 = load i64, i64* bitcast (i8** getelementptr inbounds ([4 x i8*], [4 x i8*]* @_ZTTNSt3__119basic_ostringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEEE, i64 0, i64 3) to i64*), align 8
  %98 = inttoptr i64 %96 to i8*
  %99 = getelementptr i8, i8* %98, i64 -24
  %100 = bitcast i8* %99 to i64*
  %101 = load i64, i64* %100, align 8
  %102 = getelementptr inbounds i8, i8* %47, i64 %101
  %103 = bitcast i8* %102 to i64*
  store i64 %97, i64* %103, align 8
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [16 x i8*] }, { [16 x i8*] }* @_ZTVNSt3__115basic_stringbufIcNS_11char_traitsIcEENS_9allocatorIcEEEE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %61, align 8
  %104 = bitcast %"class.std::__1::basic_string"* %62 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %105 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %104, i64 0, i32 1, i32 0
  %106 = load i8, i8* %105, align 1
  %107 = icmp slt i8 %106, 0
  br i1 %107, label %108, label %111

108:                                              ; preds = %95
  %109 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %62, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %110 = load i8*, i8** %109, align 8
  call void @_ZdlPv(i8* %110) #13
  br label %111

111:                                              ; preds = %95, %108
  call void @_ZNSt3__115basic_streambufIcNS_11char_traitsIcEEED2Ev(%"class.std::__1::basic_streambuf"* %38) #12
  call void @_ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEED2Ev(%"class.std::__1::basic_ostream"* %65, i8** getelementptr inbounds ([4 x i8*], [4 x i8*]* @_ZTTNSt3__119basic_ostringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEEE, i64 0, i64 1)) #12
  %112 = getelementptr inbounds %"class.angle::ErrorStreamBase", %"class.angle::ErrorStreamBase"* %11, i64 0, i32 1, i32 2
  %113 = bitcast %"class.std::__1::basic_ios.base"* %112 to %"class.std::__1::basic_ios"*
  call void @_ZNSt3__19basic_iosIcNS_11char_traitsIcEEED2Ev(%"class.std::__1::basic_ios"* %113) #12
  call void @llvm.lifetime.end.p0i8(i64 272, i8* nonnull %32) #12
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %22) #12
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %21) #12
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %20) #12
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %19) #12
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %18) #12
  br label %458

114:                                              ; preds = %3
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %22) #12
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %21) #12
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %20) #12
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %19) #12
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %18) #12
  %115 = bitcast %"class.std::__1::vector.179"* %13 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %115) #12
  %116 = getelementptr inbounds %"class.std::__1::vector.179", %"class.std::__1::vector.179"* %13, i64 0, i32 0, i32 0
  %117 = getelementptr inbounds %"class.std::__1::vector.179", %"class.std::__1::vector.179"* %13, i64 0, i32 0, i32 1
  %118 = getelementptr inbounds %"class.std::__1::vector.179", %"class.std::__1::vector.179"* %13, i64 0, i32 0, i32 2, i32 0, i32 0
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %115, i8 0, i64 24, i1 false) #12
  %119 = getelementptr inbounds %"class.rx::PixmapSurfaceGLX", %"class.rx::PixmapSurfaceGLX"* %1, i64 0, i32 0, i32 0, i32 0, i32 1
  %120 = load %"struct.egl::SurfaceState"*, %"struct.egl::SurfaceState"** %119, align 8
  %121 = getelementptr inbounds %"struct.egl::SurfaceState", %"struct.egl::SurfaceState"* %120, i64 0, i32 2
  %122 = call zeroext i1 @_ZNK3egl12AttributeMap8containsEl(%"class.egl::AttributeMap"* %121, i64 12416) #12
  br i1 %122, label %123, label %193

123:                                              ; preds = %114
  %124 = bitcast i32** %117 to i64*
  %125 = bitcast %"class.std::__1::vector.179"* %13 to i64*
  %126 = bitcast i32** %118 to i64*
  %127 = call i8* @_Znwm(i64 4) #13
  %128 = bitcast i8* %127 to i32*
  %129 = getelementptr inbounds i8, i8* %127, i64 4
  %130 = ptrtoint i8* %129 to i64
  store i32 8405, i32* %128, align 4
  %131 = ptrtoint i8* %127 to i64
  store i64 %131, i64* %125, align 8
  store i64 %130, i64* %124, align 8
  store i64 %130, i64* %126, align 8
  %132 = load %"struct.egl::SurfaceState"*, %"struct.egl::SurfaceState"** %119, align 8
  %133 = getelementptr inbounds %"struct.egl::SurfaceState", %"struct.egl::SurfaceState"* %132, i64 0, i32 2
  %134 = call i32 @_ZNK3egl12AttributeMap8getAsIntEl(%"class.egl::AttributeMap"* %133, i64 12416) #12
  %135 = icmp eq i32 %134, 12381
  %136 = select i1 %135, i32 8409, i32 8408
  %137 = icmp eq i32 %134, 12382
  %138 = select i1 %137, i32 8410, i32 %136
  %139 = load i32*, i32** %117, align 8
  %140 = load i32*, i32** %118, align 8
  %141 = icmp ult i32* %139, %140
  %142 = ptrtoint i32* %140 to i64
  br i1 %141, label %143, label %147

143:                                              ; preds = %123
  store i32 %138, i32* %139, align 4
  %144 = getelementptr inbounds i32, i32* %139, i64 1
  %145 = ptrtoint i32* %144 to i64
  %146 = bitcast i32** %117 to i64*
  store i64 %145, i64* %146, align 8
  br label %193

147:                                              ; preds = %123
  %148 = ptrtoint i32* %139 to i64
  %149 = bitcast i32** %117 to i64*
  %150 = bitcast %"class.std::__1::vector.179"* %13 to i64*
  %151 = load i64, i64* %150, align 8
  %152 = sub i64 %148, %151
  %153 = ashr exact i64 %152, 2
  %154 = add nsw i64 %153, 1
  %155 = icmp ugt i64 %154, 4611686018427387903
  br i1 %155, label %156, label %158

156:                                              ; preds = %147
  %157 = bitcast %"class.std::__1::vector.179"* %13 to %"class.std::__1::__vector_base_common"*
  call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* nonnull %157) #14
  unreachable

158:                                              ; preds = %147
  %159 = bitcast i32** %118 to i64*
  %160 = sub i64 %142, %151
  %161 = ashr exact i64 %160, 2
  %162 = icmp ult i64 %161, 2305843009213693951
  br i1 %162, label %163, label %171

163:                                              ; preds = %158
  %164 = ashr exact i64 %160, 1
  %165 = icmp ult i64 %164, %154
  %166 = select i1 %165, i64 %154, i64 %164
  %167 = icmp eq i64 %166, 0
  br i1 %167, label %176, label %168

168:                                              ; preds = %163
  %169 = icmp ugt i64 %166, 4611686018427387903
  br i1 %169, label %170, label %171

170:                                              ; preds = %168
  call void @abort() #14
  unreachable

171:                                              ; preds = %168, %158
  %172 = phi i64 [ %166, %168 ], [ 4611686018427387903, %158 ]
  %173 = shl i64 %172, 2
  %174 = call i8* @_Znwm(i64 %173) #13
  %175 = bitcast i8* %174 to i32*
  br label %176

176:                                              ; preds = %171, %163
  %177 = phi i64 [ %172, %171 ], [ 0, %163 ]
  %178 = phi i8* [ %174, %171 ], [ null, %163 ]
  %179 = phi i32* [ %175, %171 ], [ null, %163 ]
  %180 = getelementptr inbounds i32, i32* %179, i64 %153
  %181 = getelementptr inbounds i32, i32* %179, i64 %177
  %182 = ptrtoint i32* %181 to i64
  store i32 %138, i32* %180, align 4
  %183 = getelementptr inbounds i32, i32* %180, i64 1
  %184 = ptrtoint i32* %183 to i64
  %185 = ptrtoint i32* %179 to i64
  %186 = icmp sgt i64 %152, 0
  br i1 %186, label %187, label %189

187:                                              ; preds = %176
  %188 = inttoptr i64 %151 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %178, i8* align 4 %188, i64 %152, i1 false) #12
  br label %189

189:                                              ; preds = %187, %176
  store i64 %185, i64* %150, align 8
  store i64 %184, i64* %149, align 8
  store i64 %182, i64* %159, align 8
  %190 = icmp eq i64 %151, 0
  br i1 %190, label %193, label %191

191:                                              ; preds = %189
  %192 = inttoptr i64 %151 to i8*
  call void @_ZdlPv(i8* %192) #13
  br label %193

193:                                              ; preds = %191, %189, %143, %114
  %194 = load %"struct.egl::SurfaceState"*, %"struct.egl::SurfaceState"** %119, align 8
  %195 = getelementptr inbounds %"struct.egl::SurfaceState", %"struct.egl::SurfaceState"* %194, i64 0, i32 2
  %196 = call zeroext i1 @_ZNK3egl12AttributeMap8containsEl(%"class.egl::AttributeMap"* %195, i64 12417) #12
  br i1 %196, label %197, label %314

197:                                              ; preds = %193
  %198 = load i32*, i32** %117, align 8
  %199 = load i32*, i32** %118, align 8
  %200 = icmp ult i32* %198, %199
  %201 = ptrtoint i32* %199 to i64
  br i1 %200, label %202, label %206

202:                                              ; preds = %197
  store i32 8406, i32* %198, align 4
  %203 = getelementptr inbounds i32, i32* %198, i64 1
  %204 = ptrtoint i32* %203 to i64
  %205 = bitcast i32** %117 to i64*
  store i64 %204, i64* %205, align 8
  br label %252

206:                                              ; preds = %197
  %207 = ptrtoint i32* %198 to i64
  %208 = bitcast i32** %117 to i64*
  %209 = bitcast %"class.std::__1::vector.179"* %13 to i64*
  %210 = load i64, i64* %209, align 8
  %211 = sub i64 %207, %210
  %212 = ashr exact i64 %211, 2
  %213 = add nsw i64 %212, 1
  %214 = icmp ugt i64 %213, 4611686018427387903
  br i1 %214, label %215, label %217

215:                                              ; preds = %206
  %216 = bitcast %"class.std::__1::vector.179"* %13 to %"class.std::__1::__vector_base_common"*
  call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* nonnull %216) #14
  unreachable

217:                                              ; preds = %206
  %218 = bitcast i32** %118 to i64*
  %219 = sub i64 %201, %210
  %220 = ashr exact i64 %219, 2
  %221 = icmp ult i64 %220, 2305843009213693951
  br i1 %221, label %222, label %230

222:                                              ; preds = %217
  %223 = ashr exact i64 %219, 1
  %224 = icmp ult i64 %223, %213
  %225 = select i1 %224, i64 %213, i64 %223
  %226 = icmp eq i64 %225, 0
  br i1 %226, label %235, label %227

227:                                              ; preds = %222
  %228 = icmp ugt i64 %225, 4611686018427387903
  br i1 %228, label %229, label %230

229:                                              ; preds = %227
  call void @abort() #14
  unreachable

230:                                              ; preds = %227, %217
  %231 = phi i64 [ %225, %227 ], [ 4611686018427387903, %217 ]
  %232 = shl i64 %231, 2
  %233 = call i8* @_Znwm(i64 %232) #13
  %234 = bitcast i8* %233 to i32*
  br label %235

235:                                              ; preds = %230, %222
  %236 = phi i64 [ %231, %230 ], [ 0, %222 ]
  %237 = phi i8* [ %233, %230 ], [ null, %222 ]
  %238 = phi i32* [ %234, %230 ], [ null, %222 ]
  %239 = getelementptr inbounds i32, i32* %238, i64 %212
  %240 = getelementptr inbounds i32, i32* %238, i64 %236
  %241 = ptrtoint i32* %240 to i64
  store i32 8406, i32* %239, align 4
  %242 = getelementptr inbounds i32, i32* %239, i64 1
  %243 = ptrtoint i32* %242 to i64
  %244 = ptrtoint i32* %238 to i64
  %245 = icmp sgt i64 %211, 0
  br i1 %245, label %246, label %248

246:                                              ; preds = %235
  %247 = inttoptr i64 %210 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %237, i8* align 4 %247, i64 %211, i1 false) #12
  br label %248

248:                                              ; preds = %246, %235
  store i64 %244, i64* %209, align 8
  store i64 %243, i64* %208, align 8
  store i64 %241, i64* %218, align 8
  %249 = icmp eq i64 %210, 0
  br i1 %249, label %252, label %250

250:                                              ; preds = %248
  %251 = inttoptr i64 %210 to i8*
  call void @_ZdlPv(i8* %251) #13
  br label %252

252:                                              ; preds = %202, %248, %250
  %253 = load %"struct.egl::SurfaceState"*, %"struct.egl::SurfaceState"** %119, align 8
  %254 = getelementptr inbounds %"struct.egl::SurfaceState", %"struct.egl::SurfaceState"* %253, i64 0, i32 2
  %255 = call i32 @_ZNK3egl12AttributeMap8getAsIntEl(%"class.egl::AttributeMap"* %254, i64 12417) #12
  %256 = icmp eq i32 %255, 12383
  %257 = select i1 %256, i32 8412, i32 0
  %258 = icmp eq i32 %255, 12380
  %259 = select i1 %258, i32 0, i32 %257
  %260 = load i32*, i32** %117, align 8
  %261 = load i32*, i32** %118, align 8
  %262 = icmp ult i32* %260, %261
  %263 = ptrtoint i32* %261 to i64
  br i1 %262, label %264, label %268

264:                                              ; preds = %252
  store i32 %259, i32* %260, align 4
  %265 = getelementptr inbounds i32, i32* %260, i64 1
  %266 = ptrtoint i32* %265 to i64
  %267 = bitcast i32** %117 to i64*
  store i64 %266, i64* %267, align 8
  br label %314

268:                                              ; preds = %252
  %269 = ptrtoint i32* %260 to i64
  %270 = bitcast i32** %117 to i64*
  %271 = bitcast %"class.std::__1::vector.179"* %13 to i64*
  %272 = load i64, i64* %271, align 8
  %273 = sub i64 %269, %272
  %274 = ashr exact i64 %273, 2
  %275 = add nsw i64 %274, 1
  %276 = icmp ugt i64 %275, 4611686018427387903
  br i1 %276, label %277, label %279

277:                                              ; preds = %268
  %278 = bitcast %"class.std::__1::vector.179"* %13 to %"class.std::__1::__vector_base_common"*
  call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* nonnull %278) #14
  unreachable

279:                                              ; preds = %268
  %280 = bitcast i32** %118 to i64*
  %281 = sub i64 %263, %272
  %282 = ashr exact i64 %281, 2
  %283 = icmp ult i64 %282, 2305843009213693951
  br i1 %283, label %284, label %292

284:                                              ; preds = %279
  %285 = ashr exact i64 %281, 1
  %286 = icmp ult i64 %285, %275
  %287 = select i1 %286, i64 %275, i64 %285
  %288 = icmp eq i64 %287, 0
  br i1 %288, label %297, label %289

289:                                              ; preds = %284
  %290 = icmp ugt i64 %287, 4611686018427387903
  br i1 %290, label %291, label %292

291:                                              ; preds = %289
  call void @abort() #14
  unreachable

292:                                              ; preds = %289, %279
  %293 = phi i64 [ %287, %289 ], [ 4611686018427387903, %279 ]
  %294 = shl i64 %293, 2
  %295 = call i8* @_Znwm(i64 %294) #13
  %296 = bitcast i8* %295 to i32*
  br label %297

297:                                              ; preds = %292, %284
  %298 = phi i64 [ %293, %292 ], [ 0, %284 ]
  %299 = phi i8* [ %295, %292 ], [ null, %284 ]
  %300 = phi i32* [ %296, %292 ], [ null, %284 ]
  %301 = getelementptr inbounds i32, i32* %300, i64 %274
  %302 = getelementptr inbounds i32, i32* %300, i64 %298
  %303 = ptrtoint i32* %302 to i64
  store i32 %259, i32* %301, align 4
  %304 = getelementptr inbounds i32, i32* %301, i64 1
  %305 = ptrtoint i32* %304 to i64
  %306 = ptrtoint i32* %300 to i64
  %307 = icmp sgt i64 %273, 0
  br i1 %307, label %308, label %310

308:                                              ; preds = %297
  %309 = inttoptr i64 %272 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %299, i8* align 4 %309, i64 %273, i1 false) #12
  br label %310

310:                                              ; preds = %308, %297
  store i64 %306, i64* %271, align 8
  store i64 %305, i64* %270, align 8
  store i64 %303, i64* %280, align 8
  %311 = icmp eq i64 %272, 0
  br i1 %311, label %314, label %312

312:                                              ; preds = %310
  %313 = inttoptr i64 %272 to i8*
  call void @_ZdlPv(i8* %313) #13
  br label %314

314:                                              ; preds = %312, %310, %264, %193
  %315 = load i32*, i32** %117, align 8
  %316 = load i32*, i32** %118, align 8
  %317 = icmp ult i32* %315, %316
  %318 = ptrtoint i32* %316 to i64
  br i1 %317, label %319, label %323

319:                                              ; preds = %314
  store i32 0, i32* %315, align 4
  %320 = getelementptr inbounds i32, i32* %315, i64 1
  %321 = ptrtoint i32* %320 to i64
  %322 = bitcast i32** %117 to i64*
  store i64 %321, i64* %322, align 8
  br label %369

323:                                              ; preds = %314
  %324 = ptrtoint i32* %315 to i64
  %325 = bitcast i32** %117 to i64*
  %326 = bitcast %"class.std::__1::vector.179"* %13 to i64*
  %327 = load i64, i64* %326, align 8
  %328 = sub i64 %324, %327
  %329 = ashr exact i64 %328, 2
  %330 = add nsw i64 %329, 1
  %331 = icmp ugt i64 %330, 4611686018427387903
  br i1 %331, label %332, label %334

332:                                              ; preds = %323
  %333 = bitcast %"class.std::__1::vector.179"* %13 to %"class.std::__1::__vector_base_common"*
  call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* nonnull %333) #14
  unreachable

334:                                              ; preds = %323
  %335 = bitcast i32** %118 to i64*
  %336 = sub i64 %318, %327
  %337 = ashr exact i64 %336, 2
  %338 = icmp ult i64 %337, 2305843009213693951
  br i1 %338, label %339, label %347

339:                                              ; preds = %334
  %340 = ashr exact i64 %336, 1
  %341 = icmp ult i64 %340, %330
  %342 = select i1 %341, i64 %330, i64 %340
  %343 = icmp eq i64 %342, 0
  br i1 %343, label %352, label %344

344:                                              ; preds = %339
  %345 = icmp ugt i64 %342, 4611686018427387903
  br i1 %345, label %346, label %347

346:                                              ; preds = %344
  call void @abort() #14
  unreachable

347:                                              ; preds = %344, %334
  %348 = phi i64 [ %342, %344 ], [ 4611686018427387903, %334 ]
  %349 = shl i64 %348, 2
  %350 = call i8* @_Znwm(i64 %349) #13
  %351 = bitcast i8* %350 to i32*
  br label %352

352:                                              ; preds = %347, %339
  %353 = phi i64 [ %348, %347 ], [ 0, %339 ]
  %354 = phi i8* [ %350, %347 ], [ null, %339 ]
  %355 = phi i32* [ %351, %347 ], [ null, %339 ]
  %356 = getelementptr inbounds i32, i32* %355, i64 %329
  %357 = getelementptr inbounds i32, i32* %355, i64 %353
  %358 = ptrtoint i32* %357 to i64
  store i32 0, i32* %356, align 4
  %359 = getelementptr inbounds i32, i32* %356, i64 1
  %360 = ptrtoint i32* %359 to i64
  %361 = ptrtoint i32* %355 to i64
  %362 = icmp sgt i64 %328, 0
  br i1 %362, label %363, label %365

363:                                              ; preds = %352
  %364 = inttoptr i64 %327 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %354, i8* align 4 %364, i64 %328, i1 false) #12
  br label %365

365:                                              ; preds = %363, %352
  store i64 %361, i64* %326, align 8
  store i64 %360, i64* %325, align 8
  store i64 %358, i64* %335, align 8
  %366 = icmp eq i64 %327, 0
  br i1 %366, label %369, label %367

367:                                              ; preds = %365
  %368 = inttoptr i64 %327 to i8*
  call void @_ZdlPv(i8* %368) #13
  br label %369

369:                                              ; preds = %319, %365, %367
  %370 = getelementptr inbounds %"class.rx::PixmapSurfaceGLX", %"class.rx::PixmapSurfaceGLX"* %1, i64 0, i32 3
  %371 = load %"class.rx::FunctionsGLX"*, %"class.rx::FunctionsGLX"** %370, align 8
  %372 = getelementptr inbounds %"class.rx::PixmapSurfaceGLX", %"class.rx::PixmapSurfaceGLX"* %1, i64 0, i32 4
  %373 = load i8*, i8** %372, align 8
  %374 = load i64, i64* %25, align 8
  %375 = load i32*, i32** %116, align 8
  %376 = call i64 @_ZNK2rx12FunctionsGLX12createPixmapEPvmPKi(%"class.rx::FunctionsGLX"* %371, i8* %373, i64 %374, i32* %375) #12
  %377 = getelementptr inbounds %"class.rx::PixmapSurfaceGLX", %"class.rx::PixmapSurfaceGLX"* %1, i64 0, i32 6
  store i64 %376, i64* %377, align 8
  %378 = icmp eq i64 %376, 0
  br i1 %378, label %379, label %443

379:                                              ; preds = %369
  %380 = bitcast %"class.angle::ErrorStreamBase.202"* %14 to i8*
  call void @llvm.lifetime.start.p0i8(i64 272, i8* nonnull %380) #12
  %381 = getelementptr inbounds %"class.angle::ErrorStreamBase.202", %"class.angle::ErrorStreamBase.202"* %14, i64 0, i32 0
  store i32 12291, i32* %381, align 8
  %382 = getelementptr inbounds %"class.angle::ErrorStreamBase.202", %"class.angle::ErrorStreamBase.202"* %14, i64 0, i32 1
  %383 = getelementptr inbounds %"class.angle::ErrorStreamBase.202", %"class.angle::ErrorStreamBase.202"* %14, i64 0, i32 1, i32 2, i32 0, i32 0
  %384 = getelementptr inbounds %"class.std::__1::basic_ostringstream", %"class.std::__1::basic_ostringstream"* %382, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [5 x i8*], [5 x i8*] }, { [5 x i8*], [5 x i8*] }* @_ZTVNSt3__119basic_ostringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEEE, i64 0, inrange i32 1, i64 3) to i32 (...)**), i32 (...)*** %383, align 8
  %385 = getelementptr inbounds %"class.angle::ErrorStreamBase.202", %"class.angle::ErrorStreamBase.202"* %14, i64 0, i32 1, i32 1
  %386 = getelementptr inbounds %"class.std::__1::basic_stringbuf", %"class.std::__1::basic_stringbuf"* %385, i64 0, i32 0
  %387 = load i64, i64* bitcast (i8** getelementptr inbounds ([4 x i8*], [4 x i8*]* @_ZTTNSt3__119basic_ostringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEEE, i64 0, i64 1) to i64*), align 8
  %388 = bitcast %"class.std::__1::basic_ostringstream"* %382 to i64*
  store i64 %387, i64* %388, align 8
  %389 = load i64, i64* bitcast (i8** getelementptr inbounds ([4 x i8*], [4 x i8*]* @_ZTTNSt3__119basic_ostringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEEE, i64 0, i64 2) to i64*), align 8
  %390 = bitcast %"class.std::__1::basic_ostringstream"* %382 to i8**
  %391 = inttoptr i64 %387 to i8*
  %392 = getelementptr i8, i8* %391, i64 -24
  %393 = bitcast i8* %392 to i64*
  %394 = load i64, i64* %393, align 8
  %395 = bitcast %"class.std::__1::basic_ostringstream"* %382 to i8*
  %396 = getelementptr inbounds i8, i8* %395, i64 %394
  %397 = bitcast i8* %396 to i64*
  store i64 %389, i64* %397, align 8
  %398 = load i8*, i8** %390, align 8
  %399 = getelementptr i8, i8* %398, i64 -24
  %400 = bitcast i8* %399 to i64*
  %401 = load i64, i64* %400, align 8
  %402 = getelementptr inbounds i8, i8* %395, i64 %401
  %403 = bitcast i8* %402 to %"class.std::__1::ios_base"*
  %404 = bitcast %"class.std::__1::basic_stringbuf"* %385 to i8*
  call void @_ZNSt3__18ios_base4initEPv(%"class.std::__1::ios_base"* %403, i8* %404) #12
  %405 = getelementptr inbounds i8, i8* %402, i64 136
  %406 = bitcast i8* %405 to %"class.std::__1::basic_ostream"**
  store %"class.std::__1::basic_ostream"* null, %"class.std::__1::basic_ostream"** %406, align 8
  %407 = getelementptr inbounds i8, i8* %402, i64 144
  %408 = bitcast i8* %407 to i32*
  store i32 -1, i32* %408, align 8
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [5 x i8*], [5 x i8*] }, { [5 x i8*], [5 x i8*] }* @_ZTVNSt3__119basic_ostringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEEE, i64 0, inrange i32 0, i64 3) to i32 (...)**), i32 (...)*** %384, align 8
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [5 x i8*], [5 x i8*] }, { [5 x i8*], [5 x i8*] }* @_ZTVNSt3__119basic_ostringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEEE, i64 0, inrange i32 1, i64 3) to i32 (...)**), i32 (...)*** %383, align 8
  call void @_ZNSt3__115basic_streambufIcNS_11char_traitsIcEEEC2Ev(%"class.std::__1::basic_streambuf"* %386) #12
  %409 = getelementptr inbounds %"class.std::__1::basic_stringbuf", %"class.std::__1::basic_stringbuf"* %385, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [16 x i8*] }, { [16 x i8*] }* @_ZTVNSt3__115basic_stringbufIcNS_11char_traitsIcEENS_9allocatorIcEEEE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %409, align 8
  %410 = getelementptr inbounds %"class.angle::ErrorStreamBase.202", %"class.angle::ErrorStreamBase.202"* %14, i64 0, i32 1, i32 1, i32 1
  %411 = getelementptr inbounds %"class.angle::ErrorStreamBase.202", %"class.angle::ErrorStreamBase.202"* %14, i64 0, i32 1, i32 1, i32 3
  %412 = bitcast %"class.std::__1::basic_string"* %410 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %412, i8 0, i64 32, i1 false) #12
  store i32 16, i32* %411, align 8
  %413 = bitcast %"class.std::__1::basic_ostringstream"* %382 to %"class.std::__1::basic_ostream"*
  %414 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZNSt3__124__put_character_sequenceIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_PKS4_m(%"class.std::__1::basic_ostream"* dereferenceable(160) %413, i8* getelementptr inbounds ([38 x i8], [38 x i8]* @.str.1, i64 0, i64 0), i64 37) #12
  %415 = load i32, i32* %381, align 8, !noalias !5
  %416 = bitcast %"class.std::__1::basic_string"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %416) #12, !noalias !5
  call void @_ZNKSt3__115basic_stringbufIcNS_11char_traitsIcEENS_9allocatorIcEEE3strEv(%"class.std::__1::basic_string"* nonnull sret %4, %"class.std::__1::basic_stringbuf"* %385) #12, !noalias !5
  call void @_ZN3egl5ErrorC1EiiONSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEE(%"class.egl::Error"* %0, i32 12291, i32 %415, %"class.std::__1::basic_string"* nonnull dereferenceable(24) %4) #12
  %417 = bitcast %"class.std::__1::basic_string"* %4 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %418 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %417, i64 0, i32 1, i32 0
  %419 = load i8, i8* %418, align 1, !noalias !5
  %420 = icmp slt i8 %419, 0
  br i1 %420, label %421, label %424

421:                                              ; preds = %379
  %422 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %4, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %423 = load i8*, i8** %422, align 8, !noalias !5
  call void @_ZdlPv(i8* %423) #13
  br label %424

424:                                              ; preds = %379, %421
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %416) #12, !noalias !5
  %425 = load i64, i64* bitcast ([4 x i8*]* @_ZTTNSt3__119basic_ostringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEEE to i64*), align 8
  store i64 %425, i64* %388, align 8
  %426 = load i64, i64* bitcast (i8** getelementptr inbounds ([4 x i8*], [4 x i8*]* @_ZTTNSt3__119basic_ostringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEEE, i64 0, i64 3) to i64*), align 8
  %427 = inttoptr i64 %425 to i8*
  %428 = getelementptr i8, i8* %427, i64 -24
  %429 = bitcast i8* %428 to i64*
  %430 = load i64, i64* %429, align 8
  %431 = getelementptr inbounds i8, i8* %395, i64 %430
  %432 = bitcast i8* %431 to i64*
  store i64 %426, i64* %432, align 8
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [16 x i8*] }, { [16 x i8*] }* @_ZTVNSt3__115basic_stringbufIcNS_11char_traitsIcEENS_9allocatorIcEEEE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %409, align 8
  %433 = bitcast %"class.std::__1::basic_string"* %410 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %434 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %433, i64 0, i32 1, i32 0
  %435 = load i8, i8* %434, align 1
  %436 = icmp slt i8 %435, 0
  br i1 %436, label %437, label %440

437:                                              ; preds = %424
  %438 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %410, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %439 = load i8*, i8** %438, align 8
  call void @_ZdlPv(i8* %439) #13
  br label %440

440:                                              ; preds = %424, %437
  call void @_ZNSt3__115basic_streambufIcNS_11char_traitsIcEEED2Ev(%"class.std::__1::basic_streambuf"* %386) #12
  call void @_ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEED2Ev(%"class.std::__1::basic_ostream"* %413, i8** getelementptr inbounds ([4 x i8*], [4 x i8*]* @_ZTTNSt3__119basic_ostringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEEE, i64 0, i64 1)) #12
  %441 = getelementptr inbounds %"class.angle::ErrorStreamBase.202", %"class.angle::ErrorStreamBase.202"* %14, i64 0, i32 1, i32 2
  %442 = bitcast %"class.std::__1::basic_ios.base"* %441 to %"class.std::__1::basic_ios"*
  call void @_ZNSt3__19basic_iosIcNS_11char_traitsIcEEED2Ev(%"class.std::__1::basic_ios"* %442) #12
  call void @llvm.lifetime.end.p0i8(i64 272, i8* nonnull %380) #12
  br label %450

443:                                              ; preds = %369
  %444 = load %struct._XDisplay*, %struct._XDisplay** %23, align 8
  %445 = call i32 @XFlush(%struct._XDisplay* %444) #12
  call void @_ZNK2rx10DisplayGLX13syncXCommandsEb(%"class.rx::DisplayGLX"* %17, i1 zeroext false) #12
  %446 = getelementptr inbounds %"class.egl::Error", %"class.egl::Error"* %0, i64 0, i32 0
  store i32 12288, i32* %446, align 8, !alias.scope !8
  %447 = getelementptr inbounds %"class.egl::Error", %"class.egl::Error"* %0, i64 0, i32 1
  store i32 0, i32* %447, align 4, !alias.scope !8
  %448 = getelementptr inbounds %"class.egl::Error", %"class.egl::Error"* %0, i64 0, i32 2
  %449 = bitcast %"class.std::__1::unique_ptr.122"* %448 to i64*
  store i64 0, i64* %449, align 8, !alias.scope !8
  br label %450

450:                                              ; preds = %443, %440
  %451 = load i32*, i32** %116, align 8
  %452 = icmp eq i32* %451, null
  br i1 %452, label %457, label %453

453:                                              ; preds = %450
  %454 = ptrtoint i32* %451 to i64
  %455 = bitcast i32** %117 to i64*
  store i64 %454, i64* %455, align 8
  %456 = bitcast i32* %451 to i8*
  call void @_ZdlPv(i8* %456) #13
  br label %457

457:                                              ; preds = %450, %453
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %115) #12
  br label %458

458:                                              ; preds = %111, %457
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #4

declare i32 @XGetGeometry(%struct._XDisplay*, i64, i64*, i32*, i32*, i32*, i32*, i32*, i32*) local_unnamed_addr #2

declare void @_ZN2rx3x1114XErrorToStringEP9_XDisplayi(%"class.std::__1::basic_string"* sret, %struct._XDisplay*, i32) local_unnamed_addr #2

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #4

declare zeroext i1 @_ZNK3egl12AttributeMap8containsEl(%"class.egl::AttributeMap"*, i64) local_unnamed_addr #2

declare i32 @_ZNK3egl12AttributeMap8getAsIntEl(%"class.egl::AttributeMap"*, i64) local_unnamed_addr #2

declare i64 @_ZNK2rx12FunctionsGLX12createPixmapEPvmPKi(%"class.rx::FunctionsGLX"*, i8*, i64, i32*) local_unnamed_addr #2

declare i32 @XFlush(%struct._XDisplay*) local_unnamed_addr #2

declare void @_ZNK2rx10DisplayGLX13syncXCommandsEb(%"class.rx::DisplayGLX"*, i1 zeroext) local_unnamed_addr #2

; Function Attrs: nofree norecurse nounwind ssp uwtable writeonly
define hidden void @_ZN2rx16PixmapSurfaceGLX11makeCurrentEPKN2gl7ContextE(%"class.egl::Error"* noalias nocapture sret, %"class.rx::PixmapSurfaceGLX"* nocapture readnone, %"class.gl::Context"* nocapture readnone) unnamed_addr #5 align 2 {
  %4 = getelementptr inbounds %"class.egl::Error", %"class.egl::Error"* %0, i64 0, i32 0
  store i32 12288, i32* %4, align 8, !alias.scope !13
  %5 = getelementptr inbounds %"class.egl::Error", %"class.egl::Error"* %0, i64 0, i32 1
  store i32 0, i32* %5, align 4, !alias.scope !13
  %6 = getelementptr inbounds %"class.egl::Error", %"class.egl::Error"* %0, i64 0, i32 2
  %7 = bitcast %"class.std::__1::unique_ptr.122"* %6 to i64*
  store i64 0, i64* %7, align 8, !alias.scope !13
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable writeonly
define hidden void @_ZN2rx16PixmapSurfaceGLX4swapEPKN2gl7ContextE(%"class.egl::Error"* noalias nocapture sret, %"class.rx::PixmapSurfaceGLX"* nocapture readnone, %"class.gl::Context"* nocapture readnone) unnamed_addr #5 align 2 {
  %4 = getelementptr inbounds %"class.egl::Error", %"class.egl::Error"* %0, i64 0, i32 0
  store i32 12288, i32* %4, align 8, !alias.scope !18
  %5 = getelementptr inbounds %"class.egl::Error", %"class.egl::Error"* %0, i64 0, i32 1
  store i32 0, i32* %5, align 4, !alias.scope !18
  %6 = getelementptr inbounds %"class.egl::Error", %"class.egl::Error"* %0, i64 0, i32 2
  %7 = bitcast %"class.std::__1::unique_ptr.122"* %6 to i64*
  store i64 0, i64* %7, align 8, !alias.scope !18
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable writeonly
define hidden void @_ZN2rx16PixmapSurfaceGLX13postSubBufferEPKN2gl7ContextEiiii(%"class.egl::Error"* noalias nocapture sret, %"class.rx::PixmapSurfaceGLX"* nocapture readnone, %"class.gl::Context"* nocapture readnone, i32, i32, i32, i32) unnamed_addr #5 align 2 {
  %8 = getelementptr inbounds %"class.egl::Error", %"class.egl::Error"* %0, i64 0, i32 0
  store i32 12288, i32* %8, align 8, !alias.scope !23
  %9 = getelementptr inbounds %"class.egl::Error", %"class.egl::Error"* %0, i64 0, i32 1
  store i32 0, i32* %9, align 4, !alias.scope !23
  %10 = getelementptr inbounds %"class.egl::Error", %"class.egl::Error"* %0, i64 0, i32 2
  %11 = bitcast %"class.std::__1::unique_ptr.122"* %10 to i64*
  store i64 0, i64* %11, align 8, !alias.scope !23
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable writeonly
define hidden void @_ZN2rx16PixmapSurfaceGLX24querySurfacePointerANGLEEiPPv(%"class.egl::Error"* noalias nocapture sret, %"class.rx::PixmapSurfaceGLX"* nocapture readnone, i32, i8** nocapture readnone) unnamed_addr #5 align 2 {
  %5 = getelementptr inbounds %"class.egl::Error", %"class.egl::Error"* %0, i64 0, i32 0
  store i32 12288, i32* %5, align 8, !alias.scope !28
  %6 = getelementptr inbounds %"class.egl::Error", %"class.egl::Error"* %0, i64 0, i32 1
  store i32 0, i32* %6, align 4, !alias.scope !28
  %7 = getelementptr inbounds %"class.egl::Error", %"class.egl::Error"* %0, i64 0, i32 2
  %8 = bitcast %"class.std::__1::unique_ptr.122"* %7 to i64*
  store i64 0, i64* %8, align 8, !alias.scope !28
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2rx16PixmapSurfaceGLX12bindTexImageEPKN2gl7ContextEPNS1_7TextureEi(%"class.egl::Error"* noalias nocapture sret, %"class.rx::PixmapSurfaceGLX"* nocapture readonly, %"class.gl::Context"* nocapture readnone, %"class.gl::Texture"* nocapture readnone, i32) unnamed_addr #1 align 2 {
  %6 = getelementptr inbounds %"class.rx::PixmapSurfaceGLX", %"class.rx::PixmapSurfaceGLX"* %1, i64 0, i32 3
  %7 = load %"class.rx::FunctionsGLX"*, %"class.rx::FunctionsGLX"** %6, align 8
  %8 = getelementptr inbounds %"class.rx::PixmapSurfaceGLX", %"class.rx::PixmapSurfaceGLX"* %1, i64 0, i32 6
  %9 = load i64, i64* %8, align 8
  %10 = icmp eq i32 %4, 12420
  %11 = select i1 %10, i32 8416, i32 0
  tail call void @_ZNK2rx12FunctionsGLX15bindTexImageEXTEmiPKi(%"class.rx::FunctionsGLX"* %7, i64 %9, i32 %11, i32* getelementptr inbounds ([1 x i32], [1 x i32]* @_ZZN2rx16PixmapSurfaceGLX12bindTexImageEPKN2gl7ContextEPNS1_7TextureEiE7attribs, i64 0, i64 0)) #12
  %12 = getelementptr inbounds %"class.egl::Error", %"class.egl::Error"* %0, i64 0, i32 0
  store i32 12288, i32* %12, align 8, !alias.scope !33
  %13 = getelementptr inbounds %"class.egl::Error", %"class.egl::Error"* %0, i64 0, i32 1
  store i32 0, i32* %13, align 4, !alias.scope !33
  %14 = getelementptr inbounds %"class.egl::Error", %"class.egl::Error"* %0, i64 0, i32 2
  %15 = bitcast %"class.std::__1::unique_ptr.122"* %14 to i64*
  store i64 0, i64* %15, align 8, !alias.scope !33
  ret void
}

declare void @_ZNK2rx12FunctionsGLX15bindTexImageEXTEmiPKi(%"class.rx::FunctionsGLX"*, i64, i32, i32*) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2rx16PixmapSurfaceGLX15releaseTexImageEPKN2gl7ContextEi(%"class.egl::Error"* noalias nocapture sret, %"class.rx::PixmapSurfaceGLX"* nocapture readonly, %"class.gl::Context"* nocapture readnone, i32) unnamed_addr #1 align 2 {
  %5 = getelementptr inbounds %"class.rx::PixmapSurfaceGLX", %"class.rx::PixmapSurfaceGLX"* %1, i64 0, i32 3
  %6 = load %"class.rx::FunctionsGLX"*, %"class.rx::FunctionsGLX"** %5, align 8
  %7 = getelementptr inbounds %"class.rx::PixmapSurfaceGLX", %"class.rx::PixmapSurfaceGLX"* %1, i64 0, i32 6
  %8 = load i64, i64* %7, align 8
  %9 = icmp eq i32 %3, 12420
  %10 = select i1 %9, i32 8416, i32 0
  tail call void @_ZNK2rx12FunctionsGLX18releaseTexImageEXTEmi(%"class.rx::FunctionsGLX"* %6, i64 %8, i32 %10) #12
  %11 = getelementptr inbounds %"class.egl::Error", %"class.egl::Error"* %0, i64 0, i32 0
  store i32 12288, i32* %11, align 8, !alias.scope !38
  %12 = getelementptr inbounds %"class.egl::Error", %"class.egl::Error"* %0, i64 0, i32 1
  store i32 0, i32* %12, align 4, !alias.scope !38
  %13 = getelementptr inbounds %"class.egl::Error", %"class.egl::Error"* %0, i64 0, i32 2
  %14 = bitcast %"class.std::__1::unique_ptr.122"* %13 to i64*
  store i64 0, i64* %14, align 8, !alias.scope !38
  ret void
}

declare void @_ZNK2rx12FunctionsGLX18releaseTexImageEXTEmi(%"class.rx::FunctionsGLX"*, i64, i32) local_unnamed_addr #2

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden void @_ZN2rx16PixmapSurfaceGLX15setSwapIntervalEi(%"class.rx::PixmapSurfaceGLX"* nocapture, i32) unnamed_addr #6 align 2 {
  ret void
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden i32 @_ZNK2rx16PixmapSurfaceGLX8getWidthEv(%"class.rx::PixmapSurfaceGLX"* nocapture readonly) unnamed_addr #7 align 2 {
  %2 = getelementptr inbounds %"class.rx::PixmapSurfaceGLX", %"class.rx::PixmapSurfaceGLX"* %0, i64 0, i32 1
  %3 = load i32, i32* %2, align 8
  ret i32 %3
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden i32 @_ZNK2rx16PixmapSurfaceGLX9getHeightEv(%"class.rx::PixmapSurfaceGLX"* nocapture readonly) unnamed_addr #7 align 2 {
  %2 = getelementptr inbounds %"class.rx::PixmapSurfaceGLX", %"class.rx::PixmapSurfaceGLX"* %0, i64 0, i32 2
  %3 = load i32, i32* %2, align 4
  ret i32 %3
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden i32 @_ZNK2rx16PixmapSurfaceGLX24isPostSubBufferSupportedEv(%"class.rx::PixmapSurfaceGLX"* nocapture readnone) unnamed_addr #6 align 2 {
  ret i32 0
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden i32 @_ZNK2rx16PixmapSurfaceGLX15getSwapBehaviorEv(%"class.rx::PixmapSurfaceGLX"* nocapture readnone) unnamed_addr #6 align 2 {
  ret i32 12437
}

; Function Attrs: nofree norecurse nounwind ssp uwtable writeonly
define hidden void @_ZN2rx16PixmapSurfaceGLX14checkForResizeEv(%"class.egl::Error"* noalias nocapture sret, %"class.rx::PixmapSurfaceGLX"* nocapture readnone) unnamed_addr #5 align 2 {
  %3 = getelementptr inbounds %"class.egl::Error", %"class.egl::Error"* %0, i64 0, i32 0
  store i32 12288, i32* %3, align 8, !alias.scope !43
  %4 = getelementptr inbounds %"class.egl::Error", %"class.egl::Error"* %0, i64 0, i32 1
  store i32 0, i32* %4, align 4, !alias.scope !43
  %5 = getelementptr inbounds %"class.egl::Error", %"class.egl::Error"* %0, i64 0, i32 2
  %6 = bitcast %"class.std::__1::unique_ptr.122"* %5 to i64*
  store i64 0, i64* %6, align 8, !alias.scope !43
  ret void
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden i64 @_ZNK2rx16PixmapSurfaceGLX11getDrawableEv(%"class.rx::PixmapSurfaceGLX"* nocapture readonly) unnamed_addr #7 align 2 {
  %2 = getelementptr inbounds %"class.rx::PixmapSurfaceGLX", %"class.rx::PixmapSurfaceGLX"* %0, i64 0, i32 6
  %3 = load i64, i64* %2, align 8
  ret i64 %3
}

declare i32 @_ZN2rx9SurfaceGL18initializeContentsEPKN2gl7ContextERKNS1_10ImageIndexE(%"class.rx::SurfaceGL"*, %"class.gl::Context"*, %"class.gl::ImageIndex"* dereferenceable(16)) unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN2rx11SurfaceImpl7destroyEPKN3egl7DisplayE(%"class.rx::SurfaceImpl"*, %"class.egl::Display"*) unnamed_addr #1 comdat align 2 {
  ret void
}

declare %"class.rx::FramebufferImpl"* @_ZN2rx9SurfaceGL24createDefaultFramebufferEPKN2gl7ContextERKNS1_16FramebufferStateE(%"class.rx::SurfaceGL"*, %"class.gl::Context"*, %"class.gl::FramebufferState"*) unnamed_addr #2

declare void @_ZN2rx11SurfaceImpl13unMakeCurrentEPKN2gl7ContextE(%"class.egl::Error"* sret, %"class.rx::SurfaceImpl"*, %"class.gl::Context"*) unnamed_addr #2

declare void @_ZN2rx11SurfaceImpl14swapWithDamageEPKN2gl7ContextEPKii(%"class.egl::Error"* sret, %"class.rx::SurfaceImpl"*, %"class.gl::Context"*, i32*, i32) unnamed_addr #2

declare void @_ZN2rx11SurfaceImpl18swapWithFrameTokenEPKN2gl7ContextEm(%"class.egl::Error"* sret, %"class.rx::SurfaceImpl"*, %"class.gl::Context"*, i64) unnamed_addr #2

declare void @_ZN2rx11SurfaceImpl19setPresentationTimeEl(%"class.egl::Error"* sret, %"class.rx::SurfaceImpl"*, i64) unnamed_addr #2

declare void @_ZN2rx9SurfaceGL13getSyncValuesEPmS1_S1_(%"class.egl::Error"* sret, %"class.rx::SurfaceGL"*, i64*, i64*, i64*) unnamed_addr #2

declare void @_ZN2rx9SurfaceGL10getMscRateEPiS1_(%"class.egl::Error"* sret, %"class.rx::SurfaceGL"*, i32*, i32*) unnamed_addr #2

declare void @_ZN2rx11SurfaceImpl13setFixedWidthEi(%"class.rx::SurfaceImpl"*, i32) unnamed_addr #2

declare void @_ZN2rx11SurfaceImpl14setFixedHeightEi(%"class.rx::SurfaceImpl"*, i32) unnamed_addr #2

declare void @_ZNK2rx11SurfaceImpl12getUserWidthEPKN3egl7DisplayEPi(%"class.egl::Error"* sret, %"class.rx::SurfaceImpl"*, %"class.egl::Display"*, i32*) unnamed_addr #2

declare void @_ZNK2rx11SurfaceImpl13getUserHeightEPKN3egl7DisplayEPi(%"class.egl::Error"* sret, %"class.rx::SurfaceImpl"*, %"class.egl::Display"*, i32*) unnamed_addr #2

declare %"struct.angle::Format"* @_ZNK2rx11SurfaceImpl24getD3DTextureColorFormatEv(%"class.rx::SurfaceImpl"*) unnamed_addr #2

declare void @_ZN2rx11SurfaceImpl20setTimestampsEnabledEb(%"class.rx::SurfaceImpl"*, i1 zeroext) unnamed_addr #2

declare void @_ZNK2rx11SurfaceImpl29getSupportedCompositorTimingsEv(%"class.angle::BitSetT"* sret, %"class.rx::SurfaceImpl"*) unnamed_addr #2

declare void @_ZNK2rx11SurfaceImpl19getCompositorTimingEiPKiPl(%"class.egl::Error"* sret, %"class.rx::SurfaceImpl"*, i32, i32*, i64*) unnamed_addr #2

declare void @_ZNK2rx11SurfaceImpl14getNextFrameIdEPm(%"class.egl::Error"* sret, %"class.rx::SurfaceImpl"*, i64*) unnamed_addr #2

declare void @_ZNK2rx11SurfaceImpl22getSupportedTimestampsEv(%"class.angle::BitSetT.4"* sret, %"class.rx::SurfaceImpl"*) unnamed_addr #2

declare void @_ZNK2rx11SurfaceImpl18getFrameTimestampsEmiPKiPl(%"class.egl::Error"* sret, %"class.rx::SurfaceImpl"*, i64, i32, i32*, i64*) unnamed_addr #2

declare void @_ZN2rx11SurfaceImpl12getBufferAgeEPKN2gl7ContextEPi(%"class.egl::Error"* sret, %"class.rx::SurfaceImpl"*, %"class.gl::Context"*, i32*) unnamed_addr #2

declare zeroext i1 @_ZNK2rx9SurfaceGL23hasEmulatedAlphaChannelEv(%"class.rx::SurfaceGL"*) unnamed_addr #2

declare void @_ZN2rx9SurfaceGLC2ERKN3egl12SurfaceStateE(%"class.rx::SurfaceGL"*, %"struct.egl::SurfaceState"* dereferenceable(56)) unnamed_addr #2

; Function Attrs: nounwind
declare void @_ZN2rx9SurfaceGLD2Ev(%"class.rx::SurfaceGL"*) unnamed_addr #8

; Function Attrs: nounwind
declare void @_ZNSt3__19basic_iosIcNS_11char_traitsIcEEED2Ev(%"class.std::__1::basic_ios"*) unnamed_addr #8

; Function Attrs: nounwind
declare void @_ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEED2Ev(%"class.std::__1::basic_ostream"*, i8**) unnamed_addr #8

; Function Attrs: nounwind
declare void @_ZNSt3__115basic_streambufIcNS_11char_traitsIcEEED2Ev(%"class.std::__1::basic_streambuf"*) unnamed_addr #8

declare void @_ZNSt3__18ios_base4initEPv(%"class.std::__1::ios_base"*, i8*) local_unnamed_addr #2

declare void @_ZNSt3__115basic_streambufIcNS_11char_traitsIcEEEC2Ev(%"class.std::__1::basic_streambuf"*) unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZNSt3__124__put_character_sequenceIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_PKS4_m(%"class.std::__1::basic_ostream"* dereferenceable(160), i8*, i64) local_unnamed_addr #1 comdat {
  %4 = alloca %"class.std::__1::locale", align 8
  %5 = alloca %"class.std::__1::basic_ostream<char, std::__1::char_traits<char> >::sentry", align 8
  %6 = getelementptr inbounds %"class.std::__1::basic_ostream<char, std::__1::char_traits<char> >::sentry", %"class.std::__1::basic_ostream<char, std::__1::char_traits<char> >::sentry"* %5, i64 0, i32 0
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %6) #12
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %6, i8 -86, i64 16, i1 false)
  call void @_ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE6sentryC1ERS3_(%"class.std::__1::basic_ostream<char, std::__1::char_traits<char> >::sentry"* nonnull %5, %"class.std::__1::basic_ostream"* dereferenceable(160) %0) #12
  %7 = load i8, i8* %6, align 8, !range !48
  %8 = icmp eq i8 %7, 0
  br i1 %8, label %58, label %9

9:                                                ; preds = %3
  %10 = bitcast %"class.std::__1::basic_ostream"* %0 to i8**
  %11 = load i8*, i8** %10, align 8
  %12 = getelementptr i8, i8* %11, i64 -24
  %13 = bitcast i8* %12 to i64*
  %14 = load i64, i64* %13, align 8
  %15 = bitcast %"class.std::__1::basic_ostream"* %0 to i8*
  %16 = getelementptr inbounds i8, i8* %15, i64 %14
  %17 = getelementptr inbounds i8, i8* %16, i64 40
  %18 = bitcast i8* %17 to %"class.std::__1::basic_streambuf"**
  %19 = load %"class.std::__1::basic_streambuf"*, %"class.std::__1::basic_streambuf"** %18, align 8
  %20 = bitcast i8* %16 to %"class.std::__1::ios_base"*
  %21 = getelementptr inbounds i8, i8* %16, i64 8
  %22 = bitcast i8* %21 to i32*
  %23 = load i32, i32* %22, align 8
  %24 = and i32 %23, 176
  %25 = icmp eq i32 %24, 32
  %26 = getelementptr inbounds i8, i8* %1, i64 %2
  %27 = select i1 %25, i8* %26, i8* %1
  %28 = getelementptr inbounds i8, i8* %16, i64 144
  %29 = bitcast i8* %28 to i32*
  %30 = load i32, i32* %29, align 8
  %31 = icmp eq i32 %30, -1
  br i1 %31, label %32, label %42

32:                                               ; preds = %9
  %33 = bitcast %"class.std::__1::locale"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %33) #12
  call void @_ZNKSt3__18ios_base6getlocEv(%"class.std::__1::locale"* nonnull sret %4, %"class.std::__1::ios_base"* %20) #12
  %34 = call %"class.std::__1::locale::facet"* @_ZNKSt3__16locale9use_facetERNS0_2idE(%"class.std::__1::locale"* nonnull %4, %"class.std::__1::locale::id"* nonnull dereferenceable(16) @_ZNSt3__15ctypeIcE2idE) #12
  %35 = bitcast %"class.std::__1::locale::facet"* %34 to %"class.std::__1::ctype"*
  %36 = bitcast %"class.std::__1::locale::facet"* %34 to i8 (%"class.std::__1::ctype"*, i8)***
  %37 = load i8 (%"class.std::__1::ctype"*, i8)**, i8 (%"class.std::__1::ctype"*, i8)*** %36, align 8
  %38 = getelementptr inbounds i8 (%"class.std::__1::ctype"*, i8)*, i8 (%"class.std::__1::ctype"*, i8)** %37, i64 7
  %39 = load i8 (%"class.std::__1::ctype"*, i8)*, i8 (%"class.std::__1::ctype"*, i8)** %38, align 8
  %40 = call signext i8 %39(%"class.std::__1::ctype"* %35, i8 signext 32) #12
  call void @_ZNSt3__16localeD1Ev(%"class.std::__1::locale"* nonnull %4) #12
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %33) #12
  %41 = sext i8 %40 to i32
  store i32 %41, i32* %29, align 8
  br label %42

42:                                               ; preds = %9, %32
  %43 = phi i32 [ %41, %32 ], [ %30, %9 ]
  %44 = trunc i32 %43 to i8
  %45 = call %"class.std::__1::basic_streambuf"* @_ZNSt3__116__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_(%"class.std::__1::basic_streambuf"* %19, i8* %1, i8* %27, i8* %26, %"class.std::__1::ios_base"* dereferenceable(136) %20, i8 signext %44)
  %46 = icmp eq %"class.std::__1::basic_streambuf"* %45, null
  br i1 %46, label %47, label %58

47:                                               ; preds = %42
  %48 = load i8*, i8** %10, align 8
  %49 = getelementptr i8, i8* %48, i64 -24
  %50 = bitcast i8* %49 to i64*
  %51 = load i64, i64* %50, align 8
  %52 = getelementptr inbounds i8, i8* %15, i64 %51
  %53 = bitcast i8* %52 to %"class.std::__1::ios_base"*
  %54 = getelementptr inbounds i8, i8* %52, i64 32
  %55 = bitcast i8* %54 to i32*
  %56 = load i32, i32* %55, align 8
  %57 = or i32 %56, 5
  call void @_ZNSt3__18ios_base5clearEj(%"class.std::__1::ios_base"* %53, i32 %57) #12
  br label %58

58:                                               ; preds = %3, %42, %47
  call void @_ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE6sentryD1Ev(%"class.std::__1::basic_ostream<char, std::__1::char_traits<char> >::sentry"* nonnull %5) #12
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %6) #12
  ret %"class.std::__1::basic_ostream"* %0
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #4

declare void @_ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE6sentryC1ERS3_(%"class.std::__1::basic_ostream<char, std::__1::char_traits<char> >::sentry"*, %"class.std::__1::basic_ostream"* dereferenceable(160)) unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden %"class.std::__1::basic_streambuf"* @_ZNSt3__116__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_(%"class.std::__1::basic_streambuf"*, i8*, i8*, i8*, %"class.std::__1::ios_base"* dereferenceable(136), i8 signext) local_unnamed_addr #1 comdat {
  %7 = alloca %"class.std::__1::basic_string", align 8
  %8 = icmp eq %"class.std::__1::basic_streambuf"* %0, null
  br i1 %8, label %78, label %9

9:                                                ; preds = %6
  %10 = ptrtoint i8* %3 to i64
  %11 = ptrtoint i8* %1 to i64
  %12 = sub i64 %10, %11
  %13 = getelementptr inbounds %"class.std::__1::ios_base", %"class.std::__1::ios_base"* %4, i64 0, i32 3
  %14 = load i64, i64* %13, align 8
  %15 = icmp sgt i64 %14, %12
  %16 = sub nsw i64 %14, %12
  %17 = select i1 %15, i64 %16, i64 0
  %18 = ptrtoint i8* %2 to i64
  %19 = sub i64 %18, %11
  %20 = icmp sgt i64 %19, 0
  br i1 %20, label %21, label %28

21:                                               ; preds = %9
  %22 = bitcast %"class.std::__1::basic_streambuf"* %0 to i64 (%"class.std::__1::basic_streambuf"*, i8*, i64)***
  %23 = load i64 (%"class.std::__1::basic_streambuf"*, i8*, i64)**, i64 (%"class.std::__1::basic_streambuf"*, i8*, i64)*** %22, align 8
  %24 = getelementptr inbounds i64 (%"class.std::__1::basic_streambuf"*, i8*, i64)*, i64 (%"class.std::__1::basic_streambuf"*, i8*, i64)** %23, i64 12
  %25 = load i64 (%"class.std::__1::basic_streambuf"*, i8*, i64)*, i64 (%"class.std::__1::basic_streambuf"*, i8*, i64)** %24, align 8
  %26 = tail call i64 %25(%"class.std::__1::basic_streambuf"* nonnull %0, i8* %1, i64 %19) #12
  %27 = icmp eq i64 %26, %19
  br i1 %27, label %28, label %78

28:                                               ; preds = %21, %9
  %29 = icmp sgt i64 %17, 0
  br i1 %29, label %30, label %67

30:                                               ; preds = %28
  %31 = bitcast %"class.std::__1::basic_string"* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %31) #12
  %32 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %7, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %33 = icmp ult i64 %17, 23
  %34 = bitcast %"class.std::__1::basic_string"* %7 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %34, i8 -86, i64 24, i1 false)
  br i1 %33, label %43, label %35

35:                                               ; preds = %30
  %36 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %7, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 2
  %37 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %7, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %38 = add nuw i64 %17, 16
  %39 = and i64 %38, -16
  %40 = tail call i8* @_Znwm(i64 %39) #13
  store i8* %40, i8** %32, align 8
  %41 = or i64 %39, -9223372036854775808
  store i64 %41, i64* %36, align 8
  store i64 %17, i64* %37, align 8
  %42 = bitcast %"class.std::__1::basic_string"* %7 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  br label %47

43:                                               ; preds = %30
  %44 = trunc i64 %17 to i8
  %45 = bitcast %"class.std::__1::basic_string"* %7 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %46 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %45, i64 0, i32 1, i32 0
  store i8 %44, i8* %46, align 1
  br label %47

47:                                               ; preds = %35, %43
  %48 = phi %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* [ %42, %35 ], [ %45, %43 ]
  %49 = phi i8* [ %40, %35 ], [ %31, %43 ]
  call void @llvm.memset.p0i8.i64(i8* nonnull align 1 %49, i8 %5, i64 %17, i1 false) #12
  %50 = getelementptr inbounds i8, i8* %49, i64 %17
  store i8 0, i8* %50, align 1
  %51 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %48, i64 0, i32 1, i32 0
  %52 = load i8, i8* %51, align 1
  %53 = icmp slt i8 %52, 0
  %54 = load i8*, i8** %32, align 8
  %55 = select i1 %53, i8* %54, i8* %31
  %56 = bitcast %"class.std::__1::basic_streambuf"* %0 to i64 (%"class.std::__1::basic_streambuf"*, i8*, i64)***
  %57 = load i64 (%"class.std::__1::basic_streambuf"*, i8*, i64)**, i64 (%"class.std::__1::basic_streambuf"*, i8*, i64)*** %56, align 8
  %58 = getelementptr inbounds i64 (%"class.std::__1::basic_streambuf"*, i8*, i64)*, i64 (%"class.std::__1::basic_streambuf"*, i8*, i64)** %57, i64 12
  %59 = load i64 (%"class.std::__1::basic_streambuf"*, i8*, i64)*, i64 (%"class.std::__1::basic_streambuf"*, i8*, i64)** %58, align 8
  %60 = call i64 %59(%"class.std::__1::basic_streambuf"* nonnull %0, i8* %55, i64 %17) #12
  %61 = icmp eq i64 %60, %17
  %62 = load i8, i8* %51, align 1
  %63 = icmp slt i8 %62, 0
  br i1 %63, label %64, label %66

64:                                               ; preds = %47
  %65 = load i8*, i8** %32, align 8
  call void @_ZdlPv(i8* %65) #13
  br label %66

66:                                               ; preds = %47, %64
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %31) #12
  br i1 %61, label %67, label %78

67:                                               ; preds = %66, %28
  %68 = sub i64 %10, %18
  %69 = icmp sgt i64 %68, 0
  br i1 %69, label %70, label %77

70:                                               ; preds = %67
  %71 = bitcast %"class.std::__1::basic_streambuf"* %0 to i64 (%"class.std::__1::basic_streambuf"*, i8*, i64)***
  %72 = load i64 (%"class.std::__1::basic_streambuf"*, i8*, i64)**, i64 (%"class.std::__1::basic_streambuf"*, i8*, i64)*** %71, align 8
  %73 = getelementptr inbounds i64 (%"class.std::__1::basic_streambuf"*, i8*, i64)*, i64 (%"class.std::__1::basic_streambuf"*, i8*, i64)** %72, i64 12
  %74 = load i64 (%"class.std::__1::basic_streambuf"*, i8*, i64)*, i64 (%"class.std::__1::basic_streambuf"*, i8*, i64)** %73, align 8
  %75 = call i64 %74(%"class.std::__1::basic_streambuf"* nonnull %0, i8* %2, i64 %68) #12
  %76 = icmp eq i64 %75, %68
  br i1 %76, label %77, label %78

77:                                               ; preds = %70, %67
  store i64 0, i64* %13, align 8
  br label %78

78:                                               ; preds = %77, %66, %21, %70, %6
  %79 = phi %"class.std::__1::basic_streambuf"* [ null, %6 ], [ %0, %77 ], [ null, %66 ], [ null, %21 ], [ null, %70 ]
  ret %"class.std::__1::basic_streambuf"* %79
}

; Function Attrs: nounwind
declare void @_ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE6sentryD1Ev(%"class.std::__1::basic_ostream<char, std::__1::char_traits<char> >::sentry"*) unnamed_addr #8

; Function Attrs: noreturn nounwind
declare void @abort() local_unnamed_addr #9

; Function Attrs: nobuiltin nofree
declare noalias nonnull i8* @_Znwm(i64) local_unnamed_addr #10

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #4

declare void @_ZNKSt3__18ios_base6getlocEv(%"class.std::__1::locale"* sret, %"class.std::__1::ios_base"*) local_unnamed_addr #2

; Function Attrs: nounwind
declare void @_ZNSt3__16localeD1Ev(%"class.std::__1::locale"*) unnamed_addr #8

declare %"class.std::__1::locale::facet"* @_ZNKSt3__16locale9use_facetERNS0_2idE(%"class.std::__1::locale"*, %"class.std::__1::locale::id"* dereferenceable(16)) local_unnamed_addr #2

declare void @_ZNSt3__18ios_base5clearEj(%"class.std::__1::ios_base"*, i32) local_unnamed_addr #2

declare void @_ZN3egl5ErrorC1EiiONSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEE(%"class.egl::Error"*, i32, i32, %"class.std::__1::basic_string"* dereferenceable(24)) unnamed_addr #2

declare void @_ZNKSt3__115basic_stringbufIcNS_11char_traitsIcEENS_9allocatorIcEEE3strEv(%"class.std::__1::basic_string"* sret, %"class.std::__1::basic_stringbuf"*) local_unnamed_addr #2

; Function Attrs: noreturn
declare void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"*) local_unnamed_addr #11

attributes #0 = { inlinehint nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { argmemonly nounwind }
attributes #5 = { nofree norecurse nounwind ssp uwtable writeonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { norecurse nounwind readnone ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { norecurse nounwind readonly ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #8 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #9 = { noreturn nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #10 = { nobuiltin nofree "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #11 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #12 = { nounwind }
attributes #13 = { builtin nounwind }
attributes #14 = { noreturn nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{!3}
!3 = distinct !{!3, !4, !"_ZN5angle15ErrorStreamBaseIN3egl5ErrorEiLi12288EiLi12301EEcvS2_Ev: argument 0"}
!4 = distinct !{!4, !"_ZN5angle15ErrorStreamBaseIN3egl5ErrorEiLi12288EiLi12301EEcvS2_Ev"}
!5 = !{!6}
!6 = distinct !{!6, !7, !"_ZN5angle15ErrorStreamBaseIN3egl5ErrorEiLi12288EiLi12291EEcvS2_Ev: argument 0"}
!7 = distinct !{!7, !"_ZN5angle15ErrorStreamBaseIN3egl5ErrorEiLi12288EiLi12291EEcvS2_Ev"}
!8 = !{!9, !11}
!9 = distinct !{!9, !10, !"_ZN3egl5Error7NoErrorEv: argument 0"}
!10 = distinct !{!10, !"_ZN3egl5Error7NoErrorEv"}
!11 = distinct !{!11, !12, !"_ZN3egl7NoErrorEv: argument 0"}
!12 = distinct !{!12, !"_ZN3egl7NoErrorEv"}
!13 = !{!14, !16}
!14 = distinct !{!14, !15, !"_ZN3egl5Error7NoErrorEv: argument 0"}
!15 = distinct !{!15, !"_ZN3egl5Error7NoErrorEv"}
!16 = distinct !{!16, !17, !"_ZN3egl7NoErrorEv: argument 0"}
!17 = distinct !{!17, !"_ZN3egl7NoErrorEv"}
!18 = !{!19, !21}
!19 = distinct !{!19, !20, !"_ZN3egl5Error7NoErrorEv: argument 0"}
!20 = distinct !{!20, !"_ZN3egl5Error7NoErrorEv"}
!21 = distinct !{!21, !22, !"_ZN3egl7NoErrorEv: argument 0"}
!22 = distinct !{!22, !"_ZN3egl7NoErrorEv"}
!23 = !{!24, !26}
!24 = distinct !{!24, !25, !"_ZN3egl5Error7NoErrorEv: argument 0"}
!25 = distinct !{!25, !"_ZN3egl5Error7NoErrorEv"}
!26 = distinct !{!26, !27, !"_ZN3egl7NoErrorEv: argument 0"}
!27 = distinct !{!27, !"_ZN3egl7NoErrorEv"}
!28 = !{!29, !31}
!29 = distinct !{!29, !30, !"_ZN3egl5Error7NoErrorEv: argument 0"}
!30 = distinct !{!30, !"_ZN3egl5Error7NoErrorEv"}
!31 = distinct !{!31, !32, !"_ZN3egl7NoErrorEv: argument 0"}
!32 = distinct !{!32, !"_ZN3egl7NoErrorEv"}
!33 = !{!34, !36}
!34 = distinct !{!34, !35, !"_ZN3egl5Error7NoErrorEv: argument 0"}
!35 = distinct !{!35, !"_ZN3egl5Error7NoErrorEv"}
!36 = distinct !{!36, !37, !"_ZN3egl7NoErrorEv: argument 0"}
!37 = distinct !{!37, !"_ZN3egl7NoErrorEv"}
!38 = !{!39, !41}
!39 = distinct !{!39, !40, !"_ZN3egl5Error7NoErrorEv: argument 0"}
!40 = distinct !{!40, !"_ZN3egl5Error7NoErrorEv"}
!41 = distinct !{!41, !42, !"_ZN3egl7NoErrorEv: argument 0"}
!42 = distinct !{!42, !"_ZN3egl7NoErrorEv"}
!43 = !{!44, !46}
!44 = distinct !{!44, !45, !"_ZN3egl5Error7NoErrorEv: argument 0"}
!45 = distinct !{!45, !"_ZN3egl5Error7NoErrorEv"}
!46 = distinct !{!46, !47, !"_ZN3egl7NoErrorEv: argument 0"}
!47 = distinct !{!47, !"_ZN3egl7NoErrorEv"}
!48 = !{i8 0, i8 2}
