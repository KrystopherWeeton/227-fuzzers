; ModuleID = '../../third_party/skia/src/gpu/effects/GrCustomXfermode.cpp'
source_filename = "../../third_party/skia/src/gpu/effects/GrCustomXfermode.cpp"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%class.CustomXP = type { %class.GrXferProcessor.base, i32, i32 }
%class.GrXferProcessor.base = type <{ %class.GrProcessor, %class.GrNonAtomicRef, i8, i8 }>
%class.GrProcessor = type { i32 (...)**, i32, i32 }
%class.GrNonAtomicRef = type { i32 }
%class.GrShaderCaps = type <{ %class.SkRefCnt.base, i32, i56, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i32, i32, i32, [4 x i8] }>
%class.SkRefCnt.base = type { %class.SkRefCntBase.base }
%class.SkRefCntBase.base = type <{ i32 (...)**, %"struct.std::__1::atomic" }>
%"struct.std::__1::atomic" = type { %"struct.std::__1::__atomic_base" }
%"struct.std::__1::__atomic_base" = type { %"struct.std::__1::__atomic_base.0" }
%"struct.std::__1::__atomic_base.0" = type { %"struct.std::__1::__cxx_atomic_impl" }
%"struct.std::__1::__cxx_atomic_impl" = type { %"struct.std::__1::__cxx_atomic_base_impl" }
%"struct.std::__1::__cxx_atomic_base_impl" = type { i32 }
%class.GrProcessorKeyBuilder = type { i32 (...)**, %class.SkTArray*, i32, i32 }
%class.SkTArray = type { i32*, i64 }
%class.GrGLSLXferProcessor = type { i32 (...)**, %class.GrResourceHandle, %class.GrResourceHandle }
%class.GrResourceHandle = type { i32 }
%class.GrXferProcessor = type <{ %class.GrProcessor, %class.GrNonAtomicRef, i8, i8, [2 x i8] }>
%class.GrCaps = type <{ %class.SkRefCnt.base, [4 x i8], %class.sk_sp, i48, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, [4 x i8], i64, %class.GrDriverBugWorkarounds, i8, i8 }>
%class.sk_sp = type { %class.GrShaderCaps* }
%class.GrDriverBugWorkarounds = type { i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8 }
%"struct.GrXferProcessor::BlendInfo" = type <{ i32, i32, i32, %struct.SkRGBA4f, i8, [3 x i8] }>
%struct.SkRGBA4f = type { float, float, float, float }
%class.sk_sp.1 = type { %class.GrXferProcessor* }
%class.CustomXPFactory = type { %class.GrXPFactory, i32, i32 }
%class.GrXPFactory = type { i32 (...)** }
%class.GrProcessorAnalysisColor = type { i32, %struct.SkRGBA4f }
%class.GLCustomXP = type { %class.GrGLSLXferProcessor }
%"struct.GrGLSLXferProcessor::EmitArgs" = type <{ %class.GrGLSLXPFragmentBuilder*, %class.GrGLSLUniformHandler*, %class.GrShaderCaps*, %class.GrXferProcessor*, i8*, i8*, i8*, i8*, i32, %class.GrResourceHandle.14, i32, %class.GrSwizzle, [2 x i8] }>
%class.GrGLSLXPFragmentBuilder = type { i32 (...)**, [8 x i8], %class.GrGLSLShaderBuilder.base, [12 x i8] }
%class.GrGLSLShaderBuilder.base = type <{ i32 (...)**, %class.GrGLSLProgramBuilder*, %"class.SkSL::String", %class.SkSTArray, %class.SkString, %class.SkString, %class.SkString, %class.SkSTArray.6, [8 x i8], %class.GrTBlockList, %class.GrTBlockList, i32, [4 x i8], [2 x %class.SkSTArray.12], i32, i8, [3 x i8], i32 }>
%class.GrGLSLProgramBuilder = type opaque
%"class.SkSL::String" = type { %"class.std::__1::basic_string" }
%"class.std::__1::basic_string" = type { %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" = type { %union.anon }
%union.anon = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" = type { i8*, i64, i64 }
%class.SkSTArray = type { %class.SkAlignedSTStorage, %class.SkTArray.4 }
%class.SkAlignedSTStorage = type { [120 x i8] }
%class.SkTArray.4 = type { %class.SkString*, i64 }
%class.SkString = type { %class.sk_sp.5 }
%class.sk_sp.5 = type { %"struct.SkString::Rec"* }
%"struct.SkString::Rec" = type <{ i32, %"struct.std::__1::atomic", i8, [3 x i8] }>
%class.SkSTArray.6 = type { %class.SkAlignedSTStorage.7, %class.SkTArray.8 }
%class.SkAlignedSTStorage.7 = type { [16 x i8] }
%class.SkTArray.8 = type { %"class.std::__1::unique_ptr"*, i64 }
%"class.std::__1::unique_ptr" = type { %"class.std::__1::__compressed_pair.9" }
%"class.std::__1::__compressed_pair.9" = type { %"struct.std::__1::__compressed_pair_elem.10" }
%"struct.std::__1::__compressed_pair_elem.10" = type { %"class.SkSL::Statement"* }
%"class.SkSL::Statement" = type { %"class.SkSL::IRNode" }
%"class.SkSL::IRNode" = type { i32 (...)**, i32, i32 }
%class.GrTBlockList = type { %class.GrSBlockAllocator }
%class.GrSBlockAllocator = type { [88 x i8], [8 x i8] }
%class.SkSTArray.12 = type { %class.SkAlignedSTStorage.13, %class.SkTArray.4 }
%class.SkAlignedSTStorage.13 = type { [8 x i8] }
%class.GrGLSLUniformHandler = type { i32 (...)**, %class.GrGLSLProgramBuilder* }
%class.GrResourceHandle.14 = type { i32 }
%class.GrSwizzle = type { i16 }
%class.GrGLSLShaderBuilder = type <{ i32 (...)**, %class.GrGLSLProgramBuilder*, %"class.SkSL::String", %class.SkSTArray, %class.SkString, %class.SkString, %class.SkString, %class.SkSTArray.6, [8 x i8], %class.GrTBlockList, %class.GrTBlockList, i32, [4 x i8], [2 x %class.SkSTArray.12], i32, i8, [3 x i8], i32, [12 x i8] }>
%class.GrGLSLProgramDataManager = type { i32 (...)** }
%struct.__va_list_tag = type { i32, i32, i8*, i8* }

$_ZN11GrProcessorD2Ev = comdat any

$_ZN8CustomXPD0Ev = comdat any

$_ZNK8CustomXP4nameEv = comdat any

$_ZNK15GrXferProcessor20onHasSecondaryOutputEv = comdat any

$_ZN19GrGLSLXferProcessorD2Ev = comdat any

$_ZN10GLCustomXPD0Ev = comdat any

$_ZN10GLCustomXP24emitOutputsForBlendStateERKN19GrGLSLXferProcessor8EmitArgsE = comdat any

$_ZN10GLCustomXP23emitBlendCodeForDstReadEP23GrGLSLXPFragmentBuilderP20GrGLSLUniformHandlerPKcS5_S5_S5_S5_RK15GrXferProcessor = comdat any

$_ZN10GLCustomXP9onSetDataERK24GrGLSLProgramDataManagerRK15GrXferProcessor = comdat any

$_ZN19GrGLSLShaderBuilder11codeAppendfEPKcz = comdat any

$_ZTV10GLCustomXP = comdat any

@_ZZN16GrCustomXfermode3GetE11SkBlendModeE8gOverlay = internal constant { i8**, i32, i32 } { i8** getelementptr inbounds ({ [4 x i8*] }, { [4 x i8*] }* @_ZTV15CustomXPFactory, i32 0, inrange i32 0, i32 2), i32 15, i32 4 }, align 8
@_ZTV15CustomXPFactory = hidden unnamed_addr constant { [4 x i8*] } { [4 x i8*] [i8* null, i8* null, i8* bitcast (void (%class.sk_sp.1*, %class.CustomXPFactory*, %class.GrProcessorAnalysisColor*, i32, %class.GrCaps*, i32)* @_ZNK15CustomXPFactory17makeXferProcessorERK24GrProcessorAnalysisColor27GrProcessorAnalysisCoverageRK6GrCaps11GrClampType to i8*), i8* bitcast (i32 (%class.CustomXPFactory*, %class.GrProcessorAnalysisColor*, i32*, %class.GrCaps*, i32)* @_ZNK15CustomXPFactory18analysisPropertiesERK24GrProcessorAnalysisColorRK27GrProcessorAnalysisCoverageRK6GrCaps11GrClampType to i8*)] }, align 8
@_ZZN16GrCustomXfermode3GetE11SkBlendModeE7gDarken = internal constant { i8**, i32, i32 } { i8** getelementptr inbounds ({ [4 x i8*] }, { [4 x i8*] }* @_ZTV15CustomXPFactory, i32 0, inrange i32 0, i32 2), i32 16, i32 5 }, align 8
@_ZZN16GrCustomXfermode3GetE11SkBlendModeE8gLighten = internal constant { i8**, i32, i32 } { i8** getelementptr inbounds ({ [4 x i8*] }, { [4 x i8*] }* @_ZTV15CustomXPFactory, i32 0, inrange i32 0, i32 2), i32 17, i32 6 }, align 8
@_ZZN16GrCustomXfermode3GetE11SkBlendModeE11gColorDodge = internal constant { i8**, i32, i32 } { i8** getelementptr inbounds ({ [4 x i8*] }, { [4 x i8*] }* @_ZTV15CustomXPFactory, i32 0, inrange i32 0, i32 2), i32 18, i32 7 }, align 8
@_ZZN16GrCustomXfermode3GetE11SkBlendModeE10gColorBurn = internal constant { i8**, i32, i32 } { i8** getelementptr inbounds ({ [4 x i8*] }, { [4 x i8*] }* @_ZTV15CustomXPFactory, i32 0, inrange i32 0, i32 2), i32 19, i32 8 }, align 8
@_ZZN16GrCustomXfermode3GetE11SkBlendModeE10gHardLight = internal constant { i8**, i32, i32 } { i8** getelementptr inbounds ({ [4 x i8*] }, { [4 x i8*] }* @_ZTV15CustomXPFactory, i32 0, inrange i32 0, i32 2), i32 20, i32 9 }, align 8
@_ZZN16GrCustomXfermode3GetE11SkBlendModeE10gSoftLight = internal constant { i8**, i32, i32 } { i8** getelementptr inbounds ({ [4 x i8*] }, { [4 x i8*] }* @_ZTV15CustomXPFactory, i32 0, inrange i32 0, i32 2), i32 21, i32 10 }, align 8
@_ZZN16GrCustomXfermode3GetE11SkBlendModeE11gDifference = internal constant { i8**, i32, i32 } { i8** getelementptr inbounds ({ [4 x i8*] }, { [4 x i8*] }* @_ZTV15CustomXPFactory, i32 0, inrange i32 0, i32 2), i32 22, i32 11 }, align 8
@_ZZN16GrCustomXfermode3GetE11SkBlendModeE10gExclusion = internal constant { i8**, i32, i32 } { i8** getelementptr inbounds ({ [4 x i8*] }, { [4 x i8*] }* @_ZTV15CustomXPFactory, i32 0, inrange i32 0, i32 2), i32 23, i32 12 }, align 8
@_ZZN16GrCustomXfermode3GetE11SkBlendModeE9gMultiply = internal constant { i8**, i32, i32 } { i8** getelementptr inbounds ({ [4 x i8*] }, { [4 x i8*] }* @_ZTV15CustomXPFactory, i32 0, inrange i32 0, i32 2), i32 24, i32 13 }, align 8
@_ZZN16GrCustomXfermode3GetE11SkBlendModeE4gHue = internal constant { i8**, i32, i32 } { i8** getelementptr inbounds ({ [4 x i8*] }, { [4 x i8*] }* @_ZTV15CustomXPFactory, i32 0, inrange i32 0, i32 2), i32 25, i32 14 }, align 8
@_ZZN16GrCustomXfermode3GetE11SkBlendModeE11gSaturation = internal constant { i8**, i32, i32 } { i8** getelementptr inbounds ({ [4 x i8*] }, { [4 x i8*] }* @_ZTV15CustomXPFactory, i32 0, inrange i32 0, i32 2), i32 26, i32 15 }, align 8
@_ZZN16GrCustomXfermode3GetE11SkBlendModeE6gColor = internal constant { i8**, i32, i32 } { i8** getelementptr inbounds ({ [4 x i8*] }, { [4 x i8*] }* @_ZTV15CustomXPFactory, i32 0, inrange i32 0, i32 2), i32 27, i32 16 }, align 8
@_ZZN16GrCustomXfermode3GetE11SkBlendModeE11gLuminosity = internal constant { i8**, i32, i32 } { i8** getelementptr inbounds ({ [4 x i8*] }, { [4 x i8*] }* @_ZTV15CustomXPFactory, i32 0, inrange i32 0, i32 2), i32 28, i32 17 }, align 8
@_ZTV8CustomXP = hidden unnamed_addr constant { [11 x i8*] } { [11 x i8*] [i8* null, i8* null, i8* bitcast (void (%class.GrProcessor*)* @_ZN11GrProcessorD2Ev to i8*), i8* bitcast (void (%class.CustomXP*)* @_ZN8CustomXPD0Ev to i8*), i8* bitcast (i8* (%class.CustomXP*)* @_ZNK8CustomXP4nameEv to i8*), i8* bitcast (%class.GrGLSLXferProcessor* (%class.CustomXP*)* @_ZNK8CustomXP18createGLSLInstanceEv to i8*), i8* bitcast (i32 (%class.CustomXP*, %class.GrCaps*)* @_ZNK8CustomXP15xferBarrierTypeERK6GrCaps to i8*), i8* bitcast (void (%class.CustomXP*, %class.GrShaderCaps*, %class.GrProcessorKeyBuilder*)* @_ZNK8CustomXP21onGetGLSLProcessorKeyERK12GrShaderCapsP21GrProcessorKeyBuilder to i8*), i8* bitcast (i1 (%class.GrXferProcessor*)* @_ZNK15GrXferProcessor20onHasSecondaryOutputEv to i8*), i8* bitcast (void (%class.CustomXP*, %"struct.GrXferProcessor::BlendInfo"*)* @_ZNK8CustomXP14onGetBlendInfoEPN15GrXferProcessor9BlendInfoE to i8*), i8* bitcast (i1 (%class.CustomXP*, %class.GrXferProcessor*)* @_ZNK8CustomXP9onIsEqualERK15GrXferProcessor to i8*)] }, align 8
@.str = private unnamed_addr constant [8 x i8] c"unknown\00", align 1
@_ZTV10GLCustomXP = linkonce_odr hidden unnamed_addr constant { [8 x i8*] } { [8 x i8*] [i8* null, i8* null, i8* bitcast (void (%class.GrGLSLXferProcessor*)* @_ZN19GrGLSLXferProcessorD2Ev to i8*), i8* bitcast (void (%class.GLCustomXP*)* @_ZN10GLCustomXPD0Ev to i8*), i8* bitcast (void (%class.GLCustomXP*, %"struct.GrGLSLXferProcessor::EmitArgs"*)* @_ZN10GLCustomXP24emitOutputsForBlendStateERKN19GrGLSLXferProcessor8EmitArgsE to i8*), i8* bitcast (void (%class.GLCustomXP*, %class.GrGLSLXPFragmentBuilder*, %class.GrGLSLUniformHandler*, i8*, i8*, i8*, i8*, i8*, %class.GrXferProcessor*)* @_ZN10GLCustomXP23emitBlendCodeForDstReadEP23GrGLSLXPFragmentBuilderP20GrGLSLUniformHandlerPKcS5_S5_S5_S5_RK15GrXferProcessor to i8*), i8* bitcast (void (%class.GrGLSLXferProcessor*, %class.GrGLSLXPFragmentBuilder*, %class.GrSwizzle*, i8*, i8*)* @_ZNK19GrGLSLXferProcessor16emitWriteSwizzleEP23GrGLSLXPFragmentBuilderRK9GrSwizzlePKcS6_ to i8*), i8* bitcast (void (%class.GLCustomXP*, %class.GrGLSLProgramDataManager*, %class.GrXferProcessor*)* @_ZN10GLCustomXP9onSetDataERK24GrGLSLProgramDataManagerRK15GrXferProcessor to i8*)] }, comdat, align 8
@.str.1 = private unnamed_addr constant [14 x i8] c"%s = %s * %s;\00", align 1
@.str.2 = private unnamed_addr constant [16 x i8] c"Custom Xfermode\00", align 1

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden zeroext i1 @_ZN16GrCustomXfermode15IsSupportedModeE11SkBlendMode(i32) local_unnamed_addr #0 {
  %2 = add i32 %0, -15
  %3 = icmp ult i32 %2, 14
  ret i1 %3
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZNK8CustomXP21onGetGLSLProcessorKeyERK12GrShaderCapsP21GrProcessorKeyBuilder(%class.CustomXP* nocapture readonly, %class.GrShaderCaps* nocapture readonly dereferenceable(144), %class.GrProcessorKeyBuilder*) unnamed_addr #1 align 2 {
  %4 = getelementptr inbounds %class.CustomXP, %class.CustomXP* %0, i64 0, i32 2
  %5 = load i32, i32* %4, align 4
  %6 = icmp eq i32 %5, 18
  br i1 %6, label %10, label %7

7:                                                ; preds = %3
  %8 = getelementptr inbounds %class.GrShaderCaps, %class.GrShaderCaps* %1, i64 0, i32 18
  %9 = load i32, i32* %8, align 8
  br label %14

10:                                               ; preds = %3
  %11 = getelementptr inbounds %class.CustomXP, %class.CustomXP* %0, i64 0, i32 1
  %12 = load i32, i32* %11, align 8
  %13 = shl i32 %12, 3
  br label %14

14:                                               ; preds = %7, %10
  %15 = phi i32 [ %13, %10 ], [ %9, %7 ]
  %16 = bitcast %class.GrProcessorKeyBuilder* %2 to void (%class.GrProcessorKeyBuilder*, i32, i32, i8*)***
  %17 = load void (%class.GrProcessorKeyBuilder*, i32, i32, i8*)**, void (%class.GrProcessorKeyBuilder*, i32, i32, i8*)*** %16, align 8
  %18 = getelementptr inbounds void (%class.GrProcessorKeyBuilder*, i32, i32, i8*)*, void (%class.GrProcessorKeyBuilder*, i32, i32, i8*)** %17, i64 2
  %19 = load void (%class.GrProcessorKeyBuilder*, i32, i32, i8*)*, void (%class.GrProcessorKeyBuilder*, i32, i32, i8*)** %18, align 8
  tail call void %19(%class.GrProcessorKeyBuilder* %2, i32 32, i32 %15, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str, i64 0, i64 0)) #10
  ret void
}

; Function Attrs: nofree nounwind ssp uwtable
define hidden noalias nonnull %class.GrGLSLXferProcessor* @_ZNK8CustomXP18createGLSLInstanceEv(%class.CustomXP* nocapture readnone) unnamed_addr #2 align 2 {
  %2 = tail call i8* @_Znwm(i64 16) #12
  %3 = bitcast i8* %2 to i32 (...)***
  %4 = getelementptr inbounds i8, i8* %2, i64 8
  %5 = bitcast i8* %4 to i32*
  store i32 -1, i32* %5, align 4
  %6 = getelementptr inbounds i8, i8* %2, i64 12
  %7 = bitcast i8* %6 to i32*
  store i32 -1, i32* %7, align 4
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [8 x i8*] }, { [8 x i8*] }* @_ZTV10GLCustomXP, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %3, align 8
  %8 = bitcast i8* %2 to %class.GrGLSLXferProcessor*
  ret %class.GrGLSLXferProcessor* %8
}

; Function Attrs: nobuiltin nofree
declare noalias nonnull i8* @_Znwm(i64) local_unnamed_addr #3

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden zeroext i1 @_ZNK8CustomXP9onIsEqualERK15GrXferProcessor(%class.CustomXP* nocapture readonly, %class.GrXferProcessor* nocapture readonly dereferenceable(24)) unnamed_addr #4 align 2 {
  %3 = getelementptr inbounds %class.CustomXP, %class.CustomXP* %0, i64 0, i32 1
  %4 = load i32, i32* %3, align 8
  %5 = getelementptr inbounds %class.GrXferProcessor, %class.GrXferProcessor* %1, i64 1
  %6 = bitcast %class.GrXferProcessor* %5 to i32*
  %7 = load i32, i32* %6, align 8
  %8 = icmp eq i32 %4, %7
  br i1 %8, label %9, label %16

9:                                                ; preds = %2
  %10 = bitcast %class.GrXferProcessor* %1 to %class.CustomXP*
  %11 = getelementptr inbounds %class.CustomXP, %class.CustomXP* %0, i64 0, i32 2
  %12 = load i32, i32* %11, align 4
  %13 = getelementptr inbounds %class.CustomXP, %class.CustomXP* %10, i64 0, i32 2
  %14 = load i32, i32* %13, align 4
  %15 = icmp eq i32 %12, %14
  br label %16

16:                                               ; preds = %9, %2
  %17 = phi i1 [ false, %2 ], [ %15, %9 ]
  ret i1 %17
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #5

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #5

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden i32 @_ZNK8CustomXP15xferBarrierTypeERK6GrCaps(%class.CustomXP* nocapture readonly, %class.GrCaps* nocapture readonly dereferenceable(232)) unnamed_addr #4 align 2 {
  %3 = getelementptr inbounds %class.CustomXP, %class.CustomXP* %0, i64 0, i32 2
  %4 = load i32, i32* %3, align 4
  %5 = icmp eq i32 %4, 18
  br i1 %5, label %10, label %6

6:                                                ; preds = %2
  %7 = getelementptr inbounds %class.GrCaps, %class.GrCaps* %1, i64 0, i32 4
  %8 = load i32, i32* %7, align 8
  %9 = icmp eq i32 %8, 2
  br i1 %9, label %10, label %11

10:                                               ; preds = %2, %6
  br label %11

11:                                               ; preds = %6, %10
  %12 = phi i32 [ 0, %10 ], [ 2, %6 ]
  ret i32 %12
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @_ZNK8CustomXP14onGetBlendInfoEPN15GrXferProcessor9BlendInfoE(%class.CustomXP* nocapture readonly, %"struct.GrXferProcessor::BlendInfo"* nocapture) unnamed_addr #6 align 2 {
  %3 = getelementptr inbounds %class.CustomXP, %class.CustomXP* %0, i64 0, i32 2
  %4 = load i32, i32* %3, align 4
  %5 = icmp eq i32 %4, 18
  br i1 %5, label %8, label %6

6:                                                ; preds = %2
  %7 = getelementptr inbounds %"struct.GrXferProcessor::BlendInfo", %"struct.GrXferProcessor::BlendInfo"* %1, i64 0, i32 0
  store i32 %4, i32* %7, align 4
  br label %8

8:                                                ; preds = %2, %6
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZNK15CustomXPFactory17makeXferProcessorERK24GrProcessorAnalysisColor27GrProcessorAnalysisCoverageRK6GrCaps11GrClampType(%class.sk_sp.1* noalias nocapture sret, %class.CustomXPFactory* nocapture readonly, %class.GrProcessorAnalysisColor* nocapture readnone dereferenceable(20), i32, %class.GrCaps* nocapture readonly dereferenceable(232), i32) unnamed_addr #1 align 2 {
  %7 = getelementptr inbounds %class.CustomXPFactory, %class.CustomXPFactory* %1, i64 0, i32 2
  %8 = getelementptr inbounds %class.GrCaps, %class.GrCaps* %4, i64 0, i32 4
  %9 = load i32, i32* %8, align 8
  %10 = icmp slt i32 %9, 1
  %11 = icmp eq i32 %3, 2
  %12 = or i1 %11, %10
  br i1 %12, label %26, label %13

13:                                               ; preds = %6
  %14 = load i32, i32* %7, align 4
  %15 = getelementptr inbounds %class.GrCaps, %class.GrCaps* %4, i64 0, i32 5
  %16 = load i32, i32* %15, align 4
  %17 = shl i32 1, %14
  %18 = and i32 %16, %17
  %19 = icmp eq i32 %18, 0
  br i1 %19, label %20, label %26

20:                                               ; preds = %13
  %21 = tail call i8* @_ZN11GrProcessornwEm(i64 32) #10
  %22 = getelementptr inbounds %class.CustomXPFactory, %class.CustomXPFactory* %1, i64 0, i32 1
  %23 = load i32, i32* %22, align 8
  %24 = load i32, i32* %7, align 4
  %25 = bitcast i8* %21 to %class.GrXferProcessor*
  tail call void @_ZN15GrXferProcessorC2EN11GrProcessor7ClassIDE(%class.GrXferProcessor* %25, i32 11) #10
  br label %31

26:                                               ; preds = %6, %13
  %27 = tail call i8* @_ZN11GrProcessornwEm(i64 32) #10
  %28 = getelementptr inbounds %class.CustomXPFactory, %class.CustomXPFactory* %1, i64 0, i32 1
  %29 = load i32, i32* %28, align 8
  %30 = bitcast i8* %27 to %class.GrXferProcessor*
  tail call void @_ZN15GrXferProcessorC2EN11GrProcessor7ClassIDEb27GrProcessorAnalysisCoverage(%class.GrXferProcessor* %30, i32 11, i1 zeroext true, i32 %3) #10
  br label %31

31:                                               ; preds = %26, %20
  %32 = phi i8* [ %27, %26 ], [ %21, %20 ]
  %33 = phi i32 [ %29, %26 ], [ %23, %20 ]
  %34 = phi i32 [ 18, %26 ], [ %24, %20 ]
  %35 = bitcast i8* %32 to i32 (...)***
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [11 x i8*] }, { [11 x i8*] }* @_ZTV8CustomXP, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %35, align 8
  %36 = getelementptr inbounds i8, i8* %32, i64 24
  %37 = bitcast i8* %36 to i32*
  store i32 %33, i32* %37, align 8
  %38 = getelementptr inbounds i8, i8* %32, i64 28
  %39 = bitcast i8* %38 to i32*
  store i32 %34, i32* %39, align 4
  %40 = ptrtoint i8* %32 to i64
  %41 = bitcast %class.sk_sp.1* %0 to i64*
  store i64 %40, i64* %41, align 8
  ret void
}

declare i8* @_ZN11GrProcessornwEm(i64) local_unnamed_addr #7

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden i32 @_ZNK15CustomXPFactory18analysisPropertiesERK24GrProcessorAnalysisColorRK27GrProcessorAnalysisCoverageRK6GrCaps11GrClampType(%class.CustomXPFactory* nocapture readonly, %class.GrProcessorAnalysisColor* nocapture readnone dereferenceable(20), i32* nocapture readonly dereferenceable(4), %class.GrCaps* nocapture readonly dereferenceable(232), i32) unnamed_addr #4 align 2 {
  %6 = load i32, i32* %2, align 4
  %7 = getelementptr inbounds %class.GrCaps, %class.GrCaps* %3, i64 0, i32 4
  %8 = load i32, i32* %7, align 8
  %9 = icmp slt i32 %8, 1
  %10 = icmp eq i32 %6, 2
  %11 = or i1 %10, %9
  br i1 %11, label %23, label %12

12:                                               ; preds = %5
  %13 = getelementptr inbounds %class.CustomXPFactory, %class.CustomXPFactory* %0, i64 0, i32 2
  %14 = load i32, i32* %13, align 4
  %15 = getelementptr inbounds %class.GrCaps, %class.GrCaps* %3, i64 0, i32 5
  %16 = load i32, i32* %15, align 4
  %17 = shl i32 1, %14
  %18 = and i32 %16, %17
  %19 = icmp eq i32 %18, 0
  br i1 %19, label %20, label %23

20:                                               ; preds = %12
  %21 = icmp eq i32 %8, 2
  %22 = select i1 %21, i32 2, i32 98
  ret i32 %22

23:                                               ; preds = %5, %12
  ret i32 3
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden %class.GrXPFactory* @_ZN16GrCustomXfermode3GetE11SkBlendMode(i32) local_unnamed_addr #0 {
  switch i32 %0, label %15 [
    i32 15, label %16
    i32 16, label %2
    i32 17, label %3
    i32 18, label %4
    i32 19, label %5
    i32 20, label %6
    i32 21, label %7
    i32 22, label %8
    i32 23, label %9
    i32 24, label %10
    i32 25, label %11
    i32 26, label %12
    i32 27, label %13
    i32 28, label %14
  ]

2:                                                ; preds = %1
  br label %16

3:                                                ; preds = %1
  br label %16

4:                                                ; preds = %1
  br label %16

5:                                                ; preds = %1
  br label %16

6:                                                ; preds = %1
  br label %16

7:                                                ; preds = %1
  br label %16

8:                                                ; preds = %1
  br label %16

9:                                                ; preds = %1
  br label %16

10:                                               ; preds = %1
  br label %16

11:                                               ; preds = %1
  br label %16

12:                                               ; preds = %1
  br label %16

13:                                               ; preds = %1
  br label %16

14:                                               ; preds = %1
  br label %16

15:                                               ; preds = %1
  br label %16

16:                                               ; preds = %1, %15, %14, %13, %12, %11, %10, %9, %8, %7, %6, %5, %4, %3, %2
  %17 = phi %class.GrXPFactory* [ null, %15 ], [ bitcast ({ i8**, i32, i32 }* @_ZZN16GrCustomXfermode3GetE11SkBlendModeE11gLuminosity to %class.GrXPFactory*), %14 ], [ bitcast ({ i8**, i32, i32 }* @_ZZN16GrCustomXfermode3GetE11SkBlendModeE6gColor to %class.GrXPFactory*), %13 ], [ bitcast ({ i8**, i32, i32 }* @_ZZN16GrCustomXfermode3GetE11SkBlendModeE11gSaturation to %class.GrXPFactory*), %12 ], [ bitcast ({ i8**, i32, i32 }* @_ZZN16GrCustomXfermode3GetE11SkBlendModeE4gHue to %class.GrXPFactory*), %11 ], [ bitcast ({ i8**, i32, i32 }* @_ZZN16GrCustomXfermode3GetE11SkBlendModeE9gMultiply to %class.GrXPFactory*), %10 ], [ bitcast ({ i8**, i32, i32 }* @_ZZN16GrCustomXfermode3GetE11SkBlendModeE10gExclusion to %class.GrXPFactory*), %9 ], [ bitcast ({ i8**, i32, i32 }* @_ZZN16GrCustomXfermode3GetE11SkBlendModeE11gDifference to %class.GrXPFactory*), %8 ], [ bitcast ({ i8**, i32, i32 }* @_ZZN16GrCustomXfermode3GetE11SkBlendModeE10gSoftLight to %class.GrXPFactory*), %7 ], [ bitcast ({ i8**, i32, i32 }* @_ZZN16GrCustomXfermode3GetE11SkBlendModeE10gHardLight to %class.GrXPFactory*), %6 ], [ bitcast ({ i8**, i32, i32 }* @_ZZN16GrCustomXfermode3GetE11SkBlendModeE10gColorBurn to %class.GrXPFactory*), %5 ], [ bitcast ({ i8**, i32, i32 }* @_ZZN16GrCustomXfermode3GetE11SkBlendModeE11gColorDodge to %class.GrXPFactory*), %4 ], [ bitcast ({ i8**, i32, i32 }* @_ZZN16GrCustomXfermode3GetE11SkBlendModeE8gLighten to %class.GrXPFactory*), %3 ], [ bitcast ({ i8**, i32, i32 }* @_ZZN16GrCustomXfermode3GetE11SkBlendModeE7gDarken to %class.GrXPFactory*), %2 ], [ bitcast ({ i8**, i32, i32 }* @_ZZN16GrCustomXfermode3GetE11SkBlendModeE8gOverlay to %class.GrXPFactory*), %1 ]
  ret %class.GrXPFactory* %17
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN11GrProcessorD2Ev(%class.GrProcessor*) unnamed_addr #1 comdat align 2 {
  ret void
}

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZN8CustomXPD0Ev(%class.CustomXP*) unnamed_addr #8 comdat align 2 {
  %2 = bitcast %class.CustomXP* %0 to i8*
  tail call void @_ZN11GrProcessordlEPv(i8* %2) #10
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden i8* @_ZNK8CustomXP4nameEv(%class.CustomXP*) unnamed_addr #1 comdat align 2 {
  ret i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.2, i64 0, i64 0)
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZNK15GrXferProcessor20onHasSecondaryOutputEv(%class.GrXferProcessor*) unnamed_addr #1 comdat align 2 {
  ret i1 false
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN19GrGLSLXferProcessorD2Ev(%class.GrGLSLXferProcessor*) unnamed_addr #1 comdat align 2 {
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN10GLCustomXPD0Ev(%class.GLCustomXP*) unnamed_addr #1 comdat align 2 {
  %2 = bitcast %class.GLCustomXP* %0 to i8*
  tail call void @_ZdlPv(i8* %2) #12
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN10GLCustomXP24emitOutputsForBlendStateERKN19GrGLSLXferProcessor8EmitArgsE(%class.GLCustomXP*, %"struct.GrGLSLXferProcessor::EmitArgs"* dereferenceable(80)) unnamed_addr #1 comdat align 2 {
  %3 = getelementptr inbounds %"struct.GrGLSLXferProcessor::EmitArgs", %"struct.GrGLSLXferProcessor::EmitArgs"* %1, i64 0, i32 3
  %4 = bitcast %class.GrXferProcessor** %3 to %class.CustomXP**
  %5 = load %class.CustomXP*, %class.CustomXP** %4, align 8
  %6 = getelementptr inbounds %"struct.GrGLSLXferProcessor::EmitArgs", %"struct.GrGLSLXferProcessor::EmitArgs"* %1, i64 0, i32 0
  %7 = load %class.GrGLSLXPFragmentBuilder*, %class.GrGLSLXPFragmentBuilder** %6, align 8
  %8 = getelementptr inbounds %class.CustomXP, %class.CustomXP* %5, i64 0, i32 2
  %9 = load i32, i32* %8, align 4
  %10 = bitcast %class.GrGLSLXPFragmentBuilder* %7 to void (%class.GrGLSLXPFragmentBuilder*, i32)***
  %11 = load void (%class.GrGLSLXPFragmentBuilder*, i32)**, void (%class.GrGLSLXPFragmentBuilder*, i32)*** %10, align 8
  %12 = getelementptr inbounds void (%class.GrGLSLXPFragmentBuilder*, i32)*, void (%class.GrGLSLXPFragmentBuilder*, i32)** %11, i64 3
  %13 = load void (%class.GrGLSLXPFragmentBuilder*, i32)*, void (%class.GrGLSLXPFragmentBuilder*, i32)** %12, align 8
  tail call void %13(%class.GrGLSLXPFragmentBuilder* %7, i32 %9) #10
  %14 = bitcast %class.GrGLSLXPFragmentBuilder* %7 to i8**
  %15 = load i8*, i8** %14, align 8
  %16 = getelementptr i8, i8* %15, i64 -24
  %17 = bitcast i8* %16 to i64*
  %18 = load i64, i64* %17, align 8
  %19 = bitcast %class.GrGLSLXPFragmentBuilder* %7 to i8*
  %20 = getelementptr inbounds i8, i8* %19, i64 %18
  %21 = bitcast i8* %20 to %class.GrGLSLShaderBuilder*
  %22 = getelementptr inbounds %"struct.GrGLSLXferProcessor::EmitArgs", %"struct.GrGLSLXferProcessor::EmitArgs"* %1, i64 0, i32 6
  %23 = load i8*, i8** %22, align 8
  %24 = getelementptr inbounds %"struct.GrGLSLXferProcessor::EmitArgs", %"struct.GrGLSLXferProcessor::EmitArgs"* %1, i64 0, i32 5
  %25 = load i8*, i8** %24, align 8
  %26 = getelementptr inbounds %"struct.GrGLSLXferProcessor::EmitArgs", %"struct.GrGLSLXferProcessor::EmitArgs"* %1, i64 0, i32 4
  %27 = load i8*, i8** %26, align 8
  tail call void (%class.GrGLSLShaderBuilder*, i8*, ...) @_ZN19GrGLSLShaderBuilder11codeAppendfEPKcz(%class.GrGLSLShaderBuilder* %21, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.1, i64 0, i64 0), i8* %23, i8* %25, i8* %27)
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN10GLCustomXP23emitBlendCodeForDstReadEP23GrGLSLXPFragmentBuilderP20GrGLSLUniformHandlerPKcS5_S5_S5_S5_RK15GrXferProcessor(%class.GLCustomXP*, %class.GrGLSLXPFragmentBuilder*, %class.GrGLSLUniformHandler*, i8*, i8*, i8*, i8*, i8*, %class.GrXferProcessor* dereferenceable(24)) unnamed_addr #1 comdat align 2 {
  %10 = icmp eq %class.GrGLSLXPFragmentBuilder* %1, null
  br i1 %10, label %20, label %11

11:                                               ; preds = %9
  %12 = bitcast %class.GrGLSLXPFragmentBuilder* %1 to i8**
  %13 = load i8*, i8** %12, align 8
  %14 = getelementptr i8, i8* %13, i64 -24
  %15 = bitcast i8* %14 to i64*
  %16 = load i64, i64* %15, align 8
  %17 = bitcast %class.GrGLSLXPFragmentBuilder* %1 to i8*
  %18 = getelementptr inbounds i8, i8* %17, i64 %16
  %19 = bitcast i8* %18 to %class.GrGLSLShaderBuilder*
  br label %20

20:                                               ; preds = %11, %9
  %21 = phi %class.GrGLSLShaderBuilder* [ %19, %11 ], [ null, %9 ]
  %22 = getelementptr inbounds %class.GrXferProcessor, %class.GrXferProcessor* %8, i64 1
  %23 = bitcast %class.GrXferProcessor* %22 to i32*
  %24 = load i32, i32* %23, align 8
  tail call void @_ZN11GrGLSLBlend10AppendModeEP19GrGLSLShaderBuilderPKcS3_S3_11SkBlendMode(%class.GrGLSLShaderBuilder* %21, i8* %3, i8* %5, i8* %6, i32 %24) #10
  tail call void @_ZN19GrGLSLXferProcessor25DefaultCoverageModulationEP23GrGLSLXPFragmentBuilderPKcS3_S3_S3_RK15GrXferProcessor(%class.GrGLSLXPFragmentBuilder* %1, i8* %4, i8* %5, i8* %6, i8* %7, %class.GrXferProcessor* dereferenceable(24) %8) #10
  ret void
}

declare void @_ZNK19GrGLSLXferProcessor16emitWriteSwizzleEP23GrGLSLXPFragmentBuilderRK9GrSwizzlePKcS6_(%class.GrGLSLXferProcessor*, %class.GrGLSLXPFragmentBuilder*, %class.GrSwizzle* dereferenceable(2), i8*, i8*) unnamed_addr #7

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN10GLCustomXP9onSetDataERK24GrGLSLProgramDataManagerRK15GrXferProcessor(%class.GLCustomXP*, %class.GrGLSLProgramDataManager* dereferenceable(8), %class.GrXferProcessor* dereferenceable(24)) unnamed_addr #1 comdat align 2 {
  ret void
}

; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(i8*) local_unnamed_addr #9

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN19GrGLSLShaderBuilder11codeAppendfEPKcz(%class.GrGLSLShaderBuilder*, i8*, ...) local_unnamed_addr #1 comdat align 2 {
  %3 = alloca [1 x %struct.__va_list_tag], align 16
  %4 = bitcast [1 x %struct.__va_list_tag]* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %4) #10
  %5 = getelementptr inbounds [1 x %struct.__va_list_tag], [1 x %struct.__va_list_tag]* %3, i64 0, i64 0
  %6 = bitcast [1 x %struct.__va_list_tag]* %3 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %6, i8 -86, i64 24, i1 false)
  call void @llvm.va_start(i8* nonnull %4)
  %7 = getelementptr inbounds %class.GrGLSLShaderBuilder, %class.GrGLSLShaderBuilder* %0, i64 0, i32 3, i32 0, i32 0, i64 120
  %8 = getelementptr inbounds %class.GrGLSLShaderBuilder, %class.GrGLSLShaderBuilder* %0, i64 0, i32 14
  %9 = load i32, i32* %8, align 8
  %10 = bitcast i8* %7 to %class.SkString**
  %11 = load %class.SkString*, %class.SkString** %10, align 8
  %12 = sext i32 %9 to i64
  %13 = getelementptr inbounds %class.SkString, %class.SkString* %11, i64 %12
  call void @_ZN8SkString12appendVAListEPKcP13__va_list_tag(%class.SkString* %13, i8* %1, %struct.__va_list_tag* nonnull %5) #10
  call void @llvm.va_end(i8* nonnull %4)
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %4) #10
  ret void
}

; Function Attrs: nounwind
declare void @llvm.va_start(i8*) #10

declare void @_ZN8SkString12appendVAListEPKcP13__va_list_tag(%class.SkString*, i8*, %struct.__va_list_tag*) local_unnamed_addr #7

; Function Attrs: nounwind
declare void @llvm.va_end(i8*) #10

declare void @_ZN11GrGLSLBlend10AppendModeEP19GrGLSLShaderBuilderPKcS3_S3_11SkBlendMode(%class.GrGLSLShaderBuilder*, i8*, i8*, i8*, i32) local_unnamed_addr #7

declare void @_ZN19GrGLSLXferProcessor25DefaultCoverageModulationEP23GrGLSLXPFragmentBuilderPKcS3_S3_S3_RK15GrXferProcessor(%class.GrGLSLXPFragmentBuilder*, i8*, i8*, i8*, i8*, %class.GrXferProcessor* dereferenceable(24)) local_unnamed_addr #7

declare void @_ZN15GrXferProcessorC2EN11GrProcessor7ClassIDE(%class.GrXferProcessor*, i32) unnamed_addr #7

declare void @_ZN15GrXferProcessorC2EN11GrProcessor7ClassIDEb27GrProcessorAnalysisCoverage(%class.GrXferProcessor*, i32, i1 zeroext, i32) unnamed_addr #7

; Function Attrs: nounwind
declare void @_ZN11GrProcessordlEPv(i8*) local_unnamed_addr #11

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #5

attributes #0 = { norecurse nounwind readnone ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nofree nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nobuiltin nofree "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { norecurse nounwind readonly ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { argmemonly nounwind }
attributes #6 = { nofree norecurse nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #8 = { inlinehint nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #9 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #10 = { nounwind }
attributes #11 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #12 = { builtin nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
