; ModuleID = '../../cc/layers/render_surface_impl.cc'
source_filename = "../../cc/layers/render_surface_impl.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"class.gfx::Transform" = type { %class.SkMatrix44 }
%class.SkMatrix44 = type <{ [4 x [4 x float]], i8, [3 x i8] }>
%"struct.base::trace_event::TraceCategory" = type { i8, i32, i8* }
%"class.cc::RenderSurfaceImpl" = type { i32 (...)**, %"class.cc::LayerTreeImpl"*, i64, i32, %"struct.cc::RenderSurfaceImpl::DrawProperties", %"class.gfx::Rect", i32, i8, %"class.cc::Occlusion", %"class.cc::RenderSurfaceImpl"*, %"class.std::__1::unique_ptr.1272" }
%"struct.cc::RenderSurfaceImpl::DrawProperties" = type { float, %"class.gfx::Transform", %"class.gfx::Transform", %"class.gfx::Rect", %"class.gfx::Rect", i8, %"class.gfx::MaskFilterInfo" }
%"class.gfx::MaskFilterInfo" = type { %"class.gfx::RRectF" }
%"class.gfx::RRectF" = type { %class.SkRRect }
%class.SkRRect = type { %struct.SkRect, [4 x %struct.SkPoint], i32 }
%struct.SkRect = type { float, float, float, float }
%struct.SkPoint = type { float, float }
%"class.gfx::Rect" = type { %"class.gfx::Point", %"class.gfx::Size" }
%"class.gfx::Point" = type { i32, i32 }
%"class.gfx::Size" = type { i32, i32 }
%"class.cc::Occlusion" = type { %"class.gfx::Transform", %"class.cc::SimpleEnclosedRegion", %"class.cc::SimpleEnclosedRegion" }
%"class.cc::SimpleEnclosedRegion" = type { %"class.gfx::Rect" }
%"class.std::__1::unique_ptr.1272" = type { %"class.std::__1::__compressed_pair.1273" }
%"class.std::__1::__compressed_pair.1273" = type { %"struct.std::__1::__compressed_pair_elem.1274" }
%"struct.std::__1::__compressed_pair_elem.1274" = type { %"class.cc::DamageTracker"* }
%"class.cc::DamageTracker" = type { %"class.std::__1::vector.1275", %"class.std::__1::vector.1282", i32, %"class.cc::DamageTracker::DamageAccumulator", i8, %"class.cc::DamageTracker::DamageAccumulator", %"class.std::__1::vector.1289" }
%"class.std::__1::vector.1275" = type { %"class.std::__1::__vector_base.1276" }
%"class.std::__1::__vector_base.1276" = type { %"struct.cc::DamageTracker::LayerRectMapData"*, %"struct.cc::DamageTracker::LayerRectMapData"*, %"class.std::__1::__compressed_pair.1277" }
%"struct.cc::DamageTracker::LayerRectMapData" = type { i32, i32, %"class.gfx::Rect" }
%"class.std::__1::__compressed_pair.1277" = type { %"struct.std::__1::__compressed_pair_elem.1278" }
%"struct.std::__1::__compressed_pair_elem.1278" = type { %"struct.cc::DamageTracker::LayerRectMapData"* }
%"class.std::__1::vector.1282" = type { %"class.std::__1::__vector_base.1283" }
%"class.std::__1::__vector_base.1283" = type { %"struct.cc::DamageTracker::SurfaceRectMapData"*, %"struct.cc::DamageTracker::SurfaceRectMapData"*, %"class.std::__1::__compressed_pair.1284" }
%"struct.cc::DamageTracker::SurfaceRectMapData" = type <{ i64, i32, %"class.gfx::Rect", [4 x i8] }>
%"class.std::__1::__compressed_pair.1284" = type { %"struct.std::__1::__compressed_pair_elem.1285" }
%"struct.std::__1::__compressed_pair_elem.1285" = type { %"struct.cc::DamageTracker::SurfaceRectMapData"* }
%"class.cc::DamageTracker::DamageAccumulator" = type { i8, i32, i32, i32, i32 }
%"class.std::__1::vector.1289" = type { %"class.std::__1::__vector_base.1290" }
%"class.std::__1::__vector_base.1290" = type { %"struct.cc::DamageTracker::SurfaceWithRect"*, %"struct.cc::DamageTracker::SurfaceWithRect"*, %"class.std::__1::__compressed_pair.1291" }
%"struct.cc::DamageTracker::SurfaceWithRect" = type { %"class.cc::RenderSurfaceImpl"*, %"class.gfx::Rect" }
%"class.std::__1::__compressed_pair.1291" = type { %"struct.std::__1::__compressed_pair_elem.1292" }
%"struct.std::__1::__compressed_pair_elem.1292" = type { %"struct.cc::DamageTracker::SurfaceWithRect"* }
%"class.cc::LayerTreeImpl" = type { i32 (...)**, %"class.cc::LayerTreeHostImpl"*, i32, i32, %"class.cc::HeadsUpDisplayLayerImpl"*, %"class.cc::PropertyTrees", i32, i32, %"struct.cc::LayerTreeHost::ViewportPropertyIds", %"struct.viz::Selection.969", %class.scoped_refptr.970, float, float, float, float, float, %"class.gfx::DisplayColorSpaces", %"class.viz::LocalSurfaceId", i8, i8, %"class.gfx::Rect", %class.scoped_refptr.976, %"class.std::__1::vector.980", %"class.std::__1::unordered_map.1029", %"class.base::internal::flat_tree.1053", %"class.std::__1::unordered_map.1061", %"class.std::__1::unordered_map.1085", %"class.std::__1::unordered_map.1109", %"class.std::__1::unordered_map.1109", %"class.base::flat_map.1133", %"class.std::__1::vector.1143", %"class.base::internal::flat_tree.1232", %"class.base::internal::flat_tree.598", %"class.std::__1::vector.1233", %"class.cc::Region", i8, i8, i8, i8, i8, i8, i8, %"class.std::__1::vector.114", %"class.std::__1::vector.114", %"class.std::__1::vector.1240", i8, [4 x i32], %"struct.cc::BrowserControlsParams", %"struct.cc::OverscrollBehavior", %class.scoped_refptr.1247, %class.scoped_refptr.1247, %"class.std::__1::unique_ptr.1252", i8, %"class.cc::LayerTreeLifecycle", i32, %"class.std::__1::vector.633", %"class.std::__1::vector.756", %"class.std::__1::unique_ptr.1258", %"class.std::__1::vector.1264" }
%"class.cc::LayerTreeHostImpl" = type { %"class.cc::TileManagerClient", %"class.cc::LayerTreeFrameSinkClient", %"class.cc::BrowserControlsOffsetManagerClient", %"class.cc::ScrollbarAnimationControllerClient", %"class.cc::VideoFrameControllerClient", %"class.cc::MutatorHostClient", %"class.cc::ImageAnimationController::Client", %"class.cc::CompositorDelegateForInput", %"class.cc::LayerTreeHostImplClient"*, %"class.cc::LayerTreeHostSchedulingClient"*, %"class.cc::TaskRunnerProvider"*, %"class.cc::BeginFrameTracker", %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr.5", %"class.cc::LayerTreeSettings", i8, %"class.viz::ClientResourceProvider", %"class.std::__1::unordered_map", %"class.std::__1::unordered_map", %"class.std::__1::set", %"class.cc::LayerTreeFrameSink"*, i32, %"class.std::__1::unique_ptr.57", %"class.std::__1::unique_ptr.57", i8, i8, i8, i8, i8, i32, %"class.std::__1::unique_ptr.63", %"class.std::__1::unique_ptr.69", %"class.std::__1::unique_ptr.94", %"class.std::__1::unique_ptr.102", %"class.cc::GlobalStateThatImpactsTilePriority", %"class.std::__1::unique_ptr.108", %"class.std::__1::unique_ptr.108", %"class.std::__1::unique_ptr.108", %"class.gfx::Vector2dF", %"class.std::__1::vector.114", i8, [7 x i8], %"class.cc::LayerTreeDebugState", i8, %"struct.cc::ManagedMemoryPolicy", %"class.cc::TileManager", %"class.std::__1::unique_ptr.394", %"class.std::__1::unique_ptr.406", %"class.cc::DroppedFrameCounter", %"class.cc::TotalFrameCounter", %"class.std::__1::unique_ptr.456", %"class.std::__1::unique_ptr.463", i64, %"class.gfx::Transform", %"class.gfx::Rect", %"class.gfx::Rect", i8, %"class.gfx::Rect", %"class.std::__1::unique_ptr.469", %"class.std::__1::unique_ptr.475", %"class.std::__1::set.481", %"class.cc::RasterDarkModeFilter"*, %"class.std::__1::unordered_map.491", %"class.cc::RenderingStatsInstrumentation"*, %"class.cc::MicroBenchmarkControllerImpl", %"class.std::__1::unique_ptr.532", %"class.base::RepeatingCallback.328", %"class.cc::TaskGraphRunner"*, i32, %"class.std::__1::set.538", i8, i8, i8, i32, %"class.std::__1::unique_ptr.548", %"class.gfx::Size", i8, %"class.std::__1::unique_ptr.554", %"class.std::__1::vector.560", i32, [4 x i8], %"class.cc::ImageAnimationController", %"class.std::__1::unique_ptr.580", %"class.std::__1::unique_ptr.592", %"class.viz::FrameTokenGenerator", %"class.viz::LocalSurfaceId", %"class.base::internal::flat_tree.598", %"class.absl::optional.611", %"class.viz::LocalSurfaceId", %"class.viz::ChildLocalSurfaceIdAllocator", i32, %"class.std::__1::unique_ptr.82", %"class.cc::PresentationTimeCallbackBuffer", i32, %"class.cc::FrameSequenceTrackerCollection", %"class.std::__1::unique_ptr.686", i8, i8, %"class.cc::AnimatedPaintWorkletTracker", %"class.cc::AverageLagTrackingManager", %"class.cc::DeJellyState", %"class.cc::EventsMetricsManager", %"class.std::__1::unique_ptr.764", %"class.cc::FrameRateEstimator", i8, i8, i8, %"class.base::WritableSharedMemoryMapping", %"class.base::MRUCache", %"class.cc::ThrottleDecider", %"class.std::__1::vector.807", %"class.base::WeakPtrFactory.814" }
%"class.cc::TileManagerClient" = type { i32 (...)** }
%"class.cc::LayerTreeFrameSinkClient" = type { i32 (...)** }
%"class.cc::BrowserControlsOffsetManagerClient" = type { i32 (...)** }
%"class.cc::ScrollbarAnimationControllerClient" = type { i32 (...)** }
%"class.cc::VideoFrameControllerClient" = type { i32 (...)** }
%"class.cc::MutatorHostClient" = type { i32 (...)** }
%"class.cc::ImageAnimationController::Client" = type { i32 (...)** }
%"class.cc::CompositorDelegateForInput" = type { i32 (...)** }
%"class.cc::LayerTreeHostImplClient" = type { i32 (...)** }
%"class.cc::LayerTreeHostSchedulingClient" = type { i32 (...)** }
%"class.cc::TaskRunnerProvider" = type { i32 (...)**, %class.scoped_refptr, %class.scoped_refptr }
%class.scoped_refptr = type { %"class.base::SingleThreadTaskRunner"* }
%"class.base::SingleThreadTaskRunner" = type { %"class.base::SequencedTaskRunner.base", [4 x i8] }
%"class.base::SequencedTaskRunner.base" = type { %"class.base::TaskRunner.base" }
%"class.base::TaskRunner.base" = type <{ i32 (...)**, %"class.base::RefCountedThreadSafe" }>
%"class.base::RefCountedThreadSafe" = type { %"class.base::subtle::RefCountedThreadSafeBase" }
%"class.base::subtle::RefCountedThreadSafeBase" = type { %"class.base::AtomicRefCount" }
%"class.base::AtomicRefCount" = type { %"struct.std::__1::atomic" }
%"struct.std::__1::atomic" = type { %"struct.std::__1::__atomic_base" }
%"struct.std::__1::__atomic_base" = type { %"struct.std::__1::__atomic_base.0" }
%"struct.std::__1::__atomic_base.0" = type { %"struct.std::__1::__cxx_atomic_impl" }
%"struct.std::__1::__cxx_atomic_impl" = type { %"struct.std::__1::__cxx_atomic_base_impl" }
%"struct.std::__1::__cxx_atomic_base_impl" = type { i32 }
%"class.cc::BeginFrameTracker" = type { %"class.base::Location", %"class.std::__1::basic_string", %"class.base::TimeTicks", %"struct.viz::BeginFrameArgs", %"class.base::TimeTicks" }
%"class.base::Location" = type { i8*, i8*, i32, i8* }
%"class.std::__1::basic_string" = type { %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" = type { %union.anon }
%union.anon = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" = type { i8*, i64, i64 }
%"struct.viz::BeginFrameArgs" = type { %"class.base::TimeTicks", %"class.base::TimeTicks", %"class.base::TimeDelta", %"struct.viz::BeginFrameId", i64, i32, i8, i8, i64 }
%"class.base::TimeDelta" = type { i64 }
%"struct.viz::BeginFrameId" = type { i64, i64 }
%"class.base::TimeTicks" = type { %"class.base::time_internal::TimeBase" }
%"class.base::time_internal::TimeBase" = type { i64 }
%"class.std::__1::unique_ptr" = type { %"class.std::__1::__compressed_pair.2" }
%"class.std::__1::__compressed_pair.2" = type { %"struct.std::__1::__compressed_pair_elem.3" }
%"struct.std::__1::__compressed_pair_elem.3" = type { %"class.cc::CompositorFrameReportingController"* }
%"class.cc::CompositorFrameReportingController" = type opaque
%"class.std::__1::unique_ptr.5" = type { %"class.std::__1::__compressed_pair.6" }
%"class.std::__1::__compressed_pair.6" = type { %"struct.std::__1::__compressed_pair_elem.7" }
%"struct.std::__1::__compressed_pair_elem.7" = type { %"class.cc::InputDelegateForCompositor"* }
%"class.cc::InputDelegateForCompositor" = type { i32 (...)** }
%"class.cc::LayerTreeSettings" = type <{ i32 (...)**, %"class.viz::ResourceSettings", i8, i8, i8, i8, [2 x i8], i32, i8, i8, i8, i8, i32, float, i8, i8, [2 x i8], i32, %"class.base::TimeDelta", %"class.base::TimeDelta", %"class.base::TimeDelta", i8, [3 x i8], i32, %"class.base::TimeDelta", i8, i8, [2 x i8], float, float, float, %"class.gfx::Size", %"class.gfx::Size", %"class.gfx::Size", i32, %"class.gfx::Size", i32, float, i32, i64, i8, i8, i8, [5 x i8], i64, i8, i8, [2 x i8], i32, %"struct.cc::ManagedMemoryPolicy", i64, i32, i8, i8, i8, i8, i64, i8, [7 x i8], %"class.cc::LayerTreeDebugState", i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, [6 x i8] }>
%"class.viz::ResourceSettings" = type { i8, i8 }
%"class.viz::ClientResourceProvider" = type { %"class.base::flat_map", %"class.viz::ResourceIdGenerator" }
%"class.base::flat_map" = type { %"class.base::internal::flat_tree" }
%"class.base::internal::flat_tree" = type { %"class.std::__1::vector" }
%"class.std::__1::vector" = type { %"class.std::__1::__vector_base" }
%"class.std::__1::__vector_base" = type { %"struct.std::__1::pair"*, %"struct.std::__1::pair"*, %"class.std::__1::__compressed_pair.11" }
%"struct.std::__1::pair" = type opaque
%"class.std::__1::__compressed_pair.11" = type { %"struct.std::__1::__compressed_pair_elem.12" }
%"struct.std::__1::__compressed_pair_elem.12" = type { %"struct.std::__1::pair"* }
%"class.viz::ResourceIdGenerator" = type { i32, i32 }
%"class.std::__1::unordered_map" = type { %"class.std::__1::__hash_table" }
%"class.std::__1::__hash_table" = type <{ %"class.std::__1::unique_ptr.16", %"class.std::__1::__compressed_pair.25", %"class.std::__1::__compressed_pair.30", %"class.std::__1::__compressed_pair.32", [4 x i8] }>
%"class.std::__1::unique_ptr.16" = type { %"class.std::__1::__compressed_pair.17" }
%"class.std::__1::__compressed_pair.17" = type { %"struct.std::__1::__compressed_pair_elem.18", %"struct.std::__1::__compressed_pair_elem.19" }
%"struct.std::__1::__compressed_pair_elem.18" = type { %"struct.std::__1::__hash_node_base"** }
%"struct.std::__1::__hash_node_base" = type { %"struct.std::__1::__hash_node_base"* }
%"struct.std::__1::__compressed_pair_elem.19" = type { %"class.std::__1::__bucket_list_deallocator" }
%"class.std::__1::__bucket_list_deallocator" = type { %"class.std::__1::__compressed_pair.20" }
%"class.std::__1::__compressed_pair.20" = type { %"struct.std::__1::__compressed_pair_elem.21" }
%"struct.std::__1::__compressed_pair_elem.21" = type { i64 }
%"class.std::__1::__compressed_pair.25" = type { %"struct.std::__1::__compressed_pair_elem.26" }
%"struct.std::__1::__compressed_pair_elem.26" = type { %"struct.std::__1::__hash_node_base" }
%"class.std::__1::__compressed_pair.30" = type { %"struct.std::__1::__compressed_pair_elem.21" }
%"class.std::__1::__compressed_pair.32" = type { %"struct.std::__1::__compressed_pair_elem.33" }
%"struct.std::__1::__compressed_pair_elem.33" = type { float }
%"class.std::__1::set" = type { %"class.std::__1::__tree" }
%"class.std::__1::__tree" = type { %"class.std::__1::__tree_end_node"*, %"class.std::__1::__compressed_pair.35", %"class.std::__1::__compressed_pair.40" }
%"class.std::__1::__tree_end_node" = type { %"class.std::__1::__tree_node_base"* }
%"class.std::__1::__tree_node_base" = type opaque
%"class.std::__1::__compressed_pair.35" = type { %"struct.std::__1::__compressed_pair_elem.36" }
%"struct.std::__1::__compressed_pair_elem.36" = type { %"class.std::__1::__tree_end_node" }
%"class.std::__1::__compressed_pair.40" = type { %"struct.std::__1::__compressed_pair_elem.21" }
%"class.cc::LayerTreeFrameSink" = type { %"class.viz::SharedBitmapReporter", %"class.viz::ContextLostObserver", %"class.cc::LayerTreeFrameSinkClient"*, %class.scoped_refptr.42, %class.scoped_refptr.43, %class.scoped_refptr, %"class.gpu::GpuMemoryBufferManager"*, %"class.std::__1::unique_ptr.44", i64, %"class.base::WeakPtrFactory" }
%"class.viz::SharedBitmapReporter" = type { i32 (...)** }
%"class.viz::ContextLostObserver" = type { i32 (...)** }
%class.scoped_refptr.42 = type { %"class.viz::ContextProvider"* }
%"class.viz::ContextProvider" = type { i32 (...)** }
%class.scoped_refptr.43 = type { %"class.viz::RasterContextProvider"* }
%"class.viz::RasterContextProvider" = type { i32 (...)** }
%"class.gpu::GpuMemoryBufferManager" = type opaque
%"class.std::__1::unique_ptr.44" = type { %"class.std::__1::__compressed_pair.45" }
%"class.std::__1::__compressed_pair.45" = type { %"struct.std::__1::__compressed_pair_elem.46" }
%"struct.std::__1::__compressed_pair_elem.46" = type { %"class.cc::LayerTreeFrameSink::ContextLostForwarder"* }
%"class.cc::LayerTreeFrameSink::ContextLostForwarder" = type opaque
%"class.base::WeakPtrFactory" = type { %"class.base::internal::WeakPtrFactoryBase" }
%"class.base::internal::WeakPtrFactoryBase" = type { %"class.base::internal::WeakReferenceOwner", i64 }
%"class.base::internal::WeakReferenceOwner" = type { %class.scoped_refptr.50 }
%class.scoped_refptr.50 = type { %"class.base::internal::WeakReference::Flag"* }
%"class.base::internal::WeakReference::Flag" = type <{ %"class.base::RefCountedThreadSafe.51", %"class.base::AtomicFlag", [3 x i8] }>
%"class.base::RefCountedThreadSafe.51" = type { %"class.base::subtle::RefCountedThreadSafeBase" }
%"class.base::AtomicFlag" = type { %"struct.std::__1::atomic.52" }
%"struct.std::__1::atomic.52" = type { %"struct.std::__1::__atomic_base.53" }
%"struct.std::__1::__atomic_base.53" = type { %"struct.std::__1::__atomic_base.54" }
%"struct.std::__1::__atomic_base.54" = type { %"struct.std::__1::__cxx_atomic_impl.55" }
%"struct.std::__1::__cxx_atomic_impl.55" = type { %"struct.std::__1::__cxx_atomic_base_impl.56" }
%"struct.std::__1::__cxx_atomic_base_impl.56" = type { i8 }
%"class.std::__1::unique_ptr.57" = type { %"class.std::__1::__compressed_pair.58" }
%"class.std::__1::__compressed_pair.58" = type { %"struct.std::__1::__compressed_pair_elem.59" }
%"struct.std::__1::__compressed_pair_elem.59" = type { %"class.viz::ContextCacheController::ScopedToken"* }
%"class.viz::ContextCacheController::ScopedToken" = type { i8 }
%"class.std::__1::unique_ptr.63" = type { %"class.std::__1::__compressed_pair.64" }
%"class.std::__1::__compressed_pair.64" = type { %"struct.std::__1::__compressed_pair_elem.65" }
%"struct.std::__1::__compressed_pair_elem.65" = type { %"class.cc::RasterBufferProvider"* }
%"class.cc::RasterBufferProvider" = type { i32 (...)** }
%"class.std::__1::unique_ptr.69" = type { %"class.std::__1::__compressed_pair.70" }
%"class.std::__1::__compressed_pair.70" = type { %"struct.std::__1::__compressed_pair_elem.71" }
%"struct.std::__1::__compressed_pair_elem.71" = type { %"class.cc::ResourcePool"* }
%"class.cc::ResourcePool" = type { %"class.base::trace_event::MemoryDumpProvider", %"class.viz::ClientResourceProvider"*, %"class.viz::ContextProvider"*, %class.scoped_refptr, %"class.base::TimeDelta", i8, i32, i64, i64, i64, i64, i64, i64, i8, i8, %"class.base::circular_deque", %"class.base::circular_deque", %"class.std::__1::map", %"class.std::__1::unique_ptr.82", %"class.base::TimeTicks", %"class.base::TickClock"*, %"class.base::WeakPtrFactory.90" }
%"class.base::trace_event::MemoryDumpProvider" = type { i32 (...)** }
%"class.base::circular_deque" = type { %"class.base::internal::VectorBuffer", i64, i64 }
%"class.base::internal::VectorBuffer" = type { %"class.std::__1::unique_ptr.72"*, i64 }
%"class.std::__1::unique_ptr.72" = type opaque
%"class.std::__1::map" = type { %"class.std::__1::__tree.73" }
%"class.std::__1::__tree.73" = type { %"class.std::__1::__tree_end_node"*, %"class.std::__1::__compressed_pair.74", %"class.std::__1::__compressed_pair.78" }
%"class.std::__1::__compressed_pair.74" = type { %"struct.std::__1::__compressed_pair_elem.36" }
%"class.std::__1::__compressed_pair.78" = type { %"struct.std::__1::__compressed_pair_elem.21" }
%"class.base::TickClock" = type { i32 (...)** }
%"class.base::WeakPtrFactory.90" = type { %"class.base::internal::WeakPtrFactoryBase" }
%"class.std::__1::unique_ptr.94" = type { %"class.std::__1::__compressed_pair.95" }
%"class.std::__1::__compressed_pair.95" = type { %"struct.std::__1::__compressed_pair_elem.96" }
%"struct.std::__1::__compressed_pair_elem.96" = type { %"class.cc::RasterQueryQueue"* }
%"class.cc::RasterQueryQueue" = type { i32 (...)**, %"class.viz::RasterContextProvider"*, i8, %"class.base::Lock", %"class.base::circular_deque.97" }
%"class.base::Lock" = type { %"class.base::internal::LockImpl" }
%"class.base::internal::LockImpl" = type { %union.pthread_mutex_t }
%union.pthread_mutex_t = type { %struct.__pthread_mutex_s }
%struct.__pthread_mutex_s = type { i32, i32, i32, i32, i32, i16, i16, %struct.__pthread_internal_list }
%struct.__pthread_internal_list = type { %struct.__pthread_internal_list*, %struct.__pthread_internal_list* }
%"class.base::circular_deque.97" = type { %"class.base::internal::VectorBuffer.98", i64, i64 }
%"class.base::internal::VectorBuffer.98" = type { %"struct.cc::RasterQuery"*, i64 }
%"struct.cc::RasterQuery" = type <{ i32, [4 x i8], %"class.base::TimeDelta", i32, [4 x i8], %"class.base::TimeTicks", i8, i8, [6 x i8] }>
%"class.std::__1::unique_ptr.102" = type { %"class.std::__1::__compressed_pair.103" }
%"class.std::__1::__compressed_pair.103" = type { %"struct.std::__1::__compressed_pair_elem.104" }
%"struct.std::__1::__compressed_pair_elem.104" = type { %"class.cc::ImageDecodeCache"* }
%"class.cc::ImageDecodeCache" = type { i32 (...)** }
%"class.cc::GlobalStateThatImpactsTilePriority" = type <{ i32, [4 x i8], i64, i64, i64, i32, [4 x i8] }>
%"class.std::__1::unique_ptr.108" = type { %"class.std::__1::__compressed_pair.109" }
%"class.std::__1::__compressed_pair.109" = type { %"struct.std::__1::__compressed_pair_elem.110" }
%"struct.std::__1::__compressed_pair_elem.110" = type { %"class.cc::LayerTreeImpl"* }
%"class.gfx::Vector2dF" = type { float, float }
%"class.cc::LayerTreeDebugState" = type <{ i8, [7 x i8], %"class.std::__1::bitset", i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i32, i8, i8, i8, i8, i8, i8, [2 x i8] }>
%"class.std::__1::bitset" = type { %"class.std::__1::__bitset" }
%"class.std::__1::__bitset" = type { i64 }
%"struct.cc::ManagedMemoryPolicy" = type { i64, i32, i64 }
%"class.cc::TileManager" = type { %"class.cc::CheckerImageTrackerClient", %"class.cc::TileManagerClient"*, %"class.base::SequencedTaskRunner"*, %"class.cc::ResourcePool"*, %"class.std::__1::unique_ptr.122", %"class.cc::RasterBufferProvider"*, %"class.cc::GlobalStateThatImpactsTilePriority", i64, %"struct.cc::TileManagerSettings", i8, i8, %"class.cc::RasterQueryQueue"*, %"class.std::__1::unordered_map.128", i8, [7 x i8], %"struct.cc::MemoryHistory::Entry", i8, i8, %"class.cc::ImageController", %"class.cc::DecodedImageTracker", %"class.cc::CheckerImageTracker", %"struct.cc::RasterTaskCompletionStats", %"struct.cc::TaskGraph", %"class.cc::UniqueNotifier", %"struct.cc::TileManager::Signals", %"class.cc::UniqueNotifier", i8, i64, i64, %"class.std::__1::unordered_set", i64, i64, i8, [7 x i8], %"class.std::__1::unordered_map.355", %"class.std::__1::vector.210", i32, %class.GURL, i8, %"class.base::internal::CancelableCallbackImpl", %"class.base::WaitableEvent", %"class.base::WeakPtrFactory.393", %"class.base::WeakPtrFactory.393" }
%"class.cc::CheckerImageTrackerClient" = type { i32 (...)** }
%"class.base::SequencedTaskRunner" = type { %"class.base::TaskRunner.base", [4 x i8] }
%"class.std::__1::unique_ptr.122" = type { %"class.std::__1::__compressed_pair.123" }
%"class.std::__1::__compressed_pair.123" = type { %"struct.std::__1::__compressed_pair_elem.124" }
%"struct.std::__1::__compressed_pair_elem.124" = type { %"class.cc::TileTaskManager"* }
%"class.cc::TileTaskManager" = type { i32 (...)** }
%"struct.cc::TileManagerSettings" = type { i8, i8, i64 }
%"class.std::__1::unordered_map.128" = type { %"class.std::__1::__hash_table.129" }
%"class.std::__1::__hash_table.129" = type <{ %"class.std::__1::unique_ptr.130", %"class.std::__1::__compressed_pair.140", %"class.std::__1::__compressed_pair.145", %"class.std::__1::__compressed_pair.150", [4 x i8] }>
%"class.std::__1::unique_ptr.130" = type { %"class.std::__1::__compressed_pair.131" }
%"class.std::__1::__compressed_pair.131" = type { %"struct.std::__1::__compressed_pair_elem.132", %"struct.std::__1::__compressed_pair_elem.134" }
%"struct.std::__1::__compressed_pair_elem.132" = type { %"struct.std::__1::__hash_node_base.133"** }
%"struct.std::__1::__hash_node_base.133" = type { %"struct.std::__1::__hash_node_base.133"* }
%"struct.std::__1::__compressed_pair_elem.134" = type { %"class.std::__1::__bucket_list_deallocator.135" }
%"class.std::__1::__bucket_list_deallocator.135" = type { %"class.std::__1::__compressed_pair.136" }
%"class.std::__1::__compressed_pair.136" = type { %"struct.std::__1::__compressed_pair_elem.21" }
%"class.std::__1::__compressed_pair.140" = type { %"struct.std::__1::__compressed_pair_elem.141" }
%"struct.std::__1::__compressed_pair_elem.141" = type { %"struct.std::__1::__hash_node_base.133" }
%"class.std::__1::__compressed_pair.145" = type { %"struct.std::__1::__compressed_pair_elem.21" }
%"class.std::__1::__compressed_pair.150" = type { %"struct.std::__1::__compressed_pair_elem.33" }
%"struct.cc::MemoryHistory::Entry" = type <{ i64, i64, i8, [7 x i8] }>
%"class.cc::ImageController" = type { i32 (...)**, %class.scoped_refptr.155, %"class.base::WeakPtr", %"class.cc::ImageDecodeCache"*, %"class.std::__1::vector.157", %"class.base::flat_map.187", %"class.base::SequencedTaskRunner"*, i64, %"class.base::Lock", %"class.std::__1::map.197", %"class.std::__1::map.197", i8, %"class.std::__1::vector.206", %"class.base::WeakPtrFactory.222" }
%class.scoped_refptr.155 = type { %"class.base::SequencedTaskRunner"* }
%"class.base::WeakPtr" = type { %"class.base::internal::WeakPtrBase" }
%"class.base::internal::WeakPtrBase" = type { %"class.base::internal::WeakReference", i64 }
%"class.base::internal::WeakReference" = type { %class.scoped_refptr.156 }
%class.scoped_refptr.156 = type { %"class.base::internal::WeakReference::Flag"* }
%"class.std::__1::vector.157" = type { %"class.std::__1::__vector_base.158" }
%"class.std::__1::__vector_base.158" = type { %"class.cc::DrawImage"*, %"class.cc::DrawImage"*, %"class.std::__1::__compressed_pair.182" }
%"class.cc::DrawImage" = type <{ %"class.cc::PaintImage", i8, [3 x i8], %struct.SkIRect, i32, %struct.SkSize, i8, [7 x i8], %"class.absl::optional", %"class.absl::optional.177", float, [4 x i8] }>
%"class.cc::PaintImage" = type { %class.sk_sp, %class.sk_sp.160, %"class.gfx::Rect", i32, %class.sk_sp.165, %class.sk_sp.173, i32, i32, i32, i32, i8, i8, i32, i32, %class.sk_sp, %class.scoped_refptr.174 }
%class.sk_sp.160 = type { %"class.cc::PaintOpBuffer"* }
%"class.cc::PaintOpBuffer" = type <{ %class.SkRefCnt.base, [4 x i8], %"class.std::__1::unique_ptr.161", i64, i64, i64, i64, i64, i32, i8, [3 x i8] }>
%class.SkRefCnt.base = type { %class.SkRefCntBase.base }
%class.SkRefCntBase.base = type <{ i32 (...)**, %"struct.std::__1::atomic" }>
%"class.std::__1::unique_ptr.161" = type { %"class.std::__1::__compressed_pair.162" }
%"class.std::__1::__compressed_pair.162" = type { %"struct.std::__1::__compressed_pair_elem.163" }
%"struct.std::__1::__compressed_pair_elem.163" = type { i8* }
%class.sk_sp.165 = type { %"class.cc::PaintImageGenerator"* }
%"class.cc::PaintImageGenerator" = type { %class.SkRefCnt.base, %struct.SkImageInfo, i32, %"class.std::__1::vector.166" }
%struct.SkImageInfo = type { %class.SkColorInfo, %struct.SkISize }
%class.SkColorInfo = type { %class.sk_sp.159, i32, i32 }
%class.sk_sp.159 = type { %class.SkColorSpace* }
%class.SkColorSpace = type <{ %class.SkNVRefCnt, i32, i32, %struct.skcms_TransferFunction, %struct.skcms_Matrix3x3, %struct.skcms_TransferFunction, %struct.skcms_Matrix3x3, %class.SkOnce, [3 x i8] }>
%class.SkNVRefCnt = type { %"struct.std::__1::atomic" }
%struct.skcms_TransferFunction = type { float, float, float, float, float, float, float }
%struct.skcms_Matrix3x3 = type { [3 x [3 x float]] }
%class.SkOnce = type { %"struct.std::__1::atomic.52" }
%struct.SkISize = type { i32, i32 }
%"class.std::__1::vector.166" = type { %"class.std::__1::__vector_base.167" }
%"class.std::__1::__vector_base.167" = type { %"struct.cc::FrameMetadata"*, %"struct.cc::FrameMetadata"*, %"class.std::__1::__compressed_pair.168" }
%"struct.cc::FrameMetadata" = type { i8, %"class.base::TimeDelta" }
%"class.std::__1::__compressed_pair.168" = type { %"struct.std::__1::__compressed_pair_elem.169" }
%"struct.std::__1::__compressed_pair_elem.169" = type { %"struct.cc::FrameMetadata"* }
%class.sk_sp.173 = type { %"class.cc::TextureBacking"* }
%"class.cc::TextureBacking" = type opaque
%class.sk_sp = type { %class.SkImage* }
%class.SkImage = type <{ %class.SkRefCnt.base, [4 x i8], %struct.SkImageInfo, i32, [4 x i8] }>
%class.scoped_refptr.174 = type { %"class.cc::PaintWorkletInput"* }
%"class.cc::PaintWorkletInput" = type <{ i32 (...)**, %"class.base::RefCountedThreadSafe.175", [4 x i8] }>
%"class.base::RefCountedThreadSafe.175" = type { %"class.base::subtle::RefCountedThreadSafeBase" }
%struct.SkIRect = type { i32, i32, i32, i32 }
%struct.SkSize = type { float, float }
%"class.absl::optional" = type { %"class.absl::optional_internal::optional_data" }
%"class.absl::optional_internal::optional_data" = type { %"class.absl::optional_internal::optional_data_base" }
%"class.absl::optional_internal::optional_data_base" = type { %"class.absl::optional_internal::optional_data_dtor_base" }
%"class.absl::optional_internal::optional_data_dtor_base" = type { i8, %union.anon.176 }
%union.anon.176 = type { i64 }
%"class.absl::optional.177" = type { %"class.absl::optional_internal::optional_data.178" }
%"class.absl::optional_internal::optional_data.178" = type { %"class.absl::optional_internal::optional_data_base.179" }
%"class.absl::optional_internal::optional_data_base.179" = type { %"class.absl::optional_internal::optional_data_dtor_base.180" }
%"class.absl::optional_internal::optional_data_dtor_base.180" = type { i8, %union.anon.181 }
%union.anon.181 = type { %"class.gfx::ColorSpace" }
%"class.gfx::ColorSpace" = type { i8, i8, i8, i8, [9 x float], [7 x float] }
%"class.std::__1::__compressed_pair.182" = type { %"struct.std::__1::__compressed_pair_elem.183" }
%"struct.std::__1::__compressed_pair_elem.183" = type { %"class.cc::DrawImage"* }
%"class.base::flat_map.187" = type { %"class.base::internal::flat_tree.188" }
%"class.base::internal::flat_tree.188" = type { %"class.std::__1::vector.189" }
%"class.std::__1::vector.189" = type { %"class.std::__1::__vector_base.190" }
%"class.std::__1::__vector_base.190" = type { %"struct.std::__1::pair.191"*, %"struct.std::__1::pair.191"*, %"class.std::__1::__compressed_pair.192" }
%"struct.std::__1::pair.191" = type opaque
%"class.std::__1::__compressed_pair.192" = type { %"struct.std::__1::__compressed_pair_elem.193" }
%"struct.std::__1::__compressed_pair_elem.193" = type { %"struct.std::__1::pair.191"* }
%"class.std::__1::map.197" = type { %"class.std::__1::__tree.198" }
%"class.std::__1::__tree.198" = type { %"class.std::__1::__tree_end_node"*, %"class.std::__1::__compressed_pair.199", %"class.std::__1::__compressed_pair.203" }
%"class.std::__1::__compressed_pair.199" = type { %"struct.std::__1::__compressed_pair_elem.36" }
%"class.std::__1::__compressed_pair.203" = type { %"struct.std::__1::__compressed_pair_elem.21" }
%"class.std::__1::vector.206" = type { %"class.std::__1::__vector_base.207" }
%"class.std::__1::__vector_base.207" = type { %"struct.cc::ImageController::ImageDecodeRequest"*, %"struct.cc::ImageController::ImageDecodeRequest"*, %"class.std::__1::__compressed_pair.217" }
%"struct.cc::ImageController::ImageDecodeRequest" = type <{ i64, %"class.cc::DrawImage", %"class.base::OnceCallback", %class.scoped_refptr.208, i8, [7 x i8] }>
%"class.base::OnceCallback" = type { %"class.base::internal::CallbackBase" }
%"class.base::internal::CallbackBase" = type { %class.scoped_refptr.85 }
%class.scoped_refptr.85 = type { %"class.base::internal::BindStateBase"* }
%"class.base::internal::BindStateBase" = type { %"class.base::RefCountedThreadSafe.86", void ()*, void (%"class.base::internal::BindStateBase"*)*, i1 (%"class.base::internal::BindStateBase"*, i32)* }
%"class.base::RefCountedThreadSafe.86" = type { %"class.base::subtle::RefCountedThreadSafeBase" }
%class.scoped_refptr.208 = type { %"class.cc::TileTask"* }
%"class.cc::TileTask" = type <{ %"class.cc::Task", i32, i32, %"class.std::__1::vector.210", i8, [7 x i8] }>
%"class.cc::Task" = type { i32 (...)**, %"class.base::RefCountedThreadSafe.209", %"class.cc::TaskState", i64 }
%"class.base::RefCountedThreadSafe.209" = type { %"class.base::subtle::RefCountedThreadSafeBase" }
%"class.cc::TaskState" = type { i16 }
%"class.std::__1::__compressed_pair.217" = type { %"struct.std::__1::__compressed_pair_elem.218" }
%"struct.std::__1::__compressed_pair_elem.218" = type { %"struct.cc::ImageController::ImageDecodeRequest"* }
%"class.base::WeakPtrFactory.222" = type { %"class.base::internal::WeakPtrFactoryBase" }
%"class.cc::DecodedImageTracker" = type { %"class.cc::ImageController"*, %"class.base::flat_map.223", i8, %class.scoped_refptr.155, %"class.base::TickClock"*, %"class.base::WeakPtrFactory.233" }
%"class.base::flat_map.223" = type { %"class.base::internal::flat_tree.224" }
%"class.base::internal::flat_tree.224" = type { %"class.std::__1::vector.225" }
%"class.std::__1::vector.225" = type { %"class.std::__1::__vector_base.226" }
%"class.std::__1::__vector_base.226" = type { %"struct.std::__1::pair.227"*, %"struct.std::__1::pair.227"*, %"class.std::__1::__compressed_pair.228" }
%"struct.std::__1::pair.227" = type { i32, %"class.std::__1::unique_ptr.1354" }
%"class.std::__1::unique_ptr.1354" = type { %"class.std::__1::__compressed_pair.1355" }
%"class.std::__1::__compressed_pair.1355" = type { %"struct.std::__1::__compressed_pair_elem.1356" }
%"struct.std::__1::__compressed_pair_elem.1356" = type { %"class.cc::DecodedImageTracker::ImageLock"* }
%"class.cc::DecodedImageTracker::ImageLock" = type { %"class.cc::DecodedImageTracker"*, i64, %"class.base::TimeTicks" }
%"class.std::__1::__compressed_pair.228" = type { %"struct.std::__1::__compressed_pair_elem.229" }
%"struct.std::__1::__compressed_pair_elem.229" = type { %"struct.std::__1::pair.227"* }
%"class.base::WeakPtrFactory.233" = type { %"class.base::internal::WeakPtrFactoryBase" }
%"class.cc::CheckerImageTracker" = type { %"class.cc::ImageController"*, %"class.cc::CheckerImageTrackerClient"*, i8, i64, i8, %"class.base::internal::flat_tree.234", %"class.base::internal::flat_tree.234", %"class.std::__1::vector.242", i32, %"class.absl::optional.249", %"class.std::__1::unordered_map.254", %"class.std::__1::unordered_map.278", %"class.base::flat_map.302", %"class.base::WeakPtrFactory.312" }
%"class.base::internal::flat_tree.234" = type { %"class.std::__1::vector.235" }
%"class.std::__1::vector.235" = type { %"class.std::__1::__vector_base.236" }
%"class.std::__1::__vector_base.236" = type { i32*, i32*, %"class.std::__1::__compressed_pair.237" }
%"class.std::__1::__compressed_pair.237" = type { %"struct.std::__1::__compressed_pair_elem.238" }
%"struct.std::__1::__compressed_pair_elem.238" = type { i32* }
%"class.std::__1::vector.242" = type { %"class.std::__1::__vector_base.243" }
%"class.std::__1::__vector_base.243" = type { %"struct.cc::CheckerImageTracker::ImageDecodeRequest"*, %"struct.cc::CheckerImageTracker::ImageDecodeRequest"*, %"class.std::__1::__compressed_pair.244" }
%"struct.cc::CheckerImageTracker::ImageDecodeRequest" = type <{ %"class.cc::PaintImage", i32, [4 x i8] }>
%"class.std::__1::__compressed_pair.244" = type { %"struct.std::__1::__compressed_pair_elem.245" }
%"struct.std::__1::__compressed_pair_elem.245" = type { %"struct.cc::CheckerImageTracker::ImageDecodeRequest"* }
%"class.absl::optional.249" = type { %"class.absl::optional_internal::optional_data.250" }
%"class.absl::optional_internal::optional_data.250" = type { %"class.absl::optional_internal::optional_data_base.251" }
%"class.absl::optional_internal::optional_data_base.251" = type { %"class.absl::optional_internal::optional_data_dtor_base.252" }
%"class.absl::optional_internal::optional_data_dtor_base.252" = type { i8, %union.anon.253 }
%union.anon.253 = type { %"class.cc::PaintImage" }
%"class.std::__1::unordered_map.254" = type { %"class.std::__1::__hash_table.255" }
%"class.std::__1::__hash_table.255" = type <{ %"class.std::__1::unique_ptr.256", %"class.std::__1::__compressed_pair.266", %"class.std::__1::__compressed_pair.271", %"class.std::__1::__compressed_pair.274", [4 x i8] }>
%"class.std::__1::unique_ptr.256" = type { %"class.std::__1::__compressed_pair.257" }
%"class.std::__1::__compressed_pair.257" = type { %"struct.std::__1::__compressed_pair_elem.258", %"struct.std::__1::__compressed_pair_elem.260" }
%"struct.std::__1::__compressed_pair_elem.258" = type { %"struct.std::__1::__hash_node_base.259"** }
%"struct.std::__1::__hash_node_base.259" = type { %"struct.std::__1::__hash_node_base.259"* }
%"struct.std::__1::__compressed_pair_elem.260" = type { %"class.std::__1::__bucket_list_deallocator.261" }
%"class.std::__1::__bucket_list_deallocator.261" = type { %"class.std::__1::__compressed_pair.262" }
%"class.std::__1::__compressed_pair.262" = type { %"struct.std::__1::__compressed_pair_elem.21" }
%"class.std::__1::__compressed_pair.266" = type { %"struct.std::__1::__compressed_pair_elem.267" }
%"struct.std::__1::__compressed_pair_elem.267" = type { %"struct.std::__1::__hash_node_base.259" }
%"class.std::__1::__compressed_pair.271" = type { %"struct.std::__1::__compressed_pair_elem.21" }
%"class.std::__1::__compressed_pair.274" = type { %"struct.std::__1::__compressed_pair_elem.33" }
%"class.std::__1::unordered_map.278" = type { %"class.std::__1::__hash_table.279" }
%"class.std::__1::__hash_table.279" = type <{ %"class.std::__1::unique_ptr.280", %"class.std::__1::__compressed_pair.290", %"class.std::__1::__compressed_pair.295", %"class.std::__1::__compressed_pair.298", [4 x i8] }>
%"class.std::__1::unique_ptr.280" = type { %"class.std::__1::__compressed_pair.281" }
%"class.std::__1::__compressed_pair.281" = type { %"struct.std::__1::__compressed_pair_elem.282", %"struct.std::__1::__compressed_pair_elem.284" }
%"struct.std::__1::__compressed_pair_elem.282" = type { %"struct.std::__1::__hash_node_base.283"** }
%"struct.std::__1::__hash_node_base.283" = type { %"struct.std::__1::__hash_node_base.283"* }
%"struct.std::__1::__compressed_pair_elem.284" = type { %"class.std::__1::__bucket_list_deallocator.285" }
%"class.std::__1::__bucket_list_deallocator.285" = type { %"class.std::__1::__compressed_pair.286" }
%"class.std::__1::__compressed_pair.286" = type { %"struct.std::__1::__compressed_pair_elem.21" }
%"class.std::__1::__compressed_pair.290" = type { %"struct.std::__1::__compressed_pair_elem.291" }
%"struct.std::__1::__compressed_pair_elem.291" = type { %"struct.std::__1::__hash_node_base.283" }
%"class.std::__1::__compressed_pair.295" = type { %"struct.std::__1::__compressed_pair_elem.21" }
%"class.std::__1::__compressed_pair.298" = type { %"struct.std::__1::__compressed_pair_elem.33" }
%"class.base::flat_map.302" = type { %"class.base::internal::flat_tree.303" }
%"class.base::internal::flat_tree.303" = type { %"class.std::__1::vector.304" }
%"class.std::__1::vector.304" = type { %"class.std::__1::__vector_base.305" }
%"class.std::__1::__vector_base.305" = type { %"struct.std::__1::pair.306"*, %"struct.std::__1::pair.306"*, %"class.std::__1::__compressed_pair.307" }
%"struct.std::__1::pair.306" = type { i32, i32 }
%"class.std::__1::__compressed_pair.307" = type { %"struct.std::__1::__compressed_pair_elem.308" }
%"struct.std::__1::__compressed_pair_elem.308" = type { %"struct.std::__1::pair.306"* }
%"class.base::WeakPtrFactory.312" = type { %"class.base::internal::WeakPtrFactoryBase" }
%"struct.cc::RasterTaskCompletionStats" = type { i64, i64 }
%"struct.cc::TaskGraph" = type { %"class.std::__1::vector.313", %"class.std::__1::vector.321" }
%"class.std::__1::vector.313" = type { %"class.std::__1::__vector_base.314" }
%"class.std::__1::__vector_base.314" = type { %"struct.cc::TaskGraph::Node"*, %"struct.cc::TaskGraph::Node"*, %"class.std::__1::__compressed_pair.316" }
%"struct.cc::TaskGraph::Node" = type { %class.scoped_refptr.315, i16, i16, i32 }
%class.scoped_refptr.315 = type { %"class.cc::Task"* }
%"class.std::__1::__compressed_pair.316" = type { %"struct.std::__1::__compressed_pair_elem.317" }
%"struct.std::__1::__compressed_pair_elem.317" = type { %"struct.cc::TaskGraph::Node"* }
%"class.std::__1::vector.321" = type { %"class.std::__1::__vector_base.322" }
%"class.std::__1::__vector_base.322" = type { %"struct.cc::TaskGraph::Edge"*, %"struct.cc::TaskGraph::Edge"*, %"class.std::__1::__compressed_pair.323" }
%"struct.cc::TaskGraph::Edge" = type { %"class.cc::Task"*, %"class.cc::Task"* }
%"class.std::__1::__compressed_pair.323" = type { %"struct.std::__1::__compressed_pair_elem.324" }
%"struct.std::__1::__compressed_pair_elem.324" = type { %"struct.cc::TaskGraph::Edge"* }
%"struct.cc::TileManager::Signals" = type { i8, i8, i8, i8, i8, i8, i8, i8 }
%"class.cc::UniqueNotifier" = type { %"class.base::SequencedTaskRunner"*, %"class.base::RepeatingCallback.328", %"class.base::Lock", i8, %"class.base::WeakPtrFactory.329" }
%"class.base::WeakPtrFactory.329" = type { %"class.base::internal::WeakPtrFactoryBase" }
%"class.std::__1::unordered_set" = type { %"class.std::__1::__hash_table.330" }
%"class.std::__1::__hash_table.330" = type <{ %"class.std::__1::unique_ptr.331", %"class.std::__1::__compressed_pair.341", %"class.std::__1::__compressed_pair.346", %"class.std::__1::__compressed_pair.350", [4 x i8] }>
%"class.std::__1::unique_ptr.331" = type { %"class.std::__1::__compressed_pair.332" }
%"class.std::__1::__compressed_pair.332" = type { %"struct.std::__1::__compressed_pair_elem.333", %"struct.std::__1::__compressed_pair_elem.335" }
%"struct.std::__1::__compressed_pair_elem.333" = type { %"struct.std::__1::__hash_node_base.334"** }
%"struct.std::__1::__hash_node_base.334" = type { %"struct.std::__1::__hash_node_base.334"* }
%"struct.std::__1::__compressed_pair_elem.335" = type { %"class.std::__1::__bucket_list_deallocator.336" }
%"class.std::__1::__bucket_list_deallocator.336" = type { %"class.std::__1::__compressed_pair.337" }
%"class.std::__1::__compressed_pair.337" = type { %"struct.std::__1::__compressed_pair_elem.21" }
%"class.std::__1::__compressed_pair.341" = type { %"struct.std::__1::__compressed_pair_elem.342" }
%"struct.std::__1::__compressed_pair_elem.342" = type { %"struct.std::__1::__hash_node_base.334" }
%"class.std::__1::__compressed_pair.346" = type { %"struct.std::__1::__compressed_pair_elem.21" }
%"class.std::__1::__compressed_pair.350" = type { %"struct.std::__1::__compressed_pair_elem.33" }
%"class.std::__1::unordered_map.355" = type { %"class.std::__1::__hash_table.356" }
%"class.std::__1::__hash_table.356" = type <{ %"class.std::__1::unique_ptr.357", %"class.std::__1::__compressed_pair.367", %"class.std::__1::__compressed_pair.372", %"class.std::__1::__compressed_pair.375", [4 x i8] }>
%"class.std::__1::unique_ptr.357" = type { %"class.std::__1::__compressed_pair.358" }
%"class.std::__1::__compressed_pair.358" = type { %"struct.std::__1::__compressed_pair_elem.359", %"struct.std::__1::__compressed_pair_elem.361" }
%"struct.std::__1::__compressed_pair_elem.359" = type { %"struct.std::__1::__hash_node_base.360"** }
%"struct.std::__1::__hash_node_base.360" = type { %"struct.std::__1::__hash_node_base.360"* }
%"struct.std::__1::__compressed_pair_elem.361" = type { %"class.std::__1::__bucket_list_deallocator.362" }
%"class.std::__1::__bucket_list_deallocator.362" = type { %"class.std::__1::__compressed_pair.363" }
%"class.std::__1::__compressed_pair.363" = type { %"struct.std::__1::__compressed_pair_elem.21" }
%"class.std::__1::__compressed_pair.367" = type { %"struct.std::__1::__compressed_pair_elem.368" }
%"struct.std::__1::__compressed_pair_elem.368" = type { %"struct.std::__1::__hash_node_base.360" }
%"class.std::__1::__compressed_pair.372" = type { %"struct.std::__1::__compressed_pair_elem.21" }
%"class.std::__1::__compressed_pair.375" = type { %"struct.std::__1::__compressed_pair_elem.33" }
%"class.std::__1::vector.210" = type { %"class.std::__1::__vector_base.211" }
%"class.std::__1::__vector_base.211" = type { %class.scoped_refptr.208*, %class.scoped_refptr.208*, %"class.std::__1::__compressed_pair.212" }
%"class.std::__1::__compressed_pair.212" = type { %"struct.std::__1::__compressed_pair_elem.213" }
%"struct.std::__1::__compressed_pair_elem.213" = type { %class.scoped_refptr.208* }
%class.GURL = type { %"class.std::__1::basic_string", i8, %"struct.url::Parsed", %"class.std::__1::unique_ptr.379" }
%"struct.url::Parsed" = type { %"struct.url::Component", %"struct.url::Component", %"struct.url::Component", %"struct.url::Component", %"struct.url::Component", %"struct.url::Component", %"struct.url::Component", %"struct.url::Component", i8, %"struct.url::Parsed"* }
%"struct.url::Component" = type { i32, i32 }
%"class.std::__1::unique_ptr.379" = type { %"class.std::__1::__compressed_pair.380" }
%"class.std::__1::__compressed_pair.380" = type { %"struct.std::__1::__compressed_pair_elem.381" }
%"struct.std::__1::__compressed_pair_elem.381" = type { %class.GURL* }
%"class.base::internal::CancelableCallbackImpl" = type { %"class.base::OnceCallback.385", %"class.base::WeakPtrFactory.386" }
%"class.base::OnceCallback.385" = type { %"class.base::internal::CallbackBase" }
%"class.base::WeakPtrFactory.386" = type { %"class.base::internal::WeakPtrFactoryBase" }
%"class.base::WaitableEvent" = type <{ %class.scoped_refptr.387, i8, [7 x i8] }>
%class.scoped_refptr.387 = type { %"struct.base::WaitableEvent::WaitableEventKernel"* }
%"struct.base::WaitableEvent::WaitableEventKernel" = type { %"class.base::RefCountedThreadSafe.388", %"class.base::Lock", i8, i8, %"class.std::__1::list" }
%"class.base::RefCountedThreadSafe.388" = type { %"class.base::subtle::RefCountedThreadSafeBase" }
%"class.std::__1::list" = type { %"class.std::__1::__list_imp" }
%"class.std::__1::__list_imp" = type { %"struct.std::__1::__list_node_base", %"class.std::__1::__compressed_pair.389" }
%"struct.std::__1::__list_node_base" = type { %"struct.std::__1::__list_node_base"*, %"struct.std::__1::__list_node_base"* }
%"class.std::__1::__compressed_pair.389" = type { %"struct.std::__1::__compressed_pair_elem.21" }
%"class.base::WeakPtrFactory.393" = type { %"class.base::internal::WeakPtrFactoryBase" }
%"class.std::__1::unique_ptr.394" = type { %"class.std::__1::__compressed_pair.395" }
%"class.std::__1::__compressed_pair.395" = type { %"struct.std::__1::__compressed_pair_elem.396" }
%"struct.std::__1::__compressed_pair_elem.396" = type { %"class.cc::BrowserControlsOffsetManager"* }
%"class.cc::BrowserControlsOffsetManager" = type { i32 (...)**, %"class.cc::BrowserControlsOffsetManagerClient"*, i32, float, float, float, float, float, i8, i8, [2 x i8], %"struct.cc::BrowserControlsParams", i8, i8, float, float, %"class.absl::optional.397", %"class.absl::optional.397", [4 x i8], %"class.cc::BrowserControlsOffsetManager::Animation", %"class.cc::BrowserControlsOffsetManager::Animation" }
%"class.absl::optional.397" = type { %"class.absl::optional_internal::optional_data.398" }
%"class.absl::optional_internal::optional_data.398" = type { %"class.absl::optional_internal::optional_data_base.399" }
%"class.absl::optional_internal::optional_data_base.399" = type { %"class.absl::optional_internal::optional_data_dtor_base.400" }
%"class.absl::optional_internal::optional_data_dtor_base.400" = type { i8, %union.anon.401 }
%union.anon.401 = type { %"struct.std::__1::pair.402" }
%"struct.std::__1::pair.402" = type { float, float }
%"class.cc::BrowserControlsOffsetManager::Animation" = type <{ i8, i8, [2 x i8], i32, %"class.base::TimeTicks", %"class.base::TimeTicks", %"class.base::TimeDelta", float, float, float, float, i8, [7 x i8] }>
%"class.std::__1::unique_ptr.406" = type { %"class.std::__1::__compressed_pair.407" }
%"class.std::__1::__compressed_pair.407" = type { %"struct.std::__1::__compressed_pair_elem.408" }
%"struct.std::__1::__compressed_pair_elem.408" = type { %"class.cc::PageScaleAnimation"* }
%"class.cc::PageScaleAnimation" = type opaque
%"class.cc::DroppedFrameCounter" = type { %"class.base::TimeDelta", %"class.std::__1::queue", i32, double, %"class.cc::DroppedFrameCounter::SlidingWindowHistogram", %"class.base::TimeTicks", %"class.base::TimeDelta", %"class.base::RingBuffer", i64, i64, i64, i64, i8, double, %"class.absl::optional.422", %"class.absl::optional.422", %"class.absl::optional.422", %"class.base::TimeTicks", %"class.base::TimeDelta", %"struct.cc::SharedMetricsBuffer"*, %"class.cc::FrameSorter", %"class.cc::TotalFrameCounter"*, %struct.anon.441, %"class.absl::optional.442", %"class.std::__1::map.447" }
%"class.std::__1::queue" = type { %"class.std::__1::deque" }
%"class.std::__1::deque" = type { %"class.std::__1::__deque_base" }
%"class.std::__1::__deque_base" = type { %"struct.std::__1::__split_buffer", i64, %"class.std::__1::__compressed_pair.418" }
%"struct.std::__1::__split_buffer" = type { %"struct.std::__1::pair.412"**, %"struct.std::__1::pair.412"**, %"struct.std::__1::pair.412"**, %"class.std::__1::__compressed_pair.413" }
%"struct.std::__1::pair.412" = type opaque
%"class.std::__1::__compressed_pair.413" = type { %"struct.std::__1::__compressed_pair_elem.414" }
%"struct.std::__1::__compressed_pair_elem.414" = type { %"struct.std::__1::pair.412"** }
%"class.std::__1::__compressed_pair.418" = type { %"struct.std::__1::__compressed_pair_elem.21" }
%"class.cc::DroppedFrameCounter::SlidingWindowHistogram" = type { [101 x i32], i32 }
%"class.base::RingBuffer" = type { [180 x i32], i64 }
%"class.absl::optional.422" = type { %"class.absl::optional_internal::optional_data.423" }
%"class.absl::optional_internal::optional_data.423" = type { %"class.absl::optional_internal::optional_data_base.424" }
%"class.absl::optional_internal::optional_data_base.424" = type { %"class.absl::optional_internal::optional_data_dtor_base.425" }
%"class.absl::optional_internal::optional_data_dtor_base.425" = type { i8, %union.anon.426 }
%union.anon.426 = type { double }
%"struct.cc::SharedMetricsBuffer" = type opaque
%"class.cc::FrameSorter" = type { i64, %"class.base::RepeatingCallback.427", %"class.base::circular_deque.428", %"class.std::__1::map.430", %"class.absl::optional" }
%"class.base::RepeatingCallback.427" = type { %"class.base::internal::CallbackBaseCopyable" }
%"class.base::internal::CallbackBaseCopyable" = type { %"class.base::internal::CallbackBase" }
%"class.base::circular_deque.428" = type { %"class.base::internal::VectorBuffer.429", i64, i64 }
%"class.base::internal::VectorBuffer.429" = type { %"struct.viz::BeginFrameArgs"*, i64 }
%"class.std::__1::map.430" = type { %"class.std::__1::__tree.431" }
%"class.std::__1::__tree.431" = type { %"class.std::__1::__tree_end_node"*, %"class.std::__1::__compressed_pair.432", %"class.std::__1::__compressed_pair.436" }
%"class.std::__1::__compressed_pair.432" = type { %"struct.std::__1::__compressed_pair_elem.36" }
%"class.std::__1::__compressed_pair.436" = type { %"struct.std::__1::__compressed_pair_elem.21" }
%struct.anon.441 = type { double, double }
%"class.absl::optional.442" = type { %"class.absl::optional_internal::optional_data.443" }
%"class.absl::optional_internal::optional_data.443" = type { %"class.absl::optional_internal::optional_data_base.444" }
%"class.absl::optional_internal::optional_data_base.444" = type { %"class.absl::optional_internal::optional_data_dtor_base.445" }
%"class.absl::optional_internal::optional_data_dtor_base.445" = type { i8, %union.anon.446 }
%union.anon.446 = type { %"struct.cc::DroppedFrameCounter::ScrollStartInfo" }
%"struct.cc::DroppedFrameCounter::ScrollStartInfo" = type { %"class.base::TimeTicks", %"struct.viz::BeginFrameId" }
%"class.std::__1::map.447" = type { %"class.std::__1::__tree.448" }
%"class.std::__1::__tree.448" = type { %"class.std::__1::__tree_end_node"*, %"class.std::__1::__compressed_pair.449", %"class.std::__1::__compressed_pair.453" }
%"class.std::__1::__compressed_pair.449" = type { %"struct.std::__1::__compressed_pair_elem.36" }
%"class.std::__1::__compressed_pair.453" = type { %"struct.std::__1::__compressed_pair_elem.21" }
%"class.cc::TotalFrameCounter" = type { i64, %"class.base::TimeDelta", %"class.base::TimeTicks" }
%"class.std::__1::unique_ptr.456" = type { %"class.std::__1::__compressed_pair.457" }
%"class.std::__1::__compressed_pair.457" = type { %"struct.std::__1::__compressed_pair_elem.458" }
%"struct.std::__1::__compressed_pair_elem.458" = type { %"class.cc::MemoryHistory"* }
%"class.cc::MemoryHistory" = type { %"class.base::RingBuffer.459" }
%"class.base::RingBuffer.459" = type { [80 x %"struct.cc::MemoryHistory::Entry"], i64 }
%"class.std::__1::unique_ptr.463" = type { %"class.std::__1::__compressed_pair.464" }
%"class.std::__1::__compressed_pair.464" = type { %"struct.std::__1::__compressed_pair_elem.465" }
%"struct.std::__1::__compressed_pair_elem.465" = type { %"class.cc::DebugRectHistory"* }
%"class.cc::DebugRectHistory" = type opaque
%"class.std::__1::unique_ptr.469" = type { %"class.std::__1::__compressed_pair.470" }
%"class.std::__1::__compressed_pair.470" = type { %"struct.std::__1::__compressed_pair_elem.471" }
%"struct.std::__1::__compressed_pair_elem.471" = type { %"class.cc::MutatorHost"* }
%"class.cc::MutatorHost" = type { i32 (...)** }
%"class.std::__1::unique_ptr.475" = type { %"class.std::__1::__compressed_pair.476" }
%"class.std::__1::__compressed_pair.476" = type { %"struct.std::__1::__compressed_pair_elem.477" }
%"struct.std::__1::__compressed_pair_elem.477" = type { %"class.cc::MutatorEvents"* }
%"class.cc::MutatorEvents" = type { i32 (...)** }
%"class.std::__1::set.481" = type { %"class.std::__1::__tree.482" }
%"class.std::__1::__tree.482" = type { %"class.std::__1::__tree_end_node"*, %"class.std::__1::__compressed_pair.483", %"class.std::__1::__compressed_pair.487" }
%"class.std::__1::__compressed_pair.483" = type { %"struct.std::__1::__compressed_pair_elem.36" }
%"class.std::__1::__compressed_pair.487" = type { %"struct.std::__1::__compressed_pair_elem.21" }
%"class.cc::RasterDarkModeFilter" = type opaque
%"class.std::__1::unordered_map.491" = type { %"class.std::__1::__hash_table.492" }
%"class.std::__1::__hash_table.492" = type <{ %"class.std::__1::unique_ptr.493", %"class.std::__1::__compressed_pair.503", %"class.std::__1::__compressed_pair.508", %"class.std::__1::__compressed_pair.511", [4 x i8] }>
%"class.std::__1::unique_ptr.493" = type { %"class.std::__1::__compressed_pair.494" }
%"class.std::__1::__compressed_pair.494" = type { %"struct.std::__1::__compressed_pair_elem.495", %"struct.std::__1::__compressed_pair_elem.497" }
%"struct.std::__1::__compressed_pair_elem.495" = type { %"struct.std::__1::__hash_node_base.496"** }
%"struct.std::__1::__hash_node_base.496" = type { %"struct.std::__1::__hash_node_base.496"* }
%"struct.std::__1::__compressed_pair_elem.497" = type { %"class.std::__1::__bucket_list_deallocator.498" }
%"class.std::__1::__bucket_list_deallocator.498" = type { %"class.std::__1::__compressed_pair.499" }
%"class.std::__1::__compressed_pair.499" = type { %"struct.std::__1::__compressed_pair_elem.21" }
%"class.std::__1::__compressed_pair.503" = type { %"struct.std::__1::__compressed_pair_elem.504" }
%"struct.std::__1::__compressed_pair_elem.504" = type { %"struct.std::__1::__hash_node_base.496" }
%"class.std::__1::__compressed_pair.508" = type { %"struct.std::__1::__compressed_pair_elem.21" }
%"class.std::__1::__compressed_pair.511" = type { %"struct.std::__1::__compressed_pair_elem.33" }
%"class.cc::RenderingStatsInstrumentation" = type { i32 (...)**, %"struct.cc::RenderingStats", i8, %"class.base::Lock" }
%"struct.cc::RenderingStats" = type { i64, i64, i64, i64, i64, i64, %"class.cc::RenderingStats::TimeDeltaList", %"class.cc::RenderingStats::TimeDeltaList", %"class.cc::RenderingStats::TimeDeltaList", %"class.cc::RenderingStats::TimeDeltaList", %"class.cc::RenderingStats::TimeDeltaList" }
%"class.cc::RenderingStats::TimeDeltaList" = type { %"class.std::__1::vector.517" }
%"class.std::__1::vector.517" = type { %"class.std::__1::__vector_base.518" }
%"class.std::__1::__vector_base.518" = type { %"class.base::TimeDelta"*, %"class.base::TimeDelta"*, %"class.std::__1::__compressed_pair.519" }
%"class.std::__1::__compressed_pair.519" = type { %"struct.std::__1::__compressed_pair_elem.520" }
%"struct.std::__1::__compressed_pair_elem.520" = type { %"class.base::TimeDelta"* }
%"class.cc::MicroBenchmarkControllerImpl" = type { %"class.cc::LayerTreeHostImpl"*, %"class.std::__1::vector.524" }
%"class.std::__1::vector.524" = type { %"class.std::__1::__vector_base.525" }
%"class.std::__1::__vector_base.525" = type { %"class.std::__1::unique_ptr.526"*, %"class.std::__1::unique_ptr.526"*, %"class.std::__1::__compressed_pair.527" }
%"class.std::__1::unique_ptr.526" = type opaque
%"class.std::__1::__compressed_pair.527" = type { %"struct.std::__1::__compressed_pair_elem.528" }
%"struct.std::__1::__compressed_pair_elem.528" = type { %"class.std::__1::unique_ptr.526"* }
%"class.std::__1::unique_ptr.532" = type { %"class.std::__1::__compressed_pair.533" }
%"class.std::__1::__compressed_pair.533" = type { %"struct.std::__1::__compressed_pair_elem.534" }
%"struct.std::__1::__compressed_pair_elem.534" = type { %"class.cc::SynchronousTaskGraphRunner"* }
%"class.cc::SynchronousTaskGraphRunner" = type opaque
%"class.base::RepeatingCallback.328" = type { %"class.base::internal::CallbackBaseCopyable" }
%"class.cc::TaskGraphRunner" = type { i32 (...)** }
%"class.std::__1::set.538" = type { %"class.std::__1::__tree.539" }
%"class.std::__1::__tree.539" = type { %"class.std::__1::__tree_end_node"*, %"class.std::__1::__compressed_pair.540", %"class.std::__1::__compressed_pair.544" }
%"class.std::__1::__compressed_pair.540" = type { %"struct.std::__1::__compressed_pair_elem.36" }
%"class.std::__1::__compressed_pair.544" = type { %"struct.std::__1::__compressed_pair_elem.21" }
%"class.std::__1::unique_ptr.548" = type { %"class.std::__1::__compressed_pair.549" }
%"class.std::__1::__compressed_pair.549" = type { %"struct.std::__1::__compressed_pair_elem.550" }
%"struct.std::__1::__compressed_pair_elem.550" = type { %"class.cc::Viewport"* }
%"class.cc::Viewport" = type opaque
%"class.std::__1::unique_ptr.554" = type { %"class.std::__1::__compressed_pair.555" }
%"class.std::__1::__compressed_pair.555" = type { %"struct.std::__1::__compressed_pair_elem.556" }
%"struct.std::__1::__compressed_pair_elem.556" = type { %"class.cc::PendingTreeRasterDurationHistogramTimer"* }
%"class.cc::PendingTreeRasterDurationHistogramTimer" = type opaque
%"class.std::__1::vector.560" = type { %"class.std::__1::__vector_base.561" }
%"class.std::__1::__vector_base.561" = type { %"struct.std::__1::pair.562"*, %"struct.std::__1::pair.562"*, %"class.std::__1::__compressed_pair.563" }
%"struct.std::__1::pair.562" = type opaque
%"class.std::__1::__compressed_pair.563" = type { %"struct.std::__1::__compressed_pair_elem.564" }
%"struct.std::__1::__compressed_pair_elem.564" = type { %"struct.std::__1::pair.562"* }
%"class.cc::ImageAnimationController" = type <{ %"class.base::flat_map.568", %"class.base::internal::flat_tree.234", %"class.base::internal::flat_tree.234", %"class.cc::ImageAnimationController::InvalidationScheduler", i8, i8, i8, [5 x i8] }>
%"class.base::flat_map.568" = type { %"class.base::internal::flat_tree.569" }
%"class.base::internal::flat_tree.569" = type { %"class.std::__1::vector.570" }
%"class.std::__1::vector.570" = type { %"class.std::__1::__vector_base.571" }
%"class.std::__1::__vector_base.571" = type { %"struct.std::__1::pair.572"*, %"struct.std::__1::pair.572"*, %"class.std::__1::__compressed_pair.573" }
%"struct.std::__1::pair.572" = type { i32, %"class.cc::ImageAnimationController::AnimationState" }
%"class.cc::ImageAnimationController::AnimationState" = type { i32, %"class.std::__1::vector.166", i32, %"struct.cc::ImageAnimationController::AnimationState::AnimationAdvancementState", %"class.base::internal::flat_tree.1360", i64, i8, i8, %"class.base::TimeTicks", i32, i32, i64 }
%"struct.cc::ImageAnimationController::AnimationState::AnimationAdvancementState" = type { i64, %"class.base::TimeTicks", %"class.base::TimeTicks", i32, i64 }
%"class.base::internal::flat_tree.1360" = type { %"class.std::__1::vector.1361" }
%"class.std::__1::vector.1361" = type { %"class.std::__1::__vector_base.1362" }
%"class.std::__1::__vector_base.1362" = type { %"class.cc::ImageAnimationController::AnimationDriver"**, %"class.cc::ImageAnimationController::AnimationDriver"**, %"class.std::__1::__compressed_pair.1363" }
%"class.cc::ImageAnimationController::AnimationDriver" = type { i32 (...)** }
%"class.std::__1::__compressed_pair.1363" = type { %"struct.std::__1::__compressed_pair_elem.1364" }
%"struct.std::__1::__compressed_pair_elem.1364" = type { %"class.cc::ImageAnimationController::AnimationDriver"** }
%"class.std::__1::__compressed_pair.573" = type { %"struct.std::__1::__compressed_pair_elem.574" }
%"struct.std::__1::__compressed_pair_elem.574" = type { %"struct.std::__1::pair.572"* }
%"class.cc::ImageAnimationController::InvalidationScheduler" = type { %"class.base::SingleThreadTaskRunner"*, %"class.cc::ImageAnimationController::Client"*, %"class.base::RepeatingCallback.578", i32, %"class.base::TimeTicks", %"class.base::WeakPtrFactory.579" }
%"class.base::RepeatingCallback.578" = type { %"class.base::internal::CallbackBaseCopyable" }
%"class.base::WeakPtrFactory.579" = type { %"class.base::internal::WeakPtrFactoryBase" }
%"class.std::__1::unique_ptr.580" = type { %"class.std::__1::__compressed_pair.581" }
%"class.std::__1::__compressed_pair.581" = type { %"struct.std::__1::__compressed_pair_elem.582" }
%"struct.std::__1::__compressed_pair_elem.582" = type { %"class.cc::UkmManager"* }
%"class.cc::UkmManager" = type { i8, i64, i64, i64, i64, i64, i32, i64, %"class.std::__1::unique_ptr.583" }
%"class.std::__1::unique_ptr.583" = type { %"class.std::__1::__compressed_pair.584" }
%"class.std::__1::__compressed_pair.584" = type { %"struct.std::__1::__compressed_pair_elem.585" }
%"struct.std::__1::__compressed_pair_elem.585" = type { %"class.ukm::UkmRecorder"* }
%"class.ukm::UkmRecorder" = type opaque
%"class.std::__1::unique_ptr.592" = type { %"class.std::__1::__compressed_pair.593" }
%"class.std::__1::__compressed_pair.593" = type { %"struct.std::__1::__compressed_pair_elem.594" }
%"struct.std::__1::__compressed_pair_elem.594" = type { %"class.cc::RenderFrameMetadataObserver"* }
%"class.cc::RenderFrameMetadataObserver" = type opaque
%"class.viz::FrameTokenGenerator" = type { i32 }
%"class.absl::optional.611" = type { %"class.absl::optional_internal::optional_data.612" }
%"class.absl::optional_internal::optional_data.612" = type { %"class.absl::optional_internal::optional_data_base.613" }
%"class.absl::optional_internal::optional_data_base.613" = type { %"class.absl::optional_internal::optional_data_dtor_base.614" }
%"class.absl::optional_internal::optional_data_dtor_base.614" = type { i8, [7 x i8], %union.anon.615 }
%union.anon.615 = type { %"class.cc::RenderFrameMetadata" }
%"class.cc::RenderFrameMetadata" = type <{ i8, [3 x i8], i32, %"class.absl::optional.616", %"struct.viz::Selection", i8, %"class.absl::optional.621", i8, float, %"class.gfx::Size", [4 x i8], %"class.absl::optional.626", float, float, float, float, i32, [4 x i8] }>
%"class.absl::optional.616" = type { %"class.absl::optional_internal::optional_data.617" }
%"class.absl::optional_internal::optional_data.617" = type { %"class.absl::optional_internal::optional_data_base.618" }
%"class.absl::optional_internal::optional_data_base.618" = type { %"class.absl::optional_internal::optional_data_dtor_base.619" }
%"class.absl::optional_internal::optional_data_dtor_base.619" = type { i8, %union.anon.620 }
%union.anon.620 = type { %"class.gfx::Vector2dF" }
%"struct.viz::Selection" = type { %"class.gfx::SelectionBound", %"class.gfx::SelectionBound" }
%"class.gfx::SelectionBound" = type <{ i32, %"class.gfx::PointF", %"class.gfx::PointF", %"class.gfx::PointF", %"class.gfx::PointF", %"class.gfx::Point", %"class.gfx::Point", i8, [3 x i8] }>
%"class.gfx::PointF" = type { float, float }
%"class.absl::optional.621" = type { %"class.absl::optional_internal::optional_data.622" }
%"class.absl::optional_internal::optional_data.622" = type { %"class.absl::optional_internal::optional_data_base.623" }
%"class.absl::optional_internal::optional_data_base.623" = type { %"class.absl::optional_internal::optional_data_dtor_base.624" }
%"class.absl::optional_internal::optional_data_dtor_base.624" = type { i8, %union.anon.625 }
%union.anon.625 = type { %"struct.cc::DelegatedInkBrowserMetadata" }
%"struct.cc::DelegatedInkBrowserMetadata" = type { i8 }
%"class.absl::optional.626" = type { %"class.absl::optional_internal::optional_data.627" }
%"class.absl::optional_internal::optional_data.627" = type { %"class.absl::optional_internal::optional_data_base.628" }
%"class.absl::optional_internal::optional_data_base.628" = type { %"class.absl::optional_internal::optional_data_dtor_base.629" }
%"class.absl::optional_internal::optional_data_dtor_base.629" = type { i8, %union.anon.630 }
%union.anon.630 = type { %"class.viz::LocalSurfaceId" }
%"class.viz::ChildLocalSurfaceIdAllocator" = type { %"class.viz::LocalSurfaceId" }
%"class.std::__1::unique_ptr.82" = type { %"class.std::__1::__compressed_pair.83" }
%"class.std::__1::__compressed_pair.83" = type { %"struct.std::__1::__compressed_pair_elem.84" }
%"struct.std::__1::__compressed_pair_elem.84" = type { %"class.base::MemoryPressureListener"* }
%"class.base::MemoryPressureListener" = type { %"class.base::RepeatingCallback", %"class.base::RepeatingCallback", %"class.base::Location" }
%"class.base::RepeatingCallback" = type { %"class.base::internal::CallbackBaseCopyable" }
%"class.cc::PresentationTimeCallbackBuffer" = type { %"class.base::circular_deque.631" }
%"class.base::circular_deque.631" = type { %"class.base::internal::VectorBuffer.632", i64, i64 }
%"class.base::internal::VectorBuffer.632" = type { %"struct.cc::PresentationTimeCallbackBuffer::FrameTokenInfo"*, i64 }
%"struct.cc::PresentationTimeCallbackBuffer::FrameTokenInfo" = type { i32, %"class.std::__1::vector.633", %"class.std::__1::vector.633" }
%"class.cc::FrameSequenceTrackerCollection" = type { i8, %"class.std::__1::unique_ptr.641", %"class.base::flat_map.647", %"class.base::flat_map.657", %"class.base::RepeatingCallback.667", %"class.std::__1::vector.668", %"class.cc::CompositorFrameReportingController"*, %"class.base::flat_map.676", i64, i64 }
%"class.std::__1::unique_ptr.641" = type { %"class.std::__1::__compressed_pair.642" }
%"class.std::__1::__compressed_pair.642" = type { %"struct.std::__1::__compressed_pair_elem.643" }
%"struct.std::__1::__compressed_pair_elem.643" = type { %"class.cc::ThroughputUkmReporter"* }
%"class.cc::ThroughputUkmReporter" = type opaque
%"class.base::flat_map.647" = type { %"class.base::internal::flat_tree.648" }
%"class.base::internal::flat_tree.648" = type { %"class.std::__1::vector.649" }
%"class.std::__1::vector.649" = type { %"class.std::__1::__vector_base.650" }
%"class.std::__1::__vector_base.650" = type { %"struct.std::__1::pair.651"*, %"struct.std::__1::pair.651"*, %"class.std::__1::__compressed_pair.652" }
%"struct.std::__1::pair.651" = type opaque
%"class.std::__1::__compressed_pair.652" = type { %"struct.std::__1::__compressed_pair_elem.653" }
%"struct.std::__1::__compressed_pair_elem.653" = type { %"struct.std::__1::pair.651"* }
%"class.base::flat_map.657" = type { %"class.base::internal::flat_tree.658" }
%"class.base::internal::flat_tree.658" = type { %"class.std::__1::vector.659" }
%"class.std::__1::vector.659" = type { %"class.std::__1::__vector_base.660" }
%"class.std::__1::__vector_base.660" = type { %"struct.std::__1::pair.661"*, %"struct.std::__1::pair.661"*, %"class.std::__1::__compressed_pair.662" }
%"struct.std::__1::pair.661" = type opaque
%"class.std::__1::__compressed_pair.662" = type { %"struct.std::__1::__compressed_pair_elem.663" }
%"struct.std::__1::__compressed_pair_elem.663" = type { %"struct.std::__1::pair.661"* }
%"class.base::RepeatingCallback.667" = type { %"class.base::internal::CallbackBaseCopyable" }
%"class.std::__1::vector.668" = type { %"class.std::__1::__vector_base.669" }
%"class.std::__1::__vector_base.669" = type { %"class.std::__1::unique_ptr.670"*, %"class.std::__1::unique_ptr.670"*, %"class.std::__1::__compressed_pair.671" }
%"class.std::__1::unique_ptr.670" = type opaque
%"class.std::__1::__compressed_pair.671" = type { %"struct.std::__1::__compressed_pair_elem.672" }
%"struct.std::__1::__compressed_pair_elem.672" = type { %"class.std::__1::unique_ptr.670"* }
%"class.base::flat_map.676" = type { %"class.base::internal::flat_tree.677" }
%"class.base::internal::flat_tree.677" = type { %"class.std::__1::vector.678" }
%"class.std::__1::vector.678" = type { %"class.std::__1::__vector_base.679" }
%"class.std::__1::__vector_base.679" = type { %"struct.std::__1::pair.680"*, %"struct.std::__1::pair.680"*, %"class.std::__1::__compressed_pair.681" }
%"struct.std::__1::pair.680" = type opaque
%"class.std::__1::__compressed_pair.681" = type { %"struct.std::__1::__compressed_pair_elem.682" }
%"struct.std::__1::__compressed_pair_elem.682" = type { %"struct.std::__1::pair.680"* }
%"class.std::__1::unique_ptr.686" = type { %"class.std::__1::__compressed_pair.687" }
%"class.std::__1::__compressed_pair.687" = type { %"struct.std::__1::__compressed_pair_elem.688" }
%"struct.std::__1::__compressed_pair_elem.688" = type { %"class.cc::PaintWorkletLayerPainter"* }
%"class.cc::PaintWorkletLayerPainter" = type opaque
%"class.cc::AnimatedPaintWorkletTracker" = type { %"class.base::flat_map.692", %"class.base::internal::flat_tree.702" }
%"class.base::flat_map.692" = type { %"class.base::internal::flat_tree.693" }
%"class.base::internal::flat_tree.693" = type { %"class.std::__1::vector.694" }
%"class.std::__1::vector.694" = type { %"class.std::__1::__vector_base.695" }
%"class.std::__1::__vector_base.695" = type { %"struct.std::__1::pair.696"*, %"struct.std::__1::pair.696"*, %"class.std::__1::__compressed_pair.697" }
%"struct.std::__1::pair.696" = type opaque
%"class.std::__1::__compressed_pair.697" = type { %"struct.std::__1::__compressed_pair_elem.698" }
%"struct.std::__1::__compressed_pair_elem.698" = type { %"struct.std::__1::pair.696"* }
%"class.base::internal::flat_tree.702" = type { %"class.std::__1::vector.703" }
%"class.std::__1::vector.703" = type { %"class.std::__1::__vector_base.704" }
%"class.std::__1::__vector_base.704" = type { %"struct.cc::PaintWorkletInput::PropertyKey"*, %"struct.cc::PaintWorkletInput::PropertyKey"*, %"class.std::__1::__compressed_pair.715" }
%"struct.cc::PaintWorkletInput::PropertyKey" = type { %"class.absl::optional.705", %"class.absl::optional.710", %"struct.cc::ElementId" }
%"class.absl::optional.705" = type { %"class.absl::optional_internal::optional_data.706" }
%"class.absl::optional_internal::optional_data.706" = type { %"class.absl::optional_internal::optional_data_base.707" }
%"class.absl::optional_internal::optional_data_base.707" = type { %"class.absl::optional_internal::optional_data_dtor_base.708" }
%"class.absl::optional_internal::optional_data_dtor_base.708" = type { i8, %union.anon.709 }
%union.anon.709 = type { %"class.std::__1::basic_string" }
%"class.absl::optional.710" = type { %"class.absl::optional_internal::optional_data.711" }
%"class.absl::optional_internal::optional_data.711" = type { %"class.absl::optional_internal::optional_data_base.712" }
%"class.absl::optional_internal::optional_data_base.712" = type { %"class.absl::optional_internal::optional_data_dtor_base.713" }
%"class.absl::optional_internal::optional_data_dtor_base.713" = type { i8, %union.anon.714 }
%union.anon.714 = type { i32 }
%"struct.cc::ElementId" = type { i64 }
%"class.std::__1::__compressed_pair.715" = type { %"struct.std::__1::__compressed_pair_elem.716" }
%"struct.std::__1::__compressed_pair_elem.716" = type { %"struct.cc::PaintWorkletInput::PropertyKey"* }
%"class.cc::AverageLagTrackingManager" = type { %"class.cc::AverageLagTracker", %"class.cc::AverageLagTracker", %"class.base::circular_deque.732" }
%"class.cc::AverageLagTracker" = type <{ i32, [4 x i8], %"class.std::__1::deque.720", %"class.base::TimeTicks", %"class.base::TimeTicks", float, float, %"class.base::TimeTicks", i8, [3 x i8], float, float, [4 x i8] }>
%"class.std::__1::deque.720" = type { %"class.std::__1::__deque_base.721" }
%"class.std::__1::__deque_base.721" = type { %"struct.std::__1::__split_buffer.722", i64, %"class.std::__1::__compressed_pair.728" }
%"struct.std::__1::__split_buffer.722" = type { %"struct.cc::AverageLagTracker::LagAreaInFrame"**, %"struct.cc::AverageLagTracker::LagAreaInFrame"**, %"struct.cc::AverageLagTracker::LagAreaInFrame"**, %"class.std::__1::__compressed_pair.723" }
%"struct.cc::AverageLagTracker::LagAreaInFrame" = type { %"class.base::TimeTicks", float, float, float, float }
%"class.std::__1::__compressed_pair.723" = type { %"struct.std::__1::__compressed_pair_elem.724" }
%"struct.std::__1::__compressed_pair_elem.724" = type { %"struct.cc::AverageLagTracker::LagAreaInFrame"** }
%"class.std::__1::__compressed_pair.728" = type { %"struct.std::__1::__compressed_pair_elem.21" }
%"class.base::circular_deque.732" = type { %"class.base::internal::VectorBuffer.733", i64, i64 }
%"class.base::internal::VectorBuffer.733" = type { %"struct.std::__1::pair.734"*, i64 }
%"struct.std::__1::pair.734" = type opaque
%"class.cc::DeJellyState" = type { i8, i32, float, float, %"class.absl::optional.735", %"class.std::__1::map.740", %"class.std::__1::map.740" }
%"class.absl::optional.735" = type { %"class.absl::optional_internal::optional_data.736" }
%"class.absl::optional_internal::optional_data.736" = type { %"class.absl::optional_internal::optional_data_base.737" }
%"class.absl::optional_internal::optional_data_base.737" = type { %"class.absl::optional_internal::optional_data_dtor_base.738" }
%"class.absl::optional_internal::optional_data_dtor_base.738" = type { i8, [3 x i8], %union.anon.739 }
%union.anon.739 = type { %"class.gfx::Transform" }
%"class.std::__1::map.740" = type { %"class.std::__1::__tree.741" }
%"class.std::__1::__tree.741" = type { %"class.std::__1::__tree_end_node"*, %"class.std::__1::__compressed_pair.742", %"class.std::__1::__compressed_pair.746" }
%"class.std::__1::__compressed_pair.742" = type { %"struct.std::__1::__compressed_pair_elem.36" }
%"class.std::__1::__compressed_pair.746" = type { %"struct.std::__1::__compressed_pair_elem.21" }
%"class.cc::EventsMetricsManager" = type { %"class.std::__1::vector.749", %"class.std::__1::vector.756" }
%"class.std::__1::vector.749" = type { %"class.std::__1::__vector_base.750" }
%"class.std::__1::__vector_base.750" = type { %"class.cc::EventsMetricsManager::ScopedMonitorImpl"**, %"class.cc::EventsMetricsManager::ScopedMonitorImpl"**, %"class.std::__1::__compressed_pair.751" }
%"class.cc::EventsMetricsManager::ScopedMonitorImpl" = type opaque
%"class.std::__1::__compressed_pair.751" = type { %"struct.std::__1::__compressed_pair_elem.752" }
%"struct.std::__1::__compressed_pair_elem.752" = type { %"class.cc::EventsMetricsManager::ScopedMonitorImpl"** }
%"class.std::__1::unique_ptr.764" = type { %"class.std::__1::__compressed_pair.765" }
%"class.std::__1::__compressed_pair.765" = type { %"struct.std::__1::__compressed_pair_elem.766" }
%"struct.std::__1::__compressed_pair_elem.766" = type { %"class.cc::LCDTextMetricsReporter"* }
%"class.cc::LCDTextMetricsReporter" = type opaque
%"class.cc::FrameRateEstimator" = type { i8, %"class.base::TimeTicks", i64, i8, %"class.cc::DelayedUniqueNotifier" }
%"class.cc::DelayedUniqueNotifier" = type { i32 (...)**, %"class.base::SequencedTaskRunner"*, %"class.base::RepeatingCallback.328", %"class.base::TimeDelta", %"class.base::TimeTicks", i8, %"class.base::WeakPtrFactory.770" }
%"class.base::WeakPtrFactory.770" = type { %"class.base::internal::WeakPtrFactoryBase" }
%"class.base::WritableSharedMemoryMapping" = type { %"class.base::SharedMemoryMapping" }
%"class.base::SharedMemoryMapping" = type { i32 (...)**, i8*, i64, i64, %"class.base::UnguessableToken" }
%"class.base::UnguessableToken" = type { %"class.base::Token" }
%"class.base::Token" = type { i64, i64 }
%"class.base::MRUCache" = type { %"class.base::MRUCacheBase" }
%"class.base::MRUCacheBase" = type { i32 (...)**, %"class.std::__1::list.771", %"class.std::__1::map.778", i64 }
%"class.std::__1::list.771" = type { %"class.std::__1::__list_imp.772" }
%"class.std::__1::__list_imp.772" = type { %"struct.std::__1::__list_node_base.773", %"class.std::__1::__compressed_pair.774" }
%"struct.std::__1::__list_node_base.773" = type { %"struct.std::__1::__list_node_base.773"*, %"struct.std::__1::__list_node_base.773"* }
%"class.std::__1::__compressed_pair.774" = type { %"struct.std::__1::__compressed_pair_elem.21" }
%"class.std::__1::map.778" = type { %"class.std::__1::__tree.779" }
%"class.std::__1::__tree.779" = type { %"class.std::__1::__tree_end_node"*, %"class.std::__1::__compressed_pair.780", %"class.std::__1::__compressed_pair.784" }
%"class.std::__1::__compressed_pair.780" = type { %"struct.std::__1::__compressed_pair_elem.36" }
%"class.std::__1::__compressed_pair.784" = type { %"struct.std::__1::__compressed_pair_elem.21" }
%"class.cc::ThrottleDecider" = type { %"class.base::flat_map.789", %"class.base::internal::flat_tree.799", %"class.base::internal::flat_tree.799" }
%"class.base::flat_map.789" = type { %"class.base::internal::flat_tree.790" }
%"class.base::internal::flat_tree.790" = type { %"class.std::__1::vector.791" }
%"class.std::__1::vector.791" = type { %"class.std::__1::__vector_base.792" }
%"class.std::__1::__vector_base.792" = type { %"struct.std::__1::pair.793"*, %"struct.std::__1::pair.793"*, %"class.std::__1::__compressed_pair.794" }
%"struct.std::__1::pair.793" = type opaque
%"class.std::__1::__compressed_pair.794" = type { %"struct.std::__1::__compressed_pair_elem.795" }
%"struct.std::__1::__compressed_pair_elem.795" = type { %"struct.std::__1::pair.793"* }
%"class.base::internal::flat_tree.799" = type { %"class.std::__1::vector.800" }
%"class.std::__1::vector.800" = type { %"class.std::__1::__vector_base.801" }
%"class.std::__1::__vector_base.801" = type { %"class.viz::FrameSinkId"*, %"class.viz::FrameSinkId"*, %"class.std::__1::__compressed_pair.802" }
%"class.viz::FrameSinkId" = type { i32, i32 }
%"class.std::__1::__compressed_pair.802" = type { %"struct.std::__1::__compressed_pair_elem.803" }
%"struct.std::__1::__compressed_pair_elem.803" = type { %"class.viz::FrameSinkId"* }
%"class.std::__1::vector.807" = type { %"class.std::__1::__vector_base.808" }
%"class.std::__1::__vector_base.808" = type { i32*, i32*, %"class.std::__1::__compressed_pair.809" }
%"class.std::__1::__compressed_pair.809" = type { %"struct.std::__1::__compressed_pair_elem.810" }
%"struct.std::__1::__compressed_pair_elem.810" = type { i32* }
%"class.base::WeakPtrFactory.814" = type { %"class.base::internal::WeakPtrFactoryBase" }
%"class.cc::HeadsUpDisplayLayerImpl" = type opaque
%"class.cc::PropertyTrees" = type { %"class.base::flat_map.815", %"class.base::flat_map.815", %"class.base::flat_map.815", %"class.cc::TransformTree", %"class.cc::EffectTree", %"class.cc::ClipTree", %"class.cc::ScrollTree", i8, i8, i8, i32, i8, i8, %"class.gfx::Vector2dF", %"class.gfx::Vector2dF", %"struct.cc::PropertyTreesCachedData" }
%"class.base::flat_map.815" = type { %"class.base::internal::flat_tree.816" }
%"class.base::internal::flat_tree.816" = type { %"class.std::__1::vector.817" }
%"class.std::__1::vector.817" = type { %"class.std::__1::__vector_base.818" }
%"class.std::__1::__vector_base.818" = type { %"struct.std::__1::pair.819"*, %"struct.std::__1::pair.819"*, %"class.std::__1::__compressed_pair.820" }
%"struct.std::__1::pair.819" = type opaque
%"class.std::__1::__compressed_pair.820" = type { %"struct.std::__1::__compressed_pair_elem.821" }
%"struct.std::__1::__compressed_pair_elem.821" = type { %"struct.std::__1::pair.819"* }
%"class.cc::TransformTree" = type { %"class.cc::PropertyTree", float, float, float, %"class.std::__1::vector.235", %"class.std::__1::vector.832", %"class.std::__1::vector.839" }
%"class.cc::PropertyTree" = type { i32 (...)**, %"class.std::__1::vector.825", i8, %"class.cc::PropertyTrees"* }
%"class.std::__1::vector.825" = type { %"class.std::__1::__vector_base.826" }
%"class.std::__1::__vector_base.826" = type { %"struct.cc::TransformNode"*, %"struct.cc::TransformNode"*, %"class.std::__1::__compressed_pair.827" }
%"struct.cc::TransformNode" = type { i32, i32, i32, %"struct.cc::ElementId", %"class.gfx::Transform", %"class.gfx::Point3F", %"class.gfx::Vector2dF", %"class.gfx::Transform", i32, i32, i24, %"class.gfx::ScrollOffset", %"class.gfx::Vector2dF", float, %"struct.cc::ElementId" }
%"class.gfx::Point3F" = type { float, float, float }
%"class.gfx::ScrollOffset" = type { float, float }
%"class.std::__1::__compressed_pair.827" = type { %"struct.std::__1::__compressed_pair_elem.828" }
%"struct.std::__1::__compressed_pair_elem.828" = type { %"struct.cc::TransformNode"* }
%"class.std::__1::vector.832" = type { %"class.std::__1::__vector_base.833" }
%"class.std::__1::__vector_base.833" = type { %"struct.cc::TransformCachedNodeData"*, %"struct.cc::TransformCachedNodeData"*, %"class.std::__1::__compressed_pair.834" }
%"struct.cc::TransformCachedNodeData" = type { %"class.gfx::Transform", %"class.gfx::Transform", i8, [3 x i8] }
%"class.std::__1::__compressed_pair.834" = type { %"struct.std::__1::__compressed_pair_elem.835" }
%"struct.std::__1::__compressed_pair_elem.835" = type { %"struct.cc::TransformCachedNodeData"* }
%"class.std::__1::vector.839" = type { %"class.std::__1::__vector_base.840" }
%"class.std::__1::__vector_base.840" = type { %"struct.cc::StickyPositionNodeData"*, %"struct.cc::StickyPositionNodeData"*, %"class.std::__1::__compressed_pair.841" }
%"struct.cc::StickyPositionNodeData" = type { i32, %"struct.cc::StickyPositionConstraint", i32, i32, %"class.gfx::Vector2dF", %"class.gfx::Vector2dF" }
%"struct.cc::StickyPositionConstraint" = type { i8, float, float, float, float, %"class.gfx::RectF", %"class.gfx::RectF", %"class.gfx::RectF", %"struct.cc::ElementId", %"struct.cc::ElementId" }
%"class.gfx::RectF" = type { %"class.gfx::PointF", %"class.gfx::SizeF" }
%"class.gfx::SizeF" = type { float, float }
%"class.std::__1::__compressed_pair.841" = type { %"struct.std::__1::__compressed_pair_elem.842" }
%"struct.std::__1::__compressed_pair_elem.842" = type { %"struct.cc::StickyPositionNodeData"* }
%"class.cc::EffectTree" = type { %"class.cc::PropertyTree.846", %"class.std::__1::unordered_multimap", %"class.std::__1::vector.904" }
%"class.cc::PropertyTree.846" = type { i32 (...)**, %"class.std::__1::vector.847", i8, %"class.cc::PropertyTrees"* }
%"class.std::__1::vector.847" = type { %"class.std::__1::__vector_base.848" }
%"class.std::__1::__vector_base.848" = type { %"struct.cc::EffectNode"*, %"struct.cc::EffectNode"*, %"class.std::__1::__compressed_pair.876" }
%"struct.cc::EffectNode" = type { i32, i32, i64, float, float, %"class.cc::FilterOperations", %"class.cc::FilterOperations", %"class.absl::optional.870", float, %"class.gfx::PointF", %"struct.cc::ElementId", %"class.gfx::MaskFilterInfo", i32, %"class.gfx::Vector2dF", %"class.viz::SubtreeCaptureId", %"class.gfx::Size", [3 x i8], i8, i32, i32, i32, i32, i32, i32, %"class.cc::DocumentTransitionSharedElementId" }
%"class.cc::FilterOperations" = type { %"class.std::__1::vector.849" }
%"class.std::__1::vector.849" = type { %"class.std::__1::__vector_base.850" }
%"class.std::__1::__vector_base.850" = type { %"class.cc::FilterOperation"*, %"class.cc::FilterOperation"*, %"class.std::__1::__compressed_pair.865" }
%"class.cc::FilterOperation" = type <{ i32, float, float, %"class.gfx::Point", i32, %class.sk_sp.851, [20 x float], i32, [4 x i8], %"class.std::__1::vector.858", i32, [4 x i8] }>
%class.sk_sp.851 = type { %"class.cc::PaintFilter"* }
%"class.cc::PaintFilter" = type { %class.SkRefCnt.base, %class.sk_sp.852, i32, %"class.absl::optional.853", i8, i32 }
%class.sk_sp.852 = type { %class.SkImageFilter* }
%class.SkImageFilter = type { %class.SkFlattenable.base, [4 x i8] }
%class.SkFlattenable.base = type { %class.SkRefCnt.base }
%"class.absl::optional.853" = type { %"class.absl::optional_internal::optional_data.854" }
%"class.absl::optional_internal::optional_data.854" = type { %"class.absl::optional_internal::optional_data_base.855" }
%"class.absl::optional_internal::optional_data_base.855" = type { %"class.absl::optional_internal::optional_data_dtor_base.856" }
%"class.absl::optional_internal::optional_data_dtor_base.856" = type { i8, %union.anon.857 }
%union.anon.857 = type { %struct.SkRect }
%"class.std::__1::vector.858" = type { %"class.std::__1::__vector_base.859" }
%"class.std::__1::__vector_base.859" = type { %"class.gfx::Rect"*, %"class.gfx::Rect"*, %"class.std::__1::__compressed_pair.860" }
%"class.std::__1::__compressed_pair.860" = type { %"struct.std::__1::__compressed_pair_elem.861" }
%"struct.std::__1::__compressed_pair_elem.861" = type { %"class.gfx::Rect"* }
%"class.std::__1::__compressed_pair.865" = type { %"struct.std::__1::__compressed_pair_elem.866" }
%"struct.std::__1::__compressed_pair_elem.866" = type { %"class.cc::FilterOperation"* }
%"class.absl::optional.870" = type { %"class.absl::optional_internal::optional_data.871" }
%"class.absl::optional_internal::optional_data.871" = type { %"class.absl::optional_internal::optional_data_base.872" }
%"class.absl::optional_internal::optional_data_base.872" = type { %"class.absl::optional_internal::optional_data_dtor_base.873" }
%"class.absl::optional_internal::optional_data_dtor_base.873" = type { i8, %union.anon.874 }
%union.anon.874 = type { %"class.gfx::RRectF" }
%"class.viz::SubtreeCaptureId" = type { i32 }
%"class.cc::DocumentTransitionSharedElementId" = type { i32, %"class.base::internal::flat_tree.875" }
%"class.base::internal::flat_tree.875" = type { %"class.std::__1::vector.807" }
%"class.std::__1::__compressed_pair.876" = type { %"struct.std::__1::__compressed_pair_elem.877" }
%"struct.std::__1::__compressed_pair_elem.877" = type { %"struct.cc::EffectNode"* }
%"class.std::__1::unordered_multimap" = type { %"class.std::__1::__hash_table.881" }
%"class.std::__1::__hash_table.881" = type <{ %"class.std::__1::unique_ptr.882", %"class.std::__1::__compressed_pair.892", %"class.std::__1::__compressed_pair.897", %"class.std::__1::__compressed_pair.900", [4 x i8] }>
%"class.std::__1::unique_ptr.882" = type { %"class.std::__1::__compressed_pair.883" }
%"class.std::__1::__compressed_pair.883" = type { %"struct.std::__1::__compressed_pair_elem.884", %"struct.std::__1::__compressed_pair_elem.886" }
%"struct.std::__1::__compressed_pair_elem.884" = type { %"struct.std::__1::__hash_node_base.885"** }
%"struct.std::__1::__hash_node_base.885" = type { %"struct.std::__1::__hash_node_base.885"* }
%"struct.std::__1::__compressed_pair_elem.886" = type { %"class.std::__1::__bucket_list_deallocator.887" }
%"class.std::__1::__bucket_list_deallocator.887" = type { %"class.std::__1::__compressed_pair.888" }
%"class.std::__1::__compressed_pair.888" = type { %"struct.std::__1::__compressed_pair_elem.21" }
%"class.std::__1::__compressed_pair.892" = type { %"struct.std::__1::__compressed_pair_elem.893" }
%"struct.std::__1::__compressed_pair_elem.893" = type { %"struct.std::__1::__hash_node_base.885" }
%"class.std::__1::__compressed_pair.897" = type { %"struct.std::__1::__compressed_pair_elem.21" }
%"class.std::__1::__compressed_pair.900" = type { %"struct.std::__1::__compressed_pair_elem.33" }
%"class.std::__1::vector.904" = type { %"class.std::__1::__vector_base.905" }
%"class.std::__1::__vector_base.905" = type { %"class.std::__1::unique_ptr.906"*, %"class.std::__1::unique_ptr.906"*, %"class.std::__1::__compressed_pair.912" }
%"class.std::__1::unique_ptr.906" = type { %"class.std::__1::__compressed_pair.907" }
%"class.std::__1::__compressed_pair.907" = type { %"struct.std::__1::__compressed_pair_elem.908" }
%"struct.std::__1::__compressed_pair_elem.908" = type { %"class.cc::RenderSurfaceImpl"* }
%"class.std::__1::__compressed_pair.912" = type { %"struct.std::__1::__compressed_pair_elem.913" }
%"struct.std::__1::__compressed_pair_elem.913" = type { %"class.std::__1::unique_ptr.906"* }
%"class.cc::ClipTree" = type { %"class.cc::PropertyTree.917" }
%"class.cc::PropertyTree.917" = type { i32 (...)**, %"class.std::__1::vector.918", i8, %"class.cc::PropertyTrees"* }
%"class.std::__1::vector.918" = type { %"class.std::__1::__vector_base.919" }
%"class.std::__1::__vector_base.919" = type { %"struct.cc::ClipNode"*, %"struct.cc::ClipNode"*, %"class.std::__1::__compressed_pair.920" }
%"struct.cc::ClipNode" = type opaque
%"class.std::__1::__compressed_pair.920" = type { %"struct.std::__1::__compressed_pair_elem.921" }
%"struct.std::__1::__compressed_pair_elem.921" = type { %"struct.cc::ClipNode"* }
%"class.cc::ScrollTree" = type { %"class.cc::PropertyTree.925", i32, %"class.base::flat_map.933", %"class.base::flat_map.943", %"class.base::WeakPtr.953" }
%"class.cc::PropertyTree.925" = type { i32 (...)**, %"class.std::__1::vector.926", i8, %"class.cc::PropertyTrees"* }
%"class.std::__1::vector.926" = type { %"class.std::__1::__vector_base.927" }
%"class.std::__1::__vector_base.927" = type { %"struct.cc::ScrollNode"*, %"struct.cc::ScrollNode"*, %"class.std::__1::__compressed_pair.928" }
%"struct.cc::ScrollNode" = type opaque
%"class.std::__1::__compressed_pair.928" = type { %"struct.std::__1::__compressed_pair_elem.929" }
%"struct.std::__1::__compressed_pair_elem.929" = type { %"struct.cc::ScrollNode"* }
%"class.base::flat_map.933" = type { %"class.base::internal::flat_tree.934" }
%"class.base::internal::flat_tree.934" = type { %"class.std::__1::vector.935" }
%"class.std::__1::vector.935" = type { %"class.std::__1::__vector_base.936" }
%"class.std::__1::__vector_base.936" = type { %"struct.std::__1::pair.937"*, %"struct.std::__1::pair.937"*, %"class.std::__1::__compressed_pair.938" }
%"struct.std::__1::pair.937" = type opaque
%"class.std::__1::__compressed_pair.938" = type { %"struct.std::__1::__compressed_pair_elem.939" }
%"struct.std::__1::__compressed_pair_elem.939" = type { %"struct.std::__1::pair.937"* }
%"class.base::flat_map.943" = type { %"class.base::internal::flat_tree.944" }
%"class.base::internal::flat_tree.944" = type { %"class.std::__1::vector.945" }
%"class.std::__1::vector.945" = type { %"class.std::__1::__vector_base.946" }
%"class.std::__1::__vector_base.946" = type { %"struct.std::__1::pair.947"*, %"struct.std::__1::pair.947"*, %"class.std::__1::__compressed_pair.948" }
%"struct.std::__1::pair.947" = type opaque
%"class.std::__1::__compressed_pair.948" = type { %"struct.std::__1::__compressed_pair_elem.949" }
%"struct.std::__1::__compressed_pair_elem.949" = type { %"struct.std::__1::pair.947"* }
%"class.base::WeakPtr.953" = type { %"class.base::internal::WeakPtrBase" }
%"struct.cc::PropertyTreesCachedData" = type { i32, %"class.std::__1::vector.954", %"class.std::__1::vector.961" }
%"class.std::__1::vector.954" = type { %"class.std::__1::__vector_base.955" }
%"class.std::__1::__vector_base.955" = type { %"struct.cc::AnimationScaleData"*, %"struct.cc::AnimationScaleData"*, %"class.std::__1::__compressed_pair.956" }
%"struct.cc::AnimationScaleData" = type <{ i32, float, i8, i8, [2 x i8] }>
%"class.std::__1::__compressed_pair.956" = type { %"struct.std::__1::__compressed_pair_elem.957" }
%"struct.std::__1::__compressed_pair_elem.957" = type { %"struct.cc::AnimationScaleData"* }
%"class.std::__1::vector.961" = type { %"class.std::__1::__vector_base.962" }
%"class.std::__1::__vector_base.962" = type { %"class.std::__1::vector.963"*, %"class.std::__1::vector.963"*, %"class.std::__1::__compressed_pair.964" }
%"class.std::__1::vector.963" = type opaque
%"class.std::__1::__compressed_pair.964" = type { %"struct.std::__1::__compressed_pair_elem.965" }
%"struct.std::__1::__compressed_pair_elem.965" = type { %"class.std::__1::vector.963"* }
%"struct.cc::LayerTreeHost::ViewportPropertyIds" = type { i32, i32, i32, i32, i32 }
%"struct.viz::Selection.969" = type { %"struct.cc::LayerSelectionBound", %"struct.cc::LayerSelectionBound" }
%"struct.cc::LayerSelectionBound" = type <{ i32, %"class.gfx::Point", %"class.gfx::Point", i32, i8, [3 x i8] }>
%class.scoped_refptr.970 = type { %"class.cc::SyncedProperty"* }
%"class.cc::SyncedProperty" = type <{ %"class.base::RefCounted", %"class.cc::ScaleGroup", %"class.cc::ScaleGroup", %"class.cc::ScaleGroup", %"class.cc::ScaleGroup", %"class.cc::ScaleGroup", i8, [3 x i8] }>
%"class.base::RefCounted" = type { %"class.base::subtle::RefCountedBase" }
%"class.base::subtle::RefCountedBase" = type { i32 }
%"class.cc::ScaleGroup" = type { float }
%"class.gfx::DisplayColorSpaces" = type { [6 x %"class.gfx::ColorSpace"], [6 x i32], float, %"class.absl::optional.971" }
%"class.absl::optional.971" = type { %"class.absl::optional_internal::optional_data.972" }
%"class.absl::optional_internal::optional_data.972" = type { %"class.absl::optional_internal::optional_data_base.973" }
%"class.absl::optional_internal::optional_data_base.973" = type { %"class.absl::optional_internal::optional_data_dtor_base.974" }
%"class.absl::optional_internal::optional_data_dtor_base.974" = type { i8, %union.anon.975 }
%union.anon.975 = type { %"struct.gfx::HDRStaticMetadata" }
%"struct.gfx::HDRStaticMetadata" = type { double, double, double }
%"class.viz::LocalSurfaceId" = type { i32, i32, %"class.base::UnguessableToken" }
%class.scoped_refptr.976 = type { %"class.cc::SyncedProperty.977"* }
%"class.cc::SyncedProperty.977" = type <{ %"class.base::RefCounted.978", %"class.cc::AdditionGroup", %"class.cc::AdditionGroup", %"class.cc::AdditionGroup", %"class.cc::AdditionGroup", %"class.cc::AdditionGroup", i8, [3 x i8] }>
%"class.base::RefCounted.978" = type { %"class.base::subtle::RefCountedBase" }
%"class.cc::AdditionGroup" = type { %"class.gfx::Vector2dF" }
%"class.std::__1::vector.980" = type { %"class.std::__1::__vector_base.981" }
%"class.std::__1::__vector_base.981" = type { %"class.std::__1::unique_ptr.982"*, %"class.std::__1::unique_ptr.982"*, %"class.std::__1::__compressed_pair.1024" }
%"class.std::__1::unique_ptr.982" = type { %"class.std::__1::__compressed_pair.983" }
%"class.std::__1::__compressed_pair.983" = type { %"struct.std::__1::__compressed_pair_elem.984" }
%"struct.std::__1::__compressed_pair_elem.984" = type { %"class.cc::LayerImpl"* }
%"class.cc::LayerImpl" = type <{ i32 (...)**, i32, [4 x i8], %"class.cc::LayerTreeImpl"*, i8, [3 x i8], %"class.gfx::Size", %"class.gfx::Vector2dF", %"class.gfx::Size", %"class.gfx::Size", i16, [2 x i8], %"class.cc::Region", %"class.cc::TouchActionRegion", %"class.cc::Region", i32, i32, i32, i32, i32, i32, i32, [4 x i8], %"struct.cc::ElementId", %"class.gfx::Rect", %"struct.cc::DrawProperties", %"struct.cc::PerformanceProperties", [4 x i8], %"class.std::__1::unique_ptr.995", %"class.std::__1::unique_ptr.1015", i8, [7 x i8] }>
%"class.cc::TouchActionRegion" = type { %"class.base::flat_map.985" }
%"class.base::flat_map.985" = type { %"class.base::internal::flat_tree.986" }
%"class.base::internal::flat_tree.986" = type { %"class.std::__1::vector.987" }
%"class.std::__1::vector.987" = type { %"class.std::__1::__vector_base.988" }
%"class.std::__1::__vector_base.988" = type { %"struct.std::__1::pair.989"*, %"struct.std::__1::pair.989"*, %"class.std::__1::__compressed_pair.990" }
%"struct.std::__1::pair.989" = type opaque
%"class.std::__1::__compressed_pair.990" = type { %"struct.std::__1::__compressed_pair_elem.991" }
%"struct.std::__1::__compressed_pair_elem.991" = type { %"struct.std::__1::pair.989"* }
%"struct.cc::DrawProperties" = type { %"class.gfx::Transform", %"class.gfx::Transform", %"class.cc::Occlusion", float, i8, i8, i8, %"class.gfx::Rect", %"class.gfx::Rect", %"class.gfx::Rect", %"class.gfx::MaskFilterInfo" }
%"struct.cc::PerformanceProperties" = type { i32, float, %"class.gfx::Transform" }
%"class.std::__1::unique_ptr.995" = type { %"class.std::__1::__compressed_pair.996" }
%"class.std::__1::__compressed_pair.996" = type { %"struct.std::__1::__compressed_pair_elem.997" }
%"struct.std::__1::__compressed_pair_elem.997" = type { %"struct.cc::LayerDebugInfo"* }
%"struct.cc::LayerDebugInfo" = type { %"class.std::__1::basic_string", i32, i32, %"class.std::__1::vector.998", %"class.std::__1::vector.998", %"class.std::__1::vector.1005" }
%"class.std::__1::vector.998" = type { %"class.std::__1::__vector_base.999" }
%"class.std::__1::__vector_base.999" = type { i8**, i8**, %"class.std::__1::__compressed_pair.1000" }
%"class.std::__1::__compressed_pair.1000" = type { %"struct.std::__1::__compressed_pair_elem.1001" }
%"struct.std::__1::__compressed_pair_elem.1001" = type { i8** }
%"class.std::__1::vector.1005" = type { %"class.std::__1::__vector_base.1006" }
%"class.std::__1::__vector_base.1006" = type { %"struct.cc::LayerDebugInfo::Invalidation"*, %"struct.cc::LayerDebugInfo::Invalidation"*, %"class.std::__1::__compressed_pair.1007" }
%"struct.cc::LayerDebugInfo::Invalidation" = type { %"class.gfx::Rect", i8*, %"class.std::__1::basic_string" }
%"class.std::__1::__compressed_pair.1007" = type { %"struct.std::__1::__compressed_pair_elem.1008" }
%"struct.std::__1::__compressed_pair_elem.1008" = type { %"struct.cc::LayerDebugInfo::Invalidation"* }
%"class.std::__1::unique_ptr.1015" = type { %"class.std::__1::__compressed_pair.1016" }
%"class.std::__1::__compressed_pair.1016" = type { %"struct.std::__1::__compressed_pair_elem.1017" }
%"struct.std::__1::__compressed_pair_elem.1017" = type { %"class.cc::Region"* }
%"class.std::__1::__compressed_pair.1024" = type { %"struct.std::__1::__compressed_pair_elem.1025" }
%"struct.std::__1::__compressed_pair_elem.1025" = type { %"class.std::__1::unique_ptr.982"* }
%"class.std::__1::unordered_map.1029" = type { %"class.std::__1::__hash_table.1030" }
%"class.std::__1::__hash_table.1030" = type <{ %"class.std::__1::unique_ptr.1031", %"class.std::__1::__compressed_pair.1041", %"class.std::__1::__compressed_pair.1046", %"class.std::__1::__compressed_pair.1049", [4 x i8] }>
%"class.std::__1::unique_ptr.1031" = type { %"class.std::__1::__compressed_pair.1032" }
%"class.std::__1::__compressed_pair.1032" = type { %"struct.std::__1::__compressed_pair_elem.1033", %"struct.std::__1::__compressed_pair_elem.1035" }
%"struct.std::__1::__compressed_pair_elem.1033" = type { %"struct.std::__1::__hash_node_base.1034"** }
%"struct.std::__1::__hash_node_base.1034" = type { %"struct.std::__1::__hash_node_base.1034"* }
%"struct.std::__1::__compressed_pair_elem.1035" = type { %"class.std::__1::__bucket_list_deallocator.1036" }
%"class.std::__1::__bucket_list_deallocator.1036" = type { %"class.std::__1::__compressed_pair.1037" }
%"class.std::__1::__compressed_pair.1037" = type { %"struct.std::__1::__compressed_pair_elem.21" }
%"class.std::__1::__compressed_pair.1041" = type { %"struct.std::__1::__compressed_pair_elem.1042" }
%"struct.std::__1::__compressed_pair_elem.1042" = type { %"struct.std::__1::__hash_node_base.1034" }
%"class.std::__1::__compressed_pair.1046" = type { %"struct.std::__1::__compressed_pair_elem.21" }
%"class.std::__1::__compressed_pair.1049" = type { %"struct.std::__1::__compressed_pair_elem.33" }
%"class.base::internal::flat_tree.1053" = type { %"class.std::__1::vector.1054" }
%"class.std::__1::vector.1054" = type { %"class.std::__1::__vector_base.1055" }
%"class.std::__1::__vector_base.1055" = type { %"class.cc::LayerImpl"**, %"class.cc::LayerImpl"**, %"class.std::__1::__compressed_pair.1056" }
%"class.std::__1::__compressed_pair.1056" = type { %"struct.std::__1::__compressed_pair_elem.1057" }
%"struct.std::__1::__compressed_pair_elem.1057" = type { %"class.cc::LayerImpl"** }
%"class.std::__1::unordered_map.1061" = type { %"class.std::__1::__hash_table.1062" }
%"class.std::__1::__hash_table.1062" = type <{ %"class.std::__1::unique_ptr.1063", %"class.std::__1::__compressed_pair.1073", %"class.std::__1::__compressed_pair.1078", %"class.std::__1::__compressed_pair.1081", [4 x i8] }>
%"class.std::__1::unique_ptr.1063" = type { %"class.std::__1::__compressed_pair.1064" }
%"class.std::__1::__compressed_pair.1064" = type { %"struct.std::__1::__compressed_pair_elem.1065", %"struct.std::__1::__compressed_pair_elem.1067" }
%"struct.std::__1::__compressed_pair_elem.1065" = type { %"struct.std::__1::__hash_node_base.1066"** }
%"struct.std::__1::__hash_node_base.1066" = type { %"struct.std::__1::__hash_node_base.1066"* }
%"struct.std::__1::__compressed_pair_elem.1067" = type { %"class.std::__1::__bucket_list_deallocator.1068" }
%"class.std::__1::__bucket_list_deallocator.1068" = type { %"class.std::__1::__compressed_pair.1069" }
%"class.std::__1::__compressed_pair.1069" = type { %"struct.std::__1::__compressed_pair_elem.21" }
%"class.std::__1::__compressed_pair.1073" = type { %"struct.std::__1::__compressed_pair_elem.1074" }
%"struct.std::__1::__compressed_pair_elem.1074" = type { %"struct.std::__1::__hash_node_base.1066" }
%"class.std::__1::__compressed_pair.1078" = type { %"struct.std::__1::__compressed_pair_elem.21" }
%"class.std::__1::__compressed_pair.1081" = type { %"struct.std::__1::__compressed_pair_elem.33" }
%"class.std::__1::unordered_map.1085" = type { %"class.std::__1::__hash_table.1086" }
%"class.std::__1::__hash_table.1086" = type <{ %"class.std::__1::unique_ptr.1087", %"class.std::__1::__compressed_pair.1097", %"class.std::__1::__compressed_pair.1102", %"class.std::__1::__compressed_pair.1105", [4 x i8] }>
%"class.std::__1::unique_ptr.1087" = type { %"class.std::__1::__compressed_pair.1088" }
%"class.std::__1::__compressed_pair.1088" = type { %"struct.std::__1::__compressed_pair_elem.1089", %"struct.std::__1::__compressed_pair_elem.1091" }
%"struct.std::__1::__compressed_pair_elem.1089" = type { %"struct.std::__1::__hash_node_base.1090"** }
%"struct.std::__1::__hash_node_base.1090" = type { %"struct.std::__1::__hash_node_base.1090"* }
%"struct.std::__1::__compressed_pair_elem.1091" = type { %"class.std::__1::__bucket_list_deallocator.1092" }
%"class.std::__1::__bucket_list_deallocator.1092" = type { %"class.std::__1::__compressed_pair.1093" }
%"class.std::__1::__compressed_pair.1093" = type { %"struct.std::__1::__compressed_pair_elem.21" }
%"class.std::__1::__compressed_pair.1097" = type { %"struct.std::__1::__compressed_pair_elem.1098" }
%"struct.std::__1::__compressed_pair_elem.1098" = type { %"struct.std::__1::__hash_node_base.1090" }
%"class.std::__1::__compressed_pair.1102" = type { %"struct.std::__1::__compressed_pair_elem.21" }
%"class.std::__1::__compressed_pair.1105" = type { %"struct.std::__1::__compressed_pair_elem.33" }
%"class.std::__1::unordered_map.1109" = type { %"class.std::__1::__hash_table.1110" }
%"class.std::__1::__hash_table.1110" = type <{ %"class.std::__1::unique_ptr.1111", %"class.std::__1::__compressed_pair.1121", %"class.std::__1::__compressed_pair.1126", %"class.std::__1::__compressed_pair.1129", [4 x i8] }>
%"class.std::__1::unique_ptr.1111" = type { %"class.std::__1::__compressed_pair.1112" }
%"class.std::__1::__compressed_pair.1112" = type { %"struct.std::__1::__compressed_pair_elem.1113", %"struct.std::__1::__compressed_pair_elem.1115" }
%"struct.std::__1::__compressed_pair_elem.1113" = type { %"struct.std::__1::__hash_node_base.1114"** }
%"struct.std::__1::__hash_node_base.1114" = type { %"struct.std::__1::__hash_node_base.1114"* }
%"struct.std::__1::__compressed_pair_elem.1115" = type { %"class.std::__1::__bucket_list_deallocator.1116" }
%"class.std::__1::__bucket_list_deallocator.1116" = type { %"class.std::__1::__compressed_pair.1117" }
%"class.std::__1::__compressed_pair.1117" = type { %"struct.std::__1::__compressed_pair_elem.21" }
%"class.std::__1::__compressed_pair.1121" = type { %"struct.std::__1::__compressed_pair_elem.1122" }
%"struct.std::__1::__compressed_pair_elem.1122" = type { %"struct.std::__1::__hash_node_base.1114" }
%"class.std::__1::__compressed_pair.1126" = type { %"struct.std::__1::__compressed_pair_elem.21" }
%"class.std::__1::__compressed_pair.1129" = type { %"struct.std::__1::__compressed_pair_elem.33" }
%"class.base::flat_map.1133" = type { %"class.base::internal::flat_tree.1134" }
%"class.base::internal::flat_tree.1134" = type { %"class.std::__1::vector.1135" }
%"class.std::__1::vector.1135" = type { %"class.std::__1::__vector_base.1136" }
%"class.std::__1::__vector_base.1136" = type { %"struct.std::__1::pair.1137"*, %"struct.std::__1::pair.1137"*, %"class.std::__1::__compressed_pair.1138" }
%"struct.std::__1::pair.1137" = type opaque
%"class.std::__1::__compressed_pair.1138" = type { %"struct.std::__1::__compressed_pair_elem.1139" }
%"struct.std::__1::__compressed_pair_elem.1139" = type { %"struct.std::__1::pair.1137"* }
%"class.std::__1::vector.1143" = type { %"class.std::__1::__vector_base.1144" }
%"class.std::__1::__vector_base.1144" = type { %"class.cc::PictureLayerImpl"**, %"class.cc::PictureLayerImpl"**, %"class.std::__1::__compressed_pair.1227" }
%"class.cc::PictureLayerImpl" = type { %"class.cc::LayerImpl.base", %"class.cc::PictureLayerTilingClient", %"class.cc::ImageAnimationController::AnimationDriver", %"class.cc::PictureLayerImpl"*, %"class.std::__1::unique_ptr.1145", %class.scoped_refptr.1153, %"class.cc::Region", float, float, %"class.gfx::Vector2dF", %"class.gfx::Vector2dF", float, float, %"class.gfx::Vector2dF", %"class.gfx::Vector2dF", float, i8, i8, %"class.absl::optional.1205", float, %"class.gfx::Rect", %"class.gfx::Size", %"class.std::__1::vector.1210", %"class.base::flat_map.1217", %"class.gfx::Size", %"class.cc::TileSizeCalculator", %"class.gfx::Rect" }
%"class.cc::LayerImpl.base" = type <{ i32 (...)**, i32, [4 x i8], %"class.cc::LayerTreeImpl"*, i8, [3 x i8], %"class.gfx::Size", %"class.gfx::Vector2dF", %"class.gfx::Size", %"class.gfx::Size", i16, [2 x i8], %"class.cc::Region", %"class.cc::TouchActionRegion", %"class.cc::Region", i32, i32, i32, i32, i32, i32, i32, [4 x i8], %"struct.cc::ElementId", %"class.gfx::Rect", %"struct.cc::DrawProperties", %"struct.cc::PerformanceProperties", [4 x i8], %"class.std::__1::unique_ptr.995", %"class.std::__1::unique_ptr.1015", i8 }>
%"class.cc::PictureLayerTilingClient" = type { i32 (...)** }
%"class.std::__1::unique_ptr.1145" = type { %"class.std::__1::__compressed_pair.1146" }
%"class.std::__1::__compressed_pair.1146" = type { %"struct.std::__1::__compressed_pair_elem.1147" }
%"struct.std::__1::__compressed_pair_elem.1147" = type { %"class.cc::PictureLayerTilingSet"* }
%"class.cc::PictureLayerTilingSet" = type { %"class.std::__1::vector.1148", i32, float, i32, i32, %"class.cc::PictureLayerTilingClient"*, float, %"class.std::__1::deque.1190", %"struct.cc::PictureLayerTilingSet::StateSinceLastTilePriorityUpdate", %class.scoped_refptr.1153, %"class.gfx::Rect", %"class.gfx::Rect", %"class.gfx::Rect", %"class.gfx::Rect" }
%"class.std::__1::vector.1148" = type { %"class.std::__1::__vector_base.1149" }
%"class.std::__1::__vector_base.1149" = type { %"class.std::__1::unique_ptr.1150"*, %"class.std::__1::unique_ptr.1150"*, %"class.std::__1::__compressed_pair.1185" }
%"class.std::__1::unique_ptr.1150" = type { %"class.std::__1::__compressed_pair.1151" }
%"class.std::__1::__compressed_pair.1151" = type { %"struct.std::__1::__compressed_pair_elem.1152" }
%"struct.std::__1::__compressed_pair_elem.1152" = type { %"class.cc::PictureLayerTiling"* }
%"class.cc::PictureLayerTiling" = type <{ %"class.gfx::AxisTransform2d", %"class.cc::PictureLayerTilingClient"*, i32, [4 x i8], %class.scoped_refptr.1153, float, float, i32, i8, [3 x i8], %"class.cc::TilingData", [4 x i8], %"class.std::__1::unordered_map.1156", %"class.gfx::Rect", i8, [3 x i8], %"class.gfx::Rect", %"class.gfx::Rect", %"class.gfx::Rect", %"class.gfx::Rect", float, %"class.cc::Occlusion", float, i8, i8, i8, i8, i8, i8, [2 x i8] }>
%"class.gfx::AxisTransform2d" = type { %"class.gfx::Vector2dF", %"class.gfx::Vector2dF" }
%"class.cc::TilingData" = type { %"class.gfx::Size", %"class.gfx::Size", i32, i32, i32 }
%"class.std::__1::unordered_map.1156" = type { %"class.std::__1::__hash_table.1157" }
%"class.std::__1::__hash_table.1157" = type <{ %"class.std::__1::unique_ptr.1158", %"class.std::__1::__compressed_pair.1168", %"class.std::__1::__compressed_pair.1173", %"class.std::__1::__compressed_pair.1176", [4 x i8] }>
%"class.std::__1::unique_ptr.1158" = type { %"class.std::__1::__compressed_pair.1159" }
%"class.std::__1::__compressed_pair.1159" = type { %"struct.std::__1::__compressed_pair_elem.1160", %"struct.std::__1::__compressed_pair_elem.1162" }
%"struct.std::__1::__compressed_pair_elem.1160" = type { %"struct.std::__1::__hash_node_base.1161"** }
%"struct.std::__1::__hash_node_base.1161" = type { %"struct.std::__1::__hash_node_base.1161"* }
%"struct.std::__1::__compressed_pair_elem.1162" = type { %"class.std::__1::__bucket_list_deallocator.1163" }
%"class.std::__1::__bucket_list_deallocator.1163" = type { %"class.std::__1::__compressed_pair.1164" }
%"class.std::__1::__compressed_pair.1164" = type { %"struct.std::__1::__compressed_pair_elem.21" }
%"class.std::__1::__compressed_pair.1168" = type { %"struct.std::__1::__compressed_pair_elem.1169" }
%"struct.std::__1::__compressed_pair_elem.1169" = type { %"struct.std::__1::__hash_node_base.1161" }
%"class.std::__1::__compressed_pair.1173" = type { %"struct.std::__1::__compressed_pair_elem.21" }
%"class.std::__1::__compressed_pair.1176" = type { %"struct.std::__1::__compressed_pair_elem.33" }
%"class.std::__1::__compressed_pair.1185" = type { %"struct.std::__1::__compressed_pair_elem.1186" }
%"struct.std::__1::__compressed_pair_elem.1186" = type { %"class.std::__1::unique_ptr.1150"* }
%"class.std::__1::deque.1190" = type { %"class.std::__1::__deque_base.1191" }
%"class.std::__1::__deque_base.1191" = type { %"struct.std::__1::__split_buffer.1192", i64, %"class.std::__1::__compressed_pair.1198" }
%"struct.std::__1::__split_buffer.1192" = type { %"struct.cc::PictureLayerTilingSet::FrameVisibleRect"**, %"struct.cc::PictureLayerTilingSet::FrameVisibleRect"**, %"struct.cc::PictureLayerTilingSet::FrameVisibleRect"**, %"class.std::__1::__compressed_pair.1193" }
%"struct.cc::PictureLayerTilingSet::FrameVisibleRect" = type { %"class.gfx::Rect", double }
%"class.std::__1::__compressed_pair.1193" = type { %"struct.std::__1::__compressed_pair_elem.1194" }
%"struct.std::__1::__compressed_pair_elem.1194" = type { %"struct.cc::PictureLayerTilingSet::FrameVisibleRect"** }
%"class.std::__1::__compressed_pair.1198" = type { %"struct.std::__1::__compressed_pair_elem.21" }
%"struct.cc::PictureLayerTilingSet::StateSinceLastTilePriorityUpdate" = type { i8, i8 }
%class.scoped_refptr.1153 = type { %"class.cc::RasterSource"* }
%"class.cc::RasterSource" = type <{ i32 (...)**, %"class.base::RefCountedThreadSafe.1154", [4 x i8], i64, %class.scoped_refptr.1155, i32, i8, i8, [2 x i8], i32, %"class.gfx::Rect", %"class.gfx::Size", i32, float, [4 x i8] }>
%"class.base::RefCountedThreadSafe.1154" = type { %"class.base::subtle::RefCountedThreadSafeBase" }
%class.scoped_refptr.1155 = type { %"class.cc::DisplayItemList"* }
%"class.cc::DisplayItemList" = type opaque
%"class.absl::optional.1205" = type { %"class.absl::optional_internal::optional_data.1206" }
%"class.absl::optional_internal::optional_data.1206" = type { %"class.absl::optional_internal::optional_data_base.1207" }
%"class.absl::optional_internal::optional_data_base.1207" = type { %"class.absl::optional_internal::optional_data_dtor_base.1208" }
%"class.absl::optional_internal::optional_data_dtor_base.1208" = type { i8, %union.anon.1209 }
%union.anon.1209 = type { %"class.gfx::Size" }
%"class.std::__1::vector.1210" = type { %"class.std::__1::__vector_base.1211" }
%"class.std::__1::__vector_base.1211" = type { %"class.cc::PictureLayerTiling"**, %"class.cc::PictureLayerTiling"**, %"class.std::__1::__compressed_pair.1212" }
%"class.std::__1::__compressed_pair.1212" = type { %"struct.std::__1::__compressed_pair_elem.1213" }
%"struct.std::__1::__compressed_pair_elem.1213" = type { %"class.cc::PictureLayerTiling"** }
%"class.base::flat_map.1217" = type { %"class.base::internal::flat_tree.1218" }
%"class.base::internal::flat_tree.1218" = type { %"class.std::__1::vector.1219" }
%"class.std::__1::vector.1219" = type { %"class.std::__1::__vector_base.1220" }
%"class.std::__1::__vector_base.1220" = type { %"struct.std::__1::pair.1221"*, %"struct.std::__1::pair.1221"*, %"class.std::__1::__compressed_pair.1222" }
%"struct.std::__1::pair.1221" = type opaque
%"class.std::__1::__compressed_pair.1222" = type { %"struct.std::__1::__compressed_pair_elem.1223" }
%"struct.std::__1::__compressed_pair_elem.1223" = type { %"struct.std::__1::pair.1221"* }
%"class.cc::TileSizeCalculator" = type { %"class.cc::PictureLayerImpl"*, %"struct.cc::TileSizeCalculator::AffectingParams", %"class.gfx::Size" }
%"struct.cc::TileSizeCalculator::AffectingParams" = type { i32, i8, float, %"class.gfx::Size", i32, %"class.gfx::Size", %"class.gfx::Size", %"class.gfx::Size", %"class.gfx::Size" }
%"class.std::__1::__compressed_pair.1227" = type { %"struct.std::__1::__compressed_pair_elem.1228" }
%"struct.std::__1::__compressed_pair_elem.1228" = type { %"class.cc::PictureLayerImpl"** }
%"class.base::internal::flat_tree.1232" = type { %"class.std::__1::vector.1143" }
%"class.base::internal::flat_tree.598" = type { %"class.std::__1::vector.599" }
%"class.std::__1::vector.599" = type { %"class.std::__1::__vector_base.600" }
%"class.std::__1::__vector_base.600" = type { %"class.viz::SurfaceRange"*, %"class.viz::SurfaceRange"*, %"class.std::__1::__compressed_pair.606" }
%"class.viz::SurfaceRange" = type { %"class.absl::optional.601", %"class.viz::SurfaceId" }
%"class.absl::optional.601" = type { %"class.absl::optional_internal::optional_data.602" }
%"class.absl::optional_internal::optional_data.602" = type { %"class.absl::optional_internal::optional_data_base.603" }
%"class.absl::optional_internal::optional_data_base.603" = type { %"class.absl::optional_internal::optional_data_dtor_base.604" }
%"class.absl::optional_internal::optional_data_dtor_base.604" = type { i8, %union.anon.605 }
%union.anon.605 = type { %"class.viz::SurfaceId" }
%"class.viz::SurfaceId" = type { %"class.viz::FrameSinkId", %"class.viz::LocalSurfaceId" }
%"class.std::__1::__compressed_pair.606" = type { %"struct.std::__1::__compressed_pair_elem.607" }
%"struct.std::__1::__compressed_pair_elem.607" = type { %"class.viz::SurfaceRange"* }
%"class.std::__1::vector.1233" = type { %"class.std::__1::__vector_base.1234" }
%"class.std::__1::__vector_base.1234" = type { %"class.cc::RenderSurfaceImpl"**, %"class.cc::RenderSurfaceImpl"**, %"class.std::__1::__compressed_pair.1235" }
%"class.std::__1::__compressed_pair.1235" = type { %"struct.std::__1::__compressed_pair_elem.1236" }
%"struct.std::__1::__compressed_pair_elem.1236" = type { %"class.cc::RenderSurfaceImpl"** }
%"class.cc::Region" = type { %class.SkRegion }
%class.SkRegion = type { %struct.SkIRect, %"struct.SkRegion::RunHead"* }
%"struct.SkRegion::RunHead" = type opaque
%"class.std::__1::vector.114" = type { %"class.std::__1::__vector_base.115" }
%"class.std::__1::__vector_base.115" = type { %"class.std::__1::unique_ptr.116"*, %"class.std::__1::unique_ptr.116"*, %"class.std::__1::__compressed_pair.117" }
%"class.std::__1::unique_ptr.116" = type { %"class.std::__1::__compressed_pair.1349" }
%"class.std::__1::__compressed_pair.1349" = type { %"struct.std::__1::__compressed_pair_elem.1350" }
%"struct.std::__1::__compressed_pair_elem.1350" = type { %"class.cc::SwapPromise"* }
%"class.cc::SwapPromise" = type { i32 (...)** }
%"class.std::__1::__compressed_pair.117" = type { %"struct.std::__1::__compressed_pair_elem.118" }
%"struct.std::__1::__compressed_pair_elem.118" = type { %"class.std::__1::unique_ptr.116"* }
%"class.std::__1::vector.1240" = type { %"class.std::__1::__vector_base.1241" }
%"class.std::__1::__vector_base.1241" = type { %"class.cc::UIResourceRequest"*, %"class.cc::UIResourceRequest"*, %"class.std::__1::__compressed_pair.1242" }
%"class.cc::UIResourceRequest" = type opaque
%"class.std::__1::__compressed_pair.1242" = type { %"struct.std::__1::__compressed_pair_elem.1243" }
%"struct.std::__1::__compressed_pair_elem.1243" = type { %"class.cc::UIResourceRequest"* }
%"struct.cc::BrowserControlsParams" = type <{ float, float, float, float, i8, i8, i8, i8 }>
%"struct.cc::OverscrollBehavior" = type { i32, i32 }
%class.scoped_refptr.1247 = type { %"class.cc::SyncedProperty.1248"* }
%"class.cc::SyncedProperty.1248" = type <{ %"class.base::RefCounted.1249", %"class.cc::AdditionGroup.1250", %"class.cc::AdditionGroup.1250", %"class.cc::AdditionGroup.1250", %"class.cc::AdditionGroup.1250", %"class.cc::AdditionGroup.1250", i8, [3 x i8] }>
%"class.base::RefCounted.1249" = type { %"class.base::subtle::RefCountedBase" }
%"class.cc::AdditionGroup.1250" = type { float }
%"class.std::__1::unique_ptr.1252" = type { %"class.std::__1::__compressed_pair.1253" }
%"class.std::__1::__compressed_pair.1253" = type { %"struct.std::__1::__compressed_pair_elem.1254" }
%"struct.std::__1::__compressed_pair_elem.1254" = type { %"struct.cc::PendingPageScaleAnimation"* }
%"struct.cc::PendingPageScaleAnimation" = type opaque
%"class.cc::LayerTreeLifecycle" = type { i32 }
%"class.std::__1::vector.633" = type { %"class.std::__1::__vector_base.634" }
%"class.std::__1::__vector_base.634" = type { %"class.base::OnceCallback.635"*, %"class.base::OnceCallback.635"*, %"class.std::__1::__compressed_pair.636" }
%"class.base::OnceCallback.635" = type opaque
%"class.std::__1::__compressed_pair.636" = type { %"struct.std::__1::__compressed_pair_elem.637" }
%"struct.std::__1::__compressed_pair_elem.637" = type { %"class.base::OnceCallback.635"* }
%"class.std::__1::vector.756" = type { %"class.std::__1::__vector_base.757" }
%"class.std::__1::__vector_base.757" = type { %"class.std::__1::unique_ptr.758"*, %"class.std::__1::unique_ptr.758"*, %"class.std::__1::__compressed_pair.759" }
%"class.std::__1::unique_ptr.758" = type { %"class.std::__1::__compressed_pair.1339" }
%"class.std::__1::__compressed_pair.1339" = type { %"struct.std::__1::__compressed_pair_elem.1340" }
%"struct.std::__1::__compressed_pair_elem.1340" = type { %"class.cc::EventMetrics"* }
%"class.cc::EventMetrics" = type { i32, %"class.absl::optional.1341", %"class.base::TickClock"*, [6 x %"class.base::TimeTicks"] }
%"class.absl::optional.1341" = type { %"class.absl::optional_internal::optional_data.1342" }
%"class.absl::optional_internal::optional_data.1342" = type { %"class.absl::optional_internal::optional_data_base.1343" }
%"class.absl::optional_internal::optional_data_base.1343" = type { %"class.absl::optional_internal::optional_data_dtor_base.1344" }
%"class.absl::optional_internal::optional_data_dtor_base.1344" = type { i8, %union.anon.1345 }
%union.anon.1345 = type { i32 }
%"class.std::__1::__compressed_pair.759" = type { %"struct.std::__1::__compressed_pair_elem.760" }
%"struct.std::__1::__compressed_pair_elem.760" = type { %"class.std::__1::unique_ptr.758"* }
%"class.std::__1::unique_ptr.1258" = type { %"class.std::__1::__compressed_pair.1259" }
%"class.std::__1::__compressed_pair.1259" = type { %"struct.std::__1::__compressed_pair_elem.1260" }
%"struct.std::__1::__compressed_pair_elem.1260" = type { %"class.gfx::DelegatedInkMetadata"* }
%"class.gfx::DelegatedInkMetadata" = type <{ %"class.gfx::PointF", double, i32, [4 x i8], %"class.base::TimeTicks", %"class.gfx::RectF", %"class.base::TimeTicks", i8, [7 x i8] }>
%"class.std::__1::vector.1264" = type { %"class.std::__1::__vector_base.1265" }
%"class.std::__1::__vector_base.1265" = type { %"class.std::__1::unique_ptr.1266"*, %"class.std::__1::unique_ptr.1266"*, %"class.std::__1::__compressed_pair.1267" }
%"class.std::__1::unique_ptr.1266" = type opaque
%"class.std::__1::__compressed_pair.1267" = type { %"struct.std::__1::__compressed_pair_elem.1268" }
%"struct.std::__1::__compressed_pair_elem.1268" = type { %"class.std::__1::unique_ptr.1266"* }
%class.SkMatrix = type { [9 x float], i32 }
%"class.viz::CompositorRenderPass" = type <{ %"class.viz::RenderPassInternal", %"class.util::IdType", %"class.viz::SubtreeCaptureId", %"class.gfx::Size", [4 x i8] }>
%"class.viz::RenderPassInternal" = type { %"class.gfx::Rect", %"class.gfx::Rect", %"class.gfx::Transform", %"class.cc::FilterOperations", %"class.cc::FilterOperations", %"class.absl::optional.870", i8, i8, i8, i8, %"class.std::__1::vector.1302", %"class.viz::QuadList", %"class.cc::ListContainer.1316" }
%"class.std::__1::vector.1302" = type { %"class.std::__1::__vector_base.1303" }
%"class.std::__1::__vector_base.1303" = type { %"class.std::__1::unique_ptr.1304"*, %"class.std::__1::unique_ptr.1304"*, %"class.std::__1::__compressed_pair.1305" }
%"class.std::__1::unique_ptr.1304" = type opaque
%"class.std::__1::__compressed_pair.1305" = type { %"struct.std::__1::__compressed_pair_elem.1306" }
%"struct.std::__1::__compressed_pair_elem.1306" = type { %"class.std::__1::unique_ptr.1304"* }
%"class.viz::QuadList" = type { %"class.cc::ListContainer" }
%"class.cc::ListContainer" = type { %"class.cc::ListContainerHelper" }
%"class.cc::ListContainerHelper" = type { %"class.std::__1::unique_ptr.1310" }
%"class.std::__1::unique_ptr.1310" = type { %"class.std::__1::__compressed_pair.1311" }
%"class.std::__1::__compressed_pair.1311" = type { %"struct.std::__1::__compressed_pair_elem.1312" }
%"struct.std::__1::__compressed_pair_elem.1312" = type { %"class.cc::ListContainerHelper::CharAllocator"* }
%"class.cc::ListContainerHelper::CharAllocator" = type opaque
%"class.cc::ListContainer.1316" = type { %"class.cc::ListContainerHelper" }
%"class.util::IdType" = type { %"class.base::StrongAlias" }
%"class.base::StrongAlias" = type { i64 }
%"class.cc::AppendQuadsData" = type { i64, i64, i64, i64, i64, i64, i64, %"class.absl::optional.1320", i8, %"class.std::__1::vector.1325" }
%"class.absl::optional.1320" = type { %"class.absl::optional_internal::optional_data.1321" }
%"class.absl::optional_internal::optional_data.1321" = type { %"class.absl::optional_internal::optional_data_base.1322" }
%"class.absl::optional_internal::optional_data_base.1322" = type { %"class.absl::optional_internal::optional_data_dtor_base.1323" }
%"class.absl::optional_internal::optional_data_dtor_base.1323" = type { i8, %union.anon.1324 }
%union.anon.1324 = type { i32 }
%"class.std::__1::vector.1325" = type { %"class.std::__1::__vector_base.1326" }
%"class.std::__1::__vector_base.1326" = type { %"class.viz::SurfaceId"*, %"class.viz::SurfaceId"*, %"class.std::__1::__compressed_pair.1327" }
%"class.std::__1::__compressed_pair.1327" = type { %"struct.std::__1::__compressed_pair_elem.1328" }
%"struct.std::__1::__compressed_pair_elem.1328" = type { %"class.viz::SurfaceId"* }
%"class.absl::optional.1332" = type { %"class.absl::optional_internal::optional_data.1333" }
%"class.absl::optional_internal::optional_data.1333" = type { %"class.absl::optional_internal::optional_data_base.1334" }
%"class.absl::optional_internal::optional_data_base.1334" = type { %"class.absl::optional_internal::optional_data_dtor_base.1335" }
%"class.absl::optional_internal::optional_data_dtor_base.1335" = type { i8, %union.anon.1336 }
%union.anon.1336 = type { %"class.gfx::Rect" }
%"class.util::IdType.1337" = type { %"class.base::StrongAlias.1338" }
%"class.base::StrongAlias.1338" = type { i32 }
%"class.viz::SharedQuadState" = type <{ %"class.gfx::Transform", %"class.gfx::Rect", %"class.gfx::Rect", %"class.gfx::MaskFilterInfo", %"class.absl::optional.1332", i8, [3 x i8], float, i32, i32, i8, [3 x i8], %"class.absl::optional", float, i8, [3 x i8] }>
%"class.viz::DebugBorderDrawQuad" = type { %"class.viz::DrawQuad.base", i32, i32, [4 x i8] }
%"class.viz::DrawQuad.base" = type <{ i32 (...)**, i32, %"class.gfx::Rect", %"class.gfx::Rect", i8, [3 x i8], %"class.viz::SharedQuadState"*, %"struct.viz::DrawQuad::Resources" }>
%"struct.viz::DrawQuad::Resources" = type { i32, [4 x %"class.util::IdType.1337"] }
%"class.viz::CompositorRenderPassDrawQuad" = type { %"class.viz::RenderPassDrawQuadInternal.base", %"class.util::IdType" }
%"class.viz::RenderPassDrawQuadInternal.base" = type <{ %"class.viz::DrawQuad.base", %"class.gfx::RectF", %"class.gfx::Size", %"class.gfx::Vector2dF", %"class.gfx::PointF", %"class.gfx::RectF", float, i8, i8 }>
%"class.base::trace_event::TraceArguments" = type { i8, [2 x i8], [2 x i8*], [2 x %"union.base::trace_event::TraceValue"] }
%"union.base::trace_event::TraceValue" = type { i64 }
%"class.base::trace_event::ConvertableToTraceFormat" = type { i32 (...)** }
%"class.protozero::HeapBuffered" = type { %"class.protozero::ScatteredHeapBuffer", %"class.protozero::ScatteredStreamWriter", %"class.protozero::RootMessage" }
%"class.protozero::ScatteredHeapBuffer" = type { %"class.protozero::ScatteredStreamWriter::Delegate", i64, i64, %"class.protozero::ScatteredStreamWriter"*, %"class.std::__1::vector.1368", %"class.protozero::ScatteredHeapBuffer::Slice" }
%"class.protozero::ScatteredStreamWriter::Delegate" = type { i32 (...)** }
%"class.std::__1::vector.1368" = type { %"class.std::__1::__vector_base.1369" }
%"class.std::__1::__vector_base.1369" = type { %"class.protozero::ScatteredHeapBuffer::Slice"*, %"class.protozero::ScatteredHeapBuffer::Slice"*, %"class.std::__1::__compressed_pair.1376" }
%"class.std::__1::__compressed_pair.1376" = type { %"struct.std::__1::__compressed_pair_elem.1377" }
%"struct.std::__1::__compressed_pair_elem.1377" = type { %"class.protozero::ScatteredHeapBuffer::Slice"* }
%"class.protozero::ScatteredHeapBuffer::Slice" = type { %"class.std::__1::unique_ptr.1370", i64, i64 }
%"class.std::__1::unique_ptr.1370" = type { %"class.std::__1::__compressed_pair.1371" }
%"class.std::__1::__compressed_pair.1371" = type { %"struct.std::__1::__compressed_pair_elem.1372" }
%"struct.std::__1::__compressed_pair_elem.1372" = type { i8* }
%"class.protozero::ScatteredStreamWriter" = type { %"class.protozero::ScatteredStreamWriter::Delegate"*, %"struct.protozero::ContiguousMemoryRange", i8*, i64 }
%"struct.protozero::ContiguousMemoryRange" = type { i8*, i8* }
%"class.protozero::RootMessage" = type { %"class.perfetto::protos::pbzero::DebugAnnotation.base", %"class.protozero::MessageArena" }
%"class.perfetto::protos::pbzero::DebugAnnotation.base" = type { %"class.protozero::Message.base" }
%"class.protozero::Message.base" = type <{ %"class.protozero::ScatteredStreamWriter"*, %"class.protozero::MessageArena"*, %"class.protozero::Message"*, i8*, i32, i32, i8 }>
%"class.protozero::Message" = type <{ %"class.protozero::ScatteredStreamWriter"*, %"class.protozero::MessageArena"*, %"class.protozero::Message"*, i8*, i32, i32, i8, [7 x i8] }>
%"class.protozero::MessageArena" = type { %"class.std::__1::list.1381" }
%"class.std::__1::list.1381" = type { %"class.std::__1::__list_imp.1382" }
%"class.std::__1::__list_imp.1382" = type { %"struct.std::__1::__list_node_base.1383", %"class.std::__1::__compressed_pair.1384" }
%"struct.std::__1::__list_node_base.1383" = type { %"struct.std::__1::__list_node_base.1383"*, %"struct.std::__1::__list_node_base.1383"* }
%"class.std::__1::__compressed_pair.1384" = type { %"struct.std::__1::__compressed_pair_elem.21" }

$_ZN20trace_event_internal13AddTraceEventImEEN4base11trace_event16TraceEventHandleEcPKhPKcS7_yjyS7_OT_ = comdat any

@_ZTVN2cc17RenderSurfaceImplE = hidden unnamed_addr constant { [4 x i8*] } { [4 x i8*] [i8* null, i8* null, i8* bitcast (void (%"class.cc::RenderSurfaceImpl"*)* @_ZN2cc17RenderSurfaceImplD2Ev to i8*), i8* bitcast (void (%"class.cc::RenderSurfaceImpl"*)* @_ZN2cc17RenderSurfaceImplD0Ev to i8*)] }, align 8
@__const._ZN2cc17RenderSurfaceImpl38CalculateClippedAccumulatedContentRectEv.target_to_surface = private unnamed_addr constant %"class.gfx::Transform" { %class.SkMatrix44 <{ [4 x [4 x float]] [[4 x float] [float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000], [4 x float] [float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000], [4 x float] [float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000], [4 x float] [float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000]], i8 -86, [3 x i8] c"\AA\AA\AA" }> }, align 4
@_ZN4base11trace_event16CategoryRegistry11categories_E = external global [300 x %"struct.base::trace_event::TraceCategory"], align 16
@.str = private unnamed_addr constant [31 x i8] c"RenderSurfaceImpl::AppendQuads\00", align 1
@.str.1 = private unnamed_addr constant [28 x i8] c"mask_layer_gpu_memory_usage\00", align 1
@constinit = private unnamed_addr constant [4 x [4 x float]] [[4 x float] [float 1.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00], [4 x float] [float 0.000000e+00, float 1.000000e+00, float 0.000000e+00, float 0.000000e+00], [4 x float] [float 0.000000e+00, float 0.000000e+00, float 1.000000e+00, float 0.000000e+00], [4 x float] [float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 1.000000e+00]], align 4

@_ZN2cc17RenderSurfaceImplC1EPNS_13LayerTreeImplEm = hidden unnamed_addr alias void (%"class.cc::RenderSurfaceImpl"*, %"class.cc::LayerTreeImpl"*, i64), void (%"class.cc::RenderSurfaceImpl"*, %"class.cc::LayerTreeImpl"*, i64)* @_ZN2cc17RenderSurfaceImplC2EPNS_13LayerTreeImplEm
@_ZN2cc17RenderSurfaceImplD1Ev = hidden unnamed_addr alias void (%"class.cc::RenderSurfaceImpl"*), void (%"class.cc::RenderSurfaceImpl"*)* @_ZN2cc17RenderSurfaceImplD2Ev
@_ZN2cc17RenderSurfaceImpl14DrawPropertiesC1Ev = hidden unnamed_addr alias void (%"struct.cc::RenderSurfaceImpl::DrawProperties"*), void (%"struct.cc::RenderSurfaceImpl::DrawProperties"*)* @_ZN2cc17RenderSurfaceImpl14DrawPropertiesC2Ev
@_ZN2cc17RenderSurfaceImpl14DrawPropertiesD1Ev = hidden unnamed_addr alias void (%"struct.cc::RenderSurfaceImpl::DrawProperties"*), void (%"struct.cc::RenderSurfaceImpl::DrawProperties"*)* @_ZN2cc17RenderSurfaceImpl14DrawPropertiesD2Ev

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2cc17RenderSurfaceImplC2EPNS_13LayerTreeImplEm(%"class.cc::RenderSurfaceImpl"*, %"class.cc::LayerTreeImpl"*, i64) unnamed_addr #0 align 2 {
  %4 = getelementptr inbounds %"class.cc::RenderSurfaceImpl", %"class.cc::RenderSurfaceImpl"* %0, i64 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [4 x i8*] }, { [4 x i8*] }* @_ZTVN2cc17RenderSurfaceImplE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %4, align 8
  %5 = getelementptr inbounds %"class.cc::RenderSurfaceImpl", %"class.cc::RenderSurfaceImpl"* %0, i64 0, i32 1
  store %"class.cc::LayerTreeImpl"* %1, %"class.cc::LayerTreeImpl"** %5, align 8
  %6 = getelementptr inbounds %"class.cc::RenderSurfaceImpl", %"class.cc::RenderSurfaceImpl"* %0, i64 0, i32 2
  store i64 %2, i64* %6, align 8
  %7 = getelementptr inbounds %"class.cc::RenderSurfaceImpl", %"class.cc::RenderSurfaceImpl"* %0, i64 0, i32 3
  store i32 -1, i32* %7, align 8
  %8 = getelementptr inbounds %"class.cc::RenderSurfaceImpl", %"class.cc::RenderSurfaceImpl"* %0, i64 0, i32 4, i32 1
  %9 = bitcast %"class.gfx::Transform"* %8 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %9, i8* align 4 bitcast ([4 x [4 x float]]* @constinit to i8*), i64 64, i1 false) #11
  %10 = getelementptr inbounds %"class.cc::RenderSurfaceImpl", %"class.cc::RenderSurfaceImpl"* %0, i64 0, i32 4, i32 1, i32 0, i32 1
  store i8 0, i8* %10, align 4
  %11 = getelementptr inbounds %"class.cc::RenderSurfaceImpl", %"class.cc::RenderSurfaceImpl"* %0, i64 0, i32 4, i32 2
  %12 = bitcast %"class.gfx::Transform"* %11 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %12, i8* align 4 bitcast ([4 x [4 x float]]* @constinit to i8*), i64 64, i1 false) #11
  %13 = getelementptr inbounds %"class.cc::RenderSurfaceImpl", %"class.cc::RenderSurfaceImpl"* %0, i64 0, i32 4, i32 2, i32 0, i32 1
  store i8 0, i8* %13, align 4
  %14 = getelementptr inbounds %"class.cc::RenderSurfaceImpl", %"class.cc::RenderSurfaceImpl"* %0, i64 0, i32 4, i32 3
  %15 = getelementptr inbounds %"class.cc::RenderSurfaceImpl", %"class.cc::RenderSurfaceImpl"* %0, i64 0, i32 4, i32 6
  %16 = bitcast %"class.gfx::MaskFilterInfo"* %15 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 4 %16, i8 0, i64 52, i1 false) #11
  %17 = getelementptr inbounds %"class.cc::RenderSurfaceImpl", %"class.cc::RenderSurfaceImpl"* %0, i64 0, i32 4, i32 0
  %18 = bitcast %"class.gfx::Rect"* %14 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 4 %18, i8 0, i64 32, i1 false) #11
  store float 1.000000e+00, float* %17, align 4
  %19 = getelementptr inbounds %"class.cc::RenderSurfaceImpl", %"class.cc::RenderSurfaceImpl"* %0, i64 0, i32 4, i32 5
  %20 = load i8, i8* %19, align 4
  %21 = and i8 %20, -2
  store i8 %21, i8* %19, align 4
  %22 = getelementptr inbounds %"class.cc::RenderSurfaceImpl", %"class.cc::RenderSurfaceImpl"* %0, i64 0, i32 5
  %23 = getelementptr inbounds %"class.cc::RenderSurfaceImpl", %"class.cc::RenderSurfaceImpl"* %0, i64 0, i32 7
  %24 = bitcast %"class.gfx::Rect"* %22 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 4 %24, i8 0, i64 20, i1 false)
  %25 = load i8, i8* %23, align 4
  %26 = and i8 %25, -64
  %27 = or i8 %26, 32
  store i8 %27, i8* %23, align 4
  %28 = getelementptr inbounds %"class.cc::RenderSurfaceImpl", %"class.cc::RenderSurfaceImpl"* %0, i64 0, i32 8
  tail call void @_ZN2cc9OcclusionC1Ev(%"class.cc::Occlusion"* %28) #11
  %29 = getelementptr inbounds %"class.cc::RenderSurfaceImpl", %"class.cc::RenderSurfaceImpl"* %0, i64 0, i32 9
  %30 = getelementptr inbounds %"class.cc::RenderSurfaceImpl", %"class.cc::RenderSurfaceImpl"* %0, i64 0, i32 10
  %31 = bitcast %"class.std::__1::unique_ptr.1272"* %30 to i64*
  %32 = bitcast %"class.cc::RenderSurfaceImpl"** %29 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %32, i8 0, i64 16, i1 false)
  %33 = tail call %"class.cc::DamageTracker"* @_ZN2cc13DamageTracker6CreateEv() #11
  %34 = ptrtoint %"class.cc::DamageTracker"* %33 to i64
  %35 = getelementptr inbounds %"class.std::__1::unique_ptr.1272", %"class.std::__1::unique_ptr.1272"* %30, i64 0, i32 0, i32 0, i32 0
  %36 = load %"class.cc::DamageTracker"*, %"class.cc::DamageTracker"** %35, align 8
  store i64 %34, i64* %31, align 8
  %37 = icmp eq %"class.cc::DamageTracker"* %36, null
  br i1 %37, label %40, label %38

38:                                               ; preds = %3
  tail call void @_ZN2cc13DamageTrackerD1Ev(%"class.cc::DamageTracker"* nonnull %36) #11
  %39 = bitcast %"class.cc::DamageTracker"* %36 to i8*
  tail call void @_ZdlPv(i8* %39) #12
  br label %40

40:                                               ; preds = %38, %3
  ret void
}

declare void @_ZN2cc9OcclusionC1Ev(%"class.cc::Occlusion"*) unnamed_addr #1

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #2

declare %"class.cc::DamageTracker"* @_ZN2cc13DamageTracker6CreateEv() local_unnamed_addr #1

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2cc17RenderSurfaceImplD2Ev(%"class.cc::RenderSurfaceImpl"*) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.cc::RenderSurfaceImpl", %"class.cc::RenderSurfaceImpl"* %0, i64 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [4 x i8*] }, { [4 x i8*] }* @_ZTVN2cc17RenderSurfaceImplE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %2, align 8
  %3 = getelementptr inbounds %"class.cc::RenderSurfaceImpl", %"class.cc::RenderSurfaceImpl"* %0, i64 0, i32 10, i32 0, i32 0, i32 0
  %4 = load %"class.cc::DamageTracker"*, %"class.cc::DamageTracker"** %3, align 8
  store %"class.cc::DamageTracker"* null, %"class.cc::DamageTracker"** %3, align 8
  %5 = icmp eq %"class.cc::DamageTracker"* %4, null
  br i1 %5, label %8, label %6

6:                                                ; preds = %1
  tail call void @_ZN2cc13DamageTrackerD1Ev(%"class.cc::DamageTracker"* nonnull %4) #11
  %7 = bitcast %"class.cc::DamageTracker"* %4 to i8*
  tail call void @_ZdlPv(i8* %7) #12
  br label %8

8:                                                ; preds = %1, %6
  %9 = getelementptr inbounds %"class.cc::RenderSurfaceImpl", %"class.cc::RenderSurfaceImpl"* %0, i64 0, i32 8, i32 2
  tail call void @_ZN2cc20SimpleEnclosedRegionD1Ev(%"class.cc::SimpleEnclosedRegion"* %9) #11
  %10 = getelementptr inbounds %"class.cc::RenderSurfaceImpl", %"class.cc::RenderSurfaceImpl"* %0, i64 0, i32 8, i32 1
  tail call void @_ZN2cc20SimpleEnclosedRegionD1Ev(%"class.cc::SimpleEnclosedRegion"* %10) #11
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2cc17RenderSurfaceImplD0Ev(%"class.cc::RenderSurfaceImpl"*) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.cc::RenderSurfaceImpl", %"class.cc::RenderSurfaceImpl"* %0, i64 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [4 x i8*] }, { [4 x i8*] }* @_ZTVN2cc17RenderSurfaceImplE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %2, align 8
  %3 = getelementptr inbounds %"class.cc::RenderSurfaceImpl", %"class.cc::RenderSurfaceImpl"* %0, i64 0, i32 10, i32 0, i32 0, i32 0
  %4 = load %"class.cc::DamageTracker"*, %"class.cc::DamageTracker"** %3, align 8
  store %"class.cc::DamageTracker"* null, %"class.cc::DamageTracker"** %3, align 8
  %5 = icmp eq %"class.cc::DamageTracker"* %4, null
  br i1 %5, label %8, label %6

6:                                                ; preds = %1
  tail call void @_ZN2cc13DamageTrackerD1Ev(%"class.cc::DamageTracker"* nonnull %4) #11
  %7 = bitcast %"class.cc::DamageTracker"* %4 to i8*
  tail call void @_ZdlPv(i8* %7) #12
  br label %8

8:                                                ; preds = %1, %6
  %9 = getelementptr inbounds %"class.cc::RenderSurfaceImpl", %"class.cc::RenderSurfaceImpl"* %0, i64 0, i32 8, i32 2
  tail call void @_ZN2cc20SimpleEnclosedRegionD1Ev(%"class.cc::SimpleEnclosedRegion"* %9) #11
  %10 = getelementptr inbounds %"class.cc::RenderSurfaceImpl", %"class.cc::RenderSurfaceImpl"* %0, i64 0, i32 8, i32 1
  tail call void @_ZN2cc20SimpleEnclosedRegionD1Ev(%"class.cc::SimpleEnclosedRegion"* %10) #11
  %11 = bitcast %"class.cc::RenderSurfaceImpl"* %0 to i8*
  tail call void @_ZdlPv(i8* %11) #12
  ret void
}

; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(i8*) local_unnamed_addr #3

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden %"class.cc::RenderSurfaceImpl"* @_ZN2cc17RenderSurfaceImpl13render_targetEv(%"class.cc::RenderSurfaceImpl"* readonly) local_unnamed_addr #4 align 2 {
  %2 = getelementptr inbounds %"class.cc::RenderSurfaceImpl", %"class.cc::RenderSurfaceImpl"* %0, i64 0, i32 1
  %3 = load %"class.cc::LayerTreeImpl"*, %"class.cc::LayerTreeImpl"** %2, align 8
  %4 = getelementptr inbounds %"class.cc::RenderSurfaceImpl", %"class.cc::RenderSurfaceImpl"* %0, i64 0, i32 3
  %5 = load i32, i32* %4, align 8
  %6 = icmp sgt i32 %5, -1
  br i1 %6, label %7, label %12

7:                                                ; preds = %1
  %8 = sext i32 %5 to i64
  %9 = getelementptr inbounds %"class.cc::LayerTreeImpl", %"class.cc::LayerTreeImpl"* %3, i64 0, i32 5, i32 4, i32 0, i32 1, i32 0, i32 0
  %10 = load %"struct.cc::EffectNode"*, %"struct.cc::EffectNode"** %9, align 8
  %11 = getelementptr inbounds %"struct.cc::EffectNode", %"struct.cc::EffectNode"* %10, i64 %8
  br label %12

12:                                               ; preds = %1, %7
  %13 = phi %"struct.cc::EffectNode"* [ %11, %7 ], [ null, %1 ]
  %14 = getelementptr inbounds %"struct.cc::EffectNode", %"struct.cc::EffectNode"* %13, i64 0, i32 20
  %15 = load i32, i32* %14, align 8
  %16 = icmp eq i32 %15, 0
  br i1 %16, label %23, label %17

17:                                               ; preds = %12
  %18 = sext i32 %15 to i64
  %19 = getelementptr inbounds %"class.cc::LayerTreeImpl", %"class.cc::LayerTreeImpl"* %3, i64 0, i32 5, i32 4, i32 2, i32 0, i32 0
  %20 = load %"class.std::__1::unique_ptr.906"*, %"class.std::__1::unique_ptr.906"** %19, align 8
  %21 = getelementptr inbounds %"class.std::__1::unique_ptr.906", %"class.std::__1::unique_ptr.906"* %20, i64 %18, i32 0, i32 0, i32 0
  %22 = load %"class.cc::RenderSurfaceImpl"*, %"class.cc::RenderSurfaceImpl"** %21, align 8
  br label %23

23:                                               ; preds = %12, %17
  %24 = phi %"class.cc::RenderSurfaceImpl"* [ %22, %17 ], [ %0, %12 ]
  ret %"class.cc::RenderSurfaceImpl"* %24
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden i32 @_ZNK2cc17RenderSurfaceImpl15EffectTreeIndexEv(%"class.cc::RenderSurfaceImpl"* nocapture readonly) local_unnamed_addr #4 align 2 {
  %2 = getelementptr inbounds %"class.cc::RenderSurfaceImpl", %"class.cc::RenderSurfaceImpl"* %0, i64 0, i32 3
  %3 = load i32, i32* %2, align 8
  ret i32 %3
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden %"class.cc::RenderSurfaceImpl"* @_ZNK2cc17RenderSurfaceImpl13render_targetEv(%"class.cc::RenderSurfaceImpl"* readonly) local_unnamed_addr #4 align 2 {
  %2 = getelementptr inbounds %"class.cc::RenderSurfaceImpl", %"class.cc::RenderSurfaceImpl"* %0, i64 0, i32 1
  %3 = load %"class.cc::LayerTreeImpl"*, %"class.cc::LayerTreeImpl"** %2, align 8
  %4 = getelementptr inbounds %"class.cc::RenderSurfaceImpl", %"class.cc::RenderSurfaceImpl"* %0, i64 0, i32 3
  %5 = load i32, i32* %4, align 8
  %6 = icmp sgt i32 %5, -1
  br i1 %6, label %7, label %12

7:                                                ; preds = %1
  %8 = sext i32 %5 to i64
  %9 = getelementptr inbounds %"class.cc::LayerTreeImpl", %"class.cc::LayerTreeImpl"* %3, i64 0, i32 5, i32 4, i32 0, i32 1, i32 0, i32 0
  %10 = load %"struct.cc::EffectNode"*, %"struct.cc::EffectNode"** %9, align 8
  %11 = getelementptr inbounds %"struct.cc::EffectNode", %"struct.cc::EffectNode"* %10, i64 %8
  br label %12

12:                                               ; preds = %1, %7
  %13 = phi %"struct.cc::EffectNode"* [ %11, %7 ], [ null, %1 ]
  %14 = getelementptr inbounds %"struct.cc::EffectNode", %"struct.cc::EffectNode"* %13, i64 0, i32 20
  %15 = load i32, i32* %14, align 8
  %16 = icmp eq i32 %15, 0
  br i1 %16, label %23, label %17

17:                                               ; preds = %12
  %18 = sext i32 %15 to i64
  %19 = getelementptr inbounds %"class.cc::LayerTreeImpl", %"class.cc::LayerTreeImpl"* %3, i64 0, i32 5, i32 4, i32 2, i32 0, i32 0
  %20 = load %"class.std::__1::unique_ptr.906"*, %"class.std::__1::unique_ptr.906"** %19, align 8
  %21 = getelementptr inbounds %"class.std::__1::unique_ptr.906", %"class.std::__1::unique_ptr.906"* %20, i64 %18, i32 0, i32 0, i32 0
  %22 = load %"class.cc::RenderSurfaceImpl"*, %"class.cc::RenderSurfaceImpl"** %21, align 8
  br label %23

23:                                               ; preds = %12, %17
  %24 = phi %"class.cc::RenderSurfaceImpl"* [ %22, %17 ], [ %0, %12 ]
  ret %"class.cc::RenderSurfaceImpl"* %24
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2cc17RenderSurfaceImpl14DrawPropertiesC2Ev(%"struct.cc::RenderSurfaceImpl::DrawProperties"* nocapture) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"struct.cc::RenderSurfaceImpl::DrawProperties", %"struct.cc::RenderSurfaceImpl::DrawProperties"* %0, i64 0, i32 1
  %3 = bitcast %"class.gfx::Transform"* %2 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %3, i8* align 4 bitcast ([4 x [4 x float]]* @constinit to i8*), i64 64, i1 false) #11
  %4 = getelementptr inbounds %"struct.cc::RenderSurfaceImpl::DrawProperties", %"struct.cc::RenderSurfaceImpl::DrawProperties"* %0, i64 0, i32 1, i32 0, i32 1
  store i8 0, i8* %4, align 4
  %5 = getelementptr inbounds %"struct.cc::RenderSurfaceImpl::DrawProperties", %"struct.cc::RenderSurfaceImpl::DrawProperties"* %0, i64 0, i32 2
  %6 = bitcast %"class.gfx::Transform"* %5 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %6, i8* align 4 bitcast ([4 x [4 x float]]* @constinit to i8*), i64 64, i1 false) #11
  %7 = getelementptr inbounds %"struct.cc::RenderSurfaceImpl::DrawProperties", %"struct.cc::RenderSurfaceImpl::DrawProperties"* %0, i64 0, i32 2, i32 0, i32 1
  store i8 0, i8* %7, align 4
  %8 = getelementptr inbounds %"struct.cc::RenderSurfaceImpl::DrawProperties", %"struct.cc::RenderSurfaceImpl::DrawProperties"* %0, i64 0, i32 3
  %9 = getelementptr inbounds %"struct.cc::RenderSurfaceImpl::DrawProperties", %"struct.cc::RenderSurfaceImpl::DrawProperties"* %0, i64 0, i32 6
  %10 = bitcast %"class.gfx::MaskFilterInfo"* %9 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 4 %10, i8 0, i64 52, i1 false) #11
  %11 = getelementptr inbounds %"struct.cc::RenderSurfaceImpl::DrawProperties", %"struct.cc::RenderSurfaceImpl::DrawProperties"* %0, i64 0, i32 0
  %12 = bitcast %"class.gfx::Rect"* %8 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 4 %12, i8 0, i64 32, i1 false)
  store float 1.000000e+00, float* %11, align 4
  %13 = getelementptr inbounds %"struct.cc::RenderSurfaceImpl::DrawProperties", %"struct.cc::RenderSurfaceImpl::DrawProperties"* %0, i64 0, i32 5
  %14 = load i8, i8* %13, align 4
  %15 = and i8 %14, -2
  store i8 %15, i8* %13, align 4
  ret void
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden void @_ZN2cc17RenderSurfaceImpl14DrawPropertiesD2Ev(%"struct.cc::RenderSurfaceImpl::DrawProperties"* nocapture) unnamed_addr #5 align 2 {
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden { <2 x float>, <2 x float> } @_ZNK2cc17RenderSurfaceImpl19DrawableContentRectEv(%"class.cc::RenderSurfaceImpl"*) local_unnamed_addr #0 align 2 {
  %2 = alloca { i64, i64 }, align 8
  %3 = bitcast { i64, i64 }* %2 to %"class.gfx::Rect"*
  %4 = alloca %class.SkMatrix, align 4
  %5 = alloca %"class.gfx::Transform", align 4
  %6 = alloca { <2 x float>, <2 x float> }, align 8
  %7 = bitcast { <2 x float>, <2 x float> }* %6 to %"class.gfx::RectF"*
  %8 = alloca %"class.gfx::RectF", align 4
  %9 = alloca %"class.gfx::RectF", align 4
  %10 = getelementptr inbounds %"class.cc::RenderSurfaceImpl", %"class.cc::RenderSurfaceImpl"* %0, i64 0, i32 4, i32 3, i32 1
  %11 = bitcast %"class.gfx::Size"* %10 to i64*
  %12 = load i64, i64* %11, align 4
  %13 = trunc i64 %12 to i32
  %14 = icmp eq i32 %13, 0
  %15 = icmp ult i64 %12, 4294967296
  %16 = or i1 %15, %14
  br i1 %16, label %150, label %17

17:                                               ; preds = %1
  %18 = getelementptr inbounds %"class.cc::RenderSurfaceImpl", %"class.cc::RenderSurfaceImpl"* %0, i64 0, i32 4, i32 3
  %19 = bitcast %"class.gfx::Rect"* %18 to i64*
  %20 = load i64, i64* %19, align 4
  %21 = bitcast { i64, i64 }* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %21) #11
  %22 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %2, i64 0, i32 1
  %23 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %2, i64 0, i32 0
  store i64 %20, i64* %23, align 8
  store i64 %12, i64* %22, align 8
  %24 = getelementptr inbounds %"class.cc::RenderSurfaceImpl", %"class.cc::RenderSurfaceImpl"* %0, i64 0, i32 3
  %25 = load i32, i32* %24, align 8
  %26 = icmp sgt i32 %25, -1
  br i1 %26, label %27, label %34

27:                                               ; preds = %17
  %28 = getelementptr inbounds %"class.cc::RenderSurfaceImpl", %"class.cc::RenderSurfaceImpl"* %0, i64 0, i32 1
  %29 = load %"class.cc::LayerTreeImpl"*, %"class.cc::LayerTreeImpl"** %28, align 8
  %30 = sext i32 %25 to i64
  %31 = getelementptr inbounds %"class.cc::LayerTreeImpl", %"class.cc::LayerTreeImpl"* %29, i64 0, i32 5, i32 4, i32 0, i32 1, i32 0, i32 0
  %32 = load %"struct.cc::EffectNode"*, %"struct.cc::EffectNode"** %31, align 8
  %33 = getelementptr inbounds %"struct.cc::EffectNode", %"struct.cc::EffectNode"* %32, i64 %30
  br label %34

34:                                               ; preds = %17, %27
  %35 = phi %"struct.cc::EffectNode"* [ %33, %27 ], [ null, %17 ]
  %36 = getelementptr inbounds %"struct.cc::EffectNode", %"struct.cc::EffectNode"* %35, i64 0, i32 5
  %37 = tail call zeroext i1 @_ZNK2cc16FilterOperations7IsEmptyEv(%"class.cc::FilterOperations"* %36) #11
  br i1 %37, label %63, label %38

38:                                               ; preds = %34
  %39 = bitcast %class.SkMatrix* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %39) #11
  %40 = bitcast %"class.gfx::Transform"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 68, i8* nonnull %40) #11
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %40, i8* align 4 bitcast (%"class.gfx::Transform"* @__const._ZN2cc17RenderSurfaceImpl38CalculateClippedAccumulatedContentRectEv.target_to_surface to i8*), i64 68, i1 false) #11
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %40, i8* align 4 bitcast ([4 x [4 x float]]* @constinit to i8*), i64 64, i1 false) #11
  %41 = getelementptr inbounds %"class.gfx::Transform", %"class.gfx::Transform"* %5, i64 0, i32 0, i32 1
  store i8 0, i8* %41, align 4, !alias.scope !2
  %42 = load i32, i32* %24, align 8, !noalias !2
  %43 = icmp sgt i32 %42, -1
  br i1 %43, label %44, label %52

44:                                               ; preds = %38
  %45 = getelementptr inbounds %"class.cc::RenderSurfaceImpl", %"class.cc::RenderSurfaceImpl"* %0, i64 0, i32 1
  %46 = load %"class.cc::LayerTreeImpl"*, %"class.cc::LayerTreeImpl"** %45, align 8, !noalias !2
  %47 = sext i32 %42 to i64
  %48 = getelementptr inbounds %"class.cc::LayerTreeImpl", %"class.cc::LayerTreeImpl"* %46, i64 0, i32 5, i32 4, i32 0, i32 1, i32 0, i32 0
  %49 = load %"struct.cc::EffectNode"*, %"struct.cc::EffectNode"** %48, align 8
  %50 = getelementptr inbounds %"struct.cc::EffectNode", %"struct.cc::EffectNode"* %49, i64 %47, i32 13, i32 0
  %51 = getelementptr inbounds %"struct.cc::EffectNode", %"struct.cc::EffectNode"* %49, i64 %47
  br label %52

52:                                               ; preds = %38, %44
  %53 = phi float* [ %50, %44 ], [ inttoptr (i64 208 to float*), %38 ]
  %54 = phi %"struct.cc::EffectNode"* [ %51, %44 ], [ null, %38 ]
  %55 = load float, float* %53, align 4, !noalias !2
  %56 = getelementptr inbounds %"struct.cc::EffectNode", %"struct.cc::EffectNode"* %54, i64 0, i32 13, i32 1
  %57 = load float, float* %56, align 4, !noalias !2
  call void @_ZN3gfx9Transform5ScaleEff(%"class.gfx::Transform"* nonnull %5, float %55, float %57) #11
  %58 = getelementptr inbounds %"class.gfx::Transform", %"class.gfx::Transform"* %5, i64 0, i32 0
  call void @_ZNK10SkMatrix44cv8SkMatrixEv(%class.SkMatrix* nonnull sret %4, %class.SkMatrix44* nonnull %58) #11
  %59 = call { i64, i64 } @_ZNK2cc16FilterOperations7MapRectERKN3gfx4RectERK8SkMatrix(%"class.cc::FilterOperations"* %36, %"class.gfx::Rect"* nonnull dereferenceable(16) %3, %class.SkMatrix* nonnull dereferenceable(40) %4) #11
  %60 = extractvalue { i64, i64 } %59, 0
  %61 = extractvalue { i64, i64 } %59, 1
  store i64 %60, i64* %23, align 8
  store i64 %61, i64* %22, align 8
  call void @llvm.lifetime.end.p0i8(i64 68, i8* nonnull %40) #11
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %39) #11
  %62 = trunc i64 %61 to i32
  br label %63

63:                                               ; preds = %52, %34
  %64 = phi i64 [ %61, %52 ], [ %12, %34 ]
  %65 = phi i32 [ %62, %52 ], [ %13, %34 ]
  %66 = phi i64 [ %60, %52 ], [ %20, %34 ]
  %67 = trunc i64 %66 to i32
  %68 = lshr i64 %66, 32
  %69 = trunc i64 %68 to i32
  %70 = lshr i64 %64, 32
  %71 = trunc i64 %70 to i32
  %72 = bitcast { <2 x float>, <2 x float> }* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %72) #11
  %73 = getelementptr inbounds { <2 x float>, <2 x float> }, { <2 x float>, <2 x float> }* %6, i64 0, i32 0, i64 0
  %74 = getelementptr inbounds %"class.gfx::RectF", %"class.gfx::RectF"* %7, i64 0, i32 0, i32 1
  %75 = getelementptr inbounds { <2 x float>, <2 x float> }, { <2 x float>, <2 x float> }* %6, i64 0, i32 1, i64 0
  %76 = getelementptr inbounds %"class.gfx::RectF", %"class.gfx::RectF"* %7, i64 0, i32 1, i32 1
  %77 = getelementptr inbounds %"class.cc::RenderSurfaceImpl", %"class.cc::RenderSurfaceImpl"* %0, i64 0, i32 4, i32 1
  %78 = bitcast %"class.gfx::RectF"* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %78) #11
  %79 = sitofp i32 %67 to float
  %80 = sitofp i32 %69 to float
  %81 = getelementptr inbounds %"class.gfx::RectF", %"class.gfx::RectF"* %8, i64 0, i32 0, i32 0
  store float %79, float* %81, align 4
  %82 = getelementptr inbounds %"class.gfx::RectF", %"class.gfx::RectF"* %8, i64 0, i32 0, i32 1
  store float %80, float* %82, align 4
  %83 = getelementptr inbounds %"class.gfx::RectF", %"class.gfx::RectF"* %8, i64 0, i32 1, i32 0
  %84 = icmp sgt i32 %65, 0
  %85 = select i1 %84, i32 %65, i32 0
  %86 = sitofp i32 %85 to float
  store float %86, float* %83, align 4
  %87 = getelementptr inbounds %"class.gfx::RectF", %"class.gfx::RectF"* %8, i64 0, i32 1, i32 1
  %88 = icmp sgt i32 %71, 0
  %89 = select i1 %88, i32 %71, i32 0
  %90 = sitofp i32 %89 to float
  store float %90, float* %87, align 4
  %91 = call { <2 x float>, <2 x float> } @_ZN2cc8MathUtil14MapClippedRectERKN3gfx9TransformERKNS1_5RectFE(%"class.gfx::Transform"* dereferenceable(68) %77, %"class.gfx::RectF"* nonnull dereferenceable(16) %8) #11
  %92 = getelementptr inbounds { <2 x float>, <2 x float> }, { <2 x float>, <2 x float> }* %6, i64 0, i32 0
  %93 = extractvalue { <2 x float>, <2 x float> } %91, 0
  store <2 x float> %93, <2 x float>* %92, align 8
  %94 = getelementptr inbounds { <2 x float>, <2 x float> }, { <2 x float>, <2 x float> }* %6, i64 0, i32 1
  %95 = extractvalue { <2 x float>, <2 x float> } %91, 1
  store <2 x float> %95, <2 x float>* %94, align 8
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %78) #11
  %96 = call zeroext i1 @_ZNK2cc16FilterOperations7IsEmptyEv(%"class.cc::FilterOperations"* %36) #11
  %97 = extractelement <2 x float> %93, i32 0
  br i1 %96, label %130, label %98

98:                                               ; preds = %63
  %99 = getelementptr inbounds %"class.cc::RenderSurfaceImpl", %"class.cc::RenderSurfaceImpl"* %0, i64 0, i32 4, i32 5
  %100 = load i8, i8* %99, align 4
  %101 = and i8 %100, 1
  %102 = icmp eq i8 %101, 0
  br i1 %102, label %130, label %103

103:                                              ; preds = %98
  %104 = bitcast %"class.gfx::RectF"* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %104) #11
  %105 = getelementptr inbounds %"class.cc::RenderSurfaceImpl", %"class.cc::RenderSurfaceImpl"* %0, i64 0, i32 4, i32 4
  %106 = bitcast %"class.gfx::Rect"* %105 to i64*
  %107 = load i64, i64* %106, align 4
  %108 = getelementptr inbounds %"class.cc::RenderSurfaceImpl", %"class.cc::RenderSurfaceImpl"* %0, i64 0, i32 4, i32 4, i32 1
  %109 = bitcast %"class.gfx::Size"* %108 to i64*
  %110 = load i64, i64* %109, align 4
  %111 = trunc i64 %107 to i32
  %112 = lshr i64 %107, 32
  %113 = trunc i64 %112 to i32
  %114 = sitofp i32 %111 to float
  %115 = sitofp i32 %113 to float
  %116 = trunc i64 %110 to i32
  %117 = lshr i64 %110, 32
  %118 = trunc i64 %117 to i32
  %119 = getelementptr inbounds %"class.gfx::RectF", %"class.gfx::RectF"* %9, i64 0, i32 0, i32 0
  store float %114, float* %119, align 4
  %120 = getelementptr inbounds %"class.gfx::RectF", %"class.gfx::RectF"* %9, i64 0, i32 0, i32 1
  store float %115, float* %120, align 4
  %121 = getelementptr inbounds %"class.gfx::RectF", %"class.gfx::RectF"* %9, i64 0, i32 1, i32 0
  %122 = icmp sgt i32 %116, 0
  %123 = select i1 %122, i32 %116, i32 0
  %124 = sitofp i32 %123 to float
  store float %124, float* %121, align 4
  %125 = getelementptr inbounds %"class.gfx::RectF", %"class.gfx::RectF"* %9, i64 0, i32 1, i32 1
  %126 = icmp sgt i32 %118, 0
  %127 = select i1 %126, i32 %118, i32 0
  %128 = sitofp i32 %127 to float
  store float %128, float* %125, align 4
  call void @_ZN3gfx5RectF9IntersectERKS0_(%"class.gfx::RectF"* nonnull %7, %"class.gfx::RectF"* nonnull dereferenceable(16) %9) #11
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %104) #11
  %129 = load float, float* %73, align 8
  br label %130

130:                                              ; preds = %98, %103, %63
  %131 = phi float [ %97, %98 ], [ %129, %103 ], [ %97, %63 ]
  %132 = fcmp uno float %131, 0.000000e+00
  br i1 %132, label %147, label %133

133:                                              ; preds = %130
  %134 = load float, float* %74, align 4
  %135 = fcmp uno float %134, 0.000000e+00
  br i1 %135, label %147, label %136

136:                                              ; preds = %133
  %137 = load float, float* %75, align 8
  %138 = fadd float %131, %137
  %139 = fcmp uno float %138, 0.000000e+00
  br i1 %139, label %147, label %140

140:                                              ; preds = %136
  %141 = load float, float* %76, align 4
  %142 = fadd float %134, %141
  %143 = fcmp uno float %142, 0.000000e+00
  br i1 %143, label %147, label %144

144:                                              ; preds = %140
  %145 = load <2 x float>, <2 x float>* %92, align 8
  %146 = load <2 x float>, <2 x float>* %94, align 8
  br label %147

147:                                              ; preds = %130, %133, %136, %140, %144
  %148 = phi <2 x float> [ %145, %144 ], [ zeroinitializer, %140 ], [ zeroinitializer, %136 ], [ zeroinitializer, %133 ], [ zeroinitializer, %130 ]
  %149 = phi <2 x float> [ %146, %144 ], [ zeroinitializer, %140 ], [ zeroinitializer, %136 ], [ zeroinitializer, %133 ], [ zeroinitializer, %130 ]
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %72) #11
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %21) #11
  br label %150

150:                                              ; preds = %1, %147
  %151 = phi <2 x float> [ %148, %147 ], [ zeroinitializer, %1 ]
  %152 = phi <2 x float> [ %149, %147 ], [ zeroinitializer, %1 ]
  %153 = insertvalue { <2 x float>, <2 x float> } undef, <2 x float> %151, 0
  %154 = insertvalue { <2 x float>, <2 x float> } %153, <2 x float> %152, 1
  ret { <2 x float>, <2 x float> } %154
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #2

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden dereferenceable(24) %"class.cc::FilterOperations"* @_ZNK2cc17RenderSurfaceImpl7FiltersEv(%"class.cc::RenderSurfaceImpl"* nocapture readonly) local_unnamed_addr #4 align 2 {
  %2 = getelementptr inbounds %"class.cc::RenderSurfaceImpl", %"class.cc::RenderSurfaceImpl"* %0, i64 0, i32 3
  %3 = load i32, i32* %2, align 8
  %4 = icmp sgt i32 %3, -1
  br i1 %4, label %5, label %12

5:                                                ; preds = %1
  %6 = getelementptr inbounds %"class.cc::RenderSurfaceImpl", %"class.cc::RenderSurfaceImpl"* %0, i64 0, i32 1
  %7 = load %"class.cc::LayerTreeImpl"*, %"class.cc::LayerTreeImpl"** %6, align 8
  %8 = sext i32 %3 to i64
  %9 = getelementptr inbounds %"class.cc::LayerTreeImpl", %"class.cc::LayerTreeImpl"* %7, i64 0, i32 5, i32 4, i32 0, i32 1, i32 0, i32 0
  %10 = load %"struct.cc::EffectNode"*, %"struct.cc::EffectNode"** %9, align 8
  %11 = getelementptr inbounds %"struct.cc::EffectNode", %"struct.cc::EffectNode"* %10, i64 %8
  br label %12

12:                                               ; preds = %1, %5
  %13 = phi %"struct.cc::EffectNode"* [ %11, %5 ], [ null, %1 ]
  %14 = getelementptr inbounds %"struct.cc::EffectNode", %"struct.cc::EffectNode"* %13, i64 0, i32 5
  ret %"class.cc::FilterOperations"* %14
}

declare zeroext i1 @_ZNK2cc16FilterOperations7IsEmptyEv(%"class.cc::FilterOperations"*) local_unnamed_addr #1

declare { i64, i64 } @_ZNK2cc16FilterOperations7MapRectERKN3gfx4RectERK8SkMatrix(%"class.cc::FilterOperations"*, %"class.gfx::Rect"* dereferenceable(16), %class.SkMatrix* dereferenceable(40)) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZNK2cc17RenderSurfaceImpl12SurfaceScaleEv(%"class.gfx::Transform"* noalias sret, %"class.cc::RenderSurfaceImpl"* nocapture readonly) local_unnamed_addr #0 align 2 {
  %3 = bitcast %"class.gfx::Transform"* %0 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %3, i8* align 4 bitcast (%"class.gfx::Transform"* @__const._ZN2cc17RenderSurfaceImpl38CalculateClippedAccumulatedContentRectEv.target_to_surface to i8*), i64 68, i1 false)
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %3, i8* align 4 bitcast ([4 x [4 x float]]* @constinit to i8*), i64 64, i1 false) #11
  %4 = getelementptr inbounds %"class.gfx::Transform", %"class.gfx::Transform"* %0, i64 0, i32 0, i32 1
  store i8 0, i8* %4, align 4
  %5 = getelementptr inbounds %"class.cc::RenderSurfaceImpl", %"class.cc::RenderSurfaceImpl"* %1, i64 0, i32 3
  %6 = load i32, i32* %5, align 8
  %7 = icmp sgt i32 %6, -1
  br i1 %7, label %8, label %16

8:                                                ; preds = %2
  %9 = getelementptr inbounds %"class.cc::RenderSurfaceImpl", %"class.cc::RenderSurfaceImpl"* %1, i64 0, i32 1
  %10 = load %"class.cc::LayerTreeImpl"*, %"class.cc::LayerTreeImpl"** %9, align 8
  %11 = sext i32 %6 to i64
  %12 = getelementptr inbounds %"class.cc::LayerTreeImpl", %"class.cc::LayerTreeImpl"* %10, i64 0, i32 5, i32 4, i32 0, i32 1, i32 0, i32 0
  %13 = load %"struct.cc::EffectNode"*, %"struct.cc::EffectNode"** %12, align 8
  %14 = getelementptr inbounds %"struct.cc::EffectNode", %"struct.cc::EffectNode"* %13, i64 %11, i32 13, i32 0
  %15 = getelementptr inbounds %"struct.cc::EffectNode", %"struct.cc::EffectNode"* %13, i64 %11
  br label %16

16:                                               ; preds = %2, %8
  %17 = phi float* [ %14, %8 ], [ inttoptr (i64 208 to float*), %2 ]
  %18 = phi %"struct.cc::EffectNode"* [ %15, %8 ], [ null, %2 ]
  %19 = load float, float* %17, align 4
  %20 = getelementptr inbounds %"struct.cc::EffectNode", %"struct.cc::EffectNode"* %18, i64 0, i32 13, i32 1
  %21 = load float, float* %20, align 4
  tail call void @_ZN3gfx9Transform5ScaleEff(%"class.gfx::Transform"* %0, float %19, float %21) #11
  ret void
}

declare void @_ZNK10SkMatrix44cv8SkMatrixEv(%class.SkMatrix* sret, %class.SkMatrix44*) local_unnamed_addr #1

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #2

declare { <2 x float>, <2 x float> } @_ZN2cc8MathUtil14MapClippedRectERKN3gfx9TransformERKNS1_5RectFE(%"class.gfx::Transform"* dereferenceable(68), %"class.gfx::RectF"* dereferenceable(16)) local_unnamed_addr #1

declare void @_ZN3gfx5RectF9IntersectERKS0_(%"class.gfx::RectF"*, %"class.gfx::RectF"* dereferenceable(16)) local_unnamed_addr #1

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden i32 @_ZNK2cc17RenderSurfaceImpl9BlendModeEv(%"class.cc::RenderSurfaceImpl"* nocapture readonly) local_unnamed_addr #4 align 2 {
  %2 = getelementptr inbounds %"class.cc::RenderSurfaceImpl", %"class.cc::RenderSurfaceImpl"* %0, i64 0, i32 3
  %3 = load i32, i32* %2, align 8
  %4 = icmp sgt i32 %3, -1
  br i1 %4, label %5, label %12

5:                                                ; preds = %1
  %6 = getelementptr inbounds %"class.cc::RenderSurfaceImpl", %"class.cc::RenderSurfaceImpl"* %0, i64 0, i32 1
  %7 = load %"class.cc::LayerTreeImpl"*, %"class.cc::LayerTreeImpl"** %6, align 8
  %8 = sext i32 %3 to i64
  %9 = getelementptr inbounds %"class.cc::LayerTreeImpl", %"class.cc::LayerTreeImpl"* %7, i64 0, i32 5, i32 4, i32 0, i32 1, i32 0, i32 0
  %10 = load %"struct.cc::EffectNode"*, %"struct.cc::EffectNode"** %9, align 8
  %11 = getelementptr inbounds %"struct.cc::EffectNode", %"struct.cc::EffectNode"* %10, i64 %8
  br label %12

12:                                               ; preds = %1, %5
  %13 = phi %"struct.cc::EffectNode"* [ %11, %5 ], [ null, %1 ]
  %14 = getelementptr inbounds %"struct.cc::EffectNode", %"struct.cc::EffectNode"* %13, i64 0, i32 12
  %15 = load i32, i32* %14, align 4
  ret i32 %15
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden %"struct.cc::EffectNode"* @_ZNK2cc17RenderSurfaceImpl16OwningEffectNodeEv(%"class.cc::RenderSurfaceImpl"* nocapture readonly) local_unnamed_addr #4 align 2 {
  %2 = getelementptr inbounds %"class.cc::RenderSurfaceImpl", %"class.cc::RenderSurfaceImpl"* %0, i64 0, i32 3
  %3 = load i32, i32* %2, align 8
  %4 = icmp sgt i32 %3, -1
  br i1 %4, label %5, label %12

5:                                                ; preds = %1
  %6 = getelementptr inbounds %"class.cc::RenderSurfaceImpl", %"class.cc::RenderSurfaceImpl"* %0, i64 0, i32 1
  %7 = load %"class.cc::LayerTreeImpl"*, %"class.cc::LayerTreeImpl"** %6, align 8
  %8 = sext i32 %3 to i64
  %9 = getelementptr inbounds %"class.cc::LayerTreeImpl", %"class.cc::LayerTreeImpl"* %7, i64 0, i32 5, i32 4, i32 0, i32 1, i32 0, i32 0
  %10 = load %"struct.cc::EffectNode"*, %"struct.cc::EffectNode"** %9, align 8
  %11 = getelementptr inbounds %"struct.cc::EffectNode", %"struct.cc::EffectNode"* %10, i64 %8
  br label %12

12:                                               ; preds = %1, %5
  %13 = phi %"struct.cc::EffectNode"* [ %11, %5 ], [ null, %1 ]
  ret %"struct.cc::EffectNode"* %13
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @_ZNK2cc17RenderSurfaceImpl19GetDebugBorderColorEv(%"class.cc::RenderSurfaceImpl"* nocapture readnone) local_unnamed_addr #0 align 2 {
  %2 = tail call i32 @_ZN2cc11DebugColors18SurfaceBorderColorEv() #11
  ret i32 %2
}

declare i32 @_ZN2cc11DebugColors18SurfaceBorderColorEv() local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define hidden float @_ZNK2cc17RenderSurfaceImpl19GetDebugBorderWidthEv(%"class.cc::RenderSurfaceImpl"* nocapture readonly) local_unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.cc::RenderSurfaceImpl", %"class.cc::RenderSurfaceImpl"* %0, i64 0, i32 1
  %3 = load %"class.cc::LayerTreeImpl"*, %"class.cc::LayerTreeImpl"** %2, align 8
  %4 = icmp eq %"class.cc::LayerTreeImpl"* %3, null
  br i1 %4, label %8, label %5

5:                                                ; preds = %1
  %6 = getelementptr inbounds %"class.cc::LayerTreeImpl", %"class.cc::LayerTreeImpl"* %3, i64 0, i32 14
  %7 = load float, float* %6, align 4
  br label %8

8:                                                ; preds = %1, %5
  %9 = phi float [ %7, %5 ], [ 1.000000e+00, %1 ]
  %10 = tail call i32 @_ZN2cc11DebugColors18SurfaceBorderWidthEf(float %9) #11
  %11 = sitofp i32 %10 to float
  ret float %11
}

declare i32 @_ZN2cc11DebugColors18SurfaceBorderWidthEf(float) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define hidden %"class.cc::LayerImpl"* @_ZNK2cc17RenderSurfaceImpl17BackdropMaskLayerEv(%"class.cc::RenderSurfaceImpl"* nocapture readonly) local_unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.cc::RenderSurfaceImpl", %"class.cc::RenderSurfaceImpl"* %0, i64 0, i32 3
  %3 = load i32, i32* %2, align 8
  %4 = icmp sgt i32 %3, -1
  br i1 %4, label %5, label %12

5:                                                ; preds = %1
  %6 = getelementptr inbounds %"class.cc::RenderSurfaceImpl", %"class.cc::RenderSurfaceImpl"* %0, i64 0, i32 1
  %7 = load %"class.cc::LayerTreeImpl"*, %"class.cc::LayerTreeImpl"** %6, align 8
  %8 = sext i32 %3 to i64
  %9 = getelementptr inbounds %"class.cc::LayerTreeImpl", %"class.cc::LayerTreeImpl"* %7, i64 0, i32 5, i32 4, i32 0, i32 1, i32 0, i32 0
  %10 = load %"struct.cc::EffectNode"*, %"struct.cc::EffectNode"** %9, align 8
  %11 = getelementptr inbounds %"struct.cc::EffectNode", %"struct.cc::EffectNode"* %10, i64 %8
  br label %12

12:                                               ; preds = %1, %5
  %13 = phi %"struct.cc::EffectNode"* [ %11, %5 ], [ null, %1 ]
  %14 = getelementptr inbounds %"struct.cc::EffectNode", %"struct.cc::EffectNode"* %13, i64 0, i32 10, i32 0
  %15 = load i64, i64* %14, align 8
  %16 = icmp eq i64 %15, 0
  br i1 %16, label %21, label %17

17:                                               ; preds = %12
  %18 = getelementptr inbounds %"class.cc::RenderSurfaceImpl", %"class.cc::RenderSurfaceImpl"* %0, i64 0, i32 1
  %19 = load %"class.cc::LayerTreeImpl"*, %"class.cc::LayerTreeImpl"** %18, align 8
  %20 = tail call %"class.cc::LayerImpl"* @_ZNK2cc13LayerTreeImpl16LayerByElementIdENS_9ElementIdE(%"class.cc::LayerTreeImpl"* %19, i64 %15) #11
  br label %21

21:                                               ; preds = %12, %17
  %22 = phi %"class.cc::LayerImpl"* [ %20, %17 ], [ null, %12 ]
  ret %"class.cc::LayerImpl"* %22
}

declare %"class.cc::LayerImpl"* @_ZNK2cc13LayerTreeImpl16LayerByElementIdENS_9ElementIdE(%"class.cc::LayerTreeImpl"*, i64) local_unnamed_addr #1

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden zeroext i1 @_ZNK2cc17RenderSurfaceImpl29HasMaskingContributingSurfaceEv(%"class.cc::RenderSurfaceImpl"* nocapture readonly) local_unnamed_addr #4 align 2 {
  %2 = getelementptr inbounds %"class.cc::RenderSurfaceImpl", %"class.cc::RenderSurfaceImpl"* %0, i64 0, i32 3
  %3 = load i32, i32* %2, align 8
  %4 = icmp sgt i32 %3, -1
  br i1 %4, label %5, label %12

5:                                                ; preds = %1
  %6 = getelementptr inbounds %"class.cc::RenderSurfaceImpl", %"class.cc::RenderSurfaceImpl"* %0, i64 0, i32 1
  %7 = load %"class.cc::LayerTreeImpl"*, %"class.cc::LayerTreeImpl"** %6, align 8
  %8 = sext i32 %3 to i64
  %9 = getelementptr inbounds %"class.cc::LayerTreeImpl", %"class.cc::LayerTreeImpl"* %7, i64 0, i32 5, i32 4, i32 0, i32 1, i32 0, i32 0
  %10 = load %"struct.cc::EffectNode"*, %"struct.cc::EffectNode"** %9, align 8
  %11 = getelementptr inbounds %"struct.cc::EffectNode", %"struct.cc::EffectNode"* %10, i64 %8
  br label %12

12:                                               ; preds = %1, %5
  %13 = phi %"struct.cc::EffectNode"* [ %11, %5 ], [ null, %1 ]
  %14 = getelementptr inbounds %"struct.cc::EffectNode", %"struct.cc::EffectNode"* %13, i64 0, i32 16
  %15 = bitcast [3 x i8]* %14 to i24*
  %16 = load i24, i24* %15, align 4
  %17 = and i24 %16, 16384
  %18 = icmp ne i24 %17, 0
  ret i1 %18
}

declare void @_ZN3gfx9Transform5ScaleEff(%"class.gfx::Transform"*, float, float) local_unnamed_addr #1

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden dereferenceable(24) %"class.cc::FilterOperations"* @_ZNK2cc17RenderSurfaceImpl15BackdropFiltersEv(%"class.cc::RenderSurfaceImpl"* nocapture readonly) local_unnamed_addr #4 align 2 {
  %2 = getelementptr inbounds %"class.cc::RenderSurfaceImpl", %"class.cc::RenderSurfaceImpl"* %0, i64 0, i32 3
  %3 = load i32, i32* %2, align 8
  %4 = icmp sgt i32 %3, -1
  br i1 %4, label %5, label %12

5:                                                ; preds = %1
  %6 = getelementptr inbounds %"class.cc::RenderSurfaceImpl", %"class.cc::RenderSurfaceImpl"* %0, i64 0, i32 1
  %7 = load %"class.cc::LayerTreeImpl"*, %"class.cc::LayerTreeImpl"** %6, align 8
  %8 = sext i32 %3 to i64
  %9 = getelementptr inbounds %"class.cc::LayerTreeImpl", %"class.cc::LayerTreeImpl"* %7, i64 0, i32 5, i32 4, i32 0, i32 1, i32 0, i32 0
  %10 = load %"struct.cc::EffectNode"*, %"struct.cc::EffectNode"** %9, align 8
  %11 = getelementptr inbounds %"struct.cc::EffectNode", %"struct.cc::EffectNode"* %10, i64 %8
  br label %12

12:                                               ; preds = %1, %5
  %13 = phi %"struct.cc::EffectNode"* [ %11, %5 ], [ null, %1 ]
  %14 = getelementptr inbounds %"struct.cc::EffectNode", %"struct.cc::EffectNode"* %13, i64 0, i32 6
  ret %"class.cc::FilterOperations"* %14
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZNK2cc17RenderSurfaceImpl20BackdropFilterBoundsEv(%"class.absl::optional.870"* noalias nocapture sret, %"class.cc::RenderSurfaceImpl"* nocapture readonly) local_unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"class.cc::RenderSurfaceImpl", %"class.cc::RenderSurfaceImpl"* %1, i64 0, i32 3
  %4 = load i32, i32* %3, align 8
  %5 = icmp sgt i32 %4, -1
  br i1 %5, label %6, label %13

6:                                                ; preds = %2
  %7 = getelementptr inbounds %"class.cc::RenderSurfaceImpl", %"class.cc::RenderSurfaceImpl"* %1, i64 0, i32 1
  %8 = load %"class.cc::LayerTreeImpl"*, %"class.cc::LayerTreeImpl"** %7, align 8
  %9 = sext i32 %4 to i64
  %10 = getelementptr inbounds %"class.cc::LayerTreeImpl", %"class.cc::LayerTreeImpl"* %8, i64 0, i32 5, i32 4, i32 0, i32 1, i32 0, i32 0
  %11 = load %"struct.cc::EffectNode"*, %"struct.cc::EffectNode"** %10, align 8
  %12 = getelementptr inbounds %"struct.cc::EffectNode", %"struct.cc::EffectNode"* %11, i64 %9
  br label %13

13:                                               ; preds = %2, %6
  %14 = phi %"struct.cc::EffectNode"* [ %12, %6 ], [ null, %2 ]
  %15 = getelementptr inbounds %"class.absl::optional.870", %"class.absl::optional.870"* %0, i64 0, i32 0, i32 0, i32 0, i32 0
  %16 = getelementptr inbounds %"struct.cc::EffectNode", %"struct.cc::EffectNode"* %14, i64 0, i32 7, i32 0, i32 0, i32 0, i32 0
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %15, i8* align 8 %16, i64 56, i1 false)
  ret void
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden zeroext i1 @_ZNK2cc17RenderSurfaceImpl18TrilinearFilteringEv(%"class.cc::RenderSurfaceImpl"* nocapture readonly) local_unnamed_addr #4 align 2 {
  %2 = getelementptr inbounds %"class.cc::RenderSurfaceImpl", %"class.cc::RenderSurfaceImpl"* %0, i64 0, i32 3
  %3 = load i32, i32* %2, align 8
  %4 = icmp sgt i32 %3, -1
  br i1 %4, label %5, label %12

5:                                                ; preds = %1
  %6 = getelementptr inbounds %"class.cc::RenderSurfaceImpl", %"class.cc::RenderSurfaceImpl"* %0, i64 0, i32 1
  %7 = load %"class.cc::LayerTreeImpl"*, %"class.cc::LayerTreeImpl"** %6, align 8
  %8 = sext i32 %3 to i64
  %9 = getelementptr inbounds %"class.cc::LayerTreeImpl", %"class.cc::LayerTreeImpl"* %7, i64 0, i32 5, i32 4, i32 0, i32 1, i32 0, i32 0
  %10 = load %"struct.cc::EffectNode"*, %"struct.cc::EffectNode"** %9, align 8
  %11 = getelementptr inbounds %"struct.cc::EffectNode", %"struct.cc::EffectNode"* %10, i64 %8
  br label %12

12:                                               ; preds = %1, %5
  %13 = phi %"struct.cc::EffectNode"* [ %11, %5 ], [ null, %1 ]
  %14 = getelementptr inbounds %"struct.cc::EffectNode", %"struct.cc::EffectNode"* %13, i64 0, i32 16
  %15 = bitcast [3 x i8]* %14 to i24*
  %16 = load i24, i24* %15, align 4
  %17 = and i24 %16, 16
  %18 = icmp ne i24 %17, 0
  ret i1 %18
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden zeroext i1 @_ZNK2cc17RenderSurfaceImpl14HasCopyRequestEv(%"class.cc::RenderSurfaceImpl"* nocapture readonly) local_unnamed_addr #4 align 2 {
  %2 = getelementptr inbounds %"class.cc::RenderSurfaceImpl", %"class.cc::RenderSurfaceImpl"* %0, i64 0, i32 3
  %3 = load i32, i32* %2, align 8
  %4 = icmp sgt i32 %3, -1
  br i1 %4, label %5, label %12

5:                                                ; preds = %1
  %6 = getelementptr inbounds %"class.cc::RenderSurfaceImpl", %"class.cc::RenderSurfaceImpl"* %0, i64 0, i32 1
  %7 = load %"class.cc::LayerTreeImpl"*, %"class.cc::LayerTreeImpl"** %6, align 8
  %8 = sext i32 %3 to i64
  %9 = getelementptr inbounds %"class.cc::LayerTreeImpl", %"class.cc::LayerTreeImpl"* %7, i64 0, i32 5, i32 4, i32 0, i32 1, i32 0, i32 0
  %10 = load %"struct.cc::EffectNode"*, %"struct.cc::EffectNode"** %9, align 8
  %11 = getelementptr inbounds %"struct.cc::EffectNode", %"struct.cc::EffectNode"* %10, i64 %8
  br label %12

12:                                               ; preds = %1, %5
  %13 = phi %"struct.cc::EffectNode"* [ %11, %5 ], [ null, %1 ]
  %14 = getelementptr inbounds %"struct.cc::EffectNode", %"struct.cc::EffectNode"* %13, i64 0, i32 16
  %15 = bitcast [3 x i8]* %14 to i24*
  %16 = load i24, i24* %15, align 4
  %17 = and i24 %16, 2
  %18 = icmp ne i24 %17, 0
  ret i1 %18
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden i32 @_ZNK2cc17RenderSurfaceImpl16SubtreeCaptureIdEv(%"class.cc::RenderSurfaceImpl"* nocapture readonly) local_unnamed_addr #4 align 2 {
  %2 = getelementptr inbounds %"class.cc::RenderSurfaceImpl", %"class.cc::RenderSurfaceImpl"* %0, i64 0, i32 3
  %3 = load i32, i32* %2, align 8
  %4 = icmp sgt i32 %3, -1
  br i1 %4, label %5, label %12

5:                                                ; preds = %1
  %6 = getelementptr inbounds %"class.cc::RenderSurfaceImpl", %"class.cc::RenderSurfaceImpl"* %0, i64 0, i32 1
  %7 = load %"class.cc::LayerTreeImpl"*, %"class.cc::LayerTreeImpl"** %6, align 8
  %8 = sext i32 %3 to i64
  %9 = getelementptr inbounds %"class.cc::LayerTreeImpl", %"class.cc::LayerTreeImpl"* %7, i64 0, i32 5, i32 4, i32 0, i32 1, i32 0, i32 0
  %10 = load %"struct.cc::EffectNode"*, %"struct.cc::EffectNode"** %9, align 8
  %11 = getelementptr inbounds %"struct.cc::EffectNode", %"struct.cc::EffectNode"* %10, i64 %8
  br label %12

12:                                               ; preds = %1, %5
  %13 = phi %"struct.cc::EffectNode"* [ %11, %5 ], [ null, %1 ]
  %14 = getelementptr inbounds %"struct.cc::EffectNode", %"struct.cc::EffectNode"* %13, i64 0, i32 14, i32 0
  %15 = load i32, i32* %14, align 8
  ret i32 %15
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden i64 @_ZNK2cc17RenderSurfaceImpl11SubtreeSizeEv(%"class.cc::RenderSurfaceImpl"* nocapture readonly) local_unnamed_addr #4 align 2 {
  %2 = getelementptr inbounds %"class.cc::RenderSurfaceImpl", %"class.cc::RenderSurfaceImpl"* %0, i64 0, i32 3
  %3 = load i32, i32* %2, align 8
  %4 = icmp sgt i32 %3, -1
  br i1 %4, label %5, label %12

5:                                                ; preds = %1
  %6 = getelementptr inbounds %"class.cc::RenderSurfaceImpl", %"class.cc::RenderSurfaceImpl"* %0, i64 0, i32 1
  %7 = load %"class.cc::LayerTreeImpl"*, %"class.cc::LayerTreeImpl"** %6, align 8
  %8 = sext i32 %3 to i64
  %9 = getelementptr inbounds %"class.cc::LayerTreeImpl", %"class.cc::LayerTreeImpl"* %7, i64 0, i32 5, i32 4, i32 0, i32 1, i32 0, i32 0
  %10 = load %"struct.cc::EffectNode"*, %"struct.cc::EffectNode"** %9, align 8
  %11 = getelementptr inbounds %"struct.cc::EffectNode", %"struct.cc::EffectNode"* %10, i64 %8
  br label %12

12:                                               ; preds = %1, %5
  %13 = phi %"struct.cc::EffectNode"* [ %11, %5 ], [ null, %1 ]
  %14 = getelementptr inbounds %"struct.cc::EffectNode", %"struct.cc::EffectNode"* %13, i64 0, i32 15
  %15 = bitcast %"class.gfx::Size"* %14 to i64*
  %16 = load i64, i64* %15, align 4
  ret i64 %16
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden zeroext i1 @_ZNK2cc17RenderSurfaceImpl24ShouldCacheRenderSurfaceEv(%"class.cc::RenderSurfaceImpl"* nocapture readonly) local_unnamed_addr #4 align 2 {
  %2 = getelementptr inbounds %"class.cc::RenderSurfaceImpl", %"class.cc::RenderSurfaceImpl"* %0, i64 0, i32 3
  %3 = load i32, i32* %2, align 8
  %4 = icmp sgt i32 %3, -1
  br i1 %4, label %5, label %12

5:                                                ; preds = %1
  %6 = getelementptr inbounds %"class.cc::RenderSurfaceImpl", %"class.cc::RenderSurfaceImpl"* %0, i64 0, i32 1
  %7 = load %"class.cc::LayerTreeImpl"*, %"class.cc::LayerTreeImpl"** %6, align 8
  %8 = sext i32 %3 to i64
  %9 = getelementptr inbounds %"class.cc::LayerTreeImpl", %"class.cc::LayerTreeImpl"* %7, i64 0, i32 5, i32 4, i32 0, i32 1, i32 0, i32 0
  %10 = load %"struct.cc::EffectNode"*, %"struct.cc::EffectNode"** %9, align 8
  %11 = getelementptr inbounds %"struct.cc::EffectNode", %"struct.cc::EffectNode"* %10, i64 %8
  br label %12

12:                                               ; preds = %1, %5
  %13 = phi %"struct.cc::EffectNode"* [ %11, %5 ], [ null, %1 ]
  %14 = getelementptr inbounds %"struct.cc::EffectNode", %"struct.cc::EffectNode"* %13, i64 0, i32 16
  %15 = bitcast [3 x i8]* %14 to i24*
  %16 = load i24, i24* %15, align 4
  %17 = and i24 %16, 1
  %18 = icmp ne i24 %17, 0
  ret i1 %18
}

; Function Attrs: nounwind readonly ssp uwtable
define hidden zeroext i1 @_ZNK2cc17RenderSurfaceImpl20CopyOfOutputRequiredEv(%"class.cc::RenderSurfaceImpl"* nocapture readonly) local_unnamed_addr #6 align 2 {
  %2 = getelementptr inbounds %"class.cc::RenderSurfaceImpl", %"class.cc::RenderSurfaceImpl"* %0, i64 0, i32 3
  %3 = load i32, i32* %2, align 8
  %4 = icmp sgt i32 %3, -1
  br i1 %4, label %5, label %12

5:                                                ; preds = %1
  %6 = getelementptr inbounds %"class.cc::RenderSurfaceImpl", %"class.cc::RenderSurfaceImpl"* %0, i64 0, i32 1
  %7 = load %"class.cc::LayerTreeImpl"*, %"class.cc::LayerTreeImpl"** %6, align 8
  %8 = sext i32 %3 to i64
  %9 = getelementptr inbounds %"class.cc::LayerTreeImpl", %"class.cc::LayerTreeImpl"* %7, i64 0, i32 5, i32 4, i32 0, i32 1, i32 0, i32 0
  %10 = load %"struct.cc::EffectNode"*, %"struct.cc::EffectNode"** %9, align 8
  %11 = getelementptr inbounds %"struct.cc::EffectNode", %"struct.cc::EffectNode"* %10, i64 %8
  br label %12

12:                                               ; preds = %1, %5
  %13 = phi %"struct.cc::EffectNode"* [ %11, %5 ], [ null, %1 ]
  %14 = getelementptr inbounds %"struct.cc::EffectNode", %"struct.cc::EffectNode"* %13, i64 0, i32 16
  %15 = bitcast [3 x i8]* %14 to i24*
  %16 = load i24, i24* %15, align 4
  %17 = and i24 %16, 2
  %18 = icmp eq i24 %17, 0
  br i1 %18, label %19, label %47

19:                                               ; preds = %12
  br i1 %4, label %20, label %27

20:                                               ; preds = %19
  %21 = getelementptr inbounds %"class.cc::RenderSurfaceImpl", %"class.cc::RenderSurfaceImpl"* %0, i64 0, i32 1
  %22 = load %"class.cc::LayerTreeImpl"*, %"class.cc::LayerTreeImpl"** %21, align 8
  %23 = sext i32 %3 to i64
  %24 = getelementptr inbounds %"class.cc::LayerTreeImpl", %"class.cc::LayerTreeImpl"* %22, i64 0, i32 5, i32 4, i32 0, i32 1, i32 0, i32 0
  %25 = load %"struct.cc::EffectNode"*, %"struct.cc::EffectNode"** %24, align 8
  %26 = getelementptr inbounds %"struct.cc::EffectNode", %"struct.cc::EffectNode"* %25, i64 %23
  br label %27

27:                                               ; preds = %19, %20
  %28 = phi %"struct.cc::EffectNode"* [ %26, %20 ], [ null, %19 ]
  %29 = getelementptr inbounds %"struct.cc::EffectNode", %"struct.cc::EffectNode"* %28, i64 0, i32 16
  %30 = bitcast [3 x i8]* %29 to i24*
  %31 = load i24, i24* %30, align 4
  %32 = and i24 %31, 1
  %33 = icmp eq i24 %32, 0
  br i1 %33, label %34, label %47

34:                                               ; preds = %27
  br i1 %4, label %35, label %42

35:                                               ; preds = %34
  %36 = getelementptr inbounds %"class.cc::RenderSurfaceImpl", %"class.cc::RenderSurfaceImpl"* %0, i64 0, i32 1
  %37 = load %"class.cc::LayerTreeImpl"*, %"class.cc::LayerTreeImpl"** %36, align 8
  %38 = sext i32 %3 to i64
  %39 = getelementptr inbounds %"class.cc::LayerTreeImpl", %"class.cc::LayerTreeImpl"* %37, i64 0, i32 5, i32 4, i32 0, i32 1, i32 0, i32 0
  %40 = load %"struct.cc::EffectNode"*, %"struct.cc::EffectNode"** %39, align 8
  %41 = getelementptr inbounds %"struct.cc::EffectNode", %"struct.cc::EffectNode"* %40, i64 %38
  br label %42

42:                                               ; preds = %34, %35
  %43 = phi %"struct.cc::EffectNode"* [ %41, %35 ], [ null, %34 ]
  %44 = getelementptr inbounds %"struct.cc::EffectNode", %"struct.cc::EffectNode"* %43, i64 0, i32 14, i32 0
  %45 = load i32, i32* %44, align 8
  %46 = icmp ne i32 %45, 0
  br label %47

47:                                               ; preds = %27, %12, %42
  %48 = phi i1 [ true, %27 ], [ true, %12 ], [ %46, %42 ]
  ret i1 %48
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden i32 @_ZNK2cc17RenderSurfaceImpl18TransformTreeIndexEv(%"class.cc::RenderSurfaceImpl"* nocapture readonly) local_unnamed_addr #4 align 2 {
  %2 = getelementptr inbounds %"class.cc::RenderSurfaceImpl", %"class.cc::RenderSurfaceImpl"* %0, i64 0, i32 3
  %3 = load i32, i32* %2, align 8
  %4 = icmp sgt i32 %3, -1
  br i1 %4, label %5, label %12

5:                                                ; preds = %1
  %6 = getelementptr inbounds %"class.cc::RenderSurfaceImpl", %"class.cc::RenderSurfaceImpl"* %0, i64 0, i32 1
  %7 = load %"class.cc::LayerTreeImpl"*, %"class.cc::LayerTreeImpl"** %6, align 8
  %8 = sext i32 %3 to i64
  %9 = getelementptr inbounds %"class.cc::LayerTreeImpl", %"class.cc::LayerTreeImpl"* %7, i64 0, i32 5, i32 4, i32 0, i32 1, i32 0, i32 0
  %10 = load %"struct.cc::EffectNode"*, %"struct.cc::EffectNode"** %9, align 8
  %11 = getelementptr inbounds %"struct.cc::EffectNode", %"struct.cc::EffectNode"* %10, i64 %8
  br label %12

12:                                               ; preds = %1, %5
  %13 = phi %"struct.cc::EffectNode"* [ %11, %5 ], [ null, %1 ]
  %14 = getelementptr inbounds %"struct.cc::EffectNode", %"struct.cc::EffectNode"* %13, i64 0, i32 18
  %15 = load i32, i32* %14, align 8
  ret i32 %15
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden i32 @_ZNK2cc17RenderSurfaceImpl13ClipTreeIndexEv(%"class.cc::RenderSurfaceImpl"* nocapture readonly) local_unnamed_addr #4 align 2 {
  %2 = getelementptr inbounds %"class.cc::RenderSurfaceImpl", %"class.cc::RenderSurfaceImpl"* %0, i64 0, i32 3
  %3 = load i32, i32* %2, align 8
  %4 = icmp sgt i32 %3, -1
  br i1 %4, label %5, label %12

5:                                                ; preds = %1
  %6 = getelementptr inbounds %"class.cc::RenderSurfaceImpl", %"class.cc::RenderSurfaceImpl"* %0, i64 0, i32 1
  %7 = load %"class.cc::LayerTreeImpl"*, %"class.cc::LayerTreeImpl"** %6, align 8
  %8 = sext i32 %3 to i64
  %9 = getelementptr inbounds %"class.cc::LayerTreeImpl", %"class.cc::LayerTreeImpl"* %7, i64 0, i32 5, i32 4, i32 0, i32 1, i32 0, i32 0
  %10 = load %"struct.cc::EffectNode"*, %"struct.cc::EffectNode"** %9, align 8
  %11 = getelementptr inbounds %"struct.cc::EffectNode", %"struct.cc::EffectNode"* %10, i64 %8
  br label %12

12:                                               ; preds = %1, %5
  %13 = phi %"struct.cc::EffectNode"* [ %11, %5 ], [ null, %1 ]
  %14 = getelementptr inbounds %"struct.cc::EffectNode", %"struct.cc::EffectNode"* %13, i64 0, i32 19
  %15 = load i32, i32* %14, align 4
  ret i32 %15
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden dereferenceable(32) %"class.cc::DocumentTransitionSharedElementId"* @_ZNK2cc17RenderSurfaceImpl36GetDocumentTransitionSharedElementIdEv(%"class.cc::RenderSurfaceImpl"* nocapture readonly) local_unnamed_addr #4 align 2 {
  %2 = getelementptr inbounds %"class.cc::RenderSurfaceImpl", %"class.cc::RenderSurfaceImpl"* %0, i64 0, i32 3
  %3 = load i32, i32* %2, align 8
  %4 = icmp sgt i32 %3, -1
  br i1 %4, label %5, label %12

5:                                                ; preds = %1
  %6 = getelementptr inbounds %"class.cc::RenderSurfaceImpl", %"class.cc::RenderSurfaceImpl"* %0, i64 0, i32 1
  %7 = load %"class.cc::LayerTreeImpl"*, %"class.cc::LayerTreeImpl"** %6, align 8
  %8 = sext i32 %3 to i64
  %9 = getelementptr inbounds %"class.cc::LayerTreeImpl", %"class.cc::LayerTreeImpl"* %7, i64 0, i32 5, i32 4, i32 0, i32 1, i32 0, i32 0
  %10 = load %"struct.cc::EffectNode"*, %"struct.cc::EffectNode"** %9, align 8
  %11 = getelementptr inbounds %"struct.cc::EffectNode", %"struct.cc::EffectNode"* %10, i64 %8
  br label %12

12:                                               ; preds = %1, %5
  %13 = phi %"struct.cc::EffectNode"* [ %11, %5 ], [ null, %1 ]
  %14 = getelementptr inbounds %"struct.cc::EffectNode", %"struct.cc::EffectNode"* %13, i64 0, i32 24
  ret %"class.cc::DocumentTransitionSharedElementId"* %14
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2cc17RenderSurfaceImpl11SetClipRectERKN3gfx4RectE(%"class.cc::RenderSurfaceImpl"* nocapture, %"class.gfx::Rect"* nocapture readonly dereferenceable(16)) local_unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"class.cc::RenderSurfaceImpl", %"class.cc::RenderSurfaceImpl"* %0, i64 0, i32 4, i32 4
  %4 = getelementptr inbounds %"class.gfx::Rect", %"class.gfx::Rect"* %1, i64 0, i32 0, i32 0
  %5 = load i32, i32* %4, align 4
  %6 = getelementptr inbounds %"class.gfx::Rect", %"class.gfx::Rect"* %3, i64 0, i32 0, i32 0
  %7 = load i32, i32* %6, align 4
  %8 = icmp eq i32 %5, %7
  br i1 %8, label %9, label %27

9:                                                ; preds = %2
  %10 = getelementptr inbounds %"class.gfx::Rect", %"class.gfx::Rect"* %1, i64 0, i32 0, i32 1
  %11 = load i32, i32* %10, align 4
  %12 = getelementptr inbounds %"class.cc::RenderSurfaceImpl", %"class.cc::RenderSurfaceImpl"* %0, i64 0, i32 4, i32 4, i32 0, i32 1
  %13 = load i32, i32* %12, align 4
  %14 = icmp eq i32 %11, %13
  br i1 %14, label %15, label %27

15:                                               ; preds = %9
  %16 = getelementptr inbounds %"class.gfx::Rect", %"class.gfx::Rect"* %1, i64 0, i32 1, i32 0
  %17 = load i32, i32* %16, align 4
  %18 = getelementptr inbounds %"class.cc::RenderSurfaceImpl", %"class.cc::RenderSurfaceImpl"* %0, i64 0, i32 4, i32 4, i32 1, i32 0
  %19 = load i32, i32* %18, align 4
  %20 = icmp eq i32 %17, %19
  br i1 %20, label %21, label %27

21:                                               ; preds = %15
  %22 = getelementptr inbounds %"class.gfx::Rect", %"class.gfx::Rect"* %1, i64 0, i32 1, i32 1
  %23 = load i32, i32* %22, align 4
  %24 = getelementptr inbounds %"class.cc::RenderSurfaceImpl", %"class.cc::RenderSurfaceImpl"* %0, i64 0, i32 4, i32 4, i32 1, i32 1
  %25 = load i32, i32* %24, align 4
  %26 = icmp eq i32 %23, %25
  br i1 %26, label %33, label %27

27:                                               ; preds = %2, %15, %9, %21
  %28 = getelementptr inbounds %"class.cc::RenderSurfaceImpl", %"class.cc::RenderSurfaceImpl"* %0, i64 0, i32 7
  %29 = load i8, i8* %28, align 4
  %30 = or i8 %29, 2
  store i8 %30, i8* %28, align 4
  %31 = bitcast %"class.gfx::Rect"* %3 to i8*
  %32 = bitcast %"class.gfx::Rect"* %1 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %31, i8* align 4 %32, i64 16, i1 false)
  br label %33

33:                                               ; preds = %21, %27
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2cc17RenderSurfaceImpl14SetContentRectERKN3gfx4RectE(%"class.cc::RenderSurfaceImpl"* nocapture, %"class.gfx::Rect"* nocapture readonly dereferenceable(16)) local_unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"class.cc::RenderSurfaceImpl", %"class.cc::RenderSurfaceImpl"* %0, i64 0, i32 4, i32 3
  %4 = getelementptr inbounds %"class.gfx::Rect", %"class.gfx::Rect"* %1, i64 0, i32 0, i32 0
  %5 = load i32, i32* %4, align 4
  %6 = getelementptr inbounds %"class.gfx::Rect", %"class.gfx::Rect"* %3, i64 0, i32 0, i32 0
  %7 = load i32, i32* %6, align 4
  %8 = icmp eq i32 %5, %7
  br i1 %8, label %9, label %27

9:                                                ; preds = %2
  %10 = getelementptr inbounds %"class.gfx::Rect", %"class.gfx::Rect"* %1, i64 0, i32 0, i32 1
  %11 = load i32, i32* %10, align 4
  %12 = getelementptr inbounds %"class.cc::RenderSurfaceImpl", %"class.cc::RenderSurfaceImpl"* %0, i64 0, i32 4, i32 3, i32 0, i32 1
  %13 = load i32, i32* %12, align 4
  %14 = icmp eq i32 %11, %13
  br i1 %14, label %15, label %27

15:                                               ; preds = %9
  %16 = getelementptr inbounds %"class.gfx::Rect", %"class.gfx::Rect"* %1, i64 0, i32 1, i32 0
  %17 = load i32, i32* %16, align 4
  %18 = getelementptr inbounds %"class.cc::RenderSurfaceImpl", %"class.cc::RenderSurfaceImpl"* %0, i64 0, i32 4, i32 3, i32 1, i32 0
  %19 = load i32, i32* %18, align 4
  %20 = icmp eq i32 %17, %19
  br i1 %20, label %21, label %27

21:                                               ; preds = %15
  %22 = getelementptr inbounds %"class.gfx::Rect", %"class.gfx::Rect"* %1, i64 0, i32 1, i32 1
  %23 = load i32, i32* %22, align 4
  %24 = getelementptr inbounds %"class.cc::RenderSurfaceImpl", %"class.cc::RenderSurfaceImpl"* %0, i64 0, i32 4, i32 3, i32 1, i32 1
  %25 = load i32, i32* %24, align 4
  %26 = icmp eq i32 %23, %25
  br i1 %26, label %33, label %27

27:                                               ; preds = %2, %15, %9, %21
  %28 = getelementptr inbounds %"class.cc::RenderSurfaceImpl", %"class.cc::RenderSurfaceImpl"* %0, i64 0, i32 7
  %29 = load i8, i8* %28, align 4
  %30 = or i8 %29, 2
  store i8 %30, i8* %28, align 4
  %31 = bitcast %"class.gfx::Rect"* %3 to i8*
  %32 = bitcast %"class.gfx::Rect"* %1 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %31, i8* align 4 %32, i64 16, i1 false)
  br label %33

33:                                               ; preds = %21, %27
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2cc17RenderSurfaceImpl24SetContentRectForTestingERKN3gfx4RectE(%"class.cc::RenderSurfaceImpl"* nocapture, %"class.gfx::Rect"* nocapture readonly dereferenceable(16)) local_unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"class.cc::RenderSurfaceImpl", %"class.cc::RenderSurfaceImpl"* %0, i64 0, i32 4, i32 3
  %4 = getelementptr inbounds %"class.gfx::Rect", %"class.gfx::Rect"* %1, i64 0, i32 0, i32 0
  %5 = load i32, i32* %4, align 4
  %6 = getelementptr inbounds %"class.gfx::Rect", %"class.gfx::Rect"* %3, i64 0, i32 0, i32 0
  %7 = load i32, i32* %6, align 4
  %8 = icmp eq i32 %5, %7
  br i1 %8, label %9, label %27

9:                                                ; preds = %2
  %10 = getelementptr inbounds %"class.gfx::Rect", %"class.gfx::Rect"* %1, i64 0, i32 0, i32 1
  %11 = load i32, i32* %10, align 4
  %12 = getelementptr inbounds %"class.cc::RenderSurfaceImpl", %"class.cc::RenderSurfaceImpl"* %0, i64 0, i32 4, i32 3, i32 0, i32 1
  %13 = load i32, i32* %12, align 4
  %14 = icmp eq i32 %11, %13
  br i1 %14, label %15, label %27

15:                                               ; preds = %9
  %16 = getelementptr inbounds %"class.gfx::Rect", %"class.gfx::Rect"* %1, i64 0, i32 1, i32 0
  %17 = load i32, i32* %16, align 4
  %18 = getelementptr inbounds %"class.cc::RenderSurfaceImpl", %"class.cc::RenderSurfaceImpl"* %0, i64 0, i32 4, i32 3, i32 1, i32 0
  %19 = load i32, i32* %18, align 4
  %20 = icmp eq i32 %17, %19
  br i1 %20, label %21, label %27

21:                                               ; preds = %15
  %22 = getelementptr inbounds %"class.gfx::Rect", %"class.gfx::Rect"* %1, i64 0, i32 1, i32 1
  %23 = load i32, i32* %22, align 4
  %24 = getelementptr inbounds %"class.cc::RenderSurfaceImpl", %"class.cc::RenderSurfaceImpl"* %0, i64 0, i32 4, i32 3, i32 1, i32 1
  %25 = load i32, i32* %24, align 4
  %26 = icmp eq i32 %23, %25
  br i1 %26, label %33, label %27

27:                                               ; preds = %21, %15, %9, %2
  %28 = getelementptr inbounds %"class.cc::RenderSurfaceImpl", %"class.cc::RenderSurfaceImpl"* %0, i64 0, i32 7
  %29 = load i8, i8* %28, align 4
  %30 = or i8 %29, 2
  store i8 %30, i8* %28, align 4
  %31 = bitcast %"class.gfx::Rect"* %3 to i8*
  %32 = bitcast %"class.gfx::Rect"* %1 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %31, i8* align 4 %32, i64 16, i1 false) #11
  br label %33

33:                                               ; preds = %21, %27
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden { i64, i64 } @_ZN2cc17RenderSurfaceImpl31CalculateExpandedClipForFiltersERKN3gfx9TransformE(%"class.cc::RenderSurfaceImpl"*, %"class.gfx::Transform"* dereferenceable(68)) local_unnamed_addr #0 align 2 {
  %3 = alloca { i64, i64 }, align 8
  %4 = bitcast { i64, i64 }* %3 to %"class.gfx::Rect"*
  %5 = alloca <2 x i64>, align 16
  %6 = bitcast <2 x i64>* %5 to %"class.gfx::Rect"*
  %7 = alloca { i64, i64 }, align 8
  %8 = bitcast { i64, i64 }* %7 to %"class.gfx::Rect"*
  %9 = alloca %class.SkMatrix, align 4
  %10 = alloca %"class.gfx::Transform", align 4
  %11 = bitcast { i64, i64 }* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %11) #11
  %12 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %3, i64 0, i32 1
  %13 = bitcast <2 x i64>* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %13) #11
  %14 = getelementptr inbounds %"class.cc::RenderSurfaceImpl", %"class.cc::RenderSurfaceImpl"* %0, i64 0, i32 4, i32 4
  %15 = bitcast %"class.gfx::Rect"* %14 to <2 x i64>*
  %16 = load <2 x i64>, <2 x i64>* %15, align 4
  store <2 x i64> %16, <2 x i64>* %5, align 16
  %17 = call { i64, i64 } @_ZN2cc8MathUtil27ProjectEnclosingClippedRectERKN3gfx9TransformERKNS1_4RectE(%"class.gfx::Transform"* dereferenceable(68) %1, %"class.gfx::Rect"* nonnull dereferenceable(16) %6) #11
  %18 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %3, i64 0, i32 0
  %19 = extractvalue { i64, i64 } %17, 0
  store i64 %19, i64* %18, align 8
  %20 = extractvalue { i64, i64 } %17, 1
  store i64 %20, i64* %12, align 8
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %13) #11
  %21 = bitcast { i64, i64 }* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %21) #11
  %22 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %7, i64 0, i32 1
  %23 = getelementptr inbounds %"class.cc::RenderSurfaceImpl", %"class.cc::RenderSurfaceImpl"* %0, i64 0, i32 3
  %24 = bitcast { i64, i64 }* %7 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %24, i8 -86, i64 16, i1 false)
  %25 = load i32, i32* %23, align 8
  %26 = icmp sgt i32 %25, -1
  br i1 %26, label %27, label %34

27:                                               ; preds = %2
  %28 = getelementptr inbounds %"class.cc::RenderSurfaceImpl", %"class.cc::RenderSurfaceImpl"* %0, i64 0, i32 1
  %29 = load %"class.cc::LayerTreeImpl"*, %"class.cc::LayerTreeImpl"** %28, align 8
  %30 = sext i32 %25 to i64
  %31 = getelementptr inbounds %"class.cc::LayerTreeImpl", %"class.cc::LayerTreeImpl"* %29, i64 0, i32 5, i32 4, i32 0, i32 1, i32 0, i32 0
  %32 = load %"struct.cc::EffectNode"*, %"struct.cc::EffectNode"** %31, align 8
  %33 = getelementptr inbounds %"struct.cc::EffectNode", %"struct.cc::EffectNode"* %32, i64 %30
  br label %34

34:                                               ; preds = %2, %27
  %35 = phi %"struct.cc::EffectNode"* [ %33, %27 ], [ null, %2 ]
  %36 = getelementptr inbounds %"struct.cc::EffectNode", %"struct.cc::EffectNode"* %35, i64 0, i32 5
  %37 = bitcast %class.SkMatrix* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %37) #11
  %38 = bitcast %"class.gfx::Transform"* %10 to i8*
  call void @llvm.lifetime.start.p0i8(i64 68, i8* nonnull %38) #11
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %38, i8* align 4 bitcast (%"class.gfx::Transform"* @__const._ZN2cc17RenderSurfaceImpl38CalculateClippedAccumulatedContentRectEv.target_to_surface to i8*), i64 68, i1 false) #11
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %38, i8* align 4 bitcast ([4 x [4 x float]]* @constinit to i8*), i64 64, i1 false) #11
  %39 = getelementptr inbounds %"class.gfx::Transform", %"class.gfx::Transform"* %10, i64 0, i32 0, i32 1
  store i8 0, i8* %39, align 4, !alias.scope !5
  br i1 %26, label %40, label %48

40:                                               ; preds = %34
  %41 = getelementptr inbounds %"class.cc::RenderSurfaceImpl", %"class.cc::RenderSurfaceImpl"* %0, i64 0, i32 1
  %42 = load %"class.cc::LayerTreeImpl"*, %"class.cc::LayerTreeImpl"** %41, align 8, !noalias !5
  %43 = sext i32 %25 to i64
  %44 = getelementptr inbounds %"class.cc::LayerTreeImpl", %"class.cc::LayerTreeImpl"* %42, i64 0, i32 5, i32 4, i32 0, i32 1, i32 0, i32 0
  %45 = load %"struct.cc::EffectNode"*, %"struct.cc::EffectNode"** %44, align 8
  %46 = getelementptr inbounds %"struct.cc::EffectNode", %"struct.cc::EffectNode"* %45, i64 %43, i32 13, i32 0
  %47 = getelementptr inbounds %"struct.cc::EffectNode", %"struct.cc::EffectNode"* %45, i64 %43
  br label %48

48:                                               ; preds = %34, %40
  %49 = phi float* [ %46, %40 ], [ inttoptr (i64 208 to float*), %34 ]
  %50 = phi %"struct.cc::EffectNode"* [ %47, %40 ], [ null, %34 ]
  %51 = load float, float* %49, align 4, !noalias !5
  %52 = getelementptr inbounds %"struct.cc::EffectNode", %"struct.cc::EffectNode"* %50, i64 0, i32 13, i32 1
  %53 = load float, float* %52, align 4, !noalias !5
  call void @_ZN3gfx9Transform5ScaleEff(%"class.gfx::Transform"* nonnull %10, float %51, float %53) #11
  %54 = getelementptr inbounds %"class.gfx::Transform", %"class.gfx::Transform"* %10, i64 0, i32 0
  call void @_ZNK10SkMatrix44cv8SkMatrixEv(%class.SkMatrix* nonnull sret %9, %class.SkMatrix44* nonnull %54) #11
  %55 = call { i64, i64 } @_ZNK2cc16FilterOperations7MapRectERKN3gfx4RectERK8SkMatrix(%"class.cc::FilterOperations"* %36, %"class.gfx::Rect"* nonnull dereferenceable(16) %4, %class.SkMatrix* nonnull dereferenceable(40) %9) #11
  %56 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %7, i64 0, i32 0
  %57 = extractvalue { i64, i64 } %55, 0
  store i64 %57, i64* %56, align 8
  %58 = extractvalue { i64, i64 } %55, 1
  store i64 %58, i64* %22, align 8
  call void @llvm.lifetime.end.p0i8(i64 68, i8* nonnull %38) #11
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %37) #11
  %59 = getelementptr inbounds %"class.cc::RenderSurfaceImpl", %"class.cc::RenderSurfaceImpl"* %0, i64 0, i32 4, i32 1
  %60 = call { i64, i64 } @_ZN2cc8MathUtil23MapEnclosingClippedRectERKN3gfx9TransformERKNS1_4RectE(%"class.gfx::Transform"* dereferenceable(68) %59, %"class.gfx::Rect"* nonnull dereferenceable(16) %8) #11
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %21) #11
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %11) #11
  ret { i64, i64 } %60
}

declare { i64, i64 } @_ZN2cc8MathUtil27ProjectEnclosingClippedRectERKN3gfx9TransformERKNS1_4RectE(%"class.gfx::Transform"* dereferenceable(68), %"class.gfx::Rect"* dereferenceable(16)) local_unnamed_addr #1

declare { i64, i64 } @_ZN2cc8MathUtil23MapEnclosingClippedRectERKN3gfx9TransformERKNS1_4RectE(%"class.gfx::Transform"* dereferenceable(68), %"class.gfx::Rect"* dereferenceable(16)) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define hidden { i64, i64 } @_ZN2cc17RenderSurfaceImpl38CalculateClippedAccumulatedContentRectEv(%"class.cc::RenderSurfaceImpl"*) local_unnamed_addr #0 align 2 {
  %2 = alloca %"class.gfx::Transform", align 4
  %3 = alloca { i64, i64 }, align 8
  %4 = bitcast { i64, i64 }* %3 to %"class.gfx::Rect"*
  %5 = alloca <2 x i64>, align 16
  %6 = bitcast <2 x i64>* %5 to %"class.gfx::Rect"*
  %7 = alloca <2 x i64>, align 16
  %8 = bitcast <2 x i64>* %7 to %"class.gfx::Rect"*
  %9 = alloca %"class.gfx::Rect", align 8
  %10 = alloca <2 x i64>, align 16
  %11 = bitcast <2 x i64>* %10 to { i64, i64 }*
  %12 = bitcast <2 x i64>* %10 to %"class.gfx::Rect"*
  %13 = alloca <2 x i64>, align 16
  %14 = bitcast <2 x i64>* %13 to %"class.gfx::Rect"*
  %15 = getelementptr inbounds %"class.cc::RenderSurfaceImpl", %"class.cc::RenderSurfaceImpl"* %0, i64 0, i32 3
  %16 = load i32, i32* %15, align 8
  %17 = icmp sgt i32 %16, -1
  br i1 %17, label %18, label %25

18:                                               ; preds = %1
  %19 = getelementptr inbounds %"class.cc::RenderSurfaceImpl", %"class.cc::RenderSurfaceImpl"* %0, i64 0, i32 1
  %20 = load %"class.cc::LayerTreeImpl"*, %"class.cc::LayerTreeImpl"** %19, align 8
  %21 = sext i32 %16 to i64
  %22 = getelementptr inbounds %"class.cc::LayerTreeImpl", %"class.cc::LayerTreeImpl"* %20, i64 0, i32 5, i32 4, i32 0, i32 1, i32 0, i32 0
  %23 = load %"struct.cc::EffectNode"*, %"struct.cc::EffectNode"** %22, align 8
  %24 = getelementptr inbounds %"struct.cc::EffectNode", %"struct.cc::EffectNode"* %23, i64 %21
  br label %25

25:                                               ; preds = %18, %1
  %26 = phi %"struct.cc::EffectNode"* [ %24, %18 ], [ null, %1 ]
  %27 = getelementptr inbounds %"struct.cc::EffectNode", %"struct.cc::EffectNode"* %26, i64 0, i32 16
  %28 = bitcast [3 x i8]* %27 to i24*
  %29 = load i24, i24* %28, align 4
  %30 = and i24 %29, 2
  %31 = icmp eq i24 %30, 0
  br i1 %31, label %32, label %65

32:                                               ; preds = %25
  br i1 %17, label %33, label %40

33:                                               ; preds = %32
  %34 = getelementptr inbounds %"class.cc::RenderSurfaceImpl", %"class.cc::RenderSurfaceImpl"* %0, i64 0, i32 1
  %35 = load %"class.cc::LayerTreeImpl"*, %"class.cc::LayerTreeImpl"** %34, align 8
  %36 = sext i32 %16 to i64
  %37 = getelementptr inbounds %"class.cc::LayerTreeImpl", %"class.cc::LayerTreeImpl"* %35, i64 0, i32 5, i32 4, i32 0, i32 1, i32 0, i32 0
  %38 = load %"struct.cc::EffectNode"*, %"struct.cc::EffectNode"** %37, align 8
  %39 = getelementptr inbounds %"struct.cc::EffectNode", %"struct.cc::EffectNode"* %38, i64 %36
  br label %40

40:                                               ; preds = %33, %32
  %41 = phi %"struct.cc::EffectNode"* [ %39, %33 ], [ null, %32 ]
  %42 = getelementptr inbounds %"struct.cc::EffectNode", %"struct.cc::EffectNode"* %41, i64 0, i32 16
  %43 = bitcast [3 x i8]* %42 to i24*
  %44 = load i24, i24* %43, align 4
  %45 = and i24 %44, 1
  %46 = icmp eq i24 %45, 0
  br i1 %46, label %47, label %65

47:                                               ; preds = %40
  br i1 %17, label %48, label %55

48:                                               ; preds = %47
  %49 = getelementptr inbounds %"class.cc::RenderSurfaceImpl", %"class.cc::RenderSurfaceImpl"* %0, i64 0, i32 1
  %50 = load %"class.cc::LayerTreeImpl"*, %"class.cc::LayerTreeImpl"** %49, align 8
  %51 = sext i32 %16 to i64
  %52 = getelementptr inbounds %"class.cc::LayerTreeImpl", %"class.cc::LayerTreeImpl"* %50, i64 0, i32 5, i32 4, i32 0, i32 1, i32 0, i32 0
  %53 = load %"struct.cc::EffectNode"*, %"struct.cc::EffectNode"** %52, align 8
  %54 = getelementptr inbounds %"struct.cc::EffectNode", %"struct.cc::EffectNode"* %53, i64 %51
  br label %55

55:                                               ; preds = %47, %48
  %56 = phi %"struct.cc::EffectNode"* [ %54, %48 ], [ null, %47 ]
  %57 = getelementptr inbounds %"struct.cc::EffectNode", %"struct.cc::EffectNode"* %56, i64 0, i32 14, i32 0
  %58 = load i32, i32* %57, align 8
  %59 = icmp eq i32 %58, 0
  br i1 %59, label %60, label %65

60:                                               ; preds = %55
  %61 = getelementptr inbounds %"class.cc::RenderSurfaceImpl", %"class.cc::RenderSurfaceImpl"* %0, i64 0, i32 4, i32 5
  %62 = load i8, i8* %61, align 4
  %63 = and i8 %62, 1
  %64 = icmp eq i8 %63, 0
  br i1 %64, label %65, label %69

65:                                               ; preds = %60, %55, %25, %40
  %66 = getelementptr inbounds %"class.cc::RenderSurfaceImpl", %"class.cc::RenderSurfaceImpl"* %0, i64 0, i32 5
  %67 = bitcast %"class.gfx::Rect"* %66 to <2 x i64>*
  %68 = load <2 x i64>, <2 x i64>* %67, align 8
  br label %169

69:                                               ; preds = %60
  %70 = getelementptr inbounds %"class.cc::RenderSurfaceImpl", %"class.cc::RenderSurfaceImpl"* %0, i64 0, i32 5
  %71 = getelementptr inbounds %"class.cc::RenderSurfaceImpl", %"class.cc::RenderSurfaceImpl"* %0, i64 0, i32 5, i32 1
  %72 = bitcast %"class.gfx::Size"* %71 to i64*
  %73 = load i64, i64* %72, align 8
  %74 = trunc i64 %73 to i32
  %75 = icmp eq i32 %74, 0
  %76 = icmp ult i64 %73, 4294967296
  %77 = or i1 %76, %75
  br i1 %77, label %169, label %78

78:                                               ; preds = %69
  %79 = bitcast %"class.gfx::Transform"* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 68, i8* nonnull %79) #11
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %79, i8* align 4 bitcast (%"class.gfx::Transform"* @__const._ZN2cc17RenderSurfaceImpl38CalculateClippedAccumulatedContentRectEv.target_to_surface to i8*), i64 68, i1 false)
  %80 = getelementptr inbounds %"class.cc::RenderSurfaceImpl", %"class.cc::RenderSurfaceImpl"* %0, i64 0, i32 4, i32 1
  %81 = call zeroext i1 @_ZNK3gfx9Transform10GetInverseEPS0_(%"class.gfx::Transform"* %80, %"class.gfx::Transform"* nonnull %2) #11
  br i1 %81, label %85, label %82

82:                                               ; preds = %78
  %83 = bitcast %"class.gfx::Rect"* %70 to <2 x i64>*
  %84 = load <2 x i64>, <2 x i64>* %83, align 8
  br label %167

85:                                               ; preds = %78
  %86 = bitcast { i64, i64 }* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %86) #11
  %87 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %3, i64 0, i32 1
  %88 = bitcast <2 x i64>* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %88) #11
  %89 = bitcast %"class.gfx::Rect"* %70 to <2 x i64>*
  %90 = load <2 x i64>, <2 x i64>* %89, align 8
  store <2 x i64> %90, <2 x i64>* %5, align 16
  %91 = call { i64, i64 } @_ZN2cc8MathUtil23MapEnclosingClippedRectERKN3gfx9TransformERKNS1_4RectE(%"class.gfx::Transform"* dereferenceable(68) %80, %"class.gfx::Rect"* nonnull dereferenceable(16) %6) #11
  %92 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %3, i64 0, i32 0
  %93 = extractvalue { i64, i64 } %91, 0
  store i64 %93, i64* %92, align 8
  %94 = extractvalue { i64, i64 } %91, 1
  store i64 %94, i64* %87, align 8
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %88) #11
  %95 = bitcast <2 x i64>* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %95) #11
  %96 = getelementptr inbounds %"class.cc::RenderSurfaceImpl", %"class.cc::RenderSurfaceImpl"* %0, i64 0, i32 4, i32 4
  %97 = bitcast %"class.gfx::Rect"* %96 to i64*
  %98 = getelementptr inbounds %"class.cc::RenderSurfaceImpl", %"class.cc::RenderSurfaceImpl"* %0, i64 0, i32 4, i32 4, i32 1
  %99 = bitcast %"class.gfx::Size"* %98 to i64*
  %100 = bitcast %"class.gfx::Rect"* %96 to <2 x i64>*
  %101 = load <2 x i64>, <2 x i64>* %100, align 4
  store <2 x i64> %101, <2 x i64>* %7, align 16
  %102 = call zeroext i1 @_ZNK3gfx4Rect8ContainsERKS0_(%"class.gfx::Rect"* nonnull %8, %"class.gfx::Rect"* nonnull dereferenceable(16) %4) #11
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %95) #11
  br i1 %102, label %103, label %106

103:                                              ; preds = %85
  %104 = bitcast %"class.gfx::Rect"* %70 to <2 x i64>*
  %105 = load <2 x i64>, <2 x i64>* %104, align 8
  br label %165

106:                                              ; preds = %85
  %107 = bitcast %"class.gfx::Rect"* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %107) #11
  %108 = getelementptr inbounds %"class.gfx::Rect", %"class.gfx::Rect"* %9, i64 0, i32 1, i32 0
  %109 = getelementptr inbounds %"class.gfx::Rect", %"class.gfx::Rect"* %9, i64 0, i32 1, i32 1
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %107, i8 0, i64 16, i1 false) #11
  %110 = load i32, i32* %15, align 8
  %111 = icmp sgt i32 %110, -1
  br i1 %111, label %112, label %119

112:                                              ; preds = %106
  %113 = getelementptr inbounds %"class.cc::RenderSurfaceImpl", %"class.cc::RenderSurfaceImpl"* %0, i64 0, i32 1
  %114 = load %"class.cc::LayerTreeImpl"*, %"class.cc::LayerTreeImpl"** %113, align 8
  %115 = sext i32 %110 to i64
  %116 = getelementptr inbounds %"class.cc::LayerTreeImpl", %"class.cc::LayerTreeImpl"* %114, i64 0, i32 5, i32 4, i32 0, i32 1, i32 0, i32 0
  %117 = load %"struct.cc::EffectNode"*, %"struct.cc::EffectNode"** %116, align 8
  %118 = getelementptr inbounds %"struct.cc::EffectNode", %"struct.cc::EffectNode"* %117, i64 %115
  br label %119

119:                                              ; preds = %106, %112
  %120 = phi %"struct.cc::EffectNode"* [ %118, %112 ], [ null, %106 ]
  %121 = getelementptr inbounds %"struct.cc::EffectNode", %"struct.cc::EffectNode"* %120, i64 0, i32 5
  %122 = call zeroext i1 @_ZNK2cc16FilterOperations24HasFilterThatMovesPixelsEv(%"class.cc::FilterOperations"* %121) #11
  br i1 %122, label %123, label %127

123:                                              ; preds = %119
  %124 = call { i64, i64 } @_ZN2cc17RenderSurfaceImpl31CalculateExpandedClipForFiltersERKN3gfx9TransformE(%"class.cc::RenderSurfaceImpl"* %0, %"class.gfx::Transform"* nonnull dereferenceable(68) %2)
  %125 = extractvalue { i64, i64 } %124, 0
  %126 = extractvalue { i64, i64 } %124, 1
  br label %130

127:                                              ; preds = %119
  %128 = load i64, i64* %97, align 4
  %129 = load i64, i64* %99, align 4
  br label %130

130:                                              ; preds = %127, %123
  %131 = phi i64 [ %128, %127 ], [ %125, %123 ]
  %132 = phi i64 [ %129, %127 ], [ %126, %123 ]
  %133 = bitcast %"class.gfx::Rect"* %9 to i64*
  store i64 %131, i64* %133, align 8
  %134 = getelementptr inbounds %"class.gfx::Rect", %"class.gfx::Rect"* %9, i64 0, i32 1
  %135 = bitcast %"class.gfx::Size"* %134 to i64*
  store i64 %132, i64* %135, align 8
  %136 = getelementptr inbounds %"class.cc::RenderSurfaceImpl", %"class.cc::RenderSurfaceImpl"* %0, i64 0, i32 1
  %137 = load %"class.cc::LayerTreeImpl"*, %"class.cc::LayerTreeImpl"** %136, align 8
  %138 = call dereferenceable(296) %"class.cc::LayerTreeSettings"* @_ZNK2cc13LayerTreeImpl8settingsEv(%"class.cc::LayerTreeImpl"* %137) #11
  %139 = getelementptr inbounds %"class.cc::LayerTreeSettings", %"class.cc::LayerTreeSettings"* %138, i64 0, i32 74
  %140 = load i8, i8* %139, align 2, !range !8
  %141 = icmp eq i8 %140, 0
  br i1 %141, label %146, label %142

142:                                              ; preds = %130
  %143 = call float @_ZN3viz16MaxDeJellyHeightEv() #11
  %144 = fsub float -0.000000e+00, %143
  %145 = fptosi float %144 to i32
  call void @_ZN3gfx4Rect5InsetEiiii(%"class.gfx::Rect"* nonnull %9, i32 0, i32 %145, i32 0, i32 %145) #11
  br label %146

146:                                              ; preds = %130, %142
  call void @_ZN3gfx4Rect9IntersectERKS0_(%"class.gfx::Rect"* nonnull %9, %"class.gfx::Rect"* nonnull dereferenceable(16) %4) #11
  %147 = load i32, i32* %108, align 8
  %148 = icmp eq i32 %147, 0
  %149 = load i32, i32* %109, align 4
  %150 = icmp eq i32 %149, 0
  %151 = or i1 %148, %150
  br i1 %151, label %163, label %152

152:                                              ; preds = %146
  %153 = bitcast <2 x i64>* %10 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %153) #11
  %154 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %11, i64 0, i32 1
  %155 = call { i64, i64 } @_ZN2cc8MathUtil27ProjectEnclosingClippedRectERKN3gfx9TransformERKNS1_4RectE(%"class.gfx::Transform"* nonnull dereferenceable(68) %2, %"class.gfx::Rect"* nonnull dereferenceable(16) %9) #11
  %156 = getelementptr inbounds <2 x i64>, <2 x i64>* %10, i64 0, i64 0
  %157 = extractvalue { i64, i64 } %155, 0
  store i64 %157, i64* %156, align 16
  %158 = extractvalue { i64, i64 } %155, 1
  store i64 %158, i64* %154, align 8
  %159 = bitcast <2 x i64>* %13 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %159) #11
  %160 = bitcast %"class.gfx::Rect"* %70 to <2 x i64>*
  %161 = load <2 x i64>, <2 x i64>* %160, align 8
  store <2 x i64> %161, <2 x i64>* %13, align 16
  call void @_ZN3gfx4Rect9IntersectERKS0_(%"class.gfx::Rect"* nonnull %12, %"class.gfx::Rect"* nonnull dereferenceable(16) %14) #11
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %159) #11
  %162 = load <2 x i64>, <2 x i64>* %10, align 16
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %153) #11
  br label %163

163:                                              ; preds = %146, %152
  %164 = phi <2 x i64> [ %162, %152 ], [ zeroinitializer, %146 ]
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %107) #11
  br label %165

165:                                              ; preds = %163, %103
  %166 = phi <2 x i64> [ %105, %103 ], [ %164, %163 ]
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %86) #11
  br label %167

167:                                              ; preds = %165, %82
  %168 = phi <2 x i64> [ %166, %165 ], [ %84, %82 ]
  call void @llvm.lifetime.end.p0i8(i64 68, i8* nonnull %79) #11
  br label %169

169:                                              ; preds = %69, %167, %65
  %170 = phi <2 x i64> [ %68, %65 ], [ %168, %167 ], [ zeroinitializer, %69 ]
  %171 = extractelement <2 x i64> %170, i32 0
  %172 = insertvalue { i64, i64 } undef, i64 %171, 0
  %173 = extractelement <2 x i64> %170, i32 1
  %174 = insertvalue { i64, i64 } %172, i64 %173, 1
  ret { i64, i64 } %174
}

declare zeroext i1 @_ZNK3gfx9Transform10GetInverseEPS0_(%"class.gfx::Transform"*, %"class.gfx::Transform"*) local_unnamed_addr #1

declare zeroext i1 @_ZNK3gfx4Rect8ContainsERKS0_(%"class.gfx::Rect"*, %"class.gfx::Rect"* dereferenceable(16)) local_unnamed_addr #1

declare zeroext i1 @_ZNK2cc16FilterOperations24HasFilterThatMovesPixelsEv(%"class.cc::FilterOperations"*) local_unnamed_addr #1

declare dereferenceable(296) %"class.cc::LayerTreeSettings"* @_ZNK2cc13LayerTreeImpl8settingsEv(%"class.cc::LayerTreeImpl"*) local_unnamed_addr #1

declare float @_ZN3viz16MaxDeJellyHeightEv() local_unnamed_addr #1

declare void @_ZN3gfx4Rect9IntersectERKS0_(%"class.gfx::Rect"*, %"class.gfx::Rect"* dereferenceable(16)) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2cc17RenderSurfaceImpl46CalculateContentRectFromAccumulatedContentRectEi(%"class.cc::RenderSurfaceImpl"*, i32) local_unnamed_addr #0 align 2 {
  %3 = tail call { i64, i64 } @_ZN2cc17RenderSurfaceImpl38CalculateClippedAccumulatedContentRectEv(%"class.cc::RenderSurfaceImpl"* %0)
  %4 = extractvalue { i64, i64 } %3, 0
  %5 = trunc i64 %4 to i32
  %6 = lshr i64 %4, 32
  %7 = trunc i64 %6 to i32
  %8 = extractvalue { i64, i64 } %3, 1
  %9 = trunc i64 %8 to i32
  %10 = icmp sgt i32 %9, %1
  %11 = select i1 %10, i32 %1, i32 %9
  %12 = icmp sgt i32 %5, 0
  %13 = icmp sgt i32 %11, 0
  %14 = and i1 %12, %13
  %15 = sub nuw nsw i32 2147483647, %5
  %16 = icmp ult i32 %15, %11
  %17 = and i1 %16, %14
  %18 = select i1 %17, i32 %15, i32 %11
  %19 = icmp sgt i32 %18, 0
  %20 = select i1 %19, i32 %18, i32 0
  %21 = zext i32 %20 to i64
  %22 = lshr i64 %8, 32
  %23 = trunc i64 %22 to i32
  %24 = icmp sgt i32 %23, %1
  %25 = select i1 %24, i32 %1, i32 %23
  %26 = icmp sgt i32 %7, 0
  %27 = icmp sgt i32 %25, 0
  %28 = and i1 %26, %27
  %29 = sub nuw nsw i32 2147483647, %7
  %30 = icmp ult i32 %29, %25
  %31 = and i1 %30, %28
  %32 = select i1 %31, i32 %29, i32 %25
  %33 = icmp sgt i32 %32, 0
  %34 = select i1 %33, i32 %32, i32 0
  %35 = zext i32 %34 to i64
  %36 = shl nuw nsw i64 %35, 32
  %37 = or i64 %36, %21
  %38 = getelementptr inbounds %"class.cc::RenderSurfaceImpl", %"class.cc::RenderSurfaceImpl"* %0, i64 0, i32 4, i32 3
  %39 = getelementptr inbounds %"class.gfx::Rect", %"class.gfx::Rect"* %38, i64 0, i32 0, i32 0
  %40 = load i32, i32* %39, align 4
  %41 = icmp eq i32 %40, %5
  br i1 %41, label %42, label %54

42:                                               ; preds = %2
  %43 = getelementptr inbounds %"class.cc::RenderSurfaceImpl", %"class.cc::RenderSurfaceImpl"* %0, i64 0, i32 4, i32 3, i32 0, i32 1
  %44 = load i32, i32* %43, align 4
  %45 = icmp eq i32 %44, %7
  br i1 %45, label %46, label %54

46:                                               ; preds = %42
  %47 = getelementptr inbounds %"class.cc::RenderSurfaceImpl", %"class.cc::RenderSurfaceImpl"* %0, i64 0, i32 4, i32 3, i32 1, i32 0
  %48 = load i32, i32* %47, align 4
  %49 = icmp eq i32 %20, %48
  br i1 %49, label %50, label %54

50:                                               ; preds = %46
  %51 = getelementptr inbounds %"class.cc::RenderSurfaceImpl", %"class.cc::RenderSurfaceImpl"* %0, i64 0, i32 4, i32 3, i32 1, i32 1
  %52 = load i32, i32* %51, align 4
  %53 = icmp eq i32 %34, %52
  br i1 %53, label %61, label %54

54:                                               ; preds = %50, %46, %42, %2
  %55 = getelementptr inbounds %"class.cc::RenderSurfaceImpl", %"class.cc::RenderSurfaceImpl"* %0, i64 0, i32 7
  %56 = load i8, i8* %55, align 4
  %57 = or i8 %56, 2
  store i8 %57, i8* %55, align 4
  %58 = bitcast %"class.gfx::Rect"* %38 to i64*
  store i64 %4, i64* %58, align 4
  %59 = getelementptr inbounds %"class.cc::RenderSurfaceImpl", %"class.cc::RenderSurfaceImpl"* %0, i64 0, i32 4, i32 3, i32 1
  %60 = bitcast %"class.gfx::Size"* %59 to i64*
  store i64 %37, i64* %60, align 4
  br label %61

61:                                               ; preds = %50, %54
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2cc17RenderSurfaceImpl24SetContentRectToViewportEv(%"class.cc::RenderSurfaceImpl"* nocapture) local_unnamed_addr #0 align 2 {
  %2 = alloca { <2 x float>, <2 x float> }, align 8
  %3 = bitcast { <2 x float>, <2 x float> }* %2 to %"class.gfx::RectF"*
  %4 = bitcast { <2 x float>, <2 x float> }* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %4) #11
  %5 = getelementptr inbounds %"class.cc::RenderSurfaceImpl", %"class.cc::RenderSurfaceImpl"* %0, i64 0, i32 1
  %6 = load %"class.cc::LayerTreeImpl"*, %"class.cc::LayerTreeImpl"** %5, align 8
  %7 = getelementptr inbounds %"class.cc::LayerTreeImpl", %"class.cc::LayerTreeImpl"* %6, i64 0, i32 5, i32 5
  %8 = tail call { <2 x float>, <2 x float> } @_ZNK2cc8ClipTree12ViewportClipEv(%"class.cc::ClipTree"* %7) #11
  %9 = getelementptr inbounds { <2 x float>, <2 x float> }, { <2 x float>, <2 x float> }* %2, i64 0, i32 0
  %10 = extractvalue { <2 x float>, <2 x float> } %8, 0
  store <2 x float> %10, <2 x float>* %9, align 8
  %11 = getelementptr inbounds { <2 x float>, <2 x float> }, { <2 x float>, <2 x float> }* %2, i64 0, i32 1
  %12 = extractvalue { <2 x float>, <2 x float> } %8, 1
  store <2 x float> %12, <2 x float>* %11, align 8
  %13 = call { i64, i64 } @_ZN3gfx15ToEnclosingRectERKNS_5RectFE(%"class.gfx::RectF"* nonnull dereferenceable(16) %3) #11
  %14 = extractvalue { i64, i64 } %13, 0
  %15 = trunc i64 %14 to i32
  %16 = extractvalue { i64, i64 } %13, 1
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %4) #11
  %17 = getelementptr inbounds %"class.cc::RenderSurfaceImpl", %"class.cc::RenderSurfaceImpl"* %0, i64 0, i32 4, i32 3
  %18 = getelementptr inbounds %"class.gfx::Rect", %"class.gfx::Rect"* %17, i64 0, i32 0, i32 0
  %19 = load i32, i32* %18, align 4
  %20 = icmp eq i32 %19, %15
  br i1 %20, label %21, label %38

21:                                               ; preds = %1
  %22 = lshr i64 %14, 32
  %23 = trunc i64 %22 to i32
  %24 = getelementptr inbounds %"class.cc::RenderSurfaceImpl", %"class.cc::RenderSurfaceImpl"* %0, i64 0, i32 4, i32 3, i32 0, i32 1
  %25 = load i32, i32* %24, align 4
  %26 = icmp eq i32 %25, %23
  br i1 %26, label %27, label %38

27:                                               ; preds = %21
  %28 = trunc i64 %16 to i32
  %29 = getelementptr inbounds %"class.cc::RenderSurfaceImpl", %"class.cc::RenderSurfaceImpl"* %0, i64 0, i32 4, i32 3, i32 1, i32 0
  %30 = load i32, i32* %29, align 4
  %31 = icmp eq i32 %30, %28
  br i1 %31, label %32, label %38

32:                                               ; preds = %27
  %33 = lshr i64 %16, 32
  %34 = trunc i64 %33 to i32
  %35 = getelementptr inbounds %"class.cc::RenderSurfaceImpl", %"class.cc::RenderSurfaceImpl"* %0, i64 0, i32 4, i32 3, i32 1, i32 1
  %36 = load i32, i32* %35, align 4
  %37 = icmp eq i32 %36, %34
  br i1 %37, label %45, label %38

38:                                               ; preds = %32, %27, %21, %1
  %39 = getelementptr inbounds %"class.cc::RenderSurfaceImpl", %"class.cc::RenderSurfaceImpl"* %0, i64 0, i32 7
  %40 = load i8, i8* %39, align 4
  %41 = or i8 %40, 2
  store i8 %41, i8* %39, align 4
  %42 = bitcast %"class.gfx::Rect"* %17 to i64*
  store i64 %14, i64* %42, align 4
  %43 = getelementptr inbounds %"class.cc::RenderSurfaceImpl", %"class.cc::RenderSurfaceImpl"* %0, i64 0, i32 4, i32 3, i32 1
  %44 = bitcast %"class.gfx::Size"* %43 to i64*
  store i64 %16, i64* %44, align 4
  br label %45

45:                                               ; preds = %32, %38
  ret void
}

declare { i64, i64 } @_ZN3gfx15ToEnclosingRectERKNS_5RectFE(%"class.gfx::RectF"* dereferenceable(16)) local_unnamed_addr #1

declare { <2 x float>, <2 x float> } @_ZNK2cc8ClipTree12ViewportClipEv(%"class.cc::ClipTree"*) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2cc17RenderSurfaceImpl27ClearAccumulatedContentRectEv(%"class.cc::RenderSurfaceImpl"* nocapture) local_unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.cc::RenderSurfaceImpl", %"class.cc::RenderSurfaceImpl"* %0, i64 0, i32 5
  %3 = bitcast %"class.gfx::Rect"* %2 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %3, i8 0, i64 16, i1 false)
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2cc17RenderSurfaceImpl42AccumulateContentRectFromContributingLayerEPNS_9LayerImplE(%"class.cc::RenderSurfaceImpl"*, %"class.cc::LayerImpl"* nocapture readonly) local_unnamed_addr #0 align 2 {
  %3 = alloca <2 x i64>, align 16
  %4 = getelementptr inbounds %"class.cc::RenderSurfaceImpl", %"class.cc::RenderSurfaceImpl"* %0, i64 0, i32 1
  %5 = load %"class.cc::LayerTreeImpl"*, %"class.cc::LayerTreeImpl"** %4, align 8
  %6 = getelementptr inbounds %"class.cc::RenderSurfaceImpl", %"class.cc::RenderSurfaceImpl"* %0, i64 0, i32 3
  %7 = load i32, i32* %6, align 8
  %8 = icmp sgt i32 %7, -1
  br i1 %8, label %9, label %14

9:                                                ; preds = %2
  %10 = sext i32 %7 to i64
  %11 = getelementptr inbounds %"class.cc::LayerTreeImpl", %"class.cc::LayerTreeImpl"* %5, i64 0, i32 5, i32 4, i32 0, i32 1, i32 0, i32 0
  %12 = load %"struct.cc::EffectNode"*, %"struct.cc::EffectNode"** %11, align 8
  %13 = getelementptr inbounds %"struct.cc::EffectNode", %"struct.cc::EffectNode"* %12, i64 %10
  br label %14

14:                                               ; preds = %9, %2
  %15 = phi %"struct.cc::EffectNode"* [ %13, %9 ], [ null, %2 ]
  %16 = getelementptr inbounds %"struct.cc::EffectNode", %"struct.cc::EffectNode"* %15, i64 0, i32 20
  %17 = load i32, i32* %16, align 8
  %18 = icmp eq i32 %17, 0
  br i1 %18, label %33, label %19

19:                                               ; preds = %14
  %20 = sext i32 %17 to i64
  %21 = getelementptr inbounds %"class.cc::LayerTreeImpl", %"class.cc::LayerTreeImpl"* %5, i64 0, i32 5, i32 4, i32 2, i32 0, i32 0
  %22 = load %"class.std::__1::unique_ptr.906"*, %"class.std::__1::unique_ptr.906"** %21, align 8
  %23 = getelementptr inbounds %"class.std::__1::unique_ptr.906", %"class.std::__1::unique_ptr.906"* %22, i64 %20, i32 0, i32 0, i32 0
  %24 = load %"class.cc::RenderSurfaceImpl"*, %"class.cc::RenderSurfaceImpl"** %23, align 8
  %25 = icmp eq %"class.cc::RenderSurfaceImpl"* %24, %0
  br i1 %25, label %33, label %26

26:                                               ; preds = %19
  %27 = bitcast <2 x i64>* %3 to %"class.gfx::Rect"*
  %28 = getelementptr inbounds %"class.cc::RenderSurfaceImpl", %"class.cc::RenderSurfaceImpl"* %0, i64 0, i32 5
  %29 = bitcast <2 x i64>* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %29) #11
  %30 = getelementptr inbounds %"class.cc::LayerImpl", %"class.cc::LayerImpl"* %1, i64 0, i32 25, i32 8
  %31 = bitcast %"class.gfx::Rect"* %30 to <2 x i64>*
  %32 = load <2 x i64>, <2 x i64>* %31, align 4
  store <2 x i64> %32, <2 x i64>* %3, align 16
  call void @_ZN3gfx4Rect5UnionERKS0_(%"class.gfx::Rect"* %28, %"class.gfx::Rect"* nonnull dereferenceable(16) %27) #11
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %29) #11
  br label %33

33:                                               ; preds = %14, %19, %26
  ret void
}

declare void @_ZN3gfx4Rect5UnionERKS0_(%"class.gfx::Rect"*, %"class.gfx::Rect"* dereferenceable(16)) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2cc17RenderSurfaceImpl50AccumulateContentRectFromContributingRenderSurfaceEPS0_(%"class.cc::RenderSurfaceImpl"*, %"class.cc::RenderSurfaceImpl"*) local_unnamed_addr #0 align 2 {
  %3 = alloca { i64, i64 }, align 8
  %4 = alloca { <2 x float>, <2 x float> }, align 8
  %5 = getelementptr inbounds %"class.cc::RenderSurfaceImpl", %"class.cc::RenderSurfaceImpl"* %0, i64 0, i32 1
  %6 = load %"class.cc::LayerTreeImpl"*, %"class.cc::LayerTreeImpl"** %5, align 8
  %7 = getelementptr inbounds %"class.cc::RenderSurfaceImpl", %"class.cc::RenderSurfaceImpl"* %0, i64 0, i32 3
  %8 = load i32, i32* %7, align 8
  %9 = icmp sgt i32 %8, -1
  br i1 %9, label %10, label %15

10:                                               ; preds = %2
  %11 = sext i32 %8 to i64
  %12 = getelementptr inbounds %"class.cc::LayerTreeImpl", %"class.cc::LayerTreeImpl"* %6, i64 0, i32 5, i32 4, i32 0, i32 1, i32 0, i32 0
  %13 = load %"struct.cc::EffectNode"*, %"struct.cc::EffectNode"** %12, align 8
  %14 = getelementptr inbounds %"struct.cc::EffectNode", %"struct.cc::EffectNode"* %13, i64 %11
  br label %15

15:                                               ; preds = %10, %2
  %16 = phi %"struct.cc::EffectNode"* [ %14, %10 ], [ null, %2 ]
  %17 = getelementptr inbounds %"struct.cc::EffectNode", %"struct.cc::EffectNode"* %16, i64 0, i32 20
  %18 = load i32, i32* %17, align 8
  %19 = icmp eq i32 %18, 0
  br i1 %19, label %43, label %20

20:                                               ; preds = %15
  %21 = sext i32 %18 to i64
  %22 = getelementptr inbounds %"class.cc::LayerTreeImpl", %"class.cc::LayerTreeImpl"* %6, i64 0, i32 5, i32 4, i32 2, i32 0, i32 0
  %23 = load %"class.std::__1::unique_ptr.906"*, %"class.std::__1::unique_ptr.906"** %22, align 8
  %24 = getelementptr inbounds %"class.std::__1::unique_ptr.906", %"class.std::__1::unique_ptr.906"* %23, i64 %21, i32 0, i32 0, i32 0
  %25 = load %"class.cc::RenderSurfaceImpl"*, %"class.cc::RenderSurfaceImpl"** %24, align 8
  %26 = icmp eq %"class.cc::RenderSurfaceImpl"* %25, %0
  br i1 %26, label %43, label %27

27:                                               ; preds = %20
  %28 = bitcast { i64, i64 }* %3 to %"class.gfx::Rect"*
  %29 = bitcast { <2 x float>, <2 x float> }* %4 to %"class.gfx::RectF"*
  %30 = getelementptr inbounds %"class.cc::RenderSurfaceImpl", %"class.cc::RenderSurfaceImpl"* %0, i64 0, i32 5
  %31 = bitcast { i64, i64 }* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %31) #11
  %32 = bitcast { <2 x float>, <2 x float> }* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %32) #11
  %33 = tail call { <2 x float>, <2 x float> } @_ZNK2cc17RenderSurfaceImpl19DrawableContentRectEv(%"class.cc::RenderSurfaceImpl"* %1)
  %34 = getelementptr inbounds { <2 x float>, <2 x float> }, { <2 x float>, <2 x float> }* %4, i64 0, i32 0
  %35 = extractvalue { <2 x float>, <2 x float> } %33, 0
  store <2 x float> %35, <2 x float>* %34, align 8
  %36 = getelementptr inbounds { <2 x float>, <2 x float> }, { <2 x float>, <2 x float> }* %4, i64 0, i32 1
  %37 = extractvalue { <2 x float>, <2 x float> } %33, 1
  store <2 x float> %37, <2 x float>* %36, align 8
  %38 = call { i64, i64 } @_ZN3gfx14ToEnclosedRectERKNS_5RectFE(%"class.gfx::RectF"* nonnull dereferenceable(16) %29) #11
  %39 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %3, i64 0, i32 0
  %40 = extractvalue { i64, i64 } %38, 0
  store i64 %40, i64* %39, align 8
  %41 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %3, i64 0, i32 1
  %42 = extractvalue { i64, i64 } %38, 1
  store i64 %42, i64* %41, align 8
  call void @_ZN3gfx4Rect5UnionERKS0_(%"class.gfx::Rect"* %30, %"class.gfx::Rect"* nonnull dereferenceable(16) %28) #11
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %32) #11
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %31) #11
  br label %43

43:                                               ; preds = %15, %20, %27
  ret void
}

declare { i64, i64 } @_ZN3gfx14ToEnclosedRectERKNS_5RectFE(%"class.gfx::RectF"* dereferenceable(16)) local_unnamed_addr #1

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden zeroext i1 @_ZNK2cc17RenderSurfaceImpl22SurfacePropertyChangedEv(%"class.cc::RenderSurfaceImpl"* nocapture readonly) local_unnamed_addr #4 align 2 {
  %2 = getelementptr inbounds %"class.cc::RenderSurfaceImpl", %"class.cc::RenderSurfaceImpl"* %0, i64 0, i32 7
  %3 = load i8, i8* %2, align 4
  %4 = and i8 %3, 2
  %5 = icmp eq i8 %4, 0
  br i1 %5, label %6, label %54

6:                                                ; preds = %1
  %7 = getelementptr inbounds %"class.cc::RenderSurfaceImpl", %"class.cc::RenderSurfaceImpl"* %0, i64 0, i32 1
  %8 = load %"class.cc::LayerTreeImpl"*, %"class.cc::LayerTreeImpl"** %7, align 8
  %9 = and i8 %3, 4
  %10 = icmp eq i8 %9, 0
  br i1 %10, label %11, label %54

11:                                               ; preds = %6
  %12 = getelementptr inbounds %"class.cc::LayerTreeImpl", %"class.cc::LayerTreeImpl"* %8, i64 0, i32 5, i32 9
  %13 = load i8, i8* %12, align 2, !range !8
  %14 = icmp eq i8 %13, 0
  br i1 %14, label %15, label %54

15:                                               ; preds = %11
  %16 = getelementptr inbounds %"class.cc::RenderSurfaceImpl", %"class.cc::RenderSurfaceImpl"* %0, i64 0, i32 3
  %17 = load i32, i32* %16, align 8
  %18 = icmp sgt i32 %17, -1
  br i1 %18, label %19, label %24

19:                                               ; preds = %15
  %20 = sext i32 %17 to i64
  %21 = getelementptr inbounds %"class.cc::LayerTreeImpl", %"class.cc::LayerTreeImpl"* %8, i64 0, i32 5, i32 4, i32 0, i32 1, i32 0, i32 0
  %22 = load %"struct.cc::EffectNode"*, %"struct.cc::EffectNode"** %21, align 8
  %23 = getelementptr inbounds %"struct.cc::EffectNode", %"struct.cc::EffectNode"* %22, i64 %20
  br label %24

24:                                               ; preds = %19, %15
  %25 = phi %"struct.cc::EffectNode"* [ %23, %19 ], [ null, %15 ]
  %26 = getelementptr inbounds %"struct.cc::EffectNode", %"struct.cc::EffectNode"* %25, i64 0, i32 18
  %27 = load i32, i32* %26, align 8
  %28 = icmp sgt i32 %27, -1
  br i1 %28, label %29, label %34

29:                                               ; preds = %24
  %30 = sext i32 %27 to i64
  %31 = getelementptr inbounds %"class.cc::LayerTreeImpl", %"class.cc::LayerTreeImpl"* %8, i64 0, i32 5, i32 3, i32 0, i32 1, i32 0, i32 0
  %32 = load %"struct.cc::TransformNode"*, %"struct.cc::TransformNode"** %31, align 8
  %33 = getelementptr inbounds %"struct.cc::TransformNode", %"struct.cc::TransformNode"* %32, i64 %30
  br label %34

34:                                               ; preds = %29, %24
  %35 = phi %"struct.cc::TransformNode"* [ %33, %29 ], [ null, %24 ]
  %36 = getelementptr inbounds %"struct.cc::TransformNode", %"struct.cc::TransformNode"* %35, i64 0, i32 10
  %37 = bitcast i24* %36 to i32*
  %38 = load i32, i32* %37, align 4
  %39 = and i32 %38, 8192
  %40 = icmp eq i32 %39, 0
  br i1 %40, label %41, label %54

41:                                               ; preds = %34
  br i1 %18, label %42, label %47

42:                                               ; preds = %41
  %43 = sext i32 %17 to i64
  %44 = getelementptr inbounds %"class.cc::LayerTreeImpl", %"class.cc::LayerTreeImpl"* %8, i64 0, i32 5, i32 4, i32 0, i32 1, i32 0, i32 0
  %45 = load %"struct.cc::EffectNode"*, %"struct.cc::EffectNode"** %44, align 8
  %46 = getelementptr inbounds %"struct.cc::EffectNode", %"struct.cc::EffectNode"* %45, i64 %43
  br label %47

47:                                               ; preds = %42, %41
  %48 = phi %"struct.cc::EffectNode"* [ %46, %42 ], [ null, %41 ]
  %49 = getelementptr inbounds %"struct.cc::EffectNode", %"struct.cc::EffectNode"* %48, i64 0, i32 16
  %50 = bitcast [3 x i8]* %49 to i24*
  %51 = load i24, i24* %50, align 4
  %52 = trunc i24 %51 to i16
  %53 = icmp slt i16 %52, 0
  br label %54

54:                                               ; preds = %47, %34, %11, %6, %1
  %55 = phi i1 [ true, %1 ], [ true, %34 ], [ true, %11 ], [ true, %6 ], [ %53, %47 ]
  ret i1 %55
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden zeroext i1 @_ZNK2cc17RenderSurfaceImpl23AncestorPropertyChangedEv(%"class.cc::RenderSurfaceImpl"* nocapture readonly) local_unnamed_addr #4 align 2 {
  %2 = getelementptr inbounds %"class.cc::RenderSurfaceImpl", %"class.cc::RenderSurfaceImpl"* %0, i64 0, i32 1
  %3 = load %"class.cc::LayerTreeImpl"*, %"class.cc::LayerTreeImpl"** %2, align 8
  %4 = getelementptr inbounds %"class.cc::RenderSurfaceImpl", %"class.cc::RenderSurfaceImpl"* %0, i64 0, i32 7
  %5 = load i8, i8* %4, align 4
  %6 = and i8 %5, 4
  %7 = icmp eq i8 %6, 0
  br i1 %7, label %8, label %51

8:                                                ; preds = %1
  %9 = getelementptr inbounds %"class.cc::LayerTreeImpl", %"class.cc::LayerTreeImpl"* %3, i64 0, i32 5, i32 9
  %10 = load i8, i8* %9, align 2, !range !8
  %11 = icmp eq i8 %10, 0
  br i1 %11, label %12, label %51

12:                                               ; preds = %8
  %13 = getelementptr inbounds %"class.cc::RenderSurfaceImpl", %"class.cc::RenderSurfaceImpl"* %0, i64 0, i32 3
  %14 = load i32, i32* %13, align 8
  %15 = icmp sgt i32 %14, -1
  br i1 %15, label %16, label %21

16:                                               ; preds = %12
  %17 = sext i32 %14 to i64
  %18 = getelementptr inbounds %"class.cc::LayerTreeImpl", %"class.cc::LayerTreeImpl"* %3, i64 0, i32 5, i32 4, i32 0, i32 1, i32 0, i32 0
  %19 = load %"struct.cc::EffectNode"*, %"struct.cc::EffectNode"** %18, align 8
  %20 = getelementptr inbounds %"struct.cc::EffectNode", %"struct.cc::EffectNode"* %19, i64 %17
  br label %21

21:                                               ; preds = %12, %16
  %22 = phi %"struct.cc::EffectNode"* [ %20, %16 ], [ null, %12 ]
  %23 = getelementptr inbounds %"struct.cc::EffectNode", %"struct.cc::EffectNode"* %22, i64 0, i32 18
  %24 = load i32, i32* %23, align 8
  %25 = icmp sgt i32 %24, -1
  br i1 %25, label %26, label %31

26:                                               ; preds = %21
  %27 = sext i32 %24 to i64
  %28 = getelementptr inbounds %"class.cc::LayerTreeImpl", %"class.cc::LayerTreeImpl"* %3, i64 0, i32 5, i32 3, i32 0, i32 1, i32 0, i32 0
  %29 = load %"struct.cc::TransformNode"*, %"struct.cc::TransformNode"** %28, align 8
  %30 = getelementptr inbounds %"struct.cc::TransformNode", %"struct.cc::TransformNode"* %29, i64 %27
  br label %31

31:                                               ; preds = %21, %26
  %32 = phi %"struct.cc::TransformNode"* [ %30, %26 ], [ null, %21 ]
  %33 = getelementptr inbounds %"struct.cc::TransformNode", %"struct.cc::TransformNode"* %32, i64 0, i32 10
  %34 = bitcast i24* %33 to i32*
  %35 = load i32, i32* %34, align 4
  %36 = and i32 %35, 8192
  %37 = icmp eq i32 %36, 0
  br i1 %37, label %38, label %51

38:                                               ; preds = %31
  br i1 %15, label %39, label %44

39:                                               ; preds = %38
  %40 = sext i32 %14 to i64
  %41 = getelementptr inbounds %"class.cc::LayerTreeImpl", %"class.cc::LayerTreeImpl"* %3, i64 0, i32 5, i32 4, i32 0, i32 1, i32 0, i32 0
  %42 = load %"struct.cc::EffectNode"*, %"struct.cc::EffectNode"** %41, align 8
  %43 = getelementptr inbounds %"struct.cc::EffectNode", %"struct.cc::EffectNode"* %42, i64 %40
  br label %44

44:                                               ; preds = %38, %39
  %45 = phi %"struct.cc::EffectNode"* [ %43, %39 ], [ null, %38 ]
  %46 = getelementptr inbounds %"struct.cc::EffectNode", %"struct.cc::EffectNode"* %45, i64 0, i32 16
  %47 = bitcast [3 x i8]* %46 to i24*
  %48 = load i24, i24* %47, align 4
  %49 = trunc i24 %48 to i16
  %50 = icmp slt i16 %49, 0
  br label %51

51:                                               ; preds = %31, %8, %1, %44
  %52 = phi i1 [ true, %31 ], [ true, %8 ], [ true, %1 ], [ %50, %44 ]
  ret i1 %52
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden zeroext i1 @_ZNK2cc17RenderSurfaceImpl40SurfacePropertyChangedOnlyFromDescendantEv(%"class.cc::RenderSurfaceImpl"* nocapture readonly) local_unnamed_addr #4 align 2 {
  %2 = getelementptr inbounds %"class.cc::RenderSurfaceImpl", %"class.cc::RenderSurfaceImpl"* %0, i64 0, i32 7
  %3 = load i8, i8* %2, align 4
  %4 = and i8 %3, 2
  %5 = icmp eq i8 %4, 0
  br i1 %5, label %54, label %6

6:                                                ; preds = %1
  %7 = getelementptr inbounds %"class.cc::RenderSurfaceImpl", %"class.cc::RenderSurfaceImpl"* %0, i64 0, i32 1
  %8 = load %"class.cc::LayerTreeImpl"*, %"class.cc::LayerTreeImpl"** %7, align 8
  %9 = and i8 %3, 4
  %10 = icmp eq i8 %9, 0
  br i1 %10, label %11, label %54

11:                                               ; preds = %6
  %12 = getelementptr inbounds %"class.cc::LayerTreeImpl", %"class.cc::LayerTreeImpl"* %8, i64 0, i32 5, i32 9
  %13 = load i8, i8* %12, align 2, !range !8
  %14 = icmp eq i8 %13, 0
  br i1 %14, label %15, label %54

15:                                               ; preds = %11
  %16 = getelementptr inbounds %"class.cc::RenderSurfaceImpl", %"class.cc::RenderSurfaceImpl"* %0, i64 0, i32 3
  %17 = load i32, i32* %16, align 8
  %18 = icmp sgt i32 %17, -1
  br i1 %18, label %19, label %24

19:                                               ; preds = %15
  %20 = sext i32 %17 to i64
  %21 = getelementptr inbounds %"class.cc::LayerTreeImpl", %"class.cc::LayerTreeImpl"* %8, i64 0, i32 5, i32 4, i32 0, i32 1, i32 0, i32 0
  %22 = load %"struct.cc::EffectNode"*, %"struct.cc::EffectNode"** %21, align 8
  %23 = getelementptr inbounds %"struct.cc::EffectNode", %"struct.cc::EffectNode"* %22, i64 %20
  br label %24

24:                                               ; preds = %19, %15
  %25 = phi %"struct.cc::EffectNode"* [ %23, %19 ], [ null, %15 ]
  %26 = getelementptr inbounds %"struct.cc::EffectNode", %"struct.cc::EffectNode"* %25, i64 0, i32 18
  %27 = load i32, i32* %26, align 8
  %28 = icmp sgt i32 %27, -1
  br i1 %28, label %29, label %34

29:                                               ; preds = %24
  %30 = sext i32 %27 to i64
  %31 = getelementptr inbounds %"class.cc::LayerTreeImpl", %"class.cc::LayerTreeImpl"* %8, i64 0, i32 5, i32 3, i32 0, i32 1, i32 0, i32 0
  %32 = load %"struct.cc::TransformNode"*, %"struct.cc::TransformNode"** %31, align 8
  %33 = getelementptr inbounds %"struct.cc::TransformNode", %"struct.cc::TransformNode"* %32, i64 %30
  br label %34

34:                                               ; preds = %29, %24
  %35 = phi %"struct.cc::TransformNode"* [ %33, %29 ], [ null, %24 ]
  %36 = getelementptr inbounds %"struct.cc::TransformNode", %"struct.cc::TransformNode"* %35, i64 0, i32 10
  %37 = bitcast i24* %36 to i32*
  %38 = load i32, i32* %37, align 4
  %39 = and i32 %38, 8192
  %40 = icmp eq i32 %39, 0
  br i1 %40, label %41, label %54

41:                                               ; preds = %34
  br i1 %18, label %42, label %47

42:                                               ; preds = %41
  %43 = sext i32 %17 to i64
  %44 = getelementptr inbounds %"class.cc::LayerTreeImpl", %"class.cc::LayerTreeImpl"* %8, i64 0, i32 5, i32 4, i32 0, i32 1, i32 0, i32 0
  %45 = load %"struct.cc::EffectNode"*, %"struct.cc::EffectNode"** %44, align 8
  %46 = getelementptr inbounds %"struct.cc::EffectNode", %"struct.cc::EffectNode"* %45, i64 %43
  br label %47

47:                                               ; preds = %42, %41
  %48 = phi %"struct.cc::EffectNode"* [ %46, %42 ], [ null, %41 ]
  %49 = getelementptr inbounds %"struct.cc::EffectNode", %"struct.cc::EffectNode"* %48, i64 0, i32 16
  %50 = bitcast [3 x i8]* %49 to i24*
  %51 = load i24, i24* %50, align 4
  %52 = trunc i24 %51 to i16
  %53 = icmp sgt i16 %52, -1
  br label %54

54:                                               ; preds = %47, %34, %11, %6, %1
  %55 = phi i1 [ false, %1 ], [ false, %34 ], [ false, %11 ], [ false, %6 ], [ %53, %47 ]
  ret i1 %55
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @_ZN2cc17RenderSurfaceImpl27NoteAncestorPropertyChangedEv(%"class.cc::RenderSurfaceImpl"* nocapture) local_unnamed_addr #7 align 2 {
  %2 = getelementptr inbounds %"class.cc::RenderSurfaceImpl", %"class.cc::RenderSurfaceImpl"* %0, i64 0, i32 7
  %3 = load i8, i8* %2, align 4
  %4 = or i8 %3, 4
  store i8 %4, i8* %2, align 4
  ret void
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden zeroext i1 @_ZNK2cc17RenderSurfaceImpl33HasDamageFromeContributingContentEv(%"class.cc::RenderSurfaceImpl"* nocapture readonly) local_unnamed_addr #4 align 2 {
  %2 = getelementptr inbounds %"class.cc::RenderSurfaceImpl", %"class.cc::RenderSurfaceImpl"* %0, i64 0, i32 10, i32 0, i32 0, i32 0
  %3 = load %"class.cc::DamageTracker"*, %"class.cc::DamageTracker"** %2, align 8
  %4 = getelementptr inbounds %"class.cc::DamageTracker", %"class.cc::DamageTracker"* %3, i64 0, i32 4
  %5 = load i8, i8* %4, align 8, !range !8
  %6 = icmp ne i8 %5, 0
  ret i1 %6
}

; Function Attrs: nounwind ssp uwtable
define hidden { i64, i64 } @_ZNK2cc17RenderSurfaceImpl13GetDamageRectEv(%"class.cc::RenderSurfaceImpl"* nocapture readonly) local_unnamed_addr #0 align 2 {
  %2 = alloca %"class.gfx::Rect", align 8
  %3 = bitcast %"class.gfx::Rect"* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %3) #11
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %3, i8 0, i64 16, i1 false) #11
  %4 = getelementptr inbounds %"class.cc::RenderSurfaceImpl", %"class.cc::RenderSurfaceImpl"* %0, i64 0, i32 10, i32 0, i32 0, i32 0
  %5 = load %"class.cc::DamageTracker"*, %"class.cc::DamageTracker"** %4, align 8
  %6 = call zeroext i1 @_ZN2cc13DamageTracker20GetDamageRectIfValidEPN3gfx4RectE(%"class.cc::DamageTracker"* %5, %"class.gfx::Rect"* nonnull %2) #11
  %7 = getelementptr inbounds %"class.gfx::Rect", %"class.gfx::Rect"* %2, i64 0, i32 1
  %8 = getelementptr inbounds %"class.cc::RenderSurfaceImpl", %"class.cc::RenderSurfaceImpl"* %0, i64 0, i32 4, i32 3
  %9 = getelementptr inbounds %"class.cc::RenderSurfaceImpl", %"class.cc::RenderSurfaceImpl"* %0, i64 0, i32 4, i32 3, i32 1
  %10 = select i1 %6, %"class.gfx::Rect"* %2, %"class.gfx::Rect"* %8
  %11 = select i1 %6, %"class.gfx::Size"* %7, %"class.gfx::Size"* %9
  %12 = bitcast %"class.gfx::Size"* %11 to i64*
  %13 = bitcast %"class.gfx::Rect"* %10 to i64*
  %14 = load i64, i64* %12, align 4
  %15 = load i64, i64* %13, align 4
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %3) #11
  %16 = insertvalue { i64, i64 } undef, i64 %15, 0
  %17 = insertvalue { i64, i64 } %16, i64 %14, 1
  ret { i64, i64 } %17
}

declare zeroext i1 @_ZN2cc13DamageTracker20GetDamageRectIfValidEPN3gfx4RectE(%"class.cc::DamageTracker"*, %"class.gfx::Rect"*) local_unnamed_addr #1

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @_ZN2cc17RenderSurfaceImpl25ResetPropertyChangedFlagsEv(%"class.cc::RenderSurfaceImpl"* nocapture) local_unnamed_addr #7 align 2 {
  %2 = getelementptr inbounds %"class.cc::RenderSurfaceImpl", %"class.cc::RenderSurfaceImpl"* %0, i64 0, i32 7
  %3 = load i8, i8* %2, align 4
  %4 = and i8 %3, -7
  store i8 %4, i8* %2, align 4
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden %"class.viz::CompositorRenderPass"* @_ZN2cc17RenderSurfaceImpl16CreateRenderPassEv(%"class.cc::RenderSurfaceImpl"*) local_unnamed_addr #0 align 2 {
  %2 = alloca %"class.gfx::Rect", align 8
  %3 = alloca { i64, i64 }, align 8
  %4 = bitcast { i64, i64 }* %3 to %"class.gfx::Rect"*
  %5 = alloca <2 x i64>, align 16
  %6 = bitcast <2 x i64>* %5 to %"class.gfx::Rect"*
  %7 = alloca <2 x i64>, align 16
  %8 = bitcast <2 x i64>* %7 to %"class.gfx::Rect"*
  %9 = alloca <2 x i64>, align 16
  %10 = bitcast <2 x i64>* %9 to { i64, i64 }*
  %11 = getelementptr inbounds %"class.cc::RenderSurfaceImpl", %"class.cc::RenderSurfaceImpl"* %0, i64 0, i32 6
  %12 = load i32, i32* %11, align 8
  %13 = sext i32 %12 to i64
  %14 = tail call %"class.viz::CompositorRenderPass"* @_ZN3viz20CompositorRenderPass6CreateEm(i64 %13) #11
  %15 = bitcast { i64, i64 }* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %15) #11
  %16 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %3, i64 0, i32 1
  %17 = bitcast %"class.gfx::Rect"* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %17) #11
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %17, i8 0, i64 16, i1 false) #11
  %18 = getelementptr inbounds %"class.cc::RenderSurfaceImpl", %"class.cc::RenderSurfaceImpl"* %0, i64 0, i32 10, i32 0, i32 0, i32 0
  %19 = load %"class.cc::DamageTracker"*, %"class.cc::DamageTracker"** %18, align 8
  %20 = call zeroext i1 @_ZN2cc13DamageTracker20GetDamageRectIfValidEPN3gfx4RectE(%"class.cc::DamageTracker"* %19, %"class.gfx::Rect"* nonnull %2) #11
  %21 = getelementptr inbounds %"class.gfx::Rect", %"class.gfx::Rect"* %2, i64 0, i32 1
  %22 = getelementptr inbounds %"class.cc::RenderSurfaceImpl", %"class.cc::RenderSurfaceImpl"* %0, i64 0, i32 4, i32 3
  %23 = getelementptr inbounds %"class.cc::RenderSurfaceImpl", %"class.cc::RenderSurfaceImpl"* %0, i64 0, i32 4, i32 3, i32 1
  %24 = select i1 %20, %"class.gfx::Rect"* %2, %"class.gfx::Rect"* %22
  %25 = select i1 %20, %"class.gfx::Size"* %21, %"class.gfx::Size"* %23
  %26 = bitcast %"class.gfx::Size"* %25 to i64*
  %27 = bitcast %"class.gfx::Rect"* %24 to i64*
  %28 = load i64, i64* %26, align 4
  %29 = load i64, i64* %27, align 4
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %17) #11
  %30 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %3, i64 0, i32 0
  store i64 %29, i64* %30, align 8
  store i64 %28, i64* %16, align 8
  %31 = bitcast <2 x i64>* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %31) #11
  %32 = bitcast %"class.gfx::Rect"* %22 to <2 x i64>*
  %33 = load <2 x i64>, <2 x i64>* %32, align 4
  store <2 x i64> %33, <2 x i64>* %5, align 16
  call void @_ZN3gfx4Rect9IntersectERKS0_(%"class.gfx::Rect"* nonnull %4, %"class.gfx::Rect"* nonnull dereferenceable(16) %6) #11
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %31) #11
  %34 = getelementptr inbounds %"class.cc::RenderSurfaceImpl", %"class.cc::RenderSurfaceImpl"* %0, i64 0, i32 2
  %35 = load i64, i64* %34, align 8
  %36 = bitcast <2 x i64>* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %36) #11
  %37 = bitcast %"class.gfx::Rect"* %22 to <2 x i64>*
  %38 = load <2 x i64>, <2 x i64>* %37, align 4
  store <2 x i64> %38, <2 x i64>* %7, align 16
  %39 = getelementptr inbounds %"class.cc::RenderSurfaceImpl", %"class.cc::RenderSurfaceImpl"* %0, i64 0, i32 4, i32 2
  call void @_ZN3viz20CompositorRenderPass6SetNewEN4util6IdTypeIS0_mLm0ELm1EEERKN3gfx4RectES7_RKNS4_9TransformE(%"class.viz::CompositorRenderPass"* %14, i64 %35, %"class.gfx::Rect"* nonnull dereferenceable(16) %8, %"class.gfx::Rect"* nonnull dereferenceable(16) %4, %"class.gfx::Transform"* dereferenceable(68) %39) #11
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %36) #11
  %40 = getelementptr inbounds %"class.cc::RenderSurfaceImpl", %"class.cc::RenderSurfaceImpl"* %0, i64 0, i32 3
  %41 = load i32, i32* %40, align 8
  %42 = icmp sgt i32 %41, -1
  br i1 %42, label %43, label %50

43:                                               ; preds = %1
  %44 = getelementptr inbounds %"class.cc::RenderSurfaceImpl", %"class.cc::RenderSurfaceImpl"* %0, i64 0, i32 1
  %45 = load %"class.cc::LayerTreeImpl"*, %"class.cc::LayerTreeImpl"** %44, align 8
  %46 = sext i32 %41 to i64
  %47 = getelementptr inbounds %"class.cc::LayerTreeImpl", %"class.cc::LayerTreeImpl"* %45, i64 0, i32 5, i32 4, i32 0, i32 1, i32 0, i32 0
  %48 = load %"struct.cc::EffectNode"*, %"struct.cc::EffectNode"** %47, align 8
  %49 = getelementptr inbounds %"struct.cc::EffectNode", %"struct.cc::EffectNode"* %48, i64 %46
  br label %50

50:                                               ; preds = %1, %43
  %51 = phi %"struct.cc::EffectNode"* [ %49, %43 ], [ null, %1 ]
  %52 = getelementptr inbounds %"struct.cc::EffectNode", %"struct.cc::EffectNode"* %51, i64 0, i32 5
  %53 = getelementptr inbounds %"class.viz::CompositorRenderPass", %"class.viz::CompositorRenderPass"* %14, i64 0, i32 0, i32 3
  %54 = call dereferenceable(24) %"class.cc::FilterOperations"* @_ZN2cc16FilterOperationsaSERKS0_(%"class.cc::FilterOperations"* %53, %"class.cc::FilterOperations"* dereferenceable(24) %52) #11
  %55 = load i32, i32* %40, align 8
  %56 = icmp sgt i32 %55, -1
  br i1 %56, label %57, label %64

57:                                               ; preds = %50
  %58 = getelementptr inbounds %"class.cc::RenderSurfaceImpl", %"class.cc::RenderSurfaceImpl"* %0, i64 0, i32 1
  %59 = load %"class.cc::LayerTreeImpl"*, %"class.cc::LayerTreeImpl"** %58, align 8
  %60 = sext i32 %55 to i64
  %61 = getelementptr inbounds %"class.cc::LayerTreeImpl", %"class.cc::LayerTreeImpl"* %59, i64 0, i32 5, i32 4, i32 0, i32 1, i32 0, i32 0
  %62 = load %"struct.cc::EffectNode"*, %"struct.cc::EffectNode"** %61, align 8
  %63 = getelementptr inbounds %"struct.cc::EffectNode", %"struct.cc::EffectNode"* %62, i64 %60
  br label %64

64:                                               ; preds = %50, %57
  %65 = phi %"struct.cc::EffectNode"* [ %63, %57 ], [ null, %50 ]
  %66 = getelementptr inbounds %"struct.cc::EffectNode", %"struct.cc::EffectNode"* %65, i64 0, i32 6
  %67 = getelementptr inbounds %"class.viz::CompositorRenderPass", %"class.viz::CompositorRenderPass"* %14, i64 0, i32 0, i32 4
  %68 = call dereferenceable(24) %"class.cc::FilterOperations"* @_ZN2cc16FilterOperationsaSERKS0_(%"class.cc::FilterOperations"* %67, %"class.cc::FilterOperations"* dereferenceable(24) %66) #11
  %69 = load i32, i32* %40, align 8, !noalias !9
  %70 = icmp sgt i32 %69, -1
  br i1 %70, label %71, label %78

71:                                               ; preds = %64
  %72 = getelementptr inbounds %"class.cc::RenderSurfaceImpl", %"class.cc::RenderSurfaceImpl"* %0, i64 0, i32 1
  %73 = load %"class.cc::LayerTreeImpl"*, %"class.cc::LayerTreeImpl"** %72, align 8, !noalias !9
  %74 = sext i32 %69 to i64
  %75 = getelementptr inbounds %"class.cc::LayerTreeImpl", %"class.cc::LayerTreeImpl"* %73, i64 0, i32 5, i32 4, i32 0, i32 1, i32 0, i32 0
  %76 = load %"struct.cc::EffectNode"*, %"struct.cc::EffectNode"** %75, align 8, !noalias !9
  %77 = getelementptr inbounds %"struct.cc::EffectNode", %"struct.cc::EffectNode"* %76, i64 %74
  br label %78

78:                                               ; preds = %64, %71
  %79 = phi %"struct.cc::EffectNode"* [ %77, %71 ], [ null, %64 ]
  %80 = getelementptr inbounds %"struct.cc::EffectNode", %"struct.cc::EffectNode"* %79, i64 0, i32 7, i32 0, i32 0, i32 0, i32 0
  %81 = getelementptr inbounds %"class.viz::CompositorRenderPass", %"class.viz::CompositorRenderPass"* %14, i64 0, i32 0, i32 5, i32 0, i32 0, i32 0, i32 0
  call void @llvm.memmove.p0i8.p0i8.i64(i8* align 8 %81, i8* align 8 %80, i64 56, i1 false)
  %82 = load i32, i32* %40, align 8
  %83 = icmp sgt i32 %82, -1
  br i1 %83, label %84, label %91

84:                                               ; preds = %78
  %85 = getelementptr inbounds %"class.cc::RenderSurfaceImpl", %"class.cc::RenderSurfaceImpl"* %0, i64 0, i32 1
  %86 = load %"class.cc::LayerTreeImpl"*, %"class.cc::LayerTreeImpl"** %85, align 8
  %87 = sext i32 %82 to i64
  %88 = getelementptr inbounds %"class.cc::LayerTreeImpl", %"class.cc::LayerTreeImpl"* %86, i64 0, i32 5, i32 4, i32 0, i32 1, i32 0, i32 0
  %89 = load %"struct.cc::EffectNode"*, %"struct.cc::EffectNode"** %88, align 8
  %90 = getelementptr inbounds %"struct.cc::EffectNode", %"struct.cc::EffectNode"* %89, i64 %87
  br label %91

91:                                               ; preds = %78, %84
  %92 = phi %"struct.cc::EffectNode"* [ %90, %84 ], [ null, %78 ]
  %93 = getelementptr inbounds %"struct.cc::EffectNode", %"struct.cc::EffectNode"* %92, i64 0, i32 16
  %94 = bitcast [3 x i8]* %93 to i24*
  %95 = load i24, i24* %94, align 4
  %96 = getelementptr inbounds %"class.viz::CompositorRenderPass", %"class.viz::CompositorRenderPass"* %14, i64 0, i32 0, i32 9
  %97 = lshr i24 %95, 4
  %98 = trunc i24 %97 to i8
  %99 = and i8 %98, 1
  store i8 %99, i8* %96, align 1
  %100 = load i32, i32* %40, align 8
  %101 = icmp sgt i32 %100, -1
  br i1 %101, label %102, label %109

102:                                              ; preds = %91
  %103 = getelementptr inbounds %"class.cc::RenderSurfaceImpl", %"class.cc::RenderSurfaceImpl"* %0, i64 0, i32 1
  %104 = load %"class.cc::LayerTreeImpl"*, %"class.cc::LayerTreeImpl"** %103, align 8
  %105 = sext i32 %100 to i64
  %106 = getelementptr inbounds %"class.cc::LayerTreeImpl", %"class.cc::LayerTreeImpl"* %104, i64 0, i32 5, i32 4, i32 0, i32 1, i32 0, i32 0
  %107 = load %"struct.cc::EffectNode"*, %"struct.cc::EffectNode"** %106, align 8
  %108 = getelementptr inbounds %"struct.cc::EffectNode", %"struct.cc::EffectNode"* %107, i64 %105
  br label %109

109:                                              ; preds = %91, %102
  %110 = phi %"struct.cc::EffectNode"* [ %108, %102 ], [ null, %91 ]
  %111 = getelementptr inbounds %"struct.cc::EffectNode", %"struct.cc::EffectNode"* %110, i64 0, i32 14, i32 0
  %112 = load i32, i32* %111, align 8
  %113 = getelementptr inbounds %"class.viz::CompositorRenderPass", %"class.viz::CompositorRenderPass"* %14, i64 0, i32 2, i32 0
  store i32 %112, i32* %113, align 8
  %114 = load i32, i32* %40, align 8
  %115 = icmp sgt i32 %114, -1
  br i1 %115, label %116, label %123

116:                                              ; preds = %109
  %117 = getelementptr inbounds %"class.cc::RenderSurfaceImpl", %"class.cc::RenderSurfaceImpl"* %0, i64 0, i32 1
  %118 = load %"class.cc::LayerTreeImpl"*, %"class.cc::LayerTreeImpl"** %117, align 8
  %119 = sext i32 %114 to i64
  %120 = getelementptr inbounds %"class.cc::LayerTreeImpl", %"class.cc::LayerTreeImpl"* %118, i64 0, i32 5, i32 4, i32 0, i32 1, i32 0, i32 0
  %121 = load %"struct.cc::EffectNode"*, %"struct.cc::EffectNode"** %120, align 8
  %122 = getelementptr inbounds %"struct.cc::EffectNode", %"struct.cc::EffectNode"* %121, i64 %119
  br label %123

123:                                              ; preds = %109, %116
  %124 = phi %"struct.cc::EffectNode"* [ %122, %116 ], [ null, %109 ]
  %125 = getelementptr inbounds %"struct.cc::EffectNode", %"struct.cc::EffectNode"* %124, i64 0, i32 15
  %126 = bitcast %"class.gfx::Size"* %125 to i64*
  %127 = load i64, i64* %126, align 4
  %128 = getelementptr inbounds %"class.viz::CompositorRenderPass", %"class.viz::CompositorRenderPass"* %14, i64 0, i32 3
  %129 = bitcast %"class.gfx::Size"* %128 to i64*
  store i64 %127, i64* %129, align 4
  %130 = bitcast <2 x i64>* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %130) #11
  %131 = bitcast %"class.gfx::Rect"* %22 to <2 x i64>*
  %132 = load <2 x i64>, <2 x i64>* %131, align 4
  %133 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %10, i64 0, i32 1
  store <2 x i64> %132, <2 x i64>* %9, align 16
  %134 = bitcast i64* %133 to %"class.gfx::Size"*
  call void @_ZN3gfx4Size8SetToMinERKS0_(%"class.gfx::Size"* %128, %"class.gfx::Size"* dereferenceable(8) %134) #11
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %130) #11
  %135 = load i32, i32* %40, align 8
  %136 = icmp sgt i32 %135, -1
  br i1 %136, label %137, label %144

137:                                              ; preds = %123
  %138 = getelementptr inbounds %"class.cc::RenderSurfaceImpl", %"class.cc::RenderSurfaceImpl"* %0, i64 0, i32 1
  %139 = load %"class.cc::LayerTreeImpl"*, %"class.cc::LayerTreeImpl"** %138, align 8
  %140 = sext i32 %135 to i64
  %141 = getelementptr inbounds %"class.cc::LayerTreeImpl", %"class.cc::LayerTreeImpl"* %139, i64 0, i32 5, i32 4, i32 0, i32 1, i32 0, i32 0
  %142 = load %"struct.cc::EffectNode"*, %"struct.cc::EffectNode"** %141, align 8
  %143 = getelementptr inbounds %"struct.cc::EffectNode", %"struct.cc::EffectNode"* %142, i64 %140
  br label %144

144:                                              ; preds = %123, %137
  %145 = phi %"struct.cc::EffectNode"* [ %143, %137 ], [ null, %123 ]
  %146 = getelementptr inbounds %"struct.cc::EffectNode", %"struct.cc::EffectNode"* %145, i64 0, i32 16
  %147 = bitcast [3 x i8]* %146 to i24*
  %148 = load i24, i24* %147, align 4
  %149 = getelementptr inbounds %"class.viz::CompositorRenderPass", %"class.viz::CompositorRenderPass"* %14, i64 0, i32 0, i32 7
  %150 = trunc i24 %148 to i8
  %151 = and i8 %150, 1
  store i8 %151, i8* %149, align 1
  %152 = load %"class.cc::DamageTracker"*, %"class.cc::DamageTracker"** %18, align 8
  %153 = getelementptr inbounds %"class.cc::DamageTracker", %"class.cc::DamageTracker"* %152, i64 0, i32 4
  %154 = load i8, i8* %153, align 8, !range !8
  %155 = getelementptr inbounds %"class.viz::CompositorRenderPass", %"class.viz::CompositorRenderPass"* %14, i64 0, i32 0, i32 8
  store i8 %154, i8* %155, align 2
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %15) #11
  ret %"class.viz::CompositorRenderPass"* %14
}

declare %"class.viz::CompositorRenderPass"* @_ZN3viz20CompositorRenderPass6CreateEm(i64) local_unnamed_addr #1

declare void @_ZN3viz20CompositorRenderPass6SetNewEN4util6IdTypeIS0_mLm0ELm1EEERKN3gfx4RectES7_RKNS4_9TransformE(%"class.viz::CompositorRenderPass"*, i64, %"class.gfx::Rect"* dereferenceable(16), %"class.gfx::Rect"* dereferenceable(16), %"class.gfx::Transform"* dereferenceable(68)) local_unnamed_addr #1

declare dereferenceable(24) %"class.cc::FilterOperations"* @_ZN2cc16FilterOperationsaSERKS0_(%"class.cc::FilterOperations"*, %"class.cc::FilterOperations"* dereferenceable(24)) local_unnamed_addr #1

declare void @_ZN3gfx4Size8SetToMinERKS0_(%"class.gfx::Size"*, %"class.gfx::Size"* dereferenceable(8)) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2cc17RenderSurfaceImpl11AppendQuadsENS_8DrawModeEPN3viz20CompositorRenderPassEPNS_15AppendQuadsDataE(%"class.cc::RenderSurfaceImpl"*, i32, %"class.viz::CompositorRenderPass"*, %"class.cc::AppendQuadsData"* nocapture readnone) local_unnamed_addr #8 align 2 {
  %5 = alloca { i64, i64 }, align 8
  %6 = bitcast { i64, i64 }* %5 to %"class.gfx::Rect"*
  %7 = alloca <2 x i64>, align 16
  %8 = bitcast <2 x i64>* %7 to %"class.gfx::Rect"*
  %9 = alloca %"class.absl::optional.1332", align 4
  %10 = alloca { i64, i64 }, align 8
  %11 = bitcast { i64, i64 }* %10 to %"class.gfx::Rect"*
  %12 = alloca { i64, i64 }, align 8
  %13 = bitcast { i64, i64 }* %12 to %"class.gfx::Rect"*
  %14 = alloca <2 x i64>, align 16
  %15 = bitcast <2 x i64>* %14 to %"class.gfx::Rect"*
  %16 = alloca %"class.util::IdType.1337", align 4
  %17 = alloca %"class.gfx::Size", align 4
  %18 = alloca %"class.gfx::RectF", align 8
  %19 = alloca i64, align 8
  %20 = bitcast i64* %19 to %"class.gfx::Vector2dF"*
  %21 = alloca i64, align 8
  %22 = alloca %"class.gfx::SizeF", align 4
  %23 = alloca %"class.gfx::SizeF", align 4
  %24 = alloca <2 x float>, align 8
  %25 = bitcast <2 x float>* %24 to %"class.gfx::Vector2dF"*
  %26 = alloca %"class.gfx::RectF", align 4
  %27 = alloca <2 x i64>, align 16
  %28 = bitcast <2 x i64>* %27 to %"class.gfx::Rect"*
  %29 = alloca %"class.gfx::PointF", align 4
  %30 = bitcast { i64, i64 }* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %30) #11
  %31 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %5, i64 0, i32 1
  %32 = getelementptr inbounds %"class.cc::RenderSurfaceImpl", %"class.cc::RenderSurfaceImpl"* %0, i64 0, i32 8
  %33 = bitcast <2 x i64>* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %33) #11
  %34 = getelementptr inbounds %"class.cc::RenderSurfaceImpl", %"class.cc::RenderSurfaceImpl"* %0, i64 0, i32 4, i32 3
  %35 = bitcast %"class.gfx::Rect"* %34 to i64*
  %36 = getelementptr inbounds %"class.cc::RenderSurfaceImpl", %"class.cc::RenderSurfaceImpl"* %0, i64 0, i32 4, i32 3, i32 1
  %37 = bitcast %"class.gfx::Size"* %36 to i64*
  %38 = bitcast %"class.gfx::Rect"* %34 to <2 x i64>*
  %39 = load <2 x i64>, <2 x i64>* %38, align 4
  store <2 x i64> %39, <2 x i64>* %7, align 16
  %40 = call { i64, i64 } @_ZNK2cc9Occlusion24GetUnoccludedContentRectERKN3gfx4RectE(%"class.cc::Occlusion"* %32, %"class.gfx::Rect"* nonnull dereferenceable(16) %8) #11
  %41 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %5, i64 0, i32 0
  %42 = extractvalue { i64, i64 } %40, 0
  store i64 %42, i64* %41, align 8
  %43 = extractvalue { i64, i64 } %40, 1
  store i64 %43, i64* %31, align 8
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %33) #11
  %44 = trunc i64 %43 to i32
  %45 = icmp eq i32 %44, 0
  %46 = icmp ult i64 %43, 4294967296
  %47 = or i1 %45, %46
  br i1 %47, label %334, label %48

48:                                               ; preds = %4
  %49 = getelementptr inbounds %"class.cc::RenderSurfaceImpl", %"class.cc::RenderSurfaceImpl"* %0, i64 0, i32 1
  %50 = load %"class.cc::LayerTreeImpl"*, %"class.cc::LayerTreeImpl"** %49, align 8
  %51 = getelementptr inbounds %"class.cc::RenderSurfaceImpl", %"class.cc::RenderSurfaceImpl"* %0, i64 0, i32 3
  %52 = load i32, i32* %51, align 8
  %53 = icmp sgt i32 %52, -1
  br i1 %53, label %54, label %59

54:                                               ; preds = %48
  %55 = sext i32 %52 to i64
  %56 = getelementptr inbounds %"class.cc::LayerTreeImpl", %"class.cc::LayerTreeImpl"* %50, i64 0, i32 5, i32 4, i32 0, i32 1, i32 0, i32 0
  %57 = load %"struct.cc::EffectNode"*, %"struct.cc::EffectNode"** %56, align 8
  %58 = getelementptr inbounds %"struct.cc::EffectNode", %"struct.cc::EffectNode"* %57, i64 %55
  br label %59

59:                                               ; preds = %48, %54
  %60 = phi %"struct.cc::EffectNode"* [ %58, %54 ], [ null, %48 ]
  %61 = getelementptr inbounds %"struct.cc::EffectNode", %"struct.cc::EffectNode"* %60, i64 0, i32 18
  %62 = load i32, i32* %61, align 8
  %63 = icmp sgt i32 %62, -1
  br i1 %63, label %64, label %69

64:                                               ; preds = %59
  %65 = sext i32 %62 to i64
  %66 = getelementptr inbounds %"class.cc::LayerTreeImpl", %"class.cc::LayerTreeImpl"* %50, i64 0, i32 5, i32 3, i32 0, i32 1, i32 0, i32 0
  %67 = load %"struct.cc::TransformNode"*, %"struct.cc::TransformNode"** %66, align 8
  %68 = getelementptr inbounds %"struct.cc::TransformNode", %"struct.cc::TransformNode"* %67, i64 %65
  br label %69

69:                                               ; preds = %59, %64
  %70 = phi %"struct.cc::TransformNode"* [ %68, %64 ], [ null, %59 ]
  %71 = getelementptr inbounds %"struct.cc::TransformNode", %"struct.cc::TransformNode"* %70, i64 0, i32 9
  %72 = load i32, i32* %71, align 8
  %73 = getelementptr inbounds %"class.viz::CompositorRenderPass", %"class.viz::CompositorRenderPass"* %2, i64 0, i32 0
  %74 = call %"class.viz::SharedQuadState"* @_ZN3viz18RenderPassInternal30CreateAndAppendSharedQuadStateEv(%"class.viz::RenderPassInternal"* %73) #11
  %75 = getelementptr inbounds %"class.absl::optional.1332", %"class.absl::optional.1332"* %9, i64 0, i32 0, i32 0, i32 0, i32 0
  call void @llvm.lifetime.start.p0i8(i64 20, i8* nonnull %75) #11
  call void @llvm.memset.p0i8.i64(i8* nonnull align 4 %75, i8 -86, i64 20, i1 false)
  store i8 0, i8* %75, align 4
  %76 = getelementptr inbounds %"class.cc::RenderSurfaceImpl", %"class.cc::RenderSurfaceImpl"* %0, i64 0, i32 4, i32 5
  %77 = load i8, i8* %76, align 4
  %78 = and i8 %77, 1
  %79 = icmp eq i8 %78, 0
  br i1 %79, label %85, label %80

80:                                               ; preds = %69
  %81 = getelementptr inbounds %"class.cc::RenderSurfaceImpl", %"class.cc::RenderSurfaceImpl"* %0, i64 0, i32 4, i32 4
  %82 = getelementptr inbounds %"class.absl::optional.1332", %"class.absl::optional.1332"* %9, i64 0, i32 0, i32 0, i32 0, i32 1
  %83 = bitcast %union.anon.1336* %82 to i8*
  %84 = bitcast %"class.gfx::Rect"* %81 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %83, i8* align 4 %84, i64 16, i1 false) #11
  store i8 1, i8* %75, align 4
  br label %85

85:                                               ; preds = %69, %80
  %86 = getelementptr inbounds %"class.cc::RenderSurfaceImpl", %"class.cc::RenderSurfaceImpl"* %0, i64 0, i32 4, i32 1
  %87 = bitcast { i64, i64 }* %10 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %87) #11
  %88 = load i64, i64* %35, align 4
  %89 = load i64, i64* %37, align 4
  %90 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %10, i64 0, i32 0
  store i64 %88, i64* %90, align 8
  %91 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %10, i64 0, i32 1
  store i64 %89, i64* %91, align 8
  %92 = bitcast { i64, i64 }* %12 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %92) #11
  %93 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %12, i64 0, i32 0
  store i64 %88, i64* %93, align 8
  %94 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %12, i64 0, i32 1
  store i64 %89, i64* %94, align 8
  %95 = getelementptr inbounds %"class.cc::RenderSurfaceImpl", %"class.cc::RenderSurfaceImpl"* %0, i64 0, i32 4, i32 6
  %96 = getelementptr inbounds %"class.cc::RenderSurfaceImpl", %"class.cc::RenderSurfaceImpl"* %0, i64 0, i32 4, i32 0
  %97 = load float, float* %96, align 4
  %98 = load i32, i32* %51, align 8
  %99 = icmp sgt i32 %98, -1
  br i1 %99, label %100, label %106

100:                                              ; preds = %85
  %101 = load %"class.cc::LayerTreeImpl"*, %"class.cc::LayerTreeImpl"** %49, align 8
  %102 = sext i32 %98 to i64
  %103 = getelementptr inbounds %"class.cc::LayerTreeImpl", %"class.cc::LayerTreeImpl"* %101, i64 0, i32 5, i32 4, i32 0, i32 1, i32 0, i32 0
  %104 = load %"struct.cc::EffectNode"*, %"struct.cc::EffectNode"** %103, align 8
  %105 = getelementptr inbounds %"struct.cc::EffectNode", %"struct.cc::EffectNode"* %104, i64 %102
  br label %106

106:                                              ; preds = %85, %100
  %107 = phi %"struct.cc::EffectNode"* [ %105, %100 ], [ null, %85 ]
  %108 = getelementptr inbounds %"struct.cc::EffectNode", %"struct.cc::EffectNode"* %107, i64 0, i32 12
  %109 = load i32, i32* %108, align 4
  call void @_ZN3viz15SharedQuadState6SetAllERKN3gfx9TransformERKNS1_4RectES7_RKNS1_14MaskFilterInfoERKN4absl8optionalIS5_EEbf11SkBlendModei(%"class.viz::SharedQuadState"* %74, %"class.gfx::Transform"* dereferenceable(68) %86, %"class.gfx::Rect"* nonnull dereferenceable(16) %11, %"class.gfx::Rect"* nonnull dereferenceable(16) %13, %"class.gfx::MaskFilterInfo"* dereferenceable(52) %95, %"class.absl::optional.1332"* nonnull dereferenceable(20) %9, i1 zeroext false, float %97, i32 %109, i32 %72) #11
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %92) #11
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %87) #11
  %110 = load %"class.cc::LayerTreeImpl"*, %"class.cc::LayerTreeImpl"** %49, align 8
  %111 = call dereferenceable(40) %"class.cc::LayerTreeDebugState"* @_ZNK2cc13LayerTreeImpl11debug_stateEv(%"class.cc::LayerTreeImpl"* %110) #11
  %112 = getelementptr inbounds %"class.cc::LayerTreeDebugState", %"class.cc::LayerTreeDebugState"* %111, i64 0, i32 2, i32 0, i32 0
  %113 = load i64, i64* %112, align 8
  %114 = and i64 %113, 1
  %115 = icmp eq i64 %114, 0
  br i1 %115, label %134, label %116

116:                                              ; preds = %106
  %117 = getelementptr inbounds %"class.viz::CompositorRenderPass", %"class.viz::CompositorRenderPass"* %2, i64 0, i32 0, i32 11, i32 0, i32 0
  %118 = call i8* @_ZN2cc19ListContainerHelper8AllocateEmm(%"class.cc::ListContainerHelper"* %117, i64 8, i64 88) #11
  %119 = bitcast i8* %118 to %"class.viz::DebugBorderDrawQuad"*
  call void @_ZN3viz19DebugBorderDrawQuadC1Ev(%"class.viz::DebugBorderDrawQuad"* %119) #11
  %120 = bitcast <2 x i64>* %14 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %120) #11
  %121 = bitcast %"class.gfx::Rect"* %34 to <2 x i64>*
  %122 = load <2 x i64>, <2 x i64>* %121, align 4
  store <2 x i64> %122, <2 x i64>* %14, align 16
  %123 = call i32 @_ZN2cc11DebugColors18SurfaceBorderColorEv() #11
  %124 = load %"class.cc::LayerTreeImpl"*, %"class.cc::LayerTreeImpl"** %49, align 8
  %125 = icmp eq %"class.cc::LayerTreeImpl"* %124, null
  br i1 %125, label %129, label %126

126:                                              ; preds = %116
  %127 = getelementptr inbounds %"class.cc::LayerTreeImpl", %"class.cc::LayerTreeImpl"* %124, i64 0, i32 14
  %128 = load float, float* %127, align 4
  br label %129

129:                                              ; preds = %116, %126
  %130 = phi float [ %128, %126 ], [ 1.000000e+00, %116 ]
  %131 = call i32 @_ZN2cc11DebugColors18SurfaceBorderWidthEf(float %130) #11
  %132 = sitofp i32 %131 to float
  %133 = fptosi float %132 to i32
  call void @_ZN3viz19DebugBorderDrawQuad6SetNewEPKNS_15SharedQuadStateERKN3gfx4RectES7_ji(%"class.viz::DebugBorderDrawQuad"* %119, %"class.viz::SharedQuadState"* %74, %"class.gfx::Rect"* nonnull dereferenceable(16) %15, %"class.gfx::Rect"* nonnull dereferenceable(16) %6, i32 %123, i32 %133) #11
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %120) #11
  br label %134

134:                                              ; preds = %106, %129
  %135 = load i32, i32* %51, align 8
  %136 = icmp sgt i32 %135, -1
  br i1 %136, label %137, label %143

137:                                              ; preds = %134
  %138 = load %"class.cc::LayerTreeImpl"*, %"class.cc::LayerTreeImpl"** %49, align 8
  %139 = sext i32 %135 to i64
  %140 = getelementptr inbounds %"class.cc::LayerTreeImpl", %"class.cc::LayerTreeImpl"* %138, i64 0, i32 5, i32 4, i32 0, i32 1, i32 0, i32 0
  %141 = load %"struct.cc::EffectNode"*, %"struct.cc::EffectNode"** %140, align 8
  %142 = getelementptr inbounds %"struct.cc::EffectNode", %"struct.cc::EffectNode"* %141, i64 %139
  br label %143

143:                                              ; preds = %137, %134
  %144 = phi %"struct.cc::EffectNode"* [ %142, %137 ], [ null, %134 ]
  %145 = getelementptr inbounds %"struct.cc::EffectNode", %"struct.cc::EffectNode"* %144, i64 0, i32 10, i32 0
  %146 = load i64, i64* %145, align 8
  %147 = icmp eq i64 %146, 0
  br i1 %147, label %152, label %148

148:                                              ; preds = %143
  %149 = load %"class.cc::LayerTreeImpl"*, %"class.cc::LayerTreeImpl"** %49, align 8
  %150 = call %"class.cc::LayerImpl"* @_ZNK2cc13LayerTreeImpl16LayerByElementIdENS_9ElementIdE(%"class.cc::LayerTreeImpl"* %149, i64 %146) #11
  %151 = load i32, i32* %51, align 8
  br label %152

152:                                              ; preds = %143, %148
  %153 = phi i32 [ %151, %148 ], [ %135, %143 ]
  %154 = phi %"class.cc::LayerImpl"* [ %150, %148 ], [ null, %143 ]
  %155 = bitcast %"class.util::IdType.1337"* %16 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %155) #11
  %156 = getelementptr inbounds %"class.util::IdType.1337", %"class.util::IdType.1337"* %16, i64 0, i32 0, i32 0
  store i32 0, i32* %156, align 4
  %157 = bitcast %"class.gfx::Size"* %17 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %157) #11
  %158 = getelementptr inbounds %"class.gfx::Size", %"class.gfx::Size"* %17, i64 0, i32 0
  %159 = getelementptr inbounds %"class.gfx::Size", %"class.gfx::Size"* %17, i64 0, i32 1
  store i32 0, i32* %158, align 4
  store i32 0, i32* %159, align 4
  %160 = bitcast %"class.gfx::RectF"* %18 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %160) #11
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %160, i8 0, i64 16, i1 false) #11
  %161 = bitcast i64* %19 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %161) #11
  %162 = bitcast i64* %19 to float*
  store float 0xFFFFFFFFE0000000, float* %162, align 8
  %163 = getelementptr inbounds %"class.gfx::Vector2dF", %"class.gfx::Vector2dF"* %20, i64 0, i32 1
  store float 0xFFFFFFFFE0000000, float* %163, align 4
  %164 = icmp sgt i32 %153, -1
  br i1 %164, label %165, label %171

165:                                              ; preds = %152
  %166 = load %"class.cc::LayerTreeImpl"*, %"class.cc::LayerTreeImpl"** %49, align 8
  %167 = sext i32 %153 to i64
  %168 = getelementptr inbounds %"class.cc::LayerTreeImpl", %"class.cc::LayerTreeImpl"* %166, i64 0, i32 5, i32 4, i32 0, i32 1, i32 0, i32 0
  %169 = load %"struct.cc::EffectNode"*, %"struct.cc::EffectNode"** %168, align 8
  %170 = getelementptr inbounds %"struct.cc::EffectNode", %"struct.cc::EffectNode"* %169, i64 %167
  br label %171

171:                                              ; preds = %152, %165
  %172 = phi %"struct.cc::EffectNode"* [ %170, %165 ], [ null, %152 ]
  %173 = getelementptr inbounds %"struct.cc::EffectNode", %"struct.cc::EffectNode"* %172, i64 0, i32 13
  %174 = bitcast %"class.gfx::Vector2dF"* %173 to i64*
  %175 = load i64, i64* %174, align 8
  store i64 %175, i64* %19, align 8
  %176 = icmp ne i32 %1, 3
  %177 = icmp ne %"class.cc::LayerImpl"* %154, null
  %178 = and i1 %176, %177
  br i1 %178, label %179, label %285

179:                                              ; preds = %171
  %180 = getelementptr inbounds %"class.cc::LayerImpl", %"class.cc::LayerImpl"* %154, i64 0, i32 10
  %181 = load i16, i16* %180, align 4
  %182 = trunc i16 %181 to i8
  %183 = icmp slt i8 %182, 0
  br i1 %183, label %184, label %285

184:                                              ; preds = %179
  %185 = call i64 @_ZNK2cc9LayerImpl6boundsEv(%"class.cc::LayerImpl"* nonnull %154) #11
  %186 = trunc i64 %185 to i32
  %187 = icmp eq i32 %186, 0
  %188 = icmp ult i64 %185, 4294967296
  %189 = or i1 %188, %187
  br i1 %189, label %285, label %190

190:                                              ; preds = %184
  %191 = load i8, i8* getelementptr inbounds ([300 x %"struct.base::trace_event::TraceCategory"], [300 x %"struct.base::trace_event::TraceCategory"]* @_ZN4base11trace_event16CategoryRegistry11categories_E, i64 0, i64 32, i32 0), align 16
  %192 = and i8 %191, 25
  %193 = icmp eq i8 %192, 0
  br i1 %193, label %202, label %194, !prof !12

194:                                              ; preds = %190
  %195 = bitcast i64* %21 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %195) #11
  %196 = bitcast %"class.cc::LayerImpl"* %154 to i64 (%"class.cc::LayerImpl"*)***
  %197 = load i64 (%"class.cc::LayerImpl"*)**, i64 (%"class.cc::LayerImpl"*)*** %196, align 8
  %198 = getelementptr inbounds i64 (%"class.cc::LayerImpl"*)*, i64 (%"class.cc::LayerImpl"*)** %197, i64 22
  %199 = load i64 (%"class.cc::LayerImpl"*)*, i64 (%"class.cc::LayerImpl"*)** %198, align 8
  %200 = call i64 %199(%"class.cc::LayerImpl"* nonnull %154) #11
  store i64 %200, i64* %21, align 8
  %201 = call i64 @_ZN20trace_event_internal13AddTraceEventImEEN4base11trace_event16TraceEventHandleEcPKhPKcS7_yjyS7_OT_(i8 signext 88, i8* getelementptr inbounds ([300 x %"struct.base::trace_event::TraceCategory"], [300 x %"struct.base::trace_event::TraceCategory"]* @_ZN4base11trace_event16CategoryRegistry11categories_E, i64 0, i64 32, i32 0), i8* getelementptr inbounds ([31 x i8], [31 x i8]* @.str, i64 0, i64 0), i8* null, i64 0, i32 0, i64 0, i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.1, i64 0, i64 0), i64* nonnull dereferenceable(8) %21)
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %195) #11
  br label %202

202:                                              ; preds = %190, %194
  %203 = phi i8* [ null, %190 ], [ getelementptr inbounds ([300 x %"struct.base::trace_event::TraceCategory"], [300 x %"struct.base::trace_event::TraceCategory"]* @_ZN4base11trace_event16CategoryRegistry11categories_E, i64 0, i64 32, i32 0), %194 ]
  %204 = phi i8* [ inttoptr (i64 -6148914691236517206 to i8*), %190 ], [ getelementptr inbounds ([31 x i8], [31 x i8]* @.str, i64 0, i64 0), %194 ]
  %205 = phi i64 [ -6148914691236517206, %190 ], [ %201, %194 ]
  %206 = bitcast %"class.gfx::SizeF"* %22 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %206) #11
  %207 = getelementptr inbounds %"class.gfx::SizeF", %"class.gfx::SizeF"* %22, i64 0, i32 0
  %208 = getelementptr inbounds %"class.gfx::SizeF", %"class.gfx::SizeF"* %22, i64 0, i32 1
  store float 0.000000e+00, float* %207, align 4
  store float 0.000000e+00, float* %208, align 4
  %209 = bitcast %"class.cc::LayerImpl"* %154 to void (%"class.cc::LayerImpl"*, %"class.util::IdType.1337"*, %"class.gfx::Size"*, %"class.gfx::SizeF"*)***
  %210 = load void (%"class.cc::LayerImpl"*, %"class.util::IdType.1337"*, %"class.gfx::Size"*, %"class.gfx::SizeF"*)**, void (%"class.cc::LayerImpl"*, %"class.util::IdType.1337"*, %"class.gfx::Size"*, %"class.gfx::SizeF"*)*** %209, align 8
  %211 = getelementptr inbounds void (%"class.cc::LayerImpl"*, %"class.util::IdType.1337"*, %"class.gfx::Size"*, %"class.gfx::SizeF"*)*, void (%"class.cc::LayerImpl"*, %"class.util::IdType.1337"*, %"class.gfx::Size"*, %"class.gfx::SizeF"*)** %210, i64 5
  %212 = load void (%"class.cc::LayerImpl"*, %"class.util::IdType.1337"*, %"class.gfx::Size"*, %"class.gfx::SizeF"*)*, void (%"class.cc::LayerImpl"*, %"class.util::IdType.1337"*, %"class.gfx::Size"*, %"class.gfx::SizeF"*)** %211, align 8
  call void %212(%"class.cc::LayerImpl"* nonnull %154, %"class.util::IdType.1337"* nonnull %16, %"class.gfx::Size"* nonnull %17, %"class.gfx::SizeF"* nonnull %22) #11
  %213 = bitcast %"class.gfx::SizeF"* %23 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %213) #11
  %214 = call i64 @_ZNK2cc9LayerImpl6boundsEv(%"class.cc::LayerImpl"* nonnull %154) #11
  %215 = trunc i64 %214 to i32
  %216 = lshr i64 %214, 32
  %217 = trunc i64 %216 to i32
  %218 = getelementptr inbounds %"class.gfx::SizeF", %"class.gfx::SizeF"* %23, i64 0, i32 0
  %219 = icmp sgt i32 %215, 0
  %220 = select i1 %219, i32 %215, i32 0
  %221 = sitofp i32 %220 to float
  store float %221, float* %218, align 4
  %222 = getelementptr inbounds %"class.gfx::SizeF", %"class.gfx::SizeF"* %23, i64 0, i32 1
  %223 = icmp sgt i32 %217, 0
  %224 = select i1 %223, i32 %217, i32 0
  %225 = sitofp i32 %224 to float
  store float %225, float* %222, align 4
  %226 = load float, float* %162, align 8
  %227 = load float, float* %163, align 4
  %228 = call <2 x float> @_ZN3gfx9ScaleSizeERKNS_5SizeFEff(%"class.gfx::SizeF"* nonnull dereferenceable(8) %23, float %226, float %227) #11
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %213) #11
  %229 = bitcast <2 x float>* %24 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %229) #11
  %230 = getelementptr inbounds %"class.cc::LayerImpl", %"class.cc::LayerImpl"* %154, i64 0, i32 7
  %231 = bitcast %"class.gfx::Vector2dF"* %230 to i64*
  %232 = load i64, i64* %231, align 4
  %233 = bitcast <2 x float>* %24 to i64*
  store i64 %232, i64* %233, align 8
  %234 = load float, float* %162, align 8
  %235 = load float, float* %163, align 4
  %236 = call <2 x float> @_ZN3gfx13ScaleVector2dERKNS_9Vector2dFEff(%"class.gfx::Vector2dF"* nonnull dereferenceable(8) %25, float %234, float %235) #11
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %229) #11
  %237 = load i64, i64* %35, align 4
  %238 = load i64, i64* %37, align 4
  %239 = trunc i64 %237 to i32
  %240 = lshr i64 %237, 32
  %241 = trunc i64 %240 to i32
  %242 = sitofp i32 %239 to float
  %243 = sitofp i32 %241 to float
  %244 = trunc i64 %238 to i32
  %245 = lshr i64 %238, 32
  %246 = trunc i64 %245 to i32
  %247 = icmp sgt i32 %244, 0
  %248 = select i1 %247, i32 %244, i32 0
  %249 = sitofp i32 %248 to float
  %250 = icmp sgt i32 %246, 0
  %251 = select i1 %250, i32 %246, i32 0
  %252 = sitofp i32 %251 to float
  %253 = extractelement <2 x float> %236, i32 0
  %254 = fsub float %242, %253
  %255 = extractelement <2 x float> %236, i32 1
  %256 = fsub float %243, %255
  %257 = select i1 %247, float %249, float 0.000000e+00
  %258 = select i1 %250, float %252, float 0.000000e+00
  %259 = load float, float* %207, align 4
  %260 = extractelement <2 x float> %228, i32 0
  %261 = fdiv float %259, %260
  %262 = load float, float* %208, align 4
  %263 = extractelement <2 x float> %228, i32 1
  %264 = fdiv float %262, %263
  %265 = fmul float %254, %261
  %266 = fmul float %256, %264
  %267 = fmul float %261, %257
  %268 = fmul float %264, %258
  %269 = insertelement <2 x float> undef, float %265, i32 0
  %270 = insertelement <2 x float> %269, float %266, i32 1
  %271 = fcmp ogt float %267, 0x3EB0000000000000
  %272 = select i1 %271, float %267, float 0.000000e+00
  %273 = insertelement <2 x float> undef, float %272, i32 0
  %274 = fcmp ogt float %268, 0x3EB0000000000000
  %275 = select i1 %274, float %268, float 0.000000e+00
  %276 = insertelement <2 x float> %273, float %275, i32 1
  %277 = bitcast %"class.gfx::RectF"* %18 to <2 x float>*
  store <2 x float> %270, <2 x float>* %277, align 8
  %278 = getelementptr inbounds %"class.gfx::RectF", %"class.gfx::RectF"* %18, i64 0, i32 1
  %279 = bitcast %"class.gfx::SizeF"* %278 to <2 x float>*
  store <2 x float> %276, <2 x float>* %279, align 8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %206) #11
  %280 = icmp eq i8* %203, null
  br i1 %280, label %285, label %281

281:                                              ; preds = %202
  %282 = load i8, i8* %203, align 1
  %283 = icmp eq i8 %282, 0
  br i1 %283, label %285, label %284

284:                                              ; preds = %281
  call void @_ZN20trace_event_internal24UpdateTraceEventDurationEPKhPKcN4base11trace_event16TraceEventHandleE(i8* nonnull %203, i8* %204, i64 %205) #11
  br label %285

285:                                              ; preds = %184, %171, %179, %284, %281, %202
  %286 = bitcast %"class.gfx::RectF"* %26 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %286) #11
  %287 = getelementptr inbounds %"class.gfx::RectF", %"class.gfx::RectF"* %26, i64 0, i32 0, i32 0
  %288 = getelementptr inbounds %"class.gfx::RectF", %"class.gfx::RectF"* %26, i64 0, i32 0, i32 1
  %289 = getelementptr inbounds %"class.gfx::RectF", %"class.gfx::RectF"* %26, i64 0, i32 1, i32 0
  %290 = getelementptr inbounds %"class.gfx::RectF", %"class.gfx::RectF"* %26, i64 0, i32 1, i32 1
  %291 = load i64, i64* %37, align 4
  %292 = trunc i64 %291 to i32
  %293 = lshr i64 %291, 32
  %294 = trunc i64 %293 to i32
  store float 0.000000e+00, float* %287, align 4
  store float 0.000000e+00, float* %288, align 4
  %295 = icmp sgt i32 %292, 0
  %296 = select i1 %295, i32 %292, i32 0
  %297 = sitofp i32 %296 to float
  store float %297, float* %289, align 4
  %298 = icmp sgt i32 %294, 0
  %299 = select i1 %298, i32 %294, i32 0
  %300 = sitofp i32 %299 to float
  store float %300, float* %290, align 4
  %301 = getelementptr inbounds %"class.viz::CompositorRenderPass", %"class.viz::CompositorRenderPass"* %2, i64 0, i32 0, i32 11, i32 0, i32 0
  %302 = call i8* @_ZN2cc19ListContainerHelper8AllocateEmm(%"class.cc::ListContainerHelper"* %301, i64 8, i64 152) #11
  %303 = bitcast i8* %302 to %"class.viz::CompositorRenderPassDrawQuad"*
  call void @_ZN3viz28CompositorRenderPassDrawQuadC1Ev(%"class.viz::CompositorRenderPassDrawQuad"* %303) #11
  %304 = bitcast <2 x i64>* %27 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %304) #11
  %305 = bitcast %"class.gfx::Rect"* %34 to <2 x i64>*
  %306 = load <2 x i64>, <2 x i64>* %305, align 4
  store <2 x i64> %306, <2 x i64>* %27, align 16
  %307 = getelementptr inbounds %"class.cc::RenderSurfaceImpl", %"class.cc::RenderSurfaceImpl"* %0, i64 0, i32 2
  %308 = load i64, i64* %307, align 8
  %309 = load i32, i32* %156, align 4
  %310 = bitcast %"class.gfx::PointF"* %29 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %310) #11
  %311 = getelementptr inbounds %"class.gfx::PointF", %"class.gfx::PointF"* %29, i64 0, i32 0
  store float 0.000000e+00, float* %311, align 4
  %312 = getelementptr inbounds %"class.gfx::PointF", %"class.gfx::PointF"* %29, i64 0, i32 1
  store float 0.000000e+00, float* %312, align 4
  %313 = load %"class.cc::LayerTreeImpl"*, %"class.cc::LayerTreeImpl"** %49, align 8
  %314 = call dereferenceable(296) %"class.cc::LayerTreeSettings"* @_ZNK2cc13LayerTreeImpl8settingsEv(%"class.cc::LayerTreeImpl"* %313) #11
  %315 = getelementptr inbounds %"class.cc::LayerTreeSettings", %"class.cc::LayerTreeSettings"* %314, i64 0, i32 69
  %316 = load i8, i8* %315, align 1, !range !8
  %317 = icmp eq i8 %316, 0
  %318 = load i32, i32* %51, align 8
  %319 = icmp sgt i32 %318, -1
  br i1 %319, label %320, label %326

320:                                              ; preds = %285
  %321 = load %"class.cc::LayerTreeImpl"*, %"class.cc::LayerTreeImpl"** %49, align 8
  %322 = sext i32 %318 to i64
  %323 = getelementptr inbounds %"class.cc::LayerTreeImpl", %"class.cc::LayerTreeImpl"* %321, i64 0, i32 5, i32 4, i32 0, i32 1, i32 0, i32 0
  %324 = load %"struct.cc::EffectNode"*, %"struct.cc::EffectNode"** %323, align 8
  %325 = getelementptr inbounds %"struct.cc::EffectNode", %"struct.cc::EffectNode"* %324, i64 %322
  br label %326

326:                                              ; preds = %285, %320
  %327 = phi %"struct.cc::EffectNode"* [ %325, %320 ], [ null, %285 ]
  %328 = getelementptr inbounds %"struct.cc::EffectNode", %"struct.cc::EffectNode"* %327, i64 0, i32 8
  %329 = load float, float* %328, align 8
  %330 = getelementptr inbounds %"class.cc::RenderSurfaceImpl", %"class.cc::RenderSurfaceImpl"* %0, i64 0, i32 7
  %331 = load i8, i8* %330, align 4
  %332 = and i8 %331, 32
  %333 = icmp ne i8 %332, 0
  call void @_ZN3viz28CompositorRenderPassDrawQuad6SetAllEPKNS_15SharedQuadStateERKN3gfx4RectES7_bN4util6IdTypeINS_20CompositorRenderPassEmLm0ELm1EEENS9_INS_20ResourceIdTypeMarkerEjLj0ELj1EEERKNS4_5RectFERKNS4_4SizeERKNS4_9Vector2dFERKNS4_6PointFESG_bfb(%"class.viz::CompositorRenderPassDrawQuad"* %303, %"class.viz::SharedQuadState"* %74, %"class.gfx::Rect"* nonnull dereferenceable(16) %28, %"class.gfx::Rect"* nonnull dereferenceable(16) %6, i1 zeroext true, i64 %308, i32 %309, %"class.gfx::RectF"* nonnull dereferenceable(16) %18, %"class.gfx::Size"* nonnull dereferenceable(8) %17, %"class.gfx::Vector2dF"* nonnull dereferenceable(8) %20, %"class.gfx::PointF"* nonnull dereferenceable(8) %29, %"class.gfx::RectF"* nonnull dereferenceable(16) %26, i1 zeroext %317, float %329, i1 zeroext %333) #11
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %310) #11
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %304) #11
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %286) #11
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %161) #11
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %160) #11
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %157) #11
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %155) #11
  call void @llvm.lifetime.end.p0i8(i64 20, i8* nonnull %75) #11
  br label %334

334:                                              ; preds = %4, %326
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %30) #11
  ret void
}

declare { i64, i64 } @_ZNK2cc9Occlusion24GetUnoccludedContentRectERKN3gfx4RectE(%"class.cc::Occlusion"*, %"class.gfx::Rect"* dereferenceable(16)) local_unnamed_addr #1

declare %"class.viz::SharedQuadState"* @_ZN3viz18RenderPassInternal30CreateAndAppendSharedQuadStateEv(%"class.viz::RenderPassInternal"*) local_unnamed_addr #1

declare void @_ZN3viz15SharedQuadState6SetAllERKN3gfx9TransformERKNS1_4RectES7_RKNS1_14MaskFilterInfoERKN4absl8optionalIS5_EEbf11SkBlendModei(%"class.viz::SharedQuadState"*, %"class.gfx::Transform"* dereferenceable(68), %"class.gfx::Rect"* dereferenceable(16), %"class.gfx::Rect"* dereferenceable(16), %"class.gfx::MaskFilterInfo"* dereferenceable(52), %"class.absl::optional.1332"* dereferenceable(20), i1 zeroext, float, i32, i32) local_unnamed_addr #1

declare dereferenceable(40) %"class.cc::LayerTreeDebugState"* @_ZNK2cc13LayerTreeImpl11debug_stateEv(%"class.cc::LayerTreeImpl"*) local_unnamed_addr #1

declare void @_ZN3viz19DebugBorderDrawQuad6SetNewEPKNS_15SharedQuadStateERKN3gfx4RectES7_ji(%"class.viz::DebugBorderDrawQuad"*, %"class.viz::SharedQuadState"*, %"class.gfx::Rect"* dereferenceable(16), %"class.gfx::Rect"* dereferenceable(16), i32, i32) local_unnamed_addr #1

declare i64 @_ZNK2cc9LayerImpl6boundsEv(%"class.cc::LayerImpl"*) local_unnamed_addr #1

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden i64 @_ZN20trace_event_internal13AddTraceEventImEEN4base11trace_event16TraceEventHandleEcPKhPKcS7_yjyS7_OT_(i8 signext, i8*, i8*, i8*, i64, i32, i64, i8*, i64* dereferenceable(8)) local_unnamed_addr #9 comdat {
  %10 = alloca %"class.base::trace_event::TraceArguments", align 8
  %11 = alloca %"class.base::TimeTicks", align 8
  %12 = tail call i32 @_ZN4base14PlatformThread9CurrentIdEv() #11
  %13 = bitcast %"class.base::TimeTicks"* %11 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %13) #11
  %14 = getelementptr inbounds %"class.base::TimeTicks", %"class.base::TimeTicks"* %11, i64 0, i32 0, i32 0
  %15 = tail call i64 @_ZN4base6subtle28TimeTicksNowIgnoringOverrideEv() #11
  store i64 %15, i64* %14, align 8
  %16 = getelementptr inbounds %"class.base::trace_event::TraceArguments", %"class.base::trace_event::TraceArguments"* %10, i64 0, i32 0
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %16) #11
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %16, i8 -86, i64 40, i1 false) #11
  store i8 1, i8* %16, align 8
  %17 = getelementptr inbounds %"class.base::trace_event::TraceArguments", %"class.base::trace_event::TraceArguments"* %10, i64 0, i32 1, i64 0
  store i8 2, i8* %17, align 1
  %18 = getelementptr inbounds %"class.base::trace_event::TraceArguments", %"class.base::trace_event::TraceArguments"* %10, i64 0, i32 2, i64 0
  store i8* %7, i8** %18, align 8
  %19 = load i64, i64* %8, align 8
  %20 = getelementptr inbounds %"class.base::trace_event::TraceArguments", %"class.base::trace_event::TraceArguments"* %10, i64 0, i32 3, i64 0, i32 0
  store i64 %19, i64* %20, align 8
  %21 = call i64 @_ZN20trace_event_internal37AddTraceEventWithThreadIdAndTimestampEcPKhPKcS3_yyiRKN4base9TimeTicksEPNS4_11trace_event14TraceArgumentsEj(i8 signext %0, i8* %1, i8* %2, i8* %3, i64 %4, i64 %6, i32 %12, %"class.base::TimeTicks"* nonnull dereferenceable(8) %11, %"class.base::trace_event::TraceArguments"* nonnull %10, i32 %5) #11
  %22 = load i8, i8* %16, align 8
  %23 = icmp eq i8 %22, 0
  br i1 %23, label %58, label %24

24:                                               ; preds = %9, %53
  %25 = phi i64 [ %54, %53 ], [ 0, %9 ]
  %26 = getelementptr inbounds %"class.base::trace_event::TraceArguments", %"class.base::trace_event::TraceArguments"* %10, i64 0, i32 1, i64 %25
  %27 = load i8, i8* %26, align 1
  %28 = icmp eq i8 %27, 8
  br i1 %28, label %29, label %40

29:                                               ; preds = %24
  %30 = getelementptr inbounds %"class.base::trace_event::TraceArguments", %"class.base::trace_event::TraceArguments"* %10, i64 0, i32 3, i64 %25
  %31 = bitcast %"union.base::trace_event::TraceValue"* %30 to %"class.base::trace_event::ConvertableToTraceFormat"**
  %32 = load %"class.base::trace_event::ConvertableToTraceFormat"*, %"class.base::trace_event::ConvertableToTraceFormat"** %31, align 8
  %33 = icmp eq %"class.base::trace_event::ConvertableToTraceFormat"* %32, null
  br i1 %33, label %53, label %34

34:                                               ; preds = %29
  %35 = bitcast %"class.base::trace_event::ConvertableToTraceFormat"* %32 to void (%"class.base::trace_event::ConvertableToTraceFormat"*)***
  %36 = load void (%"class.base::trace_event::ConvertableToTraceFormat"*)**, void (%"class.base::trace_event::ConvertableToTraceFormat"*)*** %35, align 8
  %37 = getelementptr inbounds void (%"class.base::trace_event::ConvertableToTraceFormat"*)*, void (%"class.base::trace_event::ConvertableToTraceFormat"*)** %36, i64 1
  %38 = load void (%"class.base::trace_event::ConvertableToTraceFormat"*)*, void (%"class.base::trace_event::ConvertableToTraceFormat"*)** %37, align 8
  call void %38(%"class.base::trace_event::ConvertableToTraceFormat"* nonnull %32) #11
  %39 = load i8, i8* %26, align 1
  br label %40

40:                                               ; preds = %34, %24
  %41 = phi i8 [ %27, %24 ], [ %39, %34 ]
  %42 = icmp eq i8 %41, 9
  br i1 %42, label %43, label %53

43:                                               ; preds = %40
  %44 = getelementptr inbounds %"class.base::trace_event::TraceArguments", %"class.base::trace_event::TraceArguments"* %10, i64 0, i32 3, i64 %25
  %45 = bitcast %"union.base::trace_event::TraceValue"* %44 to %"class.protozero::HeapBuffered"**
  %46 = load %"class.protozero::HeapBuffered"*, %"class.protozero::HeapBuffered"** %45, align 8
  %47 = icmp eq %"class.protozero::HeapBuffered"* %46, null
  br i1 %47, label %53, label %48

48:                                               ; preds = %43
  %49 = getelementptr inbounds %"class.protozero::HeapBuffered", %"class.protozero::HeapBuffered"* %46, i64 0, i32 2, i32 1
  call void @_ZN9protozero12MessageArenaD1Ev(%"class.protozero::MessageArena"* %49) #11
  %50 = getelementptr inbounds %"class.protozero::HeapBuffered", %"class.protozero::HeapBuffered"* %46, i64 0, i32 1
  call void @_ZN9protozero21ScatteredStreamWriterD1Ev(%"class.protozero::ScatteredStreamWriter"* %50) #11
  %51 = getelementptr inbounds %"class.protozero::HeapBuffered", %"class.protozero::HeapBuffered"* %46, i64 0, i32 0
  call void @_ZN9protozero19ScatteredHeapBufferD1Ev(%"class.protozero::ScatteredHeapBuffer"* %51) #11
  %52 = bitcast %"class.protozero::HeapBuffered"* %46 to i8*
  call void @_ZdlPv(i8* %52) #12
  br label %53

53:                                               ; preds = %48, %43, %40, %29
  %54 = add nuw nsw i64 %25, 1
  %55 = load i8, i8* %16, align 8
  %56 = zext i8 %55 to i64
  %57 = icmp ult i64 %54, %56
  br i1 %57, label %24, label %58

58:                                               ; preds = %53, %9
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %16) #11
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %13) #11
  ret i64 %21
}

declare <2 x float> @_ZN3gfx9ScaleSizeERKNS_5SizeFEff(%"class.gfx::SizeF"* dereferenceable(8), float, float) local_unnamed_addr #1

declare <2 x float> @_ZN3gfx13ScaleVector2dERKNS_9Vector2dFEff(%"class.gfx::Vector2dF"* dereferenceable(8), float, float) local_unnamed_addr #1

declare void @_ZN3viz28CompositorRenderPassDrawQuad6SetAllEPKNS_15SharedQuadStateERKN3gfx4RectES7_bN4util6IdTypeINS_20CompositorRenderPassEmLm0ELm1EEENS9_INS_20ResourceIdTypeMarkerEjLj0ELj1EEERKNS4_5RectFERKNS4_4SizeERKNS4_9Vector2dFERKNS4_6PointFESG_bfb(%"class.viz::CompositorRenderPassDrawQuad"*, %"class.viz::SharedQuadState"*, %"class.gfx::Rect"* dereferenceable(16), %"class.gfx::Rect"* dereferenceable(16), i1 zeroext, i64, i32, %"class.gfx::RectF"* dereferenceable(16), %"class.gfx::Size"* dereferenceable(8), %"class.gfx::Vector2dF"* dereferenceable(8), %"class.gfx::PointF"* dereferenceable(8), %"class.gfx::RectF"* dereferenceable(16), i1 zeroext, float, i1 zeroext) local_unnamed_addr #1

; Function Attrs: nounwind
declare void @_ZN2cc20SimpleEnclosedRegionD1Ev(%"class.cc::SimpleEnclosedRegion"*) unnamed_addr #10

declare void @_ZN3gfx4Rect5InsetEiiii(%"class.gfx::Rect"*, i32, i32, i32, i32) local_unnamed_addr #1

declare void @_ZN20trace_event_internal24UpdateTraceEventDurationEPKhPKcN4base11trace_event16TraceEventHandleE(i8*, i8*, i64) local_unnamed_addr #1

; Function Attrs: nounwind
declare void @_ZN2cc13DamageTrackerD1Ev(%"class.cc::DamageTracker"*) unnamed_addr #10

declare i8* @_ZN2cc19ListContainerHelper8AllocateEmm(%"class.cc::ListContainerHelper"*, i64, i64) local_unnamed_addr #1

declare void @_ZN3viz19DebugBorderDrawQuadC1Ev(%"class.viz::DebugBorderDrawQuad"*) unnamed_addr #1

declare i32 @_ZN4base14PlatformThread9CurrentIdEv() local_unnamed_addr #1

declare i64 @_ZN4base6subtle28TimeTicksNowIgnoringOverrideEv() local_unnamed_addr #1

declare i64 @_ZN20trace_event_internal37AddTraceEventWithThreadIdAndTimestampEcPKhPKcS3_yyiRKN4base9TimeTicksEPNS4_11trace_event14TraceArgumentsEj(i8 signext, i8*, i8*, i8*, i64, i64, i32, %"class.base::TimeTicks"* dereferenceable(8), %"class.base::trace_event::TraceArguments"*, i32) local_unnamed_addr #1

; Function Attrs: nounwind
declare void @_ZN9protozero21ScatteredStreamWriterD1Ev(%"class.protozero::ScatteredStreamWriter"*) unnamed_addr #10

; Function Attrs: nounwind
declare void @_ZN9protozero19ScatteredHeapBufferD1Ev(%"class.protozero::ScatteredHeapBuffer"*) unnamed_addr #10

; Function Attrs: nounwind
declare void @_ZN9protozero12MessageArenaD1Ev(%"class.protozero::MessageArena"*) unnamed_addr #10

declare void @_ZN3viz28CompositorRenderPassDrawQuadC1Ev(%"class.viz::CompositorRenderPassDrawQuad"*) unnamed_addr #1

; Function Attrs: argmemonly nounwind
declare void @llvm.memmove.p0i8.p0i8.i64(i8* nocapture, i8* nocapture readonly, i64, i1 immarg) #2

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind }
attributes #3 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { norecurse nounwind readonly ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { norecurse nounwind readnone ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nounwind readonly ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { nofree norecurse nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #8 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="64" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #9 = { inlinehint nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #10 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #11 = { nounwind }
attributes #12 = { builtin nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{!3}
!3 = distinct !{!3, !4, !"_ZNK2cc17RenderSurfaceImpl12SurfaceScaleEv: argument 0"}
!4 = distinct !{!4, !"_ZNK2cc17RenderSurfaceImpl12SurfaceScaleEv"}
!5 = !{!6}
!6 = distinct !{!6, !7, !"_ZNK2cc17RenderSurfaceImpl12SurfaceScaleEv: argument 0"}
!7 = distinct !{!7, !"_ZNK2cc17RenderSurfaceImpl12SurfaceScaleEv"}
!8 = !{i8 0, i8 2}
!9 = !{!10}
!10 = distinct !{!10, !11, !"_ZNK2cc17RenderSurfaceImpl20BackdropFilterBoundsEv: argument 0"}
!11 = distinct !{!11, !"_ZNK2cc17RenderSurfaceImpl20BackdropFilterBoundsEv"}
!12 = !{!"branch_weights", i32 2000, i32 1}
