; ModuleID = '../../third_party/ffmpeg/libavformat/id3v1.c'
source_filename = "../../third_party/ffmpeg/libavformat/id3v1.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"
module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"
module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%struct.AVFormatContext = type { %struct.AVClass*, %struct.AVInputFormat*, %struct.AVOutputFormat*, i8*, %struct.AVIOContext*, i32, i32, %struct.AVStream**, [1024 x i8], i8*, i64, i64, i64, i32, i32, i32, i64, i64, i8*, i32, i32, %struct.AVProgram**, i32, i32, i32, i32, i32, i32, %struct.AVChapter**, %struct.AVDictionary*, i64, i32, i32, %struct.AVIOInterruptCB, i32, i64, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i64, i32, i32, i32, i32, i32, i8*, i8*, %struct.AVFormatInternal*, i32, %struct.AVCodec*, %struct.AVCodec*, %struct.AVCodec*, %struct.AVCodec*, i32, i8*, i32 (%struct.AVFormatContext*, i32, i8*, i64)*, i64, i8*, i32, i32 (%struct.AVFormatContext*, %struct.AVIOContext**, i8*, i32, %struct.AVIOInterruptCB*, %struct.AVDictionary**)*, i8*, i32 (%struct.AVFormatContext*, %struct.AVIOContext**, i8*, i32, %struct.AVDictionary**)*, void (%struct.AVFormatContext*, %struct.AVIOContext*)*, i8*, i32, i32, i32 }
%struct.AVClass = type { i8*, i8* (i8*)*, %struct.AVOption*, i32, i32, i32, i8* (i8*, i8*)*, %struct.AVClass* (%struct.AVClass*)*, i32, i32 (i8*)*, i32 (%struct.AVOptionRanges**, i8*, i8*, i32)*, %struct.AVClass* (i8**)* }
%struct.AVOption = type opaque
%struct.AVOptionRanges = type opaque
%struct.AVInputFormat = type { i8*, i8*, i32, i8*, %struct.AVCodecTag**, %struct.AVClass*, i8*, %struct.AVInputFormat*, i32, i32, i32 (%struct.AVProbeData*)*, i32 (%struct.AVFormatContext*)*, i32 (%struct.AVFormatContext*, %struct.AVPacket*)*, i32 (%struct.AVFormatContext*)*, i32 (%struct.AVFormatContext*, i32, i64, i32)*, i64 (%struct.AVFormatContext*, i32, i64*, i64)*, i32 (%struct.AVFormatContext*)*, i32 (%struct.AVFormatContext*)*, i32 (%struct.AVFormatContext*, i32, i64, i64, i64, i32)*, i32 (%struct.AVFormatContext*, %struct.AVDeviceInfoList*)*, i32 (%struct.AVFormatContext*, %struct.AVDeviceCapabilitiesQuery*)*, i32 (%struct.AVFormatContext*, %struct.AVDeviceCapabilitiesQuery*)* }
%struct.AVCodecTag = type opaque
%struct.AVProbeData = type { i8*, i8*, i32, i8* }
%struct.AVPacket = type { %struct.AVBufferRef*, i64, i64, i8*, i32, i32, i32, %struct.AVPacketSideData*, i32, i64, i64, i64 }
%struct.AVBufferRef = type { %struct.AVBuffer*, i8*, i32 }
%struct.AVBuffer = type opaque
%struct.AVPacketSideData = type { i8*, i32, i32 }
%struct.AVDeviceInfoList = type opaque
%struct.AVDeviceCapabilitiesQuery = type opaque
%struct.AVOutputFormat = type { i8*, i8*, i8*, i8*, i32, i32, i32, i32, %struct.AVCodecTag**, %struct.AVClass*, %struct.AVOutputFormat*, i32, i32 (%struct.AVFormatContext*)*, i32 (%struct.AVFormatContext*, %struct.AVPacket*)*, i32 (%struct.AVFormatContext*)*, i32 (%struct.AVFormatContext*, %struct.AVPacket*, %struct.AVPacket*, i32)*, i32 (i32, i32)*, void (%struct.AVFormatContext*, i32, i64*, i64*)*, i32 (%struct.AVFormatContext*, i32, i8*, i64)*, i32 (%struct.AVFormatContext*, i32, %struct.AVFrame**, i32)*, i32 (%struct.AVFormatContext*, %struct.AVDeviceInfoList*)*, i32 (%struct.AVFormatContext*, %struct.AVDeviceCapabilitiesQuery*)*, i32 (%struct.AVFormatContext*, %struct.AVDeviceCapabilitiesQuery*)*, i32, i32 (%struct.AVFormatContext*)*, {}*, i32 (%struct.AVFormatContext*, %struct.AVPacket*)* }
%struct.AVFrame = type { [8 x i8*], [8 x i32], i8**, i32, i32, i32, i32, i32, i32, %struct.AVRational, i64, i64, i64, i32, i32, i32, i8*, [8 x i64], i32, i32, i32, i32, i64, i32, i64, [8 x %struct.AVBufferRef*], %struct.AVBufferRef**, i32, %struct.AVFrameSideData**, i32, i32, i32, i32, i32, i32, i32, i64, i64, i64, %struct.AVDictionary*, i32, i32, i32, i8*, i32, i32, %struct.AVBufferRef*, %struct.AVBufferRef*, %struct.AVBufferRef*, i64, i64, i64, i64, %struct.AVBufferRef* }
%struct.AVRational = type { i32, i32 }
%struct.AVFrameSideData = type { i32, i8*, i32, %struct.AVDictionary*, %struct.AVBufferRef* }
%struct.AVIOContext = type { %struct.AVClass*, i8*, i32, i8*, i8*, i8*, i32 (i8*, i8*, i32)*, i32 (i8*, i8*, i32)*, i64 (i8*, i64, i32)*, i64, i32, i32, i32, i64, i8*, i64 (i64, i8*, i32)*, i32, i32 (i8*, i32)*, i64 (i8*, i32, i64, i32)*, i32, i64, i32, i64, i32, i32, i32, i32, i8*, i8*, i32 (i8*, i8*, i32, i32, i64)*, i32, i32, i64, i32 (i8*)*, i64, i8*, i32 }
%struct.AVStream = type { i32, i32, %struct.AVCodecContext*, i8*, %struct.AVRational, i64, i64, i64, i32, i32, %struct.AVRational, %struct.AVDictionary*, %struct.AVRational, %struct.AVPacket, %struct.AVPacketSideData*, i32, i32, %struct.AVRational, i8*, %struct.AVCodecParameters*, i8*, i32, i64, i64, i64, i32, i32, i32, i32, %struct.AVCodecParserContext*, i8*, %struct.AVProbeData, [17 x i64], i8*, i32, i32, i32, i32, i32, i32, %struct.AVStreamInternal* }
%struct.AVCodecContext = type { %struct.AVClass*, i32, i32, %struct.AVCodec*, i32, i32, i8*, %struct.AVCodecInternal*, i8*, i64, i32, i32, i32, i32, i32, i8*, i32, %struct.AVRational, i32, i32, i32, i32, i32, i32, i32, i32, void (%struct.AVCodecContext*, %struct.AVFrame*, i32*, i32, i32, i32)*, i32 (%struct.AVCodecContext*, i32*)*, i32, float, i32, float, i32, i32, float, float, float, float, float, float, float, i32, i32, i32*, %struct.AVRational, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i16*, i16*, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i64, i64, i32, i32, i32 (%struct.AVCodecContext*, %struct.AVFrame*, i32)*, i32, float, float, i32, i32, i32, i32, i32, %struct.RcOverride*, i64, i64, float, float, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i64, void (%struct.AVCodecContext*, i8*, i32, i32)*, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i8*, i8*, i32, i32, i32, i32, i32, i64, %struct.AVHWAccel*, i8*, [8 x i64], i32, i32, i32, i32, i32, %struct.AVFrame*, i32, i32, i32, i32, i32 (%struct.AVCodecContext*, i32 (%struct.AVCodecContext*, i8*)*, i8*, i32*, i32, i32)*, i32 (%struct.AVCodecContext*, i32 (%struct.AVCodecContext*, i8*, i32, i32)*, i8*, i32*, i32)*, i32, i32, i32, i32, i32, i32, i8*, i32, i64, i32, i32, %struct.AVRational, i32, %struct.AVRational, %struct.AVCodecDescriptor*, i64, i64, i64, i64, i8*, i32, i32, i32, i32, i16*, i8*, i8*, i32, %struct.AVPacketSideData*, i32, %struct.AVBufferRef*, i32, i32, i64, %struct.AVBufferRef*, i32, i32, i32, i32, i64, i32 }
%struct.AVCodecInternal = type opaque
%struct.RcOverride = type { i32, i32, i32, float }
%struct.AVHWAccel = type { i8*, i32, i32, i32, i32, i32 (%struct.AVCodecContext*, %struct.AVFrame*)*, i32 (%struct.AVCodecContext*, i8*, i32)*, i32 (%struct.AVCodecContext*, i32, i8*, i32)*, i32 (%struct.AVCodecContext*, i8*, i32)*, i32 (%struct.AVCodecContext*)*, i32, void (%struct.MpegEncContext*)*, i32 (%struct.AVCodecContext*)*, i32 (%struct.AVCodecContext*)*, i32, i32, i32 (%struct.AVCodecContext*, %struct.AVBufferRef*)* }
%struct.MpegEncContext = type opaque
%struct.AVCodecDescriptor = type { i32, i32, i8*, i8*, i32, i8**, %struct.AVProfile* }
%struct.AVProfile = type { i32, i8* }
%struct.AVCodecParameters = type { i32, i32, i32, i8*, i32, i32, i64, i32, i32, i32, i32, i32, i32, %struct.AVRational, i32, i32, i32, i32, i32, i32, i32, i64, i32, i32, i32, i32, i32, i32, i32 }
%struct.AVCodecParserContext = type { i8*, %struct.AVCodecParser*, i64, i64, i64, i32, i32, i64, i64, i64, i64, i32, i32, [4 x i64], [4 x i64], [4 x i64], i32, i64, [4 x i64], i32, i64, i32, i32, i32, [4 x i64], i64, i64, i32, i32, i32, i32, i32, i32, i32, i32, i32 }
%struct.AVCodecParser = type { [5 x i32], i32, i32 (%struct.AVCodecParserContext*)*, i32 (%struct.AVCodecParserContext*, %struct.AVCodecContext*, i8**, i32*, i8*, i32)*, void (%struct.AVCodecParserContext*)*, i32 (%struct.AVCodecContext*, i8*, i32)*, %struct.AVCodecParser* }
%struct.AVStreamInternal = type opaque
%struct.AVProgram = type { i32, i32, i32, i32*, i32, %struct.AVDictionary*, i32, i32, i32, i32, i64, i64, i64, i32 }
%struct.AVChapter = type { i32, %struct.AVRational, i64, i64, %struct.AVDictionary* }
%struct.AVDictionary = type opaque
%struct.AVIOInterruptCB = type { i32 (i8*)*, i8* }
%struct.AVFormatInternal = type opaque
%struct.AVCodec = type { i8*, i8*, i32, i32, i32, %struct.AVRational*, i32*, i32*, i32*, i64*, i8, %struct.AVClass*, %struct.AVProfile*, i8*, i32, %struct.AVCodec*, i32 (%struct.AVCodecContext*, %struct.AVCodecContext*)*, %struct.AVCodecDefault*, void (%struct.AVCodec*)*, i32 (%struct.AVCodecContext*)*, i32 (%struct.AVCodecContext*, i8*, i32, %struct.AVSubtitle*)*, i32 (%struct.AVCodecContext*, %struct.AVPacket*, %struct.AVFrame*, i32*)*, i32 (%struct.AVCodecContext*, i8*, i32*, %struct.AVPacket*)*, i32 (%struct.AVCodecContext*)*, i32 (%struct.AVCodecContext*, %struct.AVPacket*)*, i32 (%struct.AVCodecContext*, %struct.AVFrame*)*, void (%struct.AVCodecContext*)*, i32, i8*, %struct.AVCodecHWConfigInternal**, i32* }
%struct.AVCodecDefault = type opaque
%struct.AVSubtitle = type { i16, i32, i32, i32, %struct.AVSubtitleRect**, i64 }
%struct.AVSubtitleRect = type { i32, i32, i32, i32, i32, %struct.AVPicture, [4 x i8*], [4 x i32], i32, i8*, i8*, i32 }
%struct.AVPicture = type { [8 x i8*], [8 x i32] }
%struct.AVCodecHWConfigInternal = type opaque

@.str = private unnamed_addr constant [6 x i8] c"Blues\00", align 1
@.str.1 = private unnamed_addr constant [13 x i8] c"Classic Rock\00", align 1
@.str.2 = private unnamed_addr constant [8 x i8] c"Country\00", align 1
@.str.3 = private unnamed_addr constant [6 x i8] c"Dance\00", align 1
@.str.4 = private unnamed_addr constant [6 x i8] c"Disco\00", align 1
@.str.5 = private unnamed_addr constant [5 x i8] c"Funk\00", align 1
@.str.6 = private unnamed_addr constant [7 x i8] c"Grunge\00", align 1
@.str.7 = private unnamed_addr constant [8 x i8] c"Hip-Hop\00", align 1
@.str.8 = private unnamed_addr constant [5 x i8] c"Jazz\00", align 1
@.str.9 = private unnamed_addr constant [6 x i8] c"Metal\00", align 1
@.str.10 = private unnamed_addr constant [8 x i8] c"New Age\00", align 1
@.str.11 = private unnamed_addr constant [7 x i8] c"Oldies\00", align 1
@.str.12 = private unnamed_addr constant [6 x i8] c"Other\00", align 1
@.str.13 = private unnamed_addr constant [4 x i8] c"Pop\00", align 1
@.str.14 = private unnamed_addr constant [4 x i8] c"R&B\00", align 1
@.str.15 = private unnamed_addr constant [4 x i8] c"Rap\00", align 1
@.str.16 = private unnamed_addr constant [7 x i8] c"Reggae\00", align 1
@.str.17 = private unnamed_addr constant [5 x i8] c"Rock\00", align 1
@.str.18 = private unnamed_addr constant [7 x i8] c"Techno\00", align 1
@.str.19 = private unnamed_addr constant [11 x i8] c"Industrial\00", align 1
@.str.20 = private unnamed_addr constant [12 x i8] c"Alternative\00", align 1
@.str.21 = private unnamed_addr constant [4 x i8] c"Ska\00", align 1
@.str.22 = private unnamed_addr constant [12 x i8] c"Death Metal\00", align 1
@.str.23 = private unnamed_addr constant [7 x i8] c"Pranks\00", align 1
@.str.24 = private unnamed_addr constant [11 x i8] c"Soundtrack\00", align 1
@.str.25 = private unnamed_addr constant [12 x i8] c"Euro-Techno\00", align 1
@.str.26 = private unnamed_addr constant [8 x i8] c"Ambient\00", align 1
@.str.27 = private unnamed_addr constant [9 x i8] c"Trip-Hop\00", align 1
@.str.28 = private unnamed_addr constant [6 x i8] c"Vocal\00", align 1
@.str.29 = private unnamed_addr constant [10 x i8] c"Jazz+Funk\00", align 1
@.str.30 = private unnamed_addr constant [7 x i8] c"Fusion\00", align 1
@.str.31 = private unnamed_addr constant [7 x i8] c"Trance\00", align 1
@.str.32 = private unnamed_addr constant [10 x i8] c"Classical\00", align 1
@.str.33 = private unnamed_addr constant [13 x i8] c"Instrumental\00", align 1
@.str.34 = private unnamed_addr constant [5 x i8] c"Acid\00", align 1
@.str.35 = private unnamed_addr constant [6 x i8] c"House\00", align 1
@.str.36 = private unnamed_addr constant [5 x i8] c"Game\00", align 1
@.str.37 = private unnamed_addr constant [11 x i8] c"Sound Clip\00", align 1
@.str.38 = private unnamed_addr constant [7 x i8] c"Gospel\00", align 1
@.str.39 = private unnamed_addr constant [6 x i8] c"Noise\00", align 1
@.str.40 = private unnamed_addr constant [11 x i8] c"AlternRock\00", align 1
@.str.41 = private unnamed_addr constant [5 x i8] c"Bass\00", align 1
@.str.42 = private unnamed_addr constant [5 x i8] c"Soul\00", align 1
@.str.43 = private unnamed_addr constant [5 x i8] c"Punk\00", align 1
@.str.44 = private unnamed_addr constant [6 x i8] c"Space\00", align 1
@.str.45 = private unnamed_addr constant [11 x i8] c"Meditative\00", align 1
@.str.46 = private unnamed_addr constant [17 x i8] c"Instrumental Pop\00", align 1
@.str.47 = private unnamed_addr constant [18 x i8] c"Instrumental Rock\00", align 1
@.str.48 = private unnamed_addr constant [7 x i8] c"Ethnic\00", align 1
@.str.49 = private unnamed_addr constant [7 x i8] c"Gothic\00", align 1
@.str.50 = private unnamed_addr constant [9 x i8] c"Darkwave\00", align 1
@.str.51 = private unnamed_addr constant [18 x i8] c"Techno-Industrial\00", align 1
@.str.52 = private unnamed_addr constant [11 x i8] c"Electronic\00", align 1
@.str.53 = private unnamed_addr constant [9 x i8] c"Pop-Folk\00", align 1
@.str.54 = private unnamed_addr constant [10 x i8] c"Eurodance\00", align 1
@.str.55 = private unnamed_addr constant [6 x i8] c"Dream\00", align 1
@.str.56 = private unnamed_addr constant [14 x i8] c"Southern Rock\00", align 1
@.str.57 = private unnamed_addr constant [7 x i8] c"Comedy\00", align 1
@.str.58 = private unnamed_addr constant [5 x i8] c"Cult\00", align 1
@.str.59 = private unnamed_addr constant [8 x i8] c"Gangsta\00", align 1
@.str.60 = private unnamed_addr constant [7 x i8] c"Top 40\00", align 1
@.str.61 = private unnamed_addr constant [14 x i8] c"Christian Rap\00", align 1
@.str.62 = private unnamed_addr constant [9 x i8] c"Pop/Funk\00", align 1
@.str.63 = private unnamed_addr constant [7 x i8] c"Jungle\00", align 1
@.str.64 = private unnamed_addr constant [16 x i8] c"Native American\00", align 1
@.str.65 = private unnamed_addr constant [8 x i8] c"Cabaret\00", align 1
@.str.66 = private unnamed_addr constant [9 x i8] c"New Wave\00", align 1
@.str.67 = private unnamed_addr constant [12 x i8] c"Psychedelic\00", align 1
@.str.68 = private unnamed_addr constant [5 x i8] c"Rave\00", align 1
@.str.69 = private unnamed_addr constant [10 x i8] c"Showtunes\00", align 1
@.str.70 = private unnamed_addr constant [8 x i8] c"Trailer\00", align 1
@.str.71 = private unnamed_addr constant [6 x i8] c"Lo-Fi\00", align 1
@.str.72 = private unnamed_addr constant [7 x i8] c"Tribal\00", align 1
@.str.73 = private unnamed_addr constant [10 x i8] c"Acid Punk\00", align 1
@.str.74 = private unnamed_addr constant [10 x i8] c"Acid Jazz\00", align 1
@.str.75 = private unnamed_addr constant [6 x i8] c"Polka\00", align 1
@.str.76 = private unnamed_addr constant [6 x i8] c"Retro\00", align 1
@.str.77 = private unnamed_addr constant [8 x i8] c"Musical\00", align 1
@.str.78 = private unnamed_addr constant [12 x i8] c"Rock & Roll\00", align 1
@.str.79 = private unnamed_addr constant [10 x i8] c"Hard Rock\00", align 1
@.str.80 = private unnamed_addr constant [5 x i8] c"Folk\00", align 1
@.str.81 = private unnamed_addr constant [10 x i8] c"Folk-Rock\00", align 1
@.str.82 = private unnamed_addr constant [14 x i8] c"National Folk\00", align 1
@.str.83 = private unnamed_addr constant [6 x i8] c"Swing\00", align 1
@.str.84 = private unnamed_addr constant [12 x i8] c"Fast Fusion\00", align 1
@.str.85 = private unnamed_addr constant [6 x i8] c"Bebop\00", align 1
@.str.86 = private unnamed_addr constant [6 x i8] c"Latin\00", align 1
@.str.87 = private unnamed_addr constant [8 x i8] c"Revival\00", align 1
@.str.88 = private unnamed_addr constant [7 x i8] c"Celtic\00", align 1
@.str.89 = private unnamed_addr constant [10 x i8] c"Bluegrass\00", align 1
@.str.90 = private unnamed_addr constant [11 x i8] c"Avantgarde\00", align 1
@.str.91 = private unnamed_addr constant [12 x i8] c"Gothic Rock\00", align 1
@.str.92 = private unnamed_addr constant [17 x i8] c"Progressive Rock\00", align 1
@.str.93 = private unnamed_addr constant [17 x i8] c"Psychedelic Rock\00", align 1
@.str.94 = private unnamed_addr constant [15 x i8] c"Symphonic Rock\00", align 1
@.str.95 = private unnamed_addr constant [10 x i8] c"Slow Rock\00", align 1
@.str.96 = private unnamed_addr constant [9 x i8] c"Big Band\00", align 1
@.str.97 = private unnamed_addr constant [7 x i8] c"Chorus\00", align 1
@.str.98 = private unnamed_addr constant [15 x i8] c"Easy Listening\00", align 1
@.str.99 = private unnamed_addr constant [9 x i8] c"Acoustic\00", align 1
@.str.100 = private unnamed_addr constant [7 x i8] c"Humour\00", align 1
@.str.101 = private unnamed_addr constant [7 x i8] c"Speech\00", align 1
@.str.102 = private unnamed_addr constant [8 x i8] c"Chanson\00", align 1
@.str.103 = private unnamed_addr constant [6 x i8] c"Opera\00", align 1
@.str.104 = private unnamed_addr constant [14 x i8] c"Chamber Music\00", align 1
@.str.105 = private unnamed_addr constant [7 x i8] c"Sonata\00", align 1
@.str.106 = private unnamed_addr constant [9 x i8] c"Symphony\00", align 1
@.str.107 = private unnamed_addr constant [11 x i8] c"Booty Bass\00", align 1
@.str.108 = private unnamed_addr constant [7 x i8] c"Primus\00", align 1
@.str.109 = private unnamed_addr constant [12 x i8] c"Porn Groove\00", align 1
@.str.110 = private unnamed_addr constant [7 x i8] c"Satire\00", align 1
@.str.111 = private unnamed_addr constant [9 x i8] c"Slow Jam\00", align 1
@.str.112 = private unnamed_addr constant [5 x i8] c"Club\00", align 1
@.str.113 = private unnamed_addr constant [6 x i8] c"Tango\00", align 1
@.str.114 = private unnamed_addr constant [6 x i8] c"Samba\00", align 1
@.str.115 = private unnamed_addr constant [9 x i8] c"Folklore\00", align 1
@.str.116 = private unnamed_addr constant [7 x i8] c"Ballad\00", align 1
@.str.117 = private unnamed_addr constant [13 x i8] c"Power Ballad\00", align 1
@.str.118 = private unnamed_addr constant [14 x i8] c"Rhythmic Soul\00", align 1
@.str.119 = private unnamed_addr constant [10 x i8] c"Freestyle\00", align 1
@.str.120 = private unnamed_addr constant [5 x i8] c"Duet\00", align 1
@.str.121 = private unnamed_addr constant [10 x i8] c"Punk Rock\00", align 1
@.str.122 = private unnamed_addr constant [10 x i8] c"Drum Solo\00", align 1
@.str.123 = private unnamed_addr constant [11 x i8] c"A Cappella\00", align 1
@.str.124 = private unnamed_addr constant [11 x i8] c"Euro-House\00", align 1
@.str.125 = private unnamed_addr constant [11 x i8] c"Dance Hall\00", align 1
@.str.126 = private unnamed_addr constant [4 x i8] c"Goa\00", align 1
@.str.127 = private unnamed_addr constant [12 x i8] c"Drum & Bass\00", align 1
@.str.128 = private unnamed_addr constant [11 x i8] c"Club-House\00", align 1
@.str.129 = private unnamed_addr constant [16 x i8] c"Hardcore Techno\00", align 1
@.str.130 = private unnamed_addr constant [7 x i8] c"Terror\00", align 1
@.str.131 = private unnamed_addr constant [6 x i8] c"Indie\00", align 1
@.str.132 = private unnamed_addr constant [8 x i8] c"BritPop\00", align 1
@.str.133 = private unnamed_addr constant [10 x i8] c"Negerpunk\00", align 1
@.str.134 = private unnamed_addr constant [11 x i8] c"Polsk Punk\00", align 1
@.str.135 = private unnamed_addr constant [5 x i8] c"Beat\00", align 1
@.str.136 = private unnamed_addr constant [22 x i8] c"Christian Gangsta Rap\00", align 1
@.str.137 = private unnamed_addr constant [12 x i8] c"Heavy Metal\00", align 1
@.str.138 = private unnamed_addr constant [12 x i8] c"Black Metal\00", align 1
@.str.139 = private unnamed_addr constant [10 x i8] c"Crossover\00", align 1
@.str.140 = private unnamed_addr constant [23 x i8] c"Contemporary Christian\00", align 1
@.str.141 = private unnamed_addr constant [15 x i8] c"Christian Rock\00", align 1
@.str.142 = private unnamed_addr constant [9 x i8] c"Merengue\00", align 1
@.str.143 = private unnamed_addr constant [6 x i8] c"Salsa\00", align 1
@.str.144 = private unnamed_addr constant [13 x i8] c"Thrash Metal\00", align 1
@.str.145 = private unnamed_addr constant [6 x i8] c"Anime\00", align 1
@.str.146 = private unnamed_addr constant [5 x i8] c"Jpop\00", align 1
@.str.147 = private unnamed_addr constant [9 x i8] c"Synthpop\00", align 1
@.str.148 = private unnamed_addr constant [9 x i8] c"Abstract\00", align 1
@.str.149 = private unnamed_addr constant [9 x i8] c"Art Rock\00", align 1
@.str.150 = private unnamed_addr constant [8 x i8] c"Baroque\00", align 1
@.str.151 = private unnamed_addr constant [8 x i8] c"Bhangra\00", align 1
@.str.152 = private unnamed_addr constant [9 x i8] c"Big Beat\00", align 1
@.str.153 = private unnamed_addr constant [10 x i8] c"Breakbeat\00", align 1
@.str.154 = private unnamed_addr constant [9 x i8] c"Chillout\00", align 1
@.str.155 = private unnamed_addr constant [10 x i8] c"Downtempo\00", align 1
@.str.156 = private unnamed_addr constant [4 x i8] c"Dub\00", align 1
@.str.157 = private unnamed_addr constant [4 x i8] c"EBM\00", align 1
@.str.158 = private unnamed_addr constant [9 x i8] c"Eclectic\00", align 1
@.str.159 = private unnamed_addr constant [8 x i8] c"Electro\00", align 1
@.str.160 = private unnamed_addr constant [13 x i8] c"Electroclash\00", align 1
@.str.161 = private unnamed_addr constant [4 x i8] c"Emo\00", align 1
@.str.162 = private unnamed_addr constant [13 x i8] c"Experimental\00", align 1
@.str.163 = private unnamed_addr constant [7 x i8] c"Garage\00", align 1
@.str.164 = private unnamed_addr constant [7 x i8] c"Global\00", align 1
@.str.165 = private unnamed_addr constant [4 x i8] c"IDM\00", align 1
@.str.166 = private unnamed_addr constant [9 x i8] c"Illbient\00", align 1
@.str.167 = private unnamed_addr constant [14 x i8] c"Industro-Goth\00", align 1
@.str.168 = private unnamed_addr constant [9 x i8] c"Jam Band\00", align 1
@.str.169 = private unnamed_addr constant [10 x i8] c"Krautrock\00", align 1
@.str.170 = private unnamed_addr constant [10 x i8] c"Leftfield\00", align 1
@.str.171 = private unnamed_addr constant [7 x i8] c"Lounge\00", align 1
@.str.172 = private unnamed_addr constant [10 x i8] c"Math Rock\00", align 1
@.str.173 = private unnamed_addr constant [13 x i8] c"New Romantic\00", align 1
@.str.174 = private unnamed_addr constant [10 x i8] c"Nu-Breakz\00", align 1
@.str.175 = private unnamed_addr constant [10 x i8] c"Post-Punk\00", align 1
@.str.176 = private unnamed_addr constant [10 x i8] c"Post-Rock\00", align 1
@.str.177 = private unnamed_addr constant [10 x i8] c"Psytrance\00", align 1
@.str.178 = private unnamed_addr constant [9 x i8] c"Shoegaze\00", align 1
@.str.179 = private unnamed_addr constant [11 x i8] c"Space Rock\00", align 1
@.str.180 = private unnamed_addr constant [10 x i8] c"Trop Rock\00", align 1
@.str.181 = private unnamed_addr constant [12 x i8] c"World Music\00", align 1
@.str.182 = private unnamed_addr constant [13 x i8] c"Neoclassical\00", align 1
@.str.183 = private unnamed_addr constant [10 x i8] c"Audiobook\00", align 1
@.str.184 = private unnamed_addr constant [14 x i8] c"Audio Theatre\00", align 1
@.str.185 = private unnamed_addr constant [20 x i8] c"Neue Deutsche Welle\00", align 1
@.str.186 = private unnamed_addr constant [8 x i8] c"Podcast\00", align 1
@.str.187 = private unnamed_addr constant [11 x i8] c"Indie Rock\00", align 1
@.str.188 = private unnamed_addr constant [7 x i8] c"G-Funk\00", align 1
@.str.189 = private unnamed_addr constant [8 x i8] c"Dubstep\00", align 1
@.str.190 = private unnamed_addr constant [12 x i8] c"Garage Rock\00", align 1
@.str.191 = private unnamed_addr constant [9 x i8] c"Psybient\00", align 1
@ff_id3v1_genre_str = hidden local_unnamed_addr constant [192 x i8*] [i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str, i32 0, i32 0), i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.1, i32 0, i32 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.2, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.3, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.4, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.5, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.6, i32 0, i32 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.7, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.8, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.9, i32 0, i32 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.10, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.11, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.12, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.13, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.14, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.15, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.16, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.17, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.18, i32 0, i32 0), i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.19, i32 0, i32 0), i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.20, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.21, i32 0, i32 0), i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.22, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.23, i32 0, i32 0), i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.24, i32 0, i32 0), i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.25, i32 0, i32 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.26, i32 0, i32 0), i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.27, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.28, i32 0, i32 0), i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.29, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.30, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.31, i32 0, i32 0), i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.32, i32 0, i32 0), i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.33, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.34, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.35, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.36, i32 0, i32 0), i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.37, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.38, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.39, i32 0, i32 0), i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.40, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.41, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.42, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.43, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.44, i32 0, i32 0), i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.45, i32 0, i32 0), i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.46, i32 0, i32 0), i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.47, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.48, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.49, i32 0, i32 0), i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.50, i32 0, i32 0), i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.51, i32 0, i32 0), i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.52, i32 0, i32 0), i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.53, i32 0, i32 0), i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.54, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.55, i32 0, i32 0), i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.56, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.57, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.58, i32 0, i32 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.59, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.60, i32 0, i32 0), i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.61, i32 0, i32 0), i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.62, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.63, i32 0, i32 0), i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.64, i32 0, i32 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.65, i32 0, i32 0), i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.66, i32 0, i32 0), i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.67, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.68, i32 0, i32 0), i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.69, i32 0, i32 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.70, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.71, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.72, i32 0, i32 0), i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.73, i32 0, i32 0), i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.74, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.75, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.76, i32 0, i32 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.77, i32 0, i32 0), i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.78, i32 0, i32 0), i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.79, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.80, i32 0, i32 0), i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.81, i32 0, i32 0), i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.82, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.83, i32 0, i32 0), i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.84, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.85, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.86, i32 0, i32 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.87, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.88, i32 0, i32 0), i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.89, i32 0, i32 0), i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.90, i32 0, i32 0), i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.91, i32 0, i32 0), i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.92, i32 0, i32 0), i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.93, i32 0, i32 0), i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.94, i32 0, i32 0), i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.95, i32 0, i32 0), i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.96, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.97, i32 0, i32 0), i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.98, i32 0, i32 0), i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.99, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.100, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.101, i32 0, i32 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.102, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.103, i32 0, i32 0), i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.104, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.105, i32 0, i32 0), i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.106, i32 0, i32 0), i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.107, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.108, i32 0, i32 0), i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.109, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.110, i32 0, i32 0), i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.111, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.112, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.113, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.114, i32 0, i32 0), i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.115, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.116, i32 0, i32 0), i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.117, i32 0, i32 0), i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.118, i32 0, i32 0), i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.119, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.120, i32 0, i32 0), i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.121, i32 0, i32 0), i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.122, i32 0, i32 0), i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.123, i32 0, i32 0), i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.124, i32 0, i32 0), i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.125, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.126, i32 0, i32 0), i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.127, i32 0, i32 0), i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.128, i32 0, i32 0), i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.129, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.130, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.131, i32 0, i32 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.132, i32 0, i32 0), i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.133, i32 0, i32 0), i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.134, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.135, i32 0, i32 0), i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.136, i32 0, i32 0), i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.137, i32 0, i32 0), i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.138, i32 0, i32 0), i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.139, i32 0, i32 0), i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.140, i32 0, i32 0), i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.141, i32 0, i32 0), i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.142, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.143, i32 0, i32 0), i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.144, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.145, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.146, i32 0, i32 0), i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.147, i32 0, i32 0), i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.148, i32 0, i32 0), i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.149, i32 0, i32 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.150, i32 0, i32 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.151, i32 0, i32 0), i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.152, i32 0, i32 0), i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.153, i32 0, i32 0), i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.154, i32 0, i32 0), i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.155, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.156, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.157, i32 0, i32 0), i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.158, i32 0, i32 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.159, i32 0, i32 0), i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.160, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.161, i32 0, i32 0), i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.162, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.163, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.164, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.165, i32 0, i32 0), i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.166, i32 0, i32 0), i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.167, i32 0, i32 0), i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.168, i32 0, i32 0), i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.169, i32 0, i32 0), i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.170, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.171, i32 0, i32 0), i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.172, i32 0, i32 0), i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.173, i32 0, i32 0), i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.174, i32 0, i32 0), i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.175, i32 0, i32 0), i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.176, i32 0, i32 0), i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.177, i32 0, i32 0), i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.178, i32 0, i32 0), i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.179, i32 0, i32 0), i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.180, i32 0, i32 0), i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.181, i32 0, i32 0), i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.182, i32 0, i32 0), i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.183, i32 0, i32 0), i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.184, i32 0, i32 0), i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.185, i32 0, i32 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.186, i32 0, i32 0), i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.187, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.188, i32 0, i32 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.189, i32 0, i32 0), i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.190, i32 0, i32 0), i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.191, i32 0, i32 0)], align 16
@.str.192 = private unnamed_addr constant [6 x i8] c"title\00", align 1
@.str.193 = private unnamed_addr constant [7 x i8] c"artist\00", align 1
@.str.194 = private unnamed_addr constant [6 x i8] c"album\00", align 1
@.str.195 = private unnamed_addr constant [5 x i8] c"date\00", align 1
@.str.196 = private unnamed_addr constant [8 x i8] c"comment\00", align 1
@.str.197 = private unnamed_addr constant [6 x i8] c"track\00", align 1
@.str.198 = private unnamed_addr constant [6 x i8] c"genre\00", align 1

; Function Attrs: nounwind ssp uwtable
define hidden void @ff_id3v1_read(%struct.AVFormatContext*) local_unnamed_addr #0 {
  %2 = alloca [512 x i8], align 16
  %3 = alloca [128 x i8], align 16
  %4 = getelementptr inbounds [128 x i8], [128 x i8]* %3, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 128, i8* nonnull %4) #3
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %4, i8 -86, i64 128, i1 false)
  %5 = getelementptr inbounds %struct.AVFormatContext, %struct.AVFormatContext* %0, i64 0, i32 4
  %6 = load %struct.AVIOContext*, %struct.AVIOContext** %5, align 8
  %7 = tail call i64 @avio_seek(%struct.AVIOContext* %6, i64 0, i32 1) #3
  %8 = load %struct.AVIOContext*, %struct.AVIOContext** %5, align 8
  %9 = getelementptr inbounds %struct.AVIOContext, %struct.AVIOContext* %8, i64 0, i32 19
  %10 = load i32, i32* %9, align 8
  %11 = and i32 %10, 1
  %12 = icmp eq i32 %11, 0
  br i1 %12, label %243, label %13

13:                                               ; preds = %1
  %14 = tail call i64 @avio_size(%struct.AVIOContext* %8) #3
  %15 = icmp sgt i64 %14, 128
  br i1 %15, label %16, label %243

16:                                               ; preds = %13
  %17 = load %struct.AVIOContext*, %struct.AVIOContext** %5, align 8
  %18 = add nsw i64 %14, -128
  %19 = tail call i64 @avio_seek(%struct.AVIOContext* %17, i64 %18, i32 0) #3
  %20 = load %struct.AVIOContext*, %struct.AVIOContext** %5, align 8
  %21 = call i32 @avio_read(%struct.AVIOContext* %20, i8* nonnull %4, i32 128) #3
  %22 = icmp eq i32 %21, 128
  %23 = load i8, i8* %4, align 16
  %24 = icmp eq i8 %23, 84
  %25 = and i1 %22, %24
  br i1 %25, label %26, label %240

26:                                               ; preds = %16
  %27 = getelementptr inbounds [128 x i8], [128 x i8]* %3, i64 0, i64 1
  %28 = load i8, i8* %27, align 1
  %29 = icmp eq i8 %28, 65
  br i1 %29, label %30, label %240

30:                                               ; preds = %26
  %31 = getelementptr inbounds [128 x i8], [128 x i8]* %3, i64 0, i64 2
  %32 = load i8, i8* %31, align 2
  %33 = icmp eq i8 %32, 71
  br i1 %33, label %34, label %240

34:                                               ; preds = %30
  %35 = getelementptr inbounds [128 x i8], [128 x i8]* %3, i64 0, i64 3
  %36 = getelementptr inbounds [512 x i8], [512 x i8]* %2, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 512, i8* nonnull %36) #3
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %36, i8 -86, i64 512, i1 false) #3
  %37 = ptrtoint [512 x i8]* %2 to i64
  br label %38

38:                                               ; preds = %284, %34
  %39 = phi i64 [ 0, %34 ], [ %290, %284 ]
  %40 = phi i8* [ null, %34 ], [ %288, %284 ]
  %41 = phi i8* [ %36, %34 ], [ %289, %284 ]
  %42 = getelementptr inbounds i8, i8* %35, i64 %39
  %43 = load i8, i8* %42, align 1
  %44 = icmp eq i8 %43, 0
  br i1 %44, label %59, label %45

45:                                               ; preds = %38
  %46 = ptrtoint i8* %41 to i64
  %47 = sub i64 %46, %37
  %48 = icmp ugt i64 %47, 510
  br i1 %48, label %59, label %49

49:                                               ; preds = %45
  %50 = icmp eq i8 %43, 32
  %51 = icmp eq i8* %40, null
  %52 = select i1 %51, i8* %41, i8* %40
  %53 = select i1 %50, i8* %52, i8* null
  %54 = getelementptr inbounds i8, i8* %41, i64 1
  store i8 %43, i8* %41, align 1
  %55 = or i64 %39, 1
  %56 = getelementptr inbounds i8, i8* %35, i64 %55
  %57 = load i8, i8* %56, align 1
  %58 = icmp eq i8 %57, 0
  br i1 %58, label %59, label %280

59:                                               ; preds = %284, %280, %49, %45, %38
  %60 = phi i8* [ %41, %38 ], [ %41, %45 ], [ %54, %49 ], [ %54, %280 ], [ %289, %284 ]
  %61 = phi i8* [ %40, %38 ], [ %40, %45 ], [ %53, %49 ], [ %53, %280 ], [ %288, %284 ]
  store i8 0, i8* %60, align 1
  %62 = icmp eq i8* %61, null
  br i1 %62, label %64, label %63

63:                                               ; preds = %59
  store i8 0, i8* %61, align 1
  br label %64

64:                                               ; preds = %63, %59
  %65 = load i8, i8* %36, align 16
  %66 = icmp eq i8 %65, 0
  br i1 %66, label %70, label %67

67:                                               ; preds = %64
  %68 = getelementptr inbounds %struct.AVFormatContext, %struct.AVFormatContext* %0, i64 0, i32 29
  %69 = call i32 @av_dict_set(%struct.AVDictionary** %68, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.192, i64 0, i64 0), i8* nonnull %36, i32 0) #3
  br label %70

70:                                               ; preds = %67, %64
  call void @llvm.lifetime.end.p0i8(i64 512, i8* nonnull %36) #3
  %71 = getelementptr inbounds [128 x i8], [128 x i8]* %3, i64 0, i64 33
  call void @llvm.lifetime.start.p0i8(i64 512, i8* nonnull %36) #3
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %36, i8 -86, i64 512, i1 false) #3
  br label %72

72:                                               ; preds = %272, %70
  %73 = phi i64 [ 0, %70 ], [ %278, %272 ]
  %74 = phi i8* [ null, %70 ], [ %276, %272 ]
  %75 = phi i8* [ %36, %70 ], [ %277, %272 ]
  %76 = getelementptr inbounds i8, i8* %71, i64 %73
  %77 = load i8, i8* %76, align 1
  %78 = icmp eq i8 %77, 0
  br i1 %78, label %93, label %79

79:                                               ; preds = %72
  %80 = ptrtoint i8* %75 to i64
  %81 = sub i64 %80, %37
  %82 = icmp ugt i64 %81, 510
  br i1 %82, label %93, label %83

83:                                               ; preds = %79
  %84 = icmp eq i8 %77, 32
  %85 = icmp eq i8* %74, null
  %86 = select i1 %85, i8* %75, i8* %74
  %87 = select i1 %84, i8* %86, i8* null
  %88 = getelementptr inbounds i8, i8* %75, i64 1
  store i8 %77, i8* %75, align 1
  %89 = or i64 %73, 1
  %90 = getelementptr inbounds i8, i8* %71, i64 %89
  %91 = load i8, i8* %90, align 1
  %92 = icmp eq i8 %91, 0
  br i1 %92, label %93, label %268

93:                                               ; preds = %272, %268, %83, %79, %72
  %94 = phi i8* [ %75, %72 ], [ %75, %79 ], [ %88, %83 ], [ %88, %268 ], [ %277, %272 ]
  %95 = phi i8* [ %74, %72 ], [ %74, %79 ], [ %87, %83 ], [ %87, %268 ], [ %276, %272 ]
  store i8 0, i8* %94, align 1
  %96 = icmp eq i8* %95, null
  br i1 %96, label %98, label %97

97:                                               ; preds = %93
  store i8 0, i8* %95, align 1
  br label %98

98:                                               ; preds = %97, %93
  %99 = load i8, i8* %36, align 16
  %100 = icmp eq i8 %99, 0
  br i1 %100, label %104, label %101

101:                                              ; preds = %98
  %102 = getelementptr inbounds %struct.AVFormatContext, %struct.AVFormatContext* %0, i64 0, i32 29
  %103 = call i32 @av_dict_set(%struct.AVDictionary** %102, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.193, i64 0, i64 0), i8* nonnull %36, i32 0) #3
  br label %104

104:                                              ; preds = %101, %98
  call void @llvm.lifetime.end.p0i8(i64 512, i8* nonnull %36) #3
  %105 = getelementptr inbounds [128 x i8], [128 x i8]* %3, i64 0, i64 63
  call void @llvm.lifetime.start.p0i8(i64 512, i8* nonnull %36) #3
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %36, i8 -86, i64 512, i1 false) #3
  br label %106

106:                                              ; preds = %260, %104
  %107 = phi i64 [ 0, %104 ], [ %266, %260 ]
  %108 = phi i8* [ null, %104 ], [ %264, %260 ]
  %109 = phi i8* [ %36, %104 ], [ %265, %260 ]
  %110 = getelementptr inbounds i8, i8* %105, i64 %107
  %111 = load i8, i8* %110, align 1
  %112 = icmp eq i8 %111, 0
  br i1 %112, label %127, label %113

113:                                              ; preds = %106
  %114 = ptrtoint i8* %109 to i64
  %115 = sub i64 %114, %37
  %116 = icmp ugt i64 %115, 510
  br i1 %116, label %127, label %117

117:                                              ; preds = %113
  %118 = icmp eq i8 %111, 32
  %119 = icmp eq i8* %108, null
  %120 = select i1 %119, i8* %109, i8* %108
  %121 = select i1 %118, i8* %120, i8* null
  %122 = getelementptr inbounds i8, i8* %109, i64 1
  store i8 %111, i8* %109, align 1
  %123 = or i64 %107, 1
  %124 = getelementptr inbounds i8, i8* %105, i64 %123
  %125 = load i8, i8* %124, align 1
  %126 = icmp eq i8 %125, 0
  br i1 %126, label %127, label %256

127:                                              ; preds = %260, %256, %117, %113, %106
  %128 = phi i8* [ %109, %106 ], [ %109, %113 ], [ %122, %117 ], [ %122, %256 ], [ %265, %260 ]
  %129 = phi i8* [ %108, %106 ], [ %108, %113 ], [ %121, %117 ], [ %121, %256 ], [ %264, %260 ]
  store i8 0, i8* %128, align 1
  %130 = icmp eq i8* %129, null
  br i1 %130, label %132, label %131

131:                                              ; preds = %127
  store i8 0, i8* %129, align 1
  br label %132

132:                                              ; preds = %131, %127
  %133 = load i8, i8* %36, align 16
  %134 = icmp eq i8 %133, 0
  br i1 %134, label %138, label %135

135:                                              ; preds = %132
  %136 = getelementptr inbounds %struct.AVFormatContext, %struct.AVFormatContext* %0, i64 0, i32 29
  %137 = call i32 @av_dict_set(%struct.AVDictionary** %136, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.194, i64 0, i64 0), i8* nonnull %36, i32 0) #3
  br label %138

138:                                              ; preds = %135, %132
  call void @llvm.lifetime.end.p0i8(i64 512, i8* nonnull %36) #3
  %139 = getelementptr inbounds [128 x i8], [128 x i8]* %3, i64 0, i64 93
  call void @llvm.lifetime.start.p0i8(i64 512, i8* nonnull %36) #3
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %36, i8 -86, i64 512, i1 false) #3
  %140 = load i8, i8* %139, align 1
  %141 = icmp eq i8 %140, 0
  br i1 %141, label %153, label %142

142:                                              ; preds = %138
  %143 = icmp eq i8 %140, 32
  %144 = select i1 %143, i8* %36, i8* null
  %145 = getelementptr inbounds [512 x i8], [512 x i8]* %2, i64 0, i64 1
  store i8 %140, i8* %36, align 16
  %146 = getelementptr inbounds [128 x i8], [128 x i8]* %3, i64 0, i64 94
  %147 = load i8, i8* %146, align 2
  %148 = icmp eq i8 %147, 0
  br i1 %148, label %149, label %217

149:                                              ; preds = %235, %226, %217, %142
  %150 = phi i8* [ %145, %142 ], [ %222, %217 ], [ %231, %226 ], [ %239, %235 ]
  %151 = phi i8* [ %144, %142 ], [ %221, %217 ], [ %230, %226 ], [ %238, %235 ]
  store i8 0, i8* %150, align 1
  %152 = icmp eq i8* %151, null
  br i1 %152, label %155, label %153

153:                                              ; preds = %149, %138, %235
  %154 = phi i8* [ %239, %235 ], [ %36, %138 ], [ %151, %149 ]
  store i8 0, i8* %154, align 1
  br label %155

155:                                              ; preds = %153, %149
  %156 = load i8, i8* %36, align 16
  %157 = icmp eq i8 %156, 0
  br i1 %157, label %161, label %158

158:                                              ; preds = %155
  %159 = getelementptr inbounds %struct.AVFormatContext, %struct.AVFormatContext* %0, i64 0, i32 29
  %160 = call i32 @av_dict_set(%struct.AVDictionary** %159, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.195, i64 0, i64 0), i8* nonnull %36, i32 0) #3
  br label %161

161:                                              ; preds = %158, %155
  call void @llvm.lifetime.end.p0i8(i64 512, i8* nonnull %36) #3
  %162 = getelementptr inbounds [128 x i8], [128 x i8]* %3, i64 0, i64 97
  call void @llvm.lifetime.start.p0i8(i64 512, i8* nonnull %36) #3
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %36, i8 -86, i64 512, i1 false) #3
  br label %163

163:                                              ; preds = %248, %161
  %164 = phi i64 [ 0, %161 ], [ %254, %248 ]
  %165 = phi i8* [ null, %161 ], [ %252, %248 ]
  %166 = phi i8* [ %36, %161 ], [ %253, %248 ]
  %167 = getelementptr inbounds i8, i8* %162, i64 %164
  %168 = load i8, i8* %167, align 1
  %169 = icmp eq i8 %168, 0
  br i1 %169, label %184, label %170

170:                                              ; preds = %163
  %171 = ptrtoint i8* %166 to i64
  %172 = sub i64 %171, %37
  %173 = icmp ugt i64 %172, 510
  br i1 %173, label %184, label %174

174:                                              ; preds = %170
  %175 = icmp eq i8 %168, 32
  %176 = icmp eq i8* %165, null
  %177 = select i1 %176, i8* %166, i8* %165
  %178 = select i1 %175, i8* %177, i8* null
  %179 = getelementptr inbounds i8, i8* %166, i64 1
  store i8 %168, i8* %166, align 1
  %180 = or i64 %164, 1
  %181 = getelementptr inbounds i8, i8* %162, i64 %180
  %182 = load i8, i8* %181, align 1
  %183 = icmp eq i8 %182, 0
  br i1 %183, label %184, label %244

184:                                              ; preds = %248, %244, %174, %170, %163
  %185 = phi i8* [ %166, %163 ], [ %166, %170 ], [ %179, %174 ], [ %179, %244 ], [ %253, %248 ]
  %186 = phi i8* [ %165, %163 ], [ %165, %170 ], [ %178, %174 ], [ %178, %244 ], [ %252, %248 ]
  store i8 0, i8* %185, align 1
  %187 = icmp eq i8* %186, null
  br i1 %187, label %189, label %188

188:                                              ; preds = %184
  store i8 0, i8* %186, align 1
  br label %189

189:                                              ; preds = %188, %184
  %190 = load i8, i8* %36, align 16
  %191 = icmp eq i8 %190, 0
  br i1 %191, label %195, label %192

192:                                              ; preds = %189
  %193 = getelementptr inbounds %struct.AVFormatContext, %struct.AVFormatContext* %0, i64 0, i32 29
  %194 = call i32 @av_dict_set(%struct.AVDictionary** %193, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.196, i64 0, i64 0), i8* nonnull %36, i32 0) #3
  br label %195

195:                                              ; preds = %192, %189
  call void @llvm.lifetime.end.p0i8(i64 512, i8* nonnull %36) #3
  %196 = getelementptr inbounds [128 x i8], [128 x i8]* %3, i64 0, i64 125
  %197 = load i8, i8* %196, align 1
  %198 = icmp eq i8 %197, 0
  br i1 %198, label %199, label %207

199:                                              ; preds = %195
  %200 = getelementptr inbounds [128 x i8], [128 x i8]* %3, i64 0, i64 126
  %201 = load i8, i8* %200, align 2
  %202 = icmp eq i8 %201, 0
  br i1 %202, label %207, label %203

203:                                              ; preds = %199
  %204 = getelementptr inbounds %struct.AVFormatContext, %struct.AVFormatContext* %0, i64 0, i32 29
  %205 = zext i8 %201 to i64
  %206 = call i32 @av_dict_set_int(%struct.AVDictionary** %204, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.197, i64 0, i64 0), i64 %205, i32 0) #3
  br label %207

207:                                              ; preds = %203, %199, %195
  %208 = getelementptr inbounds [128 x i8], [128 x i8]* %3, i64 0, i64 127
  %209 = load i8, i8* %208, align 1
  %210 = icmp ult i8 %209, -64
  br i1 %210, label %211, label %240

211:                                              ; preds = %207
  %212 = getelementptr inbounds %struct.AVFormatContext, %struct.AVFormatContext* %0, i64 0, i32 29
  %213 = zext i8 %209 to i64
  %214 = getelementptr inbounds [192 x i8*], [192 x i8*]* @ff_id3v1_genre_str, i64 0, i64 %213
  %215 = load i8*, i8** %214, align 8
  %216 = call i32 @av_dict_set(%struct.AVDictionary** %212, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.198, i64 0, i64 0), i8* %215, i32 0) #3
  br label %240

217:                                              ; preds = %142
  %218 = icmp eq i8 %147, 32
  %219 = icmp eq i8* %144, null
  %220 = select i1 %219, i8* %145, i8* %144
  %221 = select i1 %218, i8* %220, i8* null
  %222 = getelementptr inbounds [512 x i8], [512 x i8]* %2, i64 0, i64 2
  store i8 %147, i8* %145, align 1
  %223 = getelementptr inbounds [128 x i8], [128 x i8]* %3, i64 0, i64 95
  %224 = load i8, i8* %223, align 1
  %225 = icmp eq i8 %224, 0
  br i1 %225, label %149, label %226

226:                                              ; preds = %217
  %227 = icmp eq i8 %224, 32
  %228 = icmp eq i8* %221, null
  %229 = select i1 %228, i8* %222, i8* %221
  %230 = select i1 %227, i8* %229, i8* null
  %231 = getelementptr inbounds [512 x i8], [512 x i8]* %2, i64 0, i64 3
  store i8 %224, i8* %222, align 2
  %232 = getelementptr inbounds [128 x i8], [128 x i8]* %3, i64 0, i64 96
  %233 = load i8, i8* %232, align 16
  %234 = icmp eq i8 %233, 0
  br i1 %234, label %149, label %235

235:                                              ; preds = %226
  %236 = icmp eq i8 %233, 32
  %237 = icmp eq i8* %230, null
  %238 = select i1 %237, i8* %231, i8* %230
  %239 = getelementptr inbounds [512 x i8], [512 x i8]* %2, i64 0, i64 4
  store i8 %233, i8* %231, align 1
  br i1 %236, label %149, label %153

240:                                              ; preds = %211, %207, %30, %26, %16
  %241 = load %struct.AVIOContext*, %struct.AVIOContext** %5, align 8
  %242 = call i64 @avio_seek(%struct.AVIOContext* %241, i64 %7, i32 0) #3
  br label %243

243:                                              ; preds = %1, %13, %240
  call void @llvm.lifetime.end.p0i8(i64 128, i8* nonnull %4) #3
  ret void

244:                                              ; preds = %174
  %245 = ptrtoint i8* %179 to i64
  %246 = sub i64 %245, %37
  %247 = icmp ugt i64 %246, 510
  br i1 %247, label %184, label %248

248:                                              ; preds = %244
  %249 = icmp eq i8 %182, 32
  %250 = icmp eq i8* %178, null
  %251 = select i1 %250, i8* %179, i8* %178
  %252 = select i1 %249, i8* %251, i8* null
  %253 = getelementptr inbounds i8, i8* %166, i64 2
  store i8 %182, i8* %179, align 1
  %254 = add nuw nsw i64 %164, 2
  %255 = icmp eq i64 %254, 30
  br i1 %255, label %184, label %163

256:                                              ; preds = %117
  %257 = ptrtoint i8* %122 to i64
  %258 = sub i64 %257, %37
  %259 = icmp ugt i64 %258, 510
  br i1 %259, label %127, label %260

260:                                              ; preds = %256
  %261 = icmp eq i8 %125, 32
  %262 = icmp eq i8* %121, null
  %263 = select i1 %262, i8* %122, i8* %121
  %264 = select i1 %261, i8* %263, i8* null
  %265 = getelementptr inbounds i8, i8* %109, i64 2
  store i8 %125, i8* %122, align 1
  %266 = add nuw nsw i64 %107, 2
  %267 = icmp eq i64 %266, 30
  br i1 %267, label %127, label %106

268:                                              ; preds = %83
  %269 = ptrtoint i8* %88 to i64
  %270 = sub i64 %269, %37
  %271 = icmp ugt i64 %270, 510
  br i1 %271, label %93, label %272

272:                                              ; preds = %268
  %273 = icmp eq i8 %91, 32
  %274 = icmp eq i8* %87, null
  %275 = select i1 %274, i8* %88, i8* %87
  %276 = select i1 %273, i8* %275, i8* null
  %277 = getelementptr inbounds i8, i8* %75, i64 2
  store i8 %91, i8* %88, align 1
  %278 = add nuw nsw i64 %73, 2
  %279 = icmp eq i64 %278, 30
  br i1 %279, label %93, label %72

280:                                              ; preds = %49
  %281 = ptrtoint i8* %54 to i64
  %282 = sub i64 %281, %37
  %283 = icmp ugt i64 %282, 510
  br i1 %283, label %59, label %284

284:                                              ; preds = %280
  %285 = icmp eq i8 %57, 32
  %286 = icmp eq i8* %53, null
  %287 = select i1 %286, i8* %54, i8* %53
  %288 = select i1 %285, i8* %287, i8* null
  %289 = getelementptr inbounds i8, i8* %41, i64 2
  store i8 %57, i8* %54, align 1
  %290 = add nuw nsw i64 %39, 2
  %291 = icmp eq i64 %290, 30
  br i1 %291, label %59, label %38
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

declare i64 @avio_size(%struct.AVIOContext*) local_unnamed_addr #2

declare i64 @avio_seek(%struct.AVIOContext*, i64, i32) local_unnamed_addr #2

declare i32 @avio_read(%struct.AVIOContext*, i8*, i32) local_unnamed_addr #2

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

declare i32 @av_dict_set_int(%struct.AVDictionary**, i8*, i64, i32) local_unnamed_addr #2

declare i32 @av_dict_set(%struct.AVDictionary**, i8*, i8*, i32) local_unnamed_addr #2

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="true" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="true" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
