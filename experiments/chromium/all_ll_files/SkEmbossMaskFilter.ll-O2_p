; ModuleID = '../../third_party/skia/src/effects/SkEmbossMaskFilter.cpp'
source_filename = "../../third_party/skia/src/effects/SkEmbossMaskFilter.cpp"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%class.SkEmbossMaskFilter = type { %class.SkMaskFilterBase.base, %"struct.SkEmbossMaskFilter::Light", float }
%class.SkMaskFilterBase.base = type { %class.SkMaskFilter.base }
%class.SkMaskFilter.base = type { %class.SkFlattenable.base }
%class.SkFlattenable.base = type { %class.SkRefCnt.base }
%class.SkRefCnt.base = type { %class.SkRefCntBase.base }
%class.SkRefCntBase.base = type <{ i32 (...)**, %"struct.std::__1::atomic" }>
%"struct.std::__1::atomic" = type { %"struct.std::__1::__atomic_base" }
%"struct.std::__1::__atomic_base" = type { %"struct.std::__1::__atomic_base.0" }
%"struct.std::__1::__atomic_base.0" = type { %"struct.std::__1::__cxx_atomic_impl" }
%"struct.std::__1::__cxx_atomic_impl" = type { %"struct.std::__1::__cxx_atomic_base_impl" }
%"struct.std::__1::__cxx_atomic_base_impl" = type { i32 }
%"struct.SkEmbossMaskFilter::Light" = type { [3 x float], i16, i8, i8 }
%class.sk_sp = type { %class.SkMaskFilter* }
%class.SkMaskFilter = type { %class.SkFlattenable.base, [4 x i8] }
%struct.SkMask = type <{ i8*, %struct.SkIRect, i32, i8, [3 x i8] }>
%struct.SkIRect = type { i32, i32, i32, i32 }
%class.SkMatrix = type { [9 x float], i32 }
%struct.SkIPoint = type { i32, i32 }
%struct.SkPoint = type { float, float }
%class.sk_sp.10 = type { %class.SkFlattenable* }
%class.SkFlattenable = type { %class.SkRefCnt.base, [4 x i8] }
%class.SkReadBuffer = type <{ i8*, i8*, i8*, %class.SkTHashMap, i32, [4 x i8], %class.sk_sp.2*, i32, [4 x i8], {}**, i32, [4 x i8], %struct.SkDeserialProcs, i8, [7 x i8] }>
%class.SkTHashMap = type { %class.SkTHashTable }
%class.SkTHashTable = type { i32, i32, %class.SkAutoTArray }
%class.SkAutoTArray = type { %"class.std::__1::unique_ptr" }
%"class.std::__1::unique_ptr" = type { %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %"struct.SkTHashTable<SkTHashMap<unsigned int, sk_sp<SkFlattenable> (*)(SkReadBuffer &), SkGoodHash>::Pair, unsigned int, SkTHashMap<unsigned int, sk_sp<SkFlattenable> (*)(SkReadBuffer &), SkGoodHash>::Pair>::Slot"* }
%"struct.SkTHashTable<SkTHashMap<unsigned int, sk_sp<SkFlattenable> (*)(SkReadBuffer &), SkGoodHash>::Pair, unsigned int, SkTHashMap<unsigned int, sk_sp<SkFlattenable> (*)(SkReadBuffer &), SkGoodHash>::Pair>::Slot" = type <{ %"struct.SkTHashMap<unsigned int, sk_sp<SkFlattenable> (*)(SkReadBuffer &), SkGoodHash>::Pair", i32, [4 x i8] }>
%"struct.SkTHashMap<unsigned int, sk_sp<SkFlattenable> (*)(SkReadBuffer &), SkGoodHash>::Pair" = type { %"struct.std::__1::pair" }
%"struct.std::__1::pair" = type { i32, void (%class.sk_sp.10*, %class.SkReadBuffer*)* }
%class.sk_sp.2 = type { %class.SkTypeface* }
%class.SkTypeface = type <{ %class.SkWeakRefCnt, i32, %class.SkFontStyle, %struct.SkRect, %class.SkOnce, i8, [6 x i8] }>
%class.SkWeakRefCnt = type { %class.SkRefCnt.base, %"struct.std::__1::atomic" }
%class.SkFontStyle = type { i32 }
%struct.SkRect = type { float, float, float, float }
%class.SkOnce = type { %"struct.std::__1::atomic.3" }
%"struct.std::__1::atomic.3" = type { %"struct.std::__1::__atomic_base.4" }
%"struct.std::__1::__atomic_base.4" = type { %"struct.std::__1::__atomic_base.5" }
%"struct.std::__1::__atomic_base.5" = type { %"struct.std::__1::__cxx_atomic_impl.6" }
%"struct.std::__1::__cxx_atomic_impl.6" = type { %"struct.std::__1::__cxx_atomic_base_impl.7" }
%"struct.std::__1::__cxx_atomic_base_impl.7" = type { i8 }
%struct.SkDeserialProcs = type { {}*, i8*, {}*, i8*, void (%class.sk_sp.2*, i8*, i64, i8*)*, i8* }
%class.SkWriteBuffer = type { i32 (...)**, %struct.SkSerialProcs }
%struct.SkSerialProcs = type { void (%class.sk_sp.15*, %class.SkPicture*, i8*)*, i8*, void (%class.sk_sp.15*, %class.SkImage*, i8*)*, i8*, void (%class.sk_sp.15*, %class.SkTypeface*, i8*)*, i8* }
%class.sk_sp.15 = type { %class.SkData* }
%class.SkData = type { %class.SkNVRefCnt, void (i8*, i8*)*, i8*, i8*, i64 }
%class.SkNVRefCnt = type { %"struct.std::__1::atomic" }
%class.SkPicture = type <{ %class.SkRefCnt.base, i32, %"struct.std::__1::atomic.11", [7 x i8] }>
%"struct.std::__1::atomic.11" = type { %"struct.std::__1::__atomic_base.12" }
%"struct.std::__1::__atomic_base.12" = type { %"struct.std::__1::__cxx_atomic_impl.13" }
%"struct.std::__1::__cxx_atomic_impl.13" = type { %"struct.std::__1::__cxx_atomic_base_impl.14" }
%"struct.std::__1::__cxx_atomic_base_impl.14" = type { i8 }
%class.SkImage = type <{ %class.SkRefCnt.base, [4 x i8], %struct.SkImageInfo, i32, [4 x i8] }>
%struct.SkImageInfo = type { %class.SkColorInfo, %struct.SkISize }
%class.SkColorInfo = type { %class.sk_sp.16, i32, i32 }
%class.sk_sp.16 = type { %class.SkColorSpace* }
%class.SkColorSpace = type <{ %class.SkNVRefCnt.17, i32, i32, %struct.skcms_TransferFunction, %struct.skcms_Matrix3x3, %struct.skcms_TransferFunction, %struct.skcms_Matrix3x3, %class.SkOnce, [3 x i8] }>
%class.SkNVRefCnt.17 = type { %"struct.std::__1::atomic" }
%struct.skcms_TransferFunction = type { float, float, float, float, float, float, float }
%struct.skcms_Matrix3x3 = type { [3 x [3 x float]] }
%struct.SkISize = type { i32, i32 }
%class.SkRefCntBase = type <{ i32 (...)**, %"struct.std::__1::atomic", [4 x i8] }>
%class.SkMaskFilterBase = type { %class.SkMaskFilter.base, [4 x i8] }
%class.GrStyledShape = type opaque
%class.GrRecordingContext = type opaque
%class.GrSurfaceDrawContext = type opaque
%class.GrPaint = type opaque
%class.GrClip = type opaque
%"struct.SkMaskFilterBase::BlurRec" = type { float, i32 }
%"class.SkMaskFilterBase::NinePatch" = type { %struct.SkMask, %struct.SkIRect, %struct.SkIPoint, %class.SkCachedData* }
%class.SkCachedData = type opaque
%class.SkRRect = type { %struct.SkRect, [4 x %struct.SkPoint], i32 }

$_ZN18SkEmbossMaskFilterD0Ev = comdat any

$_ZNK12SkRefCntBase16internal_disposeEv = comdat any

$_ZNK18SkEmbossMaskFilter10getFactoryEv = comdat any

$_ZNK18SkEmbossMaskFilter11getTypeNameEv = comdat any

$_ZNK12SkMaskFilter18getFlattenableTypeEv = comdat any

$_ZN12SkRefCntBaseD2Ev = comdat any

@_ZTV18SkEmbossMaskFilter = hidden unnamed_addr constant { [20 x i8*] } { [20 x i8*] [i8* null, i8* null, i8* bitcast (void (%class.SkRefCntBase*)* @_ZN12SkRefCntBaseD2Ev to i8*), i8* bitcast (void (%class.SkEmbossMaskFilter*)* @_ZN18SkEmbossMaskFilterD0Ev to i8*), i8* bitcast (void (%class.SkRefCntBase*)* @_ZNK12SkRefCntBase16internal_disposeEv to i8*), i8* bitcast (void (%class.sk_sp.10*, %class.SkReadBuffer*)* (%class.SkEmbossMaskFilter*)* @_ZNK18SkEmbossMaskFilter10getFactoryEv to i8*), i8* bitcast (i8* (%class.SkEmbossMaskFilter*)* @_ZNK18SkEmbossMaskFilter11getTypeNameEv to i8*), i8* bitcast (void (%class.SkEmbossMaskFilter*, %class.SkWriteBuffer*)* @_ZNK18SkEmbossMaskFilter7flattenER13SkWriteBuffer to i8*), i8* bitcast (i32 (%class.SkMaskFilter*)* @_ZNK12SkMaskFilter18getFlattenableTypeEv to i8*), i8* bitcast (i8 (%class.SkEmbossMaskFilter*)* @_ZNK18SkEmbossMaskFilter9getFormatEv to i8*), i8* bitcast (i1 (%class.SkEmbossMaskFilter*, %struct.SkMask*, %struct.SkMask*, %class.SkMatrix*, %struct.SkIPoint*)* @_ZNK18SkEmbossMaskFilter10filterMaskEP6SkMaskRKS0_RK8SkMatrixP8SkIPoint to i8*), i8* bitcast (i1 (%class.SkMaskFilterBase*, %class.GrStyledShape*, %struct.SkIRect*, %struct.SkIRect*, %class.SkMatrix*, %struct.SkIRect*)* @_ZNK16SkMaskFilterBase16canFilterMaskGPUERK13GrStyledShapeRK7SkIRectS5_RK8SkMatrixPS3_ to i8*), i8* bitcast (i1 (%class.SkMaskFilterBase*, %class.GrRecordingContext*, %class.GrSurfaceDrawContext*, %class.GrPaint*, %class.GrClip*, %class.SkMatrix*, %class.GrStyledShape*)* @_ZNK16SkMaskFilterBase19directFilterMaskGPUEP18GrRecordingContextP20GrSurfaceDrawContextO7GrPaintPK6GrClipRK8SkMatrixRK13GrStyledShape to i8*), i8* bitcast (void ()* @_ZNK16SkMaskFilterBase13filterMaskGPUEP18GrRecordingContext18GrSurfaceProxyView11GrColorType11SkAlphaTypeRK8SkMatrixRK7SkIRect to i8*), i8* bitcast (void (%class.SkMaskFilterBase*, %struct.SkRect*, %struct.SkRect*)* @_ZNK16SkMaskFilterBase17computeFastBoundsERK6SkRectPS0_ to i8*), i8* bitcast (i1 (%class.SkMaskFilterBase*, %"struct.SkMaskFilterBase::BlurRec"*)* @_ZNK16SkMaskFilterBase7asABlurEPNS_7BlurRecE to i8*), i8* bitcast (void ()* @_ZNK16SkMaskFilterBase21onAsFragmentProcessorERK8GrFPArgs to i8*), i8* bitcast (i1 (%class.SkMaskFilterBase*)* @_ZNK16SkMaskFilterBase22onHasFragmentProcessorEv to i8*), i8* bitcast (i32 (%class.SkMaskFilterBase*, %struct.SkRect*, i32, %class.SkMatrix*, %struct.SkIRect*, %"class.SkMaskFilterBase::NinePatch"*)* @_ZNK16SkMaskFilterBase17filterRectsToNineEPK6SkRectiRK8SkMatrixRK7SkIRectPNS_9NinePatchE to i8*), i8* bitcast (i32 (%class.SkMaskFilterBase*, %class.SkRRect*, %class.SkMatrix*, %struct.SkIRect*, %"class.SkMaskFilterBase::NinePatch"*)* @_ZNK16SkMaskFilterBase17filterRRectToNineERK7SkRRectRK8SkMatrixRK7SkIRectPNS_9NinePatchE to i8*)] }, align 8
@.str = private unnamed_addr constant [19 x i8] c"SkEmbossMaskFilter\00", align 1

@_ZN18SkEmbossMaskFilterC1EfRKNS_5LightE = hidden unnamed_addr alias void (%class.SkEmbossMaskFilter*, float, %"struct.SkEmbossMaskFilter::Light"*), void (%class.SkEmbossMaskFilter*, float, %"struct.SkEmbossMaskFilter::Light"*)* @_ZN18SkEmbossMaskFilterC2EfRKNS_5LightE

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN18SkEmbossMaskFilter4MakeEfRKNS_5LightE(%class.sk_sp* noalias nocapture sret, float, %"struct.SkEmbossMaskFilter::Light"* nocapture readonly dereferenceable(16)) local_unnamed_addr #0 align 2 {
  %4 = bitcast float %1 to i32
  %5 = and i32 %4, 2139095040
  %6 = icmp eq i32 %5, 2139095040
  %7 = fcmp ole float %1, 0.000000e+00
  %8 = or i1 %7, %6
  br i1 %8, label %9, label %11

9:                                                ; preds = %3
  %10 = getelementptr inbounds %class.sk_sp, %class.sk_sp* %0, i64 0, i32 0
  store %class.SkMaskFilter* null, %class.SkMaskFilter** %10, align 8
  br label %64

11:                                               ; preds = %3
  %12 = getelementptr inbounds %"struct.SkEmbossMaskFilter::Light", %"struct.SkEmbossMaskFilter::Light"* %2, i64 0, i32 0, i64 0
  %13 = getelementptr inbounds %"struct.SkEmbossMaskFilter::Light", %"struct.SkEmbossMaskFilter::Light"* %2, i64 0, i32 1
  %14 = load i16, i16* %13, align 4
  %15 = getelementptr inbounds %"struct.SkEmbossMaskFilter::Light", %"struct.SkEmbossMaskFilter::Light"* %2, i64 0, i32 2
  %16 = load i8, i8* %15, align 2
  %17 = getelementptr inbounds %"struct.SkEmbossMaskFilter::Light", %"struct.SkEmbossMaskFilter::Light"* %2, i64 0, i32 3
  %18 = load i8, i8* %17, align 1
  %19 = load float, float* %12, align 4
  %20 = fmul float %19, %19
  %21 = getelementptr inbounds %"struct.SkEmbossMaskFilter::Light", %"struct.SkEmbossMaskFilter::Light"* %2, i64 0, i32 0, i64 1
  %22 = bitcast float* %21 to <2 x float>*
  %23 = load <2 x float>, <2 x float>* %22, align 4
  %24 = fmul <2 x float> %23, %23
  %25 = extractelement <2 x float> %24, i32 0
  %26 = fadd float %20, %25
  %27 = extractelement <2 x float> %24, i32 1
  %28 = fadd float %26, %27
  %29 = tail call float @sqrtf(float %28) #9
  %30 = fdiv float 1.000000e+00, %29
  %31 = load float, float* %12, align 4
  %32 = fmul float %30, %31
  %33 = bitcast float* %21 to <2 x float>*
  %34 = load <2 x float>, <2 x float>* %33, align 4
  %35 = insertelement <2 x float> undef, float %30, i32 0
  %36 = shufflevector <2 x float> %35, <2 x float> undef, <2 x i32> zeroinitializer
  %37 = fmul <2 x float> %36, %34
  %38 = fmul float %32, 0.000000e+00
  %39 = extractelement <2 x float> %37, i32 0
  %40 = fmul float %38, %39
  %41 = extractelement <2 x float> %37, i32 1
  %42 = fmul float %40, %41
  %43 = fcmp oeq float %42, 0.000000e+00
  br i1 %43, label %46, label %44

44:                                               ; preds = %11
  %45 = getelementptr inbounds %class.sk_sp, %class.sk_sp* %0, i64 0, i32 0
  store %class.SkMaskFilter* null, %class.SkMaskFilter** %45, align 8
  br label %64

46:                                               ; preds = %11
  %47 = tail call i8* @_Znwm(i64 32) #10
  %48 = getelementptr inbounds i8, i8* %47, i64 8
  %49 = bitcast i8* %48 to i32*
  store i32 1, i32* %49, align 4
  %50 = bitcast i8* %47 to i32 (...)***
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [20 x i8*] }, { [20 x i8*] }* @_ZTV18SkEmbossMaskFilter, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %50, align 8
  %51 = getelementptr inbounds i8, i8* %47, i64 12
  %52 = bitcast i8* %51 to float*
  store float %32, float* %52, align 4
  %53 = getelementptr inbounds i8, i8* %47, i64 16
  %54 = bitcast i8* %53 to float*
  store float %39, float* %54, align 4
  %55 = getelementptr inbounds i8, i8* %47, i64 20
  %56 = bitcast i8* %55 to float*
  store float %41, float* %56, align 4
  %57 = getelementptr inbounds i8, i8* %47, i64 24
  %58 = bitcast i8* %57 to i16*
  store i16 %14, i16* %58, align 4
  %59 = getelementptr inbounds i8, i8* %47, i64 26
  store i8 %16, i8* %59, align 2
  %60 = getelementptr inbounds i8, i8* %47, i64 27
  store i8 %18, i8* %60, align 1
  %61 = getelementptr inbounds i8, i8* %47, i64 28
  %62 = bitcast i8* %61 to float*
  store float %1, float* %62, align 4
  %63 = bitcast %class.sk_sp* %0 to i8**
  store i8* %47, i8** %63, align 8
  br label %64

64:                                               ; preds = %44, %46, %9
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #1

; Function Attrs: nobuiltin nofree
declare noalias nonnull i8* @_Znwm(i64) local_unnamed_addr #2

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN18SkEmbossMaskFilterC2EfRKNS_5LightE(%class.SkEmbossMaskFilter* nocapture, float, %"struct.SkEmbossMaskFilter::Light"* nocapture readonly dereferenceable(16)) unnamed_addr #0 align 2 {
  %4 = getelementptr inbounds %class.SkEmbossMaskFilter, %class.SkEmbossMaskFilter* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0
  store i32 1, i32* %4, align 4
  %5 = getelementptr inbounds %class.SkEmbossMaskFilter, %class.SkEmbossMaskFilter* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [20 x i8*] }, { [20 x i8*] }* @_ZTV18SkEmbossMaskFilter, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %5, align 8
  %6 = getelementptr inbounds %class.SkEmbossMaskFilter, %class.SkEmbossMaskFilter* %0, i64 0, i32 1
  %7 = bitcast %"struct.SkEmbossMaskFilter::Light"* %6 to i8*
  %8 = bitcast %"struct.SkEmbossMaskFilter::Light"* %2 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %7, i8* align 4 %8, i64 16, i1 false)
  %9 = getelementptr inbounds %class.SkEmbossMaskFilter, %class.SkEmbossMaskFilter* %0, i64 0, i32 2
  store float %1, float* %9, align 4
  ret void
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden zeroext i8 @_ZNK18SkEmbossMaskFilter9getFormatEv(%class.SkEmbossMaskFilter* nocapture readnone) unnamed_addr #3 align 2 {
  ret i8 2
}

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZNK18SkEmbossMaskFilter10filterMaskEP6SkMaskRKS0_RK8SkMatrixP8SkIPoint(%class.SkEmbossMaskFilter*, %struct.SkMask*, %struct.SkMask* dereferenceable(32), %class.SkMatrix* dereferenceable(40), %struct.SkIPoint*) unnamed_addr #0 align 2 {
  %6 = alloca %"struct.SkEmbossMaskFilter::Light", align 4
  %7 = getelementptr inbounds %struct.SkMask, %struct.SkMask* %2, i64 0, i32 3
  %8 = load i8, i8* %7, align 4
  %9 = icmp eq i8 %8, 1
  br i1 %9, label %10, label %58

10:                                               ; preds = %5
  %11 = getelementptr inbounds %class.SkEmbossMaskFilter, %class.SkEmbossMaskFilter* %0, i64 0, i32 2
  %12 = load float, float* %11, align 4
  %13 = tail call float @_ZNK8SkMatrix9mapRadiusEf(%class.SkMatrix* %3, float %12) #9
  %14 = tail call zeroext i1 @_ZN10SkBlurMask7BoxBlurEP6SkMaskRKS0_f11SkBlurStyleP8SkIPoint(%struct.SkMask* %1, %struct.SkMask* dereferenceable(32) %2, float %13, i32 3, %struct.SkIPoint* null) #9
  br i1 %14, label %15, label %58

15:                                               ; preds = %10
  %16 = getelementptr inbounds %struct.SkMask, %struct.SkMask* %1, i64 0, i32 3
  store i8 2, i8* %16, align 4
  %17 = icmp eq %struct.SkIPoint* %4, null
  br i1 %17, label %28, label %18

18:                                               ; preds = %15
  %19 = fmul float %13, 3.000000e+00
  %20 = tail call float @llvm.ceil.f32(float %19)
  %21 = fcmp olt float %20, 0x41DFFFFFE0000000
  %22 = select i1 %21, float %20, float 0x41DFFFFFE0000000
  %23 = fcmp ogt float %22, 0xC1DFFFFFE0000000
  %24 = select i1 %23, float %22, float 0xC1DFFFFFE0000000
  %25 = fptosi float %24 to i32
  %26 = getelementptr inbounds %struct.SkIPoint, %struct.SkIPoint* %4, i64 0, i32 0
  store i32 %25, i32* %26, align 4
  %27 = getelementptr inbounds %struct.SkIPoint, %struct.SkIPoint* %4, i64 0, i32 1
  store i32 %25, i32* %27, align 4
  br label %28

28:                                               ; preds = %15, %18
  %29 = getelementptr inbounds %struct.SkMask, %struct.SkMask* %2, i64 0, i32 0
  %30 = load i8*, i8** %29, align 8
  %31 = icmp eq i8* %30, null
  br i1 %31, label %58, label %32

32:                                               ; preds = %28
  %33 = getelementptr inbounds %struct.SkMask, %struct.SkMask* %1, i64 0, i32 0
  %34 = load i8*, i8** %33, align 8
  %35 = tail call i64 @_ZNK6SkMask16computeImageSizeEv(%struct.SkMask* %1) #9
  %36 = icmp eq i64 %35, 0
  br i1 %36, label %58, label %37

37:                                               ; preds = %32
  %38 = mul i64 %35, 3
  %39 = tail call i8* @_ZN6SkMask10AllocImageEmNS_9AllocTypeE(i64 %38, i32 0) #9
  store i8* %39, i8** %33, align 8
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %39, i8* align 1 %34, i64 %35, i1 false)
  tail call void @_ZN6SkMask9FreeImageEPv(i8* %34) #9
  %40 = bitcast %"struct.SkEmbossMaskFilter::Light"* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %40) #9
  %41 = getelementptr inbounds %"struct.SkEmbossMaskFilter::Light", %"struct.SkEmbossMaskFilter::Light"* %6, i64 0, i32 0, i64 0
  %42 = getelementptr inbounds %"struct.SkEmbossMaskFilter::Light", %"struct.SkEmbossMaskFilter::Light"* %6, i64 0, i32 0, i64 1
  %43 = getelementptr inbounds %class.SkEmbossMaskFilter, %class.SkEmbossMaskFilter* %0, i64 0, i32 1
  %44 = bitcast %"struct.SkEmbossMaskFilter::Light"* %43 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %40, i8* align 4 %44, i64 16, i1 false)
  %45 = bitcast %"struct.SkEmbossMaskFilter::Light"* %6 to %struct.SkPoint*
  %46 = getelementptr inbounds %"struct.SkEmbossMaskFilter::Light", %"struct.SkEmbossMaskFilter::Light"* %43, i64 0, i32 0, i64 0
  %47 = bitcast %"struct.SkEmbossMaskFilter::Light"* %43 to %struct.SkPoint*
  call void @_ZNK8SkMatrix10mapVectorsEP7SkPointPKS0_i(%class.SkMatrix* %3, %struct.SkPoint* nonnull %45, %struct.SkPoint* %47, i32 1) #9
  %48 = load float, float* %41, align 4
  %49 = load float, float* %42, align 4
  %50 = load float, float* %46, align 4
  %51 = getelementptr inbounds %class.SkEmbossMaskFilter, %class.SkEmbossMaskFilter* %0, i64 0, i32 1, i32 0, i64 1
  %52 = load float, float* %51, align 4
  %53 = call float @_ZN7SkPoint6LengthEff(float %50, float %52) #9
  %54 = call zeroext i1 @_ZN7SkPoint9setLengthEfff(%struct.SkPoint* nonnull %45, float %48, float %49, float %53) #9
  call void @_ZN12SkEmbossMask6EmbossEP6SkMaskRKN18SkEmbossMaskFilter5LightE(%struct.SkMask* %1, %"struct.SkEmbossMaskFilter::Light"* nonnull dereferenceable(16) %6) #9
  %55 = load i8*, i8** %33, align 8
  %56 = load i8*, i8** %29, align 8
  %57 = call i64 @_ZNK6SkMask16computeImageSizeEv(%struct.SkMask* %2) #9
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %55, i8* align 1 %56, i64 %57, i1 false)
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %40) #9
  br label %58

58:                                               ; preds = %37, %10, %28, %32, %5
  %59 = phi i1 [ false, %5 ], [ true, %37 ], [ false, %10 ], [ true, %28 ], [ false, %32 ]
  ret i1 %59
}

declare float @_ZNK8SkMatrix9mapRadiusEf(%class.SkMatrix*, float) local_unnamed_addr #4

declare zeroext i1 @_ZN10SkBlurMask7BoxBlurEP6SkMaskRKS0_f11SkBlurStyleP8SkIPoint(%struct.SkMask*, %struct.SkMask* dereferenceable(32), float, i32, %struct.SkIPoint*) local_unnamed_addr #4

; Function Attrs: nounwind readnone speculatable
declare float @llvm.ceil.f32(float) #5

declare i64 @_ZNK6SkMask16computeImageSizeEv(%struct.SkMask*) local_unnamed_addr #4

declare i8* @_ZN6SkMask10AllocImageEmNS_9AllocTypeE(i64, i32) local_unnamed_addr #4

declare void @_ZN6SkMask9FreeImageEPv(i8*) local_unnamed_addr #4

declare void @_ZNK8SkMatrix10mapVectorsEP7SkPointPKS0_i(%class.SkMatrix*, %struct.SkPoint*, %struct.SkPoint*, i32) local_unnamed_addr #4

declare zeroext i1 @_ZN7SkPoint9setLengthEfff(%struct.SkPoint*, float, float, float) local_unnamed_addr #4

declare float @_ZN7SkPoint6LengthEff(float, float) local_unnamed_addr #4

declare void @_ZN12SkEmbossMask6EmbossEP6SkMaskRKN18SkEmbossMaskFilter5LightE(%struct.SkMask*, %"struct.SkEmbossMaskFilter::Light"* dereferenceable(16)) local_unnamed_addr #4

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN18SkEmbossMaskFilter10CreateProcER12SkReadBuffer(%class.sk_sp.10* noalias nocapture sret, %class.SkReadBuffer* dereferenceable(136)) #0 align 2 {
  %3 = alloca %"struct.SkEmbossMaskFilter::Light", align 4
  %4 = bitcast %"struct.SkEmbossMaskFilter::Light"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %4) #9
  %5 = getelementptr inbounds %"struct.SkEmbossMaskFilter::Light", %"struct.SkEmbossMaskFilter::Light"* %3, i64 0, i32 0, i64 0
  store float 0xFFFFFFFFE0000000, float* %5, align 4
  %6 = getelementptr inbounds %"struct.SkEmbossMaskFilter::Light", %"struct.SkEmbossMaskFilter::Light"* %3, i64 0, i32 0, i64 1
  store float 0xFFFFFFFFE0000000, float* %6, align 4
  %7 = getelementptr inbounds %"struct.SkEmbossMaskFilter::Light", %"struct.SkEmbossMaskFilter::Light"* %3, i64 0, i32 0, i64 2
  store float 0xFFFFFFFFE0000000, float* %7, align 4
  %8 = getelementptr inbounds %"struct.SkEmbossMaskFilter::Light", %"struct.SkEmbossMaskFilter::Light"* %3, i64 0, i32 1
  store i16 -21846, i16* %8, align 4
  %9 = getelementptr inbounds %"struct.SkEmbossMaskFilter::Light", %"struct.SkEmbossMaskFilter::Light"* %3, i64 0, i32 2
  store i8 -86, i8* %9, align 2
  %10 = getelementptr inbounds %"struct.SkEmbossMaskFilter::Light", %"struct.SkEmbossMaskFilter::Light"* %3, i64 0, i32 3
  store i8 -86, i8* %10, align 1
  %11 = call zeroext i1 @_ZN12SkReadBuffer13readByteArrayEPvm(%class.SkReadBuffer* %1, i8* nonnull %4, i64 16) #9
  br i1 %11, label %12, label %68

12:                                               ; preds = %2
  store i16 0, i16* %8, align 4
  %13 = call float @_ZN12SkReadBuffer10readScalarEv(%class.SkReadBuffer* %1) #9
  %14 = bitcast float %13 to i32
  %15 = and i32 %14, 2139095040
  %16 = icmp eq i32 %15, 2139095040
  %17 = fcmp ole float %13, 0.000000e+00
  %18 = or i1 %17, %16
  br i1 %18, label %65, label %19

19:                                               ; preds = %12
  %20 = load i16, i16* %8, align 4, !noalias !2
  %21 = load i8, i8* %9, align 2, !noalias !2
  %22 = load i8, i8* %10, align 1, !noalias !2
  %23 = load float, float* %5, align 4, !noalias !2
  %24 = fmul float %23, %23
  %25 = bitcast float* %6 to <2 x float>*
  %26 = load <2 x float>, <2 x float>* %25, align 4, !noalias !2
  %27 = fmul <2 x float> %26, %26
  %28 = extractelement <2 x float> %27, i32 0
  %29 = fadd float %24, %28
  %30 = extractelement <2 x float> %27, i32 1
  %31 = fadd float %29, %30
  %32 = call float @sqrtf(float %31) #9, !noalias !2
  %33 = fdiv float 1.000000e+00, %32
  %34 = load float, float* %5, align 4, !noalias !2
  %35 = fmul float %33, %34
  %36 = bitcast float* %6 to <2 x float>*
  %37 = load <2 x float>, <2 x float>* %36, align 4, !noalias !2
  %38 = insertelement <2 x float> undef, float %33, i32 0
  %39 = shufflevector <2 x float> %38, <2 x float> undef, <2 x i32> zeroinitializer
  %40 = fmul <2 x float> %39, %37
  %41 = fmul float %35, 0.000000e+00
  %42 = extractelement <2 x float> %40, i32 0
  %43 = fmul float %41, %42
  %44 = extractelement <2 x float> %40, i32 1
  %45 = fmul float %43, %44
  %46 = fcmp oeq float %45, 0.000000e+00
  br i1 %46, label %47, label %65

47:                                               ; preds = %19
  %48 = call i8* @_Znwm(i64 32) #10, !noalias !2
  %49 = getelementptr inbounds i8, i8* %48, i64 8
  %50 = bitcast i8* %49 to i32*
  store i32 1, i32* %50, align 4, !noalias !2
  %51 = bitcast i8* %48 to i32 (...)***
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [20 x i8*] }, { [20 x i8*] }* @_ZTV18SkEmbossMaskFilter, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %51, align 8, !noalias !2
  %52 = getelementptr inbounds i8, i8* %48, i64 12
  %53 = bitcast i8* %52 to float*
  store float %35, float* %53, align 4, !noalias !2
  %54 = getelementptr inbounds i8, i8* %48, i64 16
  %55 = bitcast i8* %54 to float*
  store float %42, float* %55, align 4, !noalias !2
  %56 = getelementptr inbounds i8, i8* %48, i64 20
  %57 = bitcast i8* %56 to float*
  store float %44, float* %57, align 4, !noalias !2
  %58 = getelementptr inbounds i8, i8* %48, i64 24
  %59 = bitcast i8* %58 to i16*
  store i16 %20, i16* %59, align 4, !noalias !2
  %60 = getelementptr inbounds i8, i8* %48, i64 26
  store i8 %21, i8* %60, align 2, !noalias !2
  %61 = getelementptr inbounds i8, i8* %48, i64 27
  store i8 %22, i8* %61, align 1, !noalias !2
  %62 = getelementptr inbounds i8, i8* %48, i64 28
  %63 = bitcast i8* %62 to float*
  store float %13, float* %63, align 4, !noalias !2
  %64 = ptrtoint i8* %48 to i64
  br label %65

65:                                               ; preds = %47, %12, %19
  %66 = phi i64 [ %64, %47 ], [ 0, %12 ], [ 0, %19 ]
  %67 = bitcast %class.sk_sp.10* %0 to i64*
  store i64 %66, i64* %67, align 8
  br label %70

68:                                               ; preds = %2
  %69 = getelementptr inbounds %class.sk_sp.10, %class.sk_sp.10* %0, i64 0, i32 0
  store %class.SkFlattenable* null, %class.SkFlattenable** %69, align 8
  br label %70

70:                                               ; preds = %68, %65
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %4) #9
  ret void
}

declare zeroext i1 @_ZN12SkReadBuffer13readByteArrayEPvm(%class.SkReadBuffer*, i8*, i64) local_unnamed_addr #4

declare float @_ZN12SkReadBuffer10readScalarEv(%class.SkReadBuffer*) local_unnamed_addr #4

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZNK18SkEmbossMaskFilter7flattenER13SkWriteBuffer(%class.SkEmbossMaskFilter* nocapture readonly, %class.SkWriteBuffer* dereferenceable(56)) unnamed_addr #0 align 2 {
  %3 = alloca %"struct.SkEmbossMaskFilter::Light", align 4
  %4 = bitcast %"struct.SkEmbossMaskFilter::Light"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %4) #9
  %5 = getelementptr inbounds %"struct.SkEmbossMaskFilter::Light", %"struct.SkEmbossMaskFilter::Light"* %3, i64 0, i32 1
  %6 = getelementptr inbounds %class.SkEmbossMaskFilter, %class.SkEmbossMaskFilter* %0, i64 0, i32 1
  %7 = bitcast %"struct.SkEmbossMaskFilter::Light"* %6 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %4, i8* align 4 %7, i64 16, i1 false)
  store i16 0, i16* %5, align 4
  %8 = bitcast %class.SkWriteBuffer* %1 to void (%class.SkWriteBuffer*, i8*, i64)***
  %9 = load void (%class.SkWriteBuffer*, i8*, i64)**, void (%class.SkWriteBuffer*, i8*, i64)*** %8, align 8
  %10 = getelementptr inbounds void (%class.SkWriteBuffer*, i8*, i64)*, void (%class.SkWriteBuffer*, i8*, i64)** %9, i64 3
  %11 = load void (%class.SkWriteBuffer*, i8*, i64)*, void (%class.SkWriteBuffer*, i8*, i64)** %10, align 8
  call void %11(%class.SkWriteBuffer* %1, i8* nonnull %4, i64 16) #9
  %12 = getelementptr inbounds %class.SkEmbossMaskFilter, %class.SkEmbossMaskFilter* %0, i64 0, i32 2
  %13 = load float, float* %12, align 4
  %14 = bitcast %class.SkWriteBuffer* %1 to void (%class.SkWriteBuffer*, float)***
  %15 = load void (%class.SkWriteBuffer*, float)**, void (%class.SkWriteBuffer*, float)*** %14, align 8
  %16 = getelementptr inbounds void (%class.SkWriteBuffer*, float)*, void (%class.SkWriteBuffer*, float)** %15, i64 5
  %17 = load void (%class.SkWriteBuffer*, float)*, void (%class.SkWriteBuffer*, float)** %16, align 8
  call void %17(%class.SkWriteBuffer* %1, float %13) #9
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %4) #9
  ret void
}

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZN18SkEmbossMaskFilterD0Ev(%class.SkEmbossMaskFilter*) unnamed_addr #6 comdat align 2 {
  %2 = bitcast %class.SkEmbossMaskFilter* %0 to i8*
  tail call void @_ZdlPv(i8* %2) #10
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNK12SkRefCntBase16internal_disposeEv(%class.SkRefCntBase*) unnamed_addr #0 comdat align 2 {
  %2 = icmp eq %class.SkRefCntBase* %0, null
  br i1 %2, label %8, label %3

3:                                                ; preds = %1
  %4 = bitcast %class.SkRefCntBase* %0 to void (%class.SkRefCntBase*)***
  %5 = load void (%class.SkRefCntBase*)**, void (%class.SkRefCntBase*)*** %4, align 8
  %6 = getelementptr inbounds void (%class.SkRefCntBase*)*, void (%class.SkRefCntBase*)** %5, i64 1
  %7 = load void (%class.SkRefCntBase*)*, void (%class.SkRefCntBase*)** %6, align 8
  tail call void %7(%class.SkRefCntBase* nonnull %0) #9
  br label %8

8:                                                ; preds = %3, %1
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void (%class.sk_sp.10*, %class.SkReadBuffer*)* @_ZNK18SkEmbossMaskFilter10getFactoryEv(%class.SkEmbossMaskFilter*) unnamed_addr #0 comdat align 2 {
  ret void (%class.sk_sp.10*, %class.SkReadBuffer*)* @_ZN18SkEmbossMaskFilter10CreateProcER12SkReadBuffer
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden i8* @_ZNK18SkEmbossMaskFilter11getTypeNameEv(%class.SkEmbossMaskFilter*) unnamed_addr #0 comdat align 2 {
  ret i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str, i64 0, i64 0)
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden i32 @_ZNK12SkMaskFilter18getFlattenableTypeEv(%class.SkMaskFilter*) unnamed_addr #0 comdat align 2 {
  ret i32 4
}

declare zeroext i1 @_ZNK16SkMaskFilterBase16canFilterMaskGPUERK13GrStyledShapeRK7SkIRectS5_RK8SkMatrixPS3_(%class.SkMaskFilterBase*, %class.GrStyledShape*, %struct.SkIRect* dereferenceable(16), %struct.SkIRect* dereferenceable(16), %class.SkMatrix* dereferenceable(40), %struct.SkIRect*) unnamed_addr #4

declare zeroext i1 @_ZNK16SkMaskFilterBase19directFilterMaskGPUEP18GrRecordingContextP20GrSurfaceDrawContextO7GrPaintPK6GrClipRK8SkMatrixRK13GrStyledShape(%class.SkMaskFilterBase*, %class.GrRecordingContext*, %class.GrSurfaceDrawContext*, %class.GrPaint*, %class.GrClip*, %class.SkMatrix* dereferenceable(40), %class.GrStyledShape*) unnamed_addr #4

declare void @_ZNK16SkMaskFilterBase13filterMaskGPUEP18GrRecordingContext18GrSurfaceProxyView11GrColorType11SkAlphaTypeRK8SkMatrixRK7SkIRect() unnamed_addr

declare void @_ZNK16SkMaskFilterBase17computeFastBoundsERK6SkRectPS0_(%class.SkMaskFilterBase*, %struct.SkRect* dereferenceable(16), %struct.SkRect*) unnamed_addr #4

declare zeroext i1 @_ZNK16SkMaskFilterBase7asABlurEPNS_7BlurRecE(%class.SkMaskFilterBase*, %"struct.SkMaskFilterBase::BlurRec"*) unnamed_addr #4

declare void @_ZNK16SkMaskFilterBase21onAsFragmentProcessorERK8GrFPArgs() unnamed_addr

declare zeroext i1 @_ZNK16SkMaskFilterBase22onHasFragmentProcessorEv(%class.SkMaskFilterBase*) unnamed_addr #4

declare i32 @_ZNK16SkMaskFilterBase17filterRectsToNineEPK6SkRectiRK8SkMatrixRK7SkIRectPNS_9NinePatchE(%class.SkMaskFilterBase*, %struct.SkRect*, i32, %class.SkMatrix* dereferenceable(40), %struct.SkIRect* dereferenceable(16), %"class.SkMaskFilterBase::NinePatch"*) unnamed_addr #4

declare i32 @_ZNK16SkMaskFilterBase17filterRRectToNineERK7SkRRectRK8SkMatrixRK7SkIRectPNS_9NinePatchE(%class.SkMaskFilterBase*, %class.SkRRect* dereferenceable(52), %class.SkMatrix* dereferenceable(40), %struct.SkIRect* dereferenceable(16), %"class.SkMaskFilterBase::NinePatch"*) unnamed_addr #4

; Function Attrs: nofree nounwind
declare float @sqrtf(float) local_unnamed_addr #7

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN12SkRefCntBaseD2Ev(%class.SkRefCntBase*) unnamed_addr #0 comdat align 2 {
  ret void
}

; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(i8*) local_unnamed_addr #8

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { nobuiltin nofree "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { norecurse nounwind readnone ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind readnone speculatable }
attributes #6 = { inlinehint nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #8 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #9 = { nounwind }
attributes #10 = { builtin nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{!3}
!3 = distinct !{!3, !4, !"_ZN18SkEmbossMaskFilter4MakeEfRKNS_5LightE: argument 0"}
!4 = distinct !{!4, !"_ZN18SkEmbossMaskFilter4MakeEfRKNS_5LightE"}
