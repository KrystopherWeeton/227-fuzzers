; ModuleID = '../../third_party/webrtc/modules/audio_processing/aec3/aec_state.cc'
source_filename = "../../third_party/webrtc/modules/audio_processing/aec3/aec_state.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"class.webrtc::AecState" = type { %"class.std::__1::unique_ptr", %"struct.webrtc::EchoCanceller3Config", i64, i8, i8, i8, %"class.webrtc::AecState::InitialState", %"class.webrtc::AecState::FilterDelay", %"class.std::__1::unique_ptr.4", %"class.webrtc::AecState::FilteringQualityAnalyzer", %"class.webrtc::AecState::SaturationDetector", %"class.webrtc::ErlEstimator", %"class.webrtc::ErleEstimator", i64, i64, i8, [7 x i8], %"class.webrtc::FilterAnalyzer", %"class.webrtc::EchoAudibility", %"class.webrtc::ReverbModelEstimator", %"class.webrtc::ReverbModel", %"class.webrtc::SubtractorOutputAnalyzer" }
%"class.std::__1::unique_ptr" = type { %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %"class.webrtc::ApmDataDumper"* }
%"class.webrtc::ApmDataDumper" = type { i8 }
%"struct.webrtc::EchoCanceller3Config" = type { %"struct.webrtc::EchoCanceller3Config::Buffering", %"struct.webrtc::EchoCanceller3Config::Delay", %"struct.webrtc::EchoCanceller3Config::Filter", %"struct.webrtc::EchoCanceller3Config::Erle", %"struct.webrtc::EchoCanceller3Config::EpStrength", %"struct.webrtc::EchoCanceller3Config::EchoAudibility", %"struct.webrtc::EchoCanceller3Config::RenderLevels", %"struct.webrtc::EchoCanceller3Config::EchoRemovalControl", [6 x i8], %"struct.webrtc::EchoCanceller3Config::EchoModel", %"struct.webrtc::EchoCanceller3Config::ComfortNoise", [4 x i8], %"struct.webrtc::EchoCanceller3Config::Suppressor" }
%"struct.webrtc::EchoCanceller3Config::Buffering" = type { i64, i64 }
%"struct.webrtc::EchoCanceller3Config::Delay" = type { i64, i64, i64, i64, i64, i64, float, float, float, %"struct.webrtc::EchoCanceller3Config::Delay::DelaySelectionThresholds", i8, i8, %"struct.webrtc::EchoCanceller3Config::Delay::AlignmentMixing", %"struct.webrtc::EchoCanceller3Config::Delay::AlignmentMixing" }
%"struct.webrtc::EchoCanceller3Config::Delay::DelaySelectionThresholds" = type { i32, i32 }
%"struct.webrtc::EchoCanceller3Config::Delay::AlignmentMixing" = type { i8, i8, float, i8 }
%"struct.webrtc::EchoCanceller3Config::Filter" = type <{ %"struct.webrtc::EchoCanceller3Config::Filter::RefinedConfiguration", %"struct.webrtc::EchoCanceller3Config::Filter::CoarseConfiguration", %"struct.webrtc::EchoCanceller3Config::Filter::RefinedConfiguration", %"struct.webrtc::EchoCanceller3Config::Filter::CoarseConfiguration", i64, float, i32, i8, i8, i8, i8, i8, [3 x i8] }>
%"struct.webrtc::EchoCanceller3Config::Filter::RefinedConfiguration" = type { i64, float, float, float, float, float }
%"struct.webrtc::EchoCanceller3Config::Filter::CoarseConfiguration" = type { i64, float, float }
%"struct.webrtc::EchoCanceller3Config::Erle" = type <{ float, float, float, i8, [3 x i8], i64, i8, i8, [6 x i8] }>
%"struct.webrtc::EchoCanceller3Config::EpStrength" = type <{ float, float, i8, i8, i8, i8 }>
%"struct.webrtc::EchoCanceller3Config::EchoAudibility" = type <{ float, float, float, float, float, float, i8, i8, [2 x i8] }>
%"struct.webrtc::EchoCanceller3Config::RenderLevels" = type { float, float, float, float }
%"struct.webrtc::EchoCanceller3Config::EchoRemovalControl" = type { i8, i8 }
%"struct.webrtc::EchoCanceller3Config::EchoModel" = type <{ i64, float, float, float, float, i64, i64, i8, [7 x i8] }>
%"struct.webrtc::EchoCanceller3Config::ComfortNoise" = type { float }
%"struct.webrtc::EchoCanceller3Config::Suppressor" = type <{ i64, %"struct.webrtc::EchoCanceller3Config::Suppressor::Tuning", %"struct.webrtc::EchoCanceller3Config::Suppressor::Tuning", %"struct.webrtc::EchoCanceller3Config::Suppressor::DominantNearendDetection", %"struct.webrtc::EchoCanceller3Config::Suppressor::SubbandNearendDetection", i8, [3 x i8], %"struct.webrtc::EchoCanceller3Config::Suppressor::HighBandsSuppression", float, i8, [7 x i8] }>
%"struct.webrtc::EchoCanceller3Config::Suppressor::Tuning" = type { %"struct.webrtc::EchoCanceller3Config::Suppressor::MaskingThresholds", %"struct.webrtc::EchoCanceller3Config::Suppressor::MaskingThresholds", float, float }
%"struct.webrtc::EchoCanceller3Config::Suppressor::MaskingThresholds" = type { float, float, float }
%"struct.webrtc::EchoCanceller3Config::Suppressor::DominantNearendDetection" = type <{ float, float, float, i32, i32, i8, [3 x i8] }>
%"struct.webrtc::EchoCanceller3Config::Suppressor::SubbandNearendDetection" = type { i64, %"struct.webrtc::EchoCanceller3Config::Suppressor::SubbandNearendDetection::SubbandRegion", %"struct.webrtc::EchoCanceller3Config::Suppressor::SubbandNearendDetection::SubbandRegion", float, float }
%"struct.webrtc::EchoCanceller3Config::Suppressor::SubbandNearendDetection::SubbandRegion" = type { i64, i64 }
%"struct.webrtc::EchoCanceller3Config::Suppressor::HighBandsSuppression" = type { float, float, float, float }
%"class.webrtc::AecState::InitialState" = type { i8, float, i8, i8, i64 }
%"class.webrtc::AecState::FilterDelay" = type { i32, i8, %"class.std::__1::vector", i32, %"class.absl::optional" }
%"class.std::__1::vector" = type { %"class.std::__1::__vector_base" }
%"class.std::__1::__vector_base" = type { i32*, i32*, %"class.std::__1::__compressed_pair.1" }
%"class.std::__1::__compressed_pair.1" = type { %"struct.std::__1::__compressed_pair_elem.2" }
%"struct.std::__1::__compressed_pair_elem.2" = type { i32* }
%"class.absl::optional" = type { %"class.absl::optional_internal::optional_data" }
%"class.absl::optional_internal::optional_data" = type { %"class.absl::optional_internal::optional_data_base" }
%"class.absl::optional_internal::optional_data_base" = type { %"class.absl::optional_internal::optional_data_dtor_base" }
%"class.absl::optional_internal::optional_data_dtor_base" = type { i8, %union.anon }
%union.anon = type { %"struct.webrtc::DelayEstimate" }
%"struct.webrtc::DelayEstimate" = type { i32, i64, i64, i64 }
%"class.std::__1::unique_ptr.4" = type { %"class.std::__1::__compressed_pair.5" }
%"class.std::__1::__compressed_pair.5" = type { %"struct.std::__1::__compressed_pair_elem.6" }
%"struct.std::__1::__compressed_pair_elem.6" = type { %"class.webrtc::TransparentMode"* }
%"class.webrtc::TransparentMode" = type { i32 (...)** }
%"class.webrtc::AecState::FilteringQualityAnalyzer" = type { i8, i8, i64, i64, i8, %"class.std::__1::vector.10" }
%"class.std::__1::vector.10" = type { i64*, i64, %"class.std::__1::__compressed_pair.11" }
%"class.std::__1::__compressed_pair.11" = type { %"struct.std::__1::__compressed_pair_elem.12" }
%"struct.std::__1::__compressed_pair_elem.12" = type { i64 }
%"class.webrtc::AecState::SaturationDetector" = type { i8 }
%"class.webrtc::ErlEstimator" = type { i64, %"struct.std::__1::array", %"struct.std::__1::array.16", float, i32, i64 }
%"struct.std::__1::array" = type { [65 x float] }
%"struct.std::__1::array.16" = type { [63 x i32] }
%"class.webrtc::ErleEstimator" = type { i64, %"class.webrtc::FullBandErleEstimator", %"class.webrtc::SubbandErleEstimator", %"class.std::__1::unique_ptr.66", i64 }
%"class.webrtc::FullBandErleEstimator" = type { float, float, %"class.std::__1::vector", %"class.std::__1::vector.17", %"class.std::__1::vector.24", %"class.std::__1::vector.36" }
%"class.std::__1::vector.17" = type { %"class.std::__1::__vector_base.18" }
%"class.std::__1::__vector_base.18" = type { float*, float*, %"class.std::__1::__compressed_pair.19" }
%"class.std::__1::__compressed_pair.19" = type { %"struct.std::__1::__compressed_pair_elem.20" }
%"struct.std::__1::__compressed_pair_elem.20" = type { float* }
%"class.std::__1::vector.24" = type { %"class.std::__1::__vector_base.25" }
%"class.std::__1::__vector_base.25" = type { %"class.webrtc::FullBandErleEstimator::ErleInstantaneous"*, %"class.webrtc::FullBandErleEstimator::ErleInstantaneous"*, %"class.std::__1::__compressed_pair.31" }
%"class.webrtc::FullBandErleEstimator::ErleInstantaneous" = type { i8, i8, %"class.absl::optional.26", float, float, float, float, float, i32 }
%"class.absl::optional.26" = type { %"class.absl::optional_internal::optional_data.27" }
%"class.absl::optional_internal::optional_data.27" = type { %"class.absl::optional_internal::optional_data_base.28" }
%"class.absl::optional_internal::optional_data_base.28" = type { %"class.absl::optional_internal::optional_data_dtor_base.29" }
%"class.absl::optional_internal::optional_data_dtor_base.29" = type { i8, %union.anon.30 }
%union.anon.30 = type { float }
%"class.std::__1::__compressed_pair.31" = type { %"struct.std::__1::__compressed_pair_elem.32" }
%"struct.std::__1::__compressed_pair_elem.32" = type { %"class.webrtc::FullBandErleEstimator::ErleInstantaneous"* }
%"class.std::__1::vector.36" = type { %"class.std::__1::__vector_base.37" }
%"class.std::__1::__vector_base.37" = type { %"class.absl::optional.26"*, %"class.absl::optional.26"*, %"class.std::__1::__compressed_pair.38" }
%"class.std::__1::__compressed_pair.38" = type { %"struct.std::__1::__compressed_pair_elem.39" }
%"struct.std::__1::__compressed_pair_elem.39" = type { %"class.absl::optional.26"* }
%"class.webrtc::SubbandErleEstimator" = type { i8, float, %"struct.std::__1::array", i8, %"struct.webrtc::SubbandErleEstimator::AccumulatedSpectra", %"class.std::__1::vector.43", %"class.std::__1::vector.43", %"class.std::__1::vector.43", %"class.std::__1::vector.50", %"class.std::__1::vector.58" }
%"struct.webrtc::SubbandErleEstimator::AccumulatedSpectra" = type { %"class.std::__1::vector.43", %"class.std::__1::vector.43", %"class.std::__1::vector.50", %"class.std::__1::vector" }
%"class.std::__1::vector.43" = type { %"class.std::__1::__vector_base.44" }
%"class.std::__1::__vector_base.44" = type { %"struct.std::__1::array"*, %"struct.std::__1::array"*, %"class.std::__1::__compressed_pair.45" }
%"class.std::__1::__compressed_pair.45" = type { %"struct.std::__1::__compressed_pair_elem.46" }
%"struct.std::__1::__compressed_pair_elem.46" = type { %"struct.std::__1::array"* }
%"class.std::__1::vector.50" = type { %"class.std::__1::__vector_base.51" }
%"class.std::__1::__vector_base.51" = type { %"struct.std::__1::array.52"*, %"struct.std::__1::array.52"*, %"class.std::__1::__compressed_pair.53" }
%"struct.std::__1::array.52" = type { [65 x i8] }
%"class.std::__1::__compressed_pair.53" = type { %"struct.std::__1::__compressed_pair_elem.54" }
%"struct.std::__1::__compressed_pair_elem.54" = type { %"struct.std::__1::array.52"* }
%"class.std::__1::vector.58" = type { %"class.std::__1::__vector_base.59" }
%"class.std::__1::__vector_base.59" = type { %"struct.std::__1::array.60"*, %"struct.std::__1::array.60"*, %"class.std::__1::__compressed_pair.61" }
%"struct.std::__1::array.60" = type { [65 x i32] }
%"class.std::__1::__compressed_pair.61" = type { %"struct.std::__1::__compressed_pair_elem.62" }
%"struct.std::__1::__compressed_pair_elem.62" = type { %"struct.std::__1::array.60"* }
%"class.std::__1::unique_ptr.66" = type { %"class.std::__1::__compressed_pair.67" }
%"class.std::__1::__compressed_pair.67" = type { %"struct.std::__1::__compressed_pair_elem.68" }
%"struct.std::__1::__compressed_pair_elem.68" = type { %"class.webrtc::SignalDependentErleEstimator"* }
%"class.webrtc::SignalDependentErleEstimator" = type { float, i64, i64, i64, %"struct.std::__1::array.69", %"struct.std::__1::array.70", %"class.std::__1::vector.71", i8, %"class.std::__1::vector.43", %"class.std::__1::vector.43", %"class.std::__1::vector.75", %"class.std::__1::vector.82", %"class.std::__1::vector.84", %"class.std::__1::vector.82", %"class.std::__1::vector.96", %"class.std::__1::vector.104" }
%"struct.std::__1::array.69" = type { [65 x i64] }
%"struct.std::__1::array.70" = type { [6 x float] }
%"class.std::__1::vector.71" = type { %"class.std::__1::__vector_base.72" }
%"class.std::__1::__vector_base.72" = type { i64*, i64*, %"class.std::__1::__compressed_pair.73" }
%"class.std::__1::__compressed_pair.73" = type { %"struct.std::__1::__compressed_pair_elem.74" }
%"struct.std::__1::__compressed_pair_elem.74" = type { i64* }
%"class.std::__1::vector.75" = type { %"class.std::__1::__vector_base.76" }
%"class.std::__1::__vector_base.76" = type { %"class.std::__1::vector.43"*, %"class.std::__1::vector.43"*, %"class.std::__1::__compressed_pair.77" }
%"class.std::__1::__compressed_pair.77" = type { %"struct.std::__1::__compressed_pair_elem.78" }
%"struct.std::__1::__compressed_pair_elem.78" = type { %"class.std::__1::vector.43"* }
%"class.std::__1::vector.84" = type { %"class.std::__1::__vector_base.85" }
%"class.std::__1::__vector_base.85" = type { %"struct.std::__1::array.70"*, %"struct.std::__1::array.70"*, %"class.std::__1::__compressed_pair.86" }
%"class.std::__1::__compressed_pair.86" = type { %"struct.std::__1::__compressed_pair_elem.87" }
%"struct.std::__1::__compressed_pair_elem.87" = type { %"struct.std::__1::array.70"* }
%"class.std::__1::vector.82" = type { %"class.std::__1::__vector_base.83" }
%"class.std::__1::__vector_base.83" = type { %"class.std::__1::vector.84"*, %"class.std::__1::vector.84"*, %"class.std::__1::__compressed_pair.91" }
%"class.std::__1::__compressed_pair.91" = type { %"struct.std::__1::__compressed_pair_elem.92" }
%"struct.std::__1::__compressed_pair_elem.92" = type { %"class.std::__1::vector.84"* }
%"class.std::__1::vector.96" = type { %"class.std::__1::__vector_base.97" }
%"class.std::__1::__vector_base.97" = type { %"struct.std::__1::array.98"*, %"struct.std::__1::array.98"*, %"class.std::__1::__compressed_pair.99" }
%"struct.std::__1::array.98" = type opaque
%"class.std::__1::__compressed_pair.99" = type { %"struct.std::__1::__compressed_pair_elem.100" }
%"struct.std::__1::__compressed_pair_elem.100" = type { %"struct.std::__1::array.98"* }
%"class.std::__1::vector.104" = type { %"class.std::__1::__vector_base.105" }
%"class.std::__1::__vector_base.105" = type { %"struct.std::__1::array.69"*, %"struct.std::__1::array.69"*, %"class.std::__1::__compressed_pair.106" }
%"class.std::__1::__compressed_pair.106" = type { %"struct.std::__1::__compressed_pair_elem.107" }
%"struct.std::__1::__compressed_pair_elem.107" = type { %"struct.std::__1::array.69"* }
%"class.webrtc::FilterAnalyzer" = type <{ %"class.std::__1::unique_ptr", i8, [3 x i8], float, %"class.std::__1::vector.114", i64, %"struct.webrtc::FilterAnalyzer::FilterRegion", %"class.std::__1::vector.121", %"class.std::__1::vector", i32, [4 x i8] }>
%"class.std::__1::vector.114" = type { %"class.std::__1::__vector_base.115" }
%"class.std::__1::__vector_base.115" = type { %"class.std::__1::vector.17"*, %"class.std::__1::vector.17"*, %"class.std::__1::__compressed_pair.116" }
%"class.std::__1::__compressed_pair.116" = type { %"struct.std::__1::__compressed_pair_elem.117" }
%"struct.std::__1::__compressed_pair_elem.117" = type { %"class.std::__1::vector.17"* }
%"struct.webrtc::FilterAnalyzer::FilterRegion" = type { i64, i64 }
%"class.std::__1::vector.121" = type { %"class.std::__1::__vector_base.122" }
%"class.std::__1::__vector_base.122" = type { %"struct.webrtc::FilterAnalyzer::FilterAnalysisState"*, %"struct.webrtc::FilterAnalyzer::FilterAnalysisState"*, %"class.std::__1::__compressed_pair.123" }
%"struct.webrtc::FilterAnalyzer::FilterAnalysisState" = type { float, i64, i32, i8, [3 x i8], %"class.webrtc::FilterAnalyzer::ConsistentFilterDetector" }
%"class.webrtc::FilterAnalyzer::ConsistentFilterDetector" = type <{ i8, [3 x i8], float, float, [4 x i8], i64, i64, float, [4 x i8], i64, i32, [4 x i8] }>
%"class.std::__1::__compressed_pair.123" = type { %"struct.std::__1::__compressed_pair_elem.124" }
%"struct.std::__1::__compressed_pair_elem.124" = type { %"struct.webrtc::FilterAnalyzer::FilterAnalysisState"* }
%"class.webrtc::EchoAudibility" = type { %"class.absl::optional.128", i32, i8, i8, [2 x i8], %"class.webrtc::StationarityEstimator" }
%"class.absl::optional.128" = type { %"class.absl::optional_internal::optional_data.129" }
%"class.absl::optional_internal::optional_data.129" = type { %"class.absl::optional_internal::optional_data_base.130" }
%"class.absl::optional_internal::optional_data_base.130" = type { %"class.absl::optional_internal::optional_data_dtor_base.131" }
%"class.absl::optional_internal::optional_data_dtor_base.131" = type { i8, %union.anon.132 }
%union.anon.132 = type { i32 }
%"class.webrtc::StationarityEstimator" = type <{ %"class.std::__1::unique_ptr", %"class.webrtc::StationarityEstimator::NoiseSpectrum", %"struct.std::__1::array.60", %"struct.std::__1::array.52", [3 x i8] }>
%"class.webrtc::StationarityEstimator::NoiseSpectrum" = type { %"struct.std::__1::array", i64 }
%"class.webrtc::ReverbModelEstimator" = type { %"class.std::__1::vector.133", %"class.std::__1::vector.146" }
%"class.std::__1::vector.133" = type { %"class.std::__1::__vector_base.134" }
%"class.std::__1::__vector_base.134" = type { %"class.std::__1::unique_ptr.135"*, %"class.std::__1::unique_ptr.135"*, %"class.std::__1::__compressed_pair.141" }
%"class.std::__1::unique_ptr.135" = type { %"class.std::__1::__compressed_pair.136" }
%"class.std::__1::__compressed_pair.136" = type { %"struct.std::__1::__compressed_pair_elem.137" }
%"struct.std::__1::__compressed_pair_elem.137" = type { %"class.webrtc::ReverbDecayEstimator"* }
%"class.webrtc::ReverbDecayEstimator" = type <{ i32, i32, i8, [3 x i8], %"class.webrtc::ReverbDecayEstimator::LateReverbLinearRegressor", %"class.webrtc::ReverbDecayEstimator::EarlyReverbLengthEstimator", i32, i32, i32, i32, i8, [7 x i8], %"class.std::__1::vector.17", float, float, float, [4 x i8] }>
%"class.webrtc::ReverbDecayEstimator::LateReverbLinearRegressor" = type { float, float, float, i32, i32 }
%"class.webrtc::ReverbDecayEstimator::EarlyReverbLengthEstimator" = type <{ %"class.std::__1::vector.17", %"class.std::__1::vector.17", i32, i32, i32, [4 x i8] }>
%"class.std::__1::__compressed_pair.141" = type { %"struct.std::__1::__compressed_pair_elem.142" }
%"struct.std::__1::__compressed_pair_elem.142" = type { %"class.std::__1::unique_ptr.135"* }
%"class.std::__1::vector.146" = type { %"class.std::__1::__vector_base.147" }
%"class.std::__1::__vector_base.147" = type { %"class.webrtc::ReverbFrequencyResponse"*, %"class.webrtc::ReverbFrequencyResponse"*, %"class.std::__1::__compressed_pair.148" }
%"class.webrtc::ReverbFrequencyResponse" = type { float, %"struct.std::__1::array" }
%"class.std::__1::__compressed_pair.148" = type { %"struct.std::__1::__compressed_pair_elem.149" }
%"struct.std::__1::__compressed_pair_elem.149" = type { %"class.webrtc::ReverbFrequencyResponse"* }
%"class.webrtc::ReverbModel" = type { %"struct.std::__1::array" }
%"class.webrtc::SubtractorOutputAnalyzer" = type { %"class.std::__1::vector.10" }
%"class.std::__1::__vector_base_common" = type { i8 }
%"struct.webrtc::EchoPathVariability" = type <{ i8, [3 x i8], i32, i8, [3 x i8] }>
%"class.webrtc::RenderBuffer" = type <{ %"struct.webrtc::BlockBuffer"*, %"struct.webrtc::SpectrumBuffer"*, %"struct.webrtc::FftBuffer"*, i8, [7 x i8] }>
%"struct.webrtc::BlockBuffer" = type { i32, %"class.std::__1::vector.157", i32, i32 }
%"class.std::__1::vector.157" = type { %"class.std::__1::__vector_base.158" }
%"class.std::__1::__vector_base.158" = type { %"class.std::__1::vector.159"*, %"class.std::__1::vector.159"*, %"class.std::__1::__compressed_pair.166" }
%"class.std::__1::vector.159" = type { %"class.std::__1::__vector_base.160" }
%"class.std::__1::__vector_base.160" = type { %"class.std::__1::vector.114"*, %"class.std::__1::vector.114"*, %"class.std::__1::__compressed_pair.161" }
%"class.std::__1::__compressed_pair.161" = type { %"struct.std::__1::__compressed_pair_elem.162" }
%"struct.std::__1::__compressed_pair_elem.162" = type { %"class.std::__1::vector.114"* }
%"class.std::__1::__compressed_pair.166" = type { %"struct.std::__1::__compressed_pair_elem.167" }
%"struct.std::__1::__compressed_pair_elem.167" = type { %"class.std::__1::vector.159"* }
%"struct.webrtc::SpectrumBuffer" = type { i32, %"class.std::__1::vector.75", i32, i32 }
%"struct.webrtc::FftBuffer" = type { i32, %"class.std::__1::vector.171", i32, i32 }
%"class.std::__1::vector.171" = type { %"class.std::__1::__vector_base.172" }
%"class.std::__1::__vector_base.172" = type { %"class.std::__1::vector.173"*, %"class.std::__1::vector.173"*, %"class.std::__1::__compressed_pair.174" }
%"class.std::__1::vector.173" = type { %"class.std::__1::__vector_base.195" }
%"class.std::__1::__vector_base.195" = type { %"struct.webrtc::FftData"*, %"struct.webrtc::FftData"*, %"class.std::__1::__compressed_pair.196" }
%"struct.webrtc::FftData" = type { %"struct.std::__1::array", %"struct.std::__1::array" }
%"class.std::__1::__compressed_pair.196" = type { %"struct.std::__1::__compressed_pair_elem.197" }
%"struct.std::__1::__compressed_pair_elem.197" = type { %"struct.webrtc::FftData"* }
%"class.std::__1::__compressed_pair.174" = type { %"struct.std::__1::__compressed_pair_elem.175" }
%"struct.std::__1::__compressed_pair_elem.175" = type { %"class.std::__1::vector.173"* }
%"class.rtc::ArrayView.179" = type { %"class.rtc::impl::ArrayViewBase.180" }
%"class.rtc::impl::ArrayViewBase.180" = type { %"struct.std::__1::array"*, i64 }
%"class.rtc::ArrayView.181" = type { %"class.rtc::impl::ArrayViewBase.182" }
%"class.rtc::impl::ArrayViewBase.182" = type { %"struct.webrtc::SubtractorOutput"*, i64 }
%"struct.webrtc::SubtractorOutput" = type { %"struct.std::__1::array.183", %"struct.std::__1::array.183", %"struct.std::__1::array.183", %"struct.std::__1::array.183", %"struct.webrtc::FftData", %"struct.std::__1::array", %"struct.std::__1::array", float, float, float, float, float, float, float }
%"struct.std::__1::array.183" = type { [64 x float] }
%"class.rtc::ArrayView.192" = type { %"class.rtc::impl::ArrayViewBase.193" }
%"class.rtc::impl::ArrayViewBase.193" = type { %"class.absl::optional.26"*, i64 }
%"class.rtc::ArrayView.184" = type { %"class.rtc::impl::ArrayViewBase.185" }
%"class.rtc::impl::ArrayViewBase.185" = type { i32*, i64 }
%"class.std::__1::basic_string" = type { %"class.std::__1::__compressed_pair.201" }
%"class.std::__1::__compressed_pair.201" = type { %"struct.std::__1::__compressed_pair_elem.202" }
%"struct.std::__1::__compressed_pair_elem.202" = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" = type { %union.anon.203 }
%union.anon.203 = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" = type { i8*, i64, i64 }
%"class.std::__1::__basic_string_common" = type { i8 }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short" = type { [23 x i8], %struct.anon }
%struct.anon = type { i8 }

$_ZNSt3__16vectorIbNS_9allocatorIbEEEC2EmRKb = comdat any

$_ZN6webrtc11field_trial9IsEnabledEPKc = comdat any

@_ZN6webrtc8AecState15instance_count_E = hidden global i32 0, align 4
@.str.20 = private unnamed_addr constant [49 x i8] c"WebRTC-Aec3DeactivateInitialStateResetKillSwitch\00", align 1
@.str.21 = private unnamed_addr constant [8 x i8] c"Enabled\00", align 1
@.str.23 = private unnamed_addr constant [39 x i8] c"WebRTC-Aec3AecStateFullResetKillSwitch\00", align 1
@.str.24 = private unnamed_addr constant [53 x i8] c"WebRTC-Aec3AecStateSubtractorAnalyzerResetKillSwitch\00", align 1

@_ZN6webrtc8AecStateC1ERKNS_20EchoCanceller3ConfigEm = hidden unnamed_addr alias void (%"class.webrtc::AecState"*, %"struct.webrtc::EchoCanceller3Config"*, i64), void (%"class.webrtc::AecState"*, %"struct.webrtc::EchoCanceller3Config"*, i64)* @_ZN6webrtc8AecStateC2ERKNS_20EchoCanceller3ConfigEm
@_ZN6webrtc8AecStateD1Ev = hidden unnamed_addr alias void (%"class.webrtc::AecState"*), void (%"class.webrtc::AecState"*)* @_ZN6webrtc8AecStateD2Ev
@_ZN6webrtc8AecState12InitialStateC1ERKNS_20EchoCanceller3ConfigE = hidden unnamed_addr alias void (%"class.webrtc::AecState::InitialState"*, %"struct.webrtc::EchoCanceller3Config"*), void (%"class.webrtc::AecState::InitialState"*, %"struct.webrtc::EchoCanceller3Config"*)* @_ZN6webrtc8AecState12InitialStateC2ERKNS_20EchoCanceller3ConfigE
@_ZN6webrtc8AecState11FilterDelayC1ERKNS_20EchoCanceller3ConfigEm = hidden unnamed_addr alias void (%"class.webrtc::AecState::FilterDelay"*, %"struct.webrtc::EchoCanceller3Config"*, i64), void (%"class.webrtc::AecState::FilterDelay"*, %"struct.webrtc::EchoCanceller3Config"*, i64)* @_ZN6webrtc8AecState11FilterDelayC2ERKNS_20EchoCanceller3ConfigEm
@_ZN6webrtc8AecState24FilteringQualityAnalyzerC1ERKNS_20EchoCanceller3ConfigEm = hidden unnamed_addr alias void (%"class.webrtc::AecState::FilteringQualityAnalyzer"*, %"struct.webrtc::EchoCanceller3Config"*, i64), void (%"class.webrtc::AecState::FilteringQualityAnalyzer"*, %"struct.webrtc::EchoCanceller3Config"*, i64)* @_ZN6webrtc8AecState24FilteringQualityAnalyzerC2ERKNS_20EchoCanceller3ConfigEm

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @_ZNK6webrtc8AecState22GetResidualEchoScalingEN3rtc9ArrayViewIfLln4711EEE(%"class.webrtc::AecState"* nocapture readonly, float*, i64) local_unnamed_addr #0 align 2 {
  %4 = getelementptr inbounds %"class.webrtc::AecState", %"class.webrtc::AecState"* %0, i64 0, i32 1, i32 2, i32 7
  %5 = load i8, i8* %4, align 8, !range !2
  %6 = icmp eq i8 %5, 0
  %7 = getelementptr inbounds %"class.webrtc::AecState", %"class.webrtc::AecState"* %0, i64 0, i32 13
  %8 = load i64, i64* %7, align 8
  %9 = icmp ugt i64 %8, 374
  %10 = icmp ugt i64 %8, 199
  %11 = select i1 %6, i1 %10, i1 %9
  %12 = icmp eq i64 %2, 0
  %13 = select i1 %12, float* null, float* %1
  br i1 %12, label %35, label %14

14:                                               ; preds = %3
  %15 = getelementptr inbounds %"class.webrtc::AecState", %"class.webrtc::AecState"* %0, i64 0, i32 18, i32 3
  br label %16

16:                                               ; preds = %30, %14
  %17 = phi i64 [ 0, %14 ], [ %33, %30 ]
  %18 = getelementptr inbounds %"class.webrtc::AecState", %"class.webrtc::AecState"* %0, i64 0, i32 18, i32 5, i32 3, i32 0, i64 %17
  %19 = load i8, i8* %18, align 1, !range !2
  %20 = icmp eq i8 %19, 0
  br i1 %20, label %29, label %21

21:                                               ; preds = %16
  %22 = getelementptr inbounds %"class.webrtc::AecState", %"class.webrtc::AecState"* %0, i64 0, i32 18, i32 5, i32 2, i32 0, i64 %17
  %23 = load i32, i32* %22, align 4
  %24 = icmp eq i32 %23, 0
  br i1 %24, label %25, label %29

25:                                               ; preds = %21
  br i1 %11, label %30, label %26

26:                                               ; preds = %25
  %27 = load i8, i8* %15, align 1, !range !2
  %28 = icmp eq i8 %27, 0
  br i1 %28, label %29, label %30

29:                                               ; preds = %26, %21, %16
  br label %30

30:                                               ; preds = %25, %26, %29
  %31 = phi float [ 1.000000e+00, %29 ], [ 0.000000e+00, %26 ], [ 0.000000e+00, %25 ]
  %32 = getelementptr inbounds float, float* %13, i64 %17
  store float %31, float* %32, align 4
  %33 = add nuw i64 %17, 1
  %34 = icmp eq i64 %33, %2
  br i1 %34, label %35, label %16

35:                                               ; preds = %30, %3
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN6webrtc8AecStateC2ERKNS_20EchoCanceller3ConfigEm(%"class.webrtc::AecState"*, %"struct.webrtc::EchoCanceller3Config"* dereferenceable(560), i64) unnamed_addr #2 align 2 {
  %4 = alloca i8, align 1
  %5 = tail call i8* @_Znwm(i64 1) #14
  %6 = bitcast i8* %5 to %"class.webrtc::ApmDataDumper"*
  %7 = atomicrmw add i32* @_ZN6webrtc8AecState15instance_count_E, i32 1 seq_cst
  %8 = add i32 %7, 1
  tail call void @_ZN6webrtc13ApmDataDumperC1Ei(%"class.webrtc::ApmDataDumper"* nonnull %6, i32 %8) #15
  %9 = ptrtoint i8* %5 to i64
  %10 = bitcast %"class.webrtc::AecState"* %0 to i64*
  store i64 %9, i64* %10, align 8
  %11 = getelementptr inbounds %"class.webrtc::AecState", %"class.webrtc::AecState"* %0, i64 0, i32 1
  tail call void @_ZN6webrtc20EchoCanceller3ConfigC1ERKS0_(%"struct.webrtc::EchoCanceller3Config"* %11, %"struct.webrtc::EchoCanceller3Config"* dereferenceable(560) %1) #15
  %12 = getelementptr inbounds %"class.webrtc::AecState", %"class.webrtc::AecState"* %0, i64 0, i32 2
  store i64 %2, i64* %12, align 8
  %13 = getelementptr inbounds %"class.webrtc::AecState", %"class.webrtc::AecState"* %0, i64 0, i32 3
  %14 = tail call zeroext i1 @_ZN6webrtc11field_trial9IsEnabledEPKc(i8* getelementptr inbounds ([49 x i8], [49 x i8]* @.str.20, i64 0, i64 0)) #15
  %15 = zext i1 %14 to i8
  store i8 %15, i8* %13, align 8
  %16 = getelementptr inbounds %"class.webrtc::AecState", %"class.webrtc::AecState"* %0, i64 0, i32 4
  %17 = tail call zeroext i1 @_ZN6webrtc11field_trial9IsEnabledEPKc(i8* getelementptr inbounds ([39 x i8], [39 x i8]* @.str.23, i64 0, i64 0)) #15
  %18 = xor i1 %17, true
  %19 = zext i1 %18 to i8
  store i8 %19, i8* %16, align 1
  %20 = getelementptr inbounds %"class.webrtc::AecState", %"class.webrtc::AecState"* %0, i64 0, i32 5
  %21 = tail call zeroext i1 @_ZN6webrtc11field_trial9IsEnabledEPKc(i8* getelementptr inbounds ([53 x i8], [53 x i8]* @.str.24, i64 0, i64 0)) #15
  %22 = xor i1 %21, true
  %23 = zext i1 %22 to i8
  store i8 %23, i8* %20, align 2
  %24 = getelementptr inbounds %"class.webrtc::AecState", %"class.webrtc::AecState"* %0, i64 0, i32 6, i32 0
  %25 = getelementptr inbounds %"class.webrtc::AecState", %"class.webrtc::AecState"* %0, i64 0, i32 1, i32 2, i32 7
  %26 = load i8, i8* %25, align 8, !range !2
  store i8 %26, i8* %24, align 8
  %27 = getelementptr inbounds %"class.webrtc::AecState", %"class.webrtc::AecState"* %0, i64 0, i32 6, i32 1
  %28 = getelementptr inbounds %"class.webrtc::AecState", %"class.webrtc::AecState"* %0, i64 0, i32 1, i32 2, i32 5
  %29 = bitcast float* %28 to i32*
  %30 = load i32, i32* %29, align 8
  %31 = bitcast float* %27 to i32*
  store i32 %30, i32* %31, align 4
  %32 = getelementptr inbounds %"class.webrtc::AecState", %"class.webrtc::AecState"* %0, i64 0, i32 6, i32 2
  store i8 0, i8* %32, align 8
  %33 = getelementptr inbounds %"class.webrtc::AecState", %"class.webrtc::AecState"* %0, i64 0, i32 6, i32 3
  %34 = getelementptr inbounds %"class.webrtc::AecState", %"class.webrtc::AecState"* %0, i64 0, i32 6, i32 4
  store i8 1, i8* %33, align 1
  store i64 0, i64* %34, align 8
  %35 = load i64, i64* %12, align 8
  %36 = getelementptr inbounds %"class.webrtc::AecState", %"class.webrtc::AecState"* %0, i64 0, i32 7, i32 0
  %37 = getelementptr inbounds %"class.webrtc::AecState", %"class.webrtc::AecState"* %0, i64 0, i32 1, i32 1, i32 3
  %38 = load i64, i64* %37, align 8
  %39 = lshr i64 %38, 6
  %40 = trunc i64 %39 to i32
  store i32 %40, i32* %36, align 8
  %41 = getelementptr inbounds %"class.webrtc::AecState", %"class.webrtc::AecState"* %0, i64 0, i32 7, i32 1
  store i8 0, i8* %41, align 4
  %42 = getelementptr inbounds %"class.webrtc::AecState", %"class.webrtc::AecState"* %0, i64 0, i32 7, i32 2
  %43 = bitcast %"class.std::__1::vector"* %42 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %43, i8 0, i64 24, i1 false) #15
  %44 = icmp eq i64 %35, 0
  br i1 %44, label %179, label %45

45:                                               ; preds = %3
  %46 = icmp ugt i64 %35, 4611686018427387903
  br i1 %46, label %47, label %49

47:                                               ; preds = %45
  %48 = bitcast %"class.std::__1::vector"* %42 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %48) #16
  unreachable

49:                                               ; preds = %45
  %50 = shl i64 %35, 2
  %51 = tail call i8* @_Znwm(i64 %50) #14
  %52 = bitcast i8* %51 to i32*
  %53 = getelementptr inbounds %"class.webrtc::AecState", %"class.webrtc::AecState"* %0, i64 0, i32 7, i32 2, i32 0, i32 1
  %54 = bitcast i32** %53 to i8**
  store i8* %51, i8** %54, align 8
  %55 = bitcast %"class.std::__1::vector"* %42 to i8**
  store i8* %51, i8** %55, align 8
  %56 = getelementptr inbounds i32, i32* %52, i64 %35
  %57 = getelementptr inbounds %"class.webrtc::AecState", %"class.webrtc::AecState"* %0, i64 0, i32 7, i32 2, i32 0, i32 2, i32 0, i32 0
  store i32* %56, i32** %57, align 8
  store i32 %40, i32* %52, align 4
  %58 = getelementptr inbounds i8, i8* %51, i64 4
  %59 = bitcast i8* %58 to i32*
  %60 = icmp eq i32* %56, %59
  br i1 %60, label %175, label %61

61:                                               ; preds = %49
  store i32 %40, i32* %59, align 4
  %62 = getelementptr inbounds i8, i8* %51, i64 8
  %63 = bitcast i8* %62 to i32*
  %64 = icmp eq i32* %56, %63
  br i1 %64, label %173, label %65

65:                                               ; preds = %61
  %66 = shl nsw i64 %35, 2
  %67 = add i64 %66, -12
  %68 = lshr exact i64 %67, 2
  %69 = add nuw nsw i64 %68, 1
  %70 = icmp ult i64 %69, 8
  br i1 %70, label %132, label %71

71:                                               ; preds = %65
  %72 = getelementptr i8, i8* %51, i64 8
  %73 = shl nsw i64 %35, 2
  %74 = getelementptr i8, i8* %51, i64 %73
  %75 = getelementptr %"class.webrtc::AecState", %"class.webrtc::AecState"* %0, i64 0, i32 7, i32 0
  %76 = bitcast i32* %75 to i8*
  %77 = getelementptr i8, i8* %76, i64 1
  %78 = bitcast i32* %36 to i8*
  %79 = icmp ult i8* %72, %77
  %80 = icmp ugt i8* %74, %78
  %81 = and i1 %79, %80
  br i1 %81, label %132, label %82

82:                                               ; preds = %71
  %83 = and i64 %69, 9223372036854775800
  %84 = getelementptr i32, i32* %63, i64 %83
  %85 = add nsw i64 %83, -8
  %86 = lshr exact i64 %85, 3
  %87 = add nuw nsw i64 %86, 1
  %88 = and i64 %87, 1
  %89 = icmp eq i64 %85, 0
  br i1 %89, label %117, label %90

90:                                               ; preds = %82
  %91 = sub nuw nsw i64 %87, %88
  %92 = load i32, i32* %36, align 4, !alias.scope !3
  %93 = insertelement <4 x i32> undef, i32 %92, i32 0
  %94 = shufflevector <4 x i32> %93, <4 x i32> undef, <4 x i32> zeroinitializer
  %95 = insertelement <4 x i32> undef, i32 %92, i32 0
  %96 = shufflevector <4 x i32> %95, <4 x i32> undef, <4 x i32> zeroinitializer
  %97 = load i32, i32* %36, align 4, !alias.scope !3
  %98 = insertelement <4 x i32> undef, i32 %97, i32 0
  %99 = shufflevector <4 x i32> %98, <4 x i32> undef, <4 x i32> zeroinitializer
  %100 = insertelement <4 x i32> undef, i32 %97, i32 0
  %101 = shufflevector <4 x i32> %100, <4 x i32> undef, <4 x i32> zeroinitializer
  br label %102

102:                                              ; preds = %102, %90
  %103 = phi i64 [ 0, %90 ], [ %114, %102 ]
  %104 = phi i64 [ %91, %90 ], [ %115, %102 ]
  %105 = getelementptr i32, i32* %63, i64 %103
  %106 = bitcast i32* %105 to <4 x i32>*
  store <4 x i32> %94, <4 x i32>* %106, align 4, !alias.scope !6, !noalias !3
  %107 = getelementptr i32, i32* %105, i64 4
  %108 = bitcast i32* %107 to <4 x i32>*
  store <4 x i32> %96, <4 x i32>* %108, align 4, !alias.scope !6, !noalias !3
  %109 = or i64 %103, 8
  %110 = getelementptr i32, i32* %63, i64 %109
  %111 = bitcast i32* %110 to <4 x i32>*
  store <4 x i32> %99, <4 x i32>* %111, align 4, !alias.scope !6, !noalias !3
  %112 = getelementptr i32, i32* %110, i64 4
  %113 = bitcast i32* %112 to <4 x i32>*
  store <4 x i32> %101, <4 x i32>* %113, align 4, !alias.scope !6, !noalias !3
  %114 = add i64 %103, 16
  %115 = add i64 %104, -2
  %116 = icmp eq i64 %115, 0
  br i1 %116, label %117, label %102, !llvm.loop !8

117:                                              ; preds = %102, %82
  %118 = phi i64 [ 0, %82 ], [ %114, %102 ]
  %119 = icmp eq i64 %88, 0
  br i1 %119, label %130, label %120

120:                                              ; preds = %117
  %121 = getelementptr i32, i32* %63, i64 %118
  %122 = load i32, i32* %36, align 4, !alias.scope !3
  %123 = insertelement <4 x i32> undef, i32 %122, i32 0
  %124 = shufflevector <4 x i32> %123, <4 x i32> undef, <4 x i32> zeroinitializer
  %125 = insertelement <4 x i32> undef, i32 %122, i32 0
  %126 = shufflevector <4 x i32> %125, <4 x i32> undef, <4 x i32> zeroinitializer
  %127 = bitcast i32* %121 to <4 x i32>*
  store <4 x i32> %124, <4 x i32>* %127, align 4, !alias.scope !6, !noalias !3
  %128 = getelementptr i32, i32* %121, i64 4
  %129 = bitcast i32* %128 to <4 x i32>*
  store <4 x i32> %126, <4 x i32>* %129, align 4, !alias.scope !6, !noalias !3
  br label %130

130:                                              ; preds = %117, %120
  %131 = icmp eq i64 %69, %83
  br i1 %131, label %173, label %132

132:                                              ; preds = %130, %71, %65
  %133 = phi i32* [ %63, %71 ], [ %63, %65 ], [ %84, %130 ]
  %134 = ptrtoint i32* %133 to i64
  %135 = shl nsw i64 %35, 2
  %136 = add i64 %135, -4
  %137 = sub i64 %136, %134
  %138 = getelementptr i8, i8* %51, i64 %137
  %139 = ptrtoint i8* %138 to i64
  %140 = lshr i64 %139, 2
  %141 = add nuw nsw i64 %140, 1
  %142 = and i64 %141, 7
  %143 = icmp eq i64 %142, 0
  br i1 %143, label %151, label %144

144:                                              ; preds = %132, %144
  %145 = phi i32* [ %148, %144 ], [ %133, %132 ]
  %146 = phi i64 [ %149, %144 ], [ %142, %132 ]
  %147 = load i32, i32* %36, align 4
  store i32 %147, i32* %145, align 4
  %148 = getelementptr inbounds i32, i32* %145, i64 1
  %149 = add i64 %146, -1
  %150 = icmp eq i64 %149, 0
  br i1 %150, label %151, label %144, !llvm.loop !10

151:                                              ; preds = %144, %132
  %152 = phi i32* [ %133, %132 ], [ %148, %144 ]
  %153 = icmp ult i8* %138, inttoptr (i64 28 to i8*)
  br i1 %153, label %173, label %154

154:                                              ; preds = %151, %154
  %155 = phi i32* [ %171, %154 ], [ %152, %151 ]
  %156 = load i32, i32* %36, align 4
  store i32 %156, i32* %155, align 4
  %157 = getelementptr inbounds i32, i32* %155, i64 1
  %158 = load i32, i32* %36, align 4
  store i32 %158, i32* %157, align 4
  %159 = getelementptr inbounds i32, i32* %155, i64 2
  %160 = load i32, i32* %36, align 4
  store i32 %160, i32* %159, align 4
  %161 = getelementptr inbounds i32, i32* %155, i64 3
  %162 = load i32, i32* %36, align 4
  store i32 %162, i32* %161, align 4
  %163 = getelementptr inbounds i32, i32* %155, i64 4
  %164 = load i32, i32* %36, align 4
  store i32 %164, i32* %163, align 4
  %165 = getelementptr inbounds i32, i32* %155, i64 5
  %166 = load i32, i32* %36, align 4
  store i32 %166, i32* %165, align 4
  %167 = getelementptr inbounds i32, i32* %155, i64 6
  %168 = load i32, i32* %36, align 4
  store i32 %168, i32* %167, align 4
  %169 = getelementptr inbounds i32, i32* %155, i64 7
  %170 = load i32, i32* %36, align 4
  store i32 %170, i32* %169, align 4
  %171 = getelementptr inbounds i32, i32* %155, i64 8
  %172 = icmp eq i32* %171, %56
  br i1 %172, label %173, label %154, !llvm.loop !12

173:                                              ; preds = %151, %154, %130, %61
  %174 = load i32, i32* %36, align 8
  br label %175

175:                                              ; preds = %173, %49
  %176 = phi i32 [ %174, %173 ], [ %40, %49 ]
  %177 = bitcast i32** %53 to i64*
  %178 = ptrtoint i32* %56 to i64
  store i64 %178, i64* %177, align 8
  br label %179

179:                                              ; preds = %3, %175
  %180 = phi i32 [ %40, %3 ], [ %176, %175 ]
  %181 = getelementptr inbounds %"class.webrtc::AecState", %"class.webrtc::AecState"* %0, i64 0, i32 7, i32 3
  store i32 %180, i32* %181, align 8
  %182 = getelementptr inbounds %"class.webrtc::AecState", %"class.webrtc::AecState"* %0, i64 0, i32 7, i32 4, i32 0, i32 0, i32 0, i32 0
  store i8 0, i8* %182, align 8
  %183 = getelementptr inbounds %"class.webrtc::AecState", %"class.webrtc::AecState"* %0, i64 0, i32 7, i32 4, i32 0, i32 0, i32 0, i32 1
  %184 = bitcast %union.anon* %183 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %184, i8 0, i64 32, i1 false) #15
  %185 = tail call %"class.webrtc::TransparentMode"* @_ZN6webrtc15TransparentMode6CreateERKNS_20EchoCanceller3ConfigE(%"struct.webrtc::EchoCanceller3Config"* dereferenceable(560) %11) #15
  %186 = getelementptr inbounds %"class.webrtc::AecState", %"class.webrtc::AecState"* %0, i64 0, i32 8, i32 0, i32 0, i32 0
  store %"class.webrtc::TransparentMode"* %185, %"class.webrtc::TransparentMode"** %186, align 8
  %187 = load i64, i64* %12, align 8
  %188 = getelementptr inbounds %"class.webrtc::AecState", %"class.webrtc::AecState"* %0, i64 0, i32 9, i32 0
  %189 = getelementptr inbounds %"class.webrtc::AecState", %"class.webrtc::AecState"* %0, i64 0, i32 1, i32 2, i32 9
  %190 = load i8, i8* %189, align 2, !range !2
  store i8 %190, i8* %188, align 8
  %191 = getelementptr inbounds %"class.webrtc::AecState", %"class.webrtc::AecState"* %0, i64 0, i32 9, i32 1
  store i8 0, i8* %191, align 1
  %192 = getelementptr inbounds %"class.webrtc::AecState", %"class.webrtc::AecState"* %0, i64 0, i32 9, i32 2
  %193 = getelementptr inbounds %"class.webrtc::AecState", %"class.webrtc::AecState"* %0, i64 0, i32 9, i32 5
  %194 = bitcast i64* %192 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %194, i8 0, i64 17, i1 false) #15
  call void @llvm.lifetime.start.p0i8(i64 1, i8* nonnull %4) #15
  store i8 0, i8* %4, align 1
  call void @_ZNSt3__16vectorIbNS_9allocatorIbEEEC2EmRKb(%"class.std::__1::vector.10"* %193, i64 %187, i8* nonnull dereferenceable(1) %4) #15
  call void @llvm.lifetime.end.p0i8(i64 1, i8* nonnull %4) #15
  %195 = getelementptr inbounds %"class.webrtc::AecState", %"class.webrtc::AecState"* %0, i64 0, i32 10, i32 0
  store i8 0, i8* %195, align 1
  %196 = getelementptr inbounds %"class.webrtc::AecState", %"class.webrtc::AecState"* %0, i64 0, i32 11
  call void @_ZN6webrtc12ErlEstimatorC1Em(%"class.webrtc::ErlEstimator"* %196, i64 500) #15
  %197 = getelementptr inbounds %"class.webrtc::AecState", %"class.webrtc::AecState"* %0, i64 0, i32 12
  %198 = load i64, i64* %12, align 8
  call void @_ZN6webrtc13ErleEstimatorC1EmRKNS_20EchoCanceller3ConfigEm(%"class.webrtc::ErleEstimator"* %197, i64 500, %"struct.webrtc::EchoCanceller3Config"* dereferenceable(560) %11, i64 %198) #15
  %199 = getelementptr inbounds %"class.webrtc::AecState", %"class.webrtc::AecState"* %0, i64 0, i32 13
  %200 = getelementptr inbounds %"class.webrtc::AecState", %"class.webrtc::AecState"* %0, i64 0, i32 17
  %201 = bitcast i64* %199 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %201, i8 0, i64 17, i1 false)
  %202 = load i64, i64* %12, align 8
  call void @_ZN6webrtc14FilterAnalyzerC1ERKNS_20EchoCanceller3ConfigEm(%"class.webrtc::FilterAnalyzer"* %200, %"struct.webrtc::EchoCanceller3Config"* dereferenceable(560) %11, i64 %202) #15
  %203 = getelementptr inbounds %"class.webrtc::AecState", %"class.webrtc::AecState"* %0, i64 0, i32 18
  %204 = getelementptr inbounds %"class.webrtc::AecState", %"class.webrtc::AecState"* %0, i64 0, i32 1, i32 5, i32 7
  %205 = load i8, i8* %204, align 1, !range !2
  %206 = icmp ne i8 %205, 0
  call void @_ZN6webrtc14EchoAudibilityC1Eb(%"class.webrtc::EchoAudibility"* %203, i1 zeroext %206) #15
  %207 = getelementptr inbounds %"class.webrtc::AecState", %"class.webrtc::AecState"* %0, i64 0, i32 19
  %208 = load i64, i64* %12, align 8
  call void @_ZN6webrtc20ReverbModelEstimatorC1ERKNS_20EchoCanceller3ConfigEm(%"class.webrtc::ReverbModelEstimator"* %207, %"struct.webrtc::EchoCanceller3Config"* dereferenceable(560) %11, i64 %208) #15
  %209 = getelementptr inbounds %"class.webrtc::AecState", %"class.webrtc::AecState"* %0, i64 0, i32 20
  call void @_ZN6webrtc11ReverbModelC1Ev(%"class.webrtc::ReverbModel"* %209) #15
  %210 = getelementptr inbounds %"class.webrtc::AecState", %"class.webrtc::AecState"* %0, i64 0, i32 21
  %211 = load i64, i64* %12, align 8
  call void @_ZN6webrtc24SubtractorOutputAnalyzerC1Em(%"class.webrtc::SubtractorOutputAnalyzer"* %210, i64 %211) #15
  ret void
}

; Function Attrs: nobuiltin nofree
declare noalias nonnull i8* @_Znwm(i64) local_unnamed_addr #3

declare void @_ZN6webrtc13ApmDataDumperC1Ei(%"class.webrtc::ApmDataDumper"*, i32) unnamed_addr #4

declare void @_ZN6webrtc20EchoCanceller3ConfigC1ERKS0_(%"struct.webrtc::EchoCanceller3Config"*, %"struct.webrtc::EchoCanceller3Config"* dereferenceable(560)) unnamed_addr #4

declare %"class.webrtc::TransparentMode"* @_ZN6webrtc15TransparentMode6CreateERKNS_20EchoCanceller3ConfigE(%"struct.webrtc::EchoCanceller3Config"* dereferenceable(560)) local_unnamed_addr #4

declare void @_ZN6webrtc12ErlEstimatorC1Em(%"class.webrtc::ErlEstimator"*, i64) unnamed_addr #4

declare void @_ZN6webrtc13ErleEstimatorC1EmRKNS_20EchoCanceller3ConfigEm(%"class.webrtc::ErleEstimator"*, i64, %"struct.webrtc::EchoCanceller3Config"* dereferenceable(560), i64) unnamed_addr #4

declare void @_ZN6webrtc14FilterAnalyzerC1ERKNS_20EchoCanceller3ConfigEm(%"class.webrtc::FilterAnalyzer"*, %"struct.webrtc::EchoCanceller3Config"* dereferenceable(560), i64) unnamed_addr #4

declare void @_ZN6webrtc14EchoAudibilityC1Eb(%"class.webrtc::EchoAudibility"*, i1 zeroext) unnamed_addr #4

declare void @_ZN6webrtc20ReverbModelEstimatorC1ERKNS_20EchoCanceller3ConfigEm(%"class.webrtc::ReverbModelEstimator"*, %"struct.webrtc::EchoCanceller3Config"* dereferenceable(560), i64) unnamed_addr #4

declare void @_ZN6webrtc11ReverbModelC1Ev(%"class.webrtc::ReverbModel"*) unnamed_addr #4

declare void @_ZN6webrtc24SubtractorOutputAnalyzerC1Em(%"class.webrtc::SubtractorOutputAnalyzer"*, i64) unnamed_addr #4

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN6webrtc8AecStateD2Ev(%"class.webrtc::AecState"*) unnamed_addr #2 align 2 {
  %2 = getelementptr inbounds %"class.webrtc::AecState", %"class.webrtc::AecState"* %0, i64 0, i32 21, i32 0, i32 0
  %3 = load i64*, i64** %2, align 8
  %4 = icmp eq i64* %3, null
  br i1 %4, label %7, label %5

5:                                                ; preds = %1
  %6 = bitcast i64* %3 to i8*
  tail call void @_ZdlPv(i8* %6) #14
  br label %7

7:                                                ; preds = %1, %5
  %8 = getelementptr inbounds %"class.webrtc::AecState", %"class.webrtc::AecState"* %0, i64 0, i32 20
  tail call void @_ZN6webrtc11ReverbModelD1Ev(%"class.webrtc::ReverbModel"* %8) #15
  %9 = getelementptr inbounds %"class.webrtc::AecState", %"class.webrtc::AecState"* %0, i64 0, i32 19
  tail call void @_ZN6webrtc20ReverbModelEstimatorD1Ev(%"class.webrtc::ReverbModelEstimator"* %9) #15
  %10 = getelementptr inbounds %"class.webrtc::AecState", %"class.webrtc::AecState"* %0, i64 0, i32 18
  tail call void @_ZN6webrtc14EchoAudibilityD1Ev(%"class.webrtc::EchoAudibility"* %10) #15
  %11 = getelementptr inbounds %"class.webrtc::AecState", %"class.webrtc::AecState"* %0, i64 0, i32 17
  tail call void @_ZN6webrtc14FilterAnalyzerD1Ev(%"class.webrtc::FilterAnalyzer"* %11) #15
  %12 = getelementptr inbounds %"class.webrtc::AecState", %"class.webrtc::AecState"* %0, i64 0, i32 12
  tail call void @_ZN6webrtc13ErleEstimatorD1Ev(%"class.webrtc::ErleEstimator"* %12) #15
  %13 = getelementptr inbounds %"class.webrtc::AecState", %"class.webrtc::AecState"* %0, i64 0, i32 11
  tail call void @_ZN6webrtc12ErlEstimatorD1Ev(%"class.webrtc::ErlEstimator"* %13) #15
  %14 = getelementptr inbounds %"class.webrtc::AecState", %"class.webrtc::AecState"* %0, i64 0, i32 9, i32 5, i32 0
  %15 = load i64*, i64** %14, align 8
  %16 = icmp eq i64* %15, null
  br i1 %16, label %19, label %17

17:                                               ; preds = %7
  %18 = bitcast i64* %15 to i8*
  tail call void @_ZdlPv(i8* %18) #14
  br label %19

19:                                               ; preds = %7, %17
  %20 = getelementptr inbounds %"class.webrtc::AecState", %"class.webrtc::AecState"* %0, i64 0, i32 8, i32 0, i32 0, i32 0
  %21 = load %"class.webrtc::TransparentMode"*, %"class.webrtc::TransparentMode"** %20, align 8
  store %"class.webrtc::TransparentMode"* null, %"class.webrtc::TransparentMode"** %20, align 8
  %22 = icmp eq %"class.webrtc::TransparentMode"* %21, null
  br i1 %22, label %28, label %23

23:                                               ; preds = %19
  %24 = bitcast %"class.webrtc::TransparentMode"* %21 to void (%"class.webrtc::TransparentMode"*)***
  %25 = load void (%"class.webrtc::TransparentMode"*)**, void (%"class.webrtc::TransparentMode"*)*** %24, align 8
  %26 = getelementptr inbounds void (%"class.webrtc::TransparentMode"*)*, void (%"class.webrtc::TransparentMode"*)** %25, i64 1
  %27 = load void (%"class.webrtc::TransparentMode"*)*, void (%"class.webrtc::TransparentMode"*)** %26, align 8
  tail call void %27(%"class.webrtc::TransparentMode"* nonnull %21) #15
  br label %28

28:                                               ; preds = %19, %23
  %29 = getelementptr inbounds %"class.webrtc::AecState", %"class.webrtc::AecState"* %0, i64 0, i32 7, i32 2, i32 0, i32 0
  %30 = load i32*, i32** %29, align 8
  %31 = icmp eq i32* %30, null
  br i1 %31, label %37, label %32

32:                                               ; preds = %28
  %33 = ptrtoint i32* %30 to i64
  %34 = getelementptr inbounds %"class.webrtc::AecState", %"class.webrtc::AecState"* %0, i64 0, i32 7, i32 2, i32 0, i32 1
  %35 = bitcast i32** %34 to i64*
  store i64 %33, i64* %35, align 8
  %36 = bitcast i32* %30 to i8*
  tail call void @_ZdlPv(i8* %36) #14
  br label %37

37:                                               ; preds = %28, %32
  %38 = getelementptr inbounds %"class.webrtc::AecState", %"class.webrtc::AecState"* %0, i64 0, i32 0, i32 0, i32 0, i32 0
  %39 = load %"class.webrtc::ApmDataDumper"*, %"class.webrtc::ApmDataDumper"** %38, align 8
  store %"class.webrtc::ApmDataDumper"* null, %"class.webrtc::ApmDataDumper"** %38, align 8
  %40 = icmp eq %"class.webrtc::ApmDataDumper"* %39, null
  br i1 %40, label %43, label %41

41:                                               ; preds = %37
  tail call void @_ZN6webrtc13ApmDataDumperD1Ev(%"class.webrtc::ApmDataDumper"* nonnull %39) #15
  %42 = getelementptr inbounds %"class.webrtc::ApmDataDumper", %"class.webrtc::ApmDataDumper"* %39, i64 0, i32 0
  tail call void @_ZdlPv(i8* %42) #14
  br label %43

43:                                               ; preds = %37, %41
  ret void
}

; Function Attrs: nounwind
declare void @_ZN6webrtc11ReverbModelD1Ev(%"class.webrtc::ReverbModel"*) unnamed_addr #5

; Function Attrs: nounwind
declare void @_ZN6webrtc20ReverbModelEstimatorD1Ev(%"class.webrtc::ReverbModelEstimator"*) unnamed_addr #5

; Function Attrs: nounwind
declare void @_ZN6webrtc14EchoAudibilityD1Ev(%"class.webrtc::EchoAudibility"*) unnamed_addr #5

; Function Attrs: nounwind
declare void @_ZN6webrtc14FilterAnalyzerD1Ev(%"class.webrtc::FilterAnalyzer"*) unnamed_addr #5

; Function Attrs: nounwind
declare void @_ZN6webrtc13ErleEstimatorD1Ev(%"class.webrtc::ErleEstimator"*) unnamed_addr #5

; Function Attrs: nounwind
declare void @_ZN6webrtc12ErlEstimatorD1Ev(%"class.webrtc::ErlEstimator"*) unnamed_addr #5

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN6webrtc8AecState20HandleEchoPathChangeERKNS_19EchoPathVariabilityE(%"class.webrtc::AecState"*, %"struct.webrtc::EchoPathVariability"* nocapture readonly dereferenceable(12)) local_unnamed_addr #2 align 2 {
  %3 = getelementptr inbounds %"class.webrtc::AecState", %"class.webrtc::AecState"* %0, i64 0, i32 4
  %4 = load i8, i8* %3, align 1, !range !2
  %5 = icmp eq i8 %4, 0
  br i1 %5, label %62, label %6

6:                                                ; preds = %2
  %7 = getelementptr inbounds %"struct.webrtc::EchoPathVariability", %"struct.webrtc::EchoPathVariability"* %1, i64 0, i32 2
  %8 = load i32, i32* %7, align 4
  %9 = icmp eq i32 %8, 0
  br i1 %9, label %62, label %10

10:                                               ; preds = %6
  %11 = getelementptr inbounds %"class.webrtc::AecState", %"class.webrtc::AecState"* %0, i64 0, i32 17
  tail call void @_ZN6webrtc14FilterAnalyzer5ResetEv(%"class.webrtc::FilterAnalyzer"* %11) #15
  %12 = getelementptr inbounds %"class.webrtc::AecState", %"class.webrtc::AecState"* %0, i64 0, i32 13
  %13 = getelementptr inbounds %"class.webrtc::AecState", %"class.webrtc::AecState"* %0, i64 0, i32 3
  %14 = bitcast i64* %12 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %14, i8 0, i64 17, i1 false) #15
  %15 = load i8, i8* %13, align 8, !range !2
  %16 = icmp eq i8 %15, 0
  br i1 %16, label %17, label %20

17:                                               ; preds = %10
  %18 = getelementptr inbounds %"class.webrtc::AecState", %"class.webrtc::AecState"* %0, i64 0, i32 6, i32 3
  store i8 1, i8* %18, align 1
  %19 = getelementptr inbounds %"class.webrtc::AecState", %"class.webrtc::AecState"* %0, i64 0, i32 6, i32 4
  store i64 0, i64* %19, align 8
  br label %20

20:                                               ; preds = %17, %10
  %21 = getelementptr inbounds %"class.webrtc::AecState", %"class.webrtc::AecState"* %0, i64 0, i32 8, i32 0, i32 0, i32 0
  %22 = load %"class.webrtc::TransparentMode"*, %"class.webrtc::TransparentMode"** %21, align 8
  %23 = icmp eq %"class.webrtc::TransparentMode"* %22, null
  br i1 %23, label %29, label %24

24:                                               ; preds = %20
  %25 = bitcast %"class.webrtc::TransparentMode"* %22 to void (%"class.webrtc::TransparentMode"*)***
  %26 = load void (%"class.webrtc::TransparentMode"*)**, void (%"class.webrtc::TransparentMode"*)*** %25, align 8
  %27 = getelementptr inbounds void (%"class.webrtc::TransparentMode"*)*, void (%"class.webrtc::TransparentMode"*)** %26, i64 3
  %28 = load void (%"class.webrtc::TransparentMode"*)*, void (%"class.webrtc::TransparentMode"*)** %27, align 8
  tail call void %28(%"class.webrtc::TransparentMode"* nonnull %22) #15
  br label %29

29:                                               ; preds = %24, %20
  %30 = getelementptr inbounds %"class.webrtc::AecState", %"class.webrtc::AecState"* %0, i64 0, i32 12
  tail call void @_ZN6webrtc13ErleEstimator5ResetEb(%"class.webrtc::ErleEstimator"* %30, i1 zeroext true) #15
  %31 = getelementptr inbounds %"class.webrtc::AecState", %"class.webrtc::AecState"* %0, i64 0, i32 11
  tail call void @_ZN6webrtc12ErlEstimator5ResetEv(%"class.webrtc::ErlEstimator"* %31) #15
  %32 = getelementptr inbounds %"class.webrtc::AecState", %"class.webrtc::AecState"* %0, i64 0, i32 9, i32 5
  %33 = bitcast %"class.std::__1::vector.10"* %32 to i64*
  %34 = load i64, i64* %33, align 8, !noalias !13
  %35 = getelementptr inbounds %"class.webrtc::AecState", %"class.webrtc::AecState"* %0, i64 0, i32 9, i32 5, i32 1
  %36 = load i64, i64* %35, align 8, !noalias !14
  %37 = inttoptr i64 %34 to i64*
  %38 = lshr i64 %36, 6
  %39 = getelementptr inbounds i64, i64* %37, i64 %38
  %40 = and i64 %36, 63
  %41 = ptrtoint i64* %39 to i64
  %42 = sub i64 %41, %34
  %43 = shl i64 %42, 3
  %44 = add i64 %43, %40
  %45 = icmp eq i64 %44, 0
  br i1 %45, label %59, label %46

46:                                               ; preds = %29
  %47 = inttoptr i64 %34 to i8*
  %48 = lshr i64 %44, 6
  %49 = shl nuw nsw i64 %48, 3
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %47, i8 0, i64 %49, i1 false) #15
  %50 = and i64 %44, 63
  %51 = icmp eq i64 %50, 0
  br i1 %51, label %59, label %52

52:                                               ; preds = %46
  %53 = getelementptr inbounds i64, i64* %37, i64 %48
  %54 = sub nuw nsw i64 64, %50
  %55 = lshr i64 -1, %54
  %56 = xor i64 %55, -1
  %57 = load i64, i64* %53, align 8
  %58 = and i64 %57, %56
  store i64 %58, i64* %53, align 8
  br label %59

59:                                               ; preds = %29, %46, %52
  %60 = getelementptr inbounds %"class.webrtc::AecState", %"class.webrtc::AecState"* %0, i64 0, i32 9, i32 1
  store i8 0, i8* %60, align 1
  %61 = getelementptr inbounds %"class.webrtc::AecState", %"class.webrtc::AecState"* %0, i64 0, i32 9, i32 2
  store i64 0, i64* %61, align 8
  br label %68

62:                                               ; preds = %6, %2
  %63 = getelementptr inbounds %"struct.webrtc::EchoPathVariability", %"struct.webrtc::EchoPathVariability"* %1, i64 0, i32 0
  %64 = load i8, i8* %63, align 4, !range !2
  %65 = icmp eq i8 %64, 0
  br i1 %65, label %68, label %66

66:                                               ; preds = %62
  %67 = getelementptr inbounds %"class.webrtc::AecState", %"class.webrtc::AecState"* %0, i64 0, i32 12
  tail call void @_ZN6webrtc13ErleEstimator5ResetEb(%"class.webrtc::ErleEstimator"* %67, i1 zeroext false) #15
  br label %68

68:                                               ; preds = %62, %66, %59
  %69 = getelementptr inbounds %"class.webrtc::AecState", %"class.webrtc::AecState"* %0, i64 0, i32 5
  %70 = load i8, i8* %69, align 2, !range !2
  %71 = icmp eq i8 %70, 0
  br i1 %71, label %74, label %72

72:                                               ; preds = %68
  %73 = getelementptr inbounds %"class.webrtc::AecState", %"class.webrtc::AecState"* %0, i64 0, i32 21
  tail call void @_ZN6webrtc24SubtractorOutputAnalyzer20HandleEchoPathChangeEv(%"class.webrtc::SubtractorOutputAnalyzer"* %73) #15
  br label %74

74:                                               ; preds = %68, %72
  ret void
}

declare void @_ZN6webrtc13ErleEstimator5ResetEb(%"class.webrtc::ErleEstimator"*, i1 zeroext) local_unnamed_addr #4

declare void @_ZN6webrtc24SubtractorOutputAnalyzer20HandleEchoPathChangeEv(%"class.webrtc::SubtractorOutputAnalyzer"*) local_unnamed_addr #4

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN6webrtc8AecState6UpdateERKN4absl8optionalINS_13DelayEstimateEEEN3rtc9ArrayViewIKNSt3__16vectorINS9_5arrayIfLm65EEENS9_9allocatorISC_EEEELln4711EEENS8_IKNSA_IfNSD_IfEEEELln4711EEERKNS_12RenderBufferENS8_IKSC_Lln4711EEESQ_NS8_IKNS_16SubtractorOutputELln4711EEE(%"class.webrtc::AecState"*, %"class.absl::optional"* nocapture readonly dereferenceable(40), %"class.std::__1::vector.43"*, i64, %"class.std::__1::vector.17"*, i64, %"class.webrtc::RenderBuffer"* dereferenceable(32), %"class.rtc::ArrayView.179"* nocapture readonly byval(%"class.rtc::ArrayView.179") align 8, %"class.rtc::ArrayView.179"* nocapture readonly byval(%"class.rtc::ArrayView.179") align 8, %"class.rtc::ArrayView.181"* nocapture readonly byval(%"class.rtc::ArrayView.181") align 8) local_unnamed_addr #2 align 2 {
  %11 = alloca %"struct.std::__1::array", align 16
  %12 = bitcast %"struct.std::__1::array"* %11 to i8*
  %13 = alloca i8, align 1
  %14 = alloca i8, align 1
  %15 = alloca i8, align 1
  %16 = alloca i8, align 1
  %17 = alloca float, align 4
  %18 = alloca %"struct.std::__1::array", align 16
  %19 = bitcast %"struct.std::__1::array"* %18 to i8*
  %20 = alloca %"class.rtc::ArrayView.179", align 8
  %21 = alloca %"class.rtc::ArrayView.179", align 8
  %22 = alloca %"class.rtc::ArrayView.192", align 8
  %23 = alloca %"class.rtc::ArrayView.184", align 8
  call void @llvm.lifetime.start.p0i8(i64 1, i8* nonnull %13) #15
  store i8 -86, i8* %13, align 1
  call void @llvm.lifetime.start.p0i8(i64 1, i8* nonnull %14) #15
  store i8 -86, i8* %14, align 1
  call void @llvm.lifetime.start.p0i8(i64 1, i8* nonnull %15) #15
  store i8 -86, i8* %15, align 1
  %24 = getelementptr inbounds %"class.webrtc::AecState", %"class.webrtc::AecState"* %0, i64 0, i32 21
  %25 = getelementptr inbounds %"class.rtc::ArrayView.181", %"class.rtc::ArrayView.181"* %9, i64 0, i32 0, i32 0
  %26 = load %"struct.webrtc::SubtractorOutput"*, %"struct.webrtc::SubtractorOutput"** %25, align 8
  %27 = getelementptr inbounds %"class.rtc::ArrayView.181", %"class.rtc::ArrayView.181"* %9, i64 0, i32 0, i32 1
  %28 = load i64, i64* %27, align 8
  %29 = icmp eq i64 %28, 0
  %30 = select i1 %29, %"struct.webrtc::SubtractorOutput"* null, %"struct.webrtc::SubtractorOutput"* %26
  call void @_ZN6webrtc24SubtractorOutputAnalyzer6UpdateEN3rtc9ArrayViewIKNS_16SubtractorOutputELln4711EEEPbS6_S6_(%"class.webrtc::SubtractorOutputAnalyzer"* %24, %"struct.webrtc::SubtractorOutput"* %30, i64 %28, i8* nonnull %13, i8* nonnull %14, i8* nonnull %15) #15
  call void @llvm.lifetime.start.p0i8(i64 1, i8* nonnull %16) #15
  store i8 -86, i8* %16, align 1
  %31 = bitcast float* %17 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %31) #15
  store float 0xFFFFFFFFE0000000, float* %17, align 4
  %32 = getelementptr inbounds %"class.webrtc::AecState", %"class.webrtc::AecState"* %0, i64 0, i32 17
  %33 = icmp eq i64 %5, 0
  %34 = select i1 %33, %"class.std::__1::vector.17"* null, %"class.std::__1::vector.17"* %4
  call void @_ZN6webrtc14FilterAnalyzer6UpdateEN3rtc9ArrayViewIKNSt3__16vectorIfNS3_9allocatorIfEEEELln4711EEERKNS_12RenderBufferEPbPf(%"class.webrtc::FilterAnalyzer"* %32, %"class.std::__1::vector.17"* %34, i64 %5, %"class.webrtc::RenderBuffer"* dereferenceable(32) %6, i8* nonnull %16, float* nonnull %17) #15
  %35 = getelementptr inbounds %"class.webrtc::AecState", %"class.webrtc::AecState"* %0, i64 0, i32 1, i32 2, i32 9
  %36 = load i8, i8* %35, align 2, !range !2
  %37 = icmp eq i8 %36, 0
  br i1 %37, label %38, label %41

38:                                               ; preds = %10
  %39 = getelementptr inbounds %"class.webrtc::AecState", %"class.webrtc::AecState"* %0, i64 0, i32 7, i32 3
  %40 = load i32, i32* %39, align 8
  br label %256

41:                                               ; preds = %10
  %42 = getelementptr inbounds %"class.webrtc::AecState", %"class.webrtc::AecState"* %0, i64 0, i32 17, i32 8, i32 0, i32 0
  %43 = load i32*, i32** %42, align 8
  %44 = getelementptr inbounds %"class.webrtc::AecState", %"class.webrtc::AecState"* %0, i64 0, i32 17, i32 8, i32 0, i32 1
  %45 = bitcast i32** %44 to i64*
  %46 = load i64, i64* %45, align 8
  %47 = ptrtoint i32* %43 to i64
  %48 = sub i64 %46, %47
  %49 = getelementptr inbounds %"class.webrtc::AecState", %"class.webrtc::AecState"* %0, i64 0, i32 13
  %50 = load i64, i64* %49, align 8
  %51 = getelementptr inbounds %"class.absl::optional", %"class.absl::optional"* %1, i64 0, i32 0, i32 0, i32 0, i32 0
  %52 = load i8, i8* %51, align 8, !range !2
  %53 = icmp eq i8 %52, 0
  br i1 %53, label %66, label %54

54:                                               ; preds = %41
  %55 = getelementptr inbounds %"class.webrtc::AecState", %"class.webrtc::AecState"* %0, i64 0, i32 7, i32 4, i32 0, i32 0, i32 0, i32 0
  %56 = load i8, i8* %55, align 8, !range !2
  %57 = icmp eq i8 %56, 0
  br i1 %57, label %64, label %58

58:                                               ; preds = %54
  %59 = getelementptr inbounds %"class.webrtc::AecState", %"class.webrtc::AecState"* %0, i64 0, i32 7, i32 4, i32 0, i32 0, i32 0, i32 1, i32 0, i32 1
  %60 = load i64, i64* %59, align 8
  %61 = getelementptr inbounds %"class.absl::optional", %"class.absl::optional"* %1, i64 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 1
  %62 = load i64, i64* %61, align 8
  %63 = icmp eq i64 %60, %62
  br i1 %63, label %66, label %64

64:                                               ; preds = %58, %54
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %55, i8* align 8 %51, i64 40, i1 false) #15
  %65 = getelementptr inbounds %"class.webrtc::AecState", %"class.webrtc::AecState"* %0, i64 0, i32 7, i32 1
  store i8 1, i8* %65, align 4
  br label %66

66:                                               ; preds = %64, %58, %41
  %67 = icmp ult i64 %50, 500
  br i1 %67, label %68, label %174

68:                                               ; preds = %66
  %69 = getelementptr inbounds %"class.webrtc::AecState", %"class.webrtc::AecState"* %0, i64 0, i32 7, i32 4, i32 0, i32 0, i32 0, i32 0
  %70 = load i8, i8* %69, align 8, !range !2
  %71 = icmp eq i8 %70, 0
  br i1 %71, label %174, label %72

72:                                               ; preds = %68
  %73 = getelementptr inbounds %"class.webrtc::AecState", %"class.webrtc::AecState"* %0, i64 0, i32 7, i32 0
  %74 = load i32, i32* %73, align 8
  %75 = getelementptr inbounds %"class.webrtc::AecState", %"class.webrtc::AecState"* %0, i64 0, i32 7, i32 2, i32 0, i32 0
  %76 = load i32*, i32** %75, align 8
  %77 = getelementptr inbounds %"class.webrtc::AecState", %"class.webrtc::AecState"* %0, i64 0, i32 7, i32 2, i32 0, i32 1
  %78 = bitcast i32** %77 to i64*
  %79 = load i64, i64* %78, align 8
  %80 = ptrtoint i32* %76 to i64
  %81 = sub i64 %79, %80
  %82 = icmp sgt i64 %81, 0
  br i1 %82, label %83, label %181

83:                                               ; preds = %72
  %84 = lshr exact i64 %81, 2
  %85 = lshr i64 %81, 2
  %86 = icmp eq i64 %85, 0
  %87 = zext i1 %86 to i64
  %88 = add nuw nsw i64 %85, %87
  %89 = icmp ult i64 %88, 8
  br i1 %89, label %165, label %90

90:                                               ; preds = %83
  %91 = and i64 %88, 9223372036854775800
  %92 = sub nsw i64 %84, %91
  %93 = getelementptr i32, i32* %76, i64 %91
  %94 = insertelement <4 x i32> undef, i32 %74, i32 0
  %95 = shufflevector <4 x i32> %94, <4 x i32> undef, <4 x i32> zeroinitializer
  %96 = insertelement <4 x i32> undef, i32 %74, i32 0
  %97 = shufflevector <4 x i32> %96, <4 x i32> undef, <4 x i32> zeroinitializer
  %98 = add nsw i64 %91, -8
  %99 = lshr exact i64 %98, 3
  %100 = add nuw nsw i64 %99, 1
  %101 = and i64 %100, 7
  %102 = icmp ult i64 %98, 56
  br i1 %102, label %150, label %103

103:                                              ; preds = %90
  %104 = sub nsw i64 %100, %101
  br label %105

105:                                              ; preds = %105, %103
  %106 = phi i64 [ 0, %103 ], [ %147, %105 ]
  %107 = phi i64 [ %104, %103 ], [ %148, %105 ]
  %108 = getelementptr i32, i32* %76, i64 %106
  %109 = bitcast i32* %108 to <4 x i32>*
  store <4 x i32> %95, <4 x i32>* %109, align 4
  %110 = getelementptr i32, i32* %108, i64 4
  %111 = bitcast i32* %110 to <4 x i32>*
  store <4 x i32> %97, <4 x i32>* %111, align 4
  %112 = or i64 %106, 8
  %113 = getelementptr i32, i32* %76, i64 %112
  %114 = bitcast i32* %113 to <4 x i32>*
  store <4 x i32> %95, <4 x i32>* %114, align 4
  %115 = getelementptr i32, i32* %113, i64 4
  %116 = bitcast i32* %115 to <4 x i32>*
  store <4 x i32> %97, <4 x i32>* %116, align 4
  %117 = or i64 %106, 16
  %118 = getelementptr i32, i32* %76, i64 %117
  %119 = bitcast i32* %118 to <4 x i32>*
  store <4 x i32> %95, <4 x i32>* %119, align 4
  %120 = getelementptr i32, i32* %118, i64 4
  %121 = bitcast i32* %120 to <4 x i32>*
  store <4 x i32> %97, <4 x i32>* %121, align 4
  %122 = or i64 %106, 24
  %123 = getelementptr i32, i32* %76, i64 %122
  %124 = bitcast i32* %123 to <4 x i32>*
  store <4 x i32> %95, <4 x i32>* %124, align 4
  %125 = getelementptr i32, i32* %123, i64 4
  %126 = bitcast i32* %125 to <4 x i32>*
  store <4 x i32> %97, <4 x i32>* %126, align 4
  %127 = or i64 %106, 32
  %128 = getelementptr i32, i32* %76, i64 %127
  %129 = bitcast i32* %128 to <4 x i32>*
  store <4 x i32> %95, <4 x i32>* %129, align 4
  %130 = getelementptr i32, i32* %128, i64 4
  %131 = bitcast i32* %130 to <4 x i32>*
  store <4 x i32> %97, <4 x i32>* %131, align 4
  %132 = or i64 %106, 40
  %133 = getelementptr i32, i32* %76, i64 %132
  %134 = bitcast i32* %133 to <4 x i32>*
  store <4 x i32> %95, <4 x i32>* %134, align 4
  %135 = getelementptr i32, i32* %133, i64 4
  %136 = bitcast i32* %135 to <4 x i32>*
  store <4 x i32> %97, <4 x i32>* %136, align 4
  %137 = or i64 %106, 48
  %138 = getelementptr i32, i32* %76, i64 %137
  %139 = bitcast i32* %138 to <4 x i32>*
  store <4 x i32> %95, <4 x i32>* %139, align 4
  %140 = getelementptr i32, i32* %138, i64 4
  %141 = bitcast i32* %140 to <4 x i32>*
  store <4 x i32> %97, <4 x i32>* %141, align 4
  %142 = or i64 %106, 56
  %143 = getelementptr i32, i32* %76, i64 %142
  %144 = bitcast i32* %143 to <4 x i32>*
  store <4 x i32> %95, <4 x i32>* %144, align 4
  %145 = getelementptr i32, i32* %143, i64 4
  %146 = bitcast i32* %145 to <4 x i32>*
  store <4 x i32> %97, <4 x i32>* %146, align 4
  %147 = add i64 %106, 64
  %148 = add i64 %107, -8
  %149 = icmp eq i64 %148, 0
  br i1 %149, label %150, label %105, !llvm.loop !17

150:                                              ; preds = %105, %90
  %151 = phi i64 [ 0, %90 ], [ %147, %105 ]
  %152 = icmp eq i64 %101, 0
  br i1 %152, label %163, label %153

153:                                              ; preds = %150, %153
  %154 = phi i64 [ %160, %153 ], [ %151, %150 ]
  %155 = phi i64 [ %161, %153 ], [ %101, %150 ]
  %156 = getelementptr i32, i32* %76, i64 %154
  %157 = bitcast i32* %156 to <4 x i32>*
  store <4 x i32> %95, <4 x i32>* %157, align 4
  %158 = getelementptr i32, i32* %156, i64 4
  %159 = bitcast i32* %158 to <4 x i32>*
  store <4 x i32> %97, <4 x i32>* %159, align 4
  %160 = add i64 %154, 8
  %161 = add i64 %155, -1
  %162 = icmp eq i64 %161, 0
  br i1 %162, label %163, label %153, !llvm.loop !18

163:                                              ; preds = %153, %150
  %164 = icmp eq i64 %88, %91
  br i1 %164, label %181, label %165

165:                                              ; preds = %163, %83
  %166 = phi i64 [ %84, %83 ], [ %92, %163 ]
  %167 = phi i32* [ %76, %83 ], [ %93, %163 ]
  br label %168

168:                                              ; preds = %165, %168
  %169 = phi i64 [ %172, %168 ], [ %166, %165 ]
  %170 = phi i32* [ %171, %168 ], [ %167, %165 ]
  store i32 %74, i32* %170, align 4
  %171 = getelementptr inbounds i32, i32* %170, i64 1
  %172 = add nsw i64 %169, -1
  %173 = icmp sgt i64 %172, 0
  br i1 %173, label %168, label %181, !llvm.loop !19

174:                                              ; preds = %68, %66
  %175 = icmp eq i64 %48, 0
  br i1 %175, label %181, label %176

176:                                              ; preds = %174
  %177 = getelementptr inbounds %"class.webrtc::AecState", %"class.webrtc::AecState"* %0, i64 0, i32 7, i32 2, i32 0, i32 0
  %178 = bitcast i32** %177 to i8**
  %179 = load i8*, i8** %178, align 8
  %180 = bitcast i32* %43 to i8*
  call void @llvm.memmove.p0i8.p0i8.i64(i8* align 4 %179, i8* align 4 %180, i64 %48, i1 false) #15
  br label %181

181:                                              ; preds = %168, %163, %176, %174, %72
  %182 = getelementptr inbounds %"class.webrtc::AecState", %"class.webrtc::AecState"* %0, i64 0, i32 7, i32 2, i32 0, i32 0
  %183 = load i32*, i32** %182, align 8
  %184 = ptrtoint i32* %183 to i64
  %185 = getelementptr inbounds %"class.webrtc::AecState", %"class.webrtc::AecState"* %0, i64 0, i32 7, i32 2, i32 0, i32 1
  %186 = load i32*, i32** %185, align 8
  %187 = icmp eq i32* %183, %186
  br i1 %187, label %252, label %188

188:                                              ; preds = %181
  %189 = getelementptr inbounds i32, i32* %183, i64 1
  %190 = icmp eq i32* %189, %186
  br i1 %190, label %252, label %191

191:                                              ; preds = %188
  %192 = getelementptr i32, i32* %186, i64 -2
  %193 = ptrtoint i32* %192 to i64
  %194 = sub i64 %193, %184
  %195 = lshr i64 %194, 2
  %196 = add nuw nsw i64 %195, 1
  %197 = and i64 %196, 3
  %198 = icmp eq i64 %197, 0
  br i1 %198, label %212, label %199

199:                                              ; preds = %191, %199
  %200 = phi i32* [ %209, %199 ], [ %189, %191 ]
  %201 = phi i64 [ %208, %199 ], [ %184, %191 ]
  %202 = phi i64 [ %210, %199 ], [ %197, %191 ]
  %203 = ptrtoint i32* %200 to i64
  %204 = inttoptr i64 %201 to i32*
  %205 = load i32, i32* %200, align 4
  %206 = load i32, i32* %204, align 4
  %207 = icmp slt i32 %205, %206
  %208 = select i1 %207, i64 %203, i64 %201
  %209 = getelementptr inbounds i32, i32* %200, i64 1
  %210 = add i64 %202, -1
  %211 = icmp eq i64 %210, 0
  br i1 %211, label %212, label %199, !llvm.loop !21

212:                                              ; preds = %199, %191
  %213 = phi i64 [ undef, %191 ], [ %208, %199 ]
  %214 = phi i32* [ %189, %191 ], [ %209, %199 ]
  %215 = phi i64 [ %184, %191 ], [ %208, %199 ]
  %216 = icmp ult i64 %194, 12
  br i1 %216, label %249, label %217

217:                                              ; preds = %212, %217
  %218 = phi i32* [ %247, %217 ], [ %214, %212 ]
  %219 = phi i64 [ %246, %217 ], [ %215, %212 ]
  %220 = ptrtoint i32* %218 to i64
  %221 = inttoptr i64 %219 to i32*
  %222 = load i32, i32* %218, align 4
  %223 = load i32, i32* %221, align 4
  %224 = icmp slt i32 %222, %223
  %225 = select i1 %224, i64 %220, i64 %219
  %226 = getelementptr inbounds i32, i32* %218, i64 1
  %227 = ptrtoint i32* %226 to i64
  %228 = inttoptr i64 %225 to i32*
  %229 = load i32, i32* %226, align 4
  %230 = load i32, i32* %228, align 4
  %231 = icmp slt i32 %229, %230
  %232 = select i1 %231, i64 %227, i64 %225
  %233 = getelementptr inbounds i32, i32* %218, i64 2
  %234 = ptrtoint i32* %233 to i64
  %235 = inttoptr i64 %232 to i32*
  %236 = load i32, i32* %233, align 4
  %237 = load i32, i32* %235, align 4
  %238 = icmp slt i32 %236, %237
  %239 = select i1 %238, i64 %234, i64 %232
  %240 = getelementptr inbounds i32, i32* %218, i64 3
  %241 = ptrtoint i32* %240 to i64
  %242 = inttoptr i64 %239 to i32*
  %243 = load i32, i32* %240, align 4
  %244 = load i32, i32* %242, align 4
  %245 = icmp slt i32 %243, %244
  %246 = select i1 %245, i64 %241, i64 %239
  %247 = getelementptr inbounds i32, i32* %218, i64 4
  %248 = icmp eq i32* %247, %186
  br i1 %248, label %249, label %217

249:                                              ; preds = %217, %212
  %250 = phi i64 [ %213, %212 ], [ %246, %217 ]
  %251 = inttoptr i64 %250 to i32*
  br label %252

252:                                              ; preds = %249, %181, %188
  %253 = phi i32* [ %183, %181 ], [ %183, %188 ], [ %251, %249 ]
  %254 = load i32, i32* %253, align 4
  %255 = getelementptr inbounds %"class.webrtc::AecState", %"class.webrtc::AecState"* %0, i64 0, i32 7, i32 3
  store i32 %254, i32* %255, align 8
  br label %256

256:                                              ; preds = %38, %252
  %257 = phi i32 [ %40, %38 ], [ %254, %252 ]
  %258 = getelementptr inbounds %"class.webrtc::AecState", %"class.webrtc::AecState"* %0, i64 0, i32 7, i32 3
  %259 = getelementptr inbounds %"class.webrtc::RenderBuffer", %"class.webrtc::RenderBuffer"* %6, i64 0, i32 0
  %260 = load %"struct.webrtc::BlockBuffer"*, %"struct.webrtc::BlockBuffer"** %259, align 8
  %261 = getelementptr inbounds %"struct.webrtc::BlockBuffer", %"struct.webrtc::BlockBuffer"* %260, i64 0, i32 3
  %262 = load i32, i32* %261, align 4
  %263 = getelementptr inbounds %"struct.webrtc::BlockBuffer", %"struct.webrtc::BlockBuffer"* %260, i64 0, i32 0
  %264 = load i32, i32* %263, align 8
  %265 = sub i32 %262, %257
  %266 = add i32 %265, %264
  %267 = srem i32 %266, %264
  %268 = sext i32 %267 to i64
  %269 = getelementptr inbounds %"struct.webrtc::BlockBuffer", %"struct.webrtc::BlockBuffer"* %260, i64 0, i32 1, i32 0, i32 0
  %270 = load %"class.std::__1::vector.159"*, %"class.std::__1::vector.159"** %269, align 8
  %271 = getelementptr inbounds %"class.std::__1::vector.159", %"class.std::__1::vector.159"* %270, i64 %268, i32 0, i32 0
  %272 = load %"class.std::__1::vector.114"*, %"class.std::__1::vector.114"** %271, align 8
  %273 = getelementptr inbounds %"class.std::__1::vector.114", %"class.std::__1::vector.114"* %272, i64 0, i32 0, i32 1
  %274 = bitcast %"class.std::__1::vector.17"** %273 to i64*
  %275 = load i64, i64* %274, align 8
  %276 = bitcast %"class.std::__1::vector.114"* %272 to i64*
  %277 = load i64, i64* %276, align 8
  %278 = icmp eq i64 %275, %277
  %279 = inttoptr i64 %277 to %"class.std::__1::vector.17"*
  br i1 %278, label %360, label %280

280:                                              ; preds = %256
  %281 = getelementptr inbounds %"class.webrtc::AecState", %"class.webrtc::AecState"* %0, i64 0, i32 1, i32 6, i32 0
  %282 = load float, float* %281, align 8
  %283 = fmul float %282, %282
  %284 = fmul float %283, 6.400000e+01
  %285 = sub i64 %275, %277
  %286 = sdiv exact i64 %285, 24
  br label %290

287:                                              ; preds = %290, %357
  %288 = add nuw i64 %291, 1
  %289 = icmp ult i64 %288, %286
  br i1 %289, label %290, label %360

290:                                              ; preds = %280, %287
  %291 = phi i64 [ 0, %280 ], [ %288, %287 ]
  %292 = getelementptr inbounds %"class.std::__1::vector.17", %"class.std::__1::vector.17"* %279, i64 %291, i32 0, i32 0
  %293 = load float*, float** %292, align 8
  %294 = getelementptr inbounds %"class.std::__1::vector.17", %"class.std::__1::vector.17"* %279, i64 %291, i32 0, i32 1
  %295 = load float*, float** %294, align 8
  %296 = icmp eq float* %293, %295
  br i1 %296, label %287, label %297

297:                                              ; preds = %290
  %298 = ptrtoint float* %293 to i64
  %299 = getelementptr float, float* %295, i64 -1
  %300 = ptrtoint float* %299 to i64
  %301 = sub i64 %300, %298
  %302 = lshr i64 %301, 2
  %303 = add nuw nsw i64 %302, 1
  %304 = and i64 %303, 7
  %305 = icmp eq i64 %304, 0
  br i1 %305, label %316, label %306

306:                                              ; preds = %297, %306
  %307 = phi float [ %312, %306 ], [ 0.000000e+00, %297 ]
  %308 = phi float* [ %313, %306 ], [ %293, %297 ]
  %309 = phi i64 [ %314, %306 ], [ %304, %297 ]
  %310 = load float, float* %308, align 4
  %311 = fmul float %310, %310
  %312 = fadd float %307, %311
  %313 = getelementptr inbounds float, float* %308, i64 1
  %314 = add i64 %309, -1
  %315 = icmp eq i64 %314, 0
  br i1 %315, label %316, label %306, !llvm.loop !22

316:                                              ; preds = %306, %297
  %317 = phi float [ undef, %297 ], [ %312, %306 ]
  %318 = phi float [ 0.000000e+00, %297 ], [ %312, %306 ]
  %319 = phi float* [ %293, %297 ], [ %313, %306 ]
  %320 = icmp ult i64 %301, 28
  br i1 %320, label %357, label %321

321:                                              ; preds = %316, %321
  %322 = phi float [ %354, %321 ], [ %318, %316 ]
  %323 = phi float* [ %355, %321 ], [ %319, %316 ]
  %324 = load float, float* %323, align 4
  %325 = fmul float %324, %324
  %326 = fadd float %322, %325
  %327 = getelementptr inbounds float, float* %323, i64 1
  %328 = load float, float* %327, align 4
  %329 = fmul float %328, %328
  %330 = fadd float %326, %329
  %331 = getelementptr inbounds float, float* %323, i64 2
  %332 = load float, float* %331, align 4
  %333 = fmul float %332, %332
  %334 = fadd float %330, %333
  %335 = getelementptr inbounds float, float* %323, i64 3
  %336 = load float, float* %335, align 4
  %337 = fmul float %336, %336
  %338 = fadd float %334, %337
  %339 = getelementptr inbounds float, float* %323, i64 4
  %340 = load float, float* %339, align 4
  %341 = fmul float %340, %340
  %342 = fadd float %338, %341
  %343 = getelementptr inbounds float, float* %323, i64 5
  %344 = load float, float* %343, align 4
  %345 = fmul float %344, %344
  %346 = fadd float %342, %345
  %347 = getelementptr inbounds float, float* %323, i64 6
  %348 = load float, float* %347, align 4
  %349 = fmul float %348, %348
  %350 = fadd float %346, %349
  %351 = getelementptr inbounds float, float* %323, i64 7
  %352 = load float, float* %351, align 4
  %353 = fmul float %352, %352
  %354 = fadd float %350, %353
  %355 = getelementptr inbounds float, float* %323, i64 8
  %356 = icmp eq float* %355, %295
  br i1 %356, label %357, label %321

357:                                              ; preds = %321, %316
  %358 = phi float [ %317, %316 ], [ %354, %321 ]
  %359 = fcmp ogt float %358, %284
  br i1 %359, label %360, label %287

360:                                              ; preds = %287, %357, %256
  %361 = phi i8 [ 0, %256 ], [ 0, %287 ], [ 1, %357 ]
  %362 = icmp ne i8 %361, 0
  %363 = zext i8 %361 to i64
  %364 = getelementptr inbounds %"class.webrtc::AecState", %"class.webrtc::AecState"* %0, i64 0, i32 14
  %365 = load i64, i64* %364, align 8
  %366 = add i64 %365, %363
  store i64 %366, i64* %364, align 8
  br i1 %362, label %367, label %372

367:                                              ; preds = %360
  %368 = getelementptr inbounds %"class.webrtc::AecState", %"class.webrtc::AecState"* %0, i64 0, i32 15
  %369 = load i8, i8* %368, align 8, !range !2
  %370 = xor i8 %369, 1
  %371 = zext i8 %370 to i64
  br label %372

372:                                              ; preds = %367, %360
  %373 = phi i64 [ 0, %360 ], [ %371, %367 ]
  %374 = getelementptr inbounds %"class.webrtc::AecState", %"class.webrtc::AecState"* %0, i64 0, i32 13
  %375 = load i64, i64* %374, align 8
  %376 = add i64 %375, %373
  store i64 %376, i64* %374, align 8
  call void @llvm.lifetime.start.p0i8(i64 260, i8* nonnull %19) #15
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %19, i8 -1, i64 260, i1 false)
  %377 = getelementptr inbounds %"class.webrtc::RenderBuffer", %"class.webrtc::RenderBuffer"* %6, i64 0, i32 1
  %378 = load %"struct.webrtc::SpectrumBuffer"*, %"struct.webrtc::SpectrumBuffer"** %377, align 8
  %379 = getelementptr inbounds %"class.webrtc::AecState", %"class.webrtc::AecState"* %0, i64 0, i32 19, i32 0, i32 0, i32 0
  %380 = load %"class.std::__1::unique_ptr.135"*, %"class.std::__1::unique_ptr.135"** %379, align 8
  %381 = getelementptr inbounds %"class.std::__1::unique_ptr.135", %"class.std::__1::unique_ptr.135"* %380, i64 0, i32 0, i32 0, i32 0
  %382 = load %"class.webrtc::ReverbDecayEstimator"*, %"class.webrtc::ReverbDecayEstimator"** %381, align 8
  %383 = getelementptr inbounds %"class.webrtc::ReverbDecayEstimator", %"class.webrtc::ReverbDecayEstimator"* %382, i64 0, i32 13
  %384 = load float, float* %383, align 8
  %385 = getelementptr inbounds %"class.webrtc::AecState", %"class.webrtc::AecState"* %0, i64 0, i32 20
  %386 = getelementptr inbounds %"struct.std::__1::array", %"struct.std::__1::array"* %18, i64 0, i32 0, i64 0
  %387 = getelementptr inbounds %"struct.webrtc::SpectrumBuffer", %"struct.webrtc::SpectrumBuffer"* %378, i64 0, i32 1, i32 0, i32 0
  %388 = load %"class.std::__1::vector.43"*, %"class.std::__1::vector.43"** %387, align 8
  %389 = getelementptr inbounds %"class.std::__1::vector.43", %"class.std::__1::vector.43"* %388, i64 0, i32 0, i32 1
  %390 = bitcast %"struct.std::__1::array"** %389 to i64*
  %391 = load i64, i64* %390, align 8
  %392 = bitcast %"class.std::__1::vector.43"* %388 to i64*
  %393 = load i64, i64* %392, align 8
  %394 = sub i64 %391, %393
  %395 = sdiv exact i64 %394, 260
  %396 = getelementptr inbounds %"struct.webrtc::SpectrumBuffer", %"struct.webrtc::SpectrumBuffer"* %378, i64 0, i32 3
  %397 = load i32, i32* %396, align 4
  %398 = getelementptr inbounds %"struct.webrtc::SpectrumBuffer", %"struct.webrtc::SpectrumBuffer"* %378, i64 0, i32 0
  %399 = load i32, i32* %398, align 8
  %400 = add i32 %397, %257
  %401 = add i32 %400, %399
  %402 = srem i32 %401, %399
  %403 = add nsw i32 %399, -1
  %404 = icmp sgt i32 %403, %402
  %405 = add nsw i32 %402, 1
  %406 = select i1 %404, i32 %405, i32 0
  call void @llvm.lifetime.start.p0i8(i64 260, i8* nonnull %12) #15
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %12, i8 -1, i64 260, i1 false) #15
  %407 = icmp ugt i64 %395, 1
  %408 = sext i32 %406 to i64
  %409 = getelementptr inbounds %"class.std::__1::vector.43", %"class.std::__1::vector.43"* %388, i64 %408, i32 0, i32 0
  %410 = load %"struct.std::__1::array"*, %"struct.std::__1::array"** %409, align 8
  br i1 %407, label %411, label %929

411:                                              ; preds = %372
  %412 = getelementptr inbounds %"class.std::__1::vector.43", %"class.std::__1::vector.43"* %388, i64 %408, i32 0, i32 1
  %413 = bitcast %"struct.std::__1::array"** %412 to i64*
  %414 = load i64, i64* %413, align 8
  %415 = ptrtoint %"struct.std::__1::array"* %410 to i64
  %416 = icmp eq i64 %414, %415
  %417 = select i1 %416, %"struct.std::__1::array"* null, %"struct.std::__1::array"* %410
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %12, i8 0, i64 260, i1 false) #15
  %418 = getelementptr inbounds %"struct.std::__1::array", %"struct.std::__1::array"* %11, i64 1
  %419 = bitcast %"struct.std::__1::array"* %11 to <4 x float>*
  %420 = bitcast %"struct.std::__1::array"* %11 to <4 x float>*
  %421 = getelementptr inbounds %"struct.std::__1::array", %"struct.std::__1::array"* %11, i64 0, i32 0, i64 4
  %422 = bitcast float* %421 to <4 x float>*
  %423 = bitcast float* %421 to <4 x float>*
  %424 = getelementptr inbounds %"struct.std::__1::array", %"struct.std::__1::array"* %11, i64 0, i32 0, i64 8
  %425 = bitcast float* %424 to <4 x float>*
  %426 = bitcast float* %424 to <4 x float>*
  %427 = getelementptr inbounds %"struct.std::__1::array", %"struct.std::__1::array"* %11, i64 0, i32 0, i64 12
  %428 = bitcast float* %427 to <4 x float>*
  %429 = bitcast float* %427 to <4 x float>*
  %430 = getelementptr inbounds %"struct.std::__1::array", %"struct.std::__1::array"* %11, i64 0, i32 0, i64 16
  %431 = bitcast float* %430 to <4 x float>*
  %432 = bitcast float* %430 to <4 x float>*
  %433 = getelementptr inbounds %"struct.std::__1::array", %"struct.std::__1::array"* %11, i64 0, i32 0, i64 20
  %434 = bitcast float* %433 to <4 x float>*
  %435 = bitcast float* %433 to <4 x float>*
  %436 = getelementptr inbounds %"struct.std::__1::array", %"struct.std::__1::array"* %11, i64 0, i32 0, i64 24
  %437 = bitcast float* %436 to <4 x float>*
  %438 = bitcast float* %436 to <4 x float>*
  %439 = getelementptr inbounds %"struct.std::__1::array", %"struct.std::__1::array"* %11, i64 0, i32 0, i64 28
  %440 = bitcast float* %439 to <4 x float>*
  %441 = bitcast float* %439 to <4 x float>*
  %442 = getelementptr inbounds %"struct.std::__1::array", %"struct.std::__1::array"* %11, i64 0, i32 0, i64 32
  %443 = bitcast float* %442 to <4 x float>*
  %444 = bitcast float* %442 to <4 x float>*
  %445 = getelementptr inbounds %"struct.std::__1::array", %"struct.std::__1::array"* %11, i64 0, i32 0, i64 36
  %446 = bitcast float* %445 to <4 x float>*
  %447 = bitcast float* %445 to <4 x float>*
  %448 = getelementptr inbounds %"struct.std::__1::array", %"struct.std::__1::array"* %11, i64 0, i32 0, i64 40
  %449 = bitcast float* %448 to <4 x float>*
  %450 = bitcast float* %448 to <4 x float>*
  %451 = getelementptr inbounds %"struct.std::__1::array", %"struct.std::__1::array"* %11, i64 0, i32 0, i64 44
  %452 = bitcast float* %451 to <4 x float>*
  %453 = bitcast float* %451 to <4 x float>*
  %454 = getelementptr inbounds %"struct.std::__1::array", %"struct.std::__1::array"* %11, i64 0, i32 0, i64 48
  %455 = bitcast float* %454 to <4 x float>*
  %456 = bitcast float* %454 to <4 x float>*
  %457 = getelementptr inbounds %"struct.std::__1::array", %"struct.std::__1::array"* %11, i64 0, i32 0, i64 52
  %458 = bitcast float* %457 to <4 x float>*
  %459 = bitcast float* %457 to <4 x float>*
  %460 = getelementptr inbounds %"struct.std::__1::array", %"struct.std::__1::array"* %11, i64 0, i32 0, i64 56
  %461 = bitcast float* %460 to <4 x float>*
  %462 = bitcast float* %460 to <4 x float>*
  %463 = getelementptr inbounds %"struct.std::__1::array", %"struct.std::__1::array"* %11, i64 0, i32 0, i64 60
  %464 = bitcast float* %463 to <4 x float>*
  %465 = bitcast float* %463 to <4 x float>*
  br label %466

466:                                              ; preds = %411, %710
  %467 = phi i64 [ %711, %710 ], [ 0, %411 ]
  %468 = add i64 %467, 1
  %469 = getelementptr %"struct.std::__1::array", %"struct.std::__1::array"* %417, i64 %468
  %470 = getelementptr %"struct.std::__1::array", %"struct.std::__1::array"* %417, i64 %467
  %471 = icmp ult %"struct.std::__1::array"* %11, %469
  %472 = icmp ult %"struct.std::__1::array"* %470, %418
  %473 = and i1 %471, %472
  br i1 %473, label %474, label %483

474:                                              ; preds = %483, %466
  %475 = phi i64 [ 0, %466 ], [ 64, %483 ]
  %476 = getelementptr inbounds %"struct.std::__1::array", %"struct.std::__1::array"* %417, i64 %467, i32 0, i64 %475
  %477 = load float, float* %476, align 4
  %478 = getelementptr inbounds %"struct.std::__1::array", %"struct.std::__1::array"* %11, i64 0, i32 0, i64 %475
  %479 = load float, float* %478, align 16
  %480 = fadd float %477, %479
  store float %480, float* %478, align 16
  %481 = or i64 %475, 1
  %482 = icmp eq i64 %475, 64
  br i1 %482, label %710, label %713

483:                                              ; preds = %466
  %484 = getelementptr inbounds %"struct.std::__1::array", %"struct.std::__1::array"* %417, i64 %467, i32 0, i64 0
  %485 = bitcast float* %484 to <4 x float>*
  %486 = load <4 x float>, <4 x float>* %485, align 4, !alias.scope !23
  %487 = load <4 x float>, <4 x float>* %419, align 16, !alias.scope !26, !noalias !23
  %488 = fadd <4 x float> %486, %487
  store <4 x float> %488, <4 x float>* %420, align 16, !alias.scope !26, !noalias !23
  %489 = getelementptr inbounds %"struct.std::__1::array", %"struct.std::__1::array"* %417, i64 %467, i32 0, i64 4
  %490 = bitcast float* %489 to <4 x float>*
  %491 = load <4 x float>, <4 x float>* %490, align 4, !alias.scope !23
  %492 = load <4 x float>, <4 x float>* %422, align 16, !alias.scope !26, !noalias !23
  %493 = fadd <4 x float> %491, %492
  store <4 x float> %493, <4 x float>* %423, align 16, !alias.scope !26, !noalias !23
  %494 = getelementptr inbounds %"struct.std::__1::array", %"struct.std::__1::array"* %417, i64 %467, i32 0, i64 8
  %495 = bitcast float* %494 to <4 x float>*
  %496 = load <4 x float>, <4 x float>* %495, align 4, !alias.scope !23
  %497 = load <4 x float>, <4 x float>* %425, align 16, !alias.scope !26, !noalias !23
  %498 = fadd <4 x float> %496, %497
  store <4 x float> %498, <4 x float>* %426, align 16, !alias.scope !26, !noalias !23
  %499 = getelementptr inbounds %"struct.std::__1::array", %"struct.std::__1::array"* %417, i64 %467, i32 0, i64 12
  %500 = bitcast float* %499 to <4 x float>*
  %501 = load <4 x float>, <4 x float>* %500, align 4, !alias.scope !23
  %502 = load <4 x float>, <4 x float>* %428, align 16, !alias.scope !26, !noalias !23
  %503 = fadd <4 x float> %501, %502
  store <4 x float> %503, <4 x float>* %429, align 16, !alias.scope !26, !noalias !23
  %504 = getelementptr inbounds %"struct.std::__1::array", %"struct.std::__1::array"* %417, i64 %467, i32 0, i64 16
  %505 = bitcast float* %504 to <4 x float>*
  %506 = load <4 x float>, <4 x float>* %505, align 4, !alias.scope !23
  %507 = load <4 x float>, <4 x float>* %431, align 16, !alias.scope !26, !noalias !23
  %508 = fadd <4 x float> %506, %507
  store <4 x float> %508, <4 x float>* %432, align 16, !alias.scope !26, !noalias !23
  %509 = getelementptr inbounds %"struct.std::__1::array", %"struct.std::__1::array"* %417, i64 %467, i32 0, i64 20
  %510 = bitcast float* %509 to <4 x float>*
  %511 = load <4 x float>, <4 x float>* %510, align 4, !alias.scope !23
  %512 = load <4 x float>, <4 x float>* %434, align 16, !alias.scope !26, !noalias !23
  %513 = fadd <4 x float> %511, %512
  store <4 x float> %513, <4 x float>* %435, align 16, !alias.scope !26, !noalias !23
  %514 = getelementptr inbounds %"struct.std::__1::array", %"struct.std::__1::array"* %417, i64 %467, i32 0, i64 24
  %515 = bitcast float* %514 to <4 x float>*
  %516 = load <4 x float>, <4 x float>* %515, align 4, !alias.scope !23
  %517 = load <4 x float>, <4 x float>* %437, align 16, !alias.scope !26, !noalias !23
  %518 = fadd <4 x float> %516, %517
  store <4 x float> %518, <4 x float>* %438, align 16, !alias.scope !26, !noalias !23
  %519 = getelementptr inbounds %"struct.std::__1::array", %"struct.std::__1::array"* %417, i64 %467, i32 0, i64 28
  %520 = bitcast float* %519 to <4 x float>*
  %521 = load <4 x float>, <4 x float>* %520, align 4, !alias.scope !23
  %522 = load <4 x float>, <4 x float>* %440, align 16, !alias.scope !26, !noalias !23
  %523 = fadd <4 x float> %521, %522
  store <4 x float> %523, <4 x float>* %441, align 16, !alias.scope !26, !noalias !23
  %524 = getelementptr inbounds %"struct.std::__1::array", %"struct.std::__1::array"* %417, i64 %467, i32 0, i64 32
  %525 = bitcast float* %524 to <4 x float>*
  %526 = load <4 x float>, <4 x float>* %525, align 4, !alias.scope !23
  %527 = load <4 x float>, <4 x float>* %443, align 16, !alias.scope !26, !noalias !23
  %528 = fadd <4 x float> %526, %527
  store <4 x float> %528, <4 x float>* %444, align 16, !alias.scope !26, !noalias !23
  %529 = getelementptr inbounds %"struct.std::__1::array", %"struct.std::__1::array"* %417, i64 %467, i32 0, i64 36
  %530 = bitcast float* %529 to <4 x float>*
  %531 = load <4 x float>, <4 x float>* %530, align 4, !alias.scope !23
  %532 = load <4 x float>, <4 x float>* %446, align 16, !alias.scope !26, !noalias !23
  %533 = fadd <4 x float> %531, %532
  store <4 x float> %533, <4 x float>* %447, align 16, !alias.scope !26, !noalias !23
  %534 = getelementptr inbounds %"struct.std::__1::array", %"struct.std::__1::array"* %417, i64 %467, i32 0, i64 40
  %535 = bitcast float* %534 to <4 x float>*
  %536 = load <4 x float>, <4 x float>* %535, align 4, !alias.scope !23
  %537 = load <4 x float>, <4 x float>* %449, align 16, !alias.scope !26, !noalias !23
  %538 = fadd <4 x float> %536, %537
  store <4 x float> %538, <4 x float>* %450, align 16, !alias.scope !26, !noalias !23
  %539 = getelementptr inbounds %"struct.std::__1::array", %"struct.std::__1::array"* %417, i64 %467, i32 0, i64 44
  %540 = bitcast float* %539 to <4 x float>*
  %541 = load <4 x float>, <4 x float>* %540, align 4, !alias.scope !23
  %542 = load <4 x float>, <4 x float>* %452, align 16, !alias.scope !26, !noalias !23
  %543 = fadd <4 x float> %541, %542
  store <4 x float> %543, <4 x float>* %453, align 16, !alias.scope !26, !noalias !23
  %544 = getelementptr inbounds %"struct.std::__1::array", %"struct.std::__1::array"* %417, i64 %467, i32 0, i64 48
  %545 = bitcast float* %544 to <4 x float>*
  %546 = load <4 x float>, <4 x float>* %545, align 4, !alias.scope !23
  %547 = load <4 x float>, <4 x float>* %455, align 16, !alias.scope !26, !noalias !23
  %548 = fadd <4 x float> %546, %547
  store <4 x float> %548, <4 x float>* %456, align 16, !alias.scope !26, !noalias !23
  %549 = getelementptr inbounds %"struct.std::__1::array", %"struct.std::__1::array"* %417, i64 %467, i32 0, i64 52
  %550 = bitcast float* %549 to <4 x float>*
  %551 = load <4 x float>, <4 x float>* %550, align 4, !alias.scope !23
  %552 = load <4 x float>, <4 x float>* %458, align 16, !alias.scope !26, !noalias !23
  %553 = fadd <4 x float> %551, %552
  store <4 x float> %553, <4 x float>* %459, align 16, !alias.scope !26, !noalias !23
  %554 = getelementptr inbounds %"struct.std::__1::array", %"struct.std::__1::array"* %417, i64 %467, i32 0, i64 56
  %555 = bitcast float* %554 to <4 x float>*
  %556 = load <4 x float>, <4 x float>* %555, align 4, !alias.scope !23
  %557 = load <4 x float>, <4 x float>* %461, align 16, !alias.scope !26, !noalias !23
  %558 = fadd <4 x float> %556, %557
  store <4 x float> %558, <4 x float>* %462, align 16, !alias.scope !26, !noalias !23
  %559 = getelementptr inbounds %"struct.std::__1::array", %"struct.std::__1::array"* %417, i64 %467, i32 0, i64 60
  %560 = bitcast float* %559 to <4 x float>*
  %561 = load <4 x float>, <4 x float>* %560, align 4, !alias.scope !23
  %562 = load <4 x float>, <4 x float>* %464, align 16, !alias.scope !26, !noalias !23
  %563 = fadd <4 x float> %561, %562
  store <4 x float> %563, <4 x float>* %465, align 16, !alias.scope !26, !noalias !23
  br label %474

564:                                              ; preds = %710
  %565 = uitofp i64 %395 to float
  %566 = fdiv float 1.000000e+00, %565
  %567 = insertelement <4 x float> undef, float %566, i32 0
  %568 = shufflevector <4 x float> %567, <4 x float> undef, <4 x i32> zeroinitializer
  %569 = bitcast %"struct.std::__1::array"* %11 to <4 x float>*
  %570 = load <4 x float>, <4 x float>* %569, align 16
  %571 = fmul <4 x float> %568, %570
  %572 = bitcast %"struct.std::__1::array"* %11 to <4 x float>*
  store <4 x float> %571, <4 x float>* %572, align 16
  %573 = getelementptr inbounds %"struct.std::__1::array", %"struct.std::__1::array"* %11, i64 0, i32 0, i64 4
  %574 = bitcast float* %573 to <4 x float>*
  %575 = load <4 x float>, <4 x float>* %574, align 16
  %576 = fmul <4 x float> %568, %575
  %577 = bitcast float* %573 to <4 x float>*
  store <4 x float> %576, <4 x float>* %577, align 16
  %578 = getelementptr inbounds %"struct.std::__1::array", %"struct.std::__1::array"* %11, i64 0, i32 0, i64 8
  %579 = bitcast float* %578 to <4 x float>*
  %580 = load <4 x float>, <4 x float>* %579, align 16
  %581 = fmul <4 x float> %568, %580
  %582 = bitcast float* %578 to <4 x float>*
  store <4 x float> %581, <4 x float>* %582, align 16
  %583 = getelementptr inbounds %"struct.std::__1::array", %"struct.std::__1::array"* %11, i64 0, i32 0, i64 12
  %584 = bitcast float* %583 to <4 x float>*
  %585 = load <4 x float>, <4 x float>* %584, align 16
  %586 = fmul <4 x float> %568, %585
  %587 = bitcast float* %583 to <4 x float>*
  store <4 x float> %586, <4 x float>* %587, align 16
  %588 = getelementptr inbounds %"struct.std::__1::array", %"struct.std::__1::array"* %11, i64 0, i32 0, i64 16
  %589 = bitcast float* %588 to <4 x float>*
  %590 = load <4 x float>, <4 x float>* %589, align 16
  %591 = fmul <4 x float> %568, %590
  %592 = bitcast float* %588 to <4 x float>*
  store <4 x float> %591, <4 x float>* %592, align 16
  %593 = getelementptr inbounds %"struct.std::__1::array", %"struct.std::__1::array"* %11, i64 0, i32 0, i64 20
  %594 = bitcast float* %593 to <4 x float>*
  %595 = load <4 x float>, <4 x float>* %594, align 16
  %596 = fmul <4 x float> %568, %595
  %597 = bitcast float* %593 to <4 x float>*
  store <4 x float> %596, <4 x float>* %597, align 16
  %598 = getelementptr inbounds %"struct.std::__1::array", %"struct.std::__1::array"* %11, i64 0, i32 0, i64 24
  %599 = bitcast float* %598 to <4 x float>*
  %600 = load <4 x float>, <4 x float>* %599, align 16
  %601 = fmul <4 x float> %568, %600
  %602 = bitcast float* %598 to <4 x float>*
  store <4 x float> %601, <4 x float>* %602, align 16
  %603 = getelementptr inbounds %"struct.std::__1::array", %"struct.std::__1::array"* %11, i64 0, i32 0, i64 28
  %604 = bitcast float* %603 to <4 x float>*
  %605 = load <4 x float>, <4 x float>* %604, align 16
  %606 = fmul <4 x float> %568, %605
  %607 = bitcast float* %603 to <4 x float>*
  store <4 x float> %606, <4 x float>* %607, align 16
  %608 = getelementptr inbounds %"struct.std::__1::array", %"struct.std::__1::array"* %11, i64 0, i32 0, i64 32
  %609 = bitcast float* %608 to <4 x float>*
  %610 = load <4 x float>, <4 x float>* %609, align 16
  %611 = fmul <4 x float> %568, %610
  %612 = bitcast float* %608 to <4 x float>*
  store <4 x float> %611, <4 x float>* %612, align 16
  %613 = getelementptr inbounds %"struct.std::__1::array", %"struct.std::__1::array"* %11, i64 0, i32 0, i64 36
  %614 = bitcast float* %613 to <4 x float>*
  %615 = load <4 x float>, <4 x float>* %614, align 16
  %616 = fmul <4 x float> %568, %615
  %617 = bitcast float* %613 to <4 x float>*
  store <4 x float> %616, <4 x float>* %617, align 16
  %618 = getelementptr inbounds %"struct.std::__1::array", %"struct.std::__1::array"* %11, i64 0, i32 0, i64 40
  %619 = bitcast float* %618 to <4 x float>*
  %620 = load <4 x float>, <4 x float>* %619, align 16
  %621 = fmul <4 x float> %568, %620
  %622 = bitcast float* %618 to <4 x float>*
  store <4 x float> %621, <4 x float>* %622, align 16
  %623 = getelementptr inbounds %"struct.std::__1::array", %"struct.std::__1::array"* %11, i64 0, i32 0, i64 44
  %624 = bitcast float* %623 to <4 x float>*
  %625 = load <4 x float>, <4 x float>* %624, align 16
  %626 = fmul <4 x float> %568, %625
  %627 = bitcast float* %623 to <4 x float>*
  store <4 x float> %626, <4 x float>* %627, align 16
  %628 = getelementptr inbounds %"struct.std::__1::array", %"struct.std::__1::array"* %11, i64 0, i32 0, i64 48
  %629 = bitcast float* %628 to <4 x float>*
  %630 = load <4 x float>, <4 x float>* %629, align 16
  %631 = fmul <4 x float> %568, %630
  %632 = bitcast float* %628 to <4 x float>*
  store <4 x float> %631, <4 x float>* %632, align 16
  %633 = getelementptr inbounds %"struct.std::__1::array", %"struct.std::__1::array"* %11, i64 0, i32 0, i64 52
  %634 = bitcast float* %633 to <4 x float>*
  %635 = load <4 x float>, <4 x float>* %634, align 16
  %636 = fmul <4 x float> %568, %635
  %637 = bitcast float* %633 to <4 x float>*
  store <4 x float> %636, <4 x float>* %637, align 16
  %638 = getelementptr inbounds %"struct.std::__1::array", %"struct.std::__1::array"* %11, i64 0, i32 0, i64 56
  %639 = bitcast float* %638 to <4 x float>*
  %640 = load <4 x float>, <4 x float>* %639, align 16
  %641 = fmul <4 x float> %568, %640
  %642 = bitcast float* %638 to <4 x float>*
  store <4 x float> %641, <4 x float>* %642, align 16
  %643 = getelementptr inbounds %"struct.std::__1::array", %"struct.std::__1::array"* %11, i64 0, i32 0, i64 60
  %644 = bitcast float* %643 to <4 x float>*
  %645 = load <4 x float>, <4 x float>* %644, align 16
  %646 = fmul <4 x float> %568, %645
  %647 = bitcast float* %643 to <4 x float>*
  store <4 x float> %646, <4 x float>* %647, align 16
  %648 = getelementptr inbounds %"struct.std::__1::array", %"struct.std::__1::array"* %11, i64 0, i32 0, i64 64
  %649 = load float, float* %648, align 16
  %650 = fmul float %566, %649
  store float %650, float* %648, align 16
  %651 = getelementptr inbounds %"struct.std::__1::array", %"struct.std::__1::array"* %11, i64 0, i32 0, i64 0
  call void @_ZN6webrtc11ReverbModel25UpdateReverbNoFreqShapingEN3rtc9ArrayViewIKfLln4711EEEff(%"class.webrtc::ReverbModel"* %385, float* nonnull %651, i64 65, float 1.000000e+00, float %384) #15
  %652 = sext i32 %402 to i64
  %653 = load %"class.std::__1::vector.43"*, %"class.std::__1::vector.43"** %387, align 8
  %654 = getelementptr inbounds %"class.std::__1::vector.43", %"class.std::__1::vector.43"* %653, i64 %652, i32 0, i32 0
  %655 = load %"struct.std::__1::array"*, %"struct.std::__1::array"** %654, align 8
  %656 = getelementptr inbounds %"class.std::__1::vector.43", %"class.std::__1::vector.43"* %653, i64 %652, i32 0, i32 1
  %657 = bitcast %"struct.std::__1::array"** %656 to i64*
  %658 = load i64, i64* %657, align 8
  %659 = ptrtoint %"struct.std::__1::array"* %655 to i64
  %660 = icmp eq i64 %658, %659
  %661 = select i1 %660, %"struct.std::__1::array"* null, %"struct.std::__1::array"* %655
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %12, i8 0, i64 260, i1 false) #15
  %662 = getelementptr inbounds %"struct.std::__1::array", %"struct.std::__1::array"* %11, i64 1
  %663 = bitcast %"struct.std::__1::array"* %11 to <4 x float>*
  %664 = bitcast %"struct.std::__1::array"* %11 to <4 x float>*
  %665 = getelementptr inbounds %"struct.std::__1::array", %"struct.std::__1::array"* %11, i64 0, i32 0, i64 4
  %666 = bitcast float* %665 to <4 x float>*
  %667 = bitcast float* %665 to <4 x float>*
  %668 = getelementptr inbounds %"struct.std::__1::array", %"struct.std::__1::array"* %11, i64 0, i32 0, i64 8
  %669 = bitcast float* %668 to <4 x float>*
  %670 = bitcast float* %668 to <4 x float>*
  %671 = getelementptr inbounds %"struct.std::__1::array", %"struct.std::__1::array"* %11, i64 0, i32 0, i64 12
  %672 = bitcast float* %671 to <4 x float>*
  %673 = bitcast float* %671 to <4 x float>*
  %674 = getelementptr inbounds %"struct.std::__1::array", %"struct.std::__1::array"* %11, i64 0, i32 0, i64 16
  %675 = bitcast float* %674 to <4 x float>*
  %676 = bitcast float* %674 to <4 x float>*
  %677 = getelementptr inbounds %"struct.std::__1::array", %"struct.std::__1::array"* %11, i64 0, i32 0, i64 20
  %678 = bitcast float* %677 to <4 x float>*
  %679 = bitcast float* %677 to <4 x float>*
  %680 = getelementptr inbounds %"struct.std::__1::array", %"struct.std::__1::array"* %11, i64 0, i32 0, i64 24
  %681 = bitcast float* %680 to <4 x float>*
  %682 = bitcast float* %680 to <4 x float>*
  %683 = getelementptr inbounds %"struct.std::__1::array", %"struct.std::__1::array"* %11, i64 0, i32 0, i64 28
  %684 = bitcast float* %683 to <4 x float>*
  %685 = bitcast float* %683 to <4 x float>*
  %686 = getelementptr inbounds %"struct.std::__1::array", %"struct.std::__1::array"* %11, i64 0, i32 0, i64 32
  %687 = bitcast float* %686 to <4 x float>*
  %688 = bitcast float* %686 to <4 x float>*
  %689 = getelementptr inbounds %"struct.std::__1::array", %"struct.std::__1::array"* %11, i64 0, i32 0, i64 36
  %690 = bitcast float* %689 to <4 x float>*
  %691 = bitcast float* %689 to <4 x float>*
  %692 = getelementptr inbounds %"struct.std::__1::array", %"struct.std::__1::array"* %11, i64 0, i32 0, i64 40
  %693 = bitcast float* %692 to <4 x float>*
  %694 = bitcast float* %692 to <4 x float>*
  %695 = getelementptr inbounds %"struct.std::__1::array", %"struct.std::__1::array"* %11, i64 0, i32 0, i64 44
  %696 = bitcast float* %695 to <4 x float>*
  %697 = bitcast float* %695 to <4 x float>*
  %698 = getelementptr inbounds %"struct.std::__1::array", %"struct.std::__1::array"* %11, i64 0, i32 0, i64 48
  %699 = bitcast float* %698 to <4 x float>*
  %700 = bitcast float* %698 to <4 x float>*
  %701 = getelementptr inbounds %"struct.std::__1::array", %"struct.std::__1::array"* %11, i64 0, i32 0, i64 52
  %702 = bitcast float* %701 to <4 x float>*
  %703 = bitcast float* %701 to <4 x float>*
  %704 = getelementptr inbounds %"struct.std::__1::array", %"struct.std::__1::array"* %11, i64 0, i32 0, i64 56
  %705 = bitcast float* %704 to <4 x float>*
  %706 = bitcast float* %704 to <4 x float>*
  %707 = getelementptr inbounds %"struct.std::__1::array", %"struct.std::__1::array"* %11, i64 0, i32 0, i64 60
  %708 = bitcast float* %707 to <4 x float>*
  %709 = bitcast float* %707 to <4 x float>*
  br label %728

710:                                              ; preds = %713, %474
  %711 = add nuw i64 %467, 1
  %712 = icmp eq i64 %711, %395
  br i1 %712, label %564, label %466

713:                                              ; preds = %474, %713
  %714 = phi i64 [ %726, %713 ], [ %481, %474 ]
  %715 = getelementptr inbounds %"struct.std::__1::array", %"struct.std::__1::array"* %417, i64 %467, i32 0, i64 %714
  %716 = load float, float* %715, align 4
  %717 = getelementptr inbounds %"struct.std::__1::array", %"struct.std::__1::array"* %11, i64 0, i32 0, i64 %714
  %718 = load float, float* %717, align 4
  %719 = fadd float %716, %718
  store float %719, float* %717, align 4
  %720 = add nuw nsw i64 %714, 1
  %721 = getelementptr inbounds %"struct.std::__1::array", %"struct.std::__1::array"* %417, i64 %467, i32 0, i64 %720
  %722 = load float, float* %721, align 4
  %723 = getelementptr inbounds %"struct.std::__1::array", %"struct.std::__1::array"* %11, i64 0, i32 0, i64 %720
  %724 = load float, float* %723, align 4
  %725 = fadd float %722, %724
  store float %725, float* %723, align 4
  %726 = add nuw nsw i64 %714, 2
  %727 = icmp eq i64 %726, 65
  br i1 %727, label %710, label %713, !llvm.loop !28

728:                                              ; preds = %564, %826
  %729 = phi i64 [ %827, %826 ], [ 0, %564 ]
  %730 = add i64 %729, 1
  %731 = getelementptr %"struct.std::__1::array", %"struct.std::__1::array"* %661, i64 %730
  %732 = getelementptr %"struct.std::__1::array", %"struct.std::__1::array"* %661, i64 %729
  %733 = icmp ult %"struct.std::__1::array"* %11, %731
  %734 = icmp ult %"struct.std::__1::array"* %732, %662
  %735 = and i1 %733, %734
  br i1 %735, label %736, label %745

736:                                              ; preds = %745, %728
  %737 = phi i64 [ 0, %728 ], [ 64, %745 ]
  %738 = getelementptr inbounds %"struct.std::__1::array", %"struct.std::__1::array"* %661, i64 %729, i32 0, i64 %737
  %739 = load float, float* %738, align 4
  %740 = getelementptr inbounds %"struct.std::__1::array", %"struct.std::__1::array"* %11, i64 0, i32 0, i64 %737
  %741 = load float, float* %740, align 16
  %742 = fadd float %739, %741
  store float %742, float* %740, align 16
  %743 = or i64 %737, 1
  %744 = icmp eq i64 %737, 64
  br i1 %744, label %826, label %914

745:                                              ; preds = %728
  %746 = getelementptr inbounds %"struct.std::__1::array", %"struct.std::__1::array"* %661, i64 %729, i32 0, i64 0
  %747 = bitcast float* %746 to <4 x float>*
  %748 = load <4 x float>, <4 x float>* %747, align 4, !alias.scope !29
  %749 = load <4 x float>, <4 x float>* %663, align 16, !alias.scope !32, !noalias !29
  %750 = fadd <4 x float> %748, %749
  store <4 x float> %750, <4 x float>* %664, align 16, !alias.scope !32, !noalias !29
  %751 = getelementptr inbounds %"struct.std::__1::array", %"struct.std::__1::array"* %661, i64 %729, i32 0, i64 4
  %752 = bitcast float* %751 to <4 x float>*
  %753 = load <4 x float>, <4 x float>* %752, align 4, !alias.scope !29
  %754 = load <4 x float>, <4 x float>* %666, align 16, !alias.scope !32, !noalias !29
  %755 = fadd <4 x float> %753, %754
  store <4 x float> %755, <4 x float>* %667, align 16, !alias.scope !32, !noalias !29
  %756 = getelementptr inbounds %"struct.std::__1::array", %"struct.std::__1::array"* %661, i64 %729, i32 0, i64 8
  %757 = bitcast float* %756 to <4 x float>*
  %758 = load <4 x float>, <4 x float>* %757, align 4, !alias.scope !29
  %759 = load <4 x float>, <4 x float>* %669, align 16, !alias.scope !32, !noalias !29
  %760 = fadd <4 x float> %758, %759
  store <4 x float> %760, <4 x float>* %670, align 16, !alias.scope !32, !noalias !29
  %761 = getelementptr inbounds %"struct.std::__1::array", %"struct.std::__1::array"* %661, i64 %729, i32 0, i64 12
  %762 = bitcast float* %761 to <4 x float>*
  %763 = load <4 x float>, <4 x float>* %762, align 4, !alias.scope !29
  %764 = load <4 x float>, <4 x float>* %672, align 16, !alias.scope !32, !noalias !29
  %765 = fadd <4 x float> %763, %764
  store <4 x float> %765, <4 x float>* %673, align 16, !alias.scope !32, !noalias !29
  %766 = getelementptr inbounds %"struct.std::__1::array", %"struct.std::__1::array"* %661, i64 %729, i32 0, i64 16
  %767 = bitcast float* %766 to <4 x float>*
  %768 = load <4 x float>, <4 x float>* %767, align 4, !alias.scope !29
  %769 = load <4 x float>, <4 x float>* %675, align 16, !alias.scope !32, !noalias !29
  %770 = fadd <4 x float> %768, %769
  store <4 x float> %770, <4 x float>* %676, align 16, !alias.scope !32, !noalias !29
  %771 = getelementptr inbounds %"struct.std::__1::array", %"struct.std::__1::array"* %661, i64 %729, i32 0, i64 20
  %772 = bitcast float* %771 to <4 x float>*
  %773 = load <4 x float>, <4 x float>* %772, align 4, !alias.scope !29
  %774 = load <4 x float>, <4 x float>* %678, align 16, !alias.scope !32, !noalias !29
  %775 = fadd <4 x float> %773, %774
  store <4 x float> %775, <4 x float>* %679, align 16, !alias.scope !32, !noalias !29
  %776 = getelementptr inbounds %"struct.std::__1::array", %"struct.std::__1::array"* %661, i64 %729, i32 0, i64 24
  %777 = bitcast float* %776 to <4 x float>*
  %778 = load <4 x float>, <4 x float>* %777, align 4, !alias.scope !29
  %779 = load <4 x float>, <4 x float>* %681, align 16, !alias.scope !32, !noalias !29
  %780 = fadd <4 x float> %778, %779
  store <4 x float> %780, <4 x float>* %682, align 16, !alias.scope !32, !noalias !29
  %781 = getelementptr inbounds %"struct.std::__1::array", %"struct.std::__1::array"* %661, i64 %729, i32 0, i64 28
  %782 = bitcast float* %781 to <4 x float>*
  %783 = load <4 x float>, <4 x float>* %782, align 4, !alias.scope !29
  %784 = load <4 x float>, <4 x float>* %684, align 16, !alias.scope !32, !noalias !29
  %785 = fadd <4 x float> %783, %784
  store <4 x float> %785, <4 x float>* %685, align 16, !alias.scope !32, !noalias !29
  %786 = getelementptr inbounds %"struct.std::__1::array", %"struct.std::__1::array"* %661, i64 %729, i32 0, i64 32
  %787 = bitcast float* %786 to <4 x float>*
  %788 = load <4 x float>, <4 x float>* %787, align 4, !alias.scope !29
  %789 = load <4 x float>, <4 x float>* %687, align 16, !alias.scope !32, !noalias !29
  %790 = fadd <4 x float> %788, %789
  store <4 x float> %790, <4 x float>* %688, align 16, !alias.scope !32, !noalias !29
  %791 = getelementptr inbounds %"struct.std::__1::array", %"struct.std::__1::array"* %661, i64 %729, i32 0, i64 36
  %792 = bitcast float* %791 to <4 x float>*
  %793 = load <4 x float>, <4 x float>* %792, align 4, !alias.scope !29
  %794 = load <4 x float>, <4 x float>* %690, align 16, !alias.scope !32, !noalias !29
  %795 = fadd <4 x float> %793, %794
  store <4 x float> %795, <4 x float>* %691, align 16, !alias.scope !32, !noalias !29
  %796 = getelementptr inbounds %"struct.std::__1::array", %"struct.std::__1::array"* %661, i64 %729, i32 0, i64 40
  %797 = bitcast float* %796 to <4 x float>*
  %798 = load <4 x float>, <4 x float>* %797, align 4, !alias.scope !29
  %799 = load <4 x float>, <4 x float>* %693, align 16, !alias.scope !32, !noalias !29
  %800 = fadd <4 x float> %798, %799
  store <4 x float> %800, <4 x float>* %694, align 16, !alias.scope !32, !noalias !29
  %801 = getelementptr inbounds %"struct.std::__1::array", %"struct.std::__1::array"* %661, i64 %729, i32 0, i64 44
  %802 = bitcast float* %801 to <4 x float>*
  %803 = load <4 x float>, <4 x float>* %802, align 4, !alias.scope !29
  %804 = load <4 x float>, <4 x float>* %696, align 16, !alias.scope !32, !noalias !29
  %805 = fadd <4 x float> %803, %804
  store <4 x float> %805, <4 x float>* %697, align 16, !alias.scope !32, !noalias !29
  %806 = getelementptr inbounds %"struct.std::__1::array", %"struct.std::__1::array"* %661, i64 %729, i32 0, i64 48
  %807 = bitcast float* %806 to <4 x float>*
  %808 = load <4 x float>, <4 x float>* %807, align 4, !alias.scope !29
  %809 = load <4 x float>, <4 x float>* %699, align 16, !alias.scope !32, !noalias !29
  %810 = fadd <4 x float> %808, %809
  store <4 x float> %810, <4 x float>* %700, align 16, !alias.scope !32, !noalias !29
  %811 = getelementptr inbounds %"struct.std::__1::array", %"struct.std::__1::array"* %661, i64 %729, i32 0, i64 52
  %812 = bitcast float* %811 to <4 x float>*
  %813 = load <4 x float>, <4 x float>* %812, align 4, !alias.scope !29
  %814 = load <4 x float>, <4 x float>* %702, align 16, !alias.scope !32, !noalias !29
  %815 = fadd <4 x float> %813, %814
  store <4 x float> %815, <4 x float>* %703, align 16, !alias.scope !32, !noalias !29
  %816 = getelementptr inbounds %"struct.std::__1::array", %"struct.std::__1::array"* %661, i64 %729, i32 0, i64 56
  %817 = bitcast float* %816 to <4 x float>*
  %818 = load <4 x float>, <4 x float>* %817, align 4, !alias.scope !29
  %819 = load <4 x float>, <4 x float>* %705, align 16, !alias.scope !32, !noalias !29
  %820 = fadd <4 x float> %818, %819
  store <4 x float> %820, <4 x float>* %706, align 16, !alias.scope !32, !noalias !29
  %821 = getelementptr inbounds %"struct.std::__1::array", %"struct.std::__1::array"* %661, i64 %729, i32 0, i64 60
  %822 = bitcast float* %821 to <4 x float>*
  %823 = load <4 x float>, <4 x float>* %822, align 4, !alias.scope !29
  %824 = load <4 x float>, <4 x float>* %708, align 16, !alias.scope !32, !noalias !29
  %825 = fadd <4 x float> %823, %824
  store <4 x float> %825, <4 x float>* %709, align 16, !alias.scope !32, !noalias !29
  br label %736

826:                                              ; preds = %914, %736
  %827 = add nuw i64 %729, 1
  %828 = icmp eq i64 %827, %395
  br i1 %828, label %829, label %728

829:                                              ; preds = %826
  %830 = insertelement <4 x float> undef, float %566, i32 0
  %831 = shufflevector <4 x float> %830, <4 x float> undef, <4 x i32> zeroinitializer
  %832 = bitcast %"struct.std::__1::array"* %11 to <4 x float>*
  %833 = load <4 x float>, <4 x float>* %832, align 16
  %834 = fmul <4 x float> %831, %833
  %835 = bitcast %"struct.std::__1::array"* %11 to <4 x float>*
  store <4 x float> %834, <4 x float>* %835, align 16
  %836 = getelementptr inbounds %"struct.std::__1::array", %"struct.std::__1::array"* %11, i64 0, i32 0, i64 4
  %837 = bitcast float* %836 to <4 x float>*
  %838 = load <4 x float>, <4 x float>* %837, align 16
  %839 = fmul <4 x float> %831, %838
  %840 = bitcast float* %836 to <4 x float>*
  store <4 x float> %839, <4 x float>* %840, align 16
  %841 = getelementptr inbounds %"struct.std::__1::array", %"struct.std::__1::array"* %11, i64 0, i32 0, i64 8
  %842 = bitcast float* %841 to <4 x float>*
  %843 = load <4 x float>, <4 x float>* %842, align 16
  %844 = fmul <4 x float> %831, %843
  %845 = bitcast float* %841 to <4 x float>*
  store <4 x float> %844, <4 x float>* %845, align 16
  %846 = getelementptr inbounds %"struct.std::__1::array", %"struct.std::__1::array"* %11, i64 0, i32 0, i64 12
  %847 = bitcast float* %846 to <4 x float>*
  %848 = load <4 x float>, <4 x float>* %847, align 16
  %849 = fmul <4 x float> %831, %848
  %850 = bitcast float* %846 to <4 x float>*
  store <4 x float> %849, <4 x float>* %850, align 16
  %851 = getelementptr inbounds %"struct.std::__1::array", %"struct.std::__1::array"* %11, i64 0, i32 0, i64 16
  %852 = bitcast float* %851 to <4 x float>*
  %853 = load <4 x float>, <4 x float>* %852, align 16
  %854 = fmul <4 x float> %831, %853
  %855 = bitcast float* %851 to <4 x float>*
  store <4 x float> %854, <4 x float>* %855, align 16
  %856 = getelementptr inbounds %"struct.std::__1::array", %"struct.std::__1::array"* %11, i64 0, i32 0, i64 20
  %857 = bitcast float* %856 to <4 x float>*
  %858 = load <4 x float>, <4 x float>* %857, align 16
  %859 = fmul <4 x float> %831, %858
  %860 = bitcast float* %856 to <4 x float>*
  store <4 x float> %859, <4 x float>* %860, align 16
  %861 = getelementptr inbounds %"struct.std::__1::array", %"struct.std::__1::array"* %11, i64 0, i32 0, i64 24
  %862 = bitcast float* %861 to <4 x float>*
  %863 = load <4 x float>, <4 x float>* %862, align 16
  %864 = fmul <4 x float> %831, %863
  %865 = bitcast float* %861 to <4 x float>*
  store <4 x float> %864, <4 x float>* %865, align 16
  %866 = getelementptr inbounds %"struct.std::__1::array", %"struct.std::__1::array"* %11, i64 0, i32 0, i64 28
  %867 = bitcast float* %866 to <4 x float>*
  %868 = load <4 x float>, <4 x float>* %867, align 16
  %869 = fmul <4 x float> %831, %868
  %870 = bitcast float* %866 to <4 x float>*
  store <4 x float> %869, <4 x float>* %870, align 16
  %871 = getelementptr inbounds %"struct.std::__1::array", %"struct.std::__1::array"* %11, i64 0, i32 0, i64 32
  %872 = bitcast float* %871 to <4 x float>*
  %873 = load <4 x float>, <4 x float>* %872, align 16
  %874 = fmul <4 x float> %831, %873
  %875 = bitcast float* %871 to <4 x float>*
  store <4 x float> %874, <4 x float>* %875, align 16
  %876 = getelementptr inbounds %"struct.std::__1::array", %"struct.std::__1::array"* %11, i64 0, i32 0, i64 36
  %877 = bitcast float* %876 to <4 x float>*
  %878 = load <4 x float>, <4 x float>* %877, align 16
  %879 = fmul <4 x float> %831, %878
  %880 = bitcast float* %876 to <4 x float>*
  store <4 x float> %879, <4 x float>* %880, align 16
  %881 = getelementptr inbounds %"struct.std::__1::array", %"struct.std::__1::array"* %11, i64 0, i32 0, i64 40
  %882 = bitcast float* %881 to <4 x float>*
  %883 = load <4 x float>, <4 x float>* %882, align 16
  %884 = fmul <4 x float> %831, %883
  %885 = bitcast float* %881 to <4 x float>*
  store <4 x float> %884, <4 x float>* %885, align 16
  %886 = getelementptr inbounds %"struct.std::__1::array", %"struct.std::__1::array"* %11, i64 0, i32 0, i64 44
  %887 = bitcast float* %886 to <4 x float>*
  %888 = load <4 x float>, <4 x float>* %887, align 16
  %889 = fmul <4 x float> %831, %888
  %890 = bitcast float* %886 to <4 x float>*
  store <4 x float> %889, <4 x float>* %890, align 16
  %891 = getelementptr inbounds %"struct.std::__1::array", %"struct.std::__1::array"* %11, i64 0, i32 0, i64 48
  %892 = bitcast float* %891 to <4 x float>*
  %893 = load <4 x float>, <4 x float>* %892, align 16
  %894 = fmul <4 x float> %831, %893
  %895 = bitcast float* %891 to <4 x float>*
  store <4 x float> %894, <4 x float>* %895, align 16
  %896 = getelementptr inbounds %"struct.std::__1::array", %"struct.std::__1::array"* %11, i64 0, i32 0, i64 52
  %897 = bitcast float* %896 to <4 x float>*
  %898 = load <4 x float>, <4 x float>* %897, align 16
  %899 = fmul <4 x float> %831, %898
  %900 = bitcast float* %896 to <4 x float>*
  store <4 x float> %899, <4 x float>* %900, align 16
  %901 = getelementptr inbounds %"struct.std::__1::array", %"struct.std::__1::array"* %11, i64 0, i32 0, i64 56
  %902 = bitcast float* %901 to <4 x float>*
  %903 = load <4 x float>, <4 x float>* %902, align 16
  %904 = fmul <4 x float> %831, %903
  %905 = bitcast float* %901 to <4 x float>*
  store <4 x float> %904, <4 x float>* %905, align 16
  %906 = getelementptr inbounds %"struct.std::__1::array", %"struct.std::__1::array"* %11, i64 0, i32 0, i64 60
  %907 = bitcast float* %906 to <4 x float>*
  %908 = load <4 x float>, <4 x float>* %907, align 16
  %909 = fmul <4 x float> %831, %908
  %910 = bitcast float* %906 to <4 x float>*
  store <4 x float> %909, <4 x float>* %910, align 16
  %911 = getelementptr inbounds %"struct.std::__1::array", %"struct.std::__1::array"* %11, i64 0, i32 0, i64 64
  %912 = load float, float* %911, align 16
  %913 = fmul float %566, %912
  store float %913, float* %911, align 16
  br label %935

914:                                              ; preds = %736, %914
  %915 = phi i64 [ %927, %914 ], [ %743, %736 ]
  %916 = getelementptr inbounds %"struct.std::__1::array", %"struct.std::__1::array"* %661, i64 %729, i32 0, i64 %915
  %917 = load float, float* %916, align 4
  %918 = getelementptr inbounds %"struct.std::__1::array", %"struct.std::__1::array"* %11, i64 0, i32 0, i64 %915
  %919 = load float, float* %918, align 4
  %920 = fadd float %917, %919
  store float %920, float* %918, align 4
  %921 = add nuw nsw i64 %915, 1
  %922 = getelementptr inbounds %"struct.std::__1::array", %"struct.std::__1::array"* %661, i64 %729, i32 0, i64 %921
  %923 = load float, float* %922, align 4
  %924 = getelementptr inbounds %"struct.std::__1::array", %"struct.std::__1::array"* %11, i64 0, i32 0, i64 %921
  %925 = load float, float* %924, align 4
  %926 = fadd float %923, %925
  store float %926, float* %924, align 4
  %927 = add nuw nsw i64 %915, 2
  %928 = icmp eq i64 %927, 65
  br i1 %928, label %826, label %914, !llvm.loop !34

929:                                              ; preds = %372
  %930 = getelementptr inbounds %"struct.std::__1::array", %"struct.std::__1::array"* %410, i64 0, i32 0, i64 0
  call void @_ZN6webrtc11ReverbModel25UpdateReverbNoFreqShapingEN3rtc9ArrayViewIKfLln4711EEEff(%"class.webrtc::ReverbModel"* %385, float* %930, i64 65, float 1.000000e+00, float %384) #15
  %931 = sext i32 %402 to i64
  %932 = load %"class.std::__1::vector.43"*, %"class.std::__1::vector.43"** %387, align 8
  %933 = getelementptr inbounds %"class.std::__1::vector.43", %"class.std::__1::vector.43"* %932, i64 %931, i32 0, i32 0
  %934 = load %"struct.std::__1::array"*, %"struct.std::__1::array"** %933, align 8
  br label %935

935:                                              ; preds = %829, %929
  %936 = phi %"struct.std::__1::array"* [ %934, %929 ], [ %11, %829 ]
  %937 = getelementptr inbounds %"struct.std::__1::array", %"struct.std::__1::array"* %18, i64 1
  %938 = getelementptr %"struct.std::__1::array", %"struct.std::__1::array"* %936, i64 1
  %939 = getelementptr %"class.webrtc::AecState", %"class.webrtc::AecState"* %0, i64 0, i32 20, i32 0, i32 0, i64 0
  %940 = getelementptr %"class.webrtc::AecState", %"class.webrtc::AecState"* %0, i64 0, i32 20, i32 0, i32 0, i64 65
  %941 = icmp ult %"struct.std::__1::array"* %18, %938
  %942 = icmp ult %"struct.std::__1::array"* %936, %937
  %943 = and i1 %941, %942
  %944 = bitcast float* %940 to %"struct.std::__1::array"*
  %945 = icmp ult %"struct.std::__1::array"* %18, %944
  %946 = getelementptr inbounds %"struct.std::__1::array", %"struct.std::__1::array"* %937, i64 0, i32 0, i64 0
  %947 = icmp ult float* %939, %946
  %948 = and i1 %945, %947
  %949 = or i1 %943, %948
  br i1 %949, label %1093, label %950

950:                                              ; preds = %935
  %951 = bitcast %"struct.std::__1::array"* %936 to <4 x float>*
  %952 = load <4 x float>, <4 x float>* %951, align 4, !alias.scope !35
  %953 = getelementptr inbounds %"class.webrtc::AecState", %"class.webrtc::AecState"* %0, i64 0, i32 20, i32 0, i32 0, i64 0
  %954 = bitcast float* %953 to <4 x float>*
  %955 = load <4 x float>, <4 x float>* %954, align 4, !alias.scope !38
  %956 = fadd <4 x float> %952, %955
  %957 = bitcast %"struct.std::__1::array"* %18 to <4 x float>*
  store <4 x float> %956, <4 x float>* %957, align 16, !alias.scope !40, !noalias !42
  %958 = getelementptr inbounds %"struct.std::__1::array", %"struct.std::__1::array"* %936, i64 0, i32 0, i64 4
  %959 = bitcast float* %958 to <4 x float>*
  %960 = load <4 x float>, <4 x float>* %959, align 4, !alias.scope !35
  %961 = getelementptr inbounds %"class.webrtc::AecState", %"class.webrtc::AecState"* %0, i64 0, i32 20, i32 0, i32 0, i64 4
  %962 = bitcast float* %961 to <4 x float>*
  %963 = load <4 x float>, <4 x float>* %962, align 4, !alias.scope !38
  %964 = fadd <4 x float> %960, %963
  %965 = getelementptr inbounds %"struct.std::__1::array", %"struct.std::__1::array"* %18, i64 0, i32 0, i64 4
  %966 = bitcast float* %965 to <4 x float>*
  store <4 x float> %964, <4 x float>* %966, align 16, !alias.scope !40, !noalias !42
  %967 = getelementptr inbounds %"struct.std::__1::array", %"struct.std::__1::array"* %936, i64 0, i32 0, i64 8
  %968 = bitcast float* %967 to <4 x float>*
  %969 = load <4 x float>, <4 x float>* %968, align 4, !alias.scope !35
  %970 = getelementptr inbounds %"class.webrtc::AecState", %"class.webrtc::AecState"* %0, i64 0, i32 20, i32 0, i32 0, i64 8
  %971 = bitcast float* %970 to <4 x float>*
  %972 = load <4 x float>, <4 x float>* %971, align 4, !alias.scope !38
  %973 = fadd <4 x float> %969, %972
  %974 = getelementptr inbounds %"struct.std::__1::array", %"struct.std::__1::array"* %18, i64 0, i32 0, i64 8
  %975 = bitcast float* %974 to <4 x float>*
  store <4 x float> %973, <4 x float>* %975, align 16, !alias.scope !40, !noalias !42
  %976 = getelementptr inbounds %"struct.std::__1::array", %"struct.std::__1::array"* %936, i64 0, i32 0, i64 12
  %977 = bitcast float* %976 to <4 x float>*
  %978 = load <4 x float>, <4 x float>* %977, align 4, !alias.scope !35
  %979 = getelementptr inbounds %"class.webrtc::AecState", %"class.webrtc::AecState"* %0, i64 0, i32 20, i32 0, i32 0, i64 12
  %980 = bitcast float* %979 to <4 x float>*
  %981 = load <4 x float>, <4 x float>* %980, align 4, !alias.scope !38
  %982 = fadd <4 x float> %978, %981
  %983 = getelementptr inbounds %"struct.std::__1::array", %"struct.std::__1::array"* %18, i64 0, i32 0, i64 12
  %984 = bitcast float* %983 to <4 x float>*
  store <4 x float> %982, <4 x float>* %984, align 16, !alias.scope !40, !noalias !42
  %985 = getelementptr inbounds %"struct.std::__1::array", %"struct.std::__1::array"* %936, i64 0, i32 0, i64 16
  %986 = bitcast float* %985 to <4 x float>*
  %987 = load <4 x float>, <4 x float>* %986, align 4, !alias.scope !35
  %988 = getelementptr inbounds %"class.webrtc::AecState", %"class.webrtc::AecState"* %0, i64 0, i32 20, i32 0, i32 0, i64 16
  %989 = bitcast float* %988 to <4 x float>*
  %990 = load <4 x float>, <4 x float>* %989, align 4, !alias.scope !38
  %991 = fadd <4 x float> %987, %990
  %992 = getelementptr inbounds %"struct.std::__1::array", %"struct.std::__1::array"* %18, i64 0, i32 0, i64 16
  %993 = bitcast float* %992 to <4 x float>*
  store <4 x float> %991, <4 x float>* %993, align 16, !alias.scope !40, !noalias !42
  %994 = getelementptr inbounds %"struct.std::__1::array", %"struct.std::__1::array"* %936, i64 0, i32 0, i64 20
  %995 = bitcast float* %994 to <4 x float>*
  %996 = load <4 x float>, <4 x float>* %995, align 4, !alias.scope !35
  %997 = getelementptr inbounds %"class.webrtc::AecState", %"class.webrtc::AecState"* %0, i64 0, i32 20, i32 0, i32 0, i64 20
  %998 = bitcast float* %997 to <4 x float>*
  %999 = load <4 x float>, <4 x float>* %998, align 4, !alias.scope !38
  %1000 = fadd <4 x float> %996, %999
  %1001 = getelementptr inbounds %"struct.std::__1::array", %"struct.std::__1::array"* %18, i64 0, i32 0, i64 20
  %1002 = bitcast float* %1001 to <4 x float>*
  store <4 x float> %1000, <4 x float>* %1002, align 16, !alias.scope !40, !noalias !42
  %1003 = getelementptr inbounds %"struct.std::__1::array", %"struct.std::__1::array"* %936, i64 0, i32 0, i64 24
  %1004 = bitcast float* %1003 to <4 x float>*
  %1005 = load <4 x float>, <4 x float>* %1004, align 4, !alias.scope !35
  %1006 = getelementptr inbounds %"class.webrtc::AecState", %"class.webrtc::AecState"* %0, i64 0, i32 20, i32 0, i32 0, i64 24
  %1007 = bitcast float* %1006 to <4 x float>*
  %1008 = load <4 x float>, <4 x float>* %1007, align 4, !alias.scope !38
  %1009 = fadd <4 x float> %1005, %1008
  %1010 = getelementptr inbounds %"struct.std::__1::array", %"struct.std::__1::array"* %18, i64 0, i32 0, i64 24
  %1011 = bitcast float* %1010 to <4 x float>*
  store <4 x float> %1009, <4 x float>* %1011, align 16, !alias.scope !40, !noalias !42
  %1012 = getelementptr inbounds %"struct.std::__1::array", %"struct.std::__1::array"* %936, i64 0, i32 0, i64 28
  %1013 = bitcast float* %1012 to <4 x float>*
  %1014 = load <4 x float>, <4 x float>* %1013, align 4, !alias.scope !35
  %1015 = getelementptr inbounds %"class.webrtc::AecState", %"class.webrtc::AecState"* %0, i64 0, i32 20, i32 0, i32 0, i64 28
  %1016 = bitcast float* %1015 to <4 x float>*
  %1017 = load <4 x float>, <4 x float>* %1016, align 4, !alias.scope !38
  %1018 = fadd <4 x float> %1014, %1017
  %1019 = getelementptr inbounds %"struct.std::__1::array", %"struct.std::__1::array"* %18, i64 0, i32 0, i64 28
  %1020 = bitcast float* %1019 to <4 x float>*
  store <4 x float> %1018, <4 x float>* %1020, align 16, !alias.scope !40, !noalias !42
  %1021 = getelementptr inbounds %"struct.std::__1::array", %"struct.std::__1::array"* %936, i64 0, i32 0, i64 32
  %1022 = bitcast float* %1021 to <4 x float>*
  %1023 = load <4 x float>, <4 x float>* %1022, align 4, !alias.scope !35
  %1024 = getelementptr inbounds %"class.webrtc::AecState", %"class.webrtc::AecState"* %0, i64 0, i32 20, i32 0, i32 0, i64 32
  %1025 = bitcast float* %1024 to <4 x float>*
  %1026 = load <4 x float>, <4 x float>* %1025, align 4, !alias.scope !38
  %1027 = fadd <4 x float> %1023, %1026
  %1028 = getelementptr inbounds %"struct.std::__1::array", %"struct.std::__1::array"* %18, i64 0, i32 0, i64 32
  %1029 = bitcast float* %1028 to <4 x float>*
  store <4 x float> %1027, <4 x float>* %1029, align 16, !alias.scope !40, !noalias !42
  %1030 = getelementptr inbounds %"struct.std::__1::array", %"struct.std::__1::array"* %936, i64 0, i32 0, i64 36
  %1031 = bitcast float* %1030 to <4 x float>*
  %1032 = load <4 x float>, <4 x float>* %1031, align 4, !alias.scope !35
  %1033 = getelementptr inbounds %"class.webrtc::AecState", %"class.webrtc::AecState"* %0, i64 0, i32 20, i32 0, i32 0, i64 36
  %1034 = bitcast float* %1033 to <4 x float>*
  %1035 = load <4 x float>, <4 x float>* %1034, align 4, !alias.scope !38
  %1036 = fadd <4 x float> %1032, %1035
  %1037 = getelementptr inbounds %"struct.std::__1::array", %"struct.std::__1::array"* %18, i64 0, i32 0, i64 36
  %1038 = bitcast float* %1037 to <4 x float>*
  store <4 x float> %1036, <4 x float>* %1038, align 16, !alias.scope !40, !noalias !42
  %1039 = getelementptr inbounds %"struct.std::__1::array", %"struct.std::__1::array"* %936, i64 0, i32 0, i64 40
  %1040 = bitcast float* %1039 to <4 x float>*
  %1041 = load <4 x float>, <4 x float>* %1040, align 4, !alias.scope !35
  %1042 = getelementptr inbounds %"class.webrtc::AecState", %"class.webrtc::AecState"* %0, i64 0, i32 20, i32 0, i32 0, i64 40
  %1043 = bitcast float* %1042 to <4 x float>*
  %1044 = load <4 x float>, <4 x float>* %1043, align 4, !alias.scope !38
  %1045 = fadd <4 x float> %1041, %1044
  %1046 = getelementptr inbounds %"struct.std::__1::array", %"struct.std::__1::array"* %18, i64 0, i32 0, i64 40
  %1047 = bitcast float* %1046 to <4 x float>*
  store <4 x float> %1045, <4 x float>* %1047, align 16, !alias.scope !40, !noalias !42
  %1048 = getelementptr inbounds %"struct.std::__1::array", %"struct.std::__1::array"* %936, i64 0, i32 0, i64 44
  %1049 = bitcast float* %1048 to <4 x float>*
  %1050 = load <4 x float>, <4 x float>* %1049, align 4, !alias.scope !35
  %1051 = getelementptr inbounds %"class.webrtc::AecState", %"class.webrtc::AecState"* %0, i64 0, i32 20, i32 0, i32 0, i64 44
  %1052 = bitcast float* %1051 to <4 x float>*
  %1053 = load <4 x float>, <4 x float>* %1052, align 4, !alias.scope !38
  %1054 = fadd <4 x float> %1050, %1053
  %1055 = getelementptr inbounds %"struct.std::__1::array", %"struct.std::__1::array"* %18, i64 0, i32 0, i64 44
  %1056 = bitcast float* %1055 to <4 x float>*
  store <4 x float> %1054, <4 x float>* %1056, align 16, !alias.scope !40, !noalias !42
  %1057 = getelementptr inbounds %"struct.std::__1::array", %"struct.std::__1::array"* %936, i64 0, i32 0, i64 48
  %1058 = bitcast float* %1057 to <4 x float>*
  %1059 = load <4 x float>, <4 x float>* %1058, align 4, !alias.scope !35
  %1060 = getelementptr inbounds %"class.webrtc::AecState", %"class.webrtc::AecState"* %0, i64 0, i32 20, i32 0, i32 0, i64 48
  %1061 = bitcast float* %1060 to <4 x float>*
  %1062 = load <4 x float>, <4 x float>* %1061, align 4, !alias.scope !38
  %1063 = fadd <4 x float> %1059, %1062
  %1064 = getelementptr inbounds %"struct.std::__1::array", %"struct.std::__1::array"* %18, i64 0, i32 0, i64 48
  %1065 = bitcast float* %1064 to <4 x float>*
  store <4 x float> %1063, <4 x float>* %1065, align 16, !alias.scope !40, !noalias !42
  %1066 = getelementptr inbounds %"struct.std::__1::array", %"struct.std::__1::array"* %936, i64 0, i32 0, i64 52
  %1067 = bitcast float* %1066 to <4 x float>*
  %1068 = load <4 x float>, <4 x float>* %1067, align 4, !alias.scope !35
  %1069 = getelementptr inbounds %"class.webrtc::AecState", %"class.webrtc::AecState"* %0, i64 0, i32 20, i32 0, i32 0, i64 52
  %1070 = bitcast float* %1069 to <4 x float>*
  %1071 = load <4 x float>, <4 x float>* %1070, align 4, !alias.scope !38
  %1072 = fadd <4 x float> %1068, %1071
  %1073 = getelementptr inbounds %"struct.std::__1::array", %"struct.std::__1::array"* %18, i64 0, i32 0, i64 52
  %1074 = bitcast float* %1073 to <4 x float>*
  store <4 x float> %1072, <4 x float>* %1074, align 16, !alias.scope !40, !noalias !42
  %1075 = getelementptr inbounds %"struct.std::__1::array", %"struct.std::__1::array"* %936, i64 0, i32 0, i64 56
  %1076 = bitcast float* %1075 to <4 x float>*
  %1077 = load <4 x float>, <4 x float>* %1076, align 4, !alias.scope !35
  %1078 = getelementptr inbounds %"class.webrtc::AecState", %"class.webrtc::AecState"* %0, i64 0, i32 20, i32 0, i32 0, i64 56
  %1079 = bitcast float* %1078 to <4 x float>*
  %1080 = load <4 x float>, <4 x float>* %1079, align 4, !alias.scope !38
  %1081 = fadd <4 x float> %1077, %1080
  %1082 = getelementptr inbounds %"struct.std::__1::array", %"struct.std::__1::array"* %18, i64 0, i32 0, i64 56
  %1083 = bitcast float* %1082 to <4 x float>*
  store <4 x float> %1081, <4 x float>* %1083, align 16, !alias.scope !40, !noalias !42
  %1084 = getelementptr inbounds %"struct.std::__1::array", %"struct.std::__1::array"* %936, i64 0, i32 0, i64 60
  %1085 = bitcast float* %1084 to <4 x float>*
  %1086 = load <4 x float>, <4 x float>* %1085, align 4, !alias.scope !35
  %1087 = getelementptr inbounds %"class.webrtc::AecState", %"class.webrtc::AecState"* %0, i64 0, i32 20, i32 0, i32 0, i64 60
  %1088 = bitcast float* %1087 to <4 x float>*
  %1089 = load <4 x float>, <4 x float>* %1088, align 4, !alias.scope !38
  %1090 = fadd <4 x float> %1086, %1089
  %1091 = getelementptr inbounds %"struct.std::__1::array", %"struct.std::__1::array"* %18, i64 0, i32 0, i64 60
  %1092 = bitcast float* %1091 to <4 x float>*
  store <4 x float> %1090, <4 x float>* %1092, align 16, !alias.scope !40, !noalias !42
  br label %1093

1093:                                             ; preds = %935, %950
  %1094 = phi i64 [ 0, %935 ], [ 64, %950 ]
  br label %1095

1095:                                             ; preds = %1095, %1093
  %1096 = phi i64 [ %1104, %1095 ], [ %1094, %1093 ]
  %1097 = phi i64 [ %1105, %1095 ], [ 1, %1093 ]
  %1098 = getelementptr inbounds %"struct.std::__1::array", %"struct.std::__1::array"* %936, i64 0, i32 0, i64 %1096
  %1099 = load float, float* %1098, align 4
  %1100 = getelementptr inbounds %"class.webrtc::AecState", %"class.webrtc::AecState"* %0, i64 0, i32 20, i32 0, i32 0, i64 %1096
  %1101 = load float, float* %1100, align 4
  %1102 = fadd float %1099, %1101
  %1103 = getelementptr inbounds %"struct.std::__1::array", %"struct.std::__1::array"* %18, i64 0, i32 0, i64 %1096
  store float %1102, float* %1103, align 4
  %1104 = add nuw nsw i64 %1096, 1
  %1105 = add i64 %1097, -1
  %1106 = icmp eq i64 %1105, 0
  br i1 %1106, label %1107, label %1095, !llvm.loop !43

1107:                                             ; preds = %1095
  %1108 = icmp eq i64 %1094, 64
  br i1 %1108, label %1140, label %1109

1109:                                             ; preds = %1107, %1109
  %1110 = phi i64 [ %1138, %1109 ], [ %1104, %1107 ]
  %1111 = getelementptr inbounds %"struct.std::__1::array", %"struct.std::__1::array"* %936, i64 0, i32 0, i64 %1110
  %1112 = load float, float* %1111, align 4
  %1113 = getelementptr inbounds %"class.webrtc::AecState", %"class.webrtc::AecState"* %0, i64 0, i32 20, i32 0, i32 0, i64 %1110
  %1114 = load float, float* %1113, align 4
  %1115 = fadd float %1112, %1114
  %1116 = getelementptr inbounds %"struct.std::__1::array", %"struct.std::__1::array"* %18, i64 0, i32 0, i64 %1110
  store float %1115, float* %1116, align 4
  %1117 = add nuw nsw i64 %1110, 1
  %1118 = getelementptr inbounds %"struct.std::__1::array", %"struct.std::__1::array"* %936, i64 0, i32 0, i64 %1117
  %1119 = load float, float* %1118, align 4
  %1120 = getelementptr inbounds %"class.webrtc::AecState", %"class.webrtc::AecState"* %0, i64 0, i32 20, i32 0, i32 0, i64 %1117
  %1121 = load float, float* %1120, align 4
  %1122 = fadd float %1119, %1121
  %1123 = getelementptr inbounds %"struct.std::__1::array", %"struct.std::__1::array"* %18, i64 0, i32 0, i64 %1117
  store float %1122, float* %1123, align 4
  %1124 = add nuw nsw i64 %1110, 2
  %1125 = getelementptr inbounds %"struct.std::__1::array", %"struct.std::__1::array"* %936, i64 0, i32 0, i64 %1124
  %1126 = load float, float* %1125, align 4
  %1127 = getelementptr inbounds %"class.webrtc::AecState", %"class.webrtc::AecState"* %0, i64 0, i32 20, i32 0, i32 0, i64 %1124
  %1128 = load float, float* %1127, align 4
  %1129 = fadd float %1126, %1128
  %1130 = getelementptr inbounds %"struct.std::__1::array", %"struct.std::__1::array"* %18, i64 0, i32 0, i64 %1124
  store float %1129, float* %1130, align 4
  %1131 = add nuw nsw i64 %1110, 3
  %1132 = getelementptr inbounds %"struct.std::__1::array", %"struct.std::__1::array"* %936, i64 0, i32 0, i64 %1131
  %1133 = load float, float* %1132, align 4
  %1134 = getelementptr inbounds %"class.webrtc::AecState", %"class.webrtc::AecState"* %0, i64 0, i32 20, i32 0, i32 0, i64 %1131
  %1135 = load float, float* %1134, align 4
  %1136 = fadd float %1133, %1135
  %1137 = getelementptr inbounds %"struct.std::__1::array", %"struct.std::__1::array"* %18, i64 0, i32 0, i64 %1131
  store float %1136, float* %1137, align 4
  %1138 = add nuw nsw i64 %1110, 4
  %1139 = icmp eq i64 %1138, 65
  br i1 %1139, label %1140, label %1109, !llvm.loop !44

1140:                                             ; preds = %1109, %1107
  call void @llvm.lifetime.end.p0i8(i64 260, i8* nonnull %12) #15
  %1141 = getelementptr inbounds %"class.webrtc::AecState", %"class.webrtc::AecState"* %0, i64 0, i32 1, i32 5, i32 6
  %1142 = load i8, i8* %1141, align 4, !range !2
  %1143 = icmp eq i8 %1142, 0
  br i1 %1143, label %1151, label %1144

1144:                                             ; preds = %1140
  %1145 = getelementptr inbounds %"class.webrtc::AecState", %"class.webrtc::AecState"* %0, i64 0, i32 18
  %1146 = getelementptr inbounds %"class.webrtc::ReverbModel", %"class.webrtc::ReverbModel"* %385, i64 0, i32 0, i32 0, i64 0
  %1147 = load i32, i32* %258, align 8
  %1148 = getelementptr inbounds %"class.webrtc::AecState", %"class.webrtc::AecState"* %0, i64 0, i32 7, i32 1
  %1149 = load i8, i8* %1148, align 4, !range !2
  %1150 = icmp ne i8 %1149, 0
  call void @_ZN6webrtc14EchoAudibility6UpdateERKNS_12RenderBufferEN3rtc9ArrayViewIKfLln4711EEEib(%"class.webrtc::EchoAudibility"* %1145, %"class.webrtc::RenderBuffer"* dereferenceable(32) %6, float* %1146, i64 65, i32 %1147, i1 zeroext %1150) #15
  br label %1151

1151:                                             ; preds = %1140, %1144
  %1152 = getelementptr inbounds %"class.webrtc::AecState", %"class.webrtc::AecState"* %0, i64 0, i32 6, i32 2
  %1153 = load i8, i8* %1152, align 8, !range !2
  %1154 = icmp eq i8 %1153, 0
  br i1 %1154, label %1157, label %1155

1155:                                             ; preds = %1151
  %1156 = getelementptr inbounds %"class.webrtc::AecState", %"class.webrtc::AecState"* %0, i64 0, i32 12
  call void @_ZN6webrtc13ErleEstimator5ResetEb(%"class.webrtc::ErleEstimator"* %1156, i1 zeroext false) #15
  br label %1157

1157:                                             ; preds = %1151, %1155
  %1158 = getelementptr inbounds %"class.webrtc::AecState", %"class.webrtc::AecState"* %0, i64 0, i32 12
  %1159 = icmp eq i64 %3, 0
  %1160 = select i1 %1159, %"class.std::__1::vector.43"* null, %"class.std::__1::vector.43"* %2
  %1161 = getelementptr inbounds %"class.rtc::ArrayView.179", %"class.rtc::ArrayView.179"* %8, i64 0, i32 0, i32 0
  %1162 = load %"struct.std::__1::array"*, %"struct.std::__1::array"** %1161, align 8
  %1163 = getelementptr inbounds %"class.rtc::ArrayView.179", %"class.rtc::ArrayView.179"* %8, i64 0, i32 0, i32 1
  %1164 = load i64, i64* %1163, align 8
  %1165 = getelementptr inbounds %"class.rtc::ArrayView.179", %"class.rtc::ArrayView.179"* %20, i64 0, i32 0, i32 0
  %1166 = icmp eq i64 %1164, 0
  %1167 = select i1 %1166, %"struct.std::__1::array"* null, %"struct.std::__1::array"* %1162
  store %"struct.std::__1::array"* %1167, %"struct.std::__1::array"** %1165, align 8
  %1168 = getelementptr inbounds %"class.rtc::ArrayView.179", %"class.rtc::ArrayView.179"* %20, i64 0, i32 0, i32 1
  store i64 %1164, i64* %1168, align 8
  %1169 = getelementptr inbounds %"class.rtc::ArrayView.179", %"class.rtc::ArrayView.179"* %7, i64 0, i32 0, i32 0
  %1170 = load %"struct.std::__1::array"*, %"struct.std::__1::array"** %1169, align 8
  %1171 = getelementptr inbounds %"class.rtc::ArrayView.179", %"class.rtc::ArrayView.179"* %7, i64 0, i32 0, i32 1
  %1172 = load i64, i64* %1171, align 8
  %1173 = getelementptr inbounds %"class.rtc::ArrayView.179", %"class.rtc::ArrayView.179"* %21, i64 0, i32 0, i32 0
  %1174 = icmp eq i64 %1172, 0
  %1175 = select i1 %1174, %"struct.std::__1::array"* null, %"struct.std::__1::array"* %1170
  store %"struct.std::__1::array"* %1175, %"struct.std::__1::array"** %1173, align 8
  %1176 = getelementptr inbounds %"class.rtc::ArrayView.179", %"class.rtc::ArrayView.179"* %21, i64 0, i32 0, i32 1
  store i64 %1172, i64* %1176, align 8
  %1177 = getelementptr inbounds %"class.webrtc::SubtractorOutputAnalyzer", %"class.webrtc::SubtractorOutputAnalyzer"* %24, i64 0, i32 0
  call void @_ZN6webrtc13ErleEstimator6UpdateERKNS_12RenderBufferEN3rtc9ArrayViewIKNSt3__16vectorINS6_5arrayIfLm65EEENS6_9allocatorIS9_EEEELln4711EEENS5_IKfLl65EEENS5_IKS9_Lln4711EEESI_RKNS7_IbNSA_IbEEEE(%"class.webrtc::ErleEstimator"* %1158, %"class.webrtc::RenderBuffer"* dereferenceable(32) %6, %"class.std::__1::vector.43"* %1160, i64 %3, float* nonnull %386, %"class.rtc::ArrayView.179"* nonnull byval(%"class.rtc::ArrayView.179") align 8 %20, %"class.rtc::ArrayView.179"* nonnull byval(%"class.rtc::ArrayView.179") align 8 %21, %"class.std::__1::vector.10"* dereferenceable(24) %1177) #15
  %1178 = getelementptr inbounds %"class.webrtc::AecState", %"class.webrtc::AecState"* %0, i64 0, i32 11
  %1179 = load i32, i32* %258, align 8
  %1180 = load %"struct.webrtc::SpectrumBuffer"*, %"struct.webrtc::SpectrumBuffer"** %377, align 8
  %1181 = getelementptr inbounds %"struct.webrtc::SpectrumBuffer", %"struct.webrtc::SpectrumBuffer"* %1180, i64 0, i32 3
  %1182 = load i32, i32* %1181, align 4
  %1183 = getelementptr inbounds %"struct.webrtc::SpectrumBuffer", %"struct.webrtc::SpectrumBuffer"* %1180, i64 0, i32 0
  %1184 = load i32, i32* %1183, align 8
  %1185 = add i32 %1182, %1179
  %1186 = add i32 %1185, %1184
  %1187 = srem i32 %1186, %1184
  %1188 = sext i32 %1187 to i64
  %1189 = getelementptr inbounds %"struct.webrtc::SpectrumBuffer", %"struct.webrtc::SpectrumBuffer"* %1180, i64 0, i32 1, i32 0, i32 0
  %1190 = load %"class.std::__1::vector.43"*, %"class.std::__1::vector.43"** %1189, align 8
  %1191 = getelementptr inbounds %"class.std::__1::vector.43", %"class.std::__1::vector.43"* %1190, i64 %1188, i32 0, i32 0
  %1192 = load %"struct.std::__1::array"*, %"struct.std::__1::array"** %1191, align 8
  %1193 = getelementptr inbounds %"class.std::__1::vector.43", %"class.std::__1::vector.43"* %1190, i64 %1188, i32 0, i32 1
  %1194 = bitcast %"struct.std::__1::array"** %1193 to i64*
  %1195 = load i64, i64* %1194, align 8
  %1196 = ptrtoint %"struct.std::__1::array"* %1192 to i64
  %1197 = sub i64 %1195, %1196
  %1198 = sdiv exact i64 %1197, 260
  %1199 = icmp eq i64 %1197, 0
  %1200 = select i1 %1199, %"struct.std::__1::array"* null, %"struct.std::__1::array"* %1192
  call void @_ZN6webrtc12ErlEstimator6UpdateERKNSt3__16vectorIbNS1_9allocatorIbEEEEN3rtc9ArrayViewIKNS1_5arrayIfLm65EEELln4711EEESD_(%"class.webrtc::ErlEstimator"* %1178, %"class.std::__1::vector.10"* dereferenceable(24) %1177, %"struct.std::__1::array"* %1200, i64 %1198, %"struct.std::__1::array"* %1167, i64 %1164) #15
  %1201 = getelementptr inbounds %"class.webrtc::AecState", %"class.webrtc::AecState"* %0, i64 0, i32 1, i32 4, i32 2
  %1202 = load i8, i8* %1201, align 8, !range !2
  %1203 = icmp eq i8 %1202, 0
  br i1 %1203, label %1204, label %1207

1204:                                             ; preds = %1157
  %1205 = getelementptr inbounds %"class.webrtc::AecState", %"class.webrtc::AecState"* %0, i64 0, i32 15
  %1206 = load i8, i8* %1205, align 8, !range !2
  br label %1343

1207:                                             ; preds = %1157
  %1208 = getelementptr inbounds %"class.std::__1::vector.114", %"class.std::__1::vector.114"* %272, i64 0, i32 0, i32 0
  %1209 = load %"class.std::__1::vector.17"*, %"class.std::__1::vector.17"** %1208, align 8
  %1210 = load i64, i64* %274, align 8
  %1211 = ptrtoint %"class.std::__1::vector.17"* %1209 to i64
  %1212 = sub i64 %1210, %1211
  %1213 = sdiv exact i64 %1212, 24
  %1214 = icmp eq i64 %1212, 0
  %1215 = select i1 %1214, %"class.std::__1::vector.17"* null, %"class.std::__1::vector.17"* %1209
  %1216 = getelementptr inbounds %"class.webrtc::AecState", %"class.webrtc::AecState"* %0, i64 0, i32 15
  %1217 = load i8, i8* %1216, align 8, !range !2
  %1218 = icmp eq i8 %1217, 0
  %1219 = getelementptr inbounds %"class.webrtc::AecState", %"class.webrtc::AecState"* %0, i64 0, i32 9, i32 1
  %1220 = load i8, i8* %1219, align 1, !range !2
  %1221 = icmp eq i8 %1220, 0
  br i1 %1221, label %1225, label %1222

1222:                                             ; preds = %1207
  %1223 = load i8, i8* %35, align 2, !range !2
  %1224 = icmp ne i8 %1223, 0
  br label %1225

1225:                                             ; preds = %1207, %1222
  %1226 = phi i1 [ false, %1207 ], [ %1224, %1222 ]
  %1227 = load %"struct.webrtc::SubtractorOutput"*, %"struct.webrtc::SubtractorOutput"** %25, align 8
  %1228 = load i64, i64* %27, align 8
  %1229 = icmp eq i64 %1228, 0
  %1230 = select i1 %1229, %"struct.webrtc::SubtractorOutput"* null, %"struct.webrtc::SubtractorOutput"* %1227
  %1231 = load float, float* %17, align 4
  %1232 = getelementptr inbounds %"class.webrtc::AecState", %"class.webrtc::AecState"* %0, i64 0, i32 10, i32 0
  store i8 0, i8* %1232, align 1
  br i1 %1218, label %1343, label %1233

1233:                                             ; preds = %1225
  br i1 %1226, label %1234, label %1257

1234:                                             ; preds = %1233
  br i1 %1229, label %1343, label %1235

1235:                                             ; preds = %1234
  %1236 = and i64 %1228, 1
  %1237 = icmp eq i64 %1228, 1
  br i1 %1237, label %1326, label %1238

1238:                                             ; preds = %1235
  %1239 = sub i64 %1228, %1236
  br label %1240

1240:                                             ; preds = %1475, %1238
  %1241 = phi i8 [ 0, %1238 ], [ %1477, %1475 ]
  %1242 = phi i64 [ 0, %1238 ], [ %1478, %1475 ]
  %1243 = phi i64 [ %1239, %1238 ], [ %1479, %1475 ]
  %1244 = icmp eq i8 %1241, 0
  br i1 %1244, label %1245, label %1253

1245:                                             ; preds = %1240
  %1246 = getelementptr inbounds %"struct.webrtc::SubtractorOutput", %"struct.webrtc::SubtractorOutput"* %1230, i64 %1242, i32 12
  %1247 = load float, float* %1246, align 4
  %1248 = fcmp ogt float %1247, 2.000000e+04
  br i1 %1248, label %1253, label %1249

1249:                                             ; preds = %1245
  %1250 = getelementptr inbounds %"struct.webrtc::SubtractorOutput", %"struct.webrtc::SubtractorOutput"* %1230, i64 %1242, i32 13
  %1251 = load float, float* %1250, align 4
  %1252 = fcmp ogt float %1251, 2.000000e+04
  br label %1253

1253:                                             ; preds = %1249, %1245, %1240
  %1254 = phi i1 [ true, %1240 ], [ true, %1245 ], [ %1252, %1249 ]
  %1255 = zext i1 %1254 to i8
  store i8 %1255, i8* %1232, align 1
  %1256 = or i64 %1242, 1
  br i1 %1254, label %1475, label %1467

1257:                                             ; preds = %1233
  %1258 = getelementptr inbounds %"class.std::__1::vector.17", %"class.std::__1::vector.17"* %1215, i64 %1213
  br i1 %1214, label %1259, label %1265

1259:                                             ; preds = %1298, %1257
  %1260 = phi float [ 0.000000e+00, %1257 ], [ %1299, %1298 ]
  %1261 = fmul float %1231, %1260
  %1262 = fmul float %1261, 1.000000e+01
  %1263 = fcmp ogt float %1262, 3.200000e+04
  %1264 = zext i1 %1263 to i8
  store i8 %1264, i8* %1232, align 1
  br label %1343

1265:                                             ; preds = %1257, %1298
  %1266 = phi float [ %1299, %1298 ], [ 0.000000e+00, %1257 ]
  %1267 = phi %"class.std::__1::vector.17"* [ %1300, %1298 ], [ %1209, %1257 ]
  %1268 = getelementptr inbounds %"class.std::__1::vector.17", %"class.std::__1::vector.17"* %1267, i64 0, i32 0, i32 0
  %1269 = load float*, float** %1268, align 8
  %1270 = getelementptr inbounds %"class.std::__1::vector.17", %"class.std::__1::vector.17"* %1267, i64 0, i32 0, i32 1
  %1271 = load float*, float** %1270, align 8
  %1272 = icmp eq float* %1269, %1271
  br i1 %1272, label %1298, label %1273

1273:                                             ; preds = %1265
  %1274 = ptrtoint float* %1269 to i64
  %1275 = getelementptr float, float* %1271, i64 -1
  %1276 = ptrtoint float* %1275 to i64
  %1277 = sub i64 %1276, %1274
  %1278 = lshr i64 %1277, 2
  %1279 = add nuw nsw i64 %1278, 1
  %1280 = and i64 %1279, 3
  %1281 = icmp eq i64 %1280, 0
  br i1 %1281, label %1293, label %1282

1282:                                             ; preds = %1273, %1282
  %1283 = phi float [ %1289, %1282 ], [ %1266, %1273 ]
  %1284 = phi float* [ %1290, %1282 ], [ %1269, %1273 ]
  %1285 = phi i64 [ %1291, %1282 ], [ %1280, %1273 ]
  %1286 = load float, float* %1284, align 4
  %1287 = call float @llvm.fabs.f32(float %1286) #15
  %1288 = fcmp olt float %1283, %1287
  %1289 = select i1 %1288, float %1287, float %1283
  %1290 = getelementptr inbounds float, float* %1284, i64 1
  %1291 = add i64 %1285, -1
  %1292 = icmp eq i64 %1291, 0
  br i1 %1292, label %1293, label %1282, !llvm.loop !45

1293:                                             ; preds = %1282, %1273
  %1294 = phi float [ undef, %1273 ], [ %1289, %1282 ]
  %1295 = phi float [ %1266, %1273 ], [ %1289, %1282 ]
  %1296 = phi float* [ %1269, %1273 ], [ %1290, %1282 ]
  %1297 = icmp ult i64 %1277, 12
  br i1 %1297, label %1298, label %1302

1298:                                             ; preds = %1293, %1302, %1265
  %1299 = phi float [ %1266, %1265 ], [ %1294, %1293 ], [ %1323, %1302 ]
  %1300 = getelementptr inbounds %"class.std::__1::vector.17", %"class.std::__1::vector.17"* %1267, i64 1
  %1301 = icmp eq %"class.std::__1::vector.17"* %1300, %1258
  br i1 %1301, label %1259, label %1265

1302:                                             ; preds = %1293, %1302
  %1303 = phi float [ %1323, %1302 ], [ %1295, %1293 ]
  %1304 = phi float* [ %1324, %1302 ], [ %1296, %1293 ]
  %1305 = load float, float* %1304, align 4
  %1306 = call float @llvm.fabs.f32(float %1305) #15
  %1307 = fcmp olt float %1303, %1306
  %1308 = select i1 %1307, float %1306, float %1303
  %1309 = getelementptr inbounds float, float* %1304, i64 1
  %1310 = load float, float* %1309, align 4
  %1311 = call float @llvm.fabs.f32(float %1310) #15
  %1312 = fcmp olt float %1308, %1311
  %1313 = select i1 %1312, float %1311, float %1308
  %1314 = getelementptr inbounds float, float* %1304, i64 2
  %1315 = load float, float* %1314, align 4
  %1316 = call float @llvm.fabs.f32(float %1315) #15
  %1317 = fcmp olt float %1313, %1316
  %1318 = select i1 %1317, float %1316, float %1313
  %1319 = getelementptr inbounds float, float* %1304, i64 3
  %1320 = load float, float* %1319, align 4
  %1321 = call float @llvm.fabs.f32(float %1320) #15
  %1322 = fcmp olt float %1318, %1321
  %1323 = select i1 %1322, float %1321, float %1318
  %1324 = getelementptr inbounds float, float* %1304, i64 4
  %1325 = icmp eq float* %1324, %1271
  br i1 %1325, label %1298, label %1302

1326:                                             ; preds = %1475, %1235
  %1327 = phi i8 [ 0, %1235 ], [ %1477, %1475 ]
  %1328 = phi i64 [ 0, %1235 ], [ %1478, %1475 ]
  %1329 = icmp eq i64 %1236, 0
  br i1 %1329, label %1343, label %1330

1330:                                             ; preds = %1326
  %1331 = icmp eq i8 %1327, 0
  br i1 %1331, label %1332, label %1341

1332:                                             ; preds = %1330
  %1333 = getelementptr inbounds %"struct.webrtc::SubtractorOutput", %"struct.webrtc::SubtractorOutput"* %1230, i64 %1328, i32 12
  %1334 = load float, float* %1333, align 4
  %1335 = fcmp ogt float %1334, 2.000000e+04
  br i1 %1335, label %1341, label %1336

1336:                                             ; preds = %1332
  %1337 = getelementptr inbounds %"struct.webrtc::SubtractorOutput", %"struct.webrtc::SubtractorOutput"* %1230, i64 %1328, i32 13
  %1338 = load float, float* %1337, align 4
  %1339 = fcmp ogt float %1338, 2.000000e+04
  %1340 = zext i1 %1339 to i8
  br label %1341

1341:                                             ; preds = %1336, %1332, %1330
  %1342 = phi i8 [ 1, %1330 ], [ 1, %1332 ], [ %1340, %1336 ]
  store i8 %1342, i8* %1232, align 1
  br label %1343

1343:                                             ; preds = %1341, %1326, %1204, %1225, %1259, %1234
  %1344 = phi i8 [ %1206, %1204 ], [ 0, %1225 ], [ %1217, %1259 ], [ 1, %1234 ], [ %1217, %1326 ], [ %1217, %1341 ]
  %1345 = getelementptr inbounds %"class.webrtc::AecState", %"class.webrtc::AecState"* %0, i64 0, i32 15
  %1346 = icmp ne i8 %1344, 0
  %1347 = xor i1 %1346, true
  %1348 = and i1 %362, %1347
  %1349 = zext i1 %1348 to i64
  %1350 = getelementptr inbounds %"class.webrtc::AecState", %"class.webrtc::AecState"* %0, i64 0, i32 6, i32 4
  %1351 = load i64, i64* %1350, align 8
  %1352 = add i64 %1351, %1349
  store i64 %1352, i64* %1350, align 8
  %1353 = getelementptr inbounds %"class.webrtc::AecState", %"class.webrtc::AecState"* %0, i64 0, i32 6, i32 3
  %1354 = load i8, i8* %1353, align 1, !range !2
  %1355 = icmp ne i8 %1354, 0
  %1356 = getelementptr inbounds %"class.webrtc::AecState", %"class.webrtc::AecState"* %0, i64 0, i32 6, i32 0
  %1357 = load i8, i8* %1356, align 8, !range !2
  %1358 = icmp eq i8 %1357, 0
  br i1 %1358, label %1361, label %1359

1359:                                             ; preds = %1343
  %1360 = icmp ult i64 %1352, 1250
  br label %1367

1361:                                             ; preds = %1343
  %1362 = uitofp i64 %1352 to float
  %1363 = getelementptr inbounds %"class.webrtc::AecState", %"class.webrtc::AecState"* %0, i64 0, i32 6, i32 1
  %1364 = load float, float* %1363, align 4
  %1365 = fmul float %1364, 2.500000e+02
  %1366 = fcmp ogt float %1365, %1362
  br label %1367

1367:                                             ; preds = %1359, %1361
  %1368 = phi i1 [ %1366, %1361 ], [ %1360, %1359 ]
  %1369 = zext i1 %1368 to i8
  store i8 %1369, i8* %1353, align 1
  %1370 = xor i1 %1368, true
  %1371 = and i1 %1355, %1370
  %1372 = zext i1 %1371 to i8
  store i8 %1372, i8* %1152, align 8
  %1373 = getelementptr inbounds %"class.webrtc::AecState", %"class.webrtc::AecState"* %0, i64 0, i32 8, i32 0, i32 0, i32 0
  %1374 = load %"class.webrtc::TransparentMode"*, %"class.webrtc::TransparentMode"** %1373, align 8
  %1375 = icmp eq %"class.webrtc::TransparentMode"* %1374, null
  br i1 %1375, label %1376, label %1378

1376:                                             ; preds = %1367
  %1377 = getelementptr inbounds %"class.webrtc::AecState", %"class.webrtc::AecState"* %0, i64 0, i32 9
  br label %1401

1378:                                             ; preds = %1367
  %1379 = load i32, i32* %258, align 8
  %1380 = load i8, i8* %16, align 1, !range !2
  %1381 = icmp ne i8 %1380, 0
  %1382 = load i8, i8* %13, align 1, !range !2
  %1383 = icmp ne i8 %1382, 0
  %1384 = load i8, i8* %14, align 1, !range !2
  %1385 = icmp ne i8 %1384, 0
  %1386 = load i8, i8* %15, align 1, !range !2
  %1387 = icmp ne i8 %1386, 0
  %1388 = bitcast %"class.webrtc::TransparentMode"* %1374 to void (%"class.webrtc::TransparentMode"*, i32, i1, i1, i1, i1, i1, i1)***
  %1389 = load void (%"class.webrtc::TransparentMode"*, i32, i1, i1, i1, i1, i1, i1)**, void (%"class.webrtc::TransparentMode"*, i32, i1, i1, i1, i1, i1, i1)*** %1388, align 8
  %1390 = getelementptr inbounds void (%"class.webrtc::TransparentMode"*, i32, i1, i1, i1, i1, i1, i1)*, void (%"class.webrtc::TransparentMode"*, i32, i1, i1, i1, i1, i1, i1)** %1389, i64 4
  %1391 = load void (%"class.webrtc::TransparentMode"*, i32, i1, i1, i1, i1, i1, i1)*, void (%"class.webrtc::TransparentMode"*, i32, i1, i1, i1, i1, i1, i1)** %1390, align 8
  call void %1391(%"class.webrtc::TransparentMode"* nonnull %1374, i32 %1379, i1 zeroext %1381, i1 zeroext %1383, i1 zeroext %1385, i1 zeroext %1387, i1 zeroext %362, i1 zeroext %1346) #15
  %1392 = load %"class.webrtc::TransparentMode"*, %"class.webrtc::TransparentMode"** %1373, align 8
  %1393 = getelementptr inbounds %"class.webrtc::AecState", %"class.webrtc::AecState"* %0, i64 0, i32 9
  %1394 = icmp eq %"class.webrtc::TransparentMode"* %1392, null
  br i1 %1394, label %1401, label %1395

1395:                                             ; preds = %1378
  %1396 = bitcast %"class.webrtc::TransparentMode"* %1392 to i1 (%"class.webrtc::TransparentMode"*)***
  %1397 = load i1 (%"class.webrtc::TransparentMode"*)**, i1 (%"class.webrtc::TransparentMode"*)*** %1396, align 8
  %1398 = getelementptr inbounds i1 (%"class.webrtc::TransparentMode"*)*, i1 (%"class.webrtc::TransparentMode"*)** %1397, i64 2
  %1399 = load i1 (%"class.webrtc::TransparentMode"*)*, i1 (%"class.webrtc::TransparentMode"*)** %1398, align 8
  %1400 = call zeroext i1 %1399(%"class.webrtc::TransparentMode"* nonnull %1392) #15
  br label %1401

1401:                                             ; preds = %1376, %1378, %1395
  %1402 = phi %"class.webrtc::AecState::FilteringQualityAnalyzer"* [ %1393, %1378 ], [ %1393, %1395 ], [ %1377, %1376 ]
  %1403 = phi i1 [ false, %1378 ], [ %1400, %1395 ], [ false, %1376 ]
  %1404 = load i8, i8* %1345, align 8, !range !2
  %1405 = icmp ne i8 %1404, 0
  %1406 = load i8, i8* %13, align 1, !range !2
  %1407 = icmp ne i8 %1406, 0
  call void @_ZN6webrtc8AecState24FilteringQualityAnalyzer6UpdateEbbbRKN4absl8optionalINS_13DelayEstimateEEEb(%"class.webrtc::AecState::FilteringQualityAnalyzer"* %1402, i1 zeroext %362, i1 zeroext %1403, i1 zeroext %1405, %"class.absl::optional"* dereferenceable(40) %1, i1 zeroext %1407)
  %1408 = load i8, i8* %1141, align 4, !range !2
  %1409 = icmp eq i8 %1408, 0
  br i1 %1409, label %1413, label %1410

1410:                                             ; preds = %1401
  %1411 = getelementptr inbounds %"class.webrtc::AecState", %"class.webrtc::AecState"* %0, i64 0, i32 18, i32 5
  %1412 = call zeroext i1 @_ZNK6webrtc21StationarityEstimator17IsBlockStationaryEv(%"class.webrtc::StationarityEstimator"* %1411) #15
  br label %1413

1413:                                             ; preds = %1401, %1410
  %1414 = phi i1 [ false, %1401 ], [ %1412, %1410 ]
  %1415 = getelementptr inbounds %"class.webrtc::AecState", %"class.webrtc::AecState"* %0, i64 0, i32 19
  %1416 = getelementptr inbounds %"class.webrtc::AecState", %"class.webrtc::AecState"* %0, i64 0, i32 17, i32 4, i32 0, i32 0
  %1417 = load %"class.std::__1::vector.17"*, %"class.std::__1::vector.17"** %1416, align 8
  %1418 = getelementptr inbounds %"class.webrtc::AecState", %"class.webrtc::AecState"* %0, i64 0, i32 17, i32 4, i32 0, i32 1
  %1419 = bitcast %"class.std::__1::vector.17"** %1418 to i64*
  %1420 = load i64, i64* %1419, align 8
  %1421 = ptrtoint %"class.std::__1::vector.17"* %1417 to i64
  %1422 = sub i64 %1420, %1421
  %1423 = sdiv exact i64 %1422, 24
  %1424 = icmp eq i64 %1422, 0
  %1425 = select i1 %1424, %"class.std::__1::vector.17"* null, %"class.std::__1::vector.17"* %1417
  %1426 = getelementptr inbounds %"class.webrtc::AecState", %"class.webrtc::AecState"* %0, i64 0, i32 12, i32 1, i32 5, i32 0, i32 0
  %1427 = load %"class.absl::optional.26"*, %"class.absl::optional.26"** %1426, align 8
  %1428 = getelementptr inbounds %"class.webrtc::AecState", %"class.webrtc::AecState"* %0, i64 0, i32 12, i32 1, i32 5, i32 0, i32 1
  %1429 = bitcast %"class.absl::optional.26"** %1428 to i64*
  %1430 = load i64, i64* %1429, align 8
  %1431 = ptrtoint %"class.absl::optional.26"* %1427 to i64
  %1432 = sub i64 %1430, %1431
  %1433 = ashr exact i64 %1432, 3
  %1434 = icmp eq i64 %1432, 0
  %1435 = select i1 %1434, %"class.absl::optional.26"* null, %"class.absl::optional.26"* %1427
  %1436 = getelementptr inbounds %"class.rtc::ArrayView.192", %"class.rtc::ArrayView.192"* %22, i64 0, i32 0, i32 0
  store %"class.absl::optional.26"* %1435, %"class.absl::optional.26"** %1436, align 8
  %1437 = getelementptr inbounds %"class.rtc::ArrayView.192", %"class.rtc::ArrayView.192"* %22, i64 0, i32 0, i32 1
  store i64 %1433, i64* %1437, align 8
  %1438 = getelementptr inbounds %"class.webrtc::AecState", %"class.webrtc::AecState"* %0, i64 0, i32 7, i32 2, i32 0, i32 0
  %1439 = load i32*, i32** %1438, align 8
  %1440 = getelementptr inbounds %"class.webrtc::AecState", %"class.webrtc::AecState"* %0, i64 0, i32 7, i32 2, i32 0, i32 1
  %1441 = bitcast i32** %1440 to i64*
  %1442 = load i64, i64* %1441, align 8
  %1443 = ptrtoint i32* %1439 to i64
  %1444 = sub i64 %1442, %1443
  %1445 = ashr exact i64 %1444, 2
  %1446 = icmp eq i64 %1444, 0
  %1447 = select i1 %1446, i32* null, i32* %1439
  %1448 = getelementptr inbounds %"class.rtc::ArrayView.184", %"class.rtc::ArrayView.184"* %23, i64 0, i32 0, i32 0
  store i32* %1447, i32** %1448, align 8
  %1449 = getelementptr inbounds %"class.rtc::ArrayView.184", %"class.rtc::ArrayView.184"* %23, i64 0, i32 0, i32 1
  store i64 %1445, i64* %1449, align 8
  %1450 = getelementptr inbounds %"class.webrtc::AecState", %"class.webrtc::AecState"* %0, i64 0, i32 9, i32 5
  call void @_ZN6webrtc20ReverbModelEstimator6UpdateEN3rtc9ArrayViewIKNSt3__16vectorIfNS3_9allocatorIfEEEELln4711EEENS2_IKNS4_INS3_5arrayIfLm65EEENS5_ISB_EEEELln4711EEENS2_IKN4absl8optionalIfEELln4711EEENS2_IKiLln4711EEERKNS4_IbNS5_IbEEEEb(%"class.webrtc::ReverbModelEstimator"* %1415, %"class.std::__1::vector.17"* %1425, i64 %1423, %"class.std::__1::vector.43"* %1160, i64 %3, %"class.rtc::ArrayView.192"* nonnull byval(%"class.rtc::ArrayView.192") align 8 %22, %"class.rtc::ArrayView.184"* nonnull byval(%"class.rtc::ArrayView.184") align 8 %23, %"class.std::__1::vector.10"* dereferenceable(24) %1450, i1 zeroext %1414) #15
  %1451 = getelementptr inbounds %"class.webrtc::AecState", %"class.webrtc::AecState"* %0, i64 0, i32 0
  call void @_ZNK6webrtc13ErleEstimator4DumpERKNSt3__110unique_ptrINS_13ApmDataDumperENS1_14default_deleteIS3_EEEE(%"class.webrtc::ErleEstimator"* %1158, %"class.std::__1::unique_ptr"* dereferenceable(8) %1451) #15
  %1452 = getelementptr inbounds %"class.webrtc::AecState", %"class.webrtc::AecState"* %0, i64 0, i32 0, i32 0, i32 0, i32 0
  %1453 = load %"class.webrtc::ApmDataDumper"*, %"class.webrtc::ApmDataDumper"** %1452, align 8
  %1454 = getelementptr inbounds %"class.webrtc::ReverbModelEstimator", %"class.webrtc::ReverbModelEstimator"* %1415, i64 0, i32 0, i32 0, i32 0
  %1455 = load %"class.std::__1::unique_ptr.135"*, %"class.std::__1::unique_ptr.135"** %1454, align 8
  %1456 = getelementptr inbounds %"class.std::__1::unique_ptr.135", %"class.std::__1::unique_ptr.135"* %1455, i64 0, i32 0, i32 0, i32 0
  %1457 = load %"class.webrtc::ReverbDecayEstimator"*, %"class.webrtc::ReverbDecayEstimator"** %1456, align 8
  call void @_ZNK6webrtc20ReverbDecayEstimator4DumpEPNS_13ApmDataDumperE(%"class.webrtc::ReverbDecayEstimator"* %1457, %"class.webrtc::ApmDataDumper"* %1453) #15
  %1458 = load %"class.webrtc::TransparentMode"*, %"class.webrtc::TransparentMode"** %1373, align 8
  %1459 = icmp eq %"class.webrtc::TransparentMode"* %1458, null
  br i1 %1459, label %1466, label %1460

1460:                                             ; preds = %1413
  %1461 = bitcast %"class.webrtc::TransparentMode"* %1458 to i1 (%"class.webrtc::TransparentMode"*)***
  %1462 = load i1 (%"class.webrtc::TransparentMode"*)**, i1 (%"class.webrtc::TransparentMode"*)*** %1461, align 8
  %1463 = getelementptr inbounds i1 (%"class.webrtc::TransparentMode"*)*, i1 (%"class.webrtc::TransparentMode"*)** %1462, i64 2
  %1464 = load i1 (%"class.webrtc::TransparentMode"*)*, i1 (%"class.webrtc::TransparentMode"*)** %1463, align 8
  %1465 = call zeroext i1 %1464(%"class.webrtc::TransparentMode"* nonnull %1458) #15
  br label %1466

1466:                                             ; preds = %1413, %1460
  call void @llvm.lifetime.end.p0i8(i64 260, i8* nonnull %19) #15
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %31) #15
  call void @llvm.lifetime.end.p0i8(i64 1, i8* nonnull %16) #15
  call void @llvm.lifetime.end.p0i8(i64 1, i8* nonnull %15) #15
  call void @llvm.lifetime.end.p0i8(i64 1, i8* nonnull %14) #15
  call void @llvm.lifetime.end.p0i8(i64 1, i8* nonnull %13) #15
  ret void

1467:                                             ; preds = %1253
  %1468 = getelementptr inbounds %"struct.webrtc::SubtractorOutput", %"struct.webrtc::SubtractorOutput"* %1230, i64 %1256, i32 12
  %1469 = load float, float* %1468, align 4
  %1470 = fcmp ogt float %1469, 2.000000e+04
  br i1 %1470, label %1475, label %1471

1471:                                             ; preds = %1467
  %1472 = getelementptr inbounds %"struct.webrtc::SubtractorOutput", %"struct.webrtc::SubtractorOutput"* %1230, i64 %1256, i32 13
  %1473 = load float, float* %1472, align 4
  %1474 = fcmp ogt float %1473, 2.000000e+04
  br label %1475

1475:                                             ; preds = %1253, %1471, %1467
  %1476 = phi i1 [ true, %1253 ], [ true, %1467 ], [ %1474, %1471 ]
  %1477 = zext i1 %1476 to i8
  store i8 %1477, i8* %1232, align 1
  %1478 = add nuw i64 %1242, 2
  %1479 = add i64 %1243, -2
  %1480 = icmp eq i64 %1479, 0
  br i1 %1480, label %1326, label %1240
}

declare void @_ZN6webrtc24SubtractorOutputAnalyzer6UpdateEN3rtc9ArrayViewIKNS_16SubtractorOutputELln4711EEEPbS6_S6_(%"class.webrtc::SubtractorOutputAnalyzer"*, %"struct.webrtc::SubtractorOutput"*, i64, i8*, i8*, i8*) local_unnamed_addr #4

declare void @_ZN6webrtc14FilterAnalyzer6UpdateEN3rtc9ArrayViewIKNSt3__16vectorIfNS3_9allocatorIfEEEELln4711EEERKNS_12RenderBufferEPbPf(%"class.webrtc::FilterAnalyzer"*, %"class.std::__1::vector.17"*, i64, %"class.webrtc::RenderBuffer"* dereferenceable(32), i8*, float*) local_unnamed_addr #4

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN6webrtc8AecState11FilterDelay6UpdateEN3rtc9ArrayViewIKiLln4711EEERKN4absl8optionalINS_13DelayEstimateEEEm(%"class.webrtc::AecState::FilterDelay"* nocapture, i32*, i64, %"class.absl::optional"* nocapture readonly dereferenceable(40), i64) local_unnamed_addr #2 align 2 {
  %6 = getelementptr inbounds %"class.absl::optional", %"class.absl::optional"* %3, i64 0, i32 0, i32 0, i32 0, i32 0
  %7 = load i8, i8* %6, align 8, !range !2
  %8 = icmp eq i8 %7, 0
  br i1 %8, label %21, label %9

9:                                                ; preds = %5
  %10 = getelementptr inbounds %"class.webrtc::AecState::FilterDelay", %"class.webrtc::AecState::FilterDelay"* %0, i64 0, i32 4, i32 0, i32 0, i32 0, i32 0
  %11 = load i8, i8* %10, align 8, !range !2
  %12 = icmp eq i8 %11, 0
  br i1 %12, label %19, label %13

13:                                               ; preds = %9
  %14 = getelementptr inbounds %"class.webrtc::AecState::FilterDelay", %"class.webrtc::AecState::FilterDelay"* %0, i64 0, i32 4, i32 0, i32 0, i32 0, i32 1, i32 0, i32 1
  %15 = load i64, i64* %14, align 8
  %16 = getelementptr inbounds %"class.absl::optional", %"class.absl::optional"* %3, i64 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 1
  %17 = load i64, i64* %16, align 8
  %18 = icmp eq i64 %15, %17
  br i1 %18, label %21, label %19

19:                                               ; preds = %9, %13
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %10, i8* align 8 %6, i64 40, i1 false)
  %20 = getelementptr inbounds %"class.webrtc::AecState::FilterDelay", %"class.webrtc::AecState::FilterDelay"* %0, i64 0, i32 1
  store i8 1, i8* %20, align 4
  br label %21

21:                                               ; preds = %5, %13, %19
  %22 = icmp ult i64 %4, 500
  br i1 %22, label %23, label %129

23:                                               ; preds = %21
  %24 = getelementptr inbounds %"class.webrtc::AecState::FilterDelay", %"class.webrtc::AecState::FilterDelay"* %0, i64 0, i32 4, i32 0, i32 0, i32 0, i32 0
  %25 = load i8, i8* %24, align 8, !range !2
  %26 = icmp eq i8 %25, 0
  br i1 %26, label %129, label %27

27:                                               ; preds = %23
  %28 = getelementptr inbounds %"class.webrtc::AecState::FilterDelay", %"class.webrtc::AecState::FilterDelay"* %0, i64 0, i32 0
  %29 = load i32, i32* %28, align 8
  %30 = getelementptr inbounds %"class.webrtc::AecState::FilterDelay", %"class.webrtc::AecState::FilterDelay"* %0, i64 0, i32 2, i32 0, i32 0
  %31 = load i32*, i32** %30, align 8
  %32 = getelementptr inbounds %"class.webrtc::AecState::FilterDelay", %"class.webrtc::AecState::FilterDelay"* %0, i64 0, i32 2, i32 0, i32 1
  %33 = bitcast i32** %32 to i64*
  %34 = load i64, i64* %33, align 8
  %35 = ptrtoint i32* %31 to i64
  %36 = sub i64 %34, %35
  %37 = icmp sgt i64 %36, 0
  br i1 %37, label %38, label %137

38:                                               ; preds = %27
  %39 = lshr exact i64 %36, 2
  %40 = lshr i64 %36, 2
  %41 = icmp eq i64 %40, 0
  %42 = zext i1 %41 to i64
  %43 = add nuw nsw i64 %40, %42
  %44 = icmp ult i64 %43, 8
  br i1 %44, label %120, label %45

45:                                               ; preds = %38
  %46 = and i64 %43, 9223372036854775800
  %47 = sub nsw i64 %39, %46
  %48 = getelementptr i32, i32* %31, i64 %46
  %49 = insertelement <4 x i32> undef, i32 %29, i32 0
  %50 = shufflevector <4 x i32> %49, <4 x i32> undef, <4 x i32> zeroinitializer
  %51 = insertelement <4 x i32> undef, i32 %29, i32 0
  %52 = shufflevector <4 x i32> %51, <4 x i32> undef, <4 x i32> zeroinitializer
  %53 = add nsw i64 %46, -8
  %54 = lshr exact i64 %53, 3
  %55 = add nuw nsw i64 %54, 1
  %56 = and i64 %55, 7
  %57 = icmp ult i64 %53, 56
  br i1 %57, label %105, label %58

58:                                               ; preds = %45
  %59 = sub nsw i64 %55, %56
  br label %60

60:                                               ; preds = %60, %58
  %61 = phi i64 [ 0, %58 ], [ %102, %60 ]
  %62 = phi i64 [ %59, %58 ], [ %103, %60 ]
  %63 = getelementptr i32, i32* %31, i64 %61
  %64 = bitcast i32* %63 to <4 x i32>*
  store <4 x i32> %50, <4 x i32>* %64, align 4
  %65 = getelementptr i32, i32* %63, i64 4
  %66 = bitcast i32* %65 to <4 x i32>*
  store <4 x i32> %52, <4 x i32>* %66, align 4
  %67 = or i64 %61, 8
  %68 = getelementptr i32, i32* %31, i64 %67
  %69 = bitcast i32* %68 to <4 x i32>*
  store <4 x i32> %50, <4 x i32>* %69, align 4
  %70 = getelementptr i32, i32* %68, i64 4
  %71 = bitcast i32* %70 to <4 x i32>*
  store <4 x i32> %52, <4 x i32>* %71, align 4
  %72 = or i64 %61, 16
  %73 = getelementptr i32, i32* %31, i64 %72
  %74 = bitcast i32* %73 to <4 x i32>*
  store <4 x i32> %50, <4 x i32>* %74, align 4
  %75 = getelementptr i32, i32* %73, i64 4
  %76 = bitcast i32* %75 to <4 x i32>*
  store <4 x i32> %52, <4 x i32>* %76, align 4
  %77 = or i64 %61, 24
  %78 = getelementptr i32, i32* %31, i64 %77
  %79 = bitcast i32* %78 to <4 x i32>*
  store <4 x i32> %50, <4 x i32>* %79, align 4
  %80 = getelementptr i32, i32* %78, i64 4
  %81 = bitcast i32* %80 to <4 x i32>*
  store <4 x i32> %52, <4 x i32>* %81, align 4
  %82 = or i64 %61, 32
  %83 = getelementptr i32, i32* %31, i64 %82
  %84 = bitcast i32* %83 to <4 x i32>*
  store <4 x i32> %50, <4 x i32>* %84, align 4
  %85 = getelementptr i32, i32* %83, i64 4
  %86 = bitcast i32* %85 to <4 x i32>*
  store <4 x i32> %52, <4 x i32>* %86, align 4
  %87 = or i64 %61, 40
  %88 = getelementptr i32, i32* %31, i64 %87
  %89 = bitcast i32* %88 to <4 x i32>*
  store <4 x i32> %50, <4 x i32>* %89, align 4
  %90 = getelementptr i32, i32* %88, i64 4
  %91 = bitcast i32* %90 to <4 x i32>*
  store <4 x i32> %52, <4 x i32>* %91, align 4
  %92 = or i64 %61, 48
  %93 = getelementptr i32, i32* %31, i64 %92
  %94 = bitcast i32* %93 to <4 x i32>*
  store <4 x i32> %50, <4 x i32>* %94, align 4
  %95 = getelementptr i32, i32* %93, i64 4
  %96 = bitcast i32* %95 to <4 x i32>*
  store <4 x i32> %52, <4 x i32>* %96, align 4
  %97 = or i64 %61, 56
  %98 = getelementptr i32, i32* %31, i64 %97
  %99 = bitcast i32* %98 to <4 x i32>*
  store <4 x i32> %50, <4 x i32>* %99, align 4
  %100 = getelementptr i32, i32* %98, i64 4
  %101 = bitcast i32* %100 to <4 x i32>*
  store <4 x i32> %52, <4 x i32>* %101, align 4
  %102 = add i64 %61, 64
  %103 = add i64 %62, -8
  %104 = icmp eq i64 %103, 0
  br i1 %104, label %105, label %60, !llvm.loop !46

105:                                              ; preds = %60, %45
  %106 = phi i64 [ 0, %45 ], [ %102, %60 ]
  %107 = icmp eq i64 %56, 0
  br i1 %107, label %118, label %108

108:                                              ; preds = %105, %108
  %109 = phi i64 [ %115, %108 ], [ %106, %105 ]
  %110 = phi i64 [ %116, %108 ], [ %56, %105 ]
  %111 = getelementptr i32, i32* %31, i64 %109
  %112 = bitcast i32* %111 to <4 x i32>*
  store <4 x i32> %50, <4 x i32>* %112, align 4
  %113 = getelementptr i32, i32* %111, i64 4
  %114 = bitcast i32* %113 to <4 x i32>*
  store <4 x i32> %52, <4 x i32>* %114, align 4
  %115 = add i64 %109, 8
  %116 = add i64 %110, -1
  %117 = icmp eq i64 %116, 0
  br i1 %117, label %118, label %108, !llvm.loop !47

118:                                              ; preds = %108, %105
  %119 = icmp eq i64 %43, %46
  br i1 %119, label %137, label %120

120:                                              ; preds = %118, %38
  %121 = phi i64 [ %39, %38 ], [ %47, %118 ]
  %122 = phi i32* [ %31, %38 ], [ %48, %118 ]
  br label %123

123:                                              ; preds = %120, %123
  %124 = phi i64 [ %127, %123 ], [ %121, %120 ]
  %125 = phi i32* [ %126, %123 ], [ %122, %120 ]
  store i32 %29, i32* %125, align 4
  %126 = getelementptr inbounds i32, i32* %125, i64 1
  %127 = add nsw i64 %124, -1
  %128 = icmp sgt i64 %127, 0
  br i1 %128, label %123, label %137, !llvm.loop !48

129:                                              ; preds = %23, %21
  %130 = icmp eq i64 %2, 0
  br i1 %130, label %137, label %131

131:                                              ; preds = %129
  %132 = shl nuw i64 %2, 2
  %133 = getelementptr inbounds %"class.webrtc::AecState::FilterDelay", %"class.webrtc::AecState::FilterDelay"* %0, i64 0, i32 2, i32 0, i32 0
  %134 = bitcast i32** %133 to i8**
  %135 = load i8*, i8** %134, align 8
  %136 = bitcast i32* %1 to i8*
  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* align 4 %135, i8* align 4 %136, i64 %132, i1 false) #15
  br label %137

137:                                              ; preds = %123, %118, %131, %129, %27
  %138 = getelementptr inbounds %"class.webrtc::AecState::FilterDelay", %"class.webrtc::AecState::FilterDelay"* %0, i64 0, i32 2, i32 0, i32 0
  %139 = load i32*, i32** %138, align 8
  %140 = ptrtoint i32* %139 to i64
  %141 = getelementptr inbounds %"class.webrtc::AecState::FilterDelay", %"class.webrtc::AecState::FilterDelay"* %0, i64 0, i32 2, i32 0, i32 1
  %142 = load i32*, i32** %141, align 8
  %143 = icmp eq i32* %139, %142
  br i1 %143, label %208, label %144

144:                                              ; preds = %137
  %145 = getelementptr inbounds i32, i32* %139, i64 1
  %146 = icmp eq i32* %145, %142
  br i1 %146, label %208, label %147

147:                                              ; preds = %144
  %148 = getelementptr i32, i32* %142, i64 -2
  %149 = ptrtoint i32* %148 to i64
  %150 = sub i64 %149, %140
  %151 = lshr i64 %150, 2
  %152 = add nuw nsw i64 %151, 1
  %153 = and i64 %152, 3
  %154 = icmp eq i64 %153, 0
  br i1 %154, label %168, label %155

155:                                              ; preds = %147, %155
  %156 = phi i32* [ %165, %155 ], [ %145, %147 ]
  %157 = phi i64 [ %164, %155 ], [ %140, %147 ]
  %158 = phi i64 [ %166, %155 ], [ %153, %147 ]
  %159 = ptrtoint i32* %156 to i64
  %160 = inttoptr i64 %157 to i32*
  %161 = load i32, i32* %156, align 4
  %162 = load i32, i32* %160, align 4
  %163 = icmp slt i32 %161, %162
  %164 = select i1 %163, i64 %159, i64 %157
  %165 = getelementptr inbounds i32, i32* %156, i64 1
  %166 = add i64 %158, -1
  %167 = icmp eq i64 %166, 0
  br i1 %167, label %168, label %155, !llvm.loop !49

168:                                              ; preds = %155, %147
  %169 = phi i64 [ undef, %147 ], [ %164, %155 ]
  %170 = phi i32* [ %145, %147 ], [ %165, %155 ]
  %171 = phi i64 [ %140, %147 ], [ %164, %155 ]
  %172 = icmp ult i64 %150, 12
  br i1 %172, label %205, label %173

173:                                              ; preds = %168, %173
  %174 = phi i32* [ %203, %173 ], [ %170, %168 ]
  %175 = phi i64 [ %202, %173 ], [ %171, %168 ]
  %176 = ptrtoint i32* %174 to i64
  %177 = inttoptr i64 %175 to i32*
  %178 = load i32, i32* %174, align 4
  %179 = load i32, i32* %177, align 4
  %180 = icmp slt i32 %178, %179
  %181 = select i1 %180, i64 %176, i64 %175
  %182 = getelementptr inbounds i32, i32* %174, i64 1
  %183 = ptrtoint i32* %182 to i64
  %184 = inttoptr i64 %181 to i32*
  %185 = load i32, i32* %182, align 4
  %186 = load i32, i32* %184, align 4
  %187 = icmp slt i32 %185, %186
  %188 = select i1 %187, i64 %183, i64 %181
  %189 = getelementptr inbounds i32, i32* %174, i64 2
  %190 = ptrtoint i32* %189 to i64
  %191 = inttoptr i64 %188 to i32*
  %192 = load i32, i32* %189, align 4
  %193 = load i32, i32* %191, align 4
  %194 = icmp slt i32 %192, %193
  %195 = select i1 %194, i64 %190, i64 %188
  %196 = getelementptr inbounds i32, i32* %174, i64 3
  %197 = ptrtoint i32* %196 to i64
  %198 = inttoptr i64 %195 to i32*
  %199 = load i32, i32* %196, align 4
  %200 = load i32, i32* %198, align 4
  %201 = icmp slt i32 %199, %200
  %202 = select i1 %201, i64 %197, i64 %195
  %203 = getelementptr inbounds i32, i32* %174, i64 4
  %204 = icmp eq i32* %203, %142
  br i1 %204, label %205, label %173

205:                                              ; preds = %173, %168
  %206 = phi i64 [ %169, %168 ], [ %202, %173 ]
  %207 = inttoptr i64 %206 to i32*
  br label %208

208:                                              ; preds = %205, %137, %144
  %209 = phi i32* [ %139, %137 ], [ %139, %144 ], [ %207, %205 ]
  %210 = load i32, i32* %209, align 4
  %211 = getelementptr inbounds %"class.webrtc::AecState::FilterDelay", %"class.webrtc::AecState::FilterDelay"* %0, i64 0, i32 3
  store i32 %210, i32* %211, align 8
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

declare void @_ZN6webrtc14EchoAudibility6UpdateERKNS_12RenderBufferEN3rtc9ArrayViewIKfLln4711EEEib(%"class.webrtc::EchoAudibility"*, %"class.webrtc::RenderBuffer"* dereferenceable(32), float*, i64, i32, i1 zeroext) local_unnamed_addr #4

declare void @_ZN6webrtc13ErleEstimator6UpdateERKNS_12RenderBufferEN3rtc9ArrayViewIKNSt3__16vectorINS6_5arrayIfLm65EEENS6_9allocatorIS9_EEEELln4711EEENS5_IKfLl65EEENS5_IKS9_Lln4711EEESI_RKNS7_IbNSA_IbEEEE(%"class.webrtc::ErleEstimator"*, %"class.webrtc::RenderBuffer"* dereferenceable(32), %"class.std::__1::vector.43"*, i64, float*, %"class.rtc::ArrayView.179"* byval(%"class.rtc::ArrayView.179") align 8, %"class.rtc::ArrayView.179"* byval(%"class.rtc::ArrayView.179") align 8, %"class.std::__1::vector.10"* dereferenceable(24)) local_unnamed_addr #4

declare void @_ZN6webrtc12ErlEstimator6UpdateERKNSt3__16vectorIbNS1_9allocatorIbEEEEN3rtc9ArrayViewIKNS1_5arrayIfLm65EEELln4711EEESD_(%"class.webrtc::ErlEstimator"*, %"class.std::__1::vector.10"* dereferenceable(24), %"struct.std::__1::array"*, i64, %"struct.std::__1::array"*, i64) local_unnamed_addr #4

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN6webrtc8AecState18SaturationDetector6UpdateEN3rtc9ArrayViewIKNSt3__16vectorIfNS4_9allocatorIfEEEELln4711EEEbbNS3_IKNS_16SubtractorOutputELln4711EEEf(%"class.webrtc::AecState::SaturationDetector"* nocapture, %"class.std::__1::vector.17"*, i64, i1 zeroext, i1 zeroext, %"class.rtc::ArrayView.181"* nocapture readonly byval(%"class.rtc::ArrayView.181") align 8, float) local_unnamed_addr #2 align 2 {
  %8 = getelementptr inbounds %"class.webrtc::AecState::SaturationDetector", %"class.webrtc::AecState::SaturationDetector"* %0, i64 0, i32 0
  store i8 0, i8* %8, align 1
  br i1 %3, label %9, label %125

9:                                                ; preds = %7
  br i1 %4, label %10, label %38

10:                                               ; preds = %9
  %11 = getelementptr inbounds %"class.rtc::ArrayView.181", %"class.rtc::ArrayView.181"* %5, i64 0, i32 0, i32 1
  %12 = load i64, i64* %11, align 8
  %13 = icmp eq i64 %12, 0
  br i1 %13, label %125, label %14

14:                                               ; preds = %10
  %15 = getelementptr inbounds %"class.rtc::ArrayView.181", %"class.rtc::ArrayView.181"* %5, i64 0, i32 0, i32 0
  %16 = load %"struct.webrtc::SubtractorOutput"*, %"struct.webrtc::SubtractorOutput"** %15, align 8
  %17 = and i64 %12, 1
  %18 = icmp eq i64 %12, 1
  br i1 %18, label %108, label %19

19:                                               ; preds = %14
  %20 = sub i64 %12, %17
  br label %21

21:                                               ; preds = %134, %19
  %22 = phi i8 [ 0, %19 ], [ %136, %134 ]
  %23 = phi i64 [ 0, %19 ], [ %137, %134 ]
  %24 = phi i64 [ %20, %19 ], [ %138, %134 ]
  %25 = icmp eq i8 %22, 0
  br i1 %25, label %26, label %34

26:                                               ; preds = %21
  %27 = getelementptr inbounds %"struct.webrtc::SubtractorOutput", %"struct.webrtc::SubtractorOutput"* %16, i64 %23, i32 12
  %28 = load float, float* %27, align 4
  %29 = fcmp ogt float %28, 2.000000e+04
  br i1 %29, label %34, label %30

30:                                               ; preds = %26
  %31 = getelementptr inbounds %"struct.webrtc::SubtractorOutput", %"struct.webrtc::SubtractorOutput"* %16, i64 %23, i32 13
  %32 = load float, float* %31, align 4
  %33 = fcmp ogt float %32, 2.000000e+04
  br label %34

34:                                               ; preds = %21, %26, %30
  %35 = phi i1 [ true, %21 ], [ true, %26 ], [ %33, %30 ]
  %36 = zext i1 %35 to i8
  store i8 %36, i8* %8, align 1
  %37 = or i64 %23, 1
  br i1 %35, label %134, label %126

38:                                               ; preds = %9
  %39 = getelementptr inbounds %"class.std::__1::vector.17", %"class.std::__1::vector.17"* %1, i64 %2
  %40 = icmp eq i64 %2, 0
  br i1 %40, label %41, label %47

41:                                               ; preds = %80, %38
  %42 = phi float [ 0.000000e+00, %38 ], [ %81, %80 ]
  %43 = fmul float %42, %6
  %44 = fmul float %43, 1.000000e+01
  %45 = fcmp ogt float %44, 3.200000e+04
  %46 = zext i1 %45 to i8
  store i8 %46, i8* %8, align 1
  br label %125

47:                                               ; preds = %38, %80
  %48 = phi float [ %81, %80 ], [ 0.000000e+00, %38 ]
  %49 = phi %"class.std::__1::vector.17"* [ %82, %80 ], [ %1, %38 ]
  %50 = getelementptr inbounds %"class.std::__1::vector.17", %"class.std::__1::vector.17"* %49, i64 0, i32 0, i32 0
  %51 = load float*, float** %50, align 8
  %52 = getelementptr inbounds %"class.std::__1::vector.17", %"class.std::__1::vector.17"* %49, i64 0, i32 0, i32 1
  %53 = load float*, float** %52, align 8
  %54 = icmp eq float* %51, %53
  br i1 %54, label %80, label %55

55:                                               ; preds = %47
  %56 = ptrtoint float* %51 to i64
  %57 = getelementptr float, float* %53, i64 -1
  %58 = ptrtoint float* %57 to i64
  %59 = sub i64 %58, %56
  %60 = lshr i64 %59, 2
  %61 = add nuw nsw i64 %60, 1
  %62 = and i64 %61, 3
  %63 = icmp eq i64 %62, 0
  br i1 %63, label %75, label %64

64:                                               ; preds = %55, %64
  %65 = phi float [ %71, %64 ], [ %48, %55 ]
  %66 = phi float* [ %72, %64 ], [ %51, %55 ]
  %67 = phi i64 [ %73, %64 ], [ %62, %55 ]
  %68 = load float, float* %66, align 4
  %69 = tail call float @llvm.fabs.f32(float %68)
  %70 = fcmp olt float %65, %69
  %71 = select i1 %70, float %69, float %65
  %72 = getelementptr inbounds float, float* %66, i64 1
  %73 = add i64 %67, -1
  %74 = icmp eq i64 %73, 0
  br i1 %74, label %75, label %64, !llvm.loop !50

75:                                               ; preds = %64, %55
  %76 = phi float [ undef, %55 ], [ %71, %64 ]
  %77 = phi float [ %48, %55 ], [ %71, %64 ]
  %78 = phi float* [ %51, %55 ], [ %72, %64 ]
  %79 = icmp ult i64 %59, 12
  br i1 %79, label %80, label %84

80:                                               ; preds = %75, %84, %47
  %81 = phi float [ %48, %47 ], [ %76, %75 ], [ %105, %84 ]
  %82 = getelementptr inbounds %"class.std::__1::vector.17", %"class.std::__1::vector.17"* %49, i64 1
  %83 = icmp eq %"class.std::__1::vector.17"* %82, %39
  br i1 %83, label %41, label %47

84:                                               ; preds = %75, %84
  %85 = phi float [ %105, %84 ], [ %77, %75 ]
  %86 = phi float* [ %106, %84 ], [ %78, %75 ]
  %87 = load float, float* %86, align 4
  %88 = tail call float @llvm.fabs.f32(float %87)
  %89 = fcmp olt float %85, %88
  %90 = select i1 %89, float %88, float %85
  %91 = getelementptr inbounds float, float* %86, i64 1
  %92 = load float, float* %91, align 4
  %93 = tail call float @llvm.fabs.f32(float %92)
  %94 = fcmp olt float %90, %93
  %95 = select i1 %94, float %93, float %90
  %96 = getelementptr inbounds float, float* %86, i64 2
  %97 = load float, float* %96, align 4
  %98 = tail call float @llvm.fabs.f32(float %97)
  %99 = fcmp olt float %95, %98
  %100 = select i1 %99, float %98, float %95
  %101 = getelementptr inbounds float, float* %86, i64 3
  %102 = load float, float* %101, align 4
  %103 = tail call float @llvm.fabs.f32(float %102)
  %104 = fcmp olt float %100, %103
  %105 = select i1 %104, float %103, float %100
  %106 = getelementptr inbounds float, float* %86, i64 4
  %107 = icmp eq float* %106, %53
  br i1 %107, label %80, label %84

108:                                              ; preds = %134, %14
  %109 = phi i8 [ 0, %14 ], [ %136, %134 ]
  %110 = phi i64 [ 0, %14 ], [ %137, %134 ]
  %111 = icmp eq i64 %17, 0
  br i1 %111, label %125, label %112

112:                                              ; preds = %108
  %113 = icmp eq i8 %109, 0
  br i1 %113, label %114, label %123

114:                                              ; preds = %112
  %115 = getelementptr inbounds %"struct.webrtc::SubtractorOutput", %"struct.webrtc::SubtractorOutput"* %16, i64 %110, i32 12
  %116 = load float, float* %115, align 4
  %117 = fcmp ogt float %116, 2.000000e+04
  br i1 %117, label %123, label %118

118:                                              ; preds = %114
  %119 = getelementptr inbounds %"struct.webrtc::SubtractorOutput", %"struct.webrtc::SubtractorOutput"* %16, i64 %110, i32 13
  %120 = load float, float* %119, align 4
  %121 = fcmp ogt float %120, 2.000000e+04
  %122 = zext i1 %121 to i8
  br label %123

123:                                              ; preds = %118, %114, %112
  %124 = phi i8 [ 1, %112 ], [ 1, %114 ], [ %122, %118 ]
  store i8 %124, i8* %8, align 1
  br label %125

125:                                              ; preds = %123, %108, %10, %7, %41
  ret void

126:                                              ; preds = %34
  %127 = getelementptr inbounds %"struct.webrtc::SubtractorOutput", %"struct.webrtc::SubtractorOutput"* %16, i64 %37, i32 12
  %128 = load float, float* %127, align 4
  %129 = fcmp ogt float %128, 2.000000e+04
  br i1 %129, label %134, label %130

130:                                              ; preds = %126
  %131 = getelementptr inbounds %"struct.webrtc::SubtractorOutput", %"struct.webrtc::SubtractorOutput"* %16, i64 %37, i32 13
  %132 = load float, float* %131, align 4
  %133 = fcmp ogt float %132, 2.000000e+04
  br label %134

134:                                              ; preds = %34, %130, %126
  %135 = phi i1 [ true, %34 ], [ true, %126 ], [ %133, %130 ]
  %136 = zext i1 %135 to i8
  store i8 %136, i8* %8, align 1
  %137 = add nuw i64 %23, 2
  %138 = add i64 %24, -2
  %139 = icmp eq i64 %138, 0
  br i1 %139, label %108, label %21
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @_ZN6webrtc8AecState12InitialState6UpdateEbb(%"class.webrtc::AecState::InitialState"* nocapture, i1 zeroext, i1 zeroext) local_unnamed_addr #0 align 2 {
  %4 = xor i1 %2, true
  %5 = and i1 %4, %1
  %6 = zext i1 %5 to i64
  %7 = getelementptr inbounds %"class.webrtc::AecState::InitialState", %"class.webrtc::AecState::InitialState"* %0, i64 0, i32 4
  %8 = load i64, i64* %7, align 8
  %9 = add i64 %8, %6
  store i64 %9, i64* %7, align 8
  %10 = getelementptr inbounds %"class.webrtc::AecState::InitialState", %"class.webrtc::AecState::InitialState"* %0, i64 0, i32 3
  %11 = load i8, i8* %10, align 1, !range !2
  %12 = icmp ne i8 %11, 0
  %13 = getelementptr inbounds %"class.webrtc::AecState::InitialState", %"class.webrtc::AecState::InitialState"* %0, i64 0, i32 0
  %14 = load i8, i8* %13, align 8, !range !2
  %15 = icmp eq i8 %14, 0
  br i1 %15, label %18, label %16

16:                                               ; preds = %3
  %17 = icmp ult i64 %9, 1250
  br label %24

18:                                               ; preds = %3
  %19 = uitofp i64 %9 to float
  %20 = getelementptr inbounds %"class.webrtc::AecState::InitialState", %"class.webrtc::AecState::InitialState"* %0, i64 0, i32 1
  %21 = load float, float* %20, align 4
  %22 = fmul float %21, 2.500000e+02
  %23 = fcmp ogt float %22, %19
  br label %24

24:                                               ; preds = %18, %16
  %25 = phi i1 [ %23, %18 ], [ %17, %16 ]
  %26 = zext i1 %25 to i8
  store i8 %26, i8* %10, align 1
  %27 = xor i1 %25, true
  %28 = and i1 %12, %27
  %29 = getelementptr inbounds %"class.webrtc::AecState::InitialState", %"class.webrtc::AecState::InitialState"* %0, i64 0, i32 2
  %30 = zext i1 %28 to i8
  store i8 %30, i8* %29, align 8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN6webrtc8AecState24FilteringQualityAnalyzer6UpdateEbbbRKN4absl8optionalINS_13DelayEstimateEEEb(%"class.webrtc::AecState::FilteringQualityAnalyzer"* nocapture, i1 zeroext, i1 zeroext, i1 zeroext, %"class.absl::optional"* nocapture readonly dereferenceable(40), i1 zeroext) local_unnamed_addr #2 align 2 {
  %7 = xor i1 %3, true
  %8 = and i1 %7, %1
  %9 = zext i1 %8 to i64
  %10 = getelementptr inbounds %"class.webrtc::AecState::FilteringQualityAnalyzer", %"class.webrtc::AecState::FilteringQualityAnalyzer"* %0, i64 0, i32 2
  %11 = load i64, i64* %10, align 8
  %12 = add i64 %11, %9
  store i64 %12, i64* %10, align 8
  %13 = getelementptr inbounds %"class.webrtc::AecState::FilteringQualityAnalyzer", %"class.webrtc::AecState::FilteringQualityAnalyzer"* %0, i64 0, i32 3
  %14 = load i64, i64* %13, align 8
  %15 = add i64 %14, %9
  store i64 %15, i64* %13, align 8
  %16 = getelementptr inbounds %"class.webrtc::AecState::FilteringQualityAnalyzer", %"class.webrtc::AecState::FilteringQualityAnalyzer"* %0, i64 0, i32 4
  %17 = load i8, i8* %16, align 8, !range !2
  %18 = icmp ne i8 %17, 0
  %19 = or i1 %18, %5
  %20 = zext i1 %19 to i8
  store i8 %20, i8* %16, align 8
  %21 = icmp ugt i64 %15, 100
  br i1 %21, label %24, label %22

22:                                               ; preds = %6
  %23 = getelementptr inbounds %"class.webrtc::AecState::FilteringQualityAnalyzer", %"class.webrtc::AecState::FilteringQualityAnalyzer"* %0, i64 0, i32 1
  store i8 0, i8* %23, align 1
  br label %36

24:                                               ; preds = %6
  %25 = icmp ugt i64 %12, 50
  %26 = getelementptr inbounds %"class.webrtc::AecState::FilteringQualityAnalyzer", %"class.webrtc::AecState::FilteringQualityAnalyzer"* %0, i64 0, i32 1
  %27 = zext i1 %25 to i8
  store i8 %27, i8* %26, align 1
  br i1 %25, label %28, label %36

28:                                               ; preds = %24
  %29 = getelementptr inbounds %"class.absl::optional", %"class.absl::optional"* %4, i64 0, i32 0, i32 0, i32 0, i32 0
  %30 = load i8, i8* %29, align 8, !range !2
  %31 = icmp ne i8 %30, 0
  %32 = or i1 %19, %31
  br i1 %32, label %33, label %36

33:                                               ; preds = %28
  %34 = xor i1 %2, true
  %35 = zext i1 %34 to i8
  br label %36

36:                                               ; preds = %28, %22, %24, %33
  %37 = phi i8* [ %26, %33 ], [ %23, %22 ], [ %26, %24 ], [ %26, %28 ]
  %38 = phi i8 [ %35, %33 ], [ 0, %22 ], [ 0, %24 ], [ 0, %28 ]
  store i8 %38, i8* %37, align 1
  %39 = getelementptr inbounds %"class.webrtc::AecState::FilteringQualityAnalyzer", %"class.webrtc::AecState::FilteringQualityAnalyzer"* %0, i64 0, i32 0
  %40 = load i8, i8* %39, align 8, !range !2
  %41 = icmp eq i8 %40, 0
  br i1 %41, label %81, label %42

42:                                               ; preds = %36
  %43 = getelementptr inbounds %"class.webrtc::AecState::FilteringQualityAnalyzer", %"class.webrtc::AecState::FilteringQualityAnalyzer"* %0, i64 0, i32 5
  %44 = bitcast %"class.std::__1::vector.10"* %43 to i64*
  %45 = load i64, i64* %44, align 8, !noalias !13
  %46 = getelementptr inbounds %"class.webrtc::AecState::FilteringQualityAnalyzer", %"class.webrtc::AecState::FilteringQualityAnalyzer"* %0, i64 0, i32 5, i32 1
  %47 = load i64, i64* %46, align 8, !noalias !51
  %48 = inttoptr i64 %45 to i64*
  %49 = lshr i64 %47, 6
  %50 = getelementptr inbounds i64, i64* %48, i64 %49
  %51 = and i64 %47, 63
  %52 = ptrtoint i64* %50 to i64
  %53 = sub i64 %52, %45
  %54 = shl i64 %53, 3
  %55 = add i64 %54, %51
  %56 = icmp eq i64 %55, 0
  br i1 %56, label %81, label %57

57:                                               ; preds = %42
  %58 = icmp eq i8 %38, 0
  %59 = inttoptr i64 %45 to i8*
  %60 = lshr i64 %55, 6
  %61 = shl nuw nsw i64 %60, 3
  br i1 %58, label %71, label %62

62:                                               ; preds = %57
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %59, i8 -1, i64 %61, i1 false) #15
  %63 = and i64 %55, 63
  %64 = icmp eq i64 %63, 0
  br i1 %64, label %81, label %65

65:                                               ; preds = %62
  %66 = getelementptr inbounds i64, i64* %48, i64 %60
  %67 = sub nuw nsw i64 64, %63
  %68 = lshr i64 -1, %67
  %69 = load i64, i64* %66, align 8
  %70 = or i64 %69, %68
  store i64 %70, i64* %66, align 8
  br label %81

71:                                               ; preds = %57
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %59, i8 0, i64 %61, i1 false) #15
  %72 = and i64 %55, 63
  %73 = icmp eq i64 %72, 0
  br i1 %73, label %81, label %74

74:                                               ; preds = %71
  %75 = getelementptr inbounds i64, i64* %48, i64 %60
  %76 = sub nuw nsw i64 64, %72
  %77 = lshr i64 -1, %76
  %78 = xor i64 %77, -1
  %79 = load i64, i64* %75, align 8
  %80 = and i64 %79, %78
  store i64 %80, i64* %75, align 8
  br label %81

81:                                               ; preds = %74, %71, %65, %62, %42, %36
  ret void
}

declare void @_ZN6webrtc20ReverbModelEstimator6UpdateEN3rtc9ArrayViewIKNSt3__16vectorIfNS3_9allocatorIfEEEELln4711EEENS2_IKNS4_INS3_5arrayIfLm65EEENS5_ISB_EEEELln4711EEENS2_IKN4absl8optionalIfEELln4711EEENS2_IKiLln4711EEERKNS4_IbNS5_IbEEEEb(%"class.webrtc::ReverbModelEstimator"*, %"class.std::__1::vector.17"*, i64, %"class.std::__1::vector.43"*, i64, %"class.rtc::ArrayView.192"* byval(%"class.rtc::ArrayView.192") align 8, %"class.rtc::ArrayView.184"* byval(%"class.rtc::ArrayView.184") align 8, %"class.std::__1::vector.10"* dereferenceable(24), i1 zeroext) local_unnamed_addr #4

declare void @_ZNK6webrtc13ErleEstimator4DumpERKNSt3__110unique_ptrINS_13ApmDataDumperENS1_14default_deleteIS3_EEEE(%"class.webrtc::ErleEstimator"*, %"class.std::__1::unique_ptr"* dereferenceable(8)) local_unnamed_addr #4

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @_ZN6webrtc8AecState12InitialStateC2ERKNS_20EchoCanceller3ConfigE(%"class.webrtc::AecState::InitialState"* nocapture, %"struct.webrtc::EchoCanceller3Config"* nocapture readonly dereferenceable(560)) unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"class.webrtc::AecState::InitialState", %"class.webrtc::AecState::InitialState"* %0, i64 0, i32 0
  %4 = getelementptr inbounds %"struct.webrtc::EchoCanceller3Config", %"struct.webrtc::EchoCanceller3Config"* %1, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 8, !range !2
  store i8 %5, i8* %3, align 8
  %6 = getelementptr inbounds %"class.webrtc::AecState::InitialState", %"class.webrtc::AecState::InitialState"* %0, i64 0, i32 1
  %7 = getelementptr inbounds %"struct.webrtc::EchoCanceller3Config", %"struct.webrtc::EchoCanceller3Config"* %1, i64 0, i32 2, i32 5
  %8 = bitcast float* %7 to i32*
  %9 = load i32, i32* %8, align 8
  %10 = bitcast float* %6 to i32*
  store i32 %9, i32* %10, align 4
  %11 = getelementptr inbounds %"class.webrtc::AecState::InitialState", %"class.webrtc::AecState::InitialState"* %0, i64 0, i32 2
  store i8 0, i8* %11, align 8
  %12 = getelementptr inbounds %"class.webrtc::AecState::InitialState", %"class.webrtc::AecState::InitialState"* %0, i64 0, i32 3
  %13 = getelementptr inbounds %"class.webrtc::AecState::InitialState", %"class.webrtc::AecState::InitialState"* %0, i64 0, i32 4
  store i8 1, i8* %12, align 1
  store i64 0, i64* %13, align 8
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable writeonly
define hidden void @_ZN6webrtc8AecState12InitialState5ResetEv(%"class.webrtc::AecState::InitialState"* nocapture) local_unnamed_addr #6 align 2 {
  %2 = getelementptr inbounds %"class.webrtc::AecState::InitialState", %"class.webrtc::AecState::InitialState"* %0, i64 0, i32 3
  store i8 1, i8* %2, align 1
  %3 = getelementptr inbounds %"class.webrtc::AecState::InitialState", %"class.webrtc::AecState::InitialState"* %0, i64 0, i32 4
  store i64 0, i64* %3, align 8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN6webrtc8AecState11FilterDelayC2ERKNS_20EchoCanceller3ConfigEm(%"class.webrtc::AecState::FilterDelay"*, %"struct.webrtc::EchoCanceller3Config"* nocapture readonly dereferenceable(560), i64) unnamed_addr #2 align 2 {
  %4 = getelementptr inbounds %"class.webrtc::AecState::FilterDelay", %"class.webrtc::AecState::FilterDelay"* %0, i64 0, i32 0
  %5 = getelementptr inbounds %"struct.webrtc::EchoCanceller3Config", %"struct.webrtc::EchoCanceller3Config"* %1, i64 0, i32 1, i32 3
  %6 = load i64, i64* %5, align 8
  %7 = lshr i64 %6, 6
  %8 = trunc i64 %7 to i32
  store i32 %8, i32* %4, align 8
  %9 = getelementptr inbounds %"class.webrtc::AecState::FilterDelay", %"class.webrtc::AecState::FilterDelay"* %0, i64 0, i32 1
  store i8 0, i8* %9, align 4
  %10 = getelementptr inbounds %"class.webrtc::AecState::FilterDelay", %"class.webrtc::AecState::FilterDelay"* %0, i64 0, i32 2
  %11 = bitcast %"class.std::__1::vector"* %10 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %11, i8 0, i64 24, i1 false) #15
  %12 = icmp eq i64 %2, 0
  br i1 %12, label %140, label %13

13:                                               ; preds = %3
  %14 = icmp ugt i64 %2, 4611686018427387903
  br i1 %14, label %15, label %17

15:                                               ; preds = %13
  %16 = bitcast %"class.std::__1::vector"* %10 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %16) #16
  unreachable

17:                                               ; preds = %13
  %18 = shl i64 %2, 2
  %19 = tail call i8* @_Znwm(i64 %18) #14
  %20 = bitcast i8* %19 to i32*
  %21 = getelementptr inbounds %"class.webrtc::AecState::FilterDelay", %"class.webrtc::AecState::FilterDelay"* %0, i64 0, i32 2, i32 0, i32 1
  %22 = bitcast i32** %21 to i8**
  store i8* %19, i8** %22, align 8
  %23 = bitcast %"class.std::__1::vector"* %10 to i8**
  store i8* %19, i8** %23, align 8
  %24 = getelementptr inbounds i32, i32* %20, i64 %2
  %25 = getelementptr inbounds %"class.webrtc::AecState::FilterDelay", %"class.webrtc::AecState::FilterDelay"* %0, i64 0, i32 2, i32 0, i32 2, i32 0, i32 0
  store i32* %24, i32** %25, align 8
  store i32 %8, i32* %20, align 4
  %26 = getelementptr inbounds i8, i8* %19, i64 4
  %27 = bitcast i8* %26 to i32*
  %28 = icmp eq i32* %24, %27
  br i1 %28, label %136, label %29

29:                                               ; preds = %17
  %30 = shl nsw i64 %2, 2
  %31 = add i64 %30, -8
  %32 = lshr exact i64 %31, 2
  %33 = add nuw nsw i64 %32, 1
  %34 = icmp ult i64 %33, 8
  br i1 %34, label %95, label %35

35:                                               ; preds = %29
  %36 = getelementptr i8, i8* %19, i64 4
  %37 = shl nsw i64 %2, 2
  %38 = getelementptr i8, i8* %19, i64 %37
  %39 = bitcast %"class.webrtc::AecState::FilterDelay"* %0 to i8*
  %40 = getelementptr i8, i8* %39, i64 1
  %41 = bitcast %"class.webrtc::AecState::FilterDelay"* %0 to i8*
  %42 = icmp ult i8* %36, %40
  %43 = icmp ugt i8* %38, %41
  %44 = and i1 %42, %43
  br i1 %44, label %95, label %45

45:                                               ; preds = %35
  %46 = and i64 %33, 9223372036854775800
  %47 = getelementptr i32, i32* %27, i64 %46
  %48 = add nsw i64 %46, -8
  %49 = lshr exact i64 %48, 3
  %50 = add nuw nsw i64 %49, 1
  %51 = and i64 %50, 1
  %52 = icmp eq i64 %48, 0
  br i1 %52, label %80, label %53

53:                                               ; preds = %45
  %54 = sub nuw nsw i64 %50, %51
  %55 = load i32, i32* %4, align 4, !alias.scope !54
  %56 = insertelement <4 x i32> undef, i32 %55, i32 0
  %57 = shufflevector <4 x i32> %56, <4 x i32> undef, <4 x i32> zeroinitializer
  %58 = insertelement <4 x i32> undef, i32 %55, i32 0
  %59 = shufflevector <4 x i32> %58, <4 x i32> undef, <4 x i32> zeroinitializer
  %60 = load i32, i32* %4, align 4, !alias.scope !54
  %61 = insertelement <4 x i32> undef, i32 %60, i32 0
  %62 = shufflevector <4 x i32> %61, <4 x i32> undef, <4 x i32> zeroinitializer
  %63 = insertelement <4 x i32> undef, i32 %60, i32 0
  %64 = shufflevector <4 x i32> %63, <4 x i32> undef, <4 x i32> zeroinitializer
  br label %65

65:                                               ; preds = %65, %53
  %66 = phi i64 [ 0, %53 ], [ %77, %65 ]
  %67 = phi i64 [ %54, %53 ], [ %78, %65 ]
  %68 = getelementptr i32, i32* %27, i64 %66
  %69 = bitcast i32* %68 to <4 x i32>*
  store <4 x i32> %57, <4 x i32>* %69, align 4, !alias.scope !57, !noalias !54
  %70 = getelementptr i32, i32* %68, i64 4
  %71 = bitcast i32* %70 to <4 x i32>*
  store <4 x i32> %59, <4 x i32>* %71, align 4, !alias.scope !57, !noalias !54
  %72 = or i64 %66, 8
  %73 = getelementptr i32, i32* %27, i64 %72
  %74 = bitcast i32* %73 to <4 x i32>*
  store <4 x i32> %62, <4 x i32>* %74, align 4, !alias.scope !57, !noalias !54
  %75 = getelementptr i32, i32* %73, i64 4
  %76 = bitcast i32* %75 to <4 x i32>*
  store <4 x i32> %64, <4 x i32>* %76, align 4, !alias.scope !57, !noalias !54
  %77 = add i64 %66, 16
  %78 = add i64 %67, -2
  %79 = icmp eq i64 %78, 0
  br i1 %79, label %80, label %65, !llvm.loop !59

80:                                               ; preds = %65, %45
  %81 = phi i64 [ 0, %45 ], [ %77, %65 ]
  %82 = icmp eq i64 %51, 0
  br i1 %82, label %93, label %83

83:                                               ; preds = %80
  %84 = getelementptr i32, i32* %27, i64 %81
  %85 = load i32, i32* %4, align 4, !alias.scope !54
  %86 = insertelement <4 x i32> undef, i32 %85, i32 0
  %87 = shufflevector <4 x i32> %86, <4 x i32> undef, <4 x i32> zeroinitializer
  %88 = insertelement <4 x i32> undef, i32 %85, i32 0
  %89 = shufflevector <4 x i32> %88, <4 x i32> undef, <4 x i32> zeroinitializer
  %90 = bitcast i32* %84 to <4 x i32>*
  store <4 x i32> %87, <4 x i32>* %90, align 4, !alias.scope !57, !noalias !54
  %91 = getelementptr i32, i32* %84, i64 4
  %92 = bitcast i32* %91 to <4 x i32>*
  store <4 x i32> %89, <4 x i32>* %92, align 4, !alias.scope !57, !noalias !54
  br label %93

93:                                               ; preds = %80, %83
  %94 = icmp eq i64 %33, %46
  br i1 %94, label %136, label %95

95:                                               ; preds = %93, %35, %29
  %96 = phi i32* [ %27, %35 ], [ %27, %29 ], [ %47, %93 ]
  %97 = ptrtoint i32* %96 to i64
  %98 = shl nsw i64 %2, 2
  %99 = add i64 %98, -4
  %100 = sub i64 %99, %97
  %101 = getelementptr i8, i8* %19, i64 %100
  %102 = ptrtoint i8* %101 to i64
  %103 = lshr i64 %102, 2
  %104 = add nuw nsw i64 %103, 1
  %105 = and i64 %104, 7
  %106 = icmp eq i64 %105, 0
  br i1 %106, label %114, label %107

107:                                              ; preds = %95, %107
  %108 = phi i32* [ %111, %107 ], [ %96, %95 ]
  %109 = phi i64 [ %112, %107 ], [ %105, %95 ]
  %110 = load i32, i32* %4, align 4
  store i32 %110, i32* %108, align 4
  %111 = getelementptr inbounds i32, i32* %108, i64 1
  %112 = add i64 %109, -1
  %113 = icmp eq i64 %112, 0
  br i1 %113, label %114, label %107, !llvm.loop !60

114:                                              ; preds = %107, %95
  %115 = phi i32* [ %96, %95 ], [ %111, %107 ]
  %116 = icmp ult i8* %101, inttoptr (i64 28 to i8*)
  br i1 %116, label %136, label %117

117:                                              ; preds = %114, %117
  %118 = phi i32* [ %134, %117 ], [ %115, %114 ]
  %119 = load i32, i32* %4, align 4
  store i32 %119, i32* %118, align 4
  %120 = getelementptr inbounds i32, i32* %118, i64 1
  %121 = load i32, i32* %4, align 4
  store i32 %121, i32* %120, align 4
  %122 = getelementptr inbounds i32, i32* %118, i64 2
  %123 = load i32, i32* %4, align 4
  store i32 %123, i32* %122, align 4
  %124 = getelementptr inbounds i32, i32* %118, i64 3
  %125 = load i32, i32* %4, align 4
  store i32 %125, i32* %124, align 4
  %126 = getelementptr inbounds i32, i32* %118, i64 4
  %127 = load i32, i32* %4, align 4
  store i32 %127, i32* %126, align 4
  %128 = getelementptr inbounds i32, i32* %118, i64 5
  %129 = load i32, i32* %4, align 4
  store i32 %129, i32* %128, align 4
  %130 = getelementptr inbounds i32, i32* %118, i64 6
  %131 = load i32, i32* %4, align 4
  store i32 %131, i32* %130, align 4
  %132 = getelementptr inbounds i32, i32* %118, i64 7
  %133 = load i32, i32* %4, align 4
  store i32 %133, i32* %132, align 4
  %134 = getelementptr inbounds i32, i32* %118, i64 8
  %135 = icmp eq i32* %134, %24
  br i1 %135, label %136, label %117, !llvm.loop !61

136:                                              ; preds = %114, %117, %93, %17
  %137 = bitcast i32** %21 to i64*
  %138 = ptrtoint i32* %24 to i64
  store i64 %138, i64* %137, align 8
  %139 = load i32, i32* %4, align 8
  br label %140

140:                                              ; preds = %3, %136
  %141 = phi i32 [ %8, %3 ], [ %139, %136 ]
  %142 = getelementptr inbounds %"class.webrtc::AecState::FilterDelay", %"class.webrtc::AecState::FilterDelay"* %0, i64 0, i32 3
  store i32 %141, i32* %142, align 8
  %143 = getelementptr inbounds %"class.webrtc::AecState::FilterDelay", %"class.webrtc::AecState::FilterDelay"* %0, i64 0, i32 4, i32 0, i32 0, i32 0, i32 0
  store i8 0, i8* %143, align 8
  %144 = getelementptr inbounds %"class.webrtc::AecState::FilterDelay", %"class.webrtc::AecState::FilterDelay"* %0, i64 0, i32 4, i32 0, i32 0, i32 0, i32 1
  %145 = bitcast %union.anon* %144 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %145, i8 0, i64 32, i1 false) #15
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #1

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN6webrtc8AecState24FilteringQualityAnalyzerC2ERKNS_20EchoCanceller3ConfigEm(%"class.webrtc::AecState::FilteringQualityAnalyzer"*, %"struct.webrtc::EchoCanceller3Config"* nocapture readonly dereferenceable(560), i64) unnamed_addr #2 align 2 {
  %4 = alloca i8, align 1
  %5 = getelementptr inbounds %"class.webrtc::AecState::FilteringQualityAnalyzer", %"class.webrtc::AecState::FilteringQualityAnalyzer"* %0, i64 0, i32 0
  %6 = getelementptr inbounds %"struct.webrtc::EchoCanceller3Config", %"struct.webrtc::EchoCanceller3Config"* %1, i64 0, i32 2, i32 9
  %7 = load i8, i8* %6, align 2, !range !2
  store i8 %7, i8* %5, align 8
  %8 = getelementptr inbounds %"class.webrtc::AecState::FilteringQualityAnalyzer", %"class.webrtc::AecState::FilteringQualityAnalyzer"* %0, i64 0, i32 1
  store i8 0, i8* %8, align 1
  %9 = getelementptr inbounds %"class.webrtc::AecState::FilteringQualityAnalyzer", %"class.webrtc::AecState::FilteringQualityAnalyzer"* %0, i64 0, i32 2
  %10 = getelementptr inbounds %"class.webrtc::AecState::FilteringQualityAnalyzer", %"class.webrtc::AecState::FilteringQualityAnalyzer"* %0, i64 0, i32 5
  %11 = bitcast i64* %9 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %11, i8 0, i64 17, i1 false)
  call void @llvm.lifetime.start.p0i8(i64 1, i8* nonnull %4) #15
  store i8 0, i8* %4, align 1
  call void @_ZNSt3__16vectorIbNS_9allocatorIbEEEC2EmRKb(%"class.std::__1::vector.10"* %10, i64 %2, i8* nonnull dereferenceable(1) %4)
  call void @llvm.lifetime.end.p0i8(i64 1, i8* nonnull %4) #15
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__16vectorIbNS_9allocatorIbEEEC2EmRKb(%"class.std::__1::vector.10"*, i64, i8* dereferenceable(1)) unnamed_addr #2 comdat align 2 {
  %4 = getelementptr inbounds %"class.std::__1::vector.10", %"class.std::__1::vector.10"* %0, i64 0, i32 1
  %5 = getelementptr inbounds %"class.std::__1::vector.10", %"class.std::__1::vector.10"* %0, i64 0, i32 2, i32 0, i32 0
  %6 = icmp eq i64 %1, 0
  %7 = bitcast %"class.std::__1::vector.10"* %0 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %7, i8 0, i64 24, i1 false)
  br i1 %6, label %48, label %8

8:                                                ; preds = %3
  %9 = icmp slt i64 %1, 0
  br i1 %9, label %10, label %12

10:                                               ; preds = %8
  %11 = bitcast %"class.std::__1::vector.10"* %0 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %11) #16
  unreachable

12:                                               ; preds = %8
  %13 = add nsw i64 %1, -1
  %14 = lshr i64 %13, 6
  %15 = add nuw nsw i64 %14, 1
  %16 = shl nuw nsw i64 %15, 3
  %17 = tail call i8* @_Znwm(i64 %16) #14
  %18 = bitcast %"class.std::__1::vector.10"* %0 to i8**
  store i8* %17, i8** %18, align 8
  store i64 0, i64* %4, align 8
  store i64 %15, i64* %5, align 8
  %19 = load i8, i8* %2, align 1, !range !2
  %20 = icmp eq i8 %19, 0
  store i64 %1, i64* %4, align 8
  %21 = icmp ult i64 %1, 65
  %22 = bitcast i8* %17 to i64*
  %23 = getelementptr inbounds i64, i64* %22, i64 %14
  %24 = select i1 %21, i64* %22, i64* %23
  store i64 0, i64* %24, align 8
  %25 = lshr i64 %1, 6
  %26 = shl nuw nsw i64 %25, 3
  br i1 %20, label %37, label %27

27:                                               ; preds = %12
  tail call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %17, i8 -1, i64 %26, i1 false) #15
  %28 = and i64 %1, 63
  %29 = icmp eq i64 %28, 0
  br i1 %29, label %48, label %30

30:                                               ; preds = %27
  %31 = bitcast i8* %17 to i64*
  %32 = getelementptr inbounds i64, i64* %31, i64 %25
  %33 = sub nuw nsw i64 64, %28
  %34 = lshr i64 -1, %33
  %35 = load i64, i64* %32, align 8
  %36 = or i64 %35, %34
  store i64 %36, i64* %32, align 8
  br label %48

37:                                               ; preds = %12
  tail call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %17, i8 0, i64 %26, i1 false) #15
  %38 = and i64 %1, 63
  %39 = icmp eq i64 %38, 0
  br i1 %39, label %48, label %40

40:                                               ; preds = %37
  %41 = bitcast i8* %17 to i64*
  %42 = getelementptr inbounds i64, i64* %41, i64 %25
  %43 = sub nuw nsw i64 64, %38
  %44 = lshr i64 -1, %43
  %45 = xor i64 %44, -1
  %46 = load i64, i64* %42, align 8
  %47 = and i64 %46, %45
  store i64 %47, i64* %42, align 8
  br label %48

48:                                               ; preds = %40, %37, %30, %27, %3
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN6webrtc8AecState24FilteringQualityAnalyzer5ResetEv(%"class.webrtc::AecState::FilteringQualityAnalyzer"* nocapture) local_unnamed_addr #2 align 2 {
  %2 = getelementptr inbounds %"class.webrtc::AecState::FilteringQualityAnalyzer", %"class.webrtc::AecState::FilteringQualityAnalyzer"* %0, i64 0, i32 5
  %3 = bitcast %"class.std::__1::vector.10"* %2 to i64*
  %4 = load i64, i64* %3, align 8, !noalias !13
  %5 = getelementptr inbounds %"class.webrtc::AecState::FilteringQualityAnalyzer", %"class.webrtc::AecState::FilteringQualityAnalyzer"* %0, i64 0, i32 5, i32 1
  %6 = load i64, i64* %5, align 8, !noalias !62
  %7 = inttoptr i64 %4 to i64*
  %8 = lshr i64 %6, 6
  %9 = getelementptr inbounds i64, i64* %7, i64 %8
  %10 = and i64 %6, 63
  %11 = ptrtoint i64* %9 to i64
  %12 = sub i64 %11, %4
  %13 = shl i64 %12, 3
  %14 = add i64 %13, %10
  %15 = icmp eq i64 %14, 0
  br i1 %15, label %29, label %16

16:                                               ; preds = %1
  %17 = inttoptr i64 %4 to i8*
  %18 = lshr i64 %14, 6
  %19 = shl nuw nsw i64 %18, 3
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %17, i8 0, i64 %19, i1 false) #15
  %20 = and i64 %14, 63
  %21 = icmp eq i64 %20, 0
  br i1 %21, label %29, label %22

22:                                               ; preds = %16
  %23 = getelementptr inbounds i64, i64* %7, i64 %18
  %24 = sub nuw nsw i64 64, %20
  %25 = lshr i64 -1, %24
  %26 = xor i64 %25, -1
  %27 = load i64, i64* %23, align 8
  %28 = and i64 %27, %26
  store i64 %28, i64* %23, align 8
  br label %29

29:                                               ; preds = %1, %16, %22
  %30 = getelementptr inbounds %"class.webrtc::AecState::FilteringQualityAnalyzer", %"class.webrtc::AecState::FilteringQualityAnalyzer"* %0, i64 0, i32 1
  store i8 0, i8* %30, align 1
  %31 = getelementptr inbounds %"class.webrtc::AecState::FilteringQualityAnalyzer", %"class.webrtc::AecState::FilteringQualityAnalyzer"* %0, i64 0, i32 2
  store i64 0, i64* %31, align 8
  ret void
}

; Function Attrs: nounwind readnone speculatable
declare float @llvm.fabs.f32(float) #7

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZN6webrtc11field_trial9IsEnabledEPKc(i8*) local_unnamed_addr #8 comdat {
  %2 = alloca %"class.std::__1::basic_string", align 8
  %3 = alloca %"class.std::__1::basic_string", align 8
  %4 = bitcast %"class.std::__1::basic_string"* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %4) #15
  %5 = bitcast %"class.std::__1::basic_string"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %5) #15
  %6 = tail call i64 @strlen(i8* %0) #15
  %7 = icmp ugt i64 %6, -17
  br i1 %7, label %8, label %10

8:                                                ; preds = %1
  %9 = bitcast %"class.std::__1::basic_string"* %3 to %"class.std::__1::__basic_string_common"*
  call void @_ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__basic_string_common"* nonnull %9) #16
  unreachable

10:                                               ; preds = %1
  %11 = icmp ult i64 %6, 23
  br i1 %11, label %20, label %12

12:                                               ; preds = %10
  %13 = add nuw i64 %6, 16
  %14 = and i64 %13, -16
  %15 = tail call i8* @_Znwm(i64 %14) #14
  %16 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %3, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  store i8* %15, i8** %16, align 8
  %17 = or i64 %14, -9223372036854775808
  %18 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %3, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 2
  store i64 %17, i64* %18, align 8
  %19 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %3, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  store i64 %6, i64* %19, align 8
  br label %25

20:                                               ; preds = %10
  %21 = trunc i64 %6 to i8
  %22 = bitcast %"class.std::__1::basic_string"* %3 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %23 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %22, i64 0, i32 1, i32 0
  store i8 %21, i8* %23, align 1
  %24 = icmp eq i64 %6, 0
  br i1 %24, label %27, label %25

25:                                               ; preds = %20, %12
  %26 = phi i8* [ %15, %12 ], [ %5, %20 ]
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 1 %26, i8* align 1 %0, i64 %6, i1 false) #15
  br label %27

27:                                               ; preds = %20, %25
  %28 = phi i8* [ %5, %20 ], [ %26, %25 ]
  %29 = getelementptr inbounds i8, i8* %28, i64 %6
  store i8 0, i8* %29, align 1
  call void @_ZN6webrtc11field_trial12FindFullNameERKNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEE(%"class.std::__1::basic_string"* nonnull sret %2, %"class.std::__1::basic_string"* nonnull dereferenceable(24) %3) #15
  %30 = bitcast %"class.std::__1::basic_string"* %2 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %31 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %30, i64 0, i32 1, i32 0
  %32 = load i8, i8* %31, align 1
  %33 = icmp slt i8 %32, 0
  %34 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %2, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %35 = load i8*, i8** %34, align 8
  %36 = select i1 %33, i8* %35, i8* %4
  %37 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %2, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %38 = load i64, i64* %37, align 8
  %39 = zext i8 %32 to i64
  %40 = select i1 %33, i64 %38, i64 %39
  %41 = getelementptr inbounds i8, i8* %36, i64 %40
  %42 = ptrtoint i8* %41 to i64
  %43 = ptrtoint i8* %36 to i64
  %44 = icmp slt i64 %40, 7
  br i1 %44, label %63, label %45

45:                                               ; preds = %27, %58
  %46 = phi i64 [ %61, %58 ], [ %40, %27 ]
  %47 = phi i8* [ %59, %58 ], [ %36, %27 ]
  %48 = add nsw i64 %46, -6
  %49 = icmp eq i64 %48, 0
  br i1 %49, label %63, label %50

50:                                               ; preds = %45
  %51 = call i8* @memchr(i8* %47, i32 69, i64 %48) #15
  %52 = icmp eq i8* %51, null
  br i1 %52, label %63, label %53

53:                                               ; preds = %50
  %54 = call i32 @bcmp(i8* nonnull %51, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.21, i64 0, i64 0), i64 7) #15
  %55 = icmp eq i32 %54, 0
  br i1 %55, label %56, label %58

56:                                               ; preds = %53
  %57 = ptrtoint i8* %51 to i64
  br label %63

58:                                               ; preds = %53
  %59 = getelementptr inbounds i8, i8* %51, i64 1
  %60 = ptrtoint i8* %59 to i64
  %61 = sub i64 %42, %60
  %62 = icmp slt i64 %61, 7
  br i1 %62, label %63, label %45

63:                                               ; preds = %58, %50, %45, %56, %27
  %64 = phi i64 [ %42, %27 ], [ %57, %56 ], [ %42, %45 ], [ %42, %50 ], [ %42, %58 ]
  %65 = phi i8* [ %41, %27 ], [ %51, %56 ], [ %41, %45 ], [ %41, %50 ], [ %41, %58 ]
  %66 = icmp ne i8* %65, %41
  %67 = icmp eq i64 %64, %43
  %68 = and i1 %67, %66
  br i1 %33, label %69, label %70

69:                                               ; preds = %63
  call void @_ZdlPv(i8* %35) #14
  br label %70

70:                                               ; preds = %63, %69
  %71 = bitcast %"class.std::__1::basic_string"* %3 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %72 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %71, i64 0, i32 1, i32 0
  %73 = load i8, i8* %72, align 1
  %74 = icmp slt i8 %73, 0
  br i1 %74, label %75, label %78

75:                                               ; preds = %70
  %76 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %3, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %77 = load i8*, i8** %76, align 8
  call void @_ZdlPv(i8* %77) #14
  br label %78

78:                                               ; preds = %70, %75
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %5) #15
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %4) #15
  ret i1 %68
}

declare void @_ZN6webrtc11field_trial12FindFullNameERKNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEE(%"class.std::__1::basic_string"* sret, %"class.std::__1::basic_string"* dereferenceable(24)) local_unnamed_addr #4

; Function Attrs: noreturn
declare void @_ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__basic_string_common"*) local_unnamed_addr #9

; Function Attrs: argmemonly nofree nounwind readonly
declare i64 @strlen(i8* nocapture) local_unnamed_addr #10

; Function Attrs: nofree nounwind readonly
declare i8* @memchr(i8*, i32, i64) local_unnamed_addr #11

; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(i8*) local_unnamed_addr #12

declare void @_ZN6webrtc14FilterAnalyzer5ResetEv(%"class.webrtc::FilterAnalyzer"*) local_unnamed_addr #4

declare void @_ZN6webrtc12ErlEstimator5ResetEv(%"class.webrtc::ErlEstimator"*) local_unnamed_addr #4

declare void @_ZN6webrtc11ReverbModel25UpdateReverbNoFreqShapingEN3rtc9ArrayViewIKfLln4711EEEff(%"class.webrtc::ReverbModel"*, float*, i64, float, float) local_unnamed_addr #4

declare zeroext i1 @_ZNK6webrtc21StationarityEstimator17IsBlockStationaryEv(%"class.webrtc::StationarityEstimator"*) local_unnamed_addr #4

declare void @_ZNK6webrtc20ReverbDecayEstimator4DumpEPNS_13ApmDataDumperE(%"class.webrtc::ReverbDecayEstimator"*, %"class.webrtc::ApmDataDumper"*) local_unnamed_addr #4

; Function Attrs: nounwind
declare void @_ZN6webrtc13ApmDataDumperD1Ev(%"class.webrtc::ApmDataDumper"*) unnamed_addr #5

; Function Attrs: noreturn
declare void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"*) local_unnamed_addr #9

; Function Attrs: argmemonly nounwind
declare void @llvm.memmove.p0i8.p0i8.i64(i8* nocapture, i8* nocapture readonly, i64, i1 immarg) #1

; Function Attrs: nofree nounwind readonly
declare i32 @bcmp(i8* nocapture, i8* nocapture, i64) local_unnamed_addr #13

attributes #0 = { nofree norecurse nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nobuiltin nofree "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nofree norecurse nounwind ssp uwtable writeonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { nounwind readnone speculatable }
attributes #8 = { inlinehint nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #9 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #10 = { argmemonly nofree nounwind readonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #11 = { nofree nounwind readonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #12 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #13 = { nofree nounwind readonly }
attributes #14 = { builtin nounwind }
attributes #15 = { nounwind }
attributes #16 = { noreturn nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{i8 0, i8 2}
!3 = !{!4}
!4 = distinct !{!4, !5}
!5 = distinct !{!5, !"LVerDomain"}
!6 = !{!7}
!7 = distinct !{!7, !5}
!8 = distinct !{!8, !9}
!9 = !{!"llvm.loop.isvectorized", i32 1}
!10 = distinct !{!10, !11}
!11 = !{!"llvm.loop.unroll.disable"}
!12 = distinct !{!12, !9}
!13 = !{}
!14 = !{!15}
!15 = distinct !{!15, !16, !"_ZNSt3__16vectorIbNS_9allocatorIbEEE3endEv: argument 0"}
!16 = distinct !{!16, !"_ZNSt3__16vectorIbNS_9allocatorIbEEE3endEv"}
!17 = distinct !{!17, !9}
!18 = distinct !{!18, !11}
!19 = distinct !{!19, !20, !9}
!20 = !{!"llvm.loop.unroll.runtime.disable"}
!21 = distinct !{!21, !11}
!22 = distinct !{!22, !11}
!23 = !{!24}
!24 = distinct !{!24, !25}
!25 = distinct !{!25, !"LVerDomain"}
!26 = !{!27}
!27 = distinct !{!27, !25}
!28 = distinct !{!28, !9}
!29 = !{!30}
!30 = distinct !{!30, !31}
!31 = distinct !{!31, !"LVerDomain"}
!32 = !{!33}
!33 = distinct !{!33, !31}
!34 = distinct !{!34, !9}
!35 = !{!36}
!36 = distinct !{!36, !37}
!37 = distinct !{!37, !"LVerDomain"}
!38 = !{!39}
!39 = distinct !{!39, !37}
!40 = !{!41}
!41 = distinct !{!41, !37}
!42 = !{!36, !39}
!43 = distinct !{!43, !11}
!44 = distinct !{!44, !9}
!45 = distinct !{!45, !11}
!46 = distinct !{!46, !9}
!47 = distinct !{!47, !11}
!48 = distinct !{!48, !20, !9}
!49 = distinct !{!49, !11}
!50 = distinct !{!50, !11}
!51 = !{!52}
!52 = distinct !{!52, !53, !"_ZNSt3__16vectorIbNS_9allocatorIbEEE3endEv: argument 0"}
!53 = distinct !{!53, !"_ZNSt3__16vectorIbNS_9allocatorIbEEE3endEv"}
!54 = !{!55}
!55 = distinct !{!55, !56}
!56 = distinct !{!56, !"LVerDomain"}
!57 = !{!58}
!58 = distinct !{!58, !56}
!59 = distinct !{!59, !9}
!60 = distinct !{!60, !11}
!61 = distinct !{!61, !9}
!62 = !{!63}
!63 = distinct !{!63, !64, !"_ZNSt3__16vectorIbNS_9allocatorIbEEE3endEv: argument 0"}
!64 = distinct !{!64, !"_ZNSt3__16vectorIbNS_9allocatorIbEEE3endEv"}
