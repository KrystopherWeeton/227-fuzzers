; ModuleID = '../../third_party/skia/src/pathops/SkPathOpsCubic.cpp'
source_filename = "../../third_party/skia/src/pathops/SkPathOpsCubic.cpp"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%struct.SkDCubic = type { [4 x %struct.SkDPoint] }
%struct.SkDPoint = type { double, double }
%struct.SkDCubicPair = type { [7 x %struct.SkDPoint] }
%struct.SkDQuad = type { [3 x %struct.SkDPoint] }
%struct.SkDConic = type { %struct.SkDQuad, float }
%struct.SkPoint = type { float, float }
%class.anon.2 = type { i8 }
%class.SkTCubic = type { %class.SkTCurve, %struct.SkDCubic }
%class.SkTCurve = type { i32 (...)** }
%class.SkIntersections = type <{ [13 x %struct.SkDPoint], [2 x %struct.SkDPoint], [2 x [13 x double]], [2 x i16], [2 x i8], i8, i8, i8, i8, [6 x i8] }>
%struct.SkDLine = type { [2 x %struct.SkDPoint] }
%struct.SkDRect = type { double, double, double, double }
%class.SkArenaAlloc = type <{ i8*, i8*, i8*, %class.SkFibBlockSizes, [4 x i8] }>
%class.SkFibBlockSizes = type { i32 }

$_ZNK8SkDPoint19approximatelyDEqualERKS_ = comdat any

$_ZN8SkTCubicD0Ev = comdat any

$_ZNK8SkTCubicixEi = comdat any

$_ZN8SkTCubicixEi = comdat any

$_ZNK8SkTCubic9collapsedEv = comdat any

$_ZNK8SkTCubic14controlsInsideEv = comdat any

$_ZN8SkTCubic9debugInitEv = comdat any

$_ZNK8SkTCubic7dxdyAtTEd = comdat any

$_ZNK8SkTCubic14hullIntersectsERK8SkDCubicPb = comdat any

$_ZNK8SkTCubic14hullIntersectsERK8SkTCurvePb = comdat any

$_ZNK8SkTCubic7IsConicEv = comdat any

$_ZNK8SkTCubic4makeER12SkArenaAlloc = comdat any

$_ZNK8SkTCubic16maxIntersectionsEv = comdat any

$_ZNK8SkTCubic8otherPtsEiPPK8SkDPoint = comdat any

$_ZNK8SkTCubic10pointCountEv = comdat any

$_ZNK8SkTCubic9pointLastEv = comdat any

$_ZNK8SkTCubic5ptAtTEd = comdat any

$_ZNK8SkTCubic9subDivideEddP8SkTCurve = comdat any

$_ZNK8SkDPoint18approximatelyEqualERKS_ = comdat any

$_ZZN12SkArenaAlloc4makeIZNS_4makeI8SkTCubicJEEEPT_DpOT0_EUlPvE_EEDTclfp_LDnEEEOS3_ENUlPcE_8__invokeESC_ = comdat any

$_ZN8SkTCurveD2Ev = comdat any

$_Z12SkTIntroSortIdZ8SkTQSortIdEvPT_S2_EUlRKdS4_E_EviS2_iRKT0_ = comdat any

$_Z11SkTHeapSortIdZ8SkTQSortIdEvPT_S2_EUlRKdS4_E_EvS2_mRKT0_ = comdat any

@_ZN8SkDCubic14gPrecisionUnitE = hidden local_unnamed_addr constant i32 256, align 4
@.str = private unnamed_addr constant [54 x i8] c"../../third_party/skia/src/pathops/SkPathOpsCubic.cpp\00", align 1
@.str.1 = private unnamed_addr constant [3 x i8] c"!c\00", align 1
@_ZTV8SkTCubic = hidden unnamed_addr constant { [24 x i8*] } { [24 x i8*] [i8* null, i8* null, i8* bitcast (void (%class.SkTCurve*)* @_ZN8SkTCurveD2Ev to i8*), i8* bitcast (void (%class.SkTCubic*)* @_ZN8SkTCubicD0Ev to i8*), i8* bitcast (%struct.SkDPoint* (%class.SkTCubic*, i32)* @_ZNK8SkTCubicixEi to i8*), i8* bitcast (%struct.SkDPoint* (%class.SkTCubic*, i32)* @_ZN8SkTCubicixEi to i8*), i8* bitcast (i1 (%class.SkTCubic*)* @_ZNK8SkTCubic9collapsedEv to i8*), i8* bitcast (i1 (%class.SkTCubic*)* @_ZNK8SkTCubic14controlsInsideEv to i8*), i8* bitcast (void (%class.SkTCubic*)* @_ZN8SkTCubic9debugInitEv to i8*), i8* bitcast ({ double, double } (%class.SkTCubic*, double)* @_ZNK8SkTCubic7dxdyAtTEd to i8*), i8* bitcast (i1 (%class.SkTCubic*, %struct.SkDQuad*, i8*)* @_ZNK8SkTCubic14hullIntersectsERK7SkDQuadPb to i8*), i8* bitcast (i1 (%class.SkTCubic*, %struct.SkDConic*, i8*)* @_ZNK8SkTCubic14hullIntersectsERK8SkDConicPb to i8*), i8* bitcast (i1 (%class.SkTCubic*, %struct.SkDCubic*, i8*)* @_ZNK8SkTCubic14hullIntersectsERK8SkDCubicPb to i8*), i8* bitcast (i1 (%class.SkTCubic*, %class.SkTCurve*, i8*)* @_ZNK8SkTCubic14hullIntersectsERK8SkTCurvePb to i8*), i8* bitcast (i32 (%class.SkTCubic*, %class.SkIntersections*, %struct.SkDLine*)* @_ZNK8SkTCubic12intersectRayEP15SkIntersectionsRK7SkDLine to i8*), i8* bitcast (i1 (%class.SkTCubic*)* @_ZNK8SkTCubic7IsConicEv to i8*), i8* bitcast (%class.SkTCurve* (%class.SkTCubic*, %class.SkArenaAlloc*)* @_ZNK8SkTCubic4makeER12SkArenaAlloc to i8*), i8* bitcast (i32 (%class.SkTCubic*)* @_ZNK8SkTCubic16maxIntersectionsEv to i8*), i8* bitcast (void (%class.SkTCubic*, i32, %struct.SkDPoint**)* @_ZNK8SkTCubic8otherPtsEiPPK8SkDPoint to i8*), i8* bitcast (i32 (%class.SkTCubic*)* @_ZNK8SkTCubic10pointCountEv to i8*), i8* bitcast (i32 (%class.SkTCubic*)* @_ZNK8SkTCubic9pointLastEv to i8*), i8* bitcast ({ double, double } (%class.SkTCubic*, double)* @_ZNK8SkTCubic5ptAtTEd to i8*), i8* bitcast (void (%class.SkTCubic*, %struct.SkDRect*)* @_ZNK8SkTCubic9setBoundsEP7SkDRect to i8*), i8* bitcast (void (%class.SkTCubic*, double, double, %class.SkTCurve*)* @_ZNK8SkTCubic9subDivideEddP8SkTCurve to i8*)] }, align 8

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @_ZNK8SkDCubic5alignEiiP8SkDPoint(%struct.SkDCubic* nocapture readonly, i32, i32, %struct.SkDPoint* nocapture) local_unnamed_addr #0 align 2 {
  %5 = sext i32 %1 to i64
  %6 = getelementptr inbounds %struct.SkDCubic, %struct.SkDCubic* %0, i64 0, i32 0, i64 %5, i32 0
  %7 = load double, double* %6, align 8
  %8 = sext i32 %2 to i64
  %9 = getelementptr inbounds %struct.SkDCubic, %struct.SkDCubic* %0, i64 0, i32 0, i64 %8, i32 0
  %10 = load double, double* %9, align 8
  %11 = fcmp oeq double %7, %10
  br i1 %11, label %12, label %14

12:                                               ; preds = %4
  %13 = getelementptr inbounds %struct.SkDPoint, %struct.SkDPoint* %3, i64 0, i32 0
  store double %7, double* %13, align 8
  br label %14

14:                                               ; preds = %12, %4
  %15 = getelementptr inbounds %struct.SkDCubic, %struct.SkDCubic* %0, i64 0, i32 0, i64 %5, i32 1
  %16 = load double, double* %15, align 8
  %17 = getelementptr inbounds %struct.SkDCubic, %struct.SkDCubic* %0, i64 0, i32 0, i64 %8, i32 1
  %18 = load double, double* %17, align 8
  %19 = fcmp oeq double %16, %18
  br i1 %19, label %20, label %22

20:                                               ; preds = %14
  %21 = getelementptr inbounds %struct.SkDPoint, %struct.SkDPoint* %3, i64 0, i32 1
  store double %16, double* %21, align 8
  br label %22

22:                                               ; preds = %20, %14
  ret void
}

; Function Attrs: nounwind readonly ssp uwtable
define hidden double @_ZNK8SkDCubic12binarySearchEdddNS_10SearchAxisE(%struct.SkDCubic* readonly, double, double, double, i32) local_unnamed_addr #1 align 2 {
  %6 = alloca <2 x double>, align 16
  %7 = alloca <2 x double>, align 16
  %8 = alloca <2 x double>, align 16
  %9 = fadd double %1, %2
  %10 = fmul double %9, 5.000000e-01
  %11 = fsub double %10, %1
  %12 = bitcast <2 x double>* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %12) #12
  %13 = fcmp oeq double %10, 0.000000e+00
  %14 = bitcast <2 x double>* %6 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %14, i8 -1, i64 16, i1 false)
  br i1 %13, label %15, label %19

15:                                               ; preds = %5
  %16 = bitcast %struct.SkDCubic* %0 to <2 x double>*
  %17 = load <2 x double>, <2 x double>* %16, align 8
  %18 = shufflevector <2 x double> %17, <2 x double> undef, <2 x i32> <i32 1, i32 0>
  br label %66

19:                                               ; preds = %5
  %20 = fcmp oeq double %10, 1.000000e+00
  br i1 %20, label %21, label %26

21:                                               ; preds = %19
  %22 = getelementptr inbounds %struct.SkDCubic, %struct.SkDCubic* %0, i64 0, i32 0, i64 3, i32 0
  %23 = bitcast double* %22 to <2 x double>*
  %24 = load <2 x double>, <2 x double>* %23, align 8
  %25 = shufflevector <2 x double> %24, <2 x double> undef, <2 x i32> <i32 1, i32 0>
  br label %66

26:                                               ; preds = %19
  %27 = fsub double 1.000000e+00, %10
  %28 = fmul double %27, %27
  %29 = fmul double %27, %28
  %30 = fmul double %28, 3.000000e+00
  %31 = fmul double %10, %30
  %32 = fmul double %10, %10
  %33 = fmul double %27, 3.000000e+00
  %34 = fmul double %32, %33
  %35 = fmul double %10, %32
  %36 = getelementptr inbounds %struct.SkDCubic, %struct.SkDCubic* %0, i64 0, i32 0, i64 1, i32 0
  %37 = getelementptr inbounds %struct.SkDCubic, %struct.SkDCubic* %0, i64 0, i32 0, i64 2, i32 0
  %38 = getelementptr inbounds %struct.SkDCubic, %struct.SkDCubic* %0, i64 0, i32 0, i64 3, i32 0
  %39 = bitcast %struct.SkDCubic* %0 to <2 x double>*
  %40 = load <2 x double>, <2 x double>* %39, align 8
  %41 = shufflevector <2 x double> %40, <2 x double> undef, <2 x i32> <i32 1, i32 0>
  %42 = insertelement <2 x double> undef, double %29, i32 0
  %43 = shufflevector <2 x double> %42, <2 x double> undef, <2 x i32> zeroinitializer
  %44 = fmul <2 x double> %43, %41
  %45 = bitcast double* %36 to <2 x double>*
  %46 = load <2 x double>, <2 x double>* %45, align 8
  %47 = shufflevector <2 x double> %46, <2 x double> undef, <2 x i32> <i32 1, i32 0>
  %48 = insertelement <2 x double> undef, double %31, i32 0
  %49 = shufflevector <2 x double> %48, <2 x double> undef, <2 x i32> zeroinitializer
  %50 = fmul <2 x double> %49, %47
  %51 = fadd <2 x double> %44, %50
  %52 = bitcast double* %37 to <2 x double>*
  %53 = load <2 x double>, <2 x double>* %52, align 8
  %54 = shufflevector <2 x double> %53, <2 x double> undef, <2 x i32> <i32 1, i32 0>
  %55 = insertelement <2 x double> undef, double %34, i32 0
  %56 = shufflevector <2 x double> %55, <2 x double> undef, <2 x i32> zeroinitializer
  %57 = fmul <2 x double> %56, %54
  %58 = fadd <2 x double> %51, %57
  %59 = bitcast double* %38 to <2 x double>*
  %60 = load <2 x double>, <2 x double>* %59, align 8
  %61 = shufflevector <2 x double> %60, <2 x double> undef, <2 x i32> <i32 1, i32 0>
  %62 = insertelement <2 x double> undef, double %35, i32 0
  %63 = shufflevector <2 x double> %62, <2 x double> undef, <2 x i32> zeroinitializer
  %64 = fmul <2 x double> %63, %61
  %65 = fadd <2 x double> %58, %64
  br label %66

66:                                               ; preds = %15, %21, %26
  %67 = phi <2 x double> [ %18, %15 ], [ %25, %21 ], [ %65, %26 ]
  %68 = shufflevector <2 x double> %67, <2 x double> undef, <2 x i32> <i32 1, i32 0>
  store <2 x double> %68, <2 x double>* %6, align 16
  %69 = zext i32 %4 to i64
  %70 = getelementptr inbounds <2 x double>, <2 x double>* %6, i64 0, i64 %69
  %71 = load double, double* %70, align 8
  %72 = fsub double %71, %3
  %73 = bitcast <2 x double>* %7 to i8*
  %74 = getelementptr inbounds %struct.SkDCubic, %struct.SkDCubic* %0, i64 0, i32 0, i64 1, i32 0
  %75 = getelementptr inbounds %struct.SkDCubic, %struct.SkDCubic* %0, i64 0, i32 0, i64 2, i32 0
  %76 = getelementptr inbounds %struct.SkDCubic, %struct.SkDCubic* %0, i64 0, i32 0, i64 3, i32 0
  %77 = getelementptr inbounds <2 x double>, <2 x double>* %7, i64 0, i64 %69
  %78 = bitcast <2 x double>* %8 to i8*
  %79 = getelementptr inbounds <2 x double>, <2 x double>* %8, i64 0, i64 %69
  %80 = bitcast <2 x double>* %7 to i8*
  %81 = bitcast <2 x double>* %8 to i8*
  %82 = extractelement <2 x double> %67, i32 0
  %83 = bitcast %struct.SkDCubic* %0 to <2 x double>*
  %84 = bitcast double* %74 to <2 x double>*
  %85 = bitcast double* %75 to <2 x double>*
  %86 = bitcast double* %76 to <2 x double>*
  %87 = bitcast double* %76 to <2 x double>*
  %88 = bitcast %struct.SkDCubic* %0 to <2 x double>*
  %89 = bitcast %struct.SkDCubic* %0 to <2 x double>*
  %90 = bitcast double* %74 to <2 x double>*
  %91 = bitcast double* %75 to <2 x double>*
  %92 = bitcast double* %76 to <2 x double>*
  %93 = bitcast double* %76 to <2 x double>*
  %94 = bitcast %struct.SkDCubic* %0 to <2 x double>*
  %95 = bitcast %struct.SkDCubic* %0 to <2 x double>*
  %96 = bitcast double* %74 to <2 x double>*
  %97 = bitcast double* %75 to <2 x double>*
  %98 = bitcast double* %76 to <2 x double>*
  %99 = bitcast double* %76 to <2 x double>*
  %100 = bitcast %struct.SkDCubic* %0 to <2 x double>*
  br label %101

101:                                              ; preds = %284, %66
  %102 = phi double [ %82, %66 ], [ %286, %284 ]
  %103 = phi double [ %72, %66 ], [ %289, %284 ]
  %104 = phi double [ %71, %66 ], [ %288, %284 ]
  %105 = phi double [ %11, %66 ], [ %108, %284 ]
  %106 = phi double [ %10, %66 ], [ %287, %284 ]
  %107 = phi <2 x double> [ %67, %66 ], [ %290, %284 ]
  %108 = fmul double %105, 5.000000e-01
  %109 = fsub double %106, %108
  %110 = fcmp ogt double %109, %1
  %111 = select i1 %110, double %109, double %1
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %73) #12
  %112 = fcmp oeq double %111, 0.000000e+00
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %80, i8 -1, i64 16, i1 false)
  br i1 %112, label %113, label %115

113:                                              ; preds = %101
  %114 = load <2 x double>, <2 x double>* %88, align 8
  br label %148

115:                                              ; preds = %101
  %116 = fcmp oeq double %111, 1.000000e+00
  br i1 %116, label %117, label %119

117:                                              ; preds = %115
  %118 = load <2 x double>, <2 x double>* %87, align 8
  br label %148

119:                                              ; preds = %115
  %120 = fsub double 1.000000e+00, %111
  %121 = fmul double %120, %120
  %122 = fmul double %120, %121
  %123 = fmul double %121, 3.000000e+00
  %124 = fmul double %111, %123
  %125 = fmul double %111, %111
  %126 = fmul double %120, 3.000000e+00
  %127 = fmul double %125, %126
  %128 = fmul double %111, %125
  %129 = load <2 x double>, <2 x double>* %83, align 8
  %130 = insertelement <2 x double> undef, double %122, i32 0
  %131 = shufflevector <2 x double> %130, <2 x double> undef, <2 x i32> zeroinitializer
  %132 = fmul <2 x double> %131, %129
  %133 = load <2 x double>, <2 x double>* %84, align 8
  %134 = insertelement <2 x double> undef, double %124, i32 0
  %135 = shufflevector <2 x double> %134, <2 x double> undef, <2 x i32> zeroinitializer
  %136 = fmul <2 x double> %135, %133
  %137 = fadd <2 x double> %132, %136
  %138 = load <2 x double>, <2 x double>* %85, align 8
  %139 = insertelement <2 x double> undef, double %127, i32 0
  %140 = shufflevector <2 x double> %139, <2 x double> undef, <2 x i32> zeroinitializer
  %141 = fmul <2 x double> %140, %138
  %142 = fadd <2 x double> %137, %141
  %143 = load <2 x double>, <2 x double>* %86, align 8
  %144 = insertelement <2 x double> undef, double %128, i32 0
  %145 = shufflevector <2 x double> %144, <2 x double> undef, <2 x i32> zeroinitializer
  %146 = fmul <2 x double> %145, %143
  %147 = fadd <2 x double> %142, %146
  br label %148

148:                                              ; preds = %113, %117, %119
  %149 = phi <2 x double> [ %114, %113 ], [ %118, %117 ], [ %147, %119 ]
  store <2 x double> %149, <2 x double>* %7, align 16
  %150 = extractelement <2 x double> %149, i32 0
  %151 = extractelement <2 x double> %107, i32 1
  %152 = fsub double %150, %151
  %153 = tail call double @llvm.fabs.f64(double %152) #12
  %154 = fcmp olt double %153, 0x3E70000000000000
  br i1 %154, label %155, label %161

155:                                              ; preds = %148
  %156 = extractelement <2 x double> %149, i32 1
  %157 = extractelement <2 x double> %107, i32 0
  %158 = fsub double %156, %157
  %159 = tail call double @llvm.fabs.f64(double %158) #12
  %160 = fcmp olt double %159, 0x3E70000000000000
  br i1 %160, label %293, label %161

161:                                              ; preds = %155, %148
  %162 = load double, double* %77, align 8
  %163 = fsub double %162, %3
  %164 = fcmp ogt double %103, 0.000000e+00
  br i1 %164, label %165, label %167

165:                                              ; preds = %161
  %166 = fcmp ogt double %103, %163
  br i1 %166, label %230, label %169

167:                                              ; preds = %161
  %168 = fcmp olt double %103, %163
  br i1 %168, label %230, label %169

169:                                              ; preds = %167, %165
  %170 = fadd double %106, %108
  %171 = fcmp ogt double %170, %2
  br i1 %171, label %293, label %172

172:                                              ; preds = %169
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %78) #12
  %173 = fcmp oeq double %170, 0.000000e+00
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %81, i8 -1, i64 16, i1 false)
  br i1 %173, label %174, label %176

174:                                              ; preds = %172
  %175 = load <2 x double>, <2 x double>* %94, align 8
  br label %209

176:                                              ; preds = %172
  %177 = fcmp oeq double %170, 1.000000e+00
  br i1 %177, label %178, label %180

178:                                              ; preds = %176
  %179 = load <2 x double>, <2 x double>* %93, align 8
  br label %209

180:                                              ; preds = %176
  %181 = fsub double 1.000000e+00, %170
  %182 = fmul double %181, %181
  %183 = fmul double %181, %182
  %184 = fmul double %182, 3.000000e+00
  %185 = fmul double %170, %184
  %186 = fmul double %170, %170
  %187 = fmul double %181, 3.000000e+00
  %188 = fmul double %186, %187
  %189 = fmul double %170, %186
  %190 = load <2 x double>, <2 x double>* %89, align 8
  %191 = insertelement <2 x double> undef, double %183, i32 0
  %192 = shufflevector <2 x double> %191, <2 x double> undef, <2 x i32> zeroinitializer
  %193 = fmul <2 x double> %192, %190
  %194 = load <2 x double>, <2 x double>* %90, align 8
  %195 = insertelement <2 x double> undef, double %185, i32 0
  %196 = shufflevector <2 x double> %195, <2 x double> undef, <2 x i32> zeroinitializer
  %197 = fmul <2 x double> %196, %194
  %198 = fadd <2 x double> %193, %197
  %199 = load <2 x double>, <2 x double>* %91, align 8
  %200 = insertelement <2 x double> undef, double %188, i32 0
  %201 = shufflevector <2 x double> %200, <2 x double> undef, <2 x i32> zeroinitializer
  %202 = fmul <2 x double> %201, %199
  %203 = fadd <2 x double> %198, %202
  %204 = load <2 x double>, <2 x double>* %92, align 8
  %205 = insertelement <2 x double> undef, double %189, i32 0
  %206 = shufflevector <2 x double> %205, <2 x double> undef, <2 x i32> zeroinitializer
  %207 = fmul <2 x double> %206, %204
  %208 = fadd <2 x double> %203, %207
  br label %209

209:                                              ; preds = %174, %178, %180
  %210 = phi <2 x double> [ %175, %174 ], [ %179, %178 ], [ %208, %180 ]
  store <2 x double> %210, <2 x double>* %8, align 16
  %211 = extractelement <2 x double> %210, i32 0
  %212 = fsub double %211, %151
  %213 = tail call double @llvm.fabs.f64(double %212) #12
  %214 = fcmp olt double %213, 0x3E70000000000000
  %215 = extractelement <2 x double> %107, i32 0
  br i1 %214, label %216, label %221

216:                                              ; preds = %209
  %217 = extractelement <2 x double> %210, i32 1
  %218 = fsub double %217, %102
  %219 = tail call double @llvm.fabs.f64(double %218) #12
  %220 = fcmp olt double %219, 0x3E70000000000000
  br i1 %220, label %283, label %221

221:                                              ; preds = %216, %209
  %222 = phi double [ %102, %216 ], [ %215, %209 ]
  %223 = load double, double* %79, align 8
  %224 = fsub double %223, %3
  br i1 %164, label %225, label %227

225:                                              ; preds = %221
  %226 = fcmp ugt double %103, %224
  br i1 %226, label %229, label %280

227:                                              ; preds = %221
  %228 = fcmp ult double %103, %224
  br i1 %228, label %229, label %280

229:                                              ; preds = %227, %225
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %78) #12
  br label %230

230:                                              ; preds = %229, %165, %167
  %231 = phi double [ %170, %229 ], [ %111, %167 ], [ %111, %165 ]
  %232 = fcmp oeq double %231, 0.000000e+00
  br i1 %232, label %233, label %236

233:                                              ; preds = %230
  %234 = load <2 x double>, <2 x double>* %100, align 8
  %235 = shufflevector <2 x double> %234, <2 x double> undef, <2 x i32> <i32 1, i32 0>
  br label %274

236:                                              ; preds = %230
  %237 = fcmp oeq double %231, 1.000000e+00
  br i1 %237, label %238, label %241

238:                                              ; preds = %236
  %239 = load <2 x double>, <2 x double>* %99, align 8
  %240 = shufflevector <2 x double> %239, <2 x double> undef, <2 x i32> <i32 1, i32 0>
  br label %274

241:                                              ; preds = %236
  %242 = fsub double 1.000000e+00, %231
  %243 = fmul double %242, %242
  %244 = fmul double %242, %243
  %245 = fmul double %243, 3.000000e+00
  %246 = fmul double %231, %245
  %247 = fmul double %231, %231
  %248 = fmul double %242, 3.000000e+00
  %249 = fmul double %247, %248
  %250 = fmul double %231, %247
  %251 = load <2 x double>, <2 x double>* %95, align 8
  %252 = shufflevector <2 x double> %251, <2 x double> undef, <2 x i32> <i32 1, i32 0>
  %253 = insertelement <2 x double> undef, double %244, i32 0
  %254 = shufflevector <2 x double> %253, <2 x double> undef, <2 x i32> zeroinitializer
  %255 = fmul <2 x double> %254, %252
  %256 = load <2 x double>, <2 x double>* %96, align 8
  %257 = shufflevector <2 x double> %256, <2 x double> undef, <2 x i32> <i32 1, i32 0>
  %258 = insertelement <2 x double> undef, double %246, i32 0
  %259 = shufflevector <2 x double> %258, <2 x double> undef, <2 x i32> zeroinitializer
  %260 = fmul <2 x double> %259, %257
  %261 = fadd <2 x double> %255, %260
  %262 = load <2 x double>, <2 x double>* %97, align 8
  %263 = shufflevector <2 x double> %262, <2 x double> undef, <2 x i32> <i32 1, i32 0>
  %264 = insertelement <2 x double> undef, double %249, i32 0
  %265 = shufflevector <2 x double> %264, <2 x double> undef, <2 x i32> zeroinitializer
  %266 = fmul <2 x double> %265, %263
  %267 = fadd <2 x double> %261, %266
  %268 = load <2 x double>, <2 x double>* %98, align 8
  %269 = shufflevector <2 x double> %268, <2 x double> undef, <2 x i32> <i32 1, i32 0>
  %270 = insertelement <2 x double> undef, double %250, i32 0
  %271 = shufflevector <2 x double> %270, <2 x double> undef, <2 x i32> zeroinitializer
  %272 = fmul <2 x double> %271, %269
  %273 = fadd <2 x double> %267, %272
  br label %274

274:                                              ; preds = %241, %238, %233
  %275 = phi <2 x double> [ %235, %233 ], [ %240, %238 ], [ %273, %241 ]
  %276 = shufflevector <2 x double> %275, <2 x double> undef, <2 x i32> <i32 1, i32 0>
  store <2 x double> %276, <2 x double>* %6, align 16
  %277 = load double, double* %70, align 8
  %278 = fsub double %277, %3
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %73) #12
  %279 = extractelement <2 x double> %275, i32 0
  br label %284

280:                                              ; preds = %227, %225
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %78) #12
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %73) #12
  %281 = fsub double %104, %3
  %282 = insertelement <2 x double> %107, double %222, i32 0
  br label %284

283:                                              ; preds = %216
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %78) #12
  br label %293

284:                                              ; preds = %280, %274
  %285 = phi double [ %281, %280 ], [ %278, %274 ]
  %286 = phi double [ %102, %280 ], [ %279, %274 ]
  %287 = phi double [ %106, %280 ], [ %231, %274 ]
  %288 = phi double [ %104, %280 ], [ %277, %274 ]
  %289 = phi double [ %103, %280 ], [ %278, %274 ]
  %290 = phi <2 x double> [ %282, %280 ], [ %275, %274 ]
  %291 = tail call double @llvm.fabs.f64(double %285) #12
  %292 = fcmp olt double %291, 0x3E80000000000000
  br i1 %292, label %294, label %101

293:                                              ; preds = %169, %155, %283
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %73) #12
  br label %294

294:                                              ; preds = %284, %293
  %295 = phi double [ -1.000000e+00, %293 ], [ %287, %284 ]
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %12) #12
  ret double %295
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden { double, double } @_ZNK8SkDCubic5ptAtTEd(%struct.SkDCubic* nocapture readonly, double) local_unnamed_addr #3 align 2 {
  %3 = fcmp oeq double %1, 0.000000e+00
  br i1 %3, label %4, label %7

4:                                                ; preds = %2
  %5 = bitcast %struct.SkDCubic* %0 to <2 x double>*
  %6 = load <2 x double>, <2 x double>* %5, align 8
  br label %49

7:                                                ; preds = %2
  %8 = fcmp oeq double %1, 1.000000e+00
  br i1 %8, label %9, label %13

9:                                                ; preds = %7
  %10 = getelementptr inbounds %struct.SkDCubic, %struct.SkDCubic* %0, i64 0, i32 0, i64 3, i32 0
  %11 = bitcast double* %10 to <2 x double>*
  %12 = load <2 x double>, <2 x double>* %11, align 8
  br label %49

13:                                               ; preds = %7
  %14 = fsub double 1.000000e+00, %1
  %15 = fmul double %14, %14
  %16 = fmul double %14, %15
  %17 = fmul double %15, 3.000000e+00
  %18 = fmul double %17, %1
  %19 = fmul double %1, %1
  %20 = fmul double %14, 3.000000e+00
  %21 = fmul double %19, %20
  %22 = fmul double %19, %1
  %23 = getelementptr inbounds %struct.SkDCubic, %struct.SkDCubic* %0, i64 0, i32 0, i64 1, i32 0
  %24 = getelementptr inbounds %struct.SkDCubic, %struct.SkDCubic* %0, i64 0, i32 0, i64 2, i32 0
  %25 = getelementptr inbounds %struct.SkDCubic, %struct.SkDCubic* %0, i64 0, i32 0, i64 3, i32 0
  %26 = bitcast %struct.SkDCubic* %0 to <2 x double>*
  %27 = load <2 x double>, <2 x double>* %26, align 8
  %28 = insertelement <2 x double> undef, double %16, i32 0
  %29 = shufflevector <2 x double> %28, <2 x double> undef, <2 x i32> zeroinitializer
  %30 = fmul <2 x double> %29, %27
  %31 = bitcast double* %23 to <2 x double>*
  %32 = load <2 x double>, <2 x double>* %31, align 8
  %33 = insertelement <2 x double> undef, double %18, i32 0
  %34 = shufflevector <2 x double> %33, <2 x double> undef, <2 x i32> zeroinitializer
  %35 = fmul <2 x double> %34, %32
  %36 = fadd <2 x double> %30, %35
  %37 = bitcast double* %24 to <2 x double>*
  %38 = load <2 x double>, <2 x double>* %37, align 8
  %39 = insertelement <2 x double> undef, double %21, i32 0
  %40 = shufflevector <2 x double> %39, <2 x double> undef, <2 x i32> zeroinitializer
  %41 = fmul <2 x double> %40, %38
  %42 = fadd <2 x double> %36, %41
  %43 = bitcast double* %25 to <2 x double>*
  %44 = load <2 x double>, <2 x double>* %43, align 8
  %45 = insertelement <2 x double> undef, double %22, i32 0
  %46 = shufflevector <2 x double> %45, <2 x double> undef, <2 x i32> zeroinitializer
  %47 = fmul <2 x double> %46, %44
  %48 = fadd <2 x double> %42, %47
  br label %49

49:                                               ; preds = %13, %9, %4
  %50 = phi <2 x double> [ %6, %4 ], [ %12, %9 ], [ %48, %13 ]
  %51 = extractelement <2 x double> %50, i32 0
  %52 = insertvalue { double, double } undef, double %51, 0
  %53 = extractelement <2 x double> %50, i32 1
  %54 = insertvalue { double, double } %52, double %53, 1
  ret { double, double } %54
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #2

; Function Attrs: nounwind ssp uwtable
define hidden double @_ZNK8SkDCubic13calcPrecisionEv(%struct.SkDCubic* nocapture readonly) local_unnamed_addr #4 align 2 {
  %2 = getelementptr inbounds %struct.SkDCubic, %struct.SkDCubic* %0, i64 0, i32 0, i64 1, i32 0
  %3 = bitcast double* %2 to <2 x double>*
  %4 = load <2 x double>, <2 x double>* %3, align 8
  %5 = bitcast %struct.SkDCubic* %0 to <2 x double>*
  %6 = load <2 x double>, <2 x double>* %5, align 8
  %7 = fsub <2 x double> %4, %6
  %8 = fmul <2 x double> %7, %7
  %9 = extractelement <2 x double> %8, i32 0
  %10 = extractelement <2 x double> %8, i32 1
  %11 = fadd double %9, %10
  %12 = tail call double @sqrt(double %11) #12
  %13 = getelementptr inbounds %struct.SkDCubic, %struct.SkDCubic* %0, i64 0, i32 0, i64 2, i32 0
  %14 = bitcast double* %13 to <2 x double>*
  %15 = load <2 x double>, <2 x double>* %14, align 8
  %16 = bitcast double* %2 to <2 x double>*
  %17 = load <2 x double>, <2 x double>* %16, align 8
  %18 = fsub <2 x double> %15, %17
  %19 = fmul <2 x double> %18, %18
  %20 = extractelement <2 x double> %19, i32 0
  %21 = extractelement <2 x double> %19, i32 1
  %22 = fadd double %20, %21
  %23 = tail call double @sqrt(double %22) #12
  %24 = fadd double %12, %23
  %25 = getelementptr inbounds %struct.SkDCubic, %struct.SkDCubic* %0, i64 0, i32 0, i64 3, i32 0
  %26 = bitcast double* %25 to <2 x double>*
  %27 = load <2 x double>, <2 x double>* %26, align 8
  %28 = bitcast double* %13 to <2 x double>*
  %29 = load <2 x double>, <2 x double>* %28, align 8
  %30 = fsub <2 x double> %27, %29
  %31 = fmul <2 x double> %30, %30
  %32 = extractelement <2 x double> %31, i32 0
  %33 = extractelement <2 x double> %31, i32 1
  %34 = fadd double %32, %33
  %35 = tail call double @sqrt(double %34) #12
  %36 = fadd double %24, %35
  %37 = fmul double %36, 3.906250e-03
  ret double %37
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZNK8SkDCubic6chopAtEd(%struct.SkDCubicPair* noalias nocapture sret, %struct.SkDCubic* nocapture readonly, double) local_unnamed_addr #4 align 2 {
  %4 = bitcast %struct.SkDCubicPair* %0 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %4, i8 -1, i64 112, i1 false)
  %5 = fcmp oeq double %2, 5.000000e-01
  br i1 %5, label %6, label %49

6:                                                ; preds = %3
  %7 = bitcast %struct.SkDCubic* %1 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %4, i8* align 8 %7, i64 16, i1 false)
  %8 = getelementptr inbounds %struct.SkDCubic, %struct.SkDCubic* %1, i64 0, i32 0, i64 1, i32 0
  %9 = getelementptr inbounds %struct.SkDCubicPair, %struct.SkDCubicPair* %0, i64 0, i32 0, i64 1, i32 0
  %10 = bitcast %struct.SkDCubic* %1 to <2 x double>*
  %11 = load <2 x double>, <2 x double>* %10, align 8
  %12 = bitcast double* %8 to <2 x double>*
  %13 = load <2 x double>, <2 x double>* %12, align 8
  %14 = fadd <2 x double> %11, %13
  %15 = fmul <2 x double> %14, <double 5.000000e-01, double 5.000000e-01>
  %16 = bitcast double* %9 to <2 x double>*
  store <2 x double> %15, <2 x double>* %16, align 8
  %17 = getelementptr inbounds %struct.SkDCubic, %struct.SkDCubic* %1, i64 0, i32 0, i64 2, i32 0
  %18 = getelementptr inbounds %struct.SkDCubicPair, %struct.SkDCubicPair* %0, i64 0, i32 0, i64 2, i32 0
  %19 = fmul <2 x double> %13, <double 2.000000e+00, double 2.000000e+00>
  %20 = fadd <2 x double> %11, %19
  %21 = bitcast double* %17 to <2 x double>*
  %22 = load <2 x double>, <2 x double>* %21, align 8
  %23 = fadd <2 x double> %20, %22
  %24 = fmul <2 x double> %23, <double 2.500000e-01, double 2.500000e-01>
  %25 = bitcast double* %18 to <2 x double>*
  store <2 x double> %24, <2 x double>* %25, align 8
  %26 = getelementptr inbounds %struct.SkDCubic, %struct.SkDCubic* %1, i64 0, i32 0, i64 3
  %27 = getelementptr inbounds %struct.SkDCubicPair, %struct.SkDCubicPair* %0, i64 0, i32 0, i64 3, i32 0
  %28 = fadd <2 x double> %13, %22
  %29 = fmul <2 x double> %28, <double 3.000000e+00, double 3.000000e+00>
  %30 = fadd <2 x double> %11, %29
  %31 = bitcast %struct.SkDPoint* %26 to <2 x double>*
  %32 = load <2 x double>, <2 x double>* %31, align 8
  %33 = fadd <2 x double> %30, %32
  %34 = fmul <2 x double> %33, <double 1.250000e-01, double 1.250000e-01>
  %35 = bitcast double* %27 to <2 x double>*
  store <2 x double> %34, <2 x double>* %35, align 8
  %36 = getelementptr inbounds %struct.SkDCubicPair, %struct.SkDCubicPair* %0, i64 0, i32 0, i64 4, i32 0
  %37 = fmul <2 x double> %22, <double 2.000000e+00, double 2.000000e+00>
  %38 = fadd <2 x double> %13, %37
  %39 = fadd <2 x double> %38, %32
  %40 = fmul <2 x double> %39, <double 2.500000e-01, double 2.500000e-01>
  %41 = bitcast double* %36 to <2 x double>*
  store <2 x double> %40, <2 x double>* %41, align 8
  %42 = getelementptr inbounds %struct.SkDCubicPair, %struct.SkDCubicPair* %0, i64 0, i32 0, i64 5, i32 0
  %43 = fadd <2 x double> %22, %32
  %44 = fmul <2 x double> %43, <double 5.000000e-01, double 5.000000e-01>
  %45 = bitcast double* %42 to <2 x double>*
  store <2 x double> %44, <2 x double>* %45, align 8
  %46 = getelementptr inbounds %struct.SkDCubicPair, %struct.SkDCubicPair* %0, i64 0, i32 0, i64 6
  %47 = bitcast %struct.SkDPoint* %46 to i8*
  %48 = bitcast %struct.SkDPoint* %26 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %47, i8* align 8 %48, i64 16, i1 false)
  br label %96

49:                                               ; preds = %3
  %50 = getelementptr inbounds %struct.SkDCubic, %struct.SkDCubic* %1, i64 0, i32 0, i64 0, i32 0
  %51 = getelementptr inbounds %struct.SkDCubicPair, %struct.SkDCubicPair* %0, i64 0, i32 0, i64 0, i32 0
  %52 = getelementptr inbounds double, double* %50, i64 2
  %53 = bitcast %struct.SkDCubic* %1 to <2 x double>*
  %54 = load <2 x double>, <2 x double>* %53, align 8
  %55 = getelementptr inbounds double, double* %50, i64 4
  %56 = bitcast double* %52 to <2 x double>*
  %57 = load <2 x double>, <2 x double>* %56, align 8
  %58 = getelementptr inbounds double, double* %50, i64 6
  %59 = bitcast double* %55 to <2 x double>*
  %60 = load <2 x double>, <2 x double>* %59, align 8
  %61 = fsub <2 x double> %57, %54
  %62 = insertelement <2 x double> undef, double %2, i32 0
  %63 = shufflevector <2 x double> %62, <2 x double> undef, <2 x i32> zeroinitializer
  %64 = fmul <2 x double> %61, %63
  %65 = fadd <2 x double> %54, %64
  %66 = fsub <2 x double> %60, %57
  %67 = fmul <2 x double> %66, %63
  %68 = fadd <2 x double> %57, %67
  %69 = fsub <2 x double> %68, %65
  %70 = fmul <2 x double> %69, %63
  %71 = fadd <2 x double> %65, %70
  %72 = getelementptr inbounds double, double* %51, i64 2
  %73 = getelementptr inbounds double, double* %51, i64 4
  %74 = getelementptr inbounds double, double* %51, i64 6
  %75 = getelementptr inbounds double, double* %51, i64 8
  %76 = bitcast double* %58 to <2 x double>*
  %77 = load <2 x double>, <2 x double>* %76, align 8
  %78 = fsub <2 x double> %77, %60
  %79 = fmul <2 x double> %78, %63
  %80 = fadd <2 x double> %60, %79
  %81 = fsub <2 x double> %80, %68
  %82 = fmul <2 x double> %81, %63
  %83 = fadd <2 x double> %68, %82
  %84 = getelementptr inbounds double, double* %51, i64 10
  %85 = getelementptr inbounds double, double* %51, i64 12
  %86 = fsub <2 x double> %83, %71
  %87 = fmul <2 x double> %86, %63
  %88 = fadd <2 x double> %71, %87
  %89 = bitcast %struct.SkDCubicPair* %0 to <2 x double>*
  store <2 x double> %54, <2 x double>* %89, align 8
  %90 = bitcast double* %72 to <2 x double>*
  store <2 x double> %65, <2 x double>* %90, align 8
  %91 = bitcast double* %73 to <2 x double>*
  store <2 x double> %71, <2 x double>* %91, align 8
  %92 = bitcast double* %74 to <2 x double>*
  store <2 x double> %88, <2 x double>* %92, align 8
  %93 = bitcast double* %75 to <2 x double>*
  store <2 x double> %83, <2 x double>* %93, align 8
  %94 = bitcast double* %84 to <2 x double>*
  store <2 x double> %80, <2 x double>* %94, align 8
  %95 = bitcast double* %85 to <2 x double>*
  store <2 x double> %77, <2 x double>* %95, align 8
  br label %96

96:                                               ; preds = %49, %6
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #2

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @_ZN8SkDCubic12CoefficientsEPKdPdS2_S2_S2_(double* nocapture readonly, double* nocapture, double* nocapture, double* nocapture, double* nocapture) local_unnamed_addr #0 align 2 {
  %6 = getelementptr inbounds double, double* %0, i64 6
  %7 = bitcast double* %6 to i64*
  %8 = load i64, i64* %7, align 8
  %9 = bitcast double* %1 to i64*
  store i64 %8, i64* %9, align 8
  %10 = getelementptr inbounds double, double* %0, i64 4
  %11 = load double, double* %10, align 8
  %12 = fmul double %11, 3.000000e+00
  store double %12, double* %2, align 8
  %13 = getelementptr inbounds double, double* %0, i64 2
  %14 = load double, double* %13, align 8
  %15 = fmul double %14, 3.000000e+00
  store double %15, double* %3, align 8
  %16 = load double, double* %0, align 8
  store double %16, double* %4, align 8
  %17 = load double, double* %3, align 8
  %18 = fsub double %16, %17
  %19 = load double, double* %2, align 8
  %20 = fadd double %18, %19
  %21 = load double, double* %1, align 8
  %22 = fsub double %21, %20
  store double %22, double* %1, align 8
  %23 = load double, double* %4, align 8
  %24 = fmul double %23, 3.000000e+00
  %25 = load double, double* %3, align 8
  %26 = fmul double %25, 2.000000e+00
  %27 = fsub double %24, %26
  %28 = load double, double* %2, align 8
  %29 = fadd double %28, %27
  store double %29, double* %2, align 8
  %30 = load double, double* %4, align 8
  %31 = fmul double %30, 3.000000e+00
  %32 = load double, double* %3, align 8
  %33 = fsub double %32, %31
  store double %33, double* %3, align 8
  ret void
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden zeroext i1 @_ZNK8SkDCubic20endsAreExtremaInXOrYEv(%struct.SkDCubic* nocapture readonly) local_unnamed_addr #3 align 2 {
  %2 = getelementptr inbounds %struct.SkDCubic, %struct.SkDCubic* %0, i64 0, i32 0, i64 0, i32 0
  %3 = load double, double* %2, align 8
  %4 = getelementptr inbounds %struct.SkDCubic, %struct.SkDCubic* %0, i64 0, i32 0, i64 1, i32 0
  %5 = load double, double* %4, align 8
  %6 = getelementptr inbounds %struct.SkDCubic, %struct.SkDCubic* %0, i64 0, i32 0, i64 3, i32 0
  %7 = load double, double* %6, align 8
  %8 = fsub double %3, %5
  %9 = fsub double %7, %5
  %10 = fmul double %8, %9
  %11 = fcmp ugt double %10, 0.000000e+00
  br i1 %11, label %19, label %12

12:                                               ; preds = %1
  %13 = getelementptr inbounds %struct.SkDCubic, %struct.SkDCubic* %0, i64 0, i32 0, i64 2, i32 0
  %14 = load double, double* %13, align 8
  %15 = fsub double %3, %14
  %16 = fsub double %7, %14
  %17 = fmul double %15, %16
  %18 = fcmp ugt double %17, 0.000000e+00
  br i1 %18, label %19, label %37

19:                                               ; preds = %12, %1
  %20 = getelementptr inbounds %struct.SkDCubic, %struct.SkDCubic* %0, i64 0, i32 0, i64 0, i32 1
  %21 = load double, double* %20, align 8
  %22 = getelementptr inbounds %struct.SkDCubic, %struct.SkDCubic* %0, i64 0, i32 0, i64 1, i32 1
  %23 = load double, double* %22, align 8
  %24 = getelementptr inbounds %struct.SkDCubic, %struct.SkDCubic* %0, i64 0, i32 0, i64 3, i32 1
  %25 = load double, double* %24, align 8
  %26 = fsub double %21, %23
  %27 = fsub double %25, %23
  %28 = fmul double %26, %27
  %29 = fcmp ugt double %28, 0.000000e+00
  br i1 %29, label %37, label %30

30:                                               ; preds = %19
  %31 = getelementptr inbounds %struct.SkDCubic, %struct.SkDCubic* %0, i64 0, i32 0, i64 2, i32 1
  %32 = load double, double* %31, align 8
  %33 = fsub double %21, %32
  %34 = fsub double %25, %32
  %35 = fmul double %33, %34
  %36 = fcmp ole double %35, 0.000000e+00
  br label %37

37:                                               ; preds = %12, %19, %30
  %38 = phi i1 [ true, %12 ], [ false, %19 ], [ %36, %30 ]
  ret i1 %38
}

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZNK8SkDCubic14hullIntersectsEPK8SkDPointiPb(%struct.SkDCubic*, %struct.SkDPoint* nocapture readonly, i32, i8* nocapture) local_unnamed_addr #4 align 2 {
  %5 = alloca i32, align 4
  %6 = bitcast i32* %5 to [4 x i8]*
  %7 = bitcast i32* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %7) #12
  store i32 -1431655766, i32* %5, align 4
  %8 = call i32 @_ZNK8SkDCubic10convexHullEPc(%struct.SkDCubic* %0, i8* nonnull %7) #12
  %9 = load i8, i8* %7, align 4
  %10 = sext i8 %9 to i32
  %11 = sext i8 %9 to i64
  %12 = getelementptr inbounds %struct.SkDCubic, %struct.SkDCubic* %0, i64 0, i32 0, i64 %11
  %13 = icmp sgt i32 %2, 0
  %14 = zext i32 %2 to i64
  br label %15

15:                                               ; preds = %96, %4
  %16 = phi i32 [ %10, %4 ], [ %97, %96 ]
  %17 = phi i32 [ 0, %4 ], [ %21, %96 ]
  %18 = phi %struct.SkDPoint* [ %12, %4 ], [ %98, %96 ]
  %19 = phi i8 [ 1, %4 ], [ %99, %96 ]
  %20 = add nsw i32 %17, 1
  %21 = srem i32 %20, %8
  %22 = sext i32 %21 to i64
  %23 = getelementptr inbounds [4 x i8], [4 x i8]* %6, i64 0, i64 %22
  %24 = load i8, i8* %23, align 1
  %25 = sext i8 %24 to i32
  %26 = sext i8 %24 to i64
  %27 = getelementptr inbounds %struct.SkDCubic, %struct.SkDCubic* %0, i64 0, i32 0, i64 %26
  %28 = bitcast %struct.SkDPoint* %18 to <2 x double>*
  %29 = load <2 x double>, <2 x double>* %28, align 8
  %30 = bitcast %struct.SkDPoint* %27 to <2 x double>*
  %31 = load <2 x double>, <2 x double>* %30, align 8
  %32 = fsub <2 x double> %31, %29
  %33 = xor i32 %16, %25
  %34 = sub nsw i32 3, %33
  %35 = lshr i32 1, %34
  %36 = xor i32 %35, 3
  %37 = xor i32 %36, %16
  %38 = sext i32 %37 to i64
  %39 = getelementptr inbounds %struct.SkDCubic, %struct.SkDCubic* %0, i64 0, i32 0, i64 %38, i32 1
  %40 = load double, double* %39, align 8
  %41 = getelementptr inbounds %struct.SkDCubic, %struct.SkDCubic* %0, i64 0, i32 0, i64 %38, i32 0
  %42 = load double, double* %41, align 8
  %43 = xor i32 %36, %25
  %44 = sext i32 %43 to i64
  %45 = getelementptr inbounds %struct.SkDCubic, %struct.SkDCubic* %0, i64 0, i32 0, i64 %44, i32 1
  %46 = load double, double* %45, align 8
  %47 = insertelement <2 x double> undef, double %40, i32 0
  %48 = insertelement <2 x double> %47, double %46, i32 1
  %49 = shufflevector <2 x double> %29, <2 x double> undef, <2 x i32> <i32 1, i32 undef>
  %50 = shufflevector <2 x double> %29, <2 x double> undef, <2 x i32> <i32 1, i32 1>
  %51 = fsub <2 x double> %48, %50
  %52 = shufflevector <2 x double> %32, <2 x double> undef, <2 x i32> zeroinitializer
  %53 = fmul <2 x double> %52, %51
  %54 = getelementptr inbounds %struct.SkDCubic, %struct.SkDCubic* %0, i64 0, i32 0, i64 %44, i32 0
  %55 = load double, double* %54, align 8
  %56 = insertelement <2 x double> undef, double %42, i32 0
  %57 = insertelement <2 x double> %56, double %55, i32 1
  %58 = shufflevector <2 x double> %29, <2 x double> undef, <2 x i32> zeroinitializer
  %59 = fsub <2 x double> %57, %58
  %60 = shufflevector <2 x double> %32, <2 x double> undef, <2 x i32> <i32 1, i32 1>
  %61 = fmul <2 x double> %60, %59
  %62 = fsub <2 x double> %53, %61
  %63 = extractelement <2 x double> %62, i32 0
  %64 = extractelement <2 x double> %62, i32 1
  %65 = fmul double %63, %64
  %66 = fcmp olt double %65, 0.000000e+00
  br i1 %66, label %96, label %67

67:                                               ; preds = %15
  %68 = call double @llvm.fabs.f64(double %63) #12
  %69 = fcmp olt double %68, 0x3E80000000000000
  br i1 %69, label %70, label %73

70:                                               ; preds = %67
  %71 = call double @llvm.fabs.f64(double %64) #12
  %72 = fcmp olt double %71, 0x3E80000000000000
  br i1 %72, label %96, label %73

73:                                               ; preds = %70, %67
  %74 = phi double [ %64, %70 ], [ %63, %67 ]
  br i1 %13, label %75, label %103

75:                                               ; preds = %73
  %76 = shufflevector <2 x double> %49, <2 x double> %29, <2 x i32> <i32 0, i32 2>
  br label %79

77:                                               ; preds = %79
  %78 = icmp eq i64 %95, %14
  br i1 %78, label %103, label %79

79:                                               ; preds = %75, %77
  %80 = phi i64 [ %95, %77 ], [ 0, %75 ]
  %81 = getelementptr inbounds %struct.SkDPoint, %struct.SkDPoint* %1, i64 %80, i32 0
  %82 = bitcast double* %81 to <2 x double>*
  %83 = load <2 x double>, <2 x double>* %82, align 8
  %84 = shufflevector <2 x double> %83, <2 x double> undef, <2 x i32> <i32 1, i32 0>
  %85 = fsub <2 x double> %84, %76
  %86 = fmul <2 x double> %32, %85
  %87 = extractelement <2 x double> %86, i32 0
  %88 = extractelement <2 x double> %86, i32 1
  %89 = fsub double %87, %88
  %90 = fmul double %74, %89
  %91 = fcmp ule double %90, 0.000000e+00
  %92 = call double @llvm.fabs.f64(double %89) #12
  %93 = fcmp olt double %92, 0x3CD0000000000000
  %94 = or i1 %91, %93
  %95 = add nuw nsw i64 %80, 1
  br i1 %94, label %77, label %96

96:                                               ; preds = %79, %15, %70
  %97 = phi i32 [ %16, %70 ], [ %16, %15 ], [ %25, %79 ]
  %98 = phi %struct.SkDPoint* [ %18, %70 ], [ %18, %15 ], [ %27, %79 ]
  %99 = phi i8 [ %19, %70 ], [ %19, %15 ], [ 0, %79 ]
  %100 = icmp eq i32 %21, 0
  br i1 %100, label %101, label %15

101:                                              ; preds = %96
  %102 = and i8 %99, 1
  store i8 %102, i8* %3, align 1
  br label %103

103:                                              ; preds = %73, %77, %101
  %104 = phi i1 [ true, %101 ], [ false, %77 ], [ false, %73 ]
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %7) #12
  ret i1 %104
}

declare i32 @_ZNK8SkDCubic10convexHullEPc(%struct.SkDCubic*, i8*) local_unnamed_addr #5

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZNK8SkDCubic14hullIntersectsERKS_Pb(%struct.SkDCubic*, %struct.SkDCubic* nocapture readonly dereferenceable(64), i8* nocapture) local_unnamed_addr #4 align 2 {
  %4 = getelementptr inbounds %struct.SkDCubic, %struct.SkDCubic* %1, i64 0, i32 0, i64 0
  %5 = tail call zeroext i1 @_ZNK8SkDCubic14hullIntersectsEPK8SkDPointiPb(%struct.SkDCubic* %0, %struct.SkDPoint* %4, i32 4, i8* %2)
  ret i1 %5
}

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZNK8SkDCubic14hullIntersectsERK7SkDQuadPb(%struct.SkDCubic*, %struct.SkDQuad* nocapture readonly dereferenceable(48), i8* nocapture) local_unnamed_addr #4 align 2 {
  %4 = getelementptr inbounds %struct.SkDQuad, %struct.SkDQuad* %1, i64 0, i32 0, i64 0
  %5 = tail call zeroext i1 @_ZNK8SkDCubic14hullIntersectsEPK8SkDPointiPb(%struct.SkDCubic* %0, %struct.SkDPoint* %4, i32 3, i8* %2)
  ret i1 %5
}

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZNK8SkDCubic14hullIntersectsERK8SkDConicPb(%struct.SkDCubic*, %struct.SkDConic* nocapture readonly dereferenceable(56), i8* nocapture) local_unnamed_addr #4 align 2 {
  %4 = getelementptr inbounds %struct.SkDConic, %struct.SkDConic* %1, i64 0, i32 0, i32 0, i64 0
  %5 = tail call zeroext i1 @_ZNK8SkDCubic14hullIntersectsEPK8SkDPointiPb(%struct.SkDCubic* %0, %struct.SkDPoint* %4, i32 3, i8* %2) #12
  ret i1 %5
}

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZNK8SkDCubic8isLinearEii(%struct.SkDCubic*, i32, i32) local_unnamed_addr #4 align 2 {
  %4 = getelementptr inbounds %struct.SkDCubic, %struct.SkDCubic* %0, i64 0, i32 0, i64 0
  %5 = getelementptr inbounds %struct.SkDCubic, %struct.SkDCubic* %0, i64 0, i32 0, i64 3
  %6 = tail call zeroext i1 @_ZNK8SkDPoint19approximatelyDEqualERKS_(%struct.SkDPoint* %4, %struct.SkDPoint* dereferenceable(16) %5)
  br i1 %6, label %7, label %10

7:                                                ; preds = %3
  %8 = bitcast %struct.SkDCubic* %0 to %struct.SkDQuad*
  %9 = tail call zeroext i1 @_ZNK7SkDQuad8isLinearEii(%struct.SkDQuad* %8, i32 0, i32 2) #12
  br label %117

10:                                               ; preds = %3
  %11 = sext i32 %1 to i64
  %12 = getelementptr inbounds %struct.SkDCubic, %struct.SkDCubic* %0, i64 0, i32 0, i64 %11, i32 1
  %13 = load double, double* %12, align 8
  %14 = sext i32 %2 to i64
  %15 = getelementptr inbounds %struct.SkDCubic, %struct.SkDCubic* %0, i64 0, i32 0, i64 %14, i32 1
  %16 = load double, double* %15, align 8
  %17 = fsub double %13, %16
  %18 = getelementptr inbounds %struct.SkDCubic, %struct.SkDCubic* %0, i64 0, i32 0, i64 %14, i32 0
  %19 = load double, double* %18, align 8
  %20 = getelementptr inbounds %struct.SkDCubic, %struct.SkDCubic* %0, i64 0, i32 0, i64 %11, i32 0
  %21 = load double, double* %20, align 8
  %22 = fsub double %19, %21
  %23 = fmul double %17, %17
  %24 = fmul double %22, %22
  %25 = fadd double %23, %24
  %26 = tail call double @sqrt(double %25) #12
  %27 = tail call double @llvm.fabs.f64(double %26) #12
  %28 = fcmp olt double %27, 0x3E80000000000000
  br i1 %28, label %37, label %29

29:                                               ; preds = %10
  %30 = fmul double %16, %21
  %31 = fmul double %13, %19
  %32 = fsub double %30, %31
  %33 = fdiv double 1.000000e+00, %26
  %34 = fmul double %17, %33
  %35 = fmul double %22, %33
  %36 = fmul double %33, %32
  br label %37

37:                                               ; preds = %10, %29
  %38 = phi double [ %34, %29 ], [ 0.000000e+00, %10 ]
  %39 = phi double [ %35, %29 ], [ 0.000000e+00, %10 ]
  %40 = phi double [ %36, %29 ], [ 0.000000e+00, %10 ]
  %41 = getelementptr inbounds %struct.SkDCubic, %struct.SkDCubic* %0, i64 0, i32 0, i64 0, i32 0
  %42 = getelementptr inbounds %struct.SkDCubic, %struct.SkDCubic* %0, i64 0, i32 0, i64 0, i32 1
  %43 = load double, double* %42, align 8
  %44 = load double, double* %41, align 8
  %45 = fcmp olt double %43, %44
  %46 = getelementptr inbounds %struct.SkDCubic, %struct.SkDCubic* %0, i64 0, i32 0, i64 1, i32 0
  %47 = load double, double* %46, align 8
  %48 = select i1 %45, double %43, double %44
  %49 = fcmp olt double %47, %48
  %50 = getelementptr inbounds %struct.SkDCubic, %struct.SkDCubic* %0, i64 0, i32 0, i64 1, i32 1
  %51 = load double, double* %50, align 8
  %52 = select i1 %49, double %47, double %48
  %53 = fcmp olt double %51, %52
  %54 = getelementptr inbounds %struct.SkDCubic, %struct.SkDCubic* %0, i64 0, i32 0, i64 2, i32 0
  %55 = load double, double* %54, align 8
  %56 = select i1 %53, double %51, double %52
  %57 = fcmp olt double %55, %56
  %58 = getelementptr inbounds %struct.SkDCubic, %struct.SkDCubic* %0, i64 0, i32 0, i64 2, i32 1
  %59 = load double, double* %58, align 8
  %60 = select i1 %57, double %55, double %56
  %61 = fcmp olt double %59, %60
  %62 = getelementptr inbounds %struct.SkDPoint, %struct.SkDPoint* %5, i64 0, i32 0
  %63 = load double, double* %62, align 8
  %64 = select i1 %61, double %59, double %60
  %65 = fcmp olt double %63, %64
  %66 = getelementptr inbounds %struct.SkDCubic, %struct.SkDCubic* %0, i64 0, i32 0, i64 3, i32 1
  %67 = load double, double* %66, align 8
  %68 = select i1 %65, double %63, double %64
  %69 = fcmp olt double %67, %68
  %70 = select i1 %69, double %67, double %68
  %71 = fcmp olt double %44, %43
  %72 = load double, double* %42, align 8
  %73 = load double, double* %41, align 8
  %74 = select i1 %71, double %72, double %73
  %75 = fcmp olt double %74, %47
  %76 = load double, double* %46, align 8
  %77 = select i1 %75, double %76, double %74
  %78 = fcmp olt double %77, %51
  %79 = load double, double* %50, align 8
  %80 = select i1 %78, double %79, double %77
  %81 = fcmp olt double %80, %55
  %82 = load double, double* %54, align 8
  %83 = select i1 %81, double %82, double %80
  %84 = fcmp olt double %83, %59
  %85 = load double, double* %58, align 8
  %86 = select i1 %84, double %85, double %83
  %87 = fcmp olt double %86, %63
  %88 = load double, double* %62, align 8
  %89 = select i1 %87, double %88, double %86
  %90 = fcmp olt double %89, %67
  %91 = load double, double* %66, align 8
  %92 = select i1 %90, double %91, double %89
  %93 = fsub double -0.000000e+00, %70
  %94 = fcmp olt double %92, %93
  %95 = fmul double %38, %47
  %96 = fmul double %39, %51
  %97 = fadd double %95, %96
  %98 = fadd double %40, %97
  %99 = select i1 %94, double %93, double %92
  %100 = fcmp oeq double %98, 0.000000e+00
  br i1 %100, label %106, label %101

101:                                              ; preds = %37
  %102 = tail call double @llvm.fabs.f64(double %98) #12
  %103 = fmul double %99, 0x3E80000000000000
  %104 = tail call double @llvm.fabs.f64(double %103) #12
  %105 = fcmp olt double %102, %104
  br i1 %105, label %106, label %117

106:                                              ; preds = %37, %101
  %107 = fmul double %38, %55
  %108 = fmul double %39, %59
  %109 = fadd double %107, %108
  %110 = fadd double %40, %109
  %111 = fcmp oeq double %110, 0.000000e+00
  br i1 %111, label %117, label %112

112:                                              ; preds = %106
  %113 = tail call double @llvm.fabs.f64(double %110) #12
  %114 = fmul double %99, 0x3E80000000000000
  %115 = tail call double @llvm.fabs.f64(double %114) #12
  %116 = fcmp olt double %113, %115
  br label %117

117:                                              ; preds = %101, %106, %112, %7
  %118 = phi i1 [ %9, %7 ], [ false, %101 ], [ true, %106 ], [ %116, %112 ]
  ret i1 %118
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZNK8SkDPoint19approximatelyDEqualERKS_(%struct.SkDPoint*, %struct.SkDPoint* dereferenceable(16)) local_unnamed_addr #4 comdat align 2 {
  %3 = getelementptr inbounds %struct.SkDPoint, %struct.SkDPoint* %0, i64 0, i32 0
  %4 = load double, double* %3, align 8
  %5 = getelementptr inbounds %struct.SkDPoint, %struct.SkDPoint* %1, i64 0, i32 0
  %6 = load double, double* %5, align 8
  %7 = fsub double %4, %6
  %8 = tail call double @llvm.fabs.f64(double %7) #12
  %9 = fcmp olt double %8, 0x3E80000000000000
  br i1 %9, label %10, label %18

10:                                               ; preds = %2
  %11 = getelementptr inbounds %struct.SkDPoint, %struct.SkDPoint* %0, i64 0, i32 1
  %12 = load double, double* %11, align 8
  %13 = getelementptr inbounds %struct.SkDPoint, %struct.SkDPoint* %1, i64 0, i32 1
  %14 = load double, double* %13, align 8
  %15 = fsub double %12, %14
  %16 = tail call double @llvm.fabs.f64(double %15) #12
  %17 = fcmp olt double %16, 0x3E80000000000000
  br i1 %17, label %66, label %18

18:                                               ; preds = %10, %2
  %19 = fptrunc double %4 to float
  %20 = fptrunc double %6 to float
  %21 = tail call zeroext i1 @_Z16RoughlyEqualUlpsff(float %19, float %20) #12
  br i1 %21, label %22, label %66

22:                                               ; preds = %18
  %23 = getelementptr inbounds %struct.SkDPoint, %struct.SkDPoint* %0, i64 0, i32 1
  %24 = load double, double* %23, align 8
  %25 = getelementptr inbounds %struct.SkDPoint, %struct.SkDPoint* %1, i64 0, i32 1
  %26 = load double, double* %25, align 8
  %27 = fptrunc double %24 to float
  %28 = fptrunc double %26 to float
  %29 = tail call zeroext i1 @_Z16RoughlyEqualUlpsff(float %27, float %28) #12
  br i1 %29, label %30, label %66

30:                                               ; preds = %22
  %31 = load double, double* %3, align 8
  %32 = load double, double* %5, align 8
  %33 = fsub double %31, %32
  %34 = load double, double* %23, align 8
  %35 = load double, double* %25, align 8
  %36 = fsub double %34, %35
  %37 = fmul double %33, %33
  %38 = fmul double %36, %36
  %39 = fadd double %37, %38
  %40 = tail call double @sqrt(double %39) #12
  %41 = load double, double* %5, align 8
  %42 = load double, double* %3, align 8
  %43 = fcmp olt double %41, %42
  %44 = load double, double* %23, align 8
  %45 = select i1 %43, double %41, double %42
  %46 = fcmp olt double %44, %45
  %47 = load double, double* %25, align 8
  %48 = select i1 %46, double %44, double %45
  %49 = fcmp olt double %47, %48
  %50 = select i1 %49, double %47, double %48
  %51 = fcmp olt double %42, %41
  %52 = load double, double* %5, align 8
  %53 = load double, double* %3, align 8
  %54 = select i1 %51, double %52, double %53
  %55 = fcmp olt double %54, %44
  %56 = load double, double* %23, align 8
  %57 = select i1 %55, double %56, double %54
  %58 = fcmp olt double %57, %47
  %59 = load double, double* %25, align 8
  %60 = select i1 %58, double %59, double %57
  %61 = fsub double -0.000000e+00, %50
  %62 = fcmp olt double %60, %61
  %63 = select i1 %62, double %61, double %60
  %64 = fadd double %40, %63
  %65 = tail call zeroext i1 @_Z16AlmostDequalUlpsdd(double %63, double %64) #12
  br label %66

66:                                               ; preds = %18, %22, %10, %30
  %67 = phi i1 [ %65, %30 ], [ true, %10 ], [ false, %22 ], [ false, %18 ]
  ret i1 %67
}

declare zeroext i1 @_ZNK7SkDQuad8isLinearEii(%struct.SkDQuad*, i32, i32) local_unnamed_addr #5

; Function Attrs: nounwind ssp uwtable
define hidden i32 @_ZN8SkDCubic12ComplexBreakEPK7SkPointPf(%struct.SkPoint*, float* nocapture) local_unnamed_addr #4 align 2 {
  %3 = alloca [2 x double], align 16
  %4 = alloca [2 x double], align 16
  %5 = alloca <2 x double>, align 16
  %6 = alloca [3 x double], align 16
  %7 = bitcast %struct.SkPoint* %0 to <2 x float>*
  %8 = load <2 x float>, <2 x float>* %7, align 4
  %9 = fpext <2 x float> %8 to <2 x double>
  %10 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %0, i64 1, i32 0
  %11 = bitcast float* %10 to <2 x float>*
  %12 = load <2 x float>, <2 x float>* %11, align 4
  %13 = fpext <2 x float> %12 to <2 x double>
  %14 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %0, i64 2, i32 0
  %15 = bitcast float* %14 to <2 x float>*
  %16 = load <2 x float>, <2 x float>* %15, align 4
  %17 = fpext <2 x float> %16 to <2 x double>
  %18 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %0, i64 3, i32 0
  %19 = bitcast float* %18 to <2 x float>*
  %20 = load <2 x float>, <2 x float>* %19, align 4
  %21 = fpext <2 x float> %20 to <2 x double>
  %22 = extractelement <2 x float> %20, i32 0
  %23 = extractelement <2 x float> %8, i32 0
  %24 = fcmp ugt float %23, %22
  %25 = extractelement <2 x double> %13, i32 0
  %26 = extractelement <2 x double> %9, i32 0
  %27 = extractelement <2 x double> %21, i32 0
  %28 = extractelement <2 x double> %17, i32 0
  br i1 %24, label %45, label %29

29:                                               ; preds = %2
  %30 = insertelement <4 x double> undef, double %28, i32 0
  %31 = insertelement <4 x double> %30, double %26, i32 1
  %32 = insertelement <4 x double> %31, double %26, i32 2
  %33 = insertelement <4 x double> %32, double %25, i32 3
  %34 = insertelement <4 x double> undef, double %27, i32 0
  %35 = insertelement <4 x double> %34, double %28, i32 1
  %36 = insertelement <4 x double> %35, double %25, i32 2
  %37 = insertelement <4 x double> %36, double %27, i32 3
  %38 = fsub <4 x double> %33, %37
  %39 = fcmp olt <4 x double> %38, <double 0x3CD0000000000000, double 0x3CD0000000000000, double 0x3CD0000000000000, double 0x3CD0000000000000>
  %40 = shufflevector <4 x i1> %39, <4 x i1> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %41 = and <4 x i1> %39, %40
  %42 = shufflevector <4 x i1> %41, <4 x i1> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %43 = and <4 x i1> %41, %42
  %44 = extractelement <4 x i1> %43, i32 0
  br i1 %44, label %61, label %101

45:                                               ; preds = %2
  %46 = insertelement <4 x double> undef, double %27, i32 0
  %47 = insertelement <4 x double> %46, double %28, i32 1
  %48 = insertelement <4 x double> %47, double %25, i32 2
  %49 = insertelement <4 x double> %48, double %27, i32 3
  %50 = insertelement <4 x double> undef, double %28, i32 0
  %51 = insertelement <4 x double> %50, double %26, i32 1
  %52 = insertelement <4 x double> %51, double %26, i32 2
  %53 = insertelement <4 x double> %52, double %25, i32 3
  %54 = fsub <4 x double> %49, %53
  %55 = fcmp olt <4 x double> %54, <double 0x3CD0000000000000, double 0x3CD0000000000000, double 0x3CD0000000000000, double 0x3CD0000000000000>
  %56 = shufflevector <4 x i1> %55, <4 x i1> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %57 = and <4 x i1> %55, %56
  %58 = shufflevector <4 x i1> %57, <4 x i1> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %59 = and <4 x i1> %57, %58
  %60 = extractelement <4 x i1> %59, i32 0
  br i1 %60, label %61, label %101

61:                                               ; preds = %45, %29
  %62 = extractelement <2 x float> %20, i32 1
  %63 = extractelement <2 x float> %8, i32 1
  %64 = fcmp ugt float %63, %62
  %65 = extractelement <2 x double> %13, i32 1
  %66 = extractelement <2 x double> %9, i32 1
  %67 = extractelement <2 x double> %21, i32 1
  %68 = extractelement <2 x double> %17, i32 1
  br i1 %64, label %85, label %69

69:                                               ; preds = %61
  %70 = insertelement <4 x double> undef, double %68, i32 0
  %71 = insertelement <4 x double> %70, double %66, i32 1
  %72 = insertelement <4 x double> %71, double %66, i32 2
  %73 = insertelement <4 x double> %72, double %65, i32 3
  %74 = insertelement <4 x double> undef, double %67, i32 0
  %75 = insertelement <4 x double> %74, double %68, i32 1
  %76 = insertelement <4 x double> %75, double %65, i32 2
  %77 = insertelement <4 x double> %76, double %67, i32 3
  %78 = fsub <4 x double> %73, %77
  %79 = fcmp olt <4 x double> %78, <double 0x3CD0000000000000, double 0x3CD0000000000000, double 0x3CD0000000000000, double 0x3CD0000000000000>
  %80 = shufflevector <4 x i1> %79, <4 x i1> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %81 = and <4 x i1> %79, %80
  %82 = shufflevector <4 x i1> %81, <4 x i1> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %83 = and <4 x i1> %81, %82
  %84 = extractelement <4 x i1> %83, i32 0
  br i1 %84, label %315, label %101

85:                                               ; preds = %61
  %86 = insertelement <4 x double> undef, double %67, i32 0
  %87 = insertelement <4 x double> %86, double %68, i32 1
  %88 = insertelement <4 x double> %87, double %65, i32 2
  %89 = insertelement <4 x double> %88, double %67, i32 3
  %90 = insertelement <4 x double> undef, double %68, i32 0
  %91 = insertelement <4 x double> %90, double %66, i32 1
  %92 = insertelement <4 x double> %91, double %66, i32 2
  %93 = insertelement <4 x double> %92, double %65, i32 3
  %94 = fsub <4 x double> %89, %93
  %95 = fcmp olt <4 x double> %94, <double 0x3CD0000000000000, double 0x3CD0000000000000, double 0x3CD0000000000000, double 0x3CD0000000000000>
  %96 = shufflevector <4 x i1> %95, <4 x i1> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %97 = and <4 x i1> %95, %96
  %98 = shufflevector <4 x i1> %97, <4 x i1> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %99 = and <4 x i1> %97, %98
  %100 = extractelement <4 x i1> %99, i32 0
  br i1 %100, label %315, label %101

101:                                              ; preds = %85, %69, %45, %29
  %102 = bitcast [2 x double]* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %102) #12
  %103 = getelementptr inbounds [2 x double], [2 x double]* %3, i64 0, i64 0
  %104 = getelementptr inbounds [2 x double], [2 x double]* %3, i64 0, i64 1
  %105 = bitcast [2 x double]* %4 to i8*
  %106 = bitcast [2 x double]* %3 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %106, i8 -1, i64 16, i1 false)
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %105) #12
  %107 = getelementptr inbounds [2 x double], [2 x double]* %4, i64 0, i64 0
  %108 = getelementptr inbounds [2 x double], [2 x double]* %4, i64 0, i64 1
  %109 = bitcast [2 x double]* %4 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %109, i8 -1, i64 16, i1 false)
  %110 = call i32 @_Z15SkClassifyCubicPK7SkPointPdS2_S2_(%struct.SkPoint* %0, double* nonnull %103, double* nonnull %107, double* null) #12
  switch i32 %110, label %313 [
    i32 1, label %111
    i32 0, label %153
    i32 2, label %153
    i32 3, label %153
  ]

111:                                              ; preds = %101
  %112 = load double, double* %103, align 16
  %113 = load double, double* %107, align 16
  %114 = fcmp ult double %113, 0.000000e+00
  br i1 %114, label %121, label %115

115:                                              ; preds = %111
  %116 = fsub double 0.000000e+00, %112
  %117 = fcmp olt double %116, 0x3EE0000000000000
  %118 = fsub double %112, %113
  %119 = fcmp olt double %118, 0x3EE0000000000000
  %120 = and i1 %117, %119
  br i1 %120, label %126, label %153

121:                                              ; preds = %111
  %122 = fcmp olt double %112, 0x3EE0000000000000
  %123 = fsub double %113, %112
  %124 = fcmp olt double %123, 0x3EE0000000000000
  %125 = and i1 %122, %124
  br i1 %125, label %126, label %153

126:                                              ; preds = %121, %115
  %127 = load double, double* %104, align 8
  %128 = load double, double* %108, align 8
  %129 = fcmp ult double %128, 0.000000e+00
  br i1 %129, label %136, label %130

130:                                              ; preds = %126
  %131 = fsub double 0.000000e+00, %127
  %132 = fcmp olt double %131, 0x3EE0000000000000
  %133 = fsub double %127, %128
  %134 = fcmp olt double %133, 0x3EE0000000000000
  %135 = and i1 %132, %134
  br i1 %135, label %141, label %153

136:                                              ; preds = %126
  %137 = fcmp olt double %127, 0x3EE0000000000000
  %138 = fsub double %128, %127
  %139 = fcmp olt double %138, 0x3EE0000000000000
  %140 = and i1 %137, %139
  br i1 %140, label %141, label %153

141:                                              ; preds = %136, %130
  %142 = fmul double %112, %128
  %143 = fmul double %113, %127
  %144 = fadd double %143, %142
  %145 = fmul double %113, 2.000000e+00
  %146 = fmul double %145, %128
  %147 = fdiv double %144, %146
  %148 = fptrunc double %147 to float
  store float %148, float* %1, align 4
  %149 = fcmp ogt float %148, 0.000000e+00
  %150 = fcmp olt float %148, 1.000000e+00
  %151 = and i1 %149, %150
  %152 = zext i1 %151 to i32
  br label %313

153:                                              ; preds = %136, %130, %121, %115, %101, %101, %101
  %154 = bitcast <2 x double>* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %154) #12
  %155 = getelementptr inbounds <2 x double>, <2 x double>* %5, i64 0, i64 0
  %156 = fsub <2 x double> %13, %9
  %157 = fmul <2 x double> %13, <double 2.000000e+00, double 2.000000e+00>
  %158 = fsub <2 x double> %17, %157
  %159 = fadd <2 x double> %158, %9
  %160 = fsub <2 x double> %13, %17
  %161 = fmul <2 x double> %160, <double 3.000000e+00, double 3.000000e+00>
  %162 = fadd <2 x double> %161, %21
  %163 = fsub <2 x double> %162, %9
  %164 = shufflevector <2 x double> %163, <2 x double> undef, <2 x i32> <i32 1, i32 0>
  %165 = fmul <2 x double> %159, %164
  %166 = extractelement <2 x double> %165, i32 0
  %167 = extractelement <2 x double> %165, i32 1
  %168 = fsub double %166, %167
  %169 = shufflevector <2 x double> %156, <2 x double> undef, <2 x i32> <i32 1, i32 0>
  %170 = fmul <2 x double> %169, %163
  %171 = extractelement <2 x double> %170, i32 0
  %172 = extractelement <2 x double> %170, i32 1
  %173 = fsub double %172, %171
  %174 = shufflevector <2 x double> %156, <2 x double> undef, <2 x i32> <i32 1, i32 0>
  %175 = fmul <2 x double> %174, %159
  %176 = extractelement <2 x double> %175, i32 0
  %177 = extractelement <2 x double> %175, i32 1
  %178 = fsub double %177, %176
  %179 = bitcast <2 x double>* %5 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %179, i8 -1, i64 16, i1 false)
  %180 = call i32 @_ZN7SkDQuad11RootsValidTEdddPd(double %168, double %173, double %178, double* nonnull %155) #12
  %181 = bitcast [3 x double]* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %181) #12
  %182 = getelementptr inbounds [3 x double], [3 x double]* %6, i64 0, i64 0
  %183 = extractelement <2 x double> %163, i32 0
  %184 = fmul double %183, %183
  %185 = extractelement <2 x double> %159, i32 0
  %186 = fmul double %185, 3.000000e+00
  %187 = fmul double %186, %183
  %188 = fmul double %185, 2.000000e+00
  %189 = fmul double %185, %188
  %190 = extractelement <2 x double> %156, i32 0
  %191 = fmul double %190, %183
  %192 = fadd double %189, %191
  %193 = fmul double %190, %185
  %194 = extractelement <2 x double> %163, i32 1
  %195 = fmul double %194, %194
  %196 = extractelement <2 x double> %159, i32 1
  %197 = fmul double %196, 3.000000e+00
  %198 = fmul double %197, %194
  %199 = fmul double %196, 2.000000e+00
  %200 = fmul double %196, %199
  %201 = extractelement <2 x double> %156, i32 1
  %202 = fmul double %201, %194
  %203 = fadd double %200, %202
  %204 = fmul double %201, %196
  %205 = fadd double %184, %195
  %206 = fadd double %187, %198
  %207 = fadd double %192, %203
  %208 = fadd double %193, %204
  %209 = bitcast [3 x double]* %6 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %209, i8 -1, i64 24, i1 false)
  %210 = call i32 @_ZN8SkDCubic11RootsValidTEddddPd(double %205, double %206, double %207, double %208, double* nonnull %182) #12
  %211 = icmp eq i32 %180, 2
  br i1 %211, label %212, label %231

212:                                              ; preds = %153
  %213 = icmp sgt i32 %210, 0
  br i1 %213, label %214, label %312

214:                                              ; preds = %212
  %215 = load <2 x double>, <2 x double>* %5, align 16
  %216 = zext i32 %210 to i64
  br label %219

217:                                              ; preds = %219
  %218 = icmp eq i64 %230, %216
  br i1 %218, label %312, label %219

219:                                              ; preds = %217, %214
  %220 = phi i64 [ 0, %214 ], [ %230, %217 ]
  %221 = getelementptr inbounds [3 x double], [3 x double]* %6, i64 0, i64 %220
  %222 = load double, double* %221, align 8
  %223 = insertelement <2 x double> undef, double %222, i32 0
  %224 = shufflevector <2 x double> %223, <2 x double> undef, <2 x i32> zeroinitializer
  %225 = fsub <2 x double> %215, %224
  %226 = extractelement <2 x double> %225, i32 0
  %227 = extractelement <2 x double> %225, i32 1
  %228 = fmul double %226, %227
  %229 = fcmp ugt double %228, 0.000000e+00
  %230 = add nuw nsw i64 %220, 1
  br i1 %229, label %217, label %303

231:                                              ; preds = %153
  %232 = fmul double %190, %190
  %233 = fmul double %201, %201
  %234 = fadd double %232, %233
  %235 = call double @sqrt(double %234) #12
  %236 = fsub <2 x double> %17, %13
  %237 = extractelement <2 x double> %236, i32 0
  %238 = fmul double %237, %237
  %239 = extractelement <2 x double> %236, i32 1
  %240 = fmul double %239, %239
  %241 = fadd double %238, %240
  %242 = call double @sqrt(double %241) #12
  %243 = fadd double %235, %242
  %244 = fsub <2 x double> %21, %17
  %245 = extractelement <2 x double> %244, i32 0
  %246 = fmul double %245, %245
  %247 = extractelement <2 x double> %244, i32 1
  %248 = fmul double %247, %247
  %249 = fadd double %246, %248
  %250 = call double @sqrt(double %249) #12
  %251 = fadd double %243, %250
  %252 = fmul double %251, 3.906250e-03
  %253 = fmul double %252, 2.000000e+00
  %254 = icmp sgt i32 %210, 0
  br i1 %254, label %255, label %258

255:                                              ; preds = %231
  %256 = fmul <2 x double> %236, <double 2.000000e+00, double 2.000000e+00>
  %257 = zext i32 %210 to i64
  br label %263

258:                                              ; preds = %297, %231
  %259 = phi i32 [ 0, %231 ], [ %298, %297 ]
  %260 = icmp eq i32 %259, 0
  %261 = icmp eq i32 %180, 1
  %262 = and i1 %261, %260
  br i1 %262, label %301, label %310

263:                                              ; preds = %297, %255
  %264 = phi i64 [ 0, %255 ], [ %299, %297 ]
  %265 = phi i32 [ 0, %255 ], [ %298, %297 ]
  %266 = getelementptr inbounds [3 x double], [3 x double]* %6, i64 0, i64 %264
  %267 = load double, double* %266, align 8
  %268 = fcmp ole double %267, 0.000000e+00
  %269 = fcmp oge double %267, 1.000000e+00
  %270 = or i1 %268, %269
  br i1 %270, label %297, label %271

271:                                              ; preds = %263
  %272 = fsub double 1.000000e+00, %267
  %273 = insertelement <2 x double> undef, double %272, i32 0
  %274 = shufflevector <2 x double> %273, <2 x double> undef, <2 x i32> zeroinitializer
  %275 = fmul <2 x double> %156, %274
  %276 = fmul <2 x double> %274, %275
  %277 = insertelement <2 x double> undef, double %267, i32 0
  %278 = shufflevector <2 x double> %277, <2 x double> undef, <2 x i32> zeroinitializer
  %279 = fmul <2 x double> %256, %278
  %280 = fmul <2 x double> %274, %279
  %281 = fadd <2 x double> %280, %276
  %282 = fmul <2 x double> %244, %278
  %283 = fmul <2 x double> %278, %282
  %284 = fadd <2 x double> %283, %281
  %285 = fmul <2 x double> %284, <double 3.000000e+00, double 3.000000e+00>
  %286 = fmul <2 x double> %285, %285
  %287 = extractelement <2 x double> %286, i32 0
  %288 = extractelement <2 x double> %286, i32 1
  %289 = fadd double %287, %288
  %290 = call double @sqrt(double %289) #12
  %291 = fcmp olt double %290, %253
  br i1 %291, label %292, label %297

292:                                              ; preds = %271
  %293 = fptrunc double %267 to float
  %294 = add nsw i32 %265, 1
  %295 = sext i32 %265 to i64
  %296 = getelementptr inbounds float, float* %1, i64 %295
  store float %293, float* %296, align 4
  br label %297

297:                                              ; preds = %271, %292, %263
  %298 = phi i32 [ %265, %263 ], [ %294, %292 ], [ %265, %271 ]
  %299 = add nuw nsw i64 %264, 1
  %300 = icmp eq i64 %299, %257
  br i1 %300, label %258, label %263

301:                                              ; preds = %258
  %302 = load double, double* %155, align 16
  br label %303

303:                                              ; preds = %219, %301
  %304 = phi double [ %302, %301 ], [ %222, %219 ]
  %305 = fptrunc double %304 to float
  store float %305, float* %1, align 4
  %306 = fcmp ogt float %305, 0.000000e+00
  %307 = fcmp olt float %305, 1.000000e+00
  %308 = and i1 %306, %307
  %309 = zext i1 %308 to i32
  br label %310

310:                                              ; preds = %303, %258
  %311 = phi i32 [ %259, %258 ], [ %309, %303 ]
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %181) #12
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %154) #12
  br label %313

312:                                              ; preds = %217, %212
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %181) #12
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %154) #12
  br label %313

313:                                              ; preds = %101, %312, %310, %141
  %314 = phi i32 [ %152, %141 ], [ %311, %310 ], [ 0, %312 ], [ 0, %101 ]
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %105) #12
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %102) #12
  br label %315

315:                                              ; preds = %85, %69, %313
  %316 = phi i32 [ %314, %313 ], [ 0, %69 ], [ 0, %85 ]
  ret i32 %316
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden zeroext i1 @_ZNK8SkDCubic12monotonicInXEv(%struct.SkDCubic* nocapture readonly) local_unnamed_addr #3 align 2 {
  %2 = getelementptr inbounds %struct.SkDCubic, %struct.SkDCubic* %0, i64 0, i32 0, i64 0, i32 0
  %3 = load double, double* %2, align 8
  %4 = getelementptr inbounds %struct.SkDCubic, %struct.SkDCubic* %0, i64 0, i32 0, i64 1, i32 0
  %5 = load double, double* %4, align 8
  %6 = getelementptr inbounds %struct.SkDCubic, %struct.SkDCubic* %0, i64 0, i32 0, i64 3, i32 0
  %7 = load double, double* %6, align 8
  %8 = fcmp ugt double %3, %7
  br i1 %8, label %15, label %9

9:                                                ; preds = %1
  %10 = fsub double %3, %5
  %11 = fcmp olt double %10, 0x3CD0000000000000
  %12 = fsub double %5, %7
  %13 = fcmp olt double %12, 0x3CD0000000000000
  %14 = and i1 %11, %13
  br i1 %14, label %21, label %37

15:                                               ; preds = %1
  %16 = fsub double %5, %3
  %17 = fcmp olt double %16, 0x3CD0000000000000
  %18 = fsub double %7, %5
  %19 = fcmp olt double %18, 0x3CD0000000000000
  %20 = and i1 %17, %19
  br i1 %20, label %29, label %37

21:                                               ; preds = %9
  %22 = getelementptr inbounds %struct.SkDCubic, %struct.SkDCubic* %0, i64 0, i32 0, i64 2, i32 0
  %23 = load double, double* %22, align 8
  %24 = fsub double %3, %23
  %25 = fcmp olt double %24, 0x3CD0000000000000
  br i1 %25, label %26, label %37

26:                                               ; preds = %21
  %27 = fsub double %23, %7
  %28 = fcmp olt double %27, 0x3CD0000000000000
  br label %37

29:                                               ; preds = %15
  %30 = getelementptr inbounds %struct.SkDCubic, %struct.SkDCubic* %0, i64 0, i32 0, i64 2, i32 0
  %31 = load double, double* %30, align 8
  %32 = fsub double %31, %3
  %33 = fcmp olt double %32, 0x3CD0000000000000
  br i1 %33, label %34, label %37

34:                                               ; preds = %29
  %35 = fsub double %7, %31
  %36 = fcmp olt double %35, 0x3CD0000000000000
  br label %37

37:                                               ; preds = %15, %9, %34, %29, %26, %21
  %38 = phi i1 [ false, %21 ], [ %28, %26 ], [ false, %29 ], [ %36, %34 ], [ false, %9 ], [ false, %15 ]
  ret i1 %38
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden zeroext i1 @_ZNK8SkDCubic12monotonicInYEv(%struct.SkDCubic* nocapture readonly) local_unnamed_addr #3 align 2 {
  %2 = getelementptr inbounds %struct.SkDCubic, %struct.SkDCubic* %0, i64 0, i32 0, i64 0, i32 1
  %3 = load double, double* %2, align 8
  %4 = getelementptr inbounds %struct.SkDCubic, %struct.SkDCubic* %0, i64 0, i32 0, i64 1, i32 1
  %5 = load double, double* %4, align 8
  %6 = getelementptr inbounds %struct.SkDCubic, %struct.SkDCubic* %0, i64 0, i32 0, i64 3, i32 1
  %7 = load double, double* %6, align 8
  %8 = fcmp ugt double %3, %7
  br i1 %8, label %15, label %9

9:                                                ; preds = %1
  %10 = fsub double %3, %5
  %11 = fcmp olt double %10, 0x3CD0000000000000
  %12 = fsub double %5, %7
  %13 = fcmp olt double %12, 0x3CD0000000000000
  %14 = and i1 %11, %13
  br i1 %14, label %21, label %37

15:                                               ; preds = %1
  %16 = fsub double %5, %3
  %17 = fcmp olt double %16, 0x3CD0000000000000
  %18 = fsub double %7, %5
  %19 = fcmp olt double %18, 0x3CD0000000000000
  %20 = and i1 %17, %19
  br i1 %20, label %29, label %37

21:                                               ; preds = %9
  %22 = getelementptr inbounds %struct.SkDCubic, %struct.SkDCubic* %0, i64 0, i32 0, i64 2, i32 1
  %23 = load double, double* %22, align 8
  %24 = fsub double %3, %23
  %25 = fcmp olt double %24, 0x3CD0000000000000
  br i1 %25, label %26, label %37

26:                                               ; preds = %21
  %27 = fsub double %23, %7
  %28 = fcmp olt double %27, 0x3CD0000000000000
  br label %37

29:                                               ; preds = %15
  %30 = getelementptr inbounds %struct.SkDCubic, %struct.SkDCubic* %0, i64 0, i32 0, i64 2, i32 1
  %31 = load double, double* %30, align 8
  %32 = fsub double %31, %3
  %33 = fcmp olt double %32, 0x3CD0000000000000
  br i1 %33, label %34, label %37

34:                                               ; preds = %29
  %35 = fsub double %7, %31
  %36 = fcmp olt double %35, 0x3CD0000000000000
  br label %37

37:                                               ; preds = %15, %9, %34, %29, %26, %21
  %38 = phi i1 [ false, %21 ], [ %28, %26 ], [ false, %29 ], [ %36, %34 ], [ false, %9 ], [ false, %15 ]
  ret i1 %38
}

declare i32 @_Z15SkClassifyCubicPK7SkPointPdS2_S2_(%struct.SkPoint*, double*, double*, double*) local_unnamed_addr #5

; Function Attrs: nounwind ssp uwtable
define hidden i32 @_ZNK8SkDCubic15findInflectionsEPd(%struct.SkDCubic* nocapture readonly, double*) local_unnamed_addr #4 align 2 {
  %3 = getelementptr inbounds %struct.SkDCubic, %struct.SkDCubic* %0, i64 0, i32 0, i64 1, i32 0
  %4 = bitcast double* %3 to <2 x double>*
  %5 = load <2 x double>, <2 x double>* %4, align 8
  %6 = bitcast %struct.SkDCubic* %0 to <2 x double>*
  %7 = load <2 x double>, <2 x double>* %6, align 8
  %8 = fsub <2 x double> %5, %7
  %9 = getelementptr inbounds %struct.SkDCubic, %struct.SkDCubic* %0, i64 0, i32 0, i64 2, i32 0
  %10 = bitcast double* %9 to <2 x double>*
  %11 = load <2 x double>, <2 x double>* %10, align 8
  %12 = fmul <2 x double> %5, <double 2.000000e+00, double 2.000000e+00>
  %13 = fsub <2 x double> %11, %12
  %14 = fadd <2 x double> %7, %13
  %15 = shufflevector <2 x double> %14, <2 x double> undef, <2 x i32> <i32 1, i32 0>
  %16 = getelementptr inbounds %struct.SkDCubic, %struct.SkDCubic* %0, i64 0, i32 0, i64 3, i32 0
  %17 = bitcast double* %16 to <2 x double>*
  %18 = load <2 x double>, <2 x double>* %17, align 8
  %19 = fsub <2 x double> %5, %11
  %20 = fmul <2 x double> %19, <double 3.000000e+00, double 3.000000e+00>
  %21 = fadd <2 x double> %18, %20
  %22 = fsub <2 x double> %21, %7
  %23 = fmul <2 x double> %15, %22
  %24 = extractelement <2 x double> %23, i32 0
  %25 = extractelement <2 x double> %23, i32 1
  %26 = fsub double %25, %24
  %27 = shufflevector <2 x double> %8, <2 x double> undef, <2 x i32> <i32 1, i32 0>
  %28 = fmul <2 x double> %27, %22
  %29 = extractelement <2 x double> %28, i32 0
  %30 = extractelement <2 x double> %28, i32 1
  %31 = fsub double %30, %29
  %32 = fmul <2 x double> %8, %15
  %33 = extractelement <2 x double> %32, i32 0
  %34 = extractelement <2 x double> %32, i32 1
  %35 = fsub double %33, %34
  %36 = tail call i32 @_ZN7SkDQuad11RootsValidTEdddPd(double %26, double %31, double %35, double* %1) #12
  ret i32 %36
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @_ZNK8SkDCubic16findMaxCurvatureEPd(%struct.SkDCubic* nocapture readonly, double*) local_unnamed_addr #4 align 2 {
  %3 = getelementptr inbounds %struct.SkDCubic, %struct.SkDCubic* %0, i64 0, i32 0, i64 0, i32 0
  %4 = getelementptr inbounds double, double* %3, i64 2
  %5 = getelementptr inbounds double, double* %3, i64 4
  %6 = getelementptr inbounds double, double* %3, i64 6
  %7 = bitcast double* %4 to <2 x double>*
  %8 = load <2 x double>, <2 x double>* %7, align 8
  %9 = bitcast double* %5 to <2 x double>*
  %10 = load <2 x double>, <2 x double>* %9, align 8
  %11 = bitcast %struct.SkDCubic* %0 to <2 x double>*
  %12 = load <2 x double>, <2 x double>* %11, align 8
  %13 = bitcast double* %6 to <2 x double>*
  %14 = load <2 x double>, <2 x double>* %13, align 8
  %15 = fsub <2 x double> %8, %10
  %16 = fmul <2 x double> %15, <double 3.000000e+00, double 3.000000e+00>
  %17 = fadd <2 x double> %14, %16
  %18 = fsub <2 x double> %17, %12
  %19 = fmul <2 x double> %8, <double 2.000000e+00, double 2.000000e+00>
  %20 = fsub <2 x double> %10, %19
  %21 = fadd <2 x double> %12, %20
  %22 = fsub <2 x double> %8, %12
  %23 = fmul <2 x double> %18, %18
  %24 = fmul <2 x double> %21, <double 3.000000e+00, double 3.000000e+00>
  %25 = fmul <2 x double> %24, %18
  %26 = fmul <2 x double> %21, <double 2.000000e+00, double 2.000000e+00>
  %27 = fmul <2 x double> %21, %26
  %28 = fmul <2 x double> %22, %18
  %29 = fadd <2 x double> %27, %28
  %30 = fmul <2 x double> %22, %21
  %31 = extractelement <2 x double> %23, i32 0
  %32 = extractelement <2 x double> %23, i32 1
  %33 = fadd double %31, %32
  %34 = extractelement <2 x double> %25, i32 0
  %35 = extractelement <2 x double> %25, i32 1
  %36 = fadd double %34, %35
  %37 = extractelement <2 x double> %29, i32 0
  %38 = extractelement <2 x double> %29, i32 1
  %39 = fadd double %37, %38
  %40 = extractelement <2 x double> %30, i32 0
  %41 = extractelement <2 x double> %30, i32 1
  %42 = fadd double %40, %41
  %43 = tail call i32 @_ZN8SkDCubic11RootsValidTEddddPd(double %33, double %36, double %39, double %42, double* %1)
  ret i32 %43
}

; Function Attrs: nofree norecurse nounwind ssp uwtable writeonly
define hidden void @_ZNK8SkDCubic8otherPtsEiPPK8SkDPoint(%struct.SkDCubic*, i32, %struct.SkDPoint** nocapture) local_unnamed_addr #6 align 2 {
  %4 = icmp ne i32 %1, 0
  %5 = xor i1 %4, true
  %6 = zext i1 %5 to i64
  %7 = getelementptr inbounds %struct.SkDCubic, %struct.SkDCubic* %0, i64 0, i32 0, i64 %6
  store %struct.SkDPoint* %7, %struct.SkDPoint** %2, align 8
  %8 = select i1 %4, i32 1, i32 2
  %9 = zext i32 %8 to i64
  %10 = getelementptr inbounds %struct.SkDCubic, %struct.SkDCubic* %0, i64 0, i32 0, i64 %9
  %11 = getelementptr inbounds %struct.SkDPoint*, %struct.SkDPoint** %2, i64 1
  store %struct.SkDPoint* %10, %struct.SkDPoint** %11, align 8
  %12 = add nuw nsw i32 %8, 1
  %13 = zext i32 %12 to i64
  %14 = getelementptr inbounds %struct.SkDCubic, %struct.SkDCubic* %0, i64 0, i32 0, i64 %13
  %15 = getelementptr inbounds %struct.SkDPoint*, %struct.SkDPoint** %2, i64 2
  store %struct.SkDPoint* %14, %struct.SkDPoint** %15, align 8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @_ZNK8SkDCubic11searchRootsEPdidNS_10SearchAxisES0_(%struct.SkDCubic*, double*, i32, double, i32, double* nocapture) local_unnamed_addr #4 align 2 {
  %7 = alloca %class.anon.2, align 1
  %8 = sext i32 %2 to i64
  %9 = getelementptr inbounds double, double* %1, i64 %8
  %10 = getelementptr inbounds %struct.SkDCubic, %struct.SkDCubic* %0, i64 0, i32 0, i64 1, i32 0
  %11 = bitcast double* %10 to <2 x double>*
  %12 = load <2 x double>, <2 x double>* %11, align 8
  %13 = bitcast %struct.SkDCubic* %0 to <2 x double>*
  %14 = load <2 x double>, <2 x double>* %13, align 8
  %15 = fsub <2 x double> %12, %14
  %16 = getelementptr inbounds %struct.SkDCubic, %struct.SkDCubic* %0, i64 0, i32 0, i64 2, i32 0
  %17 = bitcast double* %16 to <2 x double>*
  %18 = load <2 x double>, <2 x double>* %17, align 8
  %19 = fmul <2 x double> %12, <double 2.000000e+00, double 2.000000e+00>
  %20 = fsub <2 x double> %18, %19
  %21 = fadd <2 x double> %14, %20
  %22 = shufflevector <2 x double> %21, <2 x double> undef, <2 x i32> <i32 1, i32 0>
  %23 = getelementptr inbounds %struct.SkDCubic, %struct.SkDCubic* %0, i64 0, i32 0, i64 3, i32 0
  %24 = bitcast double* %23 to <2 x double>*
  %25 = load <2 x double>, <2 x double>* %24, align 8
  %26 = fsub <2 x double> %12, %18
  %27 = fmul <2 x double> %26, <double 3.000000e+00, double 3.000000e+00>
  %28 = fadd <2 x double> %25, %27
  %29 = fsub <2 x double> %28, %14
  %30 = fmul <2 x double> %22, %29
  %31 = extractelement <2 x double> %30, i32 0
  %32 = extractelement <2 x double> %30, i32 1
  %33 = fsub double %32, %31
  %34 = shufflevector <2 x double> %15, <2 x double> undef, <2 x i32> <i32 1, i32 0>
  %35 = fmul <2 x double> %34, %29
  %36 = extractelement <2 x double> %35, i32 0
  %37 = extractelement <2 x double> %35, i32 1
  %38 = fsub double %37, %36
  %39 = fmul <2 x double> %15, %22
  %40 = extractelement <2 x double> %39, i32 0
  %41 = extractelement <2 x double> %39, i32 1
  %42 = fsub double %40, %41
  %43 = tail call i32 @_ZN7SkDQuad11RootsValidTEdddPd(double %33, double %38, double %42, double* %9) #12
  %44 = add i32 %43, %2
  %45 = add i32 %44, 1
  %46 = sext i32 %44 to i64
  %47 = getelementptr inbounds double, double* %1, i64 %46
  store double 0.000000e+00, double* %47, align 8
  %48 = sext i32 %45 to i64
  %49 = getelementptr inbounds double, double* %1, i64 %48
  store double 1.000000e+00, double* %49, align 8
  %50 = getelementptr inbounds double, double* %49, i64 1
  %51 = getelementptr inbounds %class.anon.2, %class.anon.2* %7, i64 0, i32 0
  call void @llvm.lifetime.start.p0i8(i64 1, i8* nonnull %51) #12
  %52 = ptrtoint double* %50 to i64
  %53 = ptrtoint double* %1 to i64
  %54 = sub i64 %52, %53
  %55 = lshr exact i64 %54, 3
  %56 = trunc i64 %55 to i32
  %57 = icmp slt i32 %56, 2
  br i1 %57, label %63, label %58

58:                                               ; preds = %6
  %59 = add nsw i32 %56, -2
  %60 = tail call i32 @llvm.ctlz.i32(i32 %59, i1 false) #12, !range !2
  %61 = shl nuw nsw i32 %60, 1
  %62 = sub nsw i32 64, %61
  call void @_Z12SkTIntroSortIdZ8SkTQSortIdEvPT_S2_EUlRKdS4_E_EviS2_iRKT0_(i32 %62, double* %1, i32 %56, %class.anon.2* nonnull dereferenceable(1) %7) #12
  br label %63

63:                                               ; preds = %6, %58
  call void @llvm.lifetime.end.p0i8(i64 1, i8* nonnull %51) #12
  %64 = icmp slt i32 %44, 0
  br i1 %64, label %88, label %65

65:                                               ; preds = %63
  %66 = zext i32 %45 to i64
  br label %67

67:                                               ; preds = %85, %65
  %68 = phi i64 [ 0, %65 ], [ %72, %85 ]
  %69 = phi i32 [ 0, %65 ], [ %86, %85 ]
  %70 = getelementptr inbounds double, double* %1, i64 %68
  %71 = load double, double* %70, align 8
  %72 = add nuw nsw i64 %68, 1
  %73 = getelementptr inbounds double, double* %1, i64 %72
  %74 = load double, double* %73, align 8
  %75 = fcmp oeq double %71, %74
  br i1 %75, label %85, label %76

76:                                               ; preds = %67
  %77 = call double @_ZNK8SkDCubic12binarySearchEdddNS_10SearchAxisE(%struct.SkDCubic* %0, double %71, double %74, double %3, i32 %4)
  %78 = fcmp ult double %77, 0.000000e+00
  br i1 %78, label %85, label %79

79:                                               ; preds = %76
  %80 = icmp sgt i32 %69, 2
  br i1 %80, label %88, label %81

81:                                               ; preds = %79
  %82 = add nsw i32 %69, 1
  %83 = sext i32 %69 to i64
  %84 = getelementptr inbounds double, double* %5, i64 %83
  store double %77, double* %84, align 8
  br label %85

85:                                               ; preds = %76, %81, %67
  %86 = phi i32 [ %69, %67 ], [ %82, %81 ], [ %69, %76 ]
  %87 = icmp eq i64 %72, %66
  br i1 %87, label %88, label %67

88:                                               ; preds = %79, %85, %63
  %89 = phi i32 [ 0, %63 ], [ %86, %85 ], [ 0, %79 ]
  ret i32 %89
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @_ZN8SkDCubic11RootsValidTEddddPd(double, double, double, double, double*) local_unnamed_addr #4 align 2 {
  %6 = alloca [3 x double], align 16
  %7 = bitcast [3 x double]* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %7) #12
  %8 = getelementptr inbounds [3 x double], [3 x double]* %6, i64 0, i64 0
  %9 = bitcast [3 x double]* %6 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %9, i8 -1, i64 24, i1 false)
  %10 = call i32 @_ZN8SkDCubic9RootsRealEddddPd(double %0, double %1, double %2, double %3, double* nonnull %8)
  %11 = call i32 @_ZN7SkDQuad10AddValidTsEPdiS0_(double* nonnull %8, i32 %10, double* %4) #12
  %12 = icmp sgt i32 %10, 0
  br i1 %12, label %13, label %15

13:                                               ; preds = %5
  %14 = zext i32 %10 to i64
  br label %17

15:                                               ; preds = %70, %5
  %16 = phi i32 [ %11, %5 ], [ %71, %70 ]
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %7) #12
  ret i32 %16

17:                                               ; preds = %70, %13
  %18 = phi i64 [ 0, %13 ], [ %72, %70 ]
  %19 = phi i32 [ %11, %13 ], [ %71, %70 ]
  %20 = getelementptr inbounds [3 x double], [3 x double]* %6, i64 0, i64 %18
  %21 = load double, double* %20, align 8
  %22 = fcmp olt double %21, 0x3FF0000020000000
  br i1 %22, label %46, label %23

23:                                               ; preds = %17
  %24 = fsub double 1.000000e+00, %21
  %25 = fsub double 1.000050e+00, %21
  %26 = fmul double %24, %25
  %27 = fcmp ugt double %26, 0.000000e+00
  br i1 %27, label %46, label %28

28:                                               ; preds = %23
  %29 = icmp sgt i32 %19, 0
  br i1 %29, label %30, label %42

30:                                               ; preds = %28
  %31 = zext i32 %19 to i64
  br label %34

32:                                               ; preds = %34
  %33 = icmp eq i64 %41, %31
  br i1 %33, label %42, label %34

34:                                               ; preds = %32, %30
  %35 = phi i64 [ 0, %30 ], [ %41, %32 ]
  %36 = getelementptr inbounds double, double* %4, i64 %35
  %37 = load double, double* %36, align 8
  %38 = fadd double %37, -1.000000e+00
  %39 = call double @llvm.fabs.f64(double %38) #12
  %40 = fcmp olt double %39, 0x3E80000000000000
  %41 = add nuw nsw i64 %35, 1
  br i1 %40, label %70, label %32

42:                                               ; preds = %32, %28
  %43 = add nsw i32 %19, 1
  %44 = sext i32 %19 to i64
  %45 = getelementptr inbounds double, double* %4, i64 %44
  store double 1.000000e+00, double* %45, align 8
  br label %70

46:                                               ; preds = %23, %17
  %47 = fcmp ogt double %21, 0xBE80000000000000
  br i1 %47, label %70, label %48

48:                                               ; preds = %46
  %49 = fsub double -5.000000e-05, %21
  %50 = fsub double 0.000000e+00, %21
  %51 = fmul double %49, %50
  %52 = fcmp ugt double %51, 0.000000e+00
  br i1 %52, label %70, label %53

53:                                               ; preds = %48
  %54 = icmp sgt i32 %19, 0
  br i1 %54, label %55, label %66

55:                                               ; preds = %53
  %56 = zext i32 %19 to i64
  br label %59

57:                                               ; preds = %59
  %58 = icmp eq i64 %65, %56
  br i1 %58, label %66, label %59

59:                                               ; preds = %57, %55
  %60 = phi i64 [ 0, %55 ], [ %65, %57 ]
  %61 = getelementptr inbounds double, double* %4, i64 %60
  %62 = load double, double* %61, align 8
  %63 = call double @llvm.fabs.f64(double %62) #12
  %64 = fcmp olt double %63, 0x3E80000000000000
  %65 = add nuw nsw i64 %60, 1
  br i1 %64, label %70, label %57

66:                                               ; preds = %57, %53
  %67 = add nsw i32 %19, 1
  %68 = sext i32 %19 to i64
  %69 = getelementptr inbounds double, double* %4, i64 %68
  store double 0.000000e+00, double* %69, align 8
  br label %70

70:                                               ; preds = %34, %59, %48, %42, %66, %46
  %71 = phi i32 [ %19, %46 ], [ %67, %66 ], [ %19, %48 ], [ %43, %42 ], [ %19, %59 ], [ %19, %34 ]
  %72 = add nuw nsw i64 %18, 1
  %73 = icmp eq i64 %72, %14
  br i1 %73, label %15, label %17
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @_ZN8SkDCubic9RootsRealEddddPd(double, double, double, double, double*) local_unnamed_addr #4 align 2 {
  %6 = tail call double @llvm.fabs.f64(double %0) #12
  %7 = fcmp olt double %6, 0x3E80000000000000
  br i1 %7, label %8, label %24

8:                                                ; preds = %5
  %9 = fcmp oeq double %0, 0.000000e+00
  br i1 %9, label %22, label %10

10:                                               ; preds = %8
  %11 = fmul double %1, 0x3E80000000000000
  %12 = tail call double @llvm.fabs.f64(double %11) #12
  %13 = fcmp olt double %6, %12
  br i1 %13, label %14, label %24

14:                                               ; preds = %10
  %15 = fmul double %2, 0x3E80000000000000
  %16 = tail call double @llvm.fabs.f64(double %15) #12
  %17 = fcmp olt double %6, %16
  br i1 %17, label %18, label %24

18:                                               ; preds = %14
  %19 = fmul double %3, 0x3E80000000000000
  %20 = tail call double @llvm.fabs.f64(double %19) #12
  %21 = fcmp olt double %6, %20
  br i1 %21, label %22, label %24

22:                                               ; preds = %8, %18
  %23 = tail call i32 @_ZN7SkDQuad9RootsRealEdddPd(double %1, double %2, double %3, double* %4) #12
  br label %194

24:                                               ; preds = %18, %14, %10, %5
  %25 = fcmp oeq double %3, 0.000000e+00
  br i1 %25, label %39, label %26

26:                                               ; preds = %24
  %27 = tail call double @llvm.fabs.f64(double %3) #12
  %28 = fmul double %0, 0x3E80000000000000
  %29 = tail call double @llvm.fabs.f64(double %28) #12
  %30 = fcmp olt double %27, %29
  br i1 %30, label %31, label %57

31:                                               ; preds = %26
  %32 = fmul double %1, 0x3E80000000000000
  %33 = tail call double @llvm.fabs.f64(double %32) #12
  %34 = fcmp olt double %27, %33
  br i1 %34, label %35, label %57

35:                                               ; preds = %31
  %36 = fmul double %2, 0x3E80000000000000
  %37 = tail call double @llvm.fabs.f64(double %36) #12
  %38 = fcmp olt double %27, %37
  br i1 %38, label %39, label %57

39:                                               ; preds = %24, %35
  %40 = tail call i32 @_ZN7SkDQuad9RootsRealEdddPd(double %0, double %1, double %2, double* %4) #12
  %41 = icmp sgt i32 %40, 0
  br i1 %41, label %42, label %53

42:                                               ; preds = %39
  %43 = zext i32 %40 to i64
  br label %46

44:                                               ; preds = %46
  %45 = icmp eq i64 %52, %43
  br i1 %45, label %53, label %46

46:                                               ; preds = %44, %42
  %47 = phi i64 [ 0, %42 ], [ %52, %44 ]
  %48 = getelementptr inbounds double, double* %4, i64 %47
  %49 = load double, double* %48, align 8
  %50 = tail call double @llvm.fabs.f64(double %49) #12
  %51 = fcmp olt double %50, 0x3E80000000000000
  %52 = add nuw nsw i64 %47, 1
  br i1 %51, label %194, label %44

53:                                               ; preds = %44, %39
  %54 = add nsw i32 %40, 1
  %55 = sext i32 %40 to i64
  %56 = getelementptr inbounds double, double* %4, i64 %55
  store double 0.000000e+00, double* %56, align 8
  br label %194

57:                                               ; preds = %35, %31, %26
  %58 = fadd double %0, %1
  %59 = fadd double %58, %2
  %60 = fadd double %59, %3
  %61 = tail call double @llvm.fabs.f64(double %60) #12
  %62 = fcmp olt double %61, 0x3E80000000000000
  br i1 %62, label %63, label %81

63:                                               ; preds = %57
  %64 = fsub double -0.000000e+00, %3
  %65 = tail call i32 @_ZN7SkDQuad9RootsRealEdddPd(double %0, double %58, double %64, double* %4) #12
  %66 = icmp sgt i32 %65, 0
  br i1 %66, label %67, label %77

67:                                               ; preds = %63
  %68 = zext i32 %65 to i64
  br label %71

69:                                               ; preds = %71
  %70 = icmp eq i64 %76, %68
  br i1 %70, label %77, label %71

71:                                               ; preds = %69, %67
  %72 = phi i64 [ 0, %67 ], [ %76, %69 ]
  %73 = getelementptr inbounds double, double* %4, i64 %72
  %74 = load double, double* %73, align 8
  %75 = tail call zeroext i1 @_Z16AlmostDequalUlpsdd(double %74, double 1.000000e+00) #12
  %76 = add nuw nsw i64 %72, 1
  br i1 %75, label %194, label %69

77:                                               ; preds = %69, %63
  %78 = add nsw i32 %65, 1
  %79 = sext i32 %65 to i64
  %80 = getelementptr inbounds double, double* %4, i64 %79
  store double 1.000000e+00, double* %80, align 8
  br label %194

81:                                               ; preds = %57
  %82 = fdiv double 1.000000e+00, %0
  %83 = insertelement <2 x double> undef, double %82, i32 0
  %84 = shufflevector <2 x double> %83, <2 x double> undef, <2 x i32> zeroinitializer
  %85 = insertelement <2 x double> undef, double %3, i32 0
  %86 = insertelement <2 x double> %85, double %1, i32 1
  %87 = fmul <2 x double> %84, %86
  %88 = extractelement <2 x double> %87, i32 1
  %89 = insertelement <2 x double> %87, double 2.700000e+01, i32 0
  %90 = fmul <2 x double> %87, %89
  %91 = extractelement <2 x double> %90, i32 1
  %92 = fmul double %91, 2.000000e+00
  %93 = insertelement <2 x double> undef, double %88, i32 0
  %94 = insertelement <2 x double> %93, double %82, i32 1
  %95 = insertelement <2 x double> undef, double %92, i32 0
  %96 = insertelement <2 x double> %95, double %2, i32 1
  %97 = fmul <2 x double> %94, %96
  %98 = fmul double %88, 9.000000e+00
  %99 = extractelement <2 x double> %97, i32 1
  %100 = fmul double %98, %99
  %101 = insertelement <2 x double> <double undef, double 3.000000e+00>, double %100, i32 0
  %102 = fsub <2 x double> %97, %101
  %103 = fmul <2 x double> %97, %101
  %104 = shufflevector <2 x double> %102, <2 x double> %103, <2 x i32> <i32 0, i32 3>
  %105 = fadd <2 x double> %90, %104
  %106 = fsub <2 x double> %90, %104
  %107 = shufflevector <2 x double> %105, <2 x double> %106, <2 x i32> <i32 0, i32 3>
  %108 = fdiv <2 x double> %107, <double 5.400000e+01, double 9.000000e+00>
  %109 = extractelement <2 x double> %108, i32 1
  %110 = fmul double %109, %109
  %111 = extractelement <2 x double> %108, i32 0
  %112 = insertelement <2 x double> undef, double %111, i32 0
  %113 = insertelement <2 x double> %112, double %110, i32 1
  %114 = fmul <2 x double> %108, %113
  %115 = extractelement <2 x double> %114, i32 0
  %116 = extractelement <2 x double> %114, i32 1
  %117 = fsub double %115, %116
  %118 = fdiv double %88, 3.000000e+00
  %119 = fcmp olt double %117, 0.000000e+00
  br i1 %119, label %120, label %163

120:                                              ; preds = %81
  %121 = tail call double @sqrt(double %116) #12
  %122 = fdiv double %111, %121
  %123 = fcmp ogt double %122, 1.000000e+00
  %124 = select i1 %123, double 1.000000e+00, double %122
  %125 = fcmp ogt double %124, -1.000000e+00
  %126 = select i1 %125, double %124, double -1.000000e+00
  %127 = tail call double @acos(double %126) #12
  %128 = tail call double @sqrt(double %109) #12
  %129 = fmul double %128, -2.000000e+00
  %130 = fdiv double %127, 3.000000e+00
  %131 = tail call double @cos(double %130) #12
  %132 = fmul double %129, %131
  %133 = fsub double %132, %118
  %134 = getelementptr inbounds double, double* %4, i64 1
  store double %133, double* %4, align 8
  %135 = fadd double %127, 0x401921FB54442D18
  %136 = fdiv double %135, 3.000000e+00
  %137 = tail call double @cos(double %136) #12
  %138 = fmul double %129, %137
  %139 = fsub double %138, %118
  %140 = load double, double* %4, align 8
  %141 = tail call zeroext i1 @_Z16AlmostDequalUlpsdd(double %140, double %139) #12
  br i1 %141, label %144, label %142

142:                                              ; preds = %120
  %143 = getelementptr inbounds double, double* %4, i64 2
  store double %139, double* %134, align 8
  br label %144

144:                                              ; preds = %142, %120
  %145 = phi double* [ %134, %120 ], [ %143, %142 ]
  %146 = fadd double %127, 0xC01921FB54442D18
  %147 = fdiv double %146, 3.000000e+00
  %148 = tail call double @cos(double %147) #12
  %149 = fmul double %129, %148
  %150 = fsub double %149, %118
  %151 = load double, double* %4, align 8
  %152 = tail call zeroext i1 @_Z16AlmostDequalUlpsdd(double %151, double %150) #12
  br i1 %152, label %187, label %153

153:                                              ; preds = %144
  %154 = ptrtoint double* %145 to i64
  %155 = ptrtoint double* %4 to i64
  %156 = sub i64 %154, %155
  %157 = icmp eq i64 %156, 8
  br i1 %157, label %161, label %158

158:                                              ; preds = %153
  %159 = load double, double* %134, align 8
  %160 = tail call zeroext i1 @_Z16AlmostDequalUlpsdd(double %159, double %150) #12
  br i1 %160, label %187, label %161

161:                                              ; preds = %158, %153
  %162 = getelementptr inbounds double, double* %145, i64 1
  store double %150, double* %145, align 8
  br label %187

163:                                              ; preds = %81
  %164 = tail call double @sqrt(double %117) #12
  %165 = tail call double @llvm.fabs.f64(double %111)
  %166 = fadd double %165, %164
  %167 = tail call double @_Z11SkDCubeRootd(double %166) #12
  %168 = fcmp ogt double %111, 0.000000e+00
  %169 = fsub double -0.000000e+00, %167
  %170 = select i1 %168, double %169, double %167
  %171 = fcmp une double %170, 0.000000e+00
  br i1 %171, label %172, label %175

172:                                              ; preds = %163
  %173 = fdiv double %109, %170
  %174 = fadd double %170, %173
  br label %175

175:                                              ; preds = %172, %163
  %176 = phi double [ %174, %172 ], [ %170, %163 ]
  %177 = fsub double %176, %118
  %178 = getelementptr inbounds double, double* %4, i64 1
  store double %177, double* %4, align 8
  %179 = tail call zeroext i1 @_Z16AlmostDequalUlpsdd(double %115, double %116) #12
  br i1 %179, label %180, label %187

180:                                              ; preds = %175
  %181 = fmul double %176, -5.000000e-01
  %182 = fsub double %181, %118
  %183 = load double, double* %4, align 8
  %184 = tail call zeroext i1 @_Z16AlmostDequalUlpsdd(double %183, double %182) #12
  br i1 %184, label %187, label %185

185:                                              ; preds = %180
  %186 = getelementptr inbounds double, double* %4, i64 2
  store double %182, double* %178, align 8
  br label %187

187:                                              ; preds = %175, %185, %180, %144, %158, %161
  %188 = phi double* [ %145, %144 ], [ %162, %161 ], [ %145, %158 ], [ %178, %180 ], [ %186, %185 ], [ %178, %175 ]
  %189 = ptrtoint double* %188 to i64
  %190 = ptrtoint double* %4 to i64
  %191 = sub i64 %189, %190
  %192 = lshr exact i64 %191, 3
  %193 = trunc i64 %192 to i32
  br label %194

194:                                              ; preds = %71, %46, %77, %53, %187, %22
  %195 = phi i32 [ %23, %22 ], [ %193, %187 ], [ %54, %53 ], [ %78, %77 ], [ %40, %46 ], [ %65, %71 ]
  ret i32 %195
}

declare i32 @_ZN7SkDQuad10AddValidTsEPdiS0_(double*, i32, double*) local_unnamed_addr #5

declare i32 @_ZN7SkDQuad9RootsRealEdddPd(double, double, double, double*) local_unnamed_addr #5

declare zeroext i1 @_Z16AlmostDequalUlpsdd(double, double) local_unnamed_addr #5

; Function Attrs: nofree nounwind
declare double @acos(double) local_unnamed_addr #7

; Function Attrs: nofree nounwind
declare double @sqrt(double) local_unnamed_addr #7

; Function Attrs: nofree nounwind
declare double @cos(double) local_unnamed_addr #7

; Function Attrs: nounwind readnone speculatable
declare double @llvm.fabs.f64(double) #8

declare double @_Z11SkDCubeRootd(double) local_unnamed_addr #5

; Function Attrs: nounwind ssp uwtable
define hidden { double, double } @_ZNK8SkDCubic7dxdyAtTEd(%struct.SkDCubic* nocapture readonly, double) local_unnamed_addr #4 align 2 {
  %3 = getelementptr inbounds %struct.SkDCubic, %struct.SkDCubic* %0, i64 0, i32 0, i64 0, i32 0
  %4 = fsub double 1.000000e+00, %1
  %5 = getelementptr inbounds double, double* %3, i64 2
  %6 = getelementptr inbounds double, double* %3, i64 4
  %7 = getelementptr inbounds double, double* %3, i64 6
  %8 = bitcast %struct.SkDCubic* %0 to <2 x double>*
  %9 = load <2 x double>, <2 x double>* %8, align 8
  %10 = bitcast double* %5 to <2 x double>*
  %11 = load <2 x double>, <2 x double>* %10, align 8
  %12 = bitcast double* %6 to <2 x double>*
  %13 = load <2 x double>, <2 x double>* %12, align 8
  %14 = bitcast double* %7 to <2 x double>*
  %15 = load <2 x double>, <2 x double>* %14, align 8
  %16 = fsub <2 x double> %11, %9
  %17 = insertelement <2 x double> undef, double %4, i32 0
  %18 = shufflevector <2 x double> %17, <2 x double> undef, <2 x i32> zeroinitializer
  %19 = fmul <2 x double> %18, %16
  %20 = fmul <2 x double> %18, %19
  %21 = fsub <2 x double> %13, %11
  %22 = fmul <2 x double> %21, <double 2.000000e+00, double 2.000000e+00>
  %23 = insertelement <2 x double> undef, double %1, i32 0
  %24 = shufflevector <2 x double> %23, <2 x double> undef, <2 x i32> zeroinitializer
  %25 = fmul <2 x double> %22, %24
  %26 = fmul <2 x double> %18, %25
  %27 = fadd <2 x double> %20, %26
  %28 = fsub <2 x double> %15, %13
  %29 = fmul <2 x double> %28, %24
  %30 = fmul <2 x double> %29, %24
  %31 = fadd <2 x double> %30, %27
  %32 = fmul <2 x double> %31, <double 3.000000e+00, double 3.000000e+00>
  %33 = extractelement <2 x double> %32, i32 0
  %34 = fcmp oeq double %33, 0.000000e+00
  %35 = extractelement <2 x double> %32, i32 1
  %36 = fcmp oeq double %35, 0.000000e+00
  %37 = and i1 %34, %36
  br i1 %37, label %38, label %64

38:                                               ; preds = %2
  %39 = fcmp oeq double %1, 0.000000e+00
  br i1 %39, label %40, label %42

40:                                               ; preds = %38
  %41 = fsub <2 x double> %13, %9
  br label %47

42:                                               ; preds = %38
  %43 = fcmp oeq double %1, 1.000000e+00
  br i1 %43, label %44, label %46

44:                                               ; preds = %42
  %45 = fsub <2 x double> %15, %11
  br label %47

46:                                               ; preds = %42
  tail call void (i8*, i32, i8*, ...) @_Z17SkDebugf_FileLinePKciS0_z(i8* getelementptr inbounds ([54 x i8], [54 x i8]* @.str, i64 0, i64 0), i32 507, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.1, i64 0, i64 0)) #12
  br label %47

47:                                               ; preds = %44, %46, %40
  %48 = phi <2 x double> [ %41, %40 ], [ %45, %44 ], [ %32, %46 ]
  %49 = extractelement <2 x double> %48, i32 0
  %50 = fcmp oeq double %49, 0.000000e+00
  %51 = extractelement <2 x double> %48, i32 1
  %52 = fcmp oeq double %51, 0.000000e+00
  %53 = and i1 %50, %52
  %54 = fcmp oeq double %1, 1.000000e+00
  %55 = or i1 %39, %54
  %56 = and i1 %55, %53
  br i1 %56, label %57, label %64

57:                                               ; preds = %47
  %58 = getelementptr inbounds %struct.SkDCubic, %struct.SkDCubic* %0, i64 0, i32 0, i64 3, i32 0
  %59 = bitcast double* %58 to <2 x double>*
  %60 = load <2 x double>, <2 x double>* %59, align 8
  %61 = bitcast %struct.SkDCubic* %0 to <2 x double>*
  %62 = load <2 x double>, <2 x double>* %61, align 8
  %63 = fsub <2 x double> %60, %62
  br label %64

64:                                               ; preds = %47, %57, %2
  %65 = phi <2 x double> [ %63, %57 ], [ %48, %47 ], [ %32, %2 ]
  %66 = extractelement <2 x double> %65, i32 0
  %67 = insertvalue { double, double } undef, double %66, 0
  %68 = extractelement <2 x double> %65, i32 1
  %69 = insertvalue { double, double } %67, double %68, 1
  ret { double, double } %69
}

declare void @_Z17SkDebugf_FileLinePKciS0_z(i8*, i32, i8*, ...) local_unnamed_addr #5

declare i32 @_ZN7SkDQuad11RootsValidTEdddPd(double, double, double, double*) local_unnamed_addr #5

; Function Attrs: nounwind ssp uwtable
define hidden i32 @_ZN8SkDCubic11FindExtremaEPKdPd(double* nocapture readonly, double*) local_unnamed_addr #4 align 2 {
  %3 = load double, double* %0, align 8
  %4 = getelementptr inbounds double, double* %0, i64 2
  %5 = load double, double* %4, align 8
  %6 = getelementptr inbounds double, double* %0, i64 4
  %7 = load double, double* %6, align 8
  %8 = getelementptr inbounds double, double* %0, i64 6
  %9 = load double, double* %8, align 8
  %10 = fsub double %9, %3
  %11 = fsub double %5, %7
  %12 = fmul double %11, 3.000000e+00
  %13 = fadd double %10, %12
  %14 = fsub double %3, %5
  %15 = fsub double %14, %5
  %16 = fadd double %7, %15
  %17 = fmul double %16, 2.000000e+00
  %18 = fsub double %5, %3
  %19 = tail call i32 @_ZN7SkDQuad11RootsValidTEdddPd(double %13, double %17, double %18, double* %1) #12
  ret i32 %19
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZNK8SkDCubic9subDivideEdd(%struct.SkDCubic* noalias nocapture sret, %struct.SkDCubic* nocapture readonly, double, double) local_unnamed_addr #4 align 2 {
  %5 = alloca %struct.SkDCubicPair, align 8
  %6 = alloca [4 x %struct.SkDPoint], align 8
  %7 = fcmp oeq double %2, 0.000000e+00
  %8 = fcmp oeq double %3, 1.000000e+00
  %9 = or i1 %7, %8
  br i1 %9, label %10, label %25

10:                                               ; preds = %4
  %11 = and i1 %7, %8
  br i1 %11, label %12, label %15

12:                                               ; preds = %10
  %13 = bitcast %struct.SkDCubic* %0 to i8*
  %14 = bitcast %struct.SkDCubic* %1 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %13, i8* align 8 %14, i64 64, i1 false)
  br label %136

15:                                               ; preds = %10
  %16 = bitcast %struct.SkDCubicPair* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 112, i8* nonnull %16) #12
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %16, i8 -1, i64 112, i1 false)
  %17 = select i1 %7, double %3, double %2
  call void @_ZNK8SkDCubic6chopAtEd(%struct.SkDCubicPair* nonnull sret %5, %struct.SkDCubic* %1, double %17)
  %18 = bitcast [4 x %struct.SkDPoint]* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 64, i8* nonnull %18)
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %18, i8 -1, i64 64, i1 false)
  br i1 %7, label %19, label %20

19:                                               ; preds = %15
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %18, i8* nonnull align 8 %16, i64 64, i1 false)
  br label %23

20:                                               ; preds = %15
  %21 = getelementptr inbounds %struct.SkDCubicPair, %struct.SkDCubicPair* %5, i64 0, i32 0, i64 3
  %22 = bitcast %struct.SkDPoint* %21 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %18, i8* align 8 %22, i64 64, i1 false)
  br label %23

23:                                               ; preds = %20, %19
  %24 = bitcast %struct.SkDCubic* %0 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %24, i8* nonnull align 8 %18, i64 64, i1 false)
  call void @llvm.lifetime.end.p0i8(i64 64, i8* nonnull %18)
  call void @llvm.lifetime.end.p0i8(i64 112, i8* nonnull %16) #12
  br label %136

25:                                               ; preds = %4
  %26 = getelementptr inbounds %struct.SkDCubic, %struct.SkDCubic* %1, i64 0, i32 0, i64 0, i32 0
  %27 = getelementptr inbounds double, double* %26, i64 2
  %28 = getelementptr inbounds double, double* %26, i64 4
  %29 = getelementptr inbounds double, double* %26, i64 6
  %30 = bitcast %struct.SkDCubic* %1 to <2 x double>*
  %31 = load <2 x double>, <2 x double>* %30, align 8
  %32 = bitcast double* %27 to <2 x double>*
  %33 = load <2 x double>, <2 x double>* %32, align 8
  %34 = fsub <2 x double> %33, %31
  %35 = insertelement <2 x double> undef, double %2, i32 0
  %36 = shufflevector <2 x double> %35, <2 x double> undef, <2 x i32> zeroinitializer
  %37 = fmul <2 x double> %34, %36
  %38 = fadd <2 x double> %31, %37
  %39 = bitcast double* %28 to <2 x double>*
  %40 = load <2 x double>, <2 x double>* %39, align 8
  %41 = fsub <2 x double> %40, %33
  %42 = fmul <2 x double> %41, %36
  %43 = fadd <2 x double> %33, %42
  %44 = bitcast double* %29 to <2 x double>*
  %45 = load <2 x double>, <2 x double>* %44, align 8
  %46 = fsub <2 x double> %45, %40
  %47 = fmul <2 x double> %46, %36
  %48 = fadd <2 x double> %40, %47
  %49 = fsub <2 x double> %43, %38
  %50 = fmul <2 x double> %49, %36
  %51 = fadd <2 x double> %38, %50
  %52 = fsub <2 x double> %48, %43
  %53 = fmul <2 x double> %52, %36
  %54 = fadd <2 x double> %43, %53
  %55 = fsub <2 x double> %54, %51
  %56 = fmul <2 x double> %55, %36
  %57 = fadd <2 x double> %51, %56
  %58 = fmul double %2, 2.000000e+00
  %59 = fadd double %58, %3
  %60 = fdiv double %59, 3.000000e+00
  %61 = insertelement <2 x double> undef, double %60, i32 0
  %62 = shufflevector <2 x double> %61, <2 x double> undef, <2 x i32> zeroinitializer
  %63 = fmul <2 x double> %62, %41
  %64 = fadd <2 x double> %33, %63
  %65 = fmul <2 x double> %62, %34
  %66 = fadd <2 x double> %31, %65
  %67 = fmul <2 x double> %62, %46
  %68 = fadd <2 x double> %40, %67
  %69 = fsub <2 x double> %64, %66
  %70 = fmul <2 x double> %62, %69
  %71 = fadd <2 x double> %66, %70
  %72 = fsub <2 x double> %68, %64
  %73 = fmul <2 x double> %62, %72
  %74 = fadd <2 x double> %64, %73
  %75 = fsub <2 x double> %74, %71
  %76 = fmul <2 x double> %62, %75
  %77 = fadd <2 x double> %71, %76
  %78 = fmul double %3, 2.000000e+00
  %79 = fadd double %78, %2
  %80 = fdiv double %79, 3.000000e+00
  %81 = insertelement <2 x double> undef, double %80, i32 0
  %82 = shufflevector <2 x double> %81, <2 x double> undef, <2 x i32> zeroinitializer
  %83 = fmul <2 x double> %82, %34
  %84 = fadd <2 x double> %31, %83
  %85 = fmul <2 x double> %82, %41
  %86 = fadd <2 x double> %33, %85
  %87 = fmul <2 x double> %82, %46
  %88 = fadd <2 x double> %40, %87
  %89 = fsub <2 x double> %86, %84
  %90 = fmul <2 x double> %82, %89
  %91 = fadd <2 x double> %84, %90
  %92 = fsub <2 x double> %88, %86
  %93 = fmul <2 x double> %82, %92
  %94 = fadd <2 x double> %86, %93
  %95 = fsub <2 x double> %94, %91
  %96 = fmul <2 x double> %82, %95
  %97 = fadd <2 x double> %91, %96
  %98 = insertelement <2 x double> undef, double %3, i32 0
  %99 = shufflevector <2 x double> %98, <2 x double> undef, <2 x i32> zeroinitializer
  %100 = fmul <2 x double> %34, %99
  %101 = fadd <2 x double> %31, %100
  %102 = fmul <2 x double> %41, %99
  %103 = fadd <2 x double> %33, %102
  %104 = fmul <2 x double> %46, %99
  %105 = fadd <2 x double> %40, %104
  %106 = fsub <2 x double> %103, %101
  %107 = fmul <2 x double> %106, %99
  %108 = fadd <2 x double> %101, %107
  %109 = fsub <2 x double> %105, %103
  %110 = fmul <2 x double> %109, %99
  %111 = fadd <2 x double> %103, %110
  %112 = fsub <2 x double> %111, %108
  %113 = fmul <2 x double> %112, %99
  %114 = fadd <2 x double> %108, %113
  %115 = fmul <2 x double> %77, <double 2.700000e+01, double 2.700000e+01>
  %116 = fmul <2 x double> %57, <double 8.000000e+00, double 8.000000e+00>
  %117 = fsub <2 x double> %115, %116
  %118 = fsub <2 x double> %117, %114
  %119 = fmul <2 x double> %97, <double 2.700000e+01, double 2.700000e+01>
  %120 = fsub <2 x double> %119, %57
  %121 = fmul <2 x double> %114, <double 8.000000e+00, double 8.000000e+00>
  %122 = fsub <2 x double> %120, %121
  %123 = fmul <2 x double> %118, <double 2.000000e+00, double 2.000000e+00>
  %124 = fsub <2 x double> %123, %122
  %125 = fdiv <2 x double> %124, <double 1.800000e+01, double 1.800000e+01>
  %126 = fmul <2 x double> %122, <double 2.000000e+00, double 2.000000e+00>
  %127 = fsub <2 x double> %126, %118
  %128 = fdiv <2 x double> %127, <double 1.800000e+01, double 1.800000e+01>
  %129 = bitcast %struct.SkDCubic* %0 to <2 x double>*
  store <2 x double> %57, <2 x double>* %129, align 8
  %130 = getelementptr inbounds %struct.SkDCubic, %struct.SkDCubic* %0, i64 0, i32 0, i64 1, i32 0
  %131 = bitcast double* %130 to <2 x double>*
  store <2 x double> %125, <2 x double>* %131, align 8
  %132 = getelementptr inbounds %struct.SkDCubic, %struct.SkDCubic* %0, i64 0, i32 0, i64 2, i32 0
  %133 = bitcast double* %132 to <2 x double>*
  store <2 x double> %128, <2 x double>* %133, align 8
  %134 = getelementptr inbounds %struct.SkDCubic, %struct.SkDCubic* %0, i64 0, i32 0, i64 3, i32 0
  %135 = bitcast double* %134 to <2 x double>*
  store <2 x double> %114, <2 x double>* %135, align 8
  br label %136

136:                                              ; preds = %25, %23, %12
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZNK8SkDCubic9subDivideERK8SkDPointS2_ddPS0_(%struct.SkDCubic* nocapture readonly, %struct.SkDPoint* nocapture readonly dereferenceable(16), %struct.SkDPoint* nocapture readonly dereferenceable(16), double, double, %struct.SkDPoint* nocapture) local_unnamed_addr #4 align 2 {
  %7 = alloca %struct.SkDCubic, align 16
  %8 = bitcast %struct.SkDCubic* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 64, i8* nonnull %8) #12
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %8, i8 -1, i64 64, i1 false)
  call void @_ZNK8SkDCubic9subDivideEdd(%struct.SkDCubic* nonnull sret %7, %struct.SkDCubic* %0, double %3, double %4)
  %9 = getelementptr inbounds %struct.SkDPoint, %struct.SkDPoint* %1, i64 0, i32 0
  %10 = getelementptr inbounds %struct.SkDPoint, %struct.SkDPoint* %1, i64 0, i32 1
  %11 = bitcast %struct.SkDPoint* %1 to <2 x double>*
  %12 = load <2 x double>, <2 x double>* %11, align 8
  %13 = bitcast %struct.SkDCubic* %7 to <2 x double>*
  %14 = load <2 x double>, <2 x double>* %13, align 16
  %15 = fsub <2 x double> %12, %14
  %16 = getelementptr inbounds %struct.SkDCubic, %struct.SkDCubic* %7, i64 0, i32 0, i64 1, i32 0
  %17 = bitcast double* %16 to <2 x double>*
  %18 = load <2 x double>, <2 x double>* %17, align 16
  %19 = fadd <2 x double> %15, %18
  %20 = getelementptr inbounds %struct.SkDPoint, %struct.SkDPoint* %5, i64 0, i32 0
  %21 = getelementptr inbounds %struct.SkDPoint, %struct.SkDPoint* %5, i64 0, i32 1
  %22 = bitcast %struct.SkDPoint* %5 to <2 x double>*
  store <2 x double> %19, <2 x double>* %22, align 8
  %23 = getelementptr inbounds %struct.SkDPoint, %struct.SkDPoint* %2, i64 0, i32 0
  %24 = getelementptr inbounds %struct.SkDCubic, %struct.SkDCubic* %7, i64 0, i32 0, i64 3, i32 0
  %25 = getelementptr inbounds %struct.SkDPoint, %struct.SkDPoint* %2, i64 0, i32 1
  %26 = bitcast %struct.SkDPoint* %2 to <2 x double>*
  %27 = load <2 x double>, <2 x double>* %26, align 8
  %28 = bitcast double* %24 to <2 x double>*
  %29 = load <2 x double>, <2 x double>* %28, align 16
  %30 = fsub <2 x double> %27, %29
  %31 = getelementptr inbounds %struct.SkDCubic, %struct.SkDCubic* %7, i64 0, i32 0, i64 2, i32 0
  %32 = bitcast double* %31 to <2 x double>*
  %33 = load <2 x double>, <2 x double>* %32, align 16
  %34 = fadd <2 x double> %30, %33
  %35 = getelementptr inbounds %struct.SkDPoint, %struct.SkDPoint* %5, i64 1, i32 0
  %36 = getelementptr inbounds %struct.SkDPoint, %struct.SkDPoint* %5, i64 1, i32 1
  %37 = bitcast double* %35 to <2 x double>*
  store <2 x double> %34, <2 x double>* %37, align 8
  %38 = fcmp oeq double %3, 0.000000e+00
  %39 = fcmp oeq double %4, 0.000000e+00
  %40 = or i1 %38, %39
  br i1 %40, label %41, label %59

41:                                               ; preds = %6
  %42 = getelementptr inbounds %struct.SkDPoint, %struct.SkDPoint* %5, i64 1
  %43 = select i1 %38, %struct.SkDPoint* %5, %struct.SkDPoint* %42
  %44 = getelementptr inbounds %struct.SkDCubic, %struct.SkDCubic* %0, i64 0, i32 0, i64 0, i32 0
  %45 = load double, double* %44, align 8
  %46 = getelementptr inbounds %struct.SkDCubic, %struct.SkDCubic* %0, i64 0, i32 0, i64 1, i32 0
  %47 = load double, double* %46, align 8
  %48 = fcmp oeq double %45, %47
  br i1 %48, label %49, label %51

49:                                               ; preds = %41
  %50 = getelementptr inbounds %struct.SkDPoint, %struct.SkDPoint* %43, i64 0, i32 0
  store double %45, double* %50, align 8
  br label %51

51:                                               ; preds = %49, %41
  %52 = getelementptr inbounds %struct.SkDCubic, %struct.SkDCubic* %0, i64 0, i32 0, i64 0, i32 1
  %53 = load double, double* %52, align 8
  %54 = getelementptr inbounds %struct.SkDCubic, %struct.SkDCubic* %0, i64 0, i32 0, i64 1, i32 1
  %55 = load double, double* %54, align 8
  %56 = fcmp oeq double %53, %55
  br i1 %56, label %57, label %59

57:                                               ; preds = %51
  %58 = getelementptr inbounds %struct.SkDPoint, %struct.SkDPoint* %43, i64 0, i32 1
  store double %53, double* %58, align 8
  br label %59

59:                                               ; preds = %57, %51, %6
  %60 = fcmp oeq double %3, 1.000000e+00
  %61 = fcmp oeq double %4, 1.000000e+00
  %62 = or i1 %60, %61
  br i1 %62, label %63, label %81

63:                                               ; preds = %59
  %64 = getelementptr inbounds %struct.SkDPoint, %struct.SkDPoint* %5, i64 1
  %65 = select i1 %60, %struct.SkDPoint* %5, %struct.SkDPoint* %64
  %66 = getelementptr inbounds %struct.SkDCubic, %struct.SkDCubic* %0, i64 0, i32 0, i64 3, i32 0
  %67 = load double, double* %66, align 8
  %68 = getelementptr inbounds %struct.SkDCubic, %struct.SkDCubic* %0, i64 0, i32 0, i64 2, i32 0
  %69 = load double, double* %68, align 8
  %70 = fcmp oeq double %67, %69
  br i1 %70, label %71, label %73

71:                                               ; preds = %63
  %72 = getelementptr inbounds %struct.SkDPoint, %struct.SkDPoint* %65, i64 0, i32 0
  store double %67, double* %72, align 8
  br label %73

73:                                               ; preds = %71, %63
  %74 = getelementptr inbounds %struct.SkDCubic, %struct.SkDCubic* %0, i64 0, i32 0, i64 3, i32 1
  %75 = load double, double* %74, align 8
  %76 = getelementptr inbounds %struct.SkDCubic, %struct.SkDCubic* %0, i64 0, i32 0, i64 2, i32 1
  %77 = load double, double* %76, align 8
  %78 = fcmp oeq double %75, %77
  br i1 %78, label %79, label %81

79:                                               ; preds = %73
  %80 = getelementptr inbounds %struct.SkDPoint, %struct.SkDPoint* %65, i64 0, i32 1
  store double %75, double* %80, align 8
  br label %81

81:                                               ; preds = %79, %73, %59
  %82 = load double, double* %20, align 8
  %83 = load double, double* %9, align 8
  %84 = fptrunc double %82 to float
  %85 = fptrunc double %83 to float
  %86 = tail call zeroext i1 @_Z16AlmostBequalUlpsff(float %84, float %85) #12
  br i1 %86, label %87, label %91

87:                                               ; preds = %81
  %88 = bitcast %struct.SkDPoint* %1 to i64*
  %89 = load i64, i64* %88, align 8
  %90 = bitcast %struct.SkDPoint* %5 to i64*
  store i64 %89, i64* %90, align 8
  br label %91

91:                                               ; preds = %87, %81
  %92 = load double, double* %21, align 8
  %93 = load double, double* %10, align 8
  %94 = fptrunc double %92 to float
  %95 = fptrunc double %93 to float
  %96 = tail call zeroext i1 @_Z16AlmostBequalUlpsff(float %94, float %95) #12
  br i1 %96, label %97, label %101

97:                                               ; preds = %91
  %98 = bitcast double* %10 to i64*
  %99 = load i64, i64* %98, align 8
  %100 = bitcast double* %21 to i64*
  store i64 %99, i64* %100, align 8
  br label %101

101:                                              ; preds = %97, %91
  %102 = load double, double* %35, align 8
  %103 = load double, double* %23, align 8
  %104 = fptrunc double %102 to float
  %105 = fptrunc double %103 to float
  %106 = tail call zeroext i1 @_Z16AlmostBequalUlpsff(float %104, float %105) #12
  br i1 %106, label %107, label %111

107:                                              ; preds = %101
  %108 = bitcast %struct.SkDPoint* %2 to i64*
  %109 = load i64, i64* %108, align 8
  %110 = bitcast double* %35 to i64*
  store i64 %109, i64* %110, align 8
  br label %111

111:                                              ; preds = %107, %101
  %112 = load double, double* %36, align 8
  %113 = load double, double* %25, align 8
  %114 = fptrunc double %112 to float
  %115 = fptrunc double %113 to float
  %116 = tail call zeroext i1 @_Z16AlmostBequalUlpsff(float %114, float %115) #12
  br i1 %116, label %117, label %121

117:                                              ; preds = %111
  %118 = bitcast double* %25 to i64*
  %119 = load i64, i64* %118, align 8
  %120 = bitcast double* %36 to i64*
  store i64 %119, i64* %120, align 8
  br label %121

121:                                              ; preds = %117, %111
  call void @llvm.lifetime.end.p0i8(i64 64, i8* nonnull %8) #12
  ret void
}

; Function Attrs: nofree nounwind ssp uwtable
define hidden zeroext i1 @_ZNK8SkDCubic13toFloatPointsEP7SkPoint(%struct.SkDCubic* nocapture readonly, %struct.SkPoint* nocapture) local_unnamed_addr #9 align 2 {
  %3 = getelementptr inbounds %struct.SkDCubic, %struct.SkDCubic* %0, i64 0, i32 0, i64 0, i32 0
  %4 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %1, i64 0, i32 0
  %5 = load double, double* %3, align 8
  %6 = fptrunc double %5 to float
  %7 = tail call float @llvm.fabs.f32(float %6)
  %8 = fcmp olt float %7, 0x3EC0000000000000
  %9 = select i1 %8, float 0.000000e+00, float %6
  store float %9, float* %4, align 4
  %10 = getelementptr inbounds double, double* %3, i64 1
  %11 = load double, double* %10, align 8
  %12 = fptrunc double %11 to float
  %13 = getelementptr inbounds float, float* %4, i64 1
  %14 = tail call float @llvm.fabs.f32(float %12)
  %15 = fcmp olt float %14, 0x3EC0000000000000
  %16 = select i1 %15, float 0.000000e+00, float %12
  store float %16, float* %13, align 4
  %17 = getelementptr inbounds double, double* %3, i64 2
  %18 = load double, double* %17, align 8
  %19 = fptrunc double %18 to float
  %20 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %1, i64 1, i32 0
  %21 = tail call float @llvm.fabs.f32(float %19)
  %22 = fcmp olt float %21, 0x3EC0000000000000
  %23 = select i1 %22, float 0.000000e+00, float %19
  store float %23, float* %20, align 4
  %24 = getelementptr inbounds double, double* %3, i64 3
  %25 = load double, double* %24, align 8
  %26 = fptrunc double %25 to float
  %27 = getelementptr inbounds float, float* %4, i64 3
  %28 = tail call float @llvm.fabs.f32(float %26)
  %29 = fcmp olt float %28, 0x3EC0000000000000
  %30 = select i1 %29, float 0.000000e+00, float %26
  store float %30, float* %27, align 4
  %31 = getelementptr inbounds double, double* %3, i64 4
  %32 = load double, double* %31, align 8
  %33 = fptrunc double %32 to float
  %34 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %1, i64 2, i32 0
  %35 = tail call float @llvm.fabs.f32(float %33)
  %36 = fcmp olt float %35, 0x3EC0000000000000
  %37 = select i1 %36, float 0.000000e+00, float %33
  store float %37, float* %34, align 4
  %38 = getelementptr inbounds double, double* %3, i64 5
  %39 = load double, double* %38, align 8
  %40 = fptrunc double %39 to float
  %41 = getelementptr inbounds float, float* %4, i64 5
  %42 = tail call float @llvm.fabs.f32(float %40)
  %43 = fcmp olt float %42, 0x3EC0000000000000
  %44 = select i1 %43, float 0.000000e+00, float %40
  store float %44, float* %41, align 4
  %45 = getelementptr inbounds double, double* %3, i64 6
  %46 = load double, double* %45, align 8
  %47 = fptrunc double %46 to float
  %48 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %1, i64 3, i32 0
  %49 = tail call float @llvm.fabs.f32(float %47)
  %50 = fcmp olt float %49, 0x3EC0000000000000
  %51 = select i1 %50, float 0.000000e+00, float %47
  store float %51, float* %48, align 4
  %52 = getelementptr inbounds double, double* %3, i64 7
  %53 = load double, double* %52, align 8
  %54 = fptrunc double %53 to float
  %55 = getelementptr inbounds float, float* %4, i64 7
  %56 = tail call float @llvm.fabs.f32(float %54)
  %57 = fcmp olt float %56, 0x3EC0000000000000
  %58 = select i1 %57, float 0.000000e+00, float %54
  store float %58, float* %55, align 4
  %59 = fmul float %9, 0.000000e+00
  %60 = fmul float %59, %16
  %61 = fmul float %60, %23
  %62 = fmul float %61, %30
  %63 = fmul float %62, %37
  %64 = fmul float %63, %44
  %65 = fmul float %64, %51
  %66 = fmul float %65, %58
  %67 = fcmp oeq float %66, 0.000000e+00
  ret i1 %67
}

; Function Attrs: nounwind readnone speculatable
declare float @llvm.fabs.f32(float) #8

; Function Attrs: nounwind ssp uwtable
define hidden double @_ZNK8SkDCubic3topERKS_ddP8SkDPoint(%struct.SkDCubic* nocapture readonly, %struct.SkDCubic* nocapture readonly dereferenceable(64), double, double, %struct.SkDPoint* nocapture) local_unnamed_addr #4 align 2 {
  %6 = alloca [2 x double], align 16
  %7 = bitcast [2 x double]* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %7) #12
  %8 = getelementptr inbounds [2 x double], [2 x double]* %6, i64 0, i64 0
  %9 = getelementptr inbounds %struct.SkDCubic, %struct.SkDCubic* %0, i64 0, i32 0, i64 0, i32 1
  %10 = bitcast [2 x double]* %6 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %10, i8 -1, i64 16, i1 false)
  %11 = load double, double* %9, align 8
  %12 = getelementptr inbounds double, double* %9, i64 2
  %13 = load double, double* %12, align 8
  %14 = getelementptr inbounds double, double* %9, i64 4
  %15 = load double, double* %14, align 8
  %16 = getelementptr inbounds double, double* %9, i64 6
  %17 = load double, double* %16, align 8
  %18 = fsub double %17, %11
  %19 = fsub double %13, %15
  %20 = fmul double %19, 3.000000e+00
  %21 = fadd double %18, %20
  %22 = fsub double %11, %13
  %23 = fsub double %22, %13
  %24 = fadd double %15, %23
  %25 = fmul double %24, 2.000000e+00
  %26 = fsub double %13, %11
  %27 = call i32 @_ZN7SkDQuad11RootsValidTEdddPd(double %21, double %25, double %26, double* nonnull %8) #12
  %28 = icmp sgt i32 %27, 0
  br i1 %28, label %29, label %44

29:                                               ; preds = %5
  %30 = fsub double %3, %2
  %31 = getelementptr inbounds %struct.SkDCubic, %struct.SkDCubic* %1, i64 0, i32 0, i64 1, i32 0
  %32 = getelementptr inbounds %struct.SkDCubic, %struct.SkDCubic* %1, i64 0, i32 0, i64 2, i32 0
  %33 = getelementptr inbounds %struct.SkDCubic, %struct.SkDCubic* %1, i64 0, i32 0, i64 3, i32 0
  %34 = getelementptr inbounds %struct.SkDPoint, %struct.SkDPoint* %4, i64 0, i32 1
  %35 = getelementptr inbounds %struct.SkDPoint, %struct.SkDPoint* %4, i64 0, i32 0
  %36 = zext i32 %27 to i64
  %37 = bitcast %struct.SkDCubic* %1 to <2 x double>*
  %38 = bitcast double* %31 to <2 x double>*
  %39 = bitcast double* %32 to <2 x double>*
  %40 = bitcast double* %33 to <2 x double>*
  %41 = bitcast double* %33 to <2 x double>*
  %42 = bitcast %struct.SkDCubic* %1 to <2 x double>*
  %43 = bitcast %struct.SkDPoint* %4 to <2 x double>*
  br label %46

44:                                               ; preds = %101, %5
  %45 = phi double [ -1.000000e+00, %5 ], [ %102, %101 ]
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %7) #12
  ret double %45

46:                                               ; preds = %101, %29
  %47 = phi i64 [ 0, %29 ], [ %103, %101 ]
  %48 = phi double [ -1.000000e+00, %29 ], [ %102, %101 ]
  %49 = getelementptr inbounds [2 x double], [2 x double]* %6, i64 0, i64 %47
  %50 = load double, double* %49, align 8
  %51 = fmul double %30, %50
  %52 = fadd double %51, %2
  %53 = fcmp oeq double %52, 0.000000e+00
  br i1 %53, label %54, label %56

54:                                               ; preds = %46
  %55 = load <2 x double>, <2 x double>* %42, align 8
  br label %89

56:                                               ; preds = %46
  %57 = fcmp oeq double %52, 1.000000e+00
  br i1 %57, label %58, label %60

58:                                               ; preds = %56
  %59 = load <2 x double>, <2 x double>* %41, align 8
  br label %89

60:                                               ; preds = %56
  %61 = fsub double 1.000000e+00, %52
  %62 = fmul double %61, %61
  %63 = fmul double %61, %62
  %64 = fmul double %62, 3.000000e+00
  %65 = fmul double %52, %64
  %66 = fmul double %52, %52
  %67 = fmul double %61, 3.000000e+00
  %68 = fmul double %66, %67
  %69 = fmul double %52, %66
  %70 = load <2 x double>, <2 x double>* %37, align 8
  %71 = insertelement <2 x double> undef, double %63, i32 0
  %72 = shufflevector <2 x double> %71, <2 x double> undef, <2 x i32> zeroinitializer
  %73 = fmul <2 x double> %72, %70
  %74 = load <2 x double>, <2 x double>* %38, align 8
  %75 = insertelement <2 x double> undef, double %65, i32 0
  %76 = shufflevector <2 x double> %75, <2 x double> undef, <2 x i32> zeroinitializer
  %77 = fmul <2 x double> %76, %74
  %78 = fadd <2 x double> %73, %77
  %79 = load <2 x double>, <2 x double>* %39, align 8
  %80 = insertelement <2 x double> undef, double %68, i32 0
  %81 = shufflevector <2 x double> %80, <2 x double> undef, <2 x i32> zeroinitializer
  %82 = fmul <2 x double> %81, %79
  %83 = fadd <2 x double> %78, %82
  %84 = load <2 x double>, <2 x double>* %40, align 8
  %85 = insertelement <2 x double> undef, double %69, i32 0
  %86 = shufflevector <2 x double> %85, <2 x double> undef, <2 x i32> zeroinitializer
  %87 = fmul <2 x double> %86, %84
  %88 = fadd <2 x double> %83, %87
  br label %89

89:                                               ; preds = %54, %58, %60
  %90 = phi <2 x double> [ %55, %54 ], [ %59, %58 ], [ %88, %60 ]
  %91 = load double, double* %34, align 8
  %92 = extractelement <2 x double> %90, i32 1
  %93 = fcmp ogt double %91, %92
  br i1 %93, label %100, label %94

94:                                               ; preds = %89
  %95 = fcmp oeq double %91, %92
  br i1 %95, label %96, label %101

96:                                               ; preds = %94
  %97 = load double, double* %35, align 8
  %98 = extractelement <2 x double> %90, i32 0
  %99 = fcmp ogt double %97, %98
  br i1 %99, label %100, label %101

100:                                              ; preds = %96, %89
  store <2 x double> %90, <2 x double>* %43, align 8
  br label %101

101:                                              ; preds = %100, %96, %94
  %102 = phi double [ %52, %100 ], [ %48, %96 ], [ %48, %94 ]
  %103 = add nuw nsw i64 %47, 1
  %104 = icmp eq i64 %103, %36
  br i1 %104, label %44, label %46
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @_ZNK8SkTCubic12intersectRayEP15SkIntersectionsRK7SkDLine(%class.SkTCubic*, %class.SkIntersections*, %struct.SkDLine* dereferenceable(32)) unnamed_addr #4 align 2 {
  %4 = getelementptr inbounds %class.SkTCubic, %class.SkTCubic* %0, i64 0, i32 1
  %5 = tail call i32 @_ZN15SkIntersections12intersectRayERK8SkDCubicRK7SkDLine(%class.SkIntersections* %1, %struct.SkDCubic* dereferenceable(64) %4, %struct.SkDLine* dereferenceable(32) %2) #12
  ret i32 %5
}

declare i32 @_ZN15SkIntersections12intersectRayERK8SkDCubicRK7SkDLine(%class.SkIntersections*, %struct.SkDCubic* dereferenceable(64), %struct.SkDLine* dereferenceable(32)) local_unnamed_addr #5

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZNK8SkTCubic14hullIntersectsERK7SkDQuadPb(%class.SkTCubic*, %struct.SkDQuad* dereferenceable(48), i8*) unnamed_addr #4 align 2 {
  %4 = getelementptr inbounds %class.SkTCubic, %class.SkTCubic* %0, i64 0, i32 1
  %5 = tail call zeroext i1 @_ZNK7SkDQuad14hullIntersectsERK8SkDCubicPb(%struct.SkDQuad* %1, %struct.SkDCubic* dereferenceable(64) %4, i8* %2) #12
  ret i1 %5
}

declare zeroext i1 @_ZNK7SkDQuad14hullIntersectsERK8SkDCubicPb(%struct.SkDQuad*, %struct.SkDCubic* dereferenceable(64), i8*) local_unnamed_addr #5

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZNK8SkTCubic14hullIntersectsERK8SkDConicPb(%class.SkTCubic*, %struct.SkDConic* dereferenceable(56), i8*) unnamed_addr #4 align 2 {
  %4 = getelementptr inbounds %class.SkTCubic, %class.SkTCubic* %0, i64 0, i32 1
  %5 = tail call zeroext i1 @_ZNK8SkDConic14hullIntersectsERK8SkDCubicPb(%struct.SkDConic* %1, %struct.SkDCubic* dereferenceable(64) %4, i8* %2) #12
  ret i1 %5
}

declare zeroext i1 @_ZNK8SkDConic14hullIntersectsERK8SkDCubicPb(%struct.SkDConic*, %struct.SkDCubic* dereferenceable(64), i8*) local_unnamed_addr #5

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZNK8SkTCubic9setBoundsEP7SkDRect(%class.SkTCubic*, %struct.SkDRect*) unnamed_addr #4 align 2 {
  %3 = getelementptr inbounds %class.SkTCubic, %class.SkTCubic* %0, i64 0, i32 1
  tail call void @_ZN7SkDRect9setBoundsERK8SkDCubicS2_dd(%struct.SkDRect* %1, %struct.SkDCubic* dereferenceable(64) %3, %struct.SkDCubic* dereferenceable(64) %3, double 0.000000e+00, double 1.000000e+00) #12
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN8SkTCubicD0Ev(%class.SkTCubic*) unnamed_addr #4 comdat align 2 {
  %2 = bitcast %class.SkTCubic* %0 to i8*
  tail call void @_ZdlPv(i8* %2) #13
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden dereferenceable(16) %struct.SkDPoint* @_ZNK8SkTCubicixEi(%class.SkTCubic*, i32) unnamed_addr #4 comdat align 2 {
  %3 = sext i32 %1 to i64
  %4 = getelementptr inbounds %class.SkTCubic, %class.SkTCubic* %0, i64 0, i32 1, i32 0, i64 %3
  ret %struct.SkDPoint* %4
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden dereferenceable(16) %struct.SkDPoint* @_ZN8SkTCubicixEi(%class.SkTCubic*, i32) unnamed_addr #4 comdat align 2 {
  %3 = sext i32 %1 to i64
  %4 = getelementptr inbounds %class.SkTCubic, %class.SkTCubic* %0, i64 0, i32 1, i32 0, i64 %3
  ret %struct.SkDPoint* %4
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZNK8SkTCubic9collapsedEv(%class.SkTCubic*) unnamed_addr #4 comdat align 2 {
  %2 = getelementptr inbounds %class.SkTCubic, %class.SkTCubic* %0, i64 0, i32 1, i32 0, i64 0
  %3 = getelementptr inbounds %class.SkTCubic, %class.SkTCubic* %0, i64 0, i32 1, i32 0, i64 1
  %4 = tail call zeroext i1 @_ZNK8SkDPoint18approximatelyEqualERKS_(%struct.SkDPoint* %2, %struct.SkDPoint* dereferenceable(16) %3) #12
  br i1 %4, label %5, label %11

5:                                                ; preds = %1
  %6 = getelementptr inbounds %class.SkTCubic, %class.SkTCubic* %0, i64 0, i32 1, i32 0, i64 2
  %7 = tail call zeroext i1 @_ZNK8SkDPoint18approximatelyEqualERKS_(%struct.SkDPoint* %2, %struct.SkDPoint* dereferenceable(16) %6) #12
  br i1 %7, label %8, label %11

8:                                                ; preds = %5
  %9 = getelementptr inbounds %class.SkTCubic, %class.SkTCubic* %0, i64 0, i32 1, i32 0, i64 3
  %10 = tail call zeroext i1 @_ZNK8SkDPoint18approximatelyEqualERKS_(%struct.SkDPoint* %2, %struct.SkDPoint* dereferenceable(16) %9) #12
  br label %11

11:                                               ; preds = %1, %5, %8
  %12 = phi i1 [ false, %5 ], [ false, %1 ], [ %10, %8 ]
  ret i1 %12
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZNK8SkTCubic14controlsInsideEv(%class.SkTCubic*) unnamed_addr #4 comdat align 2 {
  %2 = getelementptr inbounds %class.SkTCubic, %class.SkTCubic* %0, i64 0, i32 1, i32 0, i64 0, i32 0
  %3 = getelementptr inbounds %class.SkTCubic, %class.SkTCubic* %0, i64 0, i32 1, i32 0, i64 1, i32 0
  %4 = bitcast double* %2 to <2 x double>*
  %5 = load <2 x double>, <2 x double>* %4, align 8
  %6 = bitcast double* %3 to <2 x double>*
  %7 = load <2 x double>, <2 x double>* %6, align 8
  %8 = fsub <2 x double> %5, %7
  %9 = getelementptr inbounds %class.SkTCubic, %class.SkTCubic* %0, i64 0, i32 1, i32 0, i64 2, i32 0
  %10 = bitcast double* %9 to <2 x double>*
  %11 = load <2 x double>, <2 x double>* %10, align 8
  %12 = getelementptr inbounds %class.SkTCubic, %class.SkTCubic* %0, i64 0, i32 1, i32 0, i64 3, i32 0
  %13 = bitcast double* %12 to <2 x double>*
  %14 = load <2 x double>, <2 x double>* %13, align 8
  %15 = fsub <2 x double> %5, %14
  %16 = fsub <2 x double> %7, %14
  %17 = fsub <2 x double> %11, %14
  %18 = fmul <2 x double> %8, %15
  %19 = extractelement <2 x double> %18, i32 0
  %20 = extractelement <2 x double> %18, i32 1
  %21 = fadd double %19, %20
  %22 = fcmp ogt double %21, 0.000000e+00
  br i1 %22, label %23, label %42

23:                                               ; preds = %1
  %24 = fsub <2 x double> %5, %11
  %25 = fmul <2 x double> %24, %15
  %26 = extractelement <2 x double> %25, i32 0
  %27 = extractelement <2 x double> %25, i32 1
  %28 = fadd double %26, %27
  %29 = fcmp ogt double %28, 0.000000e+00
  br i1 %29, label %30, label %42

30:                                               ; preds = %23
  %31 = fmul <2 x double> %15, %16
  %32 = extractelement <2 x double> %31, i32 0
  %33 = extractelement <2 x double> %31, i32 1
  %34 = fadd double %32, %33
  %35 = fcmp ogt double %34, 0.000000e+00
  br i1 %35, label %36, label %42

36:                                               ; preds = %30
  %37 = fmul <2 x double> %15, %17
  %38 = extractelement <2 x double> %37, i32 0
  %39 = extractelement <2 x double> %37, i32 1
  %40 = fadd double %38, %39
  %41 = fcmp ogt double %40, 0.000000e+00
  br label %42

42:                                               ; preds = %1, %23, %30, %36
  %43 = phi i1 [ false, %30 ], [ false, %23 ], [ false, %1 ], [ %41, %36 ]
  ret i1 %43
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN8SkTCubic9debugInitEv(%class.SkTCubic*) unnamed_addr #4 comdat align 2 {
  %2 = getelementptr inbounds %class.SkTCubic, %class.SkTCubic* %0, i64 0, i32 1
  %3 = bitcast %struct.SkDCubic* %2 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %3, i8 0, i64 64, i1 false) #12
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden { double, double } @_ZNK8SkTCubic7dxdyAtTEd(%class.SkTCubic*, double) unnamed_addr #4 comdat align 2 {
  %3 = getelementptr inbounds %class.SkTCubic, %class.SkTCubic* %0, i64 0, i32 1
  %4 = tail call { double, double } @_ZNK8SkDCubic7dxdyAtTEd(%struct.SkDCubic* %3, double %1)
  ret { double, double } %4
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZNK8SkTCubic14hullIntersectsERK8SkDCubicPb(%class.SkTCubic*, %struct.SkDCubic* dereferenceable(64), i8*) unnamed_addr #4 comdat align 2 {
  %4 = getelementptr inbounds %class.SkTCubic, %class.SkTCubic* %0, i64 0, i32 1, i32 0, i64 0
  %5 = tail call zeroext i1 @_ZNK8SkDCubic14hullIntersectsEPK8SkDPointiPb(%struct.SkDCubic* %1, %struct.SkDPoint* %4, i32 4, i8* %2) #12
  ret i1 %5
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZNK8SkTCubic14hullIntersectsERK8SkTCurvePb(%class.SkTCubic*, %class.SkTCurve* dereferenceable(8), i8*) unnamed_addr #4 comdat align 2 {
  %4 = getelementptr inbounds %class.SkTCubic, %class.SkTCubic* %0, i64 0, i32 1
  %5 = bitcast %class.SkTCurve* %1 to i1 (%class.SkTCurve*, %struct.SkDCubic*, i8*)***
  %6 = load i1 (%class.SkTCurve*, %struct.SkDCubic*, i8*)**, i1 (%class.SkTCurve*, %struct.SkDCubic*, i8*)*** %5, align 8
  %7 = getelementptr inbounds i1 (%class.SkTCurve*, %struct.SkDCubic*, i8*)*, i1 (%class.SkTCurve*, %struct.SkDCubic*, i8*)** %6, i64 10
  %8 = load i1 (%class.SkTCurve*, %struct.SkDCubic*, i8*)*, i1 (%class.SkTCurve*, %struct.SkDCubic*, i8*)** %7, align 8
  %9 = tail call zeroext i1 %8(%class.SkTCurve* %1, %struct.SkDCubic* dereferenceable(64) %4, i8* %2) #12
  ret i1 %9
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZNK8SkTCubic7IsConicEv(%class.SkTCubic*) unnamed_addr #4 comdat align 2 {
  ret i1 false
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden %class.SkTCurve* @_ZNK8SkTCubic4makeER12SkArenaAlloc(%class.SkTCubic*, %class.SkArenaAlloc* dereferenceable(32)) unnamed_addr #4 comdat align 2 {
  %3 = tail call i8* @_ZN12SkArenaAlloc21allocObjectWithFooterEjj(%class.SkArenaAlloc* %1, i32 81, i32 8) #12
  %4 = getelementptr inbounds %class.SkArenaAlloc, %class.SkArenaAlloc* %1, i64 0, i32 1
  %5 = bitcast i8** %4 to i64*
  %6 = load i64, i64* %5, align 8
  %7 = ptrtoint i8* %3 to i64
  %8 = sub i64 %7, %6
  %9 = trunc i64 %8 to i32
  %10 = getelementptr inbounds i8, i8* %3, i64 72
  store i8* %10, i8** %4, align 8
  tail call void @_ZN12SkArenaAlloc13installFooterEPFPcS0_Ej(%class.SkArenaAlloc* %1, i8* (i8*)* nonnull @_ZZN12SkArenaAlloc4makeIZNS_4makeI8SkTCubicJEEEPT_DpOT0_EUlPvE_EEDTclfp_LDnEEEOS3_ENUlPcE_8__invokeESC_, i32 %9) #12
  %11 = bitcast i8* %3 to i32 (...)***
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [24 x i8*] }, { [24 x i8*] }* @_ZTV8SkTCubic, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %11, align 8
  %12 = bitcast i8* %3 to %class.SkTCurve*
  ret %class.SkTCurve* %12
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden i32 @_ZNK8SkTCubic16maxIntersectionsEv(%class.SkTCubic*) unnamed_addr #4 comdat align 2 {
  ret i32 9
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNK8SkTCubic8otherPtsEiPPK8SkDPoint(%class.SkTCubic*, i32, %struct.SkDPoint**) unnamed_addr #4 comdat align 2 {
  %4 = icmp ne i32 %1, 0
  %5 = xor i1 %4, true
  %6 = zext i1 %5 to i64
  %7 = getelementptr inbounds %class.SkTCubic, %class.SkTCubic* %0, i64 0, i32 1, i32 0, i64 %6
  store %struct.SkDPoint* %7, %struct.SkDPoint** %2, align 8
  %8 = select i1 %4, i32 1, i32 2
  %9 = zext i32 %8 to i64
  %10 = getelementptr inbounds %class.SkTCubic, %class.SkTCubic* %0, i64 0, i32 1, i32 0, i64 %9
  %11 = getelementptr inbounds %struct.SkDPoint*, %struct.SkDPoint** %2, i64 1
  store %struct.SkDPoint* %10, %struct.SkDPoint** %11, align 8
  %12 = add nuw nsw i32 %8, 1
  %13 = zext i32 %12 to i64
  %14 = getelementptr inbounds %class.SkTCubic, %class.SkTCubic* %0, i64 0, i32 1, i32 0, i64 %13
  %15 = getelementptr inbounds %struct.SkDPoint*, %struct.SkDPoint** %2, i64 2
  store %struct.SkDPoint* %14, %struct.SkDPoint** %15, align 8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden i32 @_ZNK8SkTCubic10pointCountEv(%class.SkTCubic*) unnamed_addr #4 comdat align 2 {
  ret i32 4
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden i32 @_ZNK8SkTCubic9pointLastEv(%class.SkTCubic*) unnamed_addr #4 comdat align 2 {
  ret i32 3
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden { double, double } @_ZNK8SkTCubic5ptAtTEd(%class.SkTCubic*, double) unnamed_addr #4 comdat align 2 {
  %3 = getelementptr inbounds %class.SkTCubic, %class.SkTCubic* %0, i64 0, i32 1
  %4 = fcmp oeq double %1, 0.000000e+00
  br i1 %4, label %5, label %8

5:                                                ; preds = %2
  %6 = bitcast %struct.SkDCubic* %3 to <2 x double>*
  %7 = load <2 x double>, <2 x double>* %6, align 8
  br label %50

8:                                                ; preds = %2
  %9 = fcmp oeq double %1, 1.000000e+00
  br i1 %9, label %10, label %14

10:                                               ; preds = %8
  %11 = getelementptr inbounds %class.SkTCubic, %class.SkTCubic* %0, i64 0, i32 1, i32 0, i64 3, i32 0
  %12 = bitcast double* %11 to <2 x double>*
  %13 = load <2 x double>, <2 x double>* %12, align 8
  br label %50

14:                                               ; preds = %8
  %15 = fsub double 1.000000e+00, %1
  %16 = fmul double %15, %15
  %17 = fmul double %15, %16
  %18 = fmul double %16, 3.000000e+00
  %19 = fmul double %18, %1
  %20 = fmul double %1, %1
  %21 = fmul double %15, 3.000000e+00
  %22 = fmul double %20, %21
  %23 = fmul double %20, %1
  %24 = getelementptr inbounds %class.SkTCubic, %class.SkTCubic* %0, i64 0, i32 1, i32 0, i64 1, i32 0
  %25 = getelementptr inbounds %class.SkTCubic, %class.SkTCubic* %0, i64 0, i32 1, i32 0, i64 2, i32 0
  %26 = getelementptr inbounds %class.SkTCubic, %class.SkTCubic* %0, i64 0, i32 1, i32 0, i64 3, i32 0
  %27 = bitcast %struct.SkDCubic* %3 to <2 x double>*
  %28 = load <2 x double>, <2 x double>* %27, align 8
  %29 = insertelement <2 x double> undef, double %17, i32 0
  %30 = shufflevector <2 x double> %29, <2 x double> undef, <2 x i32> zeroinitializer
  %31 = fmul <2 x double> %30, %28
  %32 = bitcast double* %24 to <2 x double>*
  %33 = load <2 x double>, <2 x double>* %32, align 8
  %34 = insertelement <2 x double> undef, double %19, i32 0
  %35 = shufflevector <2 x double> %34, <2 x double> undef, <2 x i32> zeroinitializer
  %36 = fmul <2 x double> %35, %33
  %37 = fadd <2 x double> %31, %36
  %38 = bitcast double* %25 to <2 x double>*
  %39 = load <2 x double>, <2 x double>* %38, align 8
  %40 = insertelement <2 x double> undef, double %22, i32 0
  %41 = shufflevector <2 x double> %40, <2 x double> undef, <2 x i32> zeroinitializer
  %42 = fmul <2 x double> %41, %39
  %43 = fadd <2 x double> %37, %42
  %44 = bitcast double* %26 to <2 x double>*
  %45 = load <2 x double>, <2 x double>* %44, align 8
  %46 = insertelement <2 x double> undef, double %23, i32 0
  %47 = shufflevector <2 x double> %46, <2 x double> undef, <2 x i32> zeroinitializer
  %48 = fmul <2 x double> %47, %45
  %49 = fadd <2 x double> %43, %48
  br label %50

50:                                               ; preds = %5, %10, %14
  %51 = phi <2 x double> [ %7, %5 ], [ %13, %10 ], [ %49, %14 ]
  %52 = extractelement <2 x double> %51, i32 0
  %53 = insertvalue { double, double } undef, double %52, 0
  %54 = extractelement <2 x double> %51, i32 1
  %55 = insertvalue { double, double } %53, double %54, 1
  ret { double, double } %55
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNK8SkTCubic9subDivideEddP8SkTCurve(%class.SkTCubic*, double, double, %class.SkTCurve*) unnamed_addr #4 comdat align 2 {
  %5 = alloca %struct.SkDCubic, align 8
  %6 = bitcast %struct.SkDCubic* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 64, i8* nonnull %6) #12
  %7 = getelementptr inbounds %class.SkTCubic, %class.SkTCubic* %0, i64 0, i32 1
  call void @_ZNK8SkDCubic9subDivideEdd(%struct.SkDCubic* nonnull sret %5, %struct.SkDCubic* %7, double %1, double %2)
  %8 = getelementptr inbounds %class.SkTCurve, %class.SkTCurve* %3, i64 1
  %9 = bitcast %class.SkTCurve* %8 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %9, i8* nonnull align 8 %6, i64 64, i1 false)
  call void @llvm.lifetime.end.p0i8(i64 64, i8* nonnull %6) #12
  ret void
}

declare zeroext i1 @_Z16RoughlyEqualUlpsff(float, float) local_unnamed_addr #5

declare zeroext i1 @_Z16AlmostBequalUlpsff(float, float) local_unnamed_addr #5

declare void @_ZN7SkDRect9setBoundsERK8SkDCubicS2_dd(%struct.SkDRect*, %struct.SkDCubic* dereferenceable(64), %struct.SkDCubic* dereferenceable(64), double, double) local_unnamed_addr #5

; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(i8*) local_unnamed_addr #10

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZNK8SkDPoint18approximatelyEqualERKS_(%struct.SkDPoint*, %struct.SkDPoint* dereferenceable(16)) local_unnamed_addr #4 comdat align 2 {
  %3 = getelementptr inbounds %struct.SkDPoint, %struct.SkDPoint* %0, i64 0, i32 0
  %4 = load double, double* %3, align 8
  %5 = getelementptr inbounds %struct.SkDPoint, %struct.SkDPoint* %1, i64 0, i32 0
  %6 = load double, double* %5, align 8
  %7 = fsub double %4, %6
  %8 = tail call double @llvm.fabs.f64(double %7) #12
  %9 = fcmp olt double %8, 0x3E80000000000000
  br i1 %9, label %10, label %18

10:                                               ; preds = %2
  %11 = getelementptr inbounds %struct.SkDPoint, %struct.SkDPoint* %0, i64 0, i32 1
  %12 = load double, double* %11, align 8
  %13 = getelementptr inbounds %struct.SkDPoint, %struct.SkDPoint* %1, i64 0, i32 1
  %14 = load double, double* %13, align 8
  %15 = fsub double %12, %14
  %16 = tail call double @llvm.fabs.f64(double %15) #12
  %17 = fcmp olt double %16, 0x3E80000000000000
  br i1 %17, label %68, label %18

18:                                               ; preds = %10, %2
  %19 = fptrunc double %4 to float
  %20 = fptrunc double %6 to float
  %21 = tail call zeroext i1 @_Z16RoughlyEqualUlpsff(float %19, float %20) #12
  br i1 %21, label %22, label %68

22:                                               ; preds = %18
  %23 = getelementptr inbounds %struct.SkDPoint, %struct.SkDPoint* %0, i64 0, i32 1
  %24 = load double, double* %23, align 8
  %25 = getelementptr inbounds %struct.SkDPoint, %struct.SkDPoint* %1, i64 0, i32 1
  %26 = load double, double* %25, align 8
  %27 = fptrunc double %24 to float
  %28 = fptrunc double %26 to float
  %29 = tail call zeroext i1 @_Z16RoughlyEqualUlpsff(float %27, float %28) #12
  br i1 %29, label %30, label %68

30:                                               ; preds = %22
  %31 = load double, double* %3, align 8
  %32 = load double, double* %5, align 8
  %33 = fsub double %31, %32
  %34 = load double, double* %23, align 8
  %35 = load double, double* %25, align 8
  %36 = fsub double %34, %35
  %37 = fmul double %33, %33
  %38 = fmul double %36, %36
  %39 = fadd double %37, %38
  %40 = tail call double @sqrt(double %39) #12
  %41 = load double, double* %5, align 8
  %42 = load double, double* %3, align 8
  %43 = fcmp olt double %41, %42
  %44 = load double, double* %23, align 8
  %45 = select i1 %43, double %41, double %42
  %46 = fcmp olt double %44, %45
  %47 = load double, double* %25, align 8
  %48 = select i1 %46, double %44, double %45
  %49 = fcmp olt double %47, %48
  %50 = select i1 %49, double %47, double %48
  %51 = fcmp olt double %42, %41
  %52 = load double, double* %5, align 8
  %53 = load double, double* %3, align 8
  %54 = select i1 %51, double %52, double %53
  %55 = fcmp olt double %54, %44
  %56 = load double, double* %23, align 8
  %57 = select i1 %55, double %56, double %54
  %58 = fcmp olt double %57, %47
  %59 = load double, double* %25, align 8
  %60 = select i1 %58, double %59, double %57
  %61 = fsub double -0.000000e+00, %50
  %62 = fcmp olt double %60, %61
  %63 = select i1 %62, double %61, double %60
  %64 = fadd double %40, %63
  %65 = fptrunc double %63 to float
  %66 = fptrunc double %64 to float
  %67 = tail call zeroext i1 @_Z16AlmostPequalUlpsff(float %65, float %66) #12
  br label %68

68:                                               ; preds = %18, %22, %10, %30
  %69 = phi i1 [ %67, %30 ], [ true, %10 ], [ false, %22 ], [ false, %18 ]
  ret i1 %69
}

declare zeroext i1 @_Z16AlmostPequalUlpsff(float, float) local_unnamed_addr #5

declare i8* @_ZN12SkArenaAlloc21allocObjectWithFooterEjj(%class.SkArenaAlloc*, i32, i32) local_unnamed_addr #5

declare void @_ZN12SkArenaAlloc13installFooterEPFPcS0_Ej(%class.SkArenaAlloc*, i8* (i8*)*, i32) local_unnamed_addr #5

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden i8* @_ZZN12SkArenaAlloc4makeIZNS_4makeI8SkTCubicJEEEPT_DpOT0_EUlPvE_EEDTclfp_LDnEEEOS3_ENUlPcE_8__invokeESC_(i8*) #11 comdat align 2 {
  %2 = getelementptr inbounds i8, i8* %0, i64 -81
  %3 = bitcast i8* %2 to %class.SkTCubic*
  %4 = bitcast i8* %2 to void (%class.SkTCubic*)***
  %5 = load void (%class.SkTCubic*)**, void (%class.SkTCubic*)*** %4, align 8
  %6 = load void (%class.SkTCubic*)*, void (%class.SkTCubic*)** %5, align 8
  tail call void %6(%class.SkTCubic* %3) #12
  ret i8* %2
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN8SkTCurveD2Ev(%class.SkTCurve*) unnamed_addr #4 comdat align 2 {
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_Z12SkTIntroSortIdZ8SkTQSortIdEvPT_S2_EUlRKdS4_E_EviS2_iRKT0_(i32, double*, i32, %class.anon.2* dereferenceable(1)) local_unnamed_addr #4 comdat {
  %5 = icmp slt i32 %2, 33
  br i1 %5, label %6, label %36

6:                                                ; preds = %94, %4
  %7 = phi i32 [ %2, %4 ], [ %107, %94 ]
  %8 = phi double* [ %1, %4 ], [ %106, %94 ]
  %9 = sext i32 %7 to i64
  %10 = add nsw i64 %9, -1
  %11 = getelementptr inbounds double, double* %8, i64 %10
  %12 = icmp slt i32 %7, 2
  br i1 %12, label %109, label %13

13:                                               ; preds = %6
  %14 = getelementptr inbounds double, double* %8, i64 1
  br label %15

15:                                               ; preds = %33, %13
  %16 = phi double* [ %34, %33 ], [ %14, %13 ]
  %17 = phi double* [ %16, %33 ], [ %8, %13 ]
  %18 = load double, double* %16, align 8
  %19 = load double, double* %17, align 8
  %20 = fcmp olt double %18, %19
  br i1 %20, label %21, label %33

21:                                               ; preds = %15, %28
  %22 = phi double* [ %23, %28 ], [ %16, %15 ]
  %23 = getelementptr inbounds double, double* %22, i64 -1
  %24 = bitcast double* %23 to i64*
  %25 = load i64, i64* %24, align 8
  %26 = bitcast double* %22 to i64*
  store i64 %25, i64* %26, align 8
  %27 = icmp ugt double* %23, %8
  br i1 %27, label %28, label %32

28:                                               ; preds = %21
  %29 = getelementptr inbounds double, double* %22, i64 -2
  %30 = load double, double* %29, align 8
  %31 = fcmp ogt double %30, %18
  br i1 %31, label %21, label %32

32:                                               ; preds = %28, %21
  store double %18, double* %23, align 8
  br label %33

33:                                               ; preds = %32, %15
  %34 = getelementptr inbounds double, double* %16, i64 1
  %35 = icmp ugt double* %34, %11
  br i1 %35, label %109, label %15

36:                                               ; preds = %4, %94
  %37 = phi i32 [ %44, %94 ], [ %0, %4 ]
  %38 = phi double* [ %106, %94 ], [ %1, %4 ]
  %39 = phi i32 [ %107, %94 ], [ %2, %4 ]
  %40 = icmp eq i32 %37, 0
  br i1 %40, label %41, label %43

41:                                               ; preds = %36
  %42 = sext i32 %39 to i64
  tail call void @_Z11SkTHeapSortIdZ8SkTQSortIdEvPT_S2_EUlRKdS4_E_EvS2_mRKT0_(double* %38, i64 %42, %class.anon.2* dereferenceable(1) %3)
  br label %109

43:                                               ; preds = %36
  %44 = add nsw i32 %37, -1
  %45 = add nsw i32 %39, -1
  %46 = ashr i32 %45, 1
  %47 = sext i32 %46 to i64
  %48 = getelementptr inbounds double, double* %38, i64 %47
  %49 = sext i32 %39 to i64
  %50 = getelementptr inbounds double, double* %38, i64 -1
  %51 = getelementptr inbounds double, double* %50, i64 %49
  %52 = bitcast double* %48 to i64*
  %53 = load i64, i64* %52, align 8
  %54 = bitcast double* %51 to i64*
  %55 = load i64, i64* %54, align 8
  store i64 %55, i64* %52, align 8
  store i64 %53, i64* %54, align 8
  %56 = icmp ugt double* %51, %38
  br i1 %56, label %57, label %94

57:                                               ; preds = %43
  %58 = bitcast i64 %53 to double
  %59 = shl nsw i64 %49, 3
  %60 = add nsw i64 %59, -9
  %61 = and i64 %60, 8
  %62 = icmp eq i64 %61, 0
  br i1 %62, label %63, label %71

63:                                               ; preds = %57
  %64 = load double, double* %38, align 8
  %65 = fcmp olt double %64, %58
  br i1 %65, label %66, label %68

66:                                               ; preds = %63
  store double %64, double* %38, align 8
  %67 = getelementptr inbounds double, double* %38, i64 1
  br label %68

68:                                               ; preds = %66, %63
  %69 = phi double* [ %67, %66 ], [ %38, %63 ]
  %70 = getelementptr inbounds double, double* %38, i64 1
  br label %71

71:                                               ; preds = %68, %57
  %72 = phi double* [ %69, %68 ], [ %38, %57 ]
  %73 = phi double* [ %70, %68 ], [ %38, %57 ]
  %74 = phi double* [ %69, %68 ], [ undef, %57 ]
  %75 = icmp eq i64 %60, 7
  br i1 %75, label %91, label %76

76:                                               ; preds = %71, %115
  %77 = phi double* [ %116, %115 ], [ %72, %71 ]
  %78 = phi double* [ %117, %115 ], [ %73, %71 ]
  %79 = load double, double* %78, align 8
  %80 = fcmp olt double %79, %58
  br i1 %80, label %81, label %86

81:                                               ; preds = %76
  %82 = bitcast double* %78 to i64*
  %83 = bitcast double* %77 to i64*
  %84 = load i64, i64* %83, align 8
  store i64 %84, i64* %82, align 8
  store double %79, double* %77, align 8
  %85 = getelementptr inbounds double, double* %77, i64 1
  br label %86

86:                                               ; preds = %81, %76
  %87 = phi double* [ %85, %81 ], [ %77, %76 ]
  %88 = getelementptr inbounds double, double* %78, i64 1
  %89 = load double, double* %88, align 8
  %90 = fcmp olt double %89, %58
  br i1 %90, label %110, label %115

91:                                               ; preds = %115, %71
  %92 = phi double* [ %74, %71 ], [ %116, %115 ]
  %93 = load i64, i64* %54, align 8
  br label %94

94:                                               ; preds = %43, %91
  %95 = phi i64 [ %53, %43 ], [ %93, %91 ]
  %96 = phi double* [ %38, %43 ], [ %92, %91 ]
  %97 = bitcast double* %96 to i64*
  %98 = load i64, i64* %97, align 8
  store i64 %95, i64* %97, align 8
  store i64 %98, i64* %54, align 8
  %99 = ptrtoint double* %96 to i64
  %100 = ptrtoint double* %38 to i64
  %101 = sub i64 %99, %100
  %102 = lshr exact i64 %101, 3
  %103 = trunc i64 %102 to i32
  tail call void @_Z12SkTIntroSortIdZ8SkTQSortIdEvPT_S2_EUlRKdS4_E_EviS2_iRKT0_(i32 %44, double* %38, i32 %103, %class.anon.2* dereferenceable(1) %3)
  %104 = add nsw i32 %103, 1
  %105 = sext i32 %104 to i64
  %106 = getelementptr inbounds double, double* %38, i64 %105
  %107 = sub nsw i32 %39, %104
  %108 = icmp slt i32 %107, 33
  br i1 %108, label %6, label %36

109:                                              ; preds = %33, %6, %41
  ret void

110:                                              ; preds = %86
  %111 = bitcast double* %88 to i64*
  %112 = bitcast double* %87 to i64*
  %113 = load i64, i64* %112, align 8
  store i64 %113, i64* %111, align 8
  store double %89, double* %87, align 8
  %114 = getelementptr inbounds double, double* %87, i64 1
  br label %115

115:                                              ; preds = %110, %86
  %116 = phi double* [ %114, %110 ], [ %87, %86 ]
  %117 = getelementptr inbounds double, double* %78, i64 2
  %118 = icmp ult double* %117, %51
  br i1 %118, label %76, label %91
}

; Function Attrs: nounwind readnone speculatable
declare i32 @llvm.ctlz.i32(i32, i1 immarg) #8

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_Z11SkTHeapSortIdZ8SkTQSortIdEvPT_S2_EUlRKdS4_E_EvS2_mRKT0_(double*, i64, %class.anon.2* dereferenceable(1)) local_unnamed_addr #4 comdat {
  %4 = lshr i64 %1, 1
  %5 = icmp eq i64 %4, 0
  br i1 %5, label %6, label %11

6:                                                ; preds = %45, %3
  %7 = add i64 %1, -1
  %8 = icmp eq i64 %7, 0
  br i1 %8, label %50, label %9

9:                                                ; preds = %6
  %10 = bitcast double* %0 to i64*
  br label %51

11:                                               ; preds = %3, %45
  %12 = phi i64 [ %13, %45 ], [ %4, %3 ]
  %13 = add nsw i64 %12, -1
  %14 = getelementptr inbounds double, double* %0, i64 %13
  %15 = bitcast double* %14 to i64*
  %16 = load i64, i64* %15, align 8
  %17 = shl i64 %12, 1
  %18 = icmp ugt i64 %17, %1
  br i1 %18, label %45, label %19

19:                                               ; preds = %11
  %20 = bitcast i64 %16 to double
  br label %21

21:                                               ; preds = %41, %19
  %22 = phi i64 [ %17, %19 ], [ %43, %41 ]
  %23 = phi i64 [ %12, %19 ], [ %35, %41 ]
  %24 = icmp ult i64 %22, %1
  br i1 %24, label %25, label %34

25:                                               ; preds = %21
  %26 = add i64 %22, -1
  %27 = getelementptr inbounds double, double* %0, i64 %26
  %28 = getelementptr inbounds double, double* %0, i64 %22
  %29 = load double, double* %27, align 8
  %30 = load double, double* %28, align 8
  %31 = fcmp olt double %29, %30
  %32 = zext i1 %31 to i64
  %33 = or i64 %22, %32
  br label %34

34:                                               ; preds = %25, %21
  %35 = phi i64 [ %22, %21 ], [ %33, %25 ]
  %36 = add i64 %35, -1
  %37 = getelementptr inbounds double, double* %0, i64 %36
  %38 = load double, double* %37, align 8
  %39 = fcmp ogt double %38, %20
  %40 = add i64 %23, -1
  br i1 %39, label %41, label %45

41:                                               ; preds = %34
  %42 = getelementptr inbounds double, double* %0, i64 %40
  store double %38, double* %42, align 8
  %43 = shl i64 %35, 1
  %44 = icmp ugt i64 %43, %1
  br i1 %44, label %45, label %21

45:                                               ; preds = %34, %41, %11
  %46 = phi i64 [ %13, %11 ], [ %40, %34 ], [ %36, %41 ]
  %47 = getelementptr inbounds double, double* %0, i64 %46
  %48 = bitcast double* %47 to i64*
  store i64 %16, i64* %48, align 8
  %49 = icmp eq i64 %13, 0
  br i1 %49, label %6, label %11

50:                                               ; preds = %102, %59, %6
  ret void

51:                                               ; preds = %9, %102
  %52 = phi i64 [ %7, %9 ], [ %107, %102 ]
  %53 = getelementptr inbounds double, double* %0, i64 %52
  %54 = load i64, i64* %10, align 8
  %55 = bitcast double* %53 to i64*
  %56 = load i64, i64* %55, align 8
  store i64 %56, i64* %10, align 8
  store i64 %54, i64* %55, align 8
  %57 = load i64, i64* %10, align 8
  %58 = icmp eq i64 %52, 1
  br i1 %58, label %59, label %66

59:                                               ; preds = %51
  %60 = bitcast double* %0 to i64*
  store i64 %57, i64* %60, align 8
  br label %50

61:                                               ; preds = %79
  %62 = lshr i64 %80, 1
  %63 = icmp eq i64 %62, 0
  br i1 %63, label %102, label %64

64:                                               ; preds = %61
  %65 = bitcast i64 %57 to double
  br label %90

66:                                               ; preds = %51, %79
  %67 = phi i64 [ %88, %79 ], [ 2, %51 ]
  %68 = phi i64 [ %80, %79 ], [ 1, %51 ]
  %69 = icmp ult i64 %67, %52
  br i1 %69, label %70, label %79

70:                                               ; preds = %66
  %71 = add i64 %67, -1
  %72 = getelementptr inbounds double, double* %0, i64 %71
  %73 = getelementptr inbounds double, double* %0, i64 %67
  %74 = load double, double* %72, align 8
  %75 = load double, double* %73, align 8
  %76 = fcmp olt double %74, %75
  %77 = zext i1 %76 to i64
  %78 = or i64 %67, %77
  br label %79

79:                                               ; preds = %70, %66
  %80 = phi i64 [ %67, %66 ], [ %78, %70 ]
  %81 = add i64 %80, -1
  %82 = getelementptr inbounds double, double* %0, i64 %81
  %83 = bitcast double* %82 to i64*
  %84 = load i64, i64* %83, align 8
  %85 = add i64 %68, -1
  %86 = getelementptr inbounds double, double* %0, i64 %85
  %87 = bitcast double* %86 to i64*
  store i64 %84, i64* %87, align 8
  %88 = shl i64 %80, 1
  %89 = icmp ugt i64 %88, %52
  br i1 %89, label %61, label %66

90:                                               ; preds = %97, %64
  %91 = phi i64 [ %62, %64 ], [ %100, %97 ]
  %92 = phi i64 [ %80, %64 ], [ %91, %97 ]
  %93 = add nsw i64 %91, -1
  %94 = getelementptr inbounds double, double* %0, i64 %93
  %95 = load double, double* %94, align 8
  %96 = fcmp olt double %95, %65
  br i1 %96, label %97, label %102

97:                                               ; preds = %90
  %98 = add i64 %92, -1
  %99 = getelementptr inbounds double, double* %0, i64 %98
  store double %95, double* %99, align 8
  %100 = lshr i64 %91, 1
  %101 = icmp eq i64 %100, 0
  br i1 %101, label %102, label %90

102:                                              ; preds = %90, %97, %61
  %103 = phi i64 [ %80, %61 ], [ %92, %90 ], [ %91, %97 ]
  %104 = add i64 %103, -1
  %105 = getelementptr inbounds double, double* %0, i64 %104
  %106 = bitcast double* %105 to i64*
  store i64 %57, i64* %106, align 8
  %107 = add i64 %52, -1
  %108 = icmp eq i64 %107, 0
  br i1 %108, label %50, label %51
}

attributes #0 = { nofree norecurse nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind readonly ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind }
attributes #3 = { norecurse nounwind readonly ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nofree norecurse nounwind ssp uwtable writeonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #8 = { nounwind readnone speculatable }
attributes #9 = { nofree nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #10 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #11 = { inlinehint nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #12 = { nounwind }
attributes #13 = { builtin nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{i32 0, i32 33}
