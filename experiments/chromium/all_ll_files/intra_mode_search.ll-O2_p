; ModuleID = '../../third_party/libaom/source/libaom/av1/encoder/intra_mode_search.c'
source_filename = "../../third_party/libaom/source/libaom/av1/encoder/intra_mode_search.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"
module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%struct.NN_CONFIG = type { i32, i32, i32, [10 x i32], [11 x float*], [11 x float*] }
%struct.AV1_COMP = type { %struct.AV1_PRIMARY*, [8 x i8], %struct.EncQuantDequantParams, %struct.ThreadData, %struct.FRAME_COUNTS, %struct.MBMIExtFrameBufferInfo, %struct.CB_COEFF_BUFFER*, %struct.CoeffBufferPool, %struct.AV1Common, %struct.AV1EncoderConfig, i32, [8 x i8], %struct.yv12_buffer_config*, %struct.yv12_buffer_config*, %struct.yv12_buffer_config*, %struct.yv12_buffer_config, %struct.yv12_buffer_config*, %struct.yv12_buffer_config, %struct.yv12_buffer_config*, i32, %struct.TemporalFilterCtx, i32, %struct.ForceIntegerMVInfo, [7 x %struct.RefCntBuffer*], %struct.RefCntBuffer*, %struct.RefreshFrameFlagsInfo, [8 x i32], %struct.ExternalFlags, %struct.yv12_buffer_config, %struct.yv12_buffer_config, i64, %struct.RD_OPT, %struct.CODING_CONTEXT, %struct.GlobalMotionInfo, %struct.WinnerModeParams, %struct.TimeStamps, %struct.RATE_CONTROL, double, i32, i32, %struct.SPEED_FEATURES, %struct.MotionVectorSearchParams, i32, %struct.EncSegmentationInfo, %struct.CYCLIC_REFRESH*, %struct.ActiveMap, i8, %struct.RefBufferStack, i32, i32, %struct.FRAME_INFO, %struct.FRAME_INDEX_SET, %struct.InitialDimensions, i32, %struct.ResizePendingParams, %struct.TileDataEnc*, i32, %struct.TokenInfo, i32, %struct.VarBasedPartitionInfo, %struct.FrameProbInfo, %struct.MultiThreadInfo, i32, i32, i32, %struct.AV1LrStruct, %struct.aom_film_grain_table_t*, %struct.aom_denoise_and_model_t*, %struct.InterpSearchFlags, i32, i32, i32, i32, %struct.RefFrameDistanceInfo, double*, %struct.SVC, i8, %struct.MV_STATS, i8, i32, i32, %struct.FirstPassData, %struct.noise_estimate, %struct.av1_denoiser, i8*, i8, i32, i64, [8 x i8] }
%struct.AV1_PRIMARY = type { %struct.AV1_COMP*, %struct.AV1_COMP*, %struct.lookahead_ctx*, i32, %struct.aom_codec_pkt_list*, i32, %struct.GF_GROUP, %struct.GF_STATE, i32, %struct.AV1LevelParams, i32, i32, %struct.TWO_PASS, %struct.PRIMARY_RATE_CONTROL, %struct.yv12_buffer_config, %struct.SequenceHeader, i32, i8, i32, i32, %struct.aom_internal_error_info, [22 x %struct.aom_variance_vtable], double*, double*, %struct.TplParams }
%struct.lookahead_ctx = type { i32, i32, [2 x %struct.read_ctx], %struct.lookahead_entry*, i32, i8 }
%struct.read_ctx = type { i32, i32, i32, i32 }
%struct.lookahead_entry = type { %struct.yv12_buffer_config, i64, i64, i32, i64 }
%struct.aom_codec_pkt_list = type { i32, i32, [1 x %struct.aom_codec_cx_pkt] }
%struct.aom_codec_cx_pkt = type { i32, %union.anon.10 }
%union.anon.10 = type { %struct.aom_psnr_pkt }
%struct.aom_psnr_pkt = type { [4 x i32], [4 x i64], [4 x double], [4 x i32], [4 x i64], [4 x double] }
%struct.GF_GROUP = type { [250 x i8], [250 x i8], [250 x i8], [250 x i32], [250 x i32], i32, i32, [250 x i8], [250 x i32], [250 x i8], [250 x i8], i32, i32 }
%struct.GF_STATE = type { i32 }
%struct.AV1LevelParams = type { [32 x i8], i32, [32 x %struct.AV1LevelInfo*] }
%struct.AV1LevelInfo = type { %struct.AV1LevelStats, %struct.AV1LevelSpec, %struct.FrameWindowBuffer, [24 x %struct.DECODER_MODEL] }
%struct.AV1LevelStats = type { i32, i32, i32, i32, i32, i32, i32, i32, double, double, double }
%struct.AV1LevelSpec = type { i8, i32, i32, i32, i32, i32, i32, i32, i64, i64, double, double, double, double }
%struct.FrameWindowBuffer = type { [256 x %struct.FrameRecord], i32, i32 }
%struct.FrameRecord = type { i64, i64, i64, i32, i32, i32, i32, i32 }
%struct.DECODER_MODEL = type { i8, i8, i8, i8, i32, i32, i32, i32, i64, double, double, double, double, i32, i32, i32, [8 x i32], [10 x %struct.FRAME_BUFFER], %struct.DFG_INTERVAL_QUEUE, double, double, i64, double, double, i32, i32, double, double }
%struct.FRAME_BUFFER = type { i32, i32, i32, i8, double }
%struct.DFG_INTERVAL_QUEUE = type { i32, i32, double, [64 x %struct.DFG_INTERVAL] }
%struct.DFG_INTERVAL = type { double, double, double }
%struct.TWO_PASS = type { i32, [36 x %struct.FIRSTPASS_STATS*], i32, %struct.FIRSTPASS_STATS*, %struct.STATS_BUFFER_CTX*, i32, i64, double, double, double, double, double, i8, i64, i64, double, i32, i32, i32, i32, i32, i32, i32, i32 }
%struct.FIRSTPASS_STATS = type { double, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double, i64, double, double }
%struct.STATS_BUFFER_CTX = type { %struct.FIRSTPASS_STATS*, %struct.FIRSTPASS_STATS*, %struct.FIRSTPASS_STATS*, %struct.FIRSTPASS_STATS*, %struct.FIRSTPASS_STATS* }
%struct.PRIMARY_RATE_CONTROL = type { i64, i32, i32, [15 x i32], i32, i32, [150 x %struct.regions], i32, i32, i32, i32, i32, i32, i64, i64, i64, i32, float, i32, i32, i32, i32, i32, i32, i32, i32 }
%struct.regions = type { i32, i32, double, double, double, double, double, i32 }
%struct.SequenceHeader = type { i32, i32, i32, i32, i8, i32, i32, i8, i32, i32, %struct.OrderHintInfo, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i32, i8, i8, i32, i32, i32, i32, i32, i32, i32, i8, i8, i32, [32 x i32], i32, %struct.aom_timing, i8, %struct.aom_dec_model_info, i8, [32 x i8], [32 x i8], [33 x %struct.aom_dec_model_op_parameters] }
%struct.OrderHintInfo = type { i32, i32, i32, i32 }
%struct.aom_timing = type { i32, i32, i32, i32 }
%struct.aom_dec_model_info = type { i32, i32, i32, i32 }
%struct.aom_dec_model_op_parameters = type { i32, i64, i64, i32, i32, i32, i32, i32 }
%struct.aom_internal_error_info = type { i32, i32, [200 x i8], i32, [1 x %struct.__jmp_buf_tag] }
%struct.__jmp_buf_tag = type { [8 x i64], i32, %struct.__sigset_t }
%struct.__sigset_t = type { [16 x i64] }
%struct.aom_variance_vtable = type { i32 (i8*, i32, i8*, i32)*, i32 (i8*, i32, i8*, i32)*, i32 (i8*, i32, i8*, i32, i8*)*, i32 (i8*, i32, i8*, i32, i32*)*, i32 (i8*, i32, i32, i32, i8*, i32, i32*)*, i32 (i8*, i32, i32, i32, i8*, i32, i32*, i8*)*, void (i8*, i32, i8**, i32, i32*)*, void (i8*, i32, i8**, i32, i32*)*, i32 (i8*, i32, i8*, i32, i8*, i8*, i32, i32)*, i32 (i8*, i32, i32, i32, i8*, i32, i8*, i8*, i32, i32, i32*)*, i32 (i8*, i32, i32*, i32*)*, i32 (i8*, i32, i32*, i32*, i32*)*, i32 (i8*, i32, i32, i32, i32*, i32*, i32*)*, i32 (i8*, i32, i8*, i32, i8*, %struct.dist_wtd_comp_params*)*, i32 (i8*, i32, i32, i32, i8*, i32, i32*, i8*, %struct.dist_wtd_comp_params*)* }
%struct.dist_wtd_comp_params = type { i32, i32, i32 }
%struct.TplParams = type { i8, i8, [79 x %struct.TplDepFrame], [35 x %struct.TplDepStats*], [35 x %struct.yv12_buffer_config], %struct.TplDepFrame*, %struct.scale_factors, i32, [7 x %struct.yv12_buffer_config*], [7 x %struct.yv12_buffer_config*], %struct.AV1TplRowMultiThreadSync, i32 }
%struct.TplDepFrame = type { i8, %struct.TplDepStats*, %struct.yv12_buffer_config*, %struct.yv12_buffer_config*, [8 x i32], i32, i32, i32, i32, i32, i32, i32, [256 x double], [256 x double], i32, i32 }
%struct.TplDepStats = type { i64, i64, i64, i64, [2 x i64], i64, i64, [2 x i64], i64, i64, [7 x %union.int_mv], [2 x i32], [7 x i64] }
%union.int_mv = type { i32 }
%struct.scale_factors = type { i32, i32, i32, i32, i32 (i32, %struct.scale_factors*)*, i32 (i32, %struct.scale_factors*)* }
%struct.AV1TplRowMultiThreadSync = type { %union.pthread_mutex_t*, %union.pthread_cond_t*, i32*, i32, i32, i32 }
%union.pthread_mutex_t = type { %struct.__pthread_mutex_s }
%struct.__pthread_mutex_s = type { i32, i32, i32, i32, i32, i16, i16, %struct.__pthread_internal_list }
%struct.__pthread_internal_list = type { %struct.__pthread_internal_list*, %struct.__pthread_internal_list* }
%union.pthread_cond_t = type { %struct.__pthread_cond_s }
%struct.__pthread_cond_s = type { %union.anon.12, %union.anon.14, [2 x i32], [2 x i32], i32, i32, [2 x i32] }
%union.anon.12 = type { i64 }
%union.anon.14 = type { i64 }
%struct.EncQuantDequantParams = type { %struct.QUANTS, %struct.Dequants }
%struct.QUANTS = type { [256 x [8 x i16]], [256 x [8 x i16]], [256 x [8 x i16]], [256 x [8 x i16]], [256 x [8 x i16]], [256 x [8 x i16]], [256 x [8 x i16]], [256 x [8 x i16]], [256 x [8 x i16]], [256 x [8 x i16]], [256 x [8 x i16]], [256 x [8 x i16]], [256 x [8 x i16]], [256 x [8 x i16]], [256 x [8 x i16]], [256 x [8 x i16]], [256 x [8 x i16]], [256 x [8 x i16]] }
%struct.Dequants = type { [256 x [8 x i16]], [256 x [8 x i16]], [256 x [8 x i16]] }
%struct.ThreadData = type { %struct.macroblock, %struct.RD_COUNTS, %struct.FRAME_COUNTS*, %struct.PC_TREE_SHARED_BUFFERS, %struct.SIMPLE_MOTION_DATA_TREE*, %struct.SIMPLE_MOTION_DATA_TREE*, %struct.inter_modes_info*, [2 x [2 x i32*]], %struct.OBMCBuffer, %struct.PALETTE_BUFFER*, %struct.CompoundTypeRdBuffers, i16*, [2 x i8*], i32, i32, i32, i32, [4 x i32], %struct.frame_contexts*, %struct.VP64x64*, i32, %struct.PICK_MODE_CONTEXT*, %struct.TemporalFilterData, %struct.TplTxfmStats, %struct.PixelLevelGradientInfo*, [8 x i8] }
%struct.macroblock = type { [3 x %struct.macroblock_plane], [8 x i8], %struct.macroblockd, %struct.MB_MODE_INFO_EXT, %struct.MB_MODE_INFO_EXT_FRAME*, %struct.frame_contexts*, %struct.frame_contexts*, %struct.CB_COEFF_BUFFER*, [2 x i16], %struct.OBMCBuffer, %struct.PALETTE_BUFFER*, %struct.CompoundTypeRdBuffers, i16*, %struct.aom_internal_error_info*, [2 x i8*], i32, i32, i32, i32, i32, %struct.ModeCosts, %struct.MvCosts*, %struct.IntraBCMVCosts*, %struct.CoeffCosts, i32, i32, i32, i32, i32, i32, %struct.SuperBlockEnc, %struct.CONTENT_STATE_SB, [8 x i32], i32, [8 x i8], [8 x %struct.WARP_SAMPLE_INFO], [1024 x i32], i32, %struct.PartitionSearchInfo, i32, i32, [22 x [169 x i32]], %struct.WinnerModeStats*, i32, i8, %struct.inter_modes_info*, i8, [64 x %struct.COMP_RD_STATS], i32, i32, %struct.intrabc_hash_info, i32, %struct.MB_MODE_INFO*, %struct.PixelLevelGradientInfo*, [2 x i8], [8 x i32], %struct.FullMvLimits, %struct.TxfmSearchParams, %struct.TxfmSearchInfo, [2 x i8], i32, [8 x i32] }
%struct.macroblock_plane = type { i16*, i32*, i32*, i32*, i16*, i8*, %struct.buf_2d, i16*, i16*, i16*, i16*, i16*, i16*, i16* }
%struct.buf_2d = type { i8*, i8*, i32, i32, i32 }
%struct.macroblockd = type { i32, i32, i32, i8, [3 x %struct.macroblockd_plane], %struct.TileInfo, %struct.MB_MODE_INFO**, i8, i8, i8, i8, %struct.MB_MODE_INFO*, %struct.MB_MODE_INFO*, %struct.MB_MODE_INFO*, %struct.MB_MODE_INFO*, i8*, i32, i32, i32, i32, i32, [2 x %struct.scale_factors*], %struct.yv12_buffer_config*, [3 x i8*], [3 x [32 x i8]], i8*, [32 x i8], i8*, i8*, [32 x i8], [3 x %struct.WienerInfo], [3 x %struct.SgrprojInfo], i8, i8, [29 x [8 x %struct.candidate_mv]], [29 x [8 x i16]], i8, i8, [8 x i8], %struct.frame_contexts*, i32, [8 x i32], [8 x i32], i32, i32, %struct.aom_internal_error_info*, %struct.WarpedMotionParams*, i8, [4 x i8], [4 x i8], i8*, %struct.cfl_ctx, [2 x i16], i16*, [2 x i8*], [8 x i8] }
%struct.macroblockd_plane = type { i8, i32, i32, %struct.buf_2d, [2 x %struct.buf_2d], i8*, i8*, [8 x [2 x i16]], i8*, i8, i8, [8 x [19 x i8*]], [8 x [19 x i8*]] }
%struct.TileInfo = type { i32, i32, i32, i32, i32, i32 }
%struct.WienerInfo = type { [8 x i16], [8 x i16] }
%struct.SgrprojInfo = type { i32, [2 x i32] }
%struct.candidate_mv = type { %union.int_mv, %union.int_mv }
%struct.WarpedMotionParams = type { [8 x i32], i16, i16, i16, i16, i8, i8 }
%struct.cfl_ctx = type { [1024 x i16], [1024 x i16], [2 x i32], i32, [2 x [32 x i16]], i32, i32, i32, i32, i32, i32 }
%struct.MB_MODE_INFO_EXT = type { [29 x [4 x %struct.candidate_mv]], [29 x [4 x i16]], [29 x i8], [8 x %union.int_mv], [29 x i16] }
%struct.MB_MODE_INFO_EXT_FRAME = type { [4 x %struct.candidate_mv], [4 x i16], i8, [8 x %union.int_mv], i16, [2 x i16] }
%struct.ModeCosts = type { [20 x [10 x i32]], [4 x [13 x i32]], [13 x [13 x [13 x i32]]], [2 x [13 x [14 x i32]]], [22 x [2 x i32]], [5 x i32], [8 x [7 x i32]], [8 x [2 x [16 x i32]]], [2 x i32], [7 x [7 x i32]], [7 x [7 x i32]], [7 x [5 x [8 x i32]]], [7 x [5 x [8 x i32]]], [7 x [3 x [2 x i32]]], [2 x [2 x i32]], [3 x [2 x i32]], [6 x [2 x i32]], [2 x [2 x i32]], [6 x [2 x i32]], [3 x [2 x i32]], [3 x [6 x [2 x i32]]], [5 x [2 x i32]], [5 x [3 x i32]], [3 x [3 x [3 x i32]]], [3 x [3 x [2 x i32]]], [3 x [2 x [2 x i32]]], [4 x [2 x i32]], [8 x [8 x i32]], [22 x [2 x i32]], [22 x [16 x i32]], [4 x [2 x i32]], [22 x [2 x i32]], [4 x [4 x i32]], [6 x [2 x i32]], [6 x [2 x i32]], [22 x [3 x i32]], [22 x [2 x i32]], [16 x [3 x i32]], [3 x [2 x i32]], [4 x [3 x [5 x i32]]], [21 x [2 x i32]], [4 x [4 x [16 x i32]]], [3 x [4 x [13 x [16 x i32]]]], [3 x i32], [2 x i32], [2 x i32] }
%struct.MvCosts = type { [4 x i32], [2 x [32767 x i32]], [2 x [32767 x i32]], [2 x i32*], [2 x i32*], i32** }
%struct.IntraBCMVCosts = type { [4 x i32], [2 x [32767 x i32]], [2 x i32*] }
%struct.CoeffCosts = type { [5 x [2 x %struct.LV_MAP_COEFF_COST]], [7 x [2 x %struct.LV_MAP_EOB_COST]] }
%struct.LV_MAP_COEFF_COST = type { [13 x [2 x i32]], [4 x [3 x i32]], [42 x [8 x i32]], [9 x [2 x i32]], [3 x [2 x i32]], [21 x [26 x i32]] }
%struct.LV_MAP_EOB_COST = type { [2 x [11 x i32]] }
%struct.SuperBlockEnc = type { i8, i8, i32, [64 x i64], [64 x i64], [64 x [7 x %union.int_mv]], i32 }
%struct.CONTENT_STATE_SB = type { i32, i32, i32 }
%struct.WARP_SAMPLE_INFO = type { i32, [16 x i32], [16 x i32] }
%struct.PartitionSearchInfo = type { [105 x i8] }
%struct.WinnerModeStats = type { %struct.MB_MODE_INFO, %struct.RD_STATS, i64, i32, i32, [16384 x i8], i8 }
%struct.MB_MODE_INFO = type <{ i8, i8, i8, i8, i32, [2 x %union.int_mv], [2 x i8], [2 x i8], %union.int_interpfilters, i8, i8, i8, i8, %struct.WarpedMotionParams, i8, i8, [6 x i8], %struct.INTERINTER_COMPOUND_DATA, [2 x i8], %struct.FILTER_INTRA_MODE_INFO, i8, i8, %struct.PALETTE_MODE_INFO, i8, i8, [16 x i8], i8, [4 x i8], i16, [7 x i8] }>
%union.int_interpfilters = type { i32 }
%struct.INTERINTER_COMPOUND_DATA = type { i8*, i8, i8, i8, i8 }
%struct.FILTER_INTRA_MODE_INFO = type { i8, i8 }
%struct.PALETTE_MODE_INFO = type { [24 x i16], [2 x i8] }
%struct.RD_STATS = type { i32, i64, i64, i64, i32, i32 }
%struct.COMP_RD_STATS = type { [4 x i32], [4 x i64], [4 x i32], [4 x i64], [4 x i32], [2 x %union.int_mv], [2 x i8], i8, %union.int_interpfilters, i32, [2 x i32], %struct.INTERINTER_COMPOUND_DATA }
%struct.intrabc_hash_info = type { [2 x [2 x i32*]], %struct._hash_table, %struct._crc_calculator, %struct._crc_calculator, i32 }
%struct._hash_table = type { %struct.Vector** }
%struct.Vector = type { i64, i64, i64, i8* }
%struct._crc_calculator = type { i32, i32, i32, [256 x i32], i32 }
%struct.FullMvLimits = type { i32, i32, i32, i32 }
%struct.TxfmSearchParams = type { i32, i32, i32, [2 x i32], i32, i8, i32, i32, i8, i32 }
%struct.TxfmSearchInfo = type { i32, [1024 x i8], [1024 x i8], %struct.TxbRdRecords*, i32 }
%struct.TxbRdRecords = type { %struct.MB_RD_RECORD, [256 x %struct.TXB_RD_RECORD], [64 x %struct.TXB_RD_RECORD], [16 x %struct.TXB_RD_RECORD], [4 x %struct.TXB_RD_RECORD], %struct.TXB_RD_RECORD }
%struct.MB_RD_RECORD = type { [8 x %struct.MB_RD_INFO], i32, i32, %struct._CRC32C }
%struct.MB_RD_INFO = type { i8, [16 x i8], [1024 x i8], [1024 x i8], %struct.RD_STATS, i32 }
%struct._CRC32C = type { [8 x [256 x i32]] }
%struct.TXB_RD_RECORD = type { [256 x i32], [256 x %struct.TXB_RD_INFO], i32, i32 }
%struct.TXB_RD_INFO = type { i64, i64, i32, i16, i8, i16, i8, i8, i8, i8 }
%struct.RD_COUNTS = type { [3 x i64], i32, i32, [19 x [16 x i32]], [22 x [2 x i32]], [2 x i32] }
%struct.PC_TREE_SHARED_BUFFERS = type { [3 x i32*], [3 x i32*], [3 x i32*] }
%struct.SIMPLE_MOTION_DATA_TREE = type { i8, i8, [4 x %struct.SIMPLE_MOTION_DATA_TREE*], [8 x %struct.fullpel_mv], [2 x i32], [8 x i32], i32, i32 }
%struct.fullpel_mv = type { i16, i16 }
%struct.inter_modes_info = type { i32, [4 x i8], [1024 x %struct.MB_MODE_INFO], [1024 x i32], [1024 x i64], [1024 x i64], [1024 x %struct.RdIdxPair], [1024 x %struct.RD_STATS], [1024 x %struct.RD_STATS], [1024 x %struct.RD_STATS] }
%struct.RdIdxPair = type { i32, i64 }
%struct.OBMCBuffer = type { i32*, i32*, i8*, i8* }
%struct.PALETTE_BUFFER = type { [4096 x i8], [8192 x i32] }
%struct.CompoundTypeRdBuffers = type { i8*, i8*, i16*, i16*, i8* }
%struct.frame_contexts = type { [5 x [13 x [3 x i16]]], [5 x [2 x [9 x [3 x i16]]]], [2 x [3 x [3 x i16]]], [2 x [2 x [6 x i16]]], [2 x [2 x [7 x i16]]], [2 x [2 x [8 x i16]]], [2 x [2 x [9 x i16]]], [2 x [2 x [10 x i16]]], [2 x [2 x [11 x i16]]], [2 x [2 x [12 x i16]]], [5 x [2 x [4 x [4 x i16]]]], [5 x [2 x [42 x [5 x i16]]]], [5 x [2 x [21 x [5 x i16]]]], [6 x [3 x i16]], [2 x [3 x i16]], [6 x [3 x i16]], [3 x [3 x i16]], [8 x [9 x i16]], [22 x [3 x i16]], [22 x [17 x i16]], [4 x [3 x i16]], [22 x [3 x i16]], [4 x [5 x i16]], [22 x [4 x i16]], [22 x [3 x i16]], [7 x [8 x i16]], [7 x [8 x i16]], [7 x [5 x [9 x i16]]], [7 x [5 x [9 x i16]]], [7 x [3 x [3 x i16]]], [2 x [3 x i16]], [5 x [3 x i16]], [3 x [6 x [3 x i16]]], [5 x [3 x i16]], [3 x [3 x [3 x i16]]], [3 x [3 x [3 x i16]]], [3 x [2 x [3 x i16]]], [21 x [3 x i16]], [6 x [3 x i16]], [6 x [3 x i16]], [3 x [3 x i16]], [3 x [3 x i16]], [4 x [3 x i16]], %struct.nmv_context, %struct.nmv_context, [3 x i16], %struct.segmentation_probs, [22 x [3 x i16]], [6 x i16], [4 x i16], [3 x i16], [3 x i16], [4 x [14 x i16]], [2 x [13 x [15 x i16]]], [20 x [11 x i16]], [16 x [4 x i16]], [5 x [5 x [14 x i16]]], [8 x [8 x i16]], [4 x [3 x [4 x i16]]], [5 x i16], [4 x [5 x i16]], [5 x i16], [3 x [4 x [13 x [17 x i16]]]], [4 x [4 x [17 x i16]]], [9 x i16], [6 x [17 x i16]], i32 }
%struct.nmv_context = type { [5 x i16], [2 x %struct.nmv_component] }
%struct.nmv_component = type { [12 x i16], [2 x [5 x i16]], [5 x i16], [3 x i16], [3 x i16], [3 x i16], [3 x i16], [10 x [3 x i16]] }
%struct.segmentation_probs = type { [9 x i16], [3 x [3 x i16]], [3 x [9 x i16]] }
%struct.VP64x64 = type { %struct.VPVariance, [4 x %struct.VP32x32] }
%struct.VPVariance = type { %struct.VPartVar, [2 x %struct.VPartVar], [2 x %struct.VPartVar] }
%struct.VPartVar = type { i32, i32, i32, i32 }
%struct.VP32x32 = type { %struct.VPVariance, [4 x %struct.VP16x16] }
%struct.VP16x16 = type { %struct.VPVariance, [4 x %struct.VP8x8] }
%struct.VP8x8 = type { %struct.VPVariance, [4 x %struct.VP4x4] }
%struct.VP4x4 = type { %struct.VPVariance, [4 x %struct.VPartVar] }
%struct.PICK_MODE_CONTEXT = type { %struct.MB_MODE_INFO, %struct.MB_MODE_INFO_EXT_FRAME, [2 x i8*], i8*, [3 x i32*], [3 x i32*], [3 x i32*], [3 x i16*], [3 x i8*], i8*, i32, i32, i32, i32, i32, %struct.RD_STATS, i32, i64, i64, i64, i8, %union.int_mv, i8, i8, i32 }
%struct.TemporalFilterData = type { %struct.FRAME_DIFF, %struct.MB_MODE_INFO*, i32*, i16*, i8* }
%struct.FRAME_DIFF = type { i64, i64 }
%struct.TplTxfmStats = type { [256 x double], i32 }
%struct.PixelLevelGradientInfo = type { i16, i8, i8 }
%struct.FRAME_COUNTS = type { [16 x [3 x i32]] }
%struct.MBMIExtFrameBufferInfo = type { %struct.MB_MODE_INFO_EXT_FRAME*, i32, i32 }
%struct.CB_COEFF_BUFFER = type { [3 x i32*], [3 x i16*], [3 x i8*] }
%struct.CoeffBufferPool = type { i32*, i16*, i8* }
%struct.AV1Common = type { %struct.CurrentFrame, %struct.aom_internal_error_info*, i32, i32, i32, i32, i32, i32, i8, [33 x i32], i32, %struct.RefCntBuffer*, %struct.RefCntBuffer*, [8 x i32], %struct.scale_factors, [8 x %struct.scale_factors], [8 x %struct.RefCntBuffer*], i32, i32, i32, %struct.FeatureFlags, %struct.CommonModeInfoParams, %struct.CommonQuantParams, %struct.segmentation, i8*, %struct.loop_filter_info_n, %struct.loopfilter, [3 x %struct.RestorationInfo], i32*, %struct.RestorationLineBuffers*, %struct.yv12_buffer_config, %struct.CdefInfo, %struct.aom_film_grain_t, %struct.DeltaQInfo, [8 x %struct.WarpedMotionParams], %struct.SequenceHeader*, %struct.frame_contexts*, %struct.frame_contexts*, %struct.CommonTileParams, %struct.BufferPool*, %struct.CommonContexts, i32, [8 x i32], %struct.TPL_MV_REF*, i32, [8 x i32], [8 x i8], i32, i32 }
%struct.CurrentFrame = type { i8, i8, i32, i32, i32, %struct.SkipModeInfo, i32, i32 }
%struct.SkipModeInfo = type { i32, i32, i32, i32 }
%struct.FeatureFlags = type { i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i32, i32, i8 }
%struct.CommonModeInfoParams = type { i32, i32, i32, i32, i32, %struct.MB_MODE_INFO*, i32, i32, i8, %struct.MB_MODE_INFO**, i32, i32, i8*, void (%struct.CommonModeInfoParams*)*, void (%struct.CommonModeInfoParams*)*, void (%struct.CommonModeInfoParams*, i32, i32)* }
%struct.CommonQuantParams = type { i32, i32, i32, i32, i32, i32, [8 x [2 x i16]], [8 x [2 x i16]], [8 x [2 x i16]], [16 x [3 x [19 x i8*]]], [16 x [3 x [19 x i8*]]], [8 x [19 x i8*]], [8 x [19 x i8*]], [8 x [19 x i8*]], i8, i32, i32, i32 }
%struct.segmentation = type { i8, i8, i8, i8, [8 x [8 x i16]], [8 x i32], i32, i8 }
%struct.loop_filter_info_n = type { [64 x %struct.loop_filter_thresh], [3 x [8 x [2 x [8 x [2 x i8]]]]] }
%struct.loop_filter_thresh = type { [16 x i8], [16 x i8], [16 x i8] }
%struct.loopfilter = type { [2 x i32], i32, i32, i32, i8, i8, [8 x i8], [2 x i8], i32 }
%struct.RestorationInfo = type { i32, i32, i32, i32, i32, %struct.RestorationUnitInfo*, %struct.RestorationStripeBoundaries, i32 }
%struct.RestorationUnitInfo = type { i32, [12 x i8], %struct.WienerInfo, %struct.SgrprojInfo, [4 x i8] }
%struct.RestorationStripeBoundaries = type { i8*, i8*, i32, i32 }
%struct.RestorationLineBuffers = type { [3 x [392 x i16]], [3 x [392 x i16]] }
%struct.CdefInfo = type { [3 x i16*], [3 x i16*], i16*, [3 x i64], [3 x i64], i64, i32, i32, [16 x i32], [16 x i32], i32, i32, i32 }
%struct.aom_film_grain_t = type { i32, i32, [14 x [2 x i32]], i32, [10 x [2 x i32]], i32, [10 x [2 x i32]], i32, i32, i32, [24 x i32], [25 x i32], [25 x i32], i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i16 }
%struct.DeltaQInfo = type { i32, i32, i32, i32, i32 }
%struct.CommonTileParams = type { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, [65 x i32], [65 x i32], i32, i32 }
%struct.BufferPool = type { %union.pthread_mutex_t, i8*, i32 (i8*, i64, %struct.aom_codec_frame_buffer*)*, i32 (i8*, %struct.aom_codec_frame_buffer*)*, [16 x %struct.RefCntBuffer], %struct.InternalFrameBufferList }
%struct.aom_codec_frame_buffer = type { i8*, i64, i8* }
%struct.RefCntBuffer = type { i32, i32, [7 x i32], i32, [7 x i32], %struct.MV_REF*, i8*, %struct.segmentation, i32, i32, i32, i32, [8 x %struct.WarpedMotionParams], i32, i8, %struct.aom_film_grain_t, %struct.aom_codec_frame_buffer, %struct.yv12_buffer_config, i8, [4 x i32], [8 x i8], [2 x i8], %struct.frame_contexts }
%struct.MV_REF = type { %union.int_mv, i8 }
%struct.InternalFrameBufferList = type { i32, %struct.InternalFrameBuffer* }
%struct.InternalFrameBuffer = type { i8*, i64, i32 }
%struct.CommonContexts = type { i8**, [3 x i8**], i8**, i32, i32, i32 }
%struct.TPL_MV_REF = type { %union.int_mv, i8 }
%struct.AV1EncoderConfig = type { %struct.InputCfg, %struct.FrameDimensionCfg, %struct.AlgoCfg, %struct.KeyFrameCfg, %struct.RateControlCfg, %struct.QuantizationCfg, %struct.ResizeCfg, %struct.SuperResCfg, %struct.aom_fixed_buf, %struct.ToolCfg, %struct.GFConfig, %struct.TileConfig, %struct.TuneCfg, %struct.ColorCfg, %struct.DecoderModelCfg, %struct.RefFrameCfg, %struct.UnitTestCfg, %struct.MotionModeCfg, %struct.IntraModeCfg, %struct.TxfmSizeTypeCfg, %struct.CompoundTypeCfg, %struct.PartitionCfg, %struct.CostUpdateFreq, float, i32, i32, i32, i32, i32, i32, i32, [32 x i8], i8, i32, i8, i8, i8, i8, i8* }
%struct.InputCfg = type { double, i32, i32, i32, i32 }
%struct.FrameDimensionCfg = type { i32, i32, i32, i32, i32, i32 }
%struct.AlgoCfg = type { i32, i32, i32, i32, i8, i8, i8 }
%struct.KeyFrameCfg = type { i32, i32, i32, i32, i32, i8, i8, i8, i8 }
%struct.RateControlCfg = type { i64, i64, i64, i64, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }
%struct.QuantizationCfg = type { [5 x double], i32, i32, i32, i32, i8, i8, i8, i8 }
%struct.ResizeCfg = type { i8, i8, i8 }
%struct.SuperResCfg = type { i32, i32, i8, i8, i32, i8 }
%struct.aom_fixed_buf = type { i8*, i64 }
%struct.ToolCfg = type { i32, i32, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8 }
%struct.GFConfig = type { i32, i32, i32, i32, i32, i8, i8 }
%struct.TileConfig = type { i32, i32, i32, i32, i32, i32, [64 x i32], [64 x i32], i8, i8, i8 }
%struct.TuneCfg = type { i8*, i8*, i32, i32, i32 }
%struct.ColorCfg = type { i32, i32, i32, i32, i32 }
%struct.DecoderModelCfg = type { %struct.aom_timing, i32, i8, i8, i8 }
%struct.RefFrameCfg = type { i32, i8, i8 }
%struct.UnitTestCfg = type { i32, i32 }
%struct.MotionModeCfg = type { i8, i8, i8 }
%struct.IntraModeCfg = type { i8, i8, i8, i8, i8, i8, i8 }
%struct.TxfmSizeTypeCfg = type { i8, i8, i8, i8, i8, i8, i8 }
%struct.CompoundTypeCfg = type { i8, i8, i8, i8, i8, i8 }
%struct.PartitionCfg = type { i8, i8, i8, i8, i8 }
%struct.CostUpdateFreq = type { i32, i32, i32, i32 }
%struct.TemporalFilterCtx = type { [35 x %struct.yv12_buffer_config*], i32, i32, i32, %struct.scale_factors, [3 x double], i32, i32, i32, i32, i32 }
%struct.ForceIntegerMVInfo = type { [32 x double], i32, i32 }
%struct.RefreshFrameFlagsInfo = type { i8, i8, i8 }
%struct.ExternalFlags = type { i32, %struct.ExtRefreshFrameFlagsInfo, i8, i8, i8, i8, i8, i8 }
%struct.ExtRefreshFrameFlagsInfo = type { i8, i8, i8, i8, i8, i8 }
%struct.yv12_buffer_config = type { %union.anon, %union.anon.0, %union.anon.2, %union.anon.4, %union.anon.6, %union.anon.8, i32, [3 x i8*], i8*, i32, i8*, i64, i32, i64, i32, i32, i32, i32, i32, i32, i8, i32, i32, i32, i32, i32, i32, %struct.aom_metadata_array* }
%union.anon = type { %struct.anon }
%struct.anon = type { i32, i32 }
%union.anon.0 = type { %struct.anon.1 }
%struct.anon.1 = type { i32, i32 }
%union.anon.2 = type { %struct.anon.3 }
%struct.anon.3 = type { i32, i32 }
%union.anon.4 = type { %struct.anon.5 }
%struct.anon.5 = type { i32, i32 }
%union.anon.6 = type { %struct.anon.7 }
%struct.anon.7 = type { i32, i32 }
%union.anon.8 = type { %struct.anon.9 }
%struct.anon.9 = type { i8*, i8*, i8* }
%struct.aom_metadata_array = type { i64, %struct.aom_metadata** }
%struct.aom_metadata = type { i32, i8*, i64, i32 }
%struct.RD_OPT = type { [169 x i32], [8 x [22 x [169 x i32]]], i32, double }
%struct.CODING_CONTEXT = type { %struct.loopfilter, %struct.CdefInfo, %struct.yv12_buffer_config, %struct.RATE_CONTROL, %struct.MV_STATS }
%struct.GlobalMotionInfo = type { i8, [8 x %struct.yv12_buffer_config*], i8*, [2 x i32], [2 x [7 x %struct.FrameDistPair]], i32, i32, i32, [8192 x i32] }
%struct.FrameDistPair = type { i32, i8 }
%struct.WinnerModeParams = type { [3 x [2 x i32]], [3 x i8], [3 x i32], [3 x i32], [3 x i32], [3 x i32] }
%struct.TimeStamps = type { i64, i64, i64 }
%struct.RATE_CONTROL = type { i32, i32, i32, i32, i32, [4 x i32], i32, [4 x double], i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i64, i64, i32, i32, i32, i32, i32, i32, i32, [4 x i32], double, double, i64, i64, i64, i64, i32, i32, i32, i32, i32, i64, i64, i32, i32, i32, i32, i32, i32, i32, [7 x i32], i32, i32, i32, i32, i32 }
%struct.SPEED_FEATURES = type { %struct.HIGH_LEVEL_SPEED_FEATURES, %struct.FIRST_PASS_SPEED_FEATURES, %struct.TPL_SPEED_FEATURES, %struct.GLOBAL_MOTION_SPEED_FEATURES, %struct.PARTITION_SPEED_FEATURES, %struct.MV_SPEED_FEATURES, %struct.INTER_MODE_SPEED_FEATURES, %struct.INTERP_FILTER_SPEED_FEATURES, %struct.INTRA_MODE_SPEED_FEATURES, %struct.TX_SPEED_FEATURES, %struct.RD_CALC_SPEED_FEATURES, %struct.WINNER_MODE_SPEED_FEATURES, %struct.LOOP_FILTER_SPEED_FEATURES, %struct.REAL_TIME_SPEED_FEATURES }
%struct.HIGH_LEVEL_SPEED_FEATURES = type { i32, i8, i32, i8, i32, i8, i32, i32 }
%struct.FIRST_PASS_SPEED_FEATURES = type { i32, i32 }
%struct.TPL_SPEED_FEATURES = type { i32, i32, i32, i32, i8, i8, i32, i32, i32, i32, i32 }
%struct.GLOBAL_MOTION_SPEED_FEATURES = type { i8, i32, i32 }
%struct.PARTITION_SPEED_FEATURES = type { i8, i8, i32, i32, i32, i32, i32, i8, i8, i8, i8, i32, i64, i32, [5 x i32], i32, i32, i32, i32, i32, i32, i8, i32, i8, i32, i32, i32, i32, i32, i32, i32 }
%struct.MV_SPEED_FEATURES = type { i8, i32, i32, i8, i32, i8, i8, i8, i32, [4 x %struct.MESH_PATTERN], [4 x %struct.MESH_PATTERN], i32, i32, i32, i32, i32, i32, i32, i32 }
%struct.MESH_PATTERN = type { i32, i32 }
%struct.INTER_MODE_SPEED_FEATURES = type { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i8, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i8, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }
%struct.INTERP_FILTER_SPEED_FEATURES = type { i32, i32, i32, i32, i32, i32 }
%struct.INTRA_MODE_SPEED_FEATURES = type { [5 x i32], [5 x i32], i32, i32, i32, i32, i32, i32, i32, i32, i32 }
%struct.TX_SPEED_FEATURES = type { i32, i32, i32, i32, i32, %struct.TX_TYPE_SEARCH, i32, i32, i32, i32, i32, i32, i32 }
%struct.TX_TYPE_SEARCH = type { i8, i32, i32, i32, i32, i32, i32, i32, i32, i32 }
%struct.RD_CALC_SPEED_FEATURES = type { i32, i32, i32, i8, i32, i32 }
%struct.WINNER_MODE_SPEED_FEATURES = type { i32, i32, i32, i32, i8, i32, i32 }
%struct.LOOP_FILTER_SPEED_FEATURES = type { i8, i32, i32, i32, i32, i32, i32, i32, i32, i32 }
%struct.REAL_TIME_SPEED_FEATURES = type { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i8, i32, i32, i32, i32, i32, [16 x i32], i32 }
%struct.MotionVectorSearchParams = type { i32, i32, i32 (%struct.macroblockd*, %struct.AV1Common*, %struct.SUBPEL_MOTION_SEARCH_PARAMS*, i32, %struct.mv*, i32*, i32*, %union.int_mv*)*, [3 x [7 x %struct.search_site_config]] }
%struct.SUBPEL_MOTION_SEARCH_PARAMS = type { i32, i32*, i8, i32, %struct.SubpelMvLimits, %struct.MV_COST_PARAMS, %struct.SUBPEL_SEARCH_VAR_PARAMS }
%struct.SubpelMvLimits = type { i32, i32, i32, i32 }
%struct.MV_COST_PARAMS = type { %struct.mv*, %struct.fullpel_mv, i8, i32*, [2 x i32*], i32, i32 }
%struct.SUBPEL_SEARCH_VAR_PARAMS = type { %struct.aom_variance_vtable*, i8, %struct.MSBuffers, i32, i32 }
%struct.MSBuffers = type { %struct.buf_2d*, %struct.buf_2d*, i8*, i8*, i32, i32, i32*, i32* }
%struct.mv = type { i16, i16 }
%struct.search_site_config = type { [22 x [17 x %struct.search_site]], i32, [22 x i32], [22 x i32], i32 }
%struct.search_site = type { %struct.fullpel_mv, i32 }
%struct.EncSegmentationInfo = type { i8*, i8 }
%struct.CYCLIC_REFRESH = type { i32, i32, i32, i32, i32, i32, i32, i32, i32, i8*, i8*, i64, i64, i16, double, i32, [3 x i32], double, i32 }
%struct.ActiveMap = type { i32, i32, i8* }
%struct.RefBufferStack = type { [16 x i32], i32, [16 x i32], i32, [16 x i32], i32 }
%struct.FRAME_INFO = type { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }
%struct.FRAME_INDEX_SET = type { i32 }
%struct.InitialDimensions = type { i32, i32 }
%struct.ResizePendingParams = type { i32, i32 }
%struct.TileDataEnc = type { %struct.TileInfo, [8 x i8], %struct.frame_contexts, %struct.frame_contexts*, i8, [22 x %struct.InterModeRdModel], %struct.AV1EncRowMultiThreadSync, %struct.mv }
%struct.InterModeRdModel = type { i32, double, double, double, double, double, double, double, i32, double, double, double, double, double }
%struct.AV1EncRowMultiThreadSync = type { %union.pthread_mutex_t*, %union.pthread_cond_t*, i32*, i32, i32, i32, i32 }
%struct.TokenInfo = type { [64 x [64 x %struct.TokenExtra*]], [64 x [64 x %struct.TokenList*]] }
%struct.TokenExtra = type { i8 }
%struct.TokenList = type { %struct.TokenExtra*, i32 }
%struct.VarBasedPartitionInfo = type { [5 x i64], i64 }
%struct.FrameProbInfo = type { [7 x [22 x i32]], [7 x i32], [7 x [19 x [16 x i32]]], [7 x [16 x [3 x i32]]] }
%struct.MultiThreadInfo = type { i32, [10 x i32], i32, i32, %struct.AVxWorker*, %struct.EncWorkerData*, i8, %struct.AV1EncRowMultiThreadInfo, %struct.AV1TplRowMultiThreadInfo, %struct.AV1LfSyncData, %struct.AV1LrSyncData, %struct.AV1EncPackBSSync, %struct.AV1GlobalMotionSync, %struct.AV1TemporalFilterSync, %struct.AV1CdefSyncData, %struct.AV1CdefWorker* }
%struct.AVxWorker = type { %struct.AVxWorkerImpl*, i32, i8*, i32 (i8*, i8*)*, i8*, i8*, i32 }
%struct.AVxWorkerImpl = type opaque
%struct.EncWorkerData = type opaque
%struct.AV1EncRowMultiThreadInfo = type { i32, i32, i32, i32, [64 x i32], %union.pthread_mutex_t*, void (%struct.AV1EncRowMultiThreadSync*, i32, i32)*, void (%struct.AV1EncRowMultiThreadSync*, i32, i32, i32)* }
%struct.AV1TplRowMultiThreadInfo = type { void (%struct.AV1TplRowMultiThreadSync*, i32, i32)*, void (%struct.AV1TplRowMultiThreadSync*, i32, i32, i32)* }
%struct.AV1LfSyncData = type { [3 x %union.pthread_mutex_t*], [3 x %union.pthread_cond_t*], [3 x i32*], i32, i32, %struct.LoopFilterWorkerData*, i32, %union.pthread_mutex_t*, %struct.AV1LfMTInfo*, i32, i32 }
%struct.LoopFilterWorkerData = type { %struct.yv12_buffer_config*, %struct.AV1Common*, [3 x %struct.macroblockd_plane], %struct.macroblockd* }
%struct.AV1LfMTInfo = type { i32, i32, i32 }
%struct.AV1LrSyncData = type { [3 x %union.pthread_mutex_t*], [3 x %union.pthread_cond_t*], [3 x i32*], i32, i32, i32, i32, %union.pthread_mutex_t*, %struct.LoopRestorationWorkerData*, %struct.AV1LrMTInfo*, i32, i32 }
%struct.LoopRestorationWorkerData = type { i32*, i8*, i8* }
%struct.AV1LrMTInfo = type { i32, i32, i32, i32, i32, i32, i32 }
%struct.AV1EncPackBSSync = type { %union.pthread_mutex_t*, [512 x %struct.PackBSTileOrder], i32 }
%struct.PackBSTileOrder = type { i16, i32 }
%struct.AV1GlobalMotionSync = type { %struct.JobInfo, %struct.GlobalMotionThreadData*, %union.pthread_mutex_t*, i32, i32, i8 }
%struct.JobInfo = type { [64 x i8], [2 x i8], [2 x i8] }
%struct.GlobalMotionThreadData = type { [1 x %struct.MotionModel], i8* }
%struct.MotionModel = type { [8 x double], i32*, i32 }
%struct.AV1TemporalFilterSync = type { %union.pthread_mutex_t*, i32 }
%struct.AV1CdefSyncData = type { %union.pthread_mutex_t*, %struct.AV1CdefRowSync*, i32, i32, i32 }
%struct.AV1CdefRowSync = type { %union.pthread_mutex_t*, %union.pthread_cond_t*, i32 }
%struct.AV1CdefWorker = type { %struct.AV1Common*, %struct.macroblockd*, [3 x i16*], i16*, [3 x i16*], void (%struct.AV1Common*, %struct.macroblockd*, %struct.CdefBlockInfo*, i16**, i16*, %struct.AV1CdefSyncData*, i32)* }
%struct.CdefBlockInfo = type { i16*, [3 x i16*], [3 x i16*], i8*, [256 x %struct.cdef_list], i32, i32, i32, i32, [4 x i32], i32, i32, i32, i32, i32, i32, [16 x [16 x i32]], [16 x [16 x i32]], i32, i32, i32 }
%struct.cdef_list = type { i8, i8 }
%struct.AV1LrStruct = type { void (%struct.RestorationTileLimits*, %struct.AV1PixelRect*, i32, i8*, i32*, %struct.RestorationLineBuffers*)*, [3 x %struct.FilterFrameCtxt], %struct.yv12_buffer_config*, %struct.yv12_buffer_config* }
%struct.RestorationTileLimits = type { i32, i32, i32, i32 }
%struct.AV1PixelRect = type { i32, i32, i32, i32 }
%struct.FilterFrameCtxt = type { %struct.RestorationInfo*, i32, i32, i32, i32, i32, i8*, i8*, i32, i32, %struct.AV1PixelRect }
%struct.aom_film_grain_table_t = type { %struct.aom_film_grain_table_entry_t*, %struct.aom_film_grain_table_entry_t* }
%struct.aom_film_grain_table_entry_t = type { %struct.aom_film_grain_t, i64, i64, %struct.aom_film_grain_table_entry_t* }
%struct.aom_denoise_and_model_t = type opaque
%struct.InterpSearchFlags = type { i32, i16 }
%struct.RefFrameDistanceInfo = type { [7 x i32], i8, i8 }
%struct.SVC = type { i32, i32, i32, i32, i32, i32, i32, i32, [7 x i32], [7 x i32], [8 x i32], double, i32, [8 x i32], [8 x i8], i32, i32, [8 x i32], [8 x i32], i32, i32, [32 x %struct.LAYER_CONTEXT], [4 x i8], [4 x i32], i32 }
%struct.LAYER_CONTEXT = type { %struct.RATE_CONTROL, %struct.PRIMARY_RATE_CONTROL, i32, i64, i32, i32, i64, i64, double, i32, i32, i32, i32, i32, i8*, i8*, i32, i32, i32, i8, i8, i32, i32 }
%struct.MV_STATS = type { i32, i32, i32, i32, i32, i32, [4 x i32], i32, i32, i32, i32, i32, i32, i32, i32, i32 }
%struct.FirstPassData = type { %struct.FRAME_STATS*, i32* }
%struct.FRAME_STATS = type { i64, i64, i64, i64, i64, i32, i32, i32, i32, double, i32, i32, i32, i32, i32, i32, i32, i32, i64, i64, double, double }
%struct.noise_estimate = type { i32, i32, i32, i32, i32, i32, i32, i32, i32 }
%struct.av1_denoiser = type { %struct.yv12_buffer_config*, %struct.yv12_buffer_config*, %struct.yv12_buffer_config, i32, i32, i32, i32, i32, i32, i32 }
%struct.IntraModeSearchState = type { i8, i32, [13 x i8], i32, i32, i32, i64, i32, i8, %struct.PALETTE_MODE_INFO, i8 }

@uv_rd_search_mode_order = internal unnamed_addr constant [14 x i8] c"\00\0D\02\01\09\0C\0A\0B\04\07\06\08\05\03", align 1
@txsize_sqr_up_map = internal unnamed_addr constant [19 x i8] c"\00\01\02\03\04\01\01\02\02\03\03\04\04\02\02\03\03\04\04", align 16
@av1_derived_chroma_intra_mode_used_flag = internal unnamed_addr constant [13 x i16] [i16 8705, i16 8707, i16 8709, i16 8713, i16 8721, i16 8737, i16 8769, i16 8833, i16 8961, i16 8705, i16 9729, i16 10753, i16 12801], align 16
@av1_rd_pick_intra_sbuv_mode.thresh = internal unnamed_addr constant [2 x [4 x float]] [[4 x float] [float 0xBFF3333340000000, float 0.000000e+00, float 0.000000e+00, float 0x3FF3333340000000], [4 x float] [float 0xBFF3333340000000, float 0xBFF3333340000000, float 0xBFE3333340000000, float 0x3FD99999A0000000]], align 16
@size_group_lookup = internal unnamed_addr constant [22 x i8] c"\00\00\00\01\01\01\02\02\02\03\03\03\03\03\03\03\00\00\01\01\02\02", align 16
@block_size_high = internal unnamed_addr constant [22 x i8] c"\04\08\04\08\10\08\10 \10 @ @\80@\80\10\04 \08@\10", align 16
@block_size_wide = internal unnamed_addr constant [22 x i8] c"\04\04\08\08\08\10\10\10   @@@\80\80\04\10\08 \10@", align 16
@av1_handle_intra_y_mode.thresh = internal unnamed_addr constant [4 x float] [float 0xBFF3333340000000, float 0.000000e+00, float 0.000000e+00, float 0x3FF3333340000000], align 16
@intra_mode_context = internal unnamed_addr constant [13 x i32] [i32 0, i32 1, i32 2, i32 3, i32 4, i32 4, i32 4, i32 4, i32 3, i32 0, i32 1, i32 2, i32 0], align 16
@av1_rd_pick_intra_sby_mode.thresh = internal unnamed_addr constant [4 x float] [float 0xBFF3333340000000, float 0xBFF3333340000000, float 0xBFE3333340000000, float 0x3FD99999A0000000], align 16
@intra_rd_search_mode_order = internal unnamed_addr constant [13 x i8] c"\00\02\01\09\0C\0A\0B\04\07\06\08\05\03", align 1
@get_uv_mode.uv2y = internal unnamed_addr constant [16 x i8] c"\00\01\02\03\04\05\06\07\08\09\0A\0B\0C\00\19\19", align 16
@ss_size_lookup = internal unnamed_addr constant [22 x [2 x [2 x i8]]] [[2 x [2 x i8]] zeroinitializer, [2 x [2 x i8]] [[2 x i8] c"\01\00", [2 x i8] c"\FF\00"], [2 x [2 x i8]] [[2 x i8] c"\02\FF", [2 x i8] zeroinitializer], [2 x [2 x i8]] [[2 x i8] c"\03\02", [2 x i8] c"\01\00"], [2 x [2 x i8]] [[2 x i8] c"\04\03", [2 x i8] c"\FF\01"], [2 x [2 x i8]] [[2 x i8] c"\05\FF", [2 x i8] c"\03\02"], [2 x [2 x i8]] [[2 x i8] c"\06\05", [2 x i8] c"\04\03"], [2 x [2 x i8]] [[2 x i8] c"\07\06", [2 x i8] c"\FF\04"], [2 x [2 x i8]] [[2 x i8] c"\08\FF", [2 x i8] c"\06\05"], [2 x [2 x i8]] [[2 x i8] c"\09\08", [2 x i8] c"\07\06"], [2 x [2 x i8]] [[2 x i8] c"\0A\09", [2 x i8] c"\FF\07"], [2 x [2 x i8]] [[2 x i8] c"\0B\FF", [2 x i8] c"\09\08"], [2 x [2 x i8]] [[2 x i8] c"\0C\0B", [2 x i8] c"\0A\09"], [2 x [2 x i8]] [[2 x i8] c"\0D\0C", [2 x i8] c"\FF\0A"], [2 x [2 x i8]] [[2 x i8] c"\0E\FF", [2 x i8] c"\0C\0B"], [2 x [2 x i8]] [[2 x i8] c"\0F\0E", [2 x i8] c"\0D\0C"], [2 x [2 x i8]] [[2 x i8] c"\10\01", [2 x i8] c"\FF\01"], [2 x [2 x i8]] [[2 x i8] c"\11\FF", [2 x i8] c"\02\02"], [2 x [2 x i8]] [[2 x i8] c"\12\04", [2 x i8] c"\FF\10"], [2 x [2 x i8]] [[2 x i8] c"\13\FF", [2 x i8] c"\05\11"], [2 x [2 x i8]] [[2 x i8] c"\14\07", [2 x i8] c"\FF\12"], [2 x [2 x i8]] [[2 x i8] c"\15\FF", [2 x i8] c"\08\13"]], align 16
@max_txsize_rect_lookup = internal unnamed_addr constant [22 x i8] c"\00\05\06\01\07\08\02\09\0A\03\0B\0C\04\04\04\04\0D\0E\0F\10\11\12", align 16
@tx_size_high_unit = internal unnamed_addr constant [19 x i32] [i32 1, i32 2, i32 4, i32 8, i32 16, i32 2, i32 1, i32 4, i32 2, i32 8, i32 4, i32 16, i32 8, i32 4, i32 1, i32 8, i32 2, i32 16, i32 4], align 16
@tx_size_wide_unit = internal unnamed_addr constant [19 x i32] [i32 1, i32 2, i32 4, i32 8, i32 16, i32 1, i32 2, i32 2, i32 4, i32 4, i32 8, i32 8, i32 16, i32 1, i32 4, i32 2, i32 8, i32 4, i32 16], align 16
@tx_size_wide = internal unnamed_addr constant [19 x i32] [i32 4, i32 8, i32 16, i32 32, i32 64, i32 4, i32 8, i32 8, i32 16, i32 16, i32 32, i32 32, i32 64, i32 4, i32 16, i32 8, i32 32, i32 16, i32 64], align 16
@tx_size_high = internal unnamed_addr constant [19 x i32] [i32 4, i32 8, i32 16, i32 32, i32 64, i32 8, i32 4, i32 16, i32 8, i32 32, i32 16, i32 64, i32 32, i32 16, i32 4, i32 32, i32 8, i32 64, i32 16], align 16
@aom_satd = external local_unnamed_addr global i32 (i32*, i32)*, align 8
@tx_size_2d = internal unnamed_addr constant [20 x i32] [i32 16, i32 64, i32 256, i32 1024, i32 4096, i32 32, i32 32, i32 128, i32 128, i32 512, i32 512, i32 2048, i32 2048, i32 64, i32 64, i32 256, i32 256, i32 1024, i32 1024, i32 0], align 16
@av1_nn_predict = external local_unnamed_addr global void (float*, %struct.NN_CONFIG*, i32, float*)*, align 8
@mi_size_high = internal unnamed_addr constant [22 x i8] c"\01\02\01\02\04\02\04\08\04\08\10\08\10 \10 \04\01\08\02\10\04", align 16
@mi_size_wide = internal unnamed_addr constant [22 x i8] c"\01\01\02\02\02\04\04\04\08\08\08\10\10\10  \01\04\02\08\04\10", align 16
@get_hist_bin_idx.thresholds = internal unnamed_addr constant [32 x i32] [i32 -1334015, i32 -441798, i32 -261605, i32 -183158, i32 -138560, i32 -109331, i32 -88359, i32 -72303, i32 -59392, i32 -48579, i32 -39272, i32 -30982, i32 -23445, i32 -16400, i32 -9715, i32 -3194, i32 3227, i32 9748, i32 16433, i32 23478, i32 31015, i32 39305, i32 48611, i32 59425, i32 72336, i32 88392, i32 109364, i32 138593, i32 183191, i32 261638, i32 441831, i32 2147483647], align 16
@av1_intra_hog_model_weights = internal constant [256 x float] [float 0xC0089C78A0000000, float 0xC00E0E7700000000, float 0xC00A33BEA0000000, float 0xC009720080000000, float 0xC00B9DE940000000, float 0xC009BB9520000000, float 0xC006F83E00000000, float 0xC0091309C0000000, float 0xBFFD283D40000000, float 0xC003361700000000, float 0xBFF8A80060000000, float 0xBFF3200A00000000, float 0xBFDBC93640000000, float 0x3FD4A9DE80000000, float 0x4002159920000000, float 0x400AF320E0000000, float 0x400FEA10E0000000, float 0x400A77C800000000, float 0x4002392000000000, float 0x3FED8FB660000000, float 0x3F9B0BBF60000000, float 0xBFD8A6B0E0000000, float 0xBFE6FEF3A0000000, float 0xBFF68AB820000000, float 0xBFF0CF15E0000000, float 0xC002976E60000000, float 0xC001CE7E60000000, float 0xC004AF0200000000, float 0xC0086F2BE0000000, float 0xC007002DA0000000, float 0xC007E2BB60000000, float 0xC00B93C600000000, float 0x400E10AB20000000, float 0x4009A283E0000000, float 0x40015E3440000000, float 0x3FEA7366A0000000, float 0xBFD1423100000000, float 0xBFE6775740000000, float 0xBFF15F56A0000000, float 0xC00166E900000000, float 0xBFF9F88BA0000000, float 0xC007CD1740000000, float 0xC0063CAE20000000, float 0xC00986C1A0000000, float 0xC00C2CD9E0000000, float 0xC00B00FBA0000000, float 0xC00A8E0A00000000, float 0xC00F2DDA40000000, float 0xC00960F0A0000000, float 0xC00CC197E0000000, float 0xC007087660000000, float 0xC00461D8E0000000, float 0xC0075E4140000000, float 0xC002413760000000, float 0xBFFD1A9320000000, float 0xC000558C00000000, float 0xBFE3C8DA00000000, float 0xBFF657E460000000, float 0xBFE2261E00000000, float 0xBFD24BA940000000, float 0xBFB68AF820000000, float 0x3FE81C9F80000000, float 0x4000BD4300000000, float 0x4009B8DD60000000, float 0xC00A66F7A0000000, float 0xC005FD4060000000, float 0xC00286B9C0000000, float 0xC00363ADA0000000, float 0xC0020EEA60000000, float 0xC002281B20000000, float 0xC00192C280000000, float 0xC002689A80000000, float 0xC0052C10A0000000, float 0xC0022BA940000000, float 0xC00208F100000000, float 0xC002669BE0000000, float 0xC001BE61C0000000, float 0xC003C95180000000, float 0xC000EF5780000000, float 0xC00439D900000000, float 0xC00A8487C0000000, float 0xBFFB375640000000, float 0xBFE2D96A60000000, float 0xBFB68C36E0000000, float 0x3FEA050380000000, float 0x3FFB3C43C0000000, float 0x4005396FA0000000, float 0x400AD061C0000000, float 0x4009F2CC80000000, float 0x40099863C0000000, float 0x400380BAA0000000, float 0x3FF7806D00000000, float 0x3FE10EA7C0000000, float 0xBFB95C52E0000000, float 0xBFE3ECB100000000, float 0xC0019B1960000000, float 0xC010EA5A80000000, float 0xC0070089E0000000, float 0xBFF4621FA0000000, float 0xBFDBBADC00000000, float 0x3FE9B87E00000000, float 0x3FFF99C6C0000000, float 0x40096FAC60000000, float 0x400F833400000000, float 0x400BA29180000000, float 0x400D83DCC0000000, float 0x4008EE68E0000000, float 0x3FFF892DE0000000, float 0x3FE98C8AC0000000, float 0xBFE41CC960000000, float 0xBFF40A6DA0000000, float 0xC00699F5E0000000, float 0xC0105C57A0000000, float 0xC00E3836A0000000, float 0xC009D18A00000000, float 0xC00BD5D140000000, float 0xC00A908680000000, float 0xC0094664E0000000, float 0xC005D567E0000000, float 0xC005C75AC0000000, float 0xC008707640000000, float 0xC005F181A0000000, float 0xC004E6D0E0000000, float 0xC0054D1200000000, float 0xC007422DE0000000, float 0xC008F13E00000000, float 0xC008D23F60000000, float 0xC00FC48D00000000, float 0xC01390BFE0000000, float 0xC00F7C1260000000, float 0xC00AC83560000000, float 0xC005C68020000000, float 0xC001C088E0000000, float 0xBFFB3CFE60000000, float 0xBFEBBA9B00000000, float 0xBFC3ADD9C0000000, float 0x3FBB9463C0000000, float 0x3FF6AB8C80000000, float 0x4004954440000000, float 0x400CDCAEA0000000, float 0x400FCC6E60000000, float 0x400FFB75A0000000, float 0x4007C38000000000, float 0x3FE9558000000000, float 0xBFF7A9A920000000, float 0xBFF3A684C0000000, float 0xBFF378A5C0000000, float 0xBFFC4141E0000000, float 0xBFFF374EE0000000, float 0xBFFFC3CB00000000, float 0xBFFF9D3560000000, float 0xBFFFC4FD20000000, float 0xC003610400000000, float 0xC0035C1D60000000, float 0xC0044013E0000000, float 0xC0079D6520000000, float 0xC008922FA0000000, float 0xC00A3759E0000000, float 0xC00AFD0200000000, float 0xC011D91920000000, float 0xBFEEF8F040000000, float 0x3FE9C6DA40000000, float 0x40065A60E0000000, float 0x400D7CE520000000, float 0x400DF628C0000000, float 0x400A050160000000, float 0x40028763A0000000, float 0x3FF662E6E0000000, float 0xBFC1797460000000, float 0xBFC4D6FDA0000000, float 0xBFF011D8A0000000, float 0xBFFAAFC380000000, float 0xBFFF6F4160000000, float 0xC007802960000000, float 0xC0082800E0000000, float 0xC00F8AC8E0000000, float 0xC014693BC0000000, float 0xC00F0E7C40000000, float 0xC00C419760000000, float 0xC00B9D9B20000000, float 0xC0078D57C0000000, float 0xC00524FEC0000000, float 0xC0043D2D80000000, float 0xC0009E4A40000000, float 0xC0067ACEE0000000, float 0xBFFCDC1820000000, float 0xBFFC8998E0000000, float 0xBFFA99F2C0000000, float 0xBFF6A5D280000000, float 0xBFF6486380000000, float 0xBFE93DCCE0000000, float 0xBFF346F040000000, float 0xBFFFFB58E0000000, float 0xBFF2E9E3C0000000, float 0xBFEC8C2A40000000, float 0xBFF51421C0000000, float 0xBFF5BEEC40000000, float 0xBFF85DA9C0000000, float 0xBFF77F3060000000, float 0xBFFC771440000000, float 0xC002A9E660000000, float 0xC001486380000000, float 0xC002A295A0000000, float 0xC0050CD180000000, float 0xC005F5A100000000, float 0xC0086B8200000000, float 0xC0064C8500000000, float 0xC00B8A56A0000000, float 0xC010FAF500000000, float 0xC00841E360000000, float 0xC0007E2CE0000000, float 0xBFFC4A3400000000, float 0xBFF493C040000000, float 0xBFE69C5C60000000, float 0xBFC8A0FD40000000, float 0x3FD8C397A0000000, float 0x3FE6F1A3C0000000, float 0x3FF7B3C920000000, float 0x4001BBCE40000000, float 0x4005E76540000000, float 0x4008E0E380000000, float 0x4009CF0520000000, float 0x4003EBB880000000, float 0xBFB8881E40000000, float 0xC00EEB24A0000000, float 0xC00C0ED800000000, float 0xC0090809E0000000, float 0xC007441920000000, float 0xC0071218A0000000, float 0xC0070D2140000000, float 0xC00431ECA0000000, float 0xC004FEEE60000000, float 0xC003325360000000, float 0xC002F11620000000, float 0xBFFEB12C20000000, float 0xBFFED207E0000000, float 0xBFFB1D0420000000, float 0xBFFB94A4E0000000, float 0xBFEEED7E80000000, float 0xBFF2EE0A00000000, float 0xBFF6E41800000000, float 0x3FEBEEC3A0000000, float 0x400621E500000000, float 0x400CE171A0000000, float 0x400C9FD400000000, float 0x400AADEEC0000000, float 0x4004B18540000000, float 0x3FFE54DF80000000, float 0x3FF1F482C0000000, float 0x3FDF43E540000000, float 0xBFC20218E0000000, float 0xBFE99207E0000000, float 0xBFF390D5A0000000, float 0xBFF809FB60000000, float 0xBFFE6A5E80000000, float 0xC009A78F20000000], align 16
@av1_intra_hog_model_bias = internal constant [8 x float] [float 0x3FDCD64520000000, float 0x3FE641AF00000000, float 0xBFE6F965C0000000, float 0xBFE47A0300000000, float 0xBFE343BD60000000, float 0xBFDD0563E0000000, float 0x3FAC9949E0000000, float 0xBFDDCA6CA0000000], align 16
@av1_intra_hog_model_nnconfig = internal constant { i32, i32, i32, [10 x i32], [4 x i8], <{ float*, [10 x float*] }>, <{ float*, [10 x float*] }> } { i32 32, i32 8, i32 0, [10 x i32] zeroinitializer, [4 x i8] undef, <{ float*, [10 x float*] }> <{ float* getelementptr inbounds ([256 x float], [256 x float]* @av1_intra_hog_model_weights, i32 0, i32 0), [10 x float*] zeroinitializer }>, <{ float*, [10 x float*] }> <{ float* getelementptr inbounds ([8 x float], [8 x float]* @av1_intra_hog_model_bias, i32 0, i32 0), [10 x float*] zeroinitializer }> }, align 8
@num_pels_log2_lookup = internal unnamed_addr constant [22 x i8] c"\04\05\05\06\07\07\08\09\09\0A\0B\0B\0C\0D\0D\0E\06\06\08\08\0A\0A", align 16
@set_tx_type_prune.prune_mode = internal unnamed_addr constant [2 x [2 x i32]] [[2 x i32] [i32 4, i32 0], [2 x i32] [i32 5, i32 2]], align 16
@max_txsize_lookup = internal unnamed_addr constant [22 x i8] c"\00\00\00\01\01\01\02\02\02\03\03\03\04\04\04\04\00\00\01\01\02\02", align 16
@bsize_to_tx_size_cat.bsize_to_tx_size_depth_table = internal unnamed_addr constant [22 x i8] c"\00\01\01\01\02\02\02\03\03\03\04\04\04\04\04\04\02\02\03\03\04\04", align 16
@sub_tx_size_map = internal unnamed_addr constant [19 x i8] c"\00\00\01\02\03\00\00\01\01\02\02\03\03\05\06\07\08\09\0A", align 16
@av1_derived_filter_intra_mode_used_flag = internal unnamed_addr constant [13 x i8] c"\01\03\05\01\01\01\09\01\01\01\01\01\11", align 1

; Function Attrs: nounwind ssp uwtable
define hidden void @av1_count_colors(i8* nocapture readonly, i32, i32, i32, i32* nocapture, i32* nocapture) local_unnamed_addr #0 {
  %7 = bitcast i32* %4 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 4 %7, i8 0, i64 1024, i1 false)
  %8 = icmp sgt i32 %2, 0
  br i1 %8, label %9, label %73

9:                                                ; preds = %6
  %10 = icmp sgt i32 %3, 0
  %11 = sext i32 %1 to i64
  %12 = zext i32 %2 to i64
  %13 = zext i32 %3 to i64
  %14 = and i64 %13, 1
  %15 = icmp eq i32 %3, 1
  %16 = sub nsw i64 %13, %14
  %17 = icmp eq i64 %14, 0
  br label %18

18:                                               ; preds = %70, %9
  %19 = phi i64 [ 0, %9 ], [ %71, %70 ]
  br i1 %10, label %20, label %70

20:                                               ; preds = %18
  %21 = mul nsw i64 %19, %11
  br i1 %15, label %60, label %74

22:                                               ; preds = %22, %73
  %23 = phi i64 [ 0, %73 ], [ %51, %22 ]
  %24 = phi <4 x i32> [ zeroinitializer, %73 ], [ %49, %22 ]
  %25 = phi <4 x i32> [ zeroinitializer, %73 ], [ %50, %22 ]
  %26 = getelementptr inbounds i32, i32* %4, i64 %23
  %27 = bitcast i32* %26 to <4 x i32>*
  %28 = load <4 x i32>, <4 x i32>* %27, align 4
  %29 = getelementptr inbounds i32, i32* %26, i64 4
  %30 = bitcast i32* %29 to <4 x i32>*
  %31 = load <4 x i32>, <4 x i32>* %30, align 4
  %32 = icmp ne <4 x i32> %28, zeroinitializer
  %33 = icmp ne <4 x i32> %31, zeroinitializer
  %34 = zext <4 x i1> %32 to <4 x i32>
  %35 = zext <4 x i1> %33 to <4 x i32>
  %36 = add nuw nsw <4 x i32> %24, %34
  %37 = add nuw nsw <4 x i32> %25, %35
  %38 = or i64 %23, 8
  %39 = getelementptr inbounds i32, i32* %4, i64 %38
  %40 = bitcast i32* %39 to <4 x i32>*
  %41 = load <4 x i32>, <4 x i32>* %40, align 4
  %42 = getelementptr inbounds i32, i32* %39, i64 4
  %43 = bitcast i32* %42 to <4 x i32>*
  %44 = load <4 x i32>, <4 x i32>* %43, align 4
  %45 = icmp ne <4 x i32> %41, zeroinitializer
  %46 = icmp ne <4 x i32> %44, zeroinitializer
  %47 = zext <4 x i1> %45 to <4 x i32>
  %48 = zext <4 x i1> %46 to <4 x i32>
  %49 = add nuw nsw <4 x i32> %36, %47
  %50 = add nuw nsw <4 x i32> %37, %48
  %51 = add nuw nsw i64 %23, 16
  %52 = icmp eq i64 %51, 256
  br i1 %52, label %53, label %22, !llvm.loop !2

53:                                               ; preds = %22
  %54 = add nuw <4 x i32> %50, %49
  %55 = shufflevector <4 x i32> %54, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %56 = add <4 x i32> %54, %55
  %57 = shufflevector <4 x i32> %56, <4 x i32> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %58 = add <4 x i32> %56, %57
  %59 = extractelement <4 x i32> %58, i32 0
  store i32 %59, i32* %5, align 4
  ret void

60:                                               ; preds = %74, %20
  %61 = phi i64 [ 0, %20 ], [ %92, %74 ]
  br i1 %17, label %70, label %62

62:                                               ; preds = %60
  %63 = add nsw i64 %61, %21
  %64 = getelementptr inbounds i8, i8* %0, i64 %63
  %65 = load i8, i8* %64, align 1
  %66 = zext i8 %65 to i64
  %67 = getelementptr inbounds i32, i32* %4, i64 %66
  %68 = load i32, i32* %67, align 4
  %69 = add nsw i32 %68, 1
  store i32 %69, i32* %67, align 4
  br label %70

70:                                               ; preds = %62, %60, %18
  %71 = add nuw nsw i64 %19, 1
  %72 = icmp eq i64 %71, %12
  br i1 %72, label %73, label %18

73:                                               ; preds = %70, %6
  br label %22

74:                                               ; preds = %20, %74
  %75 = phi i64 [ %92, %74 ], [ 0, %20 ]
  %76 = phi i64 [ %93, %74 ], [ %16, %20 ]
  %77 = add nsw i64 %75, %21
  %78 = getelementptr inbounds i8, i8* %0, i64 %77
  %79 = load i8, i8* %78, align 1
  %80 = zext i8 %79 to i64
  %81 = getelementptr inbounds i32, i32* %4, i64 %80
  %82 = load i32, i32* %81, align 4
  %83 = add nsw i32 %82, 1
  store i32 %83, i32* %81, align 4
  %84 = or i64 %75, 1
  %85 = add nsw i64 %84, %21
  %86 = getelementptr inbounds i8, i8* %0, i64 %85
  %87 = load i8, i8* %86, align 1
  %88 = zext i8 %87 to i64
  %89 = getelementptr inbounds i32, i32* %4, i64 %88
  %90 = load i32, i32* %89, align 4
  %91 = add nsw i32 %90, 1
  store i32 %91, i32* %89, align 4
  %92 = add nuw nsw i64 %75, 2
  %93 = add i64 %76, -2
  %94 = icmp eq i64 %93, 0
  br i1 %94, label %60, label %74
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: nounwind ssp uwtable
define hidden void @av1_count_colors_highbd(i8*, i32, i32, i32, i32, i32*, i32* nocapture, i32* nocapture, i32* nocapture) local_unnamed_addr #0 {
  %10 = shl i32 1, %4
  %11 = ptrtoint i8* %0 to i64
  %12 = shl i64 %11, 1
  %13 = inttoptr i64 %12 to i16*
  %14 = bitcast i32* %6 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 4 %14, i8 0, i64 1024, i1 false)
  %15 = icmp ne i32* %5, null
  br i1 %15, label %16, label %20

16:                                               ; preds = %9
  %17 = bitcast i32* %5 to i8*
  %18 = sext i32 %10 to i64
  %19 = shl nsw i64 %18, 2
  tail call void @llvm.memset.p0i8.i64(i8* nonnull align 4 %17, i8 0, i64 %19, i1 false)
  br label %20

20:                                               ; preds = %16, %9
  %21 = icmp sgt i32 %2, 0
  br i1 %21, label %22, label %73

22:                                               ; preds = %20
  %23 = icmp sgt i32 %3, 0
  %24 = add nsw i32 %4, -8
  %25 = sext i32 %1 to i64
  %26 = zext i32 %2 to i64
  %27 = zext i32 %3 to i64
  br label %28

28:                                               ; preds = %70, %22
  %29 = phi i64 [ 0, %22 ], [ %71, %70 ]
  br i1 %23, label %30, label %70

30:                                               ; preds = %28
  %31 = mul nsw i64 %29, %25
  br label %74

32:                                               ; preds = %32, %73
  %33 = phi i64 [ 0, %73 ], [ %61, %32 ]
  %34 = phi <4 x i32> [ zeroinitializer, %73 ], [ %59, %32 ]
  %35 = phi <4 x i32> [ zeroinitializer, %73 ], [ %60, %32 ]
  %36 = getelementptr inbounds i32, i32* %6, i64 %33
  %37 = bitcast i32* %36 to <4 x i32>*
  %38 = load <4 x i32>, <4 x i32>* %37, align 4
  %39 = getelementptr inbounds i32, i32* %36, i64 4
  %40 = bitcast i32* %39 to <4 x i32>*
  %41 = load <4 x i32>, <4 x i32>* %40, align 4
  %42 = icmp ne <4 x i32> %38, zeroinitializer
  %43 = icmp ne <4 x i32> %41, zeroinitializer
  %44 = zext <4 x i1> %42 to <4 x i32>
  %45 = zext <4 x i1> %43 to <4 x i32>
  %46 = add nuw nsw <4 x i32> %34, %44
  %47 = add nuw nsw <4 x i32> %35, %45
  %48 = or i64 %33, 8
  %49 = getelementptr inbounds i32, i32* %6, i64 %48
  %50 = bitcast i32* %49 to <4 x i32>*
  %51 = load <4 x i32>, <4 x i32>* %50, align 4
  %52 = getelementptr inbounds i32, i32* %49, i64 4
  %53 = bitcast i32* %52 to <4 x i32>*
  %54 = load <4 x i32>, <4 x i32>* %53, align 4
  %55 = icmp ne <4 x i32> %51, zeroinitializer
  %56 = icmp ne <4 x i32> %54, zeroinitializer
  %57 = zext <4 x i1> %55 to <4 x i32>
  %58 = zext <4 x i1> %56 to <4 x i32>
  %59 = add nuw nsw <4 x i32> %46, %57
  %60 = add nuw nsw <4 x i32> %47, %58
  %61 = add nuw nsw i64 %33, 16
  %62 = icmp eq i64 %61, 256
  br i1 %62, label %63, label %32, !llvm.loop !4

63:                                               ; preds = %32
  %64 = add nuw <4 x i32> %60, %59
  %65 = shufflevector <4 x i32> %64, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %66 = add <4 x i32> %64, %65
  %67 = shufflevector <4 x i32> %66, <4 x i32> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %68 = add <4 x i32> %66, %67
  %69 = extractelement <4 x i32> %68, i32 0
  store i32 %69, i32* %7, align 4
  br i1 %15, label %96, label %190

70:                                               ; preds = %93, %28
  %71 = add nuw nsw i64 %29, 1
  %72 = icmp eq i64 %71, %26
  br i1 %72, label %73, label %28

73:                                               ; preds = %70, %20
  br label %32

74:                                               ; preds = %93, %30
  %75 = phi i64 [ 0, %30 ], [ %94, %93 ]
  %76 = add nsw i64 %75, %31
  %77 = getelementptr inbounds i16, i16* %13, i64 %76
  %78 = load i16, i16* %77, align 2
  %79 = zext i16 %78 to i32
  %80 = lshr i32 %79, %24
  %81 = icmp sgt i32 %80, 255
  br i1 %81, label %93, label %82

82:                                               ; preds = %74
  %83 = sext i32 %80 to i64
  %84 = getelementptr inbounds i32, i32* %6, i64 %83
  %85 = load i32, i32* %84, align 4
  %86 = add nsw i32 %85, 1
  store i32 %86, i32* %84, align 4
  br i1 %15, label %87, label %93

87:                                               ; preds = %82
  %88 = load i16, i16* %77, align 2
  %89 = zext i16 %88 to i64
  %90 = getelementptr inbounds i32, i32* %5, i64 %89
  %91 = load i32, i32* %90, align 4
  %92 = add nsw i32 %91, 1
  store i32 %92, i32* %90, align 4
  br label %93

93:                                               ; preds = %82, %87, %74
  %94 = add nuw nsw i64 %75, 1
  %95 = icmp eq i64 %94, %27
  br i1 %95, label %70, label %74

96:                                               ; preds = %63
  %97 = icmp eq i32 %4, 31
  br i1 %97, label %178, label %98

98:                                               ; preds = %96
  %99 = sext i32 %10 to i64
  %100 = icmp sgt i64 %99, 1
  %101 = select i1 %100, i64 %99, i64 1
  %102 = icmp ult i64 %101, 8
  br i1 %102, label %103, label %106

103:                                              ; preds = %168, %98
  %104 = phi i64 [ 0, %98 ], [ %107, %168 ]
  %105 = phi i32 [ 0, %98 ], [ %176, %168 ]
  br label %180

106:                                              ; preds = %98
  %107 = and i64 %101, 9223372036854775800
  %108 = add nsw i64 %107, -8
  %109 = lshr exact i64 %108, 3
  %110 = add nuw nsw i64 %109, 1
  %111 = and i64 %110, 1
  %112 = icmp eq i64 %108, 0
  br i1 %112, label %148, label %113

113:                                              ; preds = %106
  %114 = sub nuw nsw i64 %110, %111
  br label %115

115:                                              ; preds = %115, %113
  %116 = phi i64 [ 0, %113 ], [ %145, %115 ]
  %117 = phi <4 x i32> [ zeroinitializer, %113 ], [ %143, %115 ]
  %118 = phi <4 x i32> [ zeroinitializer, %113 ], [ %144, %115 ]
  %119 = phi i64 [ %114, %113 ], [ %146, %115 ]
  %120 = getelementptr inbounds i32, i32* %5, i64 %116
  %121 = bitcast i32* %120 to <4 x i32>*
  %122 = load <4 x i32>, <4 x i32>* %121, align 4
  %123 = getelementptr inbounds i32, i32* %120, i64 4
  %124 = bitcast i32* %123 to <4 x i32>*
  %125 = load <4 x i32>, <4 x i32>* %124, align 4
  %126 = icmp ne <4 x i32> %122, zeroinitializer
  %127 = icmp ne <4 x i32> %125, zeroinitializer
  %128 = zext <4 x i1> %126 to <4 x i32>
  %129 = zext <4 x i1> %127 to <4 x i32>
  %130 = add nuw nsw <4 x i32> %117, %128
  %131 = add nuw nsw <4 x i32> %118, %129
  %132 = or i64 %116, 8
  %133 = getelementptr inbounds i32, i32* %5, i64 %132
  %134 = bitcast i32* %133 to <4 x i32>*
  %135 = load <4 x i32>, <4 x i32>* %134, align 4
  %136 = getelementptr inbounds i32, i32* %133, i64 4
  %137 = bitcast i32* %136 to <4 x i32>*
  %138 = load <4 x i32>, <4 x i32>* %137, align 4
  %139 = icmp ne <4 x i32> %135, zeroinitializer
  %140 = icmp ne <4 x i32> %138, zeroinitializer
  %141 = zext <4 x i1> %139 to <4 x i32>
  %142 = zext <4 x i1> %140 to <4 x i32>
  %143 = add nuw nsw <4 x i32> %130, %141
  %144 = add nuw nsw <4 x i32> %131, %142
  %145 = add i64 %116, 16
  %146 = add i64 %119, -2
  %147 = icmp eq i64 %146, 0
  br i1 %147, label %148, label %115, !llvm.loop !5

148:                                              ; preds = %115, %106
  %149 = phi <4 x i32> [ undef, %106 ], [ %143, %115 ]
  %150 = phi <4 x i32> [ undef, %106 ], [ %144, %115 ]
  %151 = phi i64 [ 0, %106 ], [ %145, %115 ]
  %152 = phi <4 x i32> [ zeroinitializer, %106 ], [ %143, %115 ]
  %153 = phi <4 x i32> [ zeroinitializer, %106 ], [ %144, %115 ]
  %154 = icmp eq i64 %111, 0
  br i1 %154, label %168, label %155

155:                                              ; preds = %148
  %156 = getelementptr inbounds i32, i32* %5, i64 %151
  %157 = getelementptr inbounds i32, i32* %156, i64 4
  %158 = bitcast i32* %157 to <4 x i32>*
  %159 = load <4 x i32>, <4 x i32>* %158, align 4
  %160 = icmp ne <4 x i32> %159, zeroinitializer
  %161 = zext <4 x i1> %160 to <4 x i32>
  %162 = add nuw nsw <4 x i32> %153, %161
  %163 = bitcast i32* %156 to <4 x i32>*
  %164 = load <4 x i32>, <4 x i32>* %163, align 4
  %165 = icmp ne <4 x i32> %164, zeroinitializer
  %166 = zext <4 x i1> %165 to <4 x i32>
  %167 = add nuw nsw <4 x i32> %152, %166
  br label %168

168:                                              ; preds = %148, %155
  %169 = phi <4 x i32> [ %149, %148 ], [ %167, %155 ]
  %170 = phi <4 x i32> [ %150, %148 ], [ %162, %155 ]
  %171 = add nuw <4 x i32> %170, %169
  %172 = shufflevector <4 x i32> %171, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %173 = add <4 x i32> %171, %172
  %174 = shufflevector <4 x i32> %173, <4 x i32> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %175 = add <4 x i32> %173, %174
  %176 = extractelement <4 x i32> %175, i32 0
  %177 = icmp eq i64 %101, %107
  br i1 %177, label %178, label %103

178:                                              ; preds = %180, %168, %96
  %179 = phi i32 [ 0, %96 ], [ %176, %168 ], [ %187, %180 ]
  store i32 %179, i32* %8, align 4
  br label %190

180:                                              ; preds = %103, %180
  %181 = phi i64 [ %188, %180 ], [ %104, %103 ]
  %182 = phi i32 [ %187, %180 ], [ %105, %103 ]
  %183 = getelementptr inbounds i32, i32* %5, i64 %181
  %184 = load i32, i32* %183, align 4
  %185 = icmp ne i32 %184, 0
  %186 = zext i1 %185 to i32
  %187 = add nuw nsw i32 %182, %186
  %188 = add nuw nsw i64 %181, 1
  %189 = icmp slt i64 %188, %99
  br i1 %189, label %180, label %178, !llvm.loop !6

190:                                              ; preds = %178, %63
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden i64 @av1_rd_pick_intra_sbuv_mode(%struct.AV1_COMP*, %struct.macroblock*, i32*, i32*, i64*, i32*, i8 zeroext, i8 zeroext) local_unnamed_addr #0 {
  %9 = alloca [33 x %struct.RD_STATS], align 16
  %10 = alloca [33 x %struct.RD_STATS], align 16
  %11 = alloca %struct.RD_STATS, align 8
  %12 = alloca %struct.RD_STATS, align 8
  %13 = alloca [10 x i64], align 16
  %14 = alloca %struct.MB_MODE_INFO, align 8
  %15 = alloca i64, align 8
  %16 = alloca %struct.IntraModeSearchState, align 8
  %17 = alloca %struct.RD_STATS, align 8
  %18 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 2, i32 6
  %19 = load %struct.MB_MODE_INFO**, %struct.MB_MODE_INFO*** %18, align 8
  %20 = load %struct.MB_MODE_INFO*, %struct.MB_MODE_INFO** %19, align 8
  %21 = getelementptr inbounds %struct.MB_MODE_INFO, %struct.MB_MODE_INFO* %14, i64 0, i32 0
  call void @llvm.lifetime.start.p0i8(i64 184, i8* nonnull %21) #6
  %22 = getelementptr inbounds %struct.MB_MODE_INFO, %struct.MB_MODE_INFO* %20, i64 0, i32 0
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %21, i8* align 8 %22, i64 184, i1 false)
  %23 = bitcast i64* %15 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %23) #6
  store i64 9223372036854775807, i64* %15, align 8
  %24 = getelementptr inbounds %struct.MB_MODE_INFO, %struct.MB_MODE_INFO* %20, i64 0, i32 3
  store i8 0, i8* %24, align 1
  %25 = getelementptr inbounds %struct.MB_MODE_INFO, %struct.MB_MODE_INFO* %20, i64 0, i32 22, i32 1, i64 1
  store i8 0, i8* %25, align 1
  %26 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 2, i32 3
  %27 = load i8, i8* %26, align 4, !range !8
  %28 = icmp eq i8 %27, 0
  br i1 %28, label %29, label %30

29:                                               ; preds = %8
  store i32 0, i32* %2, align 4
  store i32 0, i32* %3, align 4
  store i64 0, i64* %4, align 8
  store i32 1, i32* %5, align 4
  br label %770

30:                                               ; preds = %8
  %31 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 35
  %32 = load %struct.SequenceHeader*, %struct.SequenceHeader** %31, align 16
  %33 = getelementptr inbounds %struct.SequenceHeader, %struct.SequenceHeader* %32, i64 0, i32 27
  %34 = load i8, i8* %33, align 1
  %35 = icmp eq i8 %34, 0
  br i1 %35, label %36, label %68

36:                                               ; preds = %30
  %37 = load %struct.MB_MODE_INFO**, %struct.MB_MODE_INFO*** %18, align 8
  %38 = load %struct.MB_MODE_INFO*, %struct.MB_MODE_INFO** %37, align 8
  %39 = getelementptr inbounds %struct.MB_MODE_INFO, %struct.MB_MODE_INFO* %38, i64 0, i32 0
  %40 = load i8, i8* %39, align 8
  %41 = getelementptr inbounds %struct.MB_MODE_INFO, %struct.MB_MODE_INFO* %38, i64 0, i32 28
  %42 = load i16, i16* %41, align 1
  %43 = and i16 %42, 7
  %44 = zext i16 %43 to i64
  %45 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 2, i32 42, i64 %44
  %46 = load i32, i32* %45, align 4
  %47 = icmp eq i32 %46, 0
  br i1 %47, label %60, label %48

48:                                               ; preds = %36
  %49 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 2, i32 4, i64 1, i32 1
  %50 = load i32, i32* %49, align 4
  %51 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 2, i32 4, i64 1, i32 2
  %52 = load i32, i32* %51, align 8
  %53 = zext i8 %40 to i64
  %54 = sext i32 %50 to i64
  %55 = sext i32 %52 to i64
  %56 = getelementptr inbounds [22 x [2 x [2 x i8]]], [22 x [2 x [2 x i8]]]* @ss_size_lookup, i64 0, i64 %53, i64 %54, i64 %55
  %57 = load i8, i8* %56, align 1
  %58 = icmp eq i8 %57, 0
  %59 = zext i1 %58 to i8
  br label %70

60:                                               ; preds = %36
  %61 = zext i8 %40 to i64
  %62 = lshr i64 2033663, %61
  %63 = and i64 %62, 1
  %64 = icmp eq i64 %63, 0
  %65 = lshr i64 3083263, %61
  %66 = trunc i64 %65 to i8
  %67 = and i8 %66, 1
  br i1 %64, label %68, label %70

68:                                               ; preds = %30, %60
  %69 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 2, i32 51, i32 10
  br label %83

70:                                               ; preds = %60, %48
  %71 = phi i8 [ %59, %48 ], [ %67, %60 ]
  %72 = zext i8 %71 to i32
  %73 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 2, i32 51, i32 10
  store i32 %72, i32* %73, align 8
  %74 = icmp eq i8 %71, 0
  br i1 %74, label %85, label %75

75:                                               ; preds = %70
  %76 = load i8, i8* %22, align 8
  %77 = getelementptr inbounds %struct.MB_MODE_INFO, %struct.MB_MODE_INFO* %20, i64 0, i32 28
  %78 = load i16, i16* %77, align 1
  %79 = and i16 %78, 7
  %80 = zext i16 %79 to i64
  %81 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 11, i64 %80
  %82 = load i8, i8* %81, align 1
  tail call void @av1_encode_intra_block_plane(%struct.AV1_COMP* %0, %struct.macroblock* %1, i8 zeroext %76, i32 0, i8 zeroext 1, i8 zeroext %82) #6
  br label %83

83:                                               ; preds = %75, %68
  %84 = phi i32* [ %69, %68 ], [ %73, %75 ]
  store i32 0, i32* %84, align 8
  br label %85

85:                                               ; preds = %83, %70
  %86 = getelementptr inbounds %struct.IntraModeSearchState, %struct.IntraModeSearchState* %16, i64 0, i32 0
  call void @llvm.lifetime.start.p0i8(i64 112, i8* nonnull %86) #6
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %86, i8 0, i64 112, i1 false) #6
  %87 = getelementptr inbounds %struct.IntraModeSearchState, %struct.IntraModeSearchState* %16, i64 0, i32 4
  store i32 2147483647, i32* %87, align 4
  %88 = bitcast %struct.RD_STATS* %17 to i8*
  %89 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 9, i32 18, i32 5
  %90 = zext i8 %7 to i64
  %91 = getelementptr inbounds [19 x i8], [19 x i8]* @txsize_sqr_up_map, i64 0, i64 %90
  %92 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 9, i32 18, i32 2
  %93 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 9, i32 18, i32 3
  %94 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 40, i32 8, i32 8
  %95 = getelementptr inbounds %struct.MB_MODE_INFO, %struct.MB_MODE_INFO* %20, i64 0, i32 2
  %96 = getelementptr inbounds %struct.MB_MODE_INFO, %struct.MB_MODE_INFO* %20, i64 0, i32 18, i64 1
  %97 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 9, i32 18, i32 6
  %98 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 40, i32 8, i32 4
  %99 = getelementptr inbounds %struct.IntraModeSearchState, %struct.IntraModeSearchState* %16, i64 0, i32 3
  %100 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 0, i32 0
  %101 = getelementptr inbounds %struct.IntraModeSearchState, %struct.IntraModeSearchState* %16, i64 0, i32 2, i64 0
  %102 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 2, i32 4, i64 1, i32 1
  %103 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 2, i32 4, i64 1, i32 2
  %104 = bitcast [10 x i64]* %13 to i8*
  %105 = getelementptr inbounds %struct.RD_STATS, %struct.RD_STATS* %17, i64 0, i32 0
  %106 = getelementptr inbounds %struct.RD_STATS, %struct.RD_STATS* %17, i64 0, i32 4
  %107 = getelementptr inbounds %struct.RD_STATS, %struct.RD_STATS* %17, i64 0, i32 1
  %108 = getelementptr inbounds [10 x i64], [10 x i64]* %13, i64 0, i64 1
  %109 = getelementptr inbounds [10 x i64], [10 x i64]* %13, i64 0, i64 2
  %110 = getelementptr inbounds [10 x i64], [10 x i64]* %13, i64 0, i64 4
  %111 = getelementptr inbounds [10 x i64], [10 x i64]* %13, i64 0, i64 6
  %112 = getelementptr inbounds [10 x i64], [10 x i64]* %13, i64 0, i64 8
  %113 = bitcast %struct.RD_STATS* %12 to i8*
  %114 = getelementptr inbounds %struct.RD_STATS, %struct.RD_STATS* %12, i64 0, i32 0
  %115 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 17
  %116 = getelementptr inbounds %struct.RD_STATS, %struct.RD_STATS* %12, i64 0, i32 1
  %117 = getelementptr inbounds %struct.RD_STATS, %struct.RD_STATS* %12, i64 0, i32 4
  %118 = bitcast %struct.RD_STATS* %11 to i8*
  %119 = getelementptr inbounds %struct.RD_STATS, %struct.RD_STATS* %11, i64 0, i32 0
  %120 = getelementptr inbounds %struct.RD_STATS, %struct.RD_STATS* %11, i64 0, i32 1
  %121 = getelementptr inbounds %struct.RD_STATS, %struct.RD_STATS* %11, i64 0, i32 4
  %122 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 9, i32 18, i32 4
  %123 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 40, i32 8, i32 10
  %124 = getelementptr inbounds %struct.MB_MODE_INFO, %struct.MB_MODE_INFO* %20, i64 0, i32 21
  %125 = getelementptr inbounds %struct.MB_MODE_INFO, %struct.MB_MODE_INFO* %20, i64 0, i32 20
  %126 = bitcast [33 x %struct.RD_STATS]* %9 to i8*
  %127 = bitcast [33 x %struct.RD_STATS]* %10 to i8*
  %128 = getelementptr inbounds %struct.RD_STATS, %struct.RD_STATS* %17, i64 0, i32 2
  %129 = getelementptr inbounds %struct.RD_STATS, %struct.RD_STATS* %17, i64 0, i32 3
  %130 = getelementptr inbounds %struct.RD_STATS, %struct.RD_STATS* %17, i64 0, i32 5
  %131 = getelementptr inbounds [33 x %struct.RD_STATS], [33 x %struct.RD_STATS]* %9, i64 0, i64 0
  %132 = getelementptr inbounds [33 x %struct.RD_STATS], [33 x %struct.RD_STATS]* %10, i64 0, i64 0
  %133 = getelementptr inbounds i8, i8* %88, i64 4
  %134 = bitcast i8* %133 to i32*
  %135 = bitcast [10 x i64]* %13 to <2 x i64>*
  %136 = bitcast i64* %109 to <2 x i64>*
  %137 = bitcast i64* %110 to <2 x i64>*
  %138 = bitcast i64* %111 to <2 x i64>*
  %139 = bitcast i64* %112 to <2 x i64>*
  %140 = bitcast i64* %107 to <2 x i64>*
  %141 = bitcast i64* %107 to <2 x i64>*
  br label %146

142:                                              ; preds = %713
  %143 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 9, i32 9, i32 16
  %144 = load i8, i8* %143, align 2, !range !8
  %145 = icmp eq i8 %144, 0
  br i1 %145, label %768, label %717

146:                                              ; preds = %713, %85
  %147 = phi i32 [ 0, %85 ], [ %714, %713 ]
  %148 = phi i64 [ 0, %85 ], [ %715, %713 ]
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %88) #6
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %88, i8 -86, i64 40, i1 false)
  %149 = getelementptr inbounds [14 x i8], [14 x i8]* @uv_rd_search_mode_order, i64 0, i64 %148
  %150 = load i8, i8* %149, align 1
  %151 = zext i8 %150 to i64
  %152 = getelementptr inbounds [16 x i8], [16 x i8]* @get_uv_mode.uv2y, i64 0, i64 %151
  %153 = load i8, i8* %152, align 1
  %154 = add i8 %153, -3
  %155 = icmp ugt i8 %154, 5
  %156 = add i8 %153, -1
  %157 = icmp ugt i8 %156, 7
  br i1 %155, label %161, label %158

158:                                              ; preds = %146
  %159 = load i8, i8* %89, align 1, !range !8
  %160 = icmp eq i8 %159, 0
  br i1 %160, label %713, label %161

161:                                              ; preds = %158, %146
  %162 = load i8, i8* %91, align 1
  %163 = zext i8 %162 to i64
  %164 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 40, i32 8, i32 1, i64 %163
  %165 = load i32, i32* %164, align 4
  %166 = zext i8 %150 to i32
  %167 = shl i32 1, %166
  %168 = and i32 %165, %167
  %169 = icmp eq i32 %168, 0
  br i1 %169, label %713, label %170

170:                                              ; preds = %161
  %171 = load i8, i8* %92, align 1, !range !8
  %172 = icmp eq i8 %171, 0
  br i1 %172, label %173, label %180

173:                                              ; preds = %170
  %174 = lshr i64 242, %148
  %175 = and i64 %174, 1
  %176 = icmp eq i64 %175, 0
  %177 = or i64 %148, 4
  %178 = icmp eq i64 %177, 5
  %179 = or i1 %178, %176
  br i1 %179, label %180, label %713

180:                                              ; preds = %173, %170
  %181 = load i8, i8* %93, align 1, !range !8
  %182 = icmp eq i8 %181, 0
  %183 = icmp eq i64 %148, 5
  %184 = and i1 %183, %182
  br i1 %184, label %713, label %185

185:                                              ; preds = %180
  %186 = load i32, i32* %94, align 8
  %187 = icmp eq i32 %186, 0
  br i1 %187, label %196, label %188

188:                                              ; preds = %185
  %189 = load i8, i8* %95, align 2
  %190 = zext i8 %189 to i64
  %191 = getelementptr inbounds [13 x i16], [13 x i16]* @av1_derived_chroma_intra_mode_used_flag, i64 0, i64 %190
  %192 = load i16, i16* %191, align 2
  %193 = zext i16 %192 to i32
  %194 = and i32 %167, %193
  %195 = icmp eq i32 %194, 0
  br i1 %195, label %713, label %196

196:                                              ; preds = %188, %185
  store i8 %150, i8* %24, align 1
  store i8 0, i8* %96, align 1
  %197 = icmp eq i64 %148, 1
  br i1 %197, label %198, label %395

198:                                              ; preds = %196
  %199 = load %struct.MB_MODE_INFO**, %struct.MB_MODE_INFO*** %18, align 8
  %200 = load %struct.MB_MODE_INFO*, %struct.MB_MODE_INFO** %199, align 8
  %201 = getelementptr inbounds %struct.MB_MODE_INFO, %struct.MB_MODE_INFO* %200, i64 0, i32 0
  %202 = load i8, i8* %201, align 8
  %203 = getelementptr inbounds %struct.MB_MODE_INFO, %struct.MB_MODE_INFO* %200, i64 0, i32 28
  %204 = load i16, i16* %203, align 1
  %205 = and i16 %204, 7
  %206 = zext i16 %205 to i64
  %207 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 2, i32 42, i64 %206
  %208 = load i32, i32* %207, align 4
  %209 = icmp eq i32 %208, 0
  br i1 %209, label %220, label %210

210:                                              ; preds = %198
  %211 = load i32, i32* %102, align 4
  %212 = load i32, i32* %103, align 8
  %213 = zext i8 %202 to i64
  %214 = sext i32 %211 to i64
  %215 = sext i32 %212 to i64
  %216 = getelementptr inbounds [22 x [2 x [2 x i8]]], [22 x [2 x [2 x i8]]]* @ss_size_lookup, i64 0, i64 %213, i64 %214, i64 %215
  %217 = load i8, i8* %216, align 1
  %218 = icmp eq i8 %217, 0
  %219 = zext i1 %218 to i8
  br label %228

220:                                              ; preds = %198
  %221 = zext i8 %202 to i64
  %222 = lshr i64 2033663, %221
  %223 = and i64 %222, 1
  %224 = icmp eq i64 %223, 0
  %225 = lshr i64 3083263, %221
  %226 = trunc i64 %225 to i8
  %227 = and i8 %226, 1
  br i1 %224, label %713, label %228

228:                                              ; preds = %220, %210
  %229 = phi i8 [ %219, %210 ], [ %227, %220 ]
  %230 = icmp eq i8 %229, 0
  br i1 %230, label %713, label %231

231:                                              ; preds = %228
  %232 = load i8, i8* %122, align 1, !range !8
  %233 = icmp eq i8 %232, 0
  br i1 %233, label %713, label %234

234:                                              ; preds = %231
  br i1 %209, label %235, label %249

235:                                              ; preds = %234
  %236 = load i32, i32* %102, align 4
  %237 = load i32, i32* %103, align 8
  %238 = zext i8 %202 to i64
  %239 = sext i32 %236 to i64
  %240 = sext i32 %237 to i64
  %241 = getelementptr inbounds [22 x [2 x [2 x i8]]], [22 x [2 x [2 x i8]]]* @ss_size_lookup, i64 0, i64 %238, i64 %239, i64 %240
  %242 = load i8, i8* %241, align 1
  %243 = zext i8 %242 to i64
  %244 = getelementptr inbounds [22 x i8], [22 x i8]* @max_txsize_rect_lookup, i64 0, i64 %243
  %245 = load i8, i8* %244, align 1
  switch i8 %245, label %248 [
    i8 4, label %249
    i8 12, label %249
    i8 11, label %249
    i8 18, label %246
    i8 17, label %247
  ]

246:                                              ; preds = %235
  br label %249

247:                                              ; preds = %235
  br label %249

248:                                              ; preds = %235
  br label %249

249:                                              ; preds = %234, %235, %235, %235, %246, %247, %248
  %250 = phi i8 [ 0, %234 ], [ %245, %248 ], [ 9, %247 ], [ 10, %246 ], [ 3, %235 ], [ 3, %235 ], [ 3, %235 ]
  %251 = load i64, i64* %15, align 8
  %252 = load i32, i32* %123, align 8
  call void @llvm.lifetime.start.p0i8(i64 1320, i8* nonnull %126) #6
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %126, i8 -86, i64 1320, i1 false) #6
  call void @llvm.lifetime.start.p0i8(i64 1320, i8* nonnull %127) #6
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %127, i8 -86, i64 1320, i1 false) #6
  store i32 2147483647, i32* %105, align 8
  store <2 x i64> <i64 9223372036854775807, i64 9223372036854775807>, <2 x i64>* %140, align 8
  store i64 9223372036854775807, i64* %129, align 8
  store i32 0, i32* %106, align 8
  store i32 0, i32* %130, align 4
  call fastcc void @cfl_pick_plane_parameter(%struct.AV1_COMP* %0, %struct.macroblock* %1, i32 1, i8 zeroext %250, i32 %252, %struct.RD_STATS* nonnull %131) #6
  call fastcc void @cfl_pick_plane_parameter(%struct.AV1_COMP* %0, %struct.macroblock* %1, i32 2, i8 zeroext %250, i32 %252, %struct.RD_STATS* nonnull %132) #6
  br label %256

253:                                              ; preds = %389
  %254 = load i64, i64* %128, align 8
  %255 = icmp slt i64 %254, %251
  br i1 %255, label %393, label %394

256:                                              ; preds = %389, %249
  %257 = phi i64 [ 0, %249 ], [ %390, %389 ]
  %258 = phi i32 [ 0, %249 ], [ %391, %389 ]
  %259 = getelementptr inbounds [33 x %struct.RD_STATS], [33 x %struct.RD_STATS]* %9, i64 0, i64 %257
  %260 = getelementptr inbounds %struct.RD_STATS, %struct.RD_STATS* %259, i64 0, i32 0
  %261 = load i32, i32* %260, align 8
  %262 = icmp eq i32 %261, 2147483647
  br i1 %262, label %389, label %263

263:                                              ; preds = %256
  %264 = add nsw i64 %257, -16
  %265 = icmp eq i64 %264, 0
  br i1 %265, label %275, label %266

266:                                              ; preds = %263
  %267 = add nsw i32 %258, -16
  %268 = icmp sgt i64 %264, 0
  %269 = select i1 %268, i8 2, i8 1
  %270 = icmp slt i64 %264, 0
  %271 = trunc i64 %257 to i32
  %272 = sub i32 16, %271
  %273 = select i1 %270, i32 %272, i32 %267
  %274 = add nsw i32 %273, -1
  br label %275

275:                                              ; preds = %266, %263
  %276 = phi i8 [ %269, %266 ], [ 0, %263 ]
  %277 = phi i32 [ %274, %266 ], [ 0, %263 ]
  %278 = icmp eq i8 %276, 0
  %279 = mul nuw nsw i8 %276, 3
  %280 = zext i8 %279 to i32
  %281 = add nsw i32 %280, -1
  %282 = bitcast %struct.RD_STATS* %259 to i8*
  %283 = getelementptr inbounds i8, i8* %282, i64 4
  %284 = bitcast i8* %283 to i32*
  %285 = getelementptr inbounds [33 x %struct.RD_STATS], [33 x %struct.RD_STATS]* %9, i64 0, i64 %257, i32 1
  %286 = getelementptr inbounds [33 x %struct.RD_STATS], [33 x %struct.RD_STATS]* %9, i64 0, i64 %257, i32 2
  %287 = getelementptr inbounds [33 x %struct.RD_STATS], [33 x %struct.RD_STATS]* %9, i64 0, i64 %257, i32 3
  %288 = getelementptr inbounds [33 x %struct.RD_STATS], [33 x %struct.RD_STATS]* %9, i64 0, i64 %257, i32 4
  %289 = getelementptr inbounds [33 x %struct.RD_STATS], [33 x %struct.RD_STATS]* %9, i64 0, i64 %257, i32 5
  %290 = sext i32 %261 to i64
  %291 = sext i32 %277 to i64
  %292 = shl i32 %277, 4
  br label %293

293:                                              ; preds = %385, %275
  %294 = phi i64 [ 0, %275 ], [ %386, %385 ]
  %295 = phi i32 [ 0, %275 ], [ %387, %385 ]
  %296 = getelementptr inbounds [33 x %struct.RD_STATS], [33 x %struct.RD_STATS]* %10, i64 0, i64 %294, i32 0
  %297 = load i32, i32* %296, align 8
  %298 = icmp eq i32 %297, 2147483647
  br i1 %298, label %385, label %299

299:                                              ; preds = %293
  %300 = add nsw i64 %294, -16
  %301 = icmp eq i64 %300, 0
  br i1 %301, label %311, label %302

302:                                              ; preds = %299
  %303 = add nsw i32 %295, -16
  %304 = icmp sgt i64 %300, 0
  %305 = select i1 %304, i32 2, i32 1
  %306 = icmp slt i64 %300, 0
  %307 = trunc i64 %294 to i32
  %308 = sub i32 16, %307
  %309 = select i1 %306, i32 %308, i32 %303
  %310 = add nsw i32 %309, -1
  br label %312

311:                                              ; preds = %299
  br i1 %278, label %385, label %312

312:                                              ; preds = %311, %302
  %313 = phi i32 [ %310, %302 ], [ 0, %311 ]
  %314 = phi i32 [ %305, %302 ], [ 0, %311 ]
  %315 = add nsw i32 %281, %314
  %316 = load i32, i32* %284, align 4
  %317 = load i64, i64* %285, align 8
  %318 = load i64, i64* %286, align 8
  %319 = load i64, i64* %287, align 8
  %320 = load i32, i32* %288, align 8
  %321 = load i32, i32* %289, align 4
  %322 = sext i32 %297 to i64
  %323 = add nsw i64 %322, %290
  %324 = icmp slt i64 %323, 2147483647
  %325 = select i1 %324, i64 %323, i64 2147483647
  %326 = trunc i64 %325 to i32
  %327 = icmp eq i32 %321, 0
  br i1 %327, label %328, label %331

328:                                              ; preds = %312
  %329 = getelementptr inbounds [33 x %struct.RD_STATS], [33 x %struct.RD_STATS]* %10, i64 0, i64 %294, i32 5
  %330 = load i32, i32* %329, align 4
  br label %331

331:                                              ; preds = %328, %312
  %332 = phi i32 [ %330, %328 ], [ %321, %312 ]
  %333 = getelementptr inbounds [33 x %struct.RD_STATS], [33 x %struct.RD_STATS]* %10, i64 0, i64 %294, i32 1
  %334 = load i64, i64* %333, align 8
  %335 = add nsw i64 %334, %317
  %336 = getelementptr inbounds [33 x %struct.RD_STATS], [33 x %struct.RD_STATS]* %10, i64 0, i64 %294, i32 3
  %337 = load i64, i64* %336, align 8
  %338 = add nsw i64 %337, %319
  %339 = getelementptr inbounds [33 x %struct.RD_STATS], [33 x %struct.RD_STATS]* %10, i64 0, i64 %294, i32 4
  %340 = load i32, i32* %339, align 8
  %341 = and i32 %340, %320
  %342 = icmp eq i32 %326, 2147483647
  br i1 %342, label %385, label %343

343:                                              ; preds = %331
  %344 = sext i32 %315 to i64
  %345 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 20, i32 7, i64 %344, i64 0, i64 %291
  %346 = load i32, i32* %345, align 4
  %347 = add nsw i32 %346, %326
  %348 = sext i32 %313 to i64
  %349 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 20, i32 7, i64 %344, i64 1, i64 %348
  %350 = load i32, i32* %349, align 4
  %351 = add nsw i32 %347, %350
  %352 = load i32, i32* %115, align 8
  %353 = icmp eq i32 %351, 2147483647
  %354 = icmp eq i64 %335, 9223372036854775807
  %355 = or i1 %354, %353
  %356 = icmp eq i64 %318, 9223372036854775807
  %357 = or i1 %356, %355
  br i1 %357, label %385, label %358

358:                                              ; preds = %343
  %359 = icmp sgt i32 %351, -1
  br i1 %359, label %360, label %368

360:                                              ; preds = %358
  %361 = sext i32 %351 to i64
  %362 = sext i32 %352 to i64
  %363 = mul nsw i64 %361, %362
  %364 = add nsw i64 %363, 256
  %365 = ashr i64 %364, 9
  %366 = shl i64 %335, 7
  %367 = add nsw i64 %365, %366
  br label %377

368:                                              ; preds = %358
  %369 = shl nsw i64 %335, 7
  %370 = sub nsw i32 0, %351
  %371 = sext i32 %370 to i64
  %372 = sext i32 %352 to i64
  %373 = mul nsw i64 %371, %372
  %374 = add nsw i64 %373, 256
  %375 = ashr i64 %374, 9
  %376 = sub nsw i64 %369, %375
  br label %377

377:                                              ; preds = %368, %360
  %378 = phi i64 [ %367, %360 ], [ %376, %368 ]
  %379 = load i64, i64* %128, align 8
  %380 = icmp slt i64 %378, %379
  br i1 %380, label %381, label %385

381:                                              ; preds = %377
  store i32 %351, i32* %105, align 8
  store i32 %316, i32* %134, align 4
  store i64 %335, i64* %107, align 8
  store i64 %378, i64* %128, align 8
  store i64 %338, i64* %129, align 8
  store i32 %341, i32* %106, align 8
  store i32 %332, i32* %130, align 4
  %382 = add nsw i32 %313, %292
  %383 = trunc i32 %382 to i8
  store i8 %383, i8* %124, align 1
  %384 = trunc i32 %315 to i8
  store i8 %384, i8* %125, align 1
  br label %385

385:                                              ; preds = %381, %377, %343, %331, %311, %293
  %386 = add nuw nsw i64 %294, 1
  %387 = add nuw nsw i32 %295, 1
  %388 = icmp eq i64 %386, 33
  br i1 %388, label %389, label %293

389:                                              ; preds = %385, %256
  %390 = add nuw nsw i64 %257, 1
  %391 = add nuw nsw i32 %258, 1
  %392 = icmp eq i64 %390, 33
  br i1 %392, label %253, label %256

393:                                              ; preds = %253
  call void @llvm.lifetime.end.p0i8(i64 1320, i8* nonnull %127) #6
  call void @llvm.lifetime.end.p0i8(i64 1320, i8* nonnull %126) #6
  br label %658

394:                                              ; preds = %253
  store i32 2147483647, i32* %105, align 8
  store <2 x i64> <i64 9223372036854775807, i64 9223372036854775807>, <2 x i64>* %141, align 8
  store i64 9223372036854775807, i64* %129, align 8
  store i32 0, i32* %106, align 8
  store i32 0, i32* %130, align 4
  store i8 0, i8* %124, align 1
  store i8 0, i8* %125, align 1
  call void @llvm.lifetime.end.p0i8(i64 1320, i8* nonnull %127) #6
  call void @llvm.lifetime.end.p0i8(i64 1320, i8* nonnull %126) #6
  br label %713

395:                                              ; preds = %196
  br i1 %157, label %654, label %396

396:                                              ; preds = %395
  %397 = load i8, i8* %22, align 8
  %398 = icmp ult i8 %397, 3
  br i1 %398, label %654, label %399

399:                                              ; preds = %396
  %400 = load i8, i8* %97, align 1, !range !8
  %401 = icmp eq i8 %400, 0
  br i1 %401, label %654, label %402

402:                                              ; preds = %399
  %403 = load i32, i32* %98, align 8
  %404 = icmp ne i32 %403, 0
  %405 = icmp eq i32 %147, 0
  %406 = and i1 %404, %405
  br i1 %406, label %407, label %419

407:                                              ; preds = %402
  %408 = load i8, i8* %100, align 16
  %409 = and i8 %408, -3
  %410 = icmp eq i8 %409, 0
  %411 = load %struct.SequenceHeader*, %struct.SequenceHeader** %31, align 16
  %412 = getelementptr inbounds %struct.SequenceHeader, %struct.SequenceHeader* %411, i64 0, i32 7
  %413 = load i8, i8* %412, align 4
  %414 = zext i1 %410 to i64
  %415 = add nsw i32 %403, -1
  %416 = sext i32 %415 to i64
  %417 = getelementptr inbounds [2 x [4 x float]], [2 x [4 x float]]* @av1_rd_pick_intra_sbuv_mode.thresh, i64 0, i64 %414, i64 %416
  %418 = load float, float* %417, align 4
  call fastcc void @prune_intra_mode_with_hog(%struct.macroblock* %1, i8 zeroext %6, i8 zeroext %413, float %418, i8* %101, i32 1)
  store i32 1, i32* %99, align 8
  br label %419

419:                                              ; preds = %402, %407
  %420 = phi i32 [ %147, %402 ], [ 1, %407 ]
  %421 = getelementptr inbounds %struct.IntraModeSearchState, %struct.IntraModeSearchState* %16, i64 0, i32 2, i64 %151
  %422 = load i8, i8* %421, align 1
  %423 = icmp eq i8 %422, 0
  br i1 %423, label %424, label %713

424:                                              ; preds = %419
  %425 = load %struct.MB_MODE_INFO**, %struct.MB_MODE_INFO*** %18, align 8
  %426 = load %struct.MB_MODE_INFO*, %struct.MB_MODE_INFO** %425, align 8
  %427 = getelementptr inbounds %struct.MB_MODE_INFO, %struct.MB_MODE_INFO* %426, i64 0, i32 0
  %428 = load i8, i8* %427, align 8
  %429 = getelementptr inbounds %struct.MB_MODE_INFO, %struct.MB_MODE_INFO* %426, i64 0, i32 28
  %430 = load i16, i16* %429, align 1
  %431 = and i16 %430, 7
  %432 = zext i16 %431 to i64
  %433 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 2, i32 42, i64 %432
  %434 = load i32, i32* %433, align 4
  %435 = icmp eq i32 %434, 0
  br i1 %435, label %446, label %436

436:                                              ; preds = %424
  %437 = load i32, i32* %102, align 4
  %438 = load i32, i32* %103, align 8
  %439 = zext i8 %428 to i64
  %440 = sext i32 %437 to i64
  %441 = sext i32 %438 to i64
  %442 = getelementptr inbounds [22 x [2 x [2 x i8]]], [22 x [2 x [2 x i8]]]* @ss_size_lookup, i64 0, i64 %439, i64 %440, i64 %441
  %443 = load i8, i8* %442, align 1
  %444 = icmp eq i8 %443, 0
  %445 = zext i1 %444 to i64
  br label %454

446:                                              ; preds = %424
  %447 = zext i8 %428 to i64
  %448 = lshr i64 2033663, %447
  %449 = and i64 %448, 1
  %450 = icmp eq i64 %449, 0
  %451 = lshr i64 3083263, %447
  %452 = and i64 %451, 1
  %453 = select i1 %450, i64 0, i64 %452
  br label %454

454:                                              ; preds = %436, %446
  %455 = phi i64 [ %445, %436 ], [ %453, %446 ]
  %456 = and i64 %455, 255
  %457 = load i8, i8* %95, align 2
  %458 = zext i8 %457 to i64
  %459 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 20, i32 3, i64 %456, i64 %458, i64 %151
  %460 = load i32, i32* %459, align 4
  %461 = load i64, i64* %15, align 8
  call void @llvm.lifetime.start.p0i8(i64 80, i8* nonnull %104) #6
  store i32 2147483647, i32* %105, align 8
  store i32 0, i32* %106, align 8
  store i64 9223372036854775807, i64* %107, align 8
  store <2 x i64> <i64 9223372036854775807, i64 9223372036854775807>, <2 x i64>* %135, align 16
  store <2 x i64> <i64 9223372036854775807, i64 9223372036854775807>, <2 x i64>* %136, align 16
  store <2 x i64> <i64 9223372036854775807, i64 9223372036854775807>, <2 x i64>* %137, align 16
  store <2 x i64> <i64 9223372036854775807, i64 9223372036854775807>, <2 x i64>* %138, align 16
  store <2 x i64> <i64 9223372036854775807, i64 9223372036854775807>, <2 x i64>* %139, align 16
  %462 = getelementptr inbounds %struct.MB_MODE_INFO, %struct.MB_MODE_INFO* %426, i64 0, i32 18, i64 1
  br label %463

463:                                              ; preds = %519, %454
  %464 = phi i64 [ 0, %454 ], [ %522, %519 ]
  %465 = phi i32 [ 0, %454 ], [ %523, %519 ]
  %466 = phi i32 [ 0, %454 ], [ %521, %519 ]
  %467 = phi i64 [ %461, %454 ], [ %520, %519 ]
  %468 = icmp eq i64 %464, 0
  %469 = select i1 %468, i64 3, i64 5
  %470 = shl nuw nsw i64 %464, 1
  %471 = icmp eq i64 %467, 9223372036854775807
  %472 = ashr i64 %467, %469
  %473 = add nsw i64 %472, %467
  %474 = select i1 %471, i64 9223372036854775807, i64 %473
  %475 = trunc i32 %465 to i8
  store i8 %475, i8* %462, align 1
  %476 = load %struct.MB_MODE_INFO**, %struct.MB_MODE_INFO*** %18, align 8
  %477 = load %struct.MB_MODE_INFO*, %struct.MB_MODE_INFO** %476, align 8
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %113) #6
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %113, i8 -86, i64 40, i1 false) #6
  %478 = call i32 @av1_txfm_uvrd(%struct.AV1_COMP* %0, %struct.macroblock* %1, %struct.RD_STATS* nonnull %12, i8 zeroext %6, i64 %474) #6
  %479 = icmp eq i32 %478, 0
  br i1 %479, label %510, label %490

480:                                              ; preds = %510
  %481 = icmp eq i64 %511, 9223372036854775807
  %482 = ashr i64 %511, %469
  %483 = add nsw i64 %482, %511
  %484 = select i1 %481, i64 9223372036854775807, i64 %483
  %485 = sub i8 0, %475
  store i8 %485, i8* %462, align 1
  %486 = load %struct.MB_MODE_INFO**, %struct.MB_MODE_INFO*** %18, align 8
  %487 = load %struct.MB_MODE_INFO*, %struct.MB_MODE_INFO** %486, align 8
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %113) #6
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %113, i8 -86, i64 40, i1 false) #6
  %488 = call i32 @av1_txfm_uvrd(%struct.AV1_COMP* %0, %struct.macroblock* %1, %struct.RD_STATS* nonnull %12, i8 zeroext %6, i64 %484) #6
  %489 = icmp eq i32 %488, 0
  br i1 %489, label %644, label %624

490:                                              ; preds = %463
  %491 = load i32, i32* %114, align 8
  %492 = call fastcc i32 @intra_mode_info_cost_uv(%struct.AV1_COMP* %0, %struct.macroblock* %1, %struct.MB_MODE_INFO* %477, i8 zeroext %6, i32 %460) #6
  %493 = add nsw i32 %492, %491
  %494 = sext i32 %493 to i64
  %495 = load i32, i32* %115, align 8
  %496 = sext i32 %495 to i64
  %497 = mul nsw i64 %494, %496
  %498 = add nsw i64 %497, 256
  %499 = ashr i64 %498, 9
  %500 = load i64, i64* %116, align 8
  %501 = shl nsw i64 %500, 7
  %502 = add nsw i64 %499, %501
  %503 = icmp slt i64 %502, %467
  br i1 %503, label %504, label %510

504:                                              ; preds = %490
  %505 = getelementptr inbounds %struct.MB_MODE_INFO, %struct.MB_MODE_INFO* %477, i64 0, i32 18, i64 1
  %506 = load i8, i8* %505, align 1
  %507 = sext i8 %506 to i32
  %508 = load i32, i32* %114, align 8
  store i32 %508, i32* %105, align 8
  store i64 %500, i64* %107, align 8
  %509 = load i32, i32* %117, align 8
  store i32 %509, i32* %106, align 8
  br label %510

510:                                              ; preds = %504, %490, %463
  %511 = phi i64 [ %467, %463 ], [ %502, %504 ], [ %467, %490 ]
  %512 = phi i32 [ %466, %463 ], [ %507, %504 ], [ %466, %490 ]
  %513 = phi i64 [ 9223372036854775807, %463 ], [ %502, %504 ], [ %502, %490 ]
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %113) #6
  %514 = getelementptr inbounds [10 x i64], [10 x i64]* %13, i64 0, i64 %470
  store i64 %513, i64* %514, align 16
  br i1 %468, label %515, label %480

515:                                              ; preds = %510
  %516 = icmp eq i64 %513, 9223372036854775807
  br i1 %516, label %517, label %518

517:                                              ; preds = %515
  call void @llvm.lifetime.end.p0i8(i64 80, i8* nonnull %104) #6
  br label %713

518:                                              ; preds = %515
  store i64 %513, i64* %108, align 8
  br label %519

519:                                              ; preds = %644, %518
  %520 = phi i64 [ %645, %644 ], [ %511, %518 ]
  %521 = phi i32 [ %646, %644 ], [ %512, %518 ]
  %522 = add nuw nsw i64 %464, 2
  %523 = add nuw nsw i32 %465, 2
  %524 = icmp ult i64 %522, 4
  br i1 %524, label %463, label %525

525:                                              ; preds = %519, %618
  %526 = phi i64 [ %621, %618 ], [ 1, %519 ]
  %527 = phi i32 [ %622, %618 ], [ 1, %519 ]
  %528 = phi i32 [ %620, %618 ], [ %521, %519 ]
  %529 = phi i64 [ %619, %618 ], [ %520, %519 ]
  %530 = shl nuw i64 %526, 1
  %531 = ashr i64 %529, 5
  %532 = add nsw i64 %531, %529
  %533 = add nuw nsw i64 %530, 2
  %534 = getelementptr inbounds [10 x i64], [10 x i64]* %13, i64 0, i64 %533
  %535 = load i64, i64* %534, align 16
  %536 = icmp sgt i64 %535, %532
  br i1 %536, label %537, label %542

537:                                              ; preds = %525
  %538 = add nsw i64 %530, -2
  %539 = getelementptr inbounds [10 x i64], [10 x i64]* %13, i64 0, i64 %538
  %540 = load i64, i64* %539, align 16
  %541 = icmp sgt i64 %540, %532
  br i1 %541, label %574, label %542

542:                                              ; preds = %537, %525
  %543 = trunc i32 %527 to i8
  store i8 %543, i8* %462, align 1
  %544 = load %struct.MB_MODE_INFO**, %struct.MB_MODE_INFO*** %18, align 8
  %545 = load %struct.MB_MODE_INFO*, %struct.MB_MODE_INFO** %544, align 8
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %118) #6
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %118, i8 -86, i64 40, i1 false) #6
  %546 = call i32 @av1_txfm_uvrd(%struct.AV1_COMP* %0, %struct.macroblock* %1, %struct.RD_STATS* nonnull %11, i8 zeroext %6, i64 %529) #6
  %547 = icmp eq i32 %546, 0
  br i1 %547, label %570, label %548

548:                                              ; preds = %542
  %549 = load i32, i32* %119, align 8
  %550 = call fastcc i32 @intra_mode_info_cost_uv(%struct.AV1_COMP* %0, %struct.macroblock* %1, %struct.MB_MODE_INFO* %545, i8 zeroext %6, i32 %460) #6
  %551 = add nsw i32 %550, %549
  %552 = sext i32 %551 to i64
  %553 = load i32, i32* %115, align 8
  %554 = sext i32 %553 to i64
  %555 = mul nsw i64 %552, %554
  %556 = add nsw i64 %555, 256
  %557 = ashr i64 %556, 9
  %558 = load i64, i64* %120, align 8
  %559 = shl nsw i64 %558, 7
  %560 = add nsw i64 %557, %559
  %561 = icmp slt i64 %560, %529
  br i1 %561, label %562, label %570

562:                                              ; preds = %548
  %563 = getelementptr inbounds %struct.MB_MODE_INFO, %struct.MB_MODE_INFO* %545, i64 0, i32 18, i64 1
  %564 = load i8, i8* %563, align 1
  %565 = sext i8 %564 to i32
  %566 = load i32, i32* %119, align 8
  store i32 %566, i32* %105, align 8
  store i64 %558, i64* %107, align 8
  %567 = load i32, i32* %121, align 8
  store i32 %567, i32* %106, align 8
  %568 = ashr i64 %560, 5
  %569 = add nsw i64 %568, %560
  br label %570

570:                                              ; preds = %562, %548, %542
  %571 = phi i64 [ %532, %542 ], [ %532, %548 ], [ %569, %562 ]
  %572 = phi i64 [ %529, %542 ], [ %529, %548 ], [ %560, %562 ]
  %573 = phi i32 [ %528, %542 ], [ %528, %548 ], [ %565, %562 ]
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %118) #6
  br label %574

574:                                              ; preds = %570, %537
  %575 = phi i64 [ %571, %570 ], [ %532, %537 ]
  %576 = phi i64 [ %572, %570 ], [ %529, %537 ]
  %577 = phi i32 [ %573, %570 ], [ %528, %537 ]
  %578 = or i64 %530, 1
  %579 = add nuw nsw i64 %578, 2
  %580 = getelementptr inbounds [10 x i64], [10 x i64]* %13, i64 0, i64 %579
  %581 = load i64, i64* %580, align 8
  %582 = icmp sgt i64 %581, %575
  br i1 %582, label %583, label %588

583:                                              ; preds = %574
  %584 = add nsw i64 %578, -2
  %585 = getelementptr inbounds [10 x i64], [10 x i64]* %13, i64 0, i64 %584
  %586 = load i64, i64* %585, align 8
  %587 = icmp sgt i64 %586, %575
  br i1 %587, label %618, label %588

588:                                              ; preds = %583, %574
  %589 = trunc i32 %527 to i8
  %590 = sub i8 0, %589
  store i8 %590, i8* %462, align 1
  %591 = load %struct.MB_MODE_INFO**, %struct.MB_MODE_INFO*** %18, align 8
  %592 = load %struct.MB_MODE_INFO*, %struct.MB_MODE_INFO** %591, align 8
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %118) #6
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %118, i8 -86, i64 40, i1 false) #6
  %593 = call i32 @av1_txfm_uvrd(%struct.AV1_COMP* %0, %struct.macroblock* %1, %struct.RD_STATS* nonnull %11, i8 zeroext %6, i64 %576) #6
  %594 = icmp eq i32 %593, 0
  br i1 %594, label %615, label %595

595:                                              ; preds = %588
  %596 = load i32, i32* %119, align 8
  %597 = call fastcc i32 @intra_mode_info_cost_uv(%struct.AV1_COMP* %0, %struct.macroblock* %1, %struct.MB_MODE_INFO* %592, i8 zeroext %6, i32 %460) #6
  %598 = add nsw i32 %597, %596
  %599 = sext i32 %598 to i64
  %600 = load i32, i32* %115, align 8
  %601 = sext i32 %600 to i64
  %602 = mul nsw i64 %599, %601
  %603 = add nsw i64 %602, 256
  %604 = ashr i64 %603, 9
  %605 = load i64, i64* %120, align 8
  %606 = shl nsw i64 %605, 7
  %607 = add nsw i64 %604, %606
  %608 = icmp slt i64 %607, %576
  br i1 %608, label %609, label %615

609:                                              ; preds = %595
  %610 = getelementptr inbounds %struct.MB_MODE_INFO, %struct.MB_MODE_INFO* %592, i64 0, i32 18, i64 1
  %611 = load i8, i8* %610, align 1
  %612 = sext i8 %611 to i32
  %613 = load i32, i32* %119, align 8
  store i32 %613, i32* %105, align 8
  store i64 %605, i64* %107, align 8
  %614 = load i32, i32* %121, align 8
  store i32 %614, i32* %106, align 8
  br label %615

615:                                              ; preds = %609, %595, %588
  %616 = phi i64 [ %576, %588 ], [ %607, %609 ], [ %576, %595 ]
  %617 = phi i32 [ %577, %588 ], [ %612, %609 ], [ %577, %595 ]
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %118) #6
  br label %618

618:                                              ; preds = %615, %583
  %619 = phi i64 [ %576, %583 ], [ %616, %615 ]
  %620 = phi i32 [ %577, %583 ], [ %617, %615 ]
  %621 = add nuw nsw i64 %526, 2
  %622 = add nuw nsw i32 %527, 2
  %623 = icmp ult i64 %621, 4
  br i1 %623, label %525, label %650

624:                                              ; preds = %480
  %625 = load i32, i32* %114, align 8
  %626 = call fastcc i32 @intra_mode_info_cost_uv(%struct.AV1_COMP* %0, %struct.macroblock* %1, %struct.MB_MODE_INFO* %487, i8 zeroext %6, i32 %460) #6
  %627 = add nsw i32 %626, %625
  %628 = sext i32 %627 to i64
  %629 = load i32, i32* %115, align 8
  %630 = sext i32 %629 to i64
  %631 = mul nsw i64 %628, %630
  %632 = add nsw i64 %631, 256
  %633 = ashr i64 %632, 9
  %634 = load i64, i64* %116, align 8
  %635 = shl nsw i64 %634, 7
  %636 = add nsw i64 %633, %635
  %637 = icmp slt i64 %636, %511
  br i1 %637, label %638, label %644

638:                                              ; preds = %624
  %639 = getelementptr inbounds %struct.MB_MODE_INFO, %struct.MB_MODE_INFO* %487, i64 0, i32 18, i64 1
  %640 = load i8, i8* %639, align 1
  %641 = sext i8 %640 to i32
  %642 = load i32, i32* %114, align 8
  store i32 %642, i32* %105, align 8
  store i64 %634, i64* %107, align 8
  %643 = load i32, i32* %117, align 8
  store i32 %643, i32* %106, align 8
  br label %644

644:                                              ; preds = %638, %624, %480
  %645 = phi i64 [ %511, %480 ], [ %636, %638 ], [ %511, %624 ]
  %646 = phi i32 [ %512, %480 ], [ %641, %638 ], [ %512, %624 ]
  %647 = phi i64 [ 9223372036854775807, %480 ], [ %636, %638 ], [ %636, %624 ]
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %113) #6
  %648 = or i64 %470, 1
  %649 = getelementptr inbounds [10 x i64], [10 x i64]* %13, i64 0, i64 %648
  store i64 %647, i64* %649, align 8
  br label %519

650:                                              ; preds = %618
  %651 = trunc i32 %620 to i8
  store i8 %651, i8* %462, align 1
  %652 = load i32, i32* %105, align 8
  %653 = icmp eq i32 %652, 2147483647
  call void @llvm.lifetime.end.p0i8(i64 80, i8* nonnull %104) #6
  br i1 %653, label %713, label %658

654:                                              ; preds = %399, %396, %395
  %655 = load i64, i64* %15, align 8
  %656 = call i32 @av1_txfm_uvrd(%struct.AV1_COMP* %0, %struct.macroblock* %1, %struct.RD_STATS* nonnull %17, i8 zeroext %6, i64 %655) #6
  %657 = icmp eq i32 %656, 0
  br i1 %657, label %713, label %658

658:                                              ; preds = %650, %393, %654
  %659 = phi i32 [ %420, %650 ], [ %147, %393 ], [ %147, %654 ]
  %660 = load %struct.MB_MODE_INFO**, %struct.MB_MODE_INFO*** %18, align 8
  %661 = load %struct.MB_MODE_INFO*, %struct.MB_MODE_INFO** %660, align 8
  %662 = getelementptr inbounds %struct.MB_MODE_INFO, %struct.MB_MODE_INFO* %661, i64 0, i32 0
  %663 = load i8, i8* %662, align 8
  %664 = getelementptr inbounds %struct.MB_MODE_INFO, %struct.MB_MODE_INFO* %661, i64 0, i32 28
  %665 = load i16, i16* %664, align 1
  %666 = and i16 %665, 7
  %667 = zext i16 %666 to i64
  %668 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 2, i32 42, i64 %667
  %669 = load i32, i32* %668, align 4
  %670 = icmp eq i32 %669, 0
  br i1 %670, label %681, label %671

671:                                              ; preds = %658
  %672 = load i32, i32* %102, align 4
  %673 = load i32, i32* %103, align 8
  %674 = zext i8 %663 to i64
  %675 = sext i32 %672 to i64
  %676 = sext i32 %673 to i64
  %677 = getelementptr inbounds [22 x [2 x [2 x i8]]], [22 x [2 x [2 x i8]]]* @ss_size_lookup, i64 0, i64 %674, i64 %675, i64 %676
  %678 = load i8, i8* %677, align 1
  %679 = icmp eq i8 %678, 0
  %680 = zext i1 %679 to i64
  br label %689

681:                                              ; preds = %658
  %682 = zext i8 %663 to i64
  %683 = lshr i64 2033663, %682
  %684 = and i64 %683, 1
  %685 = icmp eq i64 %684, 0
  %686 = lshr i64 3083263, %682
  %687 = and i64 %686, 1
  %688 = select i1 %685, i64 0, i64 %687
  br label %689

689:                                              ; preds = %671, %681
  %690 = phi i64 [ %680, %671 ], [ %688, %681 ]
  %691 = and i64 %690, 255
  %692 = load i8, i8* %95, align 2
  %693 = zext i8 %692 to i64
  %694 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 20, i32 3, i64 %691, i64 %693, i64 %151
  %695 = load i32, i32* %694, align 4
  %696 = load i32, i32* %105, align 8
  %697 = call fastcc i32 @intra_mode_info_cost_uv(%struct.AV1_COMP* %0, %struct.macroblock* %1, %struct.MB_MODE_INFO* %20, i8 zeroext %6, i32 %695)
  %698 = add nsw i32 %697, %696
  %699 = sext i32 %698 to i64
  %700 = load i32, i32* %115, align 8
  %701 = sext i32 %700 to i64
  %702 = mul nsw i64 %699, %701
  %703 = add nsw i64 %702, 256
  %704 = ashr i64 %703, 9
  %705 = load i64, i64* %107, align 8
  %706 = shl nsw i64 %705, 7
  %707 = add nsw i64 %704, %706
  %708 = load i64, i64* %15, align 8
  %709 = icmp slt i64 %707, %708
  br i1 %709, label %710, label %713

710:                                              ; preds = %689
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %21, i8* align 8 %22, i64 184, i1 false)
  store i64 %707, i64* %15, align 8
  store i32 %698, i32* %2, align 4
  %711 = load i32, i32* %105, align 8
  store i32 %711, i32* %3, align 4
  store i64 %705, i64* %4, align 8
  %712 = load i32, i32* %106, align 8
  store i32 %712, i32* %5, align 4
  br label %713

713:                                              ; preds = %220, %517, %650, %394, %231, %228, %419, %654, %710, %689, %188, %180, %173, %161, %158
  %714 = phi i32 [ %147, %220 ], [ %420, %517 ], [ %420, %650 ], [ %147, %394 ], [ %147, %231 ], [ %147, %228 ], [ %420, %419 ], [ %147, %654 ], [ %659, %710 ], [ %659, %689 ], [ %147, %188 ], [ %147, %180 ], [ %147, %173 ], [ %147, %161 ], [ %147, %158 ]
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %88) #6
  %715 = add nuw nsw i64 %148, 1
  %716 = icmp eq i64 %715, 14
  br i1 %716, label %142, label %146

717:                                              ; preds = %142
  %718 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 20, i32 3
  %719 = load i8, i8* %718, align 1, !range !8
  %720 = load i8, i8* %22, align 8
  %721 = icmp eq i8 %719, 0
  br i1 %721, label %768, label %722

722:                                              ; preds = %717
  %723 = zext i8 %720 to i64
  %724 = add nsw i64 %723, -13
  %725 = icmp ugt i64 %724, 2
  %726 = icmp ugt i8 %720, 2
  %727 = and i1 %726, %725
  br i1 %727, label %728, label %768

728:                                              ; preds = %722
  %729 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 10
  %730 = load %struct.PALETTE_BUFFER*, %struct.PALETTE_BUFFER** %729, align 16
  %731 = getelementptr inbounds %struct.PALETTE_BUFFER, %struct.PALETTE_BUFFER* %730, i64 0, i32 0, i64 0
  %732 = load %struct.MB_MODE_INFO**, %struct.MB_MODE_INFO*** %18, align 8
  %733 = load %struct.MB_MODE_INFO*, %struct.MB_MODE_INFO** %732, align 8
  %734 = getelementptr inbounds %struct.MB_MODE_INFO, %struct.MB_MODE_INFO* %733, i64 0, i32 0
  %735 = load i8, i8* %734, align 8
  %736 = getelementptr inbounds %struct.MB_MODE_INFO, %struct.MB_MODE_INFO* %733, i64 0, i32 28
  %737 = load i16, i16* %736, align 1
  %738 = and i16 %737, 7
  %739 = zext i16 %738 to i64
  %740 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 2, i32 42, i64 %739
  %741 = load i32, i32* %740, align 4
  %742 = icmp eq i32 %741, 0
  br i1 %742, label %753, label %743

743:                                              ; preds = %728
  %744 = load i32, i32* %102, align 4
  %745 = load i32, i32* %103, align 8
  %746 = zext i8 %735 to i64
  %747 = sext i32 %744 to i64
  %748 = sext i32 %745 to i64
  %749 = getelementptr inbounds [22 x [2 x [2 x i8]]], [22 x [2 x [2 x i8]]]* @ss_size_lookup, i64 0, i64 %746, i64 %747, i64 %748
  %750 = load i8, i8* %749, align 1
  %751 = icmp eq i8 %750, 0
  %752 = zext i1 %751 to i64
  br label %761

753:                                              ; preds = %728
  %754 = zext i8 %735 to i64
  %755 = lshr i64 2033663, %754
  %756 = and i64 %755, 1
  %757 = icmp eq i64 %756, 0
  %758 = lshr i64 3083263, %754
  %759 = and i64 %758, 1
  %760 = select i1 %757, i64 0, i64 %759
  br label %761

761:                                              ; preds = %743, %753
  %762 = phi i64 [ %752, %743 ], [ %760, %753 ]
  %763 = and i64 %762, 255
  %764 = load i8, i8* %95, align 2
  %765 = zext i8 %764 to i64
  %766 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 20, i32 3, i64 %763, i64 %765, i64 0
  %767 = load i32, i32* %766, align 4
  call void @av1_rd_pick_palette_intra_sbuv(%struct.AV1_COMP* %0, %struct.macroblock* %1, i32 %767, i8* %731, %struct.MB_MODE_INFO* nonnull %14, i64* nonnull %15, i32* %2, i32* %3, i64* %4, i32* %5) #6
  br label %768

768:                                              ; preds = %722, %717, %142, %761
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %22, i8* nonnull align 8 %21, i64 184, i1 false)
  %769 = load i64, i64* %15, align 8
  call void @llvm.lifetime.end.p0i8(i64 112, i8* nonnull %86) #6
  br label %770

770:                                              ; preds = %768, %29
  %771 = phi i64 [ %769, %768 ], [ 9223372036854775807, %29 ]
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %23) #6
  call void @llvm.lifetime.end.p0i8(i64 184, i8* nonnull %21) #6
  ret i64 %771
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #1

declare void @av1_encode_intra_block_plane(%struct.AV1_COMP*, %struct.macroblock*, i8 zeroext, i32, i8 zeroext, i8 zeroext) local_unnamed_addr #2

; Function Attrs: inlinehint nounwind ssp uwtable
define internal fastcc void @prune_intra_mode_with_hog(%struct.macroblock* nocapture readonly, i8 zeroext, i8 zeroext, float, i8* nocapture, i32) unnamed_addr #3 {
  %7 = alloca [32 x float], align 16
  %8 = alloca [8 x float], align 16
  %9 = icmp ne i32 %5, 0
  %10 = bitcast [32 x float]* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 128, i8* nonnull %10) #6
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %10, i8 0, i64 128, i1 false)
  %11 = getelementptr inbounds [32 x float], [32 x float]* %7, i64 0, i64 0
  %12 = zext i1 %9 to i64
  %13 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %0, i64 0, i32 2, i32 4, i64 %12, i32 1
  %14 = load i32, i32* %13, align 4
  %15 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %0, i64 0, i32 2, i32 4, i64 %12, i32 2
  %16 = load i32, i32* %15, align 8
  %17 = zext i8 %1 to i64
  %18 = getelementptr inbounds [22 x i8], [22 x i8]* @block_size_high, i64 0, i64 %17
  %19 = load i8, i8* %18, align 1
  %20 = zext i8 %19 to i32
  %21 = getelementptr inbounds [22 x i8], [22 x i8]* @block_size_wide, i64 0, i64 %17
  %22 = load i8, i8* %21, align 1
  %23 = zext i8 %22 to i32
  %24 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %0, i64 0, i32 2, i32 20
  %25 = load i32, i32* %24, align 16
  %26 = icmp sgt i32 %25, -1
  %27 = ashr i32 %25, 3
  %28 = select i1 %26, i32 0, i32 %27
  %29 = add nsw i32 %28, %20
  %30 = ashr i32 %29, %16
  %31 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %0, i64 0, i32 2, i32 18
  %32 = load i32, i32* %31, align 8
  %33 = icmp sgt i32 %32, -1
  %34 = ashr i32 %32, 3
  %35 = select i1 %33, i32 0, i32 %34
  %36 = add nsw i32 %35, %23
  %37 = ashr i32 %36, %14
  %38 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %0, i64 0, i32 54, i64 %12
  %39 = load i8, i8* %38, align 1, !range !8
  %40 = icmp eq i8 %39, 0
  br i1 %40, label %167, label %41

41:                                               ; preds = %6
  %42 = zext i8 %2 to i64
  %43 = getelementptr inbounds [22 x i8], [22 x i8]* @block_size_wide, i64 0, i64 %42
  %44 = load i8, i8* %43, align 1
  %45 = zext i8 %44 to i32
  %46 = lshr i32 %45, %14
  %47 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %0, i64 0, i32 2, i32 0
  %48 = load i32, i32* %47, align 16
  %49 = getelementptr inbounds [22 x i8], [22 x i8]* @mi_size_high, i64 0, i64 %42
  %50 = load i8, i8* %49, align 1
  %51 = zext i8 %50 to i32
  %52 = add nsw i32 %51, -1
  %53 = and i32 %52, %48
  %54 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %0, i64 0, i32 2, i32 1
  %55 = load i32, i32* %54, align 4
  %56 = getelementptr inbounds [22 x i8], [22 x i8]* @mi_size_wide, i64 0, i64 %42
  %57 = load i8, i8* %56, align 1
  %58 = zext i8 %57 to i32
  %59 = add nsw i32 %58, -1
  %60 = and i32 %59, %55
  %61 = sub nsw i32 2, %16
  %62 = shl i32 %53, %61
  %63 = mul nsw i32 %62, %46
  %64 = sub nsw i32 2, %14
  %65 = shl i32 %60, %64
  %66 = add nsw i32 %65, %63
  %67 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %0, i64 0, i32 53
  %68 = load %struct.PixelLevelGradientInfo*, %struct.PixelLevelGradientInfo** %67, align 8
  %69 = shl nuw nsw i64 %12, 14
  %70 = getelementptr inbounds %struct.PixelLevelGradientInfo, %struct.PixelLevelGradientInfo* %68, i64 %69
  %71 = sext i32 %66 to i64
  %72 = getelementptr inbounds %struct.PixelLevelGradientInfo, %struct.PixelLevelGradientInfo* %70, i64 %71
  %73 = add nsw i32 %30, -1
  %74 = icmp sgt i32 %73, 1
  br i1 %74, label %75, label %87

75:                                               ; preds = %41
  %76 = add nsw i32 %37, -1
  %77 = icmp sgt i32 %76, 1
  %78 = getelementptr inbounds [32 x float], [32 x float]* %7, i64 0, i64 31
  %79 = sext i32 %46 to i64
  %80 = zext i32 %73 to i64
  %81 = zext i32 %76 to i64
  br label %82

82:                                               ; preds = %130, %75
  %83 = phi i64 [ 1, %75 ], [ %132, %130 ]
  %84 = phi float [ 0x3FB99999A0000000, %75 ], [ %131, %130 ]
  br i1 %77, label %85, label %130

85:                                               ; preds = %82
  %86 = mul nsw i64 %83, %79
  br label %134

87:                                               ; preds = %130, %41
  %88 = phi float [ 0x3FB99999A0000000, %41 ], [ %131, %130 ]
  %89 = insertelement <4 x float> undef, float %88, i32 0
  %90 = shufflevector <4 x float> %89, <4 x float> undef, <4 x i32> zeroinitializer
  %91 = bitcast [32 x float]* %7 to <4 x float>*
  %92 = load <4 x float>, <4 x float>* %91, align 16
  %93 = fdiv <4 x float> %92, %90
  %94 = bitcast [32 x float]* %7 to <4 x float>*
  store <4 x float> %93, <4 x float>* %94, align 16
  %95 = getelementptr inbounds [32 x float], [32 x float]* %7, i64 0, i64 4
  %96 = bitcast float* %95 to <4 x float>*
  %97 = load <4 x float>, <4 x float>* %96, align 16
  %98 = fdiv <4 x float> %97, %90
  %99 = bitcast float* %95 to <4 x float>*
  store <4 x float> %98, <4 x float>* %99, align 16
  %100 = getelementptr inbounds [32 x float], [32 x float]* %7, i64 0, i64 8
  %101 = bitcast float* %100 to <4 x float>*
  %102 = load <4 x float>, <4 x float>* %101, align 16
  %103 = fdiv <4 x float> %102, %90
  %104 = bitcast float* %100 to <4 x float>*
  store <4 x float> %103, <4 x float>* %104, align 16
  %105 = getelementptr inbounds [32 x float], [32 x float]* %7, i64 0, i64 12
  %106 = bitcast float* %105 to <4 x float>*
  %107 = load <4 x float>, <4 x float>* %106, align 16
  %108 = fdiv <4 x float> %107, %90
  %109 = bitcast float* %105 to <4 x float>*
  store <4 x float> %108, <4 x float>* %109, align 16
  %110 = getelementptr inbounds [32 x float], [32 x float]* %7, i64 0, i64 16
  %111 = bitcast float* %110 to <4 x float>*
  %112 = load <4 x float>, <4 x float>* %111, align 16
  %113 = fdiv <4 x float> %112, %90
  %114 = bitcast float* %110 to <4 x float>*
  store <4 x float> %113, <4 x float>* %114, align 16
  %115 = getelementptr inbounds [32 x float], [32 x float]* %7, i64 0, i64 20
  %116 = bitcast float* %115 to <4 x float>*
  %117 = load <4 x float>, <4 x float>* %116, align 16
  %118 = fdiv <4 x float> %117, %90
  %119 = bitcast float* %115 to <4 x float>*
  store <4 x float> %118, <4 x float>* %119, align 16
  %120 = getelementptr inbounds [32 x float], [32 x float]* %7, i64 0, i64 24
  %121 = bitcast float* %120 to <4 x float>*
  %122 = load <4 x float>, <4 x float>* %121, align 16
  %123 = fdiv <4 x float> %122, %90
  %124 = bitcast float* %120 to <4 x float>*
  store <4 x float> %123, <4 x float>* %124, align 16
  %125 = getelementptr inbounds [32 x float], [32 x float]* %7, i64 0, i64 28
  %126 = bitcast float* %125 to <4 x float>*
  %127 = load <4 x float>, <4 x float>* %126, align 16
  %128 = fdiv <4 x float> %127, %90
  %129 = bitcast float* %125 to <4 x float>*
  store <4 x float> %128, <4 x float>* %129, align 16
  br label %341

130:                                              ; preds = %163, %82
  %131 = phi float [ %84, %82 ], [ %164, %163 ]
  %132 = add nuw nsw i64 %83, 1
  %133 = icmp eq i64 %132, %80
  br i1 %133, label %87, label %82

134:                                              ; preds = %163, %85
  %135 = phi i64 [ 1, %85 ], [ %165, %163 ]
  %136 = phi float [ %84, %85 ], [ %164, %163 ]
  %137 = add nsw i64 %135, %86
  %138 = getelementptr inbounds %struct.PixelLevelGradientInfo, %struct.PixelLevelGradientInfo* %72, i64 %137
  %139 = getelementptr inbounds %struct.PixelLevelGradientInfo, %struct.PixelLevelGradientInfo* %138, i64 0, i32 0
  %140 = load i16, i16* %139, align 2
  %141 = icmp eq i16 %140, 0
  br i1 %141, label %163, label %142

142:                                              ; preds = %134
  %143 = uitofp i16 %140 to float
  %144 = fadd float %136, %143
  %145 = getelementptr inbounds %struct.PixelLevelGradientInfo, %struct.PixelLevelGradientInfo* %138, i64 0, i32 2
  %146 = load i8, i8* %145, align 1, !range !8
  %147 = icmp eq i8 %146, 0
  br i1 %147, label %153, label %148

148:                                              ; preds = %142
  %149 = lshr i16 %140, 1
  %150 = uitofp i16 %149 to float
  %151 = load float, float* %11, align 16
  %152 = fadd float %151, %150
  store float %152, float* %11, align 16
  br label %158

153:                                              ; preds = %142
  %154 = getelementptr inbounds %struct.PixelLevelGradientInfo, %struct.PixelLevelGradientInfo* %138, i64 0, i32 1
  %155 = load i8, i8* %154, align 2
  %156 = sext i8 %155 to i64
  %157 = getelementptr inbounds [32 x float], [32 x float]* %7, i64 0, i64 %156
  br label %158

158:                                              ; preds = %148, %153
  %159 = phi float* [ %157, %153 ], [ %78, %148 ]
  %160 = phi float [ %143, %153 ], [ %150, %148 ]
  %161 = load float, float* %159, align 4
  %162 = fadd float %161, %160
  store float %162, float* %159, align 4
  br label %163

163:                                              ; preds = %158, %134
  %164 = phi float [ %136, %134 ], [ %144, %158 ]
  %165 = add nuw nsw i64 %135, 1
  %166 = icmp eq i64 %165, %81
  br i1 %166, label %130, label %134

167:                                              ; preds = %6
  %168 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %0, i64 0, i32 0, i64 %12, i32 6, i32 4
  %169 = load i32, i32* %168, align 8
  %170 = sext i32 %169 to i64
  %171 = add nsw i32 %30, -1
  %172 = icmp sgt i32 %171, 1
  br i1 %172, label %173, label %187

173:                                              ; preds = %167
  %174 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %0, i64 0, i32 0, i64 %12, i32 6, i32 0
  %175 = load i8*, i8** %174, align 8
  %176 = add nsw i32 %37, -1
  %177 = icmp sgt i32 %176, 1
  %178 = sub nsw i32 0, %169
  %179 = sext i32 %178 to i64
  %180 = getelementptr inbounds [32 x float], [32 x float]* %7, i64 0, i64 31
  %181 = zext i32 %176 to i64
  br label %182

182:                                              ; preds = %230, %173
  %183 = phi i8* [ %175, %173 ], [ %186, %230 ]
  %184 = phi float [ 0x3FB99999A0000000, %173 ], [ %231, %230 ]
  %185 = phi i32 [ 1, %173 ], [ %232, %230 ]
  %186 = getelementptr inbounds i8, i8* %183, i64 %170
  br i1 %177, label %234, label %230

187:                                              ; preds = %230, %167
  %188 = phi float [ 0x3FB99999A0000000, %167 ], [ %231, %230 ]
  %189 = insertelement <4 x float> undef, float %188, i32 0
  %190 = shufflevector <4 x float> %189, <4 x float> undef, <4 x i32> zeroinitializer
  %191 = bitcast [32 x float]* %7 to <4 x float>*
  %192 = load <4 x float>, <4 x float>* %191, align 16
  %193 = fdiv <4 x float> %192, %190
  %194 = bitcast [32 x float]* %7 to <4 x float>*
  store <4 x float> %193, <4 x float>* %194, align 16
  %195 = getelementptr inbounds [32 x float], [32 x float]* %7, i64 0, i64 4
  %196 = bitcast float* %195 to <4 x float>*
  %197 = load <4 x float>, <4 x float>* %196, align 16
  %198 = fdiv <4 x float> %197, %190
  %199 = bitcast float* %195 to <4 x float>*
  store <4 x float> %198, <4 x float>* %199, align 16
  %200 = getelementptr inbounds [32 x float], [32 x float]* %7, i64 0, i64 8
  %201 = bitcast float* %200 to <4 x float>*
  %202 = load <4 x float>, <4 x float>* %201, align 16
  %203 = fdiv <4 x float> %202, %190
  %204 = bitcast float* %200 to <4 x float>*
  store <4 x float> %203, <4 x float>* %204, align 16
  %205 = getelementptr inbounds [32 x float], [32 x float]* %7, i64 0, i64 12
  %206 = bitcast float* %205 to <4 x float>*
  %207 = load <4 x float>, <4 x float>* %206, align 16
  %208 = fdiv <4 x float> %207, %190
  %209 = bitcast float* %205 to <4 x float>*
  store <4 x float> %208, <4 x float>* %209, align 16
  %210 = getelementptr inbounds [32 x float], [32 x float]* %7, i64 0, i64 16
  %211 = bitcast float* %210 to <4 x float>*
  %212 = load <4 x float>, <4 x float>* %211, align 16
  %213 = fdiv <4 x float> %212, %190
  %214 = bitcast float* %210 to <4 x float>*
  store <4 x float> %213, <4 x float>* %214, align 16
  %215 = getelementptr inbounds [32 x float], [32 x float]* %7, i64 0, i64 20
  %216 = bitcast float* %215 to <4 x float>*
  %217 = load <4 x float>, <4 x float>* %216, align 16
  %218 = fdiv <4 x float> %217, %190
  %219 = bitcast float* %215 to <4 x float>*
  store <4 x float> %218, <4 x float>* %219, align 16
  %220 = getelementptr inbounds [32 x float], [32 x float]* %7, i64 0, i64 24
  %221 = bitcast float* %220 to <4 x float>*
  %222 = load <4 x float>, <4 x float>* %221, align 16
  %223 = fdiv <4 x float> %222, %190
  %224 = bitcast float* %220 to <4 x float>*
  store <4 x float> %223, <4 x float>* %224, align 16
  %225 = getelementptr inbounds [32 x float], [32 x float]* %7, i64 0, i64 28
  %226 = bitcast float* %225 to <4 x float>*
  %227 = load <4 x float>, <4 x float>* %226, align 16
  %228 = fdiv <4 x float> %227, %190
  %229 = bitcast float* %225 to <4 x float>*
  store <4 x float> %228, <4 x float>* %229, align 16
  br label %341

230:                                              ; preds = %338, %182
  %231 = phi float [ %184, %182 ], [ %339, %338 ]
  %232 = add nuw nsw i32 %185, 1
  %233 = icmp eq i32 %232, %171
  br i1 %233, label %187, label %182

234:                                              ; preds = %182, %338
  %235 = phi i64 [ %242, %338 ], [ 1, %182 ]
  %236 = phi float [ %339, %338 ], [ %184, %182 ]
  %237 = getelementptr inbounds i8, i8* %183, i64 %235
  %238 = add nsw i64 %235, %170
  %239 = getelementptr inbounds i8, i8* %186, i64 %238
  %240 = add nsw i64 %235, -1
  %241 = getelementptr inbounds i8, i8* %186, i64 %240
  %242 = add nuw nsw i64 %235, 1
  %243 = getelementptr inbounds i8, i8* %186, i64 %242
  %244 = getelementptr inbounds i8, i8* %243, i64 %179
  %245 = load i8, i8* %244, align 1
  %246 = zext i8 %245 to i32
  %247 = load i8, i8* %243, align 1
  %248 = zext i8 %247 to i32
  %249 = getelementptr inbounds i8, i8* %243, i64 %170
  %250 = load i8, i8* %249, align 1
  %251 = zext i8 %250 to i32
  %252 = getelementptr inbounds i8, i8* %241, i64 %179
  %253 = load i8, i8* %252, align 1
  %254 = zext i8 %253 to i32
  %255 = load i8, i8* %241, align 1
  %256 = zext i8 %255 to i32
  %257 = getelementptr inbounds i8, i8* %241, i64 %170
  %258 = load i8, i8* %257, align 1
  %259 = zext i8 %258 to i32
  %260 = sub nsw i32 %248, %256
  %261 = shl nsw i32 %260, 1
  %262 = add nuw nsw i32 %251, %246
  %263 = sub nsw i32 %262, %254
  %264 = sub nsw i32 %263, %259
  %265 = add nsw i32 %264, %261
  %266 = getelementptr inbounds i8, i8* %239, i64 -1
  %267 = load i8, i8* %266, align 1
  %268 = zext i8 %267 to i32
  %269 = load i8, i8* %239, align 1
  %270 = zext i8 %269 to i32
  %271 = getelementptr inbounds i8, i8* %239, i64 1
  %272 = load i8, i8* %271, align 1
  %273 = zext i8 %272 to i32
  %274 = getelementptr inbounds i8, i8* %237, i64 -1
  %275 = load i8, i8* %274, align 1
  %276 = zext i8 %275 to i32
  %277 = load i8, i8* %237, align 1
  %278 = zext i8 %277 to i32
  %279 = getelementptr inbounds i8, i8* %237, i64 1
  %280 = load i8, i8* %279, align 1
  %281 = zext i8 %280 to i32
  %282 = sub nsw i32 %270, %278
  %283 = shl nsw i32 %282, 1
  %284 = add nuw nsw i32 %273, %268
  %285 = sub nsw i32 %284, %276
  %286 = sub nsw i32 %285, %281
  %287 = add nsw i32 %286, %283
  %288 = icmp eq i32 %265, 0
  %289 = or i32 %287, %265
  %290 = icmp eq i32 %289, 0
  br i1 %290, label %338, label %291

291:                                              ; preds = %234
  %292 = icmp slt i32 %265, 0
  %293 = sub nsw i32 0, %265
  %294 = select i1 %292, i32 %293, i32 %265
  %295 = icmp slt i32 %287, 0
  %296 = sub nsw i32 0, %287
  %297 = select i1 %295, i32 %296, i32 %287
  %298 = add nuw nsw i32 %297, %294
  %299 = icmp eq i32 %298, 0
  br i1 %299, label %338, label %300

300:                                              ; preds = %291
  %301 = sitofp i32 %298 to float
  %302 = fadd float %236, %301
  br i1 %288, label %303, label %310

303:                                              ; preds = %300
  %304 = lshr i32 %298, 1
  %305 = sitofp i32 %304 to float
  %306 = load float, float* %11, align 16
  %307 = fadd float %306, %305
  store float %307, float* %11, align 16
  %308 = load float, float* %180, align 4
  %309 = fadd float %308, %305
  store float %309, float* %180, align 4
  br label %338

310:                                              ; preds = %300
  %311 = shl nsw i32 %287, 16
  %312 = sdiv i32 %311, %265
  %313 = icmp slt i32 %312, -72302
  br i1 %313, label %320, label %314

314:                                              ; preds = %310
  %315 = icmp slt i32 %312, -3193
  br i1 %315, label %320, label %316

316:                                              ; preds = %314
  %317 = icmp slt i32 %312, 59426
  %318 = select i1 %317, i64 16, i64 24
  %319 = select i1 %317, i64 23, i64 31
  br label %320

320:                                              ; preds = %316, %314, %310
  %321 = phi i64 [ 0, %310 ], [ 8, %314 ], [ %318, %316 ]
  %322 = phi i64 [ 7, %310 ], [ 15, %314 ], [ %319, %316 ]
  br label %323

323:                                              ; preds = %328, %320
  %324 = phi i64 [ %321, %320 ], [ %329, %328 ]
  %325 = getelementptr inbounds [32 x i32], [32 x i32]* @get_hist_bin_idx.thresholds, i64 0, i64 %324
  %326 = load i32, i32* %325, align 4
  %327 = icmp sgt i32 %312, %326
  br i1 %327, label %328, label %331

328:                                              ; preds = %323
  %329 = add nuw nsw i64 %324, 1
  %330 = icmp ult i64 %324, %322
  br i1 %330, label %323, label %331

331:                                              ; preds = %328, %323
  %332 = phi i64 [ 31, %328 ], [ %324, %323 ]
  %333 = shl i64 %332, 32
  %334 = ashr exact i64 %333, 32
  %335 = getelementptr inbounds [32 x float], [32 x float]* %7, i64 0, i64 %334
  %336 = load float, float* %335, align 4
  %337 = fadd float %336, %301
  store float %337, float* %335, align 4
  br label %338

338:                                              ; preds = %331, %303, %291, %234
  %339 = phi float [ %236, %234 ], [ %236, %291 ], [ %302, %331 ], [ %302, %303 ]
  %340 = icmp eq i64 %242, %181
  br i1 %340, label %230, label %234

341:                                              ; preds = %87, %187
  %342 = add nsw i32 %16, 1
  %343 = add nsw i32 %14, 1
  %344 = mul nsw i32 %342, %343
  %345 = sitofp i32 %344 to float
  %346 = insertelement <4 x float> undef, float %345, i32 0
  %347 = shufflevector <4 x float> %346, <4 x float> undef, <4 x i32> zeroinitializer
  %348 = bitcast [32 x float]* %7 to <4 x float>*
  %349 = load <4 x float>, <4 x float>* %348, align 16
  %350 = fmul <4 x float> %349, %347
  %351 = bitcast [32 x float]* %7 to <4 x float>*
  store <4 x float> %350, <4 x float>* %351, align 16
  %352 = getelementptr inbounds [32 x float], [32 x float]* %7, i64 0, i64 4
  %353 = bitcast float* %352 to <4 x float>*
  %354 = load <4 x float>, <4 x float>* %353, align 16
  %355 = fmul <4 x float> %354, %347
  %356 = bitcast float* %352 to <4 x float>*
  store <4 x float> %355, <4 x float>* %356, align 16
  %357 = getelementptr inbounds [32 x float], [32 x float]* %7, i64 0, i64 8
  %358 = bitcast float* %357 to <4 x float>*
  %359 = load <4 x float>, <4 x float>* %358, align 16
  %360 = fmul <4 x float> %359, %347
  %361 = bitcast float* %357 to <4 x float>*
  store <4 x float> %360, <4 x float>* %361, align 16
  %362 = getelementptr inbounds [32 x float], [32 x float]* %7, i64 0, i64 12
  %363 = bitcast float* %362 to <4 x float>*
  %364 = load <4 x float>, <4 x float>* %363, align 16
  %365 = fmul <4 x float> %364, %347
  %366 = bitcast float* %362 to <4 x float>*
  store <4 x float> %365, <4 x float>* %366, align 16
  %367 = getelementptr inbounds [32 x float], [32 x float]* %7, i64 0, i64 16
  %368 = bitcast float* %367 to <4 x float>*
  %369 = load <4 x float>, <4 x float>* %368, align 16
  %370 = fmul <4 x float> %369, %347
  %371 = bitcast float* %367 to <4 x float>*
  store <4 x float> %370, <4 x float>* %371, align 16
  %372 = getelementptr inbounds [32 x float], [32 x float]* %7, i64 0, i64 20
  %373 = bitcast float* %372 to <4 x float>*
  %374 = load <4 x float>, <4 x float>* %373, align 16
  %375 = fmul <4 x float> %374, %347
  %376 = bitcast float* %372 to <4 x float>*
  store <4 x float> %375, <4 x float>* %376, align 16
  %377 = getelementptr inbounds [32 x float], [32 x float]* %7, i64 0, i64 24
  %378 = bitcast float* %377 to <4 x float>*
  %379 = load <4 x float>, <4 x float>* %378, align 16
  %380 = fmul <4 x float> %379, %347
  %381 = bitcast float* %377 to <4 x float>*
  store <4 x float> %380, <4 x float>* %381, align 16
  %382 = getelementptr inbounds [32 x float], [32 x float]* %7, i64 0, i64 28
  %383 = bitcast float* %382 to <4 x float>*
  %384 = load <4 x float>, <4 x float>* %383, align 16
  %385 = fmul <4 x float> %384, %347
  %386 = bitcast float* %382 to <4 x float>*
  store <4 x float> %385, <4 x float>* %386, align 16
  %387 = bitcast [8 x float]* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %387) #6
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %387, i8 0, i64 32, i1 false)
  %388 = load void (float*, %struct.NN_CONFIG*, i32, float*)*, void (float*, %struct.NN_CONFIG*, i32, float*)** @av1_nn_predict, align 8
  %389 = getelementptr inbounds [8 x float], [8 x float]* %8, i64 0, i64 0
  call void %388(float* nonnull %11, %struct.NN_CONFIG* bitcast ({ i32, i32, i32, [10 x i32], [4 x i8], <{ float*, [10 x float*] }>, <{ float*, [10 x float*] }> }* @av1_intra_hog_model_nnconfig to %struct.NN_CONFIG*), i32 1, float* nonnull %389) #6
  %390 = load float, float* %389, align 16
  %391 = fcmp ugt float %390, %3
  br i1 %391, label %394, label %392

392:                                              ; preds = %341
  %393 = getelementptr inbounds i8, i8* %4, i64 1
  store i8 1, i8* %393, align 1
  br label %394

394:                                              ; preds = %341, %392
  %395 = getelementptr inbounds [8 x float], [8 x float]* %8, i64 0, i64 1
  %396 = load float, float* %395, align 4
  %397 = fcmp ugt float %396, %3
  br i1 %397, label %400, label %398

398:                                              ; preds = %394
  %399 = getelementptr inbounds i8, i8* %4, i64 2
  store i8 1, i8* %399, align 1
  br label %400

400:                                              ; preds = %398, %394
  %401 = getelementptr inbounds [8 x float], [8 x float]* %8, i64 0, i64 2
  %402 = load float, float* %401, align 8
  %403 = fcmp ugt float %402, %3
  br i1 %403, label %406, label %404

404:                                              ; preds = %400
  %405 = getelementptr inbounds i8, i8* %4, i64 3
  store i8 1, i8* %405, align 1
  br label %406

406:                                              ; preds = %404, %400
  %407 = getelementptr inbounds [8 x float], [8 x float]* %8, i64 0, i64 3
  %408 = load float, float* %407, align 4
  %409 = fcmp ugt float %408, %3
  br i1 %409, label %412, label %410

410:                                              ; preds = %406
  %411 = getelementptr inbounds i8, i8* %4, i64 4
  store i8 1, i8* %411, align 1
  br label %412

412:                                              ; preds = %410, %406
  %413 = getelementptr inbounds [8 x float], [8 x float]* %8, i64 0, i64 4
  %414 = load float, float* %413, align 16
  %415 = fcmp ugt float %414, %3
  br i1 %415, label %418, label %416

416:                                              ; preds = %412
  %417 = getelementptr inbounds i8, i8* %4, i64 5
  store i8 1, i8* %417, align 1
  br label %418

418:                                              ; preds = %416, %412
  %419 = getelementptr inbounds [8 x float], [8 x float]* %8, i64 0, i64 5
  %420 = load float, float* %419, align 4
  %421 = fcmp ugt float %420, %3
  br i1 %421, label %424, label %422

422:                                              ; preds = %418
  %423 = getelementptr inbounds i8, i8* %4, i64 6
  store i8 1, i8* %423, align 1
  br label %424

424:                                              ; preds = %422, %418
  %425 = getelementptr inbounds [8 x float], [8 x float]* %8, i64 0, i64 6
  %426 = load float, float* %425, align 8
  %427 = fcmp ugt float %426, %3
  br i1 %427, label %430, label %428

428:                                              ; preds = %424
  %429 = getelementptr inbounds i8, i8* %4, i64 7
  store i8 1, i8* %429, align 1
  br label %430

430:                                              ; preds = %428, %424
  %431 = getelementptr inbounds [8 x float], [8 x float]* %8, i64 0, i64 7
  %432 = load float, float* %431, align 4
  %433 = fcmp ugt float %432, %3
  br i1 %433, label %436, label %434

434:                                              ; preds = %430
  %435 = getelementptr inbounds i8, i8* %4, i64 8
  store i8 1, i8* %435, align 1
  br label %436

436:                                              ; preds = %434, %430
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %387) #6
  call void @llvm.lifetime.end.p0i8(i64 128, i8* nonnull %10) #6
  ret void
}

declare i32 @av1_txfm_uvrd(%struct.AV1_COMP*, %struct.macroblock*, %struct.RD_STATS*, i8 zeroext, i64) local_unnamed_addr #2

; Function Attrs: inlinehint nounwind ssp uwtable
define internal fastcc i32 @intra_mode_info_cost_uv(%struct.AV1_COMP* nocapture readonly, %struct.macroblock*, %struct.MB_MODE_INFO*, i8 zeroext, i32) unnamed_addr #3 {
  %6 = alloca [16 x i16], align 16
  %7 = getelementptr inbounds %struct.MB_MODE_INFO, %struct.MB_MODE_INFO* %2, i64 0, i32 22
  %8 = getelementptr inbounds %struct.MB_MODE_INFO, %struct.MB_MODE_INFO* %2, i64 0, i32 22, i32 1, i64 1
  %9 = load i8, i8* %8, align 1
  %10 = icmp ne i8 %9, 0
  %11 = getelementptr inbounds %struct.MB_MODE_INFO, %struct.MB_MODE_INFO* %2, i64 0, i32 3
  %12 = load i8, i8* %11, align 1
  %13 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 20, i32 3
  %14 = load i8, i8* %13, align 1, !range !8
  %15 = getelementptr inbounds %struct.MB_MODE_INFO, %struct.MB_MODE_INFO* %2, i64 0, i32 0
  %16 = load i8, i8* %15, align 8
  %17 = icmp eq i8 %14, 0
  br i1 %17, label %79, label %18

18:                                               ; preds = %5
  %19 = zext i8 %16 to i64
  %20 = add nsw i64 %19, -13
  %21 = icmp ult i64 %20, 3
  br i1 %21, label %79, label %22

22:                                               ; preds = %18
  %23 = icmp ugt i8 %16, 2
  %24 = icmp eq i8 %12, 0
  %25 = and i1 %24, %23
  br i1 %25, label %26, label %79

26:                                               ; preds = %22
  %27 = getelementptr inbounds %struct.MB_MODE_INFO, %struct.MB_MODE_INFO* %2, i64 0, i32 22, i32 1, i64 0
  %28 = load i8, i8* %27, align 2
  %29 = icmp ne i8 %28, 0
  %30 = zext i1 %29 to i64
  %31 = zext i1 %10 to i64
  %32 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 20, i32 14, i64 %30, i64 %31
  %33 = load i32, i32* %32, align 4
  %34 = add nsw i32 %33, %4
  br i1 %10, label %35, label %79

35:                                               ; preds = %26
  %36 = zext i8 %3 to i64
  %37 = getelementptr inbounds [22 x i8], [22 x i8]* @num_pels_log2_lookup, i64 0, i64 %36
  %38 = load i8, i8* %37, align 1
  %39 = zext i8 %38 to i64
  %40 = add nsw i64 %39, -6
  %41 = zext i8 %9 to i32
  %42 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 2
  %43 = add nsw i32 %41, -2
  %44 = sext i32 %43 to i64
  %45 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 20, i32 10, i64 %40, i64 %44
  %46 = load i32, i32* %45, align 4
  %47 = tail call i32 @llvm.ctlz.i32(i32 %41, i1 true) #6, !range !9
  %48 = sub nuw nsw i32 32, %47
  %49 = icmp eq i32 %48, 0
  br i1 %49, label %61, label %50

50:                                               ; preds = %35
  %51 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 2, i32 4, i64 1, i32 8
  %52 = load i8*, i8** %51, align 16
  %53 = load i8, i8* %52, align 1
  %54 = zext i8 %53 to i32
  %55 = shl i32 1, %48
  %56 = sub nsw i32 %55, %41
  %57 = icmp sgt i32 %56, %54
  %58 = shl nuw nsw i32 %48, 9
  %59 = add nsw i32 %58, -512
  %60 = select i1 %57, i32 %59, i32 %58
  br label %61

61:                                               ; preds = %35, %50
  %62 = phi i32 [ %60, %50 ], [ 0, %35 ]
  %63 = bitcast [16 x i16]* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %63) #6
  %64 = getelementptr inbounds [16 x i16], [16 x i16]* %6, i64 0, i64 0
  %65 = bitcast [16 x i16]* %6 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %65, i8 -86, i64 32, i1 false)
  %66 = call i32 @av1_get_palette_cache(%struct.macroblockd* %42, i32 1, i16* nonnull %64) #6
  %67 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 35
  %68 = load %struct.SequenceHeader*, %struct.SequenceHeader** %67, align 16
  %69 = getelementptr inbounds %struct.SequenceHeader, %struct.SequenceHeader* %68, i64 0, i32 25
  %70 = load i32, i32* %69, align 8
  %71 = call i32 @av1_palette_color_cost_uv(%struct.PALETTE_MODE_INFO* %7, i16* nonnull %64, i32 %66, i32 %70) #6
  %72 = getelementptr inbounds %struct.MB_MODE_INFO, %struct.MB_MODE_INFO* %2, i64 0, i32 24
  %73 = load i8, i8* %72, align 1
  %74 = call i32 @av1_cost_color_map(%struct.macroblock* %1, i32 1, i8 zeroext %3, i8 zeroext %73, i8 zeroext 0) #6
  %75 = add i32 %46, %34
  %76 = add i32 %75, %62
  %77 = add i32 %76, %71
  %78 = add i32 %77, %74
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %63) #6
  br label %79

79:                                               ; preds = %18, %5, %26, %61, %22
  %80 = phi i32 [ %4, %22 ], [ %78, %61 ], [ %34, %26 ], [ %4, %5 ], [ %4, %18 ]
  %81 = zext i8 %12 to i64
  %82 = getelementptr inbounds [16 x i8], [16 x i8]* @get_uv_mode.uv2y, i64 0, i64 %81
  %83 = load i8, i8* %82, align 1
  %84 = add i8 %83, -1
  %85 = icmp ugt i8 %84, 7
  %86 = icmp ult i8 %3, 3
  %87 = or i1 %86, %85
  br i1 %87, label %97, label %88

88:                                               ; preds = %79
  %89 = add nsw i64 %81, -1
  %90 = getelementptr inbounds %struct.MB_MODE_INFO, %struct.MB_MODE_INFO* %2, i64 0, i32 18, i64 1
  %91 = load i8, i8* %90, align 1
  %92 = sext i8 %91 to i64
  %93 = add nsw i64 %92, 3
  %94 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 20, i32 6, i64 %89, i64 %93
  %95 = load i32, i32* %94, align 4
  %96 = add nsw i32 %95, %80
  br label %97

97:                                               ; preds = %79, %88
  %98 = phi i32 [ %96, %88 ], [ %80, %79 ]
  ret i32 %98
}

declare void @av1_rd_pick_palette_intra_sbuv(%struct.AV1_COMP*, %struct.macroblock*, i32, i8*, %struct.MB_MODE_INFO*, i64*, i32*, i32*, i64*, i32*) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden i32 @av1_search_palette_mode(%struct.IntraModeSearchState*, %struct.AV1_COMP*, %struct.macroblock*, i8 zeroext, i32, %struct.PICK_MODE_CONTEXT*, %struct.RD_STATS* nocapture, i64) local_unnamed_addr #0 {
  %9 = alloca i64, align 8
  %10 = alloca i64, align 8
  %11 = alloca %struct.MB_MODE_INFO, align 8
  %12 = alloca [1024 x i8], align 16
  %13 = alloca [1024 x i8], align 16
  %14 = alloca %struct.RD_STATS, align 16
  %15 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %2, i64 0, i32 2, i32 6
  %16 = load %struct.MB_MODE_INFO**, %struct.MB_MODE_INFO*** %15, align 8
  %17 = load %struct.MB_MODE_INFO*, %struct.MB_MODE_INFO** %16, align 8
  %18 = getelementptr inbounds %struct.MB_MODE_INFO, %struct.MB_MODE_INFO* %17, i64 0, i32 22
  %19 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %1, i64 0, i32 8, i32 35
  %20 = load %struct.SequenceHeader*, %struct.SequenceHeader** %19, align 16
  %21 = getelementptr inbounds %struct.SequenceHeader, %struct.SequenceHeader* %20, i64 0, i32 27
  %22 = load i8, i8* %21, align 1
  %23 = icmp eq i8 %22, 0
  %24 = bitcast i64* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %24) #6
  store i64 %7, i64* %9, align 8
  %25 = bitcast i64* %10 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %25) #6
  store i64 9223372036854775807, i64* %10, align 8
  %26 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %2, i64 0, i32 10
  %27 = load %struct.PALETTE_BUFFER*, %struct.PALETTE_BUFFER** %26, align 16
  %28 = getelementptr inbounds %struct.PALETTE_BUFFER, %struct.PALETTE_BUFFER* %27, i64 0, i32 0, i64 0
  %29 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %2, i64 0, i32 2, i32 4, i64 0, i32 8
  %30 = load i8*, i8** %29, align 16
  %31 = getelementptr inbounds %struct.MB_MODE_INFO, %struct.MB_MODE_INFO* %11, i64 0, i32 0
  call void @llvm.lifetime.start.p0i8(i64 184, i8* nonnull %31) #6
  %32 = getelementptr inbounds %struct.MB_MODE_INFO, %struct.MB_MODE_INFO* %17, i64 0, i32 0
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %31, i8* align 8 %32, i64 184, i1 false)
  %33 = getelementptr inbounds [1024 x i8], [1024 x i8]* %12, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 1024, i8* nonnull %33) #6
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %33, i8 -86, i64 1024, i1 false)
  %34 = getelementptr inbounds [1024 x i8], [1024 x i8]* %13, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 1024, i8* nonnull %34) #6
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %34, i8 -86, i64 1024, i1 false)
  %35 = zext i8 %3 to i64
  %36 = getelementptr inbounds [22 x i8], [22 x i8]* @size_group_lookup, i64 0, i64 %35
  %37 = load i8, i8* %36, align 1
  %38 = zext i8 %37 to i64
  %39 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %2, i64 0, i32 20, i32 1, i64 %38, i64 0
  %40 = getelementptr inbounds [22 x i8], [22 x i8]* @block_size_high, i64 0, i64 %35
  %41 = load i8, i8* %40, align 1
  %42 = zext i8 %41 to i64
  %43 = getelementptr inbounds [22 x i8], [22 x i8]* @block_size_wide, i64 0, i64 %35
  %44 = load i8, i8* %43, align 1
  %45 = zext i8 %44 to i64
  %46 = getelementptr inbounds %struct.MB_MODE_INFO, %struct.MB_MODE_INFO* %17, i64 0, i32 2
  store i8 0, i8* %46, align 2
  %47 = getelementptr inbounds %struct.MB_MODE_INFO, %struct.MB_MODE_INFO* %17, i64 0, i32 3
  store i8 0, i8* %47, align 1
  %48 = getelementptr inbounds %struct.MB_MODE_INFO, %struct.MB_MODE_INFO* %17, i64 0, i32 6, i64 0
  store i8 0, i8* %48, align 8
  %49 = getelementptr inbounds %struct.MB_MODE_INFO, %struct.MB_MODE_INFO* %17, i64 0, i32 6, i64 1
  store i8 -1, i8* %49, align 1
  %50 = getelementptr inbounds %struct.MB_MODE_INFO, %struct.MB_MODE_INFO* %17, i64 0, i32 22, i32 1
  %51 = bitcast [2 x i8]* %50 to i16*
  store i16 0, i16* %51, align 2
  %52 = bitcast %struct.RD_STATS* %14 to i8*
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %52) #6
  %53 = getelementptr inbounds %struct.RD_STATS, %struct.RD_STATS* %14, i64 0, i32 0
  %54 = getelementptr inbounds %struct.RD_STATS, %struct.RD_STATS* %14, i64 0, i32 1
  %55 = bitcast %struct.RD_STATS* %14 to <2 x i64>*
  store <2 x i64> <i64 -6148914691236517206, i64 9223372036854775807>, <2 x i64>* %55, align 16
  store i32 2147483647, i32* %53, align 16
  %56 = getelementptr inbounds %struct.RD_STATS, %struct.RD_STATS* %14, i64 0, i32 2
  %57 = bitcast i64* %56 to <2 x i64>*
  store <2 x i64> <i64 9223372036854775807, i64 9223372036854775807>, <2 x i64>* %57, align 16
  %58 = getelementptr inbounds %struct.RD_STATS, %struct.RD_STATS* %14, i64 0, i32 4
  store i32 0, i32* %58, align 16
  %59 = getelementptr inbounds %struct.RD_STATS, %struct.RD_STATS* %14, i64 0, i32 5
  store i32 0, i32* %59, align 4
  %60 = load i32, i32* %39, align 4
  call void @av1_rd_pick_palette_intra_sby(%struct.AV1_COMP* %1, %struct.macroblock* %2, i8 zeroext %3, i32 %60, %struct.MB_MODE_INFO* nonnull %11, i8* %28, i64* nonnull %9, i64* nonnull %10, i32* nonnull %53, i32* null, i64* %54, i32* %58, i32* null, %struct.PICK_MODE_CONTEXT* %5, i8* nonnull %33, i8* nonnull %34) #6
  %61 = load i32, i32* %53, align 16
  %62 = icmp eq i32 %61, 2147483647
  br i1 %62, label %233, label %63

63:                                               ; preds = %8
  %64 = getelementptr inbounds [2 x i8], [2 x i8]* %50, i64 0, i64 0
  %65 = load i8, i8* %64, align 2
  %66 = icmp eq i8 %65, 0
  br i1 %66, label %233, label %67

67:                                               ; preds = %63
  %68 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %2, i64 0, i32 58, i32 1, i64 0
  %69 = getelementptr inbounds [22 x i8], [22 x i8]* @num_pels_log2_lookup, i64 0, i64 %35
  %70 = load i8, i8* %69, align 1
  %71 = zext i8 %70 to i32
  %72 = add nsw i32 %71, -4
  %73 = shl i32 1, %72
  %74 = sext i32 %73 to i64
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %68, i8* nonnull align 16 %33, i64 %74, i1 false)
  %75 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %2, i64 0, i32 2, i32 15
  %76 = load i8*, i8** %75, align 8
  %77 = getelementptr inbounds %struct.PICK_MODE_CONTEXT, %struct.PICK_MODE_CONTEXT* %5, i64 0, i32 10
  %78 = load i32, i32* %77, align 8
  %79 = sext i32 %78 to i64
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %76, i8* nonnull align 16 %34, i64 %79, i1 false)
  %80 = mul nuw nsw i64 %45, %42
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %30, i8* align 1 %28, i64 %80, i1 false)
  %81 = load i32, i32* %58, align 16
  %82 = load i64, i64* %54, align 8
  %83 = load i32, i32* %53, align 16
  %84 = add i32 %83, %4
  br i1 %23, label %85, label %162

85:                                               ; preds = %67
  %86 = getelementptr inbounds %struct.IntraModeSearchState, %struct.IntraModeSearchState* %0, i64 0, i32 4
  %87 = load i32, i32* %86, align 4
  %88 = icmp eq i32 %87, 2147483647
  br i1 %88, label %92, label %89

89:                                               ; preds = %85
  %90 = getelementptr inbounds %struct.IntraModeSearchState, %struct.IntraModeSearchState* %0, i64 0, i32 8
  %91 = load i8, i8* %90, align 4
  br label %134

92:                                               ; preds = %85
  %93 = load %struct.MB_MODE_INFO**, %struct.MB_MODE_INFO*** %15, align 8
  %94 = load %struct.MB_MODE_INFO*, %struct.MB_MODE_INFO** %93, align 8
  %95 = getelementptr inbounds %struct.MB_MODE_INFO, %struct.MB_MODE_INFO* %94, i64 0, i32 28
  %96 = load i16, i16* %95, align 1
  %97 = and i16 %96, 7
  %98 = zext i16 %97 to i64
  %99 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %2, i64 0, i32 2, i32 42, i64 %98
  %100 = load i32, i32* %99, align 4
  %101 = icmp eq i32 %100, 0
  br i1 %101, label %102, label %120

102:                                              ; preds = %92
  %103 = getelementptr inbounds %struct.MB_MODE_INFO, %struct.MB_MODE_INFO* %94, i64 0, i32 0
  %104 = load i8, i8* %103, align 8
  %105 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %2, i64 0, i32 2, i32 4, i64 1, i32 1
  %106 = load i32, i32* %105, align 4
  %107 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %2, i64 0, i32 2, i32 4, i64 1, i32 2
  %108 = load i32, i32* %107, align 8
  %109 = zext i8 %104 to i64
  %110 = sext i32 %106 to i64
  %111 = sext i32 %108 to i64
  %112 = getelementptr inbounds [22 x [2 x [2 x i8]]], [22 x [2 x [2 x i8]]]* @ss_size_lookup, i64 0, i64 %109, i64 %110, i64 %111
  %113 = load i8, i8* %112, align 1
  %114 = zext i8 %113 to i64
  %115 = getelementptr inbounds [22 x i8], [22 x i8]* @max_txsize_rect_lookup, i64 0, i64 %114
  %116 = load i8, i8* %115, align 1
  switch i8 %116, label %119 [
    i8 4, label %120
    i8 12, label %120
    i8 11, label %120
    i8 18, label %117
    i8 17, label %118
  ]

117:                                              ; preds = %102
  br label %120

118:                                              ; preds = %102
  br label %120

119:                                              ; preds = %102
  br label %120

120:                                              ; preds = %92, %102, %102, %102, %117, %118, %119
  %121 = phi i8 [ 0, %92 ], [ %116, %119 ], [ 9, %118 ], [ 10, %117 ], [ 3, %102 ], [ 3, %102 ], [ 3, %102 ]
  %122 = getelementptr inbounds %struct.IntraModeSearchState, %struct.IntraModeSearchState* %0, i64 0, i32 5
  %123 = getelementptr inbounds %struct.IntraModeSearchState, %struct.IntraModeSearchState* %0, i64 0, i32 6
  %124 = getelementptr inbounds %struct.IntraModeSearchState, %struct.IntraModeSearchState* %0, i64 0, i32 7
  %125 = call i64 @av1_rd_pick_intra_sbuv_mode(%struct.AV1_COMP* %1, %struct.macroblock* %2, i32* %86, i32* %122, i64* %123, i32* %124, i8 zeroext %3, i8 zeroext %121)
  %126 = load i8, i8* %47, align 1
  %127 = getelementptr inbounds %struct.IntraModeSearchState, %struct.IntraModeSearchState* %0, i64 0, i32 8
  store i8 %126, i8* %127, align 4
  %128 = getelementptr inbounds %struct.IntraModeSearchState, %struct.IntraModeSearchState* %0, i64 0, i32 9
  %129 = bitcast %struct.PALETTE_MODE_INFO* %128 to i8*
  %130 = bitcast %struct.PALETTE_MODE_INFO* %18 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 2 %129, i8* align 2 %130, i64 50, i1 false)
  %131 = getelementptr inbounds %struct.MB_MODE_INFO, %struct.MB_MODE_INFO* %17, i64 0, i32 18, i64 1
  %132 = load i8, i8* %131, align 1
  %133 = getelementptr inbounds %struct.IntraModeSearchState, %struct.IntraModeSearchState* %0, i64 0, i32 10
  store i8 %132, i8* %133, align 8
  br label %134

134:                                              ; preds = %89, %120
  %135 = phi i8 [ %91, %89 ], [ %126, %120 ]
  store i8 %135, i8* %47, align 1
  %136 = getelementptr inbounds %struct.IntraModeSearchState, %struct.IntraModeSearchState* %0, i64 0, i32 9, i32 1, i64 1
  %137 = load i8, i8* %136, align 1
  %138 = getelementptr inbounds %struct.MB_MODE_INFO, %struct.MB_MODE_INFO* %17, i64 0, i32 22, i32 1, i64 1
  store i8 %137, i8* %138, align 1
  %139 = icmp eq i8 %137, 0
  br i1 %139, label %145, label %140

140:                                              ; preds = %134
  %141 = getelementptr inbounds %struct.MB_MODE_INFO, %struct.MB_MODE_INFO* %17, i64 0, i32 22, i32 0, i64 8
  %142 = bitcast i16* %141 to i8*
  %143 = getelementptr inbounds %struct.IntraModeSearchState, %struct.IntraModeSearchState* %0, i64 0, i32 9, i32 0, i64 8
  %144 = bitcast i16* %143 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 2 %142, i8* align 2 %144, i64 32, i1 false)
  br label %145

145:                                              ; preds = %134, %140
  %146 = getelementptr inbounds %struct.IntraModeSearchState, %struct.IntraModeSearchState* %0, i64 0, i32 10
  %147 = load i8, i8* %146, align 8
  %148 = getelementptr inbounds %struct.MB_MODE_INFO, %struct.MB_MODE_INFO* %17, i64 0, i32 18, i64 1
  store i8 %147, i8* %148, align 1
  %149 = icmp eq i32 %81, 0
  br i1 %149, label %155, label %150

150:                                              ; preds = %145
  %151 = getelementptr inbounds %struct.IntraModeSearchState, %struct.IntraModeSearchState* %0, i64 0, i32 7
  %152 = load i32, i32* %151, align 8
  %153 = icmp ne i32 %152, 0
  %154 = zext i1 %153 to i32
  br label %155

155:                                              ; preds = %145, %150
  %156 = phi i32 [ 0, %145 ], [ %154, %150 ]
  %157 = getelementptr inbounds %struct.IntraModeSearchState, %struct.IntraModeSearchState* %0, i64 0, i32 6
  %158 = load i64, i64* %157, align 8
  %159 = add nsw i64 %158, %82
  %160 = load i32, i32* %86, align 4
  %161 = add nsw i32 %160, %84
  br label %162

162:                                              ; preds = %155, %67
  %163 = phi i32 [ %161, %155 ], [ %84, %67 ]
  %164 = phi i64 [ %159, %155 ], [ %82, %67 ]
  %165 = phi i32 [ %156, %155 ], [ %81, %67 ]
  %166 = icmp eq i32 %165, 0
  br i1 %166, label %196, label %167

167:                                              ; preds = %162
  %168 = load i32, i32* %53, align 16
  %169 = sub nsw i32 %163, %168
  br i1 %23, label %170, label %174

170:                                              ; preds = %167
  %171 = getelementptr inbounds %struct.IntraModeSearchState, %struct.IntraModeSearchState* %0, i64 0, i32 5
  %172 = load i32, i32* %171, align 8
  %173 = sub nsw i32 %169, %172
  br label %174

174:                                              ; preds = %170, %167
  %175 = phi i32 [ %173, %170 ], [ %169, %167 ]
  %176 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %2, i64 0, i32 2, i32 12
  %177 = load %struct.MB_MODE_INFO*, %struct.MB_MODE_INFO** %176, align 16
  %178 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %2, i64 0, i32 2, i32 11
  %179 = load %struct.MB_MODE_INFO*, %struct.MB_MODE_INFO** %178, align 8
  %180 = icmp eq %struct.MB_MODE_INFO* %177, null
  br i1 %180, label %185, label %181

181:                                              ; preds = %174
  %182 = getelementptr inbounds %struct.MB_MODE_INFO, %struct.MB_MODE_INFO* %177, i64 0, i32 23
  %183 = load i8, i8* %182, align 8
  %184 = sext i8 %183 to i64
  br label %185

185:                                              ; preds = %181, %174
  %186 = phi i64 [ %184, %181 ], [ 0, %174 ]
  %187 = icmp eq %struct.MB_MODE_INFO* %179, null
  br i1 %187, label %192, label %188

188:                                              ; preds = %185
  %189 = getelementptr inbounds %struct.MB_MODE_INFO, %struct.MB_MODE_INFO* %179, i64 0, i32 23
  %190 = load i8, i8* %189, align 8
  %191 = sext i8 %190 to i64
  br label %192

192:                                              ; preds = %185, %188
  %193 = phi i64 [ %191, %188 ], [ 0, %185 ]
  %194 = add nsw i64 %193, %186
  %195 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %2, i64 0, i32 20, i32 38, i64 %194, i64 1
  br label %217

196:                                              ; preds = %162
  %197 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %2, i64 0, i32 2, i32 12
  %198 = load %struct.MB_MODE_INFO*, %struct.MB_MODE_INFO** %197, align 16
  %199 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %2, i64 0, i32 2, i32 11
  %200 = load %struct.MB_MODE_INFO*, %struct.MB_MODE_INFO** %199, align 8
  %201 = icmp eq %struct.MB_MODE_INFO* %198, null
  br i1 %201, label %206, label %202

202:                                              ; preds = %196
  %203 = getelementptr inbounds %struct.MB_MODE_INFO, %struct.MB_MODE_INFO* %198, i64 0, i32 23
  %204 = load i8, i8* %203, align 8
  %205 = sext i8 %204 to i64
  br label %206

206:                                              ; preds = %202, %196
  %207 = phi i64 [ %205, %202 ], [ 0, %196 ]
  %208 = icmp eq %struct.MB_MODE_INFO* %200, null
  br i1 %208, label %213, label %209

209:                                              ; preds = %206
  %210 = getelementptr inbounds %struct.MB_MODE_INFO, %struct.MB_MODE_INFO* %200, i64 0, i32 23
  %211 = load i8, i8* %210, align 8
  %212 = sext i8 %211 to i64
  br label %213

213:                                              ; preds = %206, %209
  %214 = phi i64 [ %212, %209 ], [ 0, %206 ]
  %215 = add nsw i64 %214, %207
  %216 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %2, i64 0, i32 20, i32 38, i64 %215, i64 0
  br label %217

217:                                              ; preds = %213, %192
  %218 = phi i32* [ %216, %213 ], [ %195, %192 ]
  %219 = phi i32 [ %163, %213 ], [ %175, %192 ]
  %220 = load i32, i32* %218, align 4
  %221 = add nsw i32 %220, %219
  %222 = sext i32 %221 to i64
  %223 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %2, i64 0, i32 17
  %224 = load i32, i32* %223, align 8
  %225 = sext i32 %224 to i64
  %226 = mul nsw i64 %225, %222
  %227 = add nsw i64 %226, 256
  %228 = ashr i64 %227, 9
  %229 = shl i64 %164, 7
  %230 = add nsw i64 %228, %229
  %231 = getelementptr inbounds %struct.RD_STATS, %struct.RD_STATS* %6, i64 0, i32 0
  store i32 %221, i32* %231, align 8
  %232 = getelementptr inbounds %struct.RD_STATS, %struct.RD_STATS* %6, i64 0, i32 1
  store i64 %164, i64* %232, align 8
  br label %233

233:                                              ; preds = %8, %63, %217
  %234 = phi i64 [ %230, %217 ], [ 9223372036854775807, %63 ], [ 9223372036854775807, %8 ]
  %235 = phi i32 [ %165, %217 ], [ 0, %63 ], [ 0, %8 ]
  %236 = getelementptr inbounds %struct.RD_STATS, %struct.RD_STATS* %6, i64 0, i32 2
  store i64 %234, i64* %236, align 8
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %52) #6
  call void @llvm.lifetime.end.p0i8(i64 1024, i8* nonnull %34) #6
  call void @llvm.lifetime.end.p0i8(i64 1024, i8* nonnull %33) #6
  call void @llvm.lifetime.end.p0i8(i64 184, i8* nonnull %31) #6
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %25) #6
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %24) #6
  ret i32 %235
}

declare void @av1_rd_pick_palette_intra_sby(%struct.AV1_COMP*, %struct.macroblock*, i8 zeroext, i32, %struct.MB_MODE_INFO*, i8*, i64*, i64*, i32*, i32*, i64*, i32*, i32*, %struct.PICK_MODE_CONTEXT*, i8*, i8*) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden i32 @av1_handle_intra_y_mode(%struct.IntraModeSearchState* nocapture, %struct.AV1_COMP*, %struct.macroblock*, i8 zeroext, i32, %struct.PICK_MODE_CONTEXT* nocapture readonly, %struct.RD_STATS*, i64, i32* nocapture, i64* nocapture) local_unnamed_addr #0 {
  %11 = alloca %struct.RD_STATS, align 8
  %12 = alloca [1024 x i8], align 16
  %13 = alloca [1024 x i8], align 16
  %14 = alloca i64, align 8
  %15 = alloca i32, align 4
  %16 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %2, i64 0, i32 2, i32 6
  %17 = load %struct.MB_MODE_INFO**, %struct.MB_MODE_INFO*** %16, align 8
  %18 = load %struct.MB_MODE_INFO*, %struct.MB_MODE_INFO** %17, align 8
  %19 = getelementptr inbounds %struct.MB_MODE_INFO, %struct.MB_MODE_INFO* %18, i64 0, i32 2
  %20 = load i8, i8* %19, align 2
  %21 = zext i8 %3 to i64
  %22 = getelementptr inbounds [22 x i8], [22 x i8]* @size_group_lookup, i64 0, i64 %21
  %23 = load i8, i8* %22, align 1
  %24 = zext i8 %23 to i64
  %25 = zext i8 %20 to i64
  %26 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %2, i64 0, i32 20, i32 1, i64 %24, i64 %25
  %27 = load i32, i32* %26, align 4
  %28 = add i32 %27, %4
  %29 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %2, i64 0, i32 2, i32 12
  %30 = load %struct.MB_MODE_INFO*, %struct.MB_MODE_INFO** %29, align 16
  %31 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %2, i64 0, i32 2, i32 11
  %32 = load %struct.MB_MODE_INFO*, %struct.MB_MODE_INFO** %31, align 8
  %33 = icmp eq %struct.MB_MODE_INFO* %30, null
  br i1 %33, label %38, label %34

34:                                               ; preds = %10
  %35 = getelementptr inbounds %struct.MB_MODE_INFO, %struct.MB_MODE_INFO* %30, i64 0, i32 23
  %36 = load i8, i8* %35, align 8
  %37 = sext i8 %36 to i64
  br label %38

38:                                               ; preds = %34, %10
  %39 = phi i64 [ %37, %34 ], [ 0, %10 ]
  %40 = icmp eq %struct.MB_MODE_INFO* %32, null
  br i1 %40, label %45, label %41

41:                                               ; preds = %38
  %42 = getelementptr inbounds %struct.MB_MODE_INFO, %struct.MB_MODE_INFO* %32, i64 0, i32 23
  %43 = load i8, i8* %42, align 8
  %44 = sext i8 %43 to i64
  br label %45

45:                                               ; preds = %38, %41
  %46 = phi i64 [ %44, %41 ], [ 0, %38 ]
  %47 = add nsw i64 %46, %39
  %48 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %1, i64 0, i32 8, i32 22, i32 0
  %49 = load i32, i32* %48, align 16
  %50 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %1, i64 0, i32 8, i32 22, i32 1
  %51 = load i32, i32* %50, align 4
  %52 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %1, i64 0, i32 8, i32 35
  %53 = load %struct.SequenceHeader*, %struct.SequenceHeader** %52, align 16
  %54 = getelementptr inbounds %struct.SequenceHeader, %struct.SequenceHeader* %53, i64 0, i32 25
  %55 = load i32, i32* %54, align 8
  %56 = tail call i32 @av1_get_intra_cost_penalty(i32 %49, i32 %51, i32 %55) #6
  switch i8 %20, label %57 [
    i8 0, label %59
    i8 12, label %59
  ]

57:                                               ; preds = %45
  %58 = add nsw i32 %56, %28
  br label %59

59:                                               ; preds = %45, %45, %57
  %60 = phi i32 [ %58, %57 ], [ %28, %45 ], [ %28, %45 ]
  %61 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %2, i64 0, i32 20, i32 38, i64 %47, i64 0
  %62 = load i32, i32* %61, align 4
  %63 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %2, i64 0, i32 20, i32 38, i64 %47, i64 1
  %64 = load i32, i32* %63, align 4
  %65 = icmp slt i32 %62, %64
  %66 = select i1 %65, i32 %62, i32 %64
  %67 = add nsw i32 %66, %60
  %68 = sext i32 %67 to i64
  %69 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %2, i64 0, i32 17
  %70 = load i32, i32* %69, align 8
  %71 = sext i32 %70 to i64
  %72 = mul nsw i64 %68, %71
  %73 = add nsw i64 %72, 256
  %74 = ashr i64 %73, 9
  %75 = icmp sgt i64 %74, %7
  br i1 %75, label %76, label %78

76:                                               ; preds = %59
  %77 = getelementptr inbounds %struct.IntraModeSearchState, %struct.IntraModeSearchState* %0, i64 0, i32 1
  store i32 1, i32* %77, align 4
  br label %256

78:                                               ; preds = %59
  %79 = add i8 %20, -1
  %80 = icmp ugt i8 %79, 7
  %81 = icmp ult i8 %3, 3
  %82 = or i1 %81, %80
  br i1 %82, label %116, label %83

83:                                               ; preds = %78
  %84 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %1, i64 0, i32 9, i32 18, i32 6
  %85 = load i8, i8* %84, align 1, !range !8
  %86 = icmp eq i8 %85, 0
  br i1 %86, label %116, label %87

87:                                               ; preds = %83
  %88 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %1, i64 0, i32 40, i32 8, i32 3
  %89 = load i32, i32* %88, align 4
  %90 = icmp eq i32 %89, 0
  br i1 %90, label %104, label %91

91:                                               ; preds = %87
  %92 = getelementptr inbounds %struct.IntraModeSearchState, %struct.IntraModeSearchState* %0, i64 0, i32 3
  %93 = load i32, i32* %92, align 8
  %94 = icmp eq i32 %93, 0
  br i1 %94, label %95, label %104

95:                                               ; preds = %91
  %96 = load %struct.SequenceHeader*, %struct.SequenceHeader** %52, align 16
  %97 = getelementptr inbounds %struct.SequenceHeader, %struct.SequenceHeader* %96, i64 0, i32 7
  %98 = load i8, i8* %97, align 4
  %99 = add nsw i32 %89, -1
  %100 = sext i32 %99 to i64
  %101 = getelementptr inbounds [4 x float], [4 x float]* @av1_handle_intra_y_mode.thresh, i64 0, i64 %100
  %102 = load float, float* %101, align 4
  %103 = getelementptr inbounds %struct.IntraModeSearchState, %struct.IntraModeSearchState* %0, i64 0, i32 2, i64 0
  tail call fastcc void @prune_intra_mode_with_hog(%struct.macroblock* %2, i8 zeroext %3, i8 zeroext %98, float %102, i8* %103, i32 0)
  store i32 1, i32* %92, align 8
  br label %104

104:                                              ; preds = %91, %87, %95
  %105 = getelementptr inbounds %struct.IntraModeSearchState, %struct.IntraModeSearchState* %0, i64 0, i32 2, i64 %25
  %106 = load i8, i8* %105, align 1
  %107 = icmp eq i8 %106, 0
  br i1 %107, label %108, label %256

108:                                              ; preds = %104
  %109 = getelementptr inbounds %struct.RD_STATS, %struct.RD_STATS* %6, i64 0, i32 0
  %110 = getelementptr inbounds %struct.RD_STATS, %struct.RD_STATS* %6, i64 0, i32 1
  %111 = getelementptr inbounds %struct.RD_STATS, %struct.RD_STATS* %6, i64 0, i32 4
  %112 = bitcast i64* %110 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %112, i8 0, i64 24, i1 false) #6
  store i32 1, i32* %111, align 8
  %113 = getelementptr inbounds %struct.RD_STATS, %struct.RD_STATS* %6, i64 0, i32 5
  store i32 0, i32* %113, align 4
  store i32 2147483647, i32* %109, align 8
  %114 = bitcast i64* %14 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %114) #6
  store i64 9223372036854775807, i64* %14, align 8
  %115 = bitcast i32* %15 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %115) #6
  store i32 -1431655766, i32* %15, align 4
  call fastcc void @rd_pick_intra_angle_sby(%struct.AV1_COMP* %1, %struct.macroblock* %2, i32* nonnull %15, %struct.RD_STATS* %6, i8 zeroext %3, i32 %28, i64 %7, i64* nonnull %14, i32 0)
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %115) #6
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %114) #6
  br label %227

116:                                              ; preds = %78, %83
  %117 = getelementptr inbounds %struct.RD_STATS, %struct.RD_STATS* %6, i64 0, i32 0
  store i32 0, i32* %117, align 8
  %118 = getelementptr inbounds %struct.RD_STATS, %struct.RD_STATS* %6, i64 0, i32 1
  %119 = getelementptr inbounds %struct.RD_STATS, %struct.RD_STATS* %6, i64 0, i32 4
  %120 = bitcast i64* %118 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %120, i8 0, i64 24, i1 false) #6
  store i32 1, i32* %119, align 8
  %121 = getelementptr inbounds %struct.RD_STATS, %struct.RD_STATS* %6, i64 0, i32 5
  store i32 0, i32* %121, align 4
  %122 = getelementptr inbounds %struct.MB_MODE_INFO, %struct.MB_MODE_INFO* %18, i64 0, i32 18, i64 0
  store i8 0, i8* %122, align 8
  tail call void @av1_pick_uniform_tx_size_type_yrd(%struct.AV1_COMP* %1, %struct.macroblock* %2, %struct.RD_STATS* %6, i8 zeroext %3, i64 %7) #6
  %123 = icmp eq i8 %20, 0
  br i1 %123, label %124, label %227

124:                                              ; preds = %116
  %125 = load %struct.SequenceHeader*, %struct.SequenceHeader** %52, align 16
  %126 = getelementptr inbounds %struct.SequenceHeader, %struct.SequenceHeader* %125, i64 0, i32 15
  %127 = load i8, i8* %126, align 4
  %128 = icmp eq i8 %127, 0
  %129 = icmp eq i8 %3, -1
  %130 = or i1 %129, %128
  br i1 %130, label %227, label %131

131:                                              ; preds = %124
  %132 = lshr i64 984063, %21
  %133 = and i64 %132, 1
  %134 = icmp eq i64 %133, 0
  br i1 %134, label %227, label %135

135:                                              ; preds = %131
  %136 = getelementptr inbounds %struct.RD_STATS, %struct.RD_STATS* %6, i64 0, i32 0
  %137 = load i32, i32* %136, align 8
  %138 = icmp eq i32 %137, 2147483647
  br i1 %138, label %156, label %139

139:                                              ; preds = %135
  %140 = getelementptr inbounds %struct.MB_MODE_INFO, %struct.MB_MODE_INFO* %18, i64 0, i32 19, i32 1
  store i8 0, i8* %140, align 1
  %141 = load i32, i32* %136, align 8
  %142 = tail call fastcc i32 @intra_mode_info_cost_y(%struct.AV1_COMP* %1, %struct.macroblock* %2, %struct.MB_MODE_INFO* %18, i8 zeroext %3, i32 %28)
  %143 = add nsw i32 %142, %141
  %144 = sext i32 %143 to i64
  %145 = load i32, i32* %69, align 8
  %146 = sext i32 %145 to i64
  %147 = mul nsw i64 %144, %146
  %148 = add nsw i64 %147, 256
  %149 = ashr i64 %148, 9
  %150 = getelementptr inbounds %struct.RD_STATS, %struct.RD_STATS* %6, i64 0, i32 1
  %151 = load i64, i64* %150, align 8
  %152 = shl nsw i64 %151, 7
  %153 = add nsw i64 %149, %152
  %154 = sdiv i64 %153, 2
  %155 = icmp sgt i64 %154, %7
  br i1 %155, label %227, label %156

156:                                              ; preds = %139, %135
  %157 = phi i64 [ %153, %139 ], [ 9223372036854775807, %135 ]
  %158 = load %struct.MB_MODE_INFO**, %struct.MB_MODE_INFO*** %16, align 8
  %159 = load %struct.MB_MODE_INFO*, %struct.MB_MODE_INFO** %158, align 8
  %160 = bitcast %struct.RD_STATS* %11 to i8*
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %160) #6
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %160, i8 -86, i64 40, i1 false) #6
  %161 = getelementptr inbounds %struct.MB_MODE_INFO, %struct.MB_MODE_INFO* %159, i64 0, i32 24
  %162 = load i8, i8* %161, align 1
  %163 = getelementptr inbounds [1024 x i8], [1024 x i8]* %12, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 1024, i8* nonnull %163)
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %163, i8 -86, i64 1024, i1 false)
  %164 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %2, i64 0, i32 58, i32 1, i64 0
  %165 = getelementptr inbounds %struct.PICK_MODE_CONTEXT, %struct.PICK_MODE_CONTEXT* %5, i64 0, i32 10
  %166 = load i32, i32* %165, align 8
  %167 = sext i32 %166 to i64
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 16 %163, i8* align 4 %164, i64 %167, i1 false) #6
  %168 = getelementptr inbounds [1024 x i8], [1024 x i8]* %13, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 1024, i8* nonnull %168)
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %168, i8 -86, i64 1024, i1 false)
  %169 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %2, i64 0, i32 2, i32 15
  %170 = load i8*, i8** %169, align 8
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 16 %168, i8* align 1 %170, i64 %167, i1 false) #6
  %171 = getelementptr inbounds %struct.MB_MODE_INFO, %struct.MB_MODE_INFO* %159, i64 0, i32 19, i32 1
  store i8 1, i8* %171, align 1
  %172 = getelementptr inbounds %struct.MB_MODE_INFO, %struct.MB_MODE_INFO* %159, i64 0, i32 19, i32 0
  %173 = getelementptr inbounds %struct.RD_STATS, %struct.RD_STATS* %11, i64 0, i32 0
  %174 = getelementptr inbounds %struct.RD_STATS, %struct.RD_STATS* %11, i64 0, i32 1
  %175 = bitcast %struct.RD_STATS* %6 to i8*
  br label %176

176:                                              ; preds = %207, %156
  %177 = phi i64 [ %157, %156 ], [ %211, %207 ]
  %178 = phi i8 [ 0, %156 ], [ %212, %207 ]
  %179 = phi i8 [ 0, %156 ], [ %210, %207 ]
  %180 = phi i8 [ %162, %156 ], [ %209, %207 ]
  %181 = phi i32 [ 0, %156 ], [ %208, %207 ]
  store i8 %178, i8* %172, align 2
  call void @av1_pick_uniform_tx_size_type_yrd(%struct.AV1_COMP* %1, %struct.macroblock* %2, %struct.RD_STATS* nonnull %11, i8 zeroext %3, i64 %7) #6
  %182 = load i32, i32* %173, align 8
  %183 = icmp eq i32 %182, 2147483647
  br i1 %183, label %207, label %184

184:                                              ; preds = %176
  %185 = call fastcc i32 @intra_mode_info_cost_y(%struct.AV1_COMP* %1, %struct.macroblock* %2, %struct.MB_MODE_INFO* %159, i8 zeroext %3, i32 %28) #6
  %186 = add nsw i32 %185, %182
  %187 = sext i32 %186 to i64
  %188 = load i32, i32* %69, align 8
  %189 = sext i32 %188 to i64
  %190 = mul nsw i64 %187, %189
  %191 = add nsw i64 %190, 256
  %192 = ashr i64 %191, 9
  %193 = load i64, i64* %174, align 8
  %194 = shl nsw i64 %193, 7
  %195 = add nsw i64 %192, %194
  %196 = icmp ne i64 %195, 9223372036854775807
  %197 = sdiv i64 %195, 2
  %198 = icmp sgt i64 %197, %7
  %199 = and i1 %196, %198
  br i1 %199, label %214, label %200

200:                                              ; preds = %184
  %201 = icmp slt i64 %195, %177
  br i1 %201, label %202, label %207

202:                                              ; preds = %200
  %203 = load i8, i8* %161, align 1
  %204 = load i8*, i8** %169, align 8
  %205 = load i32, i32* %165, align 8
  %206 = sext i32 %205 to i64
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 16 %168, i8* align 1 %204, i64 %206, i1 false) #6
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 16 %163, i8* align 4 %164, i64 %206, i1 false) #6
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %175, i8* nonnull align 8 %160, i64 40, i1 false) #6
  br label %207

207:                                              ; preds = %202, %200, %176
  %208 = phi i32 [ %181, %176 ], [ %181, %200 ], [ 1, %202 ]
  %209 = phi i8 [ %180, %176 ], [ %180, %200 ], [ %203, %202 ]
  %210 = phi i8 [ %179, %176 ], [ %179, %200 ], [ %178, %202 ]
  %211 = phi i64 [ %177, %176 ], [ %177, %200 ], [ %195, %202 ]
  %212 = add nuw nsw i8 %178, 1
  %213 = icmp eq i8 %212, 5
  br i1 %213, label %214, label %176

214:                                              ; preds = %207, %184
  %215 = phi i32 [ %181, %184 ], [ %208, %207 ]
  %216 = phi i8 [ %180, %184 ], [ %209, %207 ]
  %217 = phi i8 [ %179, %184 ], [ %210, %207 ]
  store i8 %216, i8* %161, align 1
  %218 = load i8*, i8** %169, align 8
  %219 = load i32, i32* %165, align 8
  %220 = sext i32 %219 to i64
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %218, i8* nonnull align 16 %168, i64 %220, i1 false) #6
  %221 = load i32, i32* %165, align 8
  %222 = sext i32 %221 to i64
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %164, i8* nonnull align 16 %163, i64 %222, i1 false) #6
  %223 = icmp eq i32 %215, 0
  br i1 %223, label %225, label %224

224:                                              ; preds = %214
  store i8 1, i8* %171, align 1
  store i8 %217, i8* %172, align 2
  br label %226

225:                                              ; preds = %214
  store i8 0, i8* %171, align 1
  br label %226

226:                                              ; preds = %224, %225
  call void @llvm.lifetime.end.p0i8(i64 1024, i8* nonnull %168)
  call void @llvm.lifetime.end.p0i8(i64 1024, i8* nonnull %163)
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %160) #6
  br label %227

227:                                              ; preds = %108, %139, %131, %124, %226, %116
  %228 = getelementptr inbounds %struct.RD_STATS, %struct.RD_STATS* %6, i64 0, i32 0
  %229 = load i32, i32* %228, align 8
  %230 = icmp eq i32 %229, 2147483647
  br i1 %230, label %256, label %231

231:                                              ; preds = %227
  %232 = call fastcc i32 @intra_mode_info_cost_y(%struct.AV1_COMP* %1, %struct.macroblock* %2, %struct.MB_MODE_INFO* %18, i8 zeroext %3, i32 %28)
  store i32 %232, i32* %8, align 4
  %233 = getelementptr inbounds %struct.RD_STATS, %struct.RD_STATS* %6, i64 0, i32 4
  %234 = load i32, i32* %233, align 8
  %235 = icmp eq i32 %234, 0
  %236 = select i1 %235, i32* %228, i32* %63
  %237 = load i32, i32* %236, align 4
  %238 = add nsw i32 %237, %232
  %239 = sext i32 %238 to i64
  %240 = load i32, i32* %69, align 8
  %241 = sext i32 %240 to i64
  %242 = mul nsw i64 %239, %241
  %243 = add nsw i64 %242, 256
  %244 = ashr i64 %243, 9
  %245 = getelementptr inbounds %struct.RD_STATS, %struct.RD_STATS* %6, i64 0, i32 1
  %246 = load i64, i64* %245, align 8
  %247 = shl nsw i64 %246, 7
  %248 = add nsw i64 %244, %247
  store i64 %248, i64* %9, align 8
  %249 = icmp slt i64 %7, 4611686018427387903
  br i1 %249, label %250, label %256

250:                                              ; preds = %231
  %251 = ashr i64 %7, 2
  %252 = add nsw i64 %251, %7
  %253 = icmp sgt i64 %248, %252
  br i1 %253, label %254, label %256

254:                                              ; preds = %250
  %255 = getelementptr inbounds %struct.IntraModeSearchState, %struct.IntraModeSearchState* %0, i64 0, i32 1
  store i32 1, i32* %255, align 4
  br label %256

256:                                              ; preds = %104, %227, %231, %250, %254, %76
  %257 = phi i32 [ 0, %76 ], [ 0, %104 ], [ 0, %227 ], [ 0, %254 ], [ 1, %250 ], [ 1, %231 ]
  ret i32 %257
}

declare i32 @av1_get_intra_cost_penalty(i32, i32, i32) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define internal fastcc void @rd_pick_intra_angle_sby(%struct.AV1_COMP*, %struct.macroblock*, i32* nocapture, %struct.RD_STATS* nocapture, i8 zeroext, i32, i64, i64* nocapture, i32) unnamed_addr #0 {
  %10 = alloca i64, align 8
  %11 = alloca i32, align 4
  %12 = alloca i8, align 1
  %13 = alloca [1024 x i8], align 16
  %14 = alloca [1024 x i8], align 16
  store i64 %6, i64* %10, align 8
  %15 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 2, i32 6
  %16 = load %struct.MB_MODE_INFO**, %struct.MB_MODE_INFO*** %15, align 8
  %17 = load %struct.MB_MODE_INFO*, %struct.MB_MODE_INFO** %16, align 8
  %18 = bitcast i32* %11 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %18) #6
  store i32 0, i32* %11, align 4
  call void @llvm.lifetime.start.p0i8(i64 1, i8* nonnull %12) #6
  %19 = getelementptr inbounds %struct.MB_MODE_INFO, %struct.MB_MODE_INFO* %17, i64 0, i32 24
  %20 = load i8, i8* %19, align 1
  store i8 %20, i8* %12, align 1
  %21 = getelementptr inbounds [1024 x i8], [1024 x i8]* %13, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 1024, i8* nonnull %21) #6
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %21, i8 -86, i64 1024, i1 false)
  %22 = getelementptr inbounds [1024 x i8], [1024 x i8]* %14, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 1024, i8* nonnull %22) #6
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %22, i8 -86, i64 1024, i1 false)
  %23 = and i32 %8, 1
  %24 = icmp eq i64 %6, 9223372036854775807
  %25 = ashr i64 %6, 3
  %26 = add nsw i64 %25, %6
  %27 = select i1 %24, i64 9223372036854775807, i64 %26
  %28 = call fastcc i64 @calc_rd_given_intra_angle(%struct.AV1_COMP* %0, %struct.macroblock* %1, i8 zeroext %4, i32 %5, i64 %27, i8 signext 0, i32* %2, %struct.RD_STATS* %3, i32* nonnull %11, i8* nonnull %12, i64* nonnull %10, i64* %7, i8* nonnull %22, i8* nonnull %21, i32 %23)
  %29 = icmp eq i64 %28, 9223372036854775807
  br i1 %29, label %75, label %30

30:                                               ; preds = %9
  %31 = load i64, i64* %10, align 8
  %32 = icmp eq i64 %31, 9223372036854775807
  %33 = ashr i64 %31, 5
  %34 = add nsw i64 %33, %31
  %35 = select i1 %32, i64 9223372036854775807, i64 %34
  %36 = call fastcc i64 @calc_rd_given_intra_angle(%struct.AV1_COMP* %0, %struct.macroblock* %1, i8 zeroext %4, i32 %5, i64 %35, i8 signext 2, i32* %2, %struct.RD_STATS* %3, i32* nonnull %11, i8* nonnull %12, i64* nonnull %10, i64* %7, i8* nonnull %22, i8* nonnull %21, i32 0)
  %37 = load i64, i64* %10, align 8
  %38 = icmp eq i64 %37, 9223372036854775807
  %39 = ashr i64 %37, 5
  %40 = add nsw i64 %39, %37
  %41 = select i1 %38, i64 9223372036854775807, i64 %40
  %42 = call fastcc i64 @calc_rd_given_intra_angle(%struct.AV1_COMP* %0, %struct.macroblock* %1, i8 zeroext %4, i32 %5, i64 %41, i8 signext -2, i32* %2, %struct.RD_STATS* %3, i32* nonnull %11, i8* nonnull %12, i64* nonnull %10, i64* %7, i8* nonnull %22, i8* nonnull %21, i32 0)
  %43 = load i64, i64* %10, align 8
  %44 = ashr i64 %43, 5
  %45 = add nsw i64 %44, %43
  %46 = icmp sgt i64 %36, %45
  %47 = icmp sgt i64 %28, %45
  %48 = and i1 %46, %47
  br i1 %48, label %54, label %49

49:                                               ; preds = %30
  %50 = call fastcc i64 @calc_rd_given_intra_angle(%struct.AV1_COMP* %0, %struct.macroblock* %1, i8 zeroext %4, i32 %5, i64 %43, i8 signext 1, i32* %2, %struct.RD_STATS* %3, i32* nonnull %11, i8* nonnull %12, i64* nonnull %10, i64* %7, i8* nonnull %22, i8* nonnull %21, i32 0)
  %51 = load i64, i64* %10, align 8
  %52 = ashr i64 %51, 5
  %53 = add nsw i64 %52, %51
  br label %54

54:                                               ; preds = %30, %49
  %55 = phi i64 [ %53, %49 ], [ %45, %30 ]
  %56 = phi i64 [ %51, %49 ], [ %43, %30 ]
  %57 = icmp sgt i64 %42, %55
  %58 = icmp sgt i64 %28, %55
  %59 = and i1 %57, %58
  br i1 %59, label %82, label %76

60:                                               ; preds = %100
  %61 = load i8, i8* %12, align 1
  store i8 %61, i8* %19, align 1
  %62 = load i32, i32* %11, align 4
  %63 = trunc i32 %62 to i8
  %64 = getelementptr inbounds %struct.MB_MODE_INFO, %struct.MB_MODE_INFO* %17, i64 0, i32 18, i64 0
  store i8 %63, i8* %64, align 8
  %65 = zext i8 %4 to i64
  %66 = getelementptr inbounds [22 x i8], [22 x i8]* @num_pels_log2_lookup, i64 0, i64 %65
  %67 = load i8, i8* %66, align 1
  %68 = zext i8 %67 to i32
  %69 = add nsw i32 %68, -4
  %70 = shl i32 1, %69
  %71 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 58, i32 1, i64 0
  %72 = sext i32 %70 to i64
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %71, i8* nonnull align 16 %21, i64 %72, i1 false)
  %73 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 2, i32 15
  %74 = load i8*, i8** %73, align 8
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %74, i8* nonnull align 16 %22, i64 %72, i1 false)
  br label %75

75:                                               ; preds = %9, %60, %100
  call void @llvm.lifetime.end.p0i8(i64 1024, i8* nonnull %22) #6
  call void @llvm.lifetime.end.p0i8(i64 1024, i8* nonnull %21) #6
  call void @llvm.lifetime.end.p0i8(i64 1, i8* nonnull %12) #6
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %18) #6
  ret void

76:                                               ; preds = %54
  %77 = call fastcc i64 @calc_rd_given_intra_angle(%struct.AV1_COMP* %0, %struct.macroblock* %1, i8 zeroext %4, i32 %5, i64 %56, i8 signext -1, i32* %2, %struct.RD_STATS* %3, i32* nonnull %11, i8* nonnull %12, i64* nonnull %10, i64* %7, i8* nonnull %22, i8* nonnull %21, i32 0)
  %78 = load i64, i64* %10, align 8
  %79 = ashr i64 %78, 5
  %80 = add nsw i64 %79, %78
  %81 = icmp eq i64 %80, 9223372036854775807
  br i1 %81, label %86, label %82

82:                                               ; preds = %54, %76
  %83 = phi i64 [ %78, %76 ], [ %56, %54 ]
  %84 = phi i64 [ %80, %76 ], [ %55, %54 ]
  %85 = icmp sgt i64 %36, %84
  br i1 %85, label %93, label %86

86:                                               ; preds = %82, %76
  %87 = phi i64 [ %78, %76 ], [ %83, %82 ]
  %88 = call fastcc i64 @calc_rd_given_intra_angle(%struct.AV1_COMP* %0, %struct.macroblock* %1, i8 zeroext %4, i32 %5, i64 %87, i8 signext 3, i32* %2, %struct.RD_STATS* %3, i32* nonnull %11, i8* nonnull %12, i64* nonnull %10, i64* %7, i8* nonnull %22, i8* nonnull %21, i32 0)
  %89 = load i64, i64* %10, align 8
  %90 = ashr i64 %89, 5
  %91 = add nsw i64 %90, %89
  %92 = icmp eq i64 %91, 9223372036854775807
  br i1 %92, label %97, label %93

93:                                               ; preds = %82, %86
  %94 = phi i64 [ %89, %86 ], [ %83, %82 ]
  %95 = phi i64 [ %91, %86 ], [ %84, %82 ]
  %96 = icmp sgt i64 %42, %95
  br i1 %96, label %100, label %97

97:                                               ; preds = %86, %93
  %98 = phi i64 [ %89, %86 ], [ %94, %93 ]
  %99 = call fastcc i64 @calc_rd_given_intra_angle(%struct.AV1_COMP* %0, %struct.macroblock* %1, i8 zeroext %4, i32 %5, i64 %98, i8 signext -3, i32* %2, %struct.RD_STATS* %3, i32* nonnull %11, i8* nonnull %12, i64* nonnull %10, i64* %7, i8* nonnull %22, i8* nonnull %21, i32 0)
  br label %100

100:                                              ; preds = %97, %93
  %101 = getelementptr inbounds %struct.RD_STATS, %struct.RD_STATS* %3, i64 0, i32 0
  %102 = load i32, i32* %101, align 8
  %103 = icmp eq i32 %102, 2147483647
  br i1 %103, label %75, label %60
}

declare void @av1_pick_uniform_tx_size_type_yrd(%struct.AV1_COMP*, %struct.macroblock*, %struct.RD_STATS*, i8 zeroext, i64) local_unnamed_addr #2

; Function Attrs: inlinehint nounwind ssp uwtable
define internal fastcc i32 @intra_mode_info_cost_y(%struct.AV1_COMP* nocapture readonly, %struct.macroblock*, %struct.MB_MODE_INFO*, i8 zeroext, i32) unnamed_addr #3 {
  %6 = alloca [16 x i16], align 16
  %7 = getelementptr inbounds %struct.MB_MODE_INFO, %struct.MB_MODE_INFO* %2, i64 0, i32 22
  %8 = getelementptr inbounds %struct.MB_MODE_INFO, %struct.MB_MODE_INFO* %2, i64 0, i32 22, i32 1, i64 0
  %9 = load i8, i8* %8, align 2
  %10 = icmp ne i8 %9, 0
  %11 = getelementptr inbounds %struct.MB_MODE_INFO, %struct.MB_MODE_INFO* %2, i64 0, i32 19, i32 1
  %12 = load i8, i8* %11, align 1
  %13 = getelementptr inbounds %struct.MB_MODE_INFO, %struct.MB_MODE_INFO* %2, i64 0, i32 28
  %14 = load i16, i16* %13, align 1
  %15 = lshr i16 %14, 7
  %16 = and i16 %15, 1
  %17 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 20, i32 3
  %18 = load i8, i8* %17, align 1, !range !8
  %19 = getelementptr inbounds %struct.MB_MODE_INFO, %struct.MB_MODE_INFO* %2, i64 0, i32 0
  %20 = load i8, i8* %19, align 8
  %21 = icmp eq i8 %18, 0
  br i1 %21, label %103, label %22

22:                                               ; preds = %5
  %23 = zext i8 %20 to i64
  %24 = add nsw i64 %23, -13
  %25 = icmp ult i64 %24, 3
  %26 = icmp ult i8 %20, 3
  %27 = or i1 %26, %25
  br i1 %27, label %103, label %28

28:                                               ; preds = %22
  %29 = getelementptr inbounds %struct.MB_MODE_INFO, %struct.MB_MODE_INFO* %2, i64 0, i32 2
  %30 = load i8, i8* %29, align 2
  %31 = icmp eq i8 %30, 0
  br i1 %31, label %32, label %103

32:                                               ; preds = %28
  %33 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 2
  %34 = zext i8 %3 to i64
  %35 = getelementptr inbounds [22 x i8], [22 x i8]* @num_pels_log2_lookup, i64 0, i64 %34
  %36 = load i8, i8* %35, align 1
  %37 = zext i8 %36 to i64
  %38 = add nsw i64 %37, -6
  %39 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 2, i32 12
  %40 = load %struct.MB_MODE_INFO*, %struct.MB_MODE_INFO** %39, align 16
  %41 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 2, i32 11
  %42 = load %struct.MB_MODE_INFO*, %struct.MB_MODE_INFO** %41, align 8
  %43 = icmp eq %struct.MB_MODE_INFO* %40, null
  br i1 %43, label %49, label %44

44:                                               ; preds = %32
  %45 = getelementptr inbounds %struct.MB_MODE_INFO, %struct.MB_MODE_INFO* %40, i64 0, i32 22, i32 1, i64 0
  %46 = load i8, i8* %45, align 2
  %47 = icmp ne i8 %46, 0
  %48 = zext i1 %47 to i32
  br label %49

49:                                               ; preds = %44, %32
  %50 = phi i32 [ %48, %44 ], [ 0, %32 ]
  %51 = icmp eq %struct.MB_MODE_INFO* %42, null
  br i1 %51, label %58, label %52

52:                                               ; preds = %49
  %53 = getelementptr inbounds %struct.MB_MODE_INFO, %struct.MB_MODE_INFO* %42, i64 0, i32 22, i32 1, i64 0
  %54 = load i8, i8* %53, align 2
  %55 = icmp ne i8 %54, 0
  %56 = zext i1 %55 to i32
  %57 = add nuw nsw i32 %50, %56
  br label %58

58:                                               ; preds = %49, %52
  %59 = phi i32 [ %57, %52 ], [ %50, %49 ]
  %60 = sext i32 %59 to i64
  %61 = zext i1 %10 to i64
  %62 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 20, i32 13, i64 %38, i64 %60, i64 %61
  %63 = load i32, i32* %62, align 4
  %64 = add nsw i32 %63, %4
  br i1 %10, label %65, label %103

65:                                               ; preds = %58
  %66 = zext i8 %9 to i32
  %67 = add nsw i32 %66, -2
  %68 = sext i32 %67 to i64
  %69 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 20, i32 9, i64 %38, i64 %68
  %70 = load i32, i32* %69, align 4
  %71 = tail call i32 @llvm.ctlz.i32(i32 %66, i1 true) #6, !range !9
  %72 = sub nuw nsw i32 32, %71
  %73 = icmp eq i32 %72, 0
  br i1 %73, label %85, label %74

74:                                               ; preds = %65
  %75 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 2, i32 4, i64 0, i32 8
  %76 = load i8*, i8** %75, align 16
  %77 = load i8, i8* %76, align 1
  %78 = zext i8 %77 to i32
  %79 = shl i32 1, %72
  %80 = sub nsw i32 %79, %66
  %81 = icmp sgt i32 %80, %78
  %82 = shl nuw nsw i32 %72, 9
  %83 = add nsw i32 %82, -512
  %84 = select i1 %81, i32 %83, i32 %82
  br label %85

85:                                               ; preds = %65, %74
  %86 = phi i32 [ %84, %74 ], [ 0, %65 ]
  %87 = bitcast [16 x i16]* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %87) #6
  %88 = getelementptr inbounds [16 x i16], [16 x i16]* %6, i64 0, i64 0
  %89 = bitcast [16 x i16]* %6 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %89, i8 -86, i64 32, i1 false)
  %90 = call i32 @av1_get_palette_cache(%struct.macroblockd* %33, i32 0, i16* nonnull %88) #6
  %91 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 35
  %92 = load %struct.SequenceHeader*, %struct.SequenceHeader** %91, align 16
  %93 = getelementptr inbounds %struct.SequenceHeader, %struct.SequenceHeader* %92, i64 0, i32 25
  %94 = load i32, i32* %93, align 8
  %95 = call i32 @av1_palette_color_cost_y(%struct.PALETTE_MODE_INFO* %7, i16* nonnull %88, i32 %90, i32 %94) #6
  %96 = getelementptr inbounds %struct.MB_MODE_INFO, %struct.MB_MODE_INFO* %2, i64 0, i32 24
  %97 = load i8, i8* %96, align 1
  %98 = call i32 @av1_cost_color_map(%struct.macroblock* %1, i32 0, i8 zeroext %3, i8 zeroext %97, i8 zeroext 0) #6
  %99 = add i32 %70, %64
  %100 = add i32 %99, %86
  %101 = add i32 %100, %95
  %102 = add i32 %101, %98
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %87) #6
  br label %103

103:                                              ; preds = %22, %5, %58, %85, %28
  %104 = phi i32 [ %4, %28 ], [ %102, %85 ], [ %64, %58 ], [ %4, %5 ], [ %4, %22 ]
  %105 = getelementptr inbounds %struct.MB_MODE_INFO, %struct.MB_MODE_INFO* %2, i64 0, i32 2
  %106 = load i8, i8* %105, align 2
  %107 = icmp eq i8 %106, 0
  br i1 %107, label %108, label %138

108:                                              ; preds = %103
  %109 = load i8, i8* %8, align 2
  %110 = icmp eq i8 %109, 0
  br i1 %110, label %111, label %153

111:                                              ; preds = %108
  %112 = load i8, i8* %19, align 8
  %113 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 35
  %114 = load %struct.SequenceHeader*, %struct.SequenceHeader** %113, align 16
  %115 = getelementptr inbounds %struct.SequenceHeader, %struct.SequenceHeader* %114, i64 0, i32 15
  %116 = load i8, i8* %115, align 4
  %117 = icmp eq i8 %116, 0
  %118 = icmp eq i8 %112, -1
  %119 = or i1 %118, %117
  %120 = zext i8 %112 to i64
  %121 = lshr i64 984063, %120
  %122 = and i64 %121, 1
  %123 = icmp eq i64 %122, 0
  %124 = or i1 %119, %123
  br i1 %124, label %153, label %125

125:                                              ; preds = %111
  %126 = zext i8 %12 to i64
  %127 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 20, i32 4, i64 %120, i64 %126
  %128 = load i32, i32* %127, align 4
  %129 = add nsw i32 %128, %104
  %130 = icmp eq i8 %12, 0
  br i1 %130, label %153, label %131

131:                                              ; preds = %125
  %132 = getelementptr inbounds %struct.MB_MODE_INFO, %struct.MB_MODE_INFO* %2, i64 0, i32 19, i32 0
  %133 = load i8, i8* %132, align 2
  %134 = zext i8 %133 to i64
  %135 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 20, i32 5, i64 %134
  %136 = load i32, i32* %135, align 4
  %137 = add nsw i32 %136, %129
  br label %153

138:                                              ; preds = %103
  %139 = add i8 %106, -1
  %140 = icmp ugt i8 %139, 7
  %141 = icmp ult i8 %3, 3
  %142 = or i1 %141, %140
  br i1 %142, label %153, label %143

143:                                              ; preds = %138
  %144 = zext i8 %106 to i64
  %145 = add nsw i64 %144, -1
  %146 = getelementptr inbounds %struct.MB_MODE_INFO, %struct.MB_MODE_INFO* %2, i64 0, i32 18, i64 0
  %147 = load i8, i8* %146, align 8
  %148 = sext i8 %147 to i64
  %149 = add nsw i64 %148, 3
  %150 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 20, i32 6, i64 %145, i64 %149
  %151 = load i32, i32* %150, align 4
  %152 = add nsw i32 %151, %104
  br label %153

153:                                              ; preds = %111, %108, %131, %125, %138, %143
  %154 = phi i32 [ %152, %143 ], [ %104, %138 ], [ %129, %125 ], [ %137, %131 ], [ %104, %108 ], [ %104, %111 ]
  %155 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 0, i32 0
  %156 = load i8, i8* %155, align 16
  %157 = and i8 %156, -3
  %158 = icmp eq i8 %157, 0
  br i1 %158, label %159, label %171

159:                                              ; preds = %153
  %160 = load i8, i8* %17, align 1, !range !8
  %161 = icmp eq i8 %160, 0
  br i1 %161, label %171, label %162

162:                                              ; preds = %159
  %163 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 20, i32 4
  %164 = load i8, i8* %163, align 4, !range !8
  %165 = icmp eq i8 %164, 0
  br i1 %165, label %171, label %166

166:                                              ; preds = %162
  %167 = zext i16 %16 to i64
  %168 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 20, i32 8, i64 %167
  %169 = load i32, i32* %168, align 4
  %170 = add nsw i32 %169, %154
  br label %171

171:                                              ; preds = %153, %159, %162, %166
  %172 = phi i32 [ %170, %166 ], [ %154, %162 ], [ %154, %159 ], [ %154, %153 ]
  ret i32 %172
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @av1_search_intra_uv_modes_in_interframe(%struct.IntraModeSearchState*, %struct.AV1_COMP*, %struct.macroblock*, i8 zeroext, %struct.RD_STATS* nocapture, %struct.RD_STATS* nocapture readonly, %struct.RD_STATS* nocapture, i64) local_unnamed_addr #0 {
  %9 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %2, i64 0, i32 2, i32 6
  %10 = load %struct.MB_MODE_INFO**, %struct.MB_MODE_INFO*** %9, align 8
  %11 = load %struct.MB_MODE_INFO*, %struct.MB_MODE_INFO** %10, align 8
  %12 = getelementptr inbounds %struct.MB_MODE_INFO, %struct.MB_MODE_INFO* %11, i64 0, i32 22
  %13 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %1, i64 0, i32 9, i32 9, i32 16
  %14 = load i8, i8* %13, align 2, !range !8
  %15 = icmp eq i8 %14, 0
  br i1 %15, label %28, label %16

16:                                               ; preds = %8
  %17 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %1, i64 0, i32 8, i32 20, i32 3
  %18 = load i8, i8* %17, align 1, !range !8
  %19 = getelementptr inbounds %struct.MB_MODE_INFO, %struct.MB_MODE_INFO* %11, i64 0, i32 0
  %20 = load i8, i8* %19, align 8
  %21 = icmp eq i8 %18, 0
  br i1 %21, label %28, label %22

22:                                               ; preds = %16
  %23 = zext i8 %20 to i64
  %24 = add nsw i64 %23, -13
  %25 = icmp ugt i64 %24, 2
  %26 = icmp ugt i8 %20, 2
  %27 = and i1 %26, %25
  br label %28

28:                                               ; preds = %22, %16, %8
  %29 = phi i1 [ false, %8 ], [ false, %16 ], [ %27, %22 ]
  %30 = getelementptr inbounds %struct.IntraModeSearchState, %struct.IntraModeSearchState* %0, i64 0, i32 4
  %31 = load i32, i32* %30, align 4
  %32 = icmp eq i32 %31, 2147483647
  br i1 %32, label %36, label %33

33:                                               ; preds = %28
  %34 = getelementptr inbounds %struct.IntraModeSearchState, %struct.IntraModeSearchState* %0, i64 0, i32 5
  %35 = load i32, i32* %34, align 8
  br label %93

36:                                               ; preds = %28
  %37 = getelementptr inbounds %struct.MB_MODE_INFO, %struct.MB_MODE_INFO* %11, i64 0, i32 28
  %38 = load i16, i16* %37, align 1
  %39 = and i16 %38, 7
  %40 = zext i16 %39 to i64
  %41 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %2, i64 0, i32 2, i32 42, i64 %40
  %42 = load i32, i32* %41, align 4
  %43 = icmp eq i32 %42, 0
  br i1 %43, label %44, label %62

44:                                               ; preds = %36
  %45 = getelementptr inbounds %struct.MB_MODE_INFO, %struct.MB_MODE_INFO* %11, i64 0, i32 0
  %46 = load i8, i8* %45, align 8
  %47 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %2, i64 0, i32 2, i32 4, i64 1, i32 1
  %48 = load i32, i32* %47, align 4
  %49 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %2, i64 0, i32 2, i32 4, i64 1, i32 2
  %50 = load i32, i32* %49, align 8
  %51 = zext i8 %46 to i64
  %52 = sext i32 %48 to i64
  %53 = sext i32 %50 to i64
  %54 = getelementptr inbounds [22 x [2 x [2 x i8]]], [22 x [2 x [2 x i8]]]* @ss_size_lookup, i64 0, i64 %51, i64 %52, i64 %53
  %55 = load i8, i8* %54, align 1
  %56 = zext i8 %55 to i64
  %57 = getelementptr inbounds [22 x i8], [22 x i8]* @max_txsize_rect_lookup, i64 0, i64 %56
  %58 = load i8, i8* %57, align 1
  switch i8 %58, label %61 [
    i8 4, label %62
    i8 12, label %62
    i8 11, label %62
    i8 18, label %59
    i8 17, label %60
  ]

59:                                               ; preds = %44
  br label %62

60:                                               ; preds = %44
  br label %62

61:                                               ; preds = %44
  br label %62

62:                                               ; preds = %36, %44, %44, %44, %59, %60, %61
  %63 = phi i8 [ 0, %36 ], [ %58, %61 ], [ 9, %60 ], [ 10, %59 ], [ 3, %44 ], [ 3, %44 ], [ 3, %44 ]
  %64 = getelementptr inbounds %struct.IntraModeSearchState, %struct.IntraModeSearchState* %0, i64 0, i32 5
  %65 = getelementptr inbounds %struct.IntraModeSearchState, %struct.IntraModeSearchState* %0, i64 0, i32 6
  %66 = getelementptr inbounds %struct.IntraModeSearchState, %struct.IntraModeSearchState* %0, i64 0, i32 7
  %67 = tail call i64 @av1_rd_pick_intra_sbuv_mode(%struct.AV1_COMP* %1, %struct.macroblock* %2, i32* %30, i32* %64, i64* %65, i32* %66, i8 zeroext %3, i8 zeroext %63)
  %68 = getelementptr inbounds %struct.MB_MODE_INFO, %struct.MB_MODE_INFO* %11, i64 0, i32 3
  %69 = load i8, i8* %68, align 1
  %70 = getelementptr inbounds %struct.IntraModeSearchState, %struct.IntraModeSearchState* %0, i64 0, i32 8
  store i8 %69, i8* %70, align 4
  br i1 %29, label %71, label %75

71:                                               ; preds = %62
  %72 = getelementptr inbounds %struct.IntraModeSearchState, %struct.IntraModeSearchState* %0, i64 0, i32 9
  %73 = bitcast %struct.PALETTE_MODE_INFO* %72 to i8*
  %74 = bitcast %struct.PALETTE_MODE_INFO* %12 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 2 %73, i8* align 2 %74, i64 50, i1 false)
  br label %75

75:                                               ; preds = %71, %62
  %76 = getelementptr inbounds %struct.MB_MODE_INFO, %struct.MB_MODE_INFO* %11, i64 0, i32 18, i64 1
  %77 = load i8, i8* %76, align 1
  %78 = getelementptr inbounds %struct.IntraModeSearchState, %struct.IntraModeSearchState* %0, i64 0, i32 10
  store i8 %77, i8* %78, align 8
  %79 = load i32, i32* %64, align 8
  %80 = load i64, i64* %65, align 8
  %81 = sext i32 %79 to i64
  %82 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %2, i64 0, i32 17
  %83 = load i32, i32* %82, align 8
  %84 = sext i32 %83 to i64
  %85 = mul nsw i64 %84, %81
  %86 = add nsw i64 %85, 256
  %87 = ashr i64 %86, 9
  %88 = shl i64 %80, 7
  %89 = add nsw i64 %87, %88
  %90 = icmp sgt i64 %89, %7
  br i1 %90, label %91, label %93

91:                                               ; preds = %75
  %92 = getelementptr inbounds %struct.IntraModeSearchState, %struct.IntraModeSearchState* %0, i64 0, i32 1
  store i32 1, i32* %92, align 4
  br label %124

93:                                               ; preds = %33, %75
  %94 = phi i32 [ %35, %33 ], [ %79, %75 ]
  %95 = getelementptr inbounds %struct.RD_STATS, %struct.RD_STATS* %6, i64 0, i32 0
  store i32 %94, i32* %95, align 8
  %96 = getelementptr inbounds %struct.IntraModeSearchState, %struct.IntraModeSearchState* %0, i64 0, i32 6
  %97 = load i64, i64* %96, align 8
  %98 = getelementptr inbounds %struct.RD_STATS, %struct.RD_STATS* %6, i64 0, i32 1
  store i64 %97, i64* %98, align 8
  %99 = getelementptr inbounds %struct.IntraModeSearchState, %struct.IntraModeSearchState* %0, i64 0, i32 7
  %100 = load i32, i32* %99, align 8
  %101 = getelementptr inbounds %struct.RD_STATS, %struct.RD_STATS* %6, i64 0, i32 4
  store i32 %100, i32* %101, align 8
  %102 = getelementptr inbounds %struct.RD_STATS, %struct.RD_STATS* %5, i64 0, i32 4
  %103 = load i32, i32* %102, align 8
  %104 = icmp ne i32 %103, 0
  %105 = icmp ne i32 %100, 0
  %106 = and i1 %105, %104
  %107 = zext i1 %106 to i32
  %108 = getelementptr inbounds %struct.RD_STATS, %struct.RD_STATS* %4, i64 0, i32 4
  store i32 %107, i32* %108, align 8
  %109 = getelementptr inbounds %struct.IntraModeSearchState, %struct.IntraModeSearchState* %0, i64 0, i32 8
  %110 = load i8, i8* %109, align 4
  %111 = getelementptr inbounds %struct.MB_MODE_INFO, %struct.MB_MODE_INFO* %11, i64 0, i32 3
  store i8 %110, i8* %111, align 1
  br i1 %29, label %112, label %120

112:                                              ; preds = %93
  %113 = getelementptr inbounds %struct.IntraModeSearchState, %struct.IntraModeSearchState* %0, i64 0, i32 9, i32 1, i64 1
  %114 = load i8, i8* %113, align 1
  %115 = getelementptr inbounds %struct.MB_MODE_INFO, %struct.MB_MODE_INFO* %11, i64 0, i32 22, i32 1, i64 1
  store i8 %114, i8* %115, align 1
  %116 = getelementptr inbounds %struct.MB_MODE_INFO, %struct.MB_MODE_INFO* %11, i64 0, i32 22, i32 0, i64 8
  %117 = bitcast i16* %116 to i8*
  %118 = getelementptr inbounds %struct.IntraModeSearchState, %struct.IntraModeSearchState* %0, i64 0, i32 9, i32 0, i64 8
  %119 = bitcast i16* %118 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 2 %117, i8* align 2 %119, i64 32, i1 false)
  br label %120

120:                                              ; preds = %112, %93
  %121 = getelementptr inbounds %struct.IntraModeSearchState, %struct.IntraModeSearchState* %0, i64 0, i32 10
  %122 = load i8, i8* %121, align 8
  %123 = getelementptr inbounds %struct.MB_MODE_INFO, %struct.MB_MODE_INFO* %11, i64 0, i32 18, i64 1
  store i8 %122, i8* %123, align 1
  br label %124

124:                                              ; preds = %91, %120
  %125 = phi i32 [ 1, %120 ], [ 0, %91 ]
  ret i32 %125
}

; Function Attrs: nounwind ssp uwtable
define hidden i64 @av1_rd_pick_intra_sby_mode(%struct.AV1_COMP*, %struct.macroblock*, i32*, i32*, i64*, i32*, i8 zeroext, i64, %struct.PICK_MODE_CONTEXT*) local_unnamed_addr #0 {
  %10 = alloca [1024 x i8], align 16
  %11 = alloca %struct.RD_STATS, align 8
  %12 = alloca %struct.RD_STATS, align 8
  %13 = alloca %struct.RD_STATS, align 8
  %14 = alloca i64, align 8
  %15 = alloca i64, align 8
  %16 = alloca [13 x i8], align 1
  %17 = alloca i32, align 4
  %18 = alloca %struct.MB_MODE_INFO, align 8
  %19 = alloca %struct.RD_STATS, align 8
  %20 = alloca i32, align 4
  store i64 %7, i64* %14, align 8
  %21 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 2, i32 6
  %22 = load %struct.MB_MODE_INFO**, %struct.MB_MODE_INFO*** %21, align 8
  %23 = load %struct.MB_MODE_INFO*, %struct.MB_MODE_INFO** %22, align 8
  %24 = bitcast i64* %15 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %24) #6
  store i64 9223372036854775807, i64* %15, align 8
  %25 = getelementptr inbounds [13 x i8], [13 x i8]* %16, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 13, i8* nonnull %25) #6
  call void @llvm.memset.p0i8.i64(i8* nonnull align 1 %25, i8 0, i64 13, i1 false)
  %26 = bitcast i32* %17 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %26) #6
  store i32 0, i32* %17, align 4
  %27 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 9, i32 9, i32 16
  %28 = load i8, i8* %27, align 2, !range !8
  %29 = icmp eq i8 %28, 0
  br i1 %29, label %46, label %30

30:                                               ; preds = %9
  %31 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 20, i32 3
  %32 = load i8, i8* %31, align 1, !range !8
  %33 = getelementptr inbounds %struct.MB_MODE_INFO, %struct.MB_MODE_INFO* %23, i64 0, i32 0
  %34 = load i8, i8* %33, align 8
  %35 = icmp eq i8 %32, 0
  br i1 %35, label %46, label %36

36:                                               ; preds = %30
  %37 = zext i8 %34 to i64
  %38 = add nsw i64 %37, -13
  %39 = icmp ugt i64 %38, 2
  %40 = icmp ugt i8 %34, 2
  %41 = and i1 %40, %39
  br i1 %41, label %42, label %46

42:                                               ; preds = %36
  %43 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 10
  %44 = load %struct.PALETTE_BUFFER*, %struct.PALETTE_BUFFER** %43, align 16
  %45 = getelementptr inbounds %struct.PALETTE_BUFFER, %struct.PALETTE_BUFFER* %44, i64 0, i32 0, i64 0
  br label %46

46:                                               ; preds = %36, %30, %9, %42
  %47 = phi i1 [ true, %42 ], [ false, %9 ], [ false, %30 ], [ false, %36 ]
  %48 = phi i8* [ %45, %42 ], [ null, %9 ], [ null, %30 ], [ null, %36 ]
  %49 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 2, i32 12
  %50 = load %struct.MB_MODE_INFO*, %struct.MB_MODE_INFO** %49, align 16
  %51 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 2, i32 11
  %52 = load %struct.MB_MODE_INFO*, %struct.MB_MODE_INFO** %51, align 8
  %53 = tail call zeroext i8 @av1_above_block_mode(%struct.MB_MODE_INFO* %50) #6
  %54 = tail call zeroext i8 @av1_left_block_mode(%struct.MB_MODE_INFO* %52) #6
  %55 = zext i8 %53 to i64
  %56 = getelementptr inbounds [13 x i32], [13 x i32]* @intra_mode_context, i64 0, i64 %55
  %57 = load i32, i32* %56, align 4
  %58 = zext i8 %54 to i64
  %59 = getelementptr inbounds [13 x i32], [13 x i32]* @intra_mode_context, i64 0, i64 %58
  %60 = load i32, i32* %59, align 4
  %61 = sext i32 %57 to i64
  %62 = sext i32 %60 to i64
  %63 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 20, i32 2, i64 %61, i64 %62, i64 0
  %64 = getelementptr inbounds %struct.MB_MODE_INFO, %struct.MB_MODE_INFO* %23, i64 0, i32 18, i64 0
  store i8 0, i8* %64, align 8
  %65 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 40, i32 8, i32 3
  %66 = load i32, i32* %65, align 4
  %67 = icmp eq i32 %66, 0
  br i1 %67, label %77, label %68

68:                                               ; preds = %46
  %69 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 35
  %70 = load %struct.SequenceHeader*, %struct.SequenceHeader** %69, align 16
  %71 = getelementptr inbounds %struct.SequenceHeader, %struct.SequenceHeader* %70, i64 0, i32 7
  %72 = load i8, i8* %71, align 4
  %73 = add nsw i32 %66, -1
  %74 = sext i32 %73 to i64
  %75 = getelementptr inbounds [4 x float], [4 x float]* @av1_rd_pick_intra_sby_mode.thresh, i64 0, i64 %74
  %76 = load float, float* %75, align 4
  call fastcc void @prune_intra_mode_with_hog(%struct.macroblock* %1, i8 zeroext %6, i8 zeroext %72, float %76, i8* nonnull %25, i32 0)
  br label %77

77:                                               ; preds = %46, %68
  %78 = getelementptr inbounds %struct.MB_MODE_INFO, %struct.MB_MODE_INFO* %23, i64 0, i32 19, i32 1
  store i8 0, i8* %78, align 1
  %79 = getelementptr inbounds %struct.MB_MODE_INFO, %struct.MB_MODE_INFO* %23, i64 0, i32 22, i32 1, i64 0
  store i8 0, i8* %79, align 2
  %80 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 40, i32 9, i32 5, i32 1
  %81 = load i32, i32* %80, align 4
  %82 = icmp eq i32 %81, 0
  br i1 %82, label %83, label %87

83:                                               ; preds = %77
  %84 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 9, i32 19, i32 6
  %85 = load i8, i8* %84, align 2, !range !8
  %86 = zext i8 %85 to i32
  br label %87

87:                                               ; preds = %83, %77
  %88 = phi i32 [ 1, %77 ], [ %86, %83 ]
  %89 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 57, i32 0
  store i32 %88, i32* %89, align 4
  %90 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 40, i32 9, i32 5, i32 2
  %91 = load i32, i32* %90, align 4
  %92 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 57, i32 1
  store i32 %91, i32* %92, align 4
  %93 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 34, i32 4, i64 1
  %94 = load i32, i32* %93, align 4
  %95 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 57, i32 7
  store i32 %94, i32* %95, align 4
  %96 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 34, i32 5, i64 1
  %97 = load i32, i32* %96, align 4
  %98 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 57, i32 9
  store i32 %97, i32* %98, align 4
  %99 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 40, i32 11, i32 3
  %100 = load i32, i32* %99, align 4
  %101 = icmp eq i32 %100, 0
  %102 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 34, i32 2, i64 1
  %103 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 34, i32 3, i64 1
  %104 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 34, i32 2, i64 0
  %105 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 34, i32 3, i64 0
  %106 = select i1 %101, i32* %104, i32* %102
  %107 = select i1 %101, i32* %105, i32* %103
  %108 = load i32, i32* %106, align 4
  %109 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 57, i32 6
  store i32 %108, i32* %109, align 4
  %110 = load i32, i32* %107, align 4
  %111 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 57, i32 4
  store i32 %110, i32* %111, align 4
  %112 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 40, i32 11, i32 0
  %113 = load i32, i32* %112, align 4
  %114 = icmp eq i32 %113, 0
  %115 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 34, i32 0, i64 1, i64 0
  %116 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 34, i32 0, i64 1, i64 1
  %117 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 34, i32 0, i64 0, i64 0
  %118 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 34, i32 0, i64 0, i64 1
  %119 = select i1 %114, i32* %117, i32* %115
  %120 = select i1 %114, i32* %118, i32* %116
  %121 = load i32, i32* %119, align 4
  %122 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 57, i32 3, i64 0
  store i32 %121, i32* %122, align 4
  %123 = load i32, i32* %120, align 4
  %124 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 57, i32 3, i64 1
  store i32 %123, i32* %124, align 4
  %125 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 40, i32 11, i32 1
  %126 = load i32, i32* %125, align 4
  %127 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 34, i32 1, i64 0
  %128 = load i8, i8* %127, align 4
  %129 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 57, i32 5
  store i8 %128, i8* %129, align 4
  %130 = icmp eq i32 %126, 0
  br i1 %130, label %134, label %131

131:                                              ; preds = %87
  %132 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 34, i32 1, i64 1
  %133 = load i8, i8* %132, align 1
  store i8 %133, i8* %129, align 4
  br label %134

134:                                              ; preds = %131, %87
  %135 = phi i8 [ %128, %87 ], [ %133, %131 ]
  %136 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 20, i32 7
  %137 = load i8, i8* %136, align 1, !range !8
  %138 = icmp eq i8 %137, 0
  %139 = icmp eq i8 %135, 2
  %140 = select i1 %139, i8 1, i8 2
  %141 = select i1 %138, i8 %140, i8 0
  %142 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 57, i32 8
  store i8 %141, i8* %142, align 4
  %143 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 40, i32 9, i32 5, i32 9
  %144 = load i32, i32* %143, align 4
  %145 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 40, i32 9, i32 5, i32 0
  %146 = load i8, i8* %145, align 4
  %147 = zext i8 %146 to i32
  %148 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 57, i32 2
  store i32 %147, i32* %148, align 4
  %149 = icmp eq i32 %144, 0
  br i1 %149, label %155, label %150

150:                                              ; preds = %134
  %151 = add nsw i32 %144, -1
  %152 = sext i32 %151 to i64
  %153 = getelementptr inbounds [2 x [2 x i32]], [2 x [2 x i32]]* @set_tx_type_prune.prune_mode, i64 0, i64 %152, i64 0
  %154 = load i32, i32* %153, align 8
  store i32 %154, i32* %148, align 4
  br label %155

155:                                              ; preds = %134, %150
  %156 = getelementptr inbounds %struct.MB_MODE_INFO, %struct.MB_MODE_INFO* %18, i64 0, i32 0
  call void @llvm.lifetime.start.p0i8(i64 184, i8* nonnull %156) #6
  %157 = getelementptr inbounds %struct.MB_MODE_INFO, %struct.MB_MODE_INFO* %23, i64 0, i32 0
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %156, i8* align 8 %157, i64 184, i1 false)
  %158 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 42
  %159 = bitcast %struct.WinnerModeStats** %158 to i8**
  %160 = load i8*, i8** %159, align 16
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %160, i8 0, i64 49896, i1 false)
  %161 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 43
  store i32 0, i32* %161, align 8
  %162 = bitcast %struct.RD_STATS* %19 to i8*
  %163 = bitcast i32* %20 to i8*
  %164 = getelementptr inbounds %struct.MB_MODE_INFO, %struct.MB_MODE_INFO* %23, i64 0, i32 2
  %165 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 9, i32 18, i32 5
  %166 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 9, i32 18, i32 2
  %167 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 40, i32 8, i32 5
  %168 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 40, i32 8, i32 6
  %169 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 9, i32 18, i32 3
  %170 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 51
  %171 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 52
  %172 = icmp ult i8 %6, 3
  %173 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 9, i32 18, i32 6
  %174 = getelementptr inbounds %struct.RD_STATS, %struct.RD_STATS* %19, i64 0, i32 0
  %175 = zext i8 %6 to i64
  %176 = and i64 %175, 252
  %177 = icmp eq i64 %176, 12
  %178 = getelementptr inbounds [22 x i8], [22 x i8]* @max_txsize_lookup, i64 0, i64 %175
  %179 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8
  %180 = getelementptr inbounds %struct.RD_STATS, %struct.RD_STATS* %19, i64 0, i32 1
  %181 = getelementptr inbounds %struct.RD_STATS, %struct.RD_STATS* %19, i64 0, i32 4
  %182 = getelementptr inbounds %struct.MB_MODE_INFO, %struct.MB_MODE_INFO* %23, i64 0, i32 28
  %183 = getelementptr inbounds %struct.MB_MODE_INFO, %struct.MB_MODE_INFO* %23, i64 0, i32 24
  %184 = icmp eq i8 %6, 0
  %185 = getelementptr inbounds [22 x i8], [22 x i8]* @bsize_to_tx_size_cat.bsize_to_tx_size_depth_table, i64 0, i64 %175
  %186 = getelementptr inbounds [22 x i8], [22 x i8]* @max_txsize_rect_lookup, i64 0, i64 %175
  %187 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 2, i32 7
  %188 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 2, i32 8
  %189 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 2, i32 27
  %190 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 2, i32 28
  %191 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 17
  %192 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 40, i32 11, i32 4
  %193 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 0, i32 0
  %194 = getelementptr inbounds %struct.PICK_MODE_CONTEXT, %struct.PICK_MODE_CONTEXT* %8, i64 0, i32 3
  %195 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 58, i32 1, i64 0
  %196 = getelementptr inbounds %struct.PICK_MODE_CONTEXT, %struct.PICK_MODE_CONTEXT* %8, i64 0, i32 10
  %197 = getelementptr inbounds %struct.PICK_MODE_CONTEXT, %struct.PICK_MODE_CONTEXT* %8, i64 0, i32 9
  %198 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 2, i32 15
  br label %200

199:                                              ; preds = %486
  br i1 %47, label %489, label %493

200:                                              ; preds = %486, %155
  %201 = phi i64 [ 0, %155 ], [ %487, %486 ]
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %162) #6
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %162, i8 -86, i64 40, i1 false)
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %163) #6
  store i32 -1431655766, i32* %20, align 4
  %202 = getelementptr inbounds [13 x i8], [13 x i8]* @intra_rd_search_mode_order, i64 0, i64 %201
  %203 = load i8, i8* %202, align 1
  store i8 %203, i8* %164, align 2
  %204 = add i8 %203, -3
  %205 = icmp ugt i8 %204, 5
  br i1 %205, label %209, label %206

206:                                              ; preds = %200
  %207 = load i8, i8* %165, align 1, !range !8
  %208 = icmp eq i8 %207, 0
  br i1 %208, label %486, label %209

209:                                              ; preds = %206, %200
  %210 = load i8, i8* %166, align 1, !range !8
  %211 = icmp eq i8 %210, 0
  br i1 %211, label %215, label %212

212:                                              ; preds = %209
  %213 = load i32, i32* %167, align 4
  %214 = icmp eq i32 %213, 0
  br i1 %214, label %229, label %215

215:                                              ; preds = %212, %209
  %216 = add nsw i64 %201, -5
  %217 = icmp ult i64 %216, 2
  %218 = icmp eq i64 %201, 3
  %219 = and i1 %218, %211
  %220 = or i1 %217, %219
  br i1 %220, label %486, label %221

221:                                              ; preds = %215
  %222 = load i32, i32* %167, align 4
  %223 = icmp eq i32 %222, 0
  br i1 %223, label %229, label %224

224:                                              ; preds = %221
  %225 = load i32, i32* %168, align 8
  %226 = icmp eq i32 %225, 0
  %227 = icmp eq i64 %201, 3
  %228 = and i1 %227, %226
  br i1 %228, label %486, label %229

229:                                              ; preds = %212, %221, %224
  %230 = load i8, i8* %169, align 1, !range !8
  %231 = icmp eq i8 %230, 0
  %232 = icmp eq i64 %201, 4
  %233 = and i1 %232, %231
  br i1 %233, label %486, label %234

234:                                              ; preds = %229
  store i8 0, i8* %64, align 8
  %235 = load i32, i32* %170, align 8
  %236 = icmp eq i32 %235, 0
  br i1 %236, label %242, label %237

237:                                              ; preds = %234
  %238 = load %struct.MB_MODE_INFO*, %struct.MB_MODE_INFO** %171, align 16
  %239 = getelementptr inbounds %struct.MB_MODE_INFO, %struct.MB_MODE_INFO* %238, i64 0, i32 2
  %240 = load i8, i8* %239, align 2
  %241 = icmp eq i8 %203, %240
  br i1 %241, label %242, label %486

242:                                              ; preds = %237, %234
  %243 = add i8 %203, -1
  %244 = icmp ult i8 %243, 8
  br i1 %244, label %245, label %260

245:                                              ; preds = %242
  %246 = zext i8 %203 to i64
  %247 = getelementptr inbounds [13 x i8], [13 x i8]* %16, i64 0, i64 %246
  %248 = load i8, i8* %247, align 1
  %249 = icmp eq i8 %248, 0
  br i1 %249, label %250, label %486

250:                                              ; preds = %245
  br i1 %172, label %260, label %251

251:                                              ; preds = %250
  %252 = load i8, i8* %173, align 1, !range !8
  %253 = icmp eq i8 %252, 0
  br i1 %253, label %260, label %254

254:                                              ; preds = %251
  store i32 2147483647, i32* %174, align 8
  %255 = load i8, i8* %164, align 2
  %256 = zext i8 %255 to i64
  %257 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 20, i32 2, i64 %61, i64 %62, i64 %256
  %258 = load i32, i32* %257, align 4
  %259 = load i64, i64* %14, align 8
  call fastcc void @rd_pick_intra_angle_sby(%struct.AV1_COMP* %0, %struct.macroblock* %1, i32* nonnull %20, %struct.RD_STATS* nonnull %19, i8 zeroext %6, i32 %258, i64 %259, i64* nonnull %15, i32 1)
  br label %277

260:                                              ; preds = %242, %251, %250
  br i1 %177, label %263, label %261

261:                                              ; preds = %260
  %262 = load i8, i8* %178, align 1
  br label %263

263:                                              ; preds = %261, %260
  %264 = phi i8 [ %262, %261 ], [ 3, %260 ]
  %265 = call fastcc i64 @intra_model_rd(%struct.AV1Common* %179, %struct.macroblock* %1, i32 0, i8 zeroext %6, i8 zeroext %264, i32 1) #6
  %266 = load i64, i64* %15, align 8
  %267 = icmp eq i64 %266, 9223372036854775807
  br i1 %267, label %272, label %268

268:                                              ; preds = %263
  %269 = ashr i64 %266, 2
  %270 = add nsw i64 %269, %266
  %271 = icmp sgt i64 %265, %270
  br i1 %271, label %486, label %272

272:                                              ; preds = %268, %263
  %273 = icmp slt i64 %265, %266
  br i1 %273, label %274, label %275

274:                                              ; preds = %272
  store i64 %265, i64* %15, align 8
  br label %275

275:                                              ; preds = %272, %274
  %276 = load i64, i64* %14, align 8
  call void @av1_pick_uniform_tx_size_type_yrd(%struct.AV1_COMP* %0, %struct.macroblock* %1, %struct.RD_STATS* nonnull %19, i8 zeroext %6, i64 %276) #6
  br label %277

277:                                              ; preds = %275, %254
  %278 = load i32, i32* %174, align 8
  %279 = load i64, i64* %180, align 8
  %280 = load i32, i32* %181, align 8
  %281 = icmp eq i32 %278, 2147483647
  br i1 %281, label %486, label %282

282:                                              ; preds = %277
  %283 = load i16, i16* %182, align 1
  %284 = and i16 %283, 7
  %285 = zext i16 %284 to i64
  %286 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 2, i32 42, i64 %285
  %287 = load i32, i32* %286, align 4
  %288 = icmp eq i32 %287, 0
  br i1 %288, label %289, label %397

289:                                              ; preds = %282
  %290 = load i8, i8* %157, align 8
  %291 = icmp eq i8 %290, 0
  br i1 %291, label %397, label %292

292:                                              ; preds = %289
  %293 = load i8, i8* %183, align 1
  %294 = load i8, i8* %142, align 4
  %295 = icmp ne i8 %294, 2
  %296 = or i1 %184, %295
  br i1 %296, label %394, label %297

297:                                              ; preds = %292
  %298 = load i8, i8* %185, align 1
  %299 = zext i8 %298 to i64
  %300 = add nsw i64 %299, -1
  %301 = load i8, i8* %186, align 1
  %302 = icmp eq i8 %301, %293
  br i1 %302, label %313, label %303

303:                                              ; preds = %297, %303
  %304 = phi i8 [ %309, %303 ], [ %301, %297 ]
  %305 = phi i32 [ %306, %303 ], [ 0, %297 ]
  %306 = add nuw nsw i32 %305, 1
  %307 = zext i8 %304 to i64
  %308 = getelementptr inbounds [19 x i8], [19 x i8]* @sub_tx_size_map, i64 0, i64 %307
  %309 = load i8, i8* %308, align 1
  %310 = icmp eq i8 %309, %293
  br i1 %310, label %311, label %303

311:                                              ; preds = %303
  %312 = zext i32 %306 to i64
  br label %313

313:                                              ; preds = %311, %297
  %314 = phi i64 [ 0, %297 ], [ %312, %311 ]
  %315 = load %struct.MB_MODE_INFO**, %struct.MB_MODE_INFO*** %21, align 8
  %316 = load %struct.MB_MODE_INFO*, %struct.MB_MODE_INFO** %315, align 8
  %317 = load %struct.MB_MODE_INFO*, %struct.MB_MODE_INFO** %49, align 16
  %318 = load %struct.MB_MODE_INFO*, %struct.MB_MODE_INFO** %51, align 8
  %319 = getelementptr inbounds %struct.MB_MODE_INFO, %struct.MB_MODE_INFO* %316, i64 0, i32 0
  %320 = load i8, i8* %319, align 8
  %321 = zext i8 %320 to i64
  %322 = getelementptr inbounds [22 x i8], [22 x i8]* @max_txsize_rect_lookup, i64 0, i64 %321
  %323 = load i8, i8* %322, align 1
  %324 = zext i8 %323 to i64
  %325 = getelementptr inbounds [19 x i32], [19 x i32]* @tx_size_wide, i64 0, i64 %324
  %326 = load i32, i32* %325, align 4
  %327 = getelementptr inbounds [19 x i32], [19 x i32]* @tx_size_high, i64 0, i64 %324
  %328 = load i32, i32* %327, align 4
  %329 = load i8, i8* %187, align 16, !range !8
  %330 = icmp ne i8 %329, 0
  %331 = load i8, i8* %188, align 1, !range !8
  %332 = icmp ne i8 %331, 0
  %333 = load i8*, i8** %189, align 16
  %334 = load i8, i8* %333, align 1
  %335 = zext i8 %334 to i32
  %336 = icmp sle i32 %326, %335
  %337 = zext i1 %336 to i32
  %338 = load i8*, i8** %190, align 8
  %339 = load i8, i8* %338, align 1
  %340 = zext i8 %339 to i32
  %341 = icmp sle i32 %328, %340
  %342 = zext i1 %341 to i32
  br i1 %330, label %343, label %361

343:                                              ; preds = %313
  %344 = getelementptr inbounds %struct.MB_MODE_INFO, %struct.MB_MODE_INFO* %317, i64 0, i32 28
  %345 = load i16, i16* %344, align 1
  %346 = trunc i16 %345 to i8
  %347 = icmp sgt i8 %346, -1
  br i1 %347, label %348, label %352

348:                                              ; preds = %343
  %349 = getelementptr inbounds %struct.MB_MODE_INFO, %struct.MB_MODE_INFO* %317, i64 0, i32 6, i64 0
  %350 = load i8, i8* %349, align 8
  %351 = icmp slt i8 %350, 1
  br i1 %351, label %361, label %352

352:                                              ; preds = %348, %343
  %353 = getelementptr inbounds %struct.MB_MODE_INFO, %struct.MB_MODE_INFO* %317, i64 0, i32 0
  %354 = load i8, i8* %353, align 8
  %355 = zext i8 %354 to i64
  %356 = getelementptr inbounds [22 x i8], [22 x i8]* @block_size_wide, i64 0, i64 %355
  %357 = load i8, i8* %356, align 1
  %358 = zext i8 %357 to i32
  %359 = icmp sle i32 %326, %358
  %360 = zext i1 %359 to i32
  br label %361

361:                                              ; preds = %352, %348, %313
  %362 = phi i32 [ %360, %352 ], [ %337, %348 ], [ %337, %313 ]
  br i1 %332, label %363, label %385

363:                                              ; preds = %361
  %364 = getelementptr inbounds %struct.MB_MODE_INFO, %struct.MB_MODE_INFO* %318, i64 0, i32 28
  %365 = load i16, i16* %364, align 1
  %366 = trunc i16 %365 to i8
  %367 = icmp sgt i8 %366, -1
  br i1 %367, label %368, label %372

368:                                              ; preds = %363
  %369 = getelementptr inbounds %struct.MB_MODE_INFO, %struct.MB_MODE_INFO* %318, i64 0, i32 6, i64 0
  %370 = load i8, i8* %369, align 8
  %371 = icmp slt i8 %370, 1
  br i1 %371, label %381, label %372

372:                                              ; preds = %368, %363
  %373 = getelementptr inbounds %struct.MB_MODE_INFO, %struct.MB_MODE_INFO* %318, i64 0, i32 0
  %374 = load i8, i8* %373, align 8
  %375 = zext i8 %374 to i64
  %376 = getelementptr inbounds [22 x i8], [22 x i8]* @block_size_high, i64 0, i64 %375
  %377 = load i8, i8* %376, align 1
  %378 = zext i8 %377 to i32
  %379 = icmp sle i32 %328, %378
  %380 = zext i1 %379 to i32
  br label %381

381:                                              ; preds = %372, %368
  %382 = phi i32 [ %380, %372 ], [ %342, %368 ]
  br i1 %330, label %383, label %385

383:                                              ; preds = %381
  %384 = add nuw nsw i32 %382, %362
  br label %389

385:                                              ; preds = %381, %361
  %386 = phi i32 [ %382, %381 ], [ %342, %361 ]
  %387 = select i1 %332, i32 %386, i32 0
  %388 = select i1 %330, i32 %362, i32 %387
  br label %389

389:                                              ; preds = %385, %383
  %390 = phi i32 [ %384, %383 ], [ %388, %385 ]
  %391 = sext i32 %390 to i64
  %392 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 20, i32 39, i64 %300, i64 %391, i64 %314
  %393 = load i32, i32* %392, align 4
  br label %394

394:                                              ; preds = %292, %389
  %395 = phi i32 [ %393, %389 ], [ 0, %292 ]
  %396 = sub nsw i32 %278, %395
  br label %397

397:                                              ; preds = %289, %282, %394
  %398 = phi i32 [ %278, %282 ], [ %396, %394 ], [ %278, %289 ]
  %399 = load i8, i8* %164, align 2
  %400 = zext i8 %399 to i64
  %401 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 20, i32 2, i64 %61, i64 %62, i64 %400
  %402 = load i32, i32* %401, align 4
  %403 = call fastcc i32 @intra_mode_info_cost_y(%struct.AV1_COMP* %0, %struct.macroblock* %1, %struct.MB_MODE_INFO* %23, i8 zeroext %6, i32 %402)
  %404 = add nsw i32 %403, %278
  store i32 %404, i32* %20, align 4
  %405 = sext i32 %404 to i64
  %406 = load i32, i32* %191, align 8
  %407 = sext i32 %406 to i64
  %408 = mul nsw i64 %407, %405
  %409 = add nsw i64 %408, 256
  %410 = ashr i64 %409, 9
  %411 = shl nsw i64 %279, 7
  %412 = add nsw i64 %410, %411
  %413 = load i8, i8* %192, align 4
  %414 = load %struct.WinnerModeStats*, %struct.WinnerModeStats** %158, align 16
  %415 = icmp eq i8 %413, 0
  %416 = icmp eq i64 %412, 9223372036854775807
  %417 = or i1 %415, %416
  br i1 %417, label %475, label %418

418:                                              ; preds = %397
  %419 = load i8, i8* %79, align 2
  %420 = icmp ne i8 %419, 0
  %421 = load i8, i8* %193, align 16
  %422 = and i8 %421, -3
  %423 = icmp ne i8 %422, 0
  %424 = and i1 %420, %423
  br i1 %424, label %475, label %425

425:                                              ; preds = %418
  %426 = select i1 %423, i32 1, i32 3
  %427 = icmp eq i8 %413, 1
  %428 = select i1 %423, i32 1, i32 2
  %429 = select i1 %427, i32 %428, i32 %426
  %430 = load i32, i32* %161, align 8
  %431 = icmp eq i32 %430, 0
  br i1 %431, label %465, label %432

432:                                              ; preds = %425
  %433 = icmp sgt i32 %430, 0
  br i1 %433, label %434, label %451

434:                                              ; preds = %432
  %435 = zext i32 %430 to i64
  br label %436

436:                                              ; preds = %442, %434
  %437 = phi i64 [ 0, %434 ], [ %443, %442 ]
  %438 = phi i32 [ 0, %434 ], [ %444, %442 ]
  %439 = getelementptr inbounds %struct.WinnerModeStats, %struct.WinnerModeStats* %414, i64 %437, i32 2
  %440 = load i64, i64* %439, align 8
  %441 = icmp sgt i64 %440, %412
  br i1 %441, label %446, label %442

442:                                              ; preds = %436
  %443 = add nuw nsw i64 %437, 1
  %444 = add nuw nsw i32 %438, 1
  %445 = icmp eq i64 %443, %435
  br i1 %445, label %448, label %436

446:                                              ; preds = %436
  %447 = trunc i64 %437 to i32
  br label %448

448:                                              ; preds = %442, %446
  %449 = phi i32 [ %447, %446 ], [ %444, %442 ]
  %450 = icmp eq i32 %429, %449
  br i1 %450, label %475, label %451

451:                                              ; preds = %448, %432
  %452 = phi i32 [ %449, %448 ], [ 0, %432 ]
  %453 = add nsw i32 %429, -1
  %454 = icmp slt i32 %452, %453
  br i1 %454, label %455, label %465

455:                                              ; preds = %451
  %456 = add nuw nsw i32 %452, 1
  %457 = zext i32 %456 to i64
  %458 = getelementptr inbounds %struct.WinnerModeStats, %struct.WinnerModeStats* %414, i64 %457, i32 0, i32 0
  %459 = zext i32 %452 to i64
  %460 = getelementptr inbounds %struct.WinnerModeStats, %struct.WinnerModeStats* %414, i64 %459, i32 0, i32 0
  %461 = xor i32 %452, -1
  %462 = add nsw i32 %429, %461
  %463 = sext i32 %462 to i64
  %464 = mul nsw i64 %463, 16632
  call void @llvm.memmove.p0i8.p0i8.i64(i8* align 8 %458, i8* align 8 %460, i64 %464, i1 false) #6
  br label %465

465:                                              ; preds = %455, %451, %425
  %466 = phi i32 [ %452, %455 ], [ %452, %451 ], [ 0, %425 ]
  %467 = zext i32 %466 to i64
  %468 = getelementptr inbounds %struct.WinnerModeStats, %struct.WinnerModeStats* %414, i64 %467, i32 0, i32 0
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %468, i8* align 8 %157, i64 184, i1 false) #6
  %469 = getelementptr inbounds %struct.WinnerModeStats, %struct.WinnerModeStats* %414, i64 %467, i32 2
  store i64 %412, i64* %469, align 8
  %470 = getelementptr inbounds %struct.WinnerModeStats, %struct.WinnerModeStats* %414, i64 %467, i32 6
  store i8 0, i8* %470, align 8
  %471 = load i32, i32* %161, align 8
  %472 = add nsw i32 %471, 1
  %473 = icmp slt i32 %472, %429
  %474 = select i1 %473, i32 %472, i32 %429
  store i32 %474, i32* %161, align 8
  br label %475

475:                                              ; preds = %397, %418, %448, %465
  %476 = load i64, i64* %14, align 8
  %477 = icmp slt i64 %412, %476
  br i1 %477, label %478, label %486

478:                                              ; preds = %475
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %156, i8* align 8 %157, i64 184, i1 false)
  store i64 %412, i64* %14, align 8
  store i32 1, i32* %17, align 4
  store i32 %404, i32* %2, align 4
  store i32 %398, i32* %3, align 4
  store i64 %279, i64* %4, align 8
  store i32 %280, i32* %5, align 4
  %479 = load i8*, i8** %194, align 8
  %480 = load i32, i32* %196, align 8
  %481 = sext i32 %480 to i64
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %479, i8* align 4 %195, i64 %481, i1 false)
  %482 = load i8*, i8** %197, align 8
  %483 = load i8*, i8** %198, align 8
  %484 = load i32, i32* %196, align 8
  %485 = sext i32 %484 to i64
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %482, i8* align 1 %483, i64 %485, i1 false)
  br label %486

486:                                              ; preds = %229, %224, %268, %215, %475, %478, %277, %245, %237, %206
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %163) #6
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %162) #6
  %487 = add nuw nsw i64 %201, 1
  %488 = icmp eq i64 %487, 13
  br i1 %488, label %199, label %200

489:                                              ; preds = %199
  %490 = load i32, i32* %63, align 4
  %491 = load i8*, i8** %194, align 8
  %492 = load i8*, i8** %197, align 8
  call void @av1_rd_pick_palette_intra_sby(%struct.AV1_COMP* %0, %struct.macroblock* %1, i8 zeroext %6, i32 %490, %struct.MB_MODE_INFO* nonnull %18, i8* %48, i64* nonnull %14, i64* nonnull %15, i32* %2, i32* %3, i64* %4, i32* %5, i32* nonnull %17, %struct.PICK_MODE_CONTEXT* %8, i8* %491, i8* %492) #6
  br label %493

493:                                              ; preds = %489, %199
  %494 = load i32, i32* %17, align 4
  %495 = icmp eq i32 %494, 0
  br i1 %495, label %1143, label %496

496:                                              ; preds = %493
  %497 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 35
  %498 = load %struct.SequenceHeader*, %struct.SequenceHeader** %497, align 16
  %499 = getelementptr inbounds %struct.SequenceHeader, %struct.SequenceHeader* %498, i64 0, i32 15
  %500 = load i8, i8* %499, align 4
  %501 = icmp eq i8 %500, 0
  %502 = icmp eq i8 %6, -1
  %503 = or i1 %502, %501
  br i1 %503, label %684, label %504

504:                                              ; preds = %496
  %505 = lshr i64 984063, %175
  %506 = and i64 %505, 1
  %507 = icmp eq i64 %506, 0
  br i1 %507, label %684, label %508

508:                                              ; preds = %504
  %509 = load i32, i32* %63, align 4
  %510 = getelementptr inbounds %struct.MB_MODE_INFO, %struct.MB_MODE_INFO* %18, i64 0, i32 2
  %511 = load i8, i8* %510, align 2
  %512 = load i32, i32* %168, align 8
  %513 = icmp eq i32 %512, 2
  br i1 %513, label %684, label %514

514:                                              ; preds = %508
  %515 = load %struct.MB_MODE_INFO**, %struct.MB_MODE_INFO*** %21, align 8
  %516 = load %struct.MB_MODE_INFO*, %struct.MB_MODE_INFO** %515, align 8
  %517 = getelementptr inbounds [1024 x i8], [1024 x i8]* %10, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 1024, i8* nonnull %517)
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %517, i8 -86, i64 1024, i1 false)
  %518 = getelementptr inbounds %struct.MB_MODE_INFO, %struct.MB_MODE_INFO* %516, i64 0, i32 19, i32 1
  store i8 1, i8* %518, align 1
  %519 = getelementptr inbounds %struct.MB_MODE_INFO, %struct.MB_MODE_INFO* %516, i64 0, i32 2
  store i8 0, i8* %519, align 2
  %520 = getelementptr inbounds %struct.MB_MODE_INFO, %struct.MB_MODE_INFO* %516, i64 0, i32 22, i32 1, i64 0
  store i8 0, i8* %520, align 2
  %521 = load i32, i32* %170, align 8
  %522 = icmp eq i32 %521, 0
  br i1 %522, label %528, label %523

523:                                              ; preds = %514
  %524 = load %struct.MB_MODE_INFO*, %struct.MB_MODE_INFO** %171, align 16
  %525 = getelementptr inbounds %struct.MB_MODE_INFO, %struct.MB_MODE_INFO* %524, i64 0, i32 19, i32 1
  %526 = load i8, i8* %525, align 1
  %527 = icmp eq i8 %526, 0
  br i1 %527, label %679, label %528

528:                                              ; preds = %523, %514
  %529 = bitcast %struct.RD_STATS* %11 to i8*
  %530 = getelementptr inbounds %struct.MB_MODE_INFO, %struct.MB_MODE_INFO* %516, i64 0, i32 19, i32 0
  %531 = zext i8 %511 to i64
  %532 = getelementptr inbounds [13 x i8], [13 x i8]* @av1_derived_filter_intra_mode_used_flag, i64 0, i64 %531
  %533 = getelementptr inbounds %struct.RD_STATS, %struct.RD_STATS* %11, i64 0, i32 0
  %534 = getelementptr inbounds %struct.RD_STATS, %struct.RD_STATS* %11, i64 0, i32 1
  %535 = getelementptr inbounds %struct.AV1Common, %struct.AV1Common* %179, i64 0, i32 0, i32 0
  %536 = getelementptr inbounds %struct.MB_MODE_INFO, %struct.MB_MODE_INFO* %516, i64 0, i32 0
  %537 = getelementptr inbounds %struct.MB_MODE_INFO, %struct.MB_MODE_INFO* %516, i64 0, i32 24
  %538 = getelementptr inbounds %struct.RD_STATS, %struct.RD_STATS* %11, i64 0, i32 4
  br label %539

539:                                              ; preds = %670, %528
  %540 = phi i32 [ 0, %528 ], [ %675, %670 ]
  %541 = phi i8 [ 0, %528 ], [ %674, %670 ]
  %542 = phi i8 [ 0, %528 ], [ %673, %670 ]
  %543 = phi i8 [ 1, %528 ], [ %672, %670 ]
  %544 = phi i32 [ 0, %528 ], [ %671, %670 ]
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %529) #6
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %529, i8 -86, i64 40, i1 false) #6
  %545 = trunc i32 %540 to i8
  store i8 %545, i8* %530, align 2
  %546 = load i32, i32* %168, align 8
  %547 = icmp eq i32 %546, 1
  br i1 %547, label %548, label %554

548:                                              ; preds = %539
  %549 = load i8, i8* %532, align 1
  %550 = zext i8 %549 to i32
  %551 = shl i32 1, %540
  %552 = and i32 %551, %550
  %553 = icmp eq i32 %552, 0
  br i1 %553, label %670, label %554

554:                                              ; preds = %548, %539
  %555 = load i32, i32* %170, align 8
  %556 = icmp eq i32 %555, 0
  br i1 %556, label %563, label %557

557:                                              ; preds = %554
  %558 = load %struct.MB_MODE_INFO*, %struct.MB_MODE_INFO** %171, align 16
  %559 = getelementptr inbounds %struct.MB_MODE_INFO, %struct.MB_MODE_INFO* %558, i64 0, i32 19, i32 0
  %560 = load i8, i8* %559, align 2
  %561 = zext i8 %560 to i32
  %562 = icmp eq i32 %540, %561
  br i1 %562, label %563, label %670

563:                                              ; preds = %557, %554
  br i1 %177, label %566, label %564

564:                                              ; preds = %563
  %565 = load i8, i8* %178, align 1
  br label %566

566:                                              ; preds = %564, %563
  %567 = phi i8 [ %565, %564 ], [ 3, %563 ]
  %568 = call fastcc i64 @intra_model_rd(%struct.AV1Common* %179, %struct.macroblock* %1, i32 0, i8 zeroext %6, i8 zeroext %567, i32 1) #6
  %569 = load i64, i64* %15, align 8
  %570 = icmp eq i64 %569, 9223372036854775807
  br i1 %570, label %575, label %571

571:                                              ; preds = %566
  %572 = ashr i64 %569, 2
  %573 = add nsw i64 %572, %569
  %574 = icmp sgt i64 %568, %573
  br i1 %574, label %670, label %575

575:                                              ; preds = %571, %566
  %576 = icmp slt i64 %568, %569
  br i1 %576, label %577, label %578

577:                                              ; preds = %575
  store i64 %568, i64* %15, align 8
  br label %578

578:                                              ; preds = %577, %575
  %579 = load i64, i64* %14, align 8
  call void @av1_pick_uniform_tx_size_type_yrd(%struct.AV1_COMP* %0, %struct.macroblock* %1, %struct.RD_STATS* nonnull %11, i8 zeroext %6, i64 %579) #6
  %580 = load i32, i32* %533, align 8
  %581 = icmp eq i32 %580, 2147483647
  br i1 %581, label %670, label %582

582:                                              ; preds = %578
  %583 = call fastcc i32 @intra_mode_info_cost_y(%struct.AV1_COMP* %0, %struct.macroblock* %1, %struct.MB_MODE_INFO* %516, i8 zeroext %6, i32 %509) #6
  %584 = add nsw i32 %583, %580
  %585 = sext i32 %584 to i64
  %586 = load i32, i32* %191, align 8
  %587 = sext i32 %586 to i64
  %588 = mul nsw i64 %585, %587
  %589 = add nsw i64 %588, 256
  %590 = ashr i64 %589, 9
  %591 = load i64, i64* %534, align 8
  %592 = shl nsw i64 %591, 7
  %593 = add nsw i64 %590, %592
  %594 = load i8, i8* %192, align 4
  %595 = load %struct.WinnerModeStats*, %struct.WinnerModeStats** %158, align 16
  %596 = icmp eq i8 %594, 0
  %597 = icmp eq i64 %593, 9223372036854775807
  %598 = or i1 %596, %597
  br i1 %598, label %656, label %599

599:                                              ; preds = %582
  %600 = load i8, i8* %520, align 2
  %601 = icmp ne i8 %600, 0
  %602 = load i8, i8* %535, align 16
  %603 = and i8 %602, -3
  %604 = icmp ne i8 %603, 0
  %605 = and i1 %601, %604
  br i1 %605, label %656, label %606

606:                                              ; preds = %599
  %607 = select i1 %604, i32 1, i32 3
  %608 = icmp eq i8 %594, 1
  %609 = select i1 %604, i32 1, i32 2
  %610 = select i1 %608, i32 %609, i32 %607
  %611 = load i32, i32* %161, align 8
  %612 = icmp eq i32 %611, 0
  br i1 %612, label %646, label %613

613:                                              ; preds = %606
  %614 = icmp sgt i32 %611, 0
  br i1 %614, label %615, label %632

615:                                              ; preds = %613
  %616 = zext i32 %611 to i64
  br label %617

617:                                              ; preds = %623, %615
  %618 = phi i64 [ 0, %615 ], [ %624, %623 ]
  %619 = phi i32 [ 0, %615 ], [ %625, %623 ]
  %620 = getelementptr inbounds %struct.WinnerModeStats, %struct.WinnerModeStats* %595, i64 %618, i32 2
  %621 = load i64, i64* %620, align 8
  %622 = icmp sgt i64 %621, %593
  br i1 %622, label %627, label %623

623:                                              ; preds = %617
  %624 = add nuw nsw i64 %618, 1
  %625 = add nuw nsw i32 %619, 1
  %626 = icmp eq i64 %624, %616
  br i1 %626, label %629, label %617

627:                                              ; preds = %617
  %628 = trunc i64 %618 to i32
  br label %629

629:                                              ; preds = %623, %627
  %630 = phi i32 [ %628, %627 ], [ %625, %623 ]
  %631 = icmp eq i32 %610, %630
  br i1 %631, label %656, label %632

632:                                              ; preds = %629, %613
  %633 = phi i32 [ %630, %629 ], [ 0, %613 ]
  %634 = add nsw i32 %610, -1
  %635 = icmp slt i32 %633, %634
  br i1 %635, label %636, label %646

636:                                              ; preds = %632
  %637 = add nuw nsw i32 %633, 1
  %638 = zext i32 %637 to i64
  %639 = getelementptr inbounds %struct.WinnerModeStats, %struct.WinnerModeStats* %595, i64 %638, i32 0, i32 0
  %640 = zext i32 %633 to i64
  %641 = getelementptr inbounds %struct.WinnerModeStats, %struct.WinnerModeStats* %595, i64 %640, i32 0, i32 0
  %642 = xor i32 %633, -1
  %643 = add nsw i32 %610, %642
  %644 = sext i32 %643 to i64
  %645 = mul nsw i64 %644, 16632
  call void @llvm.memmove.p0i8.p0i8.i64(i8* align 8 %639, i8* align 8 %641, i64 %645, i1 false) #6
  br label %646

646:                                              ; preds = %636, %632, %606
  %647 = phi i32 [ %633, %636 ], [ %633, %632 ], [ 0, %606 ]
  %648 = zext i32 %647 to i64
  %649 = getelementptr inbounds %struct.WinnerModeStats, %struct.WinnerModeStats* %595, i64 %648, i32 0, i32 0
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %649, i8* align 8 %536, i64 184, i1 false) #6
  %650 = getelementptr inbounds %struct.WinnerModeStats, %struct.WinnerModeStats* %595, i64 %648, i32 2
  store i64 %593, i64* %650, align 8
  %651 = getelementptr inbounds %struct.WinnerModeStats, %struct.WinnerModeStats* %595, i64 %648, i32 6
  store i8 0, i8* %651, align 8
  %652 = load i32, i32* %161, align 8
  %653 = add nsw i32 %652, 1
  %654 = icmp slt i32 %653, %610
  %655 = select i1 %654, i32 %653, i32 %610
  store i32 %655, i32* %161, align 8
  br label %656

656:                                              ; preds = %646, %629, %599, %582
  %657 = load i64, i64* %14, align 8
  %658 = icmp slt i64 %593, %657
  br i1 %658, label %659, label %670

659:                                              ; preds = %656
  store i64 %593, i64* %14, align 8
  %660 = load i8, i8* %537, align 1
  %661 = load i8, i8* %530, align 2
  %662 = load i8, i8* %518, align 1
  %663 = load i8*, i8** %198, align 8
  %664 = load i32, i32* %196, align 8
  %665 = sext i32 %664 to i64
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 16 %517, i8* align 1 %663, i64 %665, i1 false) #6
  %666 = load i8*, i8** %194, align 8
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %666, i8* align 4 %195, i64 %665, i1 false) #6
  store i32 %584, i32* %2, align 4
  %667 = load i32, i32* %533, align 8
  store i32 %667, i32* %3, align 4
  %668 = load i64, i64* %534, align 8
  store i64 %668, i64* %4, align 8
  %669 = load i32, i32* %538, align 8
  store i32 %669, i32* %5, align 4
  br label %670

670:                                              ; preds = %659, %656, %578, %571, %557, %548
  %671 = phi i32 [ %544, %548 ], [ %544, %557 ], [ %544, %578 ], [ 1, %659 ], [ %544, %656 ], [ %544, %571 ]
  %672 = phi i8 [ %543, %548 ], [ %543, %557 ], [ %543, %578 ], [ %660, %659 ], [ %543, %656 ], [ %543, %571 ]
  %673 = phi i8 [ %542, %548 ], [ %542, %557 ], [ %542, %578 ], [ %661, %659 ], [ %542, %656 ], [ %542, %571 ]
  %674 = phi i8 [ %541, %548 ], [ %541, %557 ], [ %541, %578 ], [ %662, %659 ], [ %541, %656 ], [ %541, %571 ]
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %529) #6
  %675 = add nuw nsw i32 %540, 1
  %676 = icmp eq i32 %675, 5
  br i1 %676, label %677, label %539

677:                                              ; preds = %670
  %678 = icmp eq i32 %671, 0
  br i1 %678, label %679, label %680

679:                                              ; preds = %523, %677
  call void @llvm.lifetime.end.p0i8(i64 1024, i8* nonnull %517)
  br label %684

680:                                              ; preds = %677
  store i8 0, i8* %519, align 2
  store i8 %672, i8* %537, align 1
  store i8 %673, i8* %530, align 2
  store i8 %674, i8* %518, align 1
  %681 = load i8*, i8** %197, align 8
  %682 = load i32, i32* %196, align 8
  %683 = sext i32 %682 to i64
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %681, i8* nonnull align 16 %517, i64 %683, i1 false) #6
  call void @llvm.lifetime.end.p0i8(i64 1024, i8* nonnull %517)
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %156, i8* align 8 %157, i64 184, i1 false)
  br label %684

684:                                              ; preds = %508, %504, %496, %679, %680
  %685 = load i32, i32* %17, align 4
  %686 = icmp eq i32 %685, 0
  br i1 %686, label %1143, label %687

687:                                              ; preds = %684
  %688 = load i8, i8* %192, align 4
  %689 = icmp eq i8 %688, 0
  br i1 %689, label %937, label %690

690:                                              ; preds = %687
  %691 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 2, i32 4, i64 0, i32 8
  %692 = load i8*, i8** %691, align 16
  %693 = getelementptr inbounds [22 x i8], [22 x i8]* @block_size_high, i64 0, i64 %175
  %694 = load i8, i8* %693, align 1
  %695 = zext i8 %694 to i32
  %696 = getelementptr inbounds [22 x i8], [22 x i8]* @block_size_wide, i64 0, i64 %175
  %697 = load i8, i8* %696, align 1
  %698 = zext i8 %697 to i32
  %699 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 2, i32 4, i64 0, i32 1
  %700 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 2, i32 4, i64 0, i32 2
  %701 = load i32, i32* %700, align 8
  %702 = lshr i32 %695, %701
  %703 = load i32, i32* %699, align 4
  %704 = lshr i32 %698, %703
  %705 = load i32, i32* %161, align 8
  %706 = icmp sgt i32 %705, 0
  br i1 %706, label %707, label %718

707:                                              ; preds = %690
  %708 = getelementptr inbounds %struct.MB_MODE_INFO, %struct.MB_MODE_INFO* %23, i64 0, i32 6, i64 0
  %709 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 9, i32 19, i32 5
  %710 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 9, i32 19, i32 6
  %711 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 9, i32 19, i32 4
  %712 = mul nsw i32 %704, %702
  %713 = sext i32 %712 to i64
  %714 = bitcast %struct.RD_STATS* %12 to i8*
  %715 = getelementptr inbounds %struct.RD_STATS, %struct.RD_STATS* %12, i64 0, i32 0
  %716 = getelementptr inbounds %struct.RD_STATS, %struct.RD_STATS* %12, i64 0, i32 1
  %717 = getelementptr inbounds %struct.RD_STATS, %struct.RD_STATS* %12, i64 0, i32 4
  br label %723

718:                                              ; preds = %925, %690
  %719 = phi i32 [ 0, %690 ], [ %926, %925 ]
  %720 = getelementptr inbounds %struct.MB_MODE_INFO, %struct.MB_MODE_INFO* %18, i64 0, i32 22, i32 1, i64 0
  %721 = load i8, i8* %720, align 2
  %722 = icmp eq i8 %721, 0
  br i1 %722, label %1137, label %931

723:                                              ; preds = %707, %925
  %724 = phi i64 [ 0, %707 ], [ %927, %925 ]
  %725 = phi i32 [ 0, %707 ], [ %926, %925 ]
  %726 = load %struct.WinnerModeStats*, %struct.WinnerModeStats** %158, align 16
  %727 = getelementptr inbounds %struct.WinnerModeStats, %struct.WinnerModeStats* %726, i64 %724, i32 0, i32 0
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %157, i8* align 8 %727, i64 184, i1 false)
  %728 = load i8, i8* %164, align 2
  %729 = load i16, i16* %182, align 1
  %730 = trunc i16 %729 to i8
  %731 = icmp sgt i8 %730, -1
  br i1 %731, label %732, label %735

732:                                              ; preds = %723
  %733 = load i8, i8* %708, align 8
  %734 = icmp slt i8 %733, 1
  br i1 %734, label %744, label %735

735:                                              ; preds = %732, %723
  %736 = add i8 %728, -13
  %737 = icmp ugt i8 %736, 11
  br i1 %737, label %753, label %738

738:                                              ; preds = %735
  %739 = load i32, i32* %90, align 4
  %740 = icmp eq i32 %739, 0
  br i1 %740, label %753, label %741

741:                                              ; preds = %738
  %742 = load i8, i8* %709, align 1, !range !8
  %743 = icmp eq i8 %742, 0
  br i1 %743, label %764, label %753

744:                                              ; preds = %732
  %745 = load i32, i32* %80, align 4
  %746 = icmp eq i32 %745, 0
  br i1 %746, label %753, label %747

747:                                              ; preds = %744
  %748 = load i8, i8* %710, align 2, !range !8
  %749 = icmp eq i8 %748, 0
  br i1 %749, label %750, label %753

750:                                              ; preds = %747
  %751 = load i8, i8* %711, align 2, !range !8
  %752 = icmp eq i8 %751, 0
  br i1 %752, label %764, label %753

753:                                              ; preds = %750, %747, %744, %741, %738, %735
  %754 = load i32, i32* %112, align 4
  %755 = icmp eq i32 %754, 0
  br i1 %755, label %761, label %756

756:                                              ; preds = %753
  %757 = and i16 %729, 7
  %758 = zext i16 %757 to i64
  %759 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 11, i64 %758
  %760 = load i8, i8* %759, align 1
  switch i8 %760, label %764 [
    i8 0, label %761
    i8 2, label %761
  ]

761:                                              ; preds = %753, %756, %756
  %762 = load i32, i32* %125, align 4
  %763 = icmp eq i32 %762, 0
  br i1 %763, label %925, label %764

764:                                              ; preds = %756, %750, %741, %761
  %765 = load i8, i8* %79, align 2
  %766 = icmp eq i8 %765, 0
  br i1 %766, label %770, label %767

767:                                              ; preds = %764
  %768 = load %struct.WinnerModeStats*, %struct.WinnerModeStats** %158, align 16
  %769 = getelementptr inbounds %struct.WinnerModeStats, %struct.WinnerModeStats* %768, i64 %724, i32 5, i64 0
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %692, i8* align 1 %769, i64 %713, i1 false)
  br label %770

770:                                              ; preds = %764, %767
  call fastcc void @set_mode_eval_params(%struct.AV1_COMP* %0, %struct.macroblock* %1, i8 zeroext 2)
  %771 = load %struct.MB_MODE_INFO**, %struct.MB_MODE_INFO*** %21, align 8
  %772 = load %struct.MB_MODE_INFO*, %struct.MB_MODE_INFO** %771, align 8
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %714) #6
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %714, i8 -86, i64 40, i1 false) #6
  call void @av1_pick_uniform_tx_size_type_yrd(%struct.AV1_COMP* %0, %struct.macroblock* %1, %struct.RD_STATS* nonnull %12, i8 zeroext %6, i64 9223372036854775807) #6
  %773 = load i32, i32* %715, align 8
  %774 = icmp eq i32 %773, 2147483647
  br i1 %774, label %924, label %775

775:                                              ; preds = %770
  %776 = getelementptr inbounds %struct.MB_MODE_INFO, %struct.MB_MODE_INFO* %772, i64 0, i32 28
  %777 = load i16, i16* %776, align 1
  %778 = and i16 %777, 7
  %779 = zext i16 %778 to i64
  %780 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 2, i32 42, i64 %779
  %781 = load i32, i32* %780, align 4
  %782 = icmp eq i32 %781, 0
  br i1 %782, label %783, label %893

783:                                              ; preds = %775
  %784 = getelementptr inbounds %struct.MB_MODE_INFO, %struct.MB_MODE_INFO* %772, i64 0, i32 0
  %785 = load i8, i8* %784, align 8
  %786 = icmp eq i8 %785, 0
  br i1 %786, label %893, label %787

787:                                              ; preds = %783
  %788 = getelementptr inbounds %struct.MB_MODE_INFO, %struct.MB_MODE_INFO* %772, i64 0, i32 24
  %789 = load i8, i8* %788, align 1
  %790 = load i8, i8* %142, align 4
  %791 = icmp ne i8 %790, 2
  %792 = or i1 %184, %791
  br i1 %792, label %890, label %793

793:                                              ; preds = %787
  %794 = load i8, i8* %185, align 1
  %795 = zext i8 %794 to i64
  %796 = add nsw i64 %795, -1
  %797 = load i8, i8* %186, align 1
  %798 = icmp eq i8 %797, %789
  br i1 %798, label %809, label %799

799:                                              ; preds = %793, %799
  %800 = phi i8 [ %805, %799 ], [ %797, %793 ]
  %801 = phi i32 [ %802, %799 ], [ 0, %793 ]
  %802 = add nuw nsw i32 %801, 1
  %803 = zext i8 %800 to i64
  %804 = getelementptr inbounds [19 x i8], [19 x i8]* @sub_tx_size_map, i64 0, i64 %803
  %805 = load i8, i8* %804, align 1
  %806 = icmp eq i8 %805, %789
  br i1 %806, label %807, label %799

807:                                              ; preds = %799
  %808 = zext i32 %802 to i64
  br label %809

809:                                              ; preds = %807, %793
  %810 = phi i64 [ 0, %793 ], [ %808, %807 ]
  %811 = load %struct.MB_MODE_INFO**, %struct.MB_MODE_INFO*** %21, align 8
  %812 = load %struct.MB_MODE_INFO*, %struct.MB_MODE_INFO** %811, align 8
  %813 = load %struct.MB_MODE_INFO*, %struct.MB_MODE_INFO** %49, align 16
  %814 = load %struct.MB_MODE_INFO*, %struct.MB_MODE_INFO** %51, align 8
  %815 = getelementptr inbounds %struct.MB_MODE_INFO, %struct.MB_MODE_INFO* %812, i64 0, i32 0
  %816 = load i8, i8* %815, align 8
  %817 = zext i8 %816 to i64
  %818 = getelementptr inbounds [22 x i8], [22 x i8]* @max_txsize_rect_lookup, i64 0, i64 %817
  %819 = load i8, i8* %818, align 1
  %820 = zext i8 %819 to i64
  %821 = getelementptr inbounds [19 x i32], [19 x i32]* @tx_size_wide, i64 0, i64 %820
  %822 = load i32, i32* %821, align 4
  %823 = getelementptr inbounds [19 x i32], [19 x i32]* @tx_size_high, i64 0, i64 %820
  %824 = load i32, i32* %823, align 4
  %825 = load i8, i8* %187, align 16, !range !8
  %826 = icmp ne i8 %825, 0
  %827 = load i8, i8* %188, align 1, !range !8
  %828 = icmp ne i8 %827, 0
  %829 = load i8*, i8** %189, align 16
  %830 = load i8, i8* %829, align 1
  %831 = zext i8 %830 to i32
  %832 = icmp sle i32 %822, %831
  %833 = zext i1 %832 to i32
  %834 = load i8*, i8** %190, align 8
  %835 = load i8, i8* %834, align 1
  %836 = zext i8 %835 to i32
  %837 = icmp sle i32 %824, %836
  %838 = zext i1 %837 to i32
  br i1 %826, label %839, label %857

839:                                              ; preds = %809
  %840 = getelementptr inbounds %struct.MB_MODE_INFO, %struct.MB_MODE_INFO* %813, i64 0, i32 28
  %841 = load i16, i16* %840, align 1
  %842 = trunc i16 %841 to i8
  %843 = icmp sgt i8 %842, -1
  br i1 %843, label %844, label %848

844:                                              ; preds = %839
  %845 = getelementptr inbounds %struct.MB_MODE_INFO, %struct.MB_MODE_INFO* %813, i64 0, i32 6, i64 0
  %846 = load i8, i8* %845, align 8
  %847 = icmp slt i8 %846, 1
  br i1 %847, label %857, label %848

848:                                              ; preds = %844, %839
  %849 = getelementptr inbounds %struct.MB_MODE_INFO, %struct.MB_MODE_INFO* %813, i64 0, i32 0
  %850 = load i8, i8* %849, align 8
  %851 = zext i8 %850 to i64
  %852 = getelementptr inbounds [22 x i8], [22 x i8]* @block_size_wide, i64 0, i64 %851
  %853 = load i8, i8* %852, align 1
  %854 = zext i8 %853 to i32
  %855 = icmp sle i32 %822, %854
  %856 = zext i1 %855 to i32
  br label %857

857:                                              ; preds = %848, %844, %809
  %858 = phi i32 [ %856, %848 ], [ %833, %844 ], [ %833, %809 ]
  br i1 %828, label %859, label %881

859:                                              ; preds = %857
  %860 = getelementptr inbounds %struct.MB_MODE_INFO, %struct.MB_MODE_INFO* %814, i64 0, i32 28
  %861 = load i16, i16* %860, align 1
  %862 = trunc i16 %861 to i8
  %863 = icmp sgt i8 %862, -1
  br i1 %863, label %864, label %868

864:                                              ; preds = %859
  %865 = getelementptr inbounds %struct.MB_MODE_INFO, %struct.MB_MODE_INFO* %814, i64 0, i32 6, i64 0
  %866 = load i8, i8* %865, align 8
  %867 = icmp slt i8 %866, 1
  br i1 %867, label %877, label %868

868:                                              ; preds = %864, %859
  %869 = getelementptr inbounds %struct.MB_MODE_INFO, %struct.MB_MODE_INFO* %814, i64 0, i32 0
  %870 = load i8, i8* %869, align 8
  %871 = zext i8 %870 to i64
  %872 = getelementptr inbounds [22 x i8], [22 x i8]* @block_size_high, i64 0, i64 %871
  %873 = load i8, i8* %872, align 1
  %874 = zext i8 %873 to i32
  %875 = icmp sle i32 %824, %874
  %876 = zext i1 %875 to i32
  br label %877

877:                                              ; preds = %868, %864
  %878 = phi i32 [ %876, %868 ], [ %838, %864 ]
  br i1 %826, label %879, label %881

879:                                              ; preds = %877
  %880 = add nuw nsw i32 %878, %858
  br label %885

881:                                              ; preds = %877, %857
  %882 = phi i32 [ %878, %877 ], [ %838, %857 ]
  %883 = select i1 %828, i32 %882, i32 0
  %884 = select i1 %826, i32 %858, i32 %883
  br label %885

885:                                              ; preds = %881, %879
  %886 = phi i32 [ %880, %879 ], [ %884, %881 ]
  %887 = sext i32 %886 to i64
  %888 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 20, i32 39, i64 %796, i64 %887, i64 %810
  %889 = load i32, i32* %888, align 4
  br label %890

890:                                              ; preds = %787, %885
  %891 = phi i32 [ %889, %885 ], [ 0, %787 ]
  %892 = sub nsw i32 %773, %891
  br label %893

893:                                              ; preds = %890, %783, %775
  %894 = phi i32 [ %773, %775 ], [ %892, %890 ], [ %773, %783 ]
  %895 = getelementptr inbounds %struct.MB_MODE_INFO, %struct.MB_MODE_INFO* %772, i64 0, i32 2
  %896 = load i8, i8* %895, align 2
  %897 = zext i8 %896 to i64
  %898 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 20, i32 2, i64 %61, i64 %62, i64 %897
  %899 = load i32, i32* %898, align 4
  %900 = call fastcc i32 @intra_mode_info_cost_y(%struct.AV1_COMP* %0, %struct.macroblock* %1, %struct.MB_MODE_INFO* %772, i8 zeroext %6, i32 %899) #6
  %901 = add nsw i32 %900, %773
  %902 = sext i32 %901 to i64
  %903 = load i32, i32* %191, align 8
  %904 = sext i32 %903 to i64
  %905 = mul nsw i64 %902, %904
  %906 = add nsw i64 %905, 256
  %907 = ashr i64 %906, 9
  %908 = load i64, i64* %716, align 8
  %909 = shl nsw i64 %908, 7
  %910 = add nsw i64 %907, %909
  %911 = load i64, i64* %14, align 8
  %912 = icmp slt i64 %910, %911
  br i1 %912, label %913, label %924

913:                                              ; preds = %893
  %914 = getelementptr inbounds %struct.MB_MODE_INFO, %struct.MB_MODE_INFO* %772, i64 0, i32 0
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %156, i8* align 8 %914, i64 184, i1 false) #6
  store i64 %910, i64* %14, align 8
  store i32 %901, i32* %2, align 4
  store i32 %894, i32* %3, align 4
  store i64 %908, i64* %4, align 8
  %915 = load i32, i32* %717, align 8
  store i32 %915, i32* %5, align 4
  %916 = load i8*, i8** %194, align 8
  %917 = load i32, i32* %196, align 8
  %918 = sext i32 %917 to i64
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %916, i8* align 4 %195, i64 %918, i1 false) #6
  %919 = load i8*, i8** %197, align 8
  %920 = load i8*, i8** %198, align 8
  %921 = load i32, i32* %196, align 8
  %922 = sext i32 %921 to i64
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %919, i8* align 1 %920, i64 %922, i1 false) #6
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %714) #6
  %923 = trunc i64 %724 to i32
  br label %925

924:                                              ; preds = %770, %893
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %714) #6
  br label %925

925:                                              ; preds = %924, %913, %761
  %926 = phi i32 [ %725, %761 ], [ %725, %924 ], [ %923, %913 ]
  %927 = add nuw nsw i64 %724, 1
  %928 = load i32, i32* %161, align 8
  %929 = sext i32 %928 to i64
  %930 = icmp slt i64 %927, %929
  br i1 %930, label %723, label %718

931:                                              ; preds = %718
  %932 = load %struct.WinnerModeStats*, %struct.WinnerModeStats** %158, align 16
  %933 = sext i32 %719 to i64
  %934 = getelementptr inbounds %struct.WinnerModeStats, %struct.WinnerModeStats* %932, i64 %933, i32 5, i64 0
  %935 = mul nsw i32 %704, %702
  %936 = sext i32 %935 to i64
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %692, i8* align 1 %934, i64 %936, i1 false)
  br label %1137

937:                                              ; preds = %687
  %938 = getelementptr inbounds %struct.MB_MODE_INFO, %struct.MB_MODE_INFO* %18, i64 0, i32 2
  %939 = load i8, i8* %938, align 2
  %940 = load i16, i16* %182, align 1
  %941 = trunc i16 %940 to i8
  %942 = icmp sgt i8 %941, -1
  br i1 %942, label %943, label %947

943:                                              ; preds = %937
  %944 = getelementptr inbounds %struct.MB_MODE_INFO, %struct.MB_MODE_INFO* %23, i64 0, i32 6, i64 0
  %945 = load i8, i8* %944, align 8
  %946 = icmp slt i8 %945, 1
  br i1 %946, label %957, label %947

947:                                              ; preds = %943, %937
  %948 = add i8 %939, -13
  %949 = icmp ugt i8 %948, 11
  br i1 %949, label %968, label %950

950:                                              ; preds = %947
  %951 = load i32, i32* %90, align 4
  %952 = icmp eq i32 %951, 0
  br i1 %952, label %968, label %953

953:                                              ; preds = %950
  %954 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 9, i32 19, i32 5
  %955 = load i8, i8* %954, align 1, !range !8
  %956 = icmp eq i8 %955, 0
  br i1 %956, label %979, label %968

957:                                              ; preds = %943
  %958 = load i32, i32* %80, align 4
  %959 = icmp eq i32 %958, 0
  br i1 %959, label %968, label %960

960:                                              ; preds = %957
  %961 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 9, i32 19, i32 6
  %962 = load i8, i8* %961, align 2, !range !8
  %963 = icmp eq i8 %962, 0
  br i1 %963, label %964, label %968

964:                                              ; preds = %960
  %965 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 9, i32 19, i32 4
  %966 = load i8, i8* %965, align 2, !range !8
  %967 = icmp eq i8 %966, 0
  br i1 %967, label %979, label %968

968:                                              ; preds = %964, %960, %957, %953, %950, %947
  %969 = load i32, i32* %112, align 4
  %970 = icmp eq i32 %969, 0
  br i1 %970, label %976, label %971

971:                                              ; preds = %968
  %972 = and i16 %940, 7
  %973 = zext i16 %972 to i64
  %974 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 11, i64 %973
  %975 = load i8, i8* %974, align 1
  switch i8 %975, label %979 [
    i8 0, label %976
    i8 2, label %976
  ]

976:                                              ; preds = %968, %971, %971
  %977 = load i32, i32* %125, align 4
  %978 = icmp eq i32 %977, 0
  br i1 %978, label %1137, label %979

979:                                              ; preds = %971, %964, %953, %976
  call fastcc void @set_mode_eval_params(%struct.AV1_COMP* %0, %struct.macroblock* %1, i8 zeroext 2)
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %157, i8* nonnull align 8 %156, i64 184, i1 false)
  %980 = load %struct.MB_MODE_INFO**, %struct.MB_MODE_INFO*** %21, align 8
  %981 = load %struct.MB_MODE_INFO*, %struct.MB_MODE_INFO** %980, align 8
  %982 = bitcast %struct.RD_STATS* %13 to i8*
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %982) #6
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %982, i8 -86, i64 40, i1 false) #6
  call void @av1_pick_uniform_tx_size_type_yrd(%struct.AV1_COMP* %0, %struct.macroblock* %1, %struct.RD_STATS* nonnull %13, i8 zeroext %6, i64 9223372036854775807) #6
  %983 = getelementptr inbounds %struct.RD_STATS, %struct.RD_STATS* %13, i64 0, i32 0
  %984 = load i32, i32* %983, align 8
  %985 = icmp eq i32 %984, 2147483647
  br i1 %985, label %1136, label %986

986:                                              ; preds = %979
  %987 = getelementptr inbounds %struct.MB_MODE_INFO, %struct.MB_MODE_INFO* %981, i64 0, i32 28
  %988 = load i16, i16* %987, align 1
  %989 = and i16 %988, 7
  %990 = zext i16 %989 to i64
  %991 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 2, i32 42, i64 %990
  %992 = load i32, i32* %991, align 4
  %993 = icmp eq i32 %992, 0
  br i1 %993, label %994, label %1104

994:                                              ; preds = %986
  %995 = getelementptr inbounds %struct.MB_MODE_INFO, %struct.MB_MODE_INFO* %981, i64 0, i32 0
  %996 = load i8, i8* %995, align 8
  %997 = icmp eq i8 %996, 0
  br i1 %997, label %1104, label %998

998:                                              ; preds = %994
  %999 = getelementptr inbounds %struct.MB_MODE_INFO, %struct.MB_MODE_INFO* %981, i64 0, i32 24
  %1000 = load i8, i8* %999, align 1
  %1001 = load i8, i8* %142, align 4
  %1002 = icmp ne i8 %1001, 2
  %1003 = or i1 %184, %1002
  br i1 %1003, label %1101, label %1004

1004:                                             ; preds = %998
  %1005 = load i8, i8* %185, align 1
  %1006 = zext i8 %1005 to i64
  %1007 = add nsw i64 %1006, -1
  %1008 = load i8, i8* %186, align 1
  %1009 = icmp eq i8 %1008, %1000
  br i1 %1009, label %1020, label %1010

1010:                                             ; preds = %1004, %1010
  %1011 = phi i8 [ %1016, %1010 ], [ %1008, %1004 ]
  %1012 = phi i32 [ %1013, %1010 ], [ 0, %1004 ]
  %1013 = add nuw nsw i32 %1012, 1
  %1014 = zext i8 %1011 to i64
  %1015 = getelementptr inbounds [19 x i8], [19 x i8]* @sub_tx_size_map, i64 0, i64 %1014
  %1016 = load i8, i8* %1015, align 1
  %1017 = icmp eq i8 %1016, %1000
  br i1 %1017, label %1018, label %1010

1018:                                             ; preds = %1010
  %1019 = zext i32 %1013 to i64
  br label %1020

1020:                                             ; preds = %1018, %1004
  %1021 = phi i64 [ 0, %1004 ], [ %1019, %1018 ]
  %1022 = load %struct.MB_MODE_INFO**, %struct.MB_MODE_INFO*** %21, align 8
  %1023 = load %struct.MB_MODE_INFO*, %struct.MB_MODE_INFO** %1022, align 8
  %1024 = load %struct.MB_MODE_INFO*, %struct.MB_MODE_INFO** %49, align 16
  %1025 = load %struct.MB_MODE_INFO*, %struct.MB_MODE_INFO** %51, align 8
  %1026 = getelementptr inbounds %struct.MB_MODE_INFO, %struct.MB_MODE_INFO* %1023, i64 0, i32 0
  %1027 = load i8, i8* %1026, align 8
  %1028 = zext i8 %1027 to i64
  %1029 = getelementptr inbounds [22 x i8], [22 x i8]* @max_txsize_rect_lookup, i64 0, i64 %1028
  %1030 = load i8, i8* %1029, align 1
  %1031 = zext i8 %1030 to i64
  %1032 = getelementptr inbounds [19 x i32], [19 x i32]* @tx_size_wide, i64 0, i64 %1031
  %1033 = load i32, i32* %1032, align 4
  %1034 = getelementptr inbounds [19 x i32], [19 x i32]* @tx_size_high, i64 0, i64 %1031
  %1035 = load i32, i32* %1034, align 4
  %1036 = load i8, i8* %187, align 16, !range !8
  %1037 = icmp ne i8 %1036, 0
  %1038 = load i8, i8* %188, align 1, !range !8
  %1039 = icmp ne i8 %1038, 0
  %1040 = load i8*, i8** %189, align 16
  %1041 = load i8, i8* %1040, align 1
  %1042 = zext i8 %1041 to i32
  %1043 = icmp sle i32 %1033, %1042
  %1044 = zext i1 %1043 to i32
  %1045 = load i8*, i8** %190, align 8
  %1046 = load i8, i8* %1045, align 1
  %1047 = zext i8 %1046 to i32
  %1048 = icmp sle i32 %1035, %1047
  %1049 = zext i1 %1048 to i32
  br i1 %1037, label %1050, label %1068

1050:                                             ; preds = %1020
  %1051 = getelementptr inbounds %struct.MB_MODE_INFO, %struct.MB_MODE_INFO* %1024, i64 0, i32 28
  %1052 = load i16, i16* %1051, align 1
  %1053 = trunc i16 %1052 to i8
  %1054 = icmp sgt i8 %1053, -1
  br i1 %1054, label %1055, label %1059

1055:                                             ; preds = %1050
  %1056 = getelementptr inbounds %struct.MB_MODE_INFO, %struct.MB_MODE_INFO* %1024, i64 0, i32 6, i64 0
  %1057 = load i8, i8* %1056, align 8
  %1058 = icmp slt i8 %1057, 1
  br i1 %1058, label %1068, label %1059

1059:                                             ; preds = %1055, %1050
  %1060 = getelementptr inbounds %struct.MB_MODE_INFO, %struct.MB_MODE_INFO* %1024, i64 0, i32 0
  %1061 = load i8, i8* %1060, align 8
  %1062 = zext i8 %1061 to i64
  %1063 = getelementptr inbounds [22 x i8], [22 x i8]* @block_size_wide, i64 0, i64 %1062
  %1064 = load i8, i8* %1063, align 1
  %1065 = zext i8 %1064 to i32
  %1066 = icmp sle i32 %1033, %1065
  %1067 = zext i1 %1066 to i32
  br label %1068

1068:                                             ; preds = %1059, %1055, %1020
  %1069 = phi i32 [ %1067, %1059 ], [ %1044, %1055 ], [ %1044, %1020 ]
  br i1 %1039, label %1070, label %1092

1070:                                             ; preds = %1068
  %1071 = getelementptr inbounds %struct.MB_MODE_INFO, %struct.MB_MODE_INFO* %1025, i64 0, i32 28
  %1072 = load i16, i16* %1071, align 1
  %1073 = trunc i16 %1072 to i8
  %1074 = icmp sgt i8 %1073, -1
  br i1 %1074, label %1075, label %1079

1075:                                             ; preds = %1070
  %1076 = getelementptr inbounds %struct.MB_MODE_INFO, %struct.MB_MODE_INFO* %1025, i64 0, i32 6, i64 0
  %1077 = load i8, i8* %1076, align 8
  %1078 = icmp slt i8 %1077, 1
  br i1 %1078, label %1088, label %1079

1079:                                             ; preds = %1075, %1070
  %1080 = getelementptr inbounds %struct.MB_MODE_INFO, %struct.MB_MODE_INFO* %1025, i64 0, i32 0
  %1081 = load i8, i8* %1080, align 8
  %1082 = zext i8 %1081 to i64
  %1083 = getelementptr inbounds [22 x i8], [22 x i8]* @block_size_high, i64 0, i64 %1082
  %1084 = load i8, i8* %1083, align 1
  %1085 = zext i8 %1084 to i32
  %1086 = icmp sle i32 %1035, %1085
  %1087 = zext i1 %1086 to i32
  br label %1088

1088:                                             ; preds = %1079, %1075
  %1089 = phi i32 [ %1087, %1079 ], [ %1049, %1075 ]
  br i1 %1037, label %1090, label %1092

1090:                                             ; preds = %1088
  %1091 = add nuw nsw i32 %1089, %1069
  br label %1096

1092:                                             ; preds = %1088, %1068
  %1093 = phi i32 [ %1089, %1088 ], [ %1049, %1068 ]
  %1094 = select i1 %1039, i32 %1093, i32 0
  %1095 = select i1 %1037, i32 %1069, i32 %1094
  br label %1096

1096:                                             ; preds = %1092, %1090
  %1097 = phi i32 [ %1091, %1090 ], [ %1095, %1092 ]
  %1098 = sext i32 %1097 to i64
  %1099 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 20, i32 39, i64 %1007, i64 %1098, i64 %1021
  %1100 = load i32, i32* %1099, align 4
  br label %1101

1101:                                             ; preds = %998, %1096
  %1102 = phi i32 [ %1100, %1096 ], [ 0, %998 ]
  %1103 = sub nsw i32 %984, %1102
  br label %1104

1104:                                             ; preds = %1101, %994, %986
  %1105 = phi i32 [ %984, %986 ], [ %1103, %1101 ], [ %984, %994 ]
  %1106 = getelementptr inbounds %struct.MB_MODE_INFO, %struct.MB_MODE_INFO* %981, i64 0, i32 2
  %1107 = load i8, i8* %1106, align 2
  %1108 = zext i8 %1107 to i64
  %1109 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 20, i32 2, i64 %61, i64 %62, i64 %1108
  %1110 = load i32, i32* %1109, align 4
  %1111 = call fastcc i32 @intra_mode_info_cost_y(%struct.AV1_COMP* %0, %struct.macroblock* %1, %struct.MB_MODE_INFO* %981, i8 zeroext %6, i32 %1110) #6
  %1112 = add nsw i32 %1111, %984
  %1113 = sext i32 %1112 to i64
  %1114 = load i32, i32* %191, align 8
  %1115 = sext i32 %1114 to i64
  %1116 = mul nsw i64 %1113, %1115
  %1117 = add nsw i64 %1116, 256
  %1118 = ashr i64 %1117, 9
  %1119 = getelementptr inbounds %struct.RD_STATS, %struct.RD_STATS* %13, i64 0, i32 1
  %1120 = load i64, i64* %1119, align 8
  %1121 = shl nsw i64 %1120, 7
  %1122 = add nsw i64 %1118, %1121
  %1123 = load i64, i64* %14, align 8
  %1124 = icmp slt i64 %1122, %1123
  br i1 %1124, label %1125, label %1136

1125:                                             ; preds = %1104
  %1126 = getelementptr inbounds %struct.MB_MODE_INFO, %struct.MB_MODE_INFO* %981, i64 0, i32 0
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %156, i8* align 8 %1126, i64 184, i1 false) #6
  store i64 %1122, i64* %14, align 8
  store i32 %1112, i32* %2, align 4
  store i32 %1105, i32* %3, align 4
  store i64 %1120, i64* %4, align 8
  %1127 = getelementptr inbounds %struct.RD_STATS, %struct.RD_STATS* %13, i64 0, i32 4
  %1128 = load i32, i32* %1127, align 8
  store i32 %1128, i32* %5, align 4
  %1129 = load i8*, i8** %194, align 8
  %1130 = load i32, i32* %196, align 8
  %1131 = sext i32 %1130 to i64
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %1129, i8* align 4 %195, i64 %1131, i1 false) #6
  %1132 = load i8*, i8** %197, align 8
  %1133 = load i8*, i8** %198, align 8
  %1134 = load i32, i32* %196, align 8
  %1135 = sext i32 %1134 to i64
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %1132, i8* align 1 %1133, i64 %1135, i1 false) #6
  br label %1136

1136:                                             ; preds = %979, %1104, %1125
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %982) #6
  br label %1137

1137:                                             ; preds = %931, %718, %976, %1136
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %157, i8* nonnull align 8 %156, i64 184, i1 false)
  %1138 = load i8*, i8** %198, align 8
  %1139 = load i8*, i8** %197, align 8
  %1140 = load i32, i32* %196, align 8
  %1141 = sext i32 %1140 to i64
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %1138, i8* align 1 %1139, i64 %1141, i1 false)
  %1142 = load i64, i64* %14, align 8
  br label %1143

1143:                                             ; preds = %493, %684, %1137
  %1144 = phi i64 [ %1142, %1137 ], [ 9223372036854775807, %684 ], [ 9223372036854775807, %493 ]
  call void @llvm.lifetime.end.p0i8(i64 184, i8* nonnull %156) #6
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %26) #6
  call void @llvm.lifetime.end.p0i8(i64 13, i8* nonnull %25) #6
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %24) #6
  ret i64 %1144
}

declare zeroext i8 @av1_above_block_mode(%struct.MB_MODE_INFO*) local_unnamed_addr #2

declare zeroext i8 @av1_left_block_mode(%struct.MB_MODE_INFO*) local_unnamed_addr #2

; Function Attrs: inlinehint nofree norecurse nounwind ssp uwtable
define internal fastcc void @set_mode_eval_params(%struct.AV1_COMP* readonly, %struct.macroblock*, i8 zeroext) unnamed_addr #4 {
  %4 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 34
  %5 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 57
  switch i8 %2, label %322 [
    i8 0, label %6
    i8 1, label %41
    i8 2, label %125
  ]

6:                                                ; preds = %3
  %7 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 57, i32 1
  store i32 0, i32* %7, align 4
  %8 = getelementptr inbounds %struct.TxfmSearchParams, %struct.TxfmSearchParams* %5, i64 0, i32 0
  store i32 0, i32* %8, align 4
  %9 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 34, i32 4, i64 0
  %10 = load i32, i32* %9, align 4
  %11 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 57, i32 7
  store i32 %10, i32* %11, align 4
  %12 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 34, i32 5, i64 0
  %13 = load i32, i32* %12, align 4
  %14 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 57, i32 9
  store i32 %13, i32* %14, align 4
  %15 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 34, i32 2, i64 0
  %16 = load i32, i32* %15, align 4
  %17 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 57, i32 6
  store i32 %16, i32* %17, align 4
  %18 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 34, i32 3, i64 0
  %19 = load i32, i32* %18, align 4
  %20 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 57, i32 4
  store i32 %19, i32* %20, align 4
  %21 = getelementptr inbounds %struct.WinnerModeParams, %struct.WinnerModeParams* %4, i64 0, i32 0, i64 0, i64 0
  %22 = load i32, i32* %21, align 4
  %23 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 57, i32 3, i64 0
  store i32 %22, i32* %23, align 4
  %24 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 34, i32 0, i64 0, i64 1
  %25 = load i32, i32* %24, align 4
  %26 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 57, i32 3, i64 1
  store i32 %25, i32* %26, align 4
  %27 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 34, i32 1, i64 0
  %28 = load i8, i8* %27, align 4
  %29 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 57, i32 5
  store i8 %28, i8* %29, align 4
  %30 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 20, i32 7
  %31 = load i8, i8* %30, align 1, !range !8
  %32 = icmp eq i8 %31, 0
  %33 = icmp eq i8 %28, 2
  %34 = select i1 %33, i8 1, i8 2
  %35 = select i1 %32, i8 %34, i8 0
  %36 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 57, i32 8
  store i8 %35, i8* %36, align 4
  %37 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 40, i32 9, i32 5, i32 0
  %38 = load i8, i8* %37, align 4
  %39 = zext i8 %38 to i32
  %40 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 57, i32 2
  store i32 %39, i32* %40, align 4
  br label %322

41:                                               ; preds = %3
  %42 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 40, i32 9, i32 5, i32 1
  %43 = load i32, i32* %42, align 4
  %44 = icmp eq i32 %43, 0
  br i1 %44, label %45, label %49

45:                                               ; preds = %41
  %46 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 9, i32 19, i32 6
  %47 = load i8, i8* %46, align 2, !range !8
  %48 = zext i8 %47 to i32
  br label %49

49:                                               ; preds = %41, %45
  %50 = phi i32 [ 1, %41 ], [ %48, %45 ]
  %51 = getelementptr inbounds %struct.TxfmSearchParams, %struct.TxfmSearchParams* %5, i64 0, i32 0
  store i32 %50, i32* %51, align 4
  %52 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 40, i32 9, i32 5, i32 2
  %53 = load i32, i32* %52, align 4
  %54 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 57, i32 1
  store i32 %53, i32* %54, align 4
  %55 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 34, i32 4, i64 1
  %56 = load i32, i32* %55, align 4
  %57 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 57, i32 7
  store i32 %56, i32* %57, align 4
  %58 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 34, i32 5, i64 1
  %59 = load i32, i32* %58, align 4
  %60 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 57, i32 9
  store i32 %59, i32* %60, align 4
  %61 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 40, i32 11, i32 3
  %62 = load i32, i32* %61, align 4
  %63 = icmp eq i32 %62, 0
  br i1 %63, label %64, label %69

64:                                               ; preds = %49
  %65 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 34, i32 2, i64 0
  %66 = load i32, i32* %65, align 4
  %67 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 57, i32 6
  store i32 %66, i32* %67, align 4
  %68 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 34, i32 3, i64 0
  br label %74

69:                                               ; preds = %49
  %70 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 34, i32 2, i64 1
  %71 = load i32, i32* %70, align 4
  %72 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 57, i32 6
  store i32 %71, i32* %72, align 4
  %73 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 34, i32 3, i64 1
  br label %74

74:                                               ; preds = %64, %69
  %75 = phi i32* [ %68, %64 ], [ %73, %69 ]
  %76 = load i32, i32* %75, align 4
  %77 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 57, i32 4
  store i32 %76, i32* %77, align 4
  %78 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 40, i32 11, i32 0
  %79 = load i32, i32* %78, align 4
  %80 = icmp eq i32 %79, 0
  br i1 %80, label %81, label %86

81:                                               ; preds = %74
  %82 = getelementptr inbounds %struct.WinnerModeParams, %struct.WinnerModeParams* %4, i64 0, i32 0, i64 0, i64 0
  %83 = load i32, i32* %82, align 4
  %84 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 57, i32 3, i64 0
  store i32 %83, i32* %84, align 4
  %85 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 34, i32 0, i64 0, i64 1
  br label %91

86:                                               ; preds = %74
  %87 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 34, i32 0, i64 1, i64 0
  %88 = load i32, i32* %87, align 4
  %89 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 57, i32 3, i64 0
  store i32 %88, i32* %89, align 4
  %90 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 34, i32 0, i64 1, i64 1
  br label %91

91:                                               ; preds = %81, %86
  %92 = phi i32* [ %85, %81 ], [ %90, %86 ]
  %93 = load i32, i32* %92, align 4
  %94 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 57, i32 3, i64 1
  store i32 %93, i32* %94, align 4
  %95 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 40, i32 11, i32 1
  %96 = load i32, i32* %95, align 4
  %97 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 34, i32 1, i64 0
  %98 = load i8, i8* %97, align 4
  %99 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 57, i32 5
  store i8 %98, i8* %99, align 4
  %100 = icmp eq i32 %96, 0
  br i1 %100, label %104, label %101

101:                                              ; preds = %91
  %102 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 34, i32 1, i64 1
  %103 = load i8, i8* %102, align 1
  store i8 %103, i8* %99, align 4
  br label %104

104:                                              ; preds = %91, %101
  %105 = phi i8 [ %98, %91 ], [ %103, %101 ]
  %106 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 20, i32 7
  %107 = load i8, i8* %106, align 1, !range !8
  %108 = icmp eq i8 %107, 0
  %109 = icmp eq i8 %105, 2
  %110 = select i1 %109, i8 1, i8 2
  %111 = select i1 %108, i8 %110, i8 0
  %112 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 57, i32 8
  store i8 %111, i8* %112, align 4
  %113 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 40, i32 9, i32 5, i32 9
  %114 = load i32, i32* %113, align 4
  %115 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 40, i32 9, i32 5, i32 0
  %116 = load i8, i8* %115, align 4
  %117 = zext i8 %116 to i32
  %118 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 57, i32 2
  store i32 %117, i32* %118, align 4
  %119 = icmp eq i32 %114, 0
  br i1 %119, label %322, label %120

120:                                              ; preds = %104
  %121 = add nsw i32 %114, -1
  %122 = sext i32 %121 to i64
  %123 = getelementptr inbounds [2 x [2 x i32]], [2 x [2 x i32]]* @set_tx_type_prune.prune_mode, i64 0, i64 %122, i64 0
  %124 = load i32, i32* %123, align 8
  store i32 %124, i32* %118, align 4
  br label %322

125:                                              ; preds = %3
  %126 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 57, i32 1
  store i32 0, i32* %126, align 4
  %127 = getelementptr inbounds %struct.TxfmSearchParams, %struct.TxfmSearchParams* %5, i64 0, i32 0
  store i32 0, i32* %127, align 4
  %128 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 34, i32 4, i64 2
  %129 = load i32, i32* %128, align 4
  %130 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 57, i32 7
  store i32 %129, i32* %130, align 4
  %131 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 34, i32 5, i64 2
  %132 = load i32, i32* %131, align 4
  %133 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 57, i32 9
  store i32 %132, i32* %133, align 4
  %134 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 40, i32 11, i32 3
  %135 = load i32, i32* %134, align 4
  %136 = icmp eq i32 %135, 0
  br i1 %136, label %137, label %142

137:                                              ; preds = %125
  %138 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 34, i32 2, i64 0
  %139 = load i32, i32* %138, align 4
  %140 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 57, i32 6
  store i32 %139, i32* %140, align 4
  %141 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 34, i32 3, i64 0
  br label %147

142:                                              ; preds = %125
  %143 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 34, i32 2, i64 2
  %144 = load i32, i32* %143, align 4
  %145 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 57, i32 6
  store i32 %144, i32* %145, align 4
  %146 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 34, i32 3, i64 2
  br label %147

147:                                              ; preds = %137, %142
  %148 = phi i32* [ %141, %137 ], [ %146, %142 ]
  %149 = load i32, i32* %148, align 4
  %150 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 57, i32 4
  store i32 %149, i32* %150, align 4
  %151 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 40, i32 11, i32 0
  %152 = load i32, i32* %151, align 4
  %153 = icmp eq i32 %152, 0
  br i1 %153, label %154, label %159

154:                                              ; preds = %147
  %155 = getelementptr inbounds %struct.WinnerModeParams, %struct.WinnerModeParams* %4, i64 0, i32 0, i64 0, i64 0
  %156 = load i32, i32* %155, align 4
  %157 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 57, i32 3, i64 0
  store i32 %156, i32* %157, align 4
  %158 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 34, i32 0, i64 0, i64 1
  br label %164

159:                                              ; preds = %147
  %160 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 34, i32 0, i64 2, i64 0
  %161 = load i32, i32* %160, align 4
  %162 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 57, i32 3, i64 0
  store i32 %161, i32* %162, align 4
  %163 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 34, i32 0, i64 2, i64 1
  br label %164

164:                                              ; preds = %154, %159
  %165 = phi i32* [ %158, %154 ], [ %163, %159 ]
  %166 = load i32, i32* %165, align 4
  %167 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 57, i32 3, i64 1
  store i32 %166, i32* %167, align 4
  %168 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 40, i32 11, i32 1
  %169 = load i32, i32* %168, align 4
  %170 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 34, i32 1, i64 0
  %171 = load i8, i8* %170, align 4
  %172 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 57, i32 5
  store i8 %171, i8* %172, align 4
  %173 = icmp eq i32 %169, 0
  br i1 %173, label %177, label %174

174:                                              ; preds = %164
  %175 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 34, i32 1, i64 2
  %176 = load i8, i8* %175, align 2
  store i8 %176, i8* %172, align 4
  br label %177

177:                                              ; preds = %164, %174
  %178 = phi i8 [ %171, %164 ], [ %176, %174 ]
  %179 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 20, i32 7
  %180 = load i8, i8* %179, align 1, !range !8
  %181 = icmp eq i8 %180, 0
  %182 = icmp eq i8 %178, 2
  %183 = select i1 %182, i8 1, i8 2
  %184 = select i1 %181, i8 %183, i8 0
  %185 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 57, i32 8
  store i8 %184, i8* %185, align 4
  %186 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 40, i32 9, i32 5, i32 9
  %187 = load i32, i32* %186, align 4
  %188 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 40, i32 9, i32 5, i32 0
  %189 = load i8, i8* %188, align 4
  %190 = zext i8 %189 to i32
  %191 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 57, i32 2
  store i32 %190, i32* %191, align 4
  %192 = icmp eq i32 %187, 0
  br i1 %192, label %198, label %193

193:                                              ; preds = %177
  %194 = add nsw i32 %187, -1
  %195 = sext i32 %194 to i64
  %196 = getelementptr inbounds [2 x [2 x i32]], [2 x [2 x i32]]* @set_tx_type_prune.prune_mode, i64 0, i64 %195, i64 1
  %197 = load i32, i32* %196, align 4
  store i32 %197, i32* %191, align 4
  br label %198

198:                                              ; preds = %177, %193
  %199 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 58, i32 3
  %200 = load %struct.TxbRdRecords*, %struct.TxbRdRecords** %199, align 8
  %201 = icmp eq %struct.TxbRdRecords* %200, null
  br i1 %201, label %322, label %202

202:                                              ; preds = %198
  %203 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 40, i32 9, i32 10
  %204 = load i32, i32* %203, align 4
  %205 = icmp eq i32 %204, 0
  br i1 %205, label %313, label %206

206:                                              ; preds = %202
  %207 = getelementptr inbounds %struct.TxbRdRecords, %struct.TxbRdRecords* %200, i64 0, i32 1, i64 0, i32 2
  store i32 0, i32* %207, align 8
  %208 = load %struct.TxbRdRecords*, %struct.TxbRdRecords** %199, align 8
  %209 = getelementptr inbounds %struct.TxbRdRecords, %struct.TxbRdRecords* %208, i64 0, i32 1, i64 0, i32 3
  store i32 0, i32* %209, align 4
  br label %210

210:                                              ; preds = %323, %206
  %211 = phi i64 [ 1, %206 ], [ %328, %323 ]
  %212 = load %struct.TxbRdRecords*, %struct.TxbRdRecords** %199, align 8
  %213 = getelementptr inbounds %struct.TxbRdRecords, %struct.TxbRdRecords* %212, i64 0, i32 1, i64 %211, i32 2
  store i32 0, i32* %213, align 8
  %214 = load %struct.TxbRdRecords*, %struct.TxbRdRecords** %199, align 8
  %215 = getelementptr inbounds %struct.TxbRdRecords, %struct.TxbRdRecords* %214, i64 0, i32 1, i64 %211, i32 3
  store i32 0, i32* %215, align 4
  %216 = add nuw nsw i64 %211, 1
  %217 = icmp eq i64 %216, 256
  br i1 %217, label %218, label %323

218:                                              ; preds = %210, %218
  %219 = phi i64 [ %229, %218 ], [ 0, %210 ]
  %220 = load %struct.TxbRdRecords*, %struct.TxbRdRecords** %199, align 8
  %221 = getelementptr inbounds %struct.TxbRdRecords, %struct.TxbRdRecords* %220, i64 0, i32 2, i64 %219, i32 2
  store i32 0, i32* %221, align 8
  %222 = load %struct.TxbRdRecords*, %struct.TxbRdRecords** %199, align 8
  %223 = getelementptr inbounds %struct.TxbRdRecords, %struct.TxbRdRecords* %222, i64 0, i32 2, i64 %219, i32 3
  store i32 0, i32* %223, align 4
  %224 = or i64 %219, 1
  %225 = load %struct.TxbRdRecords*, %struct.TxbRdRecords** %199, align 8
  %226 = getelementptr inbounds %struct.TxbRdRecords, %struct.TxbRdRecords* %225, i64 0, i32 2, i64 %224, i32 2
  store i32 0, i32* %226, align 8
  %227 = load %struct.TxbRdRecords*, %struct.TxbRdRecords** %199, align 8
  %228 = getelementptr inbounds %struct.TxbRdRecords, %struct.TxbRdRecords* %227, i64 0, i32 2, i64 %224, i32 3
  store i32 0, i32* %228, align 4
  %229 = add nuw nsw i64 %219, 2
  %230 = icmp eq i64 %229, 64
  br i1 %230, label %231, label %218

231:                                              ; preds = %218
  %232 = load %struct.TxbRdRecords*, %struct.TxbRdRecords** %199, align 8
  %233 = getelementptr inbounds %struct.TxbRdRecords, %struct.TxbRdRecords* %232, i64 0, i32 3, i64 0, i32 2
  store i32 0, i32* %233, align 8
  %234 = load %struct.TxbRdRecords*, %struct.TxbRdRecords** %199, align 8
  %235 = getelementptr inbounds %struct.TxbRdRecords, %struct.TxbRdRecords* %234, i64 0, i32 3, i64 0, i32 3
  store i32 0, i32* %235, align 4
  %236 = load %struct.TxbRdRecords*, %struct.TxbRdRecords** %199, align 8
  %237 = getelementptr inbounds %struct.TxbRdRecords, %struct.TxbRdRecords* %236, i64 0, i32 3, i64 1, i32 2
  store i32 0, i32* %237, align 8
  %238 = load %struct.TxbRdRecords*, %struct.TxbRdRecords** %199, align 8
  %239 = getelementptr inbounds %struct.TxbRdRecords, %struct.TxbRdRecords* %238, i64 0, i32 3, i64 1, i32 3
  store i32 0, i32* %239, align 4
  %240 = load %struct.TxbRdRecords*, %struct.TxbRdRecords** %199, align 8
  %241 = getelementptr inbounds %struct.TxbRdRecords, %struct.TxbRdRecords* %240, i64 0, i32 3, i64 2, i32 2
  store i32 0, i32* %241, align 8
  %242 = load %struct.TxbRdRecords*, %struct.TxbRdRecords** %199, align 8
  %243 = getelementptr inbounds %struct.TxbRdRecords, %struct.TxbRdRecords* %242, i64 0, i32 3, i64 2, i32 3
  store i32 0, i32* %243, align 4
  %244 = load %struct.TxbRdRecords*, %struct.TxbRdRecords** %199, align 8
  %245 = getelementptr inbounds %struct.TxbRdRecords, %struct.TxbRdRecords* %244, i64 0, i32 3, i64 3, i32 2
  store i32 0, i32* %245, align 8
  %246 = load %struct.TxbRdRecords*, %struct.TxbRdRecords** %199, align 8
  %247 = getelementptr inbounds %struct.TxbRdRecords, %struct.TxbRdRecords* %246, i64 0, i32 3, i64 3, i32 3
  store i32 0, i32* %247, align 4
  %248 = load %struct.TxbRdRecords*, %struct.TxbRdRecords** %199, align 8
  %249 = getelementptr inbounds %struct.TxbRdRecords, %struct.TxbRdRecords* %248, i64 0, i32 3, i64 4, i32 2
  store i32 0, i32* %249, align 8
  %250 = load %struct.TxbRdRecords*, %struct.TxbRdRecords** %199, align 8
  %251 = getelementptr inbounds %struct.TxbRdRecords, %struct.TxbRdRecords* %250, i64 0, i32 3, i64 4, i32 3
  store i32 0, i32* %251, align 4
  %252 = load %struct.TxbRdRecords*, %struct.TxbRdRecords** %199, align 8
  %253 = getelementptr inbounds %struct.TxbRdRecords, %struct.TxbRdRecords* %252, i64 0, i32 3, i64 5, i32 2
  store i32 0, i32* %253, align 8
  %254 = load %struct.TxbRdRecords*, %struct.TxbRdRecords** %199, align 8
  %255 = getelementptr inbounds %struct.TxbRdRecords, %struct.TxbRdRecords* %254, i64 0, i32 3, i64 5, i32 3
  store i32 0, i32* %255, align 4
  %256 = load %struct.TxbRdRecords*, %struct.TxbRdRecords** %199, align 8
  %257 = getelementptr inbounds %struct.TxbRdRecords, %struct.TxbRdRecords* %256, i64 0, i32 3, i64 6, i32 2
  store i32 0, i32* %257, align 8
  %258 = load %struct.TxbRdRecords*, %struct.TxbRdRecords** %199, align 8
  %259 = getelementptr inbounds %struct.TxbRdRecords, %struct.TxbRdRecords* %258, i64 0, i32 3, i64 6, i32 3
  store i32 0, i32* %259, align 4
  %260 = load %struct.TxbRdRecords*, %struct.TxbRdRecords** %199, align 8
  %261 = getelementptr inbounds %struct.TxbRdRecords, %struct.TxbRdRecords* %260, i64 0, i32 3, i64 7, i32 2
  store i32 0, i32* %261, align 8
  %262 = load %struct.TxbRdRecords*, %struct.TxbRdRecords** %199, align 8
  %263 = getelementptr inbounds %struct.TxbRdRecords, %struct.TxbRdRecords* %262, i64 0, i32 3, i64 7, i32 3
  store i32 0, i32* %263, align 4
  %264 = load %struct.TxbRdRecords*, %struct.TxbRdRecords** %199, align 8
  %265 = getelementptr inbounds %struct.TxbRdRecords, %struct.TxbRdRecords* %264, i64 0, i32 3, i64 8, i32 2
  store i32 0, i32* %265, align 8
  %266 = load %struct.TxbRdRecords*, %struct.TxbRdRecords** %199, align 8
  %267 = getelementptr inbounds %struct.TxbRdRecords, %struct.TxbRdRecords* %266, i64 0, i32 3, i64 8, i32 3
  store i32 0, i32* %267, align 4
  %268 = load %struct.TxbRdRecords*, %struct.TxbRdRecords** %199, align 8
  %269 = getelementptr inbounds %struct.TxbRdRecords, %struct.TxbRdRecords* %268, i64 0, i32 3, i64 9, i32 2
  store i32 0, i32* %269, align 8
  %270 = load %struct.TxbRdRecords*, %struct.TxbRdRecords** %199, align 8
  %271 = getelementptr inbounds %struct.TxbRdRecords, %struct.TxbRdRecords* %270, i64 0, i32 3, i64 9, i32 3
  store i32 0, i32* %271, align 4
  %272 = load %struct.TxbRdRecords*, %struct.TxbRdRecords** %199, align 8
  %273 = getelementptr inbounds %struct.TxbRdRecords, %struct.TxbRdRecords* %272, i64 0, i32 3, i64 10, i32 2
  store i32 0, i32* %273, align 8
  %274 = load %struct.TxbRdRecords*, %struct.TxbRdRecords** %199, align 8
  %275 = getelementptr inbounds %struct.TxbRdRecords, %struct.TxbRdRecords* %274, i64 0, i32 3, i64 10, i32 3
  store i32 0, i32* %275, align 4
  %276 = load %struct.TxbRdRecords*, %struct.TxbRdRecords** %199, align 8
  %277 = getelementptr inbounds %struct.TxbRdRecords, %struct.TxbRdRecords* %276, i64 0, i32 3, i64 11, i32 2
  store i32 0, i32* %277, align 8
  %278 = load %struct.TxbRdRecords*, %struct.TxbRdRecords** %199, align 8
  %279 = getelementptr inbounds %struct.TxbRdRecords, %struct.TxbRdRecords* %278, i64 0, i32 3, i64 11, i32 3
  store i32 0, i32* %279, align 4
  %280 = load %struct.TxbRdRecords*, %struct.TxbRdRecords** %199, align 8
  %281 = getelementptr inbounds %struct.TxbRdRecords, %struct.TxbRdRecords* %280, i64 0, i32 3, i64 12, i32 2
  store i32 0, i32* %281, align 8
  %282 = load %struct.TxbRdRecords*, %struct.TxbRdRecords** %199, align 8
  %283 = getelementptr inbounds %struct.TxbRdRecords, %struct.TxbRdRecords* %282, i64 0, i32 3, i64 12, i32 3
  store i32 0, i32* %283, align 4
  %284 = load %struct.TxbRdRecords*, %struct.TxbRdRecords** %199, align 8
  %285 = getelementptr inbounds %struct.TxbRdRecords, %struct.TxbRdRecords* %284, i64 0, i32 3, i64 13, i32 2
  store i32 0, i32* %285, align 8
  %286 = load %struct.TxbRdRecords*, %struct.TxbRdRecords** %199, align 8
  %287 = getelementptr inbounds %struct.TxbRdRecords, %struct.TxbRdRecords* %286, i64 0, i32 3, i64 13, i32 3
  store i32 0, i32* %287, align 4
  %288 = load %struct.TxbRdRecords*, %struct.TxbRdRecords** %199, align 8
  %289 = getelementptr inbounds %struct.TxbRdRecords, %struct.TxbRdRecords* %288, i64 0, i32 3, i64 14, i32 2
  store i32 0, i32* %289, align 8
  %290 = load %struct.TxbRdRecords*, %struct.TxbRdRecords** %199, align 8
  %291 = getelementptr inbounds %struct.TxbRdRecords, %struct.TxbRdRecords* %290, i64 0, i32 3, i64 14, i32 3
  store i32 0, i32* %291, align 4
  %292 = load %struct.TxbRdRecords*, %struct.TxbRdRecords** %199, align 8
  %293 = getelementptr inbounds %struct.TxbRdRecords, %struct.TxbRdRecords* %292, i64 0, i32 3, i64 15, i32 2
  store i32 0, i32* %293, align 8
  %294 = load %struct.TxbRdRecords*, %struct.TxbRdRecords** %199, align 8
  %295 = getelementptr inbounds %struct.TxbRdRecords, %struct.TxbRdRecords* %294, i64 0, i32 3, i64 15, i32 3
  store i32 0, i32* %295, align 4
  %296 = load %struct.TxbRdRecords*, %struct.TxbRdRecords** %199, align 8
  %297 = getelementptr inbounds %struct.TxbRdRecords, %struct.TxbRdRecords* %296, i64 0, i32 4, i64 0, i32 2
  store i32 0, i32* %297, align 8
  %298 = load %struct.TxbRdRecords*, %struct.TxbRdRecords** %199, align 8
  %299 = getelementptr inbounds %struct.TxbRdRecords, %struct.TxbRdRecords* %298, i64 0, i32 4, i64 0, i32 3
  store i32 0, i32* %299, align 4
  %300 = load %struct.TxbRdRecords*, %struct.TxbRdRecords** %199, align 8
  %301 = getelementptr inbounds %struct.TxbRdRecords, %struct.TxbRdRecords* %300, i64 0, i32 4, i64 1, i32 2
  store i32 0, i32* %301, align 8
  %302 = load %struct.TxbRdRecords*, %struct.TxbRdRecords** %199, align 8
  %303 = getelementptr inbounds %struct.TxbRdRecords, %struct.TxbRdRecords* %302, i64 0, i32 4, i64 1, i32 3
  store i32 0, i32* %303, align 4
  %304 = load %struct.TxbRdRecords*, %struct.TxbRdRecords** %199, align 8
  %305 = getelementptr inbounds %struct.TxbRdRecords, %struct.TxbRdRecords* %304, i64 0, i32 4, i64 2, i32 2
  store i32 0, i32* %305, align 8
  %306 = load %struct.TxbRdRecords*, %struct.TxbRdRecords** %199, align 8
  %307 = getelementptr inbounds %struct.TxbRdRecords, %struct.TxbRdRecords* %306, i64 0, i32 4, i64 2, i32 3
  store i32 0, i32* %307, align 4
  %308 = load %struct.TxbRdRecords*, %struct.TxbRdRecords** %199, align 8
  %309 = getelementptr inbounds %struct.TxbRdRecords, %struct.TxbRdRecords* %308, i64 0, i32 4, i64 3, i32 2
  store i32 0, i32* %309, align 8
  %310 = load %struct.TxbRdRecords*, %struct.TxbRdRecords** %199, align 8
  %311 = getelementptr inbounds %struct.TxbRdRecords, %struct.TxbRdRecords* %310, i64 0, i32 4, i64 3, i32 3
  store i32 0, i32* %311, align 4
  %312 = load %struct.TxbRdRecords*, %struct.TxbRdRecords** %199, align 8
  br label %313

313:                                              ; preds = %231, %202
  %314 = phi %struct.TxbRdRecords* [ %312, %231 ], [ %200, %202 ]
  %315 = getelementptr inbounds %struct.TxbRdRecords, %struct.TxbRdRecords* %314, i64 0, i32 5, i32 2
  store i32 0, i32* %315, align 8
  %316 = load %struct.TxbRdRecords*, %struct.TxbRdRecords** %199, align 8
  %317 = getelementptr inbounds %struct.TxbRdRecords, %struct.TxbRdRecords* %316, i64 0, i32 5, i32 3
  store i32 0, i32* %317, align 4
  %318 = load %struct.TxbRdRecords*, %struct.TxbRdRecords** %199, align 8
  %319 = getelementptr inbounds %struct.TxbRdRecords, %struct.TxbRdRecords* %318, i64 0, i32 0, i32 1
  store i32 0, i32* %319, align 8
  %320 = load %struct.TxbRdRecords*, %struct.TxbRdRecords** %199, align 8
  %321 = getelementptr inbounds %struct.TxbRdRecords, %struct.TxbRdRecords* %320, i64 0, i32 0, i32 2
  store i32 0, i32* %321, align 4
  br label %322

322:                                              ; preds = %313, %198, %120, %104, %3, %6
  ret void

323:                                              ; preds = %210
  %324 = load %struct.TxbRdRecords*, %struct.TxbRdRecords** %199, align 8
  %325 = getelementptr inbounds %struct.TxbRdRecords, %struct.TxbRdRecords* %324, i64 0, i32 1, i64 %216, i32 2
  store i32 0, i32* %325, align 8
  %326 = load %struct.TxbRdRecords*, %struct.TxbRdRecords** %199, align 8
  %327 = getelementptr inbounds %struct.TxbRdRecords, %struct.TxbRdRecords* %326, i64 0, i32 1, i64 %216, i32 3
  store i32 0, i32* %327, align 4
  %328 = add nuw nsw i64 %211, 2
  br label %210
}

; Function Attrs: nounwind ssp uwtable
define internal fastcc void @cfl_pick_plane_parameter(%struct.AV1_COMP*, %struct.macroblock*, i32, i8 zeroext, i32, %struct.RD_STATS*) unnamed_addr #0 {
  %7 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 2, i32 51, i32 3
  store i32 1, i32* %7, align 8
  %8 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 2, i32 6
  %9 = load %struct.MB_MODE_INFO**, %struct.MB_MODE_INFO*** %8, align 8
  %10 = load %struct.MB_MODE_INFO*, %struct.MB_MODE_INFO** %9, align 8
  %11 = sext i32 %2 to i64
  %12 = getelementptr inbounds %struct.MB_MODE_INFO, %struct.MB_MODE_INFO* %10, i64 0, i32 0
  %13 = load i8, i8* %12, align 8
  %14 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 2, i32 4, i64 %11, i32 1
  %15 = load i32, i32* %14, align 4
  %16 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 2, i32 4, i64 %11, i32 2
  %17 = load i32, i32* %16, align 8
  %18 = zext i8 %13 to i64
  %19 = sext i32 %15 to i64
  %20 = sext i32 %17 to i64
  %21 = getelementptr inbounds [22 x [2 x [2 x i8]]], [22 x [2 x [2 x i8]]]* @ss_size_lookup, i64 0, i64 %18, i64 %19, i64 %20
  %22 = load i8, i8* %21, align 1
  %23 = icmp slt i32 %4, 33
  br i1 %23, label %24, label %58

24:                                               ; preds = %6
  %25 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8
  %26 = trunc i32 %2 to i8
  %27 = getelementptr inbounds %struct.MB_MODE_INFO, %struct.MB_MODE_INFO* %10, i64 0, i32 20
  %28 = load i8, i8* %27, align 4
  %29 = getelementptr inbounds %struct.MB_MODE_INFO, %struct.MB_MODE_INFO* %10, i64 0, i32 21
  %30 = load i8, i8* %29, align 1
  %31 = icmp eq i8 %26, 1
  %32 = select i1 %31, i8 0, i8 2
  store i8 %32, i8* %27, align 4
  store i8 0, i8* %29, align 1
  %33 = tail call fastcc i64 @intra_model_rd(%struct.AV1Common* %25, %struct.macroblock* %1, i32 %2, i8 zeroext %22, i8 zeroext %3, i32 0) #6
  store i8 %28, i8* %27, align 4
  store i8 %30, i8* %29, align 1
  %34 = select i1 %31, i8 6, i8 4
  br label %39

35:                                               ; preds = %39
  %36 = add nuw nsw i32 %43, 1
  %37 = add nuw nsw i32 %43, 17
  %38 = icmp ugt i32 %37, 32
  br i1 %38, label %55, label %39

39:                                               ; preds = %24, %35
  %40 = phi i32 [ 17, %24 ], [ %37, %35 ]
  %41 = phi i32 [ 16, %24 ], [ %40, %35 ]
  %42 = phi i64 [ %33, %24 ], [ %53, %35 ]
  %43 = phi i32 [ 1, %24 ], [ %36, %35 ]
  %44 = load %struct.MB_MODE_INFO**, %struct.MB_MODE_INFO*** %8, align 8
  %45 = load %struct.MB_MODE_INFO*, %struct.MB_MODE_INFO** %44, align 8
  %46 = trunc i32 %43 to i8
  %47 = mul i8 %46, 17
  %48 = add i8 %47, -17
  %49 = getelementptr inbounds %struct.MB_MODE_INFO, %struct.MB_MODE_INFO* %45, i64 0, i32 20
  %50 = load i8, i8* %49, align 4
  %51 = getelementptr inbounds %struct.MB_MODE_INFO, %struct.MB_MODE_INFO* %45, i64 0, i32 21
  %52 = load i8, i8* %51, align 1
  store i8 %34, i8* %49, align 4
  store i8 %48, i8* %51, align 1
  %53 = tail call fastcc i64 @intra_model_rd(%struct.AV1Common* %25, %struct.macroblock* %1, i32 %2, i8 zeroext %22, i8 zeroext %3, i32 0) #6
  store i8 %50, i8* %49, align 4
  store i8 %52, i8* %51, align 1
  %54 = icmp slt i64 %53, %42
  br i1 %54, label %35, label %55

55:                                               ; preds = %35, %39
  %56 = phi i32 [ %41, %39 ], [ %40, %35 ]
  %57 = phi i64 [ %42, %39 ], [ %53, %35 ]
  br label %106

58:                                               ; preds = %103, %106, %123, %6
  %59 = phi i32 [ 16, %6 ], [ -16, %123 ], [ %108, %106 ], [ %107, %103 ]
  br label %65

60:                                               ; preds = %65
  %61 = sext i32 %59 to i64
  %62 = getelementptr inbounds %struct.RD_STATS, %struct.RD_STATS* %5, i64 %61
  %63 = tail call fastcc i64 @cfl_compute_rd(%struct.AV1_COMP* %0, %struct.macroblock* %1, i32 %2, i8 zeroext %3, i8 zeroext %22, i32 %59, i32 0, %struct.RD_STATS* %62)
  %64 = icmp sgt i32 %4, 1
  br i1 %64, label %75, label %100

65:                                               ; preds = %65, %58
  %66 = phi i64 [ 0, %58 ], [ %73, %65 ]
  %67 = getelementptr inbounds %struct.RD_STATS, %struct.RD_STATS* %5, i64 %66, i32 0
  store i32 2147483647, i32* %67, align 8
  %68 = getelementptr inbounds %struct.RD_STATS, %struct.RD_STATS* %5, i64 %66, i32 1
  %69 = bitcast i64* %68 to <2 x i64>*
  store <2 x i64> <i64 9223372036854775807, i64 9223372036854775807>, <2 x i64>* %69, align 8
  %70 = getelementptr inbounds %struct.RD_STATS, %struct.RD_STATS* %5, i64 %66, i32 3
  store i64 9223372036854775807, i64* %70, align 8
  %71 = getelementptr inbounds %struct.RD_STATS, %struct.RD_STATS* %5, i64 %66, i32 4
  store i32 0, i32* %71, align 8
  %72 = getelementptr inbounds %struct.RD_STATS, %struct.RD_STATS* %5, i64 %66, i32 5
  store i32 0, i32* %72, align 4
  %73 = add nuw nsw i64 %66, 1
  %74 = icmp eq i64 %73, 33
  br i1 %74, label %60, label %65

75:                                               ; preds = %60
  %76 = zext i32 %4 to i64
  br label %77

77:                                               ; preds = %82, %75
  %78 = phi i64 [ 1, %75 ], [ %85, %82 ]
  %79 = add nsw i64 %78, %61
  %80 = trunc i64 %79 to i32
  %81 = icmp ugt i32 %80, 32
  br i1 %81, label %87, label %82

82:                                               ; preds = %77
  %83 = getelementptr inbounds %struct.RD_STATS, %struct.RD_STATS* %5, i64 %79
  %84 = tail call fastcc i64 @cfl_compute_rd(%struct.AV1_COMP* %0, %struct.macroblock* %1, i32 %2, i8 zeroext %3, i8 zeroext %22, i32 %80, i32 0, %struct.RD_STATS* %83)
  %85 = add nuw nsw i64 %78, 1
  %86 = icmp eq i64 %85, %76
  br i1 %86, label %87, label %77

87:                                               ; preds = %77, %82
  br i1 %64, label %88, label %100

88:                                               ; preds = %87
  %89 = zext i32 %4 to i64
  br label %90

90:                                               ; preds = %95, %88
  %91 = phi i64 [ 1, %88 ], [ %98, %95 ]
  %92 = sub i64 %61, %91
  %93 = trunc i64 %92 to i32
  %94 = icmp ugt i32 %93, 32
  br i1 %94, label %100, label %95

95:                                               ; preds = %90
  %96 = getelementptr inbounds %struct.RD_STATS, %struct.RD_STATS* %5, i64 %92
  %97 = tail call fastcc i64 @cfl_compute_rd(%struct.AV1_COMP* %0, %struct.macroblock* %1, i32 %2, i8 zeroext %3, i8 zeroext %22, i32 %93, i32 0, %struct.RD_STATS* %96)
  %98 = add nuw nsw i64 %91, 1
  %99 = icmp eq i64 %98, %89
  br i1 %99, label %100, label %90

100:                                              ; preds = %90, %95, %60, %87
  store i32 0, i32* %7, align 8
  %101 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 2, i32 51, i32 2, i64 0
  store i32 0, i32* %101, align 8
  %102 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 2, i32 51, i32 2, i64 1
  store i32 0, i32* %102, align 4
  ret void

103:                                              ; preds = %123
  %104 = sub nsw i32 15, %110
  %105 = icmp ugt i32 %104, 32
  br i1 %105, label %58, label %106

106:                                              ; preds = %55, %103
  %107 = phi i32 [ %104, %103 ], [ 15, %55 ]
  %108 = phi i32 [ %107, %103 ], [ %56, %55 ]
  %109 = phi i64 [ %120, %103 ], [ %57, %55 ]
  %110 = phi i32 [ %122, %103 ], [ 1, %55 ]
  %111 = load %struct.MB_MODE_INFO**, %struct.MB_MODE_INFO*** %8, align 8
  %112 = load %struct.MB_MODE_INFO*, %struct.MB_MODE_INFO** %111, align 8
  %113 = trunc i32 %110 to i8
  %114 = mul i8 %113, 17
  %115 = add i8 %114, -17
  %116 = getelementptr inbounds %struct.MB_MODE_INFO, %struct.MB_MODE_INFO* %112, i64 0, i32 20
  %117 = load i8, i8* %116, align 4
  %118 = getelementptr inbounds %struct.MB_MODE_INFO, %struct.MB_MODE_INFO* %112, i64 0, i32 21
  %119 = load i8, i8* %118, align 1
  store i8 3, i8* %116, align 4
  store i8 %115, i8* %118, align 1
  %120 = tail call fastcc i64 @intra_model_rd(%struct.AV1Common* %25, %struct.macroblock* %1, i32 %2, i8 zeroext %22, i8 zeroext %3, i32 0) #6
  store i8 %117, i8* %116, align 4
  store i8 %119, i8* %118, align 1
  %121 = icmp slt i64 %120, %109
  %122 = add nuw nsw i32 %110, 1
  br i1 %121, label %123, label %58

123:                                              ; preds = %106
  %124 = icmp eq i32 %122, 33
  br i1 %124, label %58, label %103
}

; Function Attrs: nounwind ssp uwtable
define internal fastcc i64 @cfl_compute_rd(%struct.AV1_COMP*, %struct.macroblock*, i32, i8 zeroext, i8 zeroext, i32, i32, %struct.RD_STATS*) unnamed_addr #0 {
  %9 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8
  %10 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 2, i32 6
  %11 = load %struct.MB_MODE_INFO**, %struct.MB_MODE_INFO*** %10, align 8
  %12 = load %struct.MB_MODE_INFO*, %struct.MB_MODE_INFO** %11, align 8
  %13 = trunc i32 %2 to i8
  %14 = add nsw i32 %5, -16
  %15 = icmp eq i32 %14, 0
  br i1 %15, label %25, label %16

16:                                               ; preds = %8
  %17 = icmp sgt i32 %14, 0
  %18 = select i1 %17, i8 2, i8 1
  %19 = icmp slt i32 %14, 0
  %20 = sub i32 16, %5
  %21 = select i1 %19, i32 %20, i32 %14
  %22 = trunc i32 %21 to i8
  %23 = mul i8 %22, 17
  %24 = add i8 %23, -17
  br label %25

25:                                               ; preds = %8, %16
  %26 = phi i8 [ %18, %16 ], [ 0, %8 ]
  %27 = phi i8 [ %24, %16 ], [ 0, %8 ]
  %28 = getelementptr inbounds %struct.MB_MODE_INFO, %struct.MB_MODE_INFO* %12, i64 0, i32 20
  %29 = load i8, i8* %28, align 4
  %30 = getelementptr inbounds %struct.MB_MODE_INFO, %struct.MB_MODE_INFO* %12, i64 0, i32 21
  %31 = load i8, i8* %30, align 1
  %32 = icmp eq i8 %13, 1
  %33 = mul nuw nsw i8 %26, 3
  %34 = add nuw nsw i8 %26, 2
  %35 = select i1 %32, i8 %33, i8 %34
  store i8 %35, i8* %28, align 4
  store i8 %27, i8* %30, align 1
  %36 = icmp eq i32 %6, 0
  br i1 %36, label %39, label %37

37:                                               ; preds = %25
  %38 = tail call fastcc i64 @intra_model_rd(%struct.AV1Common* %9, %struct.macroblock* %1, i32 %2, i8 zeroext %4, i8 zeroext %3, i32 0)
  br label %80

39:                                               ; preds = %25
  %40 = getelementptr inbounds %struct.RD_STATS, %struct.RD_STATS* %7, i64 0, i32 0
  store i32 0, i32* %40, align 8
  %41 = getelementptr inbounds %struct.RD_STATS, %struct.RD_STATS* %7, i64 0, i32 1
  %42 = getelementptr inbounds %struct.RD_STATS, %struct.RD_STATS* %7, i64 0, i32 4
  %43 = bitcast i64* %41 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %43, i8 0, i64 24, i1 false) #6
  store i32 1, i32* %42, align 8
  %44 = getelementptr inbounds %struct.RD_STATS, %struct.RD_STATS* %7, i64 0, i32 5
  store i32 0, i32* %44, align 4
  tail call void @av1_txfm_rd_in_plane(%struct.macroblock* %1, %struct.AV1_COMP* %0, %struct.RD_STATS* %7, i64 9223372036854775807, i64 0, i32 %2, i8 zeroext %4, i8 zeroext %3, i8 zeroext 0, i32 0) #6
  %45 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 17
  %46 = load i32, i32* %45, align 8
  %47 = load i32, i32* %40, align 8
  %48 = icmp eq i32 %47, 2147483647
  br i1 %48, label %77, label %49

49:                                               ; preds = %39
  %50 = load i64, i64* %41, align 8
  %51 = icmp eq i64 %50, 9223372036854775807
  br i1 %51, label %77, label %52

52:                                               ; preds = %49
  %53 = getelementptr inbounds %struct.RD_STATS, %struct.RD_STATS* %7, i64 0, i32 2
  %54 = load i64, i64* %53, align 8
  %55 = icmp eq i64 %54, 9223372036854775807
  br i1 %55, label %77, label %56

56:                                               ; preds = %52
  %57 = icmp sgt i32 %47, -1
  br i1 %57, label %58, label %66

58:                                               ; preds = %56
  %59 = sext i32 %47 to i64
  %60 = sext i32 %46 to i64
  %61 = mul nsw i64 %59, %60
  %62 = add nsw i64 %61, 256
  %63 = ashr i64 %62, 9
  %64 = shl i64 %50, 7
  %65 = add nsw i64 %64, %63
  br label %75

66:                                               ; preds = %56
  %67 = shl nsw i64 %50, 7
  %68 = sub nsw i32 0, %47
  %69 = sext i32 %68 to i64
  %70 = sext i32 %46 to i64
  %71 = mul nsw i64 %69, %70
  %72 = add nsw i64 %71, 256
  %73 = ashr i64 %72, 9
  %74 = sub nsw i64 %67, %73
  br label %75

75:                                               ; preds = %66, %58
  %76 = phi i64 [ %65, %58 ], [ %74, %66 ]
  store i64 %76, i64* %53, align 8
  br label %80

77:                                               ; preds = %52, %49, %39
  store i32 2147483647, i32* %40, align 8
  %78 = bitcast i64* %41 to <2 x i64>*
  store <2 x i64> <i64 9223372036854775807, i64 9223372036854775807>, <2 x i64>* %78, align 8
  %79 = getelementptr inbounds %struct.RD_STATS, %struct.RD_STATS* %7, i64 0, i32 3
  store i64 9223372036854775807, i64* %79, align 8
  store i32 0, i32* %42, align 8
  store i32 0, i32* %44, align 4
  br label %80

80:                                               ; preds = %77, %75, %37
  %81 = phi i64 [ %38, %37 ], [ %76, %75 ], [ 9223372036854775807, %77 ]
  store i8 %29, i8* %28, align 4
  store i8 %31, i8* %30, align 1
  ret i64 %81
}

; Function Attrs: nounwind ssp uwtable
define internal fastcc i64 @intra_model_rd(%struct.AV1Common*, %struct.macroblock*, i32, i8 zeroext, i8 zeroext, i32) unnamed_addr #0 {
  %7 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 2
  %8 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 2, i32 40
  %9 = load i32, i32* %8, align 16
  %10 = zext i32 %9 to i64
  %11 = zext i8 %4 to i64
  %12 = getelementptr inbounds [19 x i32], [19 x i32]* @tx_size_high_unit, i64 0, i64 %11
  %13 = load i32, i32* %12, align 4
  %14 = getelementptr inbounds [19 x i32], [19 x i32]* @tx_size_wide_unit, i64 0, i64 %11
  %15 = load i32, i32* %14, align 4
  %16 = getelementptr inbounds [19 x i32], [19 x i32]* @tx_size_wide, i64 0, i64 %11
  %17 = load i32, i32* %16, align 4
  %18 = getelementptr inbounds [19 x i32], [19 x i32]* @tx_size_high, i64 0, i64 %11
  %19 = load i32, i32* %18, align 4
  %20 = zext i8 %3 to i64
  %21 = getelementptr inbounds [22 x i8], [22 x i8]* @block_size_wide, i64 0, i64 %20
  %22 = load i8, i8* %21, align 1
  %23 = zext i8 %22 to i32
  %24 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 2, i32 18
  %25 = load i32, i32* %24, align 8
  %26 = icmp slt i32 %25, 0
  br i1 %26, label %27, label %34

27:                                               ; preds = %6
  %28 = sext i32 %2 to i64
  %29 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 2, i32 4, i64 %28, i32 1
  %30 = load i32, i32* %29, align 4
  %31 = add nsw i32 %30, 3
  %32 = ashr i32 %25, %31
  %33 = add nsw i32 %32, %23
  br label %34

34:                                               ; preds = %6, %27
  %35 = phi i32 [ %33, %27 ], [ %23, %6 ]
  %36 = ashr i32 %35, 2
  %37 = getelementptr inbounds [22 x i8], [22 x i8]* @block_size_high, i64 0, i64 %20
  %38 = load i8, i8* %37, align 1
  %39 = zext i8 %38 to i32
  %40 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 2, i32 20
  %41 = load i32, i32* %40, align 16
  %42 = icmp slt i32 %41, 0
  %43 = sext i32 %2 to i64
  br i1 %42, label %44, label %50

44:                                               ; preds = %34
  %45 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 2, i32 4, i64 %43, i32 2
  %46 = load i32, i32* %45, align 8
  %47 = add nsw i32 %46, 3
  %48 = ashr i32 %41, %47
  %49 = add nsw i32 %48, %39
  br label %50

50:                                               ; preds = %34, %44
  %51 = phi i32 [ %49, %44 ], [ %39, %34 ]
  %52 = ashr i32 %51, 2
  %53 = icmp sgt i32 %51, 3
  br i1 %53, label %54, label %101

54:                                               ; preds = %50
  %55 = icmp sgt i32 %35, 3
  %56 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 0, i64 %43, i32 0
  %57 = zext i8 %22 to i64
  %58 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 0, i64 %43, i32 6, i32 0
  %59 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 0, i64 %43, i32 6, i32 4
  %60 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 2, i32 4, i64 %43, i32 3, i32 0
  %61 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 2, i32 4, i64 %43, i32 3, i32 4
  %62 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 0, i64 %43, i32 3
  %63 = getelementptr inbounds [20 x i32], [20 x i32]* @tx_size_2d, i64 0, i64 %11
  br label %64

64:                                               ; preds = %54, %97
  %65 = phi i64 [ 0, %54 ], [ %98, %97 ]
  %66 = phi i32 [ 0, %54 ], [ %99, %97 ]
  br i1 %55, label %67, label %97

67:                                               ; preds = %64, %67
  %68 = phi i64 [ %94, %67 ], [ %65, %64 ]
  %69 = phi i32 [ %95, %67 ], [ 0, %64 ]
  tail call void @av1_predict_intra_block_facade(%struct.AV1Common* %0, %struct.macroblockd* %7, i32 %2, i32 %69, i32 %66, i8 zeroext %4) #6
  %70 = load i16*, i16** %56, align 8
  %71 = load i8*, i8** %58, align 8
  %72 = load i32, i32* %59, align 8
  %73 = mul nsw i32 %72, %66
  %74 = add nsw i32 %73, %69
  %75 = shl i32 %74, 2
  %76 = sext i32 %75 to i64
  %77 = getelementptr inbounds i8, i8* %71, i64 %76
  %78 = sext i32 %72 to i64
  %79 = load i8*, i8** %60, align 8
  %80 = load i32, i32* %61, align 8
  %81 = mul nsw i32 %80, %66
  %82 = add nsw i32 %81, %69
  %83 = shl i32 %82, 2
  %84 = sext i32 %83 to i64
  %85 = getelementptr inbounds i8, i8* %79, i64 %84
  %86 = sext i32 %80 to i64
  tail call void @av1_subtract_block(i64 %10, i32 %19, i32 %17, i16* %70, i64 %57, i8* %77, i64 %78, i8* %85, i64 %86) #6
  %87 = load i16*, i16** %56, align 8
  %88 = load i32*, i32** %62, align 8
  tail call void @av1_quick_txfm(i32 %5, i8 zeroext %4, i64 %10, i16* %87, i32 %23, i32* %88) #6
  %89 = load i32 (i32*, i32)*, i32 (i32*, i32)** @aom_satd, align 8
  %90 = load i32*, i32** %62, align 8
  %91 = load i32, i32* %63, align 4
  %92 = tail call i32 %89(i32* %90, i32 %91) #6
  %93 = sext i32 %92 to i64
  %94 = add nsw i64 %68, %93
  %95 = add nsw i32 %69, %15
  %96 = icmp slt i32 %95, %36
  br i1 %96, label %67, label %97

97:                                               ; preds = %67, %64
  %98 = phi i64 [ %65, %64 ], [ %94, %67 ]
  %99 = add nsw i32 %66, %13
  %100 = icmp slt i32 %99, %52
  br i1 %100, label %64, label %101

101:                                              ; preds = %97, %50
  %102 = phi i64 [ 0, %50 ], [ %98, %97 ]
  ret i64 %102
}

declare void @av1_txfm_rd_in_plane(%struct.macroblock*, %struct.AV1_COMP*, %struct.RD_STATS*, i64, i64, i32, i8 zeroext, i8 zeroext, i8 zeroext, i32) local_unnamed_addr #2

declare void @av1_predict_intra_block_facade(%struct.AV1Common*, %struct.macroblockd*, i32, i32, i32, i8 zeroext) local_unnamed_addr #2

declare void @av1_subtract_block(i64, i32, i32, i16*, i64, i8*, i64, i8*, i64) local_unnamed_addr #2

declare void @av1_quick_txfm(i32, i8 zeroext, i64, i16*, i32, i32*) local_unnamed_addr #2

declare i32 @av1_get_palette_cache(%struct.macroblockd*, i32, i16*) local_unnamed_addr #2

declare i32 @av1_palette_color_cost_uv(%struct.PALETTE_MODE_INFO*, i16*, i32, i32) local_unnamed_addr #2

declare i32 @av1_cost_color_map(%struct.macroblock*, i32, i8 zeroext, i8 zeroext, i8 zeroext) local_unnamed_addr #2

; Function Attrs: nounwind readnone speculatable
declare i32 @llvm.ctlz.i32(i32, i1 immarg) #5

; Function Attrs: nounwind ssp uwtable
define internal fastcc i64 @calc_rd_given_intra_angle(%struct.AV1_COMP*, %struct.macroblock*, i8 zeroext, i32, i64, i8 signext, i32* nocapture, %struct.RD_STATS* nocapture, i32* nocapture, i8* nocapture, i64* nocapture, i64* nocapture, i8* nocapture, i8* nocapture, i32) unnamed_addr #0 {
  %16 = alloca %struct.RD_STATS, align 8
  %17 = bitcast %struct.RD_STATS* %16 to i8*
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %17) #6
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %17, i8 -86, i64 40, i1 false)
  %18 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 2, i32 6
  %19 = load %struct.MB_MODE_INFO**, %struct.MB_MODE_INFO*** %18, align 8
  %20 = load %struct.MB_MODE_INFO*, %struct.MB_MODE_INFO** %19, align 8
  %21 = zext i8 %2 to i64
  %22 = getelementptr inbounds [22 x i8], [22 x i8]* @num_pels_log2_lookup, i64 0, i64 %21
  %23 = load i8, i8* %22, align 1
  %24 = zext i8 %23 to i32
  %25 = add nsw i32 %24, -4
  %26 = shl i32 1, %25
  %27 = getelementptr inbounds %struct.MB_MODE_INFO, %struct.MB_MODE_INFO* %20, i64 0, i32 18, i64 0
  store i8 %5, i8* %27, align 8
  %28 = icmp eq i32 %14, 0
  br i1 %28, label %29, label %48

29:                                               ; preds = %15
  %30 = and i64 %21, 252
  %31 = icmp eq i64 %30, 12
  br i1 %31, label %35, label %32

32:                                               ; preds = %29
  %33 = getelementptr inbounds [22 x i8], [22 x i8]* @max_txsize_lookup, i64 0, i64 %21
  %34 = load i8, i8* %33, align 1
  br label %35

35:                                               ; preds = %32, %29
  %36 = phi i8 [ %34, %32 ], [ 3, %29 ]
  %37 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8
  %38 = tail call fastcc i64 @intra_model_rd(%struct.AV1Common* %37, %struct.macroblock* %1, i32 0, i8 zeroext %2, i8 zeroext %36, i32 1) #6
  %39 = load i64, i64* %11, align 8
  %40 = icmp eq i64 %39, 9223372036854775807
  br i1 %40, label %45, label %41

41:                                               ; preds = %35
  %42 = ashr i64 %39, 2
  %43 = add nsw i64 %42, %39
  %44 = icmp sgt i64 %38, %43
  br i1 %44, label %90, label %45

45:                                               ; preds = %41, %35
  %46 = icmp slt i64 %38, %39
  br i1 %46, label %47, label %48

47:                                               ; preds = %45
  store i64 %38, i64* %11, align 8
  br label %48

48:                                               ; preds = %47, %45, %15
  call void @av1_pick_uniform_tx_size_type_yrd(%struct.AV1_COMP* %0, %struct.macroblock* %1, %struct.RD_STATS* nonnull %16, i8 zeroext %2, i64 %4) #6
  %49 = getelementptr inbounds %struct.RD_STATS, %struct.RD_STATS* %16, i64 0, i32 0
  %50 = load i32, i32* %49, align 8
  %51 = icmp eq i32 %50, 2147483647
  br i1 %51, label %90, label %52

52:                                               ; preds = %48
  %53 = add nsw i32 %50, %3
  %54 = getelementptr inbounds %struct.MB_MODE_INFO, %struct.MB_MODE_INFO* %20, i64 0, i32 2
  %55 = load i8, i8* %54, align 2
  %56 = zext i8 %55 to i64
  %57 = add nsw i64 %56, -1
  %58 = sext i8 %5 to i64
  %59 = add nsw i64 %58, 3
  %60 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 20, i32 6, i64 %57, i64 %59
  %61 = load i32, i32* %60, align 4
  %62 = add nsw i32 %53, %61
  %63 = sext i32 %62 to i64
  %64 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 17
  %65 = load i32, i32* %64, align 8
  %66 = sext i32 %65 to i64
  %67 = mul nsw i64 %63, %66
  %68 = add nsw i64 %67, 256
  %69 = ashr i64 %68, 9
  %70 = getelementptr inbounds %struct.RD_STATS, %struct.RD_STATS* %16, i64 0, i32 1
  %71 = load i64, i64* %70, align 8
  %72 = shl nsw i64 %71, 7
  %73 = add nsw i64 %69, %72
  %74 = load i64, i64* %10, align 8
  %75 = icmp slt i64 %73, %74
  br i1 %75, label %76, label %90

76:                                               ; preds = %52
  %77 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 58, i32 1, i64 0
  %78 = sext i32 %26 to i64
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %13, i8* align 4 %77, i64 %78, i1 false)
  %79 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 2, i32 15
  %80 = load i8*, i8** %79, align 8
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %12, i8* align 1 %80, i64 %78, i1 false)
  store i64 %73, i64* %10, align 8
  %81 = load i8, i8* %27, align 8
  %82 = sext i8 %81 to i32
  store i32 %82, i32* %8, align 4
  %83 = getelementptr inbounds %struct.MB_MODE_INFO, %struct.MB_MODE_INFO* %20, i64 0, i32 24
  %84 = load i8, i8* %83, align 1
  store i8 %84, i8* %9, align 1
  store i32 %62, i32* %6, align 4
  %85 = getelementptr inbounds %struct.RD_STATS, %struct.RD_STATS* %7, i64 0, i32 0
  store i32 %50, i32* %85, align 8
  %86 = getelementptr inbounds %struct.RD_STATS, %struct.RD_STATS* %7, i64 0, i32 1
  store i64 %71, i64* %86, align 8
  %87 = getelementptr inbounds %struct.RD_STATS, %struct.RD_STATS* %16, i64 0, i32 4
  %88 = load i32, i32* %87, align 8
  %89 = getelementptr inbounds %struct.RD_STATS, %struct.RD_STATS* %7, i64 0, i32 4
  store i32 %88, i32* %89, align 8
  br label %90

90:                                               ; preds = %41, %52, %76, %48
  %91 = phi i64 [ 9223372036854775807, %48 ], [ %73, %76 ], [ %73, %52 ], [ 9223372036854775807, %41 ]
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %17) #6
  ret i64 %91
}

declare i32 @av1_palette_color_cost_y(%struct.PALETTE_MODE_INFO*, i16*, i32, i32) local_unnamed_addr #2

; Function Attrs: argmemonly nounwind
declare void @llvm.memmove.p0i8.p0i8.i64(i8* nocapture, i8* nocapture readonly, i64, i1 immarg) #1

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { inlinehint nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { inlinehint nofree norecurse nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind readnone speculatable }
attributes #6 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = distinct !{!2, !3}
!3 = !{!"llvm.loop.isvectorized", i32 1}
!4 = distinct !{!4, !3}
!5 = distinct !{!5, !3}
!6 = distinct !{!6, !7, !3}
!7 = !{!"llvm.loop.unroll.runtime.disable"}
!8 = !{i8 0, i8 2}
!9 = !{i32 0, i32 33}
