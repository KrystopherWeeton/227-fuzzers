; ModuleID = '../../third_party/libvpx/source/libvpx/vp8/vp8_dx_iface.c'
source_filename = "../../third_party/libvpx/source/libvpx/vp8/vp8_dx_iface.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.vpx_codec_iface = type { i8*, i32, i64, i32 (%struct.vpx_codec_ctx*, %struct.vpx_codec_priv_enc_mr_cfg*)*, i32 (%struct.vpx_codec_alg_priv*)*, %struct.vpx_codec_ctrl_fn_map*, %struct.vpx_codec_dec_iface, %struct.vpx_codec_enc_iface }
%struct.vpx_codec_ctx = type { i8*, %struct.vpx_codec_iface*, i32, i8*, i64, %union.anon, %struct.vpx_codec_priv* }
%union.anon = type { %struct.vpx_codec_dec_cfg* }
%struct.vpx_codec_dec_cfg = type { i32, i32, i32 }
%struct.vpx_codec_priv = type { i8*, i64, %struct.anon, %struct.anon.1 }
%struct.anon = type { %struct.vpx_codec_priv_cb_pair, %struct.vpx_codec_priv_cb_pair }
%struct.vpx_codec_priv_cb_pair = type { %union.anon.0, i8* }
%union.anon.0 = type { void (i8*, %struct.vpx_image*)* }
%struct.vpx_image = type { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, [4 x i8*], [4 x i32], i32, i8*, i8*, i32, i32, i8* }
%struct.anon.1 = type { %struct.vpx_fixed_buf, i32, i32, %struct.vpx_codec_cx_pkt, i32 }
%struct.vpx_fixed_buf = type { i8*, i64 }
%struct.vpx_codec_cx_pkt = type { i32, %union.anon.2 }
%union.anon.2 = type { %struct.anon.3, [40 x i8] }
%struct.anon.3 = type { i8*, i64, i64, i64, i32, i32, [5 x i32], [5 x i32], [5 x i8] }
%struct.vpx_codec_priv_enc_mr_cfg = type { i32, i32, %struct.vpx_rational, i8* }
%struct.vpx_rational = type { i32, i32 }
%struct.vpx_codec_alg_priv = type { %struct.vpx_codec_priv, %struct.vpx_codec_dec_cfg, %struct.vpx_codec_stream_info, i32, i32, i32, %struct.vp8_postproc_cfg, void (i8*, i8*, i8*, i32)*, i8*, %struct.vpx_image, i32, %struct.frame_buffers, i8*, %struct.FRAGMENT_DATA }
%struct.vpx_codec_stream_info = type { i32, i32, i32, i32 }
%struct.vp8_postproc_cfg = type { i32, i32, i32 }
%struct.frame_buffers = type { [32 x %struct.VP8D_COMP*] }
%struct.VP8D_COMP = type { %struct.macroblockd, [4 x %struct.yv12_buffer_config*], %struct.VP8Common, [9 x %struct.BOOL_DECODER], %struct.VP8D_CONFIG, %struct.FRAGMENT_DATA, %struct.vpx_atomic_int, i32, i32, i32, i32, [4 x i32], i32, %struct.vpx_atomic_int*, i8**, i8**, i8**, i8**, i8**, i8**, %struct.MB_ROW_DEC*, %struct.DECODETHREAD_DATA*, i64*, %union.sem_t*, %union.sem_t, i64, i32, i8, i8, i8, i8, i32, i32, i32, i32, i32, void (i8*, i8*, i8*, i32)*, i8*, i32 }
%struct.macroblockd = type { [384 x i8], [400 x i16], [400 x i16], [25 x i8], [7 x i8], [16 x i16], [16 x i16], [16 x i16], [16 x i16], [25 x %struct.blockd], i32, %struct.yv12_buffer_config, %struct.yv12_buffer_config, %struct.modeinfo*, i32, i32, i32, i32, [3 x i8*], [3 x i8*], [2 x i32], %struct.ENTROPY_CONTEXT_PLANES*, %struct.ENTROPY_CONTEXT_PLANES*, i8, i8, i8, i8, [3 x i8], [2 x [4 x i8]], i8, i8, [4 x i8], [4 x i8], [4 x i8], [4 x i8], i32, i32, i32, i32, void (i8*, i32, i32, i32, i8*, i32)*, void (i8*, i32, i32, i32, i8*, i32)*, void (i8*, i32, i32, i32, i8*, i32)*, void (i8*, i32, i32, i32, i8*, i32)*, i8*, i32, %struct.vpx_internal_error_info, [16 x i8], [704 x i8] }
%struct.blockd = type { i16*, i16*, i8*, i16*, i32, i8*, %union.b_mode_info }
%union.b_mode_info = type { i32 }
%struct.yv12_buffer_config = type { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i8*, i8*, i8*, i8*, i8*, i64, i32, i64, i32, i32, i32, i32, i32, i32, i32, i32, i32 }
%struct.modeinfo = type { %struct.MB_MODE_INFO, [16 x %union.b_mode_info] }
%struct.MB_MODE_INFO = type { i8, i8, i8, i8, %union.int_mv, i8, i8, i8, i8 }
%union.int_mv = type { i32 }
%struct.ENTROPY_CONTEXT_PLANES = type { [4 x i8], [2 x i8], [2 x i8], i8 }
%struct.vpx_internal_error_info = type { i32, i32, [80 x i8], i32, [1 x %struct.__jmp_buf_tag] }
%struct.__jmp_buf_tag = type { [8 x i64], i32, %struct.__sigset_t }
%struct.__sigset_t = type { [16 x i64] }
%struct.VP8Common = type { %struct.vpx_internal_error_info, [8 x i8], [128 x [2 x i16]], [128 x [2 x i16]], [128 x [2 x i16]], i32, i32, i32, i32, i32, %struct.yv12_buffer_config*, [4 x %struct.yv12_buffer_config], [4 x i32], i32, i32, i32, i32, %struct.yv12_buffer_config, %struct.yv12_buffer_config, %struct.yv12_buffer_config, i32, i8*, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, %struct.modeinfo*, %struct.modeinfo*, %struct.modeinfo*, i32, [12 x i8], %struct.loop_filter_info_n, i32, i32, i32, i32, i32, i32, i32, i32, i32, [4 x i32], %struct.ENTROPY_CONTEXT_PLANES*, %struct.ENTROPY_CONTEXT_PLANES, %struct.frame_contexts, %struct.frame_contexts, i32, i32, i32, i32, %struct.postproc_state, i32, [12 x i8] }
%struct.loop_filter_info_n = type { [64 x [16 x i8]], [64 x [16 x i8]], [64 x [16 x i8]], [4 x [16 x i8]], [4 x [4 x [4 x i8]]], [2 x [64 x i8]], [10 x i8], [6 x i8] }
%struct.frame_contexts = type { [9 x i8], [4 x i8], [3 x i8], [3 x i8], [4 x [8 x [3 x [11 x i8]]]], [2 x %struct.mv_context] }
%struct.mv_context = type { [19 x i8] }
%struct.postproc_state = type { i32, i32, i32, i32, i32, i8* }
%struct.BOOL_DECODER = type { i8*, i8*, i64, i32, i32, void (i8*, i8*, i8*, i32)*, i8* }
%struct.VP8D_CONFIG = type { i32, i32, i32, i32, i32, i32 }
%struct.vpx_atomic_int = type { i32 }
%struct.MB_ROW_DEC = type { %struct.macroblockd }
%struct.DECODETHREAD_DATA = type { i32, i8*, i8* }
%union.sem_t = type { i64, [24 x i8] }
%struct.FRAGMENT_DATA = type { i32, i32, [9 x i8*], [9 x i32] }
%struct.vpx_codec_ctrl_fn_map = type { i32, i32 (%struct.vpx_codec_alg_priv*, %struct.__va_list_tag*)* }
%struct.__va_list_tag = type { i32, i32, i8*, i8* }
%struct.vpx_codec_dec_iface = type { i32 (i8*, i32, %struct.vpx_codec_stream_info*)*, i32 (%struct.vpx_codec_alg_priv*, %struct.vpx_codec_stream_info*)*, i32 (%struct.vpx_codec_alg_priv*, i8*, i32, i8*, i64)*, %struct.vpx_image* (%struct.vpx_codec_alg_priv*, i8**)*, i32 (%struct.vpx_codec_alg_priv*, i32 (i8*, i64, %struct.vpx_codec_frame_buffer*)*, i32 (i8*, %struct.vpx_codec_frame_buffer*)*, i8*)* }
%struct.vpx_codec_frame_buffer = type { i8*, i64, i8* }
%struct.vpx_codec_enc_iface = type { i32, %struct.vpx_codec_enc_cfg_map*, i32 (%struct.vpx_codec_alg_priv*, %struct.vpx_image*, i64, i64, i64, i64)*, %struct.vpx_codec_cx_pkt* (%struct.vpx_codec_alg_priv*, i8**)*, i32 (%struct.vpx_codec_alg_priv*, %struct.vpx_codec_enc_cfg*)*, %struct.vpx_fixed_buf* (%struct.vpx_codec_alg_priv*)*, %struct.vpx_image* (%struct.vpx_codec_alg_priv*)*, i32 (%struct.vpx_codec_enc_cfg*, i8**)* }
%struct.vpx_codec_enc_cfg_map = type { i32, %struct.vpx_codec_enc_cfg }
%struct.vpx_codec_enc_cfg = type { i32, i32, i32, i32, i32, i32, i32, %struct.vpx_rational, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, %struct.vpx_fixed_buf, %struct.vpx_fixed_buf, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, [5 x i32], [5 x i32], i32, [5 x i32], [5 x i32], i32, [16 x i32], [12 x i32], i32 }
%struct.vp8_ppflags_t = type { i32, i32, i32, i32, i32, i32, i32 }
%struct.vpx_ref_frame = type { i32, %struct.vpx_image }
%struct.vpx_decrypt_init = type { void (i8*, i8*, i8*, i32)*, i8* }

@vpx_codec_vp8_dx_algo = hidden constant %struct.vpx_codec_iface { i8* getelementptr inbounds ([47 x i8], [47 x i8]* @.str, i32 0, i32 0), i32 5, i64 1310721, i32 (%struct.vpx_codec_ctx*, %struct.vpx_codec_priv_enc_mr_cfg*)* @vp8_init, i32 (%struct.vpx_codec_alg_priv*)* @vp8_destroy, %struct.vpx_codec_ctrl_fn_map* getelementptr inbounds ([9 x %struct.vpx_codec_ctrl_fn_map], [9 x %struct.vpx_codec_ctrl_fn_map]* @vp8_ctf_maps, i32 0, i32 0), %struct.vpx_codec_dec_iface { i32 (i8*, i32, %struct.vpx_codec_stream_info*)* @vp8_peek_si, i32 (%struct.vpx_codec_alg_priv*, %struct.vpx_codec_stream_info*)* @vp8_get_si, i32 (%struct.vpx_codec_alg_priv*, i8*, i32, i8*, i64)* @vp8_decode, %struct.vpx_image* (%struct.vpx_codec_alg_priv*, i8**)* @vp8_get_frame, i32 (%struct.vpx_codec_alg_priv*, i32 (i8*, i64, %struct.vpx_codec_frame_buffer*)*, i32 (i8*, %struct.vpx_codec_frame_buffer*)*, i8*)* null }, %struct.vpx_codec_enc_iface zeroinitializer }, align 8
@.str = private unnamed_addr constant [47 x i8] c"WebM Project VP8 Decoder v1.9.0-147-g61edec1ef\00", align 1
@vp8_ctf_maps = internal constant [9 x %struct.vpx_codec_ctrl_fn_map] [%struct.vpx_codec_ctrl_fn_map { i32 1, i32 (%struct.vpx_codec_alg_priv*, %struct.__va_list_tag*)* @vp8_set_reference }, %struct.vpx_codec_ctrl_fn_map { i32 2, i32 (%struct.vpx_codec_alg_priv*, %struct.__va_list_tag*)* @vp8_get_reference }, %struct.vpx_codec_ctrl_fn_map { i32 3, i32 (%struct.vpx_codec_alg_priv*, %struct.__va_list_tag*)* @vp8_set_postproc }, %struct.vpx_codec_ctrl_fn_map { i32 256, i32 (%struct.vpx_codec_alg_priv*, %struct.__va_list_tag*)* @vp8_get_last_ref_updates }, %struct.vpx_codec_ctrl_fn_map { i32 257, i32 (%struct.vpx_codec_alg_priv*, %struct.__va_list_tag*)* @vp8_get_frame_corrupted }, %struct.vpx_codec_ctrl_fn_map { i32 258, i32 (%struct.vpx_codec_alg_priv*, %struct.__va_list_tag*)* @vp8_get_last_ref_frame }, %struct.vpx_codec_ctrl_fn_map { i32 267, i32 (%struct.vpx_codec_alg_priv*, %struct.__va_list_tag*)* @vp8_get_quantizer }, %struct.vpx_codec_ctrl_fn_map { i32 259, i32 (%struct.vpx_codec_alg_priv*, %struct.__va_list_tag*)* @vp8_set_decryptor }, %struct.vpx_codec_ctrl_fn_map { i32 -1, i32 (%struct.vpx_codec_alg_priv*, %struct.__va_list_tag*)* null }], align 16
@.str.1 = private unnamed_addr constant [20 x i8] c"Invalid frame width\00", align 1
@.str.2 = private unnamed_addr constant [21 x i8] c"Invalid frame height\00", align 1
@.str.3 = private unnamed_addr constant [33 x i8] c"Failed to allocate frame buffers\00", align 1

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden nonnull %struct.vpx_codec_iface* @vpx_codec_vp8_dx() local_unnamed_addr #0 {
  ret %struct.vpx_codec_iface* @vpx_codec_vp8_dx_algo
}

; Function Attrs: nounwind ssp uwtable
define internal i32 @vp8_init(%struct.vpx_codec_ctx* nocapture, %struct.vpx_codec_priv_enc_mr_cfg* nocapture readnone) #1 {
  tail call void @vp8_rtcd() #6
  tail call void @vpx_dsp_rtcd() #6
  tail call void @vpx_scale_rtcd() #6
  %3 = getelementptr inbounds %struct.vpx_codec_ctx, %struct.vpx_codec_ctx* %0, i64 0, i32 6
  %4 = load %struct.vpx_codec_priv*, %struct.vpx_codec_priv** %3, align 8
  %5 = icmp eq %struct.vpx_codec_priv* %4, null
  br i1 %5, label %6, label %34

6:                                                ; preds = %2
  %7 = tail call i8* @vpx_calloc(i64 1, i64 816) #6
  %8 = icmp eq i8* %7, null
  br i1 %8, label %34, label %9

9:                                                ; preds = %6
  %10 = bitcast %struct.vpx_codec_priv** %3 to i8**
  store i8* %7, i8** %10, align 8
  %11 = getelementptr inbounds %struct.vpx_codec_ctx, %struct.vpx_codec_ctx* %0, i64 0, i32 4
  %12 = load i64, i64* %11, align 8
  %13 = getelementptr inbounds i8, i8* %7, i64 8
  %14 = bitcast i8* %13 to i64*
  store i64 %12, i64* %14, align 8
  %15 = getelementptr inbounds i8, i8* %7, i64 228
  %16 = bitcast i8* %15 to i32*
  store i32 16, i32* %16, align 4
  %17 = getelementptr inbounds i8, i8* %7, i64 272
  %18 = getelementptr inbounds %struct.vpx_codec_ctx, %struct.vpx_codec_ctx* %0, i64 0, i32 5, i32 0
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %17, i8 0, i64 16, i1 false) #6
  %19 = load %struct.vpx_codec_dec_cfg*, %struct.vpx_codec_dec_cfg** %18, align 8
  %20 = icmp eq %struct.vpx_codec_dec_cfg* %19, null
  br i1 %20, label %25, label %21

21:                                               ; preds = %9
  %22 = getelementptr inbounds i8, i8* %7, i64 216
  %23 = bitcast %struct.vpx_codec_dec_cfg* %19 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %22, i8* nonnull align 4 %23, i64 12, i1 false) #6
  %24 = bitcast %struct.vpx_codec_dec_cfg** %18 to i8**
  store i8* %22, i8** %24, align 8
  br label %25

25:                                               ; preds = %9, %21
  %26 = bitcast %struct.vpx_codec_priv** %3 to %struct.vpx_codec_alg_priv**
  %27 = load %struct.vpx_codec_alg_priv*, %struct.vpx_codec_alg_priv** %26, align 8
  %28 = getelementptr inbounds %struct.vpx_codec_alg_priv, %struct.vpx_codec_alg_priv* %27, i64 0, i32 13, i32 1
  store i32 0, i32* %28, align 4
  %29 = getelementptr inbounds %struct.vpx_codec_alg_priv, %struct.vpx_codec_alg_priv* %27, i64 0, i32 0, i32 1
  %30 = load i64, i64* %29, align 8
  %31 = trunc i64 %30 to i32
  %32 = and i32 %31, 262144
  %33 = getelementptr inbounds %struct.vpx_codec_alg_priv, %struct.vpx_codec_alg_priv* %27, i64 0, i32 13, i32 0
  store i32 %32, i32* %33, align 8
  br label %34

34:                                               ; preds = %6, %2, %25
  %35 = phi i32 [ 0, %25 ], [ 0, %2 ], [ 2, %6 ]
  ret i32 %35
}

; Function Attrs: nounwind ssp uwtable
define internal i32 @vp8_destroy(%struct.vpx_codec_alg_priv*) #1 {
  %2 = getelementptr inbounds %struct.vpx_codec_alg_priv, %struct.vpx_codec_alg_priv* %0, i64 0, i32 11
  %3 = tail call i32 @vp8_remove_decoder_instances(%struct.frame_buffers* %2) #6
  %4 = bitcast %struct.vpx_codec_alg_priv* %0 to i8*
  tail call void @vpx_free(i8* %4) #6
  ret i32 0
}

; Function Attrs: nounwind ssp uwtable
define internal i32 @vp8_peek_si(i8* nocapture readonly, i32, %struct.vpx_codec_stream_info* nocapture) #1 {
  %4 = icmp eq i32 %1, 0
  br i1 %4, label %49, label %5

5:                                                ; preds = %3
  %6 = getelementptr inbounds %struct.vpx_codec_stream_info, %struct.vpx_codec_stream_info* %2, i64 0, i32 3
  store i32 0, i32* %6, align 4
  %7 = icmp ugt i32 %1, 9
  br i1 %7, label %8, label %49

8:                                                ; preds = %5
  %9 = load i8, i8* %0, align 1
  %10 = and i8 %9, 1
  %11 = icmp eq i8 %10, 0
  br i1 %11, label %12, label %49

12:                                               ; preds = %8
  store i32 1, i32* %6, align 4
  %13 = getelementptr inbounds i8, i8* %0, i64 3
  %14 = load i8, i8* %13, align 1
  %15 = icmp eq i8 %14, -99
  br i1 %15, label %16, label %49

16:                                               ; preds = %12
  %17 = getelementptr inbounds i8, i8* %0, i64 4
  %18 = load i8, i8* %17, align 1
  %19 = icmp eq i8 %18, 1
  br i1 %19, label %20, label %49

20:                                               ; preds = %16
  %21 = getelementptr inbounds i8, i8* %0, i64 5
  %22 = load i8, i8* %21, align 1
  %23 = icmp eq i8 %22, 42
  br i1 %23, label %24, label %49

24:                                               ; preds = %20
  %25 = getelementptr inbounds i8, i8* %0, i64 6
  %26 = load i8, i8* %25, align 1
  %27 = zext i8 %26 to i32
  %28 = getelementptr inbounds i8, i8* %0, i64 7
  %29 = load i8, i8* %28, align 1
  %30 = zext i8 %29 to i32
  %31 = shl nuw nsw i32 %30, 8
  %32 = and i32 %31, 16128
  %33 = or i32 %32, %27
  %34 = getelementptr inbounds %struct.vpx_codec_stream_info, %struct.vpx_codec_stream_info* %2, i64 0, i32 1
  store i32 %33, i32* %34, align 4
  %35 = getelementptr inbounds i8, i8* %0, i64 8
  %36 = load i8, i8* %35, align 1
  %37 = zext i8 %36 to i32
  %38 = getelementptr inbounds i8, i8* %0, i64 9
  %39 = load i8, i8* %38, align 1
  %40 = zext i8 %39 to i32
  %41 = shl nuw nsw i32 %40, 8
  %42 = and i32 %41, 16128
  %43 = or i32 %42, %37
  %44 = getelementptr inbounds %struct.vpx_codec_stream_info, %struct.vpx_codec_stream_info* %2, i64 0, i32 2
  store i32 %43, i32* %44, align 4
  %45 = icmp eq i32 %43, 0
  %46 = icmp eq i32 %33, 0
  %47 = or i1 %46, %45
  %48 = select i1 %47, i32 7, i32 0
  br label %49

49:                                               ; preds = %12, %16, %20, %5, %8, %24, %3
  %50 = phi i32 [ 8, %3 ], [ 5, %5 ], [ 5, %8 ], [ %48, %24 ], [ 5, %20 ], [ 5, %16 ], [ 5, %12 ]
  ret i32 %50
}

; Function Attrs: nounwind ssp uwtable
define internal i32 @vp8_get_si(%struct.vpx_codec_alg_priv* nocapture readonly, %struct.vpx_codec_stream_info* nocapture) #1 {
  %3 = bitcast %struct.vpx_codec_stream_info* %1 to i8*
  %4 = getelementptr inbounds %struct.vpx_codec_alg_priv, %struct.vpx_codec_alg_priv* %0, i64 0, i32 2
  %5 = bitcast %struct.vpx_codec_stream_info* %4 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %3, i8* align 4 %5, i64 16, i1 false)
  %6 = getelementptr inbounds %struct.vpx_codec_stream_info, %struct.vpx_codec_stream_info* %1, i64 0, i32 0
  store i32 16, i32* %6, align 4
  ret i32 0
}

; Function Attrs: nounwind ssp uwtable
define internal i32 @vp8_decode(%struct.vpx_codec_alg_priv*, i8*, i32, i8*, i64) #1 {
  %6 = alloca [10 x i8], align 1
  %7 = alloca i32, align 4
  %8 = alloca i32, align 4
  %9 = alloca %struct.VP8D_CONFIG, align 4
  %10 = bitcast i32* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %10)
  store volatile i32 -1431655766, i32* %7, align 4
  %11 = bitcast i32* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %11)
  store volatile i32 -1431655766, i32* %8, align 4
  store volatile i32 0, i32* %8, align 4
  %12 = getelementptr inbounds %struct.vpx_codec_alg_priv, %struct.vpx_codec_alg_priv* %0, i64 0, i32 13
  %13 = getelementptr inbounds %struct.FRAGMENT_DATA, %struct.FRAGMENT_DATA* %12, i64 0, i32 0
  %14 = load i32, i32* %13, align 8
  %15 = icmp eq i8* %1, null
  %16 = or i32 %14, %2
  %17 = icmp eq i32 %16, 0
  %18 = and i1 %15, %17
  br i1 %18, label %373, label %19

19:                                               ; preds = %5
  store volatile i32 0, i32* %7, align 4
  %20 = getelementptr inbounds %struct.vpx_codec_alg_priv, %struct.vpx_codec_alg_priv* %0, i64 0, i32 13, i32 1
  %21 = load i32, i32* %20, align 4
  %22 = icmp eq i32 %21, 0
  br i1 %22, label %23, label %26

23:                                               ; preds = %19
  %24 = getelementptr inbounds %struct.vpx_codec_alg_priv, %struct.vpx_codec_alg_priv* %0, i64 0, i32 13, i32 2, i64 0
  %25 = bitcast i8** %24 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %25, i8 0, i64 108, i1 false) #6
  br label %26

26:                                               ; preds = %23, %19
  %27 = icmp eq i32 %14, 0
  %28 = icmp eq i32 %2, 0
  %29 = and i1 %15, %28
  %30 = or i1 %29, %27
  br i1 %30, label %38, label %31

31:                                               ; preds = %26
  %32 = zext i32 %21 to i64
  %33 = getelementptr inbounds %struct.vpx_codec_alg_priv, %struct.vpx_codec_alg_priv* %0, i64 0, i32 13, i32 2, i64 %32
  store i8* %1, i8** %33, align 8
  %34 = getelementptr inbounds %struct.vpx_codec_alg_priv, %struct.vpx_codec_alg_priv* %0, i64 0, i32 13, i32 3, i64 %32
  store i32 %2, i32* %34, align 4
  %35 = add i32 %21, 1
  store i32 %35, i32* %20, align 4
  %36 = icmp ugt i32 %35, 9
  br i1 %36, label %37, label %46

37:                                               ; preds = %31
  store i32 0, i32* %20, align 4
  store volatile i32 8, i32* %7, align 4
  br label %46

38:                                               ; preds = %26
  %39 = getelementptr inbounds %struct.vpx_codec_alg_priv, %struct.vpx_codec_alg_priv* %0, i64 0, i32 13, i32 2, i64 0
  br i1 %27, label %40, label %42

40:                                               ; preds = %38
  store i8* %1, i8** %39, align 8
  %41 = getelementptr inbounds %struct.vpx_codec_alg_priv, %struct.vpx_codec_alg_priv* %0, i64 0, i32 13, i32 3, i64 0
  store i32 %2, i32* %41, align 8
  store i32 1, i32* %20, align 4
  br label %48

42:                                               ; preds = %38
  %43 = load i8*, i8** %39, align 8
  %44 = getelementptr inbounds %struct.vpx_codec_alg_priv, %struct.vpx_codec_alg_priv* %0, i64 0, i32 13, i32 3, i64 0
  %45 = load i32, i32* %44, align 8
  br label %48

46:                                               ; preds = %31, %37
  %47 = load volatile i32, i32* %7, align 4
  br label %373

48:                                               ; preds = %42, %40
  %49 = phi i32 [ %45, %42 ], [ %2, %40 ]
  %50 = phi i8* [ %43, %42 ], [ %1, %40 ]
  %51 = getelementptr inbounds %struct.vpx_codec_alg_priv, %struct.vpx_codec_alg_priv* %0, i64 0, i32 2, i32 1
  %52 = load i32, i32* %51, align 4
  %53 = getelementptr inbounds %struct.vpx_codec_alg_priv, %struct.vpx_codec_alg_priv* %0, i64 0, i32 2, i32 2
  %54 = load i32, i32* %53, align 4
  %55 = getelementptr inbounds %struct.vpx_codec_alg_priv, %struct.vpx_codec_alg_priv* %0, i64 0, i32 7
  %56 = load void (i8*, i8*, i8*, i32)*, void (i8*, i8*, i8*, i32)** %55, align 8
  %57 = getelementptr inbounds %struct.vpx_codec_alg_priv, %struct.vpx_codec_alg_priv* %0, i64 0, i32 8
  %58 = load i8*, i8** %57, align 8
  %59 = icmp eq i32 %49, 0
  br i1 %59, label %111, label %60

60:                                               ; preds = %48
  %61 = getelementptr inbounds [10 x i8], [10 x i8]* %6, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 10, i8* nonnull %61) #6
  %62 = icmp eq void (i8*, i8*, i8*, i32)* %56, null
  call void @llvm.memset.p0i8.i64(i8* nonnull align 1 %61, i8 -86, i64 10, i1 false) #6
  br i1 %62, label %66, label %63

63:                                               ; preds = %60
  %64 = icmp ult i32 %49, 10
  %65 = select i1 %64, i32 %49, i32 10
  call void %56(i8* %58, i8* %50, i8* nonnull %61, i32 %65) #6
  br label %66

66:                                               ; preds = %63, %60
  %67 = phi i8* [ %61, %63 ], [ %50, %60 ]
  %68 = getelementptr inbounds %struct.vpx_codec_alg_priv, %struct.vpx_codec_alg_priv* %0, i64 0, i32 2, i32 3
  store i32 0, i32* %68, align 4
  %69 = icmp ugt i32 %49, 9
  br i1 %69, label %70, label %109

70:                                               ; preds = %66
  %71 = load i8, i8* %67, align 1
  %72 = and i8 %71, 1
  %73 = icmp eq i8 %72, 0
  br i1 %73, label %74, label %109

74:                                               ; preds = %70
  store i32 1, i32* %68, align 4
  %75 = getelementptr inbounds i8, i8* %67, i64 3
  %76 = load i8, i8* %75, align 1
  %77 = icmp eq i8 %76, -99
  br i1 %77, label %78, label %109

78:                                               ; preds = %74
  %79 = getelementptr inbounds i8, i8* %67, i64 4
  %80 = load i8, i8* %79, align 1
  %81 = icmp eq i8 %80, 1
  br i1 %81, label %82, label %109

82:                                               ; preds = %78
  %83 = getelementptr inbounds i8, i8* %67, i64 5
  %84 = load i8, i8* %83, align 1
  %85 = icmp eq i8 %84, 42
  br i1 %85, label %86, label %109

86:                                               ; preds = %82
  %87 = getelementptr inbounds i8, i8* %67, i64 6
  %88 = load i8, i8* %87, align 1
  %89 = zext i8 %88 to i32
  %90 = getelementptr inbounds i8, i8* %67, i64 7
  %91 = load i8, i8* %90, align 1
  %92 = zext i8 %91 to i32
  %93 = shl nuw nsw i32 %92, 8
  %94 = and i32 %93, 16128
  %95 = or i32 %94, %89
  store i32 %95, i32* %51, align 4
  %96 = getelementptr inbounds i8, i8* %67, i64 8
  %97 = load i8, i8* %96, align 1
  %98 = zext i8 %97 to i32
  %99 = getelementptr inbounds i8, i8* %67, i64 9
  %100 = load i8, i8* %99, align 1
  %101 = zext i8 %100 to i32
  %102 = shl nuw nsw i32 %101, 8
  %103 = and i32 %102, 16128
  %104 = or i32 %103, %98
  store i32 %104, i32* %53, align 4
  %105 = icmp eq i32 %104, 0
  %106 = icmp eq i32 %95, 0
  %107 = or i1 %106, %105
  %108 = select i1 %107, i32 7, i32 0
  br label %109

109:                                              ; preds = %74, %78, %82, %66, %70, %86
  %110 = phi i32 [ 5, %66 ], [ 5, %70 ], [ %108, %86 ], [ 5, %82 ], [ 5, %78 ], [ 5, %74 ]
  call void @llvm.lifetime.end.p0i8(i64 10, i8* nonnull %61) #6
  br label %111

111:                                              ; preds = %109, %48
  %112 = phi i32 [ 8, %48 ], [ %110, %109 ]
  store volatile i32 %112, i32* %7, align 4
  %113 = load volatile i32, i32* %7, align 4
  %114 = icmp eq i32 %113, 5
  br i1 %114, label %115, label %120

115:                                              ; preds = %111
  %116 = getelementptr inbounds %struct.vpx_codec_alg_priv, %struct.vpx_codec_alg_priv* %0, i64 0, i32 2, i32 3
  %117 = load i32, i32* %116, align 4
  %118 = icmp eq i32 %117, 0
  br i1 %118, label %119, label %120

119:                                              ; preds = %115
  store volatile i32 0, i32* %7, align 4
  br label %120

120:                                              ; preds = %115, %119, %111
  %121 = getelementptr inbounds %struct.vpx_codec_alg_priv, %struct.vpx_codec_alg_priv* %0, i64 0, i32 3
  %122 = load i32, i32* %121, align 4
  %123 = icmp eq i32 %122, 0
  br i1 %123, label %124, label %129

124:                                              ; preds = %120
  %125 = getelementptr inbounds %struct.vpx_codec_alg_priv, %struct.vpx_codec_alg_priv* %0, i64 0, i32 2, i32 3
  %126 = load i32, i32* %125, align 4
  %127 = icmp eq i32 %126, 0
  br i1 %127, label %128, label %129

128:                                              ; preds = %124
  store volatile i32 5, i32* %7, align 4
  br label %129

129:                                              ; preds = %124, %120, %128
  %130 = load i32, i32* %53, align 4
  %131 = icmp eq i32 %130, %54
  br i1 %131, label %132, label %135

132:                                              ; preds = %129
  %133 = load i32, i32* %51, align 4
  %134 = icmp eq i32 %133, %52
  br i1 %134, label %136, label %135

135:                                              ; preds = %132, %129
  store volatile i32 1, i32* %8, align 4
  br label %136

136:                                              ; preds = %132, %135
  %137 = load volatile i32, i32* %7, align 4
  %138 = icmp eq i32 %137, 0
  br i1 %138, label %139, label %167

139:                                              ; preds = %136
  %140 = getelementptr inbounds %struct.vpx_codec_alg_priv, %struct.vpx_codec_alg_priv* %0, i64 0, i32 4
  %141 = load i32, i32* %140, align 8
  %142 = icmp eq i32 %141, 0
  br i1 %142, label %167, label %143

143:                                              ; preds = %139
  %144 = getelementptr inbounds %struct.vpx_codec_alg_priv, %struct.vpx_codec_alg_priv* %0, i64 0, i32 11
  %145 = getelementptr inbounds %struct.frame_buffers, %struct.frame_buffers* %144, i64 0, i32 0, i64 0
  %146 = load %struct.VP8D_COMP*, %struct.VP8D_COMP** %145, align 8
  %147 = getelementptr inbounds %struct.VP8D_COMP, %struct.VP8D_COMP* %146, i64 0, i32 2, i32 0, i32 4, i64 0
  %148 = call i32 @_setjmp(%struct.__jmp_buf_tag* %147) #7
  %149 = icmp eq i32 %148, 0
  br i1 %149, label %153, label %150

150:                                              ; preds = %143
  %151 = call i32 @vp8_remove_decoder_instances(%struct.frame_buffers* %144) #6
  %152 = bitcast %struct.frame_buffers* %144 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %152, i8 0, i64 256, i1 false)
  call void @vpx_clear_system_state() #6
  br label %373

153:                                              ; preds = %143
  %154 = getelementptr inbounds %struct.VP8D_COMP, %struct.VP8D_COMP* %146, i64 0, i32 2, i32 0, i32 3
  store i32 1, i32* %154, align 8
  %155 = getelementptr inbounds %struct.vpx_codec_alg_priv, %struct.vpx_codec_alg_priv* %0, i64 0, i32 1, i32 0
  %156 = load i32, i32* %155, align 8
  %157 = getelementptr inbounds %struct.VP8D_COMP, %struct.VP8D_COMP* %146, i64 0, i32 7
  store i32 %156, i32* %157, align 4
  call void @vp8_decoder_create_threads(%struct.VP8D_COMP* %146) #6
  %158 = getelementptr inbounds %struct.VP8D_COMP, %struct.VP8D_COMP* %146, i64 0, i32 6, i32 0
  %159 = load atomic volatile i32, i32* %158 acquire, align 4
  %160 = icmp eq i32 %159, 0
  br i1 %160, label %166, label %161

161:                                              ; preds = %153
  %162 = getelementptr inbounds %struct.VP8D_COMP, %struct.VP8D_COMP* %146, i64 0, i32 2, i32 5
  %163 = load i32, i32* %162, align 16
  %164 = getelementptr inbounds %struct.VP8D_COMP, %struct.VP8D_COMP* %146, i64 0, i32 2, i32 27
  %165 = load i32, i32* %164, align 4
  call void @vp8mt_alloc_temp_buffers(%struct.VP8D_COMP* %146, i32 %163, i32 %165) #6
  br label %166

166:                                              ; preds = %153, %161
  store i32 0, i32* %140, align 8
  store i32 0, i32* %154, align 8
  br label %167

167:                                              ; preds = %166, %139, %136
  %168 = load volatile i32, i32* %7, align 4
  %169 = icmp eq i32 %168, 0
  br i1 %169, label %170, label %206

170:                                              ; preds = %167
  %171 = load i32, i32* %121, align 4
  %172 = icmp eq i32 %171, 0
  br i1 %172, label %173, label %209

173:                                              ; preds = %170
  %174 = bitcast %struct.VP8D_CONFIG* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %174) #6
  %175 = getelementptr inbounds %struct.VP8D_CONFIG, %struct.VP8D_CONFIG* %9, i64 0, i32 0
  %176 = getelementptr inbounds %struct.VP8D_CONFIG, %struct.VP8D_CONFIG* %9, i64 0, i32 1
  %177 = getelementptr inbounds %struct.VP8D_CONFIG, %struct.VP8D_CONFIG* %9, i64 0, i32 2
  %178 = getelementptr inbounds %struct.VP8D_CONFIG, %struct.VP8D_CONFIG* %9, i64 0, i32 3
  %179 = getelementptr inbounds %struct.VP8D_CONFIG, %struct.VP8D_CONFIG* %9, i64 0, i32 4
  %180 = getelementptr inbounds %struct.VP8D_CONFIG, %struct.VP8D_CONFIG* %9, i64 0, i32 5
  %181 = load i32, i32* %51, align 4
  store i32 %181, i32* %175, align 4
  %182 = load i32, i32* %53, align 4
  store i32 %182, i32* %176, align 4
  store i32 9, i32* %177, align 4
  store i32 0, i32* %178, align 4
  %183 = getelementptr inbounds %struct.vpx_codec_alg_priv, %struct.vpx_codec_alg_priv* %0, i64 0, i32 1, i32 0
  %184 = load i32, i32* %183, align 8
  store i32 %184, i32* %179, align 4
  %185 = getelementptr inbounds %struct.vpx_codec_alg_priv, %struct.vpx_codec_alg_priv* %0, i64 0, i32 0, i32 1
  %186 = load i64, i64* %185, align 8
  %187 = trunc i64 %186 to i32
  %188 = and i32 %187, 131072
  store i32 %188, i32* %180, align 4
  %189 = getelementptr inbounds %struct.vpx_codec_alg_priv, %struct.vpx_codec_alg_priv* %0, i64 0, i32 5
  %190 = load i32, i32* %189, align 4
  %191 = icmp ne i32 %190, 0
  %192 = and i64 %186, 65536
  %193 = icmp eq i64 %192, 0
  %194 = or i1 %193, %191
  br i1 %194, label %199, label %195

195:                                              ; preds = %173
  %196 = getelementptr inbounds %struct.vpx_codec_alg_priv, %struct.vpx_codec_alg_priv* %0, i64 0, i32 6, i32 0
  store i32 11, i32* %196, align 8
  %197 = getelementptr inbounds %struct.vpx_codec_alg_priv, %struct.vpx_codec_alg_priv* %0, i64 0, i32 6, i32 1
  store i32 4, i32* %197, align 4
  %198 = getelementptr inbounds %struct.vpx_codec_alg_priv, %struct.vpx_codec_alg_priv* %0, i64 0, i32 6, i32 2
  store i32 0, i32* %198, align 8
  br label %199

199:                                              ; preds = %173, %195
  %200 = getelementptr inbounds %struct.vpx_codec_alg_priv, %struct.vpx_codec_alg_priv* %0, i64 0, i32 11
  %201 = call i32 @vp8_create_decoder_instances(%struct.frame_buffers* %200, %struct.VP8D_CONFIG* nonnull %9) #6
  store volatile i32 %201, i32* %7, align 4
  %202 = load volatile i32, i32* %7, align 4
  %203 = icmp eq i32 %202, 0
  br i1 %203, label %204, label %205

204:                                              ; preds = %199
  store i32 1, i32* %121, align 4
  br label %205

205:                                              ; preds = %204, %199
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %174) #6
  br label %206

206:                                              ; preds = %167, %205
  %207 = load i32, i32* %121, align 4
  %208 = icmp eq i32 %207, 0
  br i1 %208, label %221, label %209

209:                                              ; preds = %170, %206
  %210 = bitcast void (i8*, i8*, i8*, i32)** %55 to i64*
  %211 = load i64, i64* %210, align 8
  %212 = getelementptr inbounds %struct.vpx_codec_alg_priv, %struct.vpx_codec_alg_priv* %0, i64 0, i32 11, i32 0, i64 0
  %213 = load %struct.VP8D_COMP*, %struct.VP8D_COMP** %212, align 8
  %214 = getelementptr inbounds %struct.VP8D_COMP, %struct.VP8D_COMP* %213, i64 0, i32 36
  %215 = bitcast void (i8*, i8*, i8*, i32)** %214 to i64*
  store i64 %211, i64* %215, align 8
  %216 = bitcast i8** %57 to i64*
  %217 = load i64, i64* %216, align 8
  %218 = load %struct.VP8D_COMP*, %struct.VP8D_COMP** %212, align 8
  %219 = getelementptr inbounds %struct.VP8D_COMP, %struct.VP8D_COMP* %218, i64 0, i32 37
  %220 = bitcast i8** %219 to i64*
  store i64 %217, i64* %220, align 16
  br label %221

221:                                              ; preds = %206, %209
  %222 = load volatile i32, i32* %7, align 4
  %223 = icmp eq i32 %222, 0
  br i1 %223, label %224, label %371

224:                                              ; preds = %221
  %225 = getelementptr inbounds %struct.vpx_codec_alg_priv, %struct.vpx_codec_alg_priv* %0, i64 0, i32 11, i32 0, i64 0
  %226 = load %struct.VP8D_COMP*, %struct.VP8D_COMP** %225, align 8
  %227 = getelementptr inbounds %struct.VP8D_COMP, %struct.VP8D_COMP* %226, i64 0, i32 2
  %228 = load volatile i32, i32* %8, align 4
  %229 = icmp eq i32 %228, 0
  br i1 %229, label %312, label %230

230:                                              ; preds = %224
  %231 = getelementptr inbounds %struct.VP8D_COMP, %struct.VP8D_COMP* %226, i64 0, i32 0
  %232 = load i32, i32* %51, align 4
  %233 = getelementptr inbounds %struct.VP8D_COMP, %struct.VP8D_COMP* %226, i64 0, i32 2, i32 5
  store i32 %232, i32* %233, align 16
  %234 = load i32, i32* %53, align 4
  %235 = getelementptr inbounds %struct.VP8D_COMP, %struct.VP8D_COMP* %226, i64 0, i32 2, i32 6
  store i32 %234, i32* %235, align 4
  %236 = getelementptr inbounds %struct.VP8D_COMP, %struct.VP8D_COMP* %226, i64 0, i32 2, i32 27
  %237 = load i32, i32* %236, align 4
  %238 = getelementptr inbounds %struct.VP8Common, %struct.VP8Common* %227, i64 0, i32 0
  %239 = getelementptr inbounds %struct.VP8D_COMP, %struct.VP8D_COMP* %226, i64 0, i32 2, i32 0, i32 4, i64 0
  %240 = call i32 @_setjmp(%struct.__jmp_buf_tag* %239) #7
  %241 = icmp eq i32 %240, 0
  %242 = getelementptr inbounds %struct.VP8D_COMP, %struct.VP8D_COMP* %226, i64 0, i32 2, i32 0, i32 3
  br i1 %241, label %243, label %311

243:                                              ; preds = %230
  store i32 1, i32* %242, align 8
  %244 = load i32, i32* %233, align 16
  %245 = icmp slt i32 %244, 1
  br i1 %245, label %246, label %247

246:                                              ; preds = %243
  store i32 %52, i32* %233, align 16
  call void (%struct.vpx_internal_error_info*, i32, i8*, ...) @vpx_internal_error(%struct.vpx_internal_error_info* %238, i32 7, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.1, i64 0, i64 0)) #6
  br label %247

247:                                              ; preds = %246, %243
  %248 = load i32, i32* %235, align 4
  %249 = icmp slt i32 %248, 1
  br i1 %249, label %250, label %252

250:                                              ; preds = %247
  store i32 %54, i32* %235, align 4
  call void (%struct.vpx_internal_error_info*, i32, i8*, ...) @vpx_internal_error(%struct.vpx_internal_error_info* %238, i32 7, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.2, i64 0, i64 0)) #6
  %251 = load i32, i32* %235, align 4
  br label %252

252:                                              ; preds = %250, %247
  %253 = phi i32 [ %251, %250 ], [ %248, %247 ]
  %254 = load i32, i32* %233, align 16
  %255 = call i32 @vp8_alloc_frame_buffers(%struct.VP8Common* %227, i32 %254, i32 %253) #6
  %256 = icmp eq i32 %255, 0
  br i1 %256, label %258, label %257

257:                                              ; preds = %252
  call void (%struct.vpx_internal_error_info*, i32, i8*, ...) @vpx_internal_error(%struct.vpx_internal_error_info* %238, i32 2, i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str.3, i64 0, i64 0)) #6
  br label %258

258:                                              ; preds = %252, %257
  %259 = getelementptr inbounds %struct.VP8D_COMP, %struct.VP8D_COMP* %226, i64 0, i32 0, i32 11
  %260 = getelementptr inbounds %struct.VP8D_COMP, %struct.VP8D_COMP* %226, i64 0, i32 2, i32 14
  %261 = load i32, i32* %260, align 4
  %262 = sext i32 %261 to i64
  %263 = getelementptr inbounds %struct.VP8D_COMP, %struct.VP8D_COMP* %226, i64 0, i32 2, i32 11, i64 %262
  %264 = bitcast %struct.yv12_buffer_config* %259 to i8*
  %265 = bitcast %struct.yv12_buffer_config* %263 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 32 %264, i8* align 16 %265, i64 160, i1 false)
  %266 = getelementptr inbounds %struct.VP8D_COMP, %struct.VP8D_COMP* %226, i64 0, i32 0, i32 12
  %267 = getelementptr inbounds %struct.VP8D_COMP, %struct.VP8D_COMP* %226, i64 0, i32 2, i32 13
  %268 = load i32, i32* %267, align 16
  %269 = sext i32 %268 to i64
  %270 = getelementptr inbounds %struct.VP8D_COMP, %struct.VP8D_COMP* %226, i64 0, i32 2, i32 11, i64 %269
  %271 = bitcast %struct.yv12_buffer_config* %266 to i8*
  %272 = bitcast %struct.yv12_buffer_config* %270 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 32 %271, i8* align 16 %272, i64 160, i1 false)
  %273 = getelementptr inbounds %struct.VP8D_COMP, %struct.VP8D_COMP* %226, i64 0, i32 10
  %274 = load i32, i32* %273, align 16
  %275 = icmp sgt i32 %274, 0
  br i1 %275, label %276, label %303

276:                                              ; preds = %258
  %277 = getelementptr inbounds %struct.VP8D_COMP, %struct.VP8D_COMP* %226, i64 0, i32 20
  %278 = load %struct.MB_ROW_DEC*, %struct.MB_ROW_DEC** %277, align 32
  %279 = getelementptr inbounds %struct.MB_ROW_DEC, %struct.MB_ROW_DEC* %278, i64 0, i32 0, i32 12
  %280 = sext i32 %268 to i64
  %281 = getelementptr inbounds %struct.VP8D_COMP, %struct.VP8D_COMP* %226, i64 0, i32 2, i32 11, i64 %280
  %282 = bitcast %struct.yv12_buffer_config* %279 to i8*
  %283 = bitcast %struct.yv12_buffer_config* %281 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 32 %282, i8* align 16 %283, i64 160, i1 false)
  %284 = load %struct.MB_ROW_DEC*, %struct.MB_ROW_DEC** %277, align 32
  %285 = getelementptr inbounds %struct.MB_ROW_DEC, %struct.MB_ROW_DEC* %284, i64 0, i32 0
  call void @vp8_build_block_doffsets(%struct.macroblockd* %285) #6
  %286 = load i32, i32* %273, align 16
  %287 = icmp sgt i32 %286, 1
  br i1 %287, label %288, label %303

288:                                              ; preds = %276, %288
  %289 = phi i64 [ %299, %288 ], [ 1, %276 ]
  %290 = load i32, i32* %267, align 16
  %291 = load %struct.MB_ROW_DEC*, %struct.MB_ROW_DEC** %277, align 32
  %292 = getelementptr inbounds %struct.MB_ROW_DEC, %struct.MB_ROW_DEC* %291, i64 %289, i32 0, i32 12
  %293 = sext i32 %290 to i64
  %294 = getelementptr inbounds %struct.VP8D_COMP, %struct.VP8D_COMP* %226, i64 0, i32 2, i32 11, i64 %293
  %295 = bitcast %struct.yv12_buffer_config* %292 to i8*
  %296 = bitcast %struct.yv12_buffer_config* %294 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 32 %295, i8* align 16 %296, i64 160, i1 false)
  %297 = load %struct.MB_ROW_DEC*, %struct.MB_ROW_DEC** %277, align 32
  %298 = getelementptr inbounds %struct.MB_ROW_DEC, %struct.MB_ROW_DEC* %297, i64 %289, i32 0
  call void @vp8_build_block_doffsets(%struct.macroblockd* %298) #6
  %299 = add nuw nsw i64 %289, 1
  %300 = load i32, i32* %273, align 16
  %301 = sext i32 %300 to i64
  %302 = icmp slt i64 %299, %301
  br i1 %302, label %288, label %303

303:                                              ; preds = %288, %276, %258
  call void @vp8_build_block_doffsets(%struct.macroblockd* %231) #6
  %304 = getelementptr inbounds %struct.VP8D_COMP, %struct.VP8D_COMP* %226, i64 0, i32 6, i32 0
  %305 = load atomic volatile i32, i32* %304 acquire, align 4
  %306 = icmp eq i32 %305, 0
  br i1 %306, label %309, label %307

307:                                              ; preds = %303
  %308 = load i32, i32* %233, align 16
  call void @vp8mt_alloc_temp_buffers(%struct.VP8D_COMP* %226, i32 %308, i32 %237) #6
  br label %309

309:                                              ; preds = %307, %303
  store i32 0, i32* %242, align 8
  %310 = getelementptr inbounds %struct.VP8D_COMP, %struct.VP8D_COMP* %226, i64 0, i32 2, i32 12, i64 0
  store i32 0, i32* %310, align 16
  br label %312

311:                                              ; preds = %230
  store i32 0, i32* %242, align 8
  store i32 0, i32* %51, align 4
  store i32 0, i32* %53, align 4
  call void @vpx_clear_system_state() #6
  br label %373

312:                                              ; preds = %309, %224
  %313 = getelementptr inbounds %struct.VP8D_COMP, %struct.VP8D_COMP* %226, i64 0, i32 2, i32 0, i32 4, i64 0
  %314 = call i32 @_setjmp(%struct.__jmp_buf_tag* %313) #7
  %315 = icmp eq i32 %314, 0
  br i1 %315, label %349, label %316

316:                                              ; preds = %312
  call void @vpx_clear_system_state() #6
  %317 = getelementptr inbounds %struct.VP8D_COMP, %struct.VP8D_COMP* %226, i64 0, i32 2, i32 14
  %318 = load i32, i32* %317, align 4
  %319 = sext i32 %318 to i64
  %320 = getelementptr inbounds %struct.VP8D_COMP, %struct.VP8D_COMP* %226, i64 0, i32 2, i32 11, i64 %319, i32 28
  store i32 1, i32* %320, align 4
  %321 = getelementptr inbounds %struct.VP8D_COMP, %struct.VP8D_COMP* %226, i64 0, i32 2, i32 13
  %322 = load i32, i32* %321, align 16
  %323 = sext i32 %322 to i64
  %324 = getelementptr inbounds %struct.VP8D_COMP, %struct.VP8D_COMP* %226, i64 0, i32 2, i32 12, i64 %323
  %325 = load i32, i32* %324, align 4
  %326 = icmp sgt i32 %325, 0
  br i1 %326, label %327, label %329

327:                                              ; preds = %316
  %328 = add nsw i32 %325, -1
  store i32 %328, i32* %324, align 4
  br label %329

329:                                              ; preds = %327, %316
  %330 = getelementptr inbounds %struct.VP8D_COMP, %struct.VP8D_COMP* %226, i64 0, i32 2, i32 0, i32 3
  store i32 0, i32* %330, align 8
  %331 = getelementptr inbounds %struct.VP8D_COMP, %struct.VP8D_COMP* %226, i64 0, i32 38
  %332 = load i32, i32* %331, align 8
  %333 = icmp eq i32 %332, 0
  br i1 %333, label %336, label %334

334:                                              ; preds = %329
  store i32 0, i32* %51, align 4
  store i32 0, i32* %53, align 4
  %335 = getelementptr inbounds %struct.vpx_codec_alg_priv, %struct.vpx_codec_alg_priv* %0, i64 0, i32 4
  store i32 1, i32* %335, align 8
  br label %336

336:                                              ; preds = %329, %334
  %337 = getelementptr inbounds %struct.VP8Common, %struct.VP8Common* %227, i64 0, i32 0, i32 0
  %338 = load i32, i32* %337, align 8
  %339 = icmp eq i32 %338, 0
  br i1 %339, label %347, label %340

340:                                              ; preds = %336
  %341 = getelementptr inbounds %struct.VP8D_COMP, %struct.VP8D_COMP* %226, i64 0, i32 2, i32 0, i32 1
  %342 = load i32, i32* %341, align 4
  %343 = icmp eq i32 %342, 0
  %344 = getelementptr inbounds %struct.VP8D_COMP, %struct.VP8D_COMP* %226, i64 0, i32 2, i32 0, i32 2, i64 0
  %345 = select i1 %343, i8* null, i8* %344
  %346 = getelementptr inbounds %struct.vpx_codec_alg_priv, %struct.vpx_codec_alg_priv* %0, i64 0, i32 0, i32 0
  store i8* %345, i8** %346, align 8
  br label %347

347:                                              ; preds = %336, %340
  store volatile i32 %338, i32* %7, align 4
  %348 = load volatile i32, i32* %7, align 4
  br label %373

349:                                              ; preds = %312
  %350 = getelementptr inbounds %struct.VP8D_COMP, %struct.VP8D_COMP* %226, i64 0, i32 2, i32 0, i32 3
  store i32 1, i32* %350, align 8
  %351 = getelementptr inbounds %struct.VP8D_COMP, %struct.VP8D_COMP* %226, i64 0, i32 5
  %352 = bitcast %struct.FRAGMENT_DATA* %351 to i8*
  %353 = bitcast %struct.FRAGMENT_DATA* %12 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %352, i8* align 8 %353, i64 120, i1 false)
  %354 = getelementptr inbounds %struct.VP8D_COMP, %struct.VP8D_COMP* %226, i64 0, i32 38
  store i32 0, i32* %354, align 8
  %355 = getelementptr inbounds %struct.vpx_codec_alg_priv, %struct.vpx_codec_alg_priv* %0, i64 0, i32 12
  store i8* %3, i8** %355, align 8
  %356 = call i32 @vp8dx_receive_compressed_data(%struct.VP8D_COMP* %226, i64 %4) #6
  %357 = icmp eq i32 %356, 0
  br i1 %357, label %370, label %358

358:                                              ; preds = %349
  %359 = getelementptr inbounds %struct.VP8Common, %struct.VP8Common* %227, i64 0, i32 0, i32 0
  %360 = load i32, i32* %359, align 8
  %361 = icmp eq i32 %360, 0
  br i1 %361, label %369, label %362

362:                                              ; preds = %358
  %363 = getelementptr inbounds %struct.VP8D_COMP, %struct.VP8D_COMP* %226, i64 0, i32 2, i32 0, i32 1
  %364 = load i32, i32* %363, align 4
  %365 = icmp eq i32 %364, 0
  %366 = getelementptr inbounds %struct.VP8D_COMP, %struct.VP8D_COMP* %226, i64 0, i32 2, i32 0, i32 2, i64 0
  %367 = select i1 %365, i8* null, i8* %366
  %368 = getelementptr inbounds %struct.vpx_codec_alg_priv, %struct.vpx_codec_alg_priv* %0, i64 0, i32 0, i32 0
  store i8* %367, i8** %368, align 8
  br label %369

369:                                              ; preds = %358, %362
  store volatile i32 %360, i32* %7, align 4
  br label %370

370:                                              ; preds = %369, %349
  store i32 0, i32* %20, align 4
  br label %371

371:                                              ; preds = %370, %221
  %372 = load volatile i32, i32* %7, align 4
  br label %373

373:                                              ; preds = %311, %347, %150, %5, %371, %46
  %374 = phi i32 [ %47, %46 ], [ %372, %371 ], [ 0, %5 ], [ 1, %150 ], [ -1, %311 ], [ %348, %347 ]
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %11)
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %10)
  ret i32 %374
}

; Function Attrs: nounwind ssp uwtable
define internal %struct.vpx_image* @vp8_get_frame(%struct.vpx_codec_alg_priv*, i8** nocapture) #1 {
  %3 = alloca %struct.yv12_buffer_config, align 8
  %4 = alloca i64, align 8
  %5 = alloca i64, align 8
  %6 = alloca %struct.vp8_ppflags_t, align 4
  %7 = load i8*, i8** %1, align 8
  %8 = icmp eq i8* %7, null
  br i1 %8, label %9, label %86

9:                                                ; preds = %2
  %10 = getelementptr inbounds %struct.vpx_codec_alg_priv, %struct.vpx_codec_alg_priv* %0, i64 0, i32 11, i32 0, i64 0
  %11 = load %struct.VP8D_COMP*, %struct.VP8D_COMP** %10, align 8
  %12 = icmp eq %struct.VP8D_COMP* %11, null
  br i1 %12, label %86, label %13

13:                                               ; preds = %9
  %14 = bitcast %struct.yv12_buffer_config* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 160, i8* nonnull %14) #6
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %14, i8 -86, i64 160, i1 false)
  %15 = bitcast i64* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %15) #6
  store i64 0, i64* %4, align 8
  %16 = bitcast i64* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %16) #6
  store i64 0, i64* %5, align 8
  %17 = bitcast %struct.vp8_ppflags_t* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 28, i8* nonnull %17) #6
  call void @llvm.memset.p0i8.i64(i8* nonnull align 4 %17, i8 0, i64 28, i1 false)
  %18 = getelementptr inbounds %struct.vpx_codec_alg_priv, %struct.vpx_codec_alg_priv* %0, i64 0, i32 0, i32 1
  %19 = load i64, i64* %18, align 8
  %20 = and i64 %19, 65536
  %21 = icmp eq i64 %20, 0
  br i1 %21, label %32, label %22

22:                                               ; preds = %13
  %23 = getelementptr inbounds %struct.vp8_ppflags_t, %struct.vp8_ppflags_t* %6, i64 0, i32 0
  %24 = getelementptr inbounds %struct.vp8_ppflags_t, %struct.vp8_ppflags_t* %6, i64 0, i32 2
  %25 = getelementptr inbounds %struct.vp8_ppflags_t, %struct.vp8_ppflags_t* %6, i64 0, i32 1
  %26 = getelementptr inbounds %struct.vpx_codec_alg_priv, %struct.vpx_codec_alg_priv* %0, i64 0, i32 6, i32 0
  %27 = load i32, i32* %26, align 8
  store i32 %27, i32* %23, align 4
  %28 = getelementptr inbounds %struct.vpx_codec_alg_priv, %struct.vpx_codec_alg_priv* %0, i64 0, i32 6, i32 1
  %29 = load i32, i32* %28, align 4
  store i32 %29, i32* %25, align 4
  %30 = getelementptr inbounds %struct.vpx_codec_alg_priv, %struct.vpx_codec_alg_priv* %0, i64 0, i32 6, i32 2
  %31 = load i32, i32* %30, align 8
  store i32 %31, i32* %24, align 4
  br label %32

32:                                               ; preds = %13, %22
  %33 = call i32 @vp8dx_get_raw_frame(%struct.VP8D_COMP* nonnull %11, %struct.yv12_buffer_config* nonnull %3, i64* nonnull %4, i64* nonnull %5, %struct.vp8_ppflags_t* nonnull %6) #6
  %34 = icmp eq i32 %33, 0
  br i1 %34, label %35, label %84

35:                                               ; preds = %32
  %36 = getelementptr inbounds %struct.vpx_codec_alg_priv, %struct.vpx_codec_alg_priv* %0, i64 0, i32 9
  %37 = getelementptr inbounds %struct.vpx_codec_alg_priv, %struct.vpx_codec_alg_priv* %0, i64 0, i32 12
  %38 = bitcast i8** %37 to i64*
  %39 = load i64, i64* %38, align 8
  %40 = getelementptr inbounds %struct.vpx_image, %struct.vpx_image* %36, i64 0, i32 0
  store i32 258, i32* %40, align 8
  %41 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %3, i64 0, i32 4
  %42 = load i32, i32* %41, align 8
  %43 = getelementptr inbounds %struct.vpx_codec_alg_priv, %struct.vpx_codec_alg_priv* %0, i64 0, i32 9, i32 3
  store i32 %42, i32* %43, align 4
  %44 = bitcast %struct.yv12_buffer_config* %3 to <2 x i32>*
  %45 = load <2 x i32>, <2 x i32>* %44, align 8
  %46 = shufflevector <2 x i32> %45, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 0, i32 1>
  %47 = extractelement <2 x i32> %45, i32 1
  %48 = add nsw i32 %47, 79
  %49 = and i32 %48, -16
  %50 = getelementptr inbounds %struct.vpx_codec_alg_priv, %struct.vpx_codec_alg_priv* %0, i64 0, i32 9, i32 4
  store i32 %49, i32* %50, align 8
  %51 = getelementptr inbounds %struct.vpx_codec_alg_priv, %struct.vpx_codec_alg_priv* %0, i64 0, i32 9, i32 6
  %52 = bitcast i32* %51 to <4 x i32>*
  store <4 x i32> %46, <4 x i32>* %52, align 8
  %53 = getelementptr inbounds %struct.vpx_codec_alg_priv, %struct.vpx_codec_alg_priv* %0, i64 0, i32 9, i32 10
  store i32 1, i32* %53, align 8
  %54 = getelementptr inbounds %struct.vpx_codec_alg_priv, %struct.vpx_codec_alg_priv* %0, i64 0, i32 9, i32 11
  store i32 1, i32* %54, align 4
  %55 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %3, i64 0, i32 13
  %56 = getelementptr inbounds %struct.vpx_codec_alg_priv, %struct.vpx_codec_alg_priv* %0, i64 0, i32 9, i32 12
  %57 = bitcast i8** %55 to <2 x i64>*
  %58 = load <2 x i64>, <2 x i64>* %57, align 8
  %59 = bitcast [4 x i8*]* %56 to <2 x i64>*
  store <2 x i64> %58, <2 x i64>* %59, align 8
  %60 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %3, i64 0, i32 15
  %61 = bitcast i8** %60 to i64*
  %62 = load i64, i64* %61, align 8
  %63 = getelementptr inbounds %struct.vpx_codec_alg_priv, %struct.vpx_codec_alg_priv* %0, i64 0, i32 9, i32 12, i64 2
  %64 = bitcast i8** %63 to i64*
  store i64 %62, i64* %64, align 8
  %65 = getelementptr inbounds %struct.vpx_codec_alg_priv, %struct.vpx_codec_alg_priv* %0, i64 0, i32 9, i32 12, i64 3
  store i8* null, i8** %65, align 8
  %66 = getelementptr inbounds %struct.vpx_codec_alg_priv, %struct.vpx_codec_alg_priv* %0, i64 0, i32 9, i32 13, i64 0
  store i32 %42, i32* %66, align 8
  %67 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %3, i64 0, i32 9
  %68 = load i32, i32* %67, align 4
  %69 = getelementptr inbounds %struct.vpx_codec_alg_priv, %struct.vpx_codec_alg_priv* %0, i64 0, i32 9, i32 13, i64 1
  store i32 %68, i32* %69, align 4
  %70 = getelementptr inbounds %struct.vpx_codec_alg_priv, %struct.vpx_codec_alg_priv* %0, i64 0, i32 9, i32 13, i64 2
  store i32 %68, i32* %70, align 8
  %71 = getelementptr inbounds %struct.vpx_codec_alg_priv, %struct.vpx_codec_alg_priv* %0, i64 0, i32 9, i32 13, i64 3
  store i32 %42, i32* %71, align 4
  %72 = getelementptr inbounds %struct.vpx_codec_alg_priv, %struct.vpx_codec_alg_priv* %0, i64 0, i32 9, i32 5
  store i32 8, i32* %72, align 4
  %73 = getelementptr inbounds %struct.vpx_codec_alg_priv, %struct.vpx_codec_alg_priv* %0, i64 0, i32 9, i32 14
  store i32 12, i32* %73, align 8
  %74 = getelementptr inbounds %struct.vpx_codec_alg_priv, %struct.vpx_codec_alg_priv* %0, i64 0, i32 9, i32 15
  %75 = bitcast i8** %74 to i64*
  store i64 %39, i64* %75, align 8
  %76 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %3, i64 0, i32 17
  %77 = bitcast i8** %76 to i64*
  %78 = load i64, i64* %77, align 8
  %79 = getelementptr inbounds %struct.vpx_codec_alg_priv, %struct.vpx_codec_alg_priv* %0, i64 0, i32 9, i32 16
  %80 = bitcast i8** %79 to i64*
  store i64 %78, i64* %80, align 8
  %81 = getelementptr inbounds %struct.vpx_codec_alg_priv, %struct.vpx_codec_alg_priv* %0, i64 0, i32 9, i32 17
  store i32 0, i32* %81, align 8
  %82 = getelementptr inbounds %struct.vpx_codec_alg_priv, %struct.vpx_codec_alg_priv* %0, i64 0, i32 9, i32 18
  store i32 0, i32* %82, align 4
  %83 = bitcast i8** %1 to %struct.vpx_image**
  store %struct.vpx_image* %36, %struct.vpx_image** %83, align 8
  br label %84

84:                                               ; preds = %35, %32
  %85 = phi %struct.vpx_image* [ %36, %35 ], [ null, %32 ]
  call void @llvm.lifetime.end.p0i8(i64 28, i8* nonnull %17) #6
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %16) #6
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %15) #6
  call void @llvm.lifetime.end.p0i8(i64 160, i8* nonnull %14) #6
  br label %86

86:                                               ; preds = %9, %2, %84
  %87 = phi %struct.vpx_image* [ null, %2 ], [ %85, %84 ], [ null, %9 ]
  ret %struct.vpx_image* %87
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #2

declare void @vp8_rtcd() local_unnamed_addr #3

declare void @vpx_dsp_rtcd() local_unnamed_addr #3

declare void @vpx_scale_rtcd() local_unnamed_addr #3

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #2

declare i8* @vpx_calloc(i64, i64) local_unnamed_addr #3

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #2

declare i32 @vp8_remove_decoder_instances(%struct.frame_buffers*) local_unnamed_addr #3

declare void @vpx_free(i8*) local_unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define internal i32 @vp8_set_reference(%struct.vpx_codec_alg_priv* nocapture readonly, %struct.__va_list_tag* nocapture) #1 {
  %3 = alloca %struct.yv12_buffer_config, align 16
  %4 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %1, i64 0, i32 0
  %5 = load i32, i32* %4, align 8
  %6 = icmp ult i32 %5, 41
  br i1 %6, label %7, label %13

7:                                                ; preds = %2
  %8 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %1, i64 0, i32 3
  %9 = load i8*, i8** %8, align 8
  %10 = sext i32 %5 to i64
  %11 = getelementptr i8, i8* %9, i64 %10
  %12 = add nuw nsw i32 %5, 8
  store i32 %12, i32* %4, align 8
  br label %17

13:                                               ; preds = %2
  %14 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %1, i64 0, i32 2
  %15 = load i8*, i8** %14, align 8
  %16 = getelementptr i8, i8* %15, i64 8
  store i8* %16, i8** %14, align 8
  br label %17

17:                                               ; preds = %13, %7
  %18 = phi i8* [ %11, %7 ], [ %15, %13 ]
  %19 = bitcast i8* %18 to %struct.vpx_ref_frame**
  %20 = load %struct.vpx_ref_frame*, %struct.vpx_ref_frame** %19, align 8
  %21 = icmp eq %struct.vpx_ref_frame* %20, null
  br i1 %21, label %61, label %22

22:                                               ; preds = %17
  %23 = bitcast %struct.yv12_buffer_config* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 160, i8* nonnull %23) #6
  %24 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %3, i64 0, i32 8
  %25 = bitcast i32* %24 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %25, i8 -86, i64 128, i1 false)
  %26 = getelementptr inbounds %struct.vpx_ref_frame, %struct.vpx_ref_frame* %20, i64 0, i32 1, i32 6
  %27 = bitcast i32* %26 to <2 x i32>*
  %28 = load <2 x i32>, <2 x i32>* %27, align 8
  %29 = shufflevector <2 x i32> %28, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 0, i32 1>
  %30 = add <2 x i32> %28, <i32 1, i32 1>
  %31 = lshr <2 x i32> %30, <i32 1, i32 1>
  %32 = shufflevector <2 x i32> %31, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 0, i32 1>
  %33 = getelementptr inbounds %struct.vpx_ref_frame, %struct.vpx_ref_frame* %20, i64 0, i32 1, i32 12
  %34 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %3, i64 0, i32 13
  %35 = bitcast [4 x i8*]* %33 to <2 x i64>*
  %36 = load <2 x i64>, <2 x i64>* %35, align 8
  %37 = bitcast i8** %34 to <2 x i64>*
  store <2 x i64> %36, <2 x i64>* %37, align 8
  %38 = getelementptr inbounds %struct.vpx_ref_frame, %struct.vpx_ref_frame* %20, i64 0, i32 1, i32 12, i64 2
  %39 = bitcast i8** %38 to i64*
  %40 = load i64, i64* %39, align 8
  %41 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %3, i64 0, i32 15
  %42 = bitcast i8** %41 to i64*
  store i64 %40, i64* %42, align 8
  %43 = bitcast %struct.yv12_buffer_config* %3 to <4 x i32>*
  store <4 x i32> %29, <4 x i32>* %43, align 16
  %44 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %3, i64 0, i32 5
  %45 = bitcast i32* %44 to <4 x i32>*
  store <4 x i32> %32, <4 x i32>* %45, align 4
  %46 = getelementptr inbounds %struct.vpx_ref_frame, %struct.vpx_ref_frame* %20, i64 0, i32 1, i32 13, i64 0
  %47 = load i32, i32* %46, align 8
  %48 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %3, i64 0, i32 4
  store i32 %47, i32* %48, align 16
  %49 = getelementptr inbounds %struct.vpx_ref_frame, %struct.vpx_ref_frame* %20, i64 0, i32 1, i32 13, i64 1
  %50 = load i32, i32* %49, align 4
  %51 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %3, i64 0, i32 9
  store i32 %50, i32* %51, align 4
  %52 = load i32, i32* %26, align 8
  %53 = sub i32 %47, %52
  %54 = lshr i32 %53, 1
  %55 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %3, i64 0, i32 19
  store i32 %54, i32* %55, align 8
  %56 = getelementptr inbounds %struct.vpx_codec_alg_priv, %struct.vpx_codec_alg_priv* %0, i64 0, i32 11, i32 0, i64 0
  %57 = load %struct.VP8D_COMP*, %struct.VP8D_COMP** %56, align 8
  %58 = getelementptr inbounds %struct.vpx_ref_frame, %struct.vpx_ref_frame* %20, i64 0, i32 0
  %59 = load i32, i32* %58, align 8
  %60 = call i32 @vp8dx_set_reference(%struct.VP8D_COMP* %57, i32 %59, %struct.yv12_buffer_config* nonnull %3) #6
  call void @llvm.lifetime.end.p0i8(i64 160, i8* nonnull %23) #6
  br label %61

61:                                               ; preds = %17, %22
  %62 = phi i32 [ %60, %22 ], [ 8, %17 ]
  ret i32 %62
}

; Function Attrs: nounwind ssp uwtable
define internal i32 @vp8_get_reference(%struct.vpx_codec_alg_priv* nocapture readonly, %struct.__va_list_tag* nocapture) #1 {
  %3 = alloca %struct.yv12_buffer_config, align 16
  %4 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %1, i64 0, i32 0
  %5 = load i32, i32* %4, align 8
  %6 = icmp ult i32 %5, 41
  br i1 %6, label %7, label %13

7:                                                ; preds = %2
  %8 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %1, i64 0, i32 3
  %9 = load i8*, i8** %8, align 8
  %10 = sext i32 %5 to i64
  %11 = getelementptr i8, i8* %9, i64 %10
  %12 = add nuw nsw i32 %5, 8
  store i32 %12, i32* %4, align 8
  br label %17

13:                                               ; preds = %2
  %14 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %1, i64 0, i32 2
  %15 = load i8*, i8** %14, align 8
  %16 = getelementptr i8, i8* %15, i64 8
  store i8* %16, i8** %14, align 8
  br label %17

17:                                               ; preds = %13, %7
  %18 = phi i8* [ %11, %7 ], [ %15, %13 ]
  %19 = bitcast i8* %18 to %struct.vpx_ref_frame**
  %20 = load %struct.vpx_ref_frame*, %struct.vpx_ref_frame** %19, align 8
  %21 = icmp eq %struct.vpx_ref_frame* %20, null
  br i1 %21, label %61, label %22

22:                                               ; preds = %17
  %23 = bitcast %struct.yv12_buffer_config* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 160, i8* nonnull %23) #6
  %24 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %3, i64 0, i32 8
  %25 = bitcast i32* %24 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %25, i8 -86, i64 128, i1 false)
  %26 = getelementptr inbounds %struct.vpx_ref_frame, %struct.vpx_ref_frame* %20, i64 0, i32 1, i32 6
  %27 = bitcast i32* %26 to <2 x i32>*
  %28 = load <2 x i32>, <2 x i32>* %27, align 8
  %29 = shufflevector <2 x i32> %28, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 0, i32 1>
  %30 = add <2 x i32> %28, <i32 1, i32 1>
  %31 = lshr <2 x i32> %30, <i32 1, i32 1>
  %32 = shufflevector <2 x i32> %31, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 0, i32 1>
  %33 = getelementptr inbounds %struct.vpx_ref_frame, %struct.vpx_ref_frame* %20, i64 0, i32 1, i32 12
  %34 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %3, i64 0, i32 13
  %35 = bitcast [4 x i8*]* %33 to <2 x i64>*
  %36 = load <2 x i64>, <2 x i64>* %35, align 8
  %37 = bitcast i8** %34 to <2 x i64>*
  store <2 x i64> %36, <2 x i64>* %37, align 8
  %38 = getelementptr inbounds %struct.vpx_ref_frame, %struct.vpx_ref_frame* %20, i64 0, i32 1, i32 12, i64 2
  %39 = bitcast i8** %38 to i64*
  %40 = load i64, i64* %39, align 8
  %41 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %3, i64 0, i32 15
  %42 = bitcast i8** %41 to i64*
  store i64 %40, i64* %42, align 8
  %43 = bitcast %struct.yv12_buffer_config* %3 to <4 x i32>*
  store <4 x i32> %29, <4 x i32>* %43, align 16
  %44 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %3, i64 0, i32 5
  %45 = bitcast i32* %44 to <4 x i32>*
  store <4 x i32> %32, <4 x i32>* %45, align 4
  %46 = getelementptr inbounds %struct.vpx_ref_frame, %struct.vpx_ref_frame* %20, i64 0, i32 1, i32 13, i64 0
  %47 = load i32, i32* %46, align 8
  %48 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %3, i64 0, i32 4
  store i32 %47, i32* %48, align 16
  %49 = getelementptr inbounds %struct.vpx_ref_frame, %struct.vpx_ref_frame* %20, i64 0, i32 1, i32 13, i64 1
  %50 = load i32, i32* %49, align 4
  %51 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %3, i64 0, i32 9
  store i32 %50, i32* %51, align 4
  %52 = load i32, i32* %26, align 8
  %53 = sub i32 %47, %52
  %54 = lshr i32 %53, 1
  %55 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %3, i64 0, i32 19
  store i32 %54, i32* %55, align 8
  %56 = getelementptr inbounds %struct.vpx_codec_alg_priv, %struct.vpx_codec_alg_priv* %0, i64 0, i32 11, i32 0, i64 0
  %57 = load %struct.VP8D_COMP*, %struct.VP8D_COMP** %56, align 8
  %58 = getelementptr inbounds %struct.vpx_ref_frame, %struct.vpx_ref_frame* %20, i64 0, i32 0
  %59 = load i32, i32* %58, align 8
  %60 = call i32 @vp8dx_get_reference(%struct.VP8D_COMP* %57, i32 %59, %struct.yv12_buffer_config* nonnull %3) #6
  call void @llvm.lifetime.end.p0i8(i64 160, i8* nonnull %23) #6
  br label %61

61:                                               ; preds = %17, %22
  %62 = phi i32 [ %60, %22 ], [ 8, %17 ]
  ret i32 %62
}

; Function Attrs: nounwind ssp uwtable
define internal i32 @vp8_set_postproc(%struct.vpx_codec_alg_priv* nocapture, %struct.__va_list_tag* nocapture) #1 {
  %3 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %1, i64 0, i32 0
  %4 = load i32, i32* %3, align 8
  %5 = icmp ult i32 %4, 41
  br i1 %5, label %6, label %12

6:                                                ; preds = %2
  %7 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %1, i64 0, i32 3
  %8 = load i8*, i8** %7, align 8
  %9 = sext i32 %4 to i64
  %10 = getelementptr i8, i8* %8, i64 %9
  %11 = add nuw nsw i32 %4, 8
  store i32 %11, i32* %3, align 8
  br label %16

12:                                               ; preds = %2
  %13 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %1, i64 0, i32 2
  %14 = load i8*, i8** %13, align 8
  %15 = getelementptr i8, i8* %14, i64 8
  store i8* %15, i8** %13, align 8
  br label %16

16:                                               ; preds = %12, %6
  %17 = phi i8* [ %10, %6 ], [ %14, %12 ]
  %18 = bitcast i8* %17 to %struct.vp8_postproc_cfg**
  %19 = load %struct.vp8_postproc_cfg*, %struct.vp8_postproc_cfg** %18, align 8
  %20 = icmp eq %struct.vp8_postproc_cfg* %19, null
  br i1 %20, label %26, label %21

21:                                               ; preds = %16
  %22 = getelementptr inbounds %struct.vpx_codec_alg_priv, %struct.vpx_codec_alg_priv* %0, i64 0, i32 5
  store i32 1, i32* %22, align 4
  %23 = getelementptr inbounds %struct.vpx_codec_alg_priv, %struct.vpx_codec_alg_priv* %0, i64 0, i32 6
  %24 = bitcast %struct.vp8_postproc_cfg* %23 to i8*
  %25 = bitcast %struct.vp8_postproc_cfg* %19 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %24, i8* nonnull align 4 %25, i64 12, i1 false)
  br label %26

26:                                               ; preds = %16, %21
  %27 = phi i32 [ 0, %21 ], [ 8, %16 ]
  ret i32 %27
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal i32 @vp8_get_last_ref_updates(%struct.vpx_codec_alg_priv* nocapture readonly, %struct.__va_list_tag* nocapture) #4 {
  %3 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %1, i64 0, i32 0
  %4 = load i32, i32* %3, align 8
  %5 = icmp ult i32 %4, 41
  br i1 %5, label %6, label %12

6:                                                ; preds = %2
  %7 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %1, i64 0, i32 3
  %8 = load i8*, i8** %7, align 8
  %9 = sext i32 %4 to i64
  %10 = getelementptr i8, i8* %8, i64 %9
  %11 = add nuw nsw i32 %4, 8
  store i32 %11, i32* %3, align 8
  br label %16

12:                                               ; preds = %2
  %13 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %1, i64 0, i32 2
  %14 = load i8*, i8** %13, align 8
  %15 = getelementptr i8, i8* %14, i64 8
  store i8* %15, i8** %13, align 8
  br label %16

16:                                               ; preds = %12, %6
  %17 = phi i8* [ %10, %6 ], [ %14, %12 ]
  %18 = bitcast i8* %17 to i32**
  %19 = load i32*, i32** %18, align 8
  %20 = icmp eq i32* %19, null
  br i1 %20, label %36, label %21

21:                                               ; preds = %16
  %22 = getelementptr inbounds %struct.vpx_codec_alg_priv, %struct.vpx_codec_alg_priv* %0, i64 0, i32 11, i32 0, i64 0
  %23 = load %struct.VP8D_COMP*, %struct.VP8D_COMP** %22, align 8
  %24 = icmp eq %struct.VP8D_COMP* %23, null
  br i1 %24, label %36, label %25

25:                                               ; preds = %21
  %26 = getelementptr inbounds %struct.VP8D_COMP, %struct.VP8D_COMP* %23, i64 0, i32 2, i32 51
  %27 = load i32, i32* %26, align 4
  %28 = shl i32 %27, 2
  %29 = getelementptr inbounds %struct.VP8D_COMP, %struct.VP8D_COMP* %23, i64 0, i32 2, i32 50
  %30 = load i32, i32* %29, align 16
  %31 = shl i32 %30, 1
  %32 = add nsw i32 %31, %28
  %33 = getelementptr inbounds %struct.VP8D_COMP, %struct.VP8D_COMP* %23, i64 0, i32 2, i32 49
  %34 = load i32, i32* %33, align 4
  %35 = add nsw i32 %32, %34
  store i32 %35, i32* %19, align 4
  br label %36

36:                                               ; preds = %16, %25, %21
  %37 = phi i32 [ 0, %25 ], [ 7, %21 ], [ 8, %16 ]
  ret i32 %37
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal i32 @vp8_get_frame_corrupted(%struct.vpx_codec_alg_priv* nocapture readonly, %struct.__va_list_tag* nocapture) #4 {
  %3 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %1, i64 0, i32 0
  %4 = load i32, i32* %3, align 8
  %5 = icmp ult i32 %4, 41
  br i1 %5, label %6, label %12

6:                                                ; preds = %2
  %7 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %1, i64 0, i32 3
  %8 = load i8*, i8** %7, align 8
  %9 = sext i32 %4 to i64
  %10 = getelementptr i8, i8* %8, i64 %9
  %11 = add nuw nsw i32 %4, 8
  store i32 %11, i32* %3, align 8
  br label %16

12:                                               ; preds = %2
  %13 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %1, i64 0, i32 2
  %14 = load i8*, i8** %13, align 8
  %15 = getelementptr i8, i8* %14, i64 8
  store i8* %15, i8** %13, align 8
  br label %16

16:                                               ; preds = %12, %6
  %17 = phi i8* [ %10, %6 ], [ %14, %12 ]
  %18 = bitcast i8* %17 to i32**
  %19 = load i32*, i32** %18, align 8
  %20 = getelementptr inbounds %struct.vpx_codec_alg_priv, %struct.vpx_codec_alg_priv* %0, i64 0, i32 11, i32 0, i64 0
  %21 = load %struct.VP8D_COMP*, %struct.VP8D_COMP** %20, align 8
  %22 = icmp ne i32* %19, null
  %23 = icmp ne %struct.VP8D_COMP* %21, null
  %24 = and i1 %22, %23
  br i1 %24, label %25, label %32

25:                                               ; preds = %16
  %26 = getelementptr inbounds %struct.VP8D_COMP, %struct.VP8D_COMP* %21, i64 0, i32 2, i32 10
  %27 = load %struct.yv12_buffer_config*, %struct.yv12_buffer_config** %26, align 8
  %28 = icmp eq %struct.yv12_buffer_config* %27, null
  br i1 %28, label %32, label %29

29:                                               ; preds = %25
  %30 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %27, i64 0, i32 28
  %31 = load i32, i32* %30, align 4
  store i32 %31, i32* %19, align 4
  br label %32

32:                                               ; preds = %16, %29, %25
  %33 = phi i32 [ 0, %29 ], [ 1, %25 ], [ 8, %16 ]
  ret i32 %33
}

; Function Attrs: nounwind ssp uwtable
define internal i32 @vp8_get_last_ref_frame(%struct.vpx_codec_alg_priv* nocapture readonly, %struct.__va_list_tag* nocapture) #1 {
  %3 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %1, i64 0, i32 0
  %4 = load i32, i32* %3, align 8
  %5 = icmp ult i32 %4, 41
  br i1 %5, label %6, label %12

6:                                                ; preds = %2
  %7 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %1, i64 0, i32 3
  %8 = load i8*, i8** %7, align 8
  %9 = sext i32 %4 to i64
  %10 = getelementptr i8, i8* %8, i64 %9
  %11 = add nuw nsw i32 %4, 8
  store i32 %11, i32* %3, align 8
  br label %16

12:                                               ; preds = %2
  %13 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %1, i64 0, i32 2
  %14 = load i8*, i8** %13, align 8
  %15 = getelementptr i8, i8* %14, i64 8
  store i8* %15, i8** %13, align 8
  br label %16

16:                                               ; preds = %12, %6
  %17 = phi i8* [ %10, %6 ], [ %14, %12 ]
  %18 = bitcast i8* %17 to i32**
  %19 = load i32*, i32** %18, align 8
  %20 = icmp eq i32* %19, null
  br i1 %20, label %38, label %21

21:                                               ; preds = %16
  %22 = getelementptr inbounds %struct.vpx_codec_alg_priv, %struct.vpx_codec_alg_priv* %0, i64 0, i32 11, i32 0, i64 0
  %23 = load %struct.VP8D_COMP*, %struct.VP8D_COMP** %22, align 8
  %24 = icmp eq %struct.VP8D_COMP* %23, null
  br i1 %24, label %38, label %25

25:                                               ; preds = %21
  %26 = getelementptr inbounds %struct.VP8D_COMP, %struct.VP8D_COMP* %23, i64 0, i32 2
  %27 = tail call i32 @vp8dx_references_buffer(%struct.VP8Common* %26, i32 3) #6
  %28 = icmp eq i32 %27, 0
  %29 = select i1 %28, i32 0, i32 4
  %30 = tail call i32 @vp8dx_references_buffer(%struct.VP8Common* %26, i32 2) #6
  %31 = icmp eq i32 %30, 0
  %32 = select i1 %31, i32 0, i32 2
  %33 = or i32 %32, %29
  %34 = tail call i32 @vp8dx_references_buffer(%struct.VP8Common* %26, i32 1) #6
  %35 = icmp ne i32 %34, 0
  %36 = zext i1 %35 to i32
  %37 = or i32 %33, %36
  store i32 %37, i32* %19, align 4
  br label %38

38:                                               ; preds = %16, %25, %21
  %39 = phi i32 [ 0, %25 ], [ 7, %21 ], [ 8, %16 ]
  ret i32 %39
}

; Function Attrs: nounwind ssp uwtable
define internal i32 @vp8_get_quantizer(%struct.vpx_codec_alg_priv* nocapture readonly, %struct.__va_list_tag* nocapture) #1 {
  %3 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %1, i64 0, i32 0
  %4 = load i32, i32* %3, align 8
  %5 = icmp ult i32 %4, 41
  br i1 %5, label %6, label %12

6:                                                ; preds = %2
  %7 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %1, i64 0, i32 3
  %8 = load i8*, i8** %7, align 8
  %9 = sext i32 %4 to i64
  %10 = getelementptr i8, i8* %8, i64 %9
  %11 = add nuw nsw i32 %4, 8
  store i32 %11, i32* %3, align 8
  br label %16

12:                                               ; preds = %2
  %13 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %1, i64 0, i32 2
  %14 = load i8*, i8** %13, align 8
  %15 = getelementptr i8, i8* %14, i64 8
  store i8* %15, i8** %13, align 8
  br label %16

16:                                               ; preds = %12, %6
  %17 = phi i8* [ %10, %6 ], [ %14, %12 ]
  %18 = bitcast i8* %17 to i32**
  %19 = load i32*, i32** %18, align 8
  %20 = getelementptr inbounds %struct.vpx_codec_alg_priv, %struct.vpx_codec_alg_priv* %0, i64 0, i32 11, i32 0, i64 0
  %21 = load %struct.VP8D_COMP*, %struct.VP8D_COMP** %20, align 8
  %22 = icmp eq i32* %19, null
  br i1 %22, label %27, label %23

23:                                               ; preds = %16
  %24 = icmp eq %struct.VP8D_COMP* %21, null
  br i1 %24, label %27, label %25

25:                                               ; preds = %23
  %26 = tail call i32 @vp8dx_get_quantizer(%struct.VP8D_COMP* nonnull %21) #6
  store i32 %26, i32* %19, align 4
  br label %27

27:                                               ; preds = %23, %16, %25
  %28 = phi i32 [ 0, %25 ], [ 8, %16 ], [ 7, %23 ]
  ret i32 %28
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal i32 @vp8_set_decryptor(%struct.vpx_codec_alg_priv* nocapture, %struct.__va_list_tag* nocapture) #4 {
  %3 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %1, i64 0, i32 0
  %4 = load i32, i32* %3, align 8
  %5 = icmp ult i32 %4, 41
  br i1 %5, label %6, label %12

6:                                                ; preds = %2
  %7 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %1, i64 0, i32 3
  %8 = load i8*, i8** %7, align 8
  %9 = sext i32 %4 to i64
  %10 = getelementptr i8, i8* %8, i64 %9
  %11 = add nuw nsw i32 %4, 8
  store i32 %11, i32* %3, align 8
  br label %16

12:                                               ; preds = %2
  %13 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %1, i64 0, i32 2
  %14 = load i8*, i8** %13, align 8
  %15 = getelementptr i8, i8* %14, i64 8
  store i8* %15, i8** %13, align 8
  br label %16

16:                                               ; preds = %12, %6
  %17 = phi i8* [ %10, %6 ], [ %14, %12 ]
  %18 = bitcast i8* %17 to %struct.vpx_decrypt_init**
  %19 = load %struct.vpx_decrypt_init*, %struct.vpx_decrypt_init** %18, align 8
  %20 = icmp eq %struct.vpx_decrypt_init* %19, null
  br i1 %20, label %31, label %21

21:                                               ; preds = %16
  %22 = bitcast %struct.vpx_decrypt_init* %19 to i64*
  %23 = load i64, i64* %22, align 8
  %24 = getelementptr inbounds %struct.vpx_codec_alg_priv, %struct.vpx_codec_alg_priv* %0, i64 0, i32 7
  %25 = bitcast void (i8*, i8*, i8*, i32)** %24 to i64*
  store i64 %23, i64* %25, align 8
  %26 = getelementptr inbounds %struct.vpx_decrypt_init, %struct.vpx_decrypt_init* %19, i64 0, i32 1
  %27 = bitcast i8** %26 to i64*
  %28 = load i64, i64* %27, align 8
  %29 = getelementptr inbounds %struct.vpx_codec_alg_priv, %struct.vpx_codec_alg_priv* %0, i64 0, i32 8
  %30 = bitcast i8** %29 to i64*
  store i64 %28, i64* %30, align 8
  br label %34

31:                                               ; preds = %16
  %32 = getelementptr inbounds %struct.vpx_codec_alg_priv, %struct.vpx_codec_alg_priv* %0, i64 0, i32 7
  %33 = bitcast void (i8*, i8*, i8*, i32)** %32 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %33, i8 0, i64 16, i1 false)
  br label %34

34:                                               ; preds = %31, %21
  ret i32 0
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #2

declare i32 @vp8dx_set_reference(%struct.VP8D_COMP*, i32, %struct.yv12_buffer_config*) local_unnamed_addr #3

declare i32 @vp8dx_get_reference(%struct.VP8D_COMP*, i32, %struct.yv12_buffer_config*) local_unnamed_addr #3

declare i32 @vp8dx_references_buffer(%struct.VP8Common*, i32) local_unnamed_addr #3

declare i32 @vp8dx_get_quantizer(%struct.VP8D_COMP*) local_unnamed_addr #3

; Function Attrs: nounwind returns_twice
declare i32 @_setjmp(%struct.__jmp_buf_tag*) local_unnamed_addr #5

declare void @vpx_clear_system_state() local_unnamed_addr #3

declare void @vp8_decoder_create_threads(%struct.VP8D_COMP*) local_unnamed_addr #3

declare void @vp8mt_alloc_temp_buffers(%struct.VP8D_COMP*, i32, i32) local_unnamed_addr #3

declare i32 @vp8_create_decoder_instances(%struct.frame_buffers*, %struct.VP8D_CONFIG*) local_unnamed_addr #3

declare void @vpx_internal_error(%struct.vpx_internal_error_info*, i32, i8*, ...) local_unnamed_addr #3

declare i32 @vp8_alloc_frame_buffers(%struct.VP8Common*, i32, i32) local_unnamed_addr #3

declare void @vp8_build_block_doffsets(%struct.macroblockd*) local_unnamed_addr #3

declare i32 @vp8dx_receive_compressed_data(%struct.VP8D_COMP*, i64) local_unnamed_addr #3

declare i32 @vp8dx_get_raw_frame(%struct.VP8D_COMP*, %struct.yv12_buffer_config*, i64*, i64*, %struct.vp8_ppflags_t*) local_unnamed_addr #3

attributes #0 = { norecurse nounwind readnone ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind }
attributes #3 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nofree norecurse nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind returns_twice "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nounwind }
attributes #7 = { nounwind returns_twice }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
