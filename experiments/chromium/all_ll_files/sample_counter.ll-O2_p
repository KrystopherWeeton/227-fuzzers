; ModuleID = '../../third_party/webrtc/rtc_base/numerics/sample_counter.cc'
source_filename = "../../third_party/webrtc/rtc_base/numerics/sample_counter.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%"class.rtc::SampleCounter" = type { i64, i64, %"class.absl::optional" }
%"class.absl::optional" = type { %"class.absl::optional_internal::optional_data" }
%"class.absl::optional_internal::optional_data" = type { %"class.absl::optional_internal::optional_data_base" }
%"class.absl::optional_internal::optional_data_base" = type { %"class.absl::optional_internal::optional_data_dtor_base" }
%"class.absl::optional_internal::optional_data_dtor_base" = type { i8, %union.anon }
%union.anon = type { i32 }
%"class.rtc::SampleCounterWithVariance" = type { %"class.rtc::SampleCounter", i64 }

@_ZN3rtc13SampleCounterC1Ev = hidden unnamed_addr alias void (%"class.rtc::SampleCounter"*), void (%"class.rtc::SampleCounter"*)* @_ZN3rtc13SampleCounterC2Ev
@_ZN3rtc13SampleCounterD1Ev = hidden unnamed_addr alias void (%"class.rtc::SampleCounter"*), void (%"class.rtc::SampleCounter"*)* @_ZN3rtc13SampleCounterD2Ev
@_ZN3rtc25SampleCounterWithVarianceC1Ev = hidden unnamed_addr alias void (%"class.rtc::SampleCounterWithVariance"*), void (%"class.rtc::SampleCounterWithVariance"*)* @_ZN3rtc25SampleCounterWithVarianceC2Ev
@_ZN3rtc25SampleCounterWithVarianceD2Ev = hidden unnamed_addr alias void (%"class.rtc::SampleCounterWithVariance"*), bitcast (void (%"class.rtc::SampleCounter"*)* @_ZN3rtc13SampleCounterD2Ev to void (%"class.rtc::SampleCounterWithVariance"*)*)
@_ZN3rtc25SampleCounterWithVarianceD1Ev = hidden unnamed_addr alias void (%"class.rtc::SampleCounterWithVariance"*), bitcast (void (%"class.rtc::SampleCounter"*)* @_ZN3rtc13SampleCounterD2Ev to void (%"class.rtc::SampleCounterWithVariance"*)*)

; Function Attrs: nofree norecurse nounwind ssp uwtable writeonly
define hidden void @_ZN3rtc13SampleCounterC2Ev(%"class.rtc::SampleCounter"* nocapture) unnamed_addr #0 align 2 {
  %2 = bitcast %"class.rtc::SampleCounter"* %0 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %2, i8 0, i64 17, i1 false)
  ret void
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden void @_ZN3rtc13SampleCounterD2Ev(%"class.rtc::SampleCounter"* nocapture) unnamed_addr #1 align 2 {
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN3rtc13SampleCounter3AddEi(%"class.rtc::SampleCounter"* nocapture, i32) local_unnamed_addr #2 align 2 {
  %3 = sext i32 %1 to i64
  %4 = bitcast %"class.rtc::SampleCounter"* %0 to <2 x i64>*
  %5 = load <2 x i64>, <2 x i64>* %4, align 8
  %6 = insertelement <2 x i64> <i64 undef, i64 1>, i64 %3, i32 0
  %7 = add nsw <2 x i64> %5, %6
  %8 = bitcast %"class.rtc::SampleCounter"* %0 to <2 x i64>*
  store <2 x i64> %7, <2 x i64>* %8, align 8
  %9 = getelementptr inbounds %"class.rtc::SampleCounter", %"class.rtc::SampleCounter"* %0, i64 0, i32 2
  %10 = getelementptr inbounds %"class.absl::optional", %"class.absl::optional"* %9, i64 0, i32 0, i32 0, i32 0, i32 0
  %11 = load i8, i8* %10, align 4, !range !2
  %12 = icmp eq i8 %11, 0
  br i1 %12, label %17, label %13

13:                                               ; preds = %2
  %14 = getelementptr inbounds %"class.rtc::SampleCounter", %"class.rtc::SampleCounter"* %0, i64 0, i32 2, i32 0, i32 0, i32 0, i32 1, i32 0
  %15 = load i32, i32* %14, align 4
  %16 = icmp slt i32 %15, %1
  br i1 %16, label %17, label %22

17:                                               ; preds = %2, %13
  %18 = bitcast %"class.absl::optional"* %9 to i64*
  %19 = zext i32 %1 to i64
  %20 = shl nuw i64 %19, 32
  %21 = or i64 %20, 1
  store i64 %21, i64* %18, align 8
  br label %22

22:                                               ; preds = %17, %13
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN3rtc13SampleCounter3AddERKS0_(%"class.rtc::SampleCounter"* nocapture, %"class.rtc::SampleCounter"* nocapture readonly dereferenceable(24)) local_unnamed_addr #2 align 2 {
  %3 = getelementptr inbounds %"class.rtc::SampleCounter", %"class.rtc::SampleCounter"* %1, i64 0, i32 0
  %4 = load i64, i64* %3, align 8
  %5 = getelementptr inbounds %"class.rtc::SampleCounter", %"class.rtc::SampleCounter"* %0, i64 0, i32 0
  %6 = load i64, i64* %5, align 8
  %7 = add nsw i64 %6, %4
  store i64 %7, i64* %5, align 8
  %8 = getelementptr inbounds %"class.rtc::SampleCounter", %"class.rtc::SampleCounter"* %1, i64 0, i32 1
  %9 = load i64, i64* %8, align 8
  %10 = getelementptr inbounds %"class.rtc::SampleCounter", %"class.rtc::SampleCounter"* %0, i64 0, i32 1
  %11 = load i64, i64* %10, align 8
  %12 = add nsw i64 %11, %9
  store i64 %12, i64* %10, align 8
  %13 = getelementptr inbounds %"class.rtc::SampleCounter", %"class.rtc::SampleCounter"* %1, i64 0, i32 2
  %14 = getelementptr inbounds %"class.absl::optional", %"class.absl::optional"* %13, i64 0, i32 0, i32 0, i32 0, i32 0
  %15 = load i8, i8* %14, align 4, !range !2
  %16 = icmp eq i8 %15, 0
  br i1 %16, label %32, label %17

17:                                               ; preds = %2
  %18 = getelementptr inbounds %"class.rtc::SampleCounter", %"class.rtc::SampleCounter"* %0, i64 0, i32 2
  %19 = getelementptr inbounds %"class.absl::optional", %"class.absl::optional"* %18, i64 0, i32 0, i32 0, i32 0, i32 0
  %20 = load i8, i8* %19, align 4, !range !2
  %21 = icmp eq i8 %20, 0
  br i1 %21, label %28, label %22

22:                                               ; preds = %17
  %23 = getelementptr inbounds %"class.rtc::SampleCounter", %"class.rtc::SampleCounter"* %0, i64 0, i32 2, i32 0, i32 0, i32 0, i32 1, i32 0
  %24 = load i32, i32* %23, align 4
  %25 = getelementptr inbounds %"class.rtc::SampleCounter", %"class.rtc::SampleCounter"* %1, i64 0, i32 2, i32 0, i32 0, i32 0, i32 1, i32 0
  %26 = load i32, i32* %25, align 4
  %27 = icmp slt i32 %24, %26
  br i1 %27, label %28, label %32

28:                                               ; preds = %17, %22
  %29 = bitcast %"class.absl::optional"* %13 to i64*
  %30 = bitcast %"class.absl::optional"* %18 to i64*
  %31 = load i64, i64* %29, align 4
  store i64 %31, i64* %30, align 8
  br label %32

32:                                               ; preds = %2, %28, %22
  ret void
}

; Function Attrs: nounwind readonly ssp uwtable
define hidden i64 @_ZNK3rtc13SampleCounter3AvgEl(%"class.rtc::SampleCounter"* nocapture readonly, i64) local_unnamed_addr #3 align 2 {
  %3 = getelementptr inbounds %"class.rtc::SampleCounter", %"class.rtc::SampleCounter"* %0, i64 0, i32 1
  %4 = load i64, i64* %3, align 8
  %5 = icmp slt i64 %4, %1
  br i1 %5, label %11, label %6

6:                                                ; preds = %2
  %7 = getelementptr inbounds %"class.rtc::SampleCounter", %"class.rtc::SampleCounter"* %0, i64 0, i32 0
  %8 = load i64, i64* %7, align 8
  %9 = sdiv i64 %8, %4
  %10 = shl i64 %9, 32
  br label %11

11:                                               ; preds = %2, %6
  %12 = phi i64 [ 1, %6 ], [ 0, %2 ]
  %13 = phi i64 [ %10, %6 ], [ 0, %2 ]
  %14 = or i64 %13, %12
  ret i64 %14
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden i64 @_ZNK3rtc13SampleCounter3MaxEv(%"class.rtc::SampleCounter"* nocapture readonly) local_unnamed_addr #4 align 2 {
  %2 = getelementptr inbounds %"class.rtc::SampleCounter", %"class.rtc::SampleCounter"* %0, i64 0, i32 2
  %3 = bitcast %"class.absl::optional"* %2 to i64*
  %4 = load i64, i64* %3, align 8
  ret i64 %4
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden { i8, i64 } @_ZNK3rtc13SampleCounter3SumEl(%"class.rtc::SampleCounter"* nocapture readonly, i64) local_unnamed_addr #4 align 2 {
  %3 = getelementptr inbounds %"class.rtc::SampleCounter", %"class.rtc::SampleCounter"* %0, i64 0, i32 1
  %4 = load i64, i64* %3, align 8
  %5 = icmp slt i64 %4, %1
  br i1 %5, label %9, label %6

6:                                                ; preds = %2
  %7 = getelementptr inbounds %"class.rtc::SampleCounter", %"class.rtc::SampleCounter"* %0, i64 0, i32 0
  %8 = load i64, i64* %7, align 8
  br label %9

9:                                                ; preds = %2, %6
  %10 = phi i64 [ %8, %6 ], [ undef, %2 ]
  %11 = phi i8 [ 1, %6 ], [ 0, %2 ]
  %12 = insertvalue { i8, i64 } undef, i8 %11, 0
  %13 = insertvalue { i8, i64 } %12, i64 %10, 1
  ret { i8, i64 } %13
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden i64 @_ZNK3rtc13SampleCounter10NumSamplesEv(%"class.rtc::SampleCounter"* nocapture readonly) local_unnamed_addr #4 align 2 {
  %2 = getelementptr inbounds %"class.rtc::SampleCounter", %"class.rtc::SampleCounter"* %0, i64 0, i32 1
  %3 = load i64, i64* %2, align 8
  ret i64 %3
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN3rtc13SampleCounter5ResetEv(%"class.rtc::SampleCounter"* nocapture) local_unnamed_addr #2 align 2 {
  %2 = bitcast %"class.rtc::SampleCounter"* %0 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %2, i8 0, i64 17, i1 false)
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN3rtc25SampleCounterWithVarianceC2Ev(%"class.rtc::SampleCounterWithVariance"* nocapture) unnamed_addr #2 align 2 {
  %2 = bitcast %"class.rtc::SampleCounterWithVariance"* %0 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %2, i8 0, i64 17, i1 false) #7
  %3 = getelementptr inbounds %"class.rtc::SampleCounterWithVariance", %"class.rtc::SampleCounterWithVariance"* %0, i64 0, i32 1
  store i64 0, i64* %3, align 8
  ret void
}

; Function Attrs: nounwind readonly ssp uwtable
define hidden { i8, i64 } @_ZNK3rtc25SampleCounterWithVariance8VarianceEl(%"class.rtc::SampleCounterWithVariance"* nocapture readonly, i64) local_unnamed_addr #3 align 2 {
  %3 = getelementptr inbounds %"class.rtc::SampleCounterWithVariance", %"class.rtc::SampleCounterWithVariance"* %0, i64 0, i32 0, i32 1
  %4 = load i64, i64* %3, align 8
  %5 = icmp slt i64 %4, %1
  br i1 %5, label %15, label %6

6:                                                ; preds = %2
  %7 = getelementptr inbounds %"class.rtc::SampleCounterWithVariance", %"class.rtc::SampleCounterWithVariance"* %0, i64 0, i32 0, i32 0
  %8 = load i64, i64* %7, align 8
  %9 = sdiv i64 %8, %4
  %10 = getelementptr inbounds %"class.rtc::SampleCounterWithVariance", %"class.rtc::SampleCounterWithVariance"* %0, i64 0, i32 1
  %11 = load i64, i64* %10, align 8
  %12 = sdiv i64 %11, %4
  %13 = mul nsw i64 %9, %9
  %14 = sub nsw i64 %12, %13
  br label %15

15:                                               ; preds = %2, %6
  %16 = phi i8 [ 1, %6 ], [ 0, %2 ]
  %17 = phi i64 [ %14, %6 ], [ undef, %2 ]
  %18 = insertvalue { i8, i64 } undef, i8 %16, 0
  %19 = insertvalue { i8, i64 } %18, i64 %17, 1
  ret { i8, i64 } %19
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @_ZN3rtc25SampleCounterWithVariance3AddEi(%"class.rtc::SampleCounterWithVariance"* nocapture, i32) local_unnamed_addr #5 align 2 {
  %3 = sext i32 %1 to i64
  %4 = bitcast %"class.rtc::SampleCounterWithVariance"* %0 to <2 x i64>*
  %5 = load <2 x i64>, <2 x i64>* %4, align 8
  %6 = insertelement <2 x i64> <i64 undef, i64 1>, i64 %3, i32 0
  %7 = add nsw <2 x i64> %5, %6
  %8 = bitcast %"class.rtc::SampleCounterWithVariance"* %0 to <2 x i64>*
  store <2 x i64> %7, <2 x i64>* %8, align 8
  %9 = getelementptr inbounds %"class.rtc::SampleCounterWithVariance", %"class.rtc::SampleCounterWithVariance"* %0, i64 0, i32 0, i32 2
  %10 = getelementptr inbounds %"class.absl::optional", %"class.absl::optional"* %9, i64 0, i32 0, i32 0, i32 0, i32 0
  %11 = load i8, i8* %10, align 4, !range !2
  %12 = icmp eq i8 %11, 0
  br i1 %12, label %17, label %13

13:                                               ; preds = %2
  %14 = getelementptr inbounds %"class.rtc::SampleCounterWithVariance", %"class.rtc::SampleCounterWithVariance"* %0, i64 0, i32 0, i32 2, i32 0, i32 0, i32 0, i32 1, i32 0
  %15 = load i32, i32* %14, align 4
  %16 = icmp slt i32 %15, %1
  br i1 %16, label %17, label %22

17:                                               ; preds = %13, %2
  %18 = bitcast %"class.absl::optional"* %9 to i64*
  %19 = zext i32 %1 to i64
  %20 = shl nuw i64 %19, 32
  %21 = or i64 %20, 1
  store i64 %21, i64* %18, align 8
  br label %22

22:                                               ; preds = %13, %17
  %23 = mul nsw i64 %3, %3
  %24 = getelementptr inbounds %"class.rtc::SampleCounterWithVariance", %"class.rtc::SampleCounterWithVariance"* %0, i64 0, i32 1
  %25 = load i64, i64* %24, align 8
  %26 = add nsw i64 %25, %23
  store i64 %26, i64* %24, align 8
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @_ZN3rtc25SampleCounterWithVariance3AddERKS0_(%"class.rtc::SampleCounterWithVariance"* nocapture, %"class.rtc::SampleCounterWithVariance"* nocapture readonly dereferenceable(32)) local_unnamed_addr #5 align 2 {
  %3 = getelementptr inbounds %"class.rtc::SampleCounterWithVariance", %"class.rtc::SampleCounterWithVariance"* %1, i64 0, i32 0, i32 0
  %4 = load i64, i64* %3, align 8
  %5 = getelementptr inbounds %"class.rtc::SampleCounterWithVariance", %"class.rtc::SampleCounterWithVariance"* %0, i64 0, i32 0, i32 0
  %6 = load i64, i64* %5, align 8
  %7 = add nsw i64 %6, %4
  store i64 %7, i64* %5, align 8
  %8 = getelementptr inbounds %"class.rtc::SampleCounterWithVariance", %"class.rtc::SampleCounterWithVariance"* %1, i64 0, i32 0, i32 1
  %9 = load i64, i64* %8, align 8
  %10 = getelementptr inbounds %"class.rtc::SampleCounterWithVariance", %"class.rtc::SampleCounterWithVariance"* %0, i64 0, i32 0, i32 1
  %11 = load i64, i64* %10, align 8
  %12 = add nsw i64 %11, %9
  store i64 %12, i64* %10, align 8
  %13 = getelementptr inbounds %"class.rtc::SampleCounterWithVariance", %"class.rtc::SampleCounterWithVariance"* %1, i64 0, i32 0, i32 2
  %14 = getelementptr inbounds %"class.absl::optional", %"class.absl::optional"* %13, i64 0, i32 0, i32 0, i32 0, i32 0
  %15 = load i8, i8* %14, align 4, !range !2
  %16 = icmp eq i8 %15, 0
  br i1 %16, label %32, label %17

17:                                               ; preds = %2
  %18 = getelementptr inbounds %"class.rtc::SampleCounterWithVariance", %"class.rtc::SampleCounterWithVariance"* %0, i64 0, i32 0, i32 2
  %19 = getelementptr inbounds %"class.absl::optional", %"class.absl::optional"* %18, i64 0, i32 0, i32 0, i32 0, i32 0
  %20 = load i8, i8* %19, align 4, !range !2
  %21 = icmp eq i8 %20, 0
  br i1 %21, label %28, label %22

22:                                               ; preds = %17
  %23 = getelementptr inbounds %"class.rtc::SampleCounterWithVariance", %"class.rtc::SampleCounterWithVariance"* %0, i64 0, i32 0, i32 2, i32 0, i32 0, i32 0, i32 1, i32 0
  %24 = load i32, i32* %23, align 4
  %25 = getelementptr inbounds %"class.rtc::SampleCounterWithVariance", %"class.rtc::SampleCounterWithVariance"* %1, i64 0, i32 0, i32 2, i32 0, i32 0, i32 0, i32 1, i32 0
  %26 = load i32, i32* %25, align 4
  %27 = icmp slt i32 %24, %26
  br i1 %27, label %28, label %32

28:                                               ; preds = %22, %17
  %29 = bitcast %"class.absl::optional"* %13 to i64*
  %30 = bitcast %"class.absl::optional"* %18 to i64*
  %31 = load i64, i64* %29, align 4
  store i64 %31, i64* %30, align 8
  br label %32

32:                                               ; preds = %2, %22, %28
  %33 = getelementptr inbounds %"class.rtc::SampleCounterWithVariance", %"class.rtc::SampleCounterWithVariance"* %1, i64 0, i32 1
  %34 = load i64, i64* %33, align 8
  %35 = getelementptr inbounds %"class.rtc::SampleCounterWithVariance", %"class.rtc::SampleCounterWithVariance"* %0, i64 0, i32 1
  %36 = load i64, i64* %35, align 8
  %37 = add nsw i64 %36, %34
  store i64 %37, i64* %35, align 8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN3rtc25SampleCounterWithVariance5ResetEv(%"class.rtc::SampleCounterWithVariance"* nocapture) local_unnamed_addr #2 align 2 {
  %2 = bitcast %"class.rtc::SampleCounterWithVariance"* %0 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %2, i8 0, i64 17, i1 false)
  %3 = getelementptr inbounds %"class.rtc::SampleCounterWithVariance", %"class.rtc::SampleCounterWithVariance"* %0, i64 0, i32 1
  store i64 0, i64* %3, align 8
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #6

attributes #0 = { nofree norecurse nounwind ssp uwtable writeonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { norecurse nounwind readnone ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind readonly ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { norecurse nounwind readonly ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nofree norecurse nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { argmemonly nounwind }
attributes #7 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{i8 0, i8 2}
