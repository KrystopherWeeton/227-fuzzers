; ModuleID = '../../third_party/blink/renderer/modules/csspaint/document_paint_definition.cc'
source_filename = "../../third_party/blink/renderer/modules/csspaint/document_paint_definition.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"class.blink::DocumentPaintDefinition" = type { i32 (...)**, %"class.WTF::Vector", %"class.WTF::Vector.0", %"class.WTF::Vector.6", i8, i32 }
%"class.WTF::Vector" = type { %"class.WTF::VectorBuffer" }
%"class.WTF::VectorBuffer" = type { %"class.WTF::VectorBufferBase" }
%"class.WTF::VectorBufferBase" = type { i32*, i32, i32 }
%"class.WTF::Vector.0" = type { %"class.WTF::VectorBuffer.1" }
%"class.WTF::VectorBuffer.1" = type { %"class.WTF::VectorBufferBase.2" }
%"class.WTF::VectorBufferBase.2" = type { %"class.WTF::AtomicString"*, i32, i32 }
%"class.WTF::AtomicString" = type { %"class.WTF::String" }
%"class.WTF::String" = type { %class.scoped_refptr }
%class.scoped_refptr = type { %"class.WTF::StringImpl"* }
%"class.WTF::StringImpl" = type { i32, i32, %"struct.std::__1::atomic" }
%"struct.std::__1::atomic" = type { %"struct.std::__1::__atomic_base" }
%"struct.std::__1::__atomic_base" = type { %"struct.std::__1::__atomic_base.3" }
%"struct.std::__1::__atomic_base.3" = type { %"struct.std::__1::__cxx_atomic_impl" }
%"struct.std::__1::__cxx_atomic_impl" = type { %"struct.std::__1::__cxx_atomic_base_impl" }
%"struct.std::__1::__cxx_atomic_base_impl" = type { i32 }
%"class.WTF::Vector.6" = type { %"class.WTF::VectorBuffer.7" }
%"class.WTF::VectorBuffer.7" = type { %"class.WTF::VectorBufferBase.8" }
%"class.WTF::VectorBufferBase.8" = type { %"class.blink::CSSSyntaxDefinition"*, i32, i32 }
%"class.blink::CSSSyntaxDefinition" = type { %"class.WTF::Vector.9" }
%"class.WTF::Vector.9" = type { %"class.WTF::VectorBuffer.10" }
%"class.WTF::VectorBuffer.10" = type { %"class.WTF::VectorBufferBase.11" }
%"class.WTF::VectorBufferBase.11" = type { %"class.blink::CSSSyntaxComponent"*, i32, i32 }
%"class.blink::CSSSyntaxComponent" = type <{ i32, [4 x i8], %"class.WTF::String", i32, [4 x i8] }>
%"class.blink::CSSPaintDefinition" = type { %"class.blink::NameClient", %"class.blink::Member", %"class.blink::Member.207", %"class.blink::Member.209", %"class.blink::TraceWrapperV8Reference.211", i8, %"class.WTF::Vector", %"class.WTF::Vector.0", %"class.WTF::Vector.6", %"class.blink::Member.214" }
%"class.blink::NameClient" = type { i32 (...)** }
%"class.blink::Member" = type { %"class.blink::MemberBase" }
%"class.blink::MemberBase" = type { %"class.blink::ScriptState"* }
%"class.blink::ScriptState" = type { %"class.v8::Isolate"*, %"class.blink::ScopedPersistent", %class.scoped_refptr.18, %"class.blink::Member.203", %"class.blink::SelfKeepAlive", %"class.util::TokenType" }
%"class.v8::Isolate" = type { i8 }
%"class.blink::ScopedPersistent" = type { %"class.v8::Persistent" }
%"class.v8::Persistent" = type { %"class.v8::PersistentBase" }
%"class.v8::PersistentBase" = type { %"class.v8::Context"* }
%"class.v8::Context" = type { i8 }
%class.scoped_refptr.18 = type { %"class.blink::DOMWrapperWorld"* }
%"class.blink::DOMWrapperWorld" = type { %"class.WTF::RefCounted", i32, i32, %"class.blink::Persistent" }
%"class.WTF::RefCounted" = type { %"class.base::RefCounted" }
%"class.base::RefCounted" = type { %"class.base::subtle::RefCountedBase" }
%"class.base::subtle::RefCountedBase" = type { i32 }
%"class.blink::Persistent" = type { %"class.blink::PersistentBase" }
%"class.blink::PersistentBase" = type { %"class.blink::DOMDataStore"*, %"class.blink::PersistentNodePtr" }
%"class.blink::DOMDataStore" = type { i32 (...)**, i8, [7 x i8], %"class.blink::HeapHashMap" }
%"class.blink::HeapHashMap" = type { %"class.WTF::HashMap" }
%"class.WTF::HashMap" = type { %"class.WTF::HashTable" }
%"class.WTF::HashTable" = type <{ %"struct.WTF::KeyValuePair"*, i32, i32, i32, [4 x i8] }>
%"struct.WTF::KeyValuePair" = type { %"class.blink::WeakMember", %"class.blink::TraceWrapperV8Reference" }
%"class.blink::WeakMember" = type { %"class.blink::MemberBase.24" }
%"class.blink::MemberBase.24" = type { %"class.blink::ScriptWrappable"* }
%"class.blink::ScriptWrappable" = type { %"class.blink::NameClient", %"class.blink::TraceWrapperV8Reference" }
%"class.blink::TraceWrapperV8Reference" = type { %"class.v8::TracedReference" }
%"class.v8::TracedReference" = type { %"class.v8::BasicTracedReference" }
%"class.v8::BasicTracedReference" = type { %"class.v8::TracedReferenceBase" }
%"class.v8::TracedReferenceBase" = type { i64* }
%"class.blink::PersistentNodePtr" = type { %"class.blink::PersistentNode"* }
%"class.blink::PersistentNode" = type { i8*, void (%"class.blink::Visitor"*, i8*)* }
%"class.blink::Visitor" = type { i32 (...)**, %"class.blink::ThreadState"* }
%"class.blink::ThreadState" = type <{ %"class.std::__1::unique_ptr", i32, [4 x i8], %"class.std::__1::unique_ptr.158", %"class.std::__1::unique_ptr.158", i8**, i8, i8, i8, i8, i8, i8, [2 x i8], i64, i64, i32, i32, i32, [4 x i8], %"class.WTF::Deque", %"class.v8::Isolate"*, void (%"class.v8::Isolate"*, %"class.v8::EmbedderGraph"*, i8*)*, %"class.std::__1::unique_ptr.168", %"class.std::__1::unique_ptr.174", %"struct.blink::ThreadState::GCData", %"class.std::__1::unique_ptr.186", %"class.std::__1::unique_ptr.192", %"class.base::JobHandle", %"class.base::JobHandle", %"struct.std::__1::atomic.199", [7 x i8], i64, i8, [7 x i8], i64, %"class.base::TimeTicks", i8, i8, [6 x i8] }>
%"class.std::__1::unique_ptr" = type { %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %"class.blink::ThreadHeap"* }
%"class.blink::ThreadHeap" = type { %"class.blink::ThreadState"*, %"class.std::__1::unique_ptr.27", %"class.std::__1::unique_ptr.31", %"class.std::__1::unique_ptr.37", %"class.std::__1::unique_ptr.43", %"class.std::__1::unique_ptr.49", %"class.std::__1::unique_ptr.55", %"class.std::__1::unique_ptr.66", %"class.std::__1::unique_ptr.73", %"class.std::__1::unique_ptr.73", %"class.std::__1::unique_ptr.80", %"class.std::__1::unique_ptr.87", %"class.std::__1::unique_ptr.94", %"class.std::__1::unique_ptr.94", %"class.std::__1::unique_ptr.101", %"class.std::__1::unique_ptr.108", %"class.std::__1::unique_ptr.115", %"class.std::__1::unique_ptr.138", %"struct.blink::ThreadHeap::LastAllocatedRegion", [9 x %"class.blink::BaseArena"*], i64, i64 }
%"class.std::__1::unique_ptr.27" = type { %"class.std::__1::__compressed_pair.28" }
%"class.std::__1::__compressed_pair.28" = type { %"struct.std::__1::__compressed_pair_elem.29" }
%"struct.std::__1::__compressed_pair_elem.29" = type { %"class.blink::ThreadHeapStatsCollector"* }
%"class.blink::ThreadHeapStatsCollector" = type opaque
%"class.std::__1::unique_ptr.31" = type { %"class.std::__1::__compressed_pair.32" }
%"class.std::__1::__compressed_pair.32" = type { %"struct.std::__1::__compressed_pair_elem.33" }
%"struct.std::__1::__compressed_pair_elem.33" = type { %"class.blink::RegionTree"* }
%"class.blink::RegionTree" = type opaque
%"class.std::__1::unique_ptr.37" = type { %"class.std::__1::__compressed_pair.38" }
%"class.std::__1::__compressed_pair.38" = type { %"struct.std::__1::__compressed_pair_elem.39" }
%"struct.std::__1::__compressed_pair_elem.39" = type { %"class.blink::PageBloomFilter"* }
%"class.blink::PageBloomFilter" = type opaque
%"class.std::__1::unique_ptr.43" = type { %"class.std::__1::__compressed_pair.44" }
%"class.std::__1::__compressed_pair.44" = type { %"struct.std::__1::__compressed_pair_elem.45" }
%"struct.std::__1::__compressed_pair_elem.45" = type { %"class.blink::PagePool"* }
%"class.blink::PagePool" = type opaque
%"class.std::__1::unique_ptr.49" = type { %"class.std::__1::__compressed_pair.50" }
%"class.std::__1::__compressed_pair.50" = type { %"struct.std::__1::__compressed_pair_elem.51" }
%"struct.std::__1::__compressed_pair_elem.51" = type { %"class.blink::ProcessHeapReporter"* }
%"class.blink::ProcessHeapReporter" = type opaque
%"class.std::__1::unique_ptr.55" = type { %"class.std::__1::__compressed_pair.56" }
%"class.std::__1::__compressed_pair.56" = type { %"struct.std::__1::__compressed_pair_elem.57" }
%"struct.std::__1::__compressed_pair_elem.57" = type { %"class.blink::Worklist"* }
%"class.blink::Worklist" = type { [4 x %"struct.blink::Worklist<blink::TraceDescriptor, 512, 4>::PrivateSegmentHolder"], %"class.blink::Worklist<blink::TraceDescriptor, 512, 4>::GlobalPool" }
%"struct.blink::Worklist<blink::TraceDescriptor, 512, 4>::PrivateSegmentHolder" = type { %"class.blink::Worklist<blink::TraceDescriptor, 512, 4>::Segment"*, %"class.blink::Worklist<blink::TraceDescriptor, 512, 4>::Segment"*, [64 x i8] }
%"class.blink::Worklist<blink::TraceDescriptor, 512, 4>::Segment" = type { %"class.blink::Worklist<blink::TraceDescriptor, 512, 4>::Segment"*, i64, [512 x %"struct.blink::TraceDescriptor"] }
%"struct.blink::TraceDescriptor" = type { i8*, void (%"class.blink::Visitor"*, i8*)* }
%"class.blink::Worklist<blink::TraceDescriptor, 512, 4>::GlobalPool" = type { %"class.base::Lock", %"class.blink::Worklist<blink::TraceDescriptor, 512, 4>::Segment"*, %"struct.std::__1::atomic.58" }
%"class.base::Lock" = type { %"class.base::internal::LockImpl" }
%"class.base::internal::LockImpl" = type { %union.pthread_mutex_t }
%union.pthread_mutex_t = type { %struct.__pthread_mutex_s }
%struct.__pthread_mutex_s = type { i32, i32, i32, i32, i32, i16, i16, %struct.__pthread_internal_list }
%struct.__pthread_internal_list = type { %struct.__pthread_internal_list*, %struct.__pthread_internal_list* }
%"struct.std::__1::atomic.58" = type { %"struct.std::__1::__atomic_base.59" }
%"struct.std::__1::__atomic_base.59" = type { %"struct.std::__1::__atomic_base.60" }
%"struct.std::__1::__atomic_base.60" = type { %"struct.std::__1::__cxx_atomic_impl.61" }
%"struct.std::__1::__cxx_atomic_impl.61" = type { %"struct.std::__1::__cxx_atomic_base_impl.62" }
%"struct.std::__1::__cxx_atomic_base_impl.62" = type { i64 }
%"class.std::__1::unique_ptr.66" = type { %"class.std::__1::__compressed_pair.67" }
%"class.std::__1::__compressed_pair.67" = type { %"struct.std::__1::__compressed_pair_elem.68" }
%"struct.std::__1::__compressed_pair_elem.68" = type { %"class.blink::Worklist.69"* }
%"class.blink::Worklist.69" = type { [4 x %"struct.blink::Worklist<blink::HeapObjectHeader *, 64, 4>::PrivateSegmentHolder"], %"class.blink::Worklist<blink::HeapObjectHeader *, 64, 4>::GlobalPool" }
%"struct.blink::Worklist<blink::HeapObjectHeader *, 64, 4>::PrivateSegmentHolder" = type { %"class.blink::Worklist<blink::HeapObjectHeader *, 64, 4>::Segment"*, %"class.blink::Worklist<blink::HeapObjectHeader *, 64, 4>::Segment"*, [64 x i8] }
%"class.blink::Worklist<blink::HeapObjectHeader *, 64, 4>::Segment" = type opaque
%"class.blink::Worklist<blink::HeapObjectHeader *, 64, 4>::GlobalPool" = type { %"class.base::Lock", %"class.blink::Worklist<blink::HeapObjectHeader *, 64, 4>::Segment"*, %"struct.std::__1::atomic.58" }
%"class.std::__1::unique_ptr.73" = type { %"class.std::__1::__compressed_pair.74" }
%"class.std::__1::__compressed_pair.74" = type { %"struct.std::__1::__compressed_pair_elem.75" }
%"struct.std::__1::__compressed_pair_elem.75" = type { %"class.blink::Worklist.76"* }
%"class.blink::Worklist.76" = type { [4 x %"struct.blink::Worklist<const void *, 16, 4>::PrivateSegmentHolder"], %"class.blink::Worklist<const void *, 16, 4>::GlobalPool" }
%"struct.blink::Worklist<const void *, 16, 4>::PrivateSegmentHolder" = type { %"class.blink::Worklist<const void *, 16, 4>::Segment"*, %"class.blink::Worklist<const void *, 16, 4>::Segment"*, [64 x i8] }
%"class.blink::Worklist<const void *, 16, 4>::Segment" = type { %"class.blink::Worklist<const void *, 16, 4>::Segment"*, i64, [16 x i8*] }
%"class.blink::Worklist<const void *, 16, 4>::GlobalPool" = type { %"class.base::Lock", %"class.blink::Worklist<const void *, 16, 4>::Segment"*, %"struct.std::__1::atomic.58" }
%"class.std::__1::unique_ptr.80" = type { %"class.std::__1::__compressed_pair.81" }
%"class.std::__1::__compressed_pair.81" = type { %"struct.std::__1::__compressed_pair_elem.82" }
%"struct.std::__1::__compressed_pair_elem.82" = type { %"class.blink::Worklist.83"* }
%"class.blink::Worklist.83" = type { [4 x %"struct.blink::Worklist<blink::CustomCallbackItem, 64, 4>::PrivateSegmentHolder"], %"class.blink::Worklist<blink::CustomCallbackItem, 64, 4>::GlobalPool" }
%"struct.blink::Worklist<blink::CustomCallbackItem, 64, 4>::PrivateSegmentHolder" = type { %"class.blink::Worklist<blink::CustomCallbackItem, 64, 4>::Segment"*, %"class.blink::Worklist<blink::CustomCallbackItem, 64, 4>::Segment"*, [64 x i8] }
%"class.blink::Worklist<blink::CustomCallbackItem, 64, 4>::Segment" = type opaque
%"class.blink::Worklist<blink::CustomCallbackItem, 64, 4>::GlobalPool" = type { %"class.base::Lock", %"class.blink::Worklist<blink::CustomCallbackItem, 64, 4>::Segment"*, %"struct.std::__1::atomic.58" }
%"class.std::__1::unique_ptr.87" = type { %"class.std::__1::__compressed_pair.88" }
%"class.std::__1::__compressed_pair.88" = type { %"struct.std::__1::__compressed_pair_elem.89" }
%"struct.std::__1::__compressed_pair_elem.89" = type { %"class.blink::Worklist.90"* }
%"class.blink::Worklist.90" = type { [4 x %"struct.blink::Worklist<const void *const *, 256, 4>::PrivateSegmentHolder"], %"class.blink::Worklist<const void *const *, 256, 4>::GlobalPool" }
%"struct.blink::Worklist<const void *const *, 256, 4>::PrivateSegmentHolder" = type { %"class.blink::Worklist<const void *const *, 256, 4>::Segment"*, %"class.blink::Worklist<const void *const *, 256, 4>::Segment"*, [64 x i8] }
%"class.blink::Worklist<const void *const *, 256, 4>::Segment" = type opaque
%"class.blink::Worklist<const void *const *, 256, 4>::GlobalPool" = type { %"class.base::Lock", %"class.blink::Worklist<const void *const *, 256, 4>::Segment"*, %"struct.std::__1::atomic.58" }
%"class.std::__1::unique_ptr.94" = type { %"class.std::__1::__compressed_pair.95" }
%"class.std::__1::__compressed_pair.95" = type { %"struct.std::__1::__compressed_pair_elem.96" }
%"struct.std::__1::__compressed_pair_elem.96" = type { %"class.blink::Worklist.97"* }
%"class.blink::Worklist.97" = type { [4 x %"struct.blink::Worklist<blink::EphemeronPairItem, 64, 4>::PrivateSegmentHolder"], %"class.blink::Worklist<blink::EphemeronPairItem, 64, 4>::GlobalPool" }
%"struct.blink::Worklist<blink::EphemeronPairItem, 64, 4>::PrivateSegmentHolder" = type { %"class.blink::Worklist<blink::EphemeronPairItem, 64, 4>::Segment"*, %"class.blink::Worklist<blink::EphemeronPairItem, 64, 4>::Segment"*, [64 x i8] }
%"class.blink::Worklist<blink::EphemeronPairItem, 64, 4>::Segment" = type opaque
%"class.blink::Worklist<blink::EphemeronPairItem, 64, 4>::GlobalPool" = type { %"class.base::Lock", %"class.blink::Worklist<blink::EphemeronPairItem, 64, 4>::Segment"*, %"struct.std::__1::atomic.58" }
%"class.std::__1::unique_ptr.101" = type { %"class.std::__1::__compressed_pair.102" }
%"class.std::__1::__compressed_pair.102" = type { %"struct.std::__1::__compressed_pair_elem.103" }
%"struct.std::__1::__compressed_pair_elem.103" = type { %"class.blink::Worklist.104"* }
%"class.blink::Worklist.104" = type { [4 x %"struct.blink::Worklist<const blink::TraceWrapperV8Reference<v8::Value> *, 16, 4>::PrivateSegmentHolder"], %"class.blink::Worklist<const blink::TraceWrapperV8Reference<v8::Value> *, 16, 4>::GlobalPool" }
%"struct.blink::Worklist<const blink::TraceWrapperV8Reference<v8::Value> *, 16, 4>::PrivateSegmentHolder" = type { %"class.blink::Worklist<const blink::TraceWrapperV8Reference<v8::Value> *, 16, 4>::Segment"*, %"class.blink::Worklist<const blink::TraceWrapperV8Reference<v8::Value> *, 16, 4>::Segment"*, [64 x i8] }
%"class.blink::Worklist<const blink::TraceWrapperV8Reference<v8::Value> *, 16, 4>::Segment" = type opaque
%"class.blink::Worklist<const blink::TraceWrapperV8Reference<v8::Value> *, 16, 4>::GlobalPool" = type { %"class.base::Lock", %"class.blink::Worklist<const blink::TraceWrapperV8Reference<v8::Value> *, 16, 4>::Segment"*, %"struct.std::__1::atomic.58" }
%"class.std::__1::unique_ptr.108" = type { %"class.std::__1::__compressed_pair.109" }
%"class.std::__1::__compressed_pair.109" = type { %"struct.std::__1::__compressed_pair_elem.110" }
%"struct.std::__1::__compressed_pair_elem.110" = type { %"class.blink::Worklist.111"* }
%"class.blink::Worklist.111" = type { [4 x %"struct.blink::Worklist<blink::NotSafeToConcurrentlyTraceItem, 64, 4>::PrivateSegmentHolder"], %"class.blink::Worklist<blink::NotSafeToConcurrentlyTraceItem, 64, 4>::GlobalPool" }
%"struct.blink::Worklist<blink::NotSafeToConcurrentlyTraceItem, 64, 4>::PrivateSegmentHolder" = type { %"class.blink::Worklist<blink::NotSafeToConcurrentlyTraceItem, 64, 4>::Segment"*, %"class.blink::Worklist<blink::NotSafeToConcurrentlyTraceItem, 64, 4>::Segment"*, [64 x i8] }
%"class.blink::Worklist<blink::NotSafeToConcurrentlyTraceItem, 64, 4>::Segment" = type { %"class.blink::Worklist<blink::NotSafeToConcurrentlyTraceItem, 64, 4>::Segment"*, i64, [64 x %"struct.blink::NotSafeToConcurrentlyTraceItem"] }
%"struct.blink::NotSafeToConcurrentlyTraceItem" = type { %"struct.blink::TraceDescriptor", i64 }
%"class.blink::Worklist<blink::NotSafeToConcurrentlyTraceItem, 64, 4>::GlobalPool" = type { %"class.base::Lock", %"class.blink::Worklist<blink::NotSafeToConcurrentlyTraceItem, 64, 4>::Segment"*, %"struct.std::__1::atomic.58" }
%"class.std::__1::unique_ptr.115" = type { %"class.std::__1::__compressed_pair.116" }
%"class.std::__1::__compressed_pair.116" = type { %"struct.std::__1::__compressed_pair_elem.117" }
%"struct.std::__1::__compressed_pair_elem.117" = type { %"class.blink::WeakContainersWorklist"* }
%"class.blink::WeakContainersWorklist" = type { %"class.WTF::Mutex", %"class.std::__1::unordered_set" }
%"class.WTF::Mutex" = type { %"class.WTF::MutexBase" }
%"class.WTF::MutexBase" = type { %"struct.WTF::PlatformMutex" }
%"struct.WTF::PlatformMutex" = type { %union.pthread_mutex_t }
%"class.std::__1::unordered_set" = type { %"class.std::__1::__hash_table" }
%"class.std::__1::__hash_table" = type <{ %"class.std::__1::unique_ptr.118", %"class.std::__1::__compressed_pair.125", %"class.std::__1::__compressed_pair.130", %"class.std::__1::__compressed_pair.132", [4 x i8] }>
%"class.std::__1::unique_ptr.118" = type { %"class.std::__1::__compressed_pair.119" }
%"class.std::__1::__compressed_pair.119" = type { %"struct.std::__1::__compressed_pair_elem.120", %"struct.std::__1::__compressed_pair_elem.121" }
%"struct.std::__1::__compressed_pair_elem.120" = type { %"struct.std::__1::__hash_node_base"** }
%"struct.std::__1::__hash_node_base" = type { %"struct.std::__1::__hash_node_base"* }
%"struct.std::__1::__compressed_pair_elem.121" = type { %"class.std::__1::__bucket_list_deallocator" }
%"class.std::__1::__bucket_list_deallocator" = type { %"class.std::__1::__compressed_pair.122" }
%"class.std::__1::__compressed_pair.122" = type { %"struct.std::__1::__compressed_pair_elem.123" }
%"struct.std::__1::__compressed_pair_elem.123" = type { i64 }
%"class.std::__1::__compressed_pair.125" = type { %"struct.std::__1::__compressed_pair_elem.126" }
%"struct.std::__1::__compressed_pair_elem.126" = type { %"struct.std::__1::__hash_node_base" }
%"class.std::__1::__compressed_pair.130" = type { %"struct.std::__1::__compressed_pair_elem.123" }
%"class.std::__1::__compressed_pair.132" = type { %"struct.std::__1::__compressed_pair_elem.133" }
%"struct.std::__1::__compressed_pair_elem.133" = type { float }
%"class.std::__1::unique_ptr.138" = type { %"class.std::__1::__compressed_pair.139" }
%"class.std::__1::__compressed_pair.139" = type { %"struct.std::__1::__compressed_pair_elem.140" }
%"struct.std::__1::__compressed_pair_elem.140" = type { %"class.blink::HeapCompact"* }
%"class.blink::HeapCompact" = type <{ %"class.blink::ThreadHeap"*, %"class.std::__1::unique_ptr.141", i8, [7 x i8], i64, i64, i32, [4 x i8], i64, i8, [7 x i8] }>
%"class.std::__1::unique_ptr.141" = type { %"class.std::__1::__compressed_pair.142" }
%"class.std::__1::__compressed_pair.142" = type { %"struct.std::__1::__compressed_pair_elem.143" }
%"struct.std::__1::__compressed_pair_elem.143" = type { %"class.blink::HeapCompact::MovableObjectFixups"* }
%"class.blink::HeapCompact::MovableObjectFixups" = type opaque
%"struct.blink::ThreadHeap::LastAllocatedRegion" = type { i8*, i64 }
%"class.blink::BaseArena" = type <{ i32 (...)**, %"class.blink::PageStackThreadSafe", %"class.blink::PageStackThreadSafe", %"class.blink::PageStackThreadSafe", %"class.blink::PageStackThreadSafe", %"class.blink::ThreadState"*, i32, [4 x i8] }>
%"class.blink::PageStackThreadSafe" = type { %"class.blink::PageStack", %"class.WTF::Mutex" }
%"class.blink::PageStack" = type { %"class.WTF::Vector.150" }
%"class.WTF::Vector.150" = type { %"class.WTF::VectorBuffer.151" }
%"class.WTF::VectorBuffer.151" = type { %"class.WTF::VectorBufferBase.152" }
%"class.WTF::VectorBufferBase.152" = type { %"class.blink::BasePage"**, i32, i32 }
%"class.blink::BasePage" = type <{ i32 (...)**, %"class.blink::PageMemory"*, %"class.blink::BaseArena"*, %"class.blink::ThreadState"*, i64, i8, i8, i8, [5 x i8] }>
%"class.blink::PageMemory" = type opaque
%"class.std::__1::unique_ptr.158" = type { %"class.std::__1::__compressed_pair.159" }
%"class.std::__1::__compressed_pair.159" = type { %"struct.std::__1::__compressed_pair_elem.160" }
%"struct.std::__1::__compressed_pair_elem.160" = type { %"class.blink::PersistentRegion"* }
%"class.blink::PersistentRegion" = type { %"class.blink::PersistentRegionBase" }
%"class.blink::PersistentRegionBase" = type { %"class.blink::PersistentNode"*, %"struct.blink::PersistentNodeSlots"* }
%"struct.blink::PersistentNodeSlots" = type { %"struct.blink::PersistentNodeSlots"*, [256 x %"class.blink::PersistentNode"] }
%"class.WTF::Deque" = type { %"class.WTF::Deque<std::__1::pair<void *, bool (*)(const blink::LivenessBroker &, void *)>, 0, WTF::PartitionAllocator>::BackingBuffer", i32, i32 }
%"class.WTF::Deque<std::__1::pair<void *, bool (*)(const blink::LivenessBroker &, void *)>, 0, WTF::PartitionAllocator>::BackingBuffer" = type { %"class.WTF::VectorBuffer.166" }
%"class.WTF::VectorBuffer.166" = type { %"class.WTF::VectorBufferBase.167" }
%"class.WTF::VectorBufferBase.167" = type { %"struct.std::__1::pair"*, i32, i32 }
%"struct.std::__1::pair" = type { i8*, i1 (%"class.blink::LivenessBroker"*, i8*)* }
%"class.blink::LivenessBroker" = type { i8 }
%"class.v8::EmbedderGraph" = type opaque
%"class.std::__1::unique_ptr.168" = type { %"class.std::__1::__compressed_pair.169" }
%"class.std::__1::__compressed_pair.169" = type { %"struct.std::__1::__compressed_pair_elem.170" }
%"struct.std::__1::__compressed_pair_elem.170" = type { %"class.blink::UnifiedHeapController"* }
%"class.blink::UnifiedHeapController" = type opaque
%"class.std::__1::unique_ptr.174" = type { %"class.std::__1::__compressed_pair.175" }
%"class.std::__1::__compressed_pair.175" = type { %"struct.std::__1::__compressed_pair_elem.176" }
%"struct.std::__1::__compressed_pair_elem.176" = type { %"class.v8::EmbedderRootsHandler"* }
%"class.v8::EmbedderRootsHandler" = type { i32 (...)** }
%"struct.blink::ThreadState::GCData" = type { i32, i32, i32, i32, %"class.std::__1::unique_ptr.180" }
%"class.std::__1::unique_ptr.180" = type { %"class.std::__1::__compressed_pair.181" }
%"class.std::__1::__compressed_pair.181" = type { %"struct.std::__1::__compressed_pair_elem.182" }
%"struct.std::__1::__compressed_pair_elem.182" = type { %"class.blink::MarkingVisitor"* }
%"class.blink::MarkingVisitor" = type { %"class.blink::MarkingVisitorBase", %"class.blink::MarkingVisitor::RecentlyRetracedWeakContainers" }
%"class.blink::MarkingVisitorBase" = type { %"class.blink::Visitor", %"class.blink::Worklist<blink::TraceDescriptor, 512, 4>::View", %"class.blink::Worklist<blink::HeapObjectHeader *, 64, 4>::View", %"class.blink::Worklist<const void *, 16, 4>::View", %"class.blink::Worklist<blink::CustomCallbackItem, 64, 4>::View", %"class.blink::Worklist<const void *const *, 256, 4>::View", %"class.blink::Worklist<blink::EphemeronPairItem, 64, 4>::View", %"class.blink::Worklist<blink::EphemeronPairItem, 64, 4>::View", %"class.blink::WeakContainersWorklist"*, i64, i32, i32 }
%"class.blink::Worklist<blink::TraceDescriptor, 512, 4>::View" = type <{ %"class.blink::Worklist"*, i32, [4 x i8] }>
%"class.blink::Worklist<blink::HeapObjectHeader *, 64, 4>::View" = type <{ %"class.blink::Worklist.69"*, i32, [4 x i8] }>
%"class.blink::Worklist<const void *, 16, 4>::View" = type <{ %"class.blink::Worklist.76"*, i32, [4 x i8] }>
%"class.blink::Worklist<blink::CustomCallbackItem, 64, 4>::View" = type <{ %"class.blink::Worklist.83"*, i32, [4 x i8] }>
%"class.blink::Worklist<const void *const *, 256, 4>::View" = type <{ %"class.blink::Worklist.90"*, i32, [4 x i8] }>
%"class.blink::Worklist<blink::EphemeronPairItem, 64, 4>::View" = type <{ %"class.blink::Worklist.97"*, i32, [4 x i8] }>
%"class.blink::MarkingVisitor::RecentlyRetracedWeakContainers" = type { %"class.std::__1::vector", i64 }
%"class.std::__1::vector" = type { %"class.std::__1::__vector_base" }
%"class.std::__1::__vector_base" = type { %"class.blink::HeapObjectHeader"**, %"class.blink::HeapObjectHeader"**, %"class.std::__1::__compressed_pair.218" }
%"class.blink::HeapObjectHeader" = type { i32, i16, i16 }
%"class.std::__1::__compressed_pair.218" = type { %"struct.std::__1::__compressed_pair_elem.219" }
%"struct.std::__1::__compressed_pair_elem.219" = type { %"class.blink::HeapObjectHeader"** }
%"class.std::__1::unique_ptr.186" = type { %"class.std::__1::__compressed_pair.187" }
%"class.std::__1::__compressed_pair.187" = type { %"struct.std::__1::__compressed_pair_elem.188" }
%"struct.std::__1::__compressed_pair_elem.188" = type { %"class.blink::ThreadState::IncrementalMarkingScheduler"* }
%"class.blink::ThreadState::IncrementalMarkingScheduler" = type opaque
%"class.std::__1::unique_ptr.192" = type { %"class.std::__1::__compressed_pair.193" }
%"class.std::__1::__compressed_pair.193" = type { %"struct.std::__1::__compressed_pair_elem.194" }
%"struct.std::__1::__compressed_pair_elem.194" = type { %"class.blink::MarkingSchedulingOracle"* }
%"class.blink::MarkingSchedulingOracle" = type opaque
%"class.base::JobHandle" = type { %class.scoped_refptr.198 }
%class.scoped_refptr.198 = type { %"class.base::internal::JobTaskSource"* }
%"class.base::internal::JobTaskSource" = type opaque
%"struct.std::__1::atomic.199" = type { %"struct.std::__1::__atomic_base.200" }
%"struct.std::__1::__atomic_base.200" = type { %"struct.std::__1::__cxx_atomic_impl.201" }
%"struct.std::__1::__cxx_atomic_impl.201" = type { %"struct.std::__1::__cxx_atomic_base_impl.202" }
%"struct.std::__1::__cxx_atomic_base_impl.202" = type { i8 }
%"class.base::TimeTicks" = type { %"class.base::time_internal::TimeBase" }
%"class.base::time_internal::TimeBase" = type { i64 }
%"class.blink::Member.203" = type { %"class.blink::MemberBase.204" }
%"class.blink::MemberBase.204" = type { %"class.blink::V8PerContextData"* }
%"class.blink::V8PerContextData" = type opaque
%"class.blink::SelfKeepAlive" = type { %"class.blink::Persistent.205" }
%"class.blink::Persistent.205" = type { %"class.blink::PersistentBase.206" }
%"class.blink::PersistentBase.206" = type { %"class.blink::ScriptState"*, %"class.blink::PersistentNodePtr" }
%"class.util::TokenType" = type { %"class.base::StrongAlias" }
%"class.base::StrongAlias" = type { %"class.base::UnguessableToken" }
%"class.base::UnguessableToken" = type { %"class.base::Token" }
%"class.base::Token" = type { i64, i64 }
%"class.blink::Member.207" = type { %"class.blink::MemberBase.208" }
%"class.blink::MemberBase.208" = type { %"class.blink::V8NoArgumentConstructor"* }
%"class.blink::V8NoArgumentConstructor" = type opaque
%"class.blink::Member.209" = type { %"class.blink::MemberBase.210" }
%"class.blink::MemberBase.210" = type { %"class.blink::V8PaintCallback"* }
%"class.blink::V8PaintCallback" = type opaque
%"class.blink::TraceWrapperV8Reference.211" = type { %"class.v8::TracedReference.212" }
%"class.v8::TracedReference.212" = type { %"class.v8::BasicTracedReference.213" }
%"class.v8::BasicTracedReference.213" = type { %"class.v8::TracedReferenceBase" }
%"class.blink::Member.214" = type { %"class.blink::MemberBase.215" }
%"class.blink::MemberBase.215" = type { %"class.blink::PaintRenderingContext2DSettings"* }
%"class.blink::PaintRenderingContext2DSettings" = type <{ %"class.blink::IDLDictionaryBase", i8, i8, [6 x i8] }>
%"class.blink::IDLDictionaryBase" = type { i32 (...)** }
%"class.WTF::Vector.223" = type { %"class.WTF::VectorBuffer.224" }
%"class.WTF::VectorBuffer.224" = type { %"class.WTF::VectorBufferBase.225" }
%"class.WTF::VectorBufferBase.225" = type { %"class.WTF::String"*, i32, i32 }
%"class.logging::CheckOpResult" = type { i8* }
%"class.logging::CheckError" = type { %"class.logging::LogMessage"* }
%"class.logging::LogMessage" = type { i32 (...)**, i32, %"class.std::__1::basic_ostringstream", i64, i8*, i32, %"class.base::ScopedClearLastErrorBase" }
%"class.std::__1::basic_ostringstream" = type { %"class.std::__1::basic_ostream.base", %"class.std::__1::basic_stringbuf", %"class.std::__1::basic_ios.base" }
%"class.std::__1::basic_ostream.base" = type { i32 (...)** }
%"class.std::__1::basic_stringbuf" = type <{ %"class.std::__1::basic_streambuf", %"class.std::__1::basic_string", i8*, i32, [4 x i8] }>
%"class.std::__1::basic_streambuf" = type { i32 (...)**, %"class.std::__1::locale", i8*, i8*, i8*, i8*, i8*, i8* }
%"class.std::__1::locale" = type { %"class.std::__1::locale::__imp"* }
%"class.std::__1::locale::__imp" = type opaque
%"class.std::__1::basic_string" = type { %"class.std::__1::__compressed_pair.232" }
%"class.std::__1::__compressed_pair.232" = type { %"struct.std::__1::__compressed_pair_elem.233" }
%"struct.std::__1::__compressed_pair_elem.233" = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" = type { %union.anon }
%union.anon = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" = type { i8*, i64, i64 }
%"class.std::__1::basic_ios.base" = type <{ %"class.std::__1::ios_base", %"class.std::__1::basic_ostream"*, i32 }>
%"class.std::__1::ios_base" = type { i32 (...)**, i32, i64, i64, i32, i32, i8*, i8*, void (i32, %"class.std::__1::ios_base"*, i32)**, i32*, i64, i64, i64*, i64, i64, i8**, i64, i64 }
%"class.std::__1::basic_ostream" = type { i32 (...)**, %"class.std::__1::basic_ios.base" }
%"class.base::ScopedClearLastErrorBase" = type { i32 }

$_ZN3WTF18PartitionAllocator13QuantizedSizeIN5blink13CSSPropertyIDEEEmm = comdat any

$_ZN3WTF18PartitionAllocator13QuantizedSizeINS_12AtomicStringEEEmm = comdat any

$_ZN3WTF18PartitionAllocator13QuantizedSizeIN5blink19CSSSyntaxDefinitionEEEmm = comdat any

$_ZN3WTF6VectorIN5blink18CSSSyntaxComponentELj0ENS_18PartitionAllocatorEEC2ERKS4_ = comdat any

$_ZN3WTF18PartitionAllocator13QuantizedSizeIN5blink18CSSSyntaxComponentEEEmm = comdat any

@_ZTVN5blink23DocumentPaintDefinitionE = hidden unnamed_addr constant { [4 x i8*] } { [4 x i8*] [i8* null, i8* null, i8* bitcast (void (%"class.blink::DocumentPaintDefinition"*)* @_ZN5blink23DocumentPaintDefinitionD2Ev to i8*), i8* bitcast (void (%"class.blink::DocumentPaintDefinition"*)* @_ZN5blink23DocumentPaintDefinitionD0Ev to i8*)] }, align 8
@.str = private unnamed_addr constant [44 x i8] c"count <= MaxElementCountInBackingStore<T>()\00", align 1
@.str.1 = private unnamed_addr constant [78 x i8] c"../../third_party/blink/renderer/platform/wtf/allocator/partition_allocator.h\00", align 1
@__PRETTY_FUNCTION__._ZN3WTF21GetStringWithTypeNameIN5blink13CSSPropertyIDEEEPKcv = private unnamed_addr constant [68 x i8] c"const char *WTF::GetStringWithTypeName() [T = blink::CSSPropertyID]\00", align 1
@__PRETTY_FUNCTION__._ZN3WTF21GetStringWithTypeNameINS_12AtomicStringEEEPKcv = private unnamed_addr constant [65 x i8] c"const char *WTF::GetStringWithTypeName() [T = WTF::AtomicString]\00", align 1
@__PRETTY_FUNCTION__._ZN3WTF21GetStringWithTypeNameIN5blink19CSSSyntaxDefinitionEEEPKcv = private unnamed_addr constant [74 x i8] c"const char *WTF::GetStringWithTypeName() [T = blink::CSSSyntaxDefinition]\00", align 1
@__PRETTY_FUNCTION__._ZN3WTF21GetStringWithTypeNameIN5blink18CSSSyntaxComponentEEEPKcv = private unnamed_addr constant [73 x i8] c"const char *WTF::GetStringWithTypeName() [T = blink::CSSSyntaxComponent]\00", align 1

@_ZN5blink23DocumentPaintDefinitionC1ERKN3WTF6VectorINS_13CSSPropertyIDELj0ENS1_18PartitionAllocatorEEERKNS2_INS1_12AtomicStringELj0ES4_EERKNS2_INS_19CSSSyntaxDefinitionELj0ES4_EEb = hidden unnamed_addr alias void (%"class.blink::DocumentPaintDefinition"*, %"class.WTF::Vector"*, %"class.WTF::Vector.0"*, %"class.WTF::Vector.6"*, i1), void (%"class.blink::DocumentPaintDefinition"*, %"class.WTF::Vector"*, %"class.WTF::Vector.0"*, %"class.WTF::Vector.6"*, i1)* @_ZN5blink23DocumentPaintDefinitionC2ERKN3WTF6VectorINS_13CSSPropertyIDELj0ENS1_18PartitionAllocatorEEERKNS2_INS1_12AtomicStringELj0ES4_EERKNS2_INS_19CSSSyntaxDefinitionELj0ES4_EEb
@_ZN5blink23DocumentPaintDefinitionD1Ev = hidden unnamed_addr alias void (%"class.blink::DocumentPaintDefinition"*), void (%"class.blink::DocumentPaintDefinition"*)* @_ZN5blink23DocumentPaintDefinitionD2Ev

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5blink23DocumentPaintDefinitionC2ERKN3WTF6VectorINS_13CSSPropertyIDELj0ENS1_18PartitionAllocatorEEERKNS2_INS1_12AtomicStringELj0ES4_EERKNS2_INS_19CSSSyntaxDefinitionELj0ES4_EEb(%"class.blink::DocumentPaintDefinition"* nocapture, %"class.WTF::Vector"* nocapture readonly dereferenceable(16), %"class.WTF::Vector.0"* nocapture readonly dereferenceable(16), %"class.WTF::Vector.6"* nocapture readonly dereferenceable(16), i1 zeroext) unnamed_addr #0 align 2 {
  %6 = zext i1 %4 to i8
  %7 = getelementptr inbounds %"class.blink::DocumentPaintDefinition", %"class.blink::DocumentPaintDefinition"* %0, i64 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [4 x i8*] }, { [4 x i8*] }* @_ZTVN5blink23DocumentPaintDefinitionE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %7, align 8
  %8 = getelementptr inbounds %"class.blink::DocumentPaintDefinition", %"class.blink::DocumentPaintDefinition"* %0, i64 0, i32 1
  %9 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %1, i64 0, i32 0, i32 0, i32 1
  %10 = load i32, i32* %9, align 8
  %11 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %8, i64 0, i32 0, i32 0, i32 0
  store i32* null, i32** %11, align 8
  %12 = getelementptr inbounds %"class.blink::DocumentPaintDefinition", %"class.blink::DocumentPaintDefinition"* %0, i64 0, i32 1, i32 0, i32 0, i32 1
  store i32 0, i32* %12, align 8
  %13 = icmp eq i32 %10, 0
  br i1 %13, label %23, label %14

14:                                               ; preds = %5
  %15 = zext i32 %10 to i64
  %16 = tail call i64 @_ZN3WTF18PartitionAllocator13QuantizedSizeIN5blink13CSSPropertyIDEEEmm(i64 %15) #8
  %17 = tail call i8* @_ZN3WTF18PartitionAllocator15AllocateBackingEmPKc(i64 %16, i8* getelementptr inbounds ([68 x i8], [68 x i8]* @__PRETTY_FUNCTION__._ZN3WTF21GetStringWithTypeNameIN5blink13CSSPropertyIDEEEPKcv, i64 0, i64 0)) #8
  %18 = ptrtoint i8* %17 to i64
  %19 = bitcast %"class.WTF::Vector"* %8 to i64*
  store atomic i64 %18, i64* %19 monotonic, align 8
  %20 = lshr i64 %16, 2
  %21 = trunc i64 %20 to i32
  store i32 %21, i32* %12, align 8
  %22 = icmp ne i8* %17, null
  br label %23

23:                                               ; preds = %14, %5
  %24 = phi i8* [ null, %5 ], [ %17, %14 ]
  %25 = phi i1 [ false, %5 ], [ %22, %14 ]
  %26 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %1, i64 0, i32 0, i32 0, i32 2
  %27 = load i32, i32* %26, align 4
  %28 = getelementptr inbounds %"class.blink::DocumentPaintDefinition", %"class.blink::DocumentPaintDefinition"* %0, i64 0, i32 1, i32 0, i32 0, i32 2
  store i32 %27, i32* %28, align 4
  %29 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %1, i64 0, i32 0, i32 0, i32 0
  %30 = load i32*, i32** %29, align 8
  %31 = icmp ne i32* %30, null
  %32 = and i1 %25, %31
  br i1 %32, label %33, label %38, !prof !2

33:                                               ; preds = %23
  %34 = load i32, i32* %26, align 4
  %35 = zext i32 %34 to i64
  %36 = bitcast i32* %30 to i8*
  %37 = shl nuw nsw i64 %35, 2
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %24, i8* nonnull align 4 %36, i64 %37, i1 false) #8
  br label %38

38:                                               ; preds = %23, %33
  %39 = getelementptr inbounds %"class.blink::DocumentPaintDefinition", %"class.blink::DocumentPaintDefinition"* %0, i64 0, i32 2
  %40 = getelementptr inbounds %"class.WTF::Vector.0", %"class.WTF::Vector.0"* %2, i64 0, i32 0, i32 0, i32 1
  %41 = load i32, i32* %40, align 8
  %42 = getelementptr inbounds %"class.WTF::Vector.0", %"class.WTF::Vector.0"* %39, i64 0, i32 0, i32 0, i32 0
  store %"class.WTF::AtomicString"* null, %"class.WTF::AtomicString"** %42, align 8
  %43 = getelementptr inbounds %"class.blink::DocumentPaintDefinition", %"class.blink::DocumentPaintDefinition"* %0, i64 0, i32 2, i32 0, i32 0, i32 1
  store i32 0, i32* %43, align 8
  %44 = icmp eq i32 %41, 0
  br i1 %44, label %54, label %45

45:                                               ; preds = %38
  %46 = zext i32 %41 to i64
  %47 = tail call i64 @_ZN3WTF18PartitionAllocator13QuantizedSizeINS_12AtomicStringEEEmm(i64 %46) #8
  %48 = tail call i8* @_ZN3WTF18PartitionAllocator15AllocateBackingEmPKc(i64 %47, i8* getelementptr inbounds ([65 x i8], [65 x i8]* @__PRETTY_FUNCTION__._ZN3WTF21GetStringWithTypeNameINS_12AtomicStringEEEPKcv, i64 0, i64 0)) #8
  %49 = ptrtoint i8* %48 to i64
  %50 = bitcast %"class.WTF::Vector.0"* %39 to i64*
  store atomic i64 %49, i64* %50 monotonic, align 8
  %51 = lshr i64 %47, 3
  %52 = trunc i64 %51 to i32
  store i32 %52, i32* %43, align 8
  %53 = bitcast i8* %48 to %"class.WTF::AtomicString"*
  br label %54

54:                                               ; preds = %45, %38
  %55 = phi %"class.WTF::AtomicString"* [ null, %38 ], [ %53, %45 ]
  %56 = getelementptr inbounds %"class.WTF::Vector.0", %"class.WTF::Vector.0"* %2, i64 0, i32 0, i32 0, i32 2
  %57 = load i32, i32* %56, align 4
  %58 = getelementptr inbounds %"class.blink::DocumentPaintDefinition", %"class.blink::DocumentPaintDefinition"* %0, i64 0, i32 2, i32 0, i32 0, i32 2
  store i32 %57, i32* %58, align 4
  %59 = getelementptr inbounds %"class.WTF::Vector.0", %"class.WTF::Vector.0"* %2, i64 0, i32 0, i32 0, i32 0
  %60 = load %"class.WTF::AtomicString"*, %"class.WTF::AtomicString"** %59, align 8
  %61 = load i32, i32* %56, align 4
  %62 = zext i32 %61 to i64
  %63 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %60, i64 %62
  %64 = icmp eq i32 %61, 0
  br i1 %64, label %93, label %65

65:                                               ; preds = %54, %89
  %66 = phi %"class.WTF::AtomicString"* [ %90, %89 ], [ %55, %54 ]
  %67 = phi %"class.WTF::AtomicString"* [ %91, %89 ], [ %60, %54 ]
  %68 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %67, i64 0, i32 0, i32 0, i32 0
  %69 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %68, align 8
  %70 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %66, i64 0, i32 0, i32 0, i32 0
  store %"class.WTF::StringImpl"* %69, %"class.WTF::StringImpl"** %70, align 8
  %71 = icmp eq %"class.WTF::StringImpl"* %69, null
  br i1 %71, label %89, label %72

72:                                               ; preds = %65
  %73 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %69, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %74 = load atomic i32, i32* %73 monotonic, align 4
  %75 = and i32 %74, 2
  %76 = icmp eq i32 %75, 0
  br i1 %76, label %77, label %89

77:                                               ; preds = %72
  %78 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %69, i64 0, i32 0
  %79 = load i32, i32* %78, align 4
  %80 = zext i32 %79 to i33
  %81 = tail call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %80, i33 1) #8
  %82 = extractvalue { i33, i1 } %81, 1
  %83 = extractvalue { i33, i1 } %81, 0
  %84 = icmp slt i33 %83, 0
  %85 = or i1 %82, %84
  br i1 %85, label %86, label %87, !prof !3

86:                                               ; preds = %77
  tail call void @llvm.trap() #8
  unreachable

87:                                               ; preds = %77
  %88 = trunc i33 %83 to i32
  store i32 %88, i32* %78, align 4
  br label %89

89:                                               ; preds = %87, %72, %65
  %90 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %66, i64 1
  %91 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %67, i64 1
  %92 = icmp eq %"class.WTF::AtomicString"* %91, %63
  br i1 %92, label %93, label %65

93:                                               ; preds = %89, %54
  %94 = getelementptr inbounds %"class.blink::DocumentPaintDefinition", %"class.blink::DocumentPaintDefinition"* %0, i64 0, i32 3
  %95 = getelementptr inbounds %"class.WTF::Vector.6", %"class.WTF::Vector.6"* %3, i64 0, i32 0, i32 0, i32 1
  %96 = load i32, i32* %95, align 8
  %97 = getelementptr inbounds %"class.WTF::Vector.6", %"class.WTF::Vector.6"* %94, i64 0, i32 0, i32 0, i32 0
  store %"class.blink::CSSSyntaxDefinition"* null, %"class.blink::CSSSyntaxDefinition"** %97, align 8
  %98 = getelementptr inbounds %"class.blink::DocumentPaintDefinition", %"class.blink::DocumentPaintDefinition"* %0, i64 0, i32 3, i32 0, i32 0, i32 1
  store i32 0, i32* %98, align 8
  %99 = icmp eq i32 %96, 0
  br i1 %99, label %109, label %100

100:                                              ; preds = %93
  %101 = zext i32 %96 to i64
  %102 = tail call i64 @_ZN3WTF18PartitionAllocator13QuantizedSizeIN5blink19CSSSyntaxDefinitionEEEmm(i64 %101) #8
  %103 = tail call i8* @_ZN3WTF18PartitionAllocator15AllocateBackingEmPKc(i64 %102, i8* getelementptr inbounds ([74 x i8], [74 x i8]* @__PRETTY_FUNCTION__._ZN3WTF21GetStringWithTypeNameIN5blink19CSSSyntaxDefinitionEEEPKcv, i64 0, i64 0)) #8
  %104 = ptrtoint i8* %103 to i64
  %105 = bitcast %"class.WTF::Vector.6"* %94 to i64*
  store atomic i64 %104, i64* %105 monotonic, align 8
  %106 = lshr i64 %102, 4
  %107 = trunc i64 %106 to i32
  store i32 %107, i32* %98, align 8
  %108 = bitcast i8* %103 to %"class.blink::CSSSyntaxDefinition"*
  br label %109

109:                                              ; preds = %100, %93
  %110 = phi %"class.blink::CSSSyntaxDefinition"* [ null, %93 ], [ %108, %100 ]
  %111 = getelementptr inbounds %"class.WTF::Vector.6", %"class.WTF::Vector.6"* %3, i64 0, i32 0, i32 0, i32 2
  %112 = load i32, i32* %111, align 4
  %113 = getelementptr inbounds %"class.blink::DocumentPaintDefinition", %"class.blink::DocumentPaintDefinition"* %0, i64 0, i32 3, i32 0, i32 0, i32 2
  store i32 %112, i32* %113, align 4
  %114 = getelementptr inbounds %"class.WTF::Vector.6", %"class.WTF::Vector.6"* %3, i64 0, i32 0, i32 0, i32 0
  %115 = load %"class.blink::CSSSyntaxDefinition"*, %"class.blink::CSSSyntaxDefinition"** %114, align 8
  %116 = load i32, i32* %111, align 4
  %117 = zext i32 %116 to i64
  %118 = getelementptr inbounds %"class.blink::CSSSyntaxDefinition", %"class.blink::CSSSyntaxDefinition"* %115, i64 %117
  %119 = icmp eq i32 %116, 0
  br i1 %119, label %128, label %120

120:                                              ; preds = %109, %120
  %121 = phi %"class.blink::CSSSyntaxDefinition"* [ %125, %120 ], [ %110, %109 ]
  %122 = phi %"class.blink::CSSSyntaxDefinition"* [ %126, %120 ], [ %115, %109 ]
  %123 = getelementptr inbounds %"class.blink::CSSSyntaxDefinition", %"class.blink::CSSSyntaxDefinition"* %121, i64 0, i32 0
  %124 = getelementptr inbounds %"class.blink::CSSSyntaxDefinition", %"class.blink::CSSSyntaxDefinition"* %122, i64 0, i32 0
  tail call void @_ZN3WTF6VectorIN5blink18CSSSyntaxComponentELj0ENS_18PartitionAllocatorEEC2ERKS4_(%"class.WTF::Vector.9"* %123, %"class.WTF::Vector.9"* dereferenceable(16) %124) #8
  %125 = getelementptr inbounds %"class.blink::CSSSyntaxDefinition", %"class.blink::CSSSyntaxDefinition"* %121, i64 1
  %126 = getelementptr inbounds %"class.blink::CSSSyntaxDefinition", %"class.blink::CSSSyntaxDefinition"* %122, i64 1
  %127 = icmp eq %"class.blink::CSSSyntaxDefinition"* %126, %118
  br i1 %127, label %128, label %120

128:                                              ; preds = %120, %109
  %129 = getelementptr inbounds %"class.blink::DocumentPaintDefinition", %"class.blink::DocumentPaintDefinition"* %0, i64 0, i32 4
  store i8 %6, i8* %129, align 8
  %130 = getelementptr inbounds %"class.blink::DocumentPaintDefinition", %"class.blink::DocumentPaintDefinition"* %0, i64 0, i32 5
  store i32 1, i32* %130, align 4
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5blink23DocumentPaintDefinitionD2Ev(%"class.blink::DocumentPaintDefinition"* nocapture) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.blink::DocumentPaintDefinition", %"class.blink::DocumentPaintDefinition"* %0, i64 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [4 x i8*] }, { [4 x i8*] }* @_ZTVN5blink23DocumentPaintDefinitionE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %2, align 8
  %3 = getelementptr inbounds %"class.blink::DocumentPaintDefinition", %"class.blink::DocumentPaintDefinition"* %0, i64 0, i32 3
  %4 = getelementptr inbounds %"class.WTF::Vector.6", %"class.WTF::Vector.6"* %3, i64 0, i32 0, i32 0, i32 0
  %5 = load %"class.blink::CSSSyntaxDefinition"*, %"class.blink::CSSSyntaxDefinition"** %4, align 8
  %6 = icmp eq %"class.blink::CSSSyntaxDefinition"* %5, null
  br i1 %6, label %62, label %7, !prof !2

7:                                                ; preds = %1
  %8 = bitcast %"class.blink::CSSSyntaxDefinition"* %5 to i8*
  %9 = getelementptr inbounds %"class.blink::DocumentPaintDefinition", %"class.blink::DocumentPaintDefinition"* %0, i64 0, i32 3, i32 0, i32 0, i32 2
  %10 = load i32, i32* %9, align 4
  %11 = icmp eq i32 %10, 0
  br i1 %11, label %60, label %12, !prof !3

12:                                               ; preds = %7
  %13 = zext i32 %10 to i64
  %14 = getelementptr inbounds %"class.blink::CSSSyntaxDefinition", %"class.blink::CSSSyntaxDefinition"* %5, i64 %13
  br label %15

15:                                               ; preds = %12, %54
  %16 = phi %"class.blink::CSSSyntaxDefinition"* [ %55, %54 ], [ %5, %12 ]
  %17 = getelementptr inbounds %"class.blink::CSSSyntaxDefinition", %"class.blink::CSSSyntaxDefinition"* %16, i64 0, i32 0, i32 0, i32 0, i32 0
  %18 = load %"class.blink::CSSSyntaxComponent"*, %"class.blink::CSSSyntaxComponent"** %17, align 8
  %19 = icmp eq %"class.blink::CSSSyntaxComponent"* %18, null
  br i1 %19, label %54, label %20, !prof !2

20:                                               ; preds = %15
  %21 = bitcast %"class.blink::CSSSyntaxComponent"* %18 to i8*
  %22 = getelementptr inbounds %"class.blink::CSSSyntaxDefinition", %"class.blink::CSSSyntaxDefinition"* %16, i64 0, i32 0, i32 0, i32 0, i32 2
  %23 = load i32, i32* %22, align 4
  %24 = icmp eq i32 %23, 0
  br i1 %24, label %52, label %25, !prof !3

25:                                               ; preds = %20
  %26 = zext i32 %23 to i64
  %27 = getelementptr inbounds %"class.blink::CSSSyntaxComponent", %"class.blink::CSSSyntaxComponent"* %18, i64 %26
  br label %28

28:                                               ; preds = %46, %25
  %29 = phi %"class.blink::CSSSyntaxComponent"* [ %47, %46 ], [ %18, %25 ]
  %30 = getelementptr inbounds %"class.blink::CSSSyntaxComponent", %"class.blink::CSSSyntaxComponent"* %29, i64 0, i32 2, i32 0, i32 0
  %31 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %30, align 8
  %32 = icmp eq %"class.WTF::StringImpl"* %31, null
  br i1 %32, label %46, label %33

33:                                               ; preds = %28
  %34 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %31, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %35 = load atomic i32, i32* %34 monotonic, align 4
  %36 = and i32 %35, 2
  %37 = icmp eq i32 %36, 0
  %38 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %31, i64 0, i32 0
  %39 = load i32, i32* %38, align 4
  br i1 %37, label %40, label %42

40:                                               ; preds = %33
  %41 = add i32 %39, -1
  store i32 %41, i32* %38, align 4
  br label %42

42:                                               ; preds = %40, %33
  %43 = phi i32 [ %41, %40 ], [ %39, %33 ]
  %44 = icmp eq i32 %43, 0
  br i1 %44, label %45, label %46

45:                                               ; preds = %42
  tail call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %31) #8
  br label %46

46:                                               ; preds = %45, %42, %28
  %47 = getelementptr inbounds %"class.blink::CSSSyntaxComponent", %"class.blink::CSSSyntaxComponent"* %29, i64 1
  %48 = icmp eq %"class.blink::CSSSyntaxComponent"* %47, %27
  br i1 %48, label %49, label %28

49:                                               ; preds = %46
  store i32 0, i32* %22, align 4
  %50 = bitcast %"class.blink::CSSSyntaxDefinition"* %16 to i8**
  %51 = load i8*, i8** %50, align 8
  br label %52

52:                                               ; preds = %49, %20
  %53 = phi i8* [ %51, %49 ], [ %21, %20 ]
  tail call void @_ZN3WTF18PartitionAllocator11FreeBackingEPv(i8* %53) #8
  store %"class.blink::CSSSyntaxComponent"* null, %"class.blink::CSSSyntaxComponent"** %17, align 8
  br label %54

54:                                               ; preds = %52, %15
  %55 = getelementptr inbounds %"class.blink::CSSSyntaxDefinition", %"class.blink::CSSSyntaxDefinition"* %16, i64 1
  %56 = icmp eq %"class.blink::CSSSyntaxDefinition"* %55, %14
  br i1 %56, label %57, label %15

57:                                               ; preds = %54
  store i32 0, i32* %9, align 4
  %58 = bitcast %"class.WTF::Vector.6"* %3 to i8**
  %59 = load i8*, i8** %58, align 8
  br label %60

60:                                               ; preds = %57, %7
  %61 = phi i8* [ %59, %57 ], [ %8, %7 ]
  tail call void @_ZN3WTF18PartitionAllocator11FreeBackingEPv(i8* %61) #8
  store %"class.blink::CSSSyntaxDefinition"* null, %"class.blink::CSSSyntaxDefinition"** %4, align 8
  br label %62

62:                                               ; preds = %1, %60
  %63 = getelementptr inbounds %"class.blink::DocumentPaintDefinition", %"class.blink::DocumentPaintDefinition"* %0, i64 0, i32 2
  %64 = getelementptr inbounds %"class.WTF::Vector.0", %"class.WTF::Vector.0"* %63, i64 0, i32 0, i32 0, i32 0
  %65 = load %"class.WTF::AtomicString"*, %"class.WTF::AtomicString"** %64, align 8
  %66 = icmp eq %"class.WTF::AtomicString"* %65, null
  br i1 %66, label %101, label %67, !prof !2

67:                                               ; preds = %62
  %68 = bitcast %"class.WTF::AtomicString"* %65 to i8*
  %69 = getelementptr inbounds %"class.blink::DocumentPaintDefinition", %"class.blink::DocumentPaintDefinition"* %0, i64 0, i32 2, i32 0, i32 0, i32 2
  %70 = load i32, i32* %69, align 4
  %71 = icmp eq i32 %70, 0
  br i1 %71, label %99, label %72, !prof !3

72:                                               ; preds = %67
  %73 = zext i32 %70 to i64
  %74 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %65, i64 %73
  br label %75

75:                                               ; preds = %93, %72
  %76 = phi %"class.WTF::AtomicString"* [ %94, %93 ], [ %65, %72 ]
  %77 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %76, i64 0, i32 0, i32 0, i32 0
  %78 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %77, align 8
  %79 = icmp eq %"class.WTF::StringImpl"* %78, null
  br i1 %79, label %93, label %80

80:                                               ; preds = %75
  %81 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %78, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %82 = load atomic i32, i32* %81 monotonic, align 4
  %83 = and i32 %82, 2
  %84 = icmp eq i32 %83, 0
  %85 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %78, i64 0, i32 0
  %86 = load i32, i32* %85, align 4
  br i1 %84, label %87, label %89

87:                                               ; preds = %80
  %88 = add i32 %86, -1
  store i32 %88, i32* %85, align 4
  br label %89

89:                                               ; preds = %87, %80
  %90 = phi i32 [ %88, %87 ], [ %86, %80 ]
  %91 = icmp eq i32 %90, 0
  br i1 %91, label %92, label %93

92:                                               ; preds = %89
  tail call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %78) #8
  br label %93

93:                                               ; preds = %92, %89, %75
  %94 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %76, i64 1
  %95 = icmp eq %"class.WTF::AtomicString"* %94, %74
  br i1 %95, label %96, label %75

96:                                               ; preds = %93
  store i32 0, i32* %69, align 4
  %97 = bitcast %"class.WTF::Vector.0"* %63 to i8**
  %98 = load i8*, i8** %97, align 8
  br label %99

99:                                               ; preds = %96, %67
  %100 = phi i8* [ %98, %96 ], [ %68, %67 ]
  tail call void @_ZN3WTF18PartitionAllocator11FreeBackingEPv(i8* %100) #8
  store %"class.WTF::AtomicString"* null, %"class.WTF::AtomicString"** %64, align 8
  br label %101

101:                                              ; preds = %62, %99
  %102 = getelementptr inbounds %"class.blink::DocumentPaintDefinition", %"class.blink::DocumentPaintDefinition"* %0, i64 0, i32 1, i32 0, i32 0, i32 0
  %103 = load i32*, i32** %102, align 8
  %104 = icmp eq i32* %103, null
  %105 = bitcast i32* %103 to i8*
  br i1 %104, label %112, label %106, !prof !2

106:                                              ; preds = %101
  %107 = getelementptr inbounds %"class.blink::DocumentPaintDefinition", %"class.blink::DocumentPaintDefinition"* %0, i64 0, i32 1, i32 0, i32 0, i32 2
  %108 = load i32, i32* %107, align 4
  %109 = icmp eq i32 %108, 0
  br i1 %109, label %111, label %110, !prof !3

110:                                              ; preds = %106
  store i32 0, i32* %107, align 4
  br label %111

111:                                              ; preds = %110, %106
  tail call void @_ZN3WTF18PartitionAllocator11FreeBackingEPv(i8* nonnull %105) #8
  store i32* null, i32** %102, align 8
  br label %112

112:                                              ; preds = %101, %111
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5blink23DocumentPaintDefinitionD0Ev(%"class.blink::DocumentPaintDefinition"*) unnamed_addr #0 align 2 {
  tail call void @_ZN5blink23DocumentPaintDefinitionD2Ev(%"class.blink::DocumentPaintDefinition"* %0) #8
  %2 = bitcast %"class.blink::DocumentPaintDefinition"* %0 to i8*
  tail call void @_ZdlPv(i8* %2) #9
  ret void
}

; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(i8*) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZN5blink23DocumentPaintDefinition33RegisterAdditionalPaintDefinitionERKNS_18CSSPaintDefinitionE(%"class.blink::DocumentPaintDefinition"* nocapture, %"class.blink::CSSPaintDefinition"* nocapture readonly dereferenceable(104)) local_unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"class.blink::CSSPaintDefinition", %"class.blink::CSSPaintDefinition"* %1, i64 0, i32 6
  %4 = getelementptr inbounds %"class.blink::DocumentPaintDefinition", %"class.blink::DocumentPaintDefinition"* %0, i64 0, i32 1
  %5 = getelementptr inbounds %"class.blink::CSSPaintDefinition", %"class.blink::CSSPaintDefinition"* %1, i64 0, i32 6, i32 0, i32 0, i32 2
  %6 = load i32, i32* %5, align 4
  %7 = getelementptr inbounds %"class.blink::DocumentPaintDefinition", %"class.blink::DocumentPaintDefinition"* %0, i64 0, i32 1, i32 0, i32 0, i32 2
  %8 = load i32, i32* %7, align 4
  %9 = icmp eq i32 %6, %8
  br i1 %9, label %10, label %114

10:                                               ; preds = %2
  %11 = icmp eq i32 %6, 0
  br i1 %11, label %21, label %12

12:                                               ; preds = %10
  %13 = bitcast %"class.WTF::Vector"* %3 to i8**
  %14 = load i8*, i8** %13, align 8
  %15 = bitcast %"class.WTF::Vector"* %4 to i8**
  %16 = load i8*, i8** %15, align 8
  %17 = zext i32 %6 to i64
  %18 = shl nuw nsw i64 %17, 2
  %19 = tail call i32 @bcmp(i8* %14, i8* %16, i64 %18) #8
  %20 = icmp eq i32 %19, 0
  br i1 %20, label %21, label %114

21:                                               ; preds = %12, %10
  %22 = getelementptr inbounds %"class.blink::CSSPaintDefinition", %"class.blink::CSSPaintDefinition"* %1, i64 0, i32 7
  %23 = getelementptr inbounds %"class.blink::DocumentPaintDefinition", %"class.blink::DocumentPaintDefinition"* %0, i64 0, i32 2
  %24 = getelementptr inbounds %"class.blink::CSSPaintDefinition", %"class.blink::CSSPaintDefinition"* %1, i64 0, i32 7, i32 0, i32 0, i32 2
  %25 = load i32, i32* %24, align 4
  %26 = getelementptr inbounds %"class.blink::DocumentPaintDefinition", %"class.blink::DocumentPaintDefinition"* %0, i64 0, i32 2, i32 0, i32 0, i32 2
  %27 = load i32, i32* %26, align 4
  %28 = icmp eq i32 %25, %27
  br i1 %28, label %29, label %114

29:                                               ; preds = %21
  %30 = icmp eq i32 %25, 0
  br i1 %30, label %40, label %31

31:                                               ; preds = %29
  %32 = bitcast %"class.WTF::Vector.0"* %22 to i8**
  %33 = load i8*, i8** %32, align 8
  %34 = bitcast %"class.WTF::Vector.0"* %23 to i8**
  %35 = load i8*, i8** %34, align 8
  %36 = zext i32 %25 to i64
  %37 = shl nuw nsw i64 %36, 3
  %38 = tail call i32 @bcmp(i8* %33, i8* %35, i64 %37) #8
  %39 = icmp eq i32 %38, 0
  br i1 %39, label %40, label %114

40:                                               ; preds = %31, %29
  %41 = getelementptr inbounds %"class.blink::CSSPaintDefinition", %"class.blink::CSSPaintDefinition"* %1, i64 0, i32 8, i32 0, i32 0, i32 2
  %42 = load i32, i32* %41, align 4
  %43 = getelementptr inbounds %"class.blink::DocumentPaintDefinition", %"class.blink::DocumentPaintDefinition"* %0, i64 0, i32 3, i32 0, i32 0, i32 2
  %44 = load i32, i32* %43, align 4
  %45 = icmp eq i32 %42, %44
  br i1 %45, label %46, label %114

46:                                               ; preds = %40
  %47 = icmp eq i32 %42, 0
  br i1 %47, label %100, label %48

48:                                               ; preds = %46
  %49 = getelementptr inbounds %"class.blink::CSSPaintDefinition", %"class.blink::CSSPaintDefinition"* %1, i64 0, i32 8, i32 0, i32 0, i32 0
  %50 = load %"class.blink::CSSSyntaxDefinition"*, %"class.blink::CSSSyntaxDefinition"** %49, align 8
  %51 = getelementptr inbounds %"class.blink::DocumentPaintDefinition", %"class.blink::DocumentPaintDefinition"* %0, i64 0, i32 3, i32 0, i32 0, i32 0
  %52 = load %"class.blink::CSSSyntaxDefinition"*, %"class.blink::CSSSyntaxDefinition"** %51, align 8
  %53 = zext i32 %42 to i64
  %54 = getelementptr inbounds %"class.blink::CSSSyntaxDefinition", %"class.blink::CSSSyntaxDefinition"* %50, i64 %53
  br label %55

55:                                               ; preds = %96, %48
  %56 = phi %"class.blink::CSSSyntaxDefinition"* [ %98, %96 ], [ %52, %48 ]
  %57 = phi %"class.blink::CSSSyntaxDefinition"* [ %97, %96 ], [ %50, %48 ]
  %58 = getelementptr inbounds %"class.blink::CSSSyntaxDefinition", %"class.blink::CSSSyntaxDefinition"* %57, i64 0, i32 0, i32 0, i32 0, i32 2
  %59 = load i32, i32* %58, align 4
  %60 = getelementptr inbounds %"class.blink::CSSSyntaxDefinition", %"class.blink::CSSSyntaxDefinition"* %56, i64 0, i32 0, i32 0, i32 0, i32 2
  %61 = load i32, i32* %60, align 4
  %62 = icmp eq i32 %59, %61
  br i1 %62, label %63, label %114

63:                                               ; preds = %55
  %64 = icmp eq i32 %59, 0
  br i1 %64, label %96, label %65

65:                                               ; preds = %63
  %66 = getelementptr inbounds %"class.blink::CSSSyntaxDefinition", %"class.blink::CSSSyntaxDefinition"* %57, i64 0, i32 0, i32 0, i32 0, i32 0
  %67 = load %"class.blink::CSSSyntaxComponent"*, %"class.blink::CSSSyntaxComponent"** %66, align 8
  %68 = getelementptr inbounds %"class.blink::CSSSyntaxDefinition", %"class.blink::CSSSyntaxDefinition"* %56, i64 0, i32 0, i32 0, i32 0, i32 0
  %69 = load %"class.blink::CSSSyntaxComponent"*, %"class.blink::CSSSyntaxComponent"** %68, align 8
  %70 = zext i32 %59 to i64
  %71 = getelementptr inbounds %"class.blink::CSSSyntaxComponent", %"class.blink::CSSSyntaxComponent"* %67, i64 %70
  br label %72

72:                                               ; preds = %92, %65
  %73 = phi %"class.blink::CSSSyntaxComponent"* [ %94, %92 ], [ %69, %65 ]
  %74 = phi %"class.blink::CSSSyntaxComponent"* [ %93, %92 ], [ %67, %65 ]
  %75 = getelementptr inbounds %"class.blink::CSSSyntaxComponent", %"class.blink::CSSSyntaxComponent"* %74, i64 0, i32 0
  %76 = load i32, i32* %75, align 8
  %77 = getelementptr inbounds %"class.blink::CSSSyntaxComponent", %"class.blink::CSSSyntaxComponent"* %73, i64 0, i32 0
  %78 = load i32, i32* %77, align 8
  %79 = icmp eq i32 %76, %78
  br i1 %79, label %80, label %114

80:                                               ; preds = %72
  %81 = getelementptr inbounds %"class.blink::CSSSyntaxComponent", %"class.blink::CSSSyntaxComponent"* %74, i64 0, i32 2, i32 0, i32 0
  %82 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %81, align 8
  %83 = getelementptr inbounds %"class.blink::CSSSyntaxComponent", %"class.blink::CSSSyntaxComponent"* %73, i64 0, i32 2, i32 0, i32 0
  %84 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %83, align 8
  %85 = tail call zeroext i1 @_ZN3WTF5EqualEPKNS_10StringImplES2_(%"class.WTF::StringImpl"* %82, %"class.WTF::StringImpl"* %84) #8
  br i1 %85, label %86, label %114

86:                                               ; preds = %80
  %87 = getelementptr inbounds %"class.blink::CSSSyntaxComponent", %"class.blink::CSSSyntaxComponent"* %74, i64 0, i32 3
  %88 = load i32, i32* %87, align 8
  %89 = getelementptr inbounds %"class.blink::CSSSyntaxComponent", %"class.blink::CSSSyntaxComponent"* %73, i64 0, i32 3
  %90 = load i32, i32* %89, align 8
  %91 = icmp eq i32 %88, %90
  br i1 %91, label %92, label %114

92:                                               ; preds = %86
  %93 = getelementptr inbounds %"class.blink::CSSSyntaxComponent", %"class.blink::CSSSyntaxComponent"* %74, i64 1
  %94 = getelementptr inbounds %"class.blink::CSSSyntaxComponent", %"class.blink::CSSSyntaxComponent"* %73, i64 1
  %95 = icmp eq %"class.blink::CSSSyntaxComponent"* %93, %71
  br i1 %95, label %96, label %72

96:                                               ; preds = %92, %63
  %97 = getelementptr inbounds %"class.blink::CSSSyntaxDefinition", %"class.blink::CSSSyntaxDefinition"* %57, i64 1
  %98 = getelementptr inbounds %"class.blink::CSSSyntaxDefinition", %"class.blink::CSSSyntaxDefinition"* %56, i64 1
  %99 = icmp eq %"class.blink::CSSSyntaxDefinition"* %97, %54
  br i1 %99, label %100, label %55

100:                                              ; preds = %96, %46
  %101 = getelementptr inbounds %"class.blink::CSSPaintDefinition", %"class.blink::CSSPaintDefinition"* %1, i64 0, i32 9, i32 0, i32 0
  %102 = load %"class.blink::PaintRenderingContext2DSettings"*, %"class.blink::PaintRenderingContext2DSettings"** %101, align 8
  %103 = getelementptr inbounds %"class.blink::PaintRenderingContext2DSettings", %"class.blink::PaintRenderingContext2DSettings"* %102, i64 0, i32 2
  %104 = load i8, i8* %103, align 1, !range !4
  %105 = icmp ne i8 %104, 0
  %106 = getelementptr inbounds %"class.blink::DocumentPaintDefinition", %"class.blink::DocumentPaintDefinition"* %0, i64 0, i32 4
  %107 = load i8, i8* %106, align 8, !range !4
  %108 = icmp ne i8 %107, 0
  %109 = xor i1 %105, %108
  br i1 %109, label %114, label %110

110:                                              ; preds = %100
  %111 = getelementptr inbounds %"class.blink::DocumentPaintDefinition", %"class.blink::DocumentPaintDefinition"* %0, i64 0, i32 5
  %112 = load i32, i32* %111, align 4
  %113 = add i32 %112, 1
  store i32 %113, i32* %111, align 4
  br label %114

114:                                              ; preds = %55, %72, %80, %86, %31, %12, %40, %21, %2, %100, %110
  %115 = phi i1 [ true, %110 ], [ false, %100 ], [ false, %31 ], [ false, %12 ], [ false, %2 ], [ false, %21 ], [ false, %40 ], [ false, %86 ], [ false, %80 ], [ false, %72 ], [ false, %55 ]
  ret i1 %115
}

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZN5blink23DocumentPaintDefinition33RegisterAdditionalPaintDefinitionERKN3WTF6VectorINS_13CSSPropertyIDELj0ENS1_18PartitionAllocatorEEERKNS2_INS1_6StringELj0ES4_EERKNS2_INS_19CSSSyntaxDefinitionELj0ES4_EEb(%"class.blink::DocumentPaintDefinition"* nocapture, %"class.WTF::Vector"* nocapture readonly dereferenceable(16), %"class.WTF::Vector.223"* nocapture readonly dereferenceable(16), %"class.WTF::Vector.6"* nocapture readonly dereferenceable(16), i1 zeroext) local_unnamed_addr #0 align 2 {
  %6 = getelementptr inbounds %"class.blink::DocumentPaintDefinition", %"class.blink::DocumentPaintDefinition"* %0, i64 0, i32 1
  %7 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %1, i64 0, i32 0, i32 0, i32 2
  %8 = load i32, i32* %7, align 4
  %9 = getelementptr inbounds %"class.blink::DocumentPaintDefinition", %"class.blink::DocumentPaintDefinition"* %0, i64 0, i32 1, i32 0, i32 0, i32 2
  %10 = load i32, i32* %9, align 4
  %11 = icmp eq i32 %8, %10
  br i1 %11, label %12, label %119

12:                                               ; preds = %5
  %13 = icmp eq i32 %8, 0
  br i1 %13, label %23, label %14

14:                                               ; preds = %12
  %15 = bitcast %"class.WTF::Vector"* %1 to i8**
  %16 = load i8*, i8** %15, align 8
  %17 = bitcast %"class.WTF::Vector"* %6 to i8**
  %18 = load i8*, i8** %17, align 8
  %19 = zext i32 %8 to i64
  %20 = shl nuw nsw i64 %19, 2
  %21 = tail call i32 @bcmp(i8* %16, i8* %18, i64 %20) #8
  %22 = icmp eq i32 %21, 0
  br i1 %22, label %23, label %119

23:                                               ; preds = %14, %12
  %24 = getelementptr inbounds %"class.WTF::Vector.223", %"class.WTF::Vector.223"* %2, i64 0, i32 0, i32 0, i32 0
  %25 = load %"class.WTF::String"*, %"class.WTF::String"** %24, align 8
  %26 = getelementptr inbounds %"class.WTF::Vector.223", %"class.WTF::Vector.223"* %2, i64 0, i32 0, i32 0, i32 2
  %27 = load i32, i32* %26, align 4
  %28 = zext i32 %27 to i64
  %29 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %25, i64 %28
  %30 = getelementptr inbounds %"class.blink::DocumentPaintDefinition", %"class.blink::DocumentPaintDefinition"* %0, i64 0, i32 2, i32 0, i32 0, i32 2
  %31 = load i32, i32* %30, align 4
  %32 = icmp eq i32 %27, %31
  br i1 %32, label %33, label %119

33:                                               ; preds = %23
  %34 = icmp eq i32 %27, 0
  br i1 %34, label %50, label %35

35:                                               ; preds = %33
  %36 = getelementptr inbounds %"class.blink::DocumentPaintDefinition", %"class.blink::DocumentPaintDefinition"* %0, i64 0, i32 2, i32 0, i32 0, i32 0
  %37 = load %"class.WTF::AtomicString"*, %"class.WTF::AtomicString"** %36, align 8
  br label %38

38:                                               ; preds = %35, %46
  %39 = phi %"class.WTF::AtomicString"* [ %48, %46 ], [ %37, %35 ]
  %40 = phi %"class.WTF::String"* [ %47, %46 ], [ %25, %35 ]
  %41 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %39, i64 0, i32 0, i32 0, i32 0
  %42 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %41, align 8
  %43 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %40, i64 0, i32 0, i32 0
  %44 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %43, align 8
  %45 = tail call zeroext i1 @_ZN3WTF5EqualEPKNS_10StringImplES2_(%"class.WTF::StringImpl"* %42, %"class.WTF::StringImpl"* %44) #8
  br i1 %45, label %46, label %119

46:                                               ; preds = %38
  %47 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %40, i64 1
  %48 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %39, i64 1
  %49 = icmp eq %"class.WTF::String"* %47, %29
  br i1 %49, label %50, label %38

50:                                               ; preds = %46, %33
  %51 = getelementptr inbounds %"class.WTF::Vector.6", %"class.WTF::Vector.6"* %3, i64 0, i32 0, i32 0, i32 2
  %52 = load i32, i32* %51, align 4
  %53 = getelementptr inbounds %"class.blink::DocumentPaintDefinition", %"class.blink::DocumentPaintDefinition"* %0, i64 0, i32 3, i32 0, i32 0, i32 2
  %54 = load i32, i32* %53, align 4
  %55 = icmp eq i32 %52, %54
  br i1 %55, label %56, label %119

56:                                               ; preds = %50
  %57 = icmp eq i32 %52, 0
  br i1 %57, label %110, label %58

58:                                               ; preds = %56
  %59 = getelementptr inbounds %"class.WTF::Vector.6", %"class.WTF::Vector.6"* %3, i64 0, i32 0, i32 0, i32 0
  %60 = load %"class.blink::CSSSyntaxDefinition"*, %"class.blink::CSSSyntaxDefinition"** %59, align 8
  %61 = getelementptr inbounds %"class.blink::DocumentPaintDefinition", %"class.blink::DocumentPaintDefinition"* %0, i64 0, i32 3, i32 0, i32 0, i32 0
  %62 = load %"class.blink::CSSSyntaxDefinition"*, %"class.blink::CSSSyntaxDefinition"** %61, align 8
  %63 = zext i32 %52 to i64
  %64 = getelementptr inbounds %"class.blink::CSSSyntaxDefinition", %"class.blink::CSSSyntaxDefinition"* %60, i64 %63
  br label %65

65:                                               ; preds = %106, %58
  %66 = phi %"class.blink::CSSSyntaxDefinition"* [ %108, %106 ], [ %62, %58 ]
  %67 = phi %"class.blink::CSSSyntaxDefinition"* [ %107, %106 ], [ %60, %58 ]
  %68 = getelementptr inbounds %"class.blink::CSSSyntaxDefinition", %"class.blink::CSSSyntaxDefinition"* %67, i64 0, i32 0, i32 0, i32 0, i32 2
  %69 = load i32, i32* %68, align 4
  %70 = getelementptr inbounds %"class.blink::CSSSyntaxDefinition", %"class.blink::CSSSyntaxDefinition"* %66, i64 0, i32 0, i32 0, i32 0, i32 2
  %71 = load i32, i32* %70, align 4
  %72 = icmp eq i32 %69, %71
  br i1 %72, label %73, label %119

73:                                               ; preds = %65
  %74 = icmp eq i32 %69, 0
  br i1 %74, label %106, label %75

75:                                               ; preds = %73
  %76 = getelementptr inbounds %"class.blink::CSSSyntaxDefinition", %"class.blink::CSSSyntaxDefinition"* %67, i64 0, i32 0, i32 0, i32 0, i32 0
  %77 = load %"class.blink::CSSSyntaxComponent"*, %"class.blink::CSSSyntaxComponent"** %76, align 8
  %78 = getelementptr inbounds %"class.blink::CSSSyntaxDefinition", %"class.blink::CSSSyntaxDefinition"* %66, i64 0, i32 0, i32 0, i32 0, i32 0
  %79 = load %"class.blink::CSSSyntaxComponent"*, %"class.blink::CSSSyntaxComponent"** %78, align 8
  %80 = zext i32 %69 to i64
  %81 = getelementptr inbounds %"class.blink::CSSSyntaxComponent", %"class.blink::CSSSyntaxComponent"* %77, i64 %80
  br label %82

82:                                               ; preds = %102, %75
  %83 = phi %"class.blink::CSSSyntaxComponent"* [ %104, %102 ], [ %79, %75 ]
  %84 = phi %"class.blink::CSSSyntaxComponent"* [ %103, %102 ], [ %77, %75 ]
  %85 = getelementptr inbounds %"class.blink::CSSSyntaxComponent", %"class.blink::CSSSyntaxComponent"* %84, i64 0, i32 0
  %86 = load i32, i32* %85, align 8
  %87 = getelementptr inbounds %"class.blink::CSSSyntaxComponent", %"class.blink::CSSSyntaxComponent"* %83, i64 0, i32 0
  %88 = load i32, i32* %87, align 8
  %89 = icmp eq i32 %86, %88
  br i1 %89, label %90, label %119

90:                                               ; preds = %82
  %91 = getelementptr inbounds %"class.blink::CSSSyntaxComponent", %"class.blink::CSSSyntaxComponent"* %84, i64 0, i32 2, i32 0, i32 0
  %92 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %91, align 8
  %93 = getelementptr inbounds %"class.blink::CSSSyntaxComponent", %"class.blink::CSSSyntaxComponent"* %83, i64 0, i32 2, i32 0, i32 0
  %94 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %93, align 8
  %95 = tail call zeroext i1 @_ZN3WTF5EqualEPKNS_10StringImplES2_(%"class.WTF::StringImpl"* %92, %"class.WTF::StringImpl"* %94) #8
  br i1 %95, label %96, label %119

96:                                               ; preds = %90
  %97 = getelementptr inbounds %"class.blink::CSSSyntaxComponent", %"class.blink::CSSSyntaxComponent"* %84, i64 0, i32 3
  %98 = load i32, i32* %97, align 8
  %99 = getelementptr inbounds %"class.blink::CSSSyntaxComponent", %"class.blink::CSSSyntaxComponent"* %83, i64 0, i32 3
  %100 = load i32, i32* %99, align 8
  %101 = icmp eq i32 %98, %100
  br i1 %101, label %102, label %119

102:                                              ; preds = %96
  %103 = getelementptr inbounds %"class.blink::CSSSyntaxComponent", %"class.blink::CSSSyntaxComponent"* %84, i64 1
  %104 = getelementptr inbounds %"class.blink::CSSSyntaxComponent", %"class.blink::CSSSyntaxComponent"* %83, i64 1
  %105 = icmp eq %"class.blink::CSSSyntaxComponent"* %103, %81
  br i1 %105, label %106, label %82

106:                                              ; preds = %102, %73
  %107 = getelementptr inbounds %"class.blink::CSSSyntaxDefinition", %"class.blink::CSSSyntaxDefinition"* %67, i64 1
  %108 = getelementptr inbounds %"class.blink::CSSSyntaxDefinition", %"class.blink::CSSSyntaxDefinition"* %66, i64 1
  %109 = icmp eq %"class.blink::CSSSyntaxDefinition"* %107, %64
  br i1 %109, label %110, label %65

110:                                              ; preds = %106, %56
  %111 = getelementptr inbounds %"class.blink::DocumentPaintDefinition", %"class.blink::DocumentPaintDefinition"* %0, i64 0, i32 4
  %112 = load i8, i8* %111, align 8, !range !4
  %113 = icmp ne i8 %112, 0
  %114 = xor i1 %113, %4
  br i1 %114, label %119, label %115

115:                                              ; preds = %110
  %116 = getelementptr inbounds %"class.blink::DocumentPaintDefinition", %"class.blink::DocumentPaintDefinition"* %0, i64 0, i32 5
  %117 = load i32, i32* %116, align 4
  %118 = add i32 %117, 1
  store i32 %118, i32* %116, align 4
  br label %119

119:                                              ; preds = %38, %65, %82, %90, %96, %14, %50, %5, %23, %110, %115
  %120 = phi i1 [ true, %115 ], [ false, %110 ], [ false, %14 ], [ false, %23 ], [ false, %5 ], [ false, %50 ], [ false, %96 ], [ false, %90 ], [ false, %82 ], [ false, %65 ], [ false, %38 ]
  ret i1 %120
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #2

declare void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"*) local_unnamed_addr #3

declare void @_ZN3WTF18PartitionAllocator11FreeBackingEPv(i8*) local_unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden i64 @_ZN3WTF18PartitionAllocator13QuantizedSizeIN5blink13CSSPropertyIDEEEmm(i64) local_unnamed_addr #0 comdat align 2 {
  %2 = alloca %"class.logging::CheckOpResult", align 8
  %3 = alloca %"class.logging::CheckOpResult", align 8
  %4 = alloca %"class.logging::CheckError", align 8
  %5 = bitcast %"class.logging::CheckOpResult"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %5) #8
  %6 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %3, i64 0, i32 0
  store i8* inttoptr (i64 -6148914691236517206 to i8*), i8** %6, align 8
  %7 = bitcast %"class.logging::CheckOpResult"* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %7)
  %8 = icmp ugt i64 %0, 536346624
  br i1 %8, label %10, label %9

9:                                                ; preds = %1
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %7)
  store i8* null, i8** %6, align 8
  br label %19

10:                                               ; preds = %1
  %11 = tail call i8* @_ZN7logging15CheckOpValueStrEm(i64 %0) #8
  %12 = tail call i8* @_ZN7logging15CheckOpValueStrEm(i64 536346624) #8
  call void @_ZN7logging13CheckOpResultC1EPKcPcS3_(%"class.logging::CheckOpResult"* nonnull %2, i8* getelementptr inbounds ([44 x i8], [44 x i8]* @.str, i64 0, i64 0), i8* %11, i8* %12) #8
  %13 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %2, i64 0, i32 0
  %14 = load i8*, i8** %13, align 8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %7)
  store i8* %14, i8** %6, align 8
  %15 = icmp eq i8* %14, null
  br i1 %15, label %19, label %16

16:                                               ; preds = %10
  %17 = bitcast %"class.logging::CheckError"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %17) #8
  call void @_ZN7logging10CheckError7CheckOpEPKciPNS_13CheckOpResultE(%"class.logging::CheckError"* nonnull sret %4, i8* getelementptr inbounds ([78 x i8], [78 x i8]* @.str.1, i64 0, i64 0), i32 31, %"class.logging::CheckOpResult"* nonnull %3) #8
  %18 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %4) #8
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %4) #8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %17) #8
  br label %19

19:                                               ; preds = %9, %10, %16
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %5) #8
  %20 = shl i64 %0, 2
  %21 = call i64 @_ZN3WTF10Partitions23BufferPotentialCapacityEm(i64 %20) #8
  ret i64 %21
}

declare void @_ZN7logging10CheckError7CheckOpEPKciPNS_13CheckOpResultE(%"class.logging::CheckError"* sret, i8*, i32, %"class.logging::CheckOpResult"*) local_unnamed_addr #3

declare dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"*) local_unnamed_addr #3

; Function Attrs: nounwind
declare void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"*) unnamed_addr #4

declare i64 @_ZN3WTF10Partitions23BufferPotentialCapacityEm(i64) local_unnamed_addr #3

declare i8* @_ZN7logging15CheckOpValueStrEm(i64) local_unnamed_addr #3

declare void @_ZN7logging13CheckOpResultC1EPKcPcS3_(%"class.logging::CheckOpResult"*, i8*, i8*, i8*) unnamed_addr #3

declare i8* @_ZN3WTF18PartitionAllocator15AllocateBackingEmPKc(i64, i8*) local_unnamed_addr #3

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #2

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden i64 @_ZN3WTF18PartitionAllocator13QuantizedSizeINS_12AtomicStringEEEmm(i64) local_unnamed_addr #0 comdat align 2 {
  %2 = alloca %"class.logging::CheckOpResult", align 8
  %3 = alloca %"class.logging::CheckOpResult", align 8
  %4 = alloca %"class.logging::CheckError", align 8
  %5 = bitcast %"class.logging::CheckOpResult"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %5) #8
  %6 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %3, i64 0, i32 0
  store i8* inttoptr (i64 -6148914691236517206 to i8*), i8** %6, align 8
  %7 = bitcast %"class.logging::CheckOpResult"* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %7)
  %8 = icmp ugt i64 %0, 268173312
  br i1 %8, label %10, label %9

9:                                                ; preds = %1
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %7)
  store i8* null, i8** %6, align 8
  br label %19

10:                                               ; preds = %1
  %11 = tail call i8* @_ZN7logging15CheckOpValueStrEm(i64 %0) #8
  %12 = tail call i8* @_ZN7logging15CheckOpValueStrEm(i64 268173312) #8
  call void @_ZN7logging13CheckOpResultC1EPKcPcS3_(%"class.logging::CheckOpResult"* nonnull %2, i8* getelementptr inbounds ([44 x i8], [44 x i8]* @.str, i64 0, i64 0), i8* %11, i8* %12) #8
  %13 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %2, i64 0, i32 0
  %14 = load i8*, i8** %13, align 8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %7)
  store i8* %14, i8** %6, align 8
  %15 = icmp eq i8* %14, null
  br i1 %15, label %19, label %16

16:                                               ; preds = %10
  %17 = bitcast %"class.logging::CheckError"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %17) #8
  call void @_ZN7logging10CheckError7CheckOpEPKciPNS_13CheckOpResultE(%"class.logging::CheckError"* nonnull sret %4, i8* getelementptr inbounds ([78 x i8], [78 x i8]* @.str.1, i64 0, i64 0), i32 31, %"class.logging::CheckOpResult"* nonnull %3) #8
  %18 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %4) #8
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %4) #8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %17) #8
  br label %19

19:                                               ; preds = %9, %10, %16
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %5) #8
  %20 = shl i64 %0, 3
  %21 = call i64 @_ZN3WTF10Partitions23BufferPotentialCapacityEm(i64 %20) #8
  ret i64 %21
}

; Function Attrs: nounwind readnone speculatable
declare { i33, i1 } @llvm.sadd.with.overflow.i33(i33, i33) #5

; Function Attrs: cold noreturn nounwind
declare void @llvm.trap() #6

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden i64 @_ZN3WTF18PartitionAllocator13QuantizedSizeIN5blink19CSSSyntaxDefinitionEEEmm(i64) local_unnamed_addr #0 comdat align 2 {
  %2 = alloca %"class.logging::CheckOpResult", align 8
  %3 = alloca %"class.logging::CheckOpResult", align 8
  %4 = alloca %"class.logging::CheckError", align 8
  %5 = bitcast %"class.logging::CheckOpResult"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %5) #8
  %6 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %3, i64 0, i32 0
  store i8* inttoptr (i64 -6148914691236517206 to i8*), i8** %6, align 8
  %7 = bitcast %"class.logging::CheckOpResult"* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %7)
  %8 = icmp ugt i64 %0, 134086656
  br i1 %8, label %10, label %9

9:                                                ; preds = %1
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %7)
  store i8* null, i8** %6, align 8
  br label %19

10:                                               ; preds = %1
  %11 = tail call i8* @_ZN7logging15CheckOpValueStrEm(i64 %0) #8
  %12 = tail call i8* @_ZN7logging15CheckOpValueStrEm(i64 134086656) #8
  call void @_ZN7logging13CheckOpResultC1EPKcPcS3_(%"class.logging::CheckOpResult"* nonnull %2, i8* getelementptr inbounds ([44 x i8], [44 x i8]* @.str, i64 0, i64 0), i8* %11, i8* %12) #8
  %13 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %2, i64 0, i32 0
  %14 = load i8*, i8** %13, align 8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %7)
  store i8* %14, i8** %6, align 8
  %15 = icmp eq i8* %14, null
  br i1 %15, label %19, label %16

16:                                               ; preds = %10
  %17 = bitcast %"class.logging::CheckError"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %17) #8
  call void @_ZN7logging10CheckError7CheckOpEPKciPNS_13CheckOpResultE(%"class.logging::CheckError"* nonnull sret %4, i8* getelementptr inbounds ([78 x i8], [78 x i8]* @.str.1, i64 0, i64 0), i32 31, %"class.logging::CheckOpResult"* nonnull %3) #8
  %18 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %4) #8
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %4) #8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %17) #8
  br label %19

19:                                               ; preds = %9, %10, %16
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %5) #8
  %20 = shl i64 %0, 4
  %21 = call i64 @_ZN3WTF10Partitions23BufferPotentialCapacityEm(i64 %20) #8
  ret i64 %21
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN3WTF6VectorIN5blink18CSSSyntaxComponentELj0ENS_18PartitionAllocatorEEC2ERKS4_(%"class.WTF::Vector.9"*, %"class.WTF::Vector.9"* dereferenceable(16)) unnamed_addr #0 comdat align 2 {
  %3 = getelementptr inbounds %"class.WTF::Vector.9", %"class.WTF::Vector.9"* %1, i64 0, i32 0, i32 0, i32 1
  %4 = load i32, i32* %3, align 8
  %5 = getelementptr inbounds %"class.WTF::Vector.9", %"class.WTF::Vector.9"* %0, i64 0, i32 0, i32 0, i32 0
  store %"class.blink::CSSSyntaxComponent"* null, %"class.blink::CSSSyntaxComponent"** %5, align 8
  %6 = getelementptr inbounds %"class.WTF::Vector.9", %"class.WTF::Vector.9"* %0, i64 0, i32 0, i32 0, i32 1
  store i32 0, i32* %6, align 8
  %7 = icmp eq i32 %4, 0
  br i1 %7, label %17, label %8

8:                                                ; preds = %2
  %9 = zext i32 %4 to i64
  %10 = tail call i64 @_ZN3WTF18PartitionAllocator13QuantizedSizeIN5blink18CSSSyntaxComponentEEEmm(i64 %9) #8
  %11 = tail call i8* @_ZN3WTF18PartitionAllocator15AllocateBackingEmPKc(i64 %10, i8* getelementptr inbounds ([73 x i8], [73 x i8]* @__PRETTY_FUNCTION__._ZN3WTF21GetStringWithTypeNameIN5blink18CSSSyntaxComponentEEEPKcv, i64 0, i64 0)) #8
  %12 = ptrtoint i8* %11 to i64
  %13 = bitcast %"class.WTF::Vector.9"* %0 to i64*
  store atomic i64 %12, i64* %13 monotonic, align 8
  %14 = udiv i64 %10, 24
  %15 = trunc i64 %14 to i32
  store i32 %15, i32* %6, align 8
  %16 = bitcast i8* %11 to %"class.blink::CSSSyntaxComponent"*
  br label %17

17:                                               ; preds = %2, %8
  %18 = phi %"class.blink::CSSSyntaxComponent"* [ null, %2 ], [ %16, %8 ]
  %19 = getelementptr inbounds %"class.WTF::Vector.9", %"class.WTF::Vector.9"* %1, i64 0, i32 0, i32 0, i32 2
  %20 = load i32, i32* %19, align 4
  %21 = getelementptr inbounds %"class.WTF::Vector.9", %"class.WTF::Vector.9"* %0, i64 0, i32 0, i32 0, i32 2
  store i32 %20, i32* %21, align 4
  %22 = getelementptr inbounds %"class.WTF::Vector.9", %"class.WTF::Vector.9"* %1, i64 0, i32 0, i32 0, i32 0
  %23 = load %"class.blink::CSSSyntaxComponent"*, %"class.blink::CSSSyntaxComponent"** %22, align 8
  %24 = load i32, i32* %19, align 4
  %25 = zext i32 %24 to i64
  %26 = getelementptr inbounds %"class.blink::CSSSyntaxComponent", %"class.blink::CSSSyntaxComponent"* %23, i64 %25
  %27 = icmp eq i32 %24, 0
  br i1 %27, label %62, label %28

28:                                               ; preds = %17, %55
  %29 = phi %"class.blink::CSSSyntaxComponent"* [ %59, %55 ], [ %18, %17 ]
  %30 = phi %"class.blink::CSSSyntaxComponent"* [ %60, %55 ], [ %23, %17 ]
  %31 = getelementptr inbounds %"class.blink::CSSSyntaxComponent", %"class.blink::CSSSyntaxComponent"* %29, i64 0, i32 0
  %32 = getelementptr inbounds %"class.blink::CSSSyntaxComponent", %"class.blink::CSSSyntaxComponent"* %30, i64 0, i32 0
  %33 = load i32, i32* %32, align 8
  store i32 %33, i32* %31, align 8
  %34 = getelementptr inbounds %"class.blink::CSSSyntaxComponent", %"class.blink::CSSSyntaxComponent"* %30, i64 0, i32 2, i32 0, i32 0
  %35 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %34, align 8
  %36 = getelementptr inbounds %"class.blink::CSSSyntaxComponent", %"class.blink::CSSSyntaxComponent"* %29, i64 0, i32 2, i32 0, i32 0
  store %"class.WTF::StringImpl"* %35, %"class.WTF::StringImpl"** %36, align 8
  %37 = icmp eq %"class.WTF::StringImpl"* %35, null
  br i1 %37, label %55, label %38

38:                                               ; preds = %28
  %39 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %35, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %40 = load atomic i32, i32* %39 monotonic, align 4
  %41 = and i32 %40, 2
  %42 = icmp eq i32 %41, 0
  br i1 %42, label %43, label %55

43:                                               ; preds = %38
  %44 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %35, i64 0, i32 0
  %45 = load i32, i32* %44, align 4
  %46 = zext i32 %45 to i33
  %47 = tail call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %46, i33 1) #8
  %48 = extractvalue { i33, i1 } %47, 1
  %49 = extractvalue { i33, i1 } %47, 0
  %50 = icmp slt i33 %49, 0
  %51 = or i1 %48, %50
  br i1 %51, label %52, label %53, !prof !3

52:                                               ; preds = %43
  tail call void @llvm.trap() #8
  unreachable

53:                                               ; preds = %43
  %54 = trunc i33 %49 to i32
  store i32 %54, i32* %44, align 4
  br label %55

55:                                               ; preds = %53, %38, %28
  %56 = getelementptr inbounds %"class.blink::CSSSyntaxComponent", %"class.blink::CSSSyntaxComponent"* %29, i64 0, i32 3
  %57 = getelementptr inbounds %"class.blink::CSSSyntaxComponent", %"class.blink::CSSSyntaxComponent"* %30, i64 0, i32 3
  %58 = load i32, i32* %57, align 8
  store i32 %58, i32* %56, align 8
  %59 = getelementptr inbounds %"class.blink::CSSSyntaxComponent", %"class.blink::CSSSyntaxComponent"* %29, i64 1
  %60 = getelementptr inbounds %"class.blink::CSSSyntaxComponent", %"class.blink::CSSSyntaxComponent"* %30, i64 1
  %61 = icmp eq %"class.blink::CSSSyntaxComponent"* %60, %26
  br i1 %61, label %62, label %28

62:                                               ; preds = %55, %17
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden i64 @_ZN3WTF18PartitionAllocator13QuantizedSizeIN5blink18CSSSyntaxComponentEEEmm(i64) local_unnamed_addr #0 comdat align 2 {
  %2 = alloca %"class.logging::CheckOpResult", align 8
  %3 = alloca %"class.logging::CheckOpResult", align 8
  %4 = alloca %"class.logging::CheckError", align 8
  %5 = bitcast %"class.logging::CheckOpResult"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %5) #8
  %6 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %3, i64 0, i32 0
  store i8* inttoptr (i64 -6148914691236517206 to i8*), i8** %6, align 8
  %7 = bitcast %"class.logging::CheckOpResult"* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %7)
  %8 = icmp ugt i64 %0, 89391104
  br i1 %8, label %10, label %9

9:                                                ; preds = %1
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %7)
  store i8* null, i8** %6, align 8
  br label %19

10:                                               ; preds = %1
  %11 = tail call i8* @_ZN7logging15CheckOpValueStrEm(i64 %0) #8
  %12 = tail call i8* @_ZN7logging15CheckOpValueStrEm(i64 89391104) #8
  call void @_ZN7logging13CheckOpResultC1EPKcPcS3_(%"class.logging::CheckOpResult"* nonnull %2, i8* getelementptr inbounds ([44 x i8], [44 x i8]* @.str, i64 0, i64 0), i8* %11, i8* %12) #8
  %13 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %2, i64 0, i32 0
  %14 = load i8*, i8** %13, align 8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %7)
  store i8* %14, i8** %6, align 8
  %15 = icmp eq i8* %14, null
  br i1 %15, label %19, label %16

16:                                               ; preds = %10
  %17 = bitcast %"class.logging::CheckError"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %17) #8
  call void @_ZN7logging10CheckError7CheckOpEPKciPNS_13CheckOpResultE(%"class.logging::CheckError"* nonnull sret %4, i8* getelementptr inbounds ([78 x i8], [78 x i8]* @.str.1, i64 0, i64 0), i32 31, %"class.logging::CheckOpResult"* nonnull %3) #8
  %18 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %4) #8
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %4) #8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %17) #8
  br label %19

19:                                               ; preds = %9, %10, %16
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %5) #8
  %20 = mul i64 %0, 24
  %21 = call i64 @_ZN3WTF10Partitions23BufferPotentialCapacityEm(i64 %20) #8
  ret i64 %21
}

declare zeroext i1 @_ZN3WTF5EqualEPKNS_10StringImplES2_(%"class.WTF::StringImpl"*, %"class.WTF::StringImpl"*) local_unnamed_addr #3

; Function Attrs: nofree nounwind readonly
declare i32 @bcmp(i8* nocapture, i8* nocapture, i64) local_unnamed_addr #7

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind }
attributes #3 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind readnone speculatable }
attributes #6 = { cold noreturn nounwind }
attributes #7 = { nofree nounwind readonly }
attributes #8 = { nounwind }
attributes #9 = { builtin nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{!"branch_weights", i32 2000, i32 1}
!3 = !{!"branch_weights", i32 1, i32 2000}
!4 = !{i8 0, i8 2}
