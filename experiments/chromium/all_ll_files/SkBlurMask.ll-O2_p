; ModuleID = '../../third_party/skia/src/core/SkBlurMask.cpp'
source_filename = "../../third_party/skia/src/core/SkBlurMask.cpp"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%struct.SkMask = type <{ i8*, %struct.SkIRect, i32, i8, [3 x i8] }>
%struct.SkIRect = type { i32, i32, i32, i32 }
%struct.SkIPoint = type { i32, i32 }
%class.SkMaskBlurFilter = type { double, double }
%struct.SkRect = type { float, float, float, float }
%class.SkRRect = type { %struct.SkRect, [4 x %struct.SkPoint], i32 }
%struct.SkPoint = type { float, float }

@.str = private unnamed_addr constant [47 x i8] c"../../third_party/skia/src/core/SkBlurMask.cpp\00", align 1
@.str.1 = private unnamed_addr constant [18 x i8] c"Unhandled format.\00", align 1

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden float @_ZN10SkBlurMask20ConvertRadiusToSigmaEf(float) local_unnamed_addr #0 align 2 {
  %2 = fcmp ogt float %0, 0.000000e+00
  %3 = fmul float %0, 0x3FE279A6C0000000
  %4 = fadd float %3, 5.000000e-01
  %5 = select i1 %2, float %4, float 0.000000e+00
  ret float %5
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden float @_ZN10SkBlurMask20ConvertSigmaToRadiusEf(float) local_unnamed_addr #0 align 2 {
  %2 = fcmp ogt float %0, 5.000000e-01
  br i1 %2, label %3, label %6

3:                                                ; preds = %1
  %4 = fadd float %0, -5.000000e-01
  %5 = fdiv float %4, 0x3FE279A6C0000000
  br label %6

6:                                                ; preds = %1, %3
  %7 = phi float [ %5, %3 ], [ 0.000000e+00, %1 ]
  ret float %7
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_Z16SkMask_FreeImagePh(i8*) local_unnamed_addr #1 {
  tail call void @_ZN6SkMask9FreeImageEPv(i8* %0) #9
  ret void
}

declare void @_ZN6SkMask9FreeImageEPv(i8*) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZN10SkBlurMask7BoxBlurEP6SkMaskRKS0_f11SkBlurStyleP8SkIPoint(%struct.SkMask*, %struct.SkMask* dereferenceable(32), float, i32, %struct.SkIPoint*) local_unnamed_addr #1 align 2 {
  %6 = alloca %class.SkMaskBlurFilter, align 8
  %7 = getelementptr inbounds %struct.SkMask, %struct.SkMask* %1, i64 0, i32 3
  %8 = load i8, i8* %7, align 4
  switch i8 %8, label %1303 [
    i8 0, label %9
    i8 1, label %9
    i8 3, label %9
    i8 4, label %9
  ]

9:                                                ; preds = %5, %5, %5, %5
  %10 = bitcast %class.SkMaskBlurFilter* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %10) #9
  %11 = fpext float %2 to double
  %12 = bitcast %class.SkMaskBlurFilter* %6 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %12, i8 -1, i64 16, i1 false)
  call void @_ZN16SkMaskBlurFilterC1Edd(%class.SkMaskBlurFilter* nonnull %6, double %11, double %11) #9
  %13 = call zeroext i1 @_ZNK16SkMaskBlurFilter9hasNoBlurEv(%class.SkMaskBlurFilter* nonnull %6) #9
  br i1 %13, label %14, label %23

14:                                               ; preds = %9
  %15 = icmp eq i32 %3, 2
  br i1 %15, label %16, label %1301

16:                                               ; preds = %14
  %17 = getelementptr inbounds %struct.SkMask, %struct.SkMask* %0, i64 0, i32 3
  %18 = bitcast %struct.SkMask* %0 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %18, i8 0, i64 28, i1 false)
  store i8 1, i8* %17, align 4
  %19 = icmp eq %struct.SkIPoint* %4, null
  br i1 %19, label %1301, label %20

20:                                               ; preds = %16
  %21 = getelementptr inbounds %struct.SkIPoint, %struct.SkIPoint* %4, i64 0, i32 0
  store i32 0, i32* %21, align 4
  %22 = getelementptr inbounds %struct.SkIPoint, %struct.SkIPoint* %4, i64 0, i32 1
  store i32 0, i32* %22, align 4
  br label %1301

23:                                               ; preds = %9
  %24 = call i64 @_ZNK16SkMaskBlurFilter4blurERK6SkMaskPS0_(%class.SkMaskBlurFilter* nonnull %6, %struct.SkMask* dereferenceable(32) %1, %struct.SkMask* %0) #9
  %25 = trunc i64 %24 to i32
  %26 = lshr i64 %24, 32
  %27 = trunc i64 %26 to i32
  %28 = getelementptr inbounds %struct.SkMask, %struct.SkMask* %1, i64 0, i32 0
  %29 = load i8*, i8** %28, align 8
  %30 = icmp eq i8* %29, null
  br i1 %30, label %35, label %31

31:                                               ; preds = %23
  %32 = getelementptr inbounds %struct.SkMask, %struct.SkMask* %0, i64 0, i32 0
  %33 = load i8*, i8** %32, align 8
  %34 = icmp eq i8* %33, null
  br i1 %34, label %1301, label %35

35:                                               ; preds = %23, %31
  %36 = icmp eq %struct.SkIPoint* %4, null
  br i1 %36, label %40, label %37

37:                                               ; preds = %35
  %38 = bitcast %struct.SkIPoint* %4 to i64*
  store i64 %24, i64* %38, align 4
  %39 = load i8*, i8** %28, align 8
  br label %40

40:                                               ; preds = %35, %37
  %41 = phi i8* [ %29, %35 ], [ %39, %37 ]
  %42 = icmp eq i8* %41, null
  br i1 %42, label %43, label %56

43:                                               ; preds = %40
  %44 = icmp eq i32 %3, 3
  br i1 %44, label %45, label %1301

45:                                               ; preds = %43
  %46 = getelementptr inbounds %struct.SkMask, %struct.SkMask* %1, i64 0, i32 1
  %47 = getelementptr inbounds %struct.SkMask, %struct.SkMask* %0, i64 0, i32 1
  %48 = bitcast %struct.SkIRect* %47 to i8*
  %49 = bitcast %struct.SkIRect* %46 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %48, i8* align 4 %49, i64 16, i1 false)
  %50 = getelementptr inbounds %struct.SkMask, %struct.SkMask* %0, i64 0, i32 1, i32 2
  %51 = load i32, i32* %50, align 4
  %52 = getelementptr inbounds %struct.SkIRect, %struct.SkIRect* %47, i64 0, i32 0
  %53 = load i32, i32* %52, align 4
  %54 = sub i32 %51, %53
  %55 = getelementptr inbounds %struct.SkMask, %struct.SkMask* %0, i64 0, i32 2
  store i32 %54, i32* %55, align 8
  br label %1301

56:                                               ; preds = %40
  switch i32 %3, label %1301 [
    i32 3, label %781
    i32 1, label %57
    i32 2, label %473
  ]

57:                                               ; preds = %56
  %58 = getelementptr inbounds %struct.SkMask, %struct.SkMask* %0, i64 0, i32 0
  %59 = load i8*, i8** %58, align 8
  %60 = getelementptr inbounds %struct.SkMask, %struct.SkMask* %0, i64 0, i32 2
  %61 = load i32, i32* %60, align 8
  %62 = mul i32 %61, %27
  %63 = add i32 %62, %25
  %64 = zext i32 %63 to i64
  %65 = getelementptr inbounds i8, i8* %59, i64 %64
  %66 = load i8, i8* %7, align 4
  switch i8 %66, label %472 [
    i8 0, label %67
    i8 1, label %129
    i8 3, label %230
    i8 4, label %334
  ]

67:                                               ; preds = %57
  %68 = getelementptr inbounds %struct.SkMask, %struct.SkMask* %1, i64 0, i32 1, i32 2
  %69 = load i32, i32* %68, align 4
  %70 = getelementptr inbounds %struct.SkMask, %struct.SkMask* %1, i64 0, i32 1, i32 0
  %71 = load i32, i32* %70, align 4
  %72 = sub i32 %69, %71
  %73 = getelementptr inbounds %struct.SkMask, %struct.SkMask* %1, i64 0, i32 1, i32 3
  %74 = load i32, i32* %73, align 4
  %75 = getelementptr inbounds %struct.SkMask, %struct.SkMask* %1, i64 0, i32 1, i32 1
  %76 = load i32, i32* %75, align 4
  %77 = sub i32 %74, %76
  %78 = icmp sgt i32 %77, 0
  br i1 %78, label %79, label %1301

79:                                               ; preds = %67
  %80 = getelementptr inbounds %struct.SkMask, %struct.SkMask* %1, i64 0, i32 2
  %81 = load i32, i32* %80, align 8
  %82 = icmp sgt i32 %72, 0
  %83 = sub nsw i32 %61, %72
  %84 = sext i32 %83 to i64
  %85 = zext i32 %81 to i64
  br label %86

86:                                               ; preds = %124, %79
  %87 = phi i8* [ %41, %79 ], [ %127, %124 ]
  %88 = phi i32 [ %77, %79 ], [ %90, %124 ]
  %89 = phi i8* [ %65, %79 ], [ %126, %124 ]
  %90 = add nsw i32 %88, -1
  br i1 %82, label %91, label %124

91:                                               ; preds = %86
  %92 = ptrtoint i8* %87 to i64
  br label %93

93:                                               ; preds = %91, %93
  %94 = phi i8* [ %116, %93 ], [ %89, %91 ]
  %95 = phi i32 [ %98, %93 ], [ %72, %91 ]
  %96 = phi i64 [ %121, %93 ], [ %92, %91 ]
  %97 = phi i32 [ %122, %93 ], [ 7, %91 ]
  %98 = add nsw i32 %95, -1
  %99 = inttoptr i64 %96 to i8*
  %100 = load i8, i8* %99, align 1
  %101 = zext i8 %100 to i32
  %102 = shl i32 1, %97
  %103 = and i32 %102, %101
  %104 = icmp eq i32 %103, 0
  %105 = select i1 %104, i32 0, i32 255
  %106 = load i8, i8* %94, align 1
  %107 = zext i8 %106 to i32
  %108 = add nuw nsw i32 %105, %107
  %109 = mul nuw nsw i32 %105, %107
  %110 = add nuw nsw i32 %109, 128
  %111 = lshr i32 %110, 8
  %112 = add nuw nsw i32 %111, %110
  %113 = lshr i32 %112, 8
  %114 = sub nsw i32 %108, %113
  %115 = trunc i32 %114 to i8
  store i8 %115, i8* %94, align 1
  %116 = getelementptr inbounds i8, i8* %94, i64 1
  %117 = icmp sgt i32 %97, 0
  %118 = add nsw i32 %97, -1
  %119 = getelementptr inbounds i8, i8* %99, i64 1
  %120 = ptrtoint i8* %119 to i64
  %121 = select i1 %117, i64 %96, i64 %120
  %122 = select i1 %117, i32 %118, i32 7
  %123 = icmp sgt i32 %98, 0
  br i1 %123, label %93, label %124

124:                                              ; preds = %93, %86
  %125 = phi i8* [ %89, %86 ], [ %116, %93 ]
  %126 = getelementptr inbounds i8, i8* %125, i64 %84
  %127 = getelementptr inbounds i8, i8* %87, i64 %85
  %128 = icmp sgt i32 %90, 0
  br i1 %128, label %86, label %1301

129:                                              ; preds = %57
  %130 = getelementptr inbounds %struct.SkMask, %struct.SkMask* %1, i64 0, i32 1, i32 2
  %131 = load i32, i32* %130, align 4
  %132 = getelementptr inbounds %struct.SkMask, %struct.SkMask* %1, i64 0, i32 1, i32 0
  %133 = load i32, i32* %132, align 4
  %134 = sub i32 %131, %133
  %135 = getelementptr inbounds %struct.SkMask, %struct.SkMask* %1, i64 0, i32 1, i32 3
  %136 = load i32, i32* %135, align 4
  %137 = getelementptr inbounds %struct.SkMask, %struct.SkMask* %1, i64 0, i32 1, i32 1
  %138 = load i32, i32* %137, align 4
  %139 = sub i32 %136, %138
  %140 = icmp sgt i32 %139, 0
  br i1 %140, label %141, label %1301

141:                                              ; preds = %129
  %142 = getelementptr inbounds %struct.SkMask, %struct.SkMask* %1, i64 0, i32 2
  %143 = load i32, i32* %142, align 8
  %144 = icmp sgt i32 %134, 0
  %145 = sub nsw i32 %61, %134
  %146 = sext i32 %145 to i64
  %147 = zext i32 %143 to i64
  %148 = xor i32 %133, -1
  %149 = add i32 %131, %148
  %150 = zext i32 %149 to i64
  %151 = add nuw nsw i64 %150, 1
  %152 = zext i32 %149 to i64
  %153 = add nuw nsw i64 %152, 1
  %154 = icmp ult i64 %151, 16
  %155 = and i64 %151, 8589934576
  %156 = trunc i64 %155 to i32
  %157 = sub i32 %134, %156
  %158 = icmp eq i64 %151, %155
  br label %159

159:                                              ; preds = %224, %141
  %160 = phi i64 [ %229, %224 ], [ 0, %141 ]
  %161 = phi i8* [ %227, %224 ], [ %41, %141 ]
  %162 = phi i32 [ %168, %224 ], [ %139, %141 ]
  %163 = phi i8* [ %226, %224 ], [ %65, %141 ]
  %164 = mul i64 %160, %147
  %165 = getelementptr i8, i8* %41, i64 %164
  %166 = add i64 %153, %164
  %167 = getelementptr i8, i8* %41, i64 %166
  %168 = add nsw i32 %162, -1
  br i1 %144, label %169, label %224

169:                                              ; preds = %159
  br i1 %154, label %200, label %170

170:                                              ; preds = %169
  %171 = getelementptr i8, i8* %163, i64 %153
  %172 = icmp ult i8* %163, %167
  %173 = icmp ult i8* %165, %171
  %174 = and i1 %172, %173
  br i1 %174, label %200, label %175

175:                                              ; preds = %170
  %176 = getelementptr i8, i8* %163, i64 %155
  %177 = getelementptr i8, i8* %161, i64 %155
  br label %178

178:                                              ; preds = %178, %175
  %179 = phi i64 [ 0, %175 ], [ %197, %178 ]
  %180 = getelementptr i8, i8* %163, i64 %179
  %181 = getelementptr i8, i8* %161, i64 %179
  %182 = bitcast i8* %181 to <16 x i8>*
  %183 = load <16 x i8>, <16 x i8>* %182, align 1, !alias.scope !2
  %184 = zext <16 x i8> %183 to <16 x i32>
  %185 = bitcast i8* %180 to <16 x i8>*
  %186 = load <16 x i8>, <16 x i8>* %185, align 1, !alias.scope !5, !noalias !2
  %187 = zext <16 x i8> %186 to <16 x i32>
  %188 = add nuw nsw <16 x i32> %187, %184
  %189 = mul nuw nsw <16 x i32> %187, %184
  %190 = add nuw nsw <16 x i32> %189, <i32 128, i32 128, i32 128, i32 128, i32 128, i32 128, i32 128, i32 128, i32 128, i32 128, i32 128, i32 128, i32 128, i32 128, i32 128, i32 128>
  %191 = lshr <16 x i32> %190, <i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8>
  %192 = add nuw nsw <16 x i32> %191, %190
  %193 = lshr <16 x i32> %192, <i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8>
  %194 = sub nsw <16 x i32> %188, %193
  %195 = trunc <16 x i32> %194 to <16 x i8>
  %196 = bitcast i8* %180 to <16 x i8>*
  store <16 x i8> %195, <16 x i8>* %196, align 1, !alias.scope !5, !noalias !2
  %197 = add i64 %179, 16
  %198 = icmp eq i64 %197, %155
  br i1 %198, label %199, label %178, !llvm.loop !7

199:                                              ; preds = %178
  br i1 %158, label %224, label %200

200:                                              ; preds = %199, %170, %169
  %201 = phi i8* [ %163, %170 ], [ %163, %169 ], [ %176, %199 ]
  %202 = phi i32 [ %134, %170 ], [ %134, %169 ], [ %157, %199 ]
  %203 = phi i8* [ %161, %170 ], [ %161, %169 ], [ %177, %199 ]
  br label %204

204:                                              ; preds = %200, %204
  %205 = phi i8* [ %221, %204 ], [ %201, %200 ]
  %206 = phi i32 [ %208, %204 ], [ %202, %200 ]
  %207 = phi i8* [ %222, %204 ], [ %203, %200 ]
  %208 = add nsw i32 %206, -1
  %209 = load i8, i8* %207, align 1
  %210 = zext i8 %209 to i32
  %211 = load i8, i8* %205, align 1
  %212 = zext i8 %211 to i32
  %213 = add nuw nsw i32 %212, %210
  %214 = mul nuw nsw i32 %212, %210
  %215 = add nuw nsw i32 %214, 128
  %216 = lshr i32 %215, 8
  %217 = add nuw nsw i32 %216, %215
  %218 = lshr i32 %217, 8
  %219 = sub nsw i32 %213, %218
  %220 = trunc i32 %219 to i8
  store i8 %220, i8* %205, align 1
  %221 = getelementptr inbounds i8, i8* %205, i64 1
  %222 = getelementptr inbounds i8, i8* %207, i64 1
  %223 = icmp sgt i32 %208, 0
  br i1 %223, label %204, label %224, !llvm.loop !9

224:                                              ; preds = %204, %199, %159
  %225 = phi i8* [ %163, %159 ], [ %176, %199 ], [ %221, %204 ]
  %226 = getelementptr inbounds i8, i8* %225, i64 %146
  %227 = getelementptr inbounds i8, i8* %161, i64 %147
  %228 = icmp sgt i32 %168, 0
  %229 = add i64 %160, 1
  br i1 %228, label %159, label %1301

230:                                              ; preds = %57
  %231 = getelementptr inbounds %struct.SkMask, %struct.SkMask* %1, i64 0, i32 1, i32 2
  %232 = load i32, i32* %231, align 4
  %233 = getelementptr inbounds %struct.SkMask, %struct.SkMask* %1, i64 0, i32 1, i32 0
  %234 = load i32, i32* %233, align 4
  %235 = sub i32 %232, %234
  %236 = getelementptr inbounds %struct.SkMask, %struct.SkMask* %1, i64 0, i32 1, i32 3
  %237 = load i32, i32* %236, align 4
  %238 = getelementptr inbounds %struct.SkMask, %struct.SkMask* %1, i64 0, i32 1, i32 1
  %239 = load i32, i32* %238, align 4
  %240 = sub i32 %237, %239
  %241 = icmp sgt i32 %240, 0
  br i1 %241, label %242, label %1301

242:                                              ; preds = %230
  %243 = getelementptr inbounds %struct.SkMask, %struct.SkMask* %1, i64 0, i32 2
  %244 = load i32, i32* %243, align 8
  %245 = icmp sgt i32 %235, 0
  %246 = sub nsw i32 %61, %235
  %247 = sext i32 %246 to i64
  %248 = zext i32 %244 to i64
  %249 = xor i32 %234, -1
  %250 = add i32 %232, %249
  %251 = zext i32 %250 to i64
  %252 = add nuw nsw i64 %251, 1
  %253 = zext i32 %250 to i64
  %254 = add nuw nsw i64 %253, 1
  %255 = shl nuw nsw i64 %253, 2
  %256 = add nuw nsw i64 %255, 4
  %257 = icmp ult i64 %252, 4
  %258 = and i64 %252, 8589934588
  %259 = trunc i64 %258 to i32
  %260 = sub i32 %235, %259
  %261 = icmp eq i64 %252, %258
  br label %262

262:                                              ; preds = %328, %242
  %263 = phi i64 [ %333, %328 ], [ 0, %242 ]
  %264 = phi i8* [ %331, %328 ], [ %41, %242 ]
  %265 = phi i32 [ %271, %328 ], [ %240, %242 ]
  %266 = phi i8* [ %330, %328 ], [ %65, %242 ]
  %267 = mul i64 %263, %248
  %268 = getelementptr i8, i8* %41, i64 %267
  %269 = add i64 %256, %267
  %270 = getelementptr i8, i8* %41, i64 %269
  %271 = add nsw i32 %265, -1
  br i1 %245, label %272, label %328

272:                                              ; preds = %262
  %273 = bitcast i8* %264 to i32*
  br i1 %257, label %304, label %274

274:                                              ; preds = %272
  %275 = getelementptr i8, i8* %266, i64 %254
  %276 = icmp ult i8* %266, %270
  %277 = icmp ult i8* %268, %275
  %278 = and i1 %276, %277
  br i1 %278, label %304, label %279

279:                                              ; preds = %274
  %280 = getelementptr i8, i8* %266, i64 %258
  %281 = getelementptr i32, i32* %273, i64 %258
  br label %282

282:                                              ; preds = %282, %279
  %283 = phi i64 [ 0, %279 ], [ %301, %282 ]
  %284 = getelementptr i8, i8* %266, i64 %283
  %285 = getelementptr i32, i32* %273, i64 %283
  %286 = bitcast i32* %285 to <4 x i32>*
  %287 = load <4 x i32>, <4 x i32>* %286, align 4, !alias.scope !10
  %288 = lshr <4 x i32> %287, <i32 24, i32 24, i32 24, i32 24>
  %289 = bitcast i8* %284 to <4 x i8>*
  %290 = load <4 x i8>, <4 x i8>* %289, align 1, !alias.scope !13, !noalias !10
  %291 = zext <4 x i8> %290 to <4 x i32>
  %292 = add nuw nsw <4 x i32> %288, %291
  %293 = mul nuw nsw <4 x i32> %288, %291
  %294 = add nuw nsw <4 x i32> %293, <i32 128, i32 128, i32 128, i32 128>
  %295 = lshr <4 x i32> %294, <i32 8, i32 8, i32 8, i32 8>
  %296 = add nuw nsw <4 x i32> %295, %294
  %297 = lshr <4 x i32> %296, <i32 8, i32 8, i32 8, i32 8>
  %298 = sub nsw <4 x i32> %292, %297
  %299 = trunc <4 x i32> %298 to <4 x i8>
  %300 = bitcast i8* %284 to <4 x i8>*
  store <4 x i8> %299, <4 x i8>* %300, align 1, !alias.scope !13, !noalias !10
  %301 = add i64 %283, 4
  %302 = icmp eq i64 %301, %258
  br i1 %302, label %303, label %282, !llvm.loop !15

303:                                              ; preds = %282
  br i1 %261, label %328, label %304

304:                                              ; preds = %303, %274, %272
  %305 = phi i8* [ %266, %274 ], [ %266, %272 ], [ %280, %303 ]
  %306 = phi i32 [ %235, %274 ], [ %235, %272 ], [ %260, %303 ]
  %307 = phi i32* [ %273, %274 ], [ %273, %272 ], [ %281, %303 ]
  br label %308

308:                                              ; preds = %304, %308
  %309 = phi i8* [ %325, %308 ], [ %305, %304 ]
  %310 = phi i32 [ %312, %308 ], [ %306, %304 ]
  %311 = phi i32* [ %326, %308 ], [ %307, %304 ]
  %312 = add nsw i32 %310, -1
  %313 = load i32, i32* %311, align 4
  %314 = lshr i32 %313, 24
  %315 = load i8, i8* %309, align 1
  %316 = zext i8 %315 to i32
  %317 = add nuw nsw i32 %314, %316
  %318 = mul nuw nsw i32 %314, %316
  %319 = add nuw nsw i32 %318, 128
  %320 = lshr i32 %319, 8
  %321 = add nuw nsw i32 %320, %319
  %322 = lshr i32 %321, 8
  %323 = sub nsw i32 %317, %322
  %324 = trunc i32 %323 to i8
  store i8 %324, i8* %309, align 1
  %325 = getelementptr inbounds i8, i8* %309, i64 1
  %326 = getelementptr inbounds i32, i32* %311, i64 1
  %327 = icmp sgt i32 %312, 0
  br i1 %327, label %308, label %328, !llvm.loop !16

328:                                              ; preds = %308, %303, %262
  %329 = phi i8* [ %266, %262 ], [ %280, %303 ], [ %325, %308 ]
  %330 = getelementptr inbounds i8, i8* %329, i64 %247
  %331 = getelementptr inbounds i8, i8* %264, i64 %248
  %332 = icmp sgt i32 %271, 0
  %333 = add i64 %263, 1
  br i1 %332, label %262, label %1301

334:                                              ; preds = %57
  %335 = getelementptr inbounds %struct.SkMask, %struct.SkMask* %1, i64 0, i32 1, i32 2
  %336 = load i32, i32* %335, align 4
  %337 = getelementptr inbounds %struct.SkMask, %struct.SkMask* %1, i64 0, i32 1, i32 0
  %338 = load i32, i32* %337, align 4
  %339 = sub i32 %336, %338
  %340 = getelementptr inbounds %struct.SkMask, %struct.SkMask* %1, i64 0, i32 1, i32 3
  %341 = load i32, i32* %340, align 4
  %342 = getelementptr inbounds %struct.SkMask, %struct.SkMask* %1, i64 0, i32 1, i32 1
  %343 = load i32, i32* %342, align 4
  %344 = sub i32 %341, %343
  %345 = icmp sgt i32 %344, 0
  br i1 %345, label %346, label %1301

346:                                              ; preds = %334
  %347 = getelementptr inbounds %struct.SkMask, %struct.SkMask* %1, i64 0, i32 2
  %348 = load i32, i32* %347, align 8
  %349 = icmp sgt i32 %339, 0
  %350 = sub nsw i32 %61, %339
  %351 = sext i32 %350 to i64
  %352 = zext i32 %348 to i64
  %353 = xor i32 %338, -1
  %354 = add i32 %336, %353
  %355 = zext i32 %354 to i64
  %356 = add nuw nsw i64 %355, 1
  %357 = zext i32 %354 to i64
  %358 = add nuw nsw i64 %357, 1
  %359 = shl nuw nsw i64 %357, 1
  %360 = add nuw nsw i64 %359, 2
  %361 = icmp ult i64 %356, 8
  %362 = and i64 %356, 8589934584
  %363 = trunc i64 %362 to i32
  %364 = sub i32 %339, %363
  %365 = icmp eq i64 %356, %362
  br label %366

366:                                              ; preds = %466, %346
  %367 = phi i64 [ %471, %466 ], [ 0, %346 ]
  %368 = phi i8* [ %469, %466 ], [ %41, %346 ]
  %369 = phi i32 [ %375, %466 ], [ %344, %346 ]
  %370 = phi i8* [ %468, %466 ], [ %65, %346 ]
  %371 = mul i64 %367, %352
  %372 = getelementptr i8, i8* %41, i64 %371
  %373 = add i64 %360, %371
  %374 = getelementptr i8, i8* %41, i64 %373
  %375 = add nsw i32 %369, -1
  br i1 %349, label %376, label %466

376:                                              ; preds = %366
  %377 = bitcast i8* %368 to i16*
  br i1 %361, label %425, label %378

378:                                              ; preds = %376
  %379 = getelementptr i8, i8* %370, i64 %358
  %380 = icmp ult i8* %370, %374
  %381 = icmp ult i8* %372, %379
  %382 = and i1 %380, %381
  br i1 %382, label %425, label %383

383:                                              ; preds = %378
  %384 = getelementptr i8, i8* %370, i64 %362
  %385 = getelementptr i16, i16* %377, i64 %362
  br label %386

386:                                              ; preds = %386, %383
  %387 = phi i64 [ 0, %383 ], [ %422, %386 ]
  %388 = getelementptr i8, i8* %370, i64 %387
  %389 = getelementptr i16, i16* %377, i64 %387
  %390 = bitcast i16* %389 to <8 x i16>*
  %391 = load <8 x i16>, <8 x i16>* %390, align 2, !alias.scope !17
  %392 = zext <8 x i16> %391 to <8 x i32>
  %393 = lshr <8 x i32> %392, <i32 11, i32 11, i32 11, i32 11, i32 11, i32 11, i32 11, i32 11>
  %394 = shl nuw nsw <8 x i32> %393, <i32 3, i32 3, i32 3, i32 3, i32 3, i32 3, i32 3, i32 3>
  %395 = lshr <8 x i32> %392, <i32 13, i32 13, i32 13, i32 13, i32 13, i32 13, i32 13, i32 13>
  %396 = or <8 x i32> %394, %395
  %397 = lshr <8 x i32> %392, <i32 5, i32 5, i32 5, i32 5, i32 5, i32 5, i32 5, i32 5>
  %398 = and <8 x i32> %397, <i32 63, i32 63, i32 63, i32 63, i32 63, i32 63, i32 63, i32 63>
  %399 = shl nuw nsw <8 x i32> %398, <i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2>
  %400 = lshr <8 x i32> %398, <i32 4, i32 4, i32 4, i32 4, i32 4, i32 4, i32 4, i32 4>
  %401 = or <8 x i32> %399, %400
  %402 = and <8 x i32> %392, <i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31>
  %403 = shl nuw nsw <8 x i32> %402, <i32 3, i32 3, i32 3, i32 3, i32 3, i32 3, i32 3, i32 3>
  %404 = lshr <8 x i32> %402, <i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2>
  %405 = or <8 x i32> %403, %404
  %406 = add nuw nsw <8 x i32> %405, %396
  %407 = add nuw nsw <8 x i32> %406, %401
  %408 = udiv <8 x i32> %407, <i32 3, i32 3, i32 3, i32 3, i32 3, i32 3, i32 3, i32 3>
  %409 = and <8 x i32> %408, <i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255>
  %410 = bitcast i8* %388 to <8 x i8>*
  %411 = load <8 x i8>, <8 x i8>* %410, align 1, !alias.scope !20, !noalias !17
  %412 = zext <8 x i8> %411 to <8 x i32>
  %413 = add nuw nsw <8 x i32> %408, %412
  %414 = mul nuw nsw <8 x i32> %409, %412
  %415 = add nuw nsw <8 x i32> %414, <i32 128, i32 128, i32 128, i32 128, i32 128, i32 128, i32 128, i32 128>
  %416 = lshr <8 x i32> %415, <i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8>
  %417 = add nuw nsw <8 x i32> %416, %415
  %418 = lshr <8 x i32> %417, <i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8>
  %419 = sub nsw <8 x i32> %413, %418
  %420 = trunc <8 x i32> %419 to <8 x i8>
  %421 = bitcast i8* %388 to <8 x i8>*
  store <8 x i8> %420, <8 x i8>* %421, align 1, !alias.scope !20, !noalias !17
  %422 = add i64 %387, 8
  %423 = icmp eq i64 %422, %362
  br i1 %423, label %424, label %386, !llvm.loop !22

424:                                              ; preds = %386
  br i1 %365, label %466, label %425

425:                                              ; preds = %424, %378, %376
  %426 = phi i8* [ %370, %378 ], [ %370, %376 ], [ %384, %424 ]
  %427 = phi i32 [ %339, %378 ], [ %339, %376 ], [ %364, %424 ]
  %428 = phi i16* [ %377, %378 ], [ %377, %376 ], [ %385, %424 ]
  br label %429

429:                                              ; preds = %425, %429
  %430 = phi i8* [ %463, %429 ], [ %426, %425 ]
  %431 = phi i32 [ %433, %429 ], [ %427, %425 ]
  %432 = phi i16* [ %464, %429 ], [ %428, %425 ]
  %433 = add nsw i32 %431, -1
  %434 = load i16, i16* %432, align 2
  %435 = zext i16 %434 to i32
  %436 = lshr i32 %435, 11
  %437 = shl nuw nsw i32 %436, 3
  %438 = lshr i32 %435, 13
  %439 = or i32 %437, %438
  %440 = lshr i32 %435, 5
  %441 = and i32 %440, 63
  %442 = shl nuw nsw i32 %441, 2
  %443 = lshr i32 %441, 4
  %444 = or i32 %442, %443
  %445 = and i32 %435, 31
  %446 = shl nuw nsw i32 %445, 3
  %447 = lshr i32 %445, 2
  %448 = or i32 %446, %447
  %449 = add nuw nsw i32 %448, %439
  %450 = add nuw nsw i32 %449, %444
  %451 = udiv i32 %450, 3
  %452 = and i32 %451, 255
  %453 = load i8, i8* %430, align 1
  %454 = zext i8 %453 to i32
  %455 = add nuw nsw i32 %451, %454
  %456 = mul nuw nsw i32 %452, %454
  %457 = add nuw nsw i32 %456, 128
  %458 = lshr i32 %457, 8
  %459 = add nuw nsw i32 %458, %457
  %460 = lshr i32 %459, 8
  %461 = sub nsw i32 %455, %460
  %462 = trunc i32 %461 to i8
  store i8 %462, i8* %430, align 1
  %463 = getelementptr inbounds i8, i8* %430, i64 1
  %464 = getelementptr inbounds i16, i16* %432, i64 1
  %465 = icmp sgt i32 %433, 0
  br i1 %465, label %429, label %466, !llvm.loop !23

466:                                              ; preds = %429, %424, %366
  %467 = phi i8* [ %370, %366 ], [ %384, %424 ], [ %463, %429 ]
  %468 = getelementptr inbounds i8, i8* %467, i64 %351
  %469 = getelementptr inbounds i8, i8* %368, i64 %352
  %470 = icmp sgt i32 %375, 0
  %471 = add i64 %367, 1
  br i1 %470, label %366, label %1301

472:                                              ; preds = %57
  call void (i8*, i32, i8*, ...) @_Z16SkAbort_FileLinePKciS0_z(i8* getelementptr inbounds ([47 x i8], [47 x i8]* @.str, i64 0, i64 0), i32 185, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.1, i64 0, i64 0)) #10
  unreachable

473:                                              ; preds = %56
  %474 = getelementptr inbounds %struct.SkMask, %struct.SkMask* %0, i64 0, i32 0
  %475 = load i8*, i8** %474, align 8
  %476 = getelementptr inbounds %struct.SkMask, %struct.SkMask* %0, i64 0, i32 2
  %477 = load i32, i32* %476, align 8
  %478 = mul i32 %477, %27
  %479 = add i32 %478, %25
  %480 = zext i32 %479 to i64
  %481 = getelementptr inbounds i8, i8* %475, i64 %480
  %482 = load i8, i8* %7, align 4
  switch i8 %482, label %780 [
    i8 0, label %483
    i8 1, label %559
    i8 3, label %635
    i8 4, label %712
  ]

483:                                              ; preds = %473
  %484 = getelementptr inbounds %struct.SkMask, %struct.SkMask* %1, i64 0, i32 1, i32 2
  %485 = load i32, i32* %484, align 4
  %486 = getelementptr inbounds %struct.SkMask, %struct.SkMask* %1, i64 0, i32 1, i32 0
  %487 = load i32, i32* %486, align 4
  %488 = sub i32 %485, %487
  %489 = getelementptr inbounds %struct.SkMask, %struct.SkMask* %1, i64 0, i32 1, i32 3
  %490 = load i32, i32* %489, align 4
  %491 = getelementptr inbounds %struct.SkMask, %struct.SkMask* %1, i64 0, i32 1, i32 1
  %492 = load i32, i32* %491, align 4
  %493 = sub i32 %490, %492
  %494 = icmp sgt i32 %493, 0
  br i1 %494, label %495, label %1301

495:                                              ; preds = %483
  %496 = getelementptr inbounds %struct.SkMask, %struct.SkMask* %1, i64 0, i32 2
  %497 = load i32, i32* %496, align 8
  %498 = icmp sgt i32 %488, 0
  %499 = sub nsw i32 %477, %488
  %500 = sext i32 %499 to i64
  %501 = zext i32 %497 to i64
  %502 = and i32 %488, 1
  %503 = add i32 %487, 1
  %504 = icmp eq i32 %485, %503
  %505 = sub i32 %488, %502
  %506 = icmp eq i32 %502, 0
  br label %507

507:                                              ; preds = %554, %495
  %508 = phi i8* [ %41, %495 ], [ %557, %554 ]
  %509 = phi i32 [ %493, %495 ], [ %511, %554 ]
  %510 = phi i8* [ %481, %495 ], [ %556, %554 ]
  %511 = add nsw i32 %509, -1
  br i1 %498, label %512, label %554

512:                                              ; preds = %507
  %513 = ptrtoint i8* %508 to i64
  br i1 %504, label %539, label %514

514:                                              ; preds = %512, %1307
  %515 = phi i8* [ %1308, %1307 ], [ %510, %512 ]
  %516 = phi i64 [ %1313, %1307 ], [ %513, %512 ]
  %517 = phi i32 [ %1314, %1307 ], [ 7, %512 ]
  %518 = phi i32 [ %1315, %1307 ], [ %505, %512 ]
  %519 = inttoptr i64 %516 to i8*
  %520 = load i8, i8* %519, align 1
  %521 = zext i8 %520 to i32
  %522 = shl i32 1, %517
  %523 = and i32 %522, %521
  %524 = icmp eq i32 %523, 0
  br i1 %524, label %526, label %525

525:                                              ; preds = %514
  store i8 0, i8* %515, align 1
  br label %526

526:                                              ; preds = %525, %514
  %527 = icmp sgt i32 %517, 0
  %528 = add nsw i32 %517, -1
  %529 = getelementptr inbounds i8, i8* %519, i64 1
  %530 = ptrtoint i8* %529 to i64
  %531 = select i1 %527, i64 %516, i64 %530
  %532 = select i1 %527, i32 %528, i32 7
  %533 = inttoptr i64 %531 to i8*
  %534 = load i8, i8* %533, align 1
  %535 = zext i8 %534 to i32
  %536 = shl i32 1, %532
  %537 = and i32 %536, %535
  %538 = icmp eq i32 %537, 0
  br i1 %538, label %1307, label %1305

539:                                              ; preds = %1307, %512
  %540 = phi i8* [ undef, %512 ], [ %1308, %1307 ]
  %541 = phi i8* [ %510, %512 ], [ %1308, %1307 ]
  %542 = phi i64 [ %513, %512 ], [ %1313, %1307 ]
  %543 = phi i32 [ 7, %512 ], [ %1314, %1307 ]
  br i1 %506, label %554, label %544

544:                                              ; preds = %539
  %545 = inttoptr i64 %542 to i8*
  %546 = load i8, i8* %545, align 1
  %547 = zext i8 %546 to i32
  %548 = shl i32 1, %543
  %549 = and i32 %548, %547
  %550 = icmp eq i32 %549, 0
  br i1 %550, label %552, label %551

551:                                              ; preds = %544
  store i8 0, i8* %541, align 1
  br label %552

552:                                              ; preds = %544, %551
  %553 = getelementptr inbounds i8, i8* %541, i64 1
  br label %554

554:                                              ; preds = %552, %539, %507
  %555 = phi i8* [ %510, %507 ], [ %540, %539 ], [ %553, %552 ]
  %556 = getelementptr inbounds i8, i8* %555, i64 %500
  %557 = getelementptr inbounds i8, i8* %508, i64 %501
  %558 = icmp sgt i32 %511, 0
  br i1 %558, label %507, label %1301

559:                                              ; preds = %473
  %560 = getelementptr inbounds %struct.SkMask, %struct.SkMask* %1, i64 0, i32 1, i32 2
  %561 = load i32, i32* %560, align 4
  %562 = getelementptr inbounds %struct.SkMask, %struct.SkMask* %1, i64 0, i32 1, i32 0
  %563 = load i32, i32* %562, align 4
  %564 = sub i32 %561, %563
  %565 = getelementptr inbounds %struct.SkMask, %struct.SkMask* %1, i64 0, i32 1, i32 3
  %566 = load i32, i32* %565, align 4
  %567 = getelementptr inbounds %struct.SkMask, %struct.SkMask* %1, i64 0, i32 1, i32 1
  %568 = load i32, i32* %567, align 4
  %569 = sub i32 %566, %568
  %570 = icmp sgt i32 %569, 0
  br i1 %570, label %571, label %1301

571:                                              ; preds = %559
  %572 = getelementptr inbounds %struct.SkMask, %struct.SkMask* %1, i64 0, i32 2
  %573 = load i32, i32* %572, align 8
  %574 = icmp sgt i32 %564, 0
  %575 = sub nsw i32 %477, %564
  %576 = sext i32 %575 to i64
  %577 = zext i32 %573 to i64
  %578 = and i32 %564, 1
  %579 = icmp eq i32 %578, 0
  %580 = add nsw i32 %564, -1
  %581 = add i32 %563, 1
  %582 = icmp eq i32 %561, %581
  br label %583

583:                                              ; preds = %630, %571
  %584 = phi i8* [ %41, %571 ], [ %633, %630 ]
  %585 = phi i32 [ %569, %571 ], [ %587, %630 ]
  %586 = phi i8* [ %481, %571 ], [ %632, %630 ]
  %587 = add nsw i32 %585, -1
  br i1 %574, label %588, label %630

588:                                              ; preds = %583
  br i1 %579, label %604, label %589

589:                                              ; preds = %588
  %590 = load i8, i8* %584, align 1
  %591 = icmp eq i8 %590, 0
  br i1 %591, label %601, label %592

592:                                              ; preds = %589
  %593 = load i8, i8* %586, align 1
  %594 = zext i8 %593 to i32
  %595 = xor i8 %590, -1
  %596 = zext i8 %595 to i32
  %597 = add nuw nsw i32 %596, 1
  %598 = mul nuw nsw i32 %597, %594
  %599 = lshr i32 %598, 8
  %600 = trunc i32 %599 to i8
  store i8 %600, i8* %586, align 1
  br label %601

601:                                              ; preds = %592, %589
  %602 = getelementptr inbounds i8, i8* %586, i64 1
  %603 = getelementptr inbounds i8, i8* %584, i64 1
  br label %604

604:                                              ; preds = %601, %588
  %605 = phi i32 [ %580, %601 ], [ %564, %588 ]
  %606 = phi i8* [ %602, %601 ], [ %586, %588 ]
  %607 = phi i8* [ %603, %601 ], [ %584, %588 ]
  %608 = phi i8* [ %602, %601 ], [ undef, %588 ]
  br i1 %582, label %630, label %609

609:                                              ; preds = %604, %1326
  %610 = phi i32 [ %627, %1326 ], [ %605, %604 ]
  %611 = phi i8* [ %1327, %1326 ], [ %606, %604 ]
  %612 = phi i8* [ %1328, %1326 ], [ %607, %604 ]
  %613 = load i8, i8* %612, align 1
  %614 = icmp eq i8 %613, 0
  br i1 %614, label %624, label %615

615:                                              ; preds = %609
  %616 = load i8, i8* %611, align 1
  %617 = zext i8 %616 to i32
  %618 = xor i8 %613, -1
  %619 = zext i8 %618 to i32
  %620 = add nuw nsw i32 %619, 1
  %621 = mul nuw nsw i32 %620, %617
  %622 = lshr i32 %621, 8
  %623 = trunc i32 %622 to i8
  store i8 %623, i8* %611, align 1
  br label %624

624:                                              ; preds = %615, %609
  %625 = getelementptr inbounds i8, i8* %611, i64 1
  %626 = getelementptr inbounds i8, i8* %612, i64 1
  %627 = add nsw i32 %610, -2
  %628 = load i8, i8* %626, align 1
  %629 = icmp eq i8 %628, 0
  br i1 %629, label %1326, label %1317

630:                                              ; preds = %604, %1326, %583
  %631 = phi i8* [ %586, %583 ], [ %608, %604 ], [ %1327, %1326 ]
  %632 = getelementptr inbounds i8, i8* %631, i64 %576
  %633 = getelementptr inbounds i8, i8* %584, i64 %577
  %634 = icmp sgt i32 %587, 0
  br i1 %634, label %583, label %1301

635:                                              ; preds = %473
  %636 = getelementptr inbounds %struct.SkMask, %struct.SkMask* %1, i64 0, i32 1, i32 2
  %637 = load i32, i32* %636, align 4
  %638 = getelementptr inbounds %struct.SkMask, %struct.SkMask* %1, i64 0, i32 1, i32 0
  %639 = load i32, i32* %638, align 4
  %640 = sub i32 %637, %639
  %641 = getelementptr inbounds %struct.SkMask, %struct.SkMask* %1, i64 0, i32 1, i32 3
  %642 = load i32, i32* %641, align 4
  %643 = getelementptr inbounds %struct.SkMask, %struct.SkMask* %1, i64 0, i32 1, i32 1
  %644 = load i32, i32* %643, align 4
  %645 = sub i32 %642, %644
  %646 = icmp sgt i32 %645, 0
  br i1 %646, label %647, label %1301

647:                                              ; preds = %635
  %648 = getelementptr inbounds %struct.SkMask, %struct.SkMask* %1, i64 0, i32 2
  %649 = load i32, i32* %648, align 8
  %650 = icmp sgt i32 %640, 0
  %651 = sub nsw i32 %477, %640
  %652 = sext i32 %651 to i64
  %653 = zext i32 %649 to i64
  %654 = and i32 %640, 1
  %655 = icmp eq i32 %654, 0
  %656 = add nsw i32 %640, -1
  %657 = add i32 %639, 1
  %658 = icmp eq i32 %637, %657
  br label %659

659:                                              ; preds = %707, %647
  %660 = phi i8* [ %41, %647 ], [ %710, %707 ]
  %661 = phi i32 [ %645, %647 ], [ %663, %707 ]
  %662 = phi i8* [ %481, %647 ], [ %709, %707 ]
  %663 = add nsw i32 %661, -1
  br i1 %650, label %664, label %707

664:                                              ; preds = %659
  %665 = bitcast i8* %660 to i32*
  br i1 %655, label %681, label %666

666:                                              ; preds = %664
  %667 = load i32, i32* %665, align 4
  %668 = lshr i32 %667, 24
  %669 = icmp eq i32 %668, 0
  br i1 %669, label %677, label %670

670:                                              ; preds = %666
  %671 = load i8, i8* %662, align 1
  %672 = zext i8 %671 to i32
  %673 = sub nuw nsw i32 256, %668
  %674 = mul nuw nsw i32 %673, %672
  %675 = lshr i32 %674, 8
  %676 = trunc i32 %675 to i8
  store i8 %676, i8* %662, align 1
  br label %677

677:                                              ; preds = %670, %666
  %678 = getelementptr inbounds i8, i8* %662, i64 1
  %679 = getelementptr inbounds i8, i8* %660, i64 4
  %680 = bitcast i8* %679 to i32*
  br label %681

681:                                              ; preds = %677, %664
  %682 = phi i32 [ %656, %677 ], [ %640, %664 ]
  %683 = phi i8* [ %678, %677 ], [ %662, %664 ]
  %684 = phi i32* [ %680, %677 ], [ %665, %664 ]
  %685 = phi i8* [ %678, %677 ], [ undef, %664 ]
  br i1 %658, label %707, label %686

686:                                              ; preds = %681, %1337
  %687 = phi i32 [ %703, %1337 ], [ %682, %681 ]
  %688 = phi i8* [ %1338, %1337 ], [ %683, %681 ]
  %689 = phi i32* [ %1339, %1337 ], [ %684, %681 ]
  %690 = load i32, i32* %689, align 4
  %691 = lshr i32 %690, 24
  %692 = icmp eq i32 %691, 0
  br i1 %692, label %700, label %693

693:                                              ; preds = %686
  %694 = load i8, i8* %688, align 1
  %695 = zext i8 %694 to i32
  %696 = sub nuw nsw i32 256, %691
  %697 = mul nuw nsw i32 %696, %695
  %698 = lshr i32 %697, 8
  %699 = trunc i32 %698 to i8
  store i8 %699, i8* %688, align 1
  br label %700

700:                                              ; preds = %693, %686
  %701 = getelementptr inbounds i8, i8* %688, i64 1
  %702 = getelementptr inbounds i32, i32* %689, i64 1
  %703 = add nsw i32 %687, -2
  %704 = load i32, i32* %702, align 4
  %705 = lshr i32 %704, 24
  %706 = icmp eq i32 %705, 0
  br i1 %706, label %1337, label %1330

707:                                              ; preds = %681, %1337, %659
  %708 = phi i8* [ %662, %659 ], [ %685, %681 ], [ %1338, %1337 ]
  %709 = getelementptr inbounds i8, i8* %708, i64 %652
  %710 = getelementptr inbounds i8, i8* %660, i64 %653
  %711 = icmp sgt i32 %663, 0
  br i1 %711, label %659, label %1301

712:                                              ; preds = %473
  %713 = getelementptr inbounds %struct.SkMask, %struct.SkMask* %1, i64 0, i32 1, i32 2
  %714 = load i32, i32* %713, align 4
  %715 = getelementptr inbounds %struct.SkMask, %struct.SkMask* %1, i64 0, i32 1, i32 0
  %716 = load i32, i32* %715, align 4
  %717 = sub i32 %714, %716
  %718 = getelementptr inbounds %struct.SkMask, %struct.SkMask* %1, i64 0, i32 1, i32 3
  %719 = load i32, i32* %718, align 4
  %720 = getelementptr inbounds %struct.SkMask, %struct.SkMask* %1, i64 0, i32 1, i32 1
  %721 = load i32, i32* %720, align 4
  %722 = sub i32 %719, %721
  %723 = icmp sgt i32 %722, 0
  br i1 %723, label %724, label %1301

724:                                              ; preds = %712
  %725 = getelementptr inbounds %struct.SkMask, %struct.SkMask* %1, i64 0, i32 2
  %726 = load i32, i32* %725, align 8
  %727 = icmp sgt i32 %717, 0
  %728 = sub nsw i32 %477, %717
  %729 = sext i32 %728 to i64
  %730 = zext i32 %726 to i64
  br label %731

731:                                              ; preds = %775, %724
  %732 = phi i8* [ %41, %724 ], [ %778, %775 ]
  %733 = phi i32 [ %722, %724 ], [ %735, %775 ]
  %734 = phi i8* [ %481, %724 ], [ %777, %775 ]
  %735 = add nsw i32 %733, -1
  br i1 %727, label %736, label %775

736:                                              ; preds = %731
  %737 = bitcast i8* %732 to i16*
  br label %738

738:                                              ; preds = %736, %771
  %739 = phi i32 [ %742, %771 ], [ %717, %736 ]
  %740 = phi i8* [ %772, %771 ], [ %734, %736 ]
  %741 = phi i16* [ %773, %771 ], [ %737, %736 ]
  %742 = add nsw i32 %739, -1
  %743 = load i16, i16* %741, align 2
  %744 = zext i16 %743 to i32
  %745 = lshr i32 %744, 11
  %746 = shl nuw nsw i32 %745, 3
  %747 = lshr i32 %744, 13
  %748 = or i32 %746, %747
  %749 = lshr i32 %744, 5
  %750 = and i32 %749, 63
  %751 = shl nuw nsw i32 %750, 2
  %752 = lshr i32 %750, 4
  %753 = or i32 %751, %752
  %754 = and i32 %744, 31
  %755 = shl nuw nsw i32 %754, 3
  %756 = lshr i32 %754, 2
  %757 = or i32 %755, %756
  %758 = add nuw nsw i32 %757, %748
  %759 = add nuw nsw i32 %758, %753
  %760 = udiv i32 %759, 3
  %761 = trunc i32 %760 to i8
  %762 = icmp eq i8 %761, 0
  br i1 %762, label %771, label %763

763:                                              ; preds = %738
  %764 = load i8, i8* %740, align 1
  %765 = zext i8 %764 to i32
  %766 = and i32 %760, 255
  %767 = sub nuw nsw i32 256, %766
  %768 = mul nuw nsw i32 %767, %765
  %769 = lshr i32 %768, 8
  %770 = trunc i32 %769 to i8
  store i8 %770, i8* %740, align 1
  br label %771

771:                                              ; preds = %763, %738
  %772 = getelementptr inbounds i8, i8* %740, i64 1
  %773 = getelementptr inbounds i16, i16* %741, i64 1
  %774 = icmp sgt i32 %742, 0
  br i1 %774, label %738, label %775

775:                                              ; preds = %771, %731
  %776 = phi i8* [ %734, %731 ], [ %772, %771 ]
  %777 = getelementptr inbounds i8, i8* %776, i64 %729
  %778 = getelementptr inbounds i8, i8* %732, i64 %730
  %779 = icmp sgt i32 %735, 0
  br i1 %779, label %731, label %1301

780:                                              ; preds = %473
  call void (i8*, i32, i8*, ...) @_Z16SkAbort_FileLinePKciS0_z(i8* getelementptr inbounds ([47 x i8], [47 x i8]* @.str, i64 0, i64 0), i32 218, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.1, i64 0, i64 0)) #10
  unreachable

781:                                              ; preds = %56
  %782 = getelementptr inbounds %struct.SkMask, %struct.SkMask* %0, i64 0, i32 0
  %783 = load i8*, i8** %782, align 8
  %784 = getelementptr inbounds %struct.SkMask, %struct.SkMask* %0, i64 0, i32 2
  %785 = load i32, i32* %784, align 8
  %786 = getelementptr inbounds %struct.SkMask, %struct.SkMask* %1, i64 0, i32 1
  %787 = getelementptr inbounds %struct.SkMask, %struct.SkMask* %0, i64 0, i32 1
  %788 = bitcast %struct.SkIRect* %787 to i8*
  %789 = bitcast %struct.SkIRect* %786 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %788, i8* align 4 %789, i64 16, i1 false)
  %790 = getelementptr inbounds %struct.SkMask, %struct.SkMask* %0, i64 0, i32 1, i32 2
  %791 = load i32, i32* %790, align 4
  %792 = getelementptr inbounds %struct.SkIRect, %struct.SkIRect* %787, i64 0, i32 0
  %793 = load i32, i32* %792, align 4
  %794 = sub i32 %791, %793
  store i32 %794, i32* %784, align 8
  %795 = call i64 @_ZNK6SkMask16computeImageSizeEv(%struct.SkMask* %0) #9
  %796 = icmp eq i64 %795, 0
  br i1 %796, label %1298, label %797

797:                                              ; preds = %781
  %798 = call i8* @_ZN6SkMask10AllocImageEmNS_9AllocTypeE(i64 %795, i32 0) #9
  store i8* %798, i8** %782, align 8
  %799 = mul i32 %785, %27
  %800 = add i32 %799, %25
  %801 = zext i32 %800 to i64
  %802 = getelementptr inbounds i8, i8* %783, i64 %801
  %803 = load i8, i8* %7, align 4
  switch i8 %803, label %1294 [
    i8 0, label %804
    i8 1, label %870
    i8 3, label %1022
    i8 4, label %1148
  ]

804:                                              ; preds = %797
  %805 = getelementptr inbounds %struct.SkMask, %struct.SkMask* %1, i64 0, i32 1, i32 2
  %806 = load i32, i32* %805, align 4
  %807 = getelementptr inbounds %struct.SkIRect, %struct.SkIRect* %786, i64 0, i32 0
  %808 = load i32, i32* %807, align 4
  %809 = sub i32 %806, %808
  %810 = getelementptr inbounds %struct.SkMask, %struct.SkMask* %1, i64 0, i32 1, i32 3
  %811 = load i32, i32* %810, align 4
  %812 = getelementptr inbounds %struct.SkMask, %struct.SkMask* %1, i64 0, i32 1, i32 1
  %813 = load i32, i32* %812, align 4
  %814 = sub i32 %811, %813
  %815 = icmp sgt i32 %814, 0
  br i1 %815, label %816, label %1295

816:                                              ; preds = %804
  %817 = load i8*, i8** %28, align 8
  %818 = getelementptr inbounds %struct.SkMask, %struct.SkMask* %1, i64 0, i32 2
  %819 = load i32, i32* %818, align 8
  %820 = load i32, i32* %784, align 8
  %821 = sub nsw i32 %785, %809
  %822 = sub nsw i32 %820, %809
  %823 = icmp sgt i32 %809, 0
  %824 = sext i32 %822 to i64
  %825 = zext i32 %819 to i64
  %826 = sext i32 %821 to i64
  br label %827

827:                                              ; preds = %835, %816
  %828 = phi i8* [ %817, %816 ], [ %839, %835 ]
  %829 = phi i32 [ %814, %816 ], [ %832, %835 ]
  %830 = phi i8* [ %798, %816 ], [ %838, %835 ]
  %831 = phi i8* [ %802, %816 ], [ %840, %835 ]
  %832 = add nsw i32 %829, -1
  br i1 %823, label %833, label %835

833:                                              ; preds = %827
  %834 = ptrtoint i8* %828 to i64
  br label %842

835:                                              ; preds = %842, %827
  %836 = phi i8* [ %831, %827 ], [ %868, %842 ]
  %837 = phi i8* [ %830, %827 ], [ %861, %842 ]
  %838 = getelementptr inbounds i8, i8* %837, i64 %824
  %839 = getelementptr inbounds i8, i8* %828, i64 %825
  %840 = getelementptr inbounds i8, i8* %836, i64 %826
  %841 = icmp sgt i32 %832, 0
  br i1 %841, label %827, label %1295

842:                                              ; preds = %833, %842
  %843 = phi i32 [ %848, %842 ], [ %809, %833 ]
  %844 = phi i8* [ %861, %842 ], [ %830, %833 ]
  %845 = phi i8* [ %868, %842 ], [ %831, %833 ]
  %846 = phi i64 [ %866, %842 ], [ %834, %833 ]
  %847 = phi i32 [ %867, %842 ], [ 7, %833 ]
  %848 = add nsw i32 %843, -1
  %849 = load i8, i8* %845, align 1
  %850 = zext i8 %849 to i32
  %851 = inttoptr i64 %846 to i8*
  %852 = load i8, i8* %851, align 1
  %853 = zext i8 %852 to i32
  %854 = shl i32 1, %847
  %855 = and i32 %854, %853
  %856 = icmp eq i32 %855, 0
  %857 = select i1 %856, i32 1, i32 256
  %858 = mul nuw nsw i32 %857, %850
  %859 = lshr i32 %858, 8
  %860 = trunc i32 %859 to i8
  store i8 %860, i8* %844, align 1
  %861 = getelementptr inbounds i8, i8* %844, i64 1
  %862 = icmp sgt i32 %847, 0
  %863 = add nsw i32 %847, -1
  %864 = getelementptr inbounds i8, i8* %851, i64 1
  %865 = ptrtoint i8* %864 to i64
  %866 = select i1 %862, i64 %846, i64 %865
  %867 = select i1 %862, i32 %863, i32 7
  %868 = getelementptr inbounds i8, i8* %845, i64 1
  %869 = icmp sgt i32 %848, 0
  br i1 %869, label %842, label %835

870:                                              ; preds = %797
  %871 = getelementptr inbounds %struct.SkMask, %struct.SkMask* %1, i64 0, i32 1, i32 2
  %872 = load i32, i32* %871, align 4
  %873 = getelementptr inbounds %struct.SkIRect, %struct.SkIRect* %786, i64 0, i32 0
  %874 = load i32, i32* %873, align 4
  %875 = sub i32 %872, %874
  %876 = getelementptr inbounds %struct.SkMask, %struct.SkMask* %1, i64 0, i32 1, i32 3
  %877 = load i32, i32* %876, align 4
  %878 = getelementptr inbounds %struct.SkMask, %struct.SkMask* %1, i64 0, i32 1, i32 1
  %879 = load i32, i32* %878, align 4
  %880 = sub i32 %877, %879
  %881 = icmp sgt i32 %880, 0
  br i1 %881, label %882, label %1295

882:                                              ; preds = %870
  %883 = getelementptr inbounds %struct.SkMask, %struct.SkMask* %1, i64 0, i32 2
  %884 = load i32, i32* %883, align 8
  %885 = load i8*, i8** %28, align 8
  %886 = load i32, i32* %784, align 8
  %887 = sub nsw i32 %785, %875
  %888 = sub nsw i32 %886, %875
  %889 = icmp sgt i32 %875, 0
  %890 = sext i32 %888 to i64
  %891 = zext i32 %884 to i64
  %892 = sext i32 %887 to i64
  %893 = xor i32 %874, -1
  %894 = add i32 %872, %893
  %895 = zext i32 %894 to i64
  %896 = add nuw nsw i64 %895, 1
  %897 = zext i32 %894 to i64
  %898 = add nuw nsw i64 %897, 1
  %899 = and i64 %896, 8589934576
  %900 = add nsw i64 %899, -16
  %901 = lshr exact i64 %900, 4
  %902 = add nuw nsw i64 %901, 1
  %903 = icmp ult i64 %896, 16
  %904 = and i64 %896, 8589934576
  %905 = trunc i64 %904 to i32
  %906 = sub i32 %875, %905
  %907 = and i64 %902, 1
  %908 = icmp eq i64 %900, 0
  %909 = sub nuw nsw i64 %902, %907
  %910 = icmp eq i64 %907, 0
  %911 = icmp eq i64 %896, %904
  br label %912

912:                                              ; preds = %996, %882
  %913 = phi i64 [ %1003, %996 ], [ 0, %882 ]
  %914 = phi i8* [ %1000, %996 ], [ %885, %882 ]
  %915 = phi i32 [ %922, %996 ], [ %880, %882 ]
  %916 = phi i8* [ %999, %996 ], [ %798, %882 ]
  %917 = phi i8* [ %1001, %996 ], [ %802, %882 ]
  %918 = mul i64 %913, %891
  %919 = getelementptr i8, i8* %885, i64 %918
  %920 = add i64 %898, %918
  %921 = getelementptr i8, i8* %885, i64 %920
  %922 = add nsw i32 %915, -1
  br i1 %889, label %923, label %996

923:                                              ; preds = %912
  br i1 %903, label %924, label %929

924:                                              ; preds = %995, %929, %923
  %925 = phi i32 [ %875, %929 ], [ %875, %923 ], [ %906, %995 ]
  %926 = phi i8* [ %916, %929 ], [ %916, %923 ], [ %940, %995 ]
  %927 = phi i8* [ %917, %929 ], [ %917, %923 ], [ %941, %995 ]
  %928 = phi i8* [ %914, %929 ], [ %914, %923 ], [ %942, %995 ]
  br label %1004

929:                                              ; preds = %923
  %930 = getelementptr i8, i8* %916, i64 %898
  %931 = getelementptr i8, i8* %917, i64 %898
  %932 = icmp ult i8* %916, %931
  %933 = icmp ult i8* %917, %930
  %934 = and i1 %932, %933
  %935 = icmp ult i8* %916, %921
  %936 = icmp ult i8* %919, %930
  %937 = and i1 %935, %936
  %938 = or i1 %934, %937
  br i1 %938, label %924, label %939

939:                                              ; preds = %929
  %940 = getelementptr i8, i8* %916, i64 %904
  %941 = getelementptr i8, i8* %917, i64 %904
  %942 = getelementptr i8, i8* %914, i64 %904
  br i1 %908, label %978, label %943

943:                                              ; preds = %939, %943
  %944 = phi i64 [ %975, %943 ], [ 0, %939 ]
  %945 = phi i64 [ %976, %943 ], [ %909, %939 ]
  %946 = getelementptr i8, i8* %916, i64 %944
  %947 = getelementptr i8, i8* %917, i64 %944
  %948 = getelementptr i8, i8* %914, i64 %944
  %949 = bitcast i8* %947 to <16 x i8>*
  %950 = load <16 x i8>, <16 x i8>* %949, align 1, !alias.scope !24
  %951 = zext <16 x i8> %950 to <16 x i32>
  %952 = bitcast i8* %948 to <16 x i8>*
  %953 = load <16 x i8>, <16 x i8>* %952, align 1, !alias.scope !27
  %954 = zext <16 x i8> %953 to <16 x i32>
  %955 = add nuw nsw <16 x i32> %954, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %956 = mul nuw nsw <16 x i32> %955, %951
  %957 = lshr <16 x i32> %956, <i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8>
  %958 = trunc <16 x i32> %957 to <16 x i8>
  %959 = bitcast i8* %946 to <16 x i8>*
  store <16 x i8> %958, <16 x i8>* %959, align 1, !alias.scope !29, !noalias !31
  %960 = or i64 %944, 16
  %961 = getelementptr i8, i8* %916, i64 %960
  %962 = getelementptr i8, i8* %917, i64 %960
  %963 = getelementptr i8, i8* %914, i64 %960
  %964 = bitcast i8* %962 to <16 x i8>*
  %965 = load <16 x i8>, <16 x i8>* %964, align 1, !alias.scope !24
  %966 = zext <16 x i8> %965 to <16 x i32>
  %967 = bitcast i8* %963 to <16 x i8>*
  %968 = load <16 x i8>, <16 x i8>* %967, align 1, !alias.scope !27
  %969 = zext <16 x i8> %968 to <16 x i32>
  %970 = add nuw nsw <16 x i32> %969, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %971 = mul nuw nsw <16 x i32> %970, %966
  %972 = lshr <16 x i32> %971, <i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8>
  %973 = trunc <16 x i32> %972 to <16 x i8>
  %974 = bitcast i8* %961 to <16 x i8>*
  store <16 x i8> %973, <16 x i8>* %974, align 1, !alias.scope !29, !noalias !31
  %975 = add i64 %944, 32
  %976 = add i64 %945, -2
  %977 = icmp eq i64 %976, 0
  br i1 %977, label %978, label %943, !llvm.loop !32

978:                                              ; preds = %943, %939
  %979 = phi i64 [ 0, %939 ], [ %975, %943 ]
  br i1 %910, label %995, label %980

980:                                              ; preds = %978
  %981 = getelementptr i8, i8* %916, i64 %979
  %982 = getelementptr i8, i8* %917, i64 %979
  %983 = getelementptr i8, i8* %914, i64 %979
  %984 = bitcast i8* %982 to <16 x i8>*
  %985 = load <16 x i8>, <16 x i8>* %984, align 1, !alias.scope !24
  %986 = zext <16 x i8> %985 to <16 x i32>
  %987 = bitcast i8* %983 to <16 x i8>*
  %988 = load <16 x i8>, <16 x i8>* %987, align 1, !alias.scope !27
  %989 = zext <16 x i8> %988 to <16 x i32>
  %990 = add nuw nsw <16 x i32> %989, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %991 = mul nuw nsw <16 x i32> %990, %986
  %992 = lshr <16 x i32> %991, <i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8>
  %993 = trunc <16 x i32> %992 to <16 x i8>
  %994 = bitcast i8* %981 to <16 x i8>*
  store <16 x i8> %993, <16 x i8>* %994, align 1, !alias.scope !29, !noalias !31
  br label %995

995:                                              ; preds = %978, %980
  br i1 %911, label %996, label %924

996:                                              ; preds = %1004, %995, %912
  %997 = phi i8* [ %917, %912 ], [ %941, %995 ], [ %1020, %1004 ]
  %998 = phi i8* [ %916, %912 ], [ %940, %995 ], [ %1018, %1004 ]
  %999 = getelementptr inbounds i8, i8* %998, i64 %890
  %1000 = getelementptr inbounds i8, i8* %914, i64 %891
  %1001 = getelementptr inbounds i8, i8* %997, i64 %892
  %1002 = icmp sgt i32 %922, 0
  %1003 = add i64 %913, 1
  br i1 %1002, label %912, label %1295

1004:                                             ; preds = %924, %1004
  %1005 = phi i32 [ %1009, %1004 ], [ %925, %924 ]
  %1006 = phi i8* [ %1018, %1004 ], [ %926, %924 ]
  %1007 = phi i8* [ %1020, %1004 ], [ %927, %924 ]
  %1008 = phi i8* [ %1019, %1004 ], [ %928, %924 ]
  %1009 = add nsw i32 %1005, -1
  %1010 = load i8, i8* %1007, align 1
  %1011 = zext i8 %1010 to i32
  %1012 = load i8, i8* %1008, align 1
  %1013 = zext i8 %1012 to i32
  %1014 = add nuw nsw i32 %1013, 1
  %1015 = mul nuw nsw i32 %1014, %1011
  %1016 = lshr i32 %1015, 8
  %1017 = trunc i32 %1016 to i8
  store i8 %1017, i8* %1006, align 1
  %1018 = getelementptr inbounds i8, i8* %1006, i64 1
  %1019 = getelementptr inbounds i8, i8* %1008, i64 1
  %1020 = getelementptr inbounds i8, i8* %1007, i64 1
  %1021 = icmp sgt i32 %1009, 0
  br i1 %1021, label %1004, label %996, !llvm.loop !33

1022:                                             ; preds = %797
  %1023 = bitcast %struct.SkMask* %1 to i32**
  %1024 = load i32*, i32** %1023, align 8
  %1025 = getelementptr inbounds %struct.SkMask, %struct.SkMask* %1, i64 0, i32 1, i32 2
  %1026 = load i32, i32* %1025, align 4
  %1027 = getelementptr inbounds %struct.SkIRect, %struct.SkIRect* %786, i64 0, i32 0
  %1028 = load i32, i32* %1027, align 4
  %1029 = sub i32 %1026, %1028
  %1030 = getelementptr inbounds %struct.SkMask, %struct.SkMask* %1, i64 0, i32 1, i32 3
  %1031 = load i32, i32* %1030, align 4
  %1032 = getelementptr inbounds %struct.SkMask, %struct.SkMask* %1, i64 0, i32 1, i32 1
  %1033 = load i32, i32* %1032, align 4
  %1034 = sub i32 %1031, %1033
  %1035 = icmp sgt i32 %1034, 0
  br i1 %1035, label %1036, label %1295

1036:                                             ; preds = %1022
  %1037 = getelementptr inbounds %struct.SkMask, %struct.SkMask* %1, i64 0, i32 2
  %1038 = load i32, i32* %1037, align 8
  %1039 = load i32, i32* %784, align 8
  %1040 = sub nsw i32 %785, %1029
  %1041 = sub nsw i32 %1039, %1029
  %1042 = icmp sgt i32 %1029, 0
  %1043 = sext i32 %1041 to i64
  %1044 = zext i32 %1038 to i64
  %1045 = sext i32 %1040 to i64
  %1046 = bitcast i32* %1024 to i8*
  %1047 = xor i32 %1028, -1
  %1048 = add i32 %1026, %1047
  %1049 = zext i32 %1048 to i64
  %1050 = add nuw nsw i64 %1049, 1
  %1051 = zext i32 %1048 to i64
  %1052 = add nuw nsw i64 %1051, 1
  %1053 = icmp ult i64 %1050, 8
  %1054 = and i64 %1050, 8589934584
  %1055 = trunc i64 %1054 to i32
  %1056 = sub i32 %1029, %1055
  %1057 = icmp eq i64 %1050, %1054
  br label %1058

1058:                                             ; preds = %1121, %1036
  %1059 = phi i32* [ %1024, %1036 ], [ %1127, %1121 ]
  %1060 = phi i8* [ %1046, %1036 ], [ %1126, %1121 ]
  %1061 = phi i32 [ %1034, %1036 ], [ %1065, %1121 ]
  %1062 = phi i8* [ %798, %1036 ], [ %1125, %1121 ]
  %1063 = phi i8* [ %802, %1036 ], [ %1128, %1121 ]
  %1064 = bitcast i32* %1059 to i8*
  %1065 = add nsw i32 %1061, -1
  br i1 %1042, label %1066, label %1121

1066:                                             ; preds = %1058
  br i1 %1053, label %1067, label %1072

1067:                                             ; preds = %1120, %1072, %1066
  %1068 = phi i32 [ %1029, %1072 ], [ %1029, %1066 ], [ %1056, %1120 ]
  %1069 = phi i8* [ %1062, %1072 ], [ %1062, %1066 ], [ %1085, %1120 ]
  %1070 = phi i8* [ %1063, %1072 ], [ %1063, %1066 ], [ %1086, %1120 ]
  %1071 = phi i32* [ %1059, %1072 ], [ %1059, %1066 ], [ %1087, %1120 ]
  br label %1130

1072:                                             ; preds = %1066
  %1073 = getelementptr i8, i8* %1062, i64 %1052
  %1074 = getelementptr i8, i8* %1063, i64 %1052
  %1075 = getelementptr i32, i32* %1059, i64 %1052
  %1076 = bitcast i32* %1075 to i8*
  %1077 = icmp ult i8* %1062, %1074
  %1078 = icmp ult i8* %1063, %1073
  %1079 = and i1 %1077, %1078
  %1080 = icmp ult i8* %1062, %1076
  %1081 = icmp ugt i8* %1073, %1064
  %1082 = and i1 %1080, %1081
  %1083 = or i1 %1079, %1082
  br i1 %1083, label %1067, label %1084

1084:                                             ; preds = %1072
  %1085 = getelementptr i8, i8* %1062, i64 %1054
  %1086 = getelementptr i8, i8* %1063, i64 %1054
  %1087 = getelementptr i32, i32* %1059, i64 %1054
  br label %1088

1088:                                             ; preds = %1088, %1084
  %1089 = phi i64 [ 0, %1084 ], [ %1118, %1088 ]
  %1090 = getelementptr i8, i8* %1062, i64 %1089
  %1091 = getelementptr i8, i8* %1063, i64 %1089
  %1092 = getelementptr i32, i32* %1059, i64 %1089
  %1093 = bitcast i8* %1091 to <4 x i8>*
  %1094 = load <4 x i8>, <4 x i8>* %1093, align 1, !alias.scope !34
  %1095 = getelementptr i8, i8* %1091, i64 4
  %1096 = bitcast i8* %1095 to <4 x i8>*
  %1097 = load <4 x i8>, <4 x i8>* %1096, align 1, !alias.scope !34
  %1098 = zext <4 x i8> %1094 to <4 x i32>
  %1099 = zext <4 x i8> %1097 to <4 x i32>
  %1100 = bitcast i32* %1092 to <4 x i32>*
  %1101 = load <4 x i32>, <4 x i32>* %1100, align 4, !alias.scope !37
  %1102 = getelementptr i32, i32* %1092, i64 4
  %1103 = bitcast i32* %1102 to <4 x i32>*
  %1104 = load <4 x i32>, <4 x i32>* %1103, align 4, !alias.scope !37
  %1105 = lshr <4 x i32> %1101, <i32 24, i32 24, i32 24, i32 24>
  %1106 = lshr <4 x i32> %1104, <i32 24, i32 24, i32 24, i32 24>
  %1107 = add nuw nsw <4 x i32> %1105, <i32 1, i32 1, i32 1, i32 1>
  %1108 = add nuw nsw <4 x i32> %1106, <i32 1, i32 1, i32 1, i32 1>
  %1109 = mul nuw nsw <4 x i32> %1107, %1098
  %1110 = mul nuw nsw <4 x i32> %1108, %1099
  %1111 = lshr <4 x i32> %1109, <i32 8, i32 8, i32 8, i32 8>
  %1112 = lshr <4 x i32> %1110, <i32 8, i32 8, i32 8, i32 8>
  %1113 = trunc <4 x i32> %1111 to <4 x i8>
  %1114 = trunc <4 x i32> %1112 to <4 x i8>
  %1115 = bitcast i8* %1090 to <4 x i8>*
  store <4 x i8> %1113, <4 x i8>* %1115, align 1, !alias.scope !39, !noalias !41
  %1116 = getelementptr i8, i8* %1090, i64 4
  %1117 = bitcast i8* %1116 to <4 x i8>*
  store <4 x i8> %1114, <4 x i8>* %1117, align 1, !alias.scope !39, !noalias !41
  %1118 = add i64 %1089, 8
  %1119 = icmp eq i64 %1118, %1054
  br i1 %1119, label %1120, label %1088, !llvm.loop !42

1120:                                             ; preds = %1088
  br i1 %1057, label %1121, label %1067

1121:                                             ; preds = %1130, %1120, %1058
  %1122 = phi i8* [ %1060, %1058 ], [ %1064, %1120 ], [ %1064, %1130 ]
  %1123 = phi i8* [ %1063, %1058 ], [ %1086, %1120 ], [ %1146, %1130 ]
  %1124 = phi i8* [ %1062, %1058 ], [ %1085, %1120 ], [ %1144, %1130 ]
  %1125 = getelementptr inbounds i8, i8* %1124, i64 %1043
  %1126 = getelementptr inbounds i8, i8* %1122, i64 %1044
  %1127 = bitcast i8* %1126 to i32*
  %1128 = getelementptr inbounds i8, i8* %1123, i64 %1045
  %1129 = icmp sgt i32 %1065, 0
  br i1 %1129, label %1058, label %1295

1130:                                             ; preds = %1067, %1130
  %1131 = phi i32 [ %1135, %1130 ], [ %1068, %1067 ]
  %1132 = phi i8* [ %1144, %1130 ], [ %1069, %1067 ]
  %1133 = phi i8* [ %1146, %1130 ], [ %1070, %1067 ]
  %1134 = phi i32* [ %1145, %1130 ], [ %1071, %1067 ]
  %1135 = add nsw i32 %1131, -1
  %1136 = load i8, i8* %1133, align 1
  %1137 = zext i8 %1136 to i32
  %1138 = load i32, i32* %1134, align 4
  %1139 = lshr i32 %1138, 24
  %1140 = add nuw nsw i32 %1139, 1
  %1141 = mul nuw nsw i32 %1140, %1137
  %1142 = lshr i32 %1141, 8
  %1143 = trunc i32 %1142 to i8
  store i8 %1143, i8* %1132, align 1
  %1144 = getelementptr inbounds i8, i8* %1132, i64 1
  %1145 = getelementptr inbounds i32, i32* %1134, i64 1
  %1146 = getelementptr inbounds i8, i8* %1133, i64 1
  %1147 = icmp sgt i32 %1135, 0
  br i1 %1147, label %1130, label %1121, !llvm.loop !43

1148:                                             ; preds = %797
  %1149 = bitcast %struct.SkMask* %1 to i16**
  %1150 = load i16*, i16** %1149, align 8
  %1151 = getelementptr inbounds %struct.SkMask, %struct.SkMask* %1, i64 0, i32 1, i32 2
  %1152 = load i32, i32* %1151, align 4
  %1153 = getelementptr inbounds %struct.SkIRect, %struct.SkIRect* %786, i64 0, i32 0
  %1154 = load i32, i32* %1153, align 4
  %1155 = sub i32 %1152, %1154
  %1156 = getelementptr inbounds %struct.SkMask, %struct.SkMask* %1, i64 0, i32 1, i32 3
  %1157 = load i32, i32* %1156, align 4
  %1158 = getelementptr inbounds %struct.SkMask, %struct.SkMask* %1, i64 0, i32 1, i32 1
  %1159 = load i32, i32* %1158, align 4
  %1160 = sub i32 %1157, %1159
  %1161 = icmp sgt i32 %1160, 0
  br i1 %1161, label %1162, label %1295

1162:                                             ; preds = %1148
  %1163 = getelementptr inbounds %struct.SkMask, %struct.SkMask* %1, i64 0, i32 2
  %1164 = load i32, i32* %1163, align 8
  %1165 = load i32, i32* %784, align 8
  %1166 = sub nsw i32 %785, %1155
  %1167 = sub nsw i32 %1165, %1155
  %1168 = icmp sgt i32 %1155, 0
  %1169 = sext i32 %1167 to i64
  %1170 = zext i32 %1164 to i64
  %1171 = sext i32 %1166 to i64
  %1172 = bitcast i16* %1150 to i8*
  %1173 = xor i32 %1154, -1
  %1174 = add i32 %1152, %1173
  %1175 = zext i32 %1174 to i64
  %1176 = add nuw nsw i64 %1175, 1
  %1177 = zext i32 %1174 to i64
  %1178 = add nuw nsw i64 %1177, 1
  %1179 = icmp ult i64 %1176, 8
  %1180 = and i64 %1176, 8589934584
  %1181 = trunc i64 %1180 to i32
  %1182 = sub i32 %1155, %1181
  %1183 = icmp eq i64 %1176, %1180
  br label %1184

1184:                                             ; preds = %1250, %1162
  %1185 = phi i16* [ %1150, %1162 ], [ %1256, %1250 ]
  %1186 = phi i8* [ %1172, %1162 ], [ %1255, %1250 ]
  %1187 = phi i32 [ %1160, %1162 ], [ %1191, %1250 ]
  %1188 = phi i8* [ %798, %1162 ], [ %1254, %1250 ]
  %1189 = phi i8* [ %802, %1162 ], [ %1257, %1250 ]
  %1190 = bitcast i16* %1185 to i8*
  %1191 = add nsw i32 %1187, -1
  br i1 %1168, label %1192, label %1250

1192:                                             ; preds = %1184
  br i1 %1179, label %1193, label %1198

1193:                                             ; preds = %1249, %1198, %1192
  %1194 = phi i32 [ %1155, %1198 ], [ %1155, %1192 ], [ %1182, %1249 ]
  %1195 = phi i8* [ %1188, %1198 ], [ %1188, %1192 ], [ %1211, %1249 ]
  %1196 = phi i8* [ %1189, %1198 ], [ %1189, %1192 ], [ %1212, %1249 ]
  %1197 = phi i16* [ %1185, %1198 ], [ %1185, %1192 ], [ %1213, %1249 ]
  br label %1259

1198:                                             ; preds = %1192
  %1199 = getelementptr i8, i8* %1188, i64 %1178
  %1200 = getelementptr i8, i8* %1189, i64 %1178
  %1201 = getelementptr i16, i16* %1185, i64 %1178
  %1202 = bitcast i16* %1201 to i8*
  %1203 = icmp ult i8* %1188, %1200
  %1204 = icmp ult i8* %1189, %1199
  %1205 = and i1 %1203, %1204
  %1206 = icmp ult i8* %1188, %1202
  %1207 = icmp ugt i8* %1199, %1190
  %1208 = and i1 %1206, %1207
  %1209 = or i1 %1205, %1208
  br i1 %1209, label %1193, label %1210

1210:                                             ; preds = %1198
  %1211 = getelementptr i8, i8* %1188, i64 %1180
  %1212 = getelementptr i8, i8* %1189, i64 %1180
  %1213 = getelementptr i16, i16* %1185, i64 %1180
  br label %1214

1214:                                             ; preds = %1214, %1210
  %1215 = phi i64 [ 0, %1210 ], [ %1247, %1214 ]
  %1216 = getelementptr i8, i8* %1188, i64 %1215
  %1217 = getelementptr i8, i8* %1189, i64 %1215
  %1218 = getelementptr i16, i16* %1185, i64 %1215
  %1219 = bitcast i8* %1217 to <8 x i8>*
  %1220 = load <8 x i8>, <8 x i8>* %1219, align 1, !alias.scope !44
  %1221 = zext <8 x i8> %1220 to <8 x i32>
  %1222 = bitcast i16* %1218 to <8 x i16>*
  %1223 = load <8 x i16>, <8 x i16>* %1222, align 2, !alias.scope !47
  %1224 = zext <8 x i16> %1223 to <8 x i32>
  %1225 = lshr <8 x i32> %1224, <i32 11, i32 11, i32 11, i32 11, i32 11, i32 11, i32 11, i32 11>
  %1226 = shl nuw nsw <8 x i32> %1225, <i32 3, i32 3, i32 3, i32 3, i32 3, i32 3, i32 3, i32 3>
  %1227 = lshr <8 x i32> %1224, <i32 13, i32 13, i32 13, i32 13, i32 13, i32 13, i32 13, i32 13>
  %1228 = or <8 x i32> %1226, %1227
  %1229 = lshr <8 x i32> %1224, <i32 5, i32 5, i32 5, i32 5, i32 5, i32 5, i32 5, i32 5>
  %1230 = and <8 x i32> %1229, <i32 63, i32 63, i32 63, i32 63, i32 63, i32 63, i32 63, i32 63>
  %1231 = shl nuw nsw <8 x i32> %1230, <i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2>
  %1232 = lshr <8 x i32> %1230, <i32 4, i32 4, i32 4, i32 4, i32 4, i32 4, i32 4, i32 4>
  %1233 = or <8 x i32> %1231, %1232
  %1234 = and <8 x i32> %1224, <i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31>
  %1235 = shl nuw nsw <8 x i32> %1234, <i32 3, i32 3, i32 3, i32 3, i32 3, i32 3, i32 3, i32 3>
  %1236 = lshr <8 x i32> %1234, <i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2>
  %1237 = or <8 x i32> %1235, %1236
  %1238 = add nuw nsw <8 x i32> %1237, %1228
  %1239 = add nuw nsw <8 x i32> %1238, %1233
  %1240 = udiv <8 x i32> %1239, <i32 3, i32 3, i32 3, i32 3, i32 3, i32 3, i32 3, i32 3>
  %1241 = and <8 x i32> %1240, <i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255>
  %1242 = add nuw nsw <8 x i32> %1241, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %1243 = mul nuw nsw <8 x i32> %1242, %1221
  %1244 = lshr <8 x i32> %1243, <i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8>
  %1245 = trunc <8 x i32> %1244 to <8 x i8>
  %1246 = bitcast i8* %1216 to <8 x i8>*
  store <8 x i8> %1245, <8 x i8>* %1246, align 1, !alias.scope !49, !noalias !51
  %1247 = add i64 %1215, 8
  %1248 = icmp eq i64 %1247, %1180
  br i1 %1248, label %1249, label %1214, !llvm.loop !52

1249:                                             ; preds = %1214
  br i1 %1183, label %1250, label %1193

1250:                                             ; preds = %1259, %1249, %1184
  %1251 = phi i8* [ %1186, %1184 ], [ %1190, %1249 ], [ %1190, %1259 ]
  %1252 = phi i8* [ %1189, %1184 ], [ %1212, %1249 ], [ %1292, %1259 ]
  %1253 = phi i8* [ %1188, %1184 ], [ %1211, %1249 ], [ %1290, %1259 ]
  %1254 = getelementptr inbounds i8, i8* %1253, i64 %1169
  %1255 = getelementptr inbounds i8, i8* %1251, i64 %1170
  %1256 = bitcast i8* %1255 to i16*
  %1257 = getelementptr inbounds i8, i8* %1252, i64 %1171
  %1258 = icmp sgt i32 %1191, 0
  br i1 %1258, label %1184, label %1295

1259:                                             ; preds = %1193, %1259
  %1260 = phi i32 [ %1264, %1259 ], [ %1194, %1193 ]
  %1261 = phi i8* [ %1290, %1259 ], [ %1195, %1193 ]
  %1262 = phi i8* [ %1292, %1259 ], [ %1196, %1193 ]
  %1263 = phi i16* [ %1291, %1259 ], [ %1197, %1193 ]
  %1264 = add nsw i32 %1260, -1
  %1265 = load i8, i8* %1262, align 1
  %1266 = zext i8 %1265 to i32
  %1267 = load i16, i16* %1263, align 2
  %1268 = zext i16 %1267 to i32
  %1269 = lshr i32 %1268, 11
  %1270 = shl nuw nsw i32 %1269, 3
  %1271 = lshr i32 %1268, 13
  %1272 = or i32 %1270, %1271
  %1273 = lshr i32 %1268, 5
  %1274 = and i32 %1273, 63
  %1275 = shl nuw nsw i32 %1274, 2
  %1276 = lshr i32 %1274, 4
  %1277 = or i32 %1275, %1276
  %1278 = and i32 %1268, 31
  %1279 = shl nuw nsw i32 %1278, 3
  %1280 = lshr i32 %1278, 2
  %1281 = or i32 %1279, %1280
  %1282 = add nuw nsw i32 %1281, %1272
  %1283 = add nuw nsw i32 %1282, %1277
  %1284 = udiv i32 %1283, 3
  %1285 = and i32 %1284, 255
  %1286 = add nuw nsw i32 %1285, 1
  %1287 = mul nuw nsw i32 %1286, %1266
  %1288 = lshr i32 %1287, 8
  %1289 = trunc i32 %1288 to i8
  store i8 %1289, i8* %1261, align 1
  %1290 = getelementptr inbounds i8, i8* %1261, i64 1
  %1291 = getelementptr inbounds i16, i16* %1263, i64 1
  %1292 = getelementptr inbounds i8, i8* %1262, i64 1
  %1293 = icmp sgt i32 %1264, 0
  br i1 %1293, label %1259, label %1250, !llvm.loop !53

1294:                                             ; preds = %797
  call void (i8*, i32, i8*, ...) @_Z16SkAbort_FileLinePKciS0_z(i8* getelementptr inbounds ([47 x i8], [47 x i8]* @.str, i64 0, i64 0), i32 265, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.1, i64 0, i64 0)) #10
  unreachable

1295:                                             ; preds = %1250, %1121, %996, %835, %1148, %1022, %870, %804
  %1296 = icmp eq i8* %783, null
  br i1 %1296, label %1301, label %1297

1297:                                             ; preds = %1295
  call void @_ZN6SkMask9FreeImageEPv(i8* nonnull %783) #9
  br label %1301

1298:                                             ; preds = %781
  %1299 = icmp eq i8* %783, null
  br i1 %1299, label %1301, label %1300

1300:                                             ; preds = %1298
  call void @_ZN6SkMask9FreeImageEPv(i8* nonnull %783) #9
  br label %1301

1301:                                             ; preds = %775, %707, %630, %554, %466, %328, %224, %124, %31, %45, %43, %56, %67, %129, %230, %334, %483, %559, %635, %712, %1295, %1297, %1298, %1300, %14, %20, %16
  %1302 = phi i1 [ true, %16 ], [ true, %20 ], [ false, %14 ], [ false, %31 ], [ true, %45 ], [ true, %43 ], [ true, %56 ], [ true, %67 ], [ true, %129 ], [ true, %230 ], [ true, %334 ], [ true, %483 ], [ true, %559 ], [ true, %635 ], [ true, %712 ], [ true, %1295 ], [ true, %1297 ], [ false, %1298 ], [ false, %1300 ], [ true, %124 ], [ true, %224 ], [ true, %328 ], [ true, %466 ], [ true, %554 ], [ true, %630 ], [ true, %707 ], [ true, %775 ]
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %10) #9
  br label %1303

1303:                                             ; preds = %5, %1301
  %1304 = phi i1 [ %1302, %1301 ], [ false, %5 ]
  ret i1 %1304

1305:                                             ; preds = %526
  %1306 = getelementptr inbounds i8, i8* %515, i64 1
  store i8 0, i8* %1306, align 1
  br label %1307

1307:                                             ; preds = %1305, %526
  %1308 = getelementptr inbounds i8, i8* %515, i64 2
  %1309 = icmp sgt i32 %532, 0
  %1310 = add nsw i32 %532, -1
  %1311 = getelementptr inbounds i8, i8* %533, i64 1
  %1312 = ptrtoint i8* %1311 to i64
  %1313 = select i1 %1309, i64 %531, i64 %1312
  %1314 = select i1 %1309, i32 %1310, i32 7
  %1315 = add i32 %518, -2
  %1316 = icmp eq i32 %1315, 0
  br i1 %1316, label %539, label %514

1317:                                             ; preds = %624
  %1318 = load i8, i8* %625, align 1
  %1319 = zext i8 %1318 to i32
  %1320 = xor i8 %628, -1
  %1321 = zext i8 %1320 to i32
  %1322 = add nuw nsw i32 %1321, 1
  %1323 = mul nuw nsw i32 %1322, %1319
  %1324 = lshr i32 %1323, 8
  %1325 = trunc i32 %1324 to i8
  store i8 %1325, i8* %625, align 1
  br label %1326

1326:                                             ; preds = %1317, %624
  %1327 = getelementptr inbounds i8, i8* %611, i64 2
  %1328 = getelementptr inbounds i8, i8* %612, i64 2
  %1329 = icmp sgt i32 %627, 0
  br i1 %1329, label %609, label %630

1330:                                             ; preds = %700
  %1331 = load i8, i8* %701, align 1
  %1332 = zext i8 %1331 to i32
  %1333 = sub nuw nsw i32 256, %705
  %1334 = mul nuw nsw i32 %1333, %1332
  %1335 = lshr i32 %1334, 8
  %1336 = trunc i32 %1335 to i8
  store i8 %1336, i8* %701, align 1
  br label %1337

1337:                                             ; preds = %1330, %700
  %1338 = getelementptr inbounds i8, i8* %688, i64 2
  %1339 = getelementptr inbounds i32, i32* %689, i64 2
  %1340 = icmp sgt i32 %703, 0
  br i1 %1340, label %686, label %707
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #3

declare void @_ZN16SkMaskBlurFilterC1Edd(%class.SkMaskBlurFilter*, double, double) unnamed_addr #2

declare zeroext i1 @_ZNK16SkMaskBlurFilter9hasNoBlurEv(%class.SkMaskBlurFilter*) local_unnamed_addr #2

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #3

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #3

declare i64 @_ZNK16SkMaskBlurFilter4blurERK6SkMaskPS0_(%class.SkMaskBlurFilter*, %struct.SkMask* dereferenceable(32), %struct.SkMask*) local_unnamed_addr #2

; Function Attrs: noreturn
declare void @_Z16SkAbort_FileLinePKciS0_z(i8*, i32, i8*, ...) local_unnamed_addr #4

declare i64 @_ZNK6SkMask16computeImageSizeEv(%struct.SkMask*) local_unnamed_addr #2

declare i8* @_ZN6SkMask10AllocImageEmNS_9AllocTypeE(i64, i32) local_unnamed_addr #2

; Function Attrs: nofree norecurse nounwind ssp uwtable writeonly
define hidden void @_ZN10SkBlurMask18ComputeBlurProfileEPhif(i8* nocapture, i32, float) local_unnamed_addr #5 align 2 {
  %4 = ashr i32 %1, 1
  %5 = fmul float %2, 2.000000e+00
  %6 = fdiv float 1.000000e+00, %5
  store i8 -1, i8* %0, align 1
  %7 = icmp sgt i32 %1, 1
  br i1 %7, label %8, label %76

8:                                                ; preds = %3
  %9 = zext i32 %1 to i64
  %10 = add nsw i64 %9, -1
  %11 = icmp ult i64 %10, 16
  br i1 %11, label %12, label %14

12:                                               ; preds = %74, %8
  %13 = phi i64 [ 1, %8 ], [ %16, %74 ]
  br label %77

14:                                               ; preds = %8
  %15 = and i64 %10, -16
  %16 = or i64 %15, 1
  %17 = insertelement <16 x i32> undef, i32 %4, i32 0
  %18 = shufflevector <16 x i32> %17, <16 x i32> undef, <16 x i32> zeroinitializer
  %19 = insertelement <16 x float> undef, float %6, i32 0
  %20 = shufflevector <16 x float> %19, <16 x float> undef, <16 x i32> zeroinitializer
  br label %21

21:                                               ; preds = %21, %14
  %22 = phi i64 [ 0, %14 ], [ %71, %21 ]
  %23 = phi <16 x i32> [ <i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16>, %14 ], [ %72, %21 ]
  %24 = or i64 %22, 1
  %25 = sub nsw <16 x i32> %18, %23
  %26 = sitofp <16 x i32> %25 to <16 x float>
  %27 = fadd <16 x float> %26, <float -5.000000e-01, float -5.000000e-01, float -5.000000e-01, float -5.000000e-01, float -5.000000e-01, float -5.000000e-01, float -5.000000e-01, float -5.000000e-01, float -5.000000e-01, float -5.000000e-01, float -5.000000e-01, float -5.000000e-01, float -5.000000e-01, float -5.000000e-01, float -5.000000e-01, float -5.000000e-01>
  %28 = fmul <16 x float> %20, %27
  %29 = fcmp ule <16 x float> %28, <float 1.500000e+00, float 1.500000e+00, float 1.500000e+00, float 1.500000e+00, float 1.500000e+00, float 1.500000e+00, float 1.500000e+00, float 1.500000e+00, float 1.500000e+00, float 1.500000e+00, float 1.500000e+00, float 1.500000e+00, float 1.500000e+00, float 1.500000e+00, float 1.500000e+00, float 1.500000e+00>
  %30 = fcmp olt <16 x float> %28, <float -1.500000e+00, float -1.500000e+00, float -1.500000e+00, float -1.500000e+00, float -1.500000e+00, float -1.500000e+00, float -1.500000e+00, float -1.500000e+00, float -1.500000e+00, float -1.500000e+00, float -1.500000e+00, float -1.500000e+00, float -1.500000e+00, float -1.500000e+00, float -1.500000e+00, float -1.500000e+00>
  %31 = fmul <16 x float> %28, %28
  %32 = fmul <16 x float> %28, %31
  %33 = fcmp ogt <16 x float> %28, <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>
  %34 = fcmp ogt <16 x float> %28, <float -5.000000e-01, float -5.000000e-01, float -5.000000e-01, float -5.000000e-01, float -5.000000e-01, float -5.000000e-01, float -5.000000e-01, float -5.000000e-01, float -5.000000e-01, float -5.000000e-01, float -5.000000e-01, float -5.000000e-01, float -5.000000e-01, float -5.000000e-01, float -5.000000e-01, float -5.000000e-01>
  %35 = fdiv <16 x float> %32, <float -6.000000e+00, float -6.000000e+00, float -6.000000e+00, float -6.000000e+00, float -6.000000e+00, float -6.000000e+00, float -6.000000e+00, float -6.000000e+00, float -6.000000e+00, float -6.000000e+00, float -6.000000e+00, float -6.000000e+00, float -6.000000e+00, float -6.000000e+00, float -6.000000e+00, float -6.000000e+00>
  %36 = fmul <16 x float> %31, <float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00>
  %37 = fmul <16 x float> %36, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %38 = fsub <16 x float> %35, %37
  %39 = fmul <16 x float> %28, <float 1.125000e+00, float 1.125000e+00, float 1.125000e+00, float 1.125000e+00, float 1.125000e+00, float 1.125000e+00, float 1.125000e+00, float 1.125000e+00, float 1.125000e+00, float 1.125000e+00, float 1.125000e+00, float 1.125000e+00, float 1.125000e+00, float 1.125000e+00, float 1.125000e+00, float 1.125000e+00>
  %40 = fsub <16 x float> %38, %39
  %41 = fadd <16 x float> %40, <float 4.375000e-01, float 4.375000e-01, float 4.375000e-01, float 4.375000e-01, float 4.375000e-01, float 4.375000e-01, float 4.375000e-01, float 4.375000e-01, float 4.375000e-01, float 4.375000e-01, float 4.375000e-01, float 4.375000e-01, float 4.375000e-01, float 4.375000e-01, float 4.375000e-01, float 4.375000e-01>
  %42 = fmul <16 x float> %28, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %43 = fdiv <16 x float> %32, <float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00>
  %44 = fsub <16 x float> %43, %42
  %45 = fadd <16 x float> %44, <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>
  %46 = fdiv <16 x float> %32, <float 6.000000e+00, float 6.000000e+00, float 6.000000e+00, float 6.000000e+00, float 6.000000e+00, float 6.000000e+00, float 6.000000e+00, float 6.000000e+00, float 6.000000e+00, float 6.000000e+00, float 6.000000e+00, float 6.000000e+00, float 6.000000e+00, float 6.000000e+00, float 6.000000e+00, float 6.000000e+00>
  %47 = fmul <16 x float> %31, <float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00>
  %48 = fmul <16 x float> %47, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %49 = fsub <16 x float> %46, %48
  %50 = fmul <16 x float> %28, <float 1.125000e+00, float 1.125000e+00, float 1.125000e+00, float 1.125000e+00, float 1.125000e+00, float 1.125000e+00, float 1.125000e+00, float 1.125000e+00, float 1.125000e+00, float 1.125000e+00, float 1.125000e+00, float 1.125000e+00, float 1.125000e+00, float 1.125000e+00, float 1.125000e+00, float 1.125000e+00>
  %51 = fadd <16 x float> %50, %49
  %52 = fsub <16 x float> <float 5.625000e-01, float 5.625000e-01, float 5.625000e-01, float 5.625000e-01, float 5.625000e-01, float 5.625000e-01, float 5.625000e-01, float 5.625000e-01, float 5.625000e-01, float 5.625000e-01, float 5.625000e-01, float 5.625000e-01, float 5.625000e-01, float 5.625000e-01, float 5.625000e-01, float 5.625000e-01>, %51
  %53 = and <16 x i1> %30, %29
  %54 = xor <16 x i1> %30, <i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true>
  %55 = and <16 x i1> %29, %54
  %56 = and <16 x i1> %33, %55
  %57 = xor <16 x i1> %33, <i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true>
  %58 = and <16 x i1> %55, %57
  %59 = and <16 x i1> %34, %58
  %60 = xor <16 x i1> %34, <i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true>
  %61 = and <16 x i1> %58, %60
  %62 = select <16 x i1> %53, <16 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, <16 x float> zeroinitializer
  %63 = select <16 x i1> %56, <16 x float> %52, <16 x float> %62
  %64 = select <16 x i1> %59, <16 x float> %45, <16 x float> %63
  %65 = select <16 x i1> %61, <16 x float> %41, <16 x float> %64
  %66 = fmul <16 x float> %65, <float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02>
  %67 = fptoui <16 x float> %66 to <16 x i8>
  %68 = xor <16 x i8> %67, <i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1>
  %69 = getelementptr inbounds i8, i8* %0, i64 %24
  %70 = bitcast i8* %69 to <16 x i8>*
  store <16 x i8> %68, <16 x i8>* %70, align 1
  %71 = add i64 %22, 16
  %72 = add <16 x i32> %23, <i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16>
  %73 = icmp eq i64 %71, %15
  br i1 %73, label %74, label %21, !llvm.loop !54

74:                                               ; preds = %21
  %75 = icmp eq i64 %10, %15
  br i1 %75, label %76, label %12

76:                                               ; preds = %114, %74, %3
  ret void

77:                                               ; preds = %12, %114
  %78 = phi i64 [ %120, %114 ], [ %13, %12 ]
  %79 = trunc i64 %78 to i32
  %80 = sub nsw i32 %4, %79
  %81 = sitofp i32 %80 to float
  %82 = fadd float %81, -5.000000e-01
  %83 = fmul float %6, %82
  %84 = fcmp ogt float %83, 1.500000e+00
  br i1 %84, label %114, label %85

85:                                               ; preds = %77
  %86 = fcmp olt float %83, -1.500000e+00
  br i1 %86, label %114, label %87

87:                                               ; preds = %85
  %88 = fmul float %83, %83
  %89 = fmul float %83, %88
  %90 = fcmp ogt float %83, 5.000000e-01
  br i1 %90, label %91, label %99

91:                                               ; preds = %87
  %92 = fdiv float %89, 6.000000e+00
  %93 = fmul float %88, 3.000000e+00
  %94 = fmul float %93, 2.500000e-01
  %95 = fsub float %92, %94
  %96 = fmul float %83, 1.125000e+00
  %97 = fadd float %96, %95
  %98 = fsub float 5.625000e-01, %97
  br label %114

99:                                               ; preds = %87
  %100 = fcmp ogt float %83, -5.000000e-01
  br i1 %100, label %101, label %106

101:                                              ; preds = %99
  %102 = fmul float %83, 7.500000e-01
  %103 = fdiv float %89, 3.000000e+00
  %104 = fsub float %103, %102
  %105 = fadd float %104, 5.000000e-01
  br label %114

106:                                              ; preds = %99
  %107 = fdiv float %89, -6.000000e+00
  %108 = fmul float %88, 3.000000e+00
  %109 = fmul float %108, 2.500000e-01
  %110 = fsub float %107, %109
  %111 = fmul float %83, 1.125000e+00
  %112 = fsub float %110, %111
  %113 = fadd float %112, 4.375000e-01
  br label %114

114:                                              ; preds = %77, %85, %91, %101, %106
  %115 = phi float [ 0.000000e+00, %77 ], [ 1.000000e+00, %85 ], [ %98, %91 ], [ %105, %101 ], [ %113, %106 ]
  %116 = fmul float %115, 2.550000e+02
  %117 = fptoui float %116 to i8
  %118 = xor i8 %117, -1
  %119 = getelementptr inbounds i8, i8* %0, i64 %78
  store i8 %118, i8* %119, align 1
  %120 = add nuw nsw i64 %78, 1
  %121 = icmp eq i64 %120, %9
  br i1 %121, label %76, label %77, !llvm.loop !55
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden zeroext i8 @_ZN10SkBlurMask13ProfileLookupEPKhiii(i8* nocapture readonly, i32, i32, i32) local_unnamed_addr #6 align 2 {
  %5 = shl i32 %1, 1
  %6 = or i32 %5, 1
  %7 = sub nsw i32 %6, %2
  %8 = icmp slt i32 %7, 0
  %9 = sub nsw i32 0, %7
  %10 = select i1 %8, i32 %9, i32 %7
  %11 = sub nsw i32 %10, %3
  %12 = ashr i32 %11, 1
  %13 = icmp sgt i32 %12, 0
  %14 = select i1 %13, i32 %12, i32 0
  %15 = zext i32 %14 to i64
  %16 = getelementptr inbounds i8, i8* %0, i64 %15
  %17 = load i8, i8* %16, align 1
  ret i8 %17
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN10SkBlurMask22ComputeBlurredScanlineEPhPKhjf(i8* nocapture, i8* nocapture readonly, i32, float) local_unnamed_addr #1 align 2 {
  %5 = fmul float %3, 6.000000e+00
  %6 = tail call float @llvm.ceil.f32(float %5)
  %7 = fcmp olt float %6, 0x41DFFFFFE0000000
  %8 = select i1 %7, float %6, float 0x41DFFFFFE0000000
  %9 = fcmp ogt float %8, 0xC1DFFFFFE0000000
  %10 = select i1 %9, float %8, float 0xC1DFFFFFE0000000
  %11 = fptosi float %10 to i32
  %12 = icmp eq i32 %2, 0
  br i1 %12, label %28, label %13

13:                                               ; preds = %4
  %14 = zext i32 %2 to i64
  %15 = tail call i8* @_Z15sk_malloc_throwmm(i64 %14, i64 1) #9
  %16 = sub i32 %2, %11
  %17 = and i32 %11, -2
  %18 = icmp ult i32 %16, %11
  %19 = xor i32 %16, -1
  %20 = add i32 %17, %19
  %21 = uitofp i32 %16 to float
  %22 = fmul float %3, 2.000000e+00
  %23 = fdiv float %21, %22
  %24 = zext i32 %2 to i64
  br label %29

25:                                               ; preds = %119
  %26 = icmp eq i8* %15, null
  br i1 %26, label %28, label %27

27:                                               ; preds = %25
  tail call void @_Z7sk_freePv(i8* nonnull %15) #9
  br label %28

28:                                               ; preds = %4, %25, %27
  ret void

29:                                               ; preds = %119, %13
  %30 = phi i64 [ 0, %13 ], [ %122, %119 ]
  %31 = trunc i64 %30 to i32
  br i1 %18, label %46, label %32

32:                                               ; preds = %29
  %33 = shl i32 %31, 1
  %34 = or i32 %33, 1
  %35 = sub nsw i32 %34, %2
  %36 = icmp slt i32 %35, 0
  %37 = sub nsw i32 0, %35
  %38 = select i1 %36, i32 %37, i32 %35
  %39 = add i32 %20, %38
  %40 = ashr i32 %39, 1
  %41 = icmp sgt i32 %40, 0
  %42 = select i1 %41, i32 %40, i32 0
  %43 = zext i32 %42 to i64
  %44 = getelementptr inbounds i8, i8* %1, i64 %43
  %45 = load i8, i8* %44, align 1
  br label %119

46:                                               ; preds = %29
  %47 = uitofp i32 %31 to float
  %48 = fadd float %47, 5.000000e-01
  %49 = fdiv float %48, %22
  %50 = fsub float 1.500000e+00, %49
  %51 = fcmp ogt float %50, 1.500000e+00
  br i1 %51, label %81, label %52

52:                                               ; preds = %46
  %53 = fcmp olt float %50, -1.500000e+00
  br i1 %53, label %81, label %54

54:                                               ; preds = %52
  %55 = fmul float %50, %50
  %56 = fmul float %50, %55
  %57 = fcmp ogt float %50, 5.000000e-01
  br i1 %57, label %58, label %66

58:                                               ; preds = %54
  %59 = fdiv float %56, 6.000000e+00
  %60 = fmul float %55, 3.000000e+00
  %61 = fmul float %60, 2.500000e-01
  %62 = fsub float %59, %61
  %63 = fmul float %50, 1.125000e+00
  %64 = fadd float %63, %62
  %65 = fsub float 5.625000e-01, %64
  br label %81

66:                                               ; preds = %54
  %67 = fcmp ogt float %50, -5.000000e-01
  br i1 %67, label %68, label %73

68:                                               ; preds = %66
  %69 = fmul float %50, 7.500000e-01
  %70 = fdiv float %56, 3.000000e+00
  %71 = fsub float %70, %69
  %72 = fadd float %71, 5.000000e-01
  br label %81

73:                                               ; preds = %66
  %74 = fdiv float %56, -6.000000e+00
  %75 = fmul float %55, 3.000000e+00
  %76 = fmul float %75, 2.500000e-01
  %77 = fsub float %74, %76
  %78 = fmul float %50, 1.125000e+00
  %79 = fsub float %77, %78
  %80 = fadd float %79, 4.375000e-01
  br label %81

81:                                               ; preds = %46, %52, %58, %68, %73
  %82 = phi float [ 0.000000e+00, %46 ], [ 1.000000e+00, %52 ], [ %65, %58 ], [ %72, %68 ], [ %80, %73 ]
  %83 = fadd float %23, %50
  %84 = fcmp ogt float %83, 1.500000e+00
  br i1 %84, label %114, label %85

85:                                               ; preds = %81
  %86 = fcmp olt float %83, -1.500000e+00
  br i1 %86, label %114, label %87

87:                                               ; preds = %85
  %88 = fmul float %83, %83
  %89 = fmul float %83, %88
  %90 = fcmp ogt float %83, 5.000000e-01
  br i1 %90, label %91, label %99

91:                                               ; preds = %87
  %92 = fdiv float %89, 6.000000e+00
  %93 = fmul float %88, 3.000000e+00
  %94 = fmul float %93, 2.500000e-01
  %95 = fsub float %92, %94
  %96 = fmul float %83, 1.125000e+00
  %97 = fadd float %96, %95
  %98 = fsub float 5.625000e-01, %97
  br label %114

99:                                               ; preds = %87
  %100 = fcmp ogt float %83, -5.000000e-01
  br i1 %100, label %101, label %106

101:                                              ; preds = %99
  %102 = fmul float %83, 7.500000e-01
  %103 = fdiv float %89, 3.000000e+00
  %104 = fsub float %103, %102
  %105 = fadd float %104, 5.000000e-01
  br label %114

106:                                              ; preds = %99
  %107 = fdiv float %89, -6.000000e+00
  %108 = fmul float %88, 3.000000e+00
  %109 = fmul float %108, 2.500000e-01
  %110 = fsub float %107, %109
  %111 = fmul float %83, 1.125000e+00
  %112 = fsub float %110, %111
  %113 = fadd float %112, 4.375000e-01
  br label %114

114:                                              ; preds = %81, %85, %91, %101, %106
  %115 = phi float [ 0.000000e+00, %81 ], [ 1.000000e+00, %85 ], [ %98, %91 ], [ %105, %101 ], [ %113, %106 ]
  %116 = fsub float %82, %115
  %117 = fmul float %116, 2.550000e+02
  %118 = fptoui float %117 to i8
  br label %119

119:                                              ; preds = %32, %114
  %120 = phi i8 [ %45, %32 ], [ %118, %114 ]
  %121 = getelementptr inbounds i8, i8* %0, i64 %30
  store i8 %120, i8* %121, align 1
  %122 = add nuw nsw i64 %30, 1
  %123 = icmp eq i64 %122, %24
  br i1 %123, label %25, label %29
}

; Function Attrs: nounwind readnone speculatable
declare float @llvm.ceil.f32(float) #7

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZN10SkBlurMask8BlurRectEfP6SkMaskRK6SkRect11SkBlurStyleP8SkIPointNS0_10CreateModeE(float, %struct.SkMask*, %struct.SkRect* nocapture readonly dereferenceable(16), i32, %struct.SkIPoint*, i32) local_unnamed_addr #1 align 2 {
  %7 = fmul float %0, 6.000000e+00
  %8 = tail call float @llvm.ceil.f32(float %7)
  %9 = fcmp olt float %8, 0x41DFFFFFE0000000
  %10 = select i1 %9, float %8, float 0x41DFFFFFE0000000
  %11 = fcmp ogt float %10, 0xC1DFFFFFE0000000
  %12 = select i1 %11, float %10, float 0xC1DFFFFFE0000000
  %13 = fptosi float %12 to i32
  %14 = icmp slt i32 %13, 1
  br i1 %14, label %601, label %15

15:                                               ; preds = %6
  %16 = lshr i32 %13, 1
  %17 = icmp eq %struct.SkIPoint* %4, null
  br i1 %17, label %21, label %18

18:                                               ; preds = %15
  %19 = getelementptr inbounds %struct.SkIPoint, %struct.SkIPoint* %4, i64 0, i32 0
  store i32 %16, i32* %19, align 4
  %20 = getelementptr inbounds %struct.SkIPoint, %struct.SkIPoint* %4, i64 0, i32 1
  store i32 %16, i32* %20, align 4
  br label %21

21:                                               ; preds = %15, %18
  %22 = getelementptr inbounds %struct.SkMask, %struct.SkMask* %1, i64 0, i32 1
  %23 = getelementptr inbounds %struct.SkRect, %struct.SkRect* %2, i64 0, i32 0
  %24 = sitofp i32 %16 to float
  %25 = getelementptr inbounds %struct.SkRect, %struct.SkRect* %2, i64 0, i32 1
  %26 = getelementptr inbounds %struct.SkRect, %struct.SkRect* %2, i64 0, i32 2
  %27 = getelementptr inbounds %struct.SkRect, %struct.SkRect* %2, i64 0, i32 3
  %28 = bitcast %struct.SkRect* %2 to <4 x float>*
  %29 = load <4 x float>, <4 x float>* %28, align 4
  %30 = insertelement <4 x float> undef, float %24, i32 0
  %31 = shufflevector <4 x float> %30, <4 x float> undef, <4 x i32> zeroinitializer
  %32 = fsub <4 x float> %29, %31
  %33 = fadd <4 x float> %29, %31
  %34 = shufflevector <4 x float> %32, <4 x float> %33, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %35 = fadd <4 x float> %34, <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>
  %36 = call <4 x float> @llvm.floor.v4f32(<4 x float> %35)
  %37 = fcmp olt <4 x float> %36, <float 0x41DFFFFFE0000000, float 0x41DFFFFFE0000000, float 0x41DFFFFFE0000000, float 0x41DFFFFFE0000000>
  %38 = select <4 x i1> %37, <4 x float> %36, <4 x float> <float 0x41DFFFFFE0000000, float 0x41DFFFFFE0000000, float 0x41DFFFFFE0000000, float 0x41DFFFFFE0000000>
  %39 = fcmp ogt <4 x float> %38, <float 0xC1DFFFFFE0000000, float 0xC1DFFFFFE0000000, float 0xC1DFFFFFE0000000, float 0xC1DFFFFFE0000000>
  %40 = select <4 x i1> %39, <4 x float> %38, <4 x float> <float 0xC1DFFFFFE0000000, float 0xC1DFFFFFE0000000, float 0xC1DFFFFFE0000000, float 0xC1DFFFFFE0000000>
  %41 = fptosi <4 x float> %40 to <4 x i32>
  %42 = getelementptr inbounds %struct.SkIRect, %struct.SkIRect* %22, i64 0, i32 0
  %43 = getelementptr inbounds %struct.SkMask, %struct.SkMask* %1, i64 0, i32 1, i32 1
  %44 = getelementptr inbounds %struct.SkMask, %struct.SkMask* %1, i64 0, i32 1, i32 2
  %45 = getelementptr inbounds %struct.SkMask, %struct.SkMask* %1, i64 0, i32 1, i32 3
  %46 = bitcast %struct.SkIRect* %22 to <4 x i32>*
  store <4 x i32> %41, <4 x i32>* %46, align 4
  %47 = extractelement <4 x i32> %41, i32 0
  %48 = extractelement <4 x i32> %41, i32 2
  %49 = sub i32 %48, %47
  %50 = getelementptr inbounds %struct.SkMask, %struct.SkMask* %1, i64 0, i32 2
  store i32 %49, i32* %50, align 8
  %51 = getelementptr inbounds %struct.SkMask, %struct.SkMask* %1, i64 0, i32 3
  store i8 1, i8* %51, align 4
  %52 = getelementptr inbounds %struct.SkMask, %struct.SkMask* %1, i64 0, i32 0
  store i8* null, i8** %52, align 8
  %53 = load float, float* %26, align 4
  %54 = load float, float* %23, align 4
  %55 = fsub float %53, %54
  %56 = tail call float @llvm.floor.f32(float %55)
  %57 = fcmp olt float %56, 0x41DFFFFFE0000000
  %58 = select i1 %57, float %56, float 0x41DFFFFFE0000000
  %59 = fcmp ogt float %58, 0xC1DFFFFFE0000000
  %60 = select i1 %59, float %58, float 0xC1DFFFFFE0000000
  %61 = fptosi float %60 to i32
  %62 = load float, float* %27, align 4
  %63 = load float, float* %25, align 4
  %64 = fsub float %62, %63
  %65 = tail call float @llvm.floor.f32(float %64)
  %66 = fcmp olt float %65, 0x41DFFFFFE0000000
  %67 = select i1 %66, float %65, float 0x41DFFFFFE0000000
  %68 = fcmp ogt float %67, 0xC1DFFFFFE0000000
  %69 = select i1 %68, float %67, float 0xC1DFFFFFE0000000
  %70 = fptosi float %69 to i32
  %71 = icmp eq i32 %5, 0
  br i1 %71, label %72, label %113

72:                                               ; preds = %21
  %73 = icmp eq i32 %3, 3
  br i1 %73, label %74, label %601

74:                                               ; preds = %72
  %75 = fadd float %54, 5.000000e-01
  %76 = tail call float @llvm.floor.f32(float %75) #9
  %77 = fcmp olt float %76, 0x41DFFFFFE0000000
  %78 = select i1 %77, float %76, float 0x41DFFFFFE0000000
  %79 = fcmp ogt float %78, 0xC1DFFFFFE0000000
  %80 = select i1 %79, float %78, float 0xC1DFFFFFE0000000
  %81 = fptosi float %80 to i32
  %82 = fadd float %63, 5.000000e-01
  %83 = tail call float @llvm.floor.f32(float %82) #9
  %84 = fcmp olt float %83, 0x41DFFFFFE0000000
  %85 = select i1 %84, float %83, float 0x41DFFFFFE0000000
  %86 = fcmp ogt float %85, 0xC1DFFFFFE0000000
  %87 = select i1 %86, float %85, float 0xC1DFFFFFE0000000
  %88 = fptosi float %87 to i32
  %89 = fadd float %53, 5.000000e-01
  %90 = tail call float @llvm.floor.f32(float %89) #9
  %91 = fcmp olt float %90, 0x41DFFFFFE0000000
  %92 = select i1 %91, float %90, float 0x41DFFFFFE0000000
  %93 = fcmp ogt float %92, 0xC1DFFFFFE0000000
  %94 = select i1 %93, float %92, float 0xC1DFFFFFE0000000
  %95 = fptosi float %94 to i32
  %96 = fadd float %62, 5.000000e-01
  %97 = tail call float @llvm.floor.f32(float %96) #9
  %98 = fcmp olt float %97, 0x41DFFFFFE0000000
  %99 = select i1 %98, float %97, float 0x41DFFFFFE0000000
  %100 = fcmp ogt float %99, 0xC1DFFFFFE0000000
  %101 = select i1 %100, float %99, float 0xC1DFFFFFE0000000
  %102 = fptosi float %101 to i32
  %103 = zext i32 %88 to i64
  %104 = shl nuw i64 %103, 32
  %105 = zext i32 %81 to i64
  %106 = or i64 %104, %105
  %107 = zext i32 %102 to i64
  %108 = shl nuw i64 %107, 32
  %109 = zext i32 %95 to i64
  %110 = or i64 %108, %109
  %111 = bitcast %struct.SkIRect* %22 to i64*
  store i64 %106, i64* %111, align 8
  %112 = bitcast i32* %44 to i64*
  store i64 %110, i64* %112, align 8
  store i32 %61, i32* %50, align 8
  br label %601

113:                                              ; preds = %21
  %114 = sext i32 %13 to i64
  %115 = tail call i8* @_Z15sk_malloc_throwmm(i64 %114, i64 1) #9
  %116 = fmul float %0, 2.000000e+00
  %117 = fdiv float 1.000000e+00, %116
  store i8 -1, i8* %115, align 1
  %118 = icmp sgt i32 %13, 1
  br i1 %118, label %119, label %232

119:                                              ; preds = %113
  %120 = zext i32 %13 to i64
  %121 = add nsw i64 %120, -1
  %122 = icmp ult i64 %121, 16
  br i1 %122, label %185, label %123

123:                                              ; preds = %119
  %124 = and i64 %121, -16
  %125 = or i64 %124, 1
  %126 = insertelement <16 x i32> undef, i32 %16, i32 0
  %127 = shufflevector <16 x i32> %126, <16 x i32> undef, <16 x i32> zeroinitializer
  %128 = insertelement <16 x float> undef, float %117, i32 0
  %129 = shufflevector <16 x float> %128, <16 x float> undef, <16 x i32> zeroinitializer
  br label %130

130:                                              ; preds = %130, %123
  %131 = phi i64 [ 0, %123 ], [ %180, %130 ]
  %132 = phi <16 x i32> [ <i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16>, %123 ], [ %181, %130 ]
  %133 = or i64 %131, 1
  %134 = sub nsw <16 x i32> %127, %132
  %135 = sitofp <16 x i32> %134 to <16 x float>
  %136 = fadd <16 x float> %135, <float -5.000000e-01, float -5.000000e-01, float -5.000000e-01, float -5.000000e-01, float -5.000000e-01, float -5.000000e-01, float -5.000000e-01, float -5.000000e-01, float -5.000000e-01, float -5.000000e-01, float -5.000000e-01, float -5.000000e-01, float -5.000000e-01, float -5.000000e-01, float -5.000000e-01, float -5.000000e-01>
  %137 = fmul <16 x float> %129, %136
  %138 = fcmp ule <16 x float> %137, <float 1.500000e+00, float 1.500000e+00, float 1.500000e+00, float 1.500000e+00, float 1.500000e+00, float 1.500000e+00, float 1.500000e+00, float 1.500000e+00, float 1.500000e+00, float 1.500000e+00, float 1.500000e+00, float 1.500000e+00, float 1.500000e+00, float 1.500000e+00, float 1.500000e+00, float 1.500000e+00>
  %139 = fcmp olt <16 x float> %137, <float -1.500000e+00, float -1.500000e+00, float -1.500000e+00, float -1.500000e+00, float -1.500000e+00, float -1.500000e+00, float -1.500000e+00, float -1.500000e+00, float -1.500000e+00, float -1.500000e+00, float -1.500000e+00, float -1.500000e+00, float -1.500000e+00, float -1.500000e+00, float -1.500000e+00, float -1.500000e+00>
  %140 = fmul <16 x float> %137, %137
  %141 = fmul <16 x float> %137, %140
  %142 = fcmp ogt <16 x float> %137, <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>
  %143 = fcmp ogt <16 x float> %137, <float -5.000000e-01, float -5.000000e-01, float -5.000000e-01, float -5.000000e-01, float -5.000000e-01, float -5.000000e-01, float -5.000000e-01, float -5.000000e-01, float -5.000000e-01, float -5.000000e-01, float -5.000000e-01, float -5.000000e-01, float -5.000000e-01, float -5.000000e-01, float -5.000000e-01, float -5.000000e-01>
  %144 = fdiv <16 x float> %141, <float -6.000000e+00, float -6.000000e+00, float -6.000000e+00, float -6.000000e+00, float -6.000000e+00, float -6.000000e+00, float -6.000000e+00, float -6.000000e+00, float -6.000000e+00, float -6.000000e+00, float -6.000000e+00, float -6.000000e+00, float -6.000000e+00, float -6.000000e+00, float -6.000000e+00, float -6.000000e+00>
  %145 = fmul <16 x float> %140, <float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00>
  %146 = fmul <16 x float> %145, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %147 = fsub <16 x float> %144, %146
  %148 = fmul <16 x float> %137, <float 1.125000e+00, float 1.125000e+00, float 1.125000e+00, float 1.125000e+00, float 1.125000e+00, float 1.125000e+00, float 1.125000e+00, float 1.125000e+00, float 1.125000e+00, float 1.125000e+00, float 1.125000e+00, float 1.125000e+00, float 1.125000e+00, float 1.125000e+00, float 1.125000e+00, float 1.125000e+00>
  %149 = fsub <16 x float> %147, %148
  %150 = fadd <16 x float> %149, <float 4.375000e-01, float 4.375000e-01, float 4.375000e-01, float 4.375000e-01, float 4.375000e-01, float 4.375000e-01, float 4.375000e-01, float 4.375000e-01, float 4.375000e-01, float 4.375000e-01, float 4.375000e-01, float 4.375000e-01, float 4.375000e-01, float 4.375000e-01, float 4.375000e-01, float 4.375000e-01>
  %151 = fmul <16 x float> %137, <float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01, float 7.500000e-01>
  %152 = fdiv <16 x float> %141, <float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00>
  %153 = fsub <16 x float> %152, %151
  %154 = fadd <16 x float> %153, <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>
  %155 = fdiv <16 x float> %141, <float 6.000000e+00, float 6.000000e+00, float 6.000000e+00, float 6.000000e+00, float 6.000000e+00, float 6.000000e+00, float 6.000000e+00, float 6.000000e+00, float 6.000000e+00, float 6.000000e+00, float 6.000000e+00, float 6.000000e+00, float 6.000000e+00, float 6.000000e+00, float 6.000000e+00, float 6.000000e+00>
  %156 = fmul <16 x float> %140, <float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00>
  %157 = fmul <16 x float> %156, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %158 = fsub <16 x float> %155, %157
  %159 = fmul <16 x float> %137, <float 1.125000e+00, float 1.125000e+00, float 1.125000e+00, float 1.125000e+00, float 1.125000e+00, float 1.125000e+00, float 1.125000e+00, float 1.125000e+00, float 1.125000e+00, float 1.125000e+00, float 1.125000e+00, float 1.125000e+00, float 1.125000e+00, float 1.125000e+00, float 1.125000e+00, float 1.125000e+00>
  %160 = fadd <16 x float> %159, %158
  %161 = fsub <16 x float> <float 5.625000e-01, float 5.625000e-01, float 5.625000e-01, float 5.625000e-01, float 5.625000e-01, float 5.625000e-01, float 5.625000e-01, float 5.625000e-01, float 5.625000e-01, float 5.625000e-01, float 5.625000e-01, float 5.625000e-01, float 5.625000e-01, float 5.625000e-01, float 5.625000e-01, float 5.625000e-01>, %160
  %162 = and <16 x i1> %139, %138
  %163 = xor <16 x i1> %139, <i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true>
  %164 = and <16 x i1> %138, %163
  %165 = and <16 x i1> %142, %164
  %166 = xor <16 x i1> %142, <i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true>
  %167 = and <16 x i1> %164, %166
  %168 = and <16 x i1> %143, %167
  %169 = xor <16 x i1> %143, <i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true>
  %170 = and <16 x i1> %167, %169
  %171 = select <16 x i1> %162, <16 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, <16 x float> zeroinitializer
  %172 = select <16 x i1> %165, <16 x float> %161, <16 x float> %171
  %173 = select <16 x i1> %168, <16 x float> %154, <16 x float> %172
  %174 = select <16 x i1> %170, <16 x float> %150, <16 x float> %173
  %175 = fmul <16 x float> %174, <float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02>
  %176 = fptoui <16 x float> %175 to <16 x i8>
  %177 = xor <16 x i8> %176, <i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1>
  %178 = getelementptr inbounds i8, i8* %115, i64 %133
  %179 = bitcast i8* %178 to <16 x i8>*
  store <16 x i8> %177, <16 x i8>* %179, align 1
  %180 = add i64 %131, 16
  %181 = add <16 x i32> %132, <i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16>
  %182 = icmp eq i64 %180, %124
  br i1 %182, label %183, label %130, !llvm.loop !57

183:                                              ; preds = %130
  %184 = icmp eq i64 %121, %124
  br i1 %184, label %232, label %185

185:                                              ; preds = %183, %119
  %186 = phi i64 [ 1, %119 ], [ %125, %183 ]
  br label %187

187:                                              ; preds = %185, %224
  %188 = phi i64 [ %230, %224 ], [ %186, %185 ]
  %189 = trunc i64 %188 to i32
  %190 = sub nsw i32 %16, %189
  %191 = sitofp i32 %190 to float
  %192 = fadd float %191, -5.000000e-01
  %193 = fmul float %117, %192
  %194 = fcmp ogt float %193, 1.500000e+00
  br i1 %194, label %224, label %195

195:                                              ; preds = %187
  %196 = fcmp olt float %193, -1.500000e+00
  br i1 %196, label %224, label %197

197:                                              ; preds = %195
  %198 = fmul float %193, %193
  %199 = fmul float %193, %198
  %200 = fcmp ogt float %193, 5.000000e-01
  br i1 %200, label %201, label %209

201:                                              ; preds = %197
  %202 = fdiv float %199, 6.000000e+00
  %203 = fmul float %198, 3.000000e+00
  %204 = fmul float %203, 2.500000e-01
  %205 = fsub float %202, %204
  %206 = fmul float %193, 1.125000e+00
  %207 = fadd float %206, %205
  %208 = fsub float 5.625000e-01, %207
  br label %224

209:                                              ; preds = %197
  %210 = fcmp ogt float %193, -5.000000e-01
  br i1 %210, label %211, label %216

211:                                              ; preds = %209
  %212 = fmul float %193, 7.500000e-01
  %213 = fdiv float %199, 3.000000e+00
  %214 = fsub float %213, %212
  %215 = fadd float %214, 5.000000e-01
  br label %224

216:                                              ; preds = %209
  %217 = fdiv float %199, -6.000000e+00
  %218 = fmul float %198, 3.000000e+00
  %219 = fmul float %218, 2.500000e-01
  %220 = fsub float %217, %219
  %221 = fmul float %193, 1.125000e+00
  %222 = fsub float %220, %221
  %223 = fadd float %222, 4.375000e-01
  br label %224

224:                                              ; preds = %216, %211, %201, %195, %187
  %225 = phi float [ 0.000000e+00, %187 ], [ 1.000000e+00, %195 ], [ %208, %201 ], [ %215, %211 ], [ %223, %216 ]
  %226 = fmul float %225, 2.550000e+02
  %227 = fptoui float %226 to i8
  %228 = xor i8 %227, -1
  %229 = getelementptr inbounds i8, i8* %115, i64 %188
  store i8 %228, i8* %229, align 1
  %230 = add nuw nsw i64 %188, 1
  %231 = icmp eq i64 %230, %120
  br i1 %231, label %232, label %187, !llvm.loop !58

232:                                              ; preds = %224, %183, %113
  %233 = tail call i64 @_ZNK6SkMask16computeImageSizeEv(%struct.SkMask* %1) #9
  %234 = icmp eq i64 %233, 0
  br i1 %234, label %597, label %235

235:                                              ; preds = %232
  %236 = tail call i8* @_ZN6SkMask10AllocImageEmNS_9AllocTypeE(i64 %233, i32 0) #9
  store i8* %236, i8** %52, align 8
  %237 = load i32, i32* %45, align 4
  %238 = load i32, i32* %43, align 4
  %239 = sub i32 %237, %238
  %240 = load i32, i32* %44, align 4
  %241 = load i32, i32* %42, align 4
  %242 = sub i32 %240, %241
  %243 = icmp eq i32 %242, 0
  br i1 %243, label %247, label %244

244:                                              ; preds = %235
  %245 = sext i32 %242 to i64
  %246 = tail call i8* @_Z15sk_malloc_throwmm(i64 %245, i64 1) #9
  br label %247

247:                                              ; preds = %235, %244
  %248 = phi i8* [ %246, %244 ], [ null, %235 ]
  %249 = icmp eq i32 %239, 0
  br i1 %249, label %253, label %250

250:                                              ; preds = %247
  %251 = sext i32 %239 to i64
  %252 = tail call i8* @_Z15sk_malloc_throwmm(i64 %251, i64 1) #9
  br label %253

253:                                              ; preds = %247, %250
  %254 = phi i8* [ %252, %250 ], [ null, %247 ]
  tail call void @_ZN10SkBlurMask22ComputeBlurredScanlineEPhPKhjf(i8* %248, i8* %115, i32 %242, float %0)
  tail call void @_ZN10SkBlurMask22ComputeBlurredScanlineEPhPKhjf(i8* %254, i8* %115, i32 %239, float %0)
  %255 = icmp sgt i32 %239, 0
  br i1 %255, label %256, label %329

256:                                              ; preds = %253
  %257 = icmp sgt i32 %242, 0
  %258 = zext i32 %239 to i64
  %259 = zext i32 %242 to i64
  %260 = getelementptr i8, i8* %248, i64 %259
  %261 = icmp ult i32 %242, 16
  %262 = and i64 %259, 4294967280
  %263 = icmp eq i64 %262, %259
  %264 = and i64 %259, 1
  %265 = icmp eq i64 %264, 0
  %266 = sub nsw i64 0, %259
  br label %267

267:                                              ; preds = %398, %256
  %268 = phi i64 [ 0, %256 ], [ %400, %398 ]
  %269 = phi i8* [ %236, %256 ], [ %399, %398 ]
  %270 = add nuw i64 %268, 1
  %271 = getelementptr i8, i8* %254, i64 %270
  br i1 %257, label %272, label %398

272:                                              ; preds = %267
  %273 = getelementptr inbounds i8, i8* %254, i64 %268
  br i1 %261, label %274, label %297

274:                                              ; preds = %328, %297, %272
  %275 = phi i64 [ 0, %297 ], [ 0, %272 ], [ %262, %328 ]
  %276 = phi i8* [ %269, %297 ], [ %269, %272 ], [ %307, %328 ]
  %277 = xor i64 %275, -1
  br i1 %265, label %292, label %278

278:                                              ; preds = %274
  %279 = getelementptr inbounds i8, i8* %248, i64 %275
  %280 = load i8, i8* %279, align 1
  %281 = zext i8 %280 to i32
  %282 = load i8, i8* %273, align 1
  %283 = zext i8 %282 to i32
  %284 = mul nuw nsw i32 %283, %281
  %285 = add nuw nsw i32 %284, 128
  %286 = lshr i32 %285, 8
  %287 = add nuw nsw i32 %286, %285
  %288 = lshr i32 %287, 8
  %289 = trunc i32 %288 to i8
  %290 = getelementptr inbounds i8, i8* %276, i64 1
  store i8 %289, i8* %276, align 1
  %291 = or i64 %275, 1
  br label %292

292:                                              ; preds = %278, %274
  %293 = phi i8* [ %290, %278 ], [ undef, %274 ]
  %294 = phi i64 [ %291, %278 ], [ %275, %274 ]
  %295 = phi i8* [ %290, %278 ], [ %276, %274 ]
  %296 = icmp eq i64 %277, %266
  br i1 %296, label %398, label %402

297:                                              ; preds = %272
  %298 = getelementptr i8, i8* %269, i64 %259
  %299 = icmp ult i8* %269, %271
  %300 = icmp ult i8* %273, %298
  %301 = and i1 %299, %300
  %302 = icmp ult i8* %269, %260
  %303 = icmp ult i8* %248, %298
  %304 = and i1 %302, %303
  %305 = or i1 %301, %304
  br i1 %305, label %274, label %306

306:                                              ; preds = %297
  %307 = getelementptr i8, i8* %269, i64 %262
  %308 = load i8, i8* %273, align 1, !alias.scope !59
  %309 = insertelement <16 x i8> undef, i8 %308, i32 0
  %310 = shufflevector <16 x i8> %309, <16 x i8> undef, <16 x i32> zeroinitializer
  %311 = zext <16 x i8> %310 to <16 x i32>
  br label %312

312:                                              ; preds = %312, %306
  %313 = phi i64 [ 0, %306 ], [ %326, %312 ]
  %314 = getelementptr i8, i8* %269, i64 %313
  %315 = getelementptr inbounds i8, i8* %248, i64 %313
  %316 = bitcast i8* %315 to <16 x i8>*
  %317 = load <16 x i8>, <16 x i8>* %316, align 1, !alias.scope !62
  %318 = zext <16 x i8> %317 to <16 x i32>
  %319 = mul nuw nsw <16 x i32> %311, %318
  %320 = add nuw nsw <16 x i32> %319, <i32 128, i32 128, i32 128, i32 128, i32 128, i32 128, i32 128, i32 128, i32 128, i32 128, i32 128, i32 128, i32 128, i32 128, i32 128, i32 128>
  %321 = lshr <16 x i32> %320, <i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8>
  %322 = add nuw nsw <16 x i32> %321, %320
  %323 = lshr <16 x i32> %322, <i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8>
  %324 = trunc <16 x i32> %323 to <16 x i8>
  %325 = bitcast i8* %314 to <16 x i8>*
  store <16 x i8> %324, <16 x i8>* %325, align 1, !alias.scope !64, !noalias !66
  %326 = add i64 %313, 16
  %327 = icmp eq i64 %326, %262
  br i1 %327, label %328, label %312, !llvm.loop !67

328:                                              ; preds = %312
  br i1 %263, label %398, label %274

329:                                              ; preds = %398, %253
  switch i32 %3, label %590 [
    i32 3, label %432
    i32 2, label %364
    i32 1, label %330
  ]

330:                                              ; preds = %329
  %331 = sub nsw i32 %239, %16
  %332 = icmp slt i32 %16, %331
  br i1 %332, label %333, label %590

333:                                              ; preds = %330
  %334 = zext i32 %16 to i64
  %335 = sext i32 %61 to i64
  %336 = lshr i32 %13, 1
  %337 = zext i32 %336 to i64
  %338 = sext i32 %242 to i64
  %339 = add i32 %237, %336
  %340 = sub i32 %339, %238
  %341 = and i32 %13, -2
  %342 = sub i32 %340, %341
  %343 = getelementptr inbounds i8, i8* %236, i64 %334
  %344 = sub i32 %237, %238
  %345 = sub i32 %344, %16
  %346 = sub i32 %345, %336
  %347 = xor i32 %238, -1
  %348 = add i32 %237, %347
  %349 = sub i32 %348, %16
  %350 = sub i32 %349, %336
  %351 = and i32 %346, 7
  %352 = icmp eq i32 %351, 0
  br i1 %352, label %361, label %353

353:                                              ; preds = %333, %353
  %354 = phi i64 [ %358, %353 ], [ %337, %333 ]
  %355 = phi i32 [ %359, %353 ], [ %351, %333 ]
  %356 = mul nsw i64 %354, %338
  %357 = getelementptr inbounds i8, i8* %343, i64 %356
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %357, i8 -1, i64 %335, i1 false)
  %358 = add nuw nsw i64 %354, 1
  %359 = add i32 %355, -1
  %360 = icmp eq i32 %359, 0
  br i1 %360, label %361, label %353, !llvm.loop !68

361:                                              ; preds = %353, %333
  %362 = phi i64 [ %337, %333 ], [ %358, %353 ]
  %363 = icmp ult i32 %350, 7
  br i1 %363, label %590, label %562

364:                                              ; preds = %329
  %365 = sub nsw i32 %239, %16
  %366 = icmp slt i32 %16, %365
  br i1 %366, label %367, label %590

367:                                              ; preds = %364
  %368 = zext i32 %16 to i64
  %369 = sext i32 %61 to i64
  %370 = lshr i32 %13, 1
  %371 = zext i32 %370 to i64
  %372 = sext i32 %242 to i64
  %373 = add i32 %237, %370
  %374 = sub i32 %373, %238
  %375 = and i32 %13, -2
  %376 = sub i32 %374, %375
  %377 = getelementptr inbounds i8, i8* %236, i64 %368
  %378 = sub i32 %237, %238
  %379 = sub i32 %378, %16
  %380 = sub i32 %379, %370
  %381 = xor i32 %238, -1
  %382 = add i32 %237, %381
  %383 = sub i32 %382, %16
  %384 = sub i32 %383, %370
  %385 = and i32 %380, 7
  %386 = icmp eq i32 %385, 0
  br i1 %386, label %395, label %387

387:                                              ; preds = %367, %387
  %388 = phi i64 [ %392, %387 ], [ %371, %367 ]
  %389 = phi i32 [ %393, %387 ], [ %385, %367 ]
  %390 = mul nsw i64 %388, %372
  %391 = getelementptr inbounds i8, i8* %377, i64 %390
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %391, i8 0, i64 %369, i1 false)
  %392 = add nuw nsw i64 %388, 1
  %393 = add i32 %389, -1
  %394 = icmp eq i32 %393, 0
  br i1 %394, label %395, label %387, !llvm.loop !70

395:                                              ; preds = %387, %367
  %396 = phi i64 [ %371, %367 ], [ %392, %387 ]
  %397 = icmp ult i32 %384, 7
  br i1 %397, label %590, label %534

398:                                              ; preds = %292, %402, %328, %267
  %399 = phi i8* [ %269, %267 ], [ %307, %328 ], [ %293, %292 ], [ %429, %402 ]
  %400 = add nuw nsw i64 %268, 1
  %401 = icmp eq i64 %400, %258
  br i1 %401, label %329, label %267

402:                                              ; preds = %292, %402
  %403 = phi i64 [ %430, %402 ], [ %294, %292 ]
  %404 = phi i8* [ %429, %402 ], [ %295, %292 ]
  %405 = getelementptr inbounds i8, i8* %248, i64 %403
  %406 = load i8, i8* %405, align 1
  %407 = zext i8 %406 to i32
  %408 = load i8, i8* %273, align 1
  %409 = zext i8 %408 to i32
  %410 = mul nuw nsw i32 %409, %407
  %411 = add nuw nsw i32 %410, 128
  %412 = lshr i32 %411, 8
  %413 = add nuw nsw i32 %412, %411
  %414 = lshr i32 %413, 8
  %415 = trunc i32 %414 to i8
  %416 = getelementptr inbounds i8, i8* %404, i64 1
  store i8 %415, i8* %404, align 1
  %417 = add nuw nsw i64 %403, 1
  %418 = getelementptr inbounds i8, i8* %248, i64 %417
  %419 = load i8, i8* %418, align 1
  %420 = zext i8 %419 to i32
  %421 = load i8, i8* %273, align 1
  %422 = zext i8 %421 to i32
  %423 = mul nuw nsw i32 %422, %420
  %424 = add nuw nsw i32 %423, 128
  %425 = lshr i32 %424, 8
  %426 = add nuw nsw i32 %425, %424
  %427 = lshr i32 %426, 8
  %428 = trunc i32 %427 to i8
  %429 = getelementptr inbounds i8, i8* %404, i64 2
  store i8 %428, i8* %416, align 1
  %430 = add nuw nsw i64 %403, 2
  %431 = icmp eq i64 %430, %259
  br i1 %431, label %398, label %402, !llvm.loop !71

432:                                              ; preds = %329
  %433 = bitcast float* %26 to <2 x float>*
  %434 = load <2 x float>, <2 x float>* %433, align 4
  %435 = bitcast %struct.SkRect* %2 to <2 x float>*
  %436 = load <2 x float>, <2 x float>* %435, align 4
  %437 = fsub <2 x float> %434, %436
  %438 = extractelement <2 x float> %437, i32 0
  %439 = extractelement <2 x float> %437, i32 1
  %440 = fmul float %438, %439
  %441 = fptoui float %440 to i64
  %442 = icmp eq i64 %441, 0
  br i1 %442, label %590, label %443

443:                                              ; preds = %432
  %444 = tail call i8* @_ZN6SkMask10AllocImageEmNS_9AllocTypeE(i64 %441, i32 0) #9
  store i8* %444, i8** %52, align 8
  %445 = icmp sgt i32 %70, 0
  br i1 %445, label %446, label %472

446:                                              ; preds = %443
  %447 = zext i32 %16 to i64
  %448 = sext i32 %61 to i64
  %449 = zext i32 %16 to i64
  %450 = sext i32 %242 to i64
  %451 = getelementptr inbounds i8, i8* %236, i64 %447
  %452 = mul nsw i64 %449, %450
  %453 = getelementptr inbounds i8, i8* %451, i64 %452
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %444, i8* align 1 %453, i64 %448, i1 false)
  %454 = icmp eq i32 %70, 1
  br i1 %454, label %472, label %455

455:                                              ; preds = %446
  %456 = zext i32 %70 to i64
  %457 = add nsw i64 %456, -1
  %458 = and i64 %457, 1
  %459 = icmp eq i32 %70, 2
  br i1 %459, label %462, label %460

460:                                              ; preds = %455
  %461 = sub nsw i64 %457, %458
  br label %515

462:                                              ; preds = %515, %455
  %463 = phi i64 [ 1, %455 ], [ %531, %515 ]
  %464 = icmp eq i64 %458, 0
  br i1 %464, label %472, label %465

465:                                              ; preds = %462
  %466 = load i8*, i8** %52, align 8
  %467 = add nuw nsw i64 %463, %449
  %468 = mul nsw i64 %467, %450
  %469 = getelementptr inbounds i8, i8* %451, i64 %468
  %470 = mul nsw i64 %463, %448
  %471 = getelementptr inbounds i8, i8* %466, i64 %470
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %471, i8* align 1 %469, i64 %448, i1 false)
  br label %472

472:                                              ; preds = %465, %462, %446, %443
  tail call void @_ZN6SkMask9FreeImageEPv(i8* %236) #9
  %473 = load float, float* %23, align 4
  %474 = fadd float %473, 5.000000e-01
  %475 = tail call float @llvm.floor.f32(float %474) #9
  %476 = fcmp olt float %475, 0x41DFFFFFE0000000
  %477 = select i1 %476, float %475, float 0x41DFFFFFE0000000
  %478 = fcmp ogt float %477, 0xC1DFFFFFE0000000
  %479 = select i1 %478, float %477, float 0xC1DFFFFFE0000000
  %480 = fptosi float %479 to i32
  %481 = load float, float* %25, align 4
  %482 = fadd float %481, 5.000000e-01
  %483 = tail call float @llvm.floor.f32(float %482) #9
  %484 = fcmp olt float %483, 0x41DFFFFFE0000000
  %485 = select i1 %484, float %483, float 0x41DFFFFFE0000000
  %486 = fcmp ogt float %485, 0xC1DFFFFFE0000000
  %487 = select i1 %486, float %485, float 0xC1DFFFFFE0000000
  %488 = fptosi float %487 to i32
  %489 = load float, float* %26, align 4
  %490 = fadd float %489, 5.000000e-01
  %491 = tail call float @llvm.floor.f32(float %490) #9
  %492 = fcmp olt float %491, 0x41DFFFFFE0000000
  %493 = select i1 %492, float %491, float 0x41DFFFFFE0000000
  %494 = fcmp ogt float %493, 0xC1DFFFFFE0000000
  %495 = select i1 %494, float %493, float 0xC1DFFFFFE0000000
  %496 = fptosi float %495 to i32
  %497 = load float, float* %27, align 4
  %498 = fadd float %497, 5.000000e-01
  %499 = tail call float @llvm.floor.f32(float %498) #9
  %500 = fcmp olt float %499, 0x41DFFFFFE0000000
  %501 = select i1 %500, float %499, float 0x41DFFFFFE0000000
  %502 = fcmp ogt float %501, 0xC1DFFFFFE0000000
  %503 = select i1 %502, float %501, float 0xC1DFFFFFE0000000
  %504 = fptosi float %503 to i32
  %505 = zext i32 %488 to i64
  %506 = shl nuw i64 %505, 32
  %507 = zext i32 %480 to i64
  %508 = or i64 %506, %507
  %509 = zext i32 %504 to i64
  %510 = shl nuw i64 %509, 32
  %511 = zext i32 %496 to i64
  %512 = or i64 %510, %511
  %513 = bitcast %struct.SkIRect* %22 to i64*
  store i64 %508, i64* %513, align 8
  %514 = bitcast i32* %44 to i64*
  store i64 %512, i64* %514, align 8
  store i32 %61, i32* %50, align 8
  br label %590

515:                                              ; preds = %515, %460
  %516 = phi i64 [ 1, %460 ], [ %531, %515 ]
  %517 = phi i64 [ %461, %460 ], [ %532, %515 ]
  %518 = load i8*, i8** %52, align 8
  %519 = add nuw nsw i64 %516, %449
  %520 = mul nsw i64 %519, %450
  %521 = getelementptr inbounds i8, i8* %451, i64 %520
  %522 = mul nsw i64 %516, %448
  %523 = getelementptr inbounds i8, i8* %518, i64 %522
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %523, i8* align 1 %521, i64 %448, i1 false)
  %524 = add nuw nsw i64 %516, 1
  %525 = load i8*, i8** %52, align 8
  %526 = add nuw nsw i64 %524, %449
  %527 = mul nsw i64 %526, %450
  %528 = getelementptr inbounds i8, i8* %451, i64 %527
  %529 = mul nsw i64 %524, %448
  %530 = getelementptr inbounds i8, i8* %525, i64 %529
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %530, i8* align 1 %528, i64 %448, i1 false)
  %531 = add nuw nsw i64 %516, 2
  %532 = add i64 %517, -2
  %533 = icmp eq i64 %532, 0
  br i1 %533, label %462, label %515

534:                                              ; preds = %395, %534
  %535 = phi i64 [ %559, %534 ], [ %396, %395 ]
  %536 = mul nsw i64 %535, %372
  %537 = getelementptr inbounds i8, i8* %377, i64 %536
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %537, i8 0, i64 %369, i1 false)
  %538 = add nuw nsw i64 %535, 1
  %539 = mul nsw i64 %538, %372
  %540 = getelementptr inbounds i8, i8* %377, i64 %539
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %540, i8 0, i64 %369, i1 false)
  %541 = add nuw nsw i64 %535, 2
  %542 = mul nsw i64 %541, %372
  %543 = getelementptr inbounds i8, i8* %377, i64 %542
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %543, i8 0, i64 %369, i1 false)
  %544 = add nuw nsw i64 %535, 3
  %545 = mul nsw i64 %544, %372
  %546 = getelementptr inbounds i8, i8* %377, i64 %545
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %546, i8 0, i64 %369, i1 false)
  %547 = add nuw nsw i64 %535, 4
  %548 = mul nsw i64 %547, %372
  %549 = getelementptr inbounds i8, i8* %377, i64 %548
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %549, i8 0, i64 %369, i1 false)
  %550 = add nuw nsw i64 %535, 5
  %551 = mul nsw i64 %550, %372
  %552 = getelementptr inbounds i8, i8* %377, i64 %551
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %552, i8 0, i64 %369, i1 false)
  %553 = add nuw nsw i64 %535, 6
  %554 = mul nsw i64 %553, %372
  %555 = getelementptr inbounds i8, i8* %377, i64 %554
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %555, i8 0, i64 %369, i1 false)
  %556 = add nuw nsw i64 %535, 7
  %557 = mul nsw i64 %556, %372
  %558 = getelementptr inbounds i8, i8* %377, i64 %557
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %558, i8 0, i64 %369, i1 false)
  %559 = add nuw nsw i64 %535, 8
  %560 = trunc i64 %559 to i32
  %561 = icmp eq i32 %376, %560
  br i1 %561, label %590, label %534

562:                                              ; preds = %361, %562
  %563 = phi i64 [ %587, %562 ], [ %362, %361 ]
  %564 = mul nsw i64 %563, %338
  %565 = getelementptr inbounds i8, i8* %343, i64 %564
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %565, i8 -1, i64 %335, i1 false)
  %566 = add nuw nsw i64 %563, 1
  %567 = mul nsw i64 %566, %338
  %568 = getelementptr inbounds i8, i8* %343, i64 %567
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %568, i8 -1, i64 %335, i1 false)
  %569 = add nuw nsw i64 %563, 2
  %570 = mul nsw i64 %569, %338
  %571 = getelementptr inbounds i8, i8* %343, i64 %570
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %571, i8 -1, i64 %335, i1 false)
  %572 = add nuw nsw i64 %563, 3
  %573 = mul nsw i64 %572, %338
  %574 = getelementptr inbounds i8, i8* %343, i64 %573
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %574, i8 -1, i64 %335, i1 false)
  %575 = add nuw nsw i64 %563, 4
  %576 = mul nsw i64 %575, %338
  %577 = getelementptr inbounds i8, i8* %343, i64 %576
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %577, i8 -1, i64 %335, i1 false)
  %578 = add nuw nsw i64 %563, 5
  %579 = mul nsw i64 %578, %338
  %580 = getelementptr inbounds i8, i8* %343, i64 %579
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %580, i8 -1, i64 %335, i1 false)
  %581 = add nuw nsw i64 %563, 6
  %582 = mul nsw i64 %581, %338
  %583 = getelementptr inbounds i8, i8* %343, i64 %582
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %583, i8 -1, i64 %335, i1 false)
  %584 = add nuw nsw i64 %563, 7
  %585 = mul nsw i64 %584, %338
  %586 = getelementptr inbounds i8, i8* %343, i64 %585
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %586, i8 -1, i64 %335, i1 false)
  %587 = add nuw nsw i64 %563, 8
  %588 = trunc i64 %587 to i32
  %589 = icmp eq i32 %342, %588
  br i1 %589, label %590, label %562

590:                                              ; preds = %361, %562, %395, %534, %330, %364, %472, %329, %432
  %591 = phi i1 [ false, %432 ], [ true, %329 ], [ true, %472 ], [ true, %364 ], [ true, %330 ], [ true, %534 ], [ true, %395 ], [ true, %562 ], [ true, %361 ]
  %592 = icmp eq i8* %254, null
  br i1 %592, label %594, label %593

593:                                              ; preds = %590
  tail call void @_Z7sk_freePv(i8* nonnull %254) #9
  br label %594

594:                                              ; preds = %590, %593
  %595 = icmp eq i8* %248, null
  br i1 %595, label %597, label %596

596:                                              ; preds = %594
  tail call void @_Z7sk_freePv(i8* nonnull %248) #9
  br label %597

597:                                              ; preds = %596, %594, %232
  %598 = phi i1 [ false, %232 ], [ %591, %594 ], [ %591, %596 ]
  %599 = icmp eq i8* %115, null
  br i1 %599, label %601, label %600

600:                                              ; preds = %597
  tail call void @_Z7sk_freePv(i8* nonnull %115) #9
  br label %601

601:                                              ; preds = %600, %597, %74, %72, %6
  %602 = phi i1 [ false, %6 ], [ true, %74 ], [ true, %72 ], [ %598, %597 ], [ %598, %600 ]
  ret i1 %602
}

; Function Attrs: nounwind readnone speculatable
declare float @llvm.floor.f32(float) #7

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #3

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden zeroext i1 @_ZN10SkBlurMask9BlurRRectEfP6SkMaskRK7SkRRect11SkBlurStyleP8SkIPointNS0_10CreateModeE(float, %struct.SkMask* nocapture readnone, %class.SkRRect* nocapture readnone dereferenceable(52), i32, %struct.SkIPoint* nocapture readnone, i32) local_unnamed_addr #0 align 2 {
  ret i1 false
}

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZN10SkBlurMask15BlurGroundTruthEfP6SkMaskRKS0_11SkBlurStyleP8SkIPoint(float, %struct.SkMask*, %struct.SkMask* dereferenceable(32), i32, %struct.SkIPoint*) local_unnamed_addr #1 align 2 {
  %6 = getelementptr inbounds %struct.SkMask, %struct.SkMask* %2, i64 0, i32 3
  %7 = load i8, i8* %6, align 4
  %8 = icmp eq i8 %7, 1
  br i1 %8, label %9, label %689

9:                                                ; preds = %5
  %10 = fmul float %0, 6.000000e+00
  %11 = tail call float @llvm.ceil.f32(float %10)
  %12 = fcmp olt float %11, 0x41DFFFFFE0000000
  %13 = select i1 %12, float %11, float 0x41DFFFFFE0000000
  %14 = fcmp ogt float %13, 0xC1DFFFFFE0000000
  %15 = select i1 %14, float %13, float 0xC1DFFFFFE0000000
  %16 = fptosi float %15 to i32
  %17 = or i32 %16, 1
  %18 = sext i32 %17 to i64
  %19 = tail call i8* @_Z15sk_malloc_throwmm(i64 %18, i64 4) #9
  %20 = ashr i32 %16, 1
  %21 = bitcast i8* %19 to float*
  %22 = sext i32 %20 to i64
  %23 = getelementptr inbounds float, float* %21, i64 %22
  store float 1.000000e+00, float* %23, align 4
  %24 = icmp slt i32 %16, 2
  br i1 %24, label %28, label %25

25:                                               ; preds = %9
  %26 = fmul float %0, %0
  %27 = fmul float %26, 2.000000e+00
  br label %31

28:                                               ; preds = %31, %9
  %29 = phi float [ 1.000000e+00, %9 ], [ %45, %31 ]
  %30 = icmp eq %struct.SkIPoint* %4, null
  br i1 %30, label %51, label %48

31:                                               ; preds = %31, %25
  %32 = phi i64 [ %46, %31 ], [ 1, %25 ]
  %33 = phi float [ %45, %31 ], [ 1.000000e+00, %25 ]
  %34 = trunc i64 %32 to i32
  %35 = mul i32 %34, %34
  %36 = sub i32 0, %35
  %37 = sitofp i32 %36 to float
  %38 = fdiv float %37, %27
  %39 = tail call float @expf(float %38) #9
  %40 = sub nsw i64 %22, %32
  %41 = getelementptr inbounds float, float* %21, i64 %40
  store float %39, float* %41, align 4
  %42 = add nsw i64 %32, %22
  %43 = getelementptr inbounds float, float* %21, i64 %42
  store float %39, float* %43, align 4
  %44 = fmul float %39, 2.000000e+00
  %45 = fadd float %33, %44
  %46 = add nuw nsw i64 %32, 1
  %47 = icmp slt i64 %32, %22
  br i1 %47, label %31, label %28

48:                                               ; preds = %28
  %49 = getelementptr inbounds %struct.SkIPoint, %struct.SkIPoint* %4, i64 0, i32 0
  store i32 %20, i32* %49, align 4
  %50 = getelementptr inbounds %struct.SkIPoint, %struct.SkIPoint* %4, i64 0, i32 1
  store i32 %20, i32* %50, align 4
  br label %51

51:                                               ; preds = %28, %48
  %52 = getelementptr inbounds %struct.SkMask, %struct.SkMask* %2, i64 0, i32 1
  %53 = getelementptr inbounds %struct.SkMask, %struct.SkMask* %1, i64 0, i32 1
  %54 = bitcast %struct.SkIRect* %53 to i8*
  %55 = bitcast %struct.SkIRect* %52 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %54, i8* align 4 %55, i64 16, i1 false)
  %56 = sub nsw i32 0, %20
  %57 = getelementptr inbounds %struct.SkIRect, %struct.SkIRect* %53, i64 0, i32 0
  %58 = load i32, i32* %57, align 4
  %59 = sext i32 %58 to i64
  %60 = sext i32 %56 to i64
  %61 = add nsw i64 %59, %60
  %62 = icmp slt i64 %61, 2147483647
  %63 = select i1 %62, i64 %61, i64 2147483647
  %64 = icmp sgt i64 %63, -2147483647
  %65 = select i1 %64, i64 %63, i64 -2147483647
  %66 = trunc i64 %65 to i32
  store i32 %66, i32* %57, align 4
  %67 = getelementptr inbounds %struct.SkMask, %struct.SkMask* %1, i64 0, i32 1, i32 1
  %68 = load i32, i32* %67, align 4
  %69 = sext i32 %68 to i64
  %70 = add nsw i64 %69, %60
  %71 = icmp slt i64 %70, 2147483647
  %72 = select i1 %71, i64 %70, i64 2147483647
  %73 = icmp sgt i64 %72, -2147483647
  %74 = select i1 %73, i64 %72, i64 -2147483647
  %75 = trunc i64 %74 to i32
  store i32 %75, i32* %67, align 4
  %76 = getelementptr inbounds %struct.SkMask, %struct.SkMask* %1, i64 0, i32 1, i32 2
  %77 = load i32, i32* %76, align 4
  %78 = sext i32 %77 to i64
  %79 = sub nsw i64 %78, %60
  %80 = icmp slt i64 %79, 2147483647
  %81 = select i1 %80, i64 %79, i64 2147483647
  %82 = icmp sgt i64 %81, -2147483647
  %83 = select i1 %82, i64 %81, i64 -2147483647
  %84 = trunc i64 %83 to i32
  store i32 %84, i32* %76, align 4
  %85 = getelementptr inbounds %struct.SkMask, %struct.SkMask* %1, i64 0, i32 1, i32 3
  %86 = load i32, i32* %85, align 4
  %87 = sext i32 %86 to i64
  %88 = sub nsw i64 %87, %60
  %89 = icmp slt i64 %88, 2147483647
  %90 = select i1 %89, i64 %88, i64 2147483647
  %91 = icmp sgt i64 %90, -2147483647
  %92 = select i1 %91, i64 %90, i64 -2147483647
  %93 = trunc i64 %92 to i32
  store i32 %93, i32* %85, align 4
  %94 = sub i32 %84, %66
  %95 = getelementptr inbounds %struct.SkMask, %struct.SkMask* %1, i64 0, i32 2
  store i32 %94, i32* %95, align 8
  %96 = getelementptr inbounds %struct.SkMask, %struct.SkMask* %1, i64 0, i32 3
  store i8 1, i8* %96, align 4
  %97 = getelementptr inbounds %struct.SkMask, %struct.SkMask* %1, i64 0, i32 0
  store i8* null, i8** %97, align 8
  %98 = getelementptr inbounds %struct.SkMask, %struct.SkMask* %2, i64 0, i32 0
  %99 = load i8*, i8** %98, align 8
  %100 = icmp eq i8* %99, null
  br i1 %100, label %680, label %101

101:                                              ; preds = %51
  %102 = tail call i64 @_ZNK6SkMask16computeImageSizeEv(%struct.SkMask* %1) #9
  %103 = icmp eq i64 %102, 0
  br i1 %103, label %685, label %104

104:                                              ; preds = %101
  %105 = getelementptr inbounds %struct.SkMask, %struct.SkMask* %2, i64 0, i32 1, i32 2
  %106 = load i32, i32* %105, align 4
  %107 = getelementptr inbounds %struct.SkIRect, %struct.SkIRect* %52, i64 0, i32 0
  %108 = load i32, i32* %107, align 4
  %109 = sub i32 %106, %108
  %110 = getelementptr inbounds %struct.SkMask, %struct.SkMask* %2, i64 0, i32 1, i32 3
  %111 = load i32, i32* %110, align 4
  %112 = getelementptr inbounds %struct.SkMask, %struct.SkMask* %2, i64 0, i32 1, i32 1
  %113 = load i32, i32* %112, align 4
  %114 = sub i32 %111, %113
  %115 = load i32, i32* %76, align 4
  %116 = load i32, i32* %57, align 4
  %117 = sub i32 %115, %116
  %118 = load i8*, i8** %98, align 8
  %119 = tail call i8* @_ZN6SkMask10AllocImageEmNS_9AllocTypeE(i64 %102, i32 0) #9
  %120 = ptrtoint i8* %119 to i64
  %121 = shl i32 %20, 2
  %122 = add nsw i32 %109, %121
  %123 = mul nsw i32 %114, %122
  %124 = sext i32 %123 to i64
  %125 = icmp eq i32 %123, 0
  br i1 %125, label %128, label %126

126:                                              ; preds = %104
  %127 = tail call i8* @_Z15sk_malloc_throwmm(i64 %124, i64 1) #9
  br label %128

128:                                              ; preds = %104, %126
  %129 = phi i8* [ %127, %126 ], [ null, %104 ]
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %129, i8 0, i64 %124, i1 false)
  %130 = icmp sgt i32 %114, 0
  %131 = and i32 %16, -2
  br i1 %130, label %132, label %150

132:                                              ; preds = %128
  %133 = sext i32 %131 to i64
  %134 = sext i32 %109 to i64
  %135 = sext i32 %122 to i64
  %136 = zext i32 %114 to i64
  %137 = getelementptr inbounds i8, i8* %129, i64 %133
  %138 = and i64 %136, 1
  %139 = icmp eq i32 %114, 1
  br i1 %139, label %142, label %140

140:                                              ; preds = %132
  %141 = sub nsw i64 %136, %138
  br label %182

142:                                              ; preds = %182, %132
  %143 = phi i64 [ 0, %132 ], [ %194, %182 ]
  %144 = icmp eq i64 %138, 0
  br i1 %144, label %150, label %145

145:                                              ; preds = %142
  %146 = mul nsw i64 %143, %135
  %147 = getelementptr inbounds i8, i8* %137, i64 %146
  %148 = mul nsw i64 %143, %134
  %149 = getelementptr inbounds i8, i8* %118, i64 %148
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %147, i8* align 1 %149, i64 %134, i1 false)
  br label %150

150:                                              ; preds = %145, %142, %128
  %151 = add nsw i32 %114, %121
  %152 = sub nsw i32 %122, %131
  %153 = mul nsw i32 %151, %152
  %154 = sext i32 %153 to i64
  %155 = icmp eq i32 %153, 0
  br i1 %155, label %159, label %156

156:                                              ; preds = %150
  %157 = tail call i8* @_Z15sk_malloc_throwmm(i64 %154, i64 4) #9
  %158 = ptrtoint i8* %157 to i64
  br label %159

159:                                              ; preds = %150, %156
  %160 = phi i64 [ %158, %156 ], [ 0, %150 ]
  %161 = inttoptr i64 %160 to float*
  %162 = inttoptr i64 %160 to i8*
  %163 = shl nsw i64 %154, 2
  tail call void @llvm.memset.p0i8.i64(i8* align 4 %162, i8 0, i64 %163, i1 false)
  br i1 %130, label %164, label %197

164:                                              ; preds = %159
  %165 = sub nsw i32 %122, %20
  %166 = icmp slt i32 %20, %165
  %167 = sext i32 %131 to i64
  %168 = icmp slt i32 %20, %56
  %169 = add nsw i32 %20, 1
  %170 = sext i32 %151 to i64
  %171 = mul i32 %20, 3
  %172 = add i32 %106, %171
  %173 = sub i32 %172, %108
  %174 = sext i32 %122 to i64
  %175 = zext i32 %114 to i64
  %176 = sext i32 %173 to i64
  %177 = getelementptr inbounds float, float* %161, i64 %167
  %178 = add nsw i64 %60, %22
  %179 = getelementptr inbounds float, float* %21, i64 %178
  %180 = add nsw i64 %60, 1
  %181 = icmp ult i32 %16, 2
  br label %218

182:                                              ; preds = %182, %140
  %183 = phi i64 [ 0, %140 ], [ %194, %182 ]
  %184 = phi i64 [ %141, %140 ], [ %195, %182 ]
  %185 = mul nsw i64 %183, %135
  %186 = getelementptr inbounds i8, i8* %137, i64 %185
  %187 = mul nsw i64 %183, %134
  %188 = getelementptr inbounds i8, i8* %118, i64 %187
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %186, i8* align 1 %188, i64 %134, i1 false)
  %189 = or i64 %183, 1
  %190 = mul nsw i64 %189, %135
  %191 = getelementptr inbounds i8, i8* %137, i64 %190
  %192 = mul nsw i64 %189, %134
  %193 = getelementptr inbounds i8, i8* %118, i64 %192
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %191, i8* align 1 %193, i64 %134, i1 false)
  %194 = add nuw nsw i64 %183, 2
  %195 = add i64 %184, -2
  %196 = icmp eq i64 %195, 0
  br i1 %196, label %142, label %182

197:                                              ; preds = %224, %159
  %198 = icmp sgt i32 %152, 0
  br i1 %198, label %199, label %269

199:                                              ; preds = %197
  %200 = sub nsw i32 %151, %20
  %201 = icmp slt i32 %20, %200
  %202 = icmp slt i32 %20, %56
  %203 = add nsw i32 %20, 1
  %204 = sext i32 %117 to i64
  %205 = mul i32 %20, 3
  %206 = add i32 %111, %205
  %207 = sub i32 %206, %113
  %208 = sext i32 %151 to i64
  %209 = add i32 %106, %121
  %210 = sub i32 %209, %108
  %211 = sub i32 %210, %131
  %212 = zext i32 %211 to i64
  %213 = sext i32 %207 to i64
  %214 = and i32 %16, -2
  %215 = and i32 %16, 2
  %216 = or i32 %215, 1
  %217 = icmp ult i32 %214, 3
  br label %270

218:                                              ; preds = %224, %164
  %219 = phi i64 [ 0, %164 ], [ %225, %224 ]
  %220 = mul nsw i64 %219, %174
  %221 = getelementptr inbounds i8, i8* %129, i64 %220
  br i1 %166, label %222, label %224

222:                                              ; preds = %218
  %223 = getelementptr inbounds float, float* %177, i64 %219
  br label %227

224:                                              ; preds = %241, %218
  %225 = add nuw nsw i64 %219, 1
  %226 = icmp eq i64 %225, %175
  br i1 %226, label %197, label %218

227:                                              ; preds = %241, %222
  %228 = phi i64 [ %22, %222 ], [ %244, %241 ]
  %229 = sub nsw i64 %228, %22
  %230 = mul nsw i64 %229, %170
  %231 = getelementptr inbounds float, float* %223, i64 %230
  %232 = getelementptr inbounds i8, i8* %221, i64 %228
  %233 = load float, float* %231, align 4
  br i1 %168, label %241, label %234

234:                                              ; preds = %227
  %235 = load float, float* %179, align 4
  %236 = getelementptr inbounds i8, i8* %232, i64 %60
  %237 = load i8, i8* %236, align 1
  %238 = uitofp i8 %237 to float
  %239 = fmul float %235, %238
  %240 = fadd float %233, %239
  store float %240, float* %231, align 4
  br i1 %181, label %241, label %246

241:                                              ; preds = %234, %246, %227
  %242 = phi float [ %233, %227 ], [ %240, %234 ], [ %265, %246 ]
  %243 = fdiv float %242, %29
  store float %243, float* %231, align 4
  %244 = add nsw i64 %228, 1
  %245 = icmp eq i64 %244, %176
  br i1 %245, label %224, label %227

246:                                              ; preds = %234, %246
  %247 = phi float [ %265, %246 ], [ %240, %234 ]
  %248 = phi i64 [ %266, %246 ], [ %180, %234 ]
  %249 = add nsw i64 %248, %22
  %250 = getelementptr inbounds float, float* %21, i64 %249
  %251 = load float, float* %250, align 4
  %252 = getelementptr inbounds i8, i8* %232, i64 %248
  %253 = load i8, i8* %252, align 1
  %254 = uitofp i8 %253 to float
  %255 = fmul float %251, %254
  %256 = fadd float %247, %255
  store float %256, float* %231, align 4
  %257 = add nsw i64 %248, 1
  %258 = add nsw i64 %257, %22
  %259 = getelementptr inbounds float, float* %21, i64 %258
  %260 = load float, float* %259, align 4
  %261 = getelementptr inbounds i8, i8* %232, i64 %257
  %262 = load i8, i8* %261, align 1
  %263 = uitofp i8 %262 to float
  %264 = fmul float %260, %263
  %265 = fadd float %256, %264
  store float %265, float* %231, align 4
  %266 = add nsw i64 %248, 2
  %267 = trunc i64 %266 to i32
  %268 = icmp eq i32 %169, %267
  br i1 %268, label %241, label %246

269:                                              ; preds = %276, %197
  store i8* %119, i8** %97, align 8
  switch i32 %3, label %666 [
    i32 3, label %517
    i32 1, label %352
    i32 2, label %447
  ]

270:                                              ; preds = %276, %199
  %271 = phi i64 [ 0, %199 ], [ %277, %276 ]
  %272 = mul nsw i64 %271, %208
  %273 = getelementptr inbounds float, float* %161, i64 %272
  br i1 %201, label %274, label %276

274:                                              ; preds = %270
  %275 = getelementptr inbounds i8, i8* %119, i64 %271
  br label %279

276:                                              ; preds = %297, %270
  %277 = add nuw nsw i64 %271, 1
  %278 = icmp eq i64 %277, %212
  br i1 %278, label %269, label %270

279:                                              ; preds = %297, %274
  %280 = phi i64 [ %22, %274 ], [ %313, %297 ]
  %281 = getelementptr inbounds float, float* %273, i64 %280
  br i1 %202, label %297, label %282

282:                                              ; preds = %279, %282
  %283 = phi i64 [ %293, %282 ], [ %60, %279 ]
  %284 = phi float [ %292, %282 ], [ 0.000000e+00, %279 ]
  %285 = phi i32 [ %294, %282 ], [ %216, %279 ]
  %286 = add nsw i64 %283, %22
  %287 = getelementptr inbounds float, float* %21, i64 %286
  %288 = load float, float* %287, align 4
  %289 = getelementptr inbounds float, float* %281, i64 %283
  %290 = load float, float* %289, align 4
  %291 = fmul float %288, %290
  %292 = fadd float %284, %291
  %293 = add nsw i64 %283, 1
  %294 = add i32 %285, -1
  %295 = icmp eq i32 %294, 0
  br i1 %295, label %296, label %282, !llvm.loop !72

296:                                              ; preds = %282
  br i1 %217, label %297, label %315

297:                                              ; preds = %296, %315, %279
  %298 = phi float [ 0.000000e+00, %279 ], [ %292, %296 ], [ %348, %315 ]
  %299 = fdiv float %298, %29
  %300 = sub nsw i64 %280, %22
  %301 = mul nsw i64 %300, %204
  %302 = getelementptr inbounds i8, i8* %275, i64 %301
  %303 = fadd float %299, 5.000000e-01
  %304 = fptosi float %303 to i32
  %305 = ashr i32 %304, 31
  %306 = xor i32 %305, -1
  %307 = and i32 %306, %304
  %308 = icmp slt i32 %307, 255
  %309 = select i1 %308, i32 %307, i32 255
  %310 = icmp sgt i32 %309, 0
  %311 = select i1 %310, i32 %309, i32 0
  %312 = trunc i32 %311 to i8
  store i8 %312, i8* %302, align 1
  %313 = add nsw i64 %280, 1
  %314 = icmp eq i64 %313, %213
  br i1 %314, label %276, label %279

315:                                              ; preds = %296, %315
  %316 = phi i64 [ %349, %315 ], [ %293, %296 ]
  %317 = phi float [ %348, %315 ], [ %292, %296 ]
  %318 = add nsw i64 %316, %22
  %319 = getelementptr inbounds float, float* %21, i64 %318
  %320 = load float, float* %319, align 4
  %321 = getelementptr inbounds float, float* %281, i64 %316
  %322 = load float, float* %321, align 4
  %323 = fmul float %320, %322
  %324 = fadd float %317, %323
  %325 = add nsw i64 %316, 1
  %326 = add nsw i64 %325, %22
  %327 = getelementptr inbounds float, float* %21, i64 %326
  %328 = load float, float* %327, align 4
  %329 = getelementptr inbounds float, float* %281, i64 %325
  %330 = load float, float* %329, align 4
  %331 = fmul float %328, %330
  %332 = fadd float %324, %331
  %333 = add nsw i64 %316, 2
  %334 = add nsw i64 %333, %22
  %335 = getelementptr inbounds float, float* %21, i64 %334
  %336 = load float, float* %335, align 4
  %337 = getelementptr inbounds float, float* %281, i64 %333
  %338 = load float, float* %337, align 4
  %339 = fmul float %336, %338
  %340 = fadd float %332, %339
  %341 = add nsw i64 %316, 3
  %342 = add nsw i64 %341, %22
  %343 = getelementptr inbounds float, float* %21, i64 %342
  %344 = load float, float* %343, align 4
  %345 = getelementptr inbounds float, float* %281, i64 %341
  %346 = load float, float* %345, align 4
  %347 = fmul float %344, %346
  %348 = fadd float %340, %347
  %349 = add nsw i64 %316, 4
  %350 = trunc i64 %349 to i32
  %351 = icmp eq i32 %203, %350
  br i1 %351, label %297, label %315

352:                                              ; preds = %269
  %353 = load i32, i32* %95, align 8
  br i1 %130, label %354, label %666

354:                                              ; preds = %352
  %355 = getelementptr inbounds %struct.SkMask, %struct.SkMask* %2, i64 0, i32 2
  %356 = load i32, i32* %355, align 8
  %357 = mul i32 %353, %20
  %358 = zext i32 %357 to i64
  %359 = getelementptr inbounds i8, i8* %119, i64 %358
  %360 = getelementptr inbounds i8, i8* %359, i64 %22
  %361 = icmp sgt i32 %109, 0
  %362 = sub nsw i32 %353, %109
  %363 = sext i32 %362 to i64
  %364 = zext i32 %356 to i64
  %365 = xor i32 %108, -1
  %366 = add i32 %106, %365
  %367 = zext i32 %366 to i64
  %368 = add nuw nsw i64 %367, 1
  %369 = zext i32 %366 to i64
  %370 = add nuw nsw i64 %369, 1
  %371 = icmp ult i64 %368, 16
  %372 = and i64 %368, 8589934576
  %373 = trunc i64 %372 to i32
  %374 = sub i32 %109, %373
  %375 = icmp eq i64 %368, %372
  br label %376

376:                                              ; preds = %441, %354
  %377 = phi i64 [ %446, %441 ], [ 0, %354 ]
  %378 = phi i8* [ %444, %441 ], [ %118, %354 ]
  %379 = phi i32 [ %385, %441 ], [ %114, %354 ]
  %380 = phi i8* [ %443, %441 ], [ %360, %354 ]
  %381 = mul i64 %377, %364
  %382 = getelementptr i8, i8* %118, i64 %381
  %383 = add i64 %370, %381
  %384 = getelementptr i8, i8* %118, i64 %383
  %385 = add nsw i32 %379, -1
  br i1 %361, label %386, label %441

386:                                              ; preds = %376
  br i1 %371, label %417, label %387

387:                                              ; preds = %386
  %388 = getelementptr i8, i8* %380, i64 %370
  %389 = icmp ult i8* %380, %384
  %390 = icmp ult i8* %382, %388
  %391 = and i1 %389, %390
  br i1 %391, label %417, label %392

392:                                              ; preds = %387
  %393 = getelementptr i8, i8* %380, i64 %372
  %394 = getelementptr i8, i8* %378, i64 %372
  br label %395

395:                                              ; preds = %395, %392
  %396 = phi i64 [ 0, %392 ], [ %414, %395 ]
  %397 = getelementptr i8, i8* %380, i64 %396
  %398 = getelementptr i8, i8* %378, i64 %396
  %399 = bitcast i8* %398 to <16 x i8>*
  %400 = load <16 x i8>, <16 x i8>* %399, align 1, !alias.scope !73
  %401 = zext <16 x i8> %400 to <16 x i32>
  %402 = bitcast i8* %397 to <16 x i8>*
  %403 = load <16 x i8>, <16 x i8>* %402, align 1, !alias.scope !76, !noalias !73
  %404 = zext <16 x i8> %403 to <16 x i32>
  %405 = add nuw nsw <16 x i32> %404, %401
  %406 = mul nuw nsw <16 x i32> %404, %401
  %407 = add nuw nsw <16 x i32> %406, <i32 128, i32 128, i32 128, i32 128, i32 128, i32 128, i32 128, i32 128, i32 128, i32 128, i32 128, i32 128, i32 128, i32 128, i32 128, i32 128>
  %408 = lshr <16 x i32> %407, <i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8>
  %409 = add nuw nsw <16 x i32> %408, %407
  %410 = lshr <16 x i32> %409, <i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8>
  %411 = sub nsw <16 x i32> %405, %410
  %412 = trunc <16 x i32> %411 to <16 x i8>
  %413 = bitcast i8* %397 to <16 x i8>*
  store <16 x i8> %412, <16 x i8>* %413, align 1, !alias.scope !76, !noalias !73
  %414 = add i64 %396, 16
  %415 = icmp eq i64 %414, %372
  br i1 %415, label %416, label %395, !llvm.loop !78

416:                                              ; preds = %395
  br i1 %375, label %441, label %417

417:                                              ; preds = %416, %387, %386
  %418 = phi i8* [ %380, %387 ], [ %380, %386 ], [ %393, %416 ]
  %419 = phi i32 [ %109, %387 ], [ %109, %386 ], [ %374, %416 ]
  %420 = phi i8* [ %378, %387 ], [ %378, %386 ], [ %394, %416 ]
  br label %421

421:                                              ; preds = %417, %421
  %422 = phi i8* [ %438, %421 ], [ %418, %417 ]
  %423 = phi i32 [ %425, %421 ], [ %419, %417 ]
  %424 = phi i8* [ %439, %421 ], [ %420, %417 ]
  %425 = add nsw i32 %423, -1
  %426 = load i8, i8* %424, align 1
  %427 = zext i8 %426 to i32
  %428 = load i8, i8* %422, align 1
  %429 = zext i8 %428 to i32
  %430 = add nuw nsw i32 %429, %427
  %431 = mul nuw nsw i32 %429, %427
  %432 = add nuw nsw i32 %431, 128
  %433 = lshr i32 %432, 8
  %434 = add nuw nsw i32 %433, %432
  %435 = lshr i32 %434, 8
  %436 = sub nsw i32 %430, %435
  %437 = trunc i32 %436 to i8
  store i8 %437, i8* %422, align 1
  %438 = getelementptr inbounds i8, i8* %422, i64 1
  %439 = getelementptr inbounds i8, i8* %424, i64 1
  %440 = icmp sgt i32 %425, 0
  br i1 %440, label %421, label %441, !llvm.loop !79

441:                                              ; preds = %421, %416, %376
  %442 = phi i8* [ %380, %376 ], [ %393, %416 ], [ %438, %421 ]
  %443 = getelementptr inbounds i8, i8* %442, i64 %363
  %444 = getelementptr inbounds i8, i8* %378, i64 %364
  %445 = icmp sgt i32 %385, 0
  %446 = add i64 %377, 1
  br i1 %445, label %376, label %666

447:                                              ; preds = %269
  %448 = load i32, i32* %95, align 8
  br i1 %130, label %449, label %666

449:                                              ; preds = %447
  %450 = getelementptr inbounds %struct.SkMask, %struct.SkMask* %2, i64 0, i32 2
  %451 = load i32, i32* %450, align 8
  %452 = mul i32 %448, %20
  %453 = zext i32 %452 to i64
  %454 = getelementptr inbounds i8, i8* %119, i64 %453
  %455 = getelementptr inbounds i8, i8* %454, i64 %22
  %456 = icmp sgt i32 %109, 0
  %457 = sub nsw i32 %448, %109
  %458 = sext i32 %457 to i64
  %459 = zext i32 %451 to i64
  %460 = and i32 %109, 1
  %461 = icmp eq i32 %460, 0
  %462 = add nsw i32 %109, -1
  %463 = add i32 %108, 1
  %464 = icmp eq i32 %106, %463
  br label %465

465:                                              ; preds = %512, %449
  %466 = phi i8* [ %118, %449 ], [ %515, %512 ]
  %467 = phi i32 [ %114, %449 ], [ %469, %512 ]
  %468 = phi i8* [ %455, %449 ], [ %514, %512 ]
  %469 = add nsw i32 %467, -1
  br i1 %456, label %470, label %512

470:                                              ; preds = %465
  br i1 %461, label %486, label %471

471:                                              ; preds = %470
  %472 = load i8, i8* %466, align 1
  %473 = icmp eq i8 %472, 0
  br i1 %473, label %483, label %474

474:                                              ; preds = %471
  %475 = load i8, i8* %468, align 1
  %476 = zext i8 %475 to i32
  %477 = xor i8 %472, -1
  %478 = zext i8 %477 to i32
  %479 = add nuw nsw i32 %478, 1
  %480 = mul nuw nsw i32 %479, %476
  %481 = lshr i32 %480, 8
  %482 = trunc i32 %481 to i8
  store i8 %482, i8* %468, align 1
  br label %483

483:                                              ; preds = %474, %471
  %484 = getelementptr inbounds i8, i8* %468, i64 1
  %485 = getelementptr inbounds i8, i8* %466, i64 1
  br label %486

486:                                              ; preds = %483, %470
  %487 = phi i32 [ %462, %483 ], [ %109, %470 ]
  %488 = phi i8* [ %484, %483 ], [ %468, %470 ]
  %489 = phi i8* [ %485, %483 ], [ %466, %470 ]
  %490 = phi i8* [ %484, %483 ], [ undef, %470 ]
  br i1 %464, label %512, label %491

491:                                              ; preds = %486, %700
  %492 = phi i32 [ %509, %700 ], [ %487, %486 ]
  %493 = phi i8* [ %701, %700 ], [ %488, %486 ]
  %494 = phi i8* [ %702, %700 ], [ %489, %486 ]
  %495 = load i8, i8* %494, align 1
  %496 = icmp eq i8 %495, 0
  br i1 %496, label %506, label %497

497:                                              ; preds = %491
  %498 = load i8, i8* %493, align 1
  %499 = zext i8 %498 to i32
  %500 = xor i8 %495, -1
  %501 = zext i8 %500 to i32
  %502 = add nuw nsw i32 %501, 1
  %503 = mul nuw nsw i32 %502, %499
  %504 = lshr i32 %503, 8
  %505 = trunc i32 %504 to i8
  store i8 %505, i8* %493, align 1
  br label %506

506:                                              ; preds = %497, %491
  %507 = getelementptr inbounds i8, i8* %493, i64 1
  %508 = getelementptr inbounds i8, i8* %494, i64 1
  %509 = add nsw i32 %492, -2
  %510 = load i8, i8* %508, align 1
  %511 = icmp eq i8 %510, 0
  br i1 %511, label %700, label %691

512:                                              ; preds = %486, %700, %465
  %513 = phi i8* [ %468, %465 ], [ %490, %486 ], [ %701, %700 ]
  %514 = getelementptr inbounds i8, i8* %513, i64 %458
  %515 = getelementptr inbounds i8, i8* %466, i64 %459
  %516 = icmp sgt i32 %469, 0
  br i1 %516, label %465, label %666

517:                                              ; preds = %269
  %518 = tail call i64 @_ZNK6SkMask16computeImageSizeEv(%struct.SkMask* %2) #9
  %519 = icmp eq i64 %518, 0
  br i1 %519, label %666, label %520

520:                                              ; preds = %517
  %521 = tail call i8* @_ZN6SkMask10AllocImageEmNS_9AllocTypeE(i64 %518, i32 0) #9
  store i8* %521, i8** %97, align 8
  %522 = getelementptr inbounds %struct.SkMask, %struct.SkMask* %2, i64 0, i32 2
  %523 = load i32, i32* %522, align 8
  %524 = load i32, i32* %95, align 8
  br i1 %130, label %525, label %665

525:                                              ; preds = %520
  %526 = mul i32 %524, %20
  %527 = zext i32 %526 to i64
  %528 = getelementptr inbounds i8, i8* %119, i64 %527
  %529 = getelementptr inbounds i8, i8* %528, i64 %22
  %530 = sub nsw i32 %524, %109
  %531 = sub nsw i32 %523, %109
  %532 = icmp sgt i32 %109, 0
  %533 = sext i32 %531 to i64
  %534 = zext i32 %523 to i64
  %535 = sext i32 %530 to i64
  %536 = xor i32 %108, -1
  %537 = add i32 %106, %536
  %538 = zext i32 %537 to i64
  %539 = add nuw nsw i64 %538, 1
  %540 = zext i32 %537 to i64
  %541 = add nuw nsw i64 %540, 1
  %542 = and i64 %539, 8589934576
  %543 = add nsw i64 %542, -16
  %544 = lshr exact i64 %543, 4
  %545 = add nuw nsw i64 %544, 1
  %546 = icmp ult i64 %539, 16
  %547 = and i64 %539, 8589934576
  %548 = trunc i64 %547 to i32
  %549 = sub i32 %109, %548
  %550 = and i64 %545, 1
  %551 = icmp eq i64 %543, 0
  %552 = sub nuw nsw i64 %545, %550
  %553 = icmp eq i64 %550, 0
  %554 = icmp eq i64 %539, %547
  br label %555

555:                                              ; preds = %639, %525
  %556 = phi i64 [ %646, %639 ], [ 0, %525 ]
  %557 = phi i8* [ %643, %639 ], [ %118, %525 ]
  %558 = phi i32 [ %565, %639 ], [ %114, %525 ]
  %559 = phi i8* [ %642, %639 ], [ %521, %525 ]
  %560 = phi i8* [ %644, %639 ], [ %529, %525 ]
  %561 = mul i64 %556, %534
  %562 = getelementptr i8, i8* %118, i64 %561
  %563 = add i64 %541, %561
  %564 = getelementptr i8, i8* %118, i64 %563
  %565 = add nsw i32 %558, -1
  br i1 %532, label %566, label %639

566:                                              ; preds = %555
  br i1 %546, label %567, label %572

567:                                              ; preds = %638, %572, %566
  %568 = phi i32 [ %109, %572 ], [ %109, %566 ], [ %549, %638 ]
  %569 = phi i8* [ %559, %572 ], [ %559, %566 ], [ %583, %638 ]
  %570 = phi i8* [ %560, %572 ], [ %560, %566 ], [ %584, %638 ]
  %571 = phi i8* [ %557, %572 ], [ %557, %566 ], [ %585, %638 ]
  br label %647

572:                                              ; preds = %566
  %573 = getelementptr i8, i8* %559, i64 %541
  %574 = getelementptr i8, i8* %560, i64 %541
  %575 = icmp ult i8* %559, %574
  %576 = icmp ult i8* %560, %573
  %577 = and i1 %575, %576
  %578 = icmp ult i8* %559, %564
  %579 = icmp ult i8* %562, %573
  %580 = and i1 %578, %579
  %581 = or i1 %577, %580
  br i1 %581, label %567, label %582

582:                                              ; preds = %572
  %583 = getelementptr i8, i8* %559, i64 %547
  %584 = getelementptr i8, i8* %560, i64 %547
  %585 = getelementptr i8, i8* %557, i64 %547
  br i1 %551, label %621, label %586

586:                                              ; preds = %582, %586
  %587 = phi i64 [ %618, %586 ], [ 0, %582 ]
  %588 = phi i64 [ %619, %586 ], [ %552, %582 ]
  %589 = getelementptr i8, i8* %559, i64 %587
  %590 = getelementptr i8, i8* %560, i64 %587
  %591 = getelementptr i8, i8* %557, i64 %587
  %592 = bitcast i8* %590 to <16 x i8>*
  %593 = load <16 x i8>, <16 x i8>* %592, align 1, !alias.scope !80
  %594 = zext <16 x i8> %593 to <16 x i32>
  %595 = bitcast i8* %591 to <16 x i8>*
  %596 = load <16 x i8>, <16 x i8>* %595, align 1, !alias.scope !83
  %597 = zext <16 x i8> %596 to <16 x i32>
  %598 = add nuw nsw <16 x i32> %597, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %599 = mul nuw nsw <16 x i32> %598, %594
  %600 = lshr <16 x i32> %599, <i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8>
  %601 = trunc <16 x i32> %600 to <16 x i8>
  %602 = bitcast i8* %589 to <16 x i8>*
  store <16 x i8> %601, <16 x i8>* %602, align 1, !alias.scope !85, !noalias !87
  %603 = or i64 %587, 16
  %604 = getelementptr i8, i8* %559, i64 %603
  %605 = getelementptr i8, i8* %560, i64 %603
  %606 = getelementptr i8, i8* %557, i64 %603
  %607 = bitcast i8* %605 to <16 x i8>*
  %608 = load <16 x i8>, <16 x i8>* %607, align 1, !alias.scope !80
  %609 = zext <16 x i8> %608 to <16 x i32>
  %610 = bitcast i8* %606 to <16 x i8>*
  %611 = load <16 x i8>, <16 x i8>* %610, align 1, !alias.scope !83
  %612 = zext <16 x i8> %611 to <16 x i32>
  %613 = add nuw nsw <16 x i32> %612, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %614 = mul nuw nsw <16 x i32> %613, %609
  %615 = lshr <16 x i32> %614, <i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8>
  %616 = trunc <16 x i32> %615 to <16 x i8>
  %617 = bitcast i8* %604 to <16 x i8>*
  store <16 x i8> %616, <16 x i8>* %617, align 1, !alias.scope !85, !noalias !87
  %618 = add i64 %587, 32
  %619 = add i64 %588, -2
  %620 = icmp eq i64 %619, 0
  br i1 %620, label %621, label %586, !llvm.loop !88

621:                                              ; preds = %586, %582
  %622 = phi i64 [ 0, %582 ], [ %618, %586 ]
  br i1 %553, label %638, label %623

623:                                              ; preds = %621
  %624 = getelementptr i8, i8* %559, i64 %622
  %625 = getelementptr i8, i8* %560, i64 %622
  %626 = getelementptr i8, i8* %557, i64 %622
  %627 = bitcast i8* %625 to <16 x i8>*
  %628 = load <16 x i8>, <16 x i8>* %627, align 1, !alias.scope !80
  %629 = zext <16 x i8> %628 to <16 x i32>
  %630 = bitcast i8* %626 to <16 x i8>*
  %631 = load <16 x i8>, <16 x i8>* %630, align 1, !alias.scope !83
  %632 = zext <16 x i8> %631 to <16 x i32>
  %633 = add nuw nsw <16 x i32> %632, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %634 = mul nuw nsw <16 x i32> %633, %629
  %635 = lshr <16 x i32> %634, <i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8>
  %636 = trunc <16 x i32> %635 to <16 x i8>
  %637 = bitcast i8* %624 to <16 x i8>*
  store <16 x i8> %636, <16 x i8>* %637, align 1, !alias.scope !85, !noalias !87
  br label %638

638:                                              ; preds = %621, %623
  br i1 %554, label %639, label %567

639:                                              ; preds = %647, %638, %555
  %640 = phi i8* [ %560, %555 ], [ %584, %638 ], [ %663, %647 ]
  %641 = phi i8* [ %559, %555 ], [ %583, %638 ], [ %661, %647 ]
  %642 = getelementptr inbounds i8, i8* %641, i64 %533
  %643 = getelementptr inbounds i8, i8* %557, i64 %534
  %644 = getelementptr inbounds i8, i8* %640, i64 %535
  %645 = icmp sgt i32 %565, 0
  %646 = add i64 %556, 1
  br i1 %645, label %555, label %665

647:                                              ; preds = %567, %647
  %648 = phi i32 [ %652, %647 ], [ %568, %567 ]
  %649 = phi i8* [ %661, %647 ], [ %569, %567 ]
  %650 = phi i8* [ %663, %647 ], [ %570, %567 ]
  %651 = phi i8* [ %662, %647 ], [ %571, %567 ]
  %652 = add nsw i32 %648, -1
  %653 = load i8, i8* %650, align 1
  %654 = zext i8 %653 to i32
  %655 = load i8, i8* %651, align 1
  %656 = zext i8 %655 to i32
  %657 = add nuw nsw i32 %656, 1
  %658 = mul nuw nsw i32 %657, %654
  %659 = lshr i32 %658, 8
  %660 = trunc i32 %659 to i8
  store i8 %660, i8* %649, align 1
  %661 = getelementptr inbounds i8, i8* %649, i64 1
  %662 = getelementptr inbounds i8, i8* %651, i64 1
  %663 = getelementptr inbounds i8, i8* %650, i64 1
  %664 = icmp sgt i32 %652, 0
  br i1 %664, label %647, label %639, !llvm.loop !89

665:                                              ; preds = %639, %520
  tail call void @_ZN6SkMask9FreeImageEPv(i8* %119) #9
  br label %666

666:                                              ; preds = %512, %441, %269, %352, %447, %665, %517
  %667 = phi i64 [ %120, %517 ], [ 0, %665 ], [ 0, %447 ], [ 0, %352 ], [ 0, %269 ], [ 0, %441 ], [ 0, %512 ]
  %668 = phi i32 [ 1, %517 ], [ 0, %665 ], [ 0, %447 ], [ 0, %352 ], [ 0, %269 ], [ 0, %441 ], [ 0, %512 ]
  %669 = icmp eq i64 %160, 0
  br i1 %669, label %671, label %670

670:                                              ; preds = %666
  tail call void @_Z7sk_freePv(i8* %162) #9
  br label %671

671:                                              ; preds = %666, %670
  %672 = icmp eq i8* %129, null
  br i1 %672, label %674, label %673

673:                                              ; preds = %671
  tail call void @_Z7sk_freePv(i8* nonnull %129) #9
  br label %674

674:                                              ; preds = %671, %673
  %675 = icmp eq i64 %667, 0
  br i1 %675, label %678, label %676

676:                                              ; preds = %674
  %677 = inttoptr i64 %667 to i8*
  tail call void @_ZN6SkMask9FreeImageEPv(i8* nonnull %677) #9
  br label %678

678:                                              ; preds = %676, %674
  %679 = icmp eq i32 %668, 0
  br i1 %679, label %680, label %685

680:                                              ; preds = %51, %678
  %681 = icmp eq i32 %3, 3
  br i1 %681, label %682, label %685

682:                                              ; preds = %680
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %54, i8* align 4 %55, i64 16, i1 false)
  %683 = getelementptr inbounds %struct.SkMask, %struct.SkMask* %2, i64 0, i32 2
  %684 = load i32, i32* %683, align 8
  store i32 %684, i32* %95, align 8
  br label %685

685:                                              ; preds = %101, %680, %682, %678
  %686 = phi i1 [ false, %678 ], [ true, %682 ], [ true, %680 ], [ false, %101 ]
  %687 = icmp eq i8* %19, null
  br i1 %687, label %689, label %688

688:                                              ; preds = %685
  tail call void @_Z7sk_freePv(i8* nonnull %19) #9
  br label %689

689:                                              ; preds = %688, %685, %5
  %690 = phi i1 [ false, %5 ], [ %686, %685 ], [ %686, %688 ]
  ret i1 %690

691:                                              ; preds = %506
  %692 = load i8, i8* %507, align 1
  %693 = zext i8 %692 to i32
  %694 = xor i8 %510, -1
  %695 = zext i8 %694 to i32
  %696 = add nuw nsw i32 %695, 1
  %697 = mul nuw nsw i32 %696, %693
  %698 = lshr i32 %697, 8
  %699 = trunc i32 %698 to i8
  store i8 %699, i8* %507, align 1
  br label %700

700:                                              ; preds = %691, %506
  %701 = getelementptr inbounds i8, i8* %493, i64 2
  %702 = getelementptr inbounds i8, i8* %494, i64 2
  %703 = icmp sgt i32 %509, 0
  br i1 %703, label %491, label %512
}

; Function Attrs: nofree nounwind
declare float @expf(float) local_unnamed_addr #8

declare void @_Z7sk_freePv(i8*) local_unnamed_addr #2

declare i8* @_Z15sk_malloc_throwmm(i64, i64) local_unnamed_addr #2

; Function Attrs: nounwind readnone speculatable
declare <4 x float> @llvm.floor.v4f32(<4 x float>) #7

attributes #0 = { norecurse nounwind readnone ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { argmemonly nounwind }
attributes #4 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nofree norecurse nounwind ssp uwtable writeonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { norecurse nounwind readonly ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { nounwind readnone speculatable }
attributes #8 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #9 = { nounwind }
attributes #10 = { noreturn nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{!3}
!3 = distinct !{!3, !4}
!4 = distinct !{!4, !"LVerDomain"}
!5 = !{!6}
!6 = distinct !{!6, !4}
!7 = distinct !{!7, !8}
!8 = !{!"llvm.loop.isvectorized", i32 1}
!9 = distinct !{!9, !8}
!10 = !{!11}
!11 = distinct !{!11, !12}
!12 = distinct !{!12, !"LVerDomain"}
!13 = !{!14}
!14 = distinct !{!14, !12}
!15 = distinct !{!15, !8}
!16 = distinct !{!16, !8}
!17 = !{!18}
!18 = distinct !{!18, !19}
!19 = distinct !{!19, !"LVerDomain"}
!20 = !{!21}
!21 = distinct !{!21, !19}
!22 = distinct !{!22, !8}
!23 = distinct !{!23, !8}
!24 = !{!25}
!25 = distinct !{!25, !26}
!26 = distinct !{!26, !"LVerDomain"}
!27 = !{!28}
!28 = distinct !{!28, !26}
!29 = !{!30}
!30 = distinct !{!30, !26}
!31 = !{!25, !28}
!32 = distinct !{!32, !8}
!33 = distinct !{!33, !8}
!34 = !{!35}
!35 = distinct !{!35, !36}
!36 = distinct !{!36, !"LVerDomain"}
!37 = !{!38}
!38 = distinct !{!38, !36}
!39 = !{!40}
!40 = distinct !{!40, !36}
!41 = !{!35, !38}
!42 = distinct !{!42, !8}
!43 = distinct !{!43, !8}
!44 = !{!45}
!45 = distinct !{!45, !46}
!46 = distinct !{!46, !"LVerDomain"}
!47 = !{!48}
!48 = distinct !{!48, !46}
!49 = !{!50}
!50 = distinct !{!50, !46}
!51 = !{!45, !48}
!52 = distinct !{!52, !8}
!53 = distinct !{!53, !8}
!54 = distinct !{!54, !8}
!55 = distinct !{!55, !56, !8}
!56 = !{!"llvm.loop.unroll.runtime.disable"}
!57 = distinct !{!57, !8}
!58 = distinct !{!58, !56, !8}
!59 = !{!60}
!60 = distinct !{!60, !61}
!61 = distinct !{!61, !"LVerDomain"}
!62 = !{!63}
!63 = distinct !{!63, !61}
!64 = !{!65}
!65 = distinct !{!65, !61}
!66 = !{!60, !63}
!67 = distinct !{!67, !8}
!68 = distinct !{!68, !69}
!69 = !{!"llvm.loop.unroll.disable"}
!70 = distinct !{!70, !69}
!71 = distinct !{!71, !8}
!72 = distinct !{!72, !69}
!73 = !{!74}
!74 = distinct !{!74, !75}
!75 = distinct !{!75, !"LVerDomain"}
!76 = !{!77}
!77 = distinct !{!77, !75}
!78 = distinct !{!78, !8}
!79 = distinct !{!79, !8}
!80 = !{!81}
!81 = distinct !{!81, !82}
!82 = distinct !{!82, !"LVerDomain"}
!83 = !{!84}
!84 = distinct !{!84, !82}
!85 = !{!86}
!86 = distinct !{!86, !82}
!87 = !{!81, !84}
!88 = distinct !{!88, !8}
!89 = distinct !{!89, !8}
