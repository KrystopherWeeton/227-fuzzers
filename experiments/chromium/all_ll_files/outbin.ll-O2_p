; ModuleID = '../../third_party/nasm/output/outbin.c'
source_filename = "../../third_party/nasm/output/outbin.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.dfmt = type { i8*, i8*, void ()*, void (i8*, i32, i32)*, void (i8*, i32, i64, i32, i8*)*, void (i8*, i8*)*, void (i32)*, void (i32, i8*)*, void ()*, %struct.pragma_facility* }
%struct.pragma_facility = type { i8*, i32 (%struct.pragma*)* }
%struct.pragma = type { %struct.pragma_facility*, i8*, i8*, i8*, i32 }
%struct.ofmt = type { i8*, i8*, i8*, i32, i32, %struct.dfmt**, %struct.dfmt*, i8*, void ()*, void ()*, void (%struct.out_data*)*, void (i32, i8*, i32, i64, i32, i32)*, void (i8*, i32, i64, i32, i8*)*, i32 (i8*, i32*)*, i32 (i8*, i32, i32, i32*, i8*)*, void (i32, i32)*, i32 (i32)*, i32 (i32, i8*)*, void ()*, %struct.pragma_facility* }
%struct.out_data = type { i64, i32, i32, i32, i32, i32, i32, i64, %struct.itemplate*, i8*, i64, i32, i32, i64, %struct.src_location }
%struct.itemplate = type opaque
%struct.src_location = type { i8*, i32 }
%struct.Section = type { i8*, %struct.SAA*, i64, i32, i64, i64, i64, i64, i8*, i8*, i32, i32, %struct.bin_label*, %struct.bin_label**, %struct.Section*, %struct.Section* }
%struct.SAA = type { i64, i64, i64, i64, i64, i64, i8**, i64, i64, i8**, i64, i64, i8** }
%struct.bin_label = type { i8*, %struct.bin_label* }
%struct._IO_FILE = type { i32, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, %struct._IO_marker*, %struct._IO_FILE*, i32, i32, i64, i16, i8, [1 x i8], i8*, i64, %struct._IO_codecvt*, %struct._IO_wide_data*, %struct._IO_FILE*, i8*, i64, i32, [20 x i8] }
%struct._IO_marker = type opaque
%struct._IO_codecvt = type opaque
%struct._IO_wide_data = type opaque
%struct.Reloc = type { %struct.Reloc*, i32, i32, i32, i32, %struct.Section* }
%struct.tokenval = type { i8*, i64, i64, i32, i8 }
%struct.expr = type { i32, i64 }
%struct.eval_hints = type { i64, i32 }

@.str = private unnamed_addr constant [40 x i8] c"Flat raw binary (MS-DOS, embedded, ...)\00", align 1
@.str.1 = private unnamed_addr constant [4 x i8] c"bin\00", align 1
@.str.2 = private unnamed_addr constant [1 x i8] zeroinitializer, align 1
@null_debug_arr = external constant [2 x %struct.dfmt*], align 16
@null_debug_form = external constant %struct.dfmt, align 8
@bin_stdmac = external constant [0 x i8], align 1
@of_bin = hidden local_unnamed_addr constant %struct.ofmt { i8* getelementptr inbounds ([40 x i8], [40 x i8]* @.str, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.1, i32 0, i32 0), i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.2, i32 0, i32 0), i32 0, i32 64, %struct.dfmt** getelementptr inbounds ([2 x %struct.dfmt*], [2 x %struct.dfmt*]* @null_debug_arr, i32 0, i32 0), %struct.dfmt* @null_debug_form, i8* getelementptr inbounds ([0 x i8], [0 x i8]* @bin_stdmac, i32 0, i32 0), void ()* @bin_init, void ()* @null_reset, void (%struct.out_data*)* @nasm_do_legacy_output, void (i32, i8*, i32, i64, i32, i32)* @bin_out, void (i8*, i32, i64, i32, i8*)* @bin_deflabel, i32 (i8*, i32*)* @bin_secname, i32 (i8*, i32, i32, i32*, i8*)* null, void (i32, i32)* @bin_sectalign, i32 (i32)* @null_segbase, i32 (i32, i8*)* @bin_directive, void ()* @bin_cleanup, %struct.pragma_facility* null }, align 8
@.str.3 = private unnamed_addr constant [30 x i8] c"Intel Hex encoded flat binary\00", align 1
@.str.4 = private unnamed_addr constant [4 x i8] c"ith\00", align 1
@.str.5 = private unnamed_addr constant [5 x i8] c".ith\00", align 1
@of_ith = hidden local_unnamed_addr constant %struct.ofmt { i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str.3, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.4, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.5, i32 0, i32 0), i32 1, i32 64, %struct.dfmt** getelementptr inbounds ([2 x %struct.dfmt*], [2 x %struct.dfmt*]* @null_debug_arr, i32 0, i32 0), %struct.dfmt* @null_debug_form, i8* getelementptr inbounds ([0 x i8], [0 x i8]* @bin_stdmac, i32 0, i32 0), void ()* @ith_init, void ()* @null_reset, void (%struct.out_data*)* @nasm_do_legacy_output, void (i32, i8*, i32, i64, i32, i32)* @bin_out, void (i8*, i32, i64, i32, i8*)* @bin_deflabel, i32 (i8*, i32*)* @bin_secname, i32 (i8*, i32, i32, i32*, i8*)* null, void (i32, i32)* @bin_sectalign, i32 (i32)* @null_segbase, i32 (i32, i8*)* @bin_directive, void ()* @bin_cleanup, %struct.pragma_facility* null }, align 8
@.str.6 = private unnamed_addr constant [39 x i8] c"Motorola S-records encoded flat binary\00", align 1
@.str.7 = private unnamed_addr constant [5 x i8] c"srec\00", align 1
@.str.8 = private unnamed_addr constant [6 x i8] c".srec\00", align 1
@of_srec = hidden local_unnamed_addr constant %struct.ofmt { i8* getelementptr inbounds ([39 x i8], [39 x i8]* @.str.6, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.7, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.8, i32 0, i32 0), i32 1, i32 64, %struct.dfmt** getelementptr inbounds ([2 x %struct.dfmt*], [2 x %struct.dfmt*]* @null_debug_arr, i32 0, i32 0), %struct.dfmt* @null_debug_form, i8* getelementptr inbounds ([0 x i8], [0 x i8]* @bin_stdmac, i32 0, i32 0), void ()* @srec_init, void ()* @null_reset, void (%struct.out_data*)* @nasm_do_legacy_output, void (i32, i8*, i32, i64, i32, i32)* @bin_out, void (i8*, i32, i64, i32, i8*)* @bin_deflabel, i32 (i8*, i32*)* @bin_secname, i32 (i8*, i32, i32, i32*, i8*)* null, void (i32, i32)* @bin_sectalign, i32 (i32)* @null_segbase, i32 (i32, i8*)* @bin_directive, void ()* @bin_cleanup, %struct.pragma_facility* null }, align 8
@do_output = internal unnamed_addr global void ()* null, align 8
@origin = internal unnamed_addr global i64 0, align 8
@sections = internal unnamed_addr global %struct.Section* null, align 8
@.str.9 = private unnamed_addr constant [39 x i8] c"../../third_party/nasm/output/outbin.c\00", align 1
@.str.10 = private unnamed_addr constant [17 x i8] c"addr <= s->start\00", align 1
@ofile = external local_unnamed_addr global %struct._IO_FILE*, align 8
@relocs = internal global %struct.Reloc* null, align 8
@reloctail = internal unnamed_addr global %struct.Reloc** null, align 8
@origin_defined = internal unnamed_addr global i1 false, align 4
@no_seg_labels = internal global %struct.bin_label* null, align 8
@nsl_tail = internal unnamed_addr global %struct.bin_label** null, align 8
@last_section = internal unnamed_addr global %struct.Section* null, align 8
@.str.11 = private unnamed_addr constant [6 x i8] c".text\00", align 1
@.str.12 = private unnamed_addr constant [42 x i8] c"WRT not supported by binary output format\00", align 1
@.str.13 = private unnamed_addr constant [38 x i8] c"code directed to nonexistent segment?\00", align 1
@.str.14 = private unnamed_addr constant [58 x i8] c"attempt to initialize memory in a nobits section: ignored\00", align 1
@.str.15 = private unnamed_addr constant [62 x i8] c"binary output format does not support segment base references\00", align 1
@.str.16 = private unnamed_addr constant [58 x i8] c"binary output format does not support external references\00", align 1
@.str.17 = private unnamed_addr constant [52 x i8] c"uninitialized space declared in %s section: zeroing\00", align 1
@.str.18 = private unnamed_addr constant [32 x i8] c"unsupported relocation type %d\0A\00", align 1
@.str.19 = private unnamed_addr constant [56 x i8] c"binary format does not support any special symbol types\00", align 1
@.str.20 = private unnamed_addr constant [33 x i8] c"unrecognised special symbol `%s'\00", align 1
@.str.21 = private unnamed_addr constant [55 x i8] c"binary output format does not support common variables\00", align 1
@.str.22 = private unnamed_addr constant [6 x i8] c".data\00", align 1
@.str.23 = private unnamed_addr constant [5 x i8] c".bss\00", align 1
@_pass_type = external local_unnamed_addr global i32, align 4
@bin_define_section_labels.labels_defined = internal unnamed_addr global i1 false, align 4
@.str.24 = private unnamed_addr constant [9 x i8] c"section.\00", align 1
@.str.25 = private unnamed_addr constant [7 x i8] c".start\00", align 1
@nasm_ctype_tab = external local_unnamed_addr global [256 x i16], align 16
@.str.27 = private unnamed_addr constant [41 x i8] c"ignoring unknown section attribute: \22%s\22\00", align 1
@.str.28 = private unnamed_addr constant [55 x i8] c"attempt to change section type from progbits to nobits\00", align 1
@.str.29 = private unnamed_addr constant [55 x i8] c"attempt to change section type from nobits to progbits\00", align 1
@.str.30 = private unnamed_addr constant [42 x i8] c"argument to `align' is not a power of two\00", align 1
@.str.31 = private unnamed_addr constant [51 x i8] c"`align' value conflicts with section start address\00", align 1
@.str.32 = private unnamed_addr constant [43 x i8] c"argument to `valign' is not a power of two\00", align 1
@.str.33 = private unnamed_addr constant [47 x i8] c"`valign' value conflicts with `vstart' address\00", align 1
@.str.34 = private unnamed_addr constant [56 x i8] c"cannot combine `start' and `follows' section attributes\00", align 1
@.str.35 = private unnamed_addr constant [32 x i8] c"section start address redefined\00", align 1
@.str.36 = private unnamed_addr constant [49 x i8] c"`start' address conflicts with section alignment\00", align 1
@.str.37 = private unnamed_addr constant [58 x i8] c"cannot combine `vstart' and `vfollows' section attributes\00", align 1
@.str.38 = private unnamed_addr constant [49 x i8] c"section virtual start address (vstart) redefined\00", align 1
@.str.39 = private unnamed_addr constant [47 x i8] c"`vstart' address conflicts with `valign' value\00", align 1
@.str.40 = private unnamed_addr constant [3 x i8] c" \09\00", align 1
@.str.41 = private unnamed_addr constant [47 x i8] c"expecting section name for `follows' attribute\00", align 1
@.str.42 = private unnamed_addr constant [48 x i8] c"expecting section name for `vfollows' attribute\00", align 1
@.str.43 = private unnamed_addr constant [7 x i8] c"align=\00", align 1
@.str.44 = private unnamed_addr constant [7 x i8] c"start=\00", align 1
@.str.45 = private unnamed_addr constant [9 x i8] c"follows=\00", align 1
@.str.46 = private unnamed_addr constant [8 x i8] c"vstart=\00", align 1
@.str.47 = private unnamed_addr constant [8 x i8] c"valign=\00", align 1
@.str.48 = private unnamed_addr constant [10 x i8] c"vfollows=\00", align 1
@.str.49 = private unnamed_addr constant [7 x i8] c"nobits\00", align 1
@.str.50 = private unnamed_addr constant [9 x i8] c"progbits\00", align 1
@.str.51 = private unnamed_addr constant [5 x i8] c"()'\22\00", align 1
@.str.52 = private unnamed_addr constant [38 x i8] c"invalid syntax in `section' directive\00", align 1
@.str.53 = private unnamed_addr constant [14 x i8] c"expecting `)'\00", align 1
@.str.54 = private unnamed_addr constant [51 x i8] c"No value given to attribute in `section' directive\00", align 1
@.str.55 = private unnamed_addr constant [54 x i8] c"section attribute value must be a critical expression\00", align 1
@.str.56 = private unnamed_addr constant [58 x i8] c"Invalid attribute value specified in `section' directive.\00", align 1
@.str.57 = private unnamed_addr constant [40 x i8] c"org value must be a critical expression\00", align 1
@.str.58 = private unnamed_addr constant [25 x i8] c"program origin redefined\00", align 1
@.str.59 = private unnamed_addr constant [49 x i8] c"No or invalid offset specified in ORG directive.\00", align 1
@.str.60 = private unnamed_addr constant [4 x i8] c"all\00", align 1
@map_control = internal unnamed_addr global i32 0, align 4
@.str.61 = private unnamed_addr constant [6 x i8] c"brief\00", align 1
@.str.62 = private unnamed_addr constant [9 x i8] c"sections\00", align 1
@.str.63 = private unnamed_addr constant [9 x i8] c"segments\00", align 1
@.str.64 = private unnamed_addr constant [8 x i8] c"symbols\00", align 1
@rf = internal unnamed_addr global %struct._IO_FILE* null, align 8
@.str.65 = private unnamed_addr constant [7 x i8] c"stdout\00", align 1
@stdout = external local_unnamed_addr global %struct._IO_FILE*, align 8
@.str.66 = private unnamed_addr constant [7 x i8] c"stderr\00", align 1
@stderr = external local_unnamed_addr global %struct._IO_FILE*, align 8
@.str.67 = private unnamed_addr constant [29 x i8] c"unable to open map file `%s'\00", align 1
@.str.68 = private unnamed_addr constant [27 x i8] c"map file already specified\00", align 1
@.str.69 = private unnamed_addr constant [64 x i8] c"bin_cleanup: Sections were initially referenced in this order:\0A\00", align 1
@.str.70 = private unnamed_addr constant [8 x i8] c"%i. %s\0A\00", align 1
@.str.71 = private unnamed_addr constant [62 x i8] c"cannot mix real and virtual attributes in nobits section (%s)\00", align 1
@.str.72 = private unnamed_addr constant [54 x i8] c"section %s follows an invalid or unknown section (%s)\00", align 1
@.str.73 = private unnamed_addr constant [48 x i8] c"sections %s and %s can't both follow section %s\00", align 1
@.str.74 = private unnamed_addr constant [40 x i8] c"section %s begins before program origin\00", align 1
@.str.75 = private unnamed_addr constant [40 x i8] c"section %s beings before program origin\00", align 1
@.str.76 = private unnamed_addr constant [33 x i8] c"sections %s ~ %s and %s overlap!\00", align 1
@.str.77 = private unnamed_addr constant [28 x i8] c"sections %s and %s overlap!\00", align 1
@.str.78 = private unnamed_addr constant [41 x i8] c"section %s vfollows unknown section (%s)\00", align 1
@.str.79 = private unnamed_addr constant [37 x i8] c"cannot compute vstart for section %s\00", align 1
@.str.80 = private unnamed_addr constant [32 x i8] c"circular vfollows path detected\00", align 1
@.str.81 = private unnamed_addr constant [59 x i8] c"bin_cleanup: Confirm final section order for output file:\0A\00", align 1
@.str.82 = private unnamed_addr constant [14 x i8] c"r->bytes <= 8\00", align 1
@bin_cleanup.not_defined = internal constant [12 x i8] c"not defined\00", align 1
@.str.83 = private unnamed_addr constant [18 x i8] c"\0A- NASM Map file \00", align 1
@.str.84 = private unnamed_addr constant [38 x i8] c"\0A\0ASource file:  %s\0AOutput file:  %s\0A\0A\00", align 1
@inname = external local_unnamed_addr global i8*, align 8
@outname = external local_unnamed_addr global i8*, align 8
@.str.85 = private unnamed_addr constant [19 x i8] c"-- Program origin \00", align 1
@.str.86 = private unnamed_addr constant [10 x i8] c"\0A\0A%08lX\0A\0A\00", align 1
@.str.87 = private unnamed_addr constant [23 x i8] c"-- Sections (summary) \00", align 1
@.str.88 = private unnamed_addr constant [82 x i8] c"\0A\0AVstart            Start             Stop              Length    Class     Name\0A\00", align 1
@.str.89 = private unnamed_addr constant [29 x i8] c"%16lX  %16lX  %16lX  %08lX  \00", align 1
@.str.90 = private unnamed_addr constant [11 x i8] c"progbits  \00", align 1
@.str.91 = private unnamed_addr constant [11 x i8] c"nobits    \00", align 1
@.str.92 = private unnamed_addr constant [4 x i8] c"%s\0A\00", align 1
@.str.94 = private unnamed_addr constant [24 x i8] c"-- Sections (detailed) \00", align 1
@.str.95 = private unnamed_addr constant [3 x i8] c"\0A\0A\00", align 1
@.str.96 = private unnamed_addr constant [17 x i8] c"---- Section %s \00", align 1
@.str.97 = private unnamed_addr constant [14 x i8] c"\0A\0Aclass:     \00", align 1
@.str.98 = private unnamed_addr constant [47 x i8] c"\0Alength:    %16lX\0Astart:     %16lX\0Aalign:     \00", align 1
@.str.99 = private unnamed_addr constant [6 x i8] c"%16lX\00", align 1
@.str.100 = private unnamed_addr constant [13 x i8] c"\0Afollows:   \00", align 1
@.str.102 = private unnamed_addr constant [30 x i8] c"\0Avstart:    %16lX\0Avalign:    \00", align 1
@.str.103 = private unnamed_addr constant [13 x i8] c"\0Avfollows:  \00", align 1
@.str.104 = private unnamed_addr constant [12 x i8] c"-- Symbols \00", align 1
@.str.105 = private unnamed_addr constant [17 x i8] c"---- No Section \00", align 1
@.str.106 = private unnamed_addr constant [18 x i8] c"\0A\0AValue     Name\0A\00", align 1
@.str.107 = private unnamed_addr constant [24 x i8] c"found_label != LBL_none\00", align 1
@.str.108 = private unnamed_addr constant [11 x i8] c"%08lX  %s\0A\00", align 1
@.str.109 = private unnamed_addr constant [44 x i8] c"\0A\0AReal              Virtual           Name\0A\00", align 1
@.str.110 = private unnamed_addr constant [18 x i8] c"%16lX  %16lX  %s\0A\00", align 1
@debug_nasm = external local_unnamed_addr global i32, align 4
@.str.111 = private unnamed_addr constant [11 x i8] c"len <= 255\00", align 1
@.str.112 = private unnamed_addr constant [14 x i8] c":%02X%04X%02X\00", align 1
@.str.113 = private unnamed_addr constant [5 x i8] c"%02X\00", align 1
@.str.114 = private unnamed_addr constant [6 x i8] c"%02X\0A\00", align 1
@.str.115 = private unnamed_addr constant [12 x i8] c"S%c%02X%0*X\00", align 1

; Function Attrs: nounwind ssp uwtable
define internal void @bin_init() #0 {
  store void ()* @do_output_bin, void ()** @do_output, align 8
  store %struct.Reloc* null, %struct.Reloc** @relocs, align 8
  store %struct.Reloc** @relocs, %struct.Reloc*** @reloctail, align 8
  store i1 false, i1* @origin_defined, align 4
  store %struct.bin_label* null, %struct.bin_label** @no_seg_labels, align 8
  store %struct.bin_label** @no_seg_labels, %struct.bin_label*** @nsl_tail, align 8
  %1 = tail call noalias i8* @nasm_zalloc(i64 120) #11
  store i8* %1, i8** bitcast (%struct.Section** @last_section to i8**), align 8
  store i8* %1, i8** bitcast (%struct.Section** @sections to i8**), align 8
  %2 = tail call noalias i8* @nasm_strdup(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.11, i64 0, i64 0)) #12
  %3 = load %struct.Section*, %struct.Section** @last_section, align 8
  %4 = getelementptr inbounds %struct.Section, %struct.Section* %3, i64 0, i32 0
  store i8* %2, i8** %4, align 8
  %5 = tail call %struct.SAA* @saa_init(i64 1) #12
  %6 = load %struct.Section*, %struct.Section** @last_section, align 8
  %7 = getelementptr inbounds %struct.Section, %struct.Section* %6, i64 0, i32 1
  store %struct.SAA* %5, %struct.SAA** %7, align 8
  %8 = getelementptr inbounds %struct.Section, %struct.Section* %6, i64 0, i32 3
  store i32 192, i32* %8, align 8
  %9 = getelementptr inbounds %struct.Section, %struct.Section* %6, i64 0, i32 12
  %10 = getelementptr inbounds %struct.Section, %struct.Section* %6, i64 0, i32 13
  store %struct.bin_label** %9, %struct.bin_label*** %10, align 8
  %11 = tail call i32 @seg_alloc() #12
  %12 = load %struct.Section*, %struct.Section** @last_section, align 8
  %13 = getelementptr inbounds %struct.Section, %struct.Section* %12, i64 0, i32 10
  store i32 %11, i32* %13, align 8
  %14 = tail call i32 @seg_alloc() #12
  %15 = load %struct.Section*, %struct.Section** @last_section, align 8
  %16 = getelementptr inbounds %struct.Section, %struct.Section* %15, i64 0, i32 11
  store i32 %14, i32* %16, align 4
  ret void
}

declare void @null_reset() #1

declare void @nasm_do_legacy_output(%struct.out_data*) #1

; Function Attrs: nounwind ssp uwtable
define internal void @bin_out(i32, i8*, i32, i64, i32, i32) #0 {
  %7 = alloca i64, align 8
  %8 = alloca i64, align 8
  %9 = alloca i64, align 8
  %10 = bitcast i64* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %10) #12
  %11 = icmp eq i32 %5, -1
  store i64 -6148914691236517206, i64* %7, align 8
  br i1 %11, label %13, label %12

12:                                               ; preds = %6
  tail call void (i8*, ...) @nasm_nonfatal(i8* getelementptr inbounds ([42 x i8], [42 x i8]* @.str.12, i64 0, i64 0)) #12
  br label %13

13:                                               ; preds = %6, %12
  %14 = load %struct.Section*, %struct.Section** @sections, align 8
  %15 = icmp eq %struct.Section* %14, null
  br i1 %15, label %29, label %16

16:                                               ; preds = %13, %25
  %17 = phi %struct.Section* [ %27, %25 ], [ %14, %13 ]
  %18 = getelementptr inbounds %struct.Section, %struct.Section* %17, i64 0, i32 11
  %19 = load i32, i32* %18, align 4
  %20 = icmp eq i32 %19, %0
  br i1 %20, label %30, label %21

21:                                               ; preds = %16
  %22 = getelementptr inbounds %struct.Section, %struct.Section* %17, i64 0, i32 10
  %23 = load i32, i32* %22, align 8
  %24 = icmp eq i32 %23, %0
  br i1 %24, label %30, label %25

25:                                               ; preds = %21
  %26 = getelementptr inbounds %struct.Section, %struct.Section* %17, i64 0, i32 15
  %27 = load %struct.Section*, %struct.Section** %26, align 8
  %28 = icmp eq %struct.Section* %27, null
  br i1 %28, label %29, label %16

29:                                               ; preds = %25, %13
  tail call void (i8*, ...) @nasm_panic(i8* getelementptr inbounds ([38 x i8], [38 x i8]* @.str.13, i64 0, i64 0)) #13
  unreachable

30:                                               ; preds = %21, %16
  %31 = getelementptr inbounds %struct.Section, %struct.Section* %17, i64 0, i32 3
  %32 = load i32, i32* %31, align 8
  %33 = and i32 %32, 64
  %34 = icmp eq i32 %33, 0
  br i1 %34, label %35, label %41

35:                                               ; preds = %30
  %36 = icmp eq i32 %2, 1
  br i1 %36, label %37, label %39

37:                                               ; preds = %35
  %38 = or i32 %32, 320
  store i32 %38, i32* %31, align 8
  br label %118

39:                                               ; preds = %35
  %40 = or i32 %32, 192
  store i32 %40, i32* %31, align 8
  br label %41

41:                                               ; preds = %30, %39
  %42 = phi i32 [ %32, %30 ], [ %40, %39 ]
  %43 = and i32 %42, 256
  %44 = icmp ne i32 %43, 0
  %45 = icmp ne i32 %2, 1
  %46 = and i1 %45, %44
  br i1 %46, label %47, label %48

47:                                               ; preds = %41
  tail call void (i32, i8*, ...) @nasm_warn(i32 2228224, i8* getelementptr inbounds ([58 x i8], [58 x i8]* @.str.14, i64 0, i64 0)) #12
  br label %48

48:                                               ; preds = %47, %41
  switch i32 %2, label %182 [
    i32 3, label %51
    i32 0, label %111
    i32 1, label %49
    i32 6, label %127
    i32 7, label %127
    i32 8, label %127
    i32 9, label %127
  ]

49:                                               ; preds = %48
  %50 = load i32, i32* %31, align 8
  br label %118

51:                                               ; preds = %48
  %52 = trunc i64 %3 to i32
  %53 = icmp slt i32 %52, 0
  %54 = sub nsw i32 0, %52
  %55 = select i1 %53, i32 %54, i32 %52
  %56 = icmp eq i32 %4, -1
  br i1 %56, label %78, label %57

57:                                               ; preds = %51
  %58 = load %struct.Section*, %struct.Section** @sections, align 8
  %59 = icmp eq %struct.Section* %58, null
  br i1 %59, label %73, label %60

60:                                               ; preds = %57, %69
  %61 = phi %struct.Section* [ %71, %69 ], [ %58, %57 ]
  %62 = getelementptr inbounds %struct.Section, %struct.Section* %61, i64 0, i32 11
  %63 = load i32, i32* %62, align 4
  %64 = icmp eq i32 %63, %4
  br i1 %64, label %78, label %65

65:                                               ; preds = %60
  %66 = getelementptr inbounds %struct.Section, %struct.Section* %61, i64 0, i32 10
  %67 = load i32, i32* %66, align 8
  %68 = icmp eq i32 %67, %4
  br i1 %68, label %78, label %69

69:                                               ; preds = %65
  %70 = getelementptr inbounds %struct.Section, %struct.Section* %61, i64 0, i32 15
  %71 = load %struct.Section*, %struct.Section** %70, align 8
  %72 = icmp eq %struct.Section* %71, null
  br i1 %72, label %73, label %60

73:                                               ; preds = %69, %57
  %74 = and i32 %4, 1
  %75 = icmp eq i32 %74, 0
  br i1 %75, label %77, label %76

76:                                               ; preds = %73
  tail call void (i8*, ...) @nasm_nonfatal(i8* getelementptr inbounds ([62 x i8], [62 x i8]* @.str.15, i64 0, i64 0)) #12
  br label %78

77:                                               ; preds = %73
  tail call void (i8*, ...) @nasm_nonfatal(i8* getelementptr inbounds ([58 x i8], [58 x i8]* @.str.16, i64 0, i64 0)) #12
  br label %78

78:                                               ; preds = %65, %60, %76, %77, %51
  %79 = phi i32 [ -1, %51 ], [ -1, %77 ], [ -1, %76 ], [ %4, %60 ], [ %4, %65 ]
  %80 = load i32, i32* %31, align 8
  %81 = trunc i32 %80 to i8
  %82 = icmp slt i8 %81, 0
  br i1 %82, label %85, label %83

83:                                               ; preds = %78
  %84 = zext i32 %55 to i64
  br label %183

85:                                               ; preds = %78
  %86 = icmp eq i32 %79, -1
  br i1 %86, label %104, label %87

87:                                               ; preds = %85
  %88 = tail call noalias i8* @nasm_malloc(i64 32) #11
  %89 = load i8**, i8*** bitcast (%struct.Reloc*** @reloctail to i8***), align 8
  store i8* %88, i8** %89, align 8
  %90 = bitcast i8* %88 to %struct.Reloc**
  store i8* %88, i8** bitcast (%struct.Reloc*** @reloctail to i8**), align 8
  store %struct.Reloc* null, %struct.Reloc** %90, align 8
  %91 = getelementptr inbounds %struct.Section, %struct.Section* %17, i64 0, i32 2
  %92 = load i64, i64* %91, align 8
  %93 = trunc i64 %92 to i32
  %94 = getelementptr inbounds i8, i8* %88, i64 8
  %95 = bitcast i8* %94 to i32*
  store i32 %93, i32* %95, align 8
  %96 = getelementptr inbounds i8, i8* %88, i64 12
  %97 = bitcast i8* %96 to i32*
  store i32 %55, i32* %97, align 4
  %98 = getelementptr inbounds i8, i8* %88, i64 16
  %99 = bitcast i8* %98 to i32*
  store i32 %79, i32* %99, align 8
  %100 = getelementptr inbounds i8, i8* %88, i64 20
  %101 = bitcast i8* %100 to i32*
  store i32 -1, i32* %101, align 4
  %102 = getelementptr inbounds i8, i8* %88, i64 24
  %103 = bitcast i8* %102 to %struct.Section**
  store %struct.Section* %17, %struct.Section** %103, align 8
  br label %104

104:                                              ; preds = %85, %87
  %105 = bitcast i64* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %105)
  %106 = bitcast i8* %1 to i64*
  %107 = load i64, i64* %106, align 8
  store i64 %107, i64* %8, align 8
  %108 = zext i32 %55 to i64
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %10, i8* nonnull align 8 %105, i64 %108, i1 false)
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %105)
  %109 = getelementptr inbounds %struct.Section, %struct.Section* %17, i64 0, i32 1
  %110 = load %struct.SAA*, %struct.SAA** %109, align 8
  call void @saa_wbytes(%struct.SAA* %110, i8* nonnull %10, i64 %108) #12
  br label %183

111:                                              ; preds = %48
  %112 = load i32, i32* %31, align 8
  %113 = trunc i32 %112 to i8
  %114 = icmp slt i8 %113, 0
  br i1 %114, label %115, label %183

115:                                              ; preds = %111
  %116 = getelementptr inbounds %struct.Section, %struct.Section* %17, i64 0, i32 1
  %117 = load %struct.SAA*, %struct.SAA** %116, align 8
  tail call void @saa_wbytes(%struct.SAA* %117, i8* %1, i64 %3) #12
  br label %183

118:                                              ; preds = %49, %37
  %119 = phi i32 [ %50, %49 ], [ %38, %37 ]
  %120 = trunc i32 %119 to i8
  %121 = icmp slt i8 %120, 0
  br i1 %121, label %122, label %183

122:                                              ; preds = %118
  %123 = getelementptr inbounds %struct.Section, %struct.Section* %17, i64 0, i32 0
  %124 = load i8*, i8** %123, align 8
  tail call void (i32, i8*, ...) @nasm_warn(i32 2097152, i8* getelementptr inbounds ([52 x i8], [52 x i8]* @.str.17, i64 0, i64 0), i8* %124) #12
  %125 = getelementptr inbounds %struct.Section, %struct.Section* %17, i64 0, i32 1
  %126 = load %struct.SAA*, %struct.SAA** %125, align 8
  tail call void @saa_wbytes(%struct.SAA* %126, i8* null, i64 %3) #12
  br label %183

127:                                              ; preds = %48, %48, %48, %48
  %128 = bitcast i8* %1 to i64*
  %129 = load i64, i64* %128, align 8
  %130 = sub i64 %129, %3
  %131 = tail call i64 @realsize(i32 %2, i64 %3) #12
  %132 = icmp eq i32 %4, -1
  br i1 %132, label %154, label %133

133:                                              ; preds = %127
  %134 = load %struct.Section*, %struct.Section** @sections, align 8
  %135 = icmp eq %struct.Section* %134, null
  br i1 %135, label %149, label %136

136:                                              ; preds = %133, %145
  %137 = phi %struct.Section* [ %147, %145 ], [ %134, %133 ]
  %138 = getelementptr inbounds %struct.Section, %struct.Section* %137, i64 0, i32 11
  %139 = load i32, i32* %138, align 4
  %140 = icmp eq i32 %139, %4
  br i1 %140, label %154, label %141

141:                                              ; preds = %136
  %142 = getelementptr inbounds %struct.Section, %struct.Section* %137, i64 0, i32 10
  %143 = load i32, i32* %142, align 8
  %144 = icmp eq i32 %143, %4
  br i1 %144, label %154, label %145

145:                                              ; preds = %141
  %146 = getelementptr inbounds %struct.Section, %struct.Section* %137, i64 0, i32 15
  %147 = load %struct.Section*, %struct.Section** %146, align 8
  %148 = icmp eq %struct.Section* %147, null
  br i1 %148, label %149, label %136

149:                                              ; preds = %145, %133
  %150 = and i32 %4, 1
  %151 = icmp eq i32 %150, 0
  br i1 %151, label %153, label %152

152:                                              ; preds = %149
  tail call void (i8*, ...) @nasm_nonfatal(i8* getelementptr inbounds ([62 x i8], [62 x i8]* @.str.15, i64 0, i64 0)) #12
  br label %154

153:                                              ; preds = %149
  tail call void (i8*, ...) @nasm_nonfatal(i8* getelementptr inbounds ([58 x i8], [58 x i8]* @.str.16, i64 0, i64 0)) #12
  br label %154

154:                                              ; preds = %141, %136, %152, %153, %127
  %155 = phi i32 [ -1, %127 ], [ -1, %153 ], [ -1, %152 ], [ %4, %136 ], [ %4, %141 ]
  %156 = load i32, i32* %31, align 8
  %157 = trunc i32 %156 to i8
  %158 = icmp slt i8 %157, 0
  br i1 %158, label %159, label %183

159:                                              ; preds = %154
  %160 = trunc i64 %131 to i32
  %161 = tail call noalias i8* @nasm_malloc(i64 32) #11
  %162 = load i8**, i8*** bitcast (%struct.Reloc*** @reloctail to i8***), align 8
  store i8* %161, i8** %162, align 8
  %163 = bitcast i8* %161 to %struct.Reloc**
  store i8* %161, i8** bitcast (%struct.Reloc*** @reloctail to i8**), align 8
  store %struct.Reloc* null, %struct.Reloc** %163, align 8
  %164 = getelementptr inbounds %struct.Section, %struct.Section* %17, i64 0, i32 2
  %165 = load i64, i64* %164, align 8
  %166 = trunc i64 %165 to i32
  %167 = getelementptr inbounds i8, i8* %161, i64 8
  %168 = bitcast i8* %167 to i32*
  store i32 %166, i32* %168, align 8
  %169 = getelementptr inbounds i8, i8* %161, i64 12
  %170 = bitcast i8* %169 to i32*
  store i32 %160, i32* %170, align 4
  %171 = getelementptr inbounds i8, i8* %161, i64 16
  %172 = bitcast i8* %171 to i32*
  store i32 %155, i32* %172, align 8
  %173 = getelementptr inbounds i8, i8* %161, i64 20
  %174 = bitcast i8* %173 to i32*
  store i32 %0, i32* %174, align 4
  %175 = getelementptr inbounds i8, i8* %161, i64 24
  %176 = bitcast i8* %175 to %struct.Section**
  store %struct.Section* %17, %struct.Section** %176, align 8
  %177 = bitcast i64* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %177)
  %178 = load i64, i64* %164, align 8
  %179 = sub i64 %130, %178
  store i64 %179, i64* %9, align 8
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %10, i8* nonnull align 8 %177, i64 %131, i1 false)
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %177)
  %180 = getelementptr inbounds %struct.Section, %struct.Section* %17, i64 0, i32 1
  %181 = load %struct.SAA*, %struct.SAA** %180, align 8
  call void @saa_wbytes(%struct.SAA* %181, i8* nonnull %10, i64 %131) #12
  br label %183

182:                                              ; preds = %48
  tail call void (i8*, ...) @nasm_nonfatal(i8* getelementptr inbounds ([32 x i8], [32 x i8]* @.str.18, i64 0, i64 0), i32 %2) #12
  br label %183

183:                                              ; preds = %104, %83, %154, %159, %118, %122, %111, %115, %182
  %184 = phi i64 [ %3, %182 ], [ %3, %122 ], [ %3, %118 ], [ %3, %115 ], [ %3, %111 ], [ %131, %159 ], [ %131, %154 ], [ %84, %83 ], [ %108, %104 ]
  %185 = getelementptr inbounds %struct.Section, %struct.Section* %17, i64 0, i32 2
  %186 = load i64, i64* %185, align 8
  %187 = add i64 %186, %184
  store i64 %187, i64* %185, align 8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %10) #12
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @bin_deflabel(i8*, i32, i64, i32, i8* readnone) #0 {
  %6 = icmp eq i8* %4, null
  br i1 %6, label %8, label %7

7:                                                ; preds = %5
  tail call void (i8*, ...) @nasm_nonfatal(i8* getelementptr inbounds ([56 x i8], [56 x i8]* @.str.19, i64 0, i64 0)) #12
  br label %56

8:                                                ; preds = %5
  %9 = load i8, i8* %0, align 1
  %10 = icmp eq i8 %9, 46
  br i1 %10, label %11, label %20

11:                                               ; preds = %8
  %12 = getelementptr inbounds i8, i8* %0, i64 1
  %13 = load i8, i8* %12, align 1
  %14 = icmp eq i8 %13, 46
  br i1 %14, label %15, label %20

15:                                               ; preds = %11
  %16 = getelementptr inbounds i8, i8* %0, i64 2
  %17 = load i8, i8* %16, align 1
  %18 = icmp eq i8 %17, 64
  br i1 %18, label %20, label %19

19:                                               ; preds = %15
  tail call void (i8*, ...) @nasm_nonfatal(i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str.20, i64 0, i64 0), i8* %0) #12
  br label %56

20:                                               ; preds = %15, %11, %8
  %21 = icmp eq i32 %3, 2
  br i1 %21, label %22, label %23

22:                                               ; preds = %20
  tail call void (i8*, ...) @nasm_nonfatal(i8* getelementptr inbounds ([55 x i8], [55 x i8]* @.str.21, i64 0, i64 0)) #12
  br label %56

23:                                               ; preds = %20
  %24 = load %struct.Section*, %struct.Section** @sections, align 8
  %25 = icmp eq %struct.Section* %24, null
  br i1 %25, label %39, label %26

26:                                               ; preds = %23, %35
  %27 = phi %struct.Section* [ %37, %35 ], [ %24, %23 ]
  %28 = getelementptr inbounds %struct.Section, %struct.Section* %27, i64 0, i32 11
  %29 = load i32, i32* %28, align 4
  %30 = icmp eq i32 %29, %1
  br i1 %30, label %39, label %31

31:                                               ; preds = %26
  %32 = getelementptr inbounds %struct.Section, %struct.Section* %27, i64 0, i32 10
  %33 = load i32, i32* %32, align 8
  %34 = icmp eq i32 %33, %1
  br i1 %34, label %39, label %35

35:                                               ; preds = %31
  %36 = getelementptr inbounds %struct.Section, %struct.Section* %27, i64 0, i32 15
  %37 = load %struct.Section*, %struct.Section** %36, align 8
  %38 = icmp eq %struct.Section* %37, null
  br i1 %38, label %39, label %26

39:                                               ; preds = %26, %31, %35, %23
  %40 = phi %struct.Section* [ null, %23 ], [ %27, %31 ], [ %27, %26 ], [ null, %35 ]
  %41 = icmp eq %struct.Section* %40, null
  %42 = getelementptr inbounds %struct.Section, %struct.Section* %40, i64 0, i32 13
  %43 = select i1 %41, %struct.bin_label*** @nsl_tail, %struct.bin_label*** %42
  %44 = tail call noalias i8* @nasm_malloc(i64 16) #11
  %45 = bitcast %struct.bin_label*** %43 to i8***
  %46 = load i8**, i8*** %45, align 8
  store i8* %44, i8** %46, align 8
  %47 = load %struct.bin_label**, %struct.bin_label*** %43, align 8
  %48 = load %struct.bin_label*, %struct.bin_label** %47, align 8
  %49 = getelementptr inbounds %struct.bin_label, %struct.bin_label* %48, i64 0, i32 0
  store i8* %0, i8** %49, align 8
  %50 = load %struct.bin_label**, %struct.bin_label*** %43, align 8
  %51 = load %struct.bin_label*, %struct.bin_label** %50, align 8
  %52 = getelementptr inbounds %struct.bin_label, %struct.bin_label* %51, i64 0, i32 1
  store %struct.bin_label* null, %struct.bin_label** %52, align 8
  %53 = load %struct.bin_label**, %struct.bin_label*** %43, align 8
  %54 = load %struct.bin_label*, %struct.bin_label** %53, align 8
  %55 = getelementptr inbounds %struct.bin_label, %struct.bin_label* %54, i64 0, i32 1
  store %struct.bin_label** %55, %struct.bin_label*** %43, align 8
  br label %56

56:                                               ; preds = %19, %39, %22, %7
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal i32 @bin_secname(i8*, i32* nocapture) #0 {
  %3 = alloca %struct.tokenval, align 8
  %4 = icmp eq i8* %0, null
  br i1 %4, label %5, label %61

5:                                                ; preds = %2
  store i1 false, i1* @origin_defined, align 4
  %6 = load %struct.Section*, %struct.Section** @sections, align 8
  %7 = icmp eq %struct.Section* %6, null
  br i1 %7, label %16, label %8

8:                                                ; preds = %5, %8
  %9 = phi %struct.Section* [ %14, %8 ], [ %6, %5 ]
  %10 = getelementptr inbounds %struct.Section, %struct.Section* %9, i64 0, i32 3
  %11 = load i32, i32* %10, align 8
  %12 = and i32 %11, -28
  store i32 %12, i32* %10, align 8
  %13 = getelementptr inbounds %struct.Section, %struct.Section* %9, i64 0, i32 15
  %14 = load %struct.Section*, %struct.Section** %13, align 8
  %15 = icmp eq %struct.Section* %14, null
  br i1 %15, label %16, label %8

16:                                               ; preds = %8, %5
  %17 = load i32, i32* @_pass_type, align 4
  %18 = icmp ult i32 %17, 3
  br i1 %18, label %43, label %19

19:                                               ; preds = %16
  %20 = load i1, i1* @bin_define_section_labels.labels_defined, align 4
  br i1 %20, label %43, label %21

21:                                               ; preds = %19
  br i1 %7, label %42, label %22

22:                                               ; preds = %21, %22
  %23 = phi %struct.Section* [ %40, %22 ], [ %6, %21 ]
  %24 = getelementptr inbounds %struct.Section, %struct.Section* %23, i64 0, i32 0
  %25 = load i8*, i8** %24, align 8
  %26 = tail call i64 @strlen(i8* %25) #14
  %27 = add i64 %26, 8
  %28 = add i64 %26, 16
  %29 = tail call noalias i8* @nasm_malloc(i64 %28) #11
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %29, i8* align 1 getelementptr inbounds ([9 x i8], [9 x i8]* @.str.24, i64 0, i64 0), i64 9, i1 false) #12
  %30 = getelementptr inbounds i8, i8* %29, i64 8
  %31 = load i8*, i8** %24, align 8
  %32 = tail call i8* @strcpy(i8* %30, i8* %31) #12
  %33 = getelementptr inbounds i8, i8* %29, i64 %27
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %33, i8* align 1 getelementptr inbounds ([7 x i8], [7 x i8]* @.str.25, i64 0, i64 0), i64 7, i1 false) #12
  %34 = getelementptr inbounds %struct.Section, %struct.Section* %23, i64 0, i32 10
  %35 = load i32, i32* %34, align 8
  tail call void @define_label(i8* %29, i32 %35, i64 0, i1 zeroext false) #12
  %36 = bitcast i8* %33 to i64*
  store i64 32776860189554222, i64* %36, align 1
  %37 = getelementptr inbounds %struct.Section, %struct.Section* %23, i64 0, i32 11
  %38 = load i32, i32* %37, align 4
  tail call void @define_label(i8* %29, i32 %38, i64 0, i1 zeroext false) #12
  tail call void @nasm_free(i8* %29) #12
  %39 = getelementptr inbounds %struct.Section, %struct.Section* %23, i64 0, i32 15
  %40 = load %struct.Section*, %struct.Section** %39, align 8
  %41 = icmp eq %struct.Section* %40, null
  br i1 %41, label %42, label %22

42:                                               ; preds = %22, %21
  store i1 true, i1* @bin_define_section_labels.labels_defined, align 4
  br label %43

43:                                               ; preds = %42, %19, %16
  store i32 16, i32* %1, align 4
  %44 = load %struct.Section*, %struct.Section** @sections, align 8
  %45 = icmp eq %struct.Section* %44, null
  br i1 %45, label %56, label %46

46:                                               ; preds = %43, %52
  %47 = phi %struct.Section* [ %54, %52 ], [ %44, %43 ]
  %48 = getelementptr inbounds %struct.Section, %struct.Section* %47, i64 0, i32 0
  %49 = load i8*, i8** %48, align 8
  %50 = tail call i32 @strcmp(i8* %49, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.11, i64 0, i64 0)) #14
  %51 = icmp eq i32 %50, 0
  br i1 %51, label %56, label %52

52:                                               ; preds = %46
  %53 = getelementptr inbounds %struct.Section, %struct.Section* %47, i64 0, i32 15
  %54 = load %struct.Section*, %struct.Section** %53, align 8
  %55 = icmp eq %struct.Section* %54, null
  br i1 %55, label %56, label %46

56:                                               ; preds = %46, %52, %43
  %57 = phi %struct.Section* [ null, %43 ], [ null, %52 ], [ %47, %46 ]
  %58 = getelementptr inbounds %struct.Section, %struct.Section* %57, i64 0, i32 3
  %59 = load i32, i32* %58, align 8
  %60 = or i32 %59, 192
  store i32 %60, i32* %58, align 8
  br label %476

61:                                               ; preds = %2, %65
  %62 = phi i8* [ %71, %65 ], [ %0, %2 ]
  %63 = load i8, i8* %62, align 1
  %64 = icmp eq i8 %63, 0
  br i1 %64, label %73, label %65

65:                                               ; preds = %61
  %66 = zext i8 %63 to i64
  %67 = getelementptr inbounds [256 x i16], [256 x i16]* @nasm_ctype_tab, i64 0, i64 %66
  %68 = load i16, i16* %67, align 2
  %69 = and i16 %68, 2
  %70 = icmp eq i16 %69, 0
  %71 = getelementptr inbounds i8, i8* %62, i64 1
  br i1 %70, label %61, label %72

72:                                               ; preds = %65
  store i8 0, i8* %62, align 1
  br label %73

73:                                               ; preds = %61, %72
  %74 = phi i8* [ %71, %72 ], [ %62, %61 ]
  %75 = load %struct.Section*, %struct.Section** @sections, align 8
  %76 = icmp eq %struct.Section* %75, null
  br i1 %76, label %87, label %77

77:                                               ; preds = %73, %83
  %78 = phi %struct.Section* [ %85, %83 ], [ %75, %73 ]
  %79 = getelementptr inbounds %struct.Section, %struct.Section* %78, i64 0, i32 0
  %80 = load i8*, i8** %79, align 8
  %81 = tail call i32 @strcmp(i8* %80, i8* nonnull %0) #14
  %82 = icmp eq i32 %81, 0
  br i1 %82, label %126, label %83

83:                                               ; preds = %77
  %84 = getelementptr inbounds %struct.Section, %struct.Section* %78, i64 0, i32 15
  %85 = load %struct.Section*, %struct.Section** %84, align 8
  %86 = icmp eq %struct.Section* %85, null
  br i1 %86, label %87, label %77

87:                                               ; preds = %83, %73
  %88 = tail call noalias i8* @nasm_zalloc(i64 120) #11
  %89 = bitcast i8* %88 to %struct.Section*
  %90 = load i64, i64* bitcast (%struct.Section** @last_section to i64*), align 8
  %91 = getelementptr inbounds i8, i8* %88, i64 104
  %92 = bitcast i8* %91 to i64*
  store i64 %90, i64* %92, align 8
  %93 = tail call noalias i8* @nasm_strdup(i8* nonnull %0) #12
  %94 = bitcast i8* %88 to i8**
  store i8* %93, i8** %94, align 8
  %95 = getelementptr inbounds i8, i8* %88, i64 88
  %96 = getelementptr inbounds i8, i8* %88, i64 96
  %97 = bitcast i8* %96 to i8**
  store i8* %95, i8** %97, align 8
  %98 = tail call %struct.SAA* @saa_init(i64 1) #12
  %99 = getelementptr inbounds i8, i8* %88, i64 8
  %100 = bitcast i8* %99 to %struct.SAA**
  store %struct.SAA* %98, %struct.SAA** %100, align 8
  %101 = tail call i32 @seg_alloc() #12
  %102 = getelementptr inbounds i8, i8* %88, i64 84
  %103 = bitcast i8* %102 to i32*
  store i32 %101, i32* %103, align 4
  %104 = tail call i32 @seg_alloc() #12
  %105 = getelementptr inbounds i8, i8* %88, i64 80
  %106 = bitcast i8* %105 to i32*
  store i32 %104, i32* %106, align 8
  %107 = load %struct.Section*, %struct.Section** @last_section, align 8
  %108 = getelementptr inbounds %struct.Section, %struct.Section* %107, i64 0, i32 15
  %109 = bitcast %struct.Section** %108 to i8**
  store i8* %88, i8** %109, align 8
  store i8* %88, i8** bitcast (%struct.Section** @last_section to i8**), align 8
  %110 = tail call i32 @strcmp(i8* nonnull %0, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.22, i64 0, i64 0)) #14
  %111 = icmp eq i32 %110, 0
  br i1 %111, label %112, label %117

112:                                              ; preds = %87
  %113 = getelementptr inbounds i8, i8* %88, i64 24
  %114 = bitcast i8* %113 to i32*
  %115 = load i32, i32* %114, align 8
  %116 = or i32 %115, 192
  store i32 %116, i32* %114, align 8
  br label %126

117:                                              ; preds = %87
  %118 = tail call i32 @strcmp(i8* nonnull %0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.23, i64 0, i64 0)) #14
  %119 = icmp eq i32 %118, 0
  br i1 %119, label %120, label %126

120:                                              ; preds = %117
  %121 = getelementptr inbounds i8, i8* %88, i64 24
  %122 = bitcast i8* %121 to i32*
  %123 = load i32, i32* %122, align 8
  %124 = or i32 %123, 320
  store i32 %124, i32* %122, align 8
  %125 = bitcast i8* %91 to %struct.Section**
  store %struct.Section* null, %struct.Section** %125, align 8
  br label %126

126:                                              ; preds = %77, %117, %112, %120
  %127 = phi %struct.Section* [ %89, %117 ], [ %89, %120 ], [ %89, %112 ], [ %78, %77 ]
  %128 = load i32, i32* @_pass_type, align 4
  %129 = icmp ult i32 %128, 3
  br i1 %129, label %476, label %130

130:                                              ; preds = %126
  %131 = bitcast %struct.tokenval* %3 to i8*
  %132 = getelementptr inbounds %struct.tokenval, %struct.tokenval* %3, i64 0, i32 3
  %133 = getelementptr inbounds %struct.Section, %struct.Section* %127, i64 0, i32 3
  %134 = getelementptr inbounds %struct.Section, %struct.Section* %127, i64 0, i32 9
  %135 = getelementptr inbounds %struct.Section, %struct.Section* %127, i64 0, i32 8
  %136 = getelementptr inbounds %struct.Section, %struct.Section* %127, i64 0, i32 7
  %137 = getelementptr inbounds %struct.Section, %struct.Section* %127, i64 0, i32 5
  %138 = getelementptr inbounds %struct.Section, %struct.Section* %127, i64 0, i32 6
  %139 = getelementptr inbounds %struct.Section, %struct.Section* %127, i64 0, i32 4
  br label %141

140:                                              ; preds = %315
  unreachable

141:                                              ; preds = %465, %130
  %142 = phi i8* [ %74, %130 ], [ %466, %465 ]
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %131) #12
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %131, i8 -86, i64 32, i1 false) #12
  %143 = load i8, i8* %142, align 1
  %144 = icmp eq i8 %143, 0
  br i1 %144, label %295, label %145

145:                                              ; preds = %141, %153
  %146 = phi i8* [ %154, %153 ], [ %142, %141 ]
  %147 = phi i8 [ %155, %153 ], [ %143, %141 ]
  %148 = zext i8 %147 to i64
  %149 = getelementptr inbounds [256 x i16], [256 x i16]* @nasm_ctype_tab, i64 0, i64 %148
  %150 = load i16, i16* %149, align 2
  %151 = and i16 %150, 2
  %152 = icmp eq i16 %151, 0
  br i1 %152, label %157, label %153

153:                                              ; preds = %145
  %154 = getelementptr inbounds i8, i8* %146, i64 1
  %155 = load i8, i8* %154, align 1
  %156 = icmp eq i8 %155, 0
  br i1 %156, label %295, label %145

157:                                              ; preds = %145
  %158 = call i32 @strncasecmp(i8* %146, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.43, i64 0, i64 0), i64 6) #14
  %159 = icmp eq i32 %158, 0
  br i1 %159, label %207, label %160

160:                                              ; preds = %157
  %161 = call i32 @strncasecmp(i8* %146, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.44, i64 0, i64 0), i64 6) #14
  %162 = icmp eq i32 %161, 0
  br i1 %162, label %207, label %163

163:                                              ; preds = %160
  %164 = call i32 @strncasecmp(i8* %146, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.45, i64 0, i64 0), i64 8) #14
  %165 = icmp eq i32 %164, 0
  br i1 %165, label %166, label %168

166:                                              ; preds = %163
  %167 = getelementptr inbounds i8, i8* %146, i64 8
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %131) #12
  br label %433

168:                                              ; preds = %163
  %169 = call i32 @strncasecmp(i8* %146, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.46, i64 0, i64 0), i64 7) #14
  %170 = icmp eq i32 %169, 0
  br i1 %170, label %207, label %171

171:                                              ; preds = %168
  %172 = call i32 @strncasecmp(i8* %146, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.47, i64 0, i64 0), i64 7) #14
  %173 = icmp eq i32 %172, 0
  br i1 %173, label %207, label %174

174:                                              ; preds = %171
  %175 = call i32 @strncasecmp(i8* %146, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.48, i64 0, i64 0), i64 9) #14
  %176 = icmp eq i32 %175, 0
  br i1 %176, label %177, label %179

177:                                              ; preds = %174
  %178 = getelementptr inbounds i8, i8* %146, i64 9
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %131) #12
  br label %449

179:                                              ; preds = %174
  %180 = call i32 @strncasecmp(i8* %146, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.49, i64 0, i64 0), i64 6) #14
  %181 = icmp eq i32 %180, 0
  br i1 %181, label %182, label %193

182:                                              ; preds = %179
  %183 = getelementptr inbounds i8, i8* %146, i64 6
  %184 = load i8, i8* %183, align 1
  %185 = zext i8 %184 to i64
  %186 = getelementptr inbounds [256 x i16], [256 x i16]* @nasm_ctype_tab, i64 0, i64 %185
  %187 = load i16, i16* %186, align 2
  %188 = and i16 %187, 2
  %189 = icmp ne i16 %188, 0
  %190 = icmp eq i8 %184, 0
  %191 = or i1 %190, %189
  br i1 %191, label %192, label %193

192:                                              ; preds = %182
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %131) #12
  br label %317

193:                                              ; preds = %182, %179
  %194 = call i32 @strncasecmp(i8* %146, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.50, i64 0, i64 0), i64 8) #14
  %195 = icmp eq i32 %194, 0
  br i1 %195, label %196, label %295

196:                                              ; preds = %193
  %197 = getelementptr inbounds i8, i8* %146, i64 8
  %198 = load i8, i8* %197, align 1
  %199 = zext i8 %198 to i64
  %200 = getelementptr inbounds [256 x i16], [256 x i16]* @nasm_ctype_tab, i64 0, i64 %199
  %201 = load i16, i16* %200, align 2
  %202 = and i16 %201, 2
  %203 = icmp ne i16 %202, 0
  %204 = icmp eq i8 %198, 0
  %205 = or i1 %204, %203
  br i1 %205, label %206, label %295

206:                                              ; preds = %196
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %131) #12
  br label %325

207:                                              ; preds = %171, %168, %160, %157
  %208 = phi i32 [ 1, %157 ], [ 0, %160 ], [ 3, %168 ], [ 4, %171 ]
  %209 = phi i32 [ 6, %157 ], [ 6, %160 ], [ 7, %168 ], [ 7, %171 ]
  %210 = zext i32 %209 to i64
  %211 = getelementptr inbounds i8, i8* %146, i64 %210
  %212 = load i8, i8* %211, align 1
  switch i8 %212, label %213 [
    i8 40, label %227
    i8 0, label %284
  ]

213:                                              ; preds = %207, %221
  %214 = phi i8* [ %222, %221 ], [ %211, %207 ]
  %215 = phi i8 [ %223, %221 ], [ %212, %207 ]
  %216 = zext i8 %215 to i64
  %217 = getelementptr inbounds [256 x i16], [256 x i16]* @nasm_ctype_tab, i64 0, i64 %216
  %218 = load i16, i16* %217, align 2
  %219 = and i16 %218, 2
  %220 = icmp eq i16 %219, 0
  br i1 %220, label %221, label %225

221:                                              ; preds = %213
  %222 = getelementptr inbounds i8, i8* %214, i64 1
  %223 = load i8, i8* %222, align 1
  %224 = icmp eq i8 %223, 0
  br i1 %224, label %279, label %213

225:                                              ; preds = %213
  store i8 0, i8* %214, align 1
  %226 = getelementptr inbounds i8, i8* %214, i64 1
  br label %279

227:                                              ; preds = %207
  %228 = add nuw nsw i32 %209, 1
  %229 = zext i32 %228 to i64
  %230 = getelementptr inbounds i8, i8* %146, i64 %229
  br label %231

231:                                              ; preds = %273, %227
  %232 = phi i8* [ %230, %227 ], [ %274, %273 ]
  %233 = phi i32 [ 1, %227 ], [ %256, %273 ]
  %234 = call i64 @strcspn(i8* %232, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.51, i64 0, i64 0)) #14
  %235 = getelementptr inbounds i8, i8* %232, i64 %234
  %236 = load i8, i8* %235, align 1
  %237 = icmp eq i8 %236, 40
  br i1 %237, label %238, label %242

238:                                              ; preds = %231
  %239 = getelementptr inbounds i8, i8* %235, i64 1
  %240 = add nsw i32 %233, 1
  %241 = load i8, i8* %239, align 1
  br label %242

242:                                              ; preds = %238, %231
  %243 = phi i8* [ %239, %238 ], [ %235, %231 ]
  %244 = phi i8 [ %241, %238 ], [ %236, %231 ]
  %245 = phi i32 [ %240, %238 ], [ %233, %231 ]
  %246 = icmp eq i8 %244, 41
  br i1 %246, label %247, label %253

247:                                              ; preds = %242
  %248 = getelementptr inbounds i8, i8* %243, i64 1
  %249 = add nsw i32 %245, -1
  %250 = icmp eq i32 %249, 0
  br i1 %250, label %278, label %251

251:                                              ; preds = %247
  %252 = load i8, i8* %248, align 1
  br label %253

253:                                              ; preds = %251, %242
  %254 = phi i8* [ %248, %251 ], [ %243, %242 ]
  %255 = phi i8 [ %252, %251 ], [ %244, %242 ]
  %256 = phi i32 [ %249, %251 ], [ %245, %242 ]
  switch i8 %255, label %273 [
    i8 34, label %257
    i8 39, label %257
  ]

257:                                              ; preds = %253, %253
  br label %258

258:                                              ; preds = %257, %262
  %259 = phi i8* [ %263, %262 ], [ %254, %257 ]
  %260 = phi i8 [ %264, %262 ], [ %255, %257 ]
  %261 = icmp eq i8 %260, 0
  br i1 %261, label %268, label %262

262:                                              ; preds = %258
  %263 = getelementptr inbounds i8, i8* %259, i64 1
  %264 = load i8, i8* %263, align 1
  %265 = icmp eq i8 %264, %255
  br i1 %265, label %266, label %258

266:                                              ; preds = %262
  %267 = icmp eq i8 %255, 0
  br i1 %267, label %268, label %270

268:                                              ; preds = %266, %258
  %269 = phi i8* [ %259, %258 ], [ %263, %266 ]
  call void (i8*, ...) @nasm_nonfatal(i8* getelementptr inbounds ([38 x i8], [38 x i8]* @.str.52, i64 0, i64 0)) #12
  br label %293

270:                                              ; preds = %266
  %271 = getelementptr inbounds i8, i8* %259, i64 2
  %272 = load i8, i8* %271, align 1
  br label %273

273:                                              ; preds = %270, %253
  %274 = phi i8* [ %254, %253 ], [ %271, %270 ]
  %275 = phi i8 [ %255, %253 ], [ %272, %270 ]
  %276 = icmp eq i8 %275, 0
  br i1 %276, label %277, label %231

277:                                              ; preds = %273
  call void (i8*, ...) @nasm_nonfatal(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.53, i64 0, i64 0)) #12
  br label %293

278:                                              ; preds = %247
  store i8 0, i8* %243, align 1
  br label %279

279:                                              ; preds = %221, %278, %225
  %280 = phi i8* [ %248, %278 ], [ %226, %225 ], [ %222, %221 ]
  %281 = phi i8* [ %230, %278 ], [ %211, %225 ], [ %211, %221 ]
  %282 = load i8, i8* %281, align 1
  %283 = icmp eq i8 %282, 0
  br i1 %283, label %284, label %286

284:                                              ; preds = %279, %207
  %285 = phi i8* [ %280, %279 ], [ %211, %207 ]
  call void (i32, i8*, ...) @nasm_warn(i32 2228224, i8* getelementptr inbounds ([51 x i8], [51 x i8]* @.str.54, i64 0, i64 0)) #12
  br label %293

286:                                              ; preds = %279
  call void @stdscan_reset() #12
  call void @stdscan_set(i8* %281) #12
  store i32 -1, i32* %132, align 8
  %287 = call %struct.expr* @evaluate(i32 (i8*, %struct.tokenval*)* nonnull @stdscan, i8* null, %struct.tokenval* nonnull %3, i32* null, i1 zeroext true, %struct.eval_hints* null) #12
  %288 = icmp eq %struct.expr* %287, null
  br i1 %288, label %292, label %289

289:                                              ; preds = %286
  %290 = call zeroext i1 @is_really_simple(%struct.expr* nonnull %287) #12
  br i1 %290, label %315, label %291

291:                                              ; preds = %289
  call void (i8*, ...) @nasm_nonfatal(i8* getelementptr inbounds ([54 x i8], [54 x i8]* @.str.55, i64 0, i64 0)) #12
  br label %293

292:                                              ; preds = %286
  call void (i8*, ...) @nasm_nonfatal(i8* getelementptr inbounds ([58 x i8], [58 x i8]* @.str.56, i64 0, i64 0)) #12
  br label %293

293:                                              ; preds = %292, %291, %284, %277, %268
  %294 = phi i8* [ %285, %284 ], [ %280, %292 ], [ %280, %291 ], [ %274, %277 ], [ %269, %268 ]
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %131) #12
  br label %465

295:                                              ; preds = %153, %196, %193, %141
  %296 = phi i8* [ %146, %193 ], [ %146, %196 ], [ %142, %141 ], [ %154, %153 ]
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %131) #12
  %297 = load i8, i8* %296, align 1
  %298 = icmp eq i8 %297, 0
  br i1 %298, label %467, label %299

299:                                              ; preds = %295, %307
  %300 = phi i8* [ %308, %307 ], [ %296, %295 ]
  %301 = phi i8 [ %309, %307 ], [ %297, %295 ]
  %302 = zext i8 %301 to i64
  %303 = getelementptr inbounds [256 x i16], [256 x i16]* @nasm_ctype_tab, i64 0, i64 %302
  %304 = load i16, i16* %303, align 2
  %305 = and i16 %304, 2
  %306 = icmp eq i16 %305, 0
  br i1 %306, label %307, label %311

307:                                              ; preds = %299
  %308 = getelementptr inbounds i8, i8* %300, i64 1
  %309 = load i8, i8* %308, align 1
  %310 = icmp eq i8 %309, 0
  br i1 %310, label %313, label %299

311:                                              ; preds = %299
  store i8 0, i8* %300, align 1
  %312 = getelementptr inbounds i8, i8* %300, i64 1
  br label %313

313:                                              ; preds = %307, %311
  %314 = phi i8* [ %312, %311 ], [ %308, %307 ]
  call void (i32, i8*, ...) @nasm_warn(i32 2228224, i8* getelementptr inbounds ([41 x i8], [41 x i8]* @.str.27, i64 0, i64 0), i8* %296) #12
  br label %465

315:                                              ; preds = %289
  %316 = call i64 @reloc_value(%struct.expr* nonnull %287) #12
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %131) #12
  switch i32 %208, label %140 [
    i32 6, label %317
    i32 7, label %325
    i32 1, label %333
    i32 4, label %357
    i32 0, label %381
    i32 3, label %407
    i32 2, label %433
    i32 5, label %449
  ]

317:                                              ; preds = %315, %192
  %318 = phi i8* [ %183, %192 ], [ %280, %315 ]
  %319 = load i32, i32* %133, align 8
  %320 = and i32 %319, 192
  %321 = icmp eq i32 %320, 192
  br i1 %321, label %322, label %323

322:                                              ; preds = %317
  call void (i8*, ...) @nasm_nonfatal(i8* getelementptr inbounds ([55 x i8], [55 x i8]* @.str.28, i64 0, i64 0)) #12
  br label %465

323:                                              ; preds = %317
  %324 = or i32 %319, 320
  store i32 %324, i32* %133, align 8
  br label %465

325:                                              ; preds = %315, %206
  %326 = phi i8* [ %197, %206 ], [ %280, %315 ]
  %327 = load i32, i32* %133, align 8
  %328 = and i32 %327, 320
  %329 = icmp eq i32 %328, 320
  br i1 %329, label %330, label %331

330:                                              ; preds = %325
  call void (i8*, ...) @nasm_nonfatal(i8* getelementptr inbounds ([55 x i8], [55 x i8]* @.str.29, i64 0, i64 0)) #12
  br label %465

331:                                              ; preds = %325
  %332 = or i32 %327, 192
  store i32 %332, i32* %133, align 8
  br label %465

333:                                              ; preds = %315
  %334 = call i64 @llvm.ctpop.i64(i64 %316) #12, !range !2
  %335 = icmp eq i64 %334, 1
  br i1 %335, label %337, label %336

336:                                              ; preds = %333
  call void (i8*, ...) @nasm_nonfatal(i8* getelementptr inbounds ([42 x i8], [42 x i8]* @.str.30, i64 0, i64 0)) #12
  br label %465

337:                                              ; preds = %333
  %338 = load i32, i32* %133, align 8
  %339 = and i32 %338, 2
  %340 = icmp eq i32 %339, 0
  br i1 %340, label %345, label %341

341:                                              ; preds = %337
  %342 = load i64, i64* %139, align 8
  %343 = icmp ult i64 %316, %342
  %344 = select i1 %343, i64 %342, i64 %316
  br label %345

345:                                              ; preds = %341, %337
  %346 = phi i64 [ %316, %337 ], [ %344, %341 ]
  %347 = and i32 %338, 1
  %348 = icmp eq i32 %347, 0
  br i1 %348, label %355, label %349

349:                                              ; preds = %345
  %350 = load i64, i64* %138, align 8
  %351 = add i64 %346, -1
  %352 = and i64 %350, %351
  %353 = icmp eq i64 %352, 0
  br i1 %353, label %355, label %354

354:                                              ; preds = %349
  call void (i8*, ...) @nasm_nonfatal(i8* getelementptr inbounds ([51 x i8], [51 x i8]* @.str.31, i64 0, i64 0)) #12
  br label %465

355:                                              ; preds = %349, %345
  store i64 %346, i64* %139, align 8
  %356 = or i32 %338, 2
  store i32 %356, i32* %133, align 8
  br label %465

357:                                              ; preds = %315
  %358 = call i64 @llvm.ctpop.i64(i64 %316) #12, !range !2
  %359 = icmp eq i64 %358, 1
  br i1 %359, label %361, label %360

360:                                              ; preds = %357
  call void (i8*, ...) @nasm_nonfatal(i8* getelementptr inbounds ([43 x i8], [43 x i8]* @.str.32, i64 0, i64 0)) #12
  br label %465

361:                                              ; preds = %357
  %362 = load i32, i32* %133, align 8
  %363 = and i32 %362, 16
  %364 = icmp eq i32 %363, 0
  br i1 %364, label %369, label %365

365:                                              ; preds = %361
  %366 = load i64, i64* %137, align 8
  %367 = icmp ult i64 %316, %366
  %368 = select i1 %367, i64 %366, i64 %316
  br label %369

369:                                              ; preds = %365, %361
  %370 = phi i64 [ %316, %361 ], [ %368, %365 ]
  %371 = and i32 %362, 8
  %372 = icmp eq i32 %371, 0
  br i1 %372, label %379, label %373

373:                                              ; preds = %369
  %374 = load i64, i64* %136, align 8
  %375 = add i64 %370, -1
  %376 = and i64 %374, %375
  %377 = icmp eq i64 %376, 0
  br i1 %377, label %379, label %378

378:                                              ; preds = %373
  call void (i8*, ...) @nasm_nonfatal(i8* getelementptr inbounds ([47 x i8], [47 x i8]* @.str.33, i64 0, i64 0)) #12
  br label %465

379:                                              ; preds = %373, %369
  store i64 %370, i64* %137, align 8
  %380 = or i32 %362, 16
  store i32 %380, i32* %133, align 8
  br label %465

381:                                              ; preds = %315
  %382 = load i32, i32* %133, align 8
  %383 = and i32 %382, 4
  %384 = icmp eq i32 %383, 0
  br i1 %384, label %386, label %385

385:                                              ; preds = %381
  call void (i8*, ...) @nasm_nonfatal(i8* getelementptr inbounds ([56 x i8], [56 x i8]* @.str.34, i64 0, i64 0)) #12
  br label %465

386:                                              ; preds = %381
  %387 = and i32 %382, 1
  %388 = icmp eq i32 %387, 0
  br i1 %388, label %393, label %389

389:                                              ; preds = %386
  %390 = load i64, i64* %138, align 8
  %391 = icmp eq i64 %316, %390
  br i1 %391, label %393, label %392

392:                                              ; preds = %389
  call void (i8*, ...) @nasm_nonfatal(i8* getelementptr inbounds ([32 x i8], [32 x i8]* @.str.35, i64 0, i64 0)) #12
  br label %465

393:                                              ; preds = %389, %386
  store i64 %316, i64* %138, align 8
  %394 = or i32 %382, 1
  store i32 %394, i32* %133, align 8
  %395 = and i32 %382, 2
  %396 = icmp eq i32 %395, 0
  br i1 %396, label %465, label %397

397:                                              ; preds = %393
  %398 = load i64, i64* %139, align 8
  %399 = add i64 %398, -1
  %400 = and i64 %399, %316
  %401 = icmp eq i64 %400, 0
  br i1 %401, label %404, label %402

402:                                              ; preds = %397
  call void (i8*, ...) @nasm_nonfatal(i8* getelementptr inbounds ([49 x i8], [49 x i8]* @.str.36, i64 0, i64 0)) #12
  %403 = load i32, i32* %133, align 8
  br label %404

404:                                              ; preds = %402, %397
  %405 = phi i32 [ %394, %397 ], [ %403, %402 ]
  %406 = xor i32 %405, 2
  store i32 %406, i32* %133, align 8
  br label %465

407:                                              ; preds = %315
  %408 = load i32, i32* %133, align 8
  %409 = and i32 %408, 32
  %410 = icmp eq i32 %409, 0
  br i1 %410, label %412, label %411

411:                                              ; preds = %407
  call void (i8*, ...) @nasm_nonfatal(i8* getelementptr inbounds ([58 x i8], [58 x i8]* @.str.37, i64 0, i64 0)) #12
  br label %465

412:                                              ; preds = %407
  %413 = and i32 %408, 8
  %414 = icmp eq i32 %413, 0
  br i1 %414, label %419, label %415

415:                                              ; preds = %412
  %416 = load i64, i64* %136, align 8
  %417 = icmp eq i64 %316, %416
  br i1 %417, label %419, label %418

418:                                              ; preds = %415
  call void (i8*, ...) @nasm_nonfatal(i8* getelementptr inbounds ([49 x i8], [49 x i8]* @.str.38, i64 0, i64 0)) #12
  br label %465

419:                                              ; preds = %415, %412
  store i64 %316, i64* %136, align 8
  %420 = or i32 %408, 8
  store i32 %420, i32* %133, align 8
  %421 = and i32 %408, 16
  %422 = icmp eq i32 %421, 0
  br i1 %422, label %465, label %423

423:                                              ; preds = %419
  %424 = load i64, i64* %137, align 8
  %425 = add i64 %424, -1
  %426 = and i64 %425, %316
  %427 = icmp eq i64 %426, 0
  br i1 %427, label %430, label %428

428:                                              ; preds = %423
  call void (i8*, ...) @nasm_nonfatal(i8* getelementptr inbounds ([47 x i8], [47 x i8]* @.str.39, i64 0, i64 0)) #12
  %429 = load i32, i32* %133, align 8
  br label %430

430:                                              ; preds = %428, %423
  %431 = phi i32 [ %420, %423 ], [ %429, %428 ]
  %432 = xor i32 %431, 16
  store i32 %432, i32* %133, align 8
  br label %465

433:                                              ; preds = %315, %166
  %434 = phi i8* [ %167, %166 ], [ %280, %315 ]
  %435 = call i64 @strcspn(i8* %434, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.40, i64 0, i64 0)) #14
  %436 = getelementptr inbounds i8, i8* %434, i64 %435
  %437 = icmp eq i64 %435, 0
  br i1 %437, label %438, label %439

438:                                              ; preds = %433
  call void (i8*, ...) @nasm_nonfatal(i8* getelementptr inbounds ([47 x i8], [47 x i8]* @.str.41, i64 0, i64 0)) #12
  br label %465

439:                                              ; preds = %433
  %440 = getelementptr inbounds i8, i8* %436, i64 1
  store i8 0, i8* %436, align 1
  %441 = load i32, i32* %133, align 8
  %442 = and i32 %441, 1
  %443 = icmp eq i32 %442, 0
  br i1 %443, label %445, label %444

444:                                              ; preds = %439
  call void (i8*, ...) @nasm_nonfatal(i8* getelementptr inbounds ([56 x i8], [56 x i8]* @.str.34, i64 0, i64 0)) #12
  br label %445

445:                                              ; preds = %444, %439
  %446 = call noalias i8* @nasm_strdup(i8* %434) #12
  store i8* %446, i8** %135, align 8
  %447 = load i32, i32* %133, align 8
  %448 = or i32 %447, 4
  store i32 %448, i32* %133, align 8
  br label %465

449:                                              ; preds = %315, %177
  %450 = phi i8* [ %178, %177 ], [ %280, %315 ]
  %451 = load i32, i32* %133, align 8
  %452 = and i32 %451, 8
  %453 = icmp eq i32 %452, 0
  br i1 %453, label %455, label %454

454:                                              ; preds = %449
  call void (i8*, ...) @nasm_nonfatal(i8* getelementptr inbounds ([58 x i8], [58 x i8]* @.str.37, i64 0, i64 0)) #12
  br label %465

455:                                              ; preds = %449
  %456 = call i64 @strcspn(i8* %450, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.40, i64 0, i64 0)) #14
  %457 = getelementptr inbounds i8, i8* %450, i64 %456
  %458 = icmp eq i64 %456, 0
  br i1 %458, label %459, label %460

459:                                              ; preds = %455
  call void (i8*, ...) @nasm_nonfatal(i8* getelementptr inbounds ([48 x i8], [48 x i8]* @.str.42, i64 0, i64 0)) #12
  br label %465

460:                                              ; preds = %455
  %461 = getelementptr inbounds i8, i8* %457, i64 1
  store i8 0, i8* %457, align 1
  %462 = call noalias i8* @nasm_strdup(i8* %450) #12
  store i8* %462, i8** %134, align 8
  %463 = load i32, i32* %133, align 8
  %464 = or i32 %463, 32
  store i32 %464, i32* %133, align 8
  br label %465

465:                                              ; preds = %460, %459, %454, %445, %438, %430, %419, %418, %411, %404, %393, %392, %385, %379, %378, %360, %355, %354, %336, %331, %330, %323, %322, %313, %293
  %466 = phi i8* [ %314, %313 ], [ %294, %293 ], [ %318, %323 ], [ %318, %322 ], [ %326, %331 ], [ %326, %330 ], [ %280, %354 ], [ %280, %355 ], [ %280, %336 ], [ %280, %378 ], [ %280, %379 ], [ %280, %360 ], [ %280, %393 ], [ %280, %392 ], [ %280, %404 ], [ %280, %385 ], [ %280, %419 ], [ %280, %418 ], [ %280, %430 ], [ %280, %411 ], [ %436, %438 ], [ %440, %445 ], [ %457, %459 ], [ %461, %460 ], [ %450, %454 ]
  br label %141

467:                                              ; preds = %295
  %468 = load i32, i32* @_pass_type, align 4
  %469 = icmp ult i32 %468, 3
  br i1 %469, label %476, label %470

470:                                              ; preds = %467
  %471 = load i32, i32* %133, align 8
  %472 = and i32 %471, 64
  %473 = icmp eq i32 %472, 0
  br i1 %473, label %474, label %476

474:                                              ; preds = %470
  %475 = or i32 %471, 192
  store i32 %475, i32* %133, align 8
  br label %476

476:                                              ; preds = %126, %467, %474, %470, %56
  %477 = phi %struct.Section* [ %57, %56 ], [ %127, %470 ], [ %127, %474 ], [ %127, %467 ], [ %127, %126 ]
  %478 = getelementptr inbounds %struct.Section, %struct.Section* %477, i64 0, i32 11
  %479 = load i32, i32* %478, align 4
  ret i32 %479
}

; Function Attrs: nofree nounwind ssp uwtable
define internal void @bin_sectalign(i32, i32) #2 {
  %3 = load %struct.Section*, %struct.Section** @sections, align 8
  %4 = icmp eq %struct.Section* %3, null
  br i1 %4, label %34, label %5

5:                                                ; preds = %2, %14
  %6 = phi %struct.Section* [ %16, %14 ], [ %3, %2 ]
  %7 = getelementptr inbounds %struct.Section, %struct.Section* %6, i64 0, i32 11
  %8 = load i32, i32* %7, align 4
  %9 = icmp eq i32 %8, %0
  br i1 %9, label %18, label %10

10:                                               ; preds = %5
  %11 = getelementptr inbounds %struct.Section, %struct.Section* %6, i64 0, i32 10
  %12 = load i32, i32* %11, align 8
  %13 = icmp eq i32 %12, %0
  br i1 %13, label %18, label %14

14:                                               ; preds = %10
  %15 = getelementptr inbounds %struct.Section, %struct.Section* %6, i64 0, i32 15
  %16 = load %struct.Section*, %struct.Section** %15, align 8
  %17 = icmp eq %struct.Section* %16, null
  br i1 %17, label %34, label %5

18:                                               ; preds = %5, %10
  %19 = tail call i32 @llvm.ctpop.i32(i32 %1), !range !3
  %20 = icmp eq i32 %19, 1
  br i1 %20, label %21, label %34

21:                                               ; preds = %18
  %22 = zext i32 %1 to i64
  %23 = getelementptr inbounds %struct.Section, %struct.Section* %6, i64 0, i32 4
  %24 = load i64, i64* %23, align 8
  %25 = icmp ult i64 %24, %22
  br i1 %25, label %26, label %27

26:                                               ; preds = %21
  store i64 %22, i64* %23, align 8
  br label %27

27:                                               ; preds = %26, %21
  %28 = getelementptr inbounds %struct.Section, %struct.Section* %6, i64 0, i32 3
  %29 = load i32, i32* %28, align 8
  %30 = and i32 %29, 2
  %31 = icmp eq i32 %30, 0
  br i1 %31, label %32, label %34

32:                                               ; preds = %27
  %33 = or i32 %29, 2
  store i32 %33, i32* %28, align 8
  br label %34

34:                                               ; preds = %14, %2, %32, %27, %18
  ret void
}

declare i32 @null_segbase(i32) #1

; Function Attrs: nounwind ssp uwtable
define internal i32 @bin_directive(i32, i8*) #0 {
  %3 = alloca %struct.tokenval, align 8
  switch i32 %0, label %100 [
    i32 26, label %4
    i32 24, label %23
  ]

4:                                                ; preds = %2
  %5 = bitcast %struct.tokenval* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %5) #12
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %5, i8 -86, i64 32, i1 false)
  tail call void @stdscan_reset() #12
  tail call void @stdscan_set(i8* %1) #12
  %6 = getelementptr inbounds %struct.tokenval, %struct.tokenval* %3, i64 0, i32 3
  store i32 -1, i32* %6, align 8
  %7 = call %struct.expr* @evaluate(i32 (i8*, %struct.tokenval*)* nonnull @stdscan, i8* null, %struct.tokenval* nonnull %3, i32* null, i1 zeroext true, %struct.eval_hints* null) #12
  %8 = icmp eq %struct.expr* %7, null
  br i1 %8, label %21, label %9

9:                                                ; preds = %4
  %10 = call zeroext i1 @is_really_simple(%struct.expr* nonnull %7) #12
  br i1 %10, label %12, label %11

11:                                               ; preds = %9
  call void (i8*, ...) @nasm_nonfatal(i8* getelementptr inbounds ([40 x i8], [40 x i8]* @.str.57, i64 0, i64 0)) #12
  br label %22

12:                                               ; preds = %9
  %13 = call i64 @reloc_value(%struct.expr* nonnull %7) #12
  %14 = load i1, i1* @origin_defined, align 4
  %15 = xor i1 %14, true
  %16 = load i64, i64* @origin, align 8
  %17 = icmp eq i64 %13, %16
  %18 = or i1 %17, %15
  br i1 %18, label %20, label %19

19:                                               ; preds = %12
  call void (i8*, ...) @nasm_nonfatal(i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.58, i64 0, i64 0)) #12
  br label %22

20:                                               ; preds = %12
  store i64 %13, i64* @origin, align 8
  store i1 true, i1* @origin_defined, align 4
  br label %22

21:                                               ; preds = %4
  call void (i8*, ...) @nasm_nonfatal(i8* getelementptr inbounds ([49 x i8], [49 x i8]* @.str.59, i64 0, i64 0)) #12
  br label %22

22:                                               ; preds = %11, %20, %19, %21
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %5) #12
  br label %100

23:                                               ; preds = %2
  %24 = load i32, i32* @_pass_type, align 4
  %25 = icmp ult i32 %24, 3
  br i1 %25, label %26, label %100

26:                                               ; preds = %23
  %27 = tail call i64 @strspn(i8* %1, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.40, i64 0, i64 0)) #14
  %28 = getelementptr inbounds i8, i8* %1, i64 %27
  %29 = load i8, i8* %28, align 1
  %30 = icmp eq i8 %29, 0
  br i1 %30, label %91, label %31

31:                                               ; preds = %26, %88
  %32 = phi i8* [ %40, %88 ], [ %28, %26 ]
  %33 = tail call i64 @strcspn(i8* %32, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.40, i64 0, i64 0)) #14
  %34 = getelementptr inbounds i8, i8* %32, i64 %33
  %35 = load i8, i8* %34, align 1
  %36 = icmp eq i8 %35, 0
  br i1 %36, label %39, label %37

37:                                               ; preds = %31
  %38 = getelementptr inbounds i8, i8* %34, i64 1
  store i8 0, i8* %34, align 1
  br label %39

39:                                               ; preds = %31, %37
  %40 = phi i8* [ %38, %37 ], [ %34, %31 ]
  %41 = tail call i32 @strcasecmp(i8* %32, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.60, i64 0, i64 0)) #14
  %42 = icmp eq i32 %41, 0
  br i1 %42, label %43, label %46

43:                                               ; preds = %39
  %44 = load i32, i32* @map_control, align 4
  %45 = or i32 %44, 15
  store i32 %45, i32* @map_control, align 4
  br label %88

46:                                               ; preds = %39
  %47 = tail call i32 @strcasecmp(i8* %32, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.61, i64 0, i64 0)) #14
  %48 = icmp eq i32 %47, 0
  br i1 %48, label %49, label %52

49:                                               ; preds = %46
  %50 = load i32, i32* @map_control, align 4
  %51 = or i32 %50, 3
  store i32 %51, i32* @map_control, align 4
  br label %88

52:                                               ; preds = %46
  %53 = tail call i32 @strcasecmp(i8* %32, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.62, i64 0, i64 0)) #14
  %54 = icmp eq i32 %53, 0
  br i1 %54, label %55, label %58

55:                                               ; preds = %52
  %56 = load i32, i32* @map_control, align 4
  %57 = or i32 %56, 7
  store i32 %57, i32* @map_control, align 4
  br label %88

58:                                               ; preds = %52
  %59 = tail call i32 @strcasecmp(i8* %32, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.63, i64 0, i64 0)) #14
  %60 = icmp eq i32 %59, 0
  br i1 %60, label %61, label %64

61:                                               ; preds = %58
  %62 = load i32, i32* @map_control, align 4
  %63 = or i32 %62, 7
  store i32 %63, i32* @map_control, align 4
  br label %88

64:                                               ; preds = %58
  %65 = tail call i32 @strcasecmp(i8* %32, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.64, i64 0, i64 0)) #14
  %66 = icmp eq i32 %65, 0
  br i1 %66, label %67, label %70

67:                                               ; preds = %64
  %68 = load i32, i32* @map_control, align 4
  %69 = or i32 %68, 8
  store i32 %69, i32* @map_control, align 4
  br label %88

70:                                               ; preds = %64
  %71 = load %struct._IO_FILE*, %struct._IO_FILE** @rf, align 8
  %72 = icmp eq %struct._IO_FILE* %71, null
  br i1 %72, label %73, label %87

73:                                               ; preds = %70
  %74 = tail call i32 @strcasecmp(i8* %32, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.65, i64 0, i64 0)) #14
  %75 = icmp eq i32 %74, 0
  br i1 %75, label %76, label %78

76:                                               ; preds = %73
  %77 = load i64, i64* bitcast (%struct._IO_FILE** @stdout to i64*), align 8
  store i64 %77, i64* bitcast (%struct._IO_FILE** @rf to i64*), align 8
  br label %88

78:                                               ; preds = %73
  %79 = tail call i32 @strcasecmp(i8* %32, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.66, i64 0, i64 0)) #14
  %80 = icmp eq i32 %79, 0
  br i1 %80, label %81, label %83

81:                                               ; preds = %78
  %82 = load i64, i64* bitcast (%struct._IO_FILE** @stderr to i64*), align 8
  store i64 %82, i64* bitcast (%struct._IO_FILE** @rf to i64*), align 8
  br label %88

83:                                               ; preds = %78
  %84 = tail call %struct._IO_FILE* @nasm_open_write(i8* %32, i32 1) #12
  store %struct._IO_FILE* %84, %struct._IO_FILE** @rf, align 8
  %85 = icmp eq %struct._IO_FILE* %84, null
  br i1 %85, label %86, label %88

86:                                               ; preds = %83
  tail call void (i32, i8*, ...) @nasm_warn(i32 2228352, i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.67, i64 0, i64 0), i8* %32) #12
  store i32 0, i32* @map_control, align 4
  br label %100

87:                                               ; preds = %70
  tail call void (i32, i8*, ...) @nasm_warn(i32 2228352, i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.68, i64 0, i64 0)) #12
  br label %88

88:                                               ; preds = %83, %49, %61, %87, %81, %76, %67, %55, %43
  %89 = load i8, i8* %40, align 1
  %90 = icmp eq i8 %89, 0
  br i1 %90, label %91, label %31

91:                                               ; preds = %88, %26
  %92 = load i32, i32* @map_control, align 4
  %93 = icmp eq i32 %92, 0
  br i1 %93, label %94, label %95

94:                                               ; preds = %91
  store i32 3, i32* @map_control, align 4
  br label %95

95:                                               ; preds = %94, %91
  %96 = load %struct._IO_FILE*, %struct._IO_FILE** @rf, align 8
  %97 = icmp eq %struct._IO_FILE* %96, null
  br i1 %97, label %98, label %100

98:                                               ; preds = %95
  %99 = load i64, i64* bitcast (%struct._IO_FILE** @stdout to i64*), align 8
  store i64 %99, i64* bitcast (%struct._IO_FILE** @rf to i64*), align 8
  br label %100

100:                                              ; preds = %2, %86, %23, %95, %98, %22
  %101 = phi i32 [ 1, %22 ], [ 1, %98 ], [ 1, %95 ], [ 1, %23 ], [ 1, %86 ], [ 0, %2 ]
  ret i32 %101
}

; Function Attrs: nounwind ssp uwtable
define internal void @bin_cleanup() #0 {
  %1 = alloca i64, align 8
  %2 = bitcast i64* %1 to %struct.Section**
  %3 = alloca i64, align 8
  %4 = bitcast i64* %3 to [8 x i8]*
  %5 = alloca i64, align 8
  %6 = alloca i32, align 4
  %7 = alloca i64, align 8
  %8 = bitcast i64* %1 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %8)
  store i64 0, i64* %1, align 8
  %9 = load i32, i32* @debug_nasm, align 4
  %10 = icmp eq i32 %9, 0
  br i1 %10, label %23, label %11

11:                                               ; preds = %0
  tail call void (i8*, ...) @nasm_debug(i8* getelementptr inbounds ([64 x i8], [64 x i8]* @.str.69, i64 0, i64 0)) #12
  %12 = load %struct.Section*, %struct.Section** @sections, align 8
  %13 = icmp eq %struct.Section* %12, null
  br i1 %13, label %25, label %14

14:                                               ; preds = %11, %14
  %15 = phi %struct.Section* [ %21, %14 ], [ %12, %11 ]
  %16 = phi i32 [ %19, %14 ], [ 0, %11 ]
  %17 = getelementptr inbounds %struct.Section, %struct.Section* %15, i64 0, i32 0
  %18 = load i8*, i8** %17, align 8
  tail call void (i8*, ...) @nasm_debug(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.70, i64 0, i64 0), i32 %16, i8* %18) #12
  %19 = add nuw nsw i32 %16, 1
  %20 = getelementptr inbounds %struct.Section, %struct.Section* %15, i64 0, i32 15
  %21 = load %struct.Section*, %struct.Section** %20, align 8
  %22 = icmp eq %struct.Section* %21, null
  br i1 %22, label %23, label %14

23:                                               ; preds = %14, %0
  %24 = load %struct.Section*, %struct.Section** @sections, align 8
  br label %25

25:                                               ; preds = %23, %11
  %26 = phi %struct.Section* [ %24, %23 ], [ null, %11 ]
  %27 = getelementptr inbounds %struct.Section, %struct.Section* %26, i64 0, i32 15
  %28 = load %struct.Section*, %struct.Section** %27, align 8
  %29 = icmp eq %struct.Section* %28, null
  br i1 %29, label %97, label %30

30:                                               ; preds = %25, %92
  %31 = phi %struct.Section* [ %95, %92 ], [ %28, %25 ]
  %32 = phi %struct.Section** [ %94, %92 ], [ %2, %25 ]
  %33 = phi %struct.Section** [ %93, %92 ], [ %27, %25 ]
  %34 = getelementptr inbounds %struct.Section, %struct.Section* %31, i64 0, i32 3
  %35 = load i32, i32* %34, align 8
  %36 = trunc i32 %35 to i8
  %37 = icmp slt i8 %36, 0
  br i1 %37, label %38, label %40

38:                                               ; preds = %30
  %39 = getelementptr inbounds %struct.Section, %struct.Section* %31, i64 0, i32 15
  br label %92

40:                                               ; preds = %30
  %41 = and i32 %35, 7
  %42 = icmp eq i32 %41, 0
  br i1 %42, label %78, label %43

43:                                               ; preds = %40
  %44 = and i32 %35, 56
  %45 = icmp eq i32 %44, 0
  br i1 %45, label %49, label %46

46:                                               ; preds = %43
  %47 = getelementptr inbounds %struct.Section, %struct.Section* %31, i64 0, i32 0
  %48 = load i8*, i8** %47, align 8
  tail call void (i8*, ...) @nasm_fatal(i8* getelementptr inbounds ([62 x i8], [62 x i8]* @.str.71, i64 0, i64 0), i8* %48) #13
  unreachable

49:                                               ; preds = %43
  %50 = and i32 %35, 1
  %51 = icmp eq i32 %50, 0
  br i1 %51, label %57, label %52

52:                                               ; preds = %49
  %53 = getelementptr inbounds %struct.Section, %struct.Section* %31, i64 0, i32 6
  %54 = load i64, i64* %53, align 8
  %55 = getelementptr inbounds %struct.Section, %struct.Section* %31, i64 0, i32 7
  store i64 %54, i64* %55, align 8
  %56 = or i32 %35, 8
  store i32 %56, i32* %34, align 8
  br label %57

57:                                               ; preds = %49, %52
  %58 = phi i32 [ %35, %49 ], [ %56, %52 ]
  %59 = and i32 %58, 2
  %60 = icmp eq i32 %59, 0
  br i1 %60, label %66, label %61

61:                                               ; preds = %57
  %62 = getelementptr inbounds %struct.Section, %struct.Section* %31, i64 0, i32 4
  %63 = load i64, i64* %62, align 8
  %64 = getelementptr inbounds %struct.Section, %struct.Section* %31, i64 0, i32 5
  store i64 %63, i64* %64, align 8
  %65 = or i32 %58, 16
  store i32 %65, i32* %34, align 8
  br label %66

66:                                               ; preds = %57, %61
  %67 = phi i32 [ %58, %57 ], [ %65, %61 ]
  %68 = and i32 %67, 4
  %69 = icmp eq i32 %68, 0
  br i1 %69, label %78, label %70

70:                                               ; preds = %66
  %71 = getelementptr inbounds %struct.Section, %struct.Section* %31, i64 0, i32 8
  %72 = bitcast i8** %71 to i64*
  %73 = load i64, i64* %72, align 8
  %74 = getelementptr inbounds %struct.Section, %struct.Section* %31, i64 0, i32 9
  %75 = bitcast i8** %74 to i64*
  store i64 %73, i64* %75, align 8
  %76 = and i32 %67, -37
  %77 = or i32 %76, 32
  store i32 %77, i32* %34, align 8
  br label %78

78:                                               ; preds = %66, %40, %70
  %79 = phi i32 [ %67, %66 ], [ %35, %40 ], [ %77, %70 ]
  %80 = and i32 %79, 8
  %81 = icmp eq i32 %80, 0
  br i1 %81, label %87, label %82

82:                                               ; preds = %78
  %83 = getelementptr inbounds %struct.Section, %struct.Section* %31, i64 0, i32 7
  %84 = load i64, i64* %83, align 8
  %85 = getelementptr inbounds %struct.Section, %struct.Section* %31, i64 0, i32 6
  store i64 %84, i64* %85, align 8
  %86 = or i32 %79, 1
  store i32 %86, i32* %34, align 8
  br label %87

87:                                               ; preds = %78, %82
  %88 = getelementptr inbounds %struct.Section, %struct.Section* %31, i64 0, i32 15
  %89 = bitcast %struct.Section** %88 to i64*
  %90 = load i64, i64* %89, align 8
  %91 = bitcast %struct.Section** %33 to i64*
  store i64 %90, i64* %91, align 8
  store %struct.Section* null, %struct.Section** %88, align 8
  store %struct.Section* %31, %struct.Section** %32, align 8
  br label %92

92:                                               ; preds = %87, %38
  %93 = phi %struct.Section** [ %39, %38 ], [ %33, %87 ]
  %94 = phi %struct.Section** [ %32, %38 ], [ %88, %87 ]
  %95 = load %struct.Section*, %struct.Section** %93, align 8
  %96 = icmp eq %struct.Section* %95, null
  br i1 %96, label %97, label %30

97:                                               ; preds = %92, %25
  %98 = icmp eq %struct.Section* %26, null
  br i1 %98, label %208, label %99

99:                                               ; preds = %97, %203
  %100 = phi %struct.Section* [ %204, %203 ], [ %26, %97 ]
  %101 = phi %struct.Section** [ %131, %203 ], [ @sections, %97 ]
  %102 = phi %struct.Section* [ %204, %203 ], [ null, %97 ]
  %103 = getelementptr inbounds %struct.Section, %struct.Section* %100, i64 0, i32 3
  %104 = load i32, i32* %103, align 8
  %105 = and i32 %104, 4
  %106 = icmp eq i32 %105, 0
  br i1 %106, label %107, label %130

107:                                              ; preds = %99
  %108 = getelementptr inbounds %struct.Section, %struct.Section* %100, i64 0, i32 15
  %109 = load %struct.Section*, %struct.Section** %108, align 8
  %110 = icmp eq %struct.Section* %109, null
  br i1 %110, label %208, label %111

111:                                              ; preds = %107, %126
  %112 = phi %struct.Section* [ %128, %126 ], [ %109, %107 ]
  %113 = phi %struct.Section** [ %127, %126 ], [ %108, %107 ]
  %114 = phi %struct.Section* [ %112, %126 ], [ %100, %107 ]
  %115 = getelementptr inbounds %struct.Section, %struct.Section* %112, i64 0, i32 3
  %116 = load i32, i32* %115, align 8
  %117 = and i32 %116, 4
  %118 = icmp eq i32 %117, 0
  br i1 %118, label %126, label %119

119:                                              ; preds = %111
  %120 = getelementptr inbounds %struct.Section, %struct.Section* %114, i64 0, i32 0
  %121 = load i8*, i8** %120, align 8
  %122 = getelementptr inbounds %struct.Section, %struct.Section* %112, i64 0, i32 8
  %123 = load i8*, i8** %122, align 8
  %124 = tail call i32 @strcmp(i8* %121, i8* %123) #14
  %125 = icmp eq i32 %124, 0
  br i1 %125, label %126, label %130

126:                                              ; preds = %119, %111
  %127 = getelementptr inbounds %struct.Section, %struct.Section* %112, i64 0, i32 15
  %128 = load %struct.Section*, %struct.Section** %127, align 8
  %129 = icmp eq %struct.Section* %128, null
  br i1 %129, label %208, label %111

130:                                              ; preds = %119, %99
  %131 = phi %struct.Section** [ %101, %99 ], [ %113, %119 ]
  %132 = phi %struct.Section* [ %100, %99 ], [ %112, %119 ]
  %133 = getelementptr inbounds %struct.Section, %struct.Section* %132, i64 0, i32 8
  br label %134

134:                                              ; preds = %138, %130
  %135 = phi %struct.Section** [ @sections, %130 ], [ %144, %138 ]
  %136 = load %struct.Section*, %struct.Section** %135, align 8
  %137 = icmp eq %struct.Section* %136, null
  br i1 %137, label %145, label %138

138:                                              ; preds = %134
  %139 = getelementptr inbounds %struct.Section, %struct.Section* %136, i64 0, i32 0
  %140 = load i8*, i8** %139, align 8
  %141 = load i8*, i8** %133, align 8
  %142 = tail call i32 @strcmp(i8* %140, i8* %141) #14
  %143 = icmp eq i32 %142, 0
  %144 = getelementptr inbounds %struct.Section, %struct.Section* %136, i64 0, i32 15
  br i1 %143, label %149, label %134

145:                                              ; preds = %134
  %146 = getelementptr inbounds %struct.Section, %struct.Section* %132, i64 0, i32 0
  %147 = load i8*, i8** %146, align 8
  %148 = load i8*, i8** %133, align 8
  tail call void (i8*, ...) @nasm_fatal(i8* getelementptr inbounds ([54 x i8], [54 x i8]* @.str.72, i64 0, i64 0), i8* %147, i8* %148) #13
  unreachable

149:                                              ; preds = %138
  %150 = load %struct.Section*, %struct.Section** %144, align 8
  %151 = icmp eq %struct.Section* %150, null
  %152 = ptrtoint %struct.Section* %150 to i64
  br i1 %151, label %168, label %153

153:                                              ; preds = %149
  %154 = getelementptr inbounds %struct.Section, %struct.Section* %150, i64 0, i32 3
  %155 = load i32, i32* %154, align 8
  %156 = and i32 %155, 4
  %157 = icmp eq i32 %156, 0
  br i1 %157, label %168, label %158

158:                                              ; preds = %153
  %159 = getelementptr inbounds %struct.Section, %struct.Section* %150, i64 0, i32 8
  %160 = load i8*, i8** %159, align 8
  %161 = tail call i32 @strcmp(i8* %140, i8* %160) #14
  %162 = icmp eq i32 %161, 0
  br i1 %162, label %163, label %168

163:                                              ; preds = %158
  %164 = getelementptr inbounds %struct.Section, %struct.Section* %132, i64 0, i32 0
  %165 = load i8*, i8** %164, align 8
  %166 = getelementptr inbounds %struct.Section, %struct.Section* %150, i64 0, i32 0
  %167 = load i8*, i8** %166, align 8
  tail call void (i8*, ...) @nasm_fatal(i8* getelementptr inbounds ([48 x i8], [48 x i8]* @.str.73, i64 0, i64 0), i8* %165, i8* %167, i8* %140) #13
  unreachable

168:                                              ; preds = %158, %153, %149
  %169 = getelementptr inbounds %struct.Section, %struct.Section* %132, i64 0, i32 15
  %170 = load %struct.Section*, %struct.Section** %169, align 8
  %171 = icmp eq %struct.Section* %170, null
  br i1 %171, label %199, label %172

172:                                              ; preds = %168
  %173 = icmp eq %struct.Section* %170, %136
  br i1 %173, label %203, label %174

174:                                              ; preds = %172, %197
  %175 = phi %struct.Section** [ %182, %197 ], [ %169, %172 ]
  %176 = phi %struct.Section* [ %183, %197 ], [ %170, %172 ]
  %177 = getelementptr inbounds %struct.Section, %struct.Section* %176, i64 0, i32 3
  %178 = load i32, i32* %177, align 8
  %179 = and i32 %178, 1
  %180 = icmp eq i32 %179, 0
  br i1 %180, label %181, label %203

181:                                              ; preds = %174
  %182 = getelementptr inbounds %struct.Section, %struct.Section* %176, i64 0, i32 15
  %183 = load %struct.Section*, %struct.Section** %182, align 8
  %184 = icmp eq %struct.Section* %183, null
  br i1 %184, label %199, label %185

185:                                              ; preds = %181
  %186 = getelementptr inbounds %struct.Section, %struct.Section* %183, i64 0, i32 3
  %187 = load i32, i32* %186, align 8
  %188 = and i32 %187, 4
  %189 = icmp eq i32 %188, 0
  br i1 %189, label %197, label %190

190:                                              ; preds = %185
  %191 = getelementptr inbounds %struct.Section, %struct.Section* %176, i64 0, i32 0
  %192 = load i8*, i8** %191, align 8
  %193 = getelementptr inbounds %struct.Section, %struct.Section* %183, i64 0, i32 8
  %194 = load i8*, i8** %193, align 8
  %195 = tail call i32 @strcmp(i8* %192, i8* %194) #14
  %196 = icmp eq i32 %195, 0
  br i1 %196, label %197, label %203

197:                                              ; preds = %190, %185
  %198 = icmp eq %struct.Section* %183, %136
  br i1 %198, label %203, label %174

199:                                              ; preds = %168, %181
  %200 = phi %struct.Section** [ %182, %181 ], [ %169, %168 ]
  %201 = ptrtoint %struct.Section* %150 to i64
  %202 = bitcast %struct.Section** %200 to i64*
  store i64 %201, i64* %202, align 8
  store %struct.Section* %132, %struct.Section** %144, align 8
  store %struct.Section* null, %struct.Section** %131, align 8
  br label %208

203:                                              ; preds = %190, %197, %174, %172
  %204 = phi %struct.Section* [ %136, %172 ], [ %183, %190 ], [ %136, %197 ], [ %176, %174 ]
  %205 = phi %struct.Section** [ %169, %172 ], [ %182, %190 ], [ %182, %197 ], [ %175, %174 ]
  %206 = bitcast %struct.Section** %205 to i64*
  store i64 %152, i64* %206, align 8
  store %struct.Section* %132, %struct.Section** %144, align 8
  store %struct.Section* %204, %struct.Section** %131, align 8
  %207 = icmp eq %struct.Section* %204, null
  br i1 %207, label %208, label %99

208:                                              ; preds = %203, %107, %126, %199, %97
  %209 = phi %struct.Section* [ null, %97 ], [ null, %199 ], [ %102, %126 ], [ %102, %107 ], [ null, %203 ]
  %210 = load %struct.Section*, %struct.Section** @sections, align 8
  store %struct.Section* null, %struct.Section** @sections, align 8
  %211 = icmp eq %struct.Section* %210, null
  br i1 %211, label %252, label %212

212:                                              ; preds = %208, %246
  %213 = phi %struct.Section* [ %248, %246 ], [ null, %208 ]
  %214 = phi %struct.Section* [ %239, %246 ], [ %210, %208 ]
  %215 = getelementptr inbounds %struct.Section, %struct.Section* %214, i64 0, i32 6
  %216 = icmp eq %struct.Section* %213, null
  br i1 %216, label %233, label %217

217:                                              ; preds = %212, %229
  %218 = phi %struct.Section* [ %231, %229 ], [ %213, %212 ]
  %219 = phi %struct.Section** [ %230, %229 ], [ @sections, %212 ]
  %220 = getelementptr inbounds %struct.Section, %struct.Section* %218, i64 0, i32 3
  %221 = load i32, i32* %220, align 8
  %222 = and i32 %221, 1
  %223 = icmp eq i32 %222, 0
  br i1 %223, label %229, label %224

224:                                              ; preds = %217
  %225 = load i64, i64* %215, align 8
  %226 = getelementptr inbounds %struct.Section, %struct.Section* %218, i64 0, i32 6
  %227 = load i64, i64* %226, align 8
  %228 = icmp ult i64 %225, %227
  br i1 %228, label %233, label %229

229:                                              ; preds = %217, %224
  %230 = getelementptr inbounds %struct.Section, %struct.Section* %218, i64 0, i32 15
  %231 = load %struct.Section*, %struct.Section** %230, align 8
  %232 = icmp eq %struct.Section* %231, null
  br i1 %232, label %233, label %217

233:                                              ; preds = %224, %229, %212
  %234 = phi %struct.Section** [ @sections, %212 ], [ %230, %229 ], [ %219, %224 ]
  %235 = phi %struct.Section* [ null, %212 ], [ null, %229 ], [ %218, %224 ]
  br label %236

236:                                              ; preds = %241, %233
  %237 = phi %struct.Section* [ %214, %233 ], [ %239, %241 ]
  %238 = getelementptr inbounds %struct.Section, %struct.Section* %237, i64 0, i32 15
  %239 = load %struct.Section*, %struct.Section** %238, align 8
  %240 = icmp eq %struct.Section* %239, null
  br i1 %240, label %249, label %241

241:                                              ; preds = %236
  %242 = getelementptr inbounds %struct.Section, %struct.Section* %239, i64 0, i32 3
  %243 = load i32, i32* %242, align 8
  %244 = and i32 %243, 1
  %245 = icmp eq i32 %244, 0
  br i1 %245, label %236, label %246

246:                                              ; preds = %241
  %247 = getelementptr inbounds %struct.Section, %struct.Section* %237, i64 0, i32 15
  store %struct.Section* %214, %struct.Section** %234, align 8
  store %struct.Section* %235, %struct.Section** %247, align 8
  %248 = load %struct.Section*, %struct.Section** @sections, align 8
  br label %212

249:                                              ; preds = %236
  %250 = getelementptr inbounds %struct.Section, %struct.Section* %237, i64 0, i32 15
  store %struct.Section* %214, %struct.Section** %234, align 8
  store %struct.Section* %235, %struct.Section** %250, align 8
  %251 = load %struct.Section*, %struct.Section** @sections, align 8
  br label %252

252:                                              ; preds = %249, %208
  %253 = phi %struct.Section* [ null, %208 ], [ %251, %249 ]
  %254 = phi %struct.Section* [ %209, %208 ], [ null, %249 ]
  %255 = load i1, i1* @origin_defined, align 4
  %256 = getelementptr inbounds %struct.Section, %struct.Section* %253, i64 0, i32 3
  %257 = load i32, i32* %256, align 8
  %258 = and i32 %257, 1
  %259 = icmp ne i32 %258, 0
  br i1 %255, label %260, label %283

260:                                              ; preds = %252
  br i1 %259, label %261, label %269

261:                                              ; preds = %260
  %262 = getelementptr inbounds %struct.Section, %struct.Section* %253, i64 0, i32 6
  %263 = load i64, i64* %262, align 8
  %264 = load i64, i64* @origin, align 8
  %265 = icmp ult i64 %263, %264
  br i1 %265, label %266, label %290

266:                                              ; preds = %261
  %267 = getelementptr inbounds %struct.Section, %struct.Section* %253, i64 0, i32 0
  %268 = load i8*, i8** %267, align 8
  tail call void (i8*, ...) @nasm_fatal(i8* getelementptr inbounds ([40 x i8], [40 x i8]* @.str.74, i64 0, i64 0), i8* %268) #13
  unreachable

269:                                              ; preds = %260
  %270 = and i32 %257, 2
  %271 = icmp eq i32 %270, 0
  %272 = load i64, i64* @origin, align 8
  br i1 %271, label %281, label %273

273:                                              ; preds = %269
  %274 = getelementptr inbounds %struct.Section, %struct.Section* %253, i64 0, i32 4
  %275 = load i64, i64* %274, align 8
  %276 = add i64 %272, -1
  %277 = add i64 %276, %275
  %278 = sub i64 0, %275
  %279 = and i64 %277, %278
  %280 = getelementptr inbounds %struct.Section, %struct.Section* %253, i64 0, i32 6
  store i64 %279, i64* %280, align 8
  br label %290

281:                                              ; preds = %269
  %282 = getelementptr inbounds %struct.Section, %struct.Section* %253, i64 0, i32 6
  store i64 %272, i64* %282, align 8
  br label %290

283:                                              ; preds = %252
  %284 = getelementptr inbounds %struct.Section, %struct.Section* %253, i64 0, i32 6
  br i1 %259, label %285, label %287

285:                                              ; preds = %283
  %286 = load i64, i64* %284, align 8
  br label %288

287:                                              ; preds = %283
  store i64 0, i64* %284, align 8
  br label %288

288:                                              ; preds = %285, %287
  %289 = phi i64 [ %286, %285 ], [ 0, %287 ]
  store i64 %289, i64* @origin, align 8
  br label %290

290:                                              ; preds = %261, %281, %273, %288
  %291 = phi i64 [ %264, %261 ], [ %272, %281 ], [ %272, %273 ], [ %289, %288 ]
  %292 = phi i64 [ %263, %261 ], [ %272, %281 ], [ %279, %273 ], [ %289, %288 ]
  %293 = or i32 %257, 1
  store i32 %293, i32* %256, align 8
  %294 = icmp eq %struct.Section* %253, null
  br i1 %294, label %401, label %295

295:                                              ; preds = %290, %395
  %296 = phi %struct.Section* [ %399, %395 ], [ %253, %290 ]
  %297 = phi i64 [ %397, %395 ], [ %292, %290 ]
  %298 = phi %struct.Section* [ %320, %395 ], [ %253, %290 ]
  %299 = phi %struct.Section* [ %396, %395 ], [ %254, %290 ]
  %300 = icmp eq %struct.Section* %296, %298
  br i1 %300, label %301, label %319

301:                                              ; preds = %295
  %302 = getelementptr inbounds %struct.Section, %struct.Section* %296, i64 0, i32 15
  %303 = load %struct.Section*, %struct.Section** %302, align 8
  %304 = icmp eq %struct.Section* %303, null
  br i1 %304, label %319, label %305

305:                                              ; preds = %301, %315
  %306 = phi %struct.Section* [ %317, %315 ], [ %303, %301 ]
  %307 = getelementptr inbounds %struct.Section, %struct.Section* %306, i64 0, i32 2
  %308 = load i64, i64* %307, align 8
  %309 = icmp eq i64 %308, 0
  br i1 %309, label %315, label %310

310:                                              ; preds = %305
  %311 = getelementptr inbounds %struct.Section, %struct.Section* %306, i64 0, i32 3
  %312 = load i32, i32* %311, align 8
  %313 = and i32 %312, 1
  %314 = icmp eq i32 %313, 0
  br i1 %314, label %315, label %319

315:                                              ; preds = %305, %310
  %316 = getelementptr inbounds %struct.Section, %struct.Section* %306, i64 0, i32 15
  %317 = load %struct.Section*, %struct.Section** %316, align 8
  %318 = icmp eq %struct.Section* %317, null
  br i1 %318, label %319, label %305

319:                                              ; preds = %310, %315, %301, %295
  %320 = phi %struct.Section* [ %298, %295 ], [ null, %301 ], [ %306, %310 ], [ null, %315 ]
  %321 = getelementptr inbounds %struct.Section, %struct.Section* %296, i64 0, i32 3
  %322 = load i32, i32* %321, align 8
  %323 = and i32 %322, 1
  %324 = icmp eq i32 %323, 0
  br i1 %324, label %325, label %342

325:                                              ; preds = %319
  %326 = and i32 %322, 2
  %327 = icmp eq i32 %326, 0
  %328 = getelementptr inbounds %struct.Section, %struct.Section* %296, i64 0, i32 4
  br i1 %327, label %331, label %329

329:                                              ; preds = %325
  %330 = load i64, i64* %328, align 8
  br label %333

331:                                              ; preds = %325
  store i64 4, i64* %328, align 8
  %332 = or i32 %322, 2
  store i32 %332, i32* %321, align 8
  br label %333

333:                                              ; preds = %329, %331
  %334 = phi i32 [ %322, %329 ], [ %332, %331 ]
  %335 = phi i64 [ %330, %329 ], [ 4, %331 ]
  %336 = add i64 %297, -1
  %337 = add i64 %336, %335
  %338 = sub i64 0, %335
  %339 = and i64 %337, %338
  %340 = getelementptr inbounds %struct.Section, %struct.Section* %296, i64 0, i32 6
  store i64 %339, i64* %340, align 8
  %341 = or i32 %334, 1
  store i32 %341, i32* %321, align 8
  br label %342

342:                                              ; preds = %319, %333
  %343 = phi i32 [ %322, %319 ], [ %341, %333 ]
  %344 = and i32 %343, 40
  %345 = icmp eq i32 %344, 0
  br i1 %345, label %346, label %363

346:                                              ; preds = %342
  %347 = and i32 %343, 16
  %348 = icmp eq i32 %347, 0
  br i1 %348, label %356, label %349

349:                                              ; preds = %346
  %350 = getelementptr inbounds %struct.Section, %struct.Section* %296, i64 0, i32 5
  %351 = load i64, i64* %350, align 8
  %352 = add i64 %297, -1
  %353 = add i64 %352, %351
  %354 = sub i64 0, %351
  %355 = and i64 %353, %354
  br label %359

356:                                              ; preds = %346
  %357 = getelementptr inbounds %struct.Section, %struct.Section* %296, i64 0, i32 6
  %358 = load i64, i64* %357, align 8
  br label %359

359:                                              ; preds = %356, %349
  %360 = phi i64 [ %358, %356 ], [ %355, %349 ]
  %361 = getelementptr inbounds %struct.Section, %struct.Section* %296, i64 0, i32 7
  store i64 %360, i64* %361, align 8
  %362 = or i32 %343, 8
  store i32 %362, i32* %321, align 8
  br label %363

363:                                              ; preds = %342, %359
  %364 = getelementptr inbounds %struct.Section, %struct.Section* %296, i64 0, i32 6
  %365 = load i64, i64* %364, align 8
  %366 = icmp ult i64 %365, %297
  br i1 %366, label %395, label %367

367:                                              ; preds = %363
  %368 = getelementptr inbounds %struct.Section, %struct.Section* %296, i64 0, i32 2
  %369 = load i64, i64* %368, align 8
  %370 = add i64 %369, %365
  %371 = icmp eq %struct.Section* %320, null
  br i1 %371, label %395, label %372

372:                                              ; preds = %367
  %373 = getelementptr inbounds %struct.Section, %struct.Section* %320, i64 0, i32 6
  %374 = load i64, i64* %373, align 8
  %375 = icmp ult i64 %374, %291
  br i1 %375, label %376, label %379

376:                                              ; preds = %372
  %377 = getelementptr inbounds %struct.Section, %struct.Section* %320, i64 0, i32 0
  %378 = load i8*, i8** %377, align 8
  tail call void (i8*, ...) @nasm_fatal(i8* getelementptr inbounds ([40 x i8], [40 x i8]* @.str.75, i64 0, i64 0), i8* %378) #13
  unreachable

379:                                              ; preds = %372
  %380 = icmp ugt i64 %365, %374
  br i1 %380, label %381, label %388

381:                                              ; preds = %379
  %382 = getelementptr inbounds %struct.Section, %struct.Section* %299, i64 0, i32 0
  %383 = load i8*, i8** %382, align 8
  %384 = getelementptr inbounds %struct.Section, %struct.Section* %296, i64 0, i32 0
  %385 = load i8*, i8** %384, align 8
  %386 = getelementptr inbounds %struct.Section, %struct.Section* %320, i64 0, i32 0
  %387 = load i8*, i8** %386, align 8
  tail call void (i8*, ...) @nasm_fatal(i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str.76, i64 0, i64 0), i8* %383, i8* %385, i8* %387) #13
  unreachable

388:                                              ; preds = %379
  %389 = icmp ugt i64 %370, %374
  br i1 %389, label %390, label %395

390:                                              ; preds = %388
  %391 = getelementptr inbounds %struct.Section, %struct.Section* %296, i64 0, i32 0
  %392 = load i8*, i8** %391, align 8
  %393 = getelementptr inbounds %struct.Section, %struct.Section* %320, i64 0, i32 0
  %394 = load i8*, i8** %393, align 8
  tail call void (i8*, ...) @nasm_fatal(i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.77, i64 0, i64 0), i8* %392, i8* %394) #13
  unreachable

395:                                              ; preds = %388, %367, %363
  %396 = phi %struct.Section* [ %299, %363 ], [ %296, %367 ], [ %296, %388 ]
  %397 = phi i64 [ %297, %363 ], [ %370, %367 ], [ %370, %388 ]
  %398 = getelementptr inbounds %struct.Section, %struct.Section* %296, i64 0, i32 15
  %399 = load %struct.Section*, %struct.Section** %398, align 8
  %400 = icmp eq %struct.Section* %399, null
  br i1 %400, label %401, label %295

401:                                              ; preds = %395, %290
  br label %402

402:                                              ; preds = %401, %402
  %403 = phi %struct.Section* [ %405, %402 ], [ %253, %401 ]
  %404 = getelementptr inbounds %struct.Section, %struct.Section* %403, i64 0, i32 15
  %405 = load %struct.Section*, %struct.Section** %404, align 8
  %406 = icmp eq %struct.Section* %405, null
  br i1 %406, label %407, label %402

407:                                              ; preds = %402
  %408 = getelementptr inbounds %struct.Section, %struct.Section* %403, i64 0, i32 15
  %409 = load i64, i64* %1, align 8
  %410 = bitcast %struct.Section** %408 to i64*
  store i64 %409, i64* %410, align 8
  br label %411

411:                                              ; preds = %501, %407
  %412 = phi %struct.Section* [ %495, %501 ], [ %253, %407 ]
  %413 = phi %struct.Section* [ %496, %501 ], [ %253, %407 ]
  %414 = icmp eq %struct.Section* %413, null
  br i1 %414, label %503, label %415

415:                                              ; preds = %411, %494
  %416 = phi %struct.Section* [ %495, %494 ], [ %412, %411 ]
  %417 = phi %struct.Section* [ %496, %494 ], [ %413, %411 ]
  %418 = phi %struct.Section* [ %499, %494 ], [ %413, %411 ]
  %419 = phi i32 [ %497, %494 ], [ 0, %411 ]
  %420 = getelementptr inbounds %struct.Section, %struct.Section* %418, i64 0, i32 3
  %421 = load i32, i32* %420, align 8
  %422 = and i32 %421, 8
  %423 = icmp eq i32 %422, 0
  br i1 %423, label %424, label %494

424:                                              ; preds = %415
  %425 = and i32 %421, 32
  %426 = icmp eq i32 %425, 0
  br i1 %426, label %444, label %427

427:                                              ; preds = %424
  %428 = icmp eq %struct.Section* %416, null
  %429 = getelementptr inbounds %struct.Section, %struct.Section* %418, i64 0, i32 9
  %430 = load i8*, i8** %429, align 8
  br i1 %428, label %441, label %431

431:                                              ; preds = %427, %437
  %432 = phi %struct.Section* [ %439, %437 ], [ %416, %427 ]
  %433 = getelementptr inbounds %struct.Section, %struct.Section* %432, i64 0, i32 0
  %434 = load i8*, i8** %433, align 8
  %435 = tail call i32 @strcmp(i8* %430, i8* %434) #14
  %436 = icmp eq i32 %435, 0
  br i1 %436, label %459, label %437

437:                                              ; preds = %431
  %438 = getelementptr inbounds %struct.Section, %struct.Section* %432, i64 0, i32 15
  %439 = load %struct.Section*, %struct.Section** %438, align 8
  %440 = icmp eq %struct.Section* %439, null
  br i1 %440, label %441, label %431

441:                                              ; preds = %427, %437
  %442 = getelementptr inbounds %struct.Section, %struct.Section* %418, i64 0, i32 0
  %443 = load i8*, i8** %442, align 8
  tail call void (i8*, ...) @nasm_fatal(i8* getelementptr inbounds ([41 x i8], [41 x i8]* @.str.78, i64 0, i64 0), i8* %443, i8* %430) #13
  unreachable

444:                                              ; preds = %424
  %445 = getelementptr inbounds %struct.Section, %struct.Section* %418, i64 0, i32 14
  %446 = load %struct.Section*, %struct.Section** %445, align 8
  %447 = icmp eq %struct.Section* %446, null
  %448 = or i1 %447, %294
  %449 = select i1 %447, %struct.Section* %416, %struct.Section* null
  %450 = select i1 %447, %struct.Section* %417, %struct.Section* null
  %451 = select i1 %447, %struct.Section* %403, %struct.Section* null
  br i1 %448, label %459, label %452

452:                                              ; preds = %444, %455
  %453 = phi %struct.Section* [ %457, %455 ], [ %253, %444 ]
  %454 = icmp eq %struct.Section* %453, %446
  br i1 %454, label %459, label %455

455:                                              ; preds = %452
  %456 = getelementptr inbounds %struct.Section, %struct.Section* %453, i64 0, i32 15
  %457 = load %struct.Section*, %struct.Section** %456, align 8
  %458 = icmp eq %struct.Section* %457, null
  br i1 %458, label %459, label %452

459:                                              ; preds = %431, %455, %452, %444
  %460 = phi %struct.Section* [ %449, %444 ], [ %253, %452 ], [ %253, %455 ], [ %416, %431 ]
  %461 = phi %struct.Section* [ %450, %444 ], [ %253, %452 ], [ %253, %455 ], [ %416, %431 ]
  %462 = phi %struct.Section* [ %451, %444 ], [ null, %455 ], [ %446, %452 ], [ %432, %431 ]
  %463 = getelementptr inbounds %struct.Section, %struct.Section* %462, i64 0, i32 3
  %464 = load i32, i32* %463, align 8
  %465 = and i32 %464, 8
  %466 = icmp eq i32 %465, 0
  br i1 %466, label %494, label %467

467:                                              ; preds = %459
  %468 = and i32 %421, 16
  %469 = icmp eq i32 %468, 0
  %470 = getelementptr inbounds %struct.Section, %struct.Section* %418, i64 0, i32 5
  br i1 %469, label %473, label %471

471:                                              ; preds = %467
  %472 = load i64, i64* %470, align 8
  br label %475

473:                                              ; preds = %467
  store i64 4, i64* %470, align 8
  %474 = or i32 %421, 16
  store i32 %474, i32* %420, align 8
  br label %475

475:                                              ; preds = %471, %473
  %476 = phi i32 [ %421, %471 ], [ %474, %473 ]
  %477 = phi i64 [ %472, %471 ], [ 4, %473 ]
  %478 = getelementptr inbounds %struct.Section, %struct.Section* %462, i64 0, i32 7
  %479 = load i64, i64* %478, align 8
  %480 = getelementptr inbounds %struct.Section, %struct.Section* %462, i64 0, i32 2
  %481 = load i64, i64* %480, align 8
  %482 = add i64 %479, -1
  %483 = add i64 %482, %481
  %484 = add i64 %483, %477
  %485 = sub i64 0, %477
  %486 = and i64 %484, %485
  %487 = getelementptr inbounds %struct.Section, %struct.Section* %418, i64 0, i32 7
  store i64 %486, i64* %487, align 8
  %488 = or i32 %476, 8
  store i32 %488, i32* %420, align 8
  %489 = add nsw i32 %419, 1
  %490 = and i32 %476, 256
  %491 = icmp eq i32 %490, 0
  br i1 %491, label %494, label %492

492:                                              ; preds = %475
  %493 = getelementptr inbounds %struct.Section, %struct.Section* %418, i64 0, i32 6
  store i64 %486, i64* %493, align 8
  br label %494

494:                                              ; preds = %475, %459, %415, %492
  %495 = phi %struct.Section* [ %416, %415 ], [ %460, %492 ], [ %460, %475 ], [ %460, %459 ]
  %496 = phi %struct.Section* [ %417, %415 ], [ %461, %492 ], [ %461, %475 ], [ %461, %459 ]
  %497 = phi i32 [ %419, %415 ], [ %489, %492 ], [ %489, %475 ], [ %419, %459 ]
  %498 = getelementptr inbounds %struct.Section, %struct.Section* %418, i64 0, i32 15
  %499 = load %struct.Section*, %struct.Section** %498, align 8
  %500 = icmp eq %struct.Section* %499, null
  br i1 %500, label %501, label %415

501:                                              ; preds = %494
  %502 = icmp eq i32 %497, 0
  br i1 %502, label %503, label %411

503:                                              ; preds = %411, %501
  br i1 %294, label %523, label %504

504:                                              ; preds = %503, %515
  %505 = phi %struct.Section* [ %518, %515 ], [ %253, %503 ]
  %506 = phi i32 [ %516, %515 ], [ 0, %503 ]
  %507 = getelementptr inbounds %struct.Section, %struct.Section* %505, i64 0, i32 3
  %508 = load i32, i32* %507, align 8
  %509 = and i32 %508, 8
  %510 = icmp eq i32 %509, 0
  br i1 %510, label %511, label %515

511:                                              ; preds = %504
  %512 = getelementptr inbounds %struct.Section, %struct.Section* %505, i64 0, i32 0
  %513 = load i8*, i8** %512, align 8
  tail call void (i8*, ...) @nasm_nonfatal(i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.str.79, i64 0, i64 0), i8* %513) #12
  %514 = add nsw i32 %506, 1
  br label %515

515:                                              ; preds = %504, %511
  %516 = phi i32 [ %506, %504 ], [ %514, %511 ]
  %517 = getelementptr inbounds %struct.Section, %struct.Section* %505, i64 0, i32 15
  %518 = load %struct.Section*, %struct.Section** %517, align 8
  %519 = icmp eq %struct.Section* %518, null
  br i1 %519, label %520, label %504

520:                                              ; preds = %515
  %521 = icmp eq i32 %516, 0
  br i1 %521, label %523, label %522

522:                                              ; preds = %520
  tail call void (i8*, ...) @nasm_fatal(i8* getelementptr inbounds ([32 x i8], [32 x i8]* @.str.80, i64 0, i64 0)) #13
  unreachable

523:                                              ; preds = %503, %520
  %524 = load i32, i32* @debug_nasm, align 4
  %525 = icmp eq i32 %524, 0
  br i1 %525, label %543, label %526

526:                                              ; preds = %523
  tail call void (i8*, ...) @nasm_debug(i8* getelementptr inbounds ([59 x i8], [59 x i8]* @.str.81, i64 0, i64 0)) #12
  %527 = load %struct.Section*, %struct.Section** @sections, align 8
  %528 = icmp eq %struct.Section* %527, null
  br i1 %528, label %546, label %529

529:                                              ; preds = %526, %536
  %530 = phi %struct.Section* [ %541, %536 ], [ %527, %526 ]
  %531 = phi i32 [ %539, %536 ], [ 0, %526 ]
  %532 = getelementptr inbounds %struct.Section, %struct.Section* %530, i64 0, i32 3
  %533 = load i32, i32* %532, align 8
  %534 = trunc i32 %533 to i8
  %535 = icmp slt i8 %534, 0
  br i1 %535, label %536, label %543

536:                                              ; preds = %529
  %537 = getelementptr inbounds %struct.Section, %struct.Section* %530, i64 0, i32 0
  %538 = load i8*, i8** %537, align 8
  tail call void (i8*, ...) @nasm_debug(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.70, i64 0, i64 0), i32 %531, i8* %538) #12
  %539 = add nuw nsw i32 %531, 1
  %540 = getelementptr inbounds %struct.Section, %struct.Section* %530, i64 0, i32 15
  %541 = load %struct.Section*, %struct.Section** %540, align 8
  %542 = icmp eq %struct.Section* %541, null
  br i1 %542, label %543, label %529

543:                                              ; preds = %529, %536, %523
  %544 = load %struct.Section*, %struct.Section** @sections, align 8
  %545 = icmp eq %struct.Section* %544, null
  br i1 %545, label %546, label %552

546:                                              ; preds = %552, %526, %543
  %547 = load %struct.Reloc*, %struct.Reloc** @relocs, align 8
  %548 = icmp eq %struct.Reloc* %547, null
  br i1 %548, label %699, label %549

549:                                              ; preds = %546
  %550 = bitcast i64* %3 to i8*
  %551 = bitcast i64* %5 to i8*
  br label %559

552:                                              ; preds = %543, %552
  %553 = phi %struct.Section* [ %557, %552 ], [ %544, %543 ]
  %554 = getelementptr inbounds %struct.Section, %struct.Section* %553, i64 0, i32 1
  %555 = load %struct.SAA*, %struct.SAA** %554, align 8
  tail call void @saa_rewind(%struct.SAA* %555) #12
  %556 = getelementptr inbounds %struct.Section, %struct.Section* %553, i64 0, i32 15
  %557 = load %struct.Section*, %struct.Section** %556, align 8
  %558 = icmp eq %struct.Section* %557, null
  br i1 %558, label %546, label %552

559:                                              ; preds = %549, %686
  %560 = phi %struct.Reloc* [ %547, %549 ], [ %697, %686 ]
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %550) #12
  %561 = getelementptr inbounds %struct.Reloc, %struct.Reloc* %560, i64 0, i32 2
  store i64 -6148914691236517206, i64* %3, align 8
  %562 = load i32, i32* %561, align 4
  %563 = icmp sgt i32 %562, 8
  br i1 %563, label %564, label %565, !prof !4

564:                                              ; preds = %559
  call void @nasm_assert_failed(i8* getelementptr inbounds ([39 x i8], [39 x i8]* @.str.9, i64 0, i64 0), i32 532, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.82, i64 0, i64 0)) #13
  unreachable

565:                                              ; preds = %559
  store i64 0, i64* %3, align 8
  %566 = getelementptr inbounds %struct.Reloc, %struct.Reloc* %560, i64 0, i32 5
  %567 = load %struct.Section*, %struct.Section** %566, align 8
  %568 = getelementptr inbounds %struct.Section, %struct.Section* %567, i64 0, i32 1
  %569 = load %struct.SAA*, %struct.SAA** %568, align 8
  %570 = getelementptr inbounds %struct.Reloc, %struct.Reloc* %560, i64 0, i32 1
  %571 = load i32, i32* %570, align 8
  %572 = sext i32 %571 to i64
  %573 = sext i32 %562 to i64
  call void @saa_fread(%struct.SAA* %569, i64 %572, i8* nonnull %550, i64 %573) #12
  %574 = load i32, i32* %561, align 4
  %575 = icmp sgt i32 %574, 0
  br i1 %575, label %576, label %630

576:                                              ; preds = %565
  %577 = sext i32 %574 to i64
  %578 = add nsw i64 %577, -1
  %579 = and i64 %577, 3
  %580 = icmp ult i64 %578, 3
  br i1 %580, label %613, label %581

581:                                              ; preds = %576
  %582 = sub nsw i64 %577, %579
  br label %583

583:                                              ; preds = %583, %581
  %584 = phi i64 [ %577, %581 ], [ %605, %583 ]
  %585 = phi i64 [ 0, %581 ], [ %610, %583 ]
  %586 = phi i64 [ %582, %581 ], [ %611, %583 ]
  %587 = add nsw i64 %584, -1
  %588 = shl i64 %585, 8
  %589 = getelementptr inbounds [8 x i8], [8 x i8]* %4, i64 0, i64 %587
  %590 = load i8, i8* %589, align 1
  %591 = zext i8 %590 to i64
  %592 = or i64 %588, %591
  %593 = add nsw i64 %584, -2
  %594 = shl i64 %592, 8
  %595 = getelementptr inbounds [8 x i8], [8 x i8]* %4, i64 0, i64 %593
  %596 = load i8, i8* %595, align 1
  %597 = zext i8 %596 to i64
  %598 = or i64 %594, %597
  %599 = add nsw i64 %584, -3
  %600 = shl i64 %598, 8
  %601 = getelementptr inbounds [8 x i8], [8 x i8]* %4, i64 0, i64 %599
  %602 = load i8, i8* %601, align 1
  %603 = zext i8 %602 to i64
  %604 = or i64 %600, %603
  %605 = add nsw i64 %584, -4
  %606 = shl i64 %604, 8
  %607 = getelementptr inbounds [8 x i8], [8 x i8]* %4, i64 0, i64 %605
  %608 = load i8, i8* %607, align 1
  %609 = zext i8 %608 to i64
  %610 = or i64 %606, %609
  %611 = add i64 %586, -4
  %612 = icmp eq i64 %611, 0
  br i1 %612, label %613, label %583

613:                                              ; preds = %583, %576
  %614 = phi i64 [ undef, %576 ], [ %610, %583 ]
  %615 = phi i64 [ %577, %576 ], [ %605, %583 ]
  %616 = phi i64 [ 0, %576 ], [ %610, %583 ]
  %617 = icmp eq i64 %579, 0
  br i1 %617, label %630, label %618

618:                                              ; preds = %613, %618
  %619 = phi i64 [ %622, %618 ], [ %615, %613 ]
  %620 = phi i64 [ %627, %618 ], [ %616, %613 ]
  %621 = phi i64 [ %628, %618 ], [ %579, %613 ]
  %622 = add nsw i64 %619, -1
  %623 = shl i64 %620, 8
  %624 = getelementptr inbounds [8 x i8], [8 x i8]* %4, i64 0, i64 %622
  %625 = load i8, i8* %624, align 1
  %626 = zext i8 %625 to i64
  %627 = or i64 %623, %626
  %628 = add i64 %621, -1
  %629 = icmp eq i64 %628, 0
  br i1 %629, label %630, label %618, !llvm.loop !5

630:                                              ; preds = %613, %618, %565
  %631 = phi i64 [ 0, %565 ], [ %614, %613 ], [ %627, %618 ]
  %632 = getelementptr inbounds %struct.Reloc, %struct.Reloc* %560, i64 0, i32 3
  %633 = load i32, i32* %632, align 8
  %634 = load %struct.Section*, %struct.Section** @sections, align 8
  %635 = icmp eq %struct.Section* %634, null
  br i1 %635, label %686, label %636

636:                                              ; preds = %630, %645
  %637 = phi %struct.Section* [ %647, %645 ], [ %634, %630 ]
  %638 = getelementptr inbounds %struct.Section, %struct.Section* %637, i64 0, i32 11
  %639 = load i32, i32* %638, align 4
  %640 = icmp eq i32 %639, %633
  %641 = getelementptr inbounds %struct.Section, %struct.Section* %637, i64 0, i32 10
  %642 = load i32, i32* %641, align 8
  br i1 %640, label %649, label %643

643:                                              ; preds = %636
  %644 = icmp eq i32 %642, %633
  br i1 %644, label %651, label %645

645:                                              ; preds = %643
  %646 = getelementptr inbounds %struct.Section, %struct.Section* %637, i64 0, i32 15
  %647 = load %struct.Section*, %struct.Section** %646, align 8
  %648 = icmp eq %struct.Section* %647, null
  br i1 %648, label %659, label %636

649:                                              ; preds = %636
  %650 = icmp eq i32 %633, %642
  br i1 %650, label %651, label %653

651:                                              ; preds = %643, %649
  %652 = getelementptr inbounds %struct.Section, %struct.Section* %637, i64 0, i32 6
  br label %655

653:                                              ; preds = %649
  %654 = getelementptr inbounds %struct.Section, %struct.Section* %637, i64 0, i32 7
  br label %655

655:                                              ; preds = %651, %653
  %656 = phi i64* [ %654, %653 ], [ %652, %651 ]
  %657 = load i64, i64* %656, align 8
  %658 = add i64 %657, %631
  br label %659

659:                                              ; preds = %645, %655
  %660 = phi i64 [ %658, %655 ], [ %631, %645 ]
  %661 = getelementptr inbounds %struct.Reloc, %struct.Reloc* %560, i64 0, i32 4
  %662 = load i32, i32* %661, align 4
  br label %663

663:                                              ; preds = %659, %672
  %664 = phi %struct.Section* [ %674, %672 ], [ %634, %659 ]
  %665 = getelementptr inbounds %struct.Section, %struct.Section* %664, i64 0, i32 11
  %666 = load i32, i32* %665, align 4
  %667 = icmp eq i32 %666, %662
  %668 = getelementptr inbounds %struct.Section, %struct.Section* %664, i64 0, i32 10
  %669 = load i32, i32* %668, align 8
  br i1 %667, label %676, label %670

670:                                              ; preds = %663
  %671 = icmp eq i32 %669, %662
  br i1 %671, label %678, label %672

672:                                              ; preds = %670
  %673 = getelementptr inbounds %struct.Section, %struct.Section* %664, i64 0, i32 15
  %674 = load %struct.Section*, %struct.Section** %673, align 8
  %675 = icmp eq %struct.Section* %674, null
  br i1 %675, label %686, label %663

676:                                              ; preds = %663
  %677 = icmp eq i32 %662, %669
  br i1 %677, label %678, label %682

678:                                              ; preds = %670, %676
  %679 = getelementptr inbounds %struct.Section, %struct.Section* %664, i64 0, i32 6
  %680 = load i64, i64* %679, align 8
  %681 = sub i64 %660, %680
  br label %686

682:                                              ; preds = %676
  %683 = getelementptr inbounds %struct.Section, %struct.Section* %664, i64 0, i32 7
  %684 = load i64, i64* %683, align 8
  %685 = sub i64 %660, %684
  br label %686

686:                                              ; preds = %672, %630, %682, %678
  %687 = phi i64 [ %681, %678 ], [ %685, %682 ], [ %631, %630 ], [ %660, %672 ]
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %551)
  store i64 %687, i64* %5, align 8
  %688 = sext i32 %574 to i64
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %550, i8* nonnull align 8 %551, i64 %688, i1 false)
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %551)
  %689 = load %struct.Section*, %struct.Section** %566, align 8
  %690 = getelementptr inbounds %struct.Section, %struct.Section* %689, i64 0, i32 1
  %691 = load %struct.SAA*, %struct.SAA** %690, align 8
  %692 = load i32, i32* %570, align 8
  %693 = sext i32 %692 to i64
  %694 = load i32, i32* %561, align 4
  %695 = sext i32 %694 to i64
  call void @saa_fwrite(%struct.SAA* %691, i64 %693, i8* nonnull %550, i64 %695) #12
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %550) #12
  %696 = getelementptr inbounds %struct.Reloc, %struct.Reloc* %560, i64 0, i32 0
  %697 = load %struct.Reloc*, %struct.Reloc** %696, align 8
  %698 = icmp eq %struct.Reloc* %697, null
  br i1 %698, label %699, label %559

699:                                              ; preds = %686, %546
  %700 = load void ()*, void ()** @do_output, align 8
  call void %700() #12, !callees !7
  %701 = load i32, i32* @map_control, align 4
  %702 = icmp eq i32 %701, 0
  br i1 %702, label %1028, label %703

703:                                              ; preds = %699
  %704 = load %struct._IO_FILE*, %struct._IO_FILE** @rf, align 8
  %705 = call i64 @fwrite(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.83, i64 0, i64 0), i64 17, i64 1, %struct._IO_FILE* %704)
  %706 = load %struct._IO_FILE*, %struct._IO_FILE** @rf, align 8
  br label %707

707:                                              ; preds = %703, %707
  %708 = phi %struct._IO_FILE* [ %706, %703 ], [ %713, %707 ]
  %709 = phi i32 [ 63, %703 ], [ %711, %707 ]
  %710 = call i32 @fputc(i32 45, %struct._IO_FILE* %708)
  %711 = add nsw i32 %709, -1
  %712 = icmp eq i32 %711, 0
  %713 = load %struct._IO_FILE*, %struct._IO_FILE** @rf, align 8
  br i1 %712, label %714, label %707

714:                                              ; preds = %707
  %715 = load i8*, i8** @inname, align 8
  %716 = load i8*, i8** @outname, align 8
  %717 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %713, i8* getelementptr inbounds ([38 x i8], [38 x i8]* @.str.84, i64 0, i64 0), i8* %715, i8* %716)
  %718 = load i32, i32* @map_control, align 4
  %719 = and i32 %718, 1
  %720 = icmp eq i32 %719, 0
  br i1 %720, label %736, label %721

721:                                              ; preds = %714
  %722 = load %struct._IO_FILE*, %struct._IO_FILE** @rf, align 8
  %723 = call i64 @fwrite(i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.85, i64 0, i64 0), i64 18, i64 1, %struct._IO_FILE* %722)
  %724 = load %struct._IO_FILE*, %struct._IO_FILE** @rf, align 8
  br label %725

725:                                              ; preds = %721, %725
  %726 = phi %struct._IO_FILE* [ %724, %721 ], [ %731, %725 ]
  %727 = phi i32 [ 61, %721 ], [ %729, %725 ]
  %728 = call i32 @fputc(i32 45, %struct._IO_FILE* %726)
  %729 = add nsw i32 %727, -1
  %730 = icmp eq i32 %729, 0
  %731 = load %struct._IO_FILE*, %struct._IO_FILE** @rf, align 8
  br i1 %730, label %732, label %725

732:                                              ; preds = %725
  %733 = load i64, i64* @origin, align 8
  %734 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %731, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.86, i64 0, i64 0), i64 %733)
  %735 = load i32, i32* @map_control, align 4
  br label %736

736:                                              ; preds = %714, %732
  %737 = phi i32 [ %718, %714 ], [ %735, %732 ]
  %738 = and i32 %737, 2
  %739 = icmp eq i32 %738, 0
  br i1 %739, label %786, label %740

740:                                              ; preds = %736
  %741 = load %struct._IO_FILE*, %struct._IO_FILE** @rf, align 8
  %742 = call i64 @fwrite(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.87, i64 0, i64 0), i64 22, i64 1, %struct._IO_FILE* %741)
  %743 = load %struct._IO_FILE*, %struct._IO_FILE** @rf, align 8
  br label %744

744:                                              ; preds = %740, %744
  %745 = phi %struct._IO_FILE* [ %743, %740 ], [ %750, %744 ]
  %746 = phi i32 [ 57, %740 ], [ %748, %744 ]
  %747 = call i32 @fputc(i32 45, %struct._IO_FILE* %745)
  %748 = add nsw i32 %746, -1
  %749 = icmp eq i32 %748, 0
  %750 = load %struct._IO_FILE*, %struct._IO_FILE** @rf, align 8
  br i1 %749, label %751, label %744

751:                                              ; preds = %744
  %752 = call i64 @fwrite(i8* getelementptr inbounds ([82 x i8], [82 x i8]* @.str.88, i64 0, i64 0), i64 81, i64 1, %struct._IO_FILE* %750)
  %753 = load %struct.Section*, %struct.Section** @sections, align 8
  %754 = icmp eq %struct.Section* %753, null
  %755 = load %struct._IO_FILE*, %struct._IO_FILE** @rf, align 8
  br i1 %754, label %782, label %756

756:                                              ; preds = %751, %756
  %757 = phi %struct._IO_FILE* [ %781, %756 ], [ %755, %751 ]
  %758 = phi %struct.Section* [ %779, %756 ], [ %753, %751 ]
  %759 = getelementptr inbounds %struct.Section, %struct.Section* %758, i64 0, i32 7
  %760 = load i64, i64* %759, align 8
  %761 = getelementptr inbounds %struct.Section, %struct.Section* %758, i64 0, i32 6
  %762 = load i64, i64* %761, align 8
  %763 = getelementptr inbounds %struct.Section, %struct.Section* %758, i64 0, i32 2
  %764 = load i64, i64* %763, align 8
  %765 = add i64 %764, %762
  %766 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %757, i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.89, i64 0, i64 0), i64 %760, i64 %762, i64 %765, i64 %764)
  %767 = getelementptr inbounds %struct.Section, %struct.Section* %758, i64 0, i32 3
  %768 = load i32, i32* %767, align 8
  %769 = trunc i32 %768 to i8
  %770 = icmp slt i8 %769, 0
  %771 = load %struct._IO_FILE*, %struct._IO_FILE** @rf, align 8
  %772 = select i1 %770, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.90, i64 0, i64 0), i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.91, i64 0, i64 0)
  %773 = call i64 @fwrite(i8* %772, i64 10, i64 1, %struct._IO_FILE* %771)
  %774 = load %struct._IO_FILE*, %struct._IO_FILE** @rf, align 8
  %775 = getelementptr inbounds %struct.Section, %struct.Section* %758, i64 0, i32 0
  %776 = load i8*, i8** %775, align 8
  %777 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %774, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.92, i64 0, i64 0), i8* %776)
  %778 = getelementptr inbounds %struct.Section, %struct.Section* %758, i64 0, i32 15
  %779 = load %struct.Section*, %struct.Section** %778, align 8
  %780 = icmp eq %struct.Section* %779, null
  %781 = load %struct._IO_FILE*, %struct._IO_FILE** @rf, align 8
  br i1 %780, label %782, label %756

782:                                              ; preds = %756, %751
  %783 = phi %struct._IO_FILE* [ %755, %751 ], [ %781, %756 ]
  %784 = call i32 @fputc(i32 10, %struct._IO_FILE* %783)
  %785 = load i32, i32* @map_control, align 4
  br label %786

786:                                              ; preds = %736, %782
  %787 = phi i32 [ %737, %736 ], [ %785, %782 ]
  %788 = and i32 %787, 4
  %789 = icmp eq i32 %788, 0
  br i1 %789, label %900, label %790

790:                                              ; preds = %786
  %791 = load %struct._IO_FILE*, %struct._IO_FILE** @rf, align 8
  %792 = call i64 @fwrite(i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.94, i64 0, i64 0), i64 23, i64 1, %struct._IO_FILE* %791)
  %793 = load %struct._IO_FILE*, %struct._IO_FILE** @rf, align 8
  br label %794

794:                                              ; preds = %790, %794
  %795 = phi %struct._IO_FILE* [ %793, %790 ], [ %800, %794 ]
  %796 = phi i32 [ 56, %790 ], [ %798, %794 ]
  %797 = call i32 @fputc(i32 45, %struct._IO_FILE* %795)
  %798 = add nsw i32 %796, -1
  %799 = icmp eq i32 %798, 0
  %800 = load %struct._IO_FILE*, %struct._IO_FILE** @rf, align 8
  br i1 %799, label %801, label %794

801:                                              ; preds = %794
  %802 = call i64 @fwrite(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.95, i64 0, i64 0), i64 2, i64 1, %struct._IO_FILE* %800)
  %803 = load %struct.Section*, %struct.Section** @sections, align 8
  %804 = icmp eq %struct.Section* %803, null
  br i1 %804, label %900, label %805

805:                                              ; preds = %801, %894
  %806 = phi %struct.Section* [ %898, %894 ], [ %803, %801 ]
  %807 = load %struct._IO_FILE*, %struct._IO_FILE** @rf, align 8
  %808 = getelementptr inbounds %struct.Section, %struct.Section* %806, i64 0, i32 0
  %809 = load i8*, i8** %808, align 8
  %810 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %807, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.96, i64 0, i64 0), i8* %809)
  %811 = load i8*, i8** %808, align 8
  %812 = call i64 @strlen(i8* %811) #14
  %813 = icmp ult i64 %812, 65
  br i1 %813, label %814, label %824

814:                                              ; preds = %805
  %815 = trunc i64 %812 to i32
  %816 = sub nuw nsw i32 65, %815
  %817 = icmp eq i32 %816, 0
  br i1 %817, label %824, label %818

818:                                              ; preds = %814, %818
  %819 = phi i32 [ %822, %818 ], [ %816, %814 ]
  %820 = load %struct._IO_FILE*, %struct._IO_FILE** @rf, align 8
  %821 = call i32 @fputc(i32 45, %struct._IO_FILE* %820)
  %822 = add nsw i32 %819, -1
  %823 = icmp eq i32 %822, 0
  br i1 %823, label %824, label %818

824:                                              ; preds = %818, %814, %805
  %825 = load %struct._IO_FILE*, %struct._IO_FILE** @rf, align 8
  %826 = call i64 @fwrite(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.97, i64 0, i64 0), i64 13, i64 1, %struct._IO_FILE* %825)
  %827 = getelementptr inbounds %struct.Section, %struct.Section* %806, i64 0, i32 3
  %828 = load i32, i32* %827, align 8
  %829 = trunc i32 %828 to i8
  %830 = icmp slt i8 %829, 0
  %831 = load %struct._IO_FILE*, %struct._IO_FILE** @rf, align 8
  br i1 %830, label %832, label %834

832:                                              ; preds = %824
  %833 = call i64 @fwrite(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.50, i64 0, i64 0), i64 8, i64 1, %struct._IO_FILE* %831)
  br label %836

834:                                              ; preds = %824
  %835 = call i64 @fwrite(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.49, i64 0, i64 0), i64 6, i64 1, %struct._IO_FILE* %831)
  br label %836

836:                                              ; preds = %834, %832
  %837 = load %struct._IO_FILE*, %struct._IO_FILE** @rf, align 8
  %838 = getelementptr inbounds %struct.Section, %struct.Section* %806, i64 0, i32 2
  %839 = load i64, i64* %838, align 8
  %840 = getelementptr inbounds %struct.Section, %struct.Section* %806, i64 0, i32 6
  %841 = load i64, i64* %840, align 8
  %842 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %837, i8* getelementptr inbounds ([47 x i8], [47 x i8]* @.str.98, i64 0, i64 0), i64 %839, i64 %841)
  %843 = load i32, i32* %827, align 8
  %844 = and i32 %843, 2
  %845 = icmp eq i32 %844, 0
  %846 = load %struct._IO_FILE*, %struct._IO_FILE** @rf, align 8
  br i1 %845, label %851, label %847

847:                                              ; preds = %836
  %848 = getelementptr inbounds %struct.Section, %struct.Section* %806, i64 0, i32 4
  %849 = load i64, i64* %848, align 8
  %850 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %846, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.99, i64 0, i64 0), i64 %849)
  br label %853

851:                                              ; preds = %836
  %852 = call i64 @fwrite(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @bin_cleanup.not_defined, i64 0, i64 0), i64 11, i64 1, %struct._IO_FILE* %846)
  br label %853

853:                                              ; preds = %851, %847
  %854 = load %struct._IO_FILE*, %struct._IO_FILE** @rf, align 8
  %855 = call i64 @fwrite(i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.100, i64 0, i64 0), i64 12, i64 1, %struct._IO_FILE* %854)
  %856 = load i32, i32* %827, align 8
  %857 = and i32 %856, 4
  %858 = icmp eq i32 %857, 0
  %859 = load %struct._IO_FILE*, %struct._IO_FILE** @rf, align 8
  br i1 %858, label %864, label %860

860:                                              ; preds = %853
  %861 = getelementptr inbounds %struct.Section, %struct.Section* %806, i64 0, i32 8
  %862 = load i8*, i8** %861, align 8
  %863 = call i32 @fputs(i8* %862, %struct._IO_FILE* %859)
  br label %866

864:                                              ; preds = %853
  %865 = call i64 @fwrite(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @bin_cleanup.not_defined, i64 0, i64 0), i64 11, i64 1, %struct._IO_FILE* %859)
  br label %866

866:                                              ; preds = %864, %860
  %867 = load %struct._IO_FILE*, %struct._IO_FILE** @rf, align 8
  %868 = getelementptr inbounds %struct.Section, %struct.Section* %806, i64 0, i32 7
  %869 = load i64, i64* %868, align 8
  %870 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %867, i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str.102, i64 0, i64 0), i64 %869)
  %871 = load i32, i32* %827, align 8
  %872 = and i32 %871, 16
  %873 = icmp eq i32 %872, 0
  %874 = load %struct._IO_FILE*, %struct._IO_FILE** @rf, align 8
  br i1 %873, label %879, label %875

875:                                              ; preds = %866
  %876 = getelementptr inbounds %struct.Section, %struct.Section* %806, i64 0, i32 5
  %877 = load i64, i64* %876, align 8
  %878 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %874, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.99, i64 0, i64 0), i64 %877)
  br label %881

879:                                              ; preds = %866
  %880 = call i64 @fwrite(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @bin_cleanup.not_defined, i64 0, i64 0), i64 11, i64 1, %struct._IO_FILE* %874)
  br label %881

881:                                              ; preds = %879, %875
  %882 = load %struct._IO_FILE*, %struct._IO_FILE** @rf, align 8
  %883 = call i64 @fwrite(i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.103, i64 0, i64 0), i64 12, i64 1, %struct._IO_FILE* %882)
  %884 = load i32, i32* %827, align 8
  %885 = and i32 %884, 32
  %886 = icmp eq i32 %885, 0
  %887 = load %struct._IO_FILE*, %struct._IO_FILE** @rf, align 8
  br i1 %886, label %892, label %888

888:                                              ; preds = %881
  %889 = getelementptr inbounds %struct.Section, %struct.Section* %806, i64 0, i32 9
  %890 = load i8*, i8** %889, align 8
  %891 = call i32 @fputs(i8* %890, %struct._IO_FILE* %887)
  br label %894

892:                                              ; preds = %881
  %893 = call i64 @fwrite(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @bin_cleanup.not_defined, i64 0, i64 0), i64 11, i64 1, %struct._IO_FILE* %887)
  br label %894

894:                                              ; preds = %892, %888
  %895 = load %struct._IO_FILE*, %struct._IO_FILE** @rf, align 8
  %896 = call i64 @fwrite(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.95, i64 0, i64 0), i64 2, i64 1, %struct._IO_FILE* %895)
  %897 = getelementptr inbounds %struct.Section, %struct.Section* %806, i64 0, i32 15
  %898 = load %struct.Section*, %struct.Section** %897, align 8
  %899 = icmp eq %struct.Section* %898, null
  br i1 %899, label %900, label %805

900:                                              ; preds = %894, %801, %786
  %901 = load i32, i32* @map_control, align 4
  %902 = and i32 %901, 8
  %903 = icmp eq i32 %902, 0
  br i1 %903, label %1016, label %904

904:                                              ; preds = %900
  %905 = bitcast i32* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %905) #12
  store i32 -1431655766, i32* %6, align 4
  %906 = bitcast i64* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %906) #12
  store i64 -6148914691236517206, i64* %7, align 8
  %907 = load %struct._IO_FILE*, %struct._IO_FILE** @rf, align 8
  %908 = call i64 @fwrite(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.104, i64 0, i64 0), i64 11, i64 1, %struct._IO_FILE* %907)
  %909 = load %struct._IO_FILE*, %struct._IO_FILE** @rf, align 8
  br label %910

910:                                              ; preds = %904, %910
  %911 = phi %struct._IO_FILE* [ %909, %904 ], [ %916, %910 ]
  %912 = phi i32 [ 68, %904 ], [ %914, %910 ]
  %913 = call i32 @fputc(i32 45, %struct._IO_FILE* %911)
  %914 = add nsw i32 %912, -1
  %915 = icmp eq i32 %914, 0
  %916 = load %struct._IO_FILE*, %struct._IO_FILE** @rf, align 8
  br i1 %915, label %917, label %910

917:                                              ; preds = %910
  %918 = call i64 @fwrite(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.95, i64 0, i64 0), i64 2, i64 1, %struct._IO_FILE* %916)
  %919 = load %struct.bin_label*, %struct.bin_label** @no_seg_labels, align 8
  %920 = icmp eq %struct.bin_label* %919, null
  br i1 %920, label %954, label %921

921:                                              ; preds = %917
  %922 = load %struct._IO_FILE*, %struct._IO_FILE** @rf, align 8
  %923 = call i64 @fwrite(i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.105, i64 0, i64 0), i64 16, i64 1, %struct._IO_FILE* %922)
  %924 = load %struct._IO_FILE*, %struct._IO_FILE** @rf, align 8
  br label %925

925:                                              ; preds = %921, %925
  %926 = phi %struct._IO_FILE* [ %924, %921 ], [ %931, %925 ]
  %927 = phi i32 [ 63, %921 ], [ %929, %925 ]
  %928 = call i32 @fputc(i32 45, %struct._IO_FILE* %926)
  %929 = add nsw i32 %927, -1
  %930 = icmp eq i32 %929, 0
  %931 = load %struct._IO_FILE*, %struct._IO_FILE** @rf, align 8
  br i1 %930, label %932, label %925

932:                                              ; preds = %925
  %933 = call i64 @fwrite(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.106, i64 0, i64 0), i64 17, i64 1, %struct._IO_FILE* %931)
  %934 = load %struct.bin_label*, %struct.bin_label** @no_seg_labels, align 8
  %935 = icmp eq %struct.bin_label* %934, null
  br i1 %935, label %951, label %936

936:                                              ; preds = %932, %943
  %937 = phi %struct.bin_label* [ %949, %943 ], [ %934, %932 ]
  %938 = getelementptr inbounds %struct.bin_label, %struct.bin_label* %937, i64 0, i32 0
  %939 = load i8*, i8** %938, align 8
  %940 = call i32 @lookup_label(i8* %939, i32* nonnull %6, i64* nonnull %7) #12
  %941 = icmp eq i32 %940, -1
  br i1 %941, label %942, label %943, !prof !4

942:                                              ; preds = %936
  call void @nasm_assert_failed(i8* getelementptr inbounds ([39 x i8], [39 x i8]* @.str.9, i64 0, i64 0), i32 658, i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.107, i64 0, i64 0)) #13
  unreachable

943:                                              ; preds = %936
  %944 = load %struct._IO_FILE*, %struct._IO_FILE** @rf, align 8
  %945 = load i64, i64* %7, align 8
  %946 = load i8*, i8** %938, align 8
  %947 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %944, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.108, i64 0, i64 0), i64 %945, i8* %946)
  %948 = getelementptr inbounds %struct.bin_label, %struct.bin_label* %937, i64 0, i32 1
  %949 = load %struct.bin_label*, %struct.bin_label** %948, align 8
  %950 = icmp eq %struct.bin_label* %949, null
  br i1 %950, label %951, label %936

951:                                              ; preds = %943, %932
  %952 = load %struct._IO_FILE*, %struct._IO_FILE** @rf, align 8
  %953 = call i64 @fwrite(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.95, i64 0, i64 0), i64 2, i64 1, %struct._IO_FILE* %952)
  br label %954

954:                                              ; preds = %917, %951
  %955 = load %struct.Section*, %struct.Section** @sections, align 8
  %956 = icmp eq %struct.Section* %955, null
  br i1 %956, label %1014, label %957

957:                                              ; preds = %954, %1010
  %958 = phi %struct.Section* [ %1012, %1010 ], [ %955, %954 ]
  %959 = getelementptr inbounds %struct.Section, %struct.Section* %958, i64 0, i32 12
  %960 = load %struct.bin_label*, %struct.bin_label** %959, align 8
  %961 = icmp eq %struct.bin_label* %960, null
  br i1 %961, label %1010, label %962

962:                                              ; preds = %957
  %963 = load %struct._IO_FILE*, %struct._IO_FILE** @rf, align 8
  %964 = getelementptr inbounds %struct.Section, %struct.Section* %958, i64 0, i32 0
  %965 = load i8*, i8** %964, align 8
  %966 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %963, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.96, i64 0, i64 0), i8* %965)
  %967 = load i8*, i8** %964, align 8
  %968 = call i64 @strlen(i8* %967) #14
  %969 = trunc i64 %968 to i32
  %970 = sub i32 65, %969
  %971 = icmp eq i32 %970, 0
  %972 = load %struct._IO_FILE*, %struct._IO_FILE** @rf, align 8
  br i1 %971, label %980, label %973

973:                                              ; preds = %962, %973
  %974 = phi %struct._IO_FILE* [ %979, %973 ], [ %972, %962 ]
  %975 = phi i32 [ %977, %973 ], [ %970, %962 ]
  %976 = call i32 @fputc(i32 45, %struct._IO_FILE* %974)
  %977 = add nsw i32 %975, -1
  %978 = icmp eq i32 %977, 0
  %979 = load %struct._IO_FILE*, %struct._IO_FILE** @rf, align 8
  br i1 %978, label %980, label %973

980:                                              ; preds = %973, %962
  %981 = phi %struct._IO_FILE* [ %972, %962 ], [ %979, %973 ]
  %982 = call i64 @fwrite(i8* getelementptr inbounds ([44 x i8], [44 x i8]* @.str.109, i64 0, i64 0), i64 43, i64 1, %struct._IO_FILE* %981)
  %983 = load %struct.bin_label*, %struct.bin_label** %959, align 8
  %984 = icmp eq %struct.bin_label* %983, null
  br i1 %984, label %1007, label %985

985:                                              ; preds = %980
  %986 = getelementptr inbounds %struct.Section, %struct.Section* %958, i64 0, i32 6
  %987 = getelementptr inbounds %struct.Section, %struct.Section* %958, i64 0, i32 7
  br label %988

988:                                              ; preds = %985, %995
  %989 = phi %struct.bin_label* [ %983, %985 ], [ %1005, %995 ]
  %990 = getelementptr inbounds %struct.bin_label, %struct.bin_label* %989, i64 0, i32 0
  %991 = load i8*, i8** %990, align 8
  %992 = call i32 @lookup_label(i8* %991, i32* nonnull %6, i64* nonnull %7) #12
  %993 = icmp eq i32 %992, -1
  br i1 %993, label %994, label %995, !prof !4

994:                                              ; preds = %988
  call void @nasm_assert_failed(i8* getelementptr inbounds ([39 x i8], [39 x i8]* @.str.9, i64 0, i64 0), i32 671, i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.107, i64 0, i64 0)) #13
  unreachable

995:                                              ; preds = %988
  %996 = load %struct._IO_FILE*, %struct._IO_FILE** @rf, align 8
  %997 = load i64, i64* %986, align 8
  %998 = load i64, i64* %7, align 8
  %999 = add i64 %998, %997
  %1000 = load i64, i64* %987, align 8
  %1001 = add i64 %1000, %998
  %1002 = load i8*, i8** %990, align 8
  %1003 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %996, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.110, i64 0, i64 0), i64 %999, i64 %1001, i8* %1002)
  %1004 = getelementptr inbounds %struct.bin_label, %struct.bin_label* %989, i64 0, i32 1
  %1005 = load %struct.bin_label*, %struct.bin_label** %1004, align 8
  %1006 = icmp eq %struct.bin_label* %1005, null
  br i1 %1006, label %1007, label %988

1007:                                             ; preds = %995, %980
  %1008 = load %struct._IO_FILE*, %struct._IO_FILE** @rf, align 8
  %1009 = call i32 @fputc(i32 10, %struct._IO_FILE* %1008)
  br label %1010

1010:                                             ; preds = %957, %1007
  %1011 = getelementptr inbounds %struct.Section, %struct.Section* %958, i64 0, i32 15
  %1012 = load %struct.Section*, %struct.Section** %1011, align 8
  %1013 = icmp eq %struct.Section* %1012, null
  br i1 %1013, label %1014, label %957

1014:                                             ; preds = %1010, %954
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %906) #12
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %905) #12
  %1015 = load i32, i32* @map_control, align 4
  br label %1016

1016:                                             ; preds = %900, %1014
  %1017 = phi i32 [ %901, %900 ], [ %1015, %1014 ]
  %1018 = icmp eq i32 %1017, 0
  br i1 %1018, label %1028, label %1019

1019:                                             ; preds = %1016
  %1020 = load %struct._IO_FILE*, %struct._IO_FILE** @rf, align 8
  %1021 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8
  %1022 = icmp eq %struct._IO_FILE* %1020, %1021
  %1023 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8
  %1024 = icmp eq %struct._IO_FILE* %1020, %1023
  %1025 = or i1 %1022, %1024
  br i1 %1025, label %1028, label %1026

1026:                                             ; preds = %1019
  %1027 = call i32 @fclose(%struct._IO_FILE* %1020)
  br label %1028

1028:                                             ; preds = %699, %1019, %1016, %1026
  %1029 = load %struct.Section*, %struct.Section** @sections, align 8
  %1030 = icmp eq %struct.Section* %1029, null
  br i1 %1030, label %1031, label %1034

1031:                                             ; preds = %1072, %1028
  %1032 = load %struct.bin_label*, %struct.bin_label** @no_seg_labels, align 8
  %1033 = icmp eq %struct.bin_label* %1032, null
  br i1 %1033, label %1084, label %1076

1034:                                             ; preds = %1028, %1072
  %1035 = phi %struct.Section* [ %1074, %1072 ], [ %1029, %1028 ]
  %1036 = getelementptr inbounds %struct.Section, %struct.Section* %1035, i64 0, i32 15
  %1037 = bitcast %struct.Section** %1036 to i64*
  %1038 = load i64, i64* %1037, align 8
  store i64 %1038, i64* bitcast (%struct.Section** @sections to i64*), align 8
  %1039 = getelementptr inbounds %struct.Section, %struct.Section* %1035, i64 0, i32 1
  %1040 = load %struct.SAA*, %struct.SAA** %1039, align 8
  call void @saa_free(%struct.SAA* %1040) #12
  %1041 = getelementptr inbounds %struct.Section, %struct.Section* %1035, i64 0, i32 0
  %1042 = load i8*, i8** %1041, align 8
  call void @nasm_free(i8* %1042) #12
  %1043 = getelementptr inbounds %struct.Section, %struct.Section* %1035, i64 0, i32 3
  %1044 = load i32, i32* %1043, align 8
  %1045 = and i32 %1044, 4
  %1046 = icmp eq i32 %1045, 0
  br i1 %1046, label %1051, label %1047

1047:                                             ; preds = %1034
  %1048 = getelementptr inbounds %struct.Section, %struct.Section* %1035, i64 0, i32 8
  %1049 = load i8*, i8** %1048, align 8
  call void @nasm_free(i8* %1049) #12
  %1050 = load i32, i32* %1043, align 8
  br label %1051

1051:                                             ; preds = %1034, %1047
  %1052 = phi i32 [ %1044, %1034 ], [ %1050, %1047 ]
  %1053 = and i32 %1052, 32
  %1054 = icmp eq i32 %1053, 0
  br i1 %1054, label %1058, label %1055

1055:                                             ; preds = %1051
  %1056 = getelementptr inbounds %struct.Section, %struct.Section* %1035, i64 0, i32 9
  %1057 = load i8*, i8** %1056, align 8
  call void @nasm_free(i8* %1057) #12
  br label %1058

1058:                                             ; preds = %1051, %1055
  %1059 = getelementptr inbounds %struct.Section, %struct.Section* %1035, i64 0, i32 12
  %1060 = load %struct.bin_label*, %struct.bin_label** %1059, align 8
  %1061 = icmp eq %struct.bin_label* %1060, null
  br i1 %1061, label %1072, label %1062

1062:                                             ; preds = %1058
  %1063 = bitcast %struct.bin_label** %1059 to i64*
  br label %1064

1064:                                             ; preds = %1062, %1064
  %1065 = phi %struct.bin_label* [ %1060, %1062 ], [ %1070, %1064 ]
  %1066 = getelementptr inbounds %struct.bin_label, %struct.bin_label* %1065, i64 0, i32 1
  %1067 = bitcast %struct.bin_label** %1066 to i64*
  %1068 = load i64, i64* %1067, align 8
  store i64 %1068, i64* %1063, align 8
  %1069 = bitcast %struct.bin_label* %1065 to i8*
  call void @nasm_free(i8* nonnull %1069) #12
  %1070 = load %struct.bin_label*, %struct.bin_label** %1059, align 8
  %1071 = icmp eq %struct.bin_label* %1070, null
  br i1 %1071, label %1072, label %1064

1072:                                             ; preds = %1064, %1058
  %1073 = bitcast %struct.Section* %1035 to i8*
  call void @nasm_free(i8* nonnull %1073) #12
  %1074 = load %struct.Section*, %struct.Section** @sections, align 8
  %1075 = icmp eq %struct.Section* %1074, null
  br i1 %1075, label %1031, label %1034

1076:                                             ; preds = %1031, %1076
  %1077 = phi %struct.bin_label* [ %1082, %1076 ], [ %1032, %1031 ]
  %1078 = getelementptr inbounds %struct.bin_label, %struct.bin_label* %1077, i64 0, i32 1
  %1079 = bitcast %struct.bin_label** %1078 to i64*
  %1080 = load i64, i64* %1079, align 8
  store i64 %1080, i64* bitcast (%struct.bin_label** @no_seg_labels to i64*), align 8
  %1081 = bitcast %struct.bin_label* %1077 to i8*
  call void @nasm_free(i8* nonnull %1081) #12
  %1082 = load %struct.bin_label*, %struct.bin_label** @no_seg_labels, align 8
  %1083 = icmp eq %struct.bin_label* %1082, null
  br i1 %1083, label %1084, label %1076

1084:                                             ; preds = %1076, %1031
  %1085 = load %struct.Reloc*, %struct.Reloc** @relocs, align 8
  %1086 = icmp eq %struct.Reloc* %1085, null
  br i1 %1086, label %1094, label %1087

1087:                                             ; preds = %1084, %1087
  %1088 = phi %struct.Reloc* [ %1092, %1087 ], [ %1085, %1084 ]
  %1089 = bitcast %struct.Reloc* %1088 to i64*
  %1090 = load i64, i64* %1089, align 8
  %1091 = bitcast %struct.Reloc* %1088 to i8*
  call void @nasm_free(i8* nonnull %1091) #12
  store i64 %1090, i64* bitcast (%struct.Reloc** @relocs to i64*), align 8
  %1092 = inttoptr i64 %1090 to %struct.Reloc*
  %1093 = icmp eq i64 %1090, 0
  br i1 %1093, label %1094, label %1087

1094:                                             ; preds = %1087, %1084
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %8)
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @ith_init() #0 {
  store void ()* @do_output_ith, void ()** @do_output, align 8
  store %struct.Reloc* null, %struct.Reloc** @relocs, align 8
  store %struct.Reloc** @relocs, %struct.Reloc*** @reloctail, align 8
  store i1 false, i1* @origin_defined, align 4
  store %struct.bin_label* null, %struct.bin_label** @no_seg_labels, align 8
  store %struct.bin_label** @no_seg_labels, %struct.bin_label*** @nsl_tail, align 8
  %1 = tail call noalias i8* @nasm_zalloc(i64 120) #11
  store i8* %1, i8** bitcast (%struct.Section** @last_section to i8**), align 8
  store i8* %1, i8** bitcast (%struct.Section** @sections to i8**), align 8
  %2 = tail call noalias i8* @nasm_strdup(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.11, i64 0, i64 0)) #12
  %3 = load %struct.Section*, %struct.Section** @last_section, align 8
  %4 = getelementptr inbounds %struct.Section, %struct.Section* %3, i64 0, i32 0
  store i8* %2, i8** %4, align 8
  %5 = tail call %struct.SAA* @saa_init(i64 1) #12
  %6 = load %struct.Section*, %struct.Section** @last_section, align 8
  %7 = getelementptr inbounds %struct.Section, %struct.Section* %6, i64 0, i32 1
  store %struct.SAA* %5, %struct.SAA** %7, align 8
  %8 = getelementptr inbounds %struct.Section, %struct.Section* %6, i64 0, i32 3
  store i32 192, i32* %8, align 8
  %9 = getelementptr inbounds %struct.Section, %struct.Section* %6, i64 0, i32 12
  %10 = getelementptr inbounds %struct.Section, %struct.Section* %6, i64 0, i32 13
  store %struct.bin_label** %9, %struct.bin_label*** %10, align 8
  %11 = tail call i32 @seg_alloc() #12
  %12 = load %struct.Section*, %struct.Section** @last_section, align 8
  %13 = getelementptr inbounds %struct.Section, %struct.Section* %12, i64 0, i32 10
  store i32 %11, i32* %13, align 8
  %14 = tail call i32 @seg_alloc() #12
  %15 = load %struct.Section*, %struct.Section** @last_section, align 8
  %16 = getelementptr inbounds %struct.Section, %struct.Section* %15, i64 0, i32 11
  store i32 %14, i32* %16, align 4
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @srec_init() #0 {
  store void ()* @do_output_srec, void ()** @do_output, align 8
  store %struct.Reloc* null, %struct.Reloc** @relocs, align 8
  store %struct.Reloc** @relocs, %struct.Reloc*** @reloctail, align 8
  store i1 false, i1* @origin_defined, align 4
  store %struct.bin_label* null, %struct.bin_label** @no_seg_labels, align 8
  store %struct.bin_label** @no_seg_labels, %struct.bin_label*** @nsl_tail, align 8
  %1 = tail call noalias i8* @nasm_zalloc(i64 120) #11
  store i8* %1, i8** bitcast (%struct.Section** @last_section to i8**), align 8
  store i8* %1, i8** bitcast (%struct.Section** @sections to i8**), align 8
  %2 = tail call noalias i8* @nasm_strdup(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.11, i64 0, i64 0)) #12
  %3 = load %struct.Section*, %struct.Section** @last_section, align 8
  %4 = getelementptr inbounds %struct.Section, %struct.Section* %3, i64 0, i32 0
  store i8* %2, i8** %4, align 8
  %5 = tail call %struct.SAA* @saa_init(i64 1) #12
  %6 = load %struct.Section*, %struct.Section** @last_section, align 8
  %7 = getelementptr inbounds %struct.Section, %struct.Section* %6, i64 0, i32 1
  store %struct.SAA* %5, %struct.SAA** %7, align 8
  %8 = getelementptr inbounds %struct.Section, %struct.Section* %6, i64 0, i32 3
  store i32 192, i32* %8, align 8
  %9 = getelementptr inbounds %struct.Section, %struct.Section* %6, i64 0, i32 12
  %10 = getelementptr inbounds %struct.Section, %struct.Section* %6, i64 0, i32 13
  store %struct.bin_label** %9, %struct.bin_label*** %10, align 8
  %11 = tail call i32 @seg_alloc() #12
  %12 = load %struct.Section*, %struct.Section** @last_section, align 8
  %13 = getelementptr inbounds %struct.Section, %struct.Section* %12, i64 0, i32 10
  store i32 %11, i32* %13, align 8
  %14 = tail call i32 @seg_alloc() #12
  %15 = load %struct.Section*, %struct.Section** @last_section, align 8
  %16 = getelementptr inbounds %struct.Section, %struct.Section* %15, i64 0, i32 11
  store i32 %14, i32* %16, align 4
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @do_output_bin() #0 {
  %1 = load %struct.Section*, %struct.Section** @sections, align 8
  %2 = icmp eq %struct.Section* %1, null
  br i1 %2, label %35, label %3

3:                                                ; preds = %0
  %4 = load i64, i64* @origin, align 8
  br label %5

5:                                                ; preds = %3, %30
  %6 = phi %struct.Section* [ %33, %30 ], [ %1, %3 ]
  %7 = phi i64 [ %31, %30 ], [ %4, %3 ]
  %8 = getelementptr inbounds %struct.Section, %struct.Section* %6, i64 0, i32 3
  %9 = load i32, i32* %8, align 8
  %10 = trunc i32 %9 to i8
  %11 = icmp slt i8 %10, 0
  br i1 %11, label %12, label %30

12:                                               ; preds = %5
  %13 = getelementptr inbounds %struct.Section, %struct.Section* %6, i64 0, i32 2
  %14 = load i64, i64* %13, align 8
  %15 = icmp eq i64 %14, 0
  br i1 %15, label %30, label %16

16:                                               ; preds = %12
  %17 = getelementptr inbounds %struct.Section, %struct.Section* %6, i64 0, i32 6
  %18 = load i64, i64* %17, align 8
  %19 = icmp ult i64 %18, %7
  br i1 %19, label %20, label %21, !prof !4

20:                                               ; preds = %16
  tail call void @nasm_assert_failed(i8* getelementptr inbounds ([39 x i8], [39 x i8]* @.str.9, i64 0, i64 0), i32 1406, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.10, i64 0, i64 0)) #13
  unreachable

21:                                               ; preds = %16
  %22 = sub i64 %18, %7
  %23 = load %struct._IO_FILE*, %struct._IO_FILE** @ofile, align 8
  tail call void @fwritezero(i64 %22, %struct._IO_FILE* %23) #12
  %24 = getelementptr inbounds %struct.Section, %struct.Section* %6, i64 0, i32 1
  %25 = load %struct.SAA*, %struct.SAA** %24, align 8
  %26 = load %struct._IO_FILE*, %struct._IO_FILE** @ofile, align 8
  tail call void @saa_fpwrite(%struct.SAA* %25, %struct._IO_FILE* %26) #12
  %27 = load i64, i64* %17, align 8
  %28 = load i64, i64* %13, align 8
  %29 = add i64 %28, %27
  br label %30

30:                                               ; preds = %12, %5, %21
  %31 = phi i64 [ %7, %12 ], [ %29, %21 ], [ %7, %5 ]
  %32 = getelementptr inbounds %struct.Section, %struct.Section* %6, i64 0, i32 15
  %33 = load %struct.Section*, %struct.Section** %32, align 8
  %34 = icmp eq %struct.Section* %33, null
  br i1 %34, label %35, label %5

35:                                               ; preds = %30, %0
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #3

; Function Attrs: cold noreturn
declare void @nasm_assert_failed(i8*, i32, i8*) local_unnamed_addr #4

declare void @fwritezero(i64, %struct._IO_FILE*) local_unnamed_addr #1

declare void @saa_fpwrite(%struct.SAA*, %struct._IO_FILE*) local_unnamed_addr #1

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #3

; Function Attrs: allocsize(0)
declare noalias i8* @nasm_zalloc(i64) local_unnamed_addr #5

declare noalias i8* @nasm_strdup(i8*) local_unnamed_addr #1

declare %struct.SAA* @saa_init(i64) local_unnamed_addr #1

declare i32 @seg_alloc() local_unnamed_addr #1

declare void @nasm_nonfatal(i8*, ...) local_unnamed_addr #1

; Function Attrs: cold noreturn
declare void @nasm_panic(i8*, ...) local_unnamed_addr #4

declare void @nasm_warn(i32, i8*, ...) local_unnamed_addr #1

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #3

declare void @saa_wbytes(%struct.SAA*, i8*, i64) local_unnamed_addr #1

declare i64 @realsize(i32, i64) local_unnamed_addr #1

; Function Attrs: allocsize(0)
declare noalias i8* @nasm_malloc(i64) local_unnamed_addr #5

; Function Attrs: nofree nounwind readonly
declare i32 @strcmp(i8* nocapture, i8* nocapture) local_unnamed_addr #6

; Function Attrs: argmemonly nofree nounwind readonly
declare i64 @strlen(i8* nocapture) local_unnamed_addr #7

; Function Attrs: nofree nounwind
declare i8* @strcpy(i8* returned, i8* nocapture readonly) local_unnamed_addr #8

declare void @define_label(i8*, i32, i64, i1 zeroext) local_unnamed_addr #1

declare void @nasm_free(i8*) local_unnamed_addr #1

; Function Attrs: nofree nounwind readonly
declare i64 @strcspn(i8* nocapture, i8* nocapture) local_unnamed_addr #6

; Function Attrs: nofree nounwind readonly
declare i32 @strncasecmp(i8* nocapture, i8* nocapture, i64) local_unnamed_addr #6

declare void @stdscan_reset() local_unnamed_addr #1

declare void @stdscan_set(i8*) local_unnamed_addr #1

declare %struct.expr* @evaluate(i32 (i8*, %struct.tokenval*)*, i8*, %struct.tokenval*, i32*, i1 zeroext, %struct.eval_hints*) local_unnamed_addr #1

declare i32 @stdscan(i8*, %struct.tokenval*) #1

declare zeroext i1 @is_really_simple(%struct.expr*) local_unnamed_addr #1

declare i64 @reloc_value(%struct.expr*) local_unnamed_addr #1

; Function Attrs: nofree nounwind readonly
declare i64 @strspn(i8* nocapture, i8* nocapture) local_unnamed_addr #6

; Function Attrs: nofree nounwind readonly
declare i32 @strcasecmp(i8* nocapture, i8* nocapture) local_unnamed_addr #6

declare %struct._IO_FILE* @nasm_open_write(i8*, i32) local_unnamed_addr #1

declare void @nasm_debug(i8*, ...) local_unnamed_addr #1

; Function Attrs: cold noreturn
declare void @nasm_fatal(i8*, ...) local_unnamed_addr #4

declare void @saa_rewind(%struct.SAA*) local_unnamed_addr #1

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #3

declare void @saa_fread(%struct.SAA*, i64, i8*, i64) local_unnamed_addr #1

declare void @saa_fwrite(%struct.SAA*, i64, i8*, i64) local_unnamed_addr #1

; Function Attrs: nofree nounwind
declare i32 @fprintf(%struct._IO_FILE* nocapture, i8* nocapture readonly, ...) local_unnamed_addr #8

; Function Attrs: nofree nounwind
declare i32 @fputc(i32, %struct._IO_FILE* nocapture) local_unnamed_addr #8

; Function Attrs: nofree nounwind
declare i32 @fputs(i8* nocapture readonly, %struct._IO_FILE* nocapture) local_unnamed_addr #8

declare i32 @lookup_label(i8*, i32*, i64*) local_unnamed_addr #1

; Function Attrs: nofree nounwind
declare i32 @fclose(%struct._IO_FILE* nocapture) local_unnamed_addr #8

declare void @saa_free(%struct.SAA*) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define internal void @do_output_ith() #0 {
  %1 = alloca [523 x i8], align 16
  %2 = alloca [32 x i8], align 16
  %3 = getelementptr inbounds [32 x i8], [32 x i8]* %2, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %3) #12
  %4 = getelementptr inbounds [32 x i8], [32 x i8]* %2, i64 0, i64 1
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %3, i8 -86, i64 32, i1 false)
  %5 = load %struct.Section*, %struct.Section** @sections, align 8
  %6 = icmp eq %struct.Section* %5, null
  br i1 %6, label %53, label %7

7:                                                ; preds = %0, %48
  %8 = phi %struct.Section* [ %51, %48 ], [ %5, %0 ]
  %9 = phi i64 [ %49, %48 ], [ 0, %0 ]
  %10 = getelementptr inbounds %struct.Section, %struct.Section* %8, i64 0, i32 3
  %11 = load i32, i32* %10, align 8
  %12 = trunc i32 %11 to i8
  %13 = icmp slt i8 %12, 0
  br i1 %13, label %14, label %48

14:                                               ; preds = %7
  %15 = getelementptr inbounds %struct.Section, %struct.Section* %8, i64 0, i32 2
  %16 = load i64, i64* %15, align 8
  %17 = icmp eq i64 %16, 0
  br i1 %17, label %48, label %18

18:                                               ; preds = %14
  %19 = getelementptr inbounds %struct.Section, %struct.Section* %8, i64 0, i32 6
  %20 = load i64, i64* %19, align 8
  %21 = getelementptr inbounds %struct.Section, %struct.Section* %8, i64 0, i32 1
  %22 = load %struct.SAA*, %struct.SAA** %21, align 8
  call void @saa_rewind(%struct.SAA* %22) #12
  br label %23

23:                                               ; preds = %18, %33
  %24 = phi i64 [ %16, %18 ], [ %46, %33 ]
  %25 = phi i64 [ %9, %18 ], [ %34, %33 ]
  %26 = phi i64 [ %20, %18 ], [ %45, %33 ]
  %27 = lshr i64 %26, 16
  %28 = icmp eq i64 %27, %25
  br i1 %28, label %33, label %29

29:                                               ; preds = %23
  %30 = lshr i64 %26, 24
  %31 = trunc i64 %30 to i8
  store i8 %31, i8* %3, align 16
  %32 = trunc i64 %27 to i8
  store i8 %32, i8* %4, align 1
  call fastcc void @write_ith_record(i32 2, i16 zeroext 0, i8 zeroext 4, i8* nonnull %3)
  br label %33

33:                                               ; preds = %23, %29
  %34 = phi i64 [ %27, %29 ], [ %25, %23 ]
  %35 = trunc i64 %26 to i32
  %36 = and i32 %35, 31
  %37 = sub nuw nsw i32 32, %36
  %38 = zext i32 %37 to i64
  %39 = icmp ult i64 %24, %38
  %40 = trunc i64 %24 to i32
  %41 = select i1 %39, i32 %40, i32 %37
  %42 = load %struct.SAA*, %struct.SAA** %21, align 8
  %43 = zext i32 %41 to i64
  call void @saa_rnbytes(%struct.SAA* %42, i8* nonnull %3, i64 %43) #12
  %44 = trunc i64 %26 to i16
  call fastcc void @write_ith_record(i32 %41, i16 zeroext %44, i8 zeroext 0, i8* nonnull %3)
  %45 = add i64 %26, %43
  %46 = sub i64 %24, %43
  %47 = icmp eq i64 %46, 0
  br i1 %47, label %48, label %23

48:                                               ; preds = %33, %14, %7
  %49 = phi i64 [ %9, %14 ], [ %9, %7 ], [ %34, %33 ]
  %50 = getelementptr inbounds %struct.Section, %struct.Section* %8, i64 0, i32 15
  %51 = load %struct.Section*, %struct.Section** %50, align 8
  %52 = icmp eq %struct.Section* %51, null
  br i1 %52, label %53, label %7

53:                                               ; preds = %48, %0
  %54 = getelementptr inbounds [523 x i8], [523 x i8]* %1, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 523, i8* nonnull %54) #12
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %54, i8 -86, i64 523, i1 false) #12
  %55 = call i32 (i8*, i8*, ...) @sprintf(i8* nonnull %54, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.112, i64 0, i64 0), i32 0, i32 0, i32 1) #12
  %56 = sext i32 %55 to i64
  %57 = getelementptr inbounds [523 x i8], [523 x i8]* %1, i64 0, i64 %56
  %58 = call i32 (i8*, i8*, ...) @sprintf(i8* %57, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.114, i64 0, i64 0), i32 255) #12
  %59 = sext i32 %58 to i64
  %60 = getelementptr inbounds i8, i8* %57, i64 %59
  %61 = ptrtoint i8* %60 to i64
  %62 = ptrtoint [523 x i8]* %1 to i64
  %63 = sub i64 %61, %62
  %64 = load %struct._IO_FILE*, %struct._IO_FILE** @ofile, align 8
  call void @nasm_write(i8* nonnull %54, i64 %63, %struct._IO_FILE* %64) #12
  call void @llvm.lifetime.end.p0i8(i64 523, i8* nonnull %54) #12
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %3) #12
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal fastcc void @write_ith_record(i32, i16 zeroext, i8 zeroext, i8* nocapture readonly) unnamed_addr #0 {
  %5 = alloca [523 x i8], align 16
  %6 = getelementptr inbounds [523 x i8], [523 x i8]* %5, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 523, i8* nonnull %6) #12
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %6, i8 -86, i64 523, i1 false)
  %7 = icmp ugt i32 %0, 255
  br i1 %7, label %8, label %9, !prof !4

8:                                                ; preds = %4
  tail call void @nasm_assert_failed(i8* getelementptr inbounds ([39 x i8], [39 x i8]* @.str.9, i64 0, i64 0), i32 1426, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.111, i64 0, i64 0)) #13
  unreachable

9:                                                ; preds = %4
  %10 = zext i16 %1 to i32
  %11 = add nuw nsw i32 %10, %0
  %12 = lshr i32 %10, 8
  %13 = add nuw nsw i32 %11, %12
  %14 = zext i8 %2 to i32
  %15 = trunc i32 %13 to i8
  %16 = add i8 %15, %2
  %17 = icmp eq i32 %0, 0
  br i1 %17, label %122, label %18

18:                                               ; preds = %9
  %19 = zext i32 %0 to i64
  %20 = icmp ult i32 %0, 32
  br i1 %20, label %111, label %21

21:                                               ; preds = %18
  %22 = and i64 %19, 4294967264
  %23 = insertelement <16 x i8> <i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, i8 %16, i32 0
  %24 = add nsw i64 %22, -32
  %25 = lshr exact i64 %24, 5
  %26 = add nuw nsw i64 %25, 1
  %27 = and i64 %26, 3
  %28 = icmp ult i64 %24, 96
  br i1 %28, label %74, label %29

29:                                               ; preds = %21
  %30 = sub nsw i64 %26, %27
  br label %31

31:                                               ; preds = %31, %29
  %32 = phi i64 [ 0, %29 ], [ %71, %31 ]
  %33 = phi <16 x i8> [ %23, %29 ], [ %69, %31 ]
  %34 = phi <16 x i8> [ zeroinitializer, %29 ], [ %70, %31 ]
  %35 = phi i64 [ %30, %29 ], [ %72, %31 ]
  %36 = getelementptr inbounds i8, i8* %3, i64 %32
  %37 = bitcast i8* %36 to <16 x i8>*
  %38 = load <16 x i8>, <16 x i8>* %37, align 1
  %39 = getelementptr inbounds i8, i8* %36, i64 16
  %40 = bitcast i8* %39 to <16 x i8>*
  %41 = load <16 x i8>, <16 x i8>* %40, align 1
  %42 = add <16 x i8> %38, %33
  %43 = add <16 x i8> %41, %34
  %44 = or i64 %32, 32
  %45 = getelementptr inbounds i8, i8* %3, i64 %44
  %46 = bitcast i8* %45 to <16 x i8>*
  %47 = load <16 x i8>, <16 x i8>* %46, align 1
  %48 = getelementptr inbounds i8, i8* %45, i64 16
  %49 = bitcast i8* %48 to <16 x i8>*
  %50 = load <16 x i8>, <16 x i8>* %49, align 1
  %51 = add <16 x i8> %47, %42
  %52 = add <16 x i8> %50, %43
  %53 = or i64 %32, 64
  %54 = getelementptr inbounds i8, i8* %3, i64 %53
  %55 = bitcast i8* %54 to <16 x i8>*
  %56 = load <16 x i8>, <16 x i8>* %55, align 1
  %57 = getelementptr inbounds i8, i8* %54, i64 16
  %58 = bitcast i8* %57 to <16 x i8>*
  %59 = load <16 x i8>, <16 x i8>* %58, align 1
  %60 = add <16 x i8> %56, %51
  %61 = add <16 x i8> %59, %52
  %62 = or i64 %32, 96
  %63 = getelementptr inbounds i8, i8* %3, i64 %62
  %64 = bitcast i8* %63 to <16 x i8>*
  %65 = load <16 x i8>, <16 x i8>* %64, align 1
  %66 = getelementptr inbounds i8, i8* %63, i64 16
  %67 = bitcast i8* %66 to <16 x i8>*
  %68 = load <16 x i8>, <16 x i8>* %67, align 1
  %69 = add <16 x i8> %65, %60
  %70 = add <16 x i8> %68, %61
  %71 = add i64 %32, 128
  %72 = add i64 %35, -4
  %73 = icmp eq i64 %72, 0
  br i1 %73, label %74, label %31, !llvm.loop !8

74:                                               ; preds = %31, %21
  %75 = phi <16 x i8> [ undef, %21 ], [ %69, %31 ]
  %76 = phi <16 x i8> [ undef, %21 ], [ %70, %31 ]
  %77 = phi i64 [ 0, %21 ], [ %71, %31 ]
  %78 = phi <16 x i8> [ %23, %21 ], [ %69, %31 ]
  %79 = phi <16 x i8> [ zeroinitializer, %21 ], [ %70, %31 ]
  %80 = icmp eq i64 %27, 0
  br i1 %80, label %97, label %81

81:                                               ; preds = %74, %81
  %82 = phi i64 [ %94, %81 ], [ %77, %74 ]
  %83 = phi <16 x i8> [ %92, %81 ], [ %78, %74 ]
  %84 = phi <16 x i8> [ %93, %81 ], [ %79, %74 ]
  %85 = phi i64 [ %95, %81 ], [ %27, %74 ]
  %86 = getelementptr inbounds i8, i8* %3, i64 %82
  %87 = bitcast i8* %86 to <16 x i8>*
  %88 = load <16 x i8>, <16 x i8>* %87, align 1
  %89 = getelementptr inbounds i8, i8* %86, i64 16
  %90 = bitcast i8* %89 to <16 x i8>*
  %91 = load <16 x i8>, <16 x i8>* %90, align 1
  %92 = add <16 x i8> %88, %83
  %93 = add <16 x i8> %91, %84
  %94 = add i64 %82, 32
  %95 = add i64 %85, -1
  %96 = icmp eq i64 %95, 0
  br i1 %96, label %97, label %81, !llvm.loop !10

97:                                               ; preds = %81, %74
  %98 = phi <16 x i8> [ %75, %74 ], [ %92, %81 ]
  %99 = phi <16 x i8> [ %76, %74 ], [ %93, %81 ]
  %100 = add <16 x i8> %99, %98
  %101 = shufflevector <16 x i8> %100, <16 x i8> undef, <16 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %102 = add <16 x i8> %100, %101
  %103 = shufflevector <16 x i8> %102, <16 x i8> undef, <16 x i32> <i32 4, i32 5, i32 6, i32 7, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %104 = add <16 x i8> %102, %103
  %105 = shufflevector <16 x i8> %104, <16 x i8> undef, <16 x i32> <i32 2, i32 3, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %106 = add <16 x i8> %104, %105
  %107 = shufflevector <16 x i8> %106, <16 x i8> undef, <16 x i32> <i32 1, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %108 = add <16 x i8> %106, %107
  %109 = extractelement <16 x i8> %108, i32 0
  %110 = icmp eq i64 %22, %19
  br i1 %110, label %122, label %111

111:                                              ; preds = %97, %18
  %112 = phi i64 [ 0, %18 ], [ %22, %97 ]
  %113 = phi i8 [ %16, %18 ], [ %109, %97 ]
  br label %114

114:                                              ; preds = %111, %114
  %115 = phi i64 [ %120, %114 ], [ %112, %111 ]
  %116 = phi i8 [ %119, %114 ], [ %113, %111 ]
  %117 = getelementptr inbounds i8, i8* %3, i64 %115
  %118 = load i8, i8* %117, align 1
  %119 = add i8 %118, %116
  %120 = add nuw nsw i64 %115, 1
  %121 = icmp eq i64 %120, %19
  br i1 %121, label %122, label %114, !llvm.loop !11

122:                                              ; preds = %114, %97, %9
  %123 = phi i8 [ %16, %9 ], [ %109, %97 ], [ %119, %114 ]
  %124 = sub i8 0, %123
  %125 = call i32 (i8*, i8*, ...) @sprintf(i8* nonnull %6, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.112, i64 0, i64 0), i32 %0, i32 %10, i32 %14) #12
  %126 = sext i32 %125 to i64
  %127 = getelementptr inbounds [523 x i8], [523 x i8]* %5, i64 0, i64 %126
  br i1 %17, label %141, label %128

128:                                              ; preds = %122
  %129 = zext i32 %0 to i64
  br label %130

130:                                              ; preds = %130, %128
  %131 = phi i64 [ 0, %128 ], [ %139, %130 ]
  %132 = phi i8* [ %127, %128 ], [ %138, %130 ]
  %133 = getelementptr inbounds i8, i8* %3, i64 %131
  %134 = load i8, i8* %133, align 1
  %135 = zext i8 %134 to i32
  %136 = call i32 (i8*, i8*, ...) @sprintf(i8* %132, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.113, i64 0, i64 0), i32 %135) #12
  %137 = sext i32 %136 to i64
  %138 = getelementptr inbounds i8, i8* %132, i64 %137
  %139 = add nuw nsw i64 %131, 1
  %140 = icmp eq i64 %139, %129
  br i1 %140, label %141, label %130

141:                                              ; preds = %130, %122
  %142 = phi i8* [ %127, %122 ], [ %138, %130 ]
  %143 = zext i8 %124 to i32
  %144 = call i32 (i8*, i8*, ...) @sprintf(i8* %142, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.114, i64 0, i64 0), i32 %143) #12
  %145 = sext i32 %144 to i64
  %146 = getelementptr inbounds i8, i8* %142, i64 %145
  %147 = ptrtoint i8* %146 to i64
  %148 = ptrtoint [523 x i8]* %5 to i64
  %149 = sub i64 %147, %148
  %150 = load %struct._IO_FILE*, %struct._IO_FILE** @ofile, align 8
  call void @nasm_write(i8* nonnull %6, i64 %149, %struct._IO_FILE* %150) #12
  call void @llvm.lifetime.end.p0i8(i64 523, i8* nonnull %6) #12
  ret void
}

declare void @saa_rnbytes(%struct.SAA*, i8*, i64) local_unnamed_addr #1

; Function Attrs: nofree nounwind
declare i32 @sprintf(i8* nocapture, i8* nocapture readonly, ...) local_unnamed_addr #8

declare void @nasm_write(i8*, i64, %struct._IO_FILE*) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define internal void @do_output_srec() #0 {
  %1 = alloca [526 x i8], align 16
  %2 = alloca [32 x i8], align 16
  %3 = getelementptr inbounds [32 x i8], [32 x i8]* %2, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %3) #12
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %3, i8 -86, i64 32, i1 false)
  %4 = load %struct.Section*, %struct.Section** @sections, align 8
  %5 = icmp eq %struct.Section* %4, null
  br i1 %5, label %36, label %6

6:                                                ; preds = %0, %24
  %7 = phi %struct.Section* [ %27, %24 ], [ %4, %0 ]
  %8 = phi i64 [ %25, %24 ], [ 0, %0 ]
  %9 = getelementptr inbounds %struct.Section, %struct.Section* %7, i64 0, i32 3
  %10 = load i32, i32* %9, align 8
  %11 = trunc i32 %10 to i8
  %12 = icmp slt i8 %11, 0
  br i1 %12, label %13, label %24

13:                                               ; preds = %6
  %14 = getelementptr inbounds %struct.Section, %struct.Section* %7, i64 0, i32 2
  %15 = load i64, i64* %14, align 8
  %16 = icmp eq i64 %15, 0
  br i1 %16, label %24, label %17

17:                                               ; preds = %13
  %18 = getelementptr inbounds %struct.Section, %struct.Section* %7, i64 0, i32 6
  %19 = load i64, i64* %18, align 8
  %20 = add i64 %15, -1
  %21 = add i64 %20, %19
  %22 = icmp ugt i64 %21, %8
  %23 = select i1 %22, i64 %21, i64 %8
  br label %24

24:                                               ; preds = %17, %13, %6
  %25 = phi i64 [ %8, %13 ], [ %8, %6 ], [ %23, %17 ]
  %26 = getelementptr inbounds %struct.Section, %struct.Section* %7, i64 0, i32 15
  %27 = load %struct.Section*, %struct.Section** %26, align 8
  %28 = icmp eq %struct.Section* %27, null
  br i1 %28, label %29, label %6

29:                                               ; preds = %24
  %30 = icmp ult i64 %25, 65536
  br i1 %30, label %36, label %31

31:                                               ; preds = %29
  %32 = icmp ult i64 %25, 16777216
  %33 = select i1 %32, i32 3, i32 4
  %34 = select i1 %32, i8 50, i8 51
  %35 = select i1 %32, i8 56, i8 55
  br label %36

36:                                               ; preds = %0, %31, %29
  %37 = phi i32 [ 2, %29 ], [ %33, %31 ], [ 2, %0 ]
  %38 = phi i8 [ 49, %29 ], [ %34, %31 ], [ 49, %0 ]
  %39 = phi i8 [ 57, %29 ], [ %35, %31 ], [ 57, %0 ]
  %40 = getelementptr inbounds [526 x i8], [526 x i8]* %1, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 526, i8* nonnull %40) #12
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %40, i8 -86, i64 526, i1 false) #12
  %41 = call i32 (i8*, i8*, ...) @sprintf(i8* nonnull %40, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.115, i64 0, i64 0), i32 48, i32 3, i32 4, i32 0) #12
  %42 = sext i32 %41 to i64
  %43 = getelementptr inbounds [526 x i8], [526 x i8]* %1, i64 0, i64 %42
  %44 = call i32 (i8*, i8*, ...) @sprintf(i8* %43, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.114, i64 0, i64 0), i32 252) #12
  %45 = sext i32 %44 to i64
  %46 = getelementptr inbounds i8, i8* %43, i64 %45
  %47 = ptrtoint i8* %46 to i64
  %48 = ptrtoint [526 x i8]* %1 to i64
  %49 = sub i64 %47, %48
  %50 = load %struct._IO_FILE*, %struct._IO_FILE** @ofile, align 8
  call void @nasm_write(i8* nonnull %40, i64 %49, %struct._IO_FILE* %50) #12
  call void @llvm.lifetime.end.p0i8(i64 526, i8* nonnull %40) #12
  %51 = load %struct.Section*, %struct.Section** @sections, align 8
  %52 = icmp eq %struct.Section* %51, null
  br i1 %52, label %87, label %53

53:                                               ; preds = %36, %83
  %54 = phi %struct.Section* [ %85, %83 ], [ %51, %36 ]
  %55 = getelementptr inbounds %struct.Section, %struct.Section* %54, i64 0, i32 3
  %56 = load i32, i32* %55, align 8
  %57 = trunc i32 %56 to i8
  %58 = icmp slt i8 %57, 0
  br i1 %58, label %59, label %83

59:                                               ; preds = %53
  %60 = getelementptr inbounds %struct.Section, %struct.Section* %54, i64 0, i32 2
  %61 = load i64, i64* %60, align 8
  %62 = icmp eq i64 %61, 0
  br i1 %62, label %83, label %63

63:                                               ; preds = %59
  %64 = getelementptr inbounds %struct.Section, %struct.Section* %54, i64 0, i32 6
  %65 = load i64, i64* %64, align 8
  %66 = getelementptr inbounds %struct.Section, %struct.Section* %54, i64 0, i32 1
  %67 = load %struct.SAA*, %struct.SAA** %66, align 8
  call void @saa_rewind(%struct.SAA* %67) #12
  br label %68

68:                                               ; preds = %63, %68
  %69 = phi i64 [ %61, %63 ], [ %81, %68 ]
  %70 = phi i64 [ %65, %63 ], [ %80, %68 ]
  %71 = trunc i64 %70 to i32
  %72 = and i32 %71, 31
  %73 = sub nuw nsw i32 32, %72
  %74 = zext i32 %73 to i64
  %75 = icmp ult i64 %69, %74
  %76 = trunc i64 %69 to i32
  %77 = select i1 %75, i32 %76, i32 %73
  %78 = load %struct.SAA*, %struct.SAA** %66, align 8
  %79 = zext i32 %77 to i64
  call void @saa_rnbytes(%struct.SAA* %78, i8* nonnull %3, i64 %79) #12
  call fastcc void @write_srecord(i32 %77, i32 %37, i32 %71, i8 zeroext %38, i8* nonnull %3)
  %80 = add i64 %70, %79
  %81 = sub i64 %69, %79
  %82 = icmp eq i64 %81, 0
  br i1 %82, label %83, label %68

83:                                               ; preds = %68, %59, %53
  %84 = getelementptr inbounds %struct.Section, %struct.Section* %54, i64 0, i32 15
  %85 = load %struct.Section*, %struct.Section** %84, align 8
  %86 = icmp eq %struct.Section* %85, null
  br i1 %86, label %87, label %53

87:                                               ; preds = %83, %36
  call fastcc void @write_srecord(i32 0, i32 %37, i32 0, i8 zeroext %39, i8* null)
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %3) #12
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal fastcc void @write_srecord(i32, i32, i32, i8 zeroext, i8* nocapture readonly) unnamed_addr #0 {
  %6 = alloca [526 x i8], align 16
  %7 = getelementptr inbounds [526 x i8], [526 x i8]* %6, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 526, i8* nonnull %7) #12
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %7, i8 -86, i64 526, i1 false)
  %8 = icmp ugt i32 %0, 255
  br i1 %8, label %9, label %10, !prof !4

9:                                                ; preds = %5
  tail call void @nasm_assert_failed(i8* getelementptr inbounds ([39 x i8], [39 x i8]* @.str.9, i64 0, i64 0), i32 1497, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.111, i64 0, i64 0)) #13
  unreachable

10:                                               ; preds = %5
  switch i32 %1, label %15 [
    i32 2, label %11
    i32 3, label %13
    i32 4, label %16
  ]

11:                                               ; preds = %10
  %12 = and i32 %2, 65535
  br label %16

13:                                               ; preds = %10
  %14 = and i32 %2, 16777215
  br label %16

15:                                               ; preds = %10
  tail call void @nasm_panic_from_macro(i8* getelementptr inbounds ([39 x i8], [39 x i8]* @.str.9, i64 0, i64 0), i32 1509) #13
  unreachable

16:                                               ; preds = %10, %13, %11
  %17 = phi i32 [ %2, %10 ], [ %14, %13 ], [ %12, %11 ]
  %18 = add nuw nsw i32 %0, 1
  %19 = add nuw nsw i32 %18, %1
  %20 = add i32 %17, %19
  %21 = lshr i32 %17, 8
  %22 = add i32 %20, %21
  %23 = lshr i32 %17, 16
  %24 = add i32 %22, %23
  %25 = lshr i32 %17, 24
  %26 = add i32 %24, %25
  %27 = icmp eq i32 %0, 0
  br i1 %27, label %113, label %28

28:                                               ; preds = %16
  %29 = zext i32 %0 to i64
  %30 = icmp ult i32 %0, 16
  br i1 %30, label %100, label %31

31:                                               ; preds = %28
  %32 = and i64 %29, 4294967280
  %33 = insertelement <16 x i32> <i32 undef, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0>, i32 %26, i32 0
  %34 = add nsw i64 %32, -16
  %35 = lshr exact i64 %34, 4
  %36 = add nuw nsw i64 %35, 1
  %37 = and i64 %36, 3
  %38 = icmp ult i64 %34, 48
  br i1 %38, label %69, label %39

39:                                               ; preds = %31
  %40 = sub nsw i64 %36, %37
  br label %41

41:                                               ; preds = %41, %39
  %42 = phi i64 [ 0, %39 ], [ %64, %41 ]
  %43 = phi <16 x i32> [ %33, %39 ], [ %66, %41 ]
  %44 = phi i64 [ %40, %39 ], [ %67, %41 ]
  %45 = getelementptr inbounds i8, i8* %4, i64 %42
  %46 = bitcast i8* %45 to <16 x i8>*
  %47 = load <16 x i8>, <16 x i8>* %46, align 1
  %48 = or i64 %42, 16
  %49 = trunc <16 x i32> %43 to <16 x i8>
  %50 = add <16 x i8> %47, %49
  %51 = getelementptr inbounds i8, i8* %4, i64 %48
  %52 = bitcast i8* %51 to <16 x i8>*
  %53 = load <16 x i8>, <16 x i8>* %52, align 1
  %54 = or i64 %42, 32
  %55 = add <16 x i8> %53, %50
  %56 = getelementptr inbounds i8, i8* %4, i64 %54
  %57 = bitcast i8* %56 to <16 x i8>*
  %58 = load <16 x i8>, <16 x i8>* %57, align 1
  %59 = or i64 %42, 48
  %60 = add <16 x i8> %58, %55
  %61 = getelementptr inbounds i8, i8* %4, i64 %59
  %62 = bitcast i8* %61 to <16 x i8>*
  %63 = load <16 x i8>, <16 x i8>* %62, align 1
  %64 = add i64 %42, 64
  %65 = add <16 x i8> %63, %60
  %66 = zext <16 x i8> %65 to <16 x i32>
  %67 = add i64 %44, -4
  %68 = icmp eq i64 %67, 0
  br i1 %68, label %69, label %41, !llvm.loop !13

69:                                               ; preds = %41, %31
  %70 = phi <16 x i8> [ undef, %31 ], [ %65, %41 ]
  %71 = phi i64 [ 0, %31 ], [ %64, %41 ]
  %72 = phi <16 x i32> [ %33, %31 ], [ %66, %41 ]
  %73 = icmp eq i64 %37, 0
  br i1 %73, label %87, label %74

74:                                               ; preds = %69, %74
  %75 = phi i64 [ %81, %74 ], [ %71, %69 ]
  %76 = phi <16 x i32> [ %84, %74 ], [ %72, %69 ]
  %77 = phi i64 [ %85, %74 ], [ %37, %69 ]
  %78 = getelementptr inbounds i8, i8* %4, i64 %75
  %79 = bitcast i8* %78 to <16 x i8>*
  %80 = load <16 x i8>, <16 x i8>* %79, align 1
  %81 = add i64 %75, 16
  %82 = trunc <16 x i32> %76 to <16 x i8>
  %83 = add <16 x i8> %80, %82
  %84 = zext <16 x i8> %83 to <16 x i32>
  %85 = add i64 %77, -1
  %86 = icmp eq i64 %85, 0
  br i1 %86, label %87, label %74, !llvm.loop !14

87:                                               ; preds = %74, %69
  %88 = phi <16 x i8> [ %70, %69 ], [ %83, %74 ]
  %89 = shufflevector <16 x i8> %88, <16 x i8> undef, <16 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %90 = add <16 x i8> %88, %89
  %91 = shufflevector <16 x i8> %90, <16 x i8> undef, <16 x i32> <i32 4, i32 5, i32 6, i32 7, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %92 = add <16 x i8> %90, %91
  %93 = shufflevector <16 x i8> %92, <16 x i8> undef, <16 x i32> <i32 2, i32 3, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %94 = add <16 x i8> %92, %93
  %95 = shufflevector <16 x i8> %94, <16 x i8> undef, <16 x i32> <i32 1, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %96 = add <16 x i8> %94, %95
  %97 = extractelement <16 x i8> %96, i32 0
  %98 = zext i8 %97 to i32
  %99 = icmp eq i64 %32, %29
  br i1 %99, label %113, label %100

100:                                              ; preds = %87, %28
  %101 = phi i64 [ 0, %28 ], [ %32, %87 ]
  %102 = phi i32 [ %26, %28 ], [ %98, %87 ]
  br label %103

103:                                              ; preds = %100, %103
  %104 = phi i64 [ %111, %103 ], [ %101, %100 ]
  %105 = phi i32 [ %110, %103 ], [ %102, %100 ]
  %106 = getelementptr inbounds i8, i8* %4, i64 %104
  %107 = load i8, i8* %106, align 1
  %108 = zext i8 %107 to i32
  %109 = and i32 %105, 255
  %110 = add nuw nsw i32 %109, %108
  %111 = add nuw nsw i64 %104, 1
  %112 = icmp eq i64 %111, %29
  br i1 %112, label %113, label %103, !llvm.loop !15

113:                                              ; preds = %103, %87, %16
  %114 = phi i32 [ %26, %16 ], [ %98, %87 ], [ %110, %103 ]
  %115 = zext i8 %3 to i32
  %116 = shl i32 %1, 1
  %117 = call i32 (i8*, i8*, ...) @sprintf(i8* nonnull %7, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.115, i64 0, i64 0), i32 %115, i32 %19, i32 %116, i32 %17) #12
  %118 = sext i32 %117 to i64
  %119 = getelementptr inbounds [526 x i8], [526 x i8]* %6, i64 0, i64 %118
  br i1 %27, label %133, label %120

120:                                              ; preds = %113
  %121 = zext i32 %0 to i64
  br label %122

122:                                              ; preds = %122, %120
  %123 = phi i64 [ 0, %120 ], [ %131, %122 ]
  %124 = phi i8* [ %119, %120 ], [ %130, %122 ]
  %125 = getelementptr inbounds i8, i8* %4, i64 %123
  %126 = load i8, i8* %125, align 1
  %127 = zext i8 %126 to i32
  %128 = call i32 (i8*, i8*, ...) @sprintf(i8* %124, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.113, i64 0, i64 0), i32 %127) #12
  %129 = sext i32 %128 to i64
  %130 = getelementptr inbounds i8, i8* %124, i64 %129
  %131 = add nuw nsw i64 %123, 1
  %132 = icmp eq i64 %131, %121
  br i1 %132, label %133, label %122

133:                                              ; preds = %122, %113
  %134 = phi i8* [ %119, %113 ], [ %130, %122 ]
  %135 = and i32 %114, 255
  %136 = xor i32 %135, 255
  %137 = call i32 (i8*, i8*, ...) @sprintf(i8* %134, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.114, i64 0, i64 0), i32 %136) #12
  %138 = sext i32 %137 to i64
  %139 = getelementptr inbounds i8, i8* %134, i64 %138
  %140 = ptrtoint i8* %139 to i64
  %141 = ptrtoint [526 x i8]* %6 to i64
  %142 = sub i64 %140, %141
  %143 = load %struct._IO_FILE*, %struct._IO_FILE** @ofile, align 8
  call void @nasm_write(i8* nonnull %7, i64 %142, %struct._IO_FILE* %143) #12
  call void @llvm.lifetime.end.p0i8(i64 526, i8* nonnull %7) #12
  ret void
}

; Function Attrs: cold noreturn
declare void @nasm_panic_from_macro(i8*, i32) local_unnamed_addr #4

; Function Attrs: nounwind readnone speculatable
declare i32 @llvm.ctpop.i32(i32) #9

; Function Attrs: nofree nounwind
declare i64 @fwrite(i8* nocapture, i64, i64, %struct._IO_FILE* nocapture) local_unnamed_addr #10

; Function Attrs: nounwind readnone speculatable
declare i64 @llvm.ctpop.i64(i64) #9

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nofree nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { argmemonly nounwind }
attributes #4 = { cold noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { allocsize(0) "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nofree nounwind readonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { argmemonly nofree nounwind readonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #8 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #9 = { nounwind readnone speculatable }
attributes #10 = { nofree nounwind }
attributes #11 = { nounwind allocsize(0) }
attributes #12 = { nounwind }
attributes #13 = { cold noreturn nounwind }
attributes #14 = { nounwind readonly }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{i64 0, i64 65}
!3 = !{i32 0, i32 33}
!4 = !{!"branch_weights", i32 1, i32 2000}
!5 = distinct !{!5, !6}
!6 = !{!"llvm.loop.unroll.disable"}
!7 = !{void ()* @do_output_bin, void ()* @do_output_ith, void ()* @do_output_srec}
!8 = distinct !{!8, !9}
!9 = !{!"llvm.loop.isvectorized", i32 1}
!10 = distinct !{!10, !6}
!11 = distinct !{!11, !12, !9}
!12 = !{!"llvm.loop.unroll.runtime.disable"}
!13 = distinct !{!13, !9}
!14 = distinct !{!14, !6}
!15 = distinct !{!15, !12, !9}
