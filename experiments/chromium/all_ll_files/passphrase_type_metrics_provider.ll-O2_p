; ModuleID = '../../components/sync/driver/passphrase_type_metrics_provider.cc'
source_filename = "../../components/sync/driver/passphrase_type_metrics_provider.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"class.syncer::PassphraseTypeMetricsProvider" = type { %"class.metrics::MetricsProvider", %"class.base::RepeatingCallback" }
%"class.metrics::MetricsProvider" = type { i32 (...)** }
%"class.base::RepeatingCallback" = type { %"class.base::internal::CallbackBaseCopyable" }
%"class.base::internal::CallbackBaseCopyable" = type { %"class.base::internal::CallbackBase" }
%"class.base::internal::CallbackBase" = type { %class.scoped_refptr }
%class.scoped_refptr = type { %"class.base::internal::BindStateBase"* }
%"class.base::internal::BindStateBase" = type { %"class.base::RefCountedThreadSafe", void ()*, void (%"class.base::internal::BindStateBase"*)*, i1 (%"class.base::internal::BindStateBase"*, i32)* }
%"class.base::RefCountedThreadSafe" = type { %"class.base::subtle::RefCountedThreadSafeBase" }
%"class.base::subtle::RefCountedThreadSafeBase" = type { %"class.base::AtomicRefCount" }
%"class.base::AtomicRefCount" = type { %"struct.std::__1::atomic" }
%"struct.std::__1::atomic" = type { %"struct.std::__1::__atomic_base" }
%"struct.std::__1::__atomic_base" = type { %"struct.std::__1::__atomic_base.0" }
%"struct.std::__1::__atomic_base.0" = type { %"struct.std::__1::__cxx_atomic_impl" }
%"struct.std::__1::__cxx_atomic_impl" = type { %"struct.std::__1::__cxx_atomic_base_impl" }
%"struct.std::__1::__cxx_atomic_base_impl" = type { i32 }
%"class.metrics::ChromeUserMetricsExtension" = type opaque
%"class.base::internal::flat_tree" = type { %"class.std::__1::vector.2" }
%"class.std::__1::vector.2" = type { %"class.std::__1::__vector_base.3" }
%"class.std::__1::__vector_base.3" = type { %"class.absl::optional"*, %"class.absl::optional"*, %"class.std::__1::__compressed_pair.4" }
%"class.absl::optional" = type { %"class.absl::optional_internal::optional_data" }
%"class.absl::optional_internal::optional_data" = type { %"class.absl::optional_internal::optional_data_base" }
%"class.absl::optional_internal::optional_data_base" = type { %"class.absl::optional_internal::optional_data_dtor_base" }
%"class.absl::optional_internal::optional_data_dtor_base" = type { i8, %union.anon }
%union.anon = type { i32 }
%"class.std::__1::__compressed_pair.4" = type { %"struct.std::__1::__compressed_pair_elem.5" }
%"struct.std::__1::__compressed_pair_elem.5" = type { %"class.absl::optional"* }
%"class.std::__1::vector" = type { %"class.std::__1::__vector_base" }
%"class.std::__1::__vector_base" = type { %"class.syncer::SyncService"**, %"class.syncer::SyncService"**, %"class.std::__1::__compressed_pair" }
%"class.syncer::SyncService" = type { %class.KeyedService }
%class.KeyedService = type { i32 (...)** }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %"class.syncer::SyncService"** }
%"class.syncer::SyncUserSettings" = type { i32 (...)** }
%"class.base::OnceCallback" = type { %"class.base::internal::CallbackBase" }
%"class.metrics::SystemProfileProto" = type opaque
%"class.base::HistogramSnapshotManager" = type opaque
%"struct.std::__1::__split_buffer" = type { %"class.absl::optional"*, %"class.absl::optional"*, %"class.absl::optional"*, %"class.std::__1::__compressed_pair.15" }
%"class.std::__1::__compressed_pair.15" = type { %"struct.std::__1::__compressed_pair_elem.5", %"struct.std::__1::__compressed_pair_elem.16" }
%"struct.std::__1::__compressed_pair_elem.16" = type { %"class.std::__1::allocator.7"* }
%"class.std::__1::allocator.7" = type { i8 }
%"class.std::__1::__vector_base_common" = type { i8 }

$_ZNSt3__16vectorIN4absl8optionalIN6syncer24PassphraseTypeForMetricsEEENS_9allocatorIS5_EEE7emplaceIJS5_EEENS_11__wrap_iterIPS5_EENSA_IPKS5_EEDpOT_ = comdat any

$_ZNSt3__114__split_bufferIN4absl8optionalIN6syncer24PassphraseTypeForMetricsEEERNS_9allocatorIS5_EEE12emplace_backIJS5_EEEvDpOT_ = comdat any

@_ZTVN6syncer29PassphraseTypeMetricsProviderE = hidden unnamed_addr constant { [22 x i8*] } { [22 x i8*] [i8* null, i8* null, i8* bitcast (void (%"class.syncer::PassphraseTypeMetricsProvider"*)* @_ZN6syncer29PassphraseTypeMetricsProviderD2Ev to i8*), i8* bitcast (void (%"class.syncer::PassphraseTypeMetricsProvider"*)* @_ZN6syncer29PassphraseTypeMetricsProviderD0Ev to i8*), i8* bitcast (void (%"class.metrics::MetricsProvider"*)* @_ZN7metrics15MetricsProvider4InitEv to i8*), i8* bitcast (void (%"class.metrics::MetricsProvider"*, %"class.base::OnceCallback"*)* @_ZN7metrics15MetricsProvider9AsyncInitEN4base12OnceCallbackIFvvEEE to i8*), i8* bitcast (void (%"class.metrics::MetricsProvider"*)* @_ZN7metrics15MetricsProvider21OnDidCreateMetricsLogEv to i8*), i8* bitcast (void (%"class.metrics::MetricsProvider"*)* @_ZN7metrics15MetricsProvider18OnRecordingEnabledEv to i8*), i8* bitcast (void (%"class.metrics::MetricsProvider"*)* @_ZN7metrics15MetricsProvider19OnRecordingDisabledEv to i8*), i8* bitcast (void (%"class.metrics::MetricsProvider"*)* @_ZN7metrics15MetricsProvider20OnClientStateClearedEv to i8*), i8* bitcast (void (%"class.metrics::MetricsProvider"*)* @_ZN7metrics15MetricsProvider20OnAppEnterBackgroundEv to i8*), i8* bitcast (i1 (%"class.metrics::MetricsProvider"*)* @_ZN7metrics15MetricsProvider21HasIndependentMetricsEv to i8*), i8* bitcast (void ()* @_ZN7metrics15MetricsProvider25ProvideIndependentMetricsEN4base12OnceCallbackIFvbEEEPNS_26ChromeUserMetricsExtensionEPNS1_24HistogramSnapshotManagerE to i8*), i8* bitcast (void (%"class.metrics::MetricsProvider"*, %"class.metrics::SystemProfileProto"*)* @_ZN7metrics15MetricsProvider27ProvideSystemProfileMetricsEPNS_18SystemProfileProtoE to i8*), i8* bitcast (void (%"class.metrics::MetricsProvider"*, i64, %"class.metrics::SystemProfileProto"*)* @_ZN7metrics15MetricsProvider46ProvideSystemProfileMetricsWithLogCreationTimeEN4base9TimeTicksEPNS_18SystemProfileProtoE to i8*), i8* bitcast (i1 (%"class.metrics::MetricsProvider"*)* @_ZN7metrics15MetricsProvider22HasPreviousSessionDataEv to i8*), i8* bitcast (void (%"class.metrics::MetricsProvider"*, %"class.metrics::ChromeUserMetricsExtension"*)* @_ZN7metrics15MetricsProvider26ProvidePreviousSessionDataEPNS_26ChromeUserMetricsExtensionE to i8*), i8* bitcast (void (%"class.syncer::PassphraseTypeMetricsProvider"*, %"class.metrics::ChromeUserMetricsExtension"*)* @_ZN6syncer29PassphraseTypeMetricsProvider25ProvideCurrentSessionDataEPN7metrics26ChromeUserMetricsExtensionE to i8*), i8* bitcast (void (%"class.metrics::MetricsProvider"*, %"class.metrics::SystemProfileProto"*)* @_ZN7metrics15MetricsProvider23ProvideStabilityMetricsEPNS_18SystemProfileProtoE to i8*), i8* bitcast (void (%"class.metrics::MetricsProvider"*)* @_ZN7metrics15MetricsProvider26ClearSavedStabilityMetricsEv to i8*), i8* bitcast (void (%"class.metrics::MetricsProvider"*, %"class.base::HistogramSnapshotManager"*)* @_ZN7metrics15MetricsProvider24RecordHistogramSnapshotsEPN4base24HistogramSnapshotManagerE to i8*), i8* bitcast (void (%"class.metrics::MetricsProvider"*, %"class.base::HistogramSnapshotManager"*)* @_ZN7metrics15MetricsProvider31RecordInitialHistogramSnapshotsEPN4base24HistogramSnapshotManagerE to i8*)] }, align 8
@.str = private unnamed_addr constant [21 x i8] c"Sync.PassphraseType2\00", align 1

@_ZN6syncer29PassphraseTypeMetricsProviderC1ERKN4base17RepeatingCallbackIFNSt3__16vectorIPKNS_11SyncServiceENS3_9allocatorIS7_EEEEvEEE = hidden unnamed_addr alias void (%"class.syncer::PassphraseTypeMetricsProvider"*, %"class.base::RepeatingCallback"*), void (%"class.syncer::PassphraseTypeMetricsProvider"*, %"class.base::RepeatingCallback"*)* @_ZN6syncer29PassphraseTypeMetricsProviderC2ERKN4base17RepeatingCallbackIFNSt3__16vectorIPKNS_11SyncServiceENS3_9allocatorIS7_EEEEvEEE
@_ZN6syncer29PassphraseTypeMetricsProviderD1Ev = hidden unnamed_addr alias void (%"class.syncer::PassphraseTypeMetricsProvider"*), void (%"class.syncer::PassphraseTypeMetricsProvider"*)* @_ZN6syncer29PassphraseTypeMetricsProviderD2Ev

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN6syncer29PassphraseTypeMetricsProviderC2ERKN4base17RepeatingCallbackIFNSt3__16vectorIPKNS_11SyncServiceENS3_9allocatorIS7_EEEEvEEE(%"class.syncer::PassphraseTypeMetricsProvider"*, %"class.base::RepeatingCallback"* dereferenceable(8)) unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"class.syncer::PassphraseTypeMetricsProvider", %"class.syncer::PassphraseTypeMetricsProvider"* %0, i64 0, i32 0
  tail call void @_ZN7metrics15MetricsProviderC2Ev(%"class.metrics::MetricsProvider"* %3) #8
  %4 = getelementptr inbounds %"class.syncer::PassphraseTypeMetricsProvider", %"class.syncer::PassphraseTypeMetricsProvider"* %0, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [22 x i8*] }, { [22 x i8*] }* @_ZTVN6syncer29PassphraseTypeMetricsProviderE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %4, align 8
  %5 = getelementptr inbounds %"class.syncer::PassphraseTypeMetricsProvider", %"class.syncer::PassphraseTypeMetricsProvider"* %0, i64 0, i32 1, i32 0
  %6 = getelementptr inbounds %"class.base::RepeatingCallback", %"class.base::RepeatingCallback"* %1, i64 0, i32 0
  tail call void @_ZN4base8internal20CallbackBaseCopyableC2ERKS1_(%"class.base::internal::CallbackBaseCopyable"* %5, %"class.base::internal::CallbackBaseCopyable"* dereferenceable(8) %6) #8
  ret void
}

declare void @_ZN7metrics15MetricsProviderC2Ev(%"class.metrics::MetricsProvider"*) unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN6syncer29PassphraseTypeMetricsProviderD2Ev(%"class.syncer::PassphraseTypeMetricsProvider"*) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.syncer::PassphraseTypeMetricsProvider", %"class.syncer::PassphraseTypeMetricsProvider"* %0, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [22 x i8*] }, { [22 x i8*] }* @_ZTVN6syncer29PassphraseTypeMetricsProviderE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %2, align 8
  %3 = getelementptr inbounds %"class.syncer::PassphraseTypeMetricsProvider", %"class.syncer::PassphraseTypeMetricsProvider"* %0, i64 0, i32 1, i32 0, i32 0
  tail call void @_ZN4base8internal12CallbackBaseD2Ev(%"class.base::internal::CallbackBase"* %3) #8
  %4 = getelementptr inbounds %"class.syncer::PassphraseTypeMetricsProvider", %"class.syncer::PassphraseTypeMetricsProvider"* %0, i64 0, i32 0
  tail call void @_ZN7metrics15MetricsProviderD2Ev(%"class.metrics::MetricsProvider"* %4) #8
  ret void
}

; Function Attrs: nounwind
declare void @_ZN4base8internal12CallbackBaseD2Ev(%"class.base::internal::CallbackBase"*) unnamed_addr #2

; Function Attrs: nounwind
declare void @_ZN7metrics15MetricsProviderD2Ev(%"class.metrics::MetricsProvider"*) unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN6syncer29PassphraseTypeMetricsProviderD0Ev(%"class.syncer::PassphraseTypeMetricsProvider"*) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.syncer::PassphraseTypeMetricsProvider", %"class.syncer::PassphraseTypeMetricsProvider"* %0, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [22 x i8*] }, { [22 x i8*] }* @_ZTVN6syncer29PassphraseTypeMetricsProviderE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %2, align 8
  %3 = getelementptr inbounds %"class.syncer::PassphraseTypeMetricsProvider", %"class.syncer::PassphraseTypeMetricsProvider"* %0, i64 0, i32 1, i32 0, i32 0
  tail call void @_ZN4base8internal12CallbackBaseD2Ev(%"class.base::internal::CallbackBase"* %3) #8
  %4 = getelementptr inbounds %"class.syncer::PassphraseTypeMetricsProvider", %"class.syncer::PassphraseTypeMetricsProvider"* %0, i64 0, i32 0
  tail call void @_ZN7metrics15MetricsProviderD2Ev(%"class.metrics::MetricsProvider"* %4) #8
  %5 = bitcast %"class.syncer::PassphraseTypeMetricsProvider"* %0 to i8*
  tail call void @_ZdlPv(i8* %5) #9
  ret void
}

; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(i8*) local_unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN6syncer29PassphraseTypeMetricsProvider25ProvideCurrentSessionDataEPN7metrics26ChromeUserMetricsExtensionE(%"class.syncer::PassphraseTypeMetricsProvider"* nocapture readonly, %"class.metrics::ChromeUserMetricsExtension"* nocapture readnone) unnamed_addr #0 align 2 {
  %3 = alloca %"class.base::internal::flat_tree", align 8
  %4 = alloca i64, align 8
  %5 = alloca %"class.std::__1::vector", align 8
  %6 = bitcast %"class.std::__1::vector"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %6) #8
  %7 = getelementptr inbounds %"class.syncer::PassphraseTypeMetricsProvider", %"class.syncer::PassphraseTypeMetricsProvider"* %0, i64 0, i32 1, i32 0, i32 0, i32 0, i32 0
  %8 = load %"class.base::internal::BindStateBase"*, %"class.base::internal::BindStateBase"** %7, align 8, !noalias !2
  %9 = getelementptr inbounds %"class.base::internal::BindStateBase", %"class.base::internal::BindStateBase"* %8, i64 0, i32 1
  %10 = bitcast void ()** %9 to void (%"class.std::__1::vector"*, %"class.base::internal::BindStateBase"*)**
  %11 = load void (%"class.std::__1::vector"*, %"class.base::internal::BindStateBase"*)*, void (%"class.std::__1::vector"*, %"class.base::internal::BindStateBase"*)** %10, align 8, !noalias !2
  call void %11(%"class.std::__1::vector"* nonnull sret %5, %"class.base::internal::BindStateBase"* %8) #8
  %12 = bitcast i64* %4 to %"class.absl::optional"*
  %13 = bitcast %"class.base::internal::flat_tree"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %13) #8
  %14 = getelementptr inbounds %"class.base::internal::flat_tree", %"class.base::internal::flat_tree"* %3, i64 0, i32 0, i32 0, i32 0
  %15 = getelementptr inbounds %"class.base::internal::flat_tree", %"class.base::internal::flat_tree"* %3, i64 0, i32 0, i32 0, i32 1
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %13, i8 0, i64 24, i1 false) #8
  %16 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %5, i64 0, i32 0, i32 0
  %17 = load %"class.syncer::SyncService"**, %"class.syncer::SyncService"*** %16, align 8
  %18 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %5, i64 0, i32 0, i32 1
  %19 = load %"class.syncer::SyncService"**, %"class.syncer::SyncService"*** %18, align 8
  %20 = icmp eq %"class.syncer::SyncService"** %17, %19
  br i1 %20, label %21, label %23

21:                                               ; preds = %2
  %22 = bitcast %"class.absl::optional"** %15 to i64*
  br label %33

23:                                               ; preds = %2
  %24 = bitcast i64* %4 to i8*
  %25 = bitcast %"class.absl::optional"** %15 to i64*
  %26 = getelementptr inbounds %"class.base::internal::flat_tree", %"class.base::internal::flat_tree"* %3, i64 0, i32 0
  br label %43

27:                                               ; preds = %120
  %28 = load i64, i64* %25, align 8
  %29 = bitcast %"class.base::internal::flat_tree"* %3 to i64*
  %30 = load i64, i64* %29, align 8
  %31 = inttoptr i64 %30 to %"class.absl::optional"*
  %32 = inttoptr i64 %28 to %"class.absl::optional"*
  br label %33

33:                                               ; preds = %27, %21
  %34 = phi i64* [ %22, %21 ], [ %25, %27 ]
  %35 = phi %"class.absl::optional"* [ null, %21 ], [ %31, %27 ]
  %36 = phi %"class.absl::optional"* [ null, %21 ], [ %32, %27 ]
  %37 = phi i64 [ 0, %21 ], [ %30, %27 ]
  %38 = phi i64 [ 0, %21 ], [ %28, %27 ]
  %39 = sub i64 %38, %37
  %40 = ashr exact i64 %39, 3
  %41 = icmp ugt i64 %40, 1
  %42 = inttoptr i64 %37 to %"class.absl::optional"*
  br i1 %41, label %132, label %123

43:                                               ; preds = %120, %23
  %44 = phi %"class.syncer::SyncService"** [ %17, %23 ], [ %121, %120 ]
  %45 = load %"class.syncer::SyncService"*, %"class.syncer::SyncService"** %44, align 8
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %24) #8
  %46 = bitcast %"class.syncer::SyncService"* %45 to i32 (%"class.syncer::SyncService"*)***
  %47 = load i32 (%"class.syncer::SyncService"*)**, i32 (%"class.syncer::SyncService"*)*** %46, align 8
  %48 = getelementptr inbounds i32 (%"class.syncer::SyncService"*)*, i32 (%"class.syncer::SyncService"*)** %47, i64 6
  %49 = load i32 (%"class.syncer::SyncService"*)*, i32 (%"class.syncer::SyncService"*)** %48, align 8
  %50 = call i32 %49(%"class.syncer::SyncService"* %45) #8
  %51 = icmp eq i32 %50, 6
  br i1 %51, label %52, label %68

52:                                               ; preds = %43
  %53 = bitcast %"class.syncer::SyncService"* %45 to %"class.syncer::SyncUserSettings"* (%"class.syncer::SyncService"*)***
  %54 = load %"class.syncer::SyncUserSettings"* (%"class.syncer::SyncService"*)**, %"class.syncer::SyncUserSettings"* (%"class.syncer::SyncService"*)*** %53, align 8
  %55 = getelementptr inbounds %"class.syncer::SyncUserSettings"* (%"class.syncer::SyncService"*)*, %"class.syncer::SyncUserSettings"* (%"class.syncer::SyncService"*)** %54, i64 4
  %56 = load %"class.syncer::SyncUserSettings"* (%"class.syncer::SyncService"*)*, %"class.syncer::SyncUserSettings"* (%"class.syncer::SyncService"*)** %55, align 8
  %57 = call %"class.syncer::SyncUserSettings"* %56(%"class.syncer::SyncService"* %45) #8
  %58 = bitcast %"class.syncer::SyncUserSettings"* %57 to i32 (%"class.syncer::SyncUserSettings"*)***
  %59 = load i32 (%"class.syncer::SyncUserSettings"*)**, i32 (%"class.syncer::SyncUserSettings"*)*** %58, align 8
  %60 = getelementptr inbounds i32 (%"class.syncer::SyncUserSettings"*)*, i32 (%"class.syncer::SyncUserSettings"*)** %59, i64 22
  %61 = load i32 (%"class.syncer::SyncUserSettings"*)*, i32 (%"class.syncer::SyncUserSettings"*)** %60, align 8
  %62 = call i32 %61(%"class.syncer::SyncUserSettings"* %57) #8
  %63 = icmp ult i32 %62, 5
  br i1 %63, label %64, label %68

64:                                               ; preds = %52
  %65 = zext i32 %62 to i64
  %66 = shl nuw i64 %65, 32
  %67 = add i64 %66, 8589934592
  br label %68

68:                                               ; preds = %52, %64, %43
  %69 = phi i64 [ 0, %43 ], [ 1, %64 ], [ 0, %52 ]
  %70 = phi i64 [ 0, %43 ], [ %67, %64 ], [ 0, %52 ]
  %71 = or i64 %70, %69
  store i64 %71, i64* %4, align 8
  %72 = load %"class.absl::optional"*, %"class.absl::optional"** %14, align 8
  %73 = load i64, i64* %25, align 8
  %74 = ptrtoint %"class.absl::optional"* %72 to i64
  %75 = sub i64 %73, %74
  %76 = icmp eq i64 %75, 0
  %77 = inttoptr i64 %73 to %"class.absl::optional"*
  %78 = trunc i64 %69 to i8
  %79 = lshr exact i64 %70, 32
  %80 = trunc i64 %79 to i32
  br i1 %76, label %105, label %81

81:                                               ; preds = %68
  %82 = ashr exact i64 %75, 3
  %83 = icmp eq i8 %78, 0
  br label %84

84:                                               ; preds = %101, %81
  %85 = phi %"class.absl::optional"* [ %72, %81 ], [ %103, %101 ]
  %86 = phi i64 [ %82, %81 ], [ %102, %101 ]
  %87 = lshr i64 %86, 1
  %88 = getelementptr inbounds %"class.absl::optional", %"class.absl::optional"* %85, i64 %87
  br i1 %83, label %101, label %89

89:                                               ; preds = %84
  %90 = getelementptr inbounds %"class.absl::optional", %"class.absl::optional"* %88, i64 0, i32 0, i32 0, i32 0, i32 0
  %91 = load i8, i8* %90, align 4, !range !5
  %92 = icmp eq i8 %91, 0
  br i1 %92, label %97, label %93

93:                                               ; preds = %89
  %94 = getelementptr inbounds %"class.absl::optional", %"class.absl::optional"* %85, i64 %87, i32 0, i32 0, i32 0, i32 1, i32 0
  %95 = load i32, i32* %94, align 4
  %96 = icmp slt i32 %95, %80
  br i1 %96, label %97, label %101

97:                                               ; preds = %93, %89
  %98 = getelementptr inbounds %"class.absl::optional", %"class.absl::optional"* %88, i64 1
  %99 = xor i64 %87, -1
  %100 = add i64 %86, %99
  br label %101

101:                                              ; preds = %97, %93, %84
  %102 = phi i64 [ %100, %97 ], [ %87, %93 ], [ %87, %84 ]
  %103 = phi %"class.absl::optional"* [ %98, %97 ], [ %85, %93 ], [ %85, %84 ]
  %104 = icmp eq i64 %102, 0
  br i1 %104, label %105, label %84

105:                                              ; preds = %101, %68
  %106 = phi %"class.absl::optional"* [ %72, %68 ], [ %103, %101 ]
  %107 = icmp eq %"class.absl::optional"* %106, %77
  br i1 %107, label %118, label %108

108:                                              ; preds = %105
  %109 = getelementptr inbounds %"class.absl::optional", %"class.absl::optional"* %106, i64 0, i32 0, i32 0, i32 0, i32 0
  %110 = load i8, i8* %109, align 4, !range !5
  %111 = icmp eq i8 %110, 0
  br i1 %111, label %120, label %112

112:                                              ; preds = %108
  %113 = icmp eq i8 %78, 0
  br i1 %113, label %118, label %114

114:                                              ; preds = %112
  %115 = getelementptr inbounds %"class.absl::optional", %"class.absl::optional"* %106, i64 0, i32 0, i32 0, i32 0, i32 1, i32 0
  %116 = load i32, i32* %115, align 4
  %117 = icmp sgt i32 %116, %80
  br i1 %117, label %118, label %120

118:                                              ; preds = %114, %112, %105
  %119 = call %"class.absl::optional"* @_ZNSt3__16vectorIN4absl8optionalIN6syncer24PassphraseTypeForMetricsEEENS_9allocatorIS5_EEE7emplaceIJS5_EEENS_11__wrap_iterIPS5_EENSA_IPKS5_EEDpOT_(%"class.std::__1::vector.2"* nonnull %26, %"class.absl::optional"* %106, %"class.absl::optional"* nonnull dereferenceable(8) %12) #8
  br label %120

120:                                              ; preds = %118, %114, %108
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %24) #8
  %121 = getelementptr inbounds %"class.syncer::SyncService"*, %"class.syncer::SyncService"** %44, i64 1
  %122 = icmp eq %"class.syncer::SyncService"** %121, %19
  br i1 %122, label %27, label %43

123:                                              ; preds = %33
  %124 = icmp eq %"class.absl::optional"* %35, %36
  br i1 %124, label %132, label %125

125:                                              ; preds = %123
  %126 = getelementptr inbounds %"class.absl::optional", %"class.absl::optional"* %35, i64 0, i32 0, i32 0, i32 0, i32 0
  %127 = load i8, i8* %126, align 4, !range !5
  %128 = icmp eq i8 %127, 0
  br i1 %128, label %132, label %129

129:                                              ; preds = %125
  %130 = getelementptr inbounds %"class.absl::optional", %"class.absl::optional"* %35, i64 0, i32 0, i32 0, i32 0, i32 1, i32 0
  %131 = load i32, i32* %130, align 4
  br label %132

132:                                              ; preds = %129, %125, %123, %33
  %133 = phi %"class.absl::optional"* [ %35, %123 ], [ %42, %33 ], [ %35, %125 ], [ %35, %129 ]
  %134 = phi i32 [ 0, %123 ], [ 1, %33 ], [ 0, %125 ], [ %131, %129 ]
  %135 = icmp eq %"class.absl::optional"* %133, null
  br i1 %135, label %139, label %136

136:                                              ; preds = %132
  %137 = ptrtoint %"class.absl::optional"* %133 to i64
  store i64 %137, i64* %34, align 8
  %138 = getelementptr inbounds %"class.absl::optional", %"class.absl::optional"* %133, i64 0, i32 0, i32 0, i32 0, i32 0
  call void @_ZdlPv(i8* %138) #9
  br label %139

139:                                              ; preds = %132, %136
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %13) #8
  call void @_ZN4base23UmaHistogramExactLinearEPKcii(i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str, i64 0, i64 0), i32 %134, i32 7) #8
  %140 = load %"class.syncer::SyncService"**, %"class.syncer::SyncService"*** %16, align 8
  %141 = icmp eq %"class.syncer::SyncService"** %140, null
  br i1 %141, label %146, label %142

142:                                              ; preds = %139
  %143 = ptrtoint %"class.syncer::SyncService"** %140 to i64
  %144 = bitcast %"class.syncer::SyncService"*** %18 to i64*
  store i64 %143, i64* %144, align 8
  %145 = bitcast %"class.syncer::SyncService"** %140 to i8*
  call void @_ZdlPv(i8* %145) #9
  br label %146

146:                                              ; preds = %139, %142
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %6) #8
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #4

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #4

declare void @_ZN7metrics15MetricsProvider4InitEv(%"class.metrics::MetricsProvider"*) unnamed_addr #1

declare void @_ZN7metrics15MetricsProvider9AsyncInitEN4base12OnceCallbackIFvvEEE(%"class.metrics::MetricsProvider"*, %"class.base::OnceCallback"*) unnamed_addr #1

declare void @_ZN7metrics15MetricsProvider21OnDidCreateMetricsLogEv(%"class.metrics::MetricsProvider"*) unnamed_addr #1

declare void @_ZN7metrics15MetricsProvider18OnRecordingEnabledEv(%"class.metrics::MetricsProvider"*) unnamed_addr #1

declare void @_ZN7metrics15MetricsProvider19OnRecordingDisabledEv(%"class.metrics::MetricsProvider"*) unnamed_addr #1

declare void @_ZN7metrics15MetricsProvider20OnClientStateClearedEv(%"class.metrics::MetricsProvider"*) unnamed_addr #1

declare void @_ZN7metrics15MetricsProvider20OnAppEnterBackgroundEv(%"class.metrics::MetricsProvider"*) unnamed_addr #1

declare zeroext i1 @_ZN7metrics15MetricsProvider21HasIndependentMetricsEv(%"class.metrics::MetricsProvider"*) unnamed_addr #1

declare void @_ZN7metrics15MetricsProvider25ProvideIndependentMetricsEN4base12OnceCallbackIFvbEEEPNS_26ChromeUserMetricsExtensionEPNS1_24HistogramSnapshotManagerE() unnamed_addr

declare void @_ZN7metrics15MetricsProvider27ProvideSystemProfileMetricsEPNS_18SystemProfileProtoE(%"class.metrics::MetricsProvider"*, %"class.metrics::SystemProfileProto"*) unnamed_addr #1

declare void @_ZN7metrics15MetricsProvider46ProvideSystemProfileMetricsWithLogCreationTimeEN4base9TimeTicksEPNS_18SystemProfileProtoE(%"class.metrics::MetricsProvider"*, i64, %"class.metrics::SystemProfileProto"*) unnamed_addr #1

declare zeroext i1 @_ZN7metrics15MetricsProvider22HasPreviousSessionDataEv(%"class.metrics::MetricsProvider"*) unnamed_addr #1

declare void @_ZN7metrics15MetricsProvider26ProvidePreviousSessionDataEPNS_26ChromeUserMetricsExtensionE(%"class.metrics::MetricsProvider"*, %"class.metrics::ChromeUserMetricsExtension"*) unnamed_addr #1

declare void @_ZN7metrics15MetricsProvider23ProvideStabilityMetricsEPNS_18SystemProfileProtoE(%"class.metrics::MetricsProvider"*, %"class.metrics::SystemProfileProto"*) unnamed_addr #1

declare void @_ZN7metrics15MetricsProvider26ClearSavedStabilityMetricsEv(%"class.metrics::MetricsProvider"*) unnamed_addr #1

declare void @_ZN7metrics15MetricsProvider24RecordHistogramSnapshotsEPN4base24HistogramSnapshotManagerE(%"class.metrics::MetricsProvider"*, %"class.base::HistogramSnapshotManager"*) unnamed_addr #1

declare void @_ZN7metrics15MetricsProvider31RecordInitialHistogramSnapshotsEPN4base24HistogramSnapshotManagerE(%"class.metrics::MetricsProvider"*, %"class.base::HistogramSnapshotManager"*) unnamed_addr #1

declare void @_ZN4base8internal20CallbackBaseCopyableC2ERKS1_(%"class.base::internal::CallbackBaseCopyable"*, %"class.base::internal::CallbackBaseCopyable"* dereferenceable(8)) unnamed_addr #1

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #4

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden %"class.absl::optional"* @_ZNSt3__16vectorIN4absl8optionalIN6syncer24PassphraseTypeForMetricsEEENS_9allocatorIS5_EEE7emplaceIJS5_EEENS_11__wrap_iterIPS5_EENSA_IPKS5_EEDpOT_(%"class.std::__1::vector.2"*, %"class.absl::optional"*, %"class.absl::optional"* dereferenceable(8)) local_unnamed_addr #0 comdat align 2 {
  %4 = ptrtoint %"class.absl::optional"* %1 to i64
  %5 = alloca %"struct.std::__1::__split_buffer", align 8
  %6 = getelementptr inbounds %"class.std::__1::vector.2", %"class.std::__1::vector.2"* %0, i64 0, i32 0, i32 0
  %7 = getelementptr inbounds %"class.std::__1::vector.2", %"class.std::__1::vector.2"* %0, i64 0, i32 0, i32 1
  %8 = load %"class.absl::optional"*, %"class.absl::optional"** %7, align 8
  %9 = getelementptr inbounds %"class.absl::optional", %"class.absl::optional"* %8, i64 0, i32 0, i32 0, i32 0, i32 0
  %10 = getelementptr inbounds %"class.std::__1::vector.2", %"class.std::__1::vector.2"* %0, i64 0, i32 0, i32 2, i32 0, i32 0
  %11 = load %"class.absl::optional"*, %"class.absl::optional"** %10, align 8
  %12 = icmp ult %"class.absl::optional"* %8, %11
  %13 = ptrtoint %"class.absl::optional"* %8 to i64
  %14 = ptrtoint %"class.absl::optional"* %11 to i64
  br i1 %12, label %15, label %163

15:                                               ; preds = %3
  %16 = icmp eq %"class.absl::optional"* %8, %1
  %17 = bitcast %"class.absl::optional"* %2 to i64*
  br i1 %16, label %18, label %24

18:                                               ; preds = %15
  %19 = bitcast %"class.absl::optional"* %1 to i64*
  %20 = load i64, i64* %17, align 4
  store i64 %20, i64* %19, align 4
  %21 = getelementptr inbounds %"class.absl::optional", %"class.absl::optional"* %1, i64 1
  %22 = ptrtoint %"class.absl::optional"* %21 to i64
  %23 = bitcast %"class.absl::optional"** %7 to i64*
  store i64 %22, i64* %23, align 8
  br label %319

24:                                               ; preds = %15
  %25 = load i64, i64* %17, align 4
  %26 = getelementptr inbounds %"class.absl::optional", %"class.absl::optional"* %1, i64 1
  %27 = ptrtoint %"class.absl::optional"* %26 to i64
  %28 = sub i64 %13, %27
  %29 = ashr exact i64 %28, 3
  %30 = getelementptr inbounds %"class.absl::optional", %"class.absl::optional"* %1, i64 %29
  %31 = getelementptr inbounds %"class.absl::optional", %"class.absl::optional"* %30, i64 0, i32 0, i32 0, i32 0, i32 0
  %32 = bitcast %"class.absl::optional"** %7 to i64*
  %33 = icmp ult %"class.absl::optional"* %30, %8
  br i1 %33, label %34, label %145

34:                                               ; preds = %24
  %35 = sub nsw i64 0, %29
  %36 = getelementptr %"class.absl::optional", %"class.absl::optional"* %8, i64 %35, i32 0, i32 0, i32 0, i32 0
  %37 = xor i64 %4, -1
  %38 = getelementptr i8, i8* %36, i64 %37
  %39 = ptrtoint i8* %38 to i64
  %40 = lshr i64 %39, 3
  %41 = add nuw nsw i64 %40, 1
  %42 = icmp ult i64 %41, 4
  br i1 %42, label %43, label %46

43:                                               ; preds = %140, %46, %34
  %44 = phi %"class.absl::optional"* [ %8, %46 ], [ %8, %34 ], [ %63, %140 ]
  %45 = phi %"class.absl::optional"* [ %30, %46 ], [ %30, %34 ], [ %64, %140 ]
  br label %152

46:                                               ; preds = %34
  %47 = sub nsw i64 0, %29
  %48 = getelementptr %"class.absl::optional", %"class.absl::optional"* %8, i64 %47, i32 0, i32 0, i32 0, i32 0
  %49 = xor i64 %4, -1
  %50 = getelementptr i8, i8* %48, i64 %49
  %51 = ptrtoint i8* %50 to i64
  %52 = lshr i64 %51, 3
  %53 = add nuw nsw i64 %52, 1
  %54 = getelementptr inbounds %"class.absl::optional", %"class.absl::optional"* %8, i64 %53, i32 0, i32 0, i32 0, i32 0
  %55 = add nsw i64 %29, %52
  %56 = add nsw i64 %55, 1
  %57 = getelementptr inbounds %"class.absl::optional", %"class.absl::optional"* %1, i64 %56, i32 0, i32 0, i32 0, i32 0
  %58 = icmp ult i8* %9, %57
  %59 = icmp ult i8* %31, %54
  %60 = and i1 %58, %59
  br i1 %60, label %43, label %61

61:                                               ; preds = %46
  %62 = and i64 %41, 4611686018427387900
  %63 = getelementptr %"class.absl::optional", %"class.absl::optional"* %8, i64 %62
  %64 = getelementptr %"class.absl::optional", %"class.absl::optional"* %30, i64 %62
  %65 = add nsw i64 %62, -4
  %66 = lshr exact i64 %65, 2
  %67 = add nuw nsw i64 %66, 1
  %68 = and i64 %67, 3
  %69 = icmp ult i64 %65, 12
  br i1 %69, label %121, label %70

70:                                               ; preds = %61
  %71 = sub nsw i64 %67, %68
  br label %72

72:                                               ; preds = %72, %70
  %73 = phi i64 [ 0, %70 ], [ %118, %72 ]
  %74 = phi i64 [ %71, %70 ], [ %119, %72 ]
  %75 = getelementptr %"class.absl::optional", %"class.absl::optional"* %8, i64 %73
  %76 = getelementptr %"class.absl::optional", %"class.absl::optional"* %30, i64 %73
  %77 = bitcast %"class.absl::optional"* %76 to <2 x i64>*
  %78 = load <2 x i64>, <2 x i64>* %77, align 4, !alias.scope !6
  %79 = getelementptr %"class.absl::optional", %"class.absl::optional"* %76, i64 2
  %80 = bitcast %"class.absl::optional"* %79 to <2 x i64>*
  %81 = load <2 x i64>, <2 x i64>* %80, align 4, !alias.scope !6
  %82 = bitcast %"class.absl::optional"* %75 to <2 x i64>*
  store <2 x i64> %78, <2 x i64>* %82, align 4, !alias.scope !9, !noalias !6
  %83 = getelementptr %"class.absl::optional", %"class.absl::optional"* %75, i64 2
  %84 = bitcast %"class.absl::optional"* %83 to <2 x i64>*
  store <2 x i64> %81, <2 x i64>* %84, align 4, !alias.scope !9, !noalias !6
  %85 = or i64 %73, 4
  %86 = getelementptr %"class.absl::optional", %"class.absl::optional"* %8, i64 %85
  %87 = getelementptr %"class.absl::optional", %"class.absl::optional"* %30, i64 %85
  %88 = bitcast %"class.absl::optional"* %87 to <2 x i64>*
  %89 = load <2 x i64>, <2 x i64>* %88, align 4, !alias.scope !6
  %90 = getelementptr %"class.absl::optional", %"class.absl::optional"* %87, i64 2
  %91 = bitcast %"class.absl::optional"* %90 to <2 x i64>*
  %92 = load <2 x i64>, <2 x i64>* %91, align 4, !alias.scope !6
  %93 = bitcast %"class.absl::optional"* %86 to <2 x i64>*
  store <2 x i64> %89, <2 x i64>* %93, align 4, !alias.scope !9, !noalias !6
  %94 = getelementptr %"class.absl::optional", %"class.absl::optional"* %86, i64 2
  %95 = bitcast %"class.absl::optional"* %94 to <2 x i64>*
  store <2 x i64> %92, <2 x i64>* %95, align 4, !alias.scope !9, !noalias !6
  %96 = or i64 %73, 8
  %97 = getelementptr %"class.absl::optional", %"class.absl::optional"* %8, i64 %96
  %98 = getelementptr %"class.absl::optional", %"class.absl::optional"* %30, i64 %96
  %99 = bitcast %"class.absl::optional"* %98 to <2 x i64>*
  %100 = load <2 x i64>, <2 x i64>* %99, align 4, !alias.scope !6
  %101 = getelementptr %"class.absl::optional", %"class.absl::optional"* %98, i64 2
  %102 = bitcast %"class.absl::optional"* %101 to <2 x i64>*
  %103 = load <2 x i64>, <2 x i64>* %102, align 4, !alias.scope !6
  %104 = bitcast %"class.absl::optional"* %97 to <2 x i64>*
  store <2 x i64> %100, <2 x i64>* %104, align 4, !alias.scope !9, !noalias !6
  %105 = getelementptr %"class.absl::optional", %"class.absl::optional"* %97, i64 2
  %106 = bitcast %"class.absl::optional"* %105 to <2 x i64>*
  store <2 x i64> %103, <2 x i64>* %106, align 4, !alias.scope !9, !noalias !6
  %107 = or i64 %73, 12
  %108 = getelementptr %"class.absl::optional", %"class.absl::optional"* %8, i64 %107
  %109 = getelementptr %"class.absl::optional", %"class.absl::optional"* %30, i64 %107
  %110 = bitcast %"class.absl::optional"* %109 to <2 x i64>*
  %111 = load <2 x i64>, <2 x i64>* %110, align 4, !alias.scope !6
  %112 = getelementptr %"class.absl::optional", %"class.absl::optional"* %109, i64 2
  %113 = bitcast %"class.absl::optional"* %112 to <2 x i64>*
  %114 = load <2 x i64>, <2 x i64>* %113, align 4, !alias.scope !6
  %115 = bitcast %"class.absl::optional"* %108 to <2 x i64>*
  store <2 x i64> %111, <2 x i64>* %115, align 4, !alias.scope !9, !noalias !6
  %116 = getelementptr %"class.absl::optional", %"class.absl::optional"* %108, i64 2
  %117 = bitcast %"class.absl::optional"* %116 to <2 x i64>*
  store <2 x i64> %114, <2 x i64>* %117, align 4, !alias.scope !9, !noalias !6
  %118 = add i64 %73, 16
  %119 = add i64 %74, -4
  %120 = icmp eq i64 %119, 0
  br i1 %120, label %121, label %72, !llvm.loop !11

121:                                              ; preds = %72, %61
  %122 = phi i64 [ 0, %61 ], [ %118, %72 ]
  %123 = icmp eq i64 %68, 0
  br i1 %123, label %140, label %124

124:                                              ; preds = %121, %124
  %125 = phi i64 [ %137, %124 ], [ %122, %121 ]
  %126 = phi i64 [ %138, %124 ], [ %68, %121 ]
  %127 = getelementptr %"class.absl::optional", %"class.absl::optional"* %8, i64 %125
  %128 = getelementptr %"class.absl::optional", %"class.absl::optional"* %30, i64 %125
  %129 = bitcast %"class.absl::optional"* %128 to <2 x i64>*
  %130 = load <2 x i64>, <2 x i64>* %129, align 4, !alias.scope !6
  %131 = getelementptr %"class.absl::optional", %"class.absl::optional"* %128, i64 2
  %132 = bitcast %"class.absl::optional"* %131 to <2 x i64>*
  %133 = load <2 x i64>, <2 x i64>* %132, align 4, !alias.scope !6
  %134 = bitcast %"class.absl::optional"* %127 to <2 x i64>*
  store <2 x i64> %130, <2 x i64>* %134, align 4, !alias.scope !9, !noalias !6
  %135 = getelementptr %"class.absl::optional", %"class.absl::optional"* %127, i64 2
  %136 = bitcast %"class.absl::optional"* %135 to <2 x i64>*
  store <2 x i64> %133, <2 x i64>* %136, align 4, !alias.scope !9, !noalias !6
  %137 = add i64 %125, 4
  %138 = add i64 %126, -1
  %139 = icmp eq i64 %138, 0
  br i1 %139, label %140, label %124, !llvm.loop !13

140:                                              ; preds = %124, %121
  %141 = icmp eq i64 %41, %62
  br i1 %141, label %142, label %43

142:                                              ; preds = %152, %140
  %143 = phi %"class.absl::optional"* [ %63, %140 ], [ %159, %152 ]
  %144 = ptrtoint %"class.absl::optional"* %143 to i64
  br label %145

145:                                              ; preds = %142, %24
  %146 = phi i64 [ %144, %142 ], [ %13, %24 ]
  store i64 %146, i64* %32, align 8
  %147 = icmp eq i64 %28, 0
  br i1 %147, label %161, label %148

148:                                              ; preds = %145
  %149 = sub nsw i64 0, %29
  %150 = getelementptr inbounds %"class.absl::optional", %"class.absl::optional"* %8, i64 %149, i32 0, i32 0, i32 0, i32 0
  %151 = getelementptr inbounds %"class.absl::optional", %"class.absl::optional"* %1, i64 0, i32 0, i32 0, i32 0, i32 0
  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* align 4 %150, i8* align 4 %151, i64 %28, i1 false) #8
  br label %161

152:                                              ; preds = %43, %152
  %153 = phi %"class.absl::optional"* [ %159, %152 ], [ %44, %43 ]
  %154 = phi %"class.absl::optional"* [ %158, %152 ], [ %45, %43 ]
  %155 = bitcast %"class.absl::optional"* %154 to i64*
  %156 = bitcast %"class.absl::optional"* %153 to i64*
  %157 = load i64, i64* %155, align 4
  store i64 %157, i64* %156, align 4
  %158 = getelementptr inbounds %"class.absl::optional", %"class.absl::optional"* %154, i64 1
  %159 = getelementptr inbounds %"class.absl::optional", %"class.absl::optional"* %153, i64 1
  %160 = icmp ult %"class.absl::optional"* %158, %8
  br i1 %160, label %152, label %142, !llvm.loop !15

161:                                              ; preds = %145, %148
  %162 = bitcast %"class.absl::optional"* %1 to i64*
  store i64 %25, i64* %162, align 4
  br label %319

163:                                              ; preds = %3
  %164 = getelementptr inbounds %"class.std::__1::vector.2", %"class.std::__1::vector.2"* %0, i64 0, i32 0, i32 2
  %165 = bitcast %"struct.std::__1::__split_buffer"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %165) #8
  %166 = getelementptr inbounds %"struct.std::__1::__split_buffer", %"struct.std::__1::__split_buffer"* %5, i64 0, i32 0
  %167 = getelementptr inbounds %"struct.std::__1::__split_buffer", %"struct.std::__1::__split_buffer"* %5, i64 0, i32 1
  %168 = getelementptr inbounds %"struct.std::__1::__split_buffer", %"struct.std::__1::__split_buffer"* %5, i64 0, i32 2
  %169 = getelementptr inbounds %"struct.std::__1::__split_buffer", %"struct.std::__1::__split_buffer"* %5, i64 0, i32 3, i32 0, i32 0
  %170 = getelementptr inbounds %"struct.std::__1::__split_buffer", %"struct.std::__1::__split_buffer"* %5, i64 0, i32 3, i32 1, i32 0
  %171 = bitcast %"class.absl::optional"** %7 to i64*
  %172 = bitcast %"class.std::__1::vector.2"* %0 to i64*
  %173 = bitcast %"struct.std::__1::__split_buffer"* %5 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %173, i8 -86, i64 40, i1 false)
  %174 = load i64, i64* %172, align 8
  %175 = sub i64 %13, %174
  %176 = ashr exact i64 %175, 3
  %177 = add nsw i64 %176, 1
  %178 = icmp ugt i64 %177, 2305843009213693951
  br i1 %178, label %179, label %181

179:                                              ; preds = %163
  %180 = bitcast %"class.std::__1::vector.2"* %0 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %180) #10
  unreachable

181:                                              ; preds = %163
  %182 = bitcast %"class.absl::optional"** %10 to i64*
  %183 = sub i64 %14, %174
  %184 = ashr exact i64 %183, 3
  %185 = icmp ult i64 %184, 1152921504606846975
  br i1 %185, label %190, label %186

186:                                              ; preds = %181
  %187 = sub i64 %4, %174
  %188 = ashr exact i64 %187, 3
  store %"class.absl::optional"* null, %"class.absl::optional"** %169, align 8
  %189 = bitcast %"class.std::__1::allocator.7"** %170 to %"class.std::__1::__compressed_pair.4"**
  store %"class.std::__1::__compressed_pair.4"* %164, %"class.std::__1::__compressed_pair.4"** %189, align 8
  br label %201

190:                                              ; preds = %181
  %191 = ashr exact i64 %183, 2
  %192 = icmp ult i64 %191, %177
  %193 = select i1 %192, i64 %177, i64 %191
  %194 = sub i64 %4, %174
  %195 = ashr exact i64 %194, 3
  store %"class.absl::optional"* null, %"class.absl::optional"** %169, align 8
  %196 = bitcast %"class.std::__1::allocator.7"** %170 to %"class.std::__1::__compressed_pair.4"**
  store %"class.std::__1::__compressed_pair.4"* %164, %"class.std::__1::__compressed_pair.4"** %196, align 8
  %197 = icmp eq i64 %193, 0
  br i1 %197, label %207, label %198

198:                                              ; preds = %190
  %199 = icmp ugt i64 %193, 2305843009213693951
  br i1 %199, label %200, label %201

200:                                              ; preds = %198
  tail call void @abort() #10
  unreachable

201:                                              ; preds = %186, %198
  %202 = phi i64 [ 2305843009213693951, %186 ], [ %193, %198 ]
  %203 = phi i64 [ %188, %186 ], [ %195, %198 ]
  %204 = shl i64 %202, 3
  %205 = tail call i8* @_Znwm(i64 %204) #9
  %206 = bitcast i8* %205 to %"class.absl::optional"*
  br label %207

207:                                              ; preds = %190, %201
  %208 = phi i64 [ %203, %201 ], [ %195, %190 ]
  %209 = phi i64 [ %202, %201 ], [ 0, %190 ]
  %210 = phi %"class.absl::optional"* [ %206, %201 ], [ null, %190 ]
  store %"class.absl::optional"* %210, %"class.absl::optional"** %166, align 8
  %211 = getelementptr inbounds %"class.absl::optional", %"class.absl::optional"* %210, i64 %208
  store %"class.absl::optional"* %211, %"class.absl::optional"** %168, align 8
  store %"class.absl::optional"* %211, %"class.absl::optional"** %167, align 8
  %212 = getelementptr inbounds %"class.absl::optional", %"class.absl::optional"* %210, i64 %209
  store %"class.absl::optional"* %212, %"class.absl::optional"** %169, align 8
  call void @_ZNSt3__114__split_bufferIN4absl8optionalIN6syncer24PassphraseTypeForMetricsEEERNS_9allocatorIS5_EEE12emplace_backIJS5_EEEvDpOT_(%"struct.std::__1::__split_buffer"* nonnull %5, %"class.absl::optional"* dereferenceable(8) %2)
  %213 = load %"class.absl::optional"*, %"class.absl::optional"** %167, align 8
  %214 = load %"class.absl::optional"*, %"class.absl::optional"** %6, align 8
  %215 = ptrtoint %"class.absl::optional"* %214 to i64
  %216 = sub i64 %4, %215
  %217 = ashr exact i64 %216, 3
  %218 = sub nsw i64 0, %217
  %219 = getelementptr inbounds %"class.absl::optional", %"class.absl::optional"* %213, i64 %218
  store %"class.absl::optional"* %219, %"class.absl::optional"** %167, align 8
  %220 = icmp sgt i64 %216, 0
  br i1 %220, label %221, label %224

221:                                              ; preds = %207
  %222 = getelementptr inbounds %"class.absl::optional", %"class.absl::optional"* %219, i64 0, i32 0, i32 0, i32 0, i32 0
  %223 = getelementptr inbounds %"class.absl::optional", %"class.absl::optional"* %214, i64 0, i32 0, i32 0, i32 0, i32 0
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %222, i8* align 4 %223, i64 %216, i1 false) #8
  br label %224

224:                                              ; preds = %221, %207
  %225 = load %"class.absl::optional"*, %"class.absl::optional"** %7, align 8
  %226 = icmp eq %"class.absl::optional"* %225, %1
  br i1 %226, label %227, label %231

227:                                              ; preds = %224
  %228 = ptrtoint %"class.absl::optional"* %225 to i64
  %229 = bitcast %"class.absl::optional"** %168 to i64*
  %230 = load i64, i64* %229, align 8
  br label %293

231:                                              ; preds = %224
  %232 = bitcast %"class.absl::optional"** %168 to i64**
  %233 = load i64*, i64** %232, align 8
  %234 = getelementptr %"class.absl::optional", %"class.absl::optional"* %225, i64 -1, i32 0, i32 0, i32 0, i32 0
  %235 = ptrtoint i8* %234 to i64
  %236 = sub i64 %235, %4
  %237 = lshr i64 %236, 3
  %238 = add nuw nsw i64 %237, 1
  %239 = and i64 %238, 3
  %240 = icmp eq i64 %239, 0
  br i1 %240, label %255, label %241

241:                                              ; preds = %231, %241
  %242 = phi i64* [ %250, %241 ], [ %233, %231 ]
  %243 = phi %"class.absl::optional"* [ %247, %241 ], [ %1, %231 ]
  %244 = phi i64 [ %251, %241 ], [ %239, %231 ]
  %245 = bitcast %"class.absl::optional"* %243 to i64*
  %246 = load i64, i64* %245, align 4
  store i64 %246, i64* %242, align 4
  %247 = getelementptr inbounds %"class.absl::optional", %"class.absl::optional"* %243, i64 1
  %248 = load %"class.absl::optional"*, %"class.absl::optional"** %168, align 8
  %249 = getelementptr inbounds %"class.absl::optional", %"class.absl::optional"* %248, i64 1
  store %"class.absl::optional"* %249, %"class.absl::optional"** %168, align 8
  %250 = bitcast %"class.absl::optional"* %249 to i64*
  %251 = add i64 %244, -1
  %252 = icmp eq i64 %251, 0
  br i1 %252, label %253, label %241, !llvm.loop !16

253:                                              ; preds = %241
  %254 = bitcast %"class.absl::optional"* %249 to i64*
  br label %255

255:                                              ; preds = %231, %253
  %256 = phi %"class.absl::optional"* [ undef, %231 ], [ %249, %253 ]
  %257 = phi i64* [ %233, %231 ], [ %254, %253 ]
  %258 = phi %"class.absl::optional"* [ %1, %231 ], [ %247, %253 ]
  %259 = icmp ult i64 %236, 24
  br i1 %259, label %288, label %260

260:                                              ; preds = %255, %260
  %261 = phi i64* [ %287, %260 ], [ %257, %255 ]
  %262 = phi %"class.absl::optional"* [ %283, %260 ], [ %258, %255 ]
  %263 = bitcast %"class.absl::optional"* %262 to i64*
  %264 = load i64, i64* %263, align 4
  store i64 %264, i64* %261, align 4
  %265 = getelementptr inbounds %"class.absl::optional", %"class.absl::optional"* %262, i64 1
  %266 = load %"class.absl::optional"*, %"class.absl::optional"** %168, align 8
  %267 = getelementptr inbounds %"class.absl::optional", %"class.absl::optional"* %266, i64 1
  store %"class.absl::optional"* %267, %"class.absl::optional"** %168, align 8
  %268 = bitcast %"class.absl::optional"* %267 to i64*
  %269 = bitcast %"class.absl::optional"* %265 to i64*
  %270 = load i64, i64* %269, align 4
  store i64 %270, i64* %268, align 4
  %271 = getelementptr inbounds %"class.absl::optional", %"class.absl::optional"* %262, i64 2
  %272 = load %"class.absl::optional"*, %"class.absl::optional"** %168, align 8
  %273 = getelementptr inbounds %"class.absl::optional", %"class.absl::optional"* %272, i64 1
  store %"class.absl::optional"* %273, %"class.absl::optional"** %168, align 8
  %274 = bitcast %"class.absl::optional"* %273 to i64*
  %275 = bitcast %"class.absl::optional"* %271 to i64*
  %276 = load i64, i64* %275, align 4
  store i64 %276, i64* %274, align 4
  %277 = getelementptr inbounds %"class.absl::optional", %"class.absl::optional"* %262, i64 3
  %278 = load %"class.absl::optional"*, %"class.absl::optional"** %168, align 8
  %279 = getelementptr inbounds %"class.absl::optional", %"class.absl::optional"* %278, i64 1
  store %"class.absl::optional"* %279, %"class.absl::optional"** %168, align 8
  %280 = bitcast %"class.absl::optional"* %279 to i64*
  %281 = bitcast %"class.absl::optional"* %277 to i64*
  %282 = load i64, i64* %281, align 4
  store i64 %282, i64* %280, align 4
  %283 = getelementptr inbounds %"class.absl::optional", %"class.absl::optional"* %262, i64 4
  %284 = load %"class.absl::optional"*, %"class.absl::optional"** %168, align 8
  %285 = getelementptr inbounds %"class.absl::optional", %"class.absl::optional"* %284, i64 1
  store %"class.absl::optional"* %285, %"class.absl::optional"** %168, align 8
  %286 = icmp eq %"class.absl::optional"* %283, %225
  %287 = bitcast %"class.absl::optional"* %285 to i64*
  br i1 %286, label %288, label %260

288:                                              ; preds = %260, %255
  %289 = phi %"class.absl::optional"* [ %256, %255 ], [ %285, %260 ]
  %290 = ptrtoint %"class.absl::optional"* %289 to i64
  %291 = load i64, i64* %171, align 8
  %292 = bitcast %"class.absl::optional"** %168 to i64*
  br label %293

293:                                              ; preds = %227, %288
  %294 = phi i64* [ %229, %227 ], [ %292, %288 ]
  %295 = phi i64 [ %230, %227 ], [ %290, %288 ]
  %296 = phi i64 [ %228, %227 ], [ %291, %288 ]
  %297 = load i64, i64* %172, align 8
  %298 = bitcast %"class.absl::optional"** %167 to i64*
  %299 = load i64, i64* %298, align 8
  store i64 %299, i64* %172, align 8
  store i64 %297, i64* %298, align 8
  store i64 %295, i64* %171, align 8
  store i64 %296, i64* %294, align 8
  %300 = load i64, i64* %182, align 8
  %301 = bitcast %"class.absl::optional"** %169 to i64*
  %302 = load i64, i64* %301, align 8
  store i64 %302, i64* %182, align 8
  store i64 %300, i64* %301, align 8
  %303 = bitcast %"struct.std::__1::__split_buffer"* %5 to i64*
  store i64 %297, i64* %303, align 8
  %304 = inttoptr i64 %297 to %"class.absl::optional"*
  %305 = inttoptr i64 %296 to %"class.absl::optional"*
  %306 = icmp eq %"class.absl::optional"* %305, %304
  br i1 %306, label %314, label %307

307:                                              ; preds = %293
  %308 = getelementptr %"class.absl::optional", %"class.absl::optional"* %305, i64 -1, i32 0, i32 0, i32 0, i32 0
  %309 = ptrtoint i8* %308 to i64
  %310 = sub i64 %309, %297
  %311 = lshr i64 %310, 3
  %312 = xor i64 %311, -1
  %313 = getelementptr %"class.absl::optional", %"class.absl::optional"* %305, i64 %312
  store %"class.absl::optional"* %313, %"class.absl::optional"** %168, align 8
  br label %314

314:                                              ; preds = %307, %293
  %315 = icmp eq i64 %297, 0
  br i1 %315, label %318, label %316

316:                                              ; preds = %314
  %317 = getelementptr inbounds %"class.absl::optional", %"class.absl::optional"* %304, i64 0, i32 0, i32 0, i32 0, i32 0
  call void @_ZdlPv(i8* %317) #9
  br label %318

318:                                              ; preds = %314, %316
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %165) #8
  br label %319

319:                                              ; preds = %18, %161, %318
  %320 = phi %"class.absl::optional"* [ %1, %18 ], [ %1, %161 ], [ %213, %318 ]
  ret %"class.absl::optional"* %320
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #4

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__114__split_bufferIN4absl8optionalIN6syncer24PassphraseTypeForMetricsEEERNS_9allocatorIS5_EEE12emplace_backIJS5_EEEvDpOT_(%"struct.std::__1::__split_buffer"*, %"class.absl::optional"* dereferenceable(8)) local_unnamed_addr #0 comdat align 2 {
  %3 = getelementptr inbounds %"struct.std::__1::__split_buffer", %"struct.std::__1::__split_buffer"* %0, i64 0, i32 2
  %4 = load %"class.absl::optional"*, %"class.absl::optional"** %3, align 8
  %5 = getelementptr inbounds %"struct.std::__1::__split_buffer", %"struct.std::__1::__split_buffer"* %0, i64 0, i32 3, i32 0, i32 0
  %6 = load %"class.absl::optional"*, %"class.absl::optional"** %5, align 8
  %7 = icmp eq %"class.absl::optional"* %4, %6
  %8 = ptrtoint %"class.absl::optional"* %6 to i64
  %9 = bitcast %"class.absl::optional"* %4 to i64*
  br i1 %7, label %10, label %148

10:                                               ; preds = %2
  %11 = getelementptr inbounds %"struct.std::__1::__split_buffer", %"struct.std::__1::__split_buffer"* %0, i64 0, i32 1
  %12 = load %"class.absl::optional"*, %"class.absl::optional"** %11, align 8
  %13 = getelementptr inbounds %"struct.std::__1::__split_buffer", %"struct.std::__1::__split_buffer"* %0, i64 0, i32 0
  %14 = load %"class.absl::optional"*, %"class.absl::optional"** %13, align 8
  %15 = icmp ugt %"class.absl::optional"* %12, %14
  %16 = ptrtoint %"class.absl::optional"* %14 to i64
  br i1 %15, label %17, label %37

17:                                               ; preds = %10
  %18 = ptrtoint %"class.absl::optional"* %12 to i64
  %19 = sub i64 %18, %16
  %20 = ashr exact i64 %19, 3
  %21 = add nsw i64 %20, 1
  %22 = sdiv i64 %21, -2
  %23 = getelementptr inbounds %"class.absl::optional", %"class.absl::optional"* %12, i64 %22
  %24 = ptrtoint %"class.absl::optional"* %4 to i64
  %25 = sub i64 %24, %18
  %26 = ashr exact i64 %25, 3
  %27 = icmp eq i64 %25, 0
  br i1 %27, label %32, label %28

28:                                               ; preds = %17
  %29 = getelementptr inbounds %"class.absl::optional", %"class.absl::optional"* %23, i64 0, i32 0, i32 0, i32 0, i32 0
  %30 = getelementptr inbounds %"class.absl::optional", %"class.absl::optional"* %12, i64 0, i32 0, i32 0, i32 0, i32 0
  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* align 4 %29, i8* align 4 %30, i64 %25, i1 false) #8
  %31 = load %"class.absl::optional"*, %"class.absl::optional"** %11, align 8
  br label %32

32:                                               ; preds = %17, %28
  %33 = phi %"class.absl::optional"* [ %12, %17 ], [ %31, %28 ]
  %34 = getelementptr inbounds %"class.absl::optional", %"class.absl::optional"* %23, i64 %26
  store %"class.absl::optional"* %34, %"class.absl::optional"** %3, align 8
  %35 = getelementptr inbounds %"class.absl::optional", %"class.absl::optional"* %33, i64 %22
  store %"class.absl::optional"* %35, %"class.absl::optional"** %11, align 8
  %36 = bitcast %"class.absl::optional"* %34 to i64*
  br label %148

37:                                               ; preds = %10
  %38 = bitcast %"class.absl::optional"** %5 to i64*
  %39 = bitcast %"struct.std::__1::__split_buffer"* %0 to i64*
  %40 = sub i64 %8, %16
  %41 = ashr exact i64 %40, 2
  %42 = icmp eq i64 %40, 0
  %43 = select i1 %42, i64 1, i64 %41
  %44 = icmp ugt i64 %43, 2305843009213693951
  br i1 %44, label %45, label %46

45:                                               ; preds = %37
  tail call void @abort() #10
  unreachable

46:                                               ; preds = %37
  %47 = lshr i64 %43, 2
  %48 = shl i64 %43, 3
  %49 = tail call i8* @_Znwm(i64 %48) #9
  %50 = bitcast i8* %49 to %"class.absl::optional"*
  %51 = ptrtoint i8* %49 to i64
  %52 = getelementptr inbounds %"class.absl::optional", %"class.absl::optional"* %50, i64 %47
  %53 = ptrtoint %"class.absl::optional"* %52 to i64
  %54 = getelementptr inbounds %"class.absl::optional", %"class.absl::optional"* %50, i64 %43
  %55 = ptrtoint %"class.absl::optional"* %54 to i64
  %56 = ptrtoint %"class.absl::optional"* %12 to i64
  %57 = ptrtoint %"class.absl::optional"* %4 to i64
  %58 = sub i64 %57, %56
  %59 = ashr exact i64 %58, 3
  %60 = getelementptr inbounds %"class.absl::optional", %"class.absl::optional"* %52, i64 %59
  %61 = icmp eq i64 %58, 0
  br i1 %61, label %137, label %62

62:                                               ; preds = %46
  %63 = add i64 %58, -8
  %64 = lshr i64 %63, 3
  %65 = add nuw nsw i64 %64, 1
  %66 = and i64 %65, 7
  %67 = icmp eq i64 %66, 0
  br i1 %67, label %83, label %68

68:                                               ; preds = %62, %68
  %69 = phi %"class.absl::optional"* [ %76, %68 ], [ %52, %62 ]
  %70 = phi i64 [ %77, %68 ], [ %53, %62 ]
  %71 = phi %"class.absl::optional"* [ %78, %68 ], [ %12, %62 ]
  %72 = phi i64 [ %79, %68 ], [ %66, %62 ]
  %73 = bitcast %"class.absl::optional"* %71 to i64*
  %74 = inttoptr i64 %70 to i64*
  %75 = load i64, i64* %73, align 4
  store i64 %75, i64* %74, align 4
  %76 = getelementptr inbounds %"class.absl::optional", %"class.absl::optional"* %69, i64 1
  %77 = ptrtoint %"class.absl::optional"* %76 to i64
  %78 = getelementptr inbounds %"class.absl::optional", %"class.absl::optional"* %71, i64 1
  %79 = add i64 %72, -1
  %80 = icmp eq i64 %79, 0
  br i1 %80, label %81, label %68, !llvm.loop !17

81:                                               ; preds = %68
  %82 = ptrtoint %"class.absl::optional"* %76 to i64
  br label %83

83:                                               ; preds = %62, %81
  %84 = phi %"class.absl::optional"* [ %52, %62 ], [ %76, %81 ]
  %85 = phi i64 [ %53, %62 ], [ %82, %81 ]
  %86 = phi %"class.absl::optional"* [ %12, %62 ], [ %78, %81 ]
  %87 = icmp ult i64 %63, 56
  br i1 %87, label %134, label %88

88:                                               ; preds = %83, %88
  %89 = phi %"class.absl::optional"* [ %130, %88 ], [ %84, %83 ]
  %90 = phi i64 [ %131, %88 ], [ %85, %83 ]
  %91 = phi %"class.absl::optional"* [ %132, %88 ], [ %86, %83 ]
  %92 = bitcast %"class.absl::optional"* %91 to i64*
  %93 = inttoptr i64 %90 to i64*
  %94 = load i64, i64* %92, align 4
  store i64 %94, i64* %93, align 4
  %95 = getelementptr inbounds %"class.absl::optional", %"class.absl::optional"* %89, i64 1
  %96 = getelementptr inbounds %"class.absl::optional", %"class.absl::optional"* %91, i64 1
  %97 = bitcast %"class.absl::optional"* %96 to i64*
  %98 = bitcast %"class.absl::optional"* %95 to i64*
  %99 = load i64, i64* %97, align 4
  store i64 %99, i64* %98, align 4
  %100 = getelementptr inbounds %"class.absl::optional", %"class.absl::optional"* %89, i64 2
  %101 = getelementptr inbounds %"class.absl::optional", %"class.absl::optional"* %91, i64 2
  %102 = bitcast %"class.absl::optional"* %101 to i64*
  %103 = bitcast %"class.absl::optional"* %100 to i64*
  %104 = load i64, i64* %102, align 4
  store i64 %104, i64* %103, align 4
  %105 = getelementptr inbounds %"class.absl::optional", %"class.absl::optional"* %89, i64 3
  %106 = getelementptr inbounds %"class.absl::optional", %"class.absl::optional"* %91, i64 3
  %107 = bitcast %"class.absl::optional"* %106 to i64*
  %108 = bitcast %"class.absl::optional"* %105 to i64*
  %109 = load i64, i64* %107, align 4
  store i64 %109, i64* %108, align 4
  %110 = getelementptr inbounds %"class.absl::optional", %"class.absl::optional"* %89, i64 4
  %111 = getelementptr inbounds %"class.absl::optional", %"class.absl::optional"* %91, i64 4
  %112 = bitcast %"class.absl::optional"* %111 to i64*
  %113 = bitcast %"class.absl::optional"* %110 to i64*
  %114 = load i64, i64* %112, align 4
  store i64 %114, i64* %113, align 4
  %115 = getelementptr inbounds %"class.absl::optional", %"class.absl::optional"* %89, i64 5
  %116 = getelementptr inbounds %"class.absl::optional", %"class.absl::optional"* %91, i64 5
  %117 = bitcast %"class.absl::optional"* %116 to i64*
  %118 = bitcast %"class.absl::optional"* %115 to i64*
  %119 = load i64, i64* %117, align 4
  store i64 %119, i64* %118, align 4
  %120 = getelementptr inbounds %"class.absl::optional", %"class.absl::optional"* %89, i64 6
  %121 = getelementptr inbounds %"class.absl::optional", %"class.absl::optional"* %91, i64 6
  %122 = bitcast %"class.absl::optional"* %121 to i64*
  %123 = bitcast %"class.absl::optional"* %120 to i64*
  %124 = load i64, i64* %122, align 4
  store i64 %124, i64* %123, align 4
  %125 = getelementptr inbounds %"class.absl::optional", %"class.absl::optional"* %89, i64 7
  %126 = getelementptr inbounds %"class.absl::optional", %"class.absl::optional"* %91, i64 7
  %127 = bitcast %"class.absl::optional"* %126 to i64*
  %128 = bitcast %"class.absl::optional"* %125 to i64*
  %129 = load i64, i64* %127, align 4
  store i64 %129, i64* %128, align 4
  %130 = getelementptr inbounds %"class.absl::optional", %"class.absl::optional"* %89, i64 8
  %131 = ptrtoint %"class.absl::optional"* %130 to i64
  %132 = getelementptr inbounds %"class.absl::optional", %"class.absl::optional"* %91, i64 8
  %133 = icmp eq %"class.absl::optional"* %60, %130
  br i1 %133, label %134, label %88

134:                                              ; preds = %88, %83
  %135 = ptrtoint %"class.absl::optional"* %60 to i64
  %136 = load %"class.absl::optional"*, %"class.absl::optional"** %13, align 8
  br label %137

137:                                              ; preds = %46, %134
  %138 = phi %"class.absl::optional"* [ %136, %134 ], [ %14, %46 ]
  %139 = phi i64 [ %135, %134 ], [ %53, %46 ]
  store i64 %51, i64* %39, align 8
  %140 = bitcast %"class.absl::optional"** %11 to i64*
  store i64 %53, i64* %140, align 8
  %141 = bitcast %"class.absl::optional"** %3 to i64*
  store i64 %139, i64* %141, align 8
  store i64 %55, i64* %38, align 8
  %142 = icmp eq %"class.absl::optional"* %138, null
  %143 = inttoptr i64 %139 to i64*
  br i1 %142, label %148, label %144

144:                                              ; preds = %137
  %145 = getelementptr inbounds %"class.absl::optional", %"class.absl::optional"* %138, i64 0, i32 0, i32 0, i32 0, i32 0
  tail call void @_ZdlPv(i8* %145) #9
  %146 = bitcast %"class.absl::optional"** %3 to i64**
  %147 = load i64*, i64** %146, align 8
  br label %148

148:                                              ; preds = %144, %137, %32, %2
  %149 = phi i64* [ %147, %144 ], [ %143, %137 ], [ %36, %32 ], [ %9, %2 ]
  %150 = bitcast %"class.absl::optional"* %1 to i64*
  %151 = load i64, i64* %150, align 4
  store i64 %151, i64* %149, align 4
  %152 = load %"class.absl::optional"*, %"class.absl::optional"** %3, align 8
  %153 = getelementptr inbounds %"class.absl::optional", %"class.absl::optional"* %152, i64 1
  store %"class.absl::optional"* %153, %"class.absl::optional"** %3, align 8
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memmove.p0i8.p0i8.i64(i8* nocapture, i8* nocapture readonly, i64, i1 immarg) #4

; Function Attrs: noreturn
declare void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"*) local_unnamed_addr #5

; Function Attrs: noreturn nounwind
declare void @abort() local_unnamed_addr #6

; Function Attrs: nobuiltin nofree
declare noalias nonnull i8* @_Znwm(i64) local_unnamed_addr #7

declare void @_ZN4base23UmaHistogramExactLinearEPKcii(i8*, i32, i32) local_unnamed_addr #1

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { argmemonly nounwind }
attributes #5 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { noreturn nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { nobuiltin nofree "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #8 = { nounwind }
attributes #9 = { builtin nounwind }
attributes #10 = { noreturn nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{!3}
!3 = distinct !{!3, !4, !"_ZNKR4base17RepeatingCallbackIFNSt3__16vectorIPKN6syncer11SyncServiceENS1_9allocatorIS6_EEEEvEE3RunEv: argument 0"}
!4 = distinct !{!4, !"_ZNKR4base17RepeatingCallbackIFNSt3__16vectorIPKN6syncer11SyncServiceENS1_9allocatorIS6_EEEEvEE3RunEv"}
!5 = !{i8 0, i8 2}
!6 = !{!7}
!7 = distinct !{!7, !8}
!8 = distinct !{!8, !"LVerDomain"}
!9 = !{!10}
!10 = distinct !{!10, !8}
!11 = distinct !{!11, !12}
!12 = !{!"llvm.loop.isvectorized", i32 1}
!13 = distinct !{!13, !14}
!14 = !{!"llvm.loop.unroll.disable"}
!15 = distinct !{!15, !12}
!16 = distinct !{!16, !14}
!17 = distinct !{!17, !14}
