; ModuleID = '../../chrome/browser/download/download_completion_blocker.cc'
source_filename = "../../chrome/browser/download/download_completion_blocker.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%class.DownloadCompletionBlocker = type { %"class.base::SupportsUserData::Data", i8, %"class.base::OnceCallback" }
%"class.base::SupportsUserData::Data" = type { i32 (...)** }
%"class.base::OnceCallback" = type { %"class.base::internal::CallbackBase" }
%"class.base::internal::CallbackBase" = type { %class.scoped_refptr }
%class.scoped_refptr = type { %"class.base::internal::BindStateBase"* }
%"class.base::internal::BindStateBase" = type { %"class.base::RefCountedThreadSafe", void ()*, void (%"class.base::internal::BindStateBase"*)*, i1 (%"class.base::internal::BindStateBase"*, i32)* }
%"class.base::RefCountedThreadSafe" = type { %"class.base::subtle::RefCountedThreadSafeBase" }
%"class.base::subtle::RefCountedThreadSafeBase" = type { %"class.base::AtomicRefCount" }
%"class.base::AtomicRefCount" = type { %"struct.std::__1::atomic" }
%"struct.std::__1::atomic" = type { %"struct.std::__1::__atomic_base" }
%"struct.std::__1::__atomic_base" = type { %"struct.std::__1::__atomic_base.0" }
%"struct.std::__1::__atomic_base.0" = type { %"struct.std::__1::__cxx_atomic_impl" }
%"struct.std::__1::__cxx_atomic_impl" = type { %"struct.std::__1::__cxx_atomic_base_impl" }
%"struct.std::__1::__cxx_atomic_base_impl" = type { i32 }

@_ZTV25DownloadCompletionBlocker = hidden unnamed_addr constant { [6 x i8*] } { [6 x i8*] [i8* null, i8* null, i8* bitcast (void (%class.DownloadCompletionBlocker*)* @_ZN25DownloadCompletionBlockerD2Ev to i8*), i8* bitcast (void (%class.DownloadCompletionBlocker*)* @_ZN25DownloadCompletionBlockerD0Ev to i8*), i8* bitcast (void ()* @_ZN4base16SupportsUserData4Data5CloneEv to i8*), i8* bitcast (void (%class.DownloadCompletionBlocker*)* @_ZN25DownloadCompletionBlocker16CompleteDownloadEv to i8*)] }, align 8

@_ZN25DownloadCompletionBlockerC1Ev = hidden unnamed_addr alias void (%class.DownloadCompletionBlocker*), void (%class.DownloadCompletionBlocker*)* @_ZN25DownloadCompletionBlockerC2Ev
@_ZN25DownloadCompletionBlockerD1Ev = hidden unnamed_addr alias void (%class.DownloadCompletionBlocker*), void (%class.DownloadCompletionBlocker*)* @_ZN25DownloadCompletionBlockerD2Ev

; Function Attrs: nofree norecurse nounwind ssp uwtable writeonly
define hidden void @_ZN25DownloadCompletionBlockerC2Ev(%class.DownloadCompletionBlocker* nocapture) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %class.DownloadCompletionBlocker, %class.DownloadCompletionBlocker* %0, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [6 x i8*] }, { [6 x i8*] }* @_ZTV25DownloadCompletionBlocker, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %2, align 8
  %3 = getelementptr inbounds %class.DownloadCompletionBlocker, %class.DownloadCompletionBlocker* %0, i64 0, i32 1
  store i8 0, i8* %3, align 8
  %4 = getelementptr inbounds %class.DownloadCompletionBlocker, %class.DownloadCompletionBlocker* %0, i64 0, i32 2, i32 0, i32 0, i32 0
  store %"class.base::internal::BindStateBase"* null, %"class.base::internal::BindStateBase"** %4, align 8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN25DownloadCompletionBlockerD2Ev(%class.DownloadCompletionBlocker*) unnamed_addr #1 align 2 {
  %2 = getelementptr inbounds %class.DownloadCompletionBlocker, %class.DownloadCompletionBlocker* %0, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [6 x i8*] }, { [6 x i8*] }* @_ZTV25DownloadCompletionBlocker, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %2, align 8
  %3 = getelementptr inbounds %class.DownloadCompletionBlocker, %class.DownloadCompletionBlocker* %0, i64 0, i32 2, i32 0
  tail call void @_ZN4base8internal12CallbackBaseD2Ev(%"class.base::internal::CallbackBase"* %3) #5
  ret void
}

; Function Attrs: nounwind
declare void @_ZN4base8internal12CallbackBaseD2Ev(%"class.base::internal::CallbackBase"*) unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN25DownloadCompletionBlockerD0Ev(%class.DownloadCompletionBlocker*) unnamed_addr #1 align 2 {
  %2 = getelementptr inbounds %class.DownloadCompletionBlocker, %class.DownloadCompletionBlocker* %0, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [6 x i8*] }, { [6 x i8*] }* @_ZTV25DownloadCompletionBlocker, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %2, align 8
  %3 = getelementptr inbounds %class.DownloadCompletionBlocker, %class.DownloadCompletionBlocker* %0, i64 0, i32 2, i32 0
  tail call void @_ZN4base8internal12CallbackBaseD2Ev(%"class.base::internal::CallbackBase"* %3) #5
  %4 = bitcast %class.DownloadCompletionBlocker* %0 to i8*
  tail call void @_ZdlPv(i8* %4) #6
  ret void
}

; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(i8*) local_unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN25DownloadCompletionBlocker16CompleteDownloadEv(%class.DownloadCompletionBlocker* nocapture) unnamed_addr #1 align 2 {
  %2 = alloca %"class.base::OnceCallback", align 8
  %3 = getelementptr inbounds %class.DownloadCompletionBlocker, %class.DownloadCompletionBlocker* %0, i64 0, i32 1
  %4 = load i8, i8* %3, align 8, !range !2
  %5 = icmp eq i8 %4, 0
  br i1 %5, label %6, label %18

6:                                                ; preds = %1
  store i8 1, i8* %3, align 8
  %7 = getelementptr inbounds %class.DownloadCompletionBlocker, %class.DownloadCompletionBlocker* %0, i64 0, i32 2, i32 0, i32 0, i32 0
  %8 = load %"class.base::internal::BindStateBase"*, %"class.base::internal::BindStateBase"** %7, align 8
  %9 = icmp eq %"class.base::internal::BindStateBase"* %8, null
  br i1 %9, label %18, label %10

10:                                               ; preds = %6
  %11 = ptrtoint %"class.base::internal::BindStateBase"* %8 to i64
  %12 = bitcast %"class.base::OnceCallback"* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %12) #5
  %13 = bitcast %"class.base::OnceCallback"* %2 to i64*
  store i64 %11, i64* %13, align 8
  store %"class.base::internal::BindStateBase"* null, %"class.base::internal::BindStateBase"** %7, align 8
  %14 = getelementptr inbounds %"class.base::OnceCallback", %"class.base::OnceCallback"* %2, i64 0, i32 0
  %15 = getelementptr inbounds %"class.base::internal::BindStateBase", %"class.base::internal::BindStateBase"* %8, i64 0, i32 1
  %16 = bitcast void ()** %15 to void (%"class.base::internal::BindStateBase"*)**
  %17 = load void (%"class.base::internal::BindStateBase"*)*, void (%"class.base::internal::BindStateBase"*)** %16, align 8
  tail call void %17(%"class.base::internal::BindStateBase"* nonnull %8) #5
  call void @_ZN4base8internal12CallbackBaseD2Ev(%"class.base::internal::CallbackBase"* nonnull %14) #5
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %12) #5
  br label %18

18:                                               ; preds = %1, %6, %10
  ret void
}

declare void @_ZN4base16SupportsUserData4Data5CloneEv() unnamed_addr

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #4

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #4

attributes #0 = { nofree norecurse nounwind ssp uwtable writeonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { argmemonly nounwind }
attributes #5 = { nounwind }
attributes #6 = { builtin nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{i8 0, i8 2}
