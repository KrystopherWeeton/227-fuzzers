; ModuleID = '../../third_party/pdfium/core/fxcrt/css/cfx_cssoutputtextbuf.cpp'
source_filename = "../../third_party/pdfium/core/fxcrt/css/cfx_cssoutputtextbuf.cpp"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%class.CFX_CSSOutputTextBuf = type { %"class.std::__1::vector" }
%"class.std::__1::vector" = type { %"class.std::__1::__vector_base" }
%"class.std::__1::__vector_base" = type { i32*, i32*, %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { i32* }
%"class.std::__1::__vector_base_common" = type { i8 }
%"class.fxcrt::StringViewTemplate" = type { %"class.pdfium::span" }
%"class.pdfium::span" = type { %"class.fxcrt::UnownedPtr", i64 }
%"class.fxcrt::UnownedPtr" = type { i32* }

@_ZN20CFX_CSSOutputTextBufC1Ev = hidden unnamed_addr alias void (%class.CFX_CSSOutputTextBuf*), void (%class.CFX_CSSOutputTextBuf*)* @_ZN20CFX_CSSOutputTextBufC2Ev
@_ZN20CFX_CSSOutputTextBufD1Ev = hidden unnamed_addr alias void (%class.CFX_CSSOutputTextBuf*), void (%class.CFX_CSSOutputTextBuf*)* @_ZN20CFX_CSSOutputTextBufD2Ev

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN20CFX_CSSOutputTextBufC2Ev(%class.CFX_CSSOutputTextBuf* nocapture) unnamed_addr #0 align 2 {
  %2 = bitcast %class.CFX_CSSOutputTextBuf* %0 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %2, i8 0, i64 24, i1 false) #4
  %3 = getelementptr inbounds %class.CFX_CSSOutputTextBuf, %class.CFX_CSSOutputTextBuf* %0, i64 0, i32 0, i32 0, i32 2, i32 0, i32 0
  %4 = bitcast i32** %3 to i64*
  %5 = bitcast %class.CFX_CSSOutputTextBuf* %0 to i64*
  %6 = getelementptr inbounds %class.CFX_CSSOutputTextBuf, %class.CFX_CSSOutputTextBuf* %0, i64 0, i32 0, i32 0, i32 1
  %7 = bitcast i32** %6 to i64*
  %8 = tail call i8* @_ZN6pdfium8internal10AllocOrDieEmm(i64 32, i64 4) #4
  %9 = ptrtoint i8* %8 to i64
  %10 = getelementptr inbounds i8, i8* %8, i64 128
  %11 = ptrtoint i8* %10 to i64
  %12 = getelementptr inbounds %class.CFX_CSSOutputTextBuf, %class.CFX_CSSOutputTextBuf* %0, i64 0, i32 0, i32 0, i32 0
  %13 = load i32*, i32** %12, align 8
  %14 = ptrtoint i32* %13 to i64
  %15 = load i32*, i32** %6, align 8
  %16 = bitcast i32* %15 to i8*
  %17 = icmp eq i32* %15, %13
  br i1 %17, label %178, label %18

18:                                               ; preds = %1
  %19 = bitcast i8* %8 to i32*
  %20 = getelementptr i32, i32* %15, i64 -1
  %21 = ptrtoint i32* %20 to i64
  %22 = sub i64 %21, %14
  %23 = lshr i64 %22, 2
  %24 = add nuw nsw i64 %23, 1
  %25 = icmp ult i64 %24, 8
  br i1 %25, label %122, label %26

26:                                               ; preds = %18
  %27 = getelementptr i32, i32* %15, i64 -1
  %28 = ptrtoint i32* %27 to i64
  %29 = sub i64 %28, %14
  %30 = lshr i64 %29, 2
  %31 = and i64 %29, -4
  %32 = xor i64 %31, -4
  %33 = getelementptr i8, i8* %8, i64 %32
  %34 = xor i64 %30, -1
  %35 = getelementptr i32, i32* %15, i64 %34
  %36 = bitcast i32* %35 to i8*
  %37 = icmp ult i8* %33, %16
  %38 = icmp ugt i8* %8, %36
  %39 = and i1 %37, %38
  br i1 %39, label %122, label %40

40:                                               ; preds = %26
  %41 = and i64 %24, 9223372036854775800
  %42 = sub nsw i64 0, %41
  %43 = getelementptr i32, i32* %19, i64 %42
  %44 = sub nsw i64 0, %41
  %45 = getelementptr i32, i32* %15, i64 %44
  %46 = add nsw i64 %41, -8
  %47 = lshr exact i64 %46, 3
  %48 = add nuw nsw i64 %47, 1
  %49 = and i64 %48, 1
  %50 = icmp eq i64 %46, 0
  br i1 %50, label %99, label %51

51:                                               ; preds = %40
  %52 = sub nuw nsw i64 %48, %49
  %53 = getelementptr i8, i8* %8, i64 -4
  %54 = bitcast i8* %53 to i32*
  %55 = getelementptr i32, i32* %15, i64 -1
  %56 = getelementptr i8, i8* %8, i64 -4
  %57 = bitcast i8* %56 to i32*
  %58 = getelementptr i32, i32* %15, i64 -1
  br label %59

59:                                               ; preds = %59, %51
  %60 = phi i64 [ 0, %51 ], [ %94, %59 ]
  %61 = phi i64 [ %52, %51 ], [ %95, %59 ]
  %62 = sub i64 0, %60
  %63 = sub i64 0, %60
  %64 = getelementptr inbounds i32, i32* %54, i64 %62
  %65 = getelementptr inbounds i32, i32* %55, i64 %63
  %66 = getelementptr inbounds i32, i32* %65, i64 -3
  %67 = bitcast i32* %66 to <4 x i32>*
  %68 = load <4 x i32>, <4 x i32>* %67, align 4, !alias.scope !2
  %69 = getelementptr inbounds i32, i32* %65, i64 -4
  %70 = getelementptr inbounds i32, i32* %69, i64 -3
  %71 = bitcast i32* %70 to <4 x i32>*
  %72 = load <4 x i32>, <4 x i32>* %71, align 4, !alias.scope !2
  %73 = getelementptr inbounds i32, i32* %64, i64 -3
  %74 = bitcast i32* %73 to <4 x i32>*
  store <4 x i32> %68, <4 x i32>* %74, align 4, !alias.scope !5, !noalias !2
  %75 = getelementptr inbounds i32, i32* %64, i64 -4
  %76 = getelementptr inbounds i32, i32* %75, i64 -3
  %77 = bitcast i32* %76 to <4 x i32>*
  store <4 x i32> %72, <4 x i32>* %77, align 4, !alias.scope !5, !noalias !2
  %78 = sub nuw nsw i64 -8, %60
  %79 = sub nuw nsw i64 -8, %60
  %80 = getelementptr inbounds i32, i32* %57, i64 %78
  %81 = getelementptr inbounds i32, i32* %58, i64 %79
  %82 = getelementptr inbounds i32, i32* %81, i64 -3
  %83 = bitcast i32* %82 to <4 x i32>*
  %84 = load <4 x i32>, <4 x i32>* %83, align 4, !alias.scope !2
  %85 = getelementptr inbounds i32, i32* %81, i64 -4
  %86 = getelementptr inbounds i32, i32* %85, i64 -3
  %87 = bitcast i32* %86 to <4 x i32>*
  %88 = load <4 x i32>, <4 x i32>* %87, align 4, !alias.scope !2
  %89 = getelementptr inbounds i32, i32* %80, i64 -3
  %90 = bitcast i32* %89 to <4 x i32>*
  store <4 x i32> %84, <4 x i32>* %90, align 4, !alias.scope !5, !noalias !2
  %91 = getelementptr inbounds i32, i32* %80, i64 -4
  %92 = getelementptr inbounds i32, i32* %91, i64 -3
  %93 = bitcast i32* %92 to <4 x i32>*
  store <4 x i32> %88, <4 x i32>* %93, align 4, !alias.scope !5, !noalias !2
  %94 = add i64 %60, 16
  %95 = add i64 %61, -2
  %96 = icmp eq i64 %95, 0
  br i1 %96, label %97, label %59, !llvm.loop !7

97:                                               ; preds = %59
  %98 = sub nuw nsw i64 -16, %60
  br label %99

99:                                               ; preds = %97, %40
  %100 = phi i64 [ 0, %40 ], [ %98, %97 ]
  %101 = icmp eq i64 %49, 0
  br i1 %101, label %120, label %102

102:                                              ; preds = %99
  %103 = getelementptr i8, i8* %8, i64 -4
  %104 = bitcast i8* %103 to i32*
  %105 = getelementptr i32, i32* %15, i64 -1
  %106 = getelementptr inbounds i32, i32* %104, i64 %100
  %107 = getelementptr inbounds i32, i32* %105, i64 %100
  %108 = getelementptr inbounds i32, i32* %107, i64 -3
  %109 = bitcast i32* %108 to <4 x i32>*
  %110 = load <4 x i32>, <4 x i32>* %109, align 4, !alias.scope !2
  %111 = getelementptr inbounds i32, i32* %107, i64 -4
  %112 = getelementptr inbounds i32, i32* %111, i64 -3
  %113 = bitcast i32* %112 to <4 x i32>*
  %114 = load <4 x i32>, <4 x i32>* %113, align 4, !alias.scope !2
  %115 = getelementptr inbounds i32, i32* %106, i64 -3
  %116 = bitcast i32* %115 to <4 x i32>*
  store <4 x i32> %110, <4 x i32>* %116, align 4, !alias.scope !5, !noalias !2
  %117 = getelementptr inbounds i32, i32* %106, i64 -4
  %118 = getelementptr inbounds i32, i32* %117, i64 -3
  %119 = bitcast i32* %118 to <4 x i32>*
  store <4 x i32> %114, <4 x i32>* %119, align 4, !alias.scope !5, !noalias !2
  br label %120

120:                                              ; preds = %99, %102
  %121 = icmp eq i64 %24, %41
  br i1 %121, label %174, label %122

122:                                              ; preds = %120, %26, %18
  %123 = phi i32* [ %19, %26 ], [ %19, %18 ], [ %43, %120 ]
  %124 = phi i32* [ %15, %26 ], [ %15, %18 ], [ %45, %120 ]
  %125 = getelementptr i32, i32* %124, i64 -1
  %126 = ptrtoint i32* %125 to i64
  %127 = sub i64 %126, %14
  %128 = lshr i64 %127, 2
  %129 = add nuw nsw i64 %128, 1
  %130 = and i64 %129, 7
  %131 = icmp eq i64 %130, 0
  br i1 %131, label %141, label %132

132:                                              ; preds = %122, %132
  %133 = phi i32* [ %136, %132 ], [ %123, %122 ]
  %134 = phi i32* [ %137, %132 ], [ %124, %122 ]
  %135 = phi i64 [ %139, %132 ], [ %130, %122 ]
  %136 = getelementptr inbounds i32, i32* %133, i64 -1
  %137 = getelementptr inbounds i32, i32* %134, i64 -1
  %138 = load i32, i32* %137, align 4
  store i32 %138, i32* %136, align 4
  %139 = add i64 %135, -1
  %140 = icmp eq i64 %139, 0
  br i1 %140, label %141, label %132, !llvm.loop !9

141:                                              ; preds = %132, %122
  %142 = phi i32* [ undef, %122 ], [ %136, %132 ]
  %143 = phi i32* [ %123, %122 ], [ %136, %132 ]
  %144 = phi i32* [ %124, %122 ], [ %137, %132 ]
  %145 = icmp ult i64 %127, 28
  br i1 %145, label %174, label %146

146:                                              ; preds = %141, %146
  %147 = phi i32* [ %170, %146 ], [ %143, %141 ]
  %148 = phi i32* [ %171, %146 ], [ %144, %141 ]
  %149 = getelementptr inbounds i32, i32* %147, i64 -1
  %150 = getelementptr inbounds i32, i32* %148, i64 -1
  %151 = load i32, i32* %150, align 4
  store i32 %151, i32* %149, align 4
  %152 = getelementptr inbounds i32, i32* %147, i64 -2
  %153 = getelementptr inbounds i32, i32* %148, i64 -2
  %154 = load i32, i32* %153, align 4
  store i32 %154, i32* %152, align 4
  %155 = getelementptr inbounds i32, i32* %147, i64 -3
  %156 = getelementptr inbounds i32, i32* %148, i64 -3
  %157 = load i32, i32* %156, align 4
  store i32 %157, i32* %155, align 4
  %158 = getelementptr inbounds i32, i32* %147, i64 -4
  %159 = getelementptr inbounds i32, i32* %148, i64 -4
  %160 = load i32, i32* %159, align 4
  store i32 %160, i32* %158, align 4
  %161 = getelementptr inbounds i32, i32* %147, i64 -5
  %162 = getelementptr inbounds i32, i32* %148, i64 -5
  %163 = load i32, i32* %162, align 4
  store i32 %163, i32* %161, align 4
  %164 = getelementptr inbounds i32, i32* %147, i64 -6
  %165 = getelementptr inbounds i32, i32* %148, i64 -6
  %166 = load i32, i32* %165, align 4
  store i32 %166, i32* %164, align 4
  %167 = getelementptr inbounds i32, i32* %147, i64 -7
  %168 = getelementptr inbounds i32, i32* %148, i64 -7
  %169 = load i32, i32* %168, align 4
  store i32 %169, i32* %167, align 4
  %170 = getelementptr inbounds i32, i32* %147, i64 -8
  %171 = getelementptr inbounds i32, i32* %148, i64 -8
  %172 = load i32, i32* %171, align 4
  store i32 %172, i32* %170, align 4
  %173 = icmp eq i32* %171, %13
  br i1 %173, label %174, label %146, !llvm.loop !11

174:                                              ; preds = %141, %146, %120
  %175 = phi i32* [ %43, %120 ], [ %142, %141 ], [ %170, %146 ]
  %176 = ptrtoint i32* %175 to i64
  %177 = load i64, i64* %5, align 8
  br label %178

178:                                              ; preds = %1, %174
  %179 = phi i64 [ %176, %174 ], [ %9, %1 ]
  %180 = phi i64 [ %177, %174 ], [ %14, %1 ]
  store i64 %179, i64* %5, align 8
  store i64 %9, i64* %7, align 8
  store i64 %11, i64* %4, align 8
  %181 = icmp eq i64 %180, 0
  br i1 %181, label %184, label %182

182:                                              ; preds = %178
  %183 = inttoptr i64 %180 to i8*
  tail call void @_Z7FX_FreePv(i8* nonnull %183) #4
  br label %184

184:                                              ; preds = %178, %182
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN20CFX_CSSOutputTextBufD2Ev(%class.CFX_CSSOutputTextBuf* nocapture) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %class.CFX_CSSOutputTextBuf, %class.CFX_CSSOutputTextBuf* %0, i64 0, i32 0, i32 0, i32 0
  %3 = load i32*, i32** %2, align 8
  %4 = icmp eq i32* %3, null
  br i1 %4, label %10, label %5

5:                                                ; preds = %1
  %6 = ptrtoint i32* %3 to i64
  %7 = getelementptr inbounds %class.CFX_CSSOutputTextBuf, %class.CFX_CSSOutputTextBuf* %0, i64 0, i32 0, i32 0, i32 1
  %8 = bitcast i32** %7 to i64*
  store i64 %6, i64* %8, align 8
  %9 = bitcast i32* %3 to i8*
  tail call void @_Z7FX_FreePv(i8* nonnull %9) #4
  br label %10

10:                                               ; preds = %1, %5
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN20CFX_CSSOutputTextBuf27AppendCharIfNotLeadingBlankEw(%class.CFX_CSSOutputTextBuf*, i32 signext) local_unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %class.CFX_CSSOutputTextBuf, %class.CFX_CSSOutputTextBuf* %0, i64 0, i32 0, i32 0, i32 0
  %4 = load i32*, i32** %3, align 8
  %5 = getelementptr inbounds %class.CFX_CSSOutputTextBuf, %class.CFX_CSSOutputTextBuf* %0, i64 0, i32 0, i32 0, i32 1
  %6 = load i32*, i32** %5, align 8
  %7 = icmp eq i32* %4, %6
  %8 = icmp slt i32 %1, 33
  %9 = and i1 %8, %7
  %10 = ptrtoint i32* %4 to i64
  br i1 %9, label %217, label %11

11:                                               ; preds = %2
  %12 = getelementptr inbounds %class.CFX_CSSOutputTextBuf, %class.CFX_CSSOutputTextBuf* %0, i64 0, i32 0, i32 0, i32 2, i32 0, i32 0
  %13 = load i32*, i32** %12, align 8
  %14 = icmp eq i32* %6, %13
  %15 = ptrtoint i32* %13 to i64
  br i1 %14, label %20, label %16

16:                                               ; preds = %11
  store i32 %1, i32* %6, align 4
  %17 = getelementptr inbounds i32, i32* %6, i64 1
  %18 = ptrtoint i32* %17 to i64
  %19 = bitcast i32** %5 to i64*
  store i64 %18, i64* %19, align 8
  br label %217

20:                                               ; preds = %11
  %21 = ptrtoint i32* %6 to i64
  %22 = bitcast i32** %5 to i64*
  %23 = bitcast %class.CFX_CSSOutputTextBuf* %0 to i64*
  %24 = sub i64 %21, %10
  %25 = ashr exact i64 %24, 2
  %26 = add nsw i64 %25, 1
  %27 = icmp ugt i64 %26, 4611686018427387903
  br i1 %27, label %28, label %30

28:                                               ; preds = %20
  %29 = bitcast %class.CFX_CSSOutputTextBuf* %0 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %29) #5
  unreachable

30:                                               ; preds = %20
  %31 = bitcast i32** %12 to i64*
  %32 = sub i64 %15, %10
  %33 = ashr exact i64 %32, 2
  %34 = icmp ult i64 %33, 2305843009213693951
  br i1 %34, label %35, label %40

35:                                               ; preds = %30
  %36 = ashr exact i64 %32, 1
  %37 = icmp ult i64 %36, %26
  %38 = select i1 %37, i64 %26, i64 %36
  %39 = icmp eq i64 %38, 0
  br i1 %39, label %44, label %40

40:                                               ; preds = %35, %30
  %41 = phi i64 [ %38, %35 ], [ 4611686018427387903, %30 ]
  %42 = tail call i8* @_ZN6pdfium8internal10AllocOrDieEmm(i64 %41, i64 4) #4
  %43 = bitcast i8* %42 to i32*
  br label %44

44:                                               ; preds = %40, %35
  %45 = phi i64 [ %41, %40 ], [ 0, %35 ]
  %46 = phi i32* [ %43, %40 ], [ null, %35 ]
  %47 = getelementptr inbounds i32, i32* %46, i64 %25
  %48 = getelementptr inbounds i32, i32* %46, i64 %45
  %49 = ptrtoint i32* %48 to i64
  store i32 %1, i32* %47, align 4
  %50 = getelementptr inbounds i32, i32* %47, i64 1
  %51 = ptrtoint i32* %50 to i64
  %52 = load i32*, i32** %3, align 8
  %53 = ptrtoint i32* %52 to i64
  %54 = load i32*, i32** %5, align 8
  %55 = icmp eq i32* %54, %52
  br i1 %55, label %210, label %56

56:                                               ; preds = %44
  %57 = getelementptr i32, i32* %54, i64 -1
  %58 = ptrtoint i32* %57 to i64
  %59 = sub i64 %58, %53
  %60 = lshr i64 %59, 2
  %61 = add nuw nsw i64 %60, 1
  %62 = icmp ult i64 %61, 8
  br i1 %62, label %155, label %63

63:                                               ; preds = %56
  %64 = getelementptr i32, i32* %54, i64 -1
  %65 = ptrtoint i32* %64 to i64
  %66 = sub i64 %65, %53
  %67 = lshr i64 %66, 2
  %68 = xor i64 %67, -1
  %69 = add nsw i64 %25, %68
  %70 = getelementptr i32, i32* %46, i64 %69
  %71 = xor i64 %67, -1
  %72 = getelementptr i32, i32* %54, i64 %71
  %73 = icmp ult i32* %70, %54
  %74 = icmp ult i32* %72, %47
  %75 = and i1 %73, %74
  br i1 %75, label %155, label %76

76:                                               ; preds = %63
  %77 = and i64 %61, 9223372036854775800
  %78 = sub nsw i64 0, %77
  %79 = getelementptr i32, i32* %47, i64 %78
  %80 = sub nsw i64 0, %77
  %81 = getelementptr i32, i32* %54, i64 %80
  %82 = add nsw i64 %77, -8
  %83 = lshr exact i64 %82, 3
  %84 = add nuw nsw i64 %83, 1
  %85 = and i64 %84, 1
  %86 = icmp eq i64 %82, 0
  br i1 %86, label %133, label %87

87:                                               ; preds = %76
  %88 = sub nuw nsw i64 %84, %85
  %89 = getelementptr i32, i32* %47, i64 -1
  %90 = getelementptr i32, i32* %54, i64 -1
  %91 = getelementptr i32, i32* %47, i64 -1
  %92 = getelementptr i32, i32* %54, i64 -1
  br label %93

93:                                               ; preds = %93, %87
  %94 = phi i64 [ 0, %87 ], [ %128, %93 ]
  %95 = phi i64 [ %88, %87 ], [ %129, %93 ]
  %96 = sub i64 0, %94
  %97 = sub i64 0, %94
  %98 = getelementptr inbounds i32, i32* %89, i64 %96
  %99 = getelementptr inbounds i32, i32* %90, i64 %97
  %100 = getelementptr inbounds i32, i32* %99, i64 -3
  %101 = bitcast i32* %100 to <4 x i32>*
  %102 = load <4 x i32>, <4 x i32>* %101, align 4, !alias.scope !12
  %103 = getelementptr inbounds i32, i32* %99, i64 -4
  %104 = getelementptr inbounds i32, i32* %103, i64 -3
  %105 = bitcast i32* %104 to <4 x i32>*
  %106 = load <4 x i32>, <4 x i32>* %105, align 4, !alias.scope !12
  %107 = getelementptr inbounds i32, i32* %98, i64 -3
  %108 = bitcast i32* %107 to <4 x i32>*
  store <4 x i32> %102, <4 x i32>* %108, align 4, !alias.scope !15, !noalias !12
  %109 = getelementptr inbounds i32, i32* %98, i64 -4
  %110 = getelementptr inbounds i32, i32* %109, i64 -3
  %111 = bitcast i32* %110 to <4 x i32>*
  store <4 x i32> %106, <4 x i32>* %111, align 4, !alias.scope !15, !noalias !12
  %112 = sub nuw nsw i64 -8, %94
  %113 = sub nuw nsw i64 -8, %94
  %114 = getelementptr inbounds i32, i32* %91, i64 %112
  %115 = getelementptr inbounds i32, i32* %92, i64 %113
  %116 = getelementptr inbounds i32, i32* %115, i64 -3
  %117 = bitcast i32* %116 to <4 x i32>*
  %118 = load <4 x i32>, <4 x i32>* %117, align 4, !alias.scope !12
  %119 = getelementptr inbounds i32, i32* %115, i64 -4
  %120 = getelementptr inbounds i32, i32* %119, i64 -3
  %121 = bitcast i32* %120 to <4 x i32>*
  %122 = load <4 x i32>, <4 x i32>* %121, align 4, !alias.scope !12
  %123 = getelementptr inbounds i32, i32* %114, i64 -3
  %124 = bitcast i32* %123 to <4 x i32>*
  store <4 x i32> %118, <4 x i32>* %124, align 4, !alias.scope !15, !noalias !12
  %125 = getelementptr inbounds i32, i32* %114, i64 -4
  %126 = getelementptr inbounds i32, i32* %125, i64 -3
  %127 = bitcast i32* %126 to <4 x i32>*
  store <4 x i32> %122, <4 x i32>* %127, align 4, !alias.scope !15, !noalias !12
  %128 = add i64 %94, 16
  %129 = add i64 %95, -2
  %130 = icmp eq i64 %129, 0
  br i1 %130, label %131, label %93, !llvm.loop !17

131:                                              ; preds = %93
  %132 = sub nuw nsw i64 -16, %94
  br label %133

133:                                              ; preds = %131, %76
  %134 = phi i64 [ 0, %76 ], [ %132, %131 ]
  %135 = icmp eq i64 %85, 0
  br i1 %135, label %153, label %136

136:                                              ; preds = %133
  %137 = getelementptr i32, i32* %47, i64 -1
  %138 = getelementptr i32, i32* %54, i64 -1
  %139 = getelementptr inbounds i32, i32* %137, i64 %134
  %140 = getelementptr inbounds i32, i32* %138, i64 %134
  %141 = getelementptr inbounds i32, i32* %140, i64 -3
  %142 = bitcast i32* %141 to <4 x i32>*
  %143 = load <4 x i32>, <4 x i32>* %142, align 4, !alias.scope !12
  %144 = getelementptr inbounds i32, i32* %140, i64 -4
  %145 = getelementptr inbounds i32, i32* %144, i64 -3
  %146 = bitcast i32* %145 to <4 x i32>*
  %147 = load <4 x i32>, <4 x i32>* %146, align 4, !alias.scope !12
  %148 = getelementptr inbounds i32, i32* %139, i64 -3
  %149 = bitcast i32* %148 to <4 x i32>*
  store <4 x i32> %143, <4 x i32>* %149, align 4, !alias.scope !15, !noalias !12
  %150 = getelementptr inbounds i32, i32* %139, i64 -4
  %151 = getelementptr inbounds i32, i32* %150, i64 -3
  %152 = bitcast i32* %151 to <4 x i32>*
  store <4 x i32> %147, <4 x i32>* %152, align 4, !alias.scope !15, !noalias !12
  br label %153

153:                                              ; preds = %133, %136
  %154 = icmp eq i64 %61, %77
  br i1 %154, label %207, label %155

155:                                              ; preds = %153, %63, %56
  %156 = phi i32* [ %47, %63 ], [ %47, %56 ], [ %79, %153 ]
  %157 = phi i32* [ %54, %63 ], [ %54, %56 ], [ %81, %153 ]
  %158 = getelementptr i32, i32* %157, i64 -1
  %159 = ptrtoint i32* %158 to i64
  %160 = sub i64 %159, %53
  %161 = lshr i64 %160, 2
  %162 = add nuw nsw i64 %161, 1
  %163 = and i64 %162, 7
  %164 = icmp eq i64 %163, 0
  br i1 %164, label %174, label %165

165:                                              ; preds = %155, %165
  %166 = phi i32* [ %169, %165 ], [ %156, %155 ]
  %167 = phi i32* [ %170, %165 ], [ %157, %155 ]
  %168 = phi i64 [ %172, %165 ], [ %163, %155 ]
  %169 = getelementptr inbounds i32, i32* %166, i64 -1
  %170 = getelementptr inbounds i32, i32* %167, i64 -1
  %171 = load i32, i32* %170, align 4
  store i32 %171, i32* %169, align 4
  %172 = add i64 %168, -1
  %173 = icmp eq i64 %172, 0
  br i1 %173, label %174, label %165, !llvm.loop !18

174:                                              ; preds = %165, %155
  %175 = phi i32* [ undef, %155 ], [ %169, %165 ]
  %176 = phi i32* [ %156, %155 ], [ %169, %165 ]
  %177 = phi i32* [ %157, %155 ], [ %170, %165 ]
  %178 = icmp ult i64 %160, 28
  br i1 %178, label %207, label %179

179:                                              ; preds = %174, %179
  %180 = phi i32* [ %203, %179 ], [ %176, %174 ]
  %181 = phi i32* [ %204, %179 ], [ %177, %174 ]
  %182 = getelementptr inbounds i32, i32* %180, i64 -1
  %183 = getelementptr inbounds i32, i32* %181, i64 -1
  %184 = load i32, i32* %183, align 4
  store i32 %184, i32* %182, align 4
  %185 = getelementptr inbounds i32, i32* %180, i64 -2
  %186 = getelementptr inbounds i32, i32* %181, i64 -2
  %187 = load i32, i32* %186, align 4
  store i32 %187, i32* %185, align 4
  %188 = getelementptr inbounds i32, i32* %180, i64 -3
  %189 = getelementptr inbounds i32, i32* %181, i64 -3
  %190 = load i32, i32* %189, align 4
  store i32 %190, i32* %188, align 4
  %191 = getelementptr inbounds i32, i32* %180, i64 -4
  %192 = getelementptr inbounds i32, i32* %181, i64 -4
  %193 = load i32, i32* %192, align 4
  store i32 %193, i32* %191, align 4
  %194 = getelementptr inbounds i32, i32* %180, i64 -5
  %195 = getelementptr inbounds i32, i32* %181, i64 -5
  %196 = load i32, i32* %195, align 4
  store i32 %196, i32* %194, align 4
  %197 = getelementptr inbounds i32, i32* %180, i64 -6
  %198 = getelementptr inbounds i32, i32* %181, i64 -6
  %199 = load i32, i32* %198, align 4
  store i32 %199, i32* %197, align 4
  %200 = getelementptr inbounds i32, i32* %180, i64 -7
  %201 = getelementptr inbounds i32, i32* %181, i64 -7
  %202 = load i32, i32* %201, align 4
  store i32 %202, i32* %200, align 4
  %203 = getelementptr inbounds i32, i32* %180, i64 -8
  %204 = getelementptr inbounds i32, i32* %181, i64 -8
  %205 = load i32, i32* %204, align 4
  store i32 %205, i32* %203, align 4
  %206 = icmp eq i32* %204, %52
  br i1 %206, label %207, label %179, !llvm.loop !19

207:                                              ; preds = %174, %179, %153
  %208 = phi i32* [ %79, %153 ], [ %175, %174 ], [ %203, %179 ]
  %209 = load i64, i64* %23, align 8
  br label %210

210:                                              ; preds = %44, %207
  %211 = phi i32* [ %208, %207 ], [ %47, %44 ]
  %212 = phi i64 [ %209, %207 ], [ %53, %44 ]
  %213 = ptrtoint i32* %211 to i64
  store i64 %213, i64* %23, align 8
  store i64 %51, i64* %22, align 8
  store i64 %49, i64* %31, align 8
  %214 = icmp eq i64 %212, 0
  br i1 %214, label %217, label %215

215:                                              ; preds = %210
  %216 = inttoptr i64 %212 to i8*
  tail call void @_Z7FX_FreePv(i8* nonnull %216) #4
  br label %217

217:                                              ; preds = %215, %210, %16, %2
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZNK20CFX_CSSOutputTextBuf29GetTrailingBlankTrimmedStringEv(%"class.fxcrt::StringViewTemplate"* noalias nocapture sret, %class.CFX_CSSOutputTextBuf* nocapture readonly) local_unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"class.fxcrt::StringViewTemplate", %"class.fxcrt::StringViewTemplate"* %0, i64 0, i32 0, i32 0, i32 0
  %4 = getelementptr inbounds %"class.fxcrt::StringViewTemplate", %"class.fxcrt::StringViewTemplate"* %0, i64 0, i32 0, i32 1
  %5 = bitcast %class.CFX_CSSOutputTextBuf* %1 to i64*
  %6 = load i64, i64* %5, align 8
  %7 = getelementptr inbounds %class.CFX_CSSOutputTextBuf, %class.CFX_CSSOutputTextBuf* %1, i64 0, i32 0, i32 0, i32 1
  %8 = bitcast i32** %7 to i64*
  %9 = load i64, i64* %8, align 8
  %10 = sub i64 %9, %6
  %11 = ashr exact i64 %10, 2
  %12 = bitcast %"class.fxcrt::StringViewTemplate"* %0 to i64*
  store i64 %6, i64* %12, align 8
  store i64 %11, i64* %4, align 8
  %13 = icmp eq i64 %10, 0
  br i1 %13, label %35, label %14

14:                                               ; preds = %2
  %15 = inttoptr i64 %6 to i32*
  br label %16

16:                                               ; preds = %14, %33
  %17 = phi i32* [ %28, %33 ], [ %15, %14 ]
  %18 = phi i64 [ %30, %33 ], [ %11, %14 ]
  %19 = add i64 %18, -1
  %20 = getelementptr inbounds i32, i32* %17, i64 %19
  %21 = load i32, i32* %20, align 4
  %22 = icmp ult i32 %21, 33
  br i1 %22, label %23, label %35

23:                                               ; preds = %16
  %24 = icmp eq i64 %19, 0
  %25 = icmp eq i64 %18, 0
  %26 = or i1 %25, %24
  %27 = icmp eq i32* %17, null
  %28 = select i1 %26, i32* null, i32* %17
  %29 = or i1 %26, %27
  %30 = select i1 %29, i64 0, i64 %19
  %31 = icmp eq i32* %17, %28
  br i1 %31, label %33, label %32

32:                                               ; preds = %23
  store i32* %28, i32** %3, align 8
  br label %33

33:                                               ; preds = %23, %32
  store i64 %30, i64* %4, align 8
  %34 = icmp eq i64 %30, 0
  br i1 %34, label %35, label %16

35:                                               ; preds = %33, %16, %2
  ret void
}

declare void @_Z7FX_FreePv(i8*) local_unnamed_addr #1

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #2

declare i8* @_ZN6pdfium8internal10AllocOrDieEmm(i64, i64) local_unnamed_addr #1

; Function Attrs: noreturn
declare void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"*) local_unnamed_addr #3

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind }
attributes #3 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind }
attributes #5 = { noreturn nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{!3}
!3 = distinct !{!3, !4}
!4 = distinct !{!4, !"LVerDomain"}
!5 = !{!6}
!6 = distinct !{!6, !4}
!7 = distinct !{!7, !8}
!8 = !{!"llvm.loop.isvectorized", i32 1}
!9 = distinct !{!9, !10}
!10 = !{!"llvm.loop.unroll.disable"}
!11 = distinct !{!11, !8}
!12 = !{!13}
!13 = distinct !{!13, !14}
!14 = distinct !{!14, !"LVerDomain"}
!15 = !{!16}
!16 = distinct !{!16, !14}
!17 = distinct !{!17, !8}
!18 = distinct !{!18, !10}
!19 = distinct !{!19, !8}
