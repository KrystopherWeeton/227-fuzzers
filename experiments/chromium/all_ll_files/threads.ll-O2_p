; ModuleID = '../../third_party/libxml/src/threads.c'
source_filename = "../../third_party/libxml/src/threads.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct._xmlMutex = type { i32 }
%struct._xmlRMutex = type { i32 }
%struct._xmlGlobalState = type { i8*, %struct._xmlSAXLocator, %struct._xmlSAXHandlerV1, %struct._xmlSAXHandlerV1, %struct._xmlSAXHandlerV1, void (i8*)*, i8* (i64)*, i8* (i8*)*, i8* (i8*, i64)*, void (i8*, i8*, ...)*, void (i8*, %struct._xmlError*)*, i8*, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i8*, void (%struct._xmlNode*)*, void (%struct._xmlNode*)*, i8* (i64)*, %struct._xmlError, %struct._xmlParserInputBuffer* (i8*, i32)*, %struct._xmlOutputBuffer* (i8*, %struct._xmlCharEncodingHandler*, i32)*, i8* }
%struct._xmlSAXLocator = type { i8* (i8*)*, i8* (i8*)*, i32 (i8*)*, i32 (i8*)* }
%struct._xmlSAXHandlerV1 = type { void (i8*, i8*, i8*, i8*)*, i32 (i8*)*, i32 (i8*)*, i32 (i8*)*, %struct._xmlParserInput* (i8*, i8*, i8*)*, %struct._xmlEntity* (i8*, i8*)*, void (i8*, i8*, i32, i8*, i8*, i8*)*, void (i8*, i8*, i8*, i8*)*, void (i8*, i8*, i8*, i32, i32, i8*, %struct._xmlEnumeration*)*, void (i8*, i8*, i32, %struct._xmlElementContent*)*, void (i8*, i8*, i8*, i8*, i8*)*, void (i8*, %struct._xmlSAXLocator*)*, void (i8*)*, void (i8*)*, void (i8*, i8*, i8**)*, void (i8*, i8*)*, void (i8*, i8*)*, void (i8*, i8*, i32)*, void (i8*, i8*, i32)*, void (i8*, i8*, i8*)*, void (i8*, i8*)*, void (i8*, i8*, ...)*, void (i8*, i8*, ...)*, void (i8*, i8*, ...)*, %struct._xmlEntity* (i8*, i8*)*, void (i8*, i8*, i32)*, void (i8*, i8*, i8*, i8*)*, i32 }
%struct._xmlParserInput = type { %struct._xmlParserInputBuffer*, i8*, i8*, i8*, i8*, i8*, i32, i32, i32, i64, void (i8*)*, i8*, i8*, i32, i32 }
%struct._xmlParserInputBuffer = type { i8*, i32 (i8*, i8*, i32)*, i32 (i8*)*, %struct._xmlCharEncodingHandler*, %struct._xmlBuf*, %struct._xmlBuf*, i32, i32, i64 }
%struct._xmlCharEncodingHandler = type { i8*, i32 (i8*, i32*, i8*, i32*)*, i32 (i8*, i32*, i8*, i32*)*, %struct._uconv_t*, %struct._uconv_t* }
%struct._uconv_t = type { %struct.UConverter*, %struct.UConverter*, [1024 x i16], i16*, i16* }
%struct.UConverter = type opaque
%struct._xmlBuf = type opaque
%struct._xmlEnumeration = type { %struct._xmlEnumeration*, i8* }
%struct._xmlElementContent = type { i32, i32, i8*, %struct._xmlElementContent*, %struct._xmlElementContent*, %struct._xmlElementContent*, i8* }
%struct._xmlEntity = type { i8*, i32, i8*, %struct._xmlNode*, %struct._xmlNode*, %struct._xmlDtd*, %struct._xmlNode*, %struct._xmlNode*, %struct._xmlDoc*, i8*, i8*, i32, i32, i8*, i8*, %struct._xmlEntity*, i8*, i32, i32, i32 }
%struct._xmlDtd = type { i8*, i32, i8*, %struct._xmlNode*, %struct._xmlNode*, %struct._xmlDoc*, %struct._xmlNode*, %struct._xmlNode*, %struct._xmlDoc*, i8*, i8*, i8*, i8*, i8*, i8*, i8* }
%struct._xmlNode = type { i8*, i32, i8*, %struct._xmlNode*, %struct._xmlNode*, %struct._xmlNode*, %struct._xmlNode*, %struct._xmlNode*, %struct._xmlDoc*, %struct._xmlNs*, i8*, %struct._xmlAttr*, %struct._xmlNs*, i8*, i16, i16 }
%struct._xmlAttr = type { i8*, i32, i8*, %struct._xmlNode*, %struct._xmlNode*, %struct._xmlNode*, %struct._xmlAttr*, %struct._xmlAttr*, %struct._xmlDoc*, %struct._xmlNs*, i32, i8* }
%struct._xmlNs = type { %struct._xmlNs*, i32, i8*, i8*, i8*, %struct._xmlDoc* }
%struct._xmlDoc = type { i8*, i32, i8*, %struct._xmlNode*, %struct._xmlNode*, %struct._xmlNode*, %struct._xmlNode*, %struct._xmlNode*, %struct._xmlDoc*, i32, i32, %struct._xmlDtd*, %struct._xmlDtd*, %struct._xmlNs*, i8*, i8*, i8*, i8*, i8*, i32, %struct._xmlDict*, i8*, i32, i32 }
%struct._xmlDict = type opaque
%struct._xmlError = type { i32, i32, i8*, i32, i8*, i32, i8*, i8*, i8*, i32, i32, i8*, i8* }
%struct._xmlOutputBuffer = type { i8*, i32 (i8*, i8*, i32)*, i32 (i8*)*, %struct._xmlCharEncodingHandler*, %struct._xmlBuf*, %struct._xmlBuf*, i32, i32 }

; Function Attrs: nofree nounwind ssp uwtable
define hidden noalias %struct._xmlMutex* @xmlNewMutex() local_unnamed_addr #0 {
  %1 = tail call noalias i8* @malloc(i64 4) #5
  %2 = bitcast i8* %1 to %struct._xmlMutex*
  ret %struct._xmlMutex* %2
}

; Function Attrs: nofree nounwind
declare noalias i8* @malloc(i64) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define hidden void @xmlFreeMutex(%struct._xmlMutex*) local_unnamed_addr #2 {
  %2 = icmp eq %struct._xmlMutex* %0, null
  br i1 %2, label %5, label %3

3:                                                ; preds = %1
  %4 = bitcast %struct._xmlMutex* %0 to i8*
  tail call void @free(i8* %4) #5
  br label %5

5:                                                ; preds = %1, %3
  ret void
}

; Function Attrs: nounwind
declare void @free(i8* nocapture) local_unnamed_addr #3

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden void @xmlMutexLock(%struct._xmlMutex* nocapture) local_unnamed_addr #4 {
  ret void
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden void @xmlMutexUnlock(%struct._xmlMutex* nocapture) local_unnamed_addr #4 {
  ret void
}

; Function Attrs: nofree nounwind ssp uwtable
define hidden noalias %struct._xmlRMutex* @xmlNewRMutex() local_unnamed_addr #0 {
  %1 = tail call noalias i8* @malloc(i64 4) #5
  %2 = bitcast i8* %1 to %struct._xmlRMutex*
  ret %struct._xmlRMutex* %2
}

; Function Attrs: nounwind ssp uwtable
define hidden void @xmlFreeRMutex(%struct._xmlRMutex*) local_unnamed_addr #2 {
  %2 = icmp eq %struct._xmlRMutex* %0, null
  br i1 %2, label %5, label %3

3:                                                ; preds = %1
  %4 = bitcast %struct._xmlRMutex* %0 to i8*
  tail call void @free(i8* %4) #5
  br label %5

5:                                                ; preds = %1, %3
  ret void
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden void @xmlRMutexLock(%struct._xmlRMutex* nocapture) local_unnamed_addr #4 {
  ret void
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden void @xmlRMutexUnlock(%struct._xmlRMutex* nocapture) local_unnamed_addr #4 {
  ret void
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden void @__xmlGlobalInitMutexLock() local_unnamed_addr #4 {
  ret void
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden void @__xmlGlobalInitMutexUnlock() local_unnamed_addr #4 {
  ret void
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden void @__xmlGlobalInitMutexDestroy() local_unnamed_addr #4 {
  ret void
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden noalias %struct._xmlGlobalState* @xmlGetGlobalState() local_unnamed_addr #4 {
  ret %struct._xmlGlobalState* null
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden i32 @xmlGetThreadId() local_unnamed_addr #4 {
  ret i32 0
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden i32 @xmlIsMainThread() local_unnamed_addr #4 {
  ret i32 1
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden void @xmlLockLibrary() local_unnamed_addr #4 {
  ret void
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden void @xmlUnlockLibrary() local_unnamed_addr #4 {
  ret void
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden void @xmlInitThreads() local_unnamed_addr #4 {
  ret void
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden void @xmlCleanupThreads() local_unnamed_addr #4 {
  ret void
}

attributes #0 = { nofree nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { norecurse nounwind readnone ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
