; ModuleID = '../../third_party/blink/renderer/platform/peerconnection/rtc_rtp_sender_platform.cc'
source_filename = "../../third_party/blink/renderer/platform/peerconnection/rtc_rtp_sender_platform.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"class.blink::RTCRtpSenderPlatform" = type { i32 (...)** }
%"class.blink::RTCEncodedAudioStreamTransformer" = type opaque
%"class.blink::RTCEncodedVideoStreamTransformer" = type opaque

$_ZNK5blink20RTCRtpSenderPlatform32GetEncodedAudioStreamTransformerEv = comdat any

$_ZNK5blink20RTCRtpSenderPlatform32GetEncodedVideoStreamTransformerEv = comdat any

@_ZTVN5blink20RTCRtpSenderPlatformE = hidden unnamed_addr constant { [18 x i8*] } { [18 x i8*] [i8* null, i8* null, i8* bitcast (void (%"class.blink::RTCRtpSenderPlatform"*)* @_ZN5blink20RTCRtpSenderPlatformD2Ev to i8*), i8* bitcast (void (%"class.blink::RTCRtpSenderPlatform"*)* @_ZN5blink20RTCRtpSenderPlatformD0Ev to i8*), i8* bitcast (void ()* @__cxa_pure_virtual to i8*), i8* bitcast (void ()* @__cxa_pure_virtual to i8*), i8* bitcast (void ()* @__cxa_pure_virtual to i8*), i8* bitcast (void ()* @__cxa_pure_virtual to i8*), i8* bitcast (void ()* @__cxa_pure_virtual to i8*), i8* bitcast (void ()* @__cxa_pure_virtual to i8*), i8* bitcast (void ()* @__cxa_pure_virtual to i8*), i8* bitcast (void ()* @__cxa_pure_virtual to i8*), i8* bitcast (void ()* @__cxa_pure_virtual to i8*), i8* bitcast (void ()* @__cxa_pure_virtual to i8*), i8* bitcast (void ()* @__cxa_pure_virtual to i8*), i8* bitcast (void ()* @__cxa_pure_virtual to i8*), i8* bitcast (%"class.blink::RTCEncodedAudioStreamTransformer"* (%"class.blink::RTCRtpSenderPlatform"*)* @_ZNK5blink20RTCRtpSenderPlatform32GetEncodedAudioStreamTransformerEv to i8*), i8* bitcast (%"class.blink::RTCEncodedVideoStreamTransformer"* (%"class.blink::RTCRtpSenderPlatform"*)* @_ZNK5blink20RTCRtpSenderPlatform32GetEncodedVideoStreamTransformerEv to i8*)] }, align 8

@_ZN5blink20RTCRtpSenderPlatformD1Ev = hidden unnamed_addr alias void (%"class.blink::RTCRtpSenderPlatform"*), void (%"class.blink::RTCRtpSenderPlatform"*)* @_ZN5blink20RTCRtpSenderPlatformD2Ev

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden void @_ZN5blink20RTCRtpSenderPlatformD2Ev(%"class.blink::RTCRtpSenderPlatform"* nocapture) unnamed_addr #0 align 2 {
  ret void
}

; Function Attrs: noreturn nounwind ssp uwtable
define hidden void @_ZN5blink20RTCRtpSenderPlatformD0Ev(%"class.blink::RTCRtpSenderPlatform"* nocapture readnone) unnamed_addr #1 align 2 {
  tail call void @llvm.trap() #4
  unreachable
}

; Function Attrs: cold noreturn nounwind
declare void @llvm.trap() #2

declare void @__cxa_pure_virtual() unnamed_addr

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden %"class.blink::RTCEncodedAudioStreamTransformer"* @_ZNK5blink20RTCRtpSenderPlatform32GetEncodedAudioStreamTransformerEv(%"class.blink::RTCRtpSenderPlatform"*) unnamed_addr #3 comdat align 2 {
  ret %"class.blink::RTCEncodedAudioStreamTransformer"* null
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden %"class.blink::RTCEncodedVideoStreamTransformer"* @_ZNK5blink20RTCRtpSenderPlatform32GetEncodedVideoStreamTransformerEv(%"class.blink::RTCRtpSenderPlatform"*) unnamed_addr #3 comdat align 2 {
  ret %"class.blink::RTCEncodedVideoStreamTransformer"* null
}

attributes #0 = { norecurse nounwind readnone ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { noreturn nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { cold noreturn nounwind }
attributes #3 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { noreturn nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
