; ModuleID = '../../third_party/abseil-cpp/absl/base/internal/spinlock.cc'
source_filename = "../../third_party/abseil-cpp/absl/base/internal/spinlock.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%"struct.absl::base_internal::SpinLockWaitTransition" = type { i32, i32, i8 }
%"class.absl::base_internal::SpinLock" = type { %"struct.std::__1::atomic.0" }
%"struct.std::__1::atomic.0" = type { %"struct.std::__1::__atomic_base.1" }
%"struct.std::__1::__atomic_base.1" = type { %"struct.std::__1::__atomic_base.2" }
%"struct.std::__1::__atomic_base.2" = type { %"struct.std::__1::__cxx_atomic_impl.3" }
%"struct.std::__1::__cxx_atomic_impl.3" = type { %"struct.std::__1::__cxx_atomic_base_impl.4" }
%"struct.std::__1::__cxx_atomic_base_impl.4" = type { i32 }

$_ZN4absl13base_internal10AtomicHookIPFvPKvlEE13DummyFunctionES3_l = comdat any

@_ZN4absl13base_internal8SpinLock13kSpinLockHeldE = hidden local_unnamed_addr constant i32 1, align 4
@_ZN4absl13base_internal8SpinLock20kSpinLockCooperativeE = hidden local_unnamed_addr constant i32 2, align 4
@_ZN4absl13base_internal8SpinLock27kSpinLockDisabledSchedulingE = hidden local_unnamed_addr constant i32 4, align 4
@_ZN4absl13base_internal8SpinLock16kSpinLockSleeperE = hidden local_unnamed_addr constant i32 8, align 4
@_ZN4absl13base_internal8SpinLock13kWaitTimeMaskE = hidden local_unnamed_addr constant i32 -8, align 4
@_ZZN4absl13base_internal8SpinLock8SpinLoopEvE24init_adaptive_spin_count = internal global { { { i32 } } } zeroinitializer, align 4
@_ZZN4absl13base_internal8SpinLock8SpinLoopEvE19adaptive_spin_count = internal unnamed_addr global i32 0, align 4
@_ZN4absl13base_internalL19submit_profile_dataE = internal global { { { void (i8*, i64)* } }, void (i8*, i64)* } { { { void (i8*, i64)* } } { { void (i8*, i64)* } { void (i8*, i64)* @_ZN4absl13base_internal10AtomicHookIPFvPKvlEE13DummyFunctionES3_l } }, void (i8*, i64)* @_ZN4absl13base_internal10AtomicHookIPFvPKvlEE13DummyFunctionES3_l }, align 8
@"_ZZN4absl13base_internal12CallOnceImplIZNS0_8SpinLock8SpinLoopEvE3$_0JEEEvPNSt3__16atomicIjEENS0_14SchedulingModeEOT_DpOT0_E5trans" = internal constant [3 x %"struct.absl::base_internal::SpinLockWaitTransition"] [%"struct.absl::base_internal::SpinLockWaitTransition" { i32 0, i32 1707250555, i8 1 }, %"struct.absl::base_internal::SpinLockWaitTransition" { i32 1707250555, i32 94570706, i8 0 }, %"struct.absl::base_internal::SpinLockWaitTransition" { i32 221, i32 221, i8 1 }], align 16

@_ZN4absl13base_internal8SpinLockC1ENS0_14SchedulingModeE = hidden unnamed_addr alias void (%"class.absl::base_internal::SpinLock"*, i32), void (%"class.absl::base_internal::SpinLock"*, i32)* @_ZN4absl13base_internal8SpinLockC2ENS0_14SchedulingModeE

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @_ZN4absl13base_internal24RegisterSpinLockProfilerEPFvPKvlE(void (i8*, i64)*) local_unnamed_addr #0 {
  %2 = load i64, i64* bitcast (void (i8*, i64)** getelementptr inbounds ({ { { void (i8*, i64)* } }, void (i8*, i64)* }, { { { void (i8*, i64)* } }, void (i8*, i64)* }* @_ZN4absl13base_internalL19submit_profile_dataE, i64 0, i32 1) to i64*), align 8
  %3 = ptrtoint void (i8*, i64)* %0 to i64
  %4 = cmpxchg i64* bitcast ({ { { void (i8*, i64)* } }, void (i8*, i64)* }* @_ZN4absl13base_internalL19submit_profile_dataE to i64*), i64 %2, i64 %3 acq_rel acquire
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable writeonly
define hidden void @_ZN4absl13base_internal8SpinLockC2ENS0_14SchedulingModeE(%"class.absl::base_internal::SpinLock"* nocapture, i32) unnamed_addr #1 align 2 {
  %3 = icmp eq i32 %1, 1
  %4 = select i1 %3, i32 2, i32 0
  %5 = getelementptr inbounds %"class.absl::base_internal::SpinLock", %"class.absl::base_internal::SpinLock"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  store i32 %4, i32* %5, align 4
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @_ZN4absl13base_internal8SpinLock8SpinLoopEv(%"class.absl::base_internal::SpinLock"* nocapture readonly) local_unnamed_addr #2 align 2 {
  %2 = load atomic i32, i32* getelementptr inbounds ({ { { i32 } } }, { { { i32 } } }* @_ZZN4absl13base_internal8SpinLock8SpinLoopEvE24init_adaptive_spin_count, i64 0, i32 0, i32 0, i32 0) acquire, align 4
  %3 = icmp eq i32 %2, 221
  br i1 %3, label %5, label %4, !prof !2

4:                                                ; preds = %1
  tail call fastcc void @"_ZN4absl13base_internal12CallOnceImplIZNS0_8SpinLock8SpinLoopEvE3$_0JEEEvPNSt3__16atomicIjEENS0_14SchedulingModeEOT_DpOT0_"(%"struct.std::__1::atomic.0"* bitcast ({ { { i32 } } }* @_ZZN4absl13base_internal8SpinLock8SpinLoopEvE24init_adaptive_spin_count to %"struct.std::__1::atomic.0"*)) #8
  br label %5

5:                                                ; preds = %1, %4
  %6 = load i32, i32* @_ZZN4absl13base_internal8SpinLock8SpinLoopEvE19adaptive_spin_count, align 4
  %7 = getelementptr inbounds %"class.absl::base_internal::SpinLock", %"class.absl::base_internal::SpinLock"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  br label %8

8:                                                ; preds = %13, %5
  %9 = phi i32 [ %6, %5 ], [ %14, %13 ]
  %10 = load atomic i32, i32* %7 monotonic, align 4
  %11 = and i32 %10, 1
  %12 = icmp eq i32 %11, 0
  br i1 %12, label %16, label %13

13:                                               ; preds = %8
  %14 = add nsw i32 %9, -1
  %15 = icmp sgt i32 %14, 0
  br i1 %15, label %8, label %16

16:                                               ; preds = %8, %13
  ret i32 %10
}

; Function Attrs: cold nounwind optsize ssp uwtable
define hidden void @_ZN4absl13base_internal8SpinLock8SlowLockEv(%"class.absl::base_internal::SpinLock"*) local_unnamed_addr #3 align 2 {
  %2 = tail call i32 @_ZN4absl13base_internal8SpinLock8SpinLoopEv(%"class.absl::base_internal::SpinLock"* %0)
  %3 = and i32 %2, 1
  %4 = icmp eq i32 %3, 0
  br i1 %4, label %5, label %12

5:                                                ; preds = %1
  %6 = or i32 %2, 1
  %7 = getelementptr inbounds %"class.absl::base_internal::SpinLock", %"class.absl::base_internal::SpinLock"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %8 = cmpxchg i32* %7, i32 %2, i32 %6 acquire monotonic
  %9 = extractvalue { i32, i1 } %8, 0
  %10 = and i32 %9, 1
  %11 = icmp eq i32 %10, 0
  br i1 %11, label %72, label %12

12:                                               ; preds = %1, %5
  %13 = phi i32 [ %9, %5 ], [ %2, %1 ]
  %14 = lshr i32 %13, 1
  %15 = and i32 %14, 1
  %16 = tail call i64 @_ZN4absl13base_internal10CycleClock3NowEv() #8
  %17 = getelementptr inbounds %"class.absl::base_internal::SpinLock", %"class.absl::base_internal::SpinLock"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %18 = getelementptr inbounds %"class.absl::base_internal::SpinLock", %"class.absl::base_internal::SpinLock"* %0, i64 0, i32 0
  br label %19

19:                                               ; preds = %12, %68
  %20 = phi i32 [ 0, %12 ], [ %47, %68 ]
  %21 = phi i32 [ 0, %12 ], [ %60, %68 ]
  %22 = phi i32 [ %13, %12 ], [ %69, %68 ]
  br label %23

23:                                               ; preds = %19, %39
  %24 = phi i32 [ %22, %19 ], [ %40, %39 ]
  %25 = icmp ult i32 %24, 8
  br i1 %25, label %26, label %45

26:                                               ; preds = %23
  %27 = or i32 %24, 8
  %28 = cmpxchg i32* %17, i32 %24, i32 %27 monotonic monotonic
  %29 = extractvalue { i32, i1 } %28, 1
  br i1 %29, label %45, label %30

30:                                               ; preds = %26
  %31 = extractvalue { i32, i1 } %28, 0
  %32 = and i32 %31, 1
  %33 = icmp eq i32 %32, 0
  br i1 %33, label %34, label %43

34:                                               ; preds = %30
  %35 = or i32 %21, %31
  %36 = or i32 %35, 1
  %37 = cmpxchg i32* %17, i32 %31, i32 %36 acquire monotonic
  %38 = extractvalue { i32, i1 } %37, 0
  br label %39

39:                                               ; preds = %34, %43
  %40 = phi i32 [ %38, %34 ], [ %31, %43 ]
  %41 = and i32 %40, 1
  %42 = icmp eq i32 %41, 0
  br i1 %42, label %72, label %23

43:                                               ; preds = %30
  %44 = icmp ult i32 %31, 8
  br i1 %44, label %39, label %45

45:                                               ; preds = %43, %23, %26
  %46 = phi i32 [ %27, %26 ], [ %31, %43 ], [ %24, %23 ]
  %47 = add nuw nsw i32 %20, 1
  tail call void @AbslInternalSpinLockDelay(%"struct.std::__1::atomic.0"* %18, i32 %46, i32 %47, i32 %15) #8
  %48 = tail call i32 @_ZN4absl13base_internal8SpinLock8SpinLoopEv(%"class.absl::base_internal::SpinLock"* %0)
  %49 = tail call i64 @_ZN4absl13base_internal10CycleClock3NowEv() #8
  %50 = sub nsw i64 %49, %16
  %51 = ashr i64 %50, 7
  %52 = icmp slt i64 %51, 536870911
  %53 = select i1 %52, i64 %51, i64 536870911
  %54 = trunc i64 %53 to i32
  %55 = shl i32 %54, 3
  switch i32 %55, label %56 [
    i32 0, label %59
    i32 8, label %57
  ]

56:                                               ; preds = %45
  br label %57

57:                                               ; preds = %56, %45
  %58 = phi i32 [ %55, %56 ], [ 16, %45 ]
  br label %59

59:                                               ; preds = %45, %57
  %60 = phi i32 [ %58, %57 ], [ 8, %45 ]
  %61 = and i32 %48, 1
  %62 = icmp eq i32 %61, 0
  br i1 %62, label %63, label %68

63:                                               ; preds = %59
  %64 = or i32 %48, %60
  %65 = or i32 %64, 1
  %66 = cmpxchg i32* %17, i32 %48, i32 %65 acquire monotonic
  %67 = extractvalue { i32, i1 } %66, 0
  br label %68

68:                                               ; preds = %59, %63
  %69 = phi i32 [ %67, %63 ], [ %48, %59 ]
  %70 = and i32 %69, 1
  %71 = icmp eq i32 %70, 0
  br i1 %71, label %72, label %19

72:                                               ; preds = %68, %39, %5
  ret void
}

declare i64 @_ZN4absl13base_internal10CycleClock3NowEv() local_unnamed_addr #4

; Function Attrs: nounwind readnone ssp uwtable
define hidden i32 @_ZN4absl13base_internal8SpinLock16EncodeWaitCyclesEll(i64, i64) local_unnamed_addr #5 align 2 {
  %3 = sub nsw i64 %1, %0
  %4 = ashr i64 %3, 7
  %5 = icmp slt i64 %4, 536870911
  %6 = select i1 %5, i64 %4, i64 536870911
  %7 = trunc i64 %6 to i32
  %8 = shl i32 %7, 3
  switch i32 %8, label %9 [
    i32 0, label %12
    i32 8, label %10
  ]

9:                                                ; preds = %2
  br label %10

10:                                               ; preds = %2, %9
  %11 = phi i32 [ %8, %9 ], [ 16, %2 ]
  br label %12

12:                                               ; preds = %2, %10
  %13 = phi i32 [ %11, %10 ], [ 8, %2 ]
  ret i32 %13
}

; Function Attrs: cold nounwind optsize ssp uwtable
define hidden void @_ZN4absl13base_internal8SpinLock10SlowUnlockEj(%"class.absl::base_internal::SpinLock"*, i32) local_unnamed_addr #3 align 2 {
  %3 = getelementptr inbounds %"class.absl::base_internal::SpinLock", %"class.absl::base_internal::SpinLock"* %0, i64 0, i32 0
  tail call void @AbslInternalSpinLockWake(%"struct.std::__1::atomic.0"* %3, i1 zeroext false) #8
  %4 = and i32 %1, -8
  %5 = icmp eq i32 %4, 8
  br i1 %5, label %12, label %6

6:                                                ; preds = %2
  %7 = zext i32 %4 to i64
  %8 = shl nuw nsw i64 %7, 4
  %9 = load atomic i64, i64* bitcast ({ { { void (i8*, i64)* } }, void (i8*, i64)* }* @_ZN4absl13base_internalL19submit_profile_dataE to i64*) acquire, align 8
  %10 = inttoptr i64 %9 to void (i8*, i64)*
  %11 = bitcast %"class.absl::base_internal::SpinLock"* %0 to i8*
  tail call void %10(i8* %11, i64 %8) #8
  br label %12

12:                                               ; preds = %2, %6
  ret void
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden i64 @_ZN4absl13base_internal8SpinLock16DecodeWaitCyclesEj(i32) local_unnamed_addr #6 align 2 {
  %2 = and i32 %0, -8
  %3 = zext i32 %2 to i64
  %4 = shl nuw nsw i64 %3, 4
  ret i64 %4
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN4absl13base_internal10AtomicHookIPFvPKvlEE13DummyFunctionES3_l(i8*, i64) #2 comdat align 2 {
  ret void
}

declare void @AbslInternalSpinLockDelay(%"struct.std::__1::atomic.0"*, i32, i32, i32) local_unnamed_addr #4

declare void @AbslInternalSpinLockWake(%"struct.std::__1::atomic.0"*, i1 zeroext) local_unnamed_addr #4

; Function Attrs: noinline nounwind ssp uwtable
define internal fastcc void @"_ZN4absl13base_internal12CallOnceImplIZNS0_8SpinLock8SpinLoopEvE3$_0JEEEvPNSt3__16atomicIjEENS0_14SchedulingModeEOT_DpOT0_"(%"struct.std::__1::atomic.0"*) unnamed_addr #7 {
  %2 = getelementptr inbounds %"struct.std::__1::atomic.0", %"struct.std::__1::atomic.0"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %3 = cmpxchg i32* %2, i32 0, i32 1707250555 monotonic monotonic
  %4 = extractvalue { i32, i1 } %3, 1
  br i1 %4, label %8, label %5

5:                                                ; preds = %1
  %6 = tail call i32 @_ZN4absl13base_internal12SpinLockWaitEPNSt3__16atomicIjEEiPKNS0_22SpinLockWaitTransitionENS0_14SchedulingModeE(%"struct.std::__1::atomic.0"* %0, i32 3, %"struct.absl::base_internal::SpinLockWaitTransition"* getelementptr inbounds ([3 x %"struct.absl::base_internal::SpinLockWaitTransition"], [3 x %"struct.absl::base_internal::SpinLockWaitTransition"]* @"_ZZN4absl13base_internal12CallOnceImplIZNS0_8SpinLock8SpinLoopEvE3$_0JEEEvPNSt3__16atomicIjEENS0_14SchedulingModeEOT_DpOT0_E5trans", i64 0, i64 0), i32 0) #8
  %7 = icmp eq i32 %6, 0
  br i1 %7, label %8, label %15

8:                                                ; preds = %1, %5
  %9 = tail call i32 @_ZN4absl13base_internal7NumCPUsEv() #8
  %10 = icmp sgt i32 %9, 1
  %11 = select i1 %10, i32 1000, i32 1
  store i32 %11, i32* @_ZZN4absl13base_internal8SpinLock8SpinLoopEvE19adaptive_spin_count, align 4
  %12 = atomicrmw xchg i32* %2, i32 221 release
  %13 = icmp eq i32 %12, 94570706
  br i1 %13, label %14, label %15

14:                                               ; preds = %8
  tail call void @AbslInternalSpinLockWake(%"struct.std::__1::atomic.0"* %0, i1 zeroext true) #8
  br label %15

15:                                               ; preds = %8, %14, %5
  ret void
}

declare i32 @_ZN4absl13base_internal12SpinLockWaitEPNSt3__16atomicIjEEiPKNS0_22SpinLockWaitTransitionENS0_14SchedulingModeE(%"struct.std::__1::atomic.0"*, i32, %"struct.absl::base_internal::SpinLockWaitTransition"*, i32) local_unnamed_addr #4

declare i32 @_ZN4absl13base_internal7NumCPUsEv() local_unnamed_addr #4

attributes #0 = { nofree norecurse nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nofree norecurse nounwind ssp uwtable writeonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { cold nounwind optsize ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind readnone ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { norecurse nounwind readnone ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { noinline nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #8 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{!"branch_weights", i32 2000, i32 1}
