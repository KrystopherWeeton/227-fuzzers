; ModuleID = '../../third_party/pdfium/fxjs/cfx_keyvalue.cpp'
source_filename = "../../third_party/pdfium/fxjs/cfx_keyvalue.cpp"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%class.CFX_Value = type { i8, i8, double, %"class.fxcrt::ByteString", %"class.std::__1::vector" }
%"class.fxcrt::ByteString" = type { %"class.fxcrt::RetainPtr" }
%"class.fxcrt::RetainPtr" = type { %"class.std::__1::unique_ptr" }
%"class.std::__1::unique_ptr" = type { %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %"class.fxcrt::StringDataTemplate"* }
%"class.fxcrt::StringDataTemplate" = type <{ i64, i64, i64, [1 x i8], [7 x i8] }>
%"class.std::__1::vector" = type { %"class.std::__1::__vector_base" }
%"class.std::__1::__vector_base" = type { %"class.std::__1::unique_ptr.1"*, %"class.std::__1::unique_ptr.1"*, %"class.std::__1::__compressed_pair.2" }
%"class.std::__1::unique_ptr.1" = type { %"class.std::__1::__compressed_pair.5" }
%"class.std::__1::__compressed_pair.5" = type { %"struct.std::__1::__compressed_pair_elem.6" }
%"struct.std::__1::__compressed_pair_elem.6" = type { %class.CFX_KeyValue* }
%class.CFX_KeyValue = type { %class.CFX_Value, %"class.fxcrt::ByteString" }
%"class.std::__1::__compressed_pair.2" = type { %"struct.std::__1::__compressed_pair_elem.3" }
%"struct.std::__1::__compressed_pair_elem.3" = type { %"class.std::__1::unique_ptr.1"* }

@_ZN9CFX_ValueC1Ev = hidden unnamed_addr alias void (%class.CFX_Value*), void (%class.CFX_Value*)* @_ZN9CFX_ValueC2Ev
@_ZN9CFX_ValueD1Ev = hidden unnamed_addr alias void (%class.CFX_Value*), void (%class.CFX_Value*)* @_ZN9CFX_ValueD2Ev
@_ZN12CFX_KeyValueC1Ev = hidden unnamed_addr alias void (%class.CFX_KeyValue*), void (%class.CFX_KeyValue*)* @_ZN12CFX_KeyValueC2Ev
@_ZN12CFX_KeyValueD1Ev = hidden unnamed_addr alias void (%class.CFX_KeyValue*), void (%class.CFX_KeyValue*)* @_ZN12CFX_KeyValueD2Ev

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN9CFX_ValueC2Ev(%class.CFX_Value*) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %class.CFX_Value, %class.CFX_Value* %0, i64 0, i32 0
  store i8 4, i8* %2, align 8
  %3 = getelementptr inbounds %class.CFX_Value, %class.CFX_Value* %0, i64 0, i32 3
  tail call void @_ZN5fxcrt10ByteStringC1Ev(%"class.fxcrt::ByteString"* %3) #5
  %4 = getelementptr inbounds %class.CFX_Value, %class.CFX_Value* %0, i64 0, i32 4
  %5 = bitcast %"class.std::__1::vector"* %4 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %5, i8 0, i64 24, i1 false) #5
  ret void
}

declare void @_ZN5fxcrt10ByteStringC1Ev(%"class.fxcrt::ByteString"*) unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN9CFX_ValueD2Ev(%class.CFX_Value*) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %class.CFX_Value, %class.CFX_Value* %0, i64 0, i32 4, i32 0
  %3 = getelementptr inbounds %"class.std::__1::__vector_base", %"class.std::__1::__vector_base"* %2, i64 0, i32 0
  %4 = load %"class.std::__1::unique_ptr.1"*, %"class.std::__1::unique_ptr.1"** %3, align 8
  %5 = icmp eq %"class.std::__1::unique_ptr.1"* %4, null
  br i1 %5, label %28, label %6

6:                                                ; preds = %1
  %7 = bitcast %"class.std::__1::unique_ptr.1"* %4 to i8*
  %8 = getelementptr inbounds %class.CFX_Value, %class.CFX_Value* %0, i64 0, i32 4, i32 0, i32 1
  %9 = load %"class.std::__1::unique_ptr.1"*, %"class.std::__1::unique_ptr.1"** %8, align 8
  %10 = icmp eq %"class.std::__1::unique_ptr.1"* %9, %4
  br i1 %10, label %26, label %11

11:                                               ; preds = %6, %21
  %12 = phi %"class.std::__1::unique_ptr.1"* [ %13, %21 ], [ %9, %6 ]
  %13 = getelementptr inbounds %"class.std::__1::unique_ptr.1", %"class.std::__1::unique_ptr.1"* %12, i64 -1
  %14 = getelementptr inbounds %"class.std::__1::unique_ptr.1", %"class.std::__1::unique_ptr.1"* %13, i64 0, i32 0, i32 0, i32 0
  %15 = load %class.CFX_KeyValue*, %class.CFX_KeyValue** %14, align 8
  store %class.CFX_KeyValue* null, %class.CFX_KeyValue** %14, align 8
  %16 = icmp eq %class.CFX_KeyValue* %15, null
  br i1 %16, label %21, label %17

17:                                               ; preds = %11
  %18 = getelementptr inbounds %class.CFX_KeyValue, %class.CFX_KeyValue* %15, i64 0, i32 1
  tail call void @_ZN5fxcrt10ByteStringD1Ev(%"class.fxcrt::ByteString"* %18) #5
  %19 = getelementptr inbounds %class.CFX_KeyValue, %class.CFX_KeyValue* %15, i64 0, i32 0
  tail call void @_ZN9CFX_ValueD2Ev(%class.CFX_Value* %19) #5
  %20 = getelementptr inbounds %class.CFX_KeyValue, %class.CFX_KeyValue* %15, i64 0, i32 0, i32 0
  tail call void @_ZdlPv(i8* %20) #6
  br label %21

21:                                               ; preds = %11, %17
  %22 = icmp eq %"class.std::__1::unique_ptr.1"* %13, %4
  br i1 %22, label %23, label %11

23:                                               ; preds = %21
  %24 = bitcast %"class.std::__1::__vector_base"* %2 to i8**
  %25 = load i8*, i8** %24, align 8
  br label %26

26:                                               ; preds = %6, %23
  %27 = phi i8* [ %25, %23 ], [ %7, %6 ]
  store %"class.std::__1::unique_ptr.1"* %4, %"class.std::__1::unique_ptr.1"** %8, align 8
  tail call void @_ZdlPv(i8* %27) #6
  br label %28

28:                                               ; preds = %1, %26
  %29 = getelementptr inbounds %class.CFX_Value, %class.CFX_Value* %0, i64 0, i32 3
  tail call void @_ZN5fxcrt10ByteStringD1Ev(%"class.fxcrt::ByteString"* %29) #5
  ret void
}

; Function Attrs: nounwind
declare void @_ZN5fxcrt10ByteStringD1Ev(%"class.fxcrt::ByteString"*) unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN12CFX_KeyValueC2Ev(%class.CFX_KeyValue*) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %class.CFX_KeyValue, %class.CFX_KeyValue* %0, i64 0, i32 0, i32 0
  store i8 4, i8* %2, align 8
  %3 = getelementptr inbounds %class.CFX_KeyValue, %class.CFX_KeyValue* %0, i64 0, i32 0, i32 3
  tail call void @_ZN5fxcrt10ByteStringC1Ev(%"class.fxcrt::ByteString"* %3) #5
  %4 = getelementptr inbounds %class.CFX_KeyValue, %class.CFX_KeyValue* %0, i64 0, i32 0, i32 4
  %5 = bitcast %"class.std::__1::vector"* %4 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %5, i8 0, i64 24, i1 false) #5
  %6 = getelementptr inbounds %class.CFX_KeyValue, %class.CFX_KeyValue* %0, i64 0, i32 1
  tail call void @_ZN5fxcrt10ByteStringC1Ev(%"class.fxcrt::ByteString"* %6) #5
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN12CFX_KeyValueD2Ev(%class.CFX_KeyValue*) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %class.CFX_KeyValue, %class.CFX_KeyValue* %0, i64 0, i32 1
  tail call void @_ZN5fxcrt10ByteStringD1Ev(%"class.fxcrt::ByteString"* %2) #5
  %3 = getelementptr inbounds %class.CFX_KeyValue, %class.CFX_KeyValue* %0, i64 0, i32 0, i32 4, i32 0
  %4 = getelementptr inbounds %"class.std::__1::__vector_base", %"class.std::__1::__vector_base"* %3, i64 0, i32 0
  %5 = load %"class.std::__1::unique_ptr.1"*, %"class.std::__1::unique_ptr.1"** %4, align 8
  %6 = icmp eq %"class.std::__1::unique_ptr.1"* %5, null
  br i1 %6, label %29, label %7

7:                                                ; preds = %1
  %8 = bitcast %"class.std::__1::unique_ptr.1"* %5 to i8*
  %9 = getelementptr inbounds %class.CFX_KeyValue, %class.CFX_KeyValue* %0, i64 0, i32 0, i32 4, i32 0, i32 1
  %10 = load %"class.std::__1::unique_ptr.1"*, %"class.std::__1::unique_ptr.1"** %9, align 8
  %11 = icmp eq %"class.std::__1::unique_ptr.1"* %10, %5
  br i1 %11, label %27, label %12

12:                                               ; preds = %7, %22
  %13 = phi %"class.std::__1::unique_ptr.1"* [ %14, %22 ], [ %10, %7 ]
  %14 = getelementptr inbounds %"class.std::__1::unique_ptr.1", %"class.std::__1::unique_ptr.1"* %13, i64 -1
  %15 = getelementptr inbounds %"class.std::__1::unique_ptr.1", %"class.std::__1::unique_ptr.1"* %14, i64 0, i32 0, i32 0, i32 0
  %16 = load %class.CFX_KeyValue*, %class.CFX_KeyValue** %15, align 8
  store %class.CFX_KeyValue* null, %class.CFX_KeyValue** %15, align 8
  %17 = icmp eq %class.CFX_KeyValue* %16, null
  br i1 %17, label %22, label %18

18:                                               ; preds = %12
  %19 = getelementptr inbounds %class.CFX_KeyValue, %class.CFX_KeyValue* %16, i64 0, i32 1
  tail call void @_ZN5fxcrt10ByteStringD1Ev(%"class.fxcrt::ByteString"* %19) #5
  %20 = getelementptr inbounds %class.CFX_KeyValue, %class.CFX_KeyValue* %16, i64 0, i32 0
  tail call void @_ZN9CFX_ValueD2Ev(%class.CFX_Value* %20) #5
  %21 = getelementptr inbounds %class.CFX_KeyValue, %class.CFX_KeyValue* %16, i64 0, i32 0, i32 0
  tail call void @_ZdlPv(i8* %21) #6
  br label %22

22:                                               ; preds = %12, %18
  %23 = icmp eq %"class.std::__1::unique_ptr.1"* %14, %5
  br i1 %23, label %24, label %12

24:                                               ; preds = %22
  %25 = bitcast %"class.std::__1::__vector_base"* %3 to i8**
  %26 = load i8*, i8** %25, align 8
  br label %27

27:                                               ; preds = %7, %24
  %28 = phi i8* [ %26, %24 ], [ %8, %7 ]
  store %"class.std::__1::unique_ptr.1"* %5, %"class.std::__1::unique_ptr.1"** %9, align 8
  tail call void @_ZdlPv(i8* %28) #6
  br label %29

29:                                               ; preds = %1, %27
  %30 = getelementptr inbounds %class.CFX_KeyValue, %class.CFX_KeyValue* %0, i64 0, i32 0, i32 3
  tail call void @_ZN5fxcrt10ByteStringD1Ev(%"class.fxcrt::ByteString"* %30) #5
  ret void
}

; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(i8*) local_unnamed_addr #3

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #4

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { argmemonly nounwind }
attributes #5 = { nounwind }
attributes #6 = { builtin nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
