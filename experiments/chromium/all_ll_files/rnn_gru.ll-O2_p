; ModuleID = '../../third_party/webrtc/modules/audio_processing/agc2/rnn_vad/rnn_gru.cc'
source_filename = "../../third_party/webrtc/modules/audio_processing/agc2/rnn_vad/rnn_gru.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"class.webrtc::rnn_vad::GatedRecurrentLayer" = type <{ i32, i32, %"class.std::__1::vector", %"class.std::__1::vector", %"class.std::__1::vector", %"class.webrtc::rnn_vad::VectorMath", i8, %"struct.std::__1::array", [4 x i8] }>
%"class.std::__1::vector" = type { %"class.std::__1::__vector_base" }
%"class.std::__1::__vector_base" = type { float*, float*, %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { float* }
%"class.webrtc::rnn_vad::VectorMath" = type { %"struct.webrtc::AvailableCpuFeatures" }
%"struct.webrtc::AvailableCpuFeatures" = type { i8, i8, i8 }
%"struct.std::__1::array" = type { [24 x float] }
%"class.rtc::ArrayView" = type { %"class.rtc::impl::ArrayViewBase" }
%"class.rtc::impl::ArrayViewBase" = type { i8*, i64 }
%"class.absl::string_view" = type { i8*, i64 }
%"class.std::__1::__vector_base_common" = type { i8 }
%"class.rtc::ArrayView.1" = type { %"class.rtc::impl::ArrayViewBase.2" }
%"class.rtc::impl::ArrayViewBase.2" = type { float*, i64 }
%"class.rtc::ArrayView.3" = type { %"class.rtc::impl::ArrayViewBase.4" }
%"class.rtc::impl::ArrayViewBase.4" = type { float*, i64 }

$_ZZN3rtc18webrtc_checks_impl11LogStreamerIJEE11CallCheckOpIJNS0_3ValILNS0_12CheckArgTypeE1EiEES6_S6_NS4_ILS5_9EPKcEES6_EEEvS8_iS8_DpRKT_E1t = comdat any

$_ZZN7rnnoise18TansigApproximatedEfE12kTansigTable = comdat any

@.str = private unnamed_addr constant [43 x i8] c"../../third_party/webrtc/rtc_base/checks.h\00", align 1
@.str.1 = private unnamed_addr constant [11 x i8] c"a % b == 0\00", align 1
@.str.2 = private unnamed_addr constant [29 x i8] c" is not evenly divisible by \00", align 1
@_ZZN3rtc18webrtc_checks_impl11LogStreamerIJEE11CallCheckOpIJNS0_3ValILNS0_12CheckArgTypeE1EiEES6_S6_NS4_ILS5_9EPKcEES6_EEEvS8_iS8_DpRKT_E1t = linkonce_odr hidden constant [7 x i8] c"\0D\01\01\01\09\01\00", comdat, align 1
@_ZZN7rnnoise18TansigApproximatedEfE12kTansigTable = linkonce_odr hidden local_unnamed_addr constant [201 x float] [float 0.000000e+00, float 0x3FA47820A0000000, float 0x3FB46FBD20000000, float 0x3FBE92C4A0000000, float 0x3FC44E9C40000000, float 0x3FC9439580000000, float 0x3FCE24BBA0000000, float 0x3FD1774680000000, float 0x3FD3CEF680000000, float 0x3FD617FC80000000, float 0x3FD85115A0000000, float 0x3FDA7924A0000000, float 0x3FDC8F4300000000, float 0x3FDE92A300000000, float 0x3FE0415900000000, float 0x3FE12F8380000000, float 0x3FE213A920000000, float 0x3FE2EDB940000000, float 0x3FE3BDB800000000, float 0x3FE483B3E0000000, float 0x3FE53FCA80000000, float 0x3FE5F225C0000000, float 0x3FE69AFC00000000, float 0x3FE73A8C60000000, float 0x3FE7D11E00000000, float 0x3FE85EFA60000000, float 0x3FE8E47560000000, float 0x3FE961E2E0000000, float 0x3FE9D79B00000000, float 0x3FEA45F5A0000000, float 0x3FEAAD4D40000000, float 0x3FEB0DF9C0000000, float 0x3FEB685340000000, float 0x3FEBBCB1C0000000, float 0x3FEC0B6960000000, float 0x3FEC54CDC0000000, float 0x3FEC992C80000000, float 0x3FECD8D360000000, float 0x3FED140DE0000000, float 0x3FED4B1EE0000000, float 0x3FED7E5000000000, float 0x3FEDADDBE0000000, float 0x3FEDDA0160000000, float 0x3FEE02F940000000, float 0x3FEE28FC00000000, float 0x3FEE4C3C20000000, float 0x3FEE6CE9A0000000, float 0x3FEE8B32C0000000, float 0x3FEEA74180000000, float 0x3FEEC13FE0000000, float 0x3FEED95140000000, float 0x3FEEEF9760000000, float 0x3FEF043800000000, float 0x3FEF174C40000000, float 0x3FEF28F3A0000000, float 0x3FEF394960000000, float 0x3FEF486480000000, float 0x3FEF565E40000000, float 0x3FEF634760000000, float 0x3FEF6F3900000000, float 0x3FEF7A4400000000, float 0x3FEF847900000000, float 0x3FEF8DE6E0000000, float 0x3FEF969E40000000, float 0x3FEF9EABC0000000, float 0x3FEFA61C00000000, float 0x3FEFACFD80000000, float 0x3FEFB356E0000000, float 0x3FEFB93680000000, float 0x3FEFBEA0C0000000, float 0x3FEFC3A220000000, float 0x3FEFC84300000000, float 0x3FEFCC89C0000000, float 0x3FEFD07A60000000, float 0x3FEFD41FA0000000, float 0x3FEFD77DA0000000, float 0x3FEFDA9860000000, float 0x3FEFDD7660000000, float 0x3FEFE01DE0000000, float 0x3FEFE290E0000000, float 0x3FEFE4D1A0000000, float 0x3FEFE6E860000000, float 0x3FEFE8D540000000, float 0x3FEFEA9C60000000, float 0x3FEFEC41E0000000, float 0x3FEFEDC5E0000000, float 0x3FEFEF2C80000000, float 0x3FEFF077C0000000, float 0x3FEFF1A7E0000000, float 0x3FEFF2C300000000, float 0x3FEFF3C700000000, float 0x3FEFF4B840000000, float 0x3FEFF59460000000, float 0x3FEFF66200000000, float 0x3FEFF71EA0000000, float 0x3FEFF7CEE0000000, float 0x3FEFF86E40000000, float 0x3FEFF90320000000, float 0x3FEFF98D80000000, float 0x3FEFFA0B60000000, float 0x3FEFFA80C0000000, float 0x3FEFFAEDE0000000, float 0x3FEFFB5060000000, float 0x3FEFFBACC0000000, float 0x3FEFFC02A0000000, float 0x3FEFFC5040000000, float 0x3FEFFC99A0000000, float 0x3FEFFCDCC0000000, float 0x3FEFFD19A0000000, float 0x3FEFFD5240000000, float 0x3FEFFD88C0000000, float 0x3FEFFDB900000000, float 0x3FEFFDE500000000, float 0x3FEFFE0F00000000, float 0x3FEFFE34C0000000, float 0x3FEFFE5860000000, float 0x3FEFFE77E0000000, float 0x3FEFFE9740000000, float 0x3FEFFEB280000000, float 0x3FEFFECBC0000000, float 0x3FEFFEE4E0000000, float 0x3FEFFEF9E0000000, float 0x3FEFFF0EE0000000, float 0x3FEFFF1FA0000000, float 0x3FEFFF3280000000, float 0x3FEFFF4120000000, float 0x3FEFFF4FE0000000, float 0x3FEFFF5E80000000, float 0x3FEFFF6B20000000, float 0x3FEFFF75A0000000, float 0x3FEFFF8020000000, float 0x3FEFFF8A80000000, float 0x3FEFFF9300000000, float 0x3FEFFF9B60000000, float 0x3FEFFFA3C0000000, float 0x3FEFFFAA00000000, float 0x3FEFFFB040000000, float 0x3FEFFFB6A0000000, float 0x3FEFFFBCE0000000, float 0x3FEFFFC120000000, float 0x3FEFFFC760000000, float 0x3FEFFFCBA0000000, float 0x3FEFFFCFC0000000, float 0x3FEFFFD1E0000000, float 0x3FEFFFD600000000, float 0x3FEFFFDA40000000, float 0x3FEFFFDC60000000, float 0x3FEFFFDE80000000, float 0x3FEFFFE2A0000000, float 0x3FEFFFE4C0000000, float 0x3FEFFFE6E0000000, float 0x3FEFFFE8E0000000, float 0x3FEFFFEB00000000, float 0x3FEFFFEB00000000, float 0x3FEFFFED20000000, float 0x3FEFFFEF40000000, float 0x3FEFFFEF40000000, float 0x3FEFFFF160000000, float 0x3FEFFFF360000000, float 0x3FEFFFF360000000, float 0x3FEFFFF360000000, float 0x3FEFFFF580000000, float 0x3FEFFFF580000000, float 0x3FEFFFF7A0000000, float 0x3FEFFFF7A0000000, float 0x3FEFFFF7A0000000, float 0x3FEFFFF9C0000000, float 0x3FEFFFF9C0000000, float 0x3FEFFFF9C0000000, float 0x3FEFFFF9C0000000, float 0x3FEFFFF9C0000000, float 0x3FEFFFFBC0000000, float 0x3FEFFFFBC0000000, float 0x3FEFFFFBC0000000, float 0x3FEFFFFBC0000000, float 0x3FEFFFFBC0000000, float 0x3FEFFFFBC0000000, float 0x3FEFFFFDE0000000, float 0x3FEFFFFDE0000000, float 0x3FEFFFFDE0000000, float 0x3FEFFFFDE0000000, float 0x3FEFFFFDE0000000, float 0x3FEFFFFDE0000000, float 0x3FEFFFFDE0000000, float 0x3FEFFFFDE0000000, float 0x3FEFFFFDE0000000, float 0x3FEFFFFDE0000000, float 0x3FEFFFFDE0000000, float 0x3FEFFFFDE0000000, float 0x3FEFFFFDE0000000, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00], comdat, align 16

@_ZN6webrtc7rnn_vad19GatedRecurrentLayerC1EiiN3rtc9ArrayViewIKaLln4711EEES5_S5_RKNS_20AvailableCpuFeaturesEN4absl11string_viewE = hidden unnamed_addr alias void (%"class.webrtc::rnn_vad::GatedRecurrentLayer"*, i32, i32, i8*, i64, %"class.rtc::ArrayView"*, %"class.rtc::ArrayView"*, %"struct.webrtc::AvailableCpuFeatures"*, %"class.absl::string_view"*), void (%"class.webrtc::rnn_vad::GatedRecurrentLayer"*, i32, i32, i8*, i64, %"class.rtc::ArrayView"*, %"class.rtc::ArrayView"*, %"struct.webrtc::AvailableCpuFeatures"*, %"class.absl::string_view"*)* @_ZN6webrtc7rnn_vad19GatedRecurrentLayerC2EiiN3rtc9ArrayViewIKaLln4711EEES5_S5_RKNS_20AvailableCpuFeaturesEN4absl11string_viewE
@_ZN6webrtc7rnn_vad19GatedRecurrentLayerD1Ev = hidden unnamed_addr alias void (%"class.webrtc::rnn_vad::GatedRecurrentLayer"*), void (%"class.webrtc::rnn_vad::GatedRecurrentLayer"*)* @_ZN6webrtc7rnn_vad19GatedRecurrentLayerD2Ev

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN6webrtc7rnn_vad19GatedRecurrentLayerC2EiiN3rtc9ArrayViewIKaLln4711EEES5_S5_RKNS_20AvailableCpuFeaturesEN4absl11string_viewE(%"class.webrtc::rnn_vad::GatedRecurrentLayer"*, i32, i32, i8*, i64, %"class.rtc::ArrayView"* nocapture readonly byval(%"class.rtc::ArrayView") align 8, %"class.rtc::ArrayView"* nocapture readonly byval(%"class.rtc::ArrayView") align 8, %"struct.webrtc::AvailableCpuFeatures"* nocapture readonly dereferenceable(3), %"class.absl::string_view"* nocapture readnone byval(%"class.absl::string_view") align 8) unnamed_addr #0 align 2 {
  %10 = getelementptr inbounds %"class.webrtc::rnn_vad::GatedRecurrentLayer", %"class.webrtc::rnn_vad::GatedRecurrentLayer"* %0, i64 0, i32 0
  store i32 %1, i32* %10, align 8
  %11 = getelementptr inbounds %"class.webrtc::rnn_vad::GatedRecurrentLayer", %"class.webrtc::rnn_vad::GatedRecurrentLayer"* %0, i64 0, i32 1
  store i32 %2, i32* %11, align 4
  %12 = getelementptr inbounds %"class.webrtc::rnn_vad::GatedRecurrentLayer", %"class.webrtc::rnn_vad::GatedRecurrentLayer"* %0, i64 0, i32 2
  tail call fastcc void @_ZN6webrtc7rnn_vad12_GLOBAL__N_119PreprocessGruTensorEN3rtc9ArrayViewIKaLln4711EEEi(%"class.std::__1::vector"* sret %12, i8* %3, i64 %4, i32 %2)
  %13 = getelementptr inbounds %"class.webrtc::rnn_vad::GatedRecurrentLayer", %"class.webrtc::rnn_vad::GatedRecurrentLayer"* %0, i64 0, i32 3
  %14 = getelementptr inbounds %"class.rtc::ArrayView", %"class.rtc::ArrayView"* %5, i64 0, i32 0, i32 0
  %15 = load i8*, i8** %14, align 8
  %16 = getelementptr inbounds %"class.rtc::ArrayView", %"class.rtc::ArrayView"* %5, i64 0, i32 0, i32 1
  %17 = load i64, i64* %16, align 8
  tail call fastcc void @_ZN6webrtc7rnn_vad12_GLOBAL__N_119PreprocessGruTensorEN3rtc9ArrayViewIKaLln4711EEEi(%"class.std::__1::vector"* sret %13, i8* %15, i64 %17, i32 %2)
  %18 = getelementptr inbounds %"class.webrtc::rnn_vad::GatedRecurrentLayer", %"class.webrtc::rnn_vad::GatedRecurrentLayer"* %0, i64 0, i32 4
  %19 = getelementptr inbounds %"class.rtc::ArrayView", %"class.rtc::ArrayView"* %6, i64 0, i32 0, i32 0
  %20 = load i8*, i8** %19, align 8
  %21 = getelementptr inbounds %"class.rtc::ArrayView", %"class.rtc::ArrayView"* %6, i64 0, i32 0, i32 1
  %22 = load i64, i64* %21, align 8
  tail call fastcc void @_ZN6webrtc7rnn_vad12_GLOBAL__N_119PreprocessGruTensorEN3rtc9ArrayViewIKaLln4711EEEi(%"class.std::__1::vector"* sret %18, i8* %20, i64 %22, i32 %2)
  %23 = getelementptr inbounds %"class.webrtc::rnn_vad::GatedRecurrentLayer", %"class.webrtc::rnn_vad::GatedRecurrentLayer"* %0, i64 0, i32 5
  %24 = bitcast %"struct.webrtc::AvailableCpuFeatures"* %7 to i24*
  %25 = load i24, i24* %24, align 1
  %26 = bitcast %"class.webrtc::rnn_vad::VectorMath"* %23 to i24*
  store i24 %25, i24* %26, align 1
  %27 = getelementptr inbounds %"class.webrtc::rnn_vad::GatedRecurrentLayer", %"class.webrtc::rnn_vad::GatedRecurrentLayer"* %0, i64 0, i32 7
  %28 = bitcast %"struct.std::__1::array"* %27 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 4 %28, i8 0, i64 96, i1 false) #9
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal fastcc void @_ZN6webrtc7rnn_vad12_GLOBAL__N_119PreprocessGruTensorEN3rtc9ArrayViewIKaLln4711EEEi(%"class.std::__1::vector"* noalias sret, i8*, i64, i32) unnamed_addr #0 {
  %5 = trunc i64 %2 to i32
  %6 = mul nsw i32 %3, 3
  %7 = srem i32 %5, %6
  %8 = sdiv i32 %5, %6
  %9 = icmp eq i32 %7, 0
  br i1 %9, label %11, label %10

10:                                               ; preds = %4
  tail call void (i8*, i32, i8*, i8*, ...) @_ZN3rtc18webrtc_checks_impl8FatalLogEPKciS2_PKNS0_12CheckArgTypeEz(i8* getelementptr inbounds ([43 x i8], [43 x i8]* @.str, i64 0, i64 0), i32 466, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.1, i64 0, i64 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @_ZZN3rtc18webrtc_checks_impl11LogStreamerIJEE11CallCheckOpIJNS0_3ValILNS0_12CheckArgTypeE1EiEES6_S6_NS4_ILS5_9EPKcEES6_EEEvS8_iS8_DpRKT_E1t, i64 0, i64 0), i32 %7, i32 0, i32 %5, i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.2, i64 0, i64 0), i32 %6) #10
  unreachable

11:                                               ; preds = %4
  %12 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %0, i64 0, i32 0, i32 0
  %13 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %0, i64 0, i32 0, i32 1
  %14 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %0, i64 0, i32 0, i32 2, i32 0, i32 0
  %15 = bitcast %"class.std::__1::vector"* %0 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %15, i8 0, i64 24, i1 false) #9
  %16 = icmp eq i64 %2, 0
  br i1 %16, label %36, label %17

17:                                               ; preds = %11
  %18 = icmp ugt i64 %2, 4611686018427387903
  br i1 %18, label %19, label %21

19:                                               ; preds = %17
  %20 = bitcast %"class.std::__1::vector"* %0 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %20) #10
  unreachable

21:                                               ; preds = %17
  %22 = shl i64 %2, 2
  %23 = tail call i8* @_Znwm(i64 %22) #11
  %24 = bitcast i8* %23 to float*
  %25 = bitcast %"class.std::__1::vector"* %0 to i8**
  store i8* %23, i8** %25, align 8
  %26 = getelementptr inbounds float, float* %24, i64 %2
  store float* %26, float** %14, align 8
  %27 = bitcast float** %13 to i64*
  %28 = ptrtoint i8* %23 to i64
  %29 = add nsw i64 %2, -1
  %30 = getelementptr float, float* %24, i64 %29
  %31 = ptrtoint float* %30 to i64
  %32 = sub i64 4, %28
  %33 = add i64 %32, %31
  %34 = and i64 %33, -4
  tail call void @llvm.memset.p0i8.i64(i8* nonnull align 4 %23, i8 0, i64 %34, i1 false) #9
  %35 = ptrtoint float* %26 to i64
  store i64 %35, i64* %27, align 8
  br label %36

36:                                               ; preds = %11, %21
  %37 = icmp sgt i32 %3, 0
  %38 = icmp sgt i32 %8, 0
  br i1 %37, label %39, label %230

39:                                               ; preds = %36
  %40 = zext i32 %8 to i64
  %41 = and i64 %40, 1
  %42 = icmp eq i32 %8, 1
  %43 = sub nsw i64 %40, %41
  %44 = icmp eq i64 %41, 0
  br label %45

45:                                               ; preds = %66, %39
  %46 = phi i32 [ 0, %39 ], [ %67, %66 ]
  br i1 %38, label %47, label %66

47:                                               ; preds = %45
  %48 = mul i32 %46, %8
  br i1 %42, label %50, label %69

49:                                               ; preds = %66
  br i1 %37, label %102, label %230

50:                                               ; preds = %69, %47
  %51 = phi i64 [ 0, %47 ], [ %99, %69 ]
  br i1 %44, label %66, label %52

52:                                               ; preds = %50
  %53 = trunc i64 %51 to i32
  %54 = mul i32 %6, %53
  %55 = add i32 %46, %54
  %56 = sext i32 %55 to i64
  %57 = getelementptr inbounds i8, i8* %1, i64 %56
  %58 = load i8, i8* %57, align 1
  %59 = sitofp i8 %58 to float
  %60 = fmul float %59, 3.906250e-03
  %61 = trunc i64 %51 to i32
  %62 = add i32 %48, %61
  %63 = sext i32 %62 to i64
  %64 = load float*, float** %12, align 8
  %65 = getelementptr inbounds float, float* %64, i64 %63
  store float %60, float* %65, align 4
  br label %66

66:                                               ; preds = %52, %50, %45
  %67 = add nuw nsw i32 %46, 1
  %68 = icmp eq i32 %67, %3
  br i1 %68, label %49, label %45

69:                                               ; preds = %47, %69
  %70 = phi i64 [ %99, %69 ], [ 0, %47 ]
  %71 = phi i64 [ %100, %69 ], [ %43, %47 ]
  %72 = trunc i64 %70 to i32
  %73 = mul i32 %6, %72
  %74 = add i32 %46, %73
  %75 = sext i32 %74 to i64
  %76 = getelementptr inbounds i8, i8* %1, i64 %75
  %77 = load i8, i8* %76, align 1
  %78 = sitofp i8 %77 to float
  %79 = fmul float %78, 3.906250e-03
  %80 = trunc i64 %70 to i32
  %81 = add i32 %48, %80
  %82 = sext i32 %81 to i64
  %83 = load float*, float** %12, align 8
  %84 = getelementptr inbounds float, float* %83, i64 %82
  store float %79, float* %84, align 4
  %85 = or i64 %70, 1
  %86 = trunc i64 %85 to i32
  %87 = mul i32 %6, %86
  %88 = add i32 %46, %87
  %89 = sext i32 %88 to i64
  %90 = getelementptr inbounds i8, i8* %1, i64 %89
  %91 = load i8, i8* %90, align 1
  %92 = sitofp i8 %91 to float
  %93 = fmul float %92, 3.906250e-03
  %94 = trunc i64 %85 to i32
  %95 = add i32 %48, %94
  %96 = sext i32 %95 to i64
  %97 = load float*, float** %12, align 8
  %98 = getelementptr inbounds float, float* %97, i64 %96
  store float %93, float* %98, align 4
  %99 = add nuw nsw i64 %70, 2
  %100 = add i64 %71, -2
  %101 = icmp eq i64 %100, 0
  br i1 %101, label %50, label %69

102:                                              ; preds = %49
  %103 = zext i32 %8 to i64
  %104 = and i64 %103, 1
  %105 = icmp eq i32 %8, 1
  %106 = sub nsw i64 %103, %104
  %107 = icmp eq i64 %104, 0
  br label %108

108:                                              ; preds = %162, %102
  %109 = phi i32 [ 0, %102 ], [ %163, %162 ]
  br i1 %38, label %110, label %162

110:                                              ; preds = %108
  %111 = add i32 %109, %3
  %112 = mul i32 %111, %8
  br i1 %105, label %146, label %113

113:                                              ; preds = %110, %113
  %114 = phi i64 [ %143, %113 ], [ 0, %110 ]
  %115 = phi i64 [ %144, %113 ], [ %106, %110 ]
  %116 = trunc i64 %114 to i32
  %117 = mul i32 %6, %116
  %118 = add i32 %111, %117
  %119 = sext i32 %118 to i64
  %120 = getelementptr inbounds i8, i8* %1, i64 %119
  %121 = load i8, i8* %120, align 1
  %122 = sitofp i8 %121 to float
  %123 = fmul float %122, 3.906250e-03
  %124 = trunc i64 %114 to i32
  %125 = add i32 %112, %124
  %126 = sext i32 %125 to i64
  %127 = load float*, float** %12, align 8
  %128 = getelementptr inbounds float, float* %127, i64 %126
  store float %123, float* %128, align 4
  %129 = or i64 %114, 1
  %130 = trunc i64 %129 to i32
  %131 = mul i32 %6, %130
  %132 = add i32 %111, %131
  %133 = sext i32 %132 to i64
  %134 = getelementptr inbounds i8, i8* %1, i64 %133
  %135 = load i8, i8* %134, align 1
  %136 = sitofp i8 %135 to float
  %137 = fmul float %136, 3.906250e-03
  %138 = trunc i64 %129 to i32
  %139 = add i32 %112, %138
  %140 = sext i32 %139 to i64
  %141 = load float*, float** %12, align 8
  %142 = getelementptr inbounds float, float* %141, i64 %140
  store float %137, float* %142, align 4
  %143 = add nuw nsw i64 %114, 2
  %144 = add i64 %115, -2
  %145 = icmp eq i64 %144, 0
  br i1 %145, label %146, label %113

146:                                              ; preds = %113, %110
  %147 = phi i64 [ 0, %110 ], [ %143, %113 ]
  br i1 %107, label %162, label %148

148:                                              ; preds = %146
  %149 = trunc i64 %147 to i32
  %150 = mul i32 %6, %149
  %151 = add i32 %111, %150
  %152 = sext i32 %151 to i64
  %153 = getelementptr inbounds i8, i8* %1, i64 %152
  %154 = load i8, i8* %153, align 1
  %155 = sitofp i8 %154 to float
  %156 = fmul float %155, 3.906250e-03
  %157 = trunc i64 %147 to i32
  %158 = add i32 %112, %157
  %159 = sext i32 %158 to i64
  %160 = load float*, float** %12, align 8
  %161 = getelementptr inbounds float, float* %160, i64 %159
  store float %156, float* %161, align 4
  br label %162

162:                                              ; preds = %148, %146, %108
  %163 = add nuw nsw i32 %109, 1
  %164 = icmp eq i32 %163, %3
  br i1 %164, label %165, label %108

165:                                              ; preds = %162
  br i1 %37, label %166, label %230

166:                                              ; preds = %165
  %167 = shl i32 %3, 1
  %168 = zext i32 %8 to i64
  %169 = and i64 %168, 1
  %170 = icmp eq i32 %8, 1
  %171 = sub nsw i64 %168, %169
  %172 = icmp eq i64 %169, 0
  br label %173

173:                                              ; preds = %227, %166
  %174 = phi i32 [ 0, %166 ], [ %228, %227 ]
  br i1 %38, label %175, label %227

175:                                              ; preds = %173
  %176 = add i32 %174, %167
  %177 = mul i32 %176, %8
  br i1 %170, label %211, label %178

178:                                              ; preds = %175, %178
  %179 = phi i64 [ %208, %178 ], [ 0, %175 ]
  %180 = phi i64 [ %209, %178 ], [ %171, %175 ]
  %181 = trunc i64 %179 to i32
  %182 = mul i32 %6, %181
  %183 = add i32 %176, %182
  %184 = sext i32 %183 to i64
  %185 = getelementptr inbounds i8, i8* %1, i64 %184
  %186 = load i8, i8* %185, align 1
  %187 = sitofp i8 %186 to float
  %188 = fmul float %187, 3.906250e-03
  %189 = trunc i64 %179 to i32
  %190 = add i32 %177, %189
  %191 = sext i32 %190 to i64
  %192 = load float*, float** %12, align 8
  %193 = getelementptr inbounds float, float* %192, i64 %191
  store float %188, float* %193, align 4
  %194 = or i64 %179, 1
  %195 = trunc i64 %194 to i32
  %196 = mul i32 %6, %195
  %197 = add i32 %176, %196
  %198 = sext i32 %197 to i64
  %199 = getelementptr inbounds i8, i8* %1, i64 %198
  %200 = load i8, i8* %199, align 1
  %201 = sitofp i8 %200 to float
  %202 = fmul float %201, 3.906250e-03
  %203 = trunc i64 %194 to i32
  %204 = add i32 %177, %203
  %205 = sext i32 %204 to i64
  %206 = load float*, float** %12, align 8
  %207 = getelementptr inbounds float, float* %206, i64 %205
  store float %202, float* %207, align 4
  %208 = add nuw nsw i64 %179, 2
  %209 = add i64 %180, -2
  %210 = icmp eq i64 %209, 0
  br i1 %210, label %211, label %178

211:                                              ; preds = %178, %175
  %212 = phi i64 [ 0, %175 ], [ %208, %178 ]
  br i1 %172, label %227, label %213

213:                                              ; preds = %211
  %214 = trunc i64 %212 to i32
  %215 = mul i32 %6, %214
  %216 = add i32 %176, %215
  %217 = sext i32 %216 to i64
  %218 = getelementptr inbounds i8, i8* %1, i64 %217
  %219 = load i8, i8* %218, align 1
  %220 = sitofp i8 %219 to float
  %221 = fmul float %220, 3.906250e-03
  %222 = trunc i64 %212 to i32
  %223 = add i32 %177, %222
  %224 = sext i32 %223 to i64
  %225 = load float*, float** %12, align 8
  %226 = getelementptr inbounds float, float* %225, i64 %224
  store float %221, float* %226, align 4
  br label %227

227:                                              ; preds = %213, %211, %173
  %228 = add nuw nsw i32 %174, 1
  %229 = icmp eq i32 %228, %3
  br i1 %229, label %230, label %173

230:                                              ; preds = %227, %36, %49, %165
  ret void
}

; Function Attrs: nounwind ssp uwtable writeonly
define hidden void @_ZN6webrtc7rnn_vad19GatedRecurrentLayer5ResetEv(%"class.webrtc::rnn_vad::GatedRecurrentLayer"*) local_unnamed_addr #1 align 2 {
  %2 = getelementptr inbounds %"class.webrtc::rnn_vad::GatedRecurrentLayer", %"class.webrtc::rnn_vad::GatedRecurrentLayer"* %0, i64 0, i32 7
  %3 = bitcast %"struct.std::__1::array"* %2 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 4 %3, i8 0, i64 96, i1 false)
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN6webrtc7rnn_vad19GatedRecurrentLayerD2Ev(%"class.webrtc::rnn_vad::GatedRecurrentLayer"* nocapture) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.webrtc::rnn_vad::GatedRecurrentLayer", %"class.webrtc::rnn_vad::GatedRecurrentLayer"* %0, i64 0, i32 4, i32 0, i32 0
  %3 = load float*, float** %2, align 8
  %4 = icmp eq float* %3, null
  br i1 %4, label %10, label %5

5:                                                ; preds = %1
  %6 = ptrtoint float* %3 to i64
  %7 = getelementptr inbounds %"class.webrtc::rnn_vad::GatedRecurrentLayer", %"class.webrtc::rnn_vad::GatedRecurrentLayer"* %0, i64 0, i32 4, i32 0, i32 1
  %8 = bitcast float** %7 to i64*
  store i64 %6, i64* %8, align 8
  %9 = bitcast float* %3 to i8*
  tail call void @_ZdlPv(i8* %9) #11
  br label %10

10:                                               ; preds = %1, %5
  %11 = getelementptr inbounds %"class.webrtc::rnn_vad::GatedRecurrentLayer", %"class.webrtc::rnn_vad::GatedRecurrentLayer"* %0, i64 0, i32 3, i32 0, i32 0
  %12 = load float*, float** %11, align 8
  %13 = icmp eq float* %12, null
  br i1 %13, label %19, label %14

14:                                               ; preds = %10
  %15 = ptrtoint float* %12 to i64
  %16 = getelementptr inbounds %"class.webrtc::rnn_vad::GatedRecurrentLayer", %"class.webrtc::rnn_vad::GatedRecurrentLayer"* %0, i64 0, i32 3, i32 0, i32 1
  %17 = bitcast float** %16 to i64*
  store i64 %15, i64* %17, align 8
  %18 = bitcast float* %12 to i8*
  tail call void @_ZdlPv(i8* %18) #11
  br label %19

19:                                               ; preds = %10, %14
  %20 = getelementptr inbounds %"class.webrtc::rnn_vad::GatedRecurrentLayer", %"class.webrtc::rnn_vad::GatedRecurrentLayer"* %0, i64 0, i32 2, i32 0, i32 0
  %21 = load float*, float** %20, align 8
  %22 = icmp eq float* %21, null
  br i1 %22, label %28, label %23

23:                                               ; preds = %19
  %24 = ptrtoint float* %21 to i64
  %25 = getelementptr inbounds %"class.webrtc::rnn_vad::GatedRecurrentLayer", %"class.webrtc::rnn_vad::GatedRecurrentLayer"* %0, i64 0, i32 2, i32 0, i32 1
  %26 = bitcast float** %25 to i64*
  store i64 %24, i64* %26, align 8
  %27 = bitcast float* %21 to i8*
  tail call void @_ZdlPv(i8* %27) #11
  br label %28

28:                                               ; preds = %19, %23
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN6webrtc7rnn_vad19GatedRecurrentLayer13ComputeOutputEN3rtc9ArrayViewIKfLln4711EEE(%"class.webrtc::rnn_vad::GatedRecurrentLayer"*, float*, i64) local_unnamed_addr #3 align 2 {
  %4 = ptrtoint float* %1 to i64
  %5 = alloca %"struct.std::__1::array", align 4
  %6 = alloca %"struct.std::__1::array", align 4
  %7 = alloca %"class.rtc::ArrayView.1", align 8
  %8 = alloca %"class.rtc::ArrayView.1", align 8
  %9 = alloca %"class.rtc::ArrayView.1", align 8
  %10 = alloca %"class.rtc::ArrayView.1", align 8
  %11 = alloca %"class.rtc::ArrayView.3", align 8
  %12 = alloca %"struct.std::__1::array", align 4
  %13 = alloca %"class.rtc::ArrayView.1", align 8
  %14 = alloca %"class.rtc::ArrayView.1", align 8
  %15 = alloca %"class.rtc::ArrayView.1", align 8
  %16 = alloca %"class.rtc::ArrayView.1", align 8
  %17 = alloca %"class.rtc::ArrayView.3", align 8
  %18 = getelementptr inbounds %"class.webrtc::rnn_vad::GatedRecurrentLayer", %"class.webrtc::rnn_vad::GatedRecurrentLayer"* %0, i64 0, i32 2, i32 0, i32 0
  %19 = load float*, float** %18, align 8
  %20 = getelementptr inbounds %"class.webrtc::rnn_vad::GatedRecurrentLayer", %"class.webrtc::rnn_vad::GatedRecurrentLayer"* %0, i64 0, i32 2, i32 0, i32 1
  %21 = bitcast float** %20 to i64*
  %22 = load i64, i64* %21, align 8
  %23 = ptrtoint float* %19 to i64
  %24 = sub i64 %22, %23
  %25 = ashr exact i64 %24, 2
  %26 = icmp eq i64 %24, 0
  %27 = select i1 %26, float* null, float* %19
  %28 = getelementptr inbounds %"class.webrtc::rnn_vad::GatedRecurrentLayer", %"class.webrtc::rnn_vad::GatedRecurrentLayer"* %0, i64 0, i32 3, i32 0, i32 0
  %29 = load float*, float** %28, align 8
  %30 = getelementptr inbounds %"class.webrtc::rnn_vad::GatedRecurrentLayer", %"class.webrtc::rnn_vad::GatedRecurrentLayer"* %0, i64 0, i32 3, i32 0, i32 1
  %31 = bitcast float** %30 to i64*
  %32 = load i64, i64* %31, align 8
  %33 = ptrtoint float* %29 to i64
  %34 = sub i64 %32, %33
  %35 = ashr exact i64 %34, 2
  %36 = icmp eq i64 %34, 0
  %37 = select i1 %36, float* null, float* %29
  %38 = getelementptr inbounds %"class.webrtc::rnn_vad::GatedRecurrentLayer", %"class.webrtc::rnn_vad::GatedRecurrentLayer"* %0, i64 0, i32 4, i32 0, i32 0
  %39 = load float*, float** %38, align 8
  %40 = getelementptr inbounds %"class.webrtc::rnn_vad::GatedRecurrentLayer", %"class.webrtc::rnn_vad::GatedRecurrentLayer"* %0, i64 0, i32 4, i32 0, i32 1
  %41 = bitcast float** %40 to i64*
  %42 = load i64, i64* %41, align 8
  %43 = ptrtoint float* %39 to i64
  %44 = sub i64 %42, %43
  %45 = ashr exact i64 %44, 2
  %46 = icmp eq i64 %44, 0
  %47 = select i1 %46, float* null, float* %39
  %48 = getelementptr inbounds %"class.webrtc::rnn_vad::GatedRecurrentLayer", %"class.webrtc::rnn_vad::GatedRecurrentLayer"* %0, i64 0, i32 0
  %49 = load i32, i32* %48, align 8
  %50 = getelementptr inbounds %"class.webrtc::rnn_vad::GatedRecurrentLayer", %"class.webrtc::rnn_vad::GatedRecurrentLayer"* %0, i64 0, i32 1
  %51 = load i32, i32* %50, align 4
  %52 = mul nsw i32 %51, %49
  %53 = mul nsw i32 %51, %51
  %54 = getelementptr inbounds %"class.webrtc::rnn_vad::GatedRecurrentLayer", %"class.webrtc::rnn_vad::GatedRecurrentLayer"* %0, i64 0, i32 7, i32 0, i64 0
  %55 = sext i32 %51 to i64
  %56 = icmp eq i32 %51, 0
  %57 = bitcast %"struct.std::__1::array"* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 96, i8* nonnull %57) #9
  call void @llvm.memset.p0i8.i64(i8* nonnull align 4 %57, i8 -1, i64 96, i1 false)
  %58 = getelementptr inbounds %"class.webrtc::rnn_vad::GatedRecurrentLayer", %"class.webrtc::rnn_vad::GatedRecurrentLayer"* %0, i64 0, i32 5
  %59 = icmp eq i64 %2, 0
  %60 = select i1 %59, float* null, float* %1
  %61 = getelementptr inbounds %"class.rtc::ArrayView.1", %"class.rtc::ArrayView.1"* %7, i64 0, i32 0, i32 0
  %62 = select i1 %56, float* null, float* %54
  store float* %62, float** %61, align 8
  %63 = getelementptr inbounds %"class.rtc::ArrayView.1", %"class.rtc::ArrayView.1"* %7, i64 0, i32 0, i32 1
  store i64 %55, i64* %63, align 8
  br i1 %26, label %69, label %64

64:                                               ; preds = %3
  %65 = icmp ult i64 %25, %55
  %66 = select i1 %65, i64 %25, i64 %55
  %67 = icmp eq i64 %66, 0
  %68 = select i1 %67, float* null, float* %27
  br label %69

69:                                               ; preds = %3, %64
  %70 = phi i64 [ %66, %64 ], [ 0, %3 ]
  %71 = phi float* [ %68, %64 ], [ null, %3 ]
  %72 = getelementptr inbounds %"class.rtc::ArrayView.1", %"class.rtc::ArrayView.1"* %8, i64 0, i32 0, i32 0
  store float* %71, float** %72, align 8
  %73 = getelementptr inbounds %"class.rtc::ArrayView.1", %"class.rtc::ArrayView.1"* %8, i64 0, i32 0, i32 1
  store i64 %70, i64* %73, align 8
  %74 = sext i32 %52 to i64
  br i1 %36, label %80, label %75

75:                                               ; preds = %69
  %76 = icmp ult i64 %35, %74
  %77 = select i1 %76, i64 %35, i64 %74
  %78 = icmp eq i64 %77, 0
  %79 = select i1 %78, float* null, float* %37
  br label %80

80:                                               ; preds = %69, %75
  %81 = phi i64 [ %77, %75 ], [ 0, %69 ]
  %82 = phi float* [ %79, %75 ], [ null, %69 ]
  %83 = getelementptr inbounds %"class.rtc::ArrayView.1", %"class.rtc::ArrayView.1"* %9, i64 0, i32 0, i32 0
  store float* %82, float** %83, align 8
  %84 = getelementptr inbounds %"class.rtc::ArrayView.1", %"class.rtc::ArrayView.1"* %9, i64 0, i32 0, i32 1
  store i64 %81, i64* %84, align 8
  %85 = zext i32 %53 to i64
  br i1 %46, label %91, label %86

86:                                               ; preds = %80
  %87 = icmp ult i64 %45, %85
  %88 = select i1 %87, i64 %45, i64 %85
  %89 = icmp eq i64 %88, 0
  %90 = select i1 %89, float* null, float* %47
  br label %91

91:                                               ; preds = %80, %86
  %92 = phi i64 [ %88, %86 ], [ 0, %80 ]
  %93 = phi float* [ %90, %86 ], [ null, %80 ]
  %94 = getelementptr inbounds %"class.rtc::ArrayView.1", %"class.rtc::ArrayView.1"* %10, i64 0, i32 0, i32 0
  store float* %93, float** %94, align 8
  %95 = getelementptr inbounds %"class.rtc::ArrayView.1", %"class.rtc::ArrayView.1"* %10, i64 0, i32 0, i32 1
  store i64 %92, i64* %95, align 8
  %96 = getelementptr inbounds %"struct.std::__1::array", %"struct.std::__1::array"* %6, i64 0, i32 0, i64 0
  %97 = getelementptr inbounds %"class.rtc::ArrayView.3", %"class.rtc::ArrayView.3"* %11, i64 0, i32 0, i32 0
  store float* %96, float** %97, align 8
  %98 = getelementptr inbounds %"class.rtc::ArrayView.3", %"class.rtc::ArrayView.3"* %11, i64 0, i32 0, i32 1
  store i64 24, i64* %98, align 8
  call fastcc void @_ZN6webrtc7rnn_vad12_GLOBAL__N_122ComputeUpdateResetGateEiiRKNS0_10VectorMathEN3rtc9ArrayViewIKfLln4711EEES8_S8_S8_S8_NS6_IfLln4711EEE(i32 %49, i32 %51, %"class.webrtc::rnn_vad::VectorMath"* dereferenceable(3) %58, float* %60, i64 %2, %"class.rtc::ArrayView.1"* nonnull byval(%"class.rtc::ArrayView.1") align 8 %7, %"class.rtc::ArrayView.1"* nonnull byval(%"class.rtc::ArrayView.1") align 8 %8, %"class.rtc::ArrayView.1"* nonnull byval(%"class.rtc::ArrayView.1") align 8 %9, %"class.rtc::ArrayView.1"* nonnull byval(%"class.rtc::ArrayView.1") align 8 %10, %"class.rtc::ArrayView.3"* nonnull byval(%"class.rtc::ArrayView.3") align 8 %11)
  %99 = bitcast %"struct.std::__1::array"* %12 to i8*
  call void @llvm.lifetime.start.p0i8(i64 96, i8* nonnull %99) #9
  call void @llvm.memset.p0i8.i64(i8* nonnull align 4 %99, i8 -1, i64 96, i1 false)
  %100 = load i32, i32* %48, align 8
  %101 = load i32, i32* %50, align 4
  %102 = getelementptr inbounds %"class.rtc::ArrayView.1", %"class.rtc::ArrayView.1"* %13, i64 0, i32 0, i32 0
  store float* %62, float** %102, align 8
  %103 = getelementptr inbounds %"class.rtc::ArrayView.1", %"class.rtc::ArrayView.1"* %13, i64 0, i32 0, i32 1
  store i64 %55, i64* %103, align 8
  %104 = sext i32 %101 to i64
  %105 = icmp ugt i64 %25, %104
  br i1 %105, label %106, label %113

106:                                              ; preds = %91
  %107 = getelementptr inbounds float, float* %27, i64 %104
  %108 = sub nsw i64 %25, %104
  %109 = icmp ult i64 %108, %104
  %110 = select i1 %109, i64 %108, i64 %104
  %111 = icmp eq i64 %110, 0
  %112 = select i1 %111, float* null, float* %107
  br label %113

113:                                              ; preds = %91, %106
  %114 = phi i64 [ %110, %106 ], [ 0, %91 ]
  %115 = phi float* [ %112, %106 ], [ null, %91 ]
  %116 = getelementptr inbounds %"class.rtc::ArrayView.1", %"class.rtc::ArrayView.1"* %14, i64 0, i32 0, i32 0
  store float* %115, float** %116, align 8
  %117 = getelementptr inbounds %"class.rtc::ArrayView.1", %"class.rtc::ArrayView.1"* %14, i64 0, i32 0, i32 1
  store i64 %114, i64* %117, align 8
  %118 = icmp ugt i64 %35, %74
  br i1 %118, label %119, label %126

119:                                              ; preds = %113
  %120 = getelementptr inbounds float, float* %37, i64 %74
  %121 = sub nsw i64 %35, %74
  %122 = icmp ult i64 %121, %74
  %123 = select i1 %122, i64 %121, i64 %74
  %124 = icmp eq i64 %123, 0
  %125 = select i1 %124, float* null, float* %120
  br label %126

126:                                              ; preds = %113, %119
  %127 = phi i64 [ %123, %119 ], [ 0, %113 ]
  %128 = phi float* [ %125, %119 ], [ null, %113 ]
  %129 = getelementptr inbounds %"class.rtc::ArrayView.1", %"class.rtc::ArrayView.1"* %15, i64 0, i32 0, i32 0
  store float* %128, float** %129, align 8
  %130 = getelementptr inbounds %"class.rtc::ArrayView.1", %"class.rtc::ArrayView.1"* %15, i64 0, i32 0, i32 1
  store i64 %127, i64* %130, align 8
  %131 = icmp ugt i64 %45, %85
  br i1 %131, label %132, label %139

132:                                              ; preds = %126
  %133 = getelementptr inbounds float, float* %47, i64 %85
  %134 = sub nsw i64 %45, %85
  %135 = icmp ult i64 %134, %85
  %136 = select i1 %135, i64 %134, i64 %85
  %137 = icmp eq i64 %136, 0
  %138 = select i1 %137, float* null, float* %133
  br label %139

139:                                              ; preds = %126, %132
  %140 = phi i64 [ %136, %132 ], [ 0, %126 ]
  %141 = phi float* [ %138, %132 ], [ null, %126 ]
  %142 = getelementptr inbounds %"class.rtc::ArrayView.1", %"class.rtc::ArrayView.1"* %16, i64 0, i32 0, i32 0
  store float* %141, float** %142, align 8
  %143 = getelementptr inbounds %"class.rtc::ArrayView.1", %"class.rtc::ArrayView.1"* %16, i64 0, i32 0, i32 1
  store i64 %140, i64* %143, align 8
  %144 = getelementptr inbounds %"struct.std::__1::array", %"struct.std::__1::array"* %12, i64 0, i32 0, i64 0
  %145 = getelementptr inbounds %"class.rtc::ArrayView.3", %"class.rtc::ArrayView.3"* %17, i64 0, i32 0, i32 0
  store float* %144, float** %145, align 8
  %146 = getelementptr inbounds %"class.rtc::ArrayView.3", %"class.rtc::ArrayView.3"* %17, i64 0, i32 0, i32 1
  store i64 24, i64* %146, align 8
  call fastcc void @_ZN6webrtc7rnn_vad12_GLOBAL__N_122ComputeUpdateResetGateEiiRKNS0_10VectorMathEN3rtc9ArrayViewIKfLln4711EEES8_S8_S8_S8_NS6_IfLln4711EEE(i32 %100, i32 %101, %"class.webrtc::rnn_vad::VectorMath"* dereferenceable(3) %58, float* %60, i64 %2, %"class.rtc::ArrayView.1"* nonnull byval(%"class.rtc::ArrayView.1") align 8 %13, %"class.rtc::ArrayView.1"* nonnull byval(%"class.rtc::ArrayView.1") align 8 %14, %"class.rtc::ArrayView.1"* nonnull byval(%"class.rtc::ArrayView.1") align 8 %15, %"class.rtc::ArrayView.1"* nonnull byval(%"class.rtc::ArrayView.1") align 8 %16, %"class.rtc::ArrayView.3"* nonnull byval(%"class.rtc::ArrayView.3") align 8 %17)
  %147 = load i32, i32* %48, align 8
  %148 = load i32, i32* %50, align 4
  %149 = shl nsw i32 %148, 1
  %150 = sext i32 %149 to i64
  %151 = sext i32 %148 to i64
  %152 = icmp ugt i64 %25, %150
  br i1 %152, label %153, label %160

153:                                              ; preds = %139
  %154 = getelementptr inbounds float, float* %27, i64 %150
  %155 = sub nsw i64 %25, %150
  %156 = icmp ult i64 %155, %151
  %157 = select i1 %156, i64 %155, i64 %151
  %158 = icmp eq i64 %157, 0
  %159 = select i1 %158, float* null, float* %154
  br label %160

160:                                              ; preds = %139, %153
  %161 = phi float* [ %159, %153 ], [ null, %139 ]
  %162 = shl nsw i32 %52, 1
  %163 = sext i32 %162 to i64
  %164 = icmp ugt i64 %35, %163
  br i1 %164, label %165, label %172

165:                                              ; preds = %160
  %166 = getelementptr inbounds float, float* %37, i64 %163
  %167 = sub nsw i64 %35, %163
  %168 = icmp ult i64 %167, %74
  %169 = select i1 %168, i64 %167, i64 %74
  %170 = icmp eq i64 %169, 0
  %171 = select i1 %170, float* null, float* %166
  br label %172

172:                                              ; preds = %160, %165
  %173 = phi i64 [ %169, %165 ], [ 0, %160 ]
  %174 = phi float* [ %171, %165 ], [ null, %160 ]
  %175 = shl nuw nsw i32 %53, 1
  %176 = zext i32 %175 to i64
  %177 = icmp ugt i64 %45, %176
  br i1 %177, label %178, label %185

178:                                              ; preds = %172
  %179 = getelementptr inbounds float, float* %47, i64 %176
  %180 = sub nsw i64 %45, %176
  %181 = icmp ult i64 %180, %85
  %182 = select i1 %181, i64 %180, i64 %85
  %183 = icmp eq i64 %182, 0
  %184 = select i1 %183, float* null, float* %179
  br label %185

185:                                              ; preds = %172, %178
  %186 = phi i64 [ %182, %178 ], [ 0, %172 ]
  %187 = phi float* [ %184, %178 ], [ null, %172 ]
  %188 = bitcast %"struct.std::__1::array"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 96, i8* nonnull %188) #9
  call void @llvm.memset.p0i8.i64(i8* nonnull align 4 %188, i8 -1, i64 96, i1 false) #9
  %189 = icmp sgt i32 %148, 0
  br i1 %189, label %190, label %742

190:                                              ; preds = %185
  %191 = zext i32 %148 to i64
  %192 = icmp ult i32 %148, 8
  br i1 %192, label %193, label %195

193:                                              ; preds = %269, %190
  %194 = phi i64 [ 0, %190 ], [ %196, %269 ]
  br label %331

195:                                              ; preds = %190
  %196 = and i64 %191, 4294967288
  %197 = add nsw i64 %196, -8
  %198 = lshr exact i64 %197, 3
  %199 = add nuw nsw i64 %198, 1
  %200 = and i64 %199, 1
  %201 = icmp eq i64 %197, 0
  br i1 %201, label %247, label %202

202:                                              ; preds = %195
  %203 = sub nuw nsw i64 %199, %200
  br label %204

204:                                              ; preds = %204, %202
  %205 = phi i64 [ 0, %202 ], [ %244, %204 ]
  %206 = phi i64 [ %203, %202 ], [ %245, %204 ]
  %207 = getelementptr inbounds float, float* %62, i64 %205
  %208 = bitcast float* %207 to <4 x float>*
  %209 = load <4 x float>, <4 x float>* %208, align 4
  %210 = getelementptr inbounds float, float* %207, i64 4
  %211 = bitcast float* %210 to <4 x float>*
  %212 = load <4 x float>, <4 x float>* %211, align 4
  %213 = getelementptr inbounds %"struct.std::__1::array", %"struct.std::__1::array"* %12, i64 0, i32 0, i64 %205
  %214 = bitcast float* %213 to <4 x float>*
  %215 = load <4 x float>, <4 x float>* %214, align 4
  %216 = getelementptr inbounds float, float* %213, i64 4
  %217 = bitcast float* %216 to <4 x float>*
  %218 = load <4 x float>, <4 x float>* %217, align 4
  %219 = fmul <4 x float> %209, %215
  %220 = fmul <4 x float> %212, %218
  %221 = getelementptr inbounds %"struct.std::__1::array", %"struct.std::__1::array"* %5, i64 0, i32 0, i64 %205
  %222 = bitcast float* %221 to <4 x float>*
  store <4 x float> %219, <4 x float>* %222, align 4
  %223 = getelementptr inbounds float, float* %221, i64 4
  %224 = bitcast float* %223 to <4 x float>*
  store <4 x float> %220, <4 x float>* %224, align 4
  %225 = or i64 %205, 8
  %226 = getelementptr inbounds float, float* %62, i64 %225
  %227 = bitcast float* %226 to <4 x float>*
  %228 = load <4 x float>, <4 x float>* %227, align 4
  %229 = getelementptr inbounds float, float* %226, i64 4
  %230 = bitcast float* %229 to <4 x float>*
  %231 = load <4 x float>, <4 x float>* %230, align 4
  %232 = getelementptr inbounds %"struct.std::__1::array", %"struct.std::__1::array"* %12, i64 0, i32 0, i64 %225
  %233 = bitcast float* %232 to <4 x float>*
  %234 = load <4 x float>, <4 x float>* %233, align 4
  %235 = getelementptr inbounds float, float* %232, i64 4
  %236 = bitcast float* %235 to <4 x float>*
  %237 = load <4 x float>, <4 x float>* %236, align 4
  %238 = fmul <4 x float> %228, %234
  %239 = fmul <4 x float> %231, %237
  %240 = getelementptr inbounds %"struct.std::__1::array", %"struct.std::__1::array"* %5, i64 0, i32 0, i64 %225
  %241 = bitcast float* %240 to <4 x float>*
  store <4 x float> %238, <4 x float>* %241, align 4
  %242 = getelementptr inbounds float, float* %240, i64 4
  %243 = bitcast float* %242 to <4 x float>*
  store <4 x float> %239, <4 x float>* %243, align 4
  %244 = add i64 %205, 16
  %245 = add i64 %206, -2
  %246 = icmp eq i64 %245, 0
  br i1 %246, label %247, label %204, !llvm.loop !2

247:                                              ; preds = %204, %195
  %248 = phi i64 [ 0, %195 ], [ %244, %204 ]
  %249 = icmp eq i64 %200, 0
  br i1 %249, label %269, label %250

250:                                              ; preds = %247
  %251 = getelementptr inbounds float, float* %62, i64 %248
  %252 = bitcast float* %251 to <4 x float>*
  %253 = load <4 x float>, <4 x float>* %252, align 4
  %254 = getelementptr inbounds float, float* %251, i64 4
  %255 = bitcast float* %254 to <4 x float>*
  %256 = load <4 x float>, <4 x float>* %255, align 4
  %257 = getelementptr inbounds %"struct.std::__1::array", %"struct.std::__1::array"* %12, i64 0, i32 0, i64 %248
  %258 = bitcast float* %257 to <4 x float>*
  %259 = load <4 x float>, <4 x float>* %258, align 4
  %260 = getelementptr inbounds float, float* %257, i64 4
  %261 = bitcast float* %260 to <4 x float>*
  %262 = load <4 x float>, <4 x float>* %261, align 4
  %263 = fmul <4 x float> %253, %259
  %264 = fmul <4 x float> %256, %262
  %265 = getelementptr inbounds %"struct.std::__1::array", %"struct.std::__1::array"* %5, i64 0, i32 0, i64 %248
  %266 = bitcast float* %265 to <4 x float>*
  store <4 x float> %263, <4 x float>* %266, align 4
  %267 = getelementptr inbounds float, float* %265, i64 4
  %268 = bitcast float* %267 to <4 x float>*
  store <4 x float> %264, <4 x float>* %268, align 4
  br label %269

269:                                              ; preds = %247, %250
  %270 = icmp eq i64 %196, %191
  br i1 %270, label %271, label %193

271:                                              ; preds = %331, %269
  %272 = sext i32 %147 to i64
  %273 = getelementptr inbounds %"class.webrtc::rnn_vad::GatedRecurrentLayer", %"class.webrtc::rnn_vad::GatedRecurrentLayer"* %0, i64 0, i32 5, i32 0, i32 1
  %274 = getelementptr inbounds %"class.webrtc::rnn_vad::VectorMath", %"class.webrtc::rnn_vad::VectorMath"* %58, i64 0, i32 0, i32 0
  %275 = trunc i64 %2 to i32
  %276 = and i32 %275, -4
  %277 = icmp sgt i32 %276, 0
  %278 = sext i32 %276 to i64
  %279 = icmp slt i32 %276, %275
  %280 = shl i64 %2, 32
  %281 = ashr exact i64 %280, 32
  %282 = getelementptr inbounds float, float* %60, i64 %2
  %283 = getelementptr inbounds %"struct.std::__1::array", %"struct.std::__1::array"* %5, i64 0, i32 0, i64 0
  %284 = and i32 %148, -4
  %285 = icmp sgt i32 %284, 0
  %286 = sext i32 %284 to i64
  %287 = icmp slt i32 %284, %148
  %288 = getelementptr inbounds %"struct.std::__1::array", %"struct.std::__1::array"* %5, i64 0, i32 0, i64 %151
  %289 = add nsw i64 %278, -1
  %290 = lshr i64 %289, 2
  %291 = add nuw nsw i64 %290, 1
  %292 = shl i64 %2, 32
  %293 = ashr exact i64 %292, 32
  %294 = xor i64 %278, -1
  %295 = add nsw i64 %293, %294
  %296 = add i64 %2, -1
  %297 = getelementptr float, float* %60, i64 %296
  %298 = ptrtoint float* %297 to i64
  %299 = sub i64 %298, %4
  %300 = lshr i64 %299, 2
  %301 = add nuw nsw i64 %300, 1
  %302 = add nsw i64 %286, -1
  %303 = lshr i64 %302, 2
  %304 = add nuw nsw i64 %303, 1
  %305 = xor i64 %286, -1
  %306 = add nsw i64 %305, %151
  %307 = shl nsw i64 %151, 2
  %308 = add nsw i64 %307, -4
  %309 = lshr exact i64 %308, 2
  %310 = add nuw nsw i64 %309, 1
  %311 = and i64 %291, 3
  %312 = icmp ult i64 %289, 12
  %313 = sub nsw i64 %291, %311
  %314 = icmp eq i64 %311, 0
  %315 = and i64 %293, 3
  %316 = icmp eq i64 %315, 0
  %317 = icmp ult i64 %295, 3
  %318 = and i64 %301, 3
  %319 = icmp eq i64 %318, 0
  %320 = icmp ult i64 %299, 12
  %321 = and i64 %304, 3
  %322 = icmp ult i64 %302, 12
  %323 = sub nsw i64 %304, %321
  %324 = icmp eq i64 %321, 0
  %325 = and i64 %151, 3
  %326 = icmp eq i64 %325, 0
  %327 = icmp ult i64 %306, 3
  %328 = and i64 %310, 3
  %329 = icmp eq i64 %328, 0
  %330 = icmp ult i64 %308, 12
  br label %341

331:                                              ; preds = %193, %331
  %332 = phi i64 [ %339, %331 ], [ %194, %193 ]
  %333 = getelementptr inbounds float, float* %62, i64 %332
  %334 = load float, float* %333, align 4
  %335 = getelementptr inbounds %"struct.std::__1::array", %"struct.std::__1::array"* %12, i64 0, i32 0, i64 %332
  %336 = load float, float* %335, align 4
  %337 = fmul float %334, %336
  %338 = getelementptr inbounds %"struct.std::__1::array", %"struct.std::__1::array"* %5, i64 0, i32 0, i64 %332
  store float %337, float* %338, align 4
  %339 = add nuw nsw i64 %332, 1
  %340 = icmp eq i64 %339, %191
  br i1 %340, label %271, label %331, !llvm.loop !4

341:                                              ; preds = %727, %271
  %342 = phi i64 [ 0, %271 ], [ %740, %727 ]
  %343 = getelementptr inbounds float, float* %161, i64 %342
  %344 = load float, float* %343, align 4
  %345 = mul nsw i64 %342, %272
  %346 = icmp ugt i64 %173, %345
  br i1 %346, label %347, label %354

347:                                              ; preds = %341
  %348 = getelementptr inbounds float, float* %174, i64 %345
  %349 = sub i64 %173, %345
  %350 = icmp ult i64 %349, %272
  %351 = select i1 %350, i64 %349, i64 %272
  %352 = icmp eq i64 %351, 0
  %353 = select i1 %352, float* null, float* %348
  br label %354

354:                                              ; preds = %347, %341
  %355 = phi i64 [ %351, %347 ], [ 0, %341 ]
  %356 = phi float* [ %353, %347 ], [ null, %341 ]
  %357 = load i8, i8* %273, align 1, !range !6
  %358 = icmp eq i8 %357, 0
  br i1 %358, label %363, label %359

359:                                              ; preds = %354
  %360 = icmp eq i64 %355, 0
  %361 = select i1 %360, float* null, float* %356
  %362 = call float @_ZNK6webrtc7rnn_vad10VectorMath14DotProductAvx2EN3rtc9ArrayViewIKfLln4711EEES5_(%"class.webrtc::rnn_vad::VectorMath"* %58, float* %60, i64 %2, float* %361, i64 %355) #9
  br label %535

363:                                              ; preds = %354
  %364 = load i8, i8* %274, align 1, !range !6
  %365 = icmp eq i8 %364, 0
  br i1 %365, label %486, label %366

366:                                              ; preds = %363
  br i1 %277, label %367, label %387

367:                                              ; preds = %366
  br i1 %312, label %368, label %412

368:                                              ; preds = %412, %367
  %369 = phi <4 x float> [ undef, %367 ], [ %450, %412 ]
  %370 = phi i64 [ 0, %367 ], [ %451, %412 ]
  %371 = phi <4 x float> [ zeroinitializer, %367 ], [ %450, %412 ]
  br i1 %314, label %387, label %372

372:                                              ; preds = %368, %372
  %373 = phi i64 [ %384, %372 ], [ %370, %368 ]
  %374 = phi <4 x float> [ %383, %372 ], [ %371, %368 ]
  %375 = phi i64 [ %385, %372 ], [ %311, %368 ]
  %376 = getelementptr inbounds float, float* %60, i64 %373
  %377 = bitcast float* %376 to <4 x float>*
  %378 = load <4 x float>, <4 x float>* %377, align 1
  %379 = getelementptr inbounds float, float* %356, i64 %373
  %380 = bitcast float* %379 to <4 x float>*
  %381 = load <4 x float>, <4 x float>* %380, align 1
  %382 = fmul <4 x float> %378, %381
  %383 = fadd <4 x float> %374, %382
  %384 = add nuw nsw i64 %373, 4
  %385 = add i64 %375, -1
  %386 = icmp eq i64 %385, 0
  br i1 %386, label %387, label %372, !llvm.loop !7

387:                                              ; preds = %368, %372, %366
  %388 = phi <4 x float> [ zeroinitializer, %366 ], [ %369, %368 ], [ %383, %372 ]
  %389 = shufflevector <4 x float> %388, <4 x float> undef, <4 x i32> <i32 2, i32 3, i32 2, i32 3>
  %390 = fadd <4 x float> %388, %389
  %391 = shufflevector <4 x float> %390, <4 x float> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %392 = fadd <4 x float> %390, %391
  %393 = extractelement <4 x float> %392, i32 0
  br i1 %279, label %394, label %535

394:                                              ; preds = %387
  br i1 %316, label %408, label %395

395:                                              ; preds = %394, %395
  %396 = phi i64 [ %405, %395 ], [ %278, %394 ]
  %397 = phi float [ %404, %395 ], [ %393, %394 ]
  %398 = phi i64 [ %406, %395 ], [ %315, %394 ]
  %399 = getelementptr inbounds float, float* %60, i64 %396
  %400 = load float, float* %399, align 4
  %401 = getelementptr inbounds float, float* %356, i64 %396
  %402 = load float, float* %401, align 4
  %403 = fmul float %400, %402
  %404 = fadd float %397, %403
  %405 = add nsw i64 %396, 1
  %406 = add i64 %398, -1
  %407 = icmp eq i64 %406, 0
  br i1 %407, label %408, label %395, !llvm.loop !9

408:                                              ; preds = %395, %394
  %409 = phi float [ undef, %394 ], [ %404, %395 ]
  %410 = phi i64 [ %278, %394 ], [ %405, %395 ]
  %411 = phi float [ %393, %394 ], [ %404, %395 ]
  br i1 %317, label %535, label %454

412:                                              ; preds = %367, %412
  %413 = phi i64 [ %451, %412 ], [ 0, %367 ]
  %414 = phi <4 x float> [ %450, %412 ], [ zeroinitializer, %367 ]
  %415 = phi i64 [ %452, %412 ], [ %313, %367 ]
  %416 = getelementptr inbounds float, float* %60, i64 %413
  %417 = bitcast float* %416 to <4 x float>*
  %418 = load <4 x float>, <4 x float>* %417, align 1
  %419 = getelementptr inbounds float, float* %356, i64 %413
  %420 = bitcast float* %419 to <4 x float>*
  %421 = load <4 x float>, <4 x float>* %420, align 1
  %422 = fmul <4 x float> %418, %421
  %423 = fadd <4 x float> %414, %422
  %424 = or i64 %413, 4
  %425 = getelementptr inbounds float, float* %60, i64 %424
  %426 = bitcast float* %425 to <4 x float>*
  %427 = load <4 x float>, <4 x float>* %426, align 1
  %428 = getelementptr inbounds float, float* %356, i64 %424
  %429 = bitcast float* %428 to <4 x float>*
  %430 = load <4 x float>, <4 x float>* %429, align 1
  %431 = fmul <4 x float> %427, %430
  %432 = fadd <4 x float> %423, %431
  %433 = or i64 %413, 8
  %434 = getelementptr inbounds float, float* %60, i64 %433
  %435 = bitcast float* %434 to <4 x float>*
  %436 = load <4 x float>, <4 x float>* %435, align 1
  %437 = getelementptr inbounds float, float* %356, i64 %433
  %438 = bitcast float* %437 to <4 x float>*
  %439 = load <4 x float>, <4 x float>* %438, align 1
  %440 = fmul <4 x float> %436, %439
  %441 = fadd <4 x float> %432, %440
  %442 = or i64 %413, 12
  %443 = getelementptr inbounds float, float* %60, i64 %442
  %444 = bitcast float* %443 to <4 x float>*
  %445 = load <4 x float>, <4 x float>* %444, align 1
  %446 = getelementptr inbounds float, float* %356, i64 %442
  %447 = bitcast float* %446 to <4 x float>*
  %448 = load <4 x float>, <4 x float>* %447, align 1
  %449 = fmul <4 x float> %445, %448
  %450 = fadd <4 x float> %441, %449
  %451 = add nuw nsw i64 %413, 16
  %452 = add i64 %415, -4
  %453 = icmp eq i64 %452, 0
  br i1 %453, label %368, label %412

454:                                              ; preds = %408, %454
  %455 = phi i64 [ %484, %454 ], [ %410, %408 ]
  %456 = phi float [ %483, %454 ], [ %411, %408 ]
  %457 = getelementptr inbounds float, float* %60, i64 %455
  %458 = load float, float* %457, align 4
  %459 = getelementptr inbounds float, float* %356, i64 %455
  %460 = load float, float* %459, align 4
  %461 = fmul float %458, %460
  %462 = fadd float %456, %461
  %463 = add nsw i64 %455, 1
  %464 = getelementptr inbounds float, float* %60, i64 %463
  %465 = load float, float* %464, align 4
  %466 = getelementptr inbounds float, float* %356, i64 %463
  %467 = load float, float* %466, align 4
  %468 = fmul float %465, %467
  %469 = fadd float %462, %468
  %470 = add nsw i64 %455, 2
  %471 = getelementptr inbounds float, float* %60, i64 %470
  %472 = load float, float* %471, align 4
  %473 = getelementptr inbounds float, float* %356, i64 %470
  %474 = load float, float* %473, align 4
  %475 = fmul float %472, %474
  %476 = fadd float %469, %475
  %477 = add nsw i64 %455, 3
  %478 = getelementptr inbounds float, float* %60, i64 %477
  %479 = load float, float* %478, align 4
  %480 = getelementptr inbounds float, float* %356, i64 %477
  %481 = load float, float* %480, align 4
  %482 = fmul float %479, %481
  %483 = fadd float %476, %482
  %484 = add nsw i64 %455, 4
  %485 = icmp eq i64 %484, %281
  br i1 %485, label %535, label %454

486:                                              ; preds = %363
  br i1 %59, label %535, label %487

487:                                              ; preds = %486
  br i1 %319, label %501, label %488

488:                                              ; preds = %487, %488
  %489 = phi float [ %496, %488 ], [ 0.000000e+00, %487 ]
  %490 = phi float* [ %498, %488 ], [ %356, %487 ]
  %491 = phi float* [ %497, %488 ], [ %1, %487 ]
  %492 = phi i64 [ %499, %488 ], [ %318, %487 ]
  %493 = load float, float* %491, align 4
  %494 = load float, float* %490, align 4
  %495 = fmul float %493, %494
  %496 = fadd float %489, %495
  %497 = getelementptr inbounds float, float* %491, i64 1
  %498 = getelementptr inbounds float, float* %490, i64 1
  %499 = add i64 %492, -1
  %500 = icmp eq i64 %499, 0
  br i1 %500, label %501, label %488, !llvm.loop !10

501:                                              ; preds = %488, %487
  %502 = phi float [ undef, %487 ], [ %496, %488 ]
  %503 = phi float [ 0.000000e+00, %487 ], [ %496, %488 ]
  %504 = phi float* [ %356, %487 ], [ %498, %488 ]
  %505 = phi float* [ %1, %487 ], [ %497, %488 ]
  br i1 %320, label %535, label %506

506:                                              ; preds = %501, %506
  %507 = phi float [ %531, %506 ], [ %503, %501 ]
  %508 = phi float* [ %533, %506 ], [ %504, %501 ]
  %509 = phi float* [ %532, %506 ], [ %505, %501 ]
  %510 = load float, float* %509, align 4
  %511 = load float, float* %508, align 4
  %512 = fmul float %510, %511
  %513 = fadd float %507, %512
  %514 = getelementptr inbounds float, float* %509, i64 1
  %515 = getelementptr inbounds float, float* %508, i64 1
  %516 = load float, float* %514, align 4
  %517 = load float, float* %515, align 4
  %518 = fmul float %516, %517
  %519 = fadd float %513, %518
  %520 = getelementptr inbounds float, float* %509, i64 2
  %521 = getelementptr inbounds float, float* %508, i64 2
  %522 = load float, float* %520, align 4
  %523 = load float, float* %521, align 4
  %524 = fmul float %522, %523
  %525 = fadd float %519, %524
  %526 = getelementptr inbounds float, float* %509, i64 3
  %527 = getelementptr inbounds float, float* %508, i64 3
  %528 = load float, float* %526, align 4
  %529 = load float, float* %527, align 4
  %530 = fmul float %528, %529
  %531 = fadd float %525, %530
  %532 = getelementptr inbounds float, float* %509, i64 4
  %533 = getelementptr inbounds float, float* %508, i64 4
  %534 = icmp eq float* %532, %282
  br i1 %534, label %535, label %506

535:                                              ; preds = %408, %454, %501, %506, %486, %387, %359
  %536 = phi float [ %362, %359 ], [ 0.000000e+00, %486 ], [ %393, %387 ], [ %502, %501 ], [ %531, %506 ], [ %409, %408 ], [ %483, %454 ]
  %537 = fadd float %344, %536
  %538 = mul nsw i64 %342, %151
  %539 = icmp ugt i64 %186, %538
  br i1 %539, label %540, label %547

540:                                              ; preds = %535
  %541 = getelementptr inbounds float, float* %187, i64 %538
  %542 = sub i64 %186, %538
  %543 = icmp ult i64 %542, %151
  %544 = select i1 %543, i64 %542, i64 %151
  %545 = icmp eq i64 %544, 0
  %546 = select i1 %545, float* null, float* %541
  br label %547

547:                                              ; preds = %540, %535
  %548 = phi i64 [ %544, %540 ], [ 0, %535 ]
  %549 = phi float* [ %546, %540 ], [ null, %535 ]
  %550 = load i8, i8* %273, align 1, !range !6
  %551 = icmp eq i8 %550, 0
  br i1 %551, label %556, label %552

552:                                              ; preds = %547
  %553 = icmp eq i64 %548, 0
  %554 = select i1 %553, float* null, float* %549
  %555 = call float @_ZNK6webrtc7rnn_vad10VectorMath14DotProductAvx2EN3rtc9ArrayViewIKfLln4711EEES5_(%"class.webrtc::rnn_vad::VectorMath"* %58, float* nonnull %283, i64 %151, float* %554, i64 %548) #9
  br label %727

556:                                              ; preds = %547
  %557 = load i8, i8* %274, align 1, !range !6
  %558 = icmp eq i8 %557, 0
  br i1 %558, label %559, label %578

559:                                              ; preds = %556
  br i1 %329, label %573, label %560

560:                                              ; preds = %559, %560
  %561 = phi float [ %568, %560 ], [ 0.000000e+00, %559 ]
  %562 = phi float* [ %570, %560 ], [ %549, %559 ]
  %563 = phi float* [ %569, %560 ], [ %283, %559 ]
  %564 = phi i64 [ %571, %560 ], [ %328, %559 ]
  %565 = load float, float* %563, align 4
  %566 = load float, float* %562, align 4
  %567 = fmul float %565, %566
  %568 = fadd float %561, %567
  %569 = getelementptr inbounds float, float* %563, i64 1
  %570 = getelementptr inbounds float, float* %562, i64 1
  %571 = add i64 %564, -1
  %572 = icmp eq i64 %571, 0
  br i1 %572, label %573, label %560, !llvm.loop !11

573:                                              ; preds = %560, %559
  %574 = phi float [ undef, %559 ], [ %568, %560 ]
  %575 = phi float [ 0.000000e+00, %559 ], [ %568, %560 ]
  %576 = phi float* [ %549, %559 ], [ %570, %560 ]
  %577 = phi float* [ %283, %559 ], [ %569, %560 ]
  br i1 %330, label %727, label %698

578:                                              ; preds = %556
  br i1 %285, label %579, label %599

579:                                              ; preds = %578
  br i1 %322, label %580, label %624

580:                                              ; preds = %624, %579
  %581 = phi <4 x float> [ undef, %579 ], [ %662, %624 ]
  %582 = phi i64 [ 0, %579 ], [ %663, %624 ]
  %583 = phi <4 x float> [ zeroinitializer, %579 ], [ %662, %624 ]
  br i1 %324, label %599, label %584

584:                                              ; preds = %580, %584
  %585 = phi i64 [ %596, %584 ], [ %582, %580 ]
  %586 = phi <4 x float> [ %595, %584 ], [ %583, %580 ]
  %587 = phi i64 [ %597, %584 ], [ %321, %580 ]
  %588 = getelementptr inbounds %"struct.std::__1::array", %"struct.std::__1::array"* %5, i64 0, i32 0, i64 %585
  %589 = bitcast float* %588 to <4 x float>*
  %590 = load <4 x float>, <4 x float>* %589, align 4
  %591 = getelementptr inbounds float, float* %549, i64 %585
  %592 = bitcast float* %591 to <4 x float>*
  %593 = load <4 x float>, <4 x float>* %592, align 1
  %594 = fmul <4 x float> %590, %593
  %595 = fadd <4 x float> %586, %594
  %596 = add nuw nsw i64 %585, 4
  %597 = add i64 %587, -1
  %598 = icmp eq i64 %597, 0
  br i1 %598, label %599, label %584, !llvm.loop !12

599:                                              ; preds = %580, %584, %578
  %600 = phi <4 x float> [ zeroinitializer, %578 ], [ %581, %580 ], [ %595, %584 ]
  %601 = shufflevector <4 x float> %600, <4 x float> undef, <4 x i32> <i32 2, i32 3, i32 2, i32 3>
  %602 = fadd <4 x float> %600, %601
  %603 = shufflevector <4 x float> %602, <4 x float> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %604 = fadd <4 x float> %602, %603
  %605 = extractelement <4 x float> %604, i32 0
  br i1 %287, label %606, label %727

606:                                              ; preds = %599
  br i1 %326, label %620, label %607

607:                                              ; preds = %606, %607
  %608 = phi i64 [ %617, %607 ], [ %286, %606 ]
  %609 = phi float [ %616, %607 ], [ %605, %606 ]
  %610 = phi i64 [ %618, %607 ], [ %325, %606 ]
  %611 = getelementptr inbounds %"struct.std::__1::array", %"struct.std::__1::array"* %5, i64 0, i32 0, i64 %608
  %612 = load float, float* %611, align 4
  %613 = getelementptr inbounds float, float* %549, i64 %608
  %614 = load float, float* %613, align 4
  %615 = fmul float %612, %614
  %616 = fadd float %609, %615
  %617 = add nsw i64 %608, 1
  %618 = add i64 %610, -1
  %619 = icmp eq i64 %618, 0
  br i1 %619, label %620, label %607, !llvm.loop !13

620:                                              ; preds = %607, %606
  %621 = phi float [ undef, %606 ], [ %616, %607 ]
  %622 = phi i64 [ %286, %606 ], [ %617, %607 ]
  %623 = phi float [ %605, %606 ], [ %616, %607 ]
  br i1 %327, label %727, label %666

624:                                              ; preds = %579, %624
  %625 = phi i64 [ %663, %624 ], [ 0, %579 ]
  %626 = phi <4 x float> [ %662, %624 ], [ zeroinitializer, %579 ]
  %627 = phi i64 [ %664, %624 ], [ %323, %579 ]
  %628 = getelementptr inbounds %"struct.std::__1::array", %"struct.std::__1::array"* %5, i64 0, i32 0, i64 %625
  %629 = bitcast float* %628 to <4 x float>*
  %630 = load <4 x float>, <4 x float>* %629, align 4
  %631 = getelementptr inbounds float, float* %549, i64 %625
  %632 = bitcast float* %631 to <4 x float>*
  %633 = load <4 x float>, <4 x float>* %632, align 1
  %634 = fmul <4 x float> %630, %633
  %635 = fadd <4 x float> %626, %634
  %636 = or i64 %625, 4
  %637 = getelementptr inbounds %"struct.std::__1::array", %"struct.std::__1::array"* %5, i64 0, i32 0, i64 %636
  %638 = bitcast float* %637 to <4 x float>*
  %639 = load <4 x float>, <4 x float>* %638, align 4
  %640 = getelementptr inbounds float, float* %549, i64 %636
  %641 = bitcast float* %640 to <4 x float>*
  %642 = load <4 x float>, <4 x float>* %641, align 1
  %643 = fmul <4 x float> %639, %642
  %644 = fadd <4 x float> %635, %643
  %645 = or i64 %625, 8
  %646 = getelementptr inbounds %"struct.std::__1::array", %"struct.std::__1::array"* %5, i64 0, i32 0, i64 %645
  %647 = bitcast float* %646 to <4 x float>*
  %648 = load <4 x float>, <4 x float>* %647, align 4
  %649 = getelementptr inbounds float, float* %549, i64 %645
  %650 = bitcast float* %649 to <4 x float>*
  %651 = load <4 x float>, <4 x float>* %650, align 1
  %652 = fmul <4 x float> %648, %651
  %653 = fadd <4 x float> %644, %652
  %654 = or i64 %625, 12
  %655 = getelementptr inbounds %"struct.std::__1::array", %"struct.std::__1::array"* %5, i64 0, i32 0, i64 %654
  %656 = bitcast float* %655 to <4 x float>*
  %657 = load <4 x float>, <4 x float>* %656, align 4
  %658 = getelementptr inbounds float, float* %549, i64 %654
  %659 = bitcast float* %658 to <4 x float>*
  %660 = load <4 x float>, <4 x float>* %659, align 1
  %661 = fmul <4 x float> %657, %660
  %662 = fadd <4 x float> %653, %661
  %663 = add nuw nsw i64 %625, 16
  %664 = add i64 %627, -4
  %665 = icmp eq i64 %664, 0
  br i1 %665, label %580, label %624

666:                                              ; preds = %620, %666
  %667 = phi i64 [ %696, %666 ], [ %622, %620 ]
  %668 = phi float [ %695, %666 ], [ %623, %620 ]
  %669 = getelementptr inbounds %"struct.std::__1::array", %"struct.std::__1::array"* %5, i64 0, i32 0, i64 %667
  %670 = load float, float* %669, align 4
  %671 = getelementptr inbounds float, float* %549, i64 %667
  %672 = load float, float* %671, align 4
  %673 = fmul float %670, %672
  %674 = fadd float %668, %673
  %675 = add nsw i64 %667, 1
  %676 = getelementptr inbounds %"struct.std::__1::array", %"struct.std::__1::array"* %5, i64 0, i32 0, i64 %675
  %677 = load float, float* %676, align 4
  %678 = getelementptr inbounds float, float* %549, i64 %675
  %679 = load float, float* %678, align 4
  %680 = fmul float %677, %679
  %681 = fadd float %674, %680
  %682 = add nsw i64 %667, 2
  %683 = getelementptr inbounds %"struct.std::__1::array", %"struct.std::__1::array"* %5, i64 0, i32 0, i64 %682
  %684 = load float, float* %683, align 4
  %685 = getelementptr inbounds float, float* %549, i64 %682
  %686 = load float, float* %685, align 4
  %687 = fmul float %684, %686
  %688 = fadd float %681, %687
  %689 = add nsw i64 %667, 3
  %690 = getelementptr inbounds %"struct.std::__1::array", %"struct.std::__1::array"* %5, i64 0, i32 0, i64 %689
  %691 = load float, float* %690, align 4
  %692 = getelementptr inbounds float, float* %549, i64 %689
  %693 = load float, float* %692, align 4
  %694 = fmul float %691, %693
  %695 = fadd float %688, %694
  %696 = add nsw i64 %667, 4
  %697 = icmp eq i64 %696, %151
  br i1 %697, label %727, label %666

698:                                              ; preds = %573, %698
  %699 = phi float [ %723, %698 ], [ %575, %573 ]
  %700 = phi float* [ %725, %698 ], [ %576, %573 ]
  %701 = phi float* [ %724, %698 ], [ %577, %573 ]
  %702 = load float, float* %701, align 4
  %703 = load float, float* %700, align 4
  %704 = fmul float %702, %703
  %705 = fadd float %699, %704
  %706 = getelementptr inbounds float, float* %701, i64 1
  %707 = getelementptr inbounds float, float* %700, i64 1
  %708 = load float, float* %706, align 4
  %709 = load float, float* %707, align 4
  %710 = fmul float %708, %709
  %711 = fadd float %705, %710
  %712 = getelementptr inbounds float, float* %701, i64 2
  %713 = getelementptr inbounds float, float* %700, i64 2
  %714 = load float, float* %712, align 4
  %715 = load float, float* %713, align 4
  %716 = fmul float %714, %715
  %717 = fadd float %711, %716
  %718 = getelementptr inbounds float, float* %701, i64 3
  %719 = getelementptr inbounds float, float* %700, i64 3
  %720 = load float, float* %718, align 4
  %721 = load float, float* %719, align 4
  %722 = fmul float %720, %721
  %723 = fadd float %717, %722
  %724 = getelementptr inbounds float, float* %701, i64 4
  %725 = getelementptr inbounds float, float* %700, i64 4
  %726 = icmp eq float* %724, %288
  br i1 %726, label %727, label %698

727:                                              ; preds = %620, %666, %573, %698, %599, %552
  %728 = phi float [ %555, %552 ], [ %605, %599 ], [ %574, %573 ], [ %723, %698 ], [ %621, %620 ], [ %695, %666 ]
  %729 = fadd float %537, %728
  %730 = getelementptr inbounds %"struct.std::__1::array", %"struct.std::__1::array"* %6, i64 0, i32 0, i64 %342
  %731 = load float, float* %730, align 4
  %732 = getelementptr inbounds float, float* %62, i64 %342
  %733 = load float, float* %732, align 4
  %734 = fmul float %731, %733
  %735 = fsub float 1.000000e+00, %731
  %736 = fcmp ogt float %729, 0.000000e+00
  %737 = select i1 %736, float %729, float 0.000000e+00
  %738 = fmul float %735, %737
  %739 = fadd float %734, %738
  store float %739, float* %732, align 4
  %740 = add nuw nsw i64 %342, 1
  %741 = icmp eq i64 %740, %191
  br i1 %741, label %742, label %341

742:                                              ; preds = %727, %185
  call void @llvm.lifetime.end.p0i8(i64 96, i8* nonnull %188) #9
  call void @llvm.lifetime.end.p0i8(i64 96, i8* nonnull %99) #9
  call void @llvm.lifetime.end.p0i8(i64 96, i8* nonnull %57) #9
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #2

; Function Attrs: nounwind ssp uwtable
define internal fastcc void @_ZN6webrtc7rnn_vad12_GLOBAL__N_122ComputeUpdateResetGateEiiRKNS0_10VectorMathEN3rtc9ArrayViewIKfLln4711EEES8_S8_S8_S8_NS6_IfLln4711EEE(i32, i32, %"class.webrtc::rnn_vad::VectorMath"* dereferenceable(3), float*, i64, %"class.rtc::ArrayView.1"* nocapture readonly byval(%"class.rtc::ArrayView.1") align 8, %"class.rtc::ArrayView.1"* nocapture readonly byval(%"class.rtc::ArrayView.1") align 8, %"class.rtc::ArrayView.1"* nocapture readonly byval(%"class.rtc::ArrayView.1") align 8, %"class.rtc::ArrayView.1"* nocapture readonly byval(%"class.rtc::ArrayView.1") align 8, %"class.rtc::ArrayView.3"* nocapture readonly byval(%"class.rtc::ArrayView.3") align 8) unnamed_addr #3 {
  %11 = icmp sgt i32 %1, 0
  br i1 %11, label %12, label %62

12:                                               ; preds = %10
  %13 = ptrtoint float* %3 to i64
  %14 = getelementptr inbounds %"class.rtc::ArrayView.1", %"class.rtc::ArrayView.1"* %6, i64 0, i32 0, i32 0
  %15 = icmp eq i64 %4, 0
  %16 = select i1 %15, float* null, float* %3
  %17 = sext i32 %0 to i64
  %18 = getelementptr inbounds %"class.rtc::ArrayView.1", %"class.rtc::ArrayView.1"* %7, i64 0, i32 0, i32 1
  %19 = getelementptr inbounds %"class.rtc::ArrayView.1", %"class.rtc::ArrayView.1"* %7, i64 0, i32 0, i32 0
  %20 = getelementptr inbounds %"class.webrtc::rnn_vad::VectorMath", %"class.webrtc::rnn_vad::VectorMath"* %2, i64 0, i32 0, i32 1
  %21 = getelementptr inbounds %"class.webrtc::rnn_vad::VectorMath", %"class.webrtc::rnn_vad::VectorMath"* %2, i64 0, i32 0, i32 0
  %22 = trunc i64 %4 to i32
  %23 = and i32 %22, -4
  %24 = icmp sgt i32 %23, 0
  %25 = sext i32 %23 to i64
  %26 = icmp slt i32 %23, %22
  %27 = shl i64 %4, 32
  %28 = ashr exact i64 %27, 32
  %29 = getelementptr inbounds float, float* %16, i64 %4
  %30 = getelementptr inbounds %"class.rtc::ArrayView.1", %"class.rtc::ArrayView.1"* %5, i64 0, i32 0, i32 0
  %31 = getelementptr inbounds %"class.rtc::ArrayView.1", %"class.rtc::ArrayView.1"* %5, i64 0, i32 0, i32 1
  %32 = sext i32 %1 to i64
  %33 = getelementptr inbounds %"class.rtc::ArrayView.1", %"class.rtc::ArrayView.1"* %8, i64 0, i32 0, i32 1
  %34 = getelementptr inbounds %"class.rtc::ArrayView.1", %"class.rtc::ArrayView.1"* %8, i64 0, i32 0, i32 0
  %35 = getelementptr inbounds %"class.rtc::ArrayView.3", %"class.rtc::ArrayView.3"* %9, i64 0, i32 0, i32 0
  %36 = zext i32 %1 to i64
  %37 = load float*, float** %14, align 8
  %38 = load i64, i64* %18, align 8
  %39 = add nsw i64 %25, -1
  %40 = lshr i64 %39, 2
  %41 = add nuw nsw i64 %40, 1
  %42 = shl i64 %4, 32
  %43 = ashr exact i64 %42, 32
  %44 = xor i64 %25, -1
  %45 = add nsw i64 %43, %44
  %46 = add i64 %4, -1
  %47 = getelementptr float, float* %16, i64 %46
  %48 = ptrtoint float* %47 to i64
  %49 = sub i64 %48, %13
  %50 = lshr i64 %49, 2
  %51 = add nuw nsw i64 %50, 1
  %52 = and i64 %41, 3
  %53 = icmp ult i64 %39, 12
  %54 = sub nsw i64 %41, %52
  %55 = icmp eq i64 %52, 0
  %56 = and i64 %43, 3
  %57 = icmp eq i64 %56, 0
  %58 = icmp ult i64 %45, 3
  %59 = and i64 %51, 3
  %60 = icmp eq i64 %59, 0
  %61 = icmp ult i64 %49, 12
  br label %63

62:                                               ; preds = %523, %10
  ret void

63:                                               ; preds = %523, %12
  %64 = phi i64 [ 0, %12 ], [ %527, %523 ]
  %65 = getelementptr inbounds float, float* %37, i64 %64
  %66 = load float, float* %65, align 4
  %67 = mul nsw i64 %64, %17
  %68 = icmp ugt i64 %38, %67
  br i1 %68, label %69, label %77

69:                                               ; preds = %63
  %70 = load float*, float** %19, align 8
  %71 = getelementptr inbounds float, float* %70, i64 %67
  %72 = sub i64 %38, %67
  %73 = icmp ult i64 %72, %17
  %74 = select i1 %73, i64 %72, i64 %17
  %75 = icmp eq i64 %74, 0
  %76 = select i1 %75, float* null, float* %71
  br label %77

77:                                               ; preds = %63, %69
  %78 = phi i64 [ %74, %69 ], [ 0, %63 ]
  %79 = phi float* [ %76, %69 ], [ null, %63 ]
  %80 = load i8, i8* %20, align 1, !range !6
  %81 = icmp eq i8 %80, 0
  br i1 %81, label %86, label %82

82:                                               ; preds = %77
  %83 = icmp eq i64 %78, 0
  %84 = select i1 %83, float* null, float* %79
  %85 = tail call float @_ZNK6webrtc7rnn_vad10VectorMath14DotProductAvx2EN3rtc9ArrayViewIKfLln4711EEES5_(%"class.webrtc::rnn_vad::VectorMath"* %2, float* %16, i64 %4, float* %84, i64 %78) #9
  br label %258

86:                                               ; preds = %77
  %87 = load i8, i8* %21, align 1, !range !6
  %88 = icmp eq i8 %87, 0
  br i1 %88, label %209, label %89

89:                                               ; preds = %86
  br i1 %24, label %90, label %110

90:                                               ; preds = %89
  br i1 %53, label %91, label %135

91:                                               ; preds = %135, %90
  %92 = phi <4 x float> [ undef, %90 ], [ %173, %135 ]
  %93 = phi i64 [ 0, %90 ], [ %174, %135 ]
  %94 = phi <4 x float> [ zeroinitializer, %90 ], [ %173, %135 ]
  br i1 %55, label %110, label %95

95:                                               ; preds = %91, %95
  %96 = phi i64 [ %107, %95 ], [ %93, %91 ]
  %97 = phi <4 x float> [ %106, %95 ], [ %94, %91 ]
  %98 = phi i64 [ %108, %95 ], [ %52, %91 ]
  %99 = getelementptr inbounds float, float* %16, i64 %96
  %100 = bitcast float* %99 to <4 x float>*
  %101 = load <4 x float>, <4 x float>* %100, align 1
  %102 = getelementptr inbounds float, float* %79, i64 %96
  %103 = bitcast float* %102 to <4 x float>*
  %104 = load <4 x float>, <4 x float>* %103, align 1
  %105 = fmul <4 x float> %101, %104
  %106 = fadd <4 x float> %97, %105
  %107 = add nuw nsw i64 %96, 4
  %108 = add i64 %98, -1
  %109 = icmp eq i64 %108, 0
  br i1 %109, label %110, label %95, !llvm.loop !14

110:                                              ; preds = %91, %95, %89
  %111 = phi <4 x float> [ zeroinitializer, %89 ], [ %92, %91 ], [ %106, %95 ]
  %112 = shufflevector <4 x float> %111, <4 x float> undef, <4 x i32> <i32 2, i32 3, i32 2, i32 3>
  %113 = fadd <4 x float> %111, %112
  %114 = shufflevector <4 x float> %113, <4 x float> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %115 = fadd <4 x float> %113, %114
  %116 = extractelement <4 x float> %115, i32 0
  br i1 %26, label %117, label %258

117:                                              ; preds = %110
  br i1 %57, label %131, label %118

118:                                              ; preds = %117, %118
  %119 = phi i64 [ %128, %118 ], [ %25, %117 ]
  %120 = phi float [ %127, %118 ], [ %116, %117 ]
  %121 = phi i64 [ %129, %118 ], [ %56, %117 ]
  %122 = getelementptr inbounds float, float* %16, i64 %119
  %123 = load float, float* %122, align 4
  %124 = getelementptr inbounds float, float* %79, i64 %119
  %125 = load float, float* %124, align 4
  %126 = fmul float %123, %125
  %127 = fadd float %120, %126
  %128 = add nsw i64 %119, 1
  %129 = add i64 %121, -1
  %130 = icmp eq i64 %129, 0
  br i1 %130, label %131, label %118, !llvm.loop !15

131:                                              ; preds = %118, %117
  %132 = phi float [ undef, %117 ], [ %127, %118 ]
  %133 = phi i64 [ %25, %117 ], [ %128, %118 ]
  %134 = phi float [ %116, %117 ], [ %127, %118 ]
  br i1 %58, label %258, label %177

135:                                              ; preds = %90, %135
  %136 = phi i64 [ %174, %135 ], [ 0, %90 ]
  %137 = phi <4 x float> [ %173, %135 ], [ zeroinitializer, %90 ]
  %138 = phi i64 [ %175, %135 ], [ %54, %90 ]
  %139 = getelementptr inbounds float, float* %16, i64 %136
  %140 = bitcast float* %139 to <4 x float>*
  %141 = load <4 x float>, <4 x float>* %140, align 1
  %142 = getelementptr inbounds float, float* %79, i64 %136
  %143 = bitcast float* %142 to <4 x float>*
  %144 = load <4 x float>, <4 x float>* %143, align 1
  %145 = fmul <4 x float> %141, %144
  %146 = fadd <4 x float> %137, %145
  %147 = or i64 %136, 4
  %148 = getelementptr inbounds float, float* %16, i64 %147
  %149 = bitcast float* %148 to <4 x float>*
  %150 = load <4 x float>, <4 x float>* %149, align 1
  %151 = getelementptr inbounds float, float* %79, i64 %147
  %152 = bitcast float* %151 to <4 x float>*
  %153 = load <4 x float>, <4 x float>* %152, align 1
  %154 = fmul <4 x float> %150, %153
  %155 = fadd <4 x float> %146, %154
  %156 = or i64 %136, 8
  %157 = getelementptr inbounds float, float* %16, i64 %156
  %158 = bitcast float* %157 to <4 x float>*
  %159 = load <4 x float>, <4 x float>* %158, align 1
  %160 = getelementptr inbounds float, float* %79, i64 %156
  %161 = bitcast float* %160 to <4 x float>*
  %162 = load <4 x float>, <4 x float>* %161, align 1
  %163 = fmul <4 x float> %159, %162
  %164 = fadd <4 x float> %155, %163
  %165 = or i64 %136, 12
  %166 = getelementptr inbounds float, float* %16, i64 %165
  %167 = bitcast float* %166 to <4 x float>*
  %168 = load <4 x float>, <4 x float>* %167, align 1
  %169 = getelementptr inbounds float, float* %79, i64 %165
  %170 = bitcast float* %169 to <4 x float>*
  %171 = load <4 x float>, <4 x float>* %170, align 1
  %172 = fmul <4 x float> %168, %171
  %173 = fadd <4 x float> %164, %172
  %174 = add nuw nsw i64 %136, 16
  %175 = add i64 %138, -4
  %176 = icmp eq i64 %175, 0
  br i1 %176, label %91, label %135

177:                                              ; preds = %131, %177
  %178 = phi i64 [ %207, %177 ], [ %133, %131 ]
  %179 = phi float [ %206, %177 ], [ %134, %131 ]
  %180 = getelementptr inbounds float, float* %16, i64 %178
  %181 = load float, float* %180, align 4
  %182 = getelementptr inbounds float, float* %79, i64 %178
  %183 = load float, float* %182, align 4
  %184 = fmul float %181, %183
  %185 = fadd float %179, %184
  %186 = add nsw i64 %178, 1
  %187 = getelementptr inbounds float, float* %16, i64 %186
  %188 = load float, float* %187, align 4
  %189 = getelementptr inbounds float, float* %79, i64 %186
  %190 = load float, float* %189, align 4
  %191 = fmul float %188, %190
  %192 = fadd float %185, %191
  %193 = add nsw i64 %178, 2
  %194 = getelementptr inbounds float, float* %16, i64 %193
  %195 = load float, float* %194, align 4
  %196 = getelementptr inbounds float, float* %79, i64 %193
  %197 = load float, float* %196, align 4
  %198 = fmul float %195, %197
  %199 = fadd float %192, %198
  %200 = add nsw i64 %178, 3
  %201 = getelementptr inbounds float, float* %16, i64 %200
  %202 = load float, float* %201, align 4
  %203 = getelementptr inbounds float, float* %79, i64 %200
  %204 = load float, float* %203, align 4
  %205 = fmul float %202, %204
  %206 = fadd float %199, %205
  %207 = add nsw i64 %178, 4
  %208 = icmp eq i64 %207, %28
  br i1 %208, label %258, label %177

209:                                              ; preds = %86
  br i1 %15, label %258, label %210

210:                                              ; preds = %209
  br i1 %60, label %224, label %211

211:                                              ; preds = %210, %211
  %212 = phi float [ %219, %211 ], [ 0.000000e+00, %210 ]
  %213 = phi float* [ %221, %211 ], [ %79, %210 ]
  %214 = phi float* [ %220, %211 ], [ %3, %210 ]
  %215 = phi i64 [ %222, %211 ], [ %59, %210 ]
  %216 = load float, float* %214, align 4
  %217 = load float, float* %213, align 4
  %218 = fmul float %216, %217
  %219 = fadd float %212, %218
  %220 = getelementptr inbounds float, float* %214, i64 1
  %221 = getelementptr inbounds float, float* %213, i64 1
  %222 = add i64 %215, -1
  %223 = icmp eq i64 %222, 0
  br i1 %223, label %224, label %211, !llvm.loop !16

224:                                              ; preds = %211, %210
  %225 = phi float [ undef, %210 ], [ %219, %211 ]
  %226 = phi float [ 0.000000e+00, %210 ], [ %219, %211 ]
  %227 = phi float* [ %79, %210 ], [ %221, %211 ]
  %228 = phi float* [ %3, %210 ], [ %220, %211 ]
  br i1 %61, label %258, label %229

229:                                              ; preds = %224, %229
  %230 = phi float [ %254, %229 ], [ %226, %224 ]
  %231 = phi float* [ %256, %229 ], [ %227, %224 ]
  %232 = phi float* [ %255, %229 ], [ %228, %224 ]
  %233 = load float, float* %232, align 4
  %234 = load float, float* %231, align 4
  %235 = fmul float %233, %234
  %236 = fadd float %230, %235
  %237 = getelementptr inbounds float, float* %232, i64 1
  %238 = getelementptr inbounds float, float* %231, i64 1
  %239 = load float, float* %237, align 4
  %240 = load float, float* %238, align 4
  %241 = fmul float %239, %240
  %242 = fadd float %236, %241
  %243 = getelementptr inbounds float, float* %232, i64 2
  %244 = getelementptr inbounds float, float* %231, i64 2
  %245 = load float, float* %243, align 4
  %246 = load float, float* %244, align 4
  %247 = fmul float %245, %246
  %248 = fadd float %242, %247
  %249 = getelementptr inbounds float, float* %232, i64 3
  %250 = getelementptr inbounds float, float* %231, i64 3
  %251 = load float, float* %249, align 4
  %252 = load float, float* %250, align 4
  %253 = fmul float %251, %252
  %254 = fadd float %248, %253
  %255 = getelementptr inbounds float, float* %232, i64 4
  %256 = getelementptr inbounds float, float* %231, i64 4
  %257 = icmp eq float* %255, %29
  br i1 %257, label %258, label %229

258:                                              ; preds = %131, %177, %224, %229, %82, %110, %209
  %259 = phi float [ %85, %82 ], [ 0.000000e+00, %209 ], [ %116, %110 ], [ %225, %224 ], [ %254, %229 ], [ %132, %131 ], [ %206, %177 ]
  %260 = fadd float %66, %259
  %261 = load float*, float** %30, align 8
  %262 = ptrtoint float* %261 to i64
  %263 = load i64, i64* %31, align 8
  %264 = icmp eq i64 %263, 0
  %265 = select i1 %264, float* null, float* %261
  %266 = mul nsw i64 %64, %32
  %267 = load i64, i64* %33, align 8
  %268 = icmp ugt i64 %267, %266
  br i1 %268, label %269, label %277

269:                                              ; preds = %258
  %270 = load float*, float** %34, align 8
  %271 = getelementptr inbounds float, float* %270, i64 %266
  %272 = sub i64 %267, %266
  %273 = icmp ult i64 %272, %32
  %274 = select i1 %273, i64 %272, i64 %32
  %275 = icmp eq i64 %274, 0
  %276 = select i1 %275, float* null, float* %271
  br label %277

277:                                              ; preds = %258, %269
  %278 = phi i64 [ %274, %269 ], [ 0, %258 ]
  %279 = phi float* [ %276, %269 ], [ null, %258 ]
  %280 = load i8, i8* %20, align 1, !range !6
  %281 = icmp eq i8 %280, 0
  br i1 %281, label %286, label %282

282:                                              ; preds = %277
  %283 = icmp eq i64 %278, 0
  %284 = select i1 %283, float* null, float* %279
  %285 = tail call float @_ZNK6webrtc7rnn_vad10VectorMath14DotProductAvx2EN3rtc9ArrayViewIKfLln4711EEES5_(%"class.webrtc::rnn_vad::VectorMath"* %2, float* %265, i64 %263, float* %284, i64 %278) #9
  br label %491

286:                                              ; preds = %277
  %287 = load i8, i8* %21, align 1, !range !6
  %288 = icmp eq i8 %287, 0
  br i1 %288, label %432, label %289

289:                                              ; preds = %286
  %290 = trunc i64 %263 to i32
  %291 = and i32 %290, -4
  %292 = icmp sgt i32 %291, 0
  br i1 %292, label %293, label %322

293:                                              ; preds = %289
  %294 = sext i32 %291 to i64
  %295 = add nsw i64 %294, -1
  %296 = lshr i64 %295, 2
  %297 = add nuw nsw i64 %296, 1
  %298 = and i64 %297, 3
  %299 = icmp ult i64 %295, 12
  br i1 %299, label %302, label %300

300:                                              ; preds = %293
  %301 = sub nsw i64 %297, %298
  br label %358

302:                                              ; preds = %358, %293
  %303 = phi <4 x float> [ undef, %293 ], [ %396, %358 ]
  %304 = phi i64 [ 0, %293 ], [ %397, %358 ]
  %305 = phi <4 x float> [ zeroinitializer, %293 ], [ %396, %358 ]
  %306 = icmp eq i64 %298, 0
  br i1 %306, label %322, label %307

307:                                              ; preds = %302, %307
  %308 = phi i64 [ %319, %307 ], [ %304, %302 ]
  %309 = phi <4 x float> [ %318, %307 ], [ %305, %302 ]
  %310 = phi i64 [ %320, %307 ], [ %298, %302 ]
  %311 = getelementptr inbounds float, float* %265, i64 %308
  %312 = bitcast float* %311 to <4 x float>*
  %313 = load <4 x float>, <4 x float>* %312, align 1
  %314 = getelementptr inbounds float, float* %279, i64 %308
  %315 = bitcast float* %314 to <4 x float>*
  %316 = load <4 x float>, <4 x float>* %315, align 1
  %317 = fmul <4 x float> %313, %316
  %318 = fadd <4 x float> %309, %317
  %319 = add nuw nsw i64 %308, 4
  %320 = add i64 %310, -1
  %321 = icmp eq i64 %320, 0
  br i1 %321, label %322, label %307, !llvm.loop !17

322:                                              ; preds = %302, %307, %289
  %323 = phi <4 x float> [ zeroinitializer, %289 ], [ %303, %302 ], [ %318, %307 ]
  %324 = shufflevector <4 x float> %323, <4 x float> undef, <4 x i32> <i32 2, i32 3, i32 2, i32 3>
  %325 = fadd <4 x float> %323, %324
  %326 = shufflevector <4 x float> %325, <4 x float> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %327 = fadd <4 x float> %325, %326
  %328 = extractelement <4 x float> %327, i32 0
  %329 = icmp slt i32 %291, %290
  br i1 %329, label %330, label %491

330:                                              ; preds = %322
  %331 = sext i32 %291 to i64
  %332 = shl i64 %263, 32
  %333 = ashr exact i64 %332, 32
  %334 = shl i64 %263, 32
  %335 = ashr exact i64 %334, 32
  %336 = xor i64 %331, -1
  %337 = add nsw i64 %335, %336
  %338 = and i64 %335, 3
  %339 = icmp eq i64 %338, 0
  br i1 %339, label %353, label %340

340:                                              ; preds = %330, %340
  %341 = phi i64 [ %350, %340 ], [ %331, %330 ]
  %342 = phi float [ %349, %340 ], [ %328, %330 ]
  %343 = phi i64 [ %351, %340 ], [ %338, %330 ]
  %344 = getelementptr inbounds float, float* %265, i64 %341
  %345 = load float, float* %344, align 4
  %346 = getelementptr inbounds float, float* %279, i64 %341
  %347 = load float, float* %346, align 4
  %348 = fmul float %345, %347
  %349 = fadd float %342, %348
  %350 = add nsw i64 %341, 1
  %351 = add i64 %343, -1
  %352 = icmp eq i64 %351, 0
  br i1 %352, label %353, label %340, !llvm.loop !18

353:                                              ; preds = %340, %330
  %354 = phi float [ undef, %330 ], [ %349, %340 ]
  %355 = phi i64 [ %331, %330 ], [ %350, %340 ]
  %356 = phi float [ %328, %330 ], [ %349, %340 ]
  %357 = icmp ult i64 %337, 3
  br i1 %357, label %491, label %400

358:                                              ; preds = %358, %300
  %359 = phi i64 [ 0, %300 ], [ %397, %358 ]
  %360 = phi <4 x float> [ zeroinitializer, %300 ], [ %396, %358 ]
  %361 = phi i64 [ %301, %300 ], [ %398, %358 ]
  %362 = getelementptr inbounds float, float* %265, i64 %359
  %363 = bitcast float* %362 to <4 x float>*
  %364 = load <4 x float>, <4 x float>* %363, align 1
  %365 = getelementptr inbounds float, float* %279, i64 %359
  %366 = bitcast float* %365 to <4 x float>*
  %367 = load <4 x float>, <4 x float>* %366, align 1
  %368 = fmul <4 x float> %364, %367
  %369 = fadd <4 x float> %360, %368
  %370 = or i64 %359, 4
  %371 = getelementptr inbounds float, float* %265, i64 %370
  %372 = bitcast float* %371 to <4 x float>*
  %373 = load <4 x float>, <4 x float>* %372, align 1
  %374 = getelementptr inbounds float, float* %279, i64 %370
  %375 = bitcast float* %374 to <4 x float>*
  %376 = load <4 x float>, <4 x float>* %375, align 1
  %377 = fmul <4 x float> %373, %376
  %378 = fadd <4 x float> %369, %377
  %379 = or i64 %359, 8
  %380 = getelementptr inbounds float, float* %265, i64 %379
  %381 = bitcast float* %380 to <4 x float>*
  %382 = load <4 x float>, <4 x float>* %381, align 1
  %383 = getelementptr inbounds float, float* %279, i64 %379
  %384 = bitcast float* %383 to <4 x float>*
  %385 = load <4 x float>, <4 x float>* %384, align 1
  %386 = fmul <4 x float> %382, %385
  %387 = fadd <4 x float> %378, %386
  %388 = or i64 %359, 12
  %389 = getelementptr inbounds float, float* %265, i64 %388
  %390 = bitcast float* %389 to <4 x float>*
  %391 = load <4 x float>, <4 x float>* %390, align 1
  %392 = getelementptr inbounds float, float* %279, i64 %388
  %393 = bitcast float* %392 to <4 x float>*
  %394 = load <4 x float>, <4 x float>* %393, align 1
  %395 = fmul <4 x float> %391, %394
  %396 = fadd <4 x float> %387, %395
  %397 = add nuw nsw i64 %359, 16
  %398 = add i64 %361, -4
  %399 = icmp eq i64 %398, 0
  br i1 %399, label %302, label %358

400:                                              ; preds = %353, %400
  %401 = phi i64 [ %430, %400 ], [ %355, %353 ]
  %402 = phi float [ %429, %400 ], [ %356, %353 ]
  %403 = getelementptr inbounds float, float* %265, i64 %401
  %404 = load float, float* %403, align 4
  %405 = getelementptr inbounds float, float* %279, i64 %401
  %406 = load float, float* %405, align 4
  %407 = fmul float %404, %406
  %408 = fadd float %402, %407
  %409 = add nsw i64 %401, 1
  %410 = getelementptr inbounds float, float* %265, i64 %409
  %411 = load float, float* %410, align 4
  %412 = getelementptr inbounds float, float* %279, i64 %409
  %413 = load float, float* %412, align 4
  %414 = fmul float %411, %413
  %415 = fadd float %408, %414
  %416 = add nsw i64 %401, 2
  %417 = getelementptr inbounds float, float* %265, i64 %416
  %418 = load float, float* %417, align 4
  %419 = getelementptr inbounds float, float* %279, i64 %416
  %420 = load float, float* %419, align 4
  %421 = fmul float %418, %420
  %422 = fadd float %415, %421
  %423 = add nsw i64 %401, 3
  %424 = getelementptr inbounds float, float* %265, i64 %423
  %425 = load float, float* %424, align 4
  %426 = getelementptr inbounds float, float* %279, i64 %423
  %427 = load float, float* %426, align 4
  %428 = fmul float %425, %427
  %429 = fadd float %422, %428
  %430 = add nsw i64 %401, 4
  %431 = icmp eq i64 %430, %333
  br i1 %431, label %491, label %400

432:                                              ; preds = %286
  %433 = getelementptr inbounds float, float* %265, i64 %263
  br i1 %264, label %491, label %434

434:                                              ; preds = %432
  %435 = getelementptr float, float* %265, i64 -1
  %436 = getelementptr float, float* %435, i64 %263
  %437 = ptrtoint float* %436 to i64
  %438 = sub i64 %437, %262
  %439 = lshr i64 %438, 2
  %440 = add nuw nsw i64 %439, 1
  %441 = and i64 %440, 3
  %442 = icmp eq i64 %441, 0
  br i1 %442, label %456, label %443

443:                                              ; preds = %434, %443
  %444 = phi float [ %451, %443 ], [ 0.000000e+00, %434 ]
  %445 = phi float* [ %453, %443 ], [ %279, %434 ]
  %446 = phi float* [ %452, %443 ], [ %261, %434 ]
  %447 = phi i64 [ %454, %443 ], [ %441, %434 ]
  %448 = load float, float* %446, align 4
  %449 = load float, float* %445, align 4
  %450 = fmul float %448, %449
  %451 = fadd float %444, %450
  %452 = getelementptr inbounds float, float* %446, i64 1
  %453 = getelementptr inbounds float, float* %445, i64 1
  %454 = add i64 %447, -1
  %455 = icmp eq i64 %454, 0
  br i1 %455, label %456, label %443, !llvm.loop !19

456:                                              ; preds = %443, %434
  %457 = phi float [ undef, %434 ], [ %451, %443 ]
  %458 = phi float [ 0.000000e+00, %434 ], [ %451, %443 ]
  %459 = phi float* [ %279, %434 ], [ %453, %443 ]
  %460 = phi float* [ %261, %434 ], [ %452, %443 ]
  %461 = icmp ult i64 %438, 12
  br i1 %461, label %491, label %462

462:                                              ; preds = %456, %462
  %463 = phi float [ %487, %462 ], [ %458, %456 ]
  %464 = phi float* [ %489, %462 ], [ %459, %456 ]
  %465 = phi float* [ %488, %462 ], [ %460, %456 ]
  %466 = load float, float* %465, align 4
  %467 = load float, float* %464, align 4
  %468 = fmul float %466, %467
  %469 = fadd float %463, %468
  %470 = getelementptr inbounds float, float* %465, i64 1
  %471 = getelementptr inbounds float, float* %464, i64 1
  %472 = load float, float* %470, align 4
  %473 = load float, float* %471, align 4
  %474 = fmul float %472, %473
  %475 = fadd float %469, %474
  %476 = getelementptr inbounds float, float* %465, i64 2
  %477 = getelementptr inbounds float, float* %464, i64 2
  %478 = load float, float* %476, align 4
  %479 = load float, float* %477, align 4
  %480 = fmul float %478, %479
  %481 = fadd float %475, %480
  %482 = getelementptr inbounds float, float* %465, i64 3
  %483 = getelementptr inbounds float, float* %464, i64 3
  %484 = load float, float* %482, align 4
  %485 = load float, float* %483, align 4
  %486 = fmul float %484, %485
  %487 = fadd float %481, %486
  %488 = getelementptr inbounds float, float* %465, i64 4
  %489 = getelementptr inbounds float, float* %464, i64 4
  %490 = icmp eq float* %488, %433
  br i1 %490, label %491, label %462

491:                                              ; preds = %353, %400, %456, %462, %282, %322, %432
  %492 = phi float [ %285, %282 ], [ 0.000000e+00, %432 ], [ %328, %322 ], [ %457, %456 ], [ %487, %462 ], [ %354, %353 ], [ %429, %400 ]
  %493 = fadd float %260, %492
  %494 = fmul float %493, 5.000000e-01
  %495 = fcmp olt float %494, 8.000000e+00
  br i1 %495, label %496, label %523

496:                                              ; preds = %491
  %497 = fcmp ogt float %494, -8.000000e+00
  br i1 %497, label %498, label %523

498:                                              ; preds = %496
  %499 = fcmp olt float %494, 0.000000e+00
  %500 = fsub float -0.000000e+00, %494
  %501 = select i1 %499, float -1.000000e+00, float 1.000000e+00
  %502 = select i1 %499, float %500, float %494
  %503 = fmul float %502, 2.500000e+01
  %504 = fadd float %503, 5.000000e-01
  %505 = tail call float @llvm.floor.f32(float %504) #9
  %506 = fptosi float %505 to i32
  %507 = sext i32 %506 to i64
  %508 = getelementptr inbounds [201 x float], [201 x float]* @_ZZN7rnnoise18TansigApproximatedEfE12kTansigTable, i64 0, i64 %507
  %509 = load float, float* %508, align 4
  %510 = sitofp i32 %506 to float
  %511 = fmul float %510, 0x3FA47AE140000000
  %512 = fsub float %502, %511
  %513 = fmul float %509, %509
  %514 = fsub float 1.000000e+00, %513
  %515 = fmul float %512, %514
  %516 = fmul float %512, %509
  %517 = fsub float 1.000000e+00, %516
  %518 = fmul float %517, %515
  %519 = fadd float %509, %518
  %520 = fmul float %501, %519
  %521 = fmul float %520, 5.000000e-01
  %522 = fadd float %521, 5.000000e-01
  br label %523

523:                                              ; preds = %491, %496, %498
  %524 = phi float [ %522, %498 ], [ 1.000000e+00, %491 ], [ 0.000000e+00, %496 ]
  %525 = load float*, float** %35, align 8
  %526 = getelementptr inbounds float, float* %525, i64 %64
  store float %524, float* %526, align 4
  %527 = add nuw nsw i64 %64, 1
  %528 = icmp eq i64 %527, %36
  br i1 %528, label %62, label %63
}

; Function Attrs: noreturn
declare void @_ZN3rtc18webrtc_checks_impl8FatalLogEPKciS2_PKNS0_12CheckArgTypeEz(i8*, i32, i8*, i8*, ...) local_unnamed_addr #4

; Function Attrs: noreturn
declare void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"*) local_unnamed_addr #4

; Function Attrs: nobuiltin nofree
declare noalias nonnull i8* @_Znwm(i64) local_unnamed_addr #5

declare float @_ZNK6webrtc7rnn_vad10VectorMath14DotProductAvx2EN3rtc9ArrayViewIKfLln4711EEES5_(%"class.webrtc::rnn_vad::VectorMath"*, float*, i64, float*, i64) local_unnamed_addr #6

; Function Attrs: nounwind readnone speculatable
declare float @llvm.floor.f32(float) #7

; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(i8*) local_unnamed_addr #8

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind ssp uwtable writeonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind }
attributes #3 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="128" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nobuiltin nofree "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { nounwind readnone speculatable }
attributes #8 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #9 = { nounwind }
attributes #10 = { noreturn nounwind }
attributes #11 = { builtin nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = distinct !{!2, !3}
!3 = !{!"llvm.loop.isvectorized", i32 1}
!4 = distinct !{!4, !5, !3}
!5 = !{!"llvm.loop.unroll.runtime.disable"}
!6 = !{i8 0, i8 2}
!7 = distinct !{!7, !8}
!8 = !{!"llvm.loop.unroll.disable"}
!9 = distinct !{!9, !8}
!10 = distinct !{!10, !8}
!11 = distinct !{!11, !8}
!12 = distinct !{!12, !8}
!13 = distinct !{!13, !8}
!14 = distinct !{!14, !8}
!15 = distinct !{!15, !8}
!16 = distinct !{!16, !8}
!17 = distinct !{!17, !8}
!18 = distinct !{!18, !8}
!19 = distinct !{!19, !8}
