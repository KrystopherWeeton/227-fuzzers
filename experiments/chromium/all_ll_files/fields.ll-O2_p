; ModuleID = '../../third_party/libjxl/src/lib/jxl/fields.cc'
source_filename = "../../third_party/libjxl/src/lib/jxl/fields.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%struct._IO_FILE = type { i32, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, %struct._IO_marker*, %struct._IO_FILE*, i32, i32, i64, i16, i8, [1 x i8], i8*, i64, %struct._IO_codecvt*, %struct._IO_wide_data*, %struct._IO_FILE*, i8*, i64, i32, [20 x i8] }
%struct._IO_marker = type opaque
%struct._IO_codecvt = type opaque
%struct._IO_wide_data = type opaque
%"class.jxl::Fields" = type { i32 (...)** }
%"struct.jxl::(anonymous namespace)::InitVisitor" = type { %"class.jxl::(anonymous namespace)::VisitorBase.base", [7 x i8] }
%"class.jxl::(anonymous namespace)::VisitorBase.base" = type <{ %"class.jxl::Visitor", i64, %"class.jxl::(anonymous namespace)::ExtensionStates", i8 }>
%"class.jxl::Visitor" = type { i32 (...)** }
%"class.jxl::(anonymous namespace)::ExtensionStates" = type { i64, i64 }
%"class.jxl::(anonymous namespace)::VisitorBase" = type <{ %"class.jxl::Visitor", i64, %"class.jxl::(anonymous namespace)::ExtensionStates", i8, [7 x i8] }>
%"struct.jxl::(anonymous namespace)::SetDefaultVisitor" = type { %"class.jxl::(anonymous namespace)::VisitorBase.base", [7 x i8] }
%"class.jxl::(anonymous namespace)::AllDefaultVisitor" = type { %"class.jxl::(anonymous namespace)::VisitorBase.base", i8, i8, [5 x i8] }
%"class.jxl::(anonymous namespace)::MaxBitsVisitor" = type { %"class.jxl::(anonymous namespace)::VisitorBase.base", i64 }
%"class.jxl::(anonymous namespace)::CanEncodeVisitor" = type { %"class.jxl::(anonymous namespace)::VisitorBase.base", i8, i8, i64, i64, i64 }
%"class.jxl::BitReader" = type { i64, i64, i8*, i8*, i8*, i64, i8, i64 }
%"class.jxl::(anonymous namespace)::ReadVisitor" = type { %"class.jxl::(anonymous namespace)::VisitorBase.base", i8, i8, i8, %"class.jxl::BitReader"*, [64 x i64], i64, i64 }
%"struct.jxl::BitWriter" = type { i64, %"class.jxl::PaddedBytes", %"class.jxl::BitWriter::Allotment"* }
%"class.jxl::PaddedBytes" = type { i64, i64, %"class.std::__1::unique_ptr" }
%"class.std::__1::unique_ptr" = type { %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { i8* }
%"class.jxl::BitWriter::Allotment" = type { i64, i64, i64, i8, %"class.jxl::BitWriter::Allotment"* }
%"struct.jxl::AuxOut" = type opaque
%"class.jxl::(anonymous namespace)::WriteVisitor" = type <{ %"class.jxl::(anonymous namespace)::VisitorBase.base", [7 x i8], i64, %"struct.jxl::BitWriter"*, i8, [7 x i8] }>
%"class.jxl::U32Enc" = type { [4 x %"struct.jxl::U32Distr"] }
%"struct.jxl::U32Distr" = type { i32 }
%struct.__va_list_tag = type { i32, i32, i8*, i8* }

$_ZN3jxl7Visitor10SetDefaultEPNS_6FieldsE = comdat any

$_ZNK3jxl7Visitor9IsReadingEv = comdat any

$_ZN3jxl7Visitor11ConditionalEb = comdat any

$_ZN3jxl7Visitor10AllDefaultERKNS_6FieldsEPb = comdat any

$_ZN3jxl7Visitor11VisitNestedEPNS_6FieldsE = comdat any

$_ZN3jxl9BitReader19BoundsCheckedRefillEv = comdat any

@.str = private unnamed_addr constant [1 x i8] zeroinitializer, align 1
@.str.1 = private unnamed_addr constant [42 x i8] c"%s:%d: JXL_ABORT: Init should never fail\0A\00", align 1
@.str.2 = private unnamed_addr constant [47 x i8] c"../../third_party/libjxl/src/lib/jxl/fields.cc\00", align 1
@.str.3 = private unnamed_addr constant [48 x i8] c"%s:%d: JXL_ABORT: SetDefault should never fail\0A\00", align 1
@.str.4 = private unnamed_addr constant [48 x i8] c"%s:%d: JXL_ABORT: AllDefault should never fail\0A\00", align 1
@.str.5 = private unnamed_addr constant [23 x i8] c"%s:%d: JXL_ASSERT: %s\0A\00", align 1
@.str.6 = private unnamed_addr constant [4 x i8] c"ret\00", align 1
@.str.13 = private unnamed_addr constant [16 x i8] c"value >= offset\00", align 1
@.str.14 = private unnamed_addr constant [20 x i8] c"bits_required <= 32\00", align 1
@.str.21 = private unnamed_addr constant [17 x i8] c"bits16 < 0x10000\00", align 1
@_ZTVN3jxl12_GLOBAL__N_111InitVisitorE = internal unnamed_addr constant { [18 x i8*] } { [18 x i8*] [i8* null, i8* null, i8* bitcast (void (%"class.jxl::(anonymous namespace)::VisitorBase"*)* @_ZN3jxl12_GLOBAL__N_111VisitorBaseD2Ev to i8*), i8* bitcast (void (%"struct.jxl::(anonymous namespace)::InitVisitor"*)* @_ZN3jxl12_GLOBAL__N_111InitVisitorD0Ev to i8*), i8* bitcast (i32 (%"class.jxl::(anonymous namespace)::VisitorBase"*, %"class.jxl::Fields"*, i8*)* @_ZN3jxl12_GLOBAL__N_111VisitorBase5VisitEPNS_6FieldsEPKc to i8*), i8* bitcast (i32 (%"struct.jxl::(anonymous namespace)::InitVisitor"*, i1, i8*)* @_ZN3jxl12_GLOBAL__N_111InitVisitor4BoolEbPb to i8*), i8* bitcast (i32 (%"struct.jxl::(anonymous namespace)::InitVisitor"*, i64, i64, i32, i32*)* @_ZN3jxl12_GLOBAL__N_111InitVisitor3U32ENS_6U32EncEjPj to i8*), i8* bitcast (i32 (%"struct.jxl::(anonymous namespace)::InitVisitor"*, i64, i32, i32*)* @_ZN3jxl12_GLOBAL__N_111InitVisitor4BitsEmjPj to i8*), i8* bitcast (i32 (%"struct.jxl::(anonymous namespace)::InitVisitor"*, i64, i64*)* @_ZN3jxl12_GLOBAL__N_111InitVisitor3U64EmPm to i8*), i8* bitcast (i32 (%"struct.jxl::(anonymous namespace)::InitVisitor"*, float, float*)* @_ZN3jxl12_GLOBAL__N_111InitVisitor3F16EfPf to i8*), i8* bitcast (i32 (%"struct.jxl::(anonymous namespace)::InitVisitor"*, i1)* @_ZN3jxl12_GLOBAL__N_111InitVisitor11ConditionalEb to i8*), i8* bitcast (i32 (%"struct.jxl::(anonymous namespace)::InitVisitor"*, %"class.jxl::Fields"*, i8*)* @_ZN3jxl12_GLOBAL__N_111InitVisitor10AllDefaultERKNS_6FieldsEPb to i8*), i8* bitcast (void (%"class.jxl::Visitor"*, %"class.jxl::Fields"*)* @_ZN3jxl7Visitor10SetDefaultEPNS_6FieldsE to i8*), i8* bitcast (i32 (%"struct.jxl::(anonymous namespace)::InitVisitor"*, %"class.jxl::Fields"*)* @_ZN3jxl12_GLOBAL__N_111InitVisitor11VisitNestedEPNS_6FieldsE to i8*), i8* bitcast (i1 (%"class.jxl::Visitor"*)* @_ZNK3jxl7Visitor9IsReadingEv to i8*), i8* bitcast (i32 (%"class.jxl::(anonymous namespace)::VisitorBase"*, i64*)* @_ZN3jxl12_GLOBAL__N_111VisitorBase15BeginExtensionsEPm to i8*), i8* bitcast (i32 (%"class.jxl::(anonymous namespace)::VisitorBase"*)* @_ZN3jxl12_GLOBAL__N_111VisitorBase13EndExtensionsEv to i8*), i8* bitcast (i8* (%"struct.jxl::(anonymous namespace)::InitVisitor"*)* @_ZN3jxl12_GLOBAL__N_111InitVisitor11VisitorNameEv to i8*)] }, align 8
@_ZTVN3jxl12_GLOBAL__N_111VisitorBaseE = internal unnamed_addr constant { [18 x i8*] } { [18 x i8*] [i8* null, i8* null, i8* bitcast (void (%"class.jxl::(anonymous namespace)::VisitorBase"*)* @_ZN3jxl12_GLOBAL__N_111VisitorBaseD2Ev to i8*), i8* bitcast (void (%"class.jxl::(anonymous namespace)::VisitorBase"*)* @_ZN3jxl12_GLOBAL__N_111VisitorBaseD0Ev to i8*), i8* bitcast (i32 (%"class.jxl::(anonymous namespace)::VisitorBase"*, %"class.jxl::Fields"*, i8*)* @_ZN3jxl12_GLOBAL__N_111VisitorBase5VisitEPNS_6FieldsEPKc to i8*), i8* bitcast (i32 (%"class.jxl::(anonymous namespace)::VisitorBase"*, i1, i8*)* @_ZN3jxl12_GLOBAL__N_111VisitorBase4BoolEbPb to i8*), i8* bitcast (void ()* @__cxa_pure_virtual to i8*), i8* bitcast (void ()* @__cxa_pure_virtual to i8*), i8* bitcast (void ()* @__cxa_pure_virtual to i8*), i8* bitcast (void ()* @__cxa_pure_virtual to i8*), i8* bitcast (i32 (%"class.jxl::Visitor"*, i1)* @_ZN3jxl7Visitor11ConditionalEb to i8*), i8* bitcast (i32 (%"class.jxl::Visitor"*, %"class.jxl::Fields"*, i8*)* @_ZN3jxl7Visitor10AllDefaultERKNS_6FieldsEPb to i8*), i8* bitcast (void (%"class.jxl::Visitor"*, %"class.jxl::Fields"*)* @_ZN3jxl7Visitor10SetDefaultEPNS_6FieldsE to i8*), i8* bitcast (i32 (%"class.jxl::Visitor"*, %"class.jxl::Fields"*)* @_ZN3jxl7Visitor11VisitNestedEPNS_6FieldsE to i8*), i8* bitcast (i1 (%"class.jxl::Visitor"*)* @_ZNK3jxl7Visitor9IsReadingEv to i8*), i8* bitcast (i32 (%"class.jxl::(anonymous namespace)::VisitorBase"*, i64*)* @_ZN3jxl12_GLOBAL__N_111VisitorBase15BeginExtensionsEPm to i8*), i8* bitcast (i32 (%"class.jxl::(anonymous namespace)::VisitorBase"*)* @_ZN3jxl12_GLOBAL__N_111VisitorBase13EndExtensionsEv to i8*), i8* bitcast (void ()* @__cxa_pure_virtual to i8*)] }, align 8
@.str.23 = private unnamed_addr constant [12 x i8] c"depth_ == 0\00", align 1
@.str.28 = private unnamed_addr constant [11 x i8] c"!IsBegun()\00", align 1
@.str.29 = private unnamed_addr constant [11 x i8] c"!IsEnded()\00", align 1
@.str.30 = private unnamed_addr constant [10 x i8] c"IsBegun()\00", align 1
@.str.31 = private unnamed_addr constant [12 x i8] c"InitVisitor\00", align 1
@stdout = external local_unnamed_addr global %struct._IO_FILE*, align 8
@.str.32 = private unnamed_addr constant [4 x i8] c"%s\0A\00", align 1
@.str.33 = private unnamed_addr constant [33 x i8] c"depth_ <= Bundle::kMaxExtensions\00", align 1
@.str.34 = private unnamed_addr constant [60 x i8] c"!extension_states_.IsBegun() || extension_states_.IsEnded()\00", align 1
@.str.35 = private unnamed_addr constant [12 x i8] c"depth_ != 0\00", align 1
@.str.36 = private unnamed_addr constant [4 x i8] c"%*s\00", align 1
@_ZTVN3jxl12_GLOBAL__N_117SetDefaultVisitorE = internal unnamed_addr constant { [18 x i8*] } { [18 x i8*] [i8* null, i8* null, i8* bitcast (void (%"class.jxl::(anonymous namespace)::VisitorBase"*)* @_ZN3jxl12_GLOBAL__N_111VisitorBaseD2Ev to i8*), i8* bitcast (void (%"struct.jxl::(anonymous namespace)::SetDefaultVisitor"*)* @_ZN3jxl12_GLOBAL__N_117SetDefaultVisitorD0Ev to i8*), i8* bitcast (i32 (%"class.jxl::(anonymous namespace)::VisitorBase"*, %"class.jxl::Fields"*, i8*)* @_ZN3jxl12_GLOBAL__N_111VisitorBase5VisitEPNS_6FieldsEPKc to i8*), i8* bitcast (i32 (%"struct.jxl::(anonymous namespace)::SetDefaultVisitor"*, i1, i8*)* @_ZN3jxl12_GLOBAL__N_117SetDefaultVisitor4BoolEbPb to i8*), i8* bitcast (i32 (%"struct.jxl::(anonymous namespace)::SetDefaultVisitor"*, i64, i64, i32, i32*)* @_ZN3jxl12_GLOBAL__N_117SetDefaultVisitor3U32ENS_6U32EncEjPj to i8*), i8* bitcast (i32 (%"struct.jxl::(anonymous namespace)::SetDefaultVisitor"*, i64, i32, i32*)* @_ZN3jxl12_GLOBAL__N_117SetDefaultVisitor4BitsEmjPj to i8*), i8* bitcast (i32 (%"struct.jxl::(anonymous namespace)::SetDefaultVisitor"*, i64, i64*)* @_ZN3jxl12_GLOBAL__N_117SetDefaultVisitor3U64EmPm to i8*), i8* bitcast (i32 (%"struct.jxl::(anonymous namespace)::SetDefaultVisitor"*, float, float*)* @_ZN3jxl12_GLOBAL__N_117SetDefaultVisitor3F16EfPf to i8*), i8* bitcast (i32 (%"struct.jxl::(anonymous namespace)::SetDefaultVisitor"*, i1)* @_ZN3jxl12_GLOBAL__N_117SetDefaultVisitor11ConditionalEb to i8*), i8* bitcast (i32 (%"struct.jxl::(anonymous namespace)::SetDefaultVisitor"*, %"class.jxl::Fields"*, i8*)* @_ZN3jxl12_GLOBAL__N_117SetDefaultVisitor10AllDefaultERKNS_6FieldsEPb to i8*), i8* bitcast (void (%"class.jxl::Visitor"*, %"class.jxl::Fields"*)* @_ZN3jxl7Visitor10SetDefaultEPNS_6FieldsE to i8*), i8* bitcast (i32 (%"class.jxl::Visitor"*, %"class.jxl::Fields"*)* @_ZN3jxl7Visitor11VisitNestedEPNS_6FieldsE to i8*), i8* bitcast (i1 (%"class.jxl::Visitor"*)* @_ZNK3jxl7Visitor9IsReadingEv to i8*), i8* bitcast (i32 (%"class.jxl::(anonymous namespace)::VisitorBase"*, i64*)* @_ZN3jxl12_GLOBAL__N_111VisitorBase15BeginExtensionsEPm to i8*), i8* bitcast (i32 (%"class.jxl::(anonymous namespace)::VisitorBase"*)* @_ZN3jxl12_GLOBAL__N_111VisitorBase13EndExtensionsEv to i8*), i8* bitcast (i8* (%"struct.jxl::(anonymous namespace)::SetDefaultVisitor"*)* @_ZN3jxl12_GLOBAL__N_117SetDefaultVisitor11VisitorNameEv to i8*)] }, align 8
@.str.37 = private unnamed_addr constant [18 x i8] c"SetDefaultVisitor\00", align 1
@_ZTVN3jxl12_GLOBAL__N_117AllDefaultVisitorE = internal unnamed_addr constant { [18 x i8*] } { [18 x i8*] [i8* null, i8* null, i8* bitcast (void (%"class.jxl::(anonymous namespace)::VisitorBase"*)* @_ZN3jxl12_GLOBAL__N_111VisitorBaseD2Ev to i8*), i8* bitcast (void (%"class.jxl::(anonymous namespace)::AllDefaultVisitor"*)* @_ZN3jxl12_GLOBAL__N_117AllDefaultVisitorD0Ev to i8*), i8* bitcast (i32 (%"class.jxl::(anonymous namespace)::VisitorBase"*, %"class.jxl::Fields"*, i8*)* @_ZN3jxl12_GLOBAL__N_111VisitorBase5VisitEPNS_6FieldsEPKc to i8*), i8* bitcast (i32 (%"class.jxl::(anonymous namespace)::VisitorBase"*, i1, i8*)* @_ZN3jxl12_GLOBAL__N_111VisitorBase4BoolEbPb to i8*), i8* bitcast (i32 (%"class.jxl::(anonymous namespace)::AllDefaultVisitor"*, i64, i64, i32, i32*)* @_ZN3jxl12_GLOBAL__N_117AllDefaultVisitor3U32ENS_6U32EncEjPj to i8*), i8* bitcast (i32 (%"class.jxl::(anonymous namespace)::AllDefaultVisitor"*, i64, i32, i32*)* @_ZN3jxl12_GLOBAL__N_117AllDefaultVisitor4BitsEmjPj to i8*), i8* bitcast (i32 (%"class.jxl::(anonymous namespace)::AllDefaultVisitor"*, i64, i64*)* @_ZN3jxl12_GLOBAL__N_117AllDefaultVisitor3U64EmPm to i8*), i8* bitcast (i32 (%"class.jxl::(anonymous namespace)::AllDefaultVisitor"*, float, float*)* @_ZN3jxl12_GLOBAL__N_117AllDefaultVisitor3F16EfPf to i8*), i8* bitcast (i32 (%"class.jxl::Visitor"*, i1)* @_ZN3jxl7Visitor11ConditionalEb to i8*), i8* bitcast (i32 (%"class.jxl::(anonymous namespace)::AllDefaultVisitor"*, %"class.jxl::Fields"*, i8*)* @_ZN3jxl12_GLOBAL__N_117AllDefaultVisitor10AllDefaultERKNS_6FieldsEPb to i8*), i8* bitcast (void (%"class.jxl::Visitor"*, %"class.jxl::Fields"*)* @_ZN3jxl7Visitor10SetDefaultEPNS_6FieldsE to i8*), i8* bitcast (i32 (%"class.jxl::Visitor"*, %"class.jxl::Fields"*)* @_ZN3jxl7Visitor11VisitNestedEPNS_6FieldsE to i8*), i8* bitcast (i1 (%"class.jxl::Visitor"*)* @_ZNK3jxl7Visitor9IsReadingEv to i8*), i8* bitcast (i32 (%"class.jxl::(anonymous namespace)::VisitorBase"*, i64*)* @_ZN3jxl12_GLOBAL__N_111VisitorBase15BeginExtensionsEPm to i8*), i8* bitcast (i32 (%"class.jxl::(anonymous namespace)::VisitorBase"*)* @_ZN3jxl12_GLOBAL__N_111VisitorBase13EndExtensionsEv to i8*), i8* bitcast (i8* (%"class.jxl::(anonymous namespace)::AllDefaultVisitor"*)* @_ZN3jxl12_GLOBAL__N_117AllDefaultVisitor11VisitorNameEv to i8*)] }, align 8
@.str.38 = private unnamed_addr constant [24 x i8] c"  U32 = %u, default %u\0A\00", align 1
@.str.39 = private unnamed_addr constant [27 x i8] c"  u(%zu) = %u, default %u\0A\00", align 1
@.str.40 = private unnamed_addr constant [26 x i8] c"  U64 = %lu, default %lu\0A\00", align 1
@.str.41 = private unnamed_addr constant [28 x i8] c"  F16 = %.6f, default %.6f\0A\00", align 1
@.str.42 = private unnamed_addr constant [18 x i8] c"AllDefaultVisitor\00", align 1
@_ZTVN3jxl12_GLOBAL__N_114MaxBitsVisitorE = internal unnamed_addr constant { [18 x i8*] } { [18 x i8*] [i8* null, i8* null, i8* bitcast (void (%"class.jxl::(anonymous namespace)::VisitorBase"*)* @_ZN3jxl12_GLOBAL__N_111VisitorBaseD2Ev to i8*), i8* bitcast (void (%"class.jxl::(anonymous namespace)::MaxBitsVisitor"*)* @_ZN3jxl12_GLOBAL__N_114MaxBitsVisitorD0Ev to i8*), i8* bitcast (i32 (%"class.jxl::(anonymous namespace)::VisitorBase"*, %"class.jxl::Fields"*, i8*)* @_ZN3jxl12_GLOBAL__N_111VisitorBase5VisitEPNS_6FieldsEPKc to i8*), i8* bitcast (i32 (%"class.jxl::(anonymous namespace)::VisitorBase"*, i1, i8*)* @_ZN3jxl12_GLOBAL__N_111VisitorBase4BoolEbPb to i8*), i8* bitcast (i32 (%"class.jxl::(anonymous namespace)::MaxBitsVisitor"*, i64, i64, i32, i32*)* @_ZN3jxl12_GLOBAL__N_114MaxBitsVisitor3U32ENS_6U32EncEjPj to i8*), i8* bitcast (i32 (%"class.jxl::(anonymous namespace)::MaxBitsVisitor"*, i64, i32, i32*)* @_ZN3jxl12_GLOBAL__N_114MaxBitsVisitor4BitsEmjPj to i8*), i8* bitcast (i32 (%"class.jxl::(anonymous namespace)::MaxBitsVisitor"*, i64, i64*)* @_ZN3jxl12_GLOBAL__N_114MaxBitsVisitor3U64EmPm to i8*), i8* bitcast (i32 (%"class.jxl::(anonymous namespace)::MaxBitsVisitor"*, float, float*)* @_ZN3jxl12_GLOBAL__N_114MaxBitsVisitor3F16EfPf to i8*), i8* bitcast (i32 (%"class.jxl::(anonymous namespace)::MaxBitsVisitor"*, i1)* @_ZN3jxl12_GLOBAL__N_114MaxBitsVisitor11ConditionalEb to i8*), i8* bitcast (i32 (%"class.jxl::(anonymous namespace)::MaxBitsVisitor"*, %"class.jxl::Fields"*, i8*)* @_ZN3jxl12_GLOBAL__N_114MaxBitsVisitor10AllDefaultERKNS_6FieldsEPb to i8*), i8* bitcast (void (%"class.jxl::Visitor"*, %"class.jxl::Fields"*)* @_ZN3jxl7Visitor10SetDefaultEPNS_6FieldsE to i8*), i8* bitcast (i32 (%"class.jxl::Visitor"*, %"class.jxl::Fields"*)* @_ZN3jxl7Visitor11VisitNestedEPNS_6FieldsE to i8*), i8* bitcast (i1 (%"class.jxl::Visitor"*)* @_ZNK3jxl7Visitor9IsReadingEv to i8*), i8* bitcast (i32 (%"class.jxl::(anonymous namespace)::MaxBitsVisitor"*, i64*)* @_ZN3jxl12_GLOBAL__N_114MaxBitsVisitor15BeginExtensionsEPm to i8*), i8* bitcast (i32 (%"class.jxl::(anonymous namespace)::MaxBitsVisitor"*)* @_ZN3jxl12_GLOBAL__N_114MaxBitsVisitor13EndExtensionsEv to i8*), i8* bitcast (i8* (%"class.jxl::(anonymous namespace)::MaxBitsVisitor"*)* @_ZN3jxl12_GLOBAL__N_114MaxBitsVisitor11VisitorNameEv to i8*)] }, align 8
@.str.43 = private unnamed_addr constant [15 x i8] c"MaxBitsVisitor\00", align 1
@_ZTVN3jxl12_GLOBAL__N_116CanEncodeVisitorE = internal unnamed_addr constant { [18 x i8*] } { [18 x i8*] [i8* null, i8* null, i8* bitcast (void (%"class.jxl::(anonymous namespace)::VisitorBase"*)* @_ZN3jxl12_GLOBAL__N_111VisitorBaseD2Ev to i8*), i8* bitcast (void (%"class.jxl::(anonymous namespace)::CanEncodeVisitor"*)* @_ZN3jxl12_GLOBAL__N_116CanEncodeVisitorD0Ev to i8*), i8* bitcast (i32 (%"class.jxl::(anonymous namespace)::VisitorBase"*, %"class.jxl::Fields"*, i8*)* @_ZN3jxl12_GLOBAL__N_111VisitorBase5VisitEPNS_6FieldsEPKc to i8*), i8* bitcast (i32 (%"class.jxl::(anonymous namespace)::VisitorBase"*, i1, i8*)* @_ZN3jxl12_GLOBAL__N_111VisitorBase4BoolEbPb to i8*), i8* bitcast (i32 (%"class.jxl::(anonymous namespace)::CanEncodeVisitor"*, i64, i64, i32, i32*)* @_ZN3jxl12_GLOBAL__N_116CanEncodeVisitor3U32ENS_6U32EncEjPj to i8*), i8* bitcast (i32 (%"class.jxl::(anonymous namespace)::CanEncodeVisitor"*, i64, i32, i32*)* @_ZN3jxl12_GLOBAL__N_116CanEncodeVisitor4BitsEmjPj to i8*), i8* bitcast (i32 (%"class.jxl::(anonymous namespace)::CanEncodeVisitor"*, i64, i64*)* @_ZN3jxl12_GLOBAL__N_116CanEncodeVisitor3U64EmPm to i8*), i8* bitcast (i32 (%"class.jxl::(anonymous namespace)::CanEncodeVisitor"*, float, float*)* @_ZN3jxl12_GLOBAL__N_116CanEncodeVisitor3F16EfPf to i8*), i8* bitcast (i32 (%"class.jxl::Visitor"*, i1)* @_ZN3jxl7Visitor11ConditionalEb to i8*), i8* bitcast (i32 (%"class.jxl::(anonymous namespace)::CanEncodeVisitor"*, %"class.jxl::Fields"*, i8*)* @_ZN3jxl12_GLOBAL__N_116CanEncodeVisitor10AllDefaultERKNS_6FieldsEPb to i8*), i8* bitcast (void (%"class.jxl::Visitor"*, %"class.jxl::Fields"*)* @_ZN3jxl7Visitor10SetDefaultEPNS_6FieldsE to i8*), i8* bitcast (i32 (%"class.jxl::Visitor"*, %"class.jxl::Fields"*)* @_ZN3jxl7Visitor11VisitNestedEPNS_6FieldsE to i8*), i8* bitcast (i1 (%"class.jxl::Visitor"*)* @_ZNK3jxl7Visitor9IsReadingEv to i8*), i8* bitcast (i32 (%"class.jxl::(anonymous namespace)::CanEncodeVisitor"*, i64*)* @_ZN3jxl12_GLOBAL__N_116CanEncodeVisitor15BeginExtensionsEPm to i8*), i8* bitcast (i32 (%"class.jxl::(anonymous namespace)::VisitorBase"*)* @_ZN3jxl12_GLOBAL__N_111VisitorBase13EndExtensionsEv to i8*), i8* bitcast (i8* (%"class.jxl::(anonymous namespace)::CanEncodeVisitor"*)* @_ZN3jxl12_GLOBAL__N_116CanEncodeVisitor11VisitorNameEv to i8*)] }, align 8
@.str.44 = private unnamed_addr constant [15 x i8] c"U32(%zu) = %u\0A\00", align 1
@.str.45 = private unnamed_addr constant [13 x i8] c"u(%zu) = %u\0A\00", align 1
@.str.47 = private unnamed_addr constant [16 x i8] c"U64(%zu) = %lu\0A\00", align 1
@.str.48 = private unnamed_addr constant [17 x i8] c"F16(%zu) = %.6f\0A\00", align 1
@.str.49 = private unnamed_addr constant [20 x i8] c"pos_after_ext_ == 0\00", align 1
@.str.50 = private unnamed_addr constant [20 x i8] c"pos_after_ext_ != 0\00", align 1
@.str.51 = private unnamed_addr constant [17 x i8] c"CanEncodeVisitor\00", align 1
@.str.53 = private unnamed_addr constant [32 x i8] c"encoded_bits_ >= pos_after_ext_\00", align 1
@_ZTVN3jxl12_GLOBAL__N_111ReadVisitorE = internal unnamed_addr constant { [18 x i8*] } { [18 x i8*] [i8* null, i8* null, i8* bitcast (void (%"class.jxl::(anonymous namespace)::VisitorBase"*)* @_ZN3jxl12_GLOBAL__N_111VisitorBaseD2Ev to i8*), i8* bitcast (void (%"class.jxl::(anonymous namespace)::ReadVisitor"*)* @_ZN3jxl12_GLOBAL__N_111ReadVisitorD0Ev to i8*), i8* bitcast (i32 (%"class.jxl::(anonymous namespace)::VisitorBase"*, %"class.jxl::Fields"*, i8*)* @_ZN3jxl12_GLOBAL__N_111VisitorBase5VisitEPNS_6FieldsEPKc to i8*), i8* bitcast (i32 (%"class.jxl::(anonymous namespace)::VisitorBase"*, i1, i8*)* @_ZN3jxl12_GLOBAL__N_111VisitorBase4BoolEbPb to i8*), i8* bitcast (i32 (%"class.jxl::(anonymous namespace)::ReadVisitor"*, i64, i64, i32, i32*)* @_ZN3jxl12_GLOBAL__N_111ReadVisitor3U32ENS_6U32EncEjPj to i8*), i8* bitcast (i32 (%"class.jxl::(anonymous namespace)::ReadVisitor"*, i64, i32, i32*)* @_ZN3jxl12_GLOBAL__N_111ReadVisitor4BitsEmjPj to i8*), i8* bitcast (i32 (%"class.jxl::(anonymous namespace)::ReadVisitor"*, i64, i64*)* @_ZN3jxl12_GLOBAL__N_111ReadVisitor3U64EmPm to i8*), i8* bitcast (i32 (%"class.jxl::(anonymous namespace)::ReadVisitor"*, float, float*)* @_ZN3jxl12_GLOBAL__N_111ReadVisitor3F16EfPf to i8*), i8* bitcast (i32 (%"class.jxl::Visitor"*, i1)* @_ZN3jxl7Visitor11ConditionalEb to i8*), i8* bitcast (i32 (%"class.jxl::Visitor"*, %"class.jxl::Fields"*, i8*)* @_ZN3jxl7Visitor10AllDefaultERKNS_6FieldsEPb to i8*), i8* bitcast (void (%"class.jxl::(anonymous namespace)::ReadVisitor"*, %"class.jxl::Fields"*)* @_ZN3jxl12_GLOBAL__N_111ReadVisitor10SetDefaultEPNS_6FieldsE to i8*), i8* bitcast (i32 (%"class.jxl::Visitor"*, %"class.jxl::Fields"*)* @_ZN3jxl7Visitor11VisitNestedEPNS_6FieldsE to i8*), i8* bitcast (i1 (%"class.jxl::(anonymous namespace)::ReadVisitor"*)* @_ZNK3jxl12_GLOBAL__N_111ReadVisitor9IsReadingEv to i8*), i8* bitcast (i32 (%"class.jxl::(anonymous namespace)::ReadVisitor"*, i64*)* @_ZN3jxl12_GLOBAL__N_111ReadVisitor15BeginExtensionsEPm to i8*), i8* bitcast (i32 (%"class.jxl::(anonymous namespace)::ReadVisitor"*)* @_ZN3jxl12_GLOBAL__N_111ReadVisitor13EndExtensionsEv to i8*), i8* bitcast (i8* (%"class.jxl::(anonymous namespace)::ReadVisitor"*)* @_ZN3jxl12_GLOBAL__N_111ReadVisitor11VisitorNameEv to i8*)] }, align 8
@.str.55 = private unnamed_addr constant [12 x i8] c"  U32 = %u\0A\00", align 1
@.str.56 = private unnamed_addr constant [15 x i8] c"  u(%zu) = %u\0A\00", align 1
@.str.57 = private unnamed_addr constant [13 x i8] c"  U64 = %lu\0A\00", align 1
@.str.58 = private unnamed_addr constant [12 x i8] c"  F16 = %f\0A\00", align 1
@.str.61 = private unnamed_addr constant [25 x i8] c"pos_after_ext_size_ != 0\00", align 1
@.str.64 = private unnamed_addr constant [12 x i8] c"ReadVisitor\00", align 1
@_ZTVN3jxl12_GLOBAL__N_112WriteVisitorE = internal unnamed_addr constant { [18 x i8*] } { [18 x i8*] [i8* null, i8* null, i8* bitcast (void (%"class.jxl::(anonymous namespace)::VisitorBase"*)* @_ZN3jxl12_GLOBAL__N_111VisitorBaseD2Ev to i8*), i8* bitcast (void (%"class.jxl::(anonymous namespace)::WriteVisitor"*)* @_ZN3jxl12_GLOBAL__N_112WriteVisitorD0Ev to i8*), i8* bitcast (i32 (%"class.jxl::(anonymous namespace)::VisitorBase"*, %"class.jxl::Fields"*, i8*)* @_ZN3jxl12_GLOBAL__N_111VisitorBase5VisitEPNS_6FieldsEPKc to i8*), i8* bitcast (i32 (%"class.jxl::(anonymous namespace)::VisitorBase"*, i1, i8*)* @_ZN3jxl12_GLOBAL__N_111VisitorBase4BoolEbPb to i8*), i8* bitcast (i32 (%"class.jxl::(anonymous namespace)::WriteVisitor"*, i64, i64, i32, i32*)* @_ZN3jxl12_GLOBAL__N_112WriteVisitor3U32ENS_6U32EncEjPj to i8*), i8* bitcast (i32 (%"class.jxl::(anonymous namespace)::WriteVisitor"*, i64, i32, i32*)* @_ZN3jxl12_GLOBAL__N_112WriteVisitor4BitsEmjPj to i8*), i8* bitcast (i32 (%"class.jxl::(anonymous namespace)::WriteVisitor"*, i64, i64*)* @_ZN3jxl12_GLOBAL__N_112WriteVisitor3U64EmPm to i8*), i8* bitcast (i32 (%"class.jxl::(anonymous namespace)::WriteVisitor"*, float, float*)* @_ZN3jxl12_GLOBAL__N_112WriteVisitor3F16EfPf to i8*), i8* bitcast (i32 (%"class.jxl::Visitor"*, i1)* @_ZN3jxl7Visitor11ConditionalEb to i8*), i8* bitcast (i32 (%"class.jxl::Visitor"*, %"class.jxl::Fields"*, i8*)* @_ZN3jxl7Visitor10AllDefaultERKNS_6FieldsEPb to i8*), i8* bitcast (void (%"class.jxl::Visitor"*, %"class.jxl::Fields"*)* @_ZN3jxl7Visitor10SetDefaultEPNS_6FieldsE to i8*), i8* bitcast (i32 (%"class.jxl::Visitor"*, %"class.jxl::Fields"*)* @_ZN3jxl7Visitor11VisitNestedEPNS_6FieldsE to i8*), i8* bitcast (i1 (%"class.jxl::Visitor"*)* @_ZNK3jxl7Visitor9IsReadingEv to i8*), i8* bitcast (i32 (%"class.jxl::(anonymous namespace)::WriteVisitor"*, i64*)* @_ZN3jxl12_GLOBAL__N_112WriteVisitor15BeginExtensionsEPm to i8*), i8* bitcast (i32 (%"class.jxl::(anonymous namespace)::VisitorBase"*)* @_ZN3jxl12_GLOBAL__N_111VisitorBase13EndExtensionsEv to i8*), i8* bitcast (i8* (%"class.jxl::(anonymous namespace)::WriteVisitor"*)* @_ZN3jxl12_GLOBAL__N_112WriteVisitor11VisitorNameEv to i8*)] }, align 8
@.str.66 = private unnamed_addr constant [21 x i8] c"extension_bits_ == 0\00", align 1
@.str.67 = private unnamed_addr constant [13 x i8] c"WriteVisitor\00", align 1
@.str.68 = private unnamed_addr constant [55 x i8] c"../../third_party/libjxl/src/lib/jxl/field_encodings.h\00", align 1
@.str.69 = private unnamed_addr constant [13 x i8] c"selector < 4\00", align 1

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN3jxl6Bundle4InitEPNS_6FieldsE(%"class.jxl::Fields"*) local_unnamed_addr #0 align 2 {
  %2 = alloca %"struct.jxl::(anonymous namespace)::InitVisitor", align 8
  %3 = bitcast %"struct.jxl::(anonymous namespace)::InitVisitor"* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %3) #14
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %3, i8 -86, i64 40, i1 false)
  %4 = getelementptr inbounds %"struct.jxl::(anonymous namespace)::InitVisitor", %"struct.jxl::(anonymous namespace)::InitVisitor"* %2, i64 0, i32 0, i32 0, i32 0
  %5 = getelementptr inbounds %"struct.jxl::(anonymous namespace)::InitVisitor", %"struct.jxl::(anonymous namespace)::InitVisitor"* %2, i64 0, i32 0, i32 1
  %6 = bitcast i64* %5 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %6, i8 0, i64 25, i1 false) #14
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [18 x i8*] }, { [18 x i8*] }* @_ZTVN3jxl12_GLOBAL__N_111InitVisitorE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %4, align 8
  %7 = bitcast %"struct.jxl::(anonymous namespace)::InitVisitor"* %2 to %"class.jxl::(anonymous namespace)::VisitorBase"*
  %8 = call i32 @_ZN3jxl12_GLOBAL__N_111VisitorBase5VisitEPNS_6FieldsEPKc(%"class.jxl::(anonymous namespace)::VisitorBase"* nonnull %7, %"class.jxl::Fields"* %0, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str, i64 0, i64 0))
  %9 = icmp eq i32 %8, 0
  br i1 %9, label %13, label %10

10:                                               ; preds = %1
  %11 = call zeroext i1 (i8*, ...) @_ZN3jxl5DebugEPKcz(i8* getelementptr inbounds ([42 x i8], [42 x i8]* @.str.1, i64 0, i64 0), i8* getelementptr inbounds ([47 x i8], [47 x i8]* @.str.2, i64 0, i64 0), i32 663) #14
  %12 = call zeroext i1 @_ZN3jxl5AbortEv() #17
  unreachable

13:                                               ; preds = %1
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [18 x i8*] }, { [18 x i8*] }* @_ZTVN3jxl12_GLOBAL__N_111VisitorBaseE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %4, align 8
  %14 = load i64, i64* %5, align 8
  %15 = icmp eq i64 %14, 0
  br i1 %15, label %19, label %16

16:                                               ; preds = %13
  %17 = call zeroext i1 (i8*, ...) @_ZN3jxl5DebugEPKcz(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.5, i64 0, i64 0), i8* getelementptr inbounds ([47 x i8], [47 x i8]* @.str.2, i64 0, i64 0), i32 76, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.23, i64 0, i64 0)) #14
  %18 = call zeroext i1 @_ZN3jxl5AbortEv() #17
  unreachable

19:                                               ; preds = %13
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %3) #14
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

; Function Attrs: nounwind ssp uwtable
define internal i32 @_ZN3jxl12_GLOBAL__N_111VisitorBase5VisitEPNS_6FieldsEPKc(%"class.jxl::(anonymous namespace)::VisitorBase"*, %"class.jxl::Fields"*, i8* nocapture readonly) unnamed_addr #0 align 2 {
  %4 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8
  %5 = tail call i32 @fputs(i8* %2, %struct._IO_FILE* %4)
  %6 = getelementptr inbounds %"class.jxl::(anonymous namespace)::VisitorBase", %"class.jxl::(anonymous namespace)::VisitorBase"* %0, i64 0, i32 3
  %7 = load i8, i8* %6, align 8, !range !2
  %8 = icmp eq i8 %7, 0
  br i1 %8, label %15, label %9

9:                                                ; preds = %3
  %10 = bitcast %"class.jxl::Fields"* %1 to i8* (%"class.jxl::Fields"*)***
  %11 = load i8* (%"class.jxl::Fields"*)**, i8* (%"class.jxl::Fields"*)*** %10, align 8
  %12 = getelementptr inbounds i8* (%"class.jxl::Fields"*)*, i8* (%"class.jxl::Fields"*)** %11, i64 2
  %13 = load i8* (%"class.jxl::Fields"*)*, i8* (%"class.jxl::Fields"*)** %12, align 8
  %14 = tail call i8* %13(%"class.jxl::Fields"* %1) #14
  tail call void (%"class.jxl::(anonymous namespace)::VisitorBase"*, i8*, ...) @_ZNK3jxl12_GLOBAL__N_111VisitorBase5TraceEPKcz(%"class.jxl::(anonymous namespace)::VisitorBase"* %0, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.32, i64 0, i64 0), i8* %14)
  br label %15

15:                                               ; preds = %3, %9
  %16 = getelementptr inbounds %"class.jxl::(anonymous namespace)::VisitorBase", %"class.jxl::(anonymous namespace)::VisitorBase"* %0, i64 0, i32 1
  %17 = load i64, i64* %16, align 8
  %18 = add i64 %17, 1
  store i64 %18, i64* %16, align 8
  %19 = icmp ult i64 %18, 65
  br i1 %19, label %23, label %20

20:                                               ; preds = %15
  %21 = tail call zeroext i1 (i8*, ...) @_ZN3jxl5DebugEPKcz(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.5, i64 0, i64 0), i8* getelementptr inbounds ([47 x i8], [47 x i8]* @.str.2, i64 0, i64 0), i32 87, i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str.33, i64 0, i64 0)) #14
  %22 = tail call zeroext i1 @_ZN3jxl5AbortEv() #17
  unreachable

23:                                               ; preds = %15
  %24 = getelementptr inbounds %"class.jxl::(anonymous namespace)::VisitorBase", %"class.jxl::(anonymous namespace)::VisitorBase"* %0, i64 0, i32 2, i32 0
  %25 = getelementptr inbounds %"class.jxl::(anonymous namespace)::VisitorBase", %"class.jxl::(anonymous namespace)::VisitorBase"* %0, i64 0, i32 2, i32 1
  %26 = bitcast i64* %24 to <2 x i64>*
  %27 = load <2 x i64>, <2 x i64>* %26, align 8
  %28 = shl <2 x i64> %27, <i64 1, i64 1>
  %29 = bitcast i64* %24 to <2 x i64>*
  store <2 x i64> %28, <2 x i64>* %29, align 8
  %30 = getelementptr inbounds %"class.jxl::(anonymous namespace)::VisitorBase", %"class.jxl::(anonymous namespace)::VisitorBase"* %0, i64 0, i32 0
  %31 = bitcast %"class.jxl::Fields"* %1 to i32 (%"class.jxl::Fields"*, %"class.jxl::Visitor"*)***
  %32 = load i32 (%"class.jxl::Fields"*, %"class.jxl::Visitor"*)**, i32 (%"class.jxl::Fields"*, %"class.jxl::Visitor"*)*** %31, align 8
  %33 = getelementptr inbounds i32 (%"class.jxl::Fields"*, %"class.jxl::Visitor"*)*, i32 (%"class.jxl::Fields"*, %"class.jxl::Visitor"*)** %32, i64 3
  %34 = load i32 (%"class.jxl::Fields"*, %"class.jxl::Visitor"*)*, i32 (%"class.jxl::Fields"*, %"class.jxl::Visitor"*)** %33, align 8
  %35 = tail call i32 %34(%"class.jxl::Fields"* %1, %"class.jxl::Visitor"* %30) #14
  %36 = icmp ne i32 %35, 0
  %37 = load i64, i64* %24, align 8
  %38 = and i64 %37, 1
  %39 = icmp eq i64 %38, 0
  %40 = or i1 %36, %39
  br i1 %40, label %48, label %41

41:                                               ; preds = %23
  %42 = load i64, i64* %25, align 8
  %43 = and i64 %42, 1
  %44 = icmp eq i64 %43, 0
  br i1 %44, label %45, label %48

45:                                               ; preds = %41
  %46 = tail call zeroext i1 (i8*, ...) @_ZN3jxl5DebugEPKcz(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.5, i64 0, i64 0), i8* getelementptr inbounds ([47 x i8], [47 x i8]* @.str.2, i64 0, i64 0), i32 95, i8* getelementptr inbounds ([60 x i8], [60 x i8]* @.str.34, i64 0, i64 0)) #14
  %47 = tail call zeroext i1 @_ZN3jxl5AbortEv() #17
  unreachable

48:                                               ; preds = %23, %41
  %49 = lshr i64 %37, 1
  store i64 %49, i64* %24, align 8
  %50 = load i64, i64* %25, align 8
  %51 = lshr i64 %50, 1
  store i64 %51, i64* %25, align 8
  %52 = load i64, i64* %16, align 8
  %53 = icmp eq i64 %52, 0
  br i1 %53, label %54, label %57

54:                                               ; preds = %48
  %55 = tail call zeroext i1 (i8*, ...) @_ZN3jxl5DebugEPKcz(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.5, i64 0, i64 0), i8* getelementptr inbounds ([47 x i8], [47 x i8]* @.str.2, i64 0, i64 0), i32 102, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.35, i64 0, i64 0)) #14
  %56 = tail call zeroext i1 @_ZN3jxl5AbortEv() #17
  unreachable

57:                                               ; preds = %48
  %58 = add i64 %52, -1
  store i64 %58, i64* %16, align 8
  ret i32 %35
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

declare zeroext i1 @_ZN3jxl5DebugEPKcz(i8*, ...) local_unnamed_addr #2

; Function Attrs: noreturn
declare zeroext i1 @_ZN3jxl5AbortEv() local_unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN3jxl6Bundle10SetDefaultEPNS_6FieldsE(%"class.jxl::Fields"*) local_unnamed_addr #0 align 2 {
  %2 = alloca %"struct.jxl::(anonymous namespace)::SetDefaultVisitor", align 8
  %3 = bitcast %"struct.jxl::(anonymous namespace)::SetDefaultVisitor"* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %3) #14
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %3, i8 -86, i64 40, i1 false)
  %4 = getelementptr inbounds %"struct.jxl::(anonymous namespace)::SetDefaultVisitor", %"struct.jxl::(anonymous namespace)::SetDefaultVisitor"* %2, i64 0, i32 0, i32 0, i32 0
  %5 = getelementptr inbounds %"struct.jxl::(anonymous namespace)::SetDefaultVisitor", %"struct.jxl::(anonymous namespace)::SetDefaultVisitor"* %2, i64 0, i32 0, i32 1
  %6 = bitcast i64* %5 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %6, i8 0, i64 25, i1 false) #14
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [18 x i8*] }, { [18 x i8*] }* @_ZTVN3jxl12_GLOBAL__N_117SetDefaultVisitorE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %4, align 8
  %7 = bitcast %"struct.jxl::(anonymous namespace)::SetDefaultVisitor"* %2 to %"class.jxl::(anonymous namespace)::VisitorBase"*
  %8 = call i32 @_ZN3jxl12_GLOBAL__N_111VisitorBase5VisitEPNS_6FieldsEPKc(%"class.jxl::(anonymous namespace)::VisitorBase"* nonnull %7, %"class.jxl::Fields"* %0, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str, i64 0, i64 0))
  %9 = icmp eq i32 %8, 0
  br i1 %9, label %13, label %10

10:                                               ; preds = %1
  %11 = call zeroext i1 (i8*, ...) @_ZN3jxl5DebugEPKcz(i8* getelementptr inbounds ([48 x i8], [48 x i8]* @.str.3, i64 0, i64 0), i8* getelementptr inbounds ([47 x i8], [47 x i8]* @.str.2, i64 0, i64 0), i32 669) #14
  %12 = call zeroext i1 @_ZN3jxl5AbortEv() #17
  unreachable

13:                                               ; preds = %1
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [18 x i8*] }, { [18 x i8*] }* @_ZTVN3jxl12_GLOBAL__N_111VisitorBaseE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %4, align 8
  %14 = load i64, i64* %5, align 8
  %15 = icmp eq i64 %14, 0
  br i1 %15, label %19, label %16

16:                                               ; preds = %13
  %17 = call zeroext i1 (i8*, ...) @_ZN3jxl5DebugEPKcz(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.5, i64 0, i64 0), i8* getelementptr inbounds ([47 x i8], [47 x i8]* @.str.2, i64 0, i64 0), i32 76, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.23, i64 0, i64 0)) #14
  %18 = call zeroext i1 @_ZN3jxl5AbortEv() #17
  unreachable

19:                                               ; preds = %13
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %3) #14
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZN3jxl6Bundle10AllDefaultERKNS_6FieldsE(%"class.jxl::Fields"* dereferenceable(8)) local_unnamed_addr #0 align 2 {
  %2 = alloca %"class.jxl::(anonymous namespace)::AllDefaultVisitor", align 8
  %3 = bitcast %"class.jxl::(anonymous namespace)::AllDefaultVisitor"* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %3) #14
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %3, i8 -86, i64 40, i1 false)
  %4 = getelementptr inbounds %"class.jxl::(anonymous namespace)::AllDefaultVisitor", %"class.jxl::(anonymous namespace)::AllDefaultVisitor"* %2, i64 0, i32 0, i32 0, i32 0
  %5 = getelementptr inbounds %"class.jxl::(anonymous namespace)::AllDefaultVisitor", %"class.jxl::(anonymous namespace)::AllDefaultVisitor"* %2, i64 0, i32 0, i32 1
  %6 = bitcast i64* %5 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %6, i8 0, i64 25, i1 false)
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [18 x i8*] }, { [18 x i8*] }* @_ZTVN3jxl12_GLOBAL__N_117AllDefaultVisitorE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %4, align 8
  %7 = getelementptr inbounds %"class.jxl::(anonymous namespace)::AllDefaultVisitor", %"class.jxl::(anonymous namespace)::AllDefaultVisitor"* %2, i64 0, i32 1
  store i8 0, i8* %7, align 1
  %8 = getelementptr inbounds %"class.jxl::(anonymous namespace)::AllDefaultVisitor", %"class.jxl::(anonymous namespace)::AllDefaultVisitor"* %2, i64 0, i32 2
  store i8 1, i8* %8, align 2
  %9 = bitcast %"class.jxl::(anonymous namespace)::AllDefaultVisitor"* %2 to %"class.jxl::(anonymous namespace)::VisitorBase"*
  %10 = call i32 @_ZN3jxl12_GLOBAL__N_111VisitorBase5VisitEPNS_6FieldsEPKc(%"class.jxl::(anonymous namespace)::VisitorBase"* nonnull %9, %"class.jxl::Fields"* %0, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str, i64 0, i64 0)) #14
  %11 = icmp eq i32 %10, 0
  br i1 %11, label %15, label %12

12:                                               ; preds = %1
  %13 = call zeroext i1 (i8*, ...) @_ZN3jxl5DebugEPKcz(i8* getelementptr inbounds ([48 x i8], [48 x i8]* @.str.4, i64 0, i64 0), i8* getelementptr inbounds ([47 x i8], [47 x i8]* @.str.2, i64 0, i64 0), i32 677) #14
  %14 = call zeroext i1 @_ZN3jxl5AbortEv() #17
  unreachable

15:                                               ; preds = %1
  %16 = load i8, i8* %8, align 2, !range !2
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [18 x i8*] }, { [18 x i8*] }* @_ZTVN3jxl12_GLOBAL__N_111VisitorBaseE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %4, align 8
  %17 = load i64, i64* %5, align 8
  %18 = icmp eq i64 %17, 0
  br i1 %18, label %22, label %19

19:                                               ; preds = %15
  %20 = call zeroext i1 (i8*, ...) @_ZN3jxl5DebugEPKcz(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.5, i64 0, i64 0), i8* getelementptr inbounds ([47 x i8], [47 x i8]* @.str.2, i64 0, i64 0), i32 76, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.23, i64 0, i64 0)) #14
  %21 = call zeroext i1 @_ZN3jxl5AbortEv() #17
  unreachable

22:                                               ; preds = %15
  %23 = icmp ne i8 %16, 0
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %3) #14
  ret i1 %23
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN3jxl12_GLOBAL__N_111VisitorBaseD2Ev(%"class.jxl::(anonymous namespace)::VisitorBase"* nocapture) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.jxl::(anonymous namespace)::VisitorBase", %"class.jxl::(anonymous namespace)::VisitorBase"* %0, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [18 x i8*] }, { [18 x i8*] }* @_ZTVN3jxl12_GLOBAL__N_111VisitorBaseE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %2, align 8
  %3 = getelementptr inbounds %"class.jxl::(anonymous namespace)::VisitorBase", %"class.jxl::(anonymous namespace)::VisitorBase"* %0, i64 0, i32 1
  %4 = load i64, i64* %3, align 8
  %5 = icmp eq i64 %4, 0
  br i1 %5, label %9, label %6

6:                                                ; preds = %1
  %7 = tail call zeroext i1 (i8*, ...) @_ZN3jxl5DebugEPKcz(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.5, i64 0, i64 0), i8* getelementptr inbounds ([47 x i8], [47 x i8]* @.str.2, i64 0, i64 0), i32 76, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.23, i64 0, i64 0)) #14
  %8 = tail call zeroext i1 @_ZN3jxl5AbortEv() #17
  unreachable

9:                                                ; preds = %1
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden i64 @_ZN3jxl6Bundle7MaxBitsERKNS_6FieldsE(%"class.jxl::Fields"* dereferenceable(8)) local_unnamed_addr #0 align 2 {
  %2 = alloca %"class.jxl::(anonymous namespace)::MaxBitsVisitor", align 8
  %3 = bitcast %"class.jxl::(anonymous namespace)::MaxBitsVisitor"* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 48, i8* nonnull %3) #14
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %3, i8 -86, i64 40, i1 false)
  %4 = getelementptr inbounds %"class.jxl::(anonymous namespace)::MaxBitsVisitor", %"class.jxl::(anonymous namespace)::MaxBitsVisitor"* %2, i64 0, i32 0, i32 0, i32 0
  %5 = getelementptr inbounds %"class.jxl::(anonymous namespace)::MaxBitsVisitor", %"class.jxl::(anonymous namespace)::MaxBitsVisitor"* %2, i64 0, i32 0, i32 1
  %6 = bitcast i64* %5 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %6, i8 0, i64 25, i1 false) #14
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [18 x i8*] }, { [18 x i8*] }* @_ZTVN3jxl12_GLOBAL__N_114MaxBitsVisitorE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %4, align 8
  %7 = getelementptr inbounds %"class.jxl::(anonymous namespace)::MaxBitsVisitor", %"class.jxl::(anonymous namespace)::MaxBitsVisitor"* %2, i64 0, i32 1
  store i64 0, i64* %7, align 8
  %8 = bitcast %"class.jxl::(anonymous namespace)::MaxBitsVisitor"* %2 to %"class.jxl::(anonymous namespace)::VisitorBase"*
  %9 = call i32 @_ZN3jxl12_GLOBAL__N_111VisitorBase5VisitEPNS_6FieldsEPKc(%"class.jxl::(anonymous namespace)::VisitorBase"* nonnull %8, %"class.jxl::Fields"* %0, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str, i64 0, i64 0)) #14
  %10 = icmp eq i32 %9, 0
  br i1 %10, label %14, label %11

11:                                               ; preds = %1
  %12 = call zeroext i1 (i8*, ...) @_ZN3jxl5DebugEPKcz(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.5, i64 0, i64 0), i8* getelementptr inbounds ([47 x i8], [47 x i8]* @.str.2, i64 0, i64 0), i32 691, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.6, i64 0, i64 0)) #14
  %13 = call zeroext i1 @_ZN3jxl5AbortEv() #17
  unreachable

14:                                               ; preds = %1
  %15 = load i64, i64* %7, align 8
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [18 x i8*] }, { [18 x i8*] }* @_ZTVN3jxl12_GLOBAL__N_111VisitorBaseE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %4, align 8
  %16 = load i64, i64* %5, align 8
  %17 = icmp eq i64 %16, 0
  br i1 %17, label %21, label %18

18:                                               ; preds = %14
  %19 = call zeroext i1 (i8*, ...) @_ZN3jxl5DebugEPKcz(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.5, i64 0, i64 0), i8* getelementptr inbounds ([47 x i8], [47 x i8]* @.str.2, i64 0, i64 0), i32 76, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.23, i64 0, i64 0)) #14
  %20 = call zeroext i1 @_ZN3jxl5AbortEv() #17
  unreachable

21:                                               ; preds = %14
  call void @llvm.lifetime.end.p0i8(i64 48, i8* nonnull %3) #14
  ret i64 %15
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @_ZN3jxl6Bundle9CanEncodeERKNS_6FieldsEPmS4_(%"class.jxl::Fields"* dereferenceable(8), i64* nocapture, i64* nocapture) local_unnamed_addr #0 align 2 {
  %4 = alloca %"class.jxl::(anonymous namespace)::CanEncodeVisitor", align 8
  %5 = bitcast %"class.jxl::(anonymous namespace)::CanEncodeVisitor"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 64, i8* nonnull %5) #14
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %5, i8 -86, i64 40, i1 false)
  %6 = getelementptr inbounds %"class.jxl::(anonymous namespace)::CanEncodeVisitor", %"class.jxl::(anonymous namespace)::CanEncodeVisitor"* %4, i64 0, i32 0, i32 0, i32 0
  %7 = getelementptr inbounds %"class.jxl::(anonymous namespace)::CanEncodeVisitor", %"class.jxl::(anonymous namespace)::CanEncodeVisitor"* %4, i64 0, i32 0, i32 1
  %8 = bitcast i64* %7 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %8, i8 0, i64 25, i1 false)
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [18 x i8*] }, { [18 x i8*] }* @_ZTVN3jxl12_GLOBAL__N_116CanEncodeVisitorE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %6, align 8
  %9 = getelementptr inbounds %"class.jxl::(anonymous namespace)::CanEncodeVisitor", %"class.jxl::(anonymous namespace)::CanEncodeVisitor"* %4, i64 0, i32 1
  store i8 0, i8* %9, align 1
  %10 = getelementptr inbounds %"class.jxl::(anonymous namespace)::CanEncodeVisitor", %"class.jxl::(anonymous namespace)::CanEncodeVisitor"* %4, i64 0, i32 2
  store i8 1, i8* %10, align 2
  %11 = getelementptr inbounds %"class.jxl::(anonymous namespace)::CanEncodeVisitor", %"class.jxl::(anonymous namespace)::CanEncodeVisitor"* %4, i64 0, i32 3
  %12 = bitcast i64* %11 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %12, i8 0, i64 24, i1 false) #14
  %13 = bitcast %"class.jxl::(anonymous namespace)::CanEncodeVisitor"* %4 to %"class.jxl::(anonymous namespace)::VisitorBase"*
  %14 = call i32 @_ZN3jxl12_GLOBAL__N_111VisitorBase5VisitEPNS_6FieldsEPKc(%"class.jxl::(anonymous namespace)::VisitorBase"* nonnull %13, %"class.jxl::Fields"* %0, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str, i64 0, i64 0)) #14
  %15 = icmp eq i32 %14, 0
  br i1 %15, label %16, label %59

16:                                               ; preds = %3
  %17 = load i8, i8* %10, align 2, !range !2, !noalias !3
  %18 = icmp eq i8 %17, 1
  br i1 %18, label %19, label %59

19:                                               ; preds = %16
  store i64 0, i64* %1, align 8, !alias.scope !7, !noalias !8
  %20 = load i64, i64* %11, align 8, !noalias !3
  store i64 %20, i64* %2, align 8, !alias.scope !8, !noalias !7
  %21 = getelementptr inbounds %"class.jxl::(anonymous namespace)::CanEncodeVisitor", %"class.jxl::(anonymous namespace)::CanEncodeVisitor"* %4, i64 0, i32 5
  %22 = load i64, i64* %21, align 8, !noalias !3
  %23 = icmp eq i64 %22, 0
  br i1 %23, label %59, label %24

24:                                               ; preds = %19
  %25 = icmp ult i64 %20, %22
  br i1 %25, label %26, label %29

26:                                               ; preds = %24
  %27 = call zeroext i1 (i8*, ...) @_ZN3jxl5DebugEPKcz(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.5, i64 0, i64 0), i8* getelementptr inbounds ([47 x i8], [47 x i8]* @.str.2, i64 0, i64 0), i32 568, i8* getelementptr inbounds ([32 x i8], [32 x i8]* @.str.53, i64 0, i64 0)) #14, !noalias !3
  %28 = call zeroext i1 @_ZN3jxl5AbortEv() #17, !noalias !3
  unreachable

29:                                               ; preds = %24
  %30 = sub i64 %20, %22
  store i64 %30, i64* %1, align 8, !alias.scope !7, !noalias !8
  %31 = icmp eq i64 %30, 0
  br i1 %31, label %48, label %32

32:                                               ; preds = %29
  %33 = icmp ult i64 %30, 17
  br i1 %33, label %48, label %34

34:                                               ; preds = %32
  %35 = icmp ult i64 %30, 273
  br i1 %35, label %48, label %36

36:                                               ; preds = %34
  %37 = icmp ult i64 %30, 4096
  br i1 %37, label %44, label %38

38:                                               ; preds = %36
  %39 = icmp ugt i64 %30, 1048575
  br i1 %39, label %67, label %40

40:                                               ; preds = %73, %71, %69, %67, %38
  %41 = phi i64 [ 23, %38 ], [ 32, %67 ], [ 41, %69 ], [ 50, %71 ], [ %76, %73 ]
  %42 = phi i1 [ %39, %38 ], [ %68, %67 ], [ %70, %69 ], [ %72, %71 ], [ %77, %73 ]
  %43 = select i1 %42, i64 5, i64 1
  br label %44

44:                                               ; preds = %40, %36
  %45 = phi i64 [ %43, %40 ], [ 1, %36 ]
  %46 = phi i64 [ %41, %40 ], [ 14, %36 ]
  %47 = add nsw i64 %46, %45
  br label %48

48:                                               ; preds = %44, %34, %32, %29
  %49 = phi i64 [ %47, %44 ], [ 2, %29 ], [ 6, %32 ], [ 10, %34 ]
  store i8 1, i8* %10, align 2, !noalias !3
  %50 = add i64 %49, %20
  store i64 %50, i64* %2, align 8, !alias.scope !8, !noalias !7
  %51 = getelementptr inbounds %"class.jxl::(anonymous namespace)::CanEncodeVisitor", %"class.jxl::(anonymous namespace)::CanEncodeVisitor"* %4, i64 0, i32 4
  %52 = load i64, i64* %51, align 8, !noalias !3
  %53 = call i64 @llvm.ctpop.i64(i64 %52) #14, !range !9
  %54 = icmp ugt i64 %53, 1
  br i1 %54, label %55, label %59

55:                                               ; preds = %48
  %56 = shl nuw nsw i64 %53, 1
  %57 = add i64 %50, -2
  %58 = add i64 %57, %56
  store i64 %58, i64* %2, align 8, !alias.scope !8, !noalias !7
  br label %59

59:                                               ; preds = %48, %55, %19, %16, %3
  %60 = phi i32 [ %14, %3 ], [ 1, %16 ], [ 0, %19 ], [ 0, %55 ], [ 0, %48 ]
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [18 x i8*] }, { [18 x i8*] }* @_ZTVN3jxl12_GLOBAL__N_111VisitorBaseE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %6, align 8
  %61 = load i64, i64* %7, align 8
  %62 = icmp eq i64 %61, 0
  br i1 %62, label %66, label %63

63:                                               ; preds = %59
  %64 = call zeroext i1 (i8*, ...) @_ZN3jxl5DebugEPKcz(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.5, i64 0, i64 0), i8* getelementptr inbounds ([47 x i8], [47 x i8]* @.str.2, i64 0, i64 0), i32 76, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.23, i64 0, i64 0)) #14
  %65 = call zeroext i1 @_ZN3jxl5AbortEv() #17
  unreachable

66:                                               ; preds = %59
  call void @llvm.lifetime.end.p0i8(i64 64, i8* nonnull %5) #14
  ret i32 %60

67:                                               ; preds = %38
  %68 = icmp ugt i64 %30, 268435455
  br i1 %68, label %69, label %40

69:                                               ; preds = %67
  %70 = icmp ugt i64 %30, 68719476735
  br i1 %70, label %71, label %40

71:                                               ; preds = %69
  %72 = icmp ugt i64 %30, 17592186044415
  br i1 %72, label %73, label %40

73:                                               ; preds = %71
  %74 = icmp ugt i64 %30, 4503599627370495
  %75 = icmp ugt i64 %30, 1152921504606846975
  %76 = select i1 %74, i64 68, i64 59
  %77 = select i1 %74, i1 %75, i1 %74
  br label %40
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @_ZN3jxl6Bundle4ReadEPNS_9BitReaderEPNS_6FieldsE(%"class.jxl::BitReader"*, %"class.jxl::Fields"*) local_unnamed_addr #0 align 2 {
  %3 = alloca %"class.jxl::(anonymous namespace)::ReadVisitor", align 8
  %4 = bitcast %"class.jxl::(anonymous namespace)::ReadVisitor"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 576, i8* nonnull %4) #14
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %4, i8 -86, i64 40, i1 false)
  %5 = getelementptr inbounds %"class.jxl::(anonymous namespace)::ReadVisitor", %"class.jxl::(anonymous namespace)::ReadVisitor"* %3, i64 0, i32 0, i32 0, i32 0
  %6 = getelementptr inbounds %"class.jxl::(anonymous namespace)::ReadVisitor", %"class.jxl::(anonymous namespace)::ReadVisitor"* %3, i64 0, i32 0, i32 1
  %7 = bitcast i64* %6 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %7, i8 0, i64 25, i1 false)
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [18 x i8*] }, { [18 x i8*] }* @_ZTVN3jxl12_GLOBAL__N_111ReadVisitorE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %5, align 8
  %8 = getelementptr inbounds %"class.jxl::(anonymous namespace)::ReadVisitor", %"class.jxl::(anonymous namespace)::ReadVisitor"* %3, i64 0, i32 1
  store i8 0, i8* %8, align 1
  %9 = getelementptr inbounds %"class.jxl::(anonymous namespace)::ReadVisitor", %"class.jxl::(anonymous namespace)::ReadVisitor"* %3, i64 0, i32 2
  store i8 1, i8* %9, align 2
  %10 = getelementptr inbounds %"class.jxl::(anonymous namespace)::ReadVisitor", %"class.jxl::(anonymous namespace)::ReadVisitor"* %3, i64 0, i32 3
  store i8 1, i8* %10, align 1
  %11 = getelementptr inbounds %"class.jxl::(anonymous namespace)::ReadVisitor", %"class.jxl::(anonymous namespace)::ReadVisitor"* %3, i64 0, i32 4
  store %"class.jxl::BitReader"* %0, %"class.jxl::BitReader"** %11, align 8
  %12 = getelementptr inbounds %"class.jxl::(anonymous namespace)::ReadVisitor", %"class.jxl::(anonymous namespace)::ReadVisitor"* %3, i64 0, i32 5, i64 0
  %13 = bitcast i64* %12 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %13, i8 0, i64 528, i1 false) #14
  %14 = bitcast %"class.jxl::(anonymous namespace)::ReadVisitor"* %3 to %"class.jxl::(anonymous namespace)::VisitorBase"*
  %15 = call i32 @_ZN3jxl12_GLOBAL__N_111VisitorBase5VisitEPNS_6FieldsEPKc(%"class.jxl::(anonymous namespace)::VisitorBase"* nonnull %14, %"class.jxl::Fields"* %1, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str, i64 0, i64 0))
  %16 = icmp eq i32 %15, 0
  br i1 %16, label %17, label %21

17:                                               ; preds = %2
  %18 = load i8, i8* %9, align 2, !range !2
  %19 = xor i8 %18, 1
  %20 = zext i8 %19 to i32
  br label %21

21:                                               ; preds = %2, %17
  %22 = phi i32 [ %20, %17 ], [ %15, %2 ]
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [18 x i8*] }, { [18 x i8*] }* @_ZTVN3jxl12_GLOBAL__N_111VisitorBaseE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %5, align 8
  %23 = load i64, i64* %6, align 8
  %24 = icmp eq i64 %23, 0
  br i1 %24, label %28, label %25

25:                                               ; preds = %21
  %26 = call zeroext i1 (i8*, ...) @_ZN3jxl5DebugEPKcz(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.5, i64 0, i64 0), i8* getelementptr inbounds ([47 x i8], [47 x i8]* @.str.2, i64 0, i64 0), i32 76, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.23, i64 0, i64 0)) #14
  %27 = call zeroext i1 @_ZN3jxl5AbortEv() #17
  unreachable

28:                                               ; preds = %21
  call void @llvm.lifetime.end.p0i8(i64 576, i8* nonnull %4) #14
  ret i32 %22
}

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZN3jxl6Bundle7CanReadEPNS_9BitReaderEPNS_6FieldsE(%"class.jxl::BitReader"*, %"class.jxl::Fields"*) local_unnamed_addr #0 align 2 {
  %3 = alloca %"class.jxl::(anonymous namespace)::ReadVisitor", align 8
  %4 = bitcast %"class.jxl::(anonymous namespace)::ReadVisitor"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 576, i8* nonnull %4) #14
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %4, i8 -86, i64 40, i1 false)
  %5 = getelementptr inbounds %"class.jxl::(anonymous namespace)::ReadVisitor", %"class.jxl::(anonymous namespace)::ReadVisitor"* %3, i64 0, i32 0, i32 0, i32 0
  %6 = getelementptr inbounds %"class.jxl::(anonymous namespace)::ReadVisitor", %"class.jxl::(anonymous namespace)::ReadVisitor"* %3, i64 0, i32 0, i32 1
  %7 = bitcast i64* %6 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %7, i8 0, i64 25, i1 false)
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [18 x i8*] }, { [18 x i8*] }* @_ZTVN3jxl12_GLOBAL__N_111ReadVisitorE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %5, align 8
  %8 = getelementptr inbounds %"class.jxl::(anonymous namespace)::ReadVisitor", %"class.jxl::(anonymous namespace)::ReadVisitor"* %3, i64 0, i32 1
  store i8 0, i8* %8, align 1
  %9 = getelementptr inbounds %"class.jxl::(anonymous namespace)::ReadVisitor", %"class.jxl::(anonymous namespace)::ReadVisitor"* %3, i64 0, i32 2
  store i8 1, i8* %9, align 2
  %10 = getelementptr inbounds %"class.jxl::(anonymous namespace)::ReadVisitor", %"class.jxl::(anonymous namespace)::ReadVisitor"* %3, i64 0, i32 3
  store i8 1, i8* %10, align 1
  %11 = getelementptr inbounds %"class.jxl::(anonymous namespace)::ReadVisitor", %"class.jxl::(anonymous namespace)::ReadVisitor"* %3, i64 0, i32 4
  store %"class.jxl::BitReader"* %0, %"class.jxl::BitReader"** %11, align 8
  %12 = getelementptr inbounds %"class.jxl::(anonymous namespace)::ReadVisitor", %"class.jxl::(anonymous namespace)::ReadVisitor"* %3, i64 0, i32 5, i64 0
  %13 = bitcast i64* %12 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %13, i8 0, i64 528, i1 false) #14
  %14 = bitcast %"class.jxl::(anonymous namespace)::ReadVisitor"* %3 to %"class.jxl::(anonymous namespace)::VisitorBase"*
  %15 = call i32 @_ZN3jxl12_GLOBAL__N_111VisitorBase5VisitEPNS_6FieldsEPKc(%"class.jxl::(anonymous namespace)::VisitorBase"* nonnull %14, %"class.jxl::Fields"* %1, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str, i64 0, i64 0))
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [18 x i8*] }, { [18 x i8*] }* @_ZTVN3jxl12_GLOBAL__N_111VisitorBaseE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %5, align 8
  %16 = load i64, i64* %6, align 8
  %17 = icmp eq i64 %16, 0
  br i1 %17, label %21, label %18

18:                                               ; preds = %2
  %19 = call zeroext i1 (i8*, ...) @_ZN3jxl5DebugEPKcz(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.5, i64 0, i64 0), i8* getelementptr inbounds ([47 x i8], [47 x i8]* @.str.2, i64 0, i64 0), i32 76, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.23, i64 0, i64 0)) #14
  %20 = call zeroext i1 @_ZN3jxl5AbortEv() #17
  unreachable

21:                                               ; preds = %2
  %22 = icmp ne i32 %15, -1
  call void @llvm.lifetime.end.p0i8(i64 576, i8* nonnull %4) #14
  ret i1 %22
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @_ZN3jxl6Bundle5WriteERKNS_6FieldsEPNS_9BitWriterEmPNS_6AuxOutE(%"class.jxl::Fields"* dereferenceable(8), %"struct.jxl::BitWriter"*, i64, %"struct.jxl::AuxOut"*) local_unnamed_addr #0 align 2 {
  %5 = alloca i64, align 8
  %6 = alloca i64, align 8
  %7 = alloca %"class.jxl::BitWriter::Allotment", align 8
  %8 = alloca %"class.jxl::(anonymous namespace)::WriteVisitor", align 8
  %9 = bitcast i64* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %9) #14
  store i64 -6148914691236517206, i64* %5, align 8
  %10 = bitcast i64* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %10) #14
  store i64 -6148914691236517206, i64* %6, align 8
  %11 = call i32 @_ZN3jxl6Bundle9CanEncodeERKNS_6FieldsEPmS4_(%"class.jxl::Fields"* dereferenceable(8) %0, i64* nonnull %5, i64* nonnull %6)
  %12 = icmp eq i32 %11, 0
  br i1 %12, label %13, label %41

13:                                               ; preds = %4
  %14 = bitcast %"class.jxl::BitWriter::Allotment"* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %14) #14
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %14, i8 -86, i64 40, i1 false)
  %15 = load i64, i64* %6, align 8
  call void @_ZN3jxl9BitWriter9AllotmentC1EPS0_m(%"class.jxl::BitWriter::Allotment"* nonnull %7, %"struct.jxl::BitWriter"* %1, i64 %15) #14
  %16 = bitcast %"class.jxl::(anonymous namespace)::WriteVisitor"* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 64, i8* nonnull %16) #14
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %16, i8 -86, i64 64, i1 false)
  %17 = load i64, i64* %5, align 8
  %18 = getelementptr inbounds %"class.jxl::(anonymous namespace)::WriteVisitor", %"class.jxl::(anonymous namespace)::WriteVisitor"* %8, i64 0, i32 0, i32 0, i32 0
  %19 = getelementptr inbounds %"class.jxl::(anonymous namespace)::WriteVisitor", %"class.jxl::(anonymous namespace)::WriteVisitor"* %8, i64 0, i32 0, i32 1
  %20 = bitcast i64* %19 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %20, i8 0, i64 25, i1 false) #14, !noalias !10
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [18 x i8*] }, { [18 x i8*] }* @_ZTVN3jxl12_GLOBAL__N_112WriteVisitorE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %18, align 8, !noalias !10
  %21 = getelementptr inbounds %"class.jxl::(anonymous namespace)::WriteVisitor", %"class.jxl::(anonymous namespace)::WriteVisitor"* %8, i64 0, i32 2
  store i64 %17, i64* %21, align 8, !noalias !10
  %22 = getelementptr inbounds %"class.jxl::(anonymous namespace)::WriteVisitor", %"class.jxl::(anonymous namespace)::WriteVisitor"* %8, i64 0, i32 3
  store %"struct.jxl::BitWriter"* %1, %"struct.jxl::BitWriter"** %22, align 8, !noalias !10
  %23 = getelementptr inbounds %"class.jxl::(anonymous namespace)::WriteVisitor", %"class.jxl::(anonymous namespace)::WriteVisitor"* %8, i64 0, i32 4
  store i8 1, i8* %23, align 8, !noalias !10
  %24 = bitcast %"class.jxl::(anonymous namespace)::WriteVisitor"* %8 to %"class.jxl::(anonymous namespace)::VisitorBase"*
  %25 = call i32 @_ZN3jxl12_GLOBAL__N_111VisitorBase5VisitEPNS_6FieldsEPKc(%"class.jxl::(anonymous namespace)::VisitorBase"* nonnull %24, %"class.jxl::Fields"* %0, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str, i64 0, i64 0)) #14
  %26 = icmp eq i32 %25, 0
  br i1 %26, label %27, label %33

27:                                               ; preds = %13
  %28 = load i8, i8* %23, align 8, !range !2
  %29 = xor i8 %28, 1
  %30 = zext i8 %29 to i32
  %31 = icmp eq i8 %29, 0
  br i1 %31, label %32, label %33

32:                                               ; preds = %27
  call void @_ZN3jxl16ReclaimAndChargeEPNS_9BitWriterEPNS0_9AllotmentEmPNS_6AuxOutE(%"struct.jxl::BitWriter"* %1, %"class.jxl::BitWriter::Allotment"* nonnull %7, i64 %2, %"struct.jxl::AuxOut"* %3) #14
  br label %33

33:                                               ; preds = %27, %13, %32
  %34 = phi i32 [ 0, %32 ], [ %25, %13 ], [ %30, %27 ]
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [18 x i8*] }, { [18 x i8*] }* @_ZTVN3jxl12_GLOBAL__N_111VisitorBaseE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %18, align 8
  %35 = load i64, i64* %19, align 8
  %36 = icmp eq i64 %35, 0
  br i1 %36, label %40, label %37

37:                                               ; preds = %33
  %38 = call zeroext i1 (i8*, ...) @_ZN3jxl5DebugEPKcz(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.5, i64 0, i64 0), i8* getelementptr inbounds ([47 x i8], [47 x i8]* @.str.2, i64 0, i64 0), i32 76, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.23, i64 0, i64 0)) #14
  %39 = call zeroext i1 @_ZN3jxl5AbortEv() #17
  unreachable

40:                                               ; preds = %33
  call void @llvm.lifetime.end.p0i8(i64 64, i8* nonnull %16) #14
  call void @_ZN3jxl9BitWriter9AllotmentD1Ev(%"class.jxl::BitWriter::Allotment"* nonnull %7) #14
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %14) #14
  br label %41

41:                                               ; preds = %4, %40
  %42 = phi i32 [ %34, %40 ], [ %11, %4 ]
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %10) #14
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %9) #14
  ret i32 %42
}

declare void @_ZN3jxl9BitWriter9AllotmentC1EPS0_m(%"class.jxl::BitWriter::Allotment"*, %"struct.jxl::BitWriter"*, i64) unnamed_addr #2

declare void @_ZN3jxl16ReclaimAndChargeEPNS_9BitWriterEPNS0_9AllotmentEmPNS_6AuxOutE(%"struct.jxl::BitWriter"*, %"class.jxl::BitWriter::Allotment"*, i64, %"struct.jxl::AuxOut"*) local_unnamed_addr #2

; Function Attrs: nounwind
declare void @_ZN3jxl9BitWriter9AllotmentD1Ev(%"class.jxl::BitWriter::Allotment"*) unnamed_addr #4

; Function Attrs: nounwind ssp uwtable
define hidden i64 @_ZN3jxl8U32Coder14MaxEncodedBitsENS_6U32EncE(i64, i64) local_unnamed_addr #0 align 2 {
  %3 = trunc i64 %0 to i32
  %4 = icmp slt i32 %3, 0
  %5 = lshr i64 %0, 32
  %6 = trunc i64 %5 to i32
  %7 = trunc i64 %1 to i32
  %8 = lshr i64 %1, 32
  %9 = trunc i64 %8 to i32
  %10 = and i64 %0, 31
  %11 = add nuw nsw i64 %10, 1
  %12 = select i1 %4, i64 0, i64 %11
  %13 = icmp slt i32 %6, 0
  br i1 %13, label %19, label %14

14:                                               ; preds = %2
  %15 = and i64 %5, 31
  %16 = add nuw nsw i64 %15, 1
  %17 = icmp ult i64 %12, %16
  %18 = select i1 %17, i64 %16, i64 %12
  br label %19

19:                                               ; preds = %14, %2
  %20 = phi i64 [ %12, %2 ], [ %18, %14 ]
  %21 = icmp slt i32 %7, 0
  br i1 %21, label %27, label %22

22:                                               ; preds = %19
  %23 = and i64 %1, 31
  %24 = add nuw nsw i64 %23, 1
  %25 = icmp ult i64 %20, %24
  %26 = select i1 %25, i64 %24, i64 %20
  br label %27

27:                                               ; preds = %22, %19
  %28 = phi i64 [ %20, %19 ], [ %26, %22 ]
  %29 = icmp slt i32 %9, 0
  br i1 %29, label %35, label %30

30:                                               ; preds = %27
  %31 = and i64 %8, 31
  %32 = add nuw nsw i64 %31, 1
  %33 = icmp ult i64 %28, %32
  %34 = select i1 %33, i64 %32, i64 %28
  br label %35

35:                                               ; preds = %30, %27
  %36 = phi i64 [ %28, %27 ], [ %34, %30 ]
  %37 = add nuw nsw i64 %36, 2
  ret i64 %37
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @_ZN3jxl8U32Coder9CanEncodeENS_6U32EncEjPm(i64, i64, i32, i64* noalias nocapture) local_unnamed_addr #0 align 2 {
  %5 = alloca i32, align 4
  %6 = alloca i64, align 8
  %7 = bitcast i32* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %7) #14
  store i32 -1431655766, i32* %5, align 4
  %8 = bitcast i64* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %8) #14
  store i64 -6148914691236517206, i64* %6, align 8
  %9 = call i32 @_ZN3jxl8U32Coder14ChooseSelectorENS_6U32EncEjPjPm(i64 %0, i64 %1, i32 %2, i32* nonnull %5, i64* nonnull %6)
  %10 = icmp eq i32 %9, 0
  %11 = load i64, i64* %6, align 8
  %12 = select i1 %10, i64 %11, i64 0
  store i64 %12, i64* %3, align 8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %8) #14
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %7) #14
  ret i32 %9
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @_ZN3jxl8U32Coder14ChooseSelectorENS_6U32EncEjPjPm(i64, i64, i32, i32* noalias nocapture, i64* noalias nocapture) local_unnamed_addr #0 align 2 {
  %6 = icmp eq i32 %2, 0
  %7 = trunc i64 %0 to i32
  %8 = lshr i64 %0, 32
  %9 = trunc i64 %8 to i32
  %10 = trunc i64 %1 to i32
  %11 = lshr i64 %1, 32
  %12 = trunc i64 %11 to i32
  br i1 %6, label %20, label %13

13:                                               ; preds = %5
  %14 = tail call i32 @llvm.ctlz.i32(i32 %2, i1 true) #14, !range !13
  %15 = sub nuw nsw i32 32, %14
  %16 = icmp ult i32 %15, 33
  br i1 %16, label %20, label %17

17:                                               ; preds = %13
  %18 = tail call zeroext i1 (i8*, ...) @_ZN3jxl5DebugEPKcz(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.5, i64 0, i64 0), i8* getelementptr inbounds ([47 x i8], [47 x i8]* @.str.2, i64 0, i64 0), i32 788, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.14, i64 0, i64 0)) #14
  %19 = tail call zeroext i1 @_ZN3jxl5AbortEv() #17
  unreachable

20:                                               ; preds = %5, %13
  store i32 0, i32* %3, align 4
  store i64 64, i64* %4, align 8
  %21 = zext i32 %2 to i64
  %22 = icmp slt i32 %7, 0
  br i1 %22, label %23, label %26

23:                                               ; preds = %20
  %24 = and i32 %7, 2147483647
  %25 = icmp eq i32 %24, %2
  br i1 %25, label %41, label %38

26:                                               ; preds = %20
  %27 = and i64 %0, 31
  %28 = lshr i32 %7, 5
  %29 = and i32 %28, 67108863
  %30 = icmp ugt i32 %29, %2
  br i1 %30, label %38, label %31

31:                                               ; preds = %26
  %32 = zext i32 %29 to i64
  %33 = shl i64 2, %27
  %34 = add nuw nsw i64 %33, %32
  %35 = icmp ugt i64 %34, %21
  br i1 %35, label %36, label %38

36:                                               ; preds = %31
  %37 = add nuw nsw i64 %27, 3
  store i32 0, i32* %3, align 4
  store i64 %37, i64* %4, align 8
  br label %38

38:                                               ; preds = %23, %31, %26, %36
  %39 = phi i64 [ 64, %23 ], [ 64, %31 ], [ 64, %26 ], [ %37, %36 ]
  %40 = icmp slt i32 %9, 0
  br i1 %40, label %58, label %43

41:                                               ; preds = %99, %78, %58, %23
  %42 = phi i32 [ 0, %23 ], [ 1, %58 ], [ 2, %78 ], [ 3, %99 ]
  store i32 %42, i32* %3, align 4
  store i64 2, i64* %4, align 8
  ret i32 0

43:                                               ; preds = %38
  %44 = and i64 %8, 31
  %45 = lshr i64 %0, 37
  %46 = trunc i64 %45 to i32
  %47 = and i32 %46, 67108863
  %48 = icmp ugt i32 %47, %2
  br i1 %48, label %61, label %49

49:                                               ; preds = %43
  %50 = zext i32 %47 to i64
  %51 = shl i64 2, %44
  %52 = add nuw nsw i64 %51, %50
  %53 = icmp ugt i64 %52, %21
  br i1 %53, label %54, label %61

54:                                               ; preds = %49
  %55 = add nuw nsw i64 %44, 3
  %56 = icmp ult i64 %55, %39
  br i1 %56, label %57, label %61

57:                                               ; preds = %54
  store i32 1, i32* %3, align 4
  store i64 %55, i64* %4, align 8
  br label %61

58:                                               ; preds = %38
  %59 = and i32 %9, 2147483647
  %60 = icmp eq i32 %59, %2
  br i1 %60, label %41, label %61

61:                                               ; preds = %58, %57, %54, %49, %43
  %62 = phi i64 [ %39, %58 ], [ %55, %57 ], [ %39, %54 ], [ %39, %49 ], [ %39, %43 ]
  %63 = icmp slt i32 %10, 0
  br i1 %63, label %78, label %64

64:                                               ; preds = %61
  %65 = and i64 %1, 31
  %66 = lshr i32 %10, 5
  %67 = and i32 %66, 67108863
  %68 = icmp ugt i32 %67, %2
  br i1 %68, label %81, label %69

69:                                               ; preds = %64
  %70 = zext i32 %67 to i64
  %71 = shl i64 2, %65
  %72 = add nuw nsw i64 %71, %70
  %73 = icmp ugt i64 %72, %21
  br i1 %73, label %74, label %81

74:                                               ; preds = %69
  %75 = add nuw nsw i64 %65, 3
  %76 = icmp ult i64 %75, %62
  br i1 %76, label %77, label %81

77:                                               ; preds = %74
  store i32 2, i32* %3, align 4
  store i64 %75, i64* %4, align 8
  br label %81

78:                                               ; preds = %61
  %79 = and i32 %10, 2147483647
  %80 = icmp eq i32 %79, %2
  br i1 %80, label %41, label %81

81:                                               ; preds = %78, %77, %74, %69, %64
  %82 = phi i64 [ %62, %78 ], [ %75, %77 ], [ %62, %74 ], [ %62, %69 ], [ %62, %64 ]
  %83 = icmp slt i32 %12, 0
  br i1 %83, label %99, label %84

84:                                               ; preds = %81
  %85 = and i64 %11, 31
  %86 = lshr i64 %1, 37
  %87 = trunc i64 %86 to i32
  %88 = and i32 %87, 67108863
  %89 = icmp ugt i32 %88, %2
  br i1 %89, label %102, label %90

90:                                               ; preds = %84
  %91 = zext i32 %88 to i64
  %92 = shl i64 2, %85
  %93 = add nuw nsw i64 %92, %91
  %94 = icmp ugt i64 %93, %21
  br i1 %94, label %95, label %102

95:                                               ; preds = %90
  %96 = add nuw nsw i64 %85, 3
  %97 = icmp ult i64 %96, %82
  br i1 %97, label %98, label %102

98:                                               ; preds = %95
  store i32 3, i32* %3, align 4
  store i64 %96, i64* %4, align 8
  br label %102

99:                                               ; preds = %81
  %100 = and i32 %12, 2147483647
  %101 = icmp eq i32 %100, %2
  br i1 %101, label %41, label %102

102:                                              ; preds = %99, %98, %95, %90, %84
  %103 = phi i64 [ %82, %99 ], [ %96, %98 ], [ %82, %95 ], [ %82, %90 ], [ %82, %84 ]
  %104 = icmp eq i64 %103, 64
  %105 = zext i1 %104 to i32
  ret i32 %105
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @_ZN3jxl8U32Coder4ReadENS_6U32EncEPNS_9BitReaderE(i64, i64, %"class.jxl::BitReader"* noalias) local_unnamed_addr #0 align 2 {
  %4 = alloca { i64, i64 }, align 8
  %5 = bitcast { i64, i64 }* %4 to %"class.jxl::U32Enc"*
  %6 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %4, i64 0, i32 0
  store i64 %0, i64* %6, align 8
  %7 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %4, i64 0, i32 1
  store i64 %1, i64* %7, align 8
  %8 = getelementptr inbounds %"class.jxl::BitReader", %"class.jxl::BitReader"* %2, i64 0, i32 2
  %9 = load i8*, i8** %8, align 8
  %10 = getelementptr inbounds %"class.jxl::BitReader", %"class.jxl::BitReader"* %2, i64 0, i32 3
  %11 = load i8*, i8** %10, align 8
  %12 = icmp ugt i8* %9, %11
  br i1 %12, label %13, label %18, !prof !14

13:                                               ; preds = %3
  tail call void @_ZN3jxl9BitReader19BoundsCheckedRefillEv(%"class.jxl::BitReader"* %2) #14
  %14 = getelementptr inbounds %"class.jxl::BitReader", %"class.jxl::BitReader"* %2, i64 0, i32 0
  %15 = load i64, i64* %14, align 8
  %16 = getelementptr inbounds %"class.jxl::BitReader", %"class.jxl::BitReader"* %2, i64 0, i32 1
  %17 = load i64, i64* %16, align 8
  br label %31

18:                                               ; preds = %3
  %19 = bitcast i8* %9 to i64*
  %20 = load i64, i64* %19, align 1
  %21 = getelementptr inbounds %"class.jxl::BitReader", %"class.jxl::BitReader"* %2, i64 0, i32 1
  %22 = load i64, i64* %21, align 8
  %23 = shl i64 %20, %22
  %24 = getelementptr inbounds %"class.jxl::BitReader", %"class.jxl::BitReader"* %2, i64 0, i32 0
  %25 = load i64, i64* %24, align 8
  %26 = or i64 %25, %23
  store i64 %26, i64* %24, align 8
  %27 = sub i64 63, %22
  %28 = lshr i64 %27, 3
  %29 = getelementptr inbounds i8, i8* %9, i64 %28
  store i8* %29, i8** %8, align 8
  %30 = or i64 %22, 56
  store i64 %30, i64* %21, align 8
  br label %31

31:                                               ; preds = %13, %18
  %32 = phi i64 [ %17, %13 ], [ %30, %18 ]
  %33 = phi i64 [ %15, %13 ], [ %26, %18 ]
  %34 = getelementptr inbounds %"class.jxl::BitReader", %"class.jxl::BitReader"* %2, i64 0, i32 0
  %35 = getelementptr inbounds %"class.jxl::BitReader", %"class.jxl::BitReader"* %2, i64 0, i32 1
  %36 = add i64 %32, -2
  store i64 %36, i64* %35, align 8
  %37 = lshr i64 %33, 2
  store i64 %37, i64* %34, align 8
  %38 = and i64 %33, 3
  %39 = getelementptr inbounds %"class.jxl::U32Enc", %"class.jxl::U32Enc"* %5, i64 0, i32 0, i64 %38, i32 0
  %40 = load i32, i32* %39, align 4
  %41 = icmp slt i32 %40, 0
  br i1 %41, label %42, label %44

42:                                               ; preds = %31
  %43 = and i32 %40, 2147483647
  br label %75

44:                                               ; preds = %31
  %45 = and i32 %40, 31
  %46 = add nuw nsw i32 %45, 1
  %47 = zext i32 %46 to i64
  %48 = load i8*, i8** %8, align 8
  %49 = load i8*, i8** %10, align 8
  %50 = icmp ugt i8* %48, %49
  br i1 %50, label %51, label %54, !prof !14

51:                                               ; preds = %44
  tail call void @_ZN3jxl9BitReader19BoundsCheckedRefillEv(%"class.jxl::BitReader"* %2) #14
  %52 = load i64, i64* %34, align 8
  %53 = load i64, i64* %35, align 8
  br label %63

54:                                               ; preds = %44
  %55 = bitcast i8* %48 to i64*
  %56 = load i64, i64* %55, align 1
  %57 = shl i64 %56, %36
  %58 = or i64 %57, %37
  store i64 %58, i64* %34, align 8
  %59 = sub i64 65, %32
  %60 = lshr i64 %59, 3
  %61 = getelementptr inbounds i8, i8* %48, i64 %60
  store i8* %61, i8** %8, align 8
  %62 = or i64 %36, 56
  store i64 %62, i64* %35, align 8
  br label %63

63:                                               ; preds = %51, %54
  %64 = phi i64 [ %53, %51 ], [ %62, %54 ]
  %65 = phi i64 [ %52, %51 ], [ %58, %54 ]
  %66 = shl nsw i64 -1, %47
  %67 = xor i64 %66, 4294967295
  %68 = and i64 %65, %67
  %69 = sub i64 %64, %47
  store i64 %69, i64* %35, align 8
  %70 = lshr i64 %65, %47
  store i64 %70, i64* %34, align 8
  %71 = lshr i32 %40, 5
  %72 = and i32 %71, 67108863
  %73 = trunc i64 %68 to i32
  %74 = add i32 %72, %73
  br label %75

75:                                               ; preds = %63, %42
  %76 = phi i32 [ %43, %42 ], [ %74, %63 ]
  ret i32 %76
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @_ZN3jxl8U32Coder5WriteENS_6U32EncEjPNS_9BitWriterE(i64, i64, i32, %"struct.jxl::BitWriter"* noalias) local_unnamed_addr #0 align 2 {
  %5 = alloca { i64, i64 }, align 8
  %6 = alloca i32, align 4
  %7 = alloca i64, align 8
  %8 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %5, i64 0, i32 0
  store i64 %0, i64* %8, align 8
  %9 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %5, i64 0, i32 1
  store i64 %1, i64* %9, align 8
  %10 = bitcast i32* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %10) #14
  store i32 -1431655766, i32* %6, align 4
  %11 = bitcast i64* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %11) #14
  store i64 -6148914691236517206, i64* %7, align 8
  %12 = call i32 @_ZN3jxl8U32Coder14ChooseSelectorENS_6U32EncEjPjPm(i64 %0, i64 %1, i32 %2, i32* nonnull %6, i64* nonnull %7)
  %13 = icmp eq i32 %12, 0
  br i1 %13, label %14, label %38

14:                                               ; preds = %4
  %15 = load i32, i32* %6, align 4
  %16 = zext i32 %15 to i64
  tail call void @_ZN3jxl9BitWriter5WriteEmm(%"struct.jxl::BitWriter"* %3, i64 2, i64 %16) #14
  %17 = icmp ult i32 %15, 4
  br i1 %17, label %21, label %18

18:                                               ; preds = %14
  %19 = tail call zeroext i1 (i8*, ...) @_ZN3jxl5DebugEPKcz(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.5, i64 0, i64 0), i8* getelementptr inbounds ([55 x i8], [55 x i8]* @.str.68, i64 0, i64 0), i32 82, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.69, i64 0, i64 0)) #14
  %20 = tail call zeroext i1 @_ZN3jxl5AbortEv() #17
  unreachable

21:                                               ; preds = %14
  %22 = bitcast { i64, i64 }* %5 to %"class.jxl::U32Enc"*
  %23 = getelementptr inbounds %"class.jxl::U32Enc", %"class.jxl::U32Enc"* %22, i64 0, i32 0, i64 %16, i32 0
  %24 = load i32, i32* %23, align 4
  %25 = icmp slt i32 %24, 0
  br i1 %25, label %38, label %26

26:                                               ; preds = %21
  %27 = lshr i32 %24, 5
  %28 = and i32 %27, 67108863
  %29 = icmp ugt i32 %28, %2
  br i1 %29, label %30, label %33

30:                                               ; preds = %26
  %31 = tail call zeroext i1 (i8*, ...) @_ZN3jxl5DebugEPKcz(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.5, i64 0, i64 0), i8* getelementptr inbounds ([47 x i8], [47 x i8]* @.str.2, i64 0, i64 0), i32 775, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.13, i64 0, i64 0)) #14
  %32 = tail call zeroext i1 @_ZN3jxl5AbortEv() #17
  unreachable

33:                                               ; preds = %26
  %34 = load i64, i64* %7, align 8
  %35 = add i64 %34, -2
  %36 = sub i32 %2, %28
  %37 = zext i32 %36 to i64
  tail call void @_ZN3jxl9BitWriter5WriteEmm(%"struct.jxl::BitWriter"* %3, i64 %35, i64 %37) #14
  br label %38

38:                                               ; preds = %21, %33, %4
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %11) #14
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %10) #14
  ret i32 %12
}

declare void @_ZN3jxl9BitWriter5WriteEmm(%"struct.jxl::BitWriter"*, i64, i64) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden i64 @_ZN3jxl8U64Coder4ReadEPNS_9BitReaderE(%"class.jxl::BitReader"* noalias) local_unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.jxl::BitReader", %"class.jxl::BitReader"* %0, i64 0, i32 2
  %3 = load i8*, i8** %2, align 8
  %4 = getelementptr inbounds %"class.jxl::BitReader", %"class.jxl::BitReader"* %0, i64 0, i32 3
  %5 = load i8*, i8** %4, align 8
  %6 = icmp ugt i8* %3, %5
  br i1 %6, label %7, label %12, !prof !14

7:                                                ; preds = %1
  tail call void @_ZN3jxl9BitReader19BoundsCheckedRefillEv(%"class.jxl::BitReader"* %0) #14
  %8 = getelementptr inbounds %"class.jxl::BitReader", %"class.jxl::BitReader"* %0, i64 0, i32 0
  %9 = load i64, i64* %8, align 8
  %10 = getelementptr inbounds %"class.jxl::BitReader", %"class.jxl::BitReader"* %0, i64 0, i32 1
  %11 = load i64, i64* %10, align 8
  br label %25

12:                                               ; preds = %1
  %13 = bitcast i8* %3 to i64*
  %14 = load i64, i64* %13, align 1
  %15 = getelementptr inbounds %"class.jxl::BitReader", %"class.jxl::BitReader"* %0, i64 0, i32 1
  %16 = load i64, i64* %15, align 8
  %17 = shl i64 %14, %16
  %18 = getelementptr inbounds %"class.jxl::BitReader", %"class.jxl::BitReader"* %0, i64 0, i32 0
  %19 = load i64, i64* %18, align 8
  %20 = or i64 %19, %17
  store i64 %20, i64* %18, align 8
  %21 = sub i64 63, %16
  %22 = lshr i64 %21, 3
  %23 = getelementptr inbounds i8, i8* %3, i64 %22
  store i8* %23, i8** %2, align 8
  %24 = or i64 %16, 56
  store i64 %24, i64* %15, align 8
  br label %25

25:                                               ; preds = %7, %12
  %26 = phi i64 [ %11, %7 ], [ %24, %12 ]
  %27 = phi i64 [ %9, %7 ], [ %20, %12 ]
  %28 = getelementptr inbounds %"class.jxl::BitReader", %"class.jxl::BitReader"* %0, i64 0, i32 0
  %29 = and i64 %27, 3
  %30 = getelementptr inbounds %"class.jxl::BitReader", %"class.jxl::BitReader"* %0, i64 0, i32 1
  %31 = add i64 %26, -2
  store i64 %31, i64* %30, align 8
  %32 = lshr i64 %27, 2
  store i64 %32, i64* %28, align 8
  switch i64 %29, label %79 [
    i64 0, label %175
    i64 1, label %33
    i64 2, label %56
  ]

33:                                               ; preds = %25
  %34 = load i8*, i8** %2, align 8
  %35 = load i8*, i8** %4, align 8
  %36 = icmp ugt i8* %34, %35
  br i1 %36, label %37, label %40, !prof !14

37:                                               ; preds = %33
  tail call void @_ZN3jxl9BitReader19BoundsCheckedRefillEv(%"class.jxl::BitReader"* %0) #14
  %38 = load i64, i64* %28, align 8
  %39 = load i64, i64* %30, align 8
  br label %49

40:                                               ; preds = %33
  %41 = bitcast i8* %34 to i64*
  %42 = load i64, i64* %41, align 1
  %43 = shl i64 %42, %31
  %44 = or i64 %43, %32
  store i64 %44, i64* %28, align 8
  %45 = sub i64 65, %26
  %46 = lshr i64 %45, 3
  %47 = getelementptr inbounds i8, i8* %34, i64 %46
  store i8* %47, i8** %2, align 8
  %48 = or i64 %31, 56
  store i64 %48, i64* %30, align 8
  br label %49

49:                                               ; preds = %37, %40
  %50 = phi i64 [ %39, %37 ], [ %48, %40 ]
  %51 = phi i64 [ %38, %37 ], [ %44, %40 ]
  %52 = and i64 %51, 15
  %53 = add i64 %50, -4
  store i64 %53, i64* %30, align 8
  %54 = lshr i64 %51, 4
  store i64 %54, i64* %28, align 8
  %55 = add nuw nsw i64 %52, 1
  br label %175

56:                                               ; preds = %25
  %57 = load i8*, i8** %2, align 8
  %58 = load i8*, i8** %4, align 8
  %59 = icmp ugt i8* %57, %58
  br i1 %59, label %60, label %63, !prof !14

60:                                               ; preds = %56
  tail call void @_ZN3jxl9BitReader19BoundsCheckedRefillEv(%"class.jxl::BitReader"* %0) #14
  %61 = load i64, i64* %28, align 8
  %62 = load i64, i64* %30, align 8
  br label %72

63:                                               ; preds = %56
  %64 = bitcast i8* %57 to i64*
  %65 = load i64, i64* %64, align 1
  %66 = shl i64 %65, %31
  %67 = or i64 %66, %32
  store i64 %67, i64* %28, align 8
  %68 = sub i64 65, %26
  %69 = lshr i64 %68, 3
  %70 = getelementptr inbounds i8, i8* %57, i64 %69
  store i8* %70, i8** %2, align 8
  %71 = or i64 %31, 56
  store i64 %71, i64* %30, align 8
  br label %72

72:                                               ; preds = %60, %63
  %73 = phi i64 [ %62, %60 ], [ %71, %63 ]
  %74 = phi i64 [ %61, %60 ], [ %67, %63 ]
  %75 = and i64 %74, 255
  %76 = add i64 %73, -8
  store i64 %76, i64* %30, align 8
  %77 = lshr i64 %74, 8
  store i64 %77, i64* %28, align 8
  %78 = add nuw nsw i64 %75, 17
  br label %175

79:                                               ; preds = %25
  %80 = load i8*, i8** %2, align 8
  %81 = load i8*, i8** %4, align 8
  %82 = icmp ugt i8* %80, %81
  br i1 %82, label %83, label %86, !prof !14

83:                                               ; preds = %79
  tail call void @_ZN3jxl9BitReader19BoundsCheckedRefillEv(%"class.jxl::BitReader"* %0) #14
  %84 = load i64, i64* %28, align 8
  %85 = load i64, i64* %30, align 8
  br label %95

86:                                               ; preds = %79
  %87 = bitcast i8* %80 to i64*
  %88 = load i64, i64* %87, align 1
  %89 = shl i64 %88, %31
  %90 = or i64 %89, %32
  store i64 %90, i64* %28, align 8
  %91 = sub i64 65, %26
  %92 = lshr i64 %91, 3
  %93 = getelementptr inbounds i8, i8* %80, i64 %92
  store i8* %93, i8** %2, align 8
  %94 = or i64 %31, 56
  store i64 %94, i64* %30, align 8
  br label %95

95:                                               ; preds = %83, %86
  %96 = phi i64 [ %85, %83 ], [ %94, %86 ]
  %97 = phi i64 [ %84, %83 ], [ %90, %86 ]
  %98 = and i64 %97, 4095
  %99 = add i64 %96, -12
  store i64 %99, i64* %30, align 8
  %100 = lshr i64 %97, 12
  store i64 %100, i64* %28, align 8
  br label %101

101:                                              ; preds = %166, %95
  %102 = phi i64 [ %100, %95 ], [ %171, %166 ]
  %103 = phi i64 [ %99, %95 ], [ %170, %166 ]
  %104 = phi i64 [ %98, %95 ], [ %173, %166 ]
  %105 = phi i64 [ 12, %95 ], [ %174, %166 ]
  %106 = load i8*, i8** %2, align 8
  %107 = load i8*, i8** %4, align 8
  %108 = icmp ugt i8* %106, %107
  br i1 %108, label %109, label %112, !prof !14

109:                                              ; preds = %101
  tail call void @_ZN3jxl9BitReader19BoundsCheckedRefillEv(%"class.jxl::BitReader"* %0) #14
  %110 = load i64, i64* %28, align 8
  %111 = load i64, i64* %30, align 8
  br label %121

112:                                              ; preds = %101
  %113 = bitcast i8* %106 to i64*
  %114 = load i64, i64* %113, align 1
  %115 = shl i64 %114, %103
  %116 = or i64 %102, %115
  store i64 %116, i64* %28, align 8
  %117 = sub i64 63, %103
  %118 = lshr i64 %117, 3
  %119 = getelementptr inbounds i8, i8* %106, i64 %118
  store i8* %119, i8** %2, align 8
  %120 = or i64 %103, 56
  store i64 %120, i64* %30, align 8
  br label %121

121:                                              ; preds = %109, %112
  %122 = phi i64 [ %111, %109 ], [ %120, %112 ]
  %123 = phi i64 [ %110, %109 ], [ %116, %112 ]
  %124 = and i64 %123, 1
  %125 = add i64 %122, -1
  store i64 %125, i64* %30, align 8
  %126 = lshr i64 %123, 1
  store i64 %126, i64* %28, align 8
  %127 = icmp eq i64 %124, 0
  br i1 %127, label %175, label %128

128:                                              ; preds = %121
  %129 = icmp eq i64 %105, 60
  %130 = load i8*, i8** %2, align 8
  %131 = load i8*, i8** %4, align 8
  %132 = icmp ugt i8* %130, %131
  br i1 %129, label %133, label %153

133:                                              ; preds = %128
  br i1 %132, label %134, label %137, !prof !14

134:                                              ; preds = %133
  tail call void @_ZN3jxl9BitReader19BoundsCheckedRefillEv(%"class.jxl::BitReader"* %0) #14
  %135 = load i64, i64* %28, align 8
  %136 = load i64, i64* %30, align 8
  br label %146

137:                                              ; preds = %133
  %138 = bitcast i8* %130 to i64*
  %139 = load i64, i64* %138, align 1
  %140 = shl i64 %139, %125
  %141 = or i64 %140, %126
  store i64 %141, i64* %28, align 8
  %142 = sub i64 64, %122
  %143 = lshr i64 %142, 3
  %144 = getelementptr inbounds i8, i8* %130, i64 %143
  store i8* %144, i8** %2, align 8
  %145 = or i64 %125, 56
  store i64 %145, i64* %30, align 8
  br label %146

146:                                              ; preds = %134, %137
  %147 = phi i64 [ %136, %134 ], [ %145, %137 ]
  %148 = phi i64 [ %135, %134 ], [ %141, %137 ]
  %149 = add i64 %147, -4
  store i64 %149, i64* %30, align 8
  %150 = lshr i64 %148, 4
  store i64 %150, i64* %28, align 8
  %151 = shl i64 %148, 60
  %152 = or i64 %151, %104
  br label %175

153:                                              ; preds = %128
  br i1 %132, label %154, label %157, !prof !14

154:                                              ; preds = %153
  tail call void @_ZN3jxl9BitReader19BoundsCheckedRefillEv(%"class.jxl::BitReader"* %0) #14
  %155 = load i64, i64* %28, align 8
  %156 = load i64, i64* %30, align 8
  br label %166

157:                                              ; preds = %153
  %158 = bitcast i8* %130 to i64*
  %159 = load i64, i64* %158, align 1
  %160 = shl i64 %159, %125
  %161 = or i64 %160, %126
  store i64 %161, i64* %28, align 8
  %162 = sub i64 64, %122
  %163 = lshr i64 %162, 3
  %164 = getelementptr inbounds i8, i8* %130, i64 %163
  store i8* %164, i8** %2, align 8
  %165 = or i64 %125, 56
  store i64 %165, i64* %30, align 8
  br label %166

166:                                              ; preds = %154, %157
  %167 = phi i64 [ %156, %154 ], [ %165, %157 ]
  %168 = phi i64 [ %155, %154 ], [ %161, %157 ]
  %169 = and i64 %168, 255
  %170 = add i64 %167, -8
  store i64 %170, i64* %30, align 8
  %171 = lshr i64 %168, 8
  store i64 %171, i64* %28, align 8
  %172 = shl i64 %169, %105
  %173 = or i64 %172, %104
  %174 = add nuw nsw i64 %105, 8
  br label %101

175:                                              ; preds = %121, %146, %25, %72, %49
  %176 = phi i64 [ %55, %49 ], [ %78, %72 ], [ %29, %25 ], [ %152, %146 ], [ %104, %121 ]
  ret i64 %176
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @_ZN3jxl8U64Coder5WriteEmPNS_9BitWriterE(i64, %"struct.jxl::BitWriter"* noalias) local_unnamed_addr #0 align 2 {
  %3 = icmp eq i64 %0, 0
  br i1 %3, label %4, label %5

4:                                                ; preds = %2
  tail call void @_ZN3jxl9BitWriter5WriteEmm(%"struct.jxl::BitWriter"* %1, i64 2, i64 0) #14
  br label %30

5:                                                ; preds = %2
  %6 = icmp ult i64 %0, 17
  br i1 %6, label %7, label %9

7:                                                ; preds = %5
  tail call void @_ZN3jxl9BitWriter5WriteEmm(%"struct.jxl::BitWriter"* %1, i64 2, i64 1) #14
  %8 = add nsw i64 %0, -1
  tail call void @_ZN3jxl9BitWriter5WriteEmm(%"struct.jxl::BitWriter"* %1, i64 4, i64 %8) #14
  br label %30

9:                                                ; preds = %5
  %10 = icmp ult i64 %0, 273
  br i1 %10, label %11, label %13

11:                                               ; preds = %9
  tail call void @_ZN3jxl9BitWriter5WriteEmm(%"struct.jxl::BitWriter"* %1, i64 2, i64 2) #14
  %12 = add nsw i64 %0, -17
  tail call void @_ZN3jxl9BitWriter5WriteEmm(%"struct.jxl::BitWriter"* %1, i64 8, i64 %12) #14
  br label %30

13:                                               ; preds = %9
  tail call void @_ZN3jxl9BitWriter5WriteEmm(%"struct.jxl::BitWriter"* %1, i64 2, i64 3) #14
  %14 = and i64 %0, 4095
  tail call void @_ZN3jxl9BitWriter5WriteEmm(%"struct.jxl::BitWriter"* %1, i64 12, i64 %14) #14
  %15 = lshr i64 %0, 12
  %16 = icmp eq i64 %15, 0
  br i1 %16, label %29, label %17

17:                                               ; preds = %13, %17
  %18 = phi i32 [ %22, %17 ], [ 12, %13 ]
  %19 = phi i64 [ %21, %17 ], [ %15, %13 ]
  tail call void @_ZN3jxl9BitWriter5WriteEmm(%"struct.jxl::BitWriter"* %1, i64 1, i64 1) #14
  %20 = and i64 %19, 255
  tail call void @_ZN3jxl9BitWriter5WriteEmm(%"struct.jxl::BitWriter"* %1, i64 8, i64 %20) #14
  %21 = lshr i64 %19, 8
  %22 = add nuw nsw i32 %18, 8
  %23 = icmp ne i64 %21, 0
  %24 = icmp ult i32 %22, 60
  %25 = and i1 %23, %24
  br i1 %25, label %17, label %26

26:                                               ; preds = %17
  br i1 %23, label %27, label %29

27:                                               ; preds = %26
  %28 = and i64 %21, 15
  tail call void @_ZN3jxl9BitWriter5WriteEmm(%"struct.jxl::BitWriter"* %1, i64 1, i64 1) #14
  tail call void @_ZN3jxl9BitWriter5WriteEmm(%"struct.jxl::BitWriter"* %1, i64 4, i64 %28) #14
  br label %30

29:                                               ; preds = %13, %26
  tail call void @_ZN3jxl9BitWriter5WriteEmm(%"struct.jxl::BitWriter"* %1, i64 1, i64 0) #14
  br label %30

30:                                               ; preds = %27, %29, %7, %11, %4
  ret i32 0
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden i32 @_ZN3jxl8U64Coder9CanEncodeEmPm(i64, i64* noalias nocapture) local_unnamed_addr #5 align 2 {
  %3 = icmp eq i64 %0, 0
  br i1 %3, label %20, label %4

4:                                                ; preds = %2
  %5 = icmp ult i64 %0, 17
  br i1 %5, label %20, label %6

6:                                                ; preds = %4
  %7 = icmp ult i64 %0, 273
  br i1 %7, label %20, label %8

8:                                                ; preds = %6
  store i64 14, i64* %1, align 8
  %9 = icmp ult i64 %0, 4096
  br i1 %9, label %16, label %10

10:                                               ; preds = %8
  %11 = icmp ugt i64 %0, 1048575
  br i1 %11, label %22, label %12

12:                                               ; preds = %28, %26, %24, %22, %10
  %13 = phi i64 [ 23, %10 ], [ 32, %22 ], [ 41, %24 ], [ 50, %26 ], [ %31, %28 ]
  %14 = phi i1 [ %11, %10 ], [ %23, %22 ], [ %25, %24 ], [ %27, %26 ], [ %32, %28 ]
  store i64 %13, i64* %1, align 8
  %15 = select i1 %14, i64 5, i64 1
  br label %16

16:                                               ; preds = %8, %12
  %17 = phi i64 [ %15, %12 ], [ 1, %8 ]
  %18 = phi i64 [ %13, %12 ], [ 14, %8 ]
  %19 = add nsw i64 %18, %17
  br label %20

20:                                               ; preds = %6, %4, %2, %16
  %21 = phi i64 [ %19, %16 ], [ 2, %2 ], [ 6, %4 ], [ 10, %6 ]
  store i64 %21, i64* %1, align 8
  ret i32 0

22:                                               ; preds = %10
  %23 = icmp ugt i64 %0, 268435455
  br i1 %23, label %24, label %12

24:                                               ; preds = %22
  %25 = icmp ugt i64 %0, 68719476735
  br i1 %25, label %26, label %12

26:                                               ; preds = %24
  %27 = icmp ugt i64 %0, 17592186044415
  br i1 %27, label %28, label %12

28:                                               ; preds = %26
  %29 = icmp ugt i64 %0, 4503599627370495
  %30 = icmp ugt i64 %0, 1152921504606846975
  %31 = select i1 %29, i64 68, i64 59
  %32 = select i1 %29, i1 %30, i1 %29
  br label %12
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @_ZN3jxl8F16Coder4ReadEPNS_9BitReaderEPf(%"class.jxl::BitReader"* noalias, float* noalias nocapture) local_unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"class.jxl::BitReader", %"class.jxl::BitReader"* %0, i64 0, i32 2
  %4 = load i8*, i8** %3, align 8
  %5 = getelementptr inbounds %"class.jxl::BitReader", %"class.jxl::BitReader"* %0, i64 0, i32 3
  %6 = load i8*, i8** %5, align 8
  %7 = icmp ugt i8* %4, %6
  br i1 %7, label %8, label %13, !prof !14

8:                                                ; preds = %2
  tail call void @_ZN3jxl9BitReader19BoundsCheckedRefillEv(%"class.jxl::BitReader"* %0) #14
  %9 = getelementptr inbounds %"class.jxl::BitReader", %"class.jxl::BitReader"* %0, i64 0, i32 0
  %10 = load i64, i64* %9, align 8
  %11 = getelementptr inbounds %"class.jxl::BitReader", %"class.jxl::BitReader"* %0, i64 0, i32 1
  %12 = load i64, i64* %11, align 8
  br label %26

13:                                               ; preds = %2
  %14 = bitcast i8* %4 to i64*
  %15 = load i64, i64* %14, align 1
  %16 = getelementptr inbounds %"class.jxl::BitReader", %"class.jxl::BitReader"* %0, i64 0, i32 1
  %17 = load i64, i64* %16, align 8
  %18 = shl i64 %15, %17
  %19 = getelementptr inbounds %"class.jxl::BitReader", %"class.jxl::BitReader"* %0, i64 0, i32 0
  %20 = load i64, i64* %19, align 8
  %21 = or i64 %20, %18
  store i64 %21, i64* %19, align 8
  %22 = sub i64 63, %17
  %23 = lshr i64 %22, 3
  %24 = getelementptr inbounds i8, i8* %4, i64 %23
  store i8* %24, i8** %3, align 8
  %25 = or i64 %17, 56
  store i64 %25, i64* %16, align 8
  br label %26

26:                                               ; preds = %8, %13
  %27 = phi i64 [ %12, %8 ], [ %25, %13 ]
  %28 = phi i64 [ %10, %8 ], [ %21, %13 ]
  %29 = getelementptr inbounds %"class.jxl::BitReader", %"class.jxl::BitReader"* %0, i64 0, i32 0
  %30 = getelementptr inbounds %"class.jxl::BitReader", %"class.jxl::BitReader"* %0, i64 0, i32 1
  %31 = add i64 %27, -16
  store i64 %31, i64* %30, align 8
  %32 = lshr i64 %28, 16
  store i64 %32, i64* %29, align 8
  %33 = trunc i64 %28 to i32
  %34 = lshr i32 %33, 15
  %35 = and i32 %34, 1
  %36 = lshr i32 %33, 10
  %37 = and i32 %36, 31
  %38 = and i32 %33, 1023
  switch i32 %37, label %46 [
    i32 31, label %54
    i32 0, label %39
  ], !prof !15

39:                                               ; preds = %26
  %40 = uitofp i32 %38 to float
  %41 = fmul float %40, 0x3F50000000000000
  %42 = fmul float %41, 0x3F10000000000000
  %43 = icmp eq i32 %35, 0
  %44 = fsub float -0.000000e+00, %42
  %45 = select i1 %43, float %42, float %44
  store float %45, float* %1, align 4
  br label %54

46:                                               ; preds = %26
  %47 = shl nuw nsw i32 %38, 13
  %48 = shl nuw i32 %35, 31
  %49 = shl nuw nsw i32 %37, 23
  %50 = add nuw nsw i32 %49, 939524096
  %51 = or i32 %48, %47
  %52 = or i32 %51, %50
  %53 = bitcast float* %1 to i32*
  store i32 %52, i32* %53, align 4
  br label %54

54:                                               ; preds = %26, %46, %39
  %55 = phi i32 [ 0, %46 ], [ 0, %39 ], [ 1, %26 ]
  ret i32 %55
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @_ZN3jxl8F16Coder5WriteEfPNS_9BitWriterE(float, %"struct.jxl::BitWriter"* noalias) local_unnamed_addr #0 align 2 {
  %3 = bitcast float %0 to i32
  %4 = lshr i32 %3, 31
  %5 = lshr i32 %3, 23
  %6 = and i32 %5, 255
  %7 = and i32 %3, 8388607
  %8 = add nsw i32 %6, -127
  %9 = icmp sgt i32 %8, 15
  br i1 %9, label %38, label %10, !prof !14

10:                                               ; preds = %2
  %11 = icmp slt i32 %8, -24
  br i1 %11, label %36, label %12

12:                                               ; preds = %10
  %13 = icmp slt i32 %8, -14
  br i1 %13, label %14, label %20, !prof !14

14:                                               ; preds = %12
  %15 = add nsw i32 %6, -103
  %16 = shl i32 1, %15
  %17 = sub nuw nsw i32 126, %6
  %18 = lshr i32 %7, %17
  %19 = add nuw nsw i32 %16, %18
  br label %24

20:                                               ; preds = %12
  %21 = lshr i32 %7, 13
  %22 = shl nuw nsw i32 %6, 10
  %23 = add nsw i32 %22, -114688
  br label %24

24:                                               ; preds = %20, %14
  %25 = phi i32 [ 0, %14 ], [ %23, %20 ]
  %26 = phi i32 [ %19, %14 ], [ %21, %20 ]
  %27 = shl nuw nsw i32 %4, 15
  %28 = or i32 %25, %27
  %29 = or i32 %28, %26
  %30 = icmp ult i32 %29, 65536
  br i1 %30, label %34, label %31

31:                                               ; preds = %24
  %32 = tail call zeroext i1 (i8*, ...) @_ZN3jxl5DebugEPKcz(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.5, i64 0, i64 0), i8* getelementptr inbounds ([47 x i8], [47 x i8]* @.str.2, i64 0, i64 0), i32 981, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.21, i64 0, i64 0)) #14
  %33 = tail call zeroext i1 @_ZN3jxl5AbortEv() #17
  unreachable

34:                                               ; preds = %24
  %35 = zext i32 %29 to i64
  br label %36

36:                                               ; preds = %10, %34
  %37 = phi i64 [ %35, %34 ], [ 0, %10 ]
  tail call void @_ZN3jxl9BitWriter5WriteEmm(%"struct.jxl::BitWriter"* %1, i64 16, i64 %37) #14
  br label %38

38:                                               ; preds = %36, %2
  %39 = phi i32 [ 1, %2 ], [ 0, %36 ]
  ret i32 %39
}

; Function Attrs: nofree nounwind ssp uwtable writeonly
define hidden i32 @_ZN3jxl8F16Coder9CanEncodeEfPm(float, i64* noalias nocapture) local_unnamed_addr #6 align 2 {
  store i64 16, i64* %1, align 8
  %3 = fcmp uno float %0, 0.000000e+00
  %4 = tail call float @llvm.fabs.f32(float %0) #18
  %5 = fcmp oeq float %4, 0x7FF0000000000000
  %6 = or i1 %3, %5
  %7 = fcmp ugt float %4, 6.550400e+04
  %8 = or i1 %6, %7
  %9 = zext i1 %8 to i32
  ret i32 %9
}

; Function Attrs: inlinehint nounwind ssp uwtable
define internal void @_ZN3jxl12_GLOBAL__N_111InitVisitorD0Ev(%"struct.jxl::(anonymous namespace)::InitVisitor"*) unnamed_addr #7 align 2 {
  %2 = getelementptr inbounds %"struct.jxl::(anonymous namespace)::InitVisitor", %"struct.jxl::(anonymous namespace)::InitVisitor"* %0, i64 0, i32 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [18 x i8*] }, { [18 x i8*] }* @_ZTVN3jxl12_GLOBAL__N_111VisitorBaseE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %2, align 8
  %3 = getelementptr inbounds %"struct.jxl::(anonymous namespace)::InitVisitor", %"struct.jxl::(anonymous namespace)::InitVisitor"* %0, i64 0, i32 0, i32 1
  %4 = load i64, i64* %3, align 8
  %5 = icmp eq i64 %4, 0
  br i1 %5, label %9, label %6

6:                                                ; preds = %1
  %7 = tail call zeroext i1 (i8*, ...) @_ZN3jxl5DebugEPKcz(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.5, i64 0, i64 0), i8* getelementptr inbounds ([47 x i8], [47 x i8]* @.str.2, i64 0, i64 0), i32 76, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.23, i64 0, i64 0)) #14
  %8 = tail call zeroext i1 @_ZN3jxl5AbortEv() #17
  unreachable

9:                                                ; preds = %1
  %10 = bitcast %"struct.jxl::(anonymous namespace)::InitVisitor"* %0 to i8*
  tail call void @_ZdlPv(i8* %10) #19
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable writeonly
define internal i32 @_ZN3jxl12_GLOBAL__N_111InitVisitor4BoolEbPb(%"struct.jxl::(anonymous namespace)::InitVisitor"* nocapture readnone, i1 zeroext, i8* noalias nocapture) unnamed_addr #8 align 2 {
  %4 = zext i1 %1 to i8
  store i8 %4, i8* %2, align 1
  ret i32 0
}

; Function Attrs: nofree norecurse nounwind ssp uwtable writeonly
define internal i32 @_ZN3jxl12_GLOBAL__N_111InitVisitor3U32ENS_6U32EncEjPj(%"struct.jxl::(anonymous namespace)::InitVisitor"* nocapture readnone, i64, i64, i32, i32* noalias nocapture) unnamed_addr #8 align 2 {
  store i32 %3, i32* %4, align 4
  ret i32 0
}

; Function Attrs: nofree norecurse nounwind ssp uwtable writeonly
define internal i32 @_ZN3jxl12_GLOBAL__N_111InitVisitor4BitsEmjPj(%"struct.jxl::(anonymous namespace)::InitVisitor"* nocapture readnone, i64, i32, i32* noalias nocapture) unnamed_addr #8 align 2 {
  store i32 %2, i32* %3, align 4
  ret i32 0
}

; Function Attrs: nofree norecurse nounwind ssp uwtable writeonly
define internal i32 @_ZN3jxl12_GLOBAL__N_111InitVisitor3U64EmPm(%"struct.jxl::(anonymous namespace)::InitVisitor"* nocapture readnone, i64, i64* noalias nocapture) unnamed_addr #8 align 2 {
  store i64 %1, i64* %2, align 8
  ret i32 0
}

; Function Attrs: nofree norecurse nounwind ssp uwtable writeonly
define internal i32 @_ZN3jxl12_GLOBAL__N_111InitVisitor3F16EfPf(%"struct.jxl::(anonymous namespace)::InitVisitor"* nocapture readnone, float, float* noalias nocapture) unnamed_addr #8 align 2 {
  store float %1, float* %2, align 4
  ret i32 0
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define internal i32 @_ZN3jxl12_GLOBAL__N_111InitVisitor11ConditionalEb(%"struct.jxl::(anonymous namespace)::InitVisitor"* nocapture readnone, i1 zeroext) unnamed_addr #9 align 2 {
  ret i32 0
}

; Function Attrs: nounwind ssp uwtable
define internal i32 @_ZN3jxl12_GLOBAL__N_111InitVisitor10AllDefaultERKNS_6FieldsEPb(%"struct.jxl::(anonymous namespace)::InitVisitor"*, %"class.jxl::Fields"* nocapture readnone dereferenceable(8), i8* noalias) unnamed_addr #0 align 2 {
  %4 = bitcast %"struct.jxl::(anonymous namespace)::InitVisitor"* %0 to i32 (%"struct.jxl::(anonymous namespace)::InitVisitor"*, i1, i8*)***
  %5 = load i32 (%"struct.jxl::(anonymous namespace)::InitVisitor"*, i1, i8*)**, i32 (%"struct.jxl::(anonymous namespace)::InitVisitor"*, i1, i8*)*** %4, align 8
  %6 = getelementptr inbounds i32 (%"struct.jxl::(anonymous namespace)::InitVisitor"*, i1, i8*)*, i32 (%"struct.jxl::(anonymous namespace)::InitVisitor"*, i1, i8*)** %5, i64 3
  %7 = load i32 (%"struct.jxl::(anonymous namespace)::InitVisitor"*, i1, i8*)*, i32 (%"struct.jxl::(anonymous namespace)::InitVisitor"*, i1, i8*)** %6, align 8
  %8 = tail call i32 %7(%"struct.jxl::(anonymous namespace)::InitVisitor"* %0, i1 zeroext true, i8* %2) #14
  %9 = icmp eq i32 %8, 0
  %10 = select i1 %9, i32 1, i32 %8
  ret i32 %10
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN3jxl7Visitor10SetDefaultEPNS_6FieldsE(%"class.jxl::Visitor"*, %"class.jxl::Fields"*) unnamed_addr #0 comdat align 2 {
  ret void
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define internal i32 @_ZN3jxl12_GLOBAL__N_111InitVisitor11VisitNestedEPNS_6FieldsE(%"struct.jxl::(anonymous namespace)::InitVisitor"* nocapture readnone, %"class.jxl::Fields"* nocapture readnone) unnamed_addr #9 align 2 {
  ret i32 0
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZNK3jxl7Visitor9IsReadingEv(%"class.jxl::Visitor"*) unnamed_addr #0 comdat align 2 {
  ret i1 false
}

; Function Attrs: nounwind ssp uwtable
define internal i32 @_ZN3jxl12_GLOBAL__N_111VisitorBase15BeginExtensionsEPm(%"class.jxl::(anonymous namespace)::VisitorBase"*, i64* noalias) unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"class.jxl::(anonymous namespace)::VisitorBase", %"class.jxl::(anonymous namespace)::VisitorBase"* %0, i64 0, i32 0
  %4 = bitcast %"class.jxl::(anonymous namespace)::VisitorBase"* %0 to i32 (%"class.jxl::Visitor"*, i64, i64*)***
  %5 = load i32 (%"class.jxl::Visitor"*, i64, i64*)**, i32 (%"class.jxl::Visitor"*, i64, i64*)*** %4, align 8
  %6 = getelementptr inbounds i32 (%"class.jxl::Visitor"*, i64, i64*)*, i32 (%"class.jxl::Visitor"*, i64, i64*)** %5, i64 6
  %7 = load i32 (%"class.jxl::Visitor"*, i64, i64*)*, i32 (%"class.jxl::Visitor"*, i64, i64*)** %6, align 8
  %8 = tail call i32 %7(%"class.jxl::Visitor"* %3, i64 0, i64* %1) #14
  %9 = icmp eq i32 %8, 0
  br i1 %9, label %10, label %28

10:                                               ; preds = %2
  %11 = getelementptr inbounds %"class.jxl::(anonymous namespace)::VisitorBase", %"class.jxl::(anonymous namespace)::VisitorBase"* %0, i64 0, i32 2, i32 0
  %12 = load i64, i64* %11, align 8
  %13 = and i64 %12, 1
  %14 = icmp eq i64 %13, 0
  br i1 %14, label %18, label %15

15:                                               ; preds = %10
  %16 = tail call zeroext i1 (i8*, ...) @_ZN3jxl5DebugEPKcz(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.5, i64 0, i64 0), i8* getelementptr inbounds ([47 x i8], [47 x i8]* @.str.2, i64 0, i64 0), i32 51, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.28, i64 0, i64 0)) #14
  %17 = tail call zeroext i1 @_ZN3jxl5AbortEv() #17
  unreachable

18:                                               ; preds = %10
  %19 = getelementptr inbounds %"class.jxl::(anonymous namespace)::VisitorBase", %"class.jxl::(anonymous namespace)::VisitorBase"* %0, i64 0, i32 2, i32 1
  %20 = load i64, i64* %19, align 8
  %21 = and i64 %20, 1
  %22 = icmp eq i64 %21, 0
  br i1 %22, label %26, label %23

23:                                               ; preds = %18
  %24 = tail call zeroext i1 (i8*, ...) @_ZN3jxl5DebugEPKcz(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.5, i64 0, i64 0), i8* getelementptr inbounds ([47 x i8], [47 x i8]* @.str.2, i64 0, i64 0), i32 52, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.29, i64 0, i64 0)) #14
  %25 = tail call zeroext i1 @_ZN3jxl5AbortEv() #17
  unreachable

26:                                               ; preds = %18
  %27 = add i64 %12, 1
  store i64 %27, i64* %11, align 8
  br label %28

28:                                               ; preds = %2, %26
  ret i32 %8
}

; Function Attrs: nounwind ssp uwtable
define internal i32 @_ZN3jxl12_GLOBAL__N_111VisitorBase13EndExtensionsEv(%"class.jxl::(anonymous namespace)::VisitorBase"* nocapture) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.jxl::(anonymous namespace)::VisitorBase", %"class.jxl::(anonymous namespace)::VisitorBase"* %0, i64 0, i32 2, i32 0
  %3 = load i64, i64* %2, align 8
  %4 = and i64 %3, 1
  %5 = icmp eq i64 %4, 0
  br i1 %5, label %6, label %9

6:                                                ; preds = %1
  %7 = tail call zeroext i1 (i8*, ...) @_ZN3jxl5DebugEPKcz(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.5, i64 0, i64 0), i8* getelementptr inbounds ([47 x i8], [47 x i8]* @.str.2, i64 0, i64 0), i32 57, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.30, i64 0, i64 0)) #14
  %8 = tail call zeroext i1 @_ZN3jxl5AbortEv() #17
  unreachable

9:                                                ; preds = %1
  %10 = getelementptr inbounds %"class.jxl::(anonymous namespace)::VisitorBase", %"class.jxl::(anonymous namespace)::VisitorBase"* %0, i64 0, i32 2, i32 1
  %11 = load i64, i64* %10, align 8
  %12 = and i64 %11, 1
  %13 = icmp eq i64 %12, 0
  br i1 %13, label %17, label %14

14:                                               ; preds = %9
  %15 = tail call zeroext i1 (i8*, ...) @_ZN3jxl5DebugEPKcz(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.5, i64 0, i64 0), i8* getelementptr inbounds ([47 x i8], [47 x i8]* @.str.2, i64 0, i64 0), i32 58, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.29, i64 0, i64 0)) #14
  %16 = tail call zeroext i1 @_ZN3jxl5AbortEv() #17
  unreachable

17:                                               ; preds = %9
  %18 = add i64 %11, 1
  store i64 %18, i64* %10, align 8
  ret i32 0
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define internal i8* @_ZN3jxl12_GLOBAL__N_111InitVisitor11VisitorNameEv(%"struct.jxl::(anonymous namespace)::InitVisitor"* nocapture readnone) unnamed_addr #9 align 2 {
  ret i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.31, i64 0, i64 0)
}

; Function Attrs: noreturn nounwind ssp uwtable
define internal void @_ZN3jxl12_GLOBAL__N_111VisitorBaseD0Ev(%"class.jxl::(anonymous namespace)::VisitorBase"* nocapture readnone) unnamed_addr #10 align 2 {
  tail call void @llvm.trap() #17
  unreachable
}

; Function Attrs: nounwind ssp uwtable
define internal i32 @_ZN3jxl12_GLOBAL__N_111VisitorBase4BoolEbPb(%"class.jxl::(anonymous namespace)::VisitorBase"*, i1 zeroext, i8* noalias nocapture) unnamed_addr #0 align 2 {
  %4 = alloca i32, align 4
  %5 = bitcast i32* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %5) #14
  %6 = load i8, i8* %2, align 1, !range !2
  %7 = zext i8 %6 to i32
  store i32 %7, i32* %4, align 4
  %8 = getelementptr inbounds %"class.jxl::(anonymous namespace)::VisitorBase", %"class.jxl::(anonymous namespace)::VisitorBase"* %0, i64 0, i32 0
  %9 = zext i1 %1 to i32
  %10 = bitcast %"class.jxl::(anonymous namespace)::VisitorBase"* %0 to i32 (%"class.jxl::Visitor"*, i64, i32, i32*)***
  %11 = load i32 (%"class.jxl::Visitor"*, i64, i32, i32*)**, i32 (%"class.jxl::Visitor"*, i64, i32, i32*)*** %10, align 8
  %12 = getelementptr inbounds i32 (%"class.jxl::Visitor"*, i64, i32, i32*)*, i32 (%"class.jxl::Visitor"*, i64, i32, i32*)** %11, i64 5
  %13 = load i32 (%"class.jxl::Visitor"*, i64, i32, i32*)*, i32 (%"class.jxl::Visitor"*, i64, i32, i32*)** %12, align 8
  %14 = call i32 %13(%"class.jxl::Visitor"* %8, i64 1, i32 %9, i32* nonnull %4) #14
  %15 = icmp eq i32 %14, 0
  br i1 %15, label %16, label %20

16:                                               ; preds = %3
  %17 = load i32, i32* %4, align 4
  %18 = icmp eq i32 %17, 1
  %19 = zext i1 %18 to i8
  store i8 %19, i8* %2, align 1
  br label %20

20:                                               ; preds = %3, %16
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %5) #14
  ret i32 %14
}

declare void @__cxa_pure_virtual() unnamed_addr

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden i32 @_ZN3jxl7Visitor11ConditionalEb(%"class.jxl::Visitor"*, i1 zeroext) unnamed_addr #0 comdat align 2 {
  %3 = xor i1 %1, true
  %4 = zext i1 %3 to i32
  ret i32 %4
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden i32 @_ZN3jxl7Visitor10AllDefaultERKNS_6FieldsEPb(%"class.jxl::Visitor"*, %"class.jxl::Fields"* dereferenceable(8), i8* noalias) unnamed_addr #0 comdat align 2 {
  %4 = bitcast %"class.jxl::Visitor"* %0 to i32 (%"class.jxl::Visitor"*, i1, i8*)***
  %5 = load i32 (%"class.jxl::Visitor"*, i1, i8*)**, i32 (%"class.jxl::Visitor"*, i1, i8*)*** %4, align 8
  %6 = getelementptr inbounds i32 (%"class.jxl::Visitor"*, i1, i8*)*, i32 (%"class.jxl::Visitor"*, i1, i8*)** %5, i64 3
  %7 = load i32 (%"class.jxl::Visitor"*, i1, i8*)*, i32 (%"class.jxl::Visitor"*, i1, i8*)** %6, align 8
  %8 = tail call i32 %7(%"class.jxl::Visitor"* %0, i1 zeroext true, i8* %2) #14
  %9 = icmp eq i32 %8, 0
  br i1 %9, label %10, label %14

10:                                               ; preds = %3
  %11 = load i8, i8* %2, align 1, !range !2
  %12 = xor i8 %11, 1
  %13 = zext i8 %12 to i32
  br label %14

14:                                               ; preds = %3, %10
  %15 = phi i32 [ %13, %10 ], [ %8, %3 ]
  ret i32 %15
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden i32 @_ZN3jxl7Visitor11VisitNestedEPNS_6FieldsE(%"class.jxl::Visitor"*, %"class.jxl::Fields"*) unnamed_addr #0 comdat align 2 {
  %3 = bitcast %"class.jxl::Visitor"* %0 to i32 (%"class.jxl::Visitor"*, %"class.jxl::Fields"*, i8*)***
  %4 = load i32 (%"class.jxl::Visitor"*, %"class.jxl::Fields"*, i8*)**, i32 (%"class.jxl::Visitor"*, %"class.jxl::Fields"*, i8*)*** %3, align 8
  %5 = getelementptr inbounds i32 (%"class.jxl::Visitor"*, %"class.jxl::Fields"*, i8*)*, i32 (%"class.jxl::Visitor"*, %"class.jxl::Fields"*, i8*)** %4, i64 2
  %6 = load i32 (%"class.jxl::Visitor"*, %"class.jxl::Fields"*, i8*)*, i32 (%"class.jxl::Visitor"*, %"class.jxl::Fields"*, i8*)** %5, align 8
  %7 = tail call i32 %6(%"class.jxl::Visitor"* %0, %"class.jxl::Fields"* %1, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str, i64 0, i64 0)) #14
  ret i32 %7
}

; Function Attrs: cold noreturn nounwind
declare void @llvm.trap() #11

; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(i8*) local_unnamed_addr #12

; Function Attrs: nofree nounwind
declare i32 @fputs(i8* nocapture readonly, %struct._IO_FILE* nocapture) local_unnamed_addr #13

; Function Attrs: nounwind ssp uwtable
define internal void @_ZNK3jxl12_GLOBAL__N_111VisitorBase5TraceEPKcz(%"class.jxl::(anonymous namespace)::VisitorBase"* nocapture readonly, i8*, ...) unnamed_addr #0 align 2 {
  %3 = alloca [1 x %struct.__va_list_tag], align 16
  %4 = getelementptr inbounds %"class.jxl::(anonymous namespace)::VisitorBase", %"class.jxl::(anonymous namespace)::VisitorBase"* %0, i64 0, i32 1
  %5 = load i64, i64* %4, align 8
  %6 = trunc i64 %5 to i32
  %7 = shl i32 %6, 1
  %8 = tail call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.36, i64 0, i64 0), i32 %7, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str, i64 0, i64 0))
  %9 = bitcast [1 x %struct.__va_list_tag]* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %9) #14
  %10 = getelementptr inbounds [1 x %struct.__va_list_tag], [1 x %struct.__va_list_tag]* %3, i64 0, i64 0
  %11 = bitcast [1 x %struct.__va_list_tag]* %3 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %11, i8 -86, i64 24, i1 false)
  call void @llvm.va_start(i8* nonnull %9)
  %12 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8
  %13 = call i32 @__vfprintf_chk(%struct._IO_FILE* %12, i32 1, i8* %1, %struct.__va_list_tag* nonnull %10) #14
  call void @llvm.va_end(i8* nonnull %9)
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %9) #14
  ret void
}

; Function Attrs: nofree nounwind
declare i32 @printf(i8* nocapture readonly, ...) local_unnamed_addr #13

; Function Attrs: nounwind
declare void @llvm.va_start(i8*) #14

; Function Attrs: nounwind
declare void @llvm.va_end(i8*) #14

declare i32 @__vfprintf_chk(%struct._IO_FILE*, i32, i8*, %struct.__va_list_tag*) local_unnamed_addr #2

; Function Attrs: inlinehint nounwind ssp uwtable
define internal void @_ZN3jxl12_GLOBAL__N_117SetDefaultVisitorD0Ev(%"struct.jxl::(anonymous namespace)::SetDefaultVisitor"*) unnamed_addr #7 align 2 {
  %2 = getelementptr inbounds %"struct.jxl::(anonymous namespace)::SetDefaultVisitor", %"struct.jxl::(anonymous namespace)::SetDefaultVisitor"* %0, i64 0, i32 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [18 x i8*] }, { [18 x i8*] }* @_ZTVN3jxl12_GLOBAL__N_111VisitorBaseE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %2, align 8
  %3 = getelementptr inbounds %"struct.jxl::(anonymous namespace)::SetDefaultVisitor", %"struct.jxl::(anonymous namespace)::SetDefaultVisitor"* %0, i64 0, i32 0, i32 1
  %4 = load i64, i64* %3, align 8
  %5 = icmp eq i64 %4, 0
  br i1 %5, label %9, label %6

6:                                                ; preds = %1
  %7 = tail call zeroext i1 (i8*, ...) @_ZN3jxl5DebugEPKcz(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.5, i64 0, i64 0), i8* getelementptr inbounds ([47 x i8], [47 x i8]* @.str.2, i64 0, i64 0), i32 76, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.23, i64 0, i64 0)) #14
  %8 = tail call zeroext i1 @_ZN3jxl5AbortEv() #17
  unreachable

9:                                                ; preds = %1
  %10 = bitcast %"struct.jxl::(anonymous namespace)::SetDefaultVisitor"* %0 to i8*
  tail call void @_ZdlPv(i8* %10) #19
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable writeonly
define internal i32 @_ZN3jxl12_GLOBAL__N_117SetDefaultVisitor4BoolEbPb(%"struct.jxl::(anonymous namespace)::SetDefaultVisitor"* nocapture readnone, i1 zeroext, i8* noalias nocapture) unnamed_addr #8 align 2 {
  %4 = zext i1 %1 to i8
  store i8 %4, i8* %2, align 1
  ret i32 0
}

; Function Attrs: nofree norecurse nounwind ssp uwtable writeonly
define internal i32 @_ZN3jxl12_GLOBAL__N_117SetDefaultVisitor3U32ENS_6U32EncEjPj(%"struct.jxl::(anonymous namespace)::SetDefaultVisitor"* nocapture readnone, i64, i64, i32, i32* noalias nocapture) unnamed_addr #8 align 2 {
  store i32 %3, i32* %4, align 4
  ret i32 0
}

; Function Attrs: nofree norecurse nounwind ssp uwtable writeonly
define internal i32 @_ZN3jxl12_GLOBAL__N_117SetDefaultVisitor4BitsEmjPj(%"struct.jxl::(anonymous namespace)::SetDefaultVisitor"* nocapture readnone, i64, i32, i32* noalias nocapture) unnamed_addr #8 align 2 {
  store i32 %2, i32* %3, align 4
  ret i32 0
}

; Function Attrs: nofree norecurse nounwind ssp uwtable writeonly
define internal i32 @_ZN3jxl12_GLOBAL__N_117SetDefaultVisitor3U64EmPm(%"struct.jxl::(anonymous namespace)::SetDefaultVisitor"* nocapture readnone, i64, i64* noalias nocapture) unnamed_addr #8 align 2 {
  store i64 %1, i64* %2, align 8
  ret i32 0
}

; Function Attrs: nofree norecurse nounwind ssp uwtable writeonly
define internal i32 @_ZN3jxl12_GLOBAL__N_117SetDefaultVisitor3F16EfPf(%"struct.jxl::(anonymous namespace)::SetDefaultVisitor"* nocapture readnone, float, float* noalias nocapture) unnamed_addr #8 align 2 {
  store float %1, float* %2, align 4
  ret i32 0
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define internal i32 @_ZN3jxl12_GLOBAL__N_117SetDefaultVisitor11ConditionalEb(%"struct.jxl::(anonymous namespace)::SetDefaultVisitor"* nocapture readnone, i1 zeroext) unnamed_addr #9 align 2 {
  ret i32 0
}

; Function Attrs: nounwind ssp uwtable
define internal i32 @_ZN3jxl12_GLOBAL__N_117SetDefaultVisitor10AllDefaultERKNS_6FieldsEPb(%"struct.jxl::(anonymous namespace)::SetDefaultVisitor"*, %"class.jxl::Fields"* nocapture readnone dereferenceable(8), i8* noalias) unnamed_addr #0 align 2 {
  %4 = bitcast %"struct.jxl::(anonymous namespace)::SetDefaultVisitor"* %0 to i32 (%"struct.jxl::(anonymous namespace)::SetDefaultVisitor"*, i1, i8*)***
  %5 = load i32 (%"struct.jxl::(anonymous namespace)::SetDefaultVisitor"*, i1, i8*)**, i32 (%"struct.jxl::(anonymous namespace)::SetDefaultVisitor"*, i1, i8*)*** %4, align 8
  %6 = getelementptr inbounds i32 (%"struct.jxl::(anonymous namespace)::SetDefaultVisitor"*, i1, i8*)*, i32 (%"struct.jxl::(anonymous namespace)::SetDefaultVisitor"*, i1, i8*)** %5, i64 3
  %7 = load i32 (%"struct.jxl::(anonymous namespace)::SetDefaultVisitor"*, i1, i8*)*, i32 (%"struct.jxl::(anonymous namespace)::SetDefaultVisitor"*, i1, i8*)** %6, align 8
  %8 = tail call i32 %7(%"struct.jxl::(anonymous namespace)::SetDefaultVisitor"* %0, i1 zeroext true, i8* %2) #14
  %9 = icmp eq i32 %8, 0
  %10 = select i1 %9, i32 1, i32 %8
  ret i32 %10
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define internal i8* @_ZN3jxl12_GLOBAL__N_117SetDefaultVisitor11VisitorNameEv(%"struct.jxl::(anonymous namespace)::SetDefaultVisitor"* nocapture readnone) unnamed_addr #9 align 2 {
  ret i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.37, i64 0, i64 0)
}

; Function Attrs: inlinehint nounwind ssp uwtable
define internal void @_ZN3jxl12_GLOBAL__N_117AllDefaultVisitorD0Ev(%"class.jxl::(anonymous namespace)::AllDefaultVisitor"*) unnamed_addr #7 align 2 {
  %2 = getelementptr inbounds %"class.jxl::(anonymous namespace)::AllDefaultVisitor", %"class.jxl::(anonymous namespace)::AllDefaultVisitor"* %0, i64 0, i32 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [18 x i8*] }, { [18 x i8*] }* @_ZTVN3jxl12_GLOBAL__N_111VisitorBaseE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %2, align 8
  %3 = getelementptr inbounds %"class.jxl::(anonymous namespace)::AllDefaultVisitor", %"class.jxl::(anonymous namespace)::AllDefaultVisitor"* %0, i64 0, i32 0, i32 1
  %4 = load i64, i64* %3, align 8
  %5 = icmp eq i64 %4, 0
  br i1 %5, label %9, label %6

6:                                                ; preds = %1
  %7 = tail call zeroext i1 (i8*, ...) @_ZN3jxl5DebugEPKcz(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.5, i64 0, i64 0), i8* getelementptr inbounds ([47 x i8], [47 x i8]* @.str.2, i64 0, i64 0), i32 76, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.23, i64 0, i64 0)) #14
  %8 = tail call zeroext i1 @_ZN3jxl5AbortEv() #17
  unreachable

9:                                                ; preds = %1
  %10 = bitcast %"class.jxl::(anonymous namespace)::AllDefaultVisitor"* %0 to i8*
  tail call void @_ZdlPv(i8* %10) #19
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal i32 @_ZN3jxl12_GLOBAL__N_117AllDefaultVisitor3U32ENS_6U32EncEjPj(%"class.jxl::(anonymous namespace)::AllDefaultVisitor"* nocapture, i64, i64, i32, i32* noalias nocapture readonly) unnamed_addr #0 align 2 {
  %6 = getelementptr inbounds %"class.jxl::(anonymous namespace)::AllDefaultVisitor", %"class.jxl::(anonymous namespace)::AllDefaultVisitor"* %0, i64 0, i32 1
  %7 = load i8, i8* %6, align 1, !range !2
  %8 = icmp eq i8 %7, 0
  br i1 %8, label %9, label %11

9:                                                ; preds = %5
  %10 = load i32, i32* %4, align 4
  br label %14

11:                                               ; preds = %5
  %12 = bitcast %"class.jxl::(anonymous namespace)::AllDefaultVisitor"* %0 to %"class.jxl::(anonymous namespace)::VisitorBase"*
  %13 = load i32, i32* %4, align 4
  tail call void (%"class.jxl::(anonymous namespace)::VisitorBase"*, i8*, ...) @_ZNK3jxl12_GLOBAL__N_111VisitorBase5TraceEPKcz(%"class.jxl::(anonymous namespace)::VisitorBase"* %12, i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.38, i64 0, i64 0), i32 %13, i32 %3)
  br label %14

14:                                               ; preds = %9, %11
  %15 = phi i32 [ %10, %9 ], [ %13, %11 ]
  %16 = icmp eq i32 %15, %3
  %17 = zext i1 %16 to i8
  %18 = getelementptr inbounds %"class.jxl::(anonymous namespace)::AllDefaultVisitor", %"class.jxl::(anonymous namespace)::AllDefaultVisitor"* %0, i64 0, i32 2
  %19 = load i8, i8* %18, align 2, !range !2
  %20 = and i8 %19, %17
  store i8 %20, i8* %18, align 2
  ret i32 0
}

; Function Attrs: nounwind ssp uwtable
define internal i32 @_ZN3jxl12_GLOBAL__N_117AllDefaultVisitor4BitsEmjPj(%"class.jxl::(anonymous namespace)::AllDefaultVisitor"* nocapture, i64, i32, i32* noalias nocapture readonly) unnamed_addr #0 align 2 {
  %5 = getelementptr inbounds %"class.jxl::(anonymous namespace)::AllDefaultVisitor", %"class.jxl::(anonymous namespace)::AllDefaultVisitor"* %0, i64 0, i32 1
  %6 = load i8, i8* %5, align 1, !range !2
  %7 = icmp eq i8 %6, 0
  br i1 %7, label %8, label %10

8:                                                ; preds = %4
  %9 = load i32, i32* %3, align 4
  br label %13

10:                                               ; preds = %4
  %11 = bitcast %"class.jxl::(anonymous namespace)::AllDefaultVisitor"* %0 to %"class.jxl::(anonymous namespace)::VisitorBase"*
  %12 = load i32, i32* %3, align 4
  tail call void (%"class.jxl::(anonymous namespace)::VisitorBase"*, i8*, ...) @_ZNK3jxl12_GLOBAL__N_111VisitorBase5TraceEPKcz(%"class.jxl::(anonymous namespace)::VisitorBase"* %11, i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.39, i64 0, i64 0), i64 %1, i32 %12, i32 %2)
  br label %13

13:                                               ; preds = %8, %10
  %14 = phi i32 [ %9, %8 ], [ %12, %10 ]
  %15 = icmp eq i32 %14, %2
  %16 = zext i1 %15 to i8
  %17 = getelementptr inbounds %"class.jxl::(anonymous namespace)::AllDefaultVisitor", %"class.jxl::(anonymous namespace)::AllDefaultVisitor"* %0, i64 0, i32 2
  %18 = load i8, i8* %17, align 2, !range !2
  %19 = and i8 %18, %16
  store i8 %19, i8* %17, align 2
  ret i32 0
}

; Function Attrs: nounwind ssp uwtable
define internal i32 @_ZN3jxl12_GLOBAL__N_117AllDefaultVisitor3U64EmPm(%"class.jxl::(anonymous namespace)::AllDefaultVisitor"* nocapture, i64, i64* noalias nocapture readonly) unnamed_addr #0 align 2 {
  %4 = getelementptr inbounds %"class.jxl::(anonymous namespace)::AllDefaultVisitor", %"class.jxl::(anonymous namespace)::AllDefaultVisitor"* %0, i64 0, i32 1
  %5 = load i8, i8* %4, align 1, !range !2
  %6 = icmp eq i8 %5, 0
  br i1 %6, label %7, label %9

7:                                                ; preds = %3
  %8 = load i64, i64* %2, align 8
  br label %12

9:                                                ; preds = %3
  %10 = bitcast %"class.jxl::(anonymous namespace)::AllDefaultVisitor"* %0 to %"class.jxl::(anonymous namespace)::VisitorBase"*
  %11 = load i64, i64* %2, align 8
  tail call void (%"class.jxl::(anonymous namespace)::VisitorBase"*, i8*, ...) @_ZNK3jxl12_GLOBAL__N_111VisitorBase5TraceEPKcz(%"class.jxl::(anonymous namespace)::VisitorBase"* %10, i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.40, i64 0, i64 0), i64 %11, i64 %1)
  br label %12

12:                                               ; preds = %7, %9
  %13 = phi i64 [ %8, %7 ], [ %11, %9 ]
  %14 = icmp eq i64 %13, %1
  %15 = zext i1 %14 to i8
  %16 = getelementptr inbounds %"class.jxl::(anonymous namespace)::AllDefaultVisitor", %"class.jxl::(anonymous namespace)::AllDefaultVisitor"* %0, i64 0, i32 2
  %17 = load i8, i8* %16, align 2, !range !2
  %18 = and i8 %17, %15
  store i8 %18, i8* %16, align 2
  ret i32 0
}

; Function Attrs: nounwind ssp uwtable
define internal i32 @_ZN3jxl12_GLOBAL__N_117AllDefaultVisitor3F16EfPf(%"class.jxl::(anonymous namespace)::AllDefaultVisitor"* nocapture, float, float* noalias nocapture readonly) unnamed_addr #0 align 2 {
  %4 = getelementptr inbounds %"class.jxl::(anonymous namespace)::AllDefaultVisitor", %"class.jxl::(anonymous namespace)::AllDefaultVisitor"* %0, i64 0, i32 1
  %5 = load i8, i8* %4, align 1, !range !2
  %6 = icmp eq i8 %5, 0
  br i1 %6, label %7, label %9

7:                                                ; preds = %3
  %8 = load float, float* %2, align 4
  br label %14

9:                                                ; preds = %3
  %10 = bitcast %"class.jxl::(anonymous namespace)::AllDefaultVisitor"* %0 to %"class.jxl::(anonymous namespace)::VisitorBase"*
  %11 = load float, float* %2, align 4
  %12 = fpext float %11 to double
  %13 = fpext float %1 to double
  tail call void (%"class.jxl::(anonymous namespace)::VisitorBase"*, i8*, ...) @_ZNK3jxl12_GLOBAL__N_111VisitorBase5TraceEPKcz(%"class.jxl::(anonymous namespace)::VisitorBase"* %10, i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.41, i64 0, i64 0), double %12, double %13)
  br label %14

14:                                               ; preds = %7, %9
  %15 = phi float [ %8, %7 ], [ %11, %9 ]
  %16 = fsub float %15, %1
  %17 = tail call float @llvm.fabs.f32(float %16) #14
  %18 = fcmp olt float %17, 0x3EB0C6F7A0000000
  %19 = zext i1 %18 to i8
  %20 = getelementptr inbounds %"class.jxl::(anonymous namespace)::AllDefaultVisitor", %"class.jxl::(anonymous namespace)::AllDefaultVisitor"* %0, i64 0, i32 2
  %21 = load i8, i8* %20, align 2, !range !2
  %22 = and i8 %21, %19
  store i8 %22, i8* %20, align 2
  ret i32 0
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define internal i32 @_ZN3jxl12_GLOBAL__N_117AllDefaultVisitor10AllDefaultERKNS_6FieldsEPb(%"class.jxl::(anonymous namespace)::AllDefaultVisitor"* nocapture readnone, %"class.jxl::Fields"* nocapture readnone dereferenceable(8), i8* noalias nocapture readnone) unnamed_addr #9 align 2 {
  ret i32 1
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define internal i8* @_ZN3jxl12_GLOBAL__N_117AllDefaultVisitor11VisitorNameEv(%"class.jxl::(anonymous namespace)::AllDefaultVisitor"* nocapture readnone) unnamed_addr #9 align 2 {
  ret i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.42, i64 0, i64 0)
}

; Function Attrs: inlinehint nounwind ssp uwtable
define internal void @_ZN3jxl12_GLOBAL__N_114MaxBitsVisitorD0Ev(%"class.jxl::(anonymous namespace)::MaxBitsVisitor"*) unnamed_addr #7 align 2 {
  %2 = getelementptr inbounds %"class.jxl::(anonymous namespace)::MaxBitsVisitor", %"class.jxl::(anonymous namespace)::MaxBitsVisitor"* %0, i64 0, i32 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [18 x i8*] }, { [18 x i8*] }* @_ZTVN3jxl12_GLOBAL__N_111VisitorBaseE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %2, align 8
  %3 = getelementptr inbounds %"class.jxl::(anonymous namespace)::MaxBitsVisitor", %"class.jxl::(anonymous namespace)::MaxBitsVisitor"* %0, i64 0, i32 0, i32 1
  %4 = load i64, i64* %3, align 8
  %5 = icmp eq i64 %4, 0
  br i1 %5, label %9, label %6

6:                                                ; preds = %1
  %7 = tail call zeroext i1 (i8*, ...) @_ZN3jxl5DebugEPKcz(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.5, i64 0, i64 0), i8* getelementptr inbounds ([47 x i8], [47 x i8]* @.str.2, i64 0, i64 0), i32 76, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.23, i64 0, i64 0)) #14
  %8 = tail call zeroext i1 @_ZN3jxl5AbortEv() #17
  unreachable

9:                                                ; preds = %1
  %10 = bitcast %"class.jxl::(anonymous namespace)::MaxBitsVisitor"* %0 to i8*
  tail call void @_ZdlPv(i8* %10) #19
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal i32 @_ZN3jxl12_GLOBAL__N_114MaxBitsVisitor3U32ENS_6U32EncEjPj(%"class.jxl::(anonymous namespace)::MaxBitsVisitor"* nocapture, i64, i64, i32, i32* noalias nocapture readnone) unnamed_addr #5 align 2 {
  %6 = trunc i64 %1 to i32
  %7 = icmp slt i32 %6, 0
  %8 = lshr i64 %1, 32
  %9 = trunc i64 %8 to i32
  %10 = trunc i64 %2 to i32
  %11 = lshr i64 %2, 32
  %12 = trunc i64 %11 to i32
  %13 = and i64 %1, 31
  %14 = add nuw nsw i64 %13, 1
  %15 = select i1 %7, i64 0, i64 %14
  %16 = icmp slt i32 %9, 0
  br i1 %16, label %22, label %17

17:                                               ; preds = %5
  %18 = and i64 %8, 31
  %19 = add nuw nsw i64 %18, 1
  %20 = icmp ult i64 %15, %19
  %21 = select i1 %20, i64 %19, i64 %15
  br label %22

22:                                               ; preds = %17, %5
  %23 = phi i64 [ %15, %5 ], [ %21, %17 ]
  %24 = icmp slt i32 %10, 0
  br i1 %24, label %30, label %25

25:                                               ; preds = %22
  %26 = and i64 %2, 31
  %27 = add nuw nsw i64 %26, 1
  %28 = icmp ult i64 %23, %27
  %29 = select i1 %28, i64 %27, i64 %23
  br label %30

30:                                               ; preds = %25, %22
  %31 = phi i64 [ %23, %22 ], [ %29, %25 ]
  %32 = icmp slt i32 %12, 0
  br i1 %32, label %38, label %33

33:                                               ; preds = %30
  %34 = and i64 %11, 31
  %35 = add nuw nsw i64 %34, 1
  %36 = icmp ult i64 %31, %35
  %37 = select i1 %36, i64 %35, i64 %31
  br label %38

38:                                               ; preds = %30, %33
  %39 = phi i64 [ %31, %30 ], [ %37, %33 ]
  %40 = add nuw nsw i64 %39, 2
  %41 = getelementptr inbounds %"class.jxl::(anonymous namespace)::MaxBitsVisitor", %"class.jxl::(anonymous namespace)::MaxBitsVisitor"* %0, i64 0, i32 1
  %42 = load i64, i64* %41, align 8
  %43 = add i64 %40, %42
  store i64 %43, i64* %41, align 8
  ret i32 0
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal i32 @_ZN3jxl12_GLOBAL__N_114MaxBitsVisitor4BitsEmjPj(%"class.jxl::(anonymous namespace)::MaxBitsVisitor"* nocapture, i64, i32, i32* noalias nocapture readnone) unnamed_addr #5 align 2 {
  %5 = getelementptr inbounds %"class.jxl::(anonymous namespace)::MaxBitsVisitor", %"class.jxl::(anonymous namespace)::MaxBitsVisitor"* %0, i64 0, i32 1
  %6 = load i64, i64* %5, align 8
  %7 = add i64 %6, %1
  store i64 %7, i64* %5, align 8
  ret i32 0
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal i32 @_ZN3jxl12_GLOBAL__N_114MaxBitsVisitor3U64EmPm(%"class.jxl::(anonymous namespace)::MaxBitsVisitor"* nocapture, i64, i64* noalias nocapture readnone) unnamed_addr #5 align 2 {
  %4 = getelementptr inbounds %"class.jxl::(anonymous namespace)::MaxBitsVisitor", %"class.jxl::(anonymous namespace)::MaxBitsVisitor"* %0, i64 0, i32 1
  %5 = load i64, i64* %4, align 8
  %6 = add i64 %5, 73
  store i64 %6, i64* %4, align 8
  ret i32 0
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal i32 @_ZN3jxl12_GLOBAL__N_114MaxBitsVisitor3F16EfPf(%"class.jxl::(anonymous namespace)::MaxBitsVisitor"* nocapture, float, float* noalias nocapture readnone) unnamed_addr #5 align 2 {
  %4 = getelementptr inbounds %"class.jxl::(anonymous namespace)::MaxBitsVisitor", %"class.jxl::(anonymous namespace)::MaxBitsVisitor"* %0, i64 0, i32 1
  %5 = load i64, i64* %4, align 8
  %6 = add i64 %5, 16
  store i64 %6, i64* %4, align 8
  ret i32 0
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define internal i32 @_ZN3jxl12_GLOBAL__N_114MaxBitsVisitor11ConditionalEb(%"class.jxl::(anonymous namespace)::MaxBitsVisitor"* nocapture readnone, i1 zeroext) unnamed_addr #9 align 2 {
  ret i32 0
}

; Function Attrs: nounwind ssp uwtable
define internal i32 @_ZN3jxl12_GLOBAL__N_114MaxBitsVisitor10AllDefaultERKNS_6FieldsEPb(%"class.jxl::(anonymous namespace)::MaxBitsVisitor"*, %"class.jxl::Fields"* nocapture readnone dereferenceable(8), i8* noalias) unnamed_addr #0 align 2 {
  %4 = bitcast %"class.jxl::(anonymous namespace)::MaxBitsVisitor"* %0 to %"class.jxl::(anonymous namespace)::VisitorBase"*
  %5 = bitcast %"class.jxl::(anonymous namespace)::MaxBitsVisitor"* %0 to i32 (%"class.jxl::(anonymous namespace)::VisitorBase"*, i1, i8*)***
  %6 = load i32 (%"class.jxl::(anonymous namespace)::VisitorBase"*, i1, i8*)**, i32 (%"class.jxl::(anonymous namespace)::VisitorBase"*, i1, i8*)*** %5, align 8
  %7 = getelementptr inbounds i32 (%"class.jxl::(anonymous namespace)::VisitorBase"*, i1, i8*)*, i32 (%"class.jxl::(anonymous namespace)::VisitorBase"*, i1, i8*)** %6, i64 3
  %8 = load i32 (%"class.jxl::(anonymous namespace)::VisitorBase"*, i1, i8*)*, i32 (%"class.jxl::(anonymous namespace)::VisitorBase"*, i1, i8*)** %7, align 8
  %9 = tail call i32 %8(%"class.jxl::(anonymous namespace)::VisitorBase"* %4, i1 zeroext true, i8* %2) #14
  %10 = icmp eq i32 %9, 0
  %11 = select i1 %10, i32 1, i32 %9
  ret i32 %11
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define internal i32 @_ZN3jxl12_GLOBAL__N_114MaxBitsVisitor15BeginExtensionsEPm(%"class.jxl::(anonymous namespace)::MaxBitsVisitor"* nocapture readnone, i64* noalias nocapture readnone) unnamed_addr #9 align 2 {
  ret i32 0
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define internal i32 @_ZN3jxl12_GLOBAL__N_114MaxBitsVisitor13EndExtensionsEv(%"class.jxl::(anonymous namespace)::MaxBitsVisitor"* nocapture readnone) unnamed_addr #9 align 2 {
  ret i32 0
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define internal i8* @_ZN3jxl12_GLOBAL__N_114MaxBitsVisitor11VisitorNameEv(%"class.jxl::(anonymous namespace)::MaxBitsVisitor"* nocapture readnone) unnamed_addr #9 align 2 {
  ret i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.43, i64 0, i64 0)
}

; Function Attrs: inlinehint nounwind ssp uwtable
define internal void @_ZN3jxl12_GLOBAL__N_116CanEncodeVisitorD0Ev(%"class.jxl::(anonymous namespace)::CanEncodeVisitor"*) unnamed_addr #7 align 2 {
  %2 = getelementptr inbounds %"class.jxl::(anonymous namespace)::CanEncodeVisitor", %"class.jxl::(anonymous namespace)::CanEncodeVisitor"* %0, i64 0, i32 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [18 x i8*] }, { [18 x i8*] }* @_ZTVN3jxl12_GLOBAL__N_111VisitorBaseE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %2, align 8
  %3 = getelementptr inbounds %"class.jxl::(anonymous namespace)::CanEncodeVisitor", %"class.jxl::(anonymous namespace)::CanEncodeVisitor"* %0, i64 0, i32 0, i32 1
  %4 = load i64, i64* %3, align 8
  %5 = icmp eq i64 %4, 0
  br i1 %5, label %9, label %6

6:                                                ; preds = %1
  %7 = tail call zeroext i1 (i8*, ...) @_ZN3jxl5DebugEPKcz(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.5, i64 0, i64 0), i8* getelementptr inbounds ([47 x i8], [47 x i8]* @.str.2, i64 0, i64 0), i32 76, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.23, i64 0, i64 0)) #14
  %8 = tail call zeroext i1 @_ZN3jxl5AbortEv() #17
  unreachable

9:                                                ; preds = %1
  %10 = bitcast %"class.jxl::(anonymous namespace)::CanEncodeVisitor"* %0 to i8*
  tail call void @_ZdlPv(i8* %10) #19
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal i32 @_ZN3jxl12_GLOBAL__N_116CanEncodeVisitor3U32ENS_6U32EncEjPj(%"class.jxl::(anonymous namespace)::CanEncodeVisitor"* nocapture, i64, i64, i32, i32* noalias nocapture readonly) unnamed_addr #0 align 2 {
  %6 = alloca i32, align 4
  %7 = alloca i64, align 8
  %8 = load i32, i32* %4, align 4
  %9 = bitcast i32* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %9) #14, !noalias !16
  store i32 -1431655766, i32* %6, align 4, !noalias !16
  %10 = bitcast i64* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %10) #14, !noalias !16
  store i64 -6148914691236517206, i64* %7, align 8, !noalias !16
  %11 = call i32 @_ZN3jxl8U32Coder14ChooseSelectorENS_6U32EncEjPjPm(i64 %1, i64 %2, i32 %8, i32* nonnull %6, i64* nonnull %7) #14, !noalias !16
  %12 = icmp eq i32 %11, 0
  %13 = load i64, i64* %7, align 8, !noalias !16
  %14 = select i1 %12, i64 %13, i64 0
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %10) #14, !noalias !16
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %9) #14, !noalias !16
  %15 = zext i1 %12 to i8
  %16 = getelementptr inbounds %"class.jxl::(anonymous namespace)::CanEncodeVisitor", %"class.jxl::(anonymous namespace)::CanEncodeVisitor"* %0, i64 0, i32 2
  %17 = load i8, i8* %16, align 2, !range !2
  %18 = and i8 %17, %15
  store i8 %18, i8* %16, align 2
  %19 = getelementptr inbounds %"class.jxl::(anonymous namespace)::CanEncodeVisitor", %"class.jxl::(anonymous namespace)::CanEncodeVisitor"* %0, i64 0, i32 1
  %20 = load i8, i8* %19, align 1, !range !2
  %21 = icmp eq i8 %20, 0
  br i1 %21, label %24, label %22

22:                                               ; preds = %5
  %23 = bitcast %"class.jxl::(anonymous namespace)::CanEncodeVisitor"* %0 to %"class.jxl::(anonymous namespace)::VisitorBase"*
  tail call void (%"class.jxl::(anonymous namespace)::VisitorBase"*, i8*, ...) @_ZNK3jxl12_GLOBAL__N_111VisitorBase5TraceEPKcz(%"class.jxl::(anonymous namespace)::VisitorBase"* %23, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.44, i64 0, i64 0), i64 %14, i32 %8)
  br label %24

24:                                               ; preds = %5, %22
  %25 = getelementptr inbounds %"class.jxl::(anonymous namespace)::CanEncodeVisitor", %"class.jxl::(anonymous namespace)::CanEncodeVisitor"* %0, i64 0, i32 3
  %26 = load i64, i64* %25, align 8
  %27 = add i64 %26, %14
  store i64 %27, i64* %25, align 8
  ret i32 0
}

; Function Attrs: nounwind ssp uwtable
define internal i32 @_ZN3jxl12_GLOBAL__N_116CanEncodeVisitor4BitsEmjPj(%"class.jxl::(anonymous namespace)::CanEncodeVisitor"* nocapture, i64, i32, i32* noalias nocapture readonly) unnamed_addr #0 align 2 {
  %5 = load i32, i32* %3, align 4
  %6 = zext i32 %5 to i64
  %7 = lshr i64 %6, %1
  %8 = icmp eq i64 %7, 0
  %9 = zext i1 %8 to i8
  %10 = getelementptr inbounds %"class.jxl::(anonymous namespace)::CanEncodeVisitor", %"class.jxl::(anonymous namespace)::CanEncodeVisitor"* %0, i64 0, i32 2
  %11 = load i8, i8* %10, align 2, !range !2
  %12 = and i8 %11, %9
  store i8 %12, i8* %10, align 2
  %13 = getelementptr inbounds %"class.jxl::(anonymous namespace)::CanEncodeVisitor", %"class.jxl::(anonymous namespace)::CanEncodeVisitor"* %0, i64 0, i32 1
  %14 = load i8, i8* %13, align 1, !range !2
  %15 = icmp eq i8 %14, 0
  br i1 %15, label %18, label %16

16:                                               ; preds = %4
  %17 = bitcast %"class.jxl::(anonymous namespace)::CanEncodeVisitor"* %0 to %"class.jxl::(anonymous namespace)::VisitorBase"*
  tail call void (%"class.jxl::(anonymous namespace)::VisitorBase"*, i8*, ...) @_ZNK3jxl12_GLOBAL__N_111VisitorBase5TraceEPKcz(%"class.jxl::(anonymous namespace)::VisitorBase"* %17, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.45, i64 0, i64 0), i64 %1, i32 %5)
  br label %18

18:                                               ; preds = %4, %16
  %19 = getelementptr inbounds %"class.jxl::(anonymous namespace)::CanEncodeVisitor", %"class.jxl::(anonymous namespace)::CanEncodeVisitor"* %0, i64 0, i32 3
  %20 = load i64, i64* %19, align 8
  %21 = add i64 %20, %1
  store i64 %21, i64* %19, align 8
  ret i32 0
}

; Function Attrs: nounwind ssp uwtable
define internal i32 @_ZN3jxl12_GLOBAL__N_116CanEncodeVisitor3U64EmPm(%"class.jxl::(anonymous namespace)::CanEncodeVisitor"* nocapture, i64, i64* noalias nocapture readonly) unnamed_addr #0 align 2 {
  %4 = load i64, i64* %2, align 8
  %5 = icmp eq i64 %4, 0
  br i1 %5, label %22, label %6

6:                                                ; preds = %3
  %7 = icmp ult i64 %4, 17
  br i1 %7, label %22, label %8

8:                                                ; preds = %6
  %9 = icmp ult i64 %4, 273
  br i1 %9, label %22, label %10

10:                                               ; preds = %8
  %11 = icmp ult i64 %4, 4096
  br i1 %11, label %18, label %12

12:                                               ; preds = %10
  %13 = icmp ugt i64 %4, 1048575
  br i1 %13, label %33, label %14

14:                                               ; preds = %39, %37, %35, %33, %12
  %15 = phi i64 [ 23, %12 ], [ 32, %33 ], [ 41, %35 ], [ 50, %37 ], [ %42, %39 ]
  %16 = phi i1 [ %13, %12 ], [ %34, %33 ], [ %36, %35 ], [ %38, %37 ], [ %43, %39 ]
  %17 = select i1 %16, i64 5, i64 1
  br label %18

18:                                               ; preds = %14, %10
  %19 = phi i64 [ %17, %14 ], [ 1, %10 ]
  %20 = phi i64 [ %15, %14 ], [ 14, %10 ]
  %21 = add nsw i64 %20, %19
  br label %22

22:                                               ; preds = %8, %6, %3, %18
  %23 = phi i64 [ %21, %18 ], [ 2, %3 ], [ 6, %6 ], [ 10, %8 ]
  %24 = getelementptr inbounds %"class.jxl::(anonymous namespace)::CanEncodeVisitor", %"class.jxl::(anonymous namespace)::CanEncodeVisitor"* %0, i64 0, i32 1
  %25 = load i8, i8* %24, align 1, !range !2
  %26 = icmp eq i8 %25, 0
  br i1 %26, label %29, label %27

27:                                               ; preds = %22
  %28 = bitcast %"class.jxl::(anonymous namespace)::CanEncodeVisitor"* %0 to %"class.jxl::(anonymous namespace)::VisitorBase"*
  tail call void (%"class.jxl::(anonymous namespace)::VisitorBase"*, i8*, ...) @_ZNK3jxl12_GLOBAL__N_111VisitorBase5TraceEPKcz(%"class.jxl::(anonymous namespace)::VisitorBase"* %28, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.47, i64 0, i64 0), i64 %23, i64 %4)
  br label %29

29:                                               ; preds = %22, %27
  %30 = getelementptr inbounds %"class.jxl::(anonymous namespace)::CanEncodeVisitor", %"class.jxl::(anonymous namespace)::CanEncodeVisitor"* %0, i64 0, i32 3
  %31 = load i64, i64* %30, align 8
  %32 = add i64 %31, %23
  store i64 %32, i64* %30, align 8
  ret i32 0

33:                                               ; preds = %12
  %34 = icmp ugt i64 %4, 268435455
  br i1 %34, label %35, label %14

35:                                               ; preds = %33
  %36 = icmp ugt i64 %4, 68719476735
  br i1 %36, label %37, label %14

37:                                               ; preds = %35
  %38 = icmp ugt i64 %4, 17592186044415
  br i1 %38, label %39, label %14

39:                                               ; preds = %37
  %40 = icmp ugt i64 %4, 4503599627370495
  %41 = icmp ugt i64 %4, 1152921504606846975
  %42 = select i1 %40, i64 68, i64 59
  %43 = select i1 %40, i1 %41, i1 %40
  br label %14
}

; Function Attrs: nounwind ssp uwtable
define internal i32 @_ZN3jxl12_GLOBAL__N_116CanEncodeVisitor3F16EfPf(%"class.jxl::(anonymous namespace)::CanEncodeVisitor"* nocapture, float, float* noalias nocapture readonly) unnamed_addr #0 align 2 {
  %4 = load float, float* %2, align 4
  %5 = fcmp uno float %4, 0.000000e+00
  %6 = tail call float @llvm.fabs.f32(float %4) #18
  %7 = fcmp oeq float %6, 0x7FF0000000000000
  %8 = or i1 %5, %7
  %9 = fcmp ugt float %6, 6.550400e+04
  %10 = or i1 %9, %8
  %11 = xor i1 %10, true
  %12 = zext i1 %11 to i8
  %13 = getelementptr inbounds %"class.jxl::(anonymous namespace)::CanEncodeVisitor", %"class.jxl::(anonymous namespace)::CanEncodeVisitor"* %0, i64 0, i32 2
  %14 = load i8, i8* %13, align 2, !range !2
  %15 = and i8 %14, %12
  store i8 %15, i8* %13, align 2
  %16 = getelementptr inbounds %"class.jxl::(anonymous namespace)::CanEncodeVisitor", %"class.jxl::(anonymous namespace)::CanEncodeVisitor"* %0, i64 0, i32 1
  %17 = load i8, i8* %16, align 1, !range !2
  %18 = icmp eq i8 %17, 0
  br i1 %18, label %22, label %19

19:                                               ; preds = %3
  %20 = bitcast %"class.jxl::(anonymous namespace)::CanEncodeVisitor"* %0 to %"class.jxl::(anonymous namespace)::VisitorBase"*
  %21 = fpext float %4 to double
  tail call void (%"class.jxl::(anonymous namespace)::VisitorBase"*, i8*, ...) @_ZNK3jxl12_GLOBAL__N_111VisitorBase5TraceEPKcz(%"class.jxl::(anonymous namespace)::VisitorBase"* %20, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.48, i64 0, i64 0), i64 16, double %21)
  br label %22

22:                                               ; preds = %3, %19
  %23 = getelementptr inbounds %"class.jxl::(anonymous namespace)::CanEncodeVisitor", %"class.jxl::(anonymous namespace)::CanEncodeVisitor"* %0, i64 0, i32 3
  %24 = load i64, i64* %23, align 8
  %25 = add i64 %24, 16
  store i64 %25, i64* %23, align 8
  ret i32 0
}

; Function Attrs: nounwind ssp uwtable
define internal i32 @_ZN3jxl12_GLOBAL__N_116CanEncodeVisitor10AllDefaultERKNS_6FieldsEPb(%"class.jxl::(anonymous namespace)::CanEncodeVisitor"*, %"class.jxl::Fields"* dereferenceable(8), i8* noalias) unnamed_addr #0 align 2 {
  %4 = tail call zeroext i1 @_ZN3jxl6Bundle10AllDefaultERKNS_6FieldsE(%"class.jxl::Fields"* dereferenceable(8) %1)
  %5 = zext i1 %4 to i8
  store i8 %5, i8* %2, align 1
  %6 = bitcast %"class.jxl::(anonymous namespace)::CanEncodeVisitor"* %0 to %"class.jxl::(anonymous namespace)::VisitorBase"*
  %7 = bitcast %"class.jxl::(anonymous namespace)::CanEncodeVisitor"* %0 to i32 (%"class.jxl::(anonymous namespace)::VisitorBase"*, i1, i8*)***
  %8 = load i32 (%"class.jxl::(anonymous namespace)::VisitorBase"*, i1, i8*)**, i32 (%"class.jxl::(anonymous namespace)::VisitorBase"*, i1, i8*)*** %7, align 8
  %9 = getelementptr inbounds i32 (%"class.jxl::(anonymous namespace)::VisitorBase"*, i1, i8*)*, i32 (%"class.jxl::(anonymous namespace)::VisitorBase"*, i1, i8*)** %8, i64 3
  %10 = load i32 (%"class.jxl::(anonymous namespace)::VisitorBase"*, i1, i8*)*, i32 (%"class.jxl::(anonymous namespace)::VisitorBase"*, i1, i8*)** %9, align 8
  %11 = tail call i32 %10(%"class.jxl::(anonymous namespace)::VisitorBase"* %6, i1 zeroext true, i8* %2) #14
  %12 = icmp eq i32 %11, 0
  br i1 %12, label %13, label %17

13:                                               ; preds = %3
  %14 = load i8, i8* %2, align 1, !range !2
  %15 = xor i8 %14, 1
  %16 = zext i8 %15 to i32
  br label %17

17:                                               ; preds = %3, %13
  %18 = phi i32 [ %16, %13 ], [ %11, %3 ]
  ret i32 %18
}

; Function Attrs: nounwind ssp uwtable
define internal i32 @_ZN3jxl12_GLOBAL__N_116CanEncodeVisitor15BeginExtensionsEPm(%"class.jxl::(anonymous namespace)::CanEncodeVisitor"*, i64* noalias) unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"class.jxl::(anonymous namespace)::CanEncodeVisitor", %"class.jxl::(anonymous namespace)::CanEncodeVisitor"* %0, i64 0, i32 0, i32 0
  %4 = bitcast %"class.jxl::(anonymous namespace)::CanEncodeVisitor"* %0 to i32 (%"class.jxl::Visitor"*, i64, i64*)***
  %5 = load i32 (%"class.jxl::Visitor"*, i64, i64*)**, i32 (%"class.jxl::Visitor"*, i64, i64*)*** %4, align 8, !noalias !19
  %6 = getelementptr inbounds i32 (%"class.jxl::Visitor"*, i64, i64*)*, i32 (%"class.jxl::Visitor"*, i64, i64*)** %5, i64 6
  %7 = load i32 (%"class.jxl::Visitor"*, i64, i64*)*, i32 (%"class.jxl::Visitor"*, i64, i64*)** %6, align 8, !noalias !19
  %8 = tail call i32 %7(%"class.jxl::Visitor"* %3, i64 0, i64* %1) #14
  %9 = icmp eq i32 %8, 0
  br i1 %9, label %10, label %45

10:                                               ; preds = %2
  %11 = getelementptr inbounds %"class.jxl::(anonymous namespace)::CanEncodeVisitor", %"class.jxl::(anonymous namespace)::CanEncodeVisitor"* %0, i64 0, i32 0, i32 2, i32 0
  %12 = load i64, i64* %11, align 8, !noalias !19
  %13 = and i64 %12, 1
  %14 = icmp eq i64 %13, 0
  br i1 %14, label %18, label %15

15:                                               ; preds = %10
  %16 = tail call zeroext i1 (i8*, ...) @_ZN3jxl5DebugEPKcz(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.5, i64 0, i64 0), i8* getelementptr inbounds ([47 x i8], [47 x i8]* @.str.2, i64 0, i64 0), i32 51, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.28, i64 0, i64 0)) #14
  %17 = tail call zeroext i1 @_ZN3jxl5AbortEv() #17
  unreachable

18:                                               ; preds = %10
  %19 = getelementptr inbounds %"class.jxl::(anonymous namespace)::CanEncodeVisitor", %"class.jxl::(anonymous namespace)::CanEncodeVisitor"* %0, i64 0, i32 0, i32 2, i32 1
  %20 = load i64, i64* %19, align 8, !noalias !19
  %21 = and i64 %20, 1
  %22 = icmp eq i64 %21, 0
  br i1 %22, label %26, label %23

23:                                               ; preds = %18
  %24 = tail call zeroext i1 (i8*, ...) @_ZN3jxl5DebugEPKcz(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.5, i64 0, i64 0), i8* getelementptr inbounds ([47 x i8], [47 x i8]* @.str.2, i64 0, i64 0), i32 52, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.29, i64 0, i64 0)) #14
  %25 = tail call zeroext i1 @_ZN3jxl5AbortEv() #17
  unreachable

26:                                               ; preds = %18
  %27 = add i64 %12, 1
  store i64 %27, i64* %11, align 8, !noalias !19
  %28 = load i64, i64* %1, align 8
  %29 = getelementptr inbounds %"class.jxl::(anonymous namespace)::CanEncodeVisitor", %"class.jxl::(anonymous namespace)::CanEncodeVisitor"* %0, i64 0, i32 4
  store i64 %28, i64* %29, align 8
  %30 = icmp eq i64 %28, 0
  br i1 %30, label %45, label %31

31:                                               ; preds = %26
  %32 = getelementptr inbounds %"class.jxl::(anonymous namespace)::CanEncodeVisitor", %"class.jxl::(anonymous namespace)::CanEncodeVisitor"* %0, i64 0, i32 5
  %33 = load i64, i64* %32, align 8
  %34 = icmp eq i64 %33, 0
  br i1 %34, label %38, label %35

35:                                               ; preds = %31
  %36 = tail call zeroext i1 (i8*, ...) @_ZN3jxl5DebugEPKcz(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.5, i64 0, i64 0), i8* getelementptr inbounds ([47 x i8], [47 x i8]* @.str.2, i64 0, i64 0), i32 553, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.49, i64 0, i64 0)) #14
  %37 = tail call zeroext i1 @_ZN3jxl5AbortEv() #17
  unreachable

38:                                               ; preds = %31
  %39 = getelementptr inbounds %"class.jxl::(anonymous namespace)::CanEncodeVisitor", %"class.jxl::(anonymous namespace)::CanEncodeVisitor"* %0, i64 0, i32 3
  %40 = load i64, i64* %39, align 8
  store i64 %40, i64* %32, align 8
  %41 = icmp eq i64 %40, 0
  br i1 %41, label %42, label %45

42:                                               ; preds = %38
  %43 = tail call zeroext i1 (i8*, ...) @_ZN3jxl5DebugEPKcz(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.5, i64 0, i64 0), i8* getelementptr inbounds ([47 x i8], [47 x i8]* @.str.2, i64 0, i64 0), i32 555, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.50, i64 0, i64 0)) #14
  %44 = tail call zeroext i1 @_ZN3jxl5AbortEv() #17
  unreachable

45:                                               ; preds = %26, %38, %2
  ret i32 %8
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define internal i8* @_ZN3jxl12_GLOBAL__N_116CanEncodeVisitor11VisitorNameEv(%"class.jxl::(anonymous namespace)::CanEncodeVisitor"* nocapture readnone) unnamed_addr #9 align 2 {
  ret i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.51, i64 0, i64 0)
}

; Function Attrs: nounwind readnone speculatable
declare i64 @llvm.ctpop.i64(i64) #15

; Function Attrs: inlinehint nounwind ssp uwtable
define internal void @_ZN3jxl12_GLOBAL__N_111ReadVisitorD0Ev(%"class.jxl::(anonymous namespace)::ReadVisitor"*) unnamed_addr #7 align 2 {
  %2 = getelementptr inbounds %"class.jxl::(anonymous namespace)::ReadVisitor", %"class.jxl::(anonymous namespace)::ReadVisitor"* %0, i64 0, i32 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [18 x i8*] }, { [18 x i8*] }* @_ZTVN3jxl12_GLOBAL__N_111VisitorBaseE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %2, align 8
  %3 = getelementptr inbounds %"class.jxl::(anonymous namespace)::ReadVisitor", %"class.jxl::(anonymous namespace)::ReadVisitor"* %0, i64 0, i32 0, i32 1
  %4 = load i64, i64* %3, align 8
  %5 = icmp eq i64 %4, 0
  br i1 %5, label %9, label %6

6:                                                ; preds = %1
  %7 = tail call zeroext i1 (i8*, ...) @_ZN3jxl5DebugEPKcz(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.5, i64 0, i64 0), i8* getelementptr inbounds ([47 x i8], [47 x i8]* @.str.2, i64 0, i64 0), i32 76, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.23, i64 0, i64 0)) #14
  %8 = tail call zeroext i1 @_ZN3jxl5AbortEv() #17
  unreachable

9:                                                ; preds = %1
  %10 = bitcast %"class.jxl::(anonymous namespace)::ReadVisitor"* %0 to i8*
  tail call void @_ZdlPv(i8* %10) #19
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal i32 @_ZN3jxl12_GLOBAL__N_111ReadVisitor3U32ENS_6U32EncEjPj(%"class.jxl::(anonymous namespace)::ReadVisitor"* nocapture readonly, i64, i64, i32, i32* noalias nocapture) unnamed_addr #0 align 2 {
  %6 = getelementptr inbounds %"class.jxl::(anonymous namespace)::ReadVisitor", %"class.jxl::(anonymous namespace)::ReadVisitor"* %0, i64 0, i32 4
  %7 = load %"class.jxl::BitReader"*, %"class.jxl::BitReader"** %6, align 8
  %8 = tail call i32 @_ZN3jxl8U32Coder4ReadENS_6U32EncEPNS_9BitReaderE(i64 %1, i64 %2, %"class.jxl::BitReader"* %7)
  store i32 %8, i32* %4, align 4
  %9 = load %"class.jxl::BitReader"*, %"class.jxl::BitReader"** %6, align 8
  %10 = getelementptr inbounds %"class.jxl::BitReader", %"class.jxl::BitReader"* %9, i64 0, i32 2
  %11 = bitcast i8** %10 to i64*
  %12 = load i64, i64* %11, align 8
  %13 = getelementptr inbounds %"class.jxl::BitReader", %"class.jxl::BitReader"* %9, i64 0, i32 4
  %14 = bitcast i8** %13 to i64*
  %15 = load i64, i64* %14, align 8
  %16 = sub i64 %12, %15
  %17 = getelementptr inbounds %"class.jxl::BitReader", %"class.jxl::BitReader"* %9, i64 0, i32 5
  %18 = load i64, i64* %17, align 8
  %19 = add i64 %16, %18
  %20 = shl i64 %19, 3
  %21 = getelementptr inbounds %"class.jxl::BitReader", %"class.jxl::BitReader"* %9, i64 0, i32 1
  %22 = load i64, i64* %21, align 8
  %23 = sub i64 %20, %22
  %24 = getelementptr inbounds %"class.jxl::BitReader", %"class.jxl::BitReader"* %9, i64 0, i32 7
  store i64 %23, i64* %24, align 8
  %25 = getelementptr inbounds %"class.jxl::BitReader", %"class.jxl::BitReader"* %9, i64 0, i32 3
  %26 = load i8*, i8** %25, align 8
  %27 = getelementptr inbounds i8, i8* %26, i64 8
  %28 = ptrtoint i8* %27 to i64
  %29 = sub i64 %28, %15
  %30 = shl i64 %29, 3
  %31 = icmp ugt i64 %23, %30
  br i1 %31, label %38, label %32

32:                                               ; preds = %5
  %33 = getelementptr inbounds %"class.jxl::(anonymous namespace)::ReadVisitor", %"class.jxl::(anonymous namespace)::ReadVisitor"* %0, i64 0, i32 1
  %34 = load i8, i8* %33, align 1, !range !2
  %35 = icmp eq i8 %34, 0
  br i1 %35, label %38, label %36

36:                                               ; preds = %32
  %37 = bitcast %"class.jxl::(anonymous namespace)::ReadVisitor"* %0 to %"class.jxl::(anonymous namespace)::VisitorBase"*
  tail call void (%"class.jxl::(anonymous namespace)::VisitorBase"*, i8*, ...) @_ZNK3jxl12_GLOBAL__N_111VisitorBase5TraceEPKcz(%"class.jxl::(anonymous namespace)::VisitorBase"* %37, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.55, i64 0, i64 0), i32 %8)
  br label %38

38:                                               ; preds = %5, %36, %32
  %39 = phi i32 [ -1, %5 ], [ 0, %32 ], [ 0, %36 ]
  ret i32 %39
}

; Function Attrs: nounwind ssp uwtable
define internal i32 @_ZN3jxl12_GLOBAL__N_111ReadVisitor4BitsEmjPj(%"class.jxl::(anonymous namespace)::ReadVisitor"* nocapture readonly, i64, i32, i32* noalias nocapture) unnamed_addr #0 align 2 {
  %5 = getelementptr inbounds %"class.jxl::(anonymous namespace)::ReadVisitor", %"class.jxl::(anonymous namespace)::ReadVisitor"* %0, i64 0, i32 4
  %6 = load %"class.jxl::BitReader"*, %"class.jxl::BitReader"** %5, align 8
  %7 = getelementptr inbounds %"class.jxl::BitReader", %"class.jxl::BitReader"* %6, i64 0, i32 2
  %8 = load i8*, i8** %7, align 8, !alias.scope !22
  %9 = getelementptr inbounds %"class.jxl::BitReader", %"class.jxl::BitReader"* %6, i64 0, i32 3
  %10 = load i8*, i8** %9, align 8, !alias.scope !22
  %11 = icmp ugt i8* %8, %10
  br i1 %11, label %12, label %17, !prof !14

12:                                               ; preds = %4
  tail call void @_ZN3jxl9BitReader19BoundsCheckedRefillEv(%"class.jxl::BitReader"* %6) #14
  %13 = getelementptr inbounds %"class.jxl::BitReader", %"class.jxl::BitReader"* %6, i64 0, i32 0
  %14 = load i64, i64* %13, align 8, !alias.scope !22
  %15 = getelementptr inbounds %"class.jxl::BitReader", %"class.jxl::BitReader"* %6, i64 0, i32 1
  %16 = load i64, i64* %15, align 8, !alias.scope !22
  br label %30

17:                                               ; preds = %4
  %18 = bitcast i8* %8 to i64*
  %19 = load i64, i64* %18, align 1
  %20 = getelementptr inbounds %"class.jxl::BitReader", %"class.jxl::BitReader"* %6, i64 0, i32 1
  %21 = load i64, i64* %20, align 8, !alias.scope !22
  %22 = shl i64 %19, %21
  %23 = getelementptr inbounds %"class.jxl::BitReader", %"class.jxl::BitReader"* %6, i64 0, i32 0
  %24 = load i64, i64* %23, align 8, !alias.scope !22
  %25 = or i64 %24, %22
  store i64 %25, i64* %23, align 8, !alias.scope !22
  %26 = sub i64 63, %21
  %27 = lshr i64 %26, 3
  %28 = getelementptr inbounds i8, i8* %8, i64 %27
  store i8* %28, i8** %7, align 8, !alias.scope !22
  %29 = or i64 %21, 56
  store i64 %29, i64* %20, align 8, !alias.scope !22
  br label %30

30:                                               ; preds = %12, %17
  %31 = phi i64 [ %16, %12 ], [ %29, %17 ]
  %32 = phi i64 [ %14, %12 ], [ %25, %17 ]
  %33 = shl nsw i64 -1, %1
  %34 = xor i64 %33, 4294967295
  %35 = getelementptr inbounds %"class.jxl::BitReader", %"class.jxl::BitReader"* %6, i64 0, i32 0
  %36 = and i64 %32, %34
  %37 = getelementptr inbounds %"class.jxl::BitReader", %"class.jxl::BitReader"* %6, i64 0, i32 1
  %38 = sub i64 %31, %1
  store i64 %38, i64* %37, align 8, !alias.scope !22
  %39 = lshr i64 %32, %1
  store i64 %39, i64* %35, align 8, !alias.scope !22
  %40 = trunc i64 %36 to i32
  store i32 %40, i32* %3, align 4
  %41 = load %"class.jxl::BitReader"*, %"class.jxl::BitReader"** %5, align 8
  %42 = getelementptr inbounds %"class.jxl::BitReader", %"class.jxl::BitReader"* %41, i64 0, i32 2
  %43 = bitcast i8** %42 to i64*
  %44 = load i64, i64* %43, align 8
  %45 = getelementptr inbounds %"class.jxl::BitReader", %"class.jxl::BitReader"* %41, i64 0, i32 4
  %46 = bitcast i8** %45 to i64*
  %47 = load i64, i64* %46, align 8
  %48 = sub i64 %44, %47
  %49 = getelementptr inbounds %"class.jxl::BitReader", %"class.jxl::BitReader"* %41, i64 0, i32 5
  %50 = load i64, i64* %49, align 8
  %51 = add i64 %48, %50
  %52 = shl i64 %51, 3
  %53 = getelementptr inbounds %"class.jxl::BitReader", %"class.jxl::BitReader"* %41, i64 0, i32 1
  %54 = load i64, i64* %53, align 8
  %55 = sub i64 %52, %54
  %56 = getelementptr inbounds %"class.jxl::BitReader", %"class.jxl::BitReader"* %41, i64 0, i32 7
  store i64 %55, i64* %56, align 8
  %57 = getelementptr inbounds %"class.jxl::BitReader", %"class.jxl::BitReader"* %41, i64 0, i32 3
  %58 = load i8*, i8** %57, align 8
  %59 = getelementptr inbounds i8, i8* %58, i64 8
  %60 = ptrtoint i8* %59 to i64
  %61 = sub i64 %60, %47
  %62 = shl i64 %61, 3
  %63 = icmp ugt i64 %55, %62
  br i1 %63, label %70, label %64

64:                                               ; preds = %30
  %65 = getelementptr inbounds %"class.jxl::(anonymous namespace)::ReadVisitor", %"class.jxl::(anonymous namespace)::ReadVisitor"* %0, i64 0, i32 1
  %66 = load i8, i8* %65, align 1, !range !2
  %67 = icmp eq i8 %66, 0
  br i1 %67, label %70, label %68

68:                                               ; preds = %64
  %69 = bitcast %"class.jxl::(anonymous namespace)::ReadVisitor"* %0 to %"class.jxl::(anonymous namespace)::VisitorBase"*
  tail call void (%"class.jxl::(anonymous namespace)::VisitorBase"*, i8*, ...) @_ZNK3jxl12_GLOBAL__N_111VisitorBase5TraceEPKcz(%"class.jxl::(anonymous namespace)::VisitorBase"* %69, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.56, i64 0, i64 0), i64 %1, i32 %40)
  br label %70

70:                                               ; preds = %30, %68, %64
  %71 = phi i32 [ -1, %30 ], [ 0, %64 ], [ 0, %68 ]
  ret i32 %71
}

; Function Attrs: nounwind ssp uwtable
define internal i32 @_ZN3jxl12_GLOBAL__N_111ReadVisitor3U64EmPm(%"class.jxl::(anonymous namespace)::ReadVisitor"* nocapture readonly, i64, i64* noalias nocapture) unnamed_addr #0 align 2 {
  %4 = getelementptr inbounds %"class.jxl::(anonymous namespace)::ReadVisitor", %"class.jxl::(anonymous namespace)::ReadVisitor"* %0, i64 0, i32 4
  %5 = load %"class.jxl::BitReader"*, %"class.jxl::BitReader"** %4, align 8
  %6 = tail call i64 @_ZN3jxl8U64Coder4ReadEPNS_9BitReaderE(%"class.jxl::BitReader"* %5)
  store i64 %6, i64* %2, align 8
  %7 = load %"class.jxl::BitReader"*, %"class.jxl::BitReader"** %4, align 8
  %8 = getelementptr inbounds %"class.jxl::BitReader", %"class.jxl::BitReader"* %7, i64 0, i32 2
  %9 = bitcast i8** %8 to i64*
  %10 = load i64, i64* %9, align 8
  %11 = getelementptr inbounds %"class.jxl::BitReader", %"class.jxl::BitReader"* %7, i64 0, i32 4
  %12 = bitcast i8** %11 to i64*
  %13 = load i64, i64* %12, align 8
  %14 = sub i64 %10, %13
  %15 = getelementptr inbounds %"class.jxl::BitReader", %"class.jxl::BitReader"* %7, i64 0, i32 5
  %16 = load i64, i64* %15, align 8
  %17 = add i64 %14, %16
  %18 = shl i64 %17, 3
  %19 = getelementptr inbounds %"class.jxl::BitReader", %"class.jxl::BitReader"* %7, i64 0, i32 1
  %20 = load i64, i64* %19, align 8
  %21 = sub i64 %18, %20
  %22 = getelementptr inbounds %"class.jxl::BitReader", %"class.jxl::BitReader"* %7, i64 0, i32 7
  store i64 %21, i64* %22, align 8
  %23 = getelementptr inbounds %"class.jxl::BitReader", %"class.jxl::BitReader"* %7, i64 0, i32 3
  %24 = load i8*, i8** %23, align 8
  %25 = getelementptr inbounds i8, i8* %24, i64 8
  %26 = ptrtoint i8* %25 to i64
  %27 = sub i64 %26, %13
  %28 = shl i64 %27, 3
  %29 = icmp ugt i64 %21, %28
  br i1 %29, label %36, label %30

30:                                               ; preds = %3
  %31 = getelementptr inbounds %"class.jxl::(anonymous namespace)::ReadVisitor", %"class.jxl::(anonymous namespace)::ReadVisitor"* %0, i64 0, i32 1
  %32 = load i8, i8* %31, align 1, !range !2
  %33 = icmp eq i8 %32, 0
  br i1 %33, label %36, label %34

34:                                               ; preds = %30
  %35 = bitcast %"class.jxl::(anonymous namespace)::ReadVisitor"* %0 to %"class.jxl::(anonymous namespace)::VisitorBase"*
  tail call void (%"class.jxl::(anonymous namespace)::VisitorBase"*, i8*, ...) @_ZNK3jxl12_GLOBAL__N_111VisitorBase5TraceEPKcz(%"class.jxl::(anonymous namespace)::VisitorBase"* %35, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.57, i64 0, i64 0), i64 %6)
  br label %36

36:                                               ; preds = %3, %34, %30
  %37 = phi i32 [ -1, %3 ], [ 0, %30 ], [ 0, %34 ]
  ret i32 %37
}

; Function Attrs: nounwind ssp uwtable
define internal i32 @_ZN3jxl12_GLOBAL__N_111ReadVisitor3F16EfPf(%"class.jxl::(anonymous namespace)::ReadVisitor"* nocapture, float, float* noalias nocapture) unnamed_addr #0 align 2 {
  %4 = getelementptr inbounds %"class.jxl::(anonymous namespace)::ReadVisitor", %"class.jxl::(anonymous namespace)::ReadVisitor"* %0, i64 0, i32 4
  %5 = load %"class.jxl::BitReader"*, %"class.jxl::BitReader"** %4, align 8
  %6 = getelementptr inbounds %"class.jxl::BitReader", %"class.jxl::BitReader"* %5, i64 0, i32 2
  %7 = load i8*, i8** %6, align 8, !alias.scope !25, !noalias !28
  %8 = getelementptr inbounds %"class.jxl::BitReader", %"class.jxl::BitReader"* %5, i64 0, i32 3
  %9 = load i8*, i8** %8, align 8, !alias.scope !25, !noalias !28
  %10 = icmp ugt i8* %7, %9
  br i1 %10, label %11, label %16, !prof !14

11:                                               ; preds = %3
  tail call void @_ZN3jxl9BitReader19BoundsCheckedRefillEv(%"class.jxl::BitReader"* %5) #14, !noalias !28
  %12 = getelementptr inbounds %"class.jxl::BitReader", %"class.jxl::BitReader"* %5, i64 0, i32 0
  %13 = load i64, i64* %12, align 8, !alias.scope !25, !noalias !28
  %14 = getelementptr inbounds %"class.jxl::BitReader", %"class.jxl::BitReader"* %5, i64 0, i32 1
  %15 = load i64, i64* %14, align 8, !alias.scope !25, !noalias !28
  br label %29

16:                                               ; preds = %3
  %17 = bitcast i8* %7 to i64*
  %18 = load i64, i64* %17, align 1, !noalias !28
  %19 = getelementptr inbounds %"class.jxl::BitReader", %"class.jxl::BitReader"* %5, i64 0, i32 1
  %20 = load i64, i64* %19, align 8, !alias.scope !25, !noalias !28
  %21 = shl i64 %18, %20
  %22 = getelementptr inbounds %"class.jxl::BitReader", %"class.jxl::BitReader"* %5, i64 0, i32 0
  %23 = load i64, i64* %22, align 8, !alias.scope !25, !noalias !28
  %24 = or i64 %23, %21
  store i64 %24, i64* %22, align 8, !alias.scope !25, !noalias !28
  %25 = sub i64 63, %20
  %26 = lshr i64 %25, 3
  %27 = getelementptr inbounds i8, i8* %7, i64 %26
  store i8* %27, i8** %6, align 8, !alias.scope !25, !noalias !28
  %28 = or i64 %20, 56
  store i64 %28, i64* %19, align 8, !alias.scope !25, !noalias !28
  br label %29

29:                                               ; preds = %16, %11
  %30 = phi i64 [ %15, %11 ], [ %28, %16 ]
  %31 = phi i64 [ %13, %11 ], [ %24, %16 ]
  %32 = getelementptr inbounds %"class.jxl::BitReader", %"class.jxl::BitReader"* %5, i64 0, i32 0
  %33 = getelementptr inbounds %"class.jxl::BitReader", %"class.jxl::BitReader"* %5, i64 0, i32 1
  %34 = add i64 %30, -16
  store i64 %34, i64* %33, align 8, !alias.scope !25, !noalias !28
  %35 = lshr i64 %31, 16
  store i64 %35, i64* %32, align 8, !alias.scope !25, !noalias !28
  %36 = trunc i64 %31 to i32
  %37 = lshr i32 %36, 15
  %38 = and i32 %37, 1
  %39 = lshr i32 %36, 10
  %40 = and i32 %39, 31
  %41 = and i32 %36, 1023
  switch i32 %40, label %49 [
    i32 31, label %57
    i32 0, label %42
  ], !prof !15

42:                                               ; preds = %29
  %43 = uitofp i32 %41 to float
  %44 = fmul float %43, 0x3F50000000000000
  %45 = fmul float %44, 0x3F10000000000000
  %46 = icmp eq i32 %38, 0
  %47 = fsub float -0.000000e+00, %45
  %48 = select i1 %46, float %45, float %47
  store float %48, float* %2, align 4, !alias.scope !28, !noalias !25
  br label %57

49:                                               ; preds = %29
  %50 = shl nuw nsw i32 %41, 13
  %51 = shl nuw i32 %38, 31
  %52 = shl nuw nsw i32 %40, 23
  %53 = add nuw nsw i32 %52, 939524096
  %54 = or i32 %51, %50
  %55 = or i32 %54, %53
  %56 = bitcast float* %2 to i32*
  store i32 %55, i32* %56, align 4, !alias.scope !28, !noalias !25
  br label %57

57:                                               ; preds = %29, %42, %49
  %58 = phi i8 [ 1, %49 ], [ 1, %42 ], [ 0, %29 ]
  %59 = getelementptr inbounds %"class.jxl::(anonymous namespace)::ReadVisitor", %"class.jxl::(anonymous namespace)::ReadVisitor"* %0, i64 0, i32 2
  %60 = load i8, i8* %59, align 2, !range !2
  %61 = and i8 %60, %58
  store i8 %61, i8* %59, align 2
  %62 = load %"class.jxl::BitReader"*, %"class.jxl::BitReader"** %4, align 8
  %63 = getelementptr inbounds %"class.jxl::BitReader", %"class.jxl::BitReader"* %62, i64 0, i32 2
  %64 = bitcast i8** %63 to i64*
  %65 = load i64, i64* %64, align 8
  %66 = getelementptr inbounds %"class.jxl::BitReader", %"class.jxl::BitReader"* %62, i64 0, i32 4
  %67 = bitcast i8** %66 to i64*
  %68 = load i64, i64* %67, align 8
  %69 = sub i64 %65, %68
  %70 = getelementptr inbounds %"class.jxl::BitReader", %"class.jxl::BitReader"* %62, i64 0, i32 5
  %71 = load i64, i64* %70, align 8
  %72 = add i64 %69, %71
  %73 = shl i64 %72, 3
  %74 = getelementptr inbounds %"class.jxl::BitReader", %"class.jxl::BitReader"* %62, i64 0, i32 1
  %75 = load i64, i64* %74, align 8
  %76 = sub i64 %73, %75
  %77 = getelementptr inbounds %"class.jxl::BitReader", %"class.jxl::BitReader"* %62, i64 0, i32 7
  store i64 %76, i64* %77, align 8
  %78 = getelementptr inbounds %"class.jxl::BitReader", %"class.jxl::BitReader"* %62, i64 0, i32 3
  %79 = load i8*, i8** %78, align 8
  %80 = getelementptr inbounds i8, i8* %79, i64 8
  %81 = ptrtoint i8* %80 to i64
  %82 = sub i64 %81, %68
  %83 = shl i64 %82, 3
  %84 = icmp ugt i64 %76, %83
  br i1 %84, label %93, label %85

85:                                               ; preds = %57
  %86 = getelementptr inbounds %"class.jxl::(anonymous namespace)::ReadVisitor", %"class.jxl::(anonymous namespace)::ReadVisitor"* %0, i64 0, i32 1
  %87 = load i8, i8* %86, align 1, !range !2
  %88 = icmp eq i8 %87, 0
  br i1 %88, label %93, label %89

89:                                               ; preds = %85
  %90 = bitcast %"class.jxl::(anonymous namespace)::ReadVisitor"* %0 to %"class.jxl::(anonymous namespace)::VisitorBase"*
  %91 = load float, float* %2, align 4
  %92 = fpext float %91 to double
  tail call void (%"class.jxl::(anonymous namespace)::VisitorBase"*, i8*, ...) @_ZNK3jxl12_GLOBAL__N_111VisitorBase5TraceEPKcz(%"class.jxl::(anonymous namespace)::VisitorBase"* %90, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.58, i64 0, i64 0), double %92)
  br label %93

93:                                               ; preds = %57, %89, %85
  %94 = phi i32 [ -1, %57 ], [ 0, %85 ], [ 0, %89 ]
  ret i32 %94
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN3jxl12_GLOBAL__N_111ReadVisitor10SetDefaultEPNS_6FieldsE(%"class.jxl::(anonymous namespace)::ReadVisitor"* nocapture readnone, %"class.jxl::Fields"*) unnamed_addr #0 align 2 {
  %3 = alloca %"struct.jxl::(anonymous namespace)::SetDefaultVisitor", align 8
  %4 = bitcast %"struct.jxl::(anonymous namespace)::SetDefaultVisitor"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %4) #14
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %4, i8 -86, i64 40, i1 false) #14
  %5 = getelementptr inbounds %"struct.jxl::(anonymous namespace)::SetDefaultVisitor", %"struct.jxl::(anonymous namespace)::SetDefaultVisitor"* %3, i64 0, i32 0, i32 0, i32 0
  %6 = getelementptr inbounds %"struct.jxl::(anonymous namespace)::SetDefaultVisitor", %"struct.jxl::(anonymous namespace)::SetDefaultVisitor"* %3, i64 0, i32 0, i32 1
  %7 = bitcast i64* %6 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %7, i8 0, i64 25, i1 false) #14
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [18 x i8*] }, { [18 x i8*] }* @_ZTVN3jxl12_GLOBAL__N_117SetDefaultVisitorE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %5, align 8
  %8 = bitcast %"struct.jxl::(anonymous namespace)::SetDefaultVisitor"* %3 to %"class.jxl::(anonymous namespace)::VisitorBase"*
  %9 = call i32 @_ZN3jxl12_GLOBAL__N_111VisitorBase5VisitEPNS_6FieldsEPKc(%"class.jxl::(anonymous namespace)::VisitorBase"* nonnull %8, %"class.jxl::Fields"* %1, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str, i64 0, i64 0)) #14
  %10 = icmp eq i32 %9, 0
  br i1 %10, label %14, label %11

11:                                               ; preds = %2
  %12 = call zeroext i1 (i8*, ...) @_ZN3jxl5DebugEPKcz(i8* getelementptr inbounds ([48 x i8], [48 x i8]* @.str.3, i64 0, i64 0), i8* getelementptr inbounds ([47 x i8], [47 x i8]* @.str.2, i64 0, i64 0), i32 669) #14
  %13 = call zeroext i1 @_ZN3jxl5AbortEv() #17
  unreachable

14:                                               ; preds = %2
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [18 x i8*] }, { [18 x i8*] }* @_ZTVN3jxl12_GLOBAL__N_111VisitorBaseE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %5, align 8
  %15 = load i64, i64* %6, align 8
  %16 = icmp eq i64 %15, 0
  br i1 %16, label %20, label %17

17:                                               ; preds = %14
  %18 = call zeroext i1 (i8*, ...) @_ZN3jxl5DebugEPKcz(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.5, i64 0, i64 0), i8* getelementptr inbounds ([47 x i8], [47 x i8]* @.str.2, i64 0, i64 0), i32 76, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.23, i64 0, i64 0)) #14
  %19 = call zeroext i1 @_ZN3jxl5AbortEv() #17
  unreachable

20:                                               ; preds = %14
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %4) #14
  ret void
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define internal zeroext i1 @_ZNK3jxl12_GLOBAL__N_111ReadVisitor9IsReadingEv(%"class.jxl::(anonymous namespace)::ReadVisitor"* nocapture readnone) unnamed_addr #9 align 2 {
  ret i1 true
}

; Function Attrs: nounwind ssp uwtable
define internal i32 @_ZN3jxl12_GLOBAL__N_111ReadVisitor15BeginExtensionsEPm(%"class.jxl::(anonymous namespace)::ReadVisitor"*, i64* noalias) unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"class.jxl::(anonymous namespace)::ReadVisitor", %"class.jxl::(anonymous namespace)::ReadVisitor"* %0, i64 0, i32 0, i32 0
  %4 = bitcast %"class.jxl::(anonymous namespace)::ReadVisitor"* %0 to i32 (%"class.jxl::Visitor"*, i64, i64*)***
  %5 = load i32 (%"class.jxl::Visitor"*, i64, i64*)**, i32 (%"class.jxl::Visitor"*, i64, i64*)*** %4, align 8, !noalias !30
  %6 = getelementptr inbounds i32 (%"class.jxl::Visitor"*, i64, i64*)*, i32 (%"class.jxl::Visitor"*, i64, i64*)** %5, i64 6
  %7 = load i32 (%"class.jxl::Visitor"*, i64, i64*)*, i32 (%"class.jxl::Visitor"*, i64, i64*)** %6, align 8, !noalias !30
  %8 = tail call i32 %7(%"class.jxl::Visitor"* %3, i64 0, i64* %1) #14
  %9 = icmp eq i32 %8, 0
  br i1 %9, label %10, label %73

10:                                               ; preds = %2
  %11 = getelementptr inbounds %"class.jxl::(anonymous namespace)::ReadVisitor", %"class.jxl::(anonymous namespace)::ReadVisitor"* %0, i64 0, i32 0, i32 2, i32 0
  %12 = load i64, i64* %11, align 8, !noalias !30
  %13 = and i64 %12, 1
  %14 = icmp eq i64 %13, 0
  br i1 %14, label %18, label %15

15:                                               ; preds = %10
  %16 = tail call zeroext i1 (i8*, ...) @_ZN3jxl5DebugEPKcz(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.5, i64 0, i64 0), i8* getelementptr inbounds ([47 x i8], [47 x i8]* @.str.2, i64 0, i64 0), i32 51, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.28, i64 0, i64 0)) #14
  %17 = tail call zeroext i1 @_ZN3jxl5AbortEv() #17
  unreachable

18:                                               ; preds = %10
  %19 = getelementptr inbounds %"class.jxl::(anonymous namespace)::ReadVisitor", %"class.jxl::(anonymous namespace)::ReadVisitor"* %0, i64 0, i32 0, i32 2, i32 1
  %20 = load i64, i64* %19, align 8, !noalias !30
  %21 = and i64 %20, 1
  %22 = icmp eq i64 %21, 0
  br i1 %22, label %26, label %23

23:                                               ; preds = %18
  %24 = tail call zeroext i1 (i8*, ...) @_ZN3jxl5DebugEPKcz(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.5, i64 0, i64 0), i8* getelementptr inbounds ([47 x i8], [47 x i8]* @.str.2, i64 0, i64 0), i32 52, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.29, i64 0, i64 0)) #14
  %25 = tail call zeroext i1 @_ZN3jxl5AbortEv() #17
  unreachable

26:                                               ; preds = %18
  %27 = add i64 %12, 1
  store i64 %27, i64* %11, align 8, !noalias !30
  %28 = load i64, i64* %1, align 8
  %29 = icmp eq i64 %28, 0
  br i1 %29, label %73, label %30

30:                                               ; preds = %26
  %31 = bitcast %"class.jxl::(anonymous namespace)::ReadVisitor"* %0 to i32 (%"class.jxl::(anonymous namespace)::ReadVisitor"*, i64, i64*)***
  %32 = getelementptr inbounds %"class.jxl::(anonymous namespace)::ReadVisitor", %"class.jxl::(anonymous namespace)::ReadVisitor"* %0, i64 0, i32 6
  br label %33

33:                                               ; preds = %30, %47
  %34 = phi i64 [ %28, %30 ], [ %49, %47 ]
  %35 = tail call i64 @llvm.cttz.i64(i64 %34, i1 true) #14, !range !9
  %36 = getelementptr inbounds %"class.jxl::(anonymous namespace)::ReadVisitor", %"class.jxl::(anonymous namespace)::ReadVisitor"* %0, i64 0, i32 5, i64 %35
  %37 = load i32 (%"class.jxl::(anonymous namespace)::ReadVisitor"*, i64, i64*)**, i32 (%"class.jxl::(anonymous namespace)::ReadVisitor"*, i64, i64*)*** %31, align 8
  %38 = getelementptr inbounds i32 (%"class.jxl::(anonymous namespace)::ReadVisitor"*, i64, i64*)*, i32 (%"class.jxl::(anonymous namespace)::ReadVisitor"*, i64, i64*)** %37, i64 6
  %39 = load i32 (%"class.jxl::(anonymous namespace)::ReadVisitor"*, i64, i64*)*, i32 (%"class.jxl::(anonymous namespace)::ReadVisitor"*, i64, i64*)** %38, align 8
  %40 = tail call i32 %39(%"class.jxl::(anonymous namespace)::ReadVisitor"* %0, i64 0, i64* %36) #14
  %41 = icmp eq i32 %40, 0
  br i1 %41, label %42, label %73

42:                                               ; preds = %33
  %43 = load i64, i64* %32, align 8
  %44 = load i64, i64* %36, align 8
  %45 = add i64 %44, %43
  store i64 %45, i64* %32, align 8
  %46 = icmp ult i64 %45, %43
  br i1 %46, label %73, label %47

47:                                               ; preds = %42
  %48 = add i64 %34, -1
  %49 = and i64 %48, %34
  %50 = icmp eq i64 %49, 0
  br i1 %50, label %51, label %33

51:                                               ; preds = %47
  %52 = getelementptr inbounds %"class.jxl::(anonymous namespace)::ReadVisitor", %"class.jxl::(anonymous namespace)::ReadVisitor"* %0, i64 0, i32 4
  %53 = load %"class.jxl::BitReader"*, %"class.jxl::BitReader"** %52, align 8
  %54 = getelementptr inbounds %"class.jxl::BitReader", %"class.jxl::BitReader"* %53, i64 0, i32 2
  %55 = bitcast i8** %54 to i64*
  %56 = load i64, i64* %55, align 8
  %57 = getelementptr inbounds %"class.jxl::BitReader", %"class.jxl::BitReader"* %53, i64 0, i32 4
  %58 = bitcast i8** %57 to i64*
  %59 = load i64, i64* %58, align 8
  %60 = sub i64 %56, %59
  %61 = getelementptr inbounds %"class.jxl::BitReader", %"class.jxl::BitReader"* %53, i64 0, i32 5
  %62 = load i64, i64* %61, align 8
  %63 = add i64 %60, %62
  %64 = shl i64 %63, 3
  %65 = getelementptr inbounds %"class.jxl::BitReader", %"class.jxl::BitReader"* %53, i64 0, i32 1
  %66 = load i64, i64* %65, align 8
  %67 = sub i64 %64, %66
  %68 = getelementptr inbounds %"class.jxl::(anonymous namespace)::ReadVisitor", %"class.jxl::(anonymous namespace)::ReadVisitor"* %0, i64 0, i32 7
  store i64 %67, i64* %68, align 8
  %69 = icmp eq i64 %67, 0
  br i1 %69, label %70, label %73

70:                                               ; preds = %51
  %71 = tail call zeroext i1 (i8*, ...) @_ZN3jxl5DebugEPKcz(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.5, i64 0, i64 0), i8* getelementptr inbounds ([47 x i8], [47 x i8]* @.str.2, i64 0, i64 0), i32 389, i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.61, i64 0, i64 0)) #14
  %72 = tail call zeroext i1 @_ZN3jxl5AbortEv() #17
  unreachable

73:                                               ; preds = %42, %33, %51, %26, %2
  %74 = phi i32 [ %8, %2 ], [ 0, %26 ], [ 0, %51 ], [ 1, %42 ], [ %40, %33 ]
  ret i32 %74
}

; Function Attrs: nounwind ssp uwtable
define internal i32 @_ZN3jxl12_GLOBAL__N_111ReadVisitor13EndExtensionsEv(%"class.jxl::(anonymous namespace)::ReadVisitor"* nocapture) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.jxl::(anonymous namespace)::ReadVisitor", %"class.jxl::(anonymous namespace)::ReadVisitor"* %0, i64 0, i32 0, i32 2, i32 0
  %3 = load i64, i64* %2, align 8
  %4 = and i64 %3, 1
  %5 = icmp eq i64 %4, 0
  br i1 %5, label %6, label %9

6:                                                ; preds = %1
  %7 = tail call zeroext i1 (i8*, ...) @_ZN3jxl5DebugEPKcz(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.5, i64 0, i64 0), i8* getelementptr inbounds ([47 x i8], [47 x i8]* @.str.2, i64 0, i64 0), i32 57, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.30, i64 0, i64 0)) #14
  %8 = tail call zeroext i1 @_ZN3jxl5AbortEv() #17
  unreachable

9:                                                ; preds = %1
  %10 = getelementptr inbounds %"class.jxl::(anonymous namespace)::ReadVisitor", %"class.jxl::(anonymous namespace)::ReadVisitor"* %0, i64 0, i32 0, i32 2, i32 1
  %11 = load i64, i64* %10, align 8
  %12 = and i64 %11, 1
  %13 = icmp eq i64 %12, 0
  br i1 %13, label %17, label %14

14:                                               ; preds = %9
  %15 = tail call zeroext i1 (i8*, ...) @_ZN3jxl5DebugEPKcz(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.5, i64 0, i64 0), i8* getelementptr inbounds ([47 x i8], [47 x i8]* @.str.2, i64 0, i64 0), i32 58, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.29, i64 0, i64 0)) #14
  %16 = tail call zeroext i1 @_ZN3jxl5AbortEv() #17
  unreachable

17:                                               ; preds = %9
  %18 = add i64 %11, 1
  store i64 %18, i64* %10, align 8
  %19 = getelementptr inbounds %"class.jxl::(anonymous namespace)::ReadVisitor", %"class.jxl::(anonymous namespace)::ReadVisitor"* %0, i64 0, i32 7
  %20 = load i64, i64* %19, align 8
  %21 = icmp eq i64 %20, 0
  br i1 %21, label %109, label %22

22:                                               ; preds = %17
  %23 = getelementptr inbounds %"class.jxl::(anonymous namespace)::ReadVisitor", %"class.jxl::(anonymous namespace)::ReadVisitor"* %0, i64 0, i32 3
  %24 = load i8, i8* %23, align 1, !range !2
  %25 = icmp eq i8 %24, 0
  br i1 %25, label %109, label %26

26:                                               ; preds = %22
  %27 = getelementptr inbounds %"class.jxl::(anonymous namespace)::ReadVisitor", %"class.jxl::(anonymous namespace)::ReadVisitor"* %0, i64 0, i32 4
  %28 = load %"class.jxl::BitReader"*, %"class.jxl::BitReader"** %27, align 8
  %29 = getelementptr inbounds %"class.jxl::BitReader", %"class.jxl::BitReader"* %28, i64 0, i32 2
  %30 = bitcast i8** %29 to i64*
  %31 = load i64, i64* %30, align 8
  %32 = getelementptr inbounds %"class.jxl::BitReader", %"class.jxl::BitReader"* %28, i64 0, i32 4
  %33 = bitcast i8** %32 to i64*
  %34 = load i64, i64* %33, align 8
  %35 = sub i64 %31, %34
  %36 = getelementptr inbounds %"class.jxl::BitReader", %"class.jxl::BitReader"* %28, i64 0, i32 5
  %37 = load i64, i64* %36, align 8
  %38 = add i64 %35, %37
  %39 = shl i64 %38, 3
  %40 = getelementptr inbounds %"class.jxl::BitReader", %"class.jxl::BitReader"* %28, i64 0, i32 1
  %41 = load i64, i64* %40, align 8
  %42 = sub i64 %39, %41
  %43 = getelementptr inbounds %"class.jxl::(anonymous namespace)::ReadVisitor", %"class.jxl::(anonymous namespace)::ReadVisitor"* %0, i64 0, i32 6
  %44 = load i64, i64* %43, align 8
  %45 = add i64 %44, %20
  %46 = icmp ult i64 %45, %20
  %47 = icmp ult i64 %45, %42
  %48 = or i1 %46, %47
  %49 = inttoptr i64 %31 to i8*
  br i1 %48, label %109, label %50

50:                                               ; preds = %26
  %51 = sub i64 %45, %42
  %52 = icmp eq i64 %51, 0
  br i1 %52, label %108, label %53

53:                                               ; preds = %50
  %54 = icmp ult i64 %41, %51
  br i1 %54, label %60, label %55, !prof !33

55:                                               ; preds = %53
  %56 = sub i64 %41, %51
  store i64 %56, i64* %40, align 8
  %57 = getelementptr inbounds %"class.jxl::BitReader", %"class.jxl::BitReader"* %28, i64 0, i32 0
  %58 = load i64, i64* %57, align 8
  %59 = lshr i64 %58, %51
  br label %82

60:                                               ; preds = %53
  %61 = sub i64 %51, %41
  %62 = getelementptr inbounds %"class.jxl::BitReader", %"class.jxl::BitReader"* %28, i64 0, i32 0
  %63 = lshr i64 %61, 3
  %64 = bitcast %"class.jxl::BitReader"* %28 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %64, i8 0, i64 16, i1 false) #14
  %65 = getelementptr inbounds i8, i8* %49, i64 %63
  store i8* %65, i8** %29, align 8
  %66 = and i64 %61, 7
  %67 = getelementptr inbounds %"class.jxl::BitReader", %"class.jxl::BitReader"* %28, i64 0, i32 3
  %68 = load i8*, i8** %67, align 8
  %69 = icmp ugt i8* %65, %68
  br i1 %69, label %70, label %73, !prof !14

70:                                               ; preds = %60
  tail call void @_ZN3jxl9BitReader19BoundsCheckedRefillEv(%"class.jxl::BitReader"* %28) #14
  %71 = load i64, i64* %40, align 8
  %72 = load i64, i64* %62, align 8
  br label %77

73:                                               ; preds = %60
  %74 = bitcast i8* %65 to i64*
  %75 = load i64, i64* %74, align 1
  store i64 %75, i64* %62, align 8
  %76 = getelementptr inbounds i8, i8* %65, i64 7
  store i8* %76, i8** %29, align 8
  store i64 56, i64* %40, align 8
  br label %77

77:                                               ; preds = %73, %70
  %78 = phi i64 [ %72, %70 ], [ %75, %73 ]
  %79 = phi i64 [ %71, %70 ], [ 56, %73 ]
  %80 = sub i64 %79, %66
  store i64 %80, i64* %40, align 8
  %81 = lshr i64 %78, %66
  br label %82

82:                                               ; preds = %55, %77
  %83 = phi i64* [ %57, %55 ], [ %62, %77 ]
  %84 = phi i64 [ %59, %55 ], [ %81, %77 ]
  store i64 %84, i64* %83, align 8
  %85 = load %"class.jxl::BitReader"*, %"class.jxl::BitReader"** %27, align 8
  %86 = getelementptr inbounds %"class.jxl::BitReader", %"class.jxl::BitReader"* %85, i64 0, i32 2
  %87 = bitcast i8** %86 to i64*
  %88 = load i64, i64* %87, align 8
  %89 = getelementptr inbounds %"class.jxl::BitReader", %"class.jxl::BitReader"* %85, i64 0, i32 4
  %90 = bitcast i8** %89 to i64*
  %91 = load i64, i64* %90, align 8
  %92 = sub i64 %88, %91
  %93 = getelementptr inbounds %"class.jxl::BitReader", %"class.jxl::BitReader"* %85, i64 0, i32 5
  %94 = load i64, i64* %93, align 8
  %95 = add i64 %92, %94
  %96 = shl i64 %95, 3
  %97 = getelementptr inbounds %"class.jxl::BitReader", %"class.jxl::BitReader"* %85, i64 0, i32 1
  %98 = load i64, i64* %97, align 8
  %99 = sub i64 %96, %98
  %100 = getelementptr inbounds %"class.jxl::BitReader", %"class.jxl::BitReader"* %85, i64 0, i32 7
  store i64 %99, i64* %100, align 8
  %101 = getelementptr inbounds %"class.jxl::BitReader", %"class.jxl::BitReader"* %85, i64 0, i32 3
  %102 = load i8*, i8** %101, align 8
  %103 = getelementptr inbounds i8, i8* %102, i64 8
  %104 = ptrtoint i8* %103 to i64
  %105 = sub i64 %104, %91
  %106 = shl i64 %105, 3
  %107 = icmp ugt i64 %99, %106
  br i1 %107, label %109, label %108

108:                                              ; preds = %82, %50
  br label %109

109:                                              ; preds = %82, %26, %108, %22, %17
  %110 = phi i32 [ 0, %17 ], [ 0, %22 ], [ 0, %108 ], [ 1, %26 ], [ -1, %82 ]
  ret i32 %110
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define internal i8* @_ZN3jxl12_GLOBAL__N_111ReadVisitor11VisitorNameEv(%"class.jxl::(anonymous namespace)::ReadVisitor"* nocapture readnone) unnamed_addr #9 align 2 {
  ret i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.64, i64 0, i64 0)
}

; Function Attrs: nounwind readnone speculatable
declare i64 @llvm.cttz.i64(i64, i1 immarg) #15

; Function Attrs: noinline nounwind ssp uwtable
define linkonce_odr hidden void @_ZN3jxl9BitReader19BoundsCheckedRefillEv(%"class.jxl::BitReader"*) local_unnamed_addr #16 comdat align 2 {
  %2 = getelementptr inbounds %"class.jxl::BitReader", %"class.jxl::BitReader"* %0, i64 0, i32 3
  %3 = load i8*, i8** %2, align 8
  %4 = getelementptr inbounds i8, i8* %3, i64 8
  %5 = getelementptr inbounds %"class.jxl::BitReader", %"class.jxl::BitReader"* %0, i64 0, i32 2
  %6 = getelementptr inbounds %"class.jxl::BitReader", %"class.jxl::BitReader"* %0, i64 0, i32 1
  %7 = load i64, i64* %6, align 8
  %8 = icmp ult i64 %7, 56
  br i1 %8, label %9, label %24

9:                                                ; preds = %1
  %10 = getelementptr inbounds %"class.jxl::BitReader", %"class.jxl::BitReader"* %0, i64 0, i32 0
  %11 = load i8*, i8** %5, align 8
  %12 = icmp ult i8* %11, %4
  br i1 %12, label %13, label %24

13:                                               ; preds = %9
  %14 = getelementptr inbounds i8, i8* %11, i64 1
  store i8* %14, i8** %5, align 8
  %15 = load i8, i8* %11, align 1
  %16 = zext i8 %15 to i64
  %17 = shl i64 %16, %7
  %18 = load i64, i64* %10, align 8
  %19 = or i64 %17, %18
  store i64 %19, i64* %10, align 8
  %20 = add nuw nsw i64 %7, 8
  store i64 %20, i64* %6, align 8
  %21 = icmp ult i64 %20, 56
  %22 = icmp ult i8* %14, %4
  %23 = and i1 %21, %22
  br i1 %23, label %33, label %24

24:                                               ; preds = %13, %9, %33, %44, %55, %66, %77, %88, %1
  %25 = phi i64 [ %7, %1 ], [ %7, %9 ], [ %20, %13 ], [ %40, %33 ], [ %51, %44 ], [ %62, %55 ], [ %73, %66 ], [ %84, %77 ], [ %95, %88 ]
  %26 = sub i64 63, %25
  %27 = lshr i64 %26, 3
  %28 = getelementptr inbounds %"class.jxl::BitReader", %"class.jxl::BitReader"* %0, i64 0, i32 5
  %29 = load i64, i64* %28, align 8
  %30 = add i64 %29, %27
  store i64 %30, i64* %28, align 8
  %31 = and i64 %26, -8
  %32 = add i64 %31, %25
  store i64 %32, i64* %6, align 8
  ret void

33:                                               ; preds = %13
  %34 = getelementptr inbounds i8, i8* %11, i64 2
  store i8* %34, i8** %5, align 8
  %35 = load i8, i8* %14, align 1
  %36 = zext i8 %35 to i64
  %37 = shl i64 %36, %20
  %38 = load i64, i64* %10, align 8
  %39 = or i64 %37, %38
  store i64 %39, i64* %10, align 8
  %40 = add nuw nsw i64 %7, 16
  store i64 %40, i64* %6, align 8
  %41 = icmp ult i64 %40, 56
  %42 = icmp ult i8* %34, %4
  %43 = and i1 %41, %42
  br i1 %43, label %44, label %24

44:                                               ; preds = %33
  %45 = getelementptr inbounds i8, i8* %11, i64 3
  store i8* %45, i8** %5, align 8
  %46 = load i8, i8* %34, align 1
  %47 = zext i8 %46 to i64
  %48 = shl i64 %47, %40
  %49 = load i64, i64* %10, align 8
  %50 = or i64 %48, %49
  store i64 %50, i64* %10, align 8
  %51 = add nuw nsw i64 %7, 24
  store i64 %51, i64* %6, align 8
  %52 = icmp ult i64 %51, 56
  %53 = icmp ult i8* %45, %4
  %54 = and i1 %52, %53
  br i1 %54, label %55, label %24

55:                                               ; preds = %44
  %56 = getelementptr inbounds i8, i8* %11, i64 4
  store i8* %56, i8** %5, align 8
  %57 = load i8, i8* %45, align 1
  %58 = zext i8 %57 to i64
  %59 = shl i64 %58, %51
  %60 = load i64, i64* %10, align 8
  %61 = or i64 %59, %60
  store i64 %61, i64* %10, align 8
  %62 = add nuw nsw i64 %7, 32
  store i64 %62, i64* %6, align 8
  %63 = icmp ult i64 %62, 56
  %64 = icmp ult i8* %56, %4
  %65 = and i1 %63, %64
  br i1 %65, label %66, label %24

66:                                               ; preds = %55
  %67 = getelementptr inbounds i8, i8* %11, i64 5
  store i8* %67, i8** %5, align 8
  %68 = load i8, i8* %56, align 1
  %69 = zext i8 %68 to i64
  %70 = shl i64 %69, %62
  %71 = load i64, i64* %10, align 8
  %72 = or i64 %70, %71
  store i64 %72, i64* %10, align 8
  %73 = add nuw nsw i64 %7, 40
  store i64 %73, i64* %6, align 8
  %74 = icmp ult i64 %73, 56
  %75 = icmp ult i8* %67, %4
  %76 = and i1 %74, %75
  br i1 %76, label %77, label %24

77:                                               ; preds = %66
  %78 = getelementptr inbounds i8, i8* %11, i64 6
  store i8* %78, i8** %5, align 8
  %79 = load i8, i8* %67, align 1
  %80 = zext i8 %79 to i64
  %81 = shl i64 %80, %73
  %82 = load i64, i64* %10, align 8
  %83 = or i64 %81, %82
  store i64 %83, i64* %10, align 8
  %84 = add nuw nsw i64 %7, 48
  store i64 %84, i64* %6, align 8
  %85 = icmp ult i64 %84, 56
  %86 = icmp ult i8* %78, %4
  %87 = and i1 %85, %86
  br i1 %87, label %88, label %24

88:                                               ; preds = %77
  %89 = getelementptr inbounds i8, i8* %11, i64 7
  store i8* %89, i8** %5, align 8
  %90 = load i8, i8* %78, align 1
  %91 = zext i8 %90 to i64
  %92 = shl i64 %91, %84
  %93 = load i64, i64* %10, align 8
  %94 = or i64 %92, %93
  store i64 %94, i64* %10, align 8
  %95 = add nuw nsw i64 %7, 56
  store i64 %95, i64* %6, align 8
  br label %24
}

; Function Attrs: inlinehint nounwind ssp uwtable
define internal void @_ZN3jxl12_GLOBAL__N_112WriteVisitorD0Ev(%"class.jxl::(anonymous namespace)::WriteVisitor"*) unnamed_addr #7 align 2 {
  %2 = getelementptr inbounds %"class.jxl::(anonymous namespace)::WriteVisitor", %"class.jxl::(anonymous namespace)::WriteVisitor"* %0, i64 0, i32 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [18 x i8*] }, { [18 x i8*] }* @_ZTVN3jxl12_GLOBAL__N_111VisitorBaseE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %2, align 8
  %3 = getelementptr inbounds %"class.jxl::(anonymous namespace)::WriteVisitor", %"class.jxl::(anonymous namespace)::WriteVisitor"* %0, i64 0, i32 0, i32 1
  %4 = load i64, i64* %3, align 8
  %5 = icmp eq i64 %4, 0
  br i1 %5, label %9, label %6

6:                                                ; preds = %1
  %7 = tail call zeroext i1 (i8*, ...) @_ZN3jxl5DebugEPKcz(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.5, i64 0, i64 0), i8* getelementptr inbounds ([47 x i8], [47 x i8]* @.str.2, i64 0, i64 0), i32 76, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.23, i64 0, i64 0)) #14
  %8 = tail call zeroext i1 @_ZN3jxl5AbortEv() #17
  unreachable

9:                                                ; preds = %1
  %10 = bitcast %"class.jxl::(anonymous namespace)::WriteVisitor"* %0 to i8*
  tail call void @_ZdlPv(i8* %10) #19
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal i32 @_ZN3jxl12_GLOBAL__N_112WriteVisitor3U32ENS_6U32EncEjPj(%"class.jxl::(anonymous namespace)::WriteVisitor"* nocapture, i64, i64, i32, i32* noalias nocapture readonly) unnamed_addr #0 align 2 {
  %6 = load i32, i32* %4, align 4
  %7 = getelementptr inbounds %"class.jxl::(anonymous namespace)::WriteVisitor", %"class.jxl::(anonymous namespace)::WriteVisitor"* %0, i64 0, i32 3
  %8 = load %"struct.jxl::BitWriter"*, %"struct.jxl::BitWriter"** %7, align 8
  %9 = tail call i32 @_ZN3jxl8U32Coder5WriteENS_6U32EncEjPNS_9BitWriterE(i64 %1, i64 %2, i32 %6, %"struct.jxl::BitWriter"* %8)
  %10 = icmp eq i32 %9, 0
  %11 = zext i1 %10 to i8
  %12 = getelementptr inbounds %"class.jxl::(anonymous namespace)::WriteVisitor", %"class.jxl::(anonymous namespace)::WriteVisitor"* %0, i64 0, i32 4
  %13 = load i8, i8* %12, align 8, !range !2
  %14 = and i8 %13, %11
  store i8 %14, i8* %12, align 8
  ret i32 0
}

; Function Attrs: nounwind ssp uwtable
define internal i32 @_ZN3jxl12_GLOBAL__N_112WriteVisitor4BitsEmjPj(%"class.jxl::(anonymous namespace)::WriteVisitor"* nocapture, i64, i32, i32* noalias nocapture readonly) unnamed_addr #0 align 2 {
  %5 = load i32, i32* %3, align 4
  %6 = zext i32 %5 to i64
  %7 = lshr i64 %6, %1
  %8 = icmp eq i64 %7, 0
  br i1 %8, label %9, label %12

9:                                                ; preds = %4
  %10 = getelementptr inbounds %"class.jxl::(anonymous namespace)::WriteVisitor", %"class.jxl::(anonymous namespace)::WriteVisitor"* %0, i64 0, i32 3
  %11 = load %"struct.jxl::BitWriter"*, %"struct.jxl::BitWriter"** %10, align 8
  tail call void @_ZN3jxl9BitWriter5WriteEmm(%"struct.jxl::BitWriter"* %11, i64 %1, i64 %6) #14
  br label %12

12:                                               ; preds = %4, %9
  %13 = phi i8 [ 1, %9 ], [ 0, %4 ]
  %14 = getelementptr inbounds %"class.jxl::(anonymous namespace)::WriteVisitor", %"class.jxl::(anonymous namespace)::WriteVisitor"* %0, i64 0, i32 4
  %15 = load i8, i8* %14, align 8, !range !2
  %16 = and i8 %15, %13
  store i8 %16, i8* %14, align 8
  ret i32 0
}

; Function Attrs: nounwind ssp uwtable
define internal i32 @_ZN3jxl12_GLOBAL__N_112WriteVisitor3U64EmPm(%"class.jxl::(anonymous namespace)::WriteVisitor"* nocapture, i64, i64* noalias nocapture readonly) unnamed_addr #0 align 2 {
  %4 = load i64, i64* %2, align 8
  %5 = getelementptr inbounds %"class.jxl::(anonymous namespace)::WriteVisitor", %"class.jxl::(anonymous namespace)::WriteVisitor"* %0, i64 0, i32 3
  %6 = load %"struct.jxl::BitWriter"*, %"struct.jxl::BitWriter"** %5, align 8
  %7 = tail call i32 @_ZN3jxl8U64Coder5WriteEmPNS_9BitWriterE(i64 %4, %"struct.jxl::BitWriter"* %6)
  %8 = icmp eq i32 %7, 0
  %9 = zext i1 %8 to i8
  %10 = getelementptr inbounds %"class.jxl::(anonymous namespace)::WriteVisitor", %"class.jxl::(anonymous namespace)::WriteVisitor"* %0, i64 0, i32 4
  %11 = load i8, i8* %10, align 8, !range !2
  %12 = and i8 %11, %9
  store i8 %12, i8* %10, align 8
  ret i32 0
}

; Function Attrs: nounwind ssp uwtable
define internal i32 @_ZN3jxl12_GLOBAL__N_112WriteVisitor3F16EfPf(%"class.jxl::(anonymous namespace)::WriteVisitor"* nocapture, float, float* noalias nocapture readonly) unnamed_addr #0 align 2 {
  %4 = load float, float* %2, align 4
  %5 = getelementptr inbounds %"class.jxl::(anonymous namespace)::WriteVisitor", %"class.jxl::(anonymous namespace)::WriteVisitor"* %0, i64 0, i32 3
  %6 = load %"struct.jxl::BitWriter"*, %"struct.jxl::BitWriter"** %5, align 8
  %7 = tail call i32 @_ZN3jxl8F16Coder5WriteEfPNS_9BitWriterE(float %4, %"struct.jxl::BitWriter"* %6)
  %8 = icmp eq i32 %7, 0
  %9 = zext i1 %8 to i8
  %10 = getelementptr inbounds %"class.jxl::(anonymous namespace)::WriteVisitor", %"class.jxl::(anonymous namespace)::WriteVisitor"* %0, i64 0, i32 4
  %11 = load i8, i8* %10, align 8, !range !2
  %12 = and i8 %11, %9
  store i8 %12, i8* %10, align 8
  ret i32 0
}

; Function Attrs: nounwind ssp uwtable
define internal i32 @_ZN3jxl12_GLOBAL__N_112WriteVisitor15BeginExtensionsEPm(%"class.jxl::(anonymous namespace)::WriteVisitor"*, i64* noalias) unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"class.jxl::(anonymous namespace)::WriteVisitor", %"class.jxl::(anonymous namespace)::WriteVisitor"* %0, i64 0, i32 0, i32 0
  %4 = bitcast %"class.jxl::(anonymous namespace)::WriteVisitor"* %0 to i32 (%"class.jxl::Visitor"*, i64, i64*)***
  %5 = load i32 (%"class.jxl::Visitor"*, i64, i64*)**, i32 (%"class.jxl::Visitor"*, i64, i64*)*** %4, align 8, !noalias !34
  %6 = getelementptr inbounds i32 (%"class.jxl::Visitor"*, i64, i64*)*, i32 (%"class.jxl::Visitor"*, i64, i64*)** %5, i64 6
  %7 = load i32 (%"class.jxl::Visitor"*, i64, i64*)*, i32 (%"class.jxl::Visitor"*, i64, i64*)** %6, align 8, !noalias !34
  %8 = tail call i32 %7(%"class.jxl::Visitor"* %3, i64 0, i64* %1) #14
  %9 = icmp eq i32 %8, 0
  br i1 %9, label %10, label %56

10:                                               ; preds = %2
  %11 = getelementptr inbounds %"class.jxl::(anonymous namespace)::WriteVisitor", %"class.jxl::(anonymous namespace)::WriteVisitor"* %0, i64 0, i32 0, i32 2, i32 0
  %12 = load i64, i64* %11, align 8, !noalias !34
  %13 = and i64 %12, 1
  %14 = icmp eq i64 %13, 0
  br i1 %14, label %18, label %15

15:                                               ; preds = %10
  %16 = tail call zeroext i1 (i8*, ...) @_ZN3jxl5DebugEPKcz(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.5, i64 0, i64 0), i8* getelementptr inbounds ([47 x i8], [47 x i8]* @.str.2, i64 0, i64 0), i32 51, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.28, i64 0, i64 0)) #14
  %17 = tail call zeroext i1 @_ZN3jxl5AbortEv() #17
  unreachable

18:                                               ; preds = %10
  %19 = getelementptr inbounds %"class.jxl::(anonymous namespace)::WriteVisitor", %"class.jxl::(anonymous namespace)::WriteVisitor"* %0, i64 0, i32 0, i32 2, i32 1
  %20 = load i64, i64* %19, align 8, !noalias !34
  %21 = and i64 %20, 1
  %22 = icmp eq i64 %21, 0
  br i1 %22, label %26, label %23

23:                                               ; preds = %18
  %24 = tail call zeroext i1 (i8*, ...) @_ZN3jxl5DebugEPKcz(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.5, i64 0, i64 0), i8* getelementptr inbounds ([47 x i8], [47 x i8]* @.str.2, i64 0, i64 0), i32 52, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.29, i64 0, i64 0)) #14
  %25 = tail call zeroext i1 @_ZN3jxl5AbortEv() #17
  unreachable

26:                                               ; preds = %18
  %27 = add i64 %12, 1
  store i64 %27, i64* %11, align 8, !noalias !34
  %28 = load i64, i64* %1, align 8
  %29 = icmp eq i64 %28, 0
  %30 = getelementptr inbounds %"class.jxl::(anonymous namespace)::WriteVisitor", %"class.jxl::(anonymous namespace)::WriteVisitor"* %0, i64 0, i32 2
  %31 = load i64, i64* %30, align 8
  br i1 %29, label %32, label %37

32:                                               ; preds = %26
  %33 = icmp eq i64 %31, 0
  br i1 %33, label %56, label %34

34:                                               ; preds = %32
  %35 = tail call zeroext i1 (i8*, ...) @_ZN3jxl5DebugEPKcz(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.5, i64 0, i64 0), i8* getelementptr inbounds ([47 x i8], [47 x i8]* @.str.2, i64 0, i64 0), i32 630, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.66, i64 0, i64 0)) #14
  %36 = tail call zeroext i1 @_ZN3jxl5AbortEv() #17
  unreachable

37:                                               ; preds = %26
  %38 = getelementptr inbounds %"class.jxl::(anonymous namespace)::WriteVisitor", %"class.jxl::(anonymous namespace)::WriteVisitor"* %0, i64 0, i32 3
  %39 = load %"struct.jxl::BitWriter"*, %"struct.jxl::BitWriter"** %38, align 8
  %40 = tail call i32 @_ZN3jxl8U64Coder5WriteEmPNS_9BitWriterE(i64 %31, %"struct.jxl::BitWriter"* %39)
  %41 = icmp eq i32 %40, 0
  %42 = zext i1 %41 to i8
  %43 = getelementptr inbounds %"class.jxl::(anonymous namespace)::WriteVisitor", %"class.jxl::(anonymous namespace)::WriteVisitor"* %0, i64 0, i32 4
  %44 = load i8, i8* %43, align 8, !range !2
  %45 = and i8 %44, %42
  store i8 %45, i8* %43, align 8
  %46 = load i64, i64* %1, align 8
  %47 = add i64 %46, -1
  %48 = and i64 %47, %46
  %49 = icmp eq i64 %48, 0
  br i1 %49, label %56, label %50

50:                                               ; preds = %37, %50
  %51 = phi i64 [ %54, %50 ], [ %48, %37 ]
  %52 = load %"struct.jxl::BitWriter"*, %"struct.jxl::BitWriter"** %38, align 8
  tail call void @_ZN3jxl9BitWriter5WriteEmm(%"struct.jxl::BitWriter"* %52, i64 2, i64 0) #14
  %53 = add i64 %51, -1
  %54 = and i64 %53, %51
  %55 = icmp eq i64 %54, 0
  br i1 %55, label %56, label %50

56:                                               ; preds = %50, %37, %32, %2
  %57 = phi i32 [ %8, %2 ], [ 0, %32 ], [ 0, %37 ], [ 0, %50 ]
  ret i32 %57
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define internal i8* @_ZN3jxl12_GLOBAL__N_112WriteVisitor11VisitorNameEv(%"class.jxl::(anonymous namespace)::WriteVisitor"* nocapture readnone) unnamed_addr #9 align 2 {
  ret i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.67, i64 0, i64 0)
}

; Function Attrs: nounwind readnone speculatable
declare float @llvm.fabs.f32(float) #15

; Function Attrs: nounwind readnone speculatable
declare i32 @llvm.ctlz.i32(i32, i1 immarg) #15

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nofree norecurse nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nofree nounwind ssp uwtable writeonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { inlinehint nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #8 = { nofree norecurse nounwind ssp uwtable writeonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #9 = { norecurse nounwind readnone ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #10 = { noreturn nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #11 = { cold noreturn nounwind }
attributes #12 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #13 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #14 = { nounwind }
attributes #15 = { nounwind readnone speculatable }
attributes #16 = { noinline nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #17 = { noreturn nounwind }
attributes #18 = { nounwind readnone }
attributes #19 = { builtin nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{i8 0, i8 2}
!3 = !{!4, !6}
!4 = distinct !{!4, !5, !"_ZN3jxl12_GLOBAL__N_116CanEncodeVisitor8GetSizesEPmS2_: argument 0"}
!5 = distinct !{!5, !"_ZN3jxl12_GLOBAL__N_116CanEncodeVisitor8GetSizesEPmS2_"}
!6 = distinct !{!6, !5, !"_ZN3jxl12_GLOBAL__N_116CanEncodeVisitor8GetSizesEPmS2_: argument 1"}
!7 = !{!4}
!8 = !{!6}
!9 = !{i64 0, i64 65}
!10 = !{!11}
!11 = distinct !{!11, !12, !"_ZN3jxl12_GLOBAL__N_112WriteVisitorC2EmPNS_9BitWriterE: argument 0"}
!12 = distinct !{!12, !"_ZN3jxl12_GLOBAL__N_112WriteVisitorC2EmPNS_9BitWriterE"}
!13 = !{i32 0, i32 33}
!14 = !{!"branch_weights", i32 1, i32 2000}
!15 = !{!"branch_weights", i32 4000000, i32 2001, i32 2000}
!16 = !{!17}
!17 = distinct !{!17, !18, !"_ZN3jxl8U32Coder9CanEncodeENS_6U32EncEjPm: argument 0"}
!18 = distinct !{!18, !"_ZN3jxl8U32Coder9CanEncodeENS_6U32EncEjPm"}
!19 = !{!20}
!20 = distinct !{!20, !21, !"_ZN3jxl12_GLOBAL__N_111VisitorBase15BeginExtensionsEPm: argument 0"}
!21 = distinct !{!21, !"_ZN3jxl12_GLOBAL__N_111VisitorBase15BeginExtensionsEPm"}
!22 = !{!23}
!23 = distinct !{!23, !24, !"_ZN3jxl9BitsCoder4ReadEmPNS_9BitReaderE: argument 0"}
!24 = distinct !{!24, !"_ZN3jxl9BitsCoder4ReadEmPNS_9BitReaderE"}
!25 = !{!26}
!26 = distinct !{!26, !27, !"_ZN3jxl8F16Coder4ReadEPNS_9BitReaderEPf: argument 0"}
!27 = distinct !{!27, !"_ZN3jxl8F16Coder4ReadEPNS_9BitReaderEPf"}
!28 = !{!29}
!29 = distinct !{!29, !27, !"_ZN3jxl8F16Coder4ReadEPNS_9BitReaderEPf: argument 1"}
!30 = !{!31}
!31 = distinct !{!31, !32, !"_ZN3jxl12_GLOBAL__N_111VisitorBase15BeginExtensionsEPm: argument 0"}
!32 = distinct !{!32, !"_ZN3jxl12_GLOBAL__N_111VisitorBase15BeginExtensionsEPm"}
!33 = !{!"branch_weights", i32 2000, i32 1}
!34 = !{!35}
!35 = distinct !{!35, !36, !"_ZN3jxl12_GLOBAL__N_111VisitorBase15BeginExtensionsEPm: argument 0"}
!36 = distinct !{!36, !"_ZN3jxl12_GLOBAL__N_111VisitorBase15BeginExtensionsEPm"}
