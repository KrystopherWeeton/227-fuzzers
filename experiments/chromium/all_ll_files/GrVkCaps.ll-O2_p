; ModuleID = '../../third_party/skia/src/gpu/vk/GrVkCaps.cpp'
source_filename = "../../third_party/skia/src/gpu/vk/GrVkCaps.cpp"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%struct.VkPhysicalDeviceSparseProperties = type { i32, i32, i32, i32, i32 }
%"struct.GrVkCaps::FormatInfo" = type <{ i16, i16, [4 x i8], %class.SkTDArray, %"class.std::__1::unique_ptr", i32, [4 x i8] }>
%class.SkTDArray = type { i32*, i32, i32 }
%"class.std::__1::unique_ptr" = type { %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %"struct.GrVkCaps::ColorTypeInfo"* }
%"struct.GrVkCaps::ColorTypeInfo" = type { i32, i32, i32, %class.GrSwizzle, %class.GrSwizzle }
%class.GrSwizzle = type { i16 }
%struct.GrUserStencilSettings = type { [2 x i16], %struct.GrTStencilFaceSettings, [2 x i16], %struct.GrTStencilFaceSettings }
%struct.GrTStencilFaceSettings = type { i16, i16, i16, i8, i8, i16 }
%class.GrVkCaps = type <{ %class.GrCaps.base, i8, [22 x %"struct.GrVkCaps::FormatInfo"], [31 x i32], i32, %class.SkSTArray, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i32, i32, i8, i8, [2 x i8], i32, [4 x i8] }>
%class.GrCaps.base = type <{ %class.SkRefCnt.base, [4 x i8], %class.sk_sp, i48, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, [4 x i8], i64, %class.GrDriverBugWorkarounds, i8 }>
%class.SkRefCnt.base = type { %class.SkRefCntBase.base }
%class.SkRefCntBase.base = type <{ i32 (...)**, %"struct.std::__1::atomic" }>
%"struct.std::__1::atomic" = type { %"struct.std::__1::__atomic_base" }
%"struct.std::__1::__atomic_base" = type { %"struct.std::__1::__atomic_base.0" }
%"struct.std::__1::__atomic_base.0" = type { %"struct.std::__1::__cxx_atomic_impl" }
%"struct.std::__1::__cxx_atomic_impl" = type { %"struct.std::__1::__cxx_atomic_base_impl" }
%"struct.std::__1::__cxx_atomic_base_impl" = type { i32 }
%class.sk_sp = type { %class.GrShaderCaps* }
%class.GrShaderCaps = type <{ %class.SkRefCnt.base, i32, i56, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i32, i32, i32, [4 x i8] }>
%class.GrDriverBugWorkarounds = type { i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8 }
%class.SkSTArray = type { %class.SkAlignedSTStorage, %class.SkTArray }
%class.SkAlignedSTStorage = type { [48 x i8] }
%class.SkTArray = type { %struct.GrVkYcbcrConversionInfo*, i64 }
%struct.GrVkYcbcrConversionInfo = type <{ i32, [4 x i8], i64, i32, i32, i32, i32, i32, i32, i32, [4 x i8] }>
%struct.GrContextOptions = type { i8, i32, i32, i32, %class.SkExecutor*, i8, i8, i8, i8, i8, i64, float, float, i32, i8, i8, i32, i32, i8, i8, i32, %"class.GrContextOptions::PersistentCache"*, i32, %"class.GrContextOptions::ShaderErrorHandler"*, i32, i32, i8, i8, %class.GrDriverBugWorkarounds }
%class.SkExecutor = type opaque
%"class.GrContextOptions::PersistentCache" = type { i32 (...)** }
%"class.GrContextOptions::ShaderErrorHandler" = type { i32 (...)** }
%struct.GrVkInterface = type { %class.SkRefCnt.base, %"struct.GrVkInterface::Functions" }
%"struct.GrVkInterface::Functions" = type { %"class.GrVkInterface::VkPtr", %"class.GrVkInterface::VkPtr.2", %"class.GrVkInterface::VkPtr.3", %"class.GrVkInterface::VkPtr.4", %"class.GrVkInterface::VkPtr.5", %"class.GrVkInterface::VkPtr.6", %"class.GrVkInterface::VkPtr.7", %"class.GrVkInterface::VkPtr.8", %"class.GrVkInterface::VkPtr.9", %"class.GrVkInterface::VkPtr.10", %"class.GrVkInterface::VkPtr.11", %"class.GrVkInterface::VkPtr.12", %"class.GrVkInterface::VkPtr.13", %"class.GrVkInterface::VkPtr.14", %"class.GrVkInterface::VkPtr.15", %"class.GrVkInterface::VkPtr.16", %"class.GrVkInterface::VkPtr.17", %"class.GrVkInterface::VkPtr.18", %"class.GrVkInterface::VkPtr.19", %"class.GrVkInterface::VkPtr.20", %"class.GrVkInterface::VkPtr.21", %"class.GrVkInterface::VkPtr.22", %"class.GrVkInterface::VkPtr.23", %"class.GrVkInterface::VkPtr.24", %"class.GrVkInterface::VkPtr.24", %"class.GrVkInterface::VkPtr.25", %"class.GrVkInterface::VkPtr.26", %"class.GrVkInterface::VkPtr.27", %"class.GrVkInterface::VkPtr.28", %"class.GrVkInterface::VkPtr.29", %"class.GrVkInterface::VkPtr.30", %"class.GrVkInterface::VkPtr.31", %"class.GrVkInterface::VkPtr.32", %"class.GrVkInterface::VkPtr.33", %"class.GrVkInterface::VkPtr.34", %"class.GrVkInterface::VkPtr.35", %"class.GrVkInterface::VkPtr.36", %"class.GrVkInterface::VkPtr.37", %"class.GrVkInterface::VkPtr.38", %"class.GrVkInterface::VkPtr.39", %"class.GrVkInterface::VkPtr.40", %"class.GrVkInterface::VkPtr.41", %"class.GrVkInterface::VkPtr.42", %"class.GrVkInterface::VkPtr.42", %"class.GrVkInterface::VkPtr.42", %"class.GrVkInterface::VkPtr.43", %"class.GrVkInterface::VkPtr.44", %"class.GrVkInterface::VkPtr.45", %"class.GrVkInterface::VkPtr.46", %"class.GrVkInterface::VkPtr.47", %"class.GrVkInterface::VkPtr.48", %"class.GrVkInterface::VkPtr.49", %"class.GrVkInterface::VkPtr.50", %"class.GrVkInterface::VkPtr.51", %"class.GrVkInterface::VkPtr.52", %"class.GrVkInterface::VkPtr.53", %"class.GrVkInterface::VkPtr.54", %"class.GrVkInterface::VkPtr.55", %"class.GrVkInterface::VkPtr.56", %"class.GrVkInterface::VkPtr.57", %"class.GrVkInterface::VkPtr.58", %"class.GrVkInterface::VkPtr.59", %"class.GrVkInterface::VkPtr.60", %"class.GrVkInterface::VkPtr.61", %"class.GrVkInterface::VkPtr.62", %"class.GrVkInterface::VkPtr.63", %"class.GrVkInterface::VkPtr.64", %"class.GrVkInterface::VkPtr.65", %"class.GrVkInterface::VkPtr.66", %"class.GrVkInterface::VkPtr.67", %"class.GrVkInterface::VkPtr.68", %"class.GrVkInterface::VkPtr.69", %"class.GrVkInterface::VkPtr.70", %"class.GrVkInterface::VkPtr.71", %"class.GrVkInterface::VkPtr.72", %"class.GrVkInterface::VkPtr.73", %"class.GrVkInterface::VkPtr.74", %"class.GrVkInterface::VkPtr.75", %"class.GrVkInterface::VkPtr.76", %"class.GrVkInterface::VkPtr.77", %"class.GrVkInterface::VkPtr.78", %"class.GrVkInterface::VkPtr.79", %"class.GrVkInterface::VkPtr.80", %"class.GrVkInterface::VkPtr.81", %"class.GrVkInterface::VkPtr.82", %"class.GrVkInterface::VkPtr.83", %"class.GrVkInterface::VkPtr.84", %"class.GrVkInterface::VkPtr.85", %"class.GrVkInterface::VkPtr.86", %"class.GrVkInterface::VkPtr.87", %"class.GrVkInterface::VkPtr.88", %"class.GrVkInterface::VkPtr.89", %"class.GrVkInterface::VkPtr.90", %"class.GrVkInterface::VkPtr.91", %"class.GrVkInterface::VkPtr.92", %"class.GrVkInterface::VkPtr.93", %"class.GrVkInterface::VkPtr.94", %"class.GrVkInterface::VkPtr.95", %"class.GrVkInterface::VkPtr.96", %"class.GrVkInterface::VkPtr.96", %"class.GrVkInterface::VkPtr.96", %"class.GrVkInterface::VkPtr.97", %"class.GrVkInterface::VkPtr.98", %"class.GrVkInterface::VkPtr.99", %"class.GrVkInterface::VkPtr.100", %"class.GrVkInterface::VkPtr.101", %"class.GrVkInterface::VkPtr.102", %"class.GrVkInterface::VkPtr.102", %"class.GrVkInterface::VkPtr.103", %"class.GrVkInterface::VkPtr.104", %"class.GrVkInterface::VkPtr.105", %"class.GrVkInterface::VkPtr.106", %"class.GrVkInterface::VkPtr.107", %"class.GrVkInterface::VkPtr.108", %"class.GrVkInterface::VkPtr.109", %"class.GrVkInterface::VkPtr.110", %"class.GrVkInterface::VkPtr.111", %"class.GrVkInterface::VkPtr.112", %"class.GrVkInterface::VkPtr.113", %"class.GrVkInterface::VkPtr.114", %"class.GrVkInterface::VkPtr.115", %"class.GrVkInterface::VkPtr.116", %"class.GrVkInterface::VkPtr.116", %"class.GrVkInterface::VkPtr.117", %"class.GrVkInterface::VkPtr.118", %"class.GrVkInterface::VkPtr.119", %"class.GrVkInterface::VkPtr.120", %"class.GrVkInterface::VkPtr.119", %"class.GrVkInterface::VkPtr.121", %"class.GrVkInterface::VkPtr.122", %"class.GrVkInterface::VkPtr.123", %"class.GrVkInterface::VkPtr.124", %"class.GrVkInterface::VkPtr.125", %"class.GrVkInterface::VkPtr.126", %"class.GrVkInterface::VkPtr.127", %"class.GrVkInterface::VkPtr.128", %"class.GrVkInterface::VkPtr.129", %"class.GrVkInterface::VkPtr.130", %"class.GrVkInterface::VkPtr.131", %"class.GrVkInterface::VkPtr.132", %"class.GrVkInterface::VkPtr.133", %"class.GrVkInterface::VkPtr.134", %"class.GrVkInterface::VkPtr.135", %"class.GrVkInterface::VkPtr.136", %"class.GrVkInterface::VkPtr.137", %"class.GrVkInterface::VkPtr.138", %"class.GrVkInterface::VkPtr.139", %"class.GrVkInterface::VkPtr.140", %"class.GrVkInterface::VkPtr.141", %"class.GrVkInterface::VkPtr.142", %"class.GrVkInterface::VkPtr.143", %"class.GrVkInterface::VkPtr.144" }
%"class.GrVkInterface::VkPtr" = type { i32 (%struct.VkInstanceCreateInfo*, %struct.VkAllocationCallbacks*, %struct.VkInstance_T**)* }
%struct.VkInstanceCreateInfo = type { i32, i8*, i32, %struct.VkApplicationInfo*, i32, i8**, i32, i8** }
%struct.VkApplicationInfo = type { i32, i8*, i8*, i32, i8*, i32, i32 }
%struct.VkAllocationCallbacks = type { i8*, i8* (i8*, i64, i64, i32)*, i8* (i8*, i8*, i64, i64, i32)*, void (i8*, i8*)*, void (i8*, i64, i32, i32)*, void (i8*, i64, i32, i32)* }
%struct.VkInstance_T = type opaque
%"class.GrVkInterface::VkPtr.2" = type { void (%struct.VkInstance_T*, %struct.VkAllocationCallbacks*)* }
%"class.GrVkInterface::VkPtr.3" = type { i32 (%struct.VkInstance_T*, i32*, %struct.VkPhysicalDevice_T**)* }
%"class.GrVkInterface::VkPtr.4" = type { void (%struct.VkPhysicalDevice_T*, %struct.VkPhysicalDeviceFeatures*)* }
%struct.VkPhysicalDeviceFeatures = type { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }
%"class.GrVkInterface::VkPtr.5" = type { void (%struct.VkPhysicalDevice_T*, i32, %struct.VkFormatProperties*)* }
%struct.VkFormatProperties = type { i32, i32, i32 }
%"class.GrVkInterface::VkPtr.6" = type { i32 (%struct.VkPhysicalDevice_T*, i32, i32, i32, i32, i32, %struct.VkImageFormatProperties*)* }
%struct.VkImageFormatProperties = type { %struct.VkExtent3D, i32, i32, i32, i64 }
%struct.VkExtent3D = type { i32, i32, i32 }
%"class.GrVkInterface::VkPtr.7" = type { void (%struct.VkPhysicalDevice_T*, %struct.VkPhysicalDeviceProperties*)* }
%struct.VkPhysicalDeviceProperties = type { i32, i32, i32, i32, i32, [256 x i8], [16 x i8], %struct.VkPhysicalDeviceLimits, %struct.VkPhysicalDeviceSparseProperties }
%struct.VkPhysicalDeviceLimits = type { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i64, i64, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, [3 x i32], i32, [3 x i32], i32, i32, i32, i32, i32, float, float, i32, [2 x i32], [2 x float], i32, i64, i64, i64, i64, i32, i32, i32, i32, float, float, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, float, i32, i32, i32, i32, [2 x float], [2 x float], float, float, i32, i32, i64, i64, i64 }
%"class.GrVkInterface::VkPtr.8" = type { void (%struct.VkPhysicalDevice_T*, i32*, %struct.VkQueueFamilyProperties*)* }
%struct.VkQueueFamilyProperties = type { i32, i32, i32, %struct.VkExtent3D }
%"class.GrVkInterface::VkPtr.9" = type { void (%struct.VkPhysicalDevice_T*, %struct.VkPhysicalDeviceMemoryProperties*)* }
%struct.VkPhysicalDeviceMemoryProperties = type { i32, [32 x %struct.VkMemoryType], i32, [16 x %struct.VkMemoryHeap] }
%struct.VkMemoryType = type { i32, i32 }
%struct.VkMemoryHeap = type { i64, i32 }
%"class.GrVkInterface::VkPtr.10" = type { i32 (%struct.VkPhysicalDevice_T*, %struct.VkDeviceCreateInfo*, %struct.VkAllocationCallbacks*, %struct.VkDevice_T**)* }
%struct.VkDeviceCreateInfo = type { i32, i8*, i32, i32, %struct.VkDeviceQueueCreateInfo*, i32, i8**, i32, i8**, %struct.VkPhysicalDeviceFeatures* }
%struct.VkDeviceQueueCreateInfo = type { i32, i8*, i32, i32, i32, float* }
%struct.VkDevice_T = type opaque
%"class.GrVkInterface::VkPtr.11" = type { void (%struct.VkDevice_T*, %struct.VkAllocationCallbacks*)* }
%"class.GrVkInterface::VkPtr.12" = type { i32 (i8*, i32*, %struct.VkExtensionProperties*)* }
%struct.VkExtensionProperties = type { [256 x i8], i32 }
%"class.GrVkInterface::VkPtr.13" = type { i32 (%struct.VkPhysicalDevice_T*, i8*, i32*, %struct.VkExtensionProperties*)* }
%"class.GrVkInterface::VkPtr.14" = type { i32 (i32*, %struct.VkLayerProperties*)* }
%struct.VkLayerProperties = type { [256 x i8], i32, i32, [256 x i8] }
%"class.GrVkInterface::VkPtr.15" = type { i32 (%struct.VkPhysicalDevice_T*, i32*, %struct.VkLayerProperties*)* }
%"class.GrVkInterface::VkPtr.16" = type { void (%struct.VkDevice_T*, i32, i32, %struct.VkQueue_T**)* }
%struct.VkQueue_T = type opaque
%"class.GrVkInterface::VkPtr.17" = type { i32 (%struct.VkQueue_T*, i32, %struct.VkSubmitInfo*, %struct.VkFence_T*)* }
%struct.VkSubmitInfo = type { i32, i8*, i32, %struct.VkSemaphore_T**, i32*, i32, %struct.VkCommandBuffer_T**, i32, %struct.VkSemaphore_T** }
%struct.VkCommandBuffer_T = type opaque
%struct.VkSemaphore_T = type opaque
%struct.VkFence_T = type opaque
%"class.GrVkInterface::VkPtr.18" = type { i32 (%struct.VkQueue_T*)* }
%"class.GrVkInterface::VkPtr.19" = type { i32 (%struct.VkDevice_T*)* }
%"class.GrVkInterface::VkPtr.20" = type { i32 (%struct.VkDevice_T*, %struct.VkMemoryAllocateInfo*, %struct.VkAllocationCallbacks*, %struct.VkDeviceMemory_T**)* }
%struct.VkMemoryAllocateInfo = type { i32, i8*, i64, i32 }
%struct.VkDeviceMemory_T = type opaque
%"class.GrVkInterface::VkPtr.21" = type { void (%struct.VkDevice_T*, %struct.VkDeviceMemory_T*, %struct.VkAllocationCallbacks*)* }
%"class.GrVkInterface::VkPtr.22" = type { i32 (%struct.VkDevice_T*, %struct.VkDeviceMemory_T*, i64, i64, i32, i8**)* }
%"class.GrVkInterface::VkPtr.23" = type { void (%struct.VkDevice_T*, %struct.VkDeviceMemory_T*)* }
%"class.GrVkInterface::VkPtr.24" = type { i32 (%struct.VkDevice_T*, i32, %struct.VkMappedMemoryRange*)* }
%struct.VkMappedMemoryRange = type { i32, i8*, %struct.VkDeviceMemory_T*, i64, i64 }
%"class.GrVkInterface::VkPtr.25" = type { void (%struct.VkDevice_T*, %struct.VkDeviceMemory_T*, i64*)* }
%"class.GrVkInterface::VkPtr.26" = type { i32 (%struct.VkDevice_T*, %struct.VkBuffer_T*, %struct.VkDeviceMemory_T*, i64)* }
%struct.VkBuffer_T = type opaque
%"class.GrVkInterface::VkPtr.27" = type { i32 (%struct.VkDevice_T*, %struct.VkImage_T*, %struct.VkDeviceMemory_T*, i64)* }
%struct.VkImage_T = type opaque
%"class.GrVkInterface::VkPtr.28" = type { void (%struct.VkDevice_T*, %struct.VkBuffer_T*, %struct.VkMemoryRequirements*)* }
%struct.VkMemoryRequirements = type { i64, i64, i32 }
%"class.GrVkInterface::VkPtr.29" = type { void (%struct.VkDevice_T*, %struct.VkImage_T*, %struct.VkMemoryRequirements*)* }
%"class.GrVkInterface::VkPtr.30" = type { void (%struct.VkDevice_T*, %struct.VkImage_T*, i32*, %struct.VkSparseImageMemoryRequirements*)* }
%struct.VkSparseImageMemoryRequirements = type { %struct.VkSparseImageFormatProperties, i32, i64, i64, i64 }
%struct.VkSparseImageFormatProperties = type { i32, %struct.VkExtent3D, i32 }
%"class.GrVkInterface::VkPtr.31" = type { void (%struct.VkPhysicalDevice_T*, i32, i32, i32, i32, i32, i32*, %struct.VkSparseImageFormatProperties*)* }
%"class.GrVkInterface::VkPtr.32" = type { i32 (%struct.VkQueue_T*, i32, %struct.VkBindSparseInfo*, %struct.VkFence_T*)* }
%struct.VkBindSparseInfo = type { i32, i8*, i32, %struct.VkSemaphore_T**, i32, %struct.VkSparseBufferMemoryBindInfo*, i32, %struct.VkSparseImageOpaqueMemoryBindInfo*, i32, %struct.VkSparseImageMemoryBindInfo*, i32, %struct.VkSemaphore_T** }
%struct.VkSparseBufferMemoryBindInfo = type { %struct.VkBuffer_T*, i32, %struct.VkSparseMemoryBind* }
%struct.VkSparseMemoryBind = type { i64, i64, %struct.VkDeviceMemory_T*, i64, i32 }
%struct.VkSparseImageOpaqueMemoryBindInfo = type { %struct.VkImage_T*, i32, %struct.VkSparseMemoryBind* }
%struct.VkSparseImageMemoryBindInfo = type { %struct.VkImage_T*, i32, %struct.VkSparseImageMemoryBind* }
%struct.VkSparseImageMemoryBind = type { %struct.VkImageSubresource, %struct.VkOffset3D, %struct.VkExtent3D, %struct.VkDeviceMemory_T*, i64, i32 }
%struct.VkImageSubresource = type { i32, i32, i32 }
%struct.VkOffset3D = type { i32, i32, i32 }
%"class.GrVkInterface::VkPtr.33" = type { i32 (%struct.VkDevice_T*, %struct.VkFenceCreateInfo*, %struct.VkAllocationCallbacks*, %struct.VkFence_T**)* }
%struct.VkFenceCreateInfo = type { i32, i8*, i32 }
%"class.GrVkInterface::VkPtr.34" = type { void (%struct.VkDevice_T*, %struct.VkFence_T*, %struct.VkAllocationCallbacks*)* }
%"class.GrVkInterface::VkPtr.35" = type { i32 (%struct.VkDevice_T*, i32, %struct.VkFence_T**)* }
%"class.GrVkInterface::VkPtr.36" = type { i32 (%struct.VkDevice_T*, %struct.VkFence_T*)* }
%"class.GrVkInterface::VkPtr.37" = type { i32 (%struct.VkDevice_T*, i32, %struct.VkFence_T**, i32, i64)* }
%"class.GrVkInterface::VkPtr.38" = type { i32 (%struct.VkDevice_T*, %struct.VkSemaphoreCreateInfo*, %struct.VkAllocationCallbacks*, %struct.VkSemaphore_T**)* }
%struct.VkSemaphoreCreateInfo = type { i32, i8*, i32 }
%"class.GrVkInterface::VkPtr.39" = type { void (%struct.VkDevice_T*, %struct.VkSemaphore_T*, %struct.VkAllocationCallbacks*)* }
%"class.GrVkInterface::VkPtr.40" = type { i32 (%struct.VkDevice_T*, %struct.VkEventCreateInfo*, %struct.VkAllocationCallbacks*, %struct.VkEvent_T**)* }
%struct.VkEventCreateInfo = type { i32, i8*, i32 }
%struct.VkEvent_T = type opaque
%"class.GrVkInterface::VkPtr.41" = type { void (%struct.VkDevice_T*, %struct.VkEvent_T*, %struct.VkAllocationCallbacks*)* }
%"class.GrVkInterface::VkPtr.42" = type { i32 (%struct.VkDevice_T*, %struct.VkEvent_T*)* }
%"class.GrVkInterface::VkPtr.43" = type { i32 (%struct.VkDevice_T*, %struct.VkQueryPoolCreateInfo*, %struct.VkAllocationCallbacks*, %struct.VkQueryPool_T**)* }
%struct.VkQueryPoolCreateInfo = type { i32, i8*, i32, i32, i32, i32 }
%struct.VkQueryPool_T = type opaque
%"class.GrVkInterface::VkPtr.44" = type { void (%struct.VkDevice_T*, %struct.VkQueryPool_T*, %struct.VkAllocationCallbacks*)* }
%"class.GrVkInterface::VkPtr.45" = type { i32 (%struct.VkDevice_T*, %struct.VkQueryPool_T*, i32, i32, i64, i8*, i64, i32)* }
%"class.GrVkInterface::VkPtr.46" = type { i32 (%struct.VkDevice_T*, %struct.VkBufferCreateInfo*, %struct.VkAllocationCallbacks*, %struct.VkBuffer_T**)* }
%struct.VkBufferCreateInfo = type { i32, i8*, i32, i64, i32, i32, i32, i32* }
%"class.GrVkInterface::VkPtr.47" = type { void (%struct.VkDevice_T*, %struct.VkBuffer_T*, %struct.VkAllocationCallbacks*)* }
%"class.GrVkInterface::VkPtr.48" = type { i32 (%struct.VkDevice_T*, %struct.VkBufferViewCreateInfo*, %struct.VkAllocationCallbacks*, %struct.VkBufferView_T**)* }
%struct.VkBufferViewCreateInfo = type { i32, i8*, i32, %struct.VkBuffer_T*, i32, i64, i64 }
%struct.VkBufferView_T = type opaque
%"class.GrVkInterface::VkPtr.49" = type { void (%struct.VkDevice_T*, %struct.VkBufferView_T*, %struct.VkAllocationCallbacks*)* }
%"class.GrVkInterface::VkPtr.50" = type { i32 (%struct.VkDevice_T*, %struct.VkImageCreateInfo*, %struct.VkAllocationCallbacks*, %struct.VkImage_T**)* }
%struct.VkImageCreateInfo = type { i32, i8*, i32, i32, i32, %struct.VkExtent3D, i32, i32, i32, i32, i32, i32, i32, i32*, i32 }
%"class.GrVkInterface::VkPtr.51" = type { void (%struct.VkDevice_T*, %struct.VkImage_T*, %struct.VkAllocationCallbacks*)* }
%"class.GrVkInterface::VkPtr.52" = type { void (%struct.VkDevice_T*, %struct.VkImage_T*, %struct.VkImageSubresource*, %struct.VkSubresourceLayout*)* }
%struct.VkSubresourceLayout = type { i64, i64, i64, i64, i64 }
%"class.GrVkInterface::VkPtr.53" = type { i32 (%struct.VkDevice_T*, %struct.VkImageViewCreateInfo*, %struct.VkAllocationCallbacks*, %struct.VkImageView_T**)* }
%struct.VkImageViewCreateInfo = type { i32, i8*, i32, %struct.VkImage_T*, i32, i32, %struct.VkComponentMapping, %struct.VkImageSubresourceRange }
%struct.VkComponentMapping = type { i32, i32, i32, i32 }
%struct.VkImageSubresourceRange = type { i32, i32, i32, i32, i32 }
%struct.VkImageView_T = type opaque
%"class.GrVkInterface::VkPtr.54" = type { void (%struct.VkDevice_T*, %struct.VkImageView_T*, %struct.VkAllocationCallbacks*)* }
%"class.GrVkInterface::VkPtr.55" = type { i32 (%struct.VkDevice_T*, %struct.VkShaderModuleCreateInfo*, %struct.VkAllocationCallbacks*, %struct.VkShaderModule_T**)* }
%struct.VkShaderModuleCreateInfo = type { i32, i8*, i32, i64, i32* }
%struct.VkShaderModule_T = type opaque
%"class.GrVkInterface::VkPtr.56" = type { void (%struct.VkDevice_T*, %struct.VkShaderModule_T*, %struct.VkAllocationCallbacks*)* }
%"class.GrVkInterface::VkPtr.57" = type { i32 (%struct.VkDevice_T*, %struct.VkPipelineCacheCreateInfo*, %struct.VkAllocationCallbacks*, %struct.VkPipelineCache_T**)* }
%struct.VkPipelineCacheCreateInfo = type { i32, i8*, i32, i64, i8* }
%struct.VkPipelineCache_T = type opaque
%"class.GrVkInterface::VkPtr.58" = type { void (%struct.VkDevice_T*, %struct.VkPipelineCache_T*, %struct.VkAllocationCallbacks*)* }
%"class.GrVkInterface::VkPtr.59" = type { i32 (%struct.VkDevice_T*, %struct.VkPipelineCache_T*, i64*, i8*)* }
%"class.GrVkInterface::VkPtr.60" = type { i32 (%struct.VkDevice_T*, %struct.VkPipelineCache_T*, i32, %struct.VkPipelineCache_T**)* }
%"class.GrVkInterface::VkPtr.61" = type { i32 (%struct.VkDevice_T*, %struct.VkPipelineCache_T*, i32, %struct.VkGraphicsPipelineCreateInfo*, %struct.VkAllocationCallbacks*, %struct.VkPipeline_T**)* }
%struct.VkGraphicsPipelineCreateInfo = type { i32, i8*, i32, i32, %struct.VkPipelineShaderStageCreateInfo*, %struct.VkPipelineVertexInputStateCreateInfo*, %struct.VkPipelineInputAssemblyStateCreateInfo*, %struct.VkPipelineTessellationStateCreateInfo*, %struct.VkPipelineViewportStateCreateInfo*, %struct.VkPipelineRasterizationStateCreateInfo*, %struct.VkPipelineMultisampleStateCreateInfo*, %struct.VkPipelineDepthStencilStateCreateInfo*, %struct.VkPipelineColorBlendStateCreateInfo*, %struct.VkPipelineDynamicStateCreateInfo*, %struct.VkPipelineLayout_T*, %struct.VkRenderPass_T*, i32, %struct.VkPipeline_T*, i32 }
%struct.VkPipelineShaderStageCreateInfo = type { i32, i8*, i32, i32, %struct.VkShaderModule_T*, i8*, %struct.VkSpecializationInfo* }
%struct.VkSpecializationInfo = type { i32, %struct.VkSpecializationMapEntry*, i64, i8* }
%struct.VkSpecializationMapEntry = type { i32, i32, i64 }
%struct.VkPipelineVertexInputStateCreateInfo = type { i32, i8*, i32, i32, %struct.VkVertexInputBindingDescription*, i32, %struct.VkVertexInputAttributeDescription* }
%struct.VkVertexInputBindingDescription = type { i32, i32, i32 }
%struct.VkVertexInputAttributeDescription = type { i32, i32, i32, i32 }
%struct.VkPipelineInputAssemblyStateCreateInfo = type { i32, i8*, i32, i32, i32 }
%struct.VkPipelineTessellationStateCreateInfo = type { i32, i8*, i32, i32 }
%struct.VkPipelineViewportStateCreateInfo = type { i32, i8*, i32, i32, %struct.VkViewport*, i32, %struct.VkRect2D* }
%struct.VkViewport = type { float, float, float, float, float, float }
%struct.VkRect2D = type { %struct.VkOffset2D, %struct.VkExtent2D }
%struct.VkOffset2D = type { i32, i32 }
%struct.VkExtent2D = type { i32, i32 }
%struct.VkPipelineRasterizationStateCreateInfo = type { i32, i8*, i32, i32, i32, i32, i32, i32, i32, float, float, float, float }
%struct.VkPipelineMultisampleStateCreateInfo = type { i32, i8*, i32, i32, i32, float, i32*, i32, i32 }
%struct.VkPipelineDepthStencilStateCreateInfo = type { i32, i8*, i32, i32, i32, i32, i32, i32, %struct.VkStencilOpState, %struct.VkStencilOpState, float, float }
%struct.VkStencilOpState = type { i32, i32, i32, i32, i32, i32, i32 }
%struct.VkPipelineColorBlendStateCreateInfo = type { i32, i8*, i32, i32, i32, i32, %struct.VkPipelineColorBlendAttachmentState*, [4 x float] }
%struct.VkPipelineColorBlendAttachmentState = type { i32, i32, i32, i32, i32, i32, i32, i32 }
%struct.VkPipelineDynamicStateCreateInfo = type { i32, i8*, i32, i32, i32* }
%struct.VkPipelineLayout_T = type opaque
%struct.VkRenderPass_T = type opaque
%struct.VkPipeline_T = type opaque
%"class.GrVkInterface::VkPtr.62" = type { i32 (%struct.VkDevice_T*, %struct.VkPipelineCache_T*, i32, %struct.VkComputePipelineCreateInfo*, %struct.VkAllocationCallbacks*, %struct.VkPipeline_T**)* }
%struct.VkComputePipelineCreateInfo = type { i32, i8*, i32, %struct.VkPipelineShaderStageCreateInfo, %struct.VkPipelineLayout_T*, %struct.VkPipeline_T*, i32 }
%"class.GrVkInterface::VkPtr.63" = type { void (%struct.VkDevice_T*, %struct.VkPipeline_T*, %struct.VkAllocationCallbacks*)* }
%"class.GrVkInterface::VkPtr.64" = type { i32 (%struct.VkDevice_T*, %struct.VkPipelineLayoutCreateInfo*, %struct.VkAllocationCallbacks*, %struct.VkPipelineLayout_T**)* }
%struct.VkPipelineLayoutCreateInfo = type { i32, i8*, i32, i32, %struct.VkDescriptorSetLayout_T**, i32, %struct.VkPushConstantRange* }
%struct.VkDescriptorSetLayout_T = type opaque
%struct.VkPushConstantRange = type { i32, i32, i32 }
%"class.GrVkInterface::VkPtr.65" = type { void (%struct.VkDevice_T*, %struct.VkPipelineLayout_T*, %struct.VkAllocationCallbacks*)* }
%"class.GrVkInterface::VkPtr.66" = type { i32 (%struct.VkDevice_T*, %struct.VkSamplerCreateInfo*, %struct.VkAllocationCallbacks*, %struct.VkSampler_T**)* }
%struct.VkSamplerCreateInfo = type { i32, i8*, i32, i32, i32, i32, i32, i32, i32, float, i32, float, i32, i32, float, float, i32, i32 }
%struct.VkSampler_T = type opaque
%"class.GrVkInterface::VkPtr.67" = type { void (%struct.VkDevice_T*, %struct.VkSampler_T*, %struct.VkAllocationCallbacks*)* }
%"class.GrVkInterface::VkPtr.68" = type { i32 (%struct.VkDevice_T*, %struct.VkDescriptorSetLayoutCreateInfo*, %struct.VkAllocationCallbacks*, %struct.VkDescriptorSetLayout_T**)* }
%struct.VkDescriptorSetLayoutCreateInfo = type { i32, i8*, i32, i32, %struct.VkDescriptorSetLayoutBinding* }
%struct.VkDescriptorSetLayoutBinding = type { i32, i32, i32, i32, %struct.VkSampler_T** }
%"class.GrVkInterface::VkPtr.69" = type { void (%struct.VkDevice_T*, %struct.VkDescriptorSetLayout_T*, %struct.VkAllocationCallbacks*)* }
%"class.GrVkInterface::VkPtr.70" = type { i32 (%struct.VkDevice_T*, %struct.VkDescriptorPoolCreateInfo*, %struct.VkAllocationCallbacks*, %struct.VkDescriptorPool_T**)* }
%struct.VkDescriptorPoolCreateInfo = type { i32, i8*, i32, i32, i32, %struct.VkDescriptorPoolSize* }
%struct.VkDescriptorPoolSize = type { i32, i32 }
%struct.VkDescriptorPool_T = type opaque
%"class.GrVkInterface::VkPtr.71" = type { void (%struct.VkDevice_T*, %struct.VkDescriptorPool_T*, %struct.VkAllocationCallbacks*)* }
%"class.GrVkInterface::VkPtr.72" = type { i32 (%struct.VkDevice_T*, %struct.VkDescriptorPool_T*, i32)* }
%"class.GrVkInterface::VkPtr.73" = type { i32 (%struct.VkDevice_T*, %struct.VkDescriptorSetAllocateInfo*, %struct.VkDescriptorSet_T**)* }
%struct.VkDescriptorSetAllocateInfo = type { i32, i8*, %struct.VkDescriptorPool_T*, i32, %struct.VkDescriptorSetLayout_T** }
%struct.VkDescriptorSet_T = type opaque
%"class.GrVkInterface::VkPtr.74" = type { i32 (%struct.VkDevice_T*, %struct.VkDescriptorPool_T*, i32, %struct.VkDescriptorSet_T**)* }
%"class.GrVkInterface::VkPtr.75" = type { void (%struct.VkDevice_T*, i32, %struct.VkWriteDescriptorSet*, i32, %struct.VkCopyDescriptorSet*)* }
%struct.VkWriteDescriptorSet = type { i32, i8*, %struct.VkDescriptorSet_T*, i32, i32, i32, i32, %struct.VkDescriptorImageInfo*, %struct.VkDescriptorBufferInfo*, %struct.VkBufferView_T** }
%struct.VkDescriptorImageInfo = type { %struct.VkSampler_T*, %struct.VkImageView_T*, i32 }
%struct.VkDescriptorBufferInfo = type { %struct.VkBuffer_T*, i64, i64 }
%struct.VkCopyDescriptorSet = type { i32, i8*, %struct.VkDescriptorSet_T*, i32, i32, %struct.VkDescriptorSet_T*, i32, i32, i32 }
%"class.GrVkInterface::VkPtr.76" = type { i32 (%struct.VkDevice_T*, %struct.VkFramebufferCreateInfo*, %struct.VkAllocationCallbacks*, %struct.VkFramebuffer_T**)* }
%struct.VkFramebufferCreateInfo = type { i32, i8*, i32, %struct.VkRenderPass_T*, i32, %struct.VkImageView_T**, i32, i32, i32 }
%struct.VkFramebuffer_T = type opaque
%"class.GrVkInterface::VkPtr.77" = type { void (%struct.VkDevice_T*, %struct.VkFramebuffer_T*, %struct.VkAllocationCallbacks*)* }
%"class.GrVkInterface::VkPtr.78" = type { i32 (%struct.VkDevice_T*, %struct.VkRenderPassCreateInfo*, %struct.VkAllocationCallbacks*, %struct.VkRenderPass_T**)* }
%struct.VkRenderPassCreateInfo = type { i32, i8*, i32, i32, %struct.VkAttachmentDescription*, i32, %struct.VkSubpassDescription*, i32, %struct.VkSubpassDependency* }
%struct.VkAttachmentDescription = type { i32, i32, i32, i32, i32, i32, i32, i32, i32 }
%struct.VkSubpassDescription = type { i32, i32, i32, %struct.VkAttachmentReference*, i32, %struct.VkAttachmentReference*, %struct.VkAttachmentReference*, %struct.VkAttachmentReference*, i32, i32* }
%struct.VkAttachmentReference = type { i32, i32 }
%struct.VkSubpassDependency = type { i32, i32, i32, i32, i32, i32, i32 }
%"class.GrVkInterface::VkPtr.79" = type { void (%struct.VkDevice_T*, %struct.VkRenderPass_T*, %struct.VkAllocationCallbacks*)* }
%"class.GrVkInterface::VkPtr.80" = type { void (%struct.VkDevice_T*, %struct.VkRenderPass_T*, %struct.VkExtent2D*)* }
%"class.GrVkInterface::VkPtr.81" = type { i32 (%struct.VkDevice_T*, %struct.VkCommandPoolCreateInfo*, %struct.VkAllocationCallbacks*, %struct.VkCommandPool_T**)* }
%struct.VkCommandPoolCreateInfo = type { i32, i8*, i32, i32 }
%struct.VkCommandPool_T = type opaque
%"class.GrVkInterface::VkPtr.82" = type { void (%struct.VkDevice_T*, %struct.VkCommandPool_T*, %struct.VkAllocationCallbacks*)* }
%"class.GrVkInterface::VkPtr.83" = type { i32 (%struct.VkDevice_T*, %struct.VkCommandPool_T*, i32)* }
%"class.GrVkInterface::VkPtr.84" = type { i32 (%struct.VkDevice_T*, %struct.VkCommandBufferAllocateInfo*, %struct.VkCommandBuffer_T**)* }
%struct.VkCommandBufferAllocateInfo = type { i32, i8*, %struct.VkCommandPool_T*, i32, i32 }
%"class.GrVkInterface::VkPtr.85" = type { void (%struct.VkDevice_T*, %struct.VkCommandPool_T*, i32, %struct.VkCommandBuffer_T**)* }
%"class.GrVkInterface::VkPtr.86" = type { i32 (%struct.VkCommandBuffer_T*, %struct.VkCommandBufferBeginInfo*)* }
%struct.VkCommandBufferBeginInfo = type { i32, i8*, i32, %struct.VkCommandBufferInheritanceInfo* }
%struct.VkCommandBufferInheritanceInfo = type { i32, i8*, %struct.VkRenderPass_T*, i32, %struct.VkFramebuffer_T*, i32, i32, i32 }
%"class.GrVkInterface::VkPtr.87" = type { i32 (%struct.VkCommandBuffer_T*)* }
%"class.GrVkInterface::VkPtr.88" = type { i32 (%struct.VkCommandBuffer_T*, i32)* }
%"class.GrVkInterface::VkPtr.89" = type { void (%struct.VkCommandBuffer_T*, i32, %struct.VkPipeline_T*)* }
%"class.GrVkInterface::VkPtr.90" = type { void (%struct.VkCommandBuffer_T*, i32, i32, %struct.VkViewport*)* }
%"class.GrVkInterface::VkPtr.91" = type { void (%struct.VkCommandBuffer_T*, i32, i32, %struct.VkRect2D*)* }
%"class.GrVkInterface::VkPtr.92" = type { void (%struct.VkCommandBuffer_T*, float)* }
%"class.GrVkInterface::VkPtr.93" = type { void (%struct.VkCommandBuffer_T*, float, float, float)* }
%"class.GrVkInterface::VkPtr.94" = type { void (%struct.VkCommandBuffer_T*, float*)* }
%"class.GrVkInterface::VkPtr.95" = type { void (%struct.VkCommandBuffer_T*, float, float)* }
%"class.GrVkInterface::VkPtr.96" = type { void (%struct.VkCommandBuffer_T*, i32, i32)* }
%"class.GrVkInterface::VkPtr.97" = type { void (%struct.VkCommandBuffer_T*, i32, %struct.VkPipelineLayout_T*, i32, i32, %struct.VkDescriptorSet_T**, i32, i32*)* }
%"class.GrVkInterface::VkPtr.98" = type { void (%struct.VkCommandBuffer_T*, %struct.VkBuffer_T*, i64, i32)* }
%"class.GrVkInterface::VkPtr.99" = type { void (%struct.VkCommandBuffer_T*, i32, i32, %struct.VkBuffer_T**, i64*)* }
%"class.GrVkInterface::VkPtr.100" = type { void (%struct.VkCommandBuffer_T*, i32, i32, i32, i32)* }
%"class.GrVkInterface::VkPtr.101" = type { void (%struct.VkCommandBuffer_T*, i32, i32, i32, i32, i32)* }
%"class.GrVkInterface::VkPtr.102" = type { void (%struct.VkCommandBuffer_T*, %struct.VkBuffer_T*, i64, i32, i32)* }
%"class.GrVkInterface::VkPtr.103" = type { void (%struct.VkCommandBuffer_T*, i32, i32, i32)* }
%"class.GrVkInterface::VkPtr.104" = type { void (%struct.VkCommandBuffer_T*, %struct.VkBuffer_T*, i64)* }
%"class.GrVkInterface::VkPtr.105" = type { void (%struct.VkCommandBuffer_T*, %struct.VkBuffer_T*, %struct.VkBuffer_T*, i32, %struct.VkBufferCopy*)* }
%struct.VkBufferCopy = type { i64, i64, i64 }
%"class.GrVkInterface::VkPtr.106" = type { void (%struct.VkCommandBuffer_T*, %struct.VkImage_T*, i32, %struct.VkImage_T*, i32, i32, %struct.VkImageCopy*)* }
%struct.VkImageCopy = type { %struct.VkImageSubresourceLayers, %struct.VkOffset3D, %struct.VkImageSubresourceLayers, %struct.VkOffset3D, %struct.VkExtent3D }
%struct.VkImageSubresourceLayers = type { i32, i32, i32, i32 }
%"class.GrVkInterface::VkPtr.107" = type { void (%struct.VkCommandBuffer_T*, %struct.VkImage_T*, i32, %struct.VkImage_T*, i32, i32, %struct.VkImageBlit*, i32)* }
%struct.VkImageBlit = type { %struct.VkImageSubresourceLayers, [2 x %struct.VkOffset3D], %struct.VkImageSubresourceLayers, [2 x %struct.VkOffset3D] }
%"class.GrVkInterface::VkPtr.108" = type { void (%struct.VkCommandBuffer_T*, %struct.VkBuffer_T*, %struct.VkImage_T*, i32, i32, %struct.VkBufferImageCopy*)* }
%struct.VkBufferImageCopy = type { i64, i32, i32, %struct.VkImageSubresourceLayers, %struct.VkOffset3D, %struct.VkExtent3D }
%"class.GrVkInterface::VkPtr.109" = type { void (%struct.VkCommandBuffer_T*, %struct.VkImage_T*, i32, %struct.VkBuffer_T*, i32, %struct.VkBufferImageCopy*)* }
%"class.GrVkInterface::VkPtr.110" = type { void (%struct.VkCommandBuffer_T*, %struct.VkBuffer_T*, i64, i64, i8*)* }
%"class.GrVkInterface::VkPtr.111" = type { void (%struct.VkCommandBuffer_T*, %struct.VkBuffer_T*, i64, i64, i32)* }
%"class.GrVkInterface::VkPtr.112" = type { void (%struct.VkCommandBuffer_T*, %struct.VkImage_T*, i32, %union.VkClearColorValue*, i32, %struct.VkImageSubresourceRange*)* }
%union.VkClearColorValue = type { [4 x float] }
%"class.GrVkInterface::VkPtr.113" = type { void (%struct.VkCommandBuffer_T*, %struct.VkImage_T*, i32, %struct.VkClearDepthStencilValue*, i32, %struct.VkImageSubresourceRange*)* }
%struct.VkClearDepthStencilValue = type { float, i32 }
%"class.GrVkInterface::VkPtr.114" = type { void (%struct.VkCommandBuffer_T*, i32, %struct.VkClearAttachment*, i32, %struct.VkClearRect*)* }
%struct.VkClearAttachment = type { i32, i32, %union.VkClearValue }
%union.VkClearValue = type { %union.VkClearColorValue }
%struct.VkClearRect = type { %struct.VkRect2D, i32, i32 }
%"class.GrVkInterface::VkPtr.115" = type { void (%struct.VkCommandBuffer_T*, %struct.VkImage_T*, i32, %struct.VkImage_T*, i32, i32, %struct.VkImageResolve*)* }
%struct.VkImageResolve = type { %struct.VkImageSubresourceLayers, %struct.VkOffset3D, %struct.VkImageSubresourceLayers, %struct.VkOffset3D, %struct.VkExtent3D }
%"class.GrVkInterface::VkPtr.116" = type { void (%struct.VkCommandBuffer_T*, %struct.VkEvent_T*, i32)* }
%"class.GrVkInterface::VkPtr.117" = type { void (%struct.VkCommandBuffer_T*, i32, %struct.VkEvent_T**, i32, i32, i32, %struct.VkMemoryBarrier*, i32, %struct.VkBufferMemoryBarrier*, i32, %struct.VkImageMemoryBarrier*)* }
%struct.VkMemoryBarrier = type { i32, i8*, i32, i32 }
%struct.VkBufferMemoryBarrier = type { i32, i8*, i32, i32, i32, i32, %struct.VkBuffer_T*, i64, i64 }
%struct.VkImageMemoryBarrier = type { i32, i8*, i32, i32, i32, i32, i32, i32, %struct.VkImage_T*, %struct.VkImageSubresourceRange }
%"class.GrVkInterface::VkPtr.118" = type { void (%struct.VkCommandBuffer_T*, i32, i32, i32, i32, %struct.VkMemoryBarrier*, i32, %struct.VkBufferMemoryBarrier*, i32, %struct.VkImageMemoryBarrier*)* }
%"class.GrVkInterface::VkPtr.120" = type { void (%struct.VkCommandBuffer_T*, %struct.VkQueryPool_T*, i32)* }
%"class.GrVkInterface::VkPtr.119" = type { void (%struct.VkCommandBuffer_T*, %struct.VkQueryPool_T*, i32, i32)* }
%"class.GrVkInterface::VkPtr.121" = type { void (%struct.VkCommandBuffer_T*, i32, %struct.VkQueryPool_T*, i32)* }
%"class.GrVkInterface::VkPtr.122" = type { void (%struct.VkCommandBuffer_T*, %struct.VkQueryPool_T*, i32, i32, %struct.VkBuffer_T*, i64, i64, i32)* }
%"class.GrVkInterface::VkPtr.123" = type { void (%struct.VkCommandBuffer_T*, %struct.VkPipelineLayout_T*, i32, i32, i32, i8*)* }
%"class.GrVkInterface::VkPtr.124" = type { void (%struct.VkCommandBuffer_T*, %struct.VkRenderPassBeginInfo*, i32)* }
%struct.VkRenderPassBeginInfo = type { i32, i8*, %struct.VkRenderPass_T*, %struct.VkFramebuffer_T*, %struct.VkRect2D, i32, %union.VkClearValue* }
%"class.GrVkInterface::VkPtr.125" = type { void (%struct.VkCommandBuffer_T*, i32)* }
%"class.GrVkInterface::VkPtr.126" = type { void (%struct.VkCommandBuffer_T*)* }
%"class.GrVkInterface::VkPtr.127" = type { void (%struct.VkCommandBuffer_T*, i32, %struct.VkCommandBuffer_T**)* }
%"class.GrVkInterface::VkPtr.128" = type { void (%struct.VkPhysicalDevice_T*, %struct.VkPhysicalDeviceFeatures2*)* }
%"class.GrVkInterface::VkPtr.129" = type { void (%struct.VkPhysicalDevice_T*, %struct.VkPhysicalDeviceProperties2*)* }
%struct.VkPhysicalDeviceProperties2 = type { i32, i8*, %struct.VkPhysicalDeviceProperties }
%"class.GrVkInterface::VkPtr.130" = type { void (%struct.VkPhysicalDevice_T*, i32, %struct.VkFormatProperties2*)* }
%struct.VkFormatProperties2 = type { i32, i8*, %struct.VkFormatProperties }
%"class.GrVkInterface::VkPtr.131" = type { i32 (%struct.VkPhysicalDevice_T*, %struct.VkPhysicalDeviceImageFormatInfo2*, %struct.VkImageFormatProperties2*)* }
%struct.VkPhysicalDeviceImageFormatInfo2 = type { i32, i8*, i32, i32, i32, i32, i32 }
%struct.VkImageFormatProperties2 = type { i32, i8*, %struct.VkImageFormatProperties }
%"class.GrVkInterface::VkPtr.132" = type { void (%struct.VkPhysicalDevice_T*, i32*, %struct.VkQueueFamilyProperties2*)* }
%struct.VkQueueFamilyProperties2 = type { i32, i8*, %struct.VkQueueFamilyProperties }
%"class.GrVkInterface::VkPtr.133" = type { void (%struct.VkPhysicalDevice_T*, %struct.VkPhysicalDeviceMemoryProperties2*)* }
%struct.VkPhysicalDeviceMemoryProperties2 = type { i32, i8*, %struct.VkPhysicalDeviceMemoryProperties }
%"class.GrVkInterface::VkPtr.134" = type { void (%struct.VkPhysicalDevice_T*, %struct.VkPhysicalDeviceSparseImageFormatInfo2*, i32*, %struct.VkSparseImageFormatProperties2*)* }
%struct.VkPhysicalDeviceSparseImageFormatInfo2 = type { i32, i8*, i32, i32, i32, i32, i32 }
%struct.VkSparseImageFormatProperties2 = type { i32, i8*, %struct.VkSparseImageFormatProperties }
%"class.GrVkInterface::VkPtr.135" = type { void (%struct.VkDevice_T*, %struct.VkImageMemoryRequirementsInfo2*, %struct.VkMemoryRequirements2*)* }
%struct.VkImageMemoryRequirementsInfo2 = type { i32, i8*, %struct.VkImage_T* }
%struct.VkMemoryRequirements2 = type { i32, i8*, %struct.VkMemoryRequirements }
%"class.GrVkInterface::VkPtr.136" = type { void (%struct.VkDevice_T*, %struct.VkBufferMemoryRequirementsInfo2*, %struct.VkMemoryRequirements2*)* }
%struct.VkBufferMemoryRequirementsInfo2 = type { i32, i8*, %struct.VkBuffer_T* }
%"class.GrVkInterface::VkPtr.137" = type { void (%struct.VkDevice_T*, %struct.VkImageSparseMemoryRequirementsInfo2*, i32*, %struct.VkSparseImageMemoryRequirements2*)* }
%struct.VkImageSparseMemoryRequirementsInfo2 = type { i32, i8*, %struct.VkImage_T* }
%struct.VkSparseImageMemoryRequirements2 = type { i32, i8*, %struct.VkSparseImageMemoryRequirements }
%"class.GrVkInterface::VkPtr.138" = type { i32 (%struct.VkDevice_T*, i32, %struct.VkBindBufferMemoryInfo*)* }
%struct.VkBindBufferMemoryInfo = type { i32, i8*, %struct.VkBuffer_T*, %struct.VkDeviceMemory_T*, i64 }
%"class.GrVkInterface::VkPtr.139" = type { i32 (%struct.VkDevice_T*, i32, %struct.VkBindImageMemoryInfo*)* }
%struct.VkBindImageMemoryInfo = type { i32, i8*, %struct.VkImage_T*, %struct.VkDeviceMemory_T*, i64 }
%"class.GrVkInterface::VkPtr.140" = type { void (%struct.VkDevice_T*, %struct.VkCommandPool_T*, i32)* }
%"class.GrVkInterface::VkPtr.141" = type { void (%struct.VkDevice_T*, %struct.VkDescriptorSetLayoutCreateInfo*, %struct.VkDescriptorSetLayoutSupport*)* }
%struct.VkDescriptorSetLayoutSupport = type { i32, i8*, i32 }
%"class.GrVkInterface::VkPtr.142" = type { void (%struct.VkPhysicalDevice_T*, %struct.VkPhysicalDeviceExternalBufferInfo*, %struct.VkExternalBufferProperties*)* }
%struct.VkPhysicalDeviceExternalBufferInfo = type { i32, i8*, i32, i32, i32 }
%struct.VkExternalBufferProperties = type { i32, i8*, %struct.VkExternalMemoryProperties }
%struct.VkExternalMemoryProperties = type { i32, i32, i32 }
%"class.GrVkInterface::VkPtr.143" = type { i32 (%struct.VkDevice_T*, %struct.VkSamplerYcbcrConversionCreateInfo*, %struct.VkAllocationCallbacks*, %struct.VkSamplerYcbcrConversion_T**)* }
%struct.VkSamplerYcbcrConversionCreateInfo = type { i32, i8*, i32, i32, i32, %struct.VkComponentMapping, i32, i32, i32, i32 }
%struct.VkSamplerYcbcrConversion_T = type opaque
%"class.GrVkInterface::VkPtr.144" = type { void (%struct.VkDevice_T*, %struct.VkSamplerYcbcrConversion_T*, %struct.VkAllocationCallbacks*)* }
%struct.VkPhysicalDevice_T = type opaque
%struct.VkPhysicalDeviceFeatures2 = type { i32, i8*, %struct.VkPhysicalDeviceFeatures }
%class.GrVkExtensions = type { %class.SkTArray.145 }
%class.SkTArray.145 = type { %"struct.GrVkExtensions::Info"*, i64 }
%"struct.GrVkExtensions::Info" = type <{ %class.SkString, i32, [4 x i8] }>
%class.SkString = type { %class.sk_sp.146 }
%class.sk_sp.146 = type { %"struct.SkString::Rec"* }
%"struct.SkString::Rec" = type <{ i32, %"struct.std::__1::atomic", i8, [3 x i8] }>
%class.GrCaps = type <{ %class.SkRefCnt.base, [4 x i8], %class.sk_sp, i48, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, [4 x i8], i64, %class.GrDriverBugWorkarounds, i8, i8 }>
%class.SkRefCntBase = type <{ i32 (...)**, %"struct.std::__1::atomic", [4 x i8] }>
%class.GrSurfaceProxy = type { i32 (...)**, %class.SkNVRefCnt, %class.sk_sp.147, i32, [4 x i8], %class.GrBackendFormat, %struct.SkISize, i32, i8, i32, %"class.GrSurfaceProxy::UniqueID", %"class.std::__1::function", i8, i8, i8, i8, i32, %"struct.std::__1::atomic.353" }
%class.SkNVRefCnt = type { %"struct.std::__1::atomic" }
%class.sk_sp.147 = type { %class.GrSurface* }
%class.GrSurface = type { %class.GrGpuResource, %struct.SkISize, i32, i8, %class.sk_sp.347 }
%class.GrGpuResource = type { i32 (...)**, %class.GrIORef, i32, i32, %"class.std::__1::chrono::time_point", %class.GrScratchKey, %class.GrUniqueKey, %class.GrGpu*, i64, i8, i8, %"class.GrGpuResource::UniqueID" }
%class.GrIORef = type { %"struct.std::__1::atomic", %"struct.std::__1::atomic" }
%"class.std::__1::chrono::time_point" = type { %"class.std::__1::chrono::duration" }
%"class.std::__1::chrono::duration" = type { i64 }
%class.GrScratchKey = type { %class.GrResourceKey }
%class.GrResourceKey = type { %class.SkAutoSTMalloc }
%class.SkAutoSTMalloc = type <{ i32*, %union.anon, [4 x i8] }>
%union.anon = type { [7 x i32] }
%class.GrUniqueKey = type { %class.GrResourceKey, %class.sk_sp.148, i8* }
%class.sk_sp.148 = type { %class.SkData* }
%class.SkData = type { %class.SkNVRefCnt.149, void (i8*, i8*)*, i8*, i8*, i64 }
%class.SkNVRefCnt.149 = type { %"struct.std::__1::atomic" }
%class.GrGpu = type { %class.SkRefCnt.base, %"class.GrGpu::Stats", %class.sk_sp.150, %"class.std::__1::unique_ptr.151", i32, %class.GrDirectContext*, %class.SkSTArray.344, i8, i32 }
%"class.GrGpu::Stats" = type { i8 }
%class.sk_sp.150 = type { %class.GrCaps* }
%"class.std::__1::unique_ptr.151" = type { %"class.std::__1::__compressed_pair.152" }
%"class.std::__1::__compressed_pair.152" = type { %"struct.std::__1::__compressed_pair_elem.153" }
%"struct.std::__1::__compressed_pair_elem.153" = type { %"class.SkSL::Compiler"* }
%"class.SkSL::Compiler" = type { %"class.SkSL::ErrorReporter", %"class.std::__1::shared_ptr", %"class.std::__1::shared_ptr.196", %"class.std::__1::shared_ptr.196", %"struct.SkSL::ParsedModule", %"struct.SkSL::ParsedModule", %"struct.SkSL::ParsedModule", %"struct.SkSL::ParsedModule", %"struct.SkSL::ParsedModule", %"struct.SkSL::ParsedModule", %"struct.SkSL::ParsedModule", %"struct.SkSL::ParsedModule", %"struct.SkSL::ParsedModule", %"struct.SkSL::ParsedModule", %"class.SkSL::ModifiersPool", %"class.SkSL::Inliner", %"class.std::__1::unique_ptr.198", %"class.SkSL::String"*, i32, %"class.SkSL::String", %"class.std::__1::vector.204" }
%"class.SkSL::ErrorReporter" = type { i32 (...)** }
%"class.std::__1::shared_ptr" = type { %"class.SkSL::Context"*, %"class.std::__1::__shared_weak_count"* }
%"class.SkSL::Context" = type { %"class.SkSL::BuiltinTypes", %"class.SkSL::ErrorReporter"*, %class.GrShaderCaps*, %"class.SkSL::ModifiersPool"*, %"struct.SkSL::ProgramConfig"* }
%"class.SkSL::BuiltinTypes" = type { %"class.std::__1::unique_ptr.154", %"class.std::__1::unique_ptr.154", %"class.std::__1::unique_ptr.154", %"class.std::__1::unique_ptr.154", %"class.std::__1::unique_ptr.154", %"class.std::__1::unique_ptr.154", %"class.std::__1::unique_ptr.154", %"class.std::__1::unique_ptr.154", %"class.std::__1::unique_ptr.154", %"class.std::__1::unique_ptr.154", %"class.std::__1::unique_ptr.154", %"class.std::__1::unique_ptr.154", %"class.std::__1::unique_ptr.154", %"class.std::__1::unique_ptr.154", %"class.std::__1::unique_ptr.154", %"class.std::__1::unique_ptr.154", %"class.std::__1::unique_ptr.154", %"class.std::__1::unique_ptr.154", %"class.std::__1::unique_ptr.154", %"class.std::__1::unique_ptr.154", %"class.std::__1::unique_ptr.154", %"class.std::__1::unique_ptr.154", %"class.std::__1::unique_ptr.154", %"class.std::__1::unique_ptr.154", %"class.std::__1::unique_ptr.154", %"class.std::__1::unique_ptr.154", %"class.std::__1::unique_ptr.154", %"class.std::__1::unique_ptr.154", %"class.std::__1::unique_ptr.154", %"class.std::__1::unique_ptr.154", %"class.std::__1::unique_ptr.154", %"class.std::__1::unique_ptr.154", %"class.std::__1::unique_ptr.154", %"class.std::__1::unique_ptr.154", %"class.std::__1::unique_ptr.154", %"class.std::__1::unique_ptr.154", %"class.std::__1::unique_ptr.154", %"class.std::__1::unique_ptr.154", %"class.std::__1::unique_ptr.154", %"class.std::__1::unique_ptr.154", %"class.std::__1::unique_ptr.154", %"class.std::__1::unique_ptr.154", %"class.std::__1::unique_ptr.154", %"class.std::__1::unique_ptr.154", %"class.std::__1::unique_ptr.154", %"class.std::__1::unique_ptr.154", %"class.std::__1::unique_ptr.154", %"class.std::__1::unique_ptr.154", %"class.std::__1::unique_ptr.154", %"class.std::__1::unique_ptr.154", %"class.std::__1::unique_ptr.154", %"class.std::__1::unique_ptr.154", %"class.std::__1::unique_ptr.154", %"class.std::__1::unique_ptr.154", %"class.std::__1::unique_ptr.154", %"class.std::__1::unique_ptr.154", %"class.std::__1::unique_ptr.154", %"class.std::__1::unique_ptr.154", %"class.std::__1::unique_ptr.154", %"class.std::__1::unique_ptr.154", %"class.std::__1::unique_ptr.154", %"class.std::__1::unique_ptr.154", %"class.std::__1::unique_ptr.154", %"class.std::__1::unique_ptr.154", %"class.std::__1::unique_ptr.154", %"class.std::__1::unique_ptr.154", %"class.std::__1::unique_ptr.154", %"class.std::__1::unique_ptr.154", %"class.std::__1::unique_ptr.154", %"class.std::__1::unique_ptr.154", %"class.std::__1::unique_ptr.154", %"class.std::__1::unique_ptr.154", %"class.std::__1::unique_ptr.154", %"class.std::__1::unique_ptr.154", %"class.std::__1::unique_ptr.154", %"class.std::__1::unique_ptr.154", %"class.std::__1::unique_ptr.154", %"class.std::__1::unique_ptr.154", %"class.std::__1::unique_ptr.154", %"class.std::__1::unique_ptr.154", %"class.std::__1::unique_ptr.154", %"class.std::__1::unique_ptr.154", %"class.std::__1::unique_ptr.154", %"class.std::__1::unique_ptr.154", %"class.std::__1::unique_ptr.154", %"class.std::__1::unique_ptr.154", %"class.std::__1::unique_ptr.154", %"class.std::__1::unique_ptr.154", %"class.std::__1::unique_ptr.154" }
%"class.std::__1::unique_ptr.154" = type { %"class.std::__1::__compressed_pair.155" }
%"class.std::__1::__compressed_pair.155" = type { %"struct.std::__1::__compressed_pair_elem.156" }
%"struct.std::__1::__compressed_pair_elem.156" = type { %"class.SkSL::Type"* }
%"class.SkSL::Type" = type { %"class.SkSL::Symbol", i8*, %"class.SkSL::String", i32, i32, i32, %"class.SkSL::Type"*, %"class.std::__1::vector", i32, i32, %"class.std::__1::vector.166", i32, i8, i8, i8, i8, i8, %"class.SkSL::Type"*, %"class.SkSL::Type"* }
%"class.SkSL::Symbol" = type { %"class.SkSL::IRNode", %"struct.SkSL::StringFragment", %"class.SkSL::Type"* }
%"class.SkSL::IRNode" = type { i32 (...)**, i32, i32 }
%"struct.SkSL::StringFragment" = type { i8*, i64 }
%"class.std::__1::vector" = type { %"class.std::__1::__vector_base" }
%"class.std::__1::__vector_base" = type { %"class.SkSL::Type"**, %"class.SkSL::Type"**, %"class.std::__1::__compressed_pair.161" }
%"class.std::__1::__compressed_pair.161" = type { %"struct.std::__1::__compressed_pair_elem.162" }
%"struct.std::__1::__compressed_pair_elem.162" = type { %"class.SkSL::Type"** }
%"class.std::__1::vector.166" = type { %"class.std::__1::__vector_base.167" }
%"class.std::__1::__vector_base.167" = type { %"struct.SkSL::Type::Field"*, %"struct.SkSL::Type::Field"*, %"class.std::__1::__compressed_pair.168" }
%"struct.SkSL::Type::Field" = type { %"struct.SkSL::Modifiers", %"struct.SkSL::StringFragment", %"class.SkSL::Type"* }
%"struct.SkSL::Modifiers" = type { %"struct.SkSL::Layout", i32, [4 x i8] }
%"struct.SkSL::Layout" = type <{ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, [4 x i8], %"struct.SkSL::StringFragment", i32, [4 x i8] }>
%"class.std::__1::__compressed_pair.168" = type { %"struct.std::__1::__compressed_pair_elem.169" }
%"struct.std::__1::__compressed_pair_elem.169" = type { %"struct.SkSL::Type::Field"* }
%"struct.SkSL::ProgramConfig" = type { i8, %"struct.SkSL::ProgramSettings" }
%"struct.SkSL::ProgramSettings" = type { i8, i8, i8, i8, i8, i32, i32, i32, i32, i32, i8, i8, i8, i32, i8, i8, i8, i8, i8, i8, i8, i8, %"class.std::__1::vector.195"* }
%"class.std::__1::vector.195" = type opaque
%"class.std::__1::__shared_weak_count" = type { %"class.std::__1::__shared_count", i64 }
%"class.std::__1::__shared_count" = type { i32 (...)**, i64 }
%"class.std::__1::shared_ptr.196" = type { %"class.SkSL::SymbolTable"*, %"class.std::__1::__shared_weak_count"* }
%"class.SkSL::SymbolTable" = type { %"class.std::__1::shared_ptr.196", %"class.std::__1::vector.358", i8, %"class.std::__1::vector.366", %"class.std::__1::forward_list", %class.SkTHashMap.379, %"class.SkSL::ErrorReporter"* }
%"class.std::__1::vector.358" = type { %"class.std::__1::__vector_base.359" }
%"class.std::__1::__vector_base.359" = type { %"class.std::__1::unique_ptr.360"*, %"class.std::__1::unique_ptr.360"*, %"class.std::__1::__compressed_pair.361" }
%"class.std::__1::unique_ptr.360" = type { %"class.std::__1::__compressed_pair.541" }
%"class.std::__1::__compressed_pair.541" = type { %"struct.std::__1::__compressed_pair_elem.542" }
%"struct.std::__1::__compressed_pair_elem.542" = type { %"class.SkSL::Symbol"* }
%"class.std::__1::__compressed_pair.361" = type { %"struct.std::__1::__compressed_pair_elem.362" }
%"struct.std::__1::__compressed_pair_elem.362" = type { %"class.std::__1::unique_ptr.360"* }
%"class.std::__1::vector.366" = type { %"class.std::__1::__vector_base.367" }
%"class.std::__1::__vector_base.367" = type { %"class.std::__1::unique_ptr.368"*, %"class.std::__1::unique_ptr.368"*, %"class.std::__1::__compressed_pair.369" }
%"class.std::__1::unique_ptr.368" = type { %"class.std::__1::__compressed_pair.546" }
%"class.std::__1::__compressed_pair.546" = type { %"struct.std::__1::__compressed_pair_elem.547" }
%"struct.std::__1::__compressed_pair_elem.547" = type { %"class.SkSL::IRNode"* }
%"class.std::__1::__compressed_pair.369" = type { %"struct.std::__1::__compressed_pair_elem.370" }
%"struct.std::__1::__compressed_pair_elem.370" = type { %"class.std::__1::unique_ptr.368"* }
%"class.std::__1::forward_list" = type { %"class.std::__1::__forward_list_base" }
%"class.std::__1::__forward_list_base" = type { %"class.std::__1::__compressed_pair.374" }
%"class.std::__1::__compressed_pair.374" = type { %"struct.std::__1::__compressed_pair_elem.375" }
%"struct.std::__1::__compressed_pair_elem.375" = type { %"struct.std::__1::__forward_begin_node" }
%"struct.std::__1::__forward_begin_node" = type { %"struct.std::__1::__forward_list_node"* }
%"struct.std::__1::__forward_list_node" = type { %"struct.std::__1::__forward_begin_node", %"class.SkSL::String" }
%class.SkTHashMap.379 = type { %class.SkTHashTable.380 }
%class.SkTHashTable.380 = type { i32, i32, %class.SkAutoTArray.381 }
%class.SkAutoTArray.381 = type { %"class.std::__1::unique_ptr.382" }
%"class.std::__1::unique_ptr.382" = type { %"class.std::__1::__compressed_pair.383" }
%"class.std::__1::__compressed_pair.383" = type { %"struct.std::__1::__compressed_pair_elem.384" }
%"struct.std::__1::__compressed_pair_elem.384" = type { %"struct.SkTHashTable<SkTHashMap<SkSL::SymbolTable::SymbolKey, const SkSL::Symbol *, SkSL::SymbolTable::SymbolKey::Hash>::Pair, SkSL::SymbolTable::SymbolKey, SkTHashMap<SkSL::SymbolTable::SymbolKey, const SkSL::Symbol *, SkSL::SymbolTable::SymbolKey::Hash>::Pair>::Slot"* }
%"struct.SkTHashTable<SkTHashMap<SkSL::SymbolTable::SymbolKey, const SkSL::Symbol *, SkSL::SymbolTable::SymbolKey::Hash>::Pair, SkSL::SymbolTable::SymbolKey, SkTHashMap<SkSL::SymbolTable::SymbolKey, const SkSL::Symbol *, SkSL::SymbolTable::SymbolKey::Hash>::Pair>::Slot" = type <{ %"struct.SkTHashMap<SkSL::SymbolTable::SymbolKey, const SkSL::Symbol *, SkSL::SymbolTable::SymbolKey::Hash>::Pair", i32, [4 x i8] }>
%"struct.SkTHashMap<SkSL::SymbolTable::SymbolKey, const SkSL::Symbol *, SkSL::SymbolTable::SymbolKey::Hash>::Pair" = type { %"struct.std::__1::pair.551" }
%"struct.std::__1::pair.551" = type { %"struct.SkSL::SymbolTable::SymbolKey", %"class.SkSL::Symbol"* }
%"struct.SkSL::SymbolTable::SymbolKey" = type <{ %"struct.SkSL::StringFragment", i32, [4 x i8] }>
%"struct.SkSL::ParsedModule" = type { %"class.std::__1::shared_ptr.196", %"class.std::__1::shared_ptr.197" }
%"class.std::__1::shared_ptr.197" = type { %"class.SkSL::IRIntrinsicMap"*, %"class.std::__1::__shared_weak_count"* }
%"class.SkSL::IRIntrinsicMap" = type opaque
%"class.SkSL::ModifiersPool" = type { %"class.std::__1::unordered_set" }
%"class.std::__1::unordered_set" = type { %"class.std::__1::__hash_table" }
%"class.std::__1::__hash_table" = type <{ %"class.std::__1::unique_ptr.176", %"class.std::__1::__compressed_pair.185", %"class.std::__1::__compressed_pair.190", %"class.std::__1::__compressed_pair.192", [4 x i8] }>
%"class.std::__1::unique_ptr.176" = type { %"class.std::__1::__compressed_pair.177" }
%"class.std::__1::__compressed_pair.177" = type { %"struct.std::__1::__compressed_pair_elem.178", %"struct.std::__1::__compressed_pair_elem.179" }
%"struct.std::__1::__compressed_pair_elem.178" = type { %"struct.std::__1::__hash_node_base"** }
%"struct.std::__1::__hash_node_base" = type { %"struct.std::__1::__hash_node_base"* }
%"struct.std::__1::__compressed_pair_elem.179" = type { %"class.std::__1::__bucket_list_deallocator" }
%"class.std::__1::__bucket_list_deallocator" = type { %"class.std::__1::__compressed_pair.180" }
%"class.std::__1::__compressed_pair.180" = type { %"struct.std::__1::__compressed_pair_elem.181" }
%"struct.std::__1::__compressed_pair_elem.181" = type { i64 }
%"class.std::__1::__compressed_pair.185" = type { %"struct.std::__1::__compressed_pair_elem.186" }
%"struct.std::__1::__compressed_pair_elem.186" = type { %"struct.std::__1::__hash_node_base" }
%"class.std::__1::__compressed_pair.190" = type { %"struct.std::__1::__compressed_pair_elem.181" }
%"class.std::__1::__compressed_pair.192" = type { %"struct.std::__1::__compressed_pair_elem.193" }
%"struct.std::__1::__compressed_pair_elem.193" = type { float }
%"class.SkSL::Inliner" = type { %"class.SkSL::Context"*, %"class.SkSL::Mangler", i32 }
%"class.SkSL::Mangler" = type { i32 }
%"class.std::__1::unique_ptr.198" = type { %"class.std::__1::__compressed_pair.199" }
%"class.std::__1::__compressed_pair.199" = type { %"struct.std::__1::__compressed_pair_elem.200" }
%"struct.std::__1::__compressed_pair_elem.200" = type { %"class.SkSL::IRGenerator"* }
%"class.SkSL::IRGenerator" = type opaque
%"class.SkSL::String" = type { %"class.std::__1::basic_string" }
%"class.std::__1::basic_string" = type { %"class.std::__1::__compressed_pair.157" }
%"class.std::__1::__compressed_pair.157" = type { %"struct.std::__1::__compressed_pair_elem.158" }
%"struct.std::__1::__compressed_pair_elem.158" = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" = type { %union.anon.159 }
%union.anon.159 = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" = type { i8*, i64, i64 }
%"class.std::__1::vector.204" = type { %"class.std::__1::__vector_base.205" }
%"class.std::__1::__vector_base.205" = type { i64*, i64*, %"class.std::__1::__compressed_pair.206" }
%"class.std::__1::__compressed_pair.206" = type { %"struct.std::__1::__compressed_pair_elem.207" }
%"struct.std::__1::__compressed_pair_elem.207" = type { i64* }
%class.GrDirectContext = type { %class.GrRecordingContext, %"class.GrDirectContext::DirectContextID", %"class.std::__1::unique_ptr.266", %"class.std::__1::unique_ptr.272", %class.sk_sp.278, %"class.std::__1::unique_ptr.279", %"class.std::__1::unique_ptr.319", i8, i8, %"class.GrContextOptions::PersistentCache"*, %"class.GrContextOptions::ShaderErrorHandler"*, %"class.std::__1::unique_ptr.326", %"class.std::__1::unique_ptr.332", %"class.std::__1::unique_ptr.338" }
%class.GrRecordingContext = type { %class.GrImageContext.base, %"class.GrRecordingContext::Stats", %"class.std::__1::unique_ptr.215", %"class.GrRecordingContext::OwnedArenas", %"class.std::__1::unique_ptr.254", %"class.std::__1::unique_ptr.260" }
%class.GrImageContext.base = type <{ %class.GrContext_Base, %class.GrSingleOwner }>
%class.GrContext_Base = type { %class.SkRefCnt.base, %class.sk_sp.214 }
%class.sk_sp.214 = type { %class.GrContextThreadSafeProxy* }
%class.GrContextThreadSafeProxy = type opaque
%class.GrSingleOwner = type { i8 }
%"class.GrRecordingContext::Stats" = type { i8 }
%"class.std::__1::unique_ptr.215" = type { %"class.std::__1::__compressed_pair.216" }
%"class.std::__1::__compressed_pair.216" = type { %"struct.std::__1::__compressed_pair_elem.217" }
%"struct.std::__1::__compressed_pair_elem.217" = type { %class.GrAuditTrail* }
%class.GrAuditTrail = type <{ %class.SkTArray.218, %class.SkTHashMap, %class.SkTHashMap.226, %class.SkTArray.235, %class.SkTArray.237, i32, i8, [3 x i8] }>
%class.SkTArray.218 = type { %"class.std::__1::unique_ptr.219"*, i64 }
%"class.std::__1::unique_ptr.219" = type { %"class.std::__1::__compressed_pair.529" }
%"class.std::__1::__compressed_pair.529" = type { %"struct.std::__1::__compressed_pair_elem.530" }
%"struct.std::__1::__compressed_pair_elem.530" = type { %"struct.GrAuditTrail::Op"* }
%"struct.GrAuditTrail::Op" = type <{ %class.SkString, %class.SkTArray.237, %struct.SkRect, i32, i32, i32, [4 x i8] }>
%struct.SkRect = type { float, float, float, float }
%class.SkTHashMap = type { %class.SkTHashTable }
%class.SkTHashTable = type { i32, i32, %class.SkAutoTArray }
%class.SkAutoTArray = type { %"class.std::__1::unique_ptr.220" }
%"class.std::__1::unique_ptr.220" = type { %"class.std::__1::__compressed_pair.221" }
%"class.std::__1::__compressed_pair.221" = type { %"struct.std::__1::__compressed_pair_elem.222" }
%"struct.std::__1::__compressed_pair_elem.222" = type { %"struct.SkTHashTable<SkTHashMap<unsigned int, int, SkGoodHash>::Pair, unsigned int, SkTHashMap<unsigned int, int, SkGoodHash>::Pair>::Slot"* }
%"struct.SkTHashTable<SkTHashMap<unsigned int, int, SkGoodHash>::Pair, unsigned int, SkTHashMap<unsigned int, int, SkGoodHash>::Pair>::Slot" = type { %"struct.SkTHashMap<unsigned int, int, SkGoodHash>::Pair", i32 }
%"struct.SkTHashMap<unsigned int, int, SkGoodHash>::Pair" = type { %"struct.std::__1::pair" }
%"struct.std::__1::pair" = type { i32, i32 }
%class.SkTHashMap.226 = type { %class.SkTHashTable.227 }
%class.SkTHashTable.227 = type { i32, i32, %class.SkAutoTArray.228 }
%class.SkAutoTArray.228 = type { %"class.std::__1::unique_ptr.229" }
%"class.std::__1::unique_ptr.229" = type { %"class.std::__1::__compressed_pair.230" }
%"class.std::__1::__compressed_pair.230" = type { %"struct.std::__1::__compressed_pair_elem.231" }
%"struct.std::__1::__compressed_pair_elem.231" = type { %"struct.SkTHashTable<SkTHashMap<int, SkTArray<GrAuditTrail::Op *, false> *, SkGoodHash>::Pair, int, SkTHashMap<int, SkTArray<GrAuditTrail::Op *, false> *, SkGoodHash>::Pair>::Slot"* }
%"struct.SkTHashTable<SkTHashMap<int, SkTArray<GrAuditTrail::Op *, false> *, SkGoodHash>::Pair, int, SkTHashMap<int, SkTArray<GrAuditTrail::Op *, false> *, SkGoodHash>::Pair>::Slot" = type <{ %"struct.SkTHashMap<int, SkTArray<GrAuditTrail::Op *, false> *, SkGoodHash>::Pair", i32, [4 x i8] }>
%"struct.SkTHashMap<int, SkTArray<GrAuditTrail::Op *, false> *, SkGoodHash>::Pair" = type { %"struct.std::__1::pair.534" }
%"struct.std::__1::pair.534" = type { i32, %class.SkTArray.535* }
%class.SkTArray.535 = type { %"struct.GrAuditTrail::Op"**, i64 }
%class.SkTArray.235 = type { %"class.std::__1::unique_ptr.236"*, i64 }
%"class.std::__1::unique_ptr.236" = type { %"class.std::__1::__compressed_pair.536" }
%"class.std::__1::__compressed_pair.536" = type { %"struct.std::__1::__compressed_pair_elem.537" }
%"struct.std::__1::__compressed_pair_elem.537" = type { %"struct.GrAuditTrail::OpNode"* }
%"struct.GrAuditTrail::OpNode" = type <{ %struct.SkRect, %class.SkTArray.535, %"class.GrSurfaceProxy::UniqueID", [4 x i8] }>
%class.SkTArray.237 = type { %class.SkString*, i64 }
%"class.GrRecordingContext::OwnedArenas" = type { i8, %"class.std::__1::unique_ptr.241", %"class.std::__1::unique_ptr.247" }
%"class.std::__1::unique_ptr.241" = type { %"class.std::__1::__compressed_pair.242" }
%"class.std::__1::__compressed_pair.242" = type { %"struct.std::__1::__compressed_pair_elem.243" }
%"struct.std::__1::__compressed_pair_elem.243" = type { %class.SkArenaAlloc* }
%class.SkArenaAlloc = type <{ i8*, i8*, i8*, %class.SkFibBlockSizes, [4 x i8] }>
%class.SkFibBlockSizes = type { i32 }
%"class.std::__1::unique_ptr.247" = type { %"class.std::__1::__compressed_pair.248" }
%"class.std::__1::__compressed_pair.248" = type { %"struct.std::__1::__compressed_pair_elem.249" }
%"struct.std::__1::__compressed_pair_elem.249" = type { %class.GrSubRunAllocator* }
%class.GrSubRunAllocator = type { %class.GrBagOfBytes }
%class.GrBagOfBytes = type { i8*, i32, %class.SkFibBlockSizes.250 }
%class.SkFibBlockSizes.250 = type { i32 }
%"class.std::__1::unique_ptr.254" = type { %"class.std::__1::__compressed_pair.255" }
%"class.std::__1::__compressed_pair.255" = type { %"struct.std::__1::__compressed_pair_elem.256" }
%"struct.std::__1::__compressed_pair_elem.256" = type { %class.GrDrawingManager* }
%class.GrDrawingManager = type opaque
%"class.std::__1::unique_ptr.260" = type { %"class.std::__1::__compressed_pair.261" }
%"class.std::__1::__compressed_pair.261" = type { %"struct.std::__1::__compressed_pair_elem.262" }
%"struct.std::__1::__compressed_pair_elem.262" = type { %class.GrProxyProvider* }
%class.GrProxyProvider = type opaque
%"class.GrDirectContext::DirectContextID" = type { i32 }
%"class.std::__1::unique_ptr.266" = type { %"class.std::__1::__compressed_pair.267" }
%"class.std::__1::__compressed_pair.267" = type { %"struct.std::__1::__compressed_pair_elem.268" }
%"struct.std::__1::__compressed_pair_elem.268" = type { %class.SkTaskGroup* }
%class.SkTaskGroup = type opaque
%"class.std::__1::unique_ptr.272" = type { %"class.std::__1::__compressed_pair.273" }
%"class.std::__1::__compressed_pair.273" = type { %"struct.std::__1::__compressed_pair_elem.274" }
%"struct.std::__1::__compressed_pair_elem.274" = type { %class.GrStrikeCache* }
%class.GrStrikeCache = type opaque
%class.sk_sp.278 = type { %class.GrGpu* }
%"class.std::__1::unique_ptr.279" = type { %"class.std::__1::__compressed_pair.280" }
%"class.std::__1::__compressed_pair.280" = type { %"struct.std::__1::__compressed_pair_elem.281" }
%"struct.std::__1::__compressed_pair_elem.281" = type { %class.GrResourceCache* }
%class.GrResourceCache = type { %class.GrProxyProvider*, %class.GrThreadSafeCache*, i32, %class.SkTDPQueue, %class.SkTDArray.282, %class.SkTMultiMap, %class.SkTDynamicHash.291, i64, i64, i32, i64, i64, i32, [4 x i8], %"class.SkMessageBus<GrUniqueKeyInvalidatedMessage, unsigned int, true>::Inbox", %"class.SkMessageBus<GrTextureFreedMessage, GrDirectContext::DirectContextID, true>::Inbox", %class.SkTHashMap.307, %"class.GrDirectContext::DirectContextID", i32, %class.GrSingleOwner* }
%class.GrThreadSafeCache = type opaque
%class.SkTDPQueue = type { %class.SkTDArray.282 }
%class.SkTDArray.282 = type { %class.GrGpuResource**, i32, i32 }
%class.SkTMultiMap = type <{ %class.SkTDynamicHash, i32, [4 x i8] }>
%class.SkTDynamicHash = type { %class.SkTHashTable.283 }
%class.SkTHashTable.283 = type { i32, i32, %class.SkAutoTArray.284 }
%class.SkAutoTArray.284 = type { %"class.std::__1::unique_ptr.285" }
%"class.std::__1::unique_ptr.285" = type { %"class.std::__1::__compressed_pair.286" }
%"class.std::__1::__compressed_pair.286" = type { %"struct.std::__1::__compressed_pair_elem.287" }
%"struct.std::__1::__compressed_pair_elem.287" = type { %"struct.SkTHashTable<SkTMultiMap<GrGpuResource, GrScratchKey, GrResourceCache::ScratchMapTraits>::ValueList *, GrScratchKey, SkTDynamicHash<SkTMultiMap<GrGpuResource, GrScratchKey, GrResourceCache::ScratchMapTraits>::ValueList, GrScratchKey, SkTMultiMap<GrGpuResource, GrScratchKey, GrResourceCache::ScratchMapTraits>::ValueList>::AdaptedTraits>::Slot"* }
%"struct.SkTHashTable<SkTMultiMap<GrGpuResource, GrScratchKey, GrResourceCache::ScratchMapTraits>::ValueList *, GrScratchKey, SkTDynamicHash<SkTMultiMap<GrGpuResource, GrScratchKey, GrResourceCache::ScratchMapTraits>::ValueList, GrScratchKey, SkTMultiMap<GrGpuResource, GrScratchKey, GrResourceCache::ScratchMapTraits>::ValueList>::AdaptedTraits>::Slot" = type opaque
%class.SkTDynamicHash.291 = type { %class.SkTHashTable.292 }
%class.SkTHashTable.292 = type { i32, i32, %class.SkAutoTArray.293 }
%class.SkAutoTArray.293 = type { %"class.std::__1::unique_ptr.294" }
%"class.std::__1::unique_ptr.294" = type { %"class.std::__1::__compressed_pair.295" }
%"class.std::__1::__compressed_pair.295" = type { %"struct.std::__1::__compressed_pair_elem.296" }
%"struct.std::__1::__compressed_pair_elem.296" = type { %"struct.SkTHashTable<GrGpuResource *, GrUniqueKey, SkTDynamicHash<GrGpuResource, GrUniqueKey, GrResourceCache::UniqueHashTraits>::AdaptedTraits>::Slot"* }
%"struct.SkTHashTable<GrGpuResource *, GrUniqueKey, SkTDynamicHash<GrGpuResource, GrUniqueKey, GrResourceCache::UniqueHashTraits>::AdaptedTraits>::Slot" = type <{ %class.GrGpuResource*, i32, [4 x i8] }>
%"class.SkMessageBus<GrUniqueKeyInvalidatedMessage, unsigned int, true>::Inbox" = type <{ %class.SkTArray.300, %class.SkMutex, i32, [4 x i8] }>
%class.SkTArray.300 = type { %class.GrUniqueKeyInvalidatedMessage*, i64 }
%class.GrUniqueKeyInvalidatedMessage = type <{ %class.GrUniqueKey, i32, i8, [3 x i8] }>
%class.SkMutex = type { %class.SkSemaphore }
%class.SkSemaphore = type { %"struct.std::__1::atomic", %class.SkOnce, %"struct.SkSemaphore::OSSemaphore"* }
%class.SkOnce = type { %"struct.std::__1::atomic.301" }
%"struct.std::__1::atomic.301" = type { %"struct.std::__1::__atomic_base.302" }
%"struct.std::__1::__atomic_base.302" = type { %"struct.std::__1::__atomic_base.303" }
%"struct.std::__1::__atomic_base.303" = type { %"struct.std::__1::__cxx_atomic_impl.304" }
%"struct.std::__1::__cxx_atomic_impl.304" = type { %"struct.std::__1::__cxx_atomic_base_impl.305" }
%"struct.std::__1::__cxx_atomic_base_impl.305" = type { i8 }
%"struct.SkSemaphore::OSSemaphore" = type opaque
%"class.SkMessageBus<GrTextureFreedMessage, GrDirectContext::DirectContextID, true>::Inbox" = type <{ %class.SkTArray.306, %class.SkMutex, %"class.GrDirectContext::DirectContextID", [4 x i8] }>
%class.SkTArray.306 = type { %struct.GrTextureFreedMessage*, i64 }
%struct.GrTextureFreedMessage = type <{ %class.GrTexture*, %"class.GrDirectContext::DirectContextID", [4 x i8] }>
%class.GrTexture = type <{ i32 (...)**, i32, i32, i32, [4 x i8], %class.GrSurface }>
%class.SkTHashMap.307 = type { %class.SkTHashTable.308 }
%class.SkTHashTable.308 = type { i32, i32, %class.SkAutoTArray.309 }
%class.SkAutoTArray.309 = type { %"class.std::__1::unique_ptr.310" }
%"class.std::__1::unique_ptr.310" = type { %"class.std::__1::__compressed_pair.311" }
%"class.std::__1::__compressed_pair.311" = type { %"struct.std::__1::__compressed_pair_elem.312" }
%"struct.std::__1::__compressed_pair_elem.312" = type { %"struct.SkTHashTable<SkTHashMap<unsigned int, GrResourceCache::TextureAwaitingUnref, SkGoodHash>::Pair, unsigned int, SkTHashMap<unsigned int, GrResourceCache::TextureAwaitingUnref, SkGoodHash>::Pair>::Slot"* }
%"struct.SkTHashTable<SkTHashMap<unsigned int, GrResourceCache::TextureAwaitingUnref, SkGoodHash>::Pair, unsigned int, SkTHashMap<unsigned int, GrResourceCache::TextureAwaitingUnref, SkGoodHash>::Pair>::Slot" = type opaque
%"class.std::__1::unique_ptr.319" = type { %"class.std::__1::__compressed_pair.320" }
%"class.std::__1::__compressed_pair.320" = type { %"struct.std::__1::__compressed_pair_elem.321" }
%"struct.std::__1::__compressed_pair_elem.321" = type { %class.GrResourceProvider* }
%class.GrResourceProvider = type { %class.GrResourceCache*, %class.GrGpu*, %class.sk_sp.150, %class.sk_sp.322, %class.sk_sp.322 }
%class.sk_sp.322 = type { %class.GrGpuBuffer* }
%class.GrGpuBuffer = type { %class.GrGpuResource, %class.GrBuffer, i8*, i64, i32, i32 }
%class.GrBuffer = type { i32 (...)** }
%"class.std::__1::unique_ptr.326" = type { %"class.std::__1::__compressed_pair.327" }
%"class.std::__1::__compressed_pair.327" = type { %"struct.std::__1::__compressed_pair_elem.328" }
%"struct.std::__1::__compressed_pair_elem.328" = type { %class.GrClientMappedBufferManager* }
%class.GrClientMappedBufferManager = type opaque
%"class.std::__1::unique_ptr.332" = type { %"class.std::__1::__compressed_pair.333" }
%"class.std::__1::__compressed_pair.333" = type { %"struct.std::__1::__compressed_pair_elem.334" }
%"struct.std::__1::__compressed_pair_elem.334" = type { %class.GrAtlasManager* }
%class.GrAtlasManager = type opaque
%"class.std::__1::unique_ptr.338" = type { %"class.std::__1::__compressed_pair.339" }
%"class.std::__1::__compressed_pair.339" = type { %"struct.std::__1::__compressed_pair_elem.340" }
%"struct.std::__1::__compressed_pair_elem.340" = type { %class.GrSmallPathAtlasMgr* }
%class.GrSmallPathAtlasMgr = type opaque
%class.SkSTArray.344 = type { %class.SkAlignedSTStorage.345, %class.SkTArray.346 }
%class.SkAlignedSTStorage.345 = type { [64 x i8] }
%class.SkTArray.346 = type { %"struct.GrGpu::SubmittedProc"*, i64 }
%"struct.GrGpu::SubmittedProc" = type { void (i8*, i1)*, i8* }
%"class.GrGpuResource::UniqueID" = type { i32 }
%class.sk_sp.347 = type { %class.GrRefCntedCallback* }
%class.GrRefCntedCallback = type { %class.SkNVRefCnt.348, void (i8*)*, i8* }
%class.SkNVRefCnt.348 = type { %"struct.std::__1::atomic" }
%class.GrBackendFormat = type { i32, i8, %union.anon.349, i32, [4 x i8] }
%union.anon.349 = type { %struct.anon.350 }
%struct.anon.350 = type { i32, [4 x i8], %struct.GrVkYcbcrConversionInfo }
%struct.SkISize = type { i32, i32 }
%"class.GrSurfaceProxy::UniqueID" = type { i32 }
%"class.std::__1::function" = type { %"class.std::__1::__function::__policy_func" }
%"class.std::__1::__function::__policy_func" = type { %"union.std::__1::__function::__policy_storage", %"struct.std::__1::__function::__policy_invoker", %"struct.std::__1::__function::__policy"* }
%"union.std::__1::__function::__policy_storage" = type { i8*, [8 x i8] }
%"struct.std::__1::__function::__policy_invoker" = type { void (%"struct.GrSurfaceProxy::LazyCallbackResult"*, %"union.std::__1::__function::__policy_storage"*, %class.GrResourceProvider*, %"struct.GrSurfaceProxy::LazySurfaceDesc"*)* }
%"struct.GrSurfaceProxy::LazyCallbackResult" = type <{ %class.sk_sp.147, i32, i8, [3 x i8] }>
%"struct.GrSurfaceProxy::LazySurfaceDesc" = type <{ %struct.SkISize, i32, i8, i8, [2 x i8], i32, [4 x i8], %class.GrBackendFormat*, i8, i8, [6 x i8] }>
%"struct.std::__1::__function::__policy" = type { i8* (i8*)*, void (i8*)*, i8, %"class.std::type_info"* }
%"class.std::type_info" = type { i32 (...)**, i8* }
%"struct.std::__1::atomic.353" = type { %"struct.std::__1::__atomic_base.354" }
%"struct.std::__1::__atomic_base.354" = type { %"struct.std::__1::__atomic_base.355" }
%"struct.std::__1::__atomic_base.355" = type { %"struct.std::__1::__cxx_atomic_impl.356" }
%"struct.std::__1::__cxx_atomic_impl.356" = type { %"struct.std::__1::__cxx_atomic_base_impl.357" }
%"struct.std::__1::__cxx_atomic_base_impl.357" = type { i64 }
%struct.SkIRect = type { i32, i32, i32, i32 }
%struct.SkIPoint = type { i32, i32 }
%class.GrRenderTargetProxy = type <{ i32 (...)**, i8, i8, i8, i8, %struct.SkIRect, [4 x i8], %class.sk_sp.388, [4 x i8], [4 x i8], %class.GrSurfaceProxy }>
%class.sk_sp.388 = type { %class.GrArenas* }
%class.GrArenas = type { %class.SkNVRefCnt.389, [4 x i8], %class.SkArenaAlloc, %class.GrSubRunAllocator }
%class.SkNVRefCnt.389 = type { %"struct.std::__1::atomic" }
%class.GrTextureProxy = type { i32 (...)**, i8, i32, i8, i8, %class.GrUniqueKey, %class.GrProxyProvider*, %"class.std::__1::unique_ptr.390", %class.GrSurfaceProxy }
%"class.std::__1::unique_ptr.390" = type { %"class.std::__1::__compressed_pair.391" }
%"class.std::__1::__compressed_pair.391" = type { %"struct.std::__1::__compressed_pair_elem.392" }
%"struct.std::__1::__compressed_pair_elem.392" = type { %class.GrDeferredProxyUploader* }
%class.GrDeferredProxyUploader = type opaque
%struct.VkPhysicalDeviceBlendOperationAdvancedPropertiesEXT = type { i32, i8*, i32, i32, i32, i32, i32, i32 }
%class.GrVkAttachment = type { %class.GrAttachment.base, %class.GrVkImage, %class.sk_sp.490, %class.sk_sp.490, %class.gr_sp, %class.gr_sp }
%class.GrAttachment.base = type <{ %class.GrSurface, i8, [3 x i8], i32, i8, i8 }>
%class.GrVkImage = type { i32 (...)**, %struct.GrVkImageInfo, i32, %class.sk_sp.397, i8, %"class.GrVkImage::Resource"* }
%struct.GrVkImageInfo = type <{ %struct.VkImage_T*, %struct.GrVkAlloc, i32, i32, i32, i32, i32, i32, i32, i8, [3 x i8], %struct.GrVkYcbcrConversionInfo, i32, [4 x i8] }>
%struct.GrVkAlloc = type <{ %struct.VkDeviceMemory_T*, i64, i64, i32, [4 x i8], i64, i8, [7 x i8] }>
%class.sk_sp.397 = type { %class.GrBackendSurfaceMutableStateImpl* }
%class.GrBackendSurfaceMutableStateImpl = type { %class.SkRefCnt.base, %class.GrBackendSurfaceMutableState, [4 x i8] }
%class.GrBackendSurfaceMutableState = type <{ %union.anon.398, i32, i8, [3 x i8] }>
%union.anon.398 = type { %class.GrVkSharedImageInfo }
%class.GrVkSharedImageInfo = type { %"struct.std::__1::atomic.399", %"struct.std::__1::atomic.403" }
%"struct.std::__1::atomic.399" = type { %"struct.std::__1::__atomic_base.400" }
%"struct.std::__1::__atomic_base.400" = type { %"struct.std::__1::__cxx_atomic_impl.401" }
%"struct.std::__1::__cxx_atomic_impl.401" = type { %"struct.std::__1::__cxx_atomic_base_impl.402" }
%"struct.std::__1::__cxx_atomic_base_impl.402" = type { i32 }
%"struct.std::__1::atomic.403" = type { %"struct.std::__1::__atomic_base.404" }
%"struct.std::__1::__atomic_base.404" = type { %"struct.std::__1::__atomic_base.405" }
%"struct.std::__1::__atomic_base.405" = type { %"struct.std::__1::__cxx_atomic_impl.406" }
%"struct.std::__1::__cxx_atomic_impl.406" = type { %"struct.std::__1::__cxx_atomic_base_impl.407" }
%"struct.std::__1::__cxx_atomic_base_impl.407" = type { i32 }
%"class.GrVkImage::Resource" = type <{ %class.GrTextureResource, %class.GrVkGpu*, %struct.VkImage_T*, %struct.GrVkAlloc, i32, [4 x i8] }>
%class.GrTextureResource = type { %class.GrManagedResource.base, %class.sk_sp.347 }
%class.GrManagedResource.base = type <{ i32 (...)**, %"struct.std::__1::atomic" }>
%class.GrVkGpu = type { %class.GrGpu, %class.sk_sp.408, %class.sk_sp.409, %class.sk_sp.410, i8, %struct.VkPhysicalDevice_T*, %struct.VkDevice_T*, %struct.VkQueue_T*, i32, %class.GrVkResourceProvider, %class.GrStagingBufferManager, %class.GrVkMSAALoadManager, %class.GrVkCommandPool*, %class.GrVkPrimaryCommandBuffer*, %class.SkSTArray.474, %class.SkSTArray.474, %class.SkTArray.477, %struct.VkPhysicalDeviceProperties, %struct.VkPhysicalDeviceMemoryProperties, i8, i8, %"class.std::__1::unique_ptr.484" }
%class.sk_sp.408 = type { %struct.GrVkInterface* }
%class.sk_sp.409 = type { %class.GrVkMemoryAllocator* }
%class.GrVkMemoryAllocator = type { %class.SkRefCnt.base, [4 x i8] }
%class.sk_sp.410 = type { %class.GrVkCaps* }
%class.GrVkResourceProvider = type { %class.GrVkGpu*, %struct.VkPipelineCache_T*, %class.SkTArray.411, %class.SkSTArray.413, %class.SkTArray.419, %class.SkSTArray.420, %class.SkMutex, %class.SkSTArray.420, %class.SkTDynamicHash.423, %class.SkTDynamicHash.432, %class.sk_sp.441, %class.SkSTArray.450, %class.GrResourceHandle, %class.GrResourceHandle }
%class.SkTArray.411 = type { %"struct.GrVkResourceProvider::MSAALoadPipeline"*, i64 }
%"struct.GrVkResourceProvider::MSAALoadPipeline" = type { %class.sk_sp.412, %class.GrVkRenderPass* }
%class.sk_sp.412 = type { %class.GrVkPipeline* }
%class.GrVkPipeline = type opaque
%class.GrVkRenderPass = type <{ %class.GrVkManagedResource, %struct.VkRenderPass_T*, i32, %"struct.GrVkRenderPass::AttachmentsDescriptor", i32, i32, %struct.VkExtent2D, i32, i32, i32, [4 x i8] }>
%class.GrVkManagedResource = type { %class.GrManagedResource.base, %class.GrVkGpu* }
%"struct.GrVkRenderPass::AttachmentsDescriptor" = type { %"struct.GrVkRenderPass::AttachmentsDescriptor::AttachmentDesc", %"struct.GrVkRenderPass::AttachmentsDescriptor::AttachmentDesc", %"struct.GrVkRenderPass::AttachmentsDescriptor::AttachmentDesc", i32 }
%"struct.GrVkRenderPass::AttachmentsDescriptor::AttachmentDesc" = type { i32, i32, %"struct.GrVkRenderPass::LoadStoreOps" }
%"struct.GrVkRenderPass::LoadStoreOps" = type { i32, i32 }
%class.SkSTArray.413 = type { %class.SkAlignedSTStorage.414, %class.SkTArray.415 }
%class.SkAlignedSTStorage.414 = type { [224 x i8] }
%class.SkTArray.415 = type { %"class.GrVkResourceProvider::CompatibleRenderPassSet"*, i64 }
%"class.GrVkResourceProvider::CompatibleRenderPassSet" = type <{ %class.SkSTArray.416, i32, [4 x i8] }>
%class.SkSTArray.416 = type { %class.SkAlignedSTStorage.417, %class.SkTArray.418 }
%class.SkAlignedSTStorage.417 = type { [32 x i8] }
%class.SkTArray.418 = type { %class.GrVkRenderPass**, i64 }
%class.SkTArray.419 = type { %class.GrVkRenderPass**, i64 }
%class.SkSTArray.420 = type { %class.SkAlignedSTStorage.421, %class.SkTArray.422 }
%class.SkAlignedSTStorage.421 = type { [32 x i8] }
%class.SkTArray.422 = type { %class.GrVkCommandPool**, i64 }
%class.SkTDynamicHash.423 = type { %class.SkTHashTable.424 }
%class.SkTHashTable.424 = type { i32, i32, %class.SkAutoTArray.425 }
%class.SkAutoTArray.425 = type { %"class.std::__1::unique_ptr.426" }
%"class.std::__1::unique_ptr.426" = type { %"class.std::__1::__compressed_pair.427" }
%"class.std::__1::__compressed_pair.427" = type { %"struct.std::__1::__compressed_pair_elem.428" }
%"struct.std::__1::__compressed_pair_elem.428" = type { %"struct.SkTHashTable<GrVkSampler *, GrVkSampler::Key, SkTDynamicHash<GrVkSampler, GrVkSampler::Key, GrVkSampler>::AdaptedTraits>::Slot"* }
%"struct.SkTHashTable<GrVkSampler *, GrVkSampler::Key, SkTDynamicHash<GrVkSampler, GrVkSampler::Key, GrVkSampler>::AdaptedTraits>::Slot" = type opaque
%class.SkTDynamicHash.432 = type { %class.SkTHashTable.433 }
%class.SkTHashTable.433 = type { i32, i32, %class.SkAutoTArray.434 }
%class.SkAutoTArray.434 = type { %"class.std::__1::unique_ptr.435" }
%"class.std::__1::unique_ptr.435" = type { %"class.std::__1::__compressed_pair.436" }
%"class.std::__1::__compressed_pair.436" = type { %"struct.std::__1::__compressed_pair_elem.437" }
%"struct.std::__1::__compressed_pair_elem.437" = type { %"struct.SkTHashTable<GrVkSamplerYcbcrConversion *, GrVkSamplerYcbcrConversion::Key, SkTDynamicHash<GrVkSamplerYcbcrConversion, GrVkSamplerYcbcrConversion::Key, GrVkSamplerYcbcrConversion>::AdaptedTraits>::Slot"* }
%"struct.SkTHashTable<GrVkSamplerYcbcrConversion *, GrVkSamplerYcbcrConversion::Key, SkTDynamicHash<GrVkSamplerYcbcrConversion, GrVkSamplerYcbcrConversion::Key, GrVkSamplerYcbcrConversion>::AdaptedTraits>::Slot" = type opaque
%class.sk_sp.441 = type { %"class.GrVkResourceProvider::PipelineStateCache"* }
%"class.GrVkResourceProvider::PipelineStateCache" = type { %class.GrThreadSafePipelineBuilder.base, %class.SkLRUCache, %class.GrVkGpu* }
%class.GrThreadSafePipelineBuilder.base = type { %class.SkRefCnt.base, %"class.GrThreadSafePipelineBuilder::Stats" }
%"class.GrThreadSafePipelineBuilder::Stats" = type { i8 }
%class.SkLRUCache = type { i32, %class.SkTHashTable.442, %class.SkTInternalLList }
%class.SkTHashTable.442 = type { i32, i32, %class.SkAutoTArray.443 }
%class.SkAutoTArray.443 = type { %"class.std::__1::unique_ptr.444" }
%"class.std::__1::unique_ptr.444" = type { %"class.std::__1::__compressed_pair.445" }
%"class.std::__1::__compressed_pair.445" = type { %"struct.std::__1::__compressed_pair_elem.446" }
%"struct.std::__1::__compressed_pair_elem.446" = type { %"struct.SkTHashTable<SkLRUCache<const GrProgramDesc, std::__1::unique_ptr<GrVkResourceProvider::PipelineStateCache::Entry, std::__1::default_delete<GrVkResourceProvider::PipelineStateCache::Entry> >, GrVkResourceProvider::PipelineStateCache::DescHash>::Entry *, const GrProgramDesc, SkLRUCache<const GrProgramDesc, std::__1::unique_ptr<GrVkResourceProvider::PipelineStateCache::Entry, std::__1::default_delete<GrVkResourceProvider::PipelineStateCache::Entry> >, GrVkResourceProvider::PipelineStateCache::DescHash>::Traits>::Slot"* }
%"struct.SkTHashTable<SkLRUCache<const GrProgramDesc, std::__1::unique_ptr<GrVkResourceProvider::PipelineStateCache::Entry, std::__1::default_delete<GrVkResourceProvider::PipelineStateCache::Entry> >, GrVkResourceProvider::PipelineStateCache::DescHash>::Entry *, const GrProgramDesc, SkLRUCache<const GrProgramDesc, std::__1::unique_ptr<GrVkResourceProvider::PipelineStateCache::Entry, std::__1::default_delete<GrVkResourceProvider::PipelineStateCache::Entry> >, GrVkResourceProvider::PipelineStateCache::DescHash>::Traits>::Slot" = type opaque
%class.SkTInternalLList = type { %"struct.SkLRUCache<const GrProgramDesc, std::__1::unique_ptr<GrVkResourceProvider::PipelineStateCache::Entry, std::__1::default_delete<GrVkResourceProvider::PipelineStateCache::Entry> >, GrVkResourceProvider::PipelineStateCache::DescHash>::Entry"*, %"struct.SkLRUCache<const GrProgramDesc, std::__1::unique_ptr<GrVkResourceProvider::PipelineStateCache::Entry, std::__1::default_delete<GrVkResourceProvider::PipelineStateCache::Entry> >, GrVkResourceProvider::PipelineStateCache::DescHash>::Entry"* }
%"struct.SkLRUCache<const GrProgramDesc, std::__1::unique_ptr<GrVkResourceProvider::PipelineStateCache::Entry, std::__1::default_delete<GrVkResourceProvider::PipelineStateCache::Entry> >, GrVkResourceProvider::PipelineStateCache::DescHash>::Entry" = type opaque
%class.SkSTArray.450 = type { %class.SkAlignedSTStorage.451, %class.SkTArray.452 }
%class.SkAlignedSTStorage.451 = type { [32 x i8] }
%class.SkTArray.452 = type { %"class.std::__1::unique_ptr.453"*, i64 }
%"class.std::__1::unique_ptr.453" = type { %"class.std::__1::__compressed_pair.454" }
%"class.std::__1::__compressed_pair.454" = type { %"struct.std::__1::__compressed_pair_elem.455" }
%"struct.std::__1::__compressed_pair_elem.455" = type { %class.GrVkDescriptorSetManager* }
%class.GrVkDescriptorSetManager = type { %"struct.GrVkDescriptorSetManager::DescriptorPoolManager", %class.SkTArray.456, %class.SkSTArray.457, %class.SkSTArray.460 }
%"struct.GrVkDescriptorSetManager::DescriptorPoolManager" = type { %struct.VkDescriptorSetLayout_T*, i32, i32, i32, i32, %class.GrVkDescriptorPool* }
%class.GrVkDescriptorPool = type { %class.GrVkManagedResource, i32, i32, %struct.VkDescriptorPool_T* }
%class.SkTArray.456 = type { %class.GrVkDescriptorSet**, i64 }
%class.GrVkDescriptorSet = type <{ %class.GrVkRecycledResource, %struct.VkDescriptorSet_T*, %class.GrVkDescriptorPool*, %class.GrResourceHandle, [4 x i8] }>
%class.GrVkRecycledResource = type { %class.GrRecycledResource.base, %class.GrVkGpu* }
%class.GrRecycledResource.base = type { %class.GrManagedResource.base }
%class.SkSTArray.457 = type { %class.SkAlignedSTStorage.458, %class.SkTArray.459 }
%class.SkAlignedSTStorage.458 = type { [16 x i8] }
%class.SkTArray.459 = type { i32*, i64 }
%class.SkSTArray.460 = type { %class.SkAlignedSTStorage.461, %class.SkTArray.462 }
%class.SkAlignedSTStorage.461 = type { [32 x i8] }
%class.SkTArray.462 = type { %class.GrVkSampler**, i64 }
%class.GrVkSampler = type <{ %class.GrVkManagedResource, %struct.VkSampler_T*, %class.GrVkSamplerYcbcrConversion*, %"struct.GrVkSampler::Key", i32, [4 x i8] }>
%class.GrVkSamplerYcbcrConversion = type { %class.GrVkManagedResource, %struct.VkSamplerYcbcrConversion_T*, %"struct.GrVkSamplerYcbcrConversion::Key" }
%"struct.GrVkSamplerYcbcrConversion::Key" = type <{ i32, [4 x i8], i64, i8, [7 x i8] }>
%"struct.GrVkSampler::Key" = type { i8, [7 x i8], %"struct.GrVkSamplerYcbcrConversion::Key" }
%class.GrResourceHandle = type { i32 }
%class.GrStagingBufferManager = type { %"class.std::__1::vector.466", %class.GrGpu* }
%"class.std::__1::vector.466" = type { %"class.std::__1::__vector_base.467" }
%"class.std::__1::__vector_base.467" = type { %"struct.GrStagingBufferManager::StagingBuffer"*, %"struct.GrStagingBufferManager::StagingBuffer"*, %"class.std::__1::__compressed_pair.469" }
%"struct.GrStagingBufferManager::StagingBuffer" = type { %class.sk_sp.468, i8*, i64 }
%class.sk_sp.468 = type { %class.GrGpuBuffer* }
%"class.std::__1::__compressed_pair.469" = type { %"struct.std::__1::__compressed_pair_elem.470" }
%"struct.std::__1::__compressed_pair_elem.470" = type { %"struct.GrStagingBufferManager::StagingBuffer"* }
%class.GrVkMSAALoadManager = type { %struct.VkShaderModule_T*, %struct.VkShaderModule_T*, [2 x %struct.VkPipelineShaderStageCreateInfo], %struct.VkPipelineLayout_T* }
%class.GrVkCommandPool = type opaque
%class.GrVkPrimaryCommandBuffer = type opaque
%class.SkSTArray.474 = type { %class.SkAlignedSTStorage.475, %class.SkTArray.476 }
%class.SkAlignedSTStorage.475 = type { [8 x i8] }
%class.SkTArray.476 = type { %"class.GrVkSemaphore::Resource"**, i64 }
%"class.GrVkSemaphore::Resource" = type <{ %class.GrVkManagedResource, %struct.VkSemaphore_T*, i8, i8, i8, [5 x i8] }>
%class.SkTArray.477 = type { %"class.std::__1::unique_ptr.478"*, i64 }
%"class.std::__1::unique_ptr.478" = type { %"class.std::__1::__compressed_pair.479" }
%"class.std::__1::__compressed_pair.479" = type { %"struct.std::__1::__compressed_pair_elem.480" }
%"struct.std::__1::__compressed_pair_elem.480" = type { %"class.SkDrawable::GpuDrawHandler"* }
%"class.SkDrawable::GpuDrawHandler" = type { i32 (...)** }
%"class.std::__1::unique_ptr.484" = type { %"class.std::__1::__compressed_pair.485" }
%"class.std::__1::__compressed_pair.485" = type { %"struct.std::__1::__compressed_pair_elem.486" }
%"struct.std::__1::__compressed_pair_elem.486" = type { %class.GrVkOpsRenderPass* }
%class.GrVkOpsRenderPass = type opaque
%class.sk_sp.490 = type { %class.GrVkImageView* }
%class.GrVkImageView = type opaque
%class.gr_sp = type { %class.GrVkDescriptorSet* }
%class.GrRenderTarget = type <{ i32 (...)**, %class.sk_sp.501, %class.sk_sp.501, i32, [4 x i8], %class.GrSurface }>
%class.sk_sp.501 = type { %class.GrAttachment* }
%class.GrAttachment = type <{ %class.GrSurface, i8, [3 x i8], i32, i8, i8, [6 x i8] }>
%class.GrProcessorKeyBuilder = type { i32 (...)**, %class.SkTArray.502*, i32, i32 }
%class.SkTArray.502 = type { i32*, i64 }
%class.GrProgramDesc = type <{ %class.SkSTArray.523, i32, [4 x i8] }>
%class.SkSTArray.523 = type { %class.SkAlignedSTStorage.524, %class.SkTArray.502 }
%class.SkAlignedSTStorage.524 = type { [132 x i8] }
%class.GrProgramInfo = type { i32, i8, %class.GrBackendFormat, i32, i8, %class.GrPipeline*, %struct.GrUserStencilSettings*, %class.GrGeometryProcessor*, i32, i8, i8, i32, i32 }
%class.GrPipeline = type <{ %class.GrSurfaceProxyView, %struct.SkIPoint, i32, [4 x i8], %class.GrWindowRectsState, i8, [7 x i8], %class.sk_sp.505, %class.SkAutoSTArray, i32, %class.GrSwizzle, [2 x i8] }>
%class.GrSurfaceProxyView = type <{ %class.sk_sp.503, i32, %class.GrSwizzle, [2 x i8] }>
%class.sk_sp.503 = type { %class.GrSurfaceProxy* }
%class.GrWindowRectsState = type { i8, %class.GrWindowRectangles }
%class.GrWindowRectangles = type { i32, %union.anon.504 }
%union.anon.504 = type { %"struct.GrWindowRectangles::Rec"*, [8 x i8] }
%"struct.GrWindowRectangles::Rec" = type { %class.GrNonAtomicRef, [8 x %struct.SkIRect] }
%class.GrNonAtomicRef = type { i32 }
%class.sk_sp.505 = type { %class.GrXferProcessor* }
%class.GrXferProcessor = type <{ %class.GrProcessor, %class.GrNonAtomicRef.506, i8, i8, [2 x i8] }>
%class.GrProcessor = type { i32 (...)**, i32, i32 }
%class.GrNonAtomicRef.506 = type { i32 }
%class.SkAutoSTArray = type { i32, %"class.std::__1::unique_ptr.507"*, [24 x i8] }
%"class.std::__1::unique_ptr.507" = type { %"class.std::__1::__compressed_pair.508" }
%"class.std::__1::__compressed_pair.508" = type { %"struct.std::__1::__compressed_pair_elem.509" }
%"struct.std::__1::__compressed_pair_elem.509" = type { %class.GrFragmentProcessor* }
%class.GrFragmentProcessor = type <{ %class.GrProcessor, %class.SkSTArray.510, %class.GrFragmentProcessor*, i32, %"struct.SkSL::SampleUsage", [4 x i8] }>
%class.SkSTArray.510 = type { %class.SkAlignedSTStorage.511, %class.SkTArray.512 }
%class.SkAlignedSTStorage.511 = type { [8 x i8] }
%class.SkTArray.512 = type { %"class.std::__1::unique_ptr.513"*, i64 }
%"class.std::__1::unique_ptr.513" = type { %"class.std::__1::__compressed_pair.514" }
%"class.std::__1::__compressed_pair.514" = type { %"struct.std::__1::__compressed_pair_elem.515" }
%"struct.std::__1::__compressed_pair_elem.515" = type { %class.GrFragmentProcessor* }
%"struct.SkSL::SampleUsage" = type <{ i32, i8, [3 x i8] }>
%class.GrGeometryProcessor = type <{ %class.GrProcessor, %class.GrNonAtomicRef.522, i32, %"class.GrGeometryProcessor::AttributeSet", %"class.GrGeometryProcessor::AttributeSet", i32, [4 x i8] }>
%class.GrNonAtomicRef.522 = type { i32 }
%"class.GrGeometryProcessor::AttributeSet" = type { %"class.GrGeometryProcessor::Attribute"*, i32, i32, i64 }
%"class.GrGeometryProcessor::Attribute" = type { i8*, i32, i32 }
%class.GrStencilSettings = type { i32, %"struct.GrStencilSettings::Face", %"struct.GrStencilSettings::Face" }
%"struct.GrStencilSettings::Face" = type { %struct.GrTStencilFaceSettings.527 }
%struct.GrTStencilFaceSettings.527 = type { i16, i16, i16, i8, i8, i16 }
%class.GrVkRenderTarget = type { %class.GrRenderTarget.base, %class.sk_sp.396, %class.sk_sp.396, %class.sk_sp.396, [32 x %class.sk_sp.525], %class.GrVkDescriptorSet*, %class.sk_sp.526, %class.GrSurface }
%class.GrRenderTarget.base = type <{ i32 (...)**, %class.sk_sp.501, %class.sk_sp.501, i32 }>
%class.sk_sp.396 = type { %class.GrVkAttachment* }
%class.sk_sp.525 = type { %class.GrVkFramebuffer* }
%class.GrVkFramebuffer = type opaque
%class.sk_sp.526 = type { %class.GrVkFramebuffer* }
%class.SkJSONWriter = type opaque
%class.GrBackendRenderTarget = type { i8, i8, i32, i32, i32, i32, i32, %union.anon.528, %class.sk_sp.397 }
%union.anon.528 = type { %struct.GrGLFramebufferInfo, [136 x i8] }
%struct.GrGLFramebufferInfo = type { i32, i32 }

$_ZN8GrVkCaps10FormatInfoD2Ev = comdat any

$_ZN9GrSwizzleC2EPKc = comdat any

$_ZN21GrProcessorKeyBuilderD2Ev = comdat any

$_ZN8GrVkCapsD2Ev = comdat any

$_ZN8GrVkCapsD0Ev = comdat any

$_ZNK12SkRefCntBase16internal_disposeEv = comdat any

$_ZNK8GrVkCaps16isFormatCopyableERK15GrBackendFormat = comdat any

$_ZNK6GrCaps22getDstCopyRestrictionsEPK19GrRenderTargetProxy11GrColorType = comdat any

$_ZNK6GrCaps21onSupportsDynamicMSAAEPK19GrRenderTargetProxy = comdat any

$_ZN6GrCaps23onApplyOptionsOverridesERK16GrContextOptions = comdat any

$_ZNK6GrCaps10onDumpJSONEP12SkJSONWriter = comdat any

$_ZNK6GrCaps34onIsWindowRectanglesSupportedForRTERK21GrBackendRenderTarget = comdat any

$_ZN21GrProcessorKeyBuilderD0Ev = comdat any

$_ZN21GrProcessorKeyBuilder7addBitsEjjPKc = comdat any

$_ZN21GrProcessorKeyBuilder13appendCommentEPKc = comdat any

$_ZN8SkTArrayIjLb1EE12checkReallocEiNS0_11ReallocTypeE = comdat any

$_ZN6GrCapsD2Ev = comdat any

$_ZN6GrCapsD0Ev = comdat any

$_ZNK6GrCaps18addExtraSamplerKeyEP21GrProcessorKeyBuilder14GrSamplerStateRK15GrBackendFormat = comdat any

$_ZNK6GrCaps33getExtraSurfaceFlagsForDeferredRTEv = comdat any

$_ZNK6GrCaps26onGetDstSampleTypeForProxyEPK19GrRenderTargetProxy = comdat any

$_ZN8SkTArrayI23GrVkYcbcrConversionInfoLb0EE12checkReallocEiNS1_11ReallocTypeE = comdat any

$_ZTV21GrProcessorKeyBuilder = comdat any

$_ZTV6GrCaps = comdat any

@_ZTV8GrVkCaps = hidden unnamed_addr constant { [32 x i8*] } { [32 x i8*] [i8* null, i8* null, i8* bitcast (void (%class.GrVkCaps*)* @_ZN8GrVkCapsD2Ev to i8*), i8* bitcast (void (%class.GrVkCaps*)* @_ZN8GrVkCapsD0Ev to i8*), i8* bitcast (void (%class.SkRefCntBase*)* @_ZNK12SkRefCntBase16internal_disposeEv to i8*), i8* bitcast (i1 (%class.GrVkCaps*, %class.GrBackendFormat*)* @_ZNK8GrVkCaps12isFormatSRGBERK15GrBackendFormat to i8*), i8* bitcast (i1 (%class.GrVkCaps*, %class.GrBackendFormat*)* @_ZNK8GrVkCaps18isFormatTexturableERK15GrBackendFormat to i8*), i8* bitcast (i1 (%class.GrVkCaps*, %class.GrBackendFormat*)* @_ZNK8GrVkCaps16isFormatCopyableERK15GrBackendFormat to i8*), i8* bitcast (i32 (%class.GrVkCaps*, %class.GrBackendFormat*)* @_ZNK8GrVkCaps26maxRenderTargetSampleCountERK15GrBackendFormat to i8*), i8* bitcast (i1 (%class.GrVkCaps*, i32, %class.GrBackendFormat*, i32)* @_ZNK8GrVkCaps29isFormatAsColorTypeRenderableE11GrColorTypeRK15GrBackendFormati to i8*), i8* bitcast (i1 (%class.GrVkCaps*, %class.GrBackendFormat*, i32)* @_ZNK8GrVkCaps18isFormatRenderableERK15GrBackendFormati to i8*), i8* bitcast (i32 (%class.GrVkCaps*, i32, %class.GrBackendFormat*)* @_ZNK8GrVkCaps26getRenderTargetSampleCountEiRK15GrBackendFormat to i8*), i8* bitcast (i32 (%class.GrVkCaps*, %class.GrSurface*)* @_ZNK8GrVkCaps25surfaceSupportsReadPixelsEPK9GrSurface to i8*), i8* bitcast ({ i32, i64 } (%class.GrVkCaps*, i32, %class.GrBackendFormat*, i32)* @_ZNK8GrVkCaps29supportedWritePixelsColorTypeE11GrColorTypeRK15GrBackendFormatS0_ to i8*), i8* bitcast (i16 (%class.GrCaps*, %class.GrRenderTargetProxy*, i32)* @_ZNK6GrCaps22getDstCopyRestrictionsEPK19GrRenderTargetProxy11GrColorType to i8*), i8* bitcast (void (%class.GrBackendFormat*, %class.GrVkCaps*, i32)* @_ZNK8GrVkCaps35getBackendFormatFromCompressionTypeEN7SkImage15CompressionTypeE to i8*), i8* bitcast (void (%class.GrSwizzle*, %class.GrVkCaps*, %class.GrBackendFormat*, i32)* @_ZNK8GrVkCaps15getWriteSwizzleERK15GrBackendFormat11GrColorType to i8*), i8* bitcast (i64 (%class.GrVkCaps*, %class.GrBackendFormat*)* @_ZNK8GrVkCaps16computeFormatKeyERK15GrBackendFormat to i8*), i8* bitcast (void (%class.GrVkCaps*, %class.GrProcessorKeyBuilder*, i64, i32, %class.GrBackendFormat*)* @_ZNK8GrVkCaps18addExtraSamplerKeyEP21GrProcessorKeyBuilder14GrSamplerStateRK15GrBackendFormat to i8*), i8* bitcast (void (%class.GrProgramDesc*, %class.GrVkCaps*, %class.GrRenderTarget*, %class.GrProgramInfo*, i32)* @_ZNK8GrVkCaps8makeDescEP14GrRenderTargetRK13GrProgramInfoN6GrCaps24ProgramDescOverrideFlagsE to i8*), i8* bitcast (i32 (%class.GrVkCaps*)* @_ZNK8GrVkCaps33getExtraSurfaceFlagsForDeferredRTEv to i8*), i8* bitcast (i1 (%class.GrCaps*, %class.GrRenderTargetProxy*)* @_ZNK6GrCaps21onSupportsDynamicMSAAEPK19GrRenderTargetProxy to i8*), i8* bitcast (void (%class.GrCaps*, %struct.GrContextOptions*)* @_ZN6GrCaps23onApplyOptionsOverridesERK16GrContextOptions to i8*), i8* bitcast (void (%class.GrCaps*, %class.SkJSONWriter*)* @_ZNK6GrCaps10onDumpJSONEP12SkJSONWriter to i8*), i8* bitcast (i1 (%class.GrVkCaps*, %class.GrSurface*)* @_ZNK8GrVkCaps28onSurfaceSupportsWritePixelsEPK9GrSurface to i8*), i8* bitcast (i1 (%class.GrVkCaps*, %class.GrSurfaceProxy*, %class.GrSurfaceProxy*, %struct.SkIRect*, %struct.SkIPoint*)* @_ZNK8GrVkCaps16onCanCopySurfaceEPK14GrSurfaceProxyS2_RK7SkIRectRK8SkIPoint to i8*), i8* bitcast (void (%class.GrBackendFormat*, %class.GrVkCaps*, i32)* @_ZNK8GrVkCaps25onGetDefaultBackendFormatE11GrColorType to i8*), i8* bitcast (i1 (%class.GrCaps*, %class.GrBackendRenderTarget*)* @_ZNK6GrCaps34onIsWindowRectanglesSupportedForRTERK21GrBackendRenderTarget to i8*), i8* bitcast (i1 (%class.GrVkCaps*, i32, %class.GrBackendFormat*)* @_ZNK8GrVkCaps33onAreColorTypeAndFormatCompatibleE11GrColorTypeRK15GrBackendFormat to i8*), i8* bitcast ({ i32, i64 } (%class.GrVkCaps*, i32, %class.GrBackendFormat*, i32)* @_ZNK8GrVkCaps30onSupportedReadPixelsColorTypeE11GrColorTypeRK15GrBackendFormatS0_ to i8*), i8* bitcast (void (%class.GrSwizzle*, %class.GrVkCaps*, %class.GrBackendFormat*, i32)* @_ZNK8GrVkCaps16onGetReadSwizzleERK15GrBackendFormat11GrColorType to i8*), i8* bitcast (i32 (%class.GrVkCaps*, %class.GrRenderTargetProxy*)* @_ZNK8GrVkCaps26onGetDstSampleTypeForProxyEPK19GrRenderTargetProxy to i8*)] }, align 8
@__const._ZN8GrVkCaps4initERK16GrContextOptionsPK13GrVkInterfaceP18VkPhysicalDevice_TRK25VkPhysicalDeviceFeatures2jRK14GrVkExtensions11GrProtected.properties = private unnamed_addr constant { i32, i32, i32, i32, i32, [256 x i8], [16 x i8], [4 x i8], { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, [4 x i8], i64, i64, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, [3 x i32], i32, [3 x i32], i32, i32, i32, i32, i32, float, float, i32, [2 x i32], [2 x float], i32, [4 x i8], i64, i64, i64, i64, i32, i32, i32, i32, float, float, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, float, i32, i32, i32, i32, [2 x float], [2 x float], float, float, i32, i32, [4 x i8], i64, i64, i64 }, %struct.VkPhysicalDeviceSparseProperties, [4 x i8] } { i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, [256 x i8] cx i8] c"\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA", [4 x i8] c"\AA\AA\AA\AA", { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, [4 x i8], i64, i64, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, [3 x i32], i32, [3 x i32], i32, i32, i32, i32, i32, float, float, i32, [2 x i32], [2 x float], i32, [4 x i8], i64, i64, i64, i64, i32, i32, i32, i32, float, float, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, float, i32, i32, i32, i32, [2 x float], [2 x float], float, float, i32, i32, [4 x i8], i64, i64, i64 } { i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, [4 x i8] c"\AA\AA\AA\AA", i64 -6148914691236517206, i64 -6148914691236517206, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, [3 x i32] [i32 -1431655766, i32 -1431655766, i32 -1431655766], i32 -1431655766, [3 x i32] [i32 -1431655766, i32 -1431655766, i32 -1431655766], i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, i32 -1431655766, [2 x i32] [i32 -1431655766, i32 -1431655766], [2 x float] [float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000], i32 -1431655766, [4 x i8] c"\AA\AA\AA\AA", i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, float 0xFFFFFFFFE0000000, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, [2 x float] [float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000], [2 x float] [float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000], float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, i32 -1431655766, i32 -1431655766, [4 x i8] c"\AA\AA\AA\AA", i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206 }, %struct.VkPhysicalDeviceSparseProperties { i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766 }, [4 x i8] c"\AA\AA\AA\AA" }, align 8
@.str = private unnamed_addr constant [17 x i8] c"VK_KHR_swapchain\00", align 1
@.str.1 = private unnamed_addr constant [39 x i8] c"VK_KHR_get_physical_device_properties2\00", align 1
@.str.2 = private unnamed_addr constant [32 x i8] c"VK_KHR_get_memory_requirements2\00", align 1
@.str.3 = private unnamed_addr constant [20 x i8] c"VK_KHR_bind_memory2\00", align 1
@.str.4 = private unnamed_addr constant [20 x i8] c"VK_KHR_maintenance1\00", align 1
@.str.5 = private unnamed_addr constant [20 x i8] c"VK_KHR_maintenance2\00", align 1
@.str.6 = private unnamed_addr constant [20 x i8] c"VK_KHR_maintenance3\00", align 1
@.str.7 = private unnamed_addr constant [28 x i8] c"VK_KHR_dedicated_allocation\00", align 1
@.str.8 = private unnamed_addr constant [36 x i8] c"VK_KHR_external_memory_capabilities\00", align 1
@.str.9 = private unnamed_addr constant [23 x i8] c"VK_KHR_external_memory\00", align 1
@.str.10 = private unnamed_addr constant [32 x i8] c"VK_KHR_sampler_ycbcr_conversion\00", align 1
@.str.11 = private unnamed_addr constant [12 x i8] c"SwiftShader\00", align 1
@.str.12 = private unnamed_addr constant [34 x i8] c"VK_EXT_conservative_rasterization\00", align 1
@.str.13 = private unnamed_addr constant [32 x i8] c"VK_EXT_blend_operation_advanced\00", align 1
@__const._ZN8GrVkCaps10initGrCapsEPK13GrVkInterfaceP18VkPhysicalDevice_TRK26VkPhysicalDevicePropertiesRK32VkPhysicalDeviceMemoryPropertiesRK25VkPhysicalDeviceFeatures2RK14GrVkExtensions.props = private unnamed_addr constant { i32, [4 x i8], i8*, { i32, i32, i32, i32, i32, [256 x i8], [16 x i8], [4 x i8], { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, [4 x i8], i64, i64, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, [3 x i32], i32, [3 x i32], i32, i32, i32, i32, i32, float, float, i32, [2 x i32], [2 x float], i32, [4 x i8], i64, i64, i64, i64, i32, i32, i32, i32, float, float, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, float, i32, i32, i32, i32, [2 x float], [2 x float], float, float, i32, i32, [4 x i8], i64, i64, i64 }, %struct.VkPhysicalDeviceSparseProperties, [4 x i8] } } { i32 -1431655766, [4 x i8] c"\AA\AA\AA\AA", i8* inttoptr (i64 -6148914691236517206 to i8*), { i32, i32, i32, i32, i32, [256 x i8], [16 x i8], [4 x i8], { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, [4 x i8], i64, i64, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, [3 x i32], i32, [3 x i32], i32, i32, i32, i32, i32, float, float, i32, [2 x i32], [2 x float], i32, [4 x i8], i64, i64, i64, i64, i32, i32, i32, i32, float, float, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, float, i32, i32, i32, i32, [2 x float], [2 x float], float, float, i32, i32, [4 x i8], i64, i64, i64 }, %struct.VkPhysicalDeviceSparseProperties, [4 x i8] } { i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, [256 x i8] c"\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA", [16 x i8] c"\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA", [4 x i8] c"\AA\AA\AA\AA", { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, [4 x i8], i64, i64, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, [3 x i32], i32, [3 x i32], i32, i32, i32, i32, i32, float, float, i32, [2 x i32], [2 x float], i32, [4 x i8], i64, i64, i64, i64, i32, i32, i32, i32, float, float, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, float, i32, i32, i32, i32, [2 x float], [2 x float], float, float, i32, i32, [4 x i8], i64, i64, i64 } { i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, [4 x i8] c"\AA\AA\AA\AA", i64 -6148914691236517206, i64 -6148914691236517206, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, [3 x i32] [i32 -1431655766, i32 -1431655766, i32 -1431655766], i32 -1431655766, [3 x i32] [i32 -1431655766, i32 -1431655766, i32 -1431655766], i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, i32 -1431655766, [2 x i32] [i32 -1431655766, i32 -1431655766], [2 x float] [float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000], i32 -1431655766, [4 x i8] c"\AA\AA\AA\AA", i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, float 0xFFFFFFFFE0000000, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, [2 x float] [float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000], [2 x float] [float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000], float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, i32 -1431655766, i32 -1431655766, [4 x i8] c"\AA\AA\AA\AA", i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206 }, %struct.VkPhysicalDeviceSparseProperties { i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766 }, [4 x i8] c"\AA\AA\AA\AA" } }, align 8
@.str.14 = private unnamed_addr constant [14 x i8] c"#version 330\0A\00", align 1
@_ZZN8GrVkCaps13getFormatInfoE8VkFormatE14kInvalidFormat = internal global %"struct.GrVkCaps::FormatInfo" zeroinitializer, align 8
@_ZGVZN8GrVkCaps13getFormatInfoE8VkFormatE14kInvalidFormat = internal global i64 0, align 8
@__dso_handle = external hidden global i8
@.str.15 = private unnamed_addr constant [5 x i8] c"000r\00", align 1
@.str.16 = private unnamed_addr constant [5 x i8] c"a000\00", align 1
@.str.17 = private unnamed_addr constant [5 x i8] c"rrr1\00", align 1
@.ref.tmp.19 = private unnamed_addr constant [2 x i32] [i32 2, i32 3], align 4
@.ref.tmp.22 = private unnamed_addr constant [2 x i32] [i32 23, i32 37], align 4
@.str.35 = private unnamed_addr constant [5 x i8] c"rgba\00", align 1
@.str.36 = private unnamed_addr constant [8 x i8] c"unknown\00", align 1
@.str.37 = private unnamed_addr constant [47 x i8] c"../../third_party/skia/src/gpu/vk/GrVkCaps.cpp\00", align 1
@.str.38 = private unnamed_addr constant [21 x i8] c"Unsupported VkFormat\00", align 1
@.str.39 = private unnamed_addr constant [5 x i8] c"rgb1\00", align 1
@.str.40 = private unnamed_addr constant [5 x i8] c"bgra\00", align 1
@_ZTV21GrProcessorKeyBuilder = linkonce_odr hidden unnamed_addr constant { [6 x i8*] } { [6 x i8*] [i8* null, i8* null, i8* bitcast (void (%class.GrProcessorKeyBuilder*)* @_ZN21GrProcessorKeyBuilderD2Ev to i8*), i8* bitcast (void (%class.GrProcessorKeyBuilder*)* @_ZN21GrProcessorKeyBuilderD0Ev to i8*), i8* bitcast (void (%class.GrProcessorKeyBuilder*, i32, i32, i8*)* @_ZN21GrProcessorKeyBuilder7addBitsEjjPKc to i8*), i8* bitcast (void (%class.GrProcessorKeyBuilder*, i8*)* @_ZN21GrProcessorKeyBuilder13appendCommentEPKc to i8*)] }, comdat, align 8
@_ZN21GrUserStencilSettings7kUnusedE = external local_unnamed_addr constant %struct.GrUserStencilSettings*, align 8
@_ZTV6GrCaps = linkonce_odr hidden unnamed_addr constant { [32 x i8*] } { [32 x i8*] [i8* null, i8* null, i8* bitcast (void (%class.GrCaps*)* @_ZN6GrCapsD2Ev to i8*), i8* bitcast (void (%class.GrCaps*)* @_ZN6GrCapsD0Ev to i8*), i8* bitcast (void (%class.SkRefCntBase*)* @_ZNK12SkRefCntBase16internal_disposeEv to i8*), i8* bitcast (void ()* @__cxa_pure_virtual to i8*), i8* bitcast (void ()* @__cxa_pure_virtual to i8*), i8* bitcast (void ()* @__cxa_pure_virtual to i8*), i8* bitcast (void ()* @__cxa_pure_virtual to i8*), i8* bitcast (void ()* @__cxa_pure_virtual to i8*), i8* bitcast (void ()* @__cxa_pure_virtual to i8*), i8* bitcast (void ()* @__cxa_pure_virtual to i8*), i8* bitcast (void ()* @__cxa_pure_virtual to i8*), i8* bitcast (void ()* @__cxa_pure_virtual to i8*), i8* bitcast (i16 (%class.GrCaps*, %class.GrRenderTargetProxy*, i32)* @_ZNK6GrCaps22getDstCopyRestrictionsEPK19GrRenderTargetProxy11GrColorType to i8*), i8* bitcast (void ()* @__cxa_pure_virtual to i8*), i8* bitcast (void ()* @__cxa_pure_virtual to i8*), i8* bitcast (void ()* @__cxa_pure_virtual to i8*), i8* bitcast (void (%class.GrCaps*, %class.GrProcessorKeyBuilder*, i64, i32, %class.GrBackendFormat*)* @_ZNK6GrCaps18addExtraSamplerKeyEP21GrProcessorKeyBuilder14GrSamplerStateRK15GrBackendFormat to i8*), i8* bitcast (void ()* @__cxa_pure_virtual to i8*), i8* bitcast (i32 (%class.GrCaps*)* @_ZNK6GrCaps33getExtraSurfaceFlagsForDeferredRTEv to i8*), i8* bitcast (i1 (%class.GrCaps*, %class.GrRenderTargetProxy*)* @_ZNK6GrCaps21onSupportsDynamicMSAAEPK19GrRenderTargetProxy to i8*), i8* bitcast (void (%class.GrCaps*, %struct.GrContextOptions*)* @_ZN6GrCaps23onApplyOptionsOverridesERK16GrContextOptions to i8*), i8* bitcast (void (%class.GrCaps*, %class.SkJSONWriter*)* @_ZNK6GrCaps10onDumpJSONEP12SkJSONWriter to i8*), i8* bitcast (void ()* @__cxa_pure_virtual to i8*), i8* bitcast (void ()* @__cxa_pure_virtual to i8*), i8* bitcast (void ()* @__cxa_pure_virtual to i8*), i8* bitcast (i1 (%class.GrCaps*, %class.GrBackendRenderTarget*)* @_ZNK6GrCaps34onIsWindowRectanglesSupportedForRTERK21GrBackendRenderTarget to i8*), i8* bitcast (void ()* @__cxa_pure_virtual to i8*), i8* bitcast (void ()* @__cxa_pure_virtual to i8*), i8* bitcast (void ()* @__cxa_pure_virtual to i8*), i8* bitcast (i32 (%class.GrCaps*, %class.GrRenderTargetProxy*)* @_ZNK6GrCaps26onGetDstSampleTypeForProxyEPK19GrRenderTargetProxy to i8*)] }, comdat, align 8
@.str.41 = private unnamed_addr constant [51 x i8] c"../../third_party/skia/include/private/SkTDArray.h\00", align 1
@.str.42 = private unnamed_addr constant [11 x i8] c"assert(%s)\00", align 1
@.str.43 = private unnamed_addr constant [22 x i8] c"SkTFitsIn<int>(count)\00", align 1
@.str.44 = private unnamed_addr constant [24 x i8] c"SkTFitsIn<int>(reserve)\00", align 1

@_ZN8GrVkCapsC1ERK16GrContextOptionsPK13GrVkInterfaceP18VkPhysicalDevice_TRK25VkPhysicalDeviceFeatures2jjRK14GrVkExtensions11GrProtected = hidden unnamed_addr alias void (%class.GrVkCaps*, %struct.GrContextOptions*, %struct.GrVkInterface*, %struct.VkPhysicalDevice_T*, %struct.VkPhysicalDeviceFeatures2*, i32, i32, %class.GrVkExtensions*, i1), void (%class.GrVkCaps*, %struct.GrContextOptions*, %struct.GrVkInterface*, %struct.VkPhysicalDevice_T*, %struct.VkPhysicalDeviceFeatures2*, i32, i32, %class.GrVkExtensions*, i1)* @_ZN8GrVkCapsC2ERK16GrContextOptionsPK13GrVkInterfaceP18VkPhysicalDevice_TRK25VkPhysicalDeviceFeatures2jjRK14GrVkExtensions11GrProtected

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN8GrVkCapsC2ERK16GrContextOptionsPK13GrVkInterfaceP18VkPhysicalDevice_TRK25VkPhysicalDeviceFeatures2jjRK14GrVkExtensions11GrProtected(%class.GrVkCaps*, %struct.GrContextOptions* dereferenceable(240), %struct.GrVkInterface* readonly, %struct.VkPhysicalDevice_T*, %struct.VkPhysicalDeviceFeatures2* nocapture readonly dereferenceable(240), i32, i32, %class.GrVkExtensions* dereferenceable(16), i1 zeroext) unnamed_addr #0 align 2 {
  %10 = bitcast %class.GrVkCaps* %0 to %class.GrCaps*
  tail call void @_ZN6GrCapsC2ERK16GrContextOptions(%class.GrCaps* %10, %struct.GrContextOptions* dereferenceable(240) %1) #13
  %11 = getelementptr inbounds %class.GrVkCaps, %class.GrVkCaps* %0, i64 0, i32 0, i32 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [32 x i8*] }, { [32 x i8*] }* @_ZTV8GrVkCaps, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %11, align 8
  %12 = getelementptr inbounds %class.GrVkCaps, %class.GrVkCaps* %0, i64 0, i32 2, i64 0, i32 0
  store i16 0, i16* %12, align 8
  %13 = getelementptr inbounds %class.GrVkCaps, %class.GrVkCaps* %0, i64 0, i32 2, i64 0, i32 1
  store i16 0, i16* %13, align 2
  %14 = getelementptr inbounds %class.GrVkCaps, %class.GrVkCaps* %0, i64 0, i32 2, i64 0, i32 3
  %15 = bitcast %class.SkTDArray* %14 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %15, i8 0, i64 28, i1 false) #13
  %16 = getelementptr inbounds %class.GrVkCaps, %class.GrVkCaps* %0, i64 0, i32 2, i64 1, i32 0
  store i16 0, i16* %16, align 8
  %17 = getelementptr inbounds %class.GrVkCaps, %class.GrVkCaps* %0, i64 0, i32 2, i64 1, i32 1
  store i16 0, i16* %17, align 2
  %18 = getelementptr inbounds %class.GrVkCaps, %class.GrVkCaps* %0, i64 0, i32 2, i64 1, i32 3
  %19 = bitcast %class.SkTDArray* %18 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %19, i8 0, i64 28, i1 false) #13
  %20 = getelementptr inbounds %class.GrVkCaps, %class.GrVkCaps* %0, i64 0, i32 2, i64 2, i32 0
  store i16 0, i16* %20, align 8
  %21 = getelementptr inbounds %class.GrVkCaps, %class.GrVkCaps* %0, i64 0, i32 2, i64 2, i32 1
  store i16 0, i16* %21, align 2
  %22 = getelementptr inbounds %class.GrVkCaps, %class.GrVkCaps* %0, i64 0, i32 2, i64 2, i32 3
  %23 = bitcast %class.SkTDArray* %22 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %23, i8 0, i64 28, i1 false) #13
  %24 = getelementptr inbounds %class.GrVkCaps, %class.GrVkCaps* %0, i64 0, i32 2, i64 3, i32 0
  store i16 0, i16* %24, align 8
  %25 = getelementptr inbounds %class.GrVkCaps, %class.GrVkCaps* %0, i64 0, i32 2, i64 3, i32 1
  store i16 0, i16* %25, align 2
  %26 = getelementptr inbounds %class.GrVkCaps, %class.GrVkCaps* %0, i64 0, i32 2, i64 3, i32 3
  %27 = bitcast %class.SkTDArray* %26 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %27, i8 0, i64 28, i1 false) #13
  %28 = getelementptr inbounds %class.GrVkCaps, %class.GrVkCaps* %0, i64 0, i32 2, i64 4, i32 0
  store i16 0, i16* %28, align 8
  %29 = getelementptr inbounds %class.GrVkCaps, %class.GrVkCaps* %0, i64 0, i32 2, i64 4, i32 1
  store i16 0, i16* %29, align 2
  %30 = getelementptr inbounds %class.GrVkCaps, %class.GrVkCaps* %0, i64 0, i32 2, i64 4, i32 3
  %31 = bitcast %class.SkTDArray* %30 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %31, i8 0, i64 28, i1 false) #13
  %32 = getelementptr inbounds %class.GrVkCaps, %class.GrVkCaps* %0, i64 0, i32 2, i64 5, i32 0
  store i16 0, i16* %32, align 8
  %33 = getelementptr inbounds %class.GrVkCaps, %class.GrVkCaps* %0, i64 0, i32 2, i64 5, i32 1
  store i16 0, i16* %33, align 2
  %34 = getelementptr inbounds %class.GrVkCaps, %class.GrVkCaps* %0, i64 0, i32 2, i64 5, i32 3
  %35 = bitcast %class.SkTDArray* %34 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %35, i8 0, i64 28, i1 false) #13
  %36 = getelementptr inbounds %class.GrVkCaps, %class.GrVkCaps* %0, i64 0, i32 2, i64 6, i32 0
  store i16 0, i16* %36, align 8
  %37 = getelementptr inbounds %class.GrVkCaps, %class.GrVkCaps* %0, i64 0, i32 2, i64 6, i32 1
  store i16 0, i16* %37, align 2
  %38 = getelementptr inbounds %class.GrVkCaps, %class.GrVkCaps* %0, i64 0, i32 2, i64 6, i32 3
  %39 = bitcast %class.SkTDArray* %38 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %39, i8 0, i64 28, i1 false) #13
  %40 = getelementptr inbounds %class.GrVkCaps, %class.GrVkCaps* %0, i64 0, i32 2, i64 7, i32 0
  store i16 0, i16* %40, align 8
  %41 = getelementptr inbounds %class.GrVkCaps, %class.GrVkCaps* %0, i64 0, i32 2, i64 7, i32 1
  store i16 0, i16* %41, align 2
  %42 = getelementptr inbounds %class.GrVkCaps, %class.GrVkCaps* %0, i64 0, i32 2, i64 7, i32 3
  %43 = bitcast %class.SkTDArray* %42 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %43, i8 0, i64 28, i1 false) #13
  %44 = getelementptr inbounds %class.GrVkCaps, %class.GrVkCaps* %0, i64 0, i32 2, i64 8, i32 0
  store i16 0, i16* %44, align 8
  %45 = getelementptr inbounds %class.GrVkCaps, %class.GrVkCaps* %0, i64 0, i32 2, i64 8, i32 1
  store i16 0, i16* %45, align 2
  %46 = getelementptr inbounds %class.GrVkCaps, %class.GrVkCaps* %0, i64 0, i32 2, i64 8, i32 3
  %47 = bitcast %class.SkTDArray* %46 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %47, i8 0, i64 28, i1 false) #13
  %48 = getelementptr inbounds %class.GrVkCaps, %class.GrVkCaps* %0, i64 0, i32 2, i64 9, i32 0
  store i16 0, i16* %48, align 8
  %49 = getelementptr inbounds %class.GrVkCaps, %class.GrVkCaps* %0, i64 0, i32 2, i64 9, i32 1
  store i16 0, i16* %49, align 2
  %50 = getelementptr inbounds %class.GrVkCaps, %class.GrVkCaps* %0, i64 0, i32 2, i64 9, i32 3
  %51 = bitcast %class.SkTDArray* %50 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %51, i8 0, i64 28, i1 false) #13
  %52 = getelementptr inbounds %class.GrVkCaps, %class.GrVkCaps* %0, i64 0, i32 2, i64 10, i32 0
  store i16 0, i16* %52, align 8
  %53 = getelementptr inbounds %class.GrVkCaps, %class.GrVkCaps* %0, i64 0, i32 2, i64 10, i32 1
  store i16 0, i16* %53, align 2
  %54 = getelementptr inbounds %class.GrVkCaps, %class.GrVkCaps* %0, i64 0, i32 2, i64 10, i32 3
  %55 = bitcast %class.SkTDArray* %54 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %55, i8 0, i64 28, i1 false) #13
  %56 = getelementptr inbounds %class.GrVkCaps, %class.GrVkCaps* %0, i64 0, i32 2, i64 11, i32 0
  store i16 0, i16* %56, align 8
  %57 = getelementptr inbounds %class.GrVkCaps, %class.GrVkCaps* %0, i64 0, i32 2, i64 11, i32 1
  store i16 0, i16* %57, align 2
  %58 = getelementptr inbounds %class.GrVkCaps, %class.GrVkCaps* %0, i64 0, i32 2, i64 11, i32 3
  %59 = bitcast %class.SkTDArray* %58 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %59, i8 0, i64 28, i1 false) #13
  %60 = getelementptr inbounds %class.GrVkCaps, %class.GrVkCaps* %0, i64 0, i32 2, i64 12, i32 0
  store i16 0, i16* %60, align 8
  %61 = getelementptr inbounds %class.GrVkCaps, %class.GrVkCaps* %0, i64 0, i32 2, i64 12, i32 1
  store i16 0, i16* %61, align 2
  %62 = getelementptr inbounds %class.GrVkCaps, %class.GrVkCaps* %0, i64 0, i32 2, i64 12, i32 3
  %63 = bitcast %class.SkTDArray* %62 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %63, i8 0, i64 28, i1 false) #13
  %64 = getelementptr inbounds %class.GrVkCaps, %class.GrVkCaps* %0, i64 0, i32 2, i64 13, i32 0
  store i16 0, i16* %64, align 8
  %65 = getelementptr inbounds %class.GrVkCaps, %class.GrVkCaps* %0, i64 0, i32 2, i64 13, i32 1
  store i16 0, i16* %65, align 2
  %66 = getelementptr inbounds %class.GrVkCaps, %class.GrVkCaps* %0, i64 0, i32 2, i64 13, i32 3
  %67 = bitcast %class.SkTDArray* %66 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %67, i8 0, i64 28, i1 false) #13
  %68 = getelementptr inbounds %class.GrVkCaps, %class.GrVkCaps* %0, i64 0, i32 2, i64 14, i32 0
  store i16 0, i16* %68, align 8
  %69 = getelementptr inbounds %class.GrVkCaps, %class.GrVkCaps* %0, i64 0, i32 2, i64 14, i32 1
  store i16 0, i16* %69, align 2
  %70 = getelementptr inbounds %class.GrVkCaps, %class.GrVkCaps* %0, i64 0, i32 2, i64 14, i32 3
  %71 = bitcast %class.SkTDArray* %70 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %71, i8 0, i64 28, i1 false) #13
  %72 = getelementptr inbounds %class.GrVkCaps, %class.GrVkCaps* %0, i64 0, i32 2, i64 15, i32 0
  store i16 0, i16* %72, align 8
  %73 = getelementptr inbounds %class.GrVkCaps, %class.GrVkCaps* %0, i64 0, i32 2, i64 15, i32 1
  store i16 0, i16* %73, align 2
  %74 = getelementptr inbounds %class.GrVkCaps, %class.GrVkCaps* %0, i64 0, i32 2, i64 15, i32 3
  %75 = bitcast %class.SkTDArray* %74 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %75, i8 0, i64 28, i1 false) #13
  %76 = getelementptr inbounds %class.GrVkCaps, %class.GrVkCaps* %0, i64 0, i32 2, i64 16, i32 0
  store i16 0, i16* %76, align 8
  %77 = getelementptr inbounds %class.GrVkCaps, %class.GrVkCaps* %0, i64 0, i32 2, i64 16, i32 1
  store i16 0, i16* %77, align 2
  %78 = getelementptr inbounds %class.GrVkCaps, %class.GrVkCaps* %0, i64 0, i32 2, i64 16, i32 3
  %79 = bitcast %class.SkTDArray* %78 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %79, i8 0, i64 28, i1 false) #13
  %80 = getelementptr inbounds %class.GrVkCaps, %class.GrVkCaps* %0, i64 0, i32 2, i64 17, i32 0
  store i16 0, i16* %80, align 8
  %81 = getelementptr inbounds %class.GrVkCaps, %class.GrVkCaps* %0, i64 0, i32 2, i64 17, i32 1
  store i16 0, i16* %81, align 2
  %82 = getelementptr inbounds %class.GrVkCaps, %class.GrVkCaps* %0, i64 0, i32 2, i64 17, i32 3
  %83 = bitcast %class.SkTDArray* %82 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %83, i8 0, i64 28, i1 false) #13
  %84 = getelementptr inbounds %class.GrVkCaps, %class.GrVkCaps* %0, i64 0, i32 2, i64 18, i32 0
  store i16 0, i16* %84, align 8
  %85 = getelementptr inbounds %class.GrVkCaps, %class.GrVkCaps* %0, i64 0, i32 2, i64 18, i32 1
  store i16 0, i16* %85, align 2
  %86 = getelementptr inbounds %class.GrVkCaps, %class.GrVkCaps* %0, i64 0, i32 2, i64 18, i32 3
  %87 = bitcast %class.SkTDArray* %86 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %87, i8 0, i64 28, i1 false) #13
  %88 = getelementptr inbounds %class.GrVkCaps, %class.GrVkCaps* %0, i64 0, i32 2, i64 19, i32 0
  store i16 0, i16* %88, align 8
  %89 = getelementptr inbounds %class.GrVkCaps, %class.GrVkCaps* %0, i64 0, i32 2, i64 19, i32 1
  store i16 0, i16* %89, align 2
  %90 = getelementptr inbounds %class.GrVkCaps, %class.GrVkCaps* %0, i64 0, i32 2, i64 19, i32 3
  %91 = bitcast %class.SkTDArray* %90 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %91, i8 0, i64 28, i1 false) #13
  %92 = getelementptr inbounds %class.GrVkCaps, %class.GrVkCaps* %0, i64 0, i32 2, i64 20, i32 0
  store i16 0, i16* %92, align 8
  %93 = getelementptr inbounds %class.GrVkCaps, %class.GrVkCaps* %0, i64 0, i32 2, i64 20, i32 1
  store i16 0, i16* %93, align 2
  %94 = getelementptr inbounds %class.GrVkCaps, %class.GrVkCaps* %0, i64 0, i32 2, i64 20, i32 3
  %95 = bitcast %class.SkTDArray* %94 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %95, i8 0, i64 28, i1 false) #13
  %96 = getelementptr inbounds %class.GrVkCaps, %class.GrVkCaps* %0, i64 0, i32 2, i64 21, i32 0
  store i16 0, i16* %96, align 8
  %97 = getelementptr inbounds %class.GrVkCaps, %class.GrVkCaps* %0, i64 0, i32 2, i64 21, i32 1
  store i16 0, i16* %97, align 2
  %98 = getelementptr inbounds %class.GrVkCaps, %class.GrVkCaps* %0, i64 0, i32 2, i64 21, i32 3
  %99 = bitcast %class.SkTDArray* %98 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %99, i8 0, i64 28, i1 false) #13
  %100 = getelementptr inbounds %class.GrVkCaps, %class.GrVkCaps* %0, i64 0, i32 5, i32 0, i32 0, i64 48
  %101 = getelementptr inbounds %class.GrVkCaps, %class.GrVkCaps* %0, i64 0, i32 5, i32 0, i32 0, i64 0
  %102 = getelementptr inbounds %class.GrVkCaps, %class.GrVkCaps* %0, i64 0, i32 5, i32 0, i32 0, i64 56
  %103 = bitcast i8* %102 to i64*
  %104 = bitcast i8* %100 to i8**
  store i8* %101, i8** %104, align 8
  store i64 8589934592, i64* %103, align 8
  %105 = getelementptr inbounds %class.GrVkCaps, %class.GrVkCaps* %0, i64 0, i32 6
  %106 = getelementptr inbounds %class.GrVkCaps, %class.GrVkCaps* %0, i64 0, i32 21
  call void @llvm.memset.p0i8.i64(i8* align 8 %105, i8 0, i64 15, i1 false)
  store i8 1, i8* %106, align 1
  %107 = getelementptr inbounds %class.GrVkCaps, %class.GrVkCaps* %0, i64 0, i32 22
  store i8 0, i8* %107, align 8
  %108 = getelementptr inbounds %class.GrVkCaps, %class.GrVkCaps* %0, i64 0, i32 23
  store i8 0, i8* %108, align 1
  %109 = getelementptr inbounds %class.GrVkCaps, %class.GrVkCaps* %0, i64 0, i32 24
  store i8 0, i8* %109, align 2
  %110 = getelementptr inbounds %class.GrVkCaps, %class.GrVkCaps* %0, i64 0, i32 25
  store i8 1, i8* %110, align 1
  %111 = getelementptr inbounds %class.GrVkCaps, %class.GrVkCaps* %0, i64 0, i32 26
  store i32 100, i32* %111, align 4
  %112 = getelementptr inbounds %class.GrVkCaps, %class.GrVkCaps* %0, i64 0, i32 27
  store i32 0, i32* %112, align 8
  %113 = getelementptr inbounds %class.GrVkCaps, %class.GrVkCaps* %0, i64 0, i32 28
  store i8 0, i8* %113, align 4
  %114 = getelementptr inbounds %class.GrVkCaps, %class.GrVkCaps* %0, i64 0, i32 29
  store i8 0, i8* %114, align 1
  %115 = getelementptr inbounds %class.GrVkCaps, %class.GrVkCaps* %0, i64 0, i32 31
  store i32 0, i32* %115, align 8
  %116 = getelementptr inbounds %class.GrVkCaps, %class.GrVkCaps* %0, i64 0, i32 0, i32 3
  %117 = bitcast i48* %116 to i64*
  %118 = load i64, i64* %117, align 8
  %119 = getelementptr inbounds %class.GrVkCaps, %class.GrVkCaps* %0, i64 0, i32 0, i32 8
  store i32 4096, i32* %119, align 8
  %120 = getelementptr inbounds %class.GrVkCaps, %class.GrVkCaps* %0, i64 0, i32 0, i32 11
  store i32 4096, i32* %120, align 4
  %121 = and i64 %118, -65974728393336
  %122 = or i64 %121, 65974728393287
  store i64 %122, i64* %117, align 8
  %123 = tail call i8* @_Znwm(i64 144) #14
  %124 = bitcast i8* %123 to %class.GrShaderCaps*
  tail call void @_ZN12GrShaderCapsC1ERK16GrContextOptions(%class.GrShaderCaps* nonnull %124, %struct.GrContextOptions* dereferenceable(240) %1) #13
  %125 = getelementptr inbounds %class.GrVkCaps, %class.GrVkCaps* %0, i64 0, i32 0, i32 2, i32 0
  %126 = load %class.GrShaderCaps*, %class.GrShaderCaps** %125, align 8
  %127 = bitcast %class.GrShaderCaps** %125 to i8**
  store i8* %123, i8** %127, align 8
  %128 = icmp eq %class.GrShaderCaps* %126, null
  br i1 %128, label %139, label %129

129:                                              ; preds = %9
  %130 = getelementptr inbounds %class.GrShaderCaps, %class.GrShaderCaps* %126, i64 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0
  %131 = atomicrmw add i32* %130, i32 -1 acq_rel
  %132 = icmp eq i32 %131, 1
  br i1 %132, label %133, label %139

133:                                              ; preds = %129
  %134 = bitcast %class.GrShaderCaps* %126 to %class.SkRefCntBase*
  %135 = bitcast %class.GrShaderCaps* %126 to void (%class.SkRefCntBase*)***
  %136 = load void (%class.SkRefCntBase*)**, void (%class.SkRefCntBase*)*** %135, align 8
  %137 = getelementptr inbounds void (%class.SkRefCntBase*)*, void (%class.SkRefCntBase*)** %136, i64 2
  %138 = load void (%class.SkRefCntBase*)*, void (%class.SkRefCntBase*)** %137, align 8
  tail call void %138(%class.SkRefCntBase* nonnull %134) #13
  br label %139

139:                                              ; preds = %9, %129, %133
  tail call void @_ZN8GrVkCaps4initERK16GrContextOptionsPK13GrVkInterfaceP18VkPhysicalDevice_TRK25VkPhysicalDeviceFeatures2jRK14GrVkExtensions11GrProtected(%class.GrVkCaps* %0, %struct.GrContextOptions* dereferenceable(240) %1, %struct.GrVkInterface* %2, %struct.VkPhysicalDevice_T* %3, %struct.VkPhysicalDeviceFeatures2* dereferenceable(240) %4, i32 %6, %class.GrVkExtensions* dereferenceable(16) %7, i1 zeroext %8)
  ret void
}

declare void @_ZN6GrCapsC2ERK16GrContextOptions(%class.GrCaps*, %struct.GrContextOptions* dereferenceable(240)) unnamed_addr #1

; Function Attrs: nobuiltin nofree
declare noalias nonnull i8* @_Znwm(i64) local_unnamed_addr #2

declare void @_ZN12GrShaderCapsC1ERK16GrContextOptions(%class.GrShaderCaps*, %struct.GrContextOptions* dereferenceable(240)) unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN8GrVkCaps4initERK16GrContextOptionsPK13GrVkInterfaceP18VkPhysicalDevice_TRK25VkPhysicalDeviceFeatures2jRK14GrVkExtensions11GrProtected(%class.GrVkCaps*, %struct.GrContextOptions* dereferenceable(240), %struct.GrVkInterface* readonly, %struct.VkPhysicalDevice_T*, %struct.VkPhysicalDeviceFeatures2* nocapture readonly dereferenceable(240), i32, %class.GrVkExtensions* dereferenceable(16), i1 zeroext) local_unnamed_addr #0 align 2 {
  %9 = alloca %struct.VkFormatProperties, align 4
  %10 = alloca %struct.VkFormatProperties, align 4
  %11 = alloca %struct.VkPhysicalDeviceProperties, align 8
  %12 = alloca %struct.VkPhysicalDeviceMemoryProperties, align 8
  %13 = bitcast %struct.VkPhysicalDeviceProperties* %11 to i8*
  call void @llvm.lifetime.start.p0i8(i64 824, i8* nonnull %13) #13
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %13, i8* align 8 bitcast ({ i32, i32, i32, i32, i32, [256 x i8], [16 x i8], [4 x i8], { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, [4 x i8], i64, i64, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, [3 x i32], i32, [3 x i32], i32, i32, i32, i32, i32, float, float, i32, [2 x i32], [2 x float], i32, [4 x i8], i64, i64, i64, i64, i32, i32, i32, i32, float, float, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, float, i32, i32, i32, i32, [2 x float], [2 x float], float, float, i32, i32, [4 x i8], i64, i64, i64 }, %struct.VkPhysicalDeviceSparseProperties, [4 x i8] }* @__const._ZN8GrVkCaps4initERK16GrContextOptionsPK13GrVkInterfaceP18VkPhysicalDevice_TRK25VkPhysicalDeviceFeatures2jRK14GrVkExtensions11GrProtected.properties to i8*), i64 824, i1 false)
  %14 = getelementptr inbounds %struct.GrVkInterface, %struct.GrVkInterface* %2, i64 0, i32 1, i32 6, i32 0
  %15 = load void (%struct.VkPhysicalDevice_T*, %struct.VkPhysicalDeviceProperties*)*, void (%struct.VkPhysicalDevice_T*, %struct.VkPhysicalDeviceProperties*)** %14, align 8
  call void %15(%struct.VkPhysicalDevice_T* %3, %struct.VkPhysicalDeviceProperties* nonnull %11) #13
  %16 = bitcast %struct.VkPhysicalDeviceMemoryProperties* %12 to i8*
  call void @llvm.lifetime.start.p0i8(i64 520, i8* nonnull %16) #13
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %16, i8 -86, i64 520, i1 false)
  %17 = getelementptr inbounds %struct.GrVkInterface, %struct.GrVkInterface* %2, i64 0, i32 1, i32 8, i32 0
  %18 = load void (%struct.VkPhysicalDevice_T*, %struct.VkPhysicalDeviceMemoryProperties*)*, void (%struct.VkPhysicalDevice_T*, %struct.VkPhysicalDeviceMemoryProperties*)** %17, align 8
  call void %18(%struct.VkPhysicalDevice_T* %3, %struct.VkPhysicalDeviceMemoryProperties* nonnull %12) #13
  %19 = call zeroext i1 @_ZNK14GrVkExtensions12hasExtensionEPKcj(%class.GrVkExtensions* %6, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str, i64 0, i64 0), i32 1) #13
  br i1 %19, label %20, label %22

20:                                               ; preds = %8
  %21 = getelementptr inbounds %class.GrVkCaps, %class.GrVkCaps* %0, i64 0, i32 9
  store i8 1, i8* %21, align 1
  br label %22

22:                                               ; preds = %20, %8
  %23 = icmp ugt i32 %5, 4198399
  br i1 %23, label %24, label %26

24:                                               ; preds = %22
  %25 = getelementptr inbounds %class.GrVkCaps, %class.GrVkCaps* %0, i64 0, i32 10
  call void @llvm.memset.p0i8.i64(i8* align 4 %25, i8 1, i64 7, i1 false)
  br label %70

26:                                               ; preds = %22
  %27 = call zeroext i1 @_ZNK14GrVkExtensions12hasExtensionEPKcj(%class.GrVkExtensions* %6, i8* getelementptr inbounds ([39 x i8], [39 x i8]* @.str.1, i64 0, i64 0), i32 1) #13
  br i1 %27, label %28, label %30

28:                                               ; preds = %26
  %29 = getelementptr inbounds %class.GrVkCaps, %class.GrVkCaps* %0, i64 0, i32 10
  store i8 1, i8* %29, align 4
  br label %30

30:                                               ; preds = %26, %28
  %31 = call zeroext i1 @_ZNK14GrVkExtensions12hasExtensionEPKcj(%class.GrVkExtensions* %6, i8* getelementptr inbounds ([32 x i8], [32 x i8]* @.str.2, i64 0, i64 0), i32 1) #13
  br i1 %31, label %32, label %34

32:                                               ; preds = %30
  %33 = getelementptr inbounds %class.GrVkCaps, %class.GrVkCaps* %0, i64 0, i32 11
  store i8 1, i8* %33, align 1
  br label %34

34:                                               ; preds = %30, %32
  %35 = call zeroext i1 @_ZNK14GrVkExtensions12hasExtensionEPKcj(%class.GrVkExtensions* %6, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.3, i64 0, i64 0), i32 1) #13
  br i1 %35, label %36, label %38

36:                                               ; preds = %34
  %37 = getelementptr inbounds %class.GrVkCaps, %class.GrVkCaps* %0, i64 0, i32 12
  store i8 1, i8* %37, align 2
  br label %38

38:                                               ; preds = %34, %36
  %39 = call zeroext i1 @_ZNK14GrVkExtensions12hasExtensionEPKcj(%class.GrVkExtensions* %6, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.4, i64 0, i64 0), i32 1) #13
  br i1 %39, label %40, label %42

40:                                               ; preds = %38
  %41 = getelementptr inbounds %class.GrVkCaps, %class.GrVkCaps* %0, i64 0, i32 13
  store i8 1, i8* %41, align 1
  br label %42

42:                                               ; preds = %38, %40
  %43 = call zeroext i1 @_ZNK14GrVkExtensions12hasExtensionEPKcj(%class.GrVkExtensions* %6, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.5, i64 0, i64 0), i32 1) #13
  br i1 %43, label %44, label %46

44:                                               ; preds = %42
  %45 = getelementptr inbounds %class.GrVkCaps, %class.GrVkCaps* %0, i64 0, i32 14
  store i8 1, i8* %45, align 8
  br label %46

46:                                               ; preds = %42, %44
  %47 = call zeroext i1 @_ZNK14GrVkExtensions12hasExtensionEPKcj(%class.GrVkExtensions* %6, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.6, i64 0, i64 0), i32 1) #13
  br i1 %47, label %48, label %50

48:                                               ; preds = %46
  %49 = getelementptr inbounds %class.GrVkCaps, %class.GrVkCaps* %0, i64 0, i32 15
  store i8 1, i8* %49, align 1
  br label %50

50:                                               ; preds = %46, %48
  %51 = call zeroext i1 @_ZNK14GrVkExtensions12hasExtensionEPKcj(%class.GrVkExtensions* %6, i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.7, i64 0, i64 0), i32 1) #13
  br i1 %51, label %52, label %58

52:                                               ; preds = %50
  %53 = getelementptr inbounds %class.GrVkCaps, %class.GrVkCaps* %0, i64 0, i32 11
  %54 = load i8, i8* %53, align 1, !range !2
  %55 = icmp eq i8 %54, 0
  br i1 %55, label %58, label %56

56:                                               ; preds = %52
  %57 = getelementptr inbounds %class.GrVkCaps, %class.GrVkCaps* %0, i64 0, i32 16
  store i8 1, i8* %57, align 2
  br label %58

58:                                               ; preds = %52, %50, %56
  %59 = call zeroext i1 @_ZNK14GrVkExtensions12hasExtensionEPKcj(%class.GrVkExtensions* %6, i8* getelementptr inbounds ([36 x i8], [36 x i8]* @.str.8, i64 0, i64 0), i32 1) #13
  br i1 %59, label %60, label %72

60:                                               ; preds = %58
  %61 = getelementptr inbounds %class.GrVkCaps, %class.GrVkCaps* %0, i64 0, i32 10
  %62 = load i8, i8* %61, align 4, !range !2
  %63 = icmp eq i8 %62, 0
  br i1 %63, label %72, label %64

64:                                               ; preds = %60
  %65 = call zeroext i1 @_ZNK14GrVkExtensions12hasExtensionEPKcj(%class.GrVkExtensions* %6, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.9, i64 0, i64 0), i32 1) #13
  br i1 %65, label %66, label %72

66:                                               ; preds = %64
  %67 = getelementptr inbounds %class.GrVkCaps, %class.GrVkCaps* %0, i64 0, i32 16
  %68 = load i8, i8* %67, align 2, !range !2
  %69 = icmp eq i8 %68, 0
  br i1 %69, label %72, label %70

70:                                               ; preds = %66, %24
  %71 = getelementptr inbounds %class.GrVkCaps, %class.GrVkCaps* %0, i64 0, i32 17
  store i8 1, i8* %71, align 1
  br label %72

72:                                               ; preds = %66, %60, %70, %64, %58
  %73 = getelementptr inbounds %struct.VkPhysicalDeviceFeatures2, %struct.VkPhysicalDeviceFeatures2* %4, i64 0, i32 1
  %74 = load i8*, i8** %73, align 8
  %75 = icmp eq i8* %74, null
  br i1 %75, label %112, label %76

76:                                               ; preds = %72, %81
  %77 = phi i8* [ %84, %81 ], [ %74, %72 ]
  %78 = bitcast i8* %77 to i32*
  %79 = load i32, i32* %78, align 8
  %80 = icmp eq i32 %79, 1000156004
  br i1 %80, label %86, label %81

81:                                               ; preds = %76
  %82 = getelementptr inbounds i8, i8* %77, i64 8
  %83 = bitcast i8* %82 to i8**
  %84 = load i8*, i8** %83, align 8
  %85 = icmp eq i8* %84, null
  br i1 %85, label %112, label %76

86:                                               ; preds = %76
  %87 = getelementptr inbounds i8, i8* %77, i64 16
  %88 = bitcast i8* %87 to i32*
  %89 = load i32, i32* %88, align 8
  %90 = icmp eq i32 %89, 0
  br i1 %90, label %112, label %91

91:                                               ; preds = %86
  br i1 %23, label %110, label %92

92:                                               ; preds = %91
  %93 = call zeroext i1 @_ZNK14GrVkExtensions12hasExtensionEPKcj(%class.GrVkExtensions* %6, i8* getelementptr inbounds ([32 x i8], [32 x i8]* @.str.10, i64 0, i64 0), i32 1) #13
  br i1 %93, label %94, label %112

94:                                               ; preds = %92
  %95 = getelementptr inbounds %class.GrVkCaps, %class.GrVkCaps* %0, i64 0, i32 13
  %96 = load i8, i8* %95, align 1, !range !2
  %97 = icmp eq i8 %96, 0
  br i1 %97, label %112, label %98

98:                                               ; preds = %94
  %99 = getelementptr inbounds %class.GrVkCaps, %class.GrVkCaps* %0, i64 0, i32 12
  %100 = load i8, i8* %99, align 2, !range !2
  %101 = icmp eq i8 %100, 0
  br i1 %101, label %112, label %102

102:                                              ; preds = %98
  %103 = getelementptr inbounds %class.GrVkCaps, %class.GrVkCaps* %0, i64 0, i32 11
  %104 = load i8, i8* %103, align 1, !range !2
  %105 = icmp eq i8 %104, 0
  br i1 %105, label %112, label %106

106:                                              ; preds = %102
  %107 = getelementptr inbounds %class.GrVkCaps, %class.GrVkCaps* %0, i64 0, i32 10
  %108 = load i8, i8* %107, align 4, !range !2
  %109 = icmp eq i8 %108, 0
  br i1 %109, label %112, label %110

110:                                              ; preds = %106, %91
  %111 = getelementptr inbounds %class.GrVkCaps, %class.GrVkCaps* %0, i64 0, i32 19
  store i8 1, i8* %111, align 1
  br label %112

112:                                              ; preds = %81, %106, %102, %98, %94, %72, %86, %110, %92
  %113 = getelementptr inbounds %class.GrVkCaps, %class.GrVkCaps* %0, i64 0, i32 5, i32 0, i32 0, i64 48
  %114 = bitcast i8* %113 to %class.SkTArray*
  call void @_ZN8SkTArrayI23GrVkYcbcrConversionInfoLb0EE12checkReallocEiNS1_11ReallocTypeE(%class.SkTArray* %114, i32 1, i32 1) #13
  %115 = bitcast i8* %113 to %struct.GrVkYcbcrConversionInfo**
  %116 = load %struct.GrVkYcbcrConversionInfo*, %struct.GrVkYcbcrConversionInfo** %115, align 8
  %117 = getelementptr inbounds %class.GrVkCaps, %class.GrVkCaps* %0, i64 0, i32 5, i32 0, i32 0, i64 56
  %118 = bitcast i8* %117 to i64*
  %119 = load i64, i64* %118, align 8
  %120 = lshr i64 %119, 1
  %121 = and i64 %120, 2147483647
  %122 = add i64 %119, 2
  %123 = and i64 %122, 4294967294
  %124 = and i64 %119, -4294967295
  %125 = or i64 %123, %124
  store i64 %125, i64* %118, align 8
  %126 = getelementptr inbounds %struct.GrVkYcbcrConversionInfo, %struct.GrVkYcbcrConversionInfo* %116, i64 %121, i32 0
  %127 = bitcast i32* %126 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %127, i8 0, i64 48, i1 false)
  %128 = and i1 %23, %7
  br i1 %128, label %129, label %133

129:                                              ; preds = %112
  %130 = getelementptr inbounds %class.GrVkCaps, %class.GrVkCaps* %0, i64 0, i32 20
  store i8 1, i8* %130, align 2
  %131 = getelementptr inbounds %class.GrVkCaps, %class.GrVkCaps* %0, i64 0, i32 8
  store i8 1, i8* %131, align 2
  %132 = getelementptr inbounds %class.GrVkCaps, %class.GrVkCaps* %0, i64 0, i32 7
  store i8 1, i8* %132, align 1
  br label %133

133:                                              ; preds = %129, %112
  %134 = getelementptr inbounds %struct.VkPhysicalDeviceProperties, %struct.VkPhysicalDeviceProperties* %11, i64 0, i32 7, i32 28
  %135 = load i32, i32* %134, align 4
  %136 = getelementptr inbounds %class.GrVkCaps, %class.GrVkCaps* %0, i64 0, i32 27
  store i32 %135, i32* %136, align 8
  %137 = getelementptr inbounds %struct.VkPhysicalDeviceProperties, %struct.VkPhysicalDeviceProperties* %11, i64 0, i32 2
  %138 = load i32, i32* %137, align 8
  %139 = icmp eq i32 %138, 5045
  br i1 %139, label %140, label %142

140:                                              ; preds = %133
  %141 = getelementptr inbounds %class.GrVkCaps, %class.GrVkCaps* %0, i64 0, i32 28
  store i8 1, i8* %141, align 4
  br label %142

142:                                              ; preds = %140, %133
  call void @_ZN8GrVkCaps10initGrCapsEPK13GrVkInterfaceP18VkPhysicalDevice_TRK26VkPhysicalDevicePropertiesRK32VkPhysicalDeviceMemoryPropertiesRK25VkPhysicalDeviceFeatures2RK14GrVkExtensions(%class.GrVkCaps* %0, %struct.GrVkInterface* %2, %struct.VkPhysicalDevice_T* %3, %struct.VkPhysicalDeviceProperties* nonnull dereferenceable(824) %11, %struct.VkPhysicalDeviceMemoryProperties* dereferenceable(520) undef, %struct.VkPhysicalDeviceFeatures2* dereferenceable(240) %4, %class.GrVkExtensions* dereferenceable(16) %6)
  %143 = getelementptr inbounds %class.GrVkCaps, %class.GrVkCaps* %0, i64 0, i32 0, i32 2, i32 0
  %144 = load %class.GrShaderCaps*, %class.GrShaderCaps** %143, align 8
  %145 = getelementptr inbounds %class.GrShaderCaps, %class.GrShaderCaps* %144, i64 0, i32 3
  store i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.14, i64 0, i64 0), i8** %145, align 8
  %146 = getelementptr inbounds %class.GrShaderCaps, %class.GrShaderCaps* %144, i64 0, i32 2
  %147 = bitcast i56* %146 to i64*
  %148 = load i64, i64* %147, align 8
  %149 = load i32, i32* %137, align 8
  %150 = icmp ne i32 %149, 20803
  %151 = zext i1 %150 to i64
  %152 = shl nuw nsw i64 %151, 11
  %153 = and i64 %148, -4398046522882
  %154 = icmp eq i32 %149, 5045
  %155 = zext i1 %154 to i64
  %156 = shl nuw nsw i64 %155, 42
  %157 = or i64 %153, %152
  %158 = or i64 %157, %156
  %159 = or i64 %158, 9729
  store i64 %159, i64* %147, align 8
  %160 = getelementptr inbounds %struct.VkPhysicalDeviceFeatures2, %struct.VkPhysicalDeviceFeatures2* %4, i64 0, i32 2, i32 7
  %161 = load i32, i32* %160, align 4
  %162 = icmp ne i32 %161, 0
  %163 = zext i1 %162 to i64
  %164 = shl nuw nsw i64 %163, 4
  %165 = and i64 %159, -491633
  %166 = or i64 %164, %165
  %167 = or i64 %166, 229472
  store i64 %167, i64* %147, align 8
  %168 = getelementptr inbounds %struct.VkPhysicalDeviceProperties, %struct.VkPhysicalDeviceProperties* %11, i64 0, i32 7, i32 17
  %169 = getelementptr inbounds %struct.VkPhysicalDeviceProperties, %struct.VkPhysicalDeviceProperties* %11, i64 0, i32 7, i32 14
  %170 = load i32, i32* %169, align 4
  %171 = load i32, i32* %168, align 8
  %172 = icmp ult i32 %170, %171
  %173 = select i1 %172, i32 %170, i32 %171
  %174 = icmp ult i32 %173, 2147483647
  %175 = select i1 %174, i32 %173, i32 2147483647
  %176 = getelementptr inbounds %class.GrShaderCaps, %class.GrShaderCaps* %144, i64 0, i32 16
  store i32 %175, i32* %176, align 8
  %177 = icmp eq i32 %149, 20803
  br i1 %177, label %182, label %178

178:                                              ; preds = %142
  switch i32 %149, label %189 [
    i32 4318, label %179
    i32 4098, label %179
  ]

179:                                              ; preds = %178, %178
  %180 = getelementptr inbounds %class.GrVkCaps, %class.GrVkCaps* %0, i64 0, i32 24
  store i8 1, i8* %180, align 2
  %181 = getelementptr inbounds %class.GrVkCaps, %class.GrVkCaps* %0, i64 0, i32 25
  store i8 0, i8* %181, align 1
  br label %189

182:                                              ; preds = %142
  %183 = getelementptr inbounds %class.GrVkCaps, %class.GrVkCaps* %0, i64 0, i32 0, i32 3
  %184 = bitcast i48* %183 to i64*
  %185 = load i64, i64* %184, align 8
  %186 = or i64 %185, 131072
  store i64 %186, i64* %184, align 8
  %187 = getelementptr inbounds %class.GrVkCaps, %class.GrVkCaps* %0, i64 0, i32 8
  store i8 1, i8* %187, align 2
  %188 = getelementptr inbounds %class.GrVkCaps, %class.GrVkCaps* %0, i64 0, i32 0, i32 16
  store i32 0, i32* %188, align 8
  br label %189

189:                                              ; preds = %179, %178, %182
  %190 = getelementptr inbounds %struct.VkPhysicalDeviceFeatures2, %struct.VkPhysicalDeviceFeatures2* %4, i64 0, i32 2, i32 10
  %191 = load i32, i32* %190, align 8
  %192 = icmp ne i32 %191, 0
  %193 = bitcast %class.GrVkCaps* %0 to %class.GrCaps*
  %194 = getelementptr inbounds %class.GrVkCaps, %class.GrVkCaps* %0, i64 0, i32 0, i32 3
  %195 = bitcast i48* %194 to i64*
  %196 = zext i1 %192 to i64
  %197 = load i64, i64* %195, align 8
  %198 = shl nuw nsw i64 %196, 10
  %199 = and i64 %197, -1025
  %200 = select i1 %177, i64 0, i64 %198
  %201 = or i64 %200, %199
  store i64 %201, i64* %195, align 8
  %202 = icmp eq i64 %200, 0
  br i1 %202, label %207, label %203

203:                                              ; preds = %189
  %204 = getelementptr inbounds %struct.VkPhysicalDeviceProperties, %struct.VkPhysicalDeviceProperties* %11, i64 0, i32 7, i32 59
  %205 = load i32, i32* %204, align 8
  %206 = getelementptr inbounds %class.GrVkCaps, %class.GrVkCaps* %0, i64 0, i32 31
  store i32 %205, i32* %206, align 8
  br label %207

207:                                              ; preds = %189, %203
  %208 = icmp eq i32 %149, 4318
  br i1 %208, label %209, label %211

209:                                              ; preds = %207
  %210 = getelementptr inbounds %class.GrVkCaps, %class.GrVkCaps* %0, i64 0, i32 7
  store i8 1, i8* %210, align 1
  br label %211

211:                                              ; preds = %209, %207
  call void @_ZN8GrVkCaps15initFormatTableEPK13GrVkInterfaceP18VkPhysicalDevice_TRK26VkPhysicalDeviceProperties(%class.GrVkCaps* %0, %struct.GrVkInterface* %2, %struct.VkPhysicalDevice_T* %3, %struct.VkPhysicalDeviceProperties* nonnull dereferenceable(824) %11)
  %212 = bitcast %struct.VkFormatProperties* %10 to i8*
  call void @llvm.lifetime.start.p0i8(i64 12, i8* nonnull %212) #13
  %213 = getelementptr inbounds %struct.VkFormatProperties, %struct.VkFormatProperties* %10, i64 0, i32 1
  call void @llvm.memset.p0i8.i64(i8* nonnull align 4 %212, i8 0, i64 12, i1 false) #13
  %214 = getelementptr inbounds %struct.GrVkInterface, %struct.GrVkInterface* %2, i64 0, i32 1, i32 4, i32 0
  %215 = load void (%struct.VkPhysicalDevice_T*, i32, %struct.VkFormatProperties*)*, void (%struct.VkPhysicalDevice_T*, i32, %struct.VkFormatProperties*)** %214, align 8
  call void %215(%struct.VkPhysicalDevice_T* %3, i32 127, %struct.VkFormatProperties* nonnull %10) #13
  %216 = load i32, i32* %213, align 4
  %217 = and i32 %216, 512
  %218 = icmp eq i32 %217, 0
  call void @llvm.lifetime.end.p0i8(i64 12, i8* nonnull %212) #13
  br i1 %218, label %221, label %219

219:                                              ; preds = %211
  %220 = getelementptr inbounds %class.GrVkCaps, %class.GrVkCaps* %0, i64 0, i32 4
  store i32 127, i32* %220, align 4
  br label %231

221:                                              ; preds = %211
  %222 = bitcast %struct.VkFormatProperties* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 12, i8* nonnull %222) #13
  %223 = getelementptr inbounds %struct.VkFormatProperties, %struct.VkFormatProperties* %9, i64 0, i32 1
  call void @llvm.memset.p0i8.i64(i8* nonnull align 4 %222, i8 0, i64 12, i1 false) #13
  %224 = load void (%struct.VkPhysicalDevice_T*, i32, %struct.VkFormatProperties*)*, void (%struct.VkPhysicalDevice_T*, i32, %struct.VkFormatProperties*)** %214, align 8
  call void %224(%struct.VkPhysicalDevice_T* %3, i32 129, %struct.VkFormatProperties* nonnull %9) #13
  %225 = load i32, i32* %223, align 4
  %226 = and i32 %225, 512
  %227 = icmp eq i32 %226, 0
  call void @llvm.lifetime.end.p0i8(i64 12, i8* nonnull %222) #13
  %228 = getelementptr inbounds %class.GrVkCaps, %class.GrVkCaps* %0, i64 0, i32 4
  br i1 %227, label %230, label %229

229:                                              ; preds = %221
  store i32 129, i32* %228, align 4
  br label %231

230:                                              ; preds = %221
  store i32 130, i32* %228, align 4
  br label %231

231:                                              ; preds = %219, %229, %230
  %232 = getelementptr inbounds %struct.GrContextOptions, %struct.GrContextOptions* %1, i64 0, i32 25
  %233 = load i32, i32* %232, align 4
  %234 = icmp sgt i32 %233, -1
  br i1 %234, label %235, label %237

235:                                              ; preds = %231
  %236 = getelementptr inbounds %class.GrVkCaps, %class.GrVkCaps* %0, i64 0, i32 26
  store i32 %233, i32* %236, align 4
  br label %237

237:                                              ; preds = %235, %231
  %238 = getelementptr inbounds %struct.GrContextOptions, %struct.GrContextOptions* %1, i64 0, i32 19
  %239 = load i8, i8* %238, align 1, !range !2
  %240 = icmp eq i8 %239, 0
  br i1 %240, label %241, label %242

241:                                              ; preds = %237
  call void @_ZN8GrVkCaps33applyDriverCorrectnessWorkaroundsERK26VkPhysicalDeviceProperties(%class.GrVkCaps* %0, %struct.VkPhysicalDeviceProperties* nonnull dereferenceable(824) %11)
  br label %242

242:                                              ; preds = %237, %241
  call void @_ZN6GrCaps20finishInitializationERK16GrContextOptions(%class.GrCaps* %193, %struct.GrContextOptions* dereferenceable(240) %1) #13
  call void @llvm.lifetime.end.p0i8(i64 520, i8* nonnull %16) #13
  call void @llvm.lifetime.end.p0i8(i64 824, i8* nonnull %13) #13
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZNK8GrVkCaps12canCopyImageE8VkFormatibS0_ib(%class.GrVkCaps* nocapture readnone, i32, i32, i1 zeroext, i32, i32, i1 zeroext) local_unnamed_addr #0 align 2 {
  %8 = icmp slt i32 %2, 2
  %9 = icmp slt i32 %5, 2
  %10 = and i1 %8, %9
  %11 = icmp eq i32 %2, %5
  %12 = or i1 %11, %10
  %13 = xor i1 %12, true
  %14 = or i1 %3, %6
  %15 = or i1 %14, %13
  br i1 %15, label %20, label %16

16:                                               ; preds = %7
  %17 = tail call fastcc i32 @_ZL26format_compatibility_class8VkFormat(i32 %4)
  %18 = tail call fastcc i32 @_ZL26format_compatibility_class8VkFormat(i32 %1)
  %19 = icmp eq i32 %17, %18
  br label %20

20:                                               ; preds = %7, %16
  %21 = phi i1 [ %19, %16 ], [ false, %7 ]
  ret i1 %21
}

; Function Attrs: nounwind ssp uwtable
define internal fastcc i32 @_ZL26format_compatibility_class8VkFormat(i32) unnamed_addr #0 {
  switch i32 %0, label %9 [
    i32 44, label %10
    i32 37, label %10
    i32 64, label %10
    i32 58, label %10
    i32 43, label %10
    i32 77, label %10
    i32 83, label %10
    i32 9, label %2
    i32 4, label %3
    i32 76, label %3
    i32 16, label %3
    i32 3, label %3
    i32 2, label %3
    i32 70, label %3
    i32 97, label %4
    i32 91, label %4
    i32 23, label %5
    i32 147, label %6
    i32 131, label %7
    i32 133, label %8
  ]

2:                                                ; preds = %1
  br label %10

3:                                                ; preds = %1, %1, %1, %1, %1, %1
  br label %10

4:                                                ; preds = %1, %1
  br label %10

5:                                                ; preds = %1
  br label %10

6:                                                ; preds = %1
  br label %10

7:                                                ; preds = %1
  br label %10

8:                                                ; preds = %1
  br label %10

9:                                                ; preds = %1
  tail call void (i8*, i32, i8*, ...) @_Z16SkAbort_FileLinePKciS0_z(i8* getelementptr inbounds ([47 x i8], [47 x i8]* @.str.37, i64 0, i64 0), i32 131, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.38, i64 0, i64 0)) #15
  unreachable

10:                                               ; preds = %1, %1, %1, %1, %1, %1, %1, %8, %7, %6, %5, %4, %3, %2
  %11 = phi i32 [ 6, %8 ], [ 5, %7 ], [ 7, %6 ], [ 2, %5 ], [ 4, %4 ], [ 1, %3 ], [ 0, %2 ], [ 3, %1 ], [ 3, %1 ], [ 3, %1 ], [ 3, %1 ], [ 3, %1 ], [ 3, %1 ], [ 3, %1 ]
  ret i32 %11
}

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZNK8GrVkCaps13canCopyAsBlitE8VkFormatibbS0_ibb(%class.GrVkCaps* readonly, i32, i32, i1 zeroext, i1 zeroext, i32, i32, i1 zeroext, i1 zeroext) local_unnamed_addr #0 align 2 {
  %10 = tail call dereferenceable(40) %"struct.GrVkCaps::FormatInfo"* @_ZN8GrVkCaps13getFormatInfoE8VkFormat(%class.GrVkCaps* %0, i32 %1) #13
  %11 = getelementptr inbounds %"struct.GrVkCaps::FormatInfo", %"struct.GrVkCaps::FormatInfo"* %10, i64 0, i32 1
  %12 = getelementptr inbounds %"struct.GrVkCaps::FormatInfo", %"struct.GrVkCaps::FormatInfo"* %10, i64 0, i32 0
  %13 = select i1 %3, i16* %11, i16* %12
  %14 = load i16, i16* %13, align 2
  %15 = and i16 %14, 8
  %16 = icmp eq i16 %15, 0
  br i1 %16, label %32, label %17

17:                                               ; preds = %9
  %18 = tail call dereferenceable(40) %"struct.GrVkCaps::FormatInfo"* @_ZN8GrVkCaps13getFormatInfoE8VkFormat(%class.GrVkCaps* %0, i32 %5) #13
  %19 = getelementptr inbounds %"struct.GrVkCaps::FormatInfo", %"struct.GrVkCaps::FormatInfo"* %18, i64 0, i32 1
  %20 = getelementptr inbounds %"struct.GrVkCaps::FormatInfo", %"struct.GrVkCaps::FormatInfo"* %18, i64 0, i32 0
  %21 = select i1 %7, i16* %19, i16* %20
  %22 = load i16, i16* %21, align 2
  %23 = and i16 %22, 4
  %24 = icmp eq i16 %23, 0
  br i1 %24, label %32, label %25

25:                                               ; preds = %17
  %26 = icmp sgt i32 %2, 1
  %27 = icmp sgt i32 %6, 1
  %28 = or i1 %26, %27
  %29 = or i1 %4, %8
  %30 = or i1 %28, %29
  %31 = xor i1 %30, true
  ret i1 %31

32:                                               ; preds = %17, %9
  ret i1 false
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden zeroext i1 @_ZNK8GrVkCaps16canCopyAsResolveE8VkFormatibS0_ib(%class.GrVkCaps* nocapture readnone, i32, i32, i1 zeroext, i32, i32, i1 zeroext) local_unnamed_addr #3 align 2 {
  %8 = icmp sgt i32 %5, 1
  %9 = icmp slt i32 %2, 2
  %10 = and i1 %9, %8
  %11 = icmp eq i32 %4, %1
  %12 = and i1 %11, %10
  %13 = or i1 %3, %6
  %14 = xor i1 %13, true
  %15 = and i1 %12, %14
  ret i1 %15
}

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZNK8GrVkCaps16onCanCopySurfaceEPK14GrSurfaceProxyS2_RK7SkIRectRK8SkIPoint(%class.GrVkCaps* readonly, %class.GrSurfaceProxy*, %class.GrSurfaceProxy*, %struct.SkIRect* nocapture readnone dereferenceable(16), %struct.SkIPoint* nocapture readnone dereferenceable(8)) unnamed_addr #0 align 2 {
  %6 = alloca i32, align 4
  %7 = alloca i32, align 4
  %8 = getelementptr inbounds %class.GrSurfaceProxy, %class.GrSurfaceProxy* %2, i64 0, i32 15
  %9 = load i8, i8* %8, align 1, !range !2
  %10 = icmp eq i8 %9, 0
  br i1 %10, label %15, label %11

11:                                               ; preds = %5
  %12 = getelementptr inbounds %class.GrSurfaceProxy, %class.GrSurfaceProxy* %1, i64 0, i32 15
  %13 = load i8, i8* %12, align 1, !range !2
  %14 = icmp eq i8 %13, 0
  br i1 %14, label %162, label %15

15:                                               ; preds = %11, %5
  %16 = bitcast %class.GrSurfaceProxy* %1 to %class.GrRenderTargetProxy* (%class.GrSurfaceProxy*)***
  %17 = load %class.GrRenderTargetProxy* (%class.GrSurfaceProxy*)**, %class.GrRenderTargetProxy* (%class.GrSurfaceProxy*)*** %16, align 8
  %18 = getelementptr inbounds %class.GrRenderTargetProxy* (%class.GrSurfaceProxy*)*, %class.GrRenderTargetProxy* (%class.GrSurfaceProxy*)** %17, i64 6
  %19 = load %class.GrRenderTargetProxy* (%class.GrSurfaceProxy*)*, %class.GrRenderTargetProxy* (%class.GrSurfaceProxy*)** %18, align 8
  %20 = tail call %class.GrRenderTargetProxy* %19(%class.GrSurfaceProxy* %1) #13
  %21 = icmp eq %class.GrRenderTargetProxy* %20, null
  br i1 %21, label %54, label %22

22:                                               ; preds = %15
  %23 = getelementptr inbounds %class.GrRenderTargetProxy, %class.GrRenderTargetProxy* %20, i64 0, i32 3
  %24 = load i8, i8* %23, align 2, !range !2
  %25 = icmp eq i8 %24, 0
  br i1 %25, label %26, label %162

26:                                               ; preds = %22
  %27 = getelementptr inbounds %class.GrVkCaps, %class.GrVkCaps* %0, i64 0, i32 28
  %28 = load i8, i8* %27, align 4, !range !2
  %29 = icmp eq i8 %28, 0
  br i1 %29, label %50, label %30

30:                                               ; preds = %26
  %31 = bitcast %class.GrSurfaceProxy* %1 to %class.GrTextureProxy* (%class.GrSurfaceProxy*)***
  %32 = load %class.GrTextureProxy* (%class.GrSurfaceProxy*)**, %class.GrTextureProxy* (%class.GrSurfaceProxy*)*** %31, align 8
  %33 = getelementptr inbounds %class.GrTextureProxy* (%class.GrSurfaceProxy*)*, %class.GrTextureProxy* (%class.GrSurfaceProxy*)** %32, i64 4
  %34 = load %class.GrTextureProxy* (%class.GrSurfaceProxy*)*, %class.GrTextureProxy* (%class.GrSurfaceProxy*)** %33, align 8
  %35 = tail call %class.GrTextureProxy* %34(%class.GrSurfaceProxy* %1) #13
  %36 = icmp eq %class.GrTextureProxy* %35, null
  br i1 %36, label %50, label %37

37:                                               ; preds = %30
  %38 = bitcast %class.GrRenderTargetProxy* %20 to i8**
  %39 = load i8*, i8** %38, align 8
  %40 = getelementptr i8, i8* %39, i64 -24
  %41 = bitcast i8* %40 to i64*
  %42 = load i64, i64* %41, align 8
  %43 = bitcast %class.GrRenderTargetProxy* %20 to i8*
  %44 = getelementptr inbounds i8, i8* %43, i64 %42
  %45 = getelementptr inbounds i8, i8* %44, i64 24
  %46 = bitcast i8* %45 to i32*
  %47 = load i32, i32* %46, align 8
  %48 = and i32 %47, 16
  %49 = icmp eq i32 %48, 0
  br i1 %49, label %50, label %54

50:                                               ; preds = %37, %26, %30
  %51 = getelementptr inbounds %class.GrRenderTargetProxy, %class.GrRenderTargetProxy* %20, i64 0, i32 1
  %52 = load i8, i8* %51, align 8
  %53 = sext i8 %52 to i32
  br label %54

54:                                               ; preds = %37, %15, %50
  %55 = phi i32 [ 1, %37 ], [ 0, %15 ], [ %53, %50 ]
  %56 = bitcast %class.GrSurfaceProxy* %2 to %class.GrRenderTargetProxy* (%class.GrSurfaceProxy*)***
  %57 = load %class.GrRenderTargetProxy* (%class.GrSurfaceProxy*)**, %class.GrRenderTargetProxy* (%class.GrSurfaceProxy*)*** %56, align 8
  %58 = getelementptr inbounds %class.GrRenderTargetProxy* (%class.GrSurfaceProxy*)*, %class.GrRenderTargetProxy* (%class.GrSurfaceProxy*)** %57, i64 6
  %59 = load %class.GrRenderTargetProxy* (%class.GrSurfaceProxy*)*, %class.GrRenderTargetProxy* (%class.GrSurfaceProxy*)** %58, align 8
  %60 = tail call %class.GrRenderTargetProxy* %59(%class.GrSurfaceProxy* %2) #13
  %61 = icmp eq %class.GrRenderTargetProxy* %60, null
  br i1 %61, label %94, label %62

62:                                               ; preds = %54
  %63 = getelementptr inbounds %class.GrRenderTargetProxy, %class.GrRenderTargetProxy* %60, i64 0, i32 3
  %64 = load i8, i8* %63, align 2, !range !2
  %65 = icmp eq i8 %64, 0
  br i1 %65, label %66, label %162

66:                                               ; preds = %62
  %67 = getelementptr inbounds %class.GrVkCaps, %class.GrVkCaps* %0, i64 0, i32 28
  %68 = load i8, i8* %67, align 4, !range !2
  %69 = icmp eq i8 %68, 0
  br i1 %69, label %90, label %70

70:                                               ; preds = %66
  %71 = bitcast %class.GrSurfaceProxy* %2 to %class.GrTextureProxy* (%class.GrSurfaceProxy*)***
  %72 = load %class.GrTextureProxy* (%class.GrSurfaceProxy*)**, %class.GrTextureProxy* (%class.GrSurfaceProxy*)*** %71, align 8
  %73 = getelementptr inbounds %class.GrTextureProxy* (%class.GrSurfaceProxy*)*, %class.GrTextureProxy* (%class.GrSurfaceProxy*)** %72, i64 4
  %74 = load %class.GrTextureProxy* (%class.GrSurfaceProxy*)*, %class.GrTextureProxy* (%class.GrSurfaceProxy*)** %73, align 8
  %75 = tail call %class.GrTextureProxy* %74(%class.GrSurfaceProxy* %2) #13
  %76 = icmp eq %class.GrTextureProxy* %75, null
  br i1 %76, label %90, label %77

77:                                               ; preds = %70
  %78 = bitcast %class.GrRenderTargetProxy* %60 to i8**
  %79 = load i8*, i8** %78, align 8
  %80 = getelementptr i8, i8* %79, i64 -24
  %81 = bitcast i8* %80 to i64*
  %82 = load i64, i64* %81, align 8
  %83 = bitcast %class.GrRenderTargetProxy* %60 to i8*
  %84 = getelementptr inbounds i8, i8* %83, i64 %82
  %85 = getelementptr inbounds i8, i8* %84, i64 24
  %86 = bitcast i8* %85 to i32*
  %87 = load i32, i32* %86, align 8
  %88 = and i32 %87, 16
  %89 = icmp eq i32 %88, 0
  br i1 %89, label %90, label %94

90:                                               ; preds = %77, %66, %70
  %91 = getelementptr inbounds %class.GrRenderTargetProxy, %class.GrRenderTargetProxy* %60, i64 0, i32 1
  %92 = load i8, i8* %91, align 8
  %93 = sext i8 %92 to i32
  br label %94

94:                                               ; preds = %77, %54, %90
  %95 = phi i32 [ 1, %77 ], [ 0, %54 ], [ %93, %90 ]
  %96 = getelementptr inbounds %class.GrSurfaceProxy, %class.GrSurfaceProxy* %1, i64 0, i32 5
  %97 = tail call %struct.GrVkYcbcrConversionInfo* @_ZNK15GrBackendFormat24getVkYcbcrConversionInfoEv(%class.GrBackendFormat* %96) #13
  %98 = icmp eq %struct.GrVkYcbcrConversionInfo* %97, null
  br i1 %98, label %103, label %99

99:                                               ; preds = %94
  %100 = getelementptr inbounds %struct.GrVkYcbcrConversionInfo, %struct.GrVkYcbcrConversionInfo* %97, i64 0, i32 3
  %101 = load i32, i32* %100, align 8
  %102 = icmp ne i32 %101, 0
  br label %103

103:                                              ; preds = %99, %94
  %104 = phi i1 [ false, %94 ], [ %102, %99 ]
  %105 = getelementptr inbounds %class.GrSurfaceProxy, %class.GrSurfaceProxy* %2, i64 0, i32 5
  %106 = tail call %struct.GrVkYcbcrConversionInfo* @_ZNK15GrBackendFormat24getVkYcbcrConversionInfoEv(%class.GrBackendFormat* %105) #13
  %107 = icmp eq %struct.GrVkYcbcrConversionInfo* %106, null
  br i1 %107, label %112, label %108

108:                                              ; preds = %103
  %109 = getelementptr inbounds %struct.GrVkYcbcrConversionInfo, %struct.GrVkYcbcrConversionInfo* %106, i64 0, i32 3
  %110 = load i32, i32* %109, align 8
  %111 = icmp ne i32 %110, 0
  br label %112

112:                                              ; preds = %108, %103
  %113 = phi i1 [ false, %103 ], [ %111, %108 ]
  %114 = bitcast i32* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %114) #13
  store i32 -1431655766, i32* %6, align 4
  %115 = bitcast i32* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %115) #13
  store i32 -1431655766, i32* %7, align 4
  %116 = call zeroext i1 @_ZNK15GrBackendFormat10asVkFormatEP8VkFormat(%class.GrBackendFormat* %96, i32* nonnull %6) #13
  %117 = call zeroext i1 @_ZNK15GrBackendFormat10asVkFormatEP8VkFormat(%class.GrBackendFormat* %105, i32* nonnull %7) #13
  %118 = icmp slt i32 %55, 2
  %119 = icmp slt i32 %95, 2
  %120 = and i1 %118, %119
  %121 = icmp eq i32 %55, %95
  %122 = or i1 %121, %120
  %123 = xor i1 %122, true
  %124 = or i1 %104, %113
  %125 = or i1 %124, %123
  br i1 %125, label %132, label %126

126:                                              ; preds = %112
  %127 = load i32, i32* %7, align 4
  %128 = load i32, i32* %6, align 4
  %129 = call fastcc i32 @_ZL26format_compatibility_class8VkFormat(i32 %127) #13
  %130 = call fastcc i32 @_ZL26format_compatibility_class8VkFormat(i32 %128) #13
  %131 = icmp eq i32 %129, %130
  br i1 %131, label %160, label %132

132:                                              ; preds = %112, %126
  %133 = load i32, i32* %6, align 4
  %134 = load i32, i32* %7, align 4
  %135 = call dereferenceable(40) %"struct.GrVkCaps::FormatInfo"* @_ZN8GrVkCaps13getFormatInfoE8VkFormat(%class.GrVkCaps* %0, i32 %133) #13
  %136 = getelementptr inbounds %"struct.GrVkCaps::FormatInfo", %"struct.GrVkCaps::FormatInfo"* %135, i64 0, i32 0
  %137 = load i16, i16* %136, align 2
  %138 = and i16 %137, 8
  %139 = icmp eq i16 %138, 0
  br i1 %139, label %151, label %140

140:                                              ; preds = %132
  %141 = call dereferenceable(40) %"struct.GrVkCaps::FormatInfo"* @_ZN8GrVkCaps13getFormatInfoE8VkFormat(%class.GrVkCaps* %0, i32 %134) #13
  %142 = getelementptr inbounds %"struct.GrVkCaps::FormatInfo", %"struct.GrVkCaps::FormatInfo"* %141, i64 0, i32 0
  %143 = load i16, i16* %142, align 2
  %144 = and i16 %143, 4
  %145 = icmp eq i16 %144, 0
  br i1 %145, label %151, label %146

146:                                              ; preds = %140
  %147 = icmp sgt i32 %55, 1
  %148 = icmp sgt i32 %95, 1
  %149 = or i1 %147, %148
  %150 = or i1 %149, %124
  br i1 %150, label %151, label %160

151:                                              ; preds = %146, %132, %140
  %152 = load i32, i32* %6, align 4
  %153 = load i32, i32* %7, align 4
  %154 = icmp sgt i32 %95, 1
  %155 = and i1 %118, %154
  %156 = icmp eq i32 %153, %152
  %157 = and i1 %155, %156
  %158 = xor i1 %124, true
  %159 = and i1 %157, %158
  br label %160

160:                                              ; preds = %146, %151, %126
  %161 = phi i1 [ true, %146 ], [ true, %126 ], [ %159, %151 ]
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %115) #13
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %114) #13
  br label %162

162:                                              ; preds = %11, %62, %22, %160
  %163 = phi i1 [ false, %11 ], [ %161, %160 ], [ false, %22 ], [ false, %62 ]
  ret i1 %163
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #4

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #4

declare %struct.GrVkYcbcrConversionInfo* @_ZNK15GrBackendFormat24getVkYcbcrConversionInfoEv(%class.GrBackendFormat*) local_unnamed_addr #1

declare zeroext i1 @_ZNK15GrBackendFormat10asVkFormatEP8VkFormat(%class.GrBackendFormat*, i32*) local_unnamed_addr #1

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #4

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #4

declare zeroext i1 @_ZNK14GrVkExtensions12hasExtensionEPKcj(%class.GrVkExtensions*, i8*, i32) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN8GrVkCaps10initGrCapsEPK13GrVkInterfaceP18VkPhysicalDevice_TRK26VkPhysicalDevicePropertiesRK32VkPhysicalDeviceMemoryPropertiesRK25VkPhysicalDeviceFeatures2RK14GrVkExtensions(%class.GrVkCaps* nocapture, %struct.GrVkInterface* nocapture readonly, %struct.VkPhysicalDevice_T*, %struct.VkPhysicalDeviceProperties* nocapture readonly dereferenceable(824), %struct.VkPhysicalDeviceMemoryProperties* nocapture readnone dereferenceable(520), %struct.VkPhysicalDeviceFeatures2* nocapture readonly dereferenceable(240), %class.GrVkExtensions* dereferenceable(16)) local_unnamed_addr #0 align 2 {
  %8 = alloca %struct.VkPhysicalDeviceBlendOperationAdvancedPropertiesEXT, align 8
  %9 = alloca %struct.VkPhysicalDeviceProperties2, align 8
  %10 = getelementptr inbounds %struct.VkPhysicalDeviceProperties, %struct.VkPhysicalDeviceProperties* %3, i64 0, i32 7, i32 29
  %11 = load i32, i32* %10, align 4
  %12 = icmp ult i32 %11, 64
  %13 = select i1 %12, i32 %11, i32 64
  %14 = getelementptr inbounds %class.GrVkCaps, %class.GrVkCaps* %0, i64 0, i32 0, i32 10
  store i32 %13, i32* %14, align 8
  %15 = getelementptr inbounds %struct.VkPhysicalDeviceProperties, %struct.VkPhysicalDeviceProperties* %3, i64 0, i32 7, i32 102
  %16 = load i32, i32* %15, align 8
  %17 = icmp eq i32 %16, 0
  br i1 %17, label %23, label %18

18:                                               ; preds = %7
  %19 = getelementptr inbounds %class.GrVkCaps, %class.GrVkCaps* %0, i64 0, i32 0, i32 3
  %20 = bitcast i48* %19 to i64*
  %21 = load i64, i64* %20, align 8
  %22 = or i64 %21, 128
  store i64 %22, i64* %20, align 8
  br label %23

23:                                               ; preds = %7, %18
  %24 = tail call zeroext i1 @_ZNK14GrVkExtensions12hasExtensionEPKcj(%class.GrVkExtensions* %6, i8* getelementptr inbounds ([34 x i8], [34 x i8]* @.str.12, i64 0, i64 0), i32 1) #13
  %25 = getelementptr inbounds %class.GrVkCaps, %class.GrVkCaps* %0, i64 0, i32 0, i32 3
  %26 = bitcast i48* %25 to i64*
  %27 = load i64, i64* %26, align 8
  br i1 %24, label %28, label %30

28:                                               ; preds = %23
  %29 = or i64 %27, 4096
  store i64 %29, i64* %26, align 8
  br label %30

30:                                               ; preds = %23, %28
  %31 = phi i64 [ %29, %28 ], [ %27, %23 ]
  %32 = or i64 %31, 8192
  store i64 %32, i64* %26, align 8
  %33 = getelementptr inbounds %struct.VkPhysicalDeviceProperties, %struct.VkPhysicalDeviceProperties* %3, i64 0, i32 7, i32 1
  %34 = load i32, i32* %33, align 4
  %35 = icmp ult i32 %34, 2147483647
  %36 = select i1 %35, i32 %34, i32 2147483647
  %37 = getelementptr inbounds %class.GrVkCaps, %class.GrVkCaps* %0, i64 0, i32 0, i32 8
  store i32 %36, i32* %37, align 8
  %38 = load i32, i32* %33, align 4
  %39 = icmp ult i32 %38, 2147483647
  %40 = select i1 %39, i32 %38, i32 2147483647
  %41 = getelementptr inbounds %class.GrVkCaps, %class.GrVkCaps* %0, i64 0, i32 0, i32 11
  store i32 %40, i32* %41, align 4
  %42 = getelementptr inbounds %class.GrVkCaps, %class.GrVkCaps* %0, i64 0, i32 0, i32 19, i32 93
  %43 = load i8, i8* %42, align 1, !range !2
  %44 = icmp eq i8 %43, 0
  br i1 %44, label %48, label %45

45:                                               ; preds = %30
  %46 = icmp slt i32 %40, 4096
  %47 = select i1 %46, i32 %40, i32 4096
  store i32 %47, i32* %41, align 4
  br label %48

48:                                               ; preds = %30, %45
  %49 = getelementptr inbounds %class.GrVkCaps, %class.GrVkCaps* %0, i64 0, i32 0, i32 9
  store i32 %36, i32* %49, align 4
  %50 = getelementptr inbounds %struct.VkPhysicalDeviceProperties, %struct.VkPhysicalDeviceProperties* %3, i64 0, i32 7, i32 8
  %51 = load i32, i32* %50, align 4
  %52 = icmp ult i32 %51, 2147483647
  %53 = select i1 %52, i32 %51, i32 2147483647
  %54 = getelementptr inbounds %class.GrVkCaps, %class.GrVkCaps* %0, i64 0, i32 0, i32 16
  store i32 %53, i32* %54, align 8
  %55 = getelementptr inbounds %class.GrVkCaps, %class.GrVkCaps* %0, i64 0, i32 0, i32 7
  store i32 0, i32* %55, align 4
  %56 = getelementptr inbounds %class.GrVkCaps, %class.GrVkCaps* %0, i64 0, i32 0, i32 6
  store i32 7, i32* %56, align 8
  %57 = or i64 %31, 8224
  store i64 %57, i64* %26, align 8
  %58 = tail call zeroext i1 @_ZNK14GrVkExtensions12hasExtensionEPKcj(%class.GrVkExtensions* %6, i8* getelementptr inbounds ([32 x i8], [32 x i8]* @.str.13, i64 0, i64 0), i32 2) #13
  br i1 %58, label %59, label %103

59:                                               ; preds = %48
  %60 = getelementptr inbounds %class.GrVkCaps, %class.GrVkCaps* %0, i64 0, i32 10
  %61 = load i8, i8* %60, align 4, !range !2
  %62 = icmp eq i8 %61, 0
  br i1 %62, label %103, label %63

63:                                               ; preds = %59
  %64 = bitcast %struct.VkPhysicalDeviceBlendOperationAdvancedPropertiesEXT* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %64) #13
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %64, i8 -86, i64 40, i1 false)
  %65 = getelementptr inbounds %struct.VkPhysicalDeviceBlendOperationAdvancedPropertiesEXT, %struct.VkPhysicalDeviceBlendOperationAdvancedPropertiesEXT* %8, i64 0, i32 0
  store i32 1000148001, i32* %65, align 8
  %66 = getelementptr inbounds %struct.VkPhysicalDeviceBlendOperationAdvancedPropertiesEXT, %struct.VkPhysicalDeviceBlendOperationAdvancedPropertiesEXT* %8, i64 0, i32 1
  store i8* null, i8** %66, align 8
  %67 = bitcast %struct.VkPhysicalDeviceProperties2* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 840, i8* nonnull %67) #13
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %67, i8* align 8 bitcast ({ i32, [4 x i8], i8*, { i32, i32, i32, i32, i32, [256 x i8], [16 x i8], [4 x i8], { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, [4 x i8], i64, i64, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, [3 x i32], i32, [3 x i32], i32, i32, i32, i32, i32, float, float, i32, [2 x i32], [2 x float], i32, [4 x i8], i64, i64, i64, i64, i32, i32, i32, i32, float, float, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, float, i32, i32, i32, i32, [2 x float], [2 x float], float, float, i32, i32, [4 x i8], i64, i64, i64 }, %struct.VkPhysicalDeviceSparseProperties, [4 x i8] } }* @__const._ZN8GrVkCaps10initGrCapsEPK13GrVkInterfaceP18VkPhysicalDevice_TRK26VkPhysicalDevicePropertiesRK32VkPhysicalDeviceMemoryPropertiesRK25VkPhysicalDeviceFeatures2RK14GrVkExtensions.props to i8*), i64 840, i1 false)
  %68 = getelementptr inbounds %struct.VkPhysicalDeviceProperties2, %struct.VkPhysicalDeviceProperties2* %9, i64 0, i32 0
  store i32 1000059001, i32* %68, align 8
  %69 = getelementptr inbounds %struct.VkPhysicalDeviceProperties2, %struct.VkPhysicalDeviceProperties2* %9, i64 0, i32 1
  %70 = bitcast i8** %69 to %struct.VkPhysicalDeviceBlendOperationAdvancedPropertiesEXT**
  store %struct.VkPhysicalDeviceBlendOperationAdvancedPropertiesEXT* %8, %struct.VkPhysicalDeviceBlendOperationAdvancedPropertiesEXT** %70, align 8
  %71 = getelementptr inbounds %struct.GrVkInterface, %struct.GrVkInterface* %1, i64 0, i32 1, i32 136, i32 0
  %72 = load void (%struct.VkPhysicalDevice_T*, %struct.VkPhysicalDeviceProperties2*)*, void (%struct.VkPhysicalDevice_T*, %struct.VkPhysicalDeviceProperties2*)** %71, align 8
  call void %72(%struct.VkPhysicalDevice_T* %2, %struct.VkPhysicalDeviceProperties2* nonnull %9) #13
  %73 = getelementptr inbounds %struct.VkPhysicalDeviceBlendOperationAdvancedPropertiesEXT, %struct.VkPhysicalDeviceBlendOperationAdvancedPropertiesEXT* %8, i64 0, i32 7
  %74 = load i32, i32* %73, align 4
  %75 = icmp eq i32 %74, 1
  br i1 %75, label %76, label %102

76:                                               ; preds = %63
  %77 = getelementptr inbounds %class.GrVkCaps, %class.GrVkCaps* %0, i64 0, i32 0, i32 2, i32 0
  %78 = load %class.GrShaderCaps*, %class.GrShaderCaps** %77, align 8
  %79 = getelementptr inbounds %class.GrShaderCaps, %class.GrShaderCaps* %78, i64 0, i32 18
  store i32 1, i32* %79, align 8
  %80 = getelementptr inbounds %struct.VkPhysicalDeviceFeatures2, %struct.VkPhysicalDeviceFeatures2* %5, i64 0, i32 1
  %81 = load i8*, i8** %80, align 8
  %82 = icmp eq i8* %81, null
  br i1 %82, label %98, label %83

83:                                               ; preds = %76, %88
  %84 = phi i8* [ %91, %88 ], [ %81, %76 ]
  %85 = bitcast i8* %84 to i32*
  %86 = load i32, i32* %85, align 8
  %87 = icmp eq i32 %86, 1000148000
  br i1 %87, label %93, label %88

88:                                               ; preds = %83
  %89 = getelementptr inbounds i8, i8* %84, i64 8
  %90 = bitcast i8* %89 to i8**
  %91 = load i8*, i8** %90, align 8
  %92 = icmp eq i8* %91, null
  br i1 %92, label %98, label %83

93:                                               ; preds = %83
  %94 = getelementptr inbounds i8, i8* %84, i64 16
  %95 = bitcast i8* %94 to i32*
  %96 = load i32, i32* %95, align 8
  %97 = icmp eq i32 %96, 1
  br i1 %97, label %99, label %98

98:                                               ; preds = %88, %76, %93
  br label %99

99:                                               ; preds = %93, %98
  %100 = phi i32 [ 1, %98 ], [ 2, %93 ]
  %101 = getelementptr inbounds %class.GrVkCaps, %class.GrVkCaps* %0, i64 0, i32 0, i32 4
  store i32 %100, i32* %101, align 8
  br label %102

102:                                              ; preds = %99, %63
  call void @llvm.lifetime.end.p0i8(i64 840, i8* nonnull %67) #13
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %64) #13
  br label %103

103:                                              ; preds = %59, %102, %48
  %104 = getelementptr inbounds %struct.VkPhysicalDeviceProperties, %struct.VkPhysicalDeviceProperties* %3, i64 0, i32 2
  %105 = load i32, i32* %104, align 8
  %106 = icmp eq i32 %105, 5045
  br i1 %106, label %107, label %111

107:                                              ; preds = %103
  %108 = load i64, i64* %26, align 8
  %109 = or i64 %108, 4294967296
  store i64 %109, i64* %26, align 8
  %110 = load i32, i32* %104, align 8
  br label %111

111:                                              ; preds = %107, %103
  %112 = phi i32 [ %110, %107 ], [ %105, %103 ]
  %113 = icmp eq i32 %112, 20803
  br i1 %113, label %114, label %117

114:                                              ; preds = %111
  %115 = load i64, i64* %26, align 8
  %116 = or i64 %115, 16777216
  store i64 %116, i64* %26, align 8
  br label %117

117:                                              ; preds = %114, %111
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN8GrVkCaps14initShaderCapsERK26VkPhysicalDevicePropertiesRK25VkPhysicalDeviceFeatures2(%class.GrVkCaps* nocapture readonly, %struct.VkPhysicalDeviceProperties* nocapture readonly dereferenceable(824), %struct.VkPhysicalDeviceFeatures2* nocapture readonly dereferenceable(240)) local_unnamed_addr #0 align 2 {
  %4 = getelementptr inbounds %class.GrVkCaps, %class.GrVkCaps* %0, i64 0, i32 0, i32 2, i32 0
  %5 = load %class.GrShaderCaps*, %class.GrShaderCaps** %4, align 8
  %6 = getelementptr inbounds %class.GrShaderCaps, %class.GrShaderCaps* %5, i64 0, i32 3
  store i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.14, i64 0, i64 0), i8** %6, align 8
  %7 = getelementptr inbounds %class.GrShaderCaps, %class.GrShaderCaps* %5, i64 0, i32 2
  %8 = bitcast i56* %7 to i64*
  %9 = load i64, i64* %8, align 8
  %10 = or i64 %9, 1536
  store i64 %10, i64* %8, align 8
  %11 = getelementptr inbounds %struct.VkPhysicalDeviceProperties, %struct.VkPhysicalDeviceProperties* %1, i64 0, i32 2
  %12 = load i32, i32* %11, align 8
  %13 = icmp ne i32 %12, 20803
  %14 = zext i1 %13 to i64
  %15 = shl nuw nsw i64 %14, 11
  %16 = and i64 %10, -10242
  %17 = or i64 %16, %15
  %18 = or i64 %17, 8193
  store i64 %18, i64* %8, align 8
  %19 = load i32, i32* %11, align 8
  %20 = icmp eq i32 %19, 5045
  %21 = zext i1 %20 to i64
  %22 = shl nuw nsw i64 %21, 42
  %23 = and i64 %18, -4398046511105
  %24 = or i64 %23, %22
  store i64 %24, i64* %8, align 8
  %25 = getelementptr inbounds %struct.VkPhysicalDeviceFeatures2, %struct.VkPhysicalDeviceFeatures2* %2, i64 0, i32 2, i32 7
  %26 = load i32, i32* %25, align 4
  %27 = icmp ne i32 %26, 0
  %28 = zext i1 %27 to i64
  %29 = shl nuw nsw i64 %28, 4
  %30 = and i64 %24, -491633
  %31 = or i64 %29, %30
  %32 = or i64 %31, 229472
  store i64 %32, i64* %8, align 8
  %33 = getelementptr inbounds %struct.VkPhysicalDeviceProperties, %struct.VkPhysicalDeviceProperties* %1, i64 0, i32 7, i32 17
  %34 = getelementptr inbounds %struct.VkPhysicalDeviceProperties, %struct.VkPhysicalDeviceProperties* %1, i64 0, i32 7, i32 14
  %35 = load i32, i32* %34, align 4
  %36 = load i32, i32* %33, align 4
  %37 = icmp ult i32 %35, %36
  %38 = select i1 %37, i32 %35, i32 %36
  %39 = icmp ult i32 %38, 2147483647
  %40 = select i1 %39, i32 %38, i32 2147483647
  %41 = getelementptr inbounds %class.GrShaderCaps, %class.GrShaderCaps* %5, i64 0, i32 16
  store i32 %40, i32* %41, align 8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN8GrVkCaps15initFormatTableEPK13GrVkInterfaceP18VkPhysicalDevice_TRK26VkPhysicalDeviceProperties(%class.GrVkCaps*, %struct.GrVkInterface* readonly, %struct.VkPhysicalDevice_T*, %struct.VkPhysicalDeviceProperties* readonly dereferenceable(824)) local_unnamed_addr #0 align 2 {
  %5 = alloca %class.GrSwizzle, align 2
  %6 = alloca %class.GrSwizzle, align 2
  %7 = alloca %class.GrSwizzle, align 2
  %8 = alloca %class.GrSwizzle, align 2
  %9 = alloca %class.GrSwizzle, align 2
  %10 = alloca %class.GrSwizzle, align 2
  %11 = alloca %class.GrSwizzle, align 2
  %12 = alloca %class.GrSwizzle, align 2
  %13 = alloca %class.GrSwizzle, align 2
  %14 = alloca %class.GrSwizzle, align 2
  %15 = getelementptr %class.GrVkCaps, %class.GrVkCaps* %0, i64 0, i32 3, i64 0
  %16 = bitcast i32* %15 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 4 %16, i8 0, i64 124, i1 false)
  %17 = getelementptr inbounds %class.GrVkCaps, %class.GrVkCaps* %0, i64 0, i32 2, i64 0
  tail call void @_ZN8GrVkCaps10FormatInfo4initEPK13GrVkInterfaceP18VkPhysicalDevice_TRK26VkPhysicalDeviceProperties8VkFormat(%"struct.GrVkCaps::FormatInfo"* %17, %struct.GrVkInterface* %1, %struct.VkPhysicalDevice_T* %2, %struct.VkPhysicalDeviceProperties* dereferenceable(824) %3, i32 37)
  %18 = getelementptr inbounds %"struct.GrVkCaps::FormatInfo", %"struct.GrVkCaps::FormatInfo"* %17, i64 0, i32 0
  %19 = load i16, i16* %18, align 8
  %20 = and i16 %19, 1
  %21 = icmp eq i16 %20, 0
  br i1 %21, label %57, label %22

22:                                               ; preds = %4
  %23 = getelementptr inbounds %class.GrVkCaps, %class.GrVkCaps* %0, i64 0, i32 2, i64 0, i32 5
  store i32 2, i32* %23, align 8
  %24 = tail call i8* @_Znam(i64 32) #14
  %25 = getelementptr inbounds i8, i8* %24, i64 12
  %26 = bitcast i8* %25 to %class.GrSwizzle*
  tail call void @llvm.memset.p0i8.i64(i8* nonnull align 4 %24, i8 0, i64 16, i1 false) #13
  tail call void @_ZN9GrSwizzleC2EPKc(%class.GrSwizzle* %26, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.35, i64 0, i64 0)) #13
  %27 = getelementptr inbounds i8, i8* %24, i64 14
  %28 = bitcast i8* %27 to %class.GrSwizzle*
  tail call void @_ZN9GrSwizzleC2EPKc(%class.GrSwizzle* %28, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.35, i64 0, i64 0)) #13
  %29 = getelementptr inbounds i8, i8* %24, i64 16
  %30 = getelementptr inbounds i8, i8* %24, i64 28
  %31 = bitcast i8* %30 to %class.GrSwizzle*
  tail call void @llvm.memset.p0i8.i64(i8* align 4 %29, i8 0, i64 16, i1 false) #13
  tail call void @_ZN9GrSwizzleC2EPKc(%class.GrSwizzle* %31, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.35, i64 0, i64 0)) #13
  %32 = getelementptr inbounds i8, i8* %24, i64 30
  %33 = bitcast i8* %32 to %class.GrSwizzle*
  tail call void @_ZN9GrSwizzleC2EPKc(%class.GrSwizzle* %33, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.35, i64 0, i64 0)) #13
  %34 = ptrtoint i8* %24 to i64
  %35 = getelementptr inbounds %class.GrVkCaps, %class.GrVkCaps* %0, i64 0, i32 2, i64 0, i32 4
  %36 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %35, i64 0, i32 0, i32 0, i32 0
  %37 = load %"struct.GrVkCaps::ColorTypeInfo"*, %"struct.GrVkCaps::ColorTypeInfo"** %36, align 8
  %38 = bitcast %"class.std::__1::unique_ptr"* %35 to i64*
  store i64 %34, i64* %38, align 8
  %39 = icmp eq %"struct.GrVkCaps::ColorTypeInfo"* %37, null
  %40 = bitcast i8* %24 to %"struct.GrVkCaps::ColorTypeInfo"*
  br i1 %39, label %44, label %41

41:                                               ; preds = %22
  %42 = bitcast %"struct.GrVkCaps::ColorTypeInfo"* %37 to i8*
  tail call void @_ZdaPv(i8* %42) #14
  %43 = load %"struct.GrVkCaps::ColorTypeInfo"*, %"struct.GrVkCaps::ColorTypeInfo"** %36, align 8
  br label %44

44:                                               ; preds = %41, %22
  %45 = phi %"struct.GrVkCaps::ColorTypeInfo"* [ %43, %41 ], [ %40, %22 ]
  %46 = getelementptr inbounds %"struct.GrVkCaps::ColorTypeInfo", %"struct.GrVkCaps::ColorTypeInfo"* %45, i64 0, i32 0
  store i32 4, i32* %46, align 4
  %47 = getelementptr inbounds %"struct.GrVkCaps::ColorTypeInfo", %"struct.GrVkCaps::ColorTypeInfo"* %45, i64 0, i32 1
  store i32 4, i32* %47, align 4
  %48 = getelementptr inbounds %"struct.GrVkCaps::ColorTypeInfo", %"struct.GrVkCaps::ColorTypeInfo"* %45, i64 0, i32 2
  store i32 3, i32* %48, align 4
  %49 = load %"struct.GrVkCaps::ColorTypeInfo"*, %"struct.GrVkCaps::ColorTypeInfo"** %36, align 8
  %50 = getelementptr inbounds %"struct.GrVkCaps::ColorTypeInfo", %"struct.GrVkCaps::ColorTypeInfo"* %49, i64 1, i32 0
  store i32 6, i32* %50, align 4
  %51 = getelementptr inbounds %"struct.GrVkCaps::ColorTypeInfo", %"struct.GrVkCaps::ColorTypeInfo"* %49, i64 1, i32 1
  store i32 6, i32* %51, align 4
  %52 = getelementptr inbounds %"struct.GrVkCaps::ColorTypeInfo", %"struct.GrVkCaps::ColorTypeInfo"* %49, i64 1, i32 2
  store i32 1, i32* %52, align 4
  %53 = bitcast %class.GrSwizzle* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 2, i8* nonnull %53) #13
  call void @_ZN9GrSwizzleC2EPKc(%class.GrSwizzle* nonnull %5, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.39, i64 0, i64 0)) #13
  %54 = getelementptr inbounds %class.GrSwizzle, %class.GrSwizzle* %5, i64 0, i32 0
  %55 = load i16, i16* %54, align 2
  %56 = getelementptr inbounds %"struct.GrVkCaps::ColorTypeInfo", %"struct.GrVkCaps::ColorTypeInfo"* %49, i64 1, i32 3, i32 0
  store i16 %55, i16* %56, align 2
  call void @llvm.lifetime.end.p0i8(i64 2, i8* nonnull %53) #13
  br label %57

57:                                               ; preds = %4, %44
  %58 = getelementptr inbounds %class.GrVkCaps, %class.GrVkCaps* %0, i64 0, i32 2, i64 1
  call void @_ZN8GrVkCaps10FormatInfo4initEPK13GrVkInterfaceP18VkPhysicalDevice_TRK26VkPhysicalDeviceProperties8VkFormat(%"struct.GrVkCaps::FormatInfo"* %58, %struct.GrVkInterface* %1, %struct.VkPhysicalDevice_T* %2, %struct.VkPhysicalDeviceProperties* dereferenceable(824) %3, i32 9)
  %59 = getelementptr inbounds %"struct.GrVkCaps::FormatInfo", %"struct.GrVkCaps::FormatInfo"* %58, i64 0, i32 0
  %60 = load i16, i16* %59, align 8
  %61 = and i16 %60, 1
  %62 = icmp eq i16 %61, 0
  br i1 %62, label %106, label %63

63:                                               ; preds = %57
  %64 = getelementptr inbounds %class.GrVkCaps, %class.GrVkCaps* %0, i64 0, i32 2, i64 1, i32 5
  store i32 2, i32* %64, align 8
  %65 = call i8* @_Znam(i64 32) #14
  %66 = getelementptr inbounds i8, i8* %65, i64 12
  %67 = bitcast i8* %66 to %class.GrSwizzle*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 4 %65, i8 0, i64 16, i1 false) #13
  call void @_ZN9GrSwizzleC2EPKc(%class.GrSwizzle* %67, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.35, i64 0, i64 0)) #13
  %68 = getelementptr inbounds i8, i8* %65, i64 14
  %69 = bitcast i8* %68 to %class.GrSwizzle*
  call void @_ZN9GrSwizzleC2EPKc(%class.GrSwizzle* %69, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.35, i64 0, i64 0)) #13
  %70 = getelementptr inbounds i8, i8* %65, i64 16
  %71 = getelementptr inbounds i8, i8* %65, i64 28
  %72 = bitcast i8* %71 to %class.GrSwizzle*
  call void @llvm.memset.p0i8.i64(i8* align 4 %70, i8 0, i64 16, i1 false) #13
  call void @_ZN9GrSwizzleC2EPKc(%class.GrSwizzle* %72, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.35, i64 0, i64 0)) #13
  %73 = getelementptr inbounds i8, i8* %65, i64 30
  %74 = bitcast i8* %73 to %class.GrSwizzle*
  call void @_ZN9GrSwizzleC2EPKc(%class.GrSwizzle* %74, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.35, i64 0, i64 0)) #13
  %75 = ptrtoint i8* %65 to i64
  %76 = getelementptr inbounds %class.GrVkCaps, %class.GrVkCaps* %0, i64 0, i32 2, i64 1, i32 4
  %77 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %76, i64 0, i32 0, i32 0, i32 0
  %78 = load %"struct.GrVkCaps::ColorTypeInfo"*, %"struct.GrVkCaps::ColorTypeInfo"** %77, align 8
  %79 = bitcast %"class.std::__1::unique_ptr"* %76 to i64*
  store i64 %75, i64* %79, align 8
  %80 = icmp eq %"struct.GrVkCaps::ColorTypeInfo"* %78, null
  %81 = bitcast i8* %65 to %"struct.GrVkCaps::ColorTypeInfo"*
  br i1 %80, label %85, label %82

82:                                               ; preds = %63
  %83 = bitcast %"struct.GrVkCaps::ColorTypeInfo"* %78 to i8*
  call void @_ZdaPv(i8* %83) #14
  %84 = load %"struct.GrVkCaps::ColorTypeInfo"*, %"struct.GrVkCaps::ColorTypeInfo"** %77, align 8
  br label %85

85:                                               ; preds = %82, %63
  %86 = phi %"struct.GrVkCaps::ColorTypeInfo"* [ %84, %82 ], [ %81, %63 ]
  %87 = getelementptr inbounds %"struct.GrVkCaps::ColorTypeInfo", %"struct.GrVkCaps::ColorTypeInfo"* %86, i64 0, i32 0
  store i32 1, i32* %87, align 4
  %88 = getelementptr inbounds %"struct.GrVkCaps::ColorTypeInfo", %"struct.GrVkCaps::ColorTypeInfo"* %86, i64 0, i32 1
  store i32 1, i32* %88, align 4
  %89 = getelementptr inbounds %"struct.GrVkCaps::ColorTypeInfo", %"struct.GrVkCaps::ColorTypeInfo"* %86, i64 0, i32 2
  store i32 3, i32* %89, align 4
  %90 = bitcast %class.GrSwizzle* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 2, i8* nonnull %90) #13
  call void @_ZN9GrSwizzleC2EPKc(%class.GrSwizzle* nonnull %6, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.15, i64 0, i64 0))
  %91 = getelementptr inbounds %class.GrSwizzle, %class.GrSwizzle* %6, i64 0, i32 0
  %92 = load i16, i16* %91, align 2
  %93 = getelementptr inbounds %"struct.GrVkCaps::ColorTypeInfo", %"struct.GrVkCaps::ColorTypeInfo"* %86, i64 0, i32 3, i32 0
  store i16 %92, i16* %93, align 2
  call void @llvm.lifetime.end.p0i8(i64 2, i8* nonnull %90) #13
  %94 = bitcast %class.GrSwizzle* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 2, i8* nonnull %94) #13
  call void @_ZN9GrSwizzleC2EPKc(%class.GrSwizzle* nonnull %7, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.16, i64 0, i64 0))
  %95 = getelementptr inbounds %class.GrSwizzle, %class.GrSwizzle* %7, i64 0, i32 0
  %96 = load i16, i16* %95, align 2
  %97 = getelementptr inbounds %"struct.GrVkCaps::ColorTypeInfo", %"struct.GrVkCaps::ColorTypeInfo"* %86, i64 0, i32 4, i32 0
  store i16 %96, i16* %97, align 2
  call void @llvm.lifetime.end.p0i8(i64 2, i8* nonnull %94) #13
  %98 = load %"struct.GrVkCaps::ColorTypeInfo"*, %"struct.GrVkCaps::ColorTypeInfo"** %77, align 8
  %99 = getelementptr inbounds %"struct.GrVkCaps::ColorTypeInfo", %"struct.GrVkCaps::ColorTypeInfo"* %98, i64 1, i32 0
  store i32 11, i32* %99, align 4
  %100 = getelementptr inbounds %"struct.GrVkCaps::ColorTypeInfo", %"struct.GrVkCaps::ColorTypeInfo"* %98, i64 1, i32 1
  store i32 11, i32* %100, align 4
  %101 = getelementptr inbounds %"struct.GrVkCaps::ColorTypeInfo", %"struct.GrVkCaps::ColorTypeInfo"* %98, i64 1, i32 2
  store i32 1, i32* %101, align 4
  %102 = bitcast %class.GrSwizzle* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 2, i8* nonnull %102) #13
  call void @_ZN9GrSwizzleC2EPKc(%class.GrSwizzle* nonnull %8, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.17, i64 0, i64 0))
  %103 = getelementptr inbounds %class.GrSwizzle, %class.GrSwizzle* %8, i64 0, i32 0
  %104 = load i16, i16* %103, align 2
  %105 = getelementptr inbounds %"struct.GrVkCaps::ColorTypeInfo", %"struct.GrVkCaps::ColorTypeInfo"* %98, i64 1, i32 3, i32 0
  store i16 %104, i16* %105, align 2
  call void @llvm.lifetime.end.p0i8(i64 2, i8* nonnull %102) #13
  br label %106

106:                                              ; preds = %57, %85
  %107 = getelementptr inbounds %class.GrVkCaps, %class.GrVkCaps* %0, i64 0, i32 2, i64 2
  call void @_ZN8GrVkCaps10FormatInfo4initEPK13GrVkInterfaceP18VkPhysicalDevice_TRK26VkPhysicalDeviceProperties8VkFormat(%"struct.GrVkCaps::FormatInfo"* %107, %struct.GrVkInterface* %1, %struct.VkPhysicalDevice_T* %2, %struct.VkPhysicalDeviceProperties* dereferenceable(824) %3, i32 44)
  %108 = getelementptr inbounds %"struct.GrVkCaps::FormatInfo", %"struct.GrVkCaps::FormatInfo"* %107, i64 0, i32 0
  %109 = load i16, i16* %108, align 8
  %110 = and i16 %109, 1
  %111 = icmp eq i16 %110, 0
  br i1 %111, label %134, label %112

112:                                              ; preds = %106
  %113 = getelementptr inbounds %class.GrVkCaps, %class.GrVkCaps* %0, i64 0, i32 2, i64 2, i32 5
  store i32 1, i32* %113, align 8
  %114 = call i8* @_Znam(i64 16) #14
  %115 = getelementptr inbounds i8, i8* %114, i64 12
  %116 = bitcast i8* %115 to %class.GrSwizzle*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 4 %114, i8 0, i64 16, i1 false) #13
  call void @_ZN9GrSwizzleC2EPKc(%class.GrSwizzle* %116, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.35, i64 0, i64 0)) #13
  %117 = getelementptr inbounds i8, i8* %114, i64 14
  %118 = bitcast i8* %117 to %class.GrSwizzle*
  call void @_ZN9GrSwizzleC2EPKc(%class.GrSwizzle* %118, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.35, i64 0, i64 0)) #13
  %119 = ptrtoint i8* %114 to i64
  %120 = getelementptr inbounds %class.GrVkCaps, %class.GrVkCaps* %0, i64 0, i32 2, i64 2, i32 4
  %121 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %120, i64 0, i32 0, i32 0, i32 0
  %122 = load %"struct.GrVkCaps::ColorTypeInfo"*, %"struct.GrVkCaps::ColorTypeInfo"** %121, align 8
  %123 = bitcast %"class.std::__1::unique_ptr"* %120 to i64*
  store i64 %119, i64* %123, align 8
  %124 = icmp eq %"struct.GrVkCaps::ColorTypeInfo"* %122, null
  %125 = bitcast i8* %114 to %"struct.GrVkCaps::ColorTypeInfo"*
  br i1 %124, label %129, label %126

126:                                              ; preds = %112
  %127 = bitcast %"struct.GrVkCaps::ColorTypeInfo"* %122 to i8*
  call void @_ZdaPv(i8* %127) #14
  %128 = load %"struct.GrVkCaps::ColorTypeInfo"*, %"struct.GrVkCaps::ColorTypeInfo"** %121, align 8
  br label %129

129:                                              ; preds = %126, %112
  %130 = phi %"struct.GrVkCaps::ColorTypeInfo"* [ %128, %126 ], [ %125, %112 ]
  %131 = getelementptr inbounds %"struct.GrVkCaps::ColorTypeInfo", %"struct.GrVkCaps::ColorTypeInfo"* %130, i64 0, i32 0
  store i32 8, i32* %131, align 4
  %132 = getelementptr inbounds %"struct.GrVkCaps::ColorTypeInfo", %"struct.GrVkCaps::ColorTypeInfo"* %130, i64 0, i32 1
  store i32 8, i32* %132, align 4
  %133 = getelementptr inbounds %"struct.GrVkCaps::ColorTypeInfo", %"struct.GrVkCaps::ColorTypeInfo"* %130, i64 0, i32 2
  store i32 3, i32* %133, align 4
  br label %134

134:                                              ; preds = %106, %129
  %135 = getelementptr inbounds %class.GrVkCaps, %class.GrVkCaps* %0, i64 0, i32 2, i64 3
  call void @_ZN8GrVkCaps10FormatInfo4initEPK13GrVkInterfaceP18VkPhysicalDevice_TRK26VkPhysicalDeviceProperties8VkFormat(%"struct.GrVkCaps::FormatInfo"* %135, %struct.GrVkInterface* %1, %struct.VkPhysicalDevice_T* %2, %struct.VkPhysicalDeviceProperties* dereferenceable(824) %3, i32 4)
  %136 = getelementptr inbounds %"struct.GrVkCaps::FormatInfo", %"struct.GrVkCaps::FormatInfo"* %135, i64 0, i32 0
  %137 = load i16, i16* %136, align 8
  %138 = and i16 %137, 1
  %139 = icmp eq i16 %138, 0
  br i1 %139, label %162, label %140

140:                                              ; preds = %134
  %141 = getelementptr inbounds %class.GrVkCaps, %class.GrVkCaps* %0, i64 0, i32 2, i64 3, i32 5
  store i32 1, i32* %141, align 8
  %142 = call i8* @_Znam(i64 16) #14
  %143 = getelementptr inbounds i8, i8* %142, i64 12
  %144 = bitcast i8* %143 to %class.GrSwizzle*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 4 %142, i8 0, i64 16, i1 false) #13
  call void @_ZN9GrSwizzleC2EPKc(%class.GrSwizzle* %144, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.35, i64 0, i64 0)) #13
  %145 = getelementptr inbounds i8, i8* %142, i64 14
  %146 = bitcast i8* %145 to %class.GrSwizzle*
  call void @_ZN9GrSwizzleC2EPKc(%class.GrSwizzle* %146, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.35, i64 0, i64 0)) #13
  %147 = ptrtoint i8* %142 to i64
  %148 = getelementptr inbounds %class.GrVkCaps, %class.GrVkCaps* %0, i64 0, i32 2, i64 3, i32 4
  %149 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %148, i64 0, i32 0, i32 0, i32 0
  %150 = load %"struct.GrVkCaps::ColorTypeInfo"*, %"struct.GrVkCaps::ColorTypeInfo"** %149, align 8
  %151 = bitcast %"class.std::__1::unique_ptr"* %148 to i64*
  store i64 %147, i64* %151, align 8
  %152 = icmp eq %"struct.GrVkCaps::ColorTypeInfo"* %150, null
  %153 = bitcast i8* %142 to %"struct.GrVkCaps::ColorTypeInfo"*
  br i1 %152, label %157, label %154

154:                                              ; preds = %140
  %155 = bitcast %"struct.GrVkCaps::ColorTypeInfo"* %150 to i8*
  call void @_ZdaPv(i8* %155) #14
  %156 = load %"struct.GrVkCaps::ColorTypeInfo"*, %"struct.GrVkCaps::ColorTypeInfo"** %149, align 8
  br label %157

157:                                              ; preds = %154, %140
  %158 = phi %"struct.GrVkCaps::ColorTypeInfo"* [ %156, %154 ], [ %153, %140 ]
  %159 = getelementptr inbounds %"struct.GrVkCaps::ColorTypeInfo", %"struct.GrVkCaps::ColorTypeInfo"* %158, i64 0, i32 0
  store i32 2, i32* %159, align 4
  %160 = getelementptr inbounds %"struct.GrVkCaps::ColorTypeInfo", %"struct.GrVkCaps::ColorTypeInfo"* %158, i64 0, i32 1
  store i32 2, i32* %160, align 4
  %161 = getelementptr inbounds %"struct.GrVkCaps::ColorTypeInfo", %"struct.GrVkCaps::ColorTypeInfo"* %158, i64 0, i32 2
  store i32 3, i32* %161, align 4
  br label %162

162:                                              ; preds = %134, %157
  %163 = getelementptr inbounds %class.GrVkCaps, %class.GrVkCaps* %0, i64 0, i32 2, i64 4
  call void @_ZN8GrVkCaps10FormatInfo4initEPK13GrVkInterfaceP18VkPhysicalDevice_TRK26VkPhysicalDeviceProperties8VkFormat(%"struct.GrVkCaps::FormatInfo"* %163, %struct.GrVkInterface* %1, %struct.VkPhysicalDevice_T* %2, %struct.VkPhysicalDeviceProperties* dereferenceable(824) %3, i32 97)
  %164 = getelementptr inbounds %"struct.GrVkCaps::FormatInfo", %"struct.GrVkCaps::FormatInfo"* %163, i64 0, i32 0
  %165 = load i16, i16* %164, align 8
  %166 = and i16 %165, 1
  %167 = icmp eq i16 %166, 0
  br i1 %167, label %199, label %168

168:                                              ; preds = %162
  %169 = getelementptr inbounds %class.GrVkCaps, %class.GrVkCaps* %0, i64 0, i32 2, i64 4, i32 5
  store i32 2, i32* %169, align 8
  %170 = call i8* @_Znam(i64 32) #14
  %171 = getelementptr inbounds i8, i8* %170, i64 12
  %172 = bitcast i8* %171 to %class.GrSwizzle*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 4 %170, i8 0, i64 16, i1 false) #13
  call void @_ZN9GrSwizzleC2EPKc(%class.GrSwizzle* %172, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.35, i64 0, i64 0)) #13
  %173 = getelementptr inbounds i8, i8* %170, i64 14
  %174 = bitcast i8* %173 to %class.GrSwizzle*
  call void @_ZN9GrSwizzleC2EPKc(%class.GrSwizzle* %174, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.35, i64 0, i64 0)) #13
  %175 = getelementptr inbounds i8, i8* %170, i64 16
  %176 = getelementptr inbounds i8, i8* %170, i64 28
  %177 = bitcast i8* %176 to %class.GrSwizzle*
  call void @llvm.memset.p0i8.i64(i8* align 4 %175, i8 0, i64 16, i1 false) #13
  call void @_ZN9GrSwizzleC2EPKc(%class.GrSwizzle* %177, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.35, i64 0, i64 0)) #13
  %178 = getelementptr inbounds i8, i8* %170, i64 30
  %179 = bitcast i8* %178 to %class.GrSwizzle*
  call void @_ZN9GrSwizzleC2EPKc(%class.GrSwizzle* %179, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.35, i64 0, i64 0)) #13
  %180 = ptrtoint i8* %170 to i64
  %181 = getelementptr inbounds %class.GrVkCaps, %class.GrVkCaps* %0, i64 0, i32 2, i64 4, i32 4
  %182 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %181, i64 0, i32 0, i32 0, i32 0
  %183 = load %"struct.GrVkCaps::ColorTypeInfo"*, %"struct.GrVkCaps::ColorTypeInfo"** %182, align 8
  %184 = bitcast %"class.std::__1::unique_ptr"* %181 to i64*
  store i64 %180, i64* %184, align 8
  %185 = icmp eq %"struct.GrVkCaps::ColorTypeInfo"* %183, null
  %186 = bitcast i8* %170 to %"struct.GrVkCaps::ColorTypeInfo"*
  br i1 %185, label %190, label %187

187:                                              ; preds = %168
  %188 = bitcast %"struct.GrVkCaps::ColorTypeInfo"* %183 to i8*
  call void @_ZdaPv(i8* %188) #14
  %189 = load %"struct.GrVkCaps::ColorTypeInfo"*, %"struct.GrVkCaps::ColorTypeInfo"** %182, align 8
  br label %190

190:                                              ; preds = %187, %168
  %191 = phi %"struct.GrVkCaps::ColorTypeInfo"* [ %189, %187 ], [ %186, %168 ]
  %192 = getelementptr inbounds %"struct.GrVkCaps::ColorTypeInfo", %"struct.GrVkCaps::ColorTypeInfo"* %191, i64 0, i32 0
  store i32 14, i32* %192, align 4
  %193 = getelementptr inbounds %"struct.GrVkCaps::ColorTypeInfo", %"struct.GrVkCaps::ColorTypeInfo"* %191, i64 0, i32 1
  store i32 14, i32* %193, align 4
  %194 = getelementptr inbounds %"struct.GrVkCaps::ColorTypeInfo", %"struct.GrVkCaps::ColorTypeInfo"* %191, i64 0, i32 2
  store i32 3, i32* %194, align 4
  %195 = load %"struct.GrVkCaps::ColorTypeInfo"*, %"struct.GrVkCaps::ColorTypeInfo"** %182, align 8
  %196 = getelementptr inbounds %"struct.GrVkCaps::ColorTypeInfo", %"struct.GrVkCaps::ColorTypeInfo"* %195, i64 1, i32 0
  store i32 15, i32* %196, align 4
  %197 = getelementptr inbounds %"struct.GrVkCaps::ColorTypeInfo", %"struct.GrVkCaps::ColorTypeInfo"* %195, i64 1, i32 1
  store i32 15, i32* %197, align 4
  %198 = getelementptr inbounds %"struct.GrVkCaps::ColorTypeInfo", %"struct.GrVkCaps::ColorTypeInfo"* %195, i64 1, i32 2
  store i32 3, i32* %198, align 4
  br label %199

199:                                              ; preds = %162, %190
  %200 = getelementptr inbounds %class.GrVkCaps, %class.GrVkCaps* %0, i64 0, i32 2, i64 5
  call void @_ZN8GrVkCaps10FormatInfo4initEPK13GrVkInterfaceP18VkPhysicalDevice_TRK26VkPhysicalDeviceProperties8VkFormat(%"struct.GrVkCaps::FormatInfo"* %200, %struct.GrVkInterface* %1, %struct.VkPhysicalDevice_T* %2, %struct.VkPhysicalDeviceProperties* dereferenceable(824) %3, i32 76)
  %201 = getelementptr inbounds %"struct.GrVkCaps::FormatInfo", %"struct.GrVkCaps::FormatInfo"* %200, i64 0, i32 0
  %202 = load i16, i16* %201, align 8
  %203 = and i16 %202, 1
  %204 = icmp eq i16 %203, 0
  br i1 %204, label %235, label %205

205:                                              ; preds = %199
  %206 = getelementptr inbounds %class.GrVkCaps, %class.GrVkCaps* %0, i64 0, i32 2, i64 5, i32 5
  store i32 1, i32* %206, align 8
  %207 = call i8* @_Znam(i64 16) #14
  %208 = getelementptr inbounds i8, i8* %207, i64 12
  %209 = bitcast i8* %208 to %class.GrSwizzle*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 4 %207, i8 0, i64 16, i1 false) #13
  call void @_ZN9GrSwizzleC2EPKc(%class.GrSwizzle* %209, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.35, i64 0, i64 0)) #13
  %210 = getelementptr inbounds i8, i8* %207, i64 14
  %211 = bitcast i8* %210 to %class.GrSwizzle*
  call void @_ZN9GrSwizzleC2EPKc(%class.GrSwizzle* %211, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.35, i64 0, i64 0)) #13
  %212 = ptrtoint i8* %207 to i64
  %213 = getelementptr inbounds %class.GrVkCaps, %class.GrVkCaps* %0, i64 0, i32 2, i64 5, i32 4
  %214 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %213, i64 0, i32 0, i32 0, i32 0
  %215 = load %"struct.GrVkCaps::ColorTypeInfo"*, %"struct.GrVkCaps::ColorTypeInfo"** %214, align 8
  %216 = bitcast %"class.std::__1::unique_ptr"* %213 to i64*
  store i64 %212, i64* %216, align 8
  %217 = icmp eq %"struct.GrVkCaps::ColorTypeInfo"* %215, null
  %218 = bitcast i8* %207 to %"struct.GrVkCaps::ColorTypeInfo"*
  br i1 %217, label %222, label %219

219:                                              ; preds = %205
  %220 = bitcast %"struct.GrVkCaps::ColorTypeInfo"* %215 to i8*
  call void @_ZdaPv(i8* %220) #14
  %221 = load %"struct.GrVkCaps::ColorTypeInfo"*, %"struct.GrVkCaps::ColorTypeInfo"** %214, align 8
  br label %222

222:                                              ; preds = %219, %205
  %223 = phi %"struct.GrVkCaps::ColorTypeInfo"* [ %221, %219 ], [ %218, %205 ]
  %224 = getelementptr inbounds %"struct.GrVkCaps::ColorTypeInfo", %"struct.GrVkCaps::ColorTypeInfo"* %223, i64 0, i32 0
  store i32 13, i32* %224, align 4
  %225 = getelementptr inbounds %"struct.GrVkCaps::ColorTypeInfo", %"struct.GrVkCaps::ColorTypeInfo"* %223, i64 0, i32 1
  store i32 13, i32* %225, align 4
  %226 = getelementptr inbounds %"struct.GrVkCaps::ColorTypeInfo", %"struct.GrVkCaps::ColorTypeInfo"* %223, i64 0, i32 2
  store i32 3, i32* %226, align 4
  %227 = bitcast %class.GrSwizzle* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 2, i8* nonnull %227) #13
  call void @_ZN9GrSwizzleC2EPKc(%class.GrSwizzle* nonnull %9, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.15, i64 0, i64 0))
  %228 = getelementptr inbounds %class.GrSwizzle, %class.GrSwizzle* %9, i64 0, i32 0
  %229 = load i16, i16* %228, align 2
  %230 = getelementptr inbounds %"struct.GrVkCaps::ColorTypeInfo", %"struct.GrVkCaps::ColorTypeInfo"* %223, i64 0, i32 3, i32 0
  store i16 %229, i16* %230, align 2
  call void @llvm.lifetime.end.p0i8(i64 2, i8* nonnull %227) #13
  %231 = bitcast %class.GrSwizzle* %10 to i8*
  call void @llvm.lifetime.start.p0i8(i64 2, i8* nonnull %231) #13
  call void @_ZN9GrSwizzleC2EPKc(%class.GrSwizzle* nonnull %10, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.16, i64 0, i64 0))
  %232 = getelementptr inbounds %class.GrSwizzle, %class.GrSwizzle* %10, i64 0, i32 0
  %233 = load i16, i16* %232, align 2
  %234 = getelementptr inbounds %"struct.GrVkCaps::ColorTypeInfo", %"struct.GrVkCaps::ColorTypeInfo"* %223, i64 0, i32 4, i32 0
  store i16 %233, i16* %234, align 2
  call void @llvm.lifetime.end.p0i8(i64 2, i8* nonnull %231) #13
  br label %235

235:                                              ; preds = %199, %222
  %236 = getelementptr inbounds %class.GrVkCaps, %class.GrVkCaps* %0, i64 0, i32 2, i64 6
  call void @_ZN8GrVkCaps10FormatInfo4initEPK13GrVkInterfaceP18VkPhysicalDevice_TRK26VkPhysicalDeviceProperties8VkFormat(%"struct.GrVkCaps::FormatInfo"* %236, %struct.GrVkInterface* %1, %struct.VkPhysicalDevice_T* %2, %struct.VkPhysicalDeviceProperties* dereferenceable(824) %3, i32 23)
  %237 = getelementptr inbounds %"struct.GrVkCaps::FormatInfo", %"struct.GrVkCaps::FormatInfo"* %236, i64 0, i32 0
  %238 = load i16, i16* %237, align 8
  %239 = and i16 %238, 1
  %240 = icmp eq i16 %239, 0
  br i1 %240, label %263, label %241

241:                                              ; preds = %235
  %242 = getelementptr inbounds %class.GrVkCaps, %class.GrVkCaps* %0, i64 0, i32 2, i64 6, i32 5
  store i32 1, i32* %242, align 8
  %243 = call i8* @_Znam(i64 16) #14
  %244 = getelementptr inbounds i8, i8* %243, i64 12
  %245 = bitcast i8* %244 to %class.GrSwizzle*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 4 %243, i8 0, i64 16, i1 false) #13
  call void @_ZN9GrSwizzleC2EPKc(%class.GrSwizzle* %245, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.35, i64 0, i64 0)) #13
  %246 = getelementptr inbounds i8, i8* %243, i64 14
  %247 = bitcast i8* %246 to %class.GrSwizzle*
  call void @_ZN9GrSwizzleC2EPKc(%class.GrSwizzle* %247, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.35, i64 0, i64 0)) #13
  %248 = ptrtoint i8* %243 to i64
  %249 = getelementptr inbounds %class.GrVkCaps, %class.GrVkCaps* %0, i64 0, i32 2, i64 6, i32 4
  %250 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %249, i64 0, i32 0, i32 0, i32 0
  %251 = load %"struct.GrVkCaps::ColorTypeInfo"*, %"struct.GrVkCaps::ColorTypeInfo"** %250, align 8
  %252 = bitcast %"class.std::__1::unique_ptr"* %249 to i64*
  store i64 %248, i64* %252, align 8
  %253 = icmp eq %"struct.GrVkCaps::ColorTypeInfo"* %251, null
  %254 = bitcast i8* %243 to %"struct.GrVkCaps::ColorTypeInfo"*
  br i1 %253, label %258, label %255

255:                                              ; preds = %241
  %256 = bitcast %"struct.GrVkCaps::ColorTypeInfo"* %251 to i8*
  call void @_ZdaPv(i8* %256) #14
  %257 = load %"struct.GrVkCaps::ColorTypeInfo"*, %"struct.GrVkCaps::ColorTypeInfo"** %250, align 8
  br label %258

258:                                              ; preds = %255, %241
  %259 = phi %"struct.GrVkCaps::ColorTypeInfo"* [ %257, %255 ], [ %254, %241 ]
  %260 = getelementptr inbounds %"struct.GrVkCaps::ColorTypeInfo", %"struct.GrVkCaps::ColorTypeInfo"* %259, i64 0, i32 0
  store i32 6, i32* %260, align 4
  %261 = getelementptr inbounds %"struct.GrVkCaps::ColorTypeInfo", %"struct.GrVkCaps::ColorTypeInfo"* %259, i64 0, i32 1
  store i32 24, i32* %261, align 4
  %262 = getelementptr inbounds %"struct.GrVkCaps::ColorTypeInfo", %"struct.GrVkCaps::ColorTypeInfo"* %259, i64 0, i32 2
  store i32 3, i32* %262, align 4
  br label %263

263:                                              ; preds = %235, %258
  %264 = getelementptr inbounds %class.GrVkCaps, %class.GrVkCaps* %0, i64 0, i32 2, i64 7
  call void @_ZN8GrVkCaps10FormatInfo4initEPK13GrVkInterfaceP18VkPhysicalDevice_TRK26VkPhysicalDeviceProperties8VkFormat(%"struct.GrVkCaps::FormatInfo"* %264, %struct.GrVkInterface* %1, %struct.VkPhysicalDevice_T* %2, %struct.VkPhysicalDeviceProperties* dereferenceable(824) %3, i32 16)
  %265 = getelementptr inbounds %"struct.GrVkCaps::FormatInfo", %"struct.GrVkCaps::FormatInfo"* %264, i64 0, i32 0
  %266 = load i16, i16* %265, align 8
  %267 = and i16 %266, 1
  %268 = icmp eq i16 %267, 0
  br i1 %268, label %291, label %269

269:                                              ; preds = %263
  %270 = getelementptr inbounds %class.GrVkCaps, %class.GrVkCaps* %0, i64 0, i32 2, i64 7, i32 5
  store i32 1, i32* %270, align 8
  %271 = call i8* @_Znam(i64 16) #14
  %272 = getelementptr inbounds i8, i8* %271, i64 12
  %273 = bitcast i8* %272 to %class.GrSwizzle*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 4 %271, i8 0, i64 16, i1 false) #13
  call void @_ZN9GrSwizzleC2EPKc(%class.GrSwizzle* %273, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.35, i64 0, i64 0)) #13
  %274 = getelementptr inbounds i8, i8* %271, i64 14
  %275 = bitcast i8* %274 to %class.GrSwizzle*
  call void @_ZN9GrSwizzleC2EPKc(%class.GrSwizzle* %275, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.35, i64 0, i64 0)) #13
  %276 = ptrtoint i8* %271 to i64
  %277 = getelementptr inbounds %class.GrVkCaps, %class.GrVkCaps* %0, i64 0, i32 2, i64 7, i32 4
  %278 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %277, i64 0, i32 0, i32 0, i32 0
  %279 = load %"struct.GrVkCaps::ColorTypeInfo"*, %"struct.GrVkCaps::ColorTypeInfo"** %278, align 8
  %280 = bitcast %"class.std::__1::unique_ptr"* %277 to i64*
  store i64 %276, i64* %280, align 8
  %281 = icmp eq %"struct.GrVkCaps::ColorTypeInfo"* %279, null
  %282 = bitcast i8* %271 to %"struct.GrVkCaps::ColorTypeInfo"*
  br i1 %281, label %286, label %283

283:                                              ; preds = %269
  %284 = bitcast %"struct.GrVkCaps::ColorTypeInfo"* %279 to i8*
  call void @_ZdaPv(i8* %284) #14
  %285 = load %"struct.GrVkCaps::ColorTypeInfo"*, %"struct.GrVkCaps::ColorTypeInfo"** %278, align 8
  br label %286

286:                                              ; preds = %283, %269
  %287 = phi %"struct.GrVkCaps::ColorTypeInfo"* [ %285, %283 ], [ %282, %269 ]
  %288 = getelementptr inbounds %"struct.GrVkCaps::ColorTypeInfo", %"struct.GrVkCaps::ColorTypeInfo"* %287, i64 0, i32 0
  store i32 7, i32* %288, align 4
  %289 = getelementptr inbounds %"struct.GrVkCaps::ColorTypeInfo", %"struct.GrVkCaps::ColorTypeInfo"* %287, i64 0, i32 1
  store i32 7, i32* %289, align 4
  %290 = getelementptr inbounds %"struct.GrVkCaps::ColorTypeInfo", %"struct.GrVkCaps::ColorTypeInfo"* %287, i64 0, i32 2
  store i32 3, i32* %290, align 4
  br label %291

291:                                              ; preds = %263, %286
  %292 = getelementptr inbounds %class.GrVkCaps, %class.GrVkCaps* %0, i64 0, i32 2, i64 8
  call void @_ZN8GrVkCaps10FormatInfo4initEPK13GrVkInterfaceP18VkPhysicalDevice_TRK26VkPhysicalDeviceProperties8VkFormat(%"struct.GrVkCaps::FormatInfo"* %292, %struct.GrVkInterface* %1, %struct.VkPhysicalDevice_T* %2, %struct.VkPhysicalDeviceProperties* dereferenceable(824) %3, i32 64)
  %293 = getelementptr inbounds %"struct.GrVkCaps::FormatInfo", %"struct.GrVkCaps::FormatInfo"* %292, i64 0, i32 0
  %294 = load i16, i16* %293, align 8
  %295 = and i16 %294, 1
  %296 = icmp eq i16 %295, 0
  br i1 %296, label %319, label %297

297:                                              ; preds = %291
  %298 = getelementptr inbounds %class.GrVkCaps, %class.GrVkCaps* %0, i64 0, i32 2, i64 8, i32 5
  store i32 1, i32* %298, align 8
  %299 = call i8* @_Znam(i64 16) #14
  %300 = getelementptr inbounds i8, i8* %299, i64 12
  %301 = bitcast i8* %300 to %class.GrSwizzle*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 4 %299, i8 0, i64 16, i1 false) #13
  call void @_ZN9GrSwizzleC2EPKc(%class.GrSwizzle* %301, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.35, i64 0, i64 0)) #13
  %302 = getelementptr inbounds i8, i8* %299, i64 14
  %303 = bitcast i8* %302 to %class.GrSwizzle*
  call void @_ZN9GrSwizzleC2EPKc(%class.GrSwizzle* %303, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.35, i64 0, i64 0)) #13
  %304 = ptrtoint i8* %299 to i64
  %305 = getelementptr inbounds %class.GrVkCaps, %class.GrVkCaps* %0, i64 0, i32 2, i64 8, i32 4
  %306 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %305, i64 0, i32 0, i32 0, i32 0
  %307 = load %"struct.GrVkCaps::ColorTypeInfo"*, %"struct.GrVkCaps::ColorTypeInfo"** %306, align 8
  %308 = bitcast %"class.std::__1::unique_ptr"* %305 to i64*
  store i64 %304, i64* %308, align 8
  %309 = icmp eq %"struct.GrVkCaps::ColorTypeInfo"* %307, null
  %310 = bitcast i8* %299 to %"struct.GrVkCaps::ColorTypeInfo"*
  br i1 %309, label %314, label %311

311:                                              ; preds = %297
  %312 = bitcast %"struct.GrVkCaps::ColorTypeInfo"* %307 to i8*
  call void @_ZdaPv(i8* %312) #14
  %313 = load %"struct.GrVkCaps::ColorTypeInfo"*, %"struct.GrVkCaps::ColorTypeInfo"** %306, align 8
  br label %314

314:                                              ; preds = %311, %297
  %315 = phi %"struct.GrVkCaps::ColorTypeInfo"* [ %313, %311 ], [ %310, %297 ]
  %316 = getelementptr inbounds %"struct.GrVkCaps::ColorTypeInfo", %"struct.GrVkCaps::ColorTypeInfo"* %315, i64 0, i32 0
  store i32 9, i32* %316, align 4
  %317 = getelementptr inbounds %"struct.GrVkCaps::ColorTypeInfo", %"struct.GrVkCaps::ColorTypeInfo"* %315, i64 0, i32 1
  store i32 9, i32* %317, align 4
  %318 = getelementptr inbounds %"struct.GrVkCaps::ColorTypeInfo", %"struct.GrVkCaps::ColorTypeInfo"* %315, i64 0, i32 2
  store i32 3, i32* %318, align 4
  br label %319

319:                                              ; preds = %291, %314
  %320 = getelementptr inbounds %class.GrVkCaps, %class.GrVkCaps* %0, i64 0, i32 2, i64 9
  call void @_ZN8GrVkCaps10FormatInfo4initEPK13GrVkInterfaceP18VkPhysicalDevice_TRK26VkPhysicalDeviceProperties8VkFormat(%"struct.GrVkCaps::FormatInfo"* %320, %struct.GrVkInterface* %1, %struct.VkPhysicalDevice_T* %2, %struct.VkPhysicalDeviceProperties* dereferenceable(824) %3, i32 58)
  %321 = getelementptr inbounds %"struct.GrVkCaps::FormatInfo", %"struct.GrVkCaps::FormatInfo"* %320, i64 0, i32 0
  %322 = load i16, i16* %321, align 8
  %323 = and i16 %322, 1
  %324 = icmp eq i16 %323, 0
  br i1 %324, label %347, label %325

325:                                              ; preds = %319
  %326 = getelementptr inbounds %class.GrVkCaps, %class.GrVkCaps* %0, i64 0, i32 2, i64 9, i32 5
  store i32 1, i32* %326, align 8
  %327 = call i8* @_Znam(i64 16) #14
  %328 = getelementptr inbounds i8, i8* %327, i64 12
  %329 = bitcast i8* %328 to %class.GrSwizzle*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 4 %327, i8 0, i64 16, i1 false) #13
  call void @_ZN9GrSwizzleC2EPKc(%class.GrSwizzle* %329, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.35, i64 0, i64 0)) #13
  %330 = getelementptr inbounds i8, i8* %327, i64 14
  %331 = bitcast i8* %330 to %class.GrSwizzle*
  call void @_ZN9GrSwizzleC2EPKc(%class.GrSwizzle* %331, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.35, i64 0, i64 0)) #13
  %332 = ptrtoint i8* %327 to i64
  %333 = getelementptr inbounds %class.GrVkCaps, %class.GrVkCaps* %0, i64 0, i32 2, i64 9, i32 4
  %334 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %333, i64 0, i32 0, i32 0, i32 0
  %335 = load %"struct.GrVkCaps::ColorTypeInfo"*, %"struct.GrVkCaps::ColorTypeInfo"** %334, align 8
  %336 = bitcast %"class.std::__1::unique_ptr"* %333 to i64*
  store i64 %332, i64* %336, align 8
  %337 = icmp eq %"struct.GrVkCaps::ColorTypeInfo"* %335, null
  %338 = bitcast i8* %327 to %"struct.GrVkCaps::ColorTypeInfo"*
  br i1 %337, label %342, label %339

339:                                              ; preds = %325
  %340 = bitcast %"struct.GrVkCaps::ColorTypeInfo"* %335 to i8*
  call void @_ZdaPv(i8* %340) #14
  %341 = load %"struct.GrVkCaps::ColorTypeInfo"*, %"struct.GrVkCaps::ColorTypeInfo"** %334, align 8
  br label %342

342:                                              ; preds = %339, %325
  %343 = phi %"struct.GrVkCaps::ColorTypeInfo"* [ %341, %339 ], [ %338, %325 ]
  %344 = getelementptr inbounds %"struct.GrVkCaps::ColorTypeInfo", %"struct.GrVkCaps::ColorTypeInfo"* %343, i64 0, i32 0
  store i32 10, i32* %344, align 4
  %345 = getelementptr inbounds %"struct.GrVkCaps::ColorTypeInfo", %"struct.GrVkCaps::ColorTypeInfo"* %343, i64 0, i32 1
  store i32 10, i32* %345, align 4
  %346 = getelementptr inbounds %"struct.GrVkCaps::ColorTypeInfo", %"struct.GrVkCaps::ColorTypeInfo"* %343, i64 0, i32 2
  store i32 3, i32* %346, align 4
  br label %347

347:                                              ; preds = %319, %342
  %348 = getelementptr inbounds %class.GrVkCaps, %class.GrVkCaps* %0, i64 0, i32 2, i64 10
  call void @_ZN8GrVkCaps10FormatInfo4initEPK13GrVkInterfaceP18VkPhysicalDevice_TRK26VkPhysicalDeviceProperties8VkFormat(%"struct.GrVkCaps::FormatInfo"* %348, %struct.GrVkInterface* %1, %struct.VkPhysicalDevice_T* %2, %struct.VkPhysicalDeviceProperties* dereferenceable(824) %3, i32 3)
  %349 = getelementptr inbounds %"struct.GrVkCaps::FormatInfo", %"struct.GrVkCaps::FormatInfo"* %348, i64 0, i32 0
  %350 = load i16, i16* %349, align 8
  %351 = and i16 %350, 1
  %352 = icmp eq i16 %351, 0
  br i1 %352, label %383, label %353

353:                                              ; preds = %347
  %354 = getelementptr inbounds %class.GrVkCaps, %class.GrVkCaps* %0, i64 0, i32 2, i64 10, i32 5
  store i32 1, i32* %354, align 8
  %355 = call i8* @_Znam(i64 16) #14
  %356 = getelementptr inbounds i8, i8* %355, i64 12
  %357 = bitcast i8* %356 to %class.GrSwizzle*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 4 %355, i8 0, i64 16, i1 false) #13
  call void @_ZN9GrSwizzleC2EPKc(%class.GrSwizzle* %357, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.35, i64 0, i64 0)) #13
  %358 = getelementptr inbounds i8, i8* %355, i64 14
  %359 = bitcast i8* %358 to %class.GrSwizzle*
  call void @_ZN9GrSwizzleC2EPKc(%class.GrSwizzle* %359, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.35, i64 0, i64 0)) #13
  %360 = ptrtoint i8* %355 to i64
  %361 = getelementptr inbounds %class.GrVkCaps, %class.GrVkCaps* %0, i64 0, i32 2, i64 10, i32 4
  %362 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %361, i64 0, i32 0, i32 0, i32 0
  %363 = load %"struct.GrVkCaps::ColorTypeInfo"*, %"struct.GrVkCaps::ColorTypeInfo"** %362, align 8
  %364 = bitcast %"class.std::__1::unique_ptr"* %361 to i64*
  store i64 %360, i64* %364, align 8
  %365 = icmp eq %"struct.GrVkCaps::ColorTypeInfo"* %363, null
  %366 = bitcast i8* %355 to %"struct.GrVkCaps::ColorTypeInfo"*
  br i1 %365, label %370, label %367

367:                                              ; preds = %353
  %368 = bitcast %"struct.GrVkCaps::ColorTypeInfo"* %363 to i8*
  call void @_ZdaPv(i8* %368) #14
  %369 = load %"struct.GrVkCaps::ColorTypeInfo"*, %"struct.GrVkCaps::ColorTypeInfo"** %362, align 8
  br label %370

370:                                              ; preds = %367, %353
  %371 = phi %"struct.GrVkCaps::ColorTypeInfo"* [ %369, %367 ], [ %366, %353 ]
  %372 = getelementptr inbounds %"struct.GrVkCaps::ColorTypeInfo", %"struct.GrVkCaps::ColorTypeInfo"* %371, i64 0, i32 0
  store i32 3, i32* %372, align 4
  %373 = getelementptr inbounds %"struct.GrVkCaps::ColorTypeInfo", %"struct.GrVkCaps::ColorTypeInfo"* %371, i64 0, i32 1
  store i32 3, i32* %373, align 4
  %374 = getelementptr inbounds %"struct.GrVkCaps::ColorTypeInfo", %"struct.GrVkCaps::ColorTypeInfo"* %371, i64 0, i32 2
  store i32 3, i32* %374, align 4
  %375 = bitcast %class.GrSwizzle* %11 to i8*
  call void @llvm.lifetime.start.p0i8(i64 2, i8* nonnull %375) #13
  call void @_ZN9GrSwizzleC2EPKc(%class.GrSwizzle* nonnull %11, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.40, i64 0, i64 0)) #13
  %376 = getelementptr inbounds %class.GrSwizzle, %class.GrSwizzle* %11, i64 0, i32 0
  %377 = load i16, i16* %376, align 2
  %378 = getelementptr inbounds %"struct.GrVkCaps::ColorTypeInfo", %"struct.GrVkCaps::ColorTypeInfo"* %371, i64 0, i32 3, i32 0
  store i16 %377, i16* %378, align 2
  call void @llvm.lifetime.end.p0i8(i64 2, i8* nonnull %375) #13
  %379 = bitcast %class.GrSwizzle* %12 to i8*
  call void @llvm.lifetime.start.p0i8(i64 2, i8* nonnull %379) #13
  call void @_ZN9GrSwizzleC2EPKc(%class.GrSwizzle* nonnull %12, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.40, i64 0, i64 0)) #13
  %380 = getelementptr inbounds %class.GrSwizzle, %class.GrSwizzle* %12, i64 0, i32 0
  %381 = load i16, i16* %380, align 2
  %382 = getelementptr inbounds %"struct.GrVkCaps::ColorTypeInfo", %"struct.GrVkCaps::ColorTypeInfo"* %371, i64 0, i32 4, i32 0
  store i16 %381, i16* %382, align 2
  call void @llvm.lifetime.end.p0i8(i64 2, i8* nonnull %379) #13
  br label %383

383:                                              ; preds = %347, %370
  %384 = getelementptr inbounds %class.GrVkCaps, %class.GrVkCaps* %0, i64 0, i32 2, i64 11
  call void @_ZN8GrVkCaps10FormatInfo4initEPK13GrVkInterfaceP18VkPhysicalDevice_TRK26VkPhysicalDeviceProperties8VkFormat(%"struct.GrVkCaps::FormatInfo"* %384, %struct.GrVkInterface* %1, %struct.VkPhysicalDevice_T* %2, %struct.VkPhysicalDeviceProperties* dereferenceable(824) %3, i32 2)
  %385 = getelementptr inbounds %"struct.GrVkCaps::FormatInfo", %"struct.GrVkCaps::FormatInfo"* %384, i64 0, i32 0
  %386 = load i16, i16* %385, align 8
  %387 = and i16 %386, 1
  %388 = icmp eq i16 %387, 0
  br i1 %388, label %411, label %389

389:                                              ; preds = %383
  %390 = getelementptr inbounds %class.GrVkCaps, %class.GrVkCaps* %0, i64 0, i32 2, i64 11, i32 5
  store i32 1, i32* %390, align 8
  %391 = call i8* @_Znam(i64 16) #14
  %392 = getelementptr inbounds i8, i8* %391, i64 12
  %393 = bitcast i8* %392 to %class.GrSwizzle*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 4 %391, i8 0, i64 16, i1 false) #13
  call void @_ZN9GrSwizzleC2EPKc(%class.GrSwizzle* %393, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.35, i64 0, i64 0)) #13
  %394 = getelementptr inbounds i8, i8* %391, i64 14
  %395 = bitcast i8* %394 to %class.GrSwizzle*
  call void @_ZN9GrSwizzleC2EPKc(%class.GrSwizzle* %395, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.35, i64 0, i64 0)) #13
  %396 = ptrtoint i8* %391 to i64
  %397 = getelementptr inbounds %class.GrVkCaps, %class.GrVkCaps* %0, i64 0, i32 2, i64 11, i32 4
  %398 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %397, i64 0, i32 0, i32 0, i32 0
  %399 = load %"struct.GrVkCaps::ColorTypeInfo"*, %"struct.GrVkCaps::ColorTypeInfo"** %398, align 8
  %400 = bitcast %"class.std::__1::unique_ptr"* %397 to i64*
  store i64 %396, i64* %400, align 8
  %401 = icmp eq %"struct.GrVkCaps::ColorTypeInfo"* %399, null
  %402 = bitcast i8* %391 to %"struct.GrVkCaps::ColorTypeInfo"*
  br i1 %401, label %406, label %403

403:                                              ; preds = %389
  %404 = bitcast %"struct.GrVkCaps::ColorTypeInfo"* %399 to i8*
  call void @_ZdaPv(i8* %404) #14
  %405 = load %"struct.GrVkCaps::ColorTypeInfo"*, %"struct.GrVkCaps::ColorTypeInfo"** %398, align 8
  br label %406

406:                                              ; preds = %403, %389
  %407 = phi %"struct.GrVkCaps::ColorTypeInfo"* [ %405, %403 ], [ %402, %389 ]
  %408 = getelementptr inbounds %"struct.GrVkCaps::ColorTypeInfo", %"struct.GrVkCaps::ColorTypeInfo"* %407, i64 0, i32 0
  store i32 3, i32* %408, align 4
  %409 = getelementptr inbounds %"struct.GrVkCaps::ColorTypeInfo", %"struct.GrVkCaps::ColorTypeInfo"* %407, i64 0, i32 1
  store i32 3, i32* %409, align 4
  %410 = getelementptr inbounds %"struct.GrVkCaps::ColorTypeInfo", %"struct.GrVkCaps::ColorTypeInfo"* %407, i64 0, i32 2
  store i32 3, i32* %410, align 4
  br label %411

411:                                              ; preds = %383, %406
  %412 = getelementptr inbounds %class.GrVkCaps, %class.GrVkCaps* %0, i64 0, i32 2, i64 12
  call void @_ZN8GrVkCaps10FormatInfo4initEPK13GrVkInterfaceP18VkPhysicalDevice_TRK26VkPhysicalDeviceProperties8VkFormat(%"struct.GrVkCaps::FormatInfo"* %412, %struct.GrVkInterface* %1, %struct.VkPhysicalDevice_T* %2, %struct.VkPhysicalDeviceProperties* dereferenceable(824) %3, i32 43)
  %413 = getelementptr inbounds %"struct.GrVkCaps::FormatInfo", %"struct.GrVkCaps::FormatInfo"* %412, i64 0, i32 0
  %414 = load i16, i16* %413, align 8
  %415 = and i16 %414, 1
  %416 = icmp eq i16 %415, 0
  br i1 %416, label %439, label %417

417:                                              ; preds = %411
  %418 = getelementptr inbounds %class.GrVkCaps, %class.GrVkCaps* %0, i64 0, i32 2, i64 12, i32 5
  store i32 1, i32* %418, align 8
  %419 = call i8* @_Znam(i64 16) #14
  %420 = getelementptr inbounds i8, i8* %419, i64 12
  %421 = bitcast i8* %420 to %class.GrSwizzle*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 4 %419, i8 0, i64 16, i1 false) #13
  call void @_ZN9GrSwizzleC2EPKc(%class.GrSwizzle* %421, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.35, i64 0, i64 0)) #13
  %422 = getelementptr inbounds i8, i8* %419, i64 14
  %423 = bitcast i8* %422 to %class.GrSwizzle*
  call void @_ZN9GrSwizzleC2EPKc(%class.GrSwizzle* %423, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.35, i64 0, i64 0)) #13
  %424 = ptrtoint i8* %419 to i64
  %425 = getelementptr inbounds %class.GrVkCaps, %class.GrVkCaps* %0, i64 0, i32 2, i64 12, i32 4
  %426 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %425, i64 0, i32 0, i32 0, i32 0
  %427 = load %"struct.GrVkCaps::ColorTypeInfo"*, %"struct.GrVkCaps::ColorTypeInfo"** %426, align 8
  %428 = bitcast %"class.std::__1::unique_ptr"* %425 to i64*
  store i64 %424, i64* %428, align 8
  %429 = icmp eq %"struct.GrVkCaps::ColorTypeInfo"* %427, null
  %430 = bitcast i8* %419 to %"struct.GrVkCaps::ColorTypeInfo"*
  br i1 %429, label %434, label %431

431:                                              ; preds = %417
  %432 = bitcast %"struct.GrVkCaps::ColorTypeInfo"* %427 to i8*
  call void @_ZdaPv(i8* %432) #14
  %433 = load %"struct.GrVkCaps::ColorTypeInfo"*, %"struct.GrVkCaps::ColorTypeInfo"** %426, align 8
  br label %434

434:                                              ; preds = %431, %417
  %435 = phi %"struct.GrVkCaps::ColorTypeInfo"* [ %433, %431 ], [ %430, %417 ]
  %436 = getelementptr inbounds %"struct.GrVkCaps::ColorTypeInfo", %"struct.GrVkCaps::ColorTypeInfo"* %435, i64 0, i32 0
  store i32 5, i32* %436, align 4
  %437 = getelementptr inbounds %"struct.GrVkCaps::ColorTypeInfo", %"struct.GrVkCaps::ColorTypeInfo"* %435, i64 0, i32 1
  store i32 5, i32* %437, align 4
  %438 = getelementptr inbounds %"struct.GrVkCaps::ColorTypeInfo", %"struct.GrVkCaps::ColorTypeInfo"* %435, i64 0, i32 2
  store i32 3, i32* %438, align 4
  br label %439

439:                                              ; preds = %411, %434
  %440 = getelementptr inbounds %class.GrVkCaps, %class.GrVkCaps* %0, i64 0, i32 2, i64 16
  call void @_ZN8GrVkCaps10FormatInfo4initEPK13GrVkInterfaceP18VkPhysicalDevice_TRK26VkPhysicalDeviceProperties8VkFormat(%"struct.GrVkCaps::FormatInfo"* %440, %struct.GrVkInterface* %1, %struct.VkPhysicalDevice_T* %2, %struct.VkPhysicalDeviceProperties* dereferenceable(824) %3, i32 70)
  %441 = getelementptr inbounds %"struct.GrVkCaps::FormatInfo", %"struct.GrVkCaps::FormatInfo"* %440, i64 0, i32 0
  %442 = load i16, i16* %441, align 8
  %443 = and i16 %442, 1
  %444 = icmp eq i16 %443, 0
  br i1 %444, label %475, label %445

445:                                              ; preds = %439
  %446 = getelementptr inbounds %class.GrVkCaps, %class.GrVkCaps* %0, i64 0, i32 2, i64 16, i32 5
  store i32 1, i32* %446, align 8
  %447 = call i8* @_Znam(i64 16) #14
  %448 = getelementptr inbounds i8, i8* %447, i64 12
  %449 = bitcast i8* %448 to %class.GrSwizzle*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 4 %447, i8 0, i64 16, i1 false) #13
  call void @_ZN9GrSwizzleC2EPKc(%class.GrSwizzle* %449, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.35, i64 0, i64 0)) #13
  %450 = getelementptr inbounds i8, i8* %447, i64 14
  %451 = bitcast i8* %450 to %class.GrSwizzle*
  call void @_ZN9GrSwizzleC2EPKc(%class.GrSwizzle* %451, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.35, i64 0, i64 0)) #13
  %452 = ptrtoint i8* %447 to i64
  %453 = getelementptr inbounds %class.GrVkCaps, %class.GrVkCaps* %0, i64 0, i32 2, i64 16, i32 4
  %454 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %453, i64 0, i32 0, i32 0, i32 0
  %455 = load %"struct.GrVkCaps::ColorTypeInfo"*, %"struct.GrVkCaps::ColorTypeInfo"** %454, align 8
  %456 = bitcast %"class.std::__1::unique_ptr"* %453 to i64*
  store i64 %452, i64* %456, align 8
  %457 = icmp eq %"struct.GrVkCaps::ColorTypeInfo"* %455, null
  %458 = bitcast i8* %447 to %"struct.GrVkCaps::ColorTypeInfo"*
  br i1 %457, label %462, label %459

459:                                              ; preds = %445
  %460 = bitcast %"struct.GrVkCaps::ColorTypeInfo"* %455 to i8*
  call void @_ZdaPv(i8* %460) #14
  %461 = load %"struct.GrVkCaps::ColorTypeInfo"*, %"struct.GrVkCaps::ColorTypeInfo"** %454, align 8
  br label %462

462:                                              ; preds = %459, %445
  %463 = phi %"struct.GrVkCaps::ColorTypeInfo"* [ %461, %459 ], [ %458, %445 ]
  %464 = getelementptr inbounds %"struct.GrVkCaps::ColorTypeInfo", %"struct.GrVkCaps::ColorTypeInfo"* %463, i64 0, i32 0
  store i32 17, i32* %464, align 4
  %465 = getelementptr inbounds %"struct.GrVkCaps::ColorTypeInfo", %"struct.GrVkCaps::ColorTypeInfo"* %463, i64 0, i32 1
  store i32 17, i32* %465, align 4
  %466 = getelementptr inbounds %"struct.GrVkCaps::ColorTypeInfo", %"struct.GrVkCaps::ColorTypeInfo"* %463, i64 0, i32 2
  store i32 3, i32* %466, align 4
  %467 = bitcast %class.GrSwizzle* %13 to i8*
  call void @llvm.lifetime.start.p0i8(i64 2, i8* nonnull %467) #13
  call void @_ZN9GrSwizzleC2EPKc(%class.GrSwizzle* nonnull %13, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.15, i64 0, i64 0))
  %468 = getelementptr inbounds %class.GrSwizzle, %class.GrSwizzle* %13, i64 0, i32 0
  %469 = load i16, i16* %468, align 2
  %470 = getelementptr inbounds %"struct.GrVkCaps::ColorTypeInfo", %"struct.GrVkCaps::ColorTypeInfo"* %463, i64 0, i32 3, i32 0
  store i16 %469, i16* %470, align 2
  call void @llvm.lifetime.end.p0i8(i64 2, i8* nonnull %467) #13
  %471 = bitcast %class.GrSwizzle* %14 to i8*
  call void @llvm.lifetime.start.p0i8(i64 2, i8* nonnull %471) #13
  call void @_ZN9GrSwizzleC2EPKc(%class.GrSwizzle* nonnull %14, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.16, i64 0, i64 0))
  %472 = getelementptr inbounds %class.GrSwizzle, %class.GrSwizzle* %14, i64 0, i32 0
  %473 = load i16, i16* %472, align 2
  %474 = getelementptr inbounds %"struct.GrVkCaps::ColorTypeInfo", %"struct.GrVkCaps::ColorTypeInfo"* %463, i64 0, i32 4, i32 0
  store i16 %473, i16* %474, align 2
  call void @llvm.lifetime.end.p0i8(i64 2, i8* nonnull %471) #13
  br label %475

475:                                              ; preds = %439, %462
  %476 = getelementptr inbounds %class.GrVkCaps, %class.GrVkCaps* %0, i64 0, i32 2, i64 17
  call void @_ZN8GrVkCaps10FormatInfo4initEPK13GrVkInterfaceP18VkPhysicalDevice_TRK26VkPhysicalDeviceProperties8VkFormat(%"struct.GrVkCaps::FormatInfo"* %476, %struct.GrVkInterface* %1, %struct.VkPhysicalDevice_T* %2, %struct.VkPhysicalDeviceProperties* dereferenceable(824) %3, i32 77)
  %477 = getelementptr inbounds %"struct.GrVkCaps::FormatInfo", %"struct.GrVkCaps::FormatInfo"* %476, i64 0, i32 0
  %478 = load i16, i16* %477, align 8
  %479 = and i16 %478, 1
  %480 = icmp eq i16 %479, 0
  br i1 %480, label %503, label %481

481:                                              ; preds = %475
  %482 = getelementptr inbounds %class.GrVkCaps, %class.GrVkCaps* %0, i64 0, i32 2, i64 17, i32 5
  store i32 1, i32* %482, align 8
  %483 = call i8* @_Znam(i64 16) #14
  %484 = getelementptr inbounds i8, i8* %483, i64 12
  %485 = bitcast i8* %484 to %class.GrSwizzle*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 4 %483, i8 0, i64 16, i1 false) #13
  call void @_ZN9GrSwizzleC2EPKc(%class.GrSwizzle* %485, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.35, i64 0, i64 0)) #13
  %486 = getelementptr inbounds i8, i8* %483, i64 14
  %487 = bitcast i8* %486 to %class.GrSwizzle*
  call void @_ZN9GrSwizzleC2EPKc(%class.GrSwizzle* %487, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.35, i64 0, i64 0)) #13
  %488 = ptrtoint i8* %483 to i64
  %489 = getelementptr inbounds %class.GrVkCaps, %class.GrVkCaps* %0, i64 0, i32 2, i64 17, i32 4
  %490 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %489, i64 0, i32 0, i32 0, i32 0
  %491 = load %"struct.GrVkCaps::ColorTypeInfo"*, %"struct.GrVkCaps::ColorTypeInfo"** %490, align 8
  %492 = bitcast %"class.std::__1::unique_ptr"* %489 to i64*
  store i64 %488, i64* %492, align 8
  %493 = icmp eq %"struct.GrVkCaps::ColorTypeInfo"* %491, null
  %494 = bitcast i8* %483 to %"struct.GrVkCaps::ColorTypeInfo"*
  br i1 %493, label %498, label %495

495:                                              ; preds = %481
  %496 = bitcast %"struct.GrVkCaps::ColorTypeInfo"* %491 to i8*
  call void @_ZdaPv(i8* %496) #14
  %497 = load %"struct.GrVkCaps::ColorTypeInfo"*, %"struct.GrVkCaps::ColorTypeInfo"** %490, align 8
  br label %498

498:                                              ; preds = %495, %481
  %499 = phi %"struct.GrVkCaps::ColorTypeInfo"* [ %497, %495 ], [ %494, %481 ]
  %500 = getelementptr inbounds %"struct.GrVkCaps::ColorTypeInfo", %"struct.GrVkCaps::ColorTypeInfo"* %499, i64 0, i32 0
  store i32 18, i32* %500, align 4
  %501 = getelementptr inbounds %"struct.GrVkCaps::ColorTypeInfo", %"struct.GrVkCaps::ColorTypeInfo"* %499, i64 0, i32 1
  store i32 18, i32* %501, align 4
  %502 = getelementptr inbounds %"struct.GrVkCaps::ColorTypeInfo", %"struct.GrVkCaps::ColorTypeInfo"* %499, i64 0, i32 2
  store i32 3, i32* %502, align 4
  br label %503

503:                                              ; preds = %475, %498
  %504 = getelementptr inbounds %class.GrVkCaps, %class.GrVkCaps* %0, i64 0, i32 2, i64 20
  call void @_ZN8GrVkCaps10FormatInfo4initEPK13GrVkInterfaceP18VkPhysicalDevice_TRK26VkPhysicalDeviceProperties8VkFormat(%"struct.GrVkCaps::FormatInfo"* %504, %struct.GrVkInterface* %1, %struct.VkPhysicalDevice_T* %2, %struct.VkPhysicalDeviceProperties* dereferenceable(824) %3, i32 91)
  %505 = getelementptr inbounds %"struct.GrVkCaps::FormatInfo", %"struct.GrVkCaps::FormatInfo"* %504, i64 0, i32 0
  %506 = load i16, i16* %505, align 8
  %507 = and i16 %506, 1
  %508 = icmp eq i16 %507, 0
  br i1 %508, label %531, label %509

509:                                              ; preds = %503
  %510 = getelementptr inbounds %class.GrVkCaps, %class.GrVkCaps* %0, i64 0, i32 2, i64 20, i32 5
  store i32 1, i32* %510, align 8
  %511 = call i8* @_Znam(i64 16) #14
  %512 = getelementptr inbounds i8, i8* %511, i64 12
  %513 = bitcast i8* %512 to %class.GrSwizzle*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 4 %511, i8 0, i64 16, i1 false) #13
  call void @_ZN9GrSwizzleC2EPKc(%class.GrSwizzle* %513, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.35, i64 0, i64 0)) #13
  %514 = getelementptr inbounds i8, i8* %511, i64 14
  %515 = bitcast i8* %514 to %class.GrSwizzle*
  call void @_ZN9GrSwizzleC2EPKc(%class.GrSwizzle* %515, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.35, i64 0, i64 0)) #13
  %516 = ptrtoint i8* %511 to i64
  %517 = getelementptr inbounds %class.GrVkCaps, %class.GrVkCaps* %0, i64 0, i32 2, i64 20, i32 4
  %518 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %517, i64 0, i32 0, i32 0, i32 0
  %519 = load %"struct.GrVkCaps::ColorTypeInfo"*, %"struct.GrVkCaps::ColorTypeInfo"** %518, align 8
  %520 = bitcast %"class.std::__1::unique_ptr"* %517 to i64*
  store i64 %516, i64* %520, align 8
  %521 = icmp eq %"struct.GrVkCaps::ColorTypeInfo"* %519, null
  %522 = bitcast i8* %511 to %"struct.GrVkCaps::ColorTypeInfo"*
  br i1 %521, label %526, label %523

523:                                              ; preds = %509
  %524 = bitcast %"struct.GrVkCaps::ColorTypeInfo"* %519 to i8*
  call void @_ZdaPv(i8* %524) #14
  %525 = load %"struct.GrVkCaps::ColorTypeInfo"*, %"struct.GrVkCaps::ColorTypeInfo"** %518, align 8
  br label %526

526:                                              ; preds = %523, %509
  %527 = phi %"struct.GrVkCaps::ColorTypeInfo"* [ %525, %523 ], [ %522, %509 ]
  %528 = getelementptr inbounds %"struct.GrVkCaps::ColorTypeInfo", %"struct.GrVkCaps::ColorTypeInfo"* %527, i64 0, i32 0
  store i32 20, i32* %528, align 4
  %529 = getelementptr inbounds %"struct.GrVkCaps::ColorTypeInfo", %"struct.GrVkCaps::ColorTypeInfo"* %527, i64 0, i32 1
  store i32 20, i32* %529, align 4
  %530 = getelementptr inbounds %"struct.GrVkCaps::ColorTypeInfo", %"struct.GrVkCaps::ColorTypeInfo"* %527, i64 0, i32 2
  store i32 3, i32* %530, align 4
  br label %531

531:                                              ; preds = %503, %526
  %532 = getelementptr inbounds %class.GrVkCaps, %class.GrVkCaps* %0, i64 0, i32 2, i64 21
  call void @_ZN8GrVkCaps10FormatInfo4initEPK13GrVkInterfaceP18VkPhysicalDevice_TRK26VkPhysicalDeviceProperties8VkFormat(%"struct.GrVkCaps::FormatInfo"* %532, %struct.GrVkInterface* %1, %struct.VkPhysicalDevice_T* %2, %struct.VkPhysicalDeviceProperties* dereferenceable(824) %3, i32 83)
  %533 = getelementptr inbounds %"struct.GrVkCaps::FormatInfo", %"struct.GrVkCaps::FormatInfo"* %532, i64 0, i32 0
  %534 = load i16, i16* %533, align 8
  %535 = and i16 %534, 1
  %536 = icmp eq i16 %535, 0
  br i1 %536, label %559, label %537

537:                                              ; preds = %531
  %538 = getelementptr inbounds %class.GrVkCaps, %class.GrVkCaps* %0, i64 0, i32 2, i64 21, i32 5
  store i32 1, i32* %538, align 8
  %539 = call i8* @_Znam(i64 16) #14
  %540 = getelementptr inbounds i8, i8* %539, i64 12
  %541 = bitcast i8* %540 to %class.GrSwizzle*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 4 %539, i8 0, i64 16, i1 false) #13
  call void @_ZN9GrSwizzleC2EPKc(%class.GrSwizzle* %541, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.35, i64 0, i64 0)) #13
  %542 = getelementptr inbounds i8, i8* %539, i64 14
  %543 = bitcast i8* %542 to %class.GrSwizzle*
  call void @_ZN9GrSwizzleC2EPKc(%class.GrSwizzle* %543, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.35, i64 0, i64 0)) #13
  %544 = ptrtoint i8* %539 to i64
  %545 = getelementptr inbounds %class.GrVkCaps, %class.GrVkCaps* %0, i64 0, i32 2, i64 21, i32 4
  %546 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %545, i64 0, i32 0, i32 0, i32 0
  %547 = load %"struct.GrVkCaps::ColorTypeInfo"*, %"struct.GrVkCaps::ColorTypeInfo"** %546, align 8
  %548 = bitcast %"class.std::__1::unique_ptr"* %545 to i64*
  store i64 %544, i64* %548, align 8
  %549 = icmp eq %"struct.GrVkCaps::ColorTypeInfo"* %547, null
  %550 = bitcast i8* %539 to %"struct.GrVkCaps::ColorTypeInfo"*
  br i1 %549, label %554, label %551

551:                                              ; preds = %537
  %552 = bitcast %"struct.GrVkCaps::ColorTypeInfo"* %547 to i8*
  call void @_ZdaPv(i8* %552) #14
  %553 = load %"struct.GrVkCaps::ColorTypeInfo"*, %"struct.GrVkCaps::ColorTypeInfo"** %546, align 8
  br label %554

554:                                              ; preds = %551, %537
  %555 = phi %"struct.GrVkCaps::ColorTypeInfo"* [ %553, %551 ], [ %550, %537 ]
  %556 = getelementptr inbounds %"struct.GrVkCaps::ColorTypeInfo", %"struct.GrVkCaps::ColorTypeInfo"* %555, i64 0, i32 0
  store i32 19, i32* %556, align 4
  %557 = getelementptr inbounds %"struct.GrVkCaps::ColorTypeInfo", %"struct.GrVkCaps::ColorTypeInfo"* %555, i64 0, i32 1
  store i32 19, i32* %557, align 4
  %558 = getelementptr inbounds %"struct.GrVkCaps::ColorTypeInfo", %"struct.GrVkCaps::ColorTypeInfo"* %555, i64 0, i32 2
  store i32 3, i32* %558, align 4
  br label %559

559:                                              ; preds = %531, %554
  %560 = getelementptr inbounds %class.GrVkCaps, %class.GrVkCaps* %0, i64 0, i32 2, i64 18
  %561 = getelementptr inbounds %class.GrVkCaps, %class.GrVkCaps* %0, i64 0, i32 19
  %562 = load i8, i8* %561, align 1, !range !2
  %563 = icmp eq i8 %562, 0
  br i1 %563, label %565, label %564

564:                                              ; preds = %559
  call void @_ZN8GrVkCaps10FormatInfo4initEPK13GrVkInterfaceP18VkPhysicalDevice_TRK26VkPhysicalDeviceProperties8VkFormat(%"struct.GrVkCaps::FormatInfo"* %560, %struct.GrVkInterface* %1, %struct.VkPhysicalDevice_T* %2, %struct.VkPhysicalDeviceProperties* dereferenceable(824) %3, i32 1000156002)
  br label %565

565:                                              ; preds = %559, %564
  %566 = getelementptr inbounds %"struct.GrVkCaps::FormatInfo", %"struct.GrVkCaps::FormatInfo"* %560, i64 0, i32 0
  %567 = load i16, i16* %566, align 8
  %568 = and i16 %567, 1
  %569 = icmp eq i16 %568, 0
  br i1 %569, label %592, label %570

570:                                              ; preds = %565
  %571 = getelementptr inbounds %class.GrVkCaps, %class.GrVkCaps* %0, i64 0, i32 2, i64 18, i32 5
  store i32 1, i32* %571, align 8
  %572 = call i8* @_Znam(i64 16) #14
  %573 = getelementptr inbounds i8, i8* %572, i64 12
  %574 = bitcast i8* %573 to %class.GrSwizzle*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 4 %572, i8 0, i64 16, i1 false) #13
  call void @_ZN9GrSwizzleC2EPKc(%class.GrSwizzle* %574, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.35, i64 0, i64 0)) #13
  %575 = getelementptr inbounds i8, i8* %572, i64 14
  %576 = bitcast i8* %575 to %class.GrSwizzle*
  call void @_ZN9GrSwizzleC2EPKc(%class.GrSwizzle* %576, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.35, i64 0, i64 0)) #13
  %577 = ptrtoint i8* %572 to i64
  %578 = getelementptr inbounds %class.GrVkCaps, %class.GrVkCaps* %0, i64 0, i32 2, i64 18, i32 4
  %579 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %578, i64 0, i32 0, i32 0, i32 0
  %580 = load %"struct.GrVkCaps::ColorTypeInfo"*, %"struct.GrVkCaps::ColorTypeInfo"** %579, align 8
  %581 = bitcast %"class.std::__1::unique_ptr"* %578 to i64*
  store i64 %577, i64* %581, align 8
  %582 = icmp eq %"struct.GrVkCaps::ColorTypeInfo"* %580, null
  %583 = bitcast i8* %572 to %"struct.GrVkCaps::ColorTypeInfo"*
  br i1 %582, label %587, label %584

584:                                              ; preds = %570
  %585 = bitcast %"struct.GrVkCaps::ColorTypeInfo"* %580 to i8*
  call void @_ZdaPv(i8* %585) #14
  %586 = load %"struct.GrVkCaps::ColorTypeInfo"*, %"struct.GrVkCaps::ColorTypeInfo"** %579, align 8
  br label %587

587:                                              ; preds = %584, %570
  %588 = phi %"struct.GrVkCaps::ColorTypeInfo"* [ %586, %584 ], [ %583, %570 ]
  %589 = getelementptr inbounds %"struct.GrVkCaps::ColorTypeInfo", %"struct.GrVkCaps::ColorTypeInfo"* %588, i64 0, i32 0
  store i32 6, i32* %589, align 4
  %590 = getelementptr inbounds %"struct.GrVkCaps::ColorTypeInfo", %"struct.GrVkCaps::ColorTypeInfo"* %588, i64 0, i32 1
  store i32 6, i32* %590, align 4
  %591 = getelementptr inbounds %"struct.GrVkCaps::ColorTypeInfo", %"struct.GrVkCaps::ColorTypeInfo"* %588, i64 0, i32 2
  store i32 5, i32* %591, align 4
  br label %592

592:                                              ; preds = %565, %587
  %593 = getelementptr inbounds %class.GrVkCaps, %class.GrVkCaps* %0, i64 0, i32 2, i64 19
  %594 = load i8, i8* %561, align 1, !range !2
  %595 = icmp eq i8 %594, 0
  br i1 %595, label %597, label %596

596:                                              ; preds = %592
  call void @_ZN8GrVkCaps10FormatInfo4initEPK13GrVkInterfaceP18VkPhysicalDevice_TRK26VkPhysicalDeviceProperties8VkFormat(%"struct.GrVkCaps::FormatInfo"* %593, %struct.GrVkInterface* %1, %struct.VkPhysicalDevice_T* %2, %struct.VkPhysicalDeviceProperties* dereferenceable(824) %3, i32 1000156003)
  br label %597

597:                                              ; preds = %592, %596
  %598 = getelementptr inbounds %"struct.GrVkCaps::FormatInfo", %"struct.GrVkCaps::FormatInfo"* %593, i64 0, i32 0
  %599 = load i16, i16* %598, align 8
  %600 = and i16 %599, 1
  %601 = icmp eq i16 %600, 0
  br i1 %601, label %624, label %602

602:                                              ; preds = %597
  %603 = getelementptr inbounds %class.GrVkCaps, %class.GrVkCaps* %0, i64 0, i32 2, i64 19, i32 5
  store i32 1, i32* %603, align 8
  %604 = call i8* @_Znam(i64 16) #14
  %605 = getelementptr inbounds i8, i8* %604, i64 12
  %606 = bitcast i8* %605 to %class.GrSwizzle*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 4 %604, i8 0, i64 16, i1 false) #13
  call void @_ZN9GrSwizzleC2EPKc(%class.GrSwizzle* %606, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.35, i64 0, i64 0)) #13
  %607 = getelementptr inbounds i8, i8* %604, i64 14
  %608 = bitcast i8* %607 to %class.GrSwizzle*
  call void @_ZN9GrSwizzleC2EPKc(%class.GrSwizzle* %608, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.35, i64 0, i64 0)) #13
  %609 = ptrtoint i8* %604 to i64
  %610 = getelementptr inbounds %class.GrVkCaps, %class.GrVkCaps* %0, i64 0, i32 2, i64 19, i32 4
  %611 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %610, i64 0, i32 0, i32 0, i32 0
  %612 = load %"struct.GrVkCaps::ColorTypeInfo"*, %"struct.GrVkCaps::ColorTypeInfo"** %611, align 8
  %613 = bitcast %"class.std::__1::unique_ptr"* %610 to i64*
  store i64 %609, i64* %613, align 8
  %614 = icmp eq %"struct.GrVkCaps::ColorTypeInfo"* %612, null
  %615 = bitcast i8* %604 to %"struct.GrVkCaps::ColorTypeInfo"*
  br i1 %614, label %619, label %616

616:                                              ; preds = %602
  %617 = bitcast %"struct.GrVkCaps::ColorTypeInfo"* %612 to i8*
  call void @_ZdaPv(i8* %617) #14
  %618 = load %"struct.GrVkCaps::ColorTypeInfo"*, %"struct.GrVkCaps::ColorTypeInfo"** %611, align 8
  br label %619

619:                                              ; preds = %616, %602
  %620 = phi %"struct.GrVkCaps::ColorTypeInfo"* [ %618, %616 ], [ %615, %602 ]
  %621 = getelementptr inbounds %"struct.GrVkCaps::ColorTypeInfo", %"struct.GrVkCaps::ColorTypeInfo"* %620, i64 0, i32 0
  store i32 6, i32* %621, align 4
  %622 = getelementptr inbounds %"struct.GrVkCaps::ColorTypeInfo", %"struct.GrVkCaps::ColorTypeInfo"* %620, i64 0, i32 1
  store i32 6, i32* %622, align 4
  %623 = getelementptr inbounds %"struct.GrVkCaps::ColorTypeInfo", %"struct.GrVkCaps::ColorTypeInfo"* %620, i64 0, i32 2
  store i32 5, i32* %623, align 4
  br label %624

624:                                              ; preds = %597, %619
  %625 = getelementptr inbounds %class.GrVkCaps, %class.GrVkCaps* %0, i64 0, i32 2, i64 13
  call void @_ZN8GrVkCaps10FormatInfo4initEPK13GrVkInterfaceP18VkPhysicalDevice_TRK26VkPhysicalDeviceProperties8VkFormat(%"struct.GrVkCaps::FormatInfo"* %625, %struct.GrVkInterface* %1, %struct.VkPhysicalDevice_T* %2, %struct.VkPhysicalDeviceProperties* dereferenceable(824) %3, i32 147)
  %626 = getelementptr inbounds %class.GrVkCaps, %class.GrVkCaps* %0, i64 0, i32 2, i64 14
  call void @_ZN8GrVkCaps10FormatInfo4initEPK13GrVkInterfaceP18VkPhysicalDevice_TRK26VkPhysicalDeviceProperties8VkFormat(%"struct.GrVkCaps::FormatInfo"* %626, %struct.GrVkInterface* %1, %struct.VkPhysicalDevice_T* %2, %struct.VkPhysicalDeviceProperties* dereferenceable(824) %3, i32 131)
  %627 = getelementptr inbounds %class.GrVkCaps, %class.GrVkCaps* %0, i64 0, i32 2, i64 15
  call void @_ZN8GrVkCaps10FormatInfo4initEPK13GrVkInterfaceP18VkPhysicalDevice_TRK26VkPhysicalDeviceProperties8VkFormat(%"struct.GrVkCaps::FormatInfo"* %627, %struct.GrVkInterface* %1, %struct.VkPhysicalDevice_T* %2, %struct.VkPhysicalDeviceProperties* dereferenceable(824) %3, i32 133)
  %628 = call dereferenceable(40) %"struct.GrVkCaps::FormatInfo"* @_ZN8GrVkCaps13getFormatInfoE8VkFormat(%class.GrVkCaps* %0, i32 9) #13
  %629 = getelementptr inbounds %"struct.GrVkCaps::FormatInfo", %"struct.GrVkCaps::FormatInfo"* %628, i64 0, i32 5
  %630 = load i32, i32* %629, align 8
  %631 = icmp sgt i32 %630, 0
  br i1 %631, label %632, label %646

632:                                              ; preds = %624
  %633 = getelementptr inbounds %"struct.GrVkCaps::FormatInfo", %"struct.GrVkCaps::FormatInfo"* %628, i64 0, i32 4, i32 0, i32 0, i32 0
  %634 = load %"struct.GrVkCaps::ColorTypeInfo"*, %"struct.GrVkCaps::ColorTypeInfo"** %633, align 8
  %635 = sext i32 %630 to i64
  br label %638

636:                                              ; preds = %638
  %637 = icmp eq i64 %643, %635
  br i1 %637, label %646, label %638

638:                                              ; preds = %636, %632
  %639 = phi i64 [ 0, %632 ], [ %643, %636 ]
  %640 = getelementptr inbounds %"struct.GrVkCaps::ColorTypeInfo", %"struct.GrVkCaps::ColorTypeInfo"* %634, i64 %639, i32 0
  %641 = load i32, i32* %640, align 4
  %642 = icmp eq i32 %641, 1
  %643 = add nuw nsw i64 %639, 1
  br i1 %642, label %644, label %636

644:                                              ; preds = %638
  %645 = getelementptr inbounds %class.GrVkCaps, %class.GrVkCaps* %0, i64 0, i32 3, i64 1
  store i32 9, i32* %645, align 4
  br label %646

646:                                              ; preds = %636, %624, %644
  %647 = call dereferenceable(40) %"struct.GrVkCaps::FormatInfo"* @_ZN8GrVkCaps13getFormatInfoE8VkFormat(%class.GrVkCaps* %0, i32 4) #13
  %648 = getelementptr inbounds %"struct.GrVkCaps::FormatInfo", %"struct.GrVkCaps::FormatInfo"* %647, i64 0, i32 5
  %649 = load i32, i32* %648, align 8
  %650 = icmp sgt i32 %649, 0
  br i1 %650, label %651, label %665

651:                                              ; preds = %646
  %652 = getelementptr inbounds %"struct.GrVkCaps::FormatInfo", %"struct.GrVkCaps::FormatInfo"* %647, i64 0, i32 4, i32 0, i32 0, i32 0
  %653 = load %"struct.GrVkCaps::ColorTypeInfo"*, %"struct.GrVkCaps::ColorTypeInfo"** %652, align 8
  %654 = sext i32 %649 to i64
  br label %657

655:                                              ; preds = %657
  %656 = icmp eq i64 %662, %654
  br i1 %656, label %665, label %657

657:                                              ; preds = %655, %651
  %658 = phi i64 [ 0, %651 ], [ %662, %655 ]
  %659 = getelementptr inbounds %"struct.GrVkCaps::ColorTypeInfo", %"struct.GrVkCaps::ColorTypeInfo"* %653, i64 %658, i32 0
  %660 = load i32, i32* %659, align 4
  %661 = icmp eq i32 %660, 2
  %662 = add nuw nsw i64 %658, 1
  br i1 %661, label %663, label %655

663:                                              ; preds = %657
  %664 = getelementptr inbounds %class.GrVkCaps, %class.GrVkCaps* %0, i64 0, i32 3, i64 2
  store i32 4, i32* %664, align 4
  br label %665

665:                                              ; preds = %655, %646, %663
  %666 = call dereferenceable(40) %"struct.GrVkCaps::FormatInfo"* @_ZN8GrVkCaps13getFormatInfoE8VkFormat(%class.GrVkCaps* %0, i32 2) #13
  %667 = getelementptr inbounds %"struct.GrVkCaps::FormatInfo", %"struct.GrVkCaps::FormatInfo"* %666, i64 0, i32 5
  %668 = load i32, i32* %667, align 8
  %669 = icmp sgt i32 %668, 0
  br i1 %669, label %670, label %686

670:                                              ; preds = %665
  %671 = getelementptr inbounds %"struct.GrVkCaps::FormatInfo", %"struct.GrVkCaps::FormatInfo"* %666, i64 0, i32 4, i32 0, i32 0, i32 0
  %672 = load %"struct.GrVkCaps::ColorTypeInfo"*, %"struct.GrVkCaps::ColorTypeInfo"** %671, align 8
  %673 = sext i32 %668 to i64
  br label %676

674:                                              ; preds = %676
  %675 = icmp eq i64 %681, %673
  br i1 %675, label %686, label %676

676:                                              ; preds = %674, %670
  %677 = phi i64 [ 0, %670 ], [ %681, %674 ]
  %678 = getelementptr inbounds %"struct.GrVkCaps::ColorTypeInfo", %"struct.GrVkCaps::ColorTypeInfo"* %672, i64 %677, i32 0
  %679 = load i32, i32* %678, align 4
  %680 = icmp eq i32 %679, 3
  %681 = add nuw nsw i64 %677, 1
  br i1 %680, label %682, label %674

682:                                              ; preds = %676, %1000
  %683 = phi i32* [ getelementptr inbounds ([2 x i32], [2 x i32]* @.ref.tmp.19, i64 0, i64 1), %1000 ], [ getelementptr inbounds ([2 x i32], [2 x i32]* @.ref.tmp.19, i64 0, i64 0), %676 ]
  %684 = load i32, i32* %683, align 4
  %685 = getelementptr inbounds %class.GrVkCaps, %class.GrVkCaps* %0, i64 0, i32 3, i64 3
  store i32 %684, i32* %685, align 4
  br label %691

686:                                              ; preds = %674, %665
  %687 = call dereferenceable(40) %"struct.GrVkCaps::FormatInfo"* @_ZN8GrVkCaps13getFormatInfoE8VkFormat(%class.GrVkCaps* %0, i32 3) #13
  %688 = getelementptr inbounds %"struct.GrVkCaps::FormatInfo", %"struct.GrVkCaps::FormatInfo"* %687, i64 0, i32 5
  %689 = load i32, i32* %688, align 8
  %690 = icmp sgt i32 %689, 0
  br i1 %690, label %996, label %691

691:                                              ; preds = %1006, %686, %682
  %692 = call dereferenceable(40) %"struct.GrVkCaps::FormatInfo"* @_ZN8GrVkCaps13getFormatInfoE8VkFormat(%class.GrVkCaps* %0, i32 37) #13
  %693 = getelementptr inbounds %"struct.GrVkCaps::FormatInfo", %"struct.GrVkCaps::FormatInfo"* %692, i64 0, i32 5
  %694 = load i32, i32* %693, align 8
  %695 = icmp sgt i32 %694, 0
  br i1 %695, label %696, label %710

696:                                              ; preds = %691
  %697 = getelementptr inbounds %"struct.GrVkCaps::FormatInfo", %"struct.GrVkCaps::FormatInfo"* %692, i64 0, i32 4, i32 0, i32 0, i32 0
  %698 = load %"struct.GrVkCaps::ColorTypeInfo"*, %"struct.GrVkCaps::ColorTypeInfo"** %697, align 8
  %699 = sext i32 %694 to i64
  br label %702

700:                                              ; preds = %702
  %701 = icmp eq i64 %707, %699
  br i1 %701, label %710, label %702

702:                                              ; preds = %700, %696
  %703 = phi i64 [ 0, %696 ], [ %707, %700 ]
  %704 = getelementptr inbounds %"struct.GrVkCaps::ColorTypeInfo", %"struct.GrVkCaps::ColorTypeInfo"* %698, i64 %703, i32 0
  %705 = load i32, i32* %704, align 4
  %706 = icmp eq i32 %705, 4
  %707 = add nuw nsw i64 %703, 1
  br i1 %706, label %708, label %700

708:                                              ; preds = %702
  %709 = getelementptr inbounds %class.GrVkCaps, %class.GrVkCaps* %0, i64 0, i32 3, i64 4
  store i32 37, i32* %709, align 4
  br label %710

710:                                              ; preds = %700, %691, %708
  %711 = call dereferenceable(40) %"struct.GrVkCaps::FormatInfo"* @_ZN8GrVkCaps13getFormatInfoE8VkFormat(%class.GrVkCaps* %0, i32 43) #13
  %712 = getelementptr inbounds %"struct.GrVkCaps::FormatInfo", %"struct.GrVkCaps::FormatInfo"* %711, i64 0, i32 5
  %713 = load i32, i32* %712, align 8
  %714 = icmp sgt i32 %713, 0
  br i1 %714, label %715, label %729

715:                                              ; preds = %710
  %716 = getelementptr inbounds %"struct.GrVkCaps::FormatInfo", %"struct.GrVkCaps::FormatInfo"* %711, i64 0, i32 4, i32 0, i32 0, i32 0
  %717 = load %"struct.GrVkCaps::ColorTypeInfo"*, %"struct.GrVkCaps::ColorTypeInfo"** %716, align 8
  %718 = sext i32 %713 to i64
  br label %721

719:                                              ; preds = %721
  %720 = icmp eq i64 %726, %718
  br i1 %720, label %729, label %721

721:                                              ; preds = %719, %715
  %722 = phi i64 [ 0, %715 ], [ %726, %719 ]
  %723 = getelementptr inbounds %"struct.GrVkCaps::ColorTypeInfo", %"struct.GrVkCaps::ColorTypeInfo"* %717, i64 %722, i32 0
  %724 = load i32, i32* %723, align 4
  %725 = icmp eq i32 %724, 5
  %726 = add nuw nsw i64 %722, 1
  br i1 %725, label %727, label %719

727:                                              ; preds = %721
  %728 = getelementptr inbounds %class.GrVkCaps, %class.GrVkCaps* %0, i64 0, i32 3, i64 5
  store i32 43, i32* %728, align 4
  br label %729

729:                                              ; preds = %719, %710, %727
  %730 = call dereferenceable(40) %"struct.GrVkCaps::FormatInfo"* @_ZN8GrVkCaps13getFormatInfoE8VkFormat(%class.GrVkCaps* %0, i32 23) #13
  %731 = getelementptr inbounds %"struct.GrVkCaps::FormatInfo", %"struct.GrVkCaps::FormatInfo"* %730, i64 0, i32 5
  %732 = load i32, i32* %731, align 8
  %733 = icmp sgt i32 %732, 0
  br i1 %733, label %734, label %750

734:                                              ; preds = %729
  %735 = getelementptr inbounds %"struct.GrVkCaps::FormatInfo", %"struct.GrVkCaps::FormatInfo"* %730, i64 0, i32 4, i32 0, i32 0, i32 0
  %736 = load %"struct.GrVkCaps::ColorTypeInfo"*, %"struct.GrVkCaps::ColorTypeInfo"** %735, align 8
  %737 = sext i32 %732 to i64
  br label %740

738:                                              ; preds = %740
  %739 = icmp eq i64 %745, %737
  br i1 %739, label %750, label %740

740:                                              ; preds = %738, %734
  %741 = phi i64 [ 0, %734 ], [ %745, %738 ]
  %742 = getelementptr inbounds %"struct.GrVkCaps::ColorTypeInfo", %"struct.GrVkCaps::ColorTypeInfo"* %736, i64 %741, i32 0
  %743 = load i32, i32* %742, align 4
  %744 = icmp eq i32 %743, 6
  %745 = add nuw nsw i64 %741, 1
  br i1 %744, label %746, label %738

746:                                              ; preds = %740, %988
  %747 = phi i32* [ getelementptr inbounds ([2 x i32], [2 x i32]* @.ref.tmp.22, i64 0, i64 1), %988 ], [ getelementptr inbounds ([2 x i32], [2 x i32]* @.ref.tmp.22, i64 0, i64 0), %740 ]
  %748 = load i32, i32* %747, align 4
  %749 = getelementptr inbounds %class.GrVkCaps, %class.GrVkCaps* %0, i64 0, i32 3, i64 6
  store i32 %748, i32* %749, align 4
  br label %755

750:                                              ; preds = %738, %729
  %751 = call dereferenceable(40) %"struct.GrVkCaps::FormatInfo"* @_ZN8GrVkCaps13getFormatInfoE8VkFormat(%class.GrVkCaps* %0, i32 37) #13
  %752 = getelementptr inbounds %"struct.GrVkCaps::FormatInfo", %"struct.GrVkCaps::FormatInfo"* %751, i64 0, i32 5
  %753 = load i32, i32* %752, align 8
  %754 = icmp sgt i32 %753, 0
  br i1 %754, label %984, label %755

755:                                              ; preds = %994, %750, %746
  %756 = call dereferenceable(40) %"struct.GrVkCaps::FormatInfo"* @_ZN8GrVkCaps13getFormatInfoE8VkFormat(%class.GrVkCaps* %0, i32 16) #13
  %757 = getelementptr inbounds %"struct.GrVkCaps::FormatInfo", %"struct.GrVkCaps::FormatInfo"* %756, i64 0, i32 5
  %758 = load i32, i32* %757, align 8
  %759 = icmp sgt i32 %758, 0
  br i1 %759, label %760, label %774

760:                                              ; preds = %755
  %761 = getelementptr inbounds %"struct.GrVkCaps::FormatInfo", %"struct.GrVkCaps::FormatInfo"* %756, i64 0, i32 4, i32 0, i32 0, i32 0
  %762 = load %"struct.GrVkCaps::ColorTypeInfo"*, %"struct.GrVkCaps::ColorTypeInfo"** %761, align 8
  %763 = sext i32 %758 to i64
  br label %766

764:                                              ; preds = %766
  %765 = icmp eq i64 %771, %763
  br i1 %765, label %774, label %766

766:                                              ; preds = %764, %760
  %767 = phi i64 [ 0, %760 ], [ %771, %764 ]
  %768 = getelementptr inbounds %"struct.GrVkCaps::ColorTypeInfo", %"struct.GrVkCaps::ColorTypeInfo"* %762, i64 %767, i32 0
  %769 = load i32, i32* %768, align 4
  %770 = icmp eq i32 %769, 7
  %771 = add nuw nsw i64 %767, 1
  br i1 %770, label %772, label %764

772:                                              ; preds = %766
  %773 = getelementptr inbounds %class.GrVkCaps, %class.GrVkCaps* %0, i64 0, i32 3, i64 7
  store i32 16, i32* %773, align 4
  br label %774

774:                                              ; preds = %764, %755, %772
  %775 = call dereferenceable(40) %"struct.GrVkCaps::FormatInfo"* @_ZN8GrVkCaps13getFormatInfoE8VkFormat(%class.GrVkCaps* %0, i32 44) #13
  %776 = getelementptr inbounds %"struct.GrVkCaps::FormatInfo", %"struct.GrVkCaps::FormatInfo"* %775, i64 0, i32 5
  %777 = load i32, i32* %776, align 8
  %778 = icmp sgt i32 %777, 0
  br i1 %778, label %779, label %793

779:                                              ; preds = %774
  %780 = getelementptr inbounds %"struct.GrVkCaps::FormatInfo", %"struct.GrVkCaps::FormatInfo"* %775, i64 0, i32 4, i32 0, i32 0, i32 0
  %781 = load %"struct.GrVkCaps::ColorTypeInfo"*, %"struct.GrVkCaps::ColorTypeInfo"** %780, align 8
  %782 = sext i32 %777 to i64
  br label %785

783:                                              ; preds = %785
  %784 = icmp eq i64 %790, %782
  br i1 %784, label %793, label %785

785:                                              ; preds = %783, %779
  %786 = phi i64 [ 0, %779 ], [ %790, %783 ]
  %787 = getelementptr inbounds %"struct.GrVkCaps::ColorTypeInfo", %"struct.GrVkCaps::ColorTypeInfo"* %781, i64 %786, i32 0
  %788 = load i32, i32* %787, align 4
  %789 = icmp eq i32 %788, 8
  %790 = add nuw nsw i64 %786, 1
  br i1 %789, label %791, label %783

791:                                              ; preds = %785
  %792 = getelementptr inbounds %class.GrVkCaps, %class.GrVkCaps* %0, i64 0, i32 3, i64 8
  store i32 44, i32* %792, align 4
  br label %793

793:                                              ; preds = %783, %774, %791
  %794 = call dereferenceable(40) %"struct.GrVkCaps::FormatInfo"* @_ZN8GrVkCaps13getFormatInfoE8VkFormat(%class.GrVkCaps* %0, i32 64) #13
  %795 = getelementptr inbounds %"struct.GrVkCaps::FormatInfo", %"struct.GrVkCaps::FormatInfo"* %794, i64 0, i32 5
  %796 = load i32, i32* %795, align 8
  %797 = icmp sgt i32 %796, 0
  br i1 %797, label %798, label %812

798:                                              ; preds = %793
  %799 = getelementptr inbounds %"struct.GrVkCaps::FormatInfo", %"struct.GrVkCaps::FormatInfo"* %794, i64 0, i32 4, i32 0, i32 0, i32 0
  %800 = load %"struct.GrVkCaps::ColorTypeInfo"*, %"struct.GrVkCaps::ColorTypeInfo"** %799, align 8
  %801 = sext i32 %796 to i64
  br label %804

802:                                              ; preds = %804
  %803 = icmp eq i64 %809, %801
  br i1 %803, label %812, label %804

804:                                              ; preds = %802, %798
  %805 = phi i64 [ 0, %798 ], [ %809, %802 ]
  %806 = getelementptr inbounds %"struct.GrVkCaps::ColorTypeInfo", %"struct.GrVkCaps::ColorTypeInfo"* %800, i64 %805, i32 0
  %807 = load i32, i32* %806, align 4
  %808 = icmp eq i32 %807, 9
  %809 = add nuw nsw i64 %805, 1
  br i1 %808, label %810, label %802

810:                                              ; preds = %804
  %811 = getelementptr inbounds %class.GrVkCaps, %class.GrVkCaps* %0, i64 0, i32 3, i64 9
  store i32 64, i32* %811, align 4
  br label %812

812:                                              ; preds = %802, %793, %810
  %813 = call dereferenceable(40) %"struct.GrVkCaps::FormatInfo"* @_ZN8GrVkCaps13getFormatInfoE8VkFormat(%class.GrVkCaps* %0, i32 58) #13
  %814 = getelementptr inbounds %"struct.GrVkCaps::FormatInfo", %"struct.GrVkCaps::FormatInfo"* %813, i64 0, i32 5
  %815 = load i32, i32* %814, align 8
  %816 = icmp sgt i32 %815, 0
  br i1 %816, label %817, label %831

817:                                              ; preds = %812
  %818 = getelementptr inbounds %"struct.GrVkCaps::FormatInfo", %"struct.GrVkCaps::FormatInfo"* %813, i64 0, i32 4, i32 0, i32 0, i32 0
  %819 = load %"struct.GrVkCaps::ColorTypeInfo"*, %"struct.GrVkCaps::ColorTypeInfo"** %818, align 8
  %820 = sext i32 %815 to i64
  br label %823

821:                                              ; preds = %823
  %822 = icmp eq i64 %828, %820
  br i1 %822, label %831, label %823

823:                                              ; preds = %821, %817
  %824 = phi i64 [ 0, %817 ], [ %828, %821 ]
  %825 = getelementptr inbounds %"struct.GrVkCaps::ColorTypeInfo", %"struct.GrVkCaps::ColorTypeInfo"* %819, i64 %824, i32 0
  %826 = load i32, i32* %825, align 4
  %827 = icmp eq i32 %826, 10
  %828 = add nuw nsw i64 %824, 1
  br i1 %827, label %829, label %821

829:                                              ; preds = %823
  %830 = getelementptr inbounds %class.GrVkCaps, %class.GrVkCaps* %0, i64 0, i32 3, i64 10
  store i32 58, i32* %830, align 4
  br label %831

831:                                              ; preds = %821, %812, %829
  %832 = call dereferenceable(40) %"struct.GrVkCaps::FormatInfo"* @_ZN8GrVkCaps13getFormatInfoE8VkFormat(%class.GrVkCaps* %0, i32 9) #13
  %833 = getelementptr inbounds %"struct.GrVkCaps::FormatInfo", %"struct.GrVkCaps::FormatInfo"* %832, i64 0, i32 5
  %834 = load i32, i32* %833, align 8
  %835 = icmp sgt i32 %834, 0
  br i1 %835, label %836, label %850

836:                                              ; preds = %831
  %837 = getelementptr inbounds %"struct.GrVkCaps::FormatInfo", %"struct.GrVkCaps::FormatInfo"* %832, i64 0, i32 4, i32 0, i32 0, i32 0
  %838 = load %"struct.GrVkCaps::ColorTypeInfo"*, %"struct.GrVkCaps::ColorTypeInfo"** %837, align 8
  %839 = sext i32 %834 to i64
  br label %842

840:                                              ; preds = %842
  %841 = icmp eq i64 %847, %839
  br i1 %841, label %850, label %842

842:                                              ; preds = %840, %836
  %843 = phi i64 [ 0, %836 ], [ %847, %840 ]
  %844 = getelementptr inbounds %"struct.GrVkCaps::ColorTypeInfo", %"struct.GrVkCaps::ColorTypeInfo"* %838, i64 %843, i32 0
  %845 = load i32, i32* %844, align 4
  %846 = icmp eq i32 %845, 11
  %847 = add nuw nsw i64 %843, 1
  br i1 %846, label %848, label %840

848:                                              ; preds = %842
  %849 = getelementptr inbounds %class.GrVkCaps, %class.GrVkCaps* %0, i64 0, i32 3, i64 11
  store i32 9, i32* %849, align 4
  br label %850

850:                                              ; preds = %840, %831, %848
  %851 = call dereferenceable(40) %"struct.GrVkCaps::FormatInfo"* @_ZN8GrVkCaps13getFormatInfoE8VkFormat(%class.GrVkCaps* %0, i32 76) #13
  %852 = getelementptr inbounds %"struct.GrVkCaps::FormatInfo", %"struct.GrVkCaps::FormatInfo"* %851, i64 0, i32 5
  %853 = load i32, i32* %852, align 8
  %854 = icmp sgt i32 %853, 0
  br i1 %854, label %855, label %869

855:                                              ; preds = %850
  %856 = getelementptr inbounds %"struct.GrVkCaps::FormatInfo", %"struct.GrVkCaps::FormatInfo"* %851, i64 0, i32 4, i32 0, i32 0, i32 0
  %857 = load %"struct.GrVkCaps::ColorTypeInfo"*, %"struct.GrVkCaps::ColorTypeInfo"** %856, align 8
  %858 = sext i32 %853 to i64
  br label %861

859:                                              ; preds = %861
  %860 = icmp eq i64 %866, %858
  br i1 %860, label %869, label %861

861:                                              ; preds = %859, %855
  %862 = phi i64 [ 0, %855 ], [ %866, %859 ]
  %863 = getelementptr inbounds %"struct.GrVkCaps::ColorTypeInfo", %"struct.GrVkCaps::ColorTypeInfo"* %857, i64 %862, i32 0
  %864 = load i32, i32* %863, align 4
  %865 = icmp eq i32 %864, 13
  %866 = add nuw nsw i64 %862, 1
  br i1 %865, label %867, label %859

867:                                              ; preds = %861
  %868 = getelementptr inbounds %class.GrVkCaps, %class.GrVkCaps* %0, i64 0, i32 3, i64 13
  store i32 76, i32* %868, align 4
  br label %869

869:                                              ; preds = %859, %850, %867
  %870 = call dereferenceable(40) %"struct.GrVkCaps::FormatInfo"* @_ZN8GrVkCaps13getFormatInfoE8VkFormat(%class.GrVkCaps* %0, i32 97) #13
  %871 = getelementptr inbounds %"struct.GrVkCaps::FormatInfo", %"struct.GrVkCaps::FormatInfo"* %870, i64 0, i32 5
  %872 = load i32, i32* %871, align 8
  %873 = icmp sgt i32 %872, 0
  br i1 %873, label %874, label %888

874:                                              ; preds = %869
  %875 = getelementptr inbounds %"struct.GrVkCaps::FormatInfo", %"struct.GrVkCaps::FormatInfo"* %870, i64 0, i32 4, i32 0, i32 0, i32 0
  %876 = load %"struct.GrVkCaps::ColorTypeInfo"*, %"struct.GrVkCaps::ColorTypeInfo"** %875, align 8
  %877 = sext i32 %872 to i64
  br label %880

878:                                              ; preds = %880
  %879 = icmp eq i64 %885, %877
  br i1 %879, label %888, label %880

880:                                              ; preds = %878, %874
  %881 = phi i64 [ 0, %874 ], [ %885, %878 ]
  %882 = getelementptr inbounds %"struct.GrVkCaps::ColorTypeInfo", %"struct.GrVkCaps::ColorTypeInfo"* %876, i64 %881, i32 0
  %883 = load i32, i32* %882, align 4
  %884 = icmp eq i32 %883, 14
  %885 = add nuw nsw i64 %881, 1
  br i1 %884, label %886, label %878

886:                                              ; preds = %880
  %887 = getelementptr inbounds %class.GrVkCaps, %class.GrVkCaps* %0, i64 0, i32 3, i64 14
  store i32 97, i32* %887, align 4
  br label %888

888:                                              ; preds = %878, %869, %886
  %889 = call dereferenceable(40) %"struct.GrVkCaps::FormatInfo"* @_ZN8GrVkCaps13getFormatInfoE8VkFormat(%class.GrVkCaps* %0, i32 97) #13
  %890 = getelementptr inbounds %"struct.GrVkCaps::FormatInfo", %"struct.GrVkCaps::FormatInfo"* %889, i64 0, i32 5
  %891 = load i32, i32* %890, align 8
  %892 = icmp sgt i32 %891, 0
  br i1 %892, label %893, label %907

893:                                              ; preds = %888
  %894 = getelementptr inbounds %"struct.GrVkCaps::FormatInfo", %"struct.GrVkCaps::FormatInfo"* %889, i64 0, i32 4, i32 0, i32 0, i32 0
  %895 = load %"struct.GrVkCaps::ColorTypeInfo"*, %"struct.GrVkCaps::ColorTypeInfo"** %894, align 8
  %896 = sext i32 %891 to i64
  br label %899

897:                                              ; preds = %899
  %898 = icmp eq i64 %904, %896
  br i1 %898, label %907, label %899

899:                                              ; preds = %897, %893
  %900 = phi i64 [ 0, %893 ], [ %904, %897 ]
  %901 = getelementptr inbounds %"struct.GrVkCaps::ColorTypeInfo", %"struct.GrVkCaps::ColorTypeInfo"* %895, i64 %900, i32 0
  %902 = load i32, i32* %901, align 4
  %903 = icmp eq i32 %902, 15
  %904 = add nuw nsw i64 %900, 1
  br i1 %903, label %905, label %897

905:                                              ; preds = %899
  %906 = getelementptr inbounds %class.GrVkCaps, %class.GrVkCaps* %0, i64 0, i32 3, i64 15
  store i32 97, i32* %906, align 4
  br label %907

907:                                              ; preds = %897, %888, %905
  %908 = call dereferenceable(40) %"struct.GrVkCaps::FormatInfo"* @_ZN8GrVkCaps13getFormatInfoE8VkFormat(%class.GrVkCaps* %0, i32 70) #13
  %909 = getelementptr inbounds %"struct.GrVkCaps::FormatInfo", %"struct.GrVkCaps::FormatInfo"* %908, i64 0, i32 5
  %910 = load i32, i32* %909, align 8
  %911 = icmp sgt i32 %910, 0
  br i1 %911, label %912, label %926

912:                                              ; preds = %907
  %913 = getelementptr inbounds %"struct.GrVkCaps::FormatInfo", %"struct.GrVkCaps::FormatInfo"* %908, i64 0, i32 4, i32 0, i32 0, i32 0
  %914 = load %"struct.GrVkCaps::ColorTypeInfo"*, %"struct.GrVkCaps::ColorTypeInfo"** %913, align 8
  %915 = sext i32 %910 to i64
  br label %918

916:                                              ; preds = %918
  %917 = icmp eq i64 %923, %915
  br i1 %917, label %926, label %918

918:                                              ; preds = %916, %912
  %919 = phi i64 [ 0, %912 ], [ %923, %916 ]
  %920 = getelementptr inbounds %"struct.GrVkCaps::ColorTypeInfo", %"struct.GrVkCaps::ColorTypeInfo"* %914, i64 %919, i32 0
  %921 = load i32, i32* %920, align 4
  %922 = icmp eq i32 %921, 17
  %923 = add nuw nsw i64 %919, 1
  br i1 %922, label %924, label %916

924:                                              ; preds = %918
  %925 = getelementptr inbounds %class.GrVkCaps, %class.GrVkCaps* %0, i64 0, i32 3, i64 17
  store i32 70, i32* %925, align 4
  br label %926

926:                                              ; preds = %916, %907, %924
  %927 = call dereferenceable(40) %"struct.GrVkCaps::FormatInfo"* @_ZN8GrVkCaps13getFormatInfoE8VkFormat(%class.GrVkCaps* %0, i32 77) #13
  %928 = getelementptr inbounds %"struct.GrVkCaps::FormatInfo", %"struct.GrVkCaps::FormatInfo"* %927, i64 0, i32 5
  %929 = load i32, i32* %928, align 8
  %930 = icmp sgt i32 %929, 0
  br i1 %930, label %931, label %945

931:                                              ; preds = %926
  %932 = getelementptr inbounds %"struct.GrVkCaps::FormatInfo", %"struct.GrVkCaps::FormatInfo"* %927, i64 0, i32 4, i32 0, i32 0, i32 0
  %933 = load %"struct.GrVkCaps::ColorTypeInfo"*, %"struct.GrVkCaps::ColorTypeInfo"** %932, align 8
  %934 = sext i32 %929 to i64
  br label %937

935:                                              ; preds = %937
  %936 = icmp eq i64 %942, %934
  br i1 %936, label %945, label %937

937:                                              ; preds = %935, %931
  %938 = phi i64 [ 0, %931 ], [ %942, %935 ]
  %939 = getelementptr inbounds %"struct.GrVkCaps::ColorTypeInfo", %"struct.GrVkCaps::ColorTypeInfo"* %933, i64 %938, i32 0
  %940 = load i32, i32* %939, align 4
  %941 = icmp eq i32 %940, 18
  %942 = add nuw nsw i64 %938, 1
  br i1 %941, label %943, label %935

943:                                              ; preds = %937
  %944 = getelementptr inbounds %class.GrVkCaps, %class.GrVkCaps* %0, i64 0, i32 3, i64 18
  store i32 77, i32* %944, align 4
  br label %945

945:                                              ; preds = %935, %926, %943
  %946 = call dereferenceable(40) %"struct.GrVkCaps::FormatInfo"* @_ZN8GrVkCaps13getFormatInfoE8VkFormat(%class.GrVkCaps* %0, i32 91) #13
  %947 = getelementptr inbounds %"struct.GrVkCaps::FormatInfo", %"struct.GrVkCaps::FormatInfo"* %946, i64 0, i32 5
  %948 = load i32, i32* %947, align 8
  %949 = icmp sgt i32 %948, 0
  br i1 %949, label %950, label %964

950:                                              ; preds = %945
  %951 = getelementptr inbounds %"struct.GrVkCaps::FormatInfo", %"struct.GrVkCaps::FormatInfo"* %946, i64 0, i32 4, i32 0, i32 0, i32 0
  %952 = load %"struct.GrVkCaps::ColorTypeInfo"*, %"struct.GrVkCaps::ColorTypeInfo"** %951, align 8
  %953 = sext i32 %948 to i64
  br label %956

954:                                              ; preds = %956
  %955 = icmp eq i64 %961, %953
  br i1 %955, label %964, label %956

956:                                              ; preds = %954, %950
  %957 = phi i64 [ 0, %950 ], [ %961, %954 ]
  %958 = getelementptr inbounds %"struct.GrVkCaps::ColorTypeInfo", %"struct.GrVkCaps::ColorTypeInfo"* %952, i64 %957, i32 0
  %959 = load i32, i32* %958, align 4
  %960 = icmp eq i32 %959, 20
  %961 = add nuw nsw i64 %957, 1
  br i1 %960, label %962, label %954

962:                                              ; preds = %956
  %963 = getelementptr inbounds %class.GrVkCaps, %class.GrVkCaps* %0, i64 0, i32 3, i64 20
  store i32 91, i32* %963, align 4
  br label %964

964:                                              ; preds = %954, %945, %962
  %965 = call dereferenceable(40) %"struct.GrVkCaps::FormatInfo"* @_ZN8GrVkCaps13getFormatInfoE8VkFormat(%class.GrVkCaps* %0, i32 83) #13
  %966 = getelementptr inbounds %"struct.GrVkCaps::FormatInfo", %"struct.GrVkCaps::FormatInfo"* %965, i64 0, i32 5
  %967 = load i32, i32* %966, align 8
  %968 = icmp sgt i32 %967, 0
  br i1 %968, label %969, label %983

969:                                              ; preds = %964
  %970 = getelementptr inbounds %"struct.GrVkCaps::FormatInfo", %"struct.GrVkCaps::FormatInfo"* %965, i64 0, i32 4, i32 0, i32 0, i32 0
  %971 = load %"struct.GrVkCaps::ColorTypeInfo"*, %"struct.GrVkCaps::ColorTypeInfo"** %970, align 8
  %972 = sext i32 %967 to i64
  br label %975

973:                                              ; preds = %975
  %974 = icmp eq i64 %980, %972
  br i1 %974, label %983, label %975

975:                                              ; preds = %973, %969
  %976 = phi i64 [ 0, %969 ], [ %980, %973 ]
  %977 = getelementptr inbounds %"struct.GrVkCaps::ColorTypeInfo", %"struct.GrVkCaps::ColorTypeInfo"* %971, i64 %976, i32 0
  %978 = load i32, i32* %977, align 4
  %979 = icmp eq i32 %978, 19
  %980 = add nuw nsw i64 %976, 1
  br i1 %979, label %981, label %973

981:                                              ; preds = %975
  %982 = getelementptr inbounds %class.GrVkCaps, %class.GrVkCaps* %0, i64 0, i32 3, i64 19
  store i32 83, i32* %982, align 4
  br label %983

983:                                              ; preds = %973, %964, %981
  ret void

984:                                              ; preds = %750
  %985 = getelementptr inbounds %"struct.GrVkCaps::FormatInfo", %"struct.GrVkCaps::FormatInfo"* %751, i64 0, i32 4, i32 0, i32 0, i32 0
  %986 = load %"struct.GrVkCaps::ColorTypeInfo"*, %"struct.GrVkCaps::ColorTypeInfo"** %985, align 8
  %987 = sext i32 %753 to i64
  br label %988

988:                                              ; preds = %994, %984
  %989 = phi i64 [ 0, %984 ], [ %993, %994 ]
  %990 = getelementptr inbounds %"struct.GrVkCaps::ColorTypeInfo", %"struct.GrVkCaps::ColorTypeInfo"* %986, i64 %989, i32 0
  %991 = load i32, i32* %990, align 4
  %992 = icmp eq i32 %991, 6
  %993 = add nuw nsw i64 %989, 1
  br i1 %992, label %746, label %994

994:                                              ; preds = %988
  %995 = icmp eq i64 %993, %987
  br i1 %995, label %755, label %988

996:                                              ; preds = %686
  %997 = getelementptr inbounds %"struct.GrVkCaps::FormatInfo", %"struct.GrVkCaps::FormatInfo"* %687, i64 0, i32 4, i32 0, i32 0, i32 0
  %998 = load %"struct.GrVkCaps::ColorTypeInfo"*, %"struct.GrVkCaps::ColorTypeInfo"** %997, align 8
  %999 = sext i32 %689 to i64
  br label %1000

1000:                                             ; preds = %1006, %996
  %1001 = phi i64 [ 0, %996 ], [ %1005, %1006 ]
  %1002 = getelementptr inbounds %"struct.GrVkCaps::ColorTypeInfo", %"struct.GrVkCaps::ColorTypeInfo"* %998, i64 %1001, i32 0
  %1003 = load i32, i32* %1002, align 4
  %1004 = icmp eq i32 %1003, 3
  %1005 = add nuw nsw i64 %1001, 1
  br i1 %1004, label %682, label %1006

1006:                                             ; preds = %1000
  %1007 = icmp eq i64 %1005, %999
  br i1 %1007, label %691, label %1000
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN8GrVkCaps17initStencilFormatEPK13GrVkInterfaceP18VkPhysicalDevice_T(%class.GrVkCaps* nocapture, %struct.GrVkInterface* nocapture readonly, %struct.VkPhysicalDevice_T*) local_unnamed_addr #0 align 2 {
  %4 = alloca %struct.VkFormatProperties, align 4
  %5 = alloca %struct.VkFormatProperties, align 4
  %6 = bitcast %struct.VkFormatProperties* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 12, i8* nonnull %6) #13
  %7 = getelementptr inbounds %struct.VkFormatProperties, %struct.VkFormatProperties* %5, i64 0, i32 1
  call void @llvm.memset.p0i8.i64(i8* nonnull align 4 %6, i8 0, i64 12, i1 false) #13
  %8 = getelementptr inbounds %struct.GrVkInterface, %struct.GrVkInterface* %1, i64 0, i32 1, i32 4, i32 0
  %9 = load void (%struct.VkPhysicalDevice_T*, i32, %struct.VkFormatProperties*)*, void (%struct.VkPhysicalDevice_T*, i32, %struct.VkFormatProperties*)** %8, align 8
  call void %9(%struct.VkPhysicalDevice_T* %2, i32 127, %struct.VkFormatProperties* nonnull %5) #13
  %10 = load i32, i32* %7, align 4
  %11 = and i32 %10, 512
  %12 = icmp eq i32 %11, 0
  call void @llvm.lifetime.end.p0i8(i64 12, i8* nonnull %6) #13
  br i1 %12, label %15, label %13

13:                                               ; preds = %3
  %14 = getelementptr inbounds %class.GrVkCaps, %class.GrVkCaps* %0, i64 0, i32 4
  store i32 127, i32* %14, align 4
  br label %25

15:                                               ; preds = %3
  %16 = bitcast %struct.VkFormatProperties* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 12, i8* nonnull %16) #13
  %17 = getelementptr inbounds %struct.VkFormatProperties, %struct.VkFormatProperties* %4, i64 0, i32 1
  call void @llvm.memset.p0i8.i64(i8* nonnull align 4 %16, i8 0, i64 12, i1 false) #13
  %18 = load void (%struct.VkPhysicalDevice_T*, i32, %struct.VkFormatProperties*)*, void (%struct.VkPhysicalDevice_T*, i32, %struct.VkFormatProperties*)** %8, align 8
  call void %18(%struct.VkPhysicalDevice_T* %2, i32 129, %struct.VkFormatProperties* nonnull %4) #13
  %19 = load i32, i32* %17, align 4
  %20 = and i32 %19, 512
  %21 = icmp eq i32 %20, 0
  call void @llvm.lifetime.end.p0i8(i64 12, i8* nonnull %16) #13
  %22 = getelementptr inbounds %class.GrVkCaps, %class.GrVkCaps* %0, i64 0, i32 4
  br i1 %21, label %24, label %23

23:                                               ; preds = %15
  store i32 129, i32* %22, align 4
  br label %25

24:                                               ; preds = %15
  store i32 130, i32* %22, align 4
  br label %25

25:                                               ; preds = %23, %24, %13
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN8GrVkCaps33applyDriverCorrectnessWorkaroundsERK26VkPhysicalDeviceProperties(%class.GrVkCaps* nocapture, %struct.VkPhysicalDeviceProperties* readonly dereferenceable(824)) local_unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %class.GrVkCaps, %class.GrVkCaps* %0, i64 0, i32 20
  %4 = load i8, i8* %3, align 2, !range !2
  %5 = icmp eq i8 %4, 0
  br i1 %5, label %11, label %6

6:                                                ; preds = %2
  %7 = getelementptr inbounds %struct.VkPhysicalDeviceProperties, %struct.VkPhysicalDeviceProperties* %1, i64 0, i32 2
  %8 = load i32, i32* %7, align 8
  %9 = icmp eq i32 %8, 20803
  br i1 %9, label %10, label %11

10:                                               ; preds = %6
  store i8 0, i8* %3, align 2
  br label %11

11:                                               ; preds = %2, %10, %6
  %12 = getelementptr inbounds %struct.VkPhysicalDeviceProperties, %struct.VkPhysicalDeviceProperties* %1, i64 0, i32 2
  %13 = load i32, i32* %12, align 8
  %14 = icmp eq i32 %13, 5045
  br i1 %14, label %15, label %27

15:                                               ; preds = %11
  %16 = getelementptr inbounds %class.GrVkCaps, %class.GrVkCaps* %0, i64 0, i32 7
  store i8 1, i8* %16, align 1
  %17 = load i32, i32* %12, align 8
  %18 = icmp eq i32 %17, 5045
  br i1 %18, label %19, label %27

19:                                               ; preds = %15
  %20 = getelementptr inbounds %class.GrVkCaps, %class.GrVkCaps* %0, i64 0, i32 21
  store i8 0, i8* %20, align 1
  %21 = getelementptr inbounds %class.GrVkCaps, %class.GrVkCaps* %0, i64 0, i32 0, i32 3
  %22 = bitcast i48* %21 to i64*
  %23 = load i64, i64* %22, align 8
  %24 = and i64 %23, -65
  store i64 %24, i64* %22, align 8
  %25 = getelementptr inbounds %class.GrVkCaps, %class.GrVkCaps* %0, i64 0, i32 0, i32 4
  store i32 0, i32* %25, align 8
  %26 = load i32, i32* %12, align 8
  br label %27

27:                                               ; preds = %11, %19, %15
  %28 = phi i32 [ %26, %19 ], [ %17, %15 ], [ %13, %11 ]
  %29 = icmp eq i32 %28, 20803
  br i1 %29, label %30, label %33

30:                                               ; preds = %27
  %31 = getelementptr inbounds %class.GrVkCaps, %class.GrVkCaps* %0, i64 0, i32 28
  store i8 0, i8* %31, align 4
  %32 = load i32, i32* %12, align 8
  br label %33

33:                                               ; preds = %30, %27
  %34 = phi i32 [ %32, %30 ], [ %28, %27 ]
  %35 = icmp eq i32 %34, 5045
  br i1 %35, label %36, label %44

36:                                               ; preds = %33
  %37 = getelementptr inbounds %class.GrVkCaps, %class.GrVkCaps* %0, i64 0, i32 0, i32 2, i32 0
  %38 = load %class.GrShaderCaps*, %class.GrShaderCaps** %37, align 8
  %39 = getelementptr inbounds %class.GrShaderCaps, %class.GrShaderCaps* %38, i64 0, i32 2
  %40 = bitcast i56* %39 to i64*
  %41 = load i64, i64* %40, align 8
  %42 = or i64 %41, 17592186044416
  store i64 %42, i64* %40, align 8
  %43 = load i32, i32* %12, align 8
  br label %44

44:                                               ; preds = %36, %33
  %45 = phi i32 [ %43, %36 ], [ %34, %33 ]
  switch i32 %45, label %49 [
    i32 20803, label %46
    i32 4098, label %46
  ]

46:                                               ; preds = %44, %44
  %47 = getelementptr inbounds %class.GrVkCaps, %class.GrVkCaps* %0, i64 0, i32 22
  store i8 1, i8* %47, align 8
  %48 = load i32, i32* %12, align 8
  br label %49

49:                                               ; preds = %44, %46
  %50 = phi i32 [ %45, %44 ], [ %48, %46 ]
  switch i32 %50, label %54 [
    i32 20803, label %51
    i32 5045, label %51
  ]

51:                                               ; preds = %49, %49
  %52 = getelementptr inbounds %class.GrVkCaps, %class.GrVkCaps* %0, i64 0, i32 29
  store i8 1, i8* %52, align 1
  %53 = load i32, i32* %12, align 8
  br label %54

54:                                               ; preds = %49, %51
  %55 = phi i32 [ %50, %49 ], [ %53, %51 ]
  %56 = icmp eq i32 %55, 32902
  br i1 %56, label %57, label %60

57:                                               ; preds = %54
  %58 = getelementptr inbounds %class.GrVkCaps, %class.GrVkCaps* %0, i64 0, i32 23
  store i8 1, i8* %58, align 1
  %59 = load i32, i32* %12, align 8
  br label %60

60:                                               ; preds = %57, %54
  %61 = phi i32 [ %59, %57 ], [ %55, %54 ]
  %62 = icmp eq i32 %61, 5045
  br i1 %62, label %63, label %69

63:                                               ; preds = %60
  %64 = getelementptr inbounds %class.GrVkCaps, %class.GrVkCaps* %0, i64 0, i32 0, i32 3
  %65 = bitcast i48* %64 to i64*
  %66 = load i64, i64* %65, align 8
  %67 = or i64 %66, 137438953472
  store i64 %67, i64* %65, align 8
  %68 = load i32, i32* %12, align 8
  br label %69

69:                                               ; preds = %63, %60
  %70 = phi i32 [ %68, %63 ], [ %61, %60 ]
  %71 = icmp eq i32 %70, 4098
  br i1 %71, label %72, label %78

72:                                               ; preds = %69
  %73 = getelementptr inbounds %class.GrVkCaps, %class.GrVkCaps* %0, i64 0, i32 0, i32 10
  %74 = load i32, i32* %73, align 4
  %75 = icmp slt i32 %74, 32
  %76 = select i1 %75, i32 %74, i32 32
  store i32 %76, i32* %73, align 8
  %77 = load i32, i32* %12, align 8
  br label %78

78:                                               ; preds = %72, %69
  %79 = phi i32 [ %77, %72 ], [ %70, %69 ]
  %80 = icmp eq i32 %79, 20803
  br i1 %80, label %81, label %87

81:                                               ; preds = %78
  %82 = getelementptr inbounds %class.GrVkCaps, %class.GrVkCaps* %0, i64 0, i32 0, i32 3
  %83 = bitcast i48* %82 to i64*
  %84 = load i64, i64* %83, align 8
  %85 = and i64 %84, -65
  store i64 %85, i64* %83, align 8
  %86 = load i32, i32* %12, align 8
  br label %87

87:                                               ; preds = %81, %78
  %88 = phi i32 [ %86, %81 ], [ %79, %78 ]
  %89 = icmp eq i32 %88, 5045
  br i1 %89, label %90, label %96

90:                                               ; preds = %87
  %91 = getelementptr inbounds %class.GrVkCaps, %class.GrVkCaps* %0, i64 0, i32 0, i32 3
  %92 = bitcast i48* %91 to i64*
  %93 = load i64, i64* %92, align 8
  %94 = and i64 %93, -1025
  store i64 %94, i64* %92, align 8
  %95 = load i32, i32* %12, align 8
  br label %96

96:                                               ; preds = %90, %87
  %97 = phi i32 [ %95, %90 ], [ %88, %87 ]
  %98 = icmp eq i32 %97, 4112
  br i1 %98, label %99, label %106

99:                                               ; preds = %96
  %100 = getelementptr inbounds %class.GrVkCaps, %class.GrVkCaps* %0, i64 0, i32 0, i32 2, i32 0
  %101 = load %class.GrShaderCaps*, %class.GrShaderCaps** %100, align 8
  %102 = getelementptr inbounds %class.GrShaderCaps, %class.GrShaderCaps* %101, i64 0, i32 2
  %103 = bitcast i56* %102 to i64*
  %104 = load i64, i64* %103, align 8
  %105 = or i64 %104, 134217728
  store i64 %105, i64* %103, align 8
  br label %106

106:                                              ; preds = %99, %96
  %107 = getelementptr inbounds %struct.VkPhysicalDeviceProperties, %struct.VkPhysicalDeviceProperties* %1, i64 0, i32 5, i64 0
  %108 = tail call i8* @strstr(i8* %107, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.11, i64 0, i64 0)) #16
  %109 = icmp eq i8* %108, null
  br i1 %109, label %117, label %110

110:                                              ; preds = %106
  %111 = getelementptr inbounds %class.GrVkCaps, %class.GrVkCaps* %0, i64 0, i32 0, i32 2, i32 0
  %112 = load %class.GrShaderCaps*, %class.GrShaderCaps** %111, align 8
  %113 = getelementptr inbounds %class.GrShaderCaps, %class.GrShaderCaps* %112, i64 0, i32 2
  %114 = bitcast i56* %113 to i64*
  %115 = load i64, i64* %114, align 8
  %116 = and i64 %115, -32769
  store i64 %116, i64* %114, align 8
  br label %117

117:                                              ; preds = %106, %110
  ret void
}

declare void @_ZN6GrCaps20finishInitializationERK16GrContextOptions(%class.GrCaps*, %struct.GrContextOptions* dereferenceable(240)) local_unnamed_addr #1

; Function Attrs: nofree nounwind readonly
declare i8* @strstr(i8*, i8* nocapture) local_unnamed_addr #5

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_Z24stencil_format_supportedPK13GrVkInterfaceP18VkPhysicalDevice_T8VkFormat(%struct.GrVkInterface* nocapture readonly, %struct.VkPhysicalDevice_T*, i32) local_unnamed_addr #0 {
  %4 = alloca %struct.VkFormatProperties, align 4
  %5 = bitcast %struct.VkFormatProperties* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 12, i8* nonnull %5) #13
  %6 = getelementptr inbounds %struct.VkFormatProperties, %struct.VkFormatProperties* %4, i64 0, i32 1
  call void @llvm.memset.p0i8.i64(i8* nonnull align 4 %5, i8 0, i64 12, i1 false)
  %7 = getelementptr inbounds %struct.GrVkInterface, %struct.GrVkInterface* %0, i64 0, i32 1, i32 4, i32 0
  %8 = load void (%struct.VkPhysicalDevice_T*, i32, %struct.VkFormatProperties*)*, void (%struct.VkPhysicalDevice_T*, i32, %struct.VkFormatProperties*)** %7, align 8
  call void %8(%struct.VkPhysicalDevice_T* %1, i32 %2, %struct.VkFormatProperties* nonnull %4) #13
  %9 = load i32, i32* %6, align 4
  %10 = and i32 %9, 512
  %11 = icmp ne i32 %10, 0
  call void @llvm.lifetime.end.p0i8(i64 12, i8* nonnull %5) #13
  ret i1 %11
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN8GrVkCaps12setColorTypeE11GrColorTypeSt16initializer_listI8VkFormatE(%class.GrVkCaps*, i32, i32*, i64) local_unnamed_addr #0 align 2 {
  %5 = getelementptr inbounds i32, i32* %2, i64 %3
  %6 = icmp eq i64 %3, 0
  br i1 %6, label %33, label %7

7:                                                ; preds = %4, %30
  %8 = phi i32* [ %31, %30 ], [ %2, %4 ]
  %9 = load i32, i32* %8, align 4
  %10 = tail call dereferenceable(40) %"struct.GrVkCaps::FormatInfo"* @_ZN8GrVkCaps13getFormatInfoE8VkFormat(%class.GrVkCaps* %0, i32 %9)
  %11 = getelementptr inbounds %"struct.GrVkCaps::FormatInfo", %"struct.GrVkCaps::FormatInfo"* %10, i64 0, i32 5
  %12 = load i32, i32* %11, align 8
  %13 = icmp sgt i32 %12, 0
  br i1 %13, label %14, label %30

14:                                               ; preds = %7
  %15 = getelementptr inbounds %"struct.GrVkCaps::FormatInfo", %"struct.GrVkCaps::FormatInfo"* %10, i64 0, i32 4, i32 0, i32 0, i32 0
  %16 = load %"struct.GrVkCaps::ColorTypeInfo"*, %"struct.GrVkCaps::ColorTypeInfo"** %15, align 8
  %17 = sext i32 %12 to i64
  br label %20

18:                                               ; preds = %20
  %19 = icmp slt i64 %25, %17
  br i1 %19, label %20, label %30

20:                                               ; preds = %14, %18
  %21 = phi i64 [ 0, %14 ], [ %25, %18 ]
  %22 = getelementptr inbounds %"struct.GrVkCaps::ColorTypeInfo", %"struct.GrVkCaps::ColorTypeInfo"* %16, i64 %21, i32 0
  %23 = load i32, i32* %22, align 4
  %24 = icmp eq i32 %23, %1
  %25 = add nuw nsw i64 %21, 1
  br i1 %24, label %26, label %18

26:                                               ; preds = %20
  %27 = load i32, i32* %8, align 4
  %28 = sext i32 %1 to i64
  %29 = getelementptr inbounds %class.GrVkCaps, %class.GrVkCaps* %0, i64 0, i32 3, i64 %28
  store i32 %27, i32* %29, align 4
  br label %33

30:                                               ; preds = %18, %7
  %31 = getelementptr inbounds i32, i32* %8, i64 1
  %32 = icmp eq i32* %31, %5
  br i1 %32, label %33, label %7

33:                                               ; preds = %30, %4, %26
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden dereferenceable(40) %"struct.GrVkCaps::FormatInfo"* @_ZN8GrVkCaps13getFormatInfoE8VkFormat(%class.GrVkCaps* readnone, i32) local_unnamed_addr #0 align 2 {
  switch i32 %1, label %34 [
    i32 37, label %24
    i32 9, label %3
    i32 44, label %4
    i32 4, label %5
    i32 97, label %6
    i32 76, label %7
    i32 23, label %8
    i32 16, label %9
    i32 64, label %10
    i32 58, label %11
    i32 3, label %12
    i32 2, label %13
    i32 43, label %14
    i32 147, label %15
    i32 131, label %16
    i32 133, label %17
    i32 70, label %18
    i32 77, label %19
    i32 1000156002, label %20
    i32 1000156003, label %21
    i32 91, label %22
    i32 83, label %23
  ]

3:                                                ; preds = %2
  br label %24

4:                                                ; preds = %2
  br label %24

5:                                                ; preds = %2
  br label %24

6:                                                ; preds = %2
  br label %24

7:                                                ; preds = %2
  br label %24

8:                                                ; preds = %2
  br label %24

9:                                                ; preds = %2
  br label %24

10:                                               ; preds = %2
  br label %24

11:                                               ; preds = %2
  br label %24

12:                                               ; preds = %2
  br label %24

13:                                               ; preds = %2
  br label %24

14:                                               ; preds = %2
  br label %24

15:                                               ; preds = %2
  br label %24

16:                                               ; preds = %2
  br label %24

17:                                               ; preds = %2
  br label %24

18:                                               ; preds = %2
  br label %24

19:                                               ; preds = %2
  br label %24

20:                                               ; preds = %2
  br label %24

21:                                               ; preds = %2
  br label %24

22:                                               ; preds = %2
  br label %24

23:                                               ; preds = %2
  br label %24

24:                                               ; preds = %2, %23, %22, %21, %20, %19, %18, %17, %16, %15, %14, %13, %12, %11, %10, %9, %8, %7, %6, %5, %4, %3
  %25 = phi i64 [ 0, %2 ], [ 1, %3 ], [ 2, %4 ], [ 3, %5 ], [ 4, %6 ], [ 5, %7 ], [ 6, %8 ], [ 7, %9 ], [ 8, %10 ], [ 9, %11 ], [ 10, %12 ], [ 11, %13 ], [ 12, %14 ], [ 13, %15 ], [ 14, %16 ], [ 15, %17 ], [ 16, %18 ], [ 17, %19 ], [ 18, %20 ], [ 19, %21 ], [ 20, %22 ], [ 21, %23 ]
  %26 = getelementptr inbounds %class.GrVkCaps, %class.GrVkCaps* %0, i64 0, i32 2, i64 %25
  br label %32

27:                                               ; preds = %34
  %28 = tail call i32 @__cxa_guard_acquire(i64* nonnull @_ZGVZN8GrVkCaps13getFormatInfoE8VkFormatE14kInvalidFormat) #13
  %29 = icmp eq i32 %28, 0
  br i1 %29, label %32, label %30

30:                                               ; preds = %27
  store i16 0, i16* getelementptr inbounds (%"struct.GrVkCaps::FormatInfo", %"struct.GrVkCaps::FormatInfo"* @_ZZN8GrVkCaps13getFormatInfoE8VkFormatE14kInvalidFormat, i64 0, i32 0), align 8
  store i16 0, i16* getelementptr inbounds (%"struct.GrVkCaps::FormatInfo", %"struct.GrVkCaps::FormatInfo"* @_ZZN8GrVkCaps13getFormatInfoE8VkFormatE14kInvalidFormat, i64 0, i32 1), align 2
  tail call void @llvm.memset.p0i8.i64(i8* align 8 bitcast (%class.SkTDArray* getelementptr inbounds (%"struct.GrVkCaps::FormatInfo", %"struct.GrVkCaps::FormatInfo"* @_ZZN8GrVkCaps13getFormatInfoE8VkFormatE14kInvalidFormat, i64 0, i32 3) to i8*), i8 0, i64 28, i1 false) #13
  %31 = tail call i32 @__cxa_atexit(void (i8*)* bitcast (void (%"struct.GrVkCaps::FormatInfo"*)* @_ZN8GrVkCaps10FormatInfoD2Ev to void (i8*)*), i8* bitcast (%"struct.GrVkCaps::FormatInfo"* @_ZZN8GrVkCaps13getFormatInfoE8VkFormatE14kInvalidFormat to i8*), i8* nonnull @__dso_handle) #13
  tail call void @__cxa_guard_release(i64* nonnull @_ZGVZN8GrVkCaps13getFormatInfoE8VkFormatE14kInvalidFormat) #13
  br label %32

32:                                               ; preds = %24, %34, %30, %27
  %33 = phi %"struct.GrVkCaps::FormatInfo"* [ %26, %24 ], [ @_ZZN8GrVkCaps13getFormatInfoE8VkFormatE14kInvalidFormat, %27 ], [ @_ZZN8GrVkCaps13getFormatInfoE8VkFormatE14kInvalidFormat, %30 ], [ @_ZZN8GrVkCaps13getFormatInfoE8VkFormatE14kInvalidFormat, %34 ]
  ret %"struct.GrVkCaps::FormatInfo"* %33

34:                                               ; preds = %2
  %35 = load atomic i8, i8* bitcast (i64* @_ZGVZN8GrVkCaps13getFormatInfoE8VkFormatE14kInvalidFormat to i8*) acquire, align 8
  %36 = icmp eq i8 %35, 0
  br i1 %36, label %27, label %32, !prof !3
}

; Function Attrs: nounwind ssp uwtable
define hidden dereferenceable(40) %"struct.GrVkCaps::FormatInfo"* @_ZNK8GrVkCaps13getFormatInfoE8VkFormat(%class.GrVkCaps* readnone, i32) local_unnamed_addr #0 align 2 {
  %3 = tail call dereferenceable(40) %"struct.GrVkCaps::FormatInfo"* @_ZN8GrVkCaps13getFormatInfoE8VkFormat(%class.GrVkCaps* %0, i32 %1)
  ret %"struct.GrVkCaps::FormatInfo"* %3
}

; Function Attrs: nofree nounwind
declare i32 @__cxa_guard_acquire(i64*) local_unnamed_addr #6

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZN8GrVkCaps10FormatInfoD2Ev(%"struct.GrVkCaps::FormatInfo"*) unnamed_addr #7 comdat align 2 {
  %2 = getelementptr inbounds %"struct.GrVkCaps::FormatInfo", %"struct.GrVkCaps::FormatInfo"* %0, i64 0, i32 4, i32 0, i32 0, i32 0
  %3 = load %"struct.GrVkCaps::ColorTypeInfo"*, %"struct.GrVkCaps::ColorTypeInfo"** %2, align 8
  store %"struct.GrVkCaps::ColorTypeInfo"* null, %"struct.GrVkCaps::ColorTypeInfo"** %2, align 8
  %4 = icmp eq %"struct.GrVkCaps::ColorTypeInfo"* %3, null
  br i1 %4, label %7, label %5

5:                                                ; preds = %1
  %6 = bitcast %"struct.GrVkCaps::ColorTypeInfo"* %3 to i8*
  tail call void @_ZdaPv(i8* %6) #14
  br label %7

7:                                                ; preds = %1, %5
  %8 = getelementptr inbounds %"struct.GrVkCaps::FormatInfo", %"struct.GrVkCaps::FormatInfo"* %0, i64 0, i32 3
  %9 = bitcast %class.SkTDArray* %8 to i8**
  %10 = load i8*, i8** %9, align 8
  tail call void @_Z7sk_freePv(i8* %10) #13
  ret void
}

; Function Attrs: nofree nounwind
declare i32 @__cxa_atexit(void (i8*)*, i8*, i8*) local_unnamed_addr #6

; Function Attrs: nofree nounwind
declare void @__cxa_guard_release(i64*) local_unnamed_addr #6

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN8GrVkCaps10FormatInfo4initEPK13GrVkInterfaceP18VkPhysicalDevice_TRK26VkPhysicalDeviceProperties8VkFormat(%"struct.GrVkCaps::FormatInfo"* nocapture, %struct.GrVkInterface* nocapture readonly, %struct.VkPhysicalDevice_T*, %struct.VkPhysicalDeviceProperties* nocapture readonly dereferenceable(824), i32) local_unnamed_addr #0 align 2 {
  %6 = alloca %struct.VkFormatProperties, align 4
  %7 = bitcast %struct.VkFormatProperties* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 12, i8* nonnull %7) #13
  %8 = getelementptr inbounds %struct.VkFormatProperties, %struct.VkFormatProperties* %6, i64 0, i32 0
  %9 = getelementptr inbounds %struct.VkFormatProperties, %struct.VkFormatProperties* %6, i64 0, i32 1
  call void @llvm.memset.p0i8.i64(i8* nonnull align 4 %7, i8 0, i64 12, i1 false)
  %10 = getelementptr inbounds %struct.GrVkInterface, %struct.GrVkInterface* %1, i64 0, i32 1, i32 4, i32 0
  %11 = load void (%struct.VkPhysicalDevice_T*, i32, %struct.VkFormatProperties*)*, void (%struct.VkPhysicalDevice_T*, i32, %struct.VkFormatProperties*)** %10, align 8
  call void %11(%struct.VkPhysicalDevice_T* %2, i32 %4, %struct.VkFormatProperties* nonnull %6) #13
  %12 = load i32, i32* %8, align 4
  %13 = getelementptr inbounds %"struct.GrVkCaps::FormatInfo", %"struct.GrVkCaps::FormatInfo"* %0, i64 0, i32 1
  %14 = and i32 %12, 4097
  %15 = icmp eq i32 %14, 4097
  br i1 %15, label %16, label %23

16:                                               ; preds = %5
  %17 = load i16, i16* %13, align 2
  %18 = or i16 %17, 1
  store i16 %18, i16* %13, align 2
  %19 = and i32 %12, 256
  %20 = icmp eq i32 %19, 0
  br i1 %20, label %23, label %21

21:                                               ; preds = %16
  %22 = or i16 %17, 3
  store i16 %22, i16* %13, align 2
  br label %23

23:                                               ; preds = %21, %16, %5
  %24 = and i32 %12, 1024
  %25 = icmp eq i32 %24, 0
  br i1 %25, label %29, label %26

26:                                               ; preds = %23
  %27 = load i16, i16* %13, align 2
  %28 = or i16 %27, 4
  store i16 %28, i16* %13, align 2
  br label %29

29:                                               ; preds = %26, %23
  %30 = and i32 %12, 2048
  %31 = icmp eq i32 %30, 0
  br i1 %31, label %35, label %32

32:                                               ; preds = %29
  %33 = load i16, i16* %13, align 2
  %34 = or i16 %33, 8
  store i16 %34, i16* %13, align 2
  br label %35

35:                                               ; preds = %29, %32
  %36 = load i32, i32* %9, align 4
  %37 = getelementptr inbounds %"struct.GrVkCaps::FormatInfo", %"struct.GrVkCaps::FormatInfo"* %0, i64 0, i32 0
  %38 = and i32 %36, 4097
  %39 = icmp eq i32 %38, 4097
  br i1 %39, label %40, label %47

40:                                               ; preds = %35
  %41 = load i16, i16* %37, align 2
  %42 = or i16 %41, 1
  store i16 %42, i16* %37, align 2
  %43 = and i32 %36, 256
  %44 = icmp eq i32 %43, 0
  br i1 %44, label %47, label %45

45:                                               ; preds = %40
  %46 = or i16 %41, 3
  store i16 %46, i16* %37, align 2
  br label %47

47:                                               ; preds = %45, %40, %35
  %48 = and i32 %36, 1024
  %49 = icmp eq i32 %48, 0
  br i1 %49, label %53, label %50

50:                                               ; preds = %47
  %51 = load i16, i16* %37, align 2
  %52 = or i16 %51, 4
  store i16 %52, i16* %37, align 2
  br label %53

53:                                               ; preds = %50, %47
  %54 = and i32 %36, 2048
  %55 = icmp eq i32 %54, 0
  br i1 %55, label %56, label %58

56:                                               ; preds = %53
  %57 = load i16, i16* %37, align 8
  br label %61

58:                                               ; preds = %53
  %59 = load i16, i16* %37, align 2
  %60 = or i16 %59, 8
  store i16 %60, i16* %37, align 2
  br label %61

61:                                               ; preds = %56, %58
  %62 = phi i16 [ %57, %56 ], [ %60, %58 ]
  %63 = and i16 %62, 2
  %64 = icmp eq i16 %63, 0
  br i1 %64, label %66, label %65

65:                                               ; preds = %61
  call void @_ZN8GrVkCaps10FormatInfo16initSampleCountsEPK13GrVkInterfaceP18VkPhysicalDevice_TRK26VkPhysicalDeviceProperties8VkFormat(%"struct.GrVkCaps::FormatInfo"* %0, %struct.GrVkInterface* %1, %struct.VkPhysicalDevice_T* %2, %struct.VkPhysicalDeviceProperties* dereferenceable(824) %3, i32 %4)
  br label %66

66:                                               ; preds = %61, %65
  call void @llvm.lifetime.end.p0i8(i64 12, i8* nonnull %7) #13
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN9GrSwizzleC2EPKc(%class.GrSwizzle*, i8*) unnamed_addr #0 comdat align 2 {
  %3 = getelementptr inbounds %class.GrSwizzle, %class.GrSwizzle* %0, i64 0, i32 0
  %4 = load i8, i8* %1, align 1
  %5 = sext i8 %4 to i32
  switch i32 %5, label %11 [
    i32 114, label %12
    i32 103, label %6
    i32 98, label %7
    i32 97, label %8
    i32 48, label %9
    i32 49, label %10
  ]

6:                                                ; preds = %2
  br label %12

7:                                                ; preds = %2
  br label %12

8:                                                ; preds = %2
  br label %12

9:                                                ; preds = %2
  br label %12

10:                                               ; preds = %2
  br label %12

11:                                               ; preds = %2
  tail call void @llvm.trap() #13
  unreachable

12:                                               ; preds = %2, %6, %7, %8, %9, %10
  %13 = phi i16 [ 5, %10 ], [ 4, %9 ], [ 3, %8 ], [ 2, %7 ], [ 1, %6 ], [ 0, %2 ]
  %14 = getelementptr inbounds i8, i8* %1, i64 1
  %15 = load i8, i8* %14, align 1
  %16 = sext i8 %15 to i32
  switch i32 %16, label %22 [
    i32 114, label %23
    i32 103, label %17
    i32 98, label %18
    i32 97, label %19
    i32 48, label %20
    i32 49, label %21
  ]

17:                                               ; preds = %12
  br label %23

18:                                               ; preds = %12
  br label %23

19:                                               ; preds = %12
  br label %23

20:                                               ; preds = %12
  br label %23

21:                                               ; preds = %12
  br label %23

22:                                               ; preds = %12
  tail call void @llvm.trap() #13
  unreachable

23:                                               ; preds = %12, %17, %18, %19, %20, %21
  %24 = phi i16 [ 80, %21 ], [ 64, %20 ], [ 48, %19 ], [ 32, %18 ], [ 16, %17 ], [ 0, %12 ]
  %25 = or i16 %24, %13
  %26 = getelementptr inbounds i8, i8* %1, i64 2
  %27 = load i8, i8* %26, align 1
  %28 = sext i8 %27 to i32
  switch i32 %28, label %34 [
    i32 114, label %35
    i32 103, label %29
    i32 98, label %30
    i32 97, label %31
    i32 48, label %32
    i32 49, label %33
  ]

29:                                               ; preds = %23
  br label %35

30:                                               ; preds = %23
  br label %35

31:                                               ; preds = %23
  br label %35

32:                                               ; preds = %23
  br label %35

33:                                               ; preds = %23
  br label %35

34:                                               ; preds = %23
  tail call void @llvm.trap() #13
  unreachable

35:                                               ; preds = %23, %29, %30, %31, %32, %33
  %36 = phi i16 [ 1280, %33 ], [ 1024, %32 ], [ 768, %31 ], [ 512, %30 ], [ 256, %29 ], [ 0, %23 ]
  %37 = or i16 %25, %36
  %38 = getelementptr inbounds i8, i8* %1, i64 3
  %39 = load i8, i8* %38, align 1
  %40 = sext i8 %39 to i32
  switch i32 %40, label %46 [
    i32 114, label %47
    i32 103, label %41
    i32 98, label %42
    i32 97, label %43
    i32 48, label %44
    i32 49, label %45
  ]

41:                                               ; preds = %35
  br label %47

42:                                               ; preds = %35
  br label %47

43:                                               ; preds = %35
  br label %47

44:                                               ; preds = %35
  br label %47

45:                                               ; preds = %35
  br label %47

46:                                               ; preds = %35
  tail call void @llvm.trap() #13
  unreachable

47:                                               ; preds = %35, %41, %42, %43, %44, %45
  %48 = phi i16 [ 20480, %45 ], [ 16384, %44 ], [ 12288, %43 ], [ 8192, %42 ], [ 4096, %41 ], [ 0, %35 ]
  %49 = or i16 %37, %48
  store i16 %49, i16* %3, align 2
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN8GrVkCaps10FormatInfo15InitFormatFlagsEjPt(i32, i16* nocapture) local_unnamed_addr #0 align 2 {
  %3 = and i32 %0, 4097
  %4 = icmp eq i32 %3, 4097
  br i1 %4, label %5, label %12

5:                                                ; preds = %2
  %6 = load i16, i16* %1, align 2
  %7 = or i16 %6, 1
  store i16 %7, i16* %1, align 2
  %8 = and i32 %0, 256
  %9 = icmp eq i32 %8, 0
  br i1 %9, label %12, label %10

10:                                               ; preds = %5
  %11 = or i16 %6, 3
  store i16 %11, i16* %1, align 2
  br label %12

12:                                               ; preds = %5, %2, %10
  %13 = and i32 %0, 1024
  %14 = icmp eq i32 %13, 0
  br i1 %14, label %18, label %15

15:                                               ; preds = %12
  %16 = load i16, i16* %1, align 2
  %17 = or i16 %16, 4
  store i16 %17, i16* %1, align 2
  br label %18

18:                                               ; preds = %12, %15
  %19 = and i32 %0, 2048
  %20 = icmp eq i32 %19, 0
  br i1 %20, label %24, label %21

21:                                               ; preds = %18
  %22 = load i16, i16* %1, align 2
  %23 = or i16 %22, 8
  store i16 %23, i16* %1, align 2
  br label %24

24:                                               ; preds = %18, %21
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN8GrVkCaps10FormatInfo16initSampleCountsEPK13GrVkInterfaceP18VkPhysicalDevice_TRK26VkPhysicalDeviceProperties8VkFormat(%"struct.GrVkCaps::FormatInfo"* nocapture, %struct.GrVkInterface* nocapture readonly, %struct.VkPhysicalDevice_T*, %struct.VkPhysicalDeviceProperties* nocapture readonly dereferenceable(824), i32) local_unnamed_addr #0 align 2 {
  %6 = alloca %struct.VkImageFormatProperties, align 8
  %7 = bitcast %struct.VkImageFormatProperties* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %7) #13
  %8 = getelementptr inbounds %struct.VkImageFormatProperties, %struct.VkImageFormatProperties* %6, i64 0, i32 3
  %9 = getelementptr inbounds %struct.GrVkInterface, %struct.GrVkInterface* %1, i64 0, i32 1, i32 5, i32 0
  %10 = bitcast %struct.VkImageFormatProperties* %6 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %10, i8 -86, i64 32, i1 false)
  %11 = load i32 (%struct.VkPhysicalDevice_T*, i32, i32, i32, i32, i32, %struct.VkImageFormatProperties*)*, i32 (%struct.VkPhysicalDevice_T*, i32, i32, i32, i32, i32, %struct.VkImageFormatProperties*)** %9, align 8
  %12 = call i32 %11(%struct.VkPhysicalDevice_T* %2, i32 %4, i32 1, i32 0, i32 23, i32 0, %struct.VkImageFormatProperties* nonnull %6) #13
  %13 = load i32, i32* %8, align 4
  %14 = and i32 %13, 1
  %15 = icmp eq i32 %14, 0
  br i1 %15, label %47, label %16

16:                                               ; preds = %5
  %17 = getelementptr inbounds %"struct.GrVkCaps::FormatInfo", %"struct.GrVkCaps::FormatInfo"* %0, i64 0, i32 3
  %18 = getelementptr inbounds %"struct.GrVkCaps::FormatInfo", %"struct.GrVkCaps::FormatInfo"* %0, i64 0, i32 3, i32 2
  %19 = load i32, i32* %18, align 4
  %20 = add i32 %19, 1
  %21 = icmp sgt i32 %20, -1
  br i1 %21, label %23, label %22

22:                                               ; preds = %16
  call void (i8*, i32, i8*, ...) @_Z16SkAbort_FileLinePKciS0_z(i8* getelementptr inbounds ([51 x i8], [51 x i8]* @.str.41, i64 0, i64 0), i32 354, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.42, i64 0, i64 0), i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.43, i64 0, i64 0)) #15
  unreachable

23:                                               ; preds = %16
  %24 = getelementptr inbounds %"struct.GrVkCaps::FormatInfo", %"struct.GrVkCaps::FormatInfo"* %0, i64 0, i32 3, i32 1
  %25 = load i32, i32* %24, align 8
  %26 = icmp slt i32 %25, %20
  br i1 %26, label %30, label %27

27:                                               ; preds = %23
  %28 = getelementptr inbounds %class.SkTDArray, %class.SkTDArray* %17, i64 0, i32 0
  %29 = load i32*, i32** %28, align 8
  br label %43

30:                                               ; preds = %23
  %31 = add i32 %19, 5
  %32 = lshr i32 %31, 2
  %33 = add nuw i32 %32, %31
  %34 = icmp sgt i32 %33, -1
  br i1 %34, label %36, label %35

35:                                               ; preds = %30
  call void (i8*, i32, i8*, ...) @_Z16SkAbort_FileLinePKciS0_z(i8* getelementptr inbounds ([51 x i8], [51 x i8]* @.str.41, i64 0, i64 0), i32 374, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.42, i64 0, i64 0), i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.44, i64 0, i64 0)) #15
  unreachable

36:                                               ; preds = %30
  store i32 %33, i32* %24, align 8
  %37 = bitcast %class.SkTDArray* %17 to i8**
  %38 = load i8*, i8** %37, align 8
  %39 = sext i32 %33 to i64
  %40 = shl nsw i64 %39, 2
  %41 = call i8* @_Z16sk_realloc_throwPvm(i8* %38, i64 %40) #13
  store i8* %41, i8** %37, align 8
  %42 = bitcast i8* %41 to i32*
  br label %43

43:                                               ; preds = %27, %36
  %44 = phi i32* [ %29, %27 ], [ %42, %36 ]
  store i32 %20, i32* %18, align 4
  %45 = sext i32 %19 to i64
  %46 = getelementptr inbounds i32, i32* %44, i64 %45
  store i32 1, i32* %46, align 4
  br label %47

47:                                               ; preds = %5, %43
  %48 = getelementptr inbounds %struct.VkPhysicalDeviceProperties, %struct.VkPhysicalDeviceProperties* %3, i64 0, i32 2
  %49 = load i32, i32* %48, align 8
  switch i32 %49, label %50 [
    i32 4112, label %186
    i32 32902, label %186
  ]

50:                                               ; preds = %47
  %51 = and i32 %13, 2
  %52 = icmp eq i32 %51, 0
  br i1 %52, label %84, label %53

53:                                               ; preds = %50
  %54 = getelementptr inbounds %"struct.GrVkCaps::FormatInfo", %"struct.GrVkCaps::FormatInfo"* %0, i64 0, i32 3
  %55 = getelementptr inbounds %"struct.GrVkCaps::FormatInfo", %"struct.GrVkCaps::FormatInfo"* %0, i64 0, i32 3, i32 2
  %56 = load i32, i32* %55, align 4
  %57 = add i32 %56, 1
  %58 = icmp sgt i32 %57, -1
  br i1 %58, label %60, label %59

59:                                               ; preds = %53
  call void (i8*, i32, i8*, ...) @_Z16SkAbort_FileLinePKciS0_z(i8* getelementptr inbounds ([51 x i8], [51 x i8]* @.str.41, i64 0, i64 0), i32 354, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.42, i64 0, i64 0), i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.43, i64 0, i64 0)) #15
  unreachable

60:                                               ; preds = %53
  %61 = getelementptr inbounds %"struct.GrVkCaps::FormatInfo", %"struct.GrVkCaps::FormatInfo"* %0, i64 0, i32 3, i32 1
  %62 = load i32, i32* %61, align 8
  %63 = icmp slt i32 %62, %57
  br i1 %63, label %67, label %64

64:                                               ; preds = %60
  %65 = getelementptr inbounds %class.SkTDArray, %class.SkTDArray* %54, i64 0, i32 0
  %66 = load i32*, i32** %65, align 8
  br label %80

67:                                               ; preds = %60
  %68 = add i32 %56, 5
  %69 = lshr i32 %68, 2
  %70 = add nuw i32 %69, %68
  %71 = icmp sgt i32 %70, -1
  br i1 %71, label %73, label %72

72:                                               ; preds = %67
  call void (i8*, i32, i8*, ...) @_Z16SkAbort_FileLinePKciS0_z(i8* getelementptr inbounds ([51 x i8], [51 x i8]* @.str.41, i64 0, i64 0), i32 374, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.42, i64 0, i64 0), i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.44, i64 0, i64 0)) #15
  unreachable

73:                                               ; preds = %67
  store i32 %70, i32* %61, align 8
  %74 = bitcast %class.SkTDArray* %54 to i8**
  %75 = load i8*, i8** %74, align 8
  %76 = sext i32 %70 to i64
  %77 = shl nsw i64 %76, 2
  %78 = call i8* @_Z16sk_realloc_throwPvm(i8* %75, i64 %77) #13
  store i8* %78, i8** %74, align 8
  %79 = bitcast i8* %78 to i32*
  br label %80

80:                                               ; preds = %64, %73
  %81 = phi i32* [ %66, %64 ], [ %79, %73 ]
  store i32 %57, i32* %55, align 4
  %82 = sext i32 %56 to i64
  %83 = getelementptr inbounds i32, i32* %81, i64 %82
  store i32 2, i32* %83, align 4
  br label %84

84:                                               ; preds = %50, %80
  %85 = and i32 %13, 4
  %86 = icmp eq i32 %85, 0
  br i1 %86, label %118, label %87

87:                                               ; preds = %84
  %88 = getelementptr inbounds %"struct.GrVkCaps::FormatInfo", %"struct.GrVkCaps::FormatInfo"* %0, i64 0, i32 3
  %89 = getelementptr inbounds %"struct.GrVkCaps::FormatInfo", %"struct.GrVkCaps::FormatInfo"* %0, i64 0, i32 3, i32 2
  %90 = load i32, i32* %89, align 4
  %91 = add i32 %90, 1
  %92 = icmp sgt i32 %91, -1
  br i1 %92, label %94, label %93

93:                                               ; preds = %87
  call void (i8*, i32, i8*, ...) @_Z16SkAbort_FileLinePKciS0_z(i8* getelementptr inbounds ([51 x i8], [51 x i8]* @.str.41, i64 0, i64 0), i32 354, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.42, i64 0, i64 0), i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.43, i64 0, i64 0)) #15
  unreachable

94:                                               ; preds = %87
  %95 = getelementptr inbounds %"struct.GrVkCaps::FormatInfo", %"struct.GrVkCaps::FormatInfo"* %0, i64 0, i32 3, i32 1
  %96 = load i32, i32* %95, align 8
  %97 = icmp slt i32 %96, %91
  br i1 %97, label %101, label %98

98:                                               ; preds = %94
  %99 = getelementptr inbounds %class.SkTDArray, %class.SkTDArray* %88, i64 0, i32 0
  %100 = load i32*, i32** %99, align 8
  br label %114

101:                                              ; preds = %94
  %102 = add i32 %90, 5
  %103 = lshr i32 %102, 2
  %104 = add nuw i32 %103, %102
  %105 = icmp sgt i32 %104, -1
  br i1 %105, label %107, label %106

106:                                              ; preds = %101
  call void (i8*, i32, i8*, ...) @_Z16SkAbort_FileLinePKciS0_z(i8* getelementptr inbounds ([51 x i8], [51 x i8]* @.str.41, i64 0, i64 0), i32 374, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.42, i64 0, i64 0), i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.44, i64 0, i64 0)) #15
  unreachable

107:                                              ; preds = %101
  store i32 %104, i32* %95, align 8
  %108 = bitcast %class.SkTDArray* %88 to i8**
  %109 = load i8*, i8** %108, align 8
  %110 = sext i32 %104 to i64
  %111 = shl nsw i64 %110, 2
  %112 = call i8* @_Z16sk_realloc_throwPvm(i8* %109, i64 %111) #13
  store i8* %112, i8** %108, align 8
  %113 = bitcast i8* %112 to i32*
  br label %114

114:                                              ; preds = %98, %107
  %115 = phi i32* [ %100, %98 ], [ %113, %107 ]
  store i32 %91, i32* %89, align 4
  %116 = sext i32 %90 to i64
  %117 = getelementptr inbounds i32, i32* %115, i64 %116
  store i32 4, i32* %117, align 4
  br label %118

118:                                              ; preds = %84, %114
  %119 = and i32 %13, 8
  %120 = icmp eq i32 %119, 0
  br i1 %120, label %152, label %121

121:                                              ; preds = %118
  %122 = getelementptr inbounds %"struct.GrVkCaps::FormatInfo", %"struct.GrVkCaps::FormatInfo"* %0, i64 0, i32 3
  %123 = getelementptr inbounds %"struct.GrVkCaps::FormatInfo", %"struct.GrVkCaps::FormatInfo"* %0, i64 0, i32 3, i32 2
  %124 = load i32, i32* %123, align 4
  %125 = add i32 %124, 1
  %126 = icmp sgt i32 %125, -1
  br i1 %126, label %128, label %127

127:                                              ; preds = %121
  call void (i8*, i32, i8*, ...) @_Z16SkAbort_FileLinePKciS0_z(i8* getelementptr inbounds ([51 x i8], [51 x i8]* @.str.41, i64 0, i64 0), i32 354, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.42, i64 0, i64 0), i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.43, i64 0, i64 0)) #15
  unreachable

128:                                              ; preds = %121
  %129 = getelementptr inbounds %"struct.GrVkCaps::FormatInfo", %"struct.GrVkCaps::FormatInfo"* %0, i64 0, i32 3, i32 1
  %130 = load i32, i32* %129, align 8
  %131 = icmp slt i32 %130, %125
  br i1 %131, label %135, label %132

132:                                              ; preds = %128
  %133 = getelementptr inbounds %class.SkTDArray, %class.SkTDArray* %122, i64 0, i32 0
  %134 = load i32*, i32** %133, align 8
  br label %148

135:                                              ; preds = %128
  %136 = add i32 %124, 5
  %137 = lshr i32 %136, 2
  %138 = add nuw i32 %137, %136
  %139 = icmp sgt i32 %138, -1
  br i1 %139, label %141, label %140

140:                                              ; preds = %135
  call void (i8*, i32, i8*, ...) @_Z16SkAbort_FileLinePKciS0_z(i8* getelementptr inbounds ([51 x i8], [51 x i8]* @.str.41, i64 0, i64 0), i32 374, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.42, i64 0, i64 0), i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.44, i64 0, i64 0)) #15
  unreachable

141:                                              ; preds = %135
  store i32 %138, i32* %129, align 8
  %142 = bitcast %class.SkTDArray* %122 to i8**
  %143 = load i8*, i8** %142, align 8
  %144 = sext i32 %138 to i64
  %145 = shl nsw i64 %144, 2
  %146 = call i8* @_Z16sk_realloc_throwPvm(i8* %143, i64 %145) #13
  store i8* %146, i8** %142, align 8
  %147 = bitcast i8* %146 to i32*
  br label %148

148:                                              ; preds = %132, %141
  %149 = phi i32* [ %134, %132 ], [ %147, %141 ]
  store i32 %125, i32* %123, align 4
  %150 = sext i32 %124 to i64
  %151 = getelementptr inbounds i32, i32* %149, i64 %150
  store i32 8, i32* %151, align 4
  br label %152

152:                                              ; preds = %118, %148
  %153 = and i32 %13, 16
  %154 = icmp eq i32 %153, 0
  br i1 %154, label %186, label %155

155:                                              ; preds = %152
  %156 = getelementptr inbounds %"struct.GrVkCaps::FormatInfo", %"struct.GrVkCaps::FormatInfo"* %0, i64 0, i32 3
  %157 = getelementptr inbounds %"struct.GrVkCaps::FormatInfo", %"struct.GrVkCaps::FormatInfo"* %0, i64 0, i32 3, i32 2
  %158 = load i32, i32* %157, align 4
  %159 = add i32 %158, 1
  %160 = icmp sgt i32 %159, -1
  br i1 %160, label %162, label %161

161:                                              ; preds = %155
  call void (i8*, i32, i8*, ...) @_Z16SkAbort_FileLinePKciS0_z(i8* getelementptr inbounds ([51 x i8], [51 x i8]* @.str.41, i64 0, i64 0), i32 354, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.42, i64 0, i64 0), i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.43, i64 0, i64 0)) #15
  unreachable

162:                                              ; preds = %155
  %163 = getelementptr inbounds %"struct.GrVkCaps::FormatInfo", %"struct.GrVkCaps::FormatInfo"* %0, i64 0, i32 3, i32 1
  %164 = load i32, i32* %163, align 8
  %165 = icmp slt i32 %164, %159
  br i1 %165, label %169, label %166

166:                                              ; preds = %162
  %167 = getelementptr inbounds %class.SkTDArray, %class.SkTDArray* %156, i64 0, i32 0
  %168 = load i32*, i32** %167, align 8
  br label %182

169:                                              ; preds = %162
  %170 = add i32 %158, 5
  %171 = lshr i32 %170, 2
  %172 = add nuw i32 %171, %170
  %173 = icmp sgt i32 %172, -1
  br i1 %173, label %175, label %174

174:                                              ; preds = %169
  call void (i8*, i32, i8*, ...) @_Z16SkAbort_FileLinePKciS0_z(i8* getelementptr inbounds ([51 x i8], [51 x i8]* @.str.41, i64 0, i64 0), i32 374, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.42, i64 0, i64 0), i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.44, i64 0, i64 0)) #15
  unreachable

175:                                              ; preds = %169
  store i32 %172, i32* %163, align 8
  %176 = bitcast %class.SkTDArray* %156 to i8**
  %177 = load i8*, i8** %176, align 8
  %178 = sext i32 %172 to i64
  %179 = shl nsw i64 %178, 2
  %180 = call i8* @_Z16sk_realloc_throwPvm(i8* %177, i64 %179) #13
  store i8* %180, i8** %176, align 8
  %181 = bitcast i8* %180 to i32*
  br label %182

182:                                              ; preds = %166, %175
  %183 = phi i32* [ %168, %166 ], [ %181, %175 ]
  store i32 %159, i32* %157, align 4
  %184 = sext i32 %158 to i64
  %185 = getelementptr inbounds i32, i32* %183, i64 %184
  store i32 16, i32* %185, align 4
  br label %186

186:                                              ; preds = %182, %152, %47, %47
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %7) #13
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZNK8GrVkCaps12isFormatSRGBERK15GrBackendFormat(%class.GrVkCaps* nocapture readnone, %class.GrBackendFormat* dereferenceable(72)) unnamed_addr #0 align 2 {
  %3 = alloca i32, align 4
  %4 = bitcast i32* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %4) #13
  store i32 -1431655766, i32* %3, align 4
  %5 = call zeroext i1 @_ZNK15GrBackendFormat10asVkFormatEP8VkFormat(%class.GrBackendFormat* %1, i32* nonnull %3) #13
  br i1 %5, label %6, label %18

6:                                                ; preds = %2
  %7 = call %struct.GrVkYcbcrConversionInfo* @_ZNK15GrBackendFormat24getVkYcbcrConversionInfoEv(%class.GrBackendFormat* %1) #13
  %8 = getelementptr inbounds %struct.GrVkYcbcrConversionInfo, %struct.GrVkYcbcrConversionInfo* %7, i64 0, i32 3
  %9 = load i32, i32* %8, align 8
  %10 = icmp eq i32 %9, 0
  br i1 %10, label %15, label %11

11:                                               ; preds = %6
  %12 = getelementptr inbounds %struct.GrVkYcbcrConversionInfo, %struct.GrVkYcbcrConversionInfo* %7, i64 0, i32 2
  %13 = load i64, i64* %12, align 8
  %14 = icmp eq i64 %13, 0
  br i1 %14, label %15, label %18

15:                                               ; preds = %11, %6
  %16 = load i32, i32* %3, align 4
  %17 = icmp eq i32 %16, 43
  br label %18

18:                                               ; preds = %11, %2, %15
  %19 = phi i1 [ %17, %15 ], [ false, %2 ], [ false, %11 ]
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %4) #13
  ret i1 %19
}

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZNK8GrVkCaps18isFormatTexturableERK15GrBackendFormat(%class.GrVkCaps* readonly, %class.GrBackendFormat* dereferenceable(72)) unnamed_addr #0 align 2 {
  %3 = alloca i32, align 4
  %4 = bitcast i32* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %4) #13
  store i32 -1431655766, i32* %3, align 4
  %5 = call zeroext i1 @_ZNK15GrBackendFormat10asVkFormatEP8VkFormat(%class.GrBackendFormat* %1, i32* nonnull %3) #13
  br i1 %5, label %6, label %22

6:                                                ; preds = %2
  %7 = call %struct.GrVkYcbcrConversionInfo* @_ZNK15GrBackendFormat24getVkYcbcrConversionInfoEv(%class.GrBackendFormat* %1) #13
  %8 = getelementptr inbounds %struct.GrVkYcbcrConversionInfo, %struct.GrVkYcbcrConversionInfo* %7, i64 0, i32 3
  %9 = load i32, i32* %8, align 8
  %10 = icmp eq i32 %9, 0
  br i1 %10, label %15, label %11

11:                                               ; preds = %6
  %12 = getelementptr inbounds %struct.GrVkYcbcrConversionInfo, %struct.GrVkYcbcrConversionInfo* %7, i64 0, i32 2
  %13 = load i64, i64* %12, align 8
  %14 = icmp eq i64 %13, 0
  br i1 %14, label %15, label %22

15:                                               ; preds = %11, %6
  %16 = load i32, i32* %3, align 4
  %17 = call dereferenceable(40) %"struct.GrVkCaps::FormatInfo"* @_ZN8GrVkCaps13getFormatInfoE8VkFormat(%class.GrVkCaps* %0, i32 %16) #13
  %18 = getelementptr inbounds %"struct.GrVkCaps::FormatInfo", %"struct.GrVkCaps::FormatInfo"* %17, i64 0, i32 0
  %19 = load i16, i16* %18, align 8
  %20 = and i16 %19, 1
  %21 = icmp ne i16 %20, 0
  br label %22

22:                                               ; preds = %11, %2, %15
  %23 = phi i1 [ %21, %15 ], [ false, %2 ], [ true, %11 ]
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %4) #13
  ret i1 %23
}

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZNK8GrVkCaps20isVkFormatTexturableE8VkFormat(%class.GrVkCaps* readonly, i32) local_unnamed_addr #0 align 2 {
  %3 = tail call dereferenceable(40) %"struct.GrVkCaps::FormatInfo"* @_ZN8GrVkCaps13getFormatInfoE8VkFormat(%class.GrVkCaps* %0, i32 %1) #13
  %4 = getelementptr inbounds %"struct.GrVkCaps::FormatInfo", %"struct.GrVkCaps::FormatInfo"* %3, i64 0, i32 0
  %5 = load i16, i16* %4, align 8
  %6 = and i16 %5, 1
  %7 = icmp ne i16 %6, 0
  ret i1 %7
}

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZNK8GrVkCaps29isFormatAsColorTypeRenderableE11GrColorTypeRK15GrBackendFormati(%class.GrVkCaps*, i32, %class.GrBackendFormat* dereferenceable(72), i32) unnamed_addr #0 align 2 {
  %5 = alloca i32, align 4
  %6 = bitcast %class.GrVkCaps* %0 to i1 (%class.GrVkCaps*, %class.GrBackendFormat*, i32)***
  %7 = load i1 (%class.GrVkCaps*, %class.GrBackendFormat*, i32)**, i1 (%class.GrVkCaps*, %class.GrBackendFormat*, i32)*** %6, align 8
  %8 = getelementptr inbounds i1 (%class.GrVkCaps*, %class.GrBackendFormat*, i32)*, i1 (%class.GrVkCaps*, %class.GrBackendFormat*, i32)** %7, i64 8
  %9 = load i1 (%class.GrVkCaps*, %class.GrBackendFormat*, i32)*, i1 (%class.GrVkCaps*, %class.GrBackendFormat*, i32)** %8, align 8
  %10 = tail call zeroext i1 %9(%class.GrVkCaps* %0, %class.GrBackendFormat* dereferenceable(72) %2, i32 %3) #13
  br i1 %10, label %11, label %40

11:                                               ; preds = %4
  %12 = bitcast i32* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %12) #13
  store i32 -1431655766, i32* %5, align 4
  %13 = call zeroext i1 @_ZNK15GrBackendFormat10asVkFormatEP8VkFormat(%class.GrBackendFormat* %2, i32* nonnull %5) #13
  br i1 %13, label %14, label %38

14:                                               ; preds = %11
  %15 = load i32, i32* %5, align 4
  %16 = call dereferenceable(40) %"struct.GrVkCaps::FormatInfo"* @_ZN8GrVkCaps13getFormatInfoE8VkFormat(%class.GrVkCaps* %0, i32 %15) #13
  %17 = getelementptr inbounds %"struct.GrVkCaps::FormatInfo", %"struct.GrVkCaps::FormatInfo"* %16, i64 0, i32 5
  %18 = load i32, i32* %17, align 8
  %19 = icmp sgt i32 %18, 0
  br i1 %19, label %20, label %38

20:                                               ; preds = %14
  %21 = getelementptr inbounds %"struct.GrVkCaps::FormatInfo", %"struct.GrVkCaps::FormatInfo"* %16, i64 0, i32 4, i32 0, i32 0, i32 0
  %22 = load %"struct.GrVkCaps::ColorTypeInfo"*, %"struct.GrVkCaps::ColorTypeInfo"** %21, align 8
  %23 = sext i32 %18 to i64
  br label %26

24:                                               ; preds = %26
  %25 = icmp eq i64 %31, %23
  br i1 %25, label %38, label %26

26:                                               ; preds = %24, %20
  %27 = phi i64 [ 0, %20 ], [ %31, %24 ]
  %28 = getelementptr inbounds %"struct.GrVkCaps::ColorTypeInfo", %"struct.GrVkCaps::ColorTypeInfo"* %22, i64 %27, i32 0
  %29 = load i32, i32* %28, align 4
  %30 = icmp eq i32 %29, %1
  %31 = add nuw nsw i64 %27, 1
  br i1 %30, label %32, label %24

32:                                               ; preds = %26
  %33 = and i64 %27, 4294967295
  %34 = getelementptr inbounds %"struct.GrVkCaps::ColorTypeInfo", %"struct.GrVkCaps::ColorTypeInfo"* %22, i64 %33, i32 2
  %35 = load i32, i32* %34, align 4
  %36 = and i32 %35, 2
  %37 = icmp ne i32 %36, 0
  br label %38

38:                                               ; preds = %24, %32, %14, %11
  %39 = phi i1 [ false, %11 ], [ %37, %32 ], [ false, %14 ], [ false, %24 ]
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %12) #13
  br label %40

40:                                               ; preds = %4, %38
  %41 = phi i1 [ %39, %38 ], [ false, %4 ]
  ret i1 %41
}

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZNK8GrVkCaps18isFormatRenderableERK15GrBackendFormati(%class.GrVkCaps* readonly, %class.GrBackendFormat* dereferenceable(72), i32) unnamed_addr #0 align 2 {
  %4 = alloca i32, align 4
  %5 = bitcast i32* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %5) #13
  store i32 -1431655766, i32* %4, align 4
  %6 = call zeroext i1 @_ZNK15GrBackendFormat10asVkFormatEP8VkFormat(%class.GrBackendFormat* %1, i32* nonnull %4) #13
  br i1 %6, label %7, label %23

7:                                                ; preds = %3
  %8 = load i32, i32* %4, align 4
  %9 = call dereferenceable(40) %"struct.GrVkCaps::FormatInfo"* @_ZN8GrVkCaps13getFormatInfoE8VkFormat(%class.GrVkCaps* %0, i32 %8) #13
  %10 = getelementptr inbounds %"struct.GrVkCaps::FormatInfo", %"struct.GrVkCaps::FormatInfo"* %9, i64 0, i32 3, i32 2
  %11 = load i32, i32* %10, align 4
  %12 = icmp eq i32 %11, 0
  br i1 %12, label %20, label %13

13:                                               ; preds = %7
  %14 = add nsw i32 %11, -1
  %15 = getelementptr inbounds %"struct.GrVkCaps::FormatInfo", %"struct.GrVkCaps::FormatInfo"* %9, i64 0, i32 3, i32 0
  %16 = load i32*, i32** %15, align 8
  %17 = sext i32 %14 to i64
  %18 = getelementptr inbounds i32, i32* %16, i64 %17
  %19 = load i32, i32* %18, align 4
  br label %20

20:                                               ; preds = %7, %13
  %21 = phi i32 [ %19, %13 ], [ 0, %7 ]
  %22 = icmp sge i32 %21, %2
  br label %23

23:                                               ; preds = %3, %20
  %24 = phi i1 [ %22, %20 ], [ false, %3 ]
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %5) #13
  ret i1 %24
}

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZNK8GrVkCaps18isFormatRenderableE8VkFormati(%class.GrVkCaps* readonly, i32, i32) local_unnamed_addr #0 align 2 {
  %4 = tail call dereferenceable(40) %"struct.GrVkCaps::FormatInfo"* @_ZN8GrVkCaps13getFormatInfoE8VkFormat(%class.GrVkCaps* %0, i32 %1) #13
  %5 = getelementptr inbounds %"struct.GrVkCaps::FormatInfo", %"struct.GrVkCaps::FormatInfo"* %4, i64 0, i32 3, i32 2
  %6 = load i32, i32* %5, align 4
  %7 = icmp eq i32 %6, 0
  br i1 %7, label %15, label %8

8:                                                ; preds = %3
  %9 = add nsw i32 %6, -1
  %10 = getelementptr inbounds %"struct.GrVkCaps::FormatInfo", %"struct.GrVkCaps::FormatInfo"* %4, i64 0, i32 3, i32 0
  %11 = load i32*, i32** %10, align 8
  %12 = sext i32 %9 to i64
  %13 = getelementptr inbounds i32, i32* %11, i64 %12
  %14 = load i32, i32* %13, align 4
  br label %15

15:                                               ; preds = %3, %8
  %16 = phi i32 [ %14, %8 ], [ 0, %3 ]
  %17 = icmp sge i32 %16, %2
  ret i1 %17
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @_ZNK8GrVkCaps26maxRenderTargetSampleCountE8VkFormat(%class.GrVkCaps* readonly, i32) local_unnamed_addr #0 align 2 {
  %3 = tail call dereferenceable(40) %"struct.GrVkCaps::FormatInfo"* @_ZN8GrVkCaps13getFormatInfoE8VkFormat(%class.GrVkCaps* %0, i32 %1) #13
  %4 = getelementptr inbounds %"struct.GrVkCaps::FormatInfo", %"struct.GrVkCaps::FormatInfo"* %3, i64 0, i32 3, i32 2
  %5 = load i32, i32* %4, align 4
  %6 = icmp eq i32 %5, 0
  br i1 %6, label %14, label %7

7:                                                ; preds = %2
  %8 = add nsw i32 %5, -1
  %9 = getelementptr inbounds %"struct.GrVkCaps::FormatInfo", %"struct.GrVkCaps::FormatInfo"* %3, i64 0, i32 3, i32 0
  %10 = load i32*, i32** %9, align 8
  %11 = sext i32 %8 to i64
  %12 = getelementptr inbounds i32, i32* %10, i64 %11
  %13 = load i32, i32* %12, align 4
  br label %14

14:                                               ; preds = %2, %7
  %15 = phi i32 [ %13, %7 ], [ 0, %2 ]
  ret i32 %15
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @_ZNK8GrVkCaps26getRenderTargetSampleCountEiRK15GrBackendFormat(%class.GrVkCaps* readonly, i32, %class.GrBackendFormat* dereferenceable(72)) unnamed_addr #0 align 2 {
  %4 = alloca i32, align 4
  %5 = bitcast i32* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %5) #13
  store i32 -1431655766, i32* %4, align 4
  %6 = call zeroext i1 @_ZNK15GrBackendFormat10asVkFormatEP8VkFormat(%class.GrBackendFormat* %2, i32* nonnull %4) #13
  br i1 %6, label %7, label %31

7:                                                ; preds = %3
  %8 = load i32, i32* %4, align 4
  %9 = icmp sgt i32 %1, 1
  %10 = select i1 %9, i32 %1, i32 1
  %11 = call dereferenceable(40) %"struct.GrVkCaps::FormatInfo"* @_ZN8GrVkCaps13getFormatInfoE8VkFormat(%class.GrVkCaps* %0, i32 %8) #13
  %12 = getelementptr inbounds %"struct.GrVkCaps::FormatInfo", %"struct.GrVkCaps::FormatInfo"* %11, i64 0, i32 3, i32 2
  %13 = load i32, i32* %12, align 4
  %14 = icmp eq i32 %13, 0
  br i1 %14, label %31, label %15

15:                                               ; preds = %7
  %16 = icmp slt i32 %1, 2
  br i1 %16, label %31, label %17

17:                                               ; preds = %15
  %18 = icmp sgt i32 %13, 0
  br i1 %18, label %19, label %31

19:                                               ; preds = %17
  %20 = getelementptr inbounds %"struct.GrVkCaps::FormatInfo", %"struct.GrVkCaps::FormatInfo"* %11, i64 0, i32 3, i32 0
  %21 = load i32*, i32** %20, align 8
  %22 = zext i32 %13 to i64
  br label %25

23:                                               ; preds = %25
  %24 = icmp eq i64 %30, %22
  br i1 %24, label %31, label %25

25:                                               ; preds = %23, %19
  %26 = phi i64 [ 0, %19 ], [ %30, %23 ]
  %27 = getelementptr inbounds i32, i32* %21, i64 %26
  %28 = load i32, i32* %27, align 4
  %29 = icmp slt i32 %28, %10
  %30 = add nuw nsw i64 %26, 1
  br i1 %29, label %23, label %31

31:                                               ; preds = %25, %23, %17, %15, %7, %3
  %32 = phi i32 [ 0, %3 ], [ 0, %7 ], [ 1, %15 ], [ 0, %17 ], [ 0, %23 ], [ %28, %25 ]
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %5) #13
  ret i32 %32
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @_ZNK8GrVkCaps26getRenderTargetSampleCountEi8VkFormat(%class.GrVkCaps* readonly, i32, i32) local_unnamed_addr #0 align 2 {
  %4 = icmp sgt i32 %1, 1
  %5 = select i1 %4, i32 %1, i32 1
  %6 = tail call dereferenceable(40) %"struct.GrVkCaps::FormatInfo"* @_ZN8GrVkCaps13getFormatInfoE8VkFormat(%class.GrVkCaps* %0, i32 %2) #13
  %7 = getelementptr inbounds %"struct.GrVkCaps::FormatInfo", %"struct.GrVkCaps::FormatInfo"* %6, i64 0, i32 3, i32 2
  %8 = load i32, i32* %7, align 4
  %9 = icmp eq i32 %8, 0
  br i1 %9, label %26, label %10

10:                                               ; preds = %3
  %11 = icmp slt i32 %1, 2
  br i1 %11, label %26, label %12

12:                                               ; preds = %10
  %13 = icmp sgt i32 %8, 0
  br i1 %13, label %14, label %26

14:                                               ; preds = %12
  %15 = getelementptr inbounds %"struct.GrVkCaps::FormatInfo", %"struct.GrVkCaps::FormatInfo"* %6, i64 0, i32 3, i32 0
  %16 = load i32*, i32** %15, align 8
  %17 = zext i32 %8 to i64
  br label %20

18:                                               ; preds = %20
  %19 = icmp eq i64 %25, %17
  br i1 %19, label %26, label %20

20:                                               ; preds = %18, %14
  %21 = phi i64 [ 0, %14 ], [ %25, %18 ]
  %22 = getelementptr inbounds i32, i32* %16, i64 %21
  %23 = load i32, i32* %22, align 4
  %24 = icmp slt i32 %23, %5
  %25 = add nuw nsw i64 %21, 1
  br i1 %24, label %18, label %26

26:                                               ; preds = %20, %18, %12, %3, %10
  %27 = phi i32 [ 0, %3 ], [ 1, %10 ], [ 0, %12 ], [ %23, %20 ], [ 0, %18 ]
  ret i32 %27
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @_ZNK8GrVkCaps26maxRenderTargetSampleCountERK15GrBackendFormat(%class.GrVkCaps* readonly, %class.GrBackendFormat* dereferenceable(72)) unnamed_addr #0 align 2 {
  %3 = alloca i32, align 4
  %4 = bitcast i32* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %4) #13
  store i32 -1431655766, i32* %3, align 4
  %5 = call zeroext i1 @_ZNK15GrBackendFormat10asVkFormatEP8VkFormat(%class.GrBackendFormat* %1, i32* nonnull %3) #13
  br i1 %5, label %6, label %19

6:                                                ; preds = %2
  %7 = load i32, i32* %3, align 4
  %8 = call dereferenceable(40) %"struct.GrVkCaps::FormatInfo"* @_ZN8GrVkCaps13getFormatInfoE8VkFormat(%class.GrVkCaps* %0, i32 %7) #13
  %9 = getelementptr inbounds %"struct.GrVkCaps::FormatInfo", %"struct.GrVkCaps::FormatInfo"* %8, i64 0, i32 3, i32 2
  %10 = load i32, i32* %9, align 4
  %11 = icmp eq i32 %10, 0
  br i1 %11, label %19, label %12

12:                                               ; preds = %6
  %13 = add nsw i32 %10, -1
  %14 = getelementptr inbounds %"struct.GrVkCaps::FormatInfo", %"struct.GrVkCaps::FormatInfo"* %8, i64 0, i32 3, i32 0
  %15 = load i32*, i32** %14, align 8
  %16 = sext i32 %13 to i64
  %17 = getelementptr inbounds i32, i32* %15, i64 %16
  %18 = load i32, i32* %17, align 4
  br label %19

19:                                               ; preds = %12, %6, %2
  %20 = phi i32 [ 0, %2 ], [ %18, %12 ], [ 0, %6 ]
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %4) #13
  ret i32 %20
}

; Function Attrs: nounwind ssp uwtable
define hidden { i32, i64 } @_ZNK8GrVkCaps29supportedWritePixelsColorTypeE11GrColorTypeRK15GrBackendFormatS0_(%class.GrVkCaps* readonly, i32, %class.GrBackendFormat* dereferenceable(72), i32) unnamed_addr #0 align 2 {
  %5 = alloca i32, align 4
  %6 = bitcast i32* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %6) #13
  store i32 -1431655766, i32* %5, align 4
  %7 = call zeroext i1 @_ZNK15GrBackendFormat10asVkFormatEP8VkFormat(%class.GrBackendFormat* %2, i32* nonnull %5) #13
  br i1 %7, label %8, label %49

8:                                                ; preds = %4
  %9 = call %struct.GrVkYcbcrConversionInfo* @_ZNK15GrBackendFormat24getVkYcbcrConversionInfoEv(%class.GrBackendFormat* %2) #13
  %10 = getelementptr inbounds %struct.GrVkYcbcrConversionInfo, %struct.GrVkYcbcrConversionInfo* %9, i64 0, i32 3
  %11 = load i32, i32* %10, align 8
  %12 = icmp eq i32 %11, 0
  br i1 %12, label %17, label %13

13:                                               ; preds = %8
  %14 = getelementptr inbounds %struct.GrVkYcbcrConversionInfo, %struct.GrVkYcbcrConversionInfo* %9, i64 0, i32 2
  %15 = load i64, i64* %14, align 8
  %16 = icmp eq i64 %15, 0
  br i1 %16, label %17, label %49

17:                                               ; preds = %13, %8
  %18 = load i32, i32* %5, align 4
  %19 = call zeroext i1 @_Z27GrVkFormatNeedsYcbcrSampler8VkFormat(i32 %18) #13
  br i1 %19, label %49, label %20

20:                                               ; preds = %17
  %21 = load i32, i32* %5, align 4
  %22 = call fastcc i64 @_ZL23GrVkFormatBytesPerBlock8VkFormat(i32 %21)
  %23 = and i64 %22, 3
  switch i64 %23, label %26 [
    i64 0, label %28
    i64 2, label %24
  ]

24:                                               ; preds = %20
  %25 = shl i64 %22, 1
  br label %28

26:                                               ; preds = %20
  %27 = shl i64 %22, 2
  br label %28

28:                                               ; preds = %20, %24, %26
  %29 = phi i64 [ %27, %26 ], [ %25, %24 ], [ %22, %20 ]
  %30 = call dereferenceable(40) %"struct.GrVkCaps::FormatInfo"* @_ZN8GrVkCaps13getFormatInfoE8VkFormat(%class.GrVkCaps* %0, i32 %21) #13
  %31 = getelementptr inbounds %"struct.GrVkCaps::FormatInfo", %"struct.GrVkCaps::FormatInfo"* %30, i64 0, i32 5
  %32 = load i32, i32* %31, align 8
  %33 = icmp sgt i32 %32, 0
  br i1 %33, label %34, label %49

34:                                               ; preds = %28
  %35 = getelementptr inbounds %"struct.GrVkCaps::FormatInfo", %"struct.GrVkCaps::FormatInfo"* %30, i64 0, i32 4, i32 0, i32 0, i32 0
  %36 = load %"struct.GrVkCaps::ColorTypeInfo"*, %"struct.GrVkCaps::ColorTypeInfo"** %35, align 8
  %37 = sext i32 %32 to i64
  br label %40

38:                                               ; preds = %40
  %39 = icmp slt i64 %45, %37
  br i1 %39, label %40, label %49

40:                                               ; preds = %34, %38
  %41 = phi i64 [ 0, %34 ], [ %45, %38 ]
  %42 = getelementptr inbounds %"struct.GrVkCaps::ColorTypeInfo", %"struct.GrVkCaps::ColorTypeInfo"* %36, i64 %41, i32 0
  %43 = load i32, i32* %42, align 4
  %44 = icmp eq i32 %43, %1
  %45 = add nuw nsw i64 %41, 1
  br i1 %44, label %46, label %38

46:                                               ; preds = %40
  %47 = getelementptr inbounds %"struct.GrVkCaps::ColorTypeInfo", %"struct.GrVkCaps::ColorTypeInfo"* %36, i64 %41, i32 1
  %48 = load i32, i32* %47, align 4
  br label %49

49:                                               ; preds = %38, %46, %28, %13, %17, %4
  %50 = phi i32 [ 0, %4 ], [ 0, %17 ], [ 0, %13 ], [ 0, %28 ], [ %48, %46 ], [ 0, %38 ]
  %51 = phi i64 [ 0, %4 ], [ 0, %17 ], [ 0, %13 ], [ 0, %28 ], [ %29, %46 ], [ 0, %38 ]
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %6) #13
  %52 = insertvalue { i32, i64 } undef, i32 %50, 0
  %53 = insertvalue { i32, i64 } %52, i64 %51, 1
  ret { i32, i64 } %53
}

declare zeroext i1 @_Z27GrVkFormatNeedsYcbcrSampler8VkFormat(i32) local_unnamed_addr #1

; Function Attrs: norecurse nounwind readnone ssp uwtable
define internal fastcc i64 @_ZL23GrVkFormatBytesPerBlock8VkFormat(i32) unnamed_addr #3 {
  switch i32 %0, label %19 [
    i32 37, label %20
    i32 9, label %2
    i32 44, label %20
    i32 4, label %3
    i32 97, label %4
    i32 76, label %5
    i32 23, label %6
    i32 16, label %7
    i32 64, label %20
    i32 58, label %20
    i32 3, label %8
    i32 2, label %9
    i32 43, label %20
    i32 147, label %10
    i32 131, label %11
    i32 133, label %12
    i32 70, label %13
    i32 77, label %20
    i32 91, label %14
    i32 83, label %20
    i32 1000156002, label %15
    i32 1000156003, label %16
    i32 127, label %17
    i32 129, label %20
    i32 130, label %18
  ]

2:                                                ; preds = %1
  br label %20

3:                                                ; preds = %1
  br label %20

4:                                                ; preds = %1
  br label %20

5:                                                ; preds = %1
  br label %20

6:                                                ; preds = %1
  br label %20

7:                                                ; preds = %1
  br label %20

8:                                                ; preds = %1
  br label %20

9:                                                ; preds = %1
  br label %20

10:                                               ; preds = %1
  br label %20

11:                                               ; preds = %1
  br label %20

12:                                               ; preds = %1
  br label %20

13:                                               ; preds = %1
  br label %20

14:                                               ; preds = %1
  br label %20

15:                                               ; preds = %1
  br label %20

16:                                               ; preds = %1
  br label %20

17:                                               ; preds = %1
  br label %20

18:                                               ; preds = %1
  br label %20

19:                                               ; preds = %1
  br label %20

20:                                               ; preds = %1, %1, %1, %1, %1, %1, %1, %1, %19, %18, %17, %16, %15, %14, %13, %12, %11, %10, %9, %8, %7, %6, %5, %4, %3, %2
  %21 = phi i64 [ 0, %19 ], [ 8, %18 ], [ 1, %17 ], [ 3, %16 ], [ 3, %15 ], [ 8, %14 ], [ 2, %13 ], [ 8, %12 ], [ 8, %11 ], [ 8, %10 ], [ 2, %9 ], [ 2, %8 ], [ 2, %7 ], [ 3, %6 ], [ 2, %5 ], [ 8, %4 ], [ 2, %3 ], [ 1, %2 ], [ 4, %1 ], [ 4, %1 ], [ 4, %1 ], [ 4, %1 ], [ 4, %1 ], [ 4, %1 ], [ 4, %1 ], [ 4, %1 ]
  ret i64 %21
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @_ZNK8GrVkCaps25surfaceSupportsReadPixelsEPK9GrSurface(%class.GrVkCaps* nocapture readnone, %class.GrSurface*) unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %class.GrSurface, %class.GrSurface* %1, i64 0, i32 3
  %4 = load i8, i8* %3, align 4, !range !2
  %5 = icmp eq i8 %4, 0
  br i1 %5, label %6, label %37

6:                                                ; preds = %2
  %7 = bitcast %class.GrSurface* %1 to %class.GrTexture* (%class.GrSurface*)***
  %8 = load %class.GrTexture* (%class.GrSurface*)**, %class.GrTexture* (%class.GrSurface*)*** %7, align 8
  %9 = getelementptr inbounds %class.GrTexture* (%class.GrSurface*)*, %class.GrTexture* (%class.GrSurface*)** %8, i64 11
  %10 = load %class.GrTexture* (%class.GrSurface*)*, %class.GrTexture* (%class.GrSurface*)** %9, align 8
  %11 = tail call %class.GrTexture* %10(%class.GrSurface* %1) #13
  %12 = icmp eq %class.GrTexture* %11, null
  br i1 %12, label %25, label %13

13:                                               ; preds = %6
  %14 = getelementptr inbounds %class.GrTexture, %class.GrTexture* %11, i64 0, i32 5
  %15 = bitcast %class.GrSurface* %14 to %class.GrVkAttachment**
  %16 = load %class.GrVkAttachment*, %class.GrVkAttachment** %15, align 8
  %17 = getelementptr inbounds %class.GrVkAttachment, %class.GrVkAttachment* %16, i64 0, i32 1, i32 1, i32 11, i32 3
  %18 = load i32, i32* %17, align 8
  %19 = icmp eq i32 %18, 0
  br i1 %19, label %20, label %37

20:                                               ; preds = %13
  %21 = getelementptr inbounds %class.GrVkAttachment, %class.GrVkAttachment* %16, i64 0, i32 1, i32 1, i32 4
  %22 = load i32, i32* %21, align 8
  %23 = tail call zeroext i1 @_Z22GrVkFormatIsCompressed8VkFormat(i32 %22) #13
  %24 = zext i1 %23 to i32
  br label %37

25:                                               ; preds = %6
  %26 = bitcast %class.GrSurface* %1 to %class.GrRenderTarget* (%class.GrSurface*)***
  %27 = load %class.GrRenderTarget* (%class.GrSurface*)**, %class.GrRenderTarget* (%class.GrSurface*)*** %26, align 8
  %28 = getelementptr inbounds %class.GrRenderTarget* (%class.GrSurface*)*, %class.GrRenderTarget* (%class.GrSurface*)** %27, i64 13
  %29 = load %class.GrRenderTarget* (%class.GrSurface*)*, %class.GrRenderTarget* (%class.GrSurface*)** %28, align 8
  %30 = tail call %class.GrRenderTarget* %29(%class.GrSurface* %1) #13
  %31 = icmp eq %class.GrRenderTarget* %30, null
  br i1 %31, label %37, label %32

32:                                               ; preds = %25
  %33 = getelementptr inbounds %class.GrRenderTarget, %class.GrRenderTarget* %30, i64 0, i32 3
  %34 = load i32, i32* %33, align 8
  %35 = icmp sgt i32 %34, 1
  %36 = zext i1 %35 to i32
  br label %37

37:                                               ; preds = %13, %2, %20, %25, %32
  %38 = phi i32 [ %36, %32 ], [ 2, %25 ], [ %24, %20 ], [ 1, %13 ], [ 2, %2 ]
  ret i32 %38
}

declare zeroext i1 @_Z22GrVkFormatIsCompressed8VkFormat(i32) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define hidden i32 @_ZNK8GrVkCaps17transferColorTypeE8VkFormat11GrColorType(%class.GrVkCaps* readonly, i32, i32) local_unnamed_addr #0 align 2 {
  %4 = tail call dereferenceable(40) %"struct.GrVkCaps::FormatInfo"* @_ZN8GrVkCaps13getFormatInfoE8VkFormat(%class.GrVkCaps* %0, i32 %1) #13
  %5 = getelementptr inbounds %"struct.GrVkCaps::FormatInfo", %"struct.GrVkCaps::FormatInfo"* %4, i64 0, i32 5
  %6 = load i32, i32* %5, align 8
  %7 = icmp sgt i32 %6, 0
  br i1 %7, label %8, label %24

8:                                                ; preds = %3
  %9 = getelementptr inbounds %"struct.GrVkCaps::FormatInfo", %"struct.GrVkCaps::FormatInfo"* %4, i64 0, i32 4, i32 0, i32 0, i32 0
  %10 = load %"struct.GrVkCaps::ColorTypeInfo"*, %"struct.GrVkCaps::ColorTypeInfo"** %9, align 8
  %11 = sext i32 %6 to i64
  br label %14

12:                                               ; preds = %14
  %13 = icmp slt i64 %19, %11
  br i1 %13, label %14, label %24

14:                                               ; preds = %8, %12
  %15 = phi i64 [ 0, %8 ], [ %19, %12 ]
  %16 = getelementptr inbounds %"struct.GrVkCaps::ColorTypeInfo", %"struct.GrVkCaps::ColorTypeInfo"* %10, i64 %15, i32 0
  %17 = load i32, i32* %16, align 4
  %18 = icmp eq i32 %17, %2
  %19 = add nuw nsw i64 %15, 1
  br i1 %18, label %20, label %12

20:                                               ; preds = %14
  %21 = and i64 %15, 4294967295
  %22 = getelementptr inbounds %"struct.GrVkCaps::ColorTypeInfo", %"struct.GrVkCaps::ColorTypeInfo"* %10, i64 %21, i32 1
  %23 = load i32, i32* %22, align 4
  br label %24

24:                                               ; preds = %12, %3, %20
  %25 = phi i32 [ %23, %20 ], [ 0, %3 ], [ 0, %12 ]
  ret i32 %25
}

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZNK8GrVkCaps28onSurfaceSupportsWritePixelsEPK9GrSurface(%class.GrVkCaps* nocapture readnone, %class.GrSurface*) unnamed_addr #0 align 2 {
  %3 = bitcast %class.GrSurface* %1 to %class.GrRenderTarget* (%class.GrSurface*)***
  %4 = load %class.GrRenderTarget* (%class.GrSurface*)**, %class.GrRenderTarget* (%class.GrSurface*)*** %3, align 8
  %5 = getelementptr inbounds %class.GrRenderTarget* (%class.GrSurface*)*, %class.GrRenderTarget* (%class.GrSurface*)** %4, i64 13
  %6 = load %class.GrRenderTarget* (%class.GrSurface*)*, %class.GrRenderTarget* (%class.GrSurface*)** %5, align 8
  %7 = tail call %class.GrRenderTarget* %6(%class.GrSurface* %1) #13
  %8 = icmp eq %class.GrRenderTarget* %7, null
  br i1 %8, label %20, label %9

9:                                                ; preds = %2
  %10 = getelementptr inbounds %class.GrRenderTarget, %class.GrRenderTarget* %7, i64 0, i32 3
  %11 = load i32, i32* %10, align 8
  %12 = icmp slt i32 %11, 2
  br i1 %12, label %13, label %35

13:                                               ; preds = %9
  %14 = bitcast %class.GrSurface* %1 to %class.GrTexture* (%class.GrSurface*)***
  %15 = load %class.GrTexture* (%class.GrSurface*)**, %class.GrTexture* (%class.GrSurface*)*** %14, align 8
  %16 = getelementptr inbounds %class.GrTexture* (%class.GrSurface*)*, %class.GrTexture* (%class.GrSurface*)** %15, i64 11
  %17 = load %class.GrTexture* (%class.GrSurface*)*, %class.GrTexture* (%class.GrSurface*)** %16, align 8
  %18 = tail call %class.GrTexture* %17(%class.GrSurface* %1) #13
  %19 = icmp ne %class.GrTexture* %18, null
  br label %35

20:                                               ; preds = %2
  %21 = bitcast %class.GrSurface* %1 to %class.GrTexture* (%class.GrSurface*)***
  %22 = load %class.GrTexture* (%class.GrSurface*)**, %class.GrTexture* (%class.GrSurface*)*** %21, align 8
  %23 = getelementptr inbounds %class.GrTexture* (%class.GrSurface*)*, %class.GrTexture* (%class.GrSurface*)** %22, i64 11
  %24 = load %class.GrTexture* (%class.GrSurface*)*, %class.GrTexture* (%class.GrSurface*)** %23, align 8
  %25 = tail call %class.GrTexture* %24(%class.GrSurface* %1) #13
  %26 = icmp eq %class.GrTexture* %25, null
  br i1 %26, label %34, label %27

27:                                               ; preds = %20
  %28 = getelementptr inbounds %class.GrTexture, %class.GrTexture* %25, i64 0, i32 5
  %29 = bitcast %class.GrSurface* %28 to %class.GrVkAttachment**
  %30 = load %class.GrVkAttachment*, %class.GrVkAttachment** %29, align 8
  %31 = getelementptr inbounds %class.GrVkAttachment, %class.GrVkAttachment* %30, i64 0, i32 1, i32 1, i32 11, i32 3
  %32 = load i32, i32* %31, align 8
  %33 = icmp eq i32 %32, 0
  br i1 %33, label %34, label %35

34:                                               ; preds = %27, %20
  br label %35

35:                                               ; preds = %27, %9, %13, %34
  %36 = phi i1 [ true, %34 ], [ false, %27 ], [ %19, %13 ], [ false, %9 ]
  ret i1 %36
}

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZNK8GrVkCaps33onAreColorTypeAndFormatCompatibleE11GrColorTypeRK15GrBackendFormat(%class.GrVkCaps* readonly, i32, %class.GrBackendFormat* dereferenceable(72)) unnamed_addr #0 align 2 {
  %4 = alloca i32, align 4
  %5 = bitcast i32* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %5) #13
  store i32 -1431655766, i32* %4, align 4
  %6 = call zeroext i1 @_ZNK15GrBackendFormat10asVkFormatEP8VkFormat(%class.GrBackendFormat* %2, i32* nonnull %4) #13
  br i1 %6, label %7, label %41

7:                                                ; preds = %3
  %8 = call %struct.GrVkYcbcrConversionInfo* @_ZNK15GrBackendFormat24getVkYcbcrConversionInfoEv(%class.GrBackendFormat* %2) #13
  %9 = getelementptr inbounds %struct.GrVkYcbcrConversionInfo, %struct.GrVkYcbcrConversionInfo* %8, i64 0, i32 3
  %10 = load i32, i32* %9, align 8
  %11 = icmp eq i32 %10, 0
  br i1 %11, label %23, label %12

12:                                               ; preds = %7
  %13 = load i32, i32* %4, align 4
  %14 = call zeroext i1 @_Z27GrVkFormatNeedsYcbcrSampler8VkFormat(i32 %13) #13
  br i1 %14, label %23, label %15

15:                                               ; preds = %12
  %16 = load i32, i32* %4, align 4
  %17 = icmp eq i32 %16, 0
  br i1 %17, label %18, label %22

18:                                               ; preds = %15
  %19 = getelementptr inbounds %struct.GrVkYcbcrConversionInfo, %struct.GrVkYcbcrConversionInfo* %8, i64 0, i32 2
  %20 = load i64, i64* %19, align 8
  %21 = icmp eq i64 %20, 0
  br i1 %21, label %22, label %41

22:                                               ; preds = %18, %15
  br label %41

23:                                               ; preds = %7, %12
  %24 = load i32, i32* %4, align 4
  %25 = call dereferenceable(40) %"struct.GrVkCaps::FormatInfo"* @_ZN8GrVkCaps13getFormatInfoE8VkFormat(%class.GrVkCaps* %0, i32 %24) #13
  %26 = getelementptr inbounds %"struct.GrVkCaps::FormatInfo", %"struct.GrVkCaps::FormatInfo"* %25, i64 0, i32 5
  %27 = load i32, i32* %26, align 8
  %28 = icmp sgt i32 %27, 0
  br i1 %28, label %29, label %41

29:                                               ; preds = %23
  %30 = getelementptr inbounds %"struct.GrVkCaps::FormatInfo", %"struct.GrVkCaps::FormatInfo"* %25, i64 0, i32 4, i32 0, i32 0, i32 0
  %31 = load %"struct.GrVkCaps::ColorTypeInfo"*, %"struct.GrVkCaps::ColorTypeInfo"** %30, align 8
  %32 = sext i32 %27 to i64
  br label %35

33:                                               ; preds = %35
  %34 = icmp slt i64 %40, %32
  br i1 %34, label %35, label %41

35:                                               ; preds = %29, %33
  %36 = phi i64 [ 0, %29 ], [ %40, %33 ]
  %37 = getelementptr inbounds %"struct.GrVkCaps::ColorTypeInfo", %"struct.GrVkCaps::ColorTypeInfo"* %31, i64 %36, i32 0
  %38 = load i32, i32* %37, align 4
  %39 = icmp eq i32 %38, %1
  %40 = add nuw nsw i64 %36, 1
  br i1 %39, label %41, label %33

41:                                               ; preds = %33, %35, %23, %22, %18, %3
  %42 = phi i1 [ false, %3 ], [ false, %22 ], [ true, %18 ], [ false, %23 ], [ false, %33 ], [ true, %35 ]
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %5) #13
  ret i1 %42
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZNK8GrVkCaps25onGetDefaultBackendFormatE11GrColorType(%class.GrBackendFormat* noalias sret, %class.GrVkCaps* nocapture readonly, i32) unnamed_addr #0 align 2 {
  %4 = alloca %struct.GrVkYcbcrConversionInfo, align 8
  %5 = sext i32 %2 to i64
  %6 = getelementptr inbounds %class.GrVkCaps, %class.GrVkCaps* %1, i64 0, i32 3, i64 %5
  %7 = load i32, i32* %6, align 4
  %8 = icmp eq i32 %7, 0
  br i1 %8, label %9, label %13

9:                                                ; preds = %3
  %10 = getelementptr inbounds %class.GrBackendFormat, %class.GrBackendFormat* %0, i64 0, i32 0
  store i32 5, i32* %10, align 8
  %11 = getelementptr inbounds %class.GrBackendFormat, %class.GrBackendFormat* %0, i64 0, i32 1
  store i8 0, i8* %11, align 4
  %12 = getelementptr inbounds %class.GrBackendFormat, %class.GrBackendFormat* %0, i64 0, i32 3
  store i32 0, i32* %12, align 8
  br label %15

13:                                               ; preds = %3
  %14 = bitcast %struct.GrVkYcbcrConversionInfo* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 48, i8* nonnull %14) #13, !noalias !4
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %14, i8 0, i64 48, i1 false) #13, !noalias !4
  call void @_ZN15GrBackendFormatC1E8VkFormatRK23GrVkYcbcrConversionInfo(%class.GrBackendFormat* %0, i32 %7, %struct.GrVkYcbcrConversionInfo* nonnull dereferenceable(48) %4) #13
  call void @llvm.lifetime.end.p0i8(i64 48, i8* nonnull %14) #13, !noalias !4
  br label %15

15:                                               ; preds = %13, %9
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZNK8GrVkCaps35getBackendFormatFromCompressionTypeEN7SkImage15CompressionTypeE(%class.GrBackendFormat* noalias sret, %class.GrVkCaps* nocapture readonly, i32) unnamed_addr #0 align 2 {
  %4 = alloca %struct.GrVkYcbcrConversionInfo, align 8
  %5 = alloca %struct.GrVkYcbcrConversionInfo, align 8
  %6 = alloca %struct.GrVkYcbcrConversionInfo, align 8
  switch i32 %2, label %44 [
    i32 0, label %7
    i32 1, label %11
    i32 2, label %22
    i32 3, label %33
  ]

7:                                                ; preds = %3
  %8 = getelementptr inbounds %class.GrBackendFormat, %class.GrBackendFormat* %0, i64 0, i32 0
  store i32 5, i32* %8, align 8
  %9 = getelementptr inbounds %class.GrBackendFormat, %class.GrBackendFormat* %0, i64 0, i32 1
  store i8 0, i8* %9, align 4
  %10 = getelementptr inbounds %class.GrBackendFormat, %class.GrBackendFormat* %0, i64 0, i32 3
  store i32 0, i32* %10, align 8
  br label %45

11:                                               ; preds = %3
  %12 = getelementptr inbounds %class.GrVkCaps, %class.GrVkCaps* %1, i64 0, i32 2, i64 13, i32 0
  %13 = load i16, i16* %12, align 8
  %14 = and i16 %13, 1
  %15 = icmp eq i16 %14, 0
  br i1 %15, label %18, label %16

16:                                               ; preds = %11
  %17 = bitcast %struct.GrVkYcbcrConversionInfo* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 48, i8* nonnull %17) #13, !noalias !7
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %17, i8 0, i64 48, i1 false) #13, !noalias !7
  call void @_ZN15GrBackendFormatC1E8VkFormatRK23GrVkYcbcrConversionInfo(%class.GrBackendFormat* %0, i32 147, %struct.GrVkYcbcrConversionInfo* nonnull dereferenceable(48) %4) #13
  call void @llvm.lifetime.end.p0i8(i64 48, i8* nonnull %17) #13, !noalias !7
  br label %45

18:                                               ; preds = %11
  %19 = getelementptr inbounds %class.GrBackendFormat, %class.GrBackendFormat* %0, i64 0, i32 0
  store i32 5, i32* %19, align 8
  %20 = getelementptr inbounds %class.GrBackendFormat, %class.GrBackendFormat* %0, i64 0, i32 1
  store i8 0, i8* %20, align 4
  %21 = getelementptr inbounds %class.GrBackendFormat, %class.GrBackendFormat* %0, i64 0, i32 3
  store i32 0, i32* %21, align 8
  br label %45

22:                                               ; preds = %3
  %23 = getelementptr inbounds %class.GrVkCaps, %class.GrVkCaps* %1, i64 0, i32 2, i64 14, i32 0
  %24 = load i16, i16* %23, align 8
  %25 = and i16 %24, 1
  %26 = icmp eq i16 %25, 0
  br i1 %26, label %29, label %27

27:                                               ; preds = %22
  %28 = bitcast %struct.GrVkYcbcrConversionInfo* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 48, i8* nonnull %28) #13, !noalias !10
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %28, i8 0, i64 48, i1 false) #13, !noalias !10
  call void @_ZN15GrBackendFormatC1E8VkFormatRK23GrVkYcbcrConversionInfo(%class.GrBackendFormat* %0, i32 131, %struct.GrVkYcbcrConversionInfo* nonnull dereferenceable(48) %5) #13
  call void @llvm.lifetime.end.p0i8(i64 48, i8* nonnull %28) #13, !noalias !10
  br label %45

29:                                               ; preds = %22
  %30 = getelementptr inbounds %class.GrBackendFormat, %class.GrBackendFormat* %0, i64 0, i32 0
  store i32 5, i32* %30, align 8
  %31 = getelementptr inbounds %class.GrBackendFormat, %class.GrBackendFormat* %0, i64 0, i32 1
  store i8 0, i8* %31, align 4
  %32 = getelementptr inbounds %class.GrBackendFormat, %class.GrBackendFormat* %0, i64 0, i32 3
  store i32 0, i32* %32, align 8
  br label %45

33:                                               ; preds = %3
  %34 = getelementptr inbounds %class.GrVkCaps, %class.GrVkCaps* %1, i64 0, i32 2, i64 15, i32 0
  %35 = load i16, i16* %34, align 8
  %36 = and i16 %35, 1
  %37 = icmp eq i16 %36, 0
  br i1 %37, label %40, label %38

38:                                               ; preds = %33
  %39 = bitcast %struct.GrVkYcbcrConversionInfo* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 48, i8* nonnull %39) #13, !noalias !13
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %39, i8 0, i64 48, i1 false) #13, !noalias !13
  call void @_ZN15GrBackendFormatC1E8VkFormatRK23GrVkYcbcrConversionInfo(%class.GrBackendFormat* %0, i32 133, %struct.GrVkYcbcrConversionInfo* nonnull dereferenceable(48) %6) #13
  call void @llvm.lifetime.end.p0i8(i64 48, i8* nonnull %39) #13, !noalias !13
  br label %45

40:                                               ; preds = %33
  %41 = getelementptr inbounds %class.GrBackendFormat, %class.GrBackendFormat* %0, i64 0, i32 0
  store i32 5, i32* %41, align 8
  %42 = getelementptr inbounds %class.GrBackendFormat, %class.GrBackendFormat* %0, i64 0, i32 1
  store i8 0, i8* %42, align 4
  %43 = getelementptr inbounds %class.GrBackendFormat, %class.GrBackendFormat* %0, i64 0, i32 3
  store i32 0, i32* %43, align 8
  br label %45

44:                                               ; preds = %3
  tail call void @llvm.trap()
  unreachable

45:                                               ; preds = %40, %38, %29, %27, %18, %16, %7
  ret void
}

; Function Attrs: cold noreturn nounwind
declare void @llvm.trap() #8

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZNK8GrVkCaps16onGetReadSwizzleERK15GrBackendFormat11GrColorType(%class.GrSwizzle* noalias sret, %class.GrVkCaps* readonly, %class.GrBackendFormat* dereferenceable(72), i32) unnamed_addr #0 align 2 {
  %5 = alloca i32, align 4
  %6 = bitcast i32* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %6) #13
  store i32 -1431655766, i32* %5, align 4
  %7 = call zeroext i1 @_ZNK15GrBackendFormat10asVkFormatEP8VkFormat(%class.GrBackendFormat* %2, i32* nonnull %5) #13
  %8 = call %struct.GrVkYcbcrConversionInfo* @_ZNK15GrBackendFormat24getVkYcbcrConversionInfoEv(%class.GrBackendFormat* %2) #13
  %9 = getelementptr inbounds %struct.GrVkYcbcrConversionInfo, %struct.GrVkYcbcrConversionInfo* %8, i64 0, i32 3
  %10 = load i32, i32* %9, align 8
  %11 = icmp eq i32 %10, 0
  br i1 %11, label %17, label %12

12:                                               ; preds = %4
  %13 = getelementptr inbounds %struct.GrVkYcbcrConversionInfo, %struct.GrVkYcbcrConversionInfo* %8, i64 0, i32 2
  %14 = load i64, i64* %13, align 8
  %15 = icmp eq i64 %14, 0
  br i1 %15, label %17, label %16

16:                                               ; preds = %12
  call void @_ZN9GrSwizzleC2EPKc(%class.GrSwizzle* %0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.35, i64 0, i64 0))
  br label %41

17:                                               ; preds = %4, %12
  %18 = load i32, i32* %5, align 4
  %19 = call dereferenceable(40) %"struct.GrVkCaps::FormatInfo"* @_ZN8GrVkCaps13getFormatInfoE8VkFormat(%class.GrVkCaps* %1, i32 %18) #13
  %20 = getelementptr inbounds %"struct.GrVkCaps::FormatInfo", %"struct.GrVkCaps::FormatInfo"* %19, i64 0, i32 5
  %21 = load i32, i32* %20, align 8
  %22 = icmp sgt i32 %21, 0
  br i1 %22, label %23, label %40

23:                                               ; preds = %17
  %24 = getelementptr inbounds %"struct.GrVkCaps::FormatInfo", %"struct.GrVkCaps::FormatInfo"* %19, i64 0, i32 4, i32 0, i32 0, i32 0
  %25 = load %"struct.GrVkCaps::ColorTypeInfo"*, %"struct.GrVkCaps::ColorTypeInfo"** %24, align 8
  %26 = sext i32 %21 to i64
  br label %29

27:                                               ; preds = %29
  %28 = icmp slt i64 %34, %26
  br i1 %28, label %29, label %40

29:                                               ; preds = %23, %27
  %30 = phi i64 [ 0, %23 ], [ %34, %27 ]
  %31 = getelementptr inbounds %"struct.GrVkCaps::ColorTypeInfo", %"struct.GrVkCaps::ColorTypeInfo"* %25, i64 %30, i32 0
  %32 = load i32, i32* %31, align 4
  %33 = icmp eq i32 %32, %3
  %34 = add nuw nsw i64 %30, 1
  br i1 %33, label %35, label %27

35:                                               ; preds = %29
  %36 = and i64 %30, 4294967295
  %37 = getelementptr inbounds %class.GrSwizzle, %class.GrSwizzle* %0, i64 0, i32 0
  %38 = getelementptr inbounds %"struct.GrVkCaps::ColorTypeInfo", %"struct.GrVkCaps::ColorTypeInfo"* %25, i64 %36, i32 3, i32 0
  %39 = load i16, i16* %38, align 2
  store i16 %39, i16* %37, align 2
  br label %41

40:                                               ; preds = %27, %17
  call void @_ZN9GrSwizzleC2EPKc(%class.GrSwizzle* %0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.35, i64 0, i64 0)) #13
  br label %41

41:                                               ; preds = %35, %40, %16
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %6) #13
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZNK8GrVkCaps15getWriteSwizzleERK15GrBackendFormat11GrColorType(%class.GrSwizzle* noalias sret, %class.GrVkCaps* readonly, %class.GrBackendFormat* dereferenceable(72), i32) unnamed_addr #0 align 2 {
  %5 = alloca i32, align 4
  %6 = bitcast i32* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %6) #13
  store i32 -1431655766, i32* %5, align 4
  %7 = call zeroext i1 @_ZNK15GrBackendFormat10asVkFormatEP8VkFormat(%class.GrBackendFormat* %2, i32* nonnull %5) #13
  %8 = load i32, i32* %5, align 4
  %9 = call dereferenceable(40) %"struct.GrVkCaps::FormatInfo"* @_ZN8GrVkCaps13getFormatInfoE8VkFormat(%class.GrVkCaps* %1, i32 %8) #13
  %10 = getelementptr inbounds %"struct.GrVkCaps::FormatInfo", %"struct.GrVkCaps::FormatInfo"* %9, i64 0, i32 5
  %11 = load i32, i32* %10, align 8
  %12 = icmp sgt i32 %11, 0
  br i1 %12, label %13, label %30

13:                                               ; preds = %4
  %14 = getelementptr inbounds %"struct.GrVkCaps::FormatInfo", %"struct.GrVkCaps::FormatInfo"* %9, i64 0, i32 4, i32 0, i32 0, i32 0
  %15 = load %"struct.GrVkCaps::ColorTypeInfo"*, %"struct.GrVkCaps::ColorTypeInfo"** %14, align 8
  %16 = sext i32 %11 to i64
  br label %19

17:                                               ; preds = %19
  %18 = icmp slt i64 %24, %16
  br i1 %18, label %19, label %30

19:                                               ; preds = %13, %17
  %20 = phi i64 [ 0, %13 ], [ %24, %17 ]
  %21 = getelementptr inbounds %"struct.GrVkCaps::ColorTypeInfo", %"struct.GrVkCaps::ColorTypeInfo"* %15, i64 %20, i32 0
  %22 = load i32, i32* %21, align 4
  %23 = icmp eq i32 %22, %3
  %24 = add nuw nsw i64 %20, 1
  br i1 %23, label %25, label %17

25:                                               ; preds = %19
  %26 = and i64 %20, 4294967295
  %27 = getelementptr inbounds %class.GrSwizzle, %class.GrSwizzle* %0, i64 0, i32 0
  %28 = getelementptr inbounds %"struct.GrVkCaps::ColorTypeInfo", %"struct.GrVkCaps::ColorTypeInfo"* %15, i64 %26, i32 4, i32 0
  %29 = load i16, i16* %28, align 2
  store i16 %29, i16* %27, align 2
  br label %31

30:                                               ; preds = %17, %4
  call void @_ZN9GrSwizzleC2EPKc(%class.GrSwizzle* %0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.35, i64 0, i64 0)) #13
  br label %31

31:                                               ; preds = %25, %30
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %6) #13
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @_ZNK8GrVkCaps26onGetDstSampleTypeForProxyEPK19GrRenderTargetProxy(%class.GrVkCaps* nocapture readnone, %class.GrRenderTargetProxy*) unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %class.GrRenderTargetProxy, %class.GrRenderTargetProxy* %1, i64 0, i32 1
  %4 = load i8, i8* %3, align 8
  %5 = icmp sgt i8 %4, 1
  %6 = bitcast %class.GrRenderTargetProxy* %1 to i8**
  br i1 %5, label %9, label %7

7:                                                ; preds = %2
  %8 = bitcast %class.GrRenderTargetProxy* %1 to i8*
  br label %23

9:                                                ; preds = %2
  %10 = load i8*, i8** %6, align 8
  %11 = getelementptr i8, i8* %10, i64 -24
  %12 = bitcast i8* %11 to i64*
  %13 = load i64, i64* %12, align 8
  %14 = bitcast %class.GrRenderTargetProxy* %1 to i8*
  %15 = getelementptr inbounds i8, i8* %14, i64 %13
  %16 = bitcast i8* %15 to %class.GrSurfaceProxy*
  %17 = bitcast i8* %15 to %class.GrTextureProxy* (%class.GrSurfaceProxy*)***
  %18 = load %class.GrTextureProxy* (%class.GrSurfaceProxy*)**, %class.GrTextureProxy* (%class.GrSurfaceProxy*)*** %17, align 8
  %19 = getelementptr inbounds %class.GrTextureProxy* (%class.GrSurfaceProxy*)*, %class.GrTextureProxy* (%class.GrSurfaceProxy*)** %18, i64 4
  %20 = load %class.GrTextureProxy* (%class.GrSurfaceProxy*)*, %class.GrTextureProxy* (%class.GrSurfaceProxy*)** %19, align 8
  %21 = tail call %class.GrTextureProxy* %20(%class.GrSurfaceProxy* %16) #13
  %22 = icmp eq %class.GrTextureProxy* %21, null
  br i1 %22, label %23, label %35

23:                                               ; preds = %7, %9
  %24 = phi i8* [ %8, %7 ], [ %14, %9 ]
  %25 = load i8*, i8** %6, align 8
  %26 = getelementptr i8, i8* %25, i64 -24
  %27 = bitcast i8* %26 to i64*
  %28 = load i64, i64* %27, align 8
  %29 = getelementptr inbounds i8, i8* %24, i64 %28
  %30 = getelementptr inbounds i8, i8* %29, i64 24
  %31 = bitcast i8* %30 to i32*
  %32 = load i32, i32* %31, align 8
  %33 = and i32 %32, 16
  %34 = icmp eq i32 %33, 0
  br i1 %34, label %35, label %36

35:                                               ; preds = %9, %23
  br label %36

36:                                               ; preds = %23, %35
  %37 = phi i32 [ 1, %35 ], [ 3, %23 ]
  ret i32 %37
}

; Function Attrs: nounwind ssp uwtable
define hidden i64 @_ZNK8GrVkCaps16computeFormatKeyERK15GrBackendFormat(%class.GrVkCaps* nocapture readnone, %class.GrBackendFormat* dereferenceable(72)) unnamed_addr #0 align 2 {
  %3 = alloca i32, align 4
  %4 = bitcast i32* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %4) #13
  store i32 -1431655766, i32* %3, align 4
  %5 = call zeroext i1 @_ZNK15GrBackendFormat10asVkFormatEP8VkFormat(%class.GrBackendFormat* %1, i32* nonnull %3) #13
  %6 = load i32, i32* %3, align 4
  %7 = zext i32 %6 to i64
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %4) #13
  ret i64 %7
}

; Function Attrs: nounwind ssp uwtable
define hidden { i32, i64 } @_ZNK8GrVkCaps30onSupportedReadPixelsColorTypeE11GrColorTypeRK15GrBackendFormatS0_(%class.GrVkCaps* readonly, i32, %class.GrBackendFormat* dereferenceable(72), i32) unnamed_addr #0 align 2 {
  %5 = alloca i32, align 4
  %6 = bitcast i32* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %6) #13
  store i32 -1431655766, i32* %5, align 4
  %7 = call zeroext i1 @_ZNK15GrBackendFormat10asVkFormatEP8VkFormat(%class.GrBackendFormat* %2, i32* nonnull %5) #13
  br i1 %7, label %8, label %44

8:                                                ; preds = %4
  %9 = load i32, i32* %5, align 4
  %10 = call zeroext i1 @_Z27GrVkFormatNeedsYcbcrSampler8VkFormat(i32 %9) #13
  br i1 %10, label %44, label %11

11:                                               ; preds = %8
  %12 = call i32 @_Z32GrBackendFormatToCompressionTypeRK15GrBackendFormat(%class.GrBackendFormat* dereferenceable(72) %2) #13
  switch i32 %12, label %13 [
    i32 0, label %15
    i32 3, label %44
    i32 1, label %14
    i32 2, label %14
  ]

13:                                               ; preds = %11
  call void @llvm.trap() #13
  unreachable

14:                                               ; preds = %11, %11
  br label %44

15:                                               ; preds = %11
  %16 = load i32, i32* %5, align 4
  %17 = call fastcc i64 @_ZL23GrVkFormatBytesPerBlock8VkFormat(i32 %16)
  %18 = and i64 %17, 3
  switch i64 %18, label %21 [
    i64 0, label %23
    i64 2, label %19
  ]

19:                                               ; preds = %15
  %20 = shl i64 %17, 1
  br label %23

21:                                               ; preds = %15
  %22 = shl i64 %17, 2
  br label %23

23:                                               ; preds = %15, %19, %21
  %24 = phi i64 [ %22, %21 ], [ %20, %19 ], [ %17, %15 ]
  %25 = call dereferenceable(40) %"struct.GrVkCaps::FormatInfo"* @_ZN8GrVkCaps13getFormatInfoE8VkFormat(%class.GrVkCaps* %0, i32 %16) #13
  %26 = getelementptr inbounds %"struct.GrVkCaps::FormatInfo", %"struct.GrVkCaps::FormatInfo"* %25, i64 0, i32 5
  %27 = load i32, i32* %26, align 8
  %28 = icmp sgt i32 %27, 0
  br i1 %28, label %29, label %44

29:                                               ; preds = %23
  %30 = getelementptr inbounds %"struct.GrVkCaps::FormatInfo", %"struct.GrVkCaps::FormatInfo"* %25, i64 0, i32 4, i32 0, i32 0, i32 0
  %31 = load %"struct.GrVkCaps::ColorTypeInfo"*, %"struct.GrVkCaps::ColorTypeInfo"** %30, align 8
  %32 = sext i32 %27 to i64
  br label %35

33:                                               ; preds = %35
  %34 = icmp slt i64 %40, %32
  br i1 %34, label %35, label %44

35:                                               ; preds = %29, %33
  %36 = phi i64 [ 0, %29 ], [ %40, %33 ]
  %37 = getelementptr inbounds %"struct.GrVkCaps::ColorTypeInfo", %"struct.GrVkCaps::ColorTypeInfo"* %31, i64 %36, i32 0
  %38 = load i32, i32* %37, align 4
  %39 = icmp eq i32 %38, %1
  %40 = add nuw nsw i64 %36, 1
  br i1 %39, label %41, label %33

41:                                               ; preds = %35
  %42 = getelementptr inbounds %"struct.GrVkCaps::ColorTypeInfo", %"struct.GrVkCaps::ColorTypeInfo"* %31, i64 %36, i32 1
  %43 = load i32, i32* %42, align 4
  br label %44

44:                                               ; preds = %33, %41, %23, %11, %14, %8, %4
  %45 = phi i32 [ 0, %4 ], [ 0, %8 ], [ 6, %14 ], [ 4, %11 ], [ 0, %23 ], [ %43, %41 ], [ 0, %33 ]
  %46 = phi i64 [ 0, %4 ], [ 0, %8 ], [ 0, %14 ], [ 0, %11 ], [ 0, %23 ], [ %24, %41 ], [ 0, %33 ]
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %6) #13
  %47 = insertvalue { i32, i64 } undef, i32 %45, 0
  %48 = insertvalue { i32, i64 } %47, i64 %46, 1
  ret { i32, i64 } %48
}

declare i32 @_Z32GrBackendFormatToCompressionTypeRK15GrBackendFormat(%class.GrBackendFormat* dereferenceable(72)) local_unnamed_addr #1

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden i32 @_ZNK8GrVkCaps25getFragmentUniformBindingEv(%class.GrVkCaps* nocapture readnone) local_unnamed_addr #3 align 2 {
  ret i32 0
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden i32 @_ZNK8GrVkCaps21getFragmentUniformSetEv(%class.GrVkCaps* nocapture readnone) local_unnamed_addr #3 align 2 {
  ret i32 0
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZNK8GrVkCaps18addExtraSamplerKeyEP21GrProcessorKeyBuilder14GrSamplerStateRK15GrBackendFormat(%class.GrVkCaps* nocapture readnone, %class.GrProcessorKeyBuilder*, i64, i32, %class.GrBackendFormat* dereferenceable(72)) unnamed_addr #0 align 2 {
  %6 = alloca %"struct.GrVkSampler::Key", align 8
  %7 = alloca [8 x i32], align 16
  %8 = tail call %struct.GrVkYcbcrConversionInfo* @_ZNK15GrBackendFormat24getVkYcbcrConversionInfoEv(%class.GrBackendFormat* %4) #13
  %9 = icmp eq %struct.GrVkYcbcrConversionInfo* %8, null
  br i1 %9, label %54, label %10

10:                                               ; preds = %5
  %11 = getelementptr inbounds %"struct.GrVkSampler::Key", %"struct.GrVkSampler::Key"* %6, i64 0, i32 0
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %11) #13
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %11, i8 -86, i64 32, i1 false)
  call void @_ZN11GrVkSampler11GenerateKeyE14GrSamplerStateRK23GrVkYcbcrConversionInfo(%"struct.GrVkSampler::Key"* nonnull sret %6, i64 %2, i32 %3, %struct.GrVkYcbcrConversionInfo* nonnull dereferenceable(48) %8) #13
  %12 = bitcast [8 x i32]* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %12) #13
  %13 = getelementptr inbounds [8 x i32], [8 x i32]* %7, i64 0, i64 0
  %14 = getelementptr inbounds [8 x i32], [8 x i32]* %7, i64 0, i64 1
  %15 = getelementptr inbounds [8 x i32], [8 x i32]* %7, i64 0, i64 2
  %16 = getelementptr inbounds [8 x i32], [8 x i32]* %7, i64 0, i64 3
  %17 = getelementptr inbounds [8 x i32], [8 x i32]* %7, i64 0, i64 4
  %18 = getelementptr inbounds [8 x i32], [8 x i32]* %7, i64 0, i64 5
  %19 = getelementptr inbounds [8 x i32], [8 x i32]* %7, i64 0, i64 6
  %20 = getelementptr inbounds [8 x i32], [8 x i32]* %7, i64 0, i64 7
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 16 %12, i8* nonnull align 8 %11, i64 32, i1 false)
  %21 = bitcast %class.GrProcessorKeyBuilder* %1 to void (%class.GrProcessorKeyBuilder*, i32, i32, i8*)***
  %22 = load i32, i32* %13, align 16
  %23 = load void (%class.GrProcessorKeyBuilder*, i32, i32, i8*)**, void (%class.GrProcessorKeyBuilder*, i32, i32, i8*)*** %21, align 8
  %24 = getelementptr inbounds void (%class.GrProcessorKeyBuilder*, i32, i32, i8*)*, void (%class.GrProcessorKeyBuilder*, i32, i32, i8*)** %23, i64 2
  %25 = load void (%class.GrProcessorKeyBuilder*, i32, i32, i8*)*, void (%class.GrProcessorKeyBuilder*, i32, i32, i8*)** %24, align 8
  call void %25(%class.GrProcessorKeyBuilder* %1, i32 32, i32 %22, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.36, i64 0, i64 0)) #13
  %26 = load i32, i32* %14, align 4
  %27 = load void (%class.GrProcessorKeyBuilder*, i32, i32, i8*)**, void (%class.GrProcessorKeyBuilder*, i32, i32, i8*)*** %21, align 8
  %28 = getelementptr inbounds void (%class.GrProcessorKeyBuilder*, i32, i32, i8*)*, void (%class.GrProcessorKeyBuilder*, i32, i32, i8*)** %27, i64 2
  %29 = load void (%class.GrProcessorKeyBuilder*, i32, i32, i8*)*, void (%class.GrProcessorKeyBuilder*, i32, i32, i8*)** %28, align 8
  call void %29(%class.GrProcessorKeyBuilder* %1, i32 32, i32 %26, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.36, i64 0, i64 0)) #13
  %30 = load i32, i32* %15, align 8
  %31 = load void (%class.GrProcessorKeyBuilder*, i32, i32, i8*)**, void (%class.GrProcessorKeyBuilder*, i32, i32, i8*)*** %21, align 8
  %32 = getelementptr inbounds void (%class.GrProcessorKeyBuilder*, i32, i32, i8*)*, void (%class.GrProcessorKeyBuilder*, i32, i32, i8*)** %31, i64 2
  %33 = load void (%class.GrProcessorKeyBuilder*, i32, i32, i8*)*, void (%class.GrProcessorKeyBuilder*, i32, i32, i8*)** %32, align 8
  call void %33(%class.GrProcessorKeyBuilder* %1, i32 32, i32 %30, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.36, i64 0, i64 0)) #13
  %34 = load i32, i32* %16, align 4
  %35 = load void (%class.GrProcessorKeyBuilder*, i32, i32, i8*)**, void (%class.GrProcessorKeyBuilder*, i32, i32, i8*)*** %21, align 8
  %36 = getelementptr inbounds void (%class.GrProcessorKeyBuilder*, i32, i32, i8*)*, void (%class.GrProcessorKeyBuilder*, i32, i32, i8*)** %35, i64 2
  %37 = load void (%class.GrProcessorKeyBuilder*, i32, i32, i8*)*, void (%class.GrProcessorKeyBuilder*, i32, i32, i8*)** %36, align 8
  call void %37(%class.GrProcessorKeyBuilder* %1, i32 32, i32 %34, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.36, i64 0, i64 0)) #13
  %38 = load i32, i32* %17, align 16
  %39 = load void (%class.GrProcessorKeyBuilder*, i32, i32, i8*)**, void (%class.GrProcessorKeyBuilder*, i32, i32, i8*)*** %21, align 8
  %40 = getelementptr inbounds void (%class.GrProcessorKeyBuilder*, i32, i32, i8*)*, void (%class.GrProcessorKeyBuilder*, i32, i32, i8*)** %39, i64 2
  %41 = load void (%class.GrProcessorKeyBuilder*, i32, i32, i8*)*, void (%class.GrProcessorKeyBuilder*, i32, i32, i8*)** %40, align 8
  call void %41(%class.GrProcessorKeyBuilder* %1, i32 32, i32 %38, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.36, i64 0, i64 0)) #13
  %42 = load i32, i32* %18, align 4
  %43 = load void (%class.GrProcessorKeyBuilder*, i32, i32, i8*)**, void (%class.GrProcessorKeyBuilder*, i32, i32, i8*)*** %21, align 8
  %44 = getelementptr inbounds void (%class.GrProcessorKeyBuilder*, i32, i32, i8*)*, void (%class.GrProcessorKeyBuilder*, i32, i32, i8*)** %43, i64 2
  %45 = load void (%class.GrProcessorKeyBuilder*, i32, i32, i8*)*, void (%class.GrProcessorKeyBuilder*, i32, i32, i8*)** %44, align 8
  call void %45(%class.GrProcessorKeyBuilder* %1, i32 32, i32 %42, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.36, i64 0, i64 0)) #13
  %46 = load i32, i32* %19, align 8
  %47 = load void (%class.GrProcessorKeyBuilder*, i32, i32, i8*)**, void (%class.GrProcessorKeyBuilder*, i32, i32, i8*)*** %21, align 8
  %48 = getelementptr inbounds void (%class.GrProcessorKeyBuilder*, i32, i32, i8*)*, void (%class.GrProcessorKeyBuilder*, i32, i32, i8*)** %47, i64 2
  %49 = load void (%class.GrProcessorKeyBuilder*, i32, i32, i8*)*, void (%class.GrProcessorKeyBuilder*, i32, i32, i8*)** %48, align 8
  call void %49(%class.GrProcessorKeyBuilder* %1, i32 32, i32 %46, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.36, i64 0, i64 0)) #13
  %50 = load i32, i32* %20, align 4
  %51 = load void (%class.GrProcessorKeyBuilder*, i32, i32, i8*)**, void (%class.GrProcessorKeyBuilder*, i32, i32, i8*)*** %21, align 8
  %52 = getelementptr inbounds void (%class.GrProcessorKeyBuilder*, i32, i32, i8*)*, void (%class.GrProcessorKeyBuilder*, i32, i32, i8*)** %51, i64 2
  %53 = load void (%class.GrProcessorKeyBuilder*, i32, i32, i8*)*, void (%class.GrProcessorKeyBuilder*, i32, i32, i8*)** %52, align 8
  call void %53(%class.GrProcessorKeyBuilder* %1, i32 32, i32 %50, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.36, i64 0, i64 0)) #13
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %12) #13
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %11) #13
  br label %54

54:                                               ; preds = %5, %10
  ret void
}

declare void @_ZN11GrVkSampler11GenerateKeyE14GrSamplerStateRK23GrVkYcbcrConversionInfo(%"struct.GrVkSampler::Key"* sret, i64, i32, %struct.GrVkYcbcrConversionInfo* dereferenceable(48)) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZNK8GrVkCaps8makeDescEP14GrRenderTargetRK13GrProgramInfoN6GrCaps24ProgramDescOverrideFlagsE(%class.GrProgramDesc* noalias sret, %class.GrVkCaps*, %class.GrRenderTarget*, %class.GrProgramInfo* dereferenceable(128), i32) unnamed_addr #0 align 2 {
  %6 = alloca %class.GrProcessorKeyBuilder, align 8
  %7 = alloca %"struct.GrVkRenderPass::AttachmentsDescriptor", align 4
  %8 = alloca i32, align 4
  %9 = alloca %class.GrStencilSettings, align 4
  %10 = getelementptr inbounds %class.GrProgramDesc, %class.GrProgramDesc* %0, i64 0, i32 0, i32 0, i32 0, i64 0
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %10, i8 -86, i64 160, i1 false)
  %11 = getelementptr inbounds %class.GrProgramDesc, %class.GrProgramDesc* %0, i64 0, i32 0, i32 0, i32 0, i64 136
  %12 = getelementptr inbounds %class.GrProgramDesc, %class.GrProgramDesc* %0, i64 0, i32 0, i32 0, i32 0, i64 144
  %13 = bitcast i8* %12 to i64*
  %14 = bitcast i8* %11 to i8**
  store i8* %10, i8** %14, align 8
  store i64 283467841536, i64* %13, align 8
  %15 = getelementptr inbounds %class.GrProgramDesc, %class.GrProgramDesc* %0, i64 0, i32 1
  store i32 0, i32* %15, align 8
  %16 = bitcast %class.GrVkCaps* %1 to %class.GrCaps*
  tail call void @_ZN13GrProgramDesc5BuildEPS_RK13GrProgramInfoRK6GrCaps(%class.GrProgramDesc* %0, %class.GrProgramInfo* dereferenceable(128) %3, %class.GrCaps* dereferenceable(232) %16) #13
  %17 = bitcast %class.GrProcessorKeyBuilder* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %17) #13
  %18 = getelementptr inbounds %class.GrProcessorKeyBuilder, %class.GrProcessorKeyBuilder* %6, i64 0, i32 0
  %19 = getelementptr inbounds %class.GrProcessorKeyBuilder, %class.GrProcessorKeyBuilder* %6, i64 0, i32 1
  %20 = getelementptr inbounds %class.GrProcessorKeyBuilder, %class.GrProcessorKeyBuilder* %6, i64 0, i32 2
  %21 = getelementptr inbounds %class.GrProcessorKeyBuilder, %class.GrProcessorKeyBuilder* %6, i64 0, i32 3
  %22 = icmp eq %class.GrProgramDesc* %0, null
  %23 = bitcast i8* %11 to %class.SkTArray.502*
  %24 = select i1 %22, %class.SkTArray.502* null, %class.SkTArray.502* %23
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [6 x i8*] }, { [6 x i8*] }* @_ZTV21GrProcessorKeyBuilder, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %18, align 8
  store %class.SkTArray.502* %24, %class.SkTArray.502** %19, align 8
  %25 = bitcast %class.GrProcessorKeyBuilder* %6 to void (%class.GrProcessorKeyBuilder*, i32, i32, i8*)***
  %26 = bitcast i32* %20 to i64*
  store i64 137438953472, i64* %26, align 8
  tail call void @_ZN8SkTArrayIjLb1EE12checkReallocEiNS0_11ReallocTypeE(%class.SkTArray.502* %24, i32 1, i32 1) #13
  %27 = getelementptr inbounds %class.SkTArray.502, %class.SkTArray.502* %24, i64 0, i32 0
  %28 = load i32*, i32** %27, align 8
  %29 = getelementptr inbounds %class.SkTArray.502, %class.SkTArray.502* %24, i64 0, i32 1
  %30 = load i64, i64* %29, align 8
  %31 = lshr i64 %30, 1
  %32 = and i64 %31, 2147483647
  %33 = getelementptr inbounds i32, i32* %28, i64 %32
  %34 = add i64 %30, 2
  %35 = and i64 %34, 4294967294
  %36 = and i64 %30, -4294967295
  %37 = or i64 %35, %36
  store i64 %37, i64* %29, align 8
  store i32 0, i32* %33, align 4
  %38 = load i32, i32* %21, align 4
  %39 = add i32 %38, -32
  store i32 0, i32* %20, align 8
  store i32 %39, i32* %21, align 4
  %40 = getelementptr inbounds %class.GrProgramInfo, %class.GrProgramInfo* %3, i64 0, i32 11
  %41 = load i32, i32* %40, align 8
  %42 = and i32 %41, 3
  %43 = getelementptr inbounds %class.GrProgramInfo, %class.GrProgramInfo* %3, i64 0, i32 4
  %44 = load i8, i8* %43, align 4, !range !2
  %45 = icmp eq i8 %44, 0
  br i1 %45, label %57, label %46

46:                                               ; preds = %5
  %47 = getelementptr inbounds %class.GrVkCaps, %class.GrVkCaps* %1, i64 0, i32 28
  %48 = load i8, i8* %47, align 4, !range !2
  %49 = icmp eq i8 %48, 0
  br i1 %49, label %57, label %50

50:                                               ; preds = %46
  %51 = and i32 %4, 1
  %52 = getelementptr inbounds %class.GrProgramInfo, %class.GrProgramInfo* %3, i64 0, i32 12
  %53 = load i32, i32* %52, align 4
  %54 = icmp eq i32 %53, 0
  %55 = zext i1 %54 to i32
  %56 = or i32 %51, %55
  br label %57

57:                                               ; preds = %46, %5, %50
  %58 = phi i1 [ false, %46 ], [ true, %50 ], [ false, %5 ]
  %59 = phi i32 [ 0, %46 ], [ %56, %50 ], [ 0, %5 ]
  %60 = icmp eq %class.GrRenderTarget* %2, null
  br i1 %60, label %81, label %61

61:                                               ; preds = %57
  %62 = bitcast %class.GrRenderTarget* %2 to %class.GrVkRenderTarget*
  %63 = getelementptr inbounds %class.GrProgramInfo, %class.GrProgramInfo* %3, i64 0, i32 1
  %64 = load i8, i8* %63, align 4, !range !2
  %65 = icmp eq i8 %64, 0
  br i1 %65, label %66, label %78

66:                                               ; preds = %61
  %67 = getelementptr inbounds %class.GrProgramInfo, %class.GrProgramInfo* %3, i64 0, i32 6
  %68 = load %struct.GrUserStencilSettings*, %struct.GrUserStencilSettings** %67, align 8
  %69 = load %struct.GrUserStencilSettings*, %struct.GrUserStencilSettings** @_ZN21GrUserStencilSettings7kUnusedE, align 8
  %70 = icmp eq %struct.GrUserStencilSettings* %68, %69
  br i1 %70, label %71, label %78

71:                                               ; preds = %66
  %72 = getelementptr inbounds %class.GrProgramInfo, %class.GrProgramInfo* %3, i64 0, i32 5
  %73 = load %class.GrPipeline*, %class.GrPipeline** %72, align 8
  %74 = getelementptr inbounds %class.GrPipeline, %class.GrPipeline* %73, i64 0, i32 5
  %75 = load i8, i8* %74, align 8
  %76 = and i8 %75, 16
  %77 = icmp ne i8 %76, 0
  br label %78

78:                                               ; preds = %71, %66, %61
  %79 = phi i1 [ true, %61 ], [ true, %66 ], [ %77, %71 ]
  %80 = tail call %class.GrVkRenderPass* @_ZN16GrVkRenderTarget19getSimpleRenderPassEbbN14GrVkRenderPass19SelfDependencyFlagsENS0_15LoadFromResolveE(%class.GrVkRenderTarget* nonnull %62, i1 zeroext %58, i1 zeroext %79, i32 %42, i32 %59) #13
  call void @_ZNK14GrVkRenderPass6genKeyEP21GrProcessorKeyBuilder(%class.GrVkRenderPass* %80, %class.GrProcessorKeyBuilder* nonnull %6) #13
  br label %86

81:                                               ; preds = %57
  %82 = bitcast %"struct.GrVkRenderPass::AttachmentsDescriptor"* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 52, i8* nonnull %82) #13
  %83 = getelementptr inbounds %"struct.GrVkRenderPass::AttachmentsDescriptor", %"struct.GrVkRenderPass::AttachmentsDescriptor"* %7, i64 0, i32 3
  store i32 -1431655766, i32* %83, align 4
  call void @llvm.memset.p0i8.i64(i8* nonnull align 4 %82, i8 0, i64 48, i1 false) #13
  %84 = bitcast i32* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %84) #13
  store i32 -1431655766, i32* %8, align 4
  call void @_ZN16GrVkRenderTarget32ReconstructAttachmentsDescriptorERK8GrVkCapsRK13GrProgramInfoPN14GrVkRenderPass21AttachmentsDescriptorEPNS6_15AttachmentFlagsE(%class.GrVkCaps* dereferenceable(1344) %1, %class.GrProgramInfo* dereferenceable(128) %3, %"struct.GrVkRenderPass::AttachmentsDescriptor"* nonnull %7, i32* nonnull %8) #13
  %85 = load i32, i32* %8, align 4
  call void @_ZN14GrVkRenderPass6GenKeyEP21GrProcessorKeyBuilderNS_15AttachmentFlagsERKNS_21AttachmentsDescriptorENS_19SelfDependencyFlagsENS_15LoadFromResolveEm(%class.GrProcessorKeyBuilder* nonnull %6, i32 %85, %"struct.GrVkRenderPass::AttachmentsDescriptor"* nonnull dereferenceable(52) %7, i32 %42, i32 %59, i64 0) #13
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %84) #13
  call void @llvm.lifetime.end.p0i8(i64 52, i8* nonnull %82) #13
  br label %86

86:                                               ; preds = %81, %78
  %87 = bitcast %class.GrStencilSettings* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %87) #13
  call void @llvm.memset.p0i8.i64(i8* nonnull align 4 %87, i8 -86, i64 24, i1 false)
  call void @_ZNK13GrProgramInfo20nonGLStencilSettingsEv(%class.GrStencilSettings* nonnull sret %9, %class.GrProgramInfo* %3) #13
  call void @_ZNK17GrStencilSettings6genKeyEP21GrProcessorKeyBuilderb(%class.GrStencilSettings* nonnull %9, %class.GrProcessorKeyBuilder* nonnull %6, i1 zeroext true) #13
  %88 = getelementptr inbounds %class.GrProgramInfo, %class.GrProgramInfo* %3, i64 0, i32 5
  %89 = load %class.GrPipeline*, %class.GrPipeline** %88, align 8
  call void @_ZNK10GrPipeline6genKeyEP21GrProcessorKeyBuilderRK6GrCaps(%class.GrPipeline* %89, %class.GrProcessorKeyBuilder* nonnull %6, %class.GrCaps* dereferenceable(232) %16) #13
  %90 = getelementptr inbounds %class.GrProgramInfo, %class.GrProgramInfo* %3, i64 0, i32 0
  %91 = load i32, i32* %90, align 8
  %92 = load void (%class.GrProcessorKeyBuilder*, i32, i32, i8*)**, void (%class.GrProcessorKeyBuilder*, i32, i32, i8*)*** %25, align 8
  %93 = getelementptr inbounds void (%class.GrProcessorKeyBuilder*, i32, i32, i8*)*, void (%class.GrProcessorKeyBuilder*, i32, i32, i8*)** %92, i64 2
  %94 = load void (%class.GrProcessorKeyBuilder*, i32, i32, i8*)*, void (%class.GrProcessorKeyBuilder*, i32, i32, i8*)** %93, align 8
  call void %94(%class.GrProcessorKeyBuilder* nonnull %6, i32 32, i32 %91, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.36, i64 0, i64 0)) #13
  %95 = getelementptr inbounds %class.GrProgramInfo, %class.GrProgramInfo* %3, i64 0, i32 9
  %96 = load i8, i8* %95, align 4
  %97 = zext i8 %96 to i32
  %98 = shl nuw nsw i32 %97, 8
  %99 = getelementptr inbounds %class.GrProgramInfo, %class.GrProgramInfo* %3, i64 0, i32 10
  %100 = load i8, i8* %99, align 1
  %101 = zext i8 %100 to i32
  %102 = or i32 %98, %101
  %103 = load void (%class.GrProcessorKeyBuilder*, i32, i32, i8*)**, void (%class.GrProcessorKeyBuilder*, i32, i32, i8*)*** %25, align 8
  %104 = getelementptr inbounds void (%class.GrProcessorKeyBuilder*, i32, i32, i8*)*, void (%class.GrProcessorKeyBuilder*, i32, i32, i8*)** %103, i64 2
  %105 = load void (%class.GrProcessorKeyBuilder*, i32, i32, i8*)*, void (%class.GrProcessorKeyBuilder*, i32, i32, i8*)** %104, align 8
  call void %105(%class.GrProcessorKeyBuilder* nonnull %6, i32 32, i32 %102, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.36, i64 0, i64 0)) #13
  %106 = load i32, i32* %21, align 4
  %107 = icmp eq i32 %106, 0
  br i1 %107, label %122, label %108

108:                                              ; preds = %86
  %109 = load %class.SkTArray.502*, %class.SkTArray.502** %19, align 8
  call void @_ZN8SkTArrayIjLb1EE12checkReallocEiNS0_11ReallocTypeE(%class.SkTArray.502* %109, i32 1, i32 1) #13
  %110 = getelementptr inbounds %class.SkTArray.502, %class.SkTArray.502* %109, i64 0, i32 0
  %111 = load i32*, i32** %110, align 8
  %112 = getelementptr inbounds %class.SkTArray.502, %class.SkTArray.502* %109, i64 0, i32 1
  %113 = load i64, i64* %112, align 8
  %114 = lshr i64 %113, 1
  %115 = and i64 %114, 2147483647
  %116 = getelementptr inbounds i32, i32* %111, i64 %115
  %117 = add i64 %113, 2
  %118 = and i64 %117, 4294967294
  %119 = and i64 %113, -4294967295
  %120 = or i64 %118, %119
  store i64 %120, i64* %112, align 8
  %121 = load i32, i32* %20, align 8
  store i32 %121, i32* %116, align 4
  store i32 0, i32* %20, align 8
  store i32 0, i32* %21, align 4
  br label %122

122:                                              ; preds = %86, %108
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %87) #13
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %17) #13
  ret void
}

declare void @_ZN13GrProgramDesc5BuildEPS_RK13GrProgramInfoRK6GrCaps(%class.GrProgramDesc*, %class.GrProgramInfo* dereferenceable(128), %class.GrCaps* dereferenceable(232)) local_unnamed_addr #1

declare %class.GrVkRenderPass* @_ZN16GrVkRenderTarget19getSimpleRenderPassEbbN14GrVkRenderPass19SelfDependencyFlagsENS0_15LoadFromResolveE(%class.GrVkRenderTarget*, i1 zeroext, i1 zeroext, i32, i32) local_unnamed_addr #1

declare void @_ZNK14GrVkRenderPass6genKeyEP21GrProcessorKeyBuilder(%class.GrVkRenderPass*, %class.GrProcessorKeyBuilder*) local_unnamed_addr #1

declare void @_ZN16GrVkRenderTarget32ReconstructAttachmentsDescriptorERK8GrVkCapsRK13GrProgramInfoPN14GrVkRenderPass21AttachmentsDescriptorEPNS6_15AttachmentFlagsE(%class.GrVkCaps* dereferenceable(1344), %class.GrProgramInfo* dereferenceable(128), %"struct.GrVkRenderPass::AttachmentsDescriptor"*, i32*) local_unnamed_addr #1

declare void @_ZN14GrVkRenderPass6GenKeyEP21GrProcessorKeyBuilderNS_15AttachmentFlagsERKNS_21AttachmentsDescriptorENS_19SelfDependencyFlagsENS_15LoadFromResolveEm(%class.GrProcessorKeyBuilder*, i32, %"struct.GrVkRenderPass::AttachmentsDescriptor"* dereferenceable(52), i32, i32, i64) local_unnamed_addr #1

declare void @_ZNK13GrProgramInfo20nonGLStencilSettingsEv(%class.GrStencilSettings* sret, %class.GrProgramInfo*) local_unnamed_addr #1

declare void @_ZNK17GrStencilSettings6genKeyEP21GrProcessorKeyBuilderb(%class.GrStencilSettings*, %class.GrProcessorKeyBuilder*, i1 zeroext) local_unnamed_addr #1

declare void @_ZNK10GrPipeline6genKeyEP21GrProcessorKeyBuilderRK6GrCaps(%class.GrPipeline*, %class.GrProcessorKeyBuilder*, %class.GrCaps* dereferenceable(232)) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN21GrProcessorKeyBuilderD2Ev(%class.GrProcessorKeyBuilder*) unnamed_addr #0 comdat align 2 {
  %2 = getelementptr inbounds %class.GrProcessorKeyBuilder, %class.GrProcessorKeyBuilder* %0, i64 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [6 x i8*] }, { [6 x i8*] }* @_ZTV21GrProcessorKeyBuilder, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %2, align 8
  ret void
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden i32 @_ZNK8GrVkCaps33getExtraSurfaceFlagsForDeferredRTEv(%class.GrVkCaps* nocapture readnone) unnamed_addr #3 align 2 {
  ret i32 16
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden i32 @_ZNK8GrVkCaps25getPushConstantStageFlagsEv(%class.GrVkCaps* nocapture readonly) local_unnamed_addr #9 align 2 {
  %2 = getelementptr inbounds %class.GrVkCaps, %class.GrVkCaps* %0, i64 0, i32 0, i32 2, i32 0
  %3 = load %class.GrShaderCaps*, %class.GrShaderCaps** %2, align 8
  %4 = getelementptr inbounds %class.GrShaderCaps, %class.GrShaderCaps* %3, i64 0, i32 2
  %5 = bitcast i56* %4 to i64*
  %6 = load i64, i64* %5, align 8
  %7 = and i64 %6, 2
  %8 = icmp eq i64 %7, 0
  %9 = select i1 %8, i32 17, i32 25
  ret i32 %9
}

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZN8GrVkCapsD2Ev(%class.GrVkCaps*) unnamed_addr #7 comdat align 2 {
  %2 = getelementptr inbounds %class.GrVkCaps, %class.GrVkCaps* %0, i64 0, i32 0, i32 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [32 x i8*] }, { [32 x i8*] }* @_ZTV8GrVkCaps, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %2, align 8
  %3 = getelementptr inbounds %class.GrVkCaps, %class.GrVkCaps* %0, i64 0, i32 5, i32 0, i32 0, i64 56
  %4 = bitcast i8* %3 to i64*
  %5 = load i64, i64* %4, align 8
  %6 = and i64 %5, 1
  %7 = icmp eq i64 %6, 0
  br i1 %7, label %12, label %8

8:                                                ; preds = %1
  %9 = getelementptr inbounds %class.GrVkCaps, %class.GrVkCaps* %0, i64 0, i32 5, i32 0, i32 0, i64 48
  %10 = bitcast i8* %9 to i8**
  %11 = load i8*, i8** %10, align 8
  tail call void @_Z7sk_freePv(i8* %11) #13
  br label %12

12:                                               ; preds = %1, %8
  %13 = getelementptr inbounds %class.GrVkCaps, %class.GrVkCaps* %0, i64 0, i32 2, i64 0
  %14 = getelementptr inbounds %class.GrVkCaps, %class.GrVkCaps* %0, i64 0, i32 2, i64 22
  br label %15

15:                                               ; preds = %23, %12
  %16 = phi %"struct.GrVkCaps::FormatInfo"* [ %14, %12 ], [ %17, %23 ]
  %17 = getelementptr inbounds %"struct.GrVkCaps::FormatInfo", %"struct.GrVkCaps::FormatInfo"* %16, i64 -1
  %18 = getelementptr inbounds %"struct.GrVkCaps::FormatInfo", %"struct.GrVkCaps::FormatInfo"* %16, i64 -1, i32 4, i32 0, i32 0, i32 0
  %19 = load %"struct.GrVkCaps::ColorTypeInfo"*, %"struct.GrVkCaps::ColorTypeInfo"** %18, align 8
  store %"struct.GrVkCaps::ColorTypeInfo"* null, %"struct.GrVkCaps::ColorTypeInfo"** %18, align 8
  %20 = icmp eq %"struct.GrVkCaps::ColorTypeInfo"* %19, null
  br i1 %20, label %23, label %21

21:                                               ; preds = %15
  %22 = bitcast %"struct.GrVkCaps::ColorTypeInfo"* %19 to i8*
  tail call void @_ZdaPv(i8* %22) #14
  br label %23

23:                                               ; preds = %15, %21
  %24 = getelementptr inbounds %"struct.GrVkCaps::FormatInfo", %"struct.GrVkCaps::FormatInfo"* %16, i64 -1, i32 3
  %25 = bitcast %class.SkTDArray* %24 to i8**
  %26 = load i8*, i8** %25, align 8
  tail call void @_Z7sk_freePv(i8* %26) #13
  %27 = icmp eq %"struct.GrVkCaps::FormatInfo"* %17, %13
  br i1 %27, label %28, label %15

28:                                               ; preds = %23
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [32 x i8*] }, { [32 x i8*] }* @_ZTV6GrCaps, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %2, align 8
  %29 = getelementptr inbounds %class.GrVkCaps, %class.GrVkCaps* %0, i64 0, i32 0, i32 19
  tail call void @_ZN22GrDriverBugWorkaroundsD1Ev(%class.GrDriverBugWorkarounds* %29) #13
  %30 = getelementptr inbounds %class.GrVkCaps, %class.GrVkCaps* %0, i64 0, i32 0, i32 2, i32 0
  %31 = load %class.GrShaderCaps*, %class.GrShaderCaps** %30, align 8
  %32 = icmp eq %class.GrShaderCaps* %31, null
  br i1 %32, label %43, label %33

33:                                               ; preds = %28
  %34 = getelementptr inbounds %class.GrShaderCaps, %class.GrShaderCaps* %31, i64 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0
  %35 = atomicrmw add i32* %34, i32 -1 acq_rel
  %36 = icmp eq i32 %35, 1
  br i1 %36, label %37, label %43

37:                                               ; preds = %33
  %38 = bitcast %class.GrShaderCaps* %31 to %class.SkRefCntBase*
  %39 = bitcast %class.GrShaderCaps* %31 to void (%class.SkRefCntBase*)***
  %40 = load void (%class.SkRefCntBase*)**, void (%class.SkRefCntBase*)*** %39, align 8
  %41 = getelementptr inbounds void (%class.SkRefCntBase*)*, void (%class.SkRefCntBase*)** %40, i64 2
  %42 = load void (%class.SkRefCntBase*)*, void (%class.SkRefCntBase*)** %41, align 8
  tail call void %42(%class.SkRefCntBase* nonnull %38) #13
  br label %43

43:                                               ; preds = %28, %33, %37
  ret void
}

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZN8GrVkCapsD0Ev(%class.GrVkCaps*) unnamed_addr #7 comdat align 2 {
  %2 = getelementptr inbounds %class.GrVkCaps, %class.GrVkCaps* %0, i64 0, i32 0, i32 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [32 x i8*] }, { [32 x i8*] }* @_ZTV8GrVkCaps, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %2, align 8
  %3 = getelementptr inbounds %class.GrVkCaps, %class.GrVkCaps* %0, i64 0, i32 5, i32 0, i32 0, i64 56
  %4 = bitcast i8* %3 to i64*
  %5 = load i64, i64* %4, align 8
  %6 = and i64 %5, 1
  %7 = icmp eq i64 %6, 0
  br i1 %7, label %12, label %8

8:                                                ; preds = %1
  %9 = getelementptr inbounds %class.GrVkCaps, %class.GrVkCaps* %0, i64 0, i32 5, i32 0, i32 0, i64 48
  %10 = bitcast i8* %9 to i8**
  %11 = load i8*, i8** %10, align 8
  tail call void @_Z7sk_freePv(i8* %11) #13
  br label %12

12:                                               ; preds = %8, %1
  %13 = getelementptr inbounds %class.GrVkCaps, %class.GrVkCaps* %0, i64 0, i32 2, i64 0
  %14 = getelementptr inbounds %class.GrVkCaps, %class.GrVkCaps* %0, i64 0, i32 2, i64 22
  br label %15

15:                                               ; preds = %23, %12
  %16 = phi %"struct.GrVkCaps::FormatInfo"* [ %14, %12 ], [ %17, %23 ]
  %17 = getelementptr inbounds %"struct.GrVkCaps::FormatInfo", %"struct.GrVkCaps::FormatInfo"* %16, i64 -1
  %18 = getelementptr inbounds %"struct.GrVkCaps::FormatInfo", %"struct.GrVkCaps::FormatInfo"* %16, i64 -1, i32 4, i32 0, i32 0, i32 0
  %19 = load %"struct.GrVkCaps::ColorTypeInfo"*, %"struct.GrVkCaps::ColorTypeInfo"** %18, align 8
  store %"struct.GrVkCaps::ColorTypeInfo"* null, %"struct.GrVkCaps::ColorTypeInfo"** %18, align 8
  %20 = icmp eq %"struct.GrVkCaps::ColorTypeInfo"* %19, null
  br i1 %20, label %23, label %21

21:                                               ; preds = %15
  %22 = bitcast %"struct.GrVkCaps::ColorTypeInfo"* %19 to i8*
  tail call void @_ZdaPv(i8* %22) #14
  br label %23

23:                                               ; preds = %21, %15
  %24 = getelementptr inbounds %"struct.GrVkCaps::FormatInfo", %"struct.GrVkCaps::FormatInfo"* %16, i64 -1, i32 3
  %25 = bitcast %class.SkTDArray* %24 to i8**
  %26 = load i8*, i8** %25, align 8
  tail call void @_Z7sk_freePv(i8* %26) #13
  %27 = icmp eq %"struct.GrVkCaps::FormatInfo"* %17, %13
  br i1 %27, label %28, label %15

28:                                               ; preds = %23
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [32 x i8*] }, { [32 x i8*] }* @_ZTV6GrCaps, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %2, align 8
  %29 = getelementptr inbounds %class.GrVkCaps, %class.GrVkCaps* %0, i64 0, i32 0, i32 19
  tail call void @_ZN22GrDriverBugWorkaroundsD1Ev(%class.GrDriverBugWorkarounds* %29) #13
  %30 = getelementptr inbounds %class.GrVkCaps, %class.GrVkCaps* %0, i64 0, i32 0, i32 2, i32 0
  %31 = load %class.GrShaderCaps*, %class.GrShaderCaps** %30, align 8
  %32 = icmp eq %class.GrShaderCaps* %31, null
  br i1 %32, label %43, label %33

33:                                               ; preds = %28
  %34 = getelementptr inbounds %class.GrShaderCaps, %class.GrShaderCaps* %31, i64 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0
  %35 = atomicrmw add i32* %34, i32 -1 acq_rel
  %36 = icmp eq i32 %35, 1
  br i1 %36, label %37, label %43

37:                                               ; preds = %33
  %38 = bitcast %class.GrShaderCaps* %31 to %class.SkRefCntBase*
  %39 = bitcast %class.GrShaderCaps* %31 to void (%class.SkRefCntBase*)***
  %40 = load void (%class.SkRefCntBase*)**, void (%class.SkRefCntBase*)*** %39, align 8
  %41 = getelementptr inbounds void (%class.SkRefCntBase*)*, void (%class.SkRefCntBase*)** %40, i64 2
  %42 = load void (%class.SkRefCntBase*)*, void (%class.SkRefCntBase*)** %41, align 8
  tail call void %42(%class.SkRefCntBase* nonnull %38) #13
  br label %43

43:                                               ; preds = %28, %33, %37
  %44 = bitcast %class.GrVkCaps* %0 to i8*
  tail call void @_ZdlPv(i8* %44) #14
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNK12SkRefCntBase16internal_disposeEv(%class.SkRefCntBase*) unnamed_addr #0 comdat align 2 {
  %2 = icmp eq %class.SkRefCntBase* %0, null
  br i1 %2, label %8, label %3

3:                                                ; preds = %1
  %4 = bitcast %class.SkRefCntBase* %0 to void (%class.SkRefCntBase*)***
  %5 = load void (%class.SkRefCntBase*)**, void (%class.SkRefCntBase*)*** %4, align 8
  %6 = getelementptr inbounds void (%class.SkRefCntBase*)*, void (%class.SkRefCntBase*)** %5, i64 1
  %7 = load void (%class.SkRefCntBase*)*, void (%class.SkRefCntBase*)** %6, align 8
  tail call void %7(%class.SkRefCntBase* nonnull %0) #13
  br label %8

8:                                                ; preds = %3, %1
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZNK8GrVkCaps16isFormatCopyableERK15GrBackendFormat(%class.GrVkCaps*, %class.GrBackendFormat* dereferenceable(72)) unnamed_addr #0 comdat align 2 {
  ret i1 true
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden i16 @_ZNK6GrCaps22getDstCopyRestrictionsEPK19GrRenderTargetProxy11GrColorType(%class.GrCaps*, %class.GrRenderTargetProxy*, i32) unnamed_addr #0 comdat align 2 {
  ret i16 0
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZNK6GrCaps21onSupportsDynamicMSAAEPK19GrRenderTargetProxy(%class.GrCaps*, %class.GrRenderTargetProxy*) unnamed_addr #0 comdat align 2 {
  ret i1 false
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN6GrCaps23onApplyOptionsOverridesERK16GrContextOptions(%class.GrCaps*, %struct.GrContextOptions* dereferenceable(240)) unnamed_addr #0 comdat align 2 {
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNK6GrCaps10onDumpJSONEP12SkJSONWriter(%class.GrCaps*, %class.SkJSONWriter*) unnamed_addr #0 comdat align 2 {
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZNK6GrCaps34onIsWindowRectanglesSupportedForRTERK21GrBackendRenderTarget(%class.GrCaps*, %class.GrBackendRenderTarget* dereferenceable(176)) unnamed_addr #0 comdat align 2 {
  ret i1 true
}

; Function Attrs: noreturn
declare void @_Z16SkAbort_FileLinePKciS0_z(i8*, i32, i8*, ...) local_unnamed_addr #10

declare void @_Z7sk_freePv(i8*) local_unnamed_addr #1

declare void @_ZN15GrBackendFormatC1E8VkFormatRK23GrVkYcbcrConversionInfo(%class.GrBackendFormat*, i32, %struct.GrVkYcbcrConversionInfo* dereferenceable(48)) unnamed_addr #1

declare i8* @_Z15sk_malloc_throwmm(i64, i64) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN21GrProcessorKeyBuilderD0Ev(%class.GrProcessorKeyBuilder*) unnamed_addr #0 comdat align 2 {
  %2 = bitcast %class.GrProcessorKeyBuilder* %0 to i8*
  tail call void @_ZdlPv(i8* %2) #14
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN21GrProcessorKeyBuilder7addBitsEjjPKc(%class.GrProcessorKeyBuilder*, i32, i32, i8*) unnamed_addr #0 comdat align 2 {
  %5 = getelementptr inbounds %class.GrProcessorKeyBuilder, %class.GrProcessorKeyBuilder* %0, i64 0, i32 3
  %6 = load i32, i32* %5, align 4
  %7 = shl i32 %2, %6
  %8 = getelementptr inbounds %class.GrProcessorKeyBuilder, %class.GrProcessorKeyBuilder* %0, i64 0, i32 2
  %9 = load i32, i32* %8, align 8
  %10 = or i32 %9, %7
  store i32 %10, i32* %8, align 8
  %11 = add i32 %6, %1
  store i32 %11, i32* %5, align 4
  %12 = icmp ugt i32 %11, 31
  br i1 %12, label %13, label %34

13:                                               ; preds = %4
  %14 = getelementptr inbounds %class.GrProcessorKeyBuilder, %class.GrProcessorKeyBuilder* %0, i64 0, i32 1
  %15 = load %class.SkTArray.502*, %class.SkTArray.502** %14, align 8
  tail call void @_ZN8SkTArrayIjLb1EE12checkReallocEiNS0_11ReallocTypeE(%class.SkTArray.502* %15, i32 1, i32 1) #13
  %16 = getelementptr inbounds %class.SkTArray.502, %class.SkTArray.502* %15, i64 0, i32 0
  %17 = load i32*, i32** %16, align 8
  %18 = getelementptr inbounds %class.SkTArray.502, %class.SkTArray.502* %15, i64 0, i32 1
  %19 = load i64, i64* %18, align 8
  %20 = lshr i64 %19, 1
  %21 = and i64 %20, 2147483647
  %22 = getelementptr inbounds i32, i32* %17, i64 %21
  %23 = add i64 %19, 2
  %24 = and i64 %23, 4294967294
  %25 = and i64 %19, -4294967295
  %26 = or i64 %24, %25
  store i64 %26, i64* %18, align 8
  %27 = load i32, i32* %8, align 4
  store i32 %27, i32* %22, align 4
  %28 = load i32, i32* %5, align 4
  %29 = add i32 %28, -32
  %30 = icmp eq i32 %29, 0
  %31 = sub i32 %1, %29
  %32 = lshr i32 %2, %31
  %33 = select i1 %30, i32 0, i32 %32
  store i32 %33, i32* %8, align 8
  store i32 %29, i32* %5, align 4
  br label %34

34:                                               ; preds = %13, %4
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN21GrProcessorKeyBuilder13appendCommentEPKc(%class.GrProcessorKeyBuilder*, i8*) unnamed_addr #0 comdat align 2 {
  ret void
}

; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(i8*) local_unnamed_addr #11

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN8SkTArrayIjLb1EE12checkReallocEiNS0_11ReallocTypeE(%class.SkTArray.502*, i32, i32) local_unnamed_addr #0 comdat align 2 {
  %4 = getelementptr inbounds %class.SkTArray.502, %class.SkTArray.502* %0, i64 0, i32 1
  %5 = load i64, i64* %4, align 8
  %6 = lshr i64 %5, 1
  %7 = trunc i64 %6 to i32
  %8 = and i32 %7, 2147483647
  %9 = add nsw i32 %8, %1
  %10 = sext i32 %9 to i64
  %11 = lshr i64 %5, 33
  %12 = icmp slt i64 %11, %10
  %13 = mul nsw i64 %10, 3
  %14 = icmp sle i64 %11, %13
  %15 = and i64 %5, 1
  %16 = icmp eq i64 %15, 0
  %17 = or i1 %16, %14
  br i1 %17, label %21, label %18

18:                                               ; preds = %3
  %19 = and i64 %5, 4294967296
  %20 = icmp eq i64 %19, 0
  br label %21

21:                                               ; preds = %3, %18
  %22 = phi i1 [ false, %3 ], [ %20, %18 ]
  %23 = or i1 %12, %22
  br i1 %23, label %24, label %65

24:                                               ; preds = %21
  %25 = icmp eq i32 %2, 0
  br i1 %25, label %32, label %26

26:                                               ; preds = %24
  %27 = add nsw i64 %10, 1
  %28 = ashr i64 %27, 1
  %29 = add nsw i64 %10, 7
  %30 = add nsw i64 %29, %28
  %31 = and i64 %30, -8
  br label %32

32:                                               ; preds = %24, %26
  %33 = phi i64 [ %31, %26 ], [ %10, %24 ]
  %34 = icmp eq i64 %33, %11
  br i1 %34, label %65, label %35

35:                                               ; preds = %32
  %36 = icmp slt i64 %33, 2147483647
  %37 = select i1 %36, i64 %33, i64 2147483647
  %38 = icmp sgt i64 %37, -2147483647
  %39 = select i1 %38, i64 %37, i64 -2147483647
  %40 = shl i64 %39, 33
  %41 = and i64 %5, 8589934591
  %42 = or i64 %40, %41
  store i64 %42, i64* %4, align 8
  %43 = and i64 %39, 2147483647
  %44 = tail call i8* @_Z15sk_malloc_throwmm(i64 %43, i64 4) #13
  %45 = load i64, i64* %4, align 8
  %46 = shl i64 %45, 1
  %47 = and i64 %46, 8589934588
  %48 = icmp eq i64 %47, 0
  br i1 %48, label %53, label %49

49:                                               ; preds = %35
  %50 = bitcast %class.SkTArray.502* %0 to i8**
  %51 = load i8*, i8** %50, align 8
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %44, i8* align 1 %51, i64 %47, i1 false) #13
  %52 = load i64, i64* %4, align 8
  br label %53

53:                                               ; preds = %35, %49
  %54 = phi i64 [ %45, %35 ], [ %52, %49 ]
  %55 = and i64 %54, 1
  %56 = icmp eq i64 %55, 0
  %57 = bitcast %class.SkTArray.502* %0 to i8**
  br i1 %56, label %61, label %58

58:                                               ; preds = %53
  %59 = load i8*, i8** %57, align 8
  tail call void @_Z7sk_freePv(i8* %59) #13
  %60 = load i64, i64* %4, align 8
  br label %61

61:                                               ; preds = %53, %58
  %62 = phi i64 [ %60, %58 ], [ %54, %53 ]
  store i8* %44, i8** %57, align 8
  %63 = and i64 %62, -4294967298
  %64 = or i64 %63, 1
  store i64 %64, i64* %4, align 8
  br label %65

65:                                               ; preds = %61, %32, %21
  ret void
}

; Function Attrs: nounwind
declare void @_ZN22GrDriverBugWorkaroundsD1Ev(%class.GrDriverBugWorkarounds*) unnamed_addr #12

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZN6GrCapsD2Ev(%class.GrCaps*) unnamed_addr #7 comdat align 2 {
  %2 = getelementptr inbounds %class.GrCaps, %class.GrCaps* %0, i64 0, i32 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [32 x i8*] }, { [32 x i8*] }* @_ZTV6GrCaps, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %2, align 8
  %3 = getelementptr inbounds %class.GrCaps, %class.GrCaps* %0, i64 0, i32 19
  tail call void @_ZN22GrDriverBugWorkaroundsD1Ev(%class.GrDriverBugWorkarounds* %3) #13
  %4 = getelementptr inbounds %class.GrCaps, %class.GrCaps* %0, i64 0, i32 2, i32 0
  %5 = load %class.GrShaderCaps*, %class.GrShaderCaps** %4, align 8
  %6 = icmp eq %class.GrShaderCaps* %5, null
  br i1 %6, label %17, label %7

7:                                                ; preds = %1
  %8 = getelementptr inbounds %class.GrShaderCaps, %class.GrShaderCaps* %5, i64 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0
  %9 = atomicrmw add i32* %8, i32 -1 acq_rel
  %10 = icmp eq i32 %9, 1
  br i1 %10, label %11, label %17

11:                                               ; preds = %7
  %12 = bitcast %class.GrShaderCaps* %5 to %class.SkRefCntBase*
  %13 = bitcast %class.GrShaderCaps* %5 to void (%class.SkRefCntBase*)***
  %14 = load void (%class.SkRefCntBase*)**, void (%class.SkRefCntBase*)*** %13, align 8
  %15 = getelementptr inbounds void (%class.SkRefCntBase*)*, void (%class.SkRefCntBase*)** %14, i64 2
  %16 = load void (%class.SkRefCntBase*)*, void (%class.SkRefCntBase*)** %15, align 8
  tail call void %16(%class.SkRefCntBase* nonnull %12) #13
  br label %17

17:                                               ; preds = %1, %7, %11
  ret void
}

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZN6GrCapsD0Ev(%class.GrCaps*) unnamed_addr #7 comdat align 2 {
  tail call void @llvm.trap() #15
  unreachable
}

declare void @__cxa_pure_virtual() unnamed_addr

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNK6GrCaps18addExtraSamplerKeyEP21GrProcessorKeyBuilder14GrSamplerStateRK15GrBackendFormat(%class.GrCaps*, %class.GrProcessorKeyBuilder*, i64, i32, %class.GrBackendFormat* dereferenceable(72)) unnamed_addr #0 comdat align 2 {
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden i32 @_ZNK6GrCaps33getExtraSurfaceFlagsForDeferredRTEv(%class.GrCaps*) unnamed_addr #0 comdat align 2 {
  ret i32 0
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden i32 @_ZNK6GrCaps26onGetDstSampleTypeForProxyEPK19GrRenderTargetProxy(%class.GrCaps*, %class.GrRenderTargetProxy*) unnamed_addr #0 comdat align 2 {
  ret i32 1
}

; Function Attrs: nobuiltin nounwind
declare void @_ZdaPv(i8*) local_unnamed_addr #11

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN8SkTArrayI23GrVkYcbcrConversionInfoLb0EE12checkReallocEiNS1_11ReallocTypeE(%class.SkTArray*, i32, i32) local_unnamed_addr #0 comdat align 2 {
  %4 = getelementptr inbounds %class.SkTArray, %class.SkTArray* %0, i64 0, i32 1
  %5 = load i64, i64* %4, align 8
  %6 = lshr i64 %5, 1
  %7 = trunc i64 %6 to i32
  %8 = and i32 %7, 2147483647
  %9 = add nsw i32 %8, %1
  %10 = sext i32 %9 to i64
  %11 = lshr i64 %5, 33
  %12 = icmp slt i64 %11, %10
  %13 = mul nsw i64 %10, 3
  %14 = icmp sle i64 %11, %13
  %15 = and i64 %5, 1
  %16 = icmp eq i64 %15, 0
  %17 = or i1 %16, %14
  br i1 %17, label %21, label %18

18:                                               ; preds = %3
  %19 = and i64 %5, 4294967296
  %20 = icmp eq i64 %19, 0
  br label %21

21:                                               ; preds = %3, %18
  %22 = phi i1 [ false, %3 ], [ %20, %18 ]
  %23 = or i1 %12, %22
  br i1 %23, label %24, label %74

24:                                               ; preds = %21
  %25 = icmp eq i32 %2, 0
  br i1 %25, label %32, label %26

26:                                               ; preds = %24
  %27 = add nsw i64 %10, 1
  %28 = ashr i64 %27, 1
  %29 = add nsw i64 %10, 7
  %30 = add nsw i64 %29, %28
  %31 = and i64 %30, -8
  br label %32

32:                                               ; preds = %24, %26
  %33 = phi i64 [ %31, %26 ], [ %10, %24 ]
  %34 = icmp eq i64 %33, %11
  br i1 %34, label %74, label %35

35:                                               ; preds = %32
  %36 = icmp slt i64 %33, 2147483647
  %37 = select i1 %36, i64 %33, i64 2147483647
  %38 = icmp sgt i64 %37, -2147483647
  %39 = select i1 %38, i64 %37, i64 -2147483647
  %40 = shl i64 %39, 33
  %41 = and i64 %5, 8589934591
  %42 = or i64 %40, %41
  store i64 %42, i64* %4, align 8
  %43 = and i64 %39, 2147483647
  %44 = tail call i8* @_Z15sk_malloc_throwmm(i64 %43, i64 48) #13
  %45 = load i64, i64* %4, align 8
  %46 = and i64 %45, 4294967294
  %47 = icmp eq i64 %46, 0
  br i1 %47, label %62, label %48

48:                                               ; preds = %35
  %49 = getelementptr inbounds %class.SkTArray, %class.SkTArray* %0, i64 0, i32 0
  br label %50

50:                                               ; preds = %50, %48
  %51 = phi i64 [ 0, %48 ], [ %57, %50 ]
  %52 = mul nuw nsw i64 %51, 48
  %53 = getelementptr inbounds i8, i8* %44, i64 %52
  %54 = load %struct.GrVkYcbcrConversionInfo*, %struct.GrVkYcbcrConversionInfo** %49, align 8
  %55 = getelementptr inbounds %struct.GrVkYcbcrConversionInfo, %struct.GrVkYcbcrConversionInfo* %54, i64 %51
  %56 = bitcast %struct.GrVkYcbcrConversionInfo* %55 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %53, i8* align 8 %56, i64 48, i1 false) #13
  %57 = add nuw nsw i64 %51, 1
  %58 = load i64, i64* %4, align 8
  %59 = lshr i64 %58, 1
  %60 = and i64 %59, 2147483647
  %61 = icmp ult i64 %57, %60
  br i1 %61, label %50, label %62

62:                                               ; preds = %50, %35
  %63 = phi i64 [ %45, %35 ], [ %58, %50 ]
  %64 = and i64 %63, 1
  %65 = icmp eq i64 %64, 0
  %66 = bitcast %class.SkTArray* %0 to i8**
  br i1 %65, label %70, label %67

67:                                               ; preds = %62
  %68 = load i8*, i8** %66, align 8
  tail call void @_Z7sk_freePv(i8* %68) #13
  %69 = load i64, i64* %4, align 8
  br label %70

70:                                               ; preds = %62, %67
  %71 = phi i64 [ %69, %67 ], [ %63, %62 ]
  store i8* %44, i8** %66, align 8
  %72 = and i64 %71, -4294967298
  %73 = or i64 %72, 1
  store i64 %73, i64* %4, align 8
  br label %74

74:                                               ; preds = %70, %32, %21
  ret void
}

; Function Attrs: nobuiltin nofree
declare noalias nonnull i8* @_Znam(i64) local_unnamed_addr #2

declare i8* @_Z16sk_realloc_throwPvm(i8*, i64) local_unnamed_addr #1

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nobuiltin nofree "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { norecurse nounwind readnone ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { argmemonly nounwind }
attributes #5 = { nofree nounwind readonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nofree nounwind }
attributes #7 = { inlinehint nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #8 = { cold noreturn nounwind }
attributes #9 = { norecurse nounwind readonly ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #10 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #11 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #12 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #13 = { nounwind }
attributes #14 = { builtin nounwind }
attributes #15 = { noreturn nounwind }
attributes #16 = { nounwind readonly }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{i8 0, i8 2}
!3 = !{!"branch_weights", i32 1, i32 1048575}
!4 = !{!5}
!5 = distinct !{!5, !6, !"_ZN15GrBackendFormat6MakeVkE8VkFormat: argument 0"}
!6 = distinct !{!6, !"_ZN15GrBackendFormat6MakeVkE8VkFormat"}
!7 = !{!8}
!8 = distinct !{!8, !9, !"_ZN15GrBackendFormat6MakeVkE8VkFormat: argument 0"}
!9 = distinct !{!9, !"_ZN15GrBackendFormat6MakeVkE8VkFormat"}
!10 = !{!11}
!11 = distinct !{!11, !12, !"_ZN15GrBackendFormat6MakeVkE8VkFormat: argument 0"}
!12 = distinct !{!12, !"_ZN15GrBackendFormat6MakeVkE8VkFormat"}
!13 = !{!14}
!14 = distinct !{!14, !15, !"_ZN15GrBackendFormat6MakeVkE8VkFormat: argument 0"}
!15 = distinct !{!15, !"_ZN15GrBackendFormat6MakeVkE8VkFormat"}
