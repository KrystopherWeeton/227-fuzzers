; ModuleID = '../../third_party/libjpeg_turbo/jdcoefct.c'
source_filename = "../../third_party/libjpeg_turbo/jdcoefct.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.jpeg_decompress_struct = type { %struct.jpeg_error_mgr*, %struct.jpeg_memory_mgr*, %struct.jpeg_progress_mgr*, i8*, i32, i32, %struct.jpeg_source_mgr*, i32, i32, i32, i32, i32, i32, i32, double, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i8**, i32, i32, i32, i32, i32, [64 x i32]*, [4 x %struct.JQUANT_TBL*], [4 x %struct.JHUFF_TBL*], [4 x %struct.JHUFF_TBL*], i32, %struct.jpeg_component_info*, i32, i32, [16 x i8], [16 x i8], [16 x i8], i32, i32, i8, i8, i8, i16, i16, i32, i8, i32, %struct.jpeg_marker_struct*, i32, i32, i32, i32, i8*, i32, [4 x %struct.jpeg_component_info*], i32, i32, i32, [10 x i32], i32, i32, i32, i32, i32, %struct.jpeg_decomp_master*, %struct.jpeg_d_main_controller*, %struct.jpeg_d_coef_controller*, %struct.jpeg_d_post_controller*, %struct.jpeg_input_controller*, %struct.jpeg_marker_reader*, %struct.jpeg_entropy_decoder*, %struct.jpeg_inverse_dct*, %struct.jpeg_upsampler*, %struct.jpeg_color_deconverter*, %struct.jpeg_color_quantizer* }
%struct.jpeg_error_mgr = type { void (%struct.jpeg_common_struct*)*, void (%struct.jpeg_common_struct*, i32)*, void (%struct.jpeg_common_struct*)*, void (%struct.jpeg_common_struct*, i8*)*, void (%struct.jpeg_common_struct*)*, i32, %union.anon, i32, i64, i8**, i32, i8**, i32, i32 }
%struct.jpeg_common_struct = type { %struct.jpeg_error_mgr*, %struct.jpeg_memory_mgr*, %struct.jpeg_progress_mgr*, i8*, i32, i32 }
%union.anon = type { [8 x i32], [48 x i8] }
%struct.jpeg_memory_mgr = type { i8* (%struct.jpeg_common_struct*, i32, i64)*, i8* (%struct.jpeg_common_struct*, i32, i64)*, i8** (%struct.jpeg_common_struct*, i32, i32, i32)*, [64 x i16]** (%struct.jpeg_common_struct*, i32, i32, i32)*, %struct.jvirt_sarray_control* (%struct.jpeg_common_struct*, i32, i32, i32, i32, i32)*, %struct.jvirt_barray_control* (%struct.jpeg_common_struct*, i32, i32, i32, i32, i32)*, {}*, i8** (%struct.jpeg_common_struct*, %struct.jvirt_sarray_control*, i32, i32, i32)*, [64 x i16]** (%struct.jpeg_common_struct*, %struct.jvirt_barray_control*, i32, i32, i32)*, void (%struct.jpeg_common_struct*, i32)*, {}*, i64, i64 }
%struct.jvirt_sarray_control = type opaque
%struct.jvirt_barray_control = type opaque
%struct.jpeg_progress_mgr = type { {}*, i64, i64, i32, i32 }
%struct.jpeg_source_mgr = type { i8*, i64, void (%struct.jpeg_decompress_struct*)*, i32 (%struct.jpeg_decompress_struct*)*, void (%struct.jpeg_decompress_struct*, i64)*, i32 (%struct.jpeg_decompress_struct*, i32)*, void (%struct.jpeg_decompress_struct*)* }
%struct.JQUANT_TBL = type { [64 x i16], i32 }
%struct.JHUFF_TBL = type { [17 x i8], [256 x i8], i32 }
%struct.jpeg_component_info = type { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, %struct.JQUANT_TBL*, i8* }
%struct.jpeg_marker_struct = type { %struct.jpeg_marker_struct*, i8, i32, i32, i8* }
%struct.jpeg_decomp_master = type { void (%struct.jpeg_decompress_struct*)*, void (%struct.jpeg_decompress_struct*)*, i32, i32, i32, [10 x i32], [10 x i32], i32, i32 }
%struct.jpeg_d_main_controller = type { void (%struct.jpeg_decompress_struct*, i32)*, void (%struct.jpeg_decompress_struct*, i8**, i32*, i32)* }
%struct.jpeg_d_coef_controller = type { void (%struct.jpeg_decompress_struct*)*, i32 (%struct.jpeg_decompress_struct*)*, void (%struct.jpeg_decompress_struct*)*, i32 (%struct.jpeg_decompress_struct*, i8***)*, %struct.jvirt_barray_control** }
%struct.jpeg_d_post_controller = type { void (%struct.jpeg_decompress_struct*, i32)*, void (%struct.jpeg_decompress_struct*, i8***, i32*, i32, i8**, i32*, i32)* }
%struct.jpeg_input_controller = type { i32 (%struct.jpeg_decompress_struct*)*, void (%struct.jpeg_decompress_struct*)*, void (%struct.jpeg_decompress_struct*)*, void (%struct.jpeg_decompress_struct*)*, i32, i32 }
%struct.jpeg_marker_reader = type { void (%struct.jpeg_decompress_struct*)*, i32 (%struct.jpeg_decompress_struct*)*, i32 (%struct.jpeg_decompress_struct*)*, i32, i32, i32, i32 }
%struct.jpeg_entropy_decoder = type { void (%struct.jpeg_decompress_struct*)*, i32 (%struct.jpeg_decompress_struct*, [64 x i16]**)*, i32 }
%struct.jpeg_inverse_dct = type { void (%struct.jpeg_decompress_struct*)*, [10 x void (%struct.jpeg_decompress_struct*, %struct.jpeg_component_info*, i16*, i8**, i32)*] }
%struct.jpeg_upsampler = type { void (%struct.jpeg_decompress_struct*)*, void (%struct.jpeg_decompress_struct*, i8***, i32*, i32, i8**, i32*, i32)*, i32 }
%struct.jpeg_color_deconverter = type { void (%struct.jpeg_decompress_struct*)*, void (%struct.jpeg_decompress_struct*, i8***, i32, i8**, i32)* }
%struct.jpeg_color_quantizer = type { {}*, void (%struct.jpeg_decompress_struct*, i8**, i8**, i32)*, void (%struct.jpeg_decompress_struct*)*, void (%struct.jpeg_decompress_struct*)* }
%struct.my_coef_controller = type { %struct.jpeg_d_coef_controller, i32, i32, i32, [10 x [64 x i16]*], i16*, [10 x %struct.jvirt_barray_control*], i32* }

; Function Attrs: nounwind ssp uwtable
define hidden void @jinit_d_coef_controller(%struct.jpeg_decompress_struct*, i32) local_unnamed_addr #0 {
  %3 = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %0, i64 0, i32 1
  %4 = load %struct.jpeg_memory_mgr*, %struct.jpeg_memory_mgr** %3, align 8
  %5 = getelementptr inbounds %struct.jpeg_memory_mgr, %struct.jpeg_memory_mgr* %4, i64 0, i32 0
  %6 = load i8* (%struct.jpeg_common_struct*, i32, i64)*, i8* (%struct.jpeg_common_struct*, i32, i64)** %5, align 8
  %7 = bitcast %struct.jpeg_decompress_struct* %0 to %struct.jpeg_common_struct*
  %8 = tail call i8* %6(%struct.jpeg_common_struct* %7, i32 1, i64 232) #5
  %9 = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %0, i64 0, i32 79
  %10 = bitcast %struct.jpeg_d_coef_controller** %9 to i8**
  store i8* %8, i8** %10, align 8
  %11 = bitcast i8* %8 to void (%struct.jpeg_decompress_struct*)**
  store void (%struct.jpeg_decompress_struct*)* @start_input_pass, void (%struct.jpeg_decompress_struct*)** %11, align 8
  %12 = getelementptr inbounds i8, i8* %8, i64 16
  %13 = bitcast i8* %12 to void (%struct.jpeg_decompress_struct*)**
  store void (%struct.jpeg_decompress_struct*)* @start_output_pass, void (%struct.jpeg_decompress_struct*)** %13, align 8
  %14 = getelementptr inbounds i8, i8* %8, i64 224
  %15 = bitcast i8* %14 to i32**
  store i32* null, i32** %15, align 8
  %16 = icmp eq i32 %1, 0
  br i1 %16, label %69, label %17

17:                                               ; preds = %2
  %18 = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %0, i64 0, i32 9
  %19 = load i32, i32* %18, align 8
  %20 = icmp sgt i32 %19, 0
  br i1 %20, label %21, label %61

21:                                               ; preds = %17
  %22 = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %0, i64 0, i32 44
  %23 = load %struct.jpeg_component_info*, %struct.jpeg_component_info** %22, align 8
  %24 = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %0, i64 0, i32 45
  %25 = getelementptr inbounds i8, i8* %8, i64 144
  %26 = bitcast i8* %25 to [10 x %struct.jvirt_barray_control*]*
  br label %27

27:                                               ; preds = %21, %27
  %28 = phi i64 [ 0, %21 ], [ %56, %27 ]
  %29 = phi %struct.jpeg_component_info* [ %23, %21 ], [ %57, %27 ]
  %30 = getelementptr inbounds %struct.jpeg_component_info, %struct.jpeg_component_info* %29, i64 0, i32 3
  %31 = load i32, i32* %30, align 4
  %32 = load i32, i32* %24, align 8
  %33 = icmp eq i32 %32, 0
  %34 = mul nsw i32 %31, 5
  %35 = select i1 %33, i32 %31, i32 %34
  %36 = load %struct.jpeg_memory_mgr*, %struct.jpeg_memory_mgr** %3, align 8
  %37 = getelementptr inbounds %struct.jpeg_memory_mgr, %struct.jpeg_memory_mgr* %36, i64 0, i32 5
  %38 = load %struct.jvirt_barray_control* (%struct.jpeg_common_struct*, i32, i32, i32, i32, i32)*, %struct.jvirt_barray_control* (%struct.jpeg_common_struct*, i32, i32, i32, i32, i32)** %37, align 8
  %39 = getelementptr inbounds %struct.jpeg_component_info, %struct.jpeg_component_info* %29, i64 0, i32 7
  %40 = load i32, i32* %39, align 4
  %41 = zext i32 %40 to i64
  %42 = getelementptr inbounds %struct.jpeg_component_info, %struct.jpeg_component_info* %29, i64 0, i32 2
  %43 = load i32, i32* %42, align 8
  %44 = sext i32 %43 to i64
  %45 = tail call i64 @jround_up(i64 %41, i64 %44) #5
  %46 = trunc i64 %45 to i32
  %47 = getelementptr inbounds %struct.jpeg_component_info, %struct.jpeg_component_info* %29, i64 0, i32 8
  %48 = load i32, i32* %47, align 8
  %49 = zext i32 %48 to i64
  %50 = load i32, i32* %30, align 4
  %51 = sext i32 %50 to i64
  %52 = tail call i64 @jround_up(i64 %49, i64 %51) #5
  %53 = trunc i64 %52 to i32
  %54 = tail call %struct.jvirt_barray_control* %38(%struct.jpeg_common_struct* %7, i32 1, i32 1, i32 %46, i32 %53, i32 %35) #5
  %55 = getelementptr inbounds [10 x %struct.jvirt_barray_control*], [10 x %struct.jvirt_barray_control*]* %26, i64 0, i64 %28
  store %struct.jvirt_barray_control* %54, %struct.jvirt_barray_control** %55, align 8
  %56 = add nuw nsw i64 %28, 1
  %57 = getelementptr inbounds %struct.jpeg_component_info, %struct.jpeg_component_info* %29, i64 1
  %58 = load i32, i32* %18, align 8
  %59 = sext i32 %58 to i64
  %60 = icmp slt i64 %56, %59
  br i1 %60, label %27, label %61

61:                                               ; preds = %27, %17
  %62 = getelementptr inbounds i8, i8* %8, i64 8
  %63 = bitcast i8* %62 to i32 (%struct.jpeg_decompress_struct*)**
  store i32 (%struct.jpeg_decompress_struct*)* @consume_data, i32 (%struct.jpeg_decompress_struct*)** %63, align 8
  %64 = getelementptr inbounds i8, i8* %8, i64 24
  %65 = bitcast i8* %64 to i32 (%struct.jpeg_decompress_struct*, i8***)**
  store i32 (%struct.jpeg_decompress_struct*, i8***)* @decompress_data, i32 (%struct.jpeg_decompress_struct*, i8***)** %65, align 8
  %66 = getelementptr inbounds i8, i8* %8, i64 144
  %67 = getelementptr inbounds i8, i8* %8, i64 32
  %68 = bitcast i8* %67 to i8**
  store i8* %66, i8** %68, align 8
  br label %99

69:                                               ; preds = %2
  %70 = load %struct.jpeg_memory_mgr*, %struct.jpeg_memory_mgr** %3, align 8
  %71 = getelementptr inbounds %struct.jpeg_memory_mgr, %struct.jpeg_memory_mgr* %70, i64 0, i32 1
  %72 = load i8* (%struct.jpeg_common_struct*, i32, i64)*, i8* (%struct.jpeg_common_struct*, i32, i64)** %71, align 8
  %73 = tail call i8* %72(%struct.jpeg_common_struct* %7, i32 1, i64 1280) #5
  %74 = getelementptr inbounds i8, i8* %8, i64 56
  %75 = bitcast i8* %74 to i8**
  store i8* %73, i8** %75, align 8
  %76 = getelementptr inbounds i8, i8* %8, i64 64
  %77 = insertelement <2 x i8*> undef, i8* %73, i32 0
  %78 = shufflevector <2 x i8*> %77, <2 x i8*> undef, <2 x i32> zeroinitializer
  %79 = getelementptr i8, <2 x i8*> %78, <2 x i64> <i64 128, i64 256>
  %80 = bitcast i8* %76 to <2 x i8*>*
  store <2 x i8*> %79, <2 x i8*>* %80, align 8
  %81 = getelementptr inbounds i8, i8* %8, i64 80
  %82 = getelementptr i8, <2 x i8*> %78, <2 x i64> <i64 384, i64 512>
  %83 = bitcast i8* %81 to <2 x i8*>*
  store <2 x i8*> %82, <2 x i8*>* %83, align 8
  %84 = getelementptr inbounds i8, i8* %8, i64 96
  %85 = getelementptr i8, <2 x i8*> %78, <2 x i64> <i64 640, i64 768>
  %86 = bitcast i8* %84 to <2 x i8*>*
  store <2 x i8*> %85, <2 x i8*>* %86, align 8
  %87 = getelementptr inbounds i8, i8* %8, i64 112
  %88 = getelementptr i8, <2 x i8*> %78, <2 x i64> <i64 896, i64 1024>
  %89 = bitcast i8* %87 to <2 x i8*>*
  store <2 x i8*> %88, <2 x i8*>* %89, align 8
  %90 = getelementptr inbounds i8, i8* %73, i64 1152
  %91 = getelementptr inbounds i8, i8* %8, i64 128
  %92 = bitcast i8* %91 to i8**
  store i8* %90, i8** %92, align 8
  %93 = getelementptr inbounds i8, i8* %8, i64 8
  %94 = bitcast i8* %93 to i32 (%struct.jpeg_decompress_struct*)**
  store i32 (%struct.jpeg_decompress_struct*)* @dummy_consume_data, i32 (%struct.jpeg_decompress_struct*)** %94, align 8
  %95 = getelementptr inbounds i8, i8* %8, i64 24
  %96 = bitcast i8* %95 to i32 (%struct.jpeg_decompress_struct*, i8***)**
  store i32 (%struct.jpeg_decompress_struct*, i8***)* @decompress_onepass, i32 (%struct.jpeg_decompress_struct*, i8***)** %96, align 8
  %97 = getelementptr inbounds i8, i8* %8, i64 32
  %98 = bitcast i8* %97 to %struct.jvirt_barray_control***
  store %struct.jvirt_barray_control** null, %struct.jvirt_barray_control*** %98, align 8
  br label %99

99:                                               ; preds = %69, %61
  %100 = load %struct.jpeg_memory_mgr*, %struct.jpeg_memory_mgr** %3, align 8
  %101 = getelementptr inbounds %struct.jpeg_memory_mgr, %struct.jpeg_memory_mgr* %100, i64 0, i32 0
  %102 = load i8* (%struct.jpeg_common_struct*, i32, i64)*, i8* (%struct.jpeg_common_struct*, i32, i64)** %101, align 8
  %103 = tail call i8* %102(%struct.jpeg_common_struct* %7, i32 1, i64 128) #5
  %104 = getelementptr inbounds i8, i8* %8, i64 136
  %105 = bitcast i8* %104 to i8**
  store i8* %103, i8** %105, align 8
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal void @start_input_pass(%struct.jpeg_decompress_struct* nocapture) #2 {
  %2 = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %0, i64 0, i32 36
  store i32 0, i32* %2, align 8
  %3 = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %0, i64 0, i32 79
  %4 = bitcast %struct.jpeg_d_coef_controller** %3 to %struct.my_coef_controller**
  %5 = load %struct.my_coef_controller*, %struct.my_coef_controller** %4, align 8
  %6 = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %0, i64 0, i32 66
  %7 = load i32, i32* %6, align 8
  %8 = icmp sgt i32 %7, 1
  br i1 %8, label %21, label %9

9:                                                ; preds = %1
  %10 = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %0, i64 0, i32 64
  %11 = load i32, i32* %10, align 4
  %12 = icmp eq i32 %11, 1
  %13 = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %0, i64 0, i32 67, i64 0
  %14 = load %struct.jpeg_component_info*, %struct.jpeg_component_info** %13, align 8
  br i1 %12, label %18, label %15

15:                                               ; preds = %9
  %16 = getelementptr inbounds %struct.jpeg_component_info, %struct.jpeg_component_info* %14, i64 0, i32 3
  %17 = load i32, i32* %16, align 4
  br label %21

18:                                               ; preds = %9
  %19 = getelementptr inbounds %struct.jpeg_component_info, %struct.jpeg_component_info* %14, i64 0, i32 18
  %20 = load i32, i32* %19, align 8
  br label %21

21:                                               ; preds = %1, %15, %18
  %22 = phi i32 [ %17, %15 ], [ %20, %18 ], [ 1, %1 ]
  %23 = getelementptr inbounds %struct.my_coef_controller, %struct.my_coef_controller* %5, i64 0, i32 3
  store i32 %22, i32* %23, align 8
  %24 = getelementptr inbounds %struct.my_coef_controller, %struct.my_coef_controller* %5, i64 0, i32 1
  store i32 0, i32* %24, align 8
  %25 = getelementptr inbounds %struct.my_coef_controller, %struct.my_coef_controller* %5, i64 0, i32 2
  store i32 0, i32* %25, align 4
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @start_output_pass(%struct.jpeg_decompress_struct*) #0 {
  %2 = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %0, i64 0, i32 79
  %3 = bitcast %struct.jpeg_d_coef_controller** %2 to %struct.my_coef_controller**
  %4 = load %struct.my_coef_controller*, %struct.my_coef_controller** %3, align 8
  %5 = getelementptr inbounds %struct.my_coef_controller, %struct.my_coef_controller* %4, i64 0, i32 0, i32 4
  %6 = load %struct.jvirt_barray_control**, %struct.jvirt_barray_control*** %5, align 8
  %7 = icmp eq %struct.jvirt_barray_control** %6, null
  br i1 %7, label %240, label %8

8:                                                ; preds = %1
  %9 = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %0, i64 0, i32 19
  %10 = load i32, i32* %9, align 8
  %11 = icmp eq i32 %10, 0
  br i1 %11, label %236, label %12

12:                                               ; preds = %8
  %13 = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %0, i64 0, i32 45
  %14 = load i32, i32* %13, align 8
  %15 = icmp eq i32 %14, 0
  br i1 %15, label %236, label %16

16:                                               ; preds = %12
  %17 = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %0, i64 0, i32 39
  %18 = load [64 x i32]*, [64 x i32]** %17, align 8
  %19 = icmp eq [64 x i32]* %18, null
  br i1 %19, label %236, label %20

20:                                               ; preds = %16
  %21 = getelementptr inbounds %struct.my_coef_controller, %struct.my_coef_controller* %4, i64 0, i32 7
  %22 = load i32*, i32** %21, align 8
  %23 = icmp eq i32* %22, null
  br i1 %23, label %24, label %38

24:                                               ; preds = %20
  %25 = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %0, i64 0, i32 1
  %26 = load %struct.jpeg_memory_mgr*, %struct.jpeg_memory_mgr** %25, align 8
  %27 = getelementptr inbounds %struct.jpeg_memory_mgr, %struct.jpeg_memory_mgr* %26, i64 0, i32 0
  %28 = load i8* (%struct.jpeg_common_struct*, i32, i64)*, i8* (%struct.jpeg_common_struct*, i32, i64)** %27, align 8
  %29 = bitcast %struct.jpeg_decompress_struct* %0 to %struct.jpeg_common_struct*
  %30 = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %0, i64 0, i32 9
  %31 = load i32, i32* %30, align 8
  %32 = shl nsw i32 %31, 1
  %33 = sext i32 %32 to i64
  %34 = mul nsw i64 %33, 40
  %35 = tail call i8* %28(%struct.jpeg_common_struct* %29, i32 1, i64 %34) #5
  %36 = bitcast i32** %21 to i8**
  store i8* %35, i8** %36, align 8
  %37 = bitcast i8* %35 to i32*
  br label %38

38:                                               ; preds = %24, %20
  %39 = phi i32* [ %37, %24 ], [ %22, %20 ]
  %40 = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %0, i64 0, i32 9
  %41 = load i32, i32* %40, align 8
  %42 = icmp sgt i32 %41, 0
  br i1 %42, label %43, label %236

43:                                               ; preds = %38
  %44 = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %0, i64 0, i32 44
  %45 = load %struct.jpeg_component_info*, %struct.jpeg_component_info** %44, align 8
  %46 = mul nsw i32 %41, 10
  %47 = sext i32 %46 to i64
  %48 = getelementptr inbounds i32, i32* %39, i64 %47
  %49 = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %0, i64 0, i32 35
  br label %50

50:                                               ; preds = %217, %43
  %51 = phi i64 [ 0, %43 ], [ %229, %217 ]
  %52 = phi i32 [ %41, %43 ], [ %231, %217 ]
  %53 = phi i32* [ %48, %43 ], [ %228, %217 ]
  %54 = phi i32* [ %39, %43 ], [ %227, %217 ]
  %55 = phi %struct.jpeg_component_info* [ %45, %43 ], [ %230, %217 ]
  %56 = phi i32 [ 0, %43 ], [ %226, %217 ]
  %57 = getelementptr inbounds %struct.jpeg_component_info, %struct.jpeg_component_info* %55, i64 0, i32 19
  %58 = load %struct.JQUANT_TBL*, %struct.JQUANT_TBL** %57, align 8
  %59 = icmp eq %struct.JQUANT_TBL* %58, null
  br i1 %59, label %236, label %60

60:                                               ; preds = %50
  %61 = getelementptr inbounds %struct.JQUANT_TBL, %struct.JQUANT_TBL* %58, i64 0, i32 0, i64 0
  %62 = load i16, i16* %61, align 4
  %63 = icmp eq i16 %62, 0
  br i1 %63, label %236, label %64

64:                                               ; preds = %60
  %65 = getelementptr inbounds %struct.JQUANT_TBL, %struct.JQUANT_TBL* %58, i64 0, i32 0, i64 1
  %66 = load i16, i16* %65, align 2
  %67 = icmp eq i16 %66, 0
  br i1 %67, label %236, label %68

68:                                               ; preds = %64
  %69 = getelementptr inbounds %struct.JQUANT_TBL, %struct.JQUANT_TBL* %58, i64 0, i32 0, i64 8
  %70 = load i16, i16* %69, align 4
  %71 = icmp eq i16 %70, 0
  br i1 %71, label %236, label %72

72:                                               ; preds = %68
  %73 = getelementptr inbounds %struct.JQUANT_TBL, %struct.JQUANT_TBL* %58, i64 0, i32 0, i64 16
  %74 = load i16, i16* %73, align 4
  %75 = icmp eq i16 %74, 0
  br i1 %75, label %236, label %76

76:                                               ; preds = %72
  %77 = getelementptr inbounds %struct.JQUANT_TBL, %struct.JQUANT_TBL* %58, i64 0, i32 0, i64 9
  %78 = load i16, i16* %77, align 2
  %79 = icmp eq i16 %78, 0
  br i1 %79, label %236, label %80

80:                                               ; preds = %76
  %81 = getelementptr inbounds %struct.JQUANT_TBL, %struct.JQUANT_TBL* %58, i64 0, i32 0, i64 2
  %82 = load i16, i16* %81, align 4
  %83 = icmp eq i16 %82, 0
  br i1 %83, label %236, label %84

84:                                               ; preds = %80
  %85 = getelementptr inbounds %struct.JQUANT_TBL, %struct.JQUANT_TBL* %58, i64 0, i32 0, i64 3
  %86 = load i16, i16* %85, align 2
  %87 = icmp eq i16 %86, 0
  br i1 %87, label %236, label %88

88:                                               ; preds = %84
  %89 = getelementptr inbounds %struct.JQUANT_TBL, %struct.JQUANT_TBL* %58, i64 0, i32 0, i64 10
  %90 = load i16, i16* %89, align 4
  %91 = icmp eq i16 %90, 0
  br i1 %91, label %236, label %92

92:                                               ; preds = %88
  %93 = getelementptr inbounds %struct.JQUANT_TBL, %struct.JQUANT_TBL* %58, i64 0, i32 0, i64 17
  %94 = load i16, i16* %93, align 2
  %95 = icmp eq i16 %94, 0
  br i1 %95, label %236, label %96

96:                                               ; preds = %92
  %97 = getelementptr inbounds %struct.JQUANT_TBL, %struct.JQUANT_TBL* %58, i64 0, i32 0, i64 24
  %98 = load i16, i16* %97, align 4
  %99 = icmp eq i16 %98, 0
  br i1 %99, label %236, label %100

100:                                              ; preds = %96
  %101 = load [64 x i32]*, [64 x i32]** %17, align 8
  %102 = getelementptr inbounds [64 x i32], [64 x i32]* %101, i64 %51, i64 0
  %103 = trunc i64 %51 to i32
  %104 = add nsw i32 %52, %103
  %105 = sext i32 %104 to i64
  %106 = load i32, i32* %102, align 4
  %107 = icmp slt i32 %106, 0
  br i1 %107, label %236, label %108

108:                                              ; preds = %100
  store i32 %106, i32* %54, align 4
  %109 = load i32, i32* %49, align 4
  %110 = icmp sgt i32 %109, 1
  br i1 %110, label %111, label %114

111:                                              ; preds = %108
  %112 = getelementptr inbounds [64 x i32], [64 x i32]* %101, i64 %105, i64 1
  %113 = load i32, i32* %112, align 4
  br label %114

114:                                              ; preds = %111, %108
  %115 = phi i32 [ %113, %111 ], [ -1, %108 ]
  %116 = getelementptr inbounds i32, i32* %53, i64 1
  store i32 %115, i32* %116, align 4
  %117 = getelementptr inbounds [64 x i32], [64 x i32]* %101, i64 %51, i64 1
  %118 = load i32, i32* %117, align 4
  %119 = getelementptr inbounds i32, i32* %54, i64 1
  store i32 %118, i32* %119, align 4
  %120 = load i32, i32* %117, align 4
  %121 = load i32, i32* %49, align 4
  %122 = icmp sgt i32 %121, 1
  br i1 %122, label %123, label %126

123:                                              ; preds = %114
  %124 = getelementptr inbounds [64 x i32], [64 x i32]* %101, i64 %105, i64 2
  %125 = load i32, i32* %124, align 4
  br label %126

126:                                              ; preds = %123, %114
  %127 = phi i32 [ %125, %123 ], [ -1, %114 ]
  %128 = getelementptr inbounds i32, i32* %53, i64 2
  store i32 %127, i32* %128, align 4
  %129 = getelementptr inbounds [64 x i32], [64 x i32]* %101, i64 %51, i64 2
  %130 = load i32, i32* %129, align 4
  %131 = getelementptr inbounds i32, i32* %54, i64 2
  store i32 %130, i32* %131, align 4
  %132 = load i32, i32* %129, align 4
  %133 = or i32 %132, %120
  %134 = load i32, i32* %49, align 4
  %135 = icmp sgt i32 %134, 1
  br i1 %135, label %136, label %139

136:                                              ; preds = %126
  %137 = getelementptr inbounds [64 x i32], [64 x i32]* %101, i64 %105, i64 3
  %138 = load i32, i32* %137, align 4
  br label %139

139:                                              ; preds = %136, %126
  %140 = phi i32 [ %138, %136 ], [ -1, %126 ]
  %141 = getelementptr inbounds i32, i32* %53, i64 3
  store i32 %140, i32* %141, align 4
  %142 = getelementptr inbounds [64 x i32], [64 x i32]* %101, i64 %51, i64 3
  %143 = load i32, i32* %142, align 4
  %144 = getelementptr inbounds i32, i32* %54, i64 3
  store i32 %143, i32* %144, align 4
  %145 = load i32, i32* %142, align 4
  %146 = or i32 %133, %145
  %147 = load i32, i32* %49, align 4
  %148 = icmp sgt i32 %147, 1
  br i1 %148, label %149, label %152

149:                                              ; preds = %139
  %150 = getelementptr inbounds [64 x i32], [64 x i32]* %101, i64 %105, i64 4
  %151 = load i32, i32* %150, align 4
  br label %152

152:                                              ; preds = %149, %139
  %153 = phi i32 [ %151, %149 ], [ -1, %139 ]
  %154 = getelementptr inbounds i32, i32* %53, i64 4
  store i32 %153, i32* %154, align 4
  %155 = getelementptr inbounds [64 x i32], [64 x i32]* %101, i64 %51, i64 4
  %156 = load i32, i32* %155, align 4
  %157 = getelementptr inbounds i32, i32* %54, i64 4
  store i32 %156, i32* %157, align 4
  %158 = load i32, i32* %155, align 4
  %159 = or i32 %146, %158
  %160 = load i32, i32* %49, align 4
  %161 = icmp sgt i32 %160, 1
  br i1 %161, label %162, label %165

162:                                              ; preds = %152
  %163 = getelementptr inbounds [64 x i32], [64 x i32]* %101, i64 %105, i64 5
  %164 = load i32, i32* %163, align 4
  br label %165

165:                                              ; preds = %162, %152
  %166 = phi i32 [ %164, %162 ], [ -1, %152 ]
  %167 = getelementptr inbounds i32, i32* %53, i64 5
  store i32 %166, i32* %167, align 4
  %168 = getelementptr inbounds [64 x i32], [64 x i32]* %101, i64 %51, i64 5
  %169 = load i32, i32* %168, align 4
  %170 = getelementptr inbounds i32, i32* %54, i64 5
  store i32 %169, i32* %170, align 4
  %171 = load i32, i32* %168, align 4
  %172 = or i32 %159, %171
  %173 = load i32, i32* %49, align 4
  %174 = icmp sgt i32 %173, 1
  br i1 %174, label %175, label %178

175:                                              ; preds = %165
  %176 = getelementptr inbounds [64 x i32], [64 x i32]* %101, i64 %105, i64 6
  %177 = load i32, i32* %176, align 4
  br label %178

178:                                              ; preds = %175, %165
  %179 = phi i32 [ %177, %175 ], [ -1, %165 ]
  %180 = getelementptr inbounds i32, i32* %53, i64 6
  store i32 %179, i32* %180, align 4
  %181 = getelementptr inbounds [64 x i32], [64 x i32]* %101, i64 %51, i64 6
  %182 = load i32, i32* %181, align 4
  %183 = getelementptr inbounds i32, i32* %54, i64 6
  store i32 %182, i32* %183, align 4
  %184 = load i32, i32* %181, align 4
  %185 = or i32 %172, %184
  %186 = load i32, i32* %49, align 4
  %187 = icmp sgt i32 %186, 1
  br i1 %187, label %188, label %191

188:                                              ; preds = %178
  %189 = getelementptr inbounds [64 x i32], [64 x i32]* %101, i64 %105, i64 7
  %190 = load i32, i32* %189, align 4
  br label %191

191:                                              ; preds = %188, %178
  %192 = phi i32 [ %190, %188 ], [ -1, %178 ]
  %193 = getelementptr inbounds i32, i32* %53, i64 7
  store i32 %192, i32* %193, align 4
  %194 = getelementptr inbounds [64 x i32], [64 x i32]* %101, i64 %51, i64 7
  %195 = load i32, i32* %194, align 4
  %196 = getelementptr inbounds i32, i32* %54, i64 7
  store i32 %195, i32* %196, align 4
  %197 = load i32, i32* %194, align 4
  %198 = or i32 %185, %197
  %199 = load i32, i32* %49, align 4
  %200 = icmp sgt i32 %199, 1
  br i1 %200, label %201, label %204

201:                                              ; preds = %191
  %202 = getelementptr inbounds [64 x i32], [64 x i32]* %101, i64 %105, i64 8
  %203 = load i32, i32* %202, align 4
  br label %204

204:                                              ; preds = %201, %191
  %205 = phi i32 [ %203, %201 ], [ -1, %191 ]
  %206 = getelementptr inbounds i32, i32* %53, i64 8
  store i32 %205, i32* %206, align 4
  %207 = getelementptr inbounds [64 x i32], [64 x i32]* %101, i64 %51, i64 8
  %208 = load i32, i32* %207, align 4
  %209 = getelementptr inbounds i32, i32* %54, i64 8
  store i32 %208, i32* %209, align 4
  %210 = load i32, i32* %207, align 4
  %211 = or i32 %198, %210
  %212 = load i32, i32* %49, align 4
  %213 = icmp sgt i32 %212, 1
  br i1 %213, label %214, label %217

214:                                              ; preds = %204
  %215 = getelementptr inbounds [64 x i32], [64 x i32]* %101, i64 %105, i64 9
  %216 = load i32, i32* %215, align 4
  br label %217

217:                                              ; preds = %214, %204
  %218 = phi i32 [ %216, %214 ], [ -1, %204 ]
  %219 = getelementptr inbounds i32, i32* %53, i64 9
  store i32 %218, i32* %219, align 4
  %220 = getelementptr inbounds [64 x i32], [64 x i32]* %101, i64 %51, i64 9
  %221 = load i32, i32* %220, align 4
  %222 = getelementptr inbounds i32, i32* %54, i64 9
  store i32 %221, i32* %222, align 4
  %223 = load i32, i32* %220, align 4
  %224 = or i32 %211, %223
  %225 = icmp eq i32 %224, 0
  %226 = select i1 %225, i32 %56, i32 1
  %227 = getelementptr inbounds i32, i32* %54, i64 10
  %228 = getelementptr inbounds i32, i32* %53, i64 10
  %229 = add nuw nsw i64 %51, 1
  %230 = getelementptr inbounds %struct.jpeg_component_info, %struct.jpeg_component_info* %55, i64 1
  %231 = load i32, i32* %40, align 8
  %232 = sext i32 %231 to i64
  %233 = icmp slt i64 %229, %232
  br i1 %233, label %50, label %234

234:                                              ; preds = %217
  %235 = icmp eq i32 %226, 0
  br i1 %235, label %236, label %237

236:                                              ; preds = %100, %60, %64, %68, %72, %76, %80, %84, %88, %92, %96, %50, %38, %16, %12, %234, %8
  br label %237

237:                                              ; preds = %234, %236
  %238 = phi i32 (%struct.jpeg_decompress_struct*, i8***)* [ @decompress_data, %236 ], [ @decompress_smooth_data, %234 ]
  %239 = getelementptr inbounds %struct.my_coef_controller, %struct.my_coef_controller* %4, i64 0, i32 0, i32 3
  store i32 (%struct.jpeg_decompress_struct*, i8***)* %238, i32 (%struct.jpeg_decompress_struct*, i8***)** %239, align 8
  br label %240

240:                                              ; preds = %237, %1
  %241 = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %0, i64 0, i32 38
  store i32 0, i32* %241, align 8
  ret void
}

declare i64 @jround_up(i64, i64) local_unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define internal i32 @consume_data(%struct.jpeg_decompress_struct*) #0 {
  %2 = alloca [4 x [64 x i16]**], align 16
  %3 = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %0, i64 0, i32 79
  %4 = bitcast %struct.jpeg_d_coef_controller** %3 to %struct.my_coef_controller**
  %5 = load %struct.my_coef_controller*, %struct.my_coef_controller** %4, align 8
  %6 = bitcast [4 x [64 x i16]**]* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %6) #5
  %7 = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %0, i64 0, i32 66
  %8 = bitcast [4 x [64 x i16]**]* %2 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %8, i8 -86, i64 32, i1 false)
  %9 = load i32, i32* %7, align 8
  %10 = icmp sgt i32 %9, 0
  br i1 %10, label %11, label %37

11:                                               ; preds = %1
  %12 = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %0, i64 0, i32 1
  %13 = bitcast %struct.jpeg_decompress_struct* %0 to %struct.jpeg_common_struct*
  %14 = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %0, i64 0, i32 36
  br label %15

15:                                               ; preds = %11, %15
  %16 = phi i64 [ 0, %11 ], [ %33, %15 ]
  %17 = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %0, i64 0, i32 67, i64 %16
  %18 = load %struct.jpeg_component_info*, %struct.jpeg_component_info** %17, align 8
  %19 = load %struct.jpeg_memory_mgr*, %struct.jpeg_memory_mgr** %12, align 8
  %20 = getelementptr inbounds %struct.jpeg_memory_mgr, %struct.jpeg_memory_mgr* %19, i64 0, i32 8
  %21 = load [64 x i16]** (%struct.jpeg_common_struct*, %struct.jvirt_barray_control*, i32, i32, i32)*, [64 x i16]** (%struct.jpeg_common_struct*, %struct.jvirt_barray_control*, i32, i32, i32)** %20, align 8
  %22 = getelementptr inbounds %struct.jpeg_component_info, %struct.jpeg_component_info* %18, i64 0, i32 1
  %23 = load i32, i32* %22, align 4
  %24 = sext i32 %23 to i64
  %25 = getelementptr inbounds %struct.my_coef_controller, %struct.my_coef_controller* %5, i64 0, i32 6, i64 %24
  %26 = load %struct.jvirt_barray_control*, %struct.jvirt_barray_control** %25, align 8
  %27 = load i32, i32* %14, align 8
  %28 = getelementptr inbounds %struct.jpeg_component_info, %struct.jpeg_component_info* %18, i64 0, i32 3
  %29 = load i32, i32* %28, align 4
  %30 = mul i32 %29, %27
  %31 = tail call [64 x i16]** %21(%struct.jpeg_common_struct* %13, %struct.jvirt_barray_control* %26, i32 %30, i32 %29, i32 1) #5
  %32 = getelementptr inbounds [4 x [64 x i16]**], [4 x [64 x i16]**]* %2, i64 0, i64 %16
  store [64 x i16]** %31, [64 x i16]*** %32, align 8
  %33 = add nuw nsw i64 %16, 1
  %34 = load i32, i32* %7, align 8
  %35 = sext i32 %34 to i64
  %36 = icmp slt i64 %33, %35
  br i1 %36, label %15, label %37

37:                                               ; preds = %15, %1
  %38 = getelementptr inbounds %struct.my_coef_controller, %struct.my_coef_controller* %5, i64 0, i32 2
  %39 = load i32, i32* %38, align 4
  %40 = getelementptr inbounds %struct.my_coef_controller, %struct.my_coef_controller* %5, i64 0, i32 3
  %41 = load i32, i32* %40, align 8
  %42 = icmp slt i32 %39, %41
  br i1 %42, label %43, label %147

43:                                               ; preds = %37
  %44 = getelementptr inbounds %struct.my_coef_controller, %struct.my_coef_controller* %5, i64 0, i32 1
  %45 = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %0, i64 0, i32 68
  %46 = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %0, i64 0, i32 83
  %47 = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %0, i64 0, i32 36
  %48 = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %0, i64 0, i32 77
  %49 = getelementptr inbounds %struct.my_coef_controller, %struct.my_coef_controller* %5, i64 0, i32 4, i64 0
  %50 = sext i32 %39 to i64
  %51 = load i32, i32* %44, align 8
  br label %52

52:                                               ; preds = %43, %142
  %53 = phi i32 [ %41, %43 ], [ %143, %142 ]
  %54 = phi i32 [ %51, %43 ], [ 0, %142 ]
  %55 = phi i64 [ %50, %43 ], [ %144, %142 ]
  %56 = load i32, i32* %45, align 8
  %57 = icmp ult i32 %54, %56
  br i1 %57, label %58, label %142

58:                                               ; preds = %52, %136
  %59 = phi i32 [ %137, %136 ], [ %54, %52 ]
  %60 = load i32, i32* %7, align 8
  %61 = icmp sgt i32 %60, 0
  br i1 %61, label %62, label %118

62:                                               ; preds = %58, %112
  %63 = phi i32 [ %113, %112 ], [ %60, %58 ]
  %64 = phi i64 [ %115, %112 ], [ 0, %58 ]
  %65 = phi i32 [ %114, %112 ], [ 0, %58 ]
  %66 = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %0, i64 0, i32 67, i64 %64
  %67 = load %struct.jpeg_component_info*, %struct.jpeg_component_info** %66, align 8
  %68 = getelementptr inbounds %struct.jpeg_component_info, %struct.jpeg_component_info* %67, i64 0, i32 13
  %69 = getelementptr inbounds %struct.jpeg_component_info, %struct.jpeg_component_info* %67, i64 0, i32 14
  %70 = load i32, i32* %69, align 8
  %71 = icmp sgt i32 %70, 0
  br i1 %71, label %72, label %112

72:                                               ; preds = %62
  %73 = load i32, i32* %68, align 4
  %74 = mul i32 %73, %59
  %75 = getelementptr inbounds [4 x [64 x i16]**], [4 x [64 x i16]**]* %2, i64 0, i64 %64
  %76 = load [64 x i16]**, [64 x i16]*** %75, align 8
  %77 = zext i32 %74 to i64
  br label %78

78:                                               ; preds = %72, %103
  %79 = phi i32 [ %70, %72 ], [ %104, %103 ]
  %80 = phi i32 [ %73, %72 ], [ %105, %103 ]
  %81 = phi i64 [ 0, %72 ], [ %107, %103 ]
  %82 = phi i32 [ %65, %72 ], [ %106, %103 ]
  %83 = icmp sgt i32 %80, 0
  br i1 %83, label %84, label %103

84:                                               ; preds = %78
  %85 = add nsw i64 %81, %55
  %86 = getelementptr inbounds [64 x i16]*, [64 x i16]** %76, i64 %85
  %87 = load [64 x i16]*, [64 x i16]** %86, align 8
  %88 = getelementptr inbounds [64 x i16], [64 x i16]* %87, i64 %77
  %89 = sext i32 %82 to i64
  br label %90

90:                                               ; preds = %84, %90
  %91 = phi i64 [ %89, %84 ], [ %95, %90 ]
  %92 = phi [64 x i16]* [ %88, %84 ], [ %94, %90 ]
  %93 = phi i32 [ 0, %84 ], [ %97, %90 ]
  %94 = getelementptr inbounds [64 x i16], [64 x i16]* %92, i64 1
  %95 = add nsw i64 %91, 1
  %96 = getelementptr inbounds %struct.my_coef_controller, %struct.my_coef_controller* %5, i64 0, i32 4, i64 %91
  store [64 x i16]* %92, [64 x i16]** %96, align 8
  %97 = add nuw nsw i32 %93, 1
  %98 = load i32, i32* %68, align 4
  %99 = icmp slt i32 %97, %98
  br i1 %99, label %90, label %100

100:                                              ; preds = %90
  %101 = trunc i64 %95 to i32
  %102 = load i32, i32* %69, align 8
  br label %103

103:                                              ; preds = %100, %78
  %104 = phi i32 [ %79, %78 ], [ %102, %100 ]
  %105 = phi i32 [ %80, %78 ], [ %98, %100 ]
  %106 = phi i32 [ %82, %78 ], [ %101, %100 ]
  %107 = add nuw nsw i64 %81, 1
  %108 = sext i32 %104 to i64
  %109 = icmp slt i64 %107, %108
  br i1 %109, label %78, label %110

110:                                              ; preds = %103
  %111 = load i32, i32* %7, align 8
  br label %112

112:                                              ; preds = %110, %62
  %113 = phi i32 [ %63, %62 ], [ %111, %110 ]
  %114 = phi i32 [ %65, %62 ], [ %106, %110 ]
  %115 = add nuw nsw i64 %64, 1
  %116 = sext i32 %113 to i64
  %117 = icmp slt i64 %115, %116
  br i1 %117, label %62, label %118

118:                                              ; preds = %112, %58
  %119 = load %struct.jpeg_entropy_decoder*, %struct.jpeg_entropy_decoder** %46, align 8
  %120 = getelementptr inbounds %struct.jpeg_entropy_decoder, %struct.jpeg_entropy_decoder* %119, i64 0, i32 2
  %121 = load i32, i32* %120, align 8
  %122 = icmp eq i32 %121, 0
  br i1 %122, label %123, label %128

123:                                              ; preds = %118
  %124 = load i32, i32* %47, align 8
  %125 = load %struct.jpeg_decomp_master*, %struct.jpeg_decomp_master** %48, align 8
  %126 = getelementptr inbounds %struct.jpeg_decomp_master, %struct.jpeg_decomp_master* %125, i64 0, i32 8
  store i32 %124, i32* %126, align 8
  %127 = load %struct.jpeg_entropy_decoder*, %struct.jpeg_entropy_decoder** %46, align 8
  br label %128

128:                                              ; preds = %118, %123
  %129 = phi %struct.jpeg_entropy_decoder* [ %119, %118 ], [ %127, %123 ]
  %130 = getelementptr inbounds %struct.jpeg_entropy_decoder, %struct.jpeg_entropy_decoder* %129, i64 0, i32 1
  %131 = load i32 (%struct.jpeg_decompress_struct*, [64 x i16]**)*, i32 (%struct.jpeg_decompress_struct*, [64 x i16]**)** %130, align 8
  %132 = tail call i32 %131(%struct.jpeg_decompress_struct* %0, [64 x i16]** %49) #5
  %133 = icmp eq i32 %132, 0
  br i1 %133, label %134, label %136

134:                                              ; preds = %128
  %135 = trunc i64 %55 to i32
  store i32 %135, i32* %38, align 4
  store i32 %59, i32* %44, align 8
  br label %179

136:                                              ; preds = %128
  %137 = add nuw i32 %59, 1
  %138 = load i32, i32* %45, align 8
  %139 = icmp ult i32 %137, %138
  br i1 %139, label %58, label %140

140:                                              ; preds = %136
  %141 = load i32, i32* %40, align 8
  br label %142

142:                                              ; preds = %140, %52
  %143 = phi i32 [ %141, %140 ], [ %53, %52 ]
  store i32 0, i32* %44, align 8
  %144 = add nsw i64 %55, 1
  %145 = sext i32 %143 to i64
  %146 = icmp slt i64 %144, %145
  br i1 %146, label %52, label %147

147:                                              ; preds = %142, %37
  %148 = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %0, i64 0, i32 36
  %149 = load i32, i32* %148, align 8
  %150 = add i32 %149, 1
  store i32 %150, i32* %148, align 8
  %151 = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %0, i64 0, i32 64
  %152 = load i32, i32* %151, align 4
  %153 = icmp ult i32 %150, %152
  br i1 %153, label %154, label %174

154:                                              ; preds = %147
  %155 = load %struct.my_coef_controller*, %struct.my_coef_controller** %4, align 8
  %156 = load i32, i32* %7, align 8
  %157 = icmp sgt i32 %156, 1
  br i1 %157, label %169, label %158

158:                                              ; preds = %154
  %159 = add i32 %152, -1
  %160 = icmp ult i32 %150, %159
  %161 = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %0, i64 0, i32 67, i64 0
  %162 = load %struct.jpeg_component_info*, %struct.jpeg_component_info** %161, align 8
  br i1 %160, label %163, label %166

163:                                              ; preds = %158
  %164 = getelementptr inbounds %struct.jpeg_component_info, %struct.jpeg_component_info* %162, i64 0, i32 3
  %165 = load i32, i32* %164, align 4
  br label %169

166:                                              ; preds = %158
  %167 = getelementptr inbounds %struct.jpeg_component_info, %struct.jpeg_component_info* %162, i64 0, i32 18
  %168 = load i32, i32* %167, align 8
  br label %169

169:                                              ; preds = %154, %163, %166
  %170 = phi i32 [ %165, %163 ], [ %168, %166 ], [ 1, %154 ]
  %171 = getelementptr inbounds %struct.my_coef_controller, %struct.my_coef_controller* %155, i64 0, i32 3
  store i32 %170, i32* %171, align 8
  %172 = getelementptr inbounds %struct.my_coef_controller, %struct.my_coef_controller* %155, i64 0, i32 1
  store i32 0, i32* %172, align 8
  %173 = getelementptr inbounds %struct.my_coef_controller, %struct.my_coef_controller* %155, i64 0, i32 2
  store i32 0, i32* %173, align 4
  br label %179

174:                                              ; preds = %147
  %175 = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %0, i64 0, i32 81
  %176 = load %struct.jpeg_input_controller*, %struct.jpeg_input_controller** %175, align 8
  %177 = getelementptr inbounds %struct.jpeg_input_controller, %struct.jpeg_input_controller* %176, i64 0, i32 3
  %178 = load void (%struct.jpeg_decompress_struct*)*, void (%struct.jpeg_decompress_struct*)** %177, align 8
  tail call void %178(%struct.jpeg_decompress_struct* %0) #5
  br label %179

179:                                              ; preds = %174, %169, %134
  %180 = phi i32 [ 0, %134 ], [ 3, %169 ], [ 4, %174 ]
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %6) #5
  ret i32 %180
}

; Function Attrs: nounwind ssp uwtable
define internal i32 @decompress_data(%struct.jpeg_decompress_struct*, i8*** nocapture readonly) #0 {
  %3 = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %0, i64 0, i32 79
  %4 = bitcast %struct.jpeg_d_coef_controller** %3 to %struct.my_coef_controller**
  %5 = load %struct.my_coef_controller*, %struct.my_coef_controller** %4, align 8
  %6 = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %0, i64 0, i32 64
  %7 = load i32, i32* %6, align 4
  %8 = add i32 %7, -1
  %9 = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %0, i64 0, i32 35
  %10 = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %0, i64 0, i32 37
  %11 = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %0, i64 0, i32 36
  %12 = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %0, i64 0, i32 38
  %13 = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %0, i64 0, i32 81
  br label %14

14:                                               ; preds = %24, %2
  %15 = load i32, i32* %9, align 4
  %16 = load i32, i32* %10, align 4
  %17 = icmp slt i32 %15, %16
  br i1 %17, label %24, label %18

18:                                               ; preds = %14
  %19 = icmp eq i32 %15, %16
  br i1 %19, label %20, label %30

20:                                               ; preds = %18
  %21 = load i32, i32* %11, align 8
  %22 = load i32, i32* %12, align 8
  %23 = icmp ugt i32 %21, %22
  br i1 %23, label %30, label %24

24:                                               ; preds = %20, %14
  %25 = load %struct.jpeg_input_controller*, %struct.jpeg_input_controller** %13, align 8
  %26 = getelementptr inbounds %struct.jpeg_input_controller, %struct.jpeg_input_controller* %25, i64 0, i32 0
  %27 = load i32 (%struct.jpeg_decompress_struct*)*, i32 (%struct.jpeg_decompress_struct*)** %26, align 8
  %28 = tail call i32 %27(%struct.jpeg_decompress_struct* %0) #5
  %29 = icmp eq i32 %28, 0
  br i1 %29, label %129, label %14

30:                                               ; preds = %20, %18
  %31 = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %0, i64 0, i32 9
  %32 = load i32, i32* %31, align 8
  %33 = icmp sgt i32 %32, 0
  br i1 %33, label %34, label %123

34:                                               ; preds = %30
  %35 = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %0, i64 0, i32 44
  %36 = load %struct.jpeg_component_info*, %struct.jpeg_component_info** %35, align 8
  %37 = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %0, i64 0, i32 1
  %38 = bitcast %struct.jpeg_decompress_struct* %0 to %struct.jpeg_common_struct*
  %39 = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %0, i64 0, i32 84
  %40 = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %0, i64 0, i32 77
  br label %41

41:                                               ; preds = %34, %117
  %42 = phi i64 [ 0, %34 ], [ %118, %117 ]
  %43 = phi %struct.jpeg_component_info* [ %36, %34 ], [ %119, %117 ]
  %44 = getelementptr inbounds %struct.jpeg_component_info, %struct.jpeg_component_info* %43, i64 0, i32 12
  %45 = load i32, i32* %44, align 8
  %46 = icmp eq i32 %45, 0
  br i1 %46, label %117, label %47

47:                                               ; preds = %41
  %48 = load %struct.jpeg_memory_mgr*, %struct.jpeg_memory_mgr** %37, align 8
  %49 = getelementptr inbounds %struct.jpeg_memory_mgr, %struct.jpeg_memory_mgr* %48, i64 0, i32 8
  %50 = load [64 x i16]** (%struct.jpeg_common_struct*, %struct.jvirt_barray_control*, i32, i32, i32)*, [64 x i16]** (%struct.jpeg_common_struct*, %struct.jvirt_barray_control*, i32, i32, i32)** %49, align 8
  %51 = getelementptr inbounds %struct.my_coef_controller, %struct.my_coef_controller* %5, i64 0, i32 6, i64 %42
  %52 = load %struct.jvirt_barray_control*, %struct.jvirt_barray_control** %51, align 8
  %53 = load i32, i32* %12, align 8
  %54 = getelementptr inbounds %struct.jpeg_component_info, %struct.jpeg_component_info* %43, i64 0, i32 3
  %55 = load i32, i32* %54, align 4
  %56 = mul i32 %55, %53
  %57 = tail call [64 x i16]** %50(%struct.jpeg_common_struct* %38, %struct.jvirt_barray_control* %52, i32 %56, i32 %55, i32 0) #5
  %58 = load i32, i32* %12, align 8
  %59 = icmp ult i32 %58, %8
  br i1 %59, label %60, label %62

60:                                               ; preds = %47
  %61 = load i32, i32* %54, align 4
  br label %69

62:                                               ; preds = %47
  %63 = getelementptr inbounds %struct.jpeg_component_info, %struct.jpeg_component_info* %43, i64 0, i32 8
  %64 = load i32, i32* %63, align 8
  %65 = load i32, i32* %54, align 4
  %66 = urem i32 %64, %65
  %67 = icmp eq i32 %66, 0
  %68 = select i1 %67, i32 %65, i32 %66
  br label %69

69:                                               ; preds = %62, %60
  %70 = phi i32 [ %61, %60 ], [ %68, %62 ]
  %71 = load %struct.jpeg_inverse_dct*, %struct.jpeg_inverse_dct** %39, align 8
  %72 = getelementptr inbounds %struct.jpeg_inverse_dct, %struct.jpeg_inverse_dct* %71, i64 0, i32 1, i64 %42
  %73 = load void (%struct.jpeg_decompress_struct*, %struct.jpeg_component_info*, i16*, i8**, i32)*, void (%struct.jpeg_decompress_struct*, %struct.jpeg_component_info*, i16*, i8**, i32)** %72, align 8
  %74 = icmp sgt i32 %70, 0
  br i1 %74, label %75, label %117

75:                                               ; preds = %69
  %76 = getelementptr inbounds i8**, i8*** %1, i64 %42
  %77 = load i8**, i8*** %76, align 8
  %78 = getelementptr inbounds %struct.jpeg_component_info, %struct.jpeg_component_info* %43, i64 0, i32 9
  %79 = zext i32 %70 to i64
  %80 = load %struct.jpeg_decomp_master*, %struct.jpeg_decomp_master** %40, align 8
  br label %81

81:                                               ; preds = %110, %75
  %82 = phi %struct.jpeg_decomp_master* [ %80, %75 ], [ %112, %110 ]
  %83 = phi i64 [ 0, %75 ], [ %115, %110 ]
  %84 = phi i8** [ %77, %75 ], [ %114, %110 ]
  %85 = getelementptr inbounds %struct.jpeg_decomp_master, %struct.jpeg_decomp_master* %82, i64 0, i32 5, i64 %42
  %86 = load i32, i32* %85, align 4
  %87 = getelementptr inbounds %struct.jpeg_decomp_master, %struct.jpeg_decomp_master* %82, i64 0, i32 6, i64 %42
  %88 = load i32, i32* %87, align 4
  %89 = icmp ugt i32 %86, %88
  br i1 %89, label %90, label %92

90:                                               ; preds = %81
  %91 = load i32, i32* %78, align 4
  br label %110

92:                                               ; preds = %81
  %93 = getelementptr inbounds [64 x i16]*, [64 x i16]** %57, i64 %83
  %94 = load [64 x i16]*, [64 x i16]** %93, align 8
  %95 = zext i32 %86 to i64
  %96 = getelementptr inbounds [64 x i16], [64 x i16]* %94, i64 %95
  br label %97

97:                                               ; preds = %92, %97
  %98 = phi i32 [ %104, %97 ], [ 0, %92 ]
  %99 = phi [64 x i16]* [ %102, %97 ], [ %96, %92 ]
  %100 = phi i32 [ %105, %97 ], [ %86, %92 ]
  %101 = getelementptr inbounds [64 x i16], [64 x i16]* %99, i64 0, i64 0
  tail call void %73(%struct.jpeg_decompress_struct* %0, %struct.jpeg_component_info* %43, i16* %101, i8** %84, i32 %98) #5
  %102 = getelementptr inbounds [64 x i16], [64 x i16]* %99, i64 1
  %103 = load i32, i32* %78, align 4
  %104 = add i32 %103, %98
  %105 = add i32 %100, 1
  %106 = load %struct.jpeg_decomp_master*, %struct.jpeg_decomp_master** %40, align 8
  %107 = getelementptr inbounds %struct.jpeg_decomp_master, %struct.jpeg_decomp_master* %106, i64 0, i32 6, i64 %42
  %108 = load i32, i32* %107, align 4
  %109 = icmp ugt i32 %105, %108
  br i1 %109, label %110, label %97

110:                                              ; preds = %97, %90
  %111 = phi i32 [ %91, %90 ], [ %103, %97 ]
  %112 = phi %struct.jpeg_decomp_master* [ %82, %90 ], [ %106, %97 ]
  %113 = sext i32 %111 to i64
  %114 = getelementptr inbounds i8*, i8** %84, i64 %113
  %115 = add nuw nsw i64 %83, 1
  %116 = icmp eq i64 %115, %79
  br i1 %116, label %117, label %81

117:                                              ; preds = %110, %69, %41
  %118 = add nuw nsw i64 %42, 1
  %119 = getelementptr inbounds %struct.jpeg_component_info, %struct.jpeg_component_info* %43, i64 1
  %120 = load i32, i32* %31, align 8
  %121 = sext i32 %120 to i64
  %122 = icmp slt i64 %118, %121
  br i1 %122, label %41, label %123

123:                                              ; preds = %117, %30
  %124 = load i32, i32* %12, align 8
  %125 = add i32 %124, 1
  store i32 %125, i32* %12, align 8
  %126 = load i32, i32* %6, align 4
  %127 = icmp ult i32 %125, %126
  %128 = select i1 %127, i32 3, i32 4
  br label %129

129:                                              ; preds = %24, %123
  %130 = phi i32 [ %128, %123 ], [ 0, %24 ]
  ret i32 %130
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: norecurse nounwind readnone ssp uwtable
define internal i32 @dummy_consume_data(%struct.jpeg_decompress_struct* nocapture readnone) #4 {
  ret i32 0
}

; Function Attrs: nounwind ssp uwtable
define internal i32 @decompress_onepass(%struct.jpeg_decompress_struct*, i8*** nocapture readonly) #0 {
  %3 = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %0, i64 0, i32 79
  %4 = bitcast %struct.jpeg_d_coef_controller** %3 to %struct.my_coef_controller**
  %5 = load %struct.my_coef_controller*, %struct.my_coef_controller** %4, align 8
  %6 = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %0, i64 0, i32 68
  %7 = load i32, i32* %6, align 8
  %8 = add i32 %7, -1
  %9 = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %0, i64 0, i32 64
  %10 = load i32, i32* %9, align 4
  %11 = add i32 %10, -1
  %12 = getelementptr inbounds %struct.my_coef_controller, %struct.my_coef_controller* %5, i64 0, i32 2
  %13 = load i32, i32* %12, align 4
  %14 = getelementptr inbounds %struct.my_coef_controller, %struct.my_coef_controller* %5, i64 0, i32 3
  %15 = load i32, i32* %14, align 8
  %16 = icmp slt i32 %13, %15
  br i1 %16, label %17, label %173

17:                                               ; preds = %2
  %18 = getelementptr inbounds %struct.my_coef_controller, %struct.my_coef_controller* %5, i64 0, i32 1
  %19 = getelementptr inbounds %struct.my_coef_controller, %struct.my_coef_controller* %5, i64 0, i32 4
  %20 = getelementptr inbounds [10 x [64 x i16]*], [10 x [64 x i16]*]* %19, i64 0, i64 0
  %21 = bitcast [10 x [64 x i16]*]* %19 to i8**
  %22 = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %0, i64 0, i32 70
  %23 = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %0, i64 0, i32 83
  %24 = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %0, i64 0, i32 36
  %25 = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %0, i64 0, i32 77
  %26 = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %0, i64 0, i32 66
  %27 = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %0, i64 0, i32 84
  %28 = load i32, i32* %18, align 8
  br label %29

29:                                               ; preds = %17, %167
  %30 = phi i32 [ %15, %17 ], [ %168, %167 ]
  %31 = phi i32 [ %28, %17 ], [ 0, %167 ]
  %32 = phi i32 [ %13, %17 ], [ %169, %167 ]
  %33 = icmp ugt i32 %31, %8
  br i1 %33, label %167, label %34

34:                                               ; preds = %29, %162
  %35 = phi i32 [ %163, %162 ], [ %31, %29 ]
  %36 = load i8*, i8** %21, align 8
  %37 = load i32, i32* %22, align 8
  %38 = sext i32 %37 to i64
  %39 = shl nsw i64 %38, 7
  tail call void @jzero_far(i8* %36, i64 %39) #5
  %40 = load %struct.jpeg_entropy_decoder*, %struct.jpeg_entropy_decoder** %23, align 8
  %41 = getelementptr inbounds %struct.jpeg_entropy_decoder, %struct.jpeg_entropy_decoder* %40, i64 0, i32 2
  %42 = load i32, i32* %41, align 8
  %43 = icmp eq i32 %42, 0
  br i1 %43, label %44, label %49

44:                                               ; preds = %34
  %45 = load i32, i32* %24, align 8
  %46 = load %struct.jpeg_decomp_master*, %struct.jpeg_decomp_master** %25, align 8
  %47 = getelementptr inbounds %struct.jpeg_decomp_master, %struct.jpeg_decomp_master* %46, i64 0, i32 8
  store i32 %45, i32* %47, align 8
  %48 = load %struct.jpeg_entropy_decoder*, %struct.jpeg_entropy_decoder** %23, align 8
  br label %49

49:                                               ; preds = %34, %44
  %50 = phi %struct.jpeg_entropy_decoder* [ %40, %34 ], [ %48, %44 ]
  %51 = getelementptr inbounds %struct.jpeg_entropy_decoder, %struct.jpeg_entropy_decoder* %50, i64 0, i32 1
  %52 = load i32 (%struct.jpeg_decompress_struct*, [64 x i16]**)*, i32 (%struct.jpeg_decompress_struct*, [64 x i16]**)** %51, align 8
  %53 = tail call i32 %52(%struct.jpeg_decompress_struct* %0, [64 x i16]** %20) #5
  %54 = icmp eq i32 %53, 0
  br i1 %54, label %55, label %56

55:                                               ; preds = %49
  store i32 %32, i32* %12, align 4
  store i32 %35, i32* %18, align 8
  br label %208

56:                                               ; preds = %49
  %57 = load %struct.jpeg_decomp_master*, %struct.jpeg_decomp_master** %25, align 8
  %58 = getelementptr inbounds %struct.jpeg_decomp_master, %struct.jpeg_decomp_master* %57, i64 0, i32 3
  %59 = load i32, i32* %58, align 4
  %60 = icmp ult i32 %35, %59
  br i1 %60, label %162, label %61

61:                                               ; preds = %56
  %62 = getelementptr inbounds %struct.jpeg_decomp_master, %struct.jpeg_decomp_master* %57, i64 0, i32 4
  %63 = load i32, i32* %62, align 8
  %64 = icmp ugt i32 %35, %63
  br i1 %64, label %162, label %65

65:                                               ; preds = %61
  %66 = load i32, i32* %26, align 8
  %67 = icmp sgt i32 %66, 0
  br i1 %67, label %68, label %162

68:                                               ; preds = %65
  %69 = icmp ult i32 %35, %8
  br label %70

70:                                               ; preds = %68, %156
  %71 = phi i32 [ %66, %68 ], [ %157, %156 ]
  %72 = phi i64 [ 0, %68 ], [ %159, %156 ]
  %73 = phi i32 [ 0, %68 ], [ %158, %156 ]
  %74 = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %0, i64 0, i32 67, i64 %72
  %75 = load %struct.jpeg_component_info*, %struct.jpeg_component_info** %74, align 8
  %76 = getelementptr inbounds %struct.jpeg_component_info, %struct.jpeg_component_info* %75, i64 0, i32 12
  %77 = load i32, i32* %76, align 8
  %78 = icmp eq i32 %77, 0
  br i1 %78, label %79, label %83

79:                                               ; preds = %70
  %80 = getelementptr inbounds %struct.jpeg_component_info, %struct.jpeg_component_info* %75, i64 0, i32 15
  %81 = load i32, i32* %80, align 4
  %82 = add nsw i32 %81, %73
  br label %156

83:                                               ; preds = %70
  %84 = load %struct.jpeg_inverse_dct*, %struct.jpeg_inverse_dct** %27, align 8
  %85 = getelementptr inbounds %struct.jpeg_component_info, %struct.jpeg_component_info* %75, i64 0, i32 1
  %86 = load i32, i32* %85, align 4
  %87 = sext i32 %86 to i64
  %88 = getelementptr inbounds %struct.jpeg_inverse_dct, %struct.jpeg_inverse_dct* %84, i64 0, i32 1, i64 %87
  %89 = load void (%struct.jpeg_decompress_struct*, %struct.jpeg_component_info*, i16*, i8**, i32)*, void (%struct.jpeg_decompress_struct*, %struct.jpeg_component_info*, i16*, i8**, i32)** %88, align 8
  %90 = getelementptr inbounds %struct.jpeg_component_info, %struct.jpeg_component_info* %75, i64 0, i32 13
  %91 = getelementptr inbounds %struct.jpeg_component_info, %struct.jpeg_component_info* %75, i64 0, i32 17
  %92 = select i1 %69, i32* %90, i32* %91
  %93 = load i32, i32* %92, align 4
  %94 = getelementptr inbounds %struct.jpeg_component_info, %struct.jpeg_component_info* %75, i64 0, i32 9
  %95 = load %struct.jpeg_decomp_master*, %struct.jpeg_decomp_master** %25, align 8
  %96 = getelementptr inbounds %struct.jpeg_decomp_master, %struct.jpeg_decomp_master* %95, i64 0, i32 3
  %97 = load i32, i32* %96, align 4
  %98 = sub i32 %35, %97
  %99 = getelementptr inbounds %struct.jpeg_component_info, %struct.jpeg_component_info* %75, i64 0, i32 16
  %100 = load i32, i32* %99, align 8
  %101 = mul i32 %98, %100
  %102 = getelementptr inbounds %struct.jpeg_component_info, %struct.jpeg_component_info* %75, i64 0, i32 14
  %103 = load i32, i32* %102, align 8
  %104 = icmp sgt i32 %103, 0
  br i1 %104, label %105, label %156

105:                                              ; preds = %83
  %106 = getelementptr inbounds i8**, i8*** %1, i64 %87
  %107 = load i8**, i8*** %106, align 8
  %108 = load i32, i32* %94, align 4
  %109 = mul nsw i32 %108, %32
  %110 = sext i32 %109 to i64
  %111 = getelementptr inbounds i8*, i8** %107, i64 %110
  %112 = getelementptr inbounds %struct.jpeg_component_info, %struct.jpeg_component_info* %75, i64 0, i32 18
  %113 = icmp sgt i32 %93, 0
  %114 = zext i32 %93 to i64
  %115 = xor i1 %113, true
  br label %116

116:                                              ; preds = %105, %145
  %117 = phi i32 [ %103, %105 ], [ %146, %145 ]
  %118 = phi i32 [ %108, %105 ], [ %147, %145 ]
  %119 = phi i8** [ %111, %105 ], [ %151, %145 ]
  %120 = phi i32 [ 0, %105 ], [ %152, %145 ]
  %121 = phi i32 [ %73, %105 ], [ %149, %145 ]
  %122 = load i32, i32* %24, align 8
  %123 = icmp ult i32 %122, %11
  br i1 %123, label %129, label %124

124:                                              ; preds = %116
  %125 = add nsw i32 %120, %32
  %126 = load i32, i32* %112, align 8
  %127 = icmp sge i32 %125, %126
  %128 = or i1 %127, %115
  br i1 %128, label %145, label %130

129:                                              ; preds = %116
  br i1 %113, label %130, label %145

130:                                              ; preds = %124, %129
  %131 = sext i32 %121 to i64
  br label %132

132:                                              ; preds = %132, %130
  %133 = phi i64 [ 0, %130 ], [ %141, %132 ]
  %134 = phi i32 [ %101, %130 ], [ %140, %132 ]
  %135 = add nsw i64 %133, %131
  %136 = getelementptr inbounds %struct.my_coef_controller, %struct.my_coef_controller* %5, i64 0, i32 4, i64 %135
  %137 = bitcast [64 x i16]** %136 to i16**
  %138 = load i16*, i16** %137, align 8
  tail call void %89(%struct.jpeg_decompress_struct* %0, %struct.jpeg_component_info* %75, i16* %138, i8** %119, i32 %134) #5
  %139 = load i32, i32* %94, align 4
  %140 = add i32 %139, %134
  %141 = add nuw nsw i64 %133, 1
  %142 = icmp eq i64 %141, %114
  br i1 %142, label %143, label %132

143:                                              ; preds = %132
  %144 = load i32, i32* %102, align 8
  br label %145

145:                                              ; preds = %124, %143, %129
  %146 = phi i32 [ %144, %143 ], [ %117, %129 ], [ %117, %124 ]
  %147 = phi i32 [ %139, %143 ], [ %118, %129 ], [ %118, %124 ]
  %148 = load i32, i32* %90, align 4
  %149 = add nsw i32 %148, %121
  %150 = sext i32 %147 to i64
  %151 = getelementptr inbounds i8*, i8** %119, i64 %150
  %152 = add nuw nsw i32 %120, 1
  %153 = icmp slt i32 %152, %146
  br i1 %153, label %116, label %154

154:                                              ; preds = %145
  %155 = load i32, i32* %26, align 8
  br label %156

156:                                              ; preds = %154, %83, %79
  %157 = phi i32 [ %71, %79 ], [ %71, %83 ], [ %155, %154 ]
  %158 = phi i32 [ %82, %79 ], [ %73, %83 ], [ %149, %154 ]
  %159 = add nuw nsw i64 %72, 1
  %160 = sext i32 %157 to i64
  %161 = icmp slt i64 %159, %160
  br i1 %161, label %70, label %162

162:                                              ; preds = %156, %65, %61, %56
  %163 = add i32 %35, 1
  %164 = icmp ugt i32 %163, %8
  br i1 %164, label %165, label %34

165:                                              ; preds = %162
  %166 = load i32, i32* %14, align 8
  br label %167

167:                                              ; preds = %165, %29
  %168 = phi i32 [ %166, %165 ], [ %30, %29 ]
  store i32 0, i32* %18, align 8
  %169 = add nsw i32 %32, 1
  %170 = icmp slt i32 %169, %168
  br i1 %170, label %29, label %171

171:                                              ; preds = %167
  %172 = load i32, i32* %9, align 4
  br label %173

173:                                              ; preds = %171, %2
  %174 = phi i32 [ %172, %171 ], [ %10, %2 ]
  %175 = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %0, i64 0, i32 38
  %176 = load i32, i32* %175, align 8
  %177 = add i32 %176, 1
  store i32 %177, i32* %175, align 8
  %178 = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %0, i64 0, i32 36
  %179 = load i32, i32* %178, align 8
  %180 = add i32 %179, 1
  store i32 %180, i32* %178, align 8
  %181 = icmp ult i32 %180, %174
  br i1 %181, label %182, label %203

182:                                              ; preds = %173
  %183 = load %struct.my_coef_controller*, %struct.my_coef_controller** %4, align 8
  %184 = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %0, i64 0, i32 66
  %185 = load i32, i32* %184, align 8
  %186 = icmp sgt i32 %185, 1
  br i1 %186, label %198, label %187

187:                                              ; preds = %182
  %188 = add i32 %174, -1
  %189 = icmp ult i32 %180, %188
  %190 = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %0, i64 0, i32 67, i64 0
  %191 = load %struct.jpeg_component_info*, %struct.jpeg_component_info** %190, align 8
  br i1 %189, label %192, label %195

192:                                              ; preds = %187
  %193 = getelementptr inbounds %struct.jpeg_component_info, %struct.jpeg_component_info* %191, i64 0, i32 3
  %194 = load i32, i32* %193, align 4
  br label %198

195:                                              ; preds = %187
  %196 = getelementptr inbounds %struct.jpeg_component_info, %struct.jpeg_component_info* %191, i64 0, i32 18
  %197 = load i32, i32* %196, align 8
  br label %198

198:                                              ; preds = %182, %192, %195
  %199 = phi i32 [ %194, %192 ], [ %197, %195 ], [ 1, %182 ]
  %200 = getelementptr inbounds %struct.my_coef_controller, %struct.my_coef_controller* %183, i64 0, i32 3
  store i32 %199, i32* %200, align 8
  %201 = getelementptr inbounds %struct.my_coef_controller, %struct.my_coef_controller* %183, i64 0, i32 1
  store i32 0, i32* %201, align 8
  %202 = getelementptr inbounds %struct.my_coef_controller, %struct.my_coef_controller* %183, i64 0, i32 2
  store i32 0, i32* %202, align 4
  br label %208

203:                                              ; preds = %173
  %204 = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %0, i64 0, i32 81
  %205 = load %struct.jpeg_input_controller*, %struct.jpeg_input_controller** %204, align 8
  %206 = getelementptr inbounds %struct.jpeg_input_controller, %struct.jpeg_input_controller* %205, i64 0, i32 3
  %207 = load void (%struct.jpeg_decompress_struct*)*, void (%struct.jpeg_decompress_struct*)** %206, align 8
  tail call void %207(%struct.jpeg_decompress_struct* %0) #5
  br label %208

208:                                              ; preds = %203, %198, %55
  %209 = phi i32 [ 0, %55 ], [ 3, %198 ], [ 4, %203 ]
  ret i32 %209
}

; Function Attrs: nounwind ssp uwtable
define internal i32 @decompress_smooth_data(%struct.jpeg_decompress_struct*, i8*** nocapture readonly) #0 {
  %3 = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %0, i64 0, i32 79
  %4 = bitcast %struct.jpeg_d_coef_controller** %3 to %struct.my_coef_controller**
  %5 = load %struct.my_coef_controller*, %struct.my_coef_controller** %4, align 8
  %6 = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %0, i64 0, i32 64
  %7 = load i32, i32* %6, align 4
  %8 = add i32 %7, -1
  %9 = getelementptr inbounds %struct.my_coef_controller, %struct.my_coef_controller* %5, i64 0, i32 5
  %10 = load i16*, i16** %9, align 8
  %11 = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %0, i64 0, i32 35
  %12 = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %0, i64 0, i32 37
  %13 = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %0, i64 0, i32 81
  %14 = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %0, i64 0, i32 72
  %15 = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %0, i64 0, i32 36
  %16 = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %0, i64 0, i32 38
  br label %17

17:                                               ; preds = %36, %2
  %18 = load i32, i32* %11, align 4
  %19 = load i32, i32* %12, align 4
  %20 = icmp sgt i32 %18, %19
  br i1 %20, label %41, label %21

21:                                               ; preds = %17
  %22 = load %struct.jpeg_input_controller*, %struct.jpeg_input_controller** %13, align 8
  %23 = getelementptr inbounds %struct.jpeg_input_controller, %struct.jpeg_input_controller* %22, i64 0, i32 5
  %24 = load i32, i32* %23, align 4
  %25 = icmp eq i32 %24, 0
  br i1 %25, label %26, label %41

26:                                               ; preds = %21
  %27 = icmp eq i32 %18, %19
  br i1 %27, label %28, label %36

28:                                               ; preds = %26
  %29 = load i32, i32* %14, align 4
  %30 = icmp eq i32 %29, 0
  %31 = select i1 %30, i32 2, i32 0
  %32 = load i32, i32* %15, align 8
  %33 = load i32, i32* %16, align 8
  %34 = add i32 %33, %31
  %35 = icmp ugt i32 %32, %34
  br i1 %35, label %41, label %36

36:                                               ; preds = %28, %26
  %37 = getelementptr inbounds %struct.jpeg_input_controller, %struct.jpeg_input_controller* %22, i64 0, i32 0
  %38 = load i32 (%struct.jpeg_decompress_struct*)*, i32 (%struct.jpeg_decompress_struct*)** %37, align 8
  %39 = tail call i32 %38(%struct.jpeg_decompress_struct* %0) #5
  %40 = icmp eq i32 %39, 0
  br i1 %40, label %998, label %17

41:                                               ; preds = %28, %17, %21
  %42 = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %0, i64 0, i32 9
  %43 = load i32, i32* %42, align 8
  %44 = icmp sgt i32 %43, 0
  br i1 %44, label %45, label %992

45:                                               ; preds = %41
  %46 = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %0, i64 0, i32 44
  %47 = load %struct.jpeg_component_info*, %struct.jpeg_component_info** %46, align 8
  %48 = add i32 %7, -2
  %49 = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %0, i64 0, i32 1
  %50 = bitcast %struct.jpeg_decompress_struct* %0 to %struct.jpeg_common_struct*
  %51 = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %0, i64 0, i32 77
  %52 = getelementptr inbounds %struct.my_coef_controller, %struct.my_coef_controller* %5, i64 0, i32 7
  %53 = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %0, i64 0, i32 84
  %54 = bitcast i16* %10 to [64 x i16]*
  %55 = getelementptr inbounds i16, i16* %10, i64 1
  %56 = getelementptr inbounds i16, i16* %10, i64 8
  %57 = getelementptr inbounds i16, i16* %10, i64 16
  %58 = getelementptr inbounds i16, i16* %10, i64 9
  %59 = getelementptr inbounds i16, i16* %10, i64 2
  %60 = getelementptr inbounds i16, i16* %10, i64 3
  %61 = getelementptr inbounds i16, i16* %10, i64 10
  %62 = getelementptr inbounds i16, i16* %10, i64 17
  %63 = getelementptr inbounds i16, i16* %10, i64 24
  br label %64

64:                                               ; preds = %45, %982
  %65 = phi i64 [ 0, %45 ], [ %987, %982 ]
  %66 = phi i64 [ 0, %45 ], [ %986, %982 ]
  %67 = phi i64 [ 0, %45 ], [ %985, %982 ]
  %68 = phi i64 [ 0, %45 ], [ %984, %982 ]
  %69 = phi i64 [ 0, %45 ], [ %983, %982 ]
  %70 = phi %struct.jpeg_component_info* [ %47, %45 ], [ %988, %982 ]
  %71 = getelementptr inbounds %struct.jpeg_component_info, %struct.jpeg_component_info* %70, i64 0, i32 12
  %72 = load i32, i32* %71, align 8
  %73 = icmp eq i32 %72, 0
  br i1 %73, label %982, label %74

74:                                               ; preds = %64
  %75 = load i32, i32* %16, align 8
  %76 = icmp ult i32 %75, %48
  br i1 %76, label %77, label %81

77:                                               ; preds = %74
  %78 = getelementptr inbounds %struct.jpeg_component_info, %struct.jpeg_component_info* %70, i64 0, i32 3
  %79 = load i32, i32* %78, align 4
  %80 = mul nsw i32 %79, 3
  br label %95

81:                                               ; preds = %74
  %82 = icmp ult i32 %75, %8
  br i1 %82, label %83, label %87

83:                                               ; preds = %81
  %84 = getelementptr inbounds %struct.jpeg_component_info, %struct.jpeg_component_info* %70, i64 0, i32 3
  %85 = load i32, i32* %84, align 4
  %86 = shl nsw i32 %85, 1
  br label %95

87:                                               ; preds = %81
  %88 = getelementptr inbounds %struct.jpeg_component_info, %struct.jpeg_component_info* %70, i64 0, i32 8
  %89 = load i32, i32* %88, align 8
  %90 = getelementptr inbounds %struct.jpeg_component_info, %struct.jpeg_component_info* %70, i64 0, i32 3
  %91 = load i32, i32* %90, align 4
  %92 = urem i32 %89, %91
  %93 = icmp eq i32 %92, 0
  %94 = select i1 %93, i32 %91, i32 %92
  br label %95

95:                                               ; preds = %83, %87, %77
  %96 = phi i32 [ %79, %77 ], [ %85, %83 ], [ %91, %87 ]
  %97 = phi i32 [ %79, %77 ], [ %85, %83 ], [ %94, %87 ]
  %98 = phi i32 [ %80, %77 ], [ %86, %83 ], [ %94, %87 ]
  %99 = icmp ugt i32 %75, 1
  br i1 %99, label %100, label %116

100:                                              ; preds = %95
  %101 = getelementptr inbounds %struct.jpeg_component_info, %struct.jpeg_component_info* %70, i64 0, i32 3
  %102 = shl i32 %96, 1
  %103 = add nsw i32 %102, %98
  %104 = load %struct.jpeg_memory_mgr*, %struct.jpeg_memory_mgr** %49, align 8
  %105 = getelementptr inbounds %struct.jpeg_memory_mgr, %struct.jpeg_memory_mgr* %104, i64 0, i32 8
  %106 = load [64 x i16]** (%struct.jpeg_common_struct*, %struct.jvirt_barray_control*, i32, i32, i32)*, [64 x i16]** (%struct.jpeg_common_struct*, %struct.jvirt_barray_control*, i32, i32, i32)** %105, align 8
  %107 = getelementptr inbounds %struct.my_coef_controller, %struct.my_coef_controller* %5, i64 0, i32 6, i64 %65
  %108 = load %struct.jvirt_barray_control*, %struct.jvirt_barray_control** %107, align 8
  %109 = add i32 %75, -2
  %110 = mul i32 %96, %109
  %111 = tail call [64 x i16]** %106(%struct.jpeg_common_struct* %50, %struct.jvirt_barray_control* %108, i32 %110, i32 %103, i32 0) #5
  %112 = load i32, i32* %101, align 4
  %113 = shl nsw i32 %112, 1
  %114 = sext i32 %113 to i64
  %115 = getelementptr inbounds [64 x i16]*, [64 x i16]** %111, i64 %114
  br label %131

116:                                              ; preds = %95
  %117 = icmp eq i32 %75, 1
  %118 = load %struct.jpeg_memory_mgr*, %struct.jpeg_memory_mgr** %49, align 8
  %119 = getelementptr inbounds %struct.jpeg_memory_mgr, %struct.jpeg_memory_mgr* %118, i64 0, i32 8
  %120 = load [64 x i16]** (%struct.jpeg_common_struct*, %struct.jvirt_barray_control*, i32, i32, i32)*, [64 x i16]** (%struct.jpeg_common_struct*, %struct.jvirt_barray_control*, i32, i32, i32)** %119, align 8
  %121 = getelementptr inbounds %struct.my_coef_controller, %struct.my_coef_controller* %5, i64 0, i32 6, i64 %65
  %122 = load %struct.jvirt_barray_control*, %struct.jvirt_barray_control** %121, align 8
  br i1 %117, label %123, label %129

123:                                              ; preds = %116
  %124 = getelementptr inbounds %struct.jpeg_component_info, %struct.jpeg_component_info* %70, i64 0, i32 3
  %125 = tail call [64 x i16]** %120(%struct.jpeg_common_struct* %50, %struct.jvirt_barray_control* %122, i32 0, i32 %98, i32 0) #5
  %126 = load i32, i32* %124, align 4
  %127 = sext i32 %126 to i64
  %128 = getelementptr inbounds [64 x i16]*, [64 x i16]** %125, i64 %127
  br label %131

129:                                              ; preds = %116
  %130 = tail call [64 x i16]** %120(%struct.jpeg_common_struct* %50, %struct.jvirt_barray_control* %122, i32 0, i32 %98, i32 0) #5
  br label %131

131:                                              ; preds = %123, %129, %100
  %132 = phi [64 x i16]** [ %115, %100 ], [ %128, %123 ], [ %130, %129 ]
  %133 = load i32, i32* %16, align 8
  %134 = load %struct.jpeg_decomp_master*, %struct.jpeg_decomp_master** %51, align 8
  %135 = getelementptr inbounds %struct.jpeg_decomp_master, %struct.jpeg_decomp_master* %134, i64 0, i32 8
  %136 = load i32, i32* %135, align 8
  %137 = icmp ugt i32 %133, %136
  %138 = load i32*, i32** %52, align 8
  br i1 %137, label %139, label %145

139:                                              ; preds = %131
  %140 = load i32, i32* %42, align 8
  %141 = trunc i64 %65 to i32
  %142 = add nsw i32 %140, %141
  %143 = mul nsw i32 %142, 10
  %144 = sext i32 %143 to i64
  br label %148

145:                                              ; preds = %131
  %146 = mul i64 %65, 10
  %147 = and i64 %146, 4294967294
  br label %148

148:                                              ; preds = %145, %139
  %149 = phi i64 [ %144, %139 ], [ %147, %145 ]
  %150 = getelementptr inbounds i32, i32* %138, i64 %149
  %151 = getelementptr inbounds i32, i32* %150, i64 1
  %152 = load i32, i32* %151, align 4
  %153 = icmp eq i32 %152, -1
  br i1 %153, label %154, label %186

154:                                              ; preds = %148
  %155 = getelementptr inbounds i32, i32* %150, i64 2
  %156 = load i32, i32* %155, align 4
  %157 = icmp eq i32 %156, -1
  br i1 %157, label %158, label %186

158:                                              ; preds = %154
  %159 = getelementptr inbounds i32, i32* %150, i64 3
  %160 = load i32, i32* %159, align 4
  %161 = icmp eq i32 %160, -1
  br i1 %161, label %162, label %186

162:                                              ; preds = %158
  %163 = getelementptr inbounds i32, i32* %150, i64 4
  %164 = load i32, i32* %163, align 4
  %165 = icmp eq i32 %164, -1
  br i1 %165, label %166, label %186

166:                                              ; preds = %162
  %167 = getelementptr inbounds i32, i32* %150, i64 5
  %168 = load i32, i32* %167, align 4
  %169 = icmp eq i32 %168, -1
  br i1 %169, label %170, label %186

170:                                              ; preds = %166
  %171 = getelementptr inbounds i32, i32* %150, i64 6
  %172 = load i32, i32* %171, align 4
  %173 = icmp eq i32 %172, -1
  br i1 %173, label %174, label %186

174:                                              ; preds = %170
  %175 = getelementptr inbounds i32, i32* %150, i64 7
  %176 = load i32, i32* %175, align 4
  %177 = icmp eq i32 %176, -1
  br i1 %177, label %178, label %186

178:                                              ; preds = %174
  %179 = getelementptr inbounds i32, i32* %150, i64 8
  %180 = load i32, i32* %179, align 4
  %181 = icmp eq i32 %180, -1
  br i1 %181, label %182, label %186

182:                                              ; preds = %178
  %183 = getelementptr inbounds i32, i32* %150, i64 9
  %184 = load i32, i32* %183, align 4
  %185 = icmp eq i32 %184, -1
  br label %186

186:                                              ; preds = %182, %178, %174, %170, %166, %162, %158, %154, %148
  %187 = phi i1 [ false, %178 ], [ false, %174 ], [ false, %170 ], [ false, %166 ], [ false, %162 ], [ false, %158 ], [ false, %154 ], [ false, %148 ], [ %185, %182 ]
  %188 = getelementptr inbounds %struct.jpeg_component_info, %struct.jpeg_component_info* %70, i64 0, i32 19
  %189 = load %struct.JQUANT_TBL*, %struct.JQUANT_TBL** %188, align 8
  %190 = getelementptr inbounds %struct.JQUANT_TBL, %struct.JQUANT_TBL* %189, i64 0, i32 0, i64 0
  %191 = load i16, i16* %190, align 4
  %192 = zext i16 %191 to i64
  %193 = getelementptr inbounds %struct.JQUANT_TBL, %struct.JQUANT_TBL* %189, i64 0, i32 0, i64 1
  %194 = load i16, i16* %193, align 2
  %195 = zext i16 %194 to i64
  %196 = getelementptr inbounds %struct.JQUANT_TBL, %struct.JQUANT_TBL* %189, i64 0, i32 0, i64 8
  %197 = load i16, i16* %196, align 4
  %198 = zext i16 %197 to i64
  %199 = getelementptr inbounds %struct.JQUANT_TBL, %struct.JQUANT_TBL* %189, i64 0, i32 0, i64 16
  %200 = load i16, i16* %199, align 4
  %201 = zext i16 %200 to i64
  %202 = getelementptr inbounds %struct.JQUANT_TBL, %struct.JQUANT_TBL* %189, i64 0, i32 0, i64 9
  %203 = load i16, i16* %202, align 2
  %204 = zext i16 %203 to i64
  %205 = getelementptr inbounds %struct.JQUANT_TBL, %struct.JQUANT_TBL* %189, i64 0, i32 0, i64 2
  %206 = load i16, i16* %205, align 4
  %207 = zext i16 %206 to i64
  br i1 %187, label %208, label %221

208:                                              ; preds = %186
  %209 = getelementptr inbounds %struct.JQUANT_TBL, %struct.JQUANT_TBL* %189, i64 0, i32 0, i64 3
  %210 = load i16, i16* %209, align 2
  %211 = zext i16 %210 to i64
  %212 = getelementptr inbounds %struct.JQUANT_TBL, %struct.JQUANT_TBL* %189, i64 0, i32 0, i64 10
  %213 = load i16, i16* %212, align 4
  %214 = zext i16 %213 to i64
  %215 = getelementptr inbounds %struct.JQUANT_TBL, %struct.JQUANT_TBL* %189, i64 0, i32 0, i64 17
  %216 = load i16, i16* %215, align 2
  %217 = zext i16 %216 to i64
  %218 = getelementptr inbounds %struct.JQUANT_TBL, %struct.JQUANT_TBL* %189, i64 0, i32 0, i64 24
  %219 = load i16, i16* %218, align 4
  %220 = zext i16 %219 to i64
  br label %221

221:                                              ; preds = %208, %186
  %222 = phi i64 [ %211, %208 ], [ %69, %186 ]
  %223 = phi i64 [ %214, %208 ], [ %68, %186 ]
  %224 = phi i64 [ %217, %208 ], [ %67, %186 ]
  %225 = phi i64 [ %220, %208 ], [ %66, %186 ]
  %226 = load %struct.jpeg_inverse_dct*, %struct.jpeg_inverse_dct** %53, align 8
  %227 = getelementptr inbounds %struct.jpeg_inverse_dct, %struct.jpeg_inverse_dct* %226, i64 0, i32 1, i64 %65
  %228 = load void (%struct.jpeg_decompress_struct*, %struct.jpeg_component_info*, i16*, i8**, i32)*, void (%struct.jpeg_decompress_struct*, %struct.jpeg_component_info*, i16*, i8**, i32)** %227, align 8
  %229 = icmp sgt i32 %97, 0
  br i1 %229, label %230, label %982

230:                                              ; preds = %221
  %231 = getelementptr inbounds i8**, i8*** %1, i64 %65
  %232 = load i8**, i8*** %231, align 8
  %233 = getelementptr inbounds [64 x i16]*, [64 x i16]** %132, i64 -1
  %234 = add nsw i32 %97, -1
  %235 = add nsw i32 %97, -2
  %236 = getelementptr inbounds %struct.jpeg_component_info, %struct.jpeg_component_info* %70, i64 0, i32 7
  %237 = shl nuw nsw i64 %195, 7
  %238 = shl nuw nsw i64 %195, 8
  %239 = getelementptr inbounds i32, i32* %150, i64 2
  %240 = shl nuw nsw i64 %198, 7
  %241 = shl nuw nsw i64 %198, 8
  %242 = getelementptr inbounds i32, i32* %150, i64 3
  %243 = shl nuw nsw i64 %201, 7
  %244 = shl nuw nsw i64 %201, 8
  %245 = getelementptr inbounds i32, i32* %150, i64 4
  %246 = shl nuw nsw i64 %204, 7
  %247 = shl nuw nsw i64 %204, 8
  %248 = getelementptr inbounds i32, i32* %150, i64 5
  %249 = shl nuw nsw i64 %207, 7
  %250 = shl nuw nsw i64 %207, 8
  %251 = getelementptr inbounds i32, i32* %150, i64 6
  %252 = shl i64 %222, 7
  %253 = shl i64 %222, 8
  %254 = getelementptr inbounds i32, i32* %150, i64 7
  %255 = shl i64 %223, 7
  %256 = shl i64 %223, 8
  %257 = getelementptr inbounds i32, i32* %150, i64 8
  %258 = shl i64 %224, 7
  %259 = shl i64 %224, 8
  %260 = getelementptr inbounds i32, i32* %150, i64 9
  %261 = shl i64 %225, 7
  %262 = shl i64 %225, 8
  %263 = shl nuw nsw i64 %192, 7
  %264 = shl nuw nsw i64 %192, 8
  %265 = getelementptr inbounds %struct.jpeg_component_info, %struct.jpeg_component_info* %70, i64 0, i32 9
  %266 = sext i32 %235 to i64
  %267 = sext i32 %234 to i64
  %268 = zext i32 %97 to i64
  br label %269

269:                                              ; preds = %975, %230
  %270 = phi %struct.jpeg_decomp_master* [ %134, %230 ], [ %977, %975 ]
  %271 = phi i64 [ 0, %230 ], [ %980, %975 ]
  %272 = phi i8** [ %232, %230 ], [ %979, %975 ]
  %273 = getelementptr inbounds [64 x i16]*, [64 x i16]** %132, i64 %271
  %274 = load [64 x i16]*, [64 x i16]** %273, align 8
  %275 = getelementptr inbounds %struct.jpeg_decomp_master, %struct.jpeg_decomp_master* %270, i64 0, i32 5, i64 %65
  %276 = load i32, i32* %275, align 4
  %277 = zext i32 %276 to i64
  %278 = getelementptr inbounds [64 x i16], [64 x i16]* %274, i64 %277
  %279 = icmp eq i64 %271, 0
  br i1 %279, label %280, label %286

280:                                              ; preds = %269
  %281 = load i32, i32* %16, align 8
  %282 = icmp eq i32 %281, 0
  br i1 %282, label %304, label %283

283:                                              ; preds = %280
  %284 = load [64 x i16]*, [64 x i16]** %233, align 8
  %285 = getelementptr inbounds [64 x i16], [64 x i16]* %284, i64 %277
  br label %294

286:                                              ; preds = %269
  %287 = add nsw i64 %271, -1
  %288 = getelementptr inbounds [64 x i16]*, [64 x i16]** %132, i64 %287
  %289 = load [64 x i16]*, [64 x i16]** %288, align 8
  %290 = getelementptr inbounds [64 x i16], [64 x i16]* %289, i64 %277
  %291 = icmp eq i64 %271, 1
  br i1 %291, label %292, label %298

292:                                              ; preds = %286
  %293 = load i32, i32* %16, align 8
  br label %294

294:                                              ; preds = %292, %283
  %295 = phi i32 [ %281, %283 ], [ %293, %292 ]
  %296 = phi [64 x i16]* [ %285, %283 ], [ %290, %292 ]
  %297 = icmp ugt i32 %295, 1
  br i1 %297, label %298, label %304

298:                                              ; preds = %286, %294
  %299 = phi [64 x i16]* [ %296, %294 ], [ %290, %286 ]
  %300 = add nsw i64 %271, -2
  %301 = getelementptr inbounds [64 x i16]*, [64 x i16]** %132, i64 %300
  %302 = load [64 x i16]*, [64 x i16]** %301, align 8
  %303 = getelementptr inbounds [64 x i16], [64 x i16]* %302, i64 %277
  br label %304

304:                                              ; preds = %280, %294, %298
  %305 = phi [64 x i16]* [ %299, %298 ], [ %296, %294 ], [ %278, %280 ]
  %306 = phi [64 x i16]* [ %303, %298 ], [ %296, %294 ], [ %278, %280 ]
  %307 = icmp slt i64 %271, %267
  br i1 %307, label %311, label %308

308:                                              ; preds = %304
  %309 = load i32, i32* %16, align 8
  %310 = icmp ult i32 %309, %8
  br i1 %310, label %311, label %316

311:                                              ; preds = %308, %304
  %312 = add nuw nsw i64 %271, 1
  %313 = getelementptr inbounds [64 x i16]*, [64 x i16]** %132, i64 %312
  %314 = load [64 x i16]*, [64 x i16]** %313, align 8
  %315 = getelementptr inbounds [64 x i16], [64 x i16]* %314, i64 %277
  br label %316

316:                                              ; preds = %308, %311
  %317 = phi [64 x i16]* [ %315, %311 ], [ %278, %308 ]
  %318 = icmp slt i64 %271, %266
  br i1 %318, label %322, label %319

319:                                              ; preds = %316
  %320 = load i32, i32* %16, align 8
  %321 = icmp ult i32 %320, %48
  br i1 %321, label %322, label %328

322:                                              ; preds = %319, %316
  %323 = add nuw i64 %271, 2
  %324 = and i64 %323, 4294967295
  %325 = getelementptr inbounds [64 x i16]*, [64 x i16]** %132, i64 %324
  %326 = load [64 x i16]*, [64 x i16]** %325, align 8
  %327 = getelementptr inbounds [64 x i16], [64 x i16]* %326, i64 %277
  br label %328

328:                                              ; preds = %319, %322
  %329 = phi [64 x i16]* [ %327, %322 ], [ %317, %319 ]
  %330 = getelementptr inbounds [64 x i16], [64 x i16]* %306, i64 0, i64 0
  %331 = load i16, i16* %330, align 2
  %332 = sext i16 %331 to i32
  %333 = getelementptr inbounds [64 x i16], [64 x i16]* %305, i64 0, i64 0
  %334 = load i16, i16* %333, align 2
  %335 = sext i16 %334 to i32
  %336 = getelementptr inbounds [64 x i16], [64 x i16]* %278, i64 0, i64 0
  %337 = load i16, i16* %336, align 2
  %338 = sext i16 %337 to i32
  %339 = getelementptr inbounds [64 x i16], [64 x i16]* %317, i64 0, i64 0
  %340 = load i16, i16* %339, align 2
  %341 = sext i16 %340 to i32
  %342 = getelementptr inbounds [64 x i16], [64 x i16]* %329, i64 0, i64 0
  %343 = load i16, i16* %342, align 2
  %344 = sext i16 %343 to i32
  %345 = load i32, i32* %236, align 4
  %346 = add i32 %345, -1
  %347 = getelementptr inbounds %struct.jpeg_decomp_master, %struct.jpeg_decomp_master* %270, i64 0, i32 6, i64 %65
  %348 = load i32, i32* %347, align 4
  %349 = icmp ugt i32 %276, %348
  br i1 %349, label %350, label %352

350:                                              ; preds = %328
  %351 = load i32, i32* %265, align 4
  br label %975

352:                                              ; preds = %328, %963
  %353 = phi i32 [ %403, %963 ], [ %332, %328 ]
  %354 = phi i32 [ %353, %963 ], [ %332, %328 ]
  %355 = phi i32 [ %371, %963 ], [ %335, %328 ]
  %356 = phi i32 [ %354, %963 ], [ %332, %328 ]
  %357 = phi i32 [ %368, %963 ], [ %338, %328 ]
  %358 = phi i32 [ %364, %963 ], [ %341, %328 ]
  %359 = phi i32 [ %431, %963 ], [ %344, %328 ]
  %360 = phi i32 [ %407, %963 ], [ %344, %328 ]
  %361 = phi i32 [ %360, %963 ], [ %344, %328 ]
  %362 = phi i32 [ %361, %963 ], [ %344, %328 ]
  %363 = phi i32 [ %430, %963 ], [ %341, %328 ]
  %364 = phi i32 [ %406, %963 ], [ %341, %328 ]
  %365 = phi i32 [ %358, %963 ], [ %341, %328 ]
  %366 = phi i32 [ %429, %963 ], [ %338, %328 ]
  %367 = phi i32 [ %405, %963 ], [ %338, %328 ]
  %368 = phi i32 [ %367, %963 ], [ %338, %328 ]
  %369 = phi i32 [ %428, %963 ], [ %335, %328 ]
  %370 = phi i32 [ %404, %963 ], [ %335, %328 ]
  %371 = phi i32 [ %370, %963 ], [ %335, %328 ]
  %372 = phi i32 [ %427, %963 ], [ %332, %328 ]
  %373 = phi i32 [ %970, %963 ], [ 0, %328 ]
  %374 = phi [64 x i16]* [ %968, %963 ], [ %329, %328 ]
  %375 = phi [64 x i16]* [ %966, %963 ], [ %317, %328 ]
  %376 = phi [64 x i16]* [ %965, %963 ], [ %305, %328 ]
  %377 = phi [64 x i16]* [ %967, %963 ], [ %306, %328 ]
  %378 = phi [64 x i16]* [ %964, %963 ], [ %278, %328 ]
  %379 = phi i32 [ %408, %963 ], [ %276, %328 ]
  tail call void @jcopy_block_row([64 x i16]* %378, [64 x i16]* %54, i32 1) #5
  %380 = load %struct.jpeg_decomp_master*, %struct.jpeg_decomp_master** %51, align 8
  %381 = getelementptr inbounds %struct.jpeg_decomp_master, %struct.jpeg_decomp_master* %380, i64 0, i32 5, i64 %65
  %382 = load i32, i32* %381, align 4
  %383 = icmp eq i32 %379, %382
  %384 = icmp ult i32 %379, %346
  %385 = and i1 %384, %383
  br i1 %385, label %386, label %402

386:                                              ; preds = %352
  %387 = getelementptr inbounds [64 x i16], [64 x i16]* %377, i64 1, i64 0
  %388 = load i16, i16* %387, align 2
  %389 = sext i16 %388 to i32
  %390 = getelementptr inbounds [64 x i16], [64 x i16]* %376, i64 1, i64 0
  %391 = load i16, i16* %390, align 2
  %392 = sext i16 %391 to i32
  %393 = getelementptr inbounds [64 x i16], [64 x i16]* %378, i64 1, i64 0
  %394 = load i16, i16* %393, align 2
  %395 = sext i16 %394 to i32
  %396 = getelementptr inbounds [64 x i16], [64 x i16]* %375, i64 1, i64 0
  %397 = load i16, i16* %396, align 2
  %398 = sext i16 %397 to i32
  %399 = getelementptr inbounds [64 x i16], [64 x i16]* %374, i64 1, i64 0
  %400 = load i16, i16* %399, align 2
  %401 = sext i16 %400 to i32
  br label %402

402:                                              ; preds = %386, %352
  %403 = phi i32 [ %389, %386 ], [ %372, %352 ]
  %404 = phi i32 [ %392, %386 ], [ %369, %352 ]
  %405 = phi i32 [ %395, %386 ], [ %366, %352 ]
  %406 = phi i32 [ %398, %386 ], [ %363, %352 ]
  %407 = phi i32 [ %401, %386 ], [ %359, %352 ]
  %408 = add i32 %379, 1
  %409 = icmp ult i32 %408, %346
  br i1 %409, label %410, label %426

410:                                              ; preds = %402
  %411 = getelementptr inbounds [64 x i16], [64 x i16]* %377, i64 2, i64 0
  %412 = load i16, i16* %411, align 2
  %413 = sext i16 %412 to i32
  %414 = getelementptr inbounds [64 x i16], [64 x i16]* %376, i64 2, i64 0
  %415 = load i16, i16* %414, align 2
  %416 = sext i16 %415 to i32
  %417 = getelementptr inbounds [64 x i16], [64 x i16]* %378, i64 2, i64 0
  %418 = load i16, i16* %417, align 2
  %419 = sext i16 %418 to i32
  %420 = getelementptr inbounds [64 x i16], [64 x i16]* %375, i64 2, i64 0
  %421 = load i16, i16* %420, align 2
  %422 = sext i16 %421 to i32
  %423 = getelementptr inbounds [64 x i16], [64 x i16]* %374, i64 2, i64 0
  %424 = load i16, i16* %423, align 2
  %425 = sext i16 %424 to i32
  br label %426

426:                                              ; preds = %410, %402
  %427 = phi i32 [ %413, %410 ], [ %372, %402 ]
  %428 = phi i32 [ %416, %410 ], [ %369, %402 ]
  %429 = phi i32 [ %419, %410 ], [ %366, %402 ]
  %430 = phi i32 [ %422, %410 ], [ %363, %402 ]
  %431 = phi i32 [ %425, %410 ], [ %359, %402 ]
  %432 = load i32, i32* %151, align 4
  %433 = icmp eq i32 %432, 0
  br i1 %433, label %498, label %434

434:                                              ; preds = %426
  %435 = load i16, i16* %55, align 2
  %436 = icmp eq i16 %435, 0
  br i1 %436, label %437, label %498

437:                                              ; preds = %434
  br i1 %187, label %438, label %461

438:                                              ; preds = %437
  %439 = add i32 %357, %355
  %440 = add i32 %439, %365
  %441 = sub i32 %428, %440
  %442 = add i32 %441, %429
  %443 = add i32 %442, %430
  %444 = mul i32 %443, 3
  %445 = add i32 %358, %371
  %446 = sub i32 %445, %404
  %447 = sub i32 %446, %406
  %448 = mul i32 %447, 13
  %449 = sub i32 %368, %405
  %450 = mul i32 %449, 38
  %451 = add i32 %354, %356
  %452 = add i32 %451, %362
  %453 = add i32 %452, %361
  %454 = sub i32 %403, %453
  %455 = add i32 %454, %407
  %456 = add i32 %455, %450
  %457 = add i32 %456, %448
  %458 = add i32 %457, %427
  %459 = add i32 %458, %431
  %460 = add i32 %459, %444
  br label %467

461:                                              ; preds = %437
  %462 = sub i32 %368, %405
  %463 = mul i32 %462, 50
  %464 = sub i32 %429, %357
  %465 = mul i32 %464, 7
  %466 = add i32 %465, %463
  br label %467

467:                                              ; preds = %461, %438
  %468 = phi i32 [ %460, %438 ], [ %466, %461 ]
  %469 = sext i32 %468 to i64
  %470 = mul nsw i64 %469, %192
  %471 = icmp sgt i64 %470, -1
  br i1 %471, label %472, label %482

472:                                              ; preds = %467
  %473 = add nsw i64 %470, %237
  %474 = sdiv i64 %473, %238
  %475 = trunc i64 %474 to i32
  %476 = icmp sgt i32 %432, 0
  br i1 %476, label %477, label %495

477:                                              ; preds = %472
  %478 = shl i32 1, %432
  %479 = icmp sgt i32 %478, %475
  %480 = add nsw i32 %478, -1
  %481 = select i1 %479, i32 %475, i32 %480
  br label %495

482:                                              ; preds = %467
  %483 = sub nsw i64 %237, %470
  %484 = sdiv i64 %483, %238
  %485 = trunc i64 %484 to i32
  %486 = icmp sgt i32 %432, 0
  br i1 %486, label %487, label %492

487:                                              ; preds = %482
  %488 = shl i32 1, %432
  %489 = icmp sgt i32 %488, %485
  %490 = add nsw i32 %488, -1
  %491 = select i1 %489, i32 %485, i32 %490
  br label %492

492:                                              ; preds = %487, %482
  %493 = phi i32 [ %485, %482 ], [ %491, %487 ]
  %494 = sub nsw i32 0, %493
  br label %495

495:                                              ; preds = %477, %472, %492
  %496 = phi i32 [ %475, %472 ], [ %494, %492 ], [ %481, %477 ]
  %497 = trunc i32 %496 to i16
  store i16 %497, i16* %55, align 2
  br label %498

498:                                              ; preds = %426, %495, %434
  %499 = load i32, i32* %239, align 4
  %500 = icmp eq i32 %499, 0
  br i1 %500, label %565, label %501

501:                                              ; preds = %498
  %502 = load i16, i16* %56, align 2
  %503 = icmp eq i16 %502, 0
  br i1 %503, label %504, label %565

504:                                              ; preds = %501
  br i1 %187, label %505, label %528

505:                                              ; preds = %504
  %506 = add i32 %353, %354
  %507 = sub i32 %361, %506
  %508 = add i32 %507, %360
  %509 = sub i32 %508, %403
  %510 = add i32 %509, %407
  %511 = mul i32 %510, 3
  %512 = add i32 %404, %371
  %513 = sub i32 %512, %358
  %514 = sub i32 %513, %406
  %515 = mul i32 %514, 13
  %516 = sub i32 %370, %364
  %517 = mul i32 %516, 38
  %518 = add i32 %355, %356
  %519 = sub i32 %365, %518
  %520 = add i32 %519, %362
  %521 = add i32 %520, %517
  %522 = add i32 %521, %515
  %523 = add i32 %522, %511
  %524 = sub i32 %523, %427
  %525 = sub i32 %524, %428
  %526 = add i32 %525, %430
  %527 = add i32 %526, %431
  br label %534

528:                                              ; preds = %504
  %529 = sub i32 %370, %364
  %530 = mul i32 %529, 50
  %531 = sub i32 %360, %353
  %532 = mul i32 %531, 7
  %533 = add i32 %532, %530
  br label %534

534:                                              ; preds = %528, %505
  %535 = phi i32 [ %527, %505 ], [ %533, %528 ]
  %536 = sext i32 %535 to i64
  %537 = mul nsw i64 %536, %192
  %538 = icmp sgt i64 %537, -1
  br i1 %538, label %539, label %549

539:                                              ; preds = %534
  %540 = add nsw i64 %537, %240
  %541 = sdiv i64 %540, %241
  %542 = trunc i64 %541 to i32
  %543 = icmp sgt i32 %499, 0
  br i1 %543, label %544, label %562

544:                                              ; preds = %539
  %545 = shl i32 1, %499
  %546 = icmp sgt i32 %545, %542
  %547 = add nsw i32 %545, -1
  %548 = select i1 %546, i32 %542, i32 %547
  br label %562

549:                                              ; preds = %534
  %550 = sub nsw i64 %240, %537
  %551 = sdiv i64 %550, %241
  %552 = trunc i64 %551 to i32
  %553 = icmp sgt i32 %499, 0
  br i1 %553, label %554, label %559

554:                                              ; preds = %549
  %555 = shl i32 1, %499
  %556 = icmp sgt i32 %555, %552
  %557 = add nsw i32 %555, -1
  %558 = select i1 %556, i32 %552, i32 %557
  br label %559

559:                                              ; preds = %554, %549
  %560 = phi i32 [ %552, %549 ], [ %558, %554 ]
  %561 = sub nsw i32 0, %560
  br label %562

562:                                              ; preds = %544, %539, %559
  %563 = phi i32 [ %542, %539 ], [ %561, %559 ], [ %548, %544 ]
  %564 = trunc i32 %563 to i16
  store i16 %564, i16* %56, align 2
  br label %565

565:                                              ; preds = %498, %562, %501
  %566 = load i32, i32* %242, align 4
  %567 = icmp eq i32 %566, 0
  br i1 %567, label %625, label %568

568:                                              ; preds = %565
  %569 = load i16, i16* %57, align 2
  %570 = icmp eq i16 %569, 0
  br i1 %570, label %571, label %625

571:                                              ; preds = %568
  br i1 %187, label %572, label %587

572:                                              ; preds = %571
  %573 = mul i32 %367, -14
  %574 = add i32 %404, %371
  %575 = add i32 %574, %358
  %576 = add i32 %575, %406
  %577 = shl i32 %576, 1
  %578 = add i32 %405, %368
  %579 = mul i32 %578, -5
  %580 = add i32 %364, %370
  %581 = mul i32 %580, 7
  %582 = add i32 %573, %353
  %583 = add i32 %582, %581
  %584 = add i32 %583, %360
  %585 = add i32 %584, %579
  %586 = add i32 %585, %577
  br label %594

587:                                              ; preds = %571
  %588 = mul i32 %367, -24
  %589 = add i32 %364, %370
  %590 = mul i32 %589, 13
  %591 = sub i32 %588, %353
  %592 = add i32 %591, %590
  %593 = sub i32 %592, %360
  br label %594

594:                                              ; preds = %587, %572
  %595 = phi i32 [ %586, %572 ], [ %593, %587 ]
  %596 = sext i32 %595 to i64
  %597 = mul nsw i64 %596, %192
  %598 = icmp sgt i64 %597, -1
  br i1 %598, label %599, label %609

599:                                              ; preds = %594
  %600 = add nsw i64 %597, %243
  %601 = sdiv i64 %600, %244
  %602 = trunc i64 %601 to i32
  %603 = icmp sgt i32 %566, 0
  br i1 %603, label %604, label %622

604:                                              ; preds = %599
  %605 = shl i32 1, %566
  %606 = icmp sgt i32 %605, %602
  %607 = add nsw i32 %605, -1
  %608 = select i1 %606, i32 %602, i32 %607
  br label %622

609:                                              ; preds = %594
  %610 = sub nsw i64 %243, %597
  %611 = sdiv i64 %610, %244
  %612 = trunc i64 %611 to i32
  %613 = icmp sgt i32 %566, 0
  br i1 %613, label %614, label %619

614:                                              ; preds = %609
  %615 = shl i32 1, %566
  %616 = icmp sgt i32 %615, %612
  %617 = add nsw i32 %615, -1
  %618 = select i1 %616, i32 %612, i32 %617
  br label %619

619:                                              ; preds = %614, %609
  %620 = phi i32 [ %612, %609 ], [ %618, %614 ]
  %621 = sub nsw i32 0, %620
  br label %622

622:                                              ; preds = %604, %599, %619
  %623 = phi i32 [ %602, %599 ], [ %621, %619 ], [ %608, %604 ]
  %624 = trunc i32 %623 to i16
  store i16 %624, i16* %57, align 2
  br label %625

625:                                              ; preds = %565, %622, %568
  %626 = load i32, i32* %245, align 4
  %627 = icmp eq i32 %626, 0
  br i1 %627, label %682, label %628

628:                                              ; preds = %625
  %629 = load i16, i16* %58, align 2
  %630 = icmp eq i16 %629, 0
  br i1 %630, label %631, label %682

631:                                              ; preds = %628
  %632 = sub i32 %371, %358
  %633 = sub i32 %632, %404
  %634 = add i32 %633, %406
  br i1 %187, label %635, label %638

635:                                              ; preds = %631
  %636 = mul i32 %634, 9
  %637 = sub i32 %362, %356
  br label %645

638:                                              ; preds = %631
  %639 = mul i32 %634, 10
  %640 = add i32 %355, %354
  %641 = sub i32 %365, %640
  %642 = add i32 %641, %361
  %643 = add i32 %642, %403
  %644 = sub i32 %643, %407
  br label %645

645:                                              ; preds = %638, %635
  %646 = phi i32 [ %639, %638 ], [ %636, %635 ]
  %647 = phi i32 [ %644, %638 ], [ %637, %635 ]
  %648 = phi i32 [ %428, %638 ], [ %427, %635 ]
  %649 = phi i32 [ %430, %638 ], [ %431, %635 ]
  %650 = add i32 %647, %646
  %651 = add i32 %650, %648
  %652 = sub i32 %651, %649
  %653 = sext i32 %652 to i64
  %654 = mul nsw i64 %653, %192
  %655 = icmp sgt i64 %654, -1
  br i1 %655, label %656, label %666

656:                                              ; preds = %645
  %657 = add nsw i64 %654, %246
  %658 = sdiv i64 %657, %247
  %659 = trunc i64 %658 to i32
  %660 = icmp sgt i32 %626, 0
  br i1 %660, label %661, label %679

661:                                              ; preds = %656
  %662 = shl i32 1, %626
  %663 = icmp sgt i32 %662, %659
  %664 = add nsw i32 %662, -1
  %665 = select i1 %663, i32 %659, i32 %664
  br label %679

666:                                              ; preds = %645
  %667 = sub nsw i64 %246, %654
  %668 = sdiv i64 %667, %247
  %669 = trunc i64 %668 to i32
  %670 = icmp sgt i32 %626, 0
  br i1 %670, label %671, label %676

671:                                              ; preds = %666
  %672 = shl i32 1, %626
  %673 = icmp sgt i32 %672, %669
  %674 = add nsw i32 %672, -1
  %675 = select i1 %673, i32 %669, i32 %674
  br label %676

676:                                              ; preds = %671, %666
  %677 = phi i32 [ %669, %666 ], [ %675, %671 ]
  %678 = sub nsw i32 0, %677
  br label %679

679:                                              ; preds = %661, %656, %676
  %680 = phi i32 [ %659, %656 ], [ %678, %676 ], [ %665, %661 ]
  %681 = trunc i32 %680 to i16
  store i16 %681, i16* %58, align 2
  br label %682

682:                                              ; preds = %625, %679, %628
  %683 = load i32, i32* %248, align 4
  %684 = icmp eq i32 %683, 0
  br i1 %684, label %742, label %685

685:                                              ; preds = %682
  %686 = load i16, i16* %59, align 2
  %687 = icmp eq i16 %686, 0
  br i1 %687, label %688, label %742

688:                                              ; preds = %685
  br i1 %187, label %689, label %704

689:                                              ; preds = %688
  %690 = mul i32 %367, -14
  %691 = add i32 %404, %371
  %692 = add i32 %691, %358
  %693 = add i32 %692, %406
  %694 = shl i32 %693, 1
  %695 = add i32 %405, %368
  %696 = mul i32 %695, 7
  %697 = add i32 %364, %370
  %698 = mul i32 %697, -5
  %699 = add i32 %690, %357
  %700 = add i32 %699, %698
  %701 = add i32 %700, %696
  %702 = add i32 %701, %694
  %703 = add i32 %702, %429
  br label %711

704:                                              ; preds = %688
  %705 = mul i32 %367, -24
  %706 = add i32 %405, %368
  %707 = mul i32 %706, 13
  %708 = sub i32 %705, %357
  %709 = add i32 %708, %707
  %710 = sub i32 %709, %429
  br label %711

711:                                              ; preds = %704, %689
  %712 = phi i32 [ %703, %689 ], [ %710, %704 ]
  %713 = sext i32 %712 to i64
  %714 = mul nsw i64 %713, %192
  %715 = icmp sgt i64 %714, -1
  br i1 %715, label %716, label %726

716:                                              ; preds = %711
  %717 = add nsw i64 %714, %249
  %718 = sdiv i64 %717, %250
  %719 = trunc i64 %718 to i32
  %720 = icmp sgt i32 %683, 0
  br i1 %720, label %721, label %739

721:                                              ; preds = %716
  %722 = shl i32 1, %683
  %723 = icmp sgt i32 %722, %719
  %724 = add nsw i32 %722, -1
  %725 = select i1 %723, i32 %719, i32 %724
  br label %739

726:                                              ; preds = %711
  %727 = sub nsw i64 %249, %714
  %728 = sdiv i64 %727, %250
  %729 = trunc i64 %728 to i32
  %730 = icmp sgt i32 %683, 0
  br i1 %730, label %731, label %736

731:                                              ; preds = %726
  %732 = shl i32 1, %683
  %733 = icmp sgt i32 %732, %729
  %734 = add nsw i32 %732, -1
  %735 = select i1 %733, i32 %729, i32 %734
  br label %736

736:                                              ; preds = %731, %726
  %737 = phi i32 [ %729, %726 ], [ %735, %731 ]
  %738 = sub nsw i32 0, %737
  br label %739

739:                                              ; preds = %721, %716, %736
  %740 = phi i32 [ %719, %716 ], [ %738, %736 ], [ %725, %721 ]
  %741 = trunc i32 %740 to i16
  store i16 %741, i16* %59, align 2
  br label %742

742:                                              ; preds = %682, %739, %685
  br i1 %187, label %743, label %963

743:                                              ; preds = %742
  %744 = load i32, i32* %251, align 4
  %745 = icmp eq i32 %744, 0
  br i1 %745, label %786, label %746

746:                                              ; preds = %743
  %747 = load i16, i16* %60, align 2
  %748 = icmp eq i16 %747, 0
  br i1 %748, label %749, label %786

749:                                              ; preds = %746
  %750 = shl i32 %368, 1
  %751 = shl nsw i32 %405, 1
  %752 = add i32 %750, %371
  %753 = add i32 %752, %358
  %754 = sub i32 %753, %404
  %755 = sub i32 %754, %751
  %756 = sub i32 %755, %406
  %757 = sext i32 %756 to i64
  %758 = mul nsw i64 %757, %192
  %759 = icmp sgt i64 %758, -1
  br i1 %759, label %760, label %770

760:                                              ; preds = %749
  %761 = add nsw i64 %758, %252
  %762 = sdiv i64 %761, %253
  %763 = trunc i64 %762 to i32
  %764 = icmp sgt i32 %744, 0
  br i1 %764, label %765, label %783

765:                                              ; preds = %760
  %766 = shl i32 1, %744
  %767 = icmp sgt i32 %766, %763
  %768 = add nsw i32 %766, -1
  %769 = select i1 %767, i32 %763, i32 %768
  br label %783

770:                                              ; preds = %749
  %771 = sub nsw i64 %252, %758
  %772 = sdiv i64 %771, %253
  %773 = trunc i64 %772 to i32
  %774 = icmp sgt i32 %744, 0
  br i1 %774, label %775, label %780

775:                                              ; preds = %770
  %776 = shl i32 1, %744
  %777 = icmp sgt i32 %776, %773
  %778 = add nsw i32 %776, -1
  %779 = select i1 %777, i32 %773, i32 %778
  br label %780

780:                                              ; preds = %775, %770
  %781 = phi i32 [ %773, %770 ], [ %779, %775 ]
  %782 = sub nsw i32 0, %781
  br label %783

783:                                              ; preds = %765, %760, %780
  %784 = phi i32 [ %763, %760 ], [ %782, %780 ], [ %769, %765 ]
  %785 = trunc i32 %784 to i16
  store i16 %785, i16* %60, align 2
  br label %786

786:                                              ; preds = %743, %783, %746
  %787 = load i32, i32* %254, align 4
  %788 = icmp eq i32 %787, 0
  br i1 %788, label %828, label %789

789:                                              ; preds = %786
  %790 = load i16, i16* %61, align 2
  %791 = icmp eq i16 %790, 0
  br i1 %791, label %792, label %828

792:                                              ; preds = %789
  %793 = sub i32 %364, %370
  %794 = mul i32 %793, 3
  %795 = add i32 %404, %371
  %796 = sub i32 %795, %358
  %797 = add i32 %796, %794
  %798 = sub i32 %797, %406
  %799 = sext i32 %798 to i64
  %800 = mul nsw i64 %799, %192
  %801 = icmp sgt i64 %800, -1
  br i1 %801, label %802, label %812

802:                                              ; preds = %792
  %803 = add nsw i64 %800, %255
  %804 = sdiv i64 %803, %256
  %805 = trunc i64 %804 to i32
  %806 = icmp sgt i32 %787, 0
  br i1 %806, label %807, label %825

807:                                              ; preds = %802
  %808 = shl i32 1, %787
  %809 = icmp sgt i32 %808, %805
  %810 = add nsw i32 %808, -1
  %811 = select i1 %809, i32 %805, i32 %810
  br label %825

812:                                              ; preds = %792
  %813 = sub nsw i64 %255, %800
  %814 = sdiv i64 %813, %256
  %815 = trunc i64 %814 to i32
  %816 = icmp sgt i32 %787, 0
  br i1 %816, label %817, label %822

817:                                              ; preds = %812
  %818 = shl i32 1, %787
  %819 = icmp sgt i32 %818, %815
  %820 = add nsw i32 %818, -1
  %821 = select i1 %819, i32 %815, i32 %820
  br label %822

822:                                              ; preds = %817, %812
  %823 = phi i32 [ %815, %812 ], [ %821, %817 ]
  %824 = sub nsw i32 0, %823
  br label %825

825:                                              ; preds = %807, %802, %822
  %826 = phi i32 [ %805, %802 ], [ %824, %822 ], [ %811, %807 ]
  %827 = trunc i32 %826 to i16
  store i16 %827, i16* %61, align 2
  br label %828

828:                                              ; preds = %786, %825, %789
  %829 = load i32, i32* %257, align 4
  %830 = icmp eq i32 %829, 0
  br i1 %830, label %870, label %831

831:                                              ; preds = %828
  %832 = load i16, i16* %62, align 2
  %833 = icmp eq i16 %832, 0
  br i1 %833, label %834, label %870

834:                                              ; preds = %831
  %835 = sub i32 %405, %368
  %836 = mul i32 %835, 3
  %837 = add i32 %358, %371
  %838 = sub i32 %837, %404
  %839 = sub i32 %838, %406
  %840 = add i32 %839, %836
  %841 = sext i32 %840 to i64
  %842 = mul nsw i64 %841, %192
  %843 = icmp sgt i64 %842, -1
  br i1 %843, label %844, label %854

844:                                              ; preds = %834
  %845 = add nsw i64 %842, %258
  %846 = sdiv i64 %845, %259
  %847 = trunc i64 %846 to i32
  %848 = icmp sgt i32 %829, 0
  br i1 %848, label %849, label %867

849:                                              ; preds = %844
  %850 = shl i32 1, %829
  %851 = icmp sgt i32 %850, %847
  %852 = add nsw i32 %850, -1
  %853 = select i1 %851, i32 %847, i32 %852
  br label %867

854:                                              ; preds = %834
  %855 = sub nsw i64 %258, %842
  %856 = sdiv i64 %855, %259
  %857 = trunc i64 %856 to i32
  %858 = icmp sgt i32 %829, 0
  br i1 %858, label %859, label %864

859:                                              ; preds = %854
  %860 = shl i32 1, %829
  %861 = icmp sgt i32 %860, %857
  %862 = add nsw i32 %860, -1
  %863 = select i1 %861, i32 %857, i32 %862
  br label %864

864:                                              ; preds = %859, %854
  %865 = phi i32 [ %857, %854 ], [ %863, %859 ]
  %866 = sub nsw i32 0, %865
  br label %867

867:                                              ; preds = %849, %844, %864
  %868 = phi i32 [ %847, %844 ], [ %866, %864 ], [ %853, %849 ]
  %869 = trunc i32 %868 to i16
  store i16 %869, i16* %62, align 2
  br label %870

870:                                              ; preds = %828, %867, %831
  %871 = load i32, i32* %260, align 4
  %872 = icmp eq i32 %871, 0
  br i1 %872, label %913, label %873

873:                                              ; preds = %870
  %874 = load i16, i16* %63, align 2
  %875 = icmp eq i16 %874, 0
  br i1 %875, label %876, label %913

876:                                              ; preds = %873
  %877 = shl i32 %370, 1
  %878 = shl nsw i32 %364, 1
  %879 = add i32 %404, %371
  %880 = add i32 %879, %877
  %881 = sub i32 %880, %358
  %882 = sub i32 %881, %878
  %883 = sub i32 %882, %406
  %884 = sext i32 %883 to i64
  %885 = mul nsw i64 %884, %192
  %886 = icmp sgt i64 %885, -1
  br i1 %886, label %887, label %897

887:                                              ; preds = %876
  %888 = add nsw i64 %885, %261
  %889 = sdiv i64 %888, %262
  %890 = trunc i64 %889 to i32
  %891 = icmp sgt i32 %871, 0
  br i1 %891, label %892, label %910

892:                                              ; preds = %887
  %893 = shl i32 1, %871
  %894 = icmp sgt i32 %893, %890
  %895 = add nsw i32 %893, -1
  %896 = select i1 %894, i32 %890, i32 %895
  br label %910

897:                                              ; preds = %876
  %898 = sub nsw i64 %261, %885
  %899 = sdiv i64 %898, %262
  %900 = trunc i64 %899 to i32
  %901 = icmp sgt i32 %871, 0
  br i1 %901, label %902, label %907

902:                                              ; preds = %897
  %903 = shl i32 1, %871
  %904 = icmp sgt i32 %903, %900
  %905 = add nsw i32 %903, -1
  %906 = select i1 %904, i32 %900, i32 %905
  br label %907

907:                                              ; preds = %902, %897
  %908 = phi i32 [ %900, %897 ], [ %906, %902 ]
  %909 = sub nsw i32 0, %908
  br label %910

910:                                              ; preds = %892, %887, %907
  %911 = phi i32 [ %890, %887 ], [ %909, %907 ], [ %896, %892 ]
  %912 = trunc i32 %911 to i16
  store i16 %912, i16* %63, align 2
  br label %913

913:                                              ; preds = %870, %910, %873
  %914 = mul nsw i32 %356, -2
  %915 = shl nsw i32 %353, 3
  %916 = shl nsw i32 %427, 1
  %917 = shl nsw i32 %357, 3
  %918 = mul nsw i32 %367, 152
  %919 = shl nsw i32 %429, 3
  %920 = shl nsw i32 %362, 1
  %921 = shl nsw i32 %360, 3
  %922 = shl nsw i32 %431, 1
  %923 = add i32 %355, %354
  %924 = sub i32 %371, %923
  %925 = sub i32 %924, %365
  %926 = add i32 %925, %358
  %927 = sub i32 %926, %361
  %928 = sub i32 %927, %403
  %929 = add i32 %928, %404
  %930 = add i32 %929, %406
  %931 = sub i32 %930, %407
  %932 = sub i32 %931, %428
  %933 = sub i32 %932, %430
  %934 = mul i32 %933, 6
  %935 = add i32 %368, %370
  %936 = add i32 %935, %364
  %937 = add i32 %936, %405
  %938 = mul i32 %937, 42
  %939 = sub i32 %914, %915
  %940 = sub i32 %939, %917
  %941 = add i32 %940, %918
  %942 = sub i32 %941, %920
  %943 = sub i32 %942, %921
  %944 = add i32 %943, %938
  %945 = sub i32 %944, %916
  %946 = sub i32 %945, %919
  %947 = sub i32 %946, %922
  %948 = add i32 %947, %934
  %949 = sext i32 %948 to i64
  %950 = mul nsw i64 %949, %192
  %951 = icmp sgt i64 %950, -1
  br i1 %951, label %952, label %956

952:                                              ; preds = %913
  %953 = add nsw i64 %950, %263
  %954 = sdiv i64 %953, %264
  %955 = trunc i64 %954 to i16
  br label %961

956:                                              ; preds = %913
  %957 = sub nsw i64 %263, %950
  %958 = sdiv i64 %957, %264
  %959 = trunc i64 %958 to i16
  %960 = sub i16 0, %959
  br label %961

961:                                              ; preds = %956, %952
  %962 = phi i16 [ %955, %952 ], [ %960, %956 ]
  store i16 %962, i16* %10, align 2
  br label %963

963:                                              ; preds = %961, %742
  tail call void %228(%struct.jpeg_decompress_struct* %0, %struct.jpeg_component_info* %70, i16* %10, i8** %272, i32 %373) #5
  %964 = getelementptr inbounds [64 x i16], [64 x i16]* %378, i64 1
  %965 = getelementptr inbounds [64 x i16], [64 x i16]* %376, i64 1
  %966 = getelementptr inbounds [64 x i16], [64 x i16]* %375, i64 1
  %967 = getelementptr inbounds [64 x i16], [64 x i16]* %377, i64 1
  %968 = getelementptr inbounds [64 x i16], [64 x i16]* %374, i64 1
  %969 = load i32, i32* %265, align 4
  %970 = add i32 %969, %373
  %971 = load %struct.jpeg_decomp_master*, %struct.jpeg_decomp_master** %51, align 8
  %972 = getelementptr inbounds %struct.jpeg_decomp_master, %struct.jpeg_decomp_master* %971, i64 0, i32 6, i64 %65
  %973 = load i32, i32* %972, align 4
  %974 = icmp ugt i32 %408, %973
  br i1 %974, label %975, label %352

975:                                              ; preds = %963, %350
  %976 = phi i32 [ %351, %350 ], [ %969, %963 ]
  %977 = phi %struct.jpeg_decomp_master* [ %270, %350 ], [ %971, %963 ]
  %978 = sext i32 %976 to i64
  %979 = getelementptr inbounds i8*, i8** %272, i64 %978
  %980 = add nuw nsw i64 %271, 1
  %981 = icmp eq i64 %980, %268
  br i1 %981, label %982, label %269

982:                                              ; preds = %975, %221, %64
  %983 = phi i64 [ %69, %64 ], [ %222, %221 ], [ %222, %975 ]
  %984 = phi i64 [ %68, %64 ], [ %223, %221 ], [ %223, %975 ]
  %985 = phi i64 [ %67, %64 ], [ %224, %221 ], [ %224, %975 ]
  %986 = phi i64 [ %66, %64 ], [ %225, %221 ], [ %225, %975 ]
  %987 = add nuw nsw i64 %65, 1
  %988 = getelementptr inbounds %struct.jpeg_component_info, %struct.jpeg_component_info* %70, i64 1
  %989 = load i32, i32* %42, align 8
  %990 = sext i32 %989 to i64
  %991 = icmp slt i64 %987, %990
  br i1 %991, label %64, label %992

992:                                              ; preds = %982, %41
  %993 = load i32, i32* %16, align 8
  %994 = add i32 %993, 1
  store i32 %994, i32* %16, align 8
  %995 = load i32, i32* %6, align 4
  %996 = icmp ult i32 %994, %995
  %997 = select i1 %996, i32 3, i32 4
  br label %998

998:                                              ; preds = %36, %992
  %999 = phi i32 [ %997, %992 ], [ 0, %36 ]
  ret i32 %999
}

declare void @jcopy_block_row([64 x i16]*, [64 x i16]*, i32) local_unnamed_addr #3

declare void @jzero_far(i8*, i64) local_unnamed_addr #3

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { nofree norecurse nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { norecurse nounwind readnone ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
