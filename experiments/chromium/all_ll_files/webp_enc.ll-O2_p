; ModuleID = '../../third_party/libwebp/src/enc/webp_enc.c'
source_filename = "../../third_party/libwebp/src/enc/webp_enc.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%struct.WebPPicture = type { i32, i32, i32, i32, i8*, i8*, i8*, i32, i32, i8*, i32, [2 x i32], i32*, i32, [3 x i32], i32 (i8*, i64, %struct.WebPPicture*)*, i8*, i32, i8*, %struct.WebPAuxStats*, i32, i32 (i32, %struct.WebPPicture*)*, i8*, [3 x i32], i8*, i8*, [8 x i32], i8*, i8*, [2 x i8*] }
%struct.WebPAuxStats = type { i32, [5 x float], [3 x i32], [2 x i32], [3 x [4 x i32]], [4 x i32], [4 x i32], [4 x i32], i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, [2 x i32] }
%struct.WebPConfig = type { i32, float, i32, i32, i32, float, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }
%struct.VP8Encoder = type { %struct.WebPConfig*, %struct.WebPPicture*, %struct.VP8EncFilterHeader, %struct.VP8EncSegmentHeader, i32, i32, i32, i32, i32, %struct.VP8BitWriter, [8 x %struct.VP8BitWriter], %struct.VP8TBuffer, i32, i32, i8*, i32, %struct.WebPWorker, [4 x %struct.VP8SegmentInfo], i32, i32, i32, i32, i32, i32, i32, i32, %struct.VP8EncProba, [4 x i64], i64, i32, [3 x [4 x i32]], [3 x i32], i32, i32, i32, i32, i32, i32, i32, %struct.VP8MBInfo*, i8*, i32*, i8*, i8*, [4 x [64 x double]]*, [2 x [2 x i8]]* }
%struct.VP8EncFilterHeader = type { i32, i32, i32, i32 }
%struct.VP8EncSegmentHeader = type { i32, i32, i32 }
%struct.VP8BitWriter = type { i32, i32, i32, i32, i8*, i64, i64, i32 }
%struct.VP8TBuffer = type { %struct.VP8Tokens*, %struct.VP8Tokens**, i16*, i32, i32, i32 }
%struct.VP8Tokens = type opaque
%struct.WebPWorker = type { i8*, i32, i32 (i8*, i8*)*, i8*, i8*, i32 }
%struct.VP8SegmentInfo = type { %struct.VP8Matrix, %struct.VP8Matrix, %struct.VP8Matrix, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i64 }
%struct.VP8Matrix = type { [16 x i16], [16 x i16], [16 x i32], [16 x i32], [16 x i16] }
%struct.VP8EncProba = type { [3 x i8], i8, [4 x [8 x [3 x [11 x i8]]]], [4 x [8 x [3 x [11 x i32]]]], [4 x [8 x [3 x [68 x i16]]]], [4 x [16 x [3 x i16*]]], i32, i32, i32 }
%struct.VP8MBInfo = type { i8, i8, [2 x i8] }

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden i32 @WebPGetEncoderVersion() local_unnamed_addr #0 {
  ret i32 66048
}

; Function Attrs: nofree norecurse nounwind ssp uwtable writeonly
define hidden i32 @WebPEncodingSetError(%struct.WebPPicture* nocapture, i32) local_unnamed_addr #1 {
  %3 = getelementptr inbounds %struct.WebPPicture, %struct.WebPPicture* %0, i64 0, i32 20
  store i32 %1, i32* %3, align 8
  ret i32 0
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @WebPReportProgress(%struct.WebPPicture*, i32, i32*) local_unnamed_addr #2 {
  %4 = icmp eq i32* %2, null
  br i1 %4, label %17, label %5

5:                                                ; preds = %3
  %6 = load i32, i32* %2, align 4
  %7 = icmp eq i32 %6, %1
  br i1 %7, label %17, label %8

8:                                                ; preds = %5
  store i32 %1, i32* %2, align 4
  %9 = getelementptr inbounds %struct.WebPPicture, %struct.WebPPicture* %0, i64 0, i32 21
  %10 = load i32 (i32, %struct.WebPPicture*)*, i32 (i32, %struct.WebPPicture*)** %9, align 8
  %11 = icmp eq i32 (i32, %struct.WebPPicture*)* %10, null
  br i1 %11, label %17, label %12

12:                                               ; preds = %8
  %13 = tail call i32 %10(i32 %1, %struct.WebPPicture* %0) #5
  %14 = icmp eq i32 %13, 0
  br i1 %14, label %15, label %17

15:                                               ; preds = %12
  %16 = getelementptr inbounds %struct.WebPPicture, %struct.WebPPicture* %0, i64 0, i32 20
  store i32 10, i32* %16, align 8
  br label %17

17:                                               ; preds = %3, %5, %8, %12, %15
  %18 = phi i32 [ 0, %15 ], [ 1, %12 ], [ 1, %8 ], [ 1, %5 ], [ 1, %3 ]
  ret i32 %18
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @WebPEncode(%struct.WebPConfig*, %struct.WebPPicture*) local_unnamed_addr #2 {
  %3 = icmp eq %struct.WebPPicture* %1, null
  br i1 %3, label %379, label %4

4:                                                ; preds = %2
  %5 = getelementptr inbounds %struct.WebPPicture, %struct.WebPPicture* %1, i64 0, i32 20
  store i32 0, i32* %5, align 8
  %6 = icmp eq %struct.WebPConfig* %0, null
  br i1 %6, label %7, label %8

7:                                                ; preds = %4
  store i32 3, i32* %5, align 8
  br label %379

8:                                                ; preds = %4
  %9 = tail call i32 @WebPValidateConfig(%struct.WebPConfig* nonnull %0) #5
  %10 = icmp eq i32 %9, 0
  br i1 %10, label %11, label %12

11:                                               ; preds = %8
  store i32 4, i32* %5, align 8
  br label %379

12:                                               ; preds = %8
  %13 = getelementptr inbounds %struct.WebPPicture, %struct.WebPPicture* %1, i64 0, i32 2
  %14 = load i32, i32* %13, align 8
  %15 = icmp slt i32 %14, 1
  br i1 %15, label %20, label %16

16:                                               ; preds = %12
  %17 = getelementptr inbounds %struct.WebPPicture, %struct.WebPPicture* %1, i64 0, i32 3
  %18 = load i32, i32* %17, align 4
  %19 = icmp slt i32 %18, 1
  br i1 %19, label %20, label %21

20:                                               ; preds = %16, %12
  store i32 5, i32* %5, align 8
  br label %379

21:                                               ; preds = %16
  %22 = icmp sgt i32 %14, 16383
  %23 = icmp sgt i32 %18, 16383
  %24 = or i1 %22, %23
  br i1 %24, label %25, label %26

25:                                               ; preds = %21
  store i32 5, i32* %5, align 8
  br label %379

26:                                               ; preds = %21
  %27 = getelementptr inbounds %struct.WebPPicture, %struct.WebPPicture* %1, i64 0, i32 19
  %28 = load %struct.WebPAuxStats*, %struct.WebPAuxStats** %27, align 8
  %29 = icmp eq %struct.WebPAuxStats* %28, null
  br i1 %29, label %32, label %30

30:                                               ; preds = %26
  %31 = bitcast %struct.WebPAuxStats* %28 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* nonnull align 4 %31, i8 0, i64 188, i1 false)
  br label %32

32:                                               ; preds = %26, %30
  %33 = getelementptr inbounds %struct.WebPConfig, %struct.WebPConfig* %0, i64 0, i32 0
  %34 = load i32, i32* %33, align 4
  %35 = icmp eq i32 %34, 0
  br i1 %35, label %36, label %365

36:                                               ; preds = %32
  %37 = getelementptr inbounds %struct.WebPPicture, %struct.WebPPicture* %1, i64 0, i32 0
  %38 = load i32, i32* %37, align 8
  %39 = icmp eq i32 %38, 0
  br i1 %39, label %40, label %52

40:                                               ; preds = %36
  %41 = getelementptr inbounds %struct.WebPPicture, %struct.WebPPicture* %1, i64 0, i32 4
  %42 = load i8*, i8** %41, align 8
  %43 = icmp eq i8* %42, null
  br i1 %43, label %52, label %44

44:                                               ; preds = %40
  %45 = getelementptr inbounds %struct.WebPPicture, %struct.WebPPicture* %1, i64 0, i32 5
  %46 = load i8*, i8** %45, align 8
  %47 = icmp eq i8* %46, null
  br i1 %47, label %52, label %48

48:                                               ; preds = %44
  %49 = getelementptr inbounds %struct.WebPPicture, %struct.WebPPicture* %1, i64 0, i32 6
  %50 = load i8*, i8** %49, align 8
  %51 = icmp eq i8* %50, null
  br i1 %51, label %52, label %79

52:                                               ; preds = %36, %48, %44, %40
  %53 = getelementptr inbounds %struct.WebPConfig, %struct.WebPConfig* %0, i64 0, i32 26
  %54 = load i32, i32* %53, align 4
  %55 = icmp eq i32 %54, 0
  br i1 %55, label %56, label %61

56:                                               ; preds = %52
  %57 = getelementptr inbounds %struct.WebPConfig, %struct.WebPConfig* %0, i64 0, i32 17
  %58 = load i32, i32* %57, align 4
  %59 = and i32 %58, 4
  %60 = icmp eq i32 %59, 0
  br i1 %60, label %64, label %61

61:                                               ; preds = %56, %52
  %62 = tail call i32 @WebPPictureSharpARGBToYUVA(%struct.WebPPicture* nonnull %1) #5
  %63 = icmp eq i32 %62, 0
  br i1 %63, label %379, label %79

64:                                               ; preds = %56
  %65 = and i32 %58, 2
  %66 = icmp eq i32 %65, 0
  br i1 %66, label %75, label %67

67:                                               ; preds = %64
  %68 = getelementptr inbounds %struct.WebPConfig, %struct.WebPConfig* %0, i64 0, i32 1
  %69 = load float, float* %68, align 4
  %70 = fdiv float %69, 1.000000e+02
  %71 = fmul float %70, %70
  %72 = fmul float %71, -5.000000e-01
  %73 = fmul float %71, %72
  %74 = fadd float %73, 1.000000e+00
  br label %75

75:                                               ; preds = %64, %67
  %76 = phi float [ %74, %67 ], [ 0.000000e+00, %64 ]
  %77 = tail call i32 @WebPPictureARGBToYUVADithered(%struct.WebPPicture* nonnull %1, i32 0, float %76) #5
  %78 = icmp eq i32 %77, 0
  br i1 %78, label %379, label %79

79:                                               ; preds = %75, %61, %48
  %80 = getelementptr inbounds %struct.WebPConfig, %struct.WebPConfig* %0, i64 0, i32 24
  %81 = load i32, i32* %80, align 4
  %82 = icmp eq i32 %81, 0
  br i1 %82, label %83, label %84

83:                                               ; preds = %79
  tail call void @WebPCleanupTransparentArea(%struct.WebPPicture* nonnull %1) #5
  br label %84

84:                                               ; preds = %79, %83
  %85 = getelementptr inbounds %struct.WebPConfig, %struct.WebPConfig* %0, i64 0, i32 8
  %86 = load i32, i32* %85, align 4
  %87 = icmp sgt i32 %86, 0
  %88 = getelementptr inbounds %struct.WebPConfig, %struct.WebPConfig* %0, i64 0, i32 11
  %89 = load i32, i32* %88, align 4
  %90 = icmp sgt i32 %89, 0
  %91 = or i1 %87, %90
  %92 = load i32, i32* %13, align 8
  %93 = add nsw i32 %92, 15
  %94 = ashr i32 %93, 4
  %95 = load i32, i32* %17, align 4
  %96 = add nsw i32 %95, 15
  %97 = ashr i32 %96, 4
  %98 = shl nsw i32 %94, 2
  %99 = or i32 %98, 1
  %100 = shl nsw i32 %97, 2
  %101 = or i32 %100, 1
  %102 = mul nsw i32 %101, %99
  %103 = sext i32 %102 to i64
  %104 = and i32 %93, -16
  %105 = add nsw i32 %94, 1
  %106 = sext i32 %105 to i64
  %107 = shl nsw i64 %106, 2
  %108 = add nsw i64 %107, 31
  %109 = mul nsw i32 %97, %94
  %110 = sext i32 %109 to i64
  %111 = shl nsw i64 %110, 2
  %112 = shl nsw i32 %104, 1
  %113 = sext i32 %112 to i64
  %114 = or i64 %113, 31
  %115 = icmp ne i32 %89, 0
  %116 = select i1 %115, i64 2079, i64 0
  %117 = getelementptr inbounds %struct.WebPConfig, %struct.WebPConfig* %0, i64 0, i32 1
  %118 = load float, float* %117, align 4
  %119 = fcmp ugt float %118, 9.800000e+01
  br i1 %119, label %120, label %124

120:                                              ; preds = %84
  %121 = getelementptr inbounds %struct.WebPConfig, %struct.WebPConfig* %0, i64 0, i32 15
  %122 = load i32, i32* %121, align 4
  %123 = icmp sgt i32 %122, 1
  br i1 %123, label %124, label %127

124:                                              ; preds = %120, %84
  %125 = sext i32 %94 to i64
  %126 = shl nsw i64 %125, 2
  br label %127

127:                                              ; preds = %124, %120
  %128 = phi i64 [ %126, %124 ], [ 0, %120 ]
  %129 = add nuw nsw i64 %116, 23735
  %130 = add nsw i64 %129, %114
  %131 = add nsw i64 %130, %111
  %132 = add nsw i64 %131, %108
  %133 = add nsw i64 %132, %103
  %134 = add nsw i64 %133, %128
  %135 = tail call i8* @WebPSafeMalloc(i64 %134, i64 1) #5
  %136 = icmp eq i8* %135, null
  br i1 %136, label %137, label %138

137:                                              ; preds = %127
  store i32 1, i32* %5, align 8
  br label %379

138:                                              ; preds = %127
  %139 = bitcast i8* %135 to %struct.VP8Encoder*
  %140 = getelementptr inbounds i8, i8* %135, i64 23704
  %141 = ptrtoint i8* %140 to i64
  %142 = add i64 %141, 31
  %143 = and i64 %142, -32
  %144 = inttoptr i64 %143 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %135, i8 0, i64 23704, i1 false) #5
  %145 = getelementptr inbounds %struct.WebPConfig, %struct.WebPConfig* %0, i64 0, i32 18
  %146 = load i32, i32* %145, align 4
  %147 = shl i32 1, %146
  %148 = getelementptr inbounds i8, i8* %135, i64 60
  %149 = bitcast i8* %148 to i32*
  store i32 %147, i32* %149, align 4
  %150 = getelementptr inbounds i8, i8* %135, i64 48
  %151 = bitcast i8* %150 to i32*
  store i32 %94, i32* %151, align 8
  %152 = getelementptr inbounds i8, i8* %135, i64 52
  %153 = bitcast i8* %152 to i32*
  store i32 %97, i32* %153, align 4
  %154 = getelementptr inbounds i8, i8* %135, i64 56
  %155 = bitcast i8* %154 to i32*
  store i32 %99, i32* %155, align 8
  %156 = inttoptr i64 %143 to %struct.VP8MBInfo*
  %157 = getelementptr inbounds i8, i8* %135, i64 23648
  %158 = bitcast i8* %157 to %struct.VP8MBInfo**
  store %struct.VP8MBInfo* %156, %struct.VP8MBInfo** %158, align 8
  %159 = getelementptr inbounds i8, i8* %144, i64 %111
  %160 = getelementptr inbounds i8, i8* %159, i64 1
  %161 = sext i32 %99 to i64
  %162 = getelementptr inbounds i8, i8* %160, i64 %161
  %163 = getelementptr inbounds i8, i8* %135, i64 23656
  %164 = bitcast i8* %163 to i8**
  store i8* %162, i8** %164, align 8
  %165 = getelementptr inbounds i8, i8* %159, i64 %103
  %166 = ptrtoint i8* %165 to i64
  %167 = add i64 %166, 31
  %168 = and i64 %167, -32
  %169 = inttoptr i64 %168 to i32*
  %170 = getelementptr inbounds i32, i32* %169, i64 1
  %171 = getelementptr inbounds i8, i8* %135, i64 23664
  %172 = bitcast i8* %171 to i32**
  store i32* %170, i32** %172, align 8
  %173 = getelementptr inbounds i8, i8* %165, i64 %108
  %174 = ptrtoint i8* %173 to i64
  %175 = add i64 %174, 31
  %176 = and i64 %175, -32
  %177 = inttoptr i64 %176 to [4 x [64 x double]]*
  %178 = select i1 %115, [4 x [64 x double]]* %177, [4 x [64 x double]]* null
  %179 = getelementptr inbounds i8, i8* %135, i64 23688
  %180 = bitcast i8* %179 to [4 x [64 x double]]**
  store [4 x [64 x double]]* %178, [4 x [64 x double]]** %180, align 8
  %181 = getelementptr inbounds i8, i8* %173, i64 %116
  %182 = ptrtoint i8* %181 to i64
  %183 = add i64 %182, 31
  %184 = and i64 %183, -32
  %185 = inttoptr i64 %184 to i8*
  %186 = getelementptr inbounds i8, i8* %135, i64 23672
  %187 = bitcast i8* %186 to i8**
  store i8* %185, i8** %187, align 8
  %188 = sext i32 %104 to i64
  %189 = getelementptr inbounds i8, i8* %185, i64 %188
  %190 = getelementptr inbounds i8, i8* %135, i64 23680
  %191 = bitcast i8* %190 to i8**
  store i8* %189, i8** %191, align 8
  %192 = getelementptr inbounds i8, i8* %185, i64 %113
  %193 = icmp eq i64 %128, 0
  %194 = bitcast i8* %192 to [2 x [2 x i8]]*
  %195 = select i1 %193, [2 x [2 x i8]]* null, [2 x [2 x i8]]* %194
  %196 = getelementptr inbounds i8, i8* %135, i64 23696
  %197 = bitcast i8* %196 to [2 x [2 x i8]]**
  store [2 x [2 x i8]]* %195, [2 x [2 x i8]]** %197, align 8
  %198 = bitcast i8* %135 to %struct.WebPConfig**
  store %struct.WebPConfig* %0, %struct.WebPConfig** %198, align 8
  br i1 %91, label %199, label %204

199:                                              ; preds = %138
  %200 = getelementptr inbounds %struct.WebPConfig, %struct.WebPConfig* %0, i64 0, i32 10
  %201 = load i32, i32* %200, align 4
  %202 = icmp ne i32 %201, 1
  %203 = zext i1 %202 to i32
  br label %204

204:                                              ; preds = %199, %138
  %205 = phi i32 [ %203, %199 ], [ 2, %138 ]
  %206 = getelementptr inbounds i8, i8* %135, i64 44
  %207 = bitcast i8* %206 to i32*
  store i32 %205, i32* %207, align 4
  %208 = getelementptr inbounds i8, i8* %135, i64 8
  %209 = bitcast i8* %208 to %struct.WebPPicture**
  store %struct.WebPPicture* %1, %struct.WebPPicture** %209, align 8
  %210 = getelementptr inbounds i8, i8* %135, i64 536
  %211 = bitcast i8* %210 to i32*
  store i32 0, i32* %211, align 8
  %212 = getelementptr inbounds %struct.WebPConfig, %struct.WebPConfig* %0, i64 0, i32 2
  %213 = load i32, i32* %212, align 4
  %214 = getelementptr inbounds %struct.WebPConfig, %struct.WebPConfig* %0, i64 0, i32 19
  %215 = load i32, i32* %214, align 4
  %216 = sub nsw i32 100, %215
  %217 = getelementptr inbounds i8, i8* %135, i64 23616
  %218 = bitcast i8* %217 to i32*
  store i32 %213, i32* %218, align 8
  %219 = icmp sgt i32 %213, 5
  br i1 %219, label %225, label %220

220:                                              ; preds = %204
  %221 = icmp eq i32 %213, 5
  br i1 %221, label %225, label %222

222:                                              ; preds = %220
  %223 = icmp sgt i32 %213, 2
  %224 = zext i1 %223 to i32
  br label %225

225:                                              ; preds = %222, %220, %204
  %226 = phi i32 [ 3, %204 ], [ %224, %222 ], [ 2, %220 ]
  %227 = getelementptr inbounds i8, i8* %135, i64 23620
  %228 = bitcast i8* %227 to i32*
  store i32 %226, i32* %228, align 4
  %229 = shl i32 %216, 16
  %230 = mul i32 %229, %216
  %231 = udiv i32 %230, 10000
  %232 = getelementptr inbounds i8, i8* %135, i64 23624
  %233 = bitcast i8* %232 to i32*
  store i32 %231, i32* %233, align 8
  %234 = sdiv i64 1069547520, %110
  %235 = trunc i64 %234 to i32
  %236 = getelementptr inbounds i8, i8* %135, i64 23628
  %237 = bitcast i8* %236 to i32*
  store i32 %235, i32* %237, align 4
  %238 = getelementptr inbounds %struct.WebPConfig, %struct.WebPConfig* %0, i64 0, i32 21
  %239 = load i32, i32* %238, align 4
  %240 = getelementptr inbounds i8, i8* %135, i64 23632
  %241 = bitcast i8* %240 to i32*
  store i32 %239, i32* %241, align 8
  %242 = getelementptr inbounds %struct.WebPConfig, %struct.WebPConfig* %0, i64 0, i32 4
  %243 = load i32, i32* %242, align 4
  %244 = icmp sgt i32 %243, 0
  br i1 %244, label %250, label %245

245:                                              ; preds = %225
  %246 = getelementptr inbounds %struct.WebPConfig, %struct.WebPConfig* %0, i64 0, i32 5
  %247 = load float, float* %246, align 4
  %248 = fcmp ogt float %247, 0.000000e+00
  %249 = zext i1 %248 to i32
  br label %250

250:                                              ; preds = %245, %225
  %251 = phi i32 [ 1, %225 ], [ %249, %245 ]
  %252 = getelementptr inbounds i8, i8* %135, i64 23636
  %253 = bitcast i8* %252 to i32*
  store i32 %251, i32* %253, align 4
  %254 = getelementptr inbounds %struct.WebPConfig, %struct.WebPConfig* %0, i64 0, i32 22
  %255 = load i32, i32* %254, align 4
  %256 = icmp eq i32 %255, 0
  br i1 %256, label %257, label %263

257:                                              ; preds = %250
  %258 = icmp ne i32 %226, 0
  %259 = zext i1 %258 to i32
  %260 = getelementptr inbounds i8, i8* %135, i64 23640
  %261 = bitcast i8* %260 to i32*
  store i32 %259, i32* %261, align 8
  br i1 %258, label %262, label %263

262:                                              ; preds = %257
  store i32 1, i32* %149, align 4
  br label %263

263:                                              ; preds = %262, %257, %250
  tail call void @VP8EncDspInit() #5
  tail call void @VP8DefaultProbas(%struct.VP8Encoder* nonnull %139) #5
  %264 = load %struct.WebPConfig*, %struct.WebPConfig** %198, align 8
  %265 = getelementptr inbounds %struct.WebPConfig, %struct.WebPConfig* %264, i64 0, i32 6
  %266 = load i32, i32* %265, align 4
  %267 = getelementptr inbounds i8, i8* %135, i64 32
  %268 = bitcast i8* %267 to i32*
  store i32 %266, i32* %268, align 4
  %269 = icmp sgt i32 %266, 1
  %270 = zext i1 %269 to i32
  %271 = getelementptr inbounds i8, i8* %135, i64 36
  %272 = bitcast i8* %271 to i32*
  store i32 %270, i32* %272, align 4
  %273 = getelementptr inbounds i8, i8* %135, i64 40
  %274 = bitcast i8* %273 to i32*
  store i32 0, i32* %274, align 4
  %275 = getelementptr inbounds i8, i8* %135, i64 16
  %276 = bitcast i8* %275 to <4 x i32>*
  store <4 x i32> <i32 1, i32 0, i32 0, i32 0>, <4 x i32>* %276, align 4
  %277 = load i8*, i8** %164, align 8
  %278 = load i32, i32* %155, align 8
  %279 = sext i32 %278 to i64
  %280 = sub nsw i64 0, %279
  %281 = getelementptr inbounds i8, i8* %277, i64 %280
  %282 = getelementptr inbounds i8, i8* %277, i64 -1
  %283 = load i32, i32* %151, align 8
  %284 = icmp sgt i32 %283, -1
  br i1 %284, label %288, label %285

285:                                              ; preds = %288, %263
  %286 = load i32, i32* %153, align 4
  %287 = icmp sgt i32 %286, 0
  br i1 %287, label %296, label %306

288:                                              ; preds = %263, %288
  %289 = phi i64 [ %291, %288 ], [ -1, %263 ]
  %290 = getelementptr inbounds i8, i8* %281, i64 %289
  store i8 0, i8* %290, align 1
  %291 = add nsw i64 %289, 1
  %292 = load i32, i32* %151, align 8
  %293 = shl nsw i32 %292, 2
  %294 = sext i32 %293 to i64
  %295 = icmp slt i64 %291, %294
  br i1 %295, label %288, label %285

296:                                              ; preds = %285, %296
  %297 = phi i32 [ %302, %296 ], [ 0, %285 ]
  %298 = load i32, i32* %155, align 8
  %299 = mul nsw i32 %298, %297
  %300 = sext i32 %299 to i64
  %301 = getelementptr inbounds i8, i8* %282, i64 %300
  store i8 0, i8* %301, align 1
  %302 = add nuw nsw i32 %297, 1
  %303 = load i32, i32* %153, align 4
  %304 = shl nsw i32 %303, 2
  %305 = icmp slt i32 %302, %304
  br i1 %305, label %296, label %306

306:                                              ; preds = %296, %285
  %307 = load i32*, i32** %172, align 8
  %308 = getelementptr inbounds i32, i32* %307, i64 -1
  store i32 0, i32* %308, align 4
  tail call void @VP8EncDspCostInit() #5
  tail call void @VP8EncInitAlpha(%struct.VP8Encoder* nonnull %139) #5
  %309 = load float, float* %117, align 4
  %310 = fmul float %309, 5.000000e+00
  %311 = fdiv float %310, 1.000000e+02
  %312 = fadd float %311, 1.000000e+00
  %313 = getelementptr inbounds i8, i8* %135, i64 496
  %314 = bitcast i8* %313 to %struct.VP8TBuffer*
  %315 = shl nsw i32 %109, 2
  %316 = sitofp i32 %315 to float
  %317 = fmul float %312, %316
  %318 = fptosi float %317 to i32
  tail call void @VP8TBufferInit(%struct.VP8TBuffer* %314, i32 %318) #5
  %319 = tail call i32 @VP8EncAnalyze(%struct.VP8Encoder* nonnull %139) #5
  %320 = icmp eq i32 %319, 0
  br i1 %320, label %324, label %321

321:                                              ; preds = %306
  %322 = tail call i32 @VP8EncStartAlpha(%struct.VP8Encoder* nonnull %139) #5
  %323 = icmp ne i32 %322, 0
  br label %324

324:                                              ; preds = %306, %321
  %325 = phi i1 [ false, %306 ], [ %323, %321 ]
  %326 = getelementptr inbounds i8, i8* %135, i64 23640
  %327 = bitcast i8* %326 to i32*
  %328 = load i32, i32* %327, align 8
  %329 = icmp eq i32 %328, 0
  br i1 %329, label %330, label %333

330:                                              ; preds = %324
  br i1 %325, label %331, label %345

331:                                              ; preds = %330
  %332 = tail call i32 @VP8EncLoop(%struct.VP8Encoder* nonnull %139) #5
  br label %336

333:                                              ; preds = %324
  br i1 %325, label %334, label %345

334:                                              ; preds = %333
  %335 = tail call i32 @VP8EncTokenLoop(%struct.VP8Encoder* nonnull %139) #5
  br label %336

336:                                              ; preds = %334, %331
  %337 = phi i32 [ %332, %331 ], [ %335, %334 ]
  %338 = icmp eq i32 %337, 0
  br i1 %338, label %345, label %339

339:                                              ; preds = %336
  %340 = tail call i32 @VP8EncFinishAlpha(%struct.VP8Encoder* nonnull %139) #5
  %341 = icmp eq i32 %340, 0
  br i1 %341, label %345, label %342

342:                                              ; preds = %339
  %343 = tail call i32 @VP8EncWrite(%struct.VP8Encoder* nonnull %139) #5
  %344 = icmp ne i32 %343, 0
  br label %345

345:                                              ; preds = %336, %339, %333, %330, %342
  %346 = phi i1 [ false, %339 ], [ %344, %342 ], [ false, %336 ], [ false, %330 ], [ false, %333 ]
  %347 = zext i1 %346 to i32
  %348 = load %struct.WebPPicture*, %struct.WebPPicture** %209, align 8
  %349 = load i32, i32* %211, align 4
  %350 = icmp eq i32 %349, 100
  br i1 %350, label %360, label %351

351:                                              ; preds = %345
  store i32 100, i32* %211, align 4
  %352 = getelementptr inbounds %struct.WebPPicture, %struct.WebPPicture* %348, i64 0, i32 21
  %353 = load i32 (i32, %struct.WebPPicture*)*, i32 (i32, %struct.WebPPicture*)** %352, align 8
  %354 = icmp eq i32 (i32, %struct.WebPPicture*)* %353, null
  br i1 %354, label %360, label %355

355:                                              ; preds = %351
  %356 = tail call i32 %353(i32 100, %struct.WebPPicture* %348) #5
  %357 = icmp eq i32 %356, 0
  br i1 %357, label %358, label %360

358:                                              ; preds = %355
  %359 = getelementptr inbounds %struct.WebPPicture, %struct.WebPPicture* %348, i64 0, i32 20
  store i32 10, i32* %359, align 8
  br label %360

360:                                              ; preds = %345, %351, %355, %358
  br i1 %346, label %362, label %361

361:                                              ; preds = %360
  tail call void @VP8EncFreeBitWriters(%struct.VP8Encoder* nonnull %139) #5
  br label %362

362:                                              ; preds = %360, %361
  %363 = tail call i32 @VP8EncDeleteAlpha(%struct.VP8Encoder* nonnull %139) #5
  tail call void @VP8TBufferClear(%struct.VP8TBuffer* %314) #5
  tail call void @WebPSafeFree(i8* nonnull %135) #5
  %364 = and i32 %363, %347
  br label %379

365:                                              ; preds = %32
  %366 = getelementptr inbounds %struct.WebPPicture, %struct.WebPPicture* %1, i64 0, i32 12
  %367 = load i32*, i32** %366, align 8
  %368 = icmp eq i32* %367, null
  br i1 %368, label %369, label %372

369:                                              ; preds = %365
  %370 = tail call i32 @WebPPictureYUVAToARGB(%struct.WebPPicture* nonnull %1) #5
  %371 = icmp eq i32 %370, 0
  br i1 %371, label %379, label %372

372:                                              ; preds = %369, %365
  %373 = getelementptr inbounds %struct.WebPConfig, %struct.WebPConfig* %0, i64 0, i32 24
  %374 = load i32, i32* %373, align 4
  %375 = icmp eq i32 %374, 0
  br i1 %375, label %376, label %377

376:                                              ; preds = %372
  tail call void @WebPReplaceTransparentPixels(%struct.WebPPicture* nonnull %1, i32 0) #5
  br label %377

377:                                              ; preds = %372, %376
  %378 = tail call i32 @VP8LEncodeImage(%struct.WebPConfig* nonnull %0, %struct.WebPPicture* nonnull %1) #5
  br label %379

379:                                              ; preds = %75, %137, %61, %377, %362, %369, %2, %25, %20, %11, %7
  %380 = phi i32 [ 0, %7 ], [ 0, %20 ], [ 0, %25 ], [ 0, %11 ], [ 0, %2 ], [ 0, %369 ], [ %378, %377 ], [ %364, %362 ], [ 0, %75 ], [ 0, %61 ], [ 0, %137 ]
  ret i32 %380
}

declare i32 @WebPValidateConfig(%struct.WebPConfig*) local_unnamed_addr #3

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #4

declare i32 @WebPPictureSharpARGBToYUVA(%struct.WebPPicture*) local_unnamed_addr #3

declare i32 @WebPPictureARGBToYUVADithered(%struct.WebPPicture*, i32, float) local_unnamed_addr #3

declare void @WebPCleanupTransparentArea(%struct.WebPPicture*) local_unnamed_addr #3

declare i32 @VP8EncAnalyze(%struct.VP8Encoder*) local_unnamed_addr #3

declare i32 @VP8EncStartAlpha(%struct.VP8Encoder*) local_unnamed_addr #3

declare i32 @VP8EncLoop(%struct.VP8Encoder*) local_unnamed_addr #3

declare i32 @VP8EncTokenLoop(%struct.VP8Encoder*) local_unnamed_addr #3

declare i32 @VP8EncFinishAlpha(%struct.VP8Encoder*) local_unnamed_addr #3

declare i32 @VP8EncWrite(%struct.VP8Encoder*) local_unnamed_addr #3

declare void @VP8EncFreeBitWriters(%struct.VP8Encoder*) local_unnamed_addr #3

declare i32 @WebPPictureYUVAToARGB(%struct.WebPPicture*) local_unnamed_addr #3

declare void @WebPReplaceTransparentPixels(%struct.WebPPicture*, i32) local_unnamed_addr #3

declare i32 @VP8LEncodeImage(%struct.WebPConfig*, %struct.WebPPicture*) local_unnamed_addr #3

declare i8* @WebPSafeMalloc(i64, i64) local_unnamed_addr #3

declare void @VP8EncDspInit() local_unnamed_addr #3

declare void @VP8DefaultProbas(%struct.VP8Encoder*) local_unnamed_addr #3

declare void @VP8EncDspCostInit() local_unnamed_addr #3

declare void @VP8EncInitAlpha(%struct.VP8Encoder*) local_unnamed_addr #3

declare void @VP8TBufferInit(%struct.VP8TBuffer*, i32) local_unnamed_addr #3

declare i32 @VP8EncDeleteAlpha(%struct.VP8Encoder*) local_unnamed_addr #3

declare void @VP8TBufferClear(%struct.VP8TBuffer*) local_unnamed_addr #3

declare void @WebPSafeFree(i8*) local_unnamed_addr #3

attributes #0 = { norecurse nounwind readnone ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nofree norecurse nounwind ssp uwtable writeonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { argmemonly nounwind }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
