; ModuleID = '../../third_party/iccjpeg/iccjpeg.c'
source_filename = "../../third_party/iccjpeg/iccjpeg.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.jpeg_compress_struct = type { %struct.jpeg_error_mgr*, %struct.jpeg_memory_mgr*, %struct.jpeg_progress_mgr*, i8*, i32, i32, %struct.jpeg_destination_mgr*, i32, i32, i32, i32, double, i32, i32, i32, %struct.jpeg_component_info*, [4 x %struct.JQUANT_TBL*], [4 x %struct.JHUFF_TBL*], [4 x %struct.JHUFF_TBL*], [16 x i8], [16 x i8], [16 x i8], i32, %struct.jpeg_scan_info*, i32, i32, i32, i32, i32, i32, i32, i32, i32, i8, i8, i8, i16, i16, i32, i32, i32, i32, i32, i32, i32, [4 x %struct.jpeg_component_info*], i32, i32, i32, [10 x i32], i32, i32, i32, i32, %struct.jpeg_comp_master*, %struct.jpeg_c_main_controller*, %struct.jpeg_c_prep_controller*, %struct.jpeg_c_coef_controller*, %struct.jpeg_marker_writer*, %struct.jpeg_color_converter*, %struct.jpeg_downsampler*, %struct.jpeg_forward_dct*, %struct.jpeg_entropy_encoder*, %struct.jpeg_scan_info*, i32 }
%struct.jpeg_error_mgr = type { void (%struct.jpeg_common_struct*)*, void (%struct.jpeg_common_struct*, i32)*, void (%struct.jpeg_common_struct*)*, void (%struct.jpeg_common_struct*, i8*)*, void (%struct.jpeg_common_struct*)*, i32, %union.anon, i32, i64, i8**, i32, i8**, i32, i32 }
%struct.jpeg_common_struct = type { %struct.jpeg_error_mgr*, %struct.jpeg_memory_mgr*, %struct.jpeg_progress_mgr*, i8*, i32, i32 }
%union.anon = type { [8 x i32], [48 x i8] }
%struct.jpeg_memory_mgr = type { i8* (%struct.jpeg_common_struct*, i32, i64)*, i8* (%struct.jpeg_common_struct*, i32, i64)*, i8** (%struct.jpeg_common_struct*, i32, i32, i32)*, [64 x i16]** (%struct.jpeg_common_struct*, i32, i32, i32)*, %struct.jvirt_sarray_control* (%struct.jpeg_common_struct*, i32, i32, i32, i32, i32)*, %struct.jvirt_barray_control* (%struct.jpeg_common_struct*, i32, i32, i32, i32, i32)*, {}*, i8** (%struct.jpeg_common_struct*, %struct.jvirt_sarray_control*, i32, i32, i32)*, [64 x i16]** (%struct.jpeg_common_struct*, %struct.jvirt_barray_control*, i32, i32, i32)*, void (%struct.jpeg_common_struct*, i32)*, {}*, i64, i64 }
%struct.jvirt_sarray_control = type opaque
%struct.jvirt_barray_control = type opaque
%struct.jpeg_progress_mgr = type { {}*, i64, i64, i32, i32 }
%struct.jpeg_destination_mgr = type { i8*, i64, void (%struct.jpeg_compress_struct*)*, i32 (%struct.jpeg_compress_struct*)*, void (%struct.jpeg_compress_struct*)* }
%struct.jpeg_component_info = type { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, %struct.JQUANT_TBL*, i8* }
%struct.JQUANT_TBL = type { [64 x i16], i32 }
%struct.JHUFF_TBL = type { [17 x i8], [256 x i8], i32 }
%struct.jpeg_comp_master = type opaque
%struct.jpeg_c_main_controller = type opaque
%struct.jpeg_c_prep_controller = type opaque
%struct.jpeg_c_coef_controller = type opaque
%struct.jpeg_marker_writer = type opaque
%struct.jpeg_color_converter = type opaque
%struct.jpeg_downsampler = type opaque
%struct.jpeg_forward_dct = type opaque
%struct.jpeg_entropy_encoder = type opaque
%struct.jpeg_scan_info = type { i32, [4 x i32], i32, i32, i32, i32 }
%struct.jpeg_decompress_struct = type { %struct.jpeg_error_mgr*, %struct.jpeg_memory_mgr*, %struct.jpeg_progress_mgr*, i8*, i32, i32, %struct.jpeg_source_mgr*, i32, i32, i32, i32, i32, i32, i32, double, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i8**, i32, i32, i32, i32, i32, [64 x i32]*, [4 x %struct.JQUANT_TBL*], [4 x %struct.JHUFF_TBL*], [4 x %struct.JHUFF_TBL*], i32, %struct.jpeg_component_info*, i32, i32, [16 x i8], [16 x i8], [16 x i8], i32, i32, i8, i8, i8, i16, i16, i32, i8, i32, %struct.jpeg_marker_struct*, i32, i32, i32, i32, i8*, i32, [4 x %struct.jpeg_component_info*], i32, i32, i32, [10 x i32], i32, i32, i32, i32, i32, %struct.jpeg_decomp_master*, %struct.jpeg_d_main_controller*, %struct.jpeg_d_coef_controller*, %struct.jpeg_d_post_controller*, %struct.jpeg_input_controller*, %struct.jpeg_marker_reader*, %struct.jpeg_entropy_decoder*, %struct.jpeg_inverse_dct*, %struct.jpeg_upsampler*, %struct.jpeg_color_deconverter*, %struct.jpeg_color_quantizer* }
%struct.jpeg_source_mgr = type { i8*, i64, {}*, i32 (%struct.jpeg_decompress_struct*)*, void (%struct.jpeg_decompress_struct*, i64)*, i32 (%struct.jpeg_decompress_struct*, i32)*, {}* }
%struct.jpeg_marker_struct = type { %struct.jpeg_marker_struct*, i8, i32, i32, i8* }
%struct.jpeg_decomp_master = type opaque
%struct.jpeg_d_main_controller = type opaque
%struct.jpeg_d_coef_controller = type opaque
%struct.jpeg_d_post_controller = type opaque
%struct.jpeg_input_controller = type opaque
%struct.jpeg_marker_reader = type opaque
%struct.jpeg_entropy_decoder = type opaque
%struct.jpeg_inverse_dct = type opaque
%struct.jpeg_upsampler = type opaque
%struct.jpeg_color_deconverter = type opaque
%struct.jpeg_color_quantizer = type opaque

; Function Attrs: nounwind ssp uwtable
define hidden void @write_icc_profile(%struct.jpeg_compress_struct*, i8* nocapture readonly, i32) local_unnamed_addr #0 {
  %4 = udiv i32 %2, 65519
  %5 = mul i32 %4, 65519
  %6 = icmp ne i32 %5, %2
  %7 = zext i1 %6 to i32
  %8 = add nuw nsw i32 %4, %7
  %9 = icmp eq i32 %2, 0
  br i1 %9, label %31, label %10

10:                                               ; preds = %3, %27
  %11 = phi i32 [ %29, %27 ], [ 1, %3 ]
  %12 = phi i32 [ %16, %27 ], [ %2, %3 ]
  %13 = phi i8* [ %28, %27 ], [ %1, %3 ]
  %14 = icmp ult i32 %12, 65519
  %15 = select i1 %14, i32 %12, i32 65519
  %16 = sub i32 %12, %15
  %17 = add nuw nsw i32 %15, 14
  tail call void @jpeg_write_m_header(%struct.jpeg_compress_struct* %0, i32 226, i32 %17) #4
  tail call void @jpeg_write_m_byte(%struct.jpeg_compress_struct* %0, i32 73) #4
  tail call void @jpeg_write_m_byte(%struct.jpeg_compress_struct* %0, i32 67) #4
  tail call void @jpeg_write_m_byte(%struct.jpeg_compress_struct* %0, i32 67) #4
  tail call void @jpeg_write_m_byte(%struct.jpeg_compress_struct* %0, i32 95) #4
  tail call void @jpeg_write_m_byte(%struct.jpeg_compress_struct* %0, i32 80) #4
  tail call void @jpeg_write_m_byte(%struct.jpeg_compress_struct* %0, i32 82) #4
  tail call void @jpeg_write_m_byte(%struct.jpeg_compress_struct* %0, i32 79) #4
  tail call void @jpeg_write_m_byte(%struct.jpeg_compress_struct* %0, i32 70) #4
  tail call void @jpeg_write_m_byte(%struct.jpeg_compress_struct* %0, i32 73) #4
  tail call void @jpeg_write_m_byte(%struct.jpeg_compress_struct* %0, i32 76) #4
  tail call void @jpeg_write_m_byte(%struct.jpeg_compress_struct* %0, i32 69) #4
  tail call void @jpeg_write_m_byte(%struct.jpeg_compress_struct* %0, i32 0) #4
  tail call void @jpeg_write_m_byte(%struct.jpeg_compress_struct* %0, i32 %11) #4
  tail call void @jpeg_write_m_byte(%struct.jpeg_compress_struct* %0, i32 %8) #4
  %18 = icmp eq i32 %15, 0
  br i1 %18, label %27, label %19

19:                                               ; preds = %10, %19
  %20 = phi i32 [ %22, %19 ], [ %15, %10 ]
  %21 = phi i8* [ %25, %19 ], [ %13, %10 ]
  %22 = add i32 %20, -1
  %23 = load i8, i8* %21, align 1
  %24 = zext i8 %23 to i32
  tail call void @jpeg_write_m_byte(%struct.jpeg_compress_struct* %0, i32 %24) #4
  %25 = getelementptr inbounds i8, i8* %21, i64 1
  %26 = icmp eq i32 %22, 0
  br i1 %26, label %27, label %19

27:                                               ; preds = %19, %10
  %28 = phi i8* [ %13, %10 ], [ %25, %19 ]
  %29 = add nuw nsw i32 %11, 1
  %30 = icmp eq i32 %16, 0
  br i1 %30, label %31, label %10

31:                                               ; preds = %27, %3
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

declare void @jpeg_write_m_header(%struct.jpeg_compress_struct*, i32, i32) local_unnamed_addr #2

declare void @jpeg_write_m_byte(%struct.jpeg_compress_struct*, i32) local_unnamed_addr #2

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: nounwind ssp uwtable
define hidden void @setup_read_icc_profile(%struct.jpeg_decompress_struct*) local_unnamed_addr #0 {
  tail call void @jpeg_save_markers(%struct.jpeg_decompress_struct* %0, i32 226, i32 65535) #4
  ret void
}

declare void @jpeg_save_markers(%struct.jpeg_decompress_struct*, i32, i32) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden i32 @read_icc_profile(%struct.jpeg_decompress_struct* nocapture readonly, i8** nocapture, i32* nocapture) local_unnamed_addr #0 {
  %4 = alloca [256 x i8], align 16
  %5 = alloca [256 x i32], align 16
  %6 = alloca [256 x i32], align 16
  %7 = getelementptr inbounds [256 x i8], [256 x i8]* %4, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 256, i8* nonnull %7) #4
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %7, i8 -86, i64 256, i1 false)
  %8 = bitcast [256 x i32]* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 1024, i8* nonnull %8) #4
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %8, i8 -86, i64 1024, i1 false)
  %9 = bitcast [256 x i32]* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 1024, i8* nonnull %9) #4
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %9, i8 -86, i64 1024, i1 false)
  store i8* null, i8** %1, align 8
  store i32 0, i32* %2, align 4
  %10 = getelementptr inbounds [256 x i8], [256 x i8]* %4, i64 0, i64 1
  call void @llvm.memset.p0i8.i64(i8* align 1 %10, i8 0, i64 255, i1 false)
  %11 = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %0, i64 0, i32 60
  %12 = load %struct.jpeg_marker_struct*, %struct.jpeg_marker_struct** %11, align 8
  %13 = icmp eq %struct.jpeg_marker_struct* %12, null
  br i1 %13, label %354, label %14

14:                                               ; preds = %3, %96
  %15 = phi %struct.jpeg_marker_struct* [ %99, %96 ], [ %12, %3 ]
  %16 = phi i32 [ %97, %96 ], [ 0, %3 ]
  %17 = getelementptr inbounds %struct.jpeg_marker_struct, %struct.jpeg_marker_struct* %15, i64 0, i32 1
  %18 = load i8, i8* %17, align 8
  %19 = icmp eq i8 %18, -30
  br i1 %19, label %20, label %96

20:                                               ; preds = %14
  %21 = getelementptr inbounds %struct.jpeg_marker_struct, %struct.jpeg_marker_struct* %15, i64 0, i32 3
  %22 = load i32, i32* %21, align 8
  %23 = icmp ugt i32 %22, 13
  br i1 %23, label %24, label %96

24:                                               ; preds = %20
  %25 = getelementptr inbounds %struct.jpeg_marker_struct, %struct.jpeg_marker_struct* %15, i64 0, i32 4
  %26 = load i8*, i8** %25, align 8
  %27 = load i8, i8* %26, align 1
  %28 = icmp eq i8 %27, 73
  br i1 %28, label %29, label %96

29:                                               ; preds = %24
  %30 = getelementptr inbounds i8, i8* %26, i64 1
  %31 = load i8, i8* %30, align 1
  %32 = icmp eq i8 %31, 67
  br i1 %32, label %33, label %96

33:                                               ; preds = %29
  %34 = getelementptr inbounds i8, i8* %26, i64 2
  %35 = load i8, i8* %34, align 1
  %36 = icmp eq i8 %35, 67
  br i1 %36, label %37, label %96

37:                                               ; preds = %33
  %38 = getelementptr inbounds i8, i8* %26, i64 3
  %39 = load i8, i8* %38, align 1
  %40 = icmp eq i8 %39, 95
  br i1 %40, label %41, label %96

41:                                               ; preds = %37
  %42 = getelementptr inbounds i8, i8* %26, i64 4
  %43 = load i8, i8* %42, align 1
  %44 = icmp eq i8 %43, 80
  br i1 %44, label %45, label %96

45:                                               ; preds = %41
  %46 = getelementptr inbounds i8, i8* %26, i64 5
  %47 = load i8, i8* %46, align 1
  %48 = icmp eq i8 %47, 82
  br i1 %48, label %49, label %96

49:                                               ; preds = %45
  %50 = getelementptr inbounds i8, i8* %26, i64 6
  %51 = load i8, i8* %50, align 1
  %52 = icmp eq i8 %51, 79
  br i1 %52, label %53, label %96

53:                                               ; preds = %49
  %54 = getelementptr inbounds i8, i8* %26, i64 7
  %55 = load i8, i8* %54, align 1
  %56 = icmp eq i8 %55, 70
  br i1 %56, label %57, label %96

57:                                               ; preds = %53
  %58 = getelementptr inbounds i8, i8* %26, i64 8
  %59 = load i8, i8* %58, align 1
  %60 = icmp eq i8 %59, 73
  br i1 %60, label %61, label %96

61:                                               ; preds = %57
  %62 = getelementptr inbounds i8, i8* %26, i64 9
  %63 = load i8, i8* %62, align 1
  %64 = icmp eq i8 %63, 76
  br i1 %64, label %65, label %96

65:                                               ; preds = %61
  %66 = getelementptr inbounds i8, i8* %26, i64 10
  %67 = load i8, i8* %66, align 1
  %68 = icmp eq i8 %67, 69
  br i1 %68, label %69, label %96

69:                                               ; preds = %65
  %70 = getelementptr inbounds i8, i8* %26, i64 11
  %71 = load i8, i8* %70, align 1
  %72 = icmp eq i8 %71, 0
  br i1 %72, label %73, label %96

73:                                               ; preds = %69
  %74 = icmp eq i32 %16, 0
  %75 = getelementptr inbounds i8, i8* %26, i64 13
  %76 = load i8, i8* %75, align 1
  %77 = zext i8 %76 to i32
  br i1 %74, label %80, label %78

78:                                               ; preds = %73
  %79 = icmp eq i32 %16, %77
  br i1 %79, label %80, label %354

80:                                               ; preds = %73, %78
  %81 = phi i32 [ %16, %78 ], [ %77, %73 ]
  %82 = getelementptr inbounds i8, i8* %26, i64 12
  %83 = load i8, i8* %82, align 1
  %84 = icmp eq i8 %83, 0
  %85 = zext i8 %83 to i32
  %86 = icmp slt i32 %81, %85
  %87 = or i1 %84, %86
  br i1 %87, label %354, label %88

88:                                               ; preds = %80
  %89 = zext i8 %83 to i64
  %90 = getelementptr inbounds [256 x i8], [256 x i8]* %4, i64 0, i64 %89
  %91 = load i8, i8* %90, align 1
  %92 = icmp eq i8 %91, 0
  br i1 %92, label %93, label %354

93:                                               ; preds = %88
  store i8 1, i8* %90, align 1
  %94 = add i32 %22, -14
  %95 = getelementptr inbounds [256 x i32], [256 x i32]* %5, i64 0, i64 %89
  store i32 %94, i32* %95, align 4
  br label %96

96:                                               ; preds = %69, %14, %20, %24, %29, %33, %37, %41, %45, %49, %53, %57, %61, %65, %93
  %97 = phi i32 [ %81, %93 ], [ %16, %69 ], [ %16, %65 ], [ %16, %61 ], [ %16, %57 ], [ %16, %53 ], [ %16, %49 ], [ %16, %45 ], [ %16, %41 ], [ %16, %37 ], [ %16, %33 ], [ %16, %29 ], [ %16, %24 ], [ %16, %20 ], [ %16, %14 ]
  %98 = getelementptr inbounds %struct.jpeg_marker_struct, %struct.jpeg_marker_struct* %15, i64 0, i32 0
  %99 = load %struct.jpeg_marker_struct*, %struct.jpeg_marker_struct** %98, align 8
  %100 = icmp eq %struct.jpeg_marker_struct* %99, null
  br i1 %100, label %101, label %14

101:                                              ; preds = %96
  %102 = icmp slt i32 %97, 1
  br i1 %102, label %354, label %103

103:                                              ; preds = %101
  %104 = add nuw i32 %97, 1
  %105 = zext i32 %104 to i64
  br label %106

106:                                              ; preds = %112, %103
  %107 = phi i64 [ 1, %103 ], [ %117, %112 ]
  %108 = phi i32 [ 0, %103 ], [ %116, %112 ]
  %109 = getelementptr inbounds [256 x i8], [256 x i8]* %4, i64 0, i64 %107
  %110 = load i8, i8* %109, align 1
  %111 = icmp eq i8 %110, 0
  br i1 %111, label %354, label %112

112:                                              ; preds = %106
  %113 = getelementptr inbounds [256 x i32], [256 x i32]* %6, i64 0, i64 %107
  store i32 %108, i32* %113, align 4
  %114 = getelementptr inbounds [256 x i32], [256 x i32]* %5, i64 0, i64 %107
  %115 = load i32, i32* %114, align 4
  %116 = add i32 %115, %108
  %117 = add nuw nsw i64 %107, 1
  %118 = icmp eq i64 %117, %105
  br i1 %118, label %119, label %106

119:                                              ; preds = %112
  %120 = icmp eq i32 %116, 0
  br i1 %120, label %354, label %121

121:                                              ; preds = %119
  %122 = zext i32 %116 to i64
  %123 = tail call noalias i8* @malloc(i64 %122) #4
  %124 = icmp eq i8* %123, null
  br i1 %124, label %354, label %125

125:                                              ; preds = %121
  br i1 %13, label %353, label %126

126:                                              ; preds = %125
  %127 = getelementptr i8, i8* %123, i64 1
  br label %128

128:                                              ; preds = %126, %349
  %129 = phi %struct.jpeg_marker_struct* [ %351, %349 ], [ %12, %126 ]
  %130 = getelementptr inbounds %struct.jpeg_marker_struct, %struct.jpeg_marker_struct* %129, i64 0, i32 1
  %131 = load i8, i8* %130, align 8
  %132 = icmp eq i8 %131, -30
  br i1 %132, label %133, label %349

133:                                              ; preds = %128
  %134 = getelementptr inbounds %struct.jpeg_marker_struct, %struct.jpeg_marker_struct* %129, i64 0, i32 3
  %135 = load i32, i32* %134, align 8
  %136 = icmp ugt i32 %135, 13
  br i1 %136, label %137, label %349

137:                                              ; preds = %133
  %138 = getelementptr inbounds %struct.jpeg_marker_struct, %struct.jpeg_marker_struct* %129, i64 0, i32 4
  %139 = load i8*, i8** %138, align 8
  %140 = load i8, i8* %139, align 1
  %141 = icmp eq i8 %140, 73
  br i1 %141, label %142, label %349

142:                                              ; preds = %137
  %143 = getelementptr inbounds i8, i8* %139, i64 1
  %144 = load i8, i8* %143, align 1
  %145 = icmp eq i8 %144, 67
  br i1 %145, label %146, label %349

146:                                              ; preds = %142
  %147 = getelementptr inbounds i8, i8* %139, i64 2
  %148 = load i8, i8* %147, align 1
  %149 = icmp eq i8 %148, 67
  br i1 %149, label %150, label %349

150:                                              ; preds = %146
  %151 = getelementptr inbounds i8, i8* %139, i64 3
  %152 = load i8, i8* %151, align 1
  %153 = icmp eq i8 %152, 95
  br i1 %153, label %154, label %349

154:                                              ; preds = %150
  %155 = getelementptr inbounds i8, i8* %139, i64 4
  %156 = load i8, i8* %155, align 1
  %157 = icmp eq i8 %156, 80
  br i1 %157, label %158, label %349

158:                                              ; preds = %154
  %159 = getelementptr inbounds i8, i8* %139, i64 5
  %160 = load i8, i8* %159, align 1
  %161 = icmp eq i8 %160, 82
  br i1 %161, label %162, label %349

162:                                              ; preds = %158
  %163 = getelementptr inbounds i8, i8* %139, i64 6
  %164 = load i8, i8* %163, align 1
  %165 = icmp eq i8 %164, 79
  br i1 %165, label %166, label %349

166:                                              ; preds = %162
  %167 = getelementptr inbounds i8, i8* %139, i64 7
  %168 = load i8, i8* %167, align 1
  %169 = icmp eq i8 %168, 70
  br i1 %169, label %170, label %349

170:                                              ; preds = %166
  %171 = getelementptr inbounds i8, i8* %139, i64 8
  %172 = load i8, i8* %171, align 1
  %173 = icmp eq i8 %172, 73
  br i1 %173, label %174, label %349

174:                                              ; preds = %170
  %175 = getelementptr inbounds i8, i8* %139, i64 9
  %176 = load i8, i8* %175, align 1
  %177 = icmp eq i8 %176, 76
  br i1 %177, label %178, label %349

178:                                              ; preds = %174
  %179 = getelementptr inbounds i8, i8* %139, i64 10
  %180 = load i8, i8* %179, align 1
  %181 = icmp eq i8 %180, 69
  br i1 %181, label %182, label %349

182:                                              ; preds = %178
  %183 = getelementptr inbounds i8, i8* %139, i64 11
  %184 = load i8, i8* %183, align 1
  %185 = icmp eq i8 %184, 0
  br i1 %185, label %186, label %349

186:                                              ; preds = %182
  %187 = getelementptr inbounds i8, i8* %139, i64 12
  %188 = load i8, i8* %187, align 1
  %189 = zext i8 %188 to i64
  %190 = getelementptr inbounds [256 x i32], [256 x i32]* %5, i64 0, i64 %189
  %191 = load i32, i32* %190, align 4
  %192 = icmp eq i32 %191, 0
  br i1 %192, label %349, label %193

193:                                              ; preds = %186
  %194 = getelementptr inbounds i8, i8* %139, i64 14
  %195 = getelementptr inbounds [256 x i32], [256 x i32]* %6, i64 0, i64 %189
  %196 = load i32, i32* %195, align 4
  %197 = zext i32 %196 to i64
  %198 = getelementptr inbounds i8, i8* %123, i64 %197
  %199 = add i32 %191, -1
  %200 = zext i32 %199 to i64
  %201 = add nuw nsw i64 %200, 1
  %202 = icmp ult i64 %201, 32
  br i1 %202, label %296, label %203

203:                                              ; preds = %193
  %204 = add i32 %191, -1
  %205 = zext i32 %204 to i64
  %206 = add nuw nsw i64 %197, %205
  %207 = getelementptr i8, i8* %127, i64 %206
  %208 = getelementptr i8, i8* %139, i64 15
  %209 = getelementptr i8, i8* %208, i64 %205
  %210 = icmp ult i8* %198, %209
  %211 = icmp ult i8* %194, %207
  %212 = and i1 %210, %211
  br i1 %212, label %296, label %213

213:                                              ; preds = %203
  %214 = and i64 %201, 8589934560
  %215 = trunc i64 %214 to i32
  %216 = sub i32 %191, %215
  %217 = getelementptr i8, i8* %198, i64 %214
  %218 = getelementptr i8, i8* %194, i64 %214
  %219 = add nsw i64 %214, -32
  %220 = lshr exact i64 %219, 5
  %221 = add nuw nsw i64 %220, 1
  %222 = and i64 %221, 3
  %223 = icmp ult i64 %219, 96
  br i1 %223, label %275, label %224

224:                                              ; preds = %213
  %225 = sub nsw i64 %221, %222
  br label %226

226:                                              ; preds = %226, %224
  %227 = phi i64 [ 0, %224 ], [ %272, %226 ]
  %228 = phi i64 [ %225, %224 ], [ %273, %226 ]
  %229 = getelementptr i8, i8* %198, i64 %227
  %230 = getelementptr i8, i8* %194, i64 %227
  %231 = bitcast i8* %230 to <16 x i8>*
  %232 = load <16 x i8>, <16 x i8>* %231, align 1, !alias.scope !2
  %233 = getelementptr i8, i8* %230, i64 16
  %234 = bitcast i8* %233 to <16 x i8>*
  %235 = load <16 x i8>, <16 x i8>* %234, align 1, !alias.scope !2
  %236 = bitcast i8* %229 to <16 x i8>*
  store <16 x i8> %232, <16 x i8>* %236, align 1, !alias.scope !5, !noalias !2
  %237 = getelementptr i8, i8* %229, i64 16
  %238 = bitcast i8* %237 to <16 x i8>*
  store <16 x i8> %235, <16 x i8>* %238, align 1, !alias.scope !5, !noalias !2
  %239 = or i64 %227, 32
  %240 = getelementptr i8, i8* %198, i64 %239
  %241 = getelementptr i8, i8* %194, i64 %239
  %242 = bitcast i8* %241 to <16 x i8>*
  %243 = load <16 x i8>, <16 x i8>* %242, align 1, !alias.scope !2
  %244 = getelementptr i8, i8* %241, i64 16
  %245 = bitcast i8* %244 to <16 x i8>*
  %246 = load <16 x i8>, <16 x i8>* %245, align 1, !alias.scope !2
  %247 = bitcast i8* %240 to <16 x i8>*
  store <16 x i8> %243, <16 x i8>* %247, align 1, !alias.scope !5, !noalias !2
  %248 = getelementptr i8, i8* %240, i64 16
  %249 = bitcast i8* %248 to <16 x i8>*
  store <16 x i8> %246, <16 x i8>* %249, align 1, !alias.scope !5, !noalias !2
  %250 = or i64 %227, 64
  %251 = getelementptr i8, i8* %198, i64 %250
  %252 = getelementptr i8, i8* %194, i64 %250
  %253 = bitcast i8* %252 to <16 x i8>*
  %254 = load <16 x i8>, <16 x i8>* %253, align 1, !alias.scope !2
  %255 = getelementptr i8, i8* %252, i64 16
  %256 = bitcast i8* %255 to <16 x i8>*
  %257 = load <16 x i8>, <16 x i8>* %256, align 1, !alias.scope !2
  %258 = bitcast i8* %251 to <16 x i8>*
  store <16 x i8> %254, <16 x i8>* %258, align 1, !alias.scope !5, !noalias !2
  %259 = getelementptr i8, i8* %251, i64 16
  %260 = bitcast i8* %259 to <16 x i8>*
  store <16 x i8> %257, <16 x i8>* %260, align 1, !alias.scope !5, !noalias !2
  %261 = or i64 %227, 96
  %262 = getelementptr i8, i8* %198, i64 %261
  %263 = getelementptr i8, i8* %194, i64 %261
  %264 = bitcast i8* %263 to <16 x i8>*
  %265 = load <16 x i8>, <16 x i8>* %264, align 1, !alias.scope !2
  %266 = getelementptr i8, i8* %263, i64 16
  %267 = bitcast i8* %266 to <16 x i8>*
  %268 = load <16 x i8>, <16 x i8>* %267, align 1, !alias.scope !2
  %269 = bitcast i8* %262 to <16 x i8>*
  store <16 x i8> %265, <16 x i8>* %269, align 1, !alias.scope !5, !noalias !2
  %270 = getelementptr i8, i8* %262, i64 16
  %271 = bitcast i8* %270 to <16 x i8>*
  store <16 x i8> %268, <16 x i8>* %271, align 1, !alias.scope !5, !noalias !2
  %272 = add i64 %227, 128
  %273 = add i64 %228, -4
  %274 = icmp eq i64 %273, 0
  br i1 %274, label %275, label %226, !llvm.loop !7

275:                                              ; preds = %226, %213
  %276 = phi i64 [ 0, %213 ], [ %272, %226 ]
  %277 = icmp eq i64 %222, 0
  br i1 %277, label %294, label %278

278:                                              ; preds = %275, %278
  %279 = phi i64 [ %291, %278 ], [ %276, %275 ]
  %280 = phi i64 [ %292, %278 ], [ %222, %275 ]
  %281 = getelementptr i8, i8* %198, i64 %279
  %282 = getelementptr i8, i8* %194, i64 %279
  %283 = bitcast i8* %282 to <16 x i8>*
  %284 = load <16 x i8>, <16 x i8>* %283, align 1, !alias.scope !2
  %285 = getelementptr i8, i8* %282, i64 16
  %286 = bitcast i8* %285 to <16 x i8>*
  %287 = load <16 x i8>, <16 x i8>* %286, align 1, !alias.scope !2
  %288 = bitcast i8* %281 to <16 x i8>*
  store <16 x i8> %284, <16 x i8>* %288, align 1, !alias.scope !5, !noalias !2
  %289 = getelementptr i8, i8* %281, i64 16
  %290 = bitcast i8* %289 to <16 x i8>*
  store <16 x i8> %287, <16 x i8>* %290, align 1, !alias.scope !5, !noalias !2
  %291 = add i64 %279, 32
  %292 = add i64 %280, -1
  %293 = icmp eq i64 %292, 0
  br i1 %293, label %294, label %278, !llvm.loop !9

294:                                              ; preds = %278, %275
  %295 = icmp eq i64 %201, %214
  br i1 %295, label %349, label %296

296:                                              ; preds = %294, %203, %193
  %297 = phi i32 [ %191, %203 ], [ %191, %193 ], [ %216, %294 ]
  %298 = phi i8* [ %198, %203 ], [ %198, %193 ], [ %217, %294 ]
  %299 = phi i8* [ %194, %203 ], [ %194, %193 ], [ %218, %294 ]
  %300 = add i32 %297, -1
  %301 = and i32 %297, 7
  %302 = icmp eq i32 %301, 0
  br i1 %302, label %314, label %303

303:                                              ; preds = %296, %303
  %304 = phi i32 [ %308, %303 ], [ %297, %296 ]
  %305 = phi i8* [ %311, %303 ], [ %298, %296 ]
  %306 = phi i8* [ %309, %303 ], [ %299, %296 ]
  %307 = phi i32 [ %312, %303 ], [ %301, %296 ]
  %308 = add i32 %304, -1
  %309 = getelementptr inbounds i8, i8* %306, i64 1
  %310 = load i8, i8* %306, align 1
  %311 = getelementptr inbounds i8, i8* %305, i64 1
  store i8 %310, i8* %305, align 1
  %312 = add i32 %307, -1
  %313 = icmp eq i32 %312, 0
  br i1 %313, label %314, label %303, !llvm.loop !11

314:                                              ; preds = %303, %296
  %315 = phi i32 [ %297, %296 ], [ %308, %303 ]
  %316 = phi i8* [ %298, %296 ], [ %311, %303 ]
  %317 = phi i8* [ %299, %296 ], [ %309, %303 ]
  %318 = icmp ult i32 %300, 7
  br i1 %318, label %349, label %319

319:                                              ; preds = %314, %319
  %320 = phi i32 [ %344, %319 ], [ %315, %314 ]
  %321 = phi i8* [ %347, %319 ], [ %316, %314 ]
  %322 = phi i8* [ %345, %319 ], [ %317, %314 ]
  %323 = getelementptr inbounds i8, i8* %322, i64 1
  %324 = load i8, i8* %322, align 1
  %325 = getelementptr inbounds i8, i8* %321, i64 1
  store i8 %324, i8* %321, align 1
  %326 = getelementptr inbounds i8, i8* %322, i64 2
  %327 = load i8, i8* %323, align 1
  %328 = getelementptr inbounds i8, i8* %321, i64 2
  store i8 %327, i8* %325, align 1
  %329 = getelementptr inbounds i8, i8* %322, i64 3
  %330 = load i8, i8* %326, align 1
  %331 = getelementptr inbounds i8, i8* %321, i64 3
  store i8 %330, i8* %328, align 1
  %332 = getelementptr inbounds i8, i8* %322, i64 4
  %333 = load i8, i8* %329, align 1
  %334 = getelementptr inbounds i8, i8* %321, i64 4
  store i8 %333, i8* %331, align 1
  %335 = getelementptr inbounds i8, i8* %322, i64 5
  %336 = load i8, i8* %332, align 1
  %337 = getelementptr inbounds i8, i8* %321, i64 5
  store i8 %336, i8* %334, align 1
  %338 = getelementptr inbounds i8, i8* %322, i64 6
  %339 = load i8, i8* %335, align 1
  %340 = getelementptr inbounds i8, i8* %321, i64 6
  store i8 %339, i8* %337, align 1
  %341 = getelementptr inbounds i8, i8* %322, i64 7
  %342 = load i8, i8* %338, align 1
  %343 = getelementptr inbounds i8, i8* %321, i64 7
  store i8 %342, i8* %340, align 1
  %344 = add i32 %320, -8
  %345 = getelementptr inbounds i8, i8* %322, i64 8
  %346 = load i8, i8* %341, align 1
  %347 = getelementptr inbounds i8, i8* %321, i64 8
  store i8 %346, i8* %343, align 1
  %348 = icmp eq i32 %344, 0
  br i1 %348, label %349, label %319, !llvm.loop !12

349:                                              ; preds = %314, %319, %294, %186, %182, %128, %133, %137, %142, %146, %150, %154, %158, %162, %166, %170, %174, %178
  %350 = getelementptr inbounds %struct.jpeg_marker_struct, %struct.jpeg_marker_struct* %129, i64 0, i32 0
  %351 = load %struct.jpeg_marker_struct*, %struct.jpeg_marker_struct** %350, align 8
  %352 = icmp eq %struct.jpeg_marker_struct* %351, null
  br i1 %352, label %353, label %128

353:                                              ; preds = %349, %125
  store i8* %123, i8** %1, align 8
  store i32 %116, i32* %2, align 4
  br label %354

354:                                              ; preds = %88, %80, %78, %106, %3, %121, %119, %101, %353
  %355 = phi i32 [ 1, %353 ], [ 0, %101 ], [ 0, %119 ], [ 0, %121 ], [ 0, %3 ], [ 0, %106 ], [ 0, %78 ], [ 0, %80 ], [ 0, %88 ]
  call void @llvm.lifetime.end.p0i8(i64 1024, i8* nonnull %9) #4
  call void @llvm.lifetime.end.p0i8(i64 1024, i8* nonnull %8) #4
  call void @llvm.lifetime.end.p0i8(i64 256, i8* nonnull %7) #4
  ret i32 %355
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

; Function Attrs: nofree nounwind
declare noalias i8* @malloc(i64) local_unnamed_addr #3

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{!3}
!3 = distinct !{!3, !4}
!4 = distinct !{!4, !"LVerDomain"}
!5 = !{!6}
!6 = distinct !{!6, !4}
!7 = distinct !{!7, !8}
!8 = !{!"llvm.loop.isvectorized", i32 1}
!9 = distinct !{!9, !10}
!10 = !{!"llvm.loop.unroll.disable"}
!11 = distinct !{!11, !10}
!12 = distinct !{!12, !8}
