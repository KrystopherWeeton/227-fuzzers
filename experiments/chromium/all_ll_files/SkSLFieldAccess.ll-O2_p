; ModuleID = '../../third_party/skia/src/sksl/ir/SkSLFieldAccess.cpp'
source_filename = "../../third_party/skia/src/sksl/ir/SkSLFieldAccess.cpp"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"class.SkSL::Context" = type { %"class.SkSL::BuiltinTypes", %"class.SkSL::ErrorReporter"*, %class.GrShaderCaps*, %"class.SkSL::ModifiersPool"*, %"struct.SkSL::ProgramConfig"* }
%"class.SkSL::BuiltinTypes" = type { %"class.std::__1::unique_ptr.16", %"class.std::__1::unique_ptr.16", %"class.std::__1::unique_ptr.16", %"class.std::__1::unique_ptr.16", %"class.std::__1::unique_ptr.16", %"class.std::__1::unique_ptr.16", %"class.std::__1::unique_ptr.16", %"class.std::__1::unique_ptr.16", %"class.std::__1::unique_ptr.16", %"class.std::__1::unique_ptr.16", %"class.std::__1::unique_ptr.16", %"class.std::__1::unique_ptr.16", %"class.std::__1::unique_ptr.16", %"class.std::__1::unique_ptr.16", %"class.std::__1::unique_ptr.16", %"class.std::__1::unique_ptr.16", %"class.std::__1::unique_ptr.16", %"class.std::__1::unique_ptr.16", %"class.std::__1::unique_ptr.16", %"class.std::__1::unique_ptr.16", %"class.std::__1::unique_ptr.16", %"class.std::__1::unique_ptr.16", %"class.std::__1::unique_ptr.16", %"class.std::__1::unique_ptr.16", %"class.std::__1::unique_ptr.16", %"class.std::__1::unique_ptr.16", %"class.std::__1::unique_ptr.16", %"class.std::__1::unique_ptr.16", %"class.std::__1::unique_ptr.16", %"class.std::__1::unique_ptr.16", %"class.std::__1::unique_ptr.16", %"class.std::__1::unique_ptr.16", %"class.std::__1::unique_ptr.16", %"class.std::__1::unique_ptr.16", %"class.std::__1::unique_ptr.16", %"class.std::__1::unique_ptr.16", %"class.std::__1::unique_ptr.16", %"class.std::__1::unique_ptr.16", %"class.std::__1::unique_ptr.16", %"class.std::__1::unique_ptr.16", %"class.std::__1::unique_ptr.16", %"class.std::__1::unique_ptr.16", %"class.std::__1::unique_ptr.16", %"class.std::__1::unique_ptr.16", %"class.std::__1::unique_ptr.16", %"class.std::__1::unique_ptr.16", %"class.std::__1::unique_ptr.16", %"class.std::__1::unique_ptr.16", %"class.std::__1::unique_ptr.16", %"class.std::__1::unique_ptr.16", %"class.std::__1::unique_ptr.16", %"class.std::__1::unique_ptr.16", %"class.std::__1::unique_ptr.16", %"class.std::__1::unique_ptr.16", %"class.std::__1::unique_ptr.16", %"class.std::__1::unique_ptr.16", %"class.std::__1::unique_ptr.16", %"class.std::__1::unique_ptr.16", %"class.std::__1::unique_ptr.16", %"class.std::__1::unique_ptr.16", %"class.std::__1::unique_ptr.16", %"class.std::__1::unique_ptr.16", %"class.std::__1::unique_ptr.16", %"class.std::__1::unique_ptr.16", %"class.std::__1::unique_ptr.16", %"class.std::__1::unique_ptr.16", %"class.std::__1::unique_ptr.16", %"class.std::__1::unique_ptr.16", %"class.std::__1::unique_ptr.16", %"class.std::__1::unique_ptr.16", %"class.std::__1::unique_ptr.16", %"class.std::__1::unique_ptr.16", %"class.std::__1::unique_ptr.16", %"class.std::__1::unique_ptr.16", %"class.std::__1::unique_ptr.16", %"class.std::__1::unique_ptr.16", %"class.std::__1::unique_ptr.16", %"class.std::__1::unique_ptr.16", %"class.std::__1::unique_ptr.16", %"class.std::__1::unique_ptr.16", %"class.std::__1::unique_ptr.16", %"class.std::__1::unique_ptr.16", %"class.std::__1::unique_ptr.16", %"class.std::__1::unique_ptr.16", %"class.std::__1::unique_ptr.16", %"class.std::__1::unique_ptr.16", %"class.std::__1::unique_ptr.16", %"class.std::__1::unique_ptr.16", %"class.std::__1::unique_ptr.16" }
%"class.std::__1::unique_ptr.16" = type { %"class.std::__1::__compressed_pair.17" }
%"class.std::__1::__compressed_pair.17" = type { %"struct.std::__1::__compressed_pair_elem.18" }
%"struct.std::__1::__compressed_pair_elem.18" = type { %"class.SkSL::Type"* }
%"class.SkSL::Type" = type { %"class.SkSL::Symbol", i8*, %"class.SkSL::String", i32, i32, i32, %"class.SkSL::Type"*, %"class.std::__1::vector", i32, i32, %"class.std::__1::vector.8", i32, i8, i8, i8, i8, i8, %"class.SkSL::Type"*, %"class.SkSL::Type"* }
%"class.SkSL::Symbol" = type { %"class.SkSL::IRNode", %"struct.SkSL::StringFragment", %"class.SkSL::Type"* }
%"class.SkSL::IRNode" = type { i32 (...)**, i32, i32 }
%"struct.SkSL::StringFragment" = type { i8*, i64 }
%"class.SkSL::String" = type { %"class.std::__1::basic_string" }
%"class.std::__1::basic_string" = type { %"class.std::__1::__compressed_pair.0" }
%"class.std::__1::__compressed_pair.0" = type { %"struct.std::__1::__compressed_pair_elem.1" }
%"struct.std::__1::__compressed_pair_elem.1" = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" = type { %union.anon }
%union.anon = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" = type { i8*, i64, i64 }
%"class.std::__1::vector" = type { %"class.std::__1::__vector_base" }
%"class.std::__1::__vector_base" = type { %"class.SkSL::Type"**, %"class.SkSL::Type"**, %"class.std::__1::__compressed_pair.3" }
%"class.std::__1::__compressed_pair.3" = type { %"struct.std::__1::__compressed_pair_elem.4" }
%"struct.std::__1::__compressed_pair_elem.4" = type { %"class.SkSL::Type"** }
%"class.std::__1::vector.8" = type { %"class.std::__1::__vector_base.9" }
%"class.std::__1::__vector_base.9" = type { %"struct.SkSL::Type::Field"*, %"struct.SkSL::Type::Field"*, %"class.std::__1::__compressed_pair.10" }
%"struct.SkSL::Type::Field" = type { %"struct.SkSL::Modifiers", %"struct.SkSL::StringFragment", %"class.SkSL::Type"* }
%"struct.SkSL::Modifiers" = type { %"struct.SkSL::Layout", i32, [4 x i8] }
%"struct.SkSL::Layout" = type <{ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, [4 x i8], %"struct.SkSL::StringFragment", i32, [4 x i8] }>
%"class.std::__1::__compressed_pair.10" = type { %"struct.std::__1::__compressed_pair_elem.11" }
%"struct.std::__1::__compressed_pair_elem.11" = type { %"struct.SkSL::Type::Field"* }
%"class.SkSL::ErrorReporter" = type { i32 (...)** }
%class.GrShaderCaps = type <{ %class.SkRefCnt.base, i32, i56, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i32, i32, i32, [4 x i8] }>
%class.SkRefCnt.base = type { %class.SkRefCntBase.base }
%class.SkRefCntBase.base = type <{ i32 (...)**, %"struct.std::__1::atomic" }>
%"struct.std::__1::atomic" = type { %"struct.std::__1::__atomic_base" }
%"struct.std::__1::__atomic_base" = type { %"struct.std::__1::__atomic_base.22" }
%"struct.std::__1::__atomic_base.22" = type { %"struct.std::__1::__cxx_atomic_impl" }
%"struct.std::__1::__cxx_atomic_impl" = type { %"struct.std::__1::__cxx_atomic_base_impl" }
%"struct.std::__1::__cxx_atomic_base_impl" = type { i32 }
%"class.SkSL::ModifiersPool" = type { %"class.std::__1::unordered_set" }
%"class.std::__1::unordered_set" = type { %"class.std::__1::__hash_table" }
%"class.std::__1::__hash_table" = type <{ %"class.std::__1::unique_ptr.23", %"class.std::__1::__compressed_pair.32", %"class.std::__1::__compressed_pair.37", %"class.std::__1::__compressed_pair.39", [4 x i8] }>
%"class.std::__1::unique_ptr.23" = type { %"class.std::__1::__compressed_pair.24" }
%"class.std::__1::__compressed_pair.24" = type { %"struct.std::__1::__compressed_pair_elem.25", %"struct.std::__1::__compressed_pair_elem.26" }
%"struct.std::__1::__compressed_pair_elem.25" = type { %"struct.std::__1::__hash_node_base"** }
%"struct.std::__1::__hash_node_base" = type { %"struct.std::__1::__hash_node_base"* }
%"struct.std::__1::__compressed_pair_elem.26" = type { %"class.std::__1::__bucket_list_deallocator" }
%"class.std::__1::__bucket_list_deallocator" = type { %"class.std::__1::__compressed_pair.27" }
%"class.std::__1::__compressed_pair.27" = type { %"struct.std::__1::__compressed_pair_elem.28" }
%"struct.std::__1::__compressed_pair_elem.28" = type { i64 }
%"class.std::__1::__compressed_pair.32" = type { %"struct.std::__1::__compressed_pair_elem.33" }
%"struct.std::__1::__compressed_pair_elem.33" = type { %"struct.std::__1::__hash_node_base" }
%"class.std::__1::__compressed_pair.37" = type { %"struct.std::__1::__compressed_pair_elem.28" }
%"class.std::__1::__compressed_pair.39" = type { %"struct.std::__1::__compressed_pair_elem.40" }
%"struct.std::__1::__compressed_pair_elem.40" = type { float }
%"struct.SkSL::ProgramConfig" = type opaque
%"class.SkSL::Expression" = type { %"class.SkSL::IRNode", %"class.SkSL::Type"* }
%"class.std::__1::__basic_string_common" = type { i8 }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short" = type { [23 x i8], %struct.anon }
%struct.anon = type { i8 }
%"class.SkSL::FieldAccess" = type { %"class.SkSL::Expression", i32, i8, %"class.std::__1::unique_ptr" }
%"class.std::__1::unique_ptr" = type { %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %"class.SkSL::Expression"* }

$_ZN4SkSL11FieldAccessD2Ev = comdat any

$_ZN4SkSL11FieldAccessD0Ev = comdat any

$_ZNK4SkSL11FieldAccess11descriptionEv = comdat any

$_ZNK4SkSL10Expression4typeEv = comdat any

$_ZNK4SkSL10Expression21isCompileTimeConstantEv = comdat any

$_ZNK4SkSL10Expression15compareConstantERKS0_ = comdat any

$_ZNK4SkSL10Expression19isConstantOrUniformEv = comdat any

$_ZNK4SkSL11FieldAccess11hasPropertyENS_10Expression8PropertyE = comdat any

$_ZNK4SkSL10Expression12coercionCostERKNS_4TypeE = comdat any

$_ZNK4SkSL10Expression24getConstantSubexpressionEi = comdat any

$_ZNK4SkSL11FieldAccess5cloneEv = comdat any

$_ZTVN4SkSL11FieldAccessE = comdat any

@.str = private unnamed_addr constant [7 x i8] c"type '\00", align 1
@.str.1 = private unnamed_addr constant [32 x i8] c"' does not have a field named '\00", align 1
@.str.2 = private unnamed_addr constant [2 x i8] c"'\00", align 1
@_ZTVN4SkSL11FieldAccessE = linkonce_odr hidden unnamed_addr constant { [13 x i8*] } { [13 x i8*] [i8* null, i8* null, i8* bitcast (void (%"class.SkSL::FieldAccess"*)* @_ZN4SkSL11FieldAccessD2Ev to i8*), i8* bitcast (void (%"class.SkSL::FieldAccess"*)* @_ZN4SkSL11FieldAccessD0Ev to i8*), i8* bitcast (void (%"class.SkSL::String"*, %"class.SkSL::FieldAccess"*)* @_ZNK4SkSL11FieldAccess11descriptionEv to i8*), i8* bitcast (%"class.SkSL::Type"* (%"class.SkSL::Expression"*)* @_ZNK4SkSL10Expression4typeEv to i8*), i8* bitcast (i1 (%"class.SkSL::Expression"*)* @_ZNK4SkSL10Expression21isCompileTimeConstantEv to i8*), i8* bitcast (i32 (%"class.SkSL::Expression"*, %"class.SkSL::Expression"*)* @_ZNK4SkSL10Expression15compareConstantERKS0_ to i8*), i8* bitcast (i1 (%"class.SkSL::Expression"*)* @_ZNK4SkSL10Expression19isConstantOrUniformEv to i8*), i8* bitcast (i1 (%"class.SkSL::FieldAccess"*, i32)* @_ZNK4SkSL11FieldAccess11hasPropertyENS_10Expression8PropertyE to i8*), i8* bitcast ({ i64, i8 } (%"class.SkSL::Expression"*, %"class.SkSL::Type"*)* @_ZNK4SkSL10Expression12coercionCostERKNS_4TypeE to i8*), i8* bitcast (%"class.SkSL::Expression"* (%"class.SkSL::Expression"*, i32)* @_ZNK4SkSL10Expression24getConstantSubexpressionEi to i8*), i8* bitcast (%"class.SkSL::Expression"* (%"class.SkSL::FieldAccess"*)* @_ZNK4SkSL11FieldAccess5cloneEv to i8*)] }, comdat, align 8
@.str.4 = private unnamed_addr constant [2 x i8] c".\00", align 1

; Function Attrs: nounwind ssp uwtable
define hidden %"class.SkSL::Expression"* @_ZN4SkSL11FieldAccess7ConvertERKNS_7ContextENSt3__110unique_ptrINS_10ExpressionENS4_14default_deleteIS6_EEEENS_14StringFragmentE(%"class.SkSL::Context"* nocapture readonly dereferenceable(744), %"class.SkSL::Expression"*, i8*, i64) local_unnamed_addr #0 align 2 {
  %5 = alloca %"class.SkSL::String", align 8
  %6 = alloca %"class.SkSL::String", align 8
  %7 = alloca %"class.SkSL::String", align 8
  %8 = alloca %"class.SkSL::String", align 8
  %9 = alloca %"class.SkSL::String", align 8
  %10 = ptrtoint %"class.SkSL::Expression"* %1 to i64
  %11 = bitcast %"class.SkSL::Expression"* %1 to %"class.SkSL::Type"* (%"class.SkSL::Expression"*)***
  %12 = load %"class.SkSL::Type"* (%"class.SkSL::Expression"*)**, %"class.SkSL::Type"* (%"class.SkSL::Expression"*)*** %11, align 8
  %13 = getelementptr inbounds %"class.SkSL::Type"* (%"class.SkSL::Expression"*)*, %"class.SkSL::Type"* (%"class.SkSL::Expression"*)** %12, i64 3
  %14 = load %"class.SkSL::Type"* (%"class.SkSL::Expression"*)*, %"class.SkSL::Type"* (%"class.SkSL::Expression"*)** %13, align 8
  %15 = tail call dereferenceable(184) %"class.SkSL::Type"* %14(%"class.SkSL::Expression"* %1) #7
  %16 = getelementptr inbounds %"class.SkSL::Type", %"class.SkSL::Type"* %15, i64 0, i32 3
  %17 = load i32, i32* %16, align 8
  %18 = icmp eq i32 %17, 9
  br i1 %18, label %19, label %69

19:                                               ; preds = %4
  %20 = getelementptr inbounds %"class.SkSL::Type", %"class.SkSL::Type"* %15, i64 0, i32 10
  %21 = getelementptr inbounds %"class.SkSL::Type", %"class.SkSL::Type"* %15, i64 0, i32 10, i32 0, i32 1
  %22 = bitcast %"struct.SkSL::Type::Field"** %21 to i64*
  %23 = load i64, i64* %22, align 8
  %24 = bitcast %"class.std::__1::vector.8"* %20 to i64*
  %25 = load i64, i64* %24, align 8
  %26 = icmp eq i64 %23, %25
  br i1 %26, label %69, label %27

27:                                               ; preds = %19, %33
  %28 = phi i64 [ %36, %33 ], [ %25, %19 ]
  %29 = phi i64 [ %34, %33 ], [ 0, %19 ]
  %30 = inttoptr i64 %28 to %"struct.SkSL::Type::Field"*
  %31 = getelementptr inbounds %"struct.SkSL::Type::Field", %"struct.SkSL::Type::Field"* %30, i64 %29, i32 1
  %32 = tail call zeroext i1 @_ZNK4SkSL14StringFragmenteqES0_(%"struct.SkSL::StringFragment"* %31, i8* %2, i64 %3) #7
  br i1 %32, label %40, label %33

33:                                               ; preds = %27
  %34 = add nuw i64 %29, 1
  %35 = load i64, i64* %22, align 8
  %36 = load i64, i64* %24, align 8
  %37 = sub i64 %35, %36
  %38 = sdiv exact i64 %37, 104
  %39 = icmp ult i64 %34, %38
  br i1 %39, label %27, label %69

40:                                               ; preds = %27
  %41 = trunc i64 %29 to i32
  %42 = tail call i8* @_ZN4SkSL4Pool11AllocMemoryEm(i64 40) #7
  %43 = getelementptr inbounds %"class.SkSL::Expression", %"class.SkSL::Expression"* %1, i64 0, i32 0, i32 1
  %44 = load i32, i32* %43, align 8
  %45 = load %"class.SkSL::Type"* (%"class.SkSL::Expression"*)**, %"class.SkSL::Type"* (%"class.SkSL::Expression"*)*** %11, align 8
  %46 = getelementptr inbounds %"class.SkSL::Type"* (%"class.SkSL::Expression"*)*, %"class.SkSL::Type"* (%"class.SkSL::Expression"*)** %45, i64 3
  %47 = load %"class.SkSL::Type"* (%"class.SkSL::Expression"*)*, %"class.SkSL::Type"* (%"class.SkSL::Expression"*)** %46, align 8
  %48 = tail call dereferenceable(184) %"class.SkSL::Type"* %47(%"class.SkSL::Expression"* %1) #7
  %49 = shl i64 %29, 32
  %50 = ashr exact i64 %49, 32
  %51 = getelementptr inbounds %"class.SkSL::Type", %"class.SkSL::Type"* %48, i64 0, i32 10, i32 0, i32 0
  %52 = load %"struct.SkSL::Type::Field"*, %"struct.SkSL::Type::Field"** %51, align 8
  %53 = getelementptr inbounds %"struct.SkSL::Type::Field", %"struct.SkSL::Type::Field"* %52, i64 %50, i32 2
  %54 = bitcast %"class.SkSL::Type"** %53 to i64*
  %55 = load i64, i64* %54, align 8
  %56 = bitcast i8* %42 to i32 (...)***
  %57 = getelementptr inbounds i8, i8* %42, i64 8
  %58 = bitcast i8* %57 to i32*
  store i32 %44, i32* %58, align 8
  %59 = getelementptr inbounds i8, i8* %42, i64 12
  %60 = bitcast i8* %59 to i32*
  store i32 44, i32* %60, align 4
  %61 = getelementptr inbounds i8, i8* %42, i64 16
  %62 = bitcast i8* %61 to i64*
  store i64 %55, i64* %62, align 8
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [13 x i8*] }, { [13 x i8*] }* @_ZTVN4SkSL11FieldAccessE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %56, align 8
  %63 = getelementptr inbounds i8, i8* %42, i64 24
  %64 = bitcast i8* %63 to i32*
  store i32 %41, i32* %64, align 8
  %65 = getelementptr inbounds i8, i8* %42, i64 28
  store i8 0, i8* %65, align 4
  %66 = getelementptr inbounds i8, i8* %42, i64 32
  %67 = bitcast i8* %66 to i64*
  store i64 %10, i64* %67, align 8
  %68 = bitcast i8* %42 to %"class.SkSL::Expression"*
  br label %159

69:                                               ; preds = %33, %19, %4
  %70 = getelementptr inbounds %"class.SkSL::Context", %"class.SkSL::Context"* %0, i64 0, i32 1
  %71 = load %"class.SkSL::ErrorReporter"*, %"class.SkSL::ErrorReporter"** %70, align 8
  %72 = getelementptr inbounds %"class.SkSL::Expression", %"class.SkSL::Expression"* %1, i64 0, i32 0, i32 1
  %73 = load i32, i32* %72, align 8
  %74 = bitcast %"class.SkSL::String"* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %74) #7
  %75 = bitcast %"class.SkSL::String"* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %75) #7
  %76 = bitcast %"class.SkSL::String"* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %76) #7
  %77 = bitcast %"class.SkSL::String"* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %77) #7
  %78 = getelementptr inbounds %"class.SkSL::Type", %"class.SkSL::Type"* %15, i64 0, i32 18
  %79 = load %"class.SkSL::Type"*, %"class.SkSL::Type"** %78, align 8, !noalias !2
  %80 = icmp eq %"class.SkSL::Type"* %79, null
  %81 = select i1 %80, %"class.SkSL::Type"* %15, %"class.SkSL::Type"* %79
  %82 = getelementptr inbounds %"class.SkSL::Type", %"class.SkSL::Type"* %81, i64 0, i32 0, i32 1, i32 0
  %83 = load i8*, i8** %82, align 8, !noalias !2
  %84 = getelementptr inbounds %"class.SkSL::Type", %"class.SkSL::Type"* %81, i64 0, i32 0, i32 1, i32 1
  %85 = load i64, i64* %84, align 8, !noalias !2
  %86 = icmp ugt i64 %85, -17
  br i1 %86, label %87, label %89

87:                                               ; preds = %69
  %88 = bitcast %"class.SkSL::String"* %9 to %"class.std::__1::__basic_string_common"*
  call void @_ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__basic_string_common"* nonnull %88) #8
  unreachable

89:                                               ; preds = %69
  %90 = icmp ult i64 %85, 23
  br i1 %90, label %99, label %91

91:                                               ; preds = %89
  %92 = add nuw i64 %85, 16
  %93 = and i64 %92, -16
  %94 = tail call i8* @_Znwm(i64 %93) #9
  %95 = getelementptr inbounds %"class.SkSL::String", %"class.SkSL::String"* %9, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  store i8* %94, i8** %95, align 8, !alias.scope !2
  %96 = or i64 %93, -9223372036854775808
  %97 = getelementptr inbounds %"class.SkSL::String", %"class.SkSL::String"* %9, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 2
  store i64 %96, i64* %97, align 8, !alias.scope !2
  %98 = getelementptr inbounds %"class.SkSL::String", %"class.SkSL::String"* %9, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  store i64 %85, i64* %98, align 8, !alias.scope !2
  br label %104

99:                                               ; preds = %89
  %100 = trunc i64 %85 to i8
  %101 = bitcast %"class.SkSL::String"* %9 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %102 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %101, i64 0, i32 1, i32 0
  store i8 %100, i8* %102, align 1, !alias.scope !2
  %103 = icmp eq i64 %85, 0
  br i1 %103, label %106, label %104

104:                                              ; preds = %99, %91
  %105 = phi i8* [ %94, %91 ], [ %77, %99 ]
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 1 %105, i8* align 1 %83, i64 %85, i1 false) #7
  br label %106

106:                                              ; preds = %99, %104
  %107 = phi i8* [ %77, %99 ], [ %105, %104 ]
  %108 = getelementptr inbounds i8, i8* %107, i64 %85
  store i8 0, i8* %108, align 1
  call void @_ZN4SkSLplEPKcRKNS_6StringE(%"class.SkSL::String"* nonnull sret %8, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str, i64 0, i64 0), %"class.SkSL::String"* nonnull dereferenceable(24) %9) #7
  call void @_ZNK4SkSL6StringplEPKc(%"class.SkSL::String"* nonnull sret %7, %"class.SkSL::String"* nonnull %8, i8* getelementptr inbounds ([32 x i8], [32 x i8]* @.str.1, i64 0, i64 0)) #7
  call void @_ZNK4SkSL6StringplENS_14StringFragmentE(%"class.SkSL::String"* nonnull sret %6, %"class.SkSL::String"* nonnull %7, i8* %2, i64 %3) #7
  call void @_ZNK4SkSL6StringplEPKc(%"class.SkSL::String"* nonnull sret %5, %"class.SkSL::String"* nonnull %6, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.2, i64 0, i64 0)) #7
  %109 = bitcast %"class.SkSL::ErrorReporter"* %71 to void (%"class.SkSL::ErrorReporter"*, i32, %"class.SkSL::String"*)***
  %110 = load void (%"class.SkSL::ErrorReporter"*, i32, %"class.SkSL::String"*)**, void (%"class.SkSL::ErrorReporter"*, i32, %"class.SkSL::String"*)*** %109, align 8
  %111 = getelementptr inbounds void (%"class.SkSL::ErrorReporter"*, i32, %"class.SkSL::String"*)*, void (%"class.SkSL::ErrorReporter"*, i32, %"class.SkSL::String"*)** %110, i64 2
  %112 = load void (%"class.SkSL::ErrorReporter"*, i32, %"class.SkSL::String"*)*, void (%"class.SkSL::ErrorReporter"*, i32, %"class.SkSL::String"*)** %111, align 8
  call void %112(%"class.SkSL::ErrorReporter"* %71, i32 %73, %"class.SkSL::String"* nonnull %5) #7
  %113 = bitcast %"class.SkSL::String"* %5 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %114 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %113, i64 0, i32 1, i32 0
  %115 = load i8, i8* %114, align 1
  %116 = icmp slt i8 %115, 0
  br i1 %116, label %117, label %120

117:                                              ; preds = %106
  %118 = getelementptr inbounds %"class.SkSL::String", %"class.SkSL::String"* %5, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %119 = load i8*, i8** %118, align 8
  call void @_ZdlPv(i8* %119) #9
  br label %120

120:                                              ; preds = %106, %117
  %121 = bitcast %"class.SkSL::String"* %6 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %122 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %121, i64 0, i32 1, i32 0
  %123 = load i8, i8* %122, align 1
  %124 = icmp slt i8 %123, 0
  br i1 %124, label %125, label %128

125:                                              ; preds = %120
  %126 = getelementptr inbounds %"class.SkSL::String", %"class.SkSL::String"* %6, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %127 = load i8*, i8** %126, align 8
  call void @_ZdlPv(i8* %127) #9
  br label %128

128:                                              ; preds = %120, %125
  %129 = bitcast %"class.SkSL::String"* %7 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %130 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %129, i64 0, i32 1, i32 0
  %131 = load i8, i8* %130, align 1
  %132 = icmp slt i8 %131, 0
  br i1 %132, label %133, label %136

133:                                              ; preds = %128
  %134 = getelementptr inbounds %"class.SkSL::String", %"class.SkSL::String"* %7, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %135 = load i8*, i8** %134, align 8
  call void @_ZdlPv(i8* %135) #9
  br label %136

136:                                              ; preds = %128, %133
  %137 = bitcast %"class.SkSL::String"* %8 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %138 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %137, i64 0, i32 1, i32 0
  %139 = load i8, i8* %138, align 1
  %140 = icmp slt i8 %139, 0
  br i1 %140, label %141, label %144

141:                                              ; preds = %136
  %142 = getelementptr inbounds %"class.SkSL::String", %"class.SkSL::String"* %8, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %143 = load i8*, i8** %142, align 8
  call void @_ZdlPv(i8* %143) #9
  br label %144

144:                                              ; preds = %136, %141
  %145 = bitcast %"class.SkSL::String"* %9 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %146 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %145, i64 0, i32 1, i32 0
  %147 = load i8, i8* %146, align 1
  %148 = icmp slt i8 %147, 0
  br i1 %148, label %149, label %152

149:                                              ; preds = %144
  %150 = getelementptr inbounds %"class.SkSL::String", %"class.SkSL::String"* %9, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %151 = load i8*, i8** %150, align 8
  call void @_ZdlPv(i8* %151) #9
  br label %152

152:                                              ; preds = %149, %144
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %77) #7
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %76) #7
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %75) #7
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %74) #7
  %153 = icmp eq %"class.SkSL::Expression"* %1, null
  br i1 %153, label %159, label %154

154:                                              ; preds = %152
  %155 = bitcast %"class.SkSL::Expression"* %1 to void (%"class.SkSL::Expression"*)***
  %156 = load void (%"class.SkSL::Expression"*)**, void (%"class.SkSL::Expression"*)*** %155, align 8
  %157 = getelementptr inbounds void (%"class.SkSL::Expression"*)*, void (%"class.SkSL::Expression"*)** %156, i64 1
  %158 = load void (%"class.SkSL::Expression"*)*, void (%"class.SkSL::Expression"*)** %157, align 8
  call void %158(%"class.SkSL::Expression"* nonnull %1) #7
  br label %159

159:                                              ; preds = %40, %152, %154
  %160 = phi %"class.SkSL::Expression"* [ %68, %40 ], [ null, %152 ], [ null, %154 ]
  ret %"class.SkSL::Expression"* %160
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

declare zeroext i1 @_ZNK4SkSL14StringFragmenteqES0_(%"struct.SkSL::StringFragment"*, i8*, i64) local_unnamed_addr #2

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #1

; Function Attrs: nounwind ssp uwtable
define hidden %"class.SkSL::Expression"* @_ZN4SkSL11FieldAccess4MakeERKNS_7ContextENSt3__110unique_ptrINS_10ExpressionENS4_14default_deleteIS6_EEEEiNS_20FieldAccessOwnerKindE(%"class.SkSL::Context"* nocapture readnone dereferenceable(744), %"class.SkSL::Expression"*, i32, i8 signext) local_unnamed_addr #0 align 2 {
  %5 = ptrtoint %"class.SkSL::Expression"* %1 to i64
  %6 = tail call i8* @_ZN4SkSL4Pool11AllocMemoryEm(i64 40) #7
  %7 = getelementptr inbounds %"class.SkSL::Expression", %"class.SkSL::Expression"* %1, i64 0, i32 0, i32 1
  %8 = load i32, i32* %7, align 8
  %9 = bitcast %"class.SkSL::Expression"* %1 to %"class.SkSL::Type"* (%"class.SkSL::Expression"*)***
  %10 = load %"class.SkSL::Type"* (%"class.SkSL::Expression"*)**, %"class.SkSL::Type"* (%"class.SkSL::Expression"*)*** %9, align 8
  %11 = getelementptr inbounds %"class.SkSL::Type"* (%"class.SkSL::Expression"*)*, %"class.SkSL::Type"* (%"class.SkSL::Expression"*)** %10, i64 3
  %12 = load %"class.SkSL::Type"* (%"class.SkSL::Expression"*)*, %"class.SkSL::Type"* (%"class.SkSL::Expression"*)** %11, align 8
  %13 = tail call dereferenceable(184) %"class.SkSL::Type"* %12(%"class.SkSL::Expression"* %1) #7
  %14 = sext i32 %2 to i64
  %15 = getelementptr inbounds %"class.SkSL::Type", %"class.SkSL::Type"* %13, i64 0, i32 10, i32 0, i32 0
  %16 = load %"struct.SkSL::Type::Field"*, %"struct.SkSL::Type::Field"** %15, align 8
  %17 = getelementptr inbounds %"struct.SkSL::Type::Field", %"struct.SkSL::Type::Field"* %16, i64 %14, i32 2
  %18 = bitcast %"class.SkSL::Type"** %17 to i64*
  %19 = load i64, i64* %18, align 8
  %20 = bitcast i8* %6 to i32 (...)***
  %21 = getelementptr inbounds i8, i8* %6, i64 8
  %22 = bitcast i8* %21 to i32*
  store i32 %8, i32* %22, align 8
  %23 = getelementptr inbounds i8, i8* %6, i64 12
  %24 = bitcast i8* %23 to i32*
  store i32 44, i32* %24, align 4
  %25 = getelementptr inbounds i8, i8* %6, i64 16
  %26 = bitcast i8* %25 to i64*
  store i64 %19, i64* %26, align 8
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [13 x i8*] }, { [13 x i8*] }* @_ZTVN4SkSL11FieldAccessE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %20, align 8
  %27 = getelementptr inbounds i8, i8* %6, i64 24
  %28 = bitcast i8* %27 to i32*
  store i32 %2, i32* %28, align 8
  %29 = getelementptr inbounds i8, i8* %6, i64 28
  store i8 %3, i8* %29, align 4
  %30 = getelementptr inbounds i8, i8* %6, i64 32
  %31 = bitcast i8* %30 to i64*
  store i64 %5, i64* %31, align 8
  %32 = bitcast i8* %6 to %"class.SkSL::Expression"*
  ret %"class.SkSL::Expression"* %32
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

declare void @_ZN4SkSLplEPKcRKNS_6StringE(%"class.SkSL::String"* sret, i8*, %"class.SkSL::String"* dereferenceable(24)) local_unnamed_addr #2

declare void @_ZNK4SkSL6StringplEPKc(%"class.SkSL::String"* sret, %"class.SkSL::String"*, i8*) local_unnamed_addr #2

declare void @_ZNK4SkSL6StringplENS_14StringFragmentE(%"class.SkSL::String"* sret, %"class.SkSL::String"*, i8*, i64) local_unnamed_addr #2

; Function Attrs: noreturn
declare void @_ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__basic_string_common"*) local_unnamed_addr #3

; Function Attrs: nobuiltin nofree
declare noalias nonnull i8* @_Znwm(i64) local_unnamed_addr #4

; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(i8*) local_unnamed_addr #5

declare i8* @_ZN4SkSL4Pool11AllocMemoryEm(i64) local_unnamed_addr #2

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZN4SkSL11FieldAccessD2Ev(%"class.SkSL::FieldAccess"*) unnamed_addr #6 comdat align 2 {
  %2 = getelementptr inbounds %"class.SkSL::FieldAccess", %"class.SkSL::FieldAccess"* %0, i64 0, i32 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [13 x i8*] }, { [13 x i8*] }* @_ZTVN4SkSL11FieldAccessE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %2, align 8
  %3 = getelementptr inbounds %"class.SkSL::FieldAccess", %"class.SkSL::FieldAccess"* %0, i64 0, i32 3, i32 0, i32 0, i32 0
  %4 = load %"class.SkSL::Expression"*, %"class.SkSL::Expression"** %3, align 8
  store %"class.SkSL::Expression"* null, %"class.SkSL::Expression"** %3, align 8
  %5 = icmp eq %"class.SkSL::Expression"* %4, null
  br i1 %5, label %11, label %6

6:                                                ; preds = %1
  %7 = bitcast %"class.SkSL::Expression"* %4 to void (%"class.SkSL::Expression"*)***
  %8 = load void (%"class.SkSL::Expression"*)**, void (%"class.SkSL::Expression"*)*** %7, align 8
  %9 = getelementptr inbounds void (%"class.SkSL::Expression"*)*, void (%"class.SkSL::Expression"*)** %8, i64 1
  %10 = load void (%"class.SkSL::Expression"*)*, void (%"class.SkSL::Expression"*)** %9, align 8
  tail call void %10(%"class.SkSL::Expression"* nonnull %4) #7
  br label %11

11:                                               ; preds = %1, %6
  ret void
}

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZN4SkSL11FieldAccessD0Ev(%"class.SkSL::FieldAccess"*) unnamed_addr #6 comdat align 2 {
  %2 = getelementptr inbounds %"class.SkSL::FieldAccess", %"class.SkSL::FieldAccess"* %0, i64 0, i32 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [13 x i8*] }, { [13 x i8*] }* @_ZTVN4SkSL11FieldAccessE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %2, align 8
  %3 = getelementptr inbounds %"class.SkSL::FieldAccess", %"class.SkSL::FieldAccess"* %0, i64 0, i32 3, i32 0, i32 0, i32 0
  %4 = load %"class.SkSL::Expression"*, %"class.SkSL::Expression"** %3, align 8
  store %"class.SkSL::Expression"* null, %"class.SkSL::Expression"** %3, align 8
  %5 = icmp eq %"class.SkSL::Expression"* %4, null
  br i1 %5, label %11, label %6

6:                                                ; preds = %1
  %7 = bitcast %"class.SkSL::Expression"* %4 to void (%"class.SkSL::Expression"*)***
  %8 = load void (%"class.SkSL::Expression"*)**, void (%"class.SkSL::Expression"*)*** %7, align 8
  %9 = getelementptr inbounds void (%"class.SkSL::Expression"*)*, void (%"class.SkSL::Expression"*)** %8, i64 1
  %10 = load void (%"class.SkSL::Expression"*)*, void (%"class.SkSL::Expression"*)** %9, align 8
  tail call void %10(%"class.SkSL::Expression"* nonnull %4) #7
  br label %11

11:                                               ; preds = %1, %6
  %12 = bitcast %"class.SkSL::FieldAccess"* %0 to i8*
  tail call void @_ZN4SkSL4Pool10FreeMemoryEPv(i8* %12) #7
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNK4SkSL11FieldAccess11descriptionEv(%"class.SkSL::String"* noalias sret, %"class.SkSL::FieldAccess"*) unnamed_addr #0 comdat align 2 {
  %3 = alloca %"class.SkSL::String", align 8
  %4 = alloca %"class.SkSL::String", align 8
  %5 = bitcast %"class.SkSL::String"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %5) #7
  %6 = bitcast %"class.SkSL::String"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %6) #7
  %7 = getelementptr inbounds %"class.SkSL::FieldAccess", %"class.SkSL::FieldAccess"* %1, i64 0, i32 3, i32 0, i32 0, i32 0
  %8 = load %"class.SkSL::Expression"*, %"class.SkSL::Expression"** %7, align 8
  %9 = getelementptr inbounds %"class.SkSL::Expression", %"class.SkSL::Expression"* %8, i64 0, i32 0
  %10 = bitcast %"class.SkSL::Expression"* %8 to void (%"class.SkSL::String"*, %"class.SkSL::IRNode"*)***
  %11 = load void (%"class.SkSL::String"*, %"class.SkSL::IRNode"*)**, void (%"class.SkSL::String"*, %"class.SkSL::IRNode"*)*** %10, align 8
  %12 = getelementptr inbounds void (%"class.SkSL::String"*, %"class.SkSL::IRNode"*)*, void (%"class.SkSL::String"*, %"class.SkSL::IRNode"*)** %11, i64 2
  %13 = load void (%"class.SkSL::String"*, %"class.SkSL::IRNode"*)*, void (%"class.SkSL::String"*, %"class.SkSL::IRNode"*)** %12, align 8
  call void %13(%"class.SkSL::String"* nonnull sret %4, %"class.SkSL::IRNode"* %9) #7
  call void @_ZNK4SkSL6StringplEPKc(%"class.SkSL::String"* nonnull sret %3, %"class.SkSL::String"* nonnull %4, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.4, i64 0, i64 0)) #7
  %14 = load %"class.SkSL::Expression"*, %"class.SkSL::Expression"** %7, align 8
  %15 = bitcast %"class.SkSL::Expression"* %14 to %"class.SkSL::Type"* (%"class.SkSL::Expression"*)***
  %16 = load %"class.SkSL::Type"* (%"class.SkSL::Expression"*)**, %"class.SkSL::Type"* (%"class.SkSL::Expression"*)*** %15, align 8
  %17 = getelementptr inbounds %"class.SkSL::Type"* (%"class.SkSL::Expression"*)*, %"class.SkSL::Type"* (%"class.SkSL::Expression"*)** %16, i64 3
  %18 = load %"class.SkSL::Type"* (%"class.SkSL::Expression"*)*, %"class.SkSL::Type"* (%"class.SkSL::Expression"*)** %17, align 8
  %19 = call dereferenceable(184) %"class.SkSL::Type"* %18(%"class.SkSL::Expression"* %14) #7
  %20 = getelementptr inbounds %"class.SkSL::FieldAccess", %"class.SkSL::FieldAccess"* %1, i64 0, i32 1
  %21 = load i32, i32* %20, align 8
  %22 = sext i32 %21 to i64
  %23 = getelementptr inbounds %"class.SkSL::Type", %"class.SkSL::Type"* %19, i64 0, i32 10, i32 0, i32 0
  %24 = load %"struct.SkSL::Type::Field"*, %"struct.SkSL::Type::Field"** %23, align 8
  %25 = getelementptr inbounds %"struct.SkSL::Type::Field", %"struct.SkSL::Type::Field"* %24, i64 %22, i32 1, i32 0
  %26 = load i8*, i8** %25, align 8
  %27 = getelementptr inbounds %"struct.SkSL::Type::Field", %"struct.SkSL::Type::Field"* %24, i64 %22, i32 1, i32 1
  %28 = load i64, i64* %27, align 8
  call void @_ZNK4SkSL6StringplENS_14StringFragmentE(%"class.SkSL::String"* sret %0, %"class.SkSL::String"* nonnull %3, i8* %26, i64 %28) #7
  %29 = bitcast %"class.SkSL::String"* %3 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %30 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %29, i64 0, i32 1, i32 0
  %31 = load i8, i8* %30, align 1
  %32 = icmp slt i8 %31, 0
  br i1 %32, label %33, label %36

33:                                               ; preds = %2
  %34 = getelementptr inbounds %"class.SkSL::String", %"class.SkSL::String"* %3, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %35 = load i8*, i8** %34, align 8
  call void @_ZdlPv(i8* %35) #9
  br label %36

36:                                               ; preds = %2, %33
  %37 = bitcast %"class.SkSL::String"* %4 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %38 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %37, i64 0, i32 1, i32 0
  %39 = load i8, i8* %38, align 1
  %40 = icmp slt i8 %39, 0
  br i1 %40, label %41, label %44

41:                                               ; preds = %36
  %42 = getelementptr inbounds %"class.SkSL::String", %"class.SkSL::String"* %4, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %43 = load i8*, i8** %42, align 8
  call void @_ZdlPv(i8* %43) #9
  br label %44

44:                                               ; preds = %36, %41
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %6) #7
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %5) #7
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden dereferenceable(184) %"class.SkSL::Type"* @_ZNK4SkSL10Expression4typeEv(%"class.SkSL::Expression"*) unnamed_addr #0 comdat align 2 {
  %2 = getelementptr inbounds %"class.SkSL::Expression", %"class.SkSL::Expression"* %0, i64 0, i32 1
  %3 = load %"class.SkSL::Type"*, %"class.SkSL::Type"** %2, align 8
  ret %"class.SkSL::Type"* %3
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZNK4SkSL10Expression21isCompileTimeConstantEv(%"class.SkSL::Expression"*) unnamed_addr #0 comdat align 2 {
  ret i1 false
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden i32 @_ZNK4SkSL10Expression15compareConstantERKS0_(%"class.SkSL::Expression"*, %"class.SkSL::Expression"* dereferenceable(24)) unnamed_addr #0 comdat align 2 {
  ret i32 -1
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZNK4SkSL10Expression19isConstantOrUniformEv(%"class.SkSL::Expression"*) unnamed_addr #0 comdat align 2 {
  %2 = bitcast %"class.SkSL::Expression"* %0 to i1 (%"class.SkSL::Expression"*)***
  %3 = load i1 (%"class.SkSL::Expression"*)**, i1 (%"class.SkSL::Expression"*)*** %2, align 8
  %4 = getelementptr inbounds i1 (%"class.SkSL::Expression"*)*, i1 (%"class.SkSL::Expression"*)** %3, i64 4
  %5 = load i1 (%"class.SkSL::Expression"*)*, i1 (%"class.SkSL::Expression"*)** %4, align 8
  %6 = tail call zeroext i1 %5(%"class.SkSL::Expression"* %0) #7
  ret i1 %6
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZNK4SkSL11FieldAccess11hasPropertyENS_10Expression8PropertyE(%"class.SkSL::FieldAccess"*, i32) unnamed_addr #0 comdat align 2 {
  %3 = getelementptr inbounds %"class.SkSL::FieldAccess", %"class.SkSL::FieldAccess"* %0, i64 0, i32 3, i32 0, i32 0, i32 0
  %4 = load %"class.SkSL::Expression"*, %"class.SkSL::Expression"** %3, align 8
  %5 = bitcast %"class.SkSL::Expression"* %4 to i1 (%"class.SkSL::Expression"*, i32)***
  %6 = load i1 (%"class.SkSL::Expression"*, i32)**, i1 (%"class.SkSL::Expression"*, i32)*** %5, align 8
  %7 = getelementptr inbounds i1 (%"class.SkSL::Expression"*, i32)*, i1 (%"class.SkSL::Expression"*, i32)** %6, i64 7
  %8 = load i1 (%"class.SkSL::Expression"*, i32)*, i1 (%"class.SkSL::Expression"*, i32)** %7, align 8
  %9 = tail call zeroext i1 %8(%"class.SkSL::Expression"* %4, i32 %1) #7
  ret i1 %9
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden { i64, i8 } @_ZNK4SkSL10Expression12coercionCostERKNS_4TypeE(%"class.SkSL::Expression"*, %"class.SkSL::Type"* dereferenceable(184)) unnamed_addr #0 comdat align 2 {
  %3 = bitcast %"class.SkSL::Expression"* %0 to %"class.SkSL::Type"* (%"class.SkSL::Expression"*)***
  %4 = load %"class.SkSL::Type"* (%"class.SkSL::Expression"*)**, %"class.SkSL::Type"* (%"class.SkSL::Expression"*)*** %3, align 8
  %5 = getelementptr inbounds %"class.SkSL::Type"* (%"class.SkSL::Expression"*)*, %"class.SkSL::Type"* (%"class.SkSL::Expression"*)** %4, i64 3
  %6 = load %"class.SkSL::Type"* (%"class.SkSL::Expression"*)*, %"class.SkSL::Type"* (%"class.SkSL::Expression"*)** %5, align 8
  %7 = tail call dereferenceable(184) %"class.SkSL::Type"* %6(%"class.SkSL::Expression"* %0) #7
  %8 = tail call { i64, i8 } @_ZNK4SkSL4Type12coercionCostERKS0_(%"class.SkSL::Type"* %7, %"class.SkSL::Type"* dereferenceable(184) %1) #7
  ret { i64, i8 } %8
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden %"class.SkSL::Expression"* @_ZNK4SkSL10Expression24getConstantSubexpressionEi(%"class.SkSL::Expression"*, i32) unnamed_addr #0 comdat align 2 {
  ret %"class.SkSL::Expression"* null
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden %"class.SkSL::Expression"* @_ZNK4SkSL11FieldAccess5cloneEv(%"class.SkSL::FieldAccess"*) unnamed_addr #0 comdat align 2 {
  %2 = tail call i8* @_ZN4SkSL4Pool11AllocMemoryEm(i64 40) #7
  %3 = getelementptr inbounds %"class.SkSL::FieldAccess", %"class.SkSL::FieldAccess"* %0, i64 0, i32 3, i32 0, i32 0, i32 0
  %4 = load %"class.SkSL::Expression"*, %"class.SkSL::Expression"** %3, align 8
  %5 = bitcast %"class.SkSL::Expression"* %4 to %"class.SkSL::Expression"* (%"class.SkSL::Expression"*)***
  %6 = load %"class.SkSL::Expression"* (%"class.SkSL::Expression"*)**, %"class.SkSL::Expression"* (%"class.SkSL::Expression"*)*** %5, align 8
  %7 = getelementptr inbounds %"class.SkSL::Expression"* (%"class.SkSL::Expression"*)*, %"class.SkSL::Expression"* (%"class.SkSL::Expression"*)** %6, i64 10
  %8 = load %"class.SkSL::Expression"* (%"class.SkSL::Expression"*)*, %"class.SkSL::Expression"* (%"class.SkSL::Expression"*)** %7, align 8
  %9 = tail call %"class.SkSL::Expression"* %8(%"class.SkSL::Expression"* %4) #7
  %10 = getelementptr inbounds %"class.SkSL::FieldAccess", %"class.SkSL::FieldAccess"* %0, i64 0, i32 1
  %11 = load i32, i32* %10, align 8
  %12 = getelementptr inbounds %"class.SkSL::FieldAccess", %"class.SkSL::FieldAccess"* %0, i64 0, i32 2
  %13 = load i8, i8* %12, align 4
  %14 = ptrtoint %"class.SkSL::Expression"* %9 to i64
  %15 = getelementptr inbounds %"class.SkSL::Expression", %"class.SkSL::Expression"* %9, i64 0, i32 0, i32 1
  %16 = load i32, i32* %15, align 8
  %17 = bitcast %"class.SkSL::Expression"* %9 to %"class.SkSL::Type"* (%"class.SkSL::Expression"*)***
  %18 = load %"class.SkSL::Type"* (%"class.SkSL::Expression"*)**, %"class.SkSL::Type"* (%"class.SkSL::Expression"*)*** %17, align 8
  %19 = getelementptr inbounds %"class.SkSL::Type"* (%"class.SkSL::Expression"*)*, %"class.SkSL::Type"* (%"class.SkSL::Expression"*)** %18, i64 3
  %20 = load %"class.SkSL::Type"* (%"class.SkSL::Expression"*)*, %"class.SkSL::Type"* (%"class.SkSL::Expression"*)** %19, align 8
  %21 = tail call dereferenceable(184) %"class.SkSL::Type"* %20(%"class.SkSL::Expression"* %9) #7
  %22 = sext i32 %11 to i64
  %23 = getelementptr inbounds %"class.SkSL::Type", %"class.SkSL::Type"* %21, i64 0, i32 10, i32 0, i32 0
  %24 = load %"struct.SkSL::Type::Field"*, %"struct.SkSL::Type::Field"** %23, align 8
  %25 = getelementptr inbounds %"struct.SkSL::Type::Field", %"struct.SkSL::Type::Field"* %24, i64 %22, i32 2
  %26 = bitcast %"class.SkSL::Type"** %25 to i64*
  %27 = load i64, i64* %26, align 8
  %28 = bitcast i8* %2 to i32 (...)***
  %29 = getelementptr inbounds i8, i8* %2, i64 8
  %30 = bitcast i8* %29 to i32*
  store i32 %16, i32* %30, align 8
  %31 = getelementptr inbounds i8, i8* %2, i64 12
  %32 = bitcast i8* %31 to i32*
  store i32 44, i32* %32, align 4
  %33 = getelementptr inbounds i8, i8* %2, i64 16
  %34 = bitcast i8* %33 to i64*
  store i64 %27, i64* %34, align 8
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [13 x i8*] }, { [13 x i8*] }* @_ZTVN4SkSL11FieldAccessE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %28, align 8
  %35 = getelementptr inbounds i8, i8* %2, i64 24
  %36 = bitcast i8* %35 to i32*
  store i32 %11, i32* %36, align 8
  %37 = getelementptr inbounds i8, i8* %2, i64 28
  store i8 %13, i8* %37, align 4
  %38 = getelementptr inbounds i8, i8* %2, i64 32
  %39 = bitcast i8* %38 to i64*
  store i64 %14, i64* %39, align 8
  %40 = bitcast i8* %2 to %"class.SkSL::Expression"*
  ret %"class.SkSL::Expression"* %40
}

declare void @_ZN4SkSL4Pool10FreeMemoryEPv(i8*) local_unnamed_addr #2

declare { i64, i8 } @_ZNK4SkSL4Type12coercionCostERKS0_(%"class.SkSL::Type"*, %"class.SkSL::Type"* dereferenceable(184)) local_unnamed_addr #2

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nobuiltin nofree "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { inlinehint nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { nounwind }
attributes #8 = { noreturn nounwind }
attributes #9 = { builtin nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{!3}
!3 = distinct !{!3, !4, !"_ZNK4SkSL4Type11displayNameEv: argument 0"}
!4 = distinct !{!4, !"_ZNK4SkSL4Type11displayNameEv"}
