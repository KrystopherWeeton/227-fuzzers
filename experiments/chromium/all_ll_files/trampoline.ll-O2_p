; ModuleID = '../../third_party/vulkan-deps/vulkan-loader/src/loader/trampoline.c'
source_filename = "../../third_party/vulkan-deps/vulkan-loader/src/loader/trampoline.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.loader_instance = type { %struct.loader_instance_dispatch_table*, i16, i16, i32, i32, %struct.loader_physical_device_term**, i32, %struct.loader_physical_device_tramp**, i32, %struct.VkPhysicalDeviceGroupProperties**, i32, %struct.VkPhysicalDeviceGroupProperties**, %struct.loader_instance*, i32, %struct.loader_icd_term*, %struct.loader_icd_tramp_list, [250 x %struct.loader_dispatch_hash_entry], [250 x %struct.loader_dispatch_hash_entry], %struct.loader_msg_callback_map_entry*, %struct.loader_layer_list, i8, %struct.loader_layer_list, %struct.loader_layer_list, %struct.VkInstance_T*, %struct.loader_extension_list, %union.loader_instance_extension_enables, %struct.VkLayerDbgFunctionNode_*, i32, %struct.VkDebugReportCallbackCreateInfoEXT*, %struct.VkDebugReportCallbackEXT_T**, i32, %struct.VkDebugUtilsMessengerCreateInfoEXT*, %struct.VkDebugUtilsMessengerEXT_T**, %struct.VkAllocationCallbacks, i8, i8, i8, i8, i8 }
%struct.loader_instance_dispatch_table = type { %struct.VkLayerInstanceDispatchTable_, [250 x i32 (%struct.VkPhysicalDevice_T*)*] }
%struct.VkLayerInstanceDispatchTable_ = type { void ()* (%struct.VkInstance_T*, i8*)*, i32 (%struct.VkInstanceCreateInfo*, %struct.VkAllocationCallbacks*, %struct.VkInstance_T**)*, void (%struct.VkInstance_T*, %struct.VkAllocationCallbacks*)*, i32 (%struct.VkInstance_T*, i32*, %struct.VkPhysicalDevice_T**)*, void (%struct.VkPhysicalDevice_T*, %struct.VkPhysicalDeviceFeatures*)*, void (%struct.VkPhysicalDevice_T*, i32, %struct.VkFormatProperties*)*, i32 (%struct.VkPhysicalDevice_T*, i32, i32, i32, i32, i32, %struct.VkImageFormatProperties*)*, void (%struct.VkPhysicalDevice_T*, %struct.VkPhysicalDeviceProperties*)*, void (%struct.VkPhysicalDevice_T*, i32*, %struct.VkQueueFamilyProperties*)*, void (%struct.VkPhysicalDevice_T*, %struct.VkPhysicalDeviceMemoryProperties*)*, void ()* (%struct.VkInstance_T*, i8*)*, i32 (%struct.VkPhysicalDevice_T*, %struct.VkDeviceCreateInfo*, %struct.VkAllocationCallbacks*, %struct.VkDevice_T**)*, i32 (i8*, i32*, %struct.VkExtensionProperties*)*, i32 (%struct.VkPhysicalDevice_T*, i8*, i32*, %struct.VkExtensionProperties*)*, i32 (i32*, %struct.VkLayerProperties*)*, i32 (%struct.VkPhysicalDevice_T*, i32*, %struct.VkLayerProperties*)*, void (%struct.VkPhysicalDevice_T*, i32, i32, i32, i32, i32, i32*, %struct.VkSparseImageFormatProperties*)*, i32 (i32*)*, i32 (%struct.VkInstance_T*, i32*, %struct.VkPhysicalDeviceGroupProperties*)*, void (%struct.VkPhysicalDevice_T*, %struct.VkPhysicalDeviceFeatures2*)*, void (%struct.VkPhysicalDevice_T*, %struct.VkPhysicalDeviceProperties2*)*, void (%struct.VkPhysicalDevice_T*, i32, %struct.VkFormatProperties2*)*, i32 (%struct.VkPhysicalDevice_T*, %struct.VkPhysicalDeviceImageFormatInfo2*, %struct.VkImageFormatProperties2*)*, void (%struct.VkPhysicalDevice_T*, i32*, %struct.VkQueueFamilyProperties2*)*, void (%struct.VkPhysicalDevice_T*, %struct.VkPhysicalDeviceMemoryProperties2*)*, void (%struct.VkPhysicalDevice_T*, %struct.VkPhysicalDeviceSparseImageFormatInfo2*, i32*, %struct.VkSparseImageFormatProperties2*)*, void (%struct.VkPhysicalDevice_T*, %struct.VkPhysicalDeviceExternalBufferInfo*, %struct.VkExternalBufferProperties*)*, void (%struct.VkPhysicalDevice_T*, %struct.VkPhysicalDeviceExternalFenceInfo*, %struct.VkExternalFenceProperties*)*, void (%struct.VkPhysicalDevice_T*, %struct.VkPhysicalDeviceExternalSemaphoreInfo*, %struct.VkExternalSemaphoreProperties*)*, void (%struct.VkInstance_T*, %struct.VkSurfaceKHR_T*, %struct.VkAllocationCallbacks*)*, i32 (%struct.VkPhysicalDevice_T*, i32, %struct.VkSurfaceKHR_T*, i32*)*, i32 (%struct.VkPhysicalDevice_T*, %struct.VkSurfaceKHR_T*, %struct.VkSurfaceCapabilitiesKHR*)*, i32 (%struct.VkPhysicalDevice_T*, %struct.VkSurfaceKHR_T*, i32*, %struct.VkSurfaceFormatKHR*)*, i32 (%struct.VkPhysicalDevice_T*, %struct.VkSurfaceKHR_T*, i32*, i32*)*, i32 (%struct.VkPhysicalDevice_T*, %struct.VkSurfaceKHR_T*, i32*, %struct.VkRect2D*)*, i32 (%struct.VkPhysicalDevice_T*, i32*, %struct.VkDisplayPropertiesKHR*)*, i32 (%struct.VkPhysicalDevice_T*, i32*, %struct.VkDisplayPlanePropertiesKHR*)*, i32 (%struct.VkPhysicalDevice_T*, i32, i32*, %struct.VkDisplayKHR_T**)*, i32 (%struct.VkPhysicalDevice_T*, %struct.VkDisplayKHR_T*, i32*, %struct.VkDisplayModePropertiesKHR*)*, i32 (%struct.VkPhysicalDevice_T*, %struct.VkDisplayKHR_T*, %struct.VkDisplayModeCreateInfoKHR*, %struct.VkAllocationCallbacks*, %struct.VkDisplayModeKHR_T**)*, i32 (%struct.VkPhysicalDevice_T*, %struct.VkDisplayModeKHR_T*, i32, %struct.VkDisplayPlaneCapabilitiesKHR*)*, i32 (%struct.VkInstance_T*, %struct.VkDisplaySurfaceCreateInfoKHR*, %struct.VkAllocationCallbacks*, %struct.VkSurfaceKHR_T**)*, i32 (%struct.VkInstance_T*, %struct.VkXcbSurfaceCreateInfoKHR*, %struct.VkAllocationCallbacks*, %struct.VkSurfaceKHR_T**)*, i32 (%struct.VkPhysicalDevice_T*, i32, %struct.xcb_connection_t*, i32)*, i32 (%struct.VkPhysicalDevice_T*, %struct.VkVideoProfileKHR*, %struct.VkVideoCapabilitiesKHR*)*, i32 (%struct.VkPhysicalDevice_T*, %struct.VkPhysicalDeviceVideoFormatInfoKHR*, i32*, %struct.VkVideoFormatPropertiesKHR*)*, void (%struct.VkPhysicalDevice_T*, %struct.VkPhysicalDeviceFeatures2*)*, void (%struct.VkPhysicalDevice_T*, %struct.VkPhysicalDeviceProperties2*)*, void (%struct.VkPhysicalDevice_T*, i32, %struct.VkFormatProperties2*)*, i32 (%struct.VkPhysicalDevice_T*, %struct.VkPhysicalDeviceImageFormatInfo2*, %struct.VkImageFormatProperties2*)*, void (%struct.VkPhysicalDevice_T*, i32*, %struct.VkQueueFamilyProperties2*)*, void (%struct.VkPhysicalDevice_T*, %struct.VkPhysicalDeviceMemoryProperties2*)*, void (%struct.VkPhysicalDevice_T*, %struct.VkPhysicalDeviceSparseImageFormatInfo2*, i32*, %struct.VkSparseImageFormatProperties2*)*, i32 (%struct.VkInstance_T*, i32*, %struct.VkPhysicalDeviceGroupProperties*)*, void (%struct.VkPhysicalDevice_T*, %struct.VkPhysicalDeviceExternalBufferInfo*, %struct.VkExternalBufferProperties*)*, void (%struct.VkPhysicalDevice_T*, %struct.VkPhysicalDeviceExternalSemaphoreInfo*, %struct.VkExternalSemaphoreProperties*)*, void (%struct.VkPhysicalDevice_T*, %struct.VkPhysicalDeviceExternalFenceInfo*, %struct.VkExternalFenceProperties*)*, i32 (%struct.VkPhysicalDevice_T*, i32, i32*, %struct.VkPerformanceCounterKHR*, %struct.VkPerformanceCounterDescriptionKHR*)*, void (%struct.VkPhysicalDevice_T*, %struct.VkQueryPoolPerformanceCreateInfoKHR*, i32*)*, i32 (%struct.VkPhysicalDevice_T*, %struct.VkPhysicalDeviceSurfaceInfo2KHR*, %struct.VkSurfaceCapabilities2KHR*)*, i32 (%struct.VkPhysicalDevice_T*, %struct.VkPhysicalDeviceSurfaceInfo2KHR*, i32*, %struct.VkSurfaceFormat2KHR*)*, i32 (%struct.VkPhysicalDevice_T*, i32*, %struct.VkDisplayProperties2KHR*)*, i32 (%struct.VkPhysicalDevice_T*, i32*, %struct.VkDisplayPlaneProperties2KHR*)*, i32 (%struct.VkPhysicalDevice_T*, %struct.VkDisplayKHR_T*, i32*, %struct.VkDisplayModeProperties2KHR*)*, i32 (%struct.VkPhysicalDevice_T*, %struct.VkDisplayPlaneInfo2KHR*, %struct.VkDisplayPlaneCapabilities2KHR*)*, i32 (%struct.VkPhysicalDevice_T*, i32*, %struct.VkPhysicalDeviceFragmentShadingRateKHR*)*, i32 (%struct.VkInstance_T*, %struct.VkDebugReportCallbackCreateInfoEXT*, %struct.VkAllocationCallbacks*, %struct.VkDebugReportCallbackEXT_T**)*, void (%struct.VkInstance_T*, %struct.VkDebugReportCallbackEXT_T*, %struct.VkAllocationCallbacks*)*, void (%struct.VkInstance_T*, i32, i32, i64, i64, i32, i8*, i8*)*, i32 (%struct.VkPhysicalDevice_T*, i32, i32, i32, i32, i32, i32, %struct.VkExternalImageFormatPropertiesNV*)*, i32 (%struct.VkPhysicalDevice_T*, %struct.VkDisplayKHR_T*)*, i32 (%struct.VkPhysicalDevice_T*, %struct.VkSurfaceKHR_T*, %struct.VkSurfaceCapabilities2EXT*)*, i32 (%struct.VkInstance_T*, %struct.VkDebugUtilsMessengerCreateInfoEXT*, %struct.VkAllocationCallbacks*, %struct.VkDebugUtilsMessengerEXT_T**)*, void (%struct.VkInstance_T*, %struct.VkDebugUtilsMessengerEXT_T*, %struct.VkAllocationCallbacks*)*, void (%struct.VkInstance_T*, i32, i32, %struct.VkDebugUtilsMessengerCallbackDataEXT*)*, void (%struct.VkPhysicalDevice_T*, i32, %struct.VkMultisamplePropertiesEXT*)*, i32 (%struct.VkPhysicalDevice_T*, i32*, i32*)*, i32 (%struct.VkPhysicalDevice_T*, i32*, %struct.VkPhysicalDeviceToolPropertiesEXT*)*, i32 (%struct.VkPhysicalDevice_T*, i32*, %struct.VkCooperativeMatrixPropertiesNV*)*, i32 (%struct.VkPhysicalDevice_T*, i32*, %struct.VkFramebufferMixedSamplesCombinationNV*)*, i32 (%struct.VkInstance_T*, %struct.VkHeadlessSurfaceCreateInfoEXT*, %struct.VkAllocationCallbacks*, %struct.VkSurfaceKHR_T**)* }
%struct.VkInstanceCreateInfo = type { i32, i8*, i32, %struct.VkApplicationInfo*, i32, i8**, i32, i8** }
%struct.VkApplicationInfo = type { i32, i8*, i8*, i32, i8*, i32, i32 }
%struct.VkPhysicalDevice_T = type opaque
%struct.VkPhysicalDeviceFeatures = type { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }
%struct.VkFormatProperties = type { i32, i32, i32 }
%struct.VkImageFormatProperties = type { %struct.VkExtent3D, i32, i32, i32, i64 }
%struct.VkExtent3D = type { i32, i32, i32 }
%struct.VkPhysicalDeviceProperties = type { i32, i32, i32, i32, i32, [256 x i8], [16 x i8], %struct.VkPhysicalDeviceLimits, %struct.VkPhysicalDeviceSparseProperties }
%struct.VkPhysicalDeviceLimits = type { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i64, i64, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, [3 x i32], i32, [3 x i32], i32, i32, i32, i32, i32, float, float, i32, [2 x i32], [2 x float], i32, i64, i64, i64, i64, i32, i32, i32, i32, float, float, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, float, i32, i32, i32, i32, [2 x float], [2 x float], float, float, i32, i32, i64, i64, i64 }
%struct.VkPhysicalDeviceSparseProperties = type { i32, i32, i32, i32, i32 }
%struct.VkQueueFamilyProperties = type { i32, i32, i32, %struct.VkExtent3D }
%struct.VkPhysicalDeviceMemoryProperties = type { i32, [32 x %struct.VkMemoryType], i32, [16 x %struct.VkMemoryHeap] }
%struct.VkMemoryType = type { i32, i32 }
%struct.VkMemoryHeap = type { i64, i32 }
%struct.VkDeviceCreateInfo = type { i32, i8*, i32, i32, %struct.VkDeviceQueueCreateInfo*, i32, i8**, i32, i8**, %struct.VkPhysicalDeviceFeatures* }
%struct.VkDeviceQueueCreateInfo = type { i32, i8*, i32, i32, i32, float* }
%struct.VkDevice_T = type opaque
%struct.VkExtensionProperties = type { [256 x i8], i32 }
%struct.VkLayerProperties = type { [256 x i8], i32, i32, [256 x i8] }
%struct.VkSparseImageFormatProperties = type { i32, %struct.VkExtent3D, i32 }
%struct.VkSurfaceKHR_T = type opaque
%struct.VkSurfaceCapabilitiesKHR = type { i32, i32, %struct.VkExtent2D, %struct.VkExtent2D, %struct.VkExtent2D, i32, i32, i32, i32, i32 }
%struct.VkExtent2D = type { i32, i32 }
%struct.VkSurfaceFormatKHR = type { i32, i32 }
%struct.VkRect2D = type { %struct.VkOffset2D, %struct.VkExtent2D }
%struct.VkOffset2D = type { i32, i32 }
%struct.VkDisplayPropertiesKHR = type { %struct.VkDisplayKHR_T*, i8*, %struct.VkExtent2D, %struct.VkExtent2D, i32, i32, i32 }
%struct.VkDisplayKHR_T = type opaque
%struct.VkDisplayPlanePropertiesKHR = type { %struct.VkDisplayKHR_T*, i32 }
%struct.VkDisplayModePropertiesKHR = type { %struct.VkDisplayModeKHR_T*, %struct.VkDisplayModeParametersKHR }
%struct.VkDisplayModeKHR_T = type opaque
%struct.VkDisplayModeParametersKHR = type { %struct.VkExtent2D, i32 }
%struct.VkDisplayModeCreateInfoKHR = type { i32, i8*, i32, %struct.VkDisplayModeParametersKHR }
%struct.VkDisplayPlaneCapabilitiesKHR = type { i32, %struct.VkOffset2D, %struct.VkOffset2D, %struct.VkExtent2D, %struct.VkExtent2D, %struct.VkOffset2D, %struct.VkOffset2D, %struct.VkExtent2D, %struct.VkExtent2D }
%struct.VkDisplaySurfaceCreateInfoKHR = type { i32, i8*, i32, %struct.VkDisplayModeKHR_T*, i32, i32, i32, float, i32, %struct.VkExtent2D }
%struct.VkXcbSurfaceCreateInfoKHR = type { i32, i8*, i32, %struct.xcb_connection_t*, i32 }
%struct.xcb_connection_t = type opaque
%struct.VkVideoProfileKHR = type { i32, i8*, i32, i32, i32, i32 }
%struct.VkVideoCapabilitiesKHR = type { i32, i8*, i32, i64, i64, %struct.VkExtent2D, %struct.VkExtent2D, %struct.VkExtent2D, i32, i32 }
%struct.VkPhysicalDeviceVideoFormatInfoKHR = type { i32, i8*, i32, %struct.VkVideoProfilesKHR* }
%struct.VkVideoProfilesKHR = type { i32, i8*, i32, %struct.VkVideoProfileKHR* }
%struct.VkVideoFormatPropertiesKHR = type { i32, i8*, i32 }
%struct.VkPhysicalDeviceFeatures2 = type { i32, i8*, %struct.VkPhysicalDeviceFeatures }
%struct.VkPhysicalDeviceProperties2 = type { i32, i8*, %struct.VkPhysicalDeviceProperties }
%struct.VkFormatProperties2 = type { i32, i8*, %struct.VkFormatProperties }
%struct.VkPhysicalDeviceImageFormatInfo2 = type { i32, i8*, i32, i32, i32, i32, i32 }
%struct.VkImageFormatProperties2 = type { i32, i8*, %struct.VkImageFormatProperties }
%struct.VkQueueFamilyProperties2 = type { i32, i8*, %struct.VkQueueFamilyProperties }
%struct.VkPhysicalDeviceMemoryProperties2 = type { i32, i8*, %struct.VkPhysicalDeviceMemoryProperties }
%struct.VkPhysicalDeviceSparseImageFormatInfo2 = type { i32, i8*, i32, i32, i32, i32, i32 }
%struct.VkSparseImageFormatProperties2 = type { i32, i8*, %struct.VkSparseImageFormatProperties }
%struct.VkPhysicalDeviceGroupProperties = type { i32, i8*, i32, [32 x %struct.VkPhysicalDevice_T*], i32 }
%struct.VkPhysicalDeviceExternalBufferInfo = type { i32, i8*, i32, i32, i32 }
%struct.VkExternalBufferProperties = type { i32, i8*, %struct.VkExternalMemoryProperties }
%struct.VkExternalMemoryProperties = type { i32, i32, i32 }
%struct.VkPhysicalDeviceExternalSemaphoreInfo = type { i32, i8*, i32 }
%struct.VkExternalSemaphoreProperties = type { i32, i8*, i32, i32, i32 }
%struct.VkPhysicalDeviceExternalFenceInfo = type { i32, i8*, i32 }
%struct.VkExternalFenceProperties = type { i32, i8*, i32, i32, i32 }
%struct.VkPerformanceCounterKHR = type { i32, i8*, i32, i32, i32, [16 x i8] }
%struct.VkPerformanceCounterDescriptionKHR = type { i32, i8*, i32, [256 x i8], [256 x i8], [256 x i8] }
%struct.VkQueryPoolPerformanceCreateInfoKHR = type { i32, i8*, i32, i32, i32* }
%struct.VkPhysicalDeviceSurfaceInfo2KHR = type { i32, i8*, %struct.VkSurfaceKHR_T* }
%struct.VkSurfaceCapabilities2KHR = type { i32, i8*, %struct.VkSurfaceCapabilitiesKHR }
%struct.VkSurfaceFormat2KHR = type { i32, i8*, %struct.VkSurfaceFormatKHR }
%struct.VkDisplayProperties2KHR = type { i32, i8*, %struct.VkDisplayPropertiesKHR }
%struct.VkDisplayPlaneProperties2KHR = type { i32, i8*, %struct.VkDisplayPlanePropertiesKHR }
%struct.VkDisplayModeProperties2KHR = type { i32, i8*, %struct.VkDisplayModePropertiesKHR }
%struct.VkDisplayPlaneInfo2KHR = type { i32, i8*, %struct.VkDisplayModeKHR_T*, i32 }
%struct.VkDisplayPlaneCapabilities2KHR = type { i32, i8*, %struct.VkDisplayPlaneCapabilitiesKHR }
%struct.VkPhysicalDeviceFragmentShadingRateKHR = type { i32, i8*, i32, %struct.VkExtent2D }
%struct.VkDebugReportCallbackEXT_T = type opaque
%struct.VkExternalImageFormatPropertiesNV = type { %struct.VkImageFormatProperties, i32, i32, i32 }
%struct.VkSurfaceCapabilities2EXT = type { i32, i8*, i32, i32, %struct.VkExtent2D, %struct.VkExtent2D, %struct.VkExtent2D, i32, i32, i32, i32, i32, i32 }
%struct.VkDebugUtilsMessengerEXT_T = type opaque
%struct.VkDebugUtilsMessengerCallbackDataEXT = type { i32, i8*, i32, i8*, i32, i8*, i32, %struct.VkDebugUtilsLabelEXT*, i32, %struct.VkDebugUtilsLabelEXT*, i32, %struct.VkDebugUtilsObjectNameInfoEXT* }
%struct.VkDebugUtilsLabelEXT = type { i32, i8*, i8*, [4 x float] }
%struct.VkDebugUtilsObjectNameInfoEXT = type { i32, i8*, i32, i64, i8* }
%struct.VkMultisamplePropertiesEXT = type { i32, i8*, %struct.VkExtent2D }
%struct.VkPhysicalDeviceToolPropertiesEXT = type { i32, i8*, [256 x i8], [256 x i8], i32, [256 x i8], [256 x i8] }
%struct.VkCooperativeMatrixPropertiesNV = type { i32, i8*, i32, i32, i32, i32, i32, i32, i32, i32 }
%struct.VkFramebufferMixedSamplesCombinationNV = type { i32, i8*, i32, i32, i32, i32 }
%struct.VkHeadlessSurfaceCreateInfoEXT = type { i32, i8*, i32 }
%struct.loader_physical_device_term = type { %struct.loader_instance_dispatch_table*, %struct.loader_icd_term*, i8, %struct.VkPhysicalDevice_T* }
%struct.loader_physical_device_tramp = type { %struct.loader_instance_dispatch_table*, %struct.loader_instance*, %struct.VkPhysicalDevice_T* }
%struct.loader_icd_term = type { %struct.loader_scanned_icd*, %struct.loader_instance*, %struct.loader_device*, %struct.VkInstance_T*, %struct.loader_icd_term_dispatch, %struct.loader_icd_term*, [250 x i32 (%struct.VkPhysicalDevice_T*)*] }
%struct.loader_scanned_icd = type { i8*, i8*, i32, i32, void ()* (%struct.VkInstance_T*, i8*)*, void ()* (%struct.VkInstance_T*, i8*)*, i32 (%struct.VkInstanceCreateInfo*, %struct.VkAllocationCallbacks*, %struct.VkInstance_T**)*, i32 (i8*, i32*, %struct.VkExtensionProperties*)* }
%struct.loader_device = type { %struct.loader_dev_dispatch_table, %struct.VkDevice_T*, %struct.VkDevice_T*, %struct.loader_physical_device_term*, %struct.loader_layer_list, %struct.loader_layer_list, %struct.VkAllocationCallbacks, %struct.anon.0, %struct.loader_device* }
%struct.loader_dev_dispatch_table = type { %struct.VkLayerDispatchTable_, %struct.loader_dev_ext_dispatch_table }
%struct.VkLayerDispatchTable_ = type { void ()* (%struct.VkDevice_T*, i8*)*, void (%struct.VkDevice_T*, %struct.VkAllocationCallbacks*)*, void (%struct.VkDevice_T*, i32, i32, %struct.VkQueue_T**)*, i32 (%struct.VkQueue_T*, i32, %struct.VkSubmitInfo*, %struct.VkFence_T*)*, i32 (%struct.VkQueue_T*)*, i32 (%struct.VkDevice_T*)*, i32 (%struct.VkDevice_T*, %struct.VkMemoryAllocateInfo*, %struct.VkAllocationCallbacks*, %struct.VkDeviceMemory_T**)*, void (%struct.VkDevice_T*, %struct.VkDeviceMemory_T*, %struct.VkAllocationCallbacks*)*, i32 (%struct.VkDevice_T*, %struct.VkDeviceMemory_T*, i64, i64, i32, i8**)*, void (%struct.VkDevice_T*, %struct.VkDeviceMemory_T*)*, i32 (%struct.VkDevice_T*, i32, %struct.VkMappedMemoryRange*)*, i32 (%struct.VkDevice_T*, i32, %struct.VkMappedMemoryRange*)*, void (%struct.VkDevice_T*, %struct.VkDeviceMemory_T*, i64*)*, i32 (%struct.VkDevice_T*, %struct.VkBuffer_T*, %struct.VkDeviceMemory_T*, i64)*, i32 (%struct.VkDevice_T*, %struct.VkImage_T*, %struct.VkDeviceMemory_T*, i64)*, void (%struct.VkDevice_T*, %struct.VkBuffer_T*, %struct.VkMemoryRequirements*)*, void (%struct.VkDevice_T*, %struct.VkImage_T*, %struct.VkMemoryRequirements*)*, void (%struct.VkDevice_T*, %struct.VkImage_T*, i32*, %struct.VkSparseImageMemoryRequirements*)*, i32 (%struct.VkQueue_T*, i32, %struct.VkBindSparseInfo*, %struct.VkFence_T*)*, i32 (%struct.VkDevice_T*, %struct.VkFenceCreateInfo*, %struct.VkAllocationCallbacks*, %struct.VkFence_T**)*, void (%struct.VkDevice_T*, %struct.VkFence_T*, %struct.VkAllocationCallbacks*)*, i32 (%struct.VkDevice_T*, i32, %struct.VkFence_T**)*, i32 (%struct.VkDevice_T*, %struct.VkFence_T*)*, i32 (%struct.VkDevice_T*, i32, %struct.VkFence_T**, i32, i64)*, i32 (%struct.VkDevice_T*, %struct.VkSemaphoreCreateInfo*, %struct.VkAllocationCallbacks*, %struct.VkSemaphore_T**)*, void (%struct.VkDevice_T*, %struct.VkSemaphore_T*, %struct.VkAllocationCallbacks*)*, i32 (%struct.VkDevice_T*, %struct.VkEventCreateInfo*, %struct.VkAllocationCallbacks*, %struct.VkEvent_T**)*, void (%struct.VkDevice_T*, %struct.VkEvent_T*, %struct.VkAllocationCallbacks*)*, i32 (%struct.VkDevice_T*, %struct.VkEvent_T*)*, i32 (%struct.VkDevice_T*, %struct.VkEvent_T*)*, i32 (%struct.VkDevice_T*, %struct.VkEvent_T*)*, i32 (%struct.VkDevice_T*, %struct.VkQueryPoolCreateInfo*, %struct.VkAllocationCallbacks*, %struct.VkQueryPool_T**)*, void (%struct.VkDevice_T*, %struct.VkQueryPool_T*, %struct.VkAllocationCallbacks*)*, i32 (%struct.VkDevice_T*, %struct.VkQueryPool_T*, i32, i32, i64, i8*, i64, i32)*, i32 (%struct.VkDevice_T*, %struct.VkBufferCreateInfo*, %struct.VkAllocationCallbacks*, %struct.VkBuffer_T**)*, void (%struct.VkDevice_T*, %struct.VkBuffer_T*, %struct.VkAllocationCallbacks*)*, i32 (%struct.VkDevice_T*, %struct.VkBufferViewCreateInfo*, %struct.VkAllocationCallbacks*, %struct.VkBufferView_T**)*, void (%struct.VkDevice_T*, %struct.VkBufferView_T*, %struct.VkAllocationCallbacks*)*, i32 (%struct.VkDevice_T*, %struct.VkImageCreateInfo*, %struct.VkAllocationCallbacks*, %struct.VkImage_T**)*, void (%struct.VkDevice_T*, %struct.VkImage_T*, %struct.VkAllocationCallbacks*)*, void (%struct.VkDevice_T*, %struct.VkImage_T*, %struct.VkImageSubresource*, %struct.VkSubresourceLayout*)*, i32 (%struct.VkDevice_T*, %struct.VkImageViewCreateInfo*, %struct.VkAllocationCallbacks*, %struct.VkImageView_T**)*, void (%struct.VkDevice_T*, %struct.VkImageView_T*, %struct.VkAllocationCallbacks*)*, i32 (%struct.VkDevice_T*, %struct.VkShaderModuleCreateInfo*, %struct.VkAllocationCallbacks*, %struct.VkShaderModule_T**)*, void (%struct.VkDevice_T*, %struct.VkShaderModule_T*, %struct.VkAllocationCallbacks*)*, i32 (%struct.VkDevice_T*, %struct.VkPipelineCacheCreateInfo*, %struct.VkAllocationCallbacks*, %struct.VkPipelineCache_T**)*, void (%struct.VkDevice_T*, %struct.VkPipelineCache_T*, %struct.VkAllocationCallbacks*)*, i32 (%struct.VkDevice_T*, %struct.VkPipelineCache_T*, i64*, i8*)*, i32 (%struct.VkDevice_T*, %struct.VkPipelineCache_T*, i32, %struct.VkPipelineCache_T**)*, i32 (%struct.VkDevice_T*, %struct.VkPipelineCache_T*, i32, %struct.VkGraphicsPipelineCreateInfo*, %struct.VkAllocationCallbacks*, %struct.VkPipeline_T**)*, i32 (%struct.VkDevice_T*, %struct.VkPipelineCache_T*, i32, %struct.VkComputePipelineCreateInfo*, %struct.VkAllocationCallbacks*, %struct.VkPipeline_T**)*, void (%struct.VkDevice_T*, %struct.VkPipeline_T*, %struct.VkAllocationCallbacks*)*, i32 (%struct.VkDevice_T*, %struct.VkPipelineLayoutCreateInfo*, %struct.VkAllocationCallbacks*, %struct.VkPipelineLayout_T**)*, void (%struct.VkDevice_T*, %struct.VkPipelineLayout_T*, %struct.VkAllocationCallbacks*)*, i32 (%struct.VkDevice_T*, %struct.VkSamplerCreateInfo*, %struct.VkAllocationCallbacks*, %struct.VkSampler_T**)*, void (%struct.VkDevice_T*, %struct.VkSampler_T*, %struct.VkAllocationCallbacks*)*, i32 (%struct.VkDevice_T*, %struct.VkDescriptorSetLayoutCreateInfo*, %struct.VkAllocationCallbacks*, %struct.VkDescriptorSetLayout_T**)*, void (%struct.VkDevice_T*, %struct.VkDescriptorSetLayout_T*, %struct.VkAllocationCallbacks*)*, i32 (%struct.VkDevice_T*, %struct.VkDescriptorPoolCreateInfo*, %struct.VkAllocationCallbacks*, %struct.VkDescriptorPool_T**)*, void (%struct.VkDevice_T*, %struct.VkDescriptorPool_T*, %struct.VkAllocationCallbacks*)*, i32 (%struct.VkDevice_T*, %struct.VkDescriptorPool_T*, i32)*, i32 (%struct.VkDevice_T*, %struct.VkDescriptorSetAllocateInfo*, %struct.VkDescriptorSet_T**)*, i32 (%struct.VkDevice_T*, %struct.VkDescriptorPool_T*, i32, %struct.VkDescriptorSet_T**)*, void (%struct.VkDevice_T*, i32, %struct.VkWriteDescriptorSet*, i32, %struct.VkCopyDescriptorSet*)*, i32 (%struct.VkDevice_T*, %struct.VkFramebufferCreateInfo*, %struct.VkAllocationCallbacks*, %struct.VkFramebuffer_T**)*, void (%struct.VkDevice_T*, %struct.VkFramebuffer_T*, %struct.VkAllocationCallbacks*)*, i32 (%struct.VkDevice_T*, %struct.VkRenderPassCreateInfo*, %struct.VkAllocationCallbacks*, %struct.VkRenderPass_T**)*, void (%struct.VkDevice_T*, %struct.VkRenderPass_T*, %struct.VkAllocationCallbacks*)*, void (%struct.VkDevice_T*, %struct.VkRenderPass_T*, %struct.VkExtent2D*)*, i32 (%struct.VkDevice_T*, %struct.VkCommandPoolCreateInfo*, %struct.VkAllocationCallbacks*, %struct.VkCommandPool_T**)*, void (%struct.VkDevice_T*, %struct.VkCommandPool_T*, %struct.VkAllocationCallbacks*)*, i32 (%struct.VkDevice_T*, %struct.VkCommandPool_T*, i32)*, i32 (%struct.VkDevice_T*, %struct.VkCommandBufferAllocateInfo*, %struct.VkCommandBuffer_T**)*, void (%struct.VkDevice_T*, %struct.VkCommandPool_T*, i32, %struct.VkCommandBuffer_T**)*, i32 (%struct.VkCommandBuffer_T*, %struct.VkCommandBufferBeginInfo*)*, i32 (%struct.VkCommandBuffer_T*)*, i32 (%struct.VkCommandBuffer_T*, i32)*, void (%struct.VkCommandBuffer_T*, i32, %struct.VkPipeline_T*)*, void (%struct.VkCommandBuffer_T*, i32, i32, %struct.VkViewport*)*, void (%struct.VkCommandBuffer_T*, i32, i32, %struct.VkRect2D*)*, void (%struct.VkCommandBuffer_T*, float)*, void (%struct.VkCommandBuffer_T*, float, float, float)*, void (%struct.VkCommandBuffer_T*, float*)*, void (%struct.VkCommandBuffer_T*, float, float)*, void (%struct.VkCommandBuffer_T*, i32, i32)*, void (%struct.VkCommandBuffer_T*, i32, i32)*, void (%struct.VkCommandBuffer_T*, i32, i32)*, void (%struct.VkCommandBuffer_T*, i32, %struct.VkPipelineLayout_T*, i32, i32, %struct.VkDescriptorSet_T**, i32, i32*)*, void (%struct.VkCommandBuffer_T*, %struct.VkBuffer_T*, i64, i32)*, void (%struct.VkCommandBuffer_T*, i32, i32, %struct.VkBuffer_T**, i64*)*, void (%struct.VkCommandBuffer_T*, i32, i32, i32, i32)*, void (%struct.VkCommandBuffer_T*, i32, i32, i32, i32, i32)*, void (%struct.VkCommandBuffer_T*, %struct.VkBuffer_T*, i64, i32, i32)*, void (%struct.VkCommandBuffer_T*, %struct.VkBuffer_T*, i64, i32, i32)*, void (%struct.VkCommandBuffer_T*, i32, i32, i32)*, void (%struct.VkCommandBuffer_T*, %struct.VkBuffer_T*, i64)*, void (%struct.VkCommandBuffer_T*, %struct.VkBuffer_T*, %struct.VkBuffer_T*, i32, %struct.VkBufferCopy*)*, void (%struct.VkCommandBuffer_T*, %struct.VkImage_T*, i32, %struct.VkImage_T*, i32, i32, %struct.VkImageCopy*)*, void (%struct.VkCommandBuffer_T*, %struct.VkImage_T*, i32, %struct.VkImage_T*, i32, i32, %struct.VkImageBlit*, i32)*, void (%struct.VkCommandBuffer_T*, %struct.VkBuffer_T*, %struct.VkImage_T*, i32, i32, %struct.VkBufferImageCopy*)*, void (%struct.VkCommandBuffer_T*, %struct.VkImage_T*, i32, %struct.VkBuffer_T*, i32, %struct.VkBufferImageCopy*)*, void (%struct.VkCommandBuffer_T*, %struct.VkBuffer_T*, i64, i64, i8*)*, void (%struct.VkCommandBuffer_T*, %struct.VkBuffer_T*, i64, i64, i32)*, void (%struct.VkCommandBuffer_T*, %struct.VkImage_T*, i32, %union.VkClearColorValue*, i32, %struct.VkImageSubresourceRange*)*, void (%struct.VkCommandBuffer_T*, %struct.VkImage_T*, i32, %struct.VkClearDepthStencilValue*, i32, %struct.VkImageSubresourceRange*)*, void (%struct.VkCommandBuffer_T*, i32, %struct.VkClearAttachment*, i32, %struct.VkClearRect*)*, void (%struct.VkCommandBuffer_T*, %struct.VkImage_T*, i32, %struct.VkImage_T*, i32, i32, %struct.VkImageResolve*)*, void (%struct.VkCommandBuffer_T*, %struct.VkEvent_T*, i32)*, void (%struct.VkCommandBuffer_T*, %struct.VkEvent_T*, i32)*, void (%struct.VkCommandBuffer_T*, i32, %struct.VkEvent_T**, i32, i32, i32, %struct.VkMemoryBarrier*, i32, %struct.VkBufferMemoryBarrier*, i32, %struct.VkImageMemoryBarrier*)*, void (%struct.VkCommandBuffer_T*, i32, i32, i32, i32, %struct.VkMemoryBarrier*, i32, %struct.VkBufferMemoryBarrier*, i32, %struct.VkImageMemoryBarrier*)*, void (%struct.VkCommandBuffer_T*, %struct.VkQueryPool_T*, i32, i32)*, void (%struct.VkCommandBuffer_T*, %struct.VkQueryPool_T*, i32)*, void (%struct.VkCommandBuffer_T*, %struct.VkQueryPool_T*, i32, i32)*, void (%struct.VkCommandBuffer_T*, i32, %struct.VkQueryPool_T*, i32)*, void (%struct.VkCommandBuffer_T*, %struct.VkQueryPool_T*, i32, i32, %struct.VkBuffer_T*, i64, i64, i32)*, void (%struct.VkCommandBuffer_T*, %struct.VkPipelineLayout_T*, i32, i32, i32, i8*)*, void (%struct.VkCommandBuffer_T*, %struct.VkRenderPassBeginInfo*, i32)*, void (%struct.VkCommandBuffer_T*, i32)*, void (%struct.VkCommandBuffer_T*)*, void (%struct.VkCommandBuffer_T*, i32, %struct.VkCommandBuffer_T**)*, i32 (%struct.VkDevice_T*, i32, %struct.VkBindBufferMemoryInfo*)*, i32 (%struct.VkDevice_T*, i32, %struct.VkBindImageMemoryInfo*)*, void (%struct.VkDevice_T*, i32, i32, i32, i32*)*, void (%struct.VkCommandBuffer_T*, i32)*, void (%struct.VkCommandBuffer_T*, i32, i32, i32, i32, i32, i32)*, void (%struct.VkDevice_T*, %struct.VkImageMemoryRequirementsInfo2*, %struct.VkMemoryRequirements2*)*, void (%struct.VkDevice_T*, %struct.VkBufferMemoryRequirementsInfo2*, %struct.VkMemoryRequirements2*)*, void (%struct.VkDevice_T*, %struct.VkImageSparseMemoryRequirementsInfo2*, i32*, %struct.VkSparseImageMemoryRequirements2*)*, void (%struct.VkDevice_T*, %struct.VkCommandPool_T*, i32)*, void (%struct.VkDevice_T*, %struct.VkDeviceQueueInfo2*, %struct.VkQueue_T**)*, i32 (%struct.VkDevice_T*, %struct.VkSamplerYcbcrConversionCreateInfo*, %struct.VkAllocationCallbacks*, %struct.VkSamplerYcbcrConversion_T**)*, void (%struct.VkDevice_T*, %struct.VkSamplerYcbcrConversion_T*, %struct.VkAllocationCallbacks*)*, i32 (%struct.VkDevice_T*, %struct.VkDescriptorUpdateTemplateCreateInfo*, %struct.VkAllocationCallbacks*, %struct.VkDescriptorUpdateTemplate_T**)*, void (%struct.VkDevice_T*, %struct.VkDescriptorUpdateTemplate_T*, %struct.VkAllocationCallbacks*)*, void (%struct.VkDevice_T*, %struct.VkDescriptorSet_T*, %struct.VkDescriptorUpdateTemplate_T*, i8*)*, void (%struct.VkDevice_T*, %struct.VkDescriptorSetLayoutCreateInfo*, %struct.VkDescriptorSetLayoutSupport*)*, void (%struct.VkCommandBuffer_T*, %struct.VkBuffer_T*, i64, %struct.VkBuffer_T*, i64, i32, i32)*, void (%struct.VkCommandBuffer_T*, %struct.VkBuffer_T*, i64, %struct.VkBuffer_T*, i64, i32, i32)*, i32 (%struct.VkDevice_T*, %struct.VkRenderPassCreateInfo2*, %struct.VkAllocationCallbacks*, %struct.VkRenderPass_T**)*, void (%struct.VkCommandBuffer_T*, %struct.VkRenderPassBeginInfo*, %struct.VkSubpassBeginInfo*)*, void (%struct.VkCommandBuffer_T*, %struct.VkSubpassBeginInfo*, %struct.VkSubpassEndInfo*)*, void (%struct.VkCommandBuffer_T*, %struct.VkSubpassEndInfo*)*, void (%struct.VkDevice_T*, %struct.VkQueryPool_T*, i32, i32)*, i32 (%struct.VkDevice_T*, %struct.VkSemaphore_T*, i64*)*, i32 (%struct.VkDevice_T*, %struct.VkSemaphoreWaitInfo*, i64)*, i32 (%struct.VkDevice_T*, %struct.VkSemaphoreSignalInfo*)*, i64 (%struct.VkDevice_T*, %struct.VkBufferDeviceAddressInfo*)*, i64 (%struct.VkDevice_T*, %struct.VkBufferDeviceAddressInfo*)*, i64 (%struct.VkDevice_T*, %struct.VkDeviceMemoryOpaqueCaptureAddressInfo*)*, i32 (%struct.VkDevice_T*, %struct.VkSwapchainCreateInfoKHR*, %struct.VkAllocationCallbacks*, %struct.VkSwapchainKHR_T**)*, void (%struct.VkDevice_T*, %struct.VkSwapchainKHR_T*, %struct.VkAllocationCallbacks*)*, i32 (%struct.VkDevice_T*, %struct.VkSwapchainKHR_T*, i32*, %struct.VkImage_T**)*, i32 (%struct.VkDevice_T*, %struct.VkSwapchainKHR_T*, i64, %struct.VkSemaphore_T*, %struct.VkFence_T*, i32*)*, i32 (%struct.VkQueue_T*, %struct.VkPresentInfoKHR*)*, i32 (%struct.VkDevice_T*, %struct.VkDeviceGroupPresentCapabilitiesKHR*)*, i32 (%struct.VkDevice_T*, %struct.VkSurfaceKHR_T*, i32*)*, i32 (%struct.VkDevice_T*, %struct.VkAcquireNextImageInfoKHR*, i32*)*, i32 (%struct.VkDevice_T*, i32, %struct.VkSwapchainCreateInfoKHR*, %struct.VkAllocationCallbacks*, %struct.VkSwapchainKHR_T**)*, i32 (%struct.VkDevice_T*, %struct.VkVideoSessionCreateInfoKHR*, %struct.VkAllocationCallbacks*, %struct.VkVideoSessionKHR_T**)*, void (%struct.VkDevice_T*, %struct.VkVideoSessionKHR_T*, %struct.VkAllocationCallbacks*)*, i32 (%struct.VkDevice_T*, %struct.VkVideoSessionKHR_T*, i32*, %struct.VkVideoGetMemoryPropertiesKHR*)*, i32 (%struct.VkDevice_T*, %struct.VkVideoSessionKHR_T*, i32, %struct.VkVideoBindMemoryKHR*)*, i32 (%struct.VkDevice_T*, %struct.VkVideoSessionParametersCreateInfoKHR*, %struct.VkAllocationCallbacks*, %struct.VkVideoSessionParametersKHR_T**)*, i32 (%struct.VkDevice_T*, %struct.VkVideoSessionParametersKHR_T*, %struct.VkVideoSessionParametersUpdateInfoKHR*)*, void (%struct.VkDevice_T*, %struct.VkVideoSessionParametersKHR_T*, %struct.VkAllocationCallbacks*)*, void (%struct.VkCommandBuffer_T*, %struct.VkVideoBeginCodingInfoKHR*)*, void (%struct.VkCommandBuffer_T*, %struct.VkVideoEndCodingInfoKHR*)*, void (%struct.VkCommandBuffer_T*, %struct.VkVideoCodingControlInfoKHR*)*, void (%struct.VkCommandBuffer_T*, %struct.VkVideoDecodeInfoKHR*)*, void (%struct.VkDevice_T*, i32, i32, i32, i32*)*, void (%struct.VkCommandBuffer_T*, i32)*, void (%struct.VkCommandBuffer_T*, i32, i32, i32, i32, i32, i32)*, void (%struct.VkDevice_T*, %struct.VkCommandPool_T*, i32)*, i32 (%struct.VkDevice_T*, %struct.VkMemoryGetFdInfoKHR*, i32*)*, i32 (%struct.VkDevice_T*, i32, i32, %struct.VkMemoryFdPropertiesKHR*)*, i32 (%struct.VkDevice_T*, %struct.VkImportSemaphoreFdInfoKHR*)*, i32 (%struct.VkDevice_T*, %struct.VkSemaphoreGetFdInfoKHR*, i32*)*, void (%struct.VkCommandBuffer_T*, i32, %struct.VkPipelineLayout_T*, i32, i32, %struct.VkWriteDescriptorSet*)*, void (%struct.VkCommandBuffer_T*, %struct.VkDescriptorUpdateTemplate_T*, %struct.VkPipelineLayout_T*, i32, i8*)*, i32 (%struct.VkDevice_T*, %struct.VkDescriptorUpdateTemplateCreateInfo*, %struct.VkAllocationCallbacks*, %struct.VkDescriptorUpdateTemplate_T**)*, void (%struct.VkDevice_T*, %struct.VkDescriptorUpdateTemplate_T*, %struct.VkAllocationCallbacks*)*, void (%struct.VkDevice_T*, %struct.VkDescriptorSet_T*, %struct.VkDescriptorUpdateTemplate_T*, i8*)*, i32 (%struct.VkDevice_T*, %struct.VkRenderPassCreateInfo2*, %struct.VkAllocationCallbacks*, %struct.VkRenderPass_T**)*, void (%struct.VkCommandBuffer_T*, %struct.VkRenderPassBeginInfo*, %struct.VkSubpassBeginInfo*)*, void (%struct.VkCommandBuffer_T*, %struct.VkSubpassBeginInfo*, %struct.VkSubpassEndInfo*)*, void (%struct.VkCommandBuffer_T*, %struct.VkSubpassEndInfo*)*, i32 (%struct.VkDevice_T*, %struct.VkSwapchainKHR_T*)*, i32 (%struct.VkDevice_T*, %struct.VkImportFenceFdInfoKHR*)*, i32 (%struct.VkDevice_T*, %struct.VkFenceGetFdInfoKHR*, i32*)*, i32 (%struct.VkDevice_T*, %struct.VkAcquireProfilingLockInfoKHR*)*, void (%struct.VkDevice_T*)*, void (%struct.VkDevice_T*, %struct.VkImageMemoryRequirementsInfo2*, %struct.VkMemoryRequirements2*)*, void (%struct.VkDevice_T*, %struct.VkBufferMemoryRequirementsInfo2*, %struct.VkMemoryRequirements2*)*, void (%struct.VkDevice_T*, %struct.VkImageSparseMemoryRequirementsInfo2*, i32*, %struct.VkSparseImageMemoryRequirements2*)*, i32 (%struct.VkDevice_T*, %struct.VkSamplerYcbcrConversionCreateInfo*, %struct.VkAllocationCallbacks*, %struct.VkSamplerYcbcrConversion_T**)*, void (%struct.VkDevice_T*, %struct.VkSamplerYcbcrConversion_T*, %struct.VkAllocationCallbacks*)*, i32 (%struct.VkDevice_T*, i32, %struct.VkBindBufferMemoryInfo*)*, i32 (%struct.VkDevice_T*, i32, %struct.VkBindImageMemoryInfo*)*, void (%struct.VkDevice_T*, %struct.VkDescriptorSetLayoutCreateInfo*, %struct.VkDescriptorSetLayoutSupport*)*, void (%struct.VkCommandBuffer_T*, %struct.VkBuffer_T*, i64, %struct.VkBuffer_T*, i64, i32, i32)*, void (%struct.VkCommandBuffer_T*, %struct.VkBuffer_T*, i64, %struct.VkBuffer_T*, i64, i32, i32)*, i32 (%struct.VkDevice_T*, %struct.VkSemaphore_T*, i64*)*, i32 (%struct.VkDevice_T*, %struct.VkSemaphoreWaitInfo*, i64)*, i32 (%struct.VkDevice_T*, %struct.VkSemaphoreSignalInfo*)*, void (%struct.VkCommandBuffer_T*, %struct.VkExtent2D*, i32*)*, i64 (%struct.VkDevice_T*, %struct.VkBufferDeviceAddressInfo*)*, i64 (%struct.VkDevice_T*, %struct.VkBufferDeviceAddressInfo*)*, i64 (%struct.VkDevice_T*, %struct.VkDeviceMemoryOpaqueCaptureAddressInfo*)*, i32 (%struct.VkDevice_T*, %struct.VkAllocationCallbacks*, %struct.VkDeferredOperationKHR_T**)*, void (%struct.VkDevice_T*, %struct.VkDeferredOperationKHR_T*, %struct.VkAllocationCallbacks*)*, i32 (%struct.VkDevice_T*, %struct.VkDeferredOperationKHR_T*)*, i32 (%struct.VkDevice_T*, %struct.VkDeferredOperationKHR_T*)*, i32 (%struct.VkDevice_T*, %struct.VkDeferredOperationKHR_T*)*, i32 (%struct.VkDevice_T*, %struct.VkPipelineInfoKHR*, i32*, %struct.VkPipelineExecutablePropertiesKHR*)*, i32 (%struct.VkDevice_T*, %struct.VkPipelineExecutableInfoKHR*, i32*, %struct.VkPipelineExecutableStatisticKHR*)*, i32 (%struct.VkDevice_T*, %struct.VkPipelineExecutableInfoKHR*, i32*, %struct.VkPipelineExecutableInternalRepresentationKHR*)*, void (%struct.VkCommandBuffer_T*, %struct.VkVideoEncodeInfoKHR*)*, void (%struct.VkCommandBuffer_T*, %struct.VkEvent_T*, %struct.VkDependencyInfoKHR*)*, void (%struct.VkCommandBuffer_T*, %struct.VkEvent_T*, i64)*, void (%struct.VkCommandBuffer_T*, i32, %struct.VkEvent_T**, %struct.VkDependencyInfoKHR*)*, void (%struct.VkCommandBuffer_T*, %struct.VkDependencyInfoKHR*)*, void (%struct.VkCommandBuffer_T*, i64, %struct.VkQueryPool_T*, i32)*, i32 (%struct.VkQueue_T*, i32, %struct.VkSubmitInfo2KHR*, %struct.VkFence_T*)*, void (%struct.VkCommandBuffer_T*, i64, %struct.VkBuffer_T*, i64, i32)*, void (%struct.VkQueue_T*, i32*, %struct.VkCheckpointData2NV*)*, void (%struct.VkCommandBuffer_T*, %struct.VkCopyBufferInfo2KHR*)*, void (%struct.VkCommandBuffer_T*, %struct.VkCopyImageInfo2KHR*)*, void (%struct.VkCommandBuffer_T*, %struct.VkCopyBufferToImageInfo2KHR*)*, void (%struct.VkCommandBuffer_T*, %struct.VkCopyImageToBufferInfo2KHR*)*, void (%struct.VkCommandBuffer_T*, %struct.VkBlitImageInfo2KHR*)*, void (%struct.VkCommandBuffer_T*, %struct.VkResolveImageInfo2KHR*)*, i32 (%struct.VkDevice_T*, %struct.VkDebugMarkerObjectTagInfoEXT*)*, i32 (%struct.VkDevice_T*, %struct.VkDebugMarkerObjectNameInfoEXT*)*, void (%struct.VkCommandBuffer_T*, %struct.VkDebugMarkerMarkerInfoEXT*)*, void (%struct.VkCommandBuffer_T*)*, void (%struct.VkCommandBuffer_T*, %struct.VkDebugMarkerMarkerInfoEXT*)*, void (%struct.VkCommandBuffer_T*, i32, i32, %struct.VkBuffer_T**, i64*, i64*)*, void (%struct.VkCommandBuffer_T*, i32, i32, %struct.VkBuffer_T**, i64*)*, void (%struct.VkCommandBuffer_T*, i32, i32, %struct.VkBuffer_T**, i64*)*, void (%struct.VkCommandBuffer_T*, %struct.VkQueryPool_T*, i32, i32, i32)*, void (%struct.VkCommandBuffer_T*, %struct.VkQueryPool_T*, i32, i32)*, void (%struct.VkCommandBuffer_T*, i32, i32, %struct.VkBuffer_T*, i64, i32, i32)*, i32 (%struct.VkDevice_T*, %struct.VkCuModuleCreateInfoNVX*, %struct.VkAllocationCallbacks*, %struct.VkCuModuleNVX_T**)*, i32 (%struct.VkDevice_T*, %struct.VkCuFunctionCreateInfoNVX*, %struct.VkAllocationCallbacks*, %struct.VkCuFunctionNVX_T**)*, void (%struct.VkDevice_T*, %struct.VkCuModuleNVX_T*, %struct.VkAllocationCallbacks*)*, void (%struct.VkDevice_T*, %struct.VkCuFunctionNVX_T*, %struct.VkAllocationCallbacks*)*, void (%struct.VkCommandBuffer_T*, %struct.VkCuLaunchInfoNVX*)*, i32 (%struct.VkDevice_T*, %struct.VkImageViewHandleInfoNVX*)*, i32 (%struct.VkDevice_T*, %struct.VkImageView_T*, %struct.VkImageViewAddressPropertiesNVX*)*, void (%struct.VkCommandBuffer_T*, %struct.VkBuffer_T*, i64, %struct.VkBuffer_T*, i64, i32, i32)*, void (%struct.VkCommandBuffer_T*, %struct.VkBuffer_T*, i64, %struct.VkBuffer_T*, i64, i32, i32)*, i32 (%struct.VkDevice_T*, %struct.VkPipeline_T*, i32, i32, i64*, i8*)*, void (%struct.VkCommandBuffer_T*, %struct.VkConditionalRenderingBeginInfoEXT*)*, void (%struct.VkCommandBuffer_T*)*, void (%struct.VkCommandBuffer_T*, i32, i32, %struct.VkViewportWScalingNV*)*, i32 (%struct.VkDevice_T*, %struct.VkDisplayKHR_T*, %struct.VkDisplayPowerInfoEXT*)*, i32 (%struct.VkDevice_T*, %struct.VkDeviceEventInfoEXT*, %struct.VkAllocationCallbacks*, %struct.VkFence_T**)*, i32 (%struct.VkDevice_T*, %struct.VkDisplayKHR_T*, %struct.VkDisplayEventInfoEXT*, %struct.VkAllocationCallbacks*, %struct.VkFence_T**)*, i32 (%struct.VkDevice_T*, %struct.VkSwapchainKHR_T*, i32, i64*)*, i32 (%struct.VkDevice_T*, %struct.VkSwapchainKHR_T*, %struct.VkRefreshCycleDurationGOOGLE*)*, i32 (%struct.VkDevice_T*, %struct.VkSwapchainKHR_T*, i32*, %struct.VkPastPresentationTimingGOOGLE*)*, void (%struct.VkCommandBuffer_T*, i32, i32, %struct.VkRect2D*)*, void (%struct.VkDevice_T*, i32, %struct.VkSwapchainKHR_T**, %struct.VkHdrMetadataEXT*)*, i32 (%struct.VkDevice_T*, %struct.VkDebugUtilsObjectNameInfoEXT*)*, i32 (%struct.VkDevice_T*, %struct.VkDebugUtilsObjectTagInfoEXT*)*, void (%struct.VkQueue_T*, %struct.VkDebugUtilsLabelEXT*)*, void (%struct.VkQueue_T*)*, void (%struct.VkQueue_T*, %struct.VkDebugUtilsLabelEXT*)*, void (%struct.VkCommandBuffer_T*, %struct.VkDebugUtilsLabelEXT*)*, void (%struct.VkCommandBuffer_T*)*, void (%struct.VkCommandBuffer_T*, %struct.VkDebugUtilsLabelEXT*)*, void (%struct.VkCommandBuffer_T*, %struct.VkSampleLocationsInfoEXT*)*, i32 (%struct.VkDevice_T*, %struct.VkImage_T*, %struct.VkImageDrmFormatModifierPropertiesEXT*)*, i32 (%struct.VkDevice_T*, %struct.VkValidationCacheCreateInfoEXT*, %struct.VkAllocationCallbacks*, %struct.VkValidationCacheEXT_T**)*, void (%struct.VkDevice_T*, %struct.VkValidationCacheEXT_T*, %struct.VkAllocationCallbacks*)*, i32 (%struct.VkDevice_T*, %struct.VkValidationCacheEXT_T*, i32, %struct.VkValidationCacheEXT_T**)*, i32 (%struct.VkDevice_T*, %struct.VkValidationCacheEXT_T*, i64*, i8*)*, void (%struct.VkCommandBuffer_T*, %struct.VkImageView_T*, i32)*, void (%struct.VkCommandBuffer_T*, i32, i32, %struct.VkShadingRatePaletteNV*)*, void (%struct.VkCommandBuffer_T*, i32, i32, %struct.VkCoarseSampleOrderCustomNV*)*, i32 (%struct.VkDevice_T*, %struct.VkAccelerationStructureCreateInfoNV*, %struct.VkAllocationCallbacks*, %struct.VkAccelerationStructureNV_T**)*, void (%struct.VkDevice_T*, %struct.VkAccelerationStructureNV_T*, %struct.VkAllocationCallbacks*)*, void (%struct.VkDevice_T*, %struct.VkAccelerationStructureMemoryRequirementsInfoNV*, %struct.VkMemoryRequirements2*)*, i32 (%struct.VkDevice_T*, i32, %struct.VkBindAccelerationStructureMemoryInfoNV*)*, void (%struct.VkCommandBuffer_T*, %struct.VkAccelerationStructureInfoNV*, %struct.VkBuffer_T*, i64, i32, %struct.VkAccelerationStructureNV_T*, %struct.VkAccelerationStructureNV_T*, %struct.VkBuffer_T*, i64)*, void (%struct.VkCommandBuffer_T*, %struct.VkAccelerationStructureNV_T*, %struct.VkAccelerationStructureNV_T*, i32)*, void (%struct.VkCommandBuffer_T*, %struct.VkBuffer_T*, i64, %struct.VkBuffer_T*, i64, i64, %struct.VkBuffer_T*, i64, i64, %struct.VkBuffer_T*, i64, i64, i32, i32, i32)*, i32 (%struct.VkDevice_T*, %struct.VkPipelineCache_T*, i32, %struct.VkRayTracingPipelineCreateInfoNV*, %struct.VkAllocationCallbacks*, %struct.VkPipeline_T**)*, i32 (%struct.VkDevice_T*, %struct.VkPipeline_T*, i32, i32, i64, i8*)*, i32 (%struct.VkDevice_T*, %struct.VkPipeline_T*, i32, i32, i64, i8*)*, i32 (%struct.VkDevice_T*, %struct.VkAccelerationStructureNV_T*, i64, i8*)*, void (%struct.VkCommandBuffer_T*, i32, %struct.VkAccelerationStructureNV_T**, i32, %struct.VkQueryPool_T*, i32)*, i32 (%struct.VkDevice_T*, %struct.VkPipeline_T*, i32)*, i32 (%struct.VkDevice_T*, i32, i8*, %struct.VkMemoryHostPointerPropertiesEXT*)*, void (%struct.VkCommandBuffer_T*, i32, %struct.VkBuffer_T*, i64, i32)*, i32 (%struct.VkDevice_T*, i32, %struct.VkCalibratedTimestampInfoEXT*, i64*, i64*)*, void (%struct.VkCommandBuffer_T*, i32, i32)*, void (%struct.VkCommandBuffer_T*, %struct.VkBuffer_T*, i64, i32, i32)*, void (%struct.VkCommandBuffer_T*, %struct.VkBuffer_T*, i64, %struct.VkBuffer_T*, i64, i32, i32)*, void (%struct.VkCommandBuffer_T*, i32, i32, %struct.VkRect2D*)*, void (%struct.VkCommandBuffer_T*, i8*)*, void (%struct.VkQueue_T*, i32*, %struct.VkCheckpointDataNV*)*, i32 (%struct.VkDevice_T*, %struct.VkInitializePerformanceApiInfoINTEL*)*, void (%struct.VkDevice_T*)*, i32 (%struct.VkCommandBuffer_T*, %struct.VkPerformanceMarkerInfoINTEL*)*, i32 (%struct.VkCommandBuffer_T*, %struct.VkPerformanceStreamMarkerInfoINTEL*)*, i32 (%struct.VkCommandBuffer_T*, %struct.VkPerformanceOverrideInfoINTEL*)*, i32 (%struct.VkDevice_T*, %struct.VkPerformanceConfigurationAcquireInfoINTEL*, %struct.VkPerformanceConfigurationINTEL_T**)*, i32 (%struct.VkDevice_T*, %struct.VkPerformanceConfigurationINTEL_T*)*, i32 (%struct.VkQueue_T*, %struct.VkPerformanceConfigurationINTEL_T*)*, i32 (%struct.VkDevice_T*, i32, %struct.VkPerformanceValueINTEL*)*, void (%struct.VkDevice_T*, %struct.VkSwapchainKHR_T*, i32)*, i64 (%struct.VkDevice_T*, %struct.VkBufferDeviceAddressInfo*)*, void (%struct.VkCommandBuffer_T*, i32, i16)*, void (%struct.VkDevice_T*, %struct.VkQueryPool_T*, i32, i32)*, void (%struct.VkCommandBuffer_T*, i32)*, void (%struct.VkCommandBuffer_T*, i32)*, void (%struct.VkCommandBuffer_T*, i32)*, void (%struct.VkCommandBuffer_T*, i32, %struct.VkViewport*)*, void (%struct.VkCommandBuffer_T*, i32, %struct.VkRect2D*)*, void (%struct.VkCommandBuffer_T*, i32, i32, %struct.VkBuffer_T**, i64*, i64*, i64*)*, void (%struct.VkCommandBuffer_T*, i32)*, void (%struct.VkCommandBuffer_T*, i32)*, void (%struct.VkCommandBuffer_T*, i32)*, void (%struct.VkCommandBuffer_T*, i32)*, void (%struct.VkCommandBuffer_T*, i32)*, void (%struct.VkCommandBuffer_T*, i32, i32, i32, i32, i32)*, void (%struct.VkDevice_T*, %struct.VkGeneratedCommandsMemoryRequirementsInfoNV*, %struct.VkMemoryRequirements2*)*, void (%struct.VkCommandBuffer_T*, %struct.VkGeneratedCommandsInfoNV*)*, void (%struct.VkCommandBuffer_T*, i32, %struct.VkGeneratedCommandsInfoNV*)*, void (%struct.VkCommandBuffer_T*, i32, %struct.VkPipeline_T*, i32)*, i32 (%struct.VkDevice_T*, %struct.VkIndirectCommandsLayoutCreateInfoNV*, %struct.VkAllocationCallbacks*, %struct.VkIndirectCommandsLayoutNV_T**)*, void (%struct.VkDevice_T*, %struct.VkIndirectCommandsLayoutNV_T*, %struct.VkAllocationCallbacks*)*, i32 (%struct.VkDevice_T*, %struct.VkPrivateDataSlotCreateInfoEXT*, %struct.VkAllocationCallbacks*, %struct.VkPrivateDataSlotEXT_T**)*, void (%struct.VkDevice_T*, %struct.VkPrivateDataSlotEXT_T*, %struct.VkAllocationCallbacks*)*, i32 (%struct.VkDevice_T*, i32, i64, %struct.VkPrivateDataSlotEXT_T*, i64)*, void (%struct.VkDevice_T*, i32, i64, %struct.VkPrivateDataSlotEXT_T*, i64*)*, void (%struct.VkCommandBuffer_T*, i32, i32*)*, void (%struct.VkCommandBuffer_T*, i32, %struct.VkVertexInputBindingDescription2EXT*, i32, %struct.VkVertexInputAttributeDescription2EXT*)*, void (%struct.VkCommandBuffer_T*, i32)*, void (%struct.VkCommandBuffer_T*, i32)*, void (%struct.VkCommandBuffer_T*, i32)*, void (%struct.VkCommandBuffer_T*, i32)*, void (%struct.VkCommandBuffer_T*, i32)*, void (%struct.VkCommandBuffer_T*, i32, i32*)*, i32 (%struct.VkDevice_T*, %struct.VkAccelerationStructureCreateInfoKHR*, %struct.VkAllocationCallbacks*, %struct.VkAccelerationStructureKHR_T**)*, void (%struct.VkDevice_T*, %struct.VkAccelerationStructureKHR_T*, %struct.VkAllocationCallbacks*)*, void (%struct.VkCommandBuffer_T*, i32, %struct.VkAccelerationStructureBuildGeometryInfoKHR*, %struct.VkAccelerationStructureBuildRangeInfoKHR**)*, void (%struct.VkCommandBuffer_T*, i32, %struct.VkAccelerationStructureBuildGeometryInfoKHR*, i64*, i32*, i32**)*, i32 (%struct.VkDevice_T*, %struct.VkDeferredOperationKHR_T*, i32, %struct.VkAccelerationStructureBuildGeometryInfoKHR*, %struct.VkAccelerationStructureBuildRangeInfoKHR**)*, i32 (%struct.VkDevice_T*, %struct.VkDeferredOperationKHR_T*, %struct.VkCopyAccelerationStructureInfoKHR*)*, i32 (%struct.VkDevice_T*, %struct.VkDeferredOperationKHR_T*, %struct.VkCopyAccelerationStructureToMemoryInfoKHR*)*, i32 (%struct.VkDevice_T*, %struct.VkDeferredOperationKHR_T*, %struct.VkCopyMemoryToAccelerationStructureInfoKHR*)*, i32 (%struct.VkDevice_T*, i32, %struct.VkAccelerationStructureKHR_T**, i32, i64, i8*, i64)*, void (%struct.VkCommandBuffer_T*, %struct.VkCopyAccelerationStructureInfoKHR*)*, void (%struct.VkCommandBuffer_T*, %struct.VkCopyAccelerationStructureToMemoryInfoKHR*)*, void (%struct.VkCommandBuffer_T*, %struct.VkCopyMemoryToAccelerationStructureInfoKHR*)*, i64 (%struct.VkDevice_T*, %struct.VkAccelerationStructureDeviceAddressInfoKHR*)*, void (%struct.VkCommandBuffer_T*, i32, %struct.VkAccelerationStructureKHR_T**, i32, %struct.VkQueryPool_T*, i32)*, void (%struct.VkDevice_T*, %struct.VkAccelerationStructureVersionInfoKHR*, i32*)*, void (%struct.VkDevice_T*, i32, %struct.VkAccelerationStructureBuildGeometryInfoKHR*, i32*, %struct.VkAccelerationStructureBuildSizesInfoKHR*)*, void (%struct.VkCommandBuffer_T*, %struct.VkStridedDeviceAddressRegionKHR*, %struct.VkStridedDeviceAddressRegionKHR*, %struct.VkStridedDeviceAddressRegionKHR*, %struct.VkStridedDeviceAddressRegionKHR*, i32, i32, i32)*, i32 (%struct.VkDevice_T*, %struct.VkDeferredOperationKHR_T*, %struct.VkPipelineCache_T*, i32, %struct.VkRayTracingPipelineCreateInfoKHR*, %struct.VkAllocationCallbacks*, %struct.VkPipeline_T**)*, i32 (%struct.VkDevice_T*, %struct.VkPipeline_T*, i32, i32, i64, i8*)*, void (%struct.VkCommandBuffer_T*, %struct.VkStridedDeviceAddressRegionKHR*, %struct.VkStridedDeviceAddressRegionKHR*, %struct.VkStridedDeviceAddressRegionKHR*, %struct.VkStridedDeviceAddressRegionKHR*, i64)*, i64 (%struct.VkDevice_T*, %struct.VkPipeline_T*, i32, i32)*, void (%struct.VkCommandBuffer_T*, i32)* }
%struct.VkQueue_T = type opaque
%struct.VkSubmitInfo = type { i32, i8*, i32, %struct.VkSemaphore_T**, i32*, i32, %struct.VkCommandBuffer_T**, i32, %struct.VkSemaphore_T** }
%struct.VkCommandBuffer_T = type opaque
%struct.VkSemaphore_T = type opaque
%struct.VkFence_T = type opaque
%struct.VkMemoryAllocateInfo = type { i32, i8*, i64, i32 }
%struct.VkDeviceMemory_T = type opaque
%struct.VkMappedMemoryRange = type { i32, i8*, %struct.VkDeviceMemory_T*, i64, i64 }
%struct.VkBuffer_T = type opaque
%struct.VkImage_T = type opaque
%struct.VkMemoryRequirements = type { i64, i64, i32 }
%struct.VkSparseImageMemoryRequirements = type { %struct.VkSparseImageFormatProperties, i32, i64, i64, i64 }
%struct.VkBindSparseInfo = type { i32, i8*, i32, %struct.VkSemaphore_T**, i32, %struct.VkSparseBufferMemoryBindInfo*, i32, %struct.VkSparseImageOpaqueMemoryBindInfo*, i32, %struct.VkSparseImageMemoryBindInfo*, i32, %struct.VkSemaphore_T** }
%struct.VkSparseBufferMemoryBindInfo = type { %struct.VkBuffer_T*, i32, %struct.VkSparseMemoryBind* }
%struct.VkSparseMemoryBind = type { i64, i64, %struct.VkDeviceMemory_T*, i64, i32 }
%struct.VkSparseImageOpaqueMemoryBindInfo = type { %struct.VkImage_T*, i32, %struct.VkSparseMemoryBind* }
%struct.VkSparseImageMemoryBindInfo = type { %struct.VkImage_T*, i32, %struct.VkSparseImageMemoryBind* }
%struct.VkSparseImageMemoryBind = type { %struct.VkImageSubresource, %struct.VkOffset3D, %struct.VkExtent3D, %struct.VkDeviceMemory_T*, i64, i32 }
%struct.VkImageSubresource = type { i32, i32, i32 }
%struct.VkOffset3D = type { i32, i32, i32 }
%struct.VkFenceCreateInfo = type { i32, i8*, i32 }
%struct.VkSemaphoreCreateInfo = type { i32, i8*, i32 }
%struct.VkEventCreateInfo = type { i32, i8*, i32 }
%struct.VkEvent_T = type opaque
%struct.VkQueryPoolCreateInfo = type { i32, i8*, i32, i32, i32, i32 }
%struct.VkQueryPool_T = type opaque
%struct.VkBufferCreateInfo = type { i32, i8*, i32, i64, i32, i32, i32, i32* }
%struct.VkBufferViewCreateInfo = type { i32, i8*, i32, %struct.VkBuffer_T*, i32, i64, i64 }
%struct.VkBufferView_T = type opaque
%struct.VkImageCreateInfo = type { i32, i8*, i32, i32, i32, %struct.VkExtent3D, i32, i32, i32, i32, i32, i32, i32, i32*, i32 }
%struct.VkSubresourceLayout = type { i64, i64, i64, i64, i64 }
%struct.VkImageViewCreateInfo = type { i32, i8*, i32, %struct.VkImage_T*, i32, i32, %struct.VkComponentMapping, %struct.VkImageSubresourceRange }
%struct.VkComponentMapping = type { i32, i32, i32, i32 }
%struct.VkImageSubresourceRange = type { i32, i32, i32, i32, i32 }
%struct.VkImageView_T = type opaque
%struct.VkShaderModuleCreateInfo = type { i32, i8*, i32, i64, i32* }
%struct.VkShaderModule_T = type opaque
%struct.VkPipelineCacheCreateInfo = type { i32, i8*, i32, i64, i8* }
%struct.VkPipelineCache_T = type opaque
%struct.VkGraphicsPipelineCreateInfo = type { i32, i8*, i32, i32, %struct.VkPipelineShaderStageCreateInfo*, %struct.VkPipelineVertexInputStateCreateInfo*, %struct.VkPipelineInputAssemblyStateCreateInfo*, %struct.VkPipelineTessellationStateCreateInfo*, %struct.VkPipelineViewportStateCreateInfo*, %struct.VkPipelineRasterizationStateCreateInfo*, %struct.VkPipelineMultisampleStateCreateInfo*, %struct.VkPipelineDepthStencilStateCreateInfo*, %struct.VkPipelineColorBlendStateCreateInfo*, %struct.VkPipelineDynamicStateCreateInfo*, %struct.VkPipelineLayout_T*, %struct.VkRenderPass_T*, i32, %struct.VkPipeline_T*, i32 }
%struct.VkPipelineShaderStageCreateInfo = type { i32, i8*, i32, i32, %struct.VkShaderModule_T*, i8*, %struct.VkSpecializationInfo* }
%struct.VkSpecializationInfo = type { i32, %struct.VkSpecializationMapEntry*, i64, i8* }
%struct.VkSpecializationMapEntry = type { i32, i32, i64 }
%struct.VkPipelineVertexInputStateCreateInfo = type { i32, i8*, i32, i32, %struct.VkVertexInputBindingDescription*, i32, %struct.VkVertexInputAttributeDescription* }
%struct.VkVertexInputBindingDescription = type { i32, i32, i32 }
%struct.VkVertexInputAttributeDescription = type { i32, i32, i32, i32 }
%struct.VkPipelineInputAssemblyStateCreateInfo = type { i32, i8*, i32, i32, i32 }
%struct.VkPipelineTessellationStateCreateInfo = type { i32, i8*, i32, i32 }
%struct.VkPipelineViewportStateCreateInfo = type { i32, i8*, i32, i32, %struct.VkViewport*, i32, %struct.VkRect2D* }
%struct.VkViewport = type { float, float, float, float, float, float }
%struct.VkPipelineRasterizationStateCreateInfo = type { i32, i8*, i32, i32, i32, i32, i32, i32, i32, float, float, float, float }
%struct.VkPipelineMultisampleStateCreateInfo = type { i32, i8*, i32, i32, i32, float, i32*, i32, i32 }
%struct.VkPipelineDepthStencilStateCreateInfo = type { i32, i8*, i32, i32, i32, i32, i32, i32, %struct.VkStencilOpState, %struct.VkStencilOpState, float, float }
%struct.VkStencilOpState = type { i32, i32, i32, i32, i32, i32, i32 }
%struct.VkPipelineColorBlendStateCreateInfo = type { i32, i8*, i32, i32, i32, i32, %struct.VkPipelineColorBlendAttachmentState*, [4 x float] }
%struct.VkPipelineColorBlendAttachmentState = type { i32, i32, i32, i32, i32, i32, i32, i32 }
%struct.VkPipelineDynamicStateCreateInfo = type { i32, i8*, i32, i32, i32* }
%struct.VkPipelineLayout_T = type opaque
%struct.VkRenderPass_T = type opaque
%struct.VkPipeline_T = type opaque
%struct.VkComputePipelineCreateInfo = type { i32, i8*, i32, %struct.VkPipelineShaderStageCreateInfo, %struct.VkPipelineLayout_T*, %struct.VkPipeline_T*, i32 }
%struct.VkPipelineLayoutCreateInfo = type { i32, i8*, i32, i32, %struct.VkDescriptorSetLayout_T**, i32, %struct.VkPushConstantRange* }
%struct.VkDescriptorSetLayout_T = type opaque
%struct.VkPushConstantRange = type { i32, i32, i32 }
%struct.VkSamplerCreateInfo = type { i32, i8*, i32, i32, i32, i32, i32, i32, i32, float, i32, float, i32, i32, float, float, i32, i32 }
%struct.VkSampler_T = type opaque
%struct.VkDescriptorSetLayoutCreateInfo = type { i32, i8*, i32, i32, %struct.VkDescriptorSetLayoutBinding* }
%struct.VkDescriptorSetLayoutBinding = type { i32, i32, i32, i32, %struct.VkSampler_T** }
%struct.VkDescriptorPoolCreateInfo = type { i32, i8*, i32, i32, i32, %struct.VkDescriptorPoolSize* }
%struct.VkDescriptorPoolSize = type { i32, i32 }
%struct.VkDescriptorPool_T = type opaque
%struct.VkDescriptorSetAllocateInfo = type { i32, i8*, %struct.VkDescriptorPool_T*, i32, %struct.VkDescriptorSetLayout_T** }
%struct.VkDescriptorSet_T = type opaque
%struct.VkWriteDescriptorSet = type { i32, i8*, %struct.VkDescriptorSet_T*, i32, i32, i32, i32, %struct.VkDescriptorImageInfo*, %struct.VkDescriptorBufferInfo*, %struct.VkBufferView_T** }
%struct.VkDescriptorImageInfo = type { %struct.VkSampler_T*, %struct.VkImageView_T*, i32 }
%struct.VkDescriptorBufferInfo = type { %struct.VkBuffer_T*, i64, i64 }
%struct.VkCopyDescriptorSet = type { i32, i8*, %struct.VkDescriptorSet_T*, i32, i32, %struct.VkDescriptorSet_T*, i32, i32, i32 }
%struct.VkFramebufferCreateInfo = type { i32, i8*, i32, %struct.VkRenderPass_T*, i32, %struct.VkImageView_T**, i32, i32, i32 }
%struct.VkFramebuffer_T = type opaque
%struct.VkRenderPassCreateInfo = type { i32, i8*, i32, i32, %struct.VkAttachmentDescription*, i32, %struct.VkSubpassDescription*, i32, %struct.VkSubpassDependency* }
%struct.VkAttachmentDescription = type { i32, i32, i32, i32, i32, i32, i32, i32, i32 }
%struct.VkSubpassDescription = type { i32, i32, i32, %struct.VkAttachmentReference*, i32, %struct.VkAttachmentReference*, %struct.VkAttachmentReference*, %struct.VkAttachmentReference*, i32, i32* }
%struct.VkAttachmentReference = type { i32, i32 }
%struct.VkSubpassDependency = type { i32, i32, i32, i32, i32, i32, i32 }
%struct.VkCommandPoolCreateInfo = type { i32, i8*, i32, i32 }
%struct.VkCommandPool_T = type opaque
%struct.VkCommandBufferAllocateInfo = type { i32, i8*, %struct.VkCommandPool_T*, i32, i32 }
%struct.VkCommandBufferBeginInfo = type { i32, i8*, i32, %struct.VkCommandBufferInheritanceInfo* }
%struct.VkCommandBufferInheritanceInfo = type { i32, i8*, %struct.VkRenderPass_T*, i32, %struct.VkFramebuffer_T*, i32, i32, i32 }
%struct.VkBufferCopy = type { i64, i64, i64 }
%struct.VkImageCopy = type { %struct.VkImageSubresourceLayers, %struct.VkOffset3D, %struct.VkImageSubresourceLayers, %struct.VkOffset3D, %struct.VkExtent3D }
%struct.VkImageSubresourceLayers = type { i32, i32, i32, i32 }
%struct.VkImageBlit = type { %struct.VkImageSubresourceLayers, [2 x %struct.VkOffset3D], %struct.VkImageSubresourceLayers, [2 x %struct.VkOffset3D] }
%struct.VkBufferImageCopy = type { i64, i32, i32, %struct.VkImageSubresourceLayers, %struct.VkOffset3D, %struct.VkExtent3D }
%union.VkClearColorValue = type { [4 x float] }
%struct.VkClearDepthStencilValue = type { float, i32 }
%struct.VkClearAttachment = type { i32, i32, %union.VkClearValue }
%union.VkClearValue = type { %union.VkClearColorValue }
%struct.VkClearRect = type { %struct.VkRect2D, i32, i32 }
%struct.VkImageResolve = type { %struct.VkImageSubresourceLayers, %struct.VkOffset3D, %struct.VkImageSubresourceLayers, %struct.VkOffset3D, %struct.VkExtent3D }
%struct.VkMemoryBarrier = type { i32, i8*, i32, i32 }
%struct.VkBufferMemoryBarrier = type { i32, i8*, i32, i32, i32, i32, %struct.VkBuffer_T*, i64, i64 }
%struct.VkImageMemoryBarrier = type { i32, i8*, i32, i32, i32, i32, i32, i32, %struct.VkImage_T*, %struct.VkImageSubresourceRange }
%struct.VkRenderPassBeginInfo = type { i32, i8*, %struct.VkRenderPass_T*, %struct.VkFramebuffer_T*, %struct.VkRect2D, i32, %union.VkClearValue* }
%struct.VkDeviceQueueInfo2 = type { i32, i8*, i32, i32, i32 }
%struct.VkSwapchainCreateInfoKHR = type { i32, i8*, i32, %struct.VkSurfaceKHR_T*, i32, i32, i32, %struct.VkExtent2D, i32, i32, i32, i32, i32*, i32, i32, i32, i32, %struct.VkSwapchainKHR_T* }
%struct.VkSwapchainKHR_T = type opaque
%struct.VkPresentInfoKHR = type { i32, i8*, i32, %struct.VkSemaphore_T**, i32, %struct.VkSwapchainKHR_T**, i32*, i32* }
%struct.VkDeviceGroupPresentCapabilitiesKHR = type { i32, i8*, [32 x i32], i32 }
%struct.VkAcquireNextImageInfoKHR = type { i32, i8*, %struct.VkSwapchainKHR_T*, i64, %struct.VkSemaphore_T*, %struct.VkFence_T*, i32 }
%struct.VkVideoSessionCreateInfoKHR = type { i32, i8*, i32, i32, %struct.VkVideoProfileKHR*, i32, %struct.VkExtent2D, i32, i32, i32 }
%struct.VkVideoSessionKHR_T = type opaque
%struct.VkVideoGetMemoryPropertiesKHR = type { i32, i8*, i32, %struct.VkMemoryRequirements2* }
%struct.VkMemoryRequirements2 = type { i32, i8*, %struct.VkMemoryRequirements }
%struct.VkVideoBindMemoryKHR = type { i32, i8*, i32, %struct.VkDeviceMemory_T*, i64, i64 }
%struct.VkVideoSessionParametersCreateInfoKHR = type { i32, i8*, %struct.VkVideoSessionParametersKHR_T*, %struct.VkVideoSessionKHR_T* }
%struct.VkVideoSessionParametersKHR_T = type opaque
%struct.VkVideoSessionParametersUpdateInfoKHR = type { i32, i8*, i32 }
%struct.VkVideoBeginCodingInfoKHR = type { i32, i8*, i32, i32, %struct.VkVideoSessionKHR_T*, %struct.VkVideoSessionParametersKHR_T*, i32, %struct.VkVideoReferenceSlotKHR* }
%struct.VkVideoReferenceSlotKHR = type { i32, i8*, i8, %struct.VkVideoPictureResourceKHR* }
%struct.VkVideoPictureResourceKHR = type { i32, i8*, %struct.VkOffset2D, %struct.VkExtent2D, i32, %struct.VkImageView_T* }
%struct.VkVideoEndCodingInfoKHR = type { i32, i8*, i32 }
%struct.VkVideoCodingControlInfoKHR = type { i32, i8*, i32 }
%struct.VkVideoDecodeInfoKHR = type { i32, i8*, i32, %struct.VkOffset2D, %struct.VkExtent2D, %struct.VkBuffer_T*, i64, i64, %struct.VkVideoPictureResourceKHR, %struct.VkVideoReferenceSlotKHR*, i32, %struct.VkVideoReferenceSlotKHR* }
%struct.VkMemoryGetFdInfoKHR = type { i32, i8*, %struct.VkDeviceMemory_T*, i32 }
%struct.VkMemoryFdPropertiesKHR = type { i32, i8*, i32 }
%struct.VkImportSemaphoreFdInfoKHR = type { i32, i8*, %struct.VkSemaphore_T*, i32, i32, i32 }
%struct.VkSemaphoreGetFdInfoKHR = type { i32, i8*, %struct.VkSemaphore_T*, i32 }
%struct.VkDescriptorUpdateTemplate_T = type opaque
%struct.VkDescriptorUpdateTemplateCreateInfo = type { i32, i8*, i32, i32, %struct.VkDescriptorUpdateTemplateEntry*, i32, %struct.VkDescriptorSetLayout_T*, i32, %struct.VkPipelineLayout_T*, i32 }
%struct.VkDescriptorUpdateTemplateEntry = type { i32, i32, i32, i32, i64, i64 }
%struct.VkRenderPassCreateInfo2 = type { i32, i8*, i32, i32, %struct.VkAttachmentDescription2*, i32, %struct.VkSubpassDescription2*, i32, %struct.VkSubpassDependency2*, i32, i32* }
%struct.VkAttachmentDescription2 = type { i32, i8*, i32, i32, i32, i32, i32, i32, i32, i32, i32 }
%struct.VkSubpassDescription2 = type { i32, i8*, i32, i32, i32, i32, %struct.VkAttachmentReference2*, i32, %struct.VkAttachmentReference2*, %struct.VkAttachmentReference2*, %struct.VkAttachmentReference2*, i32, i32* }
%struct.VkAttachmentReference2 = type { i32, i8*, i32, i32, i32 }
%struct.VkSubpassDependency2 = type { i32, i8*, i32, i32, i32, i32, i32, i32, i32, i32 }
%struct.VkSubpassBeginInfo = type { i32, i8*, i32 }
%struct.VkSubpassEndInfo = type { i32, i8* }
%struct.VkImportFenceFdInfoKHR = type { i32, i8*, %struct.VkFence_T*, i32, i32, i32 }
%struct.VkFenceGetFdInfoKHR = type { i32, i8*, %struct.VkFence_T*, i32 }
%struct.VkAcquireProfilingLockInfoKHR = type { i32, i8*, i32, i64 }
%struct.VkImageMemoryRequirementsInfo2 = type { i32, i8*, %struct.VkImage_T* }
%struct.VkBufferMemoryRequirementsInfo2 = type { i32, i8*, %struct.VkBuffer_T* }
%struct.VkImageSparseMemoryRequirementsInfo2 = type { i32, i8*, %struct.VkImage_T* }
%struct.VkSparseImageMemoryRequirements2 = type { i32, i8*, %struct.VkSparseImageMemoryRequirements }
%struct.VkSamplerYcbcrConversionCreateInfo = type { i32, i8*, i32, i32, i32, %struct.VkComponentMapping, i32, i32, i32, i32 }
%struct.VkSamplerYcbcrConversion_T = type opaque
%struct.VkBindBufferMemoryInfo = type { i32, i8*, %struct.VkBuffer_T*, %struct.VkDeviceMemory_T*, i64 }
%struct.VkBindImageMemoryInfo = type { i32, i8*, %struct.VkImage_T*, %struct.VkDeviceMemory_T*, i64 }
%struct.VkDescriptorSetLayoutSupport = type { i32, i8*, i32 }
%struct.VkSemaphoreWaitInfo = type { i32, i8*, i32, i32, %struct.VkSemaphore_T**, i64* }
%struct.VkSemaphoreSignalInfo = type { i32, i8*, %struct.VkSemaphore_T*, i64 }
%struct.VkDeviceMemoryOpaqueCaptureAddressInfo = type { i32, i8*, %struct.VkDeviceMemory_T* }
%struct.VkDeferredOperationKHR_T = type opaque
%struct.VkPipelineInfoKHR = type { i32, i8*, %struct.VkPipeline_T* }
%struct.VkPipelineExecutablePropertiesKHR = type { i32, i8*, i32, [256 x i8], [256 x i8], i32 }
%struct.VkPipelineExecutableInfoKHR = type { i32, i8*, %struct.VkPipeline_T*, i32 }
%struct.VkPipelineExecutableStatisticKHR = type { i32, i8*, [256 x i8], [256 x i8], i32, %union.VkPipelineExecutableStatisticValueKHR }
%union.VkPipelineExecutableStatisticValueKHR = type { i64 }
%struct.VkPipelineExecutableInternalRepresentationKHR = type { i32, i8*, [256 x i8], [256 x i8], i32, i64, i8* }
%struct.VkVideoEncodeInfoKHR = type { i32, i8*, i32, i32, %struct.VkExtent2D, %struct.VkBuffer_T*, i64, i64, %struct.VkVideoPictureResourceKHR, %struct.VkVideoReferenceSlotKHR*, i32, %struct.VkVideoReferenceSlotKHR* }
%struct.VkDependencyInfoKHR = type { i32, i8*, i32, i32, %struct.VkMemoryBarrier2KHR*, i32, %struct.VkBufferMemoryBarrier2KHR*, i32, %struct.VkImageMemoryBarrier2KHR* }
%struct.VkMemoryBarrier2KHR = type { i32, i8*, i64, i64, i64, i64 }
%struct.VkBufferMemoryBarrier2KHR = type { i32, i8*, i64, i64, i64, i64, i32, i32, %struct.VkBuffer_T*, i64, i64 }
%struct.VkImageMemoryBarrier2KHR = type { i32, i8*, i64, i64, i64, i64, i32, i32, i32, i32, %struct.VkImage_T*, %struct.VkImageSubresourceRange }
%struct.VkSubmitInfo2KHR = type { i32, i8*, i32, i32, %struct.VkSemaphoreSubmitInfoKHR*, i32, %struct.VkCommandBufferSubmitInfoKHR*, i32, %struct.VkSemaphoreSubmitInfoKHR* }
%struct.VkCommandBufferSubmitInfoKHR = type { i32, i8*, %struct.VkCommandBuffer_T*, i32 }
%struct.VkSemaphoreSubmitInfoKHR = type { i32, i8*, %struct.VkSemaphore_T*, i64, i64, i32 }
%struct.VkCheckpointData2NV = type { i32, i8*, i64, i8* }
%struct.VkCopyBufferInfo2KHR = type { i32, i8*, %struct.VkBuffer_T*, %struct.VkBuffer_T*, i32, %struct.VkBufferCopy2KHR* }
%struct.VkBufferCopy2KHR = type { i32, i8*, i64, i64, i64 }
%struct.VkCopyImageInfo2KHR = type { i32, i8*, %struct.VkImage_T*, i32, %struct.VkImage_T*, i32, i32, %struct.VkImageCopy2KHR* }
%struct.VkImageCopy2KHR = type { i32, i8*, %struct.VkImageSubresourceLayers, %struct.VkOffset3D, %struct.VkImageSubresourceLayers, %struct.VkOffset3D, %struct.VkExtent3D }
%struct.VkCopyBufferToImageInfo2KHR = type { i32, i8*, %struct.VkBuffer_T*, %struct.VkImage_T*, i32, i32, %struct.VkBufferImageCopy2KHR* }
%struct.VkBufferImageCopy2KHR = type { i32, i8*, i64, i32, i32, %struct.VkImageSubresourceLayers, %struct.VkOffset3D, %struct.VkExtent3D }
%struct.VkCopyImageToBufferInfo2KHR = type { i32, i8*, %struct.VkImage_T*, i32, %struct.VkBuffer_T*, i32, %struct.VkBufferImageCopy2KHR* }
%struct.VkBlitImageInfo2KHR = type { i32, i8*, %struct.VkImage_T*, i32, %struct.VkImage_T*, i32, i32, %struct.VkImageBlit2KHR*, i32 }
%struct.VkImageBlit2KHR = type { i32, i8*, %struct.VkImageSubresourceLayers, [2 x %struct.VkOffset3D], %struct.VkImageSubresourceLayers, [2 x %struct.VkOffset3D] }
%struct.VkResolveImageInfo2KHR = type { i32, i8*, %struct.VkImage_T*, i32, %struct.VkImage_T*, i32, i32, %struct.VkImageResolve2KHR* }
%struct.VkImageResolve2KHR = type { i32, i8*, %struct.VkImageSubresourceLayers, %struct.VkOffset3D, %struct.VkImageSubresourceLayers, %struct.VkOffset3D, %struct.VkExtent3D }
%struct.VkDebugMarkerObjectTagInfoEXT = type { i32, i8*, i32, i64, i64, i64, i8* }
%struct.VkDebugMarkerObjectNameInfoEXT = type { i32, i8*, i32, i64, i8* }
%struct.VkDebugMarkerMarkerInfoEXT = type { i32, i8*, i8*, [4 x float] }
%struct.VkCuModuleCreateInfoNVX = type { i32, i8*, i64, i8* }
%struct.VkCuModuleNVX_T = type opaque
%struct.VkCuFunctionCreateInfoNVX = type { i32, i8*, %struct.VkCuModuleNVX_T*, i8* }
%struct.VkCuFunctionNVX_T = type opaque
%struct.VkCuLaunchInfoNVX = type { i32, i8*, %struct.VkCuFunctionNVX_T*, i32, i32, i32, i32, i32, i32, i32, i64, i8**, i64, i8** }
%struct.VkImageViewHandleInfoNVX = type { i32, i8*, %struct.VkImageView_T*, i32, %struct.VkSampler_T* }
%struct.VkImageViewAddressPropertiesNVX = type { i32, i8*, i64, i64 }
%struct.VkConditionalRenderingBeginInfoEXT = type { i32, i8*, %struct.VkBuffer_T*, i64, i32 }
%struct.VkViewportWScalingNV = type { float, float }
%struct.VkDisplayPowerInfoEXT = type { i32, i8*, i32 }
%struct.VkDeviceEventInfoEXT = type { i32, i8*, i32 }
%struct.VkDisplayEventInfoEXT = type { i32, i8*, i32 }
%struct.VkRefreshCycleDurationGOOGLE = type { i64 }
%struct.VkPastPresentationTimingGOOGLE = type { i32, i64, i64, i64, i64 }
%struct.VkHdrMetadataEXT = type { i32, i8*, %struct.VkXYColorEXT, %struct.VkXYColorEXT, %struct.VkXYColorEXT, %struct.VkXYColorEXT, float, float, float, float }
%struct.VkXYColorEXT = type { float, float }
%struct.VkDebugUtilsObjectTagInfoEXT = type { i32, i8*, i32, i64, i64, i64, i8* }
%struct.VkSampleLocationsInfoEXT = type { i32, i8*, i32, %struct.VkExtent2D, i32, %struct.VkSampleLocationEXT* }
%struct.VkSampleLocationEXT = type { float, float }
%struct.VkImageDrmFormatModifierPropertiesEXT = type { i32, i8*, i64 }
%struct.VkValidationCacheCreateInfoEXT = type { i32, i8*, i32, i64, i8* }
%struct.VkValidationCacheEXT_T = type opaque
%struct.VkShadingRatePaletteNV = type { i32, i32* }
%struct.VkCoarseSampleOrderCustomNV = type { i32, i32, i32, %struct.VkCoarseSampleLocationNV* }
%struct.VkCoarseSampleLocationNV = type { i32, i32, i32 }
%struct.VkAccelerationStructureCreateInfoNV = type { i32, i8*, i64, %struct.VkAccelerationStructureInfoNV }
%struct.VkAccelerationStructureInfoNV = type { i32, i8*, i32, i32, i32, i32, %struct.VkGeometryNV* }
%struct.VkGeometryNV = type { i32, i8*, i32, %struct.VkGeometryDataNV, i32 }
%struct.VkGeometryDataNV = type { %struct.VkGeometryTrianglesNV, %struct.VkGeometryAABBNV }
%struct.VkGeometryTrianglesNV = type { i32, i8*, %struct.VkBuffer_T*, i64, i32, i64, i32, %struct.VkBuffer_T*, i64, i32, i32, %struct.VkBuffer_T*, i64 }
%struct.VkGeometryAABBNV = type { i32, i8*, %struct.VkBuffer_T*, i32, i32, i64 }
%struct.VkAccelerationStructureNV_T = type opaque
%struct.VkAccelerationStructureMemoryRequirementsInfoNV = type { i32, i8*, i32, %struct.VkAccelerationStructureNV_T* }
%struct.VkBindAccelerationStructureMemoryInfoNV = type { i32, i8*, %struct.VkAccelerationStructureNV_T*, %struct.VkDeviceMemory_T*, i64, i32, i32* }
%struct.VkRayTracingPipelineCreateInfoNV = type { i32, i8*, i32, i32, %struct.VkPipelineShaderStageCreateInfo*, i32, %struct.VkRayTracingShaderGroupCreateInfoNV*, i32, %struct.VkPipelineLayout_T*, %struct.VkPipeline_T*, i32 }
%struct.VkRayTracingShaderGroupCreateInfoNV = type { i32, i8*, i32, i32, i32, i32, i32 }
%struct.VkMemoryHostPointerPropertiesEXT = type { i32, i8*, i32 }
%struct.VkCalibratedTimestampInfoEXT = type { i32, i8*, i32 }
%struct.VkCheckpointDataNV = type { i32, i8*, i32, i8* }
%struct.VkInitializePerformanceApiInfoINTEL = type { i32, i8*, i8* }
%struct.VkPerformanceMarkerInfoINTEL = type { i32, i8*, i64 }
%struct.VkPerformanceStreamMarkerInfoINTEL = type { i32, i8*, i32 }
%struct.VkPerformanceOverrideInfoINTEL = type { i32, i8*, i32, i32, i64 }
%struct.VkPerformanceConfigurationAcquireInfoINTEL = type { i32, i8*, i32 }
%struct.VkPerformanceConfigurationINTEL_T = type opaque
%struct.VkPerformanceValueINTEL = type { i32, %union.VkPerformanceValueDataINTEL }
%union.VkPerformanceValueDataINTEL = type { i64 }
%struct.VkBufferDeviceAddressInfo = type { i32, i8*, %struct.VkBuffer_T* }
%struct.VkGeneratedCommandsMemoryRequirementsInfoNV = type { i32, i8*, i32, %struct.VkPipeline_T*, %struct.VkIndirectCommandsLayoutNV_T*, i32 }
%struct.VkIndirectCommandsLayoutNV_T = type opaque
%struct.VkGeneratedCommandsInfoNV = type { i32, i8*, i32, %struct.VkPipeline_T*, %struct.VkIndirectCommandsLayoutNV_T*, i32, %struct.VkIndirectCommandsStreamNV*, i32, %struct.VkBuffer_T*, i64, i64, %struct.VkBuffer_T*, i64, %struct.VkBuffer_T*, i64 }
%struct.VkIndirectCommandsStreamNV = type { %struct.VkBuffer_T*, i64 }
%struct.VkIndirectCommandsLayoutCreateInfoNV = type { i32, i8*, i32, i32, i32, %struct.VkIndirectCommandsLayoutTokenNV*, i32, i32* }
%struct.VkIndirectCommandsLayoutTokenNV = type { i32, i8*, i32, i32, i32, i32, i32, %struct.VkPipelineLayout_T*, i32, i32, i32, i32, i32, i32*, i32* }
%struct.VkPrivateDataSlotCreateInfoEXT = type { i32, i8*, i32 }
%struct.VkPrivateDataSlotEXT_T = type opaque
%struct.VkVertexInputBindingDescription2EXT = type { i32, i8*, i32, i32, i32, i32 }
%struct.VkVertexInputAttributeDescription2EXT = type { i32, i8*, i32, i32, i32, i32 }
%struct.VkAccelerationStructureCreateInfoKHR = type { i32, i8*, i32, %struct.VkBuffer_T*, i64, i64, i32, i64 }
%struct.VkAccelerationStructureKHR_T = type opaque
%struct.VkAccelerationStructureBuildGeometryInfoKHR = type { i32, i8*, i32, i32, i32, %struct.VkAccelerationStructureKHR_T*, %struct.VkAccelerationStructureKHR_T*, i32, %struct.VkAccelerationStructureGeometryKHR*, %struct.VkAccelerationStructureGeometryKHR**, %union.VkDeviceOrHostAddressKHR }
%struct.VkAccelerationStructureGeometryKHR = type { i32, i8*, i32, %union.VkAccelerationStructureGeometryDataKHR, i32 }
%union.VkAccelerationStructureGeometryDataKHR = type { %struct.VkAccelerationStructureGeometryTrianglesDataKHR }
%struct.VkAccelerationStructureGeometryTrianglesDataKHR = type { i32, i8*, i32, %union.VkDeviceOrHostAddressConstKHR, i64, i32, i32, %union.VkDeviceOrHostAddressConstKHR, %union.VkDeviceOrHostAddressConstKHR }
%union.VkDeviceOrHostAddressConstKHR = type { i64 }
%union.VkDeviceOrHostAddressKHR = type { i64 }
%struct.VkAccelerationStructureBuildRangeInfoKHR = type { i32, i32, i32, i32 }
%struct.VkCopyAccelerationStructureInfoKHR = type { i32, i8*, %struct.VkAccelerationStructureKHR_T*, %struct.VkAccelerationStructureKHR_T*, i32 }
%struct.VkCopyAccelerationStructureToMemoryInfoKHR = type { i32, i8*, %struct.VkAccelerationStructureKHR_T*, %union.VkDeviceOrHostAddressKHR, i32 }
%struct.VkCopyMemoryToAccelerationStructureInfoKHR = type { i32, i8*, %union.VkDeviceOrHostAddressConstKHR, %struct.VkAccelerationStructureKHR_T*, i32 }
%struct.VkAccelerationStructureDeviceAddressInfoKHR = type { i32, i8*, %struct.VkAccelerationStructureKHR_T* }
%struct.VkAccelerationStructureVersionInfoKHR = type { i32, i8*, i8* }
%struct.VkAccelerationStructureBuildSizesInfoKHR = type { i32, i8*, i64, i64, i64 }
%struct.VkStridedDeviceAddressRegionKHR = type { i64, i64, i64 }
%struct.VkRayTracingPipelineCreateInfoKHR = type { i32, i8*, i32, i32, %struct.VkPipelineShaderStageCreateInfo*, i32, %struct.VkRayTracingShaderGroupCreateInfoKHR*, i32, %struct.VkPipelineLibraryCreateInfoKHR*, %struct.VkRayTracingPipelineInterfaceCreateInfoKHR*, %struct.VkPipelineDynamicStateCreateInfo*, %struct.VkPipelineLayout_T*, %struct.VkPipeline_T*, i32 }
%struct.VkRayTracingShaderGroupCreateInfoKHR = type { i32, i8*, i32, i32, i32, i32, i32, i8* }
%struct.VkPipelineLibraryCreateInfoKHR = type { i32, i8*, i32, %struct.VkPipeline_T** }
%struct.VkRayTracingPipelineInterfaceCreateInfoKHR = type { i32, i8*, i32, i32 }
%struct.loader_dev_ext_dispatch_table = type { [250 x i32 (%struct.VkDevice_T*)*] }
%struct.anon.0 = type { i8, i8, i8, i8, i8, i8 }
%struct.loader_icd_term_dispatch = type { i32 (%struct.VkInstanceCreateInfo*, %struct.VkAllocationCallbacks*, %struct.VkInstance_T**)*, void (%struct.VkInstance_T*, %struct.VkAllocationCallbacks*)*, i32 (%struct.VkInstance_T*, i32*, %struct.VkPhysicalDevice_T**)*, void (%struct.VkPhysicalDevice_T*, %struct.VkPhysicalDeviceFeatures*)*, void (%struct.VkPhysicalDevice_T*, i32, %struct.VkFormatProperties*)*, i32 (%struct.VkPhysicalDevice_T*, i32, i32, i32, i32, i32, %struct.VkImageFormatProperties*)*, void (%struct.VkPhysicalDevice_T*, %struct.VkPhysicalDeviceProperties*)*, void (%struct.VkPhysicalDevice_T*, i32*, %struct.VkQueueFamilyProperties*)*, void (%struct.VkPhysicalDevice_T*, %struct.VkPhysicalDeviceMemoryProperties*)*, void ()* (%struct.VkDevice_T*, i8*)*, i32 (%struct.VkPhysicalDevice_T*, %struct.VkDeviceCreateInfo*, %struct.VkAllocationCallbacks*, %struct.VkDevice_T**)*, i32 (i8*, i32*, %struct.VkExtensionProperties*)*, i32 (%struct.VkPhysicalDevice_T*, i8*, i32*, %struct.VkExtensionProperties*)*, i32 (i32*, %struct.VkLayerProperties*)*, void (%struct.VkPhysicalDevice_T*, i32, i32, i32, i32, i32, i32*, %struct.VkSparseImageFormatProperties*)*, i32 (i32*)*, i32 (%struct.VkInstance_T*, i32*, %struct.VkPhysicalDeviceGroupProperties*)*, void (%struct.VkPhysicalDevice_T*, %struct.VkPhysicalDeviceFeatures2*)*, void (%struct.VkPhysicalDevice_T*, %struct.VkPhysicalDeviceProperties2*)*, void (%struct.VkPhysicalDevice_T*, i32, %struct.VkFormatProperties2*)*, i32 (%struct.VkPhysicalDevice_T*, %struct.VkPhysicalDeviceImageFormatInfo2*, %struct.VkImageFormatProperties2*)*, void (%struct.VkPhysicalDevice_T*, i32*, %struct.VkQueueFamilyProperties2*)*, void (%struct.VkPhysicalDevice_T*, %struct.VkPhysicalDeviceMemoryProperties2*)*, void (%struct.VkPhysicalDevice_T*, %struct.VkPhysicalDeviceSparseImageFormatInfo2*, i32*, %struct.VkSparseImageFormatProperties2*)*, void (%struct.VkPhysicalDevice_T*, %struct.VkPhysicalDeviceExternalBufferInfo*, %struct.VkExternalBufferProperties*)*, void (%struct.VkPhysicalDevice_T*, %struct.VkPhysicalDeviceExternalFenceInfo*, %struct.VkExternalFenceProperties*)*, void (%struct.VkPhysicalDevice_T*, %struct.VkPhysicalDeviceExternalSemaphoreInfo*, %struct.VkExternalSemaphoreProperties*)*, void (%struct.VkInstance_T*, %struct.VkSurfaceKHR_T*, %struct.VkAllocationCallbacks*)*, i32 (%struct.VkPhysicalDevice_T*, i32, %struct.VkSurfaceKHR_T*, i32*)*, i32 (%struct.VkPhysicalDevice_T*, %struct.VkSurfaceKHR_T*, %struct.VkSurfaceCapabilitiesKHR*)*, i32 (%struct.VkPhysicalDevice_T*, %struct.VkSurfaceKHR_T*, i32*, %struct.VkSurfaceFormatKHR*)*, i32 (%struct.VkPhysicalDevice_T*, %struct.VkSurfaceKHR_T*, i32*, i32*)*, i32 (%struct.VkDevice_T*, %struct.VkSwapchainCreateInfoKHR*, %struct.VkAllocationCallbacks*, %struct.VkSwapchainKHR_T**)*, i32 (%struct.VkDevice_T*, %struct.VkSurfaceKHR_T*, i32*)*, i32 (%struct.VkPhysicalDevice_T*, %struct.VkSurfaceKHR_T*, i32*, %struct.VkRect2D*)*, i32 (%struct.VkPhysicalDevice_T*, i32*, %struct.VkDisplayPropertiesKHR*)*, i32 (%struct.VkPhysicalDevice_T*, i32*, %struct.VkDisplayPlanePropertiesKHR*)*, i32 (%struct.VkPhysicalDevice_T*, i32, i32*, %struct.VkDisplayKHR_T**)*, i32 (%struct.VkPhysicalDevice_T*, %struct.VkDisplayKHR_T*, i32*, %struct.VkDisplayModePropertiesKHR*)*, i32 (%struct.VkPhysicalDevice_T*, %struct.VkDisplayKHR_T*, %struct.VkDisplayModeCreateInfoKHR*, %struct.VkAllocationCallbacks*, %struct.VkDisplayModeKHR_T**)*, i32 (%struct.VkPhysicalDevice_T*, %struct.VkDisplayModeKHR_T*, i32, %struct.VkDisplayPlaneCapabilitiesKHR*)*, i32 (%struct.VkInstance_T*, %struct.VkDisplaySurfaceCreateInfoKHR*, %struct.VkAllocationCallbacks*, %struct.VkSurfaceKHR_T**)*, i32 (%struct.VkDevice_T*, i32, %struct.VkSwapchainCreateInfoKHR*, %struct.VkAllocationCallbacks*, %struct.VkSwapchainKHR_T**)*, i32 (%struct.VkInstance_T*, %struct.VkXcbSurfaceCreateInfoKHR*, %struct.VkAllocationCallbacks*, %struct.VkSurfaceKHR_T**)*, i32 (%struct.VkPhysicalDevice_T*, i32, %struct.xcb_connection_t*, i32)*, i32 (%struct.VkPhysicalDevice_T*, %struct.VkVideoProfileKHR*, %struct.VkVideoCapabilitiesKHR*)*, i32 (%struct.VkPhysicalDevice_T*, %struct.VkPhysicalDeviceVideoFormatInfoKHR*, i32*, %struct.VkVideoFormatPropertiesKHR*)*, void (%struct.VkPhysicalDevice_T*, %struct.VkPhysicalDeviceFeatures2*)*, void (%struct.VkPhysicalDevice_T*, %struct.VkPhysicalDeviceProperties2*)*, void (%struct.VkPhysicalDevice_T*, i32, %struct.VkFormatProperties2*)*, i32 (%struct.VkPhysicalDevice_T*, %struct.VkPhysicalDeviceImageFormatInfo2*, %struct.VkImageFormatProperties2*)*, void (%struct.VkPhysicalDevice_T*, i32*, %struct.VkQueueFamilyProperties2*)*, void (%struct.VkPhysicalDevice_T*, %struct.VkPhysicalDeviceMemoryProperties2*)*, void (%struct.VkPhysicalDevice_T*, %struct.VkPhysicalDeviceSparseImageFormatInfo2*, i32*, %struct.VkSparseImageFormatProperties2*)*, i32 (%struct.VkInstance_T*, i32*, %struct.VkPhysicalDeviceGroupProperties*)*, void (%struct.VkPhysicalDevice_T*, %struct.VkPhysicalDeviceExternalBufferInfo*, %struct.VkExternalBufferProperties*)*, void (%struct.VkPhysicalDevice_T*, %struct.VkPhysicalDeviceExternalSemaphoreInfo*, %struct.VkExternalSemaphoreProperties*)*, void (%struct.VkPhysicalDevice_T*, %struct.VkPhysicalDeviceExternalFenceInfo*, %struct.VkExternalFenceProperties*)*, i32 (%struct.VkPhysicalDevice_T*, i32, i32*, %struct.VkPerformanceCounterKHR*, %struct.VkPerformanceCounterDescriptionKHR*)*, void (%struct.VkPhysicalDevice_T*, %struct.VkQueryPoolPerformanceCreateInfoKHR*, i32*)*, i32 (%struct.VkPhysicalDevice_T*, %struct.VkPhysicalDeviceSurfaceInfo2KHR*, %struct.VkSurfaceCapabilities2KHR*)*, i32 (%struct.VkPhysicalDevice_T*, %struct.VkPhysicalDeviceSurfaceInfo2KHR*, i32*, %struct.VkSurfaceFormat2KHR*)*, i32 (%struct.VkPhysicalDevice_T*, i32*, %struct.VkDisplayProperties2KHR*)*, i32 (%struct.VkPhysicalDevice_T*, i32*, %struct.VkDisplayPlaneProperties2KHR*)*, i32 (%struct.VkPhysicalDevice_T*, %struct.VkDisplayKHR_T*, i32*, %struct.VkDisplayModeProperties2KHR*)*, i32 (%struct.VkPhysicalDevice_T*, %struct.VkDisplayPlaneInfo2KHR*, %struct.VkDisplayPlaneCapabilities2KHR*)*, i32 (%struct.VkPhysicalDevice_T*, i32*, %struct.VkPhysicalDeviceFragmentShadingRateKHR*)*, i32 (%struct.VkInstance_T*, %struct.VkDebugReportCallbackCreateInfoEXT*, %struct.VkAllocationCallbacks*, %struct.VkDebugReportCallbackEXT_T**)*, void (%struct.VkInstance_T*, %struct.VkDebugReportCallbackEXT_T*, %struct.VkAllocationCallbacks*)*, void (%struct.VkInstance_T*, i32, i32, i64, i64, i32, i8*, i8*)*, i32 (%struct.VkDevice_T*, %struct.VkDebugMarkerObjectTagInfoEXT*)*, i32 (%struct.VkDevice_T*, %struct.VkDebugMarkerObjectNameInfoEXT*)*, i32 (%struct.VkPhysicalDevice_T*, i32, i32, i32, i32, i32, i32, %struct.VkExternalImageFormatPropertiesNV*)*, i32 (%struct.VkPhysicalDevice_T*, %struct.VkDisplayKHR_T*)*, i32 (%struct.VkPhysicalDevice_T*, %struct.VkSurfaceKHR_T*, %struct.VkSurfaceCapabilities2EXT*)*, i32 (%struct.VkDevice_T*, %struct.VkDebugUtilsObjectNameInfoEXT*)*, i32 (%struct.VkDevice_T*, %struct.VkDebugUtilsObjectTagInfoEXT*)*, void (%struct.VkQueue_T*, %struct.VkDebugUtilsLabelEXT*)*, void (%struct.VkQueue_T*)*, void (%struct.VkQueue_T*, %struct.VkDebugUtilsLabelEXT*)*, void (%struct.VkCommandBuffer_T*, %struct.VkDebugUtilsLabelEXT*)*, void (%struct.VkCommandBuffer_T*)*, void (%struct.VkCommandBuffer_T*, %struct.VkDebugUtilsLabelEXT*)*, i32 (%struct.VkInstance_T*, %struct.VkDebugUtilsMessengerCreateInfoEXT*, %struct.VkAllocationCallbacks*, %struct.VkDebugUtilsMessengerEXT_T**)*, void (%struct.VkInstance_T*, %struct.VkDebugUtilsMessengerEXT_T*, %struct.VkAllocationCallbacks*)*, void (%struct.VkInstance_T*, i32, i32, %struct.VkDebugUtilsMessengerCallbackDataEXT*)*, void (%struct.VkPhysicalDevice_T*, i32, %struct.VkMultisamplePropertiesEXT*)*, i32 (%struct.VkPhysicalDevice_T*, i32*, i32*)*, i32 (%struct.VkPhysicalDevice_T*, i32*, %struct.VkPhysicalDeviceToolPropertiesEXT*)*, i32 (%struct.VkPhysicalDevice_T*, i32*, %struct.VkCooperativeMatrixPropertiesNV*)*, i32 (%struct.VkPhysicalDevice_T*, i32*, %struct.VkFramebufferMixedSamplesCombinationNV*)*, i32 (%struct.VkInstance_T*, %struct.VkHeadlessSurfaceCreateInfoEXT*, %struct.VkAllocationCallbacks*, %struct.VkSurfaceKHR_T**)* }
%struct.loader_icd_tramp_list = type { i64, i32, %struct.loader_scanned_icd* }
%struct.loader_dispatch_hash_entry = type { i8*, %struct.loader_dispatch_hash_list }
%struct.loader_dispatch_hash_list = type { i64, i32, i32* }
%struct.loader_msg_callback_map_entry = type { %struct.VkDebugReportCallbackEXT_T*, %struct.VkDebugReportCallbackEXT_T* }
%struct.loader_layer_list = type { i64, i32, %struct.loader_layer_properties* }
%struct.loader_layer_properties = type { %struct.VkLayerProperties, i32, i32, [1024 x i8], i8*, %struct.loader_layer_functions, %struct.loader_extension_list, %struct.loader_device_extension_list, %struct.loader_name_value, %struct.loader_name_value, i32, [1024 x i8]*, %struct.anon, i32, [1024 x i8]*, i8, i8, %struct.loader_override_expiration, i8, i32, [1024 x i8]*, i32, [1024 x i8]* }
%struct.loader_layer_functions = type { [1024 x i8], [1024 x i8], [1024 x i8], i32 (%struct.VkNegotiateLayerInterface*)*, void ()* (%struct.VkInstance_T*, i8*)*, void ()* (%struct.VkDevice_T*, i8*)*, void ()* (%struct.VkInstance_T*, i8*)* }
%struct.VkNegotiateLayerInterface = type { i32, i8*, i32, void ()* (%struct.VkInstance_T*, i8*)*, void ()* (%struct.VkDevice_T*, i8*)*, void ()* (%struct.VkInstance_T*, i8*)* }
%struct.loader_device_extension_list = type { i64, i32, %struct.loader_dev_ext_props* }
%struct.loader_dev_ext_props = type { %struct.VkExtensionProperties, i32, i8** }
%struct.loader_name_value = type { [1024 x i8], [1024 x i8] }
%struct.anon = type { [1024 x i8], [1024 x i8], [1024 x i8] }
%struct.loader_override_expiration = type { i16, i8, i8, i8, i8 }
%struct.VkInstance_T = type opaque
%struct.loader_extension_list = type { i64, i32, %struct.VkExtensionProperties* }
%union.loader_instance_extension_enables = type { [4 x i64] }
%struct.VkLayerDbgFunctionNode_ = type { i8, %union.anon, i8*, %struct.VkLayerDbgFunctionNode_* }
%union.anon = type { %struct.VkDebugReportContent }
%struct.VkDebugReportContent = type { %struct.VkDebugReportCallbackEXT_T*, i32 (i32, i32, i64, i64, i32, i8*, i8*, i8*)*, i32 }
%struct.VkDebugReportCallbackCreateInfoEXT = type { i32, i8*, i32, i32 (i32, i32, i64, i64, i32, i8*, i8*, i8*)*, i8* }
%struct.VkDebugUtilsMessengerCreateInfoEXT = type { i32, i8*, i32, i32, i32, i32 (i32, i32, %struct.VkDebugUtilsMessengerCallbackDataEXT*, i8*)*, i8* }
%struct.VkAllocationCallbacks = type { i8*, i8* (i8*, i64, i64, i32)*, i8* (i8*, i8*, i64, i64, i32)*, void (i8*, i8*)*, void (i8*, i64, i32, i32)*, void (i8*, i64, i32, i32)* }
%struct.VkChainHeader = type { i32, i32, i32 }
%struct.VkEnumerateInstanceExtensionPropertiesChain = type { %struct.VkChainHeader, i32 (%struct.VkEnumerateInstanceExtensionPropertiesChain*, i8*, i32*, %struct.VkExtensionProperties*)*, %struct.VkEnumerateInstanceExtensionPropertiesChain* }
%struct.VkEnumerateInstanceLayerPropertiesChain = type { %struct.VkChainHeader, i32 (%struct.VkEnumerateInstanceLayerPropertiesChain*, i32*, %struct.VkLayerProperties*)*, %struct.VkEnumerateInstanceLayerPropertiesChain* }
%struct.VkEnumerateInstanceVersionChain = type { %struct.VkChainHeader, i32 (%struct.VkEnumerateInstanceVersionChain*, i32*)*, %struct.VkEnumerateInstanceVersionChain* }
%union.pthread_mutex_t = type { %struct.__pthread_mutex_s }
%struct.__pthread_mutex_s = type { i32, i32, i32, i32, i32, i16, i16, %struct.__pthread_internal_list }
%struct.__pthread_internal_list = type { %struct.__pthread_internal_list*, %struct.__pthread_internal_list* }
%struct.loader_struct = type { %struct.loader_instance* }
%struct.loader_generic_list = type { i64, i32, i8* }

@.str = private unnamed_addr constant [13 x i8] c"CreateDevice\00", align 1
@tls_instance = external thread_local local_unnamed_addr global %struct.loader_instance*, align 8
@__const.vkEnumerateInstanceExtensionProperties.chain_tail = private unnamed_addr constant { %struct.VkChainHeader, [4 x i8], i32 (%struct.VkEnumerateInstanceExtensionPropertiesChain*, i8*, i32*, %struct.VkExtensionProperties*)*, %struct.VkEnumerateInstanceExtensionPropertiesChain* } { %struct.VkChainHeader { i32 1, i32 1, i32 32 }, [4 x i8] zeroinitializer, i32 (%struct.VkEnumerateInstanceExtensionPropertiesChain*, i8*, i32*, %struct.VkExtensionProperties*)* @terminator_EnumerateInstanceExtensionProperties, %struct.VkEnumerateInstanceExtensionPropertiesChain* null }, align 8
@.str.1 = private unnamed_addr constant [47 x i8] c"%s: Unable to load implicit layer library \22%s\22\00", align 1
@__FUNCTION__.vkEnumerateInstanceExtensionProperties = private unnamed_addr constant [39 x i8] c"vkEnumerateInstanceExtensionProperties\00", align 1
@.str.2 = private unnamed_addr constant [65 x i8] c"%s: Unable to resolve symbol \22%s\22 in implicit layer library \22%s\22\00", align 1
@__const.vkEnumerateInstanceLayerProperties.chain_tail = private unnamed_addr constant { %struct.VkChainHeader, [4 x i8], i32 (%struct.VkEnumerateInstanceLayerPropertiesChain*, i32*, %struct.VkLayerProperties*)*, %struct.VkEnumerateInstanceLayerPropertiesChain* } { %struct.VkChainHeader { i32 2, i32 1, i32 32 }, [4 x i8] zeroinitializer, i32 (%struct.VkEnumerateInstanceLayerPropertiesChain*, i32*, %struct.VkLayerProperties*)* @terminator_EnumerateInstanceLayerProperties, %struct.VkEnumerateInstanceLayerPropertiesChain* null }, align 8
@__FUNCTION__.vkEnumerateInstanceLayerProperties = private unnamed_addr constant [35 x i8] c"vkEnumerateInstanceLayerProperties\00", align 1
@__const.vkEnumerateInstanceVersion.chain_tail = private unnamed_addr constant { %struct.VkChainHeader, [4 x i8], i32 (%struct.VkEnumerateInstanceVersionChain*, i32*)*, %struct.VkEnumerateInstanceVersionChain* } { %struct.VkChainHeader { i32 3, i32 1, i32 32 }, [4 x i8] zeroinitializer, i32 (%struct.VkEnumerateInstanceVersionChain*, i32*)* @terminator_EnumerateInstanceVersion, %struct.VkEnumerateInstanceVersionChain* null }, align 8
@__FUNCTION__.vkEnumerateInstanceVersion = private unnamed_addr constant [27 x i8] c"vkEnumerateInstanceVersion\00", align 1
@loader_lock = external global %union.pthread_mutex_t, align 8
@.str.3 = private unnamed_addr constant [77 x i8] c"vkCreateInstance:  Failed to allocate Loader's full Instance dispatch table.\00", align 1
@instance_disp = external local_unnamed_addr constant %struct.VkLayerInstanceDispatchTable_, align 8
@loader = external local_unnamed_addr global %struct.loader_struct, align 8
@.str.4 = private unnamed_addr constant [90 x i8] c"vkEnumeratePhysicalDevices: Received NULL pointer for physical device count return value.\00", align 1
@.str.5 = private unnamed_addr constant [109 x i8] c"vkEnumeratePhysicalDevices: Trimming device count down by application request from %d to %d physical devices\00", align 1
@.str.6 = private unnamed_addr constant [138 x i8] c"setupLoaderTrampPhysDevGroups:  Failed during dispatch call of 'EnumeratePhysicalDeviceGroupsKHR' to lower layers or loader to get count.\00", align 1
@.str.7 = private unnamed_addr constant [94 x i8] c"setupLoaderTrampPhysDevGroups:  Failed to allocate new physical device group array of size %d\00", align 1
@.str.10 = private unnamed_addr constant [160 x i8] c"setupLoaderTrampPhysDevGroups:  Failed to find GPU %d in group %d returned by 'EnumeratePhysicalDeviceGroupsKHR' in list returned by 'EnumeratePhysicalDevices'\00", align 1
@.str.11 = private unnamed_addr constant [94 x i8] c"setupLoaderTrampPhysDevGroups:  Failed to allocate physical device group trampoline object %d\00", align 1
@.str.12 = private unnamed_addr constant [104 x i8] c"vkEnumeratePhysicalDeviceGroupsKHR: Received NULL pointer for physical device group count return value.\00", align 1
@.str.13 = private unnamed_addr constant [129 x i8] c"vkEnumeratePhysicalDeviceGroupsKHR: Trimming device group count down by application request from %d to %d physical device groups\00", align 1
@.str.14 = private unnamed_addr constant [15 x i8] c"CreateInstance\00", align 1
@.str.15 = private unnamed_addr constant [37 x i8] c"EnumerateInstanceExtensionProperties\00", align 1
@.str.16 = private unnamed_addr constant [33 x i8] c"EnumerateInstanceLayerProperties\00", align 1
@.str.17 = private unnamed_addr constant [25 x i8] c"EnumerateInstanceVersion\00", align 1
@.str.18 = private unnamed_addr constant [20 x i8] c"GetInstanceProcAddr\00", align 1
@.str.19 = private unnamed_addr constant [22 x i8] c"vkGetInstanceProcAddr\00", align 1
@.str.20 = private unnamed_addr constant [18 x i8] c"vkDestroyInstance\00", align 1
@.str.21 = private unnamed_addr constant [27 x i8] c"vkEnumeratePhysicalDevices\00", align 1
@.str.22 = private unnamed_addr constant [28 x i8] c"vkGetPhysicalDeviceFeatures\00", align 1
@.str.23 = private unnamed_addr constant [36 x i8] c"vkGetPhysicalDeviceFormatProperties\00", align 1
@.str.24 = private unnamed_addr constant [41 x i8] c"vkGetPhysicalDeviceImageFormatProperties\00", align 1
@.str.25 = private unnamed_addr constant [47 x i8] c"vkGetPhysicalDeviceSparseImageFormatProperties\00", align 1
@.str.26 = private unnamed_addr constant [30 x i8] c"vkGetPhysicalDeviceProperties\00", align 1
@.str.27 = private unnamed_addr constant [41 x i8] c"vkGetPhysicalDeviceQueueFamilyProperties\00", align 1
@.str.28 = private unnamed_addr constant [36 x i8] c"vkGetPhysicalDeviceMemoryProperties\00", align 1
@.str.29 = private unnamed_addr constant [33 x i8] c"vkEnumerateDeviceLayerProperties\00", align 1
@.str.30 = private unnamed_addr constant [37 x i8] c"vkEnumerateDeviceExtensionProperties\00", align 1
@.str.31 = private unnamed_addr constant [15 x i8] c"vkCreateDevice\00", align 1
@.str.32 = private unnamed_addr constant [20 x i8] c"vkGetDeviceProcAddr\00", align 1
@.str.33 = private unnamed_addr constant [16 x i8] c"vkDestroyDevice\00", align 1
@.str.34 = private unnamed_addr constant [17 x i8] c"vkGetDeviceQueue\00", align 1
@.str.35 = private unnamed_addr constant [14 x i8] c"vkQueueSubmit\00", align 1
@.str.36 = private unnamed_addr constant [16 x i8] c"vkQueueWaitIdle\00", align 1
@.str.37 = private unnamed_addr constant [17 x i8] c"vkDeviceWaitIdle\00", align 1
@.str.38 = private unnamed_addr constant [17 x i8] c"vkAllocateMemory\00", align 1
@.str.39 = private unnamed_addr constant [13 x i8] c"vkFreeMemory\00", align 1
@.str.40 = private unnamed_addr constant [12 x i8] c"vkMapMemory\00", align 1
@.str.41 = private unnamed_addr constant [14 x i8] c"vkUnmapMemory\00", align 1
@.str.42 = private unnamed_addr constant [26 x i8] c"vkFlushMappedMemoryRanges\00", align 1
@.str.43 = private unnamed_addr constant [31 x i8] c"vkInvalidateMappedMemoryRanges\00", align 1
@.str.44 = private unnamed_addr constant [28 x i8] c"vkGetDeviceMemoryCommitment\00", align 1
@.str.45 = private unnamed_addr constant [35 x i8] c"vkGetImageSparseMemoryRequirements\00", align 1
@.str.46 = private unnamed_addr constant [29 x i8] c"vkGetImageMemoryRequirements\00", align 1
@.str.47 = private unnamed_addr constant [30 x i8] c"vkGetBufferMemoryRequirements\00", align 1
@.str.48 = private unnamed_addr constant [18 x i8] c"vkBindImageMemory\00", align 1
@.str.49 = private unnamed_addr constant [19 x i8] c"vkBindBufferMemory\00", align 1
@.str.50 = private unnamed_addr constant [18 x i8] c"vkQueueBindSparse\00", align 1
@.str.51 = private unnamed_addr constant [14 x i8] c"vkCreateFence\00", align 1
@.str.52 = private unnamed_addr constant [15 x i8] c"vkDestroyFence\00", align 1
@.str.53 = private unnamed_addr constant [17 x i8] c"vkGetFenceStatus\00", align 1
@.str.54 = private unnamed_addr constant [14 x i8] c"vkResetFences\00", align 1
@.str.55 = private unnamed_addr constant [16 x i8] c"vkWaitForFences\00", align 1
@.str.56 = private unnamed_addr constant [18 x i8] c"vkCreateSemaphore\00", align 1
@.str.57 = private unnamed_addr constant [19 x i8] c"vkDestroySemaphore\00", align 1
@.str.58 = private unnamed_addr constant [14 x i8] c"vkCreateEvent\00", align 1
@.str.59 = private unnamed_addr constant [15 x i8] c"vkDestroyEvent\00", align 1
@.str.60 = private unnamed_addr constant [17 x i8] c"vkGetEventStatus\00", align 1
@.str.61 = private unnamed_addr constant [11 x i8] c"vkSetEvent\00", align 1
@.str.62 = private unnamed_addr constant [13 x i8] c"vkResetEvent\00", align 1
@.str.63 = private unnamed_addr constant [18 x i8] c"vkCreateQueryPool\00", align 1
@.str.64 = private unnamed_addr constant [19 x i8] c"vkDestroyQueryPool\00", align 1
@.str.65 = private unnamed_addr constant [22 x i8] c"vkGetQueryPoolResults\00", align 1
@.str.66 = private unnamed_addr constant [15 x i8] c"vkCreateBuffer\00", align 1
@.str.67 = private unnamed_addr constant [16 x i8] c"vkDestroyBuffer\00", align 1
@.str.68 = private unnamed_addr constant [19 x i8] c"vkCreateBufferView\00", align 1
@.str.69 = private unnamed_addr constant [20 x i8] c"vkDestroyBufferView\00", align 1
@.str.70 = private unnamed_addr constant [14 x i8] c"vkCreateImage\00", align 1
@.str.71 = private unnamed_addr constant [15 x i8] c"vkDestroyImage\00", align 1
@.str.72 = private unnamed_addr constant [28 x i8] c"vkGetImageSubresourceLayout\00", align 1
@.str.73 = private unnamed_addr constant [18 x i8] c"vkCreateImageView\00", align 1
@.str.74 = private unnamed_addr constant [19 x i8] c"vkDestroyImageView\00", align 1
@.str.75 = private unnamed_addr constant [21 x i8] c"vkCreateShaderModule\00", align 1
@.str.76 = private unnamed_addr constant [22 x i8] c"vkDestroyShaderModule\00", align 1
@.str.77 = private unnamed_addr constant [22 x i8] c"vkCreatePipelineCache\00", align 1
@.str.78 = private unnamed_addr constant [23 x i8] c"vkDestroyPipelineCache\00", align 1
@.str.79 = private unnamed_addr constant [23 x i8] c"vkGetPipelineCacheData\00", align 1
@.str.80 = private unnamed_addr constant [22 x i8] c"vkMergePipelineCaches\00", align 1
@.str.81 = private unnamed_addr constant [26 x i8] c"vkCreateGraphicsPipelines\00", align 1
@.str.82 = private unnamed_addr constant [25 x i8] c"vkCreateComputePipelines\00", align 1
@.str.83 = private unnamed_addr constant [18 x i8] c"vkDestroyPipeline\00", align 1
@.str.84 = private unnamed_addr constant [23 x i8] c"vkCreatePipelineLayout\00", align 1
@.str.85 = private unnamed_addr constant [24 x i8] c"vkDestroyPipelineLayout\00", align 1
@.str.86 = private unnamed_addr constant [16 x i8] c"vkCreateSampler\00", align 1
@.str.87 = private unnamed_addr constant [17 x i8] c"vkDestroySampler\00", align 1
@.str.88 = private unnamed_addr constant [28 x i8] c"vkCreateDescriptorSetLayout\00", align 1
@.str.89 = private unnamed_addr constant [29 x i8] c"vkDestroyDescriptorSetLayout\00", align 1
@.str.90 = private unnamed_addr constant [23 x i8] c"vkCreateDescriptorPool\00", align 1
@.str.91 = private unnamed_addr constant [24 x i8] c"vkDestroyDescriptorPool\00", align 1
@.str.92 = private unnamed_addr constant [22 x i8] c"vkResetDescriptorPool\00", align 1
@.str.93 = private unnamed_addr constant [25 x i8] c"vkAllocateDescriptorSets\00", align 1
@.str.94 = private unnamed_addr constant [21 x i8] c"vkFreeDescriptorSets\00", align 1
@.str.95 = private unnamed_addr constant [23 x i8] c"vkUpdateDescriptorSets\00", align 1
@.str.96 = private unnamed_addr constant [20 x i8] c"vkCreateFramebuffer\00", align 1
@.str.97 = private unnamed_addr constant [21 x i8] c"vkDestroyFramebuffer\00", align 1
@.str.98 = private unnamed_addr constant [19 x i8] c"vkCreateRenderPass\00", align 1
@.str.99 = private unnamed_addr constant [20 x i8] c"vkDestroyRenderPass\00", align 1
@.str.100 = private unnamed_addr constant [27 x i8] c"vkGetRenderAreaGranularity\00", align 1
@.str.101 = private unnamed_addr constant [20 x i8] c"vkCreateCommandPool\00", align 1
@.str.102 = private unnamed_addr constant [21 x i8] c"vkDestroyCommandPool\00", align 1
@.str.103 = private unnamed_addr constant [19 x i8] c"vkResetCommandPool\00", align 1
@.str.104 = private unnamed_addr constant [25 x i8] c"vkAllocateCommandBuffers\00", align 1
@.str.105 = private unnamed_addr constant [21 x i8] c"vkFreeCommandBuffers\00", align 1
@.str.106 = private unnamed_addr constant [21 x i8] c"vkBeginCommandBuffer\00", align 1
@.str.107 = private unnamed_addr constant [19 x i8] c"vkEndCommandBuffer\00", align 1
@.str.108 = private unnamed_addr constant [21 x i8] c"vkResetCommandBuffer\00", align 1
@.str.109 = private unnamed_addr constant [18 x i8] c"vkCmdBindPipeline\00", align 1
@.str.110 = private unnamed_addr constant [24 x i8] c"vkCmdBindDescriptorSets\00", align 1
@.str.111 = private unnamed_addr constant [23 x i8] c"vkCmdBindVertexBuffers\00", align 1
@.str.112 = private unnamed_addr constant [21 x i8] c"vkCmdBindIndexBuffer\00", align 1
@.str.113 = private unnamed_addr constant [17 x i8] c"vkCmdSetViewport\00", align 1
@.str.114 = private unnamed_addr constant [16 x i8] c"vkCmdSetScissor\00", align 1
@.str.115 = private unnamed_addr constant [18 x i8] c"vkCmdSetLineWidth\00", align 1
@.str.116 = private unnamed_addr constant [18 x i8] c"vkCmdSetDepthBias\00", align 1
@.str.117 = private unnamed_addr constant [23 x i8] c"vkCmdSetBlendConstants\00", align 1
@.str.118 = private unnamed_addr constant [20 x i8] c"vkCmdSetDepthBounds\00", align 1
@.str.119 = private unnamed_addr constant [27 x i8] c"vkCmdSetStencilCompareMask\00", align 1
@.str.120 = private unnamed_addr constant [25 x i8] c"vkCmdSetStencilWriteMask\00", align 1
@.str.121 = private unnamed_addr constant [25 x i8] c"vkCmdSetStencilReference\00", align 1
@.str.122 = private unnamed_addr constant [10 x i8] c"vkCmdDraw\00", align 1
@.str.123 = private unnamed_addr constant [17 x i8] c"vkCmdDrawIndexed\00", align 1
@.str.124 = private unnamed_addr constant [18 x i8] c"vkCmdDrawIndirect\00", align 1
@.str.125 = private unnamed_addr constant [25 x i8] c"vkCmdDrawIndexedIndirect\00", align 1
@.str.126 = private unnamed_addr constant [14 x i8] c"vkCmdDispatch\00", align 1
@.str.127 = private unnamed_addr constant [22 x i8] c"vkCmdDispatchIndirect\00", align 1
@.str.128 = private unnamed_addr constant [16 x i8] c"vkCmdCopyBuffer\00", align 1
@.str.129 = private unnamed_addr constant [15 x i8] c"vkCmdCopyImage\00", align 1
@.str.130 = private unnamed_addr constant [15 x i8] c"vkCmdBlitImage\00", align 1
@.str.131 = private unnamed_addr constant [23 x i8] c"vkCmdCopyBufferToImage\00", align 1
@.str.132 = private unnamed_addr constant [23 x i8] c"vkCmdCopyImageToBuffer\00", align 1
@.str.133 = private unnamed_addr constant [18 x i8] c"vkCmdUpdateBuffer\00", align 1
@.str.134 = private unnamed_addr constant [16 x i8] c"vkCmdFillBuffer\00", align 1
@.str.135 = private unnamed_addr constant [21 x i8] c"vkCmdClearColorImage\00", align 1
@.str.136 = private unnamed_addr constant [28 x i8] c"vkCmdClearDepthStencilImage\00", align 1
@.str.137 = private unnamed_addr constant [22 x i8] c"vkCmdClearAttachments\00", align 1
@.str.138 = private unnamed_addr constant [18 x i8] c"vkCmdResolveImage\00", align 1
@.str.139 = private unnamed_addr constant [14 x i8] c"vkCmdSetEvent\00", align 1
@.str.140 = private unnamed_addr constant [16 x i8] c"vkCmdResetEvent\00", align 1
@.str.141 = private unnamed_addr constant [16 x i8] c"vkCmdWaitEvents\00", align 1
@.str.142 = private unnamed_addr constant [21 x i8] c"vkCmdPipelineBarrier\00", align 1
@.str.143 = private unnamed_addr constant [16 x i8] c"vkCmdBeginQuery\00", align 1
@.str.144 = private unnamed_addr constant [14 x i8] c"vkCmdEndQuery\00", align 1
@.str.145 = private unnamed_addr constant [20 x i8] c"vkCmdResetQueryPool\00", align 1
@.str.146 = private unnamed_addr constant [20 x i8] c"vkCmdWriteTimestamp\00", align 1
@.str.147 = private unnamed_addr constant [26 x i8] c"vkCmdCopyQueryPoolResults\00", align 1
@.str.148 = private unnamed_addr constant [19 x i8] c"vkCmdPushConstants\00", align 1
@.str.149 = private unnamed_addr constant [21 x i8] c"vkCmdBeginRenderPass\00", align 1
@.str.150 = private unnamed_addr constant [17 x i8] c"vkCmdNextSubpass\00", align 1
@.str.151 = private unnamed_addr constant [19 x i8] c"vkCmdEndRenderPass\00", align 1
@.str.152 = private unnamed_addr constant [21 x i8] c"vkCmdExecuteCommands\00", align 1
@.str.153 = private unnamed_addr constant [32 x i8] c"vkEnumeratePhysicalDeviceGroups\00", align 1
@.str.154 = private unnamed_addr constant [29 x i8] c"vkGetPhysicalDeviceFeatures2\00", align 1
@.str.155 = private unnamed_addr constant [31 x i8] c"vkGetPhysicalDeviceProperties2\00", align 1
@.str.156 = private unnamed_addr constant [37 x i8] c"vkGetPhysicalDeviceFormatProperties2\00", align 1
@.str.157 = private unnamed_addr constant [42 x i8] c"vkGetPhysicalDeviceImageFormatProperties2\00", align 1
@.str.158 = private unnamed_addr constant [42 x i8] c"vkGetPhysicalDeviceQueueFamilyProperties2\00", align 1
@.str.159 = private unnamed_addr constant [37 x i8] c"vkGetPhysicalDeviceMemoryProperties2\00", align 1
@.str.160 = private unnamed_addr constant [48 x i8] c"vkGetPhysicalDeviceSparseImageFormatProperties2\00", align 1
@.str.161 = private unnamed_addr constant [44 x i8] c"vkGetPhysicalDeviceExternalBufferProperties\00", align 1
@.str.162 = private unnamed_addr constant [47 x i8] c"vkGetPhysicalDeviceExternalSemaphoreProperties\00", align 1
@.str.163 = private unnamed_addr constant [43 x i8] c"vkGetPhysicalDeviceExternalFenceProperties\00", align 1
@.str.164 = private unnamed_addr constant [20 x i8] c"vkBindBufferMemory2\00", align 1
@.str.165 = private unnamed_addr constant [19 x i8] c"vkBindImageMemory2\00", align 1
@.str.166 = private unnamed_addr constant [35 x i8] c"vkGetDeviceGroupPeerMemoryFeatures\00", align 1
@.str.167 = private unnamed_addr constant [19 x i8] c"vkCmdSetDeviceMask\00", align 1
@.str.168 = private unnamed_addr constant [18 x i8] c"vkCmdDispatchBase\00", align 1
@.str.169 = private unnamed_addr constant [30 x i8] c"vkGetImageMemoryRequirements2\00", align 1
@.str.170 = private unnamed_addr constant [18 x i8] c"vkTrimCommandPool\00", align 1
@.str.171 = private unnamed_addr constant [18 x i8] c"vkGetDeviceQueue2\00", align 1
@.str.172 = private unnamed_addr constant [31 x i8] c"vkCreateSamplerYcbcrConversion\00", align 1
@.str.173 = private unnamed_addr constant [32 x i8] c"vkDestroySamplerYcbcrConversion\00", align 1
@.str.174 = private unnamed_addr constant [32 x i8] c"vkGetDescriptorSetLayoutSupport\00", align 1
@.str.175 = private unnamed_addr constant [33 x i8] c"vkCreateDescriptorUpdateTemplate\00", align 1
@.str.176 = private unnamed_addr constant [34 x i8] c"vkDestroyDescriptorUpdateTemplate\00", align 1
@.str.177 = private unnamed_addr constant [34 x i8] c"vkUpdateDescriptorSetWithTemplate\00", align 1
@.str.178 = private unnamed_addr constant [36 x i8] c"vkGetImageSparseMemoryRequirements2\00", align 1
@.str.179 = private unnamed_addr constant [31 x i8] c"vkGetBufferMemoryRequirements2\00", align 1
@.str.180 = private unnamed_addr constant [20 x i8] c"vkCreateRenderPass2\00", align 1
@.str.181 = private unnamed_addr constant [22 x i8] c"vkCmdBeginRenderPass2\00", align 1
@.str.182 = private unnamed_addr constant [18 x i8] c"vkCmdNextSubpass2\00", align 1
@.str.183 = private unnamed_addr constant [20 x i8] c"vkCmdEndRenderPass2\00", align 1
@.str.184 = private unnamed_addr constant [23 x i8] c"vkCmdDrawIndirectCount\00", align 1
@.str.185 = private unnamed_addr constant [30 x i8] c"vkCmdDrawIndexedIndirectCount\00", align 1
@.str.186 = private unnamed_addr constant [27 x i8] c"vkGetSemaphoreCounterValue\00", align 1
@.str.187 = private unnamed_addr constant [17 x i8] c"vkWaitSemaphores\00", align 1
@.str.188 = private unnamed_addr constant [18 x i8] c"vkSignalSemaphore\00", align 1
@.str.189 = private unnamed_addr constant [25 x i8] c"vkGetBufferDeviceAddress\00", align 1
@.str.190 = private unnamed_addr constant [32 x i8] c"vkGetBufferOpaqueCaptureAddress\00", align 1
@.str.191 = private unnamed_addr constant [38 x i8] c"vkGetDeviceMemoryOpaqueCaptureAddress\00", align 1
@.str.192 = private unnamed_addr constant [17 x i8] c"vkResetQueryPool\00", align 1
@.str.193 = private unnamed_addr constant [18 x i8] c"GetDeviceProcAddr\00", align 1
@.str.194 = private unnamed_addr constant [14 x i8] c"DestroyDevice\00", align 1
@.str.195 = private unnamed_addr constant [15 x i8] c"GetDeviceQueue\00", align 1
@.str.196 = private unnamed_addr constant [16 x i8] c"GetDeviceQueue2\00", align 1
@.str.197 = private unnamed_addr constant [23 x i8] c"AllocateCommandBuffers\00", align 1

; Function Attrs: nounwind ssp uwtable
define void ()* @vkGetInstanceProcAddr(%struct.VkInstance_T*, i8*) #0 {
  %3 = alloca i8*, align 8
  %4 = icmp eq i8* %1, null
  br i1 %4, label %29, label %5

5:                                                ; preds = %2
  %6 = load i8, i8* %1, align 1
  %7 = icmp eq i8 %6, 118
  br i1 %7, label %8, label %29

8:                                                ; preds = %5
  %9 = getelementptr inbounds i8, i8* %1, i64 1
  %10 = load i8, i8* %9, align 1
  %11 = icmp eq i8 %10, 107
  br i1 %11, label %12, label %29

12:                                               ; preds = %8
  %13 = getelementptr inbounds i8, i8* %1, i64 2
  %14 = tail call i32 @strcmp(i8* %13, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.14, i64 0, i64 0)) #6
  %15 = icmp eq i32 %14, 0
  br i1 %15, label %34, label %16

16:                                               ; preds = %12
  %17 = tail call i32 @strcmp(i8* %13, i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.str.15, i64 0, i64 0)) #6
  %18 = icmp eq i32 %17, 0
  br i1 %18, label %34, label %19

19:                                               ; preds = %16
  %20 = tail call i32 @strcmp(i8* %13, i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str.16, i64 0, i64 0)) #6
  %21 = icmp eq i32 %20, 0
  br i1 %21, label %34, label %22

22:                                               ; preds = %19
  %23 = tail call i32 @strcmp(i8* %13, i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.17, i64 0, i64 0)) #6
  %24 = icmp eq i32 %23, 0
  br i1 %24, label %34, label %25

25:                                               ; preds = %22
  %26 = tail call i32 @strcmp(i8* %13, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.18, i64 0, i64 0)) #6
  %27 = icmp eq i32 %26, 0
  %28 = select i1 %27, i8* bitcast (void ()* (%struct.VkInstance_T*, i8*)* @vkGetInstanceProcAddr to i8*), i8* null
  br label %29

29:                                               ; preds = %2, %5, %8, %25
  %30 = phi i8* [ null, %8 ], [ null, %5 ], [ null, %2 ], [ %28, %25 ]
  %31 = icmp eq %struct.VkInstance_T* %0, null
  %32 = icmp ne i8* %30, null
  %33 = or i1 %31, %32
  br i1 %33, label %34, label %37

34:                                               ; preds = %22, %19, %16, %12, %29
  %35 = phi i8* [ %30, %29 ], [ bitcast (i32 (i32*)* @vkEnumerateInstanceVersion to i8*), %22 ], [ bitcast (i32 (i32*, %struct.VkLayerProperties*)* @vkEnumerateInstanceLayerProperties to i8*), %19 ], [ bitcast (i32 (i8*, i32*, %struct.VkExtensionProperties*)* @vkEnumerateInstanceExtensionProperties to i8*), %16 ], [ bitcast (i32 (%struct.VkInstanceCreateInfo*, %struct.VkAllocationCallbacks*, %struct.VkInstance_T**)* @vkCreateInstance to i8*), %12 ]
  %36 = bitcast i8* %35 to void ()*
  br label %586

37:                                               ; preds = %29
  %38 = tail call %struct.loader_instance* @loader_get_instance(%struct.VkInstance_T* nonnull %0) #7
  %39 = icmp eq %struct.loader_instance* %38, null
  br i1 %39, label %586, label %40

40:                                               ; preds = %37
  %41 = tail call i32 @strcmp(i8* %1, i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.19, i64 0, i64 0)) #6
  %42 = icmp eq i32 %41, 0
  br i1 %42, label %583, label %43

43:                                               ; preds = %40
  %44 = tail call i32 @strcmp(i8* %1, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.20, i64 0, i64 0)) #6
  %45 = icmp eq i32 %44, 0
  br i1 %45, label %583, label %46

46:                                               ; preds = %43
  %47 = tail call i32 @strcmp(i8* %1, i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.21, i64 0, i64 0)) #6
  %48 = icmp eq i32 %47, 0
  br i1 %48, label %583, label %49

49:                                               ; preds = %46
  %50 = tail call i32 @strcmp(i8* %1, i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.22, i64 0, i64 0)) #6
  %51 = icmp eq i32 %50, 0
  br i1 %51, label %583, label %52

52:                                               ; preds = %49
  %53 = tail call i32 @strcmp(i8* %1, i8* getelementptr inbounds ([36 x i8], [36 x i8]* @.str.23, i64 0, i64 0)) #6
  %54 = icmp eq i32 %53, 0
  br i1 %54, label %583, label %55

55:                                               ; preds = %52
  %56 = tail call i32 @strcmp(i8* %1, i8* getelementptr inbounds ([41 x i8], [41 x i8]* @.str.24, i64 0, i64 0)) #6
  %57 = icmp eq i32 %56, 0
  br i1 %57, label %583, label %58

58:                                               ; preds = %55
  %59 = tail call i32 @strcmp(i8* %1, i8* getelementptr inbounds ([47 x i8], [47 x i8]* @.str.25, i64 0, i64 0)) #6
  %60 = icmp eq i32 %59, 0
  br i1 %60, label %583, label %61

61:                                               ; preds = %58
  %62 = tail call i32 @strcmp(i8* %1, i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str.26, i64 0, i64 0)) #6
  %63 = icmp eq i32 %62, 0
  br i1 %63, label %583, label %64

64:                                               ; preds = %61
  %65 = tail call i32 @strcmp(i8* %1, i8* getelementptr inbounds ([41 x i8], [41 x i8]* @.str.27, i64 0, i64 0)) #6
  %66 = icmp eq i32 %65, 0
  br i1 %66, label %583, label %67

67:                                               ; preds = %64
  %68 = tail call i32 @strcmp(i8* %1, i8* getelementptr inbounds ([36 x i8], [36 x i8]* @.str.28, i64 0, i64 0)) #6
  %69 = icmp eq i32 %68, 0
  br i1 %69, label %583, label %70

70:                                               ; preds = %67
  %71 = tail call i32 @strcmp(i8* %1, i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str.29, i64 0, i64 0)) #6
  %72 = icmp eq i32 %71, 0
  br i1 %72, label %583, label %73

73:                                               ; preds = %70
  %74 = tail call i32 @strcmp(i8* %1, i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.str.30, i64 0, i64 0)) #6
  %75 = icmp eq i32 %74, 0
  br i1 %75, label %583, label %76

76:                                               ; preds = %73
  %77 = tail call i32 @strcmp(i8* %1, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.31, i64 0, i64 0)) #6
  %78 = icmp eq i32 %77, 0
  br i1 %78, label %583, label %79

79:                                               ; preds = %76
  %80 = tail call i32 @strcmp(i8* %1, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.32, i64 0, i64 0)) #6
  %81 = icmp eq i32 %80, 0
  br i1 %81, label %583, label %82

82:                                               ; preds = %79
  %83 = tail call i32 @strcmp(i8* %1, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.33, i64 0, i64 0)) #6
  %84 = icmp eq i32 %83, 0
  br i1 %84, label %583, label %85

85:                                               ; preds = %82
  %86 = tail call i32 @strcmp(i8* %1, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.34, i64 0, i64 0)) #6
  %87 = icmp eq i32 %86, 0
  br i1 %87, label %583, label %88

88:                                               ; preds = %85
  %89 = tail call i32 @strcmp(i8* %1, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.35, i64 0, i64 0)) #6
  %90 = icmp eq i32 %89, 0
  br i1 %90, label %583, label %91

91:                                               ; preds = %88
  %92 = tail call i32 @strcmp(i8* %1, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.36, i64 0, i64 0)) #6
  %93 = icmp eq i32 %92, 0
  br i1 %93, label %583, label %94

94:                                               ; preds = %91
  %95 = tail call i32 @strcmp(i8* %1, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.37, i64 0, i64 0)) #6
  %96 = icmp eq i32 %95, 0
  br i1 %96, label %583, label %97

97:                                               ; preds = %94
  %98 = tail call i32 @strcmp(i8* %1, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.38, i64 0, i64 0)) #6
  %99 = icmp eq i32 %98, 0
  br i1 %99, label %583, label %100

100:                                              ; preds = %97
  %101 = tail call i32 @strcmp(i8* %1, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.39, i64 0, i64 0)) #6
  %102 = icmp eq i32 %101, 0
  br i1 %102, label %583, label %103

103:                                              ; preds = %100
  %104 = tail call i32 @strcmp(i8* %1, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.40, i64 0, i64 0)) #6
  %105 = icmp eq i32 %104, 0
  br i1 %105, label %583, label %106

106:                                              ; preds = %103
  %107 = tail call i32 @strcmp(i8* %1, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.41, i64 0, i64 0)) #6
  %108 = icmp eq i32 %107, 0
  br i1 %108, label %583, label %109

109:                                              ; preds = %106
  %110 = tail call i32 @strcmp(i8* %1, i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.42, i64 0, i64 0)) #6
  %111 = icmp eq i32 %110, 0
  br i1 %111, label %583, label %112

112:                                              ; preds = %109
  %113 = tail call i32 @strcmp(i8* %1, i8* getelementptr inbounds ([31 x i8], [31 x i8]* @.str.43, i64 0, i64 0)) #6
  %114 = icmp eq i32 %113, 0
  br i1 %114, label %583, label %115

115:                                              ; preds = %112
  %116 = tail call i32 @strcmp(i8* %1, i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.44, i64 0, i64 0)) #6
  %117 = icmp eq i32 %116, 0
  br i1 %117, label %583, label %118

118:                                              ; preds = %115
  %119 = tail call i32 @strcmp(i8* %1, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.45, i64 0, i64 0)) #6
  %120 = icmp eq i32 %119, 0
  br i1 %120, label %583, label %121

121:                                              ; preds = %118
  %122 = tail call i32 @strcmp(i8* %1, i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.46, i64 0, i64 0)) #6
  %123 = icmp eq i32 %122, 0
  br i1 %123, label %583, label %124

124:                                              ; preds = %121
  %125 = tail call i32 @strcmp(i8* %1, i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str.47, i64 0, i64 0)) #6
  %126 = icmp eq i32 %125, 0
  br i1 %126, label %583, label %127

127:                                              ; preds = %124
  %128 = tail call i32 @strcmp(i8* %1, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.48, i64 0, i64 0)) #6
  %129 = icmp eq i32 %128, 0
  br i1 %129, label %583, label %130

130:                                              ; preds = %127
  %131 = tail call i32 @strcmp(i8* %1, i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.49, i64 0, i64 0)) #6
  %132 = icmp eq i32 %131, 0
  br i1 %132, label %583, label %133

133:                                              ; preds = %130
  %134 = tail call i32 @strcmp(i8* %1, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.50, i64 0, i64 0)) #6
  %135 = icmp eq i32 %134, 0
  br i1 %135, label %583, label %136

136:                                              ; preds = %133
  %137 = tail call i32 @strcmp(i8* %1, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.51, i64 0, i64 0)) #6
  %138 = icmp eq i32 %137, 0
  br i1 %138, label %583, label %139

139:                                              ; preds = %136
  %140 = tail call i32 @strcmp(i8* %1, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.52, i64 0, i64 0)) #6
  %141 = icmp eq i32 %140, 0
  br i1 %141, label %583, label %142

142:                                              ; preds = %139
  %143 = tail call i32 @strcmp(i8* %1, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.53, i64 0, i64 0)) #6
  %144 = icmp eq i32 %143, 0
  br i1 %144, label %583, label %145

145:                                              ; preds = %142
  %146 = tail call i32 @strcmp(i8* %1, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.54, i64 0, i64 0)) #6
  %147 = icmp eq i32 %146, 0
  br i1 %147, label %583, label %148

148:                                              ; preds = %145
  %149 = tail call i32 @strcmp(i8* %1, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.55, i64 0, i64 0)) #6
  %150 = icmp eq i32 %149, 0
  br i1 %150, label %583, label %151

151:                                              ; preds = %148
  %152 = tail call i32 @strcmp(i8* %1, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.56, i64 0, i64 0)) #6
  %153 = icmp eq i32 %152, 0
  br i1 %153, label %583, label %154

154:                                              ; preds = %151
  %155 = tail call i32 @strcmp(i8* %1, i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.57, i64 0, i64 0)) #6
  %156 = icmp eq i32 %155, 0
  br i1 %156, label %583, label %157

157:                                              ; preds = %154
  %158 = tail call i32 @strcmp(i8* %1, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.58, i64 0, i64 0)) #6
  %159 = icmp eq i32 %158, 0
  br i1 %159, label %583, label %160

160:                                              ; preds = %157
  %161 = tail call i32 @strcmp(i8* %1, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.59, i64 0, i64 0)) #6
  %162 = icmp eq i32 %161, 0
  br i1 %162, label %583, label %163

163:                                              ; preds = %160
  %164 = tail call i32 @strcmp(i8* %1, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.60, i64 0, i64 0)) #6
  %165 = icmp eq i32 %164, 0
  br i1 %165, label %583, label %166

166:                                              ; preds = %163
  %167 = tail call i32 @strcmp(i8* %1, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.61, i64 0, i64 0)) #6
  %168 = icmp eq i32 %167, 0
  br i1 %168, label %583, label %169

169:                                              ; preds = %166
  %170 = tail call i32 @strcmp(i8* %1, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.62, i64 0, i64 0)) #6
  %171 = icmp eq i32 %170, 0
  br i1 %171, label %583, label %172

172:                                              ; preds = %169
  %173 = tail call i32 @strcmp(i8* %1, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.63, i64 0, i64 0)) #6
  %174 = icmp eq i32 %173, 0
  br i1 %174, label %583, label %175

175:                                              ; preds = %172
  %176 = tail call i32 @strcmp(i8* %1, i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.64, i64 0, i64 0)) #6
  %177 = icmp eq i32 %176, 0
  br i1 %177, label %583, label %178

178:                                              ; preds = %175
  %179 = tail call i32 @strcmp(i8* %1, i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.65, i64 0, i64 0)) #6
  %180 = icmp eq i32 %179, 0
  br i1 %180, label %583, label %181

181:                                              ; preds = %178
  %182 = tail call i32 @strcmp(i8* %1, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.66, i64 0, i64 0)) #6
  %183 = icmp eq i32 %182, 0
  br i1 %183, label %583, label %184

184:                                              ; preds = %181
  %185 = tail call i32 @strcmp(i8* %1, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.67, i64 0, i64 0)) #6
  %186 = icmp eq i32 %185, 0
  br i1 %186, label %583, label %187

187:                                              ; preds = %184
  %188 = tail call i32 @strcmp(i8* %1, i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.68, i64 0, i64 0)) #6
  %189 = icmp eq i32 %188, 0
  br i1 %189, label %583, label %190

190:                                              ; preds = %187
  %191 = tail call i32 @strcmp(i8* %1, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.69, i64 0, i64 0)) #6
  %192 = icmp eq i32 %191, 0
  br i1 %192, label %583, label %193

193:                                              ; preds = %190
  %194 = tail call i32 @strcmp(i8* %1, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.70, i64 0, i64 0)) #6
  %195 = icmp eq i32 %194, 0
  br i1 %195, label %583, label %196

196:                                              ; preds = %193
  %197 = tail call i32 @strcmp(i8* %1, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.71, i64 0, i64 0)) #6
  %198 = icmp eq i32 %197, 0
  br i1 %198, label %583, label %199

199:                                              ; preds = %196
  %200 = tail call i32 @strcmp(i8* %1, i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.72, i64 0, i64 0)) #6
  %201 = icmp eq i32 %200, 0
  br i1 %201, label %583, label %202

202:                                              ; preds = %199
  %203 = tail call i32 @strcmp(i8* %1, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.73, i64 0, i64 0)) #6
  %204 = icmp eq i32 %203, 0
  br i1 %204, label %583, label %205

205:                                              ; preds = %202
  %206 = tail call i32 @strcmp(i8* %1, i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.74, i64 0, i64 0)) #6
  %207 = icmp eq i32 %206, 0
  br i1 %207, label %583, label %208

208:                                              ; preds = %205
  %209 = tail call i32 @strcmp(i8* %1, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.75, i64 0, i64 0)) #6
  %210 = icmp eq i32 %209, 0
  br i1 %210, label %583, label %211

211:                                              ; preds = %208
  %212 = tail call i32 @strcmp(i8* %1, i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.76, i64 0, i64 0)) #6
  %213 = icmp eq i32 %212, 0
  br i1 %213, label %583, label %214

214:                                              ; preds = %211
  %215 = tail call i32 @strcmp(i8* %1, i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.77, i64 0, i64 0)) #6
  %216 = icmp eq i32 %215, 0
  br i1 %216, label %583, label %217

217:                                              ; preds = %214
  %218 = tail call i32 @strcmp(i8* %1, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.78, i64 0, i64 0)) #6
  %219 = icmp eq i32 %218, 0
  br i1 %219, label %583, label %220

220:                                              ; preds = %217
  %221 = tail call i32 @strcmp(i8* %1, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.79, i64 0, i64 0)) #6
  %222 = icmp eq i32 %221, 0
  br i1 %222, label %583, label %223

223:                                              ; preds = %220
  %224 = tail call i32 @strcmp(i8* %1, i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.80, i64 0, i64 0)) #6
  %225 = icmp eq i32 %224, 0
  br i1 %225, label %583, label %226

226:                                              ; preds = %223
  %227 = tail call i32 @strcmp(i8* %1, i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.81, i64 0, i64 0)) #6
  %228 = icmp eq i32 %227, 0
  br i1 %228, label %583, label %229

229:                                              ; preds = %226
  %230 = tail call i32 @strcmp(i8* %1, i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.82, i64 0, i64 0)) #6
  %231 = icmp eq i32 %230, 0
  br i1 %231, label %583, label %232

232:                                              ; preds = %229
  %233 = tail call i32 @strcmp(i8* %1, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.83, i64 0, i64 0)) #6
  %234 = icmp eq i32 %233, 0
  br i1 %234, label %583, label %235

235:                                              ; preds = %232
  %236 = tail call i32 @strcmp(i8* %1, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.84, i64 0, i64 0)) #6
  %237 = icmp eq i32 %236, 0
  br i1 %237, label %583, label %238

238:                                              ; preds = %235
  %239 = tail call i32 @strcmp(i8* %1, i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.85, i64 0, i64 0)) #6
  %240 = icmp eq i32 %239, 0
  br i1 %240, label %583, label %241

241:                                              ; preds = %238
  %242 = tail call i32 @strcmp(i8* %1, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.86, i64 0, i64 0)) #6
  %243 = icmp eq i32 %242, 0
  br i1 %243, label %583, label %244

244:                                              ; preds = %241
  %245 = tail call i32 @strcmp(i8* %1, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.87, i64 0, i64 0)) #6
  %246 = icmp eq i32 %245, 0
  br i1 %246, label %583, label %247

247:                                              ; preds = %244
  %248 = tail call i32 @strcmp(i8* %1, i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.88, i64 0, i64 0)) #6
  %249 = icmp eq i32 %248, 0
  br i1 %249, label %583, label %250

250:                                              ; preds = %247
  %251 = tail call i32 @strcmp(i8* %1, i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.89, i64 0, i64 0)) #6
  %252 = icmp eq i32 %251, 0
  br i1 %252, label %583, label %253

253:                                              ; preds = %250
  %254 = tail call i32 @strcmp(i8* %1, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.90, i64 0, i64 0)) #6
  %255 = icmp eq i32 %254, 0
  br i1 %255, label %583, label %256

256:                                              ; preds = %253
  %257 = tail call i32 @strcmp(i8* %1, i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.91, i64 0, i64 0)) #6
  %258 = icmp eq i32 %257, 0
  br i1 %258, label %583, label %259

259:                                              ; preds = %256
  %260 = tail call i32 @strcmp(i8* %1, i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.92, i64 0, i64 0)) #6
  %261 = icmp eq i32 %260, 0
  br i1 %261, label %583, label %262

262:                                              ; preds = %259
  %263 = tail call i32 @strcmp(i8* %1, i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.93, i64 0, i64 0)) #6
  %264 = icmp eq i32 %263, 0
  br i1 %264, label %583, label %265

265:                                              ; preds = %262
  %266 = tail call i32 @strcmp(i8* %1, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.94, i64 0, i64 0)) #6
  %267 = icmp eq i32 %266, 0
  br i1 %267, label %583, label %268

268:                                              ; preds = %265
  %269 = tail call i32 @strcmp(i8* %1, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.95, i64 0, i64 0)) #6
  %270 = icmp eq i32 %269, 0
  br i1 %270, label %583, label %271

271:                                              ; preds = %268
  %272 = tail call i32 @strcmp(i8* %1, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.96, i64 0, i64 0)) #6
  %273 = icmp eq i32 %272, 0
  br i1 %273, label %583, label %274

274:                                              ; preds = %271
  %275 = tail call i32 @strcmp(i8* %1, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.97, i64 0, i64 0)) #6
  %276 = icmp eq i32 %275, 0
  br i1 %276, label %583, label %277

277:                                              ; preds = %274
  %278 = tail call i32 @strcmp(i8* %1, i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.98, i64 0, i64 0)) #6
  %279 = icmp eq i32 %278, 0
  br i1 %279, label %583, label %280

280:                                              ; preds = %277
  %281 = tail call i32 @strcmp(i8* %1, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.99, i64 0, i64 0)) #6
  %282 = icmp eq i32 %281, 0
  br i1 %282, label %583, label %283

283:                                              ; preds = %280
  %284 = tail call i32 @strcmp(i8* %1, i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.100, i64 0, i64 0)) #6
  %285 = icmp eq i32 %284, 0
  br i1 %285, label %583, label %286

286:                                              ; preds = %283
  %287 = tail call i32 @strcmp(i8* %1, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.101, i64 0, i64 0)) #6
  %288 = icmp eq i32 %287, 0
  br i1 %288, label %583, label %289

289:                                              ; preds = %286
  %290 = tail call i32 @strcmp(i8* %1, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.102, i64 0, i64 0)) #6
  %291 = icmp eq i32 %290, 0
  br i1 %291, label %583, label %292

292:                                              ; preds = %289
  %293 = tail call i32 @strcmp(i8* %1, i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.103, i64 0, i64 0)) #6
  %294 = icmp eq i32 %293, 0
  br i1 %294, label %583, label %295

295:                                              ; preds = %292
  %296 = tail call i32 @strcmp(i8* %1, i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.104, i64 0, i64 0)) #6
  %297 = icmp eq i32 %296, 0
  br i1 %297, label %583, label %298

298:                                              ; preds = %295
  %299 = tail call i32 @strcmp(i8* %1, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.105, i64 0, i64 0)) #6
  %300 = icmp eq i32 %299, 0
  br i1 %300, label %583, label %301

301:                                              ; preds = %298
  %302 = tail call i32 @strcmp(i8* %1, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.106, i64 0, i64 0)) #6
  %303 = icmp eq i32 %302, 0
  br i1 %303, label %583, label %304

304:                                              ; preds = %301
  %305 = tail call i32 @strcmp(i8* %1, i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.107, i64 0, i64 0)) #6
  %306 = icmp eq i32 %305, 0
  br i1 %306, label %583, label %307

307:                                              ; preds = %304
  %308 = tail call i32 @strcmp(i8* %1, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.108, i64 0, i64 0)) #6
  %309 = icmp eq i32 %308, 0
  br i1 %309, label %583, label %310

310:                                              ; preds = %307
  %311 = tail call i32 @strcmp(i8* %1, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.109, i64 0, i64 0)) #6
  %312 = icmp eq i32 %311, 0
  br i1 %312, label %583, label %313

313:                                              ; preds = %310
  %314 = tail call i32 @strcmp(i8* %1, i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.110, i64 0, i64 0)) #6
  %315 = icmp eq i32 %314, 0
  br i1 %315, label %583, label %316

316:                                              ; preds = %313
  %317 = tail call i32 @strcmp(i8* %1, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.111, i64 0, i64 0)) #6
  %318 = icmp eq i32 %317, 0
  br i1 %318, label %583, label %319

319:                                              ; preds = %316
  %320 = tail call i32 @strcmp(i8* %1, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.112, i64 0, i64 0)) #6
  %321 = icmp eq i32 %320, 0
  br i1 %321, label %583, label %322

322:                                              ; preds = %319
  %323 = tail call i32 @strcmp(i8* %1, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.113, i64 0, i64 0)) #6
  %324 = icmp eq i32 %323, 0
  br i1 %324, label %583, label %325

325:                                              ; preds = %322
  %326 = tail call i32 @strcmp(i8* %1, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.114, i64 0, i64 0)) #6
  %327 = icmp eq i32 %326, 0
  br i1 %327, label %583, label %328

328:                                              ; preds = %325
  %329 = tail call i32 @strcmp(i8* %1, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.115, i64 0, i64 0)) #6
  %330 = icmp eq i32 %329, 0
  br i1 %330, label %583, label %331

331:                                              ; preds = %328
  %332 = tail call i32 @strcmp(i8* %1, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.116, i64 0, i64 0)) #6
  %333 = icmp eq i32 %332, 0
  br i1 %333, label %583, label %334

334:                                              ; preds = %331
  %335 = tail call i32 @strcmp(i8* %1, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.117, i64 0, i64 0)) #6
  %336 = icmp eq i32 %335, 0
  br i1 %336, label %583, label %337

337:                                              ; preds = %334
  %338 = tail call i32 @strcmp(i8* %1, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.118, i64 0, i64 0)) #6
  %339 = icmp eq i32 %338, 0
  br i1 %339, label %583, label %340

340:                                              ; preds = %337
  %341 = tail call i32 @strcmp(i8* %1, i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.119, i64 0, i64 0)) #6
  %342 = icmp eq i32 %341, 0
  br i1 %342, label %583, label %343

343:                                              ; preds = %340
  %344 = tail call i32 @strcmp(i8* %1, i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.120, i64 0, i64 0)) #6
  %345 = icmp eq i32 %344, 0
  br i1 %345, label %583, label %346

346:                                              ; preds = %343
  %347 = tail call i32 @strcmp(i8* %1, i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.121, i64 0, i64 0)) #6
  %348 = icmp eq i32 %347, 0
  br i1 %348, label %583, label %349

349:                                              ; preds = %346
  %350 = tail call i32 @strcmp(i8* %1, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.122, i64 0, i64 0)) #6
  %351 = icmp eq i32 %350, 0
  br i1 %351, label %583, label %352

352:                                              ; preds = %349
  %353 = tail call i32 @strcmp(i8* %1, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.123, i64 0, i64 0)) #6
  %354 = icmp eq i32 %353, 0
  br i1 %354, label %583, label %355

355:                                              ; preds = %352
  %356 = tail call i32 @strcmp(i8* %1, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.124, i64 0, i64 0)) #6
  %357 = icmp eq i32 %356, 0
  br i1 %357, label %583, label %358

358:                                              ; preds = %355
  %359 = tail call i32 @strcmp(i8* %1, i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.125, i64 0, i64 0)) #6
  %360 = icmp eq i32 %359, 0
  br i1 %360, label %583, label %361

361:                                              ; preds = %358
  %362 = tail call i32 @strcmp(i8* %1, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.126, i64 0, i64 0)) #6
  %363 = icmp eq i32 %362, 0
  br i1 %363, label %583, label %364

364:                                              ; preds = %361
  %365 = tail call i32 @strcmp(i8* %1, i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.127, i64 0, i64 0)) #6
  %366 = icmp eq i32 %365, 0
  br i1 %366, label %583, label %367

367:                                              ; preds = %364
  %368 = tail call i32 @strcmp(i8* %1, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.128, i64 0, i64 0)) #6
  %369 = icmp eq i32 %368, 0
  br i1 %369, label %583, label %370

370:                                              ; preds = %367
  %371 = tail call i32 @strcmp(i8* %1, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.129, i64 0, i64 0)) #6
  %372 = icmp eq i32 %371, 0
  br i1 %372, label %583, label %373

373:                                              ; preds = %370
  %374 = tail call i32 @strcmp(i8* %1, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.130, i64 0, i64 0)) #6
  %375 = icmp eq i32 %374, 0
  br i1 %375, label %583, label %376

376:                                              ; preds = %373
  %377 = tail call i32 @strcmp(i8* %1, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.131, i64 0, i64 0)) #6
  %378 = icmp eq i32 %377, 0
  br i1 %378, label %583, label %379

379:                                              ; preds = %376
  %380 = tail call i32 @strcmp(i8* %1, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.132, i64 0, i64 0)) #6
  %381 = icmp eq i32 %380, 0
  br i1 %381, label %583, label %382

382:                                              ; preds = %379
  %383 = tail call i32 @strcmp(i8* %1, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.133, i64 0, i64 0)) #6
  %384 = icmp eq i32 %383, 0
  br i1 %384, label %583, label %385

385:                                              ; preds = %382
  %386 = tail call i32 @strcmp(i8* %1, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.134, i64 0, i64 0)) #6
  %387 = icmp eq i32 %386, 0
  br i1 %387, label %583, label %388

388:                                              ; preds = %385
  %389 = tail call i32 @strcmp(i8* %1, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.135, i64 0, i64 0)) #6
  %390 = icmp eq i32 %389, 0
  br i1 %390, label %583, label %391

391:                                              ; preds = %388
  %392 = tail call i32 @strcmp(i8* %1, i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.136, i64 0, i64 0)) #6
  %393 = icmp eq i32 %392, 0
  br i1 %393, label %583, label %394

394:                                              ; preds = %391
  %395 = tail call i32 @strcmp(i8* %1, i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.137, i64 0, i64 0)) #6
  %396 = icmp eq i32 %395, 0
  br i1 %396, label %583, label %397

397:                                              ; preds = %394
  %398 = tail call i32 @strcmp(i8* %1, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.138, i64 0, i64 0)) #6
  %399 = icmp eq i32 %398, 0
  br i1 %399, label %583, label %400

400:                                              ; preds = %397
  %401 = tail call i32 @strcmp(i8* %1, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.139, i64 0, i64 0)) #6
  %402 = icmp eq i32 %401, 0
  br i1 %402, label %583, label %403

403:                                              ; preds = %400
  %404 = tail call i32 @strcmp(i8* %1, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.140, i64 0, i64 0)) #6
  %405 = icmp eq i32 %404, 0
  br i1 %405, label %583, label %406

406:                                              ; preds = %403
  %407 = tail call i32 @strcmp(i8* %1, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.141, i64 0, i64 0)) #6
  %408 = icmp eq i32 %407, 0
  br i1 %408, label %583, label %409

409:                                              ; preds = %406
  %410 = tail call i32 @strcmp(i8* %1, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.142, i64 0, i64 0)) #6
  %411 = icmp eq i32 %410, 0
  br i1 %411, label %583, label %412

412:                                              ; preds = %409
  %413 = tail call i32 @strcmp(i8* %1, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.143, i64 0, i64 0)) #6
  %414 = icmp eq i32 %413, 0
  br i1 %414, label %583, label %415

415:                                              ; preds = %412
  %416 = tail call i32 @strcmp(i8* %1, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.144, i64 0, i64 0)) #6
  %417 = icmp eq i32 %416, 0
  br i1 %417, label %583, label %418

418:                                              ; preds = %415
  %419 = tail call i32 @strcmp(i8* %1, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.145, i64 0, i64 0)) #6
  %420 = icmp eq i32 %419, 0
  br i1 %420, label %583, label %421

421:                                              ; preds = %418
  %422 = tail call i32 @strcmp(i8* %1, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.146, i64 0, i64 0)) #6
  %423 = icmp eq i32 %422, 0
  br i1 %423, label %583, label %424

424:                                              ; preds = %421
  %425 = tail call i32 @strcmp(i8* %1, i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.147, i64 0, i64 0)) #6
  %426 = icmp eq i32 %425, 0
  br i1 %426, label %583, label %427

427:                                              ; preds = %424
  %428 = tail call i32 @strcmp(i8* %1, i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.148, i64 0, i64 0)) #6
  %429 = icmp eq i32 %428, 0
  br i1 %429, label %583, label %430

430:                                              ; preds = %427
  %431 = tail call i32 @strcmp(i8* %1, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.149, i64 0, i64 0)) #6
  %432 = icmp eq i32 %431, 0
  br i1 %432, label %583, label %433

433:                                              ; preds = %430
  %434 = tail call i32 @strcmp(i8* %1, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.150, i64 0, i64 0)) #6
  %435 = icmp eq i32 %434, 0
  br i1 %435, label %583, label %436

436:                                              ; preds = %433
  %437 = tail call i32 @strcmp(i8* %1, i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.151, i64 0, i64 0)) #6
  %438 = icmp eq i32 %437, 0
  br i1 %438, label %583, label %439

439:                                              ; preds = %436
  %440 = tail call i32 @strcmp(i8* %1, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.152, i64 0, i64 0)) #6
  %441 = icmp eq i32 %440, 0
  br i1 %441, label %583, label %442

442:                                              ; preds = %439
  %443 = tail call i32 @strcmp(i8* %1, i8* getelementptr inbounds ([32 x i8], [32 x i8]* @.str.153, i64 0, i64 0)) #6
  %444 = icmp eq i32 %443, 0
  br i1 %444, label %583, label %445

445:                                              ; preds = %442
  %446 = tail call i32 @strcmp(i8* %1, i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.154, i64 0, i64 0)) #6
  %447 = icmp eq i32 %446, 0
  br i1 %447, label %583, label %448

448:                                              ; preds = %445
  %449 = tail call i32 @strcmp(i8* %1, i8* getelementptr inbounds ([31 x i8], [31 x i8]* @.str.155, i64 0, i64 0)) #6
  %450 = icmp eq i32 %449, 0
  br i1 %450, label %583, label %451

451:                                              ; preds = %448
  %452 = tail call i32 @strcmp(i8* %1, i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.str.156, i64 0, i64 0)) #6
  %453 = icmp eq i32 %452, 0
  br i1 %453, label %583, label %454

454:                                              ; preds = %451
  %455 = tail call i32 @strcmp(i8* %1, i8* getelementptr inbounds ([42 x i8], [42 x i8]* @.str.157, i64 0, i64 0)) #6
  %456 = icmp eq i32 %455, 0
  br i1 %456, label %583, label %457

457:                                              ; preds = %454
  %458 = tail call i32 @strcmp(i8* %1, i8* getelementptr inbounds ([42 x i8], [42 x i8]* @.str.158, i64 0, i64 0)) #6
  %459 = icmp eq i32 %458, 0
  br i1 %459, label %583, label %460

460:                                              ; preds = %457
  %461 = tail call i32 @strcmp(i8* %1, i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.str.159, i64 0, i64 0)) #6
  %462 = icmp eq i32 %461, 0
  br i1 %462, label %583, label %463

463:                                              ; preds = %460
  %464 = tail call i32 @strcmp(i8* %1, i8* getelementptr inbounds ([48 x i8], [48 x i8]* @.str.160, i64 0, i64 0)) #6
  %465 = icmp eq i32 %464, 0
  br i1 %465, label %583, label %466

466:                                              ; preds = %463
  %467 = tail call i32 @strcmp(i8* %1, i8* getelementptr inbounds ([44 x i8], [44 x i8]* @.str.161, i64 0, i64 0)) #6
  %468 = icmp eq i32 %467, 0
  br i1 %468, label %583, label %469

469:                                              ; preds = %466
  %470 = tail call i32 @strcmp(i8* %1, i8* getelementptr inbounds ([47 x i8], [47 x i8]* @.str.162, i64 0, i64 0)) #6
  %471 = icmp eq i32 %470, 0
  br i1 %471, label %583, label %472

472:                                              ; preds = %469
  %473 = tail call i32 @strcmp(i8* %1, i8* getelementptr inbounds ([43 x i8], [43 x i8]* @.str.163, i64 0, i64 0)) #6
  %474 = icmp eq i32 %473, 0
  br i1 %474, label %583, label %475

475:                                              ; preds = %472
  %476 = tail call i32 @strcmp(i8* %1, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.164, i64 0, i64 0)) #6
  %477 = icmp eq i32 %476, 0
  br i1 %477, label %583, label %478

478:                                              ; preds = %475
  %479 = tail call i32 @strcmp(i8* %1, i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.165, i64 0, i64 0)) #6
  %480 = icmp eq i32 %479, 0
  br i1 %480, label %583, label %481

481:                                              ; preds = %478
  %482 = tail call i32 @strcmp(i8* %1, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.166, i64 0, i64 0)) #6
  %483 = icmp eq i32 %482, 0
  br i1 %483, label %583, label %484

484:                                              ; preds = %481
  %485 = tail call i32 @strcmp(i8* %1, i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.167, i64 0, i64 0)) #6
  %486 = icmp eq i32 %485, 0
  br i1 %486, label %583, label %487

487:                                              ; preds = %484
  %488 = tail call i32 @strcmp(i8* %1, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.168, i64 0, i64 0)) #6
  %489 = icmp eq i32 %488, 0
  br i1 %489, label %583, label %490

490:                                              ; preds = %487
  %491 = tail call i32 @strcmp(i8* %1, i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str.169, i64 0, i64 0)) #6
  %492 = icmp eq i32 %491, 0
  br i1 %492, label %583, label %493

493:                                              ; preds = %490
  %494 = tail call i32 @strcmp(i8* %1, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.170, i64 0, i64 0)) #6
  %495 = icmp eq i32 %494, 0
  br i1 %495, label %583, label %496

496:                                              ; preds = %493
  %497 = tail call i32 @strcmp(i8* %1, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.171, i64 0, i64 0)) #6
  %498 = icmp eq i32 %497, 0
  br i1 %498, label %583, label %499

499:                                              ; preds = %496
  %500 = tail call i32 @strcmp(i8* %1, i8* getelementptr inbounds ([31 x i8], [31 x i8]* @.str.172, i64 0, i64 0)) #6
  %501 = icmp eq i32 %500, 0
  br i1 %501, label %583, label %502

502:                                              ; preds = %499
  %503 = tail call i32 @strcmp(i8* %1, i8* getelementptr inbounds ([32 x i8], [32 x i8]* @.str.173, i64 0, i64 0)) #6
  %504 = icmp eq i32 %503, 0
  br i1 %504, label %583, label %505

505:                                              ; preds = %502
  %506 = tail call i32 @strcmp(i8* %1, i8* getelementptr inbounds ([32 x i8], [32 x i8]* @.str.174, i64 0, i64 0)) #6
  %507 = icmp eq i32 %506, 0
  br i1 %507, label %583, label %508

508:                                              ; preds = %505
  %509 = tail call i32 @strcmp(i8* %1, i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str.175, i64 0, i64 0)) #6
  %510 = icmp eq i32 %509, 0
  br i1 %510, label %583, label %511

511:                                              ; preds = %508
  %512 = tail call i32 @strcmp(i8* %1, i8* getelementptr inbounds ([34 x i8], [34 x i8]* @.str.176, i64 0, i64 0)) #6
  %513 = icmp eq i32 %512, 0
  br i1 %513, label %583, label %514

514:                                              ; preds = %511
  %515 = tail call i32 @strcmp(i8* %1, i8* getelementptr inbounds ([34 x i8], [34 x i8]* @.str.177, i64 0, i64 0)) #6
  %516 = icmp eq i32 %515, 0
  br i1 %516, label %583, label %517

517:                                              ; preds = %514
  %518 = tail call i32 @strcmp(i8* %1, i8* getelementptr inbounds ([36 x i8], [36 x i8]* @.str.178, i64 0, i64 0)) #6
  %519 = icmp eq i32 %518, 0
  br i1 %519, label %583, label %520

520:                                              ; preds = %517
  %521 = tail call i32 @strcmp(i8* %1, i8* getelementptr inbounds ([31 x i8], [31 x i8]* @.str.179, i64 0, i64 0)) #6
  %522 = icmp eq i32 %521, 0
  br i1 %522, label %583, label %523

523:                                              ; preds = %520
  %524 = tail call i32 @strcmp(i8* %1, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.180, i64 0, i64 0)) #6
  %525 = icmp eq i32 %524, 0
  br i1 %525, label %583, label %526

526:                                              ; preds = %523
  %527 = tail call i32 @strcmp(i8* %1, i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.181, i64 0, i64 0)) #6
  %528 = icmp eq i32 %527, 0
  br i1 %528, label %583, label %529

529:                                              ; preds = %526
  %530 = tail call i32 @strcmp(i8* %1, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.182, i64 0, i64 0)) #6
  %531 = icmp eq i32 %530, 0
  br i1 %531, label %583, label %532

532:                                              ; preds = %529
  %533 = tail call i32 @strcmp(i8* %1, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.183, i64 0, i64 0)) #6
  %534 = icmp eq i32 %533, 0
  br i1 %534, label %583, label %535

535:                                              ; preds = %532
  %536 = tail call i32 @strcmp(i8* %1, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.184, i64 0, i64 0)) #6
  %537 = icmp eq i32 %536, 0
  br i1 %537, label %583, label %538

538:                                              ; preds = %535
  %539 = tail call i32 @strcmp(i8* %1, i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str.185, i64 0, i64 0)) #6
  %540 = icmp eq i32 %539, 0
  br i1 %540, label %583, label %541

541:                                              ; preds = %538
  %542 = tail call i32 @strcmp(i8* %1, i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.186, i64 0, i64 0)) #6
  %543 = icmp eq i32 %542, 0
  br i1 %543, label %583, label %544

544:                                              ; preds = %541
  %545 = tail call i32 @strcmp(i8* %1, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.187, i64 0, i64 0)) #6
  %546 = icmp eq i32 %545, 0
  br i1 %546, label %583, label %547

547:                                              ; preds = %544
  %548 = tail call i32 @strcmp(i8* %1, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.188, i64 0, i64 0)) #6
  %549 = icmp eq i32 %548, 0
  br i1 %549, label %583, label %550

550:                                              ; preds = %547
  %551 = tail call i32 @strcmp(i8* %1, i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.189, i64 0, i64 0)) #6
  %552 = icmp eq i32 %551, 0
  br i1 %552, label %583, label %553

553:                                              ; preds = %550
  %554 = tail call i32 @strcmp(i8* %1, i8* getelementptr inbounds ([32 x i8], [32 x i8]* @.str.190, i64 0, i64 0)) #6
  %555 = icmp eq i32 %554, 0
  br i1 %555, label %583, label %556

556:                                              ; preds = %553
  %557 = tail call i32 @strcmp(i8* %1, i8* getelementptr inbounds ([38 x i8], [38 x i8]* @.str.191, i64 0, i64 0)) #6
  %558 = icmp eq i32 %557, 0
  br i1 %558, label %583, label %559

559:                                              ; preds = %556
  %560 = tail call i32 @strcmp(i8* %1, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.192, i64 0, i64 0)) #6
  %561 = icmp eq i32 %560, 0
  br i1 %561, label %583, label %562

562:                                              ; preds = %559
  %563 = bitcast i8** %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %563) #7
  store i8* inttoptr (i64 -6148914691236517206 to i8*), i8** %3, align 8
  %564 = call zeroext i1 @debug_utils_InstanceGpa(%struct.loader_instance* nonnull %38, i8* %1, i8** nonnull %3) #7
  br i1 %564, label %565, label %567

565:                                              ; preds = %562
  %566 = load i8*, i8** %3, align 8
  br label %581

567:                                              ; preds = %562
  %568 = call zeroext i1 @wsi_swapchain_instance_gpa(%struct.loader_instance* nonnull %38, i8* %1, i8** nonnull %3) #7
  br i1 %568, label %569, label %571

569:                                              ; preds = %567
  %570 = load i8*, i8** %3, align 8
  br label %581

571:                                              ; preds = %567
  %572 = call zeroext i1 @extension_instance_gpa(%struct.loader_instance* nonnull %38, i8* %1, i8** nonnull %3) #7
  br i1 %572, label %573, label %575

573:                                              ; preds = %571
  %574 = load i8*, i8** %3, align 8
  br label %581

575:                                              ; preds = %571
  %576 = call zeroext i1 @loader_phys_dev_ext_gpa(%struct.loader_instance* nonnull %38, i8* %1, i1 zeroext true, i8** nonnull %3, i8** null) #7
  br i1 %576, label %577, label %579

577:                                              ; preds = %575
  %578 = load i8*, i8** %3, align 8
  br label %581

579:                                              ; preds = %575
  %580 = call i8* @loader_dev_ext_gpa(%struct.loader_instance* nonnull %38, i8* %1) #7
  store i8* %580, i8** %3, align 8
  br label %581

581:                                              ; preds = %579, %577, %573, %569, %565
  %582 = phi i8* [ %566, %565 ], [ %570, %569 ], [ %574, %573 ], [ %578, %577 ], [ %580, %579 ]
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %563) #7
  br label %583

583:                                              ; preds
  %584 = phi i8* [ %582, %581 ], [ bitcast (void ()* (%struct.VkInstance_T*, i8*)* @vkGetInstanceProcAddr to i8*), %40 ], [ bitcast (void (%struct.VkInstance_T*, %struct.VkAllocationCallbacks*)* @vkDestroyInstance to i8*), %43 ], [ bitcast (i32 (%struct.VkInstance_T*, i32*, %struct.VkPhysicalDevice_T**)* @vkEnumeratePhysicalDevices to i8*), %46 ], [ bitcast (void (%struct.VkPhysicalDevice_T*, %struct.VkPhysicalDeviceFeatures*)* @vkGetPhysicalDeviceFeatures to i8*), %49 ], [ bitcast (void (%struct.VkPhysicalDevice_T*, i32, %struct.VkFormatProperties*)* @vkGetPhysicalDeviceFormatProperties to i8*), %52 ], [ bitcast (i32 (%struct.VkPhysicalDevice_T*, i32, i32, i32, i32, i32, %struct.VkImageFormatProperties*)* @vkGetPhysicalDeviceImageFormatProperties to i8*), %55 ], [ bitcast (void (%struct.VkPhysicalDevice_T*, i32, i32, i32, i32, i32, i32*, %struct.VkSparseImageFormatProperties*)* @vkGetPhysicalDeviceSparseImageFormatProperties to i8*), %58 ], [ bitcast (void (%struct.VkPhysicalDevice_T*, %struct.VkPhysicalDeviceProperties*)* @vkGetPhysicalDeviceProperties to i8*), %61 ], [ bitcast (void (%struct.VkPhysicalDevice_T*, i32*, %struct.VkQueueFamilyProperties*)* @vkGetPhysicalDeviceQueueFamilyProperties to i8*), %64 ], [ bitcast (void (%struct.VkPhysicalDevice_T*, %struct.VkPhysicalDeviceMemoryProperties*)* @vkGetPhysicalDeviceMemoryProperties to i8*), %67 ], [ bitcast (i32 (%struct.VkPhysicalDevice_T*, i32*, %struct.VkLayerProperties*)* @vkEnumerateDeviceLayerProperties to i8*), %70 ], [ bitcast (i32 (%struct.VkPhysicalDevice_T*, i8*, i32*, %struct.VkExtensionProperties*)* @vkEnumerateDeviceExtensionProperties to i8*), %73 ], [ bitcast (i32 (%struct.VkPhysicalDevice_T*, %struct.VkDeviceCreateInfo*, %struct.VkAllocationCallbacks*, %struct.VkDevice_T**)* @vkCreateDevice to i8*), %76 ], [ bitcast (void ()* (%struct.VkDevice_T*, i8*)* @vkGetDeviceProcAddr to i8*), %79 ], [ bitcast (void (%struct.VkDevice_T*, %struct.VkAllocationCallbacks*)* @vkDestroyDevice to i8*), %82 ], [ bitcast (void (%struct.VkDevice_T*, i32, i32, %struct.VkQueue_T**)* @vkGetDeviceQueue to i8*), %85 ], [ bitcast (i32 (%struct.VkQueue_T*, i32, %struct.VkSubmitInfo*, %struct.VkFence_T*)* @vkQueueSubmit to i8*), %88 ], [ bitcast (i32 (%struct.VkQueue_T*)* @vkQueueWaitIdle to i8*), %91 ], [ bitcast (i32 (%struct.VkDevice_T*)* @vkDeviceWaitIdle to i8*), %94 ], [ bitcast (i32 (%struct.VkDevice_T*, %struct.VkMemoryAllocateInfo*, %struct.VkAllocationCallbacks*, %struct.VkDeviceMemory_T**)* @vkAllocateMemory to i8*), %97 ], [ bitcast (void (%struct.VkDevice_T*, %struct.VkDeviceMemory_T*, %struct.VkAllocationCallbacks*)* @vkFreeMemory to i8*), %100 ], [ bitcast (i32 (%struct.VkDevice_T*, %struct.VkDeviceMemory_T*, i64, i64, i32, i8**)* @vkMapMemory to i8*), %103 ], [ bitcast (void (%struct.VkDevice_T*, %struct.VkDeviceMemory_T*)* @vkUnmapMemory to i8*), %106 ], [ bitcast (i32 (%struct.VkDevice_T*, i32, %struct.VkMappedMemoryRange*)* @vkFlushMappedMemoryRanges to i8*), %109 ], [ bitcast (i32 (%struct.VkDevice_T*, i32, %struct.VkMappedMemoryRange*)* @vkInvalidateMappedMemoryRanges to i8*), %112 ], [ bitcast (void (%struct.VkDevice_T*, %struct.VkDeviceMemory_T*, i64*)* @vkGetDeviceMemoryCommitment to i8*), %115 ], [ bitcast (void (%struct.VkDevice_T*, %struct.VkImage_T*, i32*, %struct.VkSparseImageMemoryRequirements*)* @vkGetImageSparseMemoryRequirements to i8*), %118 ], [ bitcast (void (%struct.VkDevice_T*, %struct.VkImage_T*, %struct.VkMemoryRequirements*)* @vkGetImageMemoryRequirements to i8*), %121 ], [ bitcast (void (%struct.VkDevice_T*, %struct.VkBuffer_T*, %struct.VkMemoryRequirements*)* @vkGetBufferMemoryRequirements to i8*), %124 ], [ bitcast (i32 (%struct.VkDevice_T*, %struct.VkImage_T*, %struct.VkDeviceMemory_T*, i64)* @vkBindImageMemory to i8*), %127 ], [ bitcast (i32 (%struct.VkDevice_T*, %struct.VkBuffer_T*, %struct.VkDeviceMemory_T*, i64)* @vkBindBufferMemory to i8*), %130 ], [ bitcast (i32 (%struct.VkQueue_T*, i32, %struct.VkBindSparseInfo*, %struct.VkFence_T*)* @vkQueueBindSparse to i8*), %133 ], [ bitcast (i32 (%struct.VkDevice_T*, %struct.VkFenceCreateInfo*, %struct.VkAllocationCallbacks*, %struct.VkFence_T**)* @vkCreateFence to i8*), %136 ], [ bitcast (void (%struct.VkDevice_T*, %struct.VkFence_T*, %struct.VkAllocationCallbacks*)* @vkDestroyFence to i8*), %139 ], [ bitcast (i32 (%struct.VkDevice_T*, %struct.VkFence_T*)* @vkGetFenceStatus to i8*), %142 ], [ bitcast (i32 (%struct.VkDevice_T*, i32, %struct.VkFence_T**)* @vkResetFences to i8*), %145 ], [ bitcast (i32 (%struct.VkDevice_T*, i32, %struct.VkFence_T**, i32, i64)* @vkWaitForFences to i8*), %148 ], [ bitcast (i32 (%struct.VkDevice_T*, %struct.VkSemaphoreCreateInfo*, %struct.VkAllocationCallbacks*, %struct.VkSemaphore_T**)* @vkCreateSemaphore to i8*), %151 ], [ bitcast (void (%struct.VkDevice_T*, %struct.VkSemaphore_T*, %struct.VkAllocationCallbacks*)* @vkDestroySemaphore to i8*), %154 ], [ bitcast (i32 (%struct.VkDevice_T*, %struct.VkEventCreateInfo*, %struct.VkAllocationCallbacks*, %struct.VkEvent_T**)* @vkCreateEvent to i8*), %157 ], [ bitcast (void (%struct.VkDevice_T*, %struct.VkEvent_T*, %struct.VkAllocationCallbacks*)* @vkDestroyEvent to i8*), %160 ], [ bitcast (i32 (%struct.VkDevice_T*, %struct.VkEvent_T*)* @vkGetEventStatus to i8*), %163 ], [ bitcast (i32 (%struct.VkDevice_T*, %struct.VkEvent_T*)* @vkSetEvent to i8*), %166 ], [ bitcast (i32 (%struct.VkDevice_T*, %struct.VkEvent_T*)* @vkResetEvent to i8*), %169 ], [ bitcast (i32 (%struct.VkDevice_T*, %struct.VkQueryPoolCreateInfo*, %struct.VkAllocationCallbacks*, %struct.VkQueryPool_T**)* @vkCreateQueryPool to i8*), %172 ], [ bitcast (void (%struct.VkDevice_T*, %struct.VkQueryPool_T*, %struct.VkAllocationCallbacks*)* @vkDestroyQueryPool to i8*), %175 ], [ bitcast (i32 (%struct.VkDevice_T*, %struct.VkQueryPool_T*, i32, i32, i64, i8*, i64, i32)* @vkGetQueryPoolResults to i8*), %178 ], [ bitcast (i32 (%struct.VkDevice_T*, %struct.VkBufferCreateInfo*, %struct.VkAllocationCallbacks*, %struct.VkBuffer_T**)* @vkCreateBuffer to i8*), %181 ], [ bitcast (void (%struct.VkDevice_T*, %struct.VkBuffer_T*, %struct.VkAllocationCallbacks*)* @vkDestroyBuffer to i8*), %184 ], [ bitcast (i32 (%struct.VkDevice_T*, %struct.VkBufferViewCreateInfo*, %struct.VkAllocationCallbacks*, %struct.VkBufferView_T**)* @vkCreateBufferView to i8*), %187 ], [ bitcast (void (%struct.VkDevice_T*, %struct.VkBufferView_T*, %struct.VkAllocationCallbacks*)* @vkDestroyBufferView to i8*), %190 ], [ bitcast (i32 (%struct.VkDevice_T*, %struct.VkImageCreateInfo*, %struct.VkAllocationCallbacks*, %struct.VkImage_T**)* @vkCreateImage to i8*), %193 ], [ bitcast (void (%struct.VkDevice_T*, %struct.VkImage_T*, %struct.VkAllocationCallbacks*)* @vkDestroyImage to i8*), %196 ], [ bitcast (void (%struct.VkDevice_T*, %struct.VkImage_T*, %struct.VkImageSubresource*, %struct.VkSubresourceLayout*)* @vkGetImageSubresourceLayout to i8*), %199 ], [ bitcast (i32 (%struct.VkDevice_T*, %struct.VkImageViewCreateInfo*, %struct.VkAllocationCallbacks*, %struct.VkImageView_T**)* @vkCreateImageView to i8*), %202 ], [ bitcast (void (%struct.VkDevice_T*, %struct.VkImageView_T*, %struct.VkAllocationCallbacks*)* @vkDestroyImageView to i8*), %205 ], [ bitcast (i32 (%struct.VkDevice_T*, %struct.VkShaderModuleCreateInfo*, %struct.VkAllocationCallbacks*, %struct.VkShaderModule_T**)* @vkCreateShaderModule to i8*), %208 ], [ bitcast (void (%struct.VkDevice_T*, %struct.VkShaderModule_T*, %struct.VkAllocationCallbacks*)* @vkDestroyShaderModule to i8*), %211 ], [ bitcast (i32 (%struct.VkDevice_T*, %struct.VkPipelineCacheCreateInfo*, %struct.VkAllocationCallbacks*, %struct.VkPipelineCache_T**)* @vkCreatePipelineCache to i8*), %214 ], [ bitcast (void (%struct.VkDevice_T*, %struct.VkPipelineCache_T*, %struct.VkAllocationCallbacks*)* @vkDestroyPipelineCache to i8*), %217 ], [ bitcast (i32 (%struct.VkDevice_T*, %struct.VkPipelineCache_T*, i64*, i8*)* @vkGetPipelineCacheData to i8*), %220 ], [ bitcast (i32 (%struct.VkDevice_T*, %struct.VkPipelineCache_T*, i32, %struct.VkPipelineCache_T**)* @vkMergePipelineCaches to i8*), %223 ], [ bitcast (i32 (%struct.VkDevice_T*, %struct.VkPipelineCache_T*, i32, %struct.VkGraphicsPipelineCreateInfo*, %struct.VkAllocationCallbacks*, %struct.VkPipeline_T**)* @vkCreateGraphicsPipelines to i8*), %226 ], [ bitcast (i32 (%struct.VkDevice_T*, %struct.VkPipelineCache_T*, i32, %struct.VkComputePipelineCreateInfo*, %struct.VkAllocationCallbacks*, %struct.VkPipeline_T**)* @vkCreateComputePipelines to i8*), %229 ], [ bitcast (void (%struct.VkDevice_T*, %struct.VkPipeline_T*, %struct.VkAllocationCallbacks*)* @vkDestroyPipeline to i8*), %232 ], [ bitcast (i32 (%struct.VkDevice_T*, %struct.VkPipelineLayoutCreateInfo*, %struct.VkAllocationCallbacks*, %struct.VkPipelineLayout_T**)* @vkCreatePipelineLayout to i8*), %235 ], [ bitcast (void (%struct.VkDevice_T*, %struct.VkPipelineLayout_T*, %struct.VkAllocationCallbacks*)* @vkDestroyPipelineLayout to i8*), %238 ], [ bitcast (i32 (%struct.VkDevice_T*, %struct.VkSamplerCreateInfo*, %struct.VkAllocationCallbacks*, %struct.VkSampler_T**)* @vkCreateSampler to i8*), %241 ], [ bitcast (void (%struct.VkDevice_T*, %struct.VkSampler_T*, %struct.VkAllocationCallbacks*)* @vkDestroySampler to i8*), %244 ], [ bitcast (i32 (%struct.VkDevice_T*, %struct.VkDescriptorSetLayoutCreateInfo*, %struct.VkAllocationCallbacks*, %struct.VkDescriptorSetLayout_T**)* @vkCreateDescriptorSetLayout to i8*), %247 ], [ bitcast (void (%struct.VkDevice_T*, %struct.VkDescriptorSetLayout_T*, %struct.VkAllocationCallbacks*)* @vkDestroyDescriptorSetLayout to i8*), %250 ], [ bitcast (i32 (%struct.VkDevice_T*, %struct.VkDescriptorPoolCreateInfo*, %struct.VkAllocationCallbacks*, %struct.VkDescriptorPool_T**)* @vkCreateDescriptorPool to i8*), %253 ], [ bitcast (void (%struct.VkDevice_T*, %struct.VkDescriptorPool_T*, %struct.VkAllocationCallbacks*)* @vkDestroyDescriptorPool to i8*), %256 ], [ bitcast (i32 (%struct.VkDevice_T*, %struct.VkDescriptorPool_T*, i32)* @vkResetDescriptorPool to i8*), %259 ], [ bitcast (i32 (%struct.VkDevice_T*, %struct.VkDescriptorSetAllocateInfo*, %struct.VkDescriptorSet_T**)* @vkAllocateDescriptorSets to i8*), %262 ], [ bitcast (i32 (%struct.VkDevice_T*, %struct.VkDescriptorPool_T*, i32, %struct.VkDescriptorSet_T**)* @vkFreeDescriptorSets to i8*), %265 ], [ bitcast (void (%struct.VkDevice_T*, i32, %struct.VkWriteDescriptorSet*, i32, %struct.VkCopyDescriptorSet*)* @vkUpdateDescriptorSets to i8*), %268 ], [ bitcast (i32 (%struct.VkDevice_T*, %struct.VkFramebufferCreateInfo*, %struct.VkAllocationCallbacks*, %struct.VkFramebuffer_T**)* @vkCreateFramebuffer to i8*), %271 ], [ bitcast (void (%struct.VkDevice_T*, %struct.VkFramebuffer_T*, %struct.VkAllocationCallbacks*)* @vkDestroyFramebuffer to i8*), %274 ], [ bitcast (i32 (%struct.VkDevice_T*, %struct.VkRenderPassCreateInfo*, %struct.VkAllocationCallbacks*, %struct.VkRenderPass_T**)* @vkCreateRenderPass to i8*), %277 ], [ bitcast (void (%struct.VkDevice_T*, %struct.VkRenderPass_T*, %struct.VkAllocationCallbacks*)* @vkDestroyRenderPass to i8*), %280 ], [ bitcast (void (%struct.VkDevice_T*, %struct.VkRenderPass_T*, %struct.VkExtent2D*)* @vkGetRenderAreaGranularity to i8*), %283 ], [ bitcast (i32 (%struct.VkDevice_T*, %struct.VkCommandPoolCreateInfo*, %struct.VkAllocationCallbacks*, %struct.VkCommandPool_T**)* @vkCreateCommandPool to i8*), %286 ], [ bitcast (void (%struct.VkDevice_T*, %struct.VkCommandPool_T*, %struct.VkAllocationCallbacks*)* @vkDestroyCommandPool to i8*), %289 ], [ bitcast (i32 (%struct.VkDevice_T*, %struct.VkCommandPool_T*, i32)* @vkResetCommandPool to i8*), %292 ], [ bitcast (i32 (%struct.VkDevice_T*, %struct.VkCommandBufferAllocateInfo*, %struct.VkCommandBuffer_T**)* @vkAllocateCommandBuffers to i8*), %295 ], [ bitcast (void (%struct.VkDevice_T*, %struct.VkCommandPool_T*, i32, %struct.VkCommandBuffer_T**)* @vkFreeCommandBuffers to i8*), %298 ], [ bitcast (i32 (%struct.VkCommandBuffer_T*, %struct.VkCommandBufferBeginInfo*)* @vkBeginCommandBuffer to i8*), %301 ], [ bitcast (i32 (%struct.VkCommandBuffer_T*)* @vkEndCommandBuffer to i8*), %304 ], [ bitcast (i32 (%struct.VkCommandBuffer_T*, i32)* @vkResetCommandBuffer to i8*), %307 ], [ bitcast (void (%struct.VkCommandBuffer_T*, i32, %struct.VkPipeline_T*)* @vkCmdBindPipeline to i8*), %310 ], [ bitcast (void (%struct.VkCommandBuffer_T*, i32, %struct.VkPipelineLayout_T*, i32, i32, %struct.VkDescriptorSet_T**, i32, i32*)* @vkCmdBindDescriptorSets to i8*), %313 ], [ bitcast (void (%struct.VkCommandBuffer_T*, i32, i32, %struct.VkBuffer_T**, i64*)* @vkCmdBindVertexBuffers to i8*), %316 ], [ bitcast (void (%struct.VkCommandBuffer_T*, %struct.VkBuffer_T*, i64, i32)* @vkCmdBindIndexBuffer to i8*), %319 ], [ bitcast (void (%struct.VkCommandBuffer_T*, i32, i32, %struct.VkViewport*)* @vkCmdSetViewport to i8*), %322 ], [ bitcast (void (%struct.VkCommandBuffer_T*, i32, i32, %struct.VkRect2D*)* @vkCmdSetScissor to i8*), %325 ], [ bitcast (void (%struct.VkCommandBuffer_T*, float)* @vkCmdSetLineWidth to i8*), %328 ], [ bitcast (void (%struct.VkCommandBuffer_T*, float, float, float)* @vkCmdSetDepthBias to i8*), %331 ], [ bitcast (void (%struct.VkCommandBuffer_T*, float*)* @vkCmdSetBlendConstants to i8*), %334 ], [ bitcast (void (%struct.VkCommandBuffer_T*, float, float)* @vkCmdSetDepthBounds to i8*), %337 ], [ bitcast (void (%struct.VkCommandBuffer_T*, i32, i32)* @vkCmdSetStencilCompareMask to i8*), %340 ], [ bitcast (void (%struct.VkCommandBuffer_T*, i32, i32)* @vkCmdSetStencilWriteMask to i8*), %343 ], [ bitcast (void (%struct.VkCommandBuffer_T*, i32, i32)* @vkCmdSetStencilReference to i8*), %346 ], [ bitcast (void (%struct.VkCommandBuffer_T*, i32, i32, i32, i32)* @vkCmdDraw to i8*), %349 ], [ bitcast (void (%struct.VkCommandBuffer_T*, i32, i32, i32, i32, i32)* @vkCmdDrawIndexed to i8*), %352 ], [ bitcast (void (%struct.VkCommandBuffer_T*, %struct.VkBuffer_T*, i64, i32, i32)* @vkCmdDrawIndirect to i8*), %355 ], [ bitcast (void (%struct.VkCommandBuffer_T*, %struct.VkBuffer_T*, i64, i32, i32)* @vkCmdDrawIndexedIndirect to i8*), %358 ], [ bitcast (void (%struct.VkCommandBuffer_T*, i32, i32, i32)* @vkCmdDispatch to i8*), %361 ], [ bitcast (void (%struct.VkCommandBuffer_T*, %struct.VkBuffer_T*, i64)* @vkCmdDispatchIndirect to i8*), %364 ], [ bitcast (void (%struct.VkCommandBuffer_T*, %struct.VkBuffer_T*, %struct.VkBuffer_T*, i32, %struct.VkBufferCopy*)* @vkCmdCopyBuffer to i8*), %367 ], [ bitcast (void (%struct.VkCommandBuffer_T*, %struct.VkImage_T*, i32, %struct.VkImage_T*, i32, i32, %struct.VkImageCopy*)* @vkCmdCopyImage to i8*), %370 ], [ bitcast (void (%struct.VkCommandBuffer_T*, %struct.VkImage_T*, i32, %struct.VkImage_T*, i32, i32, %struct.VkImageBlit*, i32)* @vkCmdBlitImage to i8*), %373 ], [ bitcast (void (%struct.VkCommandBuffer_T*, %struct.VkBuffer_T*, %struct.VkImage_T*, i32, i32, %struct.VkBufferImageCopy*)* @vkCmdCopyBufferToImage to i8*), %376 ], [ bitcast (void (%struct.VkCommandBuffer_T*, %struct.VkImage_T*, i32, %struct.VkBuffer_T*, i32, %struct.VkBufferImageCopy*)* @vkCmdCopyImageToBuffer to i8*), %379 ], [ bitcast (void (%struct.VkCommandBuffer_T*, %struct.VkBuffer_T*, i64, i64, i8*)* @vkCmdUpdateBuffer to i8*), %382 ], [ bitcast (void (%struct.VkCommandBuffer_T*, %struct.VkBuffer_T*, i64, i64, i32)* @vkCmdFillBuffer to i8*), %385 ], [ bitcast (void (%struct.VkCommandBuffer_T*, %struct.VkImage_T*, i32, %union.VkClearColorValue*, i32, %struct.VkImageSubresourceRange*)* @vkCmdClearColorImage to i8*), %388 ], [ bitcast (void (%struct.VkCommandBuffer_T*, %struct.VkImage_T*, i32, %struct.VkClearDepthStencilValue*, i32, %struct.VkImageSubresourceRange*)* @vkCmdClearDepthStencilImage to i8*), %391 ], [ bitcast (void (%struct.VkCommandBuffer_T*, i32, %struct.VkClearAttachment*, i32, %struct.VkClearRect*)* @vkCmdClearAttachments to i8*), %394 ], [ bitcast (void (%struct.VkCommandBuffer_T*, %struct.VkImage_T*, i32, %struct.VkImage_T*, i32, i32, %struct.VkImageResolve*)* @vkCmdResolveImage to i8*), %397 ], [ bitcast (void (%struct.VkCommandBuffer_T*, %struct.VkEvent_T*, i32)* @vkCmdSetEvent to i8*), %400 ], [ bitcast (void (%struct.VkCommandBuffer_T*, %struct.VkEvent_T*, i32)* @vkCmdResetEvent to i8*), %403 ], [ bitcast (void (%struct.VkCommandBuffer_T*, i32, %struct.VkEvent_T**, i32, i32, i32, %struct.VkMemoryBarrier*, i32, %struct.VkBufferMemoryBarrier*, i32, %struct.VkImageMemoryBarrier*)* @vkCmdWaitEvents to i8*), %406 ], [ bitcast (void (%struct.VkCommandBuffer_T*, i32, i32, i32, i32, %struct.VkMemoryBarrier*, i32, %struct.VkBufferMemoryBarrier*, i32, %struct.VkImageMemoryBarrier*)* @vkCmdPipelineBarrier to i8*), %409 ], [ bitcast (void (%struct.VkCommandBuffer_T*, %struct.VkQueryPool_T*, i32, i32)* @vkCmdBeginQuery to i8*), %412 ], [ bitcast (void (%struct.VkCommandBuffer_T*, %struct.VkQueryPool_T*, i32)* @vkCmdEndQuery to i8*), %415 ], [ bitcast (void (%struct.VkCommandBuffer_T*, %struct.VkQueryPool_T*, i32, i32)* @vkCmdResetQueryPool to i8*), %418 ], [ bitcast (void (%struct.VkCommandBuffer_T*, i32, %struct.VkQueryPool_T*, i32)* @vkCmdWriteTimestamp to i8*), %421 ], [ bitcast (void (%struct.VkCommandBuffer_T*, %struct.VkQueryPool_T*, i32, i32, %struct.VkBuffer_T*, i64, i64, i32)* @vkCmdCopyQueryPoolResults to i8*), %424 ], [ bitcast (void (%struct.VkCommandBuffer_T*, %struct.VkPipelineLayout_T*, i32, i32, i32, i8*)* @vkCmdPushConstants to i8*), %427 ], [ bitcast (void (%struct.VkCommandBuffer_T*, %struct.VkRenderPassBeginInfo*, i32)* @vkCmdBeginRenderPass to i8*), %430 ], [ bitcast (void (%struct.VkCommandBuffer_T*, i32)* @vkCmdNextSubpass to i8*), %433 ], [ bitcast (void (%struct.VkCommandBuffer_T*)* @vkCmdEndRenderPass to i8*), %436 ], [ bitcast (void (%struct.VkCommandBuffer_T*, i32, %struct.VkCommandBuffer_T**)* @vkCmdExecuteCommands to i8*), %439 ], [ bitcast (i32 (%struct.VkInstance_T*, i32*, %struct.VkPhysicalDeviceGroupProperties*)* @vkEnumeratePhysicalDeviceGroups to i8*), %442 ], [ bitcast (void (%struct.VkPhysicalDevice_T*, %struct.VkPhysicalDeviceFeatures2*)* @vkGetPhysicalDeviceFeatures2 to i8*), %445 ], [ bitcast (void (%struct.VkPhysicalDevice_T*, %struct.VkPhysicalDeviceProperties2*)* @vkGetPhysicalDeviceProperties2 to i8*), %448 ], [ bitcast (void (%struct.VkPhysicalDevice_T*, i32, %struct.VkFormatProperties2*)* @vkGetPhysicalDeviceFormatProperties2 to i8*), %451 ], [ bitcast (i32 (%struct.VkPhysicalDevice_T*, %struct.VkPhysicalDeviceImageFormatInfo2*, %struct.VkImageFormatProperties2*)* @vkGetPhysicalDeviceImageFormatProperties2 to i8*), %454 ], [ bitcast (void (%struct.VkPhysicalDevice_T*, i32*, %struct.VkQueueFamilyProperties2*)* @vkGetPhysicalDeviceQueueFamilyProperties2 to i8*), %457 ], [ bitcast (void (%struct.VkPhysicalDevice_T*, %struct.VkPhysicalDeviceMemoryProperties2*)* @vkGetPhysicalDeviceMemoryProperties2 to i8*), %460 ], [ bitcast (void (%struct.VkPhysicalDevice_T*, %struct.VkPhysicalDeviceSparseImageFormatInfo2*, i32*, %struct.VkSparseImageFormatProperties2*)* @vkGetPhysicalDeviceSparseImageFormatProperties2 to i8*), %463 ], [ bitcast (void (%struct.VkPhysicalDevice_T*, %struct.VkPhysicalDeviceExternalBufferInfo*, %struct.VkExternalBufferProperties*)* @vkGetPhysicalDeviceExternalBufferProperties to i8*), %466 ], [ bitcast (void (%struct.VkPhysicalDevice_T*, %struct.VkPhysicalDeviceExternalSemaphoreInfo*, %struct.VkExternalSemaphoreProperties*)* @vkGetPhysicalDeviceExternalSemaphoreProperties to i8*), %469 ], [ bitcast (void (%struct.VkPhysicalDevice_T*, %struct.VkPhysicalDeviceExternalFenceInfo*, %struct.VkExternalFenceProperties*)* @vkGetPhysicalDeviceExternalFenceProperties to i8*), %472 ], [ bitcast (i32 (%struct.VkDevice_T*, i32, %struct.VkBindBufferMemoryInfo*)* @vkBindBufferMemory2 to i8*), %475 ], [ bitcast (i32 (%struct.VkDevice_T*, i32, %struct.VkBindImageMemoryInfo*)* @vkBindImageMemory2 to i8*), %478 ], [ bitcast (void (%struct.VkDevice_T*, i32, i32, i32, i32*)* @vkGetDeviceGroupPeerMemoryFeatures to i8*), %481 ], [ bitcast (void (%struct.VkCommandBuffer_T*, i32)* @vkCmdSetDeviceMask to i8*), %484 ], [ bitcast (void (%struct.VkCommandBuffer_T*, i32, i32, i32, i32, i32, i32)* @vkCmdDispatchBase to i8*), %487 ], [ bitcast (void (%struct.VkDevice_T*, %struct.VkImageMemoryRequirementsInfo2*, %struct.VkMemoryRequirements2*)* @vkGetImageMemoryRequirements2 to i8*), %490 ], [ bitcast (void (%struct.VkDevice_T*, %struct.VkCommandPool_T*, i32)* @vkTrimCommandPool to i8*), %493 ], [ bitcast (void (%struct.VkDevice_T*, %struct.VkDeviceQueueInfo2*, %struct.VkQueue_T**)* @vkGetDeviceQueue2 to i8*), %496 ], [ bitcast (i32 (%struct.VkDevice_T*, %struct.VkSamplerYcbcrConversionCreateInfo*, %struct.VkAllocationCallbacks*, %struct.VkSamplerYcbcrConversion_T**)* @vkCreateSamplerYcbcrConversion to i8*), %499 ], [ bitcast (void (%struct.VkDevice_T*, %struct.VkSamplerYcbcrConversion_T*, %struct.VkAllocationCallbacks*)* @vkDestroySamplerYcbcrConversion to i8*), %502 ], [ bitcast (void (%struct.VkDevice_T*, %struct.VkDescriptorSetLayoutCreateInfo*, %struct.VkDescriptorSetLayoutSupport*)* @vkGetDescriptorSetLayoutSupport to i8*), %505 ], [ bitcast (i32 (%struct.VkDevice_T*, %struct.VkDescriptorUpdateTemplateCreateInfo*, %struct.VkAllocationCallbacks*, %struct.VkDescriptorUpdateTemplate_T**)* @vkCreateDescriptorUpdateTemplate to i8*), %508 ], [ bitcast (void (%struct.VkDevice_T*, %struct.VkDescriptorUpdateTemplate_T*, %struct.VkAllocationCallbacks*)* @vkDestroyDescriptorUpdateTemplate to i8*), %511 ], [ bitcast (void (%struct.VkDevice_T*, %struct.VkDescriptorSet_T*, %struct.VkDescriptorUpdateTemplate_T*, i8*)* @vkUpdateDescriptorSetWithTemplate to i8*), %514 ], [ bitcast (void (%struct.VkDevice_T*, %struct.VkImageSparseMemoryRequirementsInfo2*, i32*, %struct.VkSparseImageMemoryRequirements2*)* @vkGetImageSparseMemoryRequirements2 to i8*), %517 ], [ bitcast (void (%struct.VkDevice_T*, %struct.VkBufferMemoryRequirementsInfo2*, %struct.VkMemoryRequirements2*)* @vkGetBufferMemoryRequirements2 to i8*), %520 ], [ bitcast (i32 (%struct.VkDevice_T*, %struct.VkRenderPassCreateInfo2*, %struct.VkAllocationCallbacks*, %struct.VkRenderPass_T**)* @vkCreateRenderPass2 to i8*), %523 ], [ bitcast (void (%struct.VkCommandBuffer_T*, %struct.VkRenderPassBeginInfo*, %struct.VkSubpassBeginInfo*)* @vkCmdBeginRenderPass2 to i8*), %526 ], [ bitcast (void (%struct.VkCommandBuffer_T*, %struct.VkSubpassBeginInfo*, %struct.VkSubpassEndInfo*)* @vkCmdNextSubpass2 to i8*), %529 ], [ bitcast (void (%struct.VkCommandBuffer_T*, %struct.VkSubpassEndInfo*)* @vkCmdEndRenderPass2 to i8*), %532 ], [ bitcast (void (%struct.VkCommandBuffer_T*, %struct.VkBuffer_T*, i64, %struct.VkBuffer_T*, i64, i32, i32)* @vkCmdDrawIndirectCount to i8*), %535 ], [ bitcast (void (%struct.VkCommandBuffer_T*, %struct.VkBuffer_T*, i64, %struct.VkBuffer_T*, i64, i32, i32)* @vkCmdDrawIndexedIndirectCount to i8*), %538 ], [ bitcast (i32 (%struct.VkDevice_T*, %struct.VkSemaphore_T*, i64*)* @vkGetSemaphoreCounterValue to i8*), %541 ], [ bitcast (i32 (%struct.VkDevice_T*, %struct.VkSemaphoreWaitInfo*, i64)* @vkWaitSemaphores to i8*), %544 ], [ bitcast (i32 (%struct.VkDevice_T*, %struct.VkSemaphoreSignalInfo*)* @vkSignalSemaphore to i8*), %547 ], [ bitcast (i64 (%struct.VkDevice_T*, %struct.VkBufferDeviceAddressInfo*)* @vkGetBufferDeviceAddress to i8*), %550 ], [ bitcast (i64 (%struct.VkDevice_T*, %struct.VkBufferDeviceAddressInfo*)* @vkGetBufferOpaqueCaptureAddress to i8*), %553 ], [ bitcast (i64 (%struct.VkDevice_T*, %struct.VkDeviceMemoryOpaqueCaptureAddressInfo*)* @vkGetDeviceMemoryOpaqueCaptureAddress to i8*), %556 ], [ bitcast (void (%struct.VkDevice_T*, %struct.VkQueryPool_T*, i32, i32)* @vkResetQueryPool to i8*), %559 ]
  %585 = bitcast i8* %584 to void ()*
  br label %586

586:                                              ; preds = %583, %37, %34
  %587 = phi void ()* [ %36, %34 ], [ %585, %583 ], [ null, %37 ]
  ret void ()* %587
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

declare %struct.loader_instance* @loader_get_instance(%struct.VkInstance_T*) local_unnamed_addr #2

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: nounwind ssp uwtable
define void ()* @vkGetDeviceProcAddr(%struct.VkDevice_T*, i8*) #0 {
  %3 = icmp eq i8* %1, null
  br i1 %3, label %27, label %4

4:                                                ; preds = %2
  %5 = load i8, i8* %1, align 1
  %6 = icmp eq i8 %5, 118
  br i1 %6, label %7, label %27

7:                                                ; preds = %4
  %8 = getelementptr inbounds i8, i8* %1, i64 1
  %9 = load i8, i8* %8, align 1
  %10 = icmp eq i8 %9, 107
  br i1 %10, label %11, label %27

11:                                               ; preds = %7
  %12 = getelementptr inbounds i8, i8* %1, i64 2
  %13 = tail call i32 @strcmp(i8* %12, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.193, i64 0, i64 0)) #6
  %14 = icmp eq i32 %13, 0
  br i1 %14, label %45, label %15

15:                                               ; preds = %11
  %16 = tail call i32 @strcmp(i8* %12, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.194, i64 0, i64 0)) #6
  %17 = icmp eq i32 %16, 0
  br i1 %17, label %45, label %18

18:                                               ; preds = %15
  %19 = tail call i32 @strcmp(i8* %12, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.195, i64 0, i64 0)) #6
  %20 = icmp eq i32 %19, 0
  br i1 %20, label %45, label %21

21:                                               ; preds = %18
  %22 = tail call i32 @strcmp(i8* %12, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.196, i64 0, i64 0)) #6
  %23 = icmp eq i32 %22, 0
  br i1 %23, label %45, label %24

24:                                               ; preds = %21
  %25 = tail call i32 @strcmp(i8* %12, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.197, i64 0, i64 0)) #6
  %26 = icmp eq i32 %25, 0
  br i1 %26, label %45, label %27

27:                                               ; preds = %7, %4, %2, %24
  %28 = tail call i32 @strcmp(i8* %1, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str, i64 0, i64 0)) #6
  %29 = icmp eq i32 %28, 0
  br i1 %29, label %45, label %30

30:                                               ; preds = %27
  %31 = bitcast %struct.VkDevice_T* %0 to %struct.VkLayerDispatchTable_**
  %32 = load %struct.VkLayerDispatchTable_*, %struct.VkLayerDispatchTable_** %31, align 8
  %33 = icmp eq %struct.VkLayerDispatchTable_* %32, null
  br i1 %33, label %45, label %34

34:                                               ; preds = %30
  %35 = tail call i8* @loader_lookup_device_dispatch_table(%struct.VkLayerDispatchTable_* nonnull %32, i8* %1) #7
  %36 = icmp eq i8* %35, null
  br i1 %36, label %39, label %37

37:                                               ; preds = %34
  %38 = bitcast i8* %35 to void ()*
  br label %45

39:                                               ; preds = %34
  %40 = getelementptr inbounds %struct.VkLayerDispatchTable_, %struct.VkLayerDispatchTable_* %32, i64 0, i32 0
  %41 = load void ()* (%struct.VkDevice_T*, i8*)*, void ()* (%struct.VkDevice_T*, i8*)** %40, align 8
  %42 = icmp eq void ()* (%struct.VkDevice_T*, i8*)* %41, null
  br i1 %42, label %45, label %43

43:                                               ; preds = %39
  %44 = tail call void ()* %41(%struct.VkDevice_T* %0, i8* %1) #7
  br label %45

45:                                               ; preds = %21, %18, %15, %11, %24, %37, %43, %30, %39, %27
  %46 = phi void ()* [ null, %27 ], [ %38, %37 ], [ %44, %43 ], [ null, %30 ], [ null, %39 ], [ bitcast (void (%struct.VkDevice_T*, %struct.VkDeviceQueueInfo2*, %struct.VkQueue_T**)* @vkGetDeviceQueue2 to void ()*), %21 ], [ bitcast (void (%struct.VkDevice_T*, i32, i32, %struct.VkQueue_T**)* @vkGetDeviceQueue to void ()*), %18 ], [ bitcast (void (%struct.VkDevice_T*, %struct.VkAllocationCallbacks*)* @vkDestroyDevice to void ()*), %15 ], [ bitcast (void ()* (%struct.VkDevice_T*, i8*)* @vkGetDeviceProcAddr to void ()*), %11 ], [ bitcast (i32 (%struct.VkDevice_T*, %struct.VkCommandBufferAllocateInfo*, %struct.VkCommandBuffer_T**)* @vkAllocateCommandBuffers to void ()*), %24 ]
  ret void ()* %46
}

; Function Attrs: nofree nounwind readonly
declare i32 @strcmp(i8* nocapture, i8* nocapture) local_unnamed_addr #3

declare i8* @loader_lookup_device_dispatch_table(%struct.VkLayerDispatchTable_*, i8*) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define i32 @vkEnumerateInstanceExtensionProperties(i8*, i32*, %struct.VkExtensionProperties*) #0 {
  %4 = alloca %struct.VkEnumerateInstanceExtensionPropertiesChain, align 8
  %5 = alloca %struct.loader_layer_list, align 8
  store %struct.loader_instance* null, %struct.loader_instance** @tls_instance, align 8
  %6 = bitcast %struct.VkEnumerateInstanceExtensionPropertiesChain* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %6) #7
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %6, i8* align 8 bitcast ({ %struct.VkChainHeader, [4 x i8], i32 (%struct.VkEnumerateInstanceExtensionPropertiesChain*, i8*, i32*, %struct.VkExtensionProperties*)*, %struct.VkEnumerateInstanceExtensionPropertiesChain* }* @__const.vkEnumerateInstanceExtensionProperties.chain_tail to i8*), i64 32, i1 false)
  %7 = bitcast %struct.loader_layer_list* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %7) #7
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %7, i8 0, i64 24, i1 false)
  call void @loaderScanForImplicitLayers(%struct.loader_instance* null, %struct.loader_layer_list* nonnull %5) #7
  %8 = getelementptr inbounds %struct.loader_layer_list, %struct.loader_layer_list* %5, i64 0, i32 1
  %9 = load i32, i32* %8, align 8
  %10 = zext i32 %9 to i64
  %11 = shl nuw nsw i64 %10, 3
  %12 = call noalias i8* @malloc(i64 %11) #7
  %13 = bitcast i8* %12 to i8**
  %14 = icmp ne i8* %12, null
  %15 = icmp eq i32 %9, 0
  %16 = or i1 %15, %14
  br i1 %16, label %17, label %100

17:                                               ; preds = %3
  br i1 %15, label %71, label %18

18:                                               ; preds = %17
  %19 = getelementptr inbounds %struct.loader_layer_list, %struct.loader_layer_list* %5, i64 0, i32 2
  br label %20

20:                                               ; preds = %18, %64
  %21 = phi i64 [ 0, %18 ], [ %67, %64 ]
  %22 = phi i64 [ 0, %18 ], [ %66, %64 ]
  %23 = phi %struct.VkEnumerateInstanceExtensionPropertiesChain* [ %4, %18 ], [ %65, %64 ]
  %24 = load %struct.loader_layer_properties*, %struct.loader_layer_properties** %19, align 8
  %25 = getelementptr inbounds %struct.loader_layer_properties, %struct.loader_layer_properties* %24, i64 %21
  %26 = call zeroext i1 @loaderImplicitLayerIsEnabled(%struct.loader_instance* null, %struct.loader_layer_properties* %25) #7
  br i1 %26, label %27, label %64

27:                                               ; preds = %20
  %28 = load %struct.loader_layer_properties*, %struct.loader_layer_properties** %19, align 8
  %29 = getelementptr inbounds %struct.loader_layer_properties, %struct.loader_layer_properties* %28, i64 %21, i32 12, i32 0, i64 0
  %30 = load i8, i8* %29, align 8
  %31 = icmp eq i8 %30, 0
  br i1 %31, label %64, label %32

32:                                               ; preds = %27
  %33 = getelementptr inbounds %struct.loader_layer_properties, %struct.loader_layer_properties* %28, i64 %21, i32 3, i64 0
  %34 = call i8* @dlopen(i8* %33, i32 1) #7
  %35 = icmp eq i8* %34, null
  br i1 %35, label %36, label %39

36:                                               ; preds = %32
  %37 = load %struct.loader_layer_properties*, %struct.loader_layer_properties** %19, align 8
  %38 = getelementptr inbounds %struct.loader_layer_properties, %struct.loader_layer_properties* %37, i64 %21, i32 3, i64 0
  call void (%struct.loader_instance*, i32, i32, i8*, ...) @loader_log(%struct.loader_instance* null, i32 2, i32 0, i8* getelementptr inbounds ([47 x i8], [47 x i8]* @.str.1, i64 0, i64 0), i8* getelementptr inbounds ([39 x i8], [39 x i8]* @__FUNCTION__.vkEnumerateInstanceExtensionProperties, i64 0, i64 0), i8* %38) #7
  br label %64

39:                                               ; preds = %32
  %40 = add i64 %22, 1
  %41 = getelementptr inbounds i8*, i8** %13, i64 %22
  store i8* %34, i8** %41, align 8
  %42 = load %struct.loader_layer_properties*, %struct.loader_layer_properties** %19, align 8
  %43 = getelementptr inbounds %struct.loader_layer_properties, %struct.loader_layer_properties* %42, i64 %21, i32 12, i32 0, i64 0
  %44 = call i8* @dlsym(i8* nonnull %34, i8* %43) #7
  %45 = icmp eq i8* %44, null
  br i1 %45, label %46, label %50

46:                                               ; preds = %39
  %47 = load %struct.loader_layer_properties*, %struct.loader_layer_properties** %19, align 8
  %48 = getelementptr inbounds %struct.loader_layer_properties, %struct.loader_layer_properties* %47, i64 %21, i32 12, i32 0, i64 0
  %49 = getelementptr inbounds %struct.loader_layer_properties, %struct.loader_layer_properties* %47, i64 %21, i32 3, i64 0
  call void (%struct.loader_instance*, i32, i32, i8*, ...) @loader_log(%struct.loader_instance* null, i32 2, i32 0, i8* getelementptr inbounds ([65 x i8], [65 x i8]* @.str.2, i64 0, i64 0), i8* getelementptr inbounds ([39 x i8], [39 x i8]* @__FUNCTION__.vkEnumerateInstanceExtensionProperties, i64 0, i64 0), i8* %48, i8* %49) #7
  br label %64

50:                                               ; preds = %39
  %51 = call noalias i8* @malloc(i64 32) #7
  %52 = icmp eq i8* %51, null
  br i1 %52, label %79, label %53

53:                                               ; preds = %50
  %54 = bitcast i8* %51 to %struct.VkEnumerateInstanceExtensionPropertiesChain*
  %55 = bitcast i8* %51 to i32*
  store i32 1, i32* %55, align 8
  %56 = getelementptr inbounds i8, i8* %51, i64 4
  %57 = bitcast i8* %56 to i32*
  store i32 1, i32* %57, align 4
  %58 = getelementptr inbounds i8, i8* %51, i64 8
  %59 = bitcast i8* %58 to i32*
  store i32 32, i32* %59, align 8
  %60 = getelementptr inbounds i8, i8* %51, i64 16
  %61 = bitcast i8* %60 to i8**
  store i8* %44, i8** %61, align 8
  %62 = getelementptr inbounds i8, i8* %51, i64 24
  %63 = bitcast i8* %62 to %struct.VkEnumerateInstanceExtensionPropertiesChain**
  store %struct.VkEnumerateInstanceExtensionPropertiesChain* %23, %struct.VkEnumerateInstanceExtensionPropertiesChain** %63, align 8
  br label %64

64:                                               ; preds = %53, %46, %36, %20, %27
  %65 = phi %struct.VkEnumerateInstanceExtensionPropertiesChain* [ %23, %27 ], [ %23, %20 ], [ %54, %53 ], [ %23, %46 ], [ %23, %36 ]
  %66 = phi i64 [ %22, %27 ], [ %22, %20 ], [ %40, %53 ], [ %40, %46 ], [ %22, %36 ]
  %67 = add nuw nsw i64 %21, 1
  %68 = load i32, i32* %8, align 8
  %69 = zext i32 %68 to i64
  %70 = icmp ult i64 %67, %69
  br i1 %70, label %20, label %71

71:                                               ; preds = %64, %17
  %72 = phi %struct.VkEnumerateInstanceExtensionPropertiesChain* [ %4, %17 ], [ %65, %64 ]
  %73 = phi i64 [ 0, %17 ], [ %66, %64 ]
  %74 = getelementptr inbounds %struct.VkEnumerateInstanceExtensionPropertiesChain, %struct.VkEnumerateInstanceExtensionPropertiesChain* %72, i64 0, i32 1
  %75 = load i32 (%struct.VkEnumerateInstanceExtensionPropertiesChain*, i8*, i32*, %struct.VkExtensionProperties*)*, i32 (%struct.VkEnumerateInstanceExtensionPropertiesChain*, i8*, i32*, %struct.VkExtensionProperties*)** %74, align 8
  %76 = getelementptr inbounds %struct.VkEnumerateInstanceExtensionPropertiesChain, %struct.VkEnumerateInstanceExtensionPropertiesChain* %72, i64 0, i32 2
  %77 = load %struct.VkEnumerateInstanceExtensionPropertiesChain*, %struct.VkEnumerateInstanceExtensionPropertiesChain** %76, align 8
  %78 = call i32 %75(%struct.VkEnumerateInstanceExtensionPropertiesChain* %77, i8* %0, i32* %1, %struct.VkExtensionProperties* %2) #7
  br label %79

79:                                               ; preds = %50, %71
  %80 = phi %struct.VkEnumerateInstanceExtensionPropertiesChain* [ %72, %71 ], [ %23, %50 ]
  %81 = phi i64 [ %73, %71 ], [ %40, %50 ]
  %82 = phi i32 [ %78, %71 ], [ -1, %50 ]
  call void @loaderDeleteLayerListAndProperties(%struct.loader_instance* null, %struct.loader_layer_list* nonnull %5) #7
  %83 = icmp eq %struct.VkEnumerateInstanceExtensionPropertiesChain* %80, %4
  br i1 %83, label %84, label %86

84:                                               ; preds = %86, %79
  %85 = icmp eq i64 %81, 0
  br i1 %85, label %92, label %93

86:                                               ; preds = %79, %86
  %87 = phi %struct.VkEnumerateInstanceExtensionPropertiesChain* [ %89, %86 ], [ %80, %79 ]
  %88 = getelementptr inbounds %struct.VkEnumerateInstanceExtensionPropertiesChain, %struct.VkEnumerateInstanceExtensionPropertiesChain* %87, i64 0, i32 2
  %89 = load %struct.VkEnumerateInstanceExtensionPropertiesChain*, %struct.VkEnumerateInstanceExtensionPropertiesChain** %88, align 8
  %90 = bitcast %struct.VkEnumerateInstanceExtensionPropertiesChain* %87 to i8*
  call void @free(i8* %90) #7
  %91 = icmp eq %struct.VkEnumerateInstanceExtensionPropertiesChain* %89, %4
  br i1 %91, label %84, label %86

92:                                               ; preds = %93, %84
  call void @free(i8* %12) #7
  br label %100

93:                                               ; preds = %84, %93
  %94 = phi i64 [ %98, %93 ], [ 0, %84 ]
  %95 = getelementptr inbounds i8*, i8** %13, i64 %94
  %96 = load i8*, i8** %95, align 8
  %97 = call i32 @dlclose(i8* %96) #7
  %98 = add nuw i64 %94, 1
  %99 = icmp eq i64 %98, %81
  br i1 %99, label %92, label %93

100:                                              ; preds = %3, %92
  %101 = phi i32 [ %82, %92 ], [ -1, %3 ]
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %7) #7
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %6) #7
  ret i32 %101
}

declare i32 @terminator_EnumerateInstanceExtensionProperties(%struct.VkEnumerateInstanceExtensionPropertiesChain*, i8*, i32*, %struct.VkExtensionProperties*) #2

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

declare void @loaderScanForImplicitLayers(%struct.loader_instance*, %struct.loader_layer_list*) local_unnamed_addr #2

; Function Attrs: nofree nounwind
declare noalias i8* @malloc(i64) local_unnamed_addr #4

declare zeroext i1 @loaderImplicitLayerIsEnabled(%struct.loader_instance*, %struct.loader_layer_properties*) local_unnamed_addr #2

declare void @loader_log(%struct.loader_instance*, i32, i32, i8*, ...) local_unnamed_addr #2

declare void @loaderDeleteLayerListAndProperties(%struct.loader_instance*, %struct.loader_layer_list*) local_unnamed_addr #2

; Function Attrs: nounwind
declare void @free(i8* nocapture) local_unnamed_addr #5

; Function Attrs: nounwind ssp uwtable
define i32 @vkEnumerateInstanceLayerProperties(i32*, %struct.VkLayerProperties*) #0 {
  %3 = alloca %struct.VkEnumerateInstanceLayerPropertiesChain, align 8
  %4 = alloca %struct.loader_layer_list, align 8
  store %struct.loader_instance* null, %struct.loader_instance** @tls_instance, align 8
  %5 = bitcast %struct.VkEnumerateInstanceLayerPropertiesChain* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %5) #7
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %5, i8* align 8 bitcast ({ %struct.VkChainHeader, [4 x i8], i32 (%struct.VkEnumerateInstanceLayerPropertiesChain*, i32*, %struct.VkLayerProperties*)*, %struct.VkEnumerateInstanceLayerPropertiesChain* }* @__const.vkEnumerateInstanceLayerProperties.chain_tail to i8*), i64 32, i1 false)
  %6 = bitcast %struct.loader_layer_list* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %6) #7
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %6, i8 0, i64 24, i1 false)
  call void @loaderScanForImplicitLayers(%struct.loader_instance* null, %struct.loader_layer_list* nonnull %4) #7
  %7 = getelementptr inbounds %struct.loader_layer_list, %struct.loader_layer_list* %4, i64 0, i32 1
  %8 = load i32, i32* %7, align 8
  %9 = zext i32 %8 to i64
  %10 = shl nuw nsw i64 %9, 3
  %11 = call noalias i8* @malloc(i64 %10) #7
  %12 = bitcast i8* %11 to i8**
  %13 = icmp ne i8* %11, null
  %14 = icmp eq i32 %8, 0
  %15 = or i1 %14, %13
  br i1 %15, label %16, label %99

16:                                               ; preds = %2
  br i1 %14, label %70, label %17

17:                                               ; preds = %16
  %18 = getelementptr inbounds %struct.loader_layer_list, %struct.loader_layer_list* %4, i64 0, i32 2
  br label %19

19:                                               ; preds = %17, %63
  %20 = phi i64 [ 0, %17 ], [ %66, %63 ]
  %21 = phi i64 [ 0, %17 ], [ %65, %63 ]
  %22 = phi %struct.VkEnumerateInstanceLayerPropertiesChain* [ %3, %17 ], [ %64, %63 ]
  %23 = load %struct.loader_layer_properties*, %struct.loader_layer_properties** %18, align 8
  %24 = getelementptr inbounds %struct.loader_layer_properties, %struct.loader_layer_properties* %23, i64 %20
  %25 = call zeroext i1 @loaderImplicitLayerIsEnabled(%struct.loader_instance* null, %struct.loader_layer_properties* %24) #7
  br i1 %25, label %26, label %63

26:                                               ; preds = %19
  %27 = load %struct.loader_layer_properties*, %struct.loader_layer_properties** %18, align 8
  %28 = getelementptr inbounds %struct.loader_layer_properties, %struct.loader_layer_properties* %27, i64 %20, i32 12, i32 1, i64 0
  %29 = load i8, i8* %28, align 8
  %30 = icmp eq i8 %29, 0
  br i1 %30, label %63, label %31

31:                                               ; preds = %26
  %32 = getelementptr inbounds %struct.loader_layer_properties, %struct.loader_layer_properties* %27, i64 %20, i32 3, i64 0
  %33 = call i8* @dlopen(i8* %32, i32 1) #7
  %34 = icmp eq i8* %33, null
  br i1 %34, label %35, label %38

35:                                               ; preds = %31
  %36 = load %struct.loader_layer_properties*, %struct.loader_layer_properties** %18, align 8
  %37 = getelementptr inbounds %struct.loader_layer_properties, %struct.loader_layer_properties* %36, i64 %20, i32 3, i64 0
  call void (%struct.loader_instance*, i32, i32, i8*, ...) @loader_log(%struct.loader_instance* null, i32 2, i32 0, i8* getelementptr inbounds ([47 x i8], [47 x i8]* @.str.1, i64 0, i64 0), i8* getelementptr inbounds ([35 x i8], [35 x i8]* @__FUNCTION__.vkEnumerateInstanceLayerProperties, i64 0, i64 0), i8* %37) #7
  br label %63

38:                                               ; preds = %31
  %39 = add i64 %21, 1
  %40 = getelementptr inbounds i8*, i8** %12, i64 %21
  store i8* %33, i8** %40, align 8
  %41 = load %struct.loader_layer_properties*, %struct.loader_layer_properties** %18, align 8
  %42 = getelementptr inbounds %struct.loader_layer_properties, %struct.loader_layer_properties* %41, i64 %20, i32 12, i32 1, i64 0
  %43 = call i8* @dlsym(i8* nonnull %33, i8* %42) #7
  %44 = icmp eq i8* %43, null
  br i1 %44, label %45, label %49

45:                                               ; preds = %38
  %46 = load %struct.loader_layer_properties*, %struct.loader_layer_properties** %18, align 8
  %47 = getelementptr inbounds %struct.loader_layer_properties, %struct.loader_layer_properties* %46, i64 %20, i32 12, i32 1, i64 0
  %48 = getelementptr inbounds %struct.loader_layer_properties, %struct.loader_layer_properties* %46, i64 %20, i32 3, i64 0
  call void (%struct.loader_instance*, i32, i32, i8*, ...) @loader_log(%struct.loader_instance* null, i32 2, i32 0, i8* getelementptr inbounds ([65 x i8], [65 x i8]* @.str.2, i64 0, i64 0), i8* getelementptr inbounds ([35 x i8], [35 x i8]* @__FUNCTION__.vkEnumerateInstanceLayerProperties, i64 0, i64 0), i8* %47, i8* %48) #7
  br label %63

49:                                               ; preds = %38
  %50 = call noalias i8* @malloc(i64 32) #7
  %51 = icmp eq i8* %50, null
  br i1 %51, label %78, label %52

52:                                               ; preds = %49
  %53 = bitcast i8* %50 to %struct.VkEnumerateInstanceLayerPropertiesChain*
  %54 = bitcast i8* %50 to i32*
  store i32 2, i32* %54, align 8
  %55 = getelementptr inbounds i8, i8* %50, i64 4
  %56 = bitcast i8* %55 to i32*
  store i32 1, i32* %56, align 4
  %57 = getelementptr inbounds i8, i8* %50, i64 8
  %58 = bitcast i8* %57 to i32*
  store i32 32, i32* %58, align 8
  %59 = getelementptr inbounds i8, i8* %50, i64 16
  %60 = bitcast i8* %59 to i8**
  store i8* %43, i8** %60, align 8
  %61 = getelementptr inbounds i8, i8* %50, i64 24
  %62 = bitcast i8* %61 to %struct.VkEnumerateInstanceLayerPropertiesChain**
  store %struct.VkEnumerateInstanceLayerPropertiesChain* %22, %struct.VkEnumerateInstanceLayerPropertiesChain** %62, align 8
  br label %63

63:                                               ; preds = %52, %45, %35, %19, %26
  %64 = phi %struct.VkEnumerateInstanceLayerPropertiesChain* [ %22, %26 ], [ %22, %19 ], [ %53, %52 ], [ %22, %45 ], [ %22, %35 ]
  %65 = phi i64 [ %21, %26 ], [ %21, %19 ], [ %39, %52 ], [ %39, %45 ], [ %21, %35 ]
  %66 = add nuw nsw i64 %20, 1
  %67 = load i32, i32* %7, align 8
  %68 = zext i32 %67 to i64
  %69 = icmp ult i64 %66, %68
  br i1 %69, label %19, label %70

70:                                               ; preds = %63, %16
  %71 = phi %struct.VkEnumerateInstanceLayerPropertiesChain* [ %3, %16 ], [ %64, %63 ]
  %72 = phi i64 [ 0, %16 ], [ %65, %63 ]
  %73 = getelementptr inbounds %struct.VkEnumerateInstanceLayerPropertiesChain, %struct.VkEnumerateInstanceLayerPropertiesChain* %71, i64 0, i32 1
  %74 = load i32 (%struct.VkEnumerateInstanceLayerPropertiesChain*, i32*, %struct.VkLayerProperties*)*, i32 (%struct.VkEnumerateInstanceLayerPropertiesChain*, i32*, %struct.VkLayerProperties*)** %73, align 8
  %75 = getelementptr inbounds %struct.VkEnumerateInstanceLayerPropertiesChain, %struct.VkEnumerateInstanceLayerPropertiesChain* %71, i64 0, i32 2
  %76 = load %struct.VkEnumerateInstanceLayerPropertiesChain*, %struct.VkEnumerateInstanceLayerPropertiesChain** %75, align 8
  %77 = call i32 %74(%struct.VkEnumerateInstanceLayerPropertiesChain* %76, i32* %0, %struct.VkLayerProperties* %1) #7
  br label %78

78:                                               ; preds = %49, %70
  %79 = phi %struct.VkEnumerateInstanceLayerPropertiesChain* [ %71, %70 ], [ %22, %49 ]
  %80 = phi i64 [ %72, %70 ], [ %39, %49 ]
  %81 = phi i32 [ %77, %70 ], [ -1, %49 ]
  call void @loaderDeleteLayerListAndProperties(%struct.loader_instance* null, %struct.loader_layer_list* nonnull %4) #7
  %82 = icmp eq %struct.VkEnumerateInstanceLayerPropertiesChain* %79, %3
  br i1 %82, label %83, label %85

83:                                               ; preds = %85, %78
  %84 = icmp eq i64 %80, 0
  br i1 %84, label %91, label %92

85:                                               ; preds = %78, %85
  %86 = phi %struct.VkEnumerateInstanceLayerPropertiesChain* [ %88, %85 ], [ %79, %78 ]
  %87 = getelementptr inbounds %struct.VkEnumerateInstanceLayerPropertiesChain, %struct.VkEnumerateInstanceLayerPropertiesChain* %86, i64 0, i32 2
  %88 = load %struct.VkEnumerateInstanceLayerPropertiesChain*, %struct.VkEnumerateInstanceLayerPropertiesChain** %87, align 8
  %89 = bitcast %struct.VkEnumerateInstanceLayerPropertiesChain* %86 to i8*
  call void @free(i8* %89) #7
  %90 = icmp eq %struct.VkEnumerateInstanceLayerPropertiesChain* %88, %3
  br i1 %90, label %83, label %85

91:                                               ; preds = %92, %83
  call void @free(i8* %11) #7
  br label %99

92:                                               ; preds = %83, %92
  %93 = phi i64 [ %97, %92 ], [ 0, %83 ]
  %94 = getelementptr inbounds i8*, i8** %12, i64 %93
  %95 = load i8*, i8** %94, align 8
  %96 = call i32 @dlclose(i8* %95) #7
  %97 = add nuw i64 %93, 1
  %98 = icmp eq i64 %97, %80
  br i1 %98, label %91, label %92

99:                                               ; preds = %2, %91
  %100 = phi i32 [ %81, %91 ], [ -1, %2 ]
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %6) #7
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %5) #7
  ret i32 %100
}

declare i32 @terminator_EnumerateInstanceLayerProperties(%struct.VkEnumerateInstanceLayerPropertiesChain*, i32*, %struct.VkLayerProperties*) #2

; Function Attrs: nounwind ssp uwtable
define i32 @vkEnumerateInstanceVersion(i32*) #0 {
  %2 = alloca %struct.VkEnumerateInstanceVersionChain, align 8
  %3 = alloca %struct.loader_layer_list, align 8
  store %struct.loader_instance* null, %struct.loader_instance** @tls_instance, align 8
  %4 = bitcast %struct.VkEnumerateInstanceVersionChain* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %4) #7
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %4, i8* align 8 bitcast ({ %struct.VkChainHeader, [4 x i8], i32 (%struct.VkEnumerateInstanceVersionChain*, i32*)*, %struct.VkEnumerateInstanceVersionChain* }* @__const.vkEnumerateInstanceVersion.chain_tail to i8*), i64 32, i1 false)
  %5 = bitcast %struct.loader_layer_list* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %5) #7
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %5, i8 0, i64 24, i1 false)
  call void @loaderScanForImplicitLayers(%struct.loader_instance* null, %struct.loader_layer_list* nonnull %3) #7
  %6 = getelementptr inbounds %struct.loader_layer_list, %struct.loader_layer_list* %3, i64 0, i32 1
  %7 = load i32, i32* %6, align 8
  %8 = zext i32 %7 to i64
  %9 = shl nuw nsw i64 %8, 3
  %10 = call noalias i8* @malloc(i64 %9) #7
  %11 = bitcast i8* %10 to i8**
  %12 = icmp ne i8* %10, null
  %13 = icmp eq i32 %7, 0
  %14 = or i1 %13, %12
  br i1 %14, label %15, label %98

15:                                               ; preds = %1
  br i1 %13, label %69, label %16

16:                                               ; preds = %15
  %17 = getelementptr inbounds %struct.loader_layer_list, %struct.loader_layer_list* %3, i64 0, i32 2
  br label %18

18:                                               ; preds = %16, %62
  %19 = phi i64 [ 0, %16 ], [ %65, %62 ]
  %20 = phi i64 [ 0, %16 ], [ %64, %62 ]
  %21 = phi %struct.VkEnumerateInstanceVersionChain* [ %2, %16 ], [ %63, %62 ]
  %22 = load %struct.loader_layer_properties*, %struct.loader_layer_properties** %17, align 8
  %23 = getelementptr inbounds %struct.loader_layer_properties, %struct.loader_layer_properties* %22, i64 %19
  %24 = call zeroext i1 @loaderImplicitLayerIsEnabled(%struct.loader_instance* null, %struct.loader_layer_properties* %23) #7
  br i1 %24, label %25, label %62

25:                                               ; preds = %18
  %26 = load %struct.loader_layer_properties*, %struct.loader_layer_properties** %17, align 8
  %27 = getelementptr inbounds %struct.loader_layer_properties, %struct.loader_layer_properties* %26, i64 %19, i32 12, i32 2, i64 0
  %28 = load i8, i8* %27, align 8
  %29 = icmp eq i8 %28, 0
  br i1 %29, label %62, label %30

30:                                               ; preds = %25
  %31 = getelementptr inbounds %struct.loader_layer_properties, %struct.loader_layer_properties* %26, i64 %19, i32 3, i64 0
  %32 = call i8* @dlopen(i8* %31, i32 1) #7
  %33 = icmp eq i8* %32, null
  br i1 %33, label %34, label %37

34:                                               ; preds = %30
  %35 = load %struct.loader_layer_properties*, %struct.loader_layer_properties** %17, align 8
  %36 = getelementptr inbounds %struct.loader_layer_properties, %struct.loader_layer_properties* %35, i64 %19, i32 3, i64 0
  call void (%struct.loader_instance*, i32, i32, i8*, ...) @loader_log(%struct.loader_instance* null, i32 2, i32 0, i8* getelementptr inbounds ([47 x i8], [47 x i8]* @.str.1, i64 0, i64 0), i8* getelementptr inbounds ([27 x i8], [27 x i8]* @__FUNCTION__.vkEnumerateInstanceVersion, i64 0, i64 0), i8* %36) #7
  br label %62

37:                                               ; preds = %30
  %38 = add i64 %20, 1
  %39 = getelementptr inbounds i8*, i8** %11, i64 %20
  store i8* %32, i8** %39, align 8
  %40 = load %struct.loader_layer_properties*, %struct.loader_layer_properties** %17, align 8
  %41 = getelementptr inbounds %struct.loader_layer_properties, %struct.loader_layer_properties* %40, i64 %19, i32 12, i32 2, i64 0
  %42 = call i8* @dlsym(i8* nonnull %32, i8* %41) #7
  %43 = icmp eq i8* %42, null
  br i1 %43, label %44, label %48

44:                                               ; preds = %37
  %45 = load %struct.loader_layer_properties*, %struct.loader_layer_properties** %17, align 8
  %46 = getelementptr inbounds %struct.loader_layer_properties, %struct.loader_layer_properties* %45, i64 %19, i32 12, i32 2, i64 0
  %47 = getelementptr inbounds %struct.loader_layer_properties, %struct.loader_layer_properties* %45, i64 %19, i32 3, i64 0
  call void (%struct.loader_instance*, i32, i32, i8*, ...) @loader_log(%struct.loader_instance* null, i32 2, i32 0, i8* getelementptr inbounds ([65 x i8], [65 x i8]* @.str.2, i64 0, i64 0), i8* getelementptr inbounds ([27 x i8], [27 x i8]* @__FUNCTION__.vkEnumerateInstanceVersion, i64 0, i64 0), i8* %46, i8* %47) #7
  br label %62

48:                                               ; preds = %37
  %49 = call noalias i8* @malloc(i64 32) #7
  %50 = icmp eq i8* %49, null
  br i1 %50, label %77, label %51

51:                                               ; preds = %48
  %52 = bitcast i8* %49 to %struct.VkEnumerateInstanceVersionChain*
  %53 = bitcast i8* %49 to i32*
  store i32 3, i32* %53, align 8
  %54 = getelementptr inbounds i8, i8* %49, i64 4
  %55 = bitcast i8* %54 to i32*
  store i32 1, i32* %55, align 4
  %56 = getelementptr inbounds i8, i8* %49, i64 8
  %57 = bitcast i8* %56 to i32*
  store i32 32, i32* %57, align 8
  %58 = getelementptr inbounds i8, i8* %49, i64 16
  %59 = bitcast i8* %58 to i8**
  store i8* %42, i8** %59, align 8
  %60 = getelementptr inbounds i8, i8* %49, i64 24
  %61 = bitcast i8* %60 to %struct.VkEnumerateInstanceVersionChain**
  store %struct.VkEnumerateInstanceVersionChain* %21, %struct.VkEnumerateInstanceVersionChain** %61, align 8
  br label %62

62:                                               ; preds = %51, %44, %34, %18, %25
  %63 = phi %struct.VkEnumerateInstanceVersionChain* [ %21, %25 ], [ %21, %18 ], [ %52, %51 ], [ %21, %44 ], [ %21, %34 ]
  %64 = phi i64 [ %20, %25 ], [ %20, %18 ], [ %38, %51 ], [ %38, %44 ], [ %20, %34 ]
  %65 = add nuw nsw i64 %19, 1
  %66 = load i32, i32* %6, align 8
  %67 = zext i32 %66 to i64
  %68 = icmp ult i64 %65, %67
  br i1 %68, label %18, label %69

69:                                               ; preds = %62, %15
  %70 = phi %struct.VkEnumerateInstanceVersionChain* [ %2, %15 ], [ %63, %62 ]
  %71 = phi i64 [ 0, %15 ], [ %64, %62 ]
  %72 = getelementptr inbounds %struct.VkEnumerateInstanceVersionChain, %struct.VkEnumerateInstanceVersionChain* %70, i64 0, i32 1
  %73 = load i32 (%struct.VkEnumerateInstanceVersionChain*, i32*)*, i32 (%struct.VkEnumerateInstanceVersionChain*, i32*)** %72, align 8
  %74 = getelementptr inbounds %struct.VkEnumerateInstanceVersionChain, %struct.VkEnumerateInstanceVersionChain* %70, i64 0, i32 2
  %75 = load %struct.VkEnumerateInstanceVersionChain*, %struct.VkEnumerateInstanceVersionChain** %74, align 8
  %76 = call i32 %73(%struct.VkEnumerateInstanceVersionChain* %75, i32* %0) #7
  br label %77

77:                                               ; preds = %48, %69
  %78 = phi %struct.VkEnumerateInstanceVersionChain* [ %70, %69 ], [ %21, %48 ]
  %79 = phi i64 [ %71, %69 ], [ %38, %48 ]
  %80 = phi i32 [ %76, %69 ], [ -1, %48 ]
  call void @loaderDeleteLayerListAndProperties(%struct.loader_instance* null, %struct.loader_layer_list* nonnull %3) #7
  %81 = icmp eq %struct.VkEnumerateInstanceVersionChain* %78, %2
  br i1 %81, label %82, label %84

82:                                               ; preds = %84, %77
  %83 = icmp eq i64 %79, 0
  br i1 %83, label %90, label %91

84:                                               ; preds = %77, %84
  %85 = phi %struct.VkEnumerateInstanceVersionChain* [ %87, %84 ], [ %78, %77 ]
  %86 = getelementptr inbounds %struct.VkEnumerateInstanceVersionChain, %struct.VkEnumerateInstanceVersionChain* %85, i64 0, i32 2
  %87 = load %struct.VkEnumerateInstanceVersionChain*, %struct.VkEnumerateInstanceVersionChain** %86, align 8
  %88 = bitcast %struct.VkEnumerateInstanceVersionChain* %85 to i8*
  call void @free(i8* %88) #7
  %89 = icmp eq %struct.VkEnumerateInstanceVersionChain* %87, %2
  br i1 %89, label %82, label %84

90:                                               ; preds = %91, %82
  call void @free(i8* %10) #7
  br label %98

91:                                               ; preds = %82, %91
  %92 = phi i64 [ %96, %91 ], [ 0, %82 ]
  %93 = getelementptr inbounds i8*, i8** %11, i64 %92
  %94 = load i8*, i8** %93, align 8
  %95 = call i32 @dlclose(i8* %94) #7
  %96 = add nuw i64 %92, 1
  %97 = icmp eq i64 %96, %79
  br i1 %97, label %90, label %91

98:                                               ; preds = %1, %90
  %99 = phi i32 [ %80, %90 ], [ -1, %1 ]
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %5) #7
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %4) #7
  ret i32 %99
}

declare i32 @terminator_EnumerateInstanceVersion(%struct.VkEnumerateInstanceVersionChain*, i32*) #2

; Function Attrs: nounwind ssp uwtable
define i32 @vkCreateInstance(%struct.VkInstanceCreateInfo* readonly, %struct.VkAllocationCallbacks*, %struct.VkInstance_T** nocapture) #0 {
  %4 = alloca %struct.VkInstance_T*, align 8
  %5 = alloca %struct.VkInstanceCreateInfo, align 8
  %6 = bitcast %struct.VkInstance_T** %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %6) #7
  store %struct.VkInstance_T* null, %struct.VkInstance_T** %4, align 8
  %7 = icmp ne %struct.VkAllocationCallbacks* %1, null
  br i1 %7, label %8, label %14

8:                                                ; preds = %3
  %9 = getelementptr inbounds %struct.VkAllocationCallbacks, %struct.VkAllocationCallbacks* %1, i64 0, i32 1
  %10 = load i8* (i8*, i64, i64, i32)*, i8* (i8*, i64, i64, i32)** %9, align 8
  %11 = getelementptr inbounds %struct.VkAllocationCallbacks, %struct.VkAllocationCallbacks* %1, i64 0, i32 0
  %12 = load i8*, i8** %11, align 8
  %13 = tail call i8* %10(i8* %12, i64 16392, i64 8, i32 4) #7
  br label %16

14:                                               ; preds = %3
  %15 = tail call noalias i8* @malloc(i64 16392) #7
  br label %16

16:                                               ; preds = %14, %8
  %17 = phi i8* [ %13, %8 ], [ %15, %14 ]
  %18 = bitcast i8* %17 to %struct.loader_instance*
  %19 = bitcast %struct.VkInstanceCreateInfo* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 64, i8* nonnull %19) #7
  %20 = bitcast %struct.VkInstanceCreateInfo* %0 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %19, i8* align 8 %20, i64 64, i1 false)
  %21 = icmp eq i8* %17, null
  br i1 %21, label %191, label %22

22:                                               ; preds = %16
  store i8* %17, i8** bitcast (%struct.loader_instance** @tls_instance to i8**), align 8
  %23 = tail call i32 @pthread_mutex_lock(%union.pthread_mutex_t* nonnull @loader_lock) #7
  tail call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %17, i8 0, i64 16392, i1 false)
  br i1 %7, label %24, label %27

24:                                               ; preds = %22
  %25 = getelementptr inbounds i8, i8* %17, i64 16336
  %26 = bitcast %struct.VkAllocationCallbacks* %1 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %25, i8* nonnull align 8 %26, i64 48, i1 false)
  br label %27

27:                                               ; preds = %24, %22
  %28 = icmp eq %struct.VkInstanceCreateInfo* %0, null
  br i1 %28, label %37, label %29

29:                                               ; preds = %27
  %30 = getelementptr inbounds %struct.VkInstanceCreateInfo, %struct.VkInstanceCreateInfo* %0, i64 0, i32 3
  %31 = load %struct.VkApplicationInfo*, %struct.VkApplicationInfo** %30, align 8
  %32 = icmp eq %struct.VkApplicationInfo* %31, null
  br i1 %32, label %37, label %33

33:                                               ; preds = %29
  %34 = getelementptr inbounds %struct.VkApplicationInfo, %struct.VkApplicationInfo* %31, i64 0, i32 6
  %35 = load i32, i32* %34, align 4
  %36 = icmp eq i32 %35, 0
  br i1 %36, label %37, label %40

37:                                               ; preds = %33, %29, %27
  %38 = getelementptr inbounds i8, i8* %17, i64 8
  %39 = bitcast i8* %38 to i16*
  store i16 1, i16* %39, align 8
  br label %51

40:                                               ; preds = %33
  %41 = lshr i32 %35, 22
  %42 = trunc i32 %41 to i16
  %43 = getelementptr inbounds i8, i8* %17, i64 8
  %44 = bitcast i8* %43 to i16*
  store i16 %42, i16* %44, align 8
  %45 = load %struct.VkApplicationInfo*, %struct.VkApplicationInfo** %30, align 8
  %46 = getelementptr inbounds %struct.VkApplicationInfo, %struct.VkApplicationInfo* %45, i64 0, i32 6
  %47 = load i32, i32* %46, align 4
  %48 = lshr i32 %47, 12
  %49 = trunc i32 %48 to i16
  %50 = and i16 %49, 1023
  br label %51

51:                                               ; preds = %40, %37
  %52 = phi i16 [ %50, %40 ], [ 0, %37 ]
  %53 = getelementptr inbounds i8, i8* %17, i64 10
  %54 = bitcast i8* %53 to i16*
  store i16 %52, i16* %54, align 2
  %55 = getelementptr inbounds i8, i8* %17, i64 16288
  %56 = bitcast i8* %55 to i32*
  store i32 0, i32* %56, align 8
  %57 = getelementptr inbounds i8, i8* %17, i64 16296
  %58 = bitcast i8* %57 to %struct.VkDebugReportCallbackCreateInfoEXT**
  %59 = getelementptr inbounds i8, i8* %17, i64 16304
  %60 = bitcast i8* %59 to %struct.VkDebugReportCallbackEXT_T***
  %61 = getelementptr inbounds i8, i8* %17, i64 16312
  %62 = bitcast i8* %61 to i32*
  %63 = getelementptr inbounds i8, i8* %17, i64 16320
  %64 = bitcast i8* %63 to %struct.VkDebugUtilsMessengerCreateInfoEXT**
  %65 = getelementptr inbounds i8, i8* %17, i64 16328
  %66 = bitcast i8* %65 to %struct.VkDebugUtilsMessengerEXT_T***
  %67 = getelementptr inbounds %struct.VkInstanceCreateInfo, %struct.VkInstanceCreateInfo* %0, i64 0, i32 1
  call void @llvm.memset.p0i8.i64(i8* align 8 %57, i8 0, i64 20, i1 false)
  call void @llvm.memset.p0i8.i64(i8* align 8 %63, i8 0, i64 16, i1 false)
  %68 = load i8*, i8** %67, align 8
  %69 = tail call i32 @util_CopyDebugUtilsMessengerCreateInfos(i8* %68, %struct.VkAllocationCallbacks* %1, i32* %62, %struct.VkDebugUtilsMessengerCreateInfoEXT** %64, %struct.VkDebugUtilsMessengerEXT_T*** %66) #7
  %70 = icmp eq i32 %69, 0
  br i1 %70, label %71, label %130

71:                                               ; preds = %51
  %72 = load i32, i32* %62, align 8
  %73 = icmp eq i32 %72, 0
  br i1 %73, label %79, label %74

74:                                               ; preds = %71
  %75 = load %struct.VkDebugUtilsMessengerCreateInfoEXT*, %struct.VkDebugUtilsMessengerCreateInfoEXT** %64, align 8
  %76 = load %struct.VkDebugUtilsMessengerEXT_T**, %struct.VkDebugUtilsMessengerEXT_T*** %66, align 8
  %77 = tail call i32 @util_CreateDebugUtilsMessengers(%struct.loader_instance* %18, %struct.VkAllocationCallbacks* %1, i32 %72, %struct.VkDebugUtilsMessengerCreateInfoEXT* %75, %struct.VkDebugUtilsMessengerEXT_T** %76) #7
  %78 = icmp eq i32 %77, 0
  br i1 %78, label %79, label %130

79:                                               ; preds = %74, %71
  %80 = load i8*, i8** %67, align 8
  %81 = tail call i32 @util_CopyDebugReportCreateInfos(i8* %80, %struct.VkAllocationCallbacks* %1, i32* %56, %struct.VkDebugReportCallbackCreateInfoEXT** %58, %struct.VkDebugReportCallbackEXT_T*** %60) #7
  %82 = icmp eq i32 %81, 0
  br i1 %82, label %83, label %130

83:                                               ; preds = %79
  %84 = load i32, i32* %56, align 8
  %85 = icmp eq i32 %84, 0
  br i1 %85, label %91, label %86

86:                                               ; preds = %83
  %87 = load %struct.VkDebugReportCallbackCreateInfoEXT*, %struct.VkDebugReportCallbackCreateInfoEXT** %58, align 8
  %88 = load %struct.VkDebugReportCallbackEXT_T**, %struct.VkDebugReportCallbackEXT_T*** %60, align 8
  %89 = tail call i32 @util_CreateDebugReportCallbacks(%struct.loader_instance* %18, %struct.VkAllocationCallbacks* %1, i32 %84, %struct.VkDebugReportCallbackCreateInfoEXT* %87, %struct.VkDebugReportCallbackEXT_T** %88) #7
  %90 = icmp eq i32 %89, 0
  br i1 %90, label %91, label %130

91:                                               ; preds = %86, %83
  %92 = getelementptr inbounds i8, i8* %17, i64 16136
  %93 = bitcast i8* %92 to %struct.loader_layer_list*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %92, i8 0, i64 24, i1 false)
  tail call void @loaderScanForLayers(%struct.loader_instance* nonnull %18, %struct.loader_layer_list* %93) #7
  %94 = getelementptr inbounds %struct.VkInstanceCreateInfo, %struct.VkInstanceCreateInfo* %0, i64 0, i32 4
  %95 = load i32, i32* %94, align 8
  %96 = icmp eq i32 %95, 0
  br i1 %96, label %102, label %97

97:                                               ; preds = %91
  %98 = getelementptr inbounds %struct.VkInstanceCreateInfo, %struct.VkInstanceCreateInfo* %0, i64 0, i32 5
  %99 = load i8**, i8*** %98, align 8
  %100 = tail call i32 @loaderValidateLayers(%struct.loader_instance* %18, i32 %95, i8** %99, %struct.loader_layer_list* %93) #7
  %101 = icmp eq i32 %100, 0
  br i1 %101, label %102, label %130

102:                                              ; preds = %97, %91
  %103 = getelementptr inbounds i8, i8* %17, i64 104
  %104 = bitcast i8* %103 to %struct.loader_icd_tramp_list*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %103, i8 0, i64 24, i1 false)
  %105 = tail call i32 @loader_icd_scan(%struct.loader_instance* nonnull %18, %struct.loader_icd_tramp_list* %104) #7
  %106 = icmp eq i32 %105, 0
  br i1 %106, label %107, label %130

107:                                              ; preds = %102
  %108 = getelementptr inbounds i8, i8* %17, i64 16224
  %109 = bitcast i8* %108 to %struct.loader_extension_list*
  %110 = tail call i32 @loader_get_icd_loader_instance_extensions(%struct.loader_instance* nonnull %18, %struct.loader_icd_tramp_list* %104, %struct.loader_extension_list* %109) #7
  %111 = icmp eq i32 %110, 0
  br i1 %111, label %112, label %130

112:                                              ; preds = %107
  %113 = call i32 @loader_validate_instance_extensions(%struct.loader_instance* nonnull %18, %struct.loader_extension_list* %109, %struct.loader_layer_list* %93, %struct.VkInstanceCreateInfo* nonnull %5) #7
  %114 = icmp eq i32 %113, 0
  br i1 %114, label %115, label %130

115:                                              ; preds = %112
  %116 = call i8* @loader_instance_heap_alloc(%struct.loader_instance* nonnull %18, i64 2648, i32 4) #7
  %117 = bitcast i8* %17 to i8**
  store i8* %116, i8** %117, align 8
  %118 = icmp eq i8* %116, null
  br i1 %118, label %119, label %120

119:                                              ; preds = %115
  call void (%struct.loader_instance*, i32, i32, i8*, ...) @loader_log(%struct.loader_instance* %18, i32 8, i32 0, i8* getelementptr inbounds ([77 x i8], [77 x i8]* @.str.3, i64 0, i64 0)) #7
  br label %130

120:                                              ; preds = %115
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %116, i8* align 8 bitcast (%struct.VkLayerInstanceDispatchTable_* @instance_disp to i8*), i64 648, i1 false)
  %121 = load i64, i64* bitcast (%struct.loader_struct* @loader to i64*), align 8
  %122 = getelementptr inbounds i8, i8* %17, i64 80
  %123 = bitcast i8* %122 to i64*
  store i64 %121, i64* %123, align 8
  store i8* %17, i8** bitcast (%struct.loader_struct* @loader to i8**), align 8
  %124 = call i32 @loaderEnableInstanceLayers(%struct.loader_instance* nonnull %18, %struct.VkInstanceCreateInfo* nonnull %5, %struct.loader_layer_list* %93) #7
  %125 = icmp eq i32 %124, 0
  br i1 %125, label %126, label %130

126:                                              ; preds = %120
  %127 = bitcast %struct.VkInstance_T** %4 to i8**
  store i8* %17, i8** %127, align 8
  %128 = call i32 @loader_create_instance_chain(%struct.VkInstanceCreateInfo* nonnull %5, %struct.VkAllocationCallbacks* %1, %struct.loader_instance* nonnull %18, %struct.VkInstance_T** nonnull %4) #7
  %129 = icmp eq i32 %128, 0
  br i1 %129, label %181, label %130

130:                                              ; preds = %86, %79, %74, %51, %126, %120, %119, %112, %107, %102, %97
  %131 = phi i32 [ %100, %97 ], [ %105, %102 ], [ %110, %107 ], [ %113, %112 ], [ -1, %119 ], [ %124, %120 ], [ %128, %126 ], [ -1, %51 ], [ -1, %74 ], [ -1, %79 ], [ -1, %86 ]
  %132 = load %struct.loader_instance*, %struct.loader_instance** getelementptr inbounds (%struct.loader_struct, %struct.loader_struct* @loader, i64 0, i32 0), align 8
  %133 = icmp eq %struct.loader_instance* %132, %18
  br i1 %133, label %134, label %138

134:                                              ; preds = %130
  %135 = getelementptr inbounds i8, i8* %17, i64 80
  %136 = bitcast i8* %135 to i64*
  %137 = load i64, i64* %136, align 8
  store i64 %137, i64* bitcast (%struct.loader_struct* @loader to i64*), align 8
  br label %138

138:                                              ; preds = %134, %130
  %139 = bitcast i8* %17 to %struct.loader_instance_dispatch_table**
  %140 = load %struct.loader_instance_dispatch_table*, %struct.loader_instance_dispatch_table** %139, align 8
  %141 = icmp eq %struct.loader_instance_dispatch_table* %140, null
  br i1 %141, label %144, label %142

142:                                              ; preds = %138
  %143 = bitcast %struct.loader_instance_dispatch_table* %140 to i8*
  call void @loader_instance_heap_free(%struct.loader_instance* nonnull %18, i8* nonnull %143) #7
  br label %144

144:                                              ; preds = %138, %142
  %145 = load i32, i32* %56, align 8
  %146 = icmp eq i32 %145, 0
  br i1 %146, label %151, label %147

147:                                              ; preds = %144
  %148 = load %struct.VkDebugReportCallbackEXT_T**, %struct.VkDebugReportCallbackEXT_T*** %60, align 8
  call void @util_DestroyDebugReportCallbacks(%struct.loader_instance* nonnull %18, %struct.VkAllocationCallbacks* %1, i32 %145, %struct.VkDebugReportCallbackEXT_T** %148) #7
  %149 = load %struct.VkDebugReportCallbackCreateInfoEXT*, %struct.VkDebugReportCallbackCreateInfoEXT** %58, align 8
  %150 = load %struct.VkDebugReportCallbackEXT_T**, %struct.VkDebugReportCallbackEXT_T*** %60, align 8
  call void @util_FreeDebugReportCreateInfos(%struct.VkAllocationCallbacks* %1, %struct.VkDebugReportCallbackCreateInfoEXT* %149, %struct.VkDebugReportCallbackEXT_T** %150) #7
  br label %151

151:                                              ; preds = %144, %147
  %152 = load i32, i32* %62, align 8
  %153 = icmp eq i32 %152, 0
  br i1 %153, label %158, label %154

154:                                              ; preds = %151
  %155 = load %struct.VkDebugUtilsMessengerEXT_T**, %struct.VkDebugUtilsMessengerEXT_T*** %66, align 8
  call void @util_DestroyDebugUtilsMessengers(%struct.loader_instance* nonnull %18, %struct.VkAllocationCallbacks* %1, i32 %152, %struct.VkDebugUtilsMessengerEXT_T** %155) #7
  %156 = load %struct.VkDebugUtilsMessengerCreateInfoEXT*, %struct.VkDebugUtilsMessengerCreateInfoEXT** %64, align 8
  %157 = load %struct.VkDebugUtilsMessengerEXT_T**, %struct.VkDebugUtilsMessengerEXT_T*** %66, align 8
  call void @util_FreeDebugUtilsMessengerCreateInfos(%struct.VkAllocationCallbacks* %1, %struct.VkDebugUtilsMessengerCreateInfoEXT* %156, %struct.VkDebugUtilsMessengerEXT_T** %157) #7
  br label %158

158:                                              ; preds = %151, %154
  %159 = getelementptr inbounds i8, i8* %17, i64 16208
  %160 = bitcast i8* %159 to %struct.loader_layer_properties**
  %161 = load %struct.loader_layer_properties*, %struct.loader_layer_properties** %160, align 8
  %162 = icmp eq %struct.loader_layer_properties* %161, null
  br i1 %162, label %166, label %163

163:                                              ; preds = %158
  %164 = getelementptr inbounds i8, i8* %17, i64 16192
  %165 = bitcast i8* %164 to %struct.loader_layer_list*
  call void @loaderDeactivateLayers(%struct.loader_instance* nonnull %18, %struct.loader_device* null, %struct.loader_layer_list* %165) #7
  br label %166

166:                                              ; preds = %158, %163
  %167 = getelementptr inbounds i8, i8* %17, i64 16184
  %168 = bitcast i8* %167 to %struct.loader_layer_properties**
  %169 = load %struct.loader_layer_properties*, %struct.loader_layer_properties** %168, align 8
  %170 = icmp eq %struct.loader_layer_properties* %169, null
  br i1 %170, label %174, label %171

171:                                              ; preds = %166
  %172 = getelementptr inbounds i8, i8* %17, i64 16168
  %173 = bitcast i8* %172 to %struct.loader_layer_list*
  call void @loaderDestroyLayerList(%struct.loader_instance* nonnull %18, %struct.loader_device* null, %struct.loader_layer_list* %173) #7
  br label %174

174:                                              ; preds = %166, %171
  %175 = getelementptr inbounds i8, i8* %17, i64 16136
  %176 = bitcast i8* %175 to %struct.loader_layer_list*
  call void @loaderDeleteLayerListAndProperties(%struct.loader_instance* nonnull %18, %struct.loader_layer_list* %176) #7
  %177 = getelementptr inbounds i8, i8* %17, i64 104
  %178 = bitcast i8* %177 to %struct.loader_icd_tramp_list*
  call void @loader_scanned_icd_clear(%struct.loader_instance* nonnull %18, %struct.loader_icd_tramp_list* %178) #7
  %179 = getelementptr inbounds i8, i8* %17, i64 16224
  %180 = bitcast i8* %179 to %struct.loader_generic_list*
  call void @loader_destroy_generic_list(%struct.loader_instance* nonnull %18, %struct.loader_generic_list* %180) #7
  call void @loader_instance_heap_free(%struct.loader_instance* nonnull %18, i8* nonnull %17) #7
  br label %188

181:                                              ; preds = %126
  %182 = getelementptr inbounds i8, i8* %17, i64 16248
  call void @llvm.memset.p0i8.i64(i8* align 8 %182, i8 0, i64 32, i1 false)
  call void @wsi_create_instance(%struct.loader_instance* %18, %struct.VkInstanceCreateInfo* nonnull %5) #7
  call void @debug_utils_CreateInstance(%struct.loader_instance* %18, %struct.VkInstanceCreateInfo* nonnull %5) #7
  call void @extensions_create_instance(%struct.loader_instance* %18, %struct.VkInstanceCreateInfo* nonnull %5) #7
  %183 = load %struct.VkInstance_T*, %struct.VkInstance_T** %4, align 8
  store %struct.VkInstance_T* %183, %struct.VkInstance_T** %2, align 8
  call void @loaderActivateInstanceLayerExtensions(%struct.loader_instance* %18, %struct.VkInstance_T* %183) #7
  %184 = load i32, i32* %62, align 8
  %185 = load %struct.VkDebugUtilsMessengerEXT_T**, %struct.VkDebugUtilsMessengerEXT_T*** %66, align 8
  call void @util_DestroyDebugUtilsMessengers(%struct.loader_instance* nonnull %18, %struct.VkAllocationCallbacks* %1, i32 %184, %struct.VkDebugUtilsMessengerEXT_T** %185) #7
  %186 = load i32, i32* %56, align 8
  %187 = load %struct.VkDebugReportCallbackEXT_T**, %struct.VkDebugReportCallbackEXT_T*** %60, align 8
  call void @util_DestroyDebugReportCallbacks(%struct.loader_instance* nonnull %18, %struct.VkAllocationCallbacks* %1, i32 %186, %struct.VkDebugReportCallbackEXT_T** %187) #7
  br label %188

188:                                              ; preds = %174, %181
  %189 = phi i32 [ 0, %181 ], [ %131, %174 ]
  %190 = call i32 @pthread_mutex_unlock(%union.pthread_mutex_t* nonnull @loader_lock) #7
  br label %191

191:                                              ; preds = %16, %188
  %192 = phi i32 [ %189, %188 ], [ -1, %16 ]
  call void @llvm.lifetime.end.p0i8(i64 64, i8* nonnull %19) #7
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %6) #7
  ret i32 %192
}

declare i32 @util_CopyDebugUtilsMessengerCreateInfos(i8*, %struct.VkAllocationCallbacks*, i32*, %struct.VkDebugUtilsMessengerCreateInfoEXT**, %struct.VkDebugUtilsMessengerEXT_T***) local_unnamed_addr #2

declare i32 @util_CreateDebugUtilsMessengers(%struct.loader_instance*, %struct.VkAllocationCallbacks*, i32, %struct.VkDebugUtilsMessengerCreateInfoEXT*, %struct.VkDebugUtilsMessengerEXT_T**) local_unnamed_addr #2

declare i32 @util_CopyDebugReportCreateInfos(i8*, %struct.VkAllocationCallbacks*, i32*, %struct.VkDebugReportCallbackCreateInfoEXT**, %struct.VkDebugReportCallbackEXT_T***) local_unnamed_addr #2

declare i32 @util_CreateDebugReportCallbacks(%struct.loader_instance*, %struct.VkAllocationCallbacks*, i32, %struct.VkDebugReportCallbackCreateInfoEXT*, %struct.VkDebugReportCallbackEXT_T**) local_unnamed_addr #2

declare void @loaderScanForLayers(%struct.loader_instance*, %struct.loader_layer_list*) local_unnamed_addr #2

declare i32 @loaderValidateLayers(%struct.loader_instance*, i32, i8**, %struct.loader_layer_list*) local_unnamed_addr #2

declare i32 @loader_icd_scan(%struct.loader_instance*, %struct.loader_icd_tramp_list*) local_unnamed_addr #2

declare i32 @loader_get_icd_loader_instance_extensions(%struct.loader_instance*, %struct.loader_icd_tramp_list*, %struct.loader_extension_list*) local_unnamed_addr #2

declare i32 @loader_validate_instance_extensions(%struct.loader_instance*, %struct.loader_extension_list*, %struct.loader_layer_list*, %struct.VkInstanceCreateInfo*) local_unnamed_addr #2

declare i8* @loader_instance_heap_alloc(%struct.loader_instance*, i64, i32) local_unnamed_addr #2

declare i32 @loaderEnableInstanceLayers(%struct.loader_instance*, %struct.VkInstanceCreateInfo*, %struct.loader_layer_list*) local_unnamed_addr #2

declare i32 @loader_create_instance_chain(%struct.VkInstanceCreateInfo*, %struct.VkAllocationCallbacks*, %struct.loader_instance*, %struct.VkInstance_T**) local_unnamed_addr #2

declare void @wsi_create_instance(%struct.loader_instance*, %struct.VkInstanceCreateInfo*) local_unnamed_addr #2

declare void @debug_utils_CreateInstance(%struct.loader_instance*, %struct.VkInstanceCreateInfo*) local_unnamed_addr #2

declare void @extensions_create_instance(%struct.loader_instance*, %struct.VkInstanceCreateInfo*) local_unnamed_addr #2

declare void @loaderActivateInstanceLayerExtensions(%struct.loader_instance*, %struct.VkInstance_T*) local_unnamed_addr #2

declare void @loader_instance_heap_free(%struct.loader_instance*, i8*) local_unnamed_addr #2

declare void @util_DestroyDebugReportCallbacks(%struct.loader_instance*, %struct.VkAllocationCallbacks*, i32, %struct.VkDebugReportCallbackEXT_T**) local_unnamed_addr #2

declare void @util_FreeDebugReportCreateInfos(%struct.VkAllocationCallbacks*, %struct.VkDebugReportCallbackCreateInfoEXT*, %struct.VkDebugReportCallbackEXT_T**) local_unnamed_addr #2

declare void @util_DestroyDebugUtilsMessengers(%struct.loader_instance*, %struct.VkAllocationCallbacks*, i32, %struct.VkDebugUtilsMessengerEXT_T**) local_unnamed_addr #2

declare void @util_FreeDebugUtilsMessengerCreateInfos(%struct.VkAllocationCallbacks*, %struct.VkDebugUtilsMessengerCreateInfoEXT*, %struct.VkDebugUtilsMessengerEXT_T**) local_unnamed_addr #2

declare void @loaderDeactivateLayers(%struct.loader_instance*, %struct.loader_device*, %struct.loader_layer_list*) local_unnamed_addr #2

declare void @loaderDestroyLayerList(%struct.loader_instance*, %struct.loader_device*, %struct.loader_layer_list*) local_unnamed_addr #2

declare void @loader_scanned_icd_clear(%struct.loader_instance*, %struct.loader_icd_tramp_list*) local_unnamed_addr #2

declare void @loader_destroy_generic_list(%struct.loader_instance*, %struct.loader_generic_list*) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define void @vkDestroyInstance(%struct.VkInstance_T*, %struct.VkAllocationCallbacks*) #0 {
  %3 = icmp eq %struct.VkInstance_T* %0, null
  br i1 %3, label %131, label %4

4:                                                ; preds = %2
  %5 = bitcast %struct.VkInstance_T* %0 to %struct.VkLayerInstanceDispatchTable_**
  %6 = load %struct.VkLayerInstanceDispatchTable_*, %struct.VkLayerInstanceDispatchTable_** %5, align 8
  %7 = tail call i32 @pthread_mutex_lock(%union.pthread_mutex_t* nonnull @loader_lock) #7
  %8 = tail call %struct.loader_instance* @loader_get_instance(%struct.VkInstance_T* nonnull %0) #7
  %9 = icmp eq %struct.VkAllocationCallbacks* %1, null
  br i1 %9, label %14, label %10

10:                                               ; preds = %4
  %11 = getelementptr inbounds %struct.loader_instance, %struct.loader_instance* %8, i64 0, i32 33
  %12 = bitcast %struct.VkAllocationCallbacks* %11 to i8*
  %13 = bitcast %struct.VkAllocationCallbacks* %1 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %12, i8* nonnull align 8 %13, i64 48, i1 false)
  br label %14

14:                                               ; preds = %4, %10
  %15 = getelementptr inbounds %struct.loader_instance, %struct.loader_instance* %8, i64 0, i32 30
  %16 = load i32, i32* %15, align 8
  %17 = icmp eq i32 %16, 0
  br i1 %17, label %25, label %18

18:                                               ; preds = %14
  %19 = getelementptr inbounds %struct.loader_instance, %struct.loader_instance* %8, i64 0, i32 31
  %20 = load %struct.VkDebugUtilsMessengerCreateInfoEXT*, %struct.VkDebugUtilsMessengerCreateInfoEXT** %19, align 8
  %21 = getelementptr inbounds %struct.loader_instance, %struct.loader_instance* %8, i64 0, i32 32
  %22 = load %struct.VkDebugUtilsMessengerEXT_T**, %struct.VkDebugUtilsMessengerEXT_T*** %21, align 8
  %23 = tail call i32 @util_CreateDebugUtilsMessengers(%struct.loader_instance* %8, %struct.VkAllocationCallbacks* %1, i32 %16, %struct.VkDebugUtilsMessengerCreateInfoEXT* %20, %struct.VkDebugUtilsMessengerEXT_T** %22) #7
  %24 = icmp eq i32 %23, 0
  br label %25

25:                                               ; preds = %18, %14
  %26 = phi i1 [ false, %14 ], [ %24, %18 ]
  %27 = getelementptr inbounds %struct.loader_instance, %struct.loader_instance* %8, i64 0, i32 27
  %28 = load i32, i32* %27, align 8
  %29 = icmp eq i32 %28, 0
  br i1 %29, label %37, label %30

30:                                               ; preds = %25
  %31 = getelementptr inbounds %struct.loader_instance, %struct.loader_instance* %8, i64 0, i32 28
  %32 = load %struct.VkDebugReportCallbackCreateInfoEXT*, %struct.VkDebugReportCallbackCreateInfoEXT** %31, align 8
  %33 = getelementptr inbounds %struct.loader_instance, %struct.loader_instance* %8, i64 0, i32 29
  %34 = load %struct.VkDebugReportCallbackEXT_T**, %struct.VkDebugReportCallbackEXT_T*** %33, align 8
  %35 = tail call i32 @util_CreateDebugReportCallbacks(%struct.loader_instance* %8, %struct.VkAllocationCallbacks* %1, i32 %28, %struct.VkDebugReportCallbackCreateInfoEXT* %32, %struct.VkDebugReportCallbackEXT_T** %34) #7
  %36 = icmp eq i32 %35, 0
  br label %37

37:                                               ; preds = %30, %25
  %38 = phi i1 [ false, %25 ], [ %36, %30 ]
  %39 = getelementptr inbounds %struct.VkLayerInstanceDispatchTable_, %struct.VkLayerInstanceDispatchTable_* %6, i64 0, i32 2
  %40 = load void (%struct.VkInstance_T*, %struct.VkAllocationCallbacks*)*, void (%struct.VkInstance_T*, %struct.VkAllocationCallbacks*)** %39, align 8
  tail call void %40(%struct.VkInstance_T* nonnull %0, %struct.VkAllocationCallbacks* %1) #7
  %41 = getelementptr inbounds %struct.loader_instance, %struct.loader_instance* %8, i64 0, i32 22, i32 2
  %42 = load %struct.loader_layer_properties*, %struct.loader_layer_properties** %41, align 8
  %43 = icmp eq %struct.loader_layer_properties* %42, null
  br i1 %43, label %46, label %44

44:                                               ; preds = %37
  %45 = getelementptr inbounds %struct.loader_instance, %struct.loader_instance* %8, i64 0, i32 22
  tail call void @loaderDeactivateLayers(%struct.loader_instance* %8, %struct.loader_device* null, %struct.loader_layer_list* %45) #7
  br label %46

46:                                               ; preds = %37, %44
  %47 = getelementptr inbounds %struct.loader_instance, %struct.loader_instance* %8, i64 0, i32 21, i32 2
  %48 = load %struct.loader_layer_properties*, %struct.loader_layer_properties** %47, align 8
  %49 = icmp eq %struct.loader_layer_properties* %48, null
  br i1 %49, label %52, label %50

50:                                               ; preds = %46
  %51 = getelementptr inbounds %struct.loader_instance, %struct.loader_instance* %8, i64 0, i32 21
  tail call void @loaderDestroyLayerList(%struct.loader_instance* %8, %struct.loader_device* null, %struct.loader_layer_list* %51) #7
  br label %52

52:                                               ; preds = %46, %50
  %53 = getelementptr inbounds %struct.loader_instance, %struct.loader_instance* %8, i64 0, i32 7
  %54 = load %struct.loader_physical_device_tramp**, %struct.loader_physical_device_tramp*** %53, align 8
  %55 = icmp eq %struct.loader_physical_device_tramp** %54, null
  br i1 %55, label %81, label %56

56:                                               ; preds = %52
  %57 = bitcast %struct.loader_physical_device_tramp** %54 to i8*
  %58 = getelementptr inbounds %struct.loader_instance, %struct.loader_instance* %8, i64 0, i32 6
  %59 = load i32, i32* %58, align 8
  %60 = icmp eq i32 %59, 0
  br i1 %60, label %69, label %61

61:                                               ; preds = %56
  %62 = bitcast %struct.loader_physical_device_tramp** %54 to i8**
  %63 = load i8*, i8** %62, align 8
  tail call void @loader_instance_heap_free(%struct.loader_instance* %8, i8* %63) #7
  %64 = load i32, i32* %58, align 8
  %65 = icmp ugt i32 %64, 1
  br i1 %65, label %71, label %66

66:                                               ; preds = %71, %61
  %67 = bitcast %struct.loader_physical_device_tramp*** %53 to i8**
  %68 = load i8*, i8** %67, align 8
  br label %69

69:                                               ; preds = %56, %66
  %70 = phi i8* [ %68, %66 ], [ %57, %56 ]
  tail call void @loader_instance_heap_free(%struct.loader_instance* %8, i8* %70) #7
  br label %81

71:                                               ; preds = %61, %71
  %72 = phi i64 [ %77, %71 ], [ 1, %61 ]
  %73 = load %struct.loader_physical_device_tramp**, %struct.loader_physical_device_tramp*** %53, align 8
  %74 = getelementptr inbounds %struct.loader_physical_device_tramp*, %struct.loader_physical_device_tramp** %73, i64 %72
  %75 = bitcast %struct.loader_physical_device_tramp** %74 to i8**
  %76 = load i8*, i8** %75, align 8
  tail call void @loader_instance_heap_free(%struct.loader_instance* %8, i8* %76) #7
  %77 = add nuw nsw i64 %72, 1
  %78 = load i32, i32* %58, align 8
  %79 = zext i32 %78 to i64
  %80 = icmp ult i64 %77, %79
  br i1 %80, label %71, label %66

81:                                               ; preds = %52, %69
  %82 = getelementptr inbounds %struct.loader_instance, %struct.loader_instance* %8, i64 0, i32 11
  %83 = load %struct.VkPhysicalDeviceGroupProperties**, %struct.VkPhysicalDeviceGroupProperties*** %82, align 8
  %84 = icmp eq %struct.VkPhysicalDeviceGroupProperties** %83, null
  br i1 %84, label %110, label %85

85:                                               ; preds = %81
  %86 = bitcast %struct.VkPhysicalDeviceGroupProperties** %83 to i8*
  %87 = getelementptr inbounds %struct.loader_instance, %struct.loader_instance* %8, i64 0, i32 10
  %88 = load i32, i32* %87, align 8
  %89 = icmp eq i32 %88, 0
  br i1 %89, label %98, label %90

90:                                               ; preds = %85
  %91 = bitcast %struct.VkPhysicalDeviceGroupProperties** %83 to i8**
  %92 = load i8*, i8** %91, align 8
  tail call void @loader_instance_heap_free(%struct.loader_instance* %8, i8* %92) #7
  %93 = load i32, i32* %87, align 8
  %94 = icmp ugt i32 %93, 1
  br i1 %94, label %100, label %95

95:                                               ; preds = %100, %90
  %96 = bitcast %struct.VkPhysicalDeviceGroupProperties*** %82 to i8**
  %97 = load i8*, i8** %96, align 8
  br label %98

98:                                               ; preds = %85, %95
  %99 = phi i8* [ %97, %95 ], [ %86, %85 ]
  tail call void @loader_instance_heap_free(%struct.loader_instance* %8, i8* %99) #7
  br label %110

100:                                              ; preds = %90, %100
  %101 = phi i64 [ %106, %100 ], [ 1, %90 ]
  %102 = load %struct.VkPhysicalDeviceGroupProperties**, %struct.VkPhysicalDeviceGroupProperties*** %82, align 8
  %103 = getelementptr inbounds %struct.VkPhysicalDeviceGroupProperties*, %struct.VkPhysicalDeviceGroupProperties** %102, i64 %101
  %104 = bitcast %struct.VkPhysicalDeviceGroupProperties** %103 to i8**
  %105 = load i8*, i8** %104, align 8
  tail call void @loader_instance_heap_free(%struct.loader_instance* %8, i8* %105) #7
  %106 = add nuw nsw i64 %101, 1
  %107 = load i32, i32* %87, align 8
  %108 = zext i32 %107 to i64
  %109 = icmp ult i64 %106, %108
  br i1 %109, label %100, label %95

110:                                              ; preds = %81, %98
  br i1 %26, label %111, label %118

111:                                              ; preds = %110
  %112 = load i32, i32* %15, align 8
  %113 = getelementptr inbounds %struct.loader_instance, %struct.loader_instance* %8, i64 0, i32 32
  %114 = load %struct.VkDebugUtilsMessengerEXT_T**, %struct.VkDebugUtilsMessengerEXT_T*** %113, align 8
  tail call void @util_DestroyDebugUtilsMessengers(%struct.loader_instance* %8, %struct.VkAllocationCallbacks* %1, i32 %112, %struct.VkDebugUtilsMessengerEXT_T** %114) #7
  %115 = getelementptr inbounds %struct.loader_instance, %struct.loader_instance* %8, i64 0, i32 31
  %116 = load %struct.VkDebugUtilsMessengerCreateInfoEXT*, %struct.VkDebugUtilsMessengerCreateInfoEXT** %115, align 8
  %117 = load %struct.VkDebugUtilsMessengerEXT_T**, %struct.VkDebugUtilsMessengerEXT_T*** %113, align 8
  tail call void @util_FreeDebugUtilsMessengerCreateInfos(%struct.VkAllocationCallbacks* %1, %struct.VkDebugUtilsMessengerCreateInfoEXT* %116, %struct.VkDebugUtilsMessengerEXT_T** %117) #7
  br label %118

118:                                              ; preds = %111, %110
  br i1 %38, label %119, label %126

119:                                              ; preds = %118
  %120 = load i32, i32* %27, align 8
  %121 = getelementptr inbounds %struct.loader_instance, %struct.loader_instance* %8, i64 0, i32 29
  %122 = load %struct.VkDebugReportCallbackEXT_T**, %struct.VkDebugReportCallbackEXT_T*** %121, align 8
  tail call void @util_DestroyDebugReportCallbacks(%struct.loader_instance* %8, %struct.VkAllocationCallbacks* %1, i32 %120, %struct.VkDebugReportCallbackEXT_T** %122) #7
  %123 = getelementptr inbounds %struct.loader_instance, %struct.loader_instance* %8, i64 0, i32 28
  %124 = load %struct.VkDebugReportCallbackCreateInfoEXT*, %struct.VkDebugReportCallbackCreateInfoEXT** %123, align 8
  %125 = load %struct.VkDebugReportCallbackEXT_T**, %struct.VkDebugReportCallbackEXT_T*** %121, align 8
  tail call void @util_FreeDebugReportCreateInfos(%struct.VkAllocationCallbacks* %1, %struct.VkDebugReportCallbackCreateInfoEXT* %124, %struct.VkDebugReportCallbackEXT_T** %125) #7
  br label %126

126:                                              ; preds = %119, %118
  %127 = bitcast %struct.loader_instance* %8 to i8**
  %128 = load i8*, i8** %127, align 8
  tail call void @loader_instance_heap_free(%struct.loader_instance* %8, i8* %128) #7
  %129 = bitcast %struct.loader_instance* %8 to i8*
  tail call void @loader_instance_heap_free(%struct.loader_instance* %8, i8* %129) #7
  %130 = tail call i32 @pthread_mutex_unlock(%union.pthread_mutex_t* nonnull @loader_lock) #7
  tail call void @loader_unload_preloaded_icds() #7
  br label %131

131:                                              ; preds = %2, %126
  ret void
}

declare void @loader_unload_preloaded_icds() local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define i32 @vkEnumeratePhysicalDevices(%struct.VkInstance_T*, i32*, %struct.VkPhysicalDevice_T**) #0 {
  %4 = tail call i32 @pthread_mutex_lock(%union.pthread_mutex_t* nonnull @loader_lock) #7
  %5 = tail call %struct.loader_instance* @loader_get_instance(%struct.VkInstance_T* %0) #7
  %6 = icmp eq %struct.loader_instance* %5, null
  br i1 %6, label %84, label %7

7:                                                ; preds = %3
  %8 = icmp eq i32* %1, null
  br i1 %8, label %9, label %10

9:                                                ; preds = %7
  tail call void (%struct.loader_instance*, i32, i32, i8*, ...) @loader_log(%struct.loader_instance* nonnull %5, i32 8, i32 0, i8* getelementptr inbounds ([90 x i8], [90 x i8]* @.str.4, i64 0, i64 0)) #7
  br label %84

10:                                               ; preds = %7
  %11 = tail call i32 @setupLoaderTrampPhysDevs(%struct.VkInstance_T* %0) #7
  switch i32 %11, label %84 [
    i32 5, label %12
    i32 0, label %12
  ]

12:                                               ; preds = %10, %10
  %13 = getelementptr inbounds %struct.loader_instance, %struct.loader_instance* %5, i64 0, i32 6
  %14 = load i32, i32* %13, align 8
  %15 = icmp eq %struct.VkPhysicalDevice_T** %2, null
  br i1 %15, label %81, label %16

16:                                               ; preds = %12
  %17 = load i32, i32* %1, align 4
  %18 = icmp ugt i32 %14, %17
  br i1 %18, label %19, label %21

19:                                               ; preds = %16
  tail call void (%struct.loader_instance*, i32, i32, i8*, ...) @loader_log(%struct.loader_instance* nonnull %5, i32 1, i32 0, i8* getelementptr inbounds ([109 x i8], [109 x i8]* @.str.5, i64 0, i64 0), i32 %14, i32 %17) #7
  %20 = load i32, i32* %1, align 4
  br label %21

21:                                               ; preds = %19, %16
  %22 = phi i32 [ 5, %19 ], [ 0, %16 ]
  %23 = phi i32 [ %20, %19 ], [ %14, %16 ]
  %24 = icmp eq i32 %23, 0
  br i1 %24, label %81, label %25

25:                                               ; preds = %21
  %26 = getelementptr inbounds %struct.loader_instance, %struct.loader_instance* %5, i64 0, i32 7
  %27 = zext i32 %23 to i64
  %28 = add nsw i64 %27, -1
  %29 = and i64 %27, 3
  %30 = icmp ult i64 %28, 3
  br i1 %30, label %66, label %31

31:                                               ; preds = %25
  %32 = sub nsw i64 %27, %29
  br label %33

33:                                               ; preds = %33, %31
  %34 = phi i64 [ 0, %31 ], [ %63, %33 ]
  %35 = phi i64 [ %32, %31 ], [ %64, %33 ]
  %36 = load %struct.loader_physical_device_tramp**, %struct.loader_physical_device_tramp*** %26, align 8
  %37 = getelementptr inbounds %struct.loader_physical_device_tramp*, %struct.loader_physical_device_tramp** %36, i64 %34
  %38 = bitcast %struct.loader_physical_device_tramp** %37 to i64*
  %39 = load i64, i64* %38, align 8
  %40 = getelementptr inbounds %struct.VkPhysicalDevice_T*, %struct.VkPhysicalDevice_T** %2, i64 %34
  %41 = bitcast %struct.VkPhysicalDevice_T** %40 to i64*
  store i64 %39, i64* %41, align 8
  %42 = or i64 %34, 1
  %43 = load %struct.loader_physical_device_tramp**, %struct.loader_physical_device_tramp*** %26, align 8
  %44 = getelementptr inbounds %struct.loader_physical_device_tramp*, %struct.loader_physical_device_tramp** %43, i64 %42
  %45 = bitcast %struct.loader_physical_device_tramp** %44 to i64*
  %46 = load i64, i64* %45, align 8
  %47 = getelementptr inbounds %struct.VkPhysicalDevice_T*, %struct.VkPhysicalDevice_T** %2, i64 %42
  %48 = bitcast %struct.VkPhysicalDevice_T** %47 to i64*
  store i64 %46, i64* %48, align 8
  %49 = or i64 %34, 2
  %50 = load %struct.loader_physical_device_tramp**, %struct.loader_physical_device_tramp*** %26, align 8
  %51 = getelementptr inbounds %struct.loader_physical_device_tramp*, %struct.loader_physical_device_tramp** %50, i64 %49
  %52 = bitcast %struct.loader_physical_device_tramp** %51 to i64*
  %53 = load i64, i64* %52, align 8
  %54 = getelementptr inbounds %struct.VkPhysicalDevice_T*, %struct.VkPhysicalDevice_T** %2, i64 %49
  %55 = bitcast %struct.VkPhysicalDevice_T** %54 to i64*
  store i64 %53, i64* %55, align 8
  %56 = or i64 %34, 3
  %57 = load %struct.loader_physical_device_tramp**, %struct.loader_physical_device_tramp*** %26, align 8
  %58 = getelementptr inbounds %struct.loader_physical_device_tramp*, %struct.loader_physical_device_tramp** %57, i64 %56
  %59 = bitcast %struct.loader_physical_device_tramp** %58 to i64*
  %60 = load i64, i64* %59, align 8
  %61 = getelementptr inbounds %struct.VkPhysicalDevice_T*, %struct.VkPhysicalDevice_T** %2, i64 %56
  %62 = bitcast %struct.VkPhysicalDevice_T** %61 to i64*
  store i64 %60, i64* %62, align 8
  %63 = add nuw nsw i64 %34, 4
  %64 = add i64 %35, -4
  %65 = icmp eq i64 %64, 0
  br i1 %65, label %66, label %33

66:                                               ; preds = %33, %25
  %67 = phi i64 [ 0, %25 ], [ %63, %33 ]
  %68 = icmp eq i64 %29, 0
  br i1 %68, label %81, label %69

69:                                               ; preds = %66, %69
  %70 = phi i64 [ %78, %69 ], [ %67, %66 ]
  %71 = phi i64 [ %79, %69 ], [ %29, %66 ]
  %72 = load %struct.loader_physical_device_tramp**, %struct.loader_physical_device_tramp*** %26, align 8
  %73 = getelementptr inbounds %struct.loader_physical_device_tramp*, %struct.loader_physical_device_tramp** %72, i64 %70
  %74 = bitcast %struct.loader_physical_device_tramp** %73 to i64*
  %75 = load i64, i64* %74, align 8
  %76 = getelementptr inbounds %struct.VkPhysicalDevice_T*, %struct.VkPhysicalDevice_T** %2, i64 %70
  %77 = bitcast %struct.VkPhysicalDevice_T** %76 to i64*
  store i64 %75, i64* %77, align 8
  %78 = add nuw nsw i64 %70, 1
  %79 = add i64 %71, -1
  %80 = icmp eq i64 %79, 0
  br i1 %80, label %81, label %69, !llvm.loop !2

81:                                               ; preds = %66, %69, %21, %12
  %82 = phi i32 [ 0, %12 ], [ %22, %21 ], [ %22, %69 ], [ %22, %66 ]
  %83 = phi i32 [ %14, %12 ], [ 0, %21 ], [ %23, %69 ], [ %23, %66 ]
  store i32 %83, i32* %1, align 4
  br label %84

84:                                               ; preds = %10, %3, %81, %9
  %85 = phi i32 [ -3, %9 ], [ %82, %81 ], [ -3, %3 ], [ %11, %10 ]
  %86 = tail call i32 @pthread_mutex_unlock(%union.pthread_mutex_t* nonnull @loader_lock) #7
  ret i32 %85
}

declare i32 @setupLoaderTrampPhysDevs(%struct.VkInstance_T*) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define void @vkGetPhysicalDeviceFeatures(%struct.VkPhysicalDevice_T* nocapture readonly, %struct.VkPhysicalDeviceFeatures*) #0 {
  %3 = bitcast %struct.VkPhysicalDevice_T* %0 to %struct.loader_physical_device_tramp*
  %4 = getelementptr inbounds %struct.loader_physical_device_tramp, %struct.loader_physical_device_tramp* %3, i64 0, i32 2
  %5 = load %struct.VkPhysicalDevice_T*, %struct.VkPhysicalDevice_T** %4, align 8
  %6 = bitcast %struct.VkPhysicalDevice_T* %0 to %struct.VkLayerInstanceDispatchTable_**
  %7 = load %struct.VkLayerInstanceDispatchTable_*, %struct.VkLayerInstanceDispatchTable_** %6, align 8
  %8 = getelementptr inbounds %struct.VkLayerInstanceDispatchTable_, %struct.VkLayerInstanceDispatchTable_* %7, i64 0, i32 4
  %9 = load void (%struct.VkPhysicalDevice_T*, %struct.VkPhysicalDeviceFeatures*)*, void (%struct.VkPhysicalDevice_T*, %struct.VkPhysicalDeviceFeatures*)** %8, align 8
  tail call void %9(%struct.VkPhysicalDevice_T* %5, %struct.VkPhysicalDeviceFeatures* %1) #7
  ret void
}

; Function Attrs: nounwind ssp uwtable
define void @vkGetPhysicalDeviceFormatProperties(%struct.VkPhysicalDevice_T* nocapture readonly, i32, %struct.VkFormatProperties*) #0 {
  %4 = bitcast %struct.VkPhysicalDevice_T* %0 to %struct.loader_physical_device_tramp*
  %5 = getelementptr inbounds %struct.loader_physical_device_tramp, %struct.loader_physical_device_tramp* %4, i64 0, i32 2
  %6 = load %struct.VkPhysicalDevice_T*, %struct.VkPhysicalDevice_T** %5, align 8
  %7 = bitcast %struct.VkPhysicalDevice_T* %0 to %struct.VkLayerInstanceDispatchTable_**
  %8 = load %struct.VkLayerInstanceDispatchTable_*, %struct.VkLayerInstanceDispatchTable_** %7, align 8
  %9 = getelementptr inbounds %struct.VkLayerInstanceDispatchTable_, %struct.VkLayerInstanceDispatchTable_* %8, i64 0, i32 5
  %10 = load void (%struct.VkPhysicalDevice_T*, i32, %struct.VkFormatProperties*)*, void (%struct.VkPhysicalDevice_T*, i32, %struct.VkFormatProperties*)** %9, align 8
  tail call void %10(%struct.VkPhysicalDevice_T* %6, i32 %1, %struct.VkFormatProperties* %2) #7
  ret void
}

; Function Attrs: nounwind ssp uwtable
define i32 @vkGetPhysicalDeviceImageFormatProperties(%struct.VkPhysicalDevice_T* nocapture readonly, i32, i32, i32, i32, i32, %struct.VkImageFormatProperties*) #0 {
  %8 = bitcast %struct.VkPhysicalDevice_T* %0 to %struct.loader_physical_device_tramp*
  %9 = getelementptr inbounds %struct.loader_physical_device_tramp, %struct.loader_physical_device_tramp* %8, i64 0, i32 2
  %10 = load %struct.VkPhysicalDevice_T*, %struct.VkPhysicalDevice_T** %9, align 8
  %11 = bitcast %struct.VkPhysicalDevice_T* %0 to %struct.VkLayerInstanceDispatchTable_**
  %12 = load %struct.VkLayerInstanceDispatchTable_*, %struct.VkLayerInstanceDispatchTable_** %11, align 8
  %13 = getelementptr inbounds %struct.VkLayerInstanceDispatchTable_, %struct.VkLayerInstanceDispatchTable_* %12, i64 0, i32 6
  %14 = load i32 (%struct.VkPhysicalDevice_T*, i32, i32, i32, i32, i32, %struct.VkImageFormatProperties*)*, i32 (%struct.VkPhysicalDevice_T*, i32, i32, i32, i32, i32, %struct.VkImageFormatProperties*)** %13, align 8
  %15 = tail call i32 %14(%struct.VkPhysicalDevice_T* %10, i32 %1, i32 %2, i32 %3, i32 %4, i32 %5, %struct.VkImageFormatProperties* %6) #7
  ret i32 %15
}

; Function Attrs: nounwind ssp uwtable
define void @vkGetPhysicalDeviceProperties(%struct.VkPhysicalDevice_T* nocapture readonly, %struct.VkPhysicalDeviceProperties*) #0 {
  %3 = bitcast %struct.VkPhysicalDevice_T* %0 to %struct.loader_physical_device_tramp*
  %4 = getelementptr inbounds %struct.loader_physical_device_tramp, %struct.loader_physical_device_tramp* %3, i64 0, i32 2
  %5 = load %struct.VkPhysicalDevice_T*, %struct.VkPhysicalDevice_T** %4, align 8
  %6 = bitcast %struct.VkPhysicalDevice_T* %0 to %struct.VkLayerInstanceDispatchTable_**
  %7 = load %struct.VkLayerInstanceDispatchTable_*, %struct.VkLayerInstanceDispatchTable_** %6, align 8
  %8 = getelementptr inbounds %struct.VkLayerInstanceDispatchTable_, %struct.VkLayerInstanceDispatchTable_* %7, i64 0, i32 7
  %9 = load void (%struct.VkPhysicalDevice_T*, %struct.VkPhysicalDeviceProperties*)*, void (%struct.VkPhysicalDevice_T*, %struct.VkPhysicalDeviceProperties*)** %8, align 8
  tail call void %9(%struct.VkPhysicalDevice_T* %5, %struct.VkPhysicalDeviceProperties* %1) #7
  ret void
}

; Function Attrs: nounwind ssp uwtable
define void @vkGetPhysicalDeviceQueueFamilyProperties(%struct.VkPhysicalDevice_T* nocapture readonly, i32*, %struct.VkQueueFamilyProperties*) #0 {
  %4 = bitcast %struct.VkPhysicalDevice_T* %0 to %struct.loader_physical_device_tramp*
  %5 = getelementptr inbounds %struct.loader_physical_device_tramp, %struct.loader_physical_device_tramp* %4, i64 0, i32 2
  %6 = load %struct.VkPhysicalDevice_T*, %struct.VkPhysicalDevice_T** %5, align 8
  %7 = bitcast %struct.VkPhysicalDevice_T* %0 to %struct.VkLayerInstanceDispatchTable_**
  %8 = load %struct.VkLayerInstanceDispatchTable_*, %struct.VkLayerInstanceDispatchTable_** %7, align 8
  %9 = getelementptr inbounds %struct.VkLayerInstanceDispatchTable_, %struct.VkLayerInstanceDispatchTable_* %8, i64 0, i32 8
  %10 = load void (%struct.VkPhysicalDevice_T*, i32*, %struct.VkQueueFamilyProperties*)*, void (%struct.VkPhysicalDevice_T*, i32*, %struct.VkQueueFamilyProperties*)** %9, align 8
  tail call void %10(%struct.VkPhysicalDevice_T* %6, i32* %1, %struct.VkQueueFamilyProperties* %2) #7
  ret void
}

; Function Attrs: nounwind ssp uwtable
define void @vkGetPhysicalDeviceMemoryProperties(%struct.VkPhysicalDevice_T* nocapture readonly, %struct.VkPhysicalDeviceMemoryProperties*) #0 {
  %3 = bitcast %struct.VkPhysicalDevice_T* %0 to %struct.loader_physical_device_tramp*
  %4 = getelementptr inbounds %struct.loader_physical_device_tramp, %struct.loader_physical_device_tramp* %3, i64 0, i32 2
  %5 = load %struct.VkPhysicalDevice_T*, %struct.VkPhysicalDevice_T** %4, align 8
  %6 = bitcast %struct.VkPhysicalDevice_T* %0 to %struct.VkLayerInstanceDispatchTable_**
  %7 = load %struct.VkLayerInstanceDispatchTable_*, %struct.VkLayerInstanceDispatchTable_** %6, align 8
  %8 = getelementptr inbounds %struct.VkLayerInstanceDispatchTable_, %struct.VkLayerInstanceDispatchTable_* %7, i64 0, i32 9
  %9 = load void (%struct.VkPhysicalDevice_T*, %struct.VkPhysicalDeviceMemoryProperties*)*, void (%struct.VkPhysicalDevice_T*, %struct.VkPhysicalDeviceMemoryProperties*)** %8, align 8
  tail call void %9(%struct.VkPhysicalDevice_T* %5, %struct.VkPhysicalDeviceMemoryProperties* %1) #7
  ret void
}

; Function Attrs: nounwind ssp uwtable
define i32 @vkCreateDevice(%struct.VkPhysicalDevice_T*, %struct.VkDeviceCreateInfo*, %struct.VkAllocationCallbacks*, %struct.VkDevice_T**) #0 {
  %5 = tail call i32 @pthread_mutex_lock(%union.pthread_mutex_t* nonnull @loader_lock) #7
  %6 = tail call i32 @loader_layer_create_device(%struct.VkInstance_T* null, %struct.VkPhysicalDevice_T* %0, %struct.VkDeviceCreateInfo* %1, %struct.VkAllocationCallbacks* %2, %struct.VkDevice_T** %3, void ()* (%struct.VkInstance_T*, i8*)* null, void ()* (%struct.VkDevice_T*, i8*)** null) #7
  %7 = tail call i32 @pthread_mutex_unlock(%union.pthread_mutex_t* nonnull @loader_lock) #7
  ret i32 %6
}

declare i32 @loader_layer_create_device(%struct.VkInstance_T*, %struct.VkPhysicalDevice_T*, %struct.VkDeviceCreateInfo*, %struct.VkAllocationCallbacks*, %struct.VkDevice_T**, void ()* (%struct.VkInstance_T*, i8*)*, void ()* (%struct.VkDevice_T*, i8*)**) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define void @vkDestroyDevice(%struct.VkDevice_T*, %struct.VkAllocationCallbacks*) #0 {
  %3 = icmp eq %struct.VkDevice_T* %0, null
  br i1 %3, label %11, label %4

4:                                                ; preds = %2
  %5 = bitcast %struct.VkDevice_T* %0 to %struct.VkLayerDispatchTable_**
  %6 = load %struct.VkLayerDispatchTable_*, %struct.VkLayerDispatchTable_** %5, align 8
  %7 = tail call i32 @pthread_mutex_lock(%union.pthread_mutex_t* nonnull @loader_lock) #7
  %8 = getelementptr inbounds %struct.VkLayerDispatchTable_, %struct.VkLayerDispatchTable_* %6, i64 0, i32 1
  %9 = load void (%struct.VkDevice_T*, %struct.VkAllocationCallbacks*)*, void (%struct.VkDevice_T*, %struct.VkAllocationCallbacks*)** %8, align 8
  tail call void @loader_layer_destroy_device(%struct.VkDevice_T* nonnull %0, %struct.VkAllocationCallbacks* %1, void (%struct.VkDevice_T*, %struct.VkAllocationCallbacks*)* %9) #7
  %10 = tail call i32 @pthread_mutex_unlock(%union.pthread_mutex_t* nonnull @loader_lock) #7
  br label %11

11:                                               ; preds = %2, %4
  ret void
}

declare void @loader_layer_destroy_device(%struct.VkDevice_T*, %struct.VkAllocationCallbacks*, void (%struct.VkDevice_T*, %struct.VkAllocationCallbacks*)*) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define i32 @vkEnumerateDeviceExtensionProperties(%struct.VkPhysicalDevice_T* nocapture readonly, i8*, i32*, %struct.VkExtensionProperties*) #0 {
  %5 = bitcast %struct.VkPhysicalDevice_T* %0 to %struct.loader_physical_device_tramp*
  %6 = tail call i32 @pthread_mutex_lock(%union.pthread_mutex_t* nonnull @loader_lock) #7
  %7 = bitcast %struct.VkPhysicalDevice_T* %0 to %struct.VkLayerInstanceDispatchTable_**
  %8 = load %struct.VkLayerInstanceDispatchTable_*, %struct.VkLayerInstanceDispatchTable_** %7, align 8
  %9 = getelementptr inbounds %struct.VkLayerInstanceDispatchTable_, %struct.VkLayerInstanceDispatchTable_* %8, i64 0, i32 13
  %10 = load i32 (%struct.VkPhysicalDevice_T*, i8*, i32*, %struct.VkExtensionProperties*)*, i32 (%struct.VkPhysicalDevice_T*, i8*, i32*, %struct.VkExtensionProperties*)** %9, align 8
  %11 = getelementptr inbounds %struct.loader_physical_device_tramp, %struct.loader_physical_device_tramp* %5, i64 0, i32 2
  %12 = load %struct.VkPhysicalDevice_T*, %struct.VkPhysicalDevice_T** %11, align 8
  %13 = tail call i32 %10(%struct.VkPhysicalDevice_T* %12, i8* %1, i32* %2, %struct.VkExtensionProperties* %3) #7
  %14 = tail call i32 @pthread_mutex_unlock(%union.pthread_mutex_t* nonnull @loader_lock) #7
  ret i32 %13
}

; Function Attrs: nounwind ssp uwtable
define i32 @vkEnumerateDeviceLayerProperties(%struct.VkPhysicalDevice_T* nocapture readonly, i32* nocapture, %struct.VkLayerProperties*) #0 {
  %4 = tail call i32 @pthread_mutex_lock(%union.pthread_mutex_t* nonnull @loader_lock) #7
  %5 = bitcast %struct.VkPhysicalDevice_T* %0 to %struct.loader_physical_device_tramp*
  %6 = getelementptr inbounds %struct.loader_physical_device_tramp, %struct.loader_physical_device_tramp* %5, i64 0, i32 1
  %7 = load %struct.loader_instance*, %struct.loader_instance** %6, align 8
  %8 = getelementptr inbounds %struct.loader_instance, %struct.loader_instance* %7, i64 0, i32 21, i32 1
  %9 = load i32, i32* %8, align 8
  %10 = icmp eq i32 %9, 0
  %11 = icmp eq %struct.VkLayerProperties* %2, null
  %12 = or i1 %11, %10
  br i1 %12, label %13, label %15

13:                                               ; preds = %3
  store i32 %9, i32* %1, align 4
  %14 = tail call i32 @pthread_mutex_unlock(%union.pthread_mutex_t* nonnull @loader_lock) #7
  br label %50

15:                                               ; preds = %3
  %16 = load i32, i32* %1, align 4
  %17 = icmp ult i32 %16, %9
  %18 = select i1 %17, i32 %16, i32 %9
  %19 = icmp eq i32 %18, 0
  br i1 %19, label %34, label %20

20:                                               ; preds = %15
  %21 = getelementptr inbounds %struct.loader_instance, %struct.loader_instance* %7, i64 0, i32 21, i32 2
  %22 = zext i32 %18 to i64
  %23 = and i64 %22, 1
  %24 = icmp eq i32 %18, 1
  br i1 %24, label %27, label %25

25:                                               ; preds = %20
  %26 = sub nsw i64 %22, %23
  br label %37

27:                                               ; preds = %37, %20
  %28 = phi i64 [ 0, %20 ], [ %47, %37 ]
  %29 = icmp eq i64 %23, 0
  br i1 %29, label %34, label %30

30:                                               ; preds = %27
  %31 = getelementptr inbounds %struct.VkLayerProperties, %struct.VkLayerProperties* %2, i64 %28, i32 0, i64 0
  %32 = load %struct.loader_layer_properties*, %struct.loader_layer_properties** %21, align 8
  %33 = getelementptr inbounds %struct.loader_layer_properties, %struct.loader_layer_properties* %32, i64 %28, i32 0, i32 0, i64 0
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %31, i8* align 8 %33, i64 520, i1 false)
  br label %34

34:                                               ; preds = %30, %27, %15
  store i32 %18, i32* %1, align 4
  %35 = tail call i32 @pthread_mutex_unlock(%union.pthread_mutex_t* nonnull @loader_lock) #7
  %36 = select i1 %17, i32 5, i32 0
  br label %50

37:                                               ; preds = %37, %25
  %38 = phi i64 [ 0, %25 ], [ %47, %37 ]
  %39 = phi i64 [ %26, %25 ], [ %48, %37 ]
  %40 = getelementptr inbounds %struct.VkLayerProperties, %struct.VkLayerProperties* %2, i64 %38, i32 0, i64 0
  %41 = load %struct.loader_layer_properties*, %struct.loader_layer_properties** %21, align 8
  %42 = getelementptr inbounds %struct.loader_layer_properties, %struct.loader_layer_properties* %41, i64 %38, i32 0, i32 0, i64 0
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %40, i8* align 8 %42, i64 520, i1 false)
  %43 = or i64 %38, 1
  %44 = getelementptr inbounds %struct.VkLayerProperties, %struct.VkLayerProperties* %2, i64 %43, i32 0, i64 0
  %45 = load %struct.loader_layer_properties*, %struct.loader_layer_properties** %21, align 8
  %46 = getelementptr inbounds %struct.loader_layer_properties, %struct.loader_layer_properties* %45, i64 %43, i32 0, i32 0, i64 0
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %44, i8* align 8 %46, i64 520, i1 false)
  %47 = add nuw nsw i64 %38, 2
  %48 = add i64 %39, -2
  %49 = icmp eq i64 %48, 0
  br i1 %49, label %27, label %37

50:                                               ; preds = %34, %13
  %51 = phi i32 [ 0, %13 ], [ %36, %34 ]
  ret i32 %51
}

; Function Attrs: nounwind ssp uwtable
define void @vkGetDeviceQueue(%struct.VkDevice_T*, i32, i32, %struct.VkQueue_T**) #0 {
  %5 = bitcast %struct.VkDevice_T* %0 to %struct.VkLayerDispatchTable_**
  %6 = load %struct.VkLayerDispatchTable_*, %struct.VkLayerDispatchTable_** %5, align 8
  %7 = getelementptr inbounds %struct.VkLayerDispatchTable_, %struct.VkLayerDispatchTable_* %6, i64 0, i32 2
  %8 = load void (%struct.VkDevice_T*, i32, i32, %struct.VkQueue_T**)*, void (%struct.VkDevice_T*, i32, i32, %struct.VkQueue_T**)** %7, align 8
  tail call void %8(%struct.VkDevice_T* %0, i32 %1, i32 %2, %struct.VkQueue_T** %3) #7
  %9 = icmp eq %struct.VkQueue_T** %3, null
  br i1 %9, label %15, label %10

10:                                               ; preds = %4
  %11 = load %struct.VkQueue_T*, %struct.VkQueue_T** %3, align 8
  %12 = icmp eq %struct.VkQueue_T* %11, null
  br i1 %12, label %15, label %13

13:                                               ; preds = %10
  %14 = bitcast %struct.VkQueue_T* %11 to %struct.VkLayerDispatchTable_**
  store %struct.VkLayerDispatchTable_* %6, %struct.VkLayerDispatchTable_** %14, align 8
  br label %15

15:                                               ; preds = %10, %4, %13
  ret void
}

; Function Attrs: nounwind ssp uwtable
define i32 @vkQueueSubmit(%struct.VkQueue_T*, i32, %struct.VkSubmitInfo*, %struct.VkFence_T*) #0 {
  %5 = bitcast %struct.VkQueue_T* %0 to %struct.VkLayerDispatchTable_**
  %6 = load %struct.VkLayerDispatchTable_*, %struct.VkLayerDispatchTable_** %5, align 8
  %7 = getelementptr inbounds %struct.VkLayerDispatchTable_, %struct.VkLayerDispatchTable_* %6, i64 0, i32 3
  %8 = load i32 (%struct.VkQueue_T*, i32, %struct.VkSubmitInfo*, %struct.VkFence_T*)*, i32 (%struct.VkQueue_T*, i32, %struct.VkSubmitInfo*, %struct.VkFence_T*)** %7, align 8
  %9 = tail call i32 %8(%struct.VkQueue_T* %0, i32 %1, %struct.VkSubmitInfo* %2, %struct.VkFence_T* %3) #7
  ret i32 %9
}

; Function Attrs: nounwind ssp uwtable
define i32 @vkQueueWaitIdle(%struct.VkQueue_T*) #0 {
  %2 = bitcast %struct.VkQueue_T* %0 to %struct.VkLayerDispatchTable_**
  %3 = load %struct.VkLayerDispatchTable_*, %struct.VkLayerDispatchTable_** %2, align 8
  %4 = getelementptr inbounds %struct.VkLayerDispatchTable_, %struct.VkLayerDispatchTable_* %3, i64 0, i32 4
  %5 = load i32 (%struct.VkQueue_T*)*, i32 (%struct.VkQueue_T*)** %4, align 8
  %6 = tail call i32 %5(%struct.VkQueue_T* %0) #7
  ret i32 %6
}

; Function Attrs: nounwind ssp uwtable
define i32 @vkDeviceWaitIdle(%struct.VkDevice_T*) #0 {
  %2 = bitcast %struct.VkDevice_T* %0 to %struct.VkLayerDispatchTable_**
  %3 = load %struct.VkLayerDispatchTable_*, %struct.VkLayerDispatchTable_** %2, align 8
  %4 = getelementptr inbounds %struct.VkLayerDispatchTable_, %struct.VkLayerDispatchTable_* %3, i64 0, i32 5
  %5 = load i32 (%struct.VkDevice_T*)*, i32 (%struct.VkDevice_T*)** %4, align 8
  %6 = tail call i32 %5(%struct.VkDevice_T* %0) #7
  ret i32 %6
}

; Function Attrs: nounwind ssp uwtable
define i32 @vkAllocateMemory(%struct.VkDevice_T*, %struct.VkMemoryAllocateInfo*, %struct.VkAllocationCallbacks*, %struct.VkDeviceMemory_T**) #0 {
  %5 = bitcast %struct.VkDevice_T* %0 to %struct.VkLayerDispatchTable_**
  %6 = load %struct.VkLayerDispatchTable_*, %struct.VkLayerDispatchTable_** %5, align 8
  %7 = getelementptr inbounds %struct.VkLayerDispatchTable_, %struct.VkLayerDispatchTable_* %6, i64 0, i32 6
  %8 = load i32 (%struct.VkDevice_T*, %struct.VkMemoryAllocateInfo*, %struct.VkAllocationCallbacks*, %struct.VkDeviceMemory_T**)*, i32 (%struct.VkDevice_T*, %struct.VkMemoryAllocateInfo*, %struct.VkAllocationCallbacks*, %struct.VkDeviceMemory_T**)** %7, align 8
  %9 = tail call i32 %8(%struct.VkDevice_T* %0, %struct.VkMemoryAllocateInfo* %1, %struct.VkAllocationCallbacks* %2, %struct.VkDeviceMemory_T** %3) #7
  ret i32 %9
}

; Function Attrs: nounwind ssp uwtable
define void @vkFreeMemory(%struct.VkDevice_T*, %struct.VkDeviceMemory_T*, %struct.VkAllocationCallbacks*) #0 {
  %4 = bitcast %struct.VkDevice_T* %0 to %struct.VkLayerDispatchTable_**
  %5 = load %struct.VkLayerDispatchTable_*, %struct.VkLayerDispatchTable_** %4, align 8
  %6 = getelementptr inbounds %struct.VkLayerDispatchTable_, %struct.VkLayerDispatchTable_* %5, i64 0, i32 7
  %7 = load void (%struct.VkDevice_T*, %struct.VkDeviceMemory_T*, %struct.VkAllocationCallbacks*)*, void (%struct.VkDevice_T*, %struct.VkDeviceMemory_T*, %struct.VkAllocationCallbacks*)** %6, align 8
  tail call void %7(%struct.VkDevice_T* %0, %struct.VkDeviceMemory_T* %1, %struct.VkAllocationCallbacks* %2) #7
  ret void
}

; Function Attrs: nounwind ssp uwtable
define i32 @vkMapMemory(%struct.VkDevice_T*, %struct.VkDeviceMemory_T*, i64, i64, i32, i8**) #0 {
  %7 = bitcast %struct.VkDevice_T* %0 to %struct.VkLayerDispatchTable_**
  %8 = load %struct.VkLayerDispatchTable_*, %struct.VkLayerDispatchTable_** %7, align 8
  %9 = getelementptr inbounds %struct.VkLayerDispatchTable_, %struct.VkLayerDispatchTable_* %8, i64 0, i32 8
  %10 = load i32 (%struct.VkDevice_T*, %struct.VkDeviceMemory_T*, i64, i64, i32, i8**)*, i32 (%struct.VkDevice_T*, %struct.VkDeviceMemory_T*, i64, i64, i32, i8**)** %9, align 8
  %11 = tail call i32 %10(%struct.VkDevice_T* %0, %struct.VkDeviceMemory_T* %1, i64 %2, i64 %3, i32 %4, i8** %5) #7
  ret i32 %11
}

; Function Attrs: nounwind ssp uwtable
define void @vkUnmapMemory(%struct.VkDevice_T*, %struct.VkDeviceMemory_T*) #0 {
  %3 = bitcast %struct.VkDevice_T* %0 to %struct.VkLayerDispatchTable_**
  %4 = load %struct.VkLayerDispatchTable_*, %struct.VkLayerDispatchTable_** %3, align 8
  %5 = getelementptr inbounds %struct.VkLayerDispatchTable_, %struct.VkLayerDispatchTable_* %4, i64 0, i32 9
  %6 = load void (%struct.VkDevice_T*, %struct.VkDeviceMemory_T*)*, void (%struct.VkDevice_T*, %struct.VkDeviceMemory_T*)** %5, align 8
  tail call void %6(%struct.VkDevice_T* %0, %struct.VkDeviceMemory_T* %1) #7
  ret void
}

; Function Attrs: nounwind ssp uwtable
define i32 @vkFlushMappedMemoryRanges(%struct.VkDevice_T*, i32, %struct.VkMappedMemoryRange*) #0 {
  %4 = bitcast %struct.VkDevice_T* %0 to %struct.VkLayerDispatchTable_**
  %5 = load %struct.VkLayerDispatchTable_*, %struct.VkLayerDispatchTable_** %4, align 8
  %6 = getelementptr inbounds %struct.VkLayerDispatchTable_, %struct.VkLayerDispatchTable_* %5, i64 0, i32 10
  %7 = load i32 (%struct.VkDevice_T*, i32, %struct.VkMappedMemoryRange*)*, i32 (%struct.VkDevice_T*, i32, %struct.VkMappedMemoryRange*)** %6, align 8
  %8 = tail call i32 %7(%struct.VkDevice_T* %0, i32 %1, %struct.VkMappedMemoryRange* %2) #7
  ret i32 %8
}

; Function Attrs: nounwind ssp uwtable
define i32 @vkInvalidateMappedMemoryRanges(%struct.VkDevice_T*, i32, %struct.VkMappedMemoryRange*) #0 {
  %4 = bitcast %struct.VkDevice_T* %0 to %struct.VkLayerDispatchTable_**
  %5 = load %struct.VkLayerDispatchTable_*, %struct.VkLayerDispatchTable_** %4, align 8
  %6 = getelementptr inbounds %struct.VkLayerDispatchTable_, %struct.VkLayerDispatchTable_* %5, i64 0, i32 11
  %7 = load i32 (%struct.VkDevice_T*, i32, %struct.VkMappedMemoryRange*)*, i32 (%struct.VkDevice_T*, i32, %struct.VkMappedMemoryRange*)** %6, align 8
  %8 = tail call i32 %7(%struct.VkDevice_T* %0, i32 %1, %struct.VkMappedMemoryRange* %2) #7
  ret i32 %8
}

; Function Attrs: nounwind ssp uwtable
define void @vkGetDeviceMemoryCommitment(%struct.VkDevice_T*, %struct.VkDeviceMemory_T*, i64*) #0 {
  %4 = bitcast %struct.VkDevice_T* %0 to %struct.VkLayerDispatchTable_**
  %5 = load %struct.VkLayerDispatchTable_*, %struct.VkLayerDispatchTable_** %4, align 8
  %6 = getelementptr inbounds %struct.VkLayerDispatchTable_, %struct.VkLayerDispatchTable_* %5, i64 0, i32 12
  %7 = load void (%struct.VkDevice_T*, %struct.VkDeviceMemory_T*, i64*)*, void (%struct.VkDevice_T*, %struct.VkDeviceMemory_T*, i64*)** %6, align 8
  tail call void %7(%struct.VkDevice_T* %0, %struct.VkDeviceMemory_T* %1, i64* %2) #7
  ret void
}

; Function Attrs: nounwind ssp uwtable
define i32 @vkBindBufferMemory(%struct.VkDevice_T*, %struct.VkBuffer_T*, %struct.VkDeviceMemory_T*, i64) #0 {
  %5 = bitcast %struct.VkDevice_T* %0 to %struct.VkLayerDispatchTable_**
  %6 = load %struct.VkLayerDispatchTable_*, %struct.VkLayerDispatchTable_** %5, align 8
  %7 = getelementptr inbounds %struct.VkLayerDispatchTable_, %struct.VkLayerDispatchTable_* %6, i64 0, i32 13
  %8 = load i32 (%struct.VkDevice_T*, %struct.VkBuffer_T*, %struct.VkDeviceMemory_T*, i64)*, i32 (%struct.VkDevice_T*, %struct.VkBuffer_T*, %struct.VkDeviceMemory_T*, i64)** %7, align 8
  %9 = tail call i32 %8(%struct.VkDevice_T* %0, %struct.VkBuffer_T* %1, %struct.VkDeviceMemory_T* %2, i64 %3) #7
  ret i32 %9
}

; Function Attrs: nounwind ssp uwtable
define i32 @vkBindImageMemory(%struct.VkDevice_T*, %struct.VkImage_T*, %struct.VkDeviceMemory_T*, i64) #0 {
  %5 = bitcast %struct.VkDevice_T* %0 to %struct.VkLayerDispatchTable_**
  %6 = load %struct.VkLayerDispatchTable_*, %struct.VkLayerDispatchTable_** %5, align 8
  %7 = getelementptr inbounds %struct.VkLayerDispatchTable_, %struct.VkLayerDispatchTable_* %6, i64 0, i32 14
  %8 = load i32 (%struct.VkDevice_T*, %struct.VkImage_T*, %struct.VkDeviceMemory_T*, i64)*, i32 (%struct.VkDevice_T*, %struct.VkImage_T*, %struct.VkDeviceMemory_T*, i64)** %7, align 8
  %9 = tail call i32 %8(%struct.VkDevice_T* %0, %struct.VkImage_T* %1, %struct.VkDeviceMemory_T* %2, i64 %3) #7
  ret i32 %9
}

; Function Attrs: nounwind ssp uwtable
define void @vkGetBufferMemoryRequirements(%struct.VkDevice_T*, %struct.VkBuffer_T*, %struct.VkMemoryRequirements*) #0 {
  %4 = bitcast %struct.VkDevice_T* %0 to %struct.VkLayerDispatchTable_**
  %5 = load %struct.VkLayerDispatchTable_*, %struct.VkLayerDispatchTable_** %4, align 8
  %6 = getelementptr inbounds %struct.VkLayerDispatchTable_, %struct.VkLayerDispatchTable_* %5, i64 0, i32 15
  %7 = load void (%struct.VkDevice_T*, %struct.VkBuffer_T*, %struct.VkMemoryRequirements*)*, void (%struct.VkDevice_T*, %struct.VkBuffer_T*, %struct.VkMemoryRequirements*)** %6, align 8
  tail call void %7(%struct.VkDevice_T* %0, %struct.VkBuffer_T* %1, %struct.VkMemoryRequirements* %2) #7
  ret void
}

; Function Attrs: nounwind ssp uwtable
define void @vkGetImageMemoryRequirements(%struct.VkDevice_T*, %struct.VkImage_T*, %struct.VkMemoryRequirements*) #0 {
  %4 = bitcast %struct.VkDevice_T* %0 to %struct.VkLayerDispatchTable_**
  %5 = load %struct.VkLayerDispatchTable_*, %struct.VkLayerDispatchTable_** %4, align 8
  %6 = getelementptr inbounds %struct.VkLayerDispatchTable_, %struct.VkLayerDispatchTable_* %5, i64 0, i32 16
  %7 = load void (%struct.VkDevice_T*, %struct.VkImage_T*, %struct.VkMemoryRequirements*)*, void (%struct.VkDevice_T*, %struct.VkImage_T*, %struct.VkMemoryRequirements*)** %6, align 8
  tail call void %7(%struct.VkDevice_T* %0, %struct.VkImage_T* %1, %struct.VkMemoryRequirements* %2) #7
  ret void
}

; Function Attrs: nounwind ssp uwtable
define void @vkGetImageSparseMemoryRequirements(%struct.VkDevice_T*, %struct.VkImage_T*, i32*, %struct.VkSparseImageMemoryRequirements*) #0 {
  %5 = bitcast %struct.VkDevice_T* %0 to %struct.VkLayerDispatchTable_**
  %6 = load %struct.VkLayerDispatchTable_*, %struct.VkLayerDispatchTable_** %5, align 8
  %7 = getelementptr inbounds %struct.VkLayerDispatchTable_, %struct.VkLayerDispatchTable_* %6, i64 0, i32 17
  %8 = load void (%struct.VkDevice_T*, %struct.VkImage_T*, i32*, %struct.VkSparseImageMemoryRequirements*)*, void (%struct.VkDevice_T*, %struct.VkImage_T*, i32*, %struct.VkSparseImageMemoryRequirements*)** %7, align 8
  tail call void %8(%struct.VkDevice_T* %0, %struct.VkImage_T* %1, i32* %2, %struct.VkSparseImageMemoryRequirements* %3) #7
  ret void
}

; Function Attrs: nounwind ssp uwtable
define void @vkGetPhysicalDeviceSparseImageFormatProperties(%struct.VkPhysicalDevice_T* nocapture readonly, i32, i32, i32, i32, i32, i32*, %struct.VkSparseImageFormatProperties*) #0 {
  %9 = bitcast %struct.VkPhysicalDevice_T* %0 to %struct.loader_physical_device_tramp*
  %10 = getelementptr inbounds %struct.loader_physical_device_tramp, %struct.loader_physical_device_tramp* %9, i64 0, i32 2
  %11 = load %struct.VkPhysicalDevice_T*, %struct.VkPhysicalDevice_T** %10, align 8
  %12 = bitcast %struct.VkPhysicalDevice_T* %0 to %struct.VkLayerInstanceDispatchTable_**
  %13 = load %struct.VkLayerInstanceDispatchTable_*, %struct.VkLayerInstanceDispatchTable_** %12, align 8
  %14 = getelementptr inbounds %struct.VkLayerInstanceDispatchTable_, %struct.VkLayerInstanceDispatchTable_* %13, i64 0, i32 16
  %15 = load void (%struct.VkPhysicalDevice_T*, i32, i32, i32, i32, i32, i32*, %struct.VkSparseImageFormatProperties*)*, void (%struct.VkPhysicalDevice_T*, i32, i32, i32, i32, i32, i32*, %struct.VkSparseImageFormatProperties*)** %14, align 8
  tail call void %15(%struct.VkPhysicalDevice_T* %11, i32 %1, i32 %2, i32 %3, i32 %4, i32 %5, i32* %6, %struct.VkSparseImageFormatProperties* %7) #7
  ret void
}

; Function Attrs: nounwind ssp uwtable
define i32 @vkQueueBindSparse(%struct.VkQueue_T*, i32, %struct.VkBindSparseInfo*, %struct.VkFence_T*) #0 {
  %5 = bitcast %struct.VkQueue_T* %0 to %struct.VkLayerDispatchTable_**
  %6 = load %struct.VkLayerDispatchTable_*, %struct.VkLayerDispatchTable_** %5, align 8
  %7 = getelementptr inbounds %struct.VkLayerDispatchTable_, %struct.VkLayerDispatchTable_* %6, i64 0, i32 18
  %8 = load i32 (%struct.VkQueue_T*, i32, %struct.VkBindSparseInfo*, %struct.VkFence_T*)*, i32 (%struct.VkQueue_T*, i32, %struct.VkBindSparseInfo*, %struct.VkFence_T*)** %7, align 8
  %9 = tail call i32 %8(%struct.VkQueue_T* %0, i32 %1, %struct.VkBindSparseInfo* %2, %struct.VkFence_T* %3) #7
  ret i32 %9
}

; Function Attrs: nounwind ssp uwtable
define i32 @vkCreateFence(%struct.VkDevice_T*, %struct.VkFenceCreateInfo*, %struct.VkAllocationCallbacks*, %struct.VkFence_T**) #0 {
  %5 = bitcast %struct.VkDevice_T* %0 to %struct.VkLayerDispatchTable_**
  %6 = load %struct.VkLayerDispatchTable_*, %struct.VkLayerDispatchTable_** %5, align 8
  %7 = getelementptr inbounds %struct.VkLayerDispatchTable_, %struct.VkLayerDispatchTable_* %6, i64 0, i32 19
  %8 = load i32 (%struct.VkDevice_T*, %struct.VkFenceCreateInfo*, %struct.VkAllocationCallbacks*, %struct.VkFence_T**)*, i32 (%struct.VkDevice_T*, %struct.VkFenceCreateInfo*, %struct.VkAllocationCallbacks*, %struct.VkFence_T**)** %7, align 8
  %9 = tail call i32 %8(%struct.VkDevice_T* %0, %struct.VkFenceCreateInfo* %1, %struct.VkAllocationCallbacks* %2, %struct.VkFence_T** %3) #7
  ret i32 %9
}

; Function Attrs: nounwind ssp uwtable
define void @vkDestroyFence(%struct.VkDevice_T*, %struct.VkFence_T*, %struct.VkAllocationCallbacks*) #0 {
  %4 = bitcast %struct.VkDevice_T* %0 to %struct.VkLayerDispatchTable_**
  %5 = load %struct.VkLayerDispatchTable_*, %struct.VkLayerDispatchTable_** %4, align 8
  %6 = getelementptr inbounds %struct.VkLayerDispatchTable_, %struct.VkLayerDispatchTable_* %5, i64 0, i32 20
  %7 = load void (%struct.VkDevice_T*, %struct.VkFence_T*, %struct.VkAllocationCallbacks*)*, void (%struct.VkDevice_T*, %struct.VkFence_T*, %struct.VkAllocationCallbacks*)** %6, align 8
  tail call void %7(%struct.VkDevice_T* %0, %struct.VkFence_T* %1, %struct.VkAllocationCallbacks* %2) #7
  ret void
}

; Function Attrs: nounwind ssp uwtable
define i32 @vkResetFences(%struct.VkDevice_T*, i32, %struct.VkFence_T**) #0 {
  %4 = bitcast %struct.VkDevice_T* %0 to %struct.VkLayerDispatchTable_**
  %5 = load %struct.VkLayerDispatchTable_*, %struct.VkLayerDispatchTable_** %4, align 8
  %6 = getelementptr inbounds %struct.VkLayerDispatchTable_, %struct.VkLayerDispatchTable_* %5, i64 0, i32 21
  %7 = load i32 (%struct.VkDevice_T*, i32, %struct.VkFence_T**)*, i32 (%struct.VkDevice_T*, i32, %struct.VkFence_T**)** %6, align 8
  %8 = tail call i32 %7(%struct.VkDevice_T* %0, i32 %1, %struct.VkFence_T** %2) #7
  ret i32 %8
}

; Function Attrs: nounwind ssp uwtable
define i32 @vkGetFenceStatus(%struct.VkDevice_T*, %struct.VkFence_T*) #0 {
  %3 = bitcast %struct.VkDevice_T* %0 to %struct.VkLayerDispatchTable_**
  %4 = load %struct.VkLayerDispatchTable_*, %struct.VkLayerDispatchTable_** %3, align 8
  %5 = getelementptr inbounds %struct.VkLayerDispatchTable_, %struct.VkLayerDispatchTable_* %4, i64 0, i32 22
  %6 = load i32 (%struct.VkDevice_T*, %struct.VkFence_T*)*, i32 (%struct.VkDevice_T*, %struct.VkFence_T*)** %5, align 8
  %7 = tail call i32 %6(%struct.VkDevice_T* %0, %struct.VkFence_T* %1) #7
  ret i32 %7
}

; Function Attrs: nounwind ssp uwtable
define i32 @vkWaitForFences(%struct.VkDevice_T*, i32, %struct.VkFence_T**, i32, i64) #0 {
  %6 = bitcast %struct.VkDevice_T* %0 to %struct.VkLayerDispatchTable_**
  %7 = load %struct.VkLayerDispatchTable_*, %struct.VkLayerDispatchTable_** %6, align 8
  %8 = getelementptr inbounds %struct.VkLayerDispatchTable_, %struct.VkLayerDispatchTable_* %7, i64 0, i32 23
  %9 = load i32 (%struct.VkDevice_T*, i32, %struct.VkFence_T**, i32, i64)*, i32 (%struct.VkDevice_T*, i32, %struct.VkFence_T**, i32, i64)** %8, align 8
  %10 = tail call i32 %9(%struct.VkDevice_T* %0, i32 %1, %struct.VkFence_T** %2, i32 %3, i64 %4) #7
  ret i32 %10
}

; Function Attrs: nounwind ssp uwtable
define i32 @vkCreateSemaphore(%struct.VkDevice_T*, %struct.VkSemaphoreCreateInfo*, %struct.VkAllocationCallbacks*, %struct.VkSemaphore_T**) #0 {
  %5 = bitcast %struct.VkDevice_T* %0 to %struct.VkLayerDispatchTable_**
  %6 = load %struct.VkLayerDispatchTable_*, %struct.VkLayerDispatchTable_** %5, align 8
  %7 = getelementptr inbounds %struct.VkLayerDispatchTable_, %struct.VkLayerDispatchTable_* %6, i64 0, i32 24
  %8 = load i32 (%struct.VkDevice_T*, %struct.VkSemaphoreCreateInfo*, %struct.VkAllocationCallbacks*, %struct.VkSemaphore_T**)*, i32 (%struct.VkDevice_T*, %struct.VkSemaphoreCreateInfo*, %struct.VkAllocationCallbacks*, %struct.VkSemaphore_T**)** %7, align 8
  %9 = tail call i32 %8(%struct.VkDevice_T* %0, %struct.VkSemaphoreCreateInfo* %1, %struct.VkAllocationCallbacks* %2, %struct.VkSemaphore_T** %3) #7
  ret i32 %9
}

; Function Attrs: nounwind ssp uwtable
define void @vkDestroySemaphore(%struct.VkDevice_T*, %struct.VkSemaphore_T*, %struct.VkAllocationCallbacks*) #0 {
  %4 = bitcast %struct.VkDevice_T* %0 to %struct.VkLayerDispatchTable_**
  %5 = load %struct.VkLayerDispatchTable_*, %struct.VkLayerDispatchTable_** %4, align 8
  %6 = getelementptr inbounds %struct.VkLayerDispatchTable_, %struct.VkLayerDispatchTable_* %5, i64 0, i32 25
  %7 = load void (%struct.VkDevice_T*, %struct.VkSemaphore_T*, %struct.VkAllocationCallbacks*)*, void (%struct.VkDevice_T*, %struct.VkSemaphore_T*, %struct.VkAllocationCallbacks*)** %6, align 8
  tail call void %7(%struct.VkDevice_T* %0, %struct.VkSemaphore_T* %1, %struct.VkAllocationCallbacks* %2) #7
  ret void
}

; Function Attrs: nounwind ssp uwtable
define i32 @vkCreateEvent(%struct.VkDevice_T*, %struct.VkEventCreateInfo*, %struct.VkAllocationCallbacks*, %struct.VkEvent_T**) #0 {
  %5 = bitcast %struct.VkDevice_T* %0 to %struct.VkLayerDispatchTable_**
  %6 = load %struct.VkLayerDispatchTable_*, %struct.VkLayerDispatchTable_** %5, align 8
  %7 = getelementptr inbounds %struct.VkLayerDispatchTable_, %struct.VkLayerDispatchTable_* %6, i64 0, i32 26
  %8 = load i32 (%struct.VkDevice_T*, %struct.VkEventCreateInfo*, %struct.VkAllocationCallbacks*, %struct.VkEvent_T**)*, i32 (%struct.VkDevice_T*, %struct.VkEventCreateInfo*, %struct.VkAllocationCallbacks*, %struct.VkEvent_T**)** %7, align 8
  %9 = tail call i32 %8(%struct.VkDevice_T* %0, %struct.VkEventCreateInfo* %1, %struct.VkAllocationCallbacks* %2, %struct.VkEvent_T** %3) #7
  ret i32 %9
}

; Function Attrs: nounwind ssp uwtable
define void @vkDestroyEvent(%struct.VkDevice_T*, %struct.VkEvent_T*, %struct.VkAllocationCallbacks*) #0 {
  %4 = bitcast %struct.VkDevice_T* %0 to %struct.VkLayerDispatchTable_**
  %5 = load %struct.VkLayerDispatchTable_*, %struct.VkLayerDispatchTable_** %4, align 8
  %6 = getelementptr inbounds %struct.VkLayerDispatchTable_, %struct.VkLayerDispatchTable_* %5, i64 0, i32 27
  %7 = load void (%struct.VkDevice_T*, %struct.VkEvent_T*, %struct.VkAllocationCallbacks*)*, void (%struct.VkDevice_T*, %struct.VkEvent_T*, %struct.VkAllocationCallbacks*)** %6, align 8
  tail call void %7(%struct.VkDevice_T* %0, %struct.VkEvent_T* %1, %struct.VkAllocationCallbacks* %2) #7
  ret void
}

; Function Attrs: nounwind ssp uwtable
define i32 @vkGetEventStatus(%struct.VkDevice_T*, %struct.VkEvent_T*) #0 {
  %3 = bitcast %struct.VkDevice_T* %0 to %struct.VkLayerDispatchTable_**
  %4 = load %struct.VkLayerDispatchTable_*, %struct.VkLayerDispatchTable_** %3, align 8
  %5 = getelementptr inbounds %struct.VkLayerDispatchTable_, %struct.VkLayerDispatchTable_* %4, i64 0, i32 28
  %6 = load i32 (%struct.VkDevice_T*, %struct.VkEvent_T*)*, i32 (%struct.VkDevice_T*, %struct.VkEvent_T*)** %5, align 8
  %7 = tail call i32 %6(%struct.VkDevice_T* %0, %struct.VkEvent_T* %1) #7
  ret i32 %7
}

; Function Attrs: nounwind ssp uwtable
define i32 @vkSetEvent(%struct.VkDevice_T*, %struct.VkEvent_T*) #0 {
  %3 = bitcast %struct.VkDevice_T* %0 to %struct.VkLayerDispatchTable_**
  %4 = load %struct.VkLayerDispatchTable_*, %struct.VkLayerDispatchTable_** %3, align 8
  %5 = getelementptr inbounds %struct.VkLayerDispatchTable_, %struct.VkLayerDispatchTable_* %4, i64 0, i32 29
  %6 = load i32 (%struct.VkDevice_T*, %struct.VkEvent_T*)*, i32 (%struct.VkDevice_T*, %struct.VkEvent_T*)** %5, align 8
  %7 = tail call i32 %6(%struct.VkDevice_T* %0, %struct.VkEvent_T* %1) #7
  ret i32 %7
}

; Function Attrs: nounwind ssp uwtable
define i32 @vkResetEvent(%struct.VkDevice_T*, %struct.VkEvent_T*) #0 {
  %3 = bitcast %struct.VkDevice_T* %0 to %struct.VkLayerDispatchTable_**
  %4 = load %struct.VkLayerDispatchTable_*, %struct.VkLayerDispatchTable_** %3, align 8
  %5 = getelementptr inbounds %struct.VkLayerDispatchTable_, %struct.VkLayerDispatchTable_* %4, i64 0, i32 30
  %6 = load i32 (%struct.VkDevice_T*, %struct.VkEvent_T*)*, i32 (%struct.VkDevice_T*, %struct.VkEvent_T*)** %5, align 8
  %7 = tail call i32 %6(%struct.VkDevice_T* %0, %struct.VkEvent_T* %1) #7
  ret i32 %7
}

; Function Attrs: nounwind ssp uwtable
define i32 @vkCreateQueryPool(%struct.VkDevice_T*, %struct.VkQueryPoolCreateInfo*, %struct.VkAllocationCallbacks*, %struct.VkQueryPool_T**) #0 {
  %5 = bitcast %struct.VkDevice_T* %0 to %struct.VkLayerDispatchTable_**
  %6 = load %struct.VkLayerDispatchTable_*, %struct.VkLayerDispatchTable_** %5, align 8
  %7 = getelementptr inbounds %struct.VkLayerDispatchTable_, %struct.VkLayerDispatchTable_* %6, i64 0, i32 31
  %8 = load i32 (%struct.VkDevice_T*, %struct.VkQueryPoolCreateInfo*, %struct.VkAllocationCallbacks*, %struct.VkQueryPool_T**)*, i32 (%struct.VkDevice_T*, %struct.VkQueryPoolCreateInfo*, %struct.VkAllocationCallbacks*, %struct.VkQueryPool_T**)** %7, align 8
  %9 = tail call i32 %8(%struct.VkDevice_T* %0, %struct.VkQueryPoolCreateInfo* %1, %struct.VkAllocationCallbacks* %2, %struct.VkQueryPool_T** %3) #7
  ret i32 %9
}

; Function Attrs: nounwind ssp uwtable
define void @vkDestroyQueryPool(%struct.VkDevice_T*, %struct.VkQueryPool_T*, %struct.VkAllocationCallbacks*) #0 {
  %4 = bitcast %struct.VkDevice_T* %0 to %struct.VkLayerDispatchTable_**
  %5 = load %struct.VkLayerDispatchTable_*, %struct.VkLayerDispatchTable_** %4, align 8
  %6 = getelementptr inbounds %struct.VkLayerDispatchTable_, %struct.VkLayerDispatchTable_* %5, i64 0, i32 32
  %7 = load void (%struct.VkDevice_T*, %struct.VkQueryPool_T*, %struct.VkAllocationCallbacks*)*, void (%struct.VkDevice_T*, %struct.VkQueryPool_T*, %struct.VkAllocationCallbacks*)** %6, align 8
  tail call void %7(%struct.VkDevice_T* %0, %struct.VkQueryPool_T* %1, %struct.VkAllocationCallbacks* %2) #7
  ret void
}

; Function Attrs: nounwind ssp uwtable
define i32 @vkGetQueryPoolResults(%struct.VkDevice_T*, %struct.VkQueryPool_T*, i32, i32, i64, i8*, i64, i32) #0 {
  %9 = bitcast %struct.VkDevice_T* %0 to %struct.VkLayerDispatchTable_**
  %10 = load %struct.VkLayerDispatchTable_*, %struct.VkLayerDispatchTable_** %9, align 8
  %11 = getelementptr inbounds %struct.VkLayerDispatchTable_, %struct.VkLayerDispatchTable_* %10, i64 0, i32 33
  %12 = load i32 (%struct.VkDevice_T*, %struct.VkQueryPool_T*, i32, i32, i64, i8*, i64, i32)*, i32 (%struct.VkDevice_T*, %struct.VkQueryPool_T*, i32, i32, i64, i8*, i64, i32)** %11, align 8
  %13 = tail call i32 %12(%struct.VkDevice_T* %0, %struct.VkQueryPool_T* %1, i32 %2, i32 %3, i64 %4, i8* %5, i64 %6, i32 %7) #7
  ret i32 %13
}

; Function Attrs: nounwind ssp uwtable
define i32 @vkCreateBuffer(%struct.VkDevice_T*, %struct.VkBufferCreateInfo*, %struct.VkAllocationCallbacks*, %struct.VkBuffer_T**) #0 {
  %5 = bitcast %struct.VkDevice_T* %0 to %struct.VkLayerDispatchTable_**
  %6 = load %struct.VkLayerDispatchTable_*, %struct.VkLayerDispatchTable_** %5, align 8
  %7 = getelementptr inbounds %struct.VkLayerDispatchTable_, %struct.VkLayerDispatchTable_* %6, i64 0, i32 34
  %8 = load i32 (%struct.VkDevice_T*, %struct.VkBufferCreateInfo*, %struct.VkAllocationCallbacks*, %struct.VkBuffer_T**)*, i32 (%struct.VkDevice_T*, %struct.VkBufferCreateInfo*, %struct.VkAllocationCallbacks*, %struct.VkBuffer_T**)** %7, align 8
  %9 = tail call i32 %8(%struct.VkDevice_T* %0, %struct.VkBufferCreateInfo* %1, %struct.VkAllocationCallbacks* %2, %struct.VkBuffer_T** %3) #7
  ret i32 %9
}

; Function Attrs: nounwind ssp uwtable
define void @vkDestroyBuffer(%struct.VkDevice_T*, %struct.VkBuffer_T*, %struct.VkAllocationCallbacks*) #0 {
  %4 = bitcast %struct.VkDevice_T* %0 to %struct.VkLayerDispatchTable_**
  %5 = load %struct.VkLayerDispatchTable_*, %struct.VkLayerDispatchTable_** %4, align 8
  %6 = getelementptr inbounds %struct.VkLayerDispatchTable_, %struct.VkLayerDispatchTable_* %5, i64 0, i32 35
  %7 = load void (%struct.VkDevice_T*, %struct.VkBuffer_T*, %struct.VkAllocationCallbacks*)*, void (%struct.VkDevice_T*, %struct.VkBuffer_T*, %struct.VkAllocationCallbacks*)** %6, align 8
  tail call void %7(%struct.VkDevice_T* %0, %struct.VkBuffer_T* %1, %struct.VkAllocationCallbacks* %2) #7
  ret void
}

; Function Attrs: nounwind ssp uwtable
define i32 @vkCreateBufferView(%struct.VkDevice_T*, %struct.VkBufferViewCreateInfo*, %struct.VkAllocationCallbacks*, %struct.VkBufferView_T**) #0 {
  %5 = bitcast %struct.VkDevice_T* %0 to %struct.VkLayerDispatchTable_**
  %6 = load %struct.VkLayerDispatchTable_*, %struct.VkLayerDispatchTable_** %5, align 8
  %7 = getelementptr inbounds %struct.VkLayerDispatchTable_, %struct.VkLayerDispatchTable_* %6, i64 0, i32 36
  %8 = load i32 (%struct.VkDevice_T*, %struct.VkBufferViewCreateInfo*, %struct.VkAllocationCallbacks*, %struct.VkBufferView_T**)*, i32 (%struct.VkDevice_T*, %struct.VkBufferViewCreateInfo*, %struct.VkAllocationCallbacks*, %struct.VkBufferView_T**)** %7, align 8
  %9 = tail call i32 %8(%struct.VkDevice_T* %0, %struct.VkBufferViewCreateInfo* %1, %struct.VkAllocationCallbacks* %2, %struct.VkBufferView_T** %3) #7
  ret i32 %9
}

; Function Attrs: nounwind ssp uwtable
define void @vkDestroyBufferView(%struct.VkDevice_T*, %struct.VkBufferView_T*, %struct.VkAllocationCallbacks*) #0 {
  %4 = bitcast %struct.VkDevice_T* %0 to %struct.VkLayerDispatchTable_**
  %5 = load %struct.VkLayerDispatchTable_*, %struct.VkLayerDispatchTable_** %4, align 8
  %6 = getelementptr inbounds %struct.VkLayerDispatchTable_, %struct.VkLayerDispatchTable_* %5, i64 0, i32 37
  %7 = load void (%struct.VkDevice_T*, %struct.VkBufferView_T*, %struct.VkAllocationCallbacks*)*, void (%struct.VkDevice_T*, %struct.VkBufferView_T*, %struct.VkAllocationCallbacks*)** %6, align 8
  tail call void %7(%struct.VkDevice_T* %0, %struct.VkBufferView_T* %1, %struct.VkAllocationCallbacks* %2) #7
  ret void
}

; Function Attrs: nounwind ssp uwtable
define i32 @vkCreateImage(%struct.VkDevice_T*, %struct.VkImageCreateInfo*, %struct.VkAllocationCallbacks*, %struct.VkImage_T**) #0 {
  %5 = bitcast %struct.VkDevice_T* %0 to %struct.VkLayerDispatchTable_**
  %6 = load %struct.VkLayerDispatchTable_*, %struct.VkLayerDispatchTable_** %5, align 8
  %7 = getelementptr inbounds %struct.VkLayerDispatchTable_, %struct.VkLayerDispatchTable_* %6, i64 0, i32 38
  %8 = load i32 (%struct.VkDevice_T*, %struct.VkImageCreateInfo*, %struct.VkAllocationCallbacks*, %struct.VkImage_T**)*, i32 (%struct.VkDevice_T*, %struct.VkImageCreateInfo*, %struct.VkAllocationCallbacks*, %struct.VkImage_T**)** %7, align 8
  %9 = tail call i32 %8(%struct.VkDevice_T* %0, %struct.VkImageCreateInfo* %1, %struct.VkAllocationCallbacks* %2, %struct.VkImage_T** %3) #7
  ret i32 %9
}

; Function Attrs: nounwind ssp uwtable
define void @vkDestroyImage(%struct.VkDevice_T*, %struct.VkImage_T*, %struct.VkAllocationCallbacks*) #0 {
  %4 = bitcast %struct.VkDevice_T* %0 to %struct.VkLayerDispatchTable_**
  %5 = load %struct.VkLayerDispatchTable_*, %struct.VkLayerDispatchTable_** %4, align 8
  %6 = getelementptr inbounds %struct.VkLayerDispatchTable_, %struct.VkLayerDispatchTable_* %5, i64 0, i32 39
  %7 = load void (%struct.VkDevice_T*, %struct.VkImage_T*, %struct.VkAllocationCallbacks*)*, void (%struct.VkDevice_T*, %struct.VkImage_T*, %struct.VkAllocationCallbacks*)** %6, align 8
  tail call void %7(%struct.VkDevice_T* %0, %struct.VkImage_T* %1, %struct.VkAllocationCallbacks* %2) #7
  ret void
}

; Function Attrs: nounwind ssp uwtable
define void @vkGetImageSubresourceLayout(%struct.VkDevice_T*, %struct.VkImage_T*, %struct.VkImageSubresource*, %struct.VkSubresourceLayout*) #0 {
  %5 = bitcast %struct.VkDevice_T* %0 to %struct.VkLayerDispatchTable_**
  %6 = load %struct.VkLayerDispatchTable_*, %struct.VkLayerDispatchTable_** %5, align 8
  %7 = getelementptr inbounds %struct.VkLayerDispatchTable_, %struct.VkLayerDispatchTable_* %6, i64 0, i32 40
  %8 = load void (%struct.VkDevice_T*, %struct.VkImage_T*, %struct.VkImageSubresource*, %struct.VkSubresourceLayout*)*, void (%struct.VkDevice_T*, %struct.VkImage_T*, %struct.VkImageSubresource*, %struct.VkSubresourceLayout*)** %7, align 8
  tail call void %8(%struct.VkDevice_T* %0, %struct.VkImage_T* %1, %struct.VkImageSubresource* %2, %struct.VkSubresourceLayout* %3) #7
  ret void
}

; Function Attrs: nounwind ssp uwtable
define i32 @vkCreateImageView(%struct.VkDevice_T*, %struct.VkImageViewCreateInfo*, %struct.VkAllocationCallbacks*, %struct.VkImageView_T**) #0 {
  %5 = bitcast %struct.VkDevice_T* %0 to %struct.VkLayerDispatchTable_**
  %6 = load %struct.VkLayerDispatchTable_*, %struct.VkLayerDispatchTable_** %5, align 8
  %7 = getelementptr inbounds %struct.VkLayerDispatchTable_, %struct.VkLayerDispatchTable_* %6, i64 0, i32 41
  %8 = load i32 (%struct.VkDevice_T*, %struct.VkImageViewCreateInfo*, %struct.VkAllocationCallbacks*, %struct.VkImageView_T**)*, i32 (%struct.VkDevice_T*, %struct.VkImageViewCreateInfo*, %struct.VkAllocationCallbacks*, %struct.VkImageView_T**)** %7, align 8
  %9 = tail call i32 %8(%struct.VkDevice_T* %0, %struct.VkImageViewCreateInfo* %1, %struct.VkAllocationCallbacks* %2, %struct.VkImageView_T** %3) #7
  ret i32 %9
}

; Function Attrs: nounwind ssp uwtable
define void @vkDestroyImageView(%struct.VkDevice_T*, %struct.VkImageView_T*, %struct.VkAllocationCallbacks*) #0 {
  %4 = bitcast %struct.VkDevice_T* %0 to %struct.VkLayerDispatchTable_**
  %5 = load %struct.VkLayerDispatchTable_*, %struct.VkLayerDispatchTable_** %4, align 8
  %6 = getelementptr inbounds %struct.VkLayerDispatchTable_, %struct.VkLayerDispatchTable_* %5, i64 0, i32 42
  %7 = load void (%struct.VkDevice_T*, %struct.VkImageView_T*, %struct.VkAllocationCallbacks*)*, void (%struct.VkDevice_T*, %struct.VkImageView_T*, %struct.VkAllocationCallbacks*)** %6, align 8
  tail call void %7(%struct.VkDevice_T* %0, %struct.VkImageView_T* %1, %struct.VkAllocationCallbacks* %2) #7
  ret void
}

; Function Attrs: nounwind ssp uwtable
define i32 @vkCreateShaderModule(%struct.VkDevice_T*, %struct.VkShaderModuleCreateInfo*, %struct.VkAllocationCallbacks*, %struct.VkShaderModule_T**) #0 {
  %5 = bitcast %struct.VkDevice_T* %0 to %struct.VkLayerDispatchTable_**
  %6 = load %struct.VkLayerDispatchTable_*, %struct.VkLayerDispatchTable_** %5, align 8
  %7 = getelementptr inbounds %struct.VkLayerDispatchTable_, %struct.VkLayerDispatchTable_* %6, i64 0, i32 43
  %8 = load i32 (%struct.VkDevice_T*, %struct.VkShaderModuleCreateInfo*, %struct.VkAllocationCallbacks*, %struct.VkShaderModule_T**)*, i32 (%struct.VkDevice_T*, %struct.VkShaderModuleCreateInfo*, %struct.VkAllocationCallbacks*, %struct.VkShaderModule_T**)** %7, align 8
  %9 = tail call i32 %8(%struct.VkDevice_T* %0, %struct.VkShaderModuleCreateInfo* %1, %struct.VkAllocationCallbacks* %2, %struct.VkShaderModule_T** %3) #7
  ret i32 %9
}

; Function Attrs: nounwind ssp uwtable
define void @vkDestroyShaderModule(%struct.VkDevice_T*, %struct.VkShaderModule_T*, %struct.VkAllocationCallbacks*) #0 {
  %4 = bitcast %struct.VkDevice_T* %0 to %struct.VkLayerDispatchTable_**
  %5 = load %struct.VkLayerDispatchTable_*, %struct.VkLayerDispatchTable_** %4, align 8
  %6 = getelementptr inbounds %struct.VkLayerDispatchTable_, %struct.VkLayerDispatchTable_* %5, i64 0, i32 44
  %7 = load void (%struct.VkDevice_T*, %struct.VkShaderModule_T*, %struct.VkAllocationCallbacks*)*, void (%struct.VkDevice_T*, %struct.VkShaderModule_T*, %struct.VkAllocationCallbacks*)** %6, align 8
  tail call void %7(%struct.VkDevice_T* %0, %struct.VkShaderModule_T* %1, %struct.VkAllocationCallbacks* %2) #7
  ret void
}

; Function Attrs: nounwind ssp uwtable
define i32 @vkCreatePipelineCache(%struct.VkDevice_T*, %struct.VkPipelineCacheCreateInfo*, %struct.VkAllocationCallbacks*, %struct.VkPipelineCache_T**) #0 {
  %5 = bitcast %struct.VkDevice_T* %0 to %struct.VkLayerDispatchTable_**
  %6 = load %struct.VkLayerDispatchTable_*, %struct.VkLayerDispatchTable_** %5, align 8
  %7 = getelementptr inbounds %struct.VkLayerDispatchTable_, %struct.VkLayerDispatchTable_* %6, i64 0, i32 45
  %8 = load i32 (%struct.VkDevice_T*, %struct.VkPipelineCacheCreateInfo*, %struct.VkAllocationCallbacks*, %struct.VkPipelineCache_T**)*, i32 (%struct.VkDevice_T*, %struct.VkPipelineCacheCreateInfo*, %struct.VkAllocationCallbacks*, %struct.VkPipelineCache_T**)** %7, align 8
  %9 = tail call i32 %8(%struct.VkDevice_T* %0, %struct.VkPipelineCacheCreateInfo* %1, %struct.VkAllocationCallbacks* %2, %struct.VkPipelineCache_T** %3) #7
  ret i32 %9
}

; Function Attrs: nounwind ssp uwtable
define void @vkDestroyPipelineCache(%struct.VkDevice_T*, %struct.VkPipelineCache_T*, %struct.VkAllocationCallbacks*) #0 {
  %4 = bitcast %struct.VkDevice_T* %0 to %struct.VkLayerDispatchTable_**
  %5 = load %struct.VkLayerDispatchTable_*, %struct.VkLayerDispatchTable_** %4, align 8
  %6 = getelementptr inbounds %struct.VkLayerDispatchTable_, %struct.VkLayerDispatchTable_* %5, i64 0, i32 46
  %7 = load void (%struct.VkDevice_T*, %struct.VkPipelineCache_T*, %struct.VkAllocationCallbacks*)*, void (%struct.VkDevice_T*, %struct.VkPipelineCache_T*, %struct.VkAllocationCallbacks*)** %6, align 8
  tail call void %7(%struct.VkDevice_T* %0, %struct.VkPipelineCache_T* %1, %struct.VkAllocationCallbacks* %2) #7
  ret void
}

; Function Attrs: nounwind ssp uwtable
define i32 @vkGetPipelineCacheData(%struct.VkDevice_T*, %struct.VkPipelineCache_T*, i64*, i8*) #0 {
  %5 = bitcast %struct.VkDevice_T* %0 to %struct.VkLayerDispatchTable_**
  %6 = load %struct.VkLayerDispatchTable_*, %struct.VkLayerDispatchTable_** %5, align 8
  %7 = getelementptr inbounds %struct.VkLayerDispatchTable_, %struct.VkLayerDispatchTable_* %6, i64 0, i32 47
  %8 = load i32 (%struct.VkDevice_T*, %struct.VkPipelineCache_T*, i64*, i8*)*, i32 (%struct.VkDevice_T*, %struct.VkPipelineCache_T*, i64*, i8*)** %7, align 8
  %9 = tail call i32 %8(%struct.VkDevice_T* %0, %struct.VkPipelineCache_T* %1, i64* %2, i8* %3) #7
  ret i32 %9
}

; Function Attrs: nounwind ssp uwtable
define i32 @vkMergePipelineCaches(%struct.VkDevice_T*, %struct.VkPipelineCache_T*, i32, %struct.VkPipelineCache_T**) #0 {
  %5 = bitcast %struct.VkDevice_T* %0 to %struct.VkLayerDispatchTable_**
  %6 = load %struct.VkLayerDispatchTable_*, %struct.VkLayerDispatchTable_** %5, align 8
  %7 = getelementptr inbounds %struct.VkLayerDispatchTable_, %struct.VkLayerDispatchTable_* %6, i64 0, i32 48
  %8 = load i32 (%struct.VkDevice_T*, %struct.VkPipelineCache_T*, i32, %struct.VkPipelineCache_T**)*, i32 (%struct.VkDevice_T*, %struct.VkPipelineCache_T*, i32, %struct.VkPipelineCache_T**)** %7, align 8
  %9 = tail call i32 %8(%struct.VkDevice_T* %0, %struct.VkPipelineCache_T* %1, i32 %2, %struct.VkPipelineCache_T** %3) #7
  ret i32 %9
}

; Function Attrs: nounwind ssp uwtable
define i32 @vkCreateGraphicsPipelines(%struct.VkDevice_T*, %struct.VkPipelineCache_T*, i32, %struct.VkGraphicsPipelineCreateInfo*, %struct.VkAllocationCallbacks*, %struct.VkPipeline_T**) #0 {
  %7 = bitcast %struct.VkDevice_T* %0 to %struct.VkLayerDispatchTable_**
  %8 = load %struct.VkLayerDispatchTable_*, %struct.VkLayerDispatchTable_** %7, align 8
  %9 = getelementptr inbounds %struct.VkLayerDispatchTable_, %struct.VkLayerDispatchTable_* %8, i64 0, i32 49
  %10 = load i32 (%struct.VkDevice_T*, %struct.VkPipelineCache_T*, i32, %struct.VkGraphicsPipelineCreateInfo*, %struct.VkAllocationCallbacks*, %struct.VkPipeline_T**)*, i32 (%struct.VkDevice_T*, %struct.VkPipelineCache_T*, i32, %struct.VkGraphicsPipelineCreateInfo*, %struct.VkAllocationCallbacks*, %struct.VkPipeline_T**)** %9, align 8
  %11 = tail call i32 %10(%struct.VkDevice_T* %0, %struct.VkPipelineCache_T* %1, i32 %2, %struct.VkGraphicsPipelineCreateInfo* %3, %struct.VkAllocationCallbacks* %4, %struct.VkPipeline_T** %5) #7
  ret i32 %11
}

; Function Attrs: nounwind ssp uwtable
define i32 @vkCreateComputePipelines(%struct.VkDevice_T*, %struct.VkPipelineCache_T*, i32, %struct.VkComputePipelineCreateInfo*, %struct.VkAllocationCallbacks*, %struct.VkPipeline_T**) #0 {
  %7 = bitcast %struct.VkDevice_T* %0 to %struct.VkLayerDispatchTable_**
  %8 = load %struct.VkLayerDispatchTable_*, %struct.VkLayerDispatchTable_** %7, align 8
  %9 = getelementptr inbounds %struct.VkLayerDispatchTable_, %struct.VkLayerDispatchTable_* %8, i64 0, i32 50
  %10 = load i32 (%struct.VkDevice_T*, %struct.VkPipelineCache_T*, i32, %struct.VkComputePipelineCreateInfo*, %struct.VkAllocationCallbacks*, %struct.VkPipeline_T**)*, i32 (%struct.VkDevice_T*, %struct.VkPipelineCache_T*, i32, %struct.VkComputePipelineCreateInfo*, %struct.VkAllocationCallbacks*, %struct.VkPipeline_T**)** %9, align 8
  %11 = tail call i32 %10(%struct.VkDevice_T* %0, %struct.VkPipelineCache_T* %1, i32 %2, %struct.VkComputePipelineCreateInfo* %3, %struct.VkAllocationCallbacks* %4, %struct.VkPipeline_T** %5) #7
  ret i32 %11
}

; Function Attrs: nounwind ssp uwtable
define void @vkDestroyPipeline(%struct.VkDevice_T*, %struct.VkPipeline_T*, %struct.VkAllocationCallbacks*) #0 {
  %4 = bitcast %struct.VkDevice_T* %0 to %struct.VkLayerDispatchTable_**
  %5 = load %struct.VkLayerDispatchTable_*, %struct.VkLayerDispatchTable_** %4, align 8
  %6 = getelementptr inbounds %struct.VkLayerDispatchTable_, %struct.VkLayerDispatchTable_* %5, i64 0, i32 51
  %7 = load void (%struct.VkDevice_T*, %struct.VkPipeline_T*, %struct.VkAllocationCallbacks*)*, void (%struct.VkDevice_T*, %struct.VkPipeline_T*, %struct.VkAllocationCallbacks*)** %6, align 8
  tail call void %7(%struct.VkDevice_T* %0, %struct.VkPipeline_T* %1, %struct.VkAllocationCallbacks* %2) #7
  ret void
}

; Function Attrs: nounwind ssp uwtable
define i32 @vkCreatePipelineLayout(%struct.VkDevice_T*, %struct.VkPipelineLayoutCreateInfo*, %struct.VkAllocationCallbacks*, %struct.VkPipelineLayout_T**) #0 {
  %5 = bitcast %struct.VkDevice_T* %0 to %struct.VkLayerDispatchTable_**
  %6 = load %struct.VkLayerDispatchTable_*, %struct.VkLayerDispatchTable_** %5, align 8
  %7 = getelementptr inbounds %struct.VkLayerDispatchTable_, %struct.VkLayerDispatchTable_* %6, i64 0, i32 52
  %8 = load i32 (%struct.VkDevice_T*, %struct.VkPipelineLayoutCreateInfo*, %struct.VkAllocationCallbacks*, %struct.VkPipelineLayout_T**)*, i32 (%struct.VkDevice_T*, %struct.VkPipelineLayoutCreateInfo*, %struct.VkAllocationCallbacks*, %struct.VkPipelineLayout_T**)** %7, align 8
  %9 = tail call i32 %8(%struct.VkDevice_T* %0, %struct.VkPipelineLayoutCreateInfo* %1, %struct.VkAllocationCallbacks* %2, %struct.VkPipelineLayout_T** %3) #7
  ret i32 %9
}

; Function Attrs: nounwind ssp uwtable
define void @vkDestroyPipelineLayout(%struct.VkDevice_T*, %struct.VkPipelineLayout_T*, %struct.VkAllocationCallbacks*) #0 {
  %4 = bitcast %struct.VkDevice_T* %0 to %struct.VkLayerDispatchTable_**
  %5 = load %struct.VkLayerDispatchTable_*, %struct.VkLayerDispatchTable_** %4, align 8
  %6 = getelementptr inbounds %struct.VkLayerDispatchTable_, %struct.VkLayerDispatchTable_* %5, i64 0, i32 53
  %7 = load void (%struct.VkDevice_T*, %struct.VkPipelineLayout_T*, %struct.VkAllocationCallbacks*)*, void (%struct.VkDevice_T*, %struct.VkPipelineLayout_T*, %struct.VkAllocationCallbacks*)** %6, align 8
  tail call void %7(%struct.VkDevice_T* %0, %struct.VkPipelineLayout_T* %1, %struct.VkAllocationCallbacks* %2) #7
  ret void
}

; Function Attrs: nounwind ssp uwtable
define i32 @vkCreateSampler(%struct.VkDevice_T*, %struct.VkSamplerCreateInfo*, %struct.VkAllocationCallbacks*, %struct.VkSampler_T**) #0 {
  %5 = bitcast %struct.VkDevice_T* %0 to %struct.VkLayerDispatchTable_**
  %6 = load %struct.VkLayerDispatchTable_*, %struct.VkLayerDispatchTable_** %5, align 8
  %7 = getelementptr inbounds %struct.VkLayerDispatchTable_, %struct.VkLayerDispatchTable_* %6, i64 0, i32 54
  %8 = load i32 (%struct.VkDevice_T*, %struct.VkSamplerCreateInfo*, %struct.VkAllocationCallbacks*, %struct.VkSampler_T**)*, i32 (%struct.VkDevice_T*, %struct.VkSamplerCreateInfo*, %struct.VkAllocationCallbacks*, %struct.VkSampler_T**)** %7, align 8
  %9 = tail call i32 %8(%struct.VkDevice_T* %0, %struct.VkSamplerCreateInfo* %1, %struct.VkAllocationCallbacks* %2, %struct.VkSampler_T** %3) #7
  ret i32 %9
}

; Function Attrs: nounwind ssp uwtable
define void @vkDestroySampler(%struct.VkDevice_T*, %struct.VkSampler_T*, %struct.VkAllocationCallbacks*) #0 {
  %4 = bitcast %struct.VkDevice_T* %0 to %struct.VkLayerDispatchTable_**
  %5 = load %struct.VkLayerDispatchTable_*, %struct.VkLayerDispatchTable_** %4, align 8
  %6 = getelementptr inbounds %struct.VkLayerDispatchTable_, %struct.VkLayerDispatchTable_* %5, i64 0, i32 55
  %7 = load void (%struct.VkDevice_T*, %struct.VkSampler_T*, %struct.VkAllocationCallbacks*)*, void (%struct.VkDevice_T*, %struct.VkSampler_T*, %struct.VkAllocationCallbacks*)** %6, align 8
  tail call void %7(%struct.VkDevice_T* %0, %struct.VkSampler_T* %1, %struct.VkAllocationCallbacks* %2) #7
  ret void
}

; Function Attrs: nounwind ssp uwtable
define i32 @vkCreateDescriptorSetLayout(%struct.VkDevice_T*, %struct.VkDescriptorSetLayoutCreateInfo*, %struct.VkAllocationCallbacks*, %struct.VkDescriptorSetLayout_T**) #0 {
  %5 = bitcast %struct.VkDevice_T* %0 to %struct.VkLayerDispatchTable_**
  %6 = load %struct.VkLayerDispatchTable_*, %struct.VkLayerDispatchTable_** %5, align 8
  %7 = getelementptr inbounds %struct.VkLayerDispatchTable_, %struct.VkLayerDispatchTable_* %6, i64 0, i32 56
  %8 = load i32 (%struct.VkDevice_T*, %struct.VkDescriptorSetLayoutCreateInfo*, %struct.VkAllocationCallbacks*, %struct.VkDescriptorSetLayout_T**)*, i32 (%struct.VkDevice_T*, %struct.VkDescriptorSetLayoutCreateInfo*, %struct.VkAllocationCallbacks*, %struct.VkDescriptorSetLayout_T**)** %7, align 8
  %9 = tail call i32 %8(%struct.VkDevice_T* %0, %struct.VkDescriptorSetLayoutCreateInfo* %1, %struct.VkAllocationCallbacks* %2, %struct.VkDescriptorSetLayout_T** %3) #7
  ret i32 %9
}

; Function Attrs: nounwind ssp uwtable
define void @vkDestroyDescriptorSetLayout(%struct.VkDevice_T*, %struct.VkDescriptorSetLayout_T*, %struct.VkAllocationCallbacks*) #0 {
  %4 = bitcast %struct.VkDevice_T* %0 to %struct.VkLayerDispatchTable_**
  %5 = load %struct.VkLayerDispatchTable_*, %struct.VkLayerDispatchTable_** %4, align 8
  %6 = getelementptr inbounds %struct.VkLayerDispatchTable_, %struct.VkLayerDispatchTable_* %5, i64 0, i32 57
  %7 = load void (%struct.VkDevice_T*, %struct.VkDescriptorSetLayout_T*, %struct.VkAllocationCallbacks*)*, void (%struct.VkDevice_T*, %struct.VkDescriptorSetLayout_T*, %struct.VkAllocationCallbacks*)** %6, align 8
  tail call void %7(%struct.VkDevice_T* %0, %struct.VkDescriptorSetLayout_T* %1, %struct.VkAllocationCallbacks* %2) #7
  ret void
}

; Function Attrs: nounwind ssp uwtable
define i32 @vkCreateDescriptorPool(%struct.VkDevice_T*, %struct.VkDescriptorPoolCreateInfo*, %struct.VkAllocationCallbacks*, %struct.VkDescriptorPool_T**) #0 {
  %5 = bitcast %struct.VkDevice_T* %0 to %struct.VkLayerDispatchTable_**
  %6 = load %struct.VkLayerDispatchTable_*, %struct.VkLayerDispatchTable_** %5, align 8
  %7 = getelementptr inbounds %struct.VkLayerDispatchTable_, %struct.VkLayerDispatchTable_* %6, i64 0, i32 58
  %8 = load i32 (%struct.VkDevice_T*, %struct.VkDescriptorPoolCreateInfo*, %struct.VkAllocationCallbacks*, %struct.VkDescriptorPool_T**)*, i32 (%struct.VkDevice_T*, %struct.VkDescriptorPoolCreateInfo*, %struct.VkAllocationCallbacks*, %struct.VkDescriptorPool_T**)** %7, align 8
  %9 = tail call i32 %8(%struct.VkDevice_T* %0, %struct.VkDescriptorPoolCreateInfo* %1, %struct.VkAllocationCallbacks* %2, %struct.VkDescriptorPool_T** %3) #7
  ret i32 %9
}

; Function Attrs: nounwind ssp uwtable
define void @vkDestroyDescriptorPool(%struct.VkDevice_T*, %struct.VkDescriptorPool_T*, %struct.VkAllocationCallbacks*) #0 {
  %4 = bitcast %struct.VkDevice_T* %0 to %struct.VkLayerDispatchTable_**
  %5 = load %struct.VkLayerDispatchTable_*, %struct.VkLayerDispatchTable_** %4, align 8
  %6 = getelementptr inbounds %struct.VkLayerDispatchTable_, %struct.VkLayerDispatchTable_* %5, i64 0, i32 59
  %7 = load void (%struct.VkDevice_T*, %struct.VkDescriptorPool_T*, %struct.VkAllocationCallbacks*)*, void (%struct.VkDevice_T*, %struct.VkDescriptorPool_T*, %struct.VkAllocationCallbacks*)** %6, align 8
  tail call void %7(%struct.VkDevice_T* %0, %struct.VkDescriptorPool_T* %1, %struct.VkAllocationCallbacks* %2) #7
  ret void
}

; Function Attrs: nounwind ssp uwtable
define i32 @vkResetDescriptorPool(%struct.VkDevice_T*, %struct.VkDescriptorPool_T*, i32) #0 {
  %4 = bitcast %struct.VkDevice_T* %0 to %struct.VkLayerDispatchTable_**
  %5 = load %struct.VkLayerDispatchTable_*, %struct.VkLayerDispatchTable_** %4, align 8
  %6 = getelementptr inbounds %struct.VkLayerDispatchTable_, %struct.VkLayerDispatchTable_* %5, i64 0, i32 60
  %7 = load i32 (%struct.VkDevice_T*, %struct.VkDescriptorPool_T*, i32)*, i32 (%struct.VkDevice_T*, %struct.VkDescriptorPool_T*, i32)** %6, align 8
  %8 = tail call i32 %7(%struct.VkDevice_T* %0, %struct.VkDescriptorPool_T* %1, i32 %2) #7
  ret i32 %8
}

; Function Attrs: nounwind ssp uwtable
define i32 @vkAllocateDescriptorSets(%struct.VkDevice_T*, %struct.VkDescriptorSetAllocateInfo*, %struct.VkDescriptorSet_T**) #0 {
  %4 = bitcast %struct.VkDevice_T* %0 to %struct.VkLayerDispatchTable_**
  %5 = load %struct.VkLayerDispatchTable_*, %struct.VkLayerDispatchTable_** %4, align 8
  %6 = getelementptr inbounds %struct.VkLayerDispatchTable_, %struct.VkLayerDispatchTable_* %5, i64 0, i32 61
  %7 = load i32 (%struct.VkDevice_T*, %struct.VkDescriptorSetAllocateInfo*, %struct.VkDescriptorSet_T**)*, i32 (%struct.VkDevice_T*, %struct.VkDescriptorSetAllocateInfo*, %struct.VkDescriptorSet_T**)** %6, align 8
  %8 = tail call i32 %7(%struct.VkDevice_T* %0, %struct.VkDescriptorSetAllocateInfo* %1, %struct.VkDescriptorSet_T** %2) #7
  ret i32 %8
}

; Function Attrs: nounwind ssp uwtable
define i32 @vkFreeDescriptorSets(%struct.VkDevice_T*, %struct.VkDescriptorPool_T*, i32, %struct.VkDescriptorSet_T**) #0 {
  %5 = bitcast %struct.VkDevice_T* %0 to %struct.VkLayerDispatchTable_**
  %6 = load %struct.VkLayerDispatchTable_*, %struct.VkLayerDispatchTable_** %5, align 8
  %7 = getelementptr inbounds %struct.VkLayerDispatchTable_, %struct.VkLayerDispatchTable_* %6, i64 0, i32 62
  %8 = load i32 (%struct.VkDevice_T*, %struct.VkDescriptorPool_T*, i32, %struct.VkDescriptorSet_T**)*, i32 (%struct.VkDevice_T*, %struct.VkDescriptorPool_T*, i32, %struct.VkDescriptorSet_T**)** %7, align 8
  %9 = tail call i32 %8(%struct.VkDevice_T* %0, %struct.VkDescriptorPool_T* %1, i32 %2, %struct.VkDescriptorSet_T** %3) #7
  ret i32 %9
}

; Function Attrs: nounwind ssp uwtable
define void @vkUpdateDescriptorSets(%struct.VkDevice_T*, i32, %struct.VkWriteDescriptorSet*, i32, %struct.VkCopyDescriptorSet*) #0 {
  %6 = bitcast %struct.VkDevice_T* %0 to %struct.VkLayerDispatchTable_**
  %7 = load %struct.VkLayerDispatchTable_*, %struct.VkLayerDispatchTable_** %6, align 8
  %8 = getelementptr inbounds %struct.VkLayerDispatchTable_, %struct.VkLayerDispatchTable_* %7, i64 0, i32 63
  %9 = load void (%struct.VkDevice_T*, i32, %struct.VkWriteDescriptorSet*, i32, %struct.VkCopyDescriptorSet*)*, void (%struct.VkDevice_T*, i32, %struct.VkWriteDescriptorSet*, i32, %struct.VkCopyDescriptorSet*)** %8, align 8
  tail call void %9(%struct.VkDevice_T* %0, i32 %1, %struct.VkWriteDescriptorSet* %2, i32 %3, %struct.VkCopyDescriptorSet* %4) #7
  ret void
}

; Function Attrs: nounwind ssp uwtable
define i32 @vkCreateFramebuffer(%struct.VkDevice_T*, %struct.VkFramebufferCreateInfo*, %struct.VkAllocationCallbacks*, %struct.VkFramebuffer_T**) #0 {
  %5 = bitcast %struct.VkDevice_T* %0 to %struct.VkLayerDispatchTable_**
  %6 = load %struct.VkLayerDispatchTable_*, %struct.VkLayerDispatchTable_** %5, align 8
  %7 = getelementptr inbounds %struct.VkLayerDispatchTable_, %struct.VkLayerDispatchTable_* %6, i64 0, i32 64
  %8 = load i32 (%struct.VkDevice_T*, %struct.VkFramebufferCreateInfo*, %struct.VkAllocationCallbacks*, %struct.VkFramebuffer_T**)*, i32 (%struct.VkDevice_T*, %struct.VkFramebufferCreateInfo*, %struct.VkAllocationCallbacks*, %struct.VkFramebuffer_T**)** %7, align 8
  %9 = tail call i32 %8(%struct.VkDevice_T* %0, %struct.VkFramebufferCreateInfo* %1, %struct.VkAllocationCallbacks* %2, %struct.VkFramebuffer_T** %3) #7
  ret i32 %9
}

; Function Attrs: nounwind ssp uwtable
define void @vkDestroyFramebuffer(%struct.VkDevice_T*, %struct.VkFramebuffer_T*, %struct.VkAllocationCallbacks*) #0 {
  %4 = bitcast %struct.VkDevice_T* %0 to %struct.VkLayerDispatchTable_**
  %5 = load %struct.VkLayerDispatchTable_*, %struct.VkLayerDispatchTable_** %4, align 8
  %6 = getelementptr inbounds %struct.VkLayerDispatchTable_, %struct.VkLayerDispatchTable_* %5, i64 0, i32 65
  %7 = load void (%struct.VkDevice_T*, %struct.VkFramebuffer_T*, %struct.VkAllocationCallbacks*)*, void (%struct.VkDevice_T*, %struct.VkFramebuffer_T*, %struct.VkAllocationCallbacks*)** %6, align 8
  tail call void %7(%struct.VkDevice_T* %0, %struct.VkFramebuffer_T* %1, %struct.VkAllocationCallbacks* %2) #7
  ret void
}

; Function Attrs: nounwind ssp uwtable
define i32 @vkCreateRenderPass(%struct.VkDevice_T*, %struct.VkRenderPassCreateInfo*, %struct.VkAllocationCallbacks*, %struct.VkRenderPass_T**) #0 {
  %5 = bitcast %struct.VkDevice_T* %0 to %struct.VkLayerDispatchTable_**
  %6 = load %struct.VkLayerDispatchTable_*, %struct.VkLayerDispatchTable_** %5, align 8
  %7 = getelementptr inbounds %struct.VkLayerDispatchTable_, %struct.VkLayerDispatchTable_* %6, i64 0, i32 66
  %8 = load i32 (%struct.VkDevice_T*, %struct.VkRenderPassCreateInfo*, %struct.VkAllocationCallbacks*, %struct.VkRenderPass_T**)*, i32 (%struct.VkDevice_T*, %struct.VkRenderPassCreateInfo*, %struct.VkAllocationCallbacks*, %struct.VkRenderPass_T**)** %7, align 8
  %9 = tail call i32 %8(%struct.VkDevice_T* %0, %struct.VkRenderPassCreateInfo* %1, %struct.VkAllocationCallbacks* %2, %struct.VkRenderPass_T** %3) #7
  ret i32 %9
}

; Function Attrs: nounwind ssp uwtable
define void @vkDestroyRenderPass(%struct.VkDevice_T*, %struct.VkRenderPass_T*, %struct.VkAllocationCallbacks*) #0 {
  %4 = bitcast %struct.VkDevice_T* %0 to %struct.VkLayerDispatchTable_**
  %5 = load %struct.VkLayerDispatchTable_*, %struct.VkLayerDispatchTable_** %4, align 8
  %6 = getelementptr inbounds %struct.VkLayerDispatchTable_, %struct.VkLayerDispatchTable_* %5, i64 0, i32 67
  %7 = load void (%struct.VkDevice_T*, %struct.VkRenderPass_T*, %struct.VkAllocationCallbacks*)*, void (%struct.VkDevice_T*, %struct.VkRenderPass_T*, %struct.VkAllocationCallbacks*)** %6, align 8
  tail call void %7(%struct.VkDevice_T* %0, %struct.VkRenderPass_T* %1, %struct.VkAllocationCallbacks* %2) #7
  ret void
}

; Function Attrs: nounwind ssp uwtable
define void @vkGetRenderAreaGranularity(%struct.VkDevice_T*, %struct.VkRenderPass_T*, %struct.VkExtent2D*) #0 {
  %4 = bitcast %struct.VkDevice_T* %0 to %struct.VkLayerDispatchTable_**
  %5 = load %struct.VkLayerDispatchTable_*, %struct.VkLayerDispatchTable_** %4, align 8
  %6 = getelementptr inbounds %struct.VkLayerDispatchTable_, %struct.VkLayerDispatchTable_* %5, i64 0, i32 68
  %7 = load void (%struct.VkDevice_T*, %struct.VkRenderPass_T*, %struct.VkExtent2D*)*, void (%struct.VkDevice_T*, %struct.VkRenderPass_T*, %struct.VkExtent2D*)** %6, align 8
  tail call void %7(%struct.VkDevice_T* %0, %struct.VkRenderPass_T* %1, %struct.VkExtent2D* %2) #7
  ret void
}

; Function Attrs: nounwind ssp uwtable
define i32 @vkCreateCommandPool(%struct.VkDevice_T*, %struct.VkCommandPoolCreateInfo*, %struct.VkAllocationCallbacks*, %struct.VkCommandPool_T**) #0 {
  %5 = bitcast %struct.VkDevice_T* %0 to %struct.VkLayerDispatchTable_**
  %6 = load %struct.VkLayerDispatchTable_*, %struct.VkLayerDispatchTable_** %5, align 8
  %7 = getelementptr inbounds %struct.VkLayerDispatchTable_, %struct.VkLayerDispatchTable_* %6, i64 0, i32 69
  %8 = load i32 (%struct.VkDevice_T*, %struct.VkCommandPoolCreateInfo*, %struct.VkAllocationCallbacks*, %struct.VkCommandPool_T**)*, i32 (%struct.VkDevice_T*, %struct.VkCommandPoolCreateInfo*, %struct.VkAllocationCallbacks*, %struct.VkCommandPool_T**)** %7, align 8
  %9 = tail call i32 %8(%struct.VkDevice_T* %0, %struct.VkCommandPoolCreateInfo* %1, %struct.VkAllocationCallbacks* %2, %struct.VkCommandPool_T** %3) #7
  ret i32 %9
}

; Function Attrs: nounwind ssp uwtable
define void @vkDestroyCommandPool(%struct.VkDevice_T*, %struct.VkCommandPool_T*, %struct.VkAllocationCallbacks*) #0 {
  %4 = bitcast %struct.VkDevice_T* %0 to %struct.VkLayerDispatchTable_**
  %5 = load %struct.VkLayerDispatchTable_*, %struct.VkLayerDispatchTable_** %4, align 8
  %6 = getelementptr inbounds %struct.VkLayerDispatchTable_, %struct.VkLayerDispatchTable_* %5, i64 0, i32 70
  %7 = load void (%struct.VkDevice_T*, %struct.VkCommandPool_T*, %struct.VkAllocationCallbacks*)*, void (%struct.VkDevice_T*, %struct.VkCommandPool_T*, %struct.VkAllocationCallbacks*)** %6, align 8
  tail call void %7(%struct.VkDevice_T* %0, %struct.VkCommandPool_T* %1, %struct.VkAllocationCallbacks* %2) #7
  ret void
}

; Function Attrs: nounwind ssp uwtable
define i32 @vkResetCommandPool(%struct.VkDevice_T*, %struct.VkCommandPool_T*, i32) #0 {
  %4 = bitcast %struct.VkDevice_T* %0 to %struct.VkLayerDispatchTable_**
  %5 = load %struct.VkLayerDispatchTable_*, %struct.VkLayerDispatchTable_** %4, align 8
  %6 = getelementptr inbounds %struct.VkLayerDispatchTable_, %struct.VkLayerDispatchTable_* %5, i64 0, i32 71
  %7 = load i32 (%struct.VkDevice_T*, %struct.VkCommandPool_T*, i32)*, i32 (%struct.VkDevice_T*, %struct.VkCommandPool_T*, i32)** %6, align 8
  %8 = tail call i32 %7(%struct.VkDevice_T* %0, %struct.VkCommandPool_T* %1, i32 %2) #7
  ret i32 %8
}

; Function Attrs: nounwind ssp uwtable
define i32 @vkAllocateCommandBuffers(%struct.VkDevice_T*, %struct.VkCommandBufferAllocateInfo*, %struct.VkCommandBuffer_T**) #0 {
  %4 = bitcast %struct.VkDevice_T* %0 to %struct.VkLayerDispatchTable_**
  %5 = load %struct.VkLayerDispatchTable_*, %struct.VkLayerDispatchTable_** %4, align 8
  %6 = getelementptr inbounds %struct.VkLayerDispatchTable_, %struct.VkLayerDispatchTable_* %5, i64 0, i32 72
  %7 = load i32 (%struct.VkDevice_T*, %struct.VkCommandBufferAllocateInfo*, %struct.VkCommandBuffer_T**)*, i32 (%struct.VkDevice_T*, %struct.VkCommandBufferAllocateInfo*, %struct.VkCommandBuffer_T**)** %6, align 8
  %8 = tail call i32 %7(%struct.VkDevice_T* %0, %struct.VkCommandBufferAllocateInfo* %1, %struct.VkCommandBuffer_T** %2) #7
  %9 = icmp eq i32 %8, 0
  br i1 %9, label %10, label %28

10:                                               ; preds = %3
  %11 = getelementptr inbounds %struct.VkCommandBufferAllocateInfo, %struct.VkCommandBufferAllocateInfo* %1, i64 0, i32 4
  %12 = load i32, i32* %11, align 4
  %13 = icmp eq i32 %12, 0
  br i1 %13, label %28, label %14

14:                                               ; preds = %10, %23
  %15 = phi i32 [ %24, %23 ], [ %12, %10 ]
  %16 = phi i64 [ %25, %23 ], [ 0, %10 ]
  %17 = getelementptr inbounds %struct.VkCommandBuffer_T*, %struct.VkCommandBuffer_T** %2, i64 %16
  %18 = load %struct.VkCommandBuffer_T*, %struct.VkCommandBuffer_T** %17, align 8
  %19 = icmp eq %struct.VkCommandBuffer_T* %18, null
  br i1 %19, label %23, label %20

20:                                               ; preds = %14
  %21 = bitcast %struct.VkCommandBuffer_T* %18 to %struct.VkLayerDispatchTable_**
  store %struct.VkLayerDispatchTable_* %5, %struct.VkLayerDispatchTable_** %21, align 8
  %22 = load i32, i32* %11, align 4
  br label %23

23:                                               ; preds = %14, %20
  %24 = phi i32 [ %15, %14 ], [ %22, %20 ]
  %25 = add nuw nsw i64 %16, 1
  %26 = zext i32 %24 to i64
  %27 = icmp ult i64 %25, %26
  br i1 %27, label %14, label %28

28:                                               ; preds = %23, %10, %3
  ret i32 %8
}

; Function Attrs: nounwind ssp uwtable
define void @vkFreeCommandBuffers(%struct.VkDevice_T*, %struct.VkCommandPool_T*, i32, %struct.VkCommandBuffer_T**) #0 {
  %5 = bitcast %struct.VkDevice_T* %0 to %struct.VkLayerDispatchTable_**
  %6 = load %struct.VkLayerDispatchTable_*, %struct.VkLayerDispatchTable_** %5, align 8
  %7 = getelementptr inbounds %struct.VkLayerDispatchTable_, %struct.VkLayerDispatchTable_* %6, i64 0, i32 73
  %8 = load void (%struct.VkDevice_T*, %struct.VkCommandPool_T*, i32, %struct.VkCommandBuffer_T**)*, void (%struct.VkDevice_T*, %struct.VkCommandPool_T*, i32, %struct.VkCommandBuffer_T**)** %7, align 8
  tail call void %8(%struct.VkDevice_T* %0, %struct.VkCommandPool_T* %1, i32 %2, %struct.VkCommandBuffer_T** %3) #7
  ret void
}

; Function Attrs: nounwind ssp uwtable
define i32 @vkBeginCommandBuffer(%struct.VkCommandBuffer_T*, %struct.VkCommandBufferBeginInfo*) #0 {
  %3 = bitcast %struct.VkCommandBuffer_T* %0 to %struct.VkLayerDispatchTable_**
  %4 = load %struct.VkLayerDispatchTable_*, %struct.VkLayerDispatchTable_** %3, align 8
  %5 = getelementptr inbounds %struct.VkLayerDispatchTable_, %struct.VkLayerDispatchTable_* %4, i64 0, i32 74
  %6 = load i32 (%struct.VkCommandBuffer_T*, %struct.VkCommandBufferBeginInfo*)*, i32 (%struct.VkCommandBuffer_T*, %struct.VkCommandBufferBeginInfo*)** %5, align 8
  %7 = tail call i32 %6(%struct.VkCommandBuffer_T* %0, %struct.VkCommandBufferBeginInfo* %1) #7
  ret i32 %7
}

; Function Attrs: nounwind ssp uwtable
define i32 @vkEndCommandBuffer(%struct.VkCommandBuffer_T*) #0 {
  %2 = bitcast %struct.VkCommandBuffer_T* %0 to %struct.VkLayerDispatchTable_**
  %3 = load %struct.VkLayerDispatchTable_*, %struct.VkLayerDispatchTable_** %2, align 8
  %4 = getelementptr inbounds %struct.VkLayerDispatchTable_, %struct.VkLayerDispatchTable_* %3, i64 0, i32 75
  %5 = load i32 (%struct.VkCommandBuffer_T*)*, i32 (%struct.VkCommandBuffer_T*)** %4, align 8
  %6 = tail call i32 %5(%struct.VkCommandBuffer_T* %0) #7
  ret i32 %6
}

; Function Attrs: nounwind ssp uwtable
define i32 @vkResetCommandBuffer(%struct.VkCommandBuffer_T*, i32) #0 {
  %3 = bitcast %struct.VkCommandBuffer_T* %0 to %struct.VkLayerDispatchTable_**
  %4 = load %struct.VkLayerDispatchTable_*, %struct.VkLayerDispatchTable_** %3, align 8
  %5 = getelementptr inbounds %struct.VkLayerDispatchTable_, %struct.VkLayerDispatchTable_* %4, i64 0, i32 76
  %6 = load i32 (%struct.VkCommandBuffer_T*, i32)*, i32 (%struct.VkCommandBuffer_T*, i32)** %5, align 8
  %7 = tail call i32 %6(%struct.VkCommandBuffer_T* %0, i32 %1) #7
  ret i32 %7
}

; Function Attrs: nounwind ssp uwtable
define void @vkCmdBindPipeline(%struct.VkCommandBuffer_T*, i32, %struct.VkPipeline_T*) #0 {
  %4 = bitcast %struct.VkCommandBuffer_T* %0 to %struct.VkLayerDispatchTable_**
  %5 = load %struct.VkLayerDispatchTable_*, %struct.VkLayerDispatchTable_** %4, align 8
  %6 = getelementptr inbounds %struct.VkLayerDispatchTable_, %struct.VkLayerDispatchTable_* %5, i64 0, i32 77
  %7 = load void (%struct.VkCommandBuffer_T*, i32, %struct.VkPipeline_T*)*, void (%struct.VkCommandBuffer_T*, i32, %struct.VkPipeline_T*)** %6, align 8
  tail call void %7(%struct.VkCommandBuffer_T* %0, i32 %1, %struct.VkPipeline_T* %2) #7
  ret void
}

; Function Attrs: nounwind ssp uwtable
define void @vkCmdSetViewport(%struct.VkCommandBuffer_T*, i32, i32, %struct.VkViewport*) #0 {
  %5 = bitcast %struct.VkCommandBuffer_T* %0 to %struct.VkLayerDispatchTable_**
  %6 = load %struct.VkLayerDispatchTable_*, %struct.VkLayerDispatchTable_** %5, align 8
  %7 = getelementptr inbounds %struct.VkLayerDispatchTable_, %struct.VkLayerDispatchTable_* %6, i64 0, i32 78
  %8 = load void (%struct.VkCommandBuffer_T*, i32, i32, %struct.VkViewport*)*, void (%struct.VkCommandBuffer_T*, i32, i32, %struct.VkViewport*)** %7, align 8
  tail call void %8(%struct.VkCommandBuffer_T* %0, i32 %1, i32 %2, %struct.VkViewport* %3) #7
  ret void
}

; Function Attrs: nounwind ssp uwtable
define void @vkCmdSetScissor(%struct.VkCommandBuffer_T*, i32, i32, %struct.VkRect2D*) #0 {
  %5 = bitcast %struct.VkCommandBuffer_T* %0 to %struct.VkLayerDispatchTable_**
  %6 = load %struct.VkLayerDispatchTable_*, %struct.VkLayerDispatchTable_** %5, align 8
  %7 = getelementptr inbounds %struct.VkLayerDispatchTable_, %struct.VkLayerDispatchTable_* %6, i64 0, i32 79
  %8 = load void (%struct.VkCommandBuffer_T*, i32, i32, %struct.VkRect2D*)*, void (%struct.VkCommandBuffer_T*, i32, i32, %struct.VkRect2D*)** %7, align 8
  tail call void %8(%struct.VkCommandBuffer_T* %0, i32 %1, i32 %2, %struct.VkRect2D* %3) #7
  ret void
}

; Function Attrs: nounwind ssp uwtable
define void @vkCmdSetLineWidth(%struct.VkCommandBuffer_T*, float) #0 {
  %3 = bitcast %struct.VkCommandBuffer_T* %0 to %struct.VkLayerDispatchTable_**
  %4 = load %struct.VkLayerDispatchTable_*, %struct.VkLayerDispatchTable_** %3, align 8
  %5 = getelementptr inbounds %struct.VkLayerDispatchTable_, %struct.VkLayerDispatchTable_* %4, i64 0, i32 80
  %6 = load void (%struct.VkCommandBuffer_T*, float)*, void (%struct.VkCommandBuffer_T*, float)** %5, align 8
  tail call void %6(%struct.VkCommandBuffer_T* %0, float %1) #7
  ret void
}

; Function Attrs: nounwind ssp uwtable
define void @vkCmdSetDepthBias(%struct.VkCommandBuffer_T*, float, float, float) #0 {
  %5 = bitcast %struct.VkCommandBuffer_T* %0 to %struct.VkLayerDispatchTable_**
  %6 = load %struct.VkLayerDispatchTable_*, %struct.VkLayerDispatchTable_** %5, align 8
  %7 = getelementptr inbounds %struct.VkLayerDispatchTable_, %struct.VkLayerDispatchTable_* %6, i64 0, i32 81
  %8 = load void (%struct.VkCommandBuffer_T*, float, float, float)*, void (%struct.VkCommandBuffer_T*, float, float, float)** %7, align 8
  tail call void %8(%struct.VkCommandBuffer_T* %0, float %1, float %2, float %3) #7
  ret void
}

; Function Attrs: nounwind ssp uwtable
define void @vkCmdSetBlendConstants(%struct.VkCommandBuffer_T*, float*) #0 {
  %3 = bitcast %struct.VkCommandBuffer_T* %0 to %struct.VkLayerDispatchTable_**
  %4 = load %struct.VkLayerDispatchTable_*, %struct.VkLayerDispatchTable_** %3, align 8
  %5 = getelementptr inbounds %struct.VkLayerDispatchTable_, %struct.VkLayerDispatchTable_* %4, i64 0, i32 82
  %6 = load void (%struct.VkCommandBuffer_T*, float*)*, void (%struct.VkCommandBuffer_T*, float*)** %5, align 8
  tail call void %6(%struct.VkCommandBuffer_T* %0, float* %1) #7
  ret void
}

; Function Attrs: nounwind ssp uwtable
define void @vkCmdSetDepthBounds(%struct.VkCommandBuffer_T*, float, float) #0 {
  %4 = bitcast %struct.VkCommandBuffer_T* %0 to %struct.VkLayerDispatchTable_**
  %5 = load %struct.VkLayerDispatchTable_*, %struct.VkLayerDispatchTable_** %4, align 8
  %6 = getelementptr inbounds %struct.VkLayerDispatchTable_, %struct.VkLayerDispatchTable_* %5, i64 0, i32 83
  %7 = load void (%struct.VkCommandBuffer_T*, float, float)*, void (%struct.VkCommandBuffer_T*, float, float)** %6, align 8
  tail call void %7(%struct.VkCommandBuffer_T* %0, float %1, float %2) #7
  ret void
}

; Function Attrs: nounwind ssp uwtable
define void @vkCmdSetStencilCompareMask(%struct.VkCommandBuffer_T*, i32, i32) #0 {
  %4 = bitcast %struct.VkCommandBuffer_T* %0 to %struct.VkLayerDispatchTable_**
  %5 = load %struct.VkLayerDispatchTable_*, %struct.VkLayerDispatchTable_** %4, align 8
  %6 = getelementptr inbounds %struct.VkLayerDispatchTable_, %struct.VkLayerDispatchTable_* %5, i64 0, i32 84
  %7 = load void (%struct.VkCommandBuffer_T*, i32, i32)*, void (%struct.VkCommandBuffer_T*, i32, i32)** %6, align 8
  tail call void %7(%struct.VkCommandBuffer_T* %0, i32 %1, i32 %2) #7
  ret void
}

; Function Attrs: nounwind ssp uwtable
define void @vkCmdSetStencilWriteMask(%struct.VkCommandBuffer_T*, i32, i32) #0 {
  %4 = bitcast %struct.VkCommandBuffer_T* %0 to %struct.VkLayerDispatchTable_**
  %5 = load %struct.VkLayerDispatchTable_*, %struct.VkLayerDispatchTable_** %4, align 8
  %6 = getelementptr inbounds %struct.VkLayerDispatchTable_, %struct.VkLayerDispatchTable_* %5, i64 0, i32 85
  %7 = load void (%struct.VkCommandBuffer_T*, i32, i32)*, void (%struct.VkCommandBuffer_T*, i32, i32)** %6, align 8
  tail call void %7(%struct.VkCommandBuffer_T* %0, i32 %1, i32 %2) #7
  ret void
}

; Function Attrs: nounwind ssp uwtable
define void @vkCmdSetStencilReference(%struct.VkCommandBuffer_T*, i32, i32) #0 {
  %4 = bitcast %struct.VkCommandBuffer_T* %0 to %struct.VkLayerDispatchTable_**
  %5 = load %struct.VkLayerDispatchTable_*, %struct.VkLayerDispatchTable_** %4, align 8
  %6 = getelementptr inbounds %struct.VkLayerDispatchTable_, %struct.VkLayerDispatchTable_* %5, i64 0, i32 86
  %7 = load void (%struct.VkCommandBuffer_T*, i32, i32)*, void (%struct.VkCommandBuffer_T*, i32, i32)** %6, align 8
  tail call void %7(%struct.VkCommandBuffer_T* %0, i32 %1, i32 %2) #7
  ret void
}

; Function Attrs: nounwind ssp uwtable
define void @vkCmdBindDescriptorSets(%struct.VkCommandBuffer_T*, i32, %struct.VkPipelineLayout_T*, i32, i32, %struct.VkDescriptorSet_T**, i32, i32*) #0 {
  %9 = bitcast %struct.VkCommandBuffer_T* %0 to %struct.VkLayerDispatchTable_**
  %10 = load %struct.VkLayerDispatchTable_*, %struct.VkLayerDispatchTable_** %9, align 8
  %11 = getelementptr inbounds %struct.VkLayerDispatchTable_, %struct.VkLayerDispatchTable_* %10, i64 0, i32 87
  %12 = load void (%struct.VkCommandBuffer_T*, i32, %struct.VkPipelineLayout_T*, i32, i32, %struct.VkDescriptorSet_T**, i32, i32*)*, void (%struct.VkCommandBuffer_T*, i32, %struct.VkPipelineLayout_T*, i32, i32, %struct.VkDescriptorSet_T**, i32, i32*)** %11, align 8
  tail call void %12(%struct.VkCommandBuffer_T* %0, i32 %1, %struct.VkPipelineLayout_T* %2, i32 %3, i32 %4, %struct.VkDescriptorSet_T** %5, i32 %6, i32* %7) #7
  ret void
}

; Function Attrs: nounwind ssp uwtable
define void @vkCmdBindIndexBuffer(%struct.VkCommandBuffer_T*, %struct.VkBuffer_T*, i64, i32) #0 {
  %5 = bitcast %struct.VkCommandBuffer_T* %0 to %struct.VkLayerDispatchTable_**
  %6 = load %struct.VkLayerDispatchTable_*, %struct.VkLayerDispatchTable_** %5, align 8
  %7 = getelementptr inbounds %struct.VkLayerDispatchTable_, %struct.VkLayerDispatchTable_* %6, i64 0, i32 88
  %8 = load void (%struct.VkCommandBuffer_T*, %struct.VkBuffer_T*, i64, i32)*, void (%struct.VkCommandBuffer_T*, %struct.VkBuffer_T*, i64, i32)** %7, align 8
  tail call void %8(%struct.VkCommandBuffer_T* %0, %struct.VkBuffer_T* %1, i64 %2, i32 %3) #7
  ret void
}

; Function Attrs: nounwind ssp uwtable
define void @vkCmdBindVertexBuffers(%struct.VkCommandBuffer_T*, i32, i32, %struct.VkBuffer_T**, i64*) #0 {
  %6 = bitcast %struct.VkCommandBuffer_T* %0 to %struct.VkLayerDispatchTable_**
  %7 = load %struct.VkLayerDispatchTable_*, %struct.VkLayerDispatchTable_** %6, align 8
  %8 = getelementptr inbounds %struct.VkLayerDispatchTable_, %struct.VkLayerDispatchTable_* %7, i64 0, i32 89
  %9 = load void (%struct.VkCommandBuffer_T*, i32, i32, %struct.VkBuffer_T**, i64*)*, void (%struct.VkCommandBuffer_T*, i32, i32, %struct.VkBuffer_T**, i64*)** %8, align 8
  tail call void %9(%struct.VkCommandBuffer_T* %0, i32 %1, i32 %2, %struct.VkBuffer_T** %3, i64* %4) #7
  ret void
}

; Function Attrs: nounwind ssp uwtable
define void @vkCmdDraw(%struct.VkCommandBuffer_T*, i32, i32, i32, i32) #0 {
  %6 = bitcast %struct.VkCommandBuffer_T* %0 to %struct.VkLayerDispatchTable_**
  %7 = load %struct.VkLayerDispatchTable_*, %struct.VkLayerDispatchTable_** %6, align 8
  %8 = getelementptr inbounds %struct.VkLayerDispatchTable_, %struct.VkLayerDispatchTable_* %7, i64 0, i32 90
  %9 = load void (%struct.VkCommandBuffer_T*, i32, i32, i32, i32)*, void (%struct.VkCommandBuffer_T*, i32, i32, i32, i32)** %8, align 8
  tail call void %9(%struct.VkCommandBuffer_T* %0, i32 %1, i32 %2, i32 %3, i32 %4) #7
  ret void
}

; Function Attrs: nounwind ssp uwtable
define void @vkCmdDrawIndexed(%struct.VkCommandBuffer_T*, i32, i32, i32, i32, i32) #0 {
  %7 = bitcast %struct.VkCommandBuffer_T* %0 to %struct.VkLayerDispatchTable_**
  %8 = load %struct.VkLayerDispatchTable_*, %struct.VkLayerDispatchTable_** %7, align 8
  %9 = getelementptr inbounds %struct.VkLayerDispatchTable_, %struct.VkLayerDispatchTable_* %8, i64 0, i32 91
  %10 = load void (%struct.VkCommandBuffer_T*, i32, i32, i32, i32, i32)*, void (%struct.VkCommandBuffer_T*, i32, i32, i32, i32, i32)** %9, align 8
  tail call void %10(%struct.VkCommandBuffer_T* %0, i32 %1, i32 %2, i32 %3, i32 %4, i32 %5) #7
  ret void
}

; Function Attrs: nounwind ssp uwtable
define void @vkCmdDrawIndirect(%struct.VkCommandBuffer_T*, %struct.VkBuffer_T*, i64, i32, i32) #0 {
  %6 = bitcast %struct.VkCommandBuffer_T* %0 to %struct.VkLayerDispatchTable_**
  %7 = load %struct.VkLayerDispatchTable_*, %struct.VkLayerDispatchTable_** %6, align 8
  %8 = getelementptr inbounds %struct.VkLayerDispatchTable_, %struct.VkLayerDispatchTable_* %7, i64 0, i32 92
  %9 = load void (%struct.VkCommandBuffer_T*, %struct.VkBuffer_T*, i64, i32, i32)*, void (%struct.VkCommandBuffer_T*, %struct.VkBuffer_T*, i64, i32, i32)** %8, align 8
  tail call void %9(%struct.VkCommandBuffer_T* %0, %struct.VkBuffer_T* %1, i64 %2, i32 %3, i32 %4) #7
  ret void
}

; Function Attrs: nounwind ssp uwtable
define void @vkCmdDrawIndexedIndirect(%struct.VkCommandBuffer_T*, %struct.VkBuffer_T*, i64, i32, i32) #0 {
  %6 = bitcast %struct.VkCommandBuffer_T* %0 to %struct.VkLayerDispatchTable_**
  %7 = load %struct.VkLayerDispatchTable_*, %struct.VkLayerDispatchTable_** %6, align 8
  %8 = getelementptr inbounds %struct.VkLayerDispatchTable_, %struct.VkLayerDispatchTable_* %7, i64 0, i32 93
  %9 = load void (%struct.VkCommandBuffer_T*, %struct.VkBuffer_T*, i64, i32, i32)*, void (%struct.VkCommandBuffer_T*, %struct.VkBuffer_T*, i64, i32, i32)** %8, align 8
  tail call void %9(%struct.VkCommandBuffer_T* %0, %struct.VkBuffer_T* %1, i64 %2, i32 %3, i32 %4) #7
  ret void
}

; Function Attrs: nounwind ssp uwtable
define void @vkCmdDispatch(%struct.VkCommandBuffer_T*, i32, i32, i32) #0 {
  %5 = bitcast %struct.VkCommandBuffer_T* %0 to %struct.VkLayerDispatchTable_**
  %6 = load %struct.VkLayerDispatchTable_*, %struct.VkLayerDispatchTable_** %5, align 8
  %7 = getelementptr inbounds %struct.VkLayerDispatchTable_, %struct.VkLayerDispatchTable_* %6, i64 0, i32 94
  %8 = load void (%struct.VkCommandBuffer_T*, i32, i32, i32)*, void (%struct.VkCommandBuffer_T*, i32, i32, i32)** %7, align 8
  tail call void %8(%struct.VkCommandBuffer_T* %0, i32 %1, i32 %2, i32 %3) #7
  ret void
}

; Function Attrs: nounwind ssp uwtable
define void @vkCmdDispatchIndirect(%struct.VkCommandBuffer_T*, %struct.VkBuffer_T*, i64) #0 {
  %4 = bitcast %struct.VkCommandBuffer_T* %0 to %struct.VkLayerDispatchTable_**
  %5 = load %struct.VkLayerDispatchTable_*, %struct.VkLayerDispatchTable_** %4, align 8
  %6 = getelementptr inbounds %struct.VkLayerDispatchTable_, %struct.VkLayerDispatchTable_* %5, i64 0, i32 95
  %7 = load void (%struct.VkCommandBuffer_T*, %struct.VkBuffer_T*, i64)*, void (%struct.VkCommandBuffer_T*, %struct.VkBuffer_T*, i64)** %6, align 8
  tail call void %7(%struct.VkCommandBuffer_T* %0, %struct.VkBuffer_T* %1, i64 %2) #7
  ret void
}

; Function Attrs: nounwind ssp uwtable
define void @vkCmdCopyBuffer(%struct.VkCommandBuffer_T*, %struct.VkBuffer_T*, %struct.VkBuffer_T*, i32, %struct.VkBufferCopy*) #0 {
  %6 = bitcast %struct.VkCommandBuffer_T* %0 to %struct.VkLayerDispatchTable_**
  %7 = load %struct.VkLayerDispatchTable_*, %struct.VkLayerDispatchTable_** %6, align 8
  %8 = getelementptr inbounds %struct.VkLayerDispatchTable_, %struct.VkLayerDispatchTable_* %7, i64 0, i32 96
  %9 = load void (%struct.VkCommandBuffer_T*, %struct.VkBuffer_T*, %struct.VkBuffer_T*, i32, %struct.VkBufferCopy*)*, void (%struct.VkCommandBuffer_T*, %struct.VkBuffer_T*, %struct.VkBuffer_T*, i32, %struct.VkBufferCopy*)** %8, align 8
  tail call void %9(%struct.VkCommandBuffer_T* %0, %struct.VkBuffer_T* %1, %struct.VkBuffer_T* %2, i32 %3, %struct.VkBufferCopy* %4) #7
  ret void
}

; Function Attrs: nounwind ssp uwtable
define void @vkCmdCopyImage(%struct.VkCommandBuffer_T*, %struct.VkImage_T*, i32, %struct.VkImage_T*, i32, i32, %struct.VkImageCopy*) #0 {
  %8 = bitcast %struct.VkCommandBuffer_T* %0 to %struct.VkLayerDispatchTable_**
  %9 = load %struct.VkLayerDispatchTable_*, %struct.VkLayerDispatchTable_** %8, align 8
  %10 = getelementptr inbounds %struct.VkLayerDispatchTable_, %struct.VkLayerDispatchTable_* %9, i64 0, i32 97
  %11 = load void (%struct.VkCommandBuffer_T*, %struct.VkImage_T*, i32, %struct.VkImage_T*, i32, i32, %struct.VkImageCopy*)*, void (%struct.VkCommandBuffer_T*, %struct.VkImage_T*, i32, %struct.VkImage_T*, i32, i32, %struct.VkImageCopy*)** %10, align 8
  tail call void %11(%struct.VkCommandBuffer_T* %0, %struct.VkImage_T* %1, i32 %2, %struct.VkImage_T* %3, i32 %4, i32 %5, %struct.VkImageCopy* %6) #7
  ret void
}

; Function Attrs: nounwind ssp uwtable
define void @vkCmdBlitImage(%struct.VkCommandBuffer_T*, %struct.VkImage_T*, i32, %struct.VkImage_T*, i32, i32, %struct.VkImageBlit*, i32) #0 {
  %9 = bitcast %struct.VkCommandBuffer_T* %0 to %struct.VkLayerDispatchTable_**
  %10 = load %struct.VkLayerDispatchTable_*, %struct.VkLayerDispatchTable_** %9, align 8
  %11 = getelementptr inbounds %struct.VkLayerDispatchTable_, %struct.VkLayerDispatchTable_* %10, i64 0, i32 98
  %12 = load void (%struct.VkCommandBuffer_T*, %struct.VkImage_T*, i32, %struct.VkImage_T*, i32, i32, %struct.VkImageBlit*, i32)*, void (%struct.VkCommandBuffer_T*, %struct.VkImage_T*, i32, %struct.VkImage_T*, i32, i32, %struct.VkImageBlit*, i32)** %11, align 8
  tail call void %12(%struct.VkCommandBuffer_T* %0, %struct.VkImage_T* %1, i32 %2, %struct.VkImage_T* %3, i32 %4, i32 %5, %struct.VkImageBlit* %6, i32 %7) #7
  ret void
}

; Function Attrs: nounwind ssp uwtable
define void @vkCmdCopyBufferToImage(%struct.VkCommandBuffer_T*, %struct.VkBuffer_T*, %struct.VkImage_T*, i32, i32, %struct.VkBufferImageCopy*) #0 {
  %7 = bitcast %struct.VkCommandBuffer_T* %0 to %struct.VkLayerDispatchTable_**
  %8 = load %struct.VkLayerDispatchTable_*, %struct.VkLayerDispatchTable_** %7, align 8
  %9 = getelementptr inbounds %struct.VkLayerDispatchTable_, %struct.VkLayerDispatchTable_* %8, i64 0, i32 99
  %10 = load void (%struct.VkCommandBuffer_T*, %struct.VkBuffer_T*, %struct.VkImage_T*, i32, i32, %struct.VkBufferImageCopy*)*, void (%struct.VkCommandBuffer_T*, %struct.VkBuffer_T*, %struct.VkImage_T*, i32, i32, %struct.VkBufferImageCopy*)** %9, align 8
  tail call void %10(%struct.VkCommandBuffer_T* %0, %struct.VkBuffer_T* %1, %struct.VkImage_T* %2, i32 %3, i32 %4, %struct.VkBufferImageCopy* %5) #7
  ret void
}

; Function Attrs: nounwind ssp uwtable
define void @vkCmdCopyImageToBuffer(%struct.VkCommandBuffer_T*, %struct.VkImage_T*, i32, %struct.VkBuffer_T*, i32, %struct.VkBufferImageCopy*) #0 {
  %7 = bitcast %struct.VkCommandBuffer_T* %0 to %struct.VkLayerDispatchTable_**
  %8 = load %struct.VkLayerDispatchTable_*, %struct.VkLayerDispatchTable_** %7, align 8
  %9 = getelementptr inbounds %struct.VkLayerDispatchTable_, %struct.VkLayerDispatchTable_* %8, i64 0, i32 100
  %10 = load void (%struct.VkCommandBuffer_T*, %struct.VkImage_T*, i32, %struct.VkBuffer_T*, i32, %struct.VkBufferImageCopy*)*, void (%struct.VkCommandBuffer_T*, %struct.VkImage_T*, i32, %struct.VkBuffer_T*, i32, %struct.VkBufferImageCopy*)** %9, align 8
  tail call void %10(%struct.VkCommandBuffer_T* %0, %struct.VkImage_T* %1, i32 %2, %struct.VkBuffer_T* %3, i32 %4, %struct.VkBufferImageCopy* %5) #7
  ret void
}

; Function Attrs: nounwind ssp uwtable
define void @vkCmdUpdateBuffer(%struct.VkCommandBuffer_T*, %struct.VkBuffer_T*, i64, i64, i8*) #0 {
  %6 = bitcast %struct.VkCommandBuffer_T* %0 to %struct.VkLayerDispatchTable_**
  %7 = load %struct.VkLayerDispatchTable_*, %struct.VkLayerDispatchTable_** %6, align 8
  %8 = getelementptr inbounds %struct.VkLayerDispatchTable_, %struct.VkLayerDispatchTable_* %7, i64 0, i32 101
  %9 = load void (%struct.VkCommandBuffer_T*, %struct.VkBuffer_T*, i64, i64, i8*)*, void (%struct.VkCommandBuffer_T*, %struct.VkBuffer_T*, i64, i64, i8*)** %8, align 8
  tail call void %9(%struct.VkCommandBuffer_T* %0, %struct.VkBuffer_T* %1, i64 %2, i64 %3, i8* %4) #7
  ret void
}

; Function Attrs: nounwind ssp uwtable
define void @vkCmdFillBuffer(%struct.VkCommandBuffer_T*, %struct.VkBuffer_T*, i64, i64, i32) #0 {
  %6 = bitcast %struct.VkCommandBuffer_T* %0 to %struct.VkLayerDispatchTable_**
  %7 = load %struct.VkLayerDispatchTable_*, %struct.VkLayerDispatchTable_** %6, align 8
  %8 = getelementptr inbounds %struct.VkLayerDispatchTable_, %struct.VkLayerDispatchTable_* %7, i64 0, i32 102
  %9 = load void (%struct.VkCommandBuffer_T*, %struct.VkBuffer_T*, i64, i64, i32)*, void (%struct.VkCommandBuffer_T*, %struct.VkBuffer_T*, i64, i64, i32)** %8, align 8
  tail call void %9(%struct.VkCommandBuffer_T* %0, %struct.VkBuffer_T* %1, i64 %2, i64 %3, i32 %4) #7
  ret void
}

; Function Attrs: nounwind ssp uwtable
define void @vkCmdClearColorImage(%struct.VkCommandBuffer_T*, %struct.VkImage_T*, i32, %union.VkClearColorValue*, i32, %struct.VkImageSubresourceRange*) #0 {
  %7 = bitcast %struct.VkCommandBuffer_T* %0 to %struct.VkLayerDispatchTable_**
  %8 = load %struct.VkLayerDispatchTable_*, %struct.VkLayerDispatchTable_** %7, align 8
  %9 = getelementptr inbounds %struct.VkLayerDispatchTable_, %struct.VkLayerDispatchTable_* %8, i64 0, i32 103
  %10 = load void (%struct.VkCommandBuffer_T*, %struct.VkImage_T*, i32, %union.VkClearColorValue*, i32, %struct.VkImageSubresourceRange*)*, void (%struct.VkCommandBuffer_T*, %struct.VkImage_T*, i32, %union.VkClearColorValue*, i32, %struct.VkImageSubresourceRange*)** %9, align 8
  tail call void %10(%struct.VkCommandBuffer_T* %0, %struct.VkImage_T* %1, i32 %2, %union.VkClearColorValue* %3, i32 %4, %struct.VkImageSubresourceRange* %5) #7
  ret void
}

; Function Attrs: nounwind ssp uwtable
define void @vkCmdClearDepthStencilImage(%struct.VkCommandBuffer_T*, %struct.VkImage_T*, i32, %struct.VkClearDepthStencilValue*, i32, %struct.VkImageSubresourceRange*) #0 {
  %7 = bitcast %struct.VkCommandBuffer_T* %0 to %struct.VkLayerDispatchTable_**
  %8 = load %struct.VkLayerDispatchTable_*, %struct.VkLayerDispatchTable_** %7, align 8
  %9 = getelementptr inbounds %struct.VkLayerDispatchTable_, %struct.VkLayerDispatchTable_* %8, i64 0, i32 104
  %10 = load void (%struct.VkCommandBuffer_T*, %struct.VkImage_T*, i32, %struct.VkClearDepthStencilValue*, i32, %struct.VkImageSubresourceRange*)*, void (%struct.VkCommandBuffer_T*, %struct.VkImage_T*, i32, %struct.VkClearDepthStencilValue*, i32, %struct.VkImageSubresourceRange*)** %9, align 8
  tail call void %10(%struct.VkCommandBuffer_T* %0, %struct.VkImage_T* %1, i32 %2, %struct.VkClearDepthStencilValue* %3, i32 %4, %struct.VkImageSubresourceRange* %5) #7
  ret void
}

; Function Attrs: nounwind ssp uwtable
define void @vkCmdClearAttachments(%struct.VkCommandBuffer_T*, i32, %struct.VkClearAttachment*, i32, %struct.VkClearRect*) #0 {
  %6 = bitcast %struct.VkCommandBuffer_T* %0 to %struct.VkLayerDispatchTable_**
  %7 = load %struct.VkLayerDispatchTable_*, %struct.VkLayerDispatchTable_** %6, align 8
  %8 = getelementptr inbounds %struct.VkLayerDispatchTable_, %struct.VkLayerDispatchTable_* %7, i64 0, i32 105
  %9 = load void (%struct.VkCommandBuffer_T*, i32, %struct.VkClearAttachment*, i32, %struct.VkClearRect*)*, void (%struct.VkCommandBuffer_T*, i32, %struct.VkClearAttachment*, i32, %struct.VkClearRect*)** %8, align 8
  tail call void %9(%struct.VkCommandBuffer_T* %0, i32 %1, %struct.VkClearAttachment* %2, i32 %3, %struct.VkClearRect* %4) #7
  ret void
}

; Function Attrs: nounwind ssp uwtable
define void @vkCmdResolveImage(%struct.VkCommandBuffer_T*, %struct.VkImage_T*, i32, %struct.VkImage_T*, i32, i32, %struct.VkImageResolve*) #0 {
  %8 = bitcast %struct.VkCommandBuffer_T* %0 to %struct.VkLayerDispatchTable_**
  %9 = load %struct.VkLayerDispatchTable_*, %struct.VkLayerDispatchTable_** %8, align 8
  %10 = getelementptr inbounds %struct.VkLayerDispatchTable_, %struct.VkLayerDispatchTable_* %9, i64 0, i32 106
  %11 = load void (%struct.VkCommandBuffer_T*, %struct.VkImage_T*, i32, %struct.VkImage_T*, i32, i32, %struct.VkImageResolve*)*, void (%struct.VkCommandBuffer_T*, %struct.VkImage_T*, i32, %struct.VkImage_T*, i32, i32, %struct.VkImageResolve*)** %10, align 8
  tail call void %11(%struct.VkCommandBuffer_T* %0, %struct.VkImage_T* %1, i32 %2, %struct.VkImage_T* %3, i32 %4, i32 %5, %struct.VkImageResolve* %6) #7
  ret void
}

; Function Attrs: nounwind ssp uwtable
define void @vkCmdSetEvent(%struct.VkCommandBuffer_T*, %struct.VkEvent_T*, i32) #0 {
  %4 = bitcast %struct.VkCommandBuffer_T* %0 to %struct.VkLayerDispatchTable_**
  %5 = load %struct.VkLayerDispatchTable_*, %struct.VkLayerDispatchTable_** %4, align 8
  %6 = getelementptr inbounds %struct.VkLayerDispatchTable_, %struct.VkLayerDispatchTable_* %5, i64 0, i32 107
  %7 = load void (%struct.VkCommandBuffer_T*, %struct.VkEvent_T*, i32)*, void (%struct.VkCommandBuffer_T*, %struct.VkEvent_T*, i32)** %6, align 8
  tail call void %7(%struct.VkCommandBuffer_T* %0, %struct.VkEvent_T* %1, i32 %2) #7
  ret void
}

; Function Attrs: nounwind ssp uwtable
define void @vkCmdResetEvent(%struct.VkCommandBuffer_T*, %struct.VkEvent_T*, i32) #0 {
  %4 = bitcast %struct.VkCommandBuffer_T* %0 to %struct.VkLayerDispatchTable_**
  %5 = load %struct.VkLayerDispatchTable_*, %struct.VkLayerDispatchTable_** %4, align 8
  %6 = getelementptr inbounds %struct.VkLayerDispatchTable_, %struct.VkLayerDispatchTable_* %5, i64 0, i32 108
  %7 = load void (%struct.VkCommandBuffer_T*, %struct.VkEvent_T*, i32)*, void (%struct.VkCommandBuffer_T*, %struct.VkEvent_T*, i32)** %6, align 8
  tail call void %7(%struct.VkCommandBuffer_T* %0, %struct.VkEvent_T* %1, i32 %2) #7
  ret void
}

; Function Attrs: nounwind ssp uwtable
define void @vkCmdWaitEvents(%struct.VkCommandBuffer_T*, i32, %struct.VkEvent_T**, i32, i32, i32, %struct.VkMemoryBarrier*, i32, %struct.VkBufferMemoryBarrier*, i32, %struct.VkImageMemoryBarrier*) #0 {
  %12 = bitcast %struct.VkCommandBuffer_T* %0 to %struct.VkLayerDispatchTable_**
  %13 = load %struct.VkLayerDispatchTable_*, %struct.VkLayerDispatchTable_** %12, align 8
  %14 = getelementptr inbounds %struct.VkLayerDispatchTable_, %struct.VkLayerDispatchTable_* %13, i64 0, i32 109
  %15 = load void (%struct.VkCommandBuffer_T*, i32, %struct.VkEvent_T**, i32, i32, i32, %struct.VkMemoryBarrier*, i32, %struct.VkBufferMemoryBarrier*, i32, %struct.VkImageMemoryBarrier*)*, void (%struct.VkCommandBuffer_T*, i32, %struct.VkEvent_T**, i32, i32, i32, %struct.VkMemoryBarrier*, i32, %struct.VkBufferMemoryBarrier*, i32, %struct.VkImageMemoryBarrier*)** %14, align 8
  tail call void %15(%struct.VkCommandBuffer_T* %0, i32 %1, %struct.VkEvent_T** %2, i32 %3, i32 %4, i32 %5, %struct.VkMemoryBarrier* %6, i32 %7, %struct.VkBufferMemoryBarrier* %8, i32 %9, %struct.VkImageMemoryBarrier* %10) #7
  ret void
}

; Function Attrs: nounwind ssp uwtable
define void @vkCmdPipelineBarrier(%struct.VkCommandBuffer_T*, i32, i32, i32, i32, %struct.VkMemoryBarrier*, i32, %struct.VkBufferMemoryBarrier*, i32, %struct.VkImageMemoryBarrier*) #0 {
  %11 = bitcast %struct.VkCommandBuffer_T* %0 to %struct.VkLayerDispatchTable_**
  %12 = load %struct.VkLayerDispatchTable_*, %struct.VkLayerDispatchTable_** %11, align 8
  %13 = getelementptr inbounds %struct.VkLayerDispatchTable_, %struct.VkLayerDispatchTable_* %12, i64 0, i32 110
  %14 = load void (%struct.VkCommandBuffer_T*, i32, i32, i32, i32, %struct.VkMemoryBarrier*, i32, %struct.VkBufferMemoryBarrier*, i32, %struct.VkImageMemoryBarrier*)*, void (%struct.VkCommandBuffer_T*, i32, i32, i32, i32, %struct.VkMemoryBarrier*, i32, %struct.VkBufferMemoryBarrier*, i32, %struct.VkImageMemoryBarrier*)** %13, align 8
  tail call void %14(%struct.VkCommandBuffer_T* %0, i32 %1, i32 %2, i32 %3, i32 %4, %struct.VkMemoryBarrier* %5, i32 %6, %struct.VkBufferMemoryBarrier* %7, i32 %8, %struct.VkImageMemoryBarrier* %9) #7
  ret void
}

; Function Attrs: nounwind ssp uwtable
define void @vkCmdBeginQuery(%struct.VkCommandBuffer_T*, %struct.VkQueryPool_T*, i32, i32) #0 {
  %5 = bitcast %struct.VkCommandBuffer_T* %0 to %struct.VkLayerDispatchTable_**
  %6 = load %struct.VkLayerDispatchTable_*, %struct.VkLayerDispatchTable_** %5, align 8
  %7 = getelementptr inbounds %struct.VkLayerDispatchTable_, %struct.VkLayerDispatchTable_* %6, i64 0, i32 111
  %8 = load void (%struct.VkCommandBuffer_T*, %struct.VkQueryPool_T*, i32, i32)*, void (%struct.VkCommandBuffer_T*, %struct.VkQueryPool_T*, i32, i32)** %7, align 8
  tail call void %8(%struct.VkCommandBuffer_T* %0, %struct.VkQueryPool_T* %1, i32 %2, i32 %3) #7
  ret void
}

; Function Attrs: nounwind ssp uwtable
define void @vkCmdEndQuery(%struct.VkCommandBuffer_T*, %struct.VkQueryPool_T*, i32) #0 {
  %4 = bitcast %struct.VkCommandBuffer_T* %0 to %struct.VkLayerDispatchTable_**
  %5 = load %struct.VkLayerDispatchTable_*, %struct.VkLayerDispatchTable_** %4, align 8
  %6 = getelementptr inbounds %struct.VkLayerDispatchTable_, %struct.VkLayerDispatchTable_* %5, i64 0, i32 112
  %7 = load void (%struct.VkCommandBuffer_T*, %struct.VkQueryPool_T*, i32)*, void (%struct.VkCommandBuffer_T*, %struct.VkQueryPool_T*, i32)** %6, align 8
  tail call void %7(%struct.VkCommandBuffer_T* %0, %struct.VkQueryPool_T* %1, i32 %2) #7
  ret void
}

; Function Attrs: nounwind ssp uwtable
define void @vkCmdResetQueryPool(%struct.VkCommandBuffer_T*, %struct.VkQueryPool_T*, i32, i32) #0 {
  %5 = bitcast %struct.VkCommandBuffer_T* %0 to %struct.VkLayerDispatchTable_**
  %6 = load %struct.VkLayerDispatchTable_*, %struct.VkLayerDispatchTable_** %5, align 8
  %7 = getelementptr inbounds %struct.VkLayerDispatchTable_, %struct.VkLayerDispatchTable_* %6, i64 0, i32 113
  %8 = load void (%struct.VkCommandBuffer_T*, %struct.VkQueryPool_T*, i32, i32)*, void (%struct.VkCommandBuffer_T*, %struct.VkQueryPool_T*, i32, i32)** %7, align 8
  tail call void %8(%struct.VkCommandBuffer_T* %0, %struct.VkQueryPool_T* %1, i32 %2, i32 %3) #7
  ret void
}

; Function Attrs: nounwind ssp uwtable
define void @vkCmdWriteTimestamp(%struct.VkCommandBuffer_T*, i32, %struct.VkQueryPool_T*, i32) #0 {
  %5 = bitcast %struct.VkCommandBuffer_T* %0 to %struct.VkLayerDispatchTable_**
  %6 = load %struct.VkLayerDispatchTable_*, %struct.VkLayerDispatchTable_** %5, align 8
  %7 = getelementptr inbounds %struct.VkLayerDispatchTable_, %struct.VkLayerDispatchTable_* %6, i64 0, i32 114
  %8 = load void (%struct.VkCommandBuffer_T*, i32, %struct.VkQueryPool_T*, i32)*, void (%struct.VkCommandBuffer_T*, i32, %struct.VkQueryPool_T*, i32)** %7, align 8
  tail call void %8(%struct.VkCommandBuffer_T* %0, i32 %1, %struct.VkQueryPool_T* %2, i32 %3) #7
  ret void
}

; Function Attrs: nounwind ssp uwtable
define void @vkCmdCopyQueryPoolResults(%struct.VkCommandBuffer_T*, %struct.VkQueryPool_T*, i32, i32, %struct.VkBuffer_T*, i64, i64, i32) #0 {
  %9 = bitcast %struct.VkCommandBuffer_T* %0 to %struct.VkLayerDispatchTable_**
  %10 = load %struct.VkLayerDispatchTable_*, %struct.VkLayerDispatchTable_** %9, align 8
  %11 = getelementptr inbounds %struct.VkLayerDispatchTable_, %struct.VkLayerDispatchTable_* %10, i64 0, i32 115
  %12 = load void (%struct.VkCommandBuffer_T*, %struct.VkQueryPool_T*, i32, i32, %struct.VkBuffer_T*, i64, i64, i32)*, void (%struct.VkCommandBuffer_T*, %struct.VkQueryPool_T*, i32, i32, %struct.VkBuffer_T*, i64, i64, i32)** %11, align 8
  tail call void %12(%struct.VkCommandBuffer_T* %0, %struct.VkQueryPool_T* %1, i32 %2, i32 %3, %struct.VkBuffer_T* %4, i64 %5, i64 %6, i32 %7) #7
  ret void
}

; Function Attrs: nounwind ssp uwtable
define void @vkCmdPushConstants(%struct.VkCommandBuffer_T*, %struct.VkPipelineLayout_T*, i32, i32, i32, i8*) #0 {
  %7 = bitcast %struct.VkCommandBuffer_T* %0 to %struct.VkLayerDispatchTable_**
  %8 = load %struct.VkLayerDispatchTable_*, %struct.VkLayerDispatchTable_** %7, align 8
  %9 = getelementptr inbounds %struct.VkLayerDispatchTable_, %struct.VkLayerDispatchTable_* %8, i64 0, i32 116
  %10 = load void (%struct.VkCommandBuffer_T*, %struct.VkPipelineLayout_T*, i32, i32, i32, i8*)*, void (%struct.VkCommandBuffer_T*, %struct.VkPipelineLayout_T*, i32, i32, i32, i8*)** %9, align 8
  tail call void %10(%struct.VkCommandBuffer_T* %0, %struct.VkPipelineLayout_T* %1, i32 %2, i32 %3, i32 %4, i8* %5) #7
  ret void
}

; Function Attrs: nounwind ssp uwtable
define void @vkCmdBeginRenderPass(%struct.VkCommandBuffer_T*, %struct.VkRenderPassBeginInfo*, i32) #0 {
  %4 = bitcast %struct.VkCommandBuffer_T* %0 to %struct.VkLayerDispatchTable_**
  %5 = load %struct.VkLayerDispatchTable_*, %struct.VkLayerDispatchTable_** %4, align 8
  %6 = getelementptr inbounds %struct.VkLayerDispatchTable_, %struct.VkLayerDispatchTable_* %5, i64 0, i32 117
  %7 = load void (%struct.VkCommandBuffer_T*, %struct.VkRenderPassBeginInfo*, i32)*, void (%struct.VkCommandBuffer_T*, %struct.VkRenderPassBeginInfo*, i32)** %6, align 8
  tail call void %7(%struct.VkCommandBuffer_T* %0, %struct.VkRenderPassBeginInfo* %1, i32 %2) #7
  ret void
}

; Function Attrs: nounwind ssp uwtable
define void @vkCmdNextSubpass(%struct.VkCommandBuffer_T*, i32) #0 {
  %3 = bitcast %struct.VkCommandBuffer_T* %0 to %struct.VkLayerDispatchTable_**
  %4 = load %struct.VkLayerDispatchTable_*, %struct.VkLayerDispatchTable_** %3, align 8
  %5 = getelementptr inbounds %struct.VkLayerDispatchTable_, %struct.VkLayerDispatchTable_* %4, i64 0, i32 118
  %6 = load void (%struct.VkCommandBuffer_T*, i32)*, void (%struct.VkCommandBuffer_T*, i32)** %5, align 8
  tail call void %6(%struct.VkCommandBuffer_T* %0, i32 %1) #7
  ret void
}

; Function Attrs: nounwind ssp uwtable
define void @vkCmdEndRenderPass(%struct.VkCommandBuffer_T*) #0 {
  %2 = bitcast %struct.VkCommandBuffer_T* %0 to %struct.VkLayerDispatchTable_**
  %3 = load %struct.VkLayerDispatchTable_*, %struct.VkLayerDispatchTable_** %2, align 8
  %4 = getelementptr inbounds %struct.VkLayerDispatchTable_, %struct.VkLayerDispatchTable_* %3, i64 0, i32 119
  %5 = load void (%struct.VkCommandBuffer_T*)*, void (%struct.VkCommandBuffer_T*)** %4, align 8
  tail call void %5(%struct.VkCommandBuffer_T* %0) #7
  ret void
}

; Function Attrs: nounwind ssp uwtable
define void @vkCmdExecuteCommands(%struct.VkCommandBuffer_T*, i32, %struct.VkCommandBuffer_T**) #0 {
  %4 = bitcast %struct.VkCommandBuffer_T* %0 to %struct.VkLayerDispatchTable_**
  %5 = load %struct.VkLayerDispatchTable_*, %struct.VkLayerDispatchTable_** %4, align 8
  %6 = getelementptr inbounds %struct.VkLayerDispatchTable_, %struct.VkLayerDispatchTable_* %5, i64 0, i32 120
  %7 = load void (%struct.VkCommandBuffer_T*, i32, %struct.VkCommandBuffer_T**)*, void (%struct.VkCommandBuffer_T*, i32, %struct.VkCommandBuffer_T**)** %6, align 8
  tail call void %7(%struct.VkCommandBuffer_T* %0, i32 %1, %struct.VkCommandBuffer_T** %2) #7
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @setupLoaderTrampPhysDevGroups(%struct.VkInstance_T*) local_unnamed_addr #0 {
  %2 = alloca i32, align 4
  %3 = bitcast i32* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %3) #7
  store i32 0, i32* %2, align 4
  %4 = tail call %struct.loader_instance* @loader_get_instance(%struct.VkInstance_T* %0) #7
  %5 = icmp eq %struct.loader_instance* %4, null
  br i1 %5, label %193, label %6

6:                                                ; preds = %1
  %7 = getelementptr inbounds %struct.loader_instance, %struct.loader_instance* %4, i64 0, i32 25
  %8 = bitcast %union.loader_instance_extension_enables* %7 to i16*
  %9 = load i16, i16* %8, align 8
  %10 = and i16 %9, 2
  %11 = icmp eq i16 %10, 0
  %12 = getelementptr inbounds %struct.loader_instance, %struct.loader_instance* %4, i64 0, i32 0
  %13 = load %struct.loader_instance_dispatch_table*, %struct.loader_instance_dispatch_table** %12, align 8
  %14 = getelementptr inbounds %struct.loader_instance_dispatch_table, %struct.loader_instance_dispatch_table* %13, i64 0, i32 0, i32 53
  %15 = getelementptr inbounds %struct.loader_instance_dispatch_table, %struct.loader_instance_dispatch_table* %13, i64 0, i32 0, i32 18
  %16 = select i1 %11, i32 (%struct.VkInstance_T*, i32*, %struct.VkPhysicalDeviceGroupProperties*)** %15, i32 (%struct.VkInstance_T*, i32*, %struct.VkPhysicalDeviceGroupProperties*)** %14
  %17 = load i32 (%struct.VkInstance_T*, i32*, %struct.VkPhysicalDeviceGroupProperties*)*, i32 (%struct.VkInstance_T*, i32*, %struct.VkPhysicalDeviceGroupProperties*)** %16, align 8
  %18 = tail call i32 @setupLoaderTrampPhysDevs(%struct.VkInstance_T* %0) #7
  switch i32 %18, label %193 [
    i32 5, label %19
    i32 0, label %19
  ]

19:                                               ; preds = %6, %6
  %20 = call i32 %17(%struct.VkInstance_T* %0, i32* nonnull %2, %struct.VkPhysicalDeviceGroupProperties* null) #7
  %21 = icmp eq i32 %20, 0
  br i1 %21, label %23, label %22

22:                                               ; preds = %19
  call void (%struct.loader_instance*, i32, i32, i8*, ...) @loader_log(%struct.loader_instance* nonnull %4, i32 8, i32 0, i8* getelementptr inbounds ([138 x i8], [138 x i8]* @.str.6, i64 0, i64 0)) #7
  br label %193

23:                                               ; preds = %19
  %24 = load i32, i32* %2, align 4
  %25 = zext i32 %24 to i64
  %26 = shl nuw nsw i64 %25, 3
  %27 = call i8* @loader_instance_heap_alloc(%struct.loader_instance* nonnull %4, i64 %26, i32 4) #7
  %28 = bitcast i8* %27 to %struct.VkPhysicalDeviceGroupProperties**
  %29 = icmp eq i8* %27, null
  %30 = load i32, i32* %2, align 4
  br i1 %29, label %31, label %32

31:                                               ; preds = %23
  call void (%struct.loader_instance*, i32, i32, i8*, ...) @loader_log(%struct.loader_instance* nonnull %4, i32 8, i32 0, i8* getelementptr inbounds ([94 x i8], [94 x i8]* @.str.7, i64 0, i64 0), i32 %30) #7
  br label %193

32:                                               ; preds = %23
  %33 = zext i32 %30 to i64
  %34 = shl nuw nsw i64 %33, 3
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %27, i8 0, i64 %34, i1 false)
  %35 = load i32, i32* %2, align 4
  %36 = zext i32 %35 to i64
  %37 = mul nuw nsw i64 %36, 288
  %38 = alloca %struct.VkPhysicalDeviceGroupProperties, i64 %36, align 16
  %39 = bitcast %struct.VkPhysicalDeviceGroupProperties* %38 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %39, i8 -86, i64 %37, i1 false)
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %39, i8 0, i64 %37, i1 false)
  %40 = icmp eq i32 %35, 0
  br i1 %40, label %53, label %41

41:                                               ; preds = %32
  %42 = and i64 %36, 1
  %43 = icmp eq i32 %35, 1
  br i1 %43, label %46, label %44

44:                                               ; preds = %41
  %45 = sub nsw i64 %36, %42
  br label %61

46:                                               ; preds = %61, %41
  %47 = phi i64 [ 0, %41 ], [ %71, %61 ]
  %48 = icmp eq i64 %42, 0
  br i1 %48, label %53, label %49

49:                                               ; preds = %46
  %50 = getelementptr inbounds %struct.VkPhysicalDeviceGroupProperties, %struct.VkPhysicalDeviceGroupProperties* %38, i64 %47, i32 0
  store i32 1000070000, i32* %50, align 16
  %51 = getelementptr inbounds %struct.VkPhysicalDeviceGroupProperties, %struct.VkPhysicalDeviceGroupProperties* %38, i64 %47, i32 1
  store i8* null, i8** %51, align 8
  %52 = getelementptr inbounds %struct.VkPhysicalDeviceGroupProperties, %struct.VkPhysicalDeviceGroupProperties* %38, i64 %47, i32 4
  store i32 0, i32* %52, align 8
  br label %53

53:                                               ; preds = %49, %46, %32
  %54 = call i32 %17(%struct.VkInstance_T* %0, i32* nonnull %2, %struct.VkPhysicalDeviceGroupProperties* nonnull %38) #7
  %55 = load i32, i32* %2, align 4
  %56 = icmp eq i32 %55, 0
  br i1 %56, label %195, label %57

57:                                               ; preds = %53
  %58 = getelementptr inbounds %struct.loader_instance, %struct.loader_instance* %4, i64 0, i32 6
  %59 = getelementptr inbounds %struct.loader_instance, %struct.loader_instance* %4, i64 0, i32 7
  %60 = zext i32 %55 to i64
  br label %74

61:                                               ; preds = %61, %44
  %62 = phi i64 [ 0, %44 ], [ %71, %61 ]
  %63 = phi i64 [ %45, %44 ], [ %72, %61 ]
  %64 = getelementptr inbounds %struct.VkPhysicalDeviceGroupProperties, %struct.VkPhysicalDeviceGroupProperties* %38, i64 %62, i32 0
  store i32 1000070000, i32* %64, align 16
  %65 = getelementptr inbounds %struct.VkPhysicalDeviceGroupProperties, %struct.VkPhysicalDeviceGroupProperties* %38, i64 %62, i32 1
  store i8* null, i8** %65, align 8
  %66 = getelementptr inbounds %struct.VkPhysicalDeviceGroupProperties, %struct.VkPhysicalDeviceGroupProperties* %38, i64 %62, i32 4
  store i32 0, i32* %66, align 8
  %67 = or i64 %62, 1
  %68 = getelementptr inbounds %struct.VkPhysicalDeviceGroupProperties, %struct.VkPhysicalDeviceGroupProperties* %38, i64 %67, i32 0
  store i32 1000070000, i32* %68, align 16
  %69 = getelementptr inbounds %struct.VkPhysicalDeviceGroupProperties, %struct.VkPhysicalDeviceGroupProperties* %38, i64 %67, i32 1
  store i8* null, i8** %69, align 8
  %70 = getelementptr inbounds %struct.VkPhysicalDeviceGroupProperties, %struct.VkPhysicalDeviceGroupProperties* %38, i64 %67, i32 4
  store i32 0, i32* %70, align 8
  %71 = add nuw nsw i64 %62, 2
  %72 = add i64 %63, -2
  %73 = icmp eq i64 %72, 0
  br i1 %73, label %46, label %61

74:                                               ; preds = %57, %112
  %75 = phi i64 [ 0, %57 ], [ %113, %112 ]
  %76 = getelementptr inbounds %struct.VkPhysicalDeviceGroupProperties, %struct.VkPhysicalDeviceGroupProperties* %38, i64 %75, i32 2
  %77 = load i32, i32* %76, align 16
  %78 = icmp eq i32 %77, 0
  br i1 %78, label %112, label %79

79:                                               ; preds = %74
  %80 = zext i32 %77 to i64
  br label %85

81:                                               ; preds = %112
  br i1 %56, label %195, label %82

82:                                               ; preds = %81
  %83 = getelementptr inbounds %struct.loader_instance, %struct.loader_instance* %4, i64 0, i32 10
  %84 = getelementptr inbounds %struct.loader_instance, %struct.loader_instance* %4, i64 0, i32 11
  br label %115

85:                                               ; preds = %79, %104
  %86 = phi i64 [ 0, %79 ], [ %106, %104 ]
  %87 = load i32, i32* %58, align 8
  %88 = icmp eq i32 %87, 0
  br i1 %88, label %108, label %89

89:                                               ; preds = %85
  %90 = getelementptr inbounds %struct.VkPhysicalDeviceGroupProperties, %struct.VkPhysicalDeviceGroupProperties* %38, i64 %75, i32 3, i64 %86
  %91 = load %struct.VkPhysicalDevice_T*, %struct.VkPhysicalDevice_T** %90, align 8
  %92 = load %struct.loader_physical_device_tramp**, %struct.loader_physical_device_tramp*** %59, align 8
  %93 = zext i32 %87 to i64
  br label %96

94:                                               ; preds = %96
  %95 = icmp ult i64 %103, %93
  br i1 %95, label %96, label %108

96:                                               ; preds = %89, %94
  %97 = phi i64 [ 0, %89 ], [ %103, %94 ]
  %98 = getelementptr inbounds %struct.loader_physical_device_tramp*, %struct.loader_physical_device_tramp** %92, i64 %97
  %99 = load %struct.loader_physical_device_tramp*, %struct.loader_physical_device_tramp** %98, align 8
  %100 = getelementptr inbounds %struct.loader_physical_device_tramp, %struct.loader_physical_device_tramp* %99, i64 0, i32 2
  %101 = load %struct.VkPhysicalDevice_T*, %struct.VkPhysicalDevice_T** %100, align 8
  %102 = icmp eq %struct.VkPhysicalDevice_T* %91, %101
  %103 = add nuw nsw i64 %97, 1
  br i1 %102, label %104, label %94

104:                                              ; preds = %96
  %105 = bitcast %struct.VkPhysicalDevice_T** %90 to %struct.loader_physical_device_tramp**
  store %struct.loader_physical_device_tramp* %99, %struct.loader_physical_device_tramp** %105, align 8
  %106 = add nuw nsw i64 %86, 1
  %107 = icmp ult i64 %106, %80
  br i1 %107, label %85, label %112

108:                                              ; preds = %85, %94
  %109 = trunc i64 %86 to i32
  %110 = trunc i64 %75 to i32
  call void (%struct.loader_instance*, i32, i32, i8*, ...) @loader_log(%struct.loader_instance* nonnull %4, i32 8, i32 0, i8* getelementptr inbounds ([160 x i8], [160 x i8]* @.str.10, i64 0, i64 0), i32 %109, i32 %110) #7
  %111 = load i32, i32* %2, align 4
  br label %179

112:                                              ; preds = %104, %74
  %113 = add nuw nsw i64 %75, 1
  %114 = icmp ult i64 %113, %60
  br i1 %114, label %74, label %81

115:                                              ; preds = %82, %174
  %116 = phi i32 [ %55, %82 ], [ %175, %174 ]
  %117 = phi i64 [ 0, %82 ], [ %176, %174 ]
  %118 = load i32, i32* %83, align 8
  %119 = icmp eq i32 %118, 0
  br i1 %119, label %160, label %120

120:                                              ; preds = %115
  %121 = getelementptr inbounds %struct.VkPhysicalDeviceGroupProperties, %struct.VkPhysicalDeviceGroupProperties* %38, i64 %117, i32 2
  %122 = load i32, i32* %121, align 16
  %123 = load %struct.VkPhysicalDeviceGroupProperties**, %struct.VkPhysicalDeviceGroupProperties*** %84, align 8
  %124 = icmp eq i32 %122, 0
  %125 = zext i32 %122 to i64
  %126 = zext i32 %118 to i64
  br label %127

127:                                              ; preds = %120, %157
  %128 = phi i64 [ 0, %120 ], [ %158, %157 ]
  %129 = getelementptr inbounds %struct.VkPhysicalDeviceGroupProperties*, %struct.VkPhysicalDeviceGroupProperties** %123, i64 %128
  %130 = load %struct.VkPhysicalDeviceGroupProperties*, %struct.VkPhysicalDeviceGroupProperties** %129, align 8
  %131 = getelementptr inbounds %struct.VkPhysicalDeviceGroupProperties, %struct.VkPhysicalDeviceGroupProperties* %130, i64 0, i32 2
  %132 = load i32, i32* %131, align 8
  %133 = icmp eq i32 %122, %132
  br i1 %133, label %134, label %157

134:                                              ; preds = %127
  br i1 %124, label %150, label %135

135:                                              ; preds = %134, %147
  %136 = phi i64 [ %148, %147 ], [ 0, %134 ]
  %137 = getelementptr inbounds %struct.VkPhysicalDeviceGroupProperties, %struct.VkPhysicalDeviceGroupProperties* %130, i64 0, i32 3, i64 %136
  %138 = load %struct.VkPhysicalDevice_T*, %struct.VkPhysicalDevice_T** %137, align 8
  br label %141

139:                                              ; preds = %141
  %140 = icmp eq i64 %146, %125
  br i1 %140, label %157, label %141

141:                                              ; preds = %139, %135
  %142 = phi i64 [ 0, %135 ], [ %146, %139 ]
  %143 = getelementptr inbounds %struct.VkPhysicalDeviceGroupProperties, %struct.VkPhysicalDeviceGroupProperties* %38, i64 %117, i32 3, i64 %142
  %144 = load %struct.VkPhysicalDevice_T*, %struct.VkPhysicalDevice_T** %143, align 8
  %145 = icmp eq %struct.VkPhysicalDevice_T* %144, %138
  %146 = add nuw nsw i64 %142, 1
  br i1 %145, label %147, label %139

147:                                              ; preds = %141
  %148 = add nuw nsw i64 %136, 1
  %149 = icmp eq i64 %148, %125
  br i1 %149, label %150, label %135

150:                                              ; preds = %134, %147
  %151 = and i64 %128, 4294967295
  %152 = getelementptr inbounds %struct.VkPhysicalDeviceGroupProperties*, %struct.VkPhysicalDeviceGroupProperties** %123, i64 %151
  %153 = bitcast %struct.VkPhysicalDeviceGroupProperties** %152 to i64*
  %154 = load i64, i64* %153, align 8
  %155 = getelementptr inbounds %struct.VkPhysicalDeviceGroupProperties*, %struct.VkPhysicalDeviceGroupProperties** %28, i64 %117
  %156 = bitcast %struct.VkPhysicalDeviceGroupProperties** %155 to i64*
  store i64 %154, i64* %156, align 8
  br label %160

157:                                              ; preds = %139, %127
  %158 = add nuw nsw i64 %128, 1
  %159 = icmp ult i64 %158, %126
  br i1 %159, label %127, label %160

160:                                              ; preds = %157, %115, %150
  %161 = getelementptr inbounds %struct.VkPhysicalDeviceGroupProperties*, %struct.VkPhysicalDeviceGroupProperties** %28, i64 %117
  %162 = load %struct.VkPhysicalDeviceGroupProperties*, %struct.VkPhysicalDeviceGroupProperties** %161, align 8
  %163 = icmp eq %struct.VkPhysicalDeviceGroupProperties* %162, null
  br i1 %163, label %164, label %174

164:                                              ; preds = %160
  %165 = call i8* @loader_instance_heap_alloc(%struct.loader_instance* nonnull %4, i64 288, i32 4) #7
  %166 = bitcast %struct.VkPhysicalDeviceGroupProperties** %161 to i8**
  store i8* %165, i8** %166, align 8
  %167 = icmp eq i8* %165, null
  br i1 %167, label %168, label %170

168:                                              ; preds = %164
  %169 = trunc i64 %117 to i32
  call void (%struct.loader_instance*, i32, i32, i8*, ...) @loader_log(%struct.loader_instance* nonnull %4, i32 8, i32 0, i8* getelementptr inbounds ([94 x i8], [94 x i8]* @.str.11, i64 0, i64 0), i32 %169) #7
  store i32 %169, i32* %2, align 4
  br label %179

170:                                              ; preds = %164
  %171 = getelementptr inbounds %struct.VkPhysicalDeviceGroupProperties, %struct.VkPhysicalDeviceGroupProperties* %38, i64 %117
  %172 = bitcast %struct.VkPhysicalDeviceGroupProperties* %171 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %165, i8* align 16 %172, i64 288, i1 false)
  %173 = load i32, i32* %2, align 4
  br label %174

174:                                              ; preds = %160, %170
  %175 = phi i32 [ %116, %160 ], [ %173, %170 ]
  %176 = add nuw nsw i64 %117, 1
  %177 = zext i32 %175 to i64
  %178 = icmp ult i64 %176, %177
  br i1 %178, label %115, label %195

179:                                              ; preds = %168, %108
  %180 = phi i32 [ %169, %168 ], [ %111, %108 ]
  %181 = phi i32 [ -1, %168 ], [ -3, %108 ]
  %182 = icmp eq i32 %180, 0
  br i1 %182, label %183, label %184

183:                                              ; preds = %184, %179
  call void @loader_instance_heap_free(%struct.loader_instance* nonnull %4, i8* nonnull %27) #7
  br label %193

184:                                              ; preds = %179, %184
  %185 = phi i64 [ %189, %184 ], [ 0, %179 ]
  %186 = getelementptr inbounds %struct.VkPhysicalDeviceGroupProperties*, %struct.VkPhysicalDeviceGroupProperties** %28, i64 %185
  %187 = bitcast %struct.VkPhysicalDeviceGroupProperties** %186 to i8**
  %188 = load i8*, i8** %187, align 8
  call void @loader_instance_heap_free(%struct.loader_instance* nonnull %4, i8* %188) #7
  %189 = add nuw nsw i64 %185, 1
  %190 = load i32, i32* %2, align 4
  %191 = zext i32 %190 to i64
  %192 = icmp ult i64 %189, %191
  br i1 %192, label %184, label %183

193:                                              ; preds = %22, %31, %1, %6, %183
  %194 = phi i32 [ %181, %183 ], [ %20, %22 ], [ -1, %31 ], [ -3, %1 ], [ %18, %6 ]
  store i32 0, i32* %2, align 4
  br label %250

195:                                              ; preds = %174, %53, %81
  %196 = phi i32 [ 0, %81 ], [ 0, %53 ], [ %175, %174 ]
  %197 = getelementptr inbounds %struct.loader_instance, %struct.loader_instance* %4, i64 0, i32 11
  %198 = load %struct.VkPhysicalDeviceGroupProperties**, %struct.VkPhysicalDeviceGroupProperties*** %197, align 8
  %199 = icmp eq %struct.VkPhysicalDeviceGroupProperties** %198, null
  %200 = bitcast %struct.VkPhysicalDeviceGroupProperties** %198 to i8*
  br i1 %199, label %201, label %203

201:                                              ; preds = %195
  %202 = bitcast %struct.VkPhysicalDeviceGroupProperties*** %197 to i8**
  br label %246

203:                                              ; preds = %195
  %204 = getelementptr inbounds %struct.loader_instance, %struct.loader_instance* %4, i64 0, i32 10
  %205 = load i32, i32* %204, align 8
  %206 = icmp eq i32 %205, 0
  br i1 %206, label %207, label %209

207:                                              ; preds = %203
  %208 = bitcast %struct.VkPhysicalDeviceGroupProperties*** %197 to i8**
  br label %222

209:                                              ; preds = %203, %243
  %210 = phi i32 [ %239, %243 ], [ %205, %203 ]
  %211 = phi %struct.VkPhysicalDeviceGroupProperties** [ %245, %243 ], [ %198, %203 ]
  %212 = phi i32 [ %244, %243 ], [ %196, %203 ]
  %213 = phi i64 [ %240, %243 ], [ 0, %203 ]
  %214 = icmp eq i32 %212, 0
  %215 = getelementptr inbounds %struct.VkPhysicalDeviceGroupProperties*, %struct.VkPhysicalDeviceGroupProperties** %211, i64 %213
  br i1 %214, label %234, label %216

216:                                              ; preds = %209
  %217 = zext i32 %212 to i64
  %218 = load %struct.VkPhysicalDeviceGroupProperties*, %struct.VkPhysicalDeviceGroupProperties** %215, align 8
  br label %228

219:                                              ; preds = %238
  %220 = bitcast %struct.VkPhysicalDeviceGroupProperties*** %197 to i8**
  %221 = load i8*, i8** %220, align 8
  br label %222

222:                                              ; preds = %207, %219
  %223 = phi i8** [ %208, %207 ], [ %220, %219 ]
  %224 = phi i8* [ %200, %207 ], [ %221, %219 ]
  call void @loader_instance_heap_free(%struct.loader_instance* nonnull %4, i8* %224) #7
  %225 = load i32, i32* %2, align 4
  br label %246

226:                                              ; preds = %228
  %227 = icmp ult i64 %233, %217
  br i1 %227, label %228, label %234

228:                                              ; preds = %216, %226
  %229 = phi i64 [ 0, %216 ], [ %233, %226 ]
  %230 = getelementptr inbounds %struct.VkPhysicalDeviceGroupProperties*, %struct.VkPhysicalDeviceGroupProperties** %28, i64 %229
  %231 = load %struct.VkPhysicalDeviceGroupProperties*, %struct.VkPhysicalDeviceGroupProperties** %230, align 8
  %232 = icmp eq %struct.VkPhysicalDeviceGroupProperties* %218, %231
  %233 = add nuw nsw i64 %229, 1
  br i1 %232, label %238, label %226

234:                                              ; preds = %226, %209
  %235 = bitcast %struct.VkPhysicalDeviceGroupProperties** %215 to i8**
  %236 = load i8*, i8** %235, align 8
  call void @loader_instance_heap_free(%struct.loader_instance* nonnull %4, i8* %236) #7
  %237 = load i32, i32* %204, align 8
  br label %238

238:                                              ; preds = %228, %234
  %239 = phi i32 [ %237, %234 ], [ %210, %228 ]
  %240 = add nuw nsw i64 %213, 1
  %241 = zext i32 %239 to i64
  %242 = icmp ult i64 %240, %241
  br i1 %242, label %243, label %219

243:                                              ; preds = %238
  %244 = load i32, i32* %2, align 4
  %245 = load %struct.VkPhysicalDeviceGroupProperties**, %struct.VkPhysicalDeviceGroupProperties*** %197, align 8
  br label %209

246:                                              ; preds = %201, %222
  %247 = phi i8** [ %202, %201 ], [ %223, %222 ]
  %248 = phi i32 [ %196, %201 ], [ %225, %222 ]
  %249 = getelementptr inbounds %struct.loader_instance, %struct.loader_instance* %4, i64 0, i32 10
  store i32 %248, i32* %249, align 8
  store i8* %27, i8** %247, align 8
  br label %250

250:                                              ; preds = %193, %246
  %251 = phi i32 [ 0, %246 ], [ %194, %193 ]
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %3) #7
  ret i32 %251
}

; Function Attrs: nounwind ssp uwtable
define i32 @vkEnumeratePhysicalDeviceGroups(%struct.VkInstance_T*, i32*, %struct.VkPhysicalDeviceGroupProperties*) #0 {
  %4 = tail call i32 @pthread_mutex_lock(%union.pthread_mutex_t* nonnull @loader_lock) #7
  %5 = tail call %struct.loader_instance* @loader_get_instance(%struct.VkInstance_T* %0) #7
  %6 = icmp eq %struct.loader_instance* %5, null
  br i1 %6, label %65, label %7

7:                                                ; preds = %3
  %8 = icmp eq i32* %1, null
  br i1 %8, label %9, label %10

9:                                                ; preds = %7
  tail call void (%struct.loader_instance*, i32, i32, i8*, ...) @loader_log(%struct.loader_instance* nonnull %5, i32 8, i32 0, i8* getelementptr inbounds ([104 x i8], [104 x i8]* @.str.12, i64 0, i64 0)) #7
  br label %65

10:                                               ; preds = %7
  %11 = tail call i32 @setupLoaderTrampPhysDevGroups(%struct.VkInstance_T* %0)
  %12 = icmp eq i32 %11, 0
  br i1 %12, label %13, label %65

13:                                               ; preds = %10
  %14 = getelementptr inbounds %struct.loader_instance, %struct.loader_instance* %5, i64 0, i32 10
  %15 = load i32, i32* %14, align 8
  %16 = icmp eq %struct.VkPhysicalDeviceGroupProperties* %2, null
  br i1 %16, label %62, label %17

17:                                               ; preds = %13
  %18 = load i32, i32* %1, align 4
  %19 = icmp ugt i32 %15, %18
  br i1 %19, label %20, label %22

20:                                               ; preds = %17
  tail call void (%struct.loader_instance*, i32, i32, i8*, ...) @loader_log(%struct.loader_instance* nonnull %5, i32 1, i32 0, i8* getelementptr inbounds ([129 x i8], [129 x i8]* @.str.13, i64 0, i64 0), i32 %15, i32 %18) #7
  %21 = load i32, i32* %1, align 4
  br label %22

22:                                               ; preds = %20, %17
  %23 = phi i32 [ 5, %20 ], [ 0, %17 ]
  %24 = phi i32 [ %21, %20 ], [ %15, %17 ]
  %25 = icmp eq i32 %24, 0
  br i1 %25, label %62, label %26

26:                                               ; preds = %22
  %27 = getelementptr inbounds %struct.loader_instance, %struct.loader_instance* %5, i64 0, i32 11
  %28 = zext i32 %24 to i64
  %29 = and i64 %28, 1
  %30 = icmp eq i32 %24, 1
  br i1 %30, label %52, label %31

31:                                               ; preds = %26
  %32 = sub nsw i64 %28, %29
  br label %33

33:                                               ; preds = %33, %31
  %34 = phi i64 [ 0, %31 ], [ %49, %33 ]
  %35 = phi i64 [ %32, %31 ], [ %50, %33 ]
  %36 = getelementptr inbounds %struct.VkPhysicalDeviceGroupProperties, %struct.VkPhysicalDeviceGroupProperties* %2, i64 %34
  %37 = bitcast %struct.VkPhysicalDeviceGroupProperties* %36 to i8*
  %38 = load %struct.VkPhysicalDeviceGroupProperties**, %struct.VkPhysicalDeviceGroupProperties*** %27, align 8
  %39 = getelementptr inbounds %struct.VkPhysicalDeviceGroupProperties*, %struct.VkPhysicalDeviceGroupProperties** %38, i64 %34
  %40 = bitcast %struct.VkPhysicalDeviceGroupProperties** %39 to i8**
  %41 = load i8*, i8** %40, align 8
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %37, i8* align 8 %41, i64 288, i1 false)
  %42 = or i64 %34, 1
  %43 = getelementptr inbounds %struct.VkPhysicalDeviceGroupProperties, %struct.VkPhysicalDeviceGroupProperties* %2, i64 %42
  %44 = bitcast %struct.VkPhysicalDeviceGroupProperties* %43 to i8*
  %45 = load %struct.VkPhysicalDeviceGroupProperties**, %struct.VkPhysicalDeviceGroupProperties*** %27, align 8
  %46 = getelementptr inbounds %struct.VkPhysicalDeviceGroupProperties*, %struct.VkPhysicalDeviceGroupProperties** %45, i64 %42
  %47 = bitcast %struct.VkPhysicalDeviceGroupProperties** %46 to i8**
  %48 = load i8*, i8** %47, align 8
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %44, i8* align 8 %48, i64 288, i1 false)
  %49 = add nuw nsw i64 %34, 2
  %50 = add i64 %35, -2
  %51 = icmp eq i64 %50, 0
  br i1 %51, label %52, label %33

52:                                               ; preds = %33, %26
  %53 = phi i64 [ 0, %26 ], [ %49, %33 ]
  %54 = icmp eq i64 %29, 0
  br i1 %54, label %62, label %55

55:                                               ; preds = %52
  %56 = getelementptr inbounds %struct.VkPhysicalDeviceGroupProperties, %struct.VkPhysicalDeviceGroupProperties* %2, i64 %53
  %57 = bitcast %struct.VkPhysicalDeviceGroupProperties* %56 to i8*
  %58 = load %struct.VkPhysicalDeviceGroupProperties**, %struct.VkPhysicalDeviceGroupProperties*** %27, align 8
  %59 = getelementptr inbounds %struct.VkPhysicalDeviceGroupProperties*, %struct.VkPhysicalDeviceGroupProperties** %58, i64 %53
  %60 = bitcast %struct.VkPhysicalDeviceGroupProperties** %59 to i8**
  %61 = load i8*, i8** %60, align 8
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %57, i8* align 8 %61, i64 288, i1 false)
  br label %62

62:                                               ; preds = %55, %52, %22, %13
  %63 = phi i32 [ 0, %13 ], [ %23, %22 ], [ %23, %52 ], [ %23, %55 ]
  %64 = phi i32 [ %15, %13 ], [ 0, %22 ], [ %24, %52 ], [ %24, %55 ]
  store i32 %64, i32* %1, align 4
  br label %65

65:                                               ; preds = %10, %3, %62, %9
  %66 = phi i32 [ -3, %9 ], [ %63, %62 ], [ -3, %3 ], [ %11, %10 ]
  %67 = tail call i32 @pthread_mutex_unlock(%union.pthread_mutex_t* nonnull @loader_lock) #7
  ret i32 %66
}

; Function Attrs: nounwind ssp uwtable
define void @vkGetPhysicalDeviceFeatures2(%struct.VkPhysicalDevice_T* nocapture readonly, %struct.VkPhysicalDeviceFeatures2*) #0 {
  %3 = bitcast %struct.VkPhysicalDevice_T* %0 to %struct.loader_physical_device_tramp*
  %4 = getelementptr inbounds %struct.loader_physical_device_tramp, %struct.loader_physical_device_tramp* %3, i64 0, i32 2
  %5 = load %struct.VkPhysicalDevice_T*, %struct.VkPhysicalDevice_T** %4, align 8
  %6 = bitcast %struct.VkPhysicalDevice_T* %0 to %struct.VkLayerInstanceDispatchTable_**
  %7 = load %struct.VkLayerInstanceDispatchTable_*, %struct.VkLayerInstanceDispatchTable_** %6, align 8
  %8 = getelementptr inbounds %struct.loader_physical_device_tramp, %struct.loader_physical_device_tramp* %3, i64 0, i32 1
  %9 = load %struct.loader_instance*, %struct.loader_instance** %8, align 8
  %10 = icmp eq %struct.loader_instance* %9, null
  br i1 %10, label %20, label %11

11:                                               ; preds = %2
  %12 = getelementptr inbounds %struct.loader_instance, %struct.loader_instance* %9, i64 0, i32 25
  %13 = bitcast %union.loader_instance_extension_enables* %12 to i16*
  %14 = load i16, i16* %13, align 8
  %15 = and i16 %14, 1
  %16 = icmp eq i16 %15, 0
  br i1 %16, label %20, label %17

17:                                               ; preds = %11
  %18 = getelementptr inbounds %struct.VkLayerInstanceDispatchTable_, %struct.VkLayerInstanceDispatchTable_* %7, i64 0, i32 46
  %19 = load void (%struct.VkPhysicalDevice_T*, %struct.VkPhysicalDeviceFeatures2*)*, void (%struct.VkPhysicalDevice_T*, %struct.VkPhysicalDeviceFeatures2*)** %18, align 8
  tail call void %19(%struct.VkPhysicalDevice_T* %5, %struct.VkPhysicalDeviceFeatures2* %1) #7
  br label %23

20:                                               ; preds = %11, %2
  %21 = getelementptr inbounds %struct.VkLayerInstanceDispatchTable_, %struct.VkLayerInstanceDispatchTable_* %7, i64 0, i32 19
  %22 = load void (%struct.VkPhysicalDevice_T*, %struct.VkPhysicalDeviceFeatures2*)*, void (%struct.VkPhysicalDevice_T*, %struct.VkPhysicalDeviceFeatures2*)** %21, align 8
  tail call void %22(%struct.VkPhysicalDevice_T* %5, %struct.VkPhysicalDeviceFeatures2* %1) #7
  br label %23

23:                                               ; preds = %20, %17
  ret void
}

; Function Attrs: nounwind ssp uwtable
define void @vkGetPhysicalDeviceProperties2(%struct.VkPhysicalDevice_T* nocapture readonly, %struct.VkPhysicalDeviceProperties2*) #0 {
  %3 = bitcast %struct.VkPhysicalDevice_T* %0 to %struct.loader_physical_device_tramp*
  %4 = getelementptr inbounds %struct.loader_physical_device_tramp, %struct.loader_physical_device_tramp* %3, i64 0, i32 2
  %5 = load %struct.VkPhysicalDevice_T*, %struct.VkPhysicalDevice_T** %4, align 8
  %6 = bitcast %struct.VkPhysicalDevice_T* %0 to %struct.VkLayerInstanceDispatchTable_**
  %7 = load %struct.VkLayerInstanceDispatchTable_*, %struct.VkLayerInstanceDispatchTable_** %6, align 8
  %8 = getelementptr inbounds %struct.loader_physical_device_tramp, %struct.loader_physical_device_tramp* %3, i64 0, i32 1
  %9 = load %struct.loader_instance*, %struct.loader_instance** %8, align 8
  %10 = icmp eq %struct.loader_instance* %9, null
  br i1 %10, label %20, label %11

11:                                               ; preds = %2
  %12 = getelementptr inbounds %struct.loader_instance, %struct.loader_instance* %9, i64 0, i32 25
  %13 = bitcast %union.loader_instance_extension_enables* %12 to i16*
  %14 = load i16, i16* %13, align 8
  %15 = and i16 %14, 1
  %16 = icmp eq i16 %15, 0
  br i1 %16, label %20, label %17

17:                                               ; preds = %11
  %18 = getelementptr inbounds %struct.VkLayerInstanceDispatchTable_, %struct.VkLayerInstanceDispatchTable_* %7, i64 0, i32 47
  %19 = load void (%struct.VkPhysicalDevice_T*, %struct.VkPhysicalDeviceProperties2*)*, void (%struct.VkPhysicalDevice_T*, %struct.VkPhysicalDeviceProperties2*)** %18, align 8
  tail call void %19(%struct.VkPhysicalDevice_T* %5, %struct.VkPhysicalDeviceProperties2* %1) #7
  br label %23

20:                                               ; preds = %11, %2
  %21 = getelementptr inbounds %struct.VkLayerInstanceDispatchTable_, %struct.VkLayerInstanceDispatchTable_* %7, i64 0, i32 20
  %22 = load void (%struct.VkPhysicalDevice_T*, %struct.VkPhysicalDeviceProperties2*)*, void (%struct.VkPhysicalDevice_T*, %struct.VkPhysicalDeviceProperties2*)** %21, align 8
  tail call void %22(%struct.VkPhysicalDevice_T* %5, %struct.VkPhysicalDeviceProperties2* %1) #7
  br label %23

23:                                               ; preds = %20, %17
  ret void
}

; Function Attrs: nounwind ssp uwtable
define void @vkGetPhysicalDeviceFormatProperties2(%struct.VkPhysicalDevice_T* nocapture readonly, i32, %struct.VkFormatProperties2*) #0 {
  %4 = bitcast %struct.VkPhysicalDevice_T* %0 to %struct.loader_physical_device_tramp*
  %5 = getelementptr inbounds %struct.loader_physical_device_tramp, %struct.loader_physical_device_tramp* %4, i64 0, i32 2
  %6 = load %struct.VkPhysicalDevice_T*, %struct.VkPhysicalDevice_T** %5, align 8
  %7 = bitcast %struct.VkPhysicalDevice_T* %0 to %struct.VkLayerInstanceDispatchTable_**
  %8 = load %struct.VkLayerInstanceDispatchTable_*, %struct.VkLayerInstanceDispatchTable_** %7, align 8
  %9 = getelementptr inbounds %struct.loader_physical_device_tramp, %struct.loader_physical_device_tramp* %4, i64 0, i32 1
  %10 = load %struct.loader_instance*, %struct.loader_instance** %9, align 8
  %11 = icmp eq %struct.loader_instance* %10, null
  br i1 %11, label %21, label %12

12:                                               ; preds = %3
  %13 = getelementptr inbounds %struct.loader_instance, %struct.loader_instance* %10, i64 0, i32 25
  %14 = bitcast %union.loader_instance_extension_enables* %13 to i16*
  %15 = load i16, i16* %14, align 8
  %16 = and i16 %15, 1
  %17 = icmp eq i16 %16, 0
  br i1 %17, label %21, label %18

18:                                               ; preds = %12
  %19 = getelementptr inbounds %struct.VkLayerInstanceDispatchTable_, %struct.VkLayerInstanceDispatchTable_* %8, i64 0, i32 48
  %20 = load void (%struct.VkPhysicalDevice_T*, i32, %struct.VkFormatProperties2*)*, void (%struct.VkPhysicalDevice_T*, i32, %struct.VkFormatProperties2*)** %19, align 8
  tail call void %20(%struct.VkPhysicalDevice_T* %6, i32 %1, %struct.VkFormatProperties2* %2) #7
  br label %24

21:                                               ; preds = %12, %3
  %22 = getelementptr inbounds %struct.VkLayerInstanceDispatchTable_, %struct.VkLayerInstanceDispatchTable_* %8, i64 0, i32 21
  %23 = load void (%struct.VkPhysicalDevice_T*, i32, %struct.VkFormatProperties2*)*, void (%struct.VkPhysicalDevice_T*, i32, %struct.VkFormatProperties2*)** %22, align 8
  tail call void %23(%struct.VkPhysicalDevice_T* %6, i32 %1, %struct.VkFormatProperties2* %2) #7
  br label %24

24:                                               ; preds = %21, %18
  ret void
}

; Function Attrs: nounwind ssp uwtable
define i32 @vkGetPhysicalDeviceImageFormatProperties2(%struct.VkPhysicalDevice_T* nocapture readonly, %struct.VkPhysicalDeviceImageFormatInfo2*, %struct.VkImageFormatProperties2*) #0 {
  %4 = bitcast %struct.VkPhysicalDevice_T* %0 to %struct.loader_physical_device_tramp*
  %5 = getelementptr inbounds %struct.loader_physical_device_tramp, %struct.loader_physical_device_tramp* %4, i64 0, i32 2
  %6 = load %struct.VkPhysicalDevice_T*, %struct.VkPhysicalDevice_T** %5, align 8
  %7 = bitcast %struct.VkPhysicalDevice_T* %0 to %struct.VkLayerInstanceDispatchTable_**
  %8 = load %struct.VkLayerInstanceDispatchTable_*, %struct.VkLayerInstanceDispatchTable_** %7, align 8
  %9 = getelementptr inbounds %struct.loader_physical_device_tramp, %struct.loader_physical_device_tramp* %4, i64 0, i32 1
  %10 = load %struct.loader_instance*, %struct.loader_instance** %9, align 8
  %11 = icmp eq %struct.loader_instance* %10, null
  br i1 %11, label %22, label %12

12:                                               ; preds = %3
  %13 = getelementptr inbounds %struct.loader_instance, %struct.loader_instance* %10, i64 0, i32 25
  %14 = bitcast %union.loader_instance_extension_enables* %13 to i16*
  %15 = load i16, i16* %14, align 8
  %16 = and i16 %15, 1
  %17 = icmp eq i16 %16, 0
  br i1 %17, label %22, label %18

18:                                               ; preds = %12
  %19 = getelementptr inbounds %struct.VkLayerInstanceDispatchTable_, %struct.VkLayerInstanceDispatchTable_* %8, i64 0, i32 49
  %20 = load i32 (%struct.VkPhysicalDevice_T*, %struct.VkPhysicalDeviceImageFormatInfo2*, %struct.VkImageFormatProperties2*)*, i32 (%struct.VkPhysicalDevice_T*, %struct.VkPhysicalDeviceImageFormatInfo2*, %struct.VkImageFormatProperties2*)** %19, align 8
  %21 = tail call i32 %20(%struct.VkPhysicalDevice_T* %6, %struct.VkPhysicalDeviceImageFormatInfo2* %1, %struct.VkImageFormatProperties2* %2) #7
  br label %26

22:                                               ; preds = %12, %3
  %23 = getelementptr inbounds %struct.VkLayerInstanceDispatchTable_, %struct.VkLayerInstanceDispatchTable_* %8, i64 0, i32 22
  %24 = load i32 (%struct.VkPhysicalDevice_T*, %struct.VkPhysicalDeviceImageFormatInfo2*, %struct.VkImageFormatProperties2*)*, i32 (%struct.VkPhysicalDevice_T*, %struct.VkPhysicalDeviceImageFormatInfo2*, %struct.VkImageFormatProperties2*)** %23, align 8
  %25 = tail call i32 %24(%struct.VkPhysicalDevice_T* %6, %struct.VkPhysicalDeviceImageFormatInfo2* %1, %struct.VkImageFormatProperties2* %2) #7
  br label %26

26:                                               ; preds = %22, %18
  %27 = phi i32 [ %21, %18 ], [ %25, %22 ]
  ret i32 %27
}

; Function Attrs: nounwind ssp uwtable
define void @vkGetPhysicalDeviceQueueFamilyProperties2(%struct.VkPhysicalDevice_T* nocapture readonly, i32*, %struct.VkQueueFamilyProperties2*) #0 {
  %4 = bitcast %struct.VkPhysicalDevice_T* %0 to %struct.loader_physical_device_tramp*
  %5 = getelementptr inbounds %struct.loader_physical_device_tramp, %struct.loader_physical_device_tramp* %4, i64 0, i32 2
  %6 = load %struct.VkPhysicalDevice_T*, %struct.VkPhysicalDevice_T** %5, align 8
  %7 = bitcast %struct.VkPhysicalDevice_T* %0 to %struct.VkLayerInstanceDispatchTable_**
  %8 = load %struct.VkLayerInstanceDispatchTable_*, %struct.VkLayerInstanceDispatchTable_** %7, align 8
  %9 = getelementptr inbounds %struct.loader_physical_device_tramp, %struct.loader_physical_device_tramp* %4, i64 0, i32 1
  %10 = load %struct.loader_instance*, %struct.loader_instance** %9, align 8
  %11 = icmp eq %struct.loader_instance* %10, null
  br i1 %11, label %21, label %12

12:                                               ; preds = %3
  %13 = getelementptr inbounds %struct.loader_instance, %struct.loader_instance* %10, i64 0, i32 25
  %14 = bitcast %union.loader_instance_extension_enables* %13 to i16*
  %15 = load i16, i16* %14, align 8
  %16 = and i16 %15, 1
  %17 = icmp eq i16 %16, 0
  br i1 %17, label %21, label %18

18:                                               ; preds = %12
  %19 = getelementptr inbounds %struct.VkLayerInstanceDispatchTable_, %struct.VkLayerInstanceDispatchTable_* %8, i64 0, i32 50
  %20 = load void (%struct.VkPhysicalDevice_T*, i32*, %struct.VkQueueFamilyProperties2*)*, void (%struct.VkPhysicalDevice_T*, i32*, %struct.VkQueueFamilyProperties2*)** %19, align 8
  tail call void %20(%struct.VkPhysicalDevice_T* %6, i32* %1, %struct.VkQueueFamilyProperties2* %2) #7
  br label %24

21:                                               ; preds = %12, %3
  %22 = getelementptr inbounds %struct.VkLayerInstanceDispatchTable_, %struct.VkLayerInstanceDispatchTable_* %8, i64 0, i32 23
  %23 = load void (%struct.VkPhysicalDevice_T*, i32*, %struct.VkQueueFamilyProperties2*)*, void (%struct.VkPhysicalDevice_T*, i32*, %struct.VkQueueFamilyProperties2*)** %22, align 8
  tail call void %23(%struct.VkPhysicalDevice_T* %6, i32* %1, %struct.VkQueueFamilyProperties2* %2) #7
  br label %24

24:                                               ; preds = %21, %18
  ret void
}

; Function Attrs: nounwind ssp uwtable
define void @vkGetPhysicalDeviceMemoryProperties2(%struct.VkPhysicalDevice_T* nocapture readonly, %struct.VkPhysicalDeviceMemoryProperties2*) #0 {
  %3 = bitcast %struct.VkPhysicalDevice_T* %0 to %struct.loader_physical_device_tramp*
  %4 = getelementptr inbounds %struct.loader_physical_device_tramp, %struct.loader_physical_device_tramp* %3, i64 0, i32 2
  %5 = load %struct.VkPhysicalDevice_T*, %struct.VkPhysicalDevice_T** %4, align 8
  %6 = bitcast %struct.VkPhysicalDevice_T* %0 to %struct.VkLayerInstanceDispatchTable_**
  %7 = load %struct.VkLayerInstanceDispatchTable_*, %struct.VkLayerInstanceDispatchTable_** %6, align 8
  %8 = getelementptr inbounds %struct.loader_physical_device_tramp, %struct.loader_physical_device_tramp* %3, i64 0, i32 1
  %9 = load %struct.loader_instance*, %struct.loader_instance** %8, align 8
  %10 = icmp eq %struct.loader_instance* %9, null
  br i1 %10, label %20, label %11

11:                                               ; preds = %2
  %12 = getelementptr inbounds %struct.loader_instance, %struct.loader_instance* %9, i64 0, i32 25
  %13 = bitcast %union.loader_instance_extension_enables* %12 to i16*
  %14 = load i16, i16* %13, align 8
  %15 = and i16 %14, 1
  %16 = icmp eq i16 %15, 0
  br i1 %16, label %20, label %17

17:                                               ; preds = %11
  %18 = getelementptr inbounds %struct.VkLayerInstanceDispatchTable_, %struct.VkLayerInstanceDispatchTable_* %7, i64 0, i32 51
  %19 = load void (%struct.VkPhysicalDevice_T*, %struct.VkPhysicalDeviceMemoryProperties2*)*, void (%struct.VkPhysicalDevice_T*, %struct.VkPhysicalDeviceMemoryProperties2*)** %18, align 8
  tail call void %19(%struct.VkPhysicalDevice_T* %5, %struct.VkPhysicalDeviceMemoryProperties2* %1) #7
  br label %23

20:                                               ; preds = %11, %2
  %21 = getelementptr inbounds %struct.VkLayerInstanceDispatchTable_, %struct.VkLayerInstanceDispatchTable_* %7, i64 0, i32 24
  %22 = load void (%struct.VkPhysicalDevice_T*, %struct.VkPhysicalDeviceMemoryProperties2*)*, void (%struct.VkPhysicalDevice_T*, %struct.VkPhysicalDeviceMemoryProperties2*)** %21, align 8
  tail call void %22(%struct.VkPhysicalDevice_T* %5, %struct.VkPhysicalDeviceMemoryProperties2* %1) #7
  br label %23

23:                                               ; preds = %20, %17
  ret void
}

; Function Attrs: nounwind ssp uwtable
define void @vkGetPhysicalDeviceSparseImageFormatProperties2(%struct.VkPhysicalDevice_T* nocapture readonly, %struct.VkPhysicalDeviceSparseImageFormatInfo2*, i32*, %struct.VkSparseImageFormatProperties2*) #0 {
  %5 = bitcast %struct.VkPhysicalDevice_T* %0 to %struct.loader_physical_device_tramp*
  %6 = getelementptr inbounds %struct.loader_physical_device_tramp, %struct.loader_physical_device_tramp* %5, i64 0, i32 2
  %7 = load %struct.VkPhysicalDevice_T*, %struct.VkPhysicalDevice_T** %6, align 8
  %8 = bitcast %struct.VkPhysicalDevice_T* %0 to %struct.VkLayerInstanceDispatchTable_**
  %9 = load %struct.VkLayerInstanceDispatchTable_*, %struct.VkLayerInstanceDispatchTable_** %8, align 8
  %10 = getelementptr inbounds %struct.loader_physical_device_tramp, %struct.loader_physical_device_tramp* %5, i64 0, i32 1
  %11 = load %struct.loader_instance*, %struct.loader_instance** %10, align 8
  %12 = icmp eq %struct.loader_instance* %11, null
  br i1 %12, label %22, label %13

13:                                               ; preds = %4
  %14 = getelementptr inbounds %struct.loader_instance, %struct.loader_instance* %11, i64 0, i32 25
  %15 = bitcast %union.loader_instance_extension_enables* %14 to i16*
  %16 = load i16, i16* %15, align 8
  %17 = and i16 %16, 1
  %18 = icmp eq i16 %17, 0
  br i1 %18, label %22, label %19

19:                                               ; preds = %13
  %20 = getelementptr inbounds %struct.VkLayerInstanceDispatchTable_, %struct.VkLayerInstanceDispatchTable_* %9, i64 0, i32 52
  %21 = load void (%struct.VkPhysicalDevice_T*, %struct.VkPhysicalDeviceSparseImageFormatInfo2*, i32*, %struct.VkSparseImageFormatProperties2*)*, void (%struct.VkPhysicalDevice_T*, %struct.VkPhysicalDeviceSparseImageFormatInfo2*, i32*, %struct.VkSparseImageFormatProperties2*)** %20, align 8
  tail call void %21(%struct.VkPhysicalDevice_T* %7, %struct.VkPhysicalDeviceSparseImageFormatInfo2* %1, i32* %2, %struct.VkSparseImageFormatProperties2* %3) #7
  br label %25

22:                                               ; preds = %13, %4
  %23 = getelementptr inbounds %struct.VkLayerInstanceDispatchTable_, %struct.VkLayerInstanceDispatchTable_* %9, i64 0, i32 25
  %24 = load void (%struct.VkPhysicalDevice_T*, %struct.VkPhysicalDeviceSparseImageFormatInfo2*, i32*, %struct.VkSparseImageFormatProperties2*)*, void (%struct.VkPhysicalDevice_T*, %struct.VkPhysicalDeviceSparseImageFormatInfo2*, i32*, %struct.VkSparseImageFormatProperties2*)** %23, align 8
  tail call void %24(%struct.VkPhysicalDevice_T* %7, %struct.VkPhysicalDeviceSparseImageFormatInfo2* %1, i32* %2, %struct.VkSparseImageFormatProperties2* %3) #7
  br label %25

25:                                               ; preds = %22, %19
  ret void
}

; Function Attrs: nounwind ssp uwtable
define void @vkGetPhysicalDeviceExternalBufferProperties(%struct.VkPhysicalDevice_T* nocapture readonly, %struct.VkPhysicalDeviceExternalBufferInfo*, %struct.VkExternalBufferProperties*) #0 {
  %4 = bitcast %struct.VkPhysicalDevice_T* %0 to %struct.loader_physical_device_tramp*
  %5 = getelementptr inbounds %struct.loader_physical_device_tramp, %struct.loader_physical_device_tramp* %4, i64 0, i32 2
  %6 = load %struct.VkPhysicalDevice_T*, %struct.VkPhysicalDevice_T** %5, align 8
  %7 = bitcast %struct.VkPhysicalDevice_T* %0 to %struct.VkLayerInstanceDispatchTable_**
  %8 = load %struct.VkLayerInstanceDispatchTable_*, %struct.VkLayerInstanceDispatchTable_** %7, align 8
  %9 = getelementptr inbounds %struct.loader_physical_device_tramp, %struct.loader_physical_device_tramp* %4, i64 0, i32 1
  %10 = load %struct.loader_instance*, %struct.loader_instance** %9, align 8
  %11 = icmp eq %struct.loader_instance* %10, null
  br i1 %11, label %21, label %12

12:                                               ; preds = %3
  %13 = getelementptr inbounds %struct.loader_instance, %struct.loader_instance* %10, i64 0, i32 25
  %14 = bitcast %union.loader_instance_extension_enables* %13 to i16*
  %15 = load i16, i16* %14, align 8
  %16 = and i16 %15, 4
  %17 = icmp eq i16 %16, 0
  br i1 %17, label %21, label %18

18:                                               ; preds = %12
  %19 = getelementptr inbounds %struct.VkLayerInstanceDispatchTable_, %struct.VkLayerInstanceDispatchTable_* %8, i64 0, i32 54
  %20 = load void (%struct.VkPhysicalDevice_T*, %struct.VkPhysicalDeviceExternalBufferInfo*, %struct.VkExternalBufferProperties*)*, void (%struct.VkPhysicalDevice_T*, %struct.VkPhysicalDeviceExternalBufferInfo*, %struct.VkExternalBufferProperties*)** %19, align 8
  tail call void %20(%struct.VkPhysicalDevice_T* %6, %struct.VkPhysicalDeviceExternalBufferInfo* %1, %struct.VkExternalBufferProperties* %2) #7
  br label %24

21:                                               ; preds = %12, %3
  %22 = getelementptr inbounds %struct.VkLayerInstanceDispatchTable_, %struct.VkLayerInstanceDispatchTable_* %8, i64 0, i32 26
  %23 = load void (%struct.VkPhysicalDevice_T*, %struct.VkPhysicalDeviceExternalBufferInfo*, %struct.VkExternalBufferProperties*)*, void (%struct.VkPhysicalDevice_T*, %struct.VkPhysicalDeviceExternalBufferInfo*, %struct.VkExternalBufferProperties*)** %22, align 8
  tail call void %23(%struct.VkPhysicalDevice_T* %6, %struct.VkPhysicalDeviceExternalBufferInfo* %1, %struct.VkExternalBufferProperties* %2) #7
  br label %24

24:                                               ; preds = %21, %18
  ret void
}

; Function Attrs: nounwind ssp uwtable
define void @vkGetPhysicalDeviceExternalSemaphoreProperties(%struct.VkPhysicalDevice_T* nocapture readonly, %struct.VkPhysicalDeviceExternalSemaphoreInfo*, %struct.VkExternalSemaphoreProperties*) #0 {
  %4 = bitcast %struct.VkPhysicalDevice_T* %0 to %struct.loader_physical_device_tramp*
  %5 = getelementptr inbounds %struct.loader_physical_device_tramp, %struct.loader_physical_device_tramp* %4, i64 0, i32 2
  %6 = load %struct.VkPhysicalDevice_T*, %struct.VkPhysicalDevice_T** %5, align 8
  %7 = bitcast %struct.VkPhysicalDevice_T* %0 to %struct.VkLayerInstanceDispatchTable_**
  %8 = load %struct.VkLayerInstanceDispatchTable_*, %struct.VkLayerInstanceDispatchTable_** %7, align 8
  %9 = getelementptr inbounds %struct.loader_physical_device_tramp, %struct.loader_physical_device_tramp* %4, i64 0, i32 1
  %10 = load %struct.loader_instance*, %struct.loader_instance** %9, align 8
  %11 = icmp eq %struct.loader_instance* %10, null
  br i1 %11, label %21, label %12

12:                                               ; preds = %3
  %13 = getelementptr inbounds %struct.loader_instance, %struct.loader_instance* %10, i64 0, i32 25
  %14 = bitcast %union.loader_instance_extension_enables* %13 to i16*
  %15 = load i16, i16* %14, align 8
  %16 = and i16 %15, 8
  %17 = icmp eq i16 %16, 0
  br i1 %17, label %21, label %18

18:                                               ; preds = %12
  %19 = getelementptr inbounds %struct.VkLayerInstanceDispatchTable_, %struct.VkLayerInstanceDispatchTable_* %8, i64 0, i32 55
  %20 = load void (%struct.VkPhysicalDevice_T*, %struct.VkPhysicalDeviceExternalSemaphoreInfo*, %struct.VkExternalSemaphoreProperties*)*, void (%struct.VkPhysicalDevice_T*, %struct.VkPhysicalDeviceExternalSemaphoreInfo*, %struct.VkExternalSemaphoreProperties*)** %19, align 8
  tail call void %20(%struct.VkPhysicalDevice_T* %6, %struct.VkPhysicalDeviceExternalSemaphoreInfo* %1, %struct.VkExternalSemaphoreProperties* %2) #7
  br label %24

21:                                               ; preds = %12, %3
  %22 = getelementptr inbounds %struct.VkLayerInstanceDispatchTable_, %struct.VkLayerInstanceDispatchTable_* %8, i64 0, i32 28
  %23 = load void (%struct.VkPhysicalDevice_T*, %struct.VkPhysicalDeviceExternalSemaphoreInfo*, %struct.VkExternalSemaphoreProperties*)*, void (%struct.VkPhysicalDevice_T*, %struct.VkPhysicalDeviceExternalSemaphoreInfo*, %struct.VkExternalSemaphoreProperties*)** %22, align 8
  tail call void %23(%struct.VkPhysicalDevice_T* %6, %struct.VkPhysicalDeviceExternalSemaphoreInfo* %1, %struct.VkExternalSemaphoreProperties* %2) #7
  br label %24

24:                                               ; preds = %21, %18
  ret void
}

; Function Attrs: nounwind ssp uwtable
define void @vkGetPhysicalDeviceExternalFenceProperties(%struct.VkPhysicalDevice_T* nocapture readonly, %struct.VkPhysicalDeviceExternalFenceInfo*, %struct.VkExternalFenceProperties*) #0 {
  %4 = bitcast %struct.VkPhysicalDevice_T* %0 to %struct.loader_physical_device_tramp*
  %5 = getelementptr inbounds %struct.loader_physical_device_tramp, %struct.loader_physical_device_tramp* %4, i64 0, i32 2
  %6 = load %struct.VkPhysicalDevice_T*, %struct.VkPhysicalDevice_T** %5, align 8
  %7 = bitcast %struct.VkPhysicalDevice_T* %0 to %struct.VkLayerInstanceDispatchTable_**
  %8 = load %struct.VkLayerInstanceDispatchTable_*, %struct.VkLayerInstanceDispatchTable_** %7, align 8
  %9 = getelementptr inbounds %struct.loader_physical_device_tramp, %struct.loader_physical_device_tramp* %4, i64 0, i32 1
  %10 = load %struct.loader_instance*, %struct.loader_instance** %9, align 8
  %11 = icmp eq %struct.loader_instance* %10, null
  br i1 %11, label %21, label %12

12:                                               ; preds = %3
  %13 = getelementptr inbounds %struct.loader_instance, %struct.loader_instance* %10, i64 0, i32 25
  %14 = bitcast %union.loader_instance_extension_enables* %13 to i16*
  %15 = load i16, i16* %14, align 8
  %16 = and i16 %15, 16
  %17 = icmp eq i16 %16, 0
  br i1 %17, label %21, label %18

18:                                               ; preds = %12
  %19 = getelementptr inbounds %struct.VkLayerInstanceDispatchTable_, %struct.VkLayerInstanceDispatchTable_* %8, i64 0, i32 56
  %20 = load void (%struct.VkPhysicalDevice_T*, %struct.VkPhysicalDeviceExternalFenceInfo*, %struct.VkExternalFenceProperties*)*, void (%struct.VkPhysicalDevice_T*, %struct.VkPhysicalDeviceExternalFenceInfo*, %struct.VkExternalFenceProperties*)** %19, align 8
  tail call void %20(%struct.VkPhysicalDevice_T* %6, %struct.VkPhysicalDeviceExternalFenceInfo* %1, %struct.VkExternalFenceProperties* %2) #7
  br label %24

21:                                               ; preds = %12, %3
  %22 = getelementptr inbounds %struct.VkLayerInstanceDispatchTable_, %struct.VkLayerInstanceDispatchTable_* %8, i64 0, i32 27
  %23 = load void (%struct.VkPhysicalDevice_T*, %struct.VkPhysicalDeviceExternalFenceInfo*, %struct.VkExternalFenceProperties*)*, void (%struct.VkPhysicalDevice_T*, %struct.VkPhysicalDeviceExternalFenceInfo*, %struct.VkExternalFenceProperties*)** %22, align 8
  tail call void %23(%struct.VkPhysicalDevice_T* %6, %struct.VkPhysicalDeviceExternalFenceInfo* %1, %struct.VkExternalFenceProperties* %2) #7
  br label %24

24:                                               ; preds = %21, %18
  ret void
}

; Function Attrs: nounwind ssp uwtable
define i32 @vkBindBufferMemory2(%struct.VkDevice_T*, i32, %struct.VkBindBufferMemoryInfo*) #0 {
  %4 = bitcast %struct.VkDevice_T* %0 to %struct.VkLayerDispatchTable_**
  %5 = load %struct.VkLayerDispatchTable_*, %struct.VkLayerDispatchTable_** %4, align 8
  %6 = getelementptr inbounds %struct.VkLayerDispatchTable_, %struct.VkLayerDispatchTable_* %5, i64 0, i32 121
  %7 = load i32 (%struct.VkDevice_T*, i32, %struct.VkBindBufferMemoryInfo*)*, i32 (%struct.VkDevice_T*, i32, %struct.VkBindBufferMemoryInfo*)** %6, align 8
  %8 = tail call i32 %7(%struct.VkDevice_T* %0, i32 %1, %struct.VkBindBufferMemoryInfo* %2) #7
  ret i32 %8
}

; Function Attrs: nounwind ssp uwtable
define i32 @vkBindImageMemory2(%struct.VkDevice_T*, i32, %struct.VkBindImageMemoryInfo*) #0 {
  %4 = bitcast %struct.VkDevice_T* %0 to %struct.VkLayerDispatchTable_**
  %5 = load %struct.VkLayerDispatchTable_*, %struct.VkLayerDispatchTable_** %4, align 8
  %6 = getelementptr inbounds %struct.VkLayerDispatchTable_, %struct.VkLayerDispatchTable_* %5, i64 0, i32 122
  %7 = load i32 (%struct.VkDevice_T*, i32, %struct.VkBindImageMemoryInfo*)*, i32 (%struct.VkDevice_T*, i32, %struct.VkBindImageMemoryInfo*)** %6, align 8
  %8 = tail call i32 %7(%struct.VkDevice_T* %0, i32 %1, %struct.VkBindImageMemoryInfo* %2) #7
  ret i32 %8
}

; Function Attrs: nounwind ssp uwtable
define void @vkGetDeviceGroupPeerMemoryFeatures(%struct.VkDevice_T*, i32, i32, i32, i32*) #0 {
  %6 = bitcast %struct.VkDevice_T* %0 to %struct.VkLayerDispatchTable_**
  %7 = load %struct.VkLayerDispatchTable_*, %struct.VkLayerDispatchTable_** %6, align 8
  %8 = getelementptr inbounds %struct.VkLayerDispatchTable_, %struct.VkLayerDispatchTable_* %7, i64 0, i32 123
  %9 = load void (%struct.VkDevice_T*, i32, i32, i32, i32*)*, void (%struct.VkDevice_T*, i32, i32, i32, i32*)** %8, align 8
  tail call void %9(%struct.VkDevice_T* %0, i32 %1, i32 %2, i32 %3, i32* %4) #7
  ret void
}

; Function Attrs: nounwind ssp uwtable
define void @vkCmdSetDeviceMask(%struct.VkCommandBuffer_T*, i32) #0 {
  %3 = bitcast %struct.VkCommandBuffer_T* %0 to %struct.VkLayerDispatchTable_**
  %4 = load %struct.VkLayerDispatchTable_*, %struct.VkLayerDispatchTable_** %3, align 8
  %5 = getelementptr inbounds %struct.VkLayerDispatchTable_, %struct.VkLayerDispatchTable_* %4, i64 0, i32 124
  %6 = load void (%struct.VkCommandBuffer_T*, i32)*, void (%struct.VkCommandBuffer_T*, i32)** %5, align 8
  tail call void %6(%struct.VkCommandBuffer_T* %0, i32 %1) #7
  ret void
}

; Function Attrs: nounwind ssp uwtable
define void @vkCmdDispatchBase(%struct.VkCommandBuffer_T*, i32, i32, i32, i32, i32, i32) #0 {
  %8 = bitcast %struct.VkCommandBuffer_T* %0 to %struct.VkLayerDispatchTable_**
  %9 = load %struct.VkLayerDispatchTable_*, %struct.VkLayerDispatchTable_** %8, align 8
  %10 = getelementptr inbounds %struct.VkLayerDispatchTable_, %struct.VkLayerDispatchTable_* %9, i64 0, i32 125
  %11 = load void (%struct.VkCommandBuffer_T*, i32, i32, i32, i32, i32, i32)*, void (%struct.VkCommandBuffer_T*, i32, i32, i32, i32, i32, i32)** %10, align 8
  tail call void %11(%struct.VkCommandBuffer_T* %0, i32 %1, i32 %2, i32 %3, i32 %4, i32 %5, i32 %6) #7
  ret void
}

; Function Attrs: nounwind ssp uwtable
define void @vkGetImageMemoryRequirements2(%struct.VkDevice_T*, %struct.VkImageMemoryRequirementsInfo2*, %struct.VkMemoryRequirements2*) #0 {
  %4 = bitcast %struct.VkDevice_T* %0 to %struct.VkLayerDispatchTable_**
  %5 = load %struct.VkLayerDispatchTable_*, %struct.VkLayerDispatchTable_** %4, align 8
  %6 = getelementptr inbounds %struct.VkLayerDispatchTable_, %struct.VkLayerDispatchTable_* %5, i64 0, i32 126
  %7 = load void (%struct.VkDevice_T*, %struct.VkImageMemoryRequirementsInfo2*, %struct.VkMemoryRequirements2*)*, void (%struct.VkDevice_T*, %struct.VkImageMemoryRequirementsInfo2*, %struct.VkMemoryRequirements2*)** %6, align 8
  tail call void %7(%struct.VkDevice_T* %0, %struct.VkImageMemoryRequirementsInfo2* %1, %struct.VkMemoryRequirements2* %2) #7
  ret void
}

; Function Attrs: nounwind ssp uwtable
define void @vkGetBufferMemoryRequirements2(%struct.VkDevice_T*, %struct.VkBufferMemoryRequirementsInfo2*, %struct.VkMemoryRequirements2*) #0 {
  %4 = bitcast %struct.VkDevice_T* %0 to %struct.VkLayerDispatchTable_**
  %5 = load %struct.VkLayerDispatchTable_*, %struct.VkLayerDispatchTable_** %4, align 8
  %6 = getelementptr inbounds %struct.VkLayerDispatchTable_, %struct.VkLayerDispatchTable_* %5, i64 0, i32 127
  %7 = load void (%struct.VkDevice_T*, %struct.VkBufferMemoryRequirementsInfo2*, %struct.VkMemoryRequirements2*)*, void (%struct.VkDevice_T*, %struct.VkBufferMemoryRequirementsInfo2*, %struct.VkMemoryRequirements2*)** %6, align 8
  tail call void %7(%struct.VkDevice_T* %0, %struct.VkBufferMemoryRequirementsInfo2* %1, %struct.VkMemoryRequirements2* %2) #7
  ret void
}

; Function Attrs: nounwind ssp uwtable
define void @vkGetImageSparseMemoryRequirements2(%struct.VkDevice_T*, %struct.VkImageSparseMemoryRequirementsInfo2*, i32*, %struct.VkSparseImageMemoryRequirements2*) #0 {
  %5 = bitcast %struct.VkDevice_T* %0 to %struct.VkLayerDispatchTable_**
  %6 = load %struct.VkLayerDispatchTable_*, %struct.VkLayerDispatchTable_** %5, align 8
  %7 = getelementptr inbounds %struct.VkLayerDispatchTable_, %struct.VkLayerDispatchTable_* %6, i64 0, i32 128
  %8 = load void (%struct.VkDevice_T*, %struct.VkImageSparseMemoryRequirementsInfo2*, i32*, %struct.VkSparseImageMemoryRequirements2*)*, void (%struct.VkDevice_T*, %struct.VkImageSparseMemoryRequirementsInfo2*, i32*, %struct.VkSparseImageMemoryRequirements2*)** %7, align 8
  tail call void %8(%struct.VkDevice_T* %0, %struct.VkImageSparseMemoryRequirementsInfo2* %1, i32* %2, %struct.VkSparseImageMemoryRequirements2* %3) #7
  ret void
}

; Function Attrs: nounwind ssp uwtable
define void @vkTrimCommandPool(%struct.VkDevice_T*, %struct.VkCommandPool_T*, i32) #0 {
  %4 = bitcast %struct.VkDevice_T* %0 to %struct.VkLayerDispatchTable_**
  %5 = load %struct.VkLayerDispatchTable_*, %struct.VkLayerDispatchTable_** %4, align 8
  %6 = getelementptr inbounds %struct.VkLayerDispatchTable_, %struct.VkLayerDispatchTable_* %5, i64 0, i32 129
  %7 = load void (%struct.VkDevice_T*, %struct.VkCommandPool_T*, i32)*, void (%struct.VkDevice_T*, %struct.VkCommandPool_T*, i32)** %6, align 8
  tail call void %7(%struct.VkDevice_T* %0, %struct.VkCommandPool_T* %1, i32 %2) #7
  ret void
}

; Function Attrs: nounwind ssp uwtable
define void @vkGetDeviceQueue2(%struct.VkDevice_T*, %struct.VkDeviceQueueInfo2*, %struct.VkQueue_T**) #0 {
  %4 = bitcast %struct.VkDevice_T* %0 to %struct.VkLayerDispatchTable_**
  %5 = load %struct.VkLayerDispatchTable_*, %struct.VkLayerDispatchTable_** %4, align 8
  %6 = getelementptr inbounds %struct.VkLayerDispatchTable_, %struct.VkLayerDispatchTable_* %5, i64 0, i32 130
  %7 = load void (%struct.VkDevice_T*, %struct.VkDeviceQueueInfo2*, %struct.VkQueue_T**)*, void (%struct.VkDevice_T*, %struct.VkDeviceQueueInfo2*, %struct.VkQueue_T**)** %6, align 8
  tail call void %7(%struct.VkDevice_T* %0, %struct.VkDeviceQueueInfo2* %1, %struct.VkQueue_T** %2) #7
  %8 = icmp eq %struct.VkQueue_T** %2, null
  br i1 %8, label %14, label %9

9:                                                ; preds = %3
  %10 = load %struct.VkQueue_T*, %struct.VkQueue_T** %2, align 8
  %11 = icmp eq %struct.VkQueue_T* %10, null
  br i1 %11, label %14, label %12

12:                                               ; preds = %9
  %13 = bitcast %struct.VkQueue_T* %10 to %struct.VkLayerDispatchTable_**
  store %struct.VkLayerDispatchTable_* %5, %struct.VkLayerDispatchTable_** %13, align 8
  br label %14

14:                                               ; preds = %9, %3, %12
  ret void
}

; Function Attrs: nounwind ssp uwtable
define i32 @vkCreateSamplerYcbcrConversion(%struct.VkDevice_T*, %struct.VkSamplerYcbcrConversionCreateInfo*, %struct.VkAllocationCallbacks*, %struct.VkSamplerYcbcrConversion_T**) #0 {
  %5 = bitcast %struct.VkDevice_T* %0 to %struct.VkLayerDispatchTable_**
  %6 = load %struct.VkLayerDispatchTable_*, %struct.VkLayerDispatchTable_** %5, align 8
  %7 = getelementptr inbounds %struct.VkLayerDispatchTable_, %struct.VkLayerDispatchTable_* %6, i64 0, i32 131
  %8 = load i32 (%struct.VkDevice_T*, %struct.VkSamplerYcbcrConversionCreateInfo*, %struct.VkAllocationCallbacks*, %struct.VkSamplerYcbcrConversion_T**)*, i32 (%struct.VkDevice_T*, %struct.VkSamplerYcbcrConversionCreateInfo*, %struct.VkAllocationCallbacks*, %struct.VkSamplerYcbcrConversion_T**)** %7, align 8
  %9 = tail call i32 %8(%struct.VkDevice_T* %0, %struct.VkSamplerYcbcrConversionCreateInfo* %1, %struct.VkAllocationCallbacks* %2, %struct.VkSamplerYcbcrConversion_T** %3) #7
  ret i32 %9
}

; Function Attrs: nounwind ssp uwtable
define void @vkDestroySamplerYcbcrConversion(%struct.VkDevice_T*, %struct.VkSamplerYcbcrConversion_T*, %struct.VkAllocationCallbacks*) #0 {
  %4 = bitcast %struct.VkDevice_T* %0 to %struct.VkLayerDispatchTable_**
  %5 = load %struct.VkLayerDispatchTable_*, %struct.VkLayerDispatchTable_** %4, align 8
  %6 = getelementptr inbounds %struct.VkLayerDispatchTable_, %struct.VkLayerDispatchTable_* %5, i64 0, i32 132
  %7 = load void (%struct.VkDevice_T*, %struct.VkSamplerYcbcrConversion_T*, %struct.VkAllocationCallbacks*)*, void (%struct.VkDevice_T*, %struct.VkSamplerYcbcrConversion_T*, %struct.VkAllocationCallbacks*)** %6, align 8
  tail call void %7(%struct.VkDevice_T* %0, %struct.VkSamplerYcbcrConversion_T* %1, %struct.VkAllocationCallbacks* %2) #7
  ret void
}

; Function Attrs: nounwind ssp uwtable
define void @vkGetDescriptorSetLayoutSupport(%struct.VkDevice_T*, %struct.VkDescriptorSetLayoutCreateInfo*, %struct.VkDescriptorSetLayoutSupport*) #0 {
  %4 = bitcast %struct.VkDevice_T* %0 to %struct.VkLayerDispatchTable_**
  %5 = load %struct.VkLayerDispatchTable_*, %struct.VkLayerDispatchTable_** %4, align 8
  %6 = getelementptr inbounds %struct.VkLayerDispatchTable_, %struct.VkLayerDispatchTable_* %5, i64 0, i32 136
  %7 = load void (%struct.VkDevice_T*, %struct.VkDescriptorSetLayoutCreateInfo*, %struct.VkDescriptorSetLayoutSupport*)*, void (%struct.VkDevice_T*, %struct.VkDescriptorSetLayoutCreateInfo*, %struct.VkDescriptorSetLayoutSupport*)** %6, align 8
  tail call void %7(%struct.VkDevice_T* %0, %struct.VkDescriptorSetLayoutCreateInfo* %1, %struct.VkDescriptorSetLayoutSupport* %2) #7
  ret void
}

; Function Attrs: nounwind ssp uwtable
define i32 @vkCreateDescriptorUpdateTemplate(%struct.VkDevice_T*, %struct.VkDescriptorUpdateTemplateCreateInfo*, %struct.VkAllocationCallbacks*, %struct.VkDescriptorUpdateTemplate_T**) #0 {
  %5 = bitcast %struct.VkDevice_T* %0 to %struct.VkLayerDispatchTable_**
  %6 = load %struct.VkLayerDispatchTable_*, %struct.VkLayerDispatchTable_** %5, align 8
  %7 = getelementptr inbounds %struct.VkLayerDispatchTable_, %struct.VkLayerDispatchTable_* %6, i64 0, i32 133
  %8 = load i32 (%struct.VkDevice_T*, %struct.VkDescriptorUpdateTemplateCreateInfo*, %struct.VkAllocationCallbacks*, %struct.VkDescriptorUpdateTemplate_T**)*, i32 (%struct.VkDevice_T*, %struct.VkDescriptorUpdateTemplateCreateInfo*, %struct.VkAllocationCallbacks*, %struct.VkDescriptorUpdateTemplate_T**)** %7, align 8
  %9 = tail call i32 %8(%struct.VkDevice_T* %0, %struct.VkDescriptorUpdateTemplateCreateInfo* %1, %struct.VkAllocationCallbacks* %2, %struct.VkDescriptorUpdateTemplate_T** %3) #7
  ret i32 %9
}

; Function Attrs: nounwind ssp uwtable
define void @vkDestroyDescriptorUpdateTemplate(%struct.VkDevice_T*, %struct.VkDescriptorUpdateTemplate_T*, %struct.VkAllocationCallbacks*) #0 {
  %4 = bitcast %struct.VkDevice_T* %0 to %struct.VkLayerDispatchTable_**
  %5 = load %struct.VkLayerDispatchTable_*, %struct.VkLayerDispatchTable_** %4, align 8
  %6 = getelementptr inbounds %struct.VkLayerDispatchTable_, %struct.VkLayerDispatchTable_* %5, i64 0, i32 134
  %7 = load void (%struct.VkDevice_T*, %struct.VkDescriptorUpdateTemplate_T*, %struct.VkAllocationCallbacks*)*, void (%struct.VkDevice_T*, %struct.VkDescriptorUpdateTemplate_T*, %struct.VkAllocationCallbacks*)** %6, align 8
  tail call void %7(%struct.VkDevice_T* %0, %struct.VkDescriptorUpdateTemplate_T* %1, %struct.VkAllocationCallbacks* %2) #7
  ret void
}

; Function Attrs: nounwind ssp uwtable
define void @vkUpdateDescriptorSetWithTemplate(%struct.VkDevice_T*, %struct.VkDescriptorSet_T*, %struct.VkDescriptorUpdateTemplate_T*, i8*) #0 {
  %5 = bitcast %struct.VkDevice_T* %0 to %struct.VkLayerDispatchTable_**
  %6 = load %struct.VkLayerDispatchTable_*, %struct.VkLayerDispatchTable_** %5, align 8
  %7 = getelementptr inbounds %struct.VkLayerDispatchTable_, %struct.VkLayerDispatchTable_* %6, i64 0, i32 135
  %8 = load void (%struct.VkDevice_T*, %struct.VkDescriptorSet_T*, %struct.VkDescriptorUpdateTemplate_T*, i8*)*, void (%struct.VkDevice_T*, %struct.VkDescriptorSet_T*, %struct.VkDescriptorUpdateTemplate_T*, i8*)** %7, align 8
  tail call void %8(%struct.VkDevice_T* %0, %struct.VkDescriptorSet_T* %1, %struct.VkDescriptorUpdateTemplate_T* %2, i8* %3) #7
  ret void
}

; Function Attrs: nounwind ssp uwtable
define i32 @vkCreateRenderPass2(%struct.VkDevice_T*, %struct.VkRenderPassCreateInfo2*, %struct.VkAllocationCallbacks*, %struct.VkRenderPass_T**) #0 {
  %5 = bitcast %struct.VkDevice_T* %0 to %struct.VkLayerDispatchTable_**
  %6 = load %struct.VkLayerDispatchTable_*, %struct.VkLayerDispatchTable_** %5, align 8
  %7 = getelementptr inbounds %struct.VkLayerDispatchTable_, %struct.VkLayerDispatchTable_* %6, i64 0, i32 139
  %8 = load i32 (%struct.VkDevice_T*, %struct.VkRenderPassCreateInfo2*, %struct.VkAllocationCallbacks*, %struct.VkRenderPass_T**)*, i32 (%struct.VkDevice_T*, %struct.VkRenderPassCreateInfo2*, %struct.VkAllocationCallbacks*, %struct.VkRenderPass_T**)** %7, align 8
  %9 = tail call i32 %8(%struct.VkDevice_T* %0, %struct.VkRenderPassCreateInfo2* %1, %struct.VkAllocationCallbacks* %2, %struct.VkRenderPass_T** %3) #7
  ret i32 %9
}

; Function Attrs: nounwind ssp uwtable
define void @vkCmdBeginRenderPass2(%struct.VkCommandBuffer_T*, %struct.VkRenderPassBeginInfo*, %struct.VkSubpassBeginInfo*) #0 {
  %4 = bitcast %struct.VkCommandBuffer_T* %0 to %struct.VkLayerDispatchTable_**
  %5 = load %struct.VkLayerDispatchTable_*, %struct.VkLayerDispatchTable_** %4, align 8
  %6 = getelementptr inbounds %struct.VkLayerDispatchTable_, %struct.VkLayerDispatchTable_* %5, i64 0, i32 140
  %7 = load void (%struct.VkCommandBuffer_T*, %struct.VkRenderPassBeginInfo*, %struct.VkSubpassBeginInfo*)*, void (%struct.VkCommandBuffer_T*, %struct.VkRenderPassBeginInfo*, %struct.VkSubpassBeginInfo*)** %6, align 8
  tail call void %7(%struct.VkCommandBuffer_T* %0, %struct.VkRenderPassBeginInfo* %1, %struct.VkSubpassBeginInfo* %2) #7
  ret void
}

; Function Attrs: nounwind ssp uwtable
define void @vkCmdNextSubpass2(%struct.VkCommandBuffer_T*, %struct.VkSubpassBeginInfo*, %struct.VkSubpassEndInfo*) #0 {
  %4 = bitcast %struct.VkCommandBuffer_T* %0 to %struct.VkLayerDispatchTable_**
  %5 = load %struct.VkLayerDispatchTable_*, %struct.VkLayerDispatchTable_** %4, align 8
  %6 = getelementptr inbounds %struct.VkLayerDispatchTable_, %struct.VkLayerDispatchTable_* %5, i64 0, i32 141
  %7 = load void (%struct.VkCommandBuffer_T*, %struct.VkSubpassBeginInfo*, %struct.VkSubpassEndInfo*)*, void (%struct.VkCommandBuffer_T*, %struct.VkSubpassBeginInfo*, %struct.VkSubpassEndInfo*)** %6, align 8
  tail call void %7(%struct.VkCommandBuffer_T* %0, %struct.VkSubpassBeginInfo* %1, %struct.VkSubpassEndInfo* %2) #7
  ret void
}

; Function Attrs: nounwind ssp uwtable
define void @vkCmdEndRenderPass2(%struct.VkCommandBuffer_T*, %struct.VkSubpassEndInfo*) #0 {
  %3 = bitcast %struct.VkCommandBuffer_T* %0 to %struct.VkLayerDispatchTable_**
  %4 = load %struct.VkLayerDispatchTable_*, %struct.VkLayerDispatchTable_** %3, align 8
  %5 = getelementptr inbounds %struct.VkLayerDispatchTable_, %struct.VkLayerDispatchTable_* %4, i64 0, i32 142
  %6 = load void (%struct.VkCommandBuffer_T*, %struct.VkSubpassEndInfo*)*, void (%struct.VkCommandBuffer_T*, %struct.VkSubpassEndInfo*)** %5, align 8
  tail call void %6(%struct.VkCommandBuffer_T* %0, %struct.VkSubpassEndInfo* %1) #7
  ret void
}

; Function Attrs: nounwind ssp uwtable
define void @vkCmdDrawIndirectCount(%struct.VkCommandBuffer_T*, %struct.VkBuffer_T*, i64, %struct.VkBuffer_T*, i64, i32, i32) #0 {
  %8 = bitcast %struct.VkCommandBuffer_T* %0 to %struct.VkLayerDispatchTable_**
  %9 = load %struct.VkLayerDispatchTable_*, %struct.VkLayerDispatchTable_** %8, align 8
  %10 = getelementptr inbounds %struct.VkLayerDispatchTable_, %struct.VkLayerDispatchTable_* %9, i64 0, i32 137
  %11 = load void (%struct.VkCommandBuffer_T*, %struct.VkBuffer_T*, i64, %struct.VkBuffer_T*, i64, i32, i32)*, void (%struct.VkCommandBuffer_T*, %struct.VkBuffer_T*, i64, %struct.VkBuffer_T*, i64, i32, i32)** %10, align 8
  tail call void %11(%struct.VkCommandBuffer_T* %0, %struct.VkBuffer_T* %1, i64 %2, %struct.VkBuffer_T* %3, i64 %4, i32 %5, i32 %6) #7
  ret void
}

; Function Attrs: nounwind ssp uwtable
define void @vkCmdDrawIndexedIndirectCount(%struct.VkCommandBuffer_T*, %struct.VkBuffer_T*, i64, %struct.VkBuffer_T*, i64, i32, i32) #0 {
  %8 = bitcast %struct.VkCommandBuffer_T* %0 to %struct.VkLayerDispatchTable_**
  %9 = load %struct.VkLayerDispatchTable_*, %struct.VkLayerDispatchTable_** %8, align 8
  %10 = getelementptr inbounds %struct.VkLayerDispatchTable_, %struct.VkLayerDispatchTable_* %9, i64 0, i32 138
  %11 = load void (%struct.VkCommandBuffer_T*, %struct.VkBuffer_T*, i64, %struct.VkBuffer_T*, i64, i32, i32)*, void (%struct.VkCommandBuffer_T*, %struct.VkBuffer_T*, i64, %struct.VkBuffer_T*, i64, i32, i32)** %10, align 8
  tail call void %11(%struct.VkCommandBuffer_T* %0, %struct.VkBuffer_T* %1, i64 %2, %struct.VkBuffer_T* %3, i64 %4, i32 %5, i32 %6) #7
  ret void
}

; Function Attrs: nounwind ssp uwtable
define i32 @vkGetSemaphoreCounterValue(%struct.VkDevice_T*, %struct.VkSemaphore_T*, i64*) #0 {
  %4 = bitcast %struct.VkDevice_T* %0 to %struct.VkLayerDispatchTable_**
  %5 = load %struct.VkLayerDispatchTable_*, %struct.VkLayerDispatchTable_** %4, align 8
  %6 = getelementptr inbounds %struct.VkLayerDispatchTable_, %struct.VkLayerDispatchTable_* %5, i64 0, i32 144
  %7 = load i32 (%struct.VkDevice_T*, %struct.VkSemaphore_T*, i64*)*, i32 (%struct.VkDevice_T*, %struct.VkSemaphore_T*, i64*)** %6, align 8
  %8 = tail call i32 %7(%struct.VkDevice_T* %0, %struct.VkSemaphore_T* %1, i64* %2) #7
  ret i32 %8
}

; Function Attrs: nounwind ssp uwtable
define i32 @vkWaitSemaphores(%struct.VkDevice_T*, %struct.VkSemaphoreWaitInfo*, i64) #0 {
  %4 = bitcast %struct.VkDevice_T* %0 to %struct.VkLayerDispatchTable_**
  %5 = load %struct.VkLayerDispatchTable_*, %struct.VkLayerDispatchTable_** %4, align 8
  %6 = getelementptr inbounds %struct.VkLayerDispatchTable_, %struct.VkLayerDispatchTable_* %5, i64 0, i32 145
  %7 = load i32 (%struct.VkDevice_T*, %struct.VkSemaphoreWaitInfo*, i64)*, i32 (%struct.VkDevice_T*, %struct.VkSemaphoreWaitInfo*, i64)** %6, align 8
  %8 = tail call i32 %7(%struct.VkDevice_T* %0, %struct.VkSemaphoreWaitInfo* %1, i64 %2) #7
  ret i32 %8
}

; Function Attrs: nounwind ssp uwtable
define i32 @vkSignalSemaphore(%struct.VkDevice_T*, %struct.VkSemaphoreSignalInfo*) #0 {
  %3 = bitcast %struct.VkDevice_T* %0 to %struct.VkLayerDispatchTable_**
  %4 = load %struct.VkLayerDispatchTable_*, %struct.VkLayerDispatchTable_** %3, align 8
  %5 = getelementptr inbounds %struct.VkLayerDispatchTable_, %struct.VkLayerDispatchTable_* %4, i64 0, i32 146
  %6 = load i32 (%struct.VkDevice_T*, %struct.VkSemaphoreSignalInfo*)*, i32 (%struct.VkDevice_T*, %struct.VkSemaphoreSignalInfo*)** %5, align 8
  %7 = tail call i32 %6(%struct.VkDevice_T* %0, %struct.VkSemaphoreSignalInfo* %1) #7
  ret i32 %7
}

; Function Attrs: nounwind ssp uwtable
define i64 @vkGetBufferDeviceAddress(%struct.VkDevice_T*, %struct.VkBufferDeviceAddressInfo*) #0 {
  %3 = bitcast %struct.VkDevice_T* %0 to %struct.VkLayerDispatchTable_**
  %4 = load %struct.VkLayerDispatchTable_*, %struct.VkLayerDispatchTable_** %3, align 8
  %5 = getelementptr inbounds %struct.VkLayerDispatchTable_, %struct.VkLayerDispatchTable_* %4, i64 0, i32 147
  %6 = load i64 (%struct.VkDevice_T*, %struct.VkBufferDeviceAddressInfo*)*, i64 (%struct.VkDevice_T*, %struct.VkBufferDeviceAddressInfo*)** %5, align 8
  %7 = tail call i64 %6(%struct.VkDevice_T* %0, %struct.VkBufferDeviceAddressInfo* %1) #7
  ret i64 %7
}

; Function Attrs: nounwind ssp uwtable
define i64 @vkGetBufferOpaqueCaptureAddress(%struct.VkDevice_T*, %struct.VkBufferDeviceAddressInfo*) #0 {
  %3 = bitcast %struct.VkDevice_T* %0 to %struct.VkLayerDispatchTable_**
  %4 = load %struct.VkLayerDispatchTable_*, %struct.VkLayerDispatchTable_** %3, align 8
  %5 = getelementptr inbounds %struct.VkLayerDispatchTable_, %struct.VkLayerDispatchTable_* %4, i64 0, i32 148
  %6 = load i64 (%struct.VkDevice_T*, %struct.VkBufferDeviceAddressInfo*)*, i64 (%struct.VkDevice_T*, %struct.VkBufferDeviceAddressInfo*)** %5, align 8
  %7 = tail call i64 %6(%struct.VkDevice_T* %0, %struct.VkBufferDeviceAddressInfo* %1) #7
  ret i64 %7
}

; Function Attrs: nounwind ssp uwtable
define i64 @vkGetDeviceMemoryOpaqueCaptureAddress(%struct.VkDevice_T*, %struct.VkDeviceMemoryOpaqueCaptureAddressInfo*) #0 {
  %3 = bitcast %struct.VkDevice_T* %0 to %struct.VkLayerDispatchTable_**
  %4 = load %struct.VkLayerDispatchTable_*, %struct.VkLayerDispatchTable_** %3, align 8
  %5 = getelementptr inbounds %struct.VkLayerDispatchTable_, %struct.VkLayerDispatchTable_* %4, i64 0, i32 149
  %6 = load i64 (%struct.VkDevice_T*, %struct.VkDeviceMemoryOpaqueCaptureAddressInfo*)*, i64 (%struct.VkDevice_T*, %struct.VkDeviceMemoryOpaqueCaptureAddressInfo*)** %5, align 8
  %7 = tail call i64 %6(%struct.VkDevice_T* %0, %struct.VkDeviceMemoryOpaqueCaptureAddressInfo* %1) #7
  ret i64 %7
}

; Function Attrs: nounwind ssp uwtable
define void @vkResetQueryPool(%struct.VkDevice_T*, %struct.VkQueryPool_T*, i32, i32) #0 {
  %5 = bitcast %struct.VkDevice_T* %0 to %struct.VkLayerDispatchTable_**
  %6 = load %struct.VkLayerDispatchTable_*, %struct.VkLayerDispatchTable_** %5, align 8
  %7 = getelementptr inbounds %struct.VkLayerDispatchTable_, %struct.VkLayerDispatchTable_* %6, i64 0, i32 143
  %8 = load void (%struct.VkDevice_T*, %struct.VkQueryPool_T*, i32, i32)*, void (%struct.VkDevice_T*, %struct.VkQueryPool_T*, i32, i32)** %7, align 8
  tail call void %8(%struct.VkDevice_T* %0, %struct.VkQueryPool_T* %1, i32 %2, i32 %3) #7
  ret void
}

declare zeroext i1 @debug_utils_InstanceGpa(%struct.loader_instance*, i8*, i8**) local_unnamed_addr #2

declare zeroext i1 @wsi_swapchain_instance_gpa(%struct.loader_instance*, i8*, i8**) local_unnamed_addr #2

declare zeroext i1 @extension_instance_gpa(%struct.loader_instance*, i8*, i8**) local_unnamed_addr #2

declare zeroext i1 @loader_phys_dev_ext_gpa(%struct.loader_instance*, i8*, i1 zeroext, i8**, i8**) local_unnamed_addr #2

declare i8* @loader_dev_ext_gpa(%struct.loader_instance*, i8*) local_unnamed_addr #2

; Function Attrs: nounwind
declare i8* @dlopen(i8*, i32) local_unnamed_addr #5

; Function Attrs: nounwind
declare i8* @dlsym(i8*, i8*) local_unnamed_addr #5

; Function Attrs: nounwind
declare i32 @dlclose(i8*) local_unnamed_addr #5

; Function Attrs: nounwind
declare i32 @pthread_mutex_lock(%union.pthread_mutex_t*) local_unnamed_addr #5

; Function Attrs: nounwind
declare i32 @pthread_mutex_unlock(%union.pthread_mutex_t*) local_unnamed_addr #5

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nofree nounwind readonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nounwind readonly }
attributes #7 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = distinct !{!2, !3}
!3 = !{!"llvm.loop.unroll.disable"}
