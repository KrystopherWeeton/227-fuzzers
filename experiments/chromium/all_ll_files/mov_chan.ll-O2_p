; ModuleID = '../../third_party/ffmpeg/libavformat/mov_chan.c'
source_filename = "../../third_party/ffmpeg/libavformat/mov_chan.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"
module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"
module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%struct.MovChannelLayoutMap = type { i32, i64 }
%struct.anon = type { i32, i32* }
%struct.AVFormatContext = type { %struct.AVClass*, %struct.AVInputFormat*, %struct.AVOutputFormat*, i8*, %struct.AVIOContext*, i32, i32, %struct.AVStream**, [1024 x i8], i8*, i64, i64, i64, i32, i32, i32, i64, i64, i8*, i32, i32, %struct.AVProgram**, i32, i32, i32, i32, i32, i32, %struct.AVChapter**, %struct.AVDictionary*, i64, i32, i32, %struct.AVIOInterruptCB, i32, i64, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i64, i32, i32, i32, i32, i32, i8*, i8*, %struct.AVFormatInternal*, i32, %struct.AVCodec*, %struct.AVCodec*, %struct.AVCodec*, %struct.AVCodec*, i32, i8*, i32 (%struct.AVFormatContext*, i32, i8*, i64)*, i64, i8*, i32, i32 (%struct.AVFormatContext*, %struct.AVIOContext**, i8*, i32, %struct.AVIOInterruptCB*, %struct.AVDictionary**)*, i8*, i32 (%struct.AVFormatContext*, %struct.AVIOContext**, i8*, i32, %struct.AVDictionary**)*, void (%struct.AVFormatContext*, %struct.AVIOContext*)*, i8*, i32, i32, i32 }
%struct.AVClass = type { i8*, i8* (i8*)*, %struct.AVOption*, i32, i32, i32, i8* (i8*, i8*)*, %struct.AVClass* (%struct.AVClass*)*, i32, i32 (i8*)*, i32 (%struct.AVOptionRanges**, i8*, i8*, i32)*, %struct.AVClass* (i8**)* }
%struct.AVOption = type opaque
%struct.AVOptionRanges = type opaque
%struct.AVInputFormat = type { i8*, i8*, i32, i8*, %struct.AVCodecTag**, %struct.AVClass*, i8*, %struct.AVInputFormat*, i32, i32, i32 (%struct.AVProbeData*)*, i32 (%struct.AVFormatContext*)*, i32 (%struct.AVFormatContext*, %struct.AVPacket*)*, i32 (%struct.AVFormatContext*)*, i32 (%struct.AVFormatContext*, i32, i64, i32)*, i64 (%struct.AVFormatContext*, i32, i64*, i64)*, i32 (%struct.AVFormatContext*)*, i32 (%struct.AVFormatContext*)*, i32 (%struct.AVFormatContext*, i32, i64, i64, i64, i32)*, i32 (%struct.AVFormatContext*, %struct.AVDeviceInfoList*)*, i32 (%struct.AVFormatContext*, %struct.AVDeviceCapabilitiesQuery*)*, i32 (%struct.AVFormatContext*, %struct.AVDeviceCapabilitiesQuery*)* }
%struct.AVCodecTag = type opaque
%struct.AVProbeData = type { i8*, i8*, i32, i8* }
%struct.AVPacket = type { %struct.AVBufferRef*, i64, i64, i8*, i32, i32, i32, %struct.AVPacketSideData*, i32, i64, i64, i64 }
%struct.AVBufferRef = type { %struct.AVBuffer*, i8*, i32 }
%struct.AVBuffer = type opaque
%struct.AVPacketSideData = type { i8*, i32, i32 }
%struct.AVDeviceInfoList = type opaque
%struct.AVDeviceCapabilitiesQuery = type opaque
%struct.AVOutputFormat = type { i8*, i8*, i8*, i8*, i32, i32, i32, i32, %struct.AVCodecTag**, %struct.AVClass*, %struct.AVOutputFormat*, i32, i32 (%struct.AVFormatContext*)*, i32 (%struct.AVFormatContext*, %struct.AVPacket*)*, i32 (%struct.AVFormatContext*)*, i32 (%struct.AVFormatContext*, %struct.AVPacket*, %struct.AVPacket*, i32)*, i32 (i32, i32)*, void (%struct.AVFormatContext*, i32, i64*, i64*)*, i32 (%struct.AVFormatContext*, i32, i8*, i64)*, i32 (%struct.AVFormatContext*, i32, %struct.AVFrame**, i32)*, i32 (%struct.AVFormatContext*, %struct.AVDeviceInfoList*)*, i32 (%struct.AVFormatContext*, %struct.AVDeviceCapabilitiesQuery*)*, i32 (%struct.AVFormatContext*, %struct.AVDeviceCapabilitiesQuery*)*, i32, i32 (%struct.AVFormatContext*)*, void (%struct.AVFormatContext*)*, i32 (%struct.AVFormatContext*, %struct.AVPacket*)* }
%struct.AVFrame = type { [8 x i8*], [8 x i32], i8**, i32, i32, i32, i32, i32, i32, %struct.AVRational, i64, i64, i64, i32, i32, i32, i8*, [8 x i64], i32, i32, i32, i32, i64, i32, i64, [8 x %struct.AVBufferRef*], %struct.AVBufferRef**, i32, %struct.AVFrameSideData**, i32, i32, i32, i32, i32, i32, i32, i64, i64, i64, %struct.AVDictionary*, i32, i32, i32, i8*, i32, i32, %struct.AVBufferRef*, %struct.AVBufferRef*, %struct.AVBufferRef*, i64, i64, i64, i64, %struct.AVBufferRef* }
%struct.AVRational = type { i32, i32 }
%struct.AVFrameSideData = type { i32, i8*, i32, %struct.AVDictionary*, %struct.AVBufferRef* }
%struct.AVProgram = type { i32, i32, i32, i32*, i32, %struct.AVDictionary*, i32, i32, i32, i32, i64, i64, i64, i32 }
%struct.AVChapter = type { i32, %struct.AVRational, i64, i64, %struct.AVDictionary* }
%struct.AVDictionary = type opaque
%struct.AVIOInterruptCB = type { i32 (i8*)*, i8* }
%struct.AVFormatInternal = type opaque
%struct.AVCodec = type { i8*, i8*, i32, i32, i32, %struct.AVRational*, i32*, i32*, i32*, i64*, i8, %struct.AVClass*, %struct.AVProfile*, i8*, i32, %struct.AVCodec*, i32 (%struct.AVCodecContext*, %struct.AVCodecContext*)*, %struct.AVCodecDefault*, void (%struct.AVCodec*)*, i32 (%struct.AVCodecContext*)*, i32 (%struct.AVCodecContext*, i8*, i32, %struct.AVSubtitle*)*, i32 (%struct.AVCodecContext*, %struct.AVPacket*, %struct.AVFrame*, i32*)*, i32 (%struct.AVCodecContext*, i8*, i32*, %struct.AVPacket*)*, i32 (%struct.AVCodecContext*)*, i32 (%struct.AVCodecContext*, %struct.AVPacket*)*, i32 (%struct.AVCodecContext*, %struct.AVFrame*)*, void (%struct.AVCodecContext*)*, i32, i8*, %struct.AVCodecHWConfigInternal**, i32* }
%struct.AVProfile = type { i32, i8* }
%struct.AVCodecContext = type { %struct.AVClass*, i32, i32, %struct.AVCodec*, i32, i32, i8*, %struct.AVCodecInternal*, i8*, i64, i32, i32, i32, i32, i32, i8*, i32, %struct.AVRational, i32, i32, i32, i32, i32, i32, i32, i32, void (%struct.AVCodecContext*, %struct.AVFrame*, i32*, i32, i32, i32)*, i32 (%struct.AVCodecContext*, i32*)*, i32, float, i32, float, i32, i32, float, float, float, float, float, float, float, i32, i32, i32*, %struct.AVRational, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i16*, i16*, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i64, i64, i32, i32, i32 (%struct.AVCodecContext*, %struct.AVFrame*, i32)*, i32, float, float, i32, i32, i32, i32, i32, %struct.RcOverride*, i64, i64, float, float, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i64, void (%struct.AVCodecContext*, i8*, i32, i32)*, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i8*, i8*, i32, i32, i32, i32, i32, i64, %struct.AVHWAccel*, i8*, [8 x i64], i32, i32, i32, i32, i32, %struct.AVFrame*, i32, i32, i32, i32, i32 (%struct.AVCodecContext*, i32 (%struct.AVCodecContext*, i8*)*, i8*, i32*, i32, i32)*, i32 (%struct.AVCodecContext*, i32 (%struct.AVCodecContext*, i8*, i32, i32)*, i8*, i32*, i32)*, i32, i32, i32, i32, i32, i32, i8*, i32, i64, i32, i32, %struct.AVRational, i32, %struct.AVRational, %struct.AVCodecDescriptor*, i64, i64, i64, i64, i8*, i32, i32, i32, i32, i16*, i8*, i8*, i32, %struct.AVPacketSideData*, i32, %struct.AVBufferRef*, i32, i32, i64, %struct.AVBufferRef*, i32, i32, i32, i32, i64, i32 }
%struct.AVCodecInternal = type opaque
%struct.RcOverride = type { i32, i32, i32, float }
%struct.AVHWAccel = type { i8*, i32, i32, i32, i32, i32 (%struct.AVCodecContext*, %struct.AVFrame*)*, i32 (%struct.AVCodecContext*, i8*, i32)*, i32 (%struct.AVCodecContext*, i32, i8*, i32)*, i32 (%struct.AVCodecContext*, i8*, i32)*, i32 (%struct.AVCodecContext*)*, i32, void (%struct.MpegEncContext*)*, i32 (%struct.AVCodecContext*)*, i32 (%struct.AVCodecContext*)*, i32, i32, i32 (%struct.AVCodecContext*, %struct.AVBufferRef*)* }
%struct.MpegEncContext = type opaque
%struct.AVCodecDescriptor = type { i32, i32, i8*, i8*, i32, i8**, %struct.AVProfile* }
%struct.AVCodecDefault = type opaque
%struct.AVSubtitle = type { i16, i32, i32, i32, %struct.AVSubtitleRect**, i64 }
%struct.AVSubtitleRect = type { i32, i32, i32, i32, i32, %struct.AVPicture, [4 x i8*], [4 x i32], i32, i8*, i8*, i32 }
%struct.AVPicture = type { [8 x i8*], [8 x i32] }
%struct.AVCodecHWConfigInternal = type opaque
%struct.AVIOContext = type { %struct.AVClass*, i8*, i32, i8*, i8*, i8*, i32 (i8*, i8*, i32)*, i32 (i8*, i8*, i32)*, i64 (i8*, i64, i32)*, i64, i32, i32, i32, i64, i8*, i64 (i64, i8*, i32)*, i32, i32 (i8*, i32)*, i64 (i8*, i32, i64, i32)*, i32, i64, i32, i64, i32, i32, i32, i32, i8*, i8*, i32 (i8*, i8*, i32, i32, i64)*, i32, i32, i64, i32 (i8*)*, i64, i8*, i32 }
%struct.AVStream = type { i32, i32, %struct.AVCodecContext*, i8*, %struct.AVRational, i64, i64, i64, i32, i32, %struct.AVRational, %struct.AVDictionary*, %struct.AVRational, %struct.AVPacket, %struct.AVPacketSideData*, i32, i32, %struct.AVRational, i8*, %struct.AVCodecParameters*, i8*, i32, i64, i64, i64, i32, i32, i32, i32, %struct.AVCodecParserContext*, i8*, %struct.AVProbeData, [17 x i64], i8*, i32, i32, i32, i32, i32, i32, %struct.AVStreamInternal* }
%struct.AVCodecParameters = type { i32, i32, i32, i8*, i32, i32, i64, i32, i32, i32, i32, i32, i32, %struct.AVRational, i32, i32, i32, i32, i32, i32, i32, i64, i32, i32, i32, i32, i32, i32, i32 }
%struct.AVCodecParserContext = type { i8*, %struct.AVCodecParser*, i64, i64, i64, i32, i32, i64, i64, i64, i64, i32, i32, [4 x i64], [4 x i64], [4 x i64], i32, i64, [4 x i64], i32, i64, i32, i32, i32, [4 x i64], i64, i64, i32, i32, i32, i32, i32, i32, i32, i32, i32 }
%struct.AVCodecParser = type { [5 x i32], i32, i32 (%struct.AVCodecParserContext*)*, i32 (%struct.AVCodecParserContext*, %struct.AVCodecContext*, i8**, i32*, i8*, i32)*, void (%struct.AVCodecParserContext*)*, i32 (%struct.AVCodecContext*, i8*, i32)*, %struct.AVCodecParser* }
%struct.AVStreamInternal = type opaque

@mov_ch_layout_map = internal unnamed_addr constant [10 x %struct.MovChannelLayoutMap*] [%struct.MovChannelLayoutMap* getelementptr inbounds ([7 x %struct.MovChannelLayoutMap], [7 x %struct.MovChannelLayoutMap]* @mov_ch_layout_map_misc, i32 0, i32 0), %struct.MovChannelLayoutMap* getelementptr inbounds ([2 x %struct.MovChannelLayoutMap], [2 x %struct.MovChannelLayoutMap]* @mov_ch_layout_map_1ch, i32 0, i32 0), %struct.MovChannelLayoutMap* getelementptr inbounds ([8 x %struct.MovChannelLayoutMap], [8 x %struct.MovChannelLayoutMap]* @mov_ch_layout_map_2ch, i32 0, i32 0), %struct.MovChannelLayoutMap* getelementptr inbounds ([6 x %struct.MovChannelLayoutMap], [6 x %struct.MovChannelLayoutMap]* @mov_ch_layout_map_3ch, i32 0, i32 0), %struct.MovChannelLayoutMap* getelementptr inbounds ([12 x %struct.MovChannelLayoutMap], [12 x %struct.MovChannelLayoutMap]* @mov_ch_layout_map_4ch, i32 0, i32 0), %struct.MovChannelLayoutMap* getelementptr inbounds ([11 x %struct.MovChannelLayoutMap], [11 x %struct.MovChannelLayoutMap]* @mov_ch_layout_map_5ch, i32 0, i32 0), %struct.MovChannelLayoutMap* getelementptr inbounds ([12 x %struct.MovChannelLayoutMap], [12 x %struct.MovChannelLayoutMap]* @mov_ch_layout_map_6ch, i32 0, i32 0), %struct.MovChannelLayoutMap* getelementptr inbounds ([15 x %struct.MovChannelLayoutMap], [15 x %struct.MovChannelLayoutMap]* @mov_ch_layout_map_7ch, i32 0, i32 0), %struct.MovChannelLayoutMap* getelementptr inbounds ([20 x %struct.MovChannelLayoutMap], [20 x %struct.MovChannelLayoutMap]* @mov_ch_layout_map_8ch, i32 0, i32 0), %struct.MovChannelLayoutMap* getelementptr inbounds ([3 x %struct.MovChannelLayoutMap], [3 x %struct.MovChannelLayoutMap]* @mov_ch_layout_map_9ch, i32 0, i32 0)], align 16
@mov_codec_ch_layouts = internal unnamed_addr constant [16 x %struct.anon] [%struct.anon { i32 86018, i32* getelementptr inbounds ([24 x i32], [24 x i32]* @mov_ch_layouts_aac, i32 0, i32 0) }, %struct.anon { i32 86019, i32* getelementptr inbounds ([15 x i32], [15 x i32]* @mov_ch_layouts_ac3, i32 0, i32 0) }, %struct.anon { i32 86032, i32* getelementptr inbounds ([9 x i32], [9 x i32]* @mov_ch_layouts_alac, i32 0, i32 0) }, %struct.anon { i32 65541, i32* getelementptr inbounds ([12 x i32], [12 x i32]* @mov_ch_layouts_wav, i32 0, i32 0) }, %struct.anon { i32 65540, i32* getelementptr inbounds ([12 x i32], [12 x i32]* @mov_ch_layouts_wav, i32 0, i32 0) }, %struct.anon { i32 65536, i32* getelementptr inbounds ([12 x i32], [12 x i32]* @mov_ch_layouts_wav, i32 0, i32 0) }, %struct.anon { i32 65537, i32* getelementptr inbounds ([12 x i32], [12 x i32]* @mov_ch_layouts_wav, i32 0, i32 0) }, %struct.anon { i32 65548, i32* getelementptr inbounds ([12 x i32], [12 x i32]* @mov_ch_layouts_wav, i32 0, i32 0) }, %struct.anon { i32 65549, i32* getelementptr inbounds ([12 x i32], [12 x i32]* @mov_ch_layouts_wav, i32 0, i32 0) }, %struct.anon { i32 65544, i32* getelementptr inbounds ([12 x i32], [12 x i32]* @mov_ch_layouts_wav, i32 0, i32 0) }, %struct.anon { i32 65545, i32* getelementptr inbounds ([12 x i32], [12 x i32]* @mov_ch_layouts_wav, i32 0, i32 0) }, %struct.anon { i32 65557, i32* getelementptr inbounds ([12 x i32], [12 x i32]* @mov_ch_layouts_wav, i32 0, i32 0) }, %struct.anon { i32 65556, i32* getelementptr inbounds ([12 x i32], [12 x i32]* @mov_ch_layouts_wav, i32 0, i32 0) }, %struct.anon { i32 65559, i32* getelementptr inbounds ([12 x i32], [12 x i32]* @mov_ch_layouts_wav, i32 0, i32 0) }, %struct.anon { i32 65558, i32* getelementptr inbounds ([12 x i32], [12 x i32]* @mov_ch_layouts_wav, i32 0, i32 0) }, %struct.anon zeroinitializer], align 16
@.str = private unnamed_addr constant [40 x i8] c"chan: layout=%u bitmap=%u num_descr=%u\0A\00", align 1
@.str.1 = private unnamed_addr constant [42 x i8] c"reached EOF while reading channel layout\0A\00", align 1
@mov_ch_layout_map_misc = internal constant [7 x %struct.MovChannelLayoutMap] [%struct.MovChannelLayoutMap zeroinitializer, %struct.MovChannelLayoutMap { i32 65536, i64 0 }, %struct.MovChannelLayoutMap { i32 9633792, i64 0 }, %struct.MovChannelLayoutMap { i32 -65536, i64 0 }, %struct.MovChannelLayoutMap { i32 9502736, i64 0 }, %struct.MovChannelLayoutMap { i32 9568277, i64 0 }, %struct.MovChannelLayoutMap zeroinitializer], align 16
@mov_ch_layout_map_1ch = internal constant [2 x %struct.MovChannelLayoutMap] [%struct.MovChannelLayoutMap { i32 6553601, i64 4 }, %struct.MovChannelLayoutMap zeroinitializer], align 16
@mov_ch_layout_map_2ch = internal constant [8 x %struct.MovChannelLayoutMap] [%struct.MovChannelLayoutMap { i32 6619138, i64 3 }, %struct.MovChannelLayoutMap { i32 6684674, i64 3 }, %struct.MovChannelLayoutMap { i32 6946818, i64 3 }, %struct.MovChannelLayoutMap { i32 6815746, i64 3 }, %struct.MovChannelLayoutMap { i32 6881282, i64 3 }, %struct.MovChannelLayoutMap { i32 6750210, i64 1610612736 }, %struct.MovChannelLayoutMap { i32 9764866, i64 12 }, %struct.MovChannelLayoutMap zeroinitializer], align 16
@mov_ch_layout_map_3ch = internal constant [6 x %struct.MovChannelLayoutMap] [%struct.MovChannelLayoutMap { i32 7405571, i64 7 }, %struct.MovChannelLayoutMap { i32 7471107, i64 7 }, %struct.MovChannelLayoutMap { i32 9830403, i64 7 }, %struct.MovChannelLayoutMap { i32 8585219, i64 259 }, %struct.MovChannelLayoutMap { i32 8716291, i64 11 }, %struct.MovChannelLayoutMap zeroinitializer], align 16
@mov_ch_layout_map_4ch = internal constant [12 x %struct.MovChannelLayoutMap] [%struct.MovChannelLayoutMap { i32 7012356, i64 0 }, %struct.MovChannelLayoutMap { i32 7077892, i64 51 }, %struct.MovChannelLayoutMap { i32 7536644, i64 263 }, %struct.MovChannelLayoutMap { i32 7602180, i64 263 }, %struct.MovChannelLayoutMap { i32 9895940, i64 263 }, %struct.MovChannelLayoutMap { i32 8650756, i64 1539 }, %struct.MovChannelLayoutMap { i32 8781828, i64 267 }, %struct.MovChannelLayoutMap { i32 10027012, i64 267 }, %struct.MovChannelLayoutMap { i32 8912900, i64 15 }, %struct.MovChannelLayoutMap { i32 9961476, i64 15 }, %struct.MovChannelLayoutMap { i32 11010052, i64 15 }, %struct.MovChannelLayoutMap zeroinitializer], align 16
@mov_ch_layout_map_5ch = internal constant [11 x %struct.MovChannelLayoutMap] [%struct.MovChannelLayoutMap { i32 7143429, i64 55 }, %struct.MovChannelLayoutMap { i32 7667717, i64 1543 }, %struct.MovChannelLayoutMap { i32 7733253, i64 1543 }, %struct.MovChannelLayoutMap { i32 7798789, i64 1543 }, %struct.MovChannelLayoutMap { i32 7864325, i64 1543 }, %struct.MovChannelLayoutMap { i32 8847365, i64 1547 }, %struct.MovChannelLayoutMap { i32 9043973, i64 1547 }, %struct.MovChannelLayoutMap { i32 8978437, i64 271 }, %struct.MovChannelLayoutMap { i32 10092549, i64 271 }, %struct.MovChannelLayoutMap { i32 11075589, i64 271 }, %struct.MovChannelLayoutMap zeroinitializer], align 16
@mov_ch_layout_map_6ch = internal constant [12 x %struct.MovChannelLayoutMap] [%struct.MovChannelLayoutMap { i32 7208966, i64 311 }, %struct.MovChannelLayoutMap { i32 11272198, i64 311 }, %struct.MovChannelLayoutMap { i32 7929862, i64 1551 }, %struct.MovChannelLayoutMap { i32 7995398, i64 1551 }, %struct.MovChannelLayoutMap { i32 8060934, i64 1551 }, %struct.MovChannelLayoutMap { i32 8126470, i64 1551 }, %struct.MovChannelLayoutMap { i32 9109510, i64 1799 }, %struct.MovChannelLayoutMap { i32 9240582, i64 1799 }, %struct.MovChannelLayoutMap { i32 10158086, i64 1799 }, %struct.MovChannelLayoutMap { i32 11141126, i64 1731 }, %struct.MovChannelLayoutMap { i32 11206662, i64 2103 }, %struct.MovChannelLayoutMap zeroinitializer], align 16
@mov_ch_layout_map_7ch = internal constant [15 x %struct.MovChannelLayoutMap] [%struct.MovChannelLayoutMap { i32 8192007, i64 1807 }, %struct.MovChannelLayoutMap { i32 9306119, i64 1807 }, %struct.MovChannelLayoutMap { i32 10289159, i64 1807 }, %struct.MovChannelLayoutMap { i32 11927559, i64 1807 }, %struct.MovChannelLayoutMap { i32 9175047, i64 1591 }, %struct.MovChannelLayoutMap { i32 9371655, i64 1591 }, %struct.MovChannelLayoutMap { i32 10223623, i64 1591 }, %struct.MovChannelLayoutMap { i32 9699335, i64 1735 }, %struct.MovChannelLayoutMap { i32 11534343, i64 1735 }, %struct.MovChannelLayoutMap { i32 10354695, i64 3599 }, %struct.MovChannelLayoutMap { i32 10420231, i64 9743 }, %struct.MovChannelLayoutMap { i32 11337735, i64 1739 }, %struct.MovChannelLayoutMap { i32 11403271, i64 2111 }, %struct.MovChannelLayoutMap { i32 11468807, i64 319 }, %struct.MovChannelLayoutMap zeroinitializer], align 16
@mov_ch_layout_map_8ch = internal constant [20 x %struct.MovChannelLayoutMap] [%struct.MovChannelLayoutMap { i32 7274504, i64 1847 }, %struct.MovChannelLayoutMap { i32 9437192, i64 1847 }, %struct.MovChannelLayoutMap { i32 7340040, i64 184371 }, %struct.MovChannelLayoutMap { i32 8257544, i64 1743 }, %struct.MovChannelLayoutMap { i32 8323080, i64 1743 }, %struct.MovChannelLayoutMap { i32 8454152, i64 1743 }, %struct.MovChannelLayoutMap { i32 10551304, i64 1743 }, %struct.MovChannelLayoutMap { i32 11599880, i64 1743 }, %struct.MovChannelLayoutMap { i32 8388616, i64 1599 }, %struct.MovChannelLayoutMap { i32 10485768, i64 1599 }, %struct.MovChannelLayoutMap { i32 8519688, i64 1610614287 }, %struct.MovChannelLayoutMap { i32 10616840, i64 25769805327 }, %struct.MovChannelLayoutMap { i32 10682376, i64 6442452495 }, %struct.MovChannelLayoutMap { i32 10747912, i64 22031 }, %struct.MovChannelLayoutMap { i32 10813448, i64 3855 }, %struct.MovChannelLayoutMap { i32 10878984, i64 9999 }, %struct.MovChannelLayoutMap { i32 10944520, i64 11791 }, %struct.MovChannelLayoutMap { i32 11665416, i64 1779 }, %struct.MovChannelLayoutMap { i32 11730952, i64 1991 }, %struct.MovChannelLayoutMap zeroinitializer], align 16
@mov_ch_layout_map_9ch = internal constant [3 x %struct.MovChannelLayoutMap] [%struct.MovChannelLayoutMap { i32 11796489, i64 1787 }, %struct.MovChannelLayoutMap { i32 11862025, i64 1999 }, %struct.MovChannelLayoutMap zeroinitializer], align 16
@mov_ch_layouts_aac = internal constant [24 x i32] [i32 6553601, i32 6619138, i32 9764866, i32 7471107, i32 8585219, i32 8716291, i32 7077892, i32 7602180, i32 8650756, i32 10027012, i32 11010052, i32 7864325, i32 9043973, i32 11075589, i32 8126470, i32 9240582, i32 11141126, i32 9306119, i32 9371655, i32 11337735, i32 9437192, i32 8323080, i32 11665416, i32 0], align 16
@mov_ch_layouts_ac3 = internal constant [15 x i32] [i32 6553601, i32 6619138, i32 9764866, i32 9830403, i32 8585219, i32 8716291, i32 9895940, i32 8650756, i32 10027012, i32 9961476, i32 7798789, i32 9043973, i32 10092549, i32 8060934, i32 0], align 16
@mov_ch_layouts_alac = internal constant [9 x i32] [i32 6553601, i32 6619138, i32 7471107, i32 7602180, i32 7864325, i32 8126470, i32 9306119, i32 8323080, i32 0], align 16
@mov_ch_layouts_wav = internal constant [12 x i32] [i32 6553601, i32 6619138, i32 6750210, i32 7405571, i32 7077892, i32 7667717, i32 7929862, i32 8192007, i32 8257544, i32 8388616, i32 8519688, i32 0], align 16

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden i64 @ff_mov_get_channel_layout(i32, i32) local_unnamed_addr #0 {
  switch i32 %0, label %7 [
    i32 0, label %26
    i32 65536, label %3
  ]

3:                                                ; preds = %2
  %4 = icmp ult i32 %1, 262144
  %5 = select i1 %4, i32 %1, i32 0
  %6 = zext i32 %5 to i64
  br label %26

7:                                                ; preds = %2
  %8 = and i32 %0, 65535
  %9 = icmp ugt i32 %8, 9
  %10 = select i1 %9, i32 0, i32 %8
  %11 = zext i32 %10 to i64
  %12 = getelementptr inbounds [10 x %struct.MovChannelLayoutMap*], [10 x %struct.MovChannelLayoutMap*]* @mov_ch_layout_map, i64 0, i64 %11
  %13 = load %struct.MovChannelLayoutMap*, %struct.MovChannelLayoutMap** %12, align 8
  br label %14

14:                                               ; preds = %14, %7
  %15 = phi i64 [ %21, %14 ], [ 0, %7 ]
  %16 = getelementptr inbounds %struct.MovChannelLayoutMap, %struct.MovChannelLayoutMap* %13, i64 %15, i32 0
  %17 = load i32, i32* %16, align 8
  %18 = icmp eq i32 %17, 0
  %19 = icmp eq i32 %17, %0
  %20 = or i1 %18, %19
  %21 = add nuw i64 %15, 1
  br i1 %20, label %22, label %14

22:                                               ; preds = %14
  %23 = and i64 %15, 4294967295
  %24 = getelementptr inbounds %struct.MovChannelLayoutMap, %struct.MovChannelLayoutMap* %13, i64 %23, i32 1
  %25 = load i64, i64* %24, align 8
  br label %26

26:                                               ; preds = %2, %22, %3
  %27 = phi i64 [ %6, %3 ], [ %25, %22 ], [ 0, %2 ]
  ret i64 %27
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @ff_mov_get_channel_layout_tag(i32, i64, i32* nocapture) local_unnamed_addr #1 {
  switch i32 %0, label %58 [
    i32 86018, label %18
    i32 86019, label %4
    i32 86032, label %5
    i32 65541, label %6
    i32 65540, label %7
    i32 65536, label %8
    i32 65537, label %9
    i32 65548, label %10
    i32 65549, label %11
    i32 65544, label %12
    i32 65545, label %13
    i32 65557, label %14
    i32 65556, label %15
    i32 65559, label %16
    i32 65558, label %17
  ]

4:                                                ; preds = %3
  br label %18

5:                                                ; preds = %3
  br label %18

6:                                                ; preds = %3
  br label %18

7:                                                ; preds = %3
  br label %18

8:                                                ; preds = %3
  br label %18

9:                                                ; preds = %3
  br label %18

10:                                               ; preds = %3
  br label %18

11:                                               ; preds = %3
  br label %18

12:                                               ; preds = %3
  br label %18

13:                                               ; preds = %3
  br label %18

14:                                               ; preds = %3
  br label %18

15:                                               ; preds = %3
  br label %18

16:                                               ; preds = %3
  br label %18

17:                                               ; preds = %3
  br label %18

18:                                               ; preds = %3, %17, %16, %15, %14, %13, %12, %11, %10, %9, %8, %7, %6, %5, %4
  %19 = phi i64 [ 0, %3 ], [ 1, %4 ], [ 2, %5 ], [ 3, %6 ], [ 4, %7 ], [ 5, %8 ], [ 6, %9 ], [ 7, %10 ], [ 8, %11 ], [ 9, %12 ], [ 10, %13 ], [ 11, %14 ], [ 12, %15 ], [ 13, %16 ], [ 14, %17 ]
  %20 = getelementptr inbounds [16 x %struct.anon], [16 x %struct.anon]* @mov_codec_ch_layouts, i64 0, i64 %19, i32 1
  %21 = load i32*, i32** %20, align 8
  %22 = tail call i32 @av_get_channel_layout_nb_channels(i64 %1) #3
  %23 = icmp sgt i32 %22, 9
  %24 = select i1 %23, i32 0, i32 %22
  %25 = sext i32 %24 to i64
  %26 = getelementptr inbounds [10 x %struct.MovChannelLayoutMap*], [10 x %struct.MovChannelLayoutMap*]* @mov_ch_layout_map, i64 0, i64 %25
  %27 = load %struct.MovChannelLayoutMap*, %struct.MovChannelLayoutMap** %26, align 8
  %28 = load i32, i32* %21, align 4
  %29 = icmp eq i32 %28, 0
  br i1 %29, label %58, label %30

30:                                               ; preds = %18
  %31 = getelementptr inbounds %struct.MovChannelLayoutMap, %struct.MovChannelLayoutMap* %27, i64 0, i32 0
  br label %32

32:                                               ; preds = %30, %53
  %33 = phi i64 [ 0, %30 ], [ %54, %53 ]
  %34 = phi i32 [ %28, %30 ], [ %56, %53 ]
  %35 = and i32 %34, 65535
  %36 = icmp eq i32 %35, %24
  br i1 %36, label %37, label %53

37:                                               ; preds = %32
  %38 = load i32, i32* %31, align 8
  %39 = icmp eq i32 %38, 0
  br i1 %39, label %53, label %40

40:                                               ; preds = %37, %48
  %41 = phi i64 [ %49, %48 ], [ 0, %37 ]
  %42 = phi i32 [ %51, %48 ], [ %38, %37 ]
  %43 = icmp eq i32 %42, %34
  br i1 %43, label %44, label %48

44:                                               ; preds = %40
  %45 = getelementptr inbounds %struct.MovChannelLayoutMap, %struct.MovChannelLayoutMap* %27, i64 %41, i32 1
  %46 = load i64, i64* %45, align 8
  %47 = icmp eq i64 %46, %1
  br i1 %47, label %58, label %48

48:                                               ; preds = %40, %44
  %49 = add nuw i64 %41, 1
  %50 = getelementptr inbounds %struct.MovChannelLayoutMap, %struct.MovChannelLayoutMap* %27, i64 %49, i32 0
  %51 = load i32, i32* %50, align 8
  %52 = icmp eq i32 %51, 0
  br i1 %52, label %53, label %40

53:                                               ; preds = %48, %37, %32
  %54 = add nuw i64 %33, 1
  %55 = getelementptr inbounds i32, i32* %21, i64 %54
  %56 = load i32, i32* %55, align 4
  %57 = icmp eq i32 %56, 0
  br i1 %57, label %58, label %32

58:                                               ; preds = %53, %44, %3, %18
  %59 = phi i32 [ 0, %18 ], [ 0, %3 ], [ %34, %44 ], [ 0, %53 ]
  %60 = icmp eq i32 %59, 0
  %61 = add i64 %1, -1
  %62 = icmp ult i64 %61, 262143
  %63 = and i1 %62, %60
  %64 = trunc i64 %1 to i32
  %65 = select i1 %63, i32 %64, i32 0
  %66 = select i1 %63, i32 65536, i32 %59
  store i32 %65, i32* %2, align 4
  ret i32 %66
}

declare i32 @av_get_channel_layout_nb_channels(i64) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden i32 @ff_mov_read_chan(%struct.AVFormatContext*, %struct.AVIOContext*, %struct.AVStream* nocapture readonly, i64) local_unnamed_addr #1 {
  %5 = icmp slt i64 %3, 12
  br i1 %5, label %97, label %6

6:                                                ; preds = %4
  %7 = tail call i32 @avio_rb32(%struct.AVIOContext* %1) #3
  %8 = tail call i32 @avio_rb32(%struct.AVIOContext* %1) #3
  %9 = tail call i32 @avio_rb32(%struct.AVIOContext* %1) #3
  %10 = bitcast %struct.AVFormatContext* %0 to i8*
  tail call void (i8*, i32, i8*, ...) @av_log(i8* %10, i32 56, i8* getelementptr inbounds ([40 x i8], [40 x i8]* @.str, i64 0, i64 0), i32 %7, i32 %8, i32 %9) #3
  %11 = zext i32 %9 to i64
  %12 = mul nuw nsw i64 %11, 20
  %13 = add nuw nsw i64 %12, 12
  %14 = icmp ugt i64 %13, %3
  br i1 %14, label %97, label %15

15:                                               ; preds = %6
  %16 = icmp eq i32 %9, 0
  br i1 %16, label %53, label %17

17:                                               ; preds = %15
  %18 = getelementptr inbounds %struct.AVIOContext, %struct.AVIOContext* %1, i64 0, i32 10
  %19 = icmp eq i32 %7, 0
  br label %20

20:                                               ; preds = %49, %17
  %21 = phi i32 [ 0, %17 ], [ %51, %49 ]
  %22 = phi i32 [ 0, %17 ], [ %50, %49 ]
  %23 = phi i64 [ %3, %17 ], [ %33, %49 ]
  %24 = load i32, i32* %18, align 8
  %25 = icmp eq i32 %24, 0
  br i1 %25, label %27, label %26

26:                                               ; preds = %20
  tail call void (i8*, i32, i8*, ...) @av_log(i8* %10, i32 16, i8* getelementptr inbounds ([42 x i8], [42 x i8]* @.str.1, i64 0, i64 0)) #3
  br label %97

27:                                               ; preds = %20
  %28 = tail call i32 @avio_rb32(%struct.AVIOContext* %1) #3
  %29 = tail call i32 @avio_rb32(%struct.AVIOContext* %1) #3
  %30 = tail call i32 @avio_rl32(%struct.AVIOContext* %1) #3
  %31 = tail call i32 @avio_rl32(%struct.AVIOContext* %1) #3
  %32 = tail call i32 @avio_rl32(%struct.AVIOContext* %1) #3
  %33 = add nsw i64 %23, -20
  br i1 %19, label %34, label %49

34:                                               ; preds = %27
  %35 = icmp eq i32 %28, 0
  br i1 %35, label %93, label %36

36:                                               ; preds = %34
  %37 = icmp ult i32 %28, 19
  br i1 %37, label %38, label %42

38:                                               ; preds = %36
  %39 = add nsw i32 %28, -1
  %40 = shl i32 1, %39
  %41 = or i32 %40, %22
  br label %49

42:                                               ; preds = %36
  %43 = icmp eq i32 %28, 39
  %44 = select i1 %43, i32 1073741824, i32 0
  %45 = icmp eq i32 %28, 38
  %46 = select i1 %45, i32 536870912, i32 %44
  %47 = icmp eq i32 %46, 0
  %48 = or i32 %46, %22
  br i1 %47, label %56, label %49

49:                                               ; preds = %42, %38, %27
  %50 = phi i32 [ %48, %42 ], [ %22, %27 ], [ %41, %38 ]
  %51 = add nuw i32 %21, 1
  %52 = icmp eq i32 %51, %9
  br i1 %52, label %53, label %20

53:                                               ; preds = %49, %15
  %54 = phi i64 [ %3, %15 ], [ %33, %49 ]
  %55 = phi i32 [ 0, %15 ], [ %50, %49 ]
  switch i32 %7, label %69 [
    i32 0, label %56
    i32 65536, label %65
  ]

56:                                               ; preds = %42, %53
  %57 = phi i32 [ %55, %53 ], [ 0, %42 ]
  %58 = phi i64 [ %54, %53 ], [ %33, %42 ]
  %59 = icmp eq i32 %57, 0
  br i1 %59, label %93, label %60

60:                                               ; preds = %56
  %61 = zext i32 %57 to i64
  %62 = getelementptr inbounds %struct.AVStream, %struct.AVStream* %2, i64 0, i32 19
  %63 = load %struct.AVCodecParameters*, %struct.AVCodecParameters** %62, align 8
  %64 = getelementptr inbounds %struct.AVCodecParameters, %struct.AVCodecParameters* %63, i64 0, i32 21
  store i64 %61, i64* %64, align 8
  br label %93

65:                                               ; preds = %53
  %66 = icmp ult i32 %8, 262144
  %67 = select i1 %66, i32 %8, i32 0
  %68 = zext i32 %67 to i64
  br label %88

69:                                               ; preds = %53
  %70 = and i32 %7, 65535
  %71 = icmp ugt i32 %70, 9
  %72 = select i1 %71, i32 0, i32 %70
  %73 = zext i32 %72 to i64
  %74 = getelementptr inbounds [10 x %struct.MovChannelLayoutMap*], [10 x %struct.MovChannelLayoutMap*]* @mov_ch_layout_map, i64 0, i64 %73
  %75 = load %struct.MovChannelLayoutMap*, %struct.MovChannelLayoutMap** %74, align 8
  br label %76

76:                                               ; preds = %76, %69
  %77 = phi i64 [ %83, %76 ], [ 0, %69 ]
  %78 = getelementptr inbounds %struct.MovChannelLayoutMap, %struct.MovChannelLayoutMap* %75, i64 %77, i32 0
  %79 = load i32, i32* %78, align 8
  %80 = icmp eq i32 %79, 0
  %81 = icmp eq i32 %79, %7
  %82 = or i1 %80, %81
  %83 = add nuw i64 %77, 1
  br i1 %82, label %84, label %76

84:                                               ; preds = %76
  %85 = and i64 %77, 4294967295
  %86 = getelementptr inbounds %struct.MovChannelLayoutMap, %struct.MovChannelLayoutMap* %75, i64 %85, i32 1
  %87 = load i64, i64* %86, align 8
  br label %88

88:                                               ; preds = %65, %84
  %89 = phi i64 [ %68, %65 ], [ %87, %84 ]
  %90 = getelementptr inbounds %struct.AVStream, %struct.AVStream* %2, i64 0, i32 19
  %91 = load %struct.AVCodecParameters*, %struct.AVCodecParameters** %90, align 8
  %92 = getelementptr inbounds %struct.AVCodecParameters, %struct.AVCodecParameters* %91, i64 0, i32 21
  store i64 %89, i64* %92, align 8
  br label %93

93:                                               ; preds = %34, %56, %60, %88
  %94 = phi i64 [ %58, %56 ], [ %58, %60 ], [ %54, %88 ], [ %33, %34 ]
  %95 = add nsw i64 %94, -12
  %96 = tail call i64 @avio_skip(%struct.AVIOContext* %1, i64 %95) #3
  br label %97

97:                                               ; preds = %26, %6, %4, %93
  %98 = phi i32 [ 0, %93 ], [ -1094995529, %4 ], [ 0, %6 ], [ -1094995529, %26 ]
  ret i32 %98
}

declare i32 @avio_rb32(%struct.AVIOContext*) local_unnamed_addr #2

declare void @av_log(i8*, i32, i8*, ...) local_unnamed_addr #2

declare i32 @avio_rl32(%struct.AVIOContext*) local_unnamed_addr #2

declare i64 @avio_skip(%struct.AVIOContext*, i64) local_unnamed_addr #2

attributes #0 = { norecurse nounwind readonly ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="true" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="true" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="true" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
