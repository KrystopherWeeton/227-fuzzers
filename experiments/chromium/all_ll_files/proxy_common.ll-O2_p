; ModuleID = '../../cc/trees/proxy_common.cc'
source_filename = "../../cc/trees/proxy_common.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"struct.cc::BeginMainFrameAndCommitState" = type { %"struct.viz::BeginFrameArgs", %"class.std::__1::unique_ptr", i64, %"class.std::__1::vector.19", %"class.std::__1::unique_ptr.26", i16, i8, %"class.std::__1::vector.32" }
%"struct.viz::BeginFrameArgs" = type { %"class.base::TimeTicks", %"class.base::TimeTicks", %"class.base::TimeDelta", %"struct.viz::BeginFrameId", i64, i32, i8, i8, i64 }
%"class.base::TimeTicks" = type { %"class.base::time_internal::TimeBase" }
%"class.base::time_internal::TimeBase" = type { i64 }
%"class.base::TimeDelta" = type { i64 }
%"struct.viz::BeginFrameId" = type { i64, i64 }
%"class.std::__1::unique_ptr" = type { %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %"struct.cc::CompositorCommitData"* }
%"struct.cc::CompositorCommitData" = type <{ %"struct.cc::CompositorCommitData::ScrollUpdateInfo", %"class.std::__1::vector", float, i8, i8, [2 x i8], %"class.gfx::Vector2dF", %"class.gfx::Vector2dF", %"struct.cc::ElementId", float, float, %"class.std::__1::vector.3", %"class.std::__1::vector.10", i32, i8, i8, i8, i8, i32, [4 x i8] }>
%"struct.cc::CompositorCommitData::ScrollUpdateInfo" = type { %"struct.cc::ElementId", %"class.gfx::ScrollOffset", %"class.absl::optional" }
%"class.gfx::ScrollOffset" = type { float, float }
%"class.absl::optional" = type { %"class.absl::optional_internal::optional_data" }
%"class.absl::optional_internal::optional_data" = type { %"class.absl::optional_internal::optional_data_base" }
%"class.absl::optional_internal::optional_data_base" = type { %"class.absl::optional_internal::optional_data_dtor_base" }
%"class.absl::optional_internal::optional_data_dtor_base" = type { i8, %union.anon }
%union.anon = type { %"struct.cc::TargetSnapAreaElementIds" }
%"struct.cc::TargetSnapAreaElementIds" = type { %"struct.cc::ElementId", %"struct.cc::ElementId" }
%"class.std::__1::vector" = type { %"class.std::__1::__vector_base" }
%"class.std::__1::__vector_base" = type { %"struct.cc::CompositorCommitData::ScrollUpdateInfo"*, %"struct.cc::CompositorCommitData::ScrollUpdateInfo"*, %"class.std::__1::__compressed_pair.0" }
%"class.std::__1::__compressed_pair.0" = type { %"struct.std::__1::__compressed_pair_elem.1" }
%"struct.std::__1::__compressed_pair_elem.1" = type { %"struct.cc::CompositorCommitData::ScrollUpdateInfo"* }
%"class.gfx::Vector2dF" = type { float, float }
%"struct.cc::ElementId" = type { i64 }
%"class.std::__1::vector.3" = type { %"class.std::__1::__vector_base.4" }
%"class.std::__1::__vector_base.4" = type { %"struct.cc::CompositorCommitData::ScrollbarsUpdateInfo"*, %"struct.cc::CompositorCommitData::ScrollbarsUpdateInfo"*, %"class.std::__1::__compressed_pair.5" }
%"struct.cc::CompositorCommitData::ScrollbarsUpdateInfo" = type <{ %"struct.cc::ElementId", i8, [7 x i8] }>
%"class.std::__1::__compressed_pair.5" = type { %"struct.std::__1::__compressed_pair_elem.6" }
%"struct.std::__1::__compressed_pair_elem.6" = type { %"struct.cc::CompositorCommitData::ScrollbarsUpdateInfo"* }
%"class.std::__1::vector.10" = type { %"class.std::__1::__vector_base.11" }
%"class.std::__1::__vector_base.11" = type { %"class.std::__1::unique_ptr.12"*, %"class.std::__1::unique_ptr.12"*, %"class.std::__1::__compressed_pair.13" }
%"class.std::__1::unique_ptr.12" = type { %"class.std::__1::__compressed_pair.39" }
%"class.std::__1::__compressed_pair.39" = type { %"struct.std::__1::__compressed_pair_elem.40" }
%"struct.std::__1::__compressed_pair_elem.40" = type { %"class.cc::SwapPromise"* }
%"class.cc::SwapPromise" = type { i32 (...)** }
%"class.std::__1::__compressed_pair.13" = type { %"struct.std::__1::__compressed_pair_elem.14" }
%"struct.std::__1::__compressed_pair_elem.14" = type { %"class.std::__1::unique_ptr.12"* }
%"class.std::__1::vector.19" = type { %"class.std::__1::__vector_base.20" }
%"class.std::__1::__vector_base.20" = type { %"struct.std::__1::pair"*, %"struct.std::__1::pair"*, %"class.std::__1::__compressed_pair.21" }
%"struct.std::__1::pair" = type <{ i32, i8, [3 x i8] }>
%"class.std::__1::__compressed_pair.21" = type { %"struct.std::__1::__compressed_pair_elem.22" }
%"struct.std::__1::__compressed_pair_elem.22" = type { %"struct.std::__1::pair"* }
%"class.std::__1::unique_ptr.26" = type { %"class.std::__1::__compressed_pair.27" }
%"class.std::__1::__compressed_pair.27" = type { %"struct.std::__1::__compressed_pair_elem.28" }
%"struct.std::__1::__compressed_pair_elem.28" = type { %"class.cc::MutatorEvents"* }
%"class.cc::MutatorEvents" = type { i32 (...)** }
%"class.std::__1::vector.32" = type { %"class.std::__1::__vector_base.33" }
%"class.std::__1::__vector_base.33" = type { i32*, i32*, %"class.std::__1::__compressed_pair.34" }
%"class.std::__1::__compressed_pair.34" = type { %"struct.std::__1::__compressed_pair_elem.35" }
%"struct.std::__1::__compressed_pair_elem.35" = type { i32* }

@_ZN2cc28BeginMainFrameAndCommitStateC1Ev = hidden unnamed_addr alias void (%"struct.cc::BeginMainFrameAndCommitState"*), void (%"struct.cc::BeginMainFrameAndCommitState"*)* @_ZN2cc28BeginMainFrameAndCommitStateC2Ev
@_ZN2cc28BeginMainFrameAndCommitStateD1Ev = hidden unnamed_addr alias void (%"struct.cc::BeginMainFrameAndCommitState"*), void (%"struct.cc::BeginMainFrameAndCommitState"*)* @_ZN2cc28BeginMainFrameAndCommitStateD2Ev

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2cc28BeginMainFrameAndCommitStateC2Ev(%"struct.cc::BeginMainFrameAndCommitState"*) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"struct.cc::BeginMainFrameAndCommitState", %"struct.cc::BeginMainFrameAndCommitState"* %0, i64 0, i32 0
  tail call void @_ZN3viz14BeginFrameArgsC1Ev(%"struct.viz::BeginFrameArgs"* %2) #5
  %3 = getelementptr inbounds %"struct.cc::BeginMainFrameAndCommitState", %"struct.cc::BeginMainFrameAndCommitState"* %0, i64 0, i32 1
  %4 = getelementptr inbounds %"struct.cc::BeginMainFrameAndCommitState", %"struct.cc::BeginMainFrameAndCommitState"* %0, i64 0, i32 7
  %5 = bitcast %"class.std::__1::vector.32"* %4 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %5, i8 0, i64 24, i1 false) #5
  %6 = bitcast %"class.std::__1::unique_ptr"* %3 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %6, i8 0, i64 51, i1 false)
  ret void
}

declare void @_ZN3viz14BeginFrameArgsC1Ev(%"struct.viz::BeginFrameArgs"*) unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2cc28BeginMainFrameAndCommitStateD2Ev(%"struct.cc::BeginMainFrameAndCommitState"* nocapture) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"struct.cc::BeginMainFrameAndCommitState", %"struct.cc::BeginMainFrameAndCommitState"* %0, i64 0, i32 7, i32 0, i32 0
  %3 = load i32*, i32** %2, align 8
  %4 = icmp eq i32* %3, null
  br i1 %4, label %10, label %5

5:                                                ; preds = %1
  %6 = ptrtoint i32* %3 to i64
  %7 = getelementptr inbounds %"struct.cc::BeginMainFrameAndCommitState", %"struct.cc::BeginMainFrameAndCommitState"* %0, i64 0, i32 7, i32 0, i32 1
  %8 = bitcast i32** %7 to i64*
  store i64 %6, i64* %8, align 8
  %9 = bitcast i32* %3 to i8*
  tail call void @_ZdlPv(i8* %9) #6
  br label %10

10:                                               ; preds = %1, %5
  %11 = getelementptr inbounds %"struct.cc::BeginMainFrameAndCommitState", %"struct.cc::BeginMainFrameAndCommitState"* %0, i64 0, i32 4, i32 0, i32 0, i32 0
  %12 = load %"class.cc::MutatorEvents"*, %"class.cc::MutatorEvents"** %11, align 8
  store %"class.cc::MutatorEvents"* null, %"class.cc::MutatorEvents"** %11, align 8
  %13 = icmp eq %"class.cc::MutatorEvents"* %12, null
  br i1 %13, label %19, label %14

14:                                               ; preds = %10
  %15 = bitcast %"class.cc::MutatorEvents"* %12 to void (%"class.cc::MutatorEvents"*)***
  %16 = load void (%"class.cc::MutatorEvents"*)**, void (%"class.cc::MutatorEvents"*)*** %15, align 8
  %17 = getelementptr inbounds void (%"class.cc::MutatorEvents"*)*, void (%"class.cc::MutatorEvents"*)** %16, i64 1
  %18 = load void (%"class.cc::MutatorEvents"*)*, void (%"class.cc::MutatorEvents"*)** %17, align 8
  tail call void %18(%"class.cc::MutatorEvents"* nonnull %12) #5
  br label %19

19:                                               ; preds = %10, %14
  %20 = getelementptr inbounds %"struct.cc::BeginMainFrameAndCommitState", %"struct.cc::BeginMainFrameAndCommitState"* %0, i64 0, i32 3, i32 0, i32 0
  %21 = load %"struct.std::__1::pair"*, %"struct.std::__1::pair"** %20, align 8
  %22 = icmp eq %"struct.std::__1::pair"* %21, null
  br i1 %22, label %28, label %23

23:                                               ; preds = %19
  %24 = ptrtoint %"struct.std::__1::pair"* %21 to i64
  %25 = getelementptr inbounds %"struct.cc::BeginMainFrameAndCommitState", %"struct.cc::BeginMainFrameAndCommitState"* %0, i64 0, i32 3, i32 0, i32 1
  %26 = bitcast %"struct.std::__1::pair"** %25 to i64*
  store i64 %24, i64* %26, align 8
  %27 = bitcast %"struct.std::__1::pair"* %21 to i8*
  tail call void @_ZdlPv(i8* %27) #6
  br label %28

28:                                               ; preds = %19, %23
  %29 = getelementptr inbounds %"struct.cc::BeginMainFrameAndCommitState", %"struct.cc::BeginMainFrameAndCommitState"* %0, i64 0, i32 1, i32 0, i32 0, i32 0
  %30 = load %"struct.cc::CompositorCommitData"*, %"struct.cc::CompositorCommitData"** %29, align 8
  store %"struct.cc::CompositorCommitData"* null, %"struct.cc::CompositorCommitData"** %29, align 8
  %31 = icmp eq %"struct.cc::CompositorCommitData"* %30, null
  br i1 %31, label %34, label %32

32:                                               ; preds = %28
  tail call void @_ZN2cc20CompositorCommitDataD1Ev(%"struct.cc::CompositorCommitData"* nonnull %30) #5
  %33 = bitcast %"struct.cc::CompositorCommitData"* %30 to i8*
  tail call void @_ZdlPv(i8* %33) #6
  br label %34

34:                                               ; preds = %28, %32
  ret void
}

; Function Attrs: nounwind
declare void @_ZN2cc20CompositorCommitDataD1Ev(%"struct.cc::CompositorCommitData"*) unnamed_addr #2

; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(i8*) local_unnamed_addr #3

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #4

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { argmemonly nounwind }
attributes #5 = { nounwind }
attributes #6 = { builtin nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
