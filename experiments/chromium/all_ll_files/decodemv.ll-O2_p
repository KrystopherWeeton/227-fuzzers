; ModuleID = '../../third_party/libvpx/source/libvpx/vp8/decoder/decodemv.c'
source_filename = "../../third_party/libvpx/source/libvpx/vp8/decoder/decodemv.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.mv_context = type { [19 x i8] }
%struct.VP8D_COMP = type { %struct.macroblockd, [4 x %struct.yv12_buffer_config*], %struct.VP8Common, [9 x %struct.BOOL_DECODER], %struct.VP8D_CONFIG, %struct.FRAGMENT_DATA, %struct.vpx_atomic_int, i32, i32, i32, i32, [4 x i32], i32, %struct.vpx_atomic_int*, i8**, i8**, i8**, i8**, i8**, i8**, %struct.MB_ROW_DEC*, %struct.DECODETHREAD_DATA*, i64*, %union.sem_t*, %union.sem_t, i64, i32, i8, i8, i8, i8, i32, i32, i32, i32, i32, void (i8*, i8*, i8*, i32)*, i8*, i32 }
%struct.macroblockd = type { [384 x i8], [400 x i16], [400 x i16], [25 x i8], [7 x i8], [16 x i16], [16 x i16], [16 x i16], [16 x i16], [25 x %struct.blockd], i32, %struct.yv12_buffer_config, %struct.yv12_buffer_config, %struct.modeinfo*, i32, i32, i32, i32, [3 x i8*], [3 x i8*], [2 x i32], %struct.ENTROPY_CONTEXT_PLANES*, %struct.ENTROPY_CONTEXT_PLANES*, i8, i8, i8, i8, [3 x i8], [2 x [4 x i8]], i8, i8, [4 x i8], [4 x i8], [4 x i8], [4 x i8], i32, i32, i32, i32, void (i8*, i32, i32, i32, i8*, i32)*, void (i8*, i32, i32, i32, i8*, i32)*, void (i8*, i32, i32, i32, i8*, i32)*, void (i8*, i32, i32, i32, i8*, i32)*, i8*, i32, %struct.vpx_internal_error_info, [16 x i8], [704 x i8] }
%struct.blockd = type { i16*, i16*, i8*, i16*, i32, i8*, %union.b_mode_info }
%union.b_mode_info = type { i32 }
%struct.yv12_buffer_config = type { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i8*, i8*, i8*, i8*, i8*, i64, i32, i64, i32, i32, i32, i32, i32, i32, i32, i32, i32 }
%struct.modeinfo = type { %struct.MB_MODE_INFO, [16 x %union.b_mode_info] }
%struct.MB_MODE_INFO = type { i8, i8, i8, i8, %union.int_mv, i8, i8, i8, i8 }
%union.int_mv = type { i32 }
%struct.ENTROPY_CONTEXT_PLANES = type { [4 x i8], [2 x i8], [2 x i8], i8 }
%struct.vpx_internal_error_info = type { i32, i32, [80 x i8], i32, [1 x %struct.__jmp_buf_tag] }
%struct.__jmp_buf_tag = type { [8 x i64], i32, %struct.__sigset_t }
%struct.__sigset_t = type { [16 x i64] }
%struct.VP8Common = type { %struct.vpx_internal_error_info, [8 x i8], [128 x [2 x i16]], [128 x [2 x i16]], [128 x [2 x i16]], i32, i32, i32, i32, i32, %struct.yv12_buffer_config*, [4 x %struct.yv12_buffer_config], [4 x i32], i32, i32, i32, i32, %struct.yv12_buffer_config, %struct.yv12_buffer_config, %struct.yv12_buffer_config, i32, i8*, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, %struct.modeinfo*, %struct.modeinfo*, %struct.modeinfo*, i32, [12 x i8], %struct.loop_filter_info_n, i32, i32, i32, i32, i32, i32, i32, i32, i32, [4 x i32], %struct.ENTROPY_CONTEXT_PLANES*, %struct.ENTROPY_CONTEXT_PLANES, %struct.frame_contexts, %struct.frame_contexts, i32, i32, i32, i32, %struct.postproc_state, i32, [12 x i8] }
%struct.loop_filter_info_n = type { [64 x [16 x i8]], [64 x [16 x i8]], [64 x [16 x i8]], [4 x [16 x i8]], [4 x [4 x [4 x i8]]], [2 x [64 x i8]], [10 x i8], [6 x i8] }
%struct.frame_contexts = type { [9 x i8], [4 x i8], [3 x i8], [3 x i8], [4 x [8 x [3 x [11 x i8]]]], [2 x %struct.mv_context] }
%struct.postproc_state = type { i32, i32, i32, i32, i32, i8* }
%struct.BOOL_DECODER = type { i8*, i8*, i64, i32, i32, void (i8*, i8*, i8*, i32)*, i8* }
%struct.VP8D_CONFIG = type { i32, i32, i32, i32, i32, i32 }
%struct.FRAGMENT_DATA = type { i32, i32, [9 x i8*], [9 x i32] }
%struct.vpx_atomic_int = type { i32 }
%struct.MB_ROW_DEC = type { %struct.macroblockd }
%struct.DECODETHREAD_DATA = type { i32, i8*, i8* }
%union.sem_t = type { i64, [24 x i8] }
%struct.MV = type { i16, i16 }

@vp8_sub_mv_ref_prob3 = hidden local_unnamed_addr constant [8 x [3 x i8]] [[3 x i8] c"\93\88\12", [3 x i8] c"\DF\01\22", [3 x i8] c"j\91\01", [3 x i8] c"\D0\01\01", [3 x i8] c"\B3y\01", [3 x i8] c"\DF\01\22", [3 x i8] c"\B3y\01", [3 x i8] c"\D0\01\01"], align 16
@vp8_norm = external local_unnamed_addr constant [256 x i8], align 16
@vp8_mv_update_probs = external local_unnamed_addr constant [2 x %struct.mv_context], align 16
@vp8_kf_ymode_prob = external local_unnamed_addr constant [4 x i8], align 1
@vp8_kf_bmode_prob = external local_unnamed_addr constant [10 x [10 x [9 x i8]]], align 16
@vp8_kf_uv_mode_prob = external local_unnamed_addr constant [3 x i8], align 1
@vp8_kf_ymode_tree = external local_unnamed_addr constant [0 x i8], align 1
@vp8_bmode_tree = external local_unnamed_addr constant [0 x i8], align 1
@vp8_uv_mode_tree = external local_unnamed_addr constant [0 x i8], align 1
@vp8_mode_contexts = external local_unnamed_addr constant [6 x [4 x i32]], align 16
@vp8_mbsplit_offset = external local_unnamed_addr constant [4 x [16 x i8]], align 16
@mbsplit_fill_count = internal unnamed_addr constant [4 x i8] c"\08\08\04\01", align 1
@mbsplit_fill_offset = internal unnamed_addr constant [4 x [16 x i8]] [[16 x i8] c"\00\01\02\03\04\05\06\07\08\09\0A\0B\0C\0D\0E\0F", [16 x i8] c"\00\01\04\05\08\09\0C\0D\02\03\06\07\0A\0B\0E\0F", [16 x i8] c"\00\01\04\05\02\03\06\07\08\09\0C\0D\0A\0B\0E\0F", [16 x i8] c"\00\01\02\03\04\05\06\07\08\09\0A\0B\0C\0D\0E\0F"], align 16
@vp8_small_mvtree = external local_unnamed_addr constant [0 x i8], align 1
@vp8_ymode_tree = external local_unnamed_addr constant [0 x i8], align 1

; Function Attrs: nounwind ssp uwtable
define hidden void @vp8_decode_mode_mvs(%struct.VP8D_COMP*) local_unnamed_addr #0 {
  %2 = alloca [4 x i32], align 16
  %3 = alloca [4 x %union.int_mv], align 16
  %4 = getelementptr inbounds %struct.VP8D_COMP, %struct.VP8D_COMP* %0, i64 0, i32 2, i32 41
  %5 = load %struct.modeinfo*, %struct.modeinfo** %4, align 16
  %6 = getelementptr inbounds %struct.VP8D_COMP, %struct.VP8D_COMP* %0, i64 0, i32 3, i64 8
  %7 = getelementptr inbounds %struct.VP8D_COMP, %struct.VP8D_COMP* %0, i64 0, i32 3, i64 8, i32 4
  %8 = load i32, i32* %7, align 4
  %9 = shl i32 %8, 7
  %10 = add i32 %9, -128
  %11 = lshr i32 %10, 8
  %12 = add nuw nsw i32 %11, 1
  %13 = getelementptr inbounds %struct.VP8D_COMP, %struct.VP8D_COMP* %0, i64 0, i32 3, i64 8, i32 3
  %14 = load i32, i32* %13, align 8
  %15 = icmp slt i32 %14, 0
  br i1 %15, label %16, label %18

16:                                               ; preds = %1
  tail call void @vp8dx_bool_decoder_fill(%struct.BOOL_DECODER* %6) #3
  %17 = load i32, i32* %13, align 8
  br label %18

18:                                               ; preds = %16, %1
  %19 = phi i32 [ %17, %16 ], [ %14, %1 ]
  %20 = getelementptr inbounds %struct.VP8D_COMP, %struct.VP8D_COMP* %0, i64 0, i32 3, i64 8, i32 2
  %21 = load i64, i64* %20, align 8
  %22 = zext i32 %12 to i64
  %23 = shl i64 %22, 56
  %24 = icmp ult i64 %21, %23
  br i1 %24, label %29, label %25

25:                                               ; preds = %18
  %26 = load i32, i32* %7, align 4
  %27 = sub i32 %26, %12
  %28 = sub i64 %21, %23
  br label %29

29:                                               ; preds = %25, %18
  %30 = phi i64 [ %28, %25 ], [ %21, %18 ]
  %31 = phi i32 [ %27, %25 ], [ %12, %18 ]
  %32 = phi i32 [ 1, %25 ], [ 0, %18 ]
  %33 = and i32 %31, 255
  %34 = zext i32 %33 to i64
  %35 = getelementptr inbounds [256 x i8], [256 x i8]* @vp8_norm, i64 0, i64 %34
  %36 = load i8, i8* %35, align 1
  %37 = zext i8 %36 to i32
  %38 = shl i32 %31, %37
  %39 = zext i8 %36 to i64
  %40 = shl i64 %30, %39
  %41 = sub nsw i32 %19, %37
  store i64 %40, i64* %20, align 8
  store i32 %41, i32* %13, align 8
  store i32 %38, i32* %7, align 4
  %42 = getelementptr inbounds %struct.VP8D_COMP, %struct.VP8D_COMP* %0, i64 0, i32 2, i32 30
  store i32 %32, i32* %42, align 32
  %43 = getelementptr inbounds %struct.VP8D_COMP, %struct.VP8D_COMP* %0, i64 0, i32 30
  store i8 0, i8* %43, align 1
  %44 = icmp eq i32 %32, 0
  br i1 %44, label %88, label %45

45:                                               ; preds = %29, %70
  %46 = phi i64 [ %81, %70 ], [ %40, %29 ]
  %47 = phi i32 [ %82, %70 ], [ %41, %29 ]
  %48 = phi i32 [ %79, %70 ], [ %38, %29 ]
  %49 = phi i32 [ %51, %70 ], [ 8, %29 ]
  %50 = phi i32 [ %84, %70 ], [ 0, %29 ]
  %51 = add nsw i32 %49, -1
  %52 = shl i32 %48, 7
  %53 = add i32 %52, -128
  %54 = lshr i32 %53, 8
  %55 = add nuw nsw i32 %54, 1
  %56 = icmp slt i32 %47, 0
  br i1 %56, label %57, label %60

57:                                               ; preds = %45
  tail call void @vp8dx_bool_decoder_fill(%struct.BOOL_DECODER* %6) #3
  %58 = load i32, i32* %13, align 8
  %59 = load i64, i64* %20, align 8
  br label %60

60:                                               ; preds = %57, %45
  %61 = phi i64 [ %59, %57 ], [ %46, %45 ]
  %62 = phi i32 [ %58, %57 ], [ %47, %45 ]
  %63 = zext i32 %55 to i64
  %64 = shl i64 %63, 56
  %65 = icmp ult i64 %61, %64
  br i1 %65, label %70, label %66

66:                                               ; preds = %60
  %67 = load i32, i32* %7, align 4
  %68 = sub i32 %67, %55
  %69 = sub i64 %61, %64
  br label %70

70:                                               ; preds = %66, %60
  %71 = phi i64 [ %69, %66 ], [ %61, %60 ]
  %72 = phi i32 [ %68, %66 ], [ %55, %60 ]
  %73 = phi i32 [ 1, %66 ], [ 0, %60 ]
  %74 = and i32 %72, 255
  %75 = zext i32 %74 to i64
  %76 = getelementptr inbounds [256 x i8], [256 x i8]* @vp8_norm, i64 0, i64 %75
  %77 = load i8, i8* %76, align 1
  %78 = zext i8 %77 to i32
  %79 = shl i32 %72, %78
  %80 = zext i8 %77 to i64
  %81 = shl i64 %71, %80
  %82 = sub nsw i32 %62, %78
  store i64 %81, i64* %20, align 8
  store i32 %82, i32* %13, align 8
  store i32 %79, i32* %7, align 4
  %83 = shl i32 %73, %51
  %84 = or i32 %83, %50
  %85 = icmp eq i32 %51, 0
  br i1 %85, label %86, label %45

86:                                               ; preds = %70
  %87 = trunc i32 %84 to i8
  store i8 %87, i8* %43, align 1
  br label %88

88:                                               ; preds = %86, %29
  %89 = phi i64 [ %40, %29 ], [ %81, %86 ]
  %90 = phi i32 [ %41, %29 ], [ %82, %86 ]
  %91 = phi i32 [ %38, %29 ], [ %79, %86 ]
  %92 = getelementptr inbounds %struct.VP8D_COMP, %struct.VP8D_COMP* %0, i64 0, i32 2, i32 23
  %93 = load i32, i32* %92, align 4
  %94 = icmp eq i32 %93, 0
  br i1 %94, label %574, label %95

95:                                               ; preds = %88, %120
  %96 = phi i64 [ %131, %120 ], [ %89, %88 ]
  %97 = phi i32 [ %132, %120 ], [ %90, %88 ]
  %98 = phi i32 [ %129, %120 ], [ %91, %88 ]
  %99 = phi i32 [ %101, %120 ], [ 8, %88 ]
  %100 = phi i32 [ %134, %120 ], [ 0, %88 ]
  %101 = add nsw i32 %99, -1
  %102 = shl i32 %98, 7
  %103 = add i32 %102, -128
  %104 = lshr i32 %103, 8
  %105 = add nuw nsw i32 %104, 1
  %106 = icmp slt i32 %97, 0
  br i1 %106, label %107, label %110

107:                                              ; preds = %95
  tail call void @vp8dx_bool_decoder_fill(%struct.BOOL_DECODER* %6) #3
  %108 = load i32, i32* %13, align 8
  %109 = load i64, i64* %20, align 8
  br label %110

110:                                              ; preds = %107, %95
  %111 = phi i64 [ %109, %107 ], [ %96, %95 ]
  %112 = phi i32 [ %108, %107 ], [ %97, %95 ]
  %113 = zext i32 %105 to i64
  %114 = shl i64 %113, 56
  %115 = icmp ult i64 %111, %114
  br i1 %115, label %120, label %116

116:                                              ; preds = %110
  %117 = load i32, i32* %7, align 4
  %118 = sub i32 %117, %105
  %119 = sub i64 %111, %114
  br label %120

120:                                              ; preds = %116, %110
  %121 = phi i64 [ %119, %116 ], [ %111, %110 ]
  %122 = phi i32 [ %118, %116 ], [ %105, %110 ]
  %123 = phi i32 [ 1, %116 ], [ 0, %110 ]
  %124 = and i32 %122, 255
  %125 = zext i32 %124 to i64
  %126 = getelementptr inbounds [256 x i8], [256 x i8]* @vp8_norm, i64 0, i64 %125
  %127 = load i8, i8* %126, align 1
  %128 = zext i8 %127 to i32
  %129 = shl i32 %122, %128
  %130 = zext i8 %127 to i64
  %131 = shl i64 %121, %130
  %132 = sub nsw i32 %112, %128
  store i64 %131, i64* %20, align 8
  store i32 %132, i32* %13, align 8
  store i32 %129, i32* %7, align 4
  %133 = shl i32 %123, %101
  %134 = or i32 %133, %100
  %135 = icmp eq i32 %101, 0
  br i1 %135, label %136, label %95

136:                                              ; preds = %120
  %137 = trunc i32 %134 to i8
  %138 = getelementptr inbounds %struct.VP8D_COMP, %struct.VP8D_COMP* %0, i64 0, i32 27
  store i8 %137, i8* %138, align 4
  br label %139

139:                                              ; preds = %164, %136
  %140 = phi i64 [ %131, %136 ], [ %175, %164 ]
  %141 = phi i32 [ %132, %136 ], [ %176, %164 ]
  %142 = phi i32 [ %129, %136 ], [ %173, %164 ]
  %143 = phi i32 [ 8, %136 ], [ %145, %164 ]
  %144 = phi i32 [ 0, %136 ], [ %178, %164 ]
  %145 = add nsw i32 %143, -1
  %146 = shl i32 %142, 7
  %147 = add i32 %146, -128
  %148 = lshr i32 %147, 8
  %149 = add nuw nsw i32 %148, 1
  %150 = icmp slt i32 %141, 0
  br i1 %150, label %151, label %154

151:                                              ; preds = %139
  tail call void @vp8dx_bool_decoder_fill(%struct.BOOL_DECODER* %6) #3
  %152 = load i32, i32* %13, align 8
  %153 = load i64, i64* %20, align 8
  br label %154

154:                                              ; preds = %151, %139
  %155 = phi i64 [ %153, %151 ], [ %140, %139 ]
  %156 = phi i32 [ %152, %151 ], [ %141, %139 ]
  %157 = zext i32 %149 to i64
  %158 = shl i64 %157, 56
  %159 = icmp ult i64 %155, %158
  br i1 %159, label %164, label %160

160:                                              ; preds = %154
  %161 = load i32, i32* %7, align 4
  %162 = sub i32 %161, %149
  %163 = sub i64 %155, %158
  br label %164

164:                                              ; preds = %160, %154
  %165 = phi i64 [ %163, %160 ], [ %155, %154 ]
  %166 = phi i32 [ %162, %160 ], [ %149, %154 ]
  %167 = phi i32 [ 1, %160 ], [ 0, %154 ]
  %168 = and i32 %166, 255
  %169 = zext i32 %168 to i64
  %170 = getelementptr inbounds [256 x i8], [256 x i8]* @vp8_norm, i64 0, i64 %169
  %171 = load i8, i8* %170, align 1
  %172 = zext i8 %171 to i32
  %173 = shl i32 %166, %172
  %174 = zext i8 %171 to i64
  %175 = shl i64 %165, %174
  %176 = sub nsw i32 %156, %172
  store i64 %175, i64* %20, align 8
  store i32 %176, i32* %13, align 8
  store i32 %173, i32* %7, align 4
  %177 = shl i32 %167, %145
  %178 = or i32 %177, %144
  %179 = icmp eq i32 %145, 0
  br i1 %179, label %180, label %139

180:                                              ; preds = %164
  %181 = trunc i32 %178 to i8
  %182 = getelementptr inbounds %struct.VP8D_COMP, %struct.VP8D_COMP* %0, i64 0, i32 28
  store i8 %181, i8* %182, align 1
  br label %183

183:                                              ; preds = %208, %180
  %184 = phi i64 [ %175, %180 ], [ %219, %208 ]
  %185 = phi i32 [ %176, %180 ], [ %220, %208 ]
  %186 = phi i32 [ %173, %180 ], [ %217, %208 ]
  %187 = phi i32 [ 8, %180 ], [ %189, %208 ]
  %188 = phi i32 [ 0, %180 ], [ %222, %208 ]
  %189 = add nsw i32 %187, -1
  %190 = shl i32 %186, 7
  %191 = add i32 %190, -128
  %192 = lshr i32 %191, 8
  %193 = add nuw nsw i32 %192, 1
  %194 = icmp slt i32 %185, 0
  br i1 %194, label %195, label %198

195:                                              ; preds = %183
  tail call void @vp8dx_bool_decoder_fill(%struct.BOOL_DECODER* %6) #3
  %196 = load i32, i32* %13, align 8
  %197 = load i64, i64* %20, align 8
  br label %198

198:                                              ; preds = %195, %183
  %199 = phi i64 [ %197, %195 ], [ %184, %183 ]
  %200 = phi i32 [ %196, %195 ], [ %185, %183 ]
  %201 = zext i32 %193 to i64
  %202 = shl i64 %201, 56
  %203 = icmp ult i64 %199, %202
  br i1 %203, label %208, label %204

204:                                              ; preds = %198
  %205 = load i32, i32* %7, align 4
  %206 = sub i32 %205, %193
  %207 = sub i64 %199, %202
  br label %208

208:                                              ; preds = %204, %198
  %209 = phi i64 [ %207, %204 ], [ %199, %198 ]
  %210 = phi i32 [ %206, %204 ], [ %193, %198 ]
  %211 = phi i32 [ 1, %204 ], [ 0, %198 ]
  %212 = and i32 %210, 255
  %213 = zext i32 %212 to i64
  %214 = getelementptr inbounds [256 x i8], [256 x i8]* @vp8_norm, i64 0, i64 %213
  %215 = load i8, i8* %214, align 1
  %216 = zext i8 %215 to i32
  %217 = shl i32 %210, %216
  %218 = zext i8 %215 to i64
  %219 = shl i64 %209, %218
  %220 = sub nsw i32 %200, %216
  store i64 %219, i64* %20, align 8
  store i32 %220, i32* %13, align 8
  store i32 %217, i32* %7, align 4
  %221 = shl i32 %211, %189
  %222 = or i32 %221, %188
  %223 = icmp eq i32 %189, 0
  br i1 %223, label %224, label %183

224:                                              ; preds = %208
  %225 = trunc i32 %222 to i8
  %226 = getelementptr inbounds %struct.VP8D_COMP, %struct.VP8D_COMP* %0, i64 0, i32 29
  store i8 %225, i8* %226, align 2
  %227 = shl i32 %217, 7
  %228 = add i32 %227, -128
  %229 = lshr i32 %228, 8
  %230 = add nuw nsw i32 %229, 1
  %231 = icmp slt i32 %220, 0
  br i1 %231, label %232, label %235

232:                                              ; preds = %224
  tail call void @vp8dx_bool_decoder_fill(%struct.BOOL_DECODER* %6) #3
  %233 = load i32, i32* %13, align 8
  %234 = load i64, i64* %20, align 8
  br label %235

235:                                              ; preds = %232, %224
  %236 = phi i64 [ %234, %232 ], [ %219, %224 ]
  %237 = phi i32 [ %233, %232 ], [ %220, %224 ]
  %238 = zext i32 %230 to i64
  %239 = shl i64 %238, 56
  %240 = icmp ult i64 %236, %239
  br i1 %240, label %245, label %241

241:                                              ; preds = %235
  %242 = load i32, i32* %7, align 4
  %243 = sub i32 %242, %230
  %244 = sub i64 %236, %239
  br label %245

245:                                              ; preds = %241, %235
  %246 = phi i64 [ %244, %241 ], [ %236, %235 ]
  %247 = phi i32 [ %243, %241 ], [ %230, %235 ]
  %248 = phi i1 [ false, %241 ], [ true, %235 ]
  %249 = and i32 %247, 255
  %250 = zext i32 %249 to i64
  %251 = getelementptr inbounds [256 x i8], [256 x i8]* @vp8_norm, i64 0, i64 %250
  %252 = load i8, i8* %251, align 1
  %253 = zext i8 %252 to i32
  %254 = shl i32 %247, %253
  %255 = zext i8 %252 to i64
  %256 = shl i64 %246, %255
  %257 = sub nsw i32 %237, %253
  store i64 %256, i64* %20, align 8
  store i32 %257, i32* %13, align 8
  store i32 %254, i32* %7, align 4
  br i1 %248, label %312, label %258

258:                                              ; preds = %245, %306
  %259 = phi i32 [ %308, %306 ], [ %257, %245 ]
  %260 = phi i32 [ %307, %306 ], [ %254, %245 ]
  %261 = phi i64 [ %304, %306 ], [ 0, %245 ]
  br label %262

262:                                              ; preds = %285, %258
  %263 = phi i32 [ %259, %258 ], [ %297, %285 ]
  %264 = phi i32 [ %260, %258 ], [ %294, %285 ]
  %265 = phi i32 [ 8, %258 ], [ %267, %285 ]
  %266 = phi i32 [ 0, %258 ], [ %299, %285 ]
  %267 = add nsw i32 %265, -1
  %268 = shl i32 %264, 7
  %269 = add i32 %268, -128
  %270 = lshr i32 %269, 8
  %271 = add nuw nsw i32 %270, 1
  %272 = icmp slt i32 %263, 0
  br i1 %272, label %273, label %275

273:                                              ; preds = %262
  tail call void @vp8dx_bool_decoder_fill(%struct.BOOL_DECODER* %6) #3
  %274 = load i32, i32* %13, align 8
  br label %275

275:                                              ; preds = %273, %262
  %276 = phi i32 [ %274, %273 ], [ %263, %262 ]
  %277 = load i64, i64* %20, align 8
  %278 = zext i32 %271 to i64
  %279 = shl i64 %278, 56
  %280 = icmp ult i64 %277, %279
  br i1 %280, label %285, label %281

281:                                              ; preds = %275
  %282 = load i32, i32* %7, align 4
  %283 = sub i32 %282, %271
  %284 = sub i64 %277, %279
  br label %285

285:                                              ; preds = %281, %275
  %286 = phi i64 [ %284, %281 ], [ %277, %275 ]
  %287 = phi i32 [ %283, %281 ], [ %271, %275 ]
  %288 = phi i32 [ 1, %281 ], [ 0, %275 ]
  %289 = and i32 %287, 255
  %290 = zext i32 %289 to i64
  %291 = getelementptr inbounds [256 x i8], [256 x i8]* @vp8_norm, i64 0, i64 %290
  %292 = load i8, i8* %291, align 1
  %293 = zext i8 %292 to i32
  %294 = shl i32 %287, %293
  %295 = zext i8 %292 to i64
  %296 = shl i64 %286, %295
  %297 = sub nsw i32 %276, %293
  store i64 %296, i64* %20, align 8
  store i32 %297, i32* %13, align 8
  store i32 %294, i32* %7, align 4
  %298 = shl i32 %288, %267
  %299 = or i32 %298, %266
  %300 = icmp eq i32 %267, 0
  br i1 %300, label %301, label %262

301:                                              ; preds = %285
  %302 = trunc i32 %299 to i8
  %303 = getelementptr inbounds %struct.VP8D_COMP, %struct.VP8D_COMP* %0, i64 0, i32 2, i32 59, i32 1, i64 %261
  store i8 %302, i8* %303, align 1
  %304 = add nuw nsw i64 %261, 1
  %305 = icmp eq i64 %304, 4
  br i1 %305, label %309, label %306

306:                                              ; preds = %301
  %307 = load i32, i32* %7, align 4
  %308 = load i32, i32* %13, align 8
  br label %258

309:                                              ; preds = %301
  %310 = load i32, i32* %13, align 8
  %311 = load i32, i32* %7, align 4
  br label %312

312:                                              ; preds = %309, %245
  %313 = phi i32 [ %311, %309 ], [ %254, %245 ]
  %314 = phi i32 [ %310, %309 ], [ %257, %245 ]
  %315 = shl i32 %313, 7
  %316 = add i32 %315, -128
  %317 = lshr i32 %316, 8
  %318 = add nuw nsw i32 %317, 1
  %319 = icmp slt i32 %314, 0
  br i1 %319, label %320, label %322

320:                                              ; preds = %312
  tail call void @vp8dx_bool_decoder_fill(%struct.BOOL_DECODER* %6) #3
  %321 = load i32, i32* %13, align 8
  br label %322

322:                                              ; preds = %320, %312
  %323 = phi i32 [ %321, %320 ], [ %314, %312 ]
  %324 = load i64, i64* %20, align 8
  %325 = zext i32 %318 to i64
  %326 = shl i64 %325, 56
  %327 = icmp ult i64 %324, %326
  br i1 %327, label %332, label %328

328:                                              ; preds = %322
  %329 = load i32, i32* %7, align 4
  %330 = sub i32 %329, %318
  %331 = sub i64 %324, %326
  br label %332

332:                                              ; preds = %328, %322
  %333 = phi i64 [ %331, %328 ], [ %324, %322 ]
  %334 = phi i32 [ %330, %328 ], [ %318, %322 ]
  %335 = phi i1 [ false, %328 ], [ true, %322 ]
  %336 = and i32 %334, 255
  %337 = zext i32 %336 to i64
  %338 = getelementptr inbounds [256 x i8], [256 x i8]* @vp8_norm, i64 0, i64 %337
  %339 = load i8, i8* %338, align 1
  %340 = zext i8 %339 to i32
  %341 = shl i32 %334, %340
  %342 = zext i8 %339 to i64
  %343 = shl i64 %333, %342
  %344 = sub nsw i32 %323, %340
  store i64 %343, i64* %20, align 8
  store i32 %344, i32* %13, align 8
  store i32 %341, i32* %7, align 4
  br i1 %335, label %345, label %346

345:                                              ; preds = %571, %332
  br label %390

346:                                              ; preds = %332, %371
  %347 = phi i64 [ %382, %371 ], [ %343, %332 ]
  %348 = phi i32 [ %383, %371 ], [ %344, %332 ]
  %349 = phi i32 [ %380, %371 ], [ %341, %332 ]
  %350 = phi i32 [ %352, %371 ], [ 8, %332 ]
  %351 = phi i32 [ %385, %371 ], [ 0, %332 ]
  %352 = add nsw i32 %350, -1
  %353 = shl i32 %349, 7
  %354 = add i32 %353, -128
  %355 = lshr i32 %354, 8
  %356 = add nuw nsw i32 %355, 1
  %357 = icmp slt i32 %348, 0
  br i1 %357, label %358, label %361

358:                                              ; preds = %346
  tail call void @vp8dx_bool_decoder_fill(%struct.BOOL_DECODER* %6) #3
  %359 = load i32, i32* %13, align 8
  %360 = load i64, i64* %20, align 8
  br label %361

361:                                              ; preds = %358, %346
  %362 = phi i64 [ %360, %358 ], [ %347, %346 ]
  %363 = phi i32 [ %359, %358 ], [ %348, %346 ]
  %364 = zext i32 %356 to i64
  %365 = shl i64 %364, 56
  %366 = icmp ult i64 %362, %365
  br i1 %366, label %371, label %367

367:                                              ; preds = %361
  %368 = load i32, i32* %7, align 4
  %369 = sub i32 %368, %356
  %370 = sub i64 %362, %365
  br label %371

371:                                              ; preds = %367, %361
  %372 = phi i64 [ %370, %367 ], [ %362, %361 ]
  %373 = phi i32 [ %369, %367 ], [ %356, %361 ]
  %374 = phi i32 [ 1, %367 ], [ 0, %361 ]
  %375 = and i32 %373, 255
  %376 = zext i32 %375 to i64
  %377 = getelementptr inbounds [256 x i8], [256 x i8]* @vp8_norm, i64 0, i64 %376
  %378 = load i8, i8* %377, align 1
  %379 = zext i8 %378 to i32
  %380 = shl i32 %373, %379
  %381 = zext i8 %378 to i64
  %382 = shl i64 %372, %381
  %383 = sub nsw i32 %363, %379
  store i64 %382, i64* %20, align 8
  store i32 %383, i32* %13, align 8
  store i32 %380, i32* %7, align 4
  %384 = shl i32 %374, %352
  %385 = or i32 %384, %351
  %386 = icmp eq i32 %352, 0
  br i1 %386, label %387, label %346

387:                                              ; preds = %371
  %388 = trunc i32 %385 to i8
  %389 = getelementptr inbounds %struct.VP8D_COMP, %struct.VP8D_COMP* %0, i64 0, i32 2, i32 59, i32 2, i64 0
  store i8 %388, i8* %389, align 1
  br label %486

390:                                              ; preds = %345, %483
  %391 = phi i64 [ %484, %483 ], [ 0, %345 ]
  %392 = getelementptr inbounds [2 x %struct.mv_context], [2 x %struct.mv_context]* @vp8_mv_update_probs, i64 0, i64 %391, i32 0, i64 0
  %393 = getelementptr inbounds %struct.VP8D_COMP, %struct.VP8D_COMP* %0, i64 0, i32 2, i32 59, i32 5, i64 %391, i32 0, i64 0
  %394 = getelementptr inbounds %struct.VP8D_COMP, %struct.VP8D_COMP* %0, i64 0, i32 2, i32 59, i32 5, i64 %391, i32 0, i64 19
  br label %395

395:                                              ; preds = %480, %390
  %396 = phi i8* [ %392, %390 ], [ %398, %480 ]
  %397 = phi i8* [ %393, %390 ], [ %481, %480 ]
  %398 = getelementptr inbounds i8, i8* %396, i64 1
  %399 = load i8, i8* %396, align 1
  %400 = zext i8 %399 to i32
  %401 = load i32, i32* %7, align 4
  %402 = add i32 %401, -1
  %403 = mul i32 %402, %400
  %404 = lshr i32 %403, 8
  %405 = add nuw nsw i32 %404, 1
  %406 = load i32, i32* %13, align 8
  %407 = icmp slt i32 %406, 0
  br i1 %407, label %408, label %410

408:                                              ; preds = %395
  tail call void @vp8dx_bool_decoder_fill(%struct.BOOL_DECODER* %6) #3
  %409 = load i32, i32* %13, align 8
  br label %410

410:                                              ; preds = %408, %395
  %411 = phi i32 [ %409, %408 ], [ %406, %395 ]
  %412 = load i64, i64* %20, align 8
  %413 = zext i32 %405 to i64
  %414 = shl i64 %413, 56
  %415 = icmp ult i64 %412, %414
  br i1 %415, label %420, label %416

416:                                              ; preds = %410
  %417 = load i32, i32* %7, align 4
  %418 = sub i32 %417, %405
  %419 = sub i64 %412, %414
  br label %420

420:                                              ; preds = %416, %410
  %421 = phi i64 [ %419, %416 ], [ %412, %410 ]
  %422 = phi i32 [ %418, %416 ], [ %405, %410 ]
  %423 = phi i1 [ false, %416 ], [ true, %410 ]
  %424 = and i32 %422, 255
  %425 = zext i32 %424 to i64
  %426 = getelementptr inbounds [256 x i8], [256 x i8]* @vp8_norm, i64 0, i64 %425
  %427 = load i8, i8* %426, align 1
  %428 = zext i8 %427 to i32
  %429 = shl i32 %422, %428
  %430 = zext i8 %427 to i64
  %431 = shl i64 %421, %430
  %432 = sub nsw i32 %411, %428
  store i64 %431, i64* %20, align 8
  store i32 %432, i32* %13, align 8
  store i32 %429, i32* %7, align 4
  br i1 %423, label %480, label %433

433:                                              ; preds = %420, %458
  %434 = phi i64 [ %469, %458 ], [ %431, %420 ]
  %435 = phi i32 [ %470, %458 ], [ %432, %420 ]
  %436 = phi i32 [ %467, %458 ], [ %429, %420 ]
  %437 = phi i32 [ %439, %458 ], [ 7, %420 ]
  %438 = phi i32 [ %472, %458 ], [ 0, %420 ]
  %439 = add nsw i32 %437, -1
  %440 = shl i32 %436, 7
  %441 = add i32 %440, -128
  %442 = lshr i32 %441, 8
  %443 = add nuw nsw i32 %442, 1
  %444 = icmp slt i32 %435, 0
  br i1 %444, label %445, label %448

445:                                              ; preds = %433
  tail call void @vp8dx_bool_decoder_fill(%struct.BOOL_DECODER* %6) #3
  %446 = load i32, i32* %13, align 8
  %447 = load i64, i64* %20, align 8
  br label %448

448:                                              ; preds = %445, %433
  %449 = phi i64 [ %447, %445 ], [ %434, %433 ]
  %450 = phi i32 [ %446, %445 ], [ %435, %433 ]
  %451 = zext i32 %443 to i64
  %452 = shl i64 %451, 56
  %453 = icmp ult i64 %449, %452
  br i1 %453, label %458, label %454

454:                                              ; preds = %448
  %455 = load i32, i32* %7, align 4
  %456 = sub i32 %455, %443
  %457 = sub i64 %449, %452
  br label %458

458:                                              ; preds = %454, %448
  %459 = phi i64 [ %457, %454 ], [ %449, %448 ]
  %460 = phi i32 [ %456, %454 ], [ %443, %448 ]
  %461 = phi i32 [ 1, %454 ], [ 0, %448 ]
  %462 = and i32 %460, 255
  %463 = zext i32 %462 to i64
  %464 = getelementptr inbounds [256 x i8], [256 x i8]* @vp8_norm, i64 0, i64 %463
  %465 = load i8, i8* %464, align 1
  %466 = zext i8 %465 to i32
  %467 = shl i32 %460, %466
  %468 = zext i8 %465 to i64
  %469 = shl i64 %459, %468
  %470 = sub nsw i32 %450, %466
  store i64 %469, i64* %20, align 8
  store i32 %470, i32* %13, align 8
  store i32 %467, i32* %7, align 4
  %471 = shl i32 %461, %439
  %472 = or i32 %471, %438
  %473 = icmp eq i32 %439, 0
  br i1 %473, label %474, label %433

474:                                              ; preds = %458
  %475 = and i32 %472, 255
  %476 = icmp eq i32 %475, 0
  %477 = shl nuw nsw i32 %475, 1
  %478 = select i1 %476, i32 1, i32 %477
  %479 = trunc i32 %478 to i8
  store i8 %479, i8* %397, align 1
  br label %480

480:                                              ; preds = %474, %420
  %481 = getelementptr inbounds i8, i8* %397, i64 1
  %482 = icmp ult i8* %481, %394
  br i1 %482, label %395, label %483

483:                                              ; preds = %480
  %484 = add nuw nsw i64 %391, 1
  %485 = icmp eq i64 %484, 2
  br i1 %485, label %574, label %390

486:                                              ; preds = %511, %387
  %487 = phi i64 [ %382, %387 ], [ %522, %511 ]
  %488 = phi i32 [ %383, %387 ], [ %523, %511 ]
  %489 = phi i32 [ %380, %387 ], [ %520, %511 ]
  %490 = phi i32 [ 8, %387 ], [ %492, %511 ]
  %491 = phi i32 [ 0, %387 ], [ %525, %511 ]
  %492 = add nsw i32 %490, -1
  %493 = shl i32 %489, 7
  %494 = add i32 %493, -128
  %495 = lshr i32 %494, 8
  %496 = add nuw nsw i32 %495, 1
  %497 = icmp slt i32 %488, 0
  br i1 %497, label %498, label %501

498:                                              ; preds = %486
  tail call void @vp8dx_bool_decoder_fill(%struct.BOOL_DECODER* %6) #3
  %499 = load i32, i32* %13, align 8
  %500 = load i64, i64* %20, align 8
  br label %501

501:                                              ; preds = %498, %486
  %502 = phi i64 [ %500, %498 ], [ %487, %486 ]
  %503 = phi i32 [ %499, %498 ], [ %488, %486 ]
  %504 = zext i32 %496 to i64
  %505 = shl i64 %504, 56
  %506 = icmp ult i64 %502, %505
  br i1 %506, label %511, label %507

507:                                              ; preds = %501
  %508 = load i32, i32* %7, align 4
  %509 = sub i32 %508, %496
  %510 = sub i64 %502, %505
  br label %511

511:                                              ; preds = %507, %501
  %512 = phi i64 [ %510, %507 ], [ %502, %501 ]
  %513 = phi i32 [ %509, %507 ], [ %496, %501 ]
  %514 = phi i32 [ 1, %507 ], [ 0, %501 ]
  %515 = and i32 %513, 255
  %516 = zext i32 %515 to i64
  %517 = getelementptr inbounds [256 x i8], [256 x i8]* @vp8_norm, i64 0, i64 %516
  %518 = load i8, i8* %517, align 1
  %519 = zext i8 %518 to i32
  %520 = shl i32 %513, %519
  %521 = zext i8 %518 to i64
  %522 = shl i64 %512, %521
  %523 = sub nsw i32 %503, %519
  store i64 %522, i64* %20, align 8
  store i32 %523, i32* %13, align 8
  store i32 %520, i32* %7, align 4
  %524 = shl i32 %514, %492
  %525 = or i32 %524, %491
  %526 = icmp eq i32 %492, 0
  br i1 %526, label %527, label %486

527:                                              ; preds = %511
  %528 = trunc i32 %525 to i8
  %529 = getelementptr inbounds %struct.VP8D_COMP, %struct.VP8D_COMP* %0, i64 0, i32 2, i32 59, i32 2, i64 1
  store i8 %528, i8* %529, align 1
  br label %530

530:                                              ; preds = %555, %527
  %531 = phi i64 [ %522, %527 ], [ %566, %555 ]
  %532 = phi i32 [ %523, %527 ], [ %567, %555 ]
  %533 = phi i32 [ %520, %527 ], [ %564, %555 ]
  %534 = phi i32 [ 8, %527 ], [ %536, %555 ]
  %535 = phi i32 [ 0, %527 ], [ %569, %555 ]
  %536 = add nsw i32 %534, -1
  %537 = shl i32 %533, 7
  %538 = add i32 %537, -128
  %539 = lshr i32 %538, 8
  %540 = add nuw nsw i32 %539, 1
  %541 = icmp slt i32 %532, 0
  br i1 %541, label %542, label %545

542:                                              ; preds = %530
  tail call void @vp8dx_bool_decoder_fill(%struct.BOOL_DECODER* %6) #3
  %543 = load i32, i32* %13, align 8
  %544 = load i64, i64* %20, align 8
  br label %545

545:                                              ; preds = %542, %530
  %546 = phi i64 [ %544, %542 ], [ %531, %530 ]
  %547 = phi i32 [ %543, %542 ], [ %532, %530 ]
  %548 = zext i32 %540 to i64
  %549 = shl i64 %548, 56
  %550 = icmp ult i64 %546, %549
  br i1 %550, label %555, label %551

551:                                              ; preds = %545
  %552 = load i32, i32* %7, align 4
  %553 = sub i32 %552, %540
  %554 = sub i64 %546, %549
  br label %555

555:                                              ; preds = %551, %545
  %556 = phi i64 [ %554, %551 ], [ %546, %545 ]
  %557 = phi i32 [ %553, %551 ], [ %540, %545 ]
  %558 = phi i32 [ 1, %551 ], [ 0, %545 ]
  %559 = and i32 %557, 255
  %560 = zext i32 %559 to i64
  %561 = getelementptr inbounds [256 x i8], [256 x i8]* @vp8_norm, i64 0, i64 %560
  %562 = load i8, i8* %561, align 1
  %563 = zext i8 %562 to i32
  %564 = shl i32 %557, %563
  %565 = zext i8 %562 to i64
  %566 = shl i64 %556, %565
  %567 = sub nsw i32 %547, %563
  store i64 %566, i64* %20, align 8
  store i32 %567, i32* %13, align 8
  store i32 %564, i32* %7, align 4
  %568 = shl i32 %558, %536
  %569 = or i32 %568, %535
  %570 = icmp eq i32 %536, 0
  br i1 %570, label %571, label %530

571:                                              ; preds = %555
  %572 = trunc i32 %569 to i8
  %573 = getelementptr inbounds %struct.VP8D_COMP, %struct.VP8D_COMP* %0, i64 0, i32 2, i32 59, i32 2, i64 2
  store i8 %572, i8* %573, align 1
  br label %345

574:                                              ; preds = %483, %88
  %575 = getelementptr inbounds %struct.VP8D_COMP, %struct.VP8D_COMP* %0, i64 0, i32 0, i32 37
  store i32 0, i32* %575, align 4
  %576 = getelementptr inbounds %struct.VP8D_COMP, %struct.VP8D_COMP* %0, i64 0, i32 2, i32 27
  %577 = load i32, i32* %576, align 4
  %578 = shl i32 %577, 7
  %579 = add i32 %578, -128
  %580 = getelementptr inbounds %struct.VP8D_COMP, %struct.VP8D_COMP* %0, i64 0, i32 0, i32 38
  store i32 %579, i32* %580, align 16
  %581 = getelementptr inbounds %struct.VP8D_COMP, %struct.VP8D_COMP* %0, i64 0, i32 2, i32 28
  %582 = load i32, i32* %581, align 8
  %583 = shl i32 %582, 7
  %584 = add i32 %583, -128
  %585 = icmp sgt i32 %577, 0
  br i1 %585, label %586, label %2061

586:                                              ; preds = %574
  %587 = getelementptr inbounds %struct.VP8D_COMP, %struct.VP8D_COMP* %0, i64 0, i32 0, i32 35
  %588 = getelementptr inbounds %struct.VP8D_COMP, %struct.VP8D_COMP* %0, i64 0, i32 0, i32 36
  %589 = getelementptr inbounds %struct.VP8D_COMP, %struct.VP8D_COMP* %0, i64 0, i32 0, i32 24
  %590 = getelementptr inbounds %struct.VP8D_COMP, %struct.VP8D_COMP* %0, i64 0, i32 0, i32 23
  %591 = getelementptr inbounds %struct.VP8D_COMP, %struct.VP8D_COMP* %0, i64 0, i32 0, i32 27, i64 0
  %592 = getelementptr inbounds %struct.VP8D_COMP, %struct.VP8D_COMP* %0, i64 0, i32 0, i32 27, i64 2
  %593 = getelementptr inbounds %struct.VP8D_COMP, %struct.VP8D_COMP* %0, i64 0, i32 0, i32 27, i64 1
  %594 = getelementptr inbounds %struct.VP8D_COMP, %struct.VP8D_COMP* %0, i64 0, i32 27
  %595 = bitcast [4 x i32]* %2 to i8*
  %596 = getelementptr inbounds [4 x i32], [4 x i32]* %2, i64 0, i64 0
  %597 = getelementptr inbounds [4 x i32], [4 x i32]* %2, i64 0, i64 1
  %598 = getelementptr inbounds [4 x i32], [4 x i32]* %2, i64 0, i64 2
  %599 = getelementptr inbounds [4 x i32], [4 x i32]* %2, i64 0, i64 3
  %600 = bitcast [4 x %union.int_mv]* %3 to i8*
  %601 = getelementptr inbounds [4 x %union.int_mv], [4 x %union.int_mv]* %3, i64 0, i64 0
  %602 = getelementptr inbounds [4 x %union.int_mv], [4 x %union.int_mv]* %3, i64 0, i64 0, i32 0
  %603 = getelementptr inbounds [4 x %union.int_mv], [4 x %union.int_mv]* %3, i64 0, i64 1
  %604 = getelementptr inbounds %union.int_mv, %union.int_mv* %603, i64 0, i32 0
  %605 = getelementptr inbounds [4 x %union.int_mv], [4 x %union.int_mv]* %3, i64 0, i64 2, i32 0
  %606 = getelementptr inbounds %struct.VP8D_COMP, %struct.VP8D_COMP* %0, i64 0, i32 0, i32 14
  %607 = getelementptr inbounds %struct.VP8D_COMP, %struct.VP8D_COMP* %0, i64 0, i32 28
  %608 = getelementptr inbounds %struct.VP8D_COMP, %struct.VP8D_COMP* %0, i64 0, i32 29
  %609 = getelementptr inbounds [4 x %union.int_mv], [4 x %union.int_mv]* %3, i64 0, i64 1, i32 0
  %610 = bitcast %union.int_mv* %603 to %struct.MV*
  %611 = bitcast %union.int_mv* %603 to i16*
  %612 = getelementptr inbounds %struct.MV, %struct.MV* %610, i64 0, i32 1
  %613 = getelementptr inbounds %struct.VP8D_COMP, %struct.VP8D_COMP* %0, i64 0, i32 2, i32 59, i32 5, i64 0
  %614 = getelementptr inbounds %struct.VP8D_COMP, %struct.VP8D_COMP* %0, i64 0, i32 2, i32 59, i32 5, i64 1
  %615 = getelementptr inbounds %struct.VP8D_COMP, %struct.VP8D_COMP* %0, i64 0, i32 2, i32 29
  br label %616

616:                                              ; preds = %586, %2050
  %617 = phi i32 [ %577, %586 ], [ %2051, %2050 ]
  %618 = phi i32 [ %579, %586 ], [ %2057, %2050 ]
  %619 = phi i32 [ 0, %586 ], [ %2056, %2050 ]
  %620 = phi i32 [ %582, %586 ], [ %2054, %2050 ]
  %621 = phi i32 [ 0, %586 ], [ %2059, %2050 ]
  %622 = phi %struct.modeinfo* [ %5, %586 ], [ %2058, %2050 ]
  store i32 0, i32* %587, align 4
  store i32 %584, i32* %588, align 8
  %623 = icmp sgt i32 %620, 0
  br i1 %623, label %624, label %2050

624:                                              ; preds = %616, %2037
  %625 = phi i32 [ %2043, %2037 ], [ 0, %616 ]
  %626 = phi %struct.modeinfo* [ %2042, %2037 ], [ %622, %616 ]
  %627 = load i8, i8* %589, align 1
  %628 = icmp eq i8 %627, 0
  br i1 %628, label %737, label %629

629:                                              ; preds = %624
  %630 = load i8, i8* %590, align 32
  %631 = icmp eq i8 %630, 0
  br i1 %631, label %742, label %632

632:                                              ; preds = %629
  %633 = load i8, i8* %591, align 4
  %634 = zext i8 %633 to i32
  %635 = load i32, i32* %7, align 4
  %636 = add i32 %635, -1
  %637 = mul i32 %636, %634
  %638 = lshr i32 %637, 8
  %639 = add nuw nsw i32 %638, 1
  %640 = load i32, i32* %13, align 8
  %641 = icmp slt i32 %640, 0
  br i1 %641, label %642, label %644

642:                                              ; preds = %632
  tail call void @vp8dx_bool_decoder_fill(%struct.BOOL_DECODER* %6) #3
  %643 = load i32, i32* %13, align 8
  br label %644

644:                                              ; preds = %642, %632
  %645 = phi i32 [ %643, %642 ], [ %640, %632 ]
  %646 = load i64, i64* %20, align 8
  %647 = zext i32 %639 to i64
  %648 = shl i64 %647, 56
  %649 = icmp ult i64 %646, %648
  br i1 %649, label %654, label %650

650:                                              ; preds = %644
  %651 = load i32, i32* %7, align 4
  %652 = sub i32 %651, %639
  %653 = sub i64 %646, %648
  br label %654

654:                                              ; preds = %650, %644
  %655 = phi i64 [ %653, %650 ], [ %646, %644 ]
  %656 = phi i32 [ %652, %650 ], [ %639, %644 ]
  %657 = phi i1 [ false, %650 ], [ true, %644 ]
  %658 = and i32 %656, 255
  %659 = zext i32 %658 to i64
  %660 = getelementptr inbounds [256 x i8], [256 x i8]* @vp8_norm, i64 0, i64 %659
  %661 = load i8, i8* %660, align 1
  %662 = zext i8 %661 to i32
  %663 = shl i32 %656, %662
  %664 = zext i8 %661 to i64
  %665 = shl i64 %655, %664
  %666 = sub nsw i32 %645, %662
  store i64 %665, i64* %20, align 8
  store i32 %666, i32* %13, align 8
  store i32 %663, i32* %7, align 4
  br i1 %657, label %702, label %667

667:                                              ; preds = %654
  %668 = load i8, i8* %592, align 2
  %669 = zext i8 %668 to i32
  %670 = add i32 %663, -1
  %671 = mul i32 %670, %669
  %672 = lshr i32 %671, 8
  %673 = add nuw nsw i32 %672, 1
  %674 = icmp slt i32 %666, 0
  br i1 %674, label %675, label %678

675:                                              ; preds = %667
  tail call void @vp8dx_bool_decoder_fill(%struct.BOOL_DECODER* %6) #3
  %676 = load i32, i32* %13, align 8
  %677 = load i64, i64* %20, align 8
  br label %678

678:                                              ; preds = %675, %667
  %679 = phi i64 [ %677, %675 ], [ %665, %667 ]
  %680 = phi i32 [ %676, %675 ], [ %666, %667 ]
  %681 = zext i32 %673 to i64
  %682 = shl i64 %681, 56
  %683 = icmp ult i64 %679, %682
  br i1 %683, label %688, label %684

684:                                              ; preds = %678
  %685 = load i32, i32* %7, align 4
  %686 = sub i32 %685, %673
  %687 = sub i64 %679, %682
  br label %688

688:                                              ; preds = %684, %678
  %689 = phi i64 [ %687, %684 ], [ %679, %678 ]
  %690 = phi i32 [ %686, %684 ], [ %673, %678 ]
  %691 = phi i8 [ 3, %684 ], [ 2, %678 ]
  %692 = and i32 %690, 255
  %693 = zext i32 %692 to i64
  %694 = getelementptr inbounds [256 x i8], [256 x i8]* @vp8_norm, i64 0, i64 %693
  %695 = load i8, i8* %694, align 1
  %696 = zext i8 %695 to i32
  %697 = shl i32 %690, %696
  %698 = zext i8 %695 to i64
  %699 = shl i64 %689, %698
  %700 = sub nsw i32 %680, %696
  store i64 %699, i64* %20, align 8
  store i32 %700, i32* %13, align 8
  store i32 %697, i32* %7, align 4
  %701 = getelementptr inbounds %struct.modeinfo, %struct.modeinfo* %626, i64 0, i32 0, i32 8
  store i8 %691, i8* %701, align 1
  br label %742

702:                                              ; preds = %654
  %703 = load i8, i8* %593, align 1
  %704 = zext i8 %703 to i32
  %705 = add i32 %663, -1
  %706 = mul i32 %705, %704
  %707 = lshr i32 %706, 8
  %708 = add nuw nsw i32 %707, 1
  %709 = icmp slt i32 %666, 0
  br i1 %709, label %710, label %713

710:                                              ; preds = %702
  tail call void @vp8dx_bool_decoder_fill(%struct.BOOL_DECODER* %6) #3
  %711 = load i32, i32* %13, align 8
  %712 = load i64, i64* %20, align 8
  br label %713

713:                                              ; preds = %710, %702
  %714 = phi i64 [ %712, %710 ], [ %665, %702 ]
  %715 = phi i32 [ %711, %710 ], [ %666, %702 ]
  %716 = zext i32 %708 to i64
  %717 = shl i64 %716, 56
  %718 = icmp ult i64 %714, %717
  br i1 %718, label %723, label %719

719:                                              ; preds = %713
  %720 = load i32, i32* %7, align 4
  %721 = sub i32 %720, %708
  %722 = sub i64 %714, %717
  br label %723

723:                                              ; preds = %719, %713
  %724 = phi i64 [ %722, %719 ], [ %714, %713 ]
  %725 = phi i32 [ %721, %719 ], [ %708, %713 ]
  %726 = phi i8 [ 1, %719 ], [ 0, %713 ]
  %727 = and i32 %725, 255
  %728 = zext i32 %727 to i64
  %729 = getelementptr inbounds [256 x i8], [256 x i8]* @vp8_norm, i64 0, i64 %728
  %730 = load i8, i8* %729, align 1
  %731 = zext i8 %730 to i32
  %732 = shl i32 %725, %731
  %733 = zext i8 %730 to i64
  %734 = shl i64 %724, %733
  %735 = sub nsw i32 %715, %731
  store i64 %734, i64* %20, align 8
  store i32 %735, i32* %13, align 8
  store i32 %732, i32* %7, align 4
  %736 = getelementptr inbounds %struct.modeinfo, %struct.modeinfo* %626, i64 0, i32 0, i32 8
  store i8 %726, i8* %736, align 1
  br label %742

737:                                              ; preds = %624
  %738 = load i32, i32* %92, align 4
  %739 = icmp eq i32 %738, 0
  br i1 %739, label %740, label %742

740:                                              ; preds = %737
  %741 = getelementptr inbounds %struct.modeinfo, %struct.modeinfo* %626, i64 0, i32 0, i32 8
  store i8 0, i8* %741, align 1
  br label %742

742:                                              ; preds = %740, %737, %723, %688, %629
  %743 = load i32, i32* %42, align 32
  %744 = icmp eq i32 %743, 0
  br i1 %744, label %780, label %745

745:                                              ; preds = %742
  %746 = load i8, i8* %43, align 1
  %747 = zext i8 %746 to i32
  %748 = load i32, i32* %7, align 4
  %749 = add i32 %748, -1
  %750 = mul i32 %749, %747
  %751 = lshr i32 %750, 8
  %752 = add nuw nsw i32 %751, 1
  %753 = load i32, i32* %13, align 8
  %754 = icmp slt i32 %753, 0
  br i1 %754, label %755, label %757

755:                                              ; preds = %745
  tail call void @vp8dx_bool_decoder_fill(%struct.BOOL_DECODER* %6) #3
  %756 = load i32, i32* %13, align 8
  br label %757

757:                                              ; preds = %755, %745
  %758 = phi i32 [ %756, %755 ], [ %753, %745 ]
  %759 = load i64, i64* %20, align 8
  %760 = zext i32 %752 to i64
  %761 = shl i64 %760, 56
  %762 = icmp ult i64 %759, %761
  br i1 %762, label %767, label %763

763:                                              ; preds = %757
  %764 = load i32, i32* %7, align 4
  %765 = sub i32 %764, %752
  %766 = sub i64 %759, %761
  br label %767

767:                                              ; preds = %763, %757
  %768 = phi i64 [ %766, %763 ], [ %759, %757 ]
  %769 = phi i32 [ %765, %763 ], [ %752, %757 ]
  %770 = phi i8 [ 1, %763 ], [ 0, %757 ]
  %771 = and i32 %769, 255
  %772 = zext i32 %771 to i64
  %773 = getelementptr inbounds [256 x i8], [256 x i8]* @vp8_norm, i64 0, i64 %772
  %774 = load i8, i8* %773, align 1
  %775 = zext i8 %774 to i32
  %776 = shl i32 %769, %775
  %777 = zext i8 %774 to i64
  %778 = shl i64 %768, %777
  %779 = sub nsw i32 %758, %775
  store i64 %778, i64* %20, align 8
  store i32 %779, i32* %13, align 8
  store i32 %776, i32* %7, align 4
  br label %780

780:                                              ; preds = %742, %767
  %781 = phi i8 [ %770, %767 ], [ 0, %742 ]
  %782 = getelementptr inbounds %struct.modeinfo, %struct.modeinfo* %626, i64 0, i32 0, i32 6
  store i8 %781, i8* %782, align 1
  %783 = getelementptr inbounds %struct.modeinfo, %struct.modeinfo* %626, i64 0, i32 0, i32 3
  store i8 0, i8* %783, align 1
  %784 = load i32, i32* %92, align 4
  %785 = icmp eq i32 %784, 0
  br i1 %785, label %786, label %989

786:                                              ; preds = %780
  %787 = load i32, i32* %615, align 4
  %788 = getelementptr inbounds %struct.modeinfo, %struct.modeinfo* %626, i64 0, i32 0, i32 2
  store i8 0, i8* %788, align 2
  %789 = load i32, i32* %7, align 4
  %790 = load i32, i32* %13, align 8
  br label %791

791:                                              ; preds = %818, %786
  %792 = phi i32 [ %790, %786 ], [ %830, %818 ]
  %793 = phi i32 [ %789, %786 ], [ %827, %818 ]
  %794 = phi i8 [ 0, %786 ], [ %834, %818 ]
  %795 = sext i8 %794 to i32
  %796 = ashr i32 %795, 1
  %797 = sext i32 %796 to i64
  %798 = getelementptr inbounds [4 x i8], [4 x i8]* @vp8_kf_ymode_prob, i64 0, i64 %797
  %799 = load i8, i8* %798, align 1
  %800 = zext i8 %799 to i32
  %801 = add i32 %793, -1
  %802 = mul i32 %801, %800
  %803 = lshr i32 %802, 8
  %804 = add nuw nsw i32 %803, 1
  %805 = icmp slt i32 %792, 0
  br i1 %805, label %806, label %808

806:                                              ; preds = %791
  tail call void @vp8dx_bool_decoder_fill(%struct.BOOL_DECODER* %6) #3
  %807 = load i32, i32* %13, align 8
  br label %808

808:                                              ; preds = %806, %791
  %809 = phi i32 [ %807, %806 ], [ %792, %791 ]
  %810 = load i64, i64* %20, align 8
  %811 = zext i32 %804 to i64
  %812 = shl i64 %811, 56
  %813 = icmp ult i64 %810, %812
  br i1 %813, label %818, label %814

814:                                              ; preds = %808
  %815 = load i32, i32* %7, align 4
  %816 = sub i32 %815, %804
  %817 = sub i64 %810, %812
  br label %818

818:                                              ; preds = %814, %808
  %819 = phi i64 [ %817, %814 ], [ %810, %808 ]
  %820 = phi i32 [ %816, %814 ], [ %804, %808 ]
  %821 = phi i32 [ 1, %814 ], [ 0, %808 ]
  %822 = and i32 %820, 255
  %823 = zext i32 %822 to i64
  %824 = getelementptr inbounds [256 x i8], [256 x i8]* @vp8_norm, i64 0, i64 %823
  %825 = load i8, i8* %824, align 1
  %826 = zext i8 %825 to i32
  %827 = shl i32 %820, %826
  %828 = zext i8 %825 to i64
  %829 = shl i64 %819, %828
  %830 = sub nsw i32 %809, %826
  store i64 %829, i64* %20, align 8
  store i32 %830, i32* %13, align 8
  store i32 %827, i32* %7, align 4
  %831 = add nuw nsw i32 %821, %795
  %832 = sext i32 %831 to i64
  %833 = getelementptr inbounds [0 x i8], [0 x i8]* @vp8_kf_ymode_tree, i64 0, i64 %832
  %834 = load i8, i8* %833, align 1
  %835 = icmp sgt i8 %834, 0
  br i1 %835, label %791, label %836

836:                                              ; preds = %818
  %837 = sext i8 %834 to i32
  %838 = sub nsw i32 0, %837
  %839 = trunc i32 %838 to i8
  %840 = getelementptr inbounds %struct.modeinfo, %struct.modeinfo* %626, i64 0, i32 0, i32 0
  store i8 %839, i8* %840, align 4
  %841 = and i32 %838, 255
  %842 = icmp eq i32 %841, 4
  br i1 %842, label %843, label %938

843:                                              ; preds = %836
  store i8 1, i8* %783, align 1
  %844 = sext i32 %787 to i64
  %845 = sub nsw i64 0, %844
  %846 = getelementptr inbounds %struct.modeinfo, %struct.modeinfo* %626, i64 %845, i32 0, i32 0
  %847 = getelementptr inbounds %struct.modeinfo, %struct.modeinfo* %626, i64 -1, i32 0, i32 0
  br label %848

848:                                              ; preds = %932, %843
  %849 = phi i64 [ %936, %932 ], [ 0, %843 ]
  %850 = icmp ugt i64 %849, 3
  br i1 %850, label %860, label %851

851:                                              ; preds = %848
  %852 = load i8, i8* %846, align 4
  switch i8 %852, label %864 [
    i8 4, label %853
    i8 3, label %859
    i8 1, label %857
    i8 2, label %858
  ]

853:                                              ; preds = %851
  %854 = getelementptr inbounds %struct.modeinfo, %struct.modeinfo* %626, i64 %845, i32 1, i64 %849
  %855 = getelementptr inbounds %union.b_mode_info, %union.b_mode_info* %854, i64 12, i32 0
  %856 = load i32, i32* %855, align 4
  br label %864

857:                                              ; preds = %851
  br label %864

858:                                              ; preds = %851
  br label %864

859:                                              ; preds = %851
  br label %864

860:                                              ; preds = %848
  %861 = getelementptr inbounds %struct.modeinfo, %struct.modeinfo* %626, i64 0, i32 1, i64 %849
  %862 = getelementptr inbounds %union.b_mode_info, %union.b_mode_info* %861, i64 -4, i32 0
  %863 = load i32, i32* %862, align 4
  br label %864

864:                                              ; preds = %860, %859, %858, %857, %853, %851
  %865 = phi i32 [ %863, %860 ], [ 1, %859 ], [ 3, %858 ], [ 2, %857 ], [ %856, %853 ], [ 0, %851 ]
  %866 = and i64 %849, 3
  %867 = icmp eq i64 %866, 0
  br i1 %867, label %868, label %877

868:                                              ; preds = %864
  %869 = load i8, i8* %847, align 4
  switch i8 %869, label %881 [
    i8 4, label %870
    i8 3, label %876
    i8 1, label %874
    i8 2, label %875
  ]

870:                                              ; preds = %868
  %871 = getelementptr inbounds %struct.modeinfo, %struct.modeinfo* %626, i64 -1, i32 1, i64 %849
  %872 = getelementptr inbounds %union.b_mode_info, %union.b_mode_info* %871, i64 3, i32 0
  %873 = load i32, i32* %872, align 4
  br label %881

874:                                              ; preds = %868
  br label %881

875:                                              ; preds = %868
  br label %881

876:                                              ; preds = %868
  br label %881

877:                                              ; preds = %864
  %878 = getelementptr inbounds %struct.modeinfo, %struct.modeinfo* %626, i64 0, i32 1, i64 %849
  %879 = getelementptr inbounds %union.b_mode_info, %union.b_mode_info* %878, i64 -1, i32 0
  %880 = load i32, i32* %879, align 4
  br label %881

881:                                              ; preds = %877, %876, %875, %874, %870, %868
  %882 = phi i32 [ %880, %877 ], [ 1, %876 ], [ 3, %875 ], [ 2, %874 ], [ %873, %870 ], [ 0, %868 ]
  %883 = zext i32 %865 to i64
  %884 = zext i32 %882 to i64
  %885 = load i32, i32* %7, align 4
  %886 = load i32, i32* %13, align 8
  br label %887

887:                                              ; preds = %914, %881
  %888 = phi i32 [ %886, %881 ], [ %926, %914 ]
  %889 = phi i32 [ %885, %881 ], [ %923, %914 ]
  %890 = phi i8 [ 0, %881 ], [ %930, %914 ]
  %891 = sext i8 %890 to i32
  %892 = ashr i32 %891, 1
  %893 = sext i32 %892 to i64
  %894 = getelementptr inbounds [10 x [10 x [9 x i8]]], [10 x [10 x [9 x i8]]]* @vp8_kf_bmode_prob, i64 0, i64 %883, i64 %884, i64 %893
  %895 = load i8, i8* %894, align 1
  %896 = zext i8 %895 to i32
  %897 = add i32 %889, -1
  %898 = mul i32 %897, %896
  %899 = lshr i32 %898, 8
  %900 = add nuw nsw i32 %899, 1
  %901 = icmp slt i32 %888, 0
  br i1 %901, label %902, label %904

902:                                              ; preds = %887
  tail call void @vp8dx_bool_decoder_fill(%struct.BOOL_DECODER* %6) #3
  %903 = load i32, i32* %13, align 8
  br label %904

904:                                              ; preds = %902, %887
  %905 = phi i32 [ %903, %902 ], [ %888, %887 ]
  %906 = load i64, i64* %20, align 8
  %907 = zext i32 %900 to i64
  %908 = shl i64 %907, 56
  %909 = icmp ult i64 %906, %908
  br i1 %909, label %914, label %910

910:                                              ; preds = %904
  %911 = load i32, i32* %7, align 4
  %912 = sub i32 %911, %900
  %913 = sub i64 %906, %908
  br label %914

914:                                              ; preds = %910, %904
  %915 = phi i64 [ %913, %910 ], [ %906, %904 ]
  %916 = phi i32 [ %912, %910 ], [ %900, %904 ]
  %917 = phi i32 [ 1, %910 ], [ 0, %904 ]
  %918 = and i32 %916, 255
  %919 = zext i32 %918 to i64
  %920 = getelementptr inbounds [256 x i8], [256 x i8]* @vp8_norm, i64 0, i64 %919
  %921 = load i8, i8* %920, align 1
  %922 = zext i8 %921 to i32
  %923 = shl i32 %916, %922
  %924 = zext i8 %921 to i64
  %925 = shl i64 %915, %924
  %926 = sub nsw i32 %905, %922
  store i64 %925, i64* %20, align 8
  store i32 %926, i32* %13, align 8
  store i32 %923, i32* %7, align 4
  %927 = add nuw nsw i32 %917, %891
  %928 = sext i32 %927 to i64
  %929 = getelementptr inbounds [0 x i8], [0 x i8]* @vp8_bmode_tree, i64 0, i64 %928
  %930 = load i8, i8* %929, align 1
  %931 = icmp sgt i8 %930, 0
  br i1 %931, label %887, label %932

932:                                              ; preds = %914
  %933 = sext i8 %930 to i32
  %934 = sub nsw i32 0, %933
  %935 = getelementptr inbounds %struct.modeinfo, %struct.modeinfo* %626, i64 0, i32 1, i64 %849, i32 0
  store i32 %934, i32* %935, align 4
  %936 = add nuw nsw i64 %849, 1
  %937 = icmp eq i64 %936, 16
  br i1 %937, label %938, label %848

938:                                              ; preds = %932, %836
  %939 = load i32, i32* %7, align 4
  %940 = load i32, i32* %13, align 8
  br label %941

941:                                              ; preds = %968, %938
  %942 = phi i32 [ %940, %938 ], [ %980, %968 ]
  %943 = phi i32 [ %939, %938 ], [ %977, %968 ]
  %944 = phi i8 [ 0, %938 ], [ %984, %968 ]
  %945 = sext i8 %944 to i32
  %946 = ashr i32 %945, 1
  %947 = sext i32 %946 to i64
  %948 = getelementptr inbounds [3 x i8], [3 x i8]* @vp8_kf_uv_mode_prob, i64 0, i64 %947
  %949 = load i8, i8* %948, align 1
  %950 = zext i8 %949 to i32
  %951 = add i32 %943, -1
  %952 = mul i32 %951, %950
  %953 = lshr i32 %952, 8
  %954 = add nuw nsw i32 %953, 1
  %955 = icmp slt i32 %942, 0
  br i1 %955, label %956, label %958

956:                                              ; preds = %941
  tail call void @vp8dx_bool_decoder_fill(%struct.BOOL_DECODER* %6) #3
  %957 = load i32, i32* %13, align 8
  br label %958

958:                                              ; preds = %956, %941
  %959 = phi i32 [ %957, %956 ], [ %942, %941 ]
  %960 = load i64, i64* %20, align 8
  %961 = zext i32 %954 to i64
  %962 = shl i64 %961, 56
  %963 = icmp ult i64 %960, %962
  br i1 %963, label %968, label %964

964:                                              ; preds = %958
  %965 = load i32, i32* %7, align 4
  %966 = sub i32 %965, %954
  %967 = sub i64 %960, %962
  br label %968

968:                                              ; preds = %964, %958
  %969 = phi i64 [ %967, %964 ], [ %960, %958 ]
  %970 = phi i32 [ %966, %964 ], [ %954, %958 ]
  %971 = phi i32 [ 1, %964 ], [ 0, %958 ]
  %972 = and i32 %970, 255
  %973 = zext i32 %972 to i64
  %974 = getelementptr inbounds [256 x i8], [256 x i8]* @vp8_norm, i64 0, i64 %973
  %975 = load i8, i8* %974, align 1
  %976 = zext i8 %975 to i32
  %977 = shl i32 %970, %976
  %978 = zext i8 %975 to i64
  %979 = shl i64 %969, %978
  %980 = sub nsw i32 %959, %976
  store i64 %979, i64* %20, align 8
  store i32 %980, i32* %13, align 8
  store i32 %977, i32* %7, align 4
  %981 = add nuw nsw i32 %971, %945
  %982 = sext i32 %981 to i64
  %983 = getelementptr inbounds [0 x i8], [0 x i8]* @vp8_uv_mode_tree, i64 0, i64 %982
  %984 = load i8, i8* %983, align 1
  %985 = icmp sgt i8 %984, 0
  br i1 %985, label %941, label %986

986:                                              ; preds = %968
  %987 = sub i8 0, %984
  %988 = getelementptr inbounds %struct.modeinfo, %struct.modeinfo* %626, i64 0, i32 0, i32 1
  store i8 %987, i8* %988, align 1
  br label %2037

989:                                              ; preds = %780
  %990 = load i8, i8* %594, align 4
  %991 = zext i8 %990 to i32
  %992 = load i32, i32* %7, align 4
  %993 = add i32 %992, -1
  %994 = mul i32 %993, %991
  %995 = lshr i32 %994, 8
  %996 = add nuw nsw i32 %995, 1
  %997 = load i32, i32* %13, align 8
  %998 = icmp slt i32 %997, 0
  br i1 %998, label %999, label %1001

999:                                              ; preds = %989
  tail call void @vp8dx_bool_decoder_fill(%struct.BOOL_DECODER* %6) #3
  %1000 = load i32, i32* %13, align 8
  br label %1001

1001:                                             ; preds = %999, %989
  %1002 = phi i32 [ %1000, %999 ], [ %997, %989 ]
  %1003 = load i64, i64* %20, align 8
  %1004 = zext i32 %996 to i64
  %1005 = shl i64 %1004, 56
  %1006 = icmp ult i64 %1003, %1005
  br i1 %1006, label %1011, label %1007

1007:                                             ; preds = %1001
  %1008 = load i32, i32* %7, align 4
  %1009 = sub i32 %1008, %996
  %1010 = sub i64 %1003, %1005
  br label %1011

1011:                                             ; preds = %1007, %1001
  %1012 = phi i64 [ %1010, %1007 ], [ %1003, %1001 ]
  %1013 = phi i32 [ %1009, %1007 ], [ %996, %1001 ]
  %1014 = phi i8 [ 1, %1007 ], [ 0, %1001 ]
  %1015 = and i32 %1013, 255
  %1016 = zext i32 %1015 to i64
  %1017 = getelementptr inbounds [256 x i8], [256 x i8]* @vp8_norm, i64 0, i64 %1016
  %1018 = load i8, i8* %1017, align 1
  %1019 = zext i8 %1018 to i32
  %1020 = shl i32 %1013, %1019
  %1021 = zext i8 %1018 to i64
  %1022 = shl i64 %1012, %1021
  %1023 = sub nsw i32 %1002, %1019
  store i64 %1022, i64* %20, align 8
  store i32 %1023, i32* %13, align 8
  store i32 %1020, i32* %7, align 4
  %1024 = getelementptr inbounds %struct.modeinfo, %struct.modeinfo* %626, i64 0, i32 0, i32 2
  store i8 %1014, i8* %1024, align 2
  %1025 = icmp eq i8 %1014, 0
  br i1 %1025, label %1874, label %1026

1026:                                             ; preds = %1011
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %595) #3
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %595, i8 -86, i64 16, i1 false) #3
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %600) #3
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %600, i8 -86, i64 16, i1 false) #3
  %1027 = load i32, i32* %606, align 8
  %1028 = sext i32 %1027 to i64
  %1029 = sub nsw i64 0, %1028
  %1030 = getelementptr inbounds %struct.modeinfo, %struct.modeinfo* %626, i64 %1029
  %1031 = getelementptr inbounds %struct.modeinfo, %struct.modeinfo* %1030, i64 -1
  %1032 = getelementptr inbounds %struct.modeinfo, %struct.modeinfo* %626, i64 0, i32 0, i32 7
  store i8 0, i8* %1032, align 2
  %1033 = load i8, i8* %607, align 1
  %1034 = zext i8 %1033 to i32
  %1035 = load i32, i32* %7, align 4
  %1036 = add i32 %1035, -1
  %1037 = mul i32 %1036, %1034
  %1038 = lshr i32 %1037, 8
  %1039 = add nuw nsw i32 %1038, 1
  %1040 = load i32, i32* %13, align 8
  %1041 = icmp slt i32 %1040, 0
  br i1 %1041, label %1042, label %1044

1042:                                             ; preds = %1026
  tail call void @vp8dx_bool_decoder_fill(%struct.BOOL_DECODER* %6) #3
  %1043 = load i32, i32* %13, align 8
  br label %1044

1044:                                             ; preds = %1042, %1026
  %1045 = phi i32 [ %1043, %1042 ], [ %1040, %1026 ]
  %1046 = load i64, i64* %20, align 8
  %1047 = zext i32 %1039 to i64
  %1048 = shl i64 %1047, 56
  %1049 = icmp ult i64 %1046, %1048
  br i1 %1049, label %1054, label %1050

1050:                                             ; preds = %1044
  %1051 = load i32, i32* %7, align 4
  %1052 = sub i32 %1051, %1039
  %1053 = sub i64 %1046, %1048
  br label %1054

1054:                                             ; preds = %1050, %1044
  %1055 = phi i64 [ %1053, %1050 ], [ %1046, %1044 ]
  %1056 = phi i32 [ %1052, %1050 ], [ %1039, %1044 ]
  %1057 = phi i1 [ false, %1050 ], [ true, %1044 ]
  %1058 = and i32 %1056, 255
  %1059 = zext i32 %1058 to i64
  %1060 = getelementptr inbounds [256 x i8], [256 x i8]* @vp8_norm, i64 0, i64 %1059
  %1061 = load i8, i8* %1060, align 1
  %1062 = zext i8 %1061 to i32
  %1063 = shl i32 %1056, %1062
  %1064 = zext i8 %1061 to i64
  %1065 = shl i64 %1055, %1064
  %1066 = sub nsw i32 %1045, %1062
  store i64 %1065, i64* %20, align 8
  store i32 %1066, i32* %13, align 8
  store i32 %1063, i32* %7, align 4
  br i1 %1057, label %1101, label %1067

1067:                                             ; preds = %1054
  %1068 = load i8, i8* %608, align 2
  %1069 = zext i8 %1068 to i32
  %1070 = add i32 %1063, -1
  %1071 = mul i32 %1070, %1069
  %1072 = lshr i32 %1071, 8
  %1073 = add nuw nsw i32 %1072, 1
  %1074 = icmp slt i32 %1066, 0
  br i1 %1074, label %1075, label %1078

1075:                                             ; preds = %1067
  tail call void @vp8dx_bool_decoder_fill(%struct.BOOL_DECODER* %6) #3
  %1076 = load i32, i32* %13, align 8
  %1077 = load i64, i64* %20, align 8
  br label %1078

1078:                                             ; preds = %1075, %1067
  %1079 = phi i64 [ %1077, %1075 ], [ %1065, %1067 ]
  %1080 = phi i32 [ %1076, %1075 ], [ %1066, %1067 ]
  %1081 = zext i32 %1073 to i64
  %1082 = shl i64 %1081, 56
  %1083 = icmp ult i64 %1079, %1082
  br i1 %1083, label %1088, label %1084

1084:                                             ; preds = %1078
  %1085 = load i32, i32* %7, align 4
  %1086 = sub i32 %1085, %1073
  %1087 = sub i64 %1079, %1082
  br label %1088

1088:                                             ; preds = %1084, %1078
  %1089 = phi i64 [ %1087, %1084 ], [ %1079, %1078 ]
  %1090 = phi i32 [ %1086, %1084 ], [ %1073, %1078 ]
  %1091 = phi i8 [ 3, %1084 ], [ 2, %1078 ]
  %1092 = and i32 %1090, 255
  %1093 = zext i32 %1092 to i64
  %1094 = getelementptr inbounds [256 x i8], [256 x i8]* @vp8_norm, i64 0, i64 %1093
  %1095 = load i8, i8* %1094, align 1
  %1096 = zext i8 %1095 to i32
  %1097 = shl i32 %1090, %1096
  %1098 = zext i8 %1095 to i64
  %1099 = shl i64 %1089, %1098
  %1100 = sub nsw i32 %1080, %1096
  store i64 %1099, i64* %20, align 8
  store i32 %1100, i32* %13, align 8
  store i32 %1097, i32* %7, align 4
  store i8 %1091, i8* %1024, align 2
  br label %1101

1101:                                             ; preds = %1088, %1054
  store i32 0, i32* %605, align 8
  store i32 0, i32* %609, align 4
  store i32 0, i32* %602, align 16
  %1102 = getelementptr inbounds %struct.modeinfo, %struct.modeinfo* %626, i64 %1029, i32 0, i32 2
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %595, i8 0, i64 16, i1 false) #3
  %1103 = load i8, i8* %1102, align 2
  %1104 = icmp eq i8 %1103, 0
  br i1 %1104, label %1129, label %1105

1105:                                             ; preds = %1101
  %1106 = getelementptr inbounds %struct.modeinfo, %struct.modeinfo* %626, i64 %1029, i32 0, i32 4, i32 0
  %1107 = load i32, i32* %1106, align 4
  %1108 = icmp eq i32 %1107, 0
  br i1 %1108, label %1124, label %1109

1109:                                             ; preds = %1105
  store i32 %1107, i32* %604, align 4
  %1110 = zext i8 %1103 to i64
  %1111 = getelementptr inbounds %struct.VP8D_COMP, %struct.VP8D_COMP* %0, i64 0, i32 2, i32 55, i64 %1110
  %1112 = load i32, i32* %1111, align 4
  %1113 = load i8, i8* %1024, align 2
  %1114 = zext i8 %1113 to i64
  %1115 = getelementptr inbounds %struct.VP8D_COMP, %struct.VP8D_COMP* %0, i64 0, i32 2, i32 55, i64 %1114
  %1116 = load i32, i32* %1115, align 4
  %1117 = icmp eq i32 %1116, %1112
  br i1 %1117, label %1124, label %1118

1118:                                             ; preds = %1109
  %1119 = lshr i32 %1107, 16
  %1120 = trunc i32 %1119 to i16
  %1121 = trunc i32 %1107 to i16
  %1122 = sub i16 0, %1121
  store i16 %1122, i16* %611, align 4
  %1123 = sub i16 0, %1120
  store i16 %1123, i16* %612, align 2
  br label %1124

1124:                                             ; preds = %1118, %1109, %1105
  %1125 = phi %union.int_mv* [ %601, %1105 ], [ %603, %1109 ], [ %603, %1118 ]
  %1126 = phi i32* [ %596, %1105 ], [ %597, %1109 ], [ %597, %1118 ]
  %1127 = load i32, i32* %1126, align 4
  %1128 = add nsw i32 %1127, 2
  store i32 %1128, i32* %1126, align 4
  br label %1129

1129:                                             ; preds = %1124, %1101
  %1130 = phi i32 [ %1128, %1124 ], [ 0, %1101 ]
  %1131 = phi %union.int_mv* [ %1125, %1124 ], [ %601, %1101 ]
  %1132 = phi i32* [ %1126, %1124 ], [ %596, %1101 ]
  %1133 = getelementptr inbounds %struct.modeinfo, %struct.modeinfo* %626, i64 -1, i32 0, i32 2
  %1134 = load i8, i8* %1133, align 2
  %1135 = icmp eq i8 %1134, 0
  br i1 %1135, label %1173, label %1136

1136:                                             ; preds = %1129
  %1137 = getelementptr inbounds %struct.modeinfo, %struct.modeinfo* %626, i64 -1, i32 0, i32 4, i32 0
  %1138 = load i32, i32* %1137, align 4
  %1139 = icmp eq i32 %1138, 0
  br i1 %1139, label %1170, label %1140

1140:                                             ; preds = %1136
  %1141 = lshr i32 %1138, 16
  %1142 = zext i8 %1134 to i64
  %1143 = getelementptr inbounds %struct.VP8D_COMP, %struct.VP8D_COMP* %0, i64 0, i32 2, i32 55, i64 %1142
  %1144 = load i32, i32* %1143, align 4
  %1145 = load i8, i8* %1024, align 2
  %1146 = zext i8 %1145 to i64
  %1147 = getelementptr inbounds %struct.VP8D_COMP, %struct.VP8D_COMP* %0, i64 0, i32 2, i32 55, i64 %1146
  %1148 = load i32, i32* %1147, align 4
  %1149 = icmp eq i32 %1148, %1144
  %1150 = sub i32 0, %1138
  %1151 = sub nsw i32 0, %1141
  %1152 = select i1 %1149, i32 %1141, i32 %1151
  %1153 = select i1 %1149, i32 %1138, i32 %1150
  %1154 = shl i32 %1152, 16
  %1155 = and i32 %1153, 65535
  %1156 = or i32 %1154, %1155
  %1157 = getelementptr inbounds %union.int_mv, %union.int_mv* %1131, i64 0, i32 0
  %1158 = load i32, i32* %1157, align 4
  %1159 = icmp eq i32 %1156, %1158
  br i1 %1159, label %1165, label %1160

1160:                                             ; preds = %1140
  %1161 = getelementptr inbounds %union.int_mv, %union.int_mv* %1131, i64 1
  %1162 = getelementptr inbounds %union.int_mv, %union.int_mv* %1161, i64 0, i32 0
  store i32 %1156, i32* %1162, align 4
  %1163 = getelementptr inbounds i32, i32* %1132, i64 1
  %1164 = load i32, i32* %1163, align 4
  br label %1165

1165:                                             ; preds = %1160, %1140
  %1166 = phi i32 [ %1164, %1160 ], [ %1130, %1140 ]
  %1167 = phi %union.int_mv* [ %1161, %1160 ], [ %1131, %1140 ]
  %1168 = phi i32* [ %1163, %1160 ], [ %1132, %1140 ]
  %1169 = add nsw i32 %1166, 2
  store i32 %1169, i32* %1168, align 4
  br label %1173

1170:                                             ; preds = %1136
  %1171 = load i32, i32* %596, align 16
  %1172 = add nsw i32 %1171, 2
  store i32 %1172, i32* %596, align 16
  br label %1173

1173:                                             ; preds = %1170, %1165, %1129
  %1174 = phi %union.int_mv* [ %1167, %1165 ], [ %1131, %1170 ], [ %1131, %1129 ]
  %1175 = phi i32* [ %1168, %1165 ], [ %1132, %1170 ], [ %1132, %1129 ]
  %1176 = getelementptr inbounds %struct.modeinfo, %struct.modeinfo* %1031, i64 0, i32 0
  %1177 = getelementptr inbounds %struct.MB_MODE_INFO, %struct.MB_MODE_INFO* %1176, i64 0, i32 2
  %1178 = load i8, i8* %1177, align 2
  %1179 = icmp eq i8 %1178, 0
  br i1 %1179, label %1216, label %1180

1180:                                             ; preds = %1173
  %1181 = getelementptr inbounds %struct.MB_MODE_INFO, %struct.MB_MODE_INFO* %1176, i64 0, i32 4, i32 0
  %1182 = load i32, i32* %1181, align 4
  %1183 = icmp eq i32 %1182, 0
  br i1 %1183, label %1213, label %1184

1184:                                             ; preds = %1180
  %1185 = lshr i32 %1182, 16
  %1186 = zext i8 %1178 to i64
  %1187 = getelementptr inbounds %struct.VP8D_COMP, %struct.VP8D_COMP* %0, i64 0, i32 2, i32 55, i64 %1186
  %1188 = load i32, i32* %1187, align 4
  %1189 = load i8, i8* %1024, align 2
  %1190 = zext i8 %1189 to i64
  %1191 = getelementptr inbounds %struct.VP8D_COMP, %struct.VP8D_COMP* %0, i64 0, i32 2, i32 55, i64 %1190
  %1192 = load i32, i32* %1191, align 4
  %1193 = icmp eq i32 %1192, %1188
  %1194 = sub i32 0, %1182
  %1195 = sub nsw i32 0, %1185
  %1196 = select i1 %1193, i32 %1185, i32 %1195
  %1197 = select i1 %1193, i32 %1182, i32 %1194
  %1198 = shl i32 %1196, 16
  %1199 = and i32 %1197, 65535
  %1200 = or i32 %1198, %1199
  %1201 = getelementptr inbounds %union.int_mv, %union.int_mv* %1174, i64 0, i32 0
  %1202 = load i32, i32* %1201, align 4
  %1203 = icmp eq i32 %1200, %1202
  br i1 %1203, label %1208, label %1204

1204:                                             ; preds = %1184
  %1205 = getelementptr inbounds %union.int_mv, %union.int_mv* %1174, i64 1
  %1206 = getelementptr inbounds %union.int_mv, %union.int_mv* %1205, i64 0, i32 0
  store i32 %1200, i32* %1206, align 4
  %1207 = getelementptr inbounds i32, i32* %1175, i64 1
  br label %1208

1208:                                             ; preds = %1204, %1184
  %1209 = phi %union.int_mv* [ %1205, %1204 ], [ %1174, %1184 ]
  %1210 = phi i32* [ %1207, %1204 ], [ %1175, %1184 ]
  %1211 = load i32, i32* %1210, align 4
  %1212 = add nsw i32 %1211, 1
  store i32 %1212, i32* %1210, align 4
  br label %1216

1213:                                             ; preds = %1180
  %1214 = load i32, i32* %596, align 16
  %1215 = add nsw i32 %1214, 1
  store i32 %1215, i32* %596, align 16
  br label %1216

1216:                                             ; preds = %1213, %1208, %1173
  %1217 = phi %union.int_mv* [ %1209, %1208 ], [ %1174, %1213 ], [ %1174, %1173 ]
  %1218 = load i32, i32* %596, align 16
  %1219 = sext i32 %1218 to i64
  %1220 = getelementptr inbounds [6 x [4 x i32]], [6 x [4 x i32]]* @vp8_mode_contexts, i64 0, i64 %1219, i64 0
  %1221 = load i32, i32* %1220, align 16
  %1222 = load i32, i32* %7, align 4
  %1223 = add i32 %1222, -1
  %1224 = mul i32 %1223, %1221
  %1225 = lshr i32 %1224, 8
  %1226 = add nuw nsw i32 %1225, 1
  %1227 = load i32, i32* %13, align 8
  %1228 = icmp slt i32 %1227, 0
  br i1 %1228, label %1229, label %1231

1229:                                             ; preds = %1216
  tail call void @vp8dx_bool_decoder_fill(%struct.BOOL_DECODER* %6) #3
  %1230 = load i32, i32* %13, align 8
  br label %1231

1231:                                             ; preds = %1229, %1216
  %1232 = phi i32 [ %1230, %1229 ], [ %1227, %1216 ]
  %1233 = load i64, i64* %20, align 8
  %1234 = zext i32 %1226 to i64
  %1235 = shl i64 %1234, 56
  %1236 = icmp ult i64 %1233, %1235
  br i1 %1236, label %1241, label %1237

1237:                                             ; preds = %1231
  %1238 = load i32, i32* %7, align 4
  %1239 = sub i32 %1238, %1226
  %1240 = sub i64 %1233, %1235
  br label %1241

1241:                                             ; preds = %1237, %1231
  %1242 = phi i64 [ %1240, %1237 ], [ %1233, %1231 ]
  %1243 = phi i32 [ %1239, %1237 ], [ %1226, %1231 ]
  %1244 = phi i1 [ false, %1237 ], [ true, %1231 ]
  %1245 = and i32 %1243, 255
  %1246 = zext i32 %1245 to i64
  %1247 = getelementptr inbounds [256 x i8], [256 x i8]* @vp8_norm, i64 0, i64 %1246
  %1248 = load i8, i8* %1247, align 1
  %1249 = zext i8 %1248 to i32
  %1250 = shl i32 %1243, %1249
  %1251 = zext i8 %1248 to i64
  %1252 = shl i64 %1242, %1251
  %1253 = sub nsw i32 %1232, %1249
  store i64 %1252, i64* %20, align 8
  store i32 %1253, i32* %13, align 8
  store i32 %1250, i32* %7, align 4
  br i1 %1244, label %1870, label %1254

1254:                                             ; preds = %1241
  %1255 = load i32, i32* %599, align 4
  %1256 = icmp sgt i32 %1255, 0
  %1257 = getelementptr inbounds %union.int_mv, %union.int_mv* %1217, i64 0, i32 0
  %1258 = load i32, i32* %1257, align 4
  %1259 = load i32, i32* %604, align 4
  %1260 = icmp eq i32 %1258, %1259
  %1261 = and i1 %1256, %1260
  %1262 = zext i1 %1261 to i32
  %1263 = load i32, i32* %597, align 4
  %1264 = add nsw i32 %1263, %1262
  store i32 %1264, i32* %597, align 4
  %1265 = load i32, i32* %598, align 8
  %1266 = icmp sgt i32 %1265, %1264
  br i1 %1266, label %1267, label %1269

1267:                                             ; preds = %1254
  store i32 %1265, i32* %597, align 4
  store i32 %1264, i32* %598, align 8
  %1268 = load i32, i32* %605, align 8
  store i32 %1268, i32* %604, align 4
  store i32 %1259, i32* %605, align 8
  br label %1269

1269:                                             ; preds = %1267, %1254
  %1270 = phi i32 [ %1268, %1267 ], [ %1259, %1254 ]
  %1271 = phi i32 [ %1264, %1267 ], [ %1265, %1254 ]
  %1272 = phi i32 [ %1265, %1267 ], [ %1264, %1254 ]
  %1273 = sext i32 %1272 to i64
  %1274 = getelementptr inbounds [6 x [4 x i32]], [6 x [4 x i32]]* @vp8_mode_contexts, i64 0, i64 %1273, i64 1
  %1275 = load i32, i32* %1274, align 4
  %1276 = add i32 %1250, -1
  %1277 = mul i32 %1275, %1276
  %1278 = lshr i32 %1277, 8
  %1279 = add nuw nsw i32 %1278, 1
  %1280 = icmp slt i32 %1253, 0
  br i1 %1280, label %1281, label %1284

1281:                                             ; preds = %1269
  tail call void @vp8dx_bool_decoder_fill(%struct.BOOL_DECODER* %6) #3
  %1282 = load i32, i32* %13, align 8
  %1283 = load i64, i64* %20, align 8
  br label %1284

1284:                                             ; preds = %1281, %1269
  %1285 = phi i64 [ %1283, %1281 ], [ %1252, %1269 ]
  %1286 = phi i32 [ %1282, %1281 ], [ %1253, %1269 ]
  %1287 = zext i32 %1279 to i64
  %1288 = shl i64 %1287, 56
  %1289 = icmp ult i64 %1285, %1288
  br i1 %1289, label %1294, label %1290

1290:                                             ; preds = %1284
  %1291 = load i32, i32* %7, align 4
  %1292 = sub i32 %1291, %1279
  %1293 = sub i64 %1285, %1288
  br label %1294

1294:                                             ; preds = %1290, %1284
  %1295 = phi i64 [ %1293, %1290 ], [ %1285, %1284 ]
  %1296 = phi i32 [ %1292, %1290 ], [ %1279, %1284 ]
  %1297 = phi i1 [ false, %1290 ], [ true, %1284 ]
  %1298 = and i32 %1296, 255
  %1299 = zext i32 %1298 to i64
  %1300 = getelementptr inbounds [256 x i8], [256 x i8]* @vp8_norm, i64 0, i64 %1299
  %1301 = load i8, i8* %1300, align 1
  %1302 = zext i8 %1301 to i32
  %1303 = shl i32 %1296, %1302
  %1304 = zext i8 %1301 to i64
  %1305 = shl i64 %1295, %1304
  %1306 = sub nsw i32 %1286, %1302
  store i64 %1305, i64* %20, align 8
  store i32 %1306, i32* %13, align 8
  store i32 %1303, i32* %7, align 4
  br i1 %1297, label %1838, label %1307

1307:                                             ; preds = %1294
  %1308 = sext i32 %1271 to i64
  %1309 = getelementptr inbounds [6 x [4 x i32]], [6 x [4 x i32]]* @vp8_mode_contexts, i64 0, i64 %1308, i64 2
  %1310 = load i32, i32* %1309, align 8
  %1311 = add i32 %1303, -1
  %1312 = mul i32 %1310, %1311
  %1313 = lshr i32 %1312, 8
  %1314 = add nuw nsw i32 %1313, 1
  %1315 = icmp slt i32 %1306, 0
  br i1 %1315, label %1316, label %1319

1316:                                             ; preds = %1307
  tail call void @vp8dx_bool_decoder_fill(%struct.BOOL_DECODER* %6) #3
  %1317 = load i32, i32* %13, align 8
  %1318 = load i64, i64* %20, align 8
  br label %1319

1319:                                             ; preds = %1316, %1307
  %1320 = phi i64 [ %1318, %1316 ], [ %1305, %1307 ]
  %1321 = phi i32 [ %1317, %1316 ], [ %1306, %1307 ]
  %1322 = zext i32 %1314 to i64
  %1323 = shl i64 %1322, 56
  %1324 = icmp ult i64 %1320, %1323
  br i1 %1324, label %1329, label %1325

1325:                                             ; preds = %1319
  %1326 = load i32, i32* %7, align 4
  %1327 = sub i32 %1326, %1314
  %1328 = sub i64 %1320, %1323
  br label %1329

1329:                                             ; preds = %1325, %1319
  %1330 = phi i64 [ %1328, %1325 ], [ %1320, %1319 ]
  %1331 = phi i32 [ %1327, %1325 ], [ %1314, %1319 ]
  %1332 = phi i1 [ false, %1325 ], [ true, %1319 ]
  %1333 = and i32 %1331, 255
  %1334 = zext i32 %1333 to i64
  %1335 = getelementptr inbounds [256 x i8], [256 x i8]* @vp8_norm, i64 0, i64 %1334
  %1336 = load i8, i8* %1335, align 1
  %1337 = zext i8 %1336 to i32
  %1338 = shl i32 %1331, %1337
  %1339 = zext i8 %1336 to i64
  %1340 = shl i64 %1330, %1339
  %1341 = sub nsw i32 %1321, %1337
  store i64 %1340, i64* %20, align 8
  store i32 %1341, i32* %13, align 8
  store i32 %1338, i32* %7, align 4
  br i1 %1332, label %1805, label %1342

1342:                                             ; preds = %1329
  %1343 = load i32, i32* %575, align 4
  %1344 = load i32, i32* %580, align 16
  %1345 = add nsw i32 %1343, -128
  %1346 = add nsw i32 %1344, 128
  %1347 = load i32, i32* %588, align 8
  %1348 = add nsw i32 %1347, 128
  %1349 = load i32, i32* %587, align 4
  %1350 = add nsw i32 %1349, -128
  %1351 = icmp sge i32 %1272, %1218
  %1352 = zext i1 %1351 to i64
  %1353 = getelementptr inbounds [4 x %union.int_mv], [4 x %union.int_mv]* %3, i64 0, i64 %1352
  %1354 = bitcast %union.int_mv* %1353 to %struct.MV*
  %1355 = getelementptr inbounds %struct.MV, %struct.MV* %1354, i64 0, i32 1
  %1356 = load i16, i16* %1355, align 2
  %1357 = sext i16 %1356 to i32
  %1358 = icmp sgt i32 %1350, %1357
  br i1 %1358, label %1359, label %1361

1359:                                             ; preds = %1342
  %1360 = trunc i32 %1350 to i16
  br label %1365

1361:                                             ; preds = %1342
  %1362 = icmp slt i32 %1348, %1357
  br i1 %1362, label %1363, label %1367

1363:                                             ; preds = %1361
  %1364 = trunc i32 %1348 to i16
  br label %1365

1365:                                             ; preds = %1359, %1363
  %1366 = phi i16 [ %1364, %1363 ], [ %1360, %1359 ]
  store i16 %1366, i16* %1355, align 2
  br label %1367

1367:                                             ; preds = %1365, %1361
  %1368 = phi i16 [ %1356, %1361 ], [ %1366, %1365 ]
  %1369 = bitcast %union.int_mv* %1353 to i16*
  %1370 = load i16, i16* %1369, align 4
  %1371 = sext i16 %1370 to i32
  %1372 = icmp sgt i32 %1345, %1371
  br i1 %1372, label %1375, label %1373

1373:                                             ; preds = %1367
  %1374 = icmp slt i32 %1346, %1371
  br i1 %1374, label %1375, label %1378

1375:                                             ; preds = %1373, %1367
  %1376 = phi i32 [ %1345, %1367 ], [ %1346, %1373 ]
  %1377 = trunc i32 %1376 to i16
  store i16 %1377, i16* %1369, align 4
  br label %1378

1378:                                             ; preds = %1375, %1373
  %1379 = phi i16 [ %1370, %1373 ], [ %1377, %1375 ]
  %1380 = getelementptr inbounds %struct.modeinfo, %struct.modeinfo* %1030, i64 0, i32 0, i32 0
  %1381 = load i8, i8* %1380, align 4
  %1382 = icmp eq i8 %1381, 9
  %1383 = zext i1 %1382 to i32
  %1384 = getelementptr inbounds %struct.modeinfo, %struct.modeinfo* %626, i64 -1, i32 0, i32 0
  %1385 = load i8, i8* %1384, align 4
  %1386 = icmp eq i8 %1385, 9
  %1387 = zext i1 %1386 to i32
  %1388 = add nuw nsw i32 %1387, %1383
  %1389 = shl nuw nsw i32 %1388, 1
  %1390 = getelementptr inbounds %struct.MB_MODE_INFO, %struct.MB_MODE_INFO* %1176, i64 0, i32 0
  %1391 = load i8, i8* %1390, align 4
  %1392 = icmp eq i8 %1391, 9
  %1393 = zext i1 %1392 to i32
  %1394 = or i32 %1389, %1393
  store i32 %1394, i32* %599, align 4
  %1395 = zext i32 %1394 to i64
  %1396 = getelementptr inbounds [6 x [4 x i32]], [6 x [4 x i32]]* @vp8_mode_contexts, i64 0, i64 %1395, i64 3
  %1397 = load i32, i32* %1396, align 4
  %1398 = add i32 %1338, -1
  %1399 = mul i32 %1397, %1398
  %1400 = lshr i32 %1399, 8
  %1401 = add nuw nsw i32 %1400, 1
  %1402 = icmp slt i32 %1341, 0
  br i1 %1402, label %1403, label %1406

1403:                                             ; preds = %1378
  tail call void @vp8dx_bool_decoder_fill(%struct.BOOL_DECODER* %6) #3
  %1404 = load i32, i32* %13, align 8
  %1405 = load i64, i64* %20, align 8
  br label %1406

1406:                                             ; preds = %1403, %1378
  %1407 = phi i64 [ %1405, %1403 ], [ %1340, %1378 ]
  %1408 = phi i32 [ %1404, %1403 ], [ %1341, %1378 ]
  %1409 = zext i32 %1401 to i64
  %1410 = shl i64 %1409, 56
  %1411 = icmp ult i64 %1407, %1410
  br i1 %1411, label %1416, label %1412

1412:                                             ; preds = %1406
  %1413 = load i32, i32* %7, align 4
  %1414 = sub i32 %1413, %1401
  %1415 = sub i64 %1407, %1410
  br label %1416

1416:                                             ; preds = %1412, %1406
  %1417 = phi i64 [ %1415, %1412 ], [ %1407, %1406 ]
  %1418 = phi i32 [ %1414, %1412 ], [ %1401, %1406 ]
  %1419 = phi i1 [ false, %1412 ], [ true, %1406 ]
  %1420 = and i32 %1418, 255
  %1421 = zext i32 %1420 to i64
  %1422 = getelementptr inbounds [256 x i8], [256 x i8]* @vp8_norm, i64 0, i64 %1421
  %1423 = load i8, i8* %1422, align 1
  %1424 = zext i8 %1423 to i32
  %1425 = shl i32 %1418, %1424
  %1426 = zext i8 %1423 to i64
  %1427 = shl i64 %1417, %1426
  %1428 = sub nsw i32 %1408, %1424
  store i64 %1427, i64* %20, align 8
  store i32 %1428, i32* %13, align 8
  store i32 %1425, i32* %7, align 4
  br i1 %1419, label %1780, label %1429

1429:                                             ; preds = %1416
  %1430 = getelementptr inbounds %union.int_mv, %union.int_mv* %1353, i64 0, i32 0
  %1431 = load i32, i32* %1430, align 4
  %1432 = mul i32 %1425, 110
  %1433 = add i32 %1432, -110
  %1434 = lshr i32 %1433, 8
  %1435 = add nuw nsw i32 %1434, 1
  %1436 = icmp slt i32 %1428, 0
  br i1 %1436, label %1437, label %1440

1437:                                             ; preds = %1429
  tail call void @vp8dx_bool_decoder_fill(%struct.BOOL_DECODER* %6) #3
  %1438 = load i32, i32* %13, align 8
  %1439 = load i64, i64* %20, align 8
  br label %1440

1440:                                             ; preds = %1437, %1429
  %1441 = phi i64 [ %1439, %1437 ], [ %1427, %1429 ]
  %1442 = phi i32 [ %1438, %1437 ], [ %1428, %1429 ]
  %1443 = zext i32 %1435 to i64
  %1444 = shl i64 %1443, 56
  %1445 = icmp ult i64 %1441, %1444
  br i1 %1445, label %1450, label %1446

1446:                                             ; preds = %1440
  %1447 = load i32, i32* %7, align 4
  %1448 = sub i32 %1447, %1435
  %1449 = sub i64 %1441, %1444
  br label %1450

1450:                                             ; preds = %1446, %1440
  %1451 = phi i64 [ %1449, %1446 ], [ %1441, %1440 ]
  %1452 = phi i32 [ %1448, %1446 ], [ %1435, %1440 ]
  %1453 = phi i1 [ false, %1446 ], [ true, %1440 ]
  %1454 = and i32 %1452, 255
  %1455 = zext i32 %1454 to i64
  %1456 = getelementptr inbounds [256 x i8], [256 x i8]* @vp8_norm, i64 0, i64 %1455
  %1457 = load i8, i8* %1456, align 1
  %1458 = zext i8 %1457 to i32
  %1459 = shl i32 %1452, %1458
  %1460 = zext i8 %1457 to i64
  %1461 = shl i64 %1451, %1460
  %1462 = sub nsw i32 %1442, %1458
  store i64 %1461, i64* %20, align 8
  store i32 %1462, i32* %13, align 8
  store i32 %1459, i32* %7, align 4
  br i1 %1453, label %1527, label %1463

1463:                                             ; preds = %1450
  %1464 = mul i32 %1459, 111
  %1465 = add i32 %1464, -111
  %1466 = lshr i32 %1465, 8
  %1467 = add nuw nsw i32 %1466, 1
  %1468 = icmp slt i32 %1462, 0
  br i1 %1468, label %1469, label %1472

1469:                                             ; preds = %1463
  tail call void @vp8dx_bool_decoder_fill(%struct.BOOL_DECODER* %6) #3
  %1470 = load i32, i32* %13, align 8
  %1471 = load i64, i64* %20, align 8
  br label %1472

1472:                                             ; preds = %1469, %1463
  %1473 = phi i64 [ %1471, %1469 ], [ %1461, %1463 ]
  %1474 = phi i32 [ %1470, %1469 ], [ %1462, %1463 ]
  %1475 = zext i32 %1467 to i64
  %1476 = shl i64 %1475, 56
  %1477 = icmp ult i64 %1473, %1476
  br i1 %1477, label %1482, label %1478

1478:                                             ; preds = %1472
  %1479 = load i32, i32* %7, align 4
  %1480 = sub i32 %1479, %1467
  %1481 = sub i64 %1473, %1476
  br label %1482

1482:                                             ; preds = %1478, %1472
  %1483 = phi i64 [ %1481, %1478 ], [ %1473, %1472 ]
  %1484 = phi i32 [ %1480, %1478 ], [ %1467, %1472 ]
  %1485 = phi i1 [ false, %1478 ], [ true, %1472 ]
  %1486 = and i32 %1484, 255
  %1487 = zext i32 %1486 to i64
  %1488 = getelementptr inbounds [256 x i8], [256 x i8]* @vp8_norm, i64 0, i64 %1487
  %1489 = load i8, i8* %1488, align 1
  %1490 = zext i8 %1489 to i32
  %1491 = shl i32 %1484, %1490
  %1492 = zext i8 %1489 to i64
  %1493 = shl i64 %1483, %1492
  %1494 = sub nsw i32 %1474, %1490
  store i64 %1493, i64* %20, align 8
  store i32 %1494, i32* %13, align 8
  store i32 %1491, i32* %7, align 4
  br i1 %1485, label %1527, label %1495

1495:                                             ; preds = %1482
  %1496 = mul i32 %1491, 150
  %1497 = add i32 %1496, -150
  %1498 = lshr i32 %1497, 8
  %1499 = add nuw nsw i32 %1498, 1
  %1500 = icmp slt i32 %1494, 0
  br i1 %1500, label %1501, label %1504

1501:                                             ; preds = %1495
  tail call void @vp8dx_bool_decoder_fill(%struct.BOOL_DECODER* %6) #3
  %1502 = load i32, i32* %13, align 8
  %1503 = load i64, i64* %20, align 8
  br label %1504

1504:                                             ; preds = %1501, %1495
  %1505 = phi i64 [ %1503, %1501 ], [ %1493, %1495 ]
  %1506 = phi i32 [ %1502, %1501 ], [ %1494, %1495 ]
  %1507 = zext i32 %1499 to i64
  %1508 = shl i64 %1507, 56
  %1509 = icmp ult i64 %1505, %1508
  br i1 %1509, label %1514, label %1510

1510:                                             ; preds = %1504
  %1511 = load i32, i32* %7, align 4
  %1512 = sub i32 %1511, %1499
  %1513 = sub i64 %1505, %1508
  br label %1514

1514:                                             ; preds = %1510, %1504
  %1515 = phi i64 [ %1513, %1510 ], [ %1505, %1504 ]
  %1516 = phi i32 [ %1512, %1510 ], [ %1499, %1504 ]
  %1517 = phi i32 [ 1, %1510 ], [ 0, %1504 ]
  %1518 = and i32 %1516, 255
  %1519 = zext i32 %1518 to i64
  %1520 = getelementptr inbounds [256 x i8], [256 x i8]* @vp8_norm, i64 0, i64 %1519
  %1521 = load i8, i8* %1520, align 1
  %1522 = zext i8 %1521 to i32
  %1523 = shl i32 %1516, %1522
  %1524 = zext i8 %1521 to i64
  %1525 = shl i64 %1515, %1524
  %1526 = sub nsw i32 %1506, %1522
  store i64 %1525, i64* %20, align 8
  store i32 %1526, i32* %13, align 8
  store i32 %1523, i32* %7, align 4
  br label %1527

1527:                                             ; preds = %1514, %1482, %1450
  %1528 = phi i32 [ %1517, %1514 ], [ 2, %1482 ], [ 3, %1450 ]
  %1529 = phi i64 [ 2, %1514 ], [ 4, %1482 ], [ 16, %1450 ]
  %1530 = sext i32 %1528 to i64
  %1531 = getelementptr inbounds %struct.modeinfo, %struct.modeinfo* %626, i64 -1, i32 0, i32 4, i32 0
  %1532 = getelementptr inbounds %struct.modeinfo, %struct.modeinfo* %626, i64 %1029, i32 0, i32 4, i32 0
  %1533 = trunc i32 %1431 to i16
  %1534 = lshr i32 %1431, 16
  %1535 = trunc i32 %1534 to i16
  %1536 = getelementptr inbounds [4 x i8], [4 x i8]* @mbsplit_fill_count, i64 0, i64 %1530
  br label %1537

1537:                                             ; preds = %1770, %1527
  %1538 = phi i64 [ %1771, %1770 ], [ 0, %1527 ]
  %1539 = getelementptr inbounds [4 x [16 x i8]], [4 x [16 x i8]]* @vp8_mbsplit_offset, i64 0, i64 %1530, i64 %1538
  %1540 = load i8, i8* %1539, align 1
  %1541 = zext i8 %1540 to i32
  %1542 = and i32 %1541, 3
  %1543 = icmp eq i32 %1542, 0
  br i1 %1543, label %1544, label %1551

1544:                                             ; preds = %1537
  %1545 = load i8, i8* %1384, align 4
  %1546 = icmp eq i8 %1545, 9
  br i1 %1546, label %1547, label %1555

1547:                                             ; preds = %1544
  %1548 = zext i8 %1540 to i64
  %1549 = getelementptr inbounds %struct.modeinfo, %struct.modeinfo* %626, i64 -1, i32 1, i64 %1548
  %1550 = getelementptr inbounds %union.b_mode_info, %union.b_mode_info* %1549, i64 3, i32 0
  br label %1555

1551:                                             ; preds = %1537
  %1552 = zext i8 %1540 to i64
  %1553 = getelementptr inbounds %struct.modeinfo, %struct.modeinfo* %626, i64 0, i32 1, i64 %1552
  %1554 = getelementptr inbounds %union.b_mode_info, %union.b_mode_info* %1553, i64 -1, i32 0
  br label %1555

1555:                                             ; preds = %1551, %1547, %1544
  %1556 = phi i32* [ %1554, %1551 ], [ %1550, %1547 ], [ %1531, %1544 ]
  %1557 = load i32, i32* %1556, align 4
  %1558 = and i32 %1541, 252
  %1559 = icmp eq i32 %1558, 0
  br i1 %1559, label %1560, label %1567

1560:                                             ; preds = %1555
  %1561 = load i8, i8* %1380, align 4
  %1562 = icmp eq i8 %1561, 9
  br i1 %1562, label %1563, label %1571

1563:                                             ; preds = %1560
  %1564 = zext i8 %1540 to i64
  %1565 = getelementptr inbounds %struct.modeinfo, %struct.modeinfo* %626, i64 %1029, i32 1, i64 %1564
  %1566 = getelementptr inbounds %union.b_mode_info, %union.b_mode_info* %1565, i64 12, i32 0
  br label %1571

1567:                                             ; preds = %1555
  %1568 = zext i8 %1540 to i64
  %1569 = getelementptr inbounds %struct.modeinfo, %struct.modeinfo* %626, i64 0, i32 1, i64 %1568
  %1570 = getelementptr inbounds %union.b_mode_info, %union.b_mode_info* %1569, i64 -4, i32 0
  br label %1571

1571:                                             ; preds = %1567, %1563, %1560
  %1572 = phi i32* [ %1570, %1567 ], [ %1566, %1563 ], [ %1532, %1560 ]
  %1573 = load i32, i32* %1572, align 4
  %1574 = icmp eq i32 %1557, 0
  %1575 = zext i1 %1574 to i64
  %1576 = icmp eq i32 %1573, 0
  %1577 = zext i1 %1576 to i64
  %1578 = icmp eq i32 %1557, %1573
  %1579 = zext i1 %1578 to i64
  %1580 = shl nuw nsw i64 %1577, 2
  %1581 = shl nuw nsw i64 %1575, 1
  %1582 = or i64 %1581, %1579
  %1583 = or i64 %1582, %1580
  %1584 = getelementptr inbounds [8 x [3 x i8]], [8 x [3 x i8]]* @vp8_sub_mv_ref_prob3, i64 0, i64 %1583, i64 0
  %1585 = load i8, i8* %1584, align 1
  %1586 = zext i8 %1585 to i32
  %1587 = load i32, i32* %7, align 4
  %1588 = add i32 %1587, -1
  %1589 = mul i32 %1588, %1586
  %1590 = lshr i32 %1589, 8
  %1591 = add nuw nsw i32 %1590, 1
  %1592 = load i32, i32* %13, align 8
  %1593 = icmp slt i32 %1592, 0
  br i1 %1593, label %1594, label %1596

1594:                                             ; preds = %1571
  tail call void @vp8dx_bool_decoder_fill(%struct.BOOL_DECODER* %6) #3
  %1595 = load i32, i32* %13, align 8
  br label %1596

1596:                                             ; preds = %1594, %1571
  %1597 = phi i32 [ %1595, %1594 ], [ %1592, %1571 ]
  %1598 = load i64, i64* %20, align 8
  %1599 = zext i32 %1591 to i64
  %1600 = shl i64 %1599, 56
  %1601 = icmp ult i64 %1598, %1600
  br i1 %1601, label %1606, label %1602

1602:                                             ; preds = %1596
  %1603 = load i32, i32* %7, align 4
  %1604 = sub i32 %1603, %1591
  %1605 = sub i64 %1598, %1600
  br label %1606

1606:                                             ; preds = %1602, %1596
  %1607 = phi i64 [ %1605, %1602 ], [ %1598, %1596 ]
  %1608 = phi i32 [ %1604, %1602 ], [ %1591, %1596 ]
  %1609 = phi i1 [ false, %1602 ], [ true, %1596 ]
  %1610 = and i32 %1608, 255
  %1611 = zext i32 %1610 to i64
  %1612 = getelementptr inbounds [256 x i8], [256 x i8]* @vp8_norm, i64 0, i64 %1611
  %1613 = load i8, i8* %1612, align 1
  %1614 = zext i8 %1613 to i32
  %1615 = shl i32 %1608, %1614
  %1616 = zext i8 %1613 to i64
  %1617 = shl i64 %1607, %1616
  %1618 = sub nsw i32 %1597, %1614
  store i64 %1617, i64* %20, align 8
  store i32 %1618, i32* %13, align 8
  store i32 %1615, i32* %7, align 4
  br i1 %1609, label %1702, label %1619

1619:                                             ; preds = %1606
  %1620 = getelementptr inbounds [8 x [3 x i8]], [8 x [3 x i8]]* @vp8_sub_mv_ref_prob3, i64 0, i64 %1583, i64 1
  %1621 = load i8, i8* %1620, align 1
  %1622 = zext i8 %1621 to i32
  %1623 = add i32 %1615, -1
  %1624 = mul i32 %1623, %1622
  %1625 = lshr i32 %1624, 8
  %1626 = add nuw nsw i32 %1625, 1
  %1627 = icmp slt i32 %1618, 0
  br i1 %1627, label %1628, label %1631

1628:                                             ; preds = %1619
  tail call void @vp8dx_bool_decoder_fill(%struct.BOOL_DECODER* %6) #3
  %1629 = load i32, i32* %13, align 8
  %1630 = load i64, i64* %20, align 8
  br label %1631

1631:                                             ; preds = %1628, %1619
  %1632 = phi i64 [ %1630, %1628 ], [ %1617, %1619 ]
  %1633 = phi i32 [ %1629, %1628 ], [ %1618, %1619 ]
  %1634 = zext i32 %1626 to i64
  %1635 = shl i64 %1634, 56
  %1636 = icmp ult i64 %1632, %1635
  br i1 %1636, label %1641, label %1637

1637:                                             ; preds = %1631
  %1638 = load i32, i32* %7, align 4
  %1639 = sub i32 %1638, %1626
  %1640 = sub i64 %1632, %1635
  br label %1641

1641:                                             ; preds = %1637, %1631
  %1642 = phi i64 [ %1640, %1637 ], [ %1632, %1631 ]
  %1643 = phi i32 [ %1639, %1637 ], [ %1626, %1631 ]
  %1644 = phi i1 [ false, %1637 ], [ true, %1631 ]
  %1645 = and i32 %1643, 255
  %1646 = zext i32 %1645 to i64
  %1647 = getelementptr inbounds [256 x i8], [256 x i8]* @vp8_norm, i64 0, i64 %1646
  %1648 = load i8, i8* %1647, align 1
  %1649 = zext i8 %1648 to i32
  %1650 = shl i32 %1643, %1649
  %1651 = zext i8 %1648 to i64
  %1652 = shl i64 %1642, %1651
  %1653 = sub nsw i32 %1633, %1649
  store i64 %1652, i64* %20, align 8
  store i32 %1653, i32* %13, align 8
  store i32 %1650, i32* %7, align 4
  br i1 %1644, label %1698, label %1654

1654:                                             ; preds = %1641
  %1655 = getelementptr inbounds [8 x [3 x i8]], [8 x [3 x i8]]* @vp8_sub_mv_ref_prob3, i64 0, i64 %1583, i64 2
  %1656 = load i8, i8* %1655, align 1
  %1657 = zext i8 %1656 to i32
  %1658 = add i32 %1650, -1
  %1659 = mul i32 %1658, %1657
  %1660 = lshr i32 %1659, 8
  %1661 = add nuw nsw i32 %1660, 1
  %1662 = icmp slt i32 %1653, 0
  br i1 %1662, label %1663, label %1666

1663:                                             ; preds = %1654
  tail call void @vp8dx_bool_decoder_fill(%struct.BOOL_DECODER* %6) #3
  %1664 = load i32, i32* %13, align 8
  %1665 = load i64, i64* %20, align 8
  br label %1666

1666:                                             ; preds = %1663, %1654
  %1667 = phi i64 [ %1665, %1663 ], [ %1652, %1654 ]
  %1668 = phi i32 [ %1664, %1663 ], [ %1653, %1654 ]
  %1669 = zext i32 %1661 to i64
  %1670 = shl i64 %1669, 56
  %1671 = icmp ult i64 %1667, %1670
  br i1 %1671, label %1676, label %1672

1672:                                             ; preds = %1666
  %1673 = load i32, i32* %7, align 4
  %1674 = sub i32 %1673, %1661
  %1675 = sub i64 %1667, %1670
  br label %1676

1676:                                             ; preds = %1672, %1666
  %1677 = phi i64 [ %1675, %1672 ], [ %1667, %1666 ]
  %1678 = phi i32 [ %1674, %1672 ], [ %1661, %1666 ]
  %1679 = phi i1 [ false, %1672 ], [ true, %1666 ]
  %1680 = and i32 %1678, 255
  %1681 = zext i32 %1680 to i64
  %1682 = getelementptr inbounds [256 x i8], [256 x i8]* @vp8_norm, i64 0, i64 %1681
  %1683 = load i8, i8* %1682, align 1
  %1684 = zext i8 %1683 to i32
  %1685 = shl i32 %1678, %1684
  %1686 = zext i8 %1683 to i64
  %1687 = shl i64 %1677, %1686
  %1688 = sub nsw i32 %1668, %1684
  store i64 %1687, i64* %20, align 8
  store i32 %1688, i32* %13, align 8
  store i32 %1685, i32* %7, align 4
  br i1 %1679, label %1706, label %1689

1689:                                             ; preds = %1676
  %1690 = tail call fastcc i32 @read_mvcomponent(%struct.BOOL_DECODER* %6, %struct.mv_context* %613) #3
  %1691 = trunc i32 %1690 to i16
  %1692 = shl i16 %1691, 1
  %1693 = add i16 %1692, %1533
  %1694 = tail call fastcc i32 @read_mvcomponent(%struct.BOOL_DECODER* %6, %struct.mv_context* %614) #3
  %1695 = trunc i32 %1694 to i16
  %1696 = shl i16 %1695, 1
  %1697 = add i16 %1696, %1535
  br label %1706

1698:                                             ; preds = %1641
  %1699 = trunc i32 %1573 to i16
  %1700 = lshr i32 %1573, 16
  %1701 = trunc i32 %1700 to i16
  br label %1706

1702:                                             ; preds = %1606
  %1703 = trunc i32 %1557 to i16
  %1704 = lshr i32 %1557, 16
  %1705 = trunc i32 %1704 to i16
  br label %1706

1706:                                             ; preds = %1702, %1698, %1689, %1676
  %1707 = phi i16 [ %1705, %1702 ], [ %1701, %1698 ], [ 0, %1676 ], [ %1697, %1689 ]
  %1708 = phi i16 [ %1703, %1702 ], [ %1699, %1698 ], [ 0, %1676 ], [ %1693, %1689 ]
  %1709 = sext i16 %1707 to i32
  %1710 = icmp sgt i32 %1350, %1709
  %1711 = icmp slt i32 %1348, %1709
  %1712 = or i1 %1710, %1711
  %1713 = sext i16 %1708 to i32
  %1714 = icmp sgt i32 %1345, %1713
  %1715 = or i1 %1712, %1714
  %1716 = icmp slt i32 %1346, %1713
  %1717 = or i1 %1716, %1715
  %1718 = load i8, i8* %1032, align 2
  %1719 = zext i1 %1717 to i8
  %1720 = or i8 %1718, %1719
  store i8 %1720, i8* %1032, align 2
  %1721 = load i8, i8* %1536, align 1
  %1722 = zext i8 %1721 to i32
  %1723 = trunc i64 %1538 to i32
  %1724 = mul nuw nsw i32 %1722, %1723
  %1725 = zext i32 %1724 to i64
  %1726 = getelementptr inbounds [4 x [16 x i8]], [4 x [16 x i8]]* @mbsplit_fill_offset, i64 0, i64 %1530, i64 %1725
  %1727 = zext i16 %1707 to i32
  %1728 = shl nuw i32 %1727, 16
  %1729 = zext i16 %1708 to i32
  %1730 = or i32 %1728, %1729
  %1731 = add nsw i32 %1722, -1
  %1732 = and i32 %1722, 3
  %1733 = icmp eq i32 %1732, 0
  br i1 %1733, label %1745, label %1734

1734:                                             ; preds = %1706, %1734
  %1735 = phi i8* [ %1741, %1734 ], [ %1726, %1706 ]
  %1736 = phi i32 [ %1742, %1734 ], [ %1722, %1706 ]
  %1737 = phi i32 [ %1743, %1734 ], [ %1732, %1706 ]
  %1738 = load i8, i8* %1735, align 1
  %1739 = zext i8 %1738 to i64
  %1740 = getelementptr inbounds %struct.modeinfo, %struct.modeinfo* %626, i64 0, i32 1, i64 %1739, i32 0
  store i32 %1730, i32* %1740, align 4
  %1741 = getelementptr inbounds i8, i8* %1735, i64 1
  %1742 = add i32 %1736, -1
  %1743 = add i32 %1737, -1
  %1744 = icmp eq i32 %1743, 0
  br i1 %1744, label %1745, label %1734, !llvm.loop !2

1745:                                             ; preds = %1734, %1706
  %1746 = phi i8* [ %1726, %1706 ], [ %1741, %1734 ]
  %1747 = phi i32 [ %1722, %1706 ], [ %1742, %1734 ]
  %1748 = icmp ult i32 %1731, 3
  br i1 %1748, label %1770, label %1749

1749:                                             ; preds = %1745, %1749
  %1750 = phi i8* [ %1767, %1749 ], [ %1746, %1745 ]
  %1751 = phi i32 [ %1768, %1749 ], [ %1747, %1745 ]
  %1752 = load i8, i8* %1750, align 1
  %1753 = zext i8 %1752 to i64
  %1754 = getelementptr inbounds %struct.modeinfo, %struct.modeinfo* %626, i64 0, i32 1, i64 %1753, i32 0
  store i32 %1730, i32* %1754, align 4
  %1755 = getelementptr inbounds i8, i8* %1750, i64 1
  %1756 = load i8, i8* %1755, align 1
  %1757 = zext i8 %1756 to i64
  %1758 = getelementptr inbounds %struct.modeinfo, %struct.modeinfo* %626, i64 0, i32 1, i64 %1757, i32 0
  store i32 %1730, i32* %1758, align 4
  %1759 = getelementptr inbounds i8, i8* %1750, i64 2
  %1760 = load i8, i8* %1759, align 1
  %1761 = zext i8 %1760 to i64
  %1762 = getelementptr inbounds %struct.modeinfo, %struct.modeinfo* %626, i64 0, i32 1, i64 %1761, i32 0
  store i32 %1730, i32* %1762, align 4
  %1763 = getelementptr inbounds i8, i8* %1750, i64 3
  %1764 = load i8, i8* %1763, align 1
  %1765 = zext i8 %1764 to i64
  %1766 = getelementptr inbounds %struct.modeinfo, %struct.modeinfo* %626, i64 0, i32 1, i64 %1765, i32 0
  store i32 %1730, i32* %1766, align 4
  %1767 = getelementptr inbounds i8, i8* %1750, i64 4
  %1768 = add i32 %1751, -4
  %1769 = icmp eq i32 %1768, 0
  br i1 %1769, label %1770, label %1749

1770:                                             ; preds = %1749, %1745
  %1771 = add nuw nsw i64 %1538, 1
  %1772 = icmp eq i64 %1771, %1529
  br i1 %1772, label %1773, label %1537

1773:                                             ; preds = %1770
  %1774 = trunc i32 %1528 to i8
  %1775 = getelementptr inbounds %struct.modeinfo, %struct.modeinfo* %626, i64 0, i32 0, i32 5
  store i8 %1774, i8* %1775, align 4
  %1776 = getelementptr inbounds %struct.modeinfo, %struct.modeinfo* %626, i64 0, i32 1, i64 15, i32 0
  %1777 = load i32, i32* %1776, align 4
  %1778 = getelementptr inbounds %struct.modeinfo, %struct.modeinfo* %626, i64 0, i32 0, i32 4, i32 0
  store i32 %1777, i32* %1778, align 4
  %1779 = getelementptr inbounds %struct.modeinfo, %struct.modeinfo* %626, i64 0, i32 0, i32 0
  store i8 9, i8* %1779, align 4
  store i8 1, i8* %783, align 1
  br label %1873

1780:                                             ; preds = %1416
  %1781 = getelementptr inbounds %struct.modeinfo, %struct.modeinfo* %626, i64 0, i32 0, i32 4
  %1782 = bitcast %union.int_mv* %1781 to %struct.MV*
  %1783 = tail call fastcc i32 @read_mvcomponent(%struct.BOOL_DECODER* %6, %struct.mv_context* %613) #3
  %1784 = trunc i32 %1783 to i16
  %1785 = shl i16 %1784, 1
  %1786 = bitcast %union.int_mv* %1781 to i16*
  store i16 %1785, i16* %1786, align 2
  %1787 = tail call fastcc i32 @read_mvcomponent(%struct.BOOL_DECODER* %6, %struct.mv_context* %614) #3
  %1788 = trunc i32 %1787 to i16
  %1789 = shl i16 %1788, 1
  %1790 = getelementptr inbounds %struct.MV, %struct.MV* %1782, i64 0, i32 1
  %1791 = load i16, i16* %1786, align 4
  %1792 = add i16 %1791, %1379
  store i16 %1792, i16* %1786, align 4
  %1793 = add i16 %1789, %1368
  store i16 %1793, i16* %1790, align 2
  %1794 = sext i16 %1793 to i32
  %1795 = icmp sgt i32 %1350, %1794
  %1796 = icmp slt i32 %1348, %1794
  %1797 = or i1 %1795, %1796
  %1798 = sext i16 %1792 to i32
  %1799 = icmp sgt i32 %1345, %1798
  %1800 = or i1 %1799, %1797
  %1801 = icmp slt i32 %1346, %1798
  %1802 = or i1 %1801, %1800
  %1803 = zext i1 %1802 to i8
  store i8 %1803, i8* %1032, align 2
  %1804 = getelementptr inbounds %struct.modeinfo, %struct.modeinfo* %626, i64 0, i32 0, i32 0
  store i8 8, i8* %1804, align 4
  br label %1873

1805:                                             ; preds = %1329
  %1806 = getelementptr inbounds %struct.modeinfo, %struct.modeinfo* %626, i64 0, i32 0, i32 0
  store i8 6, i8* %1806, align 4
  %1807 = load i32, i32* %605, align 8
  %1808 = getelementptr inbounds %struct.modeinfo, %struct.modeinfo* %626, i64 0, i32 0, i32 4
  %1809 = getelementptr inbounds %union.int_mv, %union.int_mv* %1808, i64 0, i32 0
  store i32 %1807, i32* %1809, align 4
  %1810 = bitcast %union.int_mv* %1808 to %struct.MV*
  %1811 = getelementptr inbounds %struct.MV, %struct.MV* %1810, i64 0, i32 1
  %1812 = ashr i32 %1807, 16
  %1813 = load i32, i32* %587, align 4
  %1814 = add nsw i32 %1813, -128
  %1815 = icmp sgt i32 %1814, %1812
  br i1 %1815, label %1820, label %1816

1816:                                             ; preds = %1805
  %1817 = load i32, i32* %588, align 8
  %1818 = add nsw i32 %1817, 128
  %1819 = icmp slt i32 %1818, %1812
  br i1 %1819, label %1820, label %1823

1820:                                             ; preds = %1816, %1805
  %1821 = phi i32 [ %1814, %1805 ], [ %1818, %1816 ]
  %1822 = trunc i32 %1821 to i16
  store i16 %1822, i16* %1811, align 2
  br label %1823

1823:                                             ; preds = %1820, %1816
  %1824 = bitcast %union.int_mv* %1808 to i16*
  %1825 = shl i32 %1807, 16
  %1826 = ashr exact i32 %1825, 16
  %1827 = load i32, i32* %575, align 4
  %1828 = add nsw i32 %1827, -128
  %1829 = icmp sgt i32 %1828, %1826
  br i1 %1829, label %1830, label %1832

1830:                                             ; preds = %1823
  %1831 = trunc i32 %1828 to i16
  store i16 %1831, i16* %1824, align 4
  br label %1873

1832:                                             ; preds = %1823
  %1833 = load i32, i32* %580, align 16
  %1834 = add nsw i32 %1833, 128
  %1835 = icmp slt i32 %1834, %1826
  br i1 %1835, label %1836, label %1873

1836:                                             ; preds = %1832
  %1837 = trunc i32 %1834 to i16
  store i16 %1837, i16* %1824, align 4
  br label %1873

1838:                                             ; preds = %1294
  %1839 = getelementptr inbounds %struct.modeinfo, %struct.modeinfo* %626, i64 0, i32 0, i32 0
  store i8 5, i8* %1839, align 4
  %1840 = getelementptr inbounds %struct.modeinfo, %struct.modeinfo* %626, i64 0, i32 0, i32 4
  %1841 = getelementptr inbounds %union.int_mv, %union.int_mv* %1840, i64 0, i32 0
  store i32 %1270, i32* %1841, align 4
  %1842 = bitcast %union.int_mv* %1840 to %struct.MV*
  %1843 = getelementptr inbounds %struct.MV, %struct.MV* %1842, i64 0, i32 1
  %1844 = ashr i32 %1270, 16
  %1845 = load i32, i32* %587, align 4
  %1846 = add nsw i32 %1845, -128
  %1847 = icmp sgt i32 %1846, %1844
  br i1 %1847, label %1852, label %1848

1848:                                             ; preds = %1838
  %1849 = load i32, i32* %588, align 8
  %1850 = add nsw i32 %1849, 128
  %1851 = icmp slt i32 %1850, %1844
  br i1 %1851, label %1852, label %1855

1852:                                             ; preds = %1848, %1838
  %1853 = phi i32 [ %1846, %1838 ], [ %1850, %1848 ]
  %1854 = trunc i32 %1853 to i16
  store i16 %1854, i16* %1843, align 2
  br label %1855

1855:                                             ; preds = %1852, %1848
  %1856 = bitcast %union.int_mv* %1840 to i16*
  %1857 = shl i32 %1270, 16
  %1858 = ashr exact i32 %1857, 16
  %1859 = load i32, i32* %575, align 4
  %1860 = add nsw i32 %1859, -128
  %1861 = icmp sgt i32 %1860, %1858
  br i1 %1861, label %1862, label %1864

1862:                                             ; preds = %1855
  %1863 = trunc i32 %1860 to i16
  store i16 %1863, i16* %1856, align 4
  br label %1873

1864:                                             ; preds = %1855
  %1865 = load i32, i32* %580, align 16
  %1866 = add nsw i32 %1865, 128
  %1867 = icmp slt i32 %1866, %1858
  br i1 %1867, label %1868, label %1873

1868:                                             ; preds = %1864
  %1869 = trunc i32 %1866 to i16
  store i16 %1869, i16* %1856, align 4
  br label %1873

1870:                                             ; preds = %1241
  %1871 = getelementptr inbounds %struct.modeinfo, %struct.modeinfo* %626, i64 0, i32 0, i32 0
  store i8 7, i8* %1871, align 4
  %1872 = getelementptr inbounds %struct.modeinfo, %struct.modeinfo* %626, i64 0, i32 0, i32 4, i32 0
  store i32 0, i32* %1872, align 4
  br label %1873

1873:                                             ; preds = %1870, %1868, %1864, %1862, %1836, %1832, %1830, %1780, %1773
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %600) #3
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %595) #3
  br label %2037

1874:                                             ; preds = %1011
  %1875 = getelementptr inbounds %struct.modeinfo, %struct.modeinfo* %626, i64 0, i32 0, i32 4, i32 0
  store i32 0, i32* %1875, align 4
  %1876 = load i32, i32* %7, align 4
  %1877 = load i32, i32* %13, align 8
  br label %1878

1878:                                             ; preds = %1905, %1874
  %1879 = phi i32 [ %1877, %1874 ], [ %1917, %1905 ]
  %1880 = phi i32 [ %1876, %1874 ], [ %1914, %1905 ]
  %1881 = phi i8 [ 0, %1874 ], [ %1921, %1905 ]
  %1882 = sext i8 %1881 to i32
  %1883 = ashr i32 %1882, 1
  %1884 = sext i32 %1883 to i64
  %1885 = getelementptr inbounds %struct.VP8D_COMP, %struct.VP8D_COMP* %0, i64 0, i32 2, i32 59, i32 1, i64 %1884
  %1886 = load i8, i8* %1885, align 1
  %1887 = zext i8 %1886 to i32
  %1888 = add i32 %1880, -1
  %1889 = mul i32 %1888, %1887
  %1890 = lshr i32 %1889, 8
  %1891 = add nuw nsw i32 %1890, 1
  %1892 = icmp slt i32 %1879, 0
  br i1 %1892, label %1893, label %1895

1893:                                             ; preds = %1878
  tail call void @vp8dx_bool_decoder_fill(%struct.BOOL_DECODER* %6) #3
  %1894 = load i32, i32* %13, align 8
  br label %1895

1895:                                             ; preds = %1893, %1878
  %1896 = phi i32 [ %1894, %1893 ], [ %1879, %1878 ]
  %1897 = load i64, i64* %20, align 8
  %1898 = zext i32 %1891 to i64
  %1899 = shl i64 %1898, 56
  %1900 = icmp ult i64 %1897, %1899
  br i1 %1900, label %1905, label %1901

1901:                                             ; preds = %1895
  %1902 = load i32, i32* %7, align 4
  %1903 = sub i32 %1902, %1891
  %1904 = sub i64 %1897, %1899
  br label %1905

1905:                                             ; preds = %1901, %1895
  %1906 = phi i64 [ %1904, %1901 ], [ %1897, %1895 ]
  %1907 = phi i32 [ %1903, %1901 ], [ %1891, %1895 ]
  %1908 = phi i32 [ 1, %1901 ], [ 0, %1895 ]
  %1909 = and i32 %1907, 255
  %1910 = zext i32 %1909 to i64
  %1911 = getelementptr inbounds [256 x i8], [256 x i8]* @vp8_norm, i64 0, i64 %1910
  %1912 = load i8, i8* %1911, align 1
  %1913 = zext i8 %1912 to i32
  %1914 = shl i32 %1907, %1913
  %1915 = zext i8 %1912 to i64
  %1916 = shl i64 %1906, %1915
  %1917 = sub nsw i32 %1896, %1913
  store i64 %1916, i64* %20, align 8
  store i32 %1917, i32* %13, align 8
  store i32 %1914, i32* %7, align 4
  %1918 = add nuw nsw i32 %1908, %1882
  %1919 = sext i32 %1918 to i64
  %1920 = getelementptr inbounds [0 x i8], [0 x i8]* @vp8_ymode_tree, i64 0, i64 %1919
  %1921 = load i8, i8* %1920, align 1
  %1922 = icmp sgt i8 %1921, 0
  br i1 %1922, label %1878, label %1923

1923:                                             ; preds = %1905
  %1924 = sext i8 %1921 to i32
  %1925 = sub nsw i32 0, %1924
  %1926 = trunc i32 %1925 to i8
  %1927 = getelementptr inbounds %struct.modeinfo, %struct.modeinfo* %626, i64 0, i32 0, i32 0
  store i8 %1926, i8* %1927, align 4
  %1928 = and i32 %1925, 255
  %1929 = icmp eq i32 %1928, 4
  br i1 %1929, label %1930, label %1986

1930:                                             ; preds = %1923
  store i8 1, i8* %783, align 1
  br label %1931

1931:                                             ; preds = %1980, %1930
  %1932 = phi i64 [ %1984, %1980 ], [ 0, %1930 ]
  %1933 = load i32, i32* %7, align 4
  %1934 = load i32, i32* %13, align 8
  br label %1935

1935:                                             ; preds = %1962, %1931
  %1936 = phi i32 [ %1934, %1931 ], [ %1974, %1962 ]
  %1937 = phi i32 [ %1933, %1931 ], [ %1971, %1962 ]
  %1938 = phi i8 [ 0, %1931 ], [ %1978, %1962 ]
  %1939 = sext i8 %1938 to i32
  %1940 = ashr i32 %1939, 1
  %1941 = sext i32 %1940 to i64
  %1942 = getelementptr inbounds %struct.VP8D_COMP, %struct.VP8D_COMP* %0, i64 0, i32 2, i32 59, i32 0, i64 %1941
  %1943 = load i8, i8* %1942, align 1
  %1944 = zext i8 %1943 to i32
  %1945 = add i32 %1937, -1
  %1946 = mul i32 %1945, %1944
  %1947 = lshr i32 %1946, 8
  %1948 = add nuw nsw i32 %1947, 1
  %1949 = icmp slt i32 %1936, 0
  br i1 %1949, label %1950, label %1952

1950:                                             ; preds = %1935
  tail call void @vp8dx_bool_decoder_fill(%struct.BOOL_DECODER* %6) #3
  %1951 = load i32, i32* %13, align 8
  br label %1952

1952:                                             ; preds = %1950, %1935
  %1953 = phi i32 [ %1951, %1950 ], [ %1936, %1935 ]
  %1954 = load i64, i64* %20, align 8
  %1955 = zext i32 %1948 to i64
  %1956 = shl i64 %1955, 56
  %1957 = icmp ult i64 %1954, %1956
  br i1 %1957, label %1962, label %1958

1958:                                             ; preds = %1952
  %1959 = load i32, i32* %7, align 4
  %1960 = sub i32 %1959, %1948
  %1961 = sub i64 %1954, %1956
  br label %1962

1962:                                             ; preds = %1958, %1952
  %1963 = phi i64 [ %1961, %1958 ], [ %1954, %1952 ]
  %1964 = phi i32 [ %1960, %1958 ], [ %1948, %1952 ]
  %1965 = phi i32 [ 1, %1958 ], [ 0, %1952 ]
  %1966 = and i32 %1964, 255
  %1967 = zext i32 %1966 to i64
  %1968 = getelementptr inbounds [256 x i8], [256 x i8]* @vp8_norm, i64 0, i64 %1967
  %1969 = load i8, i8* %1968, align 1
  %1970 = zext i8 %1969 to i32
  %1971 = shl i32 %1964, %1970
  %1972 = zext i8 %1969 to i64
  %1973 = shl i64 %1963, %1972
  %1974 = sub nsw i32 %1953, %1970
  store i64 %1973, i64* %20, align 8
  store i32 %1974, i32* %13, align 8
  store i32 %1971, i32* %7, align 4
  %1975 = add nuw nsw i32 %1965, %1939
  %1976 = sext i32 %1975 to i64
  %1977 = getelementptr inbounds [0 x i8], [0 x i8]* @vp8_bmode_tree, i64 0, i64 %1976
  %1978 = load i8, i8* %1977, align 1
  %1979 = icmp sgt i8 %1978, 0
  br i1 %1979, label %1935, label %1980

1980:                                             ; preds = %1962
  %1981 = sext i8 %1978 to i32
  %1982 = sub nsw i32 0, %1981
  %1983 = getelementptr inbounds %struct.modeinfo, %struct.modeinfo* %626, i64 0, i32 1, i64 %1932, i32 0
  store i32 %1982, i32* %1983, align 4
  %1984 = add nuw nsw i64 %1932, 1
  %1985 = icmp eq i64 %1984, 16
  br i1 %1985, label %1986, label %1931

1986:                                             ; preds = %1980, %1923
  %1987 = load i32, i32* %7, align 4
  %1988 = load i32, i32* %13, align 8
  br label %1989

1989:                                             ; preds = %2016, %1986
  %1990 = phi i32 [ %1988, %1986 ], [ %2028, %2016 ]
  %1991 = phi i32 [ %1987, %1986 ], [ %2025, %2016 ]
  %1992 = phi i8 [ 0, %1986 ], [ %2032, %2016 ]
  %1993 = sext i8 %1992 to i32
  %1994 = ashr i32 %1993, 1
  %1995 = sext i32 %1994 to i64
  %1996 = getelementptr inbounds %struct.VP8D_COMP, %struct.VP8D_COMP* %0, i64 0, i32 2, i32 59, i32 2, i64 %1995
  %1997 = load i8, i8* %1996, align 1
  %1998 = zext i8 %1997 to i32
  %1999 = add i32 %1991, -1
  %2000 = mul i32 %1999, %1998
  %2001 = lshr i32 %2000, 8
  %2002 = add nuw nsw i32 %2001, 1
  %2003 = icmp slt i32 %1990, 0
  br i1 %2003, label %2004, label %2006

2004:                                             ; preds = %1989
  tail call void @vp8dx_bool_decoder_fill(%struct.BOOL_DECODER* %6) #3
  %2005 = load i32, i32* %13, align 8
  br label %2006

2006:                                             ; preds = %2004, %1989
  %2007 = phi i32 [ %2005, %2004 ], [ %1990, %1989 ]
  %2008 = load i64, i64* %20, align 8
  %2009 = zext i32 %2002 to i64
  %2010 = shl i64 %2009, 56
  %2011 = icmp ult i64 %2008, %2010
  br i1 %2011, label %2016, label %2012

2012:                                             ; preds = %2006
  %2013 = load i32, i32* %7, align 4
  %2014 = sub i32 %2013, %2002
  %2015 = sub i64 %2008, %2010
  br label %2016

2016:                                             ; preds = %2012, %2006
  %2017 = phi i64 [ %2015, %2012 ], [ %2008, %2006 ]
  %2018 = phi i32 [ %2014, %2012 ], [ %2002, %2006 ]
  %2019 = phi i32 [ 1, %2012 ], [ 0, %2006 ]
  %2020 = and i32 %2018, 255
  %2021 = zext i32 %2020 to i64
  %2022 = getelementptr inbounds [256 x i8], [256 x i8]* @vp8_norm, i64 0, i64 %2021
  %2023 = load i8, i8* %2022, align 1
  %2024 = zext i8 %2023 to i32
  %2025 = shl i32 %2018, %2024
  %2026 = zext i8 %2023 to i64
  %2027 = shl i64 %2017, %2026
  %2028 = sub nsw i32 %2007, %2024
  store i64 %2027, i64* %20, align 8
  store i32 %2028, i32* %13, align 8
  store i32 %2025, i32* %7, align 4
  %2029 = add nuw nsw i32 %2019, %1993
  %2030 = sext i32 %2029 to i64
  %2031 = getelementptr inbounds [0 x i8], [0 x i8]* @vp8_uv_mode_tree, i64 0, i64 %2030
  %2032 = load i8, i8* %2031, align 1
  %2033 = icmp sgt i8 %2032, 0
  br i1 %2033, label %1989, label %2034

2034:                                             ; preds = %2016
  %2035 = sub i8 0, %2032
  %2036 = getelementptr inbounds %struct.modeinfo, %struct.modeinfo* %626, i64 0, i32 0, i32 1
  store i8 %2035, i8* %2036, align 1
  br label %2037

2037:                                             ; preds = %986, %1873, %2034
  %2038 = load i32, i32* %587, align 4
  %2039 = add nsw i32 %2038, -128
  store i32 %2039, i32* %587, align 4
  %2040 = load i32, i32* %588, align 8
  %2041 = add nsw i32 %2040, -128
  store i32 %2041, i32* %588, align 8
  %2042 = getelementptr inbounds %struct.modeinfo, %struct.modeinfo* %626, i64 1
  %2043 = add nuw nsw i32 %625, 1
  %2044 = load i32, i32* %581, align 8
  %2045 = icmp slt i32 %2043, %2044
  br i1 %2045, label %624, label %2046

2046:                                             ; preds = %2037
  %2047 = load i32, i32* %575, align 4
  %2048 = load i32, i32* %580, align 16
  %2049 = load i32, i32* %576, align 4
  br label %2050

2050:                                             ; preds = %2046, %616
  %2051 = phi i32 [ %617, %616 ], [ %2049, %2046 ]
  %2052 = phi i32 [ %618, %616 ], [ %2048, %2046 ]
  %2053 = phi i32 [ %619, %616 ], [ %2047, %2046 ]
  %2054 = phi i32 [ %620, %616 ], [ %2044, %2046 ]
  %2055 = phi %struct.modeinfo* [ %622, %616 ], [ %2042, %2046 ]
  %2056 = add nsw i32 %2053, -128
  store i32 %2056, i32* %575, align 4
  %2057 = add nsw i32 %2052, -128
  store i32 %2057, i32* %580, align 16
  %2058 = getelementptr inbounds %struct.modeinfo, %struct.modeinfo* %2055, i64 1
  %2059 = add nuw nsw i32 %621, 1
  %2060 = icmp slt i32 %2059, %2051
  br i1 %2060, label %616, label %2061

2061:                                             ; preds = %2050, %574
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

declare void @vp8dx_bool_decoder_fill(%struct.BOOL_DECODER*) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define internal fastcc i32 @read_mvcomponent(%struct.BOOL_DECODER*, %struct.mv_context* nocapture readonly) unnamed_addr #0 {
  %3 = getelementptr inbounds %struct.mv_context, %struct.mv_context* %1, i64 0, i32 0, i64 0
  %4 = load i8, i8* %3, align 1
  %5 = zext i8 %4 to i32
  %6 = getelementptr inbounds %struct.BOOL_DECODER, %struct.BOOL_DECODER* %0, i64 0, i32 4
  %7 = load i32, i32* %6, align 4
  %8 = add i32 %7, -1
  %9 = mul i32 %8, %5
  %10 = lshr i32 %9, 8
  %11 = add nuw nsw i32 %10, 1
  %12 = getelementptr inbounds %struct.BOOL_DECODER, %struct.BOOL_DECODER* %0, i64 0, i32 3
  %13 = load i32, i32* %12, align 8
  %14 = icmp slt i32 %13, 0
  br i1 %14, label %15, label %17

15:                                               ; preds = %2
  tail call void @vp8dx_bool_decoder_fill(%struct.BOOL_DECODER* %0) #3
  %16 = load i32, i32* %12, align 8
  br label %17

17:                                               ; preds = %15, %2
  %18 = phi i32 [ %16, %15 ], [ %13, %2 ]
  %19 = getelementptr inbounds %struct.BOOL_DECODER, %struct.BOOL_DECODER* %0, i64 0, i32 2
  %20 = load i64, i64* %19, align 8
  %21 = zext i32 %11 to i64
  %22 = shl i64 %21, 56
  %23 = icmp ult i64 %20, %22
  br i1 %23, label %28, label %24

24:                                               ; preds = %17
  %25 = load i32, i32* %6, align 4
  %26 = sub i32 %25, %11
  %27 = sub i64 %20, %22
  br label %28

28:                                               ; preds = %17, %24
  %29 = phi i64 [ %27, %24 ], [ %20, %17 ]
  %30 = phi i32 [ %26, %24 ], [ %11, %17 ]
  %31 = phi i1 [ false, %24 ], [ true, %17 ]
  %32 = and i32 %30, 255
  %33 = zext i32 %32 to i64
  %34 = getelementptr inbounds [256 x i8], [256 x i8]* @vp8_norm, i64 0, i64 %33
  %35 = load i8, i8* %34, align 1
  %36 = zext i8 %35 to i32
  %37 = shl i32 %30, %36
  %38 = zext i8 %35 to i64
  %39 = shl i64 %29, %38
  %40 = sub nsw i32 %18, %36
  store i64 %39, i64* %19, align 8
  store i32 %40, i32* %12, align 8
  store i32 %37, i32* %6, align 4
  br i1 %31, label %173, label %41

41:                                               ; preds = %28
  %42 = getelementptr inbounds %struct.mv_context, %struct.mv_context* %1, i64 0, i32 0, i64 9
  %43 = load i8, i8* %42, align 1
  %44 = zext i8 %43 to i32
  %45 = add i32 %37, -1
  %46 = mul i32 %45, %44
  %47 = lshr i32 %46, 8
  %48 = add nuw nsw i32 %47, 1
  %49 = icmp slt i32 %40, 0
  br i1 %49, label %50, label %53

50:                                               ; preds = %41
  tail call void @vp8dx_bool_decoder_fill(%struct.BOOL_DECODER* %0) #3
  %51 = load i32, i32* %12, align 8
  %52 = load i64, i64* %19, align 8
  br label %53

53:                                               ; preds = %50, %41
  %54 = phi i64 [ %52, %50 ], [ %39, %41 ]
  %55 = phi i32 [ %51, %50 ], [ %40, %41 ]
  %56 = zext i32 %48 to i64
  %57 = shl i64 %56, 56
  %58 = icmp ult i64 %54, %57
  br i1 %58, label %63, label %59

59:                                               ; preds = %53
  %60 = load i32, i32* %6, align 4
  %61 = sub i32 %60, %48
  %62 = sub i64 %54, %57
  br label %63

63:                                               ; preds = %53, %59
  %64 = phi i64 [ %62, %59 ], [ %54, %53 ]
  %65 = phi i32 [ %61, %59 ], [ %48, %53 ]
  %66 = phi i32 [ 1, %59 ], [ 0, %53 ]
  %67 = and i32 %65, 255
  %68 = zext i32 %67 to i64
  %69 = getelementptr inbounds [256 x i8], [256 x i8]* @vp8_norm, i64 0, i64 %68
  %70 = load i8, i8* %69, align 1
  %71 = zext i8 %70 to i32
  %72 = shl i32 %65, %71
  %73 = zext i8 %70 to i64
  %74 = shl i64 %64, %73
  %75 = sub nsw i32 %55, %71
  store i64 %74, i64* %19, align 8
  store i32 %75, i32* %12, align 8
  store i32 %72, i32* %6, align 4
  %76 = getelementptr inbounds %struct.mv_context, %struct.mv_context* %1, i64 0, i32 0, i64 10
  %77 = load i8, i8* %76, align 1
  %78 = zext i8 %77 to i32
  %79 = add i32 %72, -1
  %80 = mul i32 %79, %78
  %81 = lshr i32 %80, 8
  %82 = add nuw nsw i32 %81, 1
  %83 = icmp slt i32 %75, 0
  br i1 %83, label %269, label %272

84:                                               ; preds = %317, %112
  %85 = phi i64 [ %328, %317 ], [ %123, %112 ]
  %86 = phi i32 [ %329, %317 ], [ %124, %112 ]
  %87 = phi i32 [ %326, %317 ], [ %121, %112 ]
  %88 = phi i64 [ 9, %317 ], [ %128, %112 ]
  %89 = phi i32 [ %330, %317 ], [ %127, %112 ]
  %90 = add nuw nsw i64 %88, 9
  %91 = getelementptr inbounds %struct.mv_context, %struct.mv_context* %1, i64 0, i32 0, i64 %90
  %92 = load i8, i8* %91, align 1
  %93 = zext i8 %92 to i32
  %94 = add i32 %87, -1
  %95 = mul i32 %94, %93
  %96 = lshr i32 %95, 8
  %97 = add nuw nsw i32 %96, 1
  %98 = icmp slt i32 %86, 0
  br i1 %98, label %99, label %102

99:                                               ; preds = %84
  tail call void @vp8dx_bool_decoder_fill(%struct.BOOL_DECODER* %0) #3
  %100 = load i32, i32* %12, align 8
  %101 = load i64, i64* %19, align 8
  br label %102

102:                                              ; preds = %99, %84
  %103 = phi i64 [ %101, %99 ], [ %85, %84 ]
  %104 = phi i32 [ %100, %99 ], [ %86, %84 ]
  %105 = zext i32 %97 to i64
  %106 = shl i64 %105, 56
  %107 = icmp ult i64 %103, %106
  br i1 %107, label %112, label %108

108:                                              ; preds = %102
  %109 = load i32, i32* %6, align 4
  %110 = sub i32 %109, %97
  %111 = sub i64 %103, %106
  br label %112

112:                                              ; preds = %102, %108
  %113 = phi i64 [ %111, %108 ], [ %103, %102 ]
  %114 = phi i32 [ %110, %108 ], [ %97, %102 ]
  %115 = phi i32 [ 1, %108 ], [ 0, %102 ]
  %116 = and i32 %114, 255
  %117 = zext i32 %116 to i64
  %118 = getelementptr inbounds [256 x i8], [256 x i8]* @vp8_norm, i64 0, i64 %117
  %119 = load i8, i8* %118, align 1
  %120 = zext i8 %119 to i32
  %121 = shl i32 %114, %120
  %122 = zext i8 %119 to i64
  %123 = shl i64 %113, %122
  %124 = sub nsw i32 %104, %120
  store i64 %123, i64* %19, align 8
  store i32 %124, i32* %12, align 8
  store i32 %121, i32* %6, align 4
  %125 = trunc i64 %88 to i32
  %126 = shl i32 %115, %125
  %127 = add nsw i32 %126, %89
  %128 = add nsw i64 %88, -1
  %129 = icmp ugt i64 %128, 3
  br i1 %129, label %84, label %130

130:                                              ; preds = %112
  %131 = and i32 %127, 65520
  %132 = icmp eq i32 %131, 0
  br i1 %132, label %168, label %133

133:                                              ; preds = %130
  %134 = getelementptr inbounds %struct.mv_context, %struct.mv_context* %1, i64 0, i32 0, i64 12
  %135 = load i8, i8* %134, align 1
  %136 = zext i8 %135 to i32
  %137 = add i32 %121, -1
  %138 = mul i32 %137, %136
  %139 = lshr i32 %138, 8
  %140 = add nuw nsw i32 %139, 1
  %141 = icmp slt i32 %124, 0
  br i1 %141, label %142, label %145

142:                                              ; preds = %133
  tail call void @vp8dx_bool_decoder_fill(%struct.BOOL_DECODER* %0) #3
  %143 = load i32, i32* %12, align 8
  %144 = load i64, i64* %19, align 8
  br label %145

145:                                              ; preds = %142, %133
  %146 = phi i64 [ %144, %142 ], [ %123, %133 ]
  %147 = phi i32 [ %143, %142 ], [ %124, %133 ]
  %148 = zext i32 %140 to i64
  %149 = shl i64 %148, 56
  %150 = icmp ult i64 %146, %149
  br i1 %150, label %155, label %151

151:                                              ; preds = %145
  %152 = load i32, i32* %6, align 4
  %153 = sub i32 %152, %140
  %154 = sub i64 %146, %149
  br label %155

155:                                              ; preds = %145, %151
  %156 = phi i64 [ %154, %151 ], [ %146, %145 ]
  %157 = phi i32 [ %153, %151 ], [ %140, %145 ]
  %158 = phi i1 [ false, %151 ], [ true, %145 ]
  %159 = and i32 %157, 255
  %160 = zext i32 %159 to i64
  %161 = getelementptr inbounds [256 x i8], [256 x i8]* @vp8_norm, i64 0, i64 %160
  %162 = load i8, i8* %161, align 1
  %163 = zext i8 %162 to i32
  %164 = shl i32 %157, %163
  %165 = zext i8 %162 to i64
  %166 = shl i64 %156, %165
  %167 = sub nsw i32 %147, %163
  store i64 %166, i64* %19, align 8
  store i32 %167, i32* %12, align 8
  store i32 %164, i32* %6, align 4
  br i1 %158, label %225, label %168

168:                                              ; preds = %155, %130
  %169 = phi i64 [ %166, %155 ], [ %123, %130 ]
  %170 = phi i32 [ %167, %155 ], [ %124, %130 ]
  %171 = phi i32 [ %164, %155 ], [ %121, %130 ]
  %172 = add nsw i32 %127, 8
  br label %225

173:                                              ; preds = %28
  %174 = getelementptr inbounds %struct.mv_context, %struct.mv_context* %1, i64 0, i32 0, i64 2
  br label %175

175:                                              ; preds = %204, %173
  %176 = phi i64 [ %39, %173 ], [ %215, %204 ]
  %177 = phi i32 [ %40, %173 ], [ %216, %204 ]
  %178 = phi i32 [ %37, %173 ], [ %213, %204 ]
  %179 = phi i8 [ 0, %173 ], [ %220, %204 ]
  %180 = sext i8 %179 to i32
  %181 = ashr i32 %180, 1
  %182 = sext i32 %181 to i64
  %183 = getelementptr inbounds i8, i8* %174, i64 %182
  %184 = load i8, i8* %183, align 1
  %185 = zext i8 %184 to i32
  %186 = add i32 %178, -1
  %187 = mul i32 %186, %185
  %188 = lshr i32 %187, 8
  %189 = add nuw nsw i32 %188, 1
  %190 = icmp slt i32 %177, 0
  br i1 %190, label %191, label %194

191:                                              ; preds = %175
  tail call void @vp8dx_bool_decoder_fill(%struct.BOOL_DECODER* %0) #3
  %192 = load i32, i32* %12, align 8
  %193 = load i64, i64* %19, align 8
  br label %194

194:                                              ; preds = %191, %175
  %195 = phi i64 [ %193, %191 ], [ %176, %175 ]
  %196 = phi i32 [ %192, %191 ], [ %177, %175 ]
  %197 = zext i32 %189 to i64
  %198 = shl i64 %197, 56
  %199 = icmp ult i64 %195, %198
  br i1 %199, label %204, label %200

200:                                              ; preds = %194
  %201 = load i32, i32* %6, align 4
  %202 = sub i32 %201, %189
  %203 = sub i64 %195, %198
  br label %204

204:                                              ; preds = %200, %194
  %205 = phi i64 [ %203, %200 ], [ %195, %194 ]
  %206 = phi i32 [ %202, %200 ], [ %189, %194 ]
  %207 = phi i32 [ 1, %200 ], [ 0, %194 ]
  %208 = and i32 %206, 255
  %209 = zext i32 %208 to i64
  %210 = getelementptr inbounds [256 x i8], [256 x i8]* @vp8_norm, i64 0, i64 %209
  %211 = load i8, i8* %210, align 1
  %212 = zext i8 %211 to i32
  %213 = shl i32 %206, %212
  %214 = zext i8 %211 to i64
  %215 = shl i64 %205, %214
  %216 = sub nsw i32 %196, %212
  store i64 %215, i64* %19, align 8
  store i32 %216, i32* %12, align 8
  store i32 %213, i32* %6, align 4
  %217 = add nuw nsw i32 %207, %180
  %218 = sext i32 %217 to i64
  %219 = getelementptr inbounds [0 x i8], [0 x i8]* @vp8_small_mvtree, i64 0, i64 %218
  %220 = load i8, i8* %219, align 1
  %221 = icmp sgt i8 %220, 0
  br i1 %221, label %175, label %222

222:                                              ; preds = %204
  %223 = sext i8 %220 to i32
  %224 = sub nsw i32 0, %223
  br label %225

225:                                              ; preds = %168, %155, %222
  %226 = phi i64 [ %215, %222 ], [ %169, %168 ], [ %166, %155 ]
  %227 = phi i32 [ %216, %222 ], [ %170, %168 ], [ %167, %155 ]
  %228 = phi i32 [ %213, %222 ], [ %171, %168 ], [ %164, %155 ]
  %229 = phi i32 [ %224, %222 ], [ %172, %168 ], [ %127, %155 ]
  %230 = icmp eq i32 %229, 0
  br i1 %230, label %268, label %231

231:                                              ; preds = %225
  %232 = getelementptr inbounds %struct.mv_context, %struct.mv_context* %1, i64 0, i32 0, i64 1
  %233 = load i8, i8* %232, align 1
  %234 = zext i8 %233 to i32
  %235 = add i32 %228, -1
  %236 = mul i32 %235, %234
  %237 = lshr i32 %236, 8
  %238 = add nuw nsw i32 %237, 1
  %239 = icmp slt i32 %227, 0
  br i1 %239, label %240, label %243

240:                                              ; preds = %231
  tail call void @vp8dx_bool_decoder_fill(%struct.BOOL_DECODER* %0) #3
  %241 = load i32, i32* %12, align 8
  %242 = load i64, i64* %19, align 8
  br label %243

243:                                              ; preds = %240, %231
  %244 = phi i64 [ %242, %240 ], [ %226, %231 ]
  %245 = phi i32 [ %241, %240 ], [ %227, %231 ]
  %246 = zext i32 %238 to i64
  %247 = shl i64 %246, 56
  %248 = icmp ult i64 %244, %247
  br i1 %248, label %253, label %249

249:                                              ; preds = %243
  %250 = load i32, i32* %6, align 4
  %251 = sub i32 %250, %238
  %252 = sub i64 %244, %247
  br label %253

253:                                              ; preds = %243, %249
  %254 = phi i64 [ %252, %249 ], [ %244, %243 ]
  %255 = phi i32 [ %251, %249 ], [ %238, %243 ]
  %256 = phi i1 [ false, %249 ], [ true, %243 ]
  %257 = and i32 %255, 255
  %258 = zext i32 %257 to i64
  %259 = getelementptr inbounds [256 x i8], [256 x i8]* @vp8_norm, i64 0, i64 %258
  %260 = load i8, i8* %259, align 1
  %261 = zext i8 %260 to i32
  %262 = shl i32 %255, %261
  %263 = zext i8 %260 to i64
  %264 = shl i64 %254, %263
  %265 = sub nsw i32 %245, %261
  store i64 %264, i64* %19, align 8
  store i32 %265, i32* %12, align 8
  store i32 %262, i32* %6, align 4
  %266 = sub nsw i32 0, %229
  %267 = select i1 %256, i32 %229, i32 %266
  ret i32 %267

268:                                              ; preds = %225
  ret i32 0

269:                                              ; preds = %63
  tail call void @vp8dx_bool_decoder_fill(%struct.BOOL_DECODER* %0) #3
  %270 = load i32, i32* %12, align 8
  %271 = load i64, i64* %19, align 8
  br label %272

272:                                              ; preds = %269, %63
  %273 = phi i64 [ %271, %269 ], [ %74, %63 ]
  %274 = phi i32 [ %270, %269 ], [ %75, %63 ]
  %275 = zext i32 %82 to i64
  %276 = shl i64 %275, 56
  %277 = icmp ult i64 %273, %276
  br i1 %277, label %282, label %278

278:                                              ; preds = %272
  %279 = load i32, i32* %6, align 4
  %280 = sub i32 %279, %82
  %281 = sub i64 %273, %276
  br label %282

282:                                              ; preds = %278, %272
  %283 = phi i64 [ %281, %278 ], [ %273, %272 ]
  %284 = phi i32 [ %280, %278 ], [ %82, %272 ]
  %285 = phi i32 [ 2, %278 ], [ 0, %272 ]
  %286 = and i32 %284, 255
  %287 = zext i32 %286 to i64
  %288 = getelementptr inbounds [256 x i8], [256 x i8]* @vp8_norm, i64 0, i64 %287
  %289 = load i8, i8* %288, align 1
  %290 = zext i8 %289 to i32
  %291 = shl i32 %284, %290
  %292 = zext i8 %289 to i64
  %293 = shl i64 %283, %292
  %294 = sub nsw i32 %274, %290
  store i64 %293, i64* %19, align 8
  store i32 %294, i32* %12, align 8
  store i32 %291, i32* %6, align 4
  %295 = or i32 %285, %66
  %296 = getelementptr inbounds %struct.mv_context, %struct.mv_context* %1, i64 0, i32 0, i64 11
  %297 = load i8, i8* %296, align 1
  %298 = zext i8 %297 to i32
  %299 = add i32 %291, -1
  %300 = mul i32 %299, %298
  %301 = lshr i32 %300, 8
  %302 = add nuw nsw i32 %301, 1
  %303 = icmp slt i32 %294, 0
  br i1 %303, label %304, label %307

304:                                              ; preds = %282
  tail call void @vp8dx_bool_decoder_fill(%struct.BOOL_DECODER* %0) #3
  %305 = load i32, i32* %12, align 8
  %306 = load i64, i64* %19, align 8
  br label %307

307:                                              ; preds = %304, %282
  %308 = phi i64 [ %306, %304 ], [ %293, %282 ]
  %309 = phi i32 [ %305, %304 ], [ %294, %282 ]
  %310 = zext i32 %302 to i64
  %311 = shl i64 %310, 56
  %312 = icmp ult i64 %308, %311
  br i1 %312, label %317, label %313

313:                                              ; preds = %307
  %314 = load i32, i32* %6, align 4
  %315 = sub i32 %314, %302
  %316 = sub i64 %308, %311
  br label %317

317:                                              ; preds = %313, %307
  %318 = phi i64 [ %316, %313 ], [ %308, %307 ]
  %319 = phi i32 [ %315, %313 ], [ %302, %307 ]
  %320 = phi i32 [ 4, %313 ], [ 0, %307 ]
  %321 = and i32 %319, 255
  %322 = zext i32 %321 to i64
  %323 = getelementptr inbounds [256 x i8], [256 x i8]* @vp8_norm, i64 0, i64 %322
  %324 = load i8, i8* %323, align 1
  %325 = zext i8 %324 to i32
  %326 = shl i32 %319, %325
  %327 = zext i8 %324 to i64
  %328 = shl i64 %318, %327
  %329 = sub nsw i32 %309, %325
  store i64 %328, i64* %19, align 8
  store i32 %329, i32* %12, align 8
  store i32 %326, i32* %6, align 4
  %330 = or i32 %320, %295
  br label %84
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = distinct !{!2, !3}
!3 = !{!"llvm.loop.unroll.disable"}
