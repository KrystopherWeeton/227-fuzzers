; ModuleID = '../../third_party/angle/src/image_util/loadimage.cpp'
source_filename = "../../third_party/angle/src/image_util/loadimage.cpp"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"struct.angle::R10G10B10A2" = type { i32 }

$_ZZN2gl12supportsSSE2EvE7checked = comdat any

$_ZZN2gl12supportsSSE2EvE8supports = comdat any

@_ZZN2gl12supportsSSE2EvE7checked = linkonce_odr hidden local_unnamed_addr global i8 0, comdat, align 1
@_ZZN2gl12supportsSSE2EvE8supports = linkonce_odr hidden local_unnamed_addr global i8 0, comdat, align 1

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @_ZN5angle13LoadA8ToRGBA8EmmmPKhmmPhmm(i64, i64, i64, i8* nocapture readonly, i64, i64, i8*, i64, i64) local_unnamed_addr #0 {
  %10 = load i8, i8* @_ZZN2gl12supportsSSE2EvE7checked, align 1, !range !2
  %11 = icmp eq i8 %10, 0
  br i1 %11, label %12, label %13

12:                                               ; preds = %9
  store i8 1, i8* @_ZZN2gl12supportsSSE2EvE7checked, align 1
  br label %13

13:                                               ; preds = %9, %12
  %14 = load i8, i8* @_ZZN2gl12supportsSSE2EvE8supports, align 1, !range !2
  %15 = icmp eq i8 %14, 0
  %16 = icmp ne i64 %2, 0
  br i1 %15, label %22, label %17

17:                                               ; preds = %13
  br i1 %16, label %18, label %381

18:                                               ; preds = %17
  %19 = icmp eq i64 %1, 0
  %20 = icmp ne i64 %0, 0
  %21 = shl i64 %0, 2
  br label %39

22:                                               ; preds = %13
  br i1 %16, label %23, label %381

23:                                               ; preds = %22
  %24 = icmp eq i64 %1, 0
  %25 = icmp eq i64 %0, 0
  %26 = shl i64 %0, 2
  %27 = add i64 %0, -8
  %28 = lshr i64 %27, 3
  %29 = add nuw nsw i64 %28, 1
  %30 = icmp ult i64 %0, 8
  %31 = and i64 %0, -8
  %32 = and i64 %29, 1
  %33 = icmp eq i64 %28, 0
  %34 = sub nuw nsw i64 %29, %32
  %35 = icmp eq i64 %32, 0
  %36 = icmp eq i64 %31, %0
  %37 = and i64 %0, 3
  %38 = icmp eq i64 %37, 0
  br label %243

39:                                               ; preds = %50, %18
  %40 = phi i64 [ 0, %18 ], [ %51, %50 ]
  %41 = mul i64 %40, %8
  %42 = add i64 %21, %41
  %43 = mul i64 %40, %5
  %44 = add i64 %43, %0
  br i1 %19, label %50, label %45

45:                                               ; preds = %39
  %46 = mul i64 %40, %5
  %47 = mul i64 %40, %8
  %48 = getelementptr inbounds i8, i8* %3, i64 %46
  %49 = getelementptr inbounds i8, i8* %6, i64 %47
  br label %53

50:                                               ; preds = %240, %39
  %51 = add nuw i64 %40, 1
  %52 = icmp eq i64 %51, %2
  br i1 %52, label %381, label %39

53:                                               ; preds = %240, %45
  %54 = phi i64 [ 0, %45 ], [ %241, %240 ]
  %55 = mul i64 %54, %7
  %56 = add i64 %41, %55
  %57 = getelementptr i8, i8* %6, i64 %56
  %58 = add i64 %42, %55
  %59 = getelementptr i8, i8* %6, i64 %58
  %60 = mul i64 %54, %4
  %61 = add i64 %43, %60
  %62 = getelementptr i8, i8* %3, i64 %61
  %63 = add i64 %44, %60
  %64 = getelementptr i8, i8* %3, i64 %63
  %65 = mul i64 %54, %4
  %66 = getelementptr inbounds i8, i8* %48, i64 %65
  %67 = mul i64 %54, %7
  %68 = getelementptr inbounds i8, i8* %49, i64 %67
  %69 = bitcast i8* %68 to i32*
  %70 = ptrtoint i8* %68 to i64
  %71 = and i64 %70, 15
  %72 = icmp ne i64 %71, 0
  %73 = and i1 %20, %72
  br i1 %73, label %78, label %74

74:                                               ; preds = %78, %53
  %75 = phi i64 [ 0, %53 ], [ %85, %78 ]
  %76 = add i64 %75, 7
  %77 = icmp ult i64 %76, %0
  br i1 %77, label %194, label %92

78:                                               ; preds = %53, %78
  %79 = phi i32* [ %86, %78 ], [ %69, %53 ]
  %80 = phi i64 [ %85, %78 ], [ 0, %53 ]
  %81 = getelementptr inbounds i8, i8* %66, i64 %80
  %82 = load i8, i8* %81, align 1
  %83 = zext i8 %82 to i32
  %84 = shl nuw i32 %83, 24
  store i32 %84, i32* %79, align 4
  %85 = add nuw i64 %80, 1
  %86 = getelementptr inbounds i32, i32* %69, i64 %85
  %87 = ptrtoint i32* %86 to i64
  %88 = and i64 %87, 15
  %89 = icmp ne i64 %88, 0
  %90 = icmp ult i64 %85, %0
  %91 = and i1 %90, %89
  br i1 %91, label %78, label %74

92:                                               ; preds = %194, %74
  %93 = phi i64 [ %75, %74 ], [ %210, %194 ]
  %94 = icmp ult i64 %93, %0
  br i1 %94, label %95, label %240

95:                                               ; preds = %92
  %96 = sub i64 %0, %93
  %97 = icmp ult i64 %96, 8
  br i1 %97, label %98, label %119

98:                                               ; preds = %192, %119, %95
  %99 = phi i64 [ %93, %119 ], [ %93, %95 ], [ %128, %192 ]
  %100 = sub i64 %0, %99
  %101 = xor i64 %99, -1
  %102 = add i64 %101, %0
  %103 = and i64 %100, 3
  %104 = icmp eq i64 %103, 0
  br i1 %104, label %116, label %105

105:                                              ; preds = %98, %105
  %106 = phi i64 [ %113, %105 ], [ %99, %98 ]
  %107 = phi i64 [ %114, %105 ], [ %103, %98 ]
  %108 = getelementptr inbounds i8, i8* %66, i64 %106
  %109 = load i8, i8* %108, align 1
  %110 = zext i8 %109 to i32
  %111 = shl nuw i32 %110, 24
  %112 = getelementptr inbounds i32, i32* %69, i64 %106
  store i32 %111, i32* %112, align 4
  %113 = add nuw i64 %106, 1
  %114 = add i64 %107, -1
  %115 = icmp eq i64 %114, 0
  br i1 %115, label %116, label %105, !llvm.loop !3

116:                                              ; preds = %105, %98
  %117 = phi i64 [ %99, %98 ], [ %113, %105 ]
  %118 = icmp ult i64 %102, 3
  br i1 %118, label %240, label %213

119:                                              ; preds = %95
  %120 = shl i64 %93, 2
  %121 = getelementptr i8, i8* %57, i64 %120
  %122 = getelementptr i8, i8* %62, i64 %93
  %123 = icmp ult i8* %121, %64
  %124 = icmp ult i8* %122, %59
  %125 = and i1 %123, %124
  br i1 %125, label %98, label %126

126:                                              ; preds = %119
  %127 = and i64 %96, -8
  %128 = add i64 %93, %127
  %129 = add i64 %127, -8
  %130 = lshr exact i64 %129, 3
  %131 = add nuw nsw i64 %130, 1
  %132 = and i64 %131, 1
  %133 = icmp eq i64 %129, 0
  br i1 %133, label %173, label %134

134:                                              ; preds = %126
  %135 = sub nuw nsw i64 %131, %132
  br label %136

136:                                              ; preds = %136, %134
  %137 = phi i64 [ 0, %134 ], [ %170, %136 ]
  %138 = phi i64 [ %135, %134 ], [ %171, %136 ]
  %139 = add i64 %93, %137
  %140 = getelementptr inbounds i8, i8* %66, i64 %139
  %141 = bitcast i8* %140 to <4 x i8>*
  %142 = load <4 x i8>, <4 x i8>* %141, align 1, !alias.scope !5
  %143 = getelementptr inbounds i8, i8* %140, i64 4
  %144 = bitcast i8* %143 to <4 x i8>*
  %145 = load <4 x i8>, <4 x i8>* %144, align 1, !alias.scope !5
  %146 = zext <4 x i8> %142 to <4 x i32>
  %147 = zext <4 x i8> %145 to <4 x i32>
  %148 = shl nuw <4 x i32> %146, <i32 24, i32 24, i32 24, i32 24>
  %149 = shl nuw <4 x i32> %147, <i32 24, i32 24, i32 24, i32 24>
  %150 = getelementptr inbounds i32, i32* %69, i64 %139
  %151 = bitcast i32* %150 to <4 x i32>*
  store <4 x i32> %148, <4 x i32>* %151, align 4, !alias.scope !8, !noalias !5
  %152 = getelementptr inbounds i32, i32* %150, i64 4
  %153 = bitcast i32* %152 to <4 x i32>*
  store <4 x i32> %149, <4 x i32>* %153, align 4, !alias.scope !8, !noalias !5
  %154 = or i64 %137, 8
  %155 = add i64 %93, %154
  %156 = getelementptr inbounds i8, i8* %66, i64 %155
  %157 = bitcast i8* %156 to <4 x i8>*
  %158 = load <4 x i8>, <4 x i8>* %157, align 1, !alias.scope !5
  %159 = getelementptr inbounds i8, i8* %156, i64 4
  %160 = bitcast i8* %159 to <4 x i8>*
  %161 = load <4 x i8>, <4 x i8>* %160, align 1, !alias.scope !5
  %162 = zext <4 x i8> %158 to <4 x i32>
  %163 = zext <4 x i8> %161 to <4 x i32>
  %164 = shl nuw <4 x i32> %162, <i32 24, i32 24, i32 24, i32 24>
  %165 = shl nuw <4 x i32> %163, <i32 24, i32 24, i32 24, i32 24>
  %166 = getelementptr inbounds i32, i32* %69, i64 %155
  %167 = bitcast i32* %166 to <4 x i32>*
  store <4 x i32> %164, <4 x i32>* %167, align 4, !alias.scope !8, !noalias !5
  %168 = getelementptr inbounds i32, i32* %166, i64 4
  %169 = bitcast i32* %168 to <4 x i32>*
  store <4 x i32> %165, <4 x i32>* %169, align 4, !alias.scope !8, !noalias !5
  %170 = add i64 %137, 16
  %171 = add i64 %138, -2
  %172 = icmp eq i64 %171, 0
  br i1 %172, label %173, label %136, !llvm.loop !10

173:                                              ; preds = %136, %126
  %174 = phi i64 [ 0, %126 ], [ %170, %136 ]
  %175 = icmp eq i64 %132, 0
  br i1 %175, label %192, label %176

176:                                              ; preds = %173
  %177 = add i64 %93, %174
  %178 = getelementptr inbounds i8, i8* %66, i64 %177
  %179 = bitcast i8* %178 to <4 x i8>*
  %180 = load <4 x i8>, <4 x i8>* %179, align 1, !alias.scope !5
  %181 = getelementptr inbounds i8, i8* %178, i64 4
  %182 = bitcast i8* %181 to <4 x i8>*
  %183 = load <4 x i8>, <4 x i8>* %182, align 1, !alias.scope !5
  %184 = zext <4 x i8> %180 to <4 x i32>
  %185 = zext <4 x i8> %183 to <4 x i32>
  %186 = shl nuw <4 x i32> %184, <i32 24, i32 24, i32 24, i32 24>
  %187 = shl nuw <4 x i32> %185, <i32 24, i32 24, i32 24, i32 24>
  %188 = getelementptr inbounds i32, i32* %69, i64 %177
  %189 = bitcast i32* %188 to <4 x i32>*
  store <4 x i32> %186, <4 x i32>* %189, align 4, !alias.scope !8, !noalias !5
  %190 = getelementptr inbounds i32, i32* %188, i64 4
  %191 = bitcast i32* %190 to <4 x i32>*
  store <4 x i32> %187, <4 x i32>* %191, align 4, !alias.scope !8, !noalias !5
  br label %192

192:                                              ; preds = %173, %176
  %193 = icmp eq i64 %96, %127
  br i1 %193, label %240, label %98

194:                                              ; preds = %74, %194
  %195 = phi i64 [ %210, %194 ], [ %75, %74 ]
  %196 = getelementptr inbounds i8, i8* %66, i64 %195
  %197 = bitcast i8* %196 to i64*
  %198 = load i64, i64* %197, align 1
  %199 = insertelement <2 x i64> undef, i64 %198, i32 0
  %200 = bitcast <2 x i64> %199 to <16 x i8>
  %201 = shufflevector <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i8> %200, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %202 = bitcast <16 x i8> %201 to <8 x i16>
  %203 = shufflevector <8 x i16> <i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef>, <8 x i16> %202, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %204 = shufflevector <8 x i16> <i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0>, <8 x i16> %202, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %205 = getelementptr inbounds i32, i32* %69, i64 %195
  %206 = bitcast i32* %205 to <8 x i16>*
  store <8 x i16> %203, <8 x i16>* %206, align 16
  %207 = add i64 %195, 4
  %208 = getelementptr inbounds i32, i32* %69, i64 %207
  %209 = bitcast i32* %208 to <8 x i16>*
  store <8 x i16> %204, <8 x i16>* %209, align 16
  %210 = add i64 %195, 8
  %211 = add i64 %195, 15
  %212 = icmp ult i64 %211, %0
  br i1 %212, label %194, label %92

213:                                              ; preds = %116, %213
  %214 = phi i64 [ %238, %213 ], [ %117, %116 ]
  %215 = getelementptr inbounds i8, i8* %66, i64 %214
  %216 = load i8, i8* %215, align 1
  %217 = zext i8 %216 to i32
  %218 = shl nuw i32 %217, 24
  %219 = getelementptr inbounds i32, i32* %69, i64 %214
  store i32 %218, i32* %219, align 4
  %220 = add nuw i64 %214, 1
  %221 = getelementptr inbounds i8, i8* %66, i64 %220
  %222 = load i8, i8* %221, align 1
  %223 = zext i8 %222 to i32
  %224 = shl nuw i32 %223, 24
  %225 = getelementptr inbounds i32, i32* %69, i64 %220
  store i32 %224, i32* %225, align 4
  %226 = add nuw i64 %214, 2
  %227 = getelementptr inbounds i8, i8* %66, i64 %226
  %228 = load i8, i8* %227, align 1
  %229 = zext i8 %228 to i32
  %230 = shl nuw i32 %229, 24
  %231 = getelementptr inbounds i32, i32* %69, i64 %226
  store i32 %230, i32* %231, align 4
  %232 = add nuw i64 %214, 3
  %233 = getelementptr inbounds i8, i8* %66, i64 %232
  %234 = load i8, i8* %233, align 1
  %235 = zext i8 %234 to i32
  %236 = shl nuw i32 %235, 24
  %237 = getelementptr inbounds i32, i32* %69, i64 %232
  store i32 %236, i32* %237, align 4
  %238 = add nuw i64 %214, 4
  %239 = icmp eq i64 %238, %0
  br i1 %239, label %240, label %213, !llvm.loop !12

240:                                              ; preds = %116, %213, %192, %92
  %241 = add nuw i64 %54, 1
  %242 = icmp eq i64 %241, %1
  br i1 %242, label %50, label %53

243:                                              ; preds = %254, %23
  %244 = phi i64 [ 0, %23 ], [ %255, %254 ]
  %245 = mul i64 %244, %8
  %246 = add i64 %26, %245
  %247 = mul i64 %244, %5
  %248 = add i64 %247, %0
  br i1 %24, label %254, label %249

249:                                              ; preds = %243
  %250 = mul i64 %244, %5
  %251 = mul i64 %244, %8
  %252 = getelementptr inbounds i8, i8* %3, i64 %250
  %253 = getelementptr inbounds i8, i8* %6, i64 %251
  br label %257

254:                                              ; preds = %351, %243
  %255 = add nuw i64 %244, 1
  %256 = icmp eq i64 %255, %2
  br i1 %256, label %381, label %243

257:                                              ; preds = %351, %249
  %258 = phi i64 [ 0, %249 ], [ %352, %351 ]
  %259 = mul i64 %258, %7
  %260 = add i64 %245, %259
  %261 = getelementptr i8, i8* %6, i64 %260
  %262 = add i64 %246, %259
  %263 = getelementptr i8, i8* %6, i64 %262
  %264 = mul i64 %258, %4
  %265 = add i64 %247, %264
  %266 = getelementptr i8, i8* %3, i64 %265
  %267 = add i64 %248, %264
  %268 = getelementptr i8, i8* %3, i64 %267
  %269 = mul i64 %258, %4
  %270 = getelementptr inbounds i8, i8* %252, i64 %269
  %271 = mul i64 %258, %7
  %272 = getelementptr inbounds i8, i8* %253, i64 %271
  %273 = bitcast i8* %272 to i32*
  br i1 %25, label %351, label %274

274:                                              ; preds = %257
  br i1 %30, label %275, label %293

275:                                              ; preds = %350, %293, %274
  %276 = phi i64 [ 0, %293 ], [ 0, %274 ], [ %31, %350 ]
  %277 = xor i64 %276, -1
  %278 = add i64 %277, %0
  br i1 %38, label %290, label %279

279:                                              ; preds = %275, %279
  %280 = phi i64 [ %287, %279 ], [ %276, %275 ]
  %281 = phi i64 [ %288, %279 ], [ %37, %275 ]
  %282 = getelementptr inbounds i8, i8* %270, i64 %280
  %283 = load i8, i8* %282, align 1
  %284 = zext i8 %283 to i32
  %285 = shl nuw i32 %284, 24
  %286 = getelementptr inbounds i32, i32* %273, i64 %280
  store i32 %285, i32* %286, align 4
  %287 = add nuw i64 %280, 1
  %288 = add i64 %281, -1
  %289 = icmp eq i64 %288, 0
  br i1 %289, label %290, label %279, !llvm.loop !13

290:                                              ; preds = %279, %275
  %291 = phi i64 [ %276, %275 ], [ %287, %279 ]
  %292 = icmp ult i64 %278, 3
  br i1 %292, label %351, label %354

293:                                              ; preds = %274
  %294 = icmp ult i8* %261, %268
  %295 = icmp ult i8* %266, %263
  %296 = and i1 %294, %295
  br i1 %296, label %275, label %297

297:                                              ; preds = %293
  br i1 %33, label %333, label %298

298:                                              ; preds = %297, %298
  %299 = phi i64 [ %330, %298 ], [ 0, %297 ]
  %300 = phi i64 [ %331, %298 ], [ %34, %297 ]
  %301 = getelementptr inbounds i8, i8* %270, i64 %299
  %302 = bitcast i8* %301 to <4 x i8>*
  %303 = load <4 x i8>, <4 x i8>* %302, align 1, !alias.scope !14
  %304 = getelementptr inbounds i8, i8* %301, i64 4
  %305 = bitcast i8* %304 to <4 x i8>*
  %306 = load <4 x i8>, <4 x i8>* %305, align 1, !alias.scope !14
  %307 = zext <4 x i8> %303 to <4 x i32>
  %308 = zext <4 x i8> %306 to <4 x i32>
  %309 = shl nuw <4 x i32> %307, <i32 24, i32 24, i32 24, i32 24>
  %310 = shl nuw <4 x i32> %308, <i32 24, i32 24, i32 24, i32 24>
  %311 = getelementptr inbounds i32, i32* %273, i64 %299
  %312 = bitcast i32* %311 to <4 x i32>*
  store <4 x i32> %309, <4 x i32>* %312, align 4, !alias.scope !17, !noalias !14
  %313 = getelementptr inbounds i32, i32* %311, i64 4
  %314 = bitcast i32* %313 to <4 x i32>*
  store <4 x i32> %310, <4 x i32>* %314, align 4, !alias.scope !17, !noalias !14
  %315 = or i64 %299, 8
  %316 = getelementptr inbounds i8, i8* %270, i64 %315
  %317 = bitcast i8* %316 to <4 x i8>*
  %318 = load <4 x i8>, <4 x i8>* %317, align 1, !alias.scope !14
  %319 = getelementptr inbounds i8, i8* %316, i64 4
  %320 = bitcast i8* %319 to <4 x i8>*
  %321 = load <4 x i8>, <4 x i8>* %320, align 1, !alias.scope !14
  %322 = zext <4 x i8> %318 to <4 x i32>
  %323 = zext <4 x i8> %321 to <4 x i32>
  %324 = shl nuw <4 x i32> %322, <i32 24, i32 24, i32 24, i32 24>
  %325 = shl nuw <4 x i32> %323, <i32 24, i32 24, i32 24, i32 24>
  %326 = getelementptr inbounds i32, i32* %273, i64 %315
  %327 = bitcast i32* %326 to <4 x i32>*
  store <4 x i32> %324, <4 x i32>* %327, align 4, !alias.scope !17, !noalias !14
  %328 = getelementptr inbounds i32, i32* %326, i64 4
  %329 = bitcast i32* %328 to <4 x i32>*
  store <4 x i32> %325, <4 x i32>* %329, align 4, !alias.scope !17, !noalias !14
  %330 = add i64 %299, 16
  %331 = add i64 %300, -2
  %332 = icmp eq i64 %331, 0
  br i1 %332, label %333, label %298, !llvm.loop !19

333:                                              ; preds = %298, %297
  %334 = phi i64 [ 0, %297 ], [ %330, %298 ]
  br i1 %35, label %350, label %335

335:                                              ; preds = %333
  %336 = getelementptr inbounds i8, i8* %270, i64 %334
  %337 = bitcast i8* %336 to <4 x i8>*
  %338 = load <4 x i8>, <4 x i8>* %337, align 1, !alias.scope !14
  %339 = getelementptr inbounds i8, i8* %336, i64 4
  %340 = bitcast i8* %339 to <4 x i8>*
  %341 = load <4 x i8>, <4 x i8>* %340, align 1, !alias.scope !14
  %342 = zext <4 x i8> %338 to <4 x i32>
  %343 = zext <4 x i8> %341 to <4 x i32>
  %344 = shl nuw <4 x i32> %342, <i32 24, i32 24, i32 24, i32 24>
  %345 = shl nuw <4 x i32> %343, <i32 24, i32 24, i32 24, i32 24>
  %346 = getelementptr inbounds i32, i32* %273, i64 %334
  %347 = bitcast i32* %346 to <4 x i32>*
  store <4 x i32> %344, <4 x i32>* %347, align 4, !alias.scope !17, !noalias !14
  %348 = getelementptr inbounds i32, i32* %346, i64 4
  %349 = bitcast i32* %348 to <4 x i32>*
  store <4 x i32> %345, <4 x i32>* %349, align 4, !alias.scope !17, !noalias !14
  br label %350

350:                                              ; preds = %333, %335
  br i1 %36, label %351, label %275

351:                                              ; preds = %290, %354, %350, %257
  %352 = add nuw i64 %258, 1
  %353 = icmp eq i64 %352, %1
  br i1 %353, label %254, label %257

354:                                              ; preds = %290, %354
  %355 = phi i64 [ %379, %354 ], [ %291, %290 ]
  %356 = getelementptr inbounds i8, i8* %270, i64 %355
  %357 = load i8, i8* %356, align 1
  %358 = zext i8 %357 to i32
  %359 = shl nuw i32 %358, 24
  %360 = getelementptr inbounds i32, i32* %273, i64 %355
  store i32 %359, i32* %360, align 4
  %361 = add nuw i64 %355, 1
  %362 = getelementptr inbounds i8, i8* %270, i64 %361
  %363 = load i8, i8* %362, align 1
  %364 = zext i8 %363 to i32
  %365 = shl nuw i32 %364, 24
  %366 = getelementptr inbounds i32, i32* %273, i64 %361
  store i32 %365, i32* %366, align 4
  %367 = add nuw i64 %355, 2
  %368 = getelementptr inbounds i8, i8* %270, i64 %367
  %369 = load i8, i8* %368, align 1
  %370 = zext i8 %369 to i32
  %371 = shl nuw i32 %370, 24
  %372 = getelementptr inbounds i32, i32* %273, i64 %367
  store i32 %371, i32* %372, align 4
  %373 = add nuw i64 %355, 3
  %374 = getelementptr inbounds i8, i8* %270, i64 %373
  %375 = load i8, i8* %374, align 1
  %376 = zext i8 %375 to i32
  %377 = shl nuw i32 %376, 24
  %378 = getelementptr inbounds i32, i32* %273, i64 %373
  store i32 %377, i32* %378, align 4
  %379 = add nuw i64 %355, 4
  %380 = icmp eq i64 %379, %0
  br i1 %380, label %351, label %354, !llvm.loop !20

381:                                              ; preds = %50, %254, %17, %22
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @_ZN5angle13LoadA8ToBGRA8EmmmPKhmmPhmm(i64, i64, i64, i8* nocapture readonly, i64, i64, i8*, i64, i64) local_unnamed_addr #1 {
  tail call void @_ZN5angle13LoadA8ToRGBA8EmmmPKhmmPhmm(i64 %0, i64 %1, i64 %2, i8* %3, i64 %4, i64 %5, i8* %6, i64 %7, i64 %8)
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @_ZN5angle17LoadA32FToRGBA32FEmmmPKhmmPhmm(i64, i64, i64, i8* nocapture readonly, i64, i64, i8* nocapture, i64, i64) local_unnamed_addr #1 {
  %10 = icmp eq i64 %2, 0
  br i1 %10, label %24, label %11

11:                                               ; preds = %9
  %12 = icmp eq i64 %1, 0
  %13 = and i64 %0, 1
  %14 = icmp eq i64 %0, 1
  %15 = sub i64 %0, %13
  %16 = icmp eq i64 %13, 0
  br label %17

17:                                               ; preds = %25, %11
  %18 = phi i64 [ 0, %11 ], [ %26, %25 ]
  br i1 %12, label %25, label %19

19:                                               ; preds = %17
  %20 = mul i64 %18, %5
  %21 = mul i64 %18, %8
  %22 = getelementptr inbounds i8, i8* %3, i64 %20
  %23 = getelementptr inbounds i8, i8* %6, i64 %21
  br label %28

24:                                               ; preds = %25, %9
  ret void

25:                                               ; preds = %51, %17
  %26 = add nuw i64 %18, 1
  %27 = icmp eq i64 %26, %2
  br i1 %27, label %24, label %17

28:                                               ; preds = %51, %19
  %29 = phi i64 [ 0, %19 ], [ %52, %51 ]
  %30 = mul i64 %29, %4
  %31 = getelementptr inbounds i8, i8* %22, i64 %30
  %32 = bitcast i8* %31 to float*
  %33 = mul i64 %29, %7
  %34 = getelementptr inbounds i8, i8* %23, i64 %33
  %35 = bitcast i8* %34 to float*
  switch i64 %0, label %54 [
    i64 0, label %51
    i64 1, label %36
  ]

36:                                               ; preds = %54, %28
  %37 = phi i64 [ 0, %28 ], [ %82, %54 ]
  br i1 %16, label %51, label %38

38:                                               ; preds = %36
  %39 = shl i64 %37, 2
  %40 = getelementptr inbounds float, float* %35, i64 %39
  store float 0.000000e+00, float* %40, align 4
  %41 = or i64 %39, 1
  %42 = getelementptr inbounds float, float* %35, i64 %41
  store float 0.000000e+00, float* %42, align 4
  %43 = or i64 %39, 2
  %44 = getelementptr inbounds float, float* %35, i64 %43
  store float 0.000000e+00, float* %44, align 4
  %45 = getelementptr inbounds float, float* %32, i64 %37
  %46 = bitcast float* %45 to i32*
  %47 = load i32, i32* %46, align 4
  %48 = or i64 %39, 3
  %49 = getelementptr inbounds float, float* %35, i64 %48
  %50 = bitcast float* %49 to i32*
  store i32 %47, i32* %50, align 4
  br label %51

51:                                               ; preds = %38, %36, %28
  %52 = add nuw i64 %29, 1
  %53 = icmp eq i64 %52, %1
  br i1 %53, label %25, label %28

54:                                               ; preds = %28, %54
  %55 = phi i64 [ %82, %54 ], [ 0, %28 ]
  %56 = phi i64 [ %83, %54 ], [ %15, %28 ]
  %57 = shl i64 %55, 2
  %58 = getelementptr inbounds float, float* %35, i64 %57
  store float 0.000000e+00, float* %58, align 4
  %59 = or i64 %57, 1
  %60 = getelementptr inbounds float, float* %35, i64 %59
  store float 0.000000e+00, float* %60, align 4
  %61 = or i64 %57, 2
  %62 = getelementptr inbounds float, float* %35, i64 %61
  store float 0.000000e+00, float* %62, align 4
  %63 = getelementptr inbounds float, float* %32, i64 %55
  %64 = bitcast float* %63 to i32*
  %65 = load i32, i32* %64, align 4
  %66 = or i64 %57, 3
  %67 = getelementptr inbounds float, float* %35, i64 %66
  %68 = bitcast float* %67 to i32*
  store i32 %65, i32* %68, align 4
  %69 = or i64 %55, 1
  %70 = shl i64 %69, 2
  %71 = getelementptr inbounds float, float* %35, i64 %70
  store float 0.000000e+00, float* %71, align 4
  %72 = or i64 %70, 1
  %73 = getelementptr inbounds float, float* %35, i64 %72
  store float 0.000000e+00, float* %73, align 4
  %74 = or i64 %70, 2
  %75 = getelementptr inbounds float, float* %35, i64 %74
  store float 0.000000e+00, float* %75, align 4
  %76 = getelementptr inbounds float, float* %32, i64 %69
  %77 = bitcast float* %76 to i32*
  %78 = load i32, i32* %77, align 4
  %79 = or i64 %70, 3
  %80 = getelementptr inbounds float, float* %35, i64 %79
  %81 = bitcast float* %80 to i32*
  store i32 %78, i32* %81, align 4
  %82 = add nuw i64 %55, 2
  %83 = add i64 %56, -2
  %84 = icmp eq i64 %83, 0
  br i1 %84, label %36, label %54
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @_ZN5angle17LoadA16FToRGBA16FEmmmPKhmmPhmm(i64, i64, i64, i8* nocapture readonly, i64, i64, i8* nocapture, i64, i64) local_unnamed_addr #1 {
  %10 = icmp eq i64 %2, 0
  br i1 %10, label %54, label %11

11:                                               ; preds = %9
  %12 = icmp eq i64 %1, 0
  %13 = icmp eq i64 %0, 0
  %14 = add i64 %0, -1
  %15 = shl i64 %0, 3
  %16 = shl i64 %0, 1
  %17 = add i64 %0, -8
  %18 = lshr i64 %17, 3
  %19 = add nuw nsw i64 %18, 1
  %20 = icmp ult i64 %0, 8
  %21 = call { i64, i1 } @llvm.umul.with.overflow.i64(i64 %14, i64 8)
  %22 = extractvalue { i64, i1 } %21, 0
  %23 = extractvalue { i64, i1 } %21, 1
  %24 = call { i64, i1 } @llvm.umul.with.overflow.i64(i64 %14, i64 8)
  %25 = extractvalue { i64, i1 } %24, 0
  %26 = extractvalue { i64, i1 } %24, 1
  %27 = call { i64, i1 } @llvm.umul.with.overflow.i64(i64 %14, i64 8)
  %28 = extractvalue { i64, i1 } %27, 0
  %29 = extractvalue { i64, i1 } %27, 1
  %30 = call { i64, i1 } @llvm.umul.with.overflow.i64(i64 %14, i64 8)
  %31 = extractvalue { i64, i1 } %30, 0
  %32 = extractvalue { i64, i1 } %30, 1
  %33 = and i64 %0, -8
  %34 = and i64 %19, 1
  %35 = icmp eq i64 %18, 0
  %36 = sub nuw nsw i64 %19, %34
  %37 = icmp eq i64 %34, 0
  %38 = icmp eq i64 %33, %0
  br label %39

39:                                               ; preds = %55, %11
  %40 = phi i64 [ 0, %11 ], [ %56, %55 ]
  %41 = mul i64 %40, %8
  %42 = add i64 %15, %41
  %43 = mul i64 %40, %5
  %44 = add i64 %16, %43
  %45 = mul i64 %40, %8
  %46 = add i64 %45, 4
  %47 = add i64 %45, 6
  %48 = add i64 %45, 2
  br i1 %12, label %55, label %49

49:                                               ; preds = %39
  %50 = mul i64 %40, %5
  %51 = mul i64 %40, %8
  %52 = getelementptr inbounds i8, i8* %3, i64 %50
  %53 = getelementptr inbounds i8, i8* %6, i64 %51
  br label %58

54:                                               ; preds = %55, %9
  ret void

55:                                               ; preds = %158, %39
  %56 = add nuw i64 %40, 1
  %57 = icmp eq i64 %56, %2
  br i1 %57, label %54, label %39

58:                                               ; preds = %158, %49
  %59 = phi i64 [ 0, %49 ], [ %159, %158 ]
  %60 = mul i64 %59, %7
  %61 = add i64 %41, %60
  %62 = getelementptr i8, i8* %6, i64 %61
  %63 = add i64 %42, %60
  %64 = getelementptr i8, i8* %6, i64 %63
  %65 = mul i64 %59, %4
  %66 = add i64 %43, %65
  %67 = getelementptr i8, i8* %3, i64 %66
  %68 = add i64 %44, %65
  %69 = getelementptr i8, i8* %3, i64 %68
  %70 = mul i64 %59, %7
  %71 = add i64 %46, %70
  %72 = getelementptr i8, i8* %6, i64 %71
  %73 = ptrtoint i8* %72 to i64
  %74 = add i64 %47, %70
  %75 = getelementptr i8, i8* %6, i64 %74
  %76 = ptrtoint i8* %75 to i64
  %77 = add i64 %48, %70
  %78 = getelementptr i8, i8* %6, i64 %77
  %79 = ptrtoint i8* %78 to i64
  %80 = add i64 %45, %70
  %81 = getelementptr i8, i8* %6, i64 %80
  %82 = ptrtoint i8* %81 to i64
  %83 = mul i64 %59, %4
  %84 = getelementptr inbounds i8, i8* %52, i64 %83
  %85 = bitcast i8* %84 to i16*
  %86 = mul i64 %59, %7
  %87 = getelementptr inbounds i8, i8* %53, i64 %86
  %88 = bitcast i8* %87 to i16*
  br i1 %13, label %158, label %89

89:                                               ; preds = %58
  br i1 %20, label %90, label %92

90:                                               ; preds = %157, %108, %92, %89
  %91 = phi i64 [ 0, %108 ], [ 0, %92 ], [ 0, %89 ], [ %33, %157 ]
  br label %161

92:                                               ; preds = %89
  %93 = xor i64 %73, -1
  %94 = icmp ugt i64 %22, %93
  %95 = or i1 %94, %23
  %96 = xor i64 %76, -1
  %97 = icmp ugt i64 %25, %96
  %98 = or i1 %97, %26
  %99 = or i1 %95, %98
  %100 = xor i64 %79, -1
  %101 = icmp ugt i64 %28, %100
  %102 = or i1 %101, %29
  %103 = or i1 %99, %102
  %104 = xor i64 %82, -1
  %105 = icmp ugt i64 %31, %104
  %106 = or i1 %105, %32
  %107 = or i1 %103, %106
  br i1 %107, label %90, label %108

108:                                              ; preds = %92
  %109 = icmp ult i8* %62, %69
  %110 = icmp ult i8* %67, %64
  %111 = and i1 %109, %110
  br i1 %111, label %90, label %112

112:                                              ; preds = %108
  br i1 %35, label %143, label %113

113:                                              ; preds = %112
  %114 = getelementptr inbounds i8, i8* %87, i64 -6
  %115 = bitcast i8* %114 to i16*
  %116 = getelementptr inbounds i8, i8* %87, i64 -6
  %117 = bitcast i8* %116 to i16*
  br label %118

118:                                              ; preds = %118, %113
  %119 = phi i64 [ 0, %113 ], [ %140, %118 ]
  %120 = phi i64 [ %36, %113 ], [ %141, %118 ]
  %121 = shl i64 %119, 2
  %122 = getelementptr inbounds i16, i16* %85, i64 %119
  %123 = bitcast i16* %122 to <8 x i16>*
  %124 = load <8 x i16>, <8 x i16>* %123, align 2, !alias.scope !21
  %125 = or i64 %121, 3
  %126 = getelementptr inbounds i16, i16* %115, i64 %125
  %127 = bitcast i16* %126 to <32 x i16>*
  %128 = shufflevector <8 x i16> zeroinitializer, <8 x i16> %124, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %129 = shufflevector <16 x i16> zeroinitializer, <16 x i16> %128, <32 x i32> <i32 0, i32 8, i32 16, i32 24, i32 1, i32 9, i32 17, i32 25, i32 2, i32 10, i32 18, i32 26, i32 3, i32 11, i32 19, i32 27, i32 4, i32 12, i32 20, i32 28, i32 5, i32 13, i32 21, i32 29, i32 6, i32 14, i32 22, i32 30, i32 7, i32 15, i32 23, i32 31>
  store <32 x i16> %129, <32 x i16>* %127, align 2
  %130 = or i64 %119, 8
  %131 = shl i64 %130, 2
  %132 = getelementptr inbounds i16, i16* %85, i64 %130
  %133 = bitcast i16* %132 to <8 x i16>*
  %134 = load <8 x i16>, <8 x i16>* %133, align 2, !alias.scope !21
  %135 = or i64 %131, 3
  %136 = getelementptr inbounds i16, i16* %117, i64 %135
  %137 = bitcast i16* %136 to <32 x i16>*
  %138 = shufflevector <8 x i16> zeroinitializer, <8 x i16> %134, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %139 = shufflevector <16 x i16> zeroinitializer, <16 x i16> %138, <32 x i32> <i32 0, i32 8, i32 16, i32 24, i32 1, i32 9, i32 17, i32 25, i32 2, i32 10, i32 18, i32 26, i32 3, i32 11, i32 19, i32 27, i32 4, i32 12, i32 20, i32 28, i32 5, i32 13, i32 21, i32 29, i32 6, i32 14, i32 22, i32 30, i32 7, i32 15, i32 23, i32 31>
  store <32 x i16> %139, <32 x i16>* %137, align 2
  %140 = add i64 %119, 16
  %141 = add i64 %120, -2
  %142 = icmp eq i64 %141, 0
  br i1 %142, label %143, label %118, !llvm.loop !24

143:                                              ; preds = %118, %112
  %144 = phi i64 [ 0, %112 ], [ %140, %118 ]
  br i1 %37, label %157, label %145

145:                                              ; preds = %143
  %146 = shl i64 %144, 2
  %147 = getelementptr inbounds i16, i16* %85, i64 %144
  %148 = bitcast i16* %147 to <8 x i16>*
  %149 = load <8 x i16>, <8 x i16>* %148, align 2, !alias.scope !21
  %150 = or i64 %146, 3
  %151 = getelementptr inbounds i8, i8* %87, i64 -6
  %152 = bitcast i8* %151 to i16*
  %153 = getelementptr inbounds i16, i16* %152, i64 %150
  %154 = bitcast i16* %153 to <32 x i16>*
  %155 = shufflevector <8 x i16> zeroinitializer, <8 x i16> %149, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %156 = shufflevector <16 x i16> zeroinitializer, <16 x i16> %155, <32 x i32> <i32 0, i32 8, i32 16, i32 24, i32 1, i32 9, i32 17, i32 25, i32 2, i32 10, i32 18, i32 26, i32 3, i32 11, i32 19, i32 27, i32 4, i32 12, i32 20, i32 28, i32 5, i32 13, i32 21, i32 29, i32 6, i32 14, i32 22, i32 30, i32 7, i32 15, i32 23, i32 31>
  store <32 x i16> %156, <32 x i16>* %154, align 2
  br label %157

157:                                              ; preds = %143, %145
  br i1 %38, label %158, label %90

158:                                              ; preds = %161, %157, %58
  %159 = add nuw i64 %59, 1
  %160 = icmp eq i64 %159, %1
  br i1 %160, label %55, label %58

161:                                              ; preds = %90, %161
  %162 = phi i64 [ %173, %161 ], [ %91, %90 ]
  %163 = shl i64 %162, 2
  %164 = getelementptr inbounds i16, i16* %88, i64 %163
  store i16 0, i16* %164, align 2
  %165 = or i64 %163, 1
  %166 = getelementptr inbounds i16, i16* %88, i64 %165
  store i16 0, i16* %166, align 2
  %167 = or i64 %163, 2
  %168 = getelementptr inbounds i16, i16* %88, i64 %167
  store i16 0, i16* %168, align 2
  %169 = getelementptr inbounds i16, i16* %85, i64 %162
  %170 = load i16, i16* %169, align 2
  %171 = or i64 %163, 3
  %172 = getelementptr inbounds i16, i16* %88, i64 %171
  store i16 %170, i16* %172, align 2
  %173 = add nuw i64 %162, 1
  %174 = icmp eq i64 %173, %0
  br i1 %174, label %158, label %161, !llvm.loop !25
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @_ZN5angle13LoadL8ToRGBA8EmmmPKhmmPhmm(i64, i64, i64, i8* nocapture readonly, i64, i64, i8* nocapture, i64, i64) local_unnamed_addr #1 {
  %10 = icmp eq i64 %2, 0
  br i1 %10, label %53, label %11

11:                                               ; preds = %9
  %12 = icmp eq i64 %1, 0
  %13 = icmp eq i64 %0, 0
  %14 = add i64 %0, -1
  %15 = shl i64 %0, 2
  %16 = add i64 %0, -16
  %17 = lshr i64 %16, 4
  %18 = add nuw nsw i64 %17, 1
  %19 = icmp ult i64 %0, 16
  %20 = call { i64, i1 } @llvm.umul.with.overflow.i64(i64 %14, i64 4)
  %21 = extractvalue { i64, i1 } %20, 0
  %22 = extractvalue { i64, i1 } %20, 1
  %23 = call { i64, i1 } @llvm.umul.with.overflow.i64(i64 %14, i64 4)
  %24 = extractvalue { i64, i1 } %23, 0
  %25 = extractvalue { i64, i1 } %23, 1
  %26 = call { i64, i1 } @llvm.umul.with.overflow.i64(i64 %14, i64 4)
  %27 = extractvalue { i64, i1 } %26, 0
  %28 = extractvalue { i64, i1 } %26, 1
  %29 = call { i64, i1 } @llvm.umul.with.overflow.i64(i64 %14, i64 4)
  %30 = extractvalue { i64, i1 } %29, 0
  %31 = extractvalue { i64, i1 } %29, 1
  %32 = and i64 %0, -16
  %33 = and i64 %18, 1
  %34 = icmp eq i64 %17, 0
  %35 = sub nuw nsw i64 %18, %33
  %36 = icmp eq i64 %33, 0
  %37 = icmp eq i64 %32, %0
  br label %38

38:                                               ; preds = %54, %11
  %39 = phi i64 [ 0, %11 ], [ %55, %54 ]
  %40 = mul i64 %39, %8
  %41 = add i64 %15, %40
  %42 = mul i64 %39, %5
  %43 = add i64 %42, %0
  %44 = mul i64 %39, %8
  %45 = add i64 %44, 2
  %46 = add i64 %44, 3
  %47 = add i64 %44, 1
  br i1 %12, label %54, label %48

48:                                               ; preds = %38
  %49 = mul i64 %39, %5
  %50 = mul i64 %39, %8
  %51 = getelementptr inbounds i8, i8* %3, i64 %49
  %52 = getelementptr inbounds i8, i8* %6, i64 %50
  br label %57

53:                                               ; preds = %54, %9
  ret void

54:                                               ; preds = %155, %38
  %55 = add nuw i64 %39, 1
  %56 = icmp eq i64 %55, %2
  br i1 %56, label %53, label %38

57:                                               ; preds = %155, %48
  %58 = phi i64 [ 0, %48 ], [ %156, %155 ]
  %59 = mul i64 %58, %7
  %60 = add i64 %40, %59
  %61 = getelementptr i8, i8* %6, i64 %60
  %62 = add i64 %41, %59
  %63 = getelementptr i8, i8* %6, i64 %62
  %64 = mul i64 %58, %4
  %65 = add i64 %42, %64
  %66 = getelementptr i8, i8* %3, i64 %65
  %67 = add i64 %43, %64
  %68 = getelementptr i8, i8* %3, i64 %67
  %69 = mul i64 %58, %7
  %70 = add i64 %45, %69
  %71 = getelementptr i8, i8* %6, i64 %70
  %72 = ptrtoint i8* %71 to i64
  %73 = add i64 %46, %69
  %74 = getelementptr i8, i8* %6, i64 %73
  %75 = ptrtoint i8* %74 to i64
  %76 = add i64 %47, %69
  %77 = getelementptr i8, i8* %6, i64 %76
  %78 = ptrtoint i8* %77 to i64
  %79 = add i64 %44, %69
  %80 = getelementptr i8, i8* %6, i64 %79
  %81 = ptrtoint i8* %80 to i64
  %82 = mul i64 %58, %4
  %83 = getelementptr inbounds i8, i8* %51, i64 %82
  %84 = mul i64 %58, %7
  %85 = getelementptr inbounds i8, i8* %52, i64 %84
  br i1 %13, label %155, label %86

86:                                               ; preds = %57
  br i1 %19, label %87, label %89

87:                                               ; preds = %154, %105, %89, %86
  %88 = phi i64 [ 0, %105 ], [ 0, %89 ], [ 0, %86 ], [ %32, %154 ]
  br label %158

89:                                               ; preds = %86
  %90 = xor i64 %72, -1
  %91 = icmp ugt i64 %21, %90
  %92 = or i1 %91, %22
  %93 = xor i64 %75, -1
  %94 = icmp ugt i64 %24, %93
  %95 = or i1 %94, %25
  %96 = or i1 %92, %95
  %97 = xor i64 %78, -1
  %98 = icmp ugt i64 %27, %97
  %99 = or i1 %98, %28
  %100 = or i1 %96, %99
  %101 = xor i64 %81, -1
  %102 = icmp ugt i64 %30, %101
  %103 = or i1 %102, %31
  %104 = or i1 %100, %103
  br i1 %104, label %87, label %105

105:                                              ; preds = %89
  %106 = icmp ult i8* %61, %68
  %107 = icmp ult i8* %66, %63
  %108 = and i1 %106, %107
  br i1 %108, label %87, label %109

109:                                              ; preds = %105
  br i1 %34, label %140, label %110

110:                                              ; preds = %109
  %111 = getelementptr inbounds i8, i8* %85, i64 -3
  %112 = getelementptr inbounds i8, i8* %85, i64 -3
  br label %113

113:                                              ; preds = %113, %110
  %114 = phi i64 [ 0, %110 ], [ %137, %113 ]
  %115 = phi i64 [ %35, %110 ], [ %138, %113 ]
  %116 = getelementptr inbounds i8, i8* %83, i64 %114
  %117 = bitcast i8* %116 to <16 x i8>*
  %118 = load <16 x i8>, <16 x i8>* %117, align 1, !alias.scope !26
  %119 = shl i64 %114, 2
  %120 = or i64 %119, 3
  %121 = getelementptr inbounds i8, i8* %111, i64 %120
  %122 = bitcast i8* %121 to <64 x i8>*
  %123 = shufflevector <16 x i8> %118, <16 x i8> undef, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %124 = shufflevector <16 x i8> %118, <16 x i8> <i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1>, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %125 = shufflevector <32 x i8> %123, <32 x i8> %124, <64 x i32> <i32 0, i32 16, i32 32, i32 48, i32 1, i32 17, i32 33, i32 49, i32 2, i32 18, i32 34, i32 50, i32 3, i32 19, i32 35, i32 51, i32 4, i32 20, i32 36, i32 52, i32 5, i32 21, i32 37, i32 53, i32 6, i32 22, i32 38, i32 54, i32 7, i32 23, i32 39, i32 55, i32 8, i32 24, i32 40, i32 56, i32 9, i32 25, i32 41, i32 57, i32 10, i32 26, i32 42, i32 58, i32 11, i32 27, i32 43, i32 59, i32 12, i32 28, i32 44, i32 60, i32 13, i32 29, i32 45, i32 61, i32 14, i32 30, i32 46, i32 62, i32 15, i32 31, i32 47, i32 63>
  store <64 x i8> %125, <64 x i8>* %122, align 1
  %126 = or i64 %114, 16
  %127 = getelementptr inbounds i8, i8* %83, i64 %126
  %128 = bitcast i8* %127 to <16 x i8>*
  %129 = load <16 x i8>, <16 x i8>* %128, align 1, !alias.scope !26
  %130 = shl i64 %126, 2
  %131 = or i64 %130, 3
  %132 = getelementptr inbounds i8, i8* %112, i64 %131
  %133 = bitcast i8* %132 to <64 x i8>*
  %134 = shufflevector <16 x i8> %129, <16 x i8> undef, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %135 = shufflevector <16 x i8> %129, <16 x i8> <i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1>, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %136 = shufflevector <32 x i8> %134, <32 x i8> %135, <64 x i32> <i32 0, i32 16, i32 32, i32 48, i32 1, i32 17, i32 33, i32 49, i32 2, i32 18, i32 34, i32 50, i32 3, i32 19, i32 35, i32 51, i32 4, i32 20, i32 36, i32 52, i32 5, i32 21, i32 37, i32 53, i32 6, i32 22, i32 38, i32 54, i32 7, i32 23, i32 39, i32 55, i32 8, i32 24, i32 40, i32 56, i32 9, i32 25, i32 41, i32 57, i32 10, i32 26, i32 42, i32 58, i32 11, i32 27, i32 43, i32 59, i32 12, i32 28, i32 44, i32 60, i32 13, i32 29, i32 45, i32 61, i32 14, i32 30, i32 46, i32 62, i32 15, i32 31, i32 47, i32 63>
  store <64 x i8> %136, <64 x i8>* %133, align 1
  %137 = add i64 %114, 32
  %138 = add i64 %115, -2
  %139 = icmp eq i64 %138, 0
  br i1 %139, label %140, label %113, !llvm.loop !29

140:                                              ; preds = %113, %109
  %141 = phi i64 [ 0, %109 ], [ %137, %113 ]
  br i1 %36, label %154, label %142

142:                                              ; preds = %140
  %143 = getelementptr inbounds i8, i8* %83, i64 %141
  %144 = bitcast i8* %143 to <16 x i8>*
  %145 = load <16 x i8>, <16 x i8>* %144, align 1, !alias.scope !26
  %146 = shl i64 %141, 2
  %147 = or i64 %146, 3
  %148 = getelementptr inbounds i8, i8* %85, i64 -3
  %149 = getelementptr inbounds i8, i8* %148, i64 %147
  %150 = bitcast i8* %149 to <64 x i8>*
  %151 = shufflevector <16 x i8> %145, <16 x i8> undef, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %152 = shufflevector <16 x i8> %145, <16 x i8> <i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1>, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %153 = shufflevector <32 x i8> %151, <32 x i8> %152, <64 x i32> <i32 0, i32 16, i32 32, i32 48, i32 1, i32 17, i32 33, i32 49, i32 2, i32 18, i32 34, i32 50, i32 3, i32 19, i32 35, i32 51, i32 4, i32 20, i32 36, i32 52, i32 5, i32 21, i32 37, i32 53, i32 6, i32 22, i32 38, i32 54, i32 7, i32 23, i32 39, i32 55, i32 8, i32 24, i32 40, i32 56, i32 9, i32 25, i32 41, i32 57, i32 10, i32 26, i32 42, i32 58, i32 11, i32 27, i32 43, i32 59, i32 12, i32 28, i32 44, i32 60, i32 13, i32 29, i32 45, i32 61, i32 14, i32 30, i32 46, i32 62, i32 15, i32 31, i32 47, i32 63>
  store <64 x i8> %153, <64 x i8>* %150, align 1
  br label %154

154:                                              ; preds = %140, %142
  br i1 %37, label %155, label %87

155:                                              ; preds = %158, %154, %57
  %156 = add nuw i64 %58, 1
  %157 = icmp eq i64 %156, %1
  br i1 %157, label %54, label %57

158:                                              ; preds = %87, %158
  %159 = phi i64 [ %170, %158 ], [ %88, %87 ]
  %160 = getelementptr inbounds i8, i8* %83, i64 %159
  %161 = load i8, i8* %160, align 1
  %162 = shl i64 %159, 2
  %163 = getelementptr inbounds i8, i8* %85, i64 %162
  store i8 %161, i8* %163, align 1
  %164 = or i64 %162, 1
  %165 = getelementptr inbounds i8, i8* %85, i64 %164
  store i8 %161, i8* %165, align 1
  %166 = or i64 %162, 2
  %167 = getelementptr inbounds i8, i8* %85, i64 %166
  store i8 %161, i8* %167, align 1
  %168 = or i64 %162, 3
  %169 = getelementptr inbounds i8, i8* %85, i64 %168
  store i8 -1, i8* %169, align 1
  %170 = add nuw i64 %159, 1
  %171 = icmp eq i64 %170, %0
  br i1 %171, label %155, label %158, !llvm.loop !30
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @_ZN5angle13LoadL8ToBGRA8EmmmPKhmmPhmm(i64, i64, i64, i8* nocapture readonly, i64, i64, i8* nocapture, i64, i64) local_unnamed_addr #1 {
  %10 = icmp eq i64 %2, 0
  br i1 %10, label %171, label %11

11:                                               ; preds = %9
  %12 = icmp eq i64 %1, 0
  %13 = icmp eq i64 %0, 0
  %14 = add i64 %0, -1
  %15 = shl i64 %0, 2
  %16 = add i64 %0, -16
  %17 = lshr i64 %16, 4
  %18 = add nuw nsw i64 %17, 1
  %19 = icmp ult i64 %0, 16
  %20 = call { i64, i1 } @llvm.umul.with.overflow.i64(i64 %14, i64 4)
  %21 = extractvalue { i64, i1 } %20, 0
  %22 = extractvalue { i64, i1 } %20, 1
  %23 = call { i64, i1 } @llvm.umul.with.overflow.i64(i64 %14, i64 4)
  %24 = extractvalue { i64, i1 } %23, 0
  %25 = extractvalue { i64, i1 } %23, 1
  %26 = call { i64, i1 } @llvm.umul.with.overflow.i64(i64 %14, i64 4)
  %27 = extractvalue { i64, i1 } %26, 0
  %28 = extractvalue { i64, i1 } %26, 1
  %29 = call { i64, i1 } @llvm.umul.with.overflow.i64(i64 %14, i64 4)
  %30 = extractvalue { i64, i1 } %29, 0
  %31 = extractvalue { i64, i1 } %29, 1
  %32 = and i64 %0, -16
  %33 = and i64 %18, 1
  %34 = icmp eq i64 %17, 0
  %35 = sub nuw nsw i64 %18, %33
  %36 = icmp eq i64 %33, 0
  %37 = icmp eq i64 %32, %0
  br label %38

38:                                               ; preds = %53, %11
  %39 = phi i64 [ 0, %11 ], [ %54, %53 ]
  %40 = mul i64 %39, %8
  %41 = add i64 %15, %40
  %42 = mul i64 %39, %5
  %43 = add i64 %42, %0
  %44 = mul i64 %39, %8
  %45 = add i64 %44, 2
  %46 = add i64 %44, 3
  %47 = add i64 %44, 1
  br i1 %12, label %53, label %48

48:                                               ; preds = %38
  %49 = mul i64 %39, %5
  %50 = mul i64 %39, %8
  %51 = getelementptr inbounds i8, i8* %3, i64 %49
  %52 = getelementptr inbounds i8, i8* %6, i64 %50
  br label %56

53:                                               ; preds = %154, %38
  %54 = add nuw i64 %39, 1
  %55 = icmp eq i64 %54, %2
  br i1 %55, label %171, label %38

56:                                               ; preds = %154, %48
  %57 = phi i64 [ 0, %48 ], [ %155, %154 ]
  %58 = mul i64 %57, %7
  %59 = add i64 %40, %58
  %60 = getelementptr i8, i8* %6, i64 %59
  %61 = add i64 %41, %58
  %62 = getelementptr i8, i8* %6, i64 %61
  %63 = mul i64 %57, %4
  %64 = add i64 %42, %63
  %65 = getelementptr i8, i8* %3, i64 %64
  %66 = add i64 %43, %63
  %67 = getelementptr i8, i8* %3, i64 %66
  %68 = mul i64 %57, %7
  %69 = add i64 %45, %68
  %70 = getelementptr i8, i8* %6, i64 %69
  %71 = ptrtoint i8* %70 to i64
  %72 = add i64 %46, %68
  %73 = getelementptr i8, i8* %6, i64 %72
  %74 = ptrtoint i8* %73 to i64
  %75 = add i64 %47, %68
  %76 = getelementptr i8, i8* %6, i64 %75
  %77 = ptrtoint i8* %76 to i64
  %78 = add i64 %44, %68
  %79 = getelementptr i8, i8* %6, i64 %78
  %80 = ptrtoint i8* %79 to i64
  %81 = mul i64 %57, %4
  %82 = getelementptr inbounds i8, i8* %51, i64 %81
  %83 = mul i64 %57, %7
  %84 = getelementptr inbounds i8, i8* %52, i64 %83
  br i1 %13, label %154, label %85

85:                                               ; preds = %56
  br i1 %19, label %86, label %88

86:                                               ; preds = %153, %104, %88, %85
  %87 = phi i64 [ 0, %104 ], [ 0, %88 ], [ 0, %85 ], [ %32, %153 ]
  br label %157

88:                                               ; preds = %85
  %89 = xor i64 %71, -1
  %90 = icmp ugt i64 %21, %89
  %91 = or i1 %90, %22
  %92 = xor i64 %74, -1
  %93 = icmp ugt i64 %24, %92
  %94 = or i1 %93, %25
  %95 = or i1 %91, %94
  %96 = xor i64 %77, -1
  %97 = icmp ugt i64 %27, %96
  %98 = or i1 %97, %28
  %99 = or i1 %95, %98
  %100 = xor i64 %80, -1
  %101 = icmp ugt i64 %30, %100
  %102 = or i1 %101, %31
  %103 = or i1 %99, %102
  br i1 %103, label %86, label %104

104:                                              ; preds = %88
  %105 = icmp ult i8* %60, %67
  %106 = icmp ult i8* %65, %62
  %107 = and i1 %105, %106
  br i1 %107, label %86, label %108

108:                                              ; preds = %104
  br i1 %34, label %139, label %109

109:                                              ; preds = %108
  %110 = getelementptr inbounds i8, i8* %84, i64 -3
  %111 = getelementptr inbounds i8, i8* %84, i64 -3
  br label %112

112:                                              ; preds = %112, %109
  %113 = phi i64 [ 0, %109 ], [ %136, %112 ]
  %114 = phi i64 [ %35, %109 ], [ %137, %112 ]
  %115 = getelementptr inbounds i8, i8* %82, i64 %113
  %116 = bitcast i8* %115 to <16 x i8>*
  %117 = load <16 x i8>, <16 x i8>* %116, align 1, !alias.scope !31
  %118 = shl i64 %113, 2
  %119 = or i64 %118, 3
  %120 = getelementptr inbounds i8, i8* %110, i64 %119
  %121 = bitcast i8* %120 to <64 x i8>*
  %122 = shufflevector <16 x i8> %117, <16 x i8> undef, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %123 = shufflevector <16 x i8> %117, <16 x i8> <i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1>, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %124 = shufflevector <32 x i8> %122, <32 x i8> %123, <64 x i32> <i32 0, i32 16, i32 32, i32 48, i32 1, i32 17, i32 33, i32 49, i32 2, i32 18, i32 34, i32 50, i32 3, i32 19, i32 35, i32 51, i32 4, i32 20, i32 36, i32 52, i32 5, i32 21, i32 37, i32 53, i32 6, i32 22, i32 38, i32 54, i32 7, i32 23, i32 39, i32 55, i32 8, i32 24, i32 40, i32 56, i32 9, i32 25, i32 41, i32 57, i32 10, i32 26, i32 42, i32 58, i32 11, i32 27, i32 43, i32 59, i32 12, i32 28, i32 44, i32 60, i32 13, i32 29, i32 45, i32 61, i32 14, i32 30, i32 46, i32 62, i32 15, i32 31, i32 47, i32 63>
  store <64 x i8> %124, <64 x i8>* %121, align 1
  %125 = or i64 %113, 16
  %126 = getelementptr inbounds i8, i8* %82, i64 %125
  %127 = bitcast i8* %126 to <16 x i8>*
  %128 = load <16 x i8>, <16 x i8>* %127, align 1, !alias.scope !31
  %129 = shl i64 %125, 2
  %130 = or i64 %129, 3
  %131 = getelementptr inbounds i8, i8* %111, i64 %130
  %132 = bitcast i8* %131 to <64 x i8>*
  %133 = shufflevector <16 x i8> %128, <16 x i8> undef, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %134 = shufflevector <16 x i8> %128, <16 x i8> <i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1>, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %135 = shufflevector <32 x i8> %133, <32 x i8> %134, <64 x i32> <i32 0, i32 16, i32 32, i32 48, i32 1, i32 17, i32 33, i32 49, i32 2, i32 18, i32 34, i32 50, i32 3, i32 19, i32 35, i32 51, i32 4, i32 20, i32 36, i32 52, i32 5, i32 21, i32 37, i32 53, i32 6, i32 22, i32 38, i32 54, i32 7, i32 23, i32 39, i32 55, i32 8, i32 24, i32 40, i32 56, i32 9, i32 25, i32 41, i32 57, i32 10, i32 26, i32 42, i32 58, i32 11, i32 27, i32 43, i32 59, i32 12, i32 28, i32 44, i32 60, i32 13, i32 29, i32 45, i32 61, i32 14, i32 30, i32 46, i32 62, i32 15, i32 31, i32 47, i32 63>
  store <64 x i8> %135, <64 x i8>* %132, align 1
  %136 = add i64 %113, 32
  %137 = add i64 %114, -2
  %138 = icmp eq i64 %137, 0
  br i1 %138, label %139, label %112, !llvm.loop !34

139:                                              ; preds = %112, %108
  %140 = phi i64 [ 0, %108 ], [ %136, %112 ]
  br i1 %36, label %153, label %141

141:                                              ; preds = %139
  %142 = getelementptr inbounds i8, i8* %82, i64 %140
  %143 = bitcast i8* %142 to <16 x i8>*
  %144 = load <16 x i8>, <16 x i8>* %143, align 1, !alias.scope !31
  %145 = shl i64 %140, 2
  %146 = or i64 %145, 3
  %147 = getelementptr inbounds i8, i8* %84, i64 -3
  %148 = getelementptr inbounds i8, i8* %147, i64 %146
  %149 = bitcast i8* %148 to <64 x i8>*
  %150 = shufflevector <16 x i8> %144, <16 x i8> undef, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %151 = shufflevector <16 x i8> %144, <16 x i8> <i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1>, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %152 = shufflevector <32 x i8> %150, <32 x i8> %151, <64 x i32> <i32 0, i32 16, i32 32, i32 48, i32 1, i32 17, i32 33, i32 49, i32 2, i32 18, i32 34, i32 50, i32 3, i32 19, i32 35, i32 51, i32 4, i32 20, i32 36, i32 52, i32 5, i32 21, i32 37, i32 53, i32 6, i32 22, i32 38, i32 54, i32 7, i32 23, i32 39, i32 55, i32 8, i32 24, i32 40, i32 56, i32 9, i32 25, i32 41, i32 57, i32 10, i32 26, i32 42, i32 58, i32 11, i32 27, i32 43, i32 59, i32 12, i32 28, i32 44, i32 60, i32 13, i32 29, i32 45, i32 61, i32 14, i32 30, i32 46, i32 62, i32 15, i32 31, i32 47, i32 63>
  store <64 x i8> %152, <64 x i8>* %149, align 1
  br label %153

153:                                              ; preds = %139, %141
  br i1 %37, label %154, label %86

154:                                              ; preds = %157, %153, %56
  %155 = add nuw i64 %57, 1
  %156 = icmp eq i64 %155, %1
  br i1 %156, label %53, label %56

157:                                              ; preds = %86, %157
  %158 = phi i64 [ %169, %157 ], [ %87, %86 ]
  %159 = getelementptr inbounds i8, i8* %82, i64 %158
  %160 = load i8, i8* %159, align 1
  %161 = shl i64 %158, 2
  %162 = getelementptr inbounds i8, i8* %84, i64 %161
  store i8 %160, i8* %162, align 1
  %163 = or i64 %161, 1
  %164 = getelementptr inbounds i8, i8* %84, i64 %163
  store i8 %160, i8* %164, align 1
  %165 = or i64 %161, 2
  %166 = getelementptr inbounds i8, i8* %84, i64 %165
  store i8 %160, i8* %166, align 1
  %167 = or i64 %161, 3
  %168 = getelementptr inbounds i8, i8* %84, i64 %167
  store i8 -1, i8* %168, align 1
  %169 = add nuw i64 %158, 1
  %170 = icmp eq i64 %169, %0
  br i1 %170, label %154, label %157, !llvm.loop !35

171:                                              ; preds = %53, %9
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @_ZN5angle17LoadL32FToRGBA32FEmmmPKhmmPhmm(i64, i64, i64, i8* nocapture readonly, i64, i64, i8* nocapture, i64, i64) local_unnamed_addr #1 {
  %10 = icmp eq i64 %2, 0
  br i1 %10, label %24, label %11

11:                                               ; preds = %9
  %12 = icmp eq i64 %1, 0
  %13 = and i64 %0, 1
  %14 = icmp eq i64 %0, 1
  %15 = sub i64 %0, %13
  %16 = icmp eq i64 %13, 0
  br label %17

17:                                               ; preds = %25, %11
  %18 = phi i64 [ 0, %11 ], [ %26, %25 ]
  br i1 %12, label %25, label %19

19:                                               ; preds = %17
  %20 = mul i64 %18, %5
  %21 = mul i64 %18, %8
  %22 = getelementptr inbounds i8, i8* %3, i64 %20
  %23 = getelementptr inbounds i8, i8* %6, i64 %21
  br label %28

24:                                               ; preds = %25, %9
  ret void

25:                                               ; preds = %55, %17
  %26 = add nuw i64 %18, 1
  %27 = icmp eq i64 %26, %2
  br i1 %27, label %24, label %17

28:                                               ; preds = %55, %19
  %29 = phi i64 [ 0, %19 ], [ %56, %55 ]
  %30 = mul i64 %29, %4
  %31 = getelementptr inbounds i8, i8* %22, i64 %30
  %32 = bitcast i8* %31 to float*
  %33 = mul i64 %29, %7
  %34 = getelementptr inbounds i8, i8* %23, i64 %33
  %35 = bitcast i8* %34 to float*
  switch i64 %0, label %58 [
    i64 0, label %55
    i64 1, label %36
  ]

36:                                               ; preds = %58, %28
  %37 = phi i64 [ 0, %28 ], [ %94, %58 ]
  br i1 %16, label %55, label %38

38:                                               ; preds = %36
  %39 = getelementptr inbounds float, float* %32, i64 %37
  %40 = bitcast float* %39 to i32*
  %41 = load i32, i32* %40, align 4
  %42 = shl i64 %37, 2
  %43 = getelementptr inbounds float, float* %35, i64 %42
  %44 = bitcast float* %43 to i32*
  store i32 %41, i32* %44, align 4
  %45 = load i32, i32* %40, align 4
  %46 = or i64 %42, 1
  %47 = getelementptr inbounds float, float* %35, i64 %46
  %48 = bitcast float* %47 to i32*
  store i32 %45, i32* %48, align 4
  %49 = load i32, i32* %40, align 4
  %50 = or i64 %42, 2
  %51 = getelementptr inbounds float, float* %35, i64 %50
  %52 = bitcast float* %51 to i32*
  store i32 %49, i32* %52, align 4
  %53 = or i64 %42, 3
  %54 = getelementptr inbounds float, float* %35, i64 %53
  store float 1.000000e+00, float* %54, align 4
  br label %55

55:                                               ; preds = %38, %36, %28
  %56 = add nuw i64 %29, 1
  %57 = icmp eq i64 %56, %1
  br i1 %57, label %25, label %28

58:                                               ; preds = %28, %58
  %59 = phi i64 [ %94, %58 ], [ 0, %28 ]
  %60 = phi i64 [ %95, %58 ], [ %15, %28 ]
  %61 = getelementptr inbounds float, float* %32, i64 %59
  %62 = bitcast float* %61 to i32*
  %63 = load i32, i32* %62, align 4
  %64 = shl i64 %59, 2
  %65 = getelementptr inbounds float, float* %35, i64 %64
  %66 = bitcast float* %65 to i32*
  store i32 %63, i32* %66, align 4
  %67 = load i32, i32* %62, align 4
  %68 = or i64 %64, 1
  %69 = getelementptr inbounds float, float* %35, i64 %68
  %70 = bitcast float* %69 to i32*
  store i32 %67, i32* %70, align 4
  %71 = load i32, i32* %62, align 4
  %72 = or i64 %64, 2
  %73 = getelementptr inbounds float, float* %35, i64 %72
  %74 = bitcast float* %73 to i32*
  store i32 %71, i32* %74, align 4
  %75 = or i64 %64, 3
  %76 = getelementptr inbounds float, float* %35, i64 %75
  store float 1.000000e+00, float* %76, align 4
  %77 = or i64 %59, 1
  %78 = getelementptr inbounds float, float* %32, i64 %77
  %79 = bitcast float* %78 to i32*
  %80 = load i32, i32* %79, align 4
  %81 = shl i64 %77, 2
  %82 = getelementptr inbounds float, float* %35, i64 %81
  %83 = bitcast float* %82 to i32*
  store i32 %80, i32* %83, align 4
  %84 = load i32, i32* %79, align 4
  %85 = or i64 %81, 1
  %86 = getelementptr inbounds float, float* %35, i64 %85
  %87 = bitcast float* %86 to i32*
  store i32 %84, i32* %87, align 4
  %88 = load i32, i32* %79, align 4
  %89 = or i64 %81, 2
  %90 = getelementptr inbounds float, float* %35, i64 %89
  %91 = bitcast float* %90 to i32*
  store i32 %88, i32* %91, align 4
  %92 = or i64 %81, 3
  %93 = getelementptr inbounds float, float* %35, i64 %92
  store float 1.000000e+00, float* %93, align 4
  %94 = add nuw i64 %59, 2
  %95 = add i64 %60, -2
  %96 = icmp eq i64 %95, 0
  br i1 %96, label %36, label %58
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @_ZN5angle17LoadL16FToRGBA16FEmmmPKhmmPhmm(i64, i64, i64, i8* nocapture readonly, i64, i64, i8* nocapture, i64, i64) local_unnamed_addr #1 {
  %10 = icmp eq i64 %2, 0
  br i1 %10, label %54, label %11

11:                                               ; preds = %9
  %12 = icmp eq i64 %1, 0
  %13 = icmp eq i64 %0, 0
  %14 = add i64 %0, -1
  %15 = shl i64 %0, 3
  %16 = shl i64 %0, 1
  %17 = add i64 %0, -8
  %18 = lshr i64 %17, 3
  %19 = add nuw nsw i64 %18, 1
  %20 = icmp ult i64 %0, 8
  %21 = call { i64, i1 } @llvm.umul.with.overflow.i64(i64 %14, i64 8)
  %22 = extractvalue { i64, i1 } %21, 0
  %23 = extractvalue { i64, i1 } %21, 1
  %24 = call { i64, i1 } @llvm.umul.with.overflow.i64(i64 %14, i64 8)
  %25 = extractvalue { i64, i1 } %24, 0
  %26 = extractvalue { i64, i1 } %24, 1
  %27 = call { i64, i1 } @llvm.umul.with.overflow.i64(i64 %14, i64 8)
  %28 = extractvalue { i64, i1 } %27, 0
  %29 = extractvalue { i64, i1 } %27, 1
  %30 = call { i64, i1 } @llvm.umul.with.overflow.i64(i64 %14, i64 8)
  %31 = extractvalue { i64, i1 } %30, 0
  %32 = extractvalue { i64, i1 } %30, 1
  %33 = and i64 %0, -8
  %34 = and i64 %19, 1
  %35 = icmp eq i64 %18, 0
  %36 = sub nuw nsw i64 %19, %34
  %37 = icmp eq i64 %34, 0
  %38 = icmp eq i64 %33, %0
  br label %39

39:                                               ; preds = %55, %11
  %40 = phi i64 [ 0, %11 ], [ %56, %55 ]
  %41 = mul i64 %40, %8
  %42 = add i64 %15, %41
  %43 = mul i64 %40, %5
  %44 = add i64 %16, %43
  %45 = mul i64 %40, %8
  %46 = add i64 %45, 4
  %47 = add i64 %45, 6
  %48 = add i64 %45, 2
  br i1 %12, label %55, label %49

49:                                               ; preds = %39
  %50 = mul i64 %40, %5
  %51 = mul i64 %40, %8
  %52 = getelementptr inbounds i8, i8* %3, i64 %50
  %53 = getelementptr inbounds i8, i8* %6, i64 %51
  br label %58

54:                                               ; preds = %55, %9
  ret void

55:                                               ; preds = %161, %39
  %56 = add nuw i64 %40, 1
  %57 = icmp eq i64 %56, %2
  br i1 %57, label %54, label %39

58:                                               ; preds = %161, %49
  %59 = phi i64 [ 0, %49 ], [ %162, %161 ]
  %60 = mul i64 %59, %7
  %61 = add i64 %41, %60
  %62 = getelementptr i8, i8* %6, i64 %61
  %63 = add i64 %42, %60
  %64 = getelementptr i8, i8* %6, i64 %63
  %65 = mul i64 %59, %4
  %66 = add i64 %43, %65
  %67 = getelementptr i8, i8* %3, i64 %66
  %68 = add i64 %44, %65
  %69 = getelementptr i8, i8* %3, i64 %68
  %70 = mul i64 %59, %7
  %71 = add i64 %46, %70
  %72 = getelementptr i8, i8* %6, i64 %71
  %73 = ptrtoint i8* %72 to i64
  %74 = add i64 %47, %70
  %75 = getelementptr i8, i8* %6, i64 %74
  %76 = ptrtoint i8* %75 to i64
  %77 = add i64 %48, %70
  %78 = getelementptr i8, i8* %6, i64 %77
  %79 = ptrtoint i8* %78 to i64
  %80 = add i64 %45, %70
  %81 = getelementptr i8, i8* %6, i64 %80
  %82 = ptrtoint i8* %81 to i64
  %83 = mul i64 %59, %4
  %84 = getelementptr inbounds i8, i8* %52, i64 %83
  %85 = bitcast i8* %84 to i16*
  %86 = mul i64 %59, %7
  %87 = getelementptr inbounds i8, i8* %53, i64 %86
  %88 = bitcast i8* %87 to i16*
  br i1 %13, label %161, label %89

89:                                               ; preds = %58
  br i1 %20, label %90, label %92

90:                                               ; preds = %160, %108, %92, %89
  %91 = phi i64 [ 0, %108 ], [ 0, %92 ], [ 0, %89 ], [ %33, %160 ]
  br label %164

92:                                               ; preds = %89
  %93 = xor i64 %73, -1
  %94 = icmp ugt i64 %22, %93
  %95 = or i1 %94, %23
  %96 = xor i64 %76, -1
  %97 = icmp ugt i64 %25, %96
  %98 = or i1 %97, %26
  %99 = or i1 %95, %98
  %100 = xor i64 %79, -1
  %101 = icmp ugt i64 %28, %100
  %102 = or i1 %101, %29
  %103 = or i1 %99, %102
  %104 = xor i64 %82, -1
  %105 = icmp ugt i64 %31, %104
  %106 = or i1 %105, %32
  %107 = or i1 %103, %106
  br i1 %107, label %90, label %108

108:                                              ; preds = %92
  %109 = icmp ult i8* %62, %69
  %110 = icmp ult i8* %67, %64
  %111 = and i1 %109, %110
  br i1 %111, label %90, label %112

112:                                              ; preds = %108
  br i1 %35, label %145, label %113

113:                                              ; preds = %112
  %114 = getelementptr inbounds i8, i8* %87, i64 -6
  %115 = bitcast i8* %114 to i16*
  %116 = getelementptr inbounds i8, i8* %87, i64 -6
  %117 = bitcast i8* %116 to i16*
  br label %118

118:                                              ; preds = %118, %113
  %119 = phi i64 [ 0, %113 ], [ %142, %118 ]
  %120 = phi i64 [ %36, %113 ], [ %143, %118 ]
  %121 = getelementptr inbounds i16, i16* %85, i64 %119
  %122 = bitcast i16* %121 to <8 x i16>*
  %123 = load <8 x i16>, <8 x i16>* %122, align 2, !alias.scope !36
  %124 = shl i64 %119, 2
  %125 = or i64 %124, 3
  %126 = getelementptr inbounds i16, i16* %115, i64 %125
  %127 = bitcast i16* %126 to <32 x i16>*
  %128 = shufflevector <8 x i16> %123, <8 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %129 = shufflevector <8 x i16> %123, <8 x i16> <i16 15360, i16 15360, i16 15360, i16 15360, i16 15360, i16 15360, i16 15360, i16 15360>, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %130 = shufflevector <16 x i16> %128, <16 x i16> %129, <32 x i32> <i32 0, i32 8, i32 16, i32 24, i32 1, i32 9, i32 17, i32 25, i32 2, i32 10, i32 18, i32 26, i32 3, i32 11, i32 19, i32 27, i32 4, i32 12, i32 20, i32 28, i32 5, i32 13, i32 21, i32 29, i32 6, i32 14, i32 22, i32 30, i32 7, i32 15, i32 23, i32 31>
  store <32 x i16> %130, <32 x i16>* %127, align 2
  %131 = or i64 %119, 8
  %132 = getelementptr inbounds i16, i16* %85, i64 %131
  %133 = bitcast i16* %132 to <8 x i16>*
  %134 = load <8 x i16>, <8 x i16>* %133, align 2, !alias.scope !36
  %135 = shl i64 %131, 2
  %136 = or i64 %135, 3
  %137 = getelementptr inbounds i16, i16* %117, i64 %136
  %138 = bitcast i16* %137 to <32 x i16>*
  %139 = shufflevector <8 x i16> %134, <8 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %140 = shufflevector <8 x i16> %134, <8 x i16> <i16 15360, i16 15360, i16 15360, i16 15360, i16 15360, i16 15360, i16 15360, i16 15360>, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %141 = shufflevector <16 x i16> %139, <16 x i16> %140, <32 x i32> <i32 0, i32 8, i32 16, i32 24, i32 1, i32 9, i32 17, i32 25, i32 2, i32 10, i32 18, i32 26, i32 3, i32 11, i32 19, i32 27, i32 4, i32 12, i32 20, i32 28, i32 5, i32 13, i32 21, i32 29, i32 6, i32 14, i32 22, i32 30, i32 7, i32 15, i32 23, i32 31>
  store <32 x i16> %141, <32 x i16>* %138, align 2
  %142 = add i64 %119, 16
  %143 = add i64 %120, -2
  %144 = icmp eq i64 %143, 0
  br i1 %144, label %145, label %118, !llvm.loop !39

145:                                              ; preds = %118, %112
  %146 = phi i64 [ 0, %112 ], [ %142, %118 ]
  br i1 %37, label %160, label %147

147:                                              ; preds = %145
  %148 = getelementptr inbounds i16, i16* %85, i64 %146
  %149 = bitcast i16* %148 to <8 x i16>*
  %150 = load <8 x i16>, <8 x i16>* %149, align 2, !alias.scope !36
  %151 = shl i64 %146, 2
  %152 = or i64 %151, 3
  %153 = getelementptr inbounds i8, i8* %87, i64 -6
  %154 = bitcast i8* %153 to i16*
  %155 = getelementptr inbounds i16, i16* %154, i64 %152
  %156 = bitcast i16* %155 to <32 x i16>*
  %157 = shufflevector <8 x i16> %150, <8 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %158 = shufflevector <8 x i16> %150, <8 x i16> <i16 15360, i16 15360, i16 15360, i16 15360, i16 15360, i16 15360, i16 15360, i16 15360>, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %159 = shufflevector <16 x i16> %157, <16 x i16> %158, <32 x i32> <i32 0, i32 8, i32 16, i32 24, i32 1, i32 9, i32 17, i32 25, i32 2, i32 10, i32 18, i32 26, i32 3, i32 11, i32 19, i32 27, i32 4, i32 12, i32 20, i32 28, i32 5, i32 13, i32 21, i32 29, i32 6, i32 14, i32 22, i32 30, i32 7, i32 15, i32 23, i32 31>
  store <32 x i16> %159, <32 x i16>* %156, align 2
  br label %160

160:                                              ; preds = %145, %147
  br i1 %38, label %161, label %90

161:                                              ; preds = %164, %160, %58
  %162 = add nuw i64 %59, 1
  %163 = icmp eq i64 %162, %1
  br i1 %163, label %55, label %58

164:                                              ; preds = %90, %164
  %165 = phi i64 [ %178, %164 ], [ %91, %90 ]
  %166 = getelementptr inbounds i16, i16* %85, i64 %165
  %167 = load i16, i16* %166, align 2
  %168 = shl i64 %165, 2
  %169 = getelementptr inbounds i16, i16* %88, i64 %168
  store i16 %167, i16* %169, align 2
  %170 = load i16, i16* %166, align 2
  %171 = or i64 %168, 1
  %172 = getelementptr inbounds i16, i16* %88, i64 %171
  store i16 %170, i16* %172, align 2
  %173 = load i16, i16* %166, align 2
  %174 = or i64 %168, 2
  %175 = getelementptr inbounds i16, i16* %88, i64 %174
  store i16 %173, i16* %175, align 2
  %176 = or i64 %168, 3
  %177 = getelementptr inbounds i16, i16* %88, i64 %176
  store i16 15360, i16* %177, align 2
  %178 = add nuw i64 %165, 1
  %179 = icmp eq i64 %178, %0
  br i1 %179, label %161, label %164, !llvm.loop !40
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @_ZN5angle14LoadLA8ToRGBA8EmmmPKhmmPhmm(i64, i64, i64, i8* nocapture readonly, i64, i64, i8* nocapture, i64, i64) local_unnamed_addr #1 {
  %10 = icmp eq i64 %2, 0
  br i1 %10, label %21, label %11

11:                                               ; preds = %9
  %12 = icmp eq i64 %1, 0
  %13 = icmp eq i64 %0, 0
  br label %14

14:                                               ; preds = %22, %11
  %15 = phi i64 [ 0, %11 ], [ %23, %22 ]
  br i1 %12, label %22, label %16

16:                                               ; preds = %14
  %17 = mul i64 %15, %5
  %18 = mul i64 %15, %8
  %19 = getelementptr inbounds i8, i8* %3, i64 %17
  %20 = getelementptr inbounds i8, i8* %6, i64 %18
  br label %25

21:                                               ; preds = %22, %9
  ret void

22:                                               ; preds = %31, %14
  %23 = add nuw i64 %15, 1
  %24 = icmp eq i64 %23, %2
  br i1 %24, label %21, label %14

25:                                               ; preds = %31, %16
  %26 = phi i64 [ 0, %16 ], [ %32, %31 ]
  %27 = mul i64 %26, %4
  %28 = getelementptr inbounds i8, i8* %19, i64 %27
  %29 = mul i64 %26, %7
  %30 = getelementptr inbounds i8, i8* %20, i64 %29
  br i1 %13, label %31, label %34

31:                                               ; preds = %34, %25
  %32 = add nuw i64 %26, 1
  %33 = icmp eq i64 %32, %1
  br i1 %33, label %22, label %25

34:                                               ; preds = %25, %34
  %35 = phi i64 [ %52, %34 ], [ 0, %25 ]
  %36 = shl i64 %35, 1
  %37 = getelementptr inbounds i8, i8* %28, i64 %36
  %38 = load i8, i8* %37, align 1
  %39 = shl i64 %35, 2
  %40 = getelementptr inbounds i8, i8* %30, i64 %39
  store i8 %38, i8* %40, align 1
  %41 = load i8, i8* %37, align 1
  %42 = or i64 %39, 1
  %43 = getelementptr inbounds i8, i8* %30, i64 %42
  store i8 %41, i8* %43, align 1
  %44 = load i8, i8* %37, align 1
  %45 = or i64 %39, 2
  %46 = getelementptr inbounds i8, i8* %30, i64 %45
  store i8 %44, i8* %46, align 1
  %47 = or i64 %36, 1
  %48 = getelementptr inbounds i8, i8* %28, i64 %47
  %49 = load i8, i8* %48, align 1
  %50 = or i64 %39, 3
  %51 = getelementptr inbounds i8, i8* %30, i64 %50
  store i8 %49, i8* %51, align 1
  %52 = add nuw i64 %35, 1
  %53 = icmp eq i64 %52, %0
  br i1 %53, label %31, label %34
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @_ZN5angle14LoadLA8ToBGRA8EmmmPKhmmPhmm(i64, i64, i64, i8* nocapture readonly, i64, i64, i8* nocapture, i64, i64) local_unnamed_addr #1 {
  %10 = icmp eq i64 %2, 0
  br i1 %10, label %53, label %11

11:                                               ; preds = %9
  %12 = icmp eq i64 %1, 0
  %13 = icmp eq i64 %0, 0
  br label %14

14:                                               ; preds = %21, %11
  %15 = phi i64 [ 0, %11 ], [ %22, %21 ]
  br i1 %12, label %21, label %16

16:                                               ; preds = %14
  %17 = mul i64 %15, %5
  %18 = mul i64 %15, %8
  %19 = getelementptr inbounds i8, i8* %3, i64 %17
  %20 = getelementptr inbounds i8, i8* %6, i64 %18
  br label %24

21:                                               ; preds = %30, %14
  %22 = add nuw i64 %15, 1
  %23 = icmp eq i64 %22, %2
  br i1 %23, label %53, label %14

24:                                               ; preds = %30, %16
  %25 = phi i64 [ 0, %16 ], [ %31, %30 ]
  %26 = mul i64 %25, %4
  %27 = getelementptr inbounds i8, i8* %19, i64 %26
  %28 = mul i64 %25, %7
  %29 = getelementptr inbounds i8, i8* %20, i64 %28
  br i1 %13, label %30, label %33

30:                                               ; preds = %33, %24
  %31 = add nuw i64 %25, 1
  %32 = icmp eq i64 %31, %1
  br i1 %32, label %21, label %24

33:                                               ; preds = %24, %33
  %34 = phi i64 [ %51, %33 ], [ 0, %24 ]
  %35 = shl i64 %34, 1
  %36 = getelementptr inbounds i8, i8* %27, i64 %35
  %37 = load i8, i8* %36, align 1
  %38 = shl i64 %34, 2
  %39 = getelementptr inbounds i8, i8* %29, i64 %38
  store i8 %37, i8* %39, align 1
  %40 = load i8, i8* %36, align 1
  %41 = or i64 %38, 1
  %42 = getelementptr inbounds i8, i8* %29, i64 %41
  store i8 %40, i8* %42, align 1
  %43 = load i8, i8* %36, align 1
  %44 = or i64 %38, 2
  %45 = getelementptr inbounds i8, i8* %29, i64 %44
  store i8 %43, i8* %45, align 1
  %46 = or i64 %35, 1
  %47 = getelementptr inbounds i8, i8* %27, i64 %46
  %48 = load i8, i8* %47, align 1
  %49 = or i64 %38, 3
  %50 = getelementptr inbounds i8, i8* %29, i64 %49
  store i8 %48, i8* %50, align 1
  %51 = add nuw i64 %34, 1
  %52 = icmp eq i64 %51, %0
  br i1 %52, label %30, label %33

53:                                               ; preds = %21, %9
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @_ZN5angle18LoadLA32FToRGBA32FEmmmPKhmmPhmm(i64, i64, i64, i8* nocapture readonly, i64, i64, i8* nocapture, i64, i64) local_unnamed_addr #1 {
  %10 = icmp eq i64 %2, 0
  br i1 %10, label %21, label %11

11:                                               ; preds = %9
  %12 = icmp eq i64 %1, 0
  %13 = icmp eq i64 %0, 0
  br label %14

14:                                               ; preds = %22, %11
  %15 = phi i64 [ 0, %11 ], [ %23, %22 ]
  br i1 %12, label %22, label %16

16:                                               ; preds = %14
  %17 = mul i64 %15, %5
  %18 = mul i64 %15, %8
  %19 = getelementptr inbounds i8, i8* %3, i64 %17
  %20 = getelementptr inbounds i8, i8* %6, i64 %18
  br label %25

21:                                               ; preds = %22, %9
  ret void

22:                                               ; preds = %33, %14
  %23 = add nuw i64 %15, 1
  %24 = icmp eq i64 %23, %2
  br i1 %24, label %21, label %14

25:                                               ; preds = %33, %16
  %26 = phi i64 [ 0, %16 ], [ %34, %33 ]
  %27 = mul i64 %26, %4
  %28 = getelementptr inbounds i8, i8* %19, i64 %27
  %29 = bitcast i8* %28 to float*
  %30 = mul i64 %26, %7
  %31 = getelementptr inbounds i8, i8* %20, i64 %30
  %32 = bitcast i8* %31 to float*
  br i1 %13, label %33, label %36

33:                                               ; preds = %36, %25
  %34 = add nuw i64 %26, 1
  %35 = icmp eq i64 %34, %1
  br i1 %35, label %22, label %25

36:                                               ; preds = %25, %36
  %37 = phi i64 [ %60, %36 ], [ 0, %25 ]
  %38 = shl i64 %37, 1
  %39 = getelementptr inbounds float, float* %29, i64 %38
  %40 = bitcast float* %39 to i32*
  %41 = load i32, i32* %40, align 4
  %42 = shl i64 %37, 2
  %43 = getelementptr inbounds float, float* %32, i64 %42
  %44 = bitcast float* %43 to i32*
  store i32 %41, i32* %44, align 4
  %45 = load i32, i32* %40, align 4
  %46 = or i64 %42, 1
  %47 = getelementptr inbounds float, float* %32, i64 %46
  %48 = bitcast float* %47 to i32*
  store i32 %45, i32* %48, align 4
  %49 = load i32, i32* %40, align 4
  %50 = or i64 %42, 2
  %51 = getelementptr inbounds float, float* %32, i64 %50
  %52 = bitcast float* %51 to i32*
  store i32 %49, i32* %52, align 4
  %53 = or i64 %38, 1
  %54 = getelementptr inbounds float, float* %29, i64 %53
  %55 = bitcast float* %54 to i32*
  %56 = load i32, i32* %55, align 4
  %57 = or i64 %42, 3
  %58 = getelementptr inbounds float, float* %32, i64 %57
  %59 = bitcast float* %58 to i32*
  store i32 %56, i32* %59, align 4
  %60 = add nuw i64 %37, 1
  %61 = icmp eq i64 %60, %0
  br i1 %61, label %33, label %36
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @_ZN5angle18LoadLA16FToRGBA16FEmmmPKhmmPhmm(i64, i64, i64, i8* nocapture readonly, i64, i64, i8* nocapture, i64, i64) local_unnamed_addr #1 {
  %10 = icmp eq i64 %2, 0
  br i1 %10, label %21, label %11

11:                                               ; preds = %9
  %12 = icmp eq i64 %1, 0
  %13 = icmp eq i64 %0, 0
  br label %14

14:                                               ; preds = %22, %11
  %15 = phi i64 [ 0, %11 ], [ %23, %22 ]
  br i1 %12, label %22, label %16

16:                                               ; preds = %14
  %17 = mul i64 %15, %5
  %18 = mul i64 %15, %8
  %19 = getelementptr inbounds i8, i8* %3, i64 %17
  %20 = getelementptr inbounds i8, i8* %6, i64 %18
  br label %25

21:                                               ; preds = %22, %9
  ret void

22:                                               ; preds = %33, %14
  %23 = add nuw i64 %15, 1
  %24 = icmp eq i64 %23, %2
  br i1 %24, label %21, label %14

25:                                               ; preds = %33, %16
  %26 = phi i64 [ 0, %16 ], [ %34, %33 ]
  %27 = mul i64 %26, %4
  %28 = getelementptr inbounds i8, i8* %19, i64 %27
  %29 = bitcast i8* %28 to i16*
  %30 = mul i64 %26, %7
  %31 = getelementptr inbounds i8, i8* %20, i64 %30
  %32 = bitcast i8* %31 to i16*
  br i1 %13, label %33, label %36

33:                                               ; preds = %36, %25
  %34 = add nuw i64 %26, 1
  %35 = icmp eq i64 %34, %1
  br i1 %35, label %22, label %25

36:                                               ; preds = %25, %36
  %37 = phi i64 [ %54, %36 ], [ 0, %25 ]
  %38 = shl i64 %37, 1
  %39 = getelementptr inbounds i16, i16* %29, i64 %38
  %40 = load i16, i16* %39, align 2
  %41 = shl i64 %37, 2
  %42 = getelementptr inbounds i16, i16* %32, i64 %41
  store i16 %40, i16* %42, align 2
  %43 = load i16, i16* %39, align 2
  %44 = or i64 %41, 1
  %45 = getelementptr inbounds i16, i16* %32, i64 %44
  store i16 %43, i16* %45, align 2
  %46 = load i16, i16* %39, align 2
  %47 = or i64 %41, 2
  %48 = getelementptr inbounds i16, i16* %32, i64 %47
  store i16 %46, i16* %48, align 2
  %49 = or i64 %38, 1
  %50 = getelementptr inbounds i16, i16* %29, i64 %49
  %51 = load i16, i16* %50, align 2
  %52 = or i64 %41, 3
  %53 = getelementptr inbounds i16, i16* %32, i64 %52
  store i16 %51, i16* %53, align 2
  %54 = add nuw i64 %37, 1
  %55 = icmp eq i64 %54, %0
  br i1 %55, label %33, label %36
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @_ZN5angle16LoadRGB8ToBGR565EmmmPKhmmPhmm(i64, i64, i64, i8* nocapture readonly, i64, i64, i8* nocapture, i64, i64) local_unnamed_addr #1 {
  %10 = icmp eq i64 %2, 0
  br i1 %10, label %30, label %11

11:                                               ; preds = %9
  %12 = icmp eq i64 %1, 0
  %13 = icmp eq i64 %0, 0
  %14 = shl i64 %0, 1
  %15 = mul i64 %0, 3
  %16 = icmp ult i64 %0, 8
  %17 = and i64 %0, -8
  %18 = icmp eq i64 %17, %0
  br label %19

19:                                               ; preds = %31, %11
  %20 = phi i64 [ 0, %11 ], [ %32, %31 ]
  %21 = mul i64 %20, %8
  %22 = add i64 %14, %21
  %23 = mul i64 %20, %5
  %24 = add i64 %15, %23
  br i1 %12, label %31, label %25

25:                                               ; preds = %19
  %26 = mul i64 %20, %5
  %27 = mul i64 %20, %8
  %28 = getelementptr inbounds i8, i8* %3, i64 %26
  %29 = getelementptr inbounds i8, i8* %6, i64 %27
  br label %34

30:                                               ; preds = %31, %9
  ret void

31:                                               ; preds = %82, %19
  %32 = add nuw i64 %20, 1
  %33 = icmp eq i64 %32, %2
  br i1 %33, label %30, label %19

34:                                               ; preds = %82, %25
  %35 = phi i64 [ 0, %25 ], [ %83, %82 ]
  %36 = mul i64 %35, %7
  %37 = add i64 %21, %36
  %38 = getelementptr i8, i8* %6, i64 %37
  %39 = add i64 %22, %36
  %40 = getelementptr i8, i8* %6, i64 %39
  %41 = mul i64 %35, %4
  %42 = add i64 %23, %41
  %43 = getelementptr i8, i8* %3, i64 %42
  %44 = add i64 %24, %41
  %45 = getelementptr i8, i8* %3, i64 %44
  %46 = mul i64 %35, %4
  %47 = getelementptr inbounds i8, i8* %28, i64 %46
  %48 = mul i64 %35, %7
  %49 = getelementptr inbounds i8, i8* %29, i64 %48
  %50 = bitcast i8* %49 to i16*
  br i1 %13, label %82, label %51

51:                                               ; preds = %34
  br i1 %16, label %52, label %54

52:                                               ; preds = %81, %54, %51
  %53 = phi i64 [ 0, %54 ], [ 0, %51 ], [ %17, %81 ]
  br label %85

54:                                               ; preds = %51
  %55 = icmp ult i8* %38, %45
  %56 = icmp ult i8* %43, %40
  %57 = and i1 %55, %56
  br i1 %57, label %52, label %58

58:                                               ; preds = %54, %58
  %59 = phi i64 [ %79, %58 ], [ 0, %54 ]
  %60 = mul i64 %59, 3
  %61 = getelementptr inbounds i8, i8* %47, i64 %60
  %62 = bitcast i8* %61 to <24 x i8>*
  %63 = load <24 x i8>, <24 x i8>* %62, align 1
  %64 = shufflevector <24 x i8> %63, <24 x i8> undef, <8 x i32> <i32 0, i32 3, i32 6, i32 9, i32 12, i32 15, i32 18, i32 21>
  %65 = shufflevector <24 x i8> %63, <24 x i8> undef, <8 x i32> <i32 1, i32 4, i32 7, i32 10, i32 13, i32 16, i32 19, i32 22>
  %66 = shufflevector <24 x i8> %63, <24 x i8> undef, <8 x i32> <i32 2, i32 5, i32 8, i32 11, i32 14, i32 17, i32 20, i32 23>
  %67 = lshr <8 x i8> %64, <i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3>
  %68 = lshr <8 x i8> %65, <i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2>
  %69 = lshr <8 x i8> %66, <i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3>
  %70 = zext <8 x i8> %67 to <8 x i16>
  %71 = shl nuw <8 x i16> %70, <i16 11, i16 11, i16 11, i16 11, i16 11, i16 11, i16 11, i16 11>
  %72 = zext <8 x i8> %68 to <8 x i16>
  %73 = shl nuw nsw <8 x i16> %72, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %74 = or <8 x i16> %73, %71
  %75 = zext <8 x i8> %69 to <8 x i16>
  %76 = or <8 x i16> %74, %75
  %77 = getelementptr inbounds i16, i16* %50, i64 %59
  %78 = bitcast i16* %77 to <8 x i16>*
  store <8 x i16> %76, <8 x i16>* %78, align 2, !alias.scope !41, !noalias !44
  %79 = add i64 %59, 8
  %80 = icmp eq i64 %79, %17
  br i1 %80, label %81, label %58, !llvm.loop !46

81:                                               ; preds = %58
  br i1 %18, label %82, label %52

82:                                               ; preds = %85, %81, %34
  %83 = add nuw i64 %35, 1
  %84 = icmp eq i64 %83, %1
  br i1 %84, label %31, label %34

85:                                               ; preds = %52, %85
  %86 = phi i64 [ %107, %85 ], [ %53, %52 ]
  %87 = mul i64 %86, 3
  %88 = getelementptr inbounds i8, i8* %47, i64 %87
  %89 = load i8, i8* %88, align 1
  %90 = add i64 %87, 1
  %91 = getelementptr inbounds i8, i8* %47, i64 %90
  %92 = load i8, i8* %91, align 1
  %93 = add i64 %87, 2
  %94 = getelementptr inbounds i8, i8* %47, i64 %93
  %95 = load i8, i8* %94, align 1
  %96 = lshr i8 %89, 3
  %97 = lshr i8 %92, 2
  %98 = lshr i8 %95, 3
  %99 = zext i8 %96 to i16
  %100 = shl nuw i16 %99, 11
  %101 = zext i8 %97 to i16
  %102 = shl nuw nsw i16 %101, 5
  %103 = or i16 %102, %100
  %104 = zext i8 %98 to i16
  %105 = or i16 %103, %104
  %106 = getelementptr inbounds i16, i16* %50, i64 %86
  store i16 %105, i16* %106, align 2
  %107 = add nuw i64 %86, 1
  %108 = icmp eq i64 %107, %0
  br i1 %108, label %82, label %85, !llvm.loop !47
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @_ZN5angle18LoadRGB565ToBGR565EmmmPKhmmPhmm(i64, i64, i64, i8* nocapture readonly, i64, i64, i8* nocapture, i64, i64) local_unnamed_addr #1 {
  %10 = icmp eq i64 %2, 0
  br i1 %10, label %38, label %11

11:                                               ; preds = %9
  %12 = icmp eq i64 %1, 0
  %13 = icmp eq i64 %0, 0
  %14 = shl i64 %0, 1
  %15 = add i64 %0, -16
  %16 = lshr i64 %15, 4
  %17 = add nuw nsw i64 %16, 1
  %18 = icmp ult i64 %0, 16
  %19 = and i64 %0, -16
  %20 = and i64 %17, 3
  %21 = icmp ult i64 %15, 48
  %22 = sub nsw i64 %17, %20
  %23 = icmp eq i64 %20, 0
  %24 = icmp eq i64 %19, %0
  %25 = and i64 %0, 3
  %26 = icmp eq i64 %25, 0
  br label %27

27:                                               ; preds = %39, %11
  %28 = phi i64 [ 0, %11 ], [ %40, %39 ]
  %29 = mul i64 %28, %8
  %30 = add i64 %14, %29
  %31 = mul i64 %28, %5
  %32 = add i64 %14, %31
  br i1 %12, label %39, label %33

33:                                               ; preds = %27
  %34 = mul i64 %28, %5
  %35 = mul i64 %28, %8
  %36 = getelementptr inbounds i8, i8* %3, i64 %34
  %37 = getelementptr inbounds i8, i8* %6, i64 %35
  br label %42

38:                                               ; preds = %39, %9
  ret void

39:                                               ; preds = %150, %27
  %40 = add nuw i64 %28, 1
  %41 = icmp eq i64 %40, %2
  br i1 %41, label %38, label %27

42:                                               ; preds = %150, %33
  %43 = phi i64 [ 0, %33 ], [ %151, %150 ]
  %44 = mul i64 %43, %7
  %45 = add i64 %29, %44
  %46 = getelementptr i8, i8* %6, i64 %45
  %47 = add i64 %30, %44
  %48 = getelementptr i8, i8* %6, i64 %47
  %49 = mul i64 %43, %4
  %50 = add i64 %31, %49
  %51 = getelementptr i8, i8* %3, i64 %50
  %52 = add i64 %32, %49
  %53 = getelementptr i8, i8* %3, i64 %52
  %54 = mul i64 %43, %4
  %55 = getelementptr inbounds i8, i8* %36, i64 %54
  %56 = bitcast i8* %55 to i16*
  %57 = mul i64 %43, %7
  %58 = getelementptr inbounds i8, i8* %37, i64 %57
  %59 = bitcast i8* %58 to i16*
  br i1 %13, label %150, label %60

60:                                               ; preds = %42
  br i1 %18, label %61, label %77

61:                                               ; preds = %149, %77, %60
  %62 = phi i64 [ 0, %77 ], [ 0, %60 ], [ %19, %149 ]
  %63 = xor i64 %62, -1
  %64 = add i64 %63, %0
  br i1 %26, label %74, label %65

65:                                               ; preds = %61, %65
  %66 = phi i64 [ %71, %65 ], [ %62, %61 ]
  %67 = phi i64 [ %72, %65 ], [ %25, %61 ]
  %68 = getelementptr inbounds i16, i16* %56, i64 %66
  %69 = load i16, i16* %68, align 2
  %70 = getelementptr inbounds i16, i16* %59, i64 %66
  store i16 %69, i16* %70, align 2
  %71 = add nuw i64 %66, 1
  %72 = add i64 %67, -1
  %73 = icmp eq i64 %72, 0
  br i1 %73, label %74, label %65, !llvm.loop !48

74:                                               ; preds = %65, %61
  %75 = phi i64 [ %62, %61 ], [ %71, %65 ]
  %76 = icmp ult i64 %64, 3
  br i1 %76, label %150, label %153

77:                                               ; preds = %60
  %78 = icmp ult i8* %46, %53
  %79 = icmp ult i8* %51, %48
  %80 = and i1 %78, %79
  br i1 %80, label %61, label %81

81:                                               ; preds = %77
  br i1 %21, label %131, label %82

82:                                               ; preds = %81, %82
  %83 = phi i64 [ %128, %82 ], [ 0, %81 ]
  %84 = phi i64 [ %129, %82 ], [ %22, %81 ]
  %85 = getelementptr inbounds i16, i16* %56, i64 %83
  %86 = bitcast i16* %85 to <8 x i16>*
  %87 = load <8 x i16>, <8 x i16>* %86, align 2, !alias.scope !49
  %88 = getelementptr inbounds i16, i16* %85, i64 8
  %89 = bitcast i16* %88 to <8 x i16>*
  %90 = load <8 x i16>, <8 x i16>* %89, align 2, !alias.scope !49
  %91 = getelementptr inbounds i16, i16* %59, i64 %83
  %92 = bitcast i16* %91 to <8 x i16>*
  store <8 x i16> %87, <8 x i16>* %92, align 2, !alias.scope !52, !noalias !49
  %93 = getelementptr inbounds i16, i16* %91, i64 8
  %94 = bitcast i16* %93 to <8 x i16>*
  store <8 x i16> %90, <8 x i16>* %94, align 2, !alias.scope !52, !noalias !49
  %95 = or i64 %83, 16
  %96 = getelementptr inbounds i16, i16* %56, i64 %95
  %97 = bitcast i16* %96 to <8 x i16>*
  %98 = load <8 x i16>, <8 x i16>* %97, align 2, !alias.scope !49
  %99 = getelementptr inbounds i16, i16* %96, i64 8
  %100 = bitcast i16* %99 to <8 x i16>*
  %101 = load <8 x i16>, <8 x i16>* %100, align 2, !alias.scope !49
  %102 = getelementptr inbounds i16, i16* %59, i64 %95
  %103 = bitcast i16* %102 to <8 x i16>*
  store <8 x i16> %98, <8 x i16>* %103, align 2, !alias.scope !52, !noalias !49
  %104 = getelementptr inbounds i16, i16* %102, i64 8
  %105 = bitcast i16* %104 to <8 x i16>*
  store <8 x i16> %101, <8 x i16>* %105, align 2, !alias.scope !52, !noalias !49
  %106 = or i64 %83, 32
  %107 = getelementptr inbounds i16, i16* %56, i64 %106
  %108 = bitcast i16* %107 to <8 x i16>*
  %109 = load <8 x i16>, <8 x i16>* %108, align 2, !alias.scope !49
  %110 = getelementptr inbounds i16, i16* %107, i64 8
  %111 = bitcast i16* %110 to <8 x i16>*
  %112 = load <8 x i16>, <8 x i16>* %111, align 2, !alias.scope !49
  %113 = getelementptr inbounds i16, i16* %59, i64 %106
  %114 = bitcast i16* %113 to <8 x i16>*
  store <8 x i16> %109, <8 x i16>* %114, align 2, !alias.scope !52, !noalias !49
  %115 = getelementptr inbounds i16, i16* %113, i64 8
  %116 = bitcast i16* %115 to <8 x i16>*
  store <8 x i16> %112, <8 x i16>* %116, align 2, !alias.scope !52, !noalias !49
  %117 = or i64 %83, 48
  %118 = getelementptr inbounds i16, i16* %56, i64 %117
  %119 = bitcast i16* %118 to <8 x i16>*
  %120 = load <8 x i16>, <8 x i16>* %119, align 2, !alias.scope !49
  %121 = getelementptr inbounds i16, i16* %118, i64 8
  %122 = bitcast i16* %121 to <8 x i16>*
  %123 = load <8 x i16>, <8 x i16>* %122, align 2, !alias.scope !49
  %124 = getelementptr inbounds i16, i16* %59, i64 %117
  %125 = bitcast i16* %124 to <8 x i16>*
  store <8 x i16> %120, <8 x i16>* %125, align 2, !alias.scope !52, !noalias !49
  %126 = getelementptr inbounds i16, i16* %124, i64 8
  %127 = bitcast i16* %126 to <8 x i16>*
  store <8 x i16> %123, <8 x i16>* %127, align 2, !alias.scope !52, !noalias !49
  %128 = add i64 %83, 64
  %129 = add i64 %84, -4
  %130 = icmp eq i64 %129, 0
  br i1 %130, label %131, label %82, !llvm.loop !54

131:                                              ; preds = %82, %81
  %132 = phi i64 [ 0, %81 ], [ %128, %82 ]
  br i1 %23, label %149, label %133

133:                                              ; preds = %131, %133
  %134 = phi i64 [ %146, %133 ], [ %132, %131 ]
  %135 = phi i64 [ %147, %133 ], [ %20, %131 ]
  %136 = getelementptr inbounds i16, i16* %56, i64 %134
  %137 = bitcast i16* %136 to <8 x i16>*
  %138 = load <8 x i16>, <8 x i16>* %137, align 2, !alias.scope !49
  %139 = getelementptr inbounds i16, i16* %136, i64 8
  %140 = bitcast i16* %139 to <8 x i16>*
  %141 = load <8 x i16>, <8 x i16>* %140, align 2, !alias.scope !49
  %142 = getelementptr inbounds i16, i16* %59, i64 %134
  %143 = bitcast i16* %142 to <8 x i16>*
  store <8 x i16> %138, <8 x i16>* %143, align 2, !alias.scope !52, !noalias !49
  %144 = getelementptr inbounds i16, i16* %142, i64 8
  %145 = bitcast i16* %144 to <8 x i16>*
  store <8 x i16> %141, <8 x i16>* %145, align 2, !alias.scope !52, !noalias !49
  %146 = add i64 %134, 16
  %147 = add i64 %135, -1
  %148 = icmp eq i64 %147, 0
  br i1 %148, label %149, label %133, !llvm.loop !55

149:                                              ; preds = %133, %131
  br i1 %24, label %150, label %61

150:                                              ; preds = %74, %153, %149, %42
  %151 = add nuw i64 %43, 1
  %152 = icmp eq i64 %151, %1
  br i1 %152, label %39, label %42

153:                                              ; preds = %74, %153
  %154 = phi i64 [ %170, %153 ], [ %75, %74 ]
  %155 = getelementptr inbounds i16, i16* %56, i64 %154
  %156 = load i16, i16* %155, align 2
  %157 = getelementptr inbounds i16, i16* %59, i64 %154
  store i16 %156, i16* %157, align 2
  %158 = add nuw i64 %154, 1
  %159 = getelementptr inbounds i16, i16* %56, i64 %158
  %160 = load i16, i16* %159, align 2
  %161 = getelementptr inbounds i16, i16* %59, i64 %158
  store i16 %160, i16* %161, align 2
  %162 = add nuw i64 %154, 2
  %163 = getelementptr inbounds i16, i16* %56, i64 %162
  %164 = load i16, i16* %163, align 2
  %165 = getelementptr inbounds i16, i16* %59, i64 %162
  store i16 %164, i16* %165, align 2
  %166 = add nuw i64 %154, 3
  %167 = getelementptr inbounds i16, i16* %56, i64 %166
  %168 = load i16, i16* %167, align 2
  %169 = getelementptr inbounds i16, i16* %59, i64 %166
  store i16 %168, i16* %169, align 2
  %170 = add nuw i64 %154, 4
  %171 = icmp eq i64 %170, %0
  br i1 %171, label %150, label %153, !llvm.loop !56
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @_ZN5angle15LoadRGB8ToBGRX8EmmmPKhmmPhmm(i64, i64, i64, i8* nocapture readonly, i64, i64, i8* nocapture, i64, i64) local_unnamed_addr #1 {
  %10 = icmp eq i64 %2, 0
  br i1 %10, label %21, label %11

11:                                               ; preds = %9
  %12 = icmp eq i64 %1, 0
  %13 = icmp eq i64 %0, 0
  br label %14

14:                                               ; preds = %22, %11
  %15 = phi i64 [ 0, %11 ], [ %23, %22 ]
  br i1 %12, label %22, label %16

16:                                               ; preds = %14
  %17 = mul i64 %15, %5
  %18 = mul i64 %15, %8
  %19 = getelementptr inbounds i8, i8* %3, i64 %17
  %20 = getelementptr inbounds i8, i8* %6, i64 %18
  br label %25

21:                                               ; preds = %22, %9
  ret void

22:                                               ; preds = %31, %14
  %23 = add nuw i64 %15, 1
  %24 = icmp eq i64 %23, %2
  br i1 %24, label %21, label %14

25:                                               ; preds = %31, %16
  %26 = phi i64 [ 0, %16 ], [ %32, %31 ]
  %27 = mul i64 %26, %4
  %28 = getelementptr inbounds i8, i8* %19, i64 %27
  %29 = mul i64 %26, %7
  %30 = getelementptr inbounds i8, i8* %20, i64 %29
  br i1 %13, label %31, label %34

31:                                               ; preds = %34, %25
  %32 = add nuw i64 %26, 1
  %33 = icmp eq i64 %32, %1
  br i1 %33, label %22, label %25

34:                                               ; preds = %25, %34
  %35 = phi i64 [ %53, %34 ], [ 0, %25 ]
  %36 = mul i64 %35, 3
  %37 = add i64 %36, 2
  %38 = getelementptr inbounds i8, i8* %28, i64 %37
  %39 = load i8, i8* %38, align 1
  %40 = shl i64 %35, 2
  %41 = getelementptr inbounds i8, i8* %30, i64 %40
  store i8 %39, i8* %41, align 1
  %42 = add i64 %36, 1
  %43 = getelementptr inbounds i8, i8* %28, i64 %42
  %44 = load i8, i8* %43, align 1
  %45 = or i64 %40, 1
  %46 = getelementptr inbounds i8, i8* %30, i64 %45
  store i8 %44, i8* %46, align 1
  %47 = getelementptr inbounds i8, i8* %28, i64 %36
  %48 = load i8, i8* %47, align 1
  %49 = or i64 %40, 2
  %50 = getelementptr inbounds i8, i8* %30, i64 %49
  store i8 %48, i8* %50, align 1
  %51 = or i64 %40, 3
  %52 = getelementptr inbounds i8, i8* %30, i64 %51
  store i8 -1, i8* %52, align 1
  %53 = add nuw i64 %35, 1
  %54 = icmp eq i64 %53, %0
  br i1 %54, label %31, label %34
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @_ZN5angle14LoadRG8ToBGRX8EmmmPKhmmPhmm(i64, i64, i64, i8* nocapture readonly, i64, i64, i8* nocapture, i64, i64) local_unnamed_addr #1 {
  %10 = icmp eq i64 %2, 0
  br i1 %10, label %54, label %11

11:                                               ; preds = %9
  %12 = icmp eq i64 %1, 0
  %13 = icmp eq i64 %0, 0
  %14 = add i64 %0, -1
  %15 = shl i64 %0, 2
  %16 = shl i64 %0, 1
  %17 = add i64 %0, -16
  %18 = lshr i64 %17, 4
  %19 = add nuw nsw i64 %18, 1
  %20 = icmp ult i64 %0, 16
  %21 = call { i64, i1 } @llvm.umul.with.overflow.i64(i64 %14, i64 4)
  %22 = extractvalue { i64, i1 } %21, 0
  %23 = extractvalue { i64, i1 } %21, 1
  %24 = call { i64, i1 } @llvm.umul.with.overflow.i64(i64 %14, i64 4)
  %25 = extractvalue { i64, i1 } %24, 0
  %26 = extractvalue { i64, i1 } %24, 1
  %27 = call { i64, i1 } @llvm.umul.with.overflow.i64(i64 %14, i64 4)
  %28 = extractvalue { i64, i1 } %27, 0
  %29 = extractvalue { i64, i1 } %27, 1
  %30 = call { i64, i1 } @llvm.umul.with.overflow.i64(i64 %14, i64 4)
  %31 = extractvalue { i64, i1 } %30, 0
  %32 = extractvalue { i64, i1 } %30, 1
  %33 = and i64 %0, -16
  %34 = and i64 %19, 1
  %35 = icmp eq i64 %18, 0
  %36 = sub nuw nsw i64 %19, %34
  %37 = icmp eq i64 %34, 0
  %38 = icmp eq i64 %33, %0
  br label %39

39:                                               ; preds = %55, %11
  %40 = phi i64 [ 0, %11 ], [ %56, %55 ]
  %41 = mul i64 %40, %8
  %42 = add i64 %15, %41
  %43 = mul i64 %40, %5
  %44 = add i64 %16, %43
  %45 = mul i64 %40, %8
  %46 = add i64 %45, 2
  %47 = add i64 %45, 3
  %48 = add i64 %45, 1
  br i1 %12, label %55, label %49

49:                                               ; preds = %39
  %50 = mul i64 %40, %5
  %51 = mul i64 %40, %8
  %52 = getelementptr inbounds i8, i8* %3, i64 %50
  %53 = getelementptr inbounds i8, i8* %6, i64 %51
  br label %58

54:                                               ; preds = %55, %9
  ret void

55:                                               ; preds = %171, %39
  %56 = add nuw i64 %40, 1
  %57 = icmp eq i64 %56, %2
  br i1 %57, label %54, label %39

58:                                               ; preds = %171, %49
  %59 = phi i64 [ 0, %49 ], [ %172, %171 ]
  %60 = mul i64 %59, %7
  %61 = add i64 %41, %60
  %62 = getelementptr i8, i8* %6, i64 %61
  %63 = add i64 %42, %60
  %64 = getelementptr i8, i8* %6, i64 %63
  %65 = mul i64 %59, %4
  %66 = add i64 %43, %65
  %67 = getelementptr i8, i8* %3, i64 %66
  %68 = add i64 %44, %65
  %69 = getelementptr i8, i8* %3, i64 %68
  %70 = mul i64 %59, %7
  %71 = add i64 %46, %70
  %72 = getelementptr i8, i8* %6, i64 %71
  %73 = ptrtoint i8* %72 to i64
  %74 = add i64 %47, %70
  %75 = getelementptr i8, i8* %6, i64 %74
  %76 = ptrtoint i8* %75 to i64
  %77 = add i64 %48, %70
  %78 = getelementptr i8, i8* %6, i64 %77
  %79 = ptrtoint i8* %78 to i64
  %80 = add i64 %45, %70
  %81 = getelementptr i8, i8* %6, i64 %80
  %82 = ptrtoint i8* %81 to i64
  %83 = mul i64 %59, %4
  %84 = getelementptr inbounds i8, i8* %52, i64 %83
  %85 = mul i64 %59, %7
  %86 = getelementptr inbounds i8, i8* %53, i64 %85
  br i1 %13, label %171, label %87

87:                                               ; preds = %58
  br i1 %20, label %88, label %90

88:                                               ; preds = %170, %106, %90, %87
  %89 = phi i64 [ 0, %106 ], [ 0, %90 ], [ 0, %87 ], [ %33, %170 ]
  br label %174

90:                                               ; preds = %87
  %91 = xor i64 %73, -1
  %92 = icmp ugt i64 %22, %91
  %93 = or i1 %92, %23
  %94 = xor i64 %76, -1
  %95 = icmp ugt i64 %25, %94
  %96 = or i1 %95, %26
  %97 = or i1 %93, %96
  %98 = xor i64 %79, -1
  %99 = icmp ugt i64 %28, %98
  %100 = or i1 %99, %29
  %101 = or i1 %97, %100
  %102 = xor i64 %82, -1
  %103 = icmp ugt i64 %31, %102
  %104 = or i1 %103, %32
  %105 = or i1 %101, %104
  br i1 %105, label %88, label %106

106:                                              ; preds = %90
  %107 = icmp ult i8* %62, %69
  %108 = icmp ult i8* %67, %64
  %109 = and i1 %107, %108
  br i1 %109, label %88, label %110

110:                                              ; preds = %106
  br i1 %35, label %151, label %111

111:                                              ; preds = %110
  %112 = getelementptr inbounds i8, i8* %84, i64 -1
  %113 = getelementptr inbounds i8, i8* %86, i64 -3
  %114 = getelementptr inbounds i8, i8* %84, i64 -1
  %115 = getelementptr inbounds i8, i8* %86, i64 -3
  br label %116

116:                                              ; preds = %116, %111
  %117 = phi i64 [ 0, %111 ], [ %148, %116 ]
  %118 = phi i64 [ %36, %111 ], [ %149, %116 ]
  %119 = shl i64 %117, 2
  %120 = shl i64 %117, 1
  %121 = or i64 %120, 1
  %122 = getelementptr inbounds i8, i8* %112, i64 %121
  %123 = bitcast i8* %122 to <32 x i8>*
  %124 = load <32 x i8>, <32 x i8>* %123, align 1
  %125 = shufflevector <32 x i8> %124, <32 x i8> undef, <16 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14, i32 16, i32 18, i32 20, i32 22, i32 24, i32 26, i32 28, i32 30>
  %126 = shufflevector <32 x i8> %124, <32 x i8> undef, <16 x i32> <i32 1, i32 3, i32 5, i32 7, i32 9, i32 11, i32 13, i32 15, i32 17, i32 19, i32 21, i32 23, i32 25, i32 27, i32 29, i32 31>
  %127 = or i64 %119, 3
  %128 = getelementptr inbounds i8, i8* %113, i64 %127
  %129 = bitcast i8* %128 to <64 x i8>*
  %130 = shufflevector <16 x i8> zeroinitializer, <16 x i8> %126, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %131 = shufflevector <16 x i8> %125, <16 x i8> <i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1>, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %132 = shufflevector <32 x i8> %130, <32 x i8> %131, <64 x i32> <i32 0, i32 16, i32 32, i32 48, i32 1, i32 17, i32 33, i32 49, i32 2, i32 18, i32 34, i32 50, i32 3, i32 19, i32 35, i32 51, i32 4, i32 20, i32 36, i32 52, i32 5, i32 21, i32 37, i32 53, i32 6, i32 22, i32 38, i32 54, i32 7, i32 23, i32 39, i32 55, i32 8, i32 24, i32 40, i32 56, i32 9, i32 25, i32 41, i32 57, i32 10, i32 26, i32 42, i32 58, i32 11, i32 27, i32 43, i32 59, i32 12, i32 28, i32 44, i32 60, i32 13, i32 29, i32 45, i32 61, i32 14, i32 30, i32 46, i32 62, i32 15, i32 31, i32 47, i32 63>
  store <64 x i8> %132, <64 x i8>* %129, align 1
  %133 = or i64 %117, 16
  %134 = shl i64 %133, 2
  %135 = shl i64 %133, 1
  %136 = or i64 %135, 1
  %137 = getelementptr inbounds i8, i8* %114, i64 %136
  %138 = bitcast i8* %137 to <32 x i8>*
  %139 = load <32 x i8>, <32 x i8>* %138, align 1
  %140 = shufflevector <32 x i8> %139, <32 x i8> undef, <16 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14, i32 16, i32 18, i32 20, i32 22, i32 24, i32 26, i32 28, i32 30>
  %141 = shufflevector <32 x i8> %139, <32 x i8> undef, <16 x i32> <i32 1, i32 3, i32 5, i32 7, i32 9, i32 11, i32 13, i32 15, i32 17, i32 19, i32 21, i32 23, i32 25, i32 27, i32 29, i32 31>
  %142 = or i64 %134, 3
  %143 = getelementptr inbounds i8, i8* %115, i64 %142
  %144 = bitcast i8* %143 to <64 x i8>*
  %145 = shufflevector <16 x i8> zeroinitializer, <16 x i8> %141, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %146 = shufflevector <16 x i8> %140, <16 x i8> <i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1>, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %147 = shufflevector <32 x i8> %145, <32 x i8> %146, <64 x i32> <i32 0, i32 16, i32 32, i32 48, i32 1, i32 17, i32 33, i32 49, i32 2, i32 18, i32 34, i32 50, i32 3, i32 19, i32 35, i32 51, i32 4, i32 20, i32 36, i32 52, i32 5, i32 21, i32 37, i32 53, i32 6, i32 22, i32 38, i32 54, i32 7, i32 23, i32 39, i32 55, i32 8, i32 24, i32 40, i32 56, i32 9, i32 25, i32 41, i32 57, i32 10, i32 26, i32 42, i32 58, i32 11, i32 27, i32 43, i32 59, i32 12, i32 28, i32 44, i32 60, i32 13, i32 29, i32 45, i32 61, i32 14, i32 30, i32 46, i32 62, i32 15, i32 31, i32 47, i32 63>
  store <64 x i8> %147, <64 x i8>* %144, align 1
  %148 = add i64 %117, 32
  %149 = add i64 %118, -2
  %150 = icmp eq i64 %149, 0
  br i1 %150, label %151, label %116, !llvm.loop !57

151:                                              ; preds = %116, %110
  %152 = phi i64 [ 0, %110 ], [ %148, %116 ]
  br i1 %37, label %170, label %153

153:                                              ; preds = %151
  %154 = shl i64 %152, 2
  %155 = shl i64 %152, 1
  %156 = or i64 %155, 1
  %157 = getelementptr inbounds i8, i8* %84, i64 -1
  %158 = getelementptr inbounds i8, i8* %157, i64 %156
  %159 = bitcast i8* %158 to <32 x i8>*
  %160 = load <32 x i8>, <32 x i8>* %159, align 1
  %161 = shufflevector <32 x i8> %160, <32 x i8> undef, <16 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14, i32 16, i32 18, i32 20, i32 22, i32 24, i32 26, i32 28, i32 30>
  %162 = shufflevector <32 x i8> %160, <32 x i8> undef, <16 x i32> <i32 1, i32 3, i32 5, i32 7, i32 9, i32 11, i32 13, i32 15, i32 17, i32 19, i32 21, i32 23, i32 25, i32 27, i32 29, i32 31>
  %163 = or i64 %154, 3
  %164 = getelementptr inbounds i8, i8* %86, i64 -3
  %165 = getelementptr inbounds i8, i8* %164, i64 %163
  %166 = bitcast i8* %165 to <64 x i8>*
  %167 = shufflevector <16 x i8> zeroinitializer, <16 x i8> %162, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %168 = shufflevector <16 x i8> %161, <16 x i8> <i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1>, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %169 = shufflevector <32 x i8> %167, <32 x i8> %168, <64 x i32> <i32 0, i32 16, i32 32, i32 48, i32 1, i32 17, i32 33, i32 49, i32 2, i32 18, i32 34, i32 50, i32 3, i32 19, i32 35, i32 51, i32 4, i32 20, i32 36, i32 52, i32 5, i32 21, i32 37, i32 53, i32 6, i32 22, i32 38, i32 54, i32 7, i32 23, i32 39, i32 55, i32 8, i32 24, i32 40, i32 56, i32 9, i32 25, i32 41, i32 57, i32 10, i32 26, i32 42, i32 58, i32 11, i32 27, i32 43, i32 59, i32 12, i32 28, i32 44, i32 60, i32 13, i32 29, i32 45, i32 61, i32 14, i32 30, i32 46, i32 62, i32 15, i32 31, i32 47, i32 63>
  store <64 x i8> %169, <64 x i8>* %166, align 1
  br label %170

170:                                              ; preds = %151, %153
  br i1 %38, label %171, label %88

171:                                              ; preds = %174, %170, %58
  %172 = add nuw i64 %59, 1
  %173 = icmp eq i64 %172, %1
  br i1 %173, label %55, label %58

174:                                              ; preds = %88, %174
  %175 = phi i64 [ %190, %174 ], [ %89, %88 ]
  %176 = shl i64 %175, 2
  %177 = getelementptr inbounds i8, i8* %86, i64 %176
  store i8 0, i8* %177, align 1
  %178 = shl i64 %175, 1
  %179 = or i64 %178, 1
  %180 = getelementptr inbounds i8, i8* %84, i64 %179
  %181 = load i8, i8* %180, align 1
  %182 = or i64 %176, 1
  %183 = getelementptr inbounds i8, i8* %86, i64 %182
  store i8 %181, i8* %183, align 1
  %184 = getelementptr inbounds i8, i8* %84, i64 %178
  %185 = load i8, i8* %184, align 1
  %186 = or i64 %176, 2
  %187 = getelementptr inbounds i8, i8* %86, i64 %186
  store i8 %185, i8* %187, align 1
  %188 = or i64 %176, 3
  %189 = getelementptr inbounds i8, i8* %86, i64 %188
  store i8 -1, i8* %189, align 1
  %190 = add nuw i64 %175, 1
  %191 = icmp eq i64 %190, %0
  br i1 %191, label %171, label %174, !llvm.loop !58
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @_ZN5angle13LoadR8ToBGRX8EmmmPKhmmPhmm(i64, i64, i64, i8* nocapture readonly, i64, i64, i8* nocapture, i64, i64) local_unnamed_addr #1 {
  %10 = icmp eq i64 %2, 0
  br i1 %10, label %53, label %11

11:                                               ; preds = %9
  %12 = icmp eq i64 %1, 0
  %13 = icmp eq i64 %0, 0
  %14 = add i64 %0, -1
  %15 = shl i64 %0, 2
  %16 = add i64 %0, -16
  %17 = lshr i64 %16, 4
  %18 = add nuw nsw i64 %17, 1
  %19 = icmp ult i64 %0, 16
  %20 = call { i64, i1 } @llvm.umul.with.overflow.i64(i64 %14, i64 4)
  %21 = extractvalue { i64, i1 } %20, 0
  %22 = extractvalue { i64, i1 } %20, 1
  %23 = call { i64, i1 } @llvm.umul.with.overflow.i64(i64 %14, i64 4)
  %24 = extractvalue { i64, i1 } %23, 0
  %25 = extractvalue { i64, i1 } %23, 1
  %26 = call { i64, i1 } @llvm.umul.with.overflow.i64(i64 %14, i64 4)
  %27 = extractvalue { i64, i1 } %26, 0
  %28 = extractvalue { i64, i1 } %26, 1
  %29 = call { i64, i1 } @llvm.umul.with.overflow.i64(i64 %14, i64 4)
  %30 = extractvalue { i64, i1 } %29, 0
  %31 = extractvalue { i64, i1 } %29, 1
  %32 = and i64 %0, -16
  %33 = and i64 %18, 1
  %34 = icmp eq i64 %17, 0
  %35 = sub nuw nsw i64 %18, %33
  %36 = icmp eq i64 %33, 0
  %37 = icmp eq i64 %32, %0
  br label %38

38:                                               ; preds = %54, %11
  %39 = phi i64 [ 0, %11 ], [ %55, %54 ]
  %40 = mul i64 %39, %8
  %41 = add i64 %15, %40
  %42 = mul i64 %39, %5
  %43 = add i64 %42, %0
  %44 = mul i64 %39, %8
  %45 = add i64 %44, 2
  %46 = add i64 %44, 3
  %47 = add i64 %44, 1
  br i1 %12, label %54, label %48

48:                                               ; preds = %38
  %49 = mul i64 %39, %5
  %50 = mul i64 %39, %8
  %51 = getelementptr inbounds i8, i8* %3, i64 %49
  %52 = getelementptr inbounds i8, i8* %6, i64 %50
  br label %57

53:                                               ; preds = %54, %9
  ret void

54:                                               ; preds = %152, %38
  %55 = add nuw i64 %39, 1
  %56 = icmp eq i64 %55, %2
  br i1 %56, label %53, label %38

57:                                               ; preds = %152, %48
  %58 = phi i64 [ 0, %48 ], [ %153, %152 ]
  %59 = mul i64 %58, %7
  %60 = add i64 %40, %59
  %61 = getelementptr i8, i8* %6, i64 %60
  %62 = add i64 %41, %59
  %63 = getelementptr i8, i8* %6, i64 %62
  %64 = mul i64 %58, %4
  %65 = add i64 %42, %64
  %66 = getelementptr i8, i8* %3, i64 %65
  %67 = add i64 %43, %64
  %68 = getelementptr i8, i8* %3, i64 %67
  %69 = mul i64 %58, %7
  %70 = add i64 %45, %69
  %71 = getelementptr i8, i8* %6, i64 %70
  %72 = ptrtoint i8* %71 to i64
  %73 = add i64 %46, %69
  %74 = getelementptr i8, i8* %6, i64 %73
  %75 = ptrtoint i8* %74 to i64
  %76 = add i64 %47, %69
  %77 = getelementptr i8, i8* %6, i64 %76
  %78 = ptrtoint i8* %77 to i64
  %79 = add i64 %44, %69
  %80 = getelementptr i8, i8* %6, i64 %79
  %81 = ptrtoint i8* %80 to i64
  %82 = mul i64 %58, %4
  %83 = getelementptr inbounds i8, i8* %51, i64 %82
  %84 = mul i64 %58, %7
  %85 = getelementptr inbounds i8, i8* %52, i64 %84
  br i1 %13, label %152, label %86

86:                                               ; preds = %57
  br i1 %19, label %87, label %89

87:                                               ; preds = %151, %105, %89, %86
  %88 = phi i64 [ 0, %105 ], [ 0, %89 ], [ 0, %86 ], [ %32, %151 ]
  br label %155

89:                                               ; preds = %86
  %90 = xor i64 %72, -1
  %91 = icmp ugt i64 %21, %90
  %92 = or i1 %91, %22
  %93 = xor i64 %75, -1
  %94 = icmp ugt i64 %24, %93
  %95 = or i1 %94, %25
  %96 = or i1 %92, %95
  %97 = xor i64 %78, -1
  %98 = icmp ugt i64 %27, %97
  %99 = or i1 %98, %28
  %100 = or i1 %96, %99
  %101 = xor i64 %81, -1
  %102 = icmp ugt i64 %30, %101
  %103 = or i1 %102, %31
  %104 = or i1 %100, %103
  br i1 %104, label %87, label %105

105:                                              ; preds = %89
  %106 = icmp ult i8* %61, %68
  %107 = icmp ult i8* %66, %63
  %108 = and i1 %106, %107
  br i1 %108, label %87, label %109

109:                                              ; preds = %105
  br i1 %34, label %138, label %110

110:                                              ; preds = %109
  %111 = getelementptr inbounds i8, i8* %85, i64 -3
  %112 = getelementptr inbounds i8, i8* %85, i64 -3
  br label %113

113:                                              ; preds = %113, %110
  %114 = phi i64 [ 0, %110 ], [ %135, %113 ]
  %115 = phi i64 [ %35, %110 ], [ %136, %113 ]
  %116 = shl i64 %114, 2
  %117 = getelementptr inbounds i8, i8* %83, i64 %114
  %118 = bitcast i8* %117 to <16 x i8>*
  %119 = load <16 x i8>, <16 x i8>* %118, align 1, !alias.scope !59
  %120 = or i64 %116, 3
  %121 = getelementptr inbounds i8, i8* %111, i64 %120
  %122 = bitcast i8* %121 to <64 x i8>*
  %123 = shufflevector <16 x i8> %119, <16 x i8> <i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1>, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %124 = shufflevector <32 x i8> zeroinitializer, <32 x i8> %123, <64 x i32> <i32 0, i32 16, i32 32, i32 48, i32 1, i32 17, i32 33, i32 49, i32 2, i32 18, i32 34, i32 50, i32 3, i32 19, i32 35, i32 51, i32 4, i32 20, i32 36, i32 52, i32 5, i32 21, i32 37, i32 53, i32 6, i32 22, i32 38, i32 54, i32 7, i32 23, i32 39, i32 55, i32 8, i32 24, i32 40, i32 56, i32 9, i32 25, i32 41, i32 57, i32 10, i32 26, i32 42, i32 58, i32 11, i32 27, i32 43, i32 59, i32 12, i32 28, i32 44, i32 60, i32 13, i32 29, i32 45, i32 61, i32 14, i32 30, i32 46, i32 62, i32 15, i32 31, i32 47, i32 63>
  store <64 x i8> %124, <64 x i8>* %122, align 1
  %125 = or i64 %114, 16
  %126 = shl i64 %125, 2
  %127 = getelementptr inbounds i8, i8* %83, i64 %125
  %128 = bitcast i8* %127 to <16 x i8>*
  %129 = load <16 x i8>, <16 x i8>* %128, align 1, !alias.scope !59
  %130 = or i64 %126, 3
  %131 = getelementptr inbounds i8, i8* %112, i64 %130
  %132 = bitcast i8* %131 to <64 x i8>*
  %133 = shufflevector <16 x i8> %129, <16 x i8> <i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1>, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %134 = shufflevector <32 x i8> zeroinitializer, <32 x i8> %133, <64 x i32> <i32 0, i32 16, i32 32, i32 48, i32 1, i32 17, i32 33, i32 49, i32 2, i32 18, i32 34, i32 50, i32 3, i32 19, i32 35, i32 51, i32 4, i32 20, i32 36, i32 52, i32 5, i32 21, i32 37, i32 53, i32 6, i32 22, i32 38, i32 54, i32 7, i32 23, i32 39, i32 55, i32 8, i32 24, i32 40, i32 56, i32 9, i32 25, i32 41, i32 57, i32 10, i32 26, i32 42, i32 58, i32 11, i32 27, i32 43, i32 59, i32 12, i32 28, i32 44, i32 60, i32 13, i32 29, i32 45, i32 61, i32 14, i32 30, i32 46, i32 62, i32 15, i32 31, i32 47, i32 63>
  store <64 x i8> %134, <64 x i8>* %132, align 1
  %135 = add i64 %114, 32
  %136 = add i64 %115, -2
  %137 = icmp eq i64 %136, 0
  br i1 %137, label %138, label %113, !llvm.loop !62

138:                                              ; preds = %113, %109
  %139 = phi i64 [ 0, %109 ], [ %135, %113 ]
  br i1 %36, label %151, label %140

140:                                              ; preds = %138
  %141 = shl i64 %139, 2
  %142 = getelementptr inbounds i8, i8* %83, i64 %139
  %143 = bitcast i8* %142 to <16 x i8>*
  %144 = load <16 x i8>, <16 x i8>* %143, align 1, !alias.scope !59
  %145 = or i64 %141, 3
  %146 = getelementptr inbounds i8, i8* %85, i64 -3
  %147 = getelementptr inbounds i8, i8* %146, i64 %145
  %148 = bitcast i8* %147 to <64 x i8>*
  %149 = shufflevector <16 x i8> %144, <16 x i8> <i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1>, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %150 = shufflevector <32 x i8> zeroinitializer, <32 x i8> %149, <64 x i32> <i32 0, i32 16, i32 32, i32 48, i32 1, i32 17, i32 33, i32 49, i32 2, i32 18, i32 34, i32 50, i32 3, i32 19, i32 35, i32 51, i32 4, i32 20, i32 36, i32 52, i32 5, i32 21, i32 37, i32 53, i32 6, i32 22, i32 38, i32 54, i32 7, i32 23, i32 39, i32 55, i32 8, i32 24, i32 40, i32 56, i32 9, i32 25, i32 41, i32 57, i32 10, i32 26, i32 42, i32 58, i32 11, i32 27, i32 43, i32 59, i32 12, i32 28, i32 44, i32 60, i32 13, i32 29, i32 45, i32 61, i32 14, i32 30, i32 46, i32 62, i32 15, i32 31, i32 47, i32 63>
  store <64 x i8> %150, <64 x i8>* %148, align 1
  br label %151

151:                                              ; preds = %138, %140
  br i1 %37, label %152, label %87

152:                                              ; preds = %155, %151, %57
  %153 = add nuw i64 %58, 1
  %154 = icmp eq i64 %153, %1
  br i1 %154, label %54, label %57

155:                                              ; preds = %87, %155
  %156 = phi i64 [ %167, %155 ], [ %88, %87 ]
  %157 = shl i64 %156, 2
  %158 = getelementptr inbounds i8, i8* %85, i64 %157
  store i8 0, i8* %158, align 1
  %159 = or i64 %157, 1
  %160 = getelementptr inbounds i8, i8* %85, i64 %159
  store i8 0, i8* %160, align 1
  %161 = getelementptr inbounds i8, i8* %83, i64 %156
  %162 = load i8, i8* %161, align 1
  %163 = or i64 %157, 2
  %164 = getelementptr inbounds i8, i8* %85, i64 %163
  store i8 %162, i8* %164, align 1
  %165 = or i64 %157, 3
  %166 = getelementptr inbounds i8, i8* %85, i64 %165
  store i8 -1, i8* %166, align 1
  %167 = add nuw i64 %156, 1
  %168 = icmp eq i64 %167, %0
  br i1 %168, label %152, label %155, !llvm.loop !63
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @_ZN5angle17LoadR5G6B5ToBGRA8EmmmPKhmmPhmm(i64, i64, i64, i8* nocapture readonly, i64, i64, i8* nocapture, i64, i64) local_unnamed_addr #1 {
  %10 = icmp eq i64 %2, 0
  br i1 %10, label %47, label %11

11:                                               ; preds = %9
  %12 = icmp eq i64 %1, 0
  %13 = icmp eq i64 %0, 0
  %14 = add i64 %0, -1
  %15 = shl i64 %0, 2
  %16 = shl i64 %0, 1
  %17 = icmp ult i64 %0, 8
  %18 = call { i64, i1 } @llvm.umul.with.overflow.i64(i64 %14, i64 4)
  %19 = extractvalue { i64, i1 } %18, 0
  %20 = extractvalue { i64, i1 } %18, 1
  %21 = call { i64, i1 } @llvm.umul.with.overflow.i64(i64 %14, i64 4)
  %22 = extractvalue { i64, i1 } %21, 0
  %23 = extractvalue { i64, i1 } %21, 1
  %24 = call { i64, i1 } @llvm.umul.with.overflow.i64(i64 %14, i64 4)
  %25 = extractvalue { i64, i1 } %24, 0
  %26 = extractvalue { i64, i1 } %24, 1
  %27 = call { i64, i1 } @llvm.umul.with.overflow.i64(i64 %14, i64 4)
  %28 = extractvalue { i64, i1 } %27, 0
  %29 = extractvalue { i64, i1 } %27, 1
  %30 = and i64 %0, -8
  %31 = icmp eq i64 %30, %0
  br label %32

32:                                               ; preds = %48, %11
  %33 = phi i64 [ 0, %11 ], [ %49, %48 ]
  %34 = mul i64 %33, %8
  %35 = add i64 %15, %34
  %36 = mul i64 %33, %5
  %37 = add i64 %16, %36
  %38 = mul i64 %33, %8
  %39 = add i64 %38, 2
  %40 = add i64 %38, 3
  %41 = add i64 %38, 1
  br i1 %12, label %48, label %42

42:                                               ; preds = %32
  %43 = mul i64 %33, %5
  %44 = mul i64 %33, %8
  %45 = getelementptr inbounds i8, i8* %3, i64 %43
  %46 = getelementptr inbounds i8, i8* %6, i64 %44
  br label %51

47:                                               ; preds = %48, %9
  ret void

48:                                               ; preds = %137, %32
  %49 = add nuw i64 %33, 1
  %50 = icmp eq i64 %49, %2
  br i1 %50, label %47, label %32

51:                                               ; preds = %137, %42
  %52 = phi i64 [ 0, %42 ], [ %138, %137 ]
  %53 = mul i64 %52, %7
  %54 = add i64 %34, %53
  %55 = getelementptr i8, i8* %6, i64 %54
  %56 = add i64 %35, %53
  %57 = getelementptr i8, i8* %6, i64 %56
  %58 = mul i64 %52, %4
  %59 = add i64 %36, %58
  %60 = getelementptr i8, i8* %3, i64 %59
  %61 = add i64 %37, %58
  %62 = getelementptr i8, i8* %3, i64 %61
  %63 = mul i64 %52, %7
  %64 = add i64 %39, %63
  %65 = getelementptr i8, i8* %6, i64 %64
  %66 = ptrtoint i8* %65 to i64
  %67 = add i64 %40, %63
  %68 = getelementptr i8, i8* %6, i64 %67
  %69 = ptrtoint i8* %68 to i64
  %70 = add i64 %41, %63
  %71 = getelementptr i8, i8* %6, i64 %70
  %72 = ptrtoint i8* %71 to i64
  %73 = add i64 %38, %63
  %74 = getelementptr i8, i8* %6, i64 %73
  %75 = ptrtoint i8* %74 to i64
  %76 = mul i64 %52, %4
  %77 = getelementptr inbounds i8, i8* %45, i64 %76
  %78 = bitcast i8* %77 to i16*
  %79 = mul i64 %52, %7
  %80 = getelementptr inbounds i8, i8* %46, i64 %79
  br i1 %13, label %137, label %81

81:                                               ; preds = %51
  br i1 %17, label %82, label %84

82:                                               ; preds = %136, %100, %84, %81
  %83 = phi i64 [ 0, %100 ], [ 0, %84 ], [ 0, %81 ], [ %30, %136 ]
  br label %140

84:                                               ; preds = %81
  %85 = xor i64 %66, -1
  %86 = icmp ugt i64 %19, %85
  %87 = or i1 %86, %20
  %88 = xor i64 %69, -1
  %89 = icmp ugt i64 %22, %88
  %90 = or i1 %89, %23
  %91 = or i1 %87, %90
  %92 = xor i64 %72, -1
  %93 = icmp ugt i64 %25, %92
  %94 = or i1 %93, %26
  %95 = or i1 %91, %94
  %96 = xor i64 %75, -1
  %97 = icmp ugt i64 %28, %96
  %98 = or i1 %97, %29
  %99 = or i1 %95, %98
  br i1 %99, label %82, label %100

100:                                              ; preds = %84
  %101 = icmp ult i8* %55, %62
  %102 = icmp ult i8* %60, %57
  %103 = and i1 %101, %102
  br i1 %103, label %82, label %104

104:                                              ; preds = %100
  %105 = getelementptr inbounds i8, i8* %80, i64 -3
  br label %106

106:                                              ; preds = %106, %104
  %107 = phi i64 [ 0, %104 ], [ %134, %106 ]
  %108 = getelementptr inbounds i16, i16* %78, i64 %107
  %109 = bitcast i16* %108 to <8 x i16>*
  %110 = load <8 x i16>, <8 x i16>* %109, align 2, !alias.scope !64
  %111 = zext <8 x i16> %110 to <8 x i32>
  %112 = shl nuw nsw <8 x i32> %111, <i32 3, i32 3, i32 3, i32 3, i32 3, i32 3, i32 3, i32 3>
  %113 = lshr <8 x i32> %111, <i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2>
  %114 = and <8 x i32> %113, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %115 = or <8 x i32> %114, %112
  %116 = trunc <8 x i32> %115 to <8 x i8>
  %117 = shl i64 %107, 2
  %118 = and <8 x i32> %111, <i32 2016, i32 2016, i32 2016, i32 2016, i32 2016, i32 2016, i32 2016, i32 2016>
  %119 = lshr exact <8 x i32> %118, <i32 3, i32 3, i32 3, i32 3, i32 3, i32 3, i32 3, i32 3>
  %120 = lshr <8 x i32> %118, <i32 9, i32 9, i32 9, i32 9, i32 9, i32 9, i32 9, i32 9>
  %121 = or <8 x i32> %119, %120
  %122 = trunc <8 x i32> %121 to <8 x i8>
  %123 = lshr <8 x i32> %111, <i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8>
  %124 = and <8 x i32> %123, <i32 248, i32 248, i32 248, i32 248, i32 248, i32 248, i32 248, i32 248>
  %125 = lshr <8 x i32> %111, <i32 13, i32 13, i32 13, i32 13, i32 13, i32 13, i32 13, i32 13>
  %126 = or <8 x i32> %124, %125
  %127 = trunc <8 x i32> %126 to <8 x i8>
  %128 = or i64 %117, 3
  %129 = getelementptr inbounds i8, i8* %105, i64 %128
  %130 = bitcast i8* %129 to <32 x i8>*
  %131 = shufflevector <8 x i8> %116, <8 x i8> %122, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %132 = shufflevector <8 x i8> %127, <8 x i8> <i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1>, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %133 = shufflevector <16 x i8> %131, <16 x i8> %132, <32 x i32> <i32 0, i32 8, i32 16, i32 24, i32 1, i32 9, i32 17, i32 25, i32 2, i32 10, i32 18, i32 26, i32 3, i32 11, i32 19, i32 27, i32 4, i32 12, i32 20, i32 28, i32 5, i32 13, i32 21, i32 29, i32 6, i32 14, i32 22, i32 30, i32 7, i32 15, i32 23, i32 31>
  store <32 x i8> %133, <32 x i8>* %130, align 1
  %134 = add i64 %107, 8
  %135 = icmp eq i64 %134, %30
  br i1 %135, label %136, label %106, !llvm.loop !67

136:                                              ; preds = %106
  br i1 %31, label %137, label %82

137:                                              ; preds = %140, %136, %51
  %138 = add nuw i64 %52, 1
  %139 = icmp eq i64 %138, %1
  br i1 %139, label %48, label %51

140:                                              ; preds = %82, %140
  %141 = phi i64 [ %168, %140 ], [ %83, %82 ]
  %142 = getelementptr inbounds i16, i16* %78, i64 %141
  %143 = load i16, i16* %142, align 2
  %144 = zext i16 %143 to i32
  %145 = shl nuw nsw i32 %144, 3
  %146 = lshr i32 %144, 2
  %147 = and i32 %146, 7
  %148 = or i32 %147, %145
  %149 = trunc i32 %148 to i8
  %150 = shl i64 %141, 2
  %151 = getelementptr inbounds i8, i8* %80, i64 %150
  store i8 %149, i8* %151, align 1
  %152 = and i32 %144, 2016
  %153 = lshr exact i32 %152, 3
  %154 = lshr i32 %152, 9
  %155 = or i32 %153, %154
  %156 = trunc i32 %155 to i8
  %157 = or i64 %150, 1
  %158 = getelementptr inbounds i8, i8* %80, i64 %157
  store i8 %156, i8* %158, align 1
  %159 = lshr i32 %144, 8
  %160 = and i32 %159, 248
  %161 = lshr i32 %144, 13
  %162 = or i32 %160, %161
  %163 = trunc i32 %162 to i8
  %164 = or i64 %150, 2
  %165 = getelementptr inbounds i8, i8* %80, i64 %164
  store i8 %163, i8* %165, align 1
  %166 = or i64 %150, 3
  %167 = getelementptr inbounds i8, i8* %80, i64 %166
  store i8 -1, i8* %167, align 1
  %168 = add nuw i64 %141, 1
  %169 = icmp eq i64 %168, %0
  br i1 %169, label %137, label %140, !llvm.loop !68
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @_ZN5angle17LoadR5G6B5ToRGBA8EmmmPKhmmPhmm(i64, i64, i64, i8* nocapture readonly, i64, i64, i8* nocapture, i64, i64) local_unnamed_addr #1 {
  %10 = icmp eq i64 %2, 0
  br i1 %10, label %47, label %11

11:                                               ; preds = %9
  %12 = icmp eq i64 %1, 0
  %13 = icmp eq i64 %0, 0
  %14 = add i64 %0, -1
  %15 = shl i64 %0, 2
  %16 = shl i64 %0, 1
  %17 = icmp ult i64 %0, 8
  %18 = call { i64, i1 } @llvm.umul.with.overflow.i64(i64 %14, i64 4)
  %19 = extractvalue { i64, i1 } %18, 0
  %20 = extractvalue { i64, i1 } %18, 1
  %21 = call { i64, i1 } @llvm.umul.with.overflow.i64(i64 %14, i64 4)
  %22 = extractvalue { i64, i1 } %21, 0
  %23 = extractvalue { i64, i1 } %21, 1
  %24 = call { i64, i1 } @llvm.umul.with.overflow.i64(i64 %14, i64 4)
  %25 = extractvalue { i64, i1 } %24, 0
  %26 = extractvalue { i64, i1 } %24, 1
  %27 = call { i64, i1 } @llvm.umul.with.overflow.i64(i64 %14, i64 4)
  %28 = extractvalue { i64, i1 } %27, 0
  %29 = extractvalue { i64, i1 } %27, 1
  %30 = and i64 %0, -8
  %31 = icmp eq i64 %30, %0
  br label %32

32:                                               ; preds = %48, %11
  %33 = phi i64 [ 0, %11 ], [ %49, %48 ]
  %34 = mul i64 %33, %8
  %35 = add i64 %15, %34
  %36 = mul i64 %33, %5
  %37 = add i64 %16, %36
  %38 = mul i64 %33, %8
  %39 = add i64 %38, 2
  %40 = add i64 %38, 3
  %41 = add i64 %38, 1
  br i1 %12, label %48, label %42

42:                                               ; preds = %32
  %43 = mul i64 %33, %5
  %44 = mul i64 %33, %8
  %45 = getelementptr inbounds i8, i8* %3, i64 %43
  %46 = getelementptr inbounds i8, i8* %6, i64 %44
  br label %51

47:                                               ; preds = %48, %9
  ret void

48:                                               ; preds = %137, %32
  %49 = add nuw i64 %33, 1
  %50 = icmp eq i64 %49, %2
  br i1 %50, label %47, label %32

51:                                               ; preds = %137, %42
  %52 = phi i64 [ 0, %42 ], [ %138, %137 ]
  %53 = mul i64 %52, %7
  %54 = add i64 %34, %53
  %55 = getelementptr i8, i8* %6, i64 %54
  %56 = add i64 %35, %53
  %57 = getelementptr i8, i8* %6, i64 %56
  %58 = mul i64 %52, %4
  %59 = add i64 %36, %58
  %60 = getelementptr i8, i8* %3, i64 %59
  %61 = add i64 %37, %58
  %62 = getelementptr i8, i8* %3, i64 %61
  %63 = mul i64 %52, %7
  %64 = add i64 %39, %63
  %65 = getelementptr i8, i8* %6, i64 %64
  %66 = ptrtoint i8* %65 to i64
  %67 = add i64 %40, %63
  %68 = getelementptr i8, i8* %6, i64 %67
  %69 = ptrtoint i8* %68 to i64
  %70 = add i64 %41, %63
  %71 = getelementptr i8, i8* %6, i64 %70
  %72 = ptrtoint i8* %71 to i64
  %73 = add i64 %38, %63
  %74 = getelementptr i8, i8* %6, i64 %73
  %75 = ptrtoint i8* %74 to i64
  %76 = mul i64 %52, %4
  %77 = getelementptr inbounds i8, i8* %45, i64 %76
  %78 = bitcast i8* %77 to i16*
  %79 = mul i64 %52, %7
  %80 = getelementptr inbounds i8, i8* %46, i64 %79
  br i1 %13, label %137, label %81

81:                                               ; preds = %51
  br i1 %17, label %82, label %84

82:                                               ; preds = %136, %100, %84, %81
  %83 = phi i64 [ 0, %100 ], [ 0, %84 ], [ 0, %81 ], [ %30, %136 ]
  br label %140

84:                                               ; preds = %81
  %85 = xor i64 %66, -1
  %86 = icmp ugt i64 %19, %85
  %87 = or i1 %86, %20
  %88 = xor i64 %69, -1
  %89 = icmp ugt i64 %22, %88
  %90 = or i1 %89, %23
  %91 = or i1 %87, %90
  %92 = xor i64 %72, -1
  %93 = icmp ugt i64 %25, %92
  %94 = or i1 %93, %26
  %95 = or i1 %91, %94
  %96 = xor i64 %75, -1
  %97 = icmp ugt i64 %28, %96
  %98 = or i1 %97, %29
  %99 = or i1 %95, %98
  br i1 %99, label %82, label %100

100:                                              ; preds = %84
  %101 = icmp ult i8* %55, %62
  %102 = icmp ult i8* %60, %57
  %103 = and i1 %101, %102
  br i1 %103, label %82, label %104

104:                                              ; preds = %100
  %105 = getelementptr inbounds i8, i8* %80, i64 -3
  br label %106

106:                                              ; preds = %106, %104
  %107 = phi i64 [ 0, %104 ], [ %134, %106 ]
  %108 = getelementptr inbounds i16, i16* %78, i64 %107
  %109 = bitcast i16* %108 to <8 x i16>*
  %110 = load <8 x i16>, <8 x i16>* %109, align 2, !alias.scope !69
  %111 = zext <8 x i16> %110 to <8 x i32>
  %112 = lshr <8 x i32> %111, <i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8>
  %113 = and <8 x i32> %112, <i32 248, i32 248, i32 248, i32 248, i32 248, i32 248, i32 248, i32 248>
  %114 = lshr <8 x i32> %111, <i32 13, i32 13, i32 13, i32 13, i32 13, i32 13, i32 13, i32 13>
  %115 = or <8 x i32> %113, %114
  %116 = trunc <8 x i32> %115 to <8 x i8>
  %117 = shl i64 %107, 2
  %118 = and <8 x i32> %111, <i32 2016, i32 2016, i32 2016, i32 2016, i32 2016, i32 2016, i32 2016, i32 2016>
  %119 = lshr exact <8 x i32> %118, <i32 3, i32 3, i32 3, i32 3, i32 3, i32 3, i32 3, i32 3>
  %120 = lshr <8 x i32> %118, <i32 9, i32 9, i32 9, i32 9, i32 9, i32 9, i32 9, i32 9>
  %121 = or <8 x i32> %119, %120
  %122 = trunc <8 x i32> %121 to <8 x i8>
  %123 = shl nuw nsw <8 x i32> %111, <i32 3, i32 3, i32 3, i32 3, i32 3, i32 3, i32 3, i32 3>
  %124 = lshr <8 x i32> %111, <i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2>
  %125 = and <8 x i32> %124, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %126 = or <8 x i32> %125, %123
  %127 = trunc <8 x i32> %126 to <8 x i8>
  %128 = or i64 %117, 3
  %129 = getelementptr inbounds i8, i8* %105, i64 %128
  %130 = bitcast i8* %129 to <32 x i8>*
  %131 = shufflevector <8 x i8> %116, <8 x i8> %122, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %132 = shufflevector <8 x i8> %127, <8 x i8> <i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1>, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %133 = shufflevector <16 x i8> %131, <16 x i8> %132, <32 x i32> <i32 0, i32 8, i32 16, i32 24, i32 1, i32 9, i32 17, i32 25, i32 2, i32 10, i32 18, i32 26, i32 3, i32 11, i32 19, i32 27, i32 4, i32 12, i32 20, i32 28, i32 5, i32 13, i32 21, i32 29, i32 6, i32 14, i32 22, i32 30, i32 7, i32 15, i32 23, i32 31>
  store <32 x i8> %133, <32 x i8>* %130, align 1
  %134 = add i64 %107, 8
  %135 = icmp eq i64 %134, %30
  br i1 %135, label %136, label %106, !llvm.loop !72

136:                                              ; preds = %106
  br i1 %31, label %137, label %82

137:                                              ; preds = %140, %136, %51
  %138 = add nuw i64 %52, 1
  %139 = icmp eq i64 %138, %1
  br i1 %139, label %48, label %51

140:                                              ; preds = %82, %140
  %141 = phi i64 [ %168, %140 ], [ %83, %82 ]
  %142 = getelementptr inbounds i16, i16* %78, i64 %141
  %143 = load i16, i16* %142, align 2
  %144 = zext i16 %143 to i32
  %145 = lshr i32 %144, 8
  %146 = and i32 %145, 248
  %147 = lshr i32 %144, 13
  %148 = or i32 %146, %147
  %149 = trunc i32 %148 to i8
  %150 = shl i64 %141, 2
  %151 = getelementptr inbounds i8, i8* %80, i64 %150
  store i8 %149, i8* %151, align 1
  %152 = and i32 %144, 2016
  %153 = lshr exact i32 %152, 3
  %154 = lshr i32 %152, 9
  %155 = or i32 %153, %154
  %156 = trunc i32 %155 to i8
  %157 = or i64 %150, 1
  %158 = getelementptr inbounds i8, i8* %80, i64 %157
  store i8 %156, i8* %158, align 1
  %159 = shl nuw nsw i32 %144, 3
  %160 = lshr i32 %144, 2
  %161 = and i32 %160, 7
  %162 = or i32 %161, %159
  %163 = trunc i32 %162 to i8
  %164 = or i64 %150, 2
  %165 = getelementptr inbounds i8, i8* %80, i64 %164
  store i8 %163, i8* %165, align 1
  %166 = or i64 %150, 3
  %167 = getelementptr inbounds i8, i8* %80, i64 %166
  store i8 -1, i8* %167, align 1
  %168 = add nuw i64 %141, 1
  %169 = icmp eq i64 %168, %0
  br i1 %169, label %137, label %140, !llvm.loop !73
}

; Function Attrs: nofree nounwind ssp uwtable
define hidden void @_ZN5angle16LoadRGBA8ToBGRA8EmmmPKhmmPhmm(i64, i64, i64, i8* nocapture readonly, i64, i64, i8*, i64, i64) local_unnamed_addr #2 {
  %10 = load i8, i8* @_ZZN2gl12supportsSSE2EvE7checked, align 1, !range !2
  %11 = icmp eq i8 %10, 0
  br i1 %11, label %12, label %13

12:                                               ; preds = %9
  store i8 1, i8* @_ZZN2gl12supportsSSE2EvE7checked, align 1
  br label %13

13:                                               ; preds = %9, %12
  %14 = load i8, i8* @_ZZN2gl12supportsSSE2EvE8supports, align 1, !range !2
  %15 = icmp eq i8 %14, 0
  %16 = icmp ne i64 %2, 0
  br i1 %15, label %23, label %17

17:                                               ; preds = %13
  br i1 %16, label %18, label %335

18:                                               ; preds = %17
  %19 = icmp eq i64 %1, 0
  %20 = icmp ne i64 %0, 0
  %21 = shl i64 %0, 2
  %22 = sub i64 0, %0
  br label %41

23:                                               ; preds = %13
  br i1 %16, label %24, label %335

24:                                               ; preds = %23
  %25 = icmp eq i64 %1, 0
  %26 = icmp eq i64 %0, 0
  %27 = shl i64 %0, 2
  %28 = add i64 %0, -8
  %29 = lshr i64 %28, 3
  %30 = add nuw nsw i64 %29, 1
  %31 = icmp ult i64 %0, 8
  %32 = and i64 %0, -8
  %33 = and i64 %30, 1
  %34 = icmp eq i64 %29, 0
  %35 = sub nuw nsw i64 %30, %33
  %36 = icmp eq i64 %33, 0
  %37 = icmp eq i64 %32, %0
  %38 = and i64 %0, 1
  %39 = icmp eq i64 %38, 0
  %40 = sub i64 0, %0
  br label %195

41:                                               ; preds = %52, %18
  %42 = phi i64 [ 0, %18 ], [ %53, %52 ]
  %43 = mul i64 %42, %8
  %44 = add i64 %21, %43
  %45 = mul i64 %42, %5
  %46 = add i64 %21, %45
  br i1 %19, label %52, label %47

47:                                               ; preds = %41
  %48 = mul i64 %42, %5
  %49 = mul i64 %42, %8
  %50 = getelementptr inbounds i8, i8* %3, i64 %48
  %51 = getelementptr inbounds i8, i8* %6, i64 %49
  br label %55

52:                                               ; preds = %192, %41
  %53 = add nuw i64 %42, 1
  %54 = icmp eq i64 %53, %2
  br i1 %54, label %335, label %41

55:                                               ; preds = %192, %47
  %56 = phi i64 [ 0, %47 ], [ %193, %192 ]
  %57 = mul i64 %56, %7
  %58 = add i64 %43, %57
  %59 = getelementptr i8, i8* %6, i64 %58
  %60 = add i64 %44, %57
  %61 = getelementptr i8, i8* %6, i64 %60
  %62 = mul i64 %56, %4
  %63 = add i64 %45, %62
  %64 = getelementptr i8, i8* %3, i64 %63
  %65 = add i64 %46, %62
  %66 = getelementptr i8, i8* %3, i64 %65
  %67 = mul i64 %56, %4
  %68 = getelementptr inbounds i8, i8* %50, i64 %67
  %69 = bitcast i8* %68 to i32*
  %70 = mul i64 %56, %7
  %71 = getelementptr inbounds i8, i8* %51, i64 %70
  %72 = bitcast i8* %71 to i32*
  %73 = ptrtoint i8* %71 to i64
  %74 = and i64 %73, 15
  %75 = icmp ne i64 %74, 0
  %76 = and i1 %20, %75
  br i1 %76, label %81, label %77

77:                                               ; preds = %81, %55
  %78 = phi i64 [ 0, %55 ], [ %90, %81 ]
  %79 = add i64 %78, 3
  %80 = icmp ult i64 %79, %0
  br i1 %80, label %156, label %97

81:                                               ; preds = %55, %81
  %82 = phi i32* [ %91, %81 ], [ %72, %55 ]
  %83 = phi i64 [ %90, %81 ], [ 0, %55 ]
  %84 = getelementptr inbounds i32, i32* %69, i64 %83
  %85 = load i32, i32* %84, align 4
  %86 = tail call i32 @llvm.fshl.i32(i32 %85, i32 %85, i32 16)
  %87 = and i32 %86, 16711935
  %88 = and i32 %85, -16711936
  %89 = or i32 %87, %88
  store i32 %89, i32* %82, align 4
  %90 = add nuw i64 %83, 1
  %91 = getelementptr inbounds i32, i32* %72, i64 %90
  %92 = ptrtoint i32* %91 to i64
  %93 = and i64 %92, 15
  %94 = icmp ne i64 %93, 0
  %95 = icmp ult i64 %90, %0
  %96 = and i1 %95, %94
  br i1 %96, label %81, label %77

97:                                               ; preds = %156, %77
  %98 = phi i64 [ %78, %77 ], [ %170, %156 ]
  %99 = icmp ult i64 %98, %0
  br i1 %99, label %100, label %192

100:                                              ; preds = %97
  %101 = sub i64 %0, %98
  %102 = icmp ult i64 %101, 8
  br i1 %102, label %103, label %121

103:                                              ; preds = %154, %121, %100
  %104 = phi i64 [ %98, %121 ], [ %98, %100 ], [ %130, %154 ]
  %105 = sub i64 %0, %104
  %106 = xor i64 %104, -1
  %107 = and i64 %105, 1
  %108 = icmp eq i64 %107, 0
  br i1 %108, label %118, label %109

109:                                              ; preds = %103
  %110 = getelementptr inbounds i32, i32* %69, i64 %104
  %111 = load i32, i32* %110, align 4
  %112 = tail call i32 @llvm.fshl.i32(i32 %111, i32 %111, i32 16)
  %113 = and i32 %112, 16711935
  %114 = and i32 %111, -16711936
  %115 = or i32 %113, %114
  %116 = getelementptr inbounds i32, i32* %72, i64 %104
  store i32 %115, i32* %116, align 4
  %117 = add nuw i64 %104, 1
  br label %118

118:                                              ; preds = %109, %103
  %119 = phi i64 [ %117, %109 ], [ %104, %103 ]
  %120 = icmp eq i64 %106, %22
  br i1 %120, label %192, label %173

121:                                              ; preds = %100
  %122 = shl i64 %98, 2
  %123 = getelementptr i8, i8* %59, i64 %122
  %124 = getelementptr i8, i8* %64, i64 %122
  %125 = icmp ult i8* %123, %66
  %126 = icmp ult i8* %124, %61
  %127 = and i1 %125, %126
  br i1 %127, label %103, label %128

128:                                              ; preds = %121
  %129 = and i64 %101, -8
  %130 = add i64 %98, %129
  br label %131

131:                                              ; preds = %131, %128
  %132 = phi i64 [ 0, %128 ], [ %152, %131 ]
  %133 = add i64 %98, %132
  %134 = getelementptr inbounds i32, i32* %69, i64 %133
  %135 = bitcast i32* %134 to <4 x i32>*
  %136 = load <4 x i32>, <4 x i32>* %135, align 4, !alias.scope !74
  %137 = getelementptr inbounds i32, i32* %134, i64 4
  %138 = bitcast i32* %137 to <4 x i32>*
  %139 = load <4 x i32>, <4 x i32>* %138, align 4, !alias.scope !74
  %140 = call <4 x i32> @llvm.fshl.v4i32(<4 x i32> %136, <4 x i32> %136, <4 x i32> <i32 16, i32 16, i32 16, i32 16>)
  %141 = call <4 x i32> @llvm.fshl.v4i32(<4 x i32> %139, <4 x i32> %139, <4 x i32> <i32 16, i32 16, i32 16, i32 16>)
  %142 = and <4 x i32> %140, <i32 16711935, i32 16711935, i32 16711935, i32 16711935>
  %143 = and <4 x i32> %141, <i32 16711935, i32 16711935, i32 16711935, i32 16711935>
  %144 = and <4 x i32> %136, <i32 -16711936, i32 -16711936, i32 -16711936, i32 -16711936>
  %145 = and <4 x i32> %139, <i32 -16711936, i32 -16711936, i32 -16711936, i32 -16711936>
  %146 = or <4 x i32> %142, %144
  %147 = or <4 x i32> %143, %145
  %148 = getelementptr inbounds i32, i32* %72, i64 %133
  %149 = bitcast i32* %148 to <4 x i32>*
  store <4 x i32> %146, <4 x i32>* %149, align 4, !alias.scope !77, !noalias !74
  %150 = getelementptr inbounds i32, i32* %148, i64 4
  %151 = bitcast i32* %150 to <4 x i32>*
  store <4 x i32> %147, <4 x i32>* %151, align 4, !alias.scope !77, !noalias !74
  %152 = add i64 %132, 8
  %153 = icmp eq i64 %152, %129
  br i1 %153, label %154, label %131, !llvm.loop !79

154:                                              ; preds = %131
  %155 = icmp eq i64 %101, %129
  br i1 %155, label %192, label %103

156:                                              ; preds = %77, %156
  %157 = phi i64 [ %170, %156 ], [ %78, %77 ]
  %158 = getelementptr inbounds i32, i32* %69, i64 %157
  %159 = bitcast i32* %158 to <2 x i64>*
  %160 = load <2 x i64>, <2 x i64>* %159, align 1
  %161 = and <2 x i64> %160, <i64 -71777214294589696, i64 -71777214294589696>
  %162 = bitcast <2 x i64> %160 to <8 x i16>
  %163 = and <8 x i16> %162, <i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255>
  %164 = shufflevector <8 x i16> %163, <8 x i16> undef, <8 x i32> <i32 1, i32 0, i32 3, i32 2, i32 4, i32 5, i32 6, i32 7>
  %165 = shufflevector <8 x i16> %164, <8 x i16> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 5, i32 4, i32 7, i32 6>
  %166 = bitcast <8 x i16> %165 to <2 x i64>
  %167 = or <2 x i64> %161, %166
  %168 = getelementptr inbounds i32, i32* %72, i64 %157
  %169 = bitcast i32* %168 to <2 x i64>*
  store <2 x i64> %167, <2 x i64>* %169, align 16
  %170 = add i64 %157, 4
  %171 = add i64 %157, 7
  %172 = icmp ult i64 %171, %0
  br i1 %172, label %156, label %97

173:                                              ; preds = %118, %173
  %174 = phi i64 [ %190, %173 ], [ %119, %118 ]
  %175 = getelementptr inbounds i32, i32* %69, i64 %174
  %176 = load i32, i32* %175, align 4
  %177 = tail call i32 @llvm.fshl.i32(i32 %176, i32 %176, i32 16)
  %178 = and i32 %177, 16711935
  %179 = and i32 %176, -16711936
  %180 = or i32 %178, %179
  %181 = getelementptr inbounds i32, i32* %72, i64 %174
  store i32 %180, i32* %181, align 4
  %182 = add nuw i64 %174, 1
  %183 = getelementptr inbounds i32, i32* %69, i64 %182
  %184 = load i32, i32* %183, align 4
  %185 = tail call i32 @llvm.fshl.i32(i32 %184, i32 %184, i32 16)
  %186 = and i32 %185, 16711935
  %187 = and i32 %184, -16711936
  %188 = or i32 %186, %187
  %189 = getelementptr inbounds i32, i32* %72, i64 %182
  store i32 %188, i32* %189, align 4
  %190 = add nuw i64 %174, 2
  %191 = icmp eq i64 %190, %0
  br i1 %191, label %192, label %173, !llvm.loop !80

192:                                              ; preds = %118, %173, %154, %97
  %193 = add nuw i64 %56, 1
  %194 = icmp eq i64 %193, %1
  br i1 %194, label %52, label %55

195:                                              ; preds = %206, %24
  %196 = phi i64 [ 0, %24 ], [ %207, %206 ]
  %197 = mul i64 %196, %8
  %198 = add i64 %27, %197
  %199 = mul i64 %196, %5
  %200 = add i64 %27, %199
  br i1 %25, label %206, label %201

201:                                              ; preds = %195
  %202 = mul i64 %196, %5
  %203 = mul i64 %196, %8
  %204 = getelementptr inbounds i8, i8* %3, i64 %202
  %205 = getelementptr inbounds i8, i8* %6, i64 %203
  br label %209

206:                                              ; preds = %313, %195
  %207 = add nuw i64 %196, 1
  %208 = icmp eq i64 %207, %2
  br i1 %208, label %335, label %195

209:                                              ; preds = %313, %201
  %210 = phi i64 [ 0, %201 ], [ %314, %313 ]
  %211 = mul i64 %210, %7
  %212 = add i64 %197, %211
  %213 = getelementptr i8, i8* %6, i64 %212
  %214 = add i64 %198, %211
  %215 = getelementptr i8, i8* %6, i64 %214
  %216 = mul i64 %210, %4
  %217 = add i64 %199, %216
  %218 = getelementptr i8, i8* %3, i64 %217
  %219 = add i64 %200, %216
  %220 = getelementptr i8, i8* %3, i64 %219
  %221 = mul i64 %210, %4
  %222 = getelementptr inbounds i8, i8* %204, i64 %221
  %223 = bitcast i8* %222 to i32*
  %224 = mul i64 %210, %7
  %225 = getelementptr inbounds i8, i8* %205, i64 %224
  %226 = bitcast i8* %225 to i32*
  br i1 %26, label %313, label %227

227:                                              ; preds = %209
  br i1 %31, label %228, label %243

228:                                              ; preds = %312, %243, %227
  %229 = phi i64 [ 0, %243 ], [ 0, %227 ], [ %32, %312 ]
  %230 = xor i64 %229, -1
  br i1 %39, label %240, label %231

231:                                              ; preds = %228
  %232 = getelementptr inbounds i32, i32* %223, i64 %229
  %233 = load i32, i32* %232, align 4
  %234 = tail call i32 @llvm.fshl.i32(i32 %233, i32 %233, i32 16)
  %235 = and i32 %234, 16711935
  %236 = and i32 %233, -16711936
  %237 = or i32 %235, %236
  %238 = getelementptr inbounds i32, i32* %226, i64 %229
  store i32 %237, i32* %238, align 4
  %239 = or i64 %229, 1
  br label %240

240:                                              ; preds = %231, %228
  %241 = phi i64 [ %239, %231 ], [ %229, %228 ]
  %242 = icmp eq i64 %230, %40
  br i1 %242, label %313, label %316

243:                                              ; preds = %227
  %244 = icmp ult i8* %213, %220
  %245 = icmp ult i8* %218, %215
  %246 = and i1 %244, %245
  br i1 %246, label %228, label %247

247:                                              ; preds = %243
  br i1 %34, label %291, label %248

248:                                              ; preds = %247, %248
  %249 = phi i64 [ %288, %248 ], [ 0, %247 ]
  %250 = phi i64 [ %289, %248 ], [ %35, %247 ]
  %251 = getelementptr inbounds i32, i32* %223, i64 %249
  %252 = bitcast i32* %251 to <4 x i32>*
  %253 = load <4 x i32>, <4 x i32>* %252, align 4, !alias.scope !81
  %254 = getelementptr inbounds i32, i32* %251, i64 4
  %255 = bitcast i32* %254 to <4 x i32>*
  %256 = load <4 x i32>, <4 x i32>* %255, align 4, !alias.scope !81
  %257 = call <4 x i32> @llvm.fshl.v4i32(<4 x i32> %253, <4 x i32> %253, <4 x i32> <i32 16, i32 16, i32 16, i32 16>)
  %258 = call <4 x i32> @llvm.fshl.v4i32(<4 x i32> %256, <4 x i32> %256, <4 x i32> <i32 16, i32 16, i32 16, i32 16>)
  %259 = and <4 x i32> %257, <i32 16711935, i32 16711935, i32 16711935, i32 16711935>
  %260 = and <4 x i32> %258, <i32 16711935, i32 16711935, i32 16711935, i32 16711935>
  %261 = and <4 x i32> %253, <i32 -16711936, i32 -16711936, i32 -16711936, i32 -16711936>
  %262 = and <4 x i32> %256, <i32 -16711936, i32 -16711936, i32 -16711936, i32 -16711936>
  %263 = or <4 x i32> %259, %261
  %264 = or <4 x i32> %260, %262
  %265 = getelementptr inbounds i32, i32* %226, i64 %249
  %266 = bitcast i32* %265 to <4 x i32>*
  store <4 x i32> %263, <4 x i32>* %266, align 4, !alias.scope !84, !noalias !81
  %267 = getelementptr inbounds i32, i32* %265, i64 4
  %268 = bitcast i32* %267 to <4 x i32>*
  store <4 x i32> %264, <4 x i32>* %268, align 4, !alias.scope !84, !noalias !81
  %269 = or i64 %249, 8
  %270 = getelementptr inbounds i32, i32* %223, i64 %269
  %271 = bitcast i32* %270 to <4 x i32>*
  %272 = load <4 x i32>, <4 x i32>* %271, align 4, !alias.scope !81
  %273 = getelementptr inbounds i32, i32* %270, i64 4
  %274 = bitcast i32* %273 to <4 x i32>*
  %275 = load <4 x i32>, <4 x i32>* %274, align 4, !alias.scope !81
  %276 = call <4 x i32> @llvm.fshl.v4i32(<4 x i32> %272, <4 x i32> %272, <4 x i32> <i32 16, i32 16, i32 16, i32 16>)
  %277 = call <4 x i32> @llvm.fshl.v4i32(<4 x i32> %275, <4 x i32> %275, <4 x i32> <i32 16, i32 16, i32 16, i32 16>)
  %278 = and <4 x i32> %276, <i32 16711935, i32 16711935, i32 16711935, i32 16711935>
  %279 = and <4 x i32> %277, <i32 16711935, i32 16711935, i32 16711935, i32 16711935>
  %280 = and <4 x i32> %272, <i32 -16711936, i32 -16711936, i32 -16711936, i32 -16711936>
  %281 = and <4 x i32> %275, <i32 -16711936, i32 -16711936, i32 -16711936, i32 -16711936>
  %282 = or <4 x i32> %278, %280
  %283 = or <4 x i32> %279, %281
  %284 = getelementptr inbounds i32, i32* %226, i64 %269
  %285 = bitcast i32* %284 to <4 x i32>*
  store <4 x i32> %282, <4 x i32>* %285, align 4, !alias.scope !84, !noalias !81
  %286 = getelementptr inbounds i32, i32* %284, i64 4
  %287 = bitcast i32* %286 to <4 x i32>*
  store <4 x i32> %283, <4 x i32>* %287, align 4, !alias.scope !84, !noalias !81
  %288 = add i64 %249, 16
  %289 = add i64 %250, -2
  %290 = icmp eq i64 %289, 0
  br i1 %290, label %291, label %248, !llvm.loop !86

291:                                              ; preds = %248, %247
  %292 = phi i64 [ 0, %247 ], [ %288, %248 ]
  br i1 %36, label %312, label %293

293:                                              ; preds = %291
  %294 = getelementptr inbounds i32, i32* %223, i64 %292
  %295 = bitcast i32* %294 to <4 x i32>*
  %296 = load <4 x i32>, <4 x i32>* %295, align 4, !alias.scope !81
  %297 = getelementptr inbounds i32, i32* %294, i64 4
  %298 = bitcast i32* %297 to <4 x i32>*
  %299 = load <4 x i32>, <4 x i32>* %298, align 4, !alias.scope !81
  %300 = call <4 x i32> @llvm.fshl.v4i32(<4 x i32> %296, <4 x i32> %296, <4 x i32> <i32 16, i32 16, i32 16, i32 16>)
  %301 = call <4 x i32> @llvm.fshl.v4i32(<4 x i32> %299, <4 x i32> %299, <4 x i32> <i32 16, i32 16, i32 16, i32 16>)
  %302 = and <4 x i32> %300, <i32 16711935, i32 16711935, i32 16711935, i32 16711935>
  %303 = and <4 x i32> %301, <i32 16711935, i32 16711935, i32 16711935, i32 16711935>
  %304 = and <4 x i32> %296, <i32 -16711936, i32 -16711936, i32 -16711936, i32 -16711936>
  %305 = and <4 x i32> %299, <i32 -16711936, i32 -16711936, i32 -16711936, i32 -16711936>
  %306 = or <4 x i32> %302, %304
  %307 = or <4 x i32> %303, %305
  %308 = getelementptr inbounds i32, i32* %226, i64 %292
  %309 = bitcast i32* %308 to <4 x i32>*
  store <4 x i32> %306, <4 x i32>* %309, align 4, !alias.scope !84, !noalias !81
  %310 = getelementptr inbounds i32, i32* %308, i64 4
  %311 = bitcast i32* %310 to <4 x i32>*
  store <4 x i32> %307, <4 x i32>* %311, align 4, !alias.scope !84, !noalias !81
  br label %312

312:                                              ; preds = %291, %293
  br i1 %37, label %313, label %228

313:                                              ; preds = %240, %316, %312, %209
  %314 = add nuw i64 %210, 1
  %315 = icmp eq i64 %314, %1
  br i1 %315, label %206, label %209

316:                                              ; preds = %240, %316
  %317 = phi i64 [ %333, %316 ], [ %241, %240 ]
  %318 = getelementptr inbounds i32, i32* %223, i64 %317
  %319 = load i32, i32* %318, align 4
  %320 = tail call i32 @llvm.fshl.i32(i32 %319, i32 %319, i32 16)
  %321 = and i32 %320, 16711935
  %322 = and i32 %319, -16711936
  %323 = or i32 %321, %322
  %324 = getelementptr inbounds i32, i32* %226, i64 %317
  store i32 %323, i32* %324, align 4
  %325 = add nuw i64 %317, 1
  %326 = getelementptr inbounds i32, i32* %223, i64 %325
  %327 = load i32, i32* %326, align 4
  %328 = tail call i32 @llvm.fshl.i32(i32 %327, i32 %327, i32 16)
  %329 = and i32 %328, 16711935
  %330 = and i32 %327, -16711936
  %331 = or i32 %329, %330
  %332 = getelementptr inbounds i32, i32* %226, i64 %325
  store i32 %331, i32* %332, align 4
  %333 = add nuw i64 %317, 2
  %334 = icmp eq i64 %333, %0
  br i1 %334, label %313, label %316, !llvm.loop !87

335:                                              ; preds = %52, %206, %17, %23
  ret void
}

; Function Attrs: nounwind readnone speculatable
declare i32 @llvm.fshl.i32(i32, i32, i32) #3

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @_ZN5angle16LoadRGBA8ToBGRA4EmmmPKhmmPhmm(i64, i64, i64, i8* nocapture readonly, i64, i64, i8* nocapture, i64, i64) local_unnamed_addr #1 {
  %10 = icmp eq i64 %2, 0
  br i1 %10, label %30, label %11

11:                                               ; preds = %9
  %12 = icmp eq i64 %1, 0
  %13 = icmp eq i64 %0, 0
  %14 = shl i64 %0, 1
  %15 = shl i64 %0, 2
  %16 = icmp ult i64 %0, 8
  %17 = and i64 %0, -8
  %18 = icmp eq i64 %17, %0
  br label %19

19:                                               ; preds = %31, %11
  %20 = phi i64 [ 0, %11 ], [ %32, %31 ]
  %21 = mul i64 %20, %8
  %22 = add i64 %14, %21
  %23 = mul i64 %20, %5
  %24 = add i64 %15, %23
  br i1 %12, label %31, label %25

25:                                               ; preds = %19
  %26 = mul i64 %20, %5
  %27 = mul i64 %20, %8
  %28 = getelementptr inbounds i8, i8* %3, i64 %26
  %29 = getelementptr inbounds i8, i8* %6, i64 %27
  br label %34

30:                                               ; preds = %31, %9
  ret void

31:                                               ; preds = %98, %19
  %32 = add nuw i64 %20, 1
  %33 = icmp eq i64 %32, %2
  br i1 %33, label %30, label %19

34:                                               ; preds = %98, %25
  %35 = phi i64 [ 0, %25 ], [ %99, %98 ]
  %36 = mul i64 %35, %7
  %37 = add i64 %21, %36
  %38 = getelementptr i8, i8* %6, i64 %37
  %39 = add i64 %22, %36
  %40 = getelementptr i8, i8* %6, i64 %39
  %41 = mul i64 %35, %4
  %42 = add i64 %23, %41
  %43 = getelementptr i8, i8* %3, i64 %42
  %44 = add i64 %24, %41
  %45 = getelementptr i8, i8* %3, i64 %44
  %46 = mul i64 %35, %4
  %47 = getelementptr inbounds i8, i8* %28, i64 %46
  %48 = bitcast i8* %47 to i32*
  %49 = mul i64 %35, %7
  %50 = getelementptr inbounds i8, i8* %29, i64 %49
  %51 = bitcast i8* %50 to i16*
  br i1 %13, label %98, label %52

52:                                               ; preds = %34
  br i1 %16, label %53, label %55

53:                                               ; preds = %97, %55, %52
  %54 = phi i64 [ 0, %55 ], [ 0, %52 ], [ %17, %97 ]
  br label %101

55:                                               ; preds = %52
  %56 = icmp ult i8* %38, %45
  %57 = icmp ult i8* %43, %40
  %58 = and i1 %56, %57
  br i1 %58, label %53, label %59

59:                                               ; preds = %55, %59
  %60 = phi i64 [ %95, %59 ], [ 0, %55 ]
  %61 = getelementptr inbounds i32, i32* %48, i64 %60
  %62 = bitcast i32* %61 to <4 x i32>*
  %63 = load <4 x i32>, <4 x i32>* %62, align 4, !alias.scope !88
  %64 = getelementptr inbounds i32, i32* %61, i64 4
  %65 = bitcast i32* %64 to <4 x i32>*
  %66 = load <4 x i32>, <4 x i32>* %65, align 4, !alias.scope !88
  %67 = lshr <4 x i32> %63, <i32 20, i32 20, i32 20, i32 20>
  %68 = lshr <4 x i32> %66, <i32 20, i32 20, i32 20, i32 20>
  %69 = and <4 x i32> %67, <i32 15, i32 15, i32 15, i32 15>
  %70 = and <4 x i32> %68, <i32 15, i32 15, i32 15, i32 15>
  %71 = lshr <4 x i32> %63, <i32 28, i32 28, i32 28, i32 28>
  %72 = lshr <4 x i32> %66, <i32 28, i32 28, i32 28, i32 28>
  %73 = shl nuw nsw <4 x i32> %71, <i32 12, i32 12, i32 12, i32 12>
  %74 = shl nuw nsw <4 x i32> %72, <i32 12, i32 12, i32 12, i32 12>
  %75 = shl <4 x i32> %63, <i32 4, i32 4, i32 4, i32 4>
  %76 = shl <4 x i32> %66, <i32 4, i32 4, i32 4, i32 4>
  %77 = and <4 x i32> %75, <i32 3840, i32 3840, i32 3840, i32 3840>
  %78 = and <4 x i32> %76, <i32 3840, i32 3840, i32 3840, i32 3840>
  %79 = or <4 x i32> %73, %77
  %80 = or <4 x i32> %74, %78
  %81 = lshr <4 x i32> %63, <i32 8, i32 8, i32 8, i32 8>
  %82 = lshr <4 x i32> %66, <i32 8, i32 8, i32 8, i32 8>
  %83 = and <4 x i32> %81, <i32 240, i32 240, i32 240, i32 240>
  %84 = and <4 x i32> %82, <i32 240, i32 240, i32 240, i32 240>
  %85 = or <4 x i32> %79, %83
  %86 = or <4 x i32> %80, %84
  %87 = or <4 x i32> %85, %69
  %88 = or <4 x i32> %86, %70
  %89 = trunc <4 x i32> %87 to <4 x i16>
  %90 = trunc <4 x i32> %88 to <4 x i16>
  %91 = getelementptr inbounds i16, i16* %51, i64 %60
  %92 = bitcast i16* %91 to <4 x i16>*
  store <4 x i16> %89, <4 x i16>* %92, align 2, !alias.scope !91, !noalias !88
  %93 = getelementptr inbounds i16, i16* %91, i64 4
  %94 = bitcast i16* %93 to <4 x i16>*
  store <4 x i16> %90, <4 x i16>* %94, align 2, !alias.scope !91, !noalias !88
  %95 = add i64 %60, 8
  %96 = icmp eq i64 %95, %17
  br i1 %96, label %97, label %59, !llvm.loop !93

97:                                               ; preds = %59
  br i1 %18, label %98, label %53

98:                                               ; preds = %101, %97, %34
  %99 = add nuw i64 %35, 1
  %100 = icmp eq i64 %99, %1
  br i1 %100, label %31, label %34

101:                                              ; preds = %53, %101
  %102 = phi i64 [ %118, %101 ], [ %54, %53 ]
  %103 = getelementptr inbounds i32, i32* %48, i64 %102
  %104 = load i32, i32* %103, align 4
  %105 = lshr i32 %104, 20
  %106 = and i32 %105, 15
  %107 = lshr i32 %104, 28
  %108 = shl nuw nsw i32 %107, 12
  %109 = shl i32 %104, 4
  %110 = and i32 %109, 3840
  %111 = or i32 %108, %110
  %112 = lshr i32 %104, 8
  %113 = and i32 %112, 240
  %114 = or i32 %111, %113
  %115 = or i32 %114, %106
  %116 = trunc i32 %115 to i16
  %117 = getelementptr inbounds i16, i16* %51, i64 %102
  store i16 %116, i16* %117, align 2
  %118 = add nuw i64 %102, 1
  %119 = icmp eq i64 %118, %0
  br i1 %119, label %98, label %101, !llvm.loop !94
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @_ZN5angle16LoadRGBA8ToRGBA4EmmmPKhmmPhmm(i64, i64, i64, i8* nocapture readonly, i64, i64, i8* nocapture, i64, i64) local_unnamed_addr #1 {
  %10 = icmp eq i64 %2, 0
  br i1 %10, label %30, label %11

11:                                               ; preds = %9
  %12 = icmp eq i64 %1, 0
  %13 = icmp eq i64 %0, 0
  %14 = shl i64 %0, 1
  %15 = shl i64 %0, 2
  %16 = icmp ult i64 %0, 8
  %17 = and i64 %0, -8
  %18 = icmp eq i64 %17, %0
  br label %19

19:                                               ; preds = %31, %11
  %20 = phi i64 [ 0, %11 ], [ %32, %31 ]
  %21 = mul i64 %20, %8
  %22 = add i64 %14, %21
  %23 = mul i64 %20, %5
  %24 = add i64 %15, %23
  br i1 %12, label %31, label %25

25:                                               ; preds = %19
  %26 = mul i64 %20, %5
  %27 = mul i64 %20, %8
  %28 = getelementptr inbounds i8, i8* %3, i64 %26
  %29 = getelementptr inbounds i8, i8* %6, i64 %27
  br label %34

30:                                               ; preds = %31, %9
  ret void

31:                                               ; preds = %96, %19
  %32 = add nuw i64 %20, 1
  %33 = icmp eq i64 %32, %2
  br i1 %33, label %30, label %19

34:                                               ; preds = %96, %25
  %35 = phi i64 [ 0, %25 ], [ %97, %96 ]
  %36 = mul i64 %35, %7
  %37 = add i64 %21, %36
  %38 = getelementptr i8, i8* %6, i64 %37
  %39 = add i64 %22, %36
  %40 = getelementptr i8, i8* %6, i64 %39
  %41 = mul i64 %35, %4
  %42 = add i64 %23, %41
  %43 = getelementptr i8, i8* %3, i64 %42
  %44 = add i64 %24, %41
  %45 = getelementptr i8, i8* %3, i64 %44
  %46 = mul i64 %35, %4
  %47 = getelementptr inbounds i8, i8* %28, i64 %46
  %48 = bitcast i8* %47 to i32*
  %49 = mul i64 %35, %7
  %50 = getelementptr inbounds i8, i8* %29, i64 %49
  %51 = bitcast i8* %50 to i16*
  br i1 %13, label %96, label %52

52:                                               ; preds = %34
  br i1 %16, label %53, label %55

53:                                               ; preds = %95, %55, %52
  %54 = phi i64 [ 0, %55 ], [ 0, %52 ], [ %17, %95 ]
  br label %99

55:                                               ; preds = %52
  %56 = icmp ult i8* %38, %45
  %57 = icmp ult i8* %43, %40
  %58 = and i1 %56, %57
  br i1 %58, label %53, label %59

59:                                               ; preds = %55, %59
  %60 = phi i64 [ %93, %59 ], [ 0, %55 ]
  %61 = getelementptr inbounds i32, i32* %48, i64 %60
  %62 = bitcast i32* %61 to <4 x i32>*
  %63 = load <4 x i32>, <4 x i32>* %62, align 4, !alias.scope !95
  %64 = getelementptr inbounds i32, i32* %61, i64 4
  %65 = bitcast i32* %64 to <4 x i32>*
  %66 = load <4 x i32>, <4 x i32>* %65, align 4, !alias.scope !95
  %67 = lshr <4 x i32> %63, <i32 28, i32 28, i32 28, i32 28>
  %68 = lshr <4 x i32> %66, <i32 28, i32 28, i32 28, i32 28>
  %69 = shl <4 x i32> %63, <i32 8, i32 8, i32 8, i32 8>
  %70 = shl <4 x i32> %66, <i32 8, i32 8, i32 8, i32 8>
  %71 = and <4 x i32> %69, <i32 61440, i32 61440, i32 61440, i32 61440>
  %72 = and <4 x i32> %70, <i32 61440, i32 61440, i32 61440, i32 61440>
  %73 = lshr <4 x i32> %63, <i32 4, i32 4, i32 4, i32 4>
  %74 = lshr <4 x i32> %66, <i32 4, i32 4, i32 4, i32 4>
  %75 = and <4 x i32> %73, <i32 3840, i32 3840, i32 3840, i32 3840>
  %76 = and <4 x i32> %74, <i32 3840, i32 3840, i32 3840, i32 3840>
  %77 = lshr <4 x i32> %63, <i32 16, i32 16, i32 16, i32 16>
  %78 = lshr <4 x i32> %66, <i32 16, i32 16, i32 16, i32 16>
  %79 = and <4 x i32> %77, <i32 240, i32 240, i32 240, i32 240>
  %80 = and <4 x i32> %78, <i32 240, i32 240, i32 240, i32 240>
  %81 = or <4 x i32> %75, %67
  %82 = or <4 x i32> %76, %68
  %83 = or <4 x i32> %81, %71
  %84 = or <4 x i32> %82, %72
  %85 = or <4 x i32> %83, %79
  %86 = or <4 x i32> %84, %80
  %87 = trunc <4 x i32> %85 to <4 x i16>
  %88 = trunc <4 x i32> %86 to <4 x i16>
  %89 = getelementptr inbounds i16, i16* %51, i64 %60
  %90 = bitcast i16* %89 to <4 x i16>*
  store <4 x i16> %87, <4 x i16>* %90, align 2, !alias.scope !98, !noalias !95
  %91 = getelementptr inbounds i16, i16* %89, i64 4
  %92 = bitcast i16* %91 to <4 x i16>*
  store <4 x i16> %88, <4 x i16>* %92, align 2, !alias.scope !98, !noalias !95
  %93 = add i64 %60, 8
  %94 = icmp eq i64 %93, %17
  br i1 %94, label %95, label %59, !llvm.loop !100

95:                                               ; preds = %59
  br i1 %18, label %96, label %53

96:                                               ; preds = %99, %95, %34
  %97 = add nuw i64 %35, 1
  %98 = icmp eq i64 %97, %1
  br i1 %98, label %31, label %34

99:                                               ; preds = %53, %99
  %100 = phi i64 [ %115, %99 ], [ %54, %53 ]
  %101 = getelementptr inbounds i32, i32* %48, i64 %100
  %102 = load i32, i32* %101, align 4
  %103 = lshr i32 %102, 28
  %104 = shl i32 %102, 8
  %105 = and i32 %104, 61440
  %106 = lshr i32 %102, 4
  %107 = and i32 %106, 3840
  %108 = lshr i32 %102, 16
  %109 = and i32 %108, 240
  %110 = or i32 %107, %103
  %111 = or i32 %110, %105
  %112 = or i32 %111, %109
  %113 = trunc i32 %112 to i16
  %114 = getelementptr inbounds i16, i16* %51, i64 %100
  store i16 %113, i16* %114, align 2
  %115 = add nuw i64 %100, 1
  %116 = icmp eq i64 %115, %0
  br i1 %116, label %96, label %99, !llvm.loop !101
}

; Function Attrs: nofree nounwind ssp uwtable
define hidden void @_ZN5angle16LoadRGBA4ToARGB4EmmmPKhmmPhmm(i64, i64, i64, i8* nocapture readonly, i64, i64, i8* nocapture, i64, i64) local_unnamed_addr #4 {
  %10 = icmp eq i64 %2, 0
  br i1 %10, label %38, label %11

11:                                               ; preds = %9
  %12 = icmp eq i64 %1, 0
  %13 = icmp eq i64 %0, 0
  %14 = shl i64 %0, 1
  %15 = add i64 %0, -16
  %16 = lshr i64 %15, 4
  %17 = add nuw nsw i64 %16, 1
  %18 = icmp ult i64 %0, 16
  %19 = and i64 %0, -16
  %20 = and i64 %17, 1
  %21 = icmp eq i64 %16, 0
  %22 = sub nuw nsw i64 %17, %20
  %23 = icmp eq i64 %20, 0
  %24 = icmp eq i64 %19, %0
  %25 = and i64 %0, 3
  %26 = icmp eq i64 %25, 0
  br label %27

27:                                               ; preds = %39, %11
  %28 = phi i64 [ 0, %11 ], [ %40, %39 ]
  %29 = mul i64 %28, %8
  %30 = add i64 %14, %29
  %31 = mul i64 %28, %5
  %32 = add i64 %14, %31
  br i1 %12, label %39, label %33

33:                                               ; preds = %27
  %34 = mul i64 %28, %5
  %35 = mul i64 %28, %8
  %36 = getelementptr inbounds i8, i8* %3, i64 %34
  %37 = getelementptr inbounds i8, i8* %6, i64 %35
  br label %42

38:                                               ; preds = %39, %9
  ret void

39:                                               ; preds = %130, %27
  %40 = add nuw i64 %28, 1
  %41 = icmp eq i64 %40, %2
  br i1 %41, label %38, label %27

42:                                               ; preds = %130, %33
  %43 = phi i64 [ 0, %33 ], [ %131, %130 ]
  %44 = mul i64 %43, %7
  %45 = add i64 %29, %44
  %46 = getelementptr i8, i8* %6, i64 %45
  %47 = add i64 %30, %44
  %48 = getelementptr i8, i8* %6, i64 %47
  %49 = mul i64 %43, %4
  %50 = add i64 %31, %49
  %51 = getelementptr i8, i8* %3, i64 %50
  %52 = add i64 %32, %49
  %53 = getelementptr i8, i8* %3, i64 %52
  %54 = mul i64 %43, %4
  %55 = getelementptr inbounds i8, i8* %36, i64 %54
  %56 = bitcast i8* %55 to i16*
  %57 = mul i64 %43, %7
  %58 = getelementptr inbounds i8, i8* %37, i64 %57
  %59 = bitcast i8* %58 to i16*
  br i1 %13, label %130, label %60

60:                                               ; preds = %42
  br i1 %18, label %61, label %78

61:                                               ; preds = %129, %78, %60
  %62 = phi i64 [ 0, %78 ], [ 0, %60 ], [ %19, %129 ]
  %63 = xor i64 %62, -1
  %64 = add i64 %63, %0
  br i1 %26, label %75, label %65

65:                                               ; preds = %61, %65
  %66 = phi i64 [ %72, %65 ], [ %62, %61 ]
  %67 = phi i64 [ %73, %65 ], [ %25, %61 ]
  %68 = getelementptr inbounds i16, i16* %56, i64 %66
  %69 = load i16, i16* %68, align 2
  %70 = tail call i16 @llvm.fshl.i16(i16 %69, i16 %69, i16 12)
  %71 = getelementptr inbounds i16, i16* %59, i64 %66
  store i16 %70, i16* %71, align 2
  %72 = add nuw i64 %66, 1
  %73 = add i64 %67, -1
  %74 = icmp eq i64 %73, 0
  br i1 %74, label %75, label %65, !llvm.loop !102

75:                                               ; preds = %65, %61
  %76 = phi i64 [ %62, %61 ], [ %72, %65 ]
  %77 = icmp ult i64 %64, 3
  br i1 %77, label %130, label %133

78:                                               ; preds = %60
  %79 = icmp ult i8* %46, %53
  %80 = icmp ult i8* %51, %48
  %81 = and i1 %79, %80
  br i1 %81, label %61, label %82

82:                                               ; preds = %78
  br i1 %21, label %114, label %83

83:                                               ; preds = %82, %83
  %84 = phi i64 [ %111, %83 ], [ 0, %82 ]
  %85 = phi i64 [ %112, %83 ], [ %22, %82 ]
  %86 = getelementptr inbounds i16, i16* %56, i64 %84
  %87 = bitcast i16* %86 to <8 x i16>*
  %88 = load <8 x i16>, <8 x i16>* %87, align 2, !alias.scope !103
  %89 = getelementptr inbounds i16, i16* %86, i64 8
  %90 = bitcast i16* %89 to <8 x i16>*
  %91 = load <8 x i16>, <8 x i16>* %90, align 2, !alias.scope !103
  %92 = call <8 x i16> @llvm.fshl.v8i16(<8 x i16> %88, <8 x i16> %88, <8 x i16> <i16 12, i16 12, i16 12, i16 12, i16 12, i16 12, i16 12, i16 12>)
  %93 = call <8 x i16> @llvm.fshl.v8i16(<8 x i16> %91, <8 x i16> %91, <8 x i16> <i16 12, i16 12, i16 12, i16 12, i16 12, i16 12, i16 12, i16 12>)
  %94 = getelementptr inbounds i16, i16* %59, i64 %84
  %95 = bitcast i16* %94 to <8 x i16>*
  store <8 x i16> %92, <8 x i16>* %95, align 2, !alias.scope !106, !noalias !103
  %96 = getelementptr inbounds i16, i16* %94, i64 8
  %97 = bitcast i16* %96 to <8 x i16>*
  store <8 x i16> %93, <8 x i16>* %97, align 2, !alias.scope !106, !noalias !103
  %98 = or i64 %84, 16
  %99 = getelementptr inbounds i16, i16* %56, i64 %98
  %100 = bitcast i16* %99 to <8 x i16>*
  %101 = load <8 x i16>, <8 x i16>* %100, align 2, !alias.scope !103
  %102 = getelementptr inbounds i16, i16* %99, i64 8
  %103 = bitcast i16* %102 to <8 x i16>*
  %104 = load <8 x i16>, <8 x i16>* %103, align 2, !alias.scope !103
  %105 = call <8 x i16> @llvm.fshl.v8i16(<8 x i16> %101, <8 x i16> %101, <8 x i16> <i16 12, i16 12, i16 12, i16 12, i16 12, i16 12, i16 12, i16 12>)
  %106 = call <8 x i16> @llvm.fshl.v8i16(<8 x i16> %104, <8 x i16> %104, <8 x i16> <i16 12, i16 12, i16 12, i16 12, i16 12, i16 12, i16 12, i16 12>)
  %107 = getelementptr inbounds i16, i16* %59, i64 %98
  %108 = bitcast i16* %107 to <8 x i16>*
  store <8 x i16> %105, <8 x i16>* %108, align 2, !alias.scope !106, !noalias !103
  %109 = getelementptr inbounds i16, i16* %107, i64 8
  %110 = bitcast i16* %109 to <8 x i16>*
  store <8 x i16> %106, <8 x i16>* %110, align 2, !alias.scope !106, !noalias !103
  %111 = add i64 %84, 32
  %112 = add i64 %85, -2
  %113 = icmp eq i64 %112, 0
  br i1 %113, label %114, label %83, !llvm.loop !108

114:                                              ; preds = %83, %82
  %115 = phi i64 [ 0, %82 ], [ %111, %83 ]
  br i1 %23, label %129, label %116

116:                                              ; preds = %114
  %117 = getelementptr inbounds i16, i16* %56, i64 %115
  %118 = bitcast i16* %117 to <8 x i16>*
  %119 = load <8 x i16>, <8 x i16>* %118, align 2, !alias.scope !103
  %120 = getelementptr inbounds i16, i16* %117, i64 8
  %121 = bitcast i16* %120 to <8 x i16>*
  %122 = load <8 x i16>, <8 x i16>* %121, align 2, !alias.scope !103
  %123 = call <8 x i16> @llvm.fshl.v8i16(<8 x i16> %119, <8 x i16> %119, <8 x i16> <i16 12, i16 12, i16 12, i16 12, i16 12, i16 12, i16 12, i16 12>)
  %124 = call <8 x i16> @llvm.fshl.v8i16(<8 x i16> %122, <8 x i16> %122, <8 x i16> <i16 12, i16 12, i16 12, i16 12, i16 12, i16 12, i16 12, i16 12>)
  %125 = getelementptr inbounds i16, i16* %59, i64 %115
  %126 = bitcast i16* %125 to <8 x i16>*
  store <8 x i16> %123, <8 x i16>* %126, align 2, !alias.scope !106, !noalias !103
  %127 = getelementptr inbounds i16, i16* %125, i64 8
  %128 = bitcast i16* %127 to <8 x i16>*
  store <8 x i16> %124, <8 x i16>* %128, align 2, !alias.scope !106, !noalias !103
  br label %129

129:                                              ; preds = %114, %116
  br i1 %24, label %130, label %61

130:                                              ; preds = %75, %133, %129, %42
  %131 = add nuw i64 %43, 1
  %132 = icmp eq i64 %131, %1
  br i1 %132, label %39, label %42

133:                                              ; preds = %75, %133
  %134 = phi i64 [ %154, %133 ], [ %76, %75 ]
  %135 = getelementptr inbounds i16, i16* %56, i64 %134
  %136 = load i16, i16* %135, align 2
  %137 = tail call i16 @llvm.fshl.i16(i16 %136, i16 %136, i16 12)
  %138 = getelementptr inbounds i16, i16* %59, i64 %134
  store i16 %137, i16* %138, align 2
  %139 = add nuw i64 %134, 1
  %140 = getelementptr inbounds i16, i16* %56, i64 %139
  %141 = load i16, i16* %140, align 2
  %142 = tail call i16 @llvm.fshl.i16(i16 %141, i16 %141, i16 12)
  %143 = getelementptr inbounds i16, i16* %59, i64 %139
  store i16 %142, i16* %143, align 2
  %144 = add nuw i64 %134, 2
  %145 = getelementptr inbounds i16, i16* %56, i64 %144
  %146 = load i16, i16* %145, align 2
  %147 = tail call i16 @llvm.fshl.i16(i16 %146, i16 %146, i16 12)
  %148 = getelementptr inbounds i16, i16* %59, i64 %144
  store i16 %147, i16* %148, align 2
  %149 = add nuw i64 %134, 3
  %150 = getelementptr inbounds i16, i16* %56, i64 %149
  %151 = load i16, i16* %150, align 2
  %152 = tail call i16 @llvm.fshl.i16(i16 %151, i16 %151, i16 12)
  %153 = getelementptr inbounds i16, i16* %59, i64 %149
  store i16 %152, i16* %153, align 2
  %154 = add nuw i64 %134, 4
  %155 = icmp eq i64 %154, %0
  br i1 %155, label %130, label %133, !llvm.loop !109
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @_ZN5angle16LoadRGBA4ToBGRA8EmmmPKhmmPhmm(i64, i64, i64, i8* nocapture readonly, i64, i64, i8* nocapture, i64, i64) local_unnamed_addr #1 {
  %10 = icmp eq i64 %2, 0
  br i1 %10, label %47, label %11

11:                                               ; preds = %9
  %12 = icmp eq i64 %1, 0
  %13 = icmp eq i64 %0, 0
  %14 = add i64 %0, -1
  %15 = shl i64 %0, 2
  %16 = shl i64 %0, 1
  %17 = icmp ult i64 %0, 8
  %18 = call { i64, i1 } @llvm.umul.with.overflow.i64(i64 %14, i64 4)
  %19 = extractvalue { i64, i1 } %18, 0
  %20 = extractvalue { i64, i1 } %18, 1
  %21 = call { i64, i1 } @llvm.umul.with.overflow.i64(i64 %14, i64 4)
  %22 = extractvalue { i64, i1 } %21, 0
  %23 = extractvalue { i64, i1 } %21, 1
  %24 = call { i64, i1 } @llvm.umul.with.overflow.i64(i64 %14, i64 4)
  %25 = extractvalue { i64, i1 } %24, 0
  %26 = extractvalue { i64, i1 } %24, 1
  %27 = call { i64, i1 } @llvm.umul.with.overflow.i64(i64 %14, i64 4)
  %28 = extractvalue { i64, i1 } %27, 0
  %29 = extractvalue { i64, i1 } %27, 1
  %30 = and i64 %0, -8
  %31 = icmp eq i64 %30, %0
  br label %32

32:                                               ; preds = %48, %11
  %33 = phi i64 [ 0, %11 ], [ %49, %48 ]
  %34 = mul i64 %33, %8
  %35 = add i64 %15, %34
  %36 = mul i64 %33, %5
  %37 = add i64 %16, %36
  %38 = mul i64 %33, %8
  %39 = add i64 %38, 2
  %40 = add i64 %38, 3
  %41 = add i64 %38, 1
  br i1 %12, label %48, label %42

42:                                               ; preds = %32
  %43 = mul i64 %33, %5
  %44 = mul i64 %33, %8
  %45 = getelementptr inbounds i8, i8* %3, i64 %43
  %46 = getelementptr inbounds i8, i8* %6, i64 %44
  br label %51

47:                                               ; preds = %48, %9
  ret void

48:                                               ; preds = %140, %32
  %49 = add nuw i64 %33, 1
  %50 = icmp eq i64 %49, %2
  br i1 %50, label %47, label %32

51:                                               ; preds = %140, %42
  %52 = phi i64 [ 0, %42 ], [ %141, %140 ]
  %53 = mul i64 %52, %7
  %54 = add i64 %34, %53
  %55 = getelementptr i8, i8* %6, i64 %54
  %56 = add i64 %35, %53
  %57 = getelementptr i8, i8* %6, i64 %56
  %58 = mul i64 %52, %4
  %59 = add i64 %36, %58
  %60 = getelementptr i8, i8* %3, i64 %59
  %61 = add i64 %37, %58
  %62 = getelementptr i8, i8* %3, i64 %61
  %63 = mul i64 %52, %7
  %64 = add i64 %39, %63
  %65 = getelementptr i8, i8* %6, i64 %64
  %66 = ptrtoint i8* %65 to i64
  %67 = add i64 %40, %63
  %68 = getelementptr i8, i8* %6, i64 %67
  %69 = ptrtoint i8* %68 to i64
  %70 = add i64 %41, %63
  %71 = getelementptr i8, i8* %6, i64 %70
  %72 = ptrtoint i8* %71 to i64
  %73 = add i64 %38, %63
  %74 = getelementptr i8, i8* %6, i64 %73
  %75 = ptrtoint i8* %74 to i64
  %76 = mul i64 %52, %4
  %77 = getelementptr inbounds i8, i8* %45, i64 %76
  %78 = bitcast i8* %77 to i16*
  %79 = mul i64 %52, %7
  %80 = getelementptr inbounds i8, i8* %46, i64 %79
  br i1 %13, label %140, label %81

81:                                               ; preds = %51
  br i1 %17, label %82, label %84

82:                                               ; preds = %139, %100, %84, %81
  %83 = phi i64 [ 0, %100 ], [ 0, %84 ], [ 0, %81 ], [ %30, %139 ]
  br label %143

84:                                               ; preds = %81
  %85 = xor i64 %66, -1
  %86 = icmp ugt i64 %19, %85
  %87 = or i1 %86, %20
  %88 = xor i64 %69, -1
  %89 = icmp ugt i64 %22, %88
  %90 = or i1 %89, %23
  %91 = or i1 %87, %90
  %92 = xor i64 %72, -1
  %93 = icmp ugt i64 %25, %92
  %94 = or i1 %93, %26
  %95 = or i1 %91, %94
  %96 = xor i64 %75, -1
  %97 = icmp ugt i64 %28, %96
  %98 = or i1 %97, %29
  %99 = or i1 %95, %98
  br i1 %99, label %82, label %100

100:                                              ; preds = %84
  %101 = icmp ult i8* %55, %62
  %102 = icmp ult i8* %60, %57
  %103 = and i1 %101, %102
  br i1 %103, label %82, label %104

104:                                              ; preds = %100
  %105 = getelementptr inbounds i8, i8* %80, i64 -3
  br label %106

106:                                              ; preds = %106, %104
  %107 = phi i64 [ 0, %104 ], [ %137, %106 ]
  %108 = getelementptr inbounds i16, i16* %78, i64 %107
  %109 = bitcast i16* %108 to <8 x i16>*
  %110 = load <8 x i16>, <8 x i16>* %109, align 2, !alias.scope !110
  %111 = zext <8 x i16> %110 to <8 x i32>
  %112 = and <8 x i32> %111, <i32 240, i32 240, i32 240, i32 240, i32 240, i32 240, i32 240, i32 240>
  %113 = lshr exact <8 x i32> %112, <i32 4, i32 4, i32 4, i32 4, i32 4, i32 4, i32 4, i32 4>
  %114 = or <8 x i32> %113, %112
  %115 = trunc <8 x i32> %114 to <8 x i8>
  %116 = shl i64 %107, 2
  %117 = and <8 x i32> %111, <i32 3840, i32 3840, i32 3840, i32 3840, i32 3840, i32 3840, i32 3840, i32 3840>
  %118 = lshr exact <8 x i32> %117, <i32 4, i32 4, i32 4, i32 4, i32 4, i32 4, i32 4, i32 4>
  %119 = lshr exact <8 x i32> %117, <i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8>
  %120 = or <8 x i32> %118, %119
  %121 = trunc <8 x i32> %120 to <8 x i8>
  %122 = lshr <8 x i32> %111, <i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8>
  %123 = and <8 x i32> %122, <i32 240, i32 240, i32 240, i32 240, i32 240, i32 240, i32 240, i32 240>
  %124 = lshr <8 x i32> %111, <i32 12, i32 12, i32 12, i32 12, i32 12, i32 12, i32 12, i32 12>
  %125 = or <8 x i32> %123, %124
  %126 = trunc <8 x i32> %125 to <8 x i8>
  %127 = and <8 x i32> %111, <i32 15, i32 15, i32 15, i32 15, i32 15, i32 15, i32 15, i32 15>
  %128 = shl nuw nsw <8 x i32> %111, <i32 4, i32 4, i32 4, i32 4, i32 4, i32 4, i32 4, i32 4>
  %129 = or <8 x i32> %128, %127
  %130 = trunc <8 x i32> %129 to <8 x i8>
  %131 = or i64 %116, 3
  %132 = getelementptr inbounds i8, i8* %105, i64 %131
  %133 = bitcast i8* %132 to <32 x i8>*
  %134 = shufflevector <8 x i8> %115, <8 x i8> %121, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %135 = shufflevector <8 x i8> %126, <8 x i8> %130, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %136 = shufflevector <16 x i8> %134, <16 x i8> %135, <32 x i32> <i32 0, i32 8, i32 16, i32 24, i32 1, i32 9, i32 17, i32 25, i32 2, i32 10, i32 18, i32 26, i32 3, i32 11, i32 19, i32 27, i32 4, i32 12, i32 20, i32 28, i32 5, i32 13, i32 21, i32 29, i32 6, i32 14, i32 22, i32 30, i32 7, i32 15, i32 23, i32 31>
  store <32 x i8> %136, <32 x i8>* %133, align 1
  %137 = add i64 %107, 8
  %138 = icmp eq i64 %137, %30
  br i1 %138, label %139, label %106, !llvm.loop !113

139:                                              ; preds = %106
  br i1 %31, label %140, label %82

140:                                              ; preds = %143, %139, %51
  %141 = add nuw i64 %52, 1
  %142 = icmp eq i64 %141, %1
  br i1 %142, label %48, label %51

143:                                              ; preds = %82, %143
  %144 = phi i64 [ %174, %143 ], [ %83, %82 ]
  %145 = getelementptr inbounds i16, i16* %78, i64 %144
  %146 = load i16, i16* %145, align 2
  %147 = zext i16 %146 to i32
  %148 = and i32 %147, 240
  %149 = lshr exact i32 %148, 4
  %150 = or i32 %149, %148
  %151 = trunc i32 %150 to i8
  %152 = shl i64 %144, 2
  %153 = getelementptr inbounds i8, i8* %80, i64 %152
  store i8 %151, i8* %153, align 1
  %154 = and i32 %147, 3840
  %155 = lshr exact i32 %154, 4
  %156 = lshr exact i32 %154, 8
  %157 = or i32 %155, %156
  %158 = trunc i32 %157 to i8
  %159 = or i64 %152, 1
  %160 = getelementptr inbounds i8, i8* %80, i64 %159
  store i8 %158, i8* %160, align 1
  %161 = lshr i32 %147, 8
  %162 = and i32 %161, 240
  %163 = lshr i32 %147, 12
  %164 = or i32 %162, %163
  %165 = trunc i32 %164 to i8
  %166 = or i64 %152, 2
  %167 = getelementptr inbounds i8, i8* %80, i64 %166
  store i8 %165, i8* %167, align 1
  %168 = and i32 %147, 15
  %169 = shl nuw nsw i32 %147, 4
  %170 = or i32 %169, %168
  %171 = trunc i32 %170 to i8
  %172 = or i64 %152, 3
  %173 = getelementptr inbounds i8, i8* %80, i64 %172
  store i8 %171, i8* %173, align 1
  %174 = add nuw i64 %144, 1
  %175 = icmp eq i64 %174, %0
  br i1 %175, label %140, label %143, !llvm.loop !114
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @_ZN5angle16LoadRGBA4ToRGBA8EmmmPKhmmPhmm(i64, i64, i64, i8* nocapture readonly, i64, i64, i8* nocapture, i64, i64) local_unnamed_addr #1 {
  %10 = icmp eq i64 %2, 0
  br i1 %10, label %47, label %11

11:                                               ; preds = %9
  %12 = icmp eq i64 %1, 0
  %13 = icmp eq i64 %0, 0
  %14 = add i64 %0, -1
  %15 = shl i64 %0, 2
  %16 = shl i64 %0, 1
  %17 = icmp ult i64 %0, 8
  %18 = call { i64, i1 } @llvm.umul.with.overflow.i64(i64 %14, i64 4)
  %19 = extractvalue { i64, i1 } %18, 0
  %20 = extractvalue { i64, i1 } %18, 1
  %21 = call { i64, i1 } @llvm.umul.with.overflow.i64(i64 %14, i64 4)
  %22 = extractvalue { i64, i1 } %21, 0
  %23 = extractvalue { i64, i1 } %21, 1
  %24 = call { i64, i1 } @llvm.umul.with.overflow.i64(i64 %14, i64 4)
  %25 = extractvalue { i64, i1 } %24, 0
  %26 = extractvalue { i64, i1 } %24, 1
  %27 = call { i64, i1 } @llvm.umul.with.overflow.i64(i64 %14, i64 4)
  %28 = extractvalue { i64, i1 } %27, 0
  %29 = extractvalue { i64, i1 } %27, 1
  %30 = and i64 %0, -8
  %31 = icmp eq i64 %30, %0
  br label %32

32:                                               ; preds = %48, %11
  %33 = phi i64 [ 0, %11 ], [ %49, %48 ]
  %34 = mul i64 %33, %8
  %35 = add i64 %15, %34
  %36 = mul i64 %33, %5
  %37 = add i64 %16, %36
  %38 = mul i64 %33, %8
  %39 = add i64 %38, 2
  %40 = add i64 %38, 3
  %41 = add i64 %38, 1
  br i1 %12, label %48, label %42

42:                                               ; preds = %32
  %43 = mul i64 %33, %5
  %44 = mul i64 %33, %8
  %45 = getelementptr inbounds i8, i8* %3, i64 %43
  %46 = getelementptr inbounds i8, i8* %6, i64 %44
  br label %51

47:                                               ; preds = %48, %9
  ret void

48:                                               ; preds = %140, %32
  %49 = add nuw i64 %33, 1
  %50 = icmp eq i64 %49, %2
  br i1 %50, label %47, label %32

51:                                               ; preds = %140, %42
  %52 = phi i64 [ 0, %42 ], [ %141, %140 ]
  %53 = mul i64 %52, %7
  %54 = add i64 %34, %53
  %55 = getelementptr i8, i8* %6, i64 %54
  %56 = add i64 %35, %53
  %57 = getelementptr i8, i8* %6, i64 %56
  %58 = mul i64 %52, %4
  %59 = add i64 %36, %58
  %60 = getelementptr i8, i8* %3, i64 %59
  %61 = add i64 %37, %58
  %62 = getelementptr i8, i8* %3, i64 %61
  %63 = mul i64 %52, %7
  %64 = add i64 %39, %63
  %65 = getelementptr i8, i8* %6, i64 %64
  %66 = ptrtoint i8* %65 to i64
  %67 = add i64 %40, %63
  %68 = getelementptr i8, i8* %6, i64 %67
  %69 = ptrtoint i8* %68 to i64
  %70 = add i64 %41, %63
  %71 = getelementptr i8, i8* %6, i64 %70
  %72 = ptrtoint i8* %71 to i64
  %73 = add i64 %38, %63
  %74 = getelementptr i8, i8* %6, i64 %73
  %75 = ptrtoint i8* %74 to i64
  %76 = mul i64 %52, %4
  %77 = getelementptr inbounds i8, i8* %45, i64 %76
  %78 = bitcast i8* %77 to i16*
  %79 = mul i64 %52, %7
  %80 = getelementptr inbounds i8, i8* %46, i64 %79
  br i1 %13, label %140, label %81

81:                                               ; preds = %51
  br i1 %17, label %82, label %84

82:                                               ; preds = %139, %100, %84, %81
  %83 = phi i64 [ 0, %100 ], [ 0, %84 ], [ 0, %81 ], [ %30, %139 ]
  br label %143

84:                                               ; preds = %81
  %85 = xor i64 %66, -1
  %86 = icmp ugt i64 %19, %85
  %87 = or i1 %86, %20
  %88 = xor i64 %69, -1
  %89 = icmp ugt i64 %22, %88
  %90 = or i1 %89, %23
  %91 = or i1 %87, %90
  %92 = xor i64 %72, -1
  %93 = icmp ugt i64 %25, %92
  %94 = or i1 %93, %26
  %95 = or i1 %91, %94
  %96 = xor i64 %75, -1
  %97 = icmp ugt i64 %28, %96
  %98 = or i1 %97, %29
  %99 = or i1 %95, %98
  br i1 %99, label %82, label %100

100:                                              ; preds = %84
  %101 = icmp ult i8* %55, %62
  %102 = icmp ult i8* %60, %57
  %103 = and i1 %101, %102
  br i1 %103, label %82, label %104

104:                                              ; preds = %100
  %105 = getelementptr inbounds i8, i8* %80, i64 -3
  br label %106

106:                                              ; preds = %106, %104
  %107 = phi i64 [ 0, %104 ], [ %137, %106 ]
  %108 = getelementptr inbounds i16, i16* %78, i64 %107
  %109 = bitcast i16* %108 to <8 x i16>*
  %110 = load <8 x i16>, <8 x i16>* %109, align 2, !alias.scope !115
  %111 = zext <8 x i16> %110 to <8 x i32>
  %112 = lshr <8 x i32> %111, <i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8>
  %113 = and <8 x i32> %112, <i32 240, i32 240, i32 240, i32 240, i32 240, i32 240, i32 240, i32 240>
  %114 = lshr <8 x i32> %111, <i32 12, i32 12, i32 12, i32 12, i32 12, i32 12, i32 12, i32 12>
  %115 = or <8 x i32> %113, %114
  %116 = trunc <8 x i32> %115 to <8 x i8>
  %117 = shl i64 %107, 2
  %118 = and <8 x i32> %111, <i32 3840, i32 3840, i32 3840, i32 3840, i32 3840, i32 3840, i32 3840, i32 3840>
  %119 = lshr exact <8 x i32> %118, <i32 4, i32 4, i32 4, i32 4, i32 4, i32 4, i32 4, i32 4>
  %120 = lshr exact <8 x i32> %118, <i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8>
  %121 = or <8 x i32> %119, %120
  %122 = trunc <8 x i32> %121 to <8 x i8>
  %123 = and <8 x i32> %111, <i32 240, i32 240, i32 240, i32 240, i32 240, i32 240, i32 240, i32 240>
  %124 = lshr exact <8 x i32> %123, <i32 4, i32 4, i32 4, i32 4, i32 4, i32 4, i32 4, i32 4>
  %125 = or <8 x i32> %124, %123
  %126 = trunc <8 x i32> %125 to <8 x i8>
  %127 = and <8 x i32> %111, <i32 15, i32 15, i32 15, i32 15, i32 15, i32 15, i32 15, i32 15>
  %128 = shl nuw nsw <8 x i32> %111, <i32 4, i32 4, i32 4, i32 4, i32 4, i32 4, i32 4, i32 4>
  %129 = or <8 x i32> %128, %127
  %130 = trunc <8 x i32> %129 to <8 x i8>
  %131 = or i64 %117, 3
  %132 = getelementptr inbounds i8, i8* %105, i64 %131
  %133 = bitcast i8* %132 to <32 x i8>*
  %134 = shufflevector <8 x i8> %116, <8 x i8> %122, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %135 = shufflevector <8 x i8> %126, <8 x i8> %130, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %136 = shufflevector <16 x i8> %134, <16 x i8> %135, <32 x i32> <i32 0, i32 8, i32 16, i32 24, i32 1, i32 9, i32 17, i32 25, i32 2, i32 10, i32 18, i32 26, i32 3, i32 11, i32 19, i32 27, i32 4, i32 12, i32 20, i32 28, i32 5, i32 13, i32 21, i32 29, i32 6, i32 14, i32 22, i32 30, i32 7, i32 15, i32 23, i32 31>
  store <32 x i8> %136, <32 x i8>* %133, align 1
  %137 = add i64 %107, 8
  %138 = icmp eq i64 %137, %30
  br i1 %138, label %139, label %106, !llvm.loop !118

139:                                              ; preds = %106
  br i1 %31, label %140, label %82

140:                                              ; preds = %143, %139, %51
  %141 = add nuw i64 %52, 1
  %142 = icmp eq i64 %141, %1
  br i1 %142, label %48, label %51

143:                                              ; preds = %82, %143
  %144 = phi i64 [ %174, %143 ], [ %83, %82 ]
  %145 = getelementptr inbounds i16, i16* %78, i64 %144
  %146 = load i16, i16* %145, align 2
  %147 = zext i16 %146 to i32
  %148 = lshr i32 %147, 8
  %149 = and i32 %148, 240
  %150 = lshr i32 %147, 12
  %151 = or i32 %149, %150
  %152 = trunc i32 %151 to i8
  %153 = shl i64 %144, 2
  %154 = getelementptr inbounds i8, i8* %80, i64 %153
  store i8 %152, i8* %154, align 1
  %155 = and i32 %147, 3840
  %156 = lshr exact i32 %155, 4
  %157 = lshr exact i32 %155, 8
  %158 = or i32 %156, %157
  %159 = trunc i32 %158 to i8
  %160 = or i64 %153, 1
  %161 = getelementptr inbounds i8, i8* %80, i64 %160
  store i8 %159, i8* %161, align 1
  %162 = and i32 %147, 240
  %163 = lshr exact i32 %162, 4
  %164 = or i32 %163, %162
  %165 = trunc i32 %164 to i8
  %166 = or i64 %153, 2
  %167 = getelementptr inbounds i8, i8* %80, i64 %166
  store i8 %165, i8* %167, align 1
  %168 = and i32 %147, 15
  %169 = shl nuw nsw i32 %147, 4
  %170 = or i32 %169, %168
  %171 = trunc i32 %170 to i8
  %172 = or i64 %153, 3
  %173 = getelementptr inbounds i8, i8* %80, i64 %172
  store i8 %171, i8* %173, align 1
  %174 = add nuw i64 %144, 1
  %175 = icmp eq i64 %174, %0
  br i1 %175, label %140, label %143, !llvm.loop !119
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @_ZN5angle16LoadBGRA4ToBGRA8EmmmPKhmmPhmm(i64, i64, i64, i8* nocapture readonly, i64, i64, i8* nocapture, i64, i64) local_unnamed_addr #1 {
  %10 = icmp eq i64 %2, 0
  br i1 %10, label %47, label %11

11:                                               ; preds = %9
  %12 = icmp eq i64 %1, 0
  %13 = icmp eq i64 %0, 0
  %14 = add i64 %0, -1
  %15 = shl i64 %0, 2
  %16 = shl i64 %0, 1
  %17 = icmp ult i64 %0, 8
  %18 = call { i64, i1 } @llvm.umul.with.overflow.i64(i64 %14, i64 4)
  %19 = extractvalue { i64, i1 } %18, 0
  %20 = extractvalue { i64, i1 } %18, 1
  %21 = call { i64, i1 } @llvm.umul.with.overflow.i64(i64 %14, i64 4)
  %22 = extractvalue { i64, i1 } %21, 0
  %23 = extractvalue { i64, i1 } %21, 1
  %24 = call { i64, i1 } @llvm.umul.with.overflow.i64(i64 %14, i64 4)
  %25 = extractvalue { i64, i1 } %24, 0
  %26 = extractvalue { i64, i1 } %24, 1
  %27 = call { i64, i1 } @llvm.umul.with.overflow.i64(i64 %14, i64 4)
  %28 = extractvalue { i64, i1 } %27, 0
  %29 = extractvalue { i64, i1 } %27, 1
  %30 = and i64 %0, -8
  %31 = icmp eq i64 %30, %0
  br label %32

32:                                               ; preds = %48, %11
  %33 = phi i64 [ 0, %11 ], [ %49, %48 ]
  %34 = mul i64 %33, %8
  %35 = add i64 %15, %34
  %36 = mul i64 %33, %5
  %37 = add i64 %16, %36
  %38 = mul i64 %33, %8
  %39 = add i64 %38, 2
  %40 = add i64 %38, 3
  %41 = add i64 %38, 1
  br i1 %12, label %48, label %42

42:                                               ; preds = %32
  %43 = mul i64 %33, %5
  %44 = mul i64 %33, %8
  %45 = getelementptr inbounds i8, i8* %3, i64 %43
  %46 = getelementptr inbounds i8, i8* %6, i64 %44
  br label %51

47:                                               ; preds = %48, %9
  ret void

48:                                               ; preds = %140, %32
  %49 = add nuw i64 %33, 1
  %50 = icmp eq i64 %49, %2
  br i1 %50, label %47, label %32

51:                                               ; preds = %140, %42
  %52 = phi i64 [ 0, %42 ], [ %141, %140 ]
  %53 = mul i64 %52, %7
  %54 = add i64 %34, %53
  %55 = getelementptr i8, i8* %6, i64 %54
  %56 = add i64 %35, %53
  %57 = getelementptr i8, i8* %6, i64 %56
  %58 = mul i64 %52, %4
  %59 = add i64 %36, %58
  %60 = getelementptr i8, i8* %3, i64 %59
  %61 = add i64 %37, %58
  %62 = getelementptr i8, i8* %3, i64 %61
  %63 = mul i64 %52, %7
  %64 = add i64 %39, %63
  %65 = getelementptr i8, i8* %6, i64 %64
  %66 = ptrtoint i8* %65 to i64
  %67 = add i64 %40, %63
  %68 = getelementptr i8, i8* %6, i64 %67
  %69 = ptrtoint i8* %68 to i64
  %70 = add i64 %41, %63
  %71 = getelementptr i8, i8* %6, i64 %70
  %72 = ptrtoint i8* %71 to i64
  %73 = add i64 %38, %63
  %74 = getelementptr i8, i8* %6, i64 %73
  %75 = ptrtoint i8* %74 to i64
  %76 = mul i64 %52, %4
  %77 = getelementptr inbounds i8, i8* %45, i64 %76
  %78 = bitcast i8* %77 to i16*
  %79 = mul i64 %52, %7
  %80 = getelementptr inbounds i8, i8* %46, i64 %79
  br i1 %13, label %140, label %81

81:                                               ; preds = %51
  br i1 %17, label %82, label %84

82:                                               ; preds = %139, %100, %84, %81
  %83 = phi i64 [ 0, %100 ], [ 0, %84 ], [ 0, %81 ], [ %30, %139 ]
  br label %143

84:                                               ; preds = %81
  %85 = xor i64 %66, -1
  %86 = icmp ugt i64 %19, %85
  %87 = or i1 %86, %20
  %88 = xor i64 %69, -1
  %89 = icmp ugt i64 %22, %88
  %90 = or i1 %89, %23
  %91 = or i1 %87, %90
  %92 = xor i64 %72, -1
  %93 = icmp ugt i64 %25, %92
  %94 = or i1 %93, %26
  %95 = or i1 %91, %94
  %96 = xor i64 %75, -1
  %97 = icmp ugt i64 %28, %96
  %98 = or i1 %97, %29
  %99 = or i1 %95, %98
  br i1 %99, label %82, label %100

100:                                              ; preds = %84
  %101 = icmp ult i8* %55, %62
  %102 = icmp ult i8* %60, %57
  %103 = and i1 %101, %102
  br i1 %103, label %82, label %104

104:                                              ; preds = %100
  %105 = getelementptr inbounds i8, i8* %80, i64 -3
  br label %106

106:                                              ; preds = %106, %104
  %107 = phi i64 [ 0, %104 ], [ %137, %106 ]
  %108 = getelementptr inbounds i16, i16* %78, i64 %107
  %109 = bitcast i16* %108 to <8 x i16>*
  %110 = load <8 x i16>, <8 x i16>* %109, align 2, !alias.scope !120
  %111 = zext <8 x i16> %110 to <8 x i32>
  %112 = lshr <8 x i32> %111, <i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8>
  %113 = and <8 x i32> %112, <i32 240, i32 240, i32 240, i32 240, i32 240, i32 240, i32 240, i32 240>
  %114 = lshr <8 x i32> %111, <i32 12, i32 12, i32 12, i32 12, i32 12, i32 12, i32 12, i32 12>
  %115 = or <8 x i32> %113, %114
  %116 = trunc <8 x i32> %115 to <8 x i8>
  %117 = shl i64 %107, 2
  %118 = and <8 x i32> %111, <i32 3840, i32 3840, i32 3840, i32 3840, i32 3840, i32 3840, i32 3840, i32 3840>
  %119 = lshr exact <8 x i32> %118, <i32 4, i32 4, i32 4, i32 4, i32 4, i32 4, i32 4, i32 4>
  %120 = lshr exact <8 x i32> %118, <i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8>
  %121 = or <8 x i32> %119, %120
  %122 = trunc <8 x i32> %121 to <8 x i8>
  %123 = and <8 x i32> %111, <i32 240, i32 240, i32 240, i32 240, i32 240, i32 240, i32 240, i32 240>
  %124 = lshr exact <8 x i32> %123, <i32 4, i32 4, i32 4, i32 4, i32 4, i32 4, i32 4, i32 4>
  %125 = or <8 x i32> %124, %123
  %126 = trunc <8 x i32> %125 to <8 x i8>
  %127 = and <8 x i32> %111, <i32 15, i32 15, i32 15, i32 15, i32 15, i32 15, i32 15, i32 15>
  %128 = shl nuw nsw <8 x i32> %111, <i32 4, i32 4, i32 4, i32 4, i32 4, i32 4, i32 4, i32 4>
  %129 = or <8 x i32> %128, %127
  %130 = trunc <8 x i32> %129 to <8 x i8>
  %131 = or i64 %117, 3
  %132 = getelementptr inbounds i8, i8* %105, i64 %131
  %133 = bitcast i8* %132 to <32 x i8>*
  %134 = shufflevector <8 x i8> %116, <8 x i8> %122, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %135 = shufflevector <8 x i8> %126, <8 x i8> %130, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %136 = shufflevector <16 x i8> %134, <16 x i8> %135, <32 x i32> <i32 0, i32 8, i32 16, i32 24, i32 1, i32 9, i32 17, i32 25, i32 2, i32 10, i32 18, i32 26, i32 3, i32 11, i32 19, i32 27, i32 4, i32 12, i32 20, i32 28, i32 5, i32 13, i32 21, i32 29, i32 6, i32 14, i32 22, i32 30, i32 7, i32 15, i32 23, i32 31>
  store <32 x i8> %136, <32 x i8>* %133, align 1
  %137 = add i64 %107, 8
  %138 = icmp eq i64 %137, %30
  br i1 %138, label %139, label %106, !llvm.loop !123

139:                                              ; preds = %106
  br i1 %31, label %140, label %82

140:                                              ; preds = %143, %139, %51
  %141 = add nuw i64 %52, 1
  %142 = icmp eq i64 %141, %1
  br i1 %142, label %48, label %51

143:                                              ; preds = %82, %143
  %144 = phi i64 [ %174, %143 ], [ %83, %82 ]
  %145 = getelementptr inbounds i16, i16* %78, i64 %144
  %146 = load i16, i16* %145, align 2
  %147 = zext i16 %146 to i32
  %148 = lshr i32 %147, 8
  %149 = and i32 %148, 240
  %150 = lshr i32 %147, 12
  %151 = or i32 %149, %150
  %152 = trunc i32 %151 to i8
  %153 = shl i64 %144, 2
  %154 = getelementptr inbounds i8, i8* %80, i64 %153
  store i8 %152, i8* %154, align 1
  %155 = and i32 %147, 3840
  %156 = lshr exact i32 %155, 4
  %157 = lshr exact i32 %155, 8
  %158 = or i32 %156, %157
  %159 = trunc i32 %158 to i8
  %160 = or i64 %153, 1
  %161 = getelementptr inbounds i8, i8* %80, i64 %160
  store i8 %159, i8* %161, align 1
  %162 = and i32 %147, 240
  %163 = lshr exact i32 %162, 4
  %164 = or i32 %163, %162
  %165 = trunc i32 %164 to i8
  %166 = or i64 %153, 2
  %167 = getelementptr inbounds i8, i8* %80, i64 %166
  store i8 %165, i8* %167, align 1
  %168 = and i32 %147, 15
  %169 = shl nuw nsw i32 %147, 4
  %170 = or i32 %169, %168
  %171 = trunc i32 %170 to i8
  %172 = or i64 %153, 3
  %173 = getelementptr inbounds i8, i8* %80, i64 %172
  store i8 %171, i8* %173, align 1
  %174 = add nuw i64 %144, 1
  %175 = icmp eq i64 %174, %0
  br i1 %175, label %140, label %143, !llvm.loop !124
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @_ZN5angle17LoadRGBA8ToBGR5A1EmmmPKhmmPhmm(i64, i64, i64, i8* nocapture readonly, i64, i64, i8* nocapture, i64, i64) local_unnamed_addr #1 {
  %10 = icmp eq i64 %2, 0
  br i1 %10, label %30, label %11

11:                                               ; preds = %9
  %12 = icmp eq i64 %1, 0
  %13 = icmp eq i64 %0, 0
  %14 = shl i64 %0, 1
  %15 = shl i64 %0, 2
  %16 = icmp ult i64 %0, 8
  %17 = and i64 %0, -8
  %18 = icmp eq i64 %17, %0
  br label %19

19:                                               ; preds = %31, %11
  %20 = phi i64 [ 0, %11 ], [ %32, %31 ]
  %21 = mul i64 %20, %8
  %22 = add i64 %14, %21
  %23 = mul i64 %20, %5
  %24 = add i64 %15, %23
  br i1 %12, label %31, label %25

25:                                               ; preds = %19
  %26 = mul i64 %20, %5
  %27 = mul i64 %20, %8
  %28 = getelementptr inbounds i8, i8* %3, i64 %26
  %29 = getelementptr inbounds i8, i8* %6, i64 %27
  br label %34

30:                                               ; preds = %31, %9
  ret void

31:                                               ; preds = %98, %19
  %32 = add nuw i64 %20, 1
  %33 = icmp eq i64 %32, %2
  br i1 %33, label %30, label %19

34:                                               ; preds = %98, %25
  %35 = phi i64 [ 0, %25 ], [ %99, %98 ]
  %36 = mul i64 %35, %7
  %37 = add i64 %21, %36
  %38 = getelementptr i8, i8* %6, i64 %37
  %39 = add i64 %22, %36
  %40 = getelementptr i8, i8* %6, i64 %39
  %41 = mul i64 %35, %4
  %42 = add i64 %23, %41
  %43 = getelementptr i8, i8* %3, i64 %42
  %44 = add i64 %24, %41
  %45 = getelementptr i8, i8* %3, i64 %44
  %46 = mul i64 %35, %4
  %47 = getelementptr inbounds i8, i8* %28, i64 %46
  %48 = bitcast i8* %47 to i32*
  %49 = mul i64 %35, %7
  %50 = getelementptr inbounds i8, i8* %29, i64 %49
  %51 = bitcast i8* %50 to i16*
  br i1 %13, label %98, label %52

52:                                               ; preds = %34
  br i1 %16, label %53, label %55

53:                                               ; preds = %97, %55, %52
  %54 = phi i64 [ 0, %55 ], [ 0, %52 ], [ %17, %97 ]
  br label %101

55:                                               ; preds = %52
  %56 = icmp ult i8* %38, %45
  %57 = icmp ult i8* %43, %40
  %58 = and i1 %56, %57
  br i1 %58, label %53, label %59

59:                                               ; preds = %55, %59
  %60 = phi i64 [ %95, %59 ], [ 0, %55 ]
  %61 = getelementptr inbounds i32, i32* %48, i64 %60
  %62 = bitcast i32* %61 to <4 x i32>*
  %63 = load <4 x i32>, <4 x i32>* %62, align 4, !alias.scope !125
  %64 = getelementptr inbounds i32, i32* %61, i64 4
  %65 = bitcast i32* %64 to <4 x i32>*
  %66 = load <4 x i32>, <4 x i32>* %65, align 4, !alias.scope !125
  %67 = lshr <4 x i32> %63, <i32 19, i32 19, i32 19, i32 19>
  %68 = lshr <4 x i32> %66, <i32 19, i32 19, i32 19, i32 19>
  %69 = and <4 x i32> %67, <i32 31, i32 31, i32 31, i32 31>
  %70 = and <4 x i32> %68, <i32 31, i32 31, i32 31, i32 31>
  %71 = lshr <4 x i32> %63, <i32 31, i32 31, i32 31, i32 31>
  %72 = lshr <4 x i32> %66, <i32 31, i32 31, i32 31, i32 31>
  %73 = shl nuw nsw <4 x i32> %71, <i32 15, i32 15, i32 15, i32 15>
  %74 = shl nuw nsw <4 x i32> %72, <i32 15, i32 15, i32 15, i32 15>
  %75 = shl <4 x i32> %63, <i32 7, i32 7, i32 7, i32 7>
  %76 = shl <4 x i32> %66, <i32 7, i32 7, i32 7, i32 7>
  %77 = and <4 x i32> %75, <i32 31744, i32 31744, i32 31744, i32 31744>
  %78 = and <4 x i32> %76, <i32 31744, i32 31744, i32 31744, i32 31744>
  %79 = or <4 x i32> %73, %77
  %80 = or <4 x i32> %74, %78
  %81 = lshr <4 x i32> %63, <i32 6, i32 6, i32 6, i32 6>
  %82 = lshr <4 x i32> %66, <i32 6, i32 6, i32 6, i32 6>
  %83 = and <4 x i32> %81, <i32 992, i32 992, i32 992, i32 992>
  %84 = and <4 x i32> %82, <i32 992, i32 992, i32 992, i32 992>
  %85 = or <4 x i32> %79, %83
  %86 = or <4 x i32> %80, %84
  %87 = or <4 x i32> %85, %69
  %88 = or <4 x i32> %86, %70
  %89 = trunc <4 x i32> %87 to <4 x i16>
  %90 = trunc <4 x i32> %88 to <4 x i16>
  %91 = getelementptr inbounds i16, i16* %51, i64 %60
  %92 = bitcast i16* %91 to <4 x i16>*
  store <4 x i16> %89, <4 x i16>* %92, align 2, !alias.scope !128, !noalias !125
  %93 = getelementptr inbounds i16, i16* %91, i64 4
  %94 = bitcast i16* %93 to <4 x i16>*
  store <4 x i16> %90, <4 x i16>* %94, align 2, !alias.scope !128, !noalias !125
  %95 = add i64 %60, 8
  %96 = icmp eq i64 %95, %17
  br i1 %96, label %97, label %59, !llvm.loop !130

97:                                               ; preds = %59
  br i1 %18, label %98, label %53

98:                                               ; preds = %101, %97, %34
  %99 = add nuw i64 %35, 1
  %100 = icmp eq i64 %99, %1
  br i1 %100, label %31, label %34

101:                                              ; preds = %53, %101
  %102 = phi i64 [ %118, %101 ], [ %54, %53 ]
  %103 = getelementptr inbounds i32, i32* %48, i64 %102
  %104 = load i32, i32* %103, align 4
  %105 = lshr i32 %104, 19
  %106 = and i32 %105, 31
  %107 = lshr i32 %104, 31
  %108 = shl nuw nsw i32 %107, 15
  %109 = shl i32 %104, 7
  %110 = and i32 %109, 31744
  %111 = or i32 %108, %110
  %112 = lshr i32 %104, 6
  %113 = and i32 %112, 992
  %114 = or i32 %111, %113
  %115 = or i32 %114, %106
  %116 = trunc i32 %115 to i16
  %117 = getelementptr inbounds i16, i16* %51, i64 %102
  store i16 %116, i16* %117, align 2
  %118 = add nuw i64 %102, 1
  %119 = icmp eq i64 %118, %0
  br i1 %119, label %98, label %101, !llvm.loop !131
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @_ZN5angle17LoadRGBA8ToRGB5A1EmmmPKhmmPhmm(i64, i64, i64, i8* nocapture readonly, i64, i64, i8* nocapture, i64, i64) local_unnamed_addr #1 {
  %10 = icmp eq i64 %2, 0
  br i1 %10, label %30, label %11

11:                                               ; preds = %9
  %12 = icmp eq i64 %1, 0
  %13 = icmp eq i64 %0, 0
  %14 = shl i64 %0, 1
  %15 = shl i64 %0, 2
  %16 = icmp ult i64 %0, 8
  %17 = and i64 %0, -8
  %18 = icmp eq i64 %17, %0
  br label %19

19:                                               ; preds = %31, %11
  %20 = phi i64 [ 0, %11 ], [ %32, %31 ]
  %21 = mul i64 %20, %8
  %22 = add i64 %14, %21
  %23 = mul i64 %20, %5
  %24 = add i64 %15, %23
  br i1 %12, label %31, label %25

25:                                               ; preds = %19
  %26 = mul i64 %20, %5
  %27 = mul i64 %20, %8
  %28 = getelementptr inbounds i8, i8* %3, i64 %26
  %29 = getelementptr inbounds i8, i8* %6, i64 %27
  br label %34

30:                                               ; preds = %31, %9
  ret void

31:                                               ; preds = %96, %19
  %32 = add nuw i64 %20, 1
  %33 = icmp eq i64 %32, %2
  br i1 %33, label %30, label %19

34:                                               ; preds = %96, %25
  %35 = phi i64 [ 0, %25 ], [ %97, %96 ]
  %36 = mul i64 %35, %7
  %37 = add i64 %21, %36
  %38 = getelementptr i8, i8* %6, i64 %37
  %39 = add i64 %22, %36
  %40 = getelementptr i8, i8* %6, i64 %39
  %41 = mul i64 %35, %4
  %42 = add i64 %23, %41
  %43 = getelementptr i8, i8* %3, i64 %42
  %44 = add i64 %24, %41
  %45 = getelementptr i8, i8* %3, i64 %44
  %46 = mul i64 %35, %4
  %47 = getelementptr inbounds i8, i8* %28, i64 %46
  %48 = bitcast i8* %47 to i32*
  %49 = mul i64 %35, %7
  %50 = getelementptr inbounds i8, i8* %29, i64 %49
  %51 = bitcast i8* %50 to i16*
  br i1 %13, label %96, label %52

52:                                               ; preds = %34
  br i1 %16, label %53, label %55

53:                                               ; preds = %95, %55, %52
  %54 = phi i64 [ 0, %55 ], [ 0, %52 ], [ %17, %95 ]
  br label %99

55:                                               ; preds = %52
  %56 = icmp ult i8* %38, %45
  %57 = icmp ult i8* %43, %40
  %58 = and i1 %56, %57
  br i1 %58, label %53, label %59

59:                                               ; preds = %55, %59
  %60 = phi i64 [ %93, %59 ], [ 0, %55 ]
  %61 = getelementptr inbounds i32, i32* %48, i64 %60
  %62 = bitcast i32* %61 to <4 x i32>*
  %63 = load <4 x i32>, <4 x i32>* %62, align 4, !alias.scope !132
  %64 = getelementptr inbounds i32, i32* %61, i64 4
  %65 = bitcast i32* %64 to <4 x i32>*
  %66 = load <4 x i32>, <4 x i32>* %65, align 4, !alias.scope !132
  %67 = lshr <4 x i32> %63, <i32 31, i32 31, i32 31, i32 31>
  %68 = lshr <4 x i32> %66, <i32 31, i32 31, i32 31, i32 31>
  %69 = shl <4 x i32> %63, <i32 8, i32 8, i32 8, i32 8>
  %70 = shl <4 x i32> %66, <i32 8, i32 8, i32 8, i32 8>
  %71 = and <4 x i32> %69, <i32 63488, i32 63488, i32 63488, i32 63488>
  %72 = and <4 x i32> %70, <i32 63488, i32 63488, i32 63488, i32 63488>
  %73 = lshr <4 x i32> %63, <i32 5, i32 5, i32 5, i32 5>
  %74 = lshr <4 x i32> %66, <i32 5, i32 5, i32 5, i32 5>
  %75 = and <4 x i32> %73, <i32 1984, i32 1984, i32 1984, i32 1984>
  %76 = and <4 x i32> %74, <i32 1984, i32 1984, i32 1984, i32 1984>
  %77 = lshr <4 x i32> %63, <i32 18, i32 18, i32 18, i32 18>
  %78 = lshr <4 x i32> %66, <i32 18, i32 18, i32 18, i32 18>
  %79 = and <4 x i32> %77, <i32 62, i32 62, i32 62, i32 62>
  %80 = and <4 x i32> %78, <i32 62, i32 62, i32 62, i32 62>
  %81 = or <4 x i32> %75, %67
  %82 = or <4 x i32> %76, %68
  %83 = or <4 x i32> %81, %71
  %84 = or <4 x i32> %82, %72
  %85 = or <4 x i32> %83, %79
  %86 = or <4 x i32> %84, %80
  %87 = trunc <4 x i32> %85 to <4 x i16>
  %88 = trunc <4 x i32> %86 to <4 x i16>
  %89 = getelementptr inbounds i16, i16* %51, i64 %60
  %90 = bitcast i16* %89 to <4 x i16>*
  store <4 x i16> %87, <4 x i16>* %90, align 2, !alias.scope !135, !noalias !132
  %91 = getelementptr inbounds i16, i16* %89, i64 4
  %92 = bitcast i16* %91 to <4 x i16>*
  store <4 x i16> %88, <4 x i16>* %92, align 2, !alias.scope !135, !noalias !132
  %93 = add i64 %60, 8
  %94 = icmp eq i64 %93, %17
  br i1 %94, label %95, label %59, !llvm.loop !137

95:                                               ; preds = %59
  br i1 %18, label %96, label %53

96:                                               ; preds = %99, %95, %34
  %97 = add nuw i64 %35, 1
  %98 = icmp eq i64 %97, %1
  br i1 %98, label %31, label %34

99:                                               ; preds = %53, %99
  %100 = phi i64 [ %115, %99 ], [ %54, %53 ]
  %101 = getelementptr inbounds i32, i32* %48, i64 %100
  %102 = load i32, i32* %101, align 4
  %103 = lshr i32 %102, 31
  %104 = shl i32 %102, 8
  %105 = and i32 %104, 63488
  %106 = lshr i32 %102, 5
  %107 = and i32 %106, 1984
  %108 = lshr i32 %102, 18
  %109 = and i32 %108, 62
  %110 = or i32 %107, %103
  %111 = or i32 %110, %105
  %112 = or i32 %111, %109
  %113 = trunc i32 %112 to i16
  %114 = getelementptr inbounds i16, i16* %51, i64 %100
  store i16 %113, i16* %114, align 2
  %115 = add nuw i64 %100, 1
  %116 = icmp eq i64 %115, %0
  br i1 %116, label %96, label %99, !llvm.loop !138
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @_ZN5angle19LoadRGB10A2ToBGR5A1EmmmPKhmmPhmm(i64, i64, i64, i8* nocapture readonly, i64, i64, i8* nocapture, i64, i64) local_unnamed_addr #1 {
  %10 = icmp eq i64 %2, 0
  br i1 %10, label %30, label %11

11:                                               ; preds = %9
  %12 = icmp eq i64 %1, 0
  %13 = icmp eq i64 %0, 0
  %14 = shl i64 %0, 1
  %15 = shl i64 %0, 2
  %16 = icmp ult i64 %0, 8
  %17 = and i64 %0, -8
  %18 = icmp eq i64 %17, %0
  br label %19

19:                                               ; preds = %31, %11
  %20 = phi i64 [ 0, %11 ], [ %32, %31 ]
  %21 = mul i64 %20, %8
  %22 = add i64 %14, %21
  %23 = mul i64 %20, %5
  %24 = add i64 %15, %23
  br i1 %12, label %31, label %25

25:                                               ; preds = %19
  %26 = mul i64 %20, %5
  %27 = mul i64 %20, %8
  %28 = getelementptr inbounds i8, i8* %3, i64 %26
  %29 = getelementptr inbounds i8, i8* %6, i64 %27
  br label %34

30:                                               ; preds = %31, %9
  ret void

31:                                               ; preds = %98, %19
  %32 = add nuw i64 %20, 1
  %33 = icmp eq i64 %32, %2
  br i1 %33, label %30, label %19

34:                                               ; preds = %98, %25
  %35 = phi i64 [ 0, %25 ], [ %99, %98 ]
  %36 = mul i64 %35, %7
  %37 = add i64 %21, %36
  %38 = getelementptr i8, i8* %6, i64 %37
  %39 = add i64 %22, %36
  %40 = getelementptr i8, i8* %6, i64 %39
  %41 = mul i64 %35, %4
  %42 = add i64 %23, %41
  %43 = getelementptr i8, i8* %3, i64 %42
  %44 = add i64 %24, %41
  %45 = getelementptr i8, i8* %3, i64 %44
  %46 = mul i64 %35, %4
  %47 = getelementptr inbounds i8, i8* %28, i64 %46
  %48 = bitcast i8* %47 to %"struct.angle::R10G10B10A2"*
  %49 = mul i64 %35, %7
  %50 = getelementptr inbounds i8, i8* %29, i64 %49
  %51 = bitcast i8* %50 to i16*
  br i1 %13, label %98, label %52

52:                                               ; preds = %34
  br i1 %16, label %53, label %55

53:                                               ; preds = %97, %55, %52
  %54 = phi i64 [ 0, %55 ], [ 0, %52 ], [ %17, %97 ]
  br label %101

55:                                               ; preds = %52
  %56 = icmp ult i8* %38, %45
  %57 = icmp ult i8* %43, %40
  %58 = and i1 %56, %57
  br i1 %58, label %53, label %59

59:                                               ; preds = %55, %59
  %60 = phi i64 [ %95, %59 ], [ 0, %55 ]
  %61 = getelementptr inbounds %"struct.angle::R10G10B10A2", %"struct.angle::R10G10B10A2"* %48, i64 %60, i32 0
  %62 = bitcast i32* %61 to <4 x i32>*
  %63 = load <4 x i32>, <4 x i32>* %62, align 4, !alias.scope !139
  %64 = getelementptr inbounds i32, i32* %61, i64 4
  %65 = bitcast i32* %64 to <4 x i32>*
  %66 = load <4 x i32>, <4 x i32>* %65, align 4, !alias.scope !139
  %67 = lshr <4 x i32> %63, <i32 25, i32 25, i32 25, i32 25>
  %68 = lshr <4 x i32> %66, <i32 25, i32 25, i32 25, i32 25>
  %69 = and <4 x i32> %67, <i32 31, i32 31, i32 31, i32 31>
  %70 = and <4 x i32> %68, <i32 31, i32 31, i32 31, i32 31>
  %71 = lshr <4 x i32> %63, <i32 31, i32 31, i32 31, i32 31>
  %72 = lshr <4 x i32> %66, <i32 31, i32 31, i32 31, i32 31>
  %73 = shl nuw nsw <4 x i32> %71, <i32 15, i32 15, i32 15, i32 15>
  %74 = shl nuw nsw <4 x i32> %72, <i32 15, i32 15, i32 15, i32 15>
  %75 = shl <4 x i32> %63, <i32 5, i32 5, i32 5, i32 5>
  %76 = shl <4 x i32> %66, <i32 5, i32 5, i32 5, i32 5>
  %77 = and <4 x i32> %75, <i32 31744, i32 31744, i32 31744, i32 31744>
  %78 = and <4 x i32> %76, <i32 31744, i32 31744, i32 31744, i32 31744>
  %79 = or <4 x i32> %73, %77
  %80 = or <4 x i32> %74, %78
  %81 = lshr <4 x i32> %63, <i32 10, i32 10, i32 10, i32 10>
  %82 = lshr <4 x i32> %66, <i32 10, i32 10, i32 10, i32 10>
  %83 = and <4 x i32> %81, <i32 992, i32 992, i32 992, i32 992>
  %84 = and <4 x i32> %82, <i32 992, i32 992, i32 992, i32 992>
  %85 = or <4 x i32> %79, %83
  %86 = or <4 x i32> %80, %84
  %87 = or <4 x i32> %85, %69
  %88 = or <4 x i32> %86, %70
  %89 = trunc <4 x i32> %87 to <4 x i16>
  %90 = trunc <4 x i32> %88 to <4 x i16>
  %91 = getelementptr inbounds i16, i16* %51, i64 %60
  %92 = bitcast i16* %91 to <4 x i16>*
  store <4 x i16> %89, <4 x i16>* %92, align 2, !alias.scope !142, !noalias !139
  %93 = getelementptr inbounds i16, i16* %91, i64 4
  %94 = bitcast i16* %93 to <4 x i16>*
  store <4 x i16> %90, <4 x i16>* %94, align 2, !alias.scope !142, !noalias !139
  %95 = add i64 %60, 8
  %96 = icmp eq i64 %95, %17
  br i1 %96, label %97, label %59, !llvm.loop !144

97:                                               ; preds = %59
  br i1 %18, label %98, label %53

98:                                               ; preds = %101, %97, %34
  %99 = add nuw i64 %35, 1
  %100 = icmp eq i64 %99, %1
  br i1 %100, label %31, label %34

101:                                              ; preds = %53, %101
  %102 = phi i64 [ %118, %101 ], [ %54, %53 ]
  %103 = getelementptr inbounds %"struct.angle::R10G10B10A2", %"struct.angle::R10G10B10A2"* %48, i64 %102, i32 0
  %104 = load i32, i32* %103, align 4
  %105 = lshr i32 %104, 25
  %106 = and i32 %105, 31
  %107 = lshr i32 %104, 31
  %108 = shl nuw nsw i32 %107, 15
  %109 = shl i32 %104, 5
  %110 = and i32 %109, 31744
  %111 = or i32 %108, %110
  %112 = lshr i32 %104, 10
  %113 = and i32 %112, 992
  %114 = or i32 %111, %113
  %115 = or i32 %114, %106
  %116 = trunc i32 %115 to i16
  %117 = getelementptr inbounds i16, i16* %51, i64 %102
  store i16 %116, i16* %117, align 2
  %118 = add nuw i64 %102, 1
  %119 = icmp eq i64 %118, %0
  br i1 %119, label %98, label %101, !llvm.loop !145
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @_ZN5angle19LoadRGB10A2ToRGB5A1EmmmPKhmmPhmm(i64, i64, i64, i8* nocapture readonly, i64, i64, i8* nocapture, i64, i64) local_unnamed_addr #1 {
  %10 = icmp eq i64 %2, 0
  br i1 %10, label %30, label %11

11:                                               ; preds = %9
  %12 = icmp eq i64 %1, 0
  %13 = icmp eq i64 %0, 0
  %14 = shl i64 %0, 1
  %15 = shl i64 %0, 2
  %16 = icmp ult i64 %0, 8
  %17 = and i64 %0, -8
  %18 = icmp eq i64 %17, %0
  br label %19

19:                                               ; preds = %31, %11
  %20 = phi i64 [ 0, %11 ], [ %32, %31 ]
  %21 = mul i64 %20, %8
  %22 = add i64 %14, %21
  %23 = mul i64 %20, %5
  %24 = add i64 %15, %23
  br i1 %12, label %31, label %25

25:                                               ; preds = %19
  %26 = mul i64 %20, %5
  %27 = mul i64 %20, %8
  %28 = getelementptr inbounds i8, i8* %3, i64 %26
  %29 = getelementptr inbounds i8, i8* %6, i64 %27
  br label %34

30:                                               ; preds = %31, %9
  ret void

31:                                               ; preds = %96, %19
  %32 = add nuw i64 %20, 1
  %33 = icmp eq i64 %32, %2
  br i1 %33, label %30, label %19

34:                                               ; preds = %96, %25
  %35 = phi i64 [ 0, %25 ], [ %97, %96 ]
  %36 = mul i64 %35, %7
  %37 = add i64 %21, %36
  %38 = getelementptr i8, i8* %6, i64 %37
  %39 = add i64 %22, %36
  %40 = getelementptr i8, i8* %6, i64 %39
  %41 = mul i64 %35, %4
  %42 = add i64 %23, %41
  %43 = getelementptr i8, i8* %3, i64 %42
  %44 = add i64 %24, %41
  %45 = getelementptr i8, i8* %3, i64 %44
  %46 = mul i64 %35, %4
  %47 = getelementptr inbounds i8, i8* %28, i64 %46
  %48 = bitcast i8* %47 to %"struct.angle::R10G10B10A2"*
  %49 = mul i64 %35, %7
  %50 = getelementptr inbounds i8, i8* %29, i64 %49
  %51 = bitcast i8* %50 to i16*
  br i1 %13, label %96, label %52

52:                                               ; preds = %34
  br i1 %16, label %53, label %55

53:                                               ; preds = %95, %55, %52
  %54 = phi i64 [ 0, %55 ], [ 0, %52 ], [ %17, %95 ]
  br label %99

55:                                               ; preds = %52
  %56 = icmp ult i8* %38, %45
  %57 = icmp ult i8* %43, %40
  %58 = and i1 %56, %57
  br i1 %58, label %53, label %59

59:                                               ; preds = %55, %59
  %60 = phi i64 [ %93, %59 ], [ 0, %55 ]
  %61 = getelementptr inbounds %"struct.angle::R10G10B10A2", %"struct.angle::R10G10B10A2"* %48, i64 %60, i32 0
  %62 = bitcast i32* %61 to <4 x i32>*
  %63 = load <4 x i32>, <4 x i32>* %62, align 4, !alias.scope !146
  %64 = getelementptr inbounds i32, i32* %61, i64 4
  %65 = bitcast i32* %64 to <4 x i32>*
  %66 = load <4 x i32>, <4 x i32>* %65, align 4, !alias.scope !146
  %67 = lshr <4 x i32> %63, <i32 31, i32 31, i32 31, i32 31>
  %68 = lshr <4 x i32> %66, <i32 31, i32 31, i32 31, i32 31>
  %69 = shl <4 x i32> %63, <i32 6, i32 6, i32 6, i32 6>
  %70 = shl <4 x i32> %66, <i32 6, i32 6, i32 6, i32 6>
  %71 = and <4 x i32> %69, <i32 63488, i32 63488, i32 63488, i32 63488>
  %72 = and <4 x i32> %70, <i32 63488, i32 63488, i32 63488, i32 63488>
  %73 = lshr <4 x i32> %63, <i32 9, i32 9, i32 9, i32 9>
  %74 = lshr <4 x i32> %66, <i32 9, i32 9, i32 9, i32 9>
  %75 = and <4 x i32> %73, <i32 1984, i32 1984, i32 1984, i32 1984>
  %76 = and <4 x i32> %74, <i32 1984, i32 1984, i32 1984, i32 1984>
  %77 = lshr <4 x i32> %63, <i32 24, i32 24, i32 24, i32 24>
  %78 = lshr <4 x i32> %66, <i32 24, i32 24, i32 24, i32 24>
  %79 = and <4 x i32> %77, <i32 62, i32 62, i32 62, i32 62>
  %80 = and <4 x i32> %78, <i32 62, i32 62, i32 62, i32 62>
  %81 = or <4 x i32> %75, %67
  %82 = or <4 x i32> %76, %68
  %83 = or <4 x i32> %81, %71
  %84 = or <4 x i32> %82, %72
  %85 = or <4 x i32> %83, %79
  %86 = or <4 x i32> %84, %80
  %87 = trunc <4 x i32> %85 to <4 x i16>
  %88 = trunc <4 x i32> %86 to <4 x i16>
  %89 = getelementptr inbounds i16, i16* %51, i64 %60
  %90 = bitcast i16* %89 to <4 x i16>*
  store <4 x i16> %87, <4 x i16>* %90, align 2, !alias.scope !149, !noalias !146
  %91 = getelementptr inbounds i16, i16* %89, i64 4
  %92 = bitcast i16* %91 to <4 x i16>*
  store <4 x i16> %88, <4 x i16>* %92, align 2, !alias.scope !149, !noalias !146
  %93 = add i64 %60, 8
  %94 = icmp eq i64 %93, %17
  br i1 %94, label %95, label %59, !llvm.loop !151

95:                                               ; preds = %59
  br i1 %18, label %96, label %53

96:                                               ; preds = %99, %95, %34
  %97 = add nuw i64 %35, 1
  %98 = icmp eq i64 %97, %1
  br i1 %98, label %31, label %34

99:                                               ; preds = %53, %99
  %100 = phi i64 [ %115, %99 ], [ %54, %53 ]
  %101 = getelementptr inbounds %"struct.angle::R10G10B10A2", %"struct.angle::R10G10B10A2"* %48, i64 %100, i32 0
  %102 = load i32, i32* %101, align 4
  %103 = lshr i32 %102, 31
  %104 = shl i32 %102, 6
  %105 = and i32 %104, 63488
  %106 = lshr i32 %102, 9
  %107 = and i32 %106, 1984
  %108 = lshr i32 %102, 24
  %109 = and i32 %108, 62
  %110 = or i32 %107, %103
  %111 = or i32 %110, %105
  %112 = or i32 %111, %109
  %113 = trunc i32 %112 to i16
  %114 = getelementptr inbounds i16, i16* %51, i64 %100
  store i16 %113, i16* %114, align 2
  %115 = add nuw i64 %100, 1
  %116 = icmp eq i64 %115, %0
  br i1 %116, label %96, label %99, !llvm.loop !152
}

; Function Attrs: nofree nounwind ssp uwtable
define hidden void @_ZN5angle18LoadRGB5A1ToA1RGB5EmmmPKhmmPhmm(i64, i64, i64, i8* nocapture readonly, i64, i64, i8* nocapture, i64, i64) local_unnamed_addr #4 {
  %10 = icmp eq i64 %2, 0
  br i1 %10, label %38, label %11

11:                                               ; preds = %9
  %12 = icmp eq i64 %1, 0
  %13 = icmp eq i64 %0, 0
  %14 = shl i64 %0, 1
  %15 = add i64 %0, -16
  %16 = lshr i64 %15, 4
  %17 = add nuw nsw i64 %16, 1
  %18 = icmp ult i64 %0, 16
  %19 = and i64 %0, -16
  %20 = and i64 %17, 1
  %21 = icmp eq i64 %16, 0
  %22 = sub nuw nsw i64 %17, %20
  %23 = icmp eq i64 %20, 0
  %24 = icmp eq i64 %19, %0
  %25 = and i64 %0, 3
  %26 = icmp eq i64 %25, 0
  br label %27

27:                                               ; preds = %39, %11
  %28 = phi i64 [ 0, %11 ], [ %40, %39 ]
  %29 = mul i64 %28, %8
  %30 = add i64 %14, %29
  %31 = mul i64 %28, %5
  %32 = add i64 %14, %31
  br i1 %12, label %39, label %33

33:                                               ; preds = %27
  %34 = mul i64 %28, %5
  %35 = mul i64 %28, %8
  %36 = getelementptr inbounds i8, i8* %3, i64 %34
  %37 = getelementptr inbounds i8, i8* %6, i64 %35
  br label %42

38:                                               ; preds = %39, %9
  ret void

39:                                               ; preds = %130, %27
  %40 = add nuw i64 %28, 1
  %41 = icmp eq i64 %40, %2
  br i1 %41, label %38, label %27

42:                                               ; preds = %130, %33
  %43 = phi i64 [ 0, %33 ], [ %131, %130 ]
  %44 = mul i64 %43, %7
  %45 = add i64 %29, %44
  %46 = getelementptr i8, i8* %6, i64 %45
  %47 = add i64 %30, %44
  %48 = getelementptr i8, i8* %6, i64 %47
  %49 = mul i64 %43, %4
  %50 = add i64 %31, %49
  %51 = getelementptr i8, i8* %3, i64 %50
  %52 = add i64 %32, %49
  %53 = getelementptr i8, i8* %3, i64 %52
  %54 = mul i64 %43, %4
  %55 = getelementptr inbounds i8, i8* %36, i64 %54
  %56 = bitcast i8* %55 to i16*
  %57 = mul i64 %43, %7
  %58 = getelementptr inbounds i8, i8* %37, i64 %57
  %59 = bitcast i8* %58 to i16*
  br i1 %13, label %130, label %60

60:                                               ; preds = %42
  br i1 %18, label %61, label %78

61:                                               ; preds = %129, %78, %60
  %62 = phi i64 [ 0, %78 ], [ 0, %60 ], [ %19, %129 ]
  %63 = xor i64 %62, -1
  %64 = add i64 %63, %0
  br i1 %26, label %75, label %65

65:                                               ; preds = %61, %65
  %66 = phi i64 [ %72, %65 ], [ %62, %61 ]
  %67 = phi i64 [ %73, %65 ], [ %25, %61 ]
  %68 = getelementptr inbounds i16, i16* %56, i64 %66
  %69 = load i16, i16* %68, align 2
  %70 = tail call i16 @llvm.fshl.i16(i16 %69, i16 %69, i16 15)
  %71 = getelementptr inbounds i16, i16* %59, i64 %66
  store i16 %70, i16* %71, align 2
  %72 = add nuw i64 %66, 1
  %73 = add i64 %67, -1
  %74 = icmp eq i64 %73, 0
  br i1 %74, label %75, label %65, !llvm.loop !153

75:                                               ; preds = %65, %61
  %76 = phi i64 [ %62, %61 ], [ %72, %65 ]
  %77 = icmp ult i64 %64, 3
  br i1 %77, label %130, label %133

78:                                               ; preds = %60
  %79 = icmp ult i8* %46, %53
  %80 = icmp ult i8* %51, %48
  %81 = and i1 %79, %80
  br i1 %81, label %61, label %82

82:                                               ; preds = %78
  br i1 %21, label %114, label %83

83:                                               ; preds = %82, %83
  %84 = phi i64 [ %111, %83 ], [ 0, %82 ]
  %85 = phi i64 [ %112, %83 ], [ %22, %82 ]
  %86 = getelementptr inbounds i16, i16* %56, i64 %84
  %87 = bitcast i16* %86 to <8 x i16>*
  %88 = load <8 x i16>, <8 x i16>* %87, align 2, !alias.scope !154
  %89 = getelementptr inbounds i16, i16* %86, i64 8
  %90 = bitcast i16* %89 to <8 x i16>*
  %91 = load <8 x i16>, <8 x i16>* %90, align 2, !alias.scope !154
  %92 = call <8 x i16> @llvm.fshl.v8i16(<8 x i16> %88, <8 x i16> %88, <8 x i16> <i16 15, i16 15, i16 15, i16 15, i16 15, i16 15, i16 15, i16 15>)
  %93 = call <8 x i16> @llvm.fshl.v8i16(<8 x i16> %91, <8 x i16> %91, <8 x i16> <i16 15, i16 15, i16 15, i16 15, i16 15, i16 15, i16 15, i16 15>)
  %94 = getelementptr inbounds i16, i16* %59, i64 %84
  %95 = bitcast i16* %94 to <8 x i16>*
  store <8 x i16> %92, <8 x i16>* %95, align 2, !alias.scope !157, !noalias !154
  %96 = getelementptr inbounds i16, i16* %94, i64 8
  %97 = bitcast i16* %96 to <8 x i16>*
  store <8 x i16> %93, <8 x i16>* %97, align 2, !alias.scope !157, !noalias !154
  %98 = or i64 %84, 16
  %99 = getelementptr inbounds i16, i16* %56, i64 %98
  %100 = bitcast i16* %99 to <8 x i16>*
  %101 = load <8 x i16>, <8 x i16>* %100, align 2, !alias.scope !154
  %102 = getelementptr inbounds i16, i16* %99, i64 8
  %103 = bitcast i16* %102 to <8 x i16>*
  %104 = load <8 x i16>, <8 x i16>* %103, align 2, !alias.scope !154
  %105 = call <8 x i16> @llvm.fshl.v8i16(<8 x i16> %101, <8 x i16> %101, <8 x i16> <i16 15, i16 15, i16 15, i16 15, i16 15, i16 15, i16 15, i16 15>)
  %106 = call <8 x i16> @llvm.fshl.v8i16(<8 x i16> %104, <8 x i16> %104, <8 x i16> <i16 15, i16 15, i16 15, i16 15, i16 15, i16 15, i16 15, i16 15>)
  %107 = getelementptr inbounds i16, i16* %59, i64 %98
  %108 = bitcast i16* %107 to <8 x i16>*
  store <8 x i16> %105, <8 x i16>* %108, align 2, !alias.scope !157, !noalias !154
  %109 = getelementptr inbounds i16, i16* %107, i64 8
  %110 = bitcast i16* %109 to <8 x i16>*
  store <8 x i16> %106, <8 x i16>* %110, align 2, !alias.scope !157, !noalias !154
  %111 = add i64 %84, 32
  %112 = add i64 %85, -2
  %113 = icmp eq i64 %112, 0
  br i1 %113, label %114, label %83, !llvm.loop !159

114:                                              ; preds = %83, %82
  %115 = phi i64 [ 0, %82 ], [ %111, %83 ]
  br i1 %23, label %129, label %116

116:                                              ; preds = %114
  %117 = getelementptr inbounds i16, i16* %56, i64 %115
  %118 = bitcast i16* %117 to <8 x i16>*
  %119 = load <8 x i16>, <8 x i16>* %118, align 2, !alias.scope !154
  %120 = getelementptr inbounds i16, i16* %117, i64 8
  %121 = bitcast i16* %120 to <8 x i16>*
  %122 = load <8 x i16>, <8 x i16>* %121, align 2, !alias.scope !154
  %123 = call <8 x i16> @llvm.fshl.v8i16(<8 x i16> %119, <8 x i16> %119, <8 x i16> <i16 15, i16 15, i16 15, i16 15, i16 15, i16 15, i16 15, i16 15>)
  %124 = call <8 x i16> @llvm.fshl.v8i16(<8 x i16> %122, <8 x i16> %122, <8 x i16> <i16 15, i16 15, i16 15, i16 15, i16 15, i16 15, i16 15, i16 15>)
  %125 = getelementptr inbounds i16, i16* %59, i64 %115
  %126 = bitcast i16* %125 to <8 x i16>*
  store <8 x i16> %123, <8 x i16>* %126, align 2, !alias.scope !157, !noalias !154
  %127 = getelementptr inbounds i16, i16* %125, i64 8
  %128 = bitcast i16* %127 to <8 x i16>*
  store <8 x i16> %124, <8 x i16>* %128, align 2, !alias.scope !157, !noalias !154
  br label %129

129:                                              ; preds = %114, %116
  br i1 %24, label %130, label %61

130:                                              ; preds = %75, %133, %129, %42
  %131 = add nuw i64 %43, 1
  %132 = icmp eq i64 %131, %1
  br i1 %132, label %39, label %42

133:                                              ; preds = %75, %133
  %134 = phi i64 [ %154, %133 ], [ %76, %75 ]
  %135 = getelementptr inbounds i16, i16* %56, i64 %134
  %136 = load i16, i16* %135, align 2
  %137 = tail call i16 @llvm.fshl.i16(i16 %136, i16 %136, i16 15)
  %138 = getelementptr inbounds i16, i16* %59, i64 %134
  store i16 %137, i16* %138, align 2
  %139 = add nuw i64 %134, 1
  %140 = getelementptr inbounds i16, i16* %56, i64 %139
  %141 = load i16, i16* %140, align 2
  %142 = tail call i16 @llvm.fshl.i16(i16 %141, i16 %141, i16 15)
  %143 = getelementptr inbounds i16, i16* %59, i64 %139
  store i16 %142, i16* %143, align 2
  %144 = add nuw i64 %134, 2
  %145 = getelementptr inbounds i16, i16* %56, i64 %144
  %146 = load i16, i16* %145, align 2
  %147 = tail call i16 @llvm.fshl.i16(i16 %146, i16 %146, i16 15)
  %148 = getelementptr inbounds i16, i16* %59, i64 %144
  store i16 %147, i16* %148, align 2
  %149 = add nuw i64 %134, 3
  %150 = getelementptr inbounds i16, i16* %56, i64 %149
  %151 = load i16, i16* %150, align 2
  %152 = tail call i16 @llvm.fshl.i16(i16 %151, i16 %151, i16 15)
  %153 = getelementptr inbounds i16, i16* %59, i64 %149
  store i16 %152, i16* %153, align 2
  %154 = add nuw i64 %134, 4
  %155 = icmp eq i64 %154, %0
  br i1 %155, label %130, label %133, !llvm.loop !160
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @_ZN5angle18LoadRGB5A1ToBGR5A1EmmmPKhmmPhmm(i64, i64, i64, i8* nocapture readonly, i64, i64, i8* nocapture, i64, i64) local_unnamed_addr #1 {
  %10 = icmp eq i64 %2, 0
  br i1 %10, label %32, label %11

11:                                               ; preds = %9
  %12 = icmp eq i64 %1, 0
  %13 = icmp eq i64 %0, 0
  %14 = shl i64 %0, 1
  %15 = icmp ult i64 %0, 16
  %16 = and i64 %0, -16
  %17 = icmp eq i64 %16, %0
  %18 = and i64 %0, 1
  %19 = icmp eq i64 %18, 0
  %20 = sub i64 0, %0
  br label %21

21:                                               ; preds = %33, %11
  %22 = phi i64 [ 0, %11 ], [ %34, %33 ]
  %23 = mul i64 %22, %8
  %24 = add i64 %14, %23
  %25 = mul i64 %22, %5
  %26 = add i64 %14, %25
  br i1 %12, label %33, label %27

27:                                               ; preds = %21
  %28 = mul i64 %22, %5
  %29 = mul i64 %22, %8
  %30 = getelementptr inbounds i8, i8* %3, i64 %28
  %31 = getelementptr inbounds i8, i8* %6, i64 %29
  br label %36

32:                                               ; preds = %33, %9
  ret void

33:                                               ; preds = %106, %21
  %34 = add nuw i64 %22, 1
  %35 = icmp eq i64 %34, %2
  br i1 %35, label %32, label %21

36:                                               ; preds = %106, %27
  %37 = phi i64 [ 0, %27 ], [ %107, %106 ]
  %38 = mul i64 %37, %7
  %39 = add i64 %23, %38
  %40 = getelementptr i8, i8* %6, i64 %39
  %41 = add i64 %24, %38
  %42 = getelementptr i8, i8* %6, i64 %41
  %43 = mul i64 %37, %4
  %44 = add i64 %25, %43
  %45 = getelementptr i8, i8* %3, i64 %44
  %46 = add i64 %26, %43
  %47 = getelementptr i8, i8* %3, i64 %46
  %48 = mul i64 %37, %4
  %49 = getelementptr inbounds i8, i8* %30, i64 %48
  %50 = bitcast i8* %49 to i16*
  %51 = mul i64 %37, %7
  %52 = getelementptr inbounds i8, i8* %31, i64 %51
  %53 = bitcast i8* %52 to i16*
  br i1 %13, label %106, label %54

54:                                               ; preds = %36
  br i1 %15, label %55, label %73

55:                                               ; preds = %105, %73, %54
  %56 = phi i64 [ 0, %73 ], [ 0, %54 ], [ %16, %105 ]
  %57 = xor i64 %56, -1
  br i1 %19, label %70, label %58

58:                                               ; preds = %55
  %59 = getelementptr inbounds i16, i16* %50, i64 %56
  %60 = load i16, i16* %59, align 2
  %61 = lshr i16 %60, 11
  %62 = lshr i16 %60, 1
  %63 = shl i16 %62, 11
  %64 = shl nuw nsw i16 %61, 1
  %65 = and i16 %60, 1985
  %66 = or i16 %65, %63
  %67 = or i16 %66, %64
  %68 = getelementptr inbounds i16, i16* %53, i64 %56
  store i16 %67, i16* %68, align 2
  %69 = or i64 %56, 1
  br label %70

70:                                               ; preds = %58, %55
  %71 = phi i64 [ %69, %58 ], [ %56, %55 ]
  %72 = icmp eq i64 %57, %20
  br i1 %72, label %106, label %109

73:                                               ; preds = %54
  %74 = icmp ult i8* %40, %47
  %75 = icmp ult i8* %45, %42
  %76 = and i1 %74, %75
  br i1 %76, label %55, label %77

77:                                               ; preds = %73, %77
  %78 = phi i64 [ %103, %77 ], [ 0, %73 ]
  %79 = getelementptr inbounds i16, i16* %50, i64 %78
  %80 = bitcast i16* %79 to <8 x i16>*
  %81 = load <8 x i16>, <8 x i16>* %80, align 2, !alias.scope !161
  %82 = getelementptr inbounds i16, i16* %79, i64 8
  %83 = bitcast i16* %82 to <8 x i16>*
  %84 = load <8 x i16>, <8 x i16>* %83, align 2, !alias.scope !161
  %85 = lshr <8 x i16> %81, <i16 11, i16 11, i16 11, i16 11, i16 11, i16 11, i16 11, i16 11>
  %86 = lshr <8 x i16> %84, <i16 11, i16 11, i16 11, i16 11, i16 11, i16 11, i16 11, i16 11>
  %87 = lshr <8 x i16> %81, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %88 = lshr <8 x i16> %84, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %89 = shl <8 x i16> %87, <i16 11, i16 11, i16 11, i16 11, i16 11, i16 11, i16 11, i16 11>
  %90 = shl <8 x i16> %88, <i16 11, i16 11, i16 11, i16 11, i16 11, i16 11, i16 11, i16 11>
  %91 = shl nuw nsw <8 x i16> %85, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %92 = shl nuw nsw <8 x i16> %86, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %93 = and <8 x i16> %81, <i16 1985, i16 1985, i16 1985, i16 1985, i16 1985, i16 1985, i16 1985, i16 1985>
  %94 = and <8 x i16> %84, <i16 1985, i16 1985, i16 1985, i16 1985, i16 1985, i16 1985, i16 1985, i16 1985>
  %95 = or <8 x i16> %93, %89
  %96 = or <8 x i16> %94, %90
  %97 = or <8 x i16> %95, %91
  %98 = or <8 x i16> %96, %92
  %99 = getelementptr inbounds i16, i16* %53, i64 %78
  %100 = bitcast i16* %99 to <8 x i16>*
  store <8 x i16> %97, <8 x i16>* %100, align 2, !alias.scope !164, !noalias !161
  %101 = getelementptr inbounds i16, i16* %99, i64 8
  %102 = bitcast i16* %101 to <8 x i16>*
  store <8 x i16> %98, <8 x i16>* %102, align 2, !alias.scope !164, !noalias !161
  %103 = add i64 %78, 16
  %104 = icmp eq i64 %103, %16
  br i1 %104, label %105, label %77, !llvm.loop !166

105:                                              ; preds = %77
  br i1 %17, label %106, label %55

106:                                              ; preds = %70, %109, %105, %36
  %107 = add nuw i64 %37, 1
  %108 = icmp eq i64 %107, %1
  br i1 %108, label %33, label %36

109:                                              ; preds = %70, %109
  %110 = phi i64 [ %132, %109 ], [ %71, %70 ]
  %111 = getelementptr inbounds i16, i16* %50, i64 %110
  %112 = load i16, i16* %111, align 2
  %113 = lshr i16 %112, 11
  %114 = lshr i16 %112, 1
  %115 = shl i16 %114, 11
  %116 = shl nuw nsw i16 %113, 1
  %117 = and i16 %112, 1985
  %118 = or i16 %117, %115
  %119 = or i16 %118, %116
  %120 = getelementptr inbounds i16, i16* %53, i64 %110
  store i16 %119, i16* %120, align 2
  %121 = add nuw i64 %110, 1
  %122 = getelementptr inbounds i16, i16* %50, i64 %121
  %123 = load i16, i16* %122, align 2
  %124 = lshr i16 %123, 11
  %125 = lshr i16 %123, 1
  %126 = shl i16 %125, 11
  %127 = shl nuw nsw i16 %124, 1
  %128 = and i16 %123, 1985
  %129 = or i16 %128, %126
  %130 = or i16 %129, %127
  %131 = getelementptr inbounds i16, i16* %53, i64 %121
  store i16 %130, i16* %131, align 2
  %132 = add nuw i64 %110, 2
  %133 = icmp eq i64 %132, %0
  br i1 %133, label %106, label %109, !llvm.loop !167
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @_ZN5angle17LoadRGB5A1ToBGRA8EmmmPKhmmPhmm(i64, i64, i64, i8* nocapture readonly, i64, i64, i8* nocapture, i64, i64) local_unnamed_addr #1 {
  %10 = icmp eq i64 %2, 0
  br i1 %10, label %47, label %11

11:                                               ; preds = %9
  %12 = icmp eq i64 %1, 0
  %13 = icmp eq i64 %0, 0
  %14 = add i64 %0, -1
  %15 = shl i64 %0, 2
  %16 = shl i64 %0, 1
  %17 = icmp ult i64 %0, 8
  %18 = call { i64, i1 } @llvm.umul.with.overflow.i64(i64 %14, i64 4)
  %19 = extractvalue { i64, i1 } %18, 0
  %20 = extractvalue { i64, i1 } %18, 1
  %21 = call { i64, i1 } @llvm.umul.with.overflow.i64(i64 %14, i64 4)
  %22 = extractvalue { i64, i1 } %21, 0
  %23 = extractvalue { i64, i1 } %21, 1
  %24 = call { i64, i1 } @llvm.umul.with.overflow.i64(i64 %14, i64 4)
  %25 = extractvalue { i64, i1 } %24, 0
  %26 = extractvalue { i64, i1 } %24, 1
  %27 = call { i64, i1 } @llvm.umul.with.overflow.i64(i64 %14, i64 4)
  %28 = extractvalue { i64, i1 } %27, 0
  %29 = extractvalue { i64, i1 } %27, 1
  %30 = and i64 %0, -8
  %31 = icmp eq i64 %30, %0
  br label %32

32:                                               ; preds = %48, %11
  %33 = phi i64 [ 0, %11 ], [ %49, %48 ]
  %34 = mul i64 %33, %8
  %35 = add i64 %15, %34
  %36 = mul i64 %33, %5
  %37 = add i64 %16, %36
  %38 = mul i64 %33, %8
  %39 = add i64 %38, 2
  %40 = add i64 %38, 3
  %41 = add i64 %38, 1
  br i1 %12, label %48, label %42

42:                                               ; preds = %32
  %43 = mul i64 %33, %5
  %44 = mul i64 %33, %8
  %45 = getelementptr inbounds i8, i8* %3, i64 %43
  %46 = getelementptr inbounds i8, i8* %6, i64 %44
  br label %51

47:                                               ; preds = %48, %9
  ret void

48:                                               ; preds = %140, %32
  %49 = add nuw i64 %33, 1
  %50 = icmp eq i64 %49, %2
  br i1 %50, label %47, label %32

51:                                               ; preds = %140, %42
  %52 = phi i64 [ 0, %42 ], [ %141, %140 ]
  %53 = mul i64 %52, %7
  %54 = add i64 %34, %53
  %55 = getelementptr i8, i8* %6, i64 %54
  %56 = add i64 %35, %53
  %57 = getelementptr i8, i8* %6, i64 %56
  %58 = mul i64 %52, %4
  %59 = add i64 %36, %58
  %60 = getelementptr i8, i8* %3, i64 %59
  %61 = add i64 %37, %58
  %62 = getelementptr i8, i8* %3, i64 %61
  %63 = mul i64 %52, %7
  %64 = add i64 %39, %63
  %65 = getelementptr i8, i8* %6, i64 %64
  %66 = ptrtoint i8* %65 to i64
  %67 = add i64 %40, %63
  %68 = getelementptr i8, i8* %6, i64 %67
  %69 = ptrtoint i8* %68 to i64
  %70 = add i64 %41, %63
  %71 = getelementptr i8, i8* %6, i64 %70
  %72 = ptrtoint i8* %71 to i64
  %73 = add i64 %38, %63
  %74 = getelementptr i8, i8* %6, i64 %73
  %75 = ptrtoint i8* %74 to i64
  %76 = mul i64 %52, %4
  %77 = getelementptr inbounds i8, i8* %45, i64 %76
  %78 = bitcast i8* %77 to i16*
  %79 = mul i64 %52, %7
  %80 = getelementptr inbounds i8, i8* %46, i64 %79
  br i1 %13, label %140, label %81

81:                                               ; preds = %51
  br i1 %17, label %82, label %84

82:                                               ; preds = %139, %100, %84, %81
  %83 = phi i64 [ 0, %100 ], [ 0, %84 ], [ 0, %81 ], [ %30, %139 ]
  br label %143

84:                                               ; preds = %81
  %85 = xor i64 %66, -1
  %86 = icmp ugt i64 %19, %85
  %87 = or i1 %86, %20
  %88 = xor i64 %69, -1
  %89 = icmp ugt i64 %22, %88
  %90 = or i1 %89, %23
  %91 = or i1 %87, %90
  %92 = xor i64 %72, -1
  %93 = icmp ugt i64 %25, %92
  %94 = or i1 %93, %26
  %95 = or i1 %91, %94
  %96 = xor i64 %75, -1
  %97 = icmp ugt i64 %28, %96
  %98 = or i1 %97, %29
  %99 = or i1 %95, %98
  br i1 %99, label %82, label %100

100:                                              ; preds = %84
  %101 = icmp ult i8* %55, %62
  %102 = icmp ult i8* %60, %57
  %103 = and i1 %101, %102
  br i1 %103, label %82, label %104

104:                                              ; preds = %100
  %105 = getelementptr inbounds i8, i8* %80, i64 -3
  br label %106

106:                                              ; preds = %106, %104
  %107 = phi i64 [ 0, %104 ], [ %137, %106 ]
  %108 = getelementptr inbounds i16, i16* %78, i64 %107
  %109 = bitcast i16* %108 to <8 x i16>*
  %110 = load <8 x i16>, <8 x i16>* %109, align 2, !alias.scope !168
  %111 = zext <8 x i16> %110 to <8 x i32>
  %112 = and <8 x i32> %111, <i32 62, i32 62, i32 62, i32 62, i32 62, i32 62, i32 62, i32 62>
  %113 = shl nuw nsw <8 x i32> %112, <i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2>
  %114 = lshr <8 x i32> %112, <i32 3, i32 3, i32 3, i32 3, i32 3, i32 3, i32 3, i32 3>
  %115 = or <8 x i32> %113, %114
  %116 = trunc <8 x i32> %115 to <8 x i8>
  %117 = shl i64 %107, 2
  %118 = and <8 x i32> %111, <i32 1984, i32 1984, i32 1984, i32 1984, i32 1984, i32 1984, i32 1984, i32 1984>
  %119 = lshr exact <8 x i32> %118, <i32 3, i32 3, i32 3, i32 3, i32 3, i32 3, i32 3, i32 3>
  %120 = lshr <8 x i32> %118, <i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8>
  %121 = or <8 x i32> %119, %120
  %122 = trunc <8 x i32> %121 to <8 x i8>
  %123 = lshr <8 x i32> %111, <i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8>
  %124 = and <8 x i32> %123, <i32 248, i32 248, i32 248, i32 248, i32 248, i32 248, i32 248, i32 248>
  %125 = lshr <8 x i32> %111, <i32 13, i32 13, i32 13, i32 13, i32 13, i32 13, i32 13, i32 13>
  %126 = or <8 x i32> %124, %125
  %127 = trunc <8 x i32> %126 to <8 x i8>
  %128 = shl <8 x i32> %111, <i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31>
  %129 = ashr exact <8 x i32> %128, <i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31>
  %130 = trunc <8 x i32> %129 to <8 x i8>
  %131 = or i64 %117, 3
  %132 = getelementptr inbounds i8, i8* %105, i64 %131
  %133 = bitcast i8* %132 to <32 x i8>*
  %134 = shufflevector <8 x i8> %116, <8 x i8> %122, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %135 = shufflevector <8 x i8> %127, <8 x i8> %130, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %136 = shufflevector <16 x i8> %134, <16 x i8> %135, <32 x i32> <i32 0, i32 8, i32 16, i32 24, i32 1, i32 9, i32 17, i32 25, i32 2, i32 10, i32 18, i32 26, i32 3, i32 11, i32 19, i32 27, i32 4, i32 12, i32 20, i32 28, i32 5, i32 13, i32 21, i32 29, i32 6, i32 14, i32 22, i32 30, i32 7, i32 15, i32 23, i32 31>
  store <32 x i8> %136, <32 x i8>* %133, align 1
  %137 = add i64 %107, 8
  %138 = icmp eq i64 %137, %30
  br i1 %138, label %139, label %106, !llvm.loop !171

139:                                              ; preds = %106
  br i1 %31, label %140, label %82

140:                                              ; preds = %143, %139, %51
  %141 = add nuw i64 %52, 1
  %142 = icmp eq i64 %141, %1
  br i1 %142, label %48, label %51

143:                                              ; preds = %82, %143
  %144 = phi i64 [ %174, %143 ], [ %83, %82 ]
  %145 = getelementptr inbounds i16, i16* %78, i64 %144
  %146 = load i16, i16* %145, align 2
  %147 = zext i16 %146 to i32
  %148 = and i32 %147, 62
  %149 = shl nuw nsw i32 %148, 2
  %150 = lshr i32 %148, 3
  %151 = or i32 %149, %150
  %152 = trunc i32 %151 to i8
  %153 = shl i64 %144, 2
  %154 = getelementptr inbounds i8, i8* %80, i64 %153
  store i8 %152, i8* %154, align 1
  %155 = and i32 %147, 1984
  %156 = lshr exact i32 %155, 3
  %157 = lshr i32 %155, 8
  %158 = or i32 %156, %157
  %159 = trunc i32 %158 to i8
  %160 = or i64 %153, 1
  %161 = getelementptr inbounds i8, i8* %80, i64 %160
  store i8 %159, i8* %161, align 1
  %162 = lshr i32 %147, 8
  %163 = and i32 %162, 248
  %164 = lshr i32 %147, 13
  %165 = or i32 %163, %164
  %166 = trunc i32 %165 to i8
  %167 = or i64 %153, 2
  %168 = getelementptr inbounds i8, i8* %80, i64 %167
  store i8 %166, i8* %168, align 1
  %169 = shl i32 %147, 31
  %170 = ashr exact i32 %169, 31
  %171 = trunc i32 %170 to i8
  %172 = or i64 %153, 3
  %173 = getelementptr inbounds i8, i8* %80, i64 %172
  store i8 %171, i8* %173, align 1
  %174 = add nuw i64 %144, 1
  %175 = icmp eq i64 %174, %0
  br i1 %175, label %140, label %143, !llvm.loop !172
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @_ZN5angle17LoadRGB5A1ToRGBA8EmmmPKhmmPhmm(i64, i64, i64, i8* nocapture readonly, i64, i64, i8* nocapture, i64, i64) local_unnamed_addr #1 {
  %10 = icmp eq i64 %2, 0
  br i1 %10, label %47, label %11

11:                                               ; preds = %9
  %12 = icmp eq i64 %1, 0
  %13 = icmp eq i64 %0, 0
  %14 = add i64 %0, -1
  %15 = shl i64 %0, 2
  %16 = shl i64 %0, 1
  %17 = icmp ult i64 %0, 8
  %18 = call { i64, i1 } @llvm.umul.with.overflow.i64(i64 %14, i64 4)
  %19 = extractvalue { i64, i1 } %18, 0
  %20 = extractvalue { i64, i1 } %18, 1
  %21 = call { i64, i1 } @llvm.umul.with.overflow.i64(i64 %14, i64 4)
  %22 = extractvalue { i64, i1 } %21, 0
  %23 = extractvalue { i64, i1 } %21, 1
  %24 = call { i64, i1 } @llvm.umul.with.overflow.i64(i64 %14, i64 4)
  %25 = extractvalue { i64, i1 } %24, 0
  %26 = extractvalue { i64, i1 } %24, 1
  %27 = call { i64, i1 } @llvm.umul.with.overflow.i64(i64 %14, i64 4)
  %28 = extractvalue { i64, i1 } %27, 0
  %29 = extractvalue { i64, i1 } %27, 1
  %30 = and i64 %0, -8
  %31 = icmp eq i64 %30, %0
  br label %32

32:                                               ; preds = %48, %11
  %33 = phi i64 [ 0, %11 ], [ %49, %48 ]
  %34 = mul i64 %33, %8
  %35 = add i64 %15, %34
  %36 = mul i64 %33, %5
  %37 = add i64 %16, %36
  %38 = mul i64 %33, %8
  %39 = add i64 %38, 2
  %40 = add i64 %38, 3
  %41 = add i64 %38, 1
  br i1 %12, label %48, label %42

42:                                               ; preds = %32
  %43 = mul i64 %33, %5
  %44 = mul i64 %33, %8
  %45 = getelementptr inbounds i8, i8* %3, i64 %43
  %46 = getelementptr inbounds i8, i8* %6, i64 %44
  br label %51

47:                                               ; preds = %48, %9
  ret void

48:                                               ; preds = %140, %32
  %49 = add nuw i64 %33, 1
  %50 = icmp eq i64 %49, %2
  br i1 %50, label %47, label %32

51:                                               ; preds = %140, %42
  %52 = phi i64 [ 0, %42 ], [ %141, %140 ]
  %53 = mul i64 %52, %7
  %54 = add i64 %34, %53
  %55 = getelementptr i8, i8* %6, i64 %54
  %56 = add i64 %35, %53
  %57 = getelementptr i8, i8* %6, i64 %56
  %58 = mul i64 %52, %4
  %59 = add i64 %36, %58
  %60 = getelementptr i8, i8* %3, i64 %59
  %61 = add i64 %37, %58
  %62 = getelementptr i8, i8* %3, i64 %61
  %63 = mul i64 %52, %7
  %64 = add i64 %39, %63
  %65 = getelementptr i8, i8* %6, i64 %64
  %66 = ptrtoint i8* %65 to i64
  %67 = add i64 %40, %63
  %68 = getelementptr i8, i8* %6, i64 %67
  %69 = ptrtoint i8* %68 to i64
  %70 = add i64 %41, %63
  %71 = getelementptr i8, i8* %6, i64 %70
  %72 = ptrtoint i8* %71 to i64
  %73 = add i64 %38, %63
  %74 = getelementptr i8, i8* %6, i64 %73
  %75 = ptrtoint i8* %74 to i64
  %76 = mul i64 %52, %4
  %77 = getelementptr inbounds i8, i8* %45, i64 %76
  %78 = bitcast i8* %77 to i16*
  %79 = mul i64 %52, %7
  %80 = getelementptr inbounds i8, i8* %46, i64 %79
  br i1 %13, label %140, label %81

81:                                               ; preds = %51
  br i1 %17, label %82, label %84

82:                                               ; preds = %139, %100, %84, %81
  %83 = phi i64 [ 0, %100 ], [ 0, %84 ], [ 0, %81 ], [ %30, %139 ]
  br label %143

84:                                               ; preds = %81
  %85 = xor i64 %66, -1
  %86 = icmp ugt i64 %19, %85
  %87 = or i1 %86, %20
  %88 = xor i64 %69, -1
  %89 = icmp ugt i64 %22, %88
  %90 = or i1 %89, %23
  %91 = or i1 %87, %90
  %92 = xor i64 %72, -1
  %93 = icmp ugt i64 %25, %92
  %94 = or i1 %93, %26
  %95 = or i1 %91, %94
  %96 = xor i64 %75, -1
  %97 = icmp ugt i64 %28, %96
  %98 = or i1 %97, %29
  %99 = or i1 %95, %98
  br i1 %99, label %82, label %100

100:                                              ; preds = %84
  %101 = icmp ult i8* %55, %62
  %102 = icmp ult i8* %60, %57
  %103 = and i1 %101, %102
  br i1 %103, label %82, label %104

104:                                              ; preds = %100
  %105 = getelementptr inbounds i8, i8* %80, i64 -3
  br label %106

106:                                              ; preds = %106, %104
  %107 = phi i64 [ 0, %104 ], [ %137, %106 ]
  %108 = getelementptr inbounds i16, i16* %78, i64 %107
  %109 = bitcast i16* %108 to <8 x i16>*
  %110 = load <8 x i16>, <8 x i16>* %109, align 2, !alias.scope !173
  %111 = zext <8 x i16> %110 to <8 x i32>
  %112 = lshr <8 x i32> %111, <i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8>
  %113 = and <8 x i32> %112, <i32 248, i32 248, i32 248, i32 248, i32 248, i32 248, i32 248, i32 248>
  %114 = lshr <8 x i32> %111, <i32 13, i32 13, i32 13, i32 13, i32 13, i32 13, i32 13, i32 13>
  %115 = or <8 x i32> %113, %114
  %116 = trunc <8 x i32> %115 to <8 x i8>
  %117 = shl i64 %107, 2
  %118 = and <8 x i32> %111, <i32 1984, i32 1984, i32 1984, i32 1984, i32 1984, i32 1984, i32 1984, i32 1984>
  %119 = lshr exact <8 x i32> %118, <i32 3, i32 3, i32 3, i32 3, i32 3, i32 3, i32 3, i32 3>
  %120 = lshr <8 x i32> %118, <i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8>
  %121 = or <8 x i32> %119, %120
  %122 = trunc <8 x i32> %121 to <8 x i8>
  %123 = and <8 x i32> %111, <i32 62, i32 62, i32 62, i32 62, i32 62, i32 62, i32 62, i32 62>
  %124 = shl nuw nsw <8 x i32> %123, <i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2>
  %125 = lshr <8 x i32> %123, <i32 3, i32 3, i32 3, i32 3, i32 3, i32 3, i32 3, i32 3>
  %126 = or <8 x i32> %124, %125
  %127 = trunc <8 x i32> %126 to <8 x i8>
  %128 = shl <8 x i32> %111, <i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31>
  %129 = ashr exact <8 x i32> %128, <i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31>
  %130 = trunc <8 x i32> %129 to <8 x i8>
  %131 = or i64 %117, 3
  %132 = getelementptr inbounds i8, i8* %105, i64 %131
  %133 = bitcast i8* %132 to <32 x i8>*
  %134 = shufflevector <8 x i8> %116, <8 x i8> %122, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %135 = shufflevector <8 x i8> %127, <8 x i8> %130, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %136 = shufflevector <16 x i8> %134, <16 x i8> %135, <32 x i32> <i32 0, i32 8, i32 16, i32 24, i32 1, i32 9, i32 17, i32 25, i32 2, i32 10, i32 18, i32 26, i32 3, i32 11, i32 19, i32 27, i32 4, i32 12, i32 20, i32 28, i32 5, i32 13, i32 21, i32 29, i32 6, i32 14, i32 22, i32 30, i32 7, i32 15, i32 23, i32 31>
  store <32 x i8> %136, <32 x i8>* %133, align 1
  %137 = add i64 %107, 8
  %138 = icmp eq i64 %137, %30
  br i1 %138, label %139, label %106, !llvm.loop !176

139:                                              ; preds = %106
  br i1 %31, label %140, label %82

140:                                              ; preds = %143, %139, %51
  %141 = add nuw i64 %52, 1
  %142 = icmp eq i64 %141, %1
  br i1 %142, label %48, label %51

143:                                              ; preds = %82, %143
  %144 = phi i64 [ %174, %143 ], [ %83, %82 ]
  %145 = getelementptr inbounds i16, i16* %78, i64 %144
  %146 = load i16, i16* %145, align 2
  %147 = zext i16 %146 to i32
  %148 = lshr i32 %147, 8
  %149 = and i32 %148, 248
  %150 = lshr i32 %147, 13
  %151 = or i32 %149, %150
  %152 = trunc i32 %151 to i8
  %153 = shl i64 %144, 2
  %154 = getelementptr inbounds i8, i8* %80, i64 %153
  store i8 %152, i8* %154, align 1
  %155 = and i32 %147, 1984
  %156 = lshr exact i32 %155, 3
  %157 = lshr i32 %155, 8
  %158 = or i32 %156, %157
  %159 = trunc i32 %158 to i8
  %160 = or i64 %153, 1
  %161 = getelementptr inbounds i8, i8* %80, i64 %160
  store i8 %159, i8* %161, align 1
  %162 = and i32 %147, 62
  %163 = shl nuw nsw i32 %162, 2
  %164 = lshr i32 %162, 3
  %165 = or i32 %163, %164
  %166 = trunc i32 %165 to i8
  %167 = or i64 %153, 2
  %168 = getelementptr inbounds i8, i8* %80, i64 %167
  store i8 %166, i8* %168, align 1
  %169 = shl i32 %147, 31
  %170 = ashr exact i32 %169, 31
  %171 = trunc i32 %170 to i8
  %172 = or i64 %153, 3
  %173 = getelementptr inbounds i8, i8* %80, i64 %172
  store i8 %171, i8* %173, align 1
  %174 = add nuw i64 %144, 1
  %175 = icmp eq i64 %174, %0
  br i1 %175, label %140, label %143, !llvm.loop !177
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @_ZN5angle17LoadBGR5A1ToBGRA8EmmmPKhmmPhmm(i64, i64, i64, i8* nocapture readonly, i64, i64, i8* nocapture, i64, i64) local_unnamed_addr #1 {
  %10 = icmp eq i64 %2, 0
  br i1 %10, label %47, label %11

11:                                               ; preds = %9
  %12 = icmp eq i64 %1, 0
  %13 = icmp eq i64 %0, 0
  %14 = add i64 %0, -1
  %15 = shl i64 %0, 2
  %16 = shl i64 %0, 1
  %17 = icmp ult i64 %0, 8
  %18 = call { i64, i1 } @llvm.umul.with.overflow.i64(i64 %14, i64 4)
  %19 = extractvalue { i64, i1 } %18, 0
  %20 = extractvalue { i64, i1 } %18, 1
  %21 = call { i64, i1 } @llvm.umul.with.overflow.i64(i64 %14, i64 4)
  %22 = extractvalue { i64, i1 } %21, 0
  %23 = extractvalue { i64, i1 } %21, 1
  %24 = call { i64, i1 } @llvm.umul.with.overflow.i64(i64 %14, i64 4)
  %25 = extractvalue { i64, i1 } %24, 0
  %26 = extractvalue { i64, i1 } %24, 1
  %27 = call { i64, i1 } @llvm.umul.with.overflow.i64(i64 %14, i64 4)
  %28 = extractvalue { i64, i1 } %27, 0
  %29 = extractvalue { i64, i1 } %27, 1
  %30 = and i64 %0, -8
  %31 = icmp eq i64 %30, %0
  br label %32

32:                                               ; preds = %48, %11
  %33 = phi i64 [ 0, %11 ], [ %49, %48 ]
  %34 = mul i64 %33, %8
  %35 = add i64 %15, %34
  %36 = mul i64 %33, %5
  %37 = add i64 %16, %36
  %38 = mul i64 %33, %8
  %39 = add i64 %38, 2
  %40 = add i64 %38, 3
  %41 = add i64 %38, 1
  br i1 %12, label %48, label %42

42:                                               ; preds = %32
  %43 = mul i64 %33, %5
  %44 = mul i64 %33, %8
  %45 = getelementptr inbounds i8, i8* %3, i64 %43
  %46 = getelementptr inbounds i8, i8* %6, i64 %44
  br label %51

47:                                               ; preds = %48, %9
  ret void

48:                                               ; preds = %140, %32
  %49 = add nuw i64 %33, 1
  %50 = icmp eq i64 %49, %2
  br i1 %50, label %47, label %32

51:                                               ; preds = %140, %42
  %52 = phi i64 [ 0, %42 ], [ %141, %140 ]
  %53 = mul i64 %52, %7
  %54 = add i64 %34, %53
  %55 = getelementptr i8, i8* %6, i64 %54
  %56 = add i64 %35, %53
  %57 = getelementptr i8, i8* %6, i64 %56
  %58 = mul i64 %52, %4
  %59 = add i64 %36, %58
  %60 = getelementptr i8, i8* %3, i64 %59
  %61 = add i64 %37, %58
  %62 = getelementptr i8, i8* %3, i64 %61
  %63 = mul i64 %52, %7
  %64 = add i64 %39, %63
  %65 = getelementptr i8, i8* %6, i64 %64
  %66 = ptrtoint i8* %65 to i64
  %67 = add i64 %40, %63
  %68 = getelementptr i8, i8* %6, i64 %67
  %69 = ptrtoint i8* %68 to i64
  %70 = add i64 %41, %63
  %71 = getelementptr i8, i8* %6, i64 %70
  %72 = ptrtoint i8* %71 to i64
  %73 = add i64 %38, %63
  %74 = getelementptr i8, i8* %6, i64 %73
  %75 = ptrtoint i8* %74 to i64
  %76 = mul i64 %52, %4
  %77 = getelementptr inbounds i8, i8* %45, i64 %76
  %78 = bitcast i8* %77 to i16*
  %79 = mul i64 %52, %7
  %80 = getelementptr inbounds i8, i8* %46, i64 %79
  br i1 %13, label %140, label %81

81:                                               ; preds = %51
  br i1 %17, label %82, label %84

82:                                               ; preds = %139, %100, %84, %81
  %83 = phi i64 [ 0, %100 ], [ 0, %84 ], [ 0, %81 ], [ %30, %139 ]
  br label %143

84:                                               ; preds = %81
  %85 = xor i64 %66, -1
  %86 = icmp ugt i64 %19, %85
  %87 = or i1 %86, %20
  %88 = xor i64 %69, -1
  %89 = icmp ugt i64 %22, %88
  %90 = or i1 %89, %23
  %91 = or i1 %87, %90
  %92 = xor i64 %72, -1
  %93 = icmp ugt i64 %25, %92
  %94 = or i1 %93, %26
  %95 = or i1 %91, %94
  %96 = xor i64 %75, -1
  %97 = icmp ugt i64 %28, %96
  %98 = or i1 %97, %29
  %99 = or i1 %95, %98
  br i1 %99, label %82, label %100

100:                                              ; preds = %84
  %101 = icmp ult i8* %55, %62
  %102 = icmp ult i8* %60, %57
  %103 = and i1 %101, %102
  br i1 %103, label %82, label %104

104:                                              ; preds = %100
  %105 = getelementptr inbounds i8, i8* %80, i64 -3
  br label %106

106:                                              ; preds = %106, %104
  %107 = phi i64 [ 0, %104 ], [ %137, %106 ]
  %108 = getelementptr inbounds i16, i16* %78, i64 %107
  %109 = bitcast i16* %108 to <8 x i16>*
  %110 = load <8 x i16>, <8 x i16>* %109, align 2, !alias.scope !178
  %111 = zext <8 x i16> %110 to <8 x i32>
  %112 = lshr <8 x i32> %111, <i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8>
  %113 = and <8 x i32> %112, <i32 248, i32 248, i32 248, i32 248, i32 248, i32 248, i32 248, i32 248>
  %114 = lshr <8 x i32> %111, <i32 13, i32 13, i32 13, i32 13, i32 13, i32 13, i32 13, i32 13>
  %115 = or <8 x i32> %113, %114
  %116 = trunc <8 x i32> %115 to <8 x i8>
  %117 = shl i64 %107, 2
  %118 = and <8 x i32> %111, <i32 1984, i32 1984, i32 1984, i32 1984, i32 1984, i32 1984, i32 1984, i32 1984>
  %119 = lshr exact <8 x i32> %118, <i32 3, i32 3, i32 3, i32 3, i32 3, i32 3, i32 3, i32 3>
  %120 = lshr <8 x i32> %118, <i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8>
  %121 = or <8 x i32> %119, %120
  %122 = trunc <8 x i32> %121 to <8 x i8>
  %123 = and <8 x i32> %111, <i32 62, i32 62, i32 62, i32 62, i32 62, i32 62, i32 62, i32 62>
  %124 = shl nuw nsw <8 x i32> %123, <i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2>
  %125 = lshr <8 x i32> %123, <i32 3, i32 3, i32 3, i32 3, i32 3, i32 3, i32 3, i32 3>
  %126 = or <8 x i32> %124, %125
  %127 = trunc <8 x i32> %126 to <8 x i8>
  %128 = shl <8 x i32> %111, <i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31>
  %129 = ashr exact <8 x i32> %128, <i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31>
  %130 = trunc <8 x i32> %129 to <8 x i8>
  %131 = or i64 %117, 3
  %132 = getelementptr inbounds i8, i8* %105, i64 %131
  %133 = bitcast i8* %132 to <32 x i8>*
  %134 = shufflevector <8 x i8> %116, <8 x i8> %122, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %135 = shufflevector <8 x i8> %127, <8 x i8> %130, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %136 = shufflevector <16 x i8> %134, <16 x i8> %135, <32 x i32> <i32 0, i32 8, i32 16, i32 24, i32 1, i32 9, i32 17, i32 25, i32 2, i32 10, i32 18, i32 26, i32 3, i32 11, i32 19, i32 27, i32 4, i32 12, i32 20, i32 28, i32 5, i32 13, i32 21, i32 29, i32 6, i32 14, i32 22, i32 30, i32 7, i32 15, i32 23, i32 31>
  store <32 x i8> %136, <32 x i8>* %133, align 1
  %137 = add i64 %107, 8
  %138 = icmp eq i64 %137, %30
  br i1 %138, label %139, label %106, !llvm.loop !181

139:                                              ; preds = %106
  br i1 %31, label %140, label %82

140:                                              ; preds = %143, %139, %51
  %141 = add nuw i64 %52, 1
  %142 = icmp eq i64 %141, %1
  br i1 %142, label %48, label %51

143:                                              ; preds = %82, %143
  %144 = phi i64 [ %174, %143 ], [ %83, %82 ]
  %145 = getelementptr inbounds i16, i16* %78, i64 %144
  %146 = load i16, i16* %145, align 2
  %147 = zext i16 %146 to i32
  %148 = lshr i32 %147, 8
  %149 = and i32 %148, 248
  %150 = lshr i32 %147, 13
  %151 = or i32 %149, %150
  %152 = trunc i32 %151 to i8
  %153 = shl i64 %144, 2
  %154 = getelementptr inbounds i8, i8* %80, i64 %153
  store i8 %152, i8* %154, align 1
  %155 = and i32 %147, 1984
  %156 = lshr exact i32 %155, 3
  %157 = lshr i32 %155, 8
  %158 = or i32 %156, %157
  %159 = trunc i32 %158 to i8
  %160 = or i64 %153, 1
  %161 = getelementptr inbounds i8, i8* %80, i64 %160
  store i8 %159, i8* %161, align 1
  %162 = and i32 %147, 62
  %163 = shl nuw nsw i32 %162, 2
  %164 = lshr i32 %162, 3
  %165 = or i32 %163, %164
  %166 = trunc i32 %165 to i8
  %167 = or i64 %153, 2
  %168 = getelementptr inbounds i8, i8* %80, i64 %167
  store i8 %166, i8* %168, align 1
  %169 = shl i32 %147, 31
  %170 = ashr exact i32 %169, 31
  %171 = trunc i32 %170 to i8
  %172 = or i64 %153, 3
  %173 = getelementptr inbounds i8, i8* %80, i64 %172
  store i8 %171, i8* %173, align 1
  %174 = add nuw i64 %144, 1
  %175 = icmp eq i64 %174, %0
  br i1 %175, label %140, label %143, !llvm.loop !182
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @_ZN5angle18LoadRGB10A2ToRGBA8EmmmPKhmmPhmm(i64, i64, i64, i8* nocapture readonly, i64, i64, i8* nocapture, i64, i64) local_unnamed_addr #1 {
  %10 = icmp eq i64 %2, 0
  br i1 %10, label %46, label %11

11:                                               ; preds = %9
  %12 = icmp eq i64 %1, 0
  %13 = icmp eq i64 %0, 0
  %14 = add i64 %0, -1
  %15 = shl i64 %0, 2
  %16 = icmp ult i64 %0, 4
  %17 = call { i64, i1 } @llvm.umul.with.overflow.i64(i64 %14, i64 4)
  %18 = extractvalue { i64, i1 } %17, 0
  %19 = extractvalue { i64, i1 } %17, 1
  %20 = call { i64, i1 } @llvm.umul.with.overflow.i64(i64 %14, i64 4)
  %21 = extractvalue { i64, i1 } %20, 0
  %22 = extractvalue { i64, i1 } %20, 1
  %23 = call { i64, i1 } @llvm.umul.with.overflow.i64(i64 %14, i64 4)
  %24 = extractvalue { i64, i1 } %23, 0
  %25 = extractvalue { i64, i1 } %23, 1
  %26 = call { i64, i1 } @llvm.umul.with.overflow.i64(i64 %14, i64 4)
  %27 = extractvalue { i64, i1 } %26, 0
  %28 = extractvalue { i64, i1 } %26, 1
  %29 = and i64 %0, -4
  %30 = icmp eq i64 %29, %0
  br label %31

31:                                               ; preds = %47, %11
  %32 = phi i64 [ 0, %11 ], [ %48, %47 ]
  %33 = mul i64 %32, %8
  %34 = add i64 %15, %33
  %35 = mul i64 %32, %5
  %36 = add i64 %15, %35
  %37 = mul i64 %32, %8
  %38 = add i64 %37, 2
  %39 = add i64 %37, 3
  %40 = add i64 %37, 1
  br i1 %12, label %47, label %41

41:                                               ; preds = %31
  %42 = mul i64 %32, %5
  %43 = mul i64 %32, %8
  %44 = getelementptr inbounds i8, i8* %3, i64 %42
  %45 = getelementptr inbounds i8, i8* %6, i64 %43
  br label %50

46:                                               ; preds = %47, %9
  ret void

47:                                               ; preds = %129, %31
  %48 = add nuw i64 %32, 1
  %49 = icmp eq i64 %48, %2
  br i1 %49, label %46, label %31

50:                                               ; preds = %129, %41
  %51 = phi i64 [ 0, %41 ], [ %130, %129 ]
  %52 = mul i64 %51, %7
  %53 = add i64 %33, %52
  %54 = getelementptr i8, i8* %6, i64 %53
  %55 = add i64 %34, %52
  %56 = getelementptr i8, i8* %6, i64 %55
  %57 = mul i64 %51, %4
  %58 = add i64 %35, %57
  %59 = getelementptr i8, i8* %3, i64 %58
  %60 = add i64 %36, %57
  %61 = getelementptr i8, i8* %3, i64 %60
  %62 = mul i64 %51, %7
  %63 = add i64 %38, %62
  %64 = getelementptr i8, i8* %6, i64 %63
  %65 = ptrtoint i8* %64 to i64
  %66 = add i64 %39, %62
  %67 = getelementptr i8, i8* %6, i64 %66
  %68 = ptrtoint i8* %67 to i64
  %69 = add i64 %40, %62
  %70 = getelementptr i8, i8* %6, i64 %69
  %71 = ptrtoint i8* %70 to i64
  %72 = add i64 %37, %62
  %73 = getelementptr i8, i8* %6, i64 %72
  %74 = ptrtoint i8* %73 to i64
  %75 = mul i64 %51, %4
  %76 = getelementptr inbounds i8, i8* %44, i64 %75
  %77 = bitcast i8* %76 to i32*
  %78 = mul i64 %51, %7
  %79 = getelementptr inbounds i8, i8* %45, i64 %78
  br i1 %13, label %129, label %80

80:                                               ; preds = %50
  br i1 %16, label %81, label %83

81:                                               ; preds = %128, %99, %83, %80
  %82 = phi i64 [ 0, %99 ], [ 0, %83 ], [ 0, %80 ], [ %29, %128 ]
  br label %132

83:                                               ; preds = %80
  %84 = xor i64 %65, -1
  %85 = icmp ugt i64 %18, %84
  %86 = or i1 %85, %19
  %87 = xor i64 %68, -1
  %88 = icmp ugt i64 %21, %87
  %89 = or i1 %88, %22
  %90 = or i1 %86, %89
  %91 = xor i64 %71, -1
  %92 = icmp ugt i64 %24, %91
  %93 = or i1 %92, %25
  %94 = or i1 %90, %93
  %95 = xor i64 %74, -1
  %96 = icmp ugt i64 %27, %95
  %97 = or i1 %96, %28
  %98 = or i1 %94, %97
  br i1 %98, label %81, label %99

99:                                               ; preds = %83
  %100 = icmp ult i8* %54, %61
  %101 = icmp ult i8* %59, %56
  %102 = and i1 %100, %101
  br i1 %102, label %81, label %103

103:                                              ; preds = %99
  %104 = getelementptr inbounds i8, i8* %79, i64 -3
  br label %105

105:                                              ; preds = %105, %103
  %106 = phi i64 [ 0, %103 ], [ %126, %105 ]
  %107 = getelementptr inbounds i32, i32* %77, i64 %106
  %108 = bitcast i32* %107 to <4 x i32>*
  %109 = load <4 x i32>, <4 x i32>* %108, align 4, !alias.scope !183
  %110 = lshr <4 x i32> %109, <i32 2, i32 2, i32 2, i32 2>
  %111 = trunc <4 x i32> %110 to <4 x i8>
  %112 = shl i64 %106, 2
  %113 = lshr <4 x i32> %109, <i32 12, i32 12, i32 12, i32 12>
  %114 = trunc <4 x i32> %113 to <4 x i8>
  %115 = lshr <4 x i32> %109, <i32 22, i32 22, i32 22, i32 22>
  %116 = trunc <4 x i32> %115 to <4 x i8>
  %117 = lshr <4 x i32> %109, <i32 30, i32 30, i32 30, i32 30>
  %118 = trunc <4 x i32> %117 to <4 x i8>
  %119 = mul nuw <4 x i8> %118, <i8 85, i8 85, i8 85, i8 85>
  %120 = or i64 %112, 3
  %121 = getelementptr inbounds i8, i8* %104, i64 %120
  %122 = bitcast i8* %121 to <16 x i8>*
  %123 = shufflevector <4 x i8> %111, <4 x i8> %114, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %124 = shufflevector <4 x i8> %116, <4 x i8> %119, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %125 = shufflevector <8 x i8> %123, <8 x i8> %124, <16 x i32> <i32 0, i32 4, i32 8, i32 12, i32 1, i32 5, i32 9, i32 13, i32 2, i32 6, i32 10, i32 14, i32 3, i32 7, i32 11, i32 15>
  store <16 x i8> %125, <16 x i8>* %122, align 1
  %126 = add i64 %106, 4
  %127 = icmp eq i64 %126, %29
  br i1 %127, label %128, label %105, !llvm.loop !186

128:                                              ; preds = %105
  br i1 %30, label %129, label %81

129:                                              ; preds = %132, %128, %50
  %130 = add nuw i64 %51, 1
  %131 = icmp eq i64 %130, %1
  br i1 %131, label %47, label %50

132:                                              ; preds = %81, %132
  %133 = phi i64 [ %153, %132 ], [ %82, %81 ]
  %134 = getelementptr inbounds i32, i32* %77, i64 %133
  %135 = load i32, i32* %134, align 4
  %136 = lshr i32 %135, 2
  %137 = trunc i32 %136 to i8
  %138 = shl i64 %133, 2
  %139 = getelementptr inbounds i8, i8* %79, i64 %138
  store i8 %137, i8* %139, align 1
  %140 = lshr i32 %135, 12
  %141 = trunc i32 %140 to i8
  %142 = or i64 %138, 1
  %143 = getelementptr inbounds i8, i8* %79, i64 %142
  store i8 %141, i8* %143, align 1
  %144 = lshr i32 %135, 22
  %145 = trunc i32 %144 to i8
  %146 = or i64 %138, 2
  %147 = getelementptr inbounds i8, i8* %79, i64 %146
  store i8 %145, i8* %147, align 1
  %148 = lshr i32 %135, 30
  %149 = trunc i32 %148 to i8
  %150 = mul nuw i8 %149, 85
  %151 = or i64 %138, 3
  %152 = getelementptr inbounds i8, i8* %79, i64 %151
  store i8 %150, i8* %152, align 1
  %153 = add nuw i64 %133, 1
  %154 = icmp eq i64 %153, %0
  br i1 %154, label %129, label %132, !llvm.loop !187
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @_ZN5angle20LoadRGB10A2ToRGB10X2EmmmPKhmmPhmm(i64, i64, i64, i8* nocapture readonly, i64, i64, i8* nocapture, i64, i64) local_unnamed_addr #1 {
  %10 = icmp eq i64 %2, 0
  br i1 %10, label %38, label %11

11:                                               ; preds = %9
  %12 = icmp eq i64 %1, 0
  %13 = icmp eq i64 %0, 0
  %14 = shl i64 %0, 2
  %15 = add i64 %0, -8
  %16 = lshr i64 %15, 3
  %17 = add nuw nsw i64 %16, 1
  %18 = icmp ult i64 %0, 8
  %19 = and i64 %0, -8
  %20 = and i64 %17, 1
  %21 = icmp eq i64 %16, 0
  %22 = sub nuw nsw i64 %17, %20
  %23 = icmp eq i64 %20, 0
  %24 = icmp eq i64 %19, %0
  %25 = and i64 %0, 3
  %26 = icmp eq i64 %25, 0
  br label %27

27:                                               ; preds = %39, %11
  %28 = phi i64 [ 0, %11 ], [ %40, %39 ]
  %29 = mul i64 %28, %8
  %30 = add i64 %14, %29
  %31 = mul i64 %28, %5
  %32 = add i64 %14, %31
  br i1 %12, label %39, label %33

33:                                               ; preds = %27
  %34 = mul i64 %28, %5
  %35 = mul i64 %28, %8
  %36 = getelementptr inbounds i8, i8* %3, i64 %34
  %37 = getelementptr inbounds i8, i8* %6, i64 %35
  br label %42

38:                                               ; preds = %39, %9
  ret void

39:                                               ; preds = %130, %27
  %40 = add nuw i64 %28, 1
  %41 = icmp eq i64 %40, %2
  br i1 %41, label %38, label %27

42:                                               ; preds = %130, %33
  %43 = phi i64 [ 0, %33 ], [ %131, %130 ]
  %44 = mul i64 %43, %7
  %45 = add i64 %29, %44
  %46 = getelementptr i8, i8* %6, i64 %45
  %47 = add i64 %30, %44
  %48 = getelementptr i8, i8* %6, i64 %47
  %49 = mul i64 %43, %4
  %50 = add i64 %31, %49
  %51 = getelementptr i8, i8* %3, i64 %50
  %52 = add i64 %32, %49
  %53 = getelementptr i8, i8* %3, i64 %52
  %54 = mul i64 %43, %4
  %55 = getelementptr inbounds i8, i8* %36, i64 %54
  %56 = bitcast i8* %55 to i32*
  %57 = mul i64 %43, %7
  %58 = getelementptr inbounds i8, i8* %37, i64 %57
  %59 = bitcast i8* %58 to i32*
  br i1 %13, label %130, label %60

60:                                               ; preds = %42
  br i1 %18, label %61, label %78

61:                                               ; preds = %129, %78, %60
  %62 = phi i64 [ 0, %78 ], [ 0, %60 ], [ %19, %129 ]
  %63 = xor i64 %62, -1
  %64 = add i64 %63, %0
  br i1 %26, label %75, label %65

65:                                               ; preds = %61, %65
  %66 = phi i64 [ %72, %65 ], [ %62, %61 ]
  %67 = phi i64 [ %73, %65 ], [ %25, %61 ]
  %68 = getelementptr inbounds i32, i32* %56, i64 %66
  %69 = load i32, i32* %68, align 4
  %70 = or i32 %69, -1073741824
  %71 = getelementptr inbounds i32, i32* %59, i64 %66
  store i32 %70, i32* %71, align 4
  %72 = add nuw i64 %66, 1
  %73 = add i64 %67, -1
  %74 = icmp eq i64 %73, 0
  br i1 %74, label %75, label %65, !llvm.loop !188

75:                                               ; preds = %65, %61
  %76 = phi i64 [ %62, %61 ], [ %72, %65 ]
  %77 = icmp ult i64 %64, 3
  br i1 %77, label %130, label %133

78:                                               ; preds = %60
  %79 = icmp ult i8* %46, %53
  %80 = icmp ult i8* %51, %48
  %81 = and i1 %79, %80
  br i1 %81, label %61, label %82

82:                                               ; preds = %78
  br i1 %21, label %114, label %83

83:                                               ; preds = %82, %83
  %84 = phi i64 [ %111, %83 ], [ 0, %82 ]
  %85 = phi i64 [ %112, %83 ], [ %22, %82 ]
  %86 = getelementptr inbounds i32, i32* %56, i64 %84
  %87 = bitcast i32* %86 to <4 x i32>*
  %88 = load <4 x i32>, <4 x i32>* %87, align 4, !alias.scope !189
  %89 = getelementptr inbounds i32, i32* %86, i64 4
  %90 = bitcast i32* %89 to <4 x i32>*
  %91 = load <4 x i32>, <4 x i32>* %90, align 4, !alias.scope !189
  %92 = or <4 x i32> %88, <i32 -1073741824, i32 -1073741824, i32 -1073741824, i32 -1073741824>
  %93 = or <4 x i32> %91, <i32 -1073741824, i32 -1073741824, i32 -1073741824, i32 -1073741824>
  %94 = getelementptr inbounds i32, i32* %59, i64 %84
  %95 = bitcast i32* %94 to <4 x i32>*
  store <4 x i32> %92, <4 x i32>* %95, align 4, !alias.scope !192, !noalias !189
  %96 = getelementptr inbounds i32, i32* %94, i64 4
  %97 = bitcast i32* %96 to <4 x i32>*
  store <4 x i32> %93, <4 x i32>* %97, align 4, !alias.scope !192, !noalias !189
  %98 = or i64 %84, 8
  %99 = getelementptr inbounds i32, i32* %56, i64 %98
  %100 = bitcast i32* %99 to <4 x i32>*
  %101 = load <4 x i32>, <4 x i32>* %100, align 4, !alias.scope !189
  %102 = getelementptr inbounds i32, i32* %99, i64 4
  %103 = bitcast i32* %102 to <4 x i32>*
  %104 = load <4 x i32>, <4 x i32>* %103, align 4, !alias.scope !189
  %105 = or <4 x i32> %101, <i32 -1073741824, i32 -1073741824, i32 -1073741824, i32 -1073741824>
  %106 = or <4 x i32> %104, <i32 -1073741824, i32 -1073741824, i32 -1073741824, i32 -1073741824>
  %107 = getelementptr inbounds i32, i32* %59, i64 %98
  %108 = bitcast i32* %107 to <4 x i32>*
  store <4 x i32> %105, <4 x i32>* %108, align 4, !alias.scope !192, !noalias !189
  %109 = getelementptr inbounds i32, i32* %107, i64 4
  %110 = bitcast i32* %109 to <4 x i32>*
  store <4 x i32> %106, <4 x i32>* %110, align 4, !alias.scope !192, !noalias !189
  %111 = add i64 %84, 16
  %112 = add i64 %85, -2
  %113 = icmp eq i64 %112, 0
  br i1 %113, label %114, label %83, !llvm.loop !194

114:                                              ; preds = %83, %82
  %115 = phi i64 [ 0, %82 ], [ %111, %83 ]
  br i1 %23, label %129, label %116

116:                                              ; preds = %114
  %117 = getelementptr inbounds i32, i32* %56, i64 %115
  %118 = bitcast i32* %117 to <4 x i32>*
  %119 = load <4 x i32>, <4 x i32>* %118, align 4, !alias.scope !189
  %120 = getelementptr inbounds i32, i32* %117, i64 4
  %121 = bitcast i32* %120 to <4 x i32>*
  %122 = load <4 x i32>, <4 x i32>* %121, align 4, !alias.scope !189
  %123 = or <4 x i32> %119, <i32 -1073741824, i32 -1073741824, i32 -1073741824, i32 -1073741824>
  %124 = or <4 x i32> %122, <i32 -1073741824, i32 -1073741824, i32 -1073741824, i32 -1073741824>
  %125 = getelementptr inbounds i32, i32* %59, i64 %115
  %126 = bitcast i32* %125 to <4 x i32>*
  store <4 x i32> %123, <4 x i32>* %126, align 4, !alias.scope !192, !noalias !189
  %127 = getelementptr inbounds i32, i32* %125, i64 4
  %128 = bitcast i32* %127 to <4 x i32>*
  store <4 x i32> %124, <4 x i32>* %128, align 4, !alias.scope !192, !noalias !189
  br label %129

129:                                              ; preds = %114, %116
  br i1 %24, label %130, label %61

130:                                              ; preds = %75, %133, %129, %42
  %131 = add nuw i64 %43, 1
  %132 = icmp eq i64 %131, %1
  br i1 %132, label %39, label %42

133:                                              ; preds = %75, %133
  %134 = phi i64 [ %154, %133 ], [ %76, %75 ]
  %135 = getelementptr inbounds i32, i32* %56, i64 %134
  %136 = load i32, i32* %135, align 4
  %137 = or i32 %136, -1073741824
  %138 = getelementptr inbounds i32, i32* %59, i64 %134
  store i32 %137, i32* %138, align 4
  %139 = add nuw i64 %134, 1
  %140 = getelementptr inbounds i32, i32* %56, i64 %139
  %141 = load i32, i32* %140, align 4
  %142 = or i32 %141, -1073741824
  %143 = getelementptr inbounds i32, i32* %59, i64 %139
  store i32 %142, i32* %143, align 4
  %144 = add nuw i64 %134, 2
  %145 = getelementptr inbounds i32, i32* %56, i64 %144
  %146 = load i32, i32* %145, align 4
  %147 = or i32 %146, -1073741824
  %148 = getelementptr inbounds i32, i32* %59, i64 %144
  store i32 %147, i32* %148, align 4
  %149 = add nuw i64 %134, 3
  %150 = getelementptr inbounds i32, i32* %56, i64 %149
  %151 = load i32, i32* %150, align 4
  %152 = or i32 %151, -1073741824
  %153 = getelementptr inbounds i32, i32* %59, i64 %149
  store i32 %152, i32* %153, align 4
  %154 = add nuw i64 %134, 4
  %155 = icmp eq i64 %154, %0
  br i1 %155, label %130, label %133, !llvm.loop !195
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5angle18LoadRGB16FToRGB9E5EmmmPKhmmPhmm(i64, i64, i64, i8* nocapture readonly, i64, i64, i8* nocapture, i64, i64) local_unnamed_addr #5 {
  %10 = icmp eq i64 %2, 0
  br i1 %10, label %21, label %11

11:                                               ; preds = %9
  %12 = icmp eq i64 %1, 0
  %13 = icmp eq i64 %0, 0
  br label %14

14:                                               ; preds = %22, %11
  %15 = phi i64 [ 0, %11 ], [ %23, %22 ]
  br i1 %12, label %22, label %16

16:                                               ; preds = %14
  %17 = mul i64 %15, %5
  %18 = mul i64 %15, %8
  %19 = getelementptr inbounds i8, i8* %3, i64 %17
  %20 = getelementptr inbounds i8, i8* %6, i64 %18
  br label %25

21:                                               ; preds = %22, %9
  ret void

22:                                               ; preds = %33, %14
  %23 = add nuw i64 %15, 1
  %24 = icmp eq i64 %23, %2
  br i1 %24, label %21, label %14

25:                                               ; preds = %33, %16
  %26 = phi i64 [ 0, %16 ], [ %34, %33 ]
  %27 = mul i64 %26, %4
  %28 = getelementptr inbounds i8, i8* %19, i64 %27
  %29 = bitcast i8* %28 to i16*
  %30 = mul i64 %26, %7
  %31 = getelementptr inbounds i8, i8* %20, i64 %30
  %32 = bitcast i8* %31 to i32*
  br i1 %13, label %33, label %36

33:                                               ; preds = %36, %25
  %34 = add nuw i64 %26, 1
  %35 = icmp eq i64 %34, %1
  br i1 %35, label %22, label %25

36:                                               ; preds = %25, %36
  %37 = phi i64 [ %52, %36 ], [ 0, %25 ]
  %38 = mul i64 %37, 3
  %39 = getelementptr inbounds i16, i16* %29, i64 %38
  %40 = load i16, i16* %39, align 2
  %41 = tail call float @_ZN2gl16float16ToFloat32Et(i16 zeroext %40) #7
  %42 = add i64 %38, 1
  %43 = getelementptr inbounds i16, i16* %29, i64 %42
  %44 = load i16, i16* %43, align 2
  %45 = tail call float @_ZN2gl16float16ToFloat32Et(i16 zeroext %44) #7
  %46 = add i64 %38, 2
  %47 = getelementptr inbounds i16, i16* %29, i64 %46
  %48 = load i16, i16* %47, align 2
  %49 = tail call float @_ZN2gl16float16ToFloat32Et(i16 zeroext %48) #7
  %50 = tail call i32 @_ZN2gl23convertRGBFloatsTo999E5Efff(float %41, float %45, float %49) #7
  %51 = getelementptr inbounds i32, i32* %32, i64 %37
  store i32 %50, i32* %51, align 4
  %52 = add nuw i64 %37, 1
  %53 = icmp eq i64 %52, %0
  br i1 %53, label %33, label %36
}

declare i32 @_ZN2gl23convertRGBFloatsTo999E5Efff(float, float, float) local_unnamed_addr #6

declare float @_ZN2gl16float16ToFloat32Et(i16 zeroext) local_unnamed_addr #6

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5angle18LoadRGB32FToRGB9E5EmmmPKhmmPhmm(i64, i64, i64, i8* nocapture readonly, i64, i64, i8* nocapture, i64, i64) local_unnamed_addr #5 {
  %10 = icmp eq i64 %2, 0
  br i1 %10, label %21, label %11

11:                                               ; preds = %9
  %12 = icmp eq i64 %1, 0
  %13 = icmp eq i64 %0, 0
  br label %14

14:                                               ; preds = %22, %11
  %15 = phi i64 [ 0, %11 ], [ %23, %22 ]
  br i1 %12, label %22, label %16

16:                                               ; preds = %14
  %17 = mul i64 %15, %5
  %18 = mul i64 %15, %8
  %19 = getelementptr inbounds i8, i8* %3, i64 %17
  %20 = getelementptr inbounds i8, i8* %6, i64 %18
  br label %25

21:                                               ; preds = %22, %9
  ret void

22:                                               ; preds = %33, %14
  %23 = add nuw i64 %15, 1
  %24 = icmp eq i64 %23, %2
  br i1 %24, label %21, label %14

25:                                               ; preds = %33, %16
  %26 = phi i64 [ 0, %16 ], [ %34, %33 ]
  %27 = mul i64 %26, %4
  %28 = getelementptr inbounds i8, i8* %19, i64 %27
  %29 = bitcast i8* %28 to float*
  %30 = mul i64 %26, %7
  %31 = getelementptr inbounds i8, i8* %20, i64 %30
  %32 = bitcast i8* %31 to i32*
  br i1 %13, label %33, label %36

33:                                               ; preds = %36, %25
  %34 = add nuw i64 %26, 1
  %35 = icmp eq i64 %34, %1
  br i1 %35, label %22, label %25

36:                                               ; preds = %25, %36
  %37 = phi i64 [ %49, %36 ], [ 0, %25 ]
  %38 = mul i64 %37, 3
  %39 = getelementptr inbounds float, float* %29, i64 %38
  %40 = load float, float* %39, align 4
  %41 = add i64 %38, 1
  %42 = getelementptr inbounds float, float* %29, i64 %41
  %43 = load float, float* %42, align 4
  %44 = add i64 %38, 2
  %45 = getelementptr inbounds float, float* %29, i64 %44
  %46 = load float, float* %45, align 4
  %47 = tail call i32 @_ZN2gl23convertRGBFloatsTo999E5Efff(float %40, float %43, float %46) #7
  %48 = getelementptr inbounds i32, i32* %32, i64 %37
  store i32 %47, i32* %48, align 4
  %49 = add nuw i64 %37, 1
  %50 = icmp eq i64 %49, %0
  br i1 %50, label %33, label %36
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5angle20LoadRGB16FToRG11B10FEmmmPKhmmPhmm(i64, i64, i64, i8* nocapture readonly, i64, i64, i8* nocapture, i64, i64) local_unnamed_addr #5 {
  %10 = icmp eq i64 %2, 0
  br i1 %10, label %21, label %11

11:                                               ; preds = %9
  %12 = icmp eq i64 %1, 0
  %13 = icmp eq i64 %0, 0
  br label %14

14:                                               ; preds = %22, %11
  %15 = phi i64 [ 0, %11 ], [ %23, %22 ]
  br i1 %12, label %22, label %16

16:                                               ; preds = %14
  %17 = mul i64 %15, %5
  %18 = mul i64 %15, %8
  %19 = getelementptr inbounds i8, i8* %3, i64 %17
  %20 = getelementptr inbounds i8, i8* %6, i64 %18
  br label %25

21:                                               ; preds = %22, %9
  ret void

22:                                               ; preds = %33, %14
  %23 = add nuw i64 %15, 1
  %24 = icmp eq i64 %23, %2
  br i1 %24, label %21, label %14

25:                                               ; preds = %33, %16
  %26 = phi i64 [ 0, %16 ], [ %34, %33 ]
  %27 = mul i64 %26, %4
  %28 = getelementptr inbounds i8, i8* %19, i64 %27
  %29 = bitcast i8* %28 to i16*
  %30 = mul i64 %26, %7
  %31 = getelementptr inbounds i8, i8* %20, i64 %30
  %32 = bitcast i8* %31 to i32*
  br i1 %13, label %33, label %36

33:                                               ; preds = %184, %25
  %34 = add nuw i64 %26, 1
  %35 = icmp eq i64 %34, %1
  br i1 %35, label %22, label %25

36:                                               ; preds = %25, %184
  %37 = phi i64 [ %189, %184 ], [ 0, %25 ]
  %38 = mul i64 %37, 3
  %39 = getelementptr inbounds i16, i16* %29, i64 %38
  %40 = load i16, i16* %39, align 2
  %41 = tail call float @_ZN2gl16float16ToFloat32Et(i16 zeroext %40) #7
  %42 = bitcast float %41 to i32
  %43 = icmp slt i32 %42, 0
  %44 = and i32 %42, 2147483647
  %45 = and i32 %42, 2139095040
  %46 = icmp eq i32 %45, 2139095040
  br i1 %46, label %47, label %61

47:                                               ; preds = %36
  %48 = and i32 %42, 8388607
  %49 = icmp eq i32 %48, 0
  br i1 %49, label %59, label %50

50:                                               ; preds = %47
  %51 = lshr i32 %42, 17
  %52 = lshr i32 %42, 11
  %53 = lshr i32 %42, 6
  %54 = or i32 %52, %42
  %55 = or i32 %54, %51
  %56 = or i32 %55, %53
  %57 = and i32 %56, 63
  %58 = or i32 %57, 1984
  br label %84

59:                                               ; preds = %47
  %60 = select i1 %43, i32 0, i32 1984
  br label %84

61:                                               ; preds = %36
  br i1 %43, label %84, label %62

62:                                               ; preds = %61
  %63 = icmp ugt i32 %44, 1199439872
  br i1 %63, label %84, label %64

64:                                               ; preds = %62
  %65 = icmp ult i32 %44, 889192576
  br i1 %65, label %84, label %66

66:                                               ; preds = %64
  %67 = icmp ult i32 %44, 947912704
  br i1 %67, label %68, label %74

68:                                               ; preds = %66
  %69 = lshr i32 %44, 23
  %70 = sub nuw nsw i32 113, %69
  %71 = and i32 %42, 8388607
  %72 = or i32 %71, 8388608
  %73 = lshr i32 %72, %70
  br label %76

74:                                               ; preds = %66
  %75 = add nsw i32 %44, -939524096
  br label %76

76:                                               ; preds = %74, %68
  %77 = phi i32 [ %73, %68 ], [ %75, %74 ]
  %78 = add nuw i32 %77, 65535
  %79 = lshr i32 %77, 17
  %80 = and i32 %79, 1
  %81 = add nuw i32 %78, %80
  %82 = lshr i32 %81, 17
  %83 = and i32 %82, 2047
  br label %84

84:                                               ; preds = %50, %59, %61, %62, %64, %76
  %85 = phi i32 [ %58, %50 ], [ %83, %76 ], [ %60, %59 ], [ 0, %61 ], [ 1983, %62 ], [ 0, %64 ]
  %86 = and i32 %85, 65535
  %87 = add i64 %38, 1
  %88 = getelementptr inbounds i16, i16* %29, i64 %87
  %89 = load i16, i16* %88, align 2
  %90 = tail call float @_ZN2gl16float16ToFloat32Et(i16 zeroext %89) #7
  %91 = bitcast float %90 to i32
  %92 = icmp slt i32 %91, 0
  %93 = and i32 %91, 2147483647
  %94 = and i32 %91, 2139095040
  %95 = icmp eq i32 %94, 2139095040
  br i1 %95, label %96, label %110

96:                                               ; preds = %84
  %97 = and i32 %91, 8388607
  %98 = icmp eq i32 %97, 0
  br i1 %98, label %108, label %99

99:                                               ; preds = %96
  %100 = lshr i32 %91, 17
  %101 = lshr i32 %91, 11
  %102 = lshr i32 %91, 6
  %103 = or i32 %101, %91
  %104 = or i32 %103, %100
  %105 = or i32 %104, %102
  %106 = and i32 %105, 63
  %107 = or i32 %106, 1984
  br label %133

108:                                              ; preds = %96
  %109 = select i1 %92, i32 0, i32 1984
  br label %133

110:                                              ; preds = %84
  br i1 %92, label %133, label %111

111:                                              ; preds = %110
  %112 = icmp ugt i32 %93, 1199439872
  br i1 %112, label %133, label %113

113:                                              ; preds = %111
  %114 = icmp ult i32 %93, 889192576
  br i1 %114, label %133, label %115

115:                                              ; preds = %113
  %116 = icmp ult i32 %93, 947912704
  br i1 %116, label %117, label %123

117:                                              ; preds = %115
  %118 = lshr i32 %93, 23
  %119 = sub nuw nsw i32 113, %118
  %120 = and i32 %91, 8388607
  %121 = or i32 %120, 8388608
  %122 = lshr i32 %121, %119
  br label %125

123:                                              ; preds = %115
  %124 = add nsw i32 %93, -939524096
  br label %125

125:                                              ; preds = %123, %117
  %126 = phi i32 [ %122, %117 ], [ %124, %123 ]
  %127 = add nuw i32 %126, 65535
  %128 = lshr i32 %126, 17
  %129 = and i32 %128, 1
  %130 = add nuw i32 %127, %129
  %131 = lshr i32 %130, 17
  %132 = and i32 %131, 2047
  br label %133

133:                                              ; preds = %99, %108, %110, %111, %113, %125
  %134 = phi i32 [ %107, %99 ], [ %132, %125 ], [ %109, %108 ], [ 0, %110 ], [ 1983, %111 ], [ 0, %113 ]
  %135 = shl i32 %134, 11
  %136 = and i32 %135, 134215680
  %137 = or i32 %136, %86
  %138 = add i64 %38, 2
  %139 = getelementptr inbounds i16, i16* %29, i64 %138
  %140 = load i16, i16* %139, align 2
  %141 = tail call float @_ZN2gl16float16ToFloat32Et(i16 zeroext %140) #7
  %142 = bitcast float %141 to i32
  %143 = icmp slt i32 %142, 0
  %144 = and i32 %142, 2147483647
  %145 = and i32 %142, 2139095040
  %146 = icmp eq i32 %145, 2139095040
  br i1 %146, label %147, label %161

147:                                              ; preds = %133
  %148 = and i32 %142, 8388607
  %149 = icmp eq i32 %148, 0
  br i1 %149, label %159, label %150

150:                                              ; preds = %147
  %151 = lshr i32 %142, 18
  %152 = lshr i32 %142, 13
  %153 = lshr i32 %142, 3
  %154 = or i32 %152, %142
  %155 = or i32 %154, %151
  %156 = or i32 %155, %153
  %157 = and i32 %156, 31
  %158 = or i32 %157, 992
  br label %184

159:                                              ; preds = %147
  %160 = select i1 %143, i32 0, i32 992
  br label %184

161:                                              ; preds = %133
  br i1 %143, label %184, label %162

162:                                              ; preds = %161
  %163 = icmp ugt i32 %144, 1199308800
  br i1 %163, label %184, label %164

164:                                              ; preds = %162
  %165 = icmp ult i32 %144, 897581120
  br i1 %165, label %184, label %166

166:                                              ; preds = %164
  %167 = icmp ult i32 %144, 947912704
  br i1 %167, label %168, label %174

168:                                              ; preds = %166
  %169 = lshr i32 %144, 23
  %170 = sub nuw nsw i32 113, %169
  %171 = and i32 %142, 8388607
  %172 = or i32 %171, 8388608
  %173 = lshr i32 %172, %170
  br label %176

174:                                              ; preds = %166
  %175 = add nsw i32 %144, -939524096
  br label %176

176:                                              ; preds = %174, %168
  %177 = phi i32 [ %173, %168 ], [ %175, %174 ]
  %178 = add nuw i32 %177, 131071
  %179 = lshr i32 %177, 18
  %180 = and i32 %179, 1
  %181 = add nuw i32 %178, %180
  %182 = lshr i32 %181, 18
  %183 = and i32 %182, 1023
  br label %184

184:                                              ; preds = %150, %159, %161, %162, %164, %176
  %185 = phi i32 [ %158, %150 ], [ %183, %176 ], [ %160, %159 ], [ 0, %161 ], [ 991, %162 ], [ 0, %164 ]
  %186 = shl i32 %185, 22
  %187 = or i32 %137, %186
  %188 = getelementptr inbounds i32, i32* %32, i64 %37
  store i32 %187, i32* %188, align 4
  %189 = add nuw i64 %37, 1
  %190 = icmp eq i64 %189, %0
  br i1 %190, label %33, label %36
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @_ZN5angle20LoadRGB32FToRG11B10FEmmmPKhmmPhmm(i64, i64, i64, i8* nocapture readonly, i64, i64, i8* nocapture, i64, i64) local_unnamed_addr #1 {
  %10 = icmp eq i64 %2, 0
  br i1 %10, label %21, label %11

11:                                               ; preds = %9
  %12 = icmp eq i64 %1, 0
  %13 = icmp eq i64 %0, 0
  br label %14

14:                                               ; preds = %22, %11
  %15 = phi i64 [ 0, %11 ], [ %23, %22 ]
  br i1 %12, label %22, label %16

16:                                               ; preds = %14
  %17 = mul i64 %15, %5
  %18 = mul i64 %15, %8
  %19 = getelementptr inbounds i8, i8* %3, i64 %17
  %20 = getelementptr inbounds i8, i8* %6, i64 %18
  br label %25

21:                                               ; preds = %22, %9
  ret void

22:                                               ; preds = %33, %14
  %23 = add nuw i64 %15, 1
  %24 = icmp eq i64 %23, %2
  br i1 %24, label %21, label %14

25:                                               ; preds = %33, %16
  %26 = phi i64 [ 0, %16 ], [ %34, %33 ]
  %27 = mul i64 %26, %4
  %28 = getelementptr inbounds i8, i8* %19, i64 %27
  %29 = bitcast i8* %28 to float*
  %30 = mul i64 %26, %7
  %31 = getelementptr inbounds i8, i8* %20, i64 %30
  %32 = bitcast i8* %31 to i32*
  br i1 %13, label %33, label %36

33:                                               ; preds = %181, %25
  %34 = add nuw i64 %26, 1
  %35 = icmp eq i64 %34, %1
  br i1 %35, label %22, label %25

36:                                               ; preds = %25, %181
  %37 = phi i64 [ %186, %181 ], [ 0, %25 ]
  %38 = mul i64 %37, 3
  %39 = getelementptr inbounds float, float* %29, i64 %38
  %40 = bitcast float* %39 to i32*
  %41 = load i32, i32* %40, align 4
  %42 = icmp slt i32 %41, 0
  %43 = and i32 %41, 2147483647
  %44 = and i32 %41, 2139095040
  %45 = icmp eq i32 %44, 2139095040
  br i1 %45, label %46, label %60

46:                                               ; preds = %36
  %47 = and i32 %41, 8388607
  %48 = icmp eq i32 %47, 0
  br i1 %48, label %58, label %49

49:                                               ; preds = %46
  %50 = lshr i32 %41, 17
  %51 = lshr i32 %41, 11
  %52 = lshr i32 %41, 6
  %53 = or i32 %51, %41
  %54 = or i32 %53, %50
  %55 = or i32 %54, %52
  %56 = and i32 %55, 63
  %57 = or i32 %56, 1984
  br label %83

58:                                               ; preds = %46
  %59 = select i1 %42, i32 0, i32 1984
  br label %83

60:                                               ; preds = %36
  br i1 %42, label %83, label %61

61:                                               ; preds = %60
  %62 = icmp ugt i32 %43, 1199439872
  br i1 %62, label %83, label %63

63:                                               ; preds = %61
  %64 = icmp ult i32 %43, 889192576
  br i1 %64, label %83, label %65

65:                                               ; preds = %63
  %66 = icmp ult i32 %43, 947912704
  br i1 %66, label %67, label %73

67:                                               ; preds = %65
  %68 = lshr i32 %43, 23
  %69 = sub nuw nsw i32 113, %68
  %70 = and i32 %41, 8388607
  %71 = or i32 %70, 8388608
  %72 = lshr i32 %71, %69
  br label %75

73:                                               ; preds = %65
  %74 = add nsw i32 %43, -939524096
  br label %75

75:                                               ; preds = %73, %67
  %76 = phi i32 [ %72, %67 ], [ %74, %73 ]
  %77 = add nuw i32 %76, 65535
  %78 = lshr i32 %76, 17
  %79 = and i32 %78, 1
  %80 = add nuw i32 %77, %79
  %81 = lshr i32 %80, 17
  %82 = and i32 %81, 2047
  br label %83

83:                                               ; preds = %49, %58, %60, %61, %63, %75
  %84 = phi i32 [ %57, %49 ], [ %82, %75 ], [ %59, %58 ], [ 0, %60 ], [ 1983, %61 ], [ 0, %63 ]
  %85 = and i32 %84, 65535
  %86 = add i64 %38, 1
  %87 = getelementptr inbounds float, float* %29, i64 %86
  %88 = bitcast float* %87 to i32*
  %89 = load i32, i32* %88, align 4
  %90 = icmp slt i32 %89, 0
  %91 = and i32 %89, 2147483647
  %92 = and i32 %89, 2139095040
  %93 = icmp eq i32 %92, 2139095040
  br i1 %93, label %94, label %108

94:                                               ; preds = %83
  %95 = and i32 %89, 8388607
  %96 = icmp eq i32 %95, 0
  br i1 %96, label %106, label %97

97:                                               ; preds = %94
  %98 = lshr i32 %89, 17
  %99 = lshr i32 %89, 11
  %100 = lshr i32 %89, 6
  %101 = or i32 %99, %89
  %102 = or i32 %101, %98
  %103 = or i32 %102, %100
  %104 = and i32 %103, 63
  %105 = or i32 %104, 1984
  br label %131

106:                                              ; preds = %94
  %107 = select i1 %90, i32 0, i32 1984
  br label %131

108:                                              ; preds = %83
  br i1 %90, label %131, label %109

109:                                              ; preds = %108
  %110 = icmp ugt i32 %91, 1199439872
  br i1 %110, label %131, label %111

111:                                              ; preds = %109
  %112 = icmp ult i32 %91, 889192576
  br i1 %112, label %131, label %113

113:                                              ; preds = %111
  %114 = icmp ult i32 %91, 947912704
  br i1 %114, label %115, label %121

115:                                              ; preds = %113
  %116 = lshr i32 %91, 23
  %117 = sub nuw nsw i32 113, %116
  %118 = and i32 %89, 8388607
  %119 = or i32 %118, 8388608
  %120 = lshr i32 %119, %117
  br label %123

121:                                              ; preds = %113
  %122 = add nsw i32 %91, -939524096
  br label %123

123:                                              ; preds = %121, %115
  %124 = phi i32 [ %120, %115 ], [ %122, %121 ]
  %125 = add nuw i32 %124, 65535
  %126 = lshr i32 %124, 17
  %127 = and i32 %126, 1
  %128 = add nuw i32 %125, %127
  %129 = lshr i32 %128, 17
  %130 = and i32 %129, 2047
  br label %131

131:                                              ; preds = %97, %106, %108, %109, %111, %123
  %132 = phi i32 [ %105, %97 ], [ %130, %123 ], [ %107, %106 ], [ 0, %108 ], [ 1983, %109 ], [ 0, %111 ]
  %133 = shl i32 %132, 11
  %134 = and i32 %133, 134215680
  %135 = or i32 %134, %85
  %136 = add i64 %38, 2
  %137 = getelementptr inbounds float, float* %29, i64 %136
  %138 = bitcast float* %137 to i32*
  %139 = load i32, i32* %138, align 4
  %140 = icmp slt i32 %139, 0
  %141 = and i32 %139, 2147483647
  %142 = and i32 %139, 2139095040
  %143 = icmp eq i32 %142, 2139095040
  br i1 %143, label %144, label %158

144:                                              ; preds = %131
  %145 = and i32 %139, 8388607
  %146 = icmp eq i32 %145, 0
  br i1 %146, label %156, label %147

147:                                              ; preds = %144
  %148 = lshr i32 %139, 18
  %149 = lshr i32 %139, 13
  %150 = lshr i32 %139, 3
  %151 = or i32 %149, %139
  %152 = or i32 %151, %148
  %153 = or i32 %152, %150
  %154 = and i32 %153, 31
  %155 = or i32 %154, 992
  br label %181

156:                                              ; preds = %144
  %157 = select i1 %140, i32 0, i32 992
  br label %181

158:                                              ; preds = %131
  br i1 %140, label %181, label %159

159:                                              ; preds = %158
  %160 = icmp ugt i32 %141, 1199308800
  br i1 %160, label %181, label %161

161:                                              ; preds = %159
  %162 = icmp ult i32 %141, 897581120
  br i1 %162, label %181, label %163

163:                                              ; preds = %161
  %164 = icmp ult i32 %141, 947912704
  br i1 %164, label %165, label %171

165:                                              ; preds = %163
  %166 = lshr i32 %141, 23
  %167 = sub nuw nsw i32 113, %166
  %168 = and i32 %139, 8388607
  %169 = or i32 %168, 8388608
  %170 = lshr i32 %169, %167
  br label %173

171:                                              ; preds = %163
  %172 = add nsw i32 %141, -939524096
  br label %173

173:                                              ; preds = %171, %165
  %174 = phi i32 [ %170, %165 ], [ %172, %171 ]
  %175 = add nuw i32 %174, 131071
  %176 = lshr i32 %174, 18
  %177 = and i32 %176, 1
  %178 = add nuw i32 %175, %177
  %179 = lshr i32 %178, 18
  %180 = and i32 %179, 1023
  br label %181

181:                                              ; preds = %147, %156, %158, %159, %161, %173
  %182 = phi i32 [ %155, %147 ], [ %180, %173 ], [ %157, %156 ], [ 0, %158 ], [ 991, %159 ], [ 0, %161 ]
  %183 = shl i32 %182, 22
  %184 = or i32 %135, %183
  %185 = getelementptr inbounds i32, i32* %32, i64 %37
  store i32 %184, i32* %185, align 4
  %186 = add nuw i64 %37, 1
  %187 = icmp eq i64 %186, %0
  br i1 %187, label %33, label %36
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @_ZN5angle16LoadG8R24ToR24G8EmmmPKhmmPhmm(i64, i64, i64, i8* nocapture readonly, i64, i64, i8* nocapture, i64, i64) local_unnamed_addr #1 {
  %10 = icmp eq i64 %2, 0
  br i1 %10, label %39, label %11

11:                                               ; preds = %9
  %12 = icmp eq i64 %1, 0
  %13 = icmp eq i64 %0, 0
  %14 = shl i64 %0, 2
  %15 = add i64 %0, -8
  %16 = lshr i64 %15, 3
  %17 = add nuw nsw i64 %16, 1
  %18 = icmp ult i64 %0, 8
  %19 = and i64 %0, -8
  %20 = and i64 %17, 1
  %21 = icmp eq i64 %16, 0
  %22 = sub nuw nsw i64 %17, %20
  %23 = icmp eq i64 %20, 0
  %24 = icmp eq i64 %19, %0
  %25 = and i64 %0, 1
  %26 = icmp eq i64 %25, 0
  %27 = sub i64 0, %0
  br label %28

28:                                               ; preds = %40, %11
  %29 = phi i64 [ 0, %11 ], [ %41, %40 ]
  %30 = mul i64 %29, %8
  %31 = add i64 %14, %30
  %32 = mul i64 %29, %5
  %33 = add i64 %14, %32
  br i1 %12, label %40, label %34

34:                                               ; preds = %28
  %35 = mul i64 %29, %5
  %36 = mul i64 %29, %8
  %37 = getelementptr inbounds i8, i8* %3, i64 %35
  %38 = getelementptr inbounds i8, i8* %6, i64 %36
  br label %43

39:                                               ; preds = %40, %9
  ret void

40:                                               ; preds = %140, %28
  %41 = add nuw i64 %29, 1
  %42 = icmp eq i64 %41, %2
  br i1 %42, label %39, label %28

43:                                               ; preds = %140, %34
  %44 = phi i64 [ 0, %34 ], [ %141, %140 ]
  %45 = mul i64 %44, %7
  %46 = add i64 %30, %45
  %47 = getelementptr i8, i8* %6, i64 %46
  %48 = add i64 %31, %45
  %49 = getelementptr i8, i8* %6, i64 %48
  %50 = mul i64 %44, %4
  %51 = add i64 %32, %50
  %52 = getelementptr i8, i8* %3, i64 %51
  %53 = add i64 %33, %50
  %54 = getelementptr i8, i8* %3, i64 %53
  %55 = mul i64 %44, %4
  %56 = getelementptr inbounds i8, i8* %37, i64 %55
  %57 = bitcast i8* %56 to i32*
  %58 = mul i64 %44, %7
  %59 = getelementptr inbounds i8, i8* %38, i64 %58
  %60 = bitcast i8* %59 to i32*
  br i1 %13, label %140, label %61

61:                                               ; preds = %43
  br i1 %18, label %62, label %76

62:                                               ; preds = %139, %76, %61
  %63 = phi i64 [ 0, %76 ], [ 0, %61 ], [ %19, %139 ]
  %64 = xor i64 %63, -1
  br i1 %26, label %73, label %65

65:                                               ; preds = %62
  %66 = getelementptr inbounds i32, i32* %57, i64 %63
  %67 = load i32, i32* %66, align 4
  %68 = lshr i32 %67, 8
  %69 = shl i32 %67, 24
  %70 = or i32 %68, %69
  %71 = getelementptr inbounds i32, i32* %60, i64 %63
  store i32 %70, i32* %71, align 4
  %72 = or i64 %63, 1
  br label %73

73:                                               ; preds = %65, %62
  %74 = phi i64 [ %72, %65 ], [ %63, %62 ]
  %75 = icmp eq i64 %64, %27
  br i1 %75, label %140, label %143

76:                                               ; preds = %61
  %77 = icmp ult i8* %47, %54
  %78 = icmp ult i8* %52, %49
  %79 = and i1 %77, %78
  br i1 %79, label %62, label %80

80:                                               ; preds = %76
  br i1 %21, label %120, label %81

81:                                               ; preds = %80, %81
  %82 = phi i64 [ %117, %81 ], [ 0, %80 ]
  %83 = phi i64 [ %118, %81 ], [ %22, %80 ]
  %84 = getelementptr inbounds i32, i32* %57, i64 %82
  %85 = bitcast i32* %84 to <4 x i32>*
  %86 = load <4 x i32>, <4 x i32>* %85, align 4, !alias.scope !196
  %87 = getelementptr inbounds i32, i32* %84, i64 4
  %88 = bitcast i32* %87 to <4 x i32>*
  %89 = load <4 x i32>, <4 x i32>* %88, align 4, !alias.scope !196
  %90 = lshr <4 x i32> %86, <i32 8, i32 8, i32 8, i32 8>
  %91 = lshr <4 x i32> %89, <i32 8, i32 8, i32 8, i32 8>
  %92 = shl <4 x i32> %86, <i32 24, i32 24, i32 24, i32 24>
  %93 = shl <4 x i32> %89, <i32 24, i32 24, i32 24, i32 24>
  %94 = or <4 x i32> %90, %92
  %95 = or <4 x i32> %91, %93
  %96 = getelementptr inbounds i32, i32* %60, i64 %82
  %97 = bitcast i32* %96 to <4 x i32>*
  store <4 x i32> %94, <4 x i32>* %97, align 4, !alias.scope !199, !noalias !196
  %98 = getelementptr inbounds i32, i32* %96, i64 4
  %99 = bitcast i32* %98 to <4 x i32>*
  store <4 x i32> %95, <4 x i32>* %99, align 4, !alias.scope !199, !noalias !196
  %100 = or i64 %82, 8
  %101 = getelementptr inbounds i32, i32* %57, i64 %100
  %102 = bitcast i32* %101 to <4 x i32>*
  %103 = load <4 x i32>, <4 x i32>* %102, align 4, !alias.scope !196
  %104 = getelementptr inbounds i32, i32* %101, i64 4
  %105 = bitcast i32* %104 to <4 x i32>*
  %106 = load <4 x i32>, <4 x i32>* %105, align 4, !alias.scope !196
  %107 = lshr <4 x i32> %103, <i32 8, i32 8, i32 8, i32 8>
  %108 = lshr <4 x i32> %106, <i32 8, i32 8, i32 8, i32 8>
  %109 = shl <4 x i32> %103, <i32 24, i32 24, i32 24, i32 24>
  %110 = shl <4 x i32> %106, <i32 24, i32 24, i32 24, i32 24>
  %111 = or <4 x i32> %107, %109
  %112 = or <4 x i32> %108, %110
  %113 = getelementptr inbounds i32, i32* %60, i64 %100
  %114 = bitcast i32* %113 to <4 x i32>*
  store <4 x i32> %111, <4 x i32>* %114, align 4, !alias.scope !199, !noalias !196
  %115 = getelementptr inbounds i32, i32* %113, i64 4
  %116 = bitcast i32* %115 to <4 x i32>*
  store <4 x i32> %112, <4 x i32>* %116, align 4, !alias.scope !199, !noalias !196
  %117 = add i64 %82, 16
  %118 = add i64 %83, -2
  %119 = icmp eq i64 %118, 0
  br i1 %119, label %120, label %81, !llvm.loop !201

120:                                              ; preds = %81, %80
  %121 = phi i64 [ 0, %80 ], [ %117, %81 ]
  br i1 %23, label %139, label %122

122:                                              ; preds = %120
  %123 = getelementptr inbounds i32, i32* %57, i64 %121
  %124 = bitcast i32* %123 to <4 x i32>*
  %125 = load <4 x i32>, <4 x i32>* %124, align 4, !alias.scope !196
  %126 = getelementptr inbounds i32, i32* %123, i64 4
  %127 = bitcast i32* %126 to <4 x i32>*
  %128 = load <4 x i32>, <4 x i32>* %127, align 4, !alias.scope !196
  %129 = lshr <4 x i32> %125, <i32 8, i32 8, i32 8, i32 8>
  %130 = lshr <4 x i32> %128, <i32 8, i32 8, i32 8, i32 8>
  %131 = shl <4 x i32> %125, <i32 24, i32 24, i32 24, i32 24>
  %132 = shl <4 x i32> %128, <i32 24, i32 24, i32 24, i32 24>
  %133 = or <4 x i32> %129, %131
  %134 = or <4 x i32> %130, %132
  %135 = getelementptr inbounds i32, i32* %60, i64 %121
  %136 = bitcast i32* %135 to <4 x i32>*
  store <4 x i32> %133, <4 x i32>* %136, align 4, !alias.scope !199, !noalias !196
  %137 = getelementptr inbounds i32, i32* %135, i64 4
  %138 = bitcast i32* %137 to <4 x i32>*
  store <4 x i32> %134, <4 x i32>* %138, align 4, !alias.scope !199, !noalias !196
  br label %139

139:                                              ; preds = %120, %122
  br i1 %24, label %140, label %62

140:                                              ; preds = %73, %143, %139, %43
  %141 = add nuw i64 %44, 1
  %142 = icmp eq i64 %141, %1
  br i1 %142, label %40, label %43

143:                                              ; preds = %73, %143
  %144 = phi i64 [ %158, %143 ], [ %74, %73 ]
  %145 = getelementptr inbounds i32, i32* %57, i64 %144
  %146 = load i32, i32* %145, align 4
  %147 = lshr i32 %146, 8
  %148 = shl i32 %146, 24
  %149 = or i32 %147, %148
  %150 = getelementptr inbounds i32, i32* %60, i64 %144
  store i32 %149, i32* %150, align 4
  %151 = add nuw i64 %144, 1
  %152 = getelementptr inbounds i32, i32* %57, i64 %151
  %153 = load i32, i32* %152, align 4
  %154 = lshr i32 %153, 8
  %155 = shl i32 %153, 24
  %156 = or i32 %154, %155
  %157 = getelementptr inbounds i32, i32* %60, i64 %151
  store i32 %156, i32* %157, align 4
  %158 = add nuw i64 %144, 2
  %159 = icmp eq i64 %158, %0
  br i1 %159, label %140, label %143, !llvm.loop !202
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @_ZN5angle20LoadD24S8ToD32FS8X24EmmmPKhmmPhmm(i64, i64, i64, i8* nocapture readonly, i64, i64, i8* nocapture, i64, i64) local_unnamed_addr #1 {
  %10 = icmp eq i64 %2, 0
  br i1 %10, label %21, label %11

11:                                               ; preds = %9
  %12 = icmp eq i64 %1, 0
  %13 = icmp eq i64 %0, 0
  br label %14

14:                                               ; preds = %22, %11
  %15 = phi i64 [ 0, %11 ], [ %23, %22 ]
  br i1 %12, label %22, label %16

16:                                               ; preds = %14
  %17 = mul i64 %15, %5
  %18 = mul i64 %15, %8
  %19 = getelementptr inbounds i8, i8* %3, i64 %17
  %20 = getelementptr inbounds i8, i8* %6, i64 %18
  br label %25

21:                                               ; preds = %22, %9
  ret void

22:                                               ; preds = %35, %14
  %23 = add nuw i64 %15, 1
  %24 = icmp eq i64 %23, %2
  br i1 %24, label %21, label %14

25:                                               ; preds = %35, %16
  %26 = phi i64 [ 0, %16 ], [ %36, %35 ]
  %27 = mul i64 %26, %4
  %28 = getelementptr inbounds i8, i8* %19, i64 %27
  %29 = bitcast i8* %28 to i32*
  %30 = mul i64 %26, %7
  %31 = getelementptr inbounds i8, i8* %20, i64 %30
  %32 = bitcast i8* %31 to float*
  %33 = getelementptr inbounds i8, i8* %31, i64 4
  %34 = bitcast i8* %33 to i32*
  br i1 %13, label %35, label %38

35:                                               ; preds = %38, %25
  %36 = add nuw i64 %26, 1
  %37 = icmp eq i64 %36, %1
  br i1 %37, label %22, label %25

38:                                               ; preds = %25, %38
  %39 = phi i64 [ %50, %38 ], [ 0, %25 ]
  %40 = getelementptr inbounds i32, i32* %29, i64 %39
  %41 = load i32, i32* %40, align 4
  %42 = and i32 %41, 16777215
  %43 = uitofp i32 %42 to float
  %44 = fdiv float %43, 0x416FFFFFE0000000
  %45 = shl i64 %39, 1
  %46 = getelementptr inbounds float, float* %32, i64 %45
  store float %44, float* %46, align 4
  %47 = load i32, i32* %40, align 4
  %48 = and i32 %47, -16777216
  %49 = getelementptr inbounds i32, i32* %34, i64 %45
  store i32 %48, i32* %49, align 4
  %50 = add nuw i64 %39, 1
  %51 = icmp eq i64 %50, %0
  br i1 %51, label %35, label %38
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @_ZN5angle15LoadD24S8ToD32FEmmmPKhmmPhmm(i64, i64, i64, i8* nocapture readonly, i64, i64, i8* nocapture, i64, i64) local_unnamed_addr #1 {
  %10 = icmp eq i64 %2, 0
  br i1 %10, label %39, label %11

11:                                               ; preds = %9
  %12 = icmp eq i64 %1, 0
  %13 = icmp eq i64 %0, 0
  %14 = shl i64 %0, 2
  %15 = add i64 %0, -4
  %16 = lshr i64 %15, 2
  %17 = add nuw nsw i64 %16, 1
  %18 = icmp ult i64 %0, 4
  %19 = and i64 %0, -4
  %20 = and i64 %17, 1
  %21 = icmp eq i64 %16, 0
  %22 = sub nuw nsw i64 %17, %20
  %23 = icmp eq i64 %20, 0
  %24 = icmp eq i64 %19, %0
  %25 = and i64 %0, 1
  %26 = icmp eq i64 %25, 0
  %27 = sub i64 0, %0
  br label %28

28:                                               ; preds = %40, %11
  %29 = phi i64 [ 0, %11 ], [ %41, %40 ]
  %30 = mul i64 %29, %8
  %31 = add i64 %14, %30
  %32 = mul i64 %29, %5
  %33 = add i64 %14, %32
  br i1 %12, label %40, label %34

34:                                               ; preds = %28
  %35 = mul i64 %29, %5
  %36 = mul i64 %29, %8
  %37 = getelementptr inbounds i8, i8* %3, i64 %35
  %38 = getelementptr inbounds i8, i8* %6, i64 %36
  br label %43

39:                                               ; preds = %40, %9
  ret void

40:                                               ; preds = %116, %28
  %41 = add nuw i64 %29, 1
  %42 = icmp eq i64 %41, %2
  br i1 %42, label %39, label %28

43:                                               ; preds = %116, %34
  %44 = phi i64 [ 0, %34 ], [ %117, %116 ]
  %45 = mul i64 %44, %7
  %46 = add i64 %30, %45
  %47 = getelementptr i8, i8* %6, i64 %46
  %48 = add i64 %31, %45
  %49 = getelementptr i8, i8* %6, i64 %48
  %50 = mul i64 %44, %4
  %51 = add i64 %32, %50
  %52 = getelementptr i8, i8* %3, i64 %51
  %53 = add i64 %33, %50
  %54 = getelementptr i8, i8* %3, i64 %53
  %55 = mul i64 %44, %4
  %56 = getelementptr inbounds i8, i8* %37, i64 %55
  %57 = bitcast i8* %56 to i32*
  %58 = mul i64 %44, %7
  %59 = getelementptr inbounds i8, i8* %38, i64 %58
  %60 = bitcast i8* %59 to float*
  br i1 %13, label %116, label %61

61:                                               ; preds = %43
  br i1 %18, label %62, label %76

62:                                               ; preds = %115, %76, %61
  %63 = phi i64 [ 0, %76 ], [ 0, %61 ], [ %19, %115 ]
  %64 = xor i64 %63, -1
  br i1 %26, label %73, label %65

65:                                               ; preds = %62
  %66 = getelementptr inbounds i32, i32* %57, i64 %63
  %67 = load i32, i32* %66, align 4
  %68 = lshr i32 %67, 8
  %69 = uitofp i32 %68 to float
  %70 = fdiv float %69, 0x416FFFFFE0000000
  %71 = getelementptr inbounds float, float* %60, i64 %63
  store float %70, float* %71, align 4
  %72 = or i64 %63, 1
  br label %73

73:                                               ; preds = %65, %62
  %74 = phi i64 [ %72, %65 ], [ %63, %62 ]
  %75 = icmp eq i64 %64, %27
  br i1 %75, label %116, label %119

76:                                               ; preds = %61
  %77 = icmp ult i8* %47, %54
  %78 = icmp ult i8* %52, %49
  %79 = and i1 %77, %78
  br i1 %79, label %62, label %80

80:                                               ; preds = %76
  br i1 %21, label %104, label %81

81:                                               ; preds = %80, %81
  %82 = phi i64 [ %101, %81 ], [ 0, %80 ]
  %83 = phi i64 [ %102, %81 ], [ %22, %80 ]
  %84 = getelementptr inbounds i32, i32* %57, i64 %82
  %85 = bitcast i32* %84 to <4 x i32>*
  %86 = load <4 x i32>, <4 x i32>* %85, align 4, !alias.scope !203
  %87 = lshr <4 x i32> %86, <i32 8, i32 8, i32 8, i32 8>
  %88 = uitofp <4 x i32> %87 to <4 x float>
  %89 = fdiv <4 x float> %88, <float 0x416FFFFFE0000000, float 0x416FFFFFE0000000, float 0x416FFFFFE0000000, float 0x416FFFFFE0000000>
  %90 = getelementptr inbounds float, float* %60, i64 %82
  %91 = bitcast float* %90 to <4 x float>*
  store <4 x float> %89, <4 x float>* %91, align 4, !alias.scope !206, !noalias !203
  %92 = or i64 %82, 4
  %93 = getelementptr inbounds i32, i32* %57, i64 %92
  %94 = bitcast i32* %93 to <4 x i32>*
  %95 = load <4 x i32>, <4 x i32>* %94, align 4, !alias.scope !203
  %96 = lshr <4 x i32> %95, <i32 8, i32 8, i32 8, i32 8>
  %97 = uitofp <4 x i32> %96 to <4 x float>
  %98 = fdiv <4 x float> %97, <float 0x416FFFFFE0000000, float 0x416FFFFFE0000000, float 0x416FFFFFE0000000, float 0x416FFFFFE0000000>
  %99 = getelementptr inbounds float, float* %60, i64 %92
  %100 = bitcast float* %99 to <4 x float>*
  store <4 x float> %98, <4 x float>* %100, align 4, !alias.scope !206, !noalias !203
  %101 = add i64 %82, 8
  %102 = add i64 %83, -2
  %103 = icmp eq i64 %102, 0
  br i1 %103, label %104, label %81, !llvm.loop !208

104:                                              ; preds = %81, %80
  %105 = phi i64 [ 0, %80 ], [ %101, %81 ]
  br i1 %23, label %115, label %106

106:                                              ; preds = %104
  %107 = getelementptr inbounds i32, i32* %57, i64 %105
  %108 = bitcast i32* %107 to <4 x i32>*
  %109 = load <4 x i32>, <4 x i32>* %108, align 4, !alias.scope !203
  %110 = lshr <4 x i32> %109, <i32 8, i32 8, i32 8, i32 8>
  %111 = uitofp <4 x i32> %110 to <4 x float>
  %112 = fdiv <4 x float> %111, <float 0x416FFFFFE0000000, float 0x416FFFFFE0000000, float 0x416FFFFFE0000000, float 0x416FFFFFE0000000>
  %113 = getelementptr inbounds float, float* %60, i64 %105
  %114 = bitcast float* %113 to <4 x float>*
  store <4 x float> %112, <4 x float>* %114, align 4, !alias.scope !206, !noalias !203
  br label %115

115:                                              ; preds = %104, %106
  br i1 %24, label %116, label %62

116:                                              ; preds = %73, %119, %115, %43
  %117 = add nuw i64 %44, 1
  %118 = icmp eq i64 %117, %1
  br i1 %118, label %40, label %43

119:                                              ; preds = %73, %119
  %120 = phi i64 [ %134, %119 ], [ %74, %73 ]
  %121 = getelementptr inbounds i32, i32* %57, i64 %120
  %122 = load i32, i32* %121, align 4
  %123 = lshr i32 %122, 8
  %124 = uitofp i32 %123 to float
  %125 = fdiv float %124, 0x416FFFFFE0000000
  %126 = getelementptr inbounds float, float* %60, i64 %120
  store float %125, float* %126, align 4
  %127 = add nuw i64 %120, 1
  %128 = getelementptr inbounds i32, i32* %57, i64 %127
  %129 = load i32, i32* %128, align 4
  %130 = lshr i32 %129, 8
  %131 = uitofp i32 %130 to float
  %132 = fdiv float %131, 0x416FFFFFE0000000
  %133 = getelementptr inbounds float, float* %60, i64 %127
  store float %132, float* %133, align 4
  %134 = add nuw i64 %120, 2
  %135 = icmp eq i64 %134, %0
  br i1 %135, label %116, label %119, !llvm.loop !209
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @_ZN5angle16LoadD32ToD32FX32EmmmPKhmmPhmm(i64, i64, i64, i8* nocapture readonly, i64, i64, i8* nocapture, i64, i64) local_unnamed_addr #1 {
  %10 = icmp eq i64 %2, 0
  br i1 %10, label %24, label %11

11:                                               ; preds = %9
  %12 = icmp eq i64 %1, 0
  %13 = and i64 %0, 1
  %14 = icmp eq i64 %0, 1
  %15 = sub i64 %0, %13
  %16 = icmp eq i64 %13, 0
  br label %17

17:                                               ; preds = %25, %11
  %18 = phi i64 [ 0, %11 ], [ %26, %25 ]
  br i1 %12, label %25, label %19

19:                                               ; preds = %17
  %20 = mul i64 %18, %5
  %21 = mul i64 %18, %8
  %22 = getelementptr inbounds i8, i8* %3, i64 %20
  %23 = getelementptr inbounds i8, i8* %6, i64 %21
  br label %28

24:                                               ; preds = %25, %9
  ret void

25:                                               ; preds = %45, %17
  %26 = add nuw i64 %18, 1
  %27 = icmp eq i64 %26, %2
  br i1 %27, label %24, label %17

28:                                               ; preds = %45, %19
  %29 = phi i64 [ 0, %19 ], [ %46, %45 ]
  %30 = mul i64 %29, %4
  %31 = getelementptr inbounds i8, i8* %22, i64 %30
  %32 = bitcast i8* %31 to i32*
  %33 = mul i64 %29, %7
  %34 = getelementptr inbounds i8, i8* %23, i64 %33
  %35 = bitcast i8* %34 to float*
  switch i64 %0, label %48 [
    i64 0, label %45
    i64 1, label %36
  ]

36:                                               ; preds = %48, %28
  %37 = phi i64 [ 0, %28 ], [ %64, %48 ]
  br i1 %16, label %45, label %38

38:                                               ; preds = %36
  %39 = getelementptr inbounds i32, i32* %32, i64 %37
  %40 = load i32, i32* %39, align 4
  %41 = uitofp i32 %40 to float
  %42 = fmul float %41, 0x3DF0000000000000
  %43 = shl i64 %37, 1
  %44 = getelementptr inbounds float, float* %35, i64 %43
  store float %42, float* %44, align 4
  br label %45

45:                                               ; preds = %38, %36, %28
  %46 = add nuw i64 %29, 1
  %47 = icmp eq i64 %46, %1
  br i1 %47, label %25, label %28

48:                                               ; preds = %28, %48
  %49 = phi i64 [ %64, %48 ], [ 0, %28 ]
  %50 = phi i64 [ %65, %48 ], [ %15, %28 ]
  %51 = getelementptr inbounds i32, i32* %32, i64 %49
  %52 = load i32, i32* %51, align 4
  %53 = uitofp i32 %52 to float
  %54 = fmul float %53, 0x3DF0000000000000
  %55 = shl i64 %49, 1
  %56 = getelementptr inbounds float, float* %35, i64 %55
  store float %54, float* %56, align 4
  %57 = or i64 %49, 1
  %58 = getelementptr inbounds i32, i32* %32, i64 %57
  %59 = load i32, i32* %58, align 4
  %60 = uitofp i32 %59 to float
  %61 = fmul float %60, 0x3DF0000000000000
  %62 = shl i64 %57, 1
  %63 = getelementptr inbounds float, float* %35, i64 %62
  store float %61, float* %63, align 4
  %64 = add nuw i64 %49, 2
  %65 = add i64 %50, -2
  %66 = icmp eq i64 %65, 0
  br i1 %66, label %36, label %48
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @_ZN5angle13LoadD32ToD32FEmmmPKhmmPhmm(i64, i64, i64, i8* nocapture readonly, i64, i64, i8* nocapture, i64, i64) local_unnamed_addr #1 {
  %10 = icmp eq i64 %2, 0
  br i1 %10, label %38, label %11

11:                                               ; preds = %9
  %12 = icmp eq i64 %1, 0
  %13 = icmp eq i64 %0, 0
  %14 = shl i64 %0, 2
  %15 = add i64 %0, -8
  %16 = lshr i64 %15, 3
  %17 = add nuw nsw i64 %16, 1
  %18 = icmp ult i64 %0, 8
  %19 = and i64 %0, -8
  %20 = and i64 %17, 1
  %21 = icmp eq i64 %16, 0
  %22 = sub nuw nsw i64 %17, %20
  %23 = icmp eq i64 %20, 0
  %24 = icmp eq i64 %19, %0
  %25 = and i64 %0, 3
  %26 = icmp eq i64 %25, 0
  br label %27

27:                                               ; preds = %39, %11
  %28 = phi i64 [ 0, %11 ], [ %40, %39 ]
  %29 = mul i64 %28, %8
  %30 = add i64 %14, %29
  %31 = mul i64 %28, %5
  %32 = add i64 %14, %31
  br i1 %12, label %39, label %33

33:                                               ; preds = %27
  %34 = mul i64 %28, %5
  %35 = mul i64 %28, %8
  %36 = getelementptr inbounds i8, i8* %3, i64 %34
  %37 = getelementptr inbounds i8, i8* %6, i64 %35
  br label %42

38:                                               ; preds = %39, %9
  ret void

39:                                               ; preds = %137, %27
  %40 = add nuw i64 %28, 1
  %41 = icmp eq i64 %40, %2
  br i1 %41, label %38, label %27

42:                                               ; preds = %137, %33
  %43 = phi i64 [ 0, %33 ], [ %138, %137 ]
  %44 = mul i64 %43, %7
  %45 = add i64 %29, %44
  %46 = getelementptr i8, i8* %6, i64 %45
  %47 = add i64 %30, %44
  %48 = getelementptr i8, i8* %6, i64 %47
  %49 = mul i64 %43, %4
  %50 = add i64 %31, %49
  %51 = getelementptr i8, i8* %3, i64 %50
  %52 = add i64 %32, %49
  %53 = getelementptr i8, i8* %3, i64 %52
  %54 = mul i64 %43, %4
  %55 = getelementptr inbounds i8, i8* %36, i64 %54
  %56 = bitcast i8* %55 to i32*
  %57 = mul i64 %43, %7
  %58 = getelementptr inbounds i8, i8* %37, i64 %57
  %59 = bitcast i8* %58 to float*
  br i1 %13, label %137, label %60

60:                                               ; preds = %42
  br i1 %18, label %61, label %79

61:                                               ; preds = %136, %79, %60
  %62 = phi i64 [ 0, %79 ], [ 0, %60 ], [ %19, %136 ]
  %63 = xor i64 %62, -1
  %64 = add i64 %63, %0
  br i1 %26, label %76, label %65

65:                                               ; preds = %61, %65
  %66 = phi i64 [ %73, %65 ], [ %62, %61 ]
  %67 = phi i64 [ %74, %65 ], [ %25, %61 ]
  %68 = getelementptr inbounds i32, i32* %56, i64 %66
  %69 = load i32, i32* %68, align 4
  %70 = uitofp i32 %69 to float
  %71 = fmul float %70, 0x3DF0000000000000
  %72 = getelementptr inbounds float, float* %59, i64 %66
  store float %71, float* %72, align 4
  %73 = add nuw i64 %66, 1
  %74 = add i64 %67, -1
  %75 = icmp eq i64 %74, 0
  br i1 %75, label %76, label %65, !llvm.loop !210

76:                                               ; preds = %65, %61
  %77 = phi i64 [ %62, %61 ], [ %73, %65 ]
  %78 = icmp ult i64 %64, 3
  br i1 %78, label %137, label %140

79:                                               ; preds = %60
  %80 = icmp ult i8* %46, %53
  %81 = icmp ult i8* %51, %48
  %82 = and i1 %80, %81
  br i1 %82, label %61, label %83

83:                                               ; preds = %79
  br i1 %21, label %119, label %84

84:                                               ; preds = %83, %84
  %85 = phi i64 [ %116, %84 ], [ 0, %83 ]
  %86 = phi i64 [ %117, %84 ], [ %22, %83 ]
  %87 = getelementptr inbounds i32, i32* %56, i64 %85
  %88 = bitcast i32* %87 to <4 x i32>*
  %89 = load <4 x i32>, <4 x i32>* %88, align 4, !alias.scope !211
  %90 = getelementptr inbounds i32, i32* %87, i64 4
  %91 = bitcast i32* %90 to <4 x i32>*
  %92 = load <4 x i32>, <4 x i32>* %91, align 4, !alias.scope !211
  %93 = uitofp <4 x i32> %89 to <4 x float>
  %94 = uitofp <4 x i32> %92 to <4 x float>
  %95 = fmul <4 x float> %93, <float 0x3DF0000000000000, float 0x3DF0000000000000, float 0x3DF0000000000000, float 0x3DF0000000000000>
  %96 = fmul <4 x float> %94, <float 0x3DF0000000000000, float 0x3DF0000000000000, float 0x3DF0000000000000, float 0x3DF0000000000000>
  %97 = getelementptr inbounds float, float* %59, i64 %85
  %98 = bitcast float* %97 to <4 x float>*
  store <4 x float> %95, <4 x float>* %98, align 4, !alias.scope !214, !noalias !211
  %99 = getelementptr inbounds float, float* %97, i64 4
  %100 = bitcast float* %99 to <4 x float>*
  store <4 x float> %96, <4 x float>* %100, align 4, !alias.scope !214, !noalias !211
  %101 = or i64 %85, 8
  %102 = getelementptr inbounds i32, i32* %56, i64 %101
  %103 = bitcast i32* %102 to <4 x i32>*
  %104 = load <4 x i32>, <4 x i32>* %103, align 4, !alias.scope !211
  %105 = getelementptr inbounds i32, i32* %102, i64 4
  %106 = bitcast i32* %105 to <4 x i32>*
  %107 = load <4 x i32>, <4 x i32>* %106, align 4, !alias.scope !211
  %108 = uitofp <4 x i32> %104 to <4 x float>
  %109 = uitofp <4 x i32> %107 to <4 x float>
  %110 = fmul <4 x float> %108, <float 0x3DF0000000000000, float 0x3DF0000000000000, float 0x3DF0000000000000, float 0x3DF0000000000000>
  %111 = fmul <4 x float> %109, <float 0x3DF0000000000000, float 0x3DF0000000000000, float 0x3DF0000000000000, float 0x3DF0000000000000>
  %112 = getelementptr inbounds float, float* %59, i64 %101
  %113 = bitcast float* %112 to <4 x float>*
  store <4 x float> %110, <4 x float>* %113, align 4, !alias.scope !214, !noalias !211
  %114 = getelementptr inbounds float, float* %112, i64 4
  %115 = bitcast float* %114 to <4 x float>*
  store <4 x float> %111, <4 x float>* %115, align 4, !alias.scope !214, !noalias !211
  %116 = add i64 %85, 16
  %117 = add i64 %86, -2
  %118 = icmp eq i64 %117, 0
  br i1 %118, label %119, label %84, !llvm.loop !216

119:                                              ; preds = %84, %83
  %120 = phi i64 [ 0, %83 ], [ %116, %84 ]
  br i1 %23, label %136, label %121

121:                                              ; preds = %119
  %122 = getelementptr inbounds i32, i32* %56, i64 %120
  %123 = bitcast i32* %122 to <4 x i32>*
  %124 = load <4 x i32>, <4 x i32>* %123, align 4, !alias.scope !211
  %125 = getelementptr inbounds i32, i32* %122, i64 4
  %126 = bitcast i32* %125 to <4 x i32>*
  %127 = load <4 x i32>, <4 x i32>* %126, align 4, !alias.scope !211
  %128 = uitofp <4 x i32> %124 to <4 x float>
  %129 = uitofp <4 x i32> %127 to <4 x float>
  %130 = fmul <4 x float> %128, <float 0x3DF0000000000000, float 0x3DF0000000000000, float 0x3DF0000000000000, float 0x3DF0000000000000>
  %131 = fmul <4 x float> %129, <float 0x3DF0000000000000, float 0x3DF0000000000000, float 0x3DF0000000000000, float 0x3DF0000000000000>
  %132 = getelementptr inbounds float, float* %59, i64 %120
  %133 = bitcast float* %132 to <4 x float>*
  store <4 x float> %130, <4 x float>* %133, align 4, !alias.scope !214, !noalias !211
  %134 = getelementptr inbounds float, float* %132, i64 4
  %135 = bitcast float* %134 to <4 x float>*
  store <4 x float> %131, <4 x float>* %135, align 4, !alias.scope !214, !noalias !211
  br label %136

136:                                              ; preds = %119, %121
  br i1 %24, label %137, label %61

137:                                              ; preds = %76, %140, %136, %42
  %138 = add nuw i64 %43, 1
  %139 = icmp eq i64 %138, %1
  br i1 %139, label %39, label %42

140:                                              ; preds = %76, %140
  %141 = phi i64 [ %165, %140 ], [ %77, %76 ]
  %142 = getelementptr inbounds i32, i32* %56, i64 %141
  %143 = load i32, i32* %142, align 4
  %144 = uitofp i32 %143 to float
  %145 = fmul float %144, 0x3DF0000000000000
  %146 = getelementptr inbounds float, float* %59, i64 %141
  store float %145, float* %146, align 4
  %147 = add nuw i64 %141, 1
  %148 = getelementptr inbounds i32, i32* %56, i64 %147
  %149 = load i32, i32* %148, align 4
  %150 = uitofp i32 %149 to float
  %151 = fmul float %150, 0x3DF0000000000000
  %152 = getelementptr inbounds float, float* %59, i64 %147
  store float %151, float* %152, align 4
  %153 = add nuw i64 %141, 2
  %154 = getelementptr inbounds i32, i32* %56, i64 %153
  %155 = load i32, i32* %154, align 4
  %156 = uitofp i32 %155 to float
  %157 = fmul float %156, 0x3DF0000000000000
  %158 = getelementptr inbounds float, float* %59, i64 %153
  store float %157, float* %158, align 4
  %159 = add nuw i64 %141, 3
  %160 = getelementptr inbounds i32, i32* %56, i64 %159
  %161 = load i32, i32* %160, align 4
  %162 = uitofp i32 %161 to float
  %163 = fmul float %162, 0x3DF0000000000000
  %164 = getelementptr inbounds float, float* %59, i64 %159
  store float %163, float* %164, align 4
  %165 = add nuw i64 %141, 4
  %166 = icmp eq i64 %165, %0
  br i1 %166, label %137, label %140, !llvm.loop !217
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @_ZN5angle14LoadD32FToD32FEmmmPKhmmPhmm(i64, i64, i64, i8* nocapture readonly, i64, i64, i8* nocapture, i64, i64) local_unnamed_addr #1 {
  %10 = icmp eq i64 %2, 0
  br i1 %10, label %39, label %11

11:                                               ; preds = %9
  %12 = icmp eq i64 %1, 0
  %13 = icmp eq i64 %0, 0
  %14 = shl i64 %0, 2
  %15 = add i64 %0, -8
  %16 = lshr i64 %15, 3
  %17 = add nuw nsw i64 %16, 1
  %18 = icmp ult i64 %0, 8
  %19 = and i64 %0, -8
  %20 = and i64 %17, 1
  %21 = icmp eq i64 %16, 0
  %22 = sub nuw nsw i64 %17, %20
  %23 = icmp eq i64 %20, 0
  %24 = icmp eq i64 %19, %0
  %25 = and i64 %0, 1
  %26 = icmp eq i64 %25, 0
  %27 = sub i64 0, %0
  br label %28

28:                                               ; preds = %40, %11
  %29 = phi i64 [ 0, %11 ], [ %41, %40 ]
  %30 = mul i64 %29, %8
  %31 = add i64 %14, %30
  %32 = mul i64 %29, %5
  %33 = add i64 %14, %32
  br i1 %12, label %40, label %34

34:                                               ; preds = %28
  %35 = mul i64 %29, %5
  %36 = mul i64 %29, %8
  %37 = getelementptr inbounds i8, i8* %3, i64 %35
  %38 = getelementptr inbounds i8, i8* %6, i64 %36
  br label %43

39:                                               ; preds = %40, %9
  ret void

40:                                               ; preds = %147, %28
  %41 = add nuw i64 %29, 1
  %42 = icmp eq i64 %41, %2
  br i1 %42, label %39, label %28

43:                                               ; preds = %147, %34
  %44 = phi i64 [ 0, %34 ], [ %148, %147 ]
  %45 = mul i64 %44, %7
  %46 = add i64 %30, %45
  %47 = getelementptr i8, i8* %6, i64 %46
  %48 = add i64 %31, %45
  %49 = getelementptr i8, i8* %6, i64 %48
  %50 = mul i64 %44, %4
  %51 = add i64 %32, %50
  %52 = getelementptr i8, i8* %3, i64 %51
  %53 = add i64 %33, %50
  %54 = getelementptr i8, i8* %3, i64 %53
  %55 = mul i64 %44, %4
  %56 = getelementptr inbounds i8, i8* %37, i64 %55
  %57 = bitcast i8* %56 to float*
  %58 = mul i64 %44, %7
  %59 = getelementptr inbounds i8, i8* %38, i64 %58
  %60 = bitcast i8* %59 to float*
  br i1 %13, label %147, label %61

61:                                               ; preds = %43
  br i1 %18, label %62, label %77

62:                                               ; preds = %146, %77, %61
  %63 = phi i64 [ 0, %77 ], [ 0, %61 ], [ %19, %146 ]
  %64 = xor i64 %63, -1
  br i1 %26, label %74, label %65

65:                                               ; preds = %62
  %66 = getelementptr inbounds float, float* %57, i64 %63
  %67 = load float, float* %66, align 4
  %68 = fcmp ogt float %67, 0.000000e+00
  %69 = fcmp ogt float %67, 1.000000e+00
  %70 = select i1 %69, float 1.000000e+00, float %67
  %71 = select i1 %68, float %70, float 0.000000e+00
  %72 = getelementptr inbounds float, float* %60, i64 %63
  store float %71, float* %72, align 4
  %73 = or i64 %63, 1
  br label %74

74:                                               ; preds = %65, %62
  %75 = phi i64 [ %73, %65 ], [ %63, %62 ]
  %76 = icmp eq i64 %64, %27
  br i1 %76, label %147, label %150

77:                                               ; preds = %61
  %78 = icmp ult i8* %47, %54
  %79 = icmp ult i8* %52, %49
  %80 = and i1 %78, %79
  br i1 %80, label %62, label %81

81:                                               ; preds = %77
  br i1 %21, label %125, label %82

82:                                               ; preds = %81, %82
  %83 = phi i64 [ %122, %82 ], [ 0, %81 ]
  %84 = phi i64 [ %123, %82 ], [ %22, %81 ]
  %85 = getelementptr inbounds float, float* %57, i64 %83
  %86 = bitcast float* %85 to <4 x float>*
  %87 = load <4 x float>, <4 x float>* %86, align 4, !alias.scope !218
  %88 = getelementptr inbounds float, float* %85, i64 4
  %89 = bitcast float* %88 to <4 x float>*
  %90 = load <4 x float>, <4 x float>* %89, align 4, !alias.scope !218
  %91 = fcmp ogt <4 x float> %87, zeroinitializer
  %92 = fcmp ogt <4 x float> %90, zeroinitializer
  %93 = fcmp ogt <4 x float> %87, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %94 = fcmp ogt <4 x float> %90, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %95 = select <4 x i1> %93, <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, <4 x float> %87
  %96 = select <4 x i1> %94, <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, <4 x float> %90
  %97 = select <4 x i1> %91, <4 x float> %95, <4 x float> zeroinitializer
  %98 = select <4 x i1> %92, <4 x float> %96, <4 x float> zeroinitializer
  %99 = getelementptr inbounds float, float* %60, i64 %83
  %100 = bitcast float* %99 to <4 x float>*
  store <4 x float> %97, <4 x float>* %100, align 4, !alias.scope !221, !noalias !218
  %101 = getelementptr inbounds float, float* %99, i64 4
  %102 = bitcast float* %101 to <4 x float>*
  store <4 x float> %98, <4 x float>* %102, align 4, !alias.scope !221, !noalias !218
  %103 = or i64 %83, 8
  %104 = getelementptr inbounds float, float* %57, i64 %103
  %105 = bitcast float* %104 to <4 x float>*
  %106 = load <4 x float>, <4 x float>* %105, align 4, !alias.scope !218
  %107 = getelementptr inbounds float, float* %104, i64 4
  %108 = bitcast float* %107 to <4 x float>*
  %109 = load <4 x float>, <4 x float>* %108, align 4, !alias.scope !218
  %110 = fcmp ogt <4 x float> %106, zeroinitializer
  %111 = fcmp ogt <4 x float> %109, zeroinitializer
  %112 = fcmp ogt <4 x float> %106, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %113 = fcmp ogt <4 x float> %109, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %114 = select <4 x i1> %112, <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, <4 x float> %106
  %115 = select <4 x i1> %113, <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, <4 x float> %109
  %116 = select <4 x i1> %110, <4 x float> %114, <4 x float> zeroinitializer
  %117 = select <4 x i1> %111, <4 x float> %115, <4 x float> zeroinitializer
  %118 = getelementptr inbounds float, float* %60, i64 %103
  %119 = bitcast float* %118 to <4 x float>*
  store <4 x float> %116, <4 x float>* %119, align 4, !alias.scope !221, !noalias !218
  %120 = getelementptr inbounds float, float* %118, i64 4
  %121 = bitcast float* %120 to <4 x float>*
  store <4 x float> %117, <4 x float>* %121, align 4, !alias.scope !221, !noalias !218
  %122 = add i64 %83, 16
  %123 = add i64 %84, -2
  %124 = icmp eq i64 %123, 0
  br i1 %124, label %125, label %82, !llvm.loop !223

125:                                              ; preds = %82, %81
  %126 = phi i64 [ 0, %81 ], [ %122, %82 ]
  br i1 %23, label %146, label %127

127:                                              ; preds = %125
  %128 = getelementptr inbounds float, float* %57, i64 %126
  %129 = bitcast float* %128 to <4 x float>*
  %130 = load <4 x float>, <4 x float>* %129, align 4, !alias.scope !218
  %131 = getelementptr inbounds float, float* %128, i64 4
  %132 = bitcast float* %131 to <4 x float>*
  %133 = load <4 x float>, <4 x float>* %132, align 4, !alias.scope !218
  %134 = fcmp ogt <4 x float> %130, zeroinitializer
  %135 = fcmp ogt <4 x float> %133, zeroinitializer
  %136 = fcmp ogt <4 x float> %130, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %137 = fcmp ogt <4 x float> %133, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %138 = select <4 x i1> %136, <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, <4 x float> %130
  %139 = select <4 x i1> %137, <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, <4 x float> %133
  %140 = select <4 x i1> %134, <4 x float> %138, <4 x float> zeroinitializer
  %141 = select <4 x i1> %135, <4 x float> %139, <4 x float> zeroinitializer
  %142 = getelementptr inbounds float, float* %60, i64 %126
  %143 = bitcast float* %142 to <4 x float>*
  store <4 x float> %140, <4 x float>* %143, align 4, !alias.scope !221, !noalias !218
  %144 = getelementptr inbounds float, float* %142, i64 4
  %145 = bitcast float* %144 to <4 x float>*
  store <4 x float> %141, <4 x float>* %145, align 4, !alias.scope !221, !noalias !218
  br label %146

146:                                              ; preds = %125, %127
  br i1 %24, label %147, label %62

147:                                              ; preds = %74, %150, %146, %43
  %148 = add nuw i64 %44, 1
  %149 = icmp eq i64 %148, %1
  br i1 %149, label %40, label %43

150:                                              ; preds = %74, %150
  %151 = phi i64 [ %167, %150 ], [ %75, %74 ]
  %152 = getelementptr inbounds float, float* %57, i64 %151
  %153 = load float, float* %152, align 4
  %154 = fcmp ogt float %153, 0.000000e+00
  %155 = fcmp ogt float %153, 1.000000e+00
  %156 = select i1 %155, float 1.000000e+00, float %153
  %157 = select i1 %154, float %156, float 0.000000e+00
  %158 = getelementptr inbounds float, float* %60, i64 %151
  store float %157, float* %158, align 4
  %159 = add nuw i64 %151, 1
  %160 = getelementptr inbounds float, float* %57, i64 %159
  %161 = load float, float* %160, align 4
  %162 = fcmp ogt float %161, 0.000000e+00
  %163 = fcmp ogt float %161, 1.000000e+00
  %164 = select i1 %163, float 1.000000e+00, float %161
  %165 = select i1 %162, float %164, float 0.000000e+00
  %166 = getelementptr inbounds float, float* %60, i64 %159
  store float %165, float* %166, align 4
  %167 = add nuw i64 %151, 2
  %168 = icmp eq i64 %167, %0
  br i1 %168, label %147, label %150, !llvm.loop !224
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @_ZN5angle20LoadD32FS8X24ToD24S8EmmmPKhmmPhmm(i64, i64, i64, i8* nocapture readonly, i64, i64, i8* nocapture, i64, i64) local_unnamed_addr #1 {
  %10 = icmp eq i64 %2, 0
  br i1 %10, label %30, label %11

11:                                               ; preds = %9
  %12 = icmp eq i64 %1, 0
  %13 = icmp eq i64 %0, 0
  %14 = shl i64 %0, 2
  %15 = shl i64 %0, 3
  %16 = icmp ult i64 %0, 4
  %17 = and i64 %0, -4
  %18 = icmp eq i64 %17, %0
  br label %19

19:                                               ; preds = %31, %11
  %20 = phi i64 [ 0, %11 ], [ %32, %31 ]
  %21 = mul i64 %20, %8
  %22 = add i64 %14, %21
  %23 = mul i64 %20, %5
  %24 = add i64 %15, %23
  br i1 %12, label %31, label %25

25:                                               ; preds = %19
  %26 = mul i64 %20, %5
  %27 = mul i64 %20, %8
  %28 = getelementptr inbounds i8, i8* %3, i64 %26
  %29 = getelementptr inbounds i8, i8* %6, i64 %27
  br label %34

30:                                               ; preds = %31, %9
  ret void

31:                                               ; preds = %83, %19
  %32 = add nuw i64 %20, 1
  %33 = icmp eq i64 %32, %2
  br i1 %33, label %30, label %19

34:                                               ; preds = %83, %25
  %35 = phi i64 [ 0, %25 ], [ %84, %83 ]
  %36 = mul i64 %35, %7
  %37 = add i64 %21, %36
  %38 = getelementptr i8, i8* %6, i64 %37
  %39 = add i64 %22, %36
  %40 = getelementptr i8, i8* %6, i64 %39
  %41 = mul i64 %35, %4
  %42 = add i64 %23, %41
  %43 = getelementptr i8, i8* %3, i64 %42
  %44 = add i64 %24, %41
  %45 = getelementptr i8, i8* %3, i64 %44
  %46 = mul i64 %35, %4
  %47 = getelementptr inbounds i8, i8* %28, i64 %46
  %48 = bitcast i8* %47 to float*
  %49 = getelementptr inbounds i8, i8* %47, i64 4
  %50 = bitcast i8* %49 to i32*
  %51 = mul i64 %35, %7
  %52 = getelementptr inbounds i8, i8* %29, i64 %51
  %53 = bitcast i8* %52 to i32*
  br i1 %13, label %83, label %54

54:                                               ; preds = %34
  br i1 %16, label %55, label %57

55:                                               ; preds = %82, %57, %54
  %56 = phi i64 [ 0, %57 ], [ 0, %54 ], [ %17, %82 ]
  br label %86

57:                                               ; preds = %54
  %58 = icmp ult i8* %38, %45
  %59 = icmp ult i8* %43, %40
  %60 = and i1 %58, %59
  br i1 %60, label %55, label %61

61:                                               ; preds = %57, %61
  %62 = phi i64 [ %80, %61 ], [ 0, %57 ]
  %63 = shl i64 %62, 1
  %64 = getelementptr inbounds float, float* %48, i64 %63
  %65 = bitcast float* %64 to <8 x float>*
  %66 = load <8 x float>, <8 x float>* %65, align 4
  %67 = shufflevector <8 x float> %66, <8 x float> undef, <4 x i32> <i32 0, i32 2, i32 4, i32 6>
  %68 = shufflevector <8 x float> %66, <8 x float> undef, <4 x i32> <i32 1, i32 3, i32 5, i32 7>
  %69 = bitcast <4 x float> %68 to <4 x i32>
  %70 = fcmp ogt <4 x float> %67, zeroinitializer
  %71 = fcmp ogt <4 x float> %67, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %72 = select <4 x i1> %71, <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, <4 x float> %67
  %73 = fmul <4 x float> %72, <float 0x416FFFFFE0000000, float 0x416FFFFFE0000000, float 0x416FFFFFE0000000, float 0x416FFFFFE0000000>
  %74 = select <4 x i1> %70, <4 x float> %73, <4 x float> zeroinitializer
  %75 = fptoui <4 x float> %74 to <4 x i32>
  %76 = and <4 x i32> %69, <i32 -16777216, i32 -16777216, i32 -16777216, i32 -16777216>
  %77 = or <4 x i32> %76, %75
  %78 = getelementptr inbounds i32, i32* %53, i64 %62
  %79 = bitcast i32* %78 to <4 x i32>*
  store <4 x i32> %77, <4 x i32>* %79, align 4, !alias.scope !225, !noalias !228
  %80 = add i64 %62, 4
  %81 = icmp eq i64 %80, %17
  br i1 %81, label %82, label %61, !llvm.loop !230

82:                                               ; preds = %61
  br i1 %18, label %83, label %55

83:                                               ; preds = %86, %82, %34
  %84 = add nuw i64 %35, 1
  %85 = icmp eq i64 %84, %1
  br i1 %85, label %31, label %34

86:                                               ; preds = %55, %86
  %87 = phi i64 [ %102, %86 ], [ %56, %55 ]
  %88 = shl i64 %87, 1
  %89 = getelementptr inbounds float, float* %48, i64 %88
  %90 = load float, float* %89, align 4
  %91 = fcmp ogt float %90, 0.000000e+00
  %92 = fcmp ogt float %90, 1.000000e+00
  %93 = select i1 %92, float 1.000000e+00, float %90
  %94 = fmul float %93, 0x416FFFFFE0000000
  %95 = select i1 %91, float %94, float 0.000000e+00
  %96 = fptoui float %95 to i32
  %97 = getelementptr inbounds i32, i32* %50, i64 %88
  %98 = load i32, i32* %97, align 4
  %99 = and i32 %98, -16777216
  %100 = or i32 %99, %96
  %101 = getelementptr inbounds i32, i32* %53, i64 %87
  store i32 %100, i32* %101, align 4
  %102 = add nuw i64 %87, 1
  %103 = icmp eq i64 %102, %0
  br i1 %103, label %83, label %86, !llvm.loop !231
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @_ZN5angle13LoadX24S8ToS8EmmmPKhmmPhmm(i64, i64, i64, i8* nocapture readonly, i64, i64, i8* nocapture, i64, i64) local_unnamed_addr #1 {
  %10 = icmp eq i64 %2, 0
  br i1 %10, label %38, label %11

11:                                               ; preds = %9
  %12 = icmp eq i64 %1, 0
  %13 = icmp eq i64 %0, 0
  %14 = shl i64 %0, 2
  %15 = add i64 %0, -8
  %16 = lshr i64 %15, 3
  %17 = add nuw nsw i64 %16, 1
  %18 = icmp ult i64 %0, 8
  %19 = and i64 %0, -8
  %20 = and i64 %17, 1
  %21 = icmp eq i64 %16, 0
  %22 = sub nuw nsw i64 %17, %20
  %23 = icmp eq i64 %20, 0
  %24 = icmp eq i64 %19, %0
  %25 = and i64 %0, 3
  %26 = icmp eq i64 %25, 0
  br label %27

27:                                               ; preds = %39, %11
  %28 = phi i64 [ 0, %11 ], [ %40, %39 ]
  %29 = mul i64 %28, %8
  %30 = add i64 %29, %0
  %31 = mul i64 %28, %5
  %32 = add i64 %14, %31
  br i1 %12, label %39, label %33

33:                                               ; preds = %27
  %34 = mul i64 %28, %5
  %35 = mul i64 %28, %8
  %36 = getelementptr inbounds i8, i8* %3, i64 %34
  %37 = getelementptr inbounds i8, i8* %6, i64 %35
  br label %42

38:                                               ; preds = %39, %9
  ret void

39:                                               ; preds = %129, %27
  %40 = add nuw i64 %28, 1
  %41 = icmp eq i64 %40, %2
  br i1 %41, label %38, label %27

42:                                               ; preds = %129, %33
  %43 = phi i64 [ 0, %33 ], [ %130, %129 ]
  %44 = mul i64 %43, %7
  %45 = add i64 %29, %44
  %46 = getelementptr i8, i8* %6, i64 %45
  %47 = add i64 %30, %44
  %48 = getelementptr i8, i8* %6, i64 %47
  %49 = mul i64 %43, %4
  %50 = add i64 %31, %49
  %51 = getelementptr i8, i8* %3, i64 %50
  %52 = add i64 %32, %49
  %53 = getelementptr i8, i8* %3, i64 %52
  %54 = mul i64 %43, %4
  %55 = getelementptr inbounds i8, i8* %36, i64 %54
  %56 = bitcast i8* %55 to i32*
  %57 = mul i64 %43, %7
  %58 = getelementptr inbounds i8, i8* %37, i64 %57
  br i1 %13, label %129, label %59

59:                                               ; preds = %42
  br i1 %18, label %60, label %77

60:                                               ; preds = %128, %77, %59
  %61 = phi i64 [ 0, %77 ], [ 0, %59 ], [ %19, %128 ]
  %62 = xor i64 %61, -1
  %63 = add i64 %62, %0
  br i1 %26, label %74, label %64

64:                                               ; preds = %60, %64
  %65 = phi i64 [ %71, %64 ], [ %61, %60 ]
  %66 = phi i64 [ %72, %64 ], [ %25, %60 ]
  %67 = getelementptr inbounds i32, i32* %56, i64 %65
  %68 = load i32, i32* %67, align 4
  %69 = trunc i32 %68 to i8
  %70 = getelementptr inbounds i8, i8* %58, i64 %65
  store i8 %69, i8* %70, align 1
  %71 = add nuw i64 %65, 1
  %72 = add i64 %66, -1
  %73 = icmp eq i64 %72, 0
  br i1 %73, label %74, label %64, !llvm.loop !232

74:                                               ; preds = %64, %60
  %75 = phi i64 [ %61, %60 ], [ %71, %64 ]
  %76 = icmp ult i64 %63, 3
  br i1 %76, label %129, label %132

77:                                               ; preds = %59
  %78 = icmp ult i8* %46, %53
  %79 = icmp ult i8* %51, %48
  %80 = and i1 %78, %79
  br i1 %80, label %60, label %81

81:                                               ; preds = %77
  br i1 %21, label %113, label %82

82:                                               ; preds = %81, %82
  %83 = phi i64 [ %110, %82 ], [ 0, %81 ]
  %84 = phi i64 [ %111, %82 ], [ %22, %81 ]
  %85 = getelementptr inbounds i32, i32* %56, i64 %83
  %86 = bitcast i32* %85 to <4 x i32>*
  %87 = load <4 x i32>, <4 x i32>* %86, align 4, !alias.scope !233
  %88 = getelementptr inbounds i32, i32* %85, i64 4
  %89 = bitcast i32* %88 to <4 x i32>*
  %90 = load <4 x i32>, <4 x i32>* %89, align 4, !alias.scope !233
  %91 = trunc <4 x i32> %87 to <4 x i8>
  %92 = trunc <4 x i32> %90 to <4 x i8>
  %93 = getelementptr inbounds i8, i8* %58, i64 %83
  %94 = bitcast i8* %93 to <4 x i8>*
  store <4 x i8> %91, <4 x i8>* %94, align 1, !alias.scope !236, !noalias !233
  %95 = getelementptr inbounds i8, i8* %93, i64 4
  %96 = bitcast i8* %95 to <4 x i8>*
  store <4 x i8> %92, <4 x i8>* %96, align 1, !alias.scope !236, !noalias !233
  %97 = or i64 %83, 8
  %98 = getelementptr inbounds i32, i32* %56, i64 %97
  %99 = bitcast i32* %98 to <4 x i32>*
  %100 = load <4 x i32>, <4 x i32>* %99, align 4, !alias.scope !233
  %101 = getelementptr inbounds i32, i32* %98, i64 4
  %102 = bitcast i32* %101 to <4 x i32>*
  %103 = load <4 x i32>, <4 x i32>* %102, align 4, !alias.scope !233
  %104 = trunc <4 x i32> %100 to <4 x i8>
  %105 = trunc <4 x i32> %103 to <4 x i8>
  %106 = getelementptr inbounds i8, i8* %58, i64 %97
  %107 = bitcast i8* %106 to <4 x i8>*
  store <4 x i8> %104, <4 x i8>* %107, align 1, !alias.scope !236, !noalias !233
  %108 = getelementptr inbounds i8, i8* %106, i64 4
  %109 = bitcast i8* %108 to <4 x i8>*
  store <4 x i8> %105, <4 x i8>* %109, align 1, !alias.scope !236, !noalias !233
  %110 = add i64 %83, 16
  %111 = add i64 %84, -2
  %112 = icmp eq i64 %111, 0
  br i1 %112, label %113, label %82, !llvm.loop !238

113:                                              ; preds = %82, %81
  %114 = phi i64 [ 0, %81 ], [ %110, %82 ]
  br i1 %23, label %128, label %115

115:                                              ; preds = %113
  %116 = getelementptr inbounds i32, i32* %56, i64 %114
  %117 = bitcast i32* %116 to <4 x i32>*
  %118 = load <4 x i32>, <4 x i32>* %117, align 4, !alias.scope !233
  %119 = getelementptr inbounds i32, i32* %116, i64 4
  %120 = bitcast i32* %119 to <4 x i32>*
  %121 = load <4 x i32>, <4 x i32>* %120, align 4, !alias.scope !233
  %122 = trunc <4 x i32> %118 to <4 x i8>
  %123 = trunc <4 x i32> %121 to <4 x i8>
  %124 = getelementptr inbounds i8, i8* %58, i64 %114
  %125 = bitcast i8* %124 to <4 x i8>*
  store <4 x i8> %122, <4 x i8>* %125, align 1, !alias.scope !236, !noalias !233
  %126 = getelementptr inbounds i8, i8* %124, i64 4
  %127 = bitcast i8* %126 to <4 x i8>*
  store <4 x i8> %123, <4 x i8>* %127, align 1, !alias.scope !236, !noalias !233
  br label %128

128:                                              ; preds = %113, %115
  br i1 %24, label %129, label %60

129:                                              ; preds = %74, %132, %128, %42
  %130 = add nuw i64 %43, 1
  %131 = icmp eq i64 %130, %1
  br i1 %131, label %39, label %42

132:                                              ; preds = %74, %132
  %133 = phi i64 [ %153, %132 ], [ %75, %74 ]
  %134 = getelementptr inbounds i32, i32* %56, i64 %133
  %135 = load i32, i32* %134, align 4
  %136 = trunc i32 %135 to i8
  %137 = getelementptr inbounds i8, i8* %58, i64 %133
  store i8 %136, i8* %137, align 1
  %138 = add nuw i64 %133, 1
  %139 = getelementptr inbounds i32, i32* %56, i64 %138
  %140 = load i32, i32* %139, align 4
  %141 = trunc i32 %140 to i8
  %142 = getelementptr inbounds i8, i8* %58, i64 %138
  store i8 %141, i8* %142, align 1
  %143 = add nuw i64 %133, 2
  %144 = getelementptr inbounds i32, i32* %56, i64 %143
  %145 = load i32, i32* %144, align 4
  %146 = trunc i32 %145 to i8
  %147 = getelementptr inbounds i8, i8* %58, i64 %143
  store i8 %146, i8* %147, align 1
  %148 = add nuw i64 %133, 3
  %149 = getelementptr inbounds i32, i32* %56, i64 %148
  %150 = load i32, i32* %149, align 4
  %151 = trunc i32 %150 to i8
  %152 = getelementptr inbounds i8, i8* %58, i64 %148
  store i8 %151, i8* %152, align 1
  %153 = add nuw i64 %133, 4
  %154 = icmp eq i64 %153, %0
  br i1 %154, label %129, label %132, !llvm.loop !239
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @_ZN5angle13LoadX32S8ToS8EmmmPKhmmPhmm(i64, i64, i64, i8* nocapture readonly, i64, i64, i8* nocapture, i64, i64) local_unnamed_addr #1 {
  %10 = icmp eq i64 %2, 0
  br i1 %10, label %26, label %11

11:                                               ; preds = %9
  %12 = icmp eq i64 %1, 0
  %13 = icmp eq i64 %0, 0
  %14 = add i64 %0, -1
  %15 = and i64 %0, 3
  %16 = icmp ult i64 %14, 3
  %17 = sub i64 %0, %15
  %18 = icmp eq i64 %15, 0
  br label %19

19:                                               ; preds = %27, %11
  %20 = phi i64 [ 0, %11 ], [ %28, %27 ]
  br i1 %12, label %27, label %21

21:                                               ; preds = %19
  %22 = mul i64 %20, %5
  %23 = mul i64 %20, %8
  %24 = getelementptr inbounds i8, i8* %3, i64 %22
  %25 = getelementptr inbounds i8, i8* %6, i64 %23
  br label %30

26:                                               ; preds = %27, %9
  ret void

27:                                               ; preds = %52, %19
  %28 = add nuw i64 %20, 1
  %29 = icmp eq i64 %28, %2
  br i1 %29, label %26, label %19

30:                                               ; preds = %52, %21
  %31 = phi i64 [ 0, %21 ], [ %53, %52 ]
  %32 = mul i64 %31, %4
  %33 = getelementptr inbounds i8, i8* %24, i64 %32
  %34 = bitcast i8* %33 to i32*
  %35 = mul i64 %31, %7
  %36 = getelementptr inbounds i8, i8* %25, i64 %35
  br i1 %13, label %52, label %37

37:                                               ; preds = %30
  br i1 %16, label %38, label %55

38:                                               ; preds = %55, %37
  %39 = phi i64 [ 0, %37 ], [ %85, %55 ]
  br i1 %18, label %52, label %40

40:                                               ; preds = %38, %40
  %41 = phi i64 [ %49, %40 ], [ %39, %38 ]
  %42 = phi i64 [ %50, %40 ], [ %15, %38 ]
  %43 = shl i64 %41, 1
  %44 = or i64 %43, 1
  %45 = getelementptr inbounds i32, i32* %34, i64 %44
  %46 = load i32, i32* %45, align 4
  %47 = trunc i32 %46 to i8
  %48 = getelementptr inbounds i8, i8* %36, i64 %41
  store i8 %47, i8* %48, align 1
  %49 = add nuw i64 %41, 1
  %50 = add i64 %42, -1
  %51 = icmp eq i64 %50, 0
  br i1 %51, label %52, label %40, !llvm.loop !240

52:                                               ; preds = %38, %40, %30
  %53 = add nuw i64 %31, 1
  %54 = icmp eq i64 %53, %1
  br i1 %54, label %27, label %30

55:                                               ; preds = %37, %55
  %56 = phi i64 [ %85, %55 ], [ 0, %37 ]
  %57 = phi i64 [ %86, %55 ], [ %17, %37 ]
  %58 = shl i64 %56, 1
  %59 = or i64 %58, 1
  %60 = getelementptr inbounds i32, i32* %34, i64 %59
  %61 = load i32, i32* %60, align 4
  %62 = trunc i32 %61 to i8
  %63 = getelementptr inbounds i8, i8* %36, i64 %56
  store i8 %62, i8* %63, align 1
  %64 = or i64 %56, 1
  %65 = shl i64 %64, 1
  %66 = or i64 %65, 1
  %67 = getelementptr inbounds i32, i32* %34, i64 %66
  %68 = load i32, i32* %67, align 4
  %69 = trunc i32 %68 to i8
  %70 = getelementptr inbounds i8, i8* %36, i64 %64
  store i8 %69, i8* %70, align 1
  %71 = or i64 %56, 2
  %72 = shl i64 %71, 1
  %73 = or i64 %72, 1
  %74 = getelementptr inbounds i32, i32* %34, i64 %73
  %75 = load i32, i32* %74, align 4
  %76 = trunc i32 %75 to i8
  %77 = getelementptr inbounds i8, i8* %36, i64 %71
  store i8 %76, i8* %77, align 1
  %78 = or i64 %56, 3
  %79 = shl i64 %78, 1
  %80 = or i64 %79, 1
  %81 = getelementptr inbounds i32, i32* %34, i64 %80
  %82 = load i32, i32* %81, align 4
  %83 = trunc i32 %82 to i8
  %84 = getelementptr inbounds i8, i8* %36, i64 %78
  store i8 %83, i8* %84, align 1
  %85 = add nuw i64 %56, 4
  %86 = add i64 %57, -4
  %87 = icmp eq i64 %86, 0
  br i1 %87, label %38, label %55
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @_ZN5angle19LoadD32FS8X24ToD32FEmmmPKhmmPhmm(i64, i64, i64, i8* nocapture readonly, i64, i64, i8* nocapture, i64, i64) local_unnamed_addr #1 {
  %10 = icmp eq i64 %2, 0
  br i1 %10, label %24, label %11

11:                                               ; preds = %9
  %12 = icmp eq i64 %1, 0
  %13 = and i64 %0, 1
  %14 = icmp eq i64 %0, 1
  %15 = sub i64 %0, %13
  %16 = icmp eq i64 %13, 0
  br label %17

17:                                               ; preds = %25, %11
  %18 = phi i64 [ 0, %11 ], [ %26, %25 ]
  br i1 %12, label %25, label %19

19:                                               ; preds = %17
  %20 = mul i64 %18, %5
  %21 = mul i64 %18, %8
  %22 = getelementptr inbounds i8, i8* %3, i64 %20
  %23 = getelementptr inbounds i8, i8* %6, i64 %21
  br label %28

24:                                               ; preds = %25, %9
  ret void

25:                                               ; preds = %47, %17
  %26 = add nuw i64 %18, 1
  %27 = icmp eq i64 %26, %2
  br i1 %27, label %24, label %17

28:                                               ; preds = %47, %19
  %29 = phi i64 [ 0, %19 ], [ %48, %47 ]
  %30 = mul i64 %29, %4
  %31 = getelementptr inbounds i8, i8* %22, i64 %30
  %32 = bitcast i8* %31 to float*
  %33 = mul i64 %29, %7
  %34 = getelementptr inbounds i8, i8* %23, i64 %33
  %35 = bitcast i8* %34 to float*
  switch i64 %0, label %50 [
    i64 0, label %47
    i64 1, label %36
  ]

36:                                               ; preds = %50, %28
  %37 = phi i64 [ 0, %28 ], [ %70, %50 ]
  br i1 %16, label %47, label %38

38:                                               ; preds = %36
  %39 = shl i64 %37, 1
  %40 = getelementptr inbounds float, float* %32, i64 %39
  %41 = load float, float* %40, align 4
  %42 = fcmp ogt float %41, 0.000000e+00
  %43 = fcmp ogt float %41, 1.000000e+00
  %44 = select i1 %43, float 1.000000e+00, float %41
  %45 = select i1 %42, float %44, float 0.000000e+00
  %46 = getelementptr inbounds float, float* %35, i64 %37
  store float %45, float* %46, align 4
  br label %47

47:                                               ; preds = %38, %36, %28
  %48 = add nuw i64 %29, 1
  %49 = icmp eq i64 %48, %1
  br i1 %49, label %25, label %28

50:                                               ; preds = %28, %50
  %51 = phi i64 [ %70, %50 ], [ 0, %28 ]
  %52 = phi i64 [ %71, %50 ], [ %15, %28 ]
  %53 = shl i64 %51, 1
  %54 = getelementptr inbounds float, float* %32, i64 %53
  %55 = load float, float* %54, align 4
  %56 = fcmp ogt float %55, 0.000000e+00
  %57 = fcmp ogt float %55, 1.000000e+00
  %58 = select i1 %57, float 1.000000e+00, float %55
  %59 = select i1 %56, float %58, float 0.000000e+00
  %60 = getelementptr inbounds float, float* %35, i64 %51
  store float %59, float* %60, align 4
  %61 = or i64 %51, 1
  %62 = shl i64 %61, 1
  %63 = getelementptr inbounds float, float* %32, i64 %62
  %64 = load float, float* %63, align 4
  %65 = fcmp ogt float %64, 0.000000e+00
  %66 = fcmp ogt float %64, 1.000000e+00
  %67 = select i1 %66, float 1.000000e+00, float %64
  %68 = select i1 %65, float %67, float 0.000000e+00
  %69 = getelementptr inbounds float, float* %35, i64 %61
  store float %68, float* %69, align 4
  %70 = add nuw i64 %51, 2
  %71 = add i64 %52, -2
  %72 = icmp eq i64 %71, 0
  br i1 %72, label %36, label %50
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @_ZN5angle24LoadD32FS8X24ToD32FS8X24EmmmPKhmmPhmm(i64, i64, i64, i8* nocapture readonly, i64, i64, i8* nocapture, i64, i64) local_unnamed_addr #1 {
  %10 = icmp eq i64 %2, 0
  br i1 %10, label %24, label %11

11:                                               ; preds = %9
  %12 = icmp eq i64 %1, 0
  %13 = and i64 %0, 1
  %14 = icmp eq i64 %0, 1
  %15 = sub i64 %0, %13
  %16 = icmp eq i64 %13, 0
  br label %17

17:                                               ; preds = %25, %11
  %18 = phi i64 [ 0, %11 ], [ %26, %25 ]
  br i1 %12, label %25, label %19

19:                                               ; preds = %17
  %20 = mul i64 %18, %5
  %21 = mul i64 %18, %8
  %22 = getelementptr inbounds i8, i8* %3, i64 %20
  %23 = getelementptr inbounds i8, i8* %6, i64 %21
  br label %28

24:                                               ; preds = %25, %9
  ret void

25:                                               ; preds = %55, %17
  %26 = add nuw i64 %18, 1
  %27 = icmp eq i64 %26, %2
  br i1 %27, label %24, label %17

28:                                               ; preds = %55, %19
  %29 = phi i64 [ 0, %19 ], [ %56, %55 ]
  %30 = mul i64 %29, %4
  %31 = getelementptr inbounds i8, i8* %22, i64 %30
  %32 = bitcast i8* %31 to float*
  %33 = getelementptr inbounds i8, i8* %31, i64 4
  %34 = bitcast i8* %33 to i32*
  %35 = mul i64 %29, %7
  %36 = getelementptr inbounds i8, i8* %23, i64 %35
  %37 = bitcast i8* %36 to float*
  %38 = getelementptr inbounds i8, i8* %36, i64 4
  %39 = bitcast i8* %38 to i32*
  switch i64 %0, label %58 [
    i64 0, label %55
    i64 1, label %40
  ]

40:                                               ; preds = %58, %28
  %41 = phi i64 [ 0, %28 ], [ %86, %58 ]
  br i1 %16, label %55, label %42

42:                                               ; preds = %40
  %43 = shl i64 %41, 1
  %44 = getelementptr inbounds float, float* %32, i64 %43
  %45 = load float, float* %44, align 4
  %46 = fcmp ogt float %45, 0.000000e+00
  %47 = fcmp ogt float %45, 1.000000e+00
  %48 = select i1 %47, float 1.000000e+00, float %45
  %49 = select i1 %46, float %48, float 0.000000e+00
  %50 = getelementptr inbounds float, float* %37, i64 %43
  store float %49, float* %50, align 4
  %51 = getelementptr inbounds i32, i32* %34, i64 %43
  %52 = load i32, i32* %51, align 4
  %53 = and i32 %52, -16777216
  %54 = getelementptr inbounds i32, i32* %39, i64 %43
  store i32 %53, i32* %54, align 4
  br label %55

55:                                               ; preds = %42, %40, %28
  %56 = add nuw i64 %29, 1
  %57 = icmp eq i64 %56, %1
  br i1 %57, label %25, label %28

58:                                               ; preds = %28, %58
  %59 = phi i64 [ %86, %58 ], [ 0, %28 ]
  %60 = phi i64 [ %87, %58 ], [ %15, %28 ]
  %61 = shl i64 %59, 1
  %62 = getelementptr inbounds float, float* %32, i64 %61
  %63 = load float, float* %62, align 4
  %64 = fcmp ogt float %63, 0.000000e+00
  %65 = fcmp ogt float %63, 1.000000e+00
  %66 = select i1 %65, float 1.000000e+00, float %63
  %67 = select i1 %64, float %66, float 0.000000e+00
  %68 = getelementptr inbounds float, float* %37, i64 %61
  store float %67, float* %68, align 4
  %69 = getelementptr inbounds i32, i32* %34, i64 %61
  %70 = load i32, i32* %69, align 4
  %71 = and i32 %70, -16777216
  %72 = getelementptr inbounds i32, i32* %39, i64 %61
  store i32 %71, i32* %72, align 4
  %73 = shl i64 %59, 1
  %74 = or i64 %73, 2
  %75 = getelementptr inbounds float, float* %32, i64 %74
  %76 = load float, float* %75, align 4
  %77 = fcmp ogt float %76, 0.000000e+00
  %78 = fcmp ogt float %76, 1.000000e+00
  %79 = select i1 %78, float 1.000000e+00, float %76
  %80 = select i1 %77, float %79, float 0.000000e+00
  %81 = getelementptr inbounds float, float* %37, i64 %74
  store float %80, float* %81, align 4
  %82 = getelementptr inbounds i32, i32* %34, i64 %74
  %83 = load i32, i32* %82, align 4
  %84 = and i32 %83, -16777216
  %85 = getelementptr inbounds i32, i32* %39, i64 %74
  store i32 %84, i32* %85, align 4
  %86 = add nuw i64 %59, 2
  %87 = add i64 %60, -2
  %88 = icmp eq i64 %87, 0
  br i1 %88, label %40, label %58
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @_ZN5angle19LoadRGB32FToRGBA16FEmmmPKhmmPhmm(i64, i64, i64, i8* nocapture readonly, i64, i64, i8* nocapture, i64, i64) local_unnamed_addr #1 {
  %10 = icmp eq i64 %2, 0
  br i1 %10, label %21, label %11

11:                                               ; preds = %9
  %12 = icmp eq i64 %1, 0
  %13 = icmp eq i64 %0, 0
  br label %14

14:                                               ; preds = %22, %11
  %15 = phi i64 [ 0, %11 ], [ %23, %22 ]
  br i1 %12, label %22, label %16

16:                                               ; preds = %14
  %17 = mul i64 %15, %5
  %18 = mul i64 %15, %8
  %19 = getelementptr inbounds i8, i8* %3, i64 %17
  %20 = getelementptr inbounds i8, i8* %6, i64 %18
  br label %25

21:                                               ; preds = %22, %9
  ret void

22:                                               ; preds = %33, %14
  %23 = add nuw i64 %15, 1
  %24 = icmp eq i64 %23, %2
  br i1 %24, label %21, label %14

25:                                               ; preds = %33, %16
  %26 = phi i64 [ 0, %16 ], [ %34, %33 ]
  %27 = mul i64 %26, %4
  %28 = getelementptr inbounds i8, i8* %19, i64 %27
  %29 = bitcast i8* %28 to float*
  %30 = mul i64 %26, %7
  %31 = getelementptr inbounds i8, i8* %20, i64 %30
  %32 = bitcast i8* %31 to i16*
  br i1 %13, label %33, label %36

33:                                               ; preds = %166, %25
  %34 = add nuw i64 %26, 1
  %35 = icmp eq i64 %34, %1
  br i1 %35, label %22, label %25

36:                                               ; preds = %25, %166
  %37 = phi i64 [ %172, %166 ], [ 0, %25 ]
  %38 = mul i64 %37, 3
  %39 = getelementptr inbounds float, float* %29, i64 %38
  %40 = bitcast float* %39 to i32*
  %41 = load i32, i32* %40, align 4
  %42 = lshr i32 %41, 16
  %43 = and i32 %42, 32768
  %44 = and i32 %41, 2147483647
  %45 = icmp ugt i32 %44, 2139095040
  br i1 %45, label %78, label %46

46:                                               ; preds = %36
  %47 = icmp ugt i32 %44, 1207955455
  br i1 %47, label %48, label %51

48:                                               ; preds = %46
  %49 = trunc i32 %43 to i16
  %50 = or i16 %49, 31744
  br label %78

51:                                               ; preds = %46
  %52 = icmp ult i32 %44, 947912704
  br i1 %52, label %53, label %70

53:                                               ; preds = %51
  %54 = icmp ugt i32 %44, 754974719
  br i1 %54, label %55, label %61

55:                                               ; preds = %53
  %56 = lshr i32 %44, 23
  %57 = sub nuw nsw i32 113, %56
  %58 = and i32 %41, 8388607
  %59 = or i32 %58, 8388608
  %60 = lshr i32 %59, %57
  br label %61

61:                                               ; preds = %55, %53
  %62 = phi i32 [ %60, %55 ], [ 0, %53 ]
  %63 = add nuw i32 %62, 4095
  %64 = lshr i32 %62, 13
  %65 = and i32 %64, 1
  %66 = add nuw i32 %63, %65
  %67 = lshr i32 %66, 13
  %68 = or i32 %67, %43
  %69 = trunc i32 %68 to i16
  br label %78

70:                                               ; preds = %51
  %71 = add i32 %41, 134221823
  %72 = lshr i32 %41, 13
  %73 = and i32 %72, 1
  %74 = add i32 %71, %73
  %75 = lshr i32 %74, 13
  %76 = or i32 %75, %43
  %77 = trunc i32 %76 to i16
  br label %78

78:                                               ; preds = %36, %48, %61, %70
  %79 = phi i16 [ %50, %48 ], [ %69, %61 ], [ %77, %70 ], [ 32767, %36 ]
  %80 = shl i64 %37, 2
  %81 = getelementptr inbounds i16, i16* %32, i64 %80
  store i16 %79, i16* %81, align 2
  %82 = add i64 %38, 1
  %83 = getelementptr inbounds float, float* %29, i64 %82
  %84 = bitcast float* %83 to i32*
  %85 = load i32, i32* %84, align 4
  %86 = lshr i32 %85, 16
  %87 = and i32 %86, 32768
  %88 = and i32 %85, 2147483647
  %89 = icmp ugt i32 %88, 2139095040
  br i1 %89, label %122, label %90

90:                                               ; preds = %78
  %91 = icmp ugt i32 %88, 1207955455
  br i1 %91, label %92, label %95

92:                                               ; preds = %90
  %93 = trunc i32 %87 to i16
  %94 = or i16 %93, 31744
  br label %122

95:                                               ; preds = %90
  %96 = icmp ult i32 %88, 947912704
  br i1 %96, label %97, label %114

97:                                               ; preds = %95
  %98 = icmp ugt i32 %88, 754974719
  br i1 %98, label %99, label %105

99:                                               ; preds = %97
  %100 = lshr i32 %88, 23
  %101 = sub nuw nsw i32 113, %100
  %102 = and i32 %85, 8388607
  %103 = or i32 %102, 8388608
  %104 = lshr i32 %103, %101
  br label %105

105:                                              ; preds = %99, %97
  %106 = phi i32 [ %104, %99 ], [ 0, %97 ]
  %107 = add nuw i32 %106, 4095
  %108 = lshr i32 %106, 13
  %109 = and i32 %108, 1
  %110 = add nuw i32 %107, %109
  %111 = lshr i32 %110, 13
  %112 = or i32 %111, %87
  %113 = trunc i32 %112 to i16
  br label %122

114:                                              ; preds = %95
  %115 = add i32 %85, 134221823
  %116 = lshr i32 %85, 13
  %117 = and i32 %116, 1
  %118 = add i32 %115, %117
  %119 = lshr i32 %118, 13
  %120 = or i32 %119, %87
  %121 = trunc i32 %120 to i16
  br label %122

122:                                              ; preds = %78, %92, %105, %114
  %123 = phi i16 [ %94, %92 ], [ %113, %105 ], [ %121, %114 ], [ 32767, %78 ]
  %124 = or i64 %80, 1
  %125 = getelementptr inbounds i16, i16* %32, i64 %124
  store i16 %123, i16* %125, align 2
  %126 = add i64 %38, 2
  %127 = getelementptr inbounds float, float* %29, i64 %126
  %128 = bitcast float* %127 to i32*
  %129 = load i32, i32* %128, align 4
  %130 = lshr i32 %129, 16
  %131 = and i32 %130, 32768
  %132 = and i32 %129, 2147483647
  %133 = icmp ugt i32 %132, 2139095040
  br i1 %133, label %166, label %134

134:                                              ; preds = %122
  %135 = icmp ugt i32 %132, 1207955455
  br i1 %135, label %136, label %139

136:                                              ; preds = %134
  %137 = trunc i32 %131 to i16
  %138 = or i16 %137, 31744
  br label %166

139:                                              ; preds = %134
  %140 = icmp ult i32 %132, 947912704
  br i1 %140, label %141, label %158

141:                                              ; preds = %139
  %142 = icmp ugt i32 %132, 754974719
  br i1 %142, label %143, label %149

143:                                              ; preds = %141
  %144 = lshr i32 %132, 23
  %145 = sub nuw nsw i32 113, %144
  %146 = and i32 %129, 8388607
  %147 = or i32 %146, 8388608
  %148 = lshr i32 %147, %145
  br label %149

149:                                              ; preds = %143, %141
  %150 = phi i32 [ %148, %143 ], [ 0, %141 ]
  %151 = add nuw i32 %150, 4095
  %152 = lshr i32 %150, 13
  %153 = and i32 %152, 1
  %154 = add nuw i32 %151, %153
  %155 = lshr i32 %154, 13
  %156 = or i32 %155, %131
  %157 = trunc i32 %156 to i16
  br label %166

158:                                              ; preds = %139
  %159 = add i32 %129, 134221823
  %160 = lshr i32 %129, 13
  %161 = and i32 %160, 1
  %162 = add i32 %159, %161
  %163 = lshr i32 %162, 13
  %164 = or i32 %163, %131
  %165 = trunc i32 %164 to i16
  br label %166

166:                                              ; preds = %122, %136, %149, %158
  %167 = phi i16 [ %138, %136 ], [ %157, %149 ], [ %165, %158 ], [ 32767, %122 ]
  %168 = or i64 %80, 2
  %169 = getelementptr inbounds i16, i16* %32, i64 %168
  store i16 %167, i16* %169, align 2
  %170 = or i64 %80, 3
  %171 = getelementptr inbounds i16, i16* %32, i64 %170
  store i16 15360, i16* %171, align 2
  %172 = add nuw i64 %37, 1
  %173 = icmp eq i64 %172, %0
  br i1 %173, label %33, label %36
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @_ZN5angle18LoadRGB32FToRGB16FEmmmPKhmmPhmm(i64, i64, i64, i8* nocapture readonly, i64, i64, i8* nocapture, i64, i64) local_unnamed_addr #1 {
  %10 = icmp eq i64 %2, 0
  br i1 %10, label %21, label %11

11:                                               ; preds = %9
  %12 = icmp eq i64 %1, 0
  %13 = icmp eq i64 %0, 0
  br label %14

14:                                               ; preds = %22, %11
  %15 = phi i64 [ 0, %11 ], [ %23, %22 ]
  br i1 %12, label %22, label %16

16:                                               ; preds = %14
  %17 = mul i64 %15, %5
  %18 = mul i64 %15, %8
  %19 = getelementptr inbounds i8, i8* %3, i64 %17
  %20 = getelementptr inbounds i8, i8* %6, i64 %18
  br label %25

21:                                               ; preds = %22, %9
  ret void

22:                                               ; preds = %33, %14
  %23 = add nuw i64 %15, 1
  %24 = icmp eq i64 %23, %2
  br i1 %24, label %21, label %14

25:                                               ; preds = %33, %16
  %26 = phi i64 [ 0, %16 ], [ %34, %33 ]
  %27 = mul i64 %26, %4
  %28 = getelementptr inbounds i8, i8* %19, i64 %27
  %29 = bitcast i8* %28 to float*
  %30 = mul i64 %26, %7
  %31 = getelementptr inbounds i8, i8* %20, i64 %30
  %32 = bitcast i8* %31 to i16*
  br i1 %13, label %33, label %36

33:                                               ; preds = %164, %25
  %34 = add nuw i64 %26, 1
  %35 = icmp eq i64 %34, %1
  br i1 %35, label %22, label %25

36:                                               ; preds = %25, %164
  %37 = phi i64 [ %167, %164 ], [ 0, %25 ]
  %38 = mul i64 %37, 3
  %39 = getelementptr inbounds float, float* %29, i64 %38
  %40 = bitcast float* %39 to i32*
  %41 = load i32, i32* %40, align 4
  %42 = lshr i32 %41, 16
  %43 = and i32 %42, 32768
  %44 = and i32 %41, 2147483647
  %45 = icmp ugt i32 %44, 2139095040
  br i1 %45, label %78, label %46

46:                                               ; preds = %36
  %47 = icmp ugt i32 %44, 1207955455
  br i1 %47, label %48, label %51

48:                                               ; preds = %46
  %49 = trunc i32 %43 to i16
  %50 = or i16 %49, 31744
  br label %78

51:                                               ; preds = %46
  %52 = icmp ult i32 %44, 947912704
  br i1 %52, label %53, label %70

53:                                               ; preds = %51
  %54 = icmp ugt i32 %44, 754974719
  br i1 %54, label %55, label %61

55:                                               ; preds = %53
  %56 = lshr i32 %44, 23
  %57 = sub nuw nsw i32 113, %56
  %58 = and i32 %41, 8388607
  %59 = or i32 %58, 8388608
  %60 = lshr i32 %59, %57
  br label %61

61:                                               ; preds = %55, %53
  %62 = phi i32 [ %60, %55 ], [ 0, %53 ]
  %63 = add nuw i32 %62, 4095
  %64 = lshr i32 %62, 13
  %65 = and i32 %64, 1
  %66 = add nuw i32 %63, %65
  %67 = lshr i32 %66, 13
  %68 = or i32 %67, %43
  %69 = trunc i32 %68 to i16
  br label %78

70:                                               ; preds = %51
  %71 = add i32 %41, 134221823
  %72 = lshr i32 %41, 13
  %73 = and i32 %72, 1
  %74 = add i32 %71, %73
  %75 = lshr i32 %74, 13
  %76 = or i32 %75, %43
  %77 = trunc i32 %76 to i16
  br label %78

78:                                               ; preds = %36, %48, %61, %70
  %79 = phi i16 [ %50, %48 ], [ %69, %61 ], [ %77, %70 ], [ 32767, %36 ]
  %80 = getelementptr inbounds i16, i16* %32, i64 %38
  store i16 %79, i16* %80, align 2
  %81 = add i64 %38, 1
  %82 = getelementptr inbounds float, float* %29, i64 %81
  %83 = bitcast float* %82 to i32*
  %84 = load i32, i32* %83, align 4
  %85 = lshr i32 %84, 16
  %86 = and i32 %85, 32768
  %87 = and i32 %84, 2147483647
  %88 = icmp ugt i32 %87, 2139095040
  br i1 %88, label %121, label %89

89:                                               ; preds = %78
  %90 = icmp ugt i32 %87, 1207955455
  br i1 %90, label %91, label %94

91:                                               ; preds = %89
  %92 = trunc i32 %86 to i16
  %93 = or i16 %92, 31744
  br label %121

94:                                               ; preds = %89
  %95 = icmp ult i32 %87, 947912704
  br i1 %95, label %96, label %113

96:                                               ; preds = %94
  %97 = icmp ugt i32 %87, 754974719
  br i1 %97, label %98, label %104

98:                                               ; preds = %96
  %99 = lshr i32 %87, 23
  %100 = sub nuw nsw i32 113, %99
  %101 = and i32 %84, 8388607
  %102 = or i32 %101, 8388608
  %103 = lshr i32 %102, %100
  br label %104

104:                                              ; preds = %98, %96
  %105 = phi i32 [ %103, %98 ], [ 0, %96 ]
  %106 = add nuw i32 %105, 4095
  %107 = lshr i32 %105, 13
  %108 = and i32 %107, 1
  %109 = add nuw i32 %106, %108
  %110 = lshr i32 %109, 13
  %111 = or i32 %110, %86
  %112 = trunc i32 %111 to i16
  br label %121

113:                                              ; preds = %94
  %114 = add i32 %84, 134221823
  %115 = lshr i32 %84, 13
  %116 = and i32 %115, 1
  %117 = add i32 %114, %116
  %118 = lshr i32 %117, 13
  %119 = or i32 %118, %86
  %120 = trunc i32 %119 to i16
  br label %121

121:                                              ; preds = %78, %91, %104, %113
  %122 = phi i16 [ %93, %91 ], [ %112, %104 ], [ %120, %113 ], [ 32767, %78 ]
  %123 = getelementptr inbounds i16, i16* %32, i64 %81
  store i16 %122, i16* %123, align 2
  %124 = add i64 %38, 2
  %125 = getelementptr inbounds float, float* %29, i64 %124
  %126 = bitcast float* %125 to i32*
  %127 = load i32, i32* %126, align 4
  %128 = lshr i32 %127, 16
  %129 = and i32 %128, 32768
  %130 = and i32 %127, 2147483647
  %131 = icmp ugt i32 %130, 2139095040
  br i1 %131, label %164, label %132

132:                                              ; preds = %121
  %133 = icmp ugt i32 %130, 1207955455
  br i1 %133, label %134, label %137

134:                                              ; preds = %132
  %135 = trunc i32 %129 to i16
  %136 = or i16 %135, 31744
  br label %164

137:                                              ; preds = %132
  %138 = icmp ult i32 %130, 947912704
  br i1 %138, label %139, label %156

139:                                              ; preds = %137
  %140 = icmp ugt i32 %130, 754974719
  br i1 %140, label %141, label %147

141:                                              ; preds = %139
  %142 = lshr i32 %130, 23
  %143 = sub nuw nsw i32 113, %142
  %144 = and i32 %127, 8388607
  %145 = or i32 %144, 8388608
  %146 = lshr i32 %145, %143
  br label %147

147:                                              ; preds = %141, %139
  %148 = phi i32 [ %146, %141 ], [ 0, %139 ]
  %149 = add nuw i32 %148, 4095
  %150 = lshr i32 %148, 13
  %151 = and i32 %150, 1
  %152 = add nuw i32 %149, %151
  %153 = lshr i32 %152, 13
  %154 = or i32 %153, %129
  %155 = trunc i32 %154 to i16
  br label %164

156:                                              ; preds = %137
  %157 = add i32 %127, 134221823
  %158 = lshr i32 %127, 13
  %159 = and i32 %158, 1
  %160 = add i32 %157, %159
  %161 = lshr i32 %160, 13
  %162 = or i32 %161, %129
  %163 = trunc i32 %162 to i16
  br label %164

164:                                              ; preds = %121, %134, %147, %156
  %165 = phi i16 [ %136, %134 ], [ %155, %147 ], [ %163, %156 ], [ 32767, %121 ]
  %166 = getelementptr inbounds i16, i16* %32, i64 %124
  store i16 %165, i16* %166, align 2
  %167 = add nuw i64 %37, 1
  %168 = icmp eq i64 %167, %0
  br i1 %168, label %33, label %36
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @_ZN5angle12LoadR32ToR16EmmmPKhmmPhmm(i64, i64, i64, i8* nocapture readonly, i64, i64, i8* nocapture, i64, i64) local_unnamed_addr #1 {
  %10 = icmp eq i64 %2, 0
  br i1 %10, label %39, label %11

11:                                               ; preds = %9
  %12 = icmp eq i64 %1, 0
  %13 = icmp eq i64 %0, 0
  %14 = shl i64 %0, 1
  %15 = shl i64 %0, 2
  %16 = add i64 %0, -8
  %17 = lshr i64 %16, 3
  %18 = add nuw nsw i64 %17, 1
  %19 = icmp ult i64 %0, 8
  %20 = and i64 %0, -8
  %21 = and i64 %18, 1
  %22 = icmp eq i64 %17, 0
  %23 = sub nuw nsw i64 %18, %21
  %24 = icmp eq i64 %21, 0
  %25 = icmp eq i64 %20, %0
  %26 = and i64 %0, 3
  %27 = icmp eq i64 %26, 0
  br label %28

28:                                               ; preds = %40, %11
  %29 = phi i64 [ 0, %11 ], [ %41, %40 ]
  %30 = mul i64 %29, %8
  %31 = add i64 %14, %30
  %32 = mul i64 %29, %5
  %33 = add i64 %15, %32
  br i1 %12, label %40, label %34

34:                                               ; preds = %28
  %35 = mul i64 %29, %5
  %36 = mul i64 %29, %8
  %37 = getelementptr inbounds i8, i8* %3, i64 %35
  %38 = getelementptr inbounds i8, i8* %6, i64 %36
  br label %43

39:                                               ; preds = %40, %9
  ret void

40:                                               ; preds = %138, %28
  %41 = add nuw i64 %29, 1
  %42 = icmp eq i64 %41, %2
  br i1 %42, label %39, label %28

43:                                               ; preds = %138, %34
  %44 = phi i64 [ 0, %34 ], [ %139, %138 ]
  %45 = mul i64 %44, %7
  %46 = add i64 %30, %45
  %47 = getelementptr i8, i8* %6, i64 %46
  %48 = add i64 %31, %45
  %49 = getelementptr i8, i8* %6, i64 %48
  %50 = mul i64 %44, %4
  %51 = add i64 %32, %50
  %52 = getelementptr i8, i8* %3, i64 %51
  %53 = add i64 %33, %50
  %54 = getelementptr i8, i8* %3, i64 %53
  %55 = mul i64 %44, %4
  %56 = getelementptr inbounds i8, i8* %37, i64 %55
  %57 = bitcast i8* %56 to i32*
  %58 = mul i64 %44, %7
  %59 = getelementptr inbounds i8, i8* %38, i64 %58
  %60 = bitcast i8* %59 to i16*
  br i1 %13, label %138, label %61

61:                                               ; preds = %43
  br i1 %19, label %62, label %80

62:                                               ; preds = %137, %80, %61
  %63 = phi i64 [ 0, %80 ], [ 0, %61 ], [ %20, %137 ]
  %64 = xor i64 %63, -1
  %65 = add i64 %64, %0
  br i1 %27, label %77, label %66

66:                                               ; preds = %62, %66
  %67 = phi i64 [ %74, %66 ], [ %63, %62 ]
  %68 = phi i64 [ %75, %66 ], [ %26, %62 ]
  %69 = getelementptr inbounds i32, i32* %57, i64 %67
  %70 = load i32, i32* %69, align 4
  %71 = lshr i32 %70, 16
  %72 = trunc i32 %71 to i16
  %73 = getelementptr inbounds i16, i16* %60, i64 %67
  store i16 %72, i16* %73, align 2
  %74 = add nuw i64 %67, 1
  %75 = add i64 %68, -1
  %76 = icmp eq i64 %75, 0
  br i1 %76, label %77, label %66, !llvm.loop !241

77:                                               ; preds = %66, %62
  %78 = phi i64 [ %63, %62 ], [ %74, %66 ]
  %79 = icmp ult i64 %65, 3
  br i1 %79, label %138, label %141

80:                                               ; preds = %61
  %81 = icmp ult i8* %47, %54
  %82 = icmp ult i8* %52, %49
  %83 = and i1 %81, %82
  br i1 %83, label %62, label %84

84:                                               ; preds = %80
  br i1 %22, label %120, label %85

85:                                               ; preds = %84, %85
  %86 = phi i64 [ %117, %85 ], [ 0, %84 ]
  %87 = phi i64 [ %118, %85 ], [ %23, %84 ]
  %88 = getelementptr inbounds i32, i32* %57, i64 %86
  %89 = bitcast i32* %88 to <4 x i32>*
  %90 = load <4 x i32>, <4 x i32>* %89, align 4, !alias.scope !242
  %91 = getelementptr inbounds i32, i32* %88, i64 4
  %92 = bitcast i32* %91 to <4 x i32>*
  %93 = load <4 x i32>, <4 x i32>* %92, align 4, !alias.scope !242
  %94 = lshr <4 x i32> %90, <i32 16, i32 16, i32 16, i32 16>
  %95 = lshr <4 x i32> %93, <i32 16, i32 16, i32 16, i32 16>
  %96 = trunc <4 x i32> %94 to <4 x i16>
  %97 = trunc <4 x i32> %95 to <4 x i16>
  %98 = getelementptr inbounds i16, i16* %60, i64 %86
  %99 = bitcast i16* %98 to <4 x i16>*
  store <4 x i16> %96, <4 x i16>* %99, align 2, !alias.scope !245, !noalias !242
  %100 = getelementptr inbounds i16, i16* %98, i64 4
  %101 = bitcast i16* %100 to <4 x i16>*
  store <4 x i16> %97, <4 x i16>* %101, align 2, !alias.scope !245, !noalias !242
  %102 = or i64 %86, 8
  %103 = getelementptr inbounds i32, i32* %57, i64 %102
  %104 = bitcast i32* %103 to <4 x i32>*
  %105 = load <4 x i32>, <4 x i32>* %104, align 4, !alias.scope !242
  %106 = getelementptr inbounds i32, i32* %103, i64 4
  %107 = bitcast i32* %106 to <4 x i32>*
  %108 = load <4 x i32>, <4 x i32>* %107, align 4, !alias.scope !242
  %109 = lshr <4 x i32> %105, <i32 16, i32 16, i32 16, i32 16>
  %110 = lshr <4 x i32> %108, <i32 16, i32 16, i32 16, i32 16>
  %111 = trunc <4 x i32> %109 to <4 x i16>
  %112 = trunc <4 x i32> %110 to <4 x i16>
  %113 = getelementptr inbounds i16, i16* %60, i64 %102
  %114 = bitcast i16* %113 to <4 x i16>*
  store <4 x i16> %111, <4 x i16>* %114, align 2, !alias.scope !245, !noalias !242
  %115 = getelementptr inbounds i16, i16* %113, i64 4
  %116 = bitcast i16* %115 to <4 x i16>*
  store <4 x i16> %112, <4 x i16>* %116, align 2, !alias.scope !245, !noalias !242
  %117 = add i64 %86, 16
  %118 = add i64 %87, -2
  %119 = icmp eq i64 %118, 0
  br i1 %119, label %120, label %85, !llvm.loop !247

120:                                              ; preds = %85, %84
  %121 = phi i64 [ 0, %84 ], [ %117, %85 ]
  br i1 %24, label %137, label %122

122:                                              ; preds = %120
  %123 = getelementptr inbounds i32, i32* %57, i64 %121
  %124 = bitcast i32* %123 to <4 x i32>*
  %125 = load <4 x i32>, <4 x i32>* %124, align 4, !alias.scope !242
  %126 = getelementptr inbounds i32, i32* %123, i64 4
  %127 = bitcast i32* %126 to <4 x i32>*
  %128 = load <4 x i32>, <4 x i32>* %127, align 4, !alias.scope !242
  %129 = lshr <4 x i32> %125, <i32 16, i32 16, i32 16, i32 16>
  %130 = lshr <4 x i32> %128, <i32 16, i32 16, i32 16, i32 16>
  %131 = trunc <4 x i32> %129 to <4 x i16>
  %132 = trunc <4 x i32> %130 to <4 x i16>
  %133 = getelementptr inbounds i16, i16* %60, i64 %121
  %134 = bitcast i16* %133 to <4 x i16>*
  store <4 x i16> %131, <4 x i16>* %134, align 2, !alias.scope !245, !noalias !242
  %135 = getelementptr inbounds i16, i16* %133, i64 4
  %136 = bitcast i16* %135 to <4 x i16>*
  store <4 x i16> %132, <4 x i16>* %136, align 2, !alias.scope !245, !noalias !242
  br label %137

137:                                              ; preds = %120, %122
  br i1 %25, label %138, label %62

138:                                              ; preds = %77, %141, %137, %43
  %139 = add nuw i64 %44, 1
  %140 = icmp eq i64 %139, %1
  br i1 %140, label %40, label %43

141:                                              ; preds = %77, %141
  %142 = phi i64 [ %166, %141 ], [ %78, %77 ]
  %143 = getelementptr inbounds i32, i32* %57, i64 %142
  %144 = load i32, i32* %143, align 4
  %145 = lshr i32 %144, 16
  %146 = trunc i32 %145 to i16
  %147 = getelementptr inbounds i16, i16* %60, i64 %142
  store i16 %146, i16* %147, align 2
  %148 = add nuw i64 %142, 1
  %149 = getelementptr inbounds i32, i32* %57, i64 %148
  %150 = load i32, i32* %149, align 4
  %151 = lshr i32 %150, 16
  %152 = trunc i32 %151 to i16
  %153 = getelementptr inbounds i16, i16* %60, i64 %148
  store i16 %152, i16* %153, align 2
  %154 = add nuw i64 %142, 2
  %155 = getelementptr inbounds i32, i32* %57, i64 %154
  %156 = load i32, i32* %155, align 4
  %157 = lshr i32 %156, 16
  %158 = trunc i32 %157 to i16
  %159 = getelementptr inbounds i16, i16* %60, i64 %154
  store i16 %158, i16* %159, align 2
  %160 = add nuw i64 %142, 3
  %161 = getelementptr inbounds i32, i32* %57, i64 %160
  %162 = load i32, i32* %161, align 4
  %163 = lshr i32 %162, 16
  %164 = trunc i32 %163 to i16
  %165 = getelementptr inbounds i16, i16* %60, i64 %160
  store i16 %164, i16* %165, align 2
  %166 = add nuw i64 %142, 4
  %167 = icmp eq i64 %166, %0
  br i1 %167, label %138, label %141, !llvm.loop !248
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @_ZN5angle14LoadR32ToR24G8EmmmPKhmmPhmm(i64, i64, i64, i8* nocapture readonly, i64, i64, i8* nocapture, i64, i64) local_unnamed_addr #1 {
  %10 = icmp eq i64 %2, 0
  br i1 %10, label %38, label %11

11:                                               ; preds = %9
  %12 = icmp eq i64 %1, 0
  %13 = icmp eq i64 %0, 0
  %14 = shl i64 %0, 2
  %15 = add i64 %0, -8
  %16 = lshr i64 %15, 3
  %17 = add nuw nsw i64 %16, 1
  %18 = icmp ult i64 %0, 8
  %19 = and i64 %0, -8
  %20 = and i64 %17, 1
  %21 = icmp eq i64 %16, 0
  %22 = sub nuw nsw i64 %17, %20
  %23 = icmp eq i64 %20, 0
  %24 = icmp eq i64 %19, %0
  %25 = and i64 %0, 3
  %26 = icmp eq i64 %25, 0
  br label %27

27:                                               ; preds = %39, %11
  %28 = phi i64 [ 0, %11 ], [ %40, %39 ]
  %29 = mul i64 %28, %8
  %30 = add i64 %14, %29
  %31 = mul i64 %28, %5
  %32 = add i64 %14, %31
  br i1 %12, label %39, label %33

33:                                               ; preds = %27
  %34 = mul i64 %28, %5
  %35 = mul i64 %28, %8
  %36 = getelementptr inbounds i8, i8* %3, i64 %34
  %37 = getelementptr inbounds i8, i8* %6, i64 %35
  br label %42

38:                                               ; preds = %39, %9
  ret void

39:                                               ; preds = %130, %27
  %40 = add nuw i64 %28, 1
  %41 = icmp eq i64 %40, %2
  br i1 %41, label %38, label %27

42:                                               ; preds = %130, %33
  %43 = phi i64 [ 0, %33 ], [ %131, %130 ]
  %44 = mul i64 %43, %7
  %45 = add i64 %29, %44
  %46 = getelementptr i8, i8* %6, i64 %45
  %47 = add i64 %30, %44
  %48 = getelementptr i8, i8* %6, i64 %47
  %49 = mul i64 %43, %4
  %50 = add i64 %31, %49
  %51 = getelementptr i8, i8* %3, i64 %50
  %52 = add i64 %32, %49
  %53 = getelementptr i8, i8* %3, i64 %52
  %54 = mul i64 %43, %4
  %55 = getelementptr inbounds i8, i8* %36, i64 %54
  %56 = bitcast i8* %55 to i32*
  %57 = mul i64 %43, %7
  %58 = getelementptr inbounds i8, i8* %37, i64 %57
  %59 = bitcast i8* %58 to i32*
  br i1 %13, label %130, label %60

60:                                               ; preds = %42
  br i1 %18, label %61, label %78

61:                                               ; preds = %129, %78, %60
  %62 = phi i64 [ 0, %78 ], [ 0, %60 ], [ %19, %129 ]
  %63 = xor i64 %62, -1
  %64 = add i64 %63, %0
  br i1 %26, label %75, label %65

65:                                               ; preds = %61, %65
  %66 = phi i64 [ %72, %65 ], [ %62, %61 ]
  %67 = phi i64 [ %73, %65 ], [ %25, %61 ]
  %68 = getelementptr inbounds i32, i32* %56, i64 %66
  %69 = load i32, i32* %68, align 4
  %70 = lshr i32 %69, 8
  %71 = getelementptr inbounds i32, i32* %59, i64 %66
  store i32 %70, i32* %71, align 4
  %72 = add nuw i64 %66, 1
  %73 = add i64 %67, -1
  %74 = icmp eq i64 %73, 0
  br i1 %74, label %75, label %65, !llvm.loop !249

75:                                               ; preds = %65, %61
  %76 = phi i64 [ %62, %61 ], [ %72, %65 ]
  %77 = icmp ult i64 %64, 3
  br i1 %77, label %130, label %133

78:                                               ; preds = %60
  %79 = icmp ult i8* %46, %53
  %80 = icmp ult i8* %51, %48
  %81 = and i1 %79, %80
  br i1 %81, label %61, label %82

82:                                               ; preds = %78
  br i1 %21, label %114, label %83

83:                                               ; preds = %82, %83
  %84 = phi i64 [ %111, %83 ], [ 0, %82 ]
  %85 = phi i64 [ %112, %83 ], [ %22, %82 ]
  %86 = getelementptr inbounds i32, i32* %56, i64 %84
  %87 = bitcast i32* %86 to <4 x i32>*
  %88 = load <4 x i32>, <4 x i32>* %87, align 4, !alias.scope !250
  %89 = getelementptr inbounds i32, i32* %86, i64 4
  %90 = bitcast i32* %89 to <4 x i32>*
  %91 = load <4 x i32>, <4 x i32>* %90, align 4, !alias.scope !250
  %92 = lshr <4 x i32> %88, <i32 8, i32 8, i32 8, i32 8>
  %93 = lshr <4 x i32> %91, <i32 8, i32 8, i32 8, i32 8>
  %94 = getelementptr inbounds i32, i32* %59, i64 %84
  %95 = bitcast i32* %94 to <4 x i32>*
  store <4 x i32> %92, <4 x i32>* %95, align 4, !alias.scope !253, !noalias !250
  %96 = getelementptr inbounds i32, i32* %94, i64 4
  %97 = bitcast i32* %96 to <4 x i32>*
  store <4 x i32> %93, <4 x i32>* %97, align 4, !alias.scope !253, !noalias !250
  %98 = or i64 %84, 8
  %99 = getelementptr inbounds i32, i32* %56, i64 %98
  %100 = bitcast i32* %99 to <4 x i32>*
  %101 = load <4 x i32>, <4 x i32>* %100, align 4, !alias.scope !250
  %102 = getelementptr inbounds i32, i32* %99, i64 4
  %103 = bitcast i32* %102 to <4 x i32>*
  %104 = load <4 x i32>, <4 x i32>* %103, align 4, !alias.scope !250
  %105 = lshr <4 x i32> %101, <i32 8, i32 8, i32 8, i32 8>
  %106 = lshr <4 x i32> %104, <i32 8, i32 8, i32 8, i32 8>
  %107 = getelementptr inbounds i32, i32* %59, i64 %98
  %108 = bitcast i32* %107 to <4 x i32>*
  store <4 x i32> %105, <4 x i32>* %108, align 4, !alias.scope !253, !noalias !250
  %109 = getelementptr inbounds i32, i32* %107, i64 4
  %110 = bitcast i32* %109 to <4 x i32>*
  store <4 x i32> %106, <4 x i32>* %110, align 4, !alias.scope !253, !noalias !250
  %111 = add i64 %84, 16
  %112 = add i64 %85, -2
  %113 = icmp eq i64 %112, 0
  br i1 %113, label %114, label %83, !llvm.loop !255

114:                                              ; preds = %83, %82
  %115 = phi i64 [ 0, %82 ], [ %111, %83 ]
  br i1 %23, label %129, label %116

116:                                              ; preds = %114
  %117 = getelementptr inbounds i32, i32* %56, i64 %115
  %118 = bitcast i32* %117 to <4 x i32>*
  %119 = load <4 x i32>, <4 x i32>* %118, align 4, !alias.scope !250
  %120 = getelementptr inbounds i32, i32* %117, i64 4
  %121 = bitcast i32* %120 to <4 x i32>*
  %122 = load <4 x i32>, <4 x i32>* %121, align 4, !alias.scope !250
  %123 = lshr <4 x i32> %119, <i32 8, i32 8, i32 8, i32 8>
  %124 = lshr <4 x i32> %122, <i32 8, i32 8, i32 8, i32 8>
  %125 = getelementptr inbounds i32, i32* %59, i64 %115
  %126 = bitcast i32* %125 to <4 x i32>*
  store <4 x i32> %123, <4 x i32>* %126, align 4, !alias.scope !253, !noalias !250
  %127 = getelementptr inbounds i32, i32* %125, i64 4
  %128 = bitcast i32* %127 to <4 x i32>*
  store <4 x i32> %124, <4 x i32>* %128, align 4, !alias.scope !253, !noalias !250
  br label %129

129:                                              ; preds = %114, %116
  br i1 %24, label %130, label %61

130:                                              ; preds = %75, %133, %129, %42
  %131 = add nuw i64 %43, 1
  %132 = icmp eq i64 %131, %1
  br i1 %132, label %39, label %42

133:                                              ; preds = %75, %133
  %134 = phi i64 [ %154, %133 ], [ %76, %75 ]
  %135 = getelementptr inbounds i32, i32* %56, i64 %134
  %136 = load i32, i32* %135, align 4
  %137 = lshr i32 %136, 8
  %138 = getelementptr inbounds i32, i32* %59, i64 %134
  store i32 %137, i32* %138, align 4
  %139 = add nuw i64 %134, 1
  %140 = getelementptr inbounds i32, i32* %56, i64 %139
  %141 = load i32, i32* %140, align 4
  %142 = lshr i32 %141, 8
  %143 = getelementptr inbounds i32, i32* %59, i64 %139
  store i32 %142, i32* %143, align 4
  %144 = add nuw i64 %134, 2
  %145 = getelementptr inbounds i32, i32* %56, i64 %144
  %146 = load i32, i32* %145, align 4
  %147 = lshr i32 %146, 8
  %148 = getelementptr inbounds i32, i32* %59, i64 %144
  store i32 %147, i32* %148, align 4
  %149 = add nuw i64 %134, 3
  %150 = getelementptr inbounds i32, i32* %56, i64 %149
  %151 = load i32, i32* %150, align 4
  %152 = lshr i32 %151, 8
  %153 = getelementptr inbounds i32, i32* %59, i64 %149
  store i32 %152, i32* %153, align 4
  %154 = add nuw i64 %134, 4
  %155 = icmp eq i64 %154, %0
  br i1 %155, label %130, label %133, !llvm.loop !256
}

; Function Attrs: nounwind readnone speculatable
declare i16 @llvm.fshl.i16(i16, i16, i16) #3

; Function Attrs: nounwind readnone speculatable
declare { i64, i1 } @llvm.umul.with.overflow.i64(i64, i64) #3

; Function Attrs: nounwind readnone speculatable
declare <4 x i32> @llvm.fshl.v4i32(<4 x i32>, <4 x i32>, <4 x i32>) #3

; Function Attrs: nounwind readnone speculatable
declare <8 x i16> @llvm.fshl.v8i16(<8 x i16>, <8 x i16>, <8 x i16>) #3

attributes #0 = { nofree norecurse nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="128" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nofree norecurse nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nofree nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="128" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind readnone speculatable }
attributes #4 = { nofree nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{i8 0, i8 2}
!3 = distinct !{!3, !4}
!4 = !{!"llvm.loop.unroll.disable"}
!5 = !{!6}
!6 = distinct !{!6, !7}
!7 = distinct !{!7, !"LVerDomain"}
!8 = !{!9}
!9 = distinct !{!9, !7}
!10 = distinct !{!10, !11}
!11 = !{!"llvm.loop.isvectorized", i32 1}
!12 = distinct !{!12, !11}
!13 = distinct !{!13, !4}
!14 = !{!15}
!15 = distinct !{!15, !16}
!16 = distinct !{!16, !"LVerDomain"}
!17 = !{!18}
!18 = distinct !{!18, !16}
!19 = distinct !{!19, !11}
!20 = distinct !{!20, !11}
!21 = !{!22}
!22 = distinct !{!22, !23}
!23 = distinct !{!23, !"LVerDomain"}
!24 = distinct !{!24, !11}
!25 = distinct !{!25, !11}
!26 = !{!27}
!27 = distinct !{!27, !28}
!28 = distinct !{!28, !"LVerDomain"}
!29 = distinct !{!29, !11}
!30 = distinct !{!30, !11}
!31 = !{!32}
!32 = distinct !{!32, !33}
!33 = distinct !{!33, !"LVerDomain"}
!34 = distinct !{!34, !11}
!35 = distinct !{!35, !11}
!36 = !{!37}
!37 = distinct !{!37, !38}
!38 = distinct !{!38, !"LVerDomain"}
!39 = distinct !{!39, !11}
!40 = distinct !{!40, !11}
!41 = !{!42}
!42 = distinct !{!42, !43}
!43 = distinct !{!43, !"LVerDomain"}
!44 = !{!45}
!45 = distinct !{!45, !43}
!46 = distinct !{!46, !11}
!47 = distinct !{!47, !11}
!48 = distinct !{!48, !4}
!49 = !{!50}
!50 = distinct !{!50, !51}
!51 = distinct !{!51, !"LVerDomain"}
!52 = !{!53}
!53 = distinct !{!53, !51}
!54 = distinct !{!54, !11}
!55 = distinct !{!55, !4}
!56 = distinct !{!56, !11}
!57 = distinct !{!57, !11}
!58 = distinct !{!58, !11}
!59 = !{!60}
!60 = distinct !{!60, !61}
!61 = distinct !{!61, !"LVerDomain"}
!62 = distinct !{!62, !11}
!63 = distinct !{!63, !11}
!64 = !{!65}
!65 = distinct !{!65, !66}
!66 = distinct !{!66, !"LVerDomain"}
!67 = distinct !{!67, !11}
!68 = distinct !{!68, !11}
!69 = !{!70}
!70 = distinct !{!70, !71}
!71 = distinct !{!71, !"LVerDomain"}
!72 = distinct !{!72, !11}
!73 = distinct !{!73, !11}
!74 = !{!75}
!75 = distinct !{!75, !76}
!76 = distinct !{!76, !"LVerDomain"}
!77 = !{!78}
!78 = distinct !{!78, !76}
!79 = distinct !{!79, !11}
!80 = distinct !{!80, !11}
!81 = !{!82}
!82 = distinct !{!82, !83}
!83 = distinct !{!83, !"LVerDomain"}
!84 = !{!85}
!85 = distinct !{!85, !83}
!86 = distinct !{!86, !11}
!87 = distinct !{!87, !11}
!88 = !{!89}
!89 = distinct !{!89, !90}
!90 = distinct !{!90, !"LVerDomain"}
!91 = !{!92}
!92 = distinct !{!92, !90}
!93 = distinct !{!93, !11}
!94 = distinct !{!94, !11}
!95 = !{!96}
!96 = distinct !{!96, !97}
!97 = distinct !{!97, !"LVerDomain"}
!98 = !{!99}
!99 = distinct !{!99, !97}
!100 = distinct !{!100, !11}
!101 = distinct !{!101, !11}
!102 = distinct !{!102, !4}
!103 = !{!104}
!104 = distinct !{!104, !105}
!105 = distinct !{!105, !"LVerDomain"}
!106 = !{!107}
!107 = distinct !{!107, !105}
!108 = distinct !{!108, !11}
!109 = distinct !{!109, !11}
!110 = !{!111}
!111 = distinct !{!111, !112}
!112 = distinct !{!112, !"LVerDomain"}
!113 = distinct !{!113, !11}
!114 = distinct !{!114, !11}
!115 = !{!116}
!116 = distinct !{!116, !117}
!117 = distinct !{!117, !"LVerDomain"}
!118 = distinct !{!118, !11}
!119 = distinct !{!119, !11}
!120 = !{!121}
!121 = distinct !{!121, !122}
!122 = distinct !{!122, !"LVerDomain"}
!123 = distinct !{!123, !11}
!124 = distinct !{!124, !11}
!125 = !{!126}
!126 = distinct !{!126, !127}
!127 = distinct !{!127, !"LVerDomain"}
!128 = !{!129}
!129 = distinct !{!129, !127}
!130 = distinct !{!130, !11}
!131 = distinct !{!131, !11}
!132 = !{!133}
!133 = distinct !{!133, !134}
!134 = distinct !{!134, !"LVerDomain"}
!135 = !{!136}
!136 = distinct !{!136, !134}
!137 = distinct !{!137, !11}
!138 = distinct !{!138, !11}
!139 = !{!140}
!140 = distinct !{!140, !141}
!141 = distinct !{!141, !"LVerDomain"}
!142 = !{!143}
!143 = distinct !{!143, !141}
!144 = distinct !{!144, !11}
!145 = distinct !{!145, !11}
!146 = !{!147}
!147 = distinct !{!147, !148}
!148 = distinct !{!148, !"LVerDomain"}
!149 = !{!150}
!150 = distinct !{!150, !148}
!151 = distinct !{!151, !11}
!152 = distinct !{!152, !11}
!153 = distinct !{!153, !4}
!154 = !{!155}
!155 = distinct !{!155, !156}
!156 = distinct !{!156, !"LVerDomain"}
!157 = !{!158}
!158 = distinct !{!158, !156}
!159 = distinct !{!159, !11}
!160 = distinct !{!160, !11}
!161 = !{!162}
!162 = distinct !{!162, !163}
!163 = distinct !{!163, !"LVerDomain"}
!164 = !{!165}
!165 = distinct !{!165, !163}
!166 = distinct !{!166, !11}
!167 = distinct !{!167, !11}
!168 = !{!169}
!169 = distinct !{!169, !170}
!170 = distinct !{!170, !"LVerDomain"}
!171 = distinct !{!171, !11}
!172 = distinct !{!172, !11}
!173 = !{!174}
!174 = distinct !{!174, !175}
!175 = distinct !{!175, !"LVerDomain"}
!176 = distinct !{!176, !11}
!177 = distinct !{!177, !11}
!178 = !{!179}
!179 = distinct !{!179, !180}
!180 = distinct !{!180, !"LVerDomain"}
!181 = distinct !{!181, !11}
!182 = distinct !{!182, !11}
!183 = !{!184}
!184 = distinct !{!184, !185}
!185 = distinct !{!185, !"LVerDomain"}
!186 = distinct !{!186, !11}
!187 = distinct !{!187, !11}
!188 = distinct !{!188, !4}
!189 = !{!190}
!190 = distinct !{!190, !191}
!191 = distinct !{!191, !"LVerDomain"}
!192 = !{!193}
!193 = distinct !{!193, !191}
!194 = distinct !{!194, !11}
!195 = distinct !{!195, !11}
!196 = !{!197}
!197 = distinct !{!197, !198}
!198 = distinct !{!198, !"LVerDomain"}
!199 = !{!200}
!200 = distinct !{!200, !198}
!201 = distinct !{!201, !11}
!202 = distinct !{!202, !11}
!203 = !{!204}
!204 = distinct !{!204, !205}
!205 = distinct !{!205, !"LVerDomain"}
!206 = !{!207}
!207 = distinct !{!207, !205}
!208 = distinct !{!208, !11}
!209 = distinct !{!209, !11}
!210 = distinct !{!210, !4}
!211 = !{!212}
!212 = distinct !{!212, !213}
!213 = distinct !{!213, !"LVerDomain"}
!214 = !{!215}
!215 = distinct !{!215, !213}
!216 = distinct !{!216, !11}
!217 = distinct !{!217, !11}
!218 = !{!219}
!219 = distinct !{!219, !220}
!220 = distinct !{!220, !"LVerDomain"}
!221 = !{!222}
!222 = distinct !{!222, !220}
!223 = distinct !{!223, !11}
!224 = distinct !{!224, !11}
!225 = !{!226}
!226 = distinct !{!226, !227}
!227 = distinct !{!227, !"LVerDomain"}
!228 = !{!229}
!229 = distinct !{!229, !227}
!230 = distinct !{!230, !11}
!231 = distinct !{!231, !11}
!232 = distinct !{!232, !4}
!233 = !{!234}
!234 = distinct !{!234, !235}
!235 = distinct !{!235, !"LVerDomain"}
!236 = !{!237}
!237 = distinct !{!237, !235}
!238 = distinct !{!238, !11}
!239 = distinct !{!239, !11}
!240 = distinct !{!240, !4}
!241 = distinct !{!241, !4}
!242 = !{!243}
!243 = distinct !{!243, !244}
!244 = distinct !{!244, !"LVerDomain"}
!245 = !{!246}
!246 = distinct !{!246, !244}
!247 = distinct !{!247, !11}
!248 = distinct !{!248, !11}
!249 = distinct !{!249, !4}
!250 = !{!251}
!251 = distinct !{!251, !252}
!252 = distinct !{!252, !"LVerDomain"}
!253 = !{!254}
!254 = distinct !{!254, !252}
!255 = distinct !{!255, !11}
!256 = distinct !{!256, !11}
