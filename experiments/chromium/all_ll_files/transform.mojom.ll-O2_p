; ModuleID = 'gen/ui/gfx/mojom/transform.mojom.cc'
source_filename = "gen/ui/gfx/mojom/transform.mojom.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"class.gfx::mojom::Transform" = type { %"class.absl::optional" }
%"class.absl::optional" = type { %"class.absl::optional_internal::optional_data" }
%"class.absl::optional_internal::optional_data" = type { %"class.absl::optional_internal::optional_data_base" }
%"class.absl::optional_internal::optional_data_base" = type { %"class.absl::optional_internal::optional_data_dtor_base" }
%"class.absl::optional_internal::optional_data_dtor_base" = type { i8, %union.anon }
%union.anon = type { %"class.std::__1::vector" }
%"class.std::__1::vector" = type { %"class.std::__1::__vector_base" }
%"class.std::__1::__vector_base" = type { float*, float*, %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { float* }
%"class.perfetto::TracedValue" = type <{ %"class.perfetto::protos::pbzero::DebugAnnotation"*, %"class.perfetto::internal::CheckedScope", [7 x i8] }>
%"class.perfetto::protos::pbzero::DebugAnnotation" = type { %"class.protozero::Message.base", [7 x i8] }
%"class.protozero::Message.base" = type <{ %"class.protozero::ScatteredStreamWriter"*, %"class.protozero::MessageArena"*, %"class.protozero::Message"*, i8*, i32, i32, i8 }>
%"class.protozero::ScatteredStreamWriter" = type { %"class.protozero::ScatteredStreamWriter::Delegate"*, %"struct.protozero::ContiguousMemoryRange", i8*, i64 }
%"class.protozero::ScatteredStreamWriter::Delegate" = type { i32 (...)** }
%"struct.protozero::ContiguousMemoryRange" = type { i8*, i8* }
%"class.protozero::MessageArena" = type { %"class.std::__1::list" }
%"class.std::__1::list" = type { %"class.std::__1::__list_imp" }
%"class.std::__1::__list_imp" = type { %"struct.std::__1::__list_node_base", %"class.std::__1::__compressed_pair.1" }
%"struct.std::__1::__list_node_base" = type { %"struct.std::__1::__list_node_base"*, %"struct.std::__1::__list_node_base"* }
%"class.std::__1::__compressed_pair.1" = type { %"struct.std::__1::__compressed_pair_elem.2" }
%"struct.std::__1::__compressed_pair_elem.2" = type { i64 }
%"class.protozero::Message" = type <{ %"class.protozero::ScatteredStreamWriter"*, %"class.protozero::MessageArena"*, %"class.protozero::Message"*, i8*, i32, i32, i8, [7 x i8] }>
%"class.perfetto::internal::CheckedScope" = type { i8 }
%"class.perfetto::TracedArray" = type <{ %"class.perfetto::protos::pbzero::DebugAnnotation"*, %"class.perfetto::internal::CheckedScope", [7 x i8] }>
%"class.perfetto::TracedDictionary" = type <{ %"class.protozero::Message"*, i32, %"class.perfetto::internal::CheckedScope", [3 x i8] }>
%"class.mojo::internal::ValidationContext" = type <{ %"class.mojo::Message"*, i8*, i32, [4 x i8], i64, i64, i32, i32, i32, i32, i32, [4 x i8] }>
%"class.mojo::Message" = type { %"class.mojo::ScopedHandleBase", %"class.mojo::internal::Buffer", %"class.std::__1::vector.12", %"class.std::__1::vector.20", %"class.mojo::ConnectionGroup::Ref"*, i8, i8, i8* }
%"class.mojo::ScopedHandleBase" = type { %"class.mojo::MessageHandle" }
%"class.mojo::MessageHandle" = type { i64 }
%"class.mojo::internal::Buffer" = type { %"class.mojo::MessageHandle", i64, i8*, i64, i64 }
%"class.std::__1::vector.12" = type { %"class.std::__1::__vector_base.13" }
%"class.std::__1::__vector_base.13" = type { %"class.mojo::ScopedHandleBase.14"*, %"class.mojo::ScopedHandleBase.14"*, %"class.std::__1::__compressed_pair.15" }
%"class.mojo::ScopedHandleBase.14" = type { %"class.mojo::Handle" }
%"class.mojo::Handle" = type { i32 }
%"class.std::__1::__compressed_pair.15" = type { %"struct.std::__1::__compressed_pair_elem.16" }
%"struct.std::__1::__compressed_pair_elem.16" = type { %"class.mojo::ScopedHandleBase.14"* }
%"class.std::__1::vector.20" = type { %"class.std::__1::__vector_base.21" }
%"class.std::__1::__vector_base.21" = type { %"class.mojo::ScopedInterfaceEndpointHandle"*, %"class.mojo::ScopedInterfaceEndpointHandle"*, %"class.std::__1::__compressed_pair.22" }
%"class.mojo::ScopedInterfaceEndpointHandle" = type { %class.scoped_refptr }
%class.scoped_refptr = type { %"class.mojo::ScopedInterfaceEndpointHandle::State"* }
%"class.mojo::ScopedInterfaceEndpointHandle::State" = type opaque
%"class.std::__1::__compressed_pair.22" = type { %"struct.std::__1::__compressed_pair_elem.23" }
%"struct.std::__1::__compressed_pair_elem.23" = type { %"class.mojo::ScopedInterfaceEndpointHandle"* }
%"class.mojo::ConnectionGroup::Ref" = type { i32, %class.scoped_refptr.27 }
%class.scoped_refptr.27 = type { %"class.mojo::ConnectionGroup"* }
%"class.mojo::ConnectionGroup" = type <{ i32 (...)**, %"class.base::RefCountedThreadSafe", [4 x i8], %"class.base::RepeatingCallback", %class.scoped_refptr.31, %"class.mojo::ConnectionGroup::Ref", %"struct.std::__1::atomic.33", [4 x i8] }>
%"class.base::RefCountedThreadSafe" = type { %"class.base::subtle::RefCountedThreadSafeBase" }
%"class.base::subtle::RefCountedThreadSafeBase" = type { %"class.base::AtomicRefCount" }
%"class.base::AtomicRefCount" = type { %"struct.std::__1::atomic" }
%"struct.std::__1::atomic" = type { %"struct.std::__1::__atomic_base" }
%"struct.std::__1::__atomic_base" = type { %"struct.std::__1::__atomic_base.28" }
%"struct.std::__1::__atomic_base.28" = type { %"struct.std::__1::__cxx_atomic_impl" }
%"struct.std::__1::__cxx_atomic_impl" = type { %"struct.std::__1::__cxx_atomic_base_impl" }
%"struct.std::__1::__cxx_atomic_base_impl" = type { i32 }
%"class.base::RepeatingCallback" = type { %"class.base::internal::CallbackBaseCopyable" }
%"class.base::internal::CallbackBaseCopyable" = type { %"class.base::internal::CallbackBase" }
%"class.base::internal::CallbackBase" = type { %class.scoped_refptr.29 }
%class.scoped_refptr.29 = type { %"class.base::internal::BindStateBase"* }
%"class.base::internal::BindStateBase" = type { %"class.base::RefCountedThreadSafe.30", void ()*, void (%"class.base::internal::BindStateBase"*)*, i1 (%"class.base::internal::BindStateBase"*, i32)* }
%"class.base::RefCountedThreadSafe.30" = type { %"class.base::subtle::RefCountedThreadSafeBase" }
%class.scoped_refptr.31 = type { %"class.base::SequencedTaskRunner"* }
%"class.base::SequencedTaskRunner" = type { %"class.base::TaskRunner.base", [4 x i8] }
%"class.base::TaskRunner.base" = type <{ i32 (...)**, %"class.base::RefCountedThreadSafe.32" }>
%"class.base::RefCountedThreadSafe.32" = type { %"class.base::subtle::RefCountedThreadSafeBase" }
%"struct.std::__1::atomic.33" = type { %"struct.std::__1::__atomic_base.34" }
%"struct.std::__1::__atomic_base.34" = type { %"struct.std::__1::__atomic_base.35" }
%"struct.std::__1::__atomic_base.35" = type { %"struct.std::__1::__cxx_atomic_impl.36" }
%"struct.std::__1::__cxx_atomic_impl.36" = type { %"struct.std::__1::__cxx_atomic_base_impl.37" }
%"struct.std::__1::__cxx_atomic_base_impl.37" = type { i32 }
%"class.gfx::mojom::internal::Transform_Data" = type { %"struct.mojo::internal::StructHeader", %"struct.mojo::internal::Pointer" }
%"struct.mojo::internal::StructHeader" = type { i32, i32 }
%"struct.mojo::internal::Pointer" = type { i64 }
%"class.mojo::StructPtr" = type { %"class.std::__1::unique_ptr" }
%"class.std::__1::unique_ptr" = type { %"class.std::__1::__compressed_pair.38" }
%"class.std::__1::__compressed_pair.38" = type { %"struct.std::__1::__compressed_pair_elem.39" }
%"struct.std::__1::__compressed_pair_elem.39" = type { %"class.gfx::mojom::Transform"* }
%"class.mojo::internal::Array_Data" = type { %"struct.mojo::internal::ArrayHeader" }
%"struct.mojo::internal::ArrayHeader" = type { i32, i32 }
%"class.gfx::mojom::TransformDataView" = type { %"class.gfx::mojom::internal::Transform_Data"*, %"class.mojo::Message"* }

$_ZN4mojo8internal11DeserializeINS_13ArrayDataViewIfEERPNS0_10Array_DataIfEEN4absl8optionalINSt3__16vectorIfNSA_9allocatorIfEEEEEEJRPNS_7MessageEELPv0EEEbOT0_PT1_DpOT2_ = comdat any

@.str = private unnamed_addr constant [7 x i8] c"matrix\00", align 1

@_ZN3gfx5mojom9TransformC1Ev = hidden unnamed_addr alias void (%"class.gfx::mojom::Transform"*), void (%"class.gfx::mojom::Transform"*)* @_ZN3gfx5mojom9TransformC2Ev
@_ZN3gfx5mojom9TransformC1EN4absl8optionalINSt3__16vectorIfNS4_9allocatorIfEEEEEE = hidden unnamed_addr alias void (%"class.gfx::mojom::Transform"*, %"class.absl::optional"*), void (%"class.gfx::mojom::Transform"*, %"class.absl::optional"*)* @_ZN3gfx5mojom9TransformC2EN4absl8optionalINSt3__16vectorIfNS4_9allocatorIfEEEEEE
@_ZN3gfx5mojom9TransformD1Ev = hidden unnamed_addr alias void (%"class.gfx::mojom::Transform"*), void (%"class.gfx::mojom::Transform"*)* @_ZN3gfx5mojom9TransformD2Ev

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN3gfx5mojom9TransformC2Ev(%"class.gfx::mojom::Transform"* nocapture) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.gfx::mojom::Transform", %"class.gfx::mojom::Transform"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0
  store i8 0, i8* %2, align 8
  %3 = getelementptr inbounds %"class.gfx::mojom::Transform", %"class.gfx::mojom::Transform"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %4 = bitcast %union.anon* %3 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %4, i8 0, i64 24, i1 false) #5
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN3gfx5mojom9TransformC2EN4absl8optionalINSt3__16vectorIfNS4_9allocatorIfEEEEEE(%"class.gfx::mojom::Transform"* nocapture, %"class.absl::optional"* nocapture) unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"class.gfx::mojom::Transform", %"class.gfx::mojom::Transform"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %4 = getelementptr inbounds %"class.absl::optional", %"class.absl::optional"* %1, i64 0, i32 0, i32 0, i32 0, i32 0
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %3, i8 0, i64 32, i1 false) #5
  %5 = load i8, i8* %4, align 8, !range !2
  %6 = icmp eq i8 %5, 0
  br i1 %6, label %25, label %7

7:                                                ; preds = %2
  %8 = getelementptr inbounds %"class.absl::optional", %"class.absl::optional"* %1, i64 0, i32 0, i32 0, i32 0, i32 1, i32 0
  %9 = getelementptr inbounds %"class.gfx::mojom::Transform", %"class.gfx::mojom::Transform"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 1, i32 0
  %10 = bitcast %"class.std::__1::vector"* %9 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %10, i8 0, i64 24, i1 false) #5
  %11 = bitcast %"class.std::__1::vector"* %8 to i64*
  %12 = load i64, i64* %11, align 8
  %13 = bitcast %"class.std::__1::vector"* %9 to i64*
  store i64 %12, i64* %13, align 8
  %14 = getelementptr inbounds %"class.absl::optional", %"class.absl::optional"* %1, i64 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 1
  %15 = bitcast float** %14 to i64*
  %16 = load i64, i64* %15, align 8
  %17 = getelementptr inbounds %"class.gfx::mojom::Transform", %"class.gfx::mojom::Transform"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 1
  %18 = bitcast float** %17 to i64*
  store i64 %16, i64* %18, align 8
  %19 = getelementptr inbounds %"class.absl::optional", %"class.absl::optional"* %1, i64 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 2, i32 0, i32 0
  %20 = bitcast float** %19 to i64*
  %21 = load i64, i64* %20, align 8
  %22 = getelementptr inbounds %"class.gfx::mojom::Transform", %"class.gfx::mojom::Transform"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 2, i32 0, i32 0
  %23 = bitcast float** %22 to i64*
  store i64 %21, i64* %23, align 8
  %24 = bitcast %"class.std::__1::vector"* %8 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %24, i8 0, i64 24, i1 false) #5
  store i8 1, i8* %3, align 8
  br label %25

25:                                               ; preds = %2, %7
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN3gfx5mojom9TransformD2Ev(%"class.gfx::mojom::Transform"* nocapture) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.gfx::mojom::Transform", %"class.gfx::mojom::Transform"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %3 = load i8, i8* %2, align 8, !range !2
  %4 = icmp eq i8 %3, 0
  br i1 %4, label %15, label %5

5:                                                ; preds = %1
  %6 = getelementptr inbounds %"class.gfx::mojom::Transform", %"class.gfx::mojom::Transform"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 0
  %7 = load float*, float** %6, align 8
  %8 = icmp eq float* %7, null
  br i1 %8, label %14, label %9

9:                                                ; preds = %5
  %10 = ptrtoint float* %7 to i64
  %11 = getelementptr inbounds %"class.gfx::mojom::Transform", %"class.gfx::mojom::Transform"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 1
  %12 = bitcast float** %11 to i64*
  store i64 %10, i64* %12, align 8
  %13 = bitcast float* %7 to i8*
  tail call void @_ZdlPv(i8* %13) #6
  br label %14

14:                                               ; preds = %9, %5
  store i8 0, i8* %2, align 8
  br label %15

15:                                               ; preds = %1, %14
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZNK3gfx5mojom9Transform14WriteIntoTraceEN8perfetto11TracedValueE(%"class.gfx::mojom::Transform"* nocapture readonly, %"class.perfetto::TracedValue"*) local_unnamed_addr #0 align 2 {
  %3 = alloca %"class.perfetto::TracedValue", align 8
  %4 = alloca %"class.perfetto::TracedValue", align 8
  %5 = alloca %"class.perfetto::TracedArray", align 8
  %6 = alloca %"class.perfetto::TracedValue", align 8
  %7 = alloca %"class.perfetto::TracedValue", align 8
  %8 = alloca %"class.perfetto::TracedDictionary", align 8
  %9 = alloca %"class.perfetto::TracedValue", align 8
  %10 = bitcast %"class.perfetto::TracedDictionary"* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %10) #5
  %11 = bitcast %"class.perfetto::TracedDictionary"* %8 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %11, i8 -86, i64 16, i1 false)
  call void @_ZNO8perfetto11TracedValue15WriteDictionaryEv(%"class.perfetto::TracedDictionary"* nonnull sret %8, %"class.perfetto::TracedValue"* %1) #5
  call void @_ZN8perfetto16TracedDictionary7AddItemENS_12StaticStringE(%"class.perfetto::TracedValue"* nonnull sret %9, %"class.perfetto::TracedDictionary"* nonnull %8, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str, i64 0, i64 0)) #5
  %12 = bitcast %"class.perfetto::TracedValue"* %9 to i8*
  %13 = bitcast %"class.perfetto::TracedValue"* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %13) #5
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %13, i8* nonnull align 8 %12, i64 16, i1 false) #5
  %14 = getelementptr inbounds %"class.gfx::mojom::Transform", %"class.gfx::mojom::Transform"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %15 = load i8, i8* %14, align 8, !range !2
  %16 = icmp eq i8 %15, 0
  br i1 %16, label %17, label %18

17:                                               ; preds = %2
  call void @_ZNO8perfetto11TracedValue12WritePointerEPKv(%"class.perfetto::TracedValue"* nonnull %7, i8* null) #5
  br label %36

18:                                               ; preds = %2
  %19 = bitcast %"class.perfetto::TracedValue"* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %19)
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %19, i8* nonnull align 8 %13, i64 16, i1 false)
  %20 = bitcast %"class.perfetto::TracedArray"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %20) #5
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %20, i8 -86, i64 16, i1 false) #5
  call void @_ZNO8perfetto11TracedValue10WriteArrayEv(%"class.perfetto::TracedArray"* nonnull sret %5, %"class.perfetto::TracedValue"* nonnull %6) #5
  %21 = getelementptr inbounds %"class.gfx::mojom::Transform", %"class.gfx::mojom::Transform"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 0
  %22 = load float*, float** %21, align 8
  %23 = getelementptr inbounds %"class.gfx::mojom::Transform", %"class.gfx::mojom::Transform"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 1
  %24 = load float*, float** %23, align 8
  %25 = icmp eq float* %22, %24
  br i1 %25, label %35, label %26

26:                                               ; preds = %18
  %27 = bitcast %"class.perfetto::TracedValue"* %4 to i8*
  %28 = bitcast %"class.perfetto::TracedValue"* %3 to i8*
  br label %29

29:                                               ; preds = %29, %26
  %30 = phi float* [ %22, %26 ], [ %33, %29 ]
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %27) #5
  call void @_ZN8perfetto11TracedArray10AppendItemEv(%"class.perfetto::TracedValue"* nonnull sret %4, %"class.perfetto::TracedArray"* nonnull %5) #5
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %28) #5
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %28, i8* nonnull align 8 %27, i64 16, i1 false) #5
  %31 = load float, float* %30, align 4
  %32 = fpext float %31 to double
  call void @_ZNO8perfetto11TracedValue11WriteDoubleEd(%"class.perfetto::TracedValue"* nonnull %3, double %32) #5
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %28) #5
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %27) #5
  %33 = getelementptr inbounds float, float* %30, i64 1
  %34 = icmp eq float* %33, %24
  br i1 %34, label %35, label %29

35:                                               ; preds = %29, %18
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %20) #5
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %19)
  br label %36

36:                                               ; preds = %35, %17
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %13) #5
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %10) #5
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

declare void @_ZNO8perfetto11TracedValue15WriteDictionaryEv(%"class.perfetto::TracedDictionary"* sret, %"class.perfetto::TracedValue"*) local_unnamed_addr #2

declare void @_ZN8perfetto16TracedDictionary7AddItemENS_12StaticStringE(%"class.perfetto::TracedValue"* sret, %"class.perfetto::TracedDictionary"*, i8*) local_unnamed_addr #2

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZN3gfx5mojom9Transform8ValidateEPKvPN4mojo8internal17ValidationContextE(i8*, %"class.mojo::internal::ValidationContext"*) local_unnamed_addr #0 align 2 {
  %3 = tail call zeroext i1 @_ZN3gfx5mojom8internal14Transform_Data8ValidateEPKvPN4mojo8internal17ValidationContextE(i8* %0, %"class.mojo::internal::ValidationContext"* %1) #5
  ret i1 %3
}

declare zeroext i1 @_ZN3gfx5mojom8internal14Transform_Data8ValidateEPKvPN4mojo8internal17ValidationContextE(i8*, %"class.mojo::internal::ValidationContext"*) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZN4mojo12StructTraitsIN3gfx5mojom17TransformDataViewENS_9StructPtrINS2_9TransformEEEE4ReadES3_PS6_(%"class.gfx::mojom::internal::Transform_Data"*, %"class.mojo::Message"*, %"class.mojo::StructPtr"* nocapture) local_unnamed_addr #0 align 2 {
  %4 = alloca %"class.mojo::internal::Array_Data"*, align 8
  %5 = alloca %"class.gfx::mojom::TransformDataView", align 8
  %6 = getelementptr inbounds %"class.gfx::mojom::TransformDataView", %"class.gfx::mojom::TransformDataView"* %5, i64 0, i32 0
  store %"class.gfx::mojom::internal::Transform_Data"* %0, %"class.gfx::mojom::internal::Transform_Data"** %6, align 8
  %7 = getelementptr inbounds %"class.gfx::mojom::TransformDataView", %"class.gfx::mojom::TransformDataView"* %5, i64 0, i32 1
  store %"class.mojo::Message"* %1, %"class.mojo::Message"** %7, align 8
  %8 = tail call i8* @_Znwm(i64 32) #6, !noalias !3
  store i8 0, i8* %8, align 8, !noalias !3
  %9 = getelementptr inbounds i8, i8* %8, i64 8
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %9, i8 0, i64 24, i1 false) #5, !noalias !3
  %10 = ptrtoint i8* %8 to i64
  %11 = bitcast i8* %8 to %"class.absl::optional"*
  %12 = bitcast %"class.mojo::internal::Array_Data"** %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %12) #5
  %13 = getelementptr inbounds %"class.gfx::mojom::internal::Transform_Data", %"class.gfx::mojom::internal::Transform_Data"* %0, i64 0, i32 1
  %14 = getelementptr inbounds %"struct.mojo::internal::Pointer", %"struct.mojo::internal::Pointer"* %13, i64 0, i32 0
  %15 = load i64, i64* %14, align 8
  %16 = icmp eq i64 %15, 0
  %17 = bitcast %"struct.mojo::internal::Pointer"* %13 to i8*
  %18 = getelementptr inbounds i8, i8* %17, i64 %15
  %19 = bitcast i8* %18 to %"class.mojo::internal::Array_Data"*
  %20 = select i1 %16, %"class.mojo::internal::Array_Data"* null, %"class.mojo::internal::Array_Data"* %19
  store %"class.mojo::internal::Array_Data"* %20, %"class.mojo::internal::Array_Data"** %4, align 8
  %21 = call zeroext i1 @_ZN4mojo8internal11DeserializeINS_13ArrayDataViewIfEERPNS0_10Array_DataIfEEN4absl8optionalINSt3__16vectorIfNSA_9allocatorIfEEEEEEJRPNS_7MessageEELPv0EEEbOT0_PT1_DpOT2_(%"class.mojo::internal::Array_Data"** nonnull dereferenceable(8) %4, %"class.absl::optional"* nonnull %11, %"class.mojo::Message"** dereferenceable(8) %7) #5
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %12) #5
  %22 = getelementptr inbounds %"class.mojo::StructPtr", %"class.mojo::StructPtr"* %2, i64 0, i32 0, i32 0, i32 0, i32 0
  %23 = load %"class.gfx::mojom::Transform"*, %"class.gfx::mojom::Transform"** %22, align 8
  store %"class.gfx::mojom::Transform"* null, %"class.gfx::mojom::Transform"** %22, align 8
  %24 = icmp eq %"class.gfx::mojom::Transform"* %23, null
  br i1 %24, label %25, label %27

25:                                               ; preds = %3
  %26 = bitcast %"class.mojo::StructPtr"* %2 to i64*
  store i64 %10, i64* %26, align 8
  br label %58

27:                                               ; preds = %3
  %28 = getelementptr inbounds %"class.gfx::mojom::Transform", %"class.gfx::mojom::Transform"* %23, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %29 = load i8, i8* %28, align 8, !range !2
  %30 = icmp eq i8 %29, 0
  br i1 %30, label %40, label %31

31:                                               ; preds = %27
  %32 = getelementptr inbounds %"class.gfx::mojom::Transform", %"class.gfx::mojom::Transform"* %23, i64 0, i32 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 0
  %33 = load float*, float** %32, align 8
  %34 = icmp eq float* %33, null
  br i1 %34, label %40, label %35

35:                                               ; preds = %31
  %36 = ptrtoint float* %33 to i64
  %37 = getelementptr inbounds %"class.gfx::mojom::Transform", %"class.gfx::mojom::Transform"* %23, i64 0, i32 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 1
  %38 = bitcast float** %37 to i64*
  store i64 %36, i64* %38, align 8
  %39 = bitcast float* %33 to i8*
  call void @_ZdlPv(i8* %39) #6
  br label %40

40:                                               ; preds = %27, %31, %35
  call void @_ZdlPv(i8* %28) #6
  %41 = bitcast %"class.mojo::StructPtr"* %2 to i64*
  %42 = load %"class.gfx::mojom::Transform"*, %"class.gfx::mojom::Transform"** %22, align 8
  store i64 %10, i64* %41, align 8
  %43 = icmp eq %"class.gfx::mojom::Transform"* %42, null
  br i1 %43, label %58, label %44

44:                                               ; preds = %40
  %45 = getelementptr inbounds %"class.gfx::mojom::Transform", %"class.gfx::mojom::Transform"* %42, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %46 = load i8, i8* %45, align 8, !range !2
  %47 = icmp eq i8 %46, 0
  br i1 %47, label %57, label %48

48:                                               ; preds = %44
  %49 = getelementptr inbounds %"class.gfx::mojom::Transform", %"class.gfx::mojom::Transform"* %42, i64 0, i32 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 0
  %50 = load float*, float** %49, align 8
  %51 = icmp eq float* %50, null
  br i1 %51, label %57, label %52

52:                                               ; preds = %48
  %53 = ptrtoint float* %50 to i64
  %54 = getelementptr inbounds %"class.gfx::mojom::Transform", %"class.gfx::mojom::Transform"* %42, i64 0, i32 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 1
  %55 = bitcast float** %54 to i64*
  store i64 %53, i64* %55, align 8
  %56 = bitcast float* %50 to i8*
  call void @_ZdlPv(i8* %56) #6
  br label %57

57:                                               ; preds = %52, %48, %44
  call void @_ZdlPv(i8* %45) #6
  br label %58

58:                                               ; preds = %25, %40, %57
  ret i1 %21
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(i8*) local_unnamed_addr #3

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #1

declare void @_ZNO8perfetto11TracedValue12WritePointerEPKv(%"class.perfetto::TracedValue"*, i8*) local_unnamed_addr #2

declare void @_ZNO8perfetto11TracedValue10WriteArrayEv(%"class.perfetto::TracedArray"* sret, %"class.perfetto::TracedValue"*) local_unnamed_addr #2

declare void @_ZN8perfetto11TracedArray10AppendItemEv(%"class.perfetto::TracedValue"* sret, %"class.perfetto::TracedArray"*) local_unnamed_addr #2

declare void @_ZNO8perfetto11TracedValue11WriteDoubleEd(%"class.perfetto::TracedValue"*, double) local_unnamed_addr #2

; Function Attrs: nobuiltin nofree
declare noalias nonnull i8* @_Znwm(i64) local_unnamed_addr #4

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZN4mojo8internal11DeserializeINS_13ArrayDataViewIfEERPNS0_10Array_DataIfEEN4absl8optionalINSt3__16vectorIfNSA_9allocatorIfEEEEEEJRPNS_7MessageEELPv0EEEbOT0_PT1_DpOT2_(%"class.mojo::internal::Array_Data"** dereferenceable(8), %"class.absl::optional"*, %"class.mojo::Message"** dereferenceable(8)) local_unnamed_addr #0 comdat {
  %4 = load %"class.mojo::internal::Array_Data"*, %"class.mojo::internal::Array_Data"** %0, align 8
  %5 = icmp eq %"class.mojo::internal::Array_Data"* %4, null
  %6 = getelementptr inbounds %"class.absl::optional", %"class.absl::optional"* %1, i64 0, i32 0, i32 0, i32 0, i32 0
  %7 = load i8, i8* %6, align 8, !range !2
  %8 = icmp eq i8 %7, 0
  br i1 %5, label %9, label %20

9:                                                ; preds = %3
  br i1 %8, label %101, label %10

10:                                               ; preds = %9
  %11 = getelementptr inbounds %"class.absl::optional", %"class.absl::optional"* %1, i64 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 0
  %12 = load float*, float** %11, align 8
  %13 = icmp eq float* %12, null
  br i1 %13, label %19, label %14

14:                                               ; preds = %10
  %15 = ptrtoint float* %12 to i64
  %16 = getelementptr inbounds %"class.absl::optional", %"class.absl::optional"* %1, i64 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 1
  %17 = bitcast float** %16 to i64*
  store i64 %15, i64* %17, align 8
  %18 = bitcast float* %12 to i8*
  tail call void @_ZdlPv(i8* %18) #6
  br label %19

19:                                               ; preds = %14, %10
  store i8 0, i8* %6, align 8
  br label %101

20:                                               ; preds = %3
  %21 = getelementptr inbounds %"class.absl::optional", %"class.absl::optional"* %1, i64 0, i32 0, i32 0, i32 0, i32 1, i32 0
  br i1 %8, label %22, label %32

22:                                               ; preds = %20
  %23 = bitcast %"class.std::__1::vector"* %21 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %23, i8 0, i64 24, i1 false) #5
  store i8 1, i8* %6, align 8
  %24 = load %"class.mojo::internal::Array_Data"*, %"class.mojo::internal::Array_Data"** %0, align 8
  %25 = getelementptr inbounds %"class.absl::optional", %"class.absl::optional"* %1, i64 0, i32 0, i32 0, i32 0, i32 1, i32 0
  %26 = icmp eq %"class.mojo::internal::Array_Data"* %24, null
  br i1 %26, label %27, label %32

27:                                               ; preds = %22
  %28 = bitcast %"class.std::__1::vector"* %25 to i64*
  %29 = load i64, i64* %28, align 8
  %30 = getelementptr inbounds %"class.absl::optional", %"class.absl::optional"* %1, i64 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 1
  %31 = bitcast float** %30 to i64*
  store i64 %29, i64* %31, align 8
  br label %101

32:                                               ; preds = %20, %22
  %33 = phi %"class.std::__1::vector"* [ %25, %22 ], [ %21, %20 ]
  %34 = phi %"class.mojo::internal::Array_Data"* [ %24, %22 ], [ %4, %20 ]
  %35 = getelementptr inbounds %"class.mojo::internal::Array_Data", %"class.mojo::internal::Array_Data"* %34, i64 0, i32 0, i32 1
  %36 = load i32, i32* %35, align 1
  %37 = zext i32 %36 to i64
  %38 = getelementptr inbounds %"class.absl::optional", %"class.absl::optional"* %1, i64 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 1
  %39 = bitcast float** %38 to i64*
  %40 = load i64, i64* %39, align 8
  %41 = bitcast %"class.std::__1::vector"* %33 to i64*
  %42 = load i64, i64* %41, align 8
  %43 = sub i64 %40, %42
  %44 = ashr exact i64 %43, 2
  %45 = icmp eq i64 %44, %37
  br i1 %45, label %69, label %46

46:                                               ; preds = %32
  %47 = icmp eq i32 %36, 0
  br i1 %47, label %61, label %48

48:                                               ; preds = %46
  %49 = shl nuw nsw i64 %37, 2
  %50 = tail call i8* @_Znwm(i64 %49) #6
  %51 = bitcast i8* %50 to float*
  %52 = getelementptr inbounds float, float* %51, i64 %37
  %53 = ptrtoint i8* %50 to i64
  %54 = add nsw i64 %37, -1
  %55 = getelementptr float, float* %51, i64 %54
  %56 = ptrtoint float* %55 to i64
  %57 = sub i64 4, %53
  %58 = add i64 %57, %56
  %59 = and i64 %58, -4
  tail call void @llvm.memset.p0i8.i64(i8* nonnull align 4 %50, i8 0, i64 %59, i1 false) #5
  %60 = ptrtoint float* %52 to i64
  br label %61

61:                                               ; preds = %46, %48
  %62 = phi i64 [ %60, %48 ], [ 0, %46 ]
  %63 = phi i64 [ %53, %48 ], [ 0, %46 ]
  store i64 %63, i64* %41, align 8
  store i64 %62, i64* %39, align 8
  %64 = getelementptr inbounds %"class.absl::optional", %"class.absl::optional"* %1, i64 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 2, i32 0, i32 0
  %65 = bitcast float** %64 to i64*
  store i64 %62, i64* %65, align 8
  %66 = icmp eq i64 %42, 0
  br i1 %66, label %69, label %67

67:                                               ; preds = %61
  %68 = inttoptr i64 %42 to i8*
  tail call void @_ZdlPv(i8* %68) #6
  br label %69

69:                                               ; preds = %32, %67, %61
  %70 = load i32, i32* %35, align 1
  %71 = zext i32 %70 to i64
  %72 = icmp eq i32 %70, 0
  br i1 %72, label %101, label %73

73:                                               ; preds = %69
  %74 = getelementptr inbounds %"class.absl::optional", %"class.absl::optional"* %1, i64 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 0
  %75 = load float*, float** %74, align 8
  %76 = icmp eq float* %75, null
  br i1 %76, label %77, label %84

77:                                               ; preds = %73
  %78 = getelementptr inbounds %"class.mojo::internal::Array_Data", %"class.mojo::internal::Array_Data"* %34, i64 1
  %79 = bitcast %"class.mojo::internal::Array_Data"* %78 to float*
  %80 = getelementptr inbounds %"class.mojo::internal::Array_Data", %"class.mojo::internal::Array_Data"* %78, i64 0, i32 0, i32 0
  %81 = load i32, i32* %80, align 4
  store i32 %81, i32* null, align 536870912
  %82 = load i32, i32* %35, align 1
  %83 = icmp ugt i32 %82, 1
  br i1 %83, label %89, label %101

84:                                               ; preds = %73
  %85 = bitcast float* %75 to i8*
  %86 = getelementptr inbounds %"class.mojo::internal::Array_Data", %"class.mojo::internal::Array_Data"* %34, i64 1
  %87 = bitcast %"class.mojo::internal::Array_Data"* %86 to i8*
  %88 = shl nuw nsw i64 %71, 2
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %85, i8* align 4 %87, i64 %88, i1 false) #5
  br label %101

89:                                               ; preds = %77, %89
  %90 = phi i64 [ %95, %89 ], [ 1, %77 ]
  %91 = load float*, float** %74, align 8
  %92 = getelementptr inbounds float, float* %79, i64 %90
  %93 = bitcast float* %92 to i32*
  %94 = load i32, i32* %93, align 4
  %95 = add nuw nsw i64 %90, 1
  %96 = getelementptr inbounds float, float* %91, i64 %90
  %97 = bitcast float* %96 to i32*
  store i32 %94, i32* %97, align 4
  %98 = load i32, i32* %35, align 1
  %99 = zext i32 %98 to i64
  %100 = icmp ult i64 %95, %99
  br i1 %100, label %89, label %101

101:                                              ; preds = %89, %84, %77, %69, %27, %19, %9
  ret i1 true
}

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nobuiltin nofree "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind }
attributes #6 = { builtin nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{i8 0, i8 2}
!3 = !{!4}
!4 = distinct !{!4, !5, !"_ZN3gfx5mojom9Transform3NewIJEEEN4mojo9StructPtrIS1_EEDpOT_: argument 0"}
!5 = distinct !{!5, !"_ZN3gfx5mojom9Transform3NewIJEEEN4mojo9StructPtrIS1_EEDpOT_"}
