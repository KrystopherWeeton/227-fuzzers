; ModuleID = '../../ui/base/prediction/least_squares_predictor.cc'
source_filename = "../../ui/base/prediction/least_squares_predictor.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"class.base::TimeDelta" = type { i64 }
%"class.ui::LeastSquaresPredictor" = type { %"class.ui::InputPredictor", %"class.std::__1::deque", %"class.std::__1::deque", %"class.std::__1::deque.6" }
%"class.ui::InputPredictor" = type { i32 (...)** }
%"class.std::__1::deque" = type { %"class.std::__1::__deque_base" }
%"class.std::__1::__deque_base" = type { %"struct.std::__1::__split_buffer", i64, %"class.std::__1::__compressed_pair.1" }
%"struct.std::__1::__split_buffer" = type { double**, double**, double**, %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { double** }
%"class.std::__1::__compressed_pair.1" = type { %"struct.std::__1::__compressed_pair_elem.2" }
%"struct.std::__1::__compressed_pair_elem.2" = type { i64 }
%"class.std::__1::deque.6" = type { %"class.std::__1::__deque_base.7" }
%"class.std::__1::__deque_base.7" = type { %"struct.std::__1::__split_buffer.8", i64, %"class.std::__1::__compressed_pair.14" }
%"struct.std::__1::__split_buffer.8" = type { %"class.base::TimeTicks"**, %"class.base::TimeTicks"**, %"class.base::TimeTicks"**, %"class.std::__1::__compressed_pair.9" }
%"class.base::TimeTicks" = type { %"class.base::time_internal::TimeBase" }
%"class.base::time_internal::TimeBase" = type { i64 }
%"class.std::__1::__compressed_pair.9" = type { %"struct.std::__1::__compressed_pair_elem.10" }
%"struct.std::__1::__compressed_pair_elem.10" = type { %"class.base::TimeTicks"** }
%"class.std::__1::__compressed_pair.14" = type { %"struct.std::__1::__compressed_pair_elem.2" }
%"struct.ui::InputPredictor::InputData" = type { %"class.gfx::PointF", %"class.base::TimeTicks" }
%"class.gfx::PointF" = type { float, float }
%"class.gfx::Matrix3F" = type { [9 x float] }
%"class.gfx::Vector3dF" = type { float, float, float }
%"struct.std::__1::__split_buffer.24" = type { double**, double**, double**, %"class.std::__1::__compressed_pair.25" }
%"class.std::__1::__compressed_pair.25" = type { %"struct.std::__1::__compressed_pair_elem", %"struct.std::__1::__compressed_pair_elem.26" }
%"struct.std::__1::__compressed_pair_elem.26" = type { %"class.std::__1::allocator"* }
%"class.std::__1::allocator" = type { i8 }
%"struct.std::__1::__split_buffer.32" = type { %"class.base::TimeTicks"**, %"class.base::TimeTicks"**, %"class.base::TimeTicks"**, %"class.std::__1::__compressed_pair.33" }
%"class.std::__1::__compressed_pair.33" = type { %"struct.std::__1::__compressed_pair_elem.10", %"struct.std::__1::__compressed_pair_elem.34" }
%"struct.std::__1::__compressed_pair_elem.34" = type { %"class.std::__1::allocator.12"* }
%"class.std::__1::allocator.12" = type { i8 }

$_ZNSt3__112__deque_baseIdNS_9allocatorIdEEED2Ev = comdat any

$_ZNSt3__15dequeIdNS_9allocatorIdEEE19__add_back_capacityEv = comdat any

$_ZNSt3__114__split_bufferIPdNS_9allocatorIS1_EEE9push_backEOS1_ = comdat any

$_ZNSt3__114__split_bufferIPdNS_9allocatorIS1_EEE10push_frontEOS1_ = comdat any

$_ZNSt3__114__split_bufferIPdRNS_9allocatorIS1_EEE10push_frontERKS1_ = comdat any

$_ZNSt3__15dequeIN4base9TimeTicksENS_9allocatorIS2_EEE19__add_back_capacityEv = comdat any

$_ZNSt3__114__split_bufferIPN4base9TimeTicksENS_9allocatorIS3_EEE9push_backEOS3_ = comdat any

$_ZNSt3__114__split_bufferIPN4base9TimeTicksENS_9allocatorIS3_EEE10push_frontEOS3_ = comdat any

$_ZNSt3__114__split_bufferIPN4base9TimeTicksERNS_9allocatorIS3_EEE10push_frontERKS3_ = comdat any

@_ZTVN2ui21LeastSquaresPredictorE = hidden unnamed_addr constant { [10 x i8*] } { [10 x i8*] [i8* null, i8* null, i8* bitcast (void (%"class.ui::LeastSquaresPredictor"*)* @_ZN2ui21LeastSquaresPredictorD2Ev to i8*), i8* bitcast (void (%"class.ui::LeastSquaresPredictor"*)* @_ZN2ui21LeastSquaresPredictorD0Ev to i8*), i8* bitcast (i8* (%"class.ui::LeastSquaresPredictor"*)* @_ZNK2ui21LeastSquaresPredictor7GetNameEv to i8*), i8* bitcast (void (%"class.ui::LeastSquaresPredictor"*)* @_ZN2ui21LeastSquaresPredictor5ResetEv to i8*), i8* bitcast (void (%"class.ui::LeastSquaresPredictor"*, %"struct.ui::InputPredictor::InputData"*)* @_ZN2ui21LeastSquaresPredictor6UpdateERKNS_14InputPredictor9InputDataE to i8*), i8* bitcast (i1 (%"class.ui::LeastSquaresPredictor"*)* @_ZNK2ui21LeastSquaresPredictor13HasPredictionEv to i8*), i8* bitcast (%"struct.ui::InputPredictor::InputData"* (%"class.ui::LeastSquaresPredictor"*, i64, i64)* @_ZN2ui21LeastSquaresPredictor18GeneratePredictionEN4base9TimeTicksENS1_9TimeDeltaE to i8*), i8* bitcast (i64 (%"class.ui::LeastSquaresPredictor"*)* @_ZNK2ui21LeastSquaresPredictor12TimeIntervalEv to i8*)] }, align 8
@_ZN8features17kPredictorNameLsqE = external constant [0 x i8], align 1
@_ZN2ui14InputPredictor16kMinTimeIntervalE = external local_unnamed_addr constant %"class.base::TimeDelta", align 8

@_ZN2ui21LeastSquaresPredictorC1Ev = hidden unnamed_addr alias void (%"class.ui::LeastSquaresPredictor"*), void (%"class.ui::LeastSquaresPredictor"*)* @_ZN2ui21LeastSquaresPredictorC2Ev
@_ZN2ui21LeastSquaresPredictorD1Ev = hidden unnamed_addr alias void (%"class.ui::LeastSquaresPredictor"*), void (%"class.ui::LeastSquaresPredictor"*)* @_ZN2ui21LeastSquaresPredictorD2Ev

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2ui21LeastSquaresPredictorC2Ev(%"class.ui::LeastSquaresPredictor"* nocapture) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.ui::LeastSquaresPredictor", %"class.ui::LeastSquaresPredictor"* %0, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [10 x i8*] }, { [10 x i8*] }* @_ZTVN2ui21LeastSquaresPredictorE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %2, align 8
  %3 = getelementptr inbounds %"class.ui::LeastSquaresPredictor", %"class.ui::LeastSquaresPredictor"* %0, i64 0, i32 1
  %4 = bitcast %"class.std::__1::deque"* %3 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %4, i8 0, i64 144, i1 false)
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2ui21LeastSquaresPredictorD2Ev(%"class.ui::LeastSquaresPredictor"*) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.ui::LeastSquaresPredictor", %"class.ui::LeastSquaresPredictor"* %0, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [10 x i8*] }, { [10 x i8*] }* @_ZTVN2ui21LeastSquaresPredictorE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %2, align 8
  %3 = getelementptr inbounds %"class.ui::LeastSquaresPredictor", %"class.ui::LeastSquaresPredictor"* %0, i64 0, i32 3, i32 0, i32 0, i32 1
  %4 = load %"class.base::TimeTicks"**, %"class.base::TimeTicks"*** %3, align 8
  %5 = getelementptr inbounds %"class.ui::LeastSquaresPredictor", %"class.ui::LeastSquaresPredictor"* %0, i64 0, i32 3, i32 0, i32 1
  %6 = load i64, i64* %5, align 8
  %7 = lshr i64 %6, 9
  %8 = getelementptr inbounds %"class.base::TimeTicks"*, %"class.base::TimeTicks"** %4, i64 %7
  %9 = getelementptr inbounds %"class.ui::LeastSquaresPredictor", %"class.ui::LeastSquaresPredictor"* %0, i64 0, i32 3, i32 0, i32 0, i32 2
  %10 = load %"class.base::TimeTicks"**, %"class.base::TimeTicks"*** %9, align 8
  %11 = icmp eq %"class.base::TimeTicks"** %10, %4
  %12 = ptrtoint %"class.base::TimeTicks"** %10 to i64
  %13 = ptrtoint %"class.base::TimeTicks"** %4 to i64
  br i1 %11, label %14, label %16

14:                                               ; preds = %1
  %15 = getelementptr inbounds %"class.ui::LeastSquaresPredictor", %"class.ui::LeastSquaresPredictor"* %0, i64 0, i32 3, i32 0, i32 2, i32 0, i32 0
  br label %29

16:                                               ; preds = %1
  %17 = load %"class.base::TimeTicks"*, %"class.base::TimeTicks"** %8, align 8
  %18 = and i64 %6, 511
  %19 = getelementptr inbounds %"class.base::TimeTicks", %"class.base::TimeTicks"* %17, i64 %18
  %20 = getelementptr inbounds %"class.ui::LeastSquaresPredictor", %"class.ui::LeastSquaresPredictor"* %0, i64 0, i32 3, i32 0, i32 2, i32 0, i32 0
  %21 = load i64, i64* %20, align 8
  %22 = add i64 %21, %6
  %23 = lshr i64 %22, 9
  %24 = getelementptr inbounds %"class.base::TimeTicks"*, %"class.base::TimeTicks"** %4, i64 %23
  %25 = load %"class.base::TimeTicks"*, %"class.base::TimeTicks"** %24, align 8
  %26 = and i64 %22, 511
  %27 = getelementptr inbounds %"class.base::TimeTicks", %"class.base::TimeTicks"* %25, i64 %26
  %28 = icmp eq %"class.base::TimeTicks"* %27, %19
  br i1 %28, label %29, label %35

29:                                               ; preds = %48, %16, %14
  %30 = phi i64* [ %15, %14 ], [ %20, %16 ], [ %20, %48 ]
  store i64 0, i64* %30, align 8
  %31 = bitcast %"class.base::TimeTicks"*** %9 to i64*
  %32 = sub i64 %12, %13
  %33 = ashr exact i64 %32, 3
  %34 = icmp ugt i64 %33, 2
  br i1 %34, label %53, label %66

35:                                               ; preds = %16, %48
  %36 = phi %"class.base::TimeTicks"* [ %51, %48 ], [ %19, %16 ]
  %37 = phi %"class.base::TimeTicks"** [ %50, %48 ], [ %8, %16 ]
  %38 = getelementptr inbounds %"class.base::TimeTicks", %"class.base::TimeTicks"* %36, i64 1
  %39 = ptrtoint %"class.base::TimeTicks"* %38 to i64
  %40 = bitcast %"class.base::TimeTicks"** %37 to i64*
  %41 = load i64, i64* %40, align 8
  %42 = sub i64 %39, %41
  %43 = icmp eq i64 %42, 4096
  br i1 %43, label %44, label %48

44:                                               ; preds = %35
  %45 = getelementptr inbounds %"class.base::TimeTicks"*, %"class.base::TimeTicks"** %37, i64 1
  %46 = bitcast %"class.base::TimeTicks"** %45 to i64*
  %47 = load i64, i64* %46, align 8
  br label %48

48:                                               ; preds = %44, %35
  %49 = phi i64 [ %47, %44 ], [ %39, %35 ]
  %50 = phi %"class.base::TimeTicks"** [ %45, %44 ], [ %37, %35 ]
  %51 = inttoptr i64 %49 to %"class.base::TimeTicks"*
  %52 = icmp eq %"class.base::TimeTicks"* %27, %51
  br i1 %52, label %29, label %35

53:                                               ; preds = %29, %53
  %54 = phi %"class.base::TimeTicks"** [ %58, %53 ], [ %4, %29 ]
  %55 = bitcast %"class.base::TimeTicks"** %54 to i8**
  %56 = load i8*, i8** %55, align 8
  tail call void @_ZdlPv(i8* %56) #11
  %57 = load %"class.base::TimeTicks"**, %"class.base::TimeTicks"*** %3, align 8
  %58 = getelementptr inbounds %"class.base::TimeTicks"*, %"class.base::TimeTicks"** %57, i64 1
  store %"class.base::TimeTicks"** %58, %"class.base::TimeTicks"*** %3, align 8
  %59 = load i64, i64* %31, align 8
  %60 = ptrtoint %"class.base::TimeTicks"** %58 to i64
  %61 = sub i64 %59, %60
  %62 = ashr exact i64 %61, 3
  %63 = icmp ugt i64 %62, 2
  br i1 %63, label %53, label %64

64:                                               ; preds = %53
  %65 = inttoptr i64 %59 to %"class.base::TimeTicks"**
  br label %66

66:                                               ; preds = %64, %29
  %67 = phi %"class.base::TimeTicks"** [ %10, %29 ], [ %65, %64 ]
  %68 = phi %"class.base::TimeTicks"** [ %4, %29 ], [ %58, %64 ]
  %69 = phi i64 [ %33, %29 ], [ %62, %64 ]
  switch i64 %69, label %73 [
    i64 1, label %71
    i64 2, label %70
  ]

70:                                               ; preds = %66
  br label %71

71:                                               ; preds = %66, %70
  %72 = phi i64 [ 512, %70 ], [ 256, %66 ]
  store i64 %72, i64* %5, align 8
  br label %73

73:                                               ; preds = %71, %66
  %74 = icmp eq %"class.base::TimeTicks"** %68, %67
  br i1 %74, label %93, label %75

75:                                               ; preds = %73, %75
  %76 = phi %"class.base::TimeTicks"** [ %79, %75 ], [ %68, %73 ]
  %77 = bitcast %"class.base::TimeTicks"** %76 to i8**
  %78 = load i8*, i8** %77, align 8
  tail call void @_ZdlPv(i8* %78) #11
  %79 = getelementptr inbounds %"class.base::TimeTicks"*, %"class.base::TimeTicks"** %76, i64 1
  %80 = icmp eq %"class.base::TimeTicks"** %79, %67
  br i1 %80, label %81, label %75

81:                                               ; preds = %75
  %82 = load %"class.base::TimeTicks"**, %"class.base::TimeTicks"*** %3, align 8
  %83 = load %"class.base::TimeTicks"**, %"class.base::TimeTicks"*** %9, align 8
  %84 = icmp eq %"class.base::TimeTicks"** %83, %82
  br i1 %84, label %93, label %85

85:                                               ; preds = %81
  %86 = ptrtoint %"class.base::TimeTicks"** %82 to i64
  %87 = getelementptr %"class.base::TimeTicks"*, %"class.base::TimeTicks"** %83, i64 -1
  %88 = ptrtoint %"class.base::TimeTicks"** %87 to i64
  %89 = sub i64 %88, %86
  %90 = lshr i64 %89, 3
  %91 = xor i64 %90, -1
  %92 = getelementptr %"class.base::TimeTicks"*, %"class.base::TimeTicks"** %83, i64 %91
  store %"class.base::TimeTicks"** %92, %"class.base::TimeTicks"*** %9, align 8
  br label %93

93:                                               ; preds = %85, %81, %73
  %94 = getelementptr inbounds %"class.ui::LeastSquaresPredictor", %"class.ui::LeastSquaresPredictor"* %0, i64 0, i32 3, i32 0, i32 0, i32 0
  %95 = load %"class.base::TimeTicks"**, %"class.base::TimeTicks"*** %94, align 8
  %96 = icmp eq %"class.base::TimeTicks"** %95, null
  br i1 %96, label %99, label %97

97:                                               ; preds = %93
  %98 = bitcast %"class.base::TimeTicks"** %95 to i8*
  tail call void @_ZdlPv(i8* %98) #11
  br label %99

99:                                               ; preds = %93, %97
  %100 = getelementptr inbounds %"class.ui::LeastSquaresPredictor", %"class.ui::LeastSquaresPredictor"* %0, i64 0, i32 2, i32 0
  tail call void @_ZNSt3__112__deque_baseIdNS_9allocatorIdEEED2Ev(%"class.std::__1::__deque_base"* %100) #12
  %101 = getelementptr inbounds %"class.ui::LeastSquaresPredictor", %"class.ui::LeastSquaresPredictor"* %0, i64 0, i32 1, i32 0
  tail call void @_ZNSt3__112__deque_baseIdNS_9allocatorIdEEED2Ev(%"class.std::__1::__deque_base"* %101) #12
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__112__deque_baseIdNS_9allocatorIdEEED2Ev(%"class.std::__1::__deque_base"*) unnamed_addr #0 comdat align 2 {
  %2 = getelementptr inbounds %"class.std::__1::__deque_base", %"class.std::__1::__deque_base"* %0, i64 0, i32 0, i32 1
  %3 = load double**, double*** %2, align 8
  %4 = getelementptr inbounds %"class.std::__1::__deque_base", %"class.std::__1::__deque_base"* %0, i64 0, i32 1
  %5 = load i64, i64* %4, align 8
  %6 = lshr i64 %5, 9
  %7 = getelementptr inbounds double*, double** %3, i64 %6
  %8 = getelementptr inbounds %"class.std::__1::__deque_base", %"class.std::__1::__deque_base"* %0, i64 0, i32 0, i32 2
  %9 = load double**, double*** %8, align 8
  %10 = icmp eq double** %9, %3
  %11 = ptrtoint double** %9 to i64
  %12 = ptrtoint double** %3 to i64
  br i1 %10, label %13, label %15

13:                                               ; preds = %1
  %14 = getelementptr inbounds %"class.std::__1::__deque_base", %"class.std::__1::__deque_base"* %0, i64 0, i32 2, i32 0, i32 0
  br label %28

15:                                               ; preds = %1
  %16 = load double*, double** %7, align 8
  %17 = and i64 %5, 511
  %18 = getelementptr inbounds double, double* %16, i64 %17
  %19 = getelementptr inbounds %"class.std::__1::__deque_base", %"class.std::__1::__deque_base"* %0, i64 0, i32 2, i32 0, i32 0
  %20 = load i64, i64* %19, align 8
  %21 = add i64 %20, %5
  %22 = lshr i64 %21, 9
  %23 = getelementptr inbounds double*, double** %3, i64 %22
  %24 = load double*, double** %23, align 8
  %25 = and i64 %21, 511
  %26 = getelementptr inbounds double, double* %24, i64 %25
  %27 = icmp eq double* %26, %18
  br i1 %27, label %28, label %34

28:                                               ; preds = %47, %15, %13
  %29 = phi i64* [ %14, %13 ], [ %19, %15 ], [ %19, %47 ]
  store i64 0, i64* %29, align 8
  %30 = bitcast double*** %8 to i64*
  %31 = sub i64 %11, %12
  %32 = ashr exact i64 %31, 3
  %33 = icmp ugt i64 %32, 2
  br i1 %33, label %52, label %65

34:                                               ; preds = %15, %47
  %35 = phi double* [ %50, %47 ], [ %18, %15 ]
  %36 = phi double** [ %49, %47 ], [ %7, %15 ]
  %37 = getelementptr inbounds double, double* %35, i64 1
  %38 = ptrtoint double* %37 to i64
  %39 = bitcast double** %36 to i64*
  %40 = load i64, i64* %39, align 8
  %41 = sub i64 %38, %40
  %42 = icmp eq i64 %41, 4096
  br i1 %42, label %43, label %47

43:                                               ; preds = %34
  %44 = getelementptr inbounds double*, double** %36, i64 1
  %45 = bitcast double** %44 to i64*
  %46 = load i64, i64* %45, align 8
  br label %47

47:                                               ; preds = %43, %34
  %48 = phi i64 [ %46, %43 ], [ %38, %34 ]
  %49 = phi double** [ %44, %43 ], [ %36, %34 ]
  %50 = inttoptr i64 %48 to double*
  %51 = icmp eq double* %26, %50
  br i1 %51, label %28, label %34

52:                                               ; preds = %28, %52
  %53 = phi double** [ %57, %52 ], [ %3, %28 ]
  %54 = bitcast double** %53 to i8**
  %55 = load i8*, i8** %54, align 8
  tail call void @_ZdlPv(i8* %55) #11
  %56 = load double**, double*** %2, align 8
  %57 = getelementptr inbounds double*, double** %56, i64 1
  store double** %57, double*** %2, align 8
  %58 = load i64, i64* %30, align 8
  %59 = ptrtoint double** %57 to i64
  %60 = sub i64 %58, %59
  %61 = ashr exact i64 %60, 3
  %62 = icmp ugt i64 %61, 2
  br i1 %62, label %52, label %63

63:                                               ; preds = %52
  %64 = inttoptr i64 %58 to double**
  br label %65

65:                                               ; preds = %63, %28
  %66 = phi double** [ %9, %28 ], [ %64, %63 ]
  %67 = phi double** [ %3, %28 ], [ %57, %63 ]
  %68 = phi i64 [ %32, %28 ], [ %61, %63 ]
  switch i64 %68, label %72 [
    i64 1, label %70
    i64 2, label %69
  ]

69:                                               ; preds = %65
  br label %70

70:                                               ; preds = %65, %69
  %71 = phi i64 [ 512, %69 ], [ 256, %65 ]
  store i64 %71, i64* %4, align 8
  br label %72

72:                                               ; preds = %70, %65
  %73 = icmp eq double** %67, %66
  br i1 %73, label %83, label %74

74:                                               ; preds = %72, %74
  %75 = phi double** [ %78, %74 ], [ %67, %72 ]
  %76 = bitcast double** %75 to i8**
  %77 = load i8*, i8** %76, align 8
  tail call void @_ZdlPv(i8* %77) #11
  %78 = getelementptr inbounds double*, double** %75, i64 1
  %79 = icmp eq double** %78, %66
  br i1 %79, label %80, label %74

80:                                               ; preds = %74
  %81 = load double**, double*** %2, align 8
  %82 = load double**, double*** %8, align 8
  br label %83

83:                                               ; preds = %80, %72
  %84 = phi double** [ %82, %80 ], [ %66, %72 ]
  %85 = phi double** [ %81, %80 ], [ %66, %72 ]
  %86 = icmp eq double** %84, %85
  br i1 %86, label %95, label %87

87:                                               ; preds = %83
  %88 = ptrtoint double** %85 to i64
  %89 = getelementptr double*, double** %84, i64 -1
  %90 = ptrtoint double** %89 to i64
  %91 = sub i64 %90, %88
  %92 = lshr i64 %91, 3
  %93 = xor i64 %92, -1
  %94 = getelementptr double*, double** %84, i64 %93
  store double** %94, double*** %8, align 8
  br label %95

95:                                               ; preds = %87, %83
  %96 = getelementptr inbounds %"class.std::__1::__deque_base", %"class.std::__1::__deque_base"* %0, i64 0, i32 0, i32 0
  %97 = load double**, double*** %96, align 8
  %98 = icmp eq double** %97, null
  br i1 %98, label %101, label %99

99:                                               ; preds = %95
  %100 = bitcast double** %97 to i8*
  tail call void @_ZdlPv(i8* %100) #11
  br label %101

101:                                              ; preds = %95, %99
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2ui21LeastSquaresPredictorD0Ev(%"class.ui::LeastSquaresPredictor"*) unnamed_addr #0 align 2 {
  tail call void @_ZN2ui21LeastSquaresPredictorD2Ev(%"class.ui::LeastSquaresPredictor"* %0) #12
  %2 = bitcast %"class.ui::LeastSquaresPredictor"* %0 to i8*
  tail call void @_ZdlPv(i8* %2) #11
  ret void
}

; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(i8*) local_unnamed_addr #1

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden i8* @_ZNK2ui21LeastSquaresPredictor7GetNameEv(%"class.ui::LeastSquaresPredictor"* nocapture readnone) unnamed_addr #2 align 2 {
  ret i8* getelementptr inbounds ([0 x i8], [0 x i8]* @_ZN8features17kPredictorNameLsqE, i64 0, i64 0)
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2ui21LeastSquaresPredictor5ResetEv(%"class.ui::LeastSquaresPredictor"* nocapture) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.ui::LeastSquaresPredictor", %"class.ui::LeastSquaresPredictor"* %0, i64 0, i32 1, i32 0, i32 0, i32 1
  %3 = load double**, double*** %2, align 8
  %4 = getelementptr inbounds %"class.ui::LeastSquaresPredictor", %"class.ui::LeastSquaresPredictor"* %0, i64 0, i32 1, i32 0, i32 1
  %5 = load i64, i64* %4, align 8
  %6 = lshr i64 %5, 9
  %7 = getelementptr inbounds double*, double** %3, i64 %6
  %8 = getelementptr inbounds %"class.ui::LeastSquaresPredictor", %"class.ui::LeastSquaresPredictor"* %0, i64 0, i32 1, i32 0, i32 0, i32 2
  %9 = load double**, double*** %8, align 8
  %10 = icmp eq double** %9, %3
  %11 = ptrtoint double** %9 to i64
  %12 = ptrtoint double** %3 to i64
  br i1 %10, label %13, label %15

13:                                               ; preds = %1
  %14 = getelementptr inbounds %"class.ui::LeastSquaresPredictor", %"class.ui::LeastSquaresPredictor"* %0, i64 0, i32 1, i32 0, i32 2, i32 0, i32 0
  br label %28

15:                                               ; preds = %1
  %16 = load double*, double** %7, align 8
  %17 = and i64 %5, 511
  %18 = getelementptr inbounds double, double* %16, i64 %17
  %19 = getelementptr inbounds %"class.ui::LeastSquaresPredictor", %"class.ui::LeastSquaresPredictor"* %0, i64 0, i32 1, i32 0, i32 2, i32 0, i32 0
  %20 = load i64, i64* %19, align 8
  %21 = add i64 %20, %5
  %22 = lshr i64 %21, 9
  %23 = getelementptr inbounds double*, double** %3, i64 %22
  %24 = load double*, double** %23, align 8
  %25 = and i64 %21, 511
  %26 = getelementptr inbounds double, double* %24, i64 %25
  %27 = icmp eq double* %26, %18
  br i1 %27, label %28, label %34

28:                                               ; preds = %47, %15, %13
  %29 = phi i64* [ %14, %13 ], [ %19, %15 ], [ %19, %47 ]
  store i64 0, i64* %29, align 8
  %30 = bitcast double*** %8 to i64*
  %31 = sub i64 %11, %12
  %32 = ashr exact i64 %31, 3
  %33 = icmp ugt i64 %32, 2
  br i1 %33, label %52, label %63

34:                                               ; preds = %15, %47
  %35 = phi double* [ %50, %47 ], [ %18, %15 ]
  %36 = phi double** [ %49, %47 ], [ %7, %15 ]
  %37 = getelementptr inbounds double, double* %35, i64 1
  %38 = ptrtoint double* %37 to i64
  %39 = bitcast double** %36 to i64*
  %40 = load i64, i64* %39, align 8
  %41 = sub i64 %38, %40
  %42 = icmp eq i64 %41, 4096
  br i1 %42, label %43, label %47

43:                                               ; preds = %34
  %44 = getelementptr inbounds double*, double** %36, i64 1
  %45 = bitcast double** %44 to i64*
  %46 = load i64, i64* %45, align 8
  br label %47

47:                                               ; preds = %43, %34
  %48 = phi i64 [ %46, %43 ], [ %38, %34 ]
  %49 = phi double** [ %44, %43 ], [ %36, %34 ]
  %50 = inttoptr i64 %48 to double*
  %51 = icmp eq double* %26, %50
  br i1 %51, label %28, label %34

52:                                               ; preds = %28, %52
  %53 = phi double** [ %57, %52 ], [ %3, %28 ]
  %54 = bitcast double** %53 to i8**
  %55 = load i8*, i8** %54, align 8
  tail call void @_ZdlPv(i8* %55) #11
  %56 = load double**, double*** %2, align 8
  %57 = getelementptr inbounds double*, double** %56, i64 1
  store double** %57, double*** %2, align 8
  %58 = load i64, i64* %30, align 8
  %59 = ptrtoint double** %57 to i64
  %60 = sub i64 %58, %59
  %61 = ashr exact i64 %60, 3
  %62 = icmp ugt i64 %61, 2
  br i1 %62, label %52, label %63

63:                                               ; preds = %52, %28
  %64 = phi i64 [ %32, %28 ], [ %61, %52 ]
  switch i64 %64, label %68 [
    i64 1, label %66
    i64 2, label %65
  ]

65:                                               ; preds = %63
  br label %66

66:                                               ; preds = %63, %65
  %67 = phi i64 [ 512, %65 ], [ 256, %63 ]
  store i64 %67, i64* %4, align 8
  br label %68

68:                                               ; preds = %66, %63
  %69 = getelementptr inbounds %"class.ui::LeastSquaresPredictor", %"class.ui::LeastSquaresPredictor"* %0, i64 0, i32 2, i32 0, i32 0, i32 1
  %70 = load double**, double*** %69, align 8
  %71 = getelementptr inbounds %"class.ui::LeastSquaresPredictor", %"class.ui::LeastSquaresPredictor"* %0, i64 0, i32 2, i32 0, i32 1
  %72 = load i64, i64* %71, align 8
  %73 = lshr i64 %72, 9
  %74 = getelementptr inbounds double*, double** %70, i64 %73
  %75 = getelementptr inbounds %"class.ui::LeastSquaresPredictor", %"class.ui::LeastSquaresPredictor"* %0, i64 0, i32 2, i32 0, i32 0, i32 2
  %76 = load double**, double*** %75, align 8
  %77 = icmp eq double** %76, %70
  %78 = ptrtoint double** %76 to i64
  %79 = ptrtoint double** %70 to i64
  br i1 %77, label %80, label %82

80:                                               ; preds = %68
  %81 = getelementptr inbounds %"class.ui::LeastSquaresPredictor", %"class.ui::LeastSquaresPredictor"* %0, i64 0, i32 2, i32 0, i32 2, i32 0, i32 0
  br label %95

82:                                               ; preds = %68
  %83 = load double*, double** %74, align 8
  %84 = and i64 %72, 511
  %85 = getelementptr inbounds double, double* %83, i64 %84
  %86 = getelementptr inbounds %"class.ui::LeastSquaresPredictor", %"class.ui::LeastSquaresPredictor"* %0, i64 0, i32 2, i32 0, i32 2, i32 0, i32 0
  %87 = load i64, i64* %86, align 8
  %88 = add i64 %87, %72
  %89 = lshr i64 %88, 9
  %90 = getelementptr inbounds double*, double** %70, i64 %89
  %91 = load double*, double** %90, align 8
  %92 = and i64 %88, 511
  %93 = getelementptr inbounds double, double* %91, i64 %92
  %94 = icmp eq double* %93, %85
  br i1 %94, label %95, label %101

95:                                               ; preds = %114, %82, %80
  %96 = phi i64* [ %81, %80 ], [ %86, %82 ], [ %86, %114 ]
  store i64 0, i64* %96, align 8
  %97 = bitcast double*** %75 to i64*
  %98 = sub i64 %78, %79
  %99 = ashr exact i64 %98, 3
  %100 = icmp ugt i64 %99, 2
  br i1 %100, label %119, label %130

101:                                              ; preds = %82, %114
  %102 = phi double* [ %117, %114 ], [ %85, %82 ]
  %103 = phi double** [ %116, %114 ], [ %74, %82 ]
  %104 = getelementptr inbounds double, double* %102, i64 1
  %105 = ptrtoint double* %104 to i64
  %106 = bitcast double** %103 to i64*
  %107 = load i64, i64* %106, align 8
  %108 = sub i64 %105, %107
  %109 = icmp eq i64 %108, 4096
  br i1 %109, label %110, label %114

110:                                              ; preds = %101
  %111 = getelementptr inbounds double*, double** %103, i64 1
  %112 = bitcast double** %111 to i64*
  %113 = load i64, i64* %112, align 8
  br label %114

114:                                              ; preds = %110, %101
  %115 = phi i64 [ %113, %110 ], [ %105, %101 ]
  %116 = phi double** [ %111, %110 ], [ %103, %101 ]
  %117 = inttoptr i64 %115 to double*
  %118 = icmp eq double* %93, %117
  br i1 %118, label %95, label %101

119:                                              ; preds = %95, %119
  %120 = phi double** [ %124, %119 ], [ %70, %95 ]
  %121 = bitcast double** %120 to i8**
  %122 = load i8*, i8** %121, align 8
  tail call void @_ZdlPv(i8* %122) #11
  %123 = load double**, double*** %69, align 8
  %124 = getelementptr inbounds double*, double** %123, i64 1
  store double** %124, double*** %69, align 8
  %125 = load i64, i64* %97, align 8
  %126 = ptrtoint double** %124 to i64
  %127 = sub i64 %125, %126
  %128 = ashr exact i64 %127, 3
  %129 = icmp ugt i64 %128, 2
  br i1 %129, label %119, label %130

130:                                              ; preds = %119, %95
  %131 = phi i64 [ %99, %95 ], [ %128, %119 ]
  switch i64 %131, label %135 [
    i64 1, label %133
    i64 2, label %132
  ]

132:                                              ; preds = %130
  br label %133

133:                                              ; preds = %130, %132
  %134 = phi i64 [ 512, %132 ], [ 256, %130 ]
  store i64 %134, i64* %71, align 8
  br label %135

135:                                              ; preds = %133, %130
  %136 = getelementptr inbounds %"class.ui::LeastSquaresPredictor", %"class.ui::LeastSquaresPredictor"* %0, i64 0, i32 3, i32 0, i32 0, i32 1
  %137 = load %"class.base::TimeTicks"**, %"class.base::TimeTicks"*** %136, align 8
  %138 = getelementptr inbounds %"class.ui::LeastSquaresPredictor", %"class.ui::LeastSquaresPredictor"* %0, i64 0, i32 3, i32 0, i32 1
  %139 = load i64, i64* %138, align 8
  %140 = lshr i64 %139, 9
  %141 = getelementptr inbounds %"class.base::TimeTicks"*, %"class.base::TimeTicks"** %137, i64 %140
  %142 = getelementptr inbounds %"class.ui::LeastSquaresPredictor", %"class.ui::LeastSquaresPredictor"* %0, i64 0, i32 3, i32 0, i32 0, i32 2
  %143 = load %"class.base::TimeTicks"**, %"class.base::TimeTicks"*** %142, align 8
  %144 = icmp eq %"class.base::TimeTicks"** %143, %137
  %145 = ptrtoint %"class.base::TimeTicks"** %143 to i64
  %146 = ptrtoint %"class.base::TimeTicks"** %137 to i64
  br i1 %144, label %147, label %149

147:                                              ; preds = %135
  %148 = getelementptr inbounds %"class.ui::LeastSquaresPredictor", %"class.ui::LeastSquaresPredictor"* %0, i64 0, i32 3, i32 0, i32 2, i32 0, i32 0
  br label %162

149:                                              ; preds = %135
  %150 = load %"class.base::TimeTicks"*, %"class.base::TimeTicks"** %141, align 8
  %151 = and i64 %139, 511
  %152 = getelementptr inbounds %"class.base::TimeTicks", %"class.base::TimeTicks"* %150, i64 %151
  %153 = getelementptr inbounds %"class.ui::LeastSquaresPredictor", %"class.ui::LeastSquaresPredictor"* %0, i64 0, i32 3, i32 0, i32 2, i32 0, i32 0
  %154 = load i64, i64* %153, align 8
  %155 = add i64 %154, %139
  %156 = lshr i64 %155, 9
  %157 = getelementptr inbounds %"class.base::TimeTicks"*, %"class.base::TimeTicks"** %137, i64 %156
  %158 = load %"class.base::TimeTicks"*, %"class.base::TimeTicks"** %157, align 8
  %159 = and i64 %155, 511
  %160 = getelementptr inbounds %"class.base::TimeTicks", %"class.base::TimeTicks"* %158, i64 %159
  %161 = icmp eq %"class.base::TimeTicks"* %160, %152
  br i1 %161, label %162, label %168

162:                                              ; preds = %181, %149, %147
  %163 = phi i64* [ %148, %147 ], [ %153, %149 ], [ %153, %181 ]
  store i64 0, i64* %163, align 8
  %164 = bitcast %"class.base::TimeTicks"*** %142 to i64*
  %165 = sub i64 %145, %146
  %166 = ashr exact i64 %165, 3
  %167 = icmp ugt i64 %166, 2
  br i1 %167, label %186, label %197

168:                                              ; preds = %149, %181
  %169 = phi %"class.base::TimeTicks"* [ %184, %181 ], [ %152, %149 ]
  %170 = phi %"class.base::TimeTicks"** [ %183, %181 ], [ %141, %149 ]
  %171 = getelementptr inbounds %"class.base::TimeTicks", %"class.base::TimeTicks"* %169, i64 1
  %172 = ptrtoint %"class.base::TimeTicks"* %171 to i64
  %173 = bitcast %"class.base::TimeTicks"** %170 to i64*
  %174 = load i64, i64* %173, align 8
  %175 = sub i64 %172, %174
  %176 = icmp eq i64 %175, 4096
  br i1 %176, label %177, label %181

177:                                              ; preds = %168
  %178 = getelementptr inbounds %"class.base::TimeTicks"*, %"class.base::TimeTicks"** %170, i64 1
  %179 = bitcast %"class.base::TimeTicks"** %178 to i64*
  %180 = load i64, i64* %179, align 8
  br label %181

181:                                              ; preds = %177, %168
  %182 = phi i64 [ %180, %177 ], [ %172, %168 ]
  %183 = phi %"class.base::TimeTicks"** [ %178, %177 ], [ %170, %168 ]
  %184 = inttoptr i64 %182 to %"class.base::TimeTicks"*
  %185 = icmp eq %"class.base::TimeTicks"* %160, %184
  br i1 %185, label %162, label %168

186:                                              ; preds = %162, %186
  %187 = phi %"class.base::TimeTicks"** [ %191, %186 ], [ %137, %162 ]
  %188 = bitcast %"class.base::TimeTicks"** %187 to i8**
  %189 = load i8*, i8** %188, align 8
  tail call void @_ZdlPv(i8* %189) #11
  %190 = load %"class.base::TimeTicks"**, %"class.base::TimeTicks"*** %136, align 8
  %191 = getelementptr inbounds %"class.base::TimeTicks"*, %"class.base::TimeTicks"** %190, i64 1
  store %"class.base::TimeTicks"** %191, %"class.base::TimeTicks"*** %136, align 8
  %192 = load i64, i64* %164, align 8
  %193 = ptrtoint %"class.base::TimeTicks"** %191 to i64
  %194 = sub i64 %192, %193
  %195 = ashr exact i64 %194, 3
  %196 = icmp ugt i64 %195, 2
  br i1 %196, label %186, label %197

197:                                              ; preds = %186, %162
  %198 = phi i64 [ %166, %162 ], [ %195, %186 ]
  switch i64 %198, label %202 [
    i64 1, label %200
    i64 2, label %199
  ]

199:                                              ; preds = %197
  br label %200

200:                                              ; preds = %197, %199
  %201 = phi i64 [ 512, %199 ], [ 256, %197 ]
  store i64 %201, i64* %138, align 8
  br label %202

202:                                              ; preds = %200, %197
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2ui21LeastSquaresPredictor6UpdateERKNS_14InputPredictor9InputDataE(%"class.ui::LeastSquaresPredictor"*, %"struct.ui::InputPredictor::InputData"* nocapture readonly dereferenceable(16)) unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"class.ui::LeastSquaresPredictor", %"class.ui::LeastSquaresPredictor"* %0, i64 0, i32 3
  %4 = getelementptr inbounds %"class.ui::LeastSquaresPredictor", %"class.ui::LeastSquaresPredictor"* %0, i64 0, i32 3, i32 0, i32 2, i32 0, i32 0
  %5 = load i64, i64* %4, align 8
  %6 = icmp eq i64 %5, 0
  br i1 %6, label %29, label %7

7:                                                ; preds = %2
  %8 = getelementptr inbounds %"class.ui::LeastSquaresPredictor", %"class.ui::LeastSquaresPredictor"* %0, i64 0, i32 3, i32 0, i32 1
  %9 = load i64, i64* %8, align 8
  %10 = add i64 %5, -1
  %11 = add i64 %10, %9
  %12 = getelementptr inbounds %"class.ui::LeastSquaresPredictor", %"class.ui::LeastSquaresPredictor"* %0, i64 0, i32 3, i32 0, i32 0, i32 1
  %13 = load %"class.base::TimeTicks"**, %"class.base::TimeTicks"*** %12, align 8
  %14 = lshr i64 %11, 9
  %15 = getelementptr inbounds %"class.base::TimeTicks"*, %"class.base::TimeTicks"** %13, i64 %14
  %16 = load %"class.base::TimeTicks"*, %"class.base::TimeTicks"** %15, align 8
  %17 = and i64 %11, 511
  %18 = getelementptr inbounds %"class.base::TimeTicks", %"class.base::TimeTicks"* %16, i64 %17, i32 0, i32 0
  %19 = load i64, i64* %18, align 8
  %20 = getelementptr inbounds %"struct.ui::InputPredictor::InputData", %"struct.ui::InputPredictor::InputData"* %1, i64 0, i32 1, i32 0, i32 0
  %21 = load i64, i64* %20, align 8
  %22 = sub nsw i64 %21, %19
  %23 = icmp sgt i64 %22, 20000
  br i1 %23, label %24, label %29

24:                                               ; preds = %7
  %25 = bitcast %"class.ui::LeastSquaresPredictor"* %0 to void (%"class.ui::LeastSquaresPredictor"*)***
  %26 = load void (%"class.ui::LeastSquaresPredictor"*)**, void (%"class.ui::LeastSquaresPredictor"*)*** %25, align 8
  %27 = getelementptr inbounds void (%"class.ui::LeastSquaresPredictor"*)*, void (%"class.ui::LeastSquaresPredictor"*)** %26, i64 3
  %28 = load void (%"class.ui::LeastSquaresPredictor"*)*, void (%"class.ui::LeastSquaresPredictor"*)** %27, align 8
  tail call void %28(%"class.ui::LeastSquaresPredictor"* %0) #12
  br label %29

29:                                               ; preds = %7, %24, %2
  %30 = getelementptr inbounds %"struct.ui::InputPredictor::InputData", %"struct.ui::InputPredictor::InputData"* %1, i64 0, i32 0, i32 0
  %31 = load float, float* %30, align 4
  %32 = fpext float %31 to double
  %33 = getelementptr inbounds %"class.ui::LeastSquaresPredictor", %"class.ui::LeastSquaresPredictor"* %0, i64 0, i32 1, i32 0, i32 0, i32 2
  %34 = bitcast double*** %33 to i64*
  %35 = load i64, i64* %34, align 8
  %36 = getelementptr inbounds %"class.ui::LeastSquaresPredictor", %"class.ui::LeastSquaresPredictor"* %0, i64 0, i32 1, i32 0, i32 0, i32 1
  %37 = bitcast double*** %36 to i64*
  %38 = load i64, i64* %37, align 8
  %39 = sub i64 %35, %38
  %40 = icmp eq i64 %39, 0
  %41 = shl i64 %39, 6
  %42 = add i64 %41, -1
  %43 = select i1 %40, i64 0, i64 %42
  %44 = getelementptr inbounds %"class.ui::LeastSquaresPredictor", %"class.ui::LeastSquaresPredictor"* %0, i64 0, i32 1, i32 0, i32 1
  %45 = load i64, i64* %44, align 8
  %46 = getelementptr inbounds %"class.ui::LeastSquaresPredictor", %"class.ui::LeastSquaresPredictor"* %0, i64 0, i32 1, i32 0, i32 2, i32 0, i32 0
  %47 = load i64, i64* %46, align 8
  %48 = add i64 %47, %45
  %49 = icmp eq i64 %43, %48
  %50 = inttoptr i64 %38 to double**
  %51 = inttoptr i64 %35 to double**
  br i1 %49, label %52, label %59

52:                                               ; preds = %29
  %53 = getelementptr inbounds %"class.ui::LeastSquaresPredictor", %"class.ui::LeastSquaresPredictor"* %0, i64 0, i32 1
  tail call void @_ZNSt3__15dequeIdNS_9allocatorIdEEE19__add_back_capacityEv(%"class.std::__1::deque"* %53) #12
  %54 = load i64, i64* %46, align 8
  %55 = load i64, i64* %44, align 8
  %56 = load double**, double*** %36, align 8
  %57 = load double**, double*** %33, align 8
  %58 = add i64 %55, %54
  br label %59

59:                                               ; preds = %52, %29
  %60 = phi i64 [ %58, %52 ], [ %48, %29 ]
  %61 = phi double** [ %57, %52 ], [ %51, %29 ]
  %62 = phi double** [ %56, %52 ], [ %50, %29 ]
  %63 = icmp eq double** %61, %62
  br i1 %63, label %70, label %64

64:                                               ; preds = %59
  %65 = lshr i64 %60, 9
  %66 = getelementptr inbounds double*, double** %62, i64 %65
  %67 = load double*, double** %66, align 8
  %68 = and i64 %60, 511
  %69 = getelementptr inbounds double, double* %67, i64 %68
  br label %70

70:                                               ; preds = %59, %64
  %71 = phi double* [ %69, %64 ], [ null, %59 ]
  store double %32, double* %71, align 8
  %72 = load i64, i64* %46, align 8
  %73 = add i64 %72, 1
  store i64 %73, i64* %46, align 8
  %74 = getelementptr inbounds %"struct.ui::InputPredictor::InputData", %"struct.ui::InputPredictor::InputData"* %1, i64 0, i32 0, i32 1
  %75 = load float, float* %74, align 4
  %76 = fpext float %75 to double
  %77 = getelementptr inbounds %"class.ui::LeastSquaresPredictor", %"class.ui::LeastSquaresPredictor"* %0, i64 0, i32 2, i32 0, i32 0, i32 2
  %78 = bitcast double*** %77 to i64*
  %79 = load i64, i64* %78, align 8
  %80 = getelementptr inbounds %"class.ui::LeastSquaresPredictor", %"class.ui::LeastSquaresPredictor"* %0, i64 0, i32 2, i32 0, i32 0, i32 1
  %81 = bitcast double*** %80 to i64*
  %82 = load i64, i64* %81, align 8
  %83 = sub i64 %79, %82
  %84 = icmp eq i64 %83, 0
  %85 = shl i64 %83, 6
  %86 = add i64 %85, -1
  %87 = select i1 %84, i64 0, i64 %86
  %88 = getelementptr inbounds %"class.ui::LeastSquaresPredictor", %"class.ui::LeastSquaresPredictor"* %0, i64 0, i32 2, i32 0, i32 1
  %89 = load i64, i64* %88, align 8
  %90 = getelementptr inbounds %"class.ui::LeastSquaresPredictor", %"class.ui::LeastSquaresPredictor"* %0, i64 0, i32 2, i32 0, i32 2, i32 0, i32 0
  %91 = load i64, i64* %90, align 8
  %92 = add i64 %91, %89
  %93 = icmp eq i64 %87, %92
  %94 = inttoptr i64 %82 to double**
  %95 = inttoptr i64 %79 to double**
  br i1 %93, label %96, label %103

96:                                               ; preds = %70
  %97 = getelementptr inbounds %"class.ui::LeastSquaresPredictor", %"class.ui::LeastSquaresPredictor"* %0, i64 0, i32 2
  tail call void @_ZNSt3__15dequeIdNS_9allocatorIdEEE19__add_back_capacityEv(%"class.std::__1::deque"* %97) #12
  %98 = load i64, i64* %90, align 8
  %99 = load i64, i64* %88, align 8
  %100 = load double**, double*** %80, align 8
  %101 = load double**, double*** %77, align 8
  %102 = add i64 %99, %98
  br label %103

103:                                              ; preds = %96, %70
  %104 = phi i64 [ %102, %96 ], [ %92, %70 ]
  %105 = phi double** [ %101, %96 ], [ %95, %70 ]
  %106 = phi double** [ %100, %96 ], [ %94, %70 ]
  %107 = icmp eq double** %105, %106
  br i1 %107, label %114, label %108

108:                                              ; preds = %103
  %109 = lshr i64 %104, 9
  %110 = getelementptr inbounds double*, double** %106, i64 %109
  %111 = load double*, double** %110, align 8
  %112 = and i64 %104, 511
  %113 = getelementptr inbounds double, double* %111, i64 %112
  br label %114

114:                                              ; preds = %103, %108
  %115 = phi double* [ %113, %108 ], [ null, %103 ]
  store double %76, double* %115, align 8
  %116 = load i64, i64* %90, align 8
  %117 = add i64 %116, 1
  store i64 %117, i64* %90, align 8
  %118 = getelementptr inbounds %"class.ui::LeastSquaresPredictor", %"class.ui::LeastSquaresPredictor"* %0, i64 0, i32 3, i32 0, i32 0, i32 2
  %119 = bitcast %"class.base::TimeTicks"*** %118 to i64*
  %120 = load i64, i64* %119, align 8
  %121 = getelementptr inbounds %"class.ui::LeastSquaresPredictor", %"class.ui::LeastSquaresPredictor"* %0, i64 0, i32 3, i32 0, i32 0, i32 1
  %122 = bitcast %"class.base::TimeTicks"*** %121 to i64*
  %123 = load i64, i64* %122, align 8
  %124 = sub i64 %120, %123
  %125 = icmp eq i64 %124, 0
  %126 = shl i64 %124, 6
  %127 = add i64 %126, -1
  %128 = select i1 %125, i64 0, i64 %127
  %129 = getelementptr inbounds %"class.ui::LeastSquaresPredictor", %"class.ui::LeastSquaresPredictor"* %0, i64 0, i32 3, i32 0, i32 1
  %130 = load i64, i64* %129, align 8
  %131 = load i64, i64* %4, align 8
  %132 = add i64 %131, %130
  %133 = icmp eq i64 %128, %132
  %134 = inttoptr i64 %123 to %"class.base::TimeTicks"**
  %135 = inttoptr i64 %120 to %"class.base::TimeTicks"**
  br i1 %133, label %136, label %142

136:                                              ; preds = %114
  tail call void @_ZNSt3__15dequeIN4base9TimeTicksENS_9allocatorIS2_EEE19__add_back_capacityEv(%"class.std::__1::deque.6"* %3) #12
  %137 = load i64, i64* %4, align 8
  %138 = load i64, i64* %129, align 8
  %139 = load %"class.base::TimeTicks"**, %"class.base::TimeTicks"*** %121, align 8
  %140 = load %"class.base::TimeTicks"**, %"class.base::TimeTicks"*** %118, align 8
  %141 = add i64 %138, %137
  br label %142

142:                                              ; preds = %136, %114
  %143 = phi i64 [ %141, %136 ], [ %132, %114 ]
  %144 = phi %"class.base::TimeTicks"** [ %140, %136 ], [ %135, %114 ]
  %145 = phi %"class.base::TimeTicks"** [ %139, %136 ], [ %134, %114 ]
  %146 = icmp eq %"class.base::TimeTicks"** %144, %145
  br i1 %146, label %153, label %147

147:                                              ; preds = %142
  %148 = lshr i64 %143, 9
  %149 = getelementptr inbounds %"class.base::TimeTicks"*, %"class.base::TimeTicks"** %145, i64 %148
  %150 = load %"class.base::TimeTicks"*, %"class.base::TimeTicks"** %149, align 8
  %151 = and i64 %143, 511
  %152 = getelementptr inbounds %"class.base::TimeTicks", %"class.base::TimeTicks"* %150, i64 %151
  br label %153

153:                                              ; preds = %142, %147
  %154 = phi %"class.base::TimeTicks"* [ %152, %147 ], [ null, %142 ]
  %155 = getelementptr inbounds %"struct.ui::InputPredictor::InputData", %"struct.ui::InputPredictor::InputData"* %1, i64 0, i32 1, i32 0, i32 0
  %156 = getelementptr inbounds %"class.base::TimeTicks", %"class.base::TimeTicks"* %154, i64 0, i32 0, i32 0
  %157 = load i64, i64* %155, align 8
  store i64 %157, i64* %156, align 8
  %158 = load i64, i64* %4, align 8
  %159 = add i64 %158, 1
  store i64 %159, i64* %4, align 8
  %160 = icmp ugt i64 %159, 3
  br i1 %160, label %161, label %206

161:                                              ; preds = %153
  %162 = bitcast i64* %44 to <2 x i64>*
  %163 = load <2 x i64>, <2 x i64>* %162, align 8
  %164 = add <2 x i64> %163, <i64 1, i64 -1>
  %165 = bitcast i64* %44 to <2 x i64>*
  store <2 x i64> %164, <2 x i64>* %165, align 8
  %166 = extractelement <2 x i64> %164, i32 0
  %167 = icmp ult i64 %166, 1024
  br i1 %167, label %176, label %168

168:                                              ; preds = %161
  %169 = bitcast double*** %36 to i8***
  %170 = load i8**, i8*** %169, align 8
  %171 = load i8*, i8** %170, align 8
  tail call void @_ZdlPv(i8* %171) #11
  %172 = load double**, double*** %36, align 8
  %173 = getelementptr inbounds double*, double** %172, i64 1
  store double** %173, double*** %36, align 8
  %174 = load i64, i64* %44, align 8
  %175 = add i64 %174, -512
  store i64 %175, i64* %44, align 8
  br label %176

176:                                              ; preds = %161, %168
  %177 = bitcast i64* %88 to <2 x i64>*
  %178 = load <2 x i64>, <2 x i64>* %177, align 8
  %179 = add <2 x i64> %178, <i64 1, i64 -1>
  %180 = bitcast i64* %88 to <2 x i64>*
  store <2 x i64> %179, <2 x i64>* %180, align 8
  %181 = extractelement <2 x i64> %179, i32 0
  %182 = icmp ult i64 %181, 1024
  br i1 %182, label %191, label %183

183:                                              ; preds = %176
  %184 = bitcast double*** %80 to i8***
  %185 = load i8**, i8*** %184, align 8
  %186 = load i8*, i8** %185, align 8
  tail call void @_ZdlPv(i8* %186) #11
  %187 = load double**, double*** %80, align 8
  %188 = getelementptr inbounds double*, double** %187, i64 1
  store double** %188, double*** %80, align 8
  %189 = load i64, i64* %88, align 8
  %190 = add i64 %189, -512
  store i64 %190, i64* %88, align 8
  br label %191

191:                                              ; preds = %176, %183
  %192 = bitcast i64* %129 to <2 x i64>*
  %193 = load <2 x i64>, <2 x i64>* %192, align 8
  %194 = add <2 x i64> %193, <i64 1, i64 -1>
  %195 = bitcast i64* %129 to <2 x i64>*
  store <2 x i64> %194, <2 x i64>* %195, align 8
  %196 = extractelement <2 x i64> %194, i32 0
  %197 = icmp ult i64 %196, 1024
  br i1 %197, label %206, label %198

198:                                              ; preds = %191
  %199 = bitcast %"class.base::TimeTicks"*** %121 to i8***
  %200 = load i8**, i8*** %199, align 8
  %201 = load i8*, i8** %200, align 8
  tail call void @_ZdlPv(i8* %201) #11
  %202 = load %"class.base::TimeTicks"**, %"class.base::TimeTicks"*** %121, align 8
  %203 = getelementptr inbounds %"class.base::TimeTicks"*, %"class.base::TimeTicks"** %202, i64 1
  store %"class.base::TimeTicks"** %203, %"class.base::TimeTicks"*** %121, align 8
  %204 = load i64, i64* %129, align 8
  %205 = add i64 %204, -512
  store i64 %205, i64* %129, align 8
  br label %206

206:                                              ; preds = %198, %191, %153
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #3

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #3

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden zeroext i1 @_ZNK2ui21LeastSquaresPredictor13HasPredictionEv(%"class.ui::LeastSquaresPredictor"* nocapture readonly) unnamed_addr #4 align 2 {
  %2 = getelementptr inbounds %"class.ui::LeastSquaresPredictor", %"class.ui::LeastSquaresPredictor"* %0, i64 0, i32 3, i32 0, i32 2, i32 0, i32 0
  %3 = load i64, i64* %2, align 8
  %4 = icmp ugt i64 %3, 2
  ret i1 %4
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZNK2ui21LeastSquaresPredictor10GetXMatrixEv(%"class.gfx::Matrix3F"* noalias sret, %"class.ui::LeastSquaresPredictor"* nocapture readonly) local_unnamed_addr #0 align 2 {
  %3 = alloca %"class.base::TimeDelta", align 8
  %4 = alloca %"class.base::TimeDelta", align 8
  %5 = bitcast %"class.gfx::Matrix3F"* %0 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 4 %5, i8 -1, i64 36, i1 false)
  tail call void @_ZN3gfx8Matrix3F5ZerosEv(%"class.gfx::Matrix3F"* sret %0) #12
  %6 = bitcast %"class.base::TimeDelta"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %6) #12
  %7 = getelementptr inbounds %"class.ui::LeastSquaresPredictor", %"class.ui::LeastSquaresPredictor"* %1, i64 0, i32 3, i32 0, i32 1
  %8 = load i64, i64* %7, align 8
  %9 = add i64 %8, 1
  %10 = getelementptr inbounds %"class.ui::LeastSquaresPredictor", %"class.ui::LeastSquaresPredictor"* %1, i64 0, i32 3, i32 0, i32 0, i32 1
  %11 = load %"class.base::TimeTicks"**, %"class.base::TimeTicks"*** %10, align 8
  %12 = lshr i64 %9, 9
  %13 = getelementptr inbounds %"class.base::TimeTicks"*, %"class.base::TimeTicks"** %11, i64 %12
  %14 = load %"class.base::TimeTicks"*, %"class.base::TimeTicks"** %13, align 8
  %15 = and i64 %9, 511
  %16 = lshr i64 %8, 9
  %17 = getelementptr inbounds %"class.base::TimeTicks"*, %"class.base::TimeTicks"** %11, i64 %16
  %18 = load %"class.base::TimeTicks"*, %"class.base::TimeTicks"** %17, align 8
  %19 = and i64 %8, 511
  %20 = getelementptr inbounds %"class.base::TimeTicks", %"class.base::TimeTicks"* %18, i64 %19, i32 0, i32 0
  %21 = load i64, i64* %20, align 8
  %22 = getelementptr inbounds %"class.base::TimeTicks", %"class.base::TimeTicks"* %14, i64 %15, i32 0, i32 0
  %23 = load i64, i64* %22, align 8
  %24 = sub nsw i64 %23, %21
  %25 = getelementptr inbounds %"class.base::TimeDelta", %"class.base::TimeDelta"* %3, i64 0, i32 0
  store i64 %24, i64* %25, align 8
  %26 = call double @_ZNK4base9TimeDelta15InMillisecondsFEv(%"class.base::TimeDelta"* nonnull %3) #12
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %6) #12
  %27 = bitcast %"class.base::TimeDelta"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %27) #12
  %28 = load i64, i64* %7, align 8
  %29 = add i64 %28, 2
  %30 = load %"class.base::TimeTicks"**, %"class.base::TimeTicks"*** %10, align 8
  %31 = lshr i64 %29, 9
  %32 = getelementptr inbounds %"class.base::TimeTicks"*, %"class.base::TimeTicks"** %30, i64 %31
  %33 = load %"class.base::TimeTicks"*, %"class.base::TimeTicks"** %32, align 8
  %34 = and i64 %29, 511
  %35 = lshr i64 %28, 9
  %36 = getelementptr inbounds %"class.base::TimeTicks"*, %"class.base::TimeTicks"** %30, i64 %35
  %37 = load %"class.base::TimeTicks"*, %"class.base::TimeTicks"** %36, align 8
  %38 = and i64 %28, 511
  %39 = getelementptr inbounds %"class.base::TimeTicks", %"class.base::TimeTicks"* %37, i64 %38, i32 0, i32 0
  %40 = load i64, i64* %39, align 8
  %41 = getelementptr inbounds %"class.base::TimeTicks", %"class.base::TimeTicks"* %33, i64 %34, i32 0, i32 0
  %42 = load i64, i64* %41, align 8
  %43 = sub nsw i64 %42, %40
  %44 = getelementptr inbounds %"class.base::TimeDelta", %"class.base::TimeDelta"* %4, i64 0, i32 0
  store i64 %43, i64* %44, align 8
  %45 = call double @_ZNK4base9TimeDelta15InMillisecondsFEv(%"class.base::TimeDelta"* nonnull %4) #12
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %27) #12
  %46 = fptrunc double %26 to float
  %47 = fmul double %26, %26
  %48 = fptrunc double %47 to float
  %49 = fptrunc double %45 to float
  %50 = fmul double %45, %45
  %51 = fptrunc double %50 to float
  %52 = bitcast %"class.gfx::Matrix3F"* %0 to <4 x float>*
  store <4 x float> <float 1.000000e+00, float 0.000000e+00, float 0.000000e+00, float 1.000000e+00>, <4 x float>* %52, align 4
  %53 = getelementptr inbounds %"class.gfx::Matrix3F", %"class.gfx::Matrix3F"* %0, i64 0, i32 0, i64 4
  store float %46, float* %53, align 4
  %54 = getelementptr inbounds %"class.gfx::Matrix3F", %"class.gfx::Matrix3F"* %0, i64 0, i32 0, i64 5
  store float %48, float* %54, align 4
  %55 = getelementptr inbounds %"class.gfx::Matrix3F", %"class.gfx::Matrix3F"* %0, i64 0, i32 0, i64 6
  store float 1.000000e+00, float* %55, align 4
  %56 = getelementptr inbounds %"class.gfx::Matrix3F", %"class.gfx::Matrix3F"* %0, i64 0, i32 0, i64 7
  store float %49, float* %56, align 4
  %57 = getelementptr inbounds %"class.gfx::Matrix3F", %"class.gfx::Matrix3F"* %0, i64 0, i32 0, i64 8
  store float %51, float* %57, align 4
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #3

declare void @_ZN3gfx8Matrix3F5ZerosEv(%"class.gfx::Matrix3F"* sret) local_unnamed_addr #5

declare double @_ZNK4base9TimeDelta15InMillisecondsFEv(%"class.base::TimeDelta"*) local_unnamed_addr #5

; Function Attrs: nounwind
declare void @_ZN3gfx8Matrix3FD1Ev(%"class.gfx::Matrix3F"*) unnamed_addr #6

; Function Attrs: nounwind ssp uwtable
define hidden %"struct.ui::InputPredictor::InputData"* @_ZN2ui21LeastSquaresPredictor18GeneratePredictionEN4base9TimeTicksENS1_9TimeDeltaE(%"class.ui::LeastSquaresPredictor"*, i64, i64) unnamed_addr #0 align 2 {
  %4 = alloca %"class.base::TimeDelta", align 8
  %5 = alloca %"class.base::TimeDelta", align 8
  %6 = alloca %"class.base::TimeDelta", align 8
  %7 = alloca %"class.gfx::Vector3dF", align 4
  %8 = alloca %"class.gfx::Vector3dF", align 4
  %9 = alloca %"class.gfx::Matrix3F", align 16
  %10 = alloca %"class.gfx::Vector3dF", align 4
  %11 = bitcast %"class.ui::LeastSquaresPredictor"* %0 to i1 (%"class.ui::LeastSquaresPredictor"*)***
  %12 = load i1 (%"class.ui::LeastSquaresPredictor"*)**, i1 (%"class.ui::LeastSquaresPredictor"*)*** %11, align 8
  %13 = getelementptr inbounds i1 (%"class.ui::LeastSquaresPredictor"*)*, i1 (%"class.ui::LeastSquaresPredictor"*)** %12, i64 5
  %14 = load i1 (%"class.ui::LeastSquaresPredictor"*)*, i1 (%"class.ui::LeastSquaresPredictor"*)** %13, align 8
  %15 = tail call zeroext i1 %14(%"class.ui::LeastSquaresPredictor"* %0) #12
  br i1 %15, label %16, label %114

16:                                               ; preds = %3
  %17 = bitcast %"class.base::TimeDelta"* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %17) #12
  %18 = getelementptr inbounds %"class.ui::LeastSquaresPredictor", %"class.ui::LeastSquaresPredictor"* %0, i64 0, i32 3, i32 0, i32 1
  %19 = load i64, i64* %18, align 8
  %20 = getelementptr inbounds %"class.ui::LeastSquaresPredictor", %"class.ui::LeastSquaresPredictor"* %0, i64 0, i32 3, i32 0, i32 0, i32 1
  %21 = load %"class.base::TimeTicks"**, %"class.base::TimeTicks"*** %20, align 8
  %22 = lshr i64 %19, 9
  %23 = getelementptr inbounds %"class.base::TimeTicks"*, %"class.base::TimeTicks"** %21, i64 %22
  %24 = load %"class.base::TimeTicks"*, %"class.base::TimeTicks"** %23, align 8
  %25 = and i64 %19, 511
  %26 = getelementptr inbounds %"class.base::TimeTicks", %"class.base::TimeTicks"* %24, i64 %25, i32 0, i32 0
  %27 = load i64, i64* %26, align 8
  %28 = sub nsw i64 %1, %27
  %29 = getelementptr inbounds %"class.base::TimeDelta", %"class.base::TimeDelta"* %6, i64 0, i32 0
  store i64 %28, i64* %29, align 8
  %30 = call double @_ZNK4base9TimeDelta15InMillisecondsFEv(%"class.base::TimeDelta"* nonnull %6) #12
  %31 = fptrunc double %30 to float
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %17) #12
  %32 = bitcast %"class.gfx::Vector3dF"* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 12, i8* nonnull %32) #12
  %33 = getelementptr inbounds %"class.gfx::Vector3dF", %"class.gfx::Vector3dF"* %7, i64 0, i32 0
  %34 = getelementptr inbounds %"class.gfx::Vector3dF", %"class.gfx::Vector3dF"* %7, i64 0, i32 1
  %35 = getelementptr inbounds %"class.gfx::Vector3dF", %"class.gfx::Vector3dF"* %7, i64 0, i32 2
  store float 0.000000e+00, float* %33, align 4
  store float 0.000000e+00, float* %34, align 4
  store float 0.000000e+00, float* %35, align 4
  %36 = bitcast %"class.gfx::Vector3dF"* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 12, i8* nonnull %36) #12
  %37 = getelementptr inbounds %"class.gfx::Vector3dF", %"class.gfx::Vector3dF"* %8, i64 0, i32 0
  %38 = getelementptr inbounds %"class.gfx::Vector3dF", %"class.gfx::Vector3dF"* %8, i64 0, i32 1
  %39 = getelementptr inbounds %"class.gfx::Vector3dF", %"class.gfx::Vector3dF"* %8, i64 0, i32 2
  store float 0.000000e+00, float* %37, align 4
  store float 0.000000e+00, float* %38, align 4
  store float 0.000000e+00, float* %39, align 4
  %40 = bitcast %"class.gfx::Matrix3F"* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 36, i8* nonnull %40) #12
  %41 = bitcast %"class.gfx::Matrix3F"* %9 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %41, i8 -1, i64 36, i1 false)
  call void @_ZN3gfx8Matrix3F5ZerosEv(%"class.gfx::Matrix3F"* nonnull sret %9) #12
  %42 = bitcast %"class.base::TimeDelta"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %42) #12, !noalias !2
  %43 = load i64, i64* %18, align 8, !noalias !2
  %44 = add i64 %43, 1
  %45 = load %"class.base::TimeTicks"**, %"class.base::TimeTicks"*** %20, align 8, !noalias !2
  %46 = lshr i64 %44, 9
  %47 = getelementptr inbounds %"class.base::TimeTicks"*, %"class.base::TimeTicks"** %45, i64 %46
  %48 = load %"class.base::TimeTicks"*, %"class.base::TimeTicks"** %47, align 8
  %49 = and i64 %44, 511
  %50 = lshr i64 %43, 9
  %51 = getelementptr inbounds %"class.base::TimeTicks"*, %"class.base::TimeTicks"** %45, i64 %50
  %52 = load %"class.base::TimeTicks"*, %"class.base::TimeTicks"** %51, align 8
  %53 = and i64 %43, 511
  %54 = getelementptr inbounds %"class.base::TimeTicks", %"class.base::TimeTicks"* %52, i64 %53, i32 0, i32 0
  %55 = load i64, i64* %54, align 8
  %56 = getelementptr inbounds %"class.base::TimeTicks", %"class.base::TimeTicks"* %48, i64 %49, i32 0, i32 0
  %57 = load i64, i64* %56, align 8
  %58 = sub nsw i64 %57, %55
  %59 = getelementptr inbounds %"class.base::TimeDelta", %"class.base::TimeDelta"* %4, i64 0, i32 0
  store i64 %58, i64* %59, align 8, !noalias !2
  %60 = call double @_ZNK4base9TimeDelta15InMillisecondsFEv(%"class.base::TimeDelta"* nonnull %4) #12
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %42) #12, !noalias !2
  %61 = bitcast %"class.base::TimeDelta"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %61) #12, !noalias !2
  %62 = load i64, i64* %18, align 8, !noalias !2
  %63 = add i64 %62, 2
  %64 = load %"class.base::TimeTicks"**, %"class.base::TimeTicks"*** %20, align 8, !noalias !2
  %65 = lshr i64 %63, 9
  %66 = getelementptr inbounds %"class.base::TimeTicks"*, %"class.base::TimeTicks"** %64, i64 %65
  %67 = load %"class.base::TimeTicks"*, %"class.base::TimeTicks"** %66, align 8
  %68 = and i64 %63, 511
  %69 = lshr i64 %62, 9
  %70 = getelementptr inbounds %"class.base::TimeTicks"*, %"class.base::TimeTicks"** %64, i64 %69
  %71 = load %"class.base::TimeTicks"*, %"class.base::TimeTicks"** %70, align 8
  %72 = and i64 %62, 511
  %73 = getelementptr inbounds %"class.base::TimeTicks", %"class.base::TimeTicks"* %71, i64 %72, i32 0, i32 0
  %74 = load i64, i64* %73, align 8
  %75 = getelementptr inbounds %"class.base::TimeTicks", %"class.base::TimeTicks"* %67, i64 %68, i32 0, i32 0
  %76 = load i64, i64* %75, align 8
  %77 = sub nsw i64 %76, %74
  %78 = getelementptr inbounds %"class.base::TimeDelta", %"class.base::TimeDelta"* %5, i64 0, i32 0
  store i64 %77, i64* %78, align 8, !noalias !2
  %79 = call double @_ZNK4base9TimeDelta15InMillisecondsFEv(%"class.base::TimeDelta"* nonnull %5) #12
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %61) #12, !noalias !2
  %80 = fptrunc double %60 to float
  %81 = fmul double %60, %60
  %82 = fptrunc double %81 to float
  %83 = fptrunc double %79 to float
  %84 = fmul double %79, %79
  %85 = fptrunc double %84 to float
  %86 = bitcast %"class.gfx::Matrix3F"* %9 to <4 x float>*
  store <4 x float> <float 1.000000e+00, float 0.000000e+00, float 0.000000e+00, float 1.000000e+00>, <4 x float>* %86, align 16, !alias.scope !2
  %87 = getelementptr inbounds %"class.gfx::Matrix3F", %"class.gfx::Matrix3F"* %9, i64 0, i32 0, i64 4
  store float %80, float* %87, align 16, !alias.scope !2
  %88 = getelementptr inbounds %"class.gfx::Matrix3F", %"class.gfx::Matrix3F"* %9, i64 0, i32 0, i64 5
  store float %82, float* %88, align 4, !alias.scope !2
  %89 = getelementptr inbounds %"class.gfx::Matrix3F", %"class.gfx::Matrix3F"* %9, i64 0, i32 0, i64 6
  store float 1.000000e+00, float* %89, align 8, !alias.scope !2
  %90 = getelementptr inbounds %"class.gfx::Matrix3F", %"class.gfx::Matrix3F"* %9, i64 0, i32 0, i64 7
  store float %83, float* %90, align 4, !alias.scope !2
  %91 = getelementptr inbounds %"class.gfx::Matrix3F", %"class.gfx::Matrix3F"* %9, i64 0, i32 0, i64 8
  store float %85, float* %91, align 16, !alias.scope !2
  %92 = getelementptr inbounds %"class.ui::LeastSquaresPredictor", %"class.ui::LeastSquaresPredictor"* %0, i64 0, i32 1
  %93 = call fastcc zeroext i1 @_ZN2ui12_GLOBAL__N_117SolveLeastSquaresERKN3gfx8Matrix3FERKNSt3__15dequeIdNS5_9allocatorIdEEEERNS1_9Vector3dFE(%"class.gfx::Matrix3F"* nonnull dereferenceable(36) %9, %"class.std::__1::deque"* dereferenceable(48) %92, %"class.gfx::Vector3dF"* nonnull dereferenceable(12) %7)
  br i1 %93, label %94, label %112

94:                                               ; preds = %16
  %95 = getelementptr inbounds %"class.ui::LeastSquaresPredictor", %"class.ui::LeastSquaresPredictor"* %0, i64 0, i32 2
  %96 = call fastcc zeroext i1 @_ZN2ui12_GLOBAL__N_117SolveLeastSquaresERKN3gfx8Matrix3FERKNSt3__15dequeIdNS5_9allocatorIdEEEERNS1_9Vector3dFE(%"class.gfx::Matrix3F"* nonnull dereferenceable(36) %9, %"class.std::__1::deque"* dereferenceable(48) %95, %"class.gfx::Vector3dF"* nonnull dereferenceable(12) %8)
  br i1 %96, label %97, label %112

97:                                               ; preds = %94
  %98 = bitcast %"class.gfx::Vector3dF"* %10 to i8*
  call void @llvm.lifetime.start.p0i8(i64 12, i8* nonnull %98) #12
  %99 = getelementptr inbounds %"class.gfx::Vector3dF", %"class.gfx::Vector3dF"* %10, i64 0, i32 0
  %100 = getelementptr inbounds %"class.gfx::Vector3dF", %"class.gfx::Vector3dF"* %10, i64 0, i32 1
  %101 = getelementptr inbounds %"class.gfx::Vector3dF", %"class.gfx::Vector3dF"* %10, i64 0, i32 2
  %102 = fmul float %31, %31
  store float 1.000000e+00, float* %99, align 4
  store float %31, float* %100, align 4
  store float %102, float* %101, align 4
  %103 = call float @_ZN3gfx10DotProductERKNS_9Vector3dFES2_(%"class.gfx::Vector3dF"* nonnull dereferenceable(12) %10, %"class.gfx::Vector3dF"* nonnull dereferenceable(12) %7) #12
  %104 = call float @_ZN3gfx10DotProductERKNS_9Vector3dFES2_(%"class.gfx::Vector3dF"* nonnull dereferenceable(12) %10, %"class.gfx::Vector3dF"* nonnull dereferenceable(12) %8) #12
  %105 = call i8* @_Znwm(i64 16) #11
  %106 = getelementptr inbounds i8, i8* %105, i64 8
  %107 = bitcast i8* %106 to i64*
  %108 = bitcast i8* %105 to float*
  store float %103, float* %108, align 8
  %109 = getelementptr inbounds i8, i8* %105, i64 4
  %110 = bitcast i8* %109 to float*
  store float %104, float* %110, align 4
  store i64 %1, i64* %107, align 8
  %111 = ptrtoint i8* %105 to i64
  call void @llvm.lifetime.end.p0i8(i64 12, i8* nonnull %98) #12
  br label %112

112:                                              ; preds = %16, %94, %97
  %113 = phi i64 [ %111, %97 ], [ 0, %94 ], [ 0, %16 ]
  call void @_ZN3gfx8Matrix3FD1Ev(%"class.gfx::Matrix3F"* nonnull %9) #12
  call void @llvm.lifetime.end.p0i8(i64 36, i8* nonnull %40) #12
  call void @llvm.lifetime.end.p0i8(i64 12, i8* nonnull %36) #12
  call void @llvm.lifetime.end.p0i8(i64 12, i8* nonnull %32) #12
  br label %114

114:                                              ; preds = %3, %112
  %115 = phi i64 [ %113, %112 ], [ 0, %3 ]
  %116 = inttoptr i64 %115 to %"struct.ui::InputPredictor::InputData"*
  ret %"struct.ui::InputPredictor::InputData"* %116
}

; Function Attrs: nounwind ssp uwtable
define internal fastcc zeroext i1 @_ZN2ui12_GLOBAL__N_117SolveLeastSquaresERKN3gfx8Matrix3FERKNSt3__15dequeIdNS5_9allocatorIdEEEERNS1_9Vector3dFE(%"class.gfx::Matrix3F"* dereferenceable(36), %"class.std::__1::deque"* nocapture readonly dereferenceable(48), %"class.gfx::Vector3dF"* nocapture dereferenceable(12)) unnamed_addr #0 {
  %4 = alloca %"class.gfx::Matrix3F", align 4
  %5 = alloca %"class.gfx::Matrix3F", align 4
  %6 = alloca %"class.gfx::Matrix3F", align 4
  %7 = alloca %"class.gfx::Matrix3F", align 4
  %8 = alloca %"class.gfx::Matrix3F", align 4
  %9 = alloca %"class.gfx::Vector3dF", align 4
  %10 = getelementptr inbounds %"class.std::__1::deque", %"class.std::__1::deque"* %1, i64 0, i32 0, i32 1
  %11 = load i64, i64* %10, align 8
  %12 = getelementptr inbounds %"class.std::__1::deque", %"class.std::__1::deque"* %1, i64 0, i32 0, i32 0, i32 1
  %13 = load double**, double*** %12, align 8
  %14 = lshr i64 %11, 9
  %15 = getelementptr inbounds double*, double** %13, i64 %14
  %16 = load double*, double** %15, align 8
  %17 = and i64 %11, 511
  %18 = getelementptr inbounds double, double* %16, i64 %17
  %19 = load double, double* %18, align 8
  %20 = add i64 %11, 1
  %21 = lshr i64 %20, 9
  %22 = getelementptr inbounds double*, double** %13, i64 %21
  %23 = load double*, double** %22, align 8
  %24 = and i64 %20, 511
  %25 = getelementptr inbounds double, double* %23, i64 %24
  %26 = load double, double* %25, align 8
  %27 = fsub double %19, %26
  %28 = tail call double @llvm.fabs.f64(double %27) #12
  %29 = fcmp olt double %28, 0x3CB0000000000000
  br i1 %29, label %30, label %46

30:                                               ; preds = %3
  %31 = add i64 %11, 2
  %32 = lshr i64 %31, 9
  %33 = getelementptr inbounds double*, double** %13, i64 %32
  %34 = load double*, double** %33, align 8
  %35 = and i64 %31, 511
  %36 = getelementptr inbounds double, double* %34, i64 %35
  %37 = load double, double* %36, align 8
  %38 = fsub double %26, %37
  %39 = tail call double @llvm.fabs.f64(double %38) #12
  %40 = fcmp olt double %39, 0x3CB0000000000000
  br i1 %40, label %41, label %46

41:                                               ; preds = %30
  %42 = fptrunc double %37 to float
  %43 = getelementptr inbounds %"class.gfx::Vector3dF", %"class.gfx::Vector3dF"* %2, i64 0, i32 0
  store float %42, float* %43, align 4
  %44 = getelementptr inbounds %"class.gfx::Vector3dF", %"class.gfx::Vector3dF"* %2, i64 0, i32 1
  store float 0.000000e+00, float* %44, align 4
  %45 = getelementptr inbounds %"class.gfx::Vector3dF", %"class.gfx::Vector3dF"* %2, i64 0, i32 2
  store float 0.000000e+00, float* %45, align 4
  br label %90

46:                                               ; preds = %30, %3
  %47 = bitcast %"class.gfx::Matrix3F"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 36, i8* nonnull %47) #12
  call void @llvm.memset.p0i8.i64(i8* nonnull align 4 %47, i8 -1, i64 36, i1 false)
  call void @_ZNK3gfx8Matrix3F9TransposeEv(%"class.gfx::Matrix3F"* nonnull sret %4, %"class.gfx::Matrix3F"* %0) #12
  %48 = bitcast %"class.gfx::Matrix3F"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 36, i8* nonnull %48) #12
  call void @llvm.memset.p0i8.i64(i8* nonnull align 4 %48, i8 -1, i64 36, i1 false)
  %49 = bitcast %"class.gfx::Matrix3F"* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 36, i8* nonnull %49) #12
  call void @_ZN3gfx13MatrixProductERKNS_8Matrix3FES2_(%"class.gfx::Matrix3F"* nonnull sret %6, %"class.gfx::Matrix3F"* nonnull dereferenceable(36) %4, %"class.gfx::Matrix3F"* dereferenceable(36) %0) #12
  call void @_ZNK3gfx8Matrix3F7InverseEv(%"class.gfx::Matrix3F"* nonnull sret %5, %"class.gfx::Matrix3F"* nonnull %6) #12
  call void @_ZN3gfx8Matrix3FD1Ev(%"class.gfx::Matrix3F"* nonnull %6) #12
  call void @llvm.lifetime.end.p0i8(i64 36, i8* nonnull %49) #12
  %50 = bitcast %"class.gfx::Matrix3F"* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 36, i8* nonnull %50) #12
  call void @_ZN3gfx8Matrix3F5ZerosEv(%"class.gfx::Matrix3F"* nonnull sret %7) #12
  %51 = call zeroext i1 @_ZNK3gfx8Matrix3F7IsEqualERKS0_(%"class.gfx::Matrix3F"* nonnull %5, %"class.gfx::Matrix3F"* nonnull dereferenceable(36) %7) #12
  call void @_ZN3gfx8Matrix3FD1Ev(%"class.gfx::Matrix3F"* nonnull %7) #12
  call void @llvm.lifetime.end.p0i8(i64 36, i8* nonnull %50) #12
  br i1 %51, label %88, label %52

52:                                               ; preds = %46
  %53 = bitcast %"class.gfx::Matrix3F"* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 36, i8* nonnull %53) #12
  call void @_ZN3gfx13MatrixProductERKNS_8Matrix3FES2_(%"class.gfx::Matrix3F"* nonnull sret %8, %"class.gfx::Matrix3F"* nonnull dereferenceable(36) %5, %"class.gfx::Matrix3F"* nonnull dereferenceable(36) %4) #12
  %54 = bitcast %"class.gfx::Vector3dF"* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 12, i8* nonnull %54) #12
  %55 = load i64, i64* %10, align 8
  %56 = load double**, double*** %12, align 8
  %57 = lshr i64 %55, 9
  %58 = getelementptr inbounds double*, double** %56, i64 %57
  %59 = load double*, double** %58, align 8
  %60 = and i64 %55, 511
  %61 = getelementptr inbounds double, double* %59, i64 %60
  %62 = load double, double* %61, align 8
  %63 = fptrunc double %62 to float
  %64 = add i64 %55, 1
  %65 = lshr i64 %64, 9
  %66 = getelementptr inbounds double*, double** %56, i64 %65
  %67 = load double*, double** %66, align 8
  %68 = and i64 %64, 511
  %69 = getelementptr inbounds double, double* %67, i64 %68
  %70 = load double, double* %69, align 8
  %71 = fptrunc double %70 to float
  %72 = add i64 %55, 2
  %73 = lshr i64 %72, 9
  %74 = getelementptr inbounds double*, double** %56, i64 %73
  %75 = load double*, double** %74, align 8
  %76 = and i64 %72, 511
  %77 = getelementptr inbounds double, double* %75, i64 %76
  %78 = load double, double* %77, align 8
  %79 = fptrunc double %78 to float
  %80 = getelementptr inbounds %"class.gfx::Vector3dF", %"class.gfx::Vector3dF"* %9, i64 0, i32 0
  store float %63, float* %80, align 4
  %81 = getelementptr inbounds %"class.gfx::Vector3dF", %"class.gfx::Vector3dF"* %9, i64 0, i32 1
  store float %71, float* %81, align 4
  %82 = getelementptr inbounds %"class.gfx::Vector3dF", %"class.gfx::Vector3dF"* %9, i64 0, i32 2
  store float %79, float* %82, align 4
  %83 = call { <2 x float>, float } @_ZN3gfx13MatrixProductERKNS_8Matrix3FERKNS_9Vector3dFE(%"class.gfx::Matrix3F"* nonnull dereferenceable(36) %8, %"class.gfx::Vector3dF"* nonnull dereferenceable(12) %9) #12
  %84 = extractvalue { <2 x float>, float } %83, 0
  %85 = extractvalue { <2 x float>, float } %83, 1
  %86 = bitcast %"class.gfx::Vector3dF"* %2 to <2 x float>*
  store <2 x float> %84, <2 x float>* %86, align 4
  %87 = getelementptr inbounds %"class.gfx::Vector3dF", %"class.gfx::Vector3dF"* %2, i64 0, i32 2
  store float %85, float* %87, align 4
  call void @llvm.lifetime.end.p0i8(i64 12, i8* nonnull %54) #12
  call void @_ZN3gfx8Matrix3FD1Ev(%"class.gfx::Matrix3F"* nonnull %8) #12
  call void @llvm.lifetime.end.p0i8(i64 36, i8* nonnull %53) #12
  br label %88

88:                                               ; preds = %46, %52
  %89 = phi i1 [ true, %52 ], [ false, %46 ]
  call void @_ZN3gfx8Matrix3FD1Ev(%"class.gfx::Matrix3F"* nonnull %5) #12
  call void @llvm.lifetime.end.p0i8(i64 36, i8* nonnull %48) #12
  call void @_ZN3gfx8Matrix3FD1Ev(%"class.gfx::Matrix3F"* nonnull %4) #12
  call void @llvm.lifetime.end.p0i8(i64 36, i8* nonnull %47) #12
  br label %90

90:                                               ; preds = %88, %41
  %91 = phi i1 [ true, %41 ], [ %89, %88 ]
  ret i1 %91
}

declare float @_ZN3gfx10DotProductERKNS_9Vector3dFES2_(%"class.gfx::Vector3dF"* dereferenceable(12), %"class.gfx::Vector3dF"* dereferenceable(12)) local_unnamed_addr #5

; Function Attrs: nounwind readonly ssp uwtable
define hidden i64 @_ZNK2ui21LeastSquaresPredictor12TimeIntervalEv(%"class.ui::LeastSquaresPredictor"* nocapture readonly) unnamed_addr #7 align 2 {
  %2 = alloca i64, align 8
  %3 = getelementptr inbounds %"class.ui::LeastSquaresPredictor", %"class.ui::LeastSquaresPredictor"* %0, i64 0, i32 3, i32 0, i32 2, i32 0, i32 0
  %4 = load i64, i64* %3, align 8
  %5 = icmp ugt i64 %4, 1
  br i1 %5, label %6, label %45

6:                                                ; preds = %1
  %7 = bitcast i64* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %7)
  %8 = getelementptr inbounds %"class.ui::LeastSquaresPredictor", %"class.ui::LeastSquaresPredictor"* %0, i64 0, i32 3, i32 0, i32 1
  %9 = load i64, i64* %8, align 8
  %10 = add i64 %4, -1
  %11 = add i64 %9, %10
  %12 = getelementptr inbounds %"class.ui::LeastSquaresPredictor", %"class.ui::LeastSquaresPredictor"* %0, i64 0, i32 3, i32 0, i32 0, i32 1
  %13 = load %"class.base::TimeTicks"**, %"class.base::TimeTicks"*** %12, align 8
  %14 = lshr i64 %11, 9
  %15 = getelementptr inbounds %"class.base::TimeTicks"*, %"class.base::TimeTicks"** %13, i64 %14
  %16 = load %"class.base::TimeTicks"*, %"class.base::TimeTicks"** %15, align 8
  %17 = and i64 %11, 511
  %18 = lshr i64 %9, 9
  %19 = getelementptr inbounds %"class.base::TimeTicks"*, %"class.base::TimeTicks"** %13, i64 %18
  %20 = load %"class.base::TimeTicks"*, %"class.base::TimeTicks"** %19, align 8
  %21 = and i64 %9, 511
  %22 = getelementptr inbounds %"class.base::TimeTicks", %"class.base::TimeTicks"* %20, i64 %21, i32 0, i32 0
  %23 = load i64, i64* %22, align 8
  %24 = getelementptr inbounds %"class.base::TimeTicks", %"class.base::TimeTicks"* %16, i64 %17, i32 0, i32 0
  %25 = load i64, i64* %24, align 8
  %26 = sub nsw i64 %25, %23
  %27 = icmp ne i64 %10, 0
  %28 = icmp sgt i64 %26, -1
  %29 = and i1 %27, %28
  br i1 %29, label %30, label %36, !prof !5

30:                                               ; preds = %6
  %31 = udiv i64 %26, %10
  %32 = icmp sgt i64 %31, 0
  %33 = select i1 %32, i64 %31, i64 0
  %34 = icmp sgt i64 %31, -1
  %35 = select i1 %34, i64 %33, i64 9223372036854775807
  br label %38

36:                                               ; preds = %6
  %37 = select i1 %28, i64 9223372036854775807, i64 -9223372036854775808
  br label %38

38:                                               ; preds = %30, %36
  %39 = phi i64 [ %35, %30 ], [ %37, %36 ]
  store i64 %39, i64* %2, align 8
  %40 = icmp sgt i64 %39, 2500
  %41 = bitcast i64* %2 to %"class.base::TimeDelta"*
  %42 = select i1 %40, %"class.base::TimeDelta"* %41, %"class.base::TimeDelta"* @_ZN2ui14InputPredictor16kMinTimeIntervalE
  %43 = getelementptr inbounds %"class.base::TimeDelta", %"class.base::TimeDelta"* %42, i64 0, i32 0
  %44 = load i64, i64* %43, align 8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %7)
  br label %45

45:                                               ; preds = %1, %38
  %46 = phi i64 [ %44, %38 ], [ 8000, %1 ]
  ret i64 %46
}

declare void @_ZNK3gfx8Matrix3F9TransposeEv(%"class.gfx::Matrix3F"* sret, %"class.gfx::Matrix3F"*) local_unnamed_addr #5

declare void @_ZN3gfx13MatrixProductERKNS_8Matrix3FES2_(%"class.gfx::Matrix3F"* sret, %"class.gfx::Matrix3F"* dereferenceable(36), %"class.gfx::Matrix3F"* dereferenceable(36)) local_unnamed_addr #5

declare void @_ZNK3gfx8Matrix3F7InverseEv(%"class.gfx::Matrix3F"* sret, %"class.gfx::Matrix3F"*) local_unnamed_addr #5

declare { <2 x float>, float } @_ZN3gfx13MatrixProductERKNS_8Matrix3FERKNS_9Vector3dFE(%"class.gfx::Matrix3F"* dereferenceable(36), %"class.gfx::Vector3dF"* dereferenceable(12)) local_unnamed_addr #5

; Function Attrs: nounwind readnone speculatable
declare double @llvm.fabs.f64(double) #8

declare zeroext i1 @_ZNK3gfx8Matrix3F7IsEqualERKS0_(%"class.gfx::Matrix3F"*, %"class.gfx::Matrix3F"* dereferenceable(36)) local_unnamed_addr #5

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__15dequeIdNS_9allocatorIdEEE19__add_back_capacityEv(%"class.std::__1::deque"*) local_unnamed_addr #0 comdat align 2 {
  %2 = alloca double*, align 8
  %3 = alloca double*, align 8
  %4 = alloca %"struct.std::__1::__split_buffer.24", align 8
  %5 = getelementptr inbounds %"class.std::__1::deque", %"class.std::__1::deque"* %0, i64 0, i32 0, i32 1
  %6 = load i64, i64* %5, align 8
  %7 = icmp ugt i64 %6, 511
  br i1 %7, label %8, label %162

8:                                                ; preds = %1
  %9 = add i64 %6, -512
  store i64 %9, i64* %5, align 8
  %10 = getelementptr inbounds %"class.std::__1::deque", %"class.std::__1::deque"* %0, i64 0, i32 0, i32 0, i32 1
  %11 = load double**, double*** %10, align 8
  %12 = bitcast double** %11 to i64*
  %13 = load i64, i64* %12, align 8
  %14 = getelementptr inbounds double*, double** %11, i64 1
  store double** %14, double*** %10, align 8
  %15 = getelementptr inbounds %"class.std::__1::deque", %"class.std::__1::deque"* %0, i64 0, i32 0, i32 0, i32 2
  %16 = load double**, double*** %15, align 8
  %17 = getelementptr inbounds %"class.std::__1::deque", %"class.std::__1::deque"* %0, i64 0, i32 0, i32 0, i32 3, i32 0, i32 0
  %18 = load double**, double*** %17, align 8
  %19 = icmp eq double** %16, %18
  %20 = ptrtoint double** %18 to i64
  %21 = bitcast double** %16 to i64*
  br i1 %19, label %22, label %158

22:                                               ; preds = %8
  %23 = getelementptr inbounds %"class.std::__1::deque", %"class.std::__1::deque"* %0, i64 0, i32 0, i32 0, i32 0
  %24 = load double**, double*** %23, align 8
  %25 = icmp ugt double** %14, %24
  %26 = ptrtoint double** %24 to i64
  br i1 %25, label %27, label %47

27:                                               ; preds = %22
  %28 = ptrtoint double** %14 to i64
  %29 = sub i64 %28, %26
  %30 = ashr exact i64 %29, 3
  %31 = add nsw i64 %30, 1
  %32 = sdiv i64 %31, -2
  %33 = getelementptr inbounds double*, double** %14, i64 %32
  %34 = ptrtoint double** %16 to i64
  %35 = sub i64 %34, %28
  %36 = ashr exact i64 %35, 3
  %37 = icmp eq i64 %35, 0
  br i1 %37, label %42, label %38

38:                                               ; preds = %27
  %39 = bitcast double** %33 to i8*
  %40 = bitcast double** %14 to i8*
  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* align 8 %39, i8* align 8 %40, i64 %35, i1 false) #12
  %41 = load double**, double*** %10, align 8
  br label %42

42:                                               ; preds = %38, %27
  %43 = phi double** [ %14, %27 ], [ %41, %38 ]
  %44 = getelementptr inbounds double*, double** %33, i64 %36
  store double** %44, double*** %15, align 8
  %45 = getelementptr inbounds double*, double** %43, i64 %32
  store double** %45, double*** %10, align 8
  %46 = bitcast double** %44 to i64*
  br label %158

47:                                               ; preds = %22
  %48 = bitcast double*** %17 to i64*
  %49 = bitcast %"class.std::__1::deque"* %0 to i64*
  %50 = sub i64 %20, %26
  %51 = ashr exact i64 %50, 2
  %52 = icmp eq i64 %50, 0
  %53 = select i1 %52, i64 1, i64 %51
  %54 = icmp ugt i64 %53, 2305843009213693951
  br i1 %54, label %55, label %56

55:                                               ; preds = %47
  tail call void @abort() #13
  unreachable

56:                                               ; preds = %47
  %57 = lshr i64 %53, 2
  %58 = shl i64 %53, 3
  %59 = tail call i8* @_Znwm(i64 %58) #11
  %60 = bitcast i8* %59 to double**
  %61 = ptrtoint i8* %59 to i64
  %62 = getelementptr inbounds double*, double** %60, i64 %57
  %63 = ptrtoint double** %62 to i64
  %64 = getelementptr inbounds double*, double** %60, i64 %53
  %65 = ptrtoint double** %64 to i64
  %66 = ptrtoint double** %14 to i64
  %67 = ptrtoint double** %16 to i64
  %68 = sub i64 %67, %66
  %69 = ashr exact i64 %68, 3
  %70 = getelementptr inbounds double*, double** %62, i64 %69
  %71 = icmp eq i64 %68, 0
  br i1 %71, label %147, label %72

72:                                               ; preds = %56
  %73 = add i64 %68, -8
  %74 = lshr i64 %73, 3
  %75 = add nuw nsw i64 %74, 1
  %76 = and i64 %75, 7
  %77 = icmp eq i64 %76, 0
  br i1 %77, label %93, label %78

78:                                               ; preds = %72, %78
  %79 = phi double** [ %86, %78 ], [ %62, %72 ]
  %80 = phi i64 [ %87, %78 ], [ %63, %72 ]
  %81 = phi double** [ %88, %78 ], [ %14, %72 ]
  %82 = phi i64 [ %89, %78 ], [ %76, %72 ]
  %83 = bitcast double** %81 to i64*
  %84 = load i64, i64* %83, align 8
  %85 = inttoptr i64 %80 to i64*
  store i64 %84, i64* %85, align 8
  %86 = getelementptr inbounds double*, double** %79, i64 1
  %87 = ptrtoint double** %86 to i64
  %88 = getelementptr inbounds double*, double** %81, i64 1
  %89 = add i64 %82, -1
  %90 = icmp eq i64 %89, 0
  br i1 %90, label %91, label %78, !llvm.loop !6

91:                                               ; preds = %78
  %92 = ptrtoint double** %86 to i64
  br label %93

93:                                               ; preds = %72, %91
  %94 = phi double** [ %62, %72 ], [ %86, %91 ]
  %95 = phi i64 [ %63, %72 ], [ %92, %91 ]
  %96 = phi double** [ %14, %72 ], [ %88, %91 ]
  %97 = icmp ult i64 %73, 56
  br i1 %97, label %144, label %98

98:                                               ; preds = %93, %98
  %99 = phi double** [ %140, %98 ], [ %94, %93 ]
  %100 = phi i64 [ %141, %98 ], [ %95, %93 ]
  %101 = phi double** [ %142, %98 ], [ %96, %93 ]
  %102 = bitcast double** %101 to i64*
  %103 = load i64, i64* %102, align 8
  %104 = inttoptr i64 %100 to i64*
  store i64 %103, i64* %104, align 8
  %105 = getelementptr inbounds double*, double** %99, i64 1
  %106 = getelementptr inbounds double*, double** %101, i64 1
  %107 = bitcast double** %106 to i64*
  %108 = load i64, i64* %107, align 8
  %109 = bitcast double** %105 to i64*
  store i64 %108, i64* %109, align 8
  %110 = getelementptr inbounds double*, double** %99, i64 2
  %111 = getelementptr inbounds double*, double** %101, i64 2
  %112 = bitcast double** %111 to i64*
  %113 = load i64, i64* %112, align 8
  %114 = bitcast double** %110 to i64*
  store i64 %113, i64* %114, align 8
  %115 = getelementptr inbounds double*, double** %99, i64 3
  %116 = getelementptr inbounds double*, double** %101, i64 3
  %117 = bitcast double** %116 to i64*
  %118 = load i64, i64* %117, align 8
  %119 = bitcast double** %115 to i64*
  store i64 %118, i64* %119, align 8
  %120 = getelementptr inbounds double*, double** %99, i64 4
  %121 = getelementptr inbounds double*, double** %101, i64 4
  %122 = bitcast double** %121 to i64*
  %123 = load i64, i64* %122, align 8
  %124 = bitcast double** %120 to i64*
  store i64 %123, i64* %124, align 8
  %125 = getelementptr inbounds double*, double** %99, i64 5
  %126 = getelementptr inbounds double*, double** %101, i64 5
  %127 = bitcast double** %126 to i64*
  %128 = load i64, i64* %127, align 8
  %129 = bitcast double** %125 to i64*
  store i64 %128, i64* %129, align 8
  %130 = getelementptr inbounds double*, double** %99, i64 6
  %131 = getelementptr inbounds double*, double** %101, i64 6
  %132 = bitcast double** %131 to i64*
  %133 = load i64, i64* %132, align 8
  %134 = bitcast double** %130 to i64*
  store i64 %133, i64* %134, align 8
  %135 = getelementptr inbounds double*, double** %99, i64 7
  %136 = getelementptr inbounds double*, double** %101, i64 7
  %137 = bitcast double** %136 to i64*
  %138 = load i64, i64* %137, align 8
  %139 = bitcast double** %135 to i64*
  store i64 %138, i64* %139, align 8
  %140 = getelementptr inbounds double*, double** %99, i64 8
  %141 = ptrtoint double** %140 to i64
  %142 = getelementptr inbounds double*, double** %101, i64 8
  %143 = icmp eq double** %70, %140
  br i1 %143, label %144, label %98

144:                                              ; preds = %98, %93
  %145 = ptrtoint double** %70 to i64
  %146 = load double**, double*** %23, align 8
  br label %147

147:                                              ; preds = %144, %56
  %148 = phi double** [ %146, %144 ], [ %24, %56 ]
  %149 = phi i64 [ %145, %144 ], [ %63, %56 ]
  store i64 %61, i64* %49, align 8
  %150 = bitcast double*** %10 to i64*
  store i64 %63, i64* %150, align 8
  %151 = bitcast double*** %15 to i64*
  store i64 %149, i64* %151, align 8
  store i64 %65, i64* %48, align 8
  %152 = icmp eq double** %148, null
  %153 = inttoptr i64 %149 to i64*
  br i1 %152, label %158, label %154

154:                                              ; preds = %147
  %155 = bitcast double** %148 to i8*
  tail call void @_ZdlPv(i8* %155) #11
  %156 = bitcast double*** %15 to i64**
  %157 = load i64*, i64** %156, align 8
  br label %158

158:                                              ; preds = %8, %42, %147, %154
  %159 = phi i64* [ %157, %154 ], [ %153, %147 ], [ %46, %42 ], [ %21, %8 ]
  store i64 %13, i64* %159, align 8
  %160 = load double**, double*** %15, align 8
  %161 = getelementptr inbounds double*, double** %160, i64 1
  store double** %161, double*** %15, align 8
  br label %460

162:                                              ; preds = %1
  %163 = getelementptr inbounds %"class.std::__1::deque", %"class.std::__1::deque"* %0, i64 0, i32 0, i32 0
  %164 = getelementptr inbounds %"class.std::__1::deque", %"class.std::__1::deque"* %0, i64 0, i32 0, i32 0, i32 2
  %165 = bitcast double*** %164 to i64*
  %166 = load i64, i64* %165, align 8
  %167 = getelementptr inbounds %"class.std::__1::deque", %"class.std::__1::deque"* %0, i64 0, i32 0, i32 0, i32 1
  %168 = bitcast double*** %167 to i64*
  %169 = load i64, i64* %168, align 8
  %170 = sub i64 %166, %169
  %171 = ashr exact i64 %170, 3
  %172 = getelementptr inbounds %"class.std::__1::deque", %"class.std::__1::deque"* %0, i64 0, i32 0, i32 0, i32 3, i32 0, i32 0
  %173 = bitcast double*** %172 to i64*
  %174 = load i64, i64* %173, align 8
  %175 = bitcast %"class.std::__1::deque"* %0 to i64*
  %176 = load i64, i64* %175, align 8
  %177 = sub i64 %174, %176
  %178 = ashr exact i64 %177, 3
  %179 = icmp ult i64 %171, %178
  %180 = inttoptr i64 %166 to double**
  %181 = inttoptr i64 %169 to double**
  br i1 %179, label %182, label %337

182:                                              ; preds = %162
  %183 = icmp eq i64 %174, %166
  br i1 %183, label %188, label %184

184:                                              ; preds = %182
  %185 = bitcast double** %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %185) #12
  %186 = tail call i8* @_Znwm(i64 4096) #11
  %187 = bitcast double** %2 to i8**
  store i8* %186, i8** %187, align 8
  call void @_ZNSt3__114__split_bufferIPdNS_9allocatorIS1_EEE9push_backEOS1_(%"struct.std::__1::__split_buffer"* %163, double** nonnull dereferenceable(8) %2)
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %185) #12
  br label %460

188:                                              ; preds = %182
  %189 = bitcast double** %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %189) #12
  %190 = tail call i8* @_Znwm(i64 4096) #11
  %191 = bitcast double** %3 to i8**
  store i8* %190, i8** %191, align 8
  call void @_ZNSt3__114__split_bufferIPdNS_9allocatorIS1_EEE10push_frontEOS1_(%"struct.std::__1::__split_buffer"* %163, double** nonnull dereferenceable(8) %3)
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %189) #12
  %192 = load double**, double*** %167, align 8
  %193 = bitcast double** %192 to i64*
  %194 = load i64, i64* %193, align 8
  %195 = getelementptr inbounds double*, double** %192, i64 1
  store double** %195, double*** %167, align 8
  %196 = load double**, double*** %164, align 8
  %197 = load double**, double*** %172, align 8
  %198 = icmp eq double** %196, %197
  %199 = ptrtoint double** %197 to i64
  %200 = bitcast double** %196 to i64*
  br i1 %198, label %201, label %333

201:                                              ; preds = %188
  %202 = getelementptr inbounds %"class.std::__1::deque", %"class.std::__1::deque"* %0, i64 0, i32 0, i32 0, i32 0
  %203 = load double**, double*** %202, align 8
  %204 = icmp ugt double** %195, %203
  %205 = ptrtoint double** %203 to i64
  br i1 %204, label %206, label %226

206:                                              ; preds = %201
  %207 = ptrtoint double** %195 to i64
  %208 = sub i64 %207, %205
  %209 = ashr exact i64 %208, 3
  %210 = add nsw i64 %209, 1
  %211 = sdiv i64 %210, -2
  %212 = getelementptr inbounds double*, double** %195, i64 %211
  %213 = ptrtoint double** %196 to i64
  %214 = sub i64 %213, %207
  %215 = ashr exact i64 %214, 3
  %216 = icmp eq i64 %214, 0
  br i1 %216, label %221, label %217

217:                                              ; preds = %206
  %218 = bitcast double** %212 to i8*
  %219 = bitcast double** %195 to i8*
  call void @llvm.memmove.p0i8.p0i8.i64(i8* align 8 %218, i8* align 8 %219, i64 %214, i1 false) #12
  %220 = load double**, double*** %167, align 8
  br label %221

221:                                              ; preds = %217, %206
  %222 = phi double** [ %195, %206 ], [ %220, %217 ]
  %223 = getelementptr inbounds double*, double** %212, i64 %215
  store double** %223, double*** %164, align 8
  %224 = getelementptr inbounds double*, double** %222, i64 %211
  store double** %224, double*** %167, align 8
  %225 = bitcast double** %223 to i64*
  br label %333

226:                                              ; preds = %201
  %227 = sub i64 %199, %205
  %228 = ashr exact i64 %227, 2
  %229 = icmp eq i64 %227, 0
  %230 = select i1 %229, i64 1, i64 %228
  %231 = icmp ugt i64 %230, 2305843009213693951
  br i1 %231, label %232, label %233

232:                                              ; preds = %226
  call void @abort() #13
  unreachable

233:                                              ; preds = %226
  %234 = lshr i64 %230, 2
  %235 = shl i64 %230, 3
  %236 = call i8* @_Znwm(i64 %235) #11
  %237 = bitcast i8* %236 to double**
  %238 = ptrtoint i8* %236 to i64
  %239 = getelementptr inbounds double*, double** %237, i64 %234
  %240 = ptrtoint double** %239 to i64
  %241 = getelementptr inbounds double*, double** %237, i64 %230
  %242 = ptrtoint double** %241 to i64
  %243 = ptrtoint double** %195 to i64
  %244 = ptrtoint double** %196 to i64
  %245 = sub i64 %244, %243
  %246 = ashr exact i64 %245, 3
  %247 = getelementptr inbounds double*, double** %239, i64 %246
  %248 = icmp eq i64 %245, 0
  br i1 %248, label %324, label %249

249:                                              ; preds = %233
  %250 = add i64 %245, -8
  %251 = lshr i64 %250, 3
  %252 = add nuw nsw i64 %251, 1
  %253 = and i64 %252, 7
  %254 = icmp eq i64 %253, 0
  br i1 %254, label %270, label %255

255:                                              ; preds = %249, %255
  %256 = phi double** [ %263, %255 ], [ %239, %249 ]
  %257 = phi i64 [ %264, %255 ], [ %240, %249 ]
  %258 = phi double** [ %265, %255 ], [ %195, %249 ]
  %259 = phi i64 [ %266, %255 ], [ %253, %249 ]
  %260 = bitcast double** %258 to i64*
  %261 = load i64, i64* %260, align 8
  %262 = inttoptr i64 %257 to i64*
  store i64 %261, i64* %262, align 8
  %263 = getelementptr inbounds double*, double** %256, i64 1
  %264 = ptrtoint double** %263 to i64
  %265 = getelementptr inbounds double*, double** %258, i64 1
  %266 = add i64 %259, -1
  %267 = icmp eq i64 %266, 0
  br i1 %267, label %268, label %255, !llvm.loop !8

268:                                              ; preds = %255
  %269 = ptrtoint double** %263 to i64
  br label %270

270:                                              ; preds = %249, %268
  %271 = phi double** [ %239, %249 ], [ %263, %268 ]
  %272 = phi i64 [ %240, %249 ], [ %269, %268 ]
  %273 = phi double** [ %195, %249 ], [ %265, %268 ]
  %274 = icmp ult i64 %250, 56
  br i1 %274, label %321, label %275

275:                                              ; preds = %270, %275
  %276 = phi double** [ %317, %275 ], [ %271, %270 ]
  %277 = phi i64 [ %318, %275 ], [ %272, %270 ]
  %278 = phi double** [ %319, %275 ], [ %273, %270 ]
  %279 = bitcast double** %278 to i64*
  %280 = load i64, i64* %279, align 8
  %281 = inttoptr i64 %277 to i64*
  store i64 %280, i64* %281, align 8
  %282 = getelementptr inbounds double*, double** %276, i64 1
  %283 = getelementptr inbounds double*, double** %278, i64 1
  %284 = bitcast double** %283 to i64*
  %285 = load i64, i64* %284, align 8
  %286 = bitcast double** %282 to i64*
  store i64 %285, i64* %286, align 8
  %287 = getelementptr inbounds double*, double** %276, i64 2
  %288 = getelementptr inbounds double*, double** %278, i64 2
  %289 = bitcast double** %288 to i64*
  %290 = load i64, i64* %289, align 8
  %291 = bitcast double** %287 to i64*
  store i64 %290, i64* %291, align 8
  %292 = getelementptr inbounds double*, double** %276, i64 3
  %293 = getelementptr inbounds double*, double** %278, i64 3
  %294 = bitcast double** %293 to i64*
  %295 = load i64, i64* %294, align 8
  %296 = bitcast double** %292 to i64*
  store i64 %295, i64* %296, align 8
  %297 = getelementptr inbounds double*, double** %276, i64 4
  %298 = getelementptr inbounds double*, double** %278, i64 4
  %299 = bitcast double** %298 to i64*
  %300 = load i64, i64* %299, align 8
  %301 = bitcast double** %297 to i64*
  store i64 %300, i64* %301, align 8
  %302 = getelementptr inbounds double*, double** %276, i64 5
  %303 = getelementptr inbounds double*, double** %278, i64 5
  %304 = bitcast double** %303 to i64*
  %305 = load i64, i64* %304, align 8
  %306 = bitcast double** %302 to i64*
  store i64 %305, i64* %306, align 8
  %307 = getelementptr inbounds double*, double** %276, i64 6
  %308 = getelementptr inbounds double*, double** %278, i64 6
  %309 = bitcast double** %308 to i64*
  %310 = load i64, i64* %309, align 8
  %311 = bitcast double** %307 to i64*
  store i64 %310, i64* %311, align 8
  %312 = getelementptr inbounds double*, double** %276, i64 7
  %313 = getelementptr inbounds double*, double** %278, i64 7
  %314 = bitcast double** %313 to i64*
  %315 = load i64, i64* %314, align 8
  %316 = bitcast double** %312 to i64*
  store i64 %315, i64* %316, align 8
  %317 = getelementptr inbounds double*, double** %276, i64 8
  %318 = ptrtoint double** %317 to i64
  %319 = getelementptr inbounds double*, double** %278, i64 8
  %320 = icmp eq double** %247, %317
  br i1 %320, label %321, label %275

321:                                              ; preds = %275, %270
  %322 = ptrtoint double** %247 to i64
  %323 = load double**, double*** %202, align 8
  br label %324

324:                                              ; preds = %321, %233
  %325 = phi double** [ %323, %321 ], [ %203, %233 ]
  %326 = phi i64 [ %322, %321 ], [ %240, %233 ]
  store i64 %238, i64* %175, align 8
  store i64 %240, i64* %168, align 8
  store i64 %326, i64* %165, align 8
  store i64 %242, i64* %173, align 8
  %327 = icmp eq double** %325, null
  %328 = inttoptr i64 %326 to i64*
  br i1 %327, label %333, label %329

329:                                              ; preds = %324
  %330 = bitcast double** %325 to i8*
  call void @_ZdlPv(i8* %330) #11
  %331 = bitcast double*** %164 to i64**
  %332 = load i64*, i64** %331, align 8
  br label %333

333:                                              ; preds = %188, %221, %324, %329
  %334 = phi i64* [ %332, %329 ], [ %328, %324 ], [ %225, %221 ], [ %200, %188 ]
  store i64 %194, i64* %334, align 8
  %335 = load double**, double*** %164, align 8
  %336 = getelementptr inbounds double*, double** %335, i64 1
  store double** %336, double*** %164, align 8
  br label %460

337:                                              ; preds = %162
  %338 = bitcast %"struct.std::__1::__split_buffer.24"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %338) #12
  %339 = getelementptr inbounds %"struct.std::__1::__split_buffer.24", %"struct.std::__1::__split_buffer.24"* %4, i64 0, i32 1
  %340 = getelementptr inbounds %"struct.std::__1::__split_buffer.24", %"struct.std::__1::__split_buffer.24"* %4, i64 0, i32 2
  %341 = getelementptr inbounds %"struct.std::__1::__split_buffer.24", %"struct.std::__1::__split_buffer.24"* %4, i64 0, i32 3, i32 0, i32 0
  %342 = getelementptr inbounds %"struct.std::__1::__split_buffer.24", %"struct.std::__1::__split_buffer.24"* %4, i64 0, i32 3, i32 1, i32 0
  %343 = ashr exact i64 %177, 2
  %344 = icmp eq i64 %177, 0
  %345 = select i1 %344, i64 1, i64 %343
  %346 = getelementptr inbounds %"class.std::__1::deque", %"class.std::__1::deque"* %0, i64 0, i32 0, i32 0, i32 3
  %347 = bitcast %"struct.std::__1::__split_buffer.24"* %4 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %347, i8 -86, i64 24, i1 false)
  store double** null, double*** %341, align 8
  %348 = bitcast %"class.std::__1::allocator"** %342 to %"class.std::__1::__compressed_pair"**
  store %"class.std::__1::__compressed_pair"* %346, %"class.std::__1::__compressed_pair"** %348, align 8
  %349 = icmp ugt i64 %345, 2305843009213693951
  br i1 %349, label %350, label %351

350:                                              ; preds = %337
  tail call void @abort() #13
  unreachable

351:                                              ; preds = %337
  %352 = shl i64 %345, 3
  %353 = tail call i8* @_Znwm(i64 %352) #11
  %354 = bitcast i8* %353 to double**
  %355 = bitcast %"struct.std::__1::__split_buffer.24"* %4 to i8**
  store i8* %353, i8** %355, align 8
  %356 = getelementptr inbounds double*, double** %354, i64 %171
  store double** %356, double*** %340, align 8
  store double** %356, double*** %339, align 8
  %357 = getelementptr inbounds double*, double** %354, i64 %345
  store double** %357, double*** %341, align 8
  %358 = tail call i8* @_Znwm(i64 4096) #11
  %359 = ptrtoint i8* %358 to i64
  %360 = icmp eq i64 %171, %345
  %361 = ptrtoint double** %357 to i64
  %362 = ptrtoint i8* %353 to i64
  %363 = ptrtoint double** %356 to i64
  br i1 %360, label %364, label %398

364:                                              ; preds = %351
  %365 = icmp ugt double** %356, %354
  br i1 %365, label %366, label %373

366:                                              ; preds = %364
  %367 = sub i64 %363, %362
  %368 = ashr exact i64 %367, 3
  %369 = add nsw i64 %368, 1
  %370 = sdiv i64 %369, -2
  %371 = getelementptr inbounds double*, double** %356, i64 %370
  store double** %371, double*** %340, align 8
  store double** %371, double*** %339, align 8
  %372 = ptrtoint double** %371 to i64
  br label %398

373:                                              ; preds = %364
  %374 = sub i64 %361, %362
  %375 = ashr exact i64 %374, 2
  %376 = icmp eq i64 %374, 0
  %377 = select i1 %376, i64 1, i64 %375
  %378 = icmp ugt i64 %377, 2305843009213693951
  br i1 %378, label %379, label %380

379:                                              ; preds = %373
  tail call void @abort() #13
  unreachable

380:                                              ; preds = %373
  %381 = bitcast %"struct.std::__1::__split_buffer.24"* %4 to i64*
  %382 = bitcast double*** %341 to i64*
  %383 = lshr i64 %377, 2
  %384 = shl i64 %377, 3
  %385 = tail call i8* @_Znwm(i64 %384) #11
  %386 = bitcast i8* %385 to double**
  %387 = ptrtoint i8* %385 to i64
  %388 = getelementptr inbounds double*, double** %386, i64 %383
  %389 = ptrtoint double** %388 to i64
  %390 = getelementptr inbounds double*, double** %386, i64 %377
  %391 = ptrtoint double** %390 to i64
  store i64 %387, i64* %381, align 8
  %392 = bitcast double*** %339 to i64*
  store i64 %389, i64* %392, align 8
  %393 = bitcast double*** %340 to i64*
  store i64 %389, i64* %393, align 8
  store i64 %391, i64* %382, align 8
  tail call void @_ZdlPv(i8* nonnull %353) #11
  %394 = load double**, double*** %164, align 8
  %395 = load double**, double*** %167, align 8
  %396 = ptrtoint double** %395 to i64
  %397 = ptrtoint double** %394 to i64
  br label %398

398:                                              ; preds = %351, %366, %380
  %399 = phi i64 [ %391, %380 ], [ %361, %366 ], [ %361, %351 ]
  %400 = phi i64 [ %397, %380 ], [ %166, %366 ], [ %166, %351 ]
  %401 = phi i64 [ %389, %380 ], [ %372, %366 ], [ %363, %351 ]
  %402 = phi i64 [ %396, %380 ], [ %169, %366 ], [ %169, %351 ]
  %403 = phi i64 [ %387, %380 ], [ %362, %366 ], [ %362, %351 ]
  %404 = phi double** [ %395, %380 ], [ %181, %366 ], [ %181, %351 ]
  %405 = phi double** [ %394, %380 ], [ %180, %366 ], [ %180, %351 ]
  %406 = phi double** [ %388, %380 ], [ %371, %366 ], [ %356, %351 ]
  %407 = bitcast double** %406 to i64*
  store i64 %359, i64* %407, align 8
  %408 = getelementptr inbounds double*, double** %406, i64 1
  store double** %408, double*** %340, align 8
  %409 = icmp eq double** %405, %404
  br i1 %409, label %410, label %455

410:                                              ; preds = %398
  %411 = ptrtoint double** %408 to i64
  %412 = bitcast %"struct.std::__1::__split_buffer.24"* %4 to i64*
  %413 = bitcast double*** %339 to i64*
  %414 = bitcast double*** %340 to i64*
  %415 = bitcast double*** %341 to i64*
  br label %427

416:                                              ; preds = %455
  %417 = ptrtoint double** %458 to i64
  %418 = bitcast %"struct.std::__1::__split_buffer.24"* %4 to i64*
  %419 = load i64, i64* %418, align 8
  %420 = bitcast double*** %339 to i64*
  %421 = load i64, i64* %420, align 8
  %422 = load i64, i64* %165, align 8
  %423 = bitcast double*** %340 to i64*
  %424 = load i64, i64* %423, align 8
  %425 = bitcast double*** %341 to i64*
  %426 = load i64, i64* %425, align 8
  br label %427

427:                                              ; preds = %410, %416
  %428 = phi i64* [ %415, %410 ], [ %425, %416 ]
  %429 = phi i64* [ %414, %410 ], [ %423, %416 ]
  %430 = phi i64* [ %413, %410 ], [ %420, %416 ]
  %431 = phi i64* [ %412, %410 ], [ %418, %416 ]
  %432 = phi i64 [ %399, %410 ], [ %426, %416 ]
  %433 = phi i64 [ %411, %410 ], [ %424, %416 ]
  %434 = phi i64 [ %400, %410 ], [ %422, %416 ]
  %435 = phi i64 [ %401, %410 ], [ %421, %416 ]
  %436 = phi i64 [ %402, %410 ], [ %417, %416 ]
  %437 = phi i64 [ %403, %410 ], [ %419, %416 ]
  %438 = load i64, i64* %175, align 8
  store i64 %437, i64* %175, align 8
  store i64 %438, i64* %431, align 8
  store i64 %435, i64* %168, align 8
  store i64 %436, i64* %430, align 8
  store i64 %433, i64* %165, align 8
  store i64 %434, i64* %429, align 8
  %439 = load i64, i64* %173, align 8
  store i64 %432, i64* %173, align 8
  store i64 %439, i64* %428, align 8
  %440 = inttoptr i64 %436 to double**
  %441 = inttoptr i64 %434 to double**
  %442 = icmp eq double** %441, %440
  br i1 %442, label %450, label %443

443:                                              ; preds = %427
  %444 = getelementptr double*, double** %441, i64 -1
  %445 = ptrtoint double** %444 to i64
  %446 = sub i64 %445, %436
  %447 = lshr i64 %446, 3
  %448 = xor i64 %447, -1
  %449 = getelementptr double*, double** %441, i64 %448
  store double** %449, double*** %340, align 8
  br label %450

450:                                              ; preds = %443, %427
  %451 = icmp eq i64 %438, 0
  br i1 %451, label %454, label %452

452:                                              ; preds = %450
  %453 = inttoptr i64 %438 to i8*
  call void @_ZdlPv(i8* %453) #11
  br label %454

454:                                              ; preds = %450, %452
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %338) #12
  br label %460

455:                                              ; preds = %398, %455
  %456 = phi double** [ %457, %455 ], [ %405, %398 ]
  %457 = getelementptr inbounds double*, double** %456, i64 -1
  call void @_ZNSt3__114__split_bufferIPdRNS_9allocatorIS1_EEE10push_frontERKS1_(%"struct.std::__1::__split_buffer.24"* nonnull %4, double** dereferenceable(8) %457)
  %458 = load double**, double*** %167, align 8
  %459 = icmp eq double** %457, %458
  br i1 %459, label %416, label %455

460:                                              ; preds = %454, %333, %184, %158
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__114__split_bufferIPdNS_9allocatorIS1_EEE9push_backEOS1_(%"struct.std::__1::__split_buffer"*, double** dereferenceable(8)) local_unnamed_addr #0 comdat align 2 {
  %3 = getelementptr inbounds %"struct.std::__1::__split_buffer", %"struct.std::__1::__split_buffer"* %0, i64 0, i32 2
  %4 = load double**, double*** %3, align 8
  %5 = getelementptr inbounds %"struct.std::__1::__split_buffer", %"struct.std::__1::__split_buffer"* %0, i64 0, i32 3, i32 0, i32 0
  %6 = load double**, double*** %5, align 8
  %7 = icmp eq double** %4, %6
  %8 = ptrtoint double** %6 to i64
  %9 = bitcast double** %4 to i64*
  br i1 %7, label %10, label %148

10:                                               ; preds = %2
  %11 = getelementptr inbounds %"struct.std::__1::__split_buffer", %"struct.std::__1::__split_buffer"* %0, i64 0, i32 1
  %12 = load double**, double*** %11, align 8
  %13 = getelementptr inbounds %"struct.std::__1::__split_buffer", %"struct.std::__1::__split_buffer"* %0, i64 0, i32 0
  %14 = load double**, double*** %13, align 8
  %15 = icmp ugt double** %12, %14
  %16 = ptrtoint double** %14 to i64
  br i1 %15, label %17, label %37

17:                                               ; preds = %10
  %18 = ptrtoint double** %12 to i64
  %19 = sub i64 %18, %16
  %20 = ashr exact i64 %19, 3
  %21 = add nsw i64 %20, 1
  %22 = sdiv i64 %21, -2
  %23 = getelementptr inbounds double*, double** %12, i64 %22
  %24 = ptrtoint double** %4 to i64
  %25 = sub i64 %24, %18
  %26 = ashr exact i64 %25, 3
  %27 = icmp eq i64 %25, 0
  br i1 %27, label %32, label %28

28:                                               ; preds = %17
  %29 = bitcast double** %23 to i8*
  %30 = bitcast double** %12 to i8*
  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* align 8 %29, i8* align 8 %30, i64 %25, i1 false) #12
  %31 = load double**, double*** %11, align 8
  br label %32

32:                                               ; preds = %17, %28
  %33 = phi double** [ %12, %17 ], [ %31, %28 ]
  %34 = getelementptr inbounds double*, double** %23, i64 %26
  store double** %34, double*** %3, align 8
  %35 = getelementptr inbounds double*, double** %33, i64 %22
  store double** %35, double*** %11, align 8
  %36 = bitcast double** %34 to i64*
  br label %148

37:                                               ; preds = %10
  %38 = bitcast double*** %5 to i64*
  %39 = bitcast %"struct.std::__1::__split_buffer"* %0 to i64*
  %40 = sub i64 %8, %16
  %41 = ashr exact i64 %40, 2
  %42 = icmp eq i64 %40, 0
  %43 = select i1 %42, i64 1, i64 %41
  %44 = icmp ugt i64 %43, 2305843009213693951
  br i1 %44, label %45, label %46

45:                                               ; preds = %37
  tail call void @abort() #13
  unreachable

46:                                               ; preds = %37
  %47 = lshr i64 %43, 2
  %48 = shl i64 %43, 3
  %49 = tail call i8* @_Znwm(i64 %48) #11
  %50 = bitcast i8* %49 to double**
  %51 = ptrtoint i8* %49 to i64
  %52 = getelementptr inbounds double*, double** %50, i64 %47
  %53 = ptrtoint double** %52 to i64
  %54 = getelementptr inbounds double*, double** %50, i64 %43
  %55 = ptrtoint double** %54 to i64
  %56 = ptrtoint double** %12 to i64
  %57 = ptrtoint double** %4 to i64
  %58 = sub i64 %57, %56
  %59 = ashr exact i64 %58, 3
  %60 = getelementptr inbounds double*, double** %52, i64 %59
  %61 = icmp eq i64 %58, 0
  br i1 %61, label %137, label %62

62:                                               ; preds = %46
  %63 = add i64 %58, -8
  %64 = lshr i64 %63, 3
  %65 = add nuw nsw i64 %64, 1
  %66 = and i64 %65, 7
  %67 = icmp eq i64 %66, 0
  br i1 %67, label %83, label %68

68:                                               ; preds = %62, %68
  %69 = phi double** [ %76, %68 ], [ %52, %62 ]
  %70 = phi i64 [ %77, %68 ], [ %53, %62 ]
  %71 = phi double** [ %78, %68 ], [ %12, %62 ]
  %72 = phi i64 [ %79, %68 ], [ %66, %62 ]
  %73 = bitcast double** %71 to i64*
  %74 = load i64, i64* %73, align 8
  %75 = inttoptr i64 %70 to i64*
  store i64 %74, i64* %75, align 8
  %76 = getelementptr inbounds double*, double** %69, i64 1
  %77 = ptrtoint double** %76 to i64
  %78 = getelementptr inbounds double*, double** %71, i64 1
  %79 = add i64 %72, -1
  %80 = icmp eq i64 %79, 0
  br i1 %80, label %81, label %68, !llvm.loop !9

81:                                               ; preds = %68
  %82 = ptrtoint double** %76 to i64
  br label %83

83:                                               ; preds = %62, %81
  %84 = phi double** [ %52, %62 ], [ %76, %81 ]
  %85 = phi i64 [ %53, %62 ], [ %82, %81 ]
  %86 = phi double** [ %12, %62 ], [ %78, %81 ]
  %87 = icmp ult i64 %63, 56
  br i1 %87, label %134, label %88

88:                                               ; preds = %83, %88
  %89 = phi double** [ %130, %88 ], [ %84, %83 ]
  %90 = phi i64 [ %131, %88 ], [ %85, %83 ]
  %91 = phi double** [ %132, %88 ], [ %86, %83 ]
  %92 = bitcast double** %91 to i64*
  %93 = load i64, i64* %92, align 8
  %94 = inttoptr i64 %90 to i64*
  store i64 %93, i64* %94, align 8
  %95 = getelementptr inbounds double*, double** %89, i64 1
  %96 = getelementptr inbounds double*, double** %91, i64 1
  %97 = bitcast double** %96 to i64*
  %98 = load i64, i64* %97, align 8
  %99 = bitcast double** %95 to i64*
  store i64 %98, i64* %99, align 8
  %100 = getelementptr inbounds double*, double** %89, i64 2
  %101 = getelementptr inbounds double*, double** %91, i64 2
  %102 = bitcast double** %101 to i64*
  %103 = load i64, i64* %102, align 8
  %104 = bitcast double** %100 to i64*
  store i64 %103, i64* %104, align 8
  %105 = getelementptr inbounds double*, double** %89, i64 3
  %106 = getelementptr inbounds double*, double** %91, i64 3
  %107 = bitcast double** %106 to i64*
  %108 = load i64, i64* %107, align 8
  %109 = bitcast double** %105 to i64*
  store i64 %108, i64* %109, align 8
  %110 = getelementptr inbounds double*, double** %89, i64 4
  %111 = getelementptr inbounds double*, double** %91, i64 4
  %112 = bitcast double** %111 to i64*
  %113 = load i64, i64* %112, align 8
  %114 = bitcast double** %110 to i64*
  store i64 %113, i64* %114, align 8
  %115 = getelementptr inbounds double*, double** %89, i64 5
  %116 = getelementptr inbounds double*, double** %91, i64 5
  %117 = bitcast double** %116 to i64*
  %118 = load i64, i64* %117, align 8
  %119 = bitcast double** %115 to i64*
  store i64 %118, i64* %119, align 8
  %120 = getelementptr inbounds double*, double** %89, i64 6
  %121 = getelementptr inbounds double*, double** %91, i64 6
  %122 = bitcast double** %121 to i64*
  %123 = load i64, i64* %122, align 8
  %124 = bitcast double** %120 to i64*
  store i64 %123, i64* %124, align 8
  %125 = getelementptr inbounds double*, double** %89, i64 7
  %126 = getelementptr inbounds double*, double** %91, i64 7
  %127 = bitcast double** %126 to i64*
  %128 = load i64, i64* %127, align 8
  %129 = bitcast double** %125 to i64*
  store i64 %128, i64* %129, align 8
  %130 = getelementptr inbounds double*, double** %89, i64 8
  %131 = ptrtoint double** %130 to i64
  %132 = getelementptr inbounds double*, double** %91, i64 8
  %133 = icmp eq double** %60, %130
  br i1 %133, label %134, label %88

134:                                              ; preds = %88, %83
  %135 = ptrtoint double** %60 to i64
  %136 = load double**, double*** %13, align 8
  br label %137

137:                                              ; preds = %46, %134
  %138 = phi double** [ %136, %134 ], [ %14, %46 ]
  %139 = phi i64 [ %135, %134 ], [ %53, %46 ]
  store i64 %51, i64* %39, align 8
  %140 = bitcast double*** %11 to i64*
  store i64 %53, i64* %140, align 8
  %141 = bitcast double*** %3 to i64*
  store i64 %139, i64* %141, align 8
  store i64 %55, i64* %38, align 8
  %142 = icmp eq double** %138, null
  %143 = inttoptr i64 %139 to i64*
  br i1 %142, label %148, label %144

144:                                              ; preds = %137
  %145 = bitcast double** %138 to i8*
  tail call void @_ZdlPv(i8* %145) #11
  %146 = bitcast double*** %3 to i64**
  %147 = load i64*, i64** %146, align 8
  br label %148

148:                                              ; preds = %144, %137, %32, %2
  %149 = phi i64* [ %147, %144 ], [ %143, %137 ], [ %36, %32 ], [ %9, %2 ]
  %150 = bitcast double** %1 to i64*
  %151 = load i64, i64* %150, align 8
  store i64 %151, i64* %149, align 8
  %152 = load double**, double*** %3, align 8
  %153 = getelementptr inbounds double*, double** %152, i64 1
  store double** %153, double*** %3, align 8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__114__split_bufferIPdNS_9allocatorIS1_EEE10push_frontEOS1_(%"struct.std::__1::__split_buffer"*, double** dereferenceable(8)) local_unnamed_addr #0 comdat align 2 {
  %3 = getelementptr inbounds %"struct.std::__1::__split_buffer", %"struct.std::__1::__split_buffer"* %0, i64 0, i32 1
  %4 = load double**, double*** %3, align 8
  %5 = getelementptr inbounds %"struct.std::__1::__split_buffer", %"struct.std::__1::__split_buffer"* %0, i64 0, i32 0
  %6 = load double**, double*** %5, align 8
  %7 = icmp eq double** %4, %6
  %8 = ptrtoint double** %6 to i64
  br i1 %7, label %9, label %147

9:                                                ; preds = %2
  %10 = getelementptr inbounds %"struct.std::__1::__split_buffer", %"struct.std::__1::__split_buffer"* %0, i64 0, i32 2
  %11 = load double**, double*** %10, align 8
  %12 = getelementptr inbounds %"struct.std::__1::__split_buffer", %"struct.std::__1::__split_buffer"* %0, i64 0, i32 3, i32 0, i32 0
  %13 = load double**, double*** %12, align 8
  %14 = icmp ult double** %11, %13
  %15 = bitcast double*** %12 to i64*
  %16 = ptrtoint double** %13 to i64
  br i1 %14, label %17, label %38

17:                                               ; preds = %9
  %18 = ptrtoint double** %11 to i64
  %19 = sub i64 %16, %18
  %20 = ashr exact i64 %19, 3
  %21 = add nsw i64 %20, 1
  %22 = sdiv i64 %21, 2
  %23 = getelementptr inbounds double*, double** %11, i64 %22
  %24 = ptrtoint double** %4 to i64
  %25 = sub i64 %18, %24
  %26 = icmp eq i64 %25, 0
  br i1 %26, label %34, label %27

27:                                               ; preds = %17
  %28 = ashr exact i64 %25, 3
  %29 = sub nsw i64 0, %28
  %30 = getelementptr inbounds double*, double** %23, i64 %29
  %31 = bitcast double** %30 to i8*
  %32 = bitcast double** %4 to i8*
  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* align 8 %31, i8* align 8 %32, i64 %25, i1 false) #12
  %33 = load double**, double*** %10, align 8
  br label %34

34:                                               ; preds = %17, %27
  %35 = phi double** [ %33, %27 ], [ %11, %17 ]
  %36 = phi double** [ %30, %27 ], [ %23, %17 ]
  store double** %36, double*** %3, align 8
  %37 = getelementptr inbounds double*, double** %35, i64 %22
  store double** %37, double*** %10, align 8
  br label %147

38:                                               ; preds = %9
  %39 = bitcast %"struct.std::__1::__split_buffer"* %0 to i64*
  %40 = sub i64 %16, %8
  %41 = ashr exact i64 %40, 2
  %42 = icmp eq i64 %40, 0
  %43 = select i1 %42, i64 1, i64 %41
  %44 = icmp ugt i64 %43, 2305843009213693951
  br i1 %44, label %45, label %46

45:                                               ; preds = %38
  tail call void @abort() #13
  unreachable

46:                                               ; preds = %38
  %47 = add nuw nsw i64 %43, 3
  %48 = lshr i64 %47, 2
  %49 = shl i64 %43, 3
  %50 = tail call i8* @_Znwm(i64 %49) #11
  %51 = bitcast i8* %50 to double**
  %52 = ptrtoint i8* %50 to i64
  %53 = getelementptr inbounds double*, double** %51, i64 %48
  %54 = ptrtoint double** %53 to i64
  %55 = getelementptr inbounds double*, double** %51, i64 %43
  %56 = ptrtoint double** %55 to i64
  %57 = ptrtoint double** %4 to i64
  %58 = ptrtoint double** %11 to i64
  %59 = sub i64 %58, %57
  %60 = ashr exact i64 %59, 3
  %61 = getelementptr inbounds double*, double** %53, i64 %60
  %62 = icmp eq i64 %59, 0
  br i1 %62, label %138, label %63

63:                                               ; preds = %46
  %64 = add i64 %59, -8
  %65 = lshr i64 %64, 3
  %66 = add nuw nsw i64 %65, 1
  %67 = and i64 %66, 7
  %68 = icmp eq i64 %67, 0
  br i1 %68, label %84, label %69

69:                                               ; preds = %63, %69
  %70 = phi double** [ %77, %69 ], [ %53, %63 ]
  %71 = phi i64 [ %78, %69 ], [ %54, %63 ]
  %72 = phi double** [ %79, %69 ], [ %4, %63 ]
  %73 = phi i64 [ %80, %69 ], [ %67, %63 ]
  %74 = bitcast double** %72 to i64*
  %75 = load i64, i64* %74, align 8
  %76 = inttoptr i64 %71 to i64*
  store i64 %75, i64* %76, align 8
  %77 = getelementptr inbounds double*, double** %70, i64 1
  %78 = ptrtoint double** %77 to i64
  %79 = getelementptr inbounds double*, double** %72, i64 1
  %80 = add i64 %73, -1
  %81 = icmp eq i64 %80, 0
  br i1 %81, label %82, label %69, !llvm.loop !10

82:                                               ; preds = %69
  %83 = ptrtoint double** %77 to i64
  br label %84

84:                                               ; preds = %63, %82
  %85 = phi double** [ %53, %63 ], [ %77, %82 ]
  %86 = phi i64 [ %54, %63 ], [ %83, %82 ]
  %87 = phi double** [ %4, %63 ], [ %79, %82 ]
  %88 = icmp ult i64 %64, 56
  br i1 %88, label %135, label %89

89:                                               ; preds = %84, %89
  %90 = phi double** [ %131, %89 ], [ %85, %84 ]
  %91 = phi i64 [ %132, %89 ], [ %86, %84 ]
  %92 = phi double** [ %133, %89 ], [ %87, %84 ]
  %93 = bitcast double** %92 to i64*
  %94 = load i64, i64* %93, align 8
  %95 = inttoptr i64 %91 to i64*
  store i64 %94, i64* %95, align 8
  %96 = getelementptr inbounds double*, double** %90, i64 1
  %97 = getelementptr inbounds double*, double** %92, i64 1
  %98 = bitcast double** %97 to i64*
  %99 = load i64, i64* %98, align 8
  %100 = bitcast double** %96 to i64*
  store i64 %99, i64* %100, align 8
  %101 = getelementptr inbounds double*, double** %90, i64 2
  %102 = getelementptr inbounds double*, double** %92, i64 2
  %103 = bitcast double** %102 to i64*
  %104 = load i64, i64* %103, align 8
  %105 = bitcast double** %101 to i64*
  store i64 %104, i64* %105, align 8
  %106 = getelementptr inbounds double*, double** %90, i64 3
  %107 = getelementptr inbounds double*, double** %92, i64 3
  %108 = bitcast double** %107 to i64*
  %109 = load i64, i64* %108, align 8
  %110 = bitcast double** %106 to i64*
  store i64 %109, i64* %110, align 8
  %111 = getelementptr inbounds double*, double** %90, i64 4
  %112 = getelementptr inbounds double*, double** %92, i64 4
  %113 = bitcast double** %112 to i64*
  %114 = load i64, i64* %113, align 8
  %115 = bitcast double** %111 to i64*
  store i64 %114, i64* %115, align 8
  %116 = getelementptr inbounds double*, double** %90, i64 5
  %117 = getelementptr inbounds double*, double** %92, i64 5
  %118 = bitcast double** %117 to i64*
  %119 = load i64, i64* %118, align 8
  %120 = bitcast double** %116 to i64*
  store i64 %119, i64* %120, align 8
  %121 = getelementptr inbounds double*, double** %90, i64 6
  %122 = getelementptr inbounds double*, double** %92, i64 6
  %123 = bitcast double** %122 to i64*
  %124 = load i64, i64* %123, align 8
  %125 = bitcast double** %121 to i64*
  store i64 %124, i64* %125, align 8
  %126 = getelementptr inbounds double*, double** %90, i64 7
  %127 = getelementptr inbounds double*, double** %92, i64 7
  %128 = bitcast double** %127 to i64*
  %129 = load i64, i64* %128, align 8
  %130 = bitcast double** %126 to i64*
  store i64 %129, i64* %130, align 8
  %131 = getelementptr inbounds double*, double** %90, i64 8
  %132 = ptrtoint double** %131 to i64
  %133 = getelementptr inbounds double*, double** %92, i64 8
  %134 = icmp eq double** %61, %131
  br i1 %134, label %135, label %89

135:                                              ; preds = %89, %84
  %136 = ptrtoint double** %61 to i64
  %137 = load double**, double*** %5, align 8
  br label %138

138:                                              ; preds = %46, %135
  %139 = phi double** [ %137, %135 ], [ %4, %46 ]
  %140 = phi i64 [ %136, %135 ], [ %54, %46 ]
  store i64 %52, i64* %39, align 8
  %141 = bitcast double*** %3 to i64*
  store i64 %54, i64* %141, align 8
  %142 = bitcast double*** %10 to i64*
  store i64 %140, i64* %142, align 8
  store i64 %56, i64* %15, align 8
  %143 = icmp eq double** %139, null
  br i1 %143, label %147, label %144

144:                                              ; preds = %138
  %145 = bitcast double** %139 to i8*
  tail call void @_ZdlPv(i8* %145) #11
  %146 = load double**, double*** %3, align 8
  br label %147

147:                                              ; preds = %144, %138, %34, %2
  %148 = phi double** [ %146, %144 ], [ %53, %138 ], [ %36, %34 ], [ %4, %2 ]
  %149 = getelementptr inbounds double*, double** %148, i64 -1
  %150 = bitcast double** %1 to i64*
  %151 = load i64, i64* %150, align 8
  %152 = bitcast double** %149 to i64*
  store i64 %151, i64* %152, align 8
  %153 = load double**, double*** %3, align 8
  %154 = getelementptr inbounds double*, double** %153, i64 -1
  store double** %154, double*** %3, align 8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__114__split_bufferIPdRNS_9allocatorIS1_EEE10push_frontERKS1_(%"struct.std::__1::__split_buffer.24"*, double** dereferenceable(8)) local_unnamed_addr #0 comdat align 2 {
  %3 = getelementptr inbounds %"struct.std::__1::__split_buffer.24", %"struct.std::__1::__split_buffer.24"* %0, i64 0, i32 1
  %4 = load double**, double*** %3, align 8
  %5 = getelementptr inbounds %"struct.std::__1::__split_buffer.24", %"struct.std::__1::__split_buffer.24"* %0, i64 0, i32 0
  %6 = load double**, double*** %5, align 8
  %7 = icmp eq double** %4, %6
  %8 = ptrtoint double** %6 to i64
  br i1 %7, label %9, label %147

9:                                                ; preds = %2
  %10 = getelementptr inbounds %"struct.std::__1::__split_buffer.24", %"struct.std::__1::__split_buffer.24"* %0, i64 0, i32 2
  %11 = load double**, double*** %10, align 8
  %12 = getelementptr inbounds %"struct.std::__1::__split_buffer.24", %"struct.std::__1::__split_buffer.24"* %0, i64 0, i32 3, i32 0, i32 0
  %13 = load double**, double*** %12, align 8
  %14 = icmp ult double** %11, %13
  %15 = bitcast double*** %12 to i64*
  %16 = ptrtoint double** %13 to i64
  br i1 %14, label %17, label %38

17:                                               ; preds = %9
  %18 = ptrtoint double** %11 to i64
  %19 = sub i64 %16, %18
  %20 = ashr exact i64 %19, 3
  %21 = add nsw i64 %20, 1
  %22 = sdiv i64 %21, 2
  %23 = getelementptr inbounds double*, double** %11, i64 %22
  %24 = ptrtoint double** %4 to i64
  %25 = sub i64 %18, %24
  %26 = icmp eq i64 %25, 0
  br i1 %26, label %34, label %27

27:                                               ; preds = %17
  %28 = ashr exact i64 %25, 3
  %29 = sub nsw i64 0, %28
  %30 = getelementptr inbounds double*, double** %23, i64 %29
  %31 = bitcast double** %30 to i8*
  %32 = bitcast double** %4 to i8*
  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* align 8 %31, i8* align 8 %32, i64 %25, i1 false) #12
  %33 = load double**, double*** %10, align 8
  br label %34

34:                                               ; preds = %17, %27
  %35 = phi double** [ %33, %27 ], [ %11, %17 ]
  %36 = phi double** [ %30, %27 ], [ %23, %17 ]
  store double** %36, double*** %3, align 8
  %37 = getelementptr inbounds double*, double** %35, i64 %22
  store double** %37, double*** %10, align 8
  br label %147

38:                                               ; preds = %9
  %39 = bitcast %"struct.std::__1::__split_buffer.24"* %0 to i64*
  %40 = sub i64 %16, %8
  %41 = ashr exact i64 %40, 2
  %42 = icmp eq i64 %40, 0
  %43 = select i1 %42, i64 1, i64 %41
  %44 = icmp ugt i64 %43, 2305843009213693951
  br i1 %44, label %45, label %46

45:                                               ; preds = %38
  tail call void @abort() #13
  unreachable

46:                                               ; preds = %38
  %47 = add nuw nsw i64 %43, 3
  %48 = lshr i64 %47, 2
  %49 = shl i64 %43, 3
  %50 = tail call i8* @_Znwm(i64 %49) #11
  %51 = bitcast i8* %50 to double**
  %52 = ptrtoint i8* %50 to i64
  %53 = getelementptr inbounds double*, double** %51, i64 %48
  %54 = ptrtoint double** %53 to i64
  %55 = getelementptr inbounds double*, double** %51, i64 %43
  %56 = ptrtoint double** %55 to i64
  %57 = ptrtoint double** %4 to i64
  %58 = ptrtoint double** %11 to i64
  %59 = sub i64 %58, %57
  %60 = ashr exact i64 %59, 3
  %61 = getelementptr inbounds double*, double** %53, i64 %60
  %62 = icmp eq i64 %59, 0
  br i1 %62, label %138, label %63

63:                                               ; preds = %46
  %64 = add i64 %59, -8
  %65 = lshr i64 %64, 3
  %66 = add nuw nsw i64 %65, 1
  %67 = and i64 %66, 7
  %68 = icmp eq i64 %67, 0
  br i1 %68, label %84, label %69

69:                                               ; preds = %63, %69
  %70 = phi double** [ %77, %69 ], [ %53, %63 ]
  %71 = phi i64 [ %78, %69 ], [ %54, %63 ]
  %72 = phi double** [ %79, %69 ], [ %4, %63 ]
  %73 = phi i64 [ %80, %69 ], [ %67, %63 ]
  %74 = bitcast double** %72 to i64*
  %75 = load i64, i64* %74, align 8
  %76 = inttoptr i64 %71 to i64*
  store i64 %75, i64* %76, align 8
  %77 = getelementptr inbounds double*, double** %70, i64 1
  %78 = ptrtoint double** %77 to i64
  %79 = getelementptr inbounds double*, double** %72, i64 1
  %80 = add i64 %73, -1
  %81 = icmp eq i64 %80, 0
  br i1 %81, label %82, label %69, !llvm.loop !11

82:                                               ; preds = %69
  %83 = ptrtoint double** %77 to i64
  br label %84

84:                                               ; preds = %63, %82
  %85 = phi double** [ %53, %63 ], [ %77, %82 ]
  %86 = phi i64 [ %54, %63 ], [ %83, %82 ]
  %87 = phi double** [ %4, %63 ], [ %79, %82 ]
  %88 = icmp ult i64 %64, 56
  br i1 %88, label %135, label %89

89:                                               ; preds = %84, %89
  %90 = phi double** [ %131, %89 ], [ %85, %84 ]
  %91 = phi i64 [ %132, %89 ], [ %86, %84 ]
  %92 = phi double** [ %133, %89 ], [ %87, %84 ]
  %93 = bitcast double** %92 to i64*
  %94 = load i64, i64* %93, align 8
  %95 = inttoptr i64 %91 to i64*
  store i64 %94, i64* %95, align 8
  %96 = getelementptr inbounds double*, double** %90, i64 1
  %97 = getelementptr inbounds double*, double** %92, i64 1
  %98 = bitcast double** %97 to i64*
  %99 = load i64, i64* %98, align 8
  %100 = bitcast double** %96 to i64*
  store i64 %99, i64* %100, align 8
  %101 = getelementptr inbounds double*, double** %90, i64 2
  %102 = getelementptr inbounds double*, double** %92, i64 2
  %103 = bitcast double** %102 to i64*
  %104 = load i64, i64* %103, align 8
  %105 = bitcast double** %101 to i64*
  store i64 %104, i64* %105, align 8
  %106 = getelementptr inbounds double*, double** %90, i64 3
  %107 = getelementptr inbounds double*, double** %92, i64 3
  %108 = bitcast double** %107 to i64*
  %109 = load i64, i64* %108, align 8
  %110 = bitcast double** %106 to i64*
  store i64 %109, i64* %110, align 8
  %111 = getelementptr inbounds double*, double** %90, i64 4
  %112 = getelementptr inbounds double*, double** %92, i64 4
  %113 = bitcast double** %112 to i64*
  %114 = load i64, i64* %113, align 8
  %115 = bitcast double** %111 to i64*
  store i64 %114, i64* %115, align 8
  %116 = getelementptr inbounds double*, double** %90, i64 5
  %117 = getelementptr inbounds double*, double** %92, i64 5
  %118 = bitcast double** %117 to i64*
  %119 = load i64, i64* %118, align 8
  %120 = bitcast double** %116 to i64*
  store i64 %119, i64* %120, align 8
  %121 = getelementptr inbounds double*, double** %90, i64 6
  %122 = getelementptr inbounds double*, double** %92, i64 6
  %123 = bitcast double** %122 to i64*
  %124 = load i64, i64* %123, align 8
  %125 = bitcast double** %121 to i64*
  store i64 %124, i64* %125, align 8
  %126 = getelementptr inbounds double*, double** %90, i64 7
  %127 = getelementptr inbounds double*, double** %92, i64 7
  %128 = bitcast double** %127 to i64*
  %129 = load i64, i64* %128, align 8
  %130 = bitcast double** %126 to i64*
  store i64 %129, i64* %130, align 8
  %131 = getelementptr inbounds double*, double** %90, i64 8
  %132 = ptrtoint double** %131 to i64
  %133 = getelementptr inbounds double*, double** %92, i64 8
  %134 = icmp eq double** %61, %131
  br i1 %134, label %135, label %89

135:                                              ; preds = %89, %84
  %136 = ptrtoint double** %61 to i64
  %137 = load double**, double*** %5, align 8
  br label %138

138:                                              ; preds = %46, %135
  %139 = phi double** [ %137, %135 ], [ %4, %46 ]
  %140 = phi i64 [ %136, %135 ], [ %54, %46 ]
  store i64 %52, i64* %39, align 8
  %141 = bitcast double*** %3 to i64*
  store i64 %54, i64* %141, align 8
  %142 = bitcast double*** %10 to i64*
  store i64 %140, i64* %142, align 8
  store i64 %56, i64* %15, align 8
  %143 = icmp eq double** %139, null
  br i1 %143, label %147, label %144

144:                                              ; preds = %138
  %145 = bitcast double** %139 to i8*
  tail call void @_ZdlPv(i8* %145) #11
  %146 = load double**, double*** %3, align 8
  br label %147

147:                                              ; preds = %144, %138, %34, %2
  %148 = phi double** [ %146, %144 ], [ %53, %138 ], [ %36, %34 ], [ %4, %2 ]
  %149 = getelementptr inbounds double*, double** %148, i64 -1
  %150 = bitcast double** %1 to i64*
  %151 = load i64, i64* %150, align 8
  %152 = bitcast double** %149 to i64*
  store i64 %151, i64* %152, align 8
  %153 = load double**, double*** %3, align 8
  %154 = getelementptr inbounds double*, double** %153, i64 -1
  store double** %154, double*** %3, align 8
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memmove.p0i8.p0i8.i64(i8* nocapture, i8* nocapture readonly, i64, i1 immarg) #3

; Function Attrs: noreturn nounwind
declare void @abort() local_unnamed_addr #9

; Function Attrs: nobuiltin nofree
declare noalias nonnull i8* @_Znwm(i64) local_unnamed_addr #10

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__15dequeIN4base9TimeTicksENS_9allocatorIS2_EEE19__add_back_capacityEv(%"class.std::__1::deque.6"*) local_unnamed_addr #0 comdat align 2 {
  %2 = alloca %"class.base::TimeTicks"*, align 8
  %3 = alloca %"class.base::TimeTicks"*, align 8
  %4 = alloca %"struct.std::__1::__split_buffer.32", align 8
  %5 = getelementptr inbounds %"class.std::__1::deque.6", %"class.std::__1::deque.6"* %0, i64 0, i32 0, i32 1
  %6 = load i64, i64* %5, align 8
  %7 = icmp ugt i64 %6, 511
  br i1 %7, label %8, label %162

8:                                                ; preds = %1
  %9 = add i64 %6, -512
  store i64 %9, i64* %5, align 8
  %10 = getelementptr inbounds %"class.std::__1::deque.6", %"class.std::__1::deque.6"* %0, i64 0, i32 0, i32 0, i32 1
  %11 = load %"class.base::TimeTicks"**, %"class.base::TimeTicks"*** %10, align 8
  %12 = bitcast %"class.base::TimeTicks"** %11 to i64*
  %13 = load i64, i64* %12, align 8
  %14 = getelementptr inbounds %"class.base::TimeTicks"*, %"class.base::TimeTicks"** %11, i64 1
  store %"class.base::TimeTicks"** %14, %"class.base::TimeTicks"*** %10, align 8
  %15 = getelementptr inbounds %"class.std::__1::deque.6", %"class.std::__1::deque.6"* %0, i64 0, i32 0, i32 0, i32 2
  %16 = load %"class.base::TimeTicks"**, %"class.base::TimeTicks"*** %15, align 8
  %17 = getelementptr inbounds %"class.std::__1::deque.6", %"class.std::__1::deque.6"* %0, i64 0, i32 0, i32 0, i32 3, i32 0, i32 0
  %18 = load %"class.base::TimeTicks"**, %"class.base::TimeTicks"*** %17, align 8
  %19 = icmp eq %"class.base::TimeTicks"** %16, %18
  %20 = ptrtoint %"class.base::TimeTicks"** %18 to i64
  %21 = bitcast %"class.base::TimeTicks"** %16 to i64*
  br i1 %19, label %22, label %158

22:                                               ; preds = %8
  %23 = getelementptr inbounds %"class.std::__1::deque.6", %"class.std::__1::deque.6"* %0, i64 0, i32 0, i32 0, i32 0
  %24 = load %"class.base::TimeTicks"**, %"class.base::TimeTicks"*** %23, align 8
  %25 = icmp ugt %"class.base::TimeTicks"** %14, %24
  %26 = ptrtoint %"class.base::TimeTicks"** %24 to i64
  br i1 %25, label %27, label %47

27:                                               ; preds = %22
  %28 = ptrtoint %"class.base::TimeTicks"** %14 to i64
  %29 = sub i64 %28, %26
  %30 = ashr exact i64 %29, 3
  %31 = add nsw i64 %30, 1
  %32 = sdiv i64 %31, -2
  %33 = getelementptr inbounds %"class.base::TimeTicks"*, %"class.base::TimeTicks"** %14, i64 %32
  %34 = ptrtoint %"class.base::TimeTicks"** %16 to i64
  %35 = sub i64 %34, %28
  %36 = ashr exact i64 %35, 3
  %37 = icmp eq i64 %35, 0
  br i1 %37, label %42, label %38

38:                                               ; preds = %27
  %39 = bitcast %"class.base::TimeTicks"** %33 to i8*
  %40 = bitcast %"class.base::TimeTicks"** %14 to i8*
  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* align 8 %39, i8* align 8 %40, i64 %35, i1 false) #12
  %41 = load %"class.base::TimeTicks"**, %"class.base::TimeTicks"*** %10, align 8
  br label %42

42:                                               ; preds = %38, %27
  %43 = phi %"class.base::TimeTicks"** [ %14, %27 ], [ %41, %38 ]
  %44 = getelementptr inbounds %"class.base::TimeTicks"*, %"class.base::TimeTicks"** %33, i64 %36
  store %"class.base::TimeTicks"** %44, %"class.base::TimeTicks"*** %15, align 8
  %45 = getelementptr inbounds %"class.base::TimeTicks"*, %"class.base::TimeTicks"** %43, i64 %32
  store %"class.base::TimeTicks"** %45, %"class.base::TimeTicks"*** %10, align 8
  %46 = bitcast %"class.base::TimeTicks"** %44 to i64*
  br label %158

47:                                               ; preds = %22
  %48 = bitcast %"class.base::TimeTicks"*** %17 to i64*
  %49 = bitcast %"class.std::__1::deque.6"* %0 to i64*
  %50 = sub i64 %20, %26
  %51 = ashr exact i64 %50, 2
  %52 = icmp eq i64 %50, 0
  %53 = select i1 %52, i64 1, i64 %51
  %54 = icmp ugt i64 %53, 2305843009213693951
  br i1 %54, label %55, label %56

55:                                               ; preds = %47
  tail call void @abort() #13
  unreachable

56:                                               ; preds = %47
  %57 = lshr i64 %53, 2
  %58 = shl i64 %53, 3
  %59 = tail call i8* @_Znwm(i64 %58) #11
  %60 = bitcast i8* %59 to %"class.base::TimeTicks"**
  %61 = ptrtoint i8* %59 to i64
  %62 = getelementptr inbounds %"class.base::TimeTicks"*, %"class.base::TimeTicks"** %60, i64 %57
  %63 = ptrtoint %"class.base::TimeTicks"** %62 to i64
  %64 = getelementptr inbounds %"class.base::TimeTicks"*, %"class.base::TimeTicks"** %60, i64 %53
  %65 = ptrtoint %"class.base::TimeTicks"** %64 to i64
  %66 = ptrtoint %"class.base::TimeTicks"** %14 to i64
  %67 = ptrtoint %"class.base::TimeTicks"** %16 to i64
  %68 = sub i64 %67, %66
  %69 = ashr exact i64 %68, 3
  %70 = getelementptr inbounds %"class.base::TimeTicks"*, %"class.base::TimeTicks"** %62, i64 %69
  %71 = icmp eq i64 %68, 0
  br i1 %71, label %147, label %72

72:                                               ; preds = %56
  %73 = add i64 %68, -8
  %74 = lshr i64 %73, 3
  %75 = add nuw nsw i64 %74, 1
  %76 = and i64 %75, 7
  %77 = icmp eq i64 %76, 0
  br i1 %77, label %93, label %78

78:                                               ; preds = %72, %78
  %79 = phi %"class.base::TimeTicks"** [ %86, %78 ], [ %62, %72 ]
  %80 = phi i64 [ %87, %78 ], [ %63, %72 ]
  %81 = phi %"class.base::TimeTicks"** [ %88, %78 ], [ %14, %72 ]
  %82 = phi i64 [ %89, %78 ], [ %76, %72 ]
  %83 = bitcast %"class.base::TimeTicks"** %81 to i64*
  %84 = load i64, i64* %83, align 8
  %85 = inttoptr i64 %80 to i64*
  store i64 %84, i64* %85, align 8
  %86 = getelementptr inbounds %"class.base::TimeTicks"*, %"class.base::TimeTicks"** %79, i64 1
  %87 = ptrtoint %"class.base::TimeTicks"** %86 to i64
  %88 = getelementptr inbounds %"class.base::TimeTicks"*, %"class.base::TimeTicks"** %81, i64 1
  %89 = add i64 %82, -1
  %90 = icmp eq i64 %89, 0
  br i1 %90, label %91, label %78, !llvm.loop !12

91:                                               ; preds = %78
  %92 = ptrtoint %"class.base::TimeTicks"** %86 to i64
  br label %93

93:                                               ; preds = %72, %91
  %94 = phi %"class.base::TimeTicks"** [ %62, %72 ], [ %86, %91 ]
  %95 = phi i64 [ %63, %72 ], [ %92, %91 ]
  %96 = phi %"class.base::TimeTicks"** [ %14, %72 ], [ %88, %91 ]
  %97 = icmp ult i64 %73, 56
  br i1 %97, label %144, label %98

98:                                               ; preds = %93, %98
  %99 = phi %"class.base::TimeTicks"** [ %140, %98 ], [ %94, %93 ]
  %100 = phi i64 [ %141, %98 ], [ %95, %93 ]
  %101 = phi %"class.base::TimeTicks"** [ %142, %98 ], [ %96, %93 ]
  %102 = bitcast %"class.base::TimeTicks"** %101 to i64*
  %103 = load i64, i64* %102, align 8
  %104 = inttoptr i64 %100 to i64*
  store i64 %103, i64* %104, align 8
  %105 = getelementptr inbounds %"class.base::TimeTicks"*, %"class.base::TimeTicks"** %99, i64 1
  %106 = getelementptr inbounds %"class.base::TimeTicks"*, %"class.base::TimeTicks"** %101, i64 1
  %107 = bitcast %"class.base::TimeTicks"** %106 to i64*
  %108 = load i64, i64* %107, align 8
  %109 = bitcast %"class.base::TimeTicks"** %105 to i64*
  store i64 %108, i64* %109, align 8
  %110 = getelementptr inbounds %"class.base::TimeTicks"*, %"class.base::TimeTicks"** %99, i64 2
  %111 = getelementptr inbounds %"class.base::TimeTicks"*, %"class.base::TimeTicks"** %101, i64 2
  %112 = bitcast %"class.base::TimeTicks"** %111 to i64*
  %113 = load i64, i64* %112, align 8
  %114 = bitcast %"class.base::TimeTicks"** %110 to i64*
  store i64 %113, i64* %114, align 8
  %115 = getelementptr inbounds %"class.base::TimeTicks"*, %"class.base::TimeTicks"** %99, i64 3
  %116 = getelementptr inbounds %"class.base::TimeTicks"*, %"class.base::TimeTicks"** %101, i64 3
  %117 = bitcast %"class.base::TimeTicks"** %116 to i64*
  %118 = load i64, i64* %117, align 8
  %119 = bitcast %"class.base::TimeTicks"** %115 to i64*
  store i64 %118, i64* %119, align 8
  %120 = getelementptr inbounds %"class.base::TimeTicks"*, %"class.base::TimeTicks"** %99, i64 4
  %121 = getelementptr inbounds %"class.base::TimeTicks"*, %"class.base::TimeTicks"** %101, i64 4
  %122 = bitcast %"class.base::TimeTicks"** %121 to i64*
  %123 = load i64, i64* %122, align 8
  %124 = bitcast %"class.base::TimeTicks"** %120 to i64*
  store i64 %123, i64* %124, align 8
  %125 = getelementptr inbounds %"class.base::TimeTicks"*, %"class.base::TimeTicks"** %99, i64 5
  %126 = getelementptr inbounds %"class.base::TimeTicks"*, %"class.base::TimeTicks"** %101, i64 5
  %127 = bitcast %"class.base::TimeTicks"** %126 to i64*
  %128 = load i64, i64* %127, align 8
  %129 = bitcast %"class.base::TimeTicks"** %125 to i64*
  store i64 %128, i64* %129, align 8
  %130 = getelementptr inbounds %"class.base::TimeTicks"*, %"class.base::TimeTicks"** %99, i64 6
  %131 = getelementptr inbounds %"class.base::TimeTicks"*, %"class.base::TimeTicks"** %101, i64 6
  %132 = bitcast %"class.base::TimeTicks"** %131 to i64*
  %133 = load i64, i64* %132, align 8
  %134 = bitcast %"class.base::TimeTicks"** %130 to i64*
  store i64 %133, i64* %134, align 8
  %135 = getelementptr inbounds %"class.base::TimeTicks"*, %"class.base::TimeTicks"** %99, i64 7
  %136 = getelementptr inbounds %"class.base::TimeTicks"*, %"class.base::TimeTicks"** %101, i64 7
  %137 = bitcast %"class.base::TimeTicks"** %136 to i64*
  %138 = load i64, i64* %137, align 8
  %139 = bitcast %"class.base::TimeTicks"** %135 to i64*
  store i64 %138, i64* %139, align 8
  %140 = getelementptr inbounds %"class.base::TimeTicks"*, %"class.base::TimeTicks"** %99, i64 8
  %141 = ptrtoint %"class.base::TimeTicks"** %140 to i64
  %142 = getelementptr inbounds %"class.base::TimeTicks"*, %"class.base::TimeTicks"** %101, i64 8
  %143 = icmp eq %"class.base::TimeTicks"** %70, %140
  br i1 %143, label %144, label %98

144:                                              ; preds = %98, %93
  %145 = ptrtoint %"class.base::TimeTicks"** %70 to i64
  %146 = load %"class.base::TimeTicks"**, %"class.base::TimeTicks"*** %23, align 8
  br label %147

147:                                              ; preds = %144, %56
  %148 = phi %"class.base::TimeTicks"** [ %146, %144 ], [ %24, %56 ]
  %149 = phi i64 [ %145, %144 ], [ %63, %56 ]
  store i64 %61, i64* %49, align 8
  %150 = bitcast %"class.base::TimeTicks"*** %10 to i64*
  store i64 %63, i64* %150, align 8
  %151 = bitcast %"class.base::TimeTicks"*** %15 to i64*
  store i64 %149, i64* %151, align 8
  store i64 %65, i64* %48, align 8
  %152 = icmp eq %"class.base::TimeTicks"** %148, null
  %153 = inttoptr i64 %149 to i64*
  br i1 %152, label %158, label %154

154:                                              ; preds = %147
  %155 = bitcast %"class.base::TimeTicks"** %148 to i8*
  tail call void @_ZdlPv(i8* %155) #11
  %156 = bitcast %"class.base::TimeTicks"*** %15 to i64**
  %157 = load i64*, i64** %156, align 8
  br label %158

158:                                              ; preds = %8, %42, %147, %154
  %159 = phi i64* [ %157, %154 ], [ %153, %147 ], [ %46, %42 ], [ %21, %8 ]
  store i64 %13, i64* %159, align 8
  %160 = load %"class.base::TimeTicks"**, %"class.base::TimeTicks"*** %15, align 8
  %161 = getelementptr inbounds %"class.base::TimeTicks"*, %"class.base::TimeTicks"** %160, i64 1
  store %"class.base::TimeTicks"** %161, %"class.base::TimeTicks"*** %15, align 8
  br label %460

162:                                              ; preds = %1
  %163 = getelementptr inbounds %"class.std::__1::deque.6", %"class.std::__1::deque.6"* %0, i64 0, i32 0, i32 0
  %164 = getelementptr inbounds %"class.std::__1::deque.6", %"class.std::__1::deque.6"* %0, i64 0, i32 0, i32 0, i32 2
  %165 = bitcast %"class.base::TimeTicks"*** %164 to i64*
  %166 = load i64, i64* %165, align 8
  %167 = getelementptr inbounds %"class.std::__1::deque.6", %"class.std::__1::deque.6"* %0, i64 0, i32 0, i32 0, i32 1
  %168 = bitcast %"class.base::TimeTicks"*** %167 to i64*
  %169 = load i64, i64* %168, align 8
  %170 = sub i64 %166, %169
  %171 = ashr exact i64 %170, 3
  %172 = getelementptr inbounds %"class.std::__1::deque.6", %"class.std::__1::deque.6"* %0, i64 0, i32 0, i32 0, i32 3, i32 0, i32 0
  %173 = bitcast %"class.base::TimeTicks"*** %172 to i64*
  %174 = load i64, i64* %173, align 8
  %175 = bitcast %"class.std::__1::deque.6"* %0 to i64*
  %176 = load i64, i64* %175, align 8
  %177 = sub i64 %174, %176
  %178 = ashr exact i64 %177, 3
  %179 = icmp ult i64 %171, %178
  %180 = inttoptr i64 %166 to %"class.base::TimeTicks"**
  %181 = inttoptr i64 %169 to %"class.base::TimeTicks"**
  br i1 %179, label %182, label %337

182:                                              ; preds = %162
  %183 = icmp eq i64 %174, %166
  br i1 %183, label %188, label %184

184:                                              ; preds = %182
  %185 = bitcast %"class.base::TimeTicks"** %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %185) #12
  %186 = tail call i8* @_Znwm(i64 4096) #11
  %187 = bitcast %"class.base::TimeTicks"** %2 to i8**
  store i8* %186, i8** %187, align 8
  call void @_ZNSt3__114__split_bufferIPN4base9TimeTicksENS_9allocatorIS3_EEE9push_backEOS3_(%"struct.std::__1::__split_buffer.8"* %163, %"class.base::TimeTicks"** nonnull dereferenceable(8) %2)
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %185) #12
  br label %460

188:                                              ; preds = %182
  %189 = bitcast %"class.base::TimeTicks"** %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %189) #12
  %190 = tail call i8* @_Znwm(i64 4096) #11
  %191 = bitcast %"class.base::TimeTicks"** %3 to i8**
  store i8* %190, i8** %191, align 8
  call void @_ZNSt3__114__split_bufferIPN4base9TimeTicksENS_9allocatorIS3_EEE10push_frontEOS3_(%"struct.std::__1::__split_buffer.8"* %163, %"class.base::TimeTicks"** nonnull dereferenceable(8) %3)
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %189) #12
  %192 = load %"class.base::TimeTicks"**, %"class.base::TimeTicks"*** %167, align 8
  %193 = bitcast %"class.base::TimeTicks"** %192 to i64*
  %194 = load i64, i64* %193, align 8
  %195 = getelementptr inbounds %"class.base::TimeTicks"*, %"class.base::TimeTicks"** %192, i64 1
  store %"class.base::TimeTicks"** %195, %"class.base::TimeTicks"*** %167, align 8
  %196 = load %"class.base::TimeTicks"**, %"class.base::TimeTicks"*** %164, align 8
  %197 = load %"class.base::TimeTicks"**, %"class.base::TimeTicks"*** %172, align 8
  %198 = icmp eq %"class.base::TimeTicks"** %196, %197
  %199 = ptrtoint %"class.base::TimeTicks"** %197 to i64
  %200 = bitcast %"class.base::TimeTicks"** %196 to i64*
  br i1 %198, label %201, label %333

201:                                              ; preds = %188
  %202 = getelementptr inbounds %"class.std::__1::deque.6", %"class.std::__1::deque.6"* %0, i64 0, i32 0, i32 0, i32 0
  %203 = load %"class.base::TimeTicks"**, %"class.base::TimeTicks"*** %202, align 8
  %204 = icmp ugt %"class.base::TimeTicks"** %195, %203
  %205 = ptrtoint %"class.base::TimeTicks"** %203 to i64
  br i1 %204, label %206, label %226

206:                                              ; preds = %201
  %207 = ptrtoint %"class.base::TimeTicks"** %195 to i64
  %208 = sub i64 %207, %205
  %209 = ashr exact i64 %208, 3
  %210 = add nsw i64 %209, 1
  %211 = sdiv i64 %210, -2
  %212 = getelementptr inbounds %"class.base::TimeTicks"*, %"class.base::TimeTicks"** %195, i64 %211
  %213 = ptrtoint %"class.base::TimeTicks"** %196 to i64
  %214 = sub i64 %213, %207
  %215 = ashr exact i64 %214, 3
  %216 = icmp eq i64 %214, 0
  br i1 %216, label %221, label %217

217:                                              ; preds = %206
  %218 = bitcast %"class.base::TimeTicks"** %212 to i8*
  %219 = bitcast %"class.base::TimeTicks"** %195 to i8*
  call void @llvm.memmove.p0i8.p0i8.i64(i8* align 8 %218, i8* align 8 %219, i64 %214, i1 false) #12
  %220 = load %"class.base::TimeTicks"**, %"class.base::TimeTicks"*** %167, align 8
  br label %221

221:                                              ; preds = %217, %206
  %222 = phi %"class.base::TimeTicks"** [ %195, %206 ], [ %220, %217 ]
  %223 = getelementptr inbounds %"class.base::TimeTicks"*, %"class.base::TimeTicks"** %212, i64 %215
  store %"class.base::TimeTicks"** %223, %"class.base::TimeTicks"*** %164, align 8
  %224 = getelementptr inbounds %"class.base::TimeTicks"*, %"class.base::TimeTicks"** %222, i64 %211
  store %"class.base::TimeTicks"** %224, %"class.base::TimeTicks"*** %167, align 8
  %225 = bitcast %"class.base::TimeTicks"** %223 to i64*
  br label %333

226:                                              ; preds = %201
  %227 = sub i64 %199, %205
  %228 = ashr exact i64 %227, 2
  %229 = icmp eq i64 %227, 0
  %230 = select i1 %229, i64 1, i64 %228
  %231 = icmp ugt i64 %230, 2305843009213693951
  br i1 %231, label %232, label %233

232:                                              ; preds = %226
  call void @abort() #13
  unreachable

233:                                              ; preds = %226
  %234 = lshr i64 %230, 2
  %235 = shl i64 %230, 3
  %236 = call i8* @_Znwm(i64 %235) #11
  %237 = bitcast i8* %236 to %"class.base::TimeTicks"**
  %238 = ptrtoint i8* %236 to i64
  %239 = getelementptr inbounds %"class.base::TimeTicks"*, %"class.base::TimeTicks"** %237, i64 %234
  %240 = ptrtoint %"class.base::TimeTicks"** %239 to i64
  %241 = getelementptr inbounds %"class.base::TimeTicks"*, %"class.base::TimeTicks"** %237, i64 %230
  %242 = ptrtoint %"class.base::TimeTicks"** %241 to i64
  %243 = ptrtoint %"class.base::TimeTicks"** %195 to i64
  %244 = ptrtoint %"class.base::TimeTicks"** %196 to i64
  %245 = sub i64 %244, %243
  %246 = ashr exact i64 %245, 3
  %247 = getelementptr inbounds %"class.base::TimeTicks"*, %"class.base::TimeTicks"** %239, i64 %246
  %248 = icmp eq i64 %245, 0
  br i1 %248, label %324, label %249

249:                                              ; preds = %233
  %250 = add i64 %245, -8
  %251 = lshr i64 %250, 3
  %252 = add nuw nsw i64 %251, 1
  %253 = and i64 %252, 7
  %254 = icmp eq i64 %253, 0
  br i1 %254, label %270, label %255

255:                                              ; preds = %249, %255
  %256 = phi %"class.base::TimeTicks"** [ %263, %255 ], [ %239, %249 ]
  %257 = phi i64 [ %264, %255 ], [ %240, %249 ]
  %258 = phi %"class.base::TimeTicks"** [ %265, %255 ], [ %195, %249 ]
  %259 = phi i64 [ %266, %255 ], [ %253, %249 ]
  %260 = bitcast %"class.base::TimeTicks"** %258 to i64*
  %261 = load i64, i64* %260, align 8
  %262 = inttoptr i64 %257 to i64*
  store i64 %261, i64* %262, align 8
  %263 = getelementptr inbounds %"class.base::TimeTicks"*, %"class.base::TimeTicks"** %256, i64 1
  %264 = ptrtoint %"class.base::TimeTicks"** %263 to i64
  %265 = getelementptr inbounds %"class.base::TimeTicks"*, %"class.base::TimeTicks"** %258, i64 1
  %266 = add i64 %259, -1
  %267 = icmp eq i64 %266, 0
  br i1 %267, label %268, label %255, !llvm.loop !13

268:                                              ; preds = %255
  %269 = ptrtoint %"class.base::TimeTicks"** %263 to i64
  br label %270

270:                                              ; preds = %249, %268
  %271 = phi %"class.base::TimeTicks"** [ %239, %249 ], [ %263, %268 ]
  %272 = phi i64 [ %240, %249 ], [ %269, %268 ]
  %273 = phi %"class.base::TimeTicks"** [ %195, %249 ], [ %265, %268 ]
  %274 = icmp ult i64 %250, 56
  br i1 %274, label %321, label %275

275:                                              ; preds = %270, %275
  %276 = phi %"class.base::TimeTicks"** [ %317, %275 ], [ %271, %270 ]
  %277 = phi i64 [ %318, %275 ], [ %272, %270 ]
  %278 = phi %"class.base::TimeTicks"** [ %319, %275 ], [ %273, %270 ]
  %279 = bitcast %"class.base::TimeTicks"** %278 to i64*
  %280 = load i64, i64* %279, align 8
  %281 = inttoptr i64 %277 to i64*
  store i64 %280, i64* %281, align 8
  %282 = getelementptr inbounds %"class.base::TimeTicks"*, %"class.base::TimeTicks"** %276, i64 1
  %283 = getelementptr inbounds %"class.base::TimeTicks"*, %"class.base::TimeTicks"** %278, i64 1
  %284 = bitcast %"class.base::TimeTicks"** %283 to i64*
  %285 = load i64, i64* %284, align 8
  %286 = bitcast %"class.base::TimeTicks"** %282 to i64*
  store i64 %285, i64* %286, align 8
  %287 = getelementptr inbounds %"class.base::TimeTicks"*, %"class.base::TimeTicks"** %276, i64 2
  %288 = getelementptr inbounds %"class.base::TimeTicks"*, %"class.base::TimeTicks"** %278, i64 2
  %289 = bitcast %"class.base::TimeTicks"** %288 to i64*
  %290 = load i64, i64* %289, align 8
  %291 = bitcast %"class.base::TimeTicks"** %287 to i64*
  store i64 %290, i64* %291, align 8
  %292 = getelementptr inbounds %"class.base::TimeTicks"*, %"class.base::TimeTicks"** %276, i64 3
  %293 = getelementptr inbounds %"class.base::TimeTicks"*, %"class.base::TimeTicks"** %278, i64 3
  %294 = bitcast %"class.base::TimeTicks"** %293 to i64*
  %295 = load i64, i64* %294, align 8
  %296 = bitcast %"class.base::TimeTicks"** %292 to i64*
  store i64 %295, i64* %296, align 8
  %297 = getelementptr inbounds %"class.base::TimeTicks"*, %"class.base::TimeTicks"** %276, i64 4
  %298 = getelementptr inbounds %"class.base::TimeTicks"*, %"class.base::TimeTicks"** %278, i64 4
  %299 = bitcast %"class.base::TimeTicks"** %298 to i64*
  %300 = load i64, i64* %299, align 8
  %301 = bitcast %"class.base::TimeTicks"** %297 to i64*
  store i64 %300, i64* %301, align 8
  %302 = getelementptr inbounds %"class.base::TimeTicks"*, %"class.base::TimeTicks"** %276, i64 5
  %303 = getelementptr inbounds %"class.base::TimeTicks"*, %"class.base::TimeTicks"** %278, i64 5
  %304 = bitcast %"class.base::TimeTicks"** %303 to i64*
  %305 = load i64, i64* %304, align 8
  %306 = bitcast %"class.base::TimeTicks"** %302 to i64*
  store i64 %305, i64* %306, align 8
  %307 = getelementptr inbounds %"class.base::TimeTicks"*, %"class.base::TimeTicks"** %276, i64 6
  %308 = getelementptr inbounds %"class.base::TimeTicks"*, %"class.base::TimeTicks"** %278, i64 6
  %309 = bitcast %"class.base::TimeTicks"** %308 to i64*
  %310 = load i64, i64* %309, align 8
  %311 = bitcast %"class.base::TimeTicks"** %307 to i64*
  store i64 %310, i64* %311, align 8
  %312 = getelementptr inbounds %"class.base::TimeTicks"*, %"class.base::TimeTicks"** %276, i64 7
  %313 = getelementptr inbounds %"class.base::TimeTicks"*, %"class.base::TimeTicks"** %278, i64 7
  %314 = bitcast %"class.base::TimeTicks"** %313 to i64*
  %315 = load i64, i64* %314, align 8
  %316 = bitcast %"class.base::TimeTicks"** %312 to i64*
  store i64 %315, i64* %316, align 8
  %317 = getelementptr inbounds %"class.base::TimeTicks"*, %"class.base::TimeTicks"** %276, i64 8
  %318 = ptrtoint %"class.base::TimeTicks"** %317 to i64
  %319 = getelementptr inbounds %"class.base::TimeTicks"*, %"class.base::TimeTicks"** %278, i64 8
  %320 = icmp eq %"class.base::TimeTicks"** %247, %317
  br i1 %320, label %321, label %275

321:                                              ; preds = %275, %270
  %322 = ptrtoint %"class.base::TimeTicks"** %247 to i64
  %323 = load %"class.base::TimeTicks"**, %"class.base::TimeTicks"*** %202, align 8
  br label %324

324:                                              ; preds = %321, %233
  %325 = phi %"class.base::TimeTicks"** [ %323, %321 ], [ %203, %233 ]
  %326 = phi i64 [ %322, %321 ], [ %240, %233 ]
  store i64 %238, i64* %175, align 8
  store i64 %240, i64* %168, align 8
  store i64 %326, i64* %165, align 8
  store i64 %242, i64* %173, align 8
  %327 = icmp eq %"class.base::TimeTicks"** %325, null
  %328 = inttoptr i64 %326 to i64*
  br i1 %327, label %333, label %329

329:                                              ; preds = %324
  %330 = bitcast %"class.base::TimeTicks"** %325 to i8*
  call void @_ZdlPv(i8* %330) #11
  %331 = bitcast %"class.base::TimeTicks"*** %164 to i64**
  %332 = load i64*, i64** %331, align 8
  br label %333

333:                                              ; preds = %188, %221, %324, %329
  %334 = phi i64* [ %332, %329 ], [ %328, %324 ], [ %225, %221 ], [ %200, %188 ]
  store i64 %194, i64* %334, align 8
  %335 = load %"class.base::TimeTicks"**, %"class.base::TimeTicks"*** %164, align 8
  %336 = getelementptr inbounds %"class.base::TimeTicks"*, %"class.base::TimeTicks"** %335, i64 1
  store %"class.base::TimeTicks"** %336, %"class.base::TimeTicks"*** %164, align 8
  br label %460

337:                                              ; preds = %162
  %338 = bitcast %"struct.std::__1::__split_buffer.32"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %338) #12
  %339 = getelementptr inbounds %"struct.std::__1::__split_buffer.32", %"struct.std::__1::__split_buffer.32"* %4, i64 0, i32 1
  %340 = getelementptr inbounds %"struct.std::__1::__split_buffer.32", %"struct.std::__1::__split_buffer.32"* %4, i64 0, i32 2
  %341 = getelementptr inbounds %"struct.std::__1::__split_buffer.32", %"struct.std::__1::__split_buffer.32"* %4, i64 0, i32 3, i32 0, i32 0
  %342 = getelementptr inbounds %"struct.std::__1::__split_buffer.32", %"struct.std::__1::__split_buffer.32"* %4, i64 0, i32 3, i32 1, i32 0
  %343 = ashr exact i64 %177, 2
  %344 = icmp eq i64 %177, 0
  %345 = select i1 %344, i64 1, i64 %343
  %346 = getelementptr inbounds %"class.std::__1::deque.6", %"class.std::__1::deque.6"* %0, i64 0, i32 0, i32 0, i32 3
  %347 = bitcast %"struct.std::__1::__split_buffer.32"* %4 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %347, i8 -86, i64 24, i1 false)
  store %"class.base::TimeTicks"** null, %"class.base::TimeTicks"*** %341, align 8
  %348 = bitcast %"class.std::__1::allocator.12"** %342 to %"class.std::__1::__compressed_pair.9"**
  store %"class.std::__1::__compressed_pair.9"* %346, %"class.std::__1::__compressed_pair.9"** %348, align 8
  %349 = icmp ugt i64 %345, 2305843009213693951
  br i1 %349, label %350, label %351

350:                                              ; preds = %337
  tail call void @abort() #13
  unreachable

351:                                              ; preds = %337
  %352 = shl i64 %345, 3
  %353 = tail call i8* @_Znwm(i64 %352) #11
  %354 = bitcast i8* %353 to %"class.base::TimeTicks"**
  %355 = bitcast %"struct.std::__1::__split_buffer.32"* %4 to i8**
  store i8* %353, i8** %355, align 8
  %356 = getelementptr inbounds %"class.base::TimeTicks"*, %"class.base::TimeTicks"** %354, i64 %171
  store %"class.base::TimeTicks"** %356, %"class.base::TimeTicks"*** %340, align 8
  store %"class.base::TimeTicks"** %356, %"class.base::TimeTicks"*** %339, align 8
  %357 = getelementptr inbounds %"class.base::TimeTicks"*, %"class.base::TimeTicks"** %354, i64 %345
  store %"class.base::TimeTicks"** %357, %"class.base::TimeTicks"*** %341, align 8
  %358 = tail call i8* @_Znwm(i64 4096) #11
  %359 = ptrtoint i8* %358 to i64
  %360 = icmp eq i64 %171, %345
  %361 = ptrtoint %"class.base::TimeTicks"** %357 to i64
  %362 = ptrtoint i8* %353 to i64
  %363 = ptrtoint %"class.base::TimeTicks"** %356 to i64
  br i1 %360, label %364, label %398

364:                                              ; preds = %351
  %365 = icmp ugt %"class.base::TimeTicks"** %356, %354
  br i1 %365, label %366, label %373

366:                                              ; preds = %364
  %367 = sub i64 %363, %362
  %368 = ashr exact i64 %367, 3
  %369 = add nsw i64 %368, 1
  %370 = sdiv i64 %369, -2
  %371 = getelementptr inbounds %"class.base::TimeTicks"*, %"class.base::TimeTicks"** %356, i64 %370
  store %"class.base::TimeTicks"** %371, %"class.base::TimeTicks"*** %340, align 8
  store %"class.base::TimeTicks"** %371, %"class.base::TimeTicks"*** %339, align 8
  %372 = ptrtoint %"class.base::TimeTicks"** %371 to i64
  br label %398

373:                                              ; preds = %364
  %374 = sub i64 %361, %362
  %375 = ashr exact i64 %374, 2
  %376 = icmp eq i64 %374, 0
  %377 = select i1 %376, i64 1, i64 %375
  %378 = icmp ugt i64 %377, 2305843009213693951
  br i1 %378, label %379, label %380

379:                                              ; preds = %373
  tail call void @abort() #13
  unreachable

380:                                              ; preds = %373
  %381 = bitcast %"struct.std::__1::__split_buffer.32"* %4 to i64*
  %382 = bitcast %"class.base::TimeTicks"*** %341 to i64*
  %383 = lshr i64 %377, 2
  %384 = shl i64 %377, 3
  %385 = tail call i8* @_Znwm(i64 %384) #11
  %386 = bitcast i8* %385 to %"class.base::TimeTicks"**
  %387 = ptrtoint i8* %385 to i64
  %388 = getelementptr inbounds %"class.base::TimeTicks"*, %"class.base::TimeTicks"** %386, i64 %383
  %389 = ptrtoint %"class.base::TimeTicks"** %388 to i64
  %390 = getelementptr inbounds %"class.base::TimeTicks"*, %"class.base::TimeTicks"** %386, i64 %377
  %391 = ptrtoint %"class.base::TimeTicks"** %390 to i64
  store i64 %387, i64* %381, align 8
  %392 = bitcast %"class.base::TimeTicks"*** %339 to i64*
  store i64 %389, i64* %392, align 8
  %393 = bitcast %"class.base::TimeTicks"*** %340 to i64*
  store i64 %389, i64* %393, align 8
  store i64 %391, i64* %382, align 8
  tail call void @_ZdlPv(i8* nonnull %353) #11
  %394 = load %"class.base::TimeTicks"**, %"class.base::TimeTicks"*** %164, align 8
  %395 = load %"class.base::TimeTicks"**, %"class.base::TimeTicks"*** %167, align 8
  %396 = ptrtoint %"class.base::TimeTicks"** %395 to i64
  %397 = ptrtoint %"class.base::TimeTicks"** %394 to i64
  br label %398

398:                                              ; preds = %351, %366, %380
  %399 = phi i64 [ %391, %380 ], [ %361, %366 ], [ %361, %351 ]
  %400 = phi i64 [ %397, %380 ], [ %166, %366 ], [ %166, %351 ]
  %401 = phi i64 [ %389, %380 ], [ %372, %366 ], [ %363, %351 ]
  %402 = phi i64 [ %396, %380 ], [ %169, %366 ], [ %169, %351 ]
  %403 = phi i64 [ %387, %380 ], [ %362, %366 ], [ %362, %351 ]
  %404 = phi %"class.base::TimeTicks"** [ %395, %380 ], [ %181, %366 ], [ %181, %351 ]
  %405 = phi %"class.base::TimeTicks"** [ %394, %380 ], [ %180, %366 ], [ %180, %351 ]
  %406 = phi %"class.base::TimeTicks"** [ %388, %380 ], [ %371, %366 ], [ %356, %351 ]
  %407 = bitcast %"class.base::TimeTicks"** %406 to i64*
  store i64 %359, i64* %407, align 8
  %408 = getelementptr inbounds %"class.base::TimeTicks"*, %"class.base::TimeTicks"** %406, i64 1
  store %"class.base::TimeTicks"** %408, %"class.base::TimeTicks"*** %340, align 8
  %409 = icmp eq %"class.base::TimeTicks"** %405, %404
  br i1 %409, label %410, label %455

410:                                              ; preds = %398
  %411 = ptrtoint %"class.base::TimeTicks"** %408 to i64
  %412 = bitcast %"struct.std::__1::__split_buffer.32"* %4 to i64*
  %413 = bitcast %"class.base::TimeTicks"*** %339 to i64*
  %414 = bitcast %"class.base::TimeTicks"*** %340 to i64*
  %415 = bitcast %"class.base::TimeTicks"*** %341 to i64*
  br label %427

416:                                              ; preds = %455
  %417 = ptrtoint %"class.base::TimeTicks"** %458 to i64
  %418 = bitcast %"struct.std::__1::__split_buffer.32"* %4 to i64*
  %419 = load i64, i64* %418, align 8
  %420 = bitcast %"class.base::TimeTicks"*** %339 to i64*
  %421 = load i64, i64* %420, align 8
  %422 = load i64, i64* %165, align 8
  %423 = bitcast %"class.base::TimeTicks"*** %340 to i64*
  %424 = load i64, i64* %423, align 8
  %425 = bitcast %"class.base::TimeTicks"*** %341 to i64*
  %426 = load i64, i64* %425, align 8
  br label %427

427:                                              ; preds = %410, %416
  %428 = phi i64* [ %415, %410 ], [ %425, %416 ]
  %429 = phi i64* [ %414, %410 ], [ %423, %416 ]
  %430 = phi i64* [ %413, %410 ], [ %420, %416 ]
  %431 = phi i64* [ %412, %410 ], [ %418, %416 ]
  %432 = phi i64 [ %399, %410 ], [ %426, %416 ]
  %433 = phi i64 [ %411, %410 ], [ %424, %416 ]
  %434 = phi i64 [ %400, %410 ], [ %422, %416 ]
  %435 = phi i64 [ %401, %410 ], [ %421, %416 ]
  %436 = phi i64 [ %402, %410 ], [ %417, %416 ]
  %437 = phi i64 [ %403, %410 ], [ %419, %416 ]
  %438 = load i64, i64* %175, align 8
  store i64 %437, i64* %175, align 8
  store i64 %438, i64* %431, align 8
  store i64 %435, i64* %168, align 8
  store i64 %436, i64* %430, align 8
  store i64 %433, i64* %165, align 8
  store i64 %434, i64* %429, align 8
  %439 = load i64, i64* %173, align 8
  store i64 %432, i64* %173, align 8
  store i64 %439, i64* %428, align 8
  %440 = inttoptr i64 %436 to %"class.base::TimeTicks"**
  %441 = inttoptr i64 %434 to %"class.base::TimeTicks"**
  %442 = icmp eq %"class.base::TimeTicks"** %441, %440
  br i1 %442, label %450, label %443

443:                                              ; preds = %427
  %444 = getelementptr %"class.base::TimeTicks"*, %"class.base::TimeTicks"** %441, i64 -1
  %445 = ptrtoint %"class.base::TimeTicks"** %444 to i64
  %446 = sub i64 %445, %436
  %447 = lshr i64 %446, 3
  %448 = xor i64 %447, -1
  %449 = getelementptr %"class.base::TimeTicks"*, %"class.base::TimeTicks"** %441, i64 %448
  store %"class.base::TimeTicks"** %449, %"class.base::TimeTicks"*** %340, align 8
  br label %450

450:                                              ; preds = %443, %427
  %451 = icmp eq i64 %438, 0
  br i1 %451, label %454, label %452

452:                                              ; preds = %450
  %453 = inttoptr i64 %438 to i8*
  call void @_ZdlPv(i8* %453) #11
  br label %454

454:                                              ; preds = %450, %452
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %338) #12
  br label %460

455:                                              ; preds = %398, %455
  %456 = phi %"class.base::TimeTicks"** [ %457, %455 ], [ %405, %398 ]
  %457 = getelementptr inbounds %"class.base::TimeTicks"*, %"class.base::TimeTicks"** %456, i64 -1
  call void @_ZNSt3__114__split_bufferIPN4base9TimeTicksERNS_9allocatorIS3_EEE10push_frontERKS3_(%"struct.std::__1::__split_buffer.32"* nonnull %4, %"class.base::TimeTicks"** dereferenceable(8) %457)
  %458 = load %"class.base::TimeTicks"**, %"class.base::TimeTicks"*** %167, align 8
  %459 = icmp eq %"class.base::TimeTicks"** %457, %458
  br i1 %459, label %416, label %455

460:                                              ; preds = %454, %333, %184, %158
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__114__split_bufferIPN4base9TimeTicksENS_9allocatorIS3_EEE9push_backEOS3_(%"struct.std::__1::__split_buffer.8"*, %"class.base::TimeTicks"** dereferenceable(8)) local_unnamed_addr #0 comdat align 2 {
  %3 = getelementptr inbounds %"struct.std::__1::__split_buffer.8", %"struct.std::__1::__split_buffer.8"* %0, i64 0, i32 2
  %4 = load %"class.base::TimeTicks"**, %"class.base::TimeTicks"*** %3, align 8
  %5 = getelementptr inbounds %"struct.std::__1::__split_buffer.8", %"struct.std::__1::__split_buffer.8"* %0, i64 0, i32 3, i32 0, i32 0
  %6 = load %"class.base::TimeTicks"**, %"class.base::TimeTicks"*** %5, align 8
  %7 = icmp eq %"class.base::TimeTicks"** %4, %6
  %8 = ptrtoint %"class.base::TimeTicks"** %6 to i64
  %9 = bitcast %"class.base::TimeTicks"** %4 to i64*
  br i1 %7, label %10, label %148

10:                                               ; preds = %2
  %11 = getelementptr inbounds %"struct.std::__1::__split_buffer.8", %"struct.std::__1::__split_buffer.8"* %0, i64 0, i32 1
  %12 = load %"class.base::TimeTicks"**, %"class.base::TimeTicks"*** %11, align 8
  %13 = getelementptr inbounds %"struct.std::__1::__split_buffer.8", %"struct.std::__1::__split_buffer.8"* %0, i64 0, i32 0
  %14 = load %"class.base::TimeTicks"**, %"class.base::TimeTicks"*** %13, align 8
  %15 = icmp ugt %"class.base::TimeTicks"** %12, %14
  %16 = ptrtoint %"class.base::TimeTicks"** %14 to i64
  br i1 %15, label %17, label %37

17:                                               ; preds = %10
  %18 = ptrtoint %"class.base::TimeTicks"** %12 to i64
  %19 = sub i64 %18, %16
  %20 = ashr exact i64 %19, 3
  %21 = add nsw i64 %20, 1
  %22 = sdiv i64 %21, -2
  %23 = getelementptr inbounds %"class.base::TimeTicks"*, %"class.base::TimeTicks"** %12, i64 %22
  %24 = ptrtoint %"class.base::TimeTicks"** %4 to i64
  %25 = sub i64 %24, %18
  %26 = ashr exact i64 %25, 3
  %27 = icmp eq i64 %25, 0
  br i1 %27, label %32, label %28

28:                                               ; preds = %17
  %29 = bitcast %"class.base::TimeTicks"** %23 to i8*
  %30 = bitcast %"class.base::TimeTicks"** %12 to i8*
  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* align 8 %29, i8* align 8 %30, i64 %25, i1 false) #12
  %31 = load %"class.base::TimeTicks"**, %"class.base::TimeTicks"*** %11, align 8
  br label %32

32:                                               ; preds = %17, %28
  %33 = phi %"class.base::TimeTicks"** [ %12, %17 ], [ %31, %28 ]
  %34 = getelementptr inbounds %"class.base::TimeTicks"*, %"class.base::TimeTicks"** %23, i64 %26
  store %"class.base::TimeTicks"** %34, %"class.base::TimeTicks"*** %3, align 8
  %35 = getelementptr inbounds %"class.base::TimeTicks"*, %"class.base::TimeTicks"** %33, i64 %22
  store %"class.base::TimeTicks"** %35, %"class.base::TimeTicks"*** %11, align 8
  %36 = bitcast %"class.base::TimeTicks"** %34 to i64*
  br label %148

37:                                               ; preds = %10
  %38 = bitcast %"class.base::TimeTicks"*** %5 to i64*
  %39 = bitcast %"struct.std::__1::__split_buffer.8"* %0 to i64*
  %40 = sub i64 %8, %16
  %41 = ashr exact i64 %40, 2
  %42 = icmp eq i64 %40, 0
  %43 = select i1 %42, i64 1, i64 %41
  %44 = icmp ugt i64 %43, 2305843009213693951
  br i1 %44, label %45, label %46

45:                                               ; preds = %37
  tail call void @abort() #13
  unreachable

46:                                               ; preds = %37
  %47 = lshr i64 %43, 2
  %48 = shl i64 %43, 3
  %49 = tail call i8* @_Znwm(i64 %48) #11
  %50 = bitcast i8* %49 to %"class.base::TimeTicks"**
  %51 = ptrtoint i8* %49 to i64
  %52 = getelementptr inbounds %"class.base::TimeTicks"*, %"class.base::TimeTicks"** %50, i64 %47
  %53 = ptrtoint %"class.base::TimeTicks"** %52 to i64
  %54 = getelementptr inbounds %"class.base::TimeTicks"*, %"class.base::TimeTicks"** %50, i64 %43
  %55 = ptrtoint %"class.base::TimeTicks"** %54 to i64
  %56 = ptrtoint %"class.base::TimeTicks"** %12 to i64
  %57 = ptrtoint %"class.base::TimeTicks"** %4 to i64
  %58 = sub i64 %57, %56
  %59 = ashr exact i64 %58, 3
  %60 = getelementptr inbounds %"class.base::TimeTicks"*, %"class.base::TimeTicks"** %52, i64 %59
  %61 = icmp eq i64 %58, 0
  br i1 %61, label %137, label %62

62:                                               ; preds = %46
  %63 = add i64 %58, -8
  %64 = lshr i64 %63, 3
  %65 = add nuw nsw i64 %64, 1
  %66 = and i64 %65, 7
  %67 = icmp eq i64 %66, 0
  br i1 %67, label %83, label %68

68:                                               ; preds = %62, %68
  %69 = phi %"class.base::TimeTicks"** [ %76, %68 ], [ %52, %62 ]
  %70 = phi i64 [ %77, %68 ], [ %53, %62 ]
  %71 = phi %"class.base::TimeTicks"** [ %78, %68 ], [ %12, %62 ]
  %72 = phi i64 [ %79, %68 ], [ %66, %62 ]
  %73 = bitcast %"class.base::TimeTicks"** %71 to i64*
  %74 = load i64, i64* %73, align 8
  %75 = inttoptr i64 %70 to i64*
  store i64 %74, i64* %75, align 8
  %76 = getelementptr inbounds %"class.base::TimeTicks"*, %"class.base::TimeTicks"** %69, i64 1
  %77 = ptrtoint %"class.base::TimeTicks"** %76 to i64
  %78 = getelementptr inbounds %"class.base::TimeTicks"*, %"class.base::TimeTicks"** %71, i64 1
  %79 = add i64 %72, -1
  %80 = icmp eq i64 %79, 0
  br i1 %80, label %81, label %68, !llvm.loop !14

81:                                               ; preds = %68
  %82 = ptrtoint %"class.base::TimeTicks"** %76 to i64
  br label %83

83:                                               ; preds = %62, %81
  %84 = phi %"class.base::TimeTicks"** [ %52, %62 ], [ %76, %81 ]
  %85 = phi i64 [ %53, %62 ], [ %82, %81 ]
  %86 = phi %"class.base::TimeTicks"** [ %12, %62 ], [ %78, %81 ]
  %87 = icmp ult i64 %63, 56
  br i1 %87, label %134, label %88

88:                                               ; preds = %83, %88
  %89 = phi %"class.base::TimeTicks"** [ %130, %88 ], [ %84, %83 ]
  %90 = phi i64 [ %131, %88 ], [ %85, %83 ]
  %91 = phi %"class.base::TimeTicks"** [ %132, %88 ], [ %86, %83 ]
  %92 = bitcast %"class.base::TimeTicks"** %91 to i64*
  %93 = load i64, i64* %92, align 8
  %94 = inttoptr i64 %90 to i64*
  store i64 %93, i64* %94, align 8
  %95 = getelementptr inbounds %"class.base::TimeTicks"*, %"class.base::TimeTicks"** %89, i64 1
  %96 = getelementptr inbounds %"class.base::TimeTicks"*, %"class.base::TimeTicks"** %91, i64 1
  %97 = bitcast %"class.base::TimeTicks"** %96 to i64*
  %98 = load i64, i64* %97, align 8
  %99 = bitcast %"class.base::TimeTicks"** %95 to i64*
  store i64 %98, i64* %99, align 8
  %100 = getelementptr inbounds %"class.base::TimeTicks"*, %"class.base::TimeTicks"** %89, i64 2
  %101 = getelementptr inbounds %"class.base::TimeTicks"*, %"class.base::TimeTicks"** %91, i64 2
  %102 = bitcast %"class.base::TimeTicks"** %101 to i64*
  %103 = load i64, i64* %102, align 8
  %104 = bitcast %"class.base::TimeTicks"** %100 to i64*
  store i64 %103, i64* %104, align 8
  %105 = getelementptr inbounds %"class.base::TimeTicks"*, %"class.base::TimeTicks"** %89, i64 3
  %106 = getelementptr inbounds %"class.base::TimeTicks"*, %"class.base::TimeTicks"** %91, i64 3
  %107 = bitcast %"class.base::TimeTicks"** %106 to i64*
  %108 = load i64, i64* %107, align 8
  %109 = bitcast %"class.base::TimeTicks"** %105 to i64*
  store i64 %108, i64* %109, align 8
  %110 = getelementptr inbounds %"class.base::TimeTicks"*, %"class.base::TimeTicks"** %89, i64 4
  %111 = getelementptr inbounds %"class.base::TimeTicks"*, %"class.base::TimeTicks"** %91, i64 4
  %112 = bitcast %"class.base::TimeTicks"** %111 to i64*
  %113 = load i64, i64* %112, align 8
  %114 = bitcast %"class.base::TimeTicks"** %110 to i64*
  store i64 %113, i64* %114, align 8
  %115 = getelementptr inbounds %"class.base::TimeTicks"*, %"class.base::TimeTicks"** %89, i64 5
  %116 = getelementptr inbounds %"class.base::TimeTicks"*, %"class.base::TimeTicks"** %91, i64 5
  %117 = bitcast %"class.base::TimeTicks"** %116 to i64*
  %118 = load i64, i64* %117, align 8
  %119 = bitcast %"class.base::TimeTicks"** %115 to i64*
  store i64 %118, i64* %119, align 8
  %120 = getelementptr inbounds %"class.base::TimeTicks"*, %"class.base::TimeTicks"** %89, i64 6
  %121 = getelementptr inbounds %"class.base::TimeTicks"*, %"class.base::TimeTicks"** %91, i64 6
  %122 = bitcast %"class.base::TimeTicks"** %121 to i64*
  %123 = load i64, i64* %122, align 8
  %124 = bitcast %"class.base::TimeTicks"** %120 to i64*
  store i64 %123, i64* %124, align 8
  %125 = getelementptr inbounds %"class.base::TimeTicks"*, %"class.base::TimeTicks"** %89, i64 7
  %126 = getelementptr inbounds %"class.base::TimeTicks"*, %"class.base::TimeTicks"** %91, i64 7
  %127 = bitcast %"class.base::TimeTicks"** %126 to i64*
  %128 = load i64, i64* %127, align 8
  %129 = bitcast %"class.base::TimeTicks"** %125 to i64*
  store i64 %128, i64* %129, align 8
  %130 = getelementptr inbounds %"class.base::TimeTicks"*, %"class.base::TimeTicks"** %89, i64 8
  %131 = ptrtoint %"class.base::TimeTicks"** %130 to i64
  %132 = getelementptr inbounds %"class.base::TimeTicks"*, %"class.base::TimeTicks"** %91, i64 8
  %133 = icmp eq %"class.base::TimeTicks"** %60, %130
  br i1 %133, label %134, label %88

134:                                              ; preds = %88, %83
  %135 = ptrtoint %"class.base::TimeTicks"** %60 to i64
  %136 = load %"class.base::TimeTicks"**, %"class.base::TimeTicks"*** %13, align 8
  br label %137

137:                                              ; preds = %46, %134
  %138 = phi %"class.base::TimeTicks"** [ %136, %134 ], [ %14, %46 ]
  %139 = phi i64 [ %135, %134 ], [ %53, %46 ]
  store i64 %51, i64* %39, align 8
  %140 = bitcast %"class.base::TimeTicks"*** %11 to i64*
  store i64 %53, i64* %140, align 8
  %141 = bitcast %"class.base::TimeTicks"*** %3 to i64*
  store i64 %139, i64* %141, align 8
  store i64 %55, i64* %38, align 8
  %142 = icmp eq %"class.base::TimeTicks"** %138, null
  %143 = inttoptr i64 %139 to i64*
  br i1 %142, label %148, label %144

144:                                              ; preds = %137
  %145 = bitcast %"class.base::TimeTicks"** %138 to i8*
  tail call void @_ZdlPv(i8* %145) #11
  %146 = bitcast %"class.base::TimeTicks"*** %3 to i64**
  %147 = load i64*, i64** %146, align 8
  br label %148

148:                                              ; preds = %144, %137, %32, %2
  %149 = phi i64* [ %147, %144 ], [ %143, %137 ], [ %36, %32 ], [ %9, %2 ]
  %150 = bitcast %"class.base::TimeTicks"** %1 to i64*
  %151 = load i64, i64* %150, align 8
  store i64 %151, i64* %149, align 8
  %152 = load %"class.base::TimeTicks"**, %"class.base::TimeTicks"*** %3, align 8
  %153 = getelementptr inbounds %"class.base::TimeTicks"*, %"class.base::TimeTicks"** %152, i64 1
  store %"class.base::TimeTicks"** %153, %"class.base::TimeTicks"*** %3, align 8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__114__split_bufferIPN4base9TimeTicksENS_9allocatorIS3_EEE10push_frontEOS3_(%"struct.std::__1::__split_buffer.8"*, %"class.base::TimeTicks"** dereferenceable(8)) local_unnamed_addr #0 comdat align 2 {
  %3 = getelementptr inbounds %"struct.std::__1::__split_buffer.8", %"struct.std::__1::__split_buffer.8"* %0, i64 0, i32 1
  %4 = load %"class.base::TimeTicks"**, %"class.base::TimeTicks"*** %3, align 8
  %5 = getelementptr inbounds %"struct.std::__1::__split_buffer.8", %"struct.std::__1::__split_buffer.8"* %0, i64 0, i32 0
  %6 = load %"class.base::TimeTicks"**, %"class.base::TimeTicks"*** %5, align 8
  %7 = icmp eq %"class.base::TimeTicks"** %4, %6
  %8 = ptrtoint %"class.base::TimeTicks"** %6 to i64
  br i1 %7, label %9, label %147

9:                                                ; preds = %2
  %10 = getelementptr inbounds %"struct.std::__1::__split_buffer.8", %"struct.std::__1::__split_buffer.8"* %0, i64 0, i32 2
  %11 = load %"class.base::TimeTicks"**, %"class.base::TimeTicks"*** %10, align 8
  %12 = getelementptr inbounds %"struct.std::__1::__split_buffer.8", %"struct.std::__1::__split_buffer.8"* %0, i64 0, i32 3, i32 0, i32 0
  %13 = load %"class.base::TimeTicks"**, %"class.base::TimeTicks"*** %12, align 8
  %14 = icmp ult %"class.base::TimeTicks"** %11, %13
  %15 = bitcast %"class.base::TimeTicks"*** %12 to i64*
  %16 = ptrtoint %"class.base::TimeTicks"** %13 to i64
  br i1 %14, label %17, label %38

17:                                               ; preds = %9
  %18 = ptrtoint %"class.base::TimeTicks"** %11 to i64
  %19 = sub i64 %16, %18
  %20 = ashr exact i64 %19, 3
  %21 = add nsw i64 %20, 1
  %22 = sdiv i64 %21, 2
  %23 = getelementptr inbounds %"class.base::TimeTicks"*, %"class.base::TimeTicks"** %11, i64 %22
  %24 = ptrtoint %"class.base::TimeTicks"** %4 to i64
  %25 = sub i64 %18, %24
  %26 = icmp eq i64 %25, 0
  br i1 %26, label %34, label %27

27:                                               ; preds = %17
  %28 = ashr exact i64 %25, 3
  %29 = sub nsw i64 0, %28
  %30 = getelementptr inbounds %"class.base::TimeTicks"*, %"class.base::TimeTicks"** %23, i64 %29
  %31 = bitcast %"class.base::TimeTicks"** %30 to i8*
  %32 = bitcast %"class.base::TimeTicks"** %4 to i8*
  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* align 8 %31, i8* align 8 %32, i64 %25, i1 false) #12
  %33 = load %"class.base::TimeTicks"**, %"class.base::TimeTicks"*** %10, align 8
  br label %34

34:                                               ; preds = %17, %27
  %35 = phi %"class.base::TimeTicks"** [ %33, %27 ], [ %11, %17 ]
  %36 = phi %"class.base::TimeTicks"** [ %30, %27 ], [ %23, %17 ]
  store %"class.base::TimeTicks"** %36, %"class.base::TimeTicks"*** %3, align 8
  %37 = getelementptr inbounds %"class.base::TimeTicks"*, %"class.base::TimeTicks"** %35, i64 %22
  store %"class.base::TimeTicks"** %37, %"class.base::TimeTicks"*** %10, align 8
  br label %147

38:                                               ; preds = %9
  %39 = bitcast %"struct.std::__1::__split_buffer.8"* %0 to i64*
  %40 = sub i64 %16, %8
  %41 = ashr exact i64 %40, 2
  %42 = icmp eq i64 %40, 0
  %43 = select i1 %42, i64 1, i64 %41
  %44 = icmp ugt i64 %43, 2305843009213693951
  br i1 %44, label %45, label %46

45:                                               ; preds = %38
  tail call void @abort() #13
  unreachable

46:                                               ; preds = %38
  %47 = add nuw nsw i64 %43, 3
  %48 = lshr i64 %47, 2
  %49 = shl i64 %43, 3
  %50 = tail call i8* @_Znwm(i64 %49) #11
  %51 = bitcast i8* %50 to %"class.base::TimeTicks"**
  %52 = ptrtoint i8* %50 to i64
  %53 = getelementptr inbounds %"class.base::TimeTicks"*, %"class.base::TimeTicks"** %51, i64 %48
  %54 = ptrtoint %"class.base::TimeTicks"** %53 to i64
  %55 = getelementptr inbounds %"class.base::TimeTicks"*, %"class.base::TimeTicks"** %51, i64 %43
  %56 = ptrtoint %"class.base::TimeTicks"** %55 to i64
  %57 = ptrtoint %"class.base::TimeTicks"** %4 to i64
  %58 = ptrtoint %"class.base::TimeTicks"** %11 to i64
  %59 = sub i64 %58, %57
  %60 = ashr exact i64 %59, 3
  %61 = getelementptr inbounds %"class.base::TimeTicks"*, %"class.base::TimeTicks"** %53, i64 %60
  %62 = icmp eq i64 %59, 0
  br i1 %62, label %138, label %63

63:                                               ; preds = %46
  %64 = add i64 %59, -8
  %65 = lshr i64 %64, 3
  %66 = add nuw nsw i64 %65, 1
  %67 = and i64 %66, 7
  %68 = icmp eq i64 %67, 0
  br i1 %68, label %84, label %69

69:                                               ; preds = %63, %69
  %70 = phi %"class.base::TimeTicks"** [ %77, %69 ], [ %53, %63 ]
  %71 = phi i64 [ %78, %69 ], [ %54, %63 ]
  %72 = phi %"class.base::TimeTicks"** [ %79, %69 ], [ %4, %63 ]
  %73 = phi i64 [ %80, %69 ], [ %67, %63 ]
  %74 = bitcast %"class.base::TimeTicks"** %72 to i64*
  %75 = load i64, i64* %74, align 8
  %76 = inttoptr i64 %71 to i64*
  store i64 %75, i64* %76, align 8
  %77 = getelementptr inbounds %"class.base::TimeTicks"*, %"class.base::TimeTicks"** %70, i64 1
  %78 = ptrtoint %"class.base::TimeTicks"** %77 to i64
  %79 = getelementptr inbounds %"class.base::TimeTicks"*, %"class.base::TimeTicks"** %72, i64 1
  %80 = add i64 %73, -1
  %81 = icmp eq i64 %80, 0
  br i1 %81, label %82, label %69, !llvm.loop !15

82:                                               ; preds = %69
  %83 = ptrtoint %"class.base::TimeTicks"** %77 to i64
  br label %84

84:                                               ; preds = %63, %82
  %85 = phi %"class.base::TimeTicks"** [ %53, %63 ], [ %77, %82 ]
  %86 = phi i64 [ %54, %63 ], [ %83, %82 ]
  %87 = phi %"class.base::TimeTicks"** [ %4, %63 ], [ %79, %82 ]
  %88 = icmp ult i64 %64, 56
  br i1 %88, label %135, label %89

89:                                               ; preds = %84, %89
  %90 = phi %"class.base::TimeTicks"** [ %131, %89 ], [ %85, %84 ]
  %91 = phi i64 [ %132, %89 ], [ %86, %84 ]
  %92 = phi %"class.base::TimeTicks"** [ %133, %89 ], [ %87, %84 ]
  %93 = bitcast %"class.base::TimeTicks"** %92 to i64*
  %94 = load i64, i64* %93, align 8
  %95 = inttoptr i64 %91 to i64*
  store i64 %94, i64* %95, align 8
  %96 = getelementptr inbounds %"class.base::TimeTicks"*, %"class.base::TimeTicks"** %90, i64 1
  %97 = getelementptr inbounds %"class.base::TimeTicks"*, %"class.base::TimeTicks"** %92, i64 1
  %98 = bitcast %"class.base::TimeTicks"** %97 to i64*
  %99 = load i64, i64* %98, align 8
  %100 = bitcast %"class.base::TimeTicks"** %96 to i64*
  store i64 %99, i64* %100, align 8
  %101 = getelementptr inbounds %"class.base::TimeTicks"*, %"class.base::TimeTicks"** %90, i64 2
  %102 = getelementptr inbounds %"class.base::TimeTicks"*, %"class.base::TimeTicks"** %92, i64 2
  %103 = bitcast %"class.base::TimeTicks"** %102 to i64*
  %104 = load i64, i64* %103, align 8
  %105 = bitcast %"class.base::TimeTicks"** %101 to i64*
  store i64 %104, i64* %105, align 8
  %106 = getelementptr inbounds %"class.base::TimeTicks"*, %"class.base::TimeTicks"** %90, i64 3
  %107 = getelementptr inbounds %"class.base::TimeTicks"*, %"class.base::TimeTicks"** %92, i64 3
  %108 = bitcast %"class.base::TimeTicks"** %107 to i64*
  %109 = load i64, i64* %108, align 8
  %110 = bitcast %"class.base::TimeTicks"** %106 to i64*
  store i64 %109, i64* %110, align 8
  %111 = getelementptr inbounds %"class.base::TimeTicks"*, %"class.base::TimeTicks"** %90, i64 4
  %112 = getelementptr inbounds %"class.base::TimeTicks"*, %"class.base::TimeTicks"** %92, i64 4
  %113 = bitcast %"class.base::TimeTicks"** %112 to i64*
  %114 = load i64, i64* %113, align 8
  %115 = bitcast %"class.base::TimeTicks"** %111 to i64*
  store i64 %114, i64* %115, align 8
  %116 = getelementptr inbounds %"class.base::TimeTicks"*, %"class.base::TimeTicks"** %90, i64 5
  %117 = getelementptr inbounds %"class.base::TimeTicks"*, %"class.base::TimeTicks"** %92, i64 5
  %118 = bitcast %"class.base::TimeTicks"** %117 to i64*
  %119 = load i64, i64* %118, align 8
  %120 = bitcast %"class.base::TimeTicks"** %116 to i64*
  store i64 %119, i64* %120, align 8
  %121 = getelementptr inbounds %"class.base::TimeTicks"*, %"class.base::TimeTicks"** %90, i64 6
  %122 = getelementptr inbounds %"class.base::TimeTicks"*, %"class.base::TimeTicks"** %92, i64 6
  %123 = bitcast %"class.base::TimeTicks"** %122 to i64*
  %124 = load i64, i64* %123, align 8
  %125 = bitcast %"class.base::TimeTicks"** %121 to i64*
  store i64 %124, i64* %125, align 8
  %126 = getelementptr inbounds %"class.base::TimeTicks"*, %"class.base::TimeTicks"** %90, i64 7
  %127 = getelementptr inbounds %"class.base::TimeTicks"*, %"class.base::TimeTicks"** %92, i64 7
  %128 = bitcast %"class.base::TimeTicks"** %127 to i64*
  %129 = load i64, i64* %128, align 8
  %130 = bitcast %"class.base::TimeTicks"** %126 to i64*
  store i64 %129, i64* %130, align 8
  %131 = getelementptr inbounds %"class.base::TimeTicks"*, %"class.base::TimeTicks"** %90, i64 8
  %132 = ptrtoint %"class.base::TimeTicks"** %131 to i64
  %133 = getelementptr inbounds %"class.base::TimeTicks"*, %"class.base::TimeTicks"** %92, i64 8
  %134 = icmp eq %"class.base::TimeTicks"** %61, %131
  br i1 %134, label %135, label %89

135:                                              ; preds = %89, %84
  %136 = ptrtoint %"class.base::TimeTicks"** %61 to i64
  %137 = load %"class.base::TimeTicks"**, %"class.base::TimeTicks"*** %5, align 8
  br label %138

138:                                              ; preds = %46, %135
  %139 = phi %"class.base::TimeTicks"** [ %137, %135 ], [ %4, %46 ]
  %140 = phi i64 [ %136, %135 ], [ %54, %46 ]
  store i64 %52, i64* %39, align 8
  %141 = bitcast %"class.base::TimeTicks"*** %3 to i64*
  store i64 %54, i64* %141, align 8
  %142 = bitcast %"class.base::TimeTicks"*** %10 to i64*
  store i64 %140, i64* %142, align 8
  store i64 %56, i64* %15, align 8
  %143 = icmp eq %"class.base::TimeTicks"** %139, null
  br i1 %143, label %147, label %144

144:                                              ; preds = %138
  %145 = bitcast %"class.base::TimeTicks"** %139 to i8*
  tail call void @_ZdlPv(i8* %145) #11
  %146 = load %"class.base::TimeTicks"**, %"class.base::TimeTicks"*** %3, align 8
  br label %147

147:                                              ; preds = %144, %138, %34, %2
  %148 = phi %"class.base::TimeTicks"** [ %146, %144 ], [ %53, %138 ], [ %36, %34 ], [ %4, %2 ]
  %149 = getelementptr inbounds %"class.base::TimeTicks"*, %"class.base::TimeTicks"** %148, i64 -1
  %150 = bitcast %"class.base::TimeTicks"** %1 to i64*
  %151 = load i64, i64* %150, align 8
  %152 = bitcast %"class.base::TimeTicks"** %149 to i64*
  store i64 %151, i64* %152, align 8
  %153 = load %"class.base::TimeTicks"**, %"class.base::TimeTicks"*** %3, align 8
  %154 = getelementptr inbounds %"class.base::TimeTicks"*, %"class.base::TimeTicks"** %153, i64 -1
  store %"class.base::TimeTicks"** %154, %"class.base::TimeTicks"*** %3, align 8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__114__split_bufferIPN4base9TimeTicksERNS_9allocatorIS3_EEE10push_frontERKS3_(%"struct.std::__1::__split_buffer.32"*, %"class.base::TimeTicks"** dereferenceable(8)) local_unnamed_addr #0 comdat align 2 {
  %3 = getelementptr inbounds %"struct.std::__1::__split_buffer.32", %"struct.std::__1::__split_buffer.32"* %0, i64 0, i32 1
  %4 = load %"class.base::TimeTicks"**, %"class.base::TimeTicks"*** %3, align 8
  %5 = getelementptr inbounds %"struct.std::__1::__split_buffer.32", %"struct.std::__1::__split_buffer.32"* %0, i64 0, i32 0
  %6 = load %"class.base::TimeTicks"**, %"class.base::TimeTicks"*** %5, align 8
  %7 = icmp eq %"class.base::TimeTicks"** %4, %6
  %8 = ptrtoint %"class.base::TimeTicks"** %6 to i64
  br i1 %7, label %9, label %147

9:                                                ; preds = %2
  %10 = getelementptr inbounds %"struct.std::__1::__split_buffer.32", %"struct.std::__1::__split_buffer.32"* %0, i64 0, i32 2
  %11 = load %"class.base::TimeTicks"**, %"class.base::TimeTicks"*** %10, align 8
  %12 = getelementptr inbounds %"struct.std::__1::__split_buffer.32", %"struct.std::__1::__split_buffer.32"* %0, i64 0, i32 3, i32 0, i32 0
  %13 = load %"class.base::TimeTicks"**, %"class.base::TimeTicks"*** %12, align 8
  %14 = icmp ult %"class.base::TimeTicks"** %11, %13
  %15 = bitcast %"class.base::TimeTicks"*** %12 to i64*
  %16 = ptrtoint %"class.base::TimeTicks"** %13 to i64
  br i1 %14, label %17, label %38

17:                                               ; preds = %9
  %18 = ptrtoint %"class.base::TimeTicks"** %11 to i64
  %19 = sub i64 %16, %18
  %20 = ashr exact i64 %19, 3
  %21 = add nsw i64 %20, 1
  %22 = sdiv i64 %21, 2
  %23 = getelementptr inbounds %"class.base::TimeTicks"*, %"class.base::TimeTicks"** %11, i64 %22
  %24 = ptrtoint %"class.base::TimeTicks"** %4 to i64
  %25 = sub i64 %18, %24
  %26 = icmp eq i64 %25, 0
  br i1 %26, label %34, label %27

27:                                               ; preds = %17
  %28 = ashr exact i64 %25, 3
  %29 = sub nsw i64 0, %28
  %30 = getelementptr inbounds %"class.base::TimeTicks"*, %"class.base::TimeTicks"** %23, i64 %29
  %31 = bitcast %"class.base::TimeTicks"** %30 to i8*
  %32 = bitcast %"class.base::TimeTicks"** %4 to i8*
  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* align 8 %31, i8* align 8 %32, i64 %25, i1 false) #12
  %33 = load %"class.base::TimeTicks"**, %"class.base::TimeTicks"*** %10, align 8
  br label %34

34:                                               ; preds = %17, %27
  %35 = phi %"class.base::TimeTicks"** [ %33, %27 ], [ %11, %17 ]
  %36 = phi %"class.base::TimeTicks"** [ %30, %27 ], [ %23, %17 ]
  store %"class.base::TimeTicks"** %36, %"class.base::TimeTicks"*** %3, align 8
  %37 = getelementptr inbounds %"class.base::TimeTicks"*, %"class.base::TimeTicks"** %35, i64 %22
  store %"class.base::TimeTicks"** %37, %"class.base::TimeTicks"*** %10, align 8
  br label %147

38:                                               ; preds = %9
  %39 = bitcast %"struct.std::__1::__split_buffer.32"* %0 to i64*
  %40 = sub i64 %16, %8
  %41 = ashr exact i64 %40, 2
  %42 = icmp eq i64 %40, 0
  %43 = select i1 %42, i64 1, i64 %41
  %44 = icmp ugt i64 %43, 2305843009213693951
  br i1 %44, label %45, label %46

45:                                               ; preds = %38
  tail call void @abort() #13
  unreachable

46:                                               ; preds = %38
  %47 = add nuw nsw i64 %43, 3
  %48 = lshr i64 %47, 2
  %49 = shl i64 %43, 3
  %50 = tail call i8* @_Znwm(i64 %49) #11
  %51 = bitcast i8* %50 to %"class.base::TimeTicks"**
  %52 = ptrtoint i8* %50 to i64
  %53 = getelementptr inbounds %"class.base::TimeTicks"*, %"class.base::TimeTicks"** %51, i64 %48
  %54 = ptrtoint %"class.base::TimeTicks"** %53 to i64
  %55 = getelementptr inbounds %"class.base::TimeTicks"*, %"class.base::TimeTicks"** %51, i64 %43
  %56 = ptrtoint %"class.base::TimeTicks"** %55 to i64
  %57 = ptrtoint %"class.base::TimeTicks"** %4 to i64
  %58 = ptrtoint %"class.base::TimeTicks"** %11 to i64
  %59 = sub i64 %58, %57
  %60 = ashr exact i64 %59, 3
  %61 = getelementptr inbounds %"class.base::TimeTicks"*, %"class.base::TimeTicks"** %53, i64 %60
  %62 = icmp eq i64 %59, 0
  br i1 %62, label %138, label %63

63:                                               ; preds = %46
  %64 = add i64 %59, -8
  %65 = lshr i64 %64, 3
  %66 = add nuw nsw i64 %65, 1
  %67 = and i64 %66, 7
  %68 = icmp eq i64 %67, 0
  br i1 %68, label %84, label %69

69:                                               ; preds = %63, %69
  %70 = phi %"class.base::TimeTicks"** [ %77, %69 ], [ %53, %63 ]
  %71 = phi i64 [ %78, %69 ], [ %54, %63 ]
  %72 = phi %"class.base::TimeTicks"** [ %79, %69 ], [ %4, %63 ]
  %73 = phi i64 [ %80, %69 ], [ %67, %63 ]
  %74 = bitcast %"class.base::TimeTicks"** %72 to i64*
  %75 = load i64, i64* %74, align 8
  %76 = inttoptr i64 %71 to i64*
  store i64 %75, i64* %76, align 8
  %77 = getelementptr inbounds %"class.base::TimeTicks"*, %"class.base::TimeTicks"** %70, i64 1
  %78 = ptrtoint %"class.base::TimeTicks"** %77 to i64
  %79 = getelementptr inbounds %"class.base::TimeTicks"*, %"class.base::TimeTicks"** %72, i64 1
  %80 = add i64 %73, -1
  %81 = icmp eq i64 %80, 0
  br i1 %81, label %82, label %69, !llvm.loop !16

82:                                               ; preds = %69
  %83 = ptrtoint %"class.base::TimeTicks"** %77 to i64
  br label %84

84:                                               ; preds = %63, %82
  %85 = phi %"class.base::TimeTicks"** [ %53, %63 ], [ %77, %82 ]
  %86 = phi i64 [ %54, %63 ], [ %83, %82 ]
  %87 = phi %"class.base::TimeTicks"** [ %4, %63 ], [ %79, %82 ]
  %88 = icmp ult i64 %64, 56
  br i1 %88, label %135, label %89

89:                                               ; preds = %84, %89
  %90 = phi %"class.base::TimeTicks"** [ %131, %89 ], [ %85, %84 ]
  %91 = phi i64 [ %132, %89 ], [ %86, %84 ]
  %92 = phi %"class.base::TimeTicks"** [ %133, %89 ], [ %87, %84 ]
  %93 = bitcast %"class.base::TimeTicks"** %92 to i64*
  %94 = load i64, i64* %93, align 8
  %95 = inttoptr i64 %91 to i64*
  store i64 %94, i64* %95, align 8
  %96 = getelementptr inbounds %"class.base::TimeTicks"*, %"class.base::TimeTicks"** %90, i64 1
  %97 = getelementptr inbounds %"class.base::TimeTicks"*, %"class.base::TimeTicks"** %92, i64 1
  %98 = bitcast %"class.base::TimeTicks"** %97 to i64*
  %99 = load i64, i64* %98, align 8
  %100 = bitcast %"class.base::TimeTicks"** %96 to i64*
  store i64 %99, i64* %100, align 8
  %101 = getelementptr inbounds %"class.base::TimeTicks"*, %"class.base::TimeTicks"** %90, i64 2
  %102 = getelementptr inbounds %"class.base::TimeTicks"*, %"class.base::TimeTicks"** %92, i64 2
  %103 = bitcast %"class.base::TimeTicks"** %102 to i64*
  %104 = load i64, i64* %103, align 8
  %105 = bitcast %"class.base::TimeTicks"** %101 to i64*
  store i64 %104, i64* %105, align 8
  %106 = getelementptr inbounds %"class.base::TimeTicks"*, %"class.base::TimeTicks"** %90, i64 3
  %107 = getelementptr inbounds %"class.base::TimeTicks"*, %"class.base::TimeTicks"** %92, i64 3
  %108 = bitcast %"class.base::TimeTicks"** %107 to i64*
  %109 = load i64, i64* %108, align 8
  %110 = bitcast %"class.base::TimeTicks"** %106 to i64*
  store i64 %109, i64* %110, align 8
  %111 = getelementptr inbounds %"class.base::TimeTicks"*, %"class.base::TimeTicks"** %90, i64 4
  %112 = getelementptr inbounds %"class.base::TimeTicks"*, %"class.base::TimeTicks"** %92, i64 4
  %113 = bitcast %"class.base::TimeTicks"** %112 to i64*
  %114 = load i64, i64* %113, align 8
  %115 = bitcast %"class.base::TimeTicks"** %111 to i64*
  store i64 %114, i64* %115, align 8
  %116 = getelementptr inbounds %"class.base::TimeTicks"*, %"class.base::TimeTicks"** %90, i64 5
  %117 = getelementptr inbounds %"class.base::TimeTicks"*, %"class.base::TimeTicks"** %92, i64 5
  %118 = bitcast %"class.base::TimeTicks"** %117 to i64*
  %119 = load i64, i64* %118, align 8
  %120 = bitcast %"class.base::TimeTicks"** %116 to i64*
  store i64 %119, i64* %120, align 8
  %121 = getelementptr inbounds %"class.base::TimeTicks"*, %"class.base::TimeTicks"** %90, i64 6
  %122 = getelementptr inbounds %"class.base::TimeTicks"*, %"class.base::TimeTicks"** %92, i64 6
  %123 = bitcast %"class.base::TimeTicks"** %122 to i64*
  %124 = load i64, i64* %123, align 8
  %125 = bitcast %"class.base::TimeTicks"** %121 to i64*
  store i64 %124, i64* %125, align 8
  %126 = getelementptr inbounds %"class.base::TimeTicks"*, %"class.base::TimeTicks"** %90, i64 7
  %127 = getelementptr inbounds %"class.base::TimeTicks"*, %"class.base::TimeTicks"** %92, i64 7
  %128 = bitcast %"class.base::TimeTicks"** %127 to i64*
  %129 = load i64, i64* %128, align 8
  %130 = bitcast %"class.base::TimeTicks"** %126 to i64*
  store i64 %129, i64* %130, align 8
  %131 = getelementptr inbounds %"class.base::TimeTicks"*, %"class.base::TimeTicks"** %90, i64 8
  %132 = ptrtoint %"class.base::TimeTicks"** %131 to i64
  %133 = getelementptr inbounds %"class.base::TimeTicks"*, %"class.base::TimeTicks"** %92, i64 8
  %134 = icmp eq %"class.base::TimeTicks"** %61, %131
  br i1 %134, label %135, label %89

135:                                              ; preds = %89, %84
  %136 = ptrtoint %"class.base::TimeTicks"** %61 to i64
  %137 = load %"class.base::TimeTicks"**, %"class.base::TimeTicks"*** %5, align 8
  br label %138

138:                                              ; preds = %46, %135
  %139 = phi %"class.base::TimeTicks"** [ %137, %135 ], [ %4, %46 ]
  %140 = phi i64 [ %136, %135 ], [ %54, %46 ]
  store i64 %52, i64* %39, align 8
  %141 = bitcast %"class.base::TimeTicks"*** %3 to i64*
  store i64 %54, i64* %141, align 8
  %142 = bitcast %"class.base::TimeTicks"*** %10 to i64*
  store i64 %140, i64* %142, align 8
  store i64 %56, i64* %15, align 8
  %143 = icmp eq %"class.base::TimeTicks"** %139, null
  br i1 %143, label %147, label %144

144:                                              ; preds = %138
  %145 = bitcast %"class.base::TimeTicks"** %139 to i8*
  tail call void @_ZdlPv(i8* %145) #11
  %146 = load %"class.base::TimeTicks"**, %"class.base::TimeTicks"*** %3, align 8
  br label %147

147:                                              ; preds = %144, %138, %34, %2
  %148 = phi %"class.base::TimeTicks"** [ %146, %144 ], [ %53, %138 ], [ %36, %34 ], [ %4, %2 ]
  %149 = getelementptr inbounds %"class.base::TimeTicks"*, %"class.base::TimeTicks"** %148, i64 -1
  %150 = bitcast %"class.base::TimeTicks"** %1 to i64*
  %151 = load i64, i64* %150, align 8
  %152 = bitcast %"class.base::TimeTicks"** %149 to i64*
  store i64 %151, i64* %152, align 8
  %153 = load %"class.base::TimeTicks"**, %"class.base::TimeTicks"*** %3, align 8
  %154 = getelementptr inbounds %"class.base::TimeTicks"*, %"class.base::TimeTicks"** %153, i64 -1
  store %"class.base::TimeTicks"** %154, %"class.base::TimeTicks"*** %3, align 8
  ret void
}

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { norecurse nounwind readnone ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { argmemonly nounwind }
attributes #4 = { norecurse nounwind readonly ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { nounwind readonly ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #8 = { nounwind readnone speculatable }
attributes #9 = { noreturn nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #10 = { nobuiltin nofree "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #11 = { builtin nounwind }
attributes #12 = { nounwind }
attributes #13 = { noreturn nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{!3}
!3 = distinct !{!3, !4, !"_ZNK2ui21LeastSquaresPredictor10GetXMatrixEv: argument 0"}
!4 = distinct !{!4, !"_ZNK2ui21LeastSquaresPredictor10GetXMatrixEv"}
!5 = !{!"branch_weights", i32 2000, i32 2002}
!6 = distinct !{!6, !7}
!7 = !{!"llvm.loop.unroll.disable"}
!8 = distinct !{!8, !7}
!9 = distinct !{!9, !7}
!10 = distinct !{!10, !7}
!11 = distinct !{!11, !7}
!12 = distinct !{!12, !7}
!13 = distinct !{!13, !7}
!14 = distinct !{!14, !7}
!15 = distinct !{!15, !7}
!16 = distinct !{!16, !7}
