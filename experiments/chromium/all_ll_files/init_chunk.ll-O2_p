; ModuleID = '../../third_party/webrtc/net/dcsctp/packet/chunk/init_chunk.cc'
source_filename = "../../third_party/webrtc/net/dcsctp/packet/chunk/init_chunk.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"class.absl::optional" = type { %"class.absl::optional_internal::optional_data" }
%"class.absl::optional_internal::optional_data" = type { %"class.absl::optional_internal::optional_data_base" }
%"class.absl::optional_internal::optional_data_base" = type { %"class.absl::optional_internal::optional_data_dtor_base" }
%"class.absl::optional_internal::optional_data_dtor_base" = type { i8, %union.anon }
%union.anon = type { %"class.dcsctp::InitChunk" }
%"class.dcsctp::InitChunk" = type { %"class.dcsctp::Chunk", %"class.dcsctp::StrongAlias", i32, i16, i16, %"class.dcsctp::StrongAlias.0", %"class.dcsctp::Parameters" }
%"class.dcsctp::Chunk" = type { i32 (...)** }
%"class.dcsctp::StrongAlias" = type { i32 }
%"class.dcsctp::StrongAlias.0" = type { i32 }
%"class.dcsctp::Parameters" = type { %"class.std::__1::vector" }
%"class.std::__1::vector" = type { %"class.std::__1::__vector_base" }
%"class.std::__1::__vector_base" = type { i8*, i8*, %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { i8* }
%"class.absl::optional.11" = type { %"class.absl::optional_internal::optional_data.12" }
%"class.absl::optional_internal::optional_data.12" = type { %"class.absl::optional_internal::optional_data_base.13" }
%"class.absl::optional_internal::optional_data_base.13" = type { %"class.absl::optional_internal::optional_data_dtor_base.14" }
%"class.absl::optional_internal::optional_data_dtor_base.14" = type { i8, %union.anon.15 }
%union.anon.15 = type { %"class.dcsctp::Parameters" }
%"class.std::__1::basic_string" = type { %"class.std::__1::__compressed_pair.18" }
%"class.std::__1::__compressed_pair.18" = type { %"struct.std::__1::__compressed_pair_elem.19" }
%"struct.std::__1::__compressed_pair_elem.19" = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" = type { %union.anon.20 }
%union.anon.20 = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" = type { i8*, i64, i64 }
%"class.std::__1::__vector_base_common" = type { i8 }

$_ZN6dcsctp9InitChunkD2Ev = comdat any

$_ZN6dcsctp9InitChunkD0Ev = comdat any

$_ZNSt3__16vectorIhNS_9allocatorIhEEE8__appendEm = comdat any

@_ZN6dcsctp9InitChunk5kTypeE = hidden local_unnamed_addr constant i32 1, align 4
@.str = private unnamed_addr constant [41 x i8] c"INIT, initiate_tag=0x%0x, initial_tsn=%u\00", align 1
@_ZTVN6dcsctp9InitChunkE = hidden unnamed_addr constant { [6 x i8*] } { [6 x i8*] [i8* null, i8* null, i8* bitcast (void (%"class.dcsctp::InitChunk"*)* @_ZN6dcsctp9InitChunkD2Ev to i8*), i8* bitcast (void (%"class.dcsctp::InitChunk"*)* @_ZN6dcsctp9InitChunkD0Ev to i8*), i8* bitcast (void (%"class.dcsctp::InitChunk"*, %"class.std::__1::vector"*)* @_ZNK6dcsctp9InitChunk11SerializeToERNSt3__16vectorIhNS1_9allocatorIhEEEE to i8*), i8* bitcast (void (%"class.std::__1::basic_string"*, %"class.dcsctp::InitChunk"*)* @_ZNK6dcsctp9InitChunk8ToStringEv to i8*)] }, align 8

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN6dcsctp9InitChunk5ParseEN3rtc9ArrayViewIKhLln4711EEE(%"class.absl::optional"* noalias nocapture sret, i8*, i64) local_unnamed_addr #0 align 2 {
  %4 = alloca %"class.absl::optional.11", align 8
  %5 = icmp eq i64 %2, 0
  %6 = select i1 %5, i8* null, i8* %1
  %7 = icmp ult i64 %2, 20
  br i1 %7, label %8, label %9

8:                                                ; preds = %3
  tail call void @_ZN6dcsctp14tlv_trait_impl17ReportInvalidSizeEmm(i64 %2, i64 20) #7, !noalias !2
  br label %32

9:                                                ; preds = %3
  %10 = load i8, i8* %6, align 1, !noalias !2
  %11 = icmp eq i8 %10, 1
  br i1 %11, label %14, label %12

12:                                               ; preds = %9
  %13 = zext i8 %10 to i32
  tail call void @_ZN6dcsctp14tlv_trait_impl17ReportInvalidTypeEii(i32 %13, i32 1) #7, !noalias !2
  br label %32

14:                                               ; preds = %9
  %15 = getelementptr inbounds i8, i8* %6, i64 2
  %16 = load i8, i8* %15, align 1, !noalias !2
  %17 = zext i8 %16 to i16
  %18 = shl nuw i16 %17, 8
  %19 = getelementptr inbounds i8, i8* %6, i64 3
  %20 = load i8, i8* %19, align 1, !noalias !2
  %21 = zext i8 %20 to i16
  %22 = or i16 %18, %21
  %23 = zext i16 %22 to i64
  %24 = icmp ugt i64 %23, %2
  %25 = icmp ult i16 %22, 20
  %26 = or i1 %25, %24
  br i1 %26, label %27, label %28

27:                                               ; preds = %14
  tail call void @_ZN6dcsctp14tlv_trait_impl32ReportInvalidVariableLengthFieldEmm(i64 %23, i64 %2) #7, !noalias !2
  br label %32

28:                                               ; preds = %14
  %29 = sub i64 %2, %23
  %30 = icmp ugt i64 %29, 3
  br i1 %30, label %31, label %36

31:                                               ; preds = %28
  tail call void @_ZN6dcsctp14tlv_trait_impl20ReportInvalidPaddingEm(i64 %29) #7, !noalias !2
  br label %32

32:                                               ; preds = %8, %27, %31, %12
  %33 = getelementptr inbounds %"class.absl::optional", %"class.absl::optional"* %0, i64 0, i32 0, i32 0, i32 0, i32 0
  store i8 0, i8* %33, align 8
  %34 = getelementptr inbounds %"class.absl::optional", %"class.absl::optional"* %0, i64 0, i32 0, i32 0, i32 0, i32 1
  %35 = bitcast %union.anon* %34 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %35, i8 0, i64 48, i1 false) #7
  br label %149

36:                                               ; preds = %28
  %37 = getelementptr inbounds i8, i8* %6, i64 4
  %38 = load i8, i8* %37, align 1
  %39 = getelementptr inbounds i8, i8* %6, i64 5
  %40 = load i8, i8* %39, align 1
  %41 = getelementptr inbounds i8, i8* %6, i64 6
  %42 = load i8, i8* %41, align 1
  %43 = getelementptr inbounds i8, i8* %6, i64 7
  %44 = load i8, i8* %43, align 1
  %45 = getelementptr inbounds i8, i8* %6, i64 8
  %46 = load i8, i8* %45, align 1
  %47 = getelementptr inbounds i8, i8* %6, i64 9
  %48 = load i8, i8* %47, align 1
  %49 = getelementptr inbounds i8, i8* %6, i64 10
  %50 = load i8, i8* %49, align 1
  %51 = getelementptr inbounds i8, i8* %6, i64 11
  %52 = load i8, i8* %51, align 1
  %53 = getelementptr inbounds i8, i8* %6, i64 12
  %54 = load i8, i8* %53, align 1
  %55 = getelementptr inbounds i8, i8* %6, i64 13
  %56 = load i8, i8* %55, align 1
  %57 = getelementptr inbounds i8, i8* %6, i64 14
  %58 = load i8, i8* %57, align 1
  %59 = getelementptr inbounds i8, i8* %6, i64 15
  %60 = load i8, i8* %59, align 1
  %61 = getelementptr inbounds i8, i8* %6, i64 16
  %62 = load i8, i8* %61, align 1
  %63 = getelementptr inbounds i8, i8* %6, i64 17
  %64 = load i8, i8* %63, align 1
  %65 = getelementptr inbounds i8, i8* %6, i64 18
  %66 = load i8, i8* %65, align 1
  %67 = getelementptr inbounds i8, i8* %6, i64 19
  %68 = load i8, i8* %67, align 1
  %69 = getelementptr inbounds %"class.absl::optional.11", %"class.absl::optional.11"* %4, i64 0, i32 0, i32 0, i32 0, i32 0
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %69) #7
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %69, i8 -86, i64 32, i1 false)
  %70 = add nsw i64 %23, -20
  %71 = icmp ugt i16 %22, 20
  %72 = getelementptr inbounds i8, i8* %6, i64 20
  %73 = icmp eq i64 %70, 0
  %74 = select i1 %73, i8* null, i8* %72
  %75 = select i1 %71, i64 %70, i64 0
  %76 = select i1 %71, i8* %74, i8* null
  call void @_ZN6dcsctp10Parameters5ParseEN3rtc9ArrayViewIKhLln4711EEE(%"class.absl::optional.11"* nonnull sret %4, i8* %76, i64 %75) #7
  %77 = load i8, i8* %69, align 8, !range !5
  %78 = icmp eq i8 %77, 0
  br i1 %78, label %79, label %83

79:                                               ; preds = %36
  %80 = getelementptr inbounds %"class.absl::optional", %"class.absl::optional"* %0, i64 0, i32 0, i32 0, i32 0, i32 1
  %81 = bitcast %union.anon* %80 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %81, i8 0, i64 48, i1 false) #7
  %82 = getelementptr inbounds %"class.absl::optional", %"class.absl::optional"* %0, i64 0, i32 0, i32 0, i32 0, i32 0
  br label %147

83:                                               ; preds = %36
  %84 = zext i8 %64 to i32
  %85 = shl nuw nsw i32 %84, 16
  %86 = zext i8 %62 to i32
  %87 = shl nuw i32 %86, 24
  %88 = or i32 %85, %87
  %89 = zext i8 %66 to i32
  %90 = shl nuw nsw i32 %89, 8
  %91 = or i32 %88, %90
  %92 = zext i8 %68 to i32
  %93 = or i32 %91, %92
  %94 = zext i8 %58 to i16
  %95 = shl nuw i16 %94, 8
  %96 = zext i8 %60 to i16
  %97 = or i16 %95, %96
  %98 = zext i8 %54 to i16
  %99 = shl nuw i16 %98, 8
  %100 = zext i8 %56 to i16
  %101 = or i16 %99, %100
  %102 = zext i8 %48 to i32
  %103 = shl nuw nsw i32 %102, 16
  %104 = zext i8 %46 to i32
  %105 = shl nuw i32 %104, 24
  %106 = or i32 %103, %105
  %107 = zext i8 %50 to i32
  %108 = shl nuw nsw i32 %107, 8
  %109 = or i32 %106, %108
  %110 = zext i8 %52 to i32
  %111 = or i32 %109, %110
  %112 = zext i8 %40 to i32
  %113 = shl nuw nsw i32 %112, 16
  %114 = zext i8 %38 to i32
  %115 = shl nuw i32 %114, 24
  %116 = or i32 %113, %115
  %117 = zext i8 %42 to i32
  %118 = shl nuw nsw i32 %117, 8
  %119 = or i32 %116, %118
  %120 = zext i8 %44 to i32
  %121 = or i32 %119, %120
  %122 = getelementptr inbounds %"class.absl::optional.11", %"class.absl::optional.11"* %4, i64 0, i32 0, i32 0, i32 0, i32 1, i32 0
  %123 = bitcast %"class.dcsctp::Parameters"* %122 to <2 x i64>*
  %124 = load <2 x i64>, <2 x i64>* %123, align 8
  %125 = getelementptr inbounds %"class.absl::optional.11", %"class.absl::optional.11"* %4, i64 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 0, i32 2, i32 0, i32 0
  %126 = bitcast i8** %125 to i64*
  %127 = load i64, i64* %126, align 8
  %128 = bitcast %"class.dcsctp::Parameters"* %122 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %128, i8 0, i64 24, i1 false) #7
  %129 = getelementptr inbounds %"class.absl::optional", %"class.absl::optional"* %0, i64 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [6 x i8*] }, { [6 x i8*] }* @_ZTVN6dcsctp9InitChunkE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %129, align 8
  %130 = getelementptr inbounds %"class.absl::optional", %"class.absl::optional"* %0, i64 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 1, i32 0
  store i32 %121, i32* %130, align 8
  %131 = getelementptr inbounds %"class.absl::optional", %"class.absl::optional"* %0, i64 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 2
  store i32 %111, i32* %131, align 4
  %132 = getelementptr inbounds %"class.absl::optional", %"class.absl::optional"* %0, i64 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 3
  store i16 %101, i16* %132, align 8
  %133 = getelementptr inbounds %"class.absl::optional", %"class.absl::optional"* %0, i64 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 4
  store i16 %97, i16* %133, align 2
  %134 = getelementptr inbounds %"class.absl::optional", %"class.absl::optional"* %0, i64 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 5, i32 0
  store i32 %93, i32* %134, align 4
  %135 = getelementptr inbounds %"class.absl::optional", %"class.absl::optional"* %0, i64 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 6
  %136 = bitcast %"class.dcsctp::Parameters"* %135 to <2 x i64>*
  store <2 x i64> %124, <2 x i64>* %136, align 8
  %137 = getelementptr inbounds %"class.absl::optional", %"class.absl::optional"* %0, i64 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 6, i32 0, i32 0, i32 2, i32 0, i32 0
  %138 = bitcast i8** %137 to i64*
  store i64 %127, i64* %138, align 8
  %139 = getelementptr inbounds %"class.absl::optional", %"class.absl::optional"* %0, i64 0, i32 0, i32 0, i32 0, i32 0
  store i8 1, i8* %139, align 8
  %140 = getelementptr inbounds %"class.absl::optional.11", %"class.absl::optional.11"* %4, i64 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 0, i32 0
  %141 = load i8*, i8** %140, align 8
  %142 = icmp eq i8* %141, null
  br i1 %142, label %147, label %143

143:                                              ; preds = %83
  %144 = ptrtoint i8* %141 to i64
  %145 = getelementptr inbounds %"class.absl::optional.11", %"class.absl::optional.11"* %4, i64 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 0, i32 1
  %146 = bitcast i8** %145 to i64*
  store i64 %144, i64* %146, align 8
  call void @_ZdlPv(i8* nonnull %141) #8
  br label %147

147:                                              ; preds = %83, %143, %79
  %148 = phi i8* [ %82, %79 ], [ %69, %143 ], [ %69, %83 ]
  store i8 0, i8* %148, align 8
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %69) #7
  br label %149

149:                                              ; preds = %147, %32
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

declare void @_ZN6dcsctp10Parameters5ParseEN3rtc9ArrayViewIKhLln4711EEE(%"class.absl::optional.11"* sret, i8*, i64) local_unnamed_addr #2

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZN6dcsctp9InitChunkD2Ev(%"class.dcsctp::InitChunk"*) unnamed_addr #3 comdat align 2 {
  %2 = getelementptr inbounds %"class.dcsctp::InitChunk", %"class.dcsctp::InitChunk"* %0, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [6 x i8*] }, { [6 x i8*] }* @_ZTVN6dcsctp9InitChunkE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %2, align 8
  %3 = getelementptr inbounds %"class.dcsctp::InitChunk", %"class.dcsctp::InitChunk"* %0, i64 0, i32 6, i32 0, i32 0, i32 0
  %4 = load i8*, i8** %3, align 8
  %5 = icmp eq i8* %4, null
  br i1 %5, label %10, label %6

6:                                                ; preds = %1
  %7 = ptrtoint i8* %4 to i64
  %8 = getelementptr inbounds %"class.dcsctp::InitChunk", %"class.dcsctp::InitChunk"* %0, i64 0, i32 6, i32 0, i32 0, i32 1
  %9 = bitcast i8** %8 to i64*
  store i64 %7, i64* %9, align 8
  tail call void @_ZdlPv(i8* nonnull %4) #8
  br label %10

10:                                               ; preds = %1, %6
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZNK6dcsctp9InitChunk11SerializeToERNSt3__16vectorIhNS1_9allocatorIhEEEE(%"class.dcsctp::InitChunk"* nocapture readonly, %"class.std::__1::vector"* dereferenceable(24)) unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"class.dcsctp::InitChunk", %"class.dcsctp::InitChunk"* %0, i64 0, i32 6, i32 0, i32 0, i32 0
  %4 = load i8*, i8** %3, align 8
  %5 = getelementptr inbounds %"class.dcsctp::InitChunk", %"class.dcsctp::InitChunk"* %0, i64 0, i32 6, i32 0, i32 0, i32 1
  %6 = bitcast i8** %5 to i64*
  %7 = load i64, i64* %6, align 8
  %8 = ptrtoint i8* %4 to i64
  %9 = sub i64 %7, %8
  %10 = icmp eq i64 %9, 0
  %11 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %1, i64 0, i32 0, i32 1
  %12 = bitcast i8** %11 to i64*
  %13 = load i64, i64* %12, align 8
  %14 = bitcast %"class.std::__1::vector"* %1 to i64*
  %15 = load i64, i64* %14, align 8
  %16 = sub i64 %13, %15
  %17 = add i64 %9, 20
  %18 = add i64 %16, %17
  %19 = icmp ult i64 %16, %18
  %20 = inttoptr i64 %15 to i8*
  br i1 %19, label %21, label %24

21:                                               ; preds = %2
  tail call void @_ZNSt3__16vectorIhNS_9allocatorIhEEE8__appendEm(%"class.std::__1::vector"* %1, i64 %17) #7
  %22 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %1, i64 0, i32 0, i32 0
  %23 = load i8*, i8** %22, align 8
  br label %28

24:                                               ; preds = %2
  %25 = icmp ugt i64 %16, %18
  br i1 %25, label %26, label %28

26:                                               ; preds = %24
  %27 = getelementptr inbounds i8, i8* %20, i64 %18
  store i8* %27, i8** %11, align 8
  br label %28

28:                                               ; preds = %21, %24, %26
  %29 = phi i8* [ %23, %21 ], [ %20, %24 ], [ %20, %26 ]
  %30 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %1, i64 0, i32 0, i32 0
  %31 = getelementptr inbounds i8, i8* %29, i64 %16
  store i8 1, i8* %31, align 1
  %32 = trunc i64 %17 to i16
  %33 = getelementptr inbounds i8, i8* %31, i64 2
  %34 = lshr i16 %32, 8
  %35 = trunc i16 %34 to i8
  store i8 %35, i8* %33, align 1
  %36 = trunc i64 %17 to i8
  %37 = getelementptr inbounds i8, i8* %31, i64 3
  store i8 %36, i8* %37, align 1
  %38 = load i8*, i8** %30, align 8
  %39 = getelementptr inbounds i8, i8* %38, i64 %16
  %40 = icmp eq i64 %17, 0
  %41 = select i1 %40, i8* null, i8* %39
  %42 = getelementptr inbounds %"class.dcsctp::InitChunk", %"class.dcsctp::InitChunk"* %0, i64 0, i32 1, i32 0
  %43 = load i32, i32* %42, align 4
  %44 = getelementptr inbounds i8, i8* %41, i64 4
  %45 = lshr i32 %43, 24
  %46 = trunc i32 %45 to i8
  store i8 %46, i8* %44, align 1
  %47 = lshr i32 %43, 16
  %48 = trunc i32 %47 to i8
  %49 = getelementptr inbounds i8, i8* %41, i64 5
  store i8 %48, i8* %49, align 1
  %50 = lshr i32 %43, 8
  %51 = trunc i32 %50 to i8
  %52 = getelementptr inbounds i8, i8* %41, i64 6
  store i8 %51, i8* %52, align 1
  %53 = trunc i32 %43 to i8
  %54 = getelementptr inbounds i8, i8* %41, i64 7
  store i8 %53, i8* %54, align 1
  %55 = getelementptr inbounds %"class.dcsctp::InitChunk", %"class.dcsctp::InitChunk"* %0, i64 0, i32 2
  %56 = load i32, i32* %55, align 4
  %57 = getelementptr inbounds i8, i8* %41, i64 8
  %58 = lshr i32 %56, 24
  %59 = trunc i32 %58 to i8
  store i8 %59, i8* %57, align 1
  %60 = lshr i32 %56, 16
  %61 = trunc i32 %60 to i8
  %62 = getelementptr inbounds i8, i8* %41, i64 9
  store i8 %61, i8* %62, align 1
  %63 = lshr i32 %56, 8
  %64 = trunc i32 %63 to i8
  %65 = getelementptr inbounds i8, i8* %41, i64 10
  store i8 %64, i8* %65, align 1
  %66 = trunc i32 %56 to i8
  %67 = getelementptr inbounds i8, i8* %41, i64 11
  store i8 %66, i8* %67, align 1
  %68 = getelementptr inbounds %"class.dcsctp::InitChunk", %"class.dcsctp::InitChunk"* %0, i64 0, i32 3
  %69 = load i16, i16* %68, align 8
  %70 = getelementptr inbounds i8, i8* %41, i64 12
  %71 = lshr i16 %69, 8
  %72 = trunc i16 %71 to i8
  store i8 %72, i8* %70, align 1
  %73 = trunc i16 %69 to i8
  %74 = getelementptr inbounds i8, i8* %41, i64 13
  store i8 %73, i8* %74, align 1
  %75 = getelementptr inbounds %"class.dcsctp::InitChunk", %"class.dcsctp::InitChunk"* %0, i64 0, i32 4
  %76 = load i16, i16* %75, align 2
  %77 = getelementptr inbounds i8, i8* %41, i64 14
  %78 = lshr i16 %76, 8
  %79 = trunc i16 %78 to i8
  store i8 %79, i8* %77, align 1
  %80 = trunc i16 %76 to i8
  %81 = getelementptr inbounds i8, i8* %41, i64 15
  store i8 %80, i8* %81, align 1
  %82 = getelementptr inbounds %"class.dcsctp::InitChunk", %"class.dcsctp::InitChunk"* %0, i64 0, i32 5, i32 0
  %83 = load i32, i32* %82, align 4
  %84 = getelementptr inbounds i8, i8* %41, i64 16
  %85 = lshr i32 %83, 24
  %86 = trunc i32 %85 to i8
  store i8 %86, i8* %84, align 1
  %87 = lshr i32 %83, 16
  %88 = trunc i32 %87 to i8
  %89 = getelementptr inbounds i8, i8* %41, i64 17
  store i8 %88, i8* %89, align 1
  %90 = lshr i32 %83, 8
  %91 = trunc i32 %90 to i8
  %92 = getelementptr inbounds i8, i8* %41, i64 18
  store i8 %91, i8* %92, align 1
  %93 = trunc i32 %83 to i8
  %94 = getelementptr inbounds i8, i8* %41, i64 19
  store i8 %93, i8* %94, align 1
  %95 = select i1 %10, i8* null, i8* %4
  %96 = getelementptr inbounds i8, i8* %41, i64 20
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %96, i8* align 1 %95, i64 %9, i1 false) #7
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZNK6dcsctp9InitChunk8ToStringEv(%"class.std::__1::basic_string"* noalias sret, %"class.dcsctp::InitChunk"* nocapture readonly) unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"class.dcsctp::InitChunk", %"class.dcsctp::InitChunk"* %1, i64 0, i32 1, i32 0
  %4 = load i32, i32* %3, align 8
  %5 = getelementptr inbounds %"class.dcsctp::InitChunk", %"class.dcsctp::InitChunk"* %1, i64 0, i32 5, i32 0
  %6 = load i32, i32* %5, align 4
  tail call void (%"class.std::__1::basic_string"*, i8*, ...) @_ZN3rtc12StringFormatEPKcz(%"class.std::__1::basic_string"* sret %0, i8* getelementptr inbounds ([41 x i8], [41 x i8]* @.str, i64 0, i64 0), i32 %4, i32 %6) #7
  ret void
}

declare void @_ZN3rtc12StringFormatEPKcz(%"class.std::__1::basic_string"* sret, i8*, ...) local_unnamed_addr #2

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZN6dcsctp9InitChunkD0Ev(%"class.dcsctp::InitChunk"*) unnamed_addr #3 comdat align 2 {
  %2 = getelementptr inbounds %"class.dcsctp::InitChunk", %"class.dcsctp::InitChunk"* %0, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [6 x i8*] }, { [6 x i8*] }* @_ZTVN6dcsctp9InitChunkE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %2, align 8
  %3 = getelementptr inbounds %"class.dcsctp::InitChunk", %"class.dcsctp::InitChunk"* %0, i64 0, i32 6, i32 0, i32 0, i32 0
  %4 = load i8*, i8** %3, align 8
  %5 = icmp eq i8* %4, null
  br i1 %5, label %10, label %6

6:                                                ; preds = %1
  %7 = ptrtoint i8* %4 to i64
  %8 = getelementptr inbounds %"class.dcsctp::InitChunk", %"class.dcsctp::InitChunk"* %0, i64 0, i32 6, i32 0, i32 0, i32 1
  %9 = bitcast i8** %8 to i64*
  store i64 %7, i64* %9, align 8
  tail call void @_ZdlPv(i8* nonnull %4) #8
  br label %10

10:                                               ; preds = %1, %6
  %11 = bitcast %"class.dcsctp::InitChunk"* %0 to i8*
  tail call void @_ZdlPv(i8* %11) #8
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(i8*) local_unnamed_addr #4

declare void @_ZN6dcsctp14tlv_trait_impl17ReportInvalidSizeEmm(i64, i64) local_unnamed_addr #2

declare void @_ZN6dcsctp14tlv_trait_impl17ReportInvalidTypeEii(i32, i32) local_unnamed_addr #2

declare void @_ZN6dcsctp14tlv_trait_impl32ReportInvalidVariableLengthFieldEmm(i64, i64) local_unnamed_addr #2

declare void @_ZN6dcsctp14tlv_trait_impl20ReportInvalidPaddingEm(i64) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__16vectorIhNS_9allocatorIhEEE8__appendEm(%"class.std::__1::vector"*, i64) local_unnamed_addr #0 comdat align 2 {
  %3 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %0, i64 0, i32 0, i32 2, i32 0, i32 0
  %4 = bitcast i8** %3 to i64*
  %5 = load i64, i64* %4, align 8
  %6 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %0, i64 0, i32 0, i32 1
  %7 = bitcast i8** %6 to i64*
  %8 = load i64, i64* %7, align 8
  %9 = sub i64 %5, %8
  %10 = icmp ult i64 %9, %1
  br i1 %10, label %22, label %11

11:                                               ; preds = %2
  %12 = inttoptr i64 %8 to i8*
  %13 = icmp eq i64 %1, 0
  br i1 %13, label %20, label %14

14:                                               ; preds = %11
  %15 = getelementptr inbounds i8, i8* %12, i64 %1
  %16 = sub i64 %1, %8
  %17 = getelementptr i8, i8* %12, i64 %16
  %18 = ptrtoint i8* %17 to i64
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %12, i8 0, i64 %18, i1 false) #7
  %19 = ptrtoint i8* %15 to i64
  br label %20

20:                                               ; preds = %11, %14
  %21 = phi i64 [ %19, %14 ], [ %8, %11 ]
  store i64 %21, i64* %7, align 8
  br label %68

22:                                               ; preds = %2
  %23 = bitcast %"class.std::__1::vector"* %0 to i64*
  %24 = load i64, i64* %23, align 8
  %25 = sub i64 %8, %24
  %26 = add i64 %25, %1
  %27 = icmp slt i64 %26, 0
  br i1 %27, label %28, label %30

28:                                               ; preds = %22
  %29 = bitcast %"class.std::__1::vector"* %0 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %29) #9
  unreachable

30:                                               ; preds = %22
  %31 = sub i64 %5, %24
  %32 = icmp ult i64 %31, 4611686018427387903
  br i1 %32, label %33, label %38

33:                                               ; preds = %30
  %34 = shl i64 %31, 1
  %35 = icmp ult i64 %34, %26
  %36 = select i1 %35, i64 %26, i64 %34
  %37 = icmp eq i64 %36, 0
  br i1 %37, label %41, label %38

38:                                               ; preds = %30, %33
  %39 = phi i64 [ %36, %33 ], [ 9223372036854775807, %30 ]
  %40 = tail call i8* @_Znwm(i64 %39) #8
  br label %41

41:                                               ; preds = %38, %33
  %42 = phi i64 [ %39, %38 ], [ 0, %33 ]
  %43 = phi i8* [ %40, %38 ], [ null, %33 ]
  %44 = getelementptr inbounds i8, i8* %43, i64 %25
  %45 = ptrtoint i8* %44 to i64
  %46 = getelementptr inbounds i8, i8* %43, i64 %42
  %47 = getelementptr inbounds i8, i8* %44, i64 %1
  %48 = sub i64 %1, %45
  %49 = getelementptr i8, i8* %44, i64 %48
  %50 = ptrtoint i8* %49 to i64
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %44, i8 0, i64 %50, i1 false) #7
  %51 = ptrtoint i8* %46 to i64
  %52 = ptrtoint i8* %47 to i64
  %53 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %0, i64 0, i32 0, i32 0
  %54 = load i8*, i8** %53, align 8
  %55 = load i64, i64* %7, align 8
  %56 = ptrtoint i8* %54 to i64
  %57 = sub i64 %55, %56
  %58 = sub i64 0, %57
  %59 = getelementptr inbounds i8, i8* %44, i64 %58
  %60 = ptrtoint i8* %59 to i64
  %61 = icmp sgt i64 %57, 0
  br i1 %61, label %62, label %64

62:                                               ; preds = %41
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %59, i8* align 1 %54, i64 %57, i1 false) #7
  %63 = load i8*, i8** %53, align 8
  br label %64

64:                                               ; preds = %41, %62
  %65 = phi i8* [ %54, %41 ], [ %63, %62 ]
  store i64 %60, i64* %23, align 8
  store i64 %52, i64* %7, align 8
  store i64 %51, i64* %4, align 8
  %66 = icmp eq i8* %65, null
  br i1 %66, label %68, label %67

67:                                               ; preds = %64
  tail call void @_ZdlPv(i8* nonnull %65) #8
  br label %68

68:                                               ; preds = %67, %64, %20
  ret void
}

; Function Attrs: noreturn
declare void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"*) local_unnamed_addr #5

; Function Attrs: nobuiltin nofree
declare noalias nonnull i8* @_Znwm(i64) local_unnamed_addr #6

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { inlinehint nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nobuiltin nofree "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { nounwind }
attributes #8 = { builtin nounwind }
attributes #9 = { noreturn nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{!3}
!3 = distinct !{!3, !4, !"_ZN6dcsctp8TLVTraitINS_15InitChunkConfigEE8ParseTLVEN3rtc9ArrayViewIKhLln4711EEE: argument 0"}
!4 = distinct !{!4, !"_ZN6dcsctp8TLVTraitINS_15InitChunkConfigEE8ParseTLVEN3rtc9ArrayViewIKhLln4711EEE"}
!5 = !{i8 0, i8 2}
