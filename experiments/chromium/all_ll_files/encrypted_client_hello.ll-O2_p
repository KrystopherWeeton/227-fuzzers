; ModuleID = '../../third_party/boringssl/src/ssl/encrypted_client_hello.cc'
source_filename = "../../third_party/boringssl/src/ssl/encrypted_client_hello.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.ssl_st = type <{ %"struct.bssl::SSL_PROTOCOL_METHOD"*, %"class.std::__1::unique_ptr.2", i16, i16, [4 x i8], %"class.std::__1::unique_ptr.91", %"class.std::__1::unique_ptr.91", i32 (%"struct.bssl::SSL_HANDSHAKE"*)*, %"struct.bssl::SSL3_STATE"*, %"struct.bssl::DTLS1_STATE"*, void (i32, i32, i32, i8*, i64, %struct.ssl_st*, i8*)*, i8*, i32, [4 x i8], %"class.std::__1::unique_ptr.58", void (%struct.ssl_st*, i32, i32)*, %"class.std::__1::unique_ptr.106", %"class.std::__1::unique_ptr.106", %struct.crypto_ex_data_st, i32, i32, i32, [4 x i8], %"class.std::__1::unique_ptr.29", %struct.ssl_quic_method_st*, i32, i8, [3 x i8] }>
%"struct.bssl::SSL_PROTOCOL_METHOD" = type { i8, i1 (%struct.ssl_st*)*, void (%struct.ssl_st*)*, i1 (%struct.ssl_st*, %"struct.bssl::SSLMessage"*)*, void (%struct.ssl_st*)*, i1 (%struct.ssl_st*)*, i32 (%struct.ssl_st*, i64*, i8*, i8*, i64)*, i32 (%struct.ssl_st*, i64*, i8*, i8*, i64)*, i32 (%struct.ssl_st*, %"class.bssl::Span"*, i64*, i8*, i8*, i64)*, i32 (%struct.ssl_st*, i8*, i8*, i32)*, i32 (%struct.ssl_st*)*, i1 (%struct.ssl_st*, %struct.cbb_st*, %struct.cbb_st*, i8)*, i1 (%struct.ssl_st*, %struct.cbb_st*, %"class.bssl::Array"*)*, i1 (%struct.ssl_st*, %"class.bssl::Array"*)*, i1 (%struct.ssl_st*)*, i32 (%struct.ssl_st*)*, void (%struct.ssl_st*)*, i1 (%struct.ssl_st*, i32, %"class.bssl::SSLAEADContext"*, i8*, i64)*, i1 (%struct.ssl_st*, i32, %"class.bssl::SSLAEADContext"*, i8*, i64)* }
%"struct.bssl::SSLMessage" = type { i8, i8, %struct.cbs_st, %struct.cbs_st }
%struct.cbs_st = type { i8*, i64 }
%"class.bssl::Span" = type { i8*, i64 }
%struct.cbb_st = type { %struct.cbb_buffer_st*, %struct.cbb_st*, i64, i8, i8, i8 }
%struct.cbb_buffer_st = type { i8*, i64, i64, i8, i8 }
%"class.bssl::SSLAEADContext" = type <{ %struct.ssl_cipher_st*, %"class.bssl::internal::StackAllocated", [12 x i8], i8, i8, i16, i8, i8, [6 x i8] }>
%struct.ssl_cipher_st = type { i8*, i8*, i32, i32, i32, i32, i32, i32 }
%"class.bssl::internal::StackAllocated" = type { %struct.evp_aead_ctx_st }
%struct.evp_aead_ctx_st = type { %struct.evp_aead_st*, %union.evp_aead_ctx_st_state, i8 }
%struct.evp_aead_st = type opaque
%union.evp_aead_ctx_st_state = type { i64, [576 x i8] }
%"class.std::__1::unique_ptr.2" = type { %"class.std::__1::__compressed_pair.3" }
%"class.std::__1::__compressed_pair.3" = type { %"struct.std::__1::__compressed_pair_elem.4" }
%"struct.std::__1::__compressed_pair_elem.4" = type { %"struct.bssl::SSL_CONFIG"* }
%"struct.bssl::SSL_CONFIG" = type <{ %struct.ssl_st*, i16, i16, [4 x i8], %struct.X509_VERIFY_PARAM_st*, %"class.std::__1::unique_ptr.5", %"class.std::__1::unique_ptr.15", i32 (i32, %struct.x509_store_ctx_st*)*, i32 (%struct.ssl_st*, i8*)*, %"class.std::__1::unique_ptr.29", i32 (%struct.ssl_st*, i8*, i8*, i32, i8*, i32)*, i32 (%struct.ssl_st*, i8*, i8*, i32)*, %"class.std::__1::unique_ptr.23", %struct.stack_st_X509_NAME*, %"class.bssl::Array.56", %"class.std::__1::unique_ptr.18", %"class.bssl::Array", %"class.bssl::GrowableArray.82", %"class.bssl::Array", %"class.bssl::Array", %"class.bssl::Array.56", %"class.std::__1::unique_ptr.84", i8, i16, [5 x i8] }>
%struct.X509_VERIFY_PARAM_st = type { i8*, i64, i64, i64, i32, i32, i32, %struct.stack_st_ASN1_OBJECT*, %struct.X509_VERIFY_PARAM_ID_st* }
%struct.stack_st_ASN1_OBJECT = type opaque
%struct.X509_VERIFY_PARAM_ID_st = type opaque
%"class.std::__1::unique_ptr.5" = type { %"class.std::__1::__compressed_pair.6" }
%"class.std::__1::__compressed_pair.6" = type { %"struct.std::__1::__compressed_pair_elem.7" }
%"struct.std::__1::__compressed_pair_elem.7" = type { %"struct.bssl::SSLCipherPreferenceList"* }
%"struct.bssl::SSLCipherPreferenceList" = type { %"class.std::__1::unique_ptr.8", i8* }
%"class.std::__1::unique_ptr.8" = type { %"class.std::__1::__compressed_pair.9" }
%"class.std::__1::__compressed_pair.9" = type { %"struct.std::__1::__compressed_pair_elem.10" }
%"struct.std::__1::__compressed_pair_elem.10" = type { %struct.stack_st_SSL_CIPHER* }
%struct.stack_st_SSL_CIPHER = type opaque
%"class.std::__1::unique_ptr.15" = type { %"class.std::__1::__compressed_pair.16" }
%"class.std::__1::__compressed_pair.16" = type { %"struct.std::__1::__compressed_pair_elem.17" }
%"struct.std::__1::__compressed_pair_elem.17" = type { %"struct.bssl::CERT"* }
%"struct.bssl::CERT" = type { %"class.std::__1::unique_ptr.18", %"class.std::__1::unique_ptr.23", %struct.stack_st_X509*, %struct.x509_st*, %struct.x509_st*, %struct.ssl_private_key_method_st*, %"struct.bssl::SSL_X509_METHOD"*, %"class.bssl::Array.56", i32 (%struct.ssl_st*, i8*)*, i8*, %struct.x509_store_st*, %"class.std::__1::unique_ptr.34", %"class.std::__1::unique_ptr.34", i8, [32 x i8], %"class.std::__1::unique_ptr.75", %"class.std::__1::unique_ptr.18", %struct.ssl_private_key_method_st* }
%struct.stack_st_X509 = type opaque
%struct.x509_st = type { %struct.x509_cinf_st*, %struct.X509_algor_st*, %struct.asn1_string_st*, i32, %struct.crypto_ex_data_st, i64, i64, i64, i64, i64, i64, %struct.asn1_string_st*, %struct.AUTHORITY_KEYID_st*, %struct.X509_POLICY_CACHE_st*, %struct.stack_st_DIST_POINT*, %struct.stack_st_GENERAL_NAME*, %struct.NAME_CONSTRAINTS_st*, [20 x i8], %struct.x509_cert_aux_st*, %struct.crypto_buffer_st*, %union.crypto_mutex_st }
%struct.x509_cinf_st = type { %struct.asn1_string_st*, %struct.asn1_string_st*, %struct.X509_algor_st*, %struct.X509_name_st*, %struct.X509_val_st*, %struct.X509_name_st*, %struct.X509_pubkey_st*, %struct.asn1_string_st*, %struct.asn1_string_st*, %struct.stack_st_X509_EXTENSION*, %struct.ASN1_ENCODING_st }
%struct.X509_val_st = type opaque
%struct.X509_name_st = type { %struct.stack_st_X509_NAME_ENTRY*, i32, %struct.buf_mem_st*, i8*, i32 }
%struct.stack_st_X509_NAME_ENTRY = type opaque
%struct.buf_mem_st = type { i64, i8*, i64 }
%struct.X509_pubkey_st = type opaque
%struct.stack_st_X509_EXTENSION = type opaque
%struct.ASN1_ENCODING_st = type { i8*, i64, i32, i8 }
%struct.X509_algor_st = type { %struct.asn1_object_st*, %struct.asn1_type_st* }
%struct.asn1_object_st = type { i8*, i8*, i32, i32, i8*, i32 }
%struct.asn1_type_st = type { i32, %union.anon.28 }
%union.anon.28 = type { i8* }
%struct.asn1_string_st = type { i32, i32, i8*, i64 }
%struct.AUTHORITY_KEYID_st = type opaque
%struct.X509_POLICY_CACHE_st = type opaque
%struct.stack_st_DIST_POINT = type opaque
%struct.stack_st_GENERAL_NAME = type opaque
%struct.NAME_CONSTRAINTS_st = type opaque
%struct.x509_cert_aux_st = type opaque
%struct.crypto_buffer_st = type opaque
%union.crypto_mutex_st = type { double, [48 x i8] }
%"struct.bssl::SSL_X509_METHOD" = type { i1 (%struct.stack_st_CRYPTO_BUFFER*)*, void (%"struct.bssl::CERT"*)*, void (%"struct.bssl::CERT"*)*, void (%"struct.bssl::CERT"*, %"struct.bssl::CERT"*)*, void (%"struct.bssl::CERT"*)*, void (%"struct.bssl::CERT"*)*, i1 (%struct.ssl_session_st*)*, i1 (%struct.ssl_session_st*, %struct.ssl_session_st*)*, void (%struct.ssl_session_st*)*, i1 (%struct.ssl_session_st*, %"struct.bssl::SSL_HANDSHAKE"*, i8*)*, void (%"struct.bssl::SSL_HANDSHAKE"*)*, i1 (%"struct.bssl::SSL_HANDSHAKE"*)*, void (%"struct.bssl::SSL_CONFIG"*)*, void (%"struct.bssl::SSL_CONFIG"*)*, i1 (%"struct.bssl::SSL_HANDSHAKE"*)*, i1 (%struct.ssl_ctx_st*)*, void (%struct.ssl_ctx_st*)*, void (%struct.ssl_ctx_st*)* }
%struct.stack_st_CRYPTO_BUFFER = type opaque
%struct.ssl_session_st = type { i32, i16, i16, i16, i32, [48 x i8], i32, [32 x i8], i8, [32 x i8], %"class.std::__1::unique_ptr.29", %"class.std::__1::unique_ptr.23", %"struct.bssl::SSL_X509_METHOD"*, %struct.x509_st*, %struct.stack_st_X509*, %struct.stack_st_X509*, i64, i32, i32, i64, %struct.ssl_cipher_st*, %struct.crypto_ex_data_st, %struct.ssl_session_st*, %struct.ssl_session_st*, %"class.bssl::Array", %"class.std::__1::unique_ptr.34", %"class.std::__1::unique_ptr.34", [32 x i8], [64 x i8], i8, i32, i32, i32, %"class.bssl::Array", %"class.bssl::Array", %"class.bssl::Array", i8, %"class.bssl::Array" }
%"struct.bssl::SSL_HANDSHAKE" = type <{ %struct.ssl_st*, %"struct.bssl::SSL_CONFIG"*, i32, i32, i32, i16, i16, i64, [48 x i8], [48 x i8], [48 x i8], [48 x i8], [48 x i8], [48 x i8], [48 x i8], %union.anon.39, i16, [2 x i8], %"class.std::__1::unique_ptr.40", [2 x %"class.std::__1::unique_ptr.45"], %"class.bssl::SSLTranscript", %"class.bssl::Array", %"class.bssl::Array", %"class.bssl::Array", %"class.bssl::Array", %"class.bssl::Array", %"class.bssl::Array.56", %"class.bssl::Array.56", %"class.bssl::Array.56", %"class.bssl::Array", i16, [6 x i8], %"class.bssl::internal::StackAllocated.57", %"class.bssl::Array", %"class.std::__1::unique_ptr.29", %"class.std::__1::unique_ptr.23", %struct.stack_st_X509_NAME*, %"class.bssl::Array", %"class.std::__1::unique_ptr.18", %"class.std::__1::unique_ptr.18", %"class.std::__1::unique_ptr.58", %"class.std::__1::unique_ptr.58", %"class.std::__1::unique_ptr.63", %struct.ssl_cipher_st*, %"class.bssl::Array", %"class.std::__1::unique_ptr.70", i32, i16, i16, i16, i8, [32 x i8], i8, [6 x i8], [6 x i8] }>
%union.anon.39 = type { i32 }
%"class.std::__1::unique_ptr.40" = type { %"class.std::__1::__compressed_pair.41" }
%"class.std::__1::__compressed_pair.41" = type { %"struct.std::__1::__compressed_pair_elem.42" }
%"struct.std::__1::__compressed_pair_elem.42" = type { %struct.err_save_state_st* }
%struct.err_save_state_st = type opaque
%"class.std::__1::unique_ptr.45" = type { %"class.std::__1::__compressed_pair.46" }
%"class.std::__1::__compressed_pair.46" = type { %"struct.std::__1::__compressed_pair_elem.47" }
%"struct.std::__1::__compressed_pair_elem.47" = type { %"class.bssl::SSLKeyShare"* }
%"class.bssl::SSLKeyShare" = type { i32 (...)** }
%"class.bssl::SSLTranscript" = type { %"class.std::__1::unique_ptr.50", %"class.bssl::internal::StackAllocated.55" }
%"class.std::__1::unique_ptr.50" = type { %"class.std::__1::__compressed_pair.51" }
%"class.std::__1::__compressed_pair.51" = type { %"struct.std::__1::__compressed_pair_elem.52" }
%"struct.std::__1::__compressed_pair_elem.52" = type { %struct.buf_mem_st* }
%"class.bssl::internal::StackAllocated.55" = type { %struct.env_md_ctx_st }
%struct.env_md_ctx_st = type { %struct.env_md_st*, i8*, %struct.evp_pkey_ctx_st*, %struct.evp_md_pctx_ops* }
%struct.env_md_st = type opaque
%struct.evp_pkey_ctx_st = type opaque
%struct.evp_md_pctx_ops = type opaque
%"class.bssl::internal::StackAllocated.57" = type { %struct.evp_hpke_ctx_st }
%struct.evp_hpke_ctx_st = type { %struct.evp_hpke_aead_st*, %struct.evp_hpke_kdf_st*, %struct.evp_aead_ctx_st, [24 x i8], [64 x i8], i64, i32 }
%struct.evp_hpke_aead_st = type opaque
%struct.evp_hpke_kdf_st = type opaque
%"class.std::__1::unique_ptr.63" = type { %"class.std::__1::__compressed_pair.64" }
%"class.std::__1::__compressed_pair.64" = type { %"struct.std::__1::__compressed_pair_elem.65" }
%"struct.std::__1::__compressed_pair_elem.65" = type { %struct.ssl_ech_server_config_list_st* }
%struct.ssl_ech_server_config_list_st = type <{ %"class.bssl::GrowableArray", i32, [4 x i8] }>
%"class.bssl::GrowableArray" = type { i64, %"class.bssl::Array.66" }
%"class.bssl::Array.66" = type { %"class.std::__1::unique_ptr.67"*, i64 }
%"class.std::__1::unique_ptr.67" = type opaque
%"class.std::__1::unique_ptr.70" = type { %"class.std::__1::__compressed_pair.71" }
%"class.std::__1::__compressed_pair.71" = type { %"struct.std::__1::__compressed_pair_elem.72" }
%"struct.std::__1::__compressed_pair_elem.72" = type { %"struct.bssl::SSL_HANDSHAKE_HINTS"* }
%"struct.bssl::SSL_HANDSHAKE_HINTS" = type <{ %"class.bssl::Array", i16, [6 x i8], %"class.bssl::Array", %"class.bssl::Array", i16, [6 x i8], %"class.bssl::Array", %"class.bssl::Array", %"class.bssl::Array", %"class.bssl::Array", i8, [7 x i8] }>
%struct.ssl_ctx_st = type <{ %"struct.bssl::SSL_PROTOCOL_METHOD"*, %"struct.bssl::SSL_X509_METHOD"*, %union.crypto_mutex_st, i16, i16, [4 x i8], %struct.ssl_quic_method_st*, %"class.std::__1::unique_ptr.5", %struct.x509_store_st*, %struct.lhash_st_SSL_SESSION*, i64, %struct.ssl_session_st*, %struct.ssl_session_st*, i32, i32, i32, i32, i32 (%struct.ssl_st*, %struct.ssl_session_st*)*, void (%struct.ssl_ctx_st*, %struct.ssl_session_st*)*, %struct.ssl_session_st* (%struct.ssl_st*, i8*, i32, i32*)*, i32, [4 x i8], i32 (%struct.x509_store_ctx_st*, i8*)*, i8*, i32 (%struct.ssl_st*, i8*)*, i32 (i8*, i32, i32, i8*)*, i8*, i32 (%struct.ssl_st*, %struct.x509_st**, %struct.evp_pkey_st**)*, void (%struct.ssl_st*, %struct.evp_pkey_st**)*, %struct.crypto_ex_data_st, void (%struct.ssl_st*, i32, i32)*, %"class.std::__1::unique_ptr.23", %struct.stack_st_X509_NAME*, i32, i32, i32, [4 x i8], %"class.std::__1::unique_ptr.15", void (i32, i32, i32, i8*, i64, %struct.ssl_st*, i8*)*, i8*, i32, [4 x i8], i32 (i32, %struct.x509_store_ctx_st*)*, %struct.X509_VERIFY_PARAM_st*, i32 (%struct.ssl_early_callback_ctx*)*, i32 (%struct.ssl_early_callback_ctx*)*, i8, i8, i16, [4 x i8], i32 (%struct.ssl_st*, i32*, i8*)*, i8*, %"class.std::__1::unique_ptr.109", %"class.std::__1::unique_ptr.109", i32 (%struct.ssl_st*, i8*, i8*, %struct.evp_cipher_ctx_st*, %struct.hmac_ctx_st*, i32)*, %"class.std::__1::unique_ptr.29", i32 (%struct.ssl_st*, i8*, i8*, i32, i8*, i32)*, i32 (%struct.ssl_st*, i8*, i8*, i32)*, i32 (%struct.ssl_st*, i8**, i32*, i8*)*, i8*, i32 (%struct.ssl_st*, i8**, i8*, i8*, i32, i8*)*, i8*, i32 (%struct.ssl_st*, i8**, i8*, i8*, i32, i8*)*, i8*, %"class.bssl::Array", %"class.std::__1::unique_ptr.84", %"class.bssl::GrowableArray.114", %"class.bssl::Array.56", %"class.std::__1::unique_ptr.18", %"class.std::__1::unique_ptr.63", void (%struct.ssl_st*, i8*)*, void (%struct.ssl_st*, %struct.timeval*)*, %struct.crypto_buffer_pool_st*, %struct.ssl_ticket_aead_method_st*, i32 (%struct.ssl_st*, i8*)*, i8*, %"class.bssl::Array.56", i16, [6 x i8] }>
%struct.lhash_st_SSL_SESSION = type opaque
%struct.x509_store_ctx_st = type { %struct.x509_store_st*, %struct.x509_st*, %struct.stack_st_X509*, %struct.stack_st_X509_CRL*, %struct.X509_VERIFY_PARAM_st*, i8*, {}*, i32 (i32, %struct.x509_store_ctx_st*)*, i32 (%struct.x509_st**, %struct.x509_store_ctx_st*, %struct.x509_st*)*, i32 (%struct.x509_store_ctx_st*, %struct.x509_st*, %struct.x509_st*)*, {}*, i32 (%struct.x509_store_ctx_st*, %struct.X509_crl_st**, %struct.x509_st*)*, i32 (%struct.x509_store_ctx_st*, %struct.X509_crl_st*)*, i32 (%struct.x509_store_ctx_st*, %struct.X509_crl_st*, %struct.x509_st*)*, {}*, %struct.stack_st_X509* (%struct.x509_store_ctx_st*, %struct.X509_name_st*)*, %struct.stack_st_X509_CRL* (%struct.x509_store_ctx_st*, %struct.X509_name_st*)*, {}*, i32, i32, %struct.stack_st_X509*, %struct.X509_POLICY_TREE_st*, i32, i32, i32, %struct.x509_st*, %struct.x509_st*, %struct.X509_crl_st*, i32, i32, %struct.x509_store_ctx_st*, %struct.crypto_ex_data_st }
%struct.stack_st_X509_CRL = type opaque
%struct.X509_POLICY_TREE_st = type opaque
%struct.X509_crl_st = type { %struct.X509_crl_info_st*, %struct.X509_algor_st*, %struct.asn1_string_st*, i32, i32, %struct.AUTHORITY_KEYID_st*, %struct.ISSUING_DIST_POINT_st*, i32, i32, %struct.asn1_string_st*, %struct.asn1_string_st*, [20 x i8], %struct.stack_st_GENERAL_NAMES*, %struct.x509_crl_method_st*, i8* }
%struct.X509_crl_info_st = type { %struct.asn1_string_st*, %struct.X509_algor_st*, %struct.X509_name_st*, %struct.asn1_string_st*, %struct.asn1_string_st*, %struct.stack_st_X509_REVOKED*, %struct.stack_st_X509_EXTENSION*, %struct.ASN1_ENCODING_st }
%struct.stack_st_X509_REVOKED = type opaque
%struct.ISSUING_DIST_POINT_st = type opaque
%struct.stack_st_GENERAL_NAMES = type opaque
%struct.x509_crl_method_st = type opaque
%struct.evp_pkey_st = type { i32, i32, %union.anon, %struct.evp_pkey_asn1_method_st* }
%union.anon = type { i8* }
%struct.evp_pkey_asn1_method_st = type opaque
%"class.std::__1::unique_ptr.109" = type { %"class.std::__1::__compressed_pair.110" }
%"class.std::__1::__compressed_pair.110" = type { %"struct.std::__1::__compressed_pair_elem.111" }
%"struct.std::__1::__compressed_pair_elem.111" = type { %"struct.bssl::TicketKey"* }
%"struct.bssl::TicketKey" = type { [16 x i8], [16 x i8], [16 x i8], i64 }
%struct.evp_cipher_ctx_st = type { %struct.evp_cipher_st*, i8*, i8*, i32, i32, i32, [16 x i8], [16 x i8], [32 x i8], i32, i32, i32, [32 x i8] }
%struct.evp_cipher_st = type { i32, i32, i32, i32, i32, i32, i8*, i32 (%struct.evp_cipher_ctx_st*, i8*, i8*, i32)*, i32 (%struct.evp_cipher_ctx_st*, i8*, i8*, i64)*, void (%struct.evp_cipher_ctx_st*)*, i32 (%struct.evp_cipher_ctx_st*, i32, i32, i8*)* }
%struct.hmac_ctx_st = type { %struct.env_md_st*, %struct.env_md_ctx_st, %struct.env_md_ctx_st, %struct.env_md_ctx_st }
%"class.bssl::GrowableArray.114" = type { i64, %"class.bssl::Array.115" }
%"class.bssl::Array.115" = type { %"struct.bssl::CertCompressionAlg"*, i64 }
%"struct.bssl::CertCompressionAlg" = type <{ i32 (%struct.ssl_st*, %struct.cbb_st*, i8*, i64)*, i32 (%struct.ssl_st*, %struct.crypto_buffer_st**, i64, i8*, i64)*, i16, [6 x i8] }>
%struct.timeval = type { i64, i64 }
%struct.crypto_buffer_pool_st = type opaque
%struct.ssl_ticket_aead_method_st = type { i64 (%struct.ssl_st*)*, i32 (%struct.ssl_st*, i8*, i64*, i64, i8*, i64)*, i32 (%struct.ssl_st*, i8*, i64*, i64, i8*, i64)* }
%struct.x509_store_st = type { i32, %struct.stack_st_X509_OBJECT*, %union.crypto_mutex_st, %struct.stack_st_X509*, %struct.stack_st_X509_LOOKUP*, %struct.X509_VERIFY_PARAM_st*, i32 (%struct.x509_store_ctx_st*)*, i32 (i32, %struct.x509_store_ctx_st*)*, i32 (%struct.x509_st**, %struct.x509_store_ctx_st*, %struct.x509_st*)*, i32 (%struct.x509_store_ctx_st*, %struct.x509_st*, %struct.x509_st*)*, i32 (%struct.x509_store_ctx_st*)*, i32 (%struct.x509_store_ctx_st*, %struct.X509_crl_st**, %struct.x509_st*)*, i32 (%struct.x509_store_ctx_st*, %struct.X509_crl_st*)*, i32 (%struct.x509_store_ctx_st*, %struct.X509_crl_st*, %struct.x509_st*)*, %struct.stack_st_X509* (%struct.x509_store_ctx_st*, %struct.X509_name_st*)*, %struct.stack_st_X509_CRL* (%struct.x509_store_ctx_st*, %struct.X509_name_st*)*, i32 (%struct.x509_store_ctx_st*)*, i32 }
%struct.stack_st_X509_OBJECT = type opaque
%struct.stack_st_X509_LOOKUP = type opaque
%"class.std::__1::unique_ptr.34" = type { %"class.std::__1::__compressed_pair.35" }
%"class.std::__1::__compressed_pair.35" = type { %"struct.std::__1::__compressed_pair_elem.36" }
%"struct.std::__1::__compressed_pair_elem.36" = type { %struct.crypto_buffer_st* }
%"class.std::__1::unique_ptr.75" = type { %"class.std::__1::__compressed_pair.76" }
%"class.std::__1::__compressed_pair.76" = type { %"struct.std::__1::__compressed_pair_elem.77" }
%"struct.std::__1::__compressed_pair_elem.77" = type { %"struct.bssl::DC"* }
%"struct.bssl::DC" = type { %"class.std::__1::unique_ptr.34", i16, %"class.std::__1::unique_ptr.18" }
%struct.ssl_private_key_method_st = type { i32 (%struct.ssl_st*, i8*, i64*, i64, i16, i8*, i64)*, i32 (%struct.ssl_st*, i8*, i64*, i64, i8*, i64)*, i32 (%struct.ssl_st*, i8*, i64*, i64)* }
%"class.std::__1::unique_ptr.23" = type { %"class.std::__1::__compressed_pair.24" }
%"class.std::__1::__compressed_pair.24" = type { %"struct.std::__1::__compressed_pair_elem.25" }
%"struct.std::__1::__compressed_pair_elem.25" = type { %struct.stack_st_CRYPTO_BUFFER* }
%struct.stack_st_X509_NAME = type opaque
%"class.std::__1::unique_ptr.18" = type { %"class.std::__1::__compressed_pair.19" }
%"class.std::__1::__compressed_pair.19" = type { %"struct.std::__1::__compressed_pair_elem.20" }
%"struct.std::__1::__compressed_pair_elem.20" = type { %struct.evp_pkey_st* }
%"class.bssl::GrowableArray.82" = type { i64, %"class.bssl::Array.83" }
%"class.bssl::Array.83" = type { %"struct.bssl::ALPSConfig"*, i64 }
%"struct.bssl::ALPSConfig" = type { %"class.bssl::Array", %"class.bssl::Array" }
%"class.bssl::Array" = type { i8*, i64 }
%"class.bssl::Array.56" = type { i16*, i64 }
%"class.std::__1::unique_ptr.84" = type { %"class.std::__1::__compressed_pair.85" }
%"class.std::__1::__compressed_pair.85" = type { %"struct.std::__1::__compressed_pair_elem.86" }
%"struct.std::__1::__compressed_pair_elem.86" = type { %struct.stack_st_SRTP_PROTECTION_PROFILE* }
%struct.stack_st_SRTP_PROTECTION_PROFILE = type opaque
%"class.std::__1::unique_ptr.91" = type { %"class.std::__1::__compressed_pair.92" }
%"class.std::__1::__compressed_pair.92" = type { %"struct.std::__1::__compressed_pair_elem.93" }
%"struct.std::__1::__compressed_pair_elem.93" = type { %struct.bio_st* }
%struct.bio_st = type { %struct.bio_method_st*, i32, i32, i32, i32, i32, i32, i8*, %struct.bio_st*, i64, i64 }
%struct.bio_method_st = type { i32, i8*, i32 (%struct.bio_st*, i8*, i32)*, i32 (%struct.bio_st*, i8*, i32)*, i32 (%struct.bio_st*, i8*)*, i32 (%struct.bio_st*, i8*, i32)*, i64 (%struct.bio_st*, i32, i64, i8*)*, i32 (%struct.bio_st*)*, i32 (%struct.bio_st*)*, i64 (%struct.bio_st*, i32, i64 (%struct.bio_st*, i32, i8*, i32, i64, i64)*)* }
%"struct.bssl::SSL3_STATE" = type <{ [8 x i8], [8 x i8], [32 x i8], [32 x i8], %"class.bssl::SSLBuffer", %"class.bssl::SSLBuffer", %"class.bssl::Span", i32, i32, i32, i32, i8*, i32, i32, %"class.std::__1::unique_ptr.40", i32, i32, i32, i32, i16, i8, i8, i8, i16, i8, %"class.std::__1::unique_ptr.50", %"class.std::__1::unique_ptr.50", %"class.std::__1::unique_ptr.50", i32, i32, i32, [4 x i8], %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr.96", [48 x i8], [48 x i8], [48 x i8], i8, i8, i8, [12 x i8], i8, i8, [12 x i8], [2 x i8], i8, %"class.std::__1::unique_ptr.58", %"class.bssl::Array", %"class.bssl::Array", %"class.std::__1::unique_ptr.29", [64 x i8], %"class.bssl::Array", %struct.srtp_protection_profile_st* }>
%"class.bssl::SSLBuffer" = type <{ i8*, i16, i16, i16, [5 x i8], i8, [4 x i8] }>
%"class.std::__1::unique_ptr" = type { %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %"class.bssl::SSLAEADContext"* }
%"class.std::__1::unique_ptr.96" = type { %"class.std::__1::__compressed_pair.97" }
%"class.std::__1::__compressed_pair.97" = type { %"struct.std::__1::__compressed_pair_elem.98" }
%"struct.std::__1::__compressed_pair_elem.98" = type { %"struct.bssl::SSL_HANDSHAKE"* }
%struct.srtp_protection_profile_st = type { i8*, i64 }
%"struct.bssl::DTLS1_STATE" = type <{ i8, [256 x i8], [7 x i8], i64, i16, i16, [4 x i8], %"struct.bssl::DTLS1_BITMAP", i16, i16, [8 x i8], [4 x i8], %"class.std::__1::unique_ptr", [7 x %"class.std::__1::unique_ptr.101"], [7 x %"struct.bssl::DTLS_OUTGOING_MESSAGE"], i8, i8, [2 x i8], i32, i32, i32, %"struct.bssl::OPENSSL_timeval", i32, [4 x i8] }>
%"struct.bssl::DTLS1_BITMAP" = type { i64, i64 }
%"class.std::__1::unique_ptr.101" = type { %"class.std::__1::__compressed_pair.102" }
%"class.std::__1::__compressed_pair.102" = type { %"struct.std::__1::__compressed_pair_elem.103" }
%"struct.std::__1::__compressed_pair_elem.103" = type { %"struct.bssl::hm_fragment"* }
%"struct.bssl::hm_fragment" = type { i8, i16, i32, i8*, i8* }
%"struct.bssl::DTLS_OUTGOING_MESSAGE" = type <{ i8*, i32, i16, i8, i8 }>
%"struct.bssl::OPENSSL_timeval" = type { i64, i32 }
%"class.std::__1::unique_ptr.58" = type { %"class.std::__1::__compressed_pair.59" }
%"class.std::__1::__compressed_pair.59" = type { %"struct.std::__1::__compressed_pair_elem.60" }
%"struct.std::__1::__compressed_pair_elem.60" = type { %struct.ssl_session_st* }
%"class.std::__1::unique_ptr.106" = type { %"class.std::__1::__compressed_pair.107" }
%"class.std::__1::__compressed_pair.107" = type { %"struct.std::__1::__compressed_pair_elem.108" }
%"struct.std::__1::__compressed_pair_elem.108" = type { %struct.ssl_ctx_st* }
%struct.crypto_ex_data_st = type { %struct.stack_st_void* }
%struct.stack_st_void = type opaque
%"class.std::__1::unique_ptr.29" = type { %"class.std::__1::__compressed_pair.30" }
%"class.std::__1::__compressed_pair.30" = type { %"struct.std::__1::__compressed_pair_elem.31" }
%"struct.std::__1::__compressed_pair_elem.31" = type { i8* }
%struct.ssl_quic_method_st = type { i32 (%struct.ssl_st*, i32, %struct.ssl_cipher_st*, i8*, i64)*, i32 (%struct.ssl_st*, i32, %struct.ssl_cipher_st*, i8*, i64)*, i32 (%struct.ssl_st*, i32, i8*, i64)*, i32 (%struct.ssl_st*)*, i32 (%struct.ssl_st*, i32, i8)* }
%struct.ssl_early_callback_ctx = type { %struct.ssl_st*, i8*, i64, i16, i8*, i64, i8*, i64, i8*, i64, i8*, i64, i8*, i64 }
%"class.bssl::internal::StackAllocated.118" = type { %struct.cbb_st }
%struct.Extension = type <{ i16, [6 x i8], %"class.bssl::Span.1", i8, [7 x i8] }>
%"class.bssl::Span.1" = type { i8*, i64 }
%"class.bssl::ECHServerConfig" = type <{ %"class.bssl::Array", %"class.bssl::Span.1", %"class.bssl::internal::StackAllocated.121", i8, i8, [6 x i8] }>
%"class.bssl::internal::StackAllocated.121" = type { %struct.evp_hpke_key_st }
%struct.evp_hpke_key_st = type { %struct.evp_hpke_kem_st*, [32 x i8], [32 x i8] }
%struct.evp_hpke_kem_st = type opaque

@.str = private unnamed_addr constant [62 x i8] c"../../third_party/boringssl/src/ssl/encrypted_client_hello.cc\00", align 1
@_ZZNK4bssl15ECHServerConfig12SetupContextEP15evp_hpke_ctx_stttNS_4SpanIKhEEE10kInfoLabel = internal constant [8 x i8] c"tls ech\00", align 1
@.str.1 = private unnamed_addr constant [47 x i8] c"../../third_party/boringssl/src/ssl/internal.h\00", align 1

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZN4bssl29ssl_decode_client_hello_innerEP6ssl_stPhPNS_5ArrayIhEENS_4SpanIKhEEPK22ssl_early_callback_ctx(%struct.ssl_st*, i8* nocapture, %"class.bssl::Array"*, i8*, i64, %struct.ssl_early_callback_ctx* nocapture readonly) local_unnamed_addr #0 {
  %7 = alloca [32 x i8], align 8
  %8 = alloca %struct.ssl_early_callback_ctx, align 8
  %9 = alloca %"class.bssl::internal::StackAllocated.118", align 8
  %10 = alloca %struct.cbb_st, align 8
  %11 = alloca %struct.cbb_st, align 8
  %12 = alloca <2 x i64>, align 16
  %13 = bitcast <2 x i64>* %12 to %struct.cbs_st*
  %14 = alloca %struct.Extension, align 8
  %15 = alloca <2 x i64>, align 16
  %16 = bitcast <2 x i64>* %15 to %struct.cbs_st*
  %17 = alloca <2 x i64>, align 16
  %18 = bitcast <2 x i64>* %17 to %struct.cbs_st*
  %19 = alloca i16, align 2
  %20 = alloca %struct.cbs_st, align 8
  %21 = alloca %struct.cbs_st, align 8
  %22 = alloca i16, align 2
  %23 = alloca %struct.cbs_st, align 8
  %24 = alloca %struct.cbs_st, align 8
  %25 = alloca i16, align 2
  %26 = getelementptr inbounds [32 x i8], [32 x i8]* %7, i64 0, i64 0
  %27 = bitcast %struct.ssl_early_callback_ctx* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 112, i8* nonnull %27) #6
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %27, i8 -86, i64 112, i1 false)
  %28 = call zeroext i1 @_ZN4bssl21ssl_client_hello_initEPK6ssl_stP22ssl_early_callback_ctxNS_4SpanIKhEE(%struct.ssl_st* %0, %struct.ssl_early_callback_ctx* nonnull %8, i8* %3, i64 %4) #6
  br i1 %28, label %30, label %29

29:                                               ; preds = %6
  call void @ERR_put_error(i32 16, i32 0, i32 137, i8* getelementptr inbounds ([62 x i8], [62 x i8]* @.str, i64 0, i64 0), i32 84) #6
  br label %407

30:                                               ; preds = %6
  %31 = getelementptr inbounds %struct.ssl_early_callback_ctx, %struct.ssl_early_callback_ctx* %8, i64 0, i32 13
  %32 = load i64, i64* %31, align 8
  %33 = icmp eq i64 %32, 0
  br i1 %33, label %38, label %34

34:                                               ; preds = %30
  %35 = getelementptr inbounds %struct.ssl_early_callback_ctx, %struct.ssl_early_callback_ctx* %8, i64 0, i32 7
  %36 = load i64, i64* %35, align 8
  %37 = icmp eq i64 %36, 0
  br i1 %37, label %39, label %38

38:                                               ; preds = %34, %30
  call void @ERR_put_error(i32 16, i32 0, i32 137, i8* getelementptr inbounds ([62 x i8], [62 x i8]* @.str, i64 0, i64 0), i32 91) #6
  br label %407

39:                                               ; preds = %34
  %40 = getelementptr inbounds %struct.ssl_early_callback_ctx, %struct.ssl_early_callback_ctx* %5, i64 0, i32 6
  %41 = getelementptr inbounds %struct.ssl_early_callback_ctx, %struct.ssl_early_callback_ctx* %8, i64 0, i32 6
  %42 = bitcast i8** %40 to <2 x i64>*
  %43 = load <2 x i64>, <2 x i64>* %42, align 8
  %44 = bitcast i8** %41 to <2 x i64>*
  store <2 x i64> %43, <2 x i64>* %44, align 8
  %45 = bitcast %"class.bssl::internal::StackAllocated.118"* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %45) #6
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %45, i8 -86, i64 32, i1 false)
  %46 = getelementptr inbounds %"class.bssl::internal::StackAllocated.118", %"class.bssl::internal::StackAllocated.118"* %9, i64 0, i32 0
  call void @CBB_zero(%struct.cbb_st* nonnull %46) #6
  %47 = bitcast %struct.cbb_st* %10 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %47) #6
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %47, i8 -86, i64 32, i1 false)
  %48 = bitcast %struct.cbb_st* %11 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %48) #6
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %48, i8 -86, i64 32, i1 false)
  %49 = getelementptr inbounds %struct.ssl_st, %struct.ssl_st* %0, i64 0, i32 0
  %50 = load %"struct.bssl::SSL_PROTOCOL_METHOD"*, %"struct.bssl::SSL_PROTOCOL_METHOD"** %49, align 8
  %51 = getelementptr inbounds %"struct.bssl::SSL_PROTOCOL_METHOD", %"struct.bssl::SSL_PROTOCOL_METHOD"* %50, i64 0, i32 11
  %52 = load i1 (%struct.ssl_st*, %struct.cbb_st*, %struct.cbb_st*, i8)*, i1 (%struct.ssl_st*, %struct.cbb_st*, %struct.cbb_st*, i8)** %51, align 8
  %53 = call zeroext i1 %52(%struct.ssl_st* %0, %struct.cbb_st* nonnull %46, %struct.cbb_st* nonnull %10, i8 zeroext 1) #6
  br i1 %53, label %54, label %59

54:                                               ; preds = %39
  %55 = call fastcc zeroext i1 @_ZN4bsslL41ssl_client_hello_write_without_extensionsEPK22ssl_early_callback_ctxP6cbb_st(%struct.ssl_early_callback_ctx* nonnull %8, %struct.cbb_st* nonnull %10)
  br i1 %55, label %56, label %59

56:                                               ; preds = %54
  %57 = call i32 @CBB_add_u16_length_prefixed(%struct.cbb_st* nonnull %10, %struct.cbb_st* nonnull %11) #6
  %58 = icmp eq i32 %57, 0
  br i1 %58, label %59, label %60

59:                                               ; preds = %56, %54, %39
  call void @ERR_put_error(i32 16, i32 0, i32 68, i8* getelementptr inbounds ([62 x i8], [62 x i8]* @.str, i64 0, i64 0), i32 103) #6
  br label %405

60:                                               ; preds = %56
  %61 = bitcast <2 x i64>* %12 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %61) #6
  %62 = getelementptr inbounds %struct.ssl_early_callback_ctx, %struct.ssl_early_callback_ctx* %5, i64 0, i32 12
  %63 = bitcast i8** %62 to <2 x i64>*
  %64 = load <2 x i64>, <2 x i64>* %63, align 8
  store <2 x i64> %64, <2 x i64>* %12, align 16
  %65 = call i64 @CBS_len(%struct.cbs_st* nonnull %13) #6
  %66 = icmp eq i64 %65, 0
  br i1 %66, label %227, label %67

67:                                               ; preds = %60
  %68 = bitcast %struct.Extension* %14 to i8*
  %69 = getelementptr inbounds %struct.Extension, %struct.Extension* %14, i64 0, i32 0
  %70 = getelementptr inbounds %struct.Extension, %struct.Extension* %14, i64 0, i32 2, i32 0
  %71 = getelementptr inbounds %struct.Extension, %struct.Extension* %14, i64 0, i32 2
  %72 = bitcast %"class.bssl::Span.1"* %71 to i8*
  %73 = bitcast <2 x i64>* %15 to i8*
  %74 = bitcast %struct.Extension* %14 to i8*
  %75 = bitcast <2 x i64>* %15 to i8*
  %76 = bitcast i8** %70 to <2 x i64>*
  br label %77

77:                                               ; preds = %67, %218
  %78 = phi i64 [ 0, %67 ], [ %224, %218 ]
  %79 = phi i64 [ 0, %67 ], [ %220, %218 ]
  %80 = phi i64 [ 0, %67 ], [ %219, %218 ]
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %68) #6
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %74, i8 -86, i64 32, i1 false)
  store i16 0, i16* %69, align 8
  call void @llvm.memset.p0i8.i64(i8* align 8 %72, i8 0, i64 17, i1 false) #6
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %73) #6
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %75, i8 -86, i64 16, i1 false)
  %81 = call i32 @CBS_get_u16(%struct.cbs_st* nonnull %13, i16* nonnull %69) #6
  %82 = icmp eq i32 %81, 0
  br i1 %82, label %86, label %83

83:                                               ; preds = %77
  %84 = call i32 @CBS_get_u16_length_prefixed(%struct.cbs_st* nonnull %13, %struct.cbs_st* nonnull %16) #6
  %85 = icmp eq i32 %84, 0
  br i1 %85, label %86, label %87

86:                                               ; preds = %83, %77
  call void @ERR_put_error(i32 16, i32 0, i32 68, i8* getelementptr inbounds ([62 x i8], [62 x i8]* @.str, i64 0, i64 0), i32 135) #6
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %73) #6
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %68) #6
  br label %401

87:                                               ; preds = %83
  %88 = load <2 x i64>, <2 x i64>* %15, align 16
  store <2 x i64> %88, <2 x i64>* %76, align 8
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %26)
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %26, i8* nonnull align 8 %68, i64 32, i1 false)
  %89 = icmp eq i64 %80, 0
  br i1 %89, label %90, label %144

90:                                               ; preds = %87
  %91 = inttoptr i64 %79 to i8*
  call void @OPENSSL_free(i8* %91) #6
  %92 = call i8* @OPENSSL_malloc(i64 512) #6
  %93 = icmp eq i8* %92, null
  br i1 %93, label %94, label %95

94:                                               ; preds = %90
  call void @ERR_put_error(i32 16, i32 0, i32 65, i8* getelementptr inbounds ([47 x i8], [47 x i8]* @.str.1, i64 0, i64 0), i32 324) #6
  br label %216

95:                                               ; preds = %90
  %96 = ptrtoint i8* %92 to i64
  %97 = bitcast i8* %92 to i16*
  store i16 0, i16* %97, align 8
  %98 = getelementptr inbounds i8, i8* %92, i64 8
  call void @llvm.memset.p0i8.i64(i8* align 8 %98, i8 0, i64 17, i1 false) #6
  %99 = getelementptr inbounds i8, i8* %92, i64 32
  %100 = bitcast i8* %99 to i16*
  store i16 0, i16* %100, align 8
  %101 = getelementptr inbounds i8, i8* %92, i64 40
  call void @llvm.memset.p0i8.i64(i8* align 8 %101, i8 0, i64 17, i1 false) #6
  %102 = getelementptr inbounds i8, i8* %92, i64 64
  %103 = bitcast i8* %102 to i16*
  store i16 0, i16* %103, align 8
  %104 = getelementptr inbounds i8, i8* %92, i64 72
  call void @llvm.memset.p0i8.i64(i8* align 8 %104, i8 0, i64 17, i1 false) #6
  %105 = getelementptr inbounds i8, i8* %92, i64 96
  %106 = bitcast i8* %105 to i16*
  store i16 0, i16* %106, align 8
  %107 = getelementptr inbounds i8, i8* %92, i64 104
  call void @llvm.memset.p0i8.i64(i8* align 8 %107, i8 0, i64 17, i1 false) #6
  %108 = getelementptr inbounds i8, i8* %92, i64 128
  %109 = bitcast i8* %108 to i16*
  store i16 0, i16* %109, align 8
  %110 = getelementptr inbounds i8, i8* %92, i64 136
  call void @llvm.memset.p0i8.i64(i8* align 8 %110, i8 0, i64 17, i1 false) #6
  %111 = getelementptr inbounds i8, i8* %92, i64 160
  %112 = bitcast i8* %111 to i16*
  store i16 0, i16* %112, align 8
  %113 = getelementptr inbounds i8, i8* %92, i64 168
  call void @llvm.memset.p0i8.i64(i8* align 8 %113, i8 0, i64 17, i1 false) #6
  %114 = getelementptr inbounds i8, i8* %92, i64 192
  %115 = bitcast i8* %114 to i16*
  store i16 0, i16* %115, align 8
  %116 = getelementptr inbounds i8, i8* %92, i64 200
  call void @llvm.memset.p0i8.i64(i8* align 8 %116, i8 0, i64 17, i1 false) #6
  %117 = getelementptr inbounds i8, i8* %92, i64 224
  %118 = bitcast i8* %117 to i16*
  store i16 0, i16* %118, align 8
  %119 = getelementptr inbounds i8, i8* %92, i64 232
  call void @llvm.memset.p0i8.i64(i8* align 8 %119, i8 0, i64 17, i1 false) #6
  %120 = getelementptr inbounds i8, i8* %92, i64 256
  %121 = bitcast i8* %120 to i16*
  store i16 0, i16* %121, align 8
  %122 = getelementptr inbounds i8, i8* %92, i64 264
  call void @llvm.memset.p0i8.i64(i8* align 8 %122, i8 0, i64 17, i1 false) #6
  %123 = getelementptr inbounds i8, i8* %92, i64 288
  %124 = bitcast i8* %123 to i16*
  store i16 0, i16* %124, align 8
  %125 = getelementptr inbounds i8, i8* %92, i64 296
  call void @llvm.memset.p0i8.i64(i8* align 8 %125, i8 0, i64 17, i1 false) #6
  %126 = getelementptr inbounds i8, i8* %92, i64 320
  %127 = bitcast i8* %126 to i16*
  store i16 0, i16* %127, align 8
  %128 = getelementptr inbounds i8, i8* %92, i64 328
  call void @llvm.memset.p0i8.i64(i8* align 8 %128, i8 0, i64 17, i1 false) #6
  %129 = getelementptr inbounds i8, i8* %92, i64 352
  %130 = bitcast i8* %129 to i16*
  store i16 0, i16* %130, align 8
  %131 = getelementptr inbounds i8, i8* %92, i64 360
  call void @llvm.memset.p0i8.i64(i8* align 8 %131, i8 0, i64 17, i1 false) #6
  %132 = getelementptr inbounds i8, i8* %92, i64 384
  %133 = bitcast i8* %132 to i16*
  store i16 0, i16* %133, align 8
  %134 = getelementptr inbounds i8, i8* %92, i64 392
  call void @llvm.memset.p0i8.i64(i8* align 8 %134, i8 0, i64 17, i1 false) #6
  %135 = getelementptr inbounds i8, i8* %92, i64 416
  %136 = bitcast i8* %135 to i16*
  store i16 0, i16* %136, align 8
  %137 = getelementptr inbounds i8, i8* %92, i64 424
  call void @llvm.memset.p0i8.i64(i8* align 8 %137, i8 0, i64 17, i1 false) #6
  %138 = getelementptr inbounds i8, i8* %92, i64 448
  %139 = bitcast i8* %138 to i16*
  store i16 0, i16* %139, align 8
  %140 = getelementptr inbounds i8, i8* %92, i64 456
  call void @llvm.memset.p0i8.i64(i8* align 8 %140, i8 0, i64 17, i1 false) #6
  %141 = getelementptr inbounds i8, i8* %92, i64 480
  %142 = bitcast i8* %141 to i16*
  store i16 0, i16* %142, align 8
  %143 = getelementptr inbounds i8, i8* %92, i64 488
  call void @llvm.memset.p0i8.i64(i8* align 8 %143, i8 0, i64 17, i1 false) #6
  br label %218

144:                                              ; preds = %87
  %145 = icmp ult i64 %78, %80
  br i1 %145, label %218, label %146

146:                                              ; preds = %144
  %147 = icmp slt i64 %80, 0
  br i1 %147, label %148, label %149

148:                                              ; preds = %146
  call void @ERR_put_error(i32 16, i32 0, i32 69, i8* getelementptr inbounds ([47 x i8], [47 x i8]* @.str.1, i64 0, i64 0), i32 435) #6
  br label %216

149:                                              ; preds = %146
  %150 = shl i64 %80, 1
  call void @OPENSSL_free(i8* null) #6
  %151 = icmp eq i64 %150, 0
  br i1 %151, label %201, label %152

152:                                              ; preds = %149
  %153 = icmp ugt i64 %150, 576460752303423487
  br i1 %153, label %154, label %155

154:                                              ; preds = %152
  call void @ERR_put_error(i32 16, i32 0, i32 69, i8* getelementptr inbounds ([47 x i8], [47 x i8]* @.str.1, i64 0, i64 0), i32 319) #6
  br label %213

155:                                              ; preds = %152
  %156 = shl i64 %80, 6
  %157 = call i8* @OPENSSL_malloc(i64 %156) #6
  %158 = ptrtoint i8* %157 to i64
  %159 = icmp eq i8* %157, null
  br i1 %159, label %167, label %160

160:                                              ; preds = %155
  %161 = bitcast i8* %157 to %struct.Extension*
  %162 = add i64 %150, -1
  %163 = and i64 %150, 2
  %164 = icmp ult i64 %162, 3
  br i1 %164, label %189, label %165

165:                                              ; preds = %160
  %166 = sub i64 %150, %163
  br label %168

167:                                              ; preds = %155
  call void @ERR_put_error(i32 16, i32 0, i32 65, i8* getelementptr inbounds ([47 x i8], [47 x i8]* @.str.1, i64 0, i64 0), i32 324) #6
  br label %213

168:                                              ; preds = %168, %165
  %169 = phi i64 [ 0, %165 ], [ %186, %168 ]
  %170 = phi i64 [ %166, %165 ], [ %187, %168 ]
  %171 = getelementptr inbounds %struct.Extension, %struct.Extension* %161, i64 %169, i32 0
  store i16 0, i16* %171, align 8
  %172 = getelementptr inbounds %struct.Extension, %struct.Extension* %161, i64 %169, i32 2
  %173 = bitcast %"class.bssl::Span.1"* %172 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %173, i8 0, i64 17, i1 false) #6
  %174 = or i64 %169, 1
  %175 = getelementptr inbounds %struct.Extension, %struct.Extension* %161, i64 %174, i32 0
  store i16 0, i16* %175, align 8
  %176 = getelementptr inbounds %struct.Extension, %struct.Extension* %161, i64 %174, i32 2
  %177 = bitcast %"class.bssl::Span.1"* %176 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %177, i8 0, i64 17, i1 false) #6
  %178 = or i64 %169, 2
  %179 = getelementptr inbounds %struct.Extension, %struct.Extension* %161, i64 %178, i32 0
  store i16 0, i16* %179, align 8
  %180 = getelementptr inbounds %struct.Extension, %struct.Extension* %161, i64 %178, i32 2
  %181 = bitcast %"class.bssl::Span.1"* %180 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %181, i8 0, i64 17, i1 false) #6
  %182 = or i64 %169, 3
  %183 = getelementptr inbounds %struct.Extension, %struct.Extension* %161, i64 %182, i32 0
  store i16 0, i16* %183, align 8
  %184 = getelementptr inbounds %struct.Extension, %struct.Extension* %161, i64 %182, i32 2
  %185 = bitcast %"class.bssl::Span.1"* %184 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %185, i8 0, i64 17, i1 false) #6
  %186 = add nuw i64 %169, 4
  %187 = add i64 %170, -4
  %188 = icmp eq i64 %187, 0
  br i1 %188, label %189, label %168

189:                                              ; preds = %168, %160
  %190 = phi i64 [ 0, %160 ], [ %186, %168 ]
  %191 = icmp eq i64 %163, 0
  br i1 %191, label %201, label %192

192:                                              ; preds = %189, %192
  %193 = phi i64 [ %198, %192 ], [ %190, %189 ]
  %194 = phi i64 [ %199, %192 ], [ %163, %189 ]
  %195 = getelementptr inbounds %struct.Extension, %struct.Extension* %161, i64 %193, i32 0
  store i16 0, i16* %195, align 8
  %196 = getelementptr inbounds %struct.Extension, %struct.Extension* %161, i64 %193, i32 2
  %197 = bitcast %"class.bssl::Span.1"* %196 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %197, i8 0, i64 17, i1 false) #6
  %198 = add nuw i64 %193, 1
  %199 = add i64 %194, -1
  %200 = icmp eq i64 %199, 0
  br i1 %200, label %201, label %192, !llvm.loop !2

201:                                              ; preds = %189, %192, %149
  %202 = phi i64 [ 0, %149 ], [ %158, %192 ], [ %158, %189 ]
  %203 = inttoptr i64 %202 to %struct.Extension*
  %204 = inttoptr i64 %79 to %struct.Extension*
  br label %205

205:                                              ; preds = %205, %201
  %206 = phi i64 [ 0, %201 ], [ %211, %205 ]
  %207 = getelementptr inbounds %struct.Extension, %struct.Extension* %204, i64 %206
  %208 = getelementptr inbounds %struct.Extension, %struct.Extension* %203, i64 %206
  %209 = bitcast %struct.Extension* %208 to i8*
  %210 = bitcast %struct.Extension* %207 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %209, i8* align 8 %210, i64 25, i1 false) #6
  %211 = add nuw i64 %206, 1
  %212 = icmp ult i64 %211, %80
  br i1 %212, label %205, label %214

213:                                              ; preds = %167, %154
  call void @OPENSSL_free(i8* null) #6
  br label %216

214:                                              ; preds = %205
  %215 = inttoptr i64 %79 to i8*
  call void @OPENSSL_free(i8* %215) #6
  call void @OPENSSL_free(i8* null) #6
  br label %218

216:                                              ; preds = %94, %148, %213
  %217 = phi i64 [ %79, %213 ], [ %79, %148 ], [ 0, %94 ]
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %26)
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %73) #6
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %68) #6
  br label %401

218:                                              ; preds = %95, %144, %214
  %219 = phi i64 [ %80, %144 ], [ %150, %214 ], [ 16, %95 ]
  %220 = phi i64 [ %79, %144 ], [ %202, %214 ], [ %96, %95 ]
  %221 = inttoptr i64 %220 to %struct.Extension*
  %222 = getelementptr inbounds %struct.Extension, %struct.Extension* %221, i64 %78
  %223 = bitcast %struct.Extension* %222 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %223, i8* nonnull align 8 %26, i64 25, i1 false) #6
  %224 = add i64 %78, 1
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %26)
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %73) #6
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %68) #6
  %225 = call i64 @CBS_len(%struct.cbs_st* nonnull %13) #6
  %226 = icmp eq i64 %225, 0
  br i1 %226, label %227, label %77

227:                                              ; preds = %218, %60
  %228 = phi i64 [ 0, %60 ], [ %220, %218 ]
  %229 = phi i64 [ 0, %60 ], [ %224, %218 ]
  %230 = inttoptr i64 %228 to i8*
  call void @qsort(i8* %230, i64 %229, i64 32, i32 (i8*, i8*)* nonnull @"_ZZN4bssl29ssl_decode_client_hello_innerEP6ssl_stPhPNS_5ArrayIhEENS_4SpanIKhEEPK22ssl_early_callback_ctxEN3$_08__invokeEPKvSE_") #6
  %231 = bitcast <2 x i64>* %17 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %231) #6
  %232 = getelementptr inbounds %struct.ssl_early_callback_ctx, %struct.ssl_early_callback_ctx* %8, i64 0, i32 12
  %233 = bitcast i8** %232 to <2 x i64>*
  %234 = load <2 x i64>, <2 x i64>* %233, align 8
  store <2 x i64> %234, <2 x i64>* %17, align 16
  %235 = call i64 @CBS_len(%struct.cbs_st* nonnull %18) #6
  %236 = icmp eq i64 %235, 0
  br i1 %236, label %341, label %237

237:                                              ; preds = %227
  %238 = bitcast i16* %19 to i8*
  %239 = bitcast %struct.cbs_st* %20 to i8*
  %240 = bitcast %struct.cbs_st* %21 to i8*
  %241 = bitcast i16* %22 to i8*
  %242 = icmp eq i64 %229, 0
  %243 = bitcast %struct.cbs_st* %20 to i8*
  %244 = bitcast %struct.cbs_st* %21 to i8*
  br label %245

245:                                              ; preds = %237, %338
  call void @llvm.lifetime.start.p0i8(i64 2, i8* nonnull %238) #6
  store i16 -21846, i16* %19, align 2
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %239) #6
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %243, i8 -86, i64 16, i1 false)
  %246 = call i32 @CBS_get_u16(%struct.cbs_st* nonnull %18, i16* nonnull %19) #6
  %247 = icmp eq i32 %246, 0
  br i1 %247, label %251, label %248

248:                                              ; preds = %245
  %249 = call i32 @CBS_get_u16_length_prefixed(%struct.cbs_st* nonnull %18, %struct.cbs_st* nonnull %20) #6
  %250 = icmp eq i32 %249, 0
  br i1 %250, label %251, label %252

251:                                              ; preds = %248, %245
  call void @ERR_put_error(i32 16, i32 0, i32 137, i8* getelementptr inbounds ([62 x i8], [62 x i8]* @.str, i64 0, i64 0), i32 154) #6
  br label %336

252:                                              ; preds = %248
  %253 = load i16, i16* %19, align 2
  %254 = icmp eq i16 %253, -768
  br i1 %254, label %269, label %255

255:                                              ; preds = %252
  %256 = call i32 @CBB_add_u16(%struct.cbb_st* nonnull %11, i16 zeroext %253) #6
  %257 = icmp eq i32 %256, 0
  br i1 %257, label %268, label %258

258:                                              ; preds = %255
  %259 = call i64 @CBS_len(%struct.cbs_st* nonnull %20) #6
  %260 = trunc i64 %259 to i16
  %261 = call i32 @CBB_add_u16(%struct.cbb_st* nonnull %11, i16 zeroext %260) #6
  %262 = icmp eq i32 %261, 0
  br i1 %262, label %268, label %263

263:                                              ; preds = %258
  %264 = call i8* @CBS_data(%struct.cbs_st* nonnull %20) #6
  %265 = call i64 @CBS_len(%struct.cbs_st* nonnull %20) #6
  %266 = call i32 @CBB_add_bytes(%struct.cbb_st* nonnull %11, i8* %264, i64 %265) #6
  %267 = icmp eq i32 %266, 0
  br i1 %267, label %268, label %338

268:                                              ; preds = %263, %258, %255
  call void @ERR_put_error(i32 16, i32 0, i32 68, i8* getelementptr inbounds ([62 x i8], [62 x i8]* @.str, i64 0, i64 0), i32 162) #6
  br label %336

269:                                              ; preds = %252
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %240) #6
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %244, i8 -86, i64 16, i1 false)
  %270 = call i32 @CBS_get_u8_length_prefixed(%struct.cbs_st* nonnull %20, %struct.cbs_st* nonnull %21) #6
  %271 = icmp eq i32 %270, 0
  br i1 %271, label %278, label %272

272:                                              ; preds = %269
  %273 = call i64 @CBS_len(%struct.cbs_st* nonnull %20) #6
  %274 = icmp eq i64 %273, 0
  br i1 %274, label %275, label %278

275:                                              ; preds = %272
  %276 = call i64 @CBS_len(%struct.cbs_st* nonnull %21) #6
  %277 = icmp eq i64 %276, 0
  br i1 %277, label %337, label %279

278:                                              ; preds = %272, %269
  call void @ERR_put_error(i32 16, i32 0, i32 137, i8* getelementptr inbounds ([62 x i8], [62 x i8]* @.str, i64 0, i64 0), i32 172) #6
  br label %398

279:                                              ; preds = %275, %333
  call void @llvm.lifetime.start.p0i8(i64 2, i8* nonnull %241) #6
  store i16 -21846, i16* %22, align 2
  %280 = call i32 @CBS_get_u16(%struct.cbs_st* nonnull %21, i16* nonnull %22) #6
  %281 = icmp eq i32 %280, 0
  br i1 %281, label %282, label %283

282:                                              ; preds = %279
  call void @ERR_put_error(i32 16, i32 0, i32 137, i8* getelementptr inbounds ([62 x i8], [62 x i8]* @.str, i64 0, i64 0), i32 178) #6
  br label %332

283:                                              ; preds = %279
  %284 = load i16, i16* %22, align 2
  %285 = icmp eq i16 %284, -502
  br i1 %285, label %286, label %287

286:                                              ; preds = %283
  store i8 47, i8* %1, align 1
  call void @ERR_put_error(i32 16, i32 0, i32 137, i8* getelementptr inbounds ([62 x i8], [62 x i8]* @.str, i64 0, i64 0), i32 183) #6
  br label %332

287:                                              ; preds = %283
  br i1 %242, label %308, label %288

288:                                              ; preds = %287, %302
  %289 = phi i64 [ %304, %302 ], [ %229, %287 ]
  %290 = phi i64 [ %303, %302 ], [ 0, %287 ]
  %291 = add i64 %290, %289
  %292 = lshr i64 %291, 1
  %293 = shl i64 %292, 5
  %294 = getelementptr inbounds i8, i8* %230, i64 %293
  %295 = bitcast i8* %294 to i16*
  %296 = load i16, i16* %295, align 8
  %297 = icmp ult i16 %284, %296
  br i1 %297, label %302, label %298

298:                                              ; preds = %288
  %299 = icmp ugt i16 %284, %296
  br i1 %299, label %300, label %306

300:                                              ; preds = %298
  %301 = add nuw i64 %292, 1
  br label %302

302:                                              ; preds = %300, %288
  %303 = phi i64 [ %301, %300 ], [ %290, %288 ]
  %304 = phi i64 [ %289, %300 ], [ %292, %288 ]
  %305 = icmp ult i64 %303, %304
  br i1 %305, label %288, label %308

306:                                              ; preds = %298
  %307 = icmp eq i8* %294, null
  br i1 %307, label %308, label %309

308:                                              ; preds = %287, %306, %302
  store i8 47, i8* %1, align 1
  call void @ERR_put_error(i32 16, i32 0, i32 137, i8* getelementptr inbounds ([62 x i8], [62 x i8]* @.str, i64 0, i64 0), i32 194) #6
  br label %332

309:                                              ; preds = %306
  %310 = getelementptr inbounds i8, i8* %294, i64 24
  %311 = load i8, i8* %310, align 8, !range !4
  %312 = icmp eq i8 %311, 0
  br i1 %312, label %314, label %313

313:                                              ; preds = %309
  store i8 47, i8* %1, align 1
  call void @ERR_put_error(i32 16, i32 0, i32 257, i8* getelementptr inbounds ([62 x i8], [62 x i8]* @.str, i64 0, i64 0), i32 201) #6
  br label %332

314:                                              ; preds = %309
  store i8 1, i8* %310, align 8
  %315 = call i32 @CBB_add_u16(%struct.cbb_st* nonnull %11, i16 zeroext %284) #6
  %316 = icmp eq i32 %315, 0
  br i1 %316, label %331, label %317

317:                                              ; preds = %314
  %318 = getelementptr inbounds i8, i8* %294, i64 8
  %319 = getelementptr inbounds i8, i8* %318, i64 8
  %320 = bitcast i8* %319 to i64*
  %321 = load i64, i64* %320, align 8
  %322 = trunc i64 %321 to i16
  %323 = call i32 @CBB_add_u16(%struct.cbb_st* nonnull %11, i16 zeroext %322) #6
  %324 = icmp eq i32 %323, 0
  br i1 %324, label %331, label %325

325:                                              ; preds = %317
  %326 = bitcast i8* %318 to i8**
  %327 = load i8*, i8** %326, align 8
  %328 = load i64, i64* %320, align 8
  %329 = call i32 @CBB_add_bytes(%struct.cbb_st* nonnull %11, i8* %327, i64 %328) #6
  %330 = icmp eq i32 %329, 0
  br i1 %330, label %331, label %333

331:                                              ; preds = %325, %317, %314
  call void @ERR_put_error(i32 16, i32 0, i32 65, i8* getelementptr inbounds ([62 x i8], [62 x i8]* @.str, i64 0, i64 0), i32 210) #6
  br label %332

332:                                              ; preds = %286, %282, %308, %313, %331
  call void @llvm.lifetime.end.p0i8(i64 2, i8* nonnull %241) #6
  br label %398

333:                                              ; preds = %325
  call void @llvm.lifetime.end.p0i8(i64 2, i8* nonnull %241) #6
  %334 = call i64 @CBS_len(%struct.cbs_st* nonnull %21) #6
  %335 = icmp eq i64 %334, 0
  br i1 %335, label %337, label %279

336:                                              ; preds = %268, %251
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %239) #6
  call void @llvm.lifetime.end.p0i8(i64 2, i8* nonnull %238) #6
  br label %399

337:                                              ; preds = %333, %275
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %240) #6
  br label %338

338:                                              ; preds = %263, %337
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %239) #6
  call void @llvm.lifetime.end.p0i8(i64 2, i8* nonnull %238) #6
  %339 = call i64 @CBS_len(%struct.cbs_st* nonnull %18) #6
  %340 = icmp eq i64 %339, 0
  br i1 %340, label %341, label %245

341:                                              ; preds = %338, %227
  %342 = call i32 @CBB_flush(%struct.cbb_st* nonnull %10) #6
  %343 = icmp eq i32 %342, 0
  br i1 %343, label %344, label %345

344:                                              ; preds = %341
  call void @ERR_put_error(i32 16, i32 0, i32 68, i8* getelementptr inbounds ([62 x i8], [62 x i8]* @.str, i64 0, i64 0), i32 216) #6
  br label %399

345:                                              ; preds = %341
  %346 = bitcast %struct.cbs_st* %23 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %346) #6
  %347 = bitcast %struct.cbs_st* %23 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %347, i8 -86, i64 16, i1 false)
  %348 = call i8* @CBB_data(%struct.cbb_st* nonnull %10) #6
  %349 = call i64 @CBB_len(%struct.cbb_st* nonnull %10) #6
  %350 = call zeroext i1 @_ZN4bssl21ssl_client_hello_initEPK6ssl_stP22ssl_early_callback_ctxNS_4SpanIKhEE(%struct.ssl_st* %0, %struct.ssl_early_callback_ctx* nonnull %8, i8* %348, i64 %349) #6
  br i1 %350, label %351, label %360

351:                                              ; preds = %345
  %352 = call zeroext i1 @_ZN4bssl30ssl_client_hello_get_extensionEPK22ssl_early_callback_ctxP6cbs_stt(%struct.ssl_early_callback_ctx* nonnull %8, %struct.cbs_st* nonnull %23, i16 zeroext -9719) #6
  br i1 %352, label %353, label %360

353:                                              ; preds = %351
  %354 = call i64 @CBS_len(%struct.cbs_st* nonnull %23) #6
  %355 = icmp eq i64 %354, 0
  br i1 %355, label %356, label %360

356:                                              ; preds = %353
  %357 = call zeroext i1 @_ZN4bssl30ssl_client_hello_get_extensionEPK22ssl_early_callback_ctxP6cbs_stt(%struct.ssl_early_callback_ctx* nonnull %8, %struct.cbs_st* nonnull %23, i16 zeroext -502) #6
  br i1 %357, label %360, label %358

358:                                              ; preds = %356
  %359 = call zeroext i1 @_ZN4bssl30ssl_client_hello_get_extensionEPK22ssl_early_callback_ctxP6cbs_stt(%struct.ssl_early_callback_ctx* nonnull %8, %struct.cbs_st* nonnull %23, i16 zeroext 43) #6
  br i1 %359, label %361, label %360

360:                                              ; preds = %358, %353, %345, %351, %356
  store i8 47, i8* %1, align 1
  call void @ERR_put_error(i32 16, i32 0, i32 314, i8* getelementptr inbounds ([62 x i8], [62 x i8]* @.str, i64 0, i64 0), i32 232) #6
  br label %396

361:                                              ; preds = %358
  %362 = bitcast %struct.cbs_st* %24 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %362) #6
  %363 = bitcast %struct.cbs_st* %24 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %363, i8 -86, i64 16, i1 false)
  %364 = call i32 @CBS_get_u8_length_prefixed(%struct.cbs_st* nonnull %23, %struct.cbs_st* nonnull %24) #6
  %365 = icmp eq i32 %364, 0
  br i1 %365, label %377, label %366

366:                                              ; preds = %361
  %367 = call i64 @CBS_len(%struct.cbs_st* nonnull %23) #6
  %368 = icmp eq i64 %367, 0
  br i1 %368, label %369, label %377

369:                                              ; preds = %366
  %370 = call i64 @CBS_len(%struct.cbs_st* nonnull %24) #6
  %371 = icmp eq i64 %370, 0
  br i1 %371, label %377, label %372

372:                                              ; preds = %369
  %373 = call i64 @CBS_len(%struct.cbs_st* nonnull %24) #6
  %374 = icmp eq i64 %373, 0
  br i1 %374, label %388, label %375

375:                                              ; preds = %372
  %376 = bitcast i16* %25 to i8*
  br label %378

377:                                              ; preds = %366, %361, %369
  store i8 50, i8* %1, align 1
  call void @ERR_put_error(i32 16, i32 0, i32 137, i8* getelementptr inbounds ([62 x i8], [62 x i8]* @.str, i64 0, i64 0), i32 242) #6
  br label %394

378:                                              ; preds = %375, %385
  call void @llvm.lifetime.start.p0i8(i64 2, i8* nonnull %376) #6
  store i16 -21846, i16* %25, align 2
  %379 = call i32 @CBS_get_u16(%struct.cbs_st* nonnull %24, i16* nonnull %25) #6
  %380 = icmp eq i32 %379, 0
  br i1 %380, label %381, label %382

381:                                              ; preds = %378
  store i8 50, i8* %1, align 1
  call void @ERR_put_error(i32 16, i32 0, i32 137, i8* getelementptr inbounds ([62 x i8], [62 x i8]* @.str, i64 0, i64 0), i32 249) #6
  call void @llvm.lifetime.end.p0i8(i64 2, i8* nonnull %376) #6
  br label %394

382:                                              ; preds = %378
  %383 = load i16, i16* %25, align 2
  switch i16 %383, label %385 [
    i16 768, label %384
    i16 769, label %384
    i16 770, label %384
    i16 771, label %384
    i16 -257, label %384
    i16 -259, label %384
  ]

384:                                              ; preds = %382, %382, %382, %382, %382, %382
  store i8 47, i8* %1, align 1
  call void @ERR_put_error(i32 16, i32 0, i32 314, i8* getelementptr inbounds ([62 x i8], [62 x i8]* @.str, i64 0, i64 0), i32 256) #6
  call void @llvm.lifetime.end.p0i8(i64 2, i8* nonnull %376) #6
  br label %394

385:                                              ; preds = %382
  call void @llvm.lifetime.end.p0i8(i64 2, i8* nonnull %376) #6
  %386 = call i64 @CBS_len(%struct.cbs_st* nonnull %24) #6
  %387 = icmp eq i64 %386, 0
  br i1 %387, label %388, label %378

388:                                              ; preds = %385, %372
  %389 = load %"struct.bssl::SSL_PROTOCOL_METHOD"*, %"struct.bssl::SSL_PROTOCOL_METHOD"** %49, align 8
  %390 = getelementptr inbounds %"struct.bssl::SSL_PROTOCOL_METHOD", %"struct.bssl::SSL_PROTOCOL_METHOD"* %389, i64 0, i32 12
  %391 = load i1 (%struct.ssl_st*, %struct.cbb_st*, %"class.bssl::Array"*)*, i1 (%struct.ssl_st*, %struct.cbb_st*, %"class.bssl::Array"*)** %390, align 8
  %392 = call zeroext i1 %391(%struct.ssl_st* %0, %struct.cbb_st* nonnull %46, %"class.bssl::Array"* %2) #6
  br i1 %392, label %394, label %393

393:                                              ; preds = %388
  call void @ERR_put_error(i32 16, i32 0, i32 68, i8* getelementptr inbounds ([62 x i8], [62 x i8]* @.str, i64 0, i64 0), i32 262) #6
  br label %394

394:                                              ; preds = %388, %381, %384, %393, %377
  %395 = phi i1 [ false, %377 ], [ false, %393 ], [ false, %384 ], [ false, %381 ], [ true, %388 ]
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %362) #6
  br label %396

396:                                              ; preds = %394, %360
  %397 = phi i1 [ false, %360 ], [ %395, %394 ]
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %346) #6
  br label %399

398:                                              ; preds = %278, %332
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %240) #6
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %239) #6
  call void @llvm.lifetime.end.p0i8(i64 2, i8* nonnull %238) #6
  br label %399

399:                                              ; preds = %398, %336, %396, %344
  %400 = phi i1 [ %397, %396 ], [ false, %344 ], [ false, %336 ], [ false, %398 ]
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %231) #6
  br label %401

401:                                              ; preds = %216, %86, %399
  %402 = phi i64 [ %228, %399 ], [ %79, %86 ], [ %217, %216 ]
  %403 = phi i1 [ %400, %399 ], [ false, %86 ], [ false, %216 ]
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %61) #6
  %404 = inttoptr i64 %402 to i8*
  call void @OPENSSL_free(i8* %404) #6
  br label %405

405:                                              ; preds = %401, %59
  %406 = phi i1 [ %403, %401 ], [ false, %59 ]
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %48) #6
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %47) #6
  call void @CBB_cleanup(%struct.cbb_st* nonnull %46) #6
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %45) #6
  br label %407

407:                                              ; preds = %405, %38, %29
  %408 = phi i1 [ false, %38 ], [ %406, %405 ], [ false, %29 ]
  call void @llvm.lifetime.end.p0i8(i64 112, i8* nonnull %27) #6
  ret i1 %408
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

declare zeroext i1 @_ZN4bssl21ssl_client_hello_initEPK6ssl_stP22ssl_early_callback_ctxNS_4SpanIKhEE(%struct.ssl_st*, %struct.ssl_early_callback_ctx*, i8*, i64) local_unnamed_addr #2

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #1

declare void @ERR_put_error(i32, i32, i32, i8*, i32) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define internal fastcc zeroext i1 @_ZN4bsslL41ssl_client_hello_write_without_extensionsEPK22ssl_early_callback_ctxP6cbb_st(%struct.ssl_early_callback_ctx* nocapture readonly, %struct.cbb_st*) unnamed_addr #0 {
  %3 = alloca %struct.cbb_st, align 8
  %4 = bitcast %struct.cbb_st* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %4) #6
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %4, i8 -86, i64 32, i1 false)
  %5 = getelementptr inbounds %struct.ssl_early_callback_ctx, %struct.ssl_early_callback_ctx* %0, i64 0, i32 3
  %6 = load i16, i16* %5, align 8
  %7 = tail call i32 @CBB_add_u16(%struct.cbb_st* %1, i16 zeroext %6) #6
  %8 = icmp eq i32 %7, 0
  br i1 %8, label %49, label %9

9:                                                ; preds = %2
  %10 = getelementptr inbounds %struct.ssl_early_callback_ctx, %struct.ssl_early_callback_ctx* %0, i64 0, i32 4
  %11 = load i8*, i8** %10, align 8
  %12 = getelementptr inbounds %struct.ssl_early_callback_ctx, %struct.ssl_early_callback_ctx* %0, i64 0, i32 5
  %13 = load i64, i64* %12, align 8
  %14 = tail call i32 @CBB_add_bytes(%struct.cbb_st* %1, i8* %11, i64 %13) #6
  %15 = icmp eq i32 %14, 0
  br i1 %15, label %49, label %16

16:                                               ; preds = %9
  %17 = call i32 @CBB_add_u8_length_prefixed(%struct.cbb_st* %1, %struct.cbb_st* nonnull %3) #6
  %18 = icmp eq i32 %17, 0
  br i1 %18, label %49, label %19

19:                                               ; preds = %16
  %20 = getelementptr inbounds %struct.ssl_early_callback_ctx, %struct.ssl_early_callback_ctx* %0, i64 0, i32 6
  %21 = load i8*, i8** %20, align 8
  %22 = getelementptr inbounds %struct.ssl_early_callback_ctx, %struct.ssl_early_callback_ctx* %0, i64 0, i32 7
  %23 = load i64, i64* %22, align 8
  %24 = call i32 @CBB_add_bytes(%struct.cbb_st* nonnull %3, i8* %21, i64 %23) #6
  %25 = icmp eq i32 %24, 0
  br i1 %25, label %49, label %26

26:                                               ; preds = %19
  %27 = call i32 @CBB_add_u16_length_prefixed(%struct.cbb_st* %1, %struct.cbb_st* nonnull %3) #6
  %28 = icmp eq i32 %27, 0
  br i1 %28, label %49, label %29

29:                                               ; preds = %26
  %30 = getelementptr inbounds %struct.ssl_early_callback_ctx, %struct.ssl_early_callback_ctx* %0, i64 0, i32 8
  %31 = load i8*, i8** %30, align 8
  %32 = getelementptr inbounds %struct.ssl_early_callback_ctx, %struct.ssl_early_callback_ctx* %0, i64 0, i32 9
  %33 = load i64, i64* %32, align 8
  %34 = call i32 @CBB_add_bytes(%struct.cbb_st* nonnull %3, i8* %31, i64 %33) #6
  %35 = icmp eq i32 %34, 0
  br i1 %35, label %49, label %36

36:                                               ; preds = %29
  %37 = call i32 @CBB_add_u8_length_prefixed(%struct.cbb_st* %1, %struct.cbb_st* nonnull %3) #6
  %38 = icmp eq i32 %37, 0
  br i1 %38, label %49, label %39

39:                                               ; preds = %36
  %40 = getelementptr inbounds %struct.ssl_early_callback_ctx, %struct.ssl_early_callback_ctx* %0, i64 0, i32 10
  %41 = load i8*, i8** %40, align 8
  %42 = getelementptr inbounds %struct.ssl_early_callback_ctx, %struct.ssl_early_callback_ctx* %0, i64 0, i32 11
  %43 = load i64, i64* %42, align 8
  %44 = call i32 @CBB_add_bytes(%struct.cbb_st* nonnull %3, i8* %41, i64 %43) #6
  %45 = icmp eq i32 %44, 0
  br i1 %45, label %49, label %46

46:                                               ; preds = %39
  %47 = call i32 @CBB_flush(%struct.cbb_st* %1) #6
  %48 = icmp ne i32 %47, 0
  br label %49

49:                                               ; preds = %46, %2, %9, %16, %19, %26, %29, %36, %39
  %50 = phi i1 [ false, %39 ], [ false, %36 ], [ false, %29 ], [ false, %26 ], [ false, %19 ], [ false, %16 ], [ false, %9 ], [ false, %2 ], [ %48, %46 ]
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %4) #6
  ret i1 %50
}

declare i32 @CBB_add_u16_length_prefixed(%struct.cbb_st*, %struct.cbb_st*) local_unnamed_addr #2

declare i64 @CBS_len(%struct.cbs_st*) local_unnamed_addr #2

declare i32 @CBS_get_u16(%struct.cbs_st*, i16*) local_unnamed_addr #2

declare i32 @CBS_get_u16_length_prefixed(%struct.cbs_st*, %struct.cbs_st*) local_unnamed_addr #2

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: nofree
declare void @qsort(i8*, i64, i64, i32 (i8*, i8*)* nocapture) local_unnamed_addr #3

declare i32 @CBB_add_u16(%struct.cbb_st*, i16 zeroext) local_unnamed_addr #2

declare i32 @CBB_add_bytes(%struct.cbb_st*, i8*, i64) local_unnamed_addr #2

declare i8* @CBS_data(%struct.cbs_st*) local_unnamed_addr #2

declare i32 @CBS_get_u8_length_prefixed(%struct.cbs_st*, %struct.cbs_st*) local_unnamed_addr #2

declare i32 @CBB_flush(%struct.cbb_st*) local_unnamed_addr #2

declare i8* @CBB_data(%struct.cbb_st*) local_unnamed_addr #2

declare i64 @CBB_len(%struct.cbb_st*) local_unnamed_addr #2

declare zeroext i1 @_ZN4bssl30ssl_client_hello_get_extensionEPK22ssl_early_callback_ctxP6cbs_stt(%struct.ssl_early_callback_ctx*, %struct.cbs_st*, i16 zeroext) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZN4bssl24ssl_client_hello_decryptEP15evp_hpke_ctx_stPNS_5ArrayIhEEPbPK22ssl_early_callback_ctxtthNS_4SpanIKhEESB_(%struct.evp_hpke_ctx_st*, %"class.bssl::Array"* nocapture, i8* nocapture, %struct.ssl_early_callback_ctx* nocapture readonly, i16 zeroext, i16 zeroext, i8 zeroext, %"class.bssl::Span.1"* nocapture readonly byval(%"class.bssl::Span.1") align 8, %"class.bssl::Span.1"* nocapture readonly byval(%"class.bssl::Span.1") align 8) local_unnamed_addr #0 {
  %10 = alloca %"class.bssl::internal::StackAllocated.118", align 8
  %11 = alloca %struct.cbb_st, align 8
  %12 = alloca %struct.cbb_st, align 8
  %13 = alloca %struct.cbb_st, align 8
  %14 = alloca <2 x i64>, align 16
  %15 = bitcast <2 x i64>* %14 to %struct.cbs_st*
  %16 = alloca i16, align 2
  %17 = alloca %struct.cbs_st, align 8
  %18 = alloca i64, align 8
  store i8 0, i8* %2, align 1
  %19 = bitcast %"class.bssl::internal::StackAllocated.118"* %10 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %19) #6
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %19, i8 -86, i64 32, i1 false)
  %20 = getelementptr inbounds %"class.bssl::internal::StackAllocated.118", %"class.bssl::internal::StackAllocated.118"* %10, i64 0, i32 0
  call void @CBB_zero(%struct.cbb_st* nonnull %20) #6
  %21 = bitcast %struct.cbb_st* %11 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %21) #6
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %21, i8 -86, i64 32, i1 false)
  %22 = bitcast %struct.cbb_st* %12 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %22) #6
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %22, i8 -86, i64 32, i1 false)
  %23 = bitcast %struct.cbb_st* %13 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %23) #6
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %23, i8 -86, i64 32, i1 false)
  %24 = call i32 @CBB_init(%struct.cbb_st* nonnull %20, i64 0) #6
  %25 = icmp eq i32 %24, 0
  br i1 %25, label %53, label %26

26:                                               ; preds = %9
  %27 = call i32 @CBB_add_u16(%struct.cbb_st* nonnull %20, i16 zeroext %4) #6
  %28 = icmp eq i32 %27, 0
  br i1 %28, label %53, label %29

29:                                               ; preds = %26
  %30 = call i32 @CBB_add_u16(%struct.cbb_st* nonnull %20, i16 zeroext %5) #6
  %31 = icmp eq i32 %30, 0
  br i1 %31, label %53, label %32

32:                                               ; preds = %29
  %33 = call i32 @CBB_add_u8(%struct.cbb_st* nonnull %20, i8 zeroext %6) #6
  %34 = icmp eq i32 %33, 0
  br i1 %34, label %53, label %35

35:                                               ; preds = %32
  %36 = call i32 @CBB_add_u16_length_prefixed(%struct.cbb_st* nonnull %20, %struct.cbb_st* nonnull %11) #6
  %37 = icmp eq i32 %36, 0
  br i1 %37, label %53, label %38

38:                                               ; preds = %35
  %39 = getelementptr inbounds %"class.bssl::Span.1", %"class.bssl::Span.1"* %7, i64 0, i32 0
  %40 = load i8*, i8** %39, align 8
  %41 = getelementptr inbounds %"class.bssl::Span.1", %"class.bssl::Span.1"* %7, i64 0, i32 1
  %42 = load i64, i64* %41, align 8
  %43 = call i32 @CBB_add_bytes(%struct.cbb_st* nonnull %11, i8* %40, i64 %42) #6
  %44 = icmp eq i32 %43, 0
  br i1 %44, label %53, label %45

45:                                               ; preds = %38
  %46 = call i32 @CBB_add_u24_length_prefixed(%struct.cbb_st* nonnull %20, %struct.cbb_st* nonnull %12) #6
  %47 = icmp eq i32 %46, 0
  br i1 %47, label %53, label %48

48:                                               ; preds = %45
  %49 = call fastcc zeroext i1 @_ZN4bsslL41ssl_client_hello_write_without_extensionsEPK22ssl_early_callback_ctxP6cbb_st(%struct.ssl_early_callback_ctx* %3, %struct.cbb_st* nonnull %12)
  br i1 %49, label %50, label %53

50:                                               ; preds = %48
  %51 = call i32 @CBB_add_u16_length_prefixed(%struct.cbb_st* nonnull %12, %struct.cbb_st* nonnull %13) #6
  %52 = icmp eq i32 %51, 0
  br i1 %52, label %53, label %54

53:                                               ; preds = %50, %45, %38, %35, %32, %29, %26, %9, %48
  call void @ERR_put_error(i32 16, i32 0, i32 65, i8* getelementptr inbounds ([62 x i8], [62 x i8]* @.str, i64 0, i64 0), i32 289) #6
  br label %131

54:                                               ; preds = %50
  %55 = bitcast <2 x i64>* %14 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %55) #6
  %56 = getelementptr inbounds %struct.ssl_early_callback_ctx, %struct.ssl_early_callback_ctx* %3, i64 0, i32 12
  %57 = bitcast i8** %56 to <2 x i64>*
  %58 = load <2 x i64>, <2 x i64>* %57, align 8
  store <2 x i64> %58, <2 x i64>* %14, align 16
  %59 = call i64 @CBS_len(%struct.cbs_st* nonnull %15) #6
  %60 = icmp eq i64 %59, 0
  br i1 %60, label %93, label %61

61:                                               ; preds = %54
  %62 = bitcast i16* %16 to i8*
  %63 = bitcast %struct.cbs_st* %17 to i8*
  %64 = bitcast %struct.cbs_st* %17 to i8*
  br label %65

65:                                               ; preds = %61, %90
  call void @llvm.lifetime.start.p0i8(i64 2, i8* nonnull %62) #6
  store i16 -21846, i16* %16, align 2
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %63) #6
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %64, i8 -86, i64 16, i1 false)
  %66 = call i32 @CBS_get_u16(%struct.cbs_st* nonnull %15, i16* nonnull %16) #6
  %67 = icmp eq i32 %66, 0
  br i1 %67, label %71, label %68

68:                                               ; preds = %65
  %69 = call i32 @CBS_get_u16_length_prefixed(%struct.cbs_st* nonnull %15, %struct.cbs_st* nonnull %17) #6
  %70 = icmp eq i32 %69, 0
  br i1 %70, label %71, label %72

71:                                               ; preds = %68, %65
  call void @ERR_put_error(i32 16, i32 0, i32 137, i8* getelementptr inbounds ([62 x i8], [62 x i8]* @.str, i64 0, i64 0), i32 300) #6
  br label %89

72:                                               ; preds = %68
  %73 = load i16, i16* %16, align 2
  %74 = icmp eq i16 %73, -502
  br i1 %74, label %90, label %75

75:                                               ; preds = %72
  %76 = call i32 @CBB_add_u16(%struct.cbb_st* nonnull %13, i16 zeroext %73) #6
  %77 = icmp eq i32 %76, 0
  br i1 %77, label %88, label %78

78:                                               ; preds = %75
  %79 = call i64 @CBS_len(%struct.cbs_st* nonnull %17) #6
  %80 = trunc i64 %79 to i16
  %81 = call i32 @CBB_add_u16(%struct.cbb_st* nonnull %13, i16 zeroext %80) #6
  %82 = icmp eq i32 %81, 0
  br i1 %82, label %88, label %83

83:                                               ; preds = %78
  %84 = call i8* @CBS_data(%struct.cbs_st* nonnull %17) #6
  %85 = call i64 @CBS_len(%struct.cbs_st* nonnull %17) #6
  %86 = call i32 @CBB_add_bytes(%struct.cbb_st* nonnull %13, i8* %84, i64 %85) #6
  %87 = icmp eq i32 %86, 0
  br i1 %87, label %88, label %90

88:                                               ; preds = %83, %78, %75
  call void @ERR_put_error(i32 16, i32 0, i32 65, i8* getelementptr inbounds ([62 x i8], [62 x i8]* @.str, i64 0, i64 0), i32 310) #6
  br label %89

89:                                               ; preds = %88, %71
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %63) #6
  call void @llvm.lifetime.end.p0i8(i64 2, i8* nonnull %62) #6
  br label %129

90:                                               ; preds = %83, %72
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %63) #6
  call void @llvm.lifetime.end.p0i8(i64 2, i8* nonnull %62) #6
  %91 = call i64 @CBS_len(%struct.cbs_st* nonnull %15) #6
  %92 = icmp eq i64 %91, 0
  br i1 %92, label %93, label %65

93:                                               ; preds = %90, %54
  %94 = call i32 @CBB_flush(%struct.cbb_st* nonnull %20) #6
  %95 = icmp eq i32 %94, 0
  br i1 %95, label %96, label %97

96:                                               ; preds = %93
  call void @ERR_put_error(i32 16, i32 0, i32 65, i8* getelementptr inbounds ([62 x i8], [62 x i8]* @.str, i64 0, i64 0), i32 315) #6
  br label %129

97:                                               ; preds = %93
  %98 = getelementptr inbounds %"class.bssl::Span.1", %"class.bssl::Span.1"* %8, i64 0, i32 1
  %99 = load i64, i64* %98, align 8
  %100 = getelementptr inbounds %"class.bssl::Array", %"class.bssl::Array"* %1, i64 0, i32 0
  %101 = load i8*, i8** %100, align 8
  call void @OPENSSL_free(i8* %101) #6
  %102 = bitcast %"class.bssl::Array"* %1 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %102, i8 0, i64 16, i1 false) #6
  %103 = icmp eq i64 %99, 0
  br i1 %103, label %110, label %104

104:                                              ; preds = %97
  %105 = call i8* @OPENSSL_malloc(i64 %99) #6
  store i8* %105, i8** %100, align 8
  %106 = icmp eq i8* %105, null
  br i1 %106, label %109, label %107

107:                                              ; preds = %104
  %108 = getelementptr inbounds %"class.bssl::Array", %"class.bssl::Array"* %1, i64 0, i32 1
  store i64 %99, i64* %108, align 8
  br label %110

109:                                              ; preds = %104
  call void @ERR_put_error(i32 16, i32 0, i32 65, i8* getelementptr inbounds ([47 x i8], [47 x i8]* @.str.1, i64 0, i64 0), i32 324) #6
  call void @ERR_put_error(i32 16, i32 0, i32 65, i8* getelementptr inbounds ([62 x i8], [62 x i8]* @.str, i64 0, i64 0), i32 335) #6
  br label %129

110:                                              ; preds = %97, %107
  %111 = phi i8* [ null, %97 ], [ %105, %107 ]
  %112 = bitcast i64* %18 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %112) #6
  store i64 -6148914691236517206, i64* %18, align 8
  %113 = getelementptr inbounds %"class.bssl::Array", %"class.bssl::Array"* %1, i64 0, i32 1
  %114 = getelementptr inbounds %"class.bssl::Span.1", %"class.bssl::Span.1"* %8, i64 0, i32 0
  %115 = load i8*, i8** %114, align 8
  %116 = call i8* @CBB_data(%struct.cbb_st* nonnull %20) #6
  %117 = call i64 @CBB_len(%struct.cbb_st* nonnull %20) #6
  %118 = call i32 @EVP_HPKE_CTX_open(%struct.evp_hpke_ctx_st* %0, i8* %111, i64* nonnull %18, i64 %99, i8* %115, i64 %99, i8* %116, i64 %117) #6
  %119 = icmp eq i32 %118, 0
  br i1 %119, label %120, label %121

120:                                              ; preds = %110
  store i8 1, i8* %2, align 1
  call void @ERR_put_error(i32 16, i32 0, i32 138, i8* getelementptr inbounds ([62 x i8], [62 x i8]* @.str, i64 0, i64 0), i32 345) #6
  br label %127

121:                                              ; preds = %110
  %122 = load i64, i64* %18, align 8
  %123 = load i64, i64* %113, align 8
  %124 = icmp ult i64 %123, %122
  br i1 %124, label %125, label %126

125:                                              ; preds = %121
  call void @abort() #7
  unreachable

126:                                              ; preds = %121
  store i64 %122, i64* %113, align 8
  br label %127

127:                                              ; preds = %126, %120
  %128 = phi i1 [ true, %126 ], [ false, %120 ]
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %112) #6
  br label %129

129:                                              ; preds = %89, %127, %109, %96
  %130 = phi i1 [ %128, %127 ], [ false, %109 ], [ false, %96 ], [ false, %89 ]
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %55) #6
  br label %131

131:                                              ; preds = %129, %53
  %132 = phi i1 [ %130, %129 ], [ false, %53 ]
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %23) #6
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %22) #6
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %21) #6
  call void @CBB_cleanup(%struct.cbb_st* nonnull %20) #6
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %19) #6
  ret i1 %132
}

declare i32 @CBB_init(%struct.cbb_st*, i64) local_unnamed_addr #2

declare i32 @CBB_add_u8(%struct.cbb_st*, i8 zeroext) local_unnamed_addr #2

declare i32 @CBB_add_u24_length_prefixed(%struct.cbb_st*, %struct.cbb_st*) local_unnamed_addr #2

declare i32 @EVP_HPKE_CTX_open(%struct.evp_hpke_ctx_st*, i8*, i64*, i64, i8*, i64, i8*, i64) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZN4bssl15ECHServerConfig4InitENS_4SpanIKhEES3_b(%"class.bssl::ECHServerConfig"*, i8* nocapture readonly, i64, i8*, i64, i1 zeroext) local_unnamed_addr #0 align 2 {
  %7 = alloca <2 x i64>, align 16
  %8 = bitcast <2 x i64>* %7 to %struct.cbs_st*
  %9 = alloca i16, align 2
  %10 = alloca %struct.cbs_st, align 8
  %11 = alloca %struct.cbs_st, align 8
  %12 = alloca %struct.cbs_st, align 8
  %13 = alloca <2 x i64>, align 16
  %14 = bitcast <2 x i64>* %13 to %struct.cbs_st*
  %15 = alloca %struct.cbs_st, align 8
  %16 = alloca i16, align 2
  %17 = alloca i16, align 2
  %18 = alloca i16, align 2
  %19 = alloca i16, align 2
  %20 = alloca [32 x i8], align 16
  %21 = alloca i64, align 8
  %22 = zext i1 %5 to i8
  %23 = getelementptr inbounds %"class.bssl::ECHServerConfig", %"class.bssl::ECHServerConfig"* %0, i64 0, i32 4
  %24 = load i8, i8* %23, align 1
  %25 = and i8 %24, -2
  %26 = or i8 %25, %22
  store i8 %26, i8* %23, align 1
  %27 = getelementptr inbounds %"class.bssl::ECHServerConfig", %"class.bssl::ECHServerConfig"* %0, i64 0, i32 0, i32 0
  %28 = load i8*, i8** %27, align 8
  tail call void @OPENSSL_free(i8* %28) #6
  %29 = bitcast %"class.bssl::ECHServerConfig"* %0 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %29, i8 0, i64 16, i1 false) #6
  %30 = icmp eq i64 %2, 0
  br i1 %30, label %39, label %31

31:                                               ; preds = %6
  %32 = tail call i8* @OPENSSL_malloc(i64 %2) #6
  store i8* %32, i8** %27, align 8
  %33 = icmp eq i8* %32, null
  br i1 %33, label %38, label %34

34:                                               ; preds = %31
  %35 = getelementptr inbounds %"class.bssl::ECHServerConfig", %"class.bssl::ECHServerConfig"* %0, i64 0, i32 0, i32 1
  store i64 %2, i64* %35, align 8
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 1 %32, i8* align 1 %1, i64 %2, i1 false) #6
  %36 = bitcast %"class.bssl::ECHServerConfig"* %0 to <2 x i64>*
  %37 = load <2 x i64>, <2 x i64>* %36, align 8
  br label %39

38:                                               ; preds = %31
  tail call void @ERR_put_error(i32 16, i32 0, i32 65, i8* getelementptr inbounds ([47 x i8], [47 x i8]* @.str.1, i64 0, i64 0), i32 324) #6
  tail call void @ERR_put_error(i32 16, i32 0, i32 65, i8* getelementptr inbounds ([62 x i8], [62 x i8]* @.str, i64 0, i64 0), i32 361) #6
  br label %193

39:                                               ; preds = %6, %34
  %40 = phi <2 x i64> [ %37, %34 ], [ zeroinitializer, %6 ]
  %41 = bitcast <2 x i64>* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %41) #6
  store <2 x i64> %40, <2 x i64>* %7, align 16
  %42 = bitcast i16* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 2, i8* nonnull %42) #6
  store i16 -21846, i16* %9, align 2
  %43 = call i32 @CBS_get_u16(%struct.cbs_st* nonnull %8, i16* nonnull %9) #6
  %44 = icmp eq i32 %43, 0
  br i1 %44, label %45, label %46

45:                                               ; preds = %39
  call void @ERR_put_error(i32 16, i32 0, i32 137, i8* getelementptr inbounds ([62 x i8], [62 x i8]* @.str, i64 0, i64 0), i32 369) #6
  br label %191

46:                                               ; preds = %39
  %47 = load i16, i16* %9, align 2
  %48 = icmp eq i16 %47, -502
  br i1 %48, label %50, label %49

49:                                               ; preds = %46
  call void @ERR_put_error(i32 16, i32 0, i32 312, i8* getelementptr inbounds ([62 x i8], [62 x i8]* @.str, i64 0, i64 0), i32 378) #6
  br label %191

50:                                               ; preds = %46
  %51 = bitcast %struct.cbs_st* %10 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %51) #6
  %52 = bitcast %struct.cbs_st* %11 to i8*
  %53 = bitcast %struct.cbs_st* %10 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %53, i8 -86, i64 16, i1 false)
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %52) #6
  %54 = bitcast %struct.cbs_st* %12 to i8*
  %55 = bitcast %struct.cbs_st* %11 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %55, i8 -86, i64 16, i1 false)
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %54) #6
  %56 = getelementptr inbounds %struct.cbs_st, %struct.cbs_st* %12, i64 0, i32 0
  %57 = getelementptr inbounds %struct.cbs_st, %struct.cbs_st* %12, i64 0, i32 1
  %58 = bitcast <2 x i64>* %13 to i8*
  %59 = bitcast %struct.cbs_st* %12 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %59, i8 -86, i64 16, i1 false)
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %58) #6
  %60 = bitcast %struct.cbs_st* %15 to i8*
  %61 = bitcast <2 x i64>* %13 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %61, i8 -86, i64 16, i1 false)
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %60) #6
  %62 = bitcast i16* %16 to i8*
  %63 = bitcast %struct.cbs_st* %15 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %63, i8 -86, i64 16, i1 false)
  call void @llvm.lifetime.start.p0i8(i64 2, i8* nonnull %62) #6
  store i16 -21846, i16* %16, align 2
  %64 = bitcast i16* %17 to i8*
  call void @llvm.lifetime.start.p0i8(i64 2, i8* nonnull %64) #6
  store i16 -21846, i16* %17, align 2
  %65 = call i32 @CBS_get_u16_length_prefixed(%struct.cbs_st* nonnull %8, %struct.cbs_st* nonnull %10) #6
  %66 = icmp eq i32 %65, 0
  br i1 %66, label %104, label %67

67:                                               ; preds = %50
  %68 = getelementptr inbounds %"class.bssl::ECHServerConfig", %"class.bssl::ECHServerConfig"* %0, i64 0, i32 3
  %69 = call i32 @CBS_get_u8(%struct.cbs_st* nonnull %10, i8* %68) #6
  %70 = icmp eq i32 %69, 0
  br i1 %70, label %104, label %71

71:                                               ; preds = %67
  %72 = call i32 @CBS_get_u16(%struct.cbs_st* nonnull %10, i16* nonnull %16) #6
  %73 = icmp eq i32 %72, 0
  br i1 %73, label %104, label %74

74:                                               ; preds = %71
  %75 = call i32 @CBS_get_u16_length_prefixed(%struct.cbs_st* nonnull %10, %struct.cbs_st* nonnull %12) #6
  %76 = icmp eq i32 %75, 0
  br i1 %76, label %104, label %77

77:                                               ; preds = %74
  %78 = call i64 @CBS_len(%struct.cbs_st* nonnull %12) #6
  %79 = icmp eq i64 %78, 0
  br i1 %79, label %104, label %80

80:                                               ; preds = %77
  %81 = call i32 @CBS_get_u16_length_prefixed(%struct.cbs_st* nonnull %10, %struct.cbs_st* nonnull %14) #6
  %82 = icmp eq i32 %81, 0
  br i1 %82, label %104, label %83

83:                                               ; preds = %80
  %84 = call i64 @CBS_len(%struct.cbs_st* nonnull %14) #6
  %85 = icmp eq i64 %84, 0
  br i1 %85, label %104, label %86

86:                                               ; preds = %83
  %87 = call i32 @CBS_get_u16(%struct.cbs_st* nonnull %10, i16* nonnull %17) #6
  %88 = icmp eq i32 %87, 0
  br i1 %88, label %104, label %89

89:                                               ; preds = %86
  %90 = call i32 @CBS_get_u16_length_prefixed(%struct.cbs_st* nonnull %10, %struct.cbs_st* nonnull %11) #6
  %91 = icmp eq i32 %90, 0
  br i1 %91, label %104, label %92

92:                                               ; preds = %89
  %93 = call i64 @CBS_len(%struct.cbs_st* nonnull %11) #6
  %94 = icmp eq i64 %93, 0
  br i1 %94, label %104, label %95

95:                                               ; preds = %92
  %96 = call i32 @CBS_get_u16_length_prefixed(%struct.cbs_st* nonnull %10, %struct.cbs_st* nonnull %15) #6
  %97 = icmp eq i32 %96, 0
  br i1 %97, label %104, label %98

98:                                               ; preds = %95
  %99 = call i64 @CBS_len(%struct.cbs_st* nonnull %10) #6
  %100 = icmp eq i64 %99, 0
  br i1 %100, label %101, label %104

101:                                              ; preds = %98
  %102 = call i64 @CBS_len(%struct.cbs_st* nonnull %8) #6
  %103 = icmp eq i64 %102, 0
  br i1 %103, label %105, label %104

104:                                              ; preds = %101, %98, %95, %89, %86, %80, %74, %71, %67, %50, %92, %83, %77
  call void @ERR_put_error(i32 16, i32 0, i32 137, i8* getelementptr inbounds ([62 x i8], [62 x i8]* @.str, i64 0, i64 0), i32 397) #6
  br label %189

105:                                              ; preds = %101
  %106 = call i64 @CBS_len(%struct.cbs_st* nonnull %15) #6
  %107 = icmp eq i64 %106, 0
  br i1 %107, label %109, label %108

108:                                              ; preds = %105
  call void @ERR_put_error(i32 16, i32 0, i32 311, i8* getelementptr inbounds ([62 x i8], [62 x i8]* @.str, i64 0, i64 0), i32 403) #6
  br label %189

109:                                              ; preds = %105
  %110 = load <2 x i64>, <2 x i64>* %13, align 16
  %111 = getelementptr inbounds %"class.bssl::ECHServerConfig", %"class.bssl::ECHServerConfig"* %0, i64 0, i32 1, i32 0
  %112 = bitcast i8** %111 to <2 x i64>*
  store <2 x i64> %110, <2 x i64>* %112, align 8
  %113 = call i64 @CBS_len(%struct.cbs_st* nonnull %14) #6
  %114 = icmp eq i64 %113, 0
  br i1 %114, label %148, label %115

115:                                              ; preds = %109
  %116 = bitcast i16* %18 to i8*
  %117 = bitcast i16* %19 to i8*
  br label %118

118:                                              ; preds = %115, %145
  call void @llvm.lifetime.start.p0i8(i64 2, i8* nonnull %116) #6
  store i16 -21846, i16* %18, align 2
  call void @llvm.lifetime.start.p0i8(i64 2, i8* nonnull %117) #6
  store i16 -21846, i16* %19, align 2
  %119 = call i32 @CBS_get_u16(%struct.cbs_st* nonnull %14, i16* nonnull %18) #6
  %120 = icmp eq i32 %119, 0
  br i1 %120, label %124, label %121

121:                                              ; preds = %118
  %122 = call i32 @CBS_get_u16(%struct.cbs_st* nonnull %14, i16* nonnull %19) #6
  %123 = icmp eq i32 %122, 0
  br i1 %123, label %124, label %125

124:                                              ; preds = %121, %118
  call void @ERR_put_error(i32 16, i32 0, i32 137, i8* getelementptr inbounds ([62 x i8], [62 x i8]* @.str, i64 0, i64 0), i32 412) #6
  call void @llvm.lifetime.end.p0i8(i64 2, i8* nonnull %117) #6
  call void @llvm.lifetime.end.p0i8(i64 2, i8* nonnull %116) #6
  br label %189

125:                                              ; preds = %121
  %126 = load i16, i16* %18, align 2
  %127 = icmp eq i16 %126, 1
  br i1 %127, label %128, label %144

128:                                              ; preds = %125
  %129 = load i16, i16* %19, align 2
  %130 = call %struct.evp_hpke_aead_st* @EVP_hpke_aes_128_gcm() #6
  %131 = call zeroext i16 @EVP_HPKE_AEAD_id(%struct.evp_hpke_aead_st* %130) #6
  %132 = icmp eq i16 %131, %129
  br i1 %132, label %141, label %133

133:                                              ; preds = %128
  %134 = call %struct.evp_hpke_aead_st* @EVP_hpke_aes_256_gcm() #6
  %135 = call zeroext i16 @EVP_HPKE_AEAD_id(%struct.evp_hpke_aead_st* %134) #6
  %136 = icmp eq i16 %135, %129
  br i1 %136, label %141, label %137

137:                                              ; preds = %133
  %138 = call %struct.evp_hpke_aead_st* @EVP_hpke_chacha20_poly1305() #6
  %139 = call zeroext i16 @EVP_HPKE_AEAD_id(%struct.evp_hpke_aead_st* %138) #6
  %140 = icmp eq i16 %139, %129
  br i1 %140, label %141, label %144

141:                                              ; preds = %137, %128, %133
  %142 = phi %struct.evp_hpke_aead_st* [ %130, %128 ], [ %134, %133 ], [ %138, %137 ]
  %143 = icmp eq %struct.evp_hpke_aead_st* %142, null
  br i1 %143, label %144, label %145

144:                                              ; preds = %137, %125, %141
  call void @ERR_put_error(i32 16, i32 0, i32 312, i8* getelementptr inbounds ([62 x i8], [62 x i8]* @.str, i64 0, i64 0), i32 418) #6
  call void @llvm.lifetime.end.p0i8(i64 2, i8* nonnull %117) #6
  call void @llvm.lifetime.end.p0i8(i64 2, i8* nonnull %116) #6
  br label %189

145:                                              ; preds = %141
  call void @llvm.lifetime.end.p0i8(i64 2, i8* nonnull %117) #6
  call void @llvm.lifetime.end.p0i8(i64 2, i8* nonnull %116) #6
  %146 = call i64 @CBS_len(%struct.cbs_st* nonnull %14) #6
  %147 = icmp eq i64 %146, 0
  br i1 %147, label %148, label %118

148:                                              ; preds = %145, %109
  %149 = load i16, i16* %16, align 2
  %150 = icmp eq i16 %149, 32
  br i1 %150, label %152, label %151

151:                                              ; preds = %148
  call void @ERR_put_error(i32 16, i32 0, i32 312, i8* getelementptr inbounds ([62 x i8], [62 x i8]* @.str, i64 0, i64 0), i32 425) #6
  br label %189

152:                                              ; preds = %148
  %153 = getelementptr inbounds %"class.bssl::ECHServerConfig", %"class.bssl::ECHServerConfig"* %0, i64 0, i32 2, i32 0
  %154 = call %struct.evp_hpke_kem_st* @EVP_hpke_x25519_hkdf_sha256() #6
  %155 = call i32 @EVP_HPKE_KEY_init(%struct.evp_hpke_key_st* %153, %struct.evp_hpke_kem_st* %154, i8* %3, i64 %4) #6
  %156 = icmp eq i32 %155, 0
  br i1 %156, label %157, label %158

157:                                              ; preds = %152
  call void @ERR_put_error(i32 16, i32 0, i32 137, i8* getelementptr inbounds ([62 x i8], [62 x i8]* @.str, i64 0, i64 0), i32 430) #6
  br label %189

158:                                              ; preds = %152
  %159 = getelementptr inbounds [32 x i8], [32 x i8]* %20, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %159) #6
  %160 = bitcast i64* %21 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %159, i8 -86, i64 32, i1 false)
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %160) #6
  store i64 -6148914691236517206, i64* %21, align 8
  %161 = call i32 @EVP_HPKE_KEY_public_key(%struct.evp_hpke_key_st* %153, i8* nonnull %159, i64* nonnull %21, i64 32) #6
  %162 = icmp eq i32 %161, 0
  br i1 %162, label %187, label %163

163:                                              ; preds = %158
  %164 = load i64, i64* %21, align 8
  %165 = load i8*, i8** %56, align 8
  %166 = load i64, i64* %57, align 8
  %167 = icmp eq i64 %164, %166
  br i1 %167, label %168, label %183

168:                                              ; preds = %163
  %169 = icmp eq i64 %164, 0
  br i1 %169, label %184, label %170

170:                                              ; preds = %168
  %171 = add i64 %164, -1
  %172 = getelementptr [32 x i8], [32 x i8]* %20, i64 0, i64 %171
  br label %173

173:                                              ; preds = %170, %179
  %174 = phi i8* [ %181, %179 ], [ %165, %170 ]
  %175 = phi i8* [ %180, %179 ], [ %159, %170 ]
  %176 = load i8, i8* %175, align 1
  %177 = load i8, i8* %174, align 1
  %178 = icmp eq i8 %176, %177
  br i1 %178, label %179, label %183

179:                                              ; preds = %173
  %180 = getelementptr inbounds i8, i8* %175, i64 1
  %181 = getelementptr inbounds i8, i8* %174, i64 1
  %182 = icmp eq i8* %175, %172
  br i1 %182, label %184, label %173

183:                                              ; preds = %173, %163
  call void @ERR_put_error(i32 16, i32 0, i32 310, i8* getelementptr inbounds ([62 x i8], [62 x i8]* @.str, i64 0, i64 0), i32 443) #6
  br label %187

184:                                              ; preds = %179, %168
  %185 = load i8, i8* %23, align 1
  %186 = or i8 %185, 2
  store i8 %186, i8* %23, align 1
  br label %187

187:                                              ; preds = %158, %184, %183
  %188 = phi i1 [ false, %183 ], [ true, %184 ], [ false, %158 ]
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %160) #6
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %159) #6
  br label %189

189:                                              ; preds = %124, %144, %187, %157, %151, %108, %104
  %190 = phi i1 [ false, %104 ], [ false, %108 ], [ false, %151 ], [ %188, %187 ], [ false, %157 ], [ false, %144 ], [ false, %124 ]
  call void @llvm.lifetime.end.p0i8(i64 2, i8* nonnull %64) #6
  call void @llvm.lifetime.end.p0i8(i64 2, i8* nonnull %62) #6
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %60) #6
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %58) #6
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %54) #6
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %52) #6
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %51) #6
  br label %191

191:                                              ; preds = %189, %49, %45
  %192 = phi i1 [ false, %49 ], [ %190, %189 ], [ false, %45 ]
  call void @llvm.lifetime.end.p0i8(i64 2, i8* nonnull %42) #6
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %41) #6
  br label %193

193:                                              ; preds = %191, %38
  %194 = phi i1 [ %192, %191 ], [ false, %38 ]
  ret i1 %194
}

declare i32 @CBS_get_u8(%struct.cbs_st*, i8*) local_unnamed_addr #2

declare i32 @EVP_HPKE_KEY_init(%struct.evp_hpke_key_st*, %struct.evp_hpke_kem_st*, i8*, i64) local_unnamed_addr #2

declare %struct.evp_hpke_kem_st* @EVP_hpke_x25519_hkdf_sha256() local_unnamed_addr #2

declare i32 @EVP_HPKE_KEY_public_key(%struct.evp_hpke_key_st*, i8*, i64*, i64) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZNK4bssl15ECHServerConfig12SetupContextEP15evp_hpke_ctx_stttNS_4SpanIKhEE(%"class.bssl::ECHServerConfig"*, %struct.evp_hpke_ctx_st*, i16 zeroext, i16 zeroext, i8*, i64) local_unnamed_addr #0 align 2 {
  %7 = alloca <2 x i64>, align 16
  %8 = bitcast <2 x i64>* %7 to %struct.cbs_st*
  %9 = alloca i16, align 2
  %10 = alloca i16, align 2
  %11 = alloca %"class.bssl::internal::StackAllocated.118", align 8
  %12 = bitcast <2 x i64>* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %12) #6
  %13 = getelementptr inbounds %"class.bssl::ECHServerConfig", %"class.bssl::ECHServerConfig"* %0, i64 0, i32 1, i32 0
  %14 = bitcast i8** %13 to <2 x i64>*
  %15 = load <2 x i64>, <2 x i64>* %14, align 8
  store <2 x i64> %15, <2 x i64>* %7, align 16
  %16 = bitcast i16* %9 to i8*
  %17 = bitcast i16* %10 to i8*
  br label %18

18:                                               ; preds = %27, %6
  %19 = call i64 @CBS_len(%struct.cbs_st* nonnull %8) #6
  %20 = icmp eq i64 %19, 0
  br i1 %20, label %75, label %21

21:                                               ; preds = %18
  call void @llvm.lifetime.start.p0i8(i64 2, i8* nonnull %16) #6
  store i16 -21846, i16* %9, align 2
  call void @llvm.lifetime.start.p0i8(i64 2, i8* nonnull %17) #6
  store i16 -21846, i16* %10, align 2
  %22 = call i32 @CBS_get_u16(%struct.cbs_st* nonnull %8, i16* nonnull %9) #6
  %23 = icmp eq i32 %22, 0
  br i1 %23, label %33, label %24

24:                                               ; preds = %21
  %25 = call i32 @CBS_get_u16(%struct.cbs_st* nonnull %8, i16* nonnull %10) #6
  %26 = icmp eq i32 %25, 0
  br i1 %26, label %33, label %27

27:                                               ; preds = %24
  %28 = load i16, i16* %9, align 2
  %29 = icmp eq i16 %28, %2
  %30 = load i16, i16* %10, align 2
  %31 = icmp eq i16 %30, %3
  %32 = and i1 %29, %31
  call void @llvm.lifetime.end.p0i8(i64 2, i8* nonnull %17) #6
  call void @llvm.lifetime.end.p0i8(i64 2, i8* nonnull %16) #6
  br i1 %32, label %34, label %18

33:                                               ; preds = %24, %21
  call void @llvm.lifetime.end.p0i8(i64 2, i8* nonnull %17) #6
  call void @llvm.lifetime.end.p0i8(i64 2, i8* nonnull %16) #6
  br label %75

34:                                               ; preds = %27
  %35 = bitcast %"class.bssl::internal::StackAllocated.118"* %11 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %35) #6
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %35, i8 -86, i64 32, i1 false)
  %36 = getelementptr inbounds %"class.bssl::internal::StackAllocated.118", %"class.bssl::internal::StackAllocated.118"* %11, i64 0, i32 0
  call void @CBB_zero(%struct.cbb_st* nonnull %36) #6
  %37 = getelementptr inbounds %"class.bssl::ECHServerConfig", %"class.bssl::ECHServerConfig"* %0, i64 0, i32 0, i32 1
  %38 = load i64, i64* %37, align 8
  %39 = add i64 %38, 8
  %40 = call i32 @CBB_init(%struct.cbb_st* nonnull %36, i64 %39) #6
  %41 = icmp eq i32 %40, 0
  br i1 %41, label %51, label %42

42:                                               ; preds = %34
  %43 = call i32 @CBB_add_bytes(%struct.cbb_st* nonnull %36, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @_ZZNK4bssl15ECHServerConfig12SetupContextEP15evp_hpke_ctx_stttNS_4SpanIKhEEE10kInfoLabel, i64 0, i64 0), i64 8) #6
  %44 = icmp eq i32 %43, 0
  br i1 %44, label %51, label %45

45:                                               ; preds = %42
  %46 = getelementptr inbounds %"class.bssl::ECHServerConfig", %"class.bssl::ECHServerConfig"* %0, i64 0, i32 0, i32 0
  %47 = load i8*, i8** %46, align 8
  %48 = load i64, i64* %37, align 8
  %49 = call i32 @CBB_add_bytes(%struct.cbb_st* nonnull %36, i8* %47, i64 %48) #6
  %50 = icmp eq i32 %49, 0
  br i1 %50, label %51, label %52

51:                                               ; preds = %45, %42, %34
  call void @ERR_put_error(i32 16, i32 0, i32 65, i8* getelementptr inbounds ([62 x i8], [62 x i8]* @.str, i64 0, i64 0), i32 480) #6
  br label %73

52:                                               ; preds = %45
  %53 = getelementptr inbounds %"class.bssl::ECHServerConfig", %"class.bssl::ECHServerConfig"* %0, i64 0, i32 2, i32 0
  %54 = call %struct.evp_hpke_kdf_st* @EVP_hpke_hkdf_sha256() #6
  %55 = call %struct.evp_hpke_aead_st* @EVP_hpke_aes_128_gcm() #6
  %56 = call zeroext i16 @EVP_HPKE_AEAD_id(%struct.evp_hpke_aead_st* %55) #6
  %57 = icmp eq i16 %56, %3
  br i1 %57, label %67, label %58

58:                                               ; preds = %52
  %59 = call %struct.evp_hpke_aead_st* @EVP_hpke_aes_256_gcm() #6
  %60 = call zeroext i16 @EVP_HPKE_AEAD_id(%struct.evp_hpke_aead_st* %59) #6
  %61 = icmp eq i16 %60, %3
  br i1 %61, label %67, label %62

62:                                               ; preds = %58
  %63 = call %struct.evp_hpke_aead_st* @EVP_hpke_chacha20_poly1305() #6
  %64 = call zeroext i16 @EVP_HPKE_AEAD_id(%struct.evp_hpke_aead_st* %63) #6
  %65 = icmp eq i16 %64, %3
  %66 = select i1 %65, %struct.evp_hpke_aead_st* %63, %struct.evp_hpke_aead_st* null
  br label %67

67:                                               ; preds = %52, %58, %62
  %68 = phi %struct.evp_hpke_aead_st* [ %66, %62 ], [ %55, %52 ], [ %59, %58 ]
  %69 = call i8* @CBB_data(%struct.cbb_st* nonnull %36) #6
  %70 = call i64 @CBB_len(%struct.cbb_st* nonnull %36) #6
  %71 = call i32 @EVP_HPKE_CTX_setup_recipient(%struct.evp_hpke_ctx_st* %1, %struct.evp_hpke_key_st* %53, %struct.evp_hpke_kdf_st* %54, %struct.evp_hpke_aead_st* %68, i8* %4, i64 %5, i8* %69, i64 %70) #6
  %72 = icmp ne i32 %71, 0
  br label %73

73:                                               ; preds = %67, %51
  %74 = phi i1 [ %72, %67 ], [ false, %51 ]
  call void @CBB_cleanup(%struct.cbb_st* nonnull %36) #6
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %35) #6
  br label %75

75:                                               ; preds = %18, %33, %73
  %76 = phi i1 [ %74, %73 ], [ false, %33 ], [ false, %18 ]
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %12) #6
  ret i1 %76
}

declare i32 @EVP_HPKE_CTX_setup_recipient(%struct.evp_hpke_ctx_st*, %struct.evp_hpke_key_st*, %struct.evp_hpke_kdf_st*, %struct.evp_hpke_aead_st*, i8*, i64, i8*, i64) local_unnamed_addr #2

declare %struct.evp_hpke_kdf_st* @EVP_hpke_hkdf_sha256() local_unnamed_addr #2

declare i32 @CBB_add_u8_length_prefixed(%struct.cbb_st*, %struct.cbb_st*) local_unnamed_addr #2

; Function Attrs: inlinehint norecurse nounwind readonly ssp uwtable
define internal i32 @"_ZZN4bssl29ssl_decode_client_hello_innerEP6ssl_stPhPNS_5ArrayIhEENS_4SpanIKhEEPK22ssl_early_callback_ctxEN3$_08__invokeEPKvSE_"(i8* nocapture readonly, i8* nocapture readonly) #4 align 2 {
  %3 = bitcast i8* %0 to i16*
  %4 = load i16, i16* %3, align 8
  %5 = bitcast i8* %1 to i16*
  %6 = load i16, i16* %5, align 8
  %7 = icmp ult i16 %4, %6
  %8 = icmp ugt i16 %4, %6
  %9 = zext i1 %8 to i32
  %10 = select i1 %7, i32 -1, i32 %9
  ret i32 %10
}

declare zeroext i16 @EVP_HPKE_AEAD_id(%struct.evp_hpke_aead_st*) local_unnamed_addr #2

declare %struct.evp_hpke_aead_st* @EVP_hpke_aes_128_gcm() local_unnamed_addr #2

declare %struct.evp_hpke_aead_st* @EVP_hpke_aes_256_gcm() local_unnamed_addr #2

declare %struct.evp_hpke_aead_st* @EVP_hpke_chacha20_poly1305() local_unnamed_addr #2

declare void @CBB_zero(%struct.cbb_st*) local_unnamed_addr #2

declare void @CBB_cleanup(%struct.cbb_st*) local_unnamed_addr #2

declare void @OPENSSL_free(i8*) local_unnamed_addr #2

declare i8* @OPENSSL_malloc(i64) local_unnamed_addr #2

; Function Attrs: noreturn nounwind
declare void @abort() local_unnamed_addr #5

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nofree "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { inlinehint norecurse nounwind readonly ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { noreturn nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nounwind }
attributes #7 = { noreturn nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = distinct !{!2, !3}
!3 = !{!"llvm.loop.unroll.disable"}
!4 = !{i8 0, i8 2}
