; ModuleID = '../../third_party/blink/renderer/platform/transforms/rotation.cc'
source_filename = "../../third_party/blink/renderer/platform/transforms/rotation.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"struct.blink::Rotation" = type { %"class.blink::FloatPoint3D", double }
%"class.blink::FloatPoint3D" = type { float, float, float }
%"class.gfx::Quaternion" = type { double, double, double, double }

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZN5blink8Rotation13GetCommonAxisERKS0_S2_RNS_12FloatPoint3DERdS5_(%"struct.blink::Rotation"* nocapture readonly dereferenceable(24), %"struct.blink::Rotation"* nocapture readonly dereferenceable(24), %"class.blink::FloatPoint3D"* nocapture dereferenceable(12), double* nocapture dereferenceable(8), double* nocapture dereferenceable(8)) local_unnamed_addr #0 align 2 {
  %6 = alloca %"class.blink::FloatPoint3D", align 4
  %7 = alloca %"class.blink::FloatPoint3D", align 4
  %8 = alloca %"class.blink::FloatPoint3D", align 4
  %9 = bitcast %"class.blink::FloatPoint3D"* %2 to i8*
  %10 = getelementptr inbounds %"class.blink::FloatPoint3D", %"class.blink::FloatPoint3D"* %2, i64 0, i32 0
  store float 0.000000e+00, float* %10, align 4
  %11 = getelementptr inbounds %"class.blink::FloatPoint3D", %"class.blink::FloatPoint3D"* %2, i64 0, i32 1
  store float 0.000000e+00, float* %11, align 4
  %12 = getelementptr inbounds %"class.blink::FloatPoint3D", %"class.blink::FloatPoint3D"* %2, i64 0, i32 2
  store float 1.000000e+00, float* %12, align 4
  store double 0.000000e+00, double* %3, align 8
  store double 0.000000e+00, double* %4, align 8
  %13 = getelementptr inbounds %"struct.blink::Rotation", %"struct.blink::Rotation"* %0, i64 0, i32 0, i32 0
  %14 = load float, float* %13, align 4
  %15 = fcmp une float %14, 0.000000e+00
  br i1 %15, label %24, label %16

16:                                               ; preds = %5
  %17 = getelementptr inbounds %"struct.blink::Rotation", %"struct.blink::Rotation"* %0, i64 0, i32 0, i32 1
  %18 = load float, float* %17, align 4
  %19 = fcmp une float %18, 0.000000e+00
  br i1 %19, label %24, label %20

20:                                               ; preds = %16
  %21 = getelementptr inbounds %"struct.blink::Rotation", %"struct.blink::Rotation"* %0, i64 0, i32 0, i32 2
  %22 = load float, float* %21, align 4
  %23 = fcmp oeq float %22, 0.000000e+00
  br i1 %23, label %29, label %24

24:                                               ; preds = %5, %16, %20
  %25 = getelementptr inbounds %"struct.blink::Rotation", %"struct.blink::Rotation"* %0, i64 0, i32 1
  %26 = load double, double* %25, align 8
  %27 = tail call double @llvm.fabs.f64(double %26)
  %28 = fcmp olt double %27, 1.000000e-04
  br label %29

29:                                               ; preds = %24, %20
  %30 = phi i1 [ true, %20 ], [ %28, %24 ]
  %31 = getelementptr inbounds %"struct.blink::Rotation", %"struct.blink::Rotation"* %1, i64 0, i32 0, i32 0
  %32 = load float, float* %31, align 4
  %33 = fcmp une float %32, 0.000000e+00
  br i1 %33, label %42, label %34

34:                                               ; preds = %29
  %35 = getelementptr inbounds %"struct.blink::Rotation", %"struct.blink::Rotation"* %1, i64 0, i32 0, i32 1
  %36 = load float, float* %35, align 4
  %37 = fcmp une float %36, 0.000000e+00
  br i1 %37, label %42, label %38

38:                                               ; preds = %34
  %39 = getelementptr inbounds %"struct.blink::Rotation", %"struct.blink::Rotation"* %1, i64 0, i32 0, i32 2
  %40 = load float, float* %39, align 4
  %41 = fcmp oeq float %40, 0.000000e+00
  br i1 %41, label %47, label %42

42:                                               ; preds = %29, %34, %38
  %43 = getelementptr inbounds %"struct.blink::Rotation", %"struct.blink::Rotation"* %1, i64 0, i32 1
  %44 = load double, double* %43, align 8
  %45 = tail call double @llvm.fabs.f64(double %44)
  %46 = fcmp olt double %45, 1.000000e-04
  br label %47

47:                                               ; preds = %42, %38
  %48 = phi i1 [ true, %38 ], [ %46, %42 ]
  %49 = and i1 %30, %48
  br i1 %49, label %171, label %50

50:                                               ; preds = %47
  br i1 %30, label %51, label %82

51:                                               ; preds = %50
  %52 = bitcast %"class.blink::FloatPoint3D"* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 12, i8* nonnull %52) #5
  %53 = getelementptr inbounds %"struct.blink::Rotation", %"struct.blink::Rotation"* %1, i64 0, i32 0, i32 1
  %54 = bitcast float* %53 to i32*
  %55 = load i32, i32* %54, align 4
  %56 = getelementptr inbounds %"struct.blink::Rotation", %"struct.blink::Rotation"* %1, i64 0, i32 0, i32 2
  %57 = bitcast float* %56 to i32*
  %58 = load i32, i32* %57, align 4
  %59 = getelementptr inbounds %"class.blink::FloatPoint3D", %"class.blink::FloatPoint3D"* %6, i64 0, i32 1
  %60 = getelementptr inbounds %"class.blink::FloatPoint3D", %"class.blink::FloatPoint3D"* %6, i64 0, i32 2
  %61 = getelementptr inbounds %"class.blink::FloatPoint3D", %"class.blink::FloatPoint3D"* %6, i64 0, i32 0
  store float %32, float* %61, align 4, !alias.scope !2
  %62 = bitcast float* %59 to i32*
  store i32 %55, i32* %62, align 4, !alias.scope !2
  %63 = bitcast float* %60 to i32*
  store i32 %58, i32* %63, align 4, !alias.scope !2
  %64 = fmul float %32, %32
  %65 = bitcast i32 %55 to float
  %66 = fmul float %65, %65
  %67 = fadd float %64, %66
  %68 = bitcast i32 %58 to float
  %69 = fmul float %68, %68
  %70 = fadd float %69, %67
  %71 = tail call float @sqrtf(float %70) #5, !noalias !2
  %72 = fpext float %71 to double
  %73 = fcmp ogt double %72, 1.000000e-05
  br i1 %73, label %74, label %75

74:                                               ; preds = %51
  call void @_ZN5blink12FloatPoint3D9NormalizeEv(%"class.blink::FloatPoint3D"* nonnull %6) #5
  br label %77

75:                                               ; preds = %51
  %76 = getelementptr inbounds %"class.blink::FloatPoint3D", %"class.blink::FloatPoint3D"* %6, i64 0, i32 0
  store float 0.000000e+00, float* %76, align 4, !alias.scope !2
  store float 0.000000e+00, float* %59, align 4, !alias.scope !2
  store float 1.000000e+00, float* %60, align 4, !alias.scope !2
  br label %77

77:                                               ; preds = %74, %75
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %9, i8* nonnull align 4 %52, i64 12, i1 false)
  call void @llvm.lifetime.end.p0i8(i64 12, i8* nonnull %52) #5
  %78 = getelementptr inbounds %"struct.blink::Rotation", %"struct.blink::Rotation"* %1, i64 0, i32 1
  %79 = bitcast double* %78 to i64*
  %80 = load i64, i64* %79, align 8
  %81 = bitcast double* %4 to i64*
  store i64 %80, i64* %81, align 8
  br label %171

82:                                               ; preds = %50
  br i1 %48, label %83, label %114

83:                                               ; preds = %82
  %84 = bitcast %"class.blink::FloatPoint3D"* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 12, i8* nonnull %84) #5
  %85 = getelementptr inbounds %"struct.blink::Rotation", %"struct.blink::Rotation"* %0, i64 0, i32 0, i32 1
  %86 = bitcast float* %85 to i32*
  %87 = load i32, i32* %86, align 4
  %88 = getelementptr inbounds %"struct.blink::Rotation", %"struct.blink::Rotation"* %0, i64 0, i32 0, i32 2
  %89 = bitcast float* %88 to i32*
  %90 = load i32, i32* %89, align 4
  %91 = getelementptr inbounds %"class.blink::FloatPoint3D", %"class.blink::FloatPoint3D"* %7, i64 0, i32 1
  %92 = getelementptr inbounds %"class.blink::FloatPoint3D", %"class.blink::FloatPoint3D"* %7, i64 0, i32 2
  %93 = getelementptr inbounds %"class.blink::FloatPoint3D", %"class.blink::FloatPoint3D"* %7, i64 0, i32 0
  store float %14, float* %93, align 4, !alias.scope !5
  %94 = bitcast float* %91 to i32*
  store i32 %87, i32* %94, align 4, !alias.scope !5
  %95 = bitcast float* %92 to i32*
  store i32 %90, i32* %95, align 4, !alias.scope !5
  %96 = fmul float %14, %14
  %97 = bitcast i32 %87 to float
  %98 = fmul float %97, %97
  %99 = fadd float %96, %98
  %100 = bitcast i32 %90 to float
  %101 = fmul float %100, %100
  %102 = fadd float %101, %99
  %103 = tail call float @sqrtf(float %102) #5, !noalias !5
  %104 = fpext float %103 to double
  %105 = fcmp ogt double %104, 1.000000e-05
  br i1 %105, label %106, label %107

106:                                              ; preds = %83
  call void @_ZN5blink12FloatPoint3D9NormalizeEv(%"class.blink::FloatPoint3D"* nonnull %7) #5
  br label %109

107:                                              ; preds = %83
  %108 = getelementptr inbounds %"class.blink::FloatPoint3D", %"class.blink::FloatPoint3D"* %7, i64 0, i32 0
  store float 0.000000e+00, float* %108, align 4, !alias.scope !5
  store float 0.000000e+00, float* %91, align 4, !alias.scope !5
  store float 1.000000e+00, float* %92, align 4, !alias.scope !5
  br label %109

109:                                              ; preds = %106, %107
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %9, i8* nonnull align 4 %84, i64 12, i1 false)
  call void @llvm.lifetime.end.p0i8(i64 12, i8* nonnull %84) #5
  %110 = getelementptr inbounds %"struct.blink::Rotation", %"struct.blink::Rotation"* %0, i64 0, i32 1
  %111 = bitcast double* %110 to i64*
  %112 = load i64, i64* %111, align 8
  %113 = bitcast double* %3 to i64*
  store i64 %112, i64* %113, align 8
  br label %171

114:                                              ; preds = %82
  %115 = fmul float %14, %32
  %116 = getelementptr inbounds %"struct.blink::Rotation", %"struct.blink::Rotation"* %0, i64 0, i32 0, i32 1
  %117 = getelementptr inbounds %"struct.blink::Rotation", %"struct.blink::Rotation"* %1, i64 0, i32 0, i32 1
  %118 = bitcast float* %116 to <2 x float>*
  %119 = load <2 x float>, <2 x float>* %118, align 4
  %120 = bitcast float* %117 to <2 x float>*
  %121 = load <2 x float>, <2 x float>* %120, align 4
  %122 = fmul <2 x float> %119, %121
  %123 = extractelement <2 x float> %122, i32 0
  %124 = fadd float %115, %123
  %125 = extractelement <2 x float> %122, i32 1
  %126 = fadd float %124, %125
  %127 = fpext float %126 to double
  %128 = fcmp olt float %126, 0.000000e+00
  br i1 %128, label %171, label %129

129:                                              ; preds = %114
  %130 = insertelement <2 x float> undef, float %14, i32 0
  %131 = insertelement <2 x float> %130, float %32, i32 1
  %132 = fmul <2 x float> %131, %131
  %133 = shufflevector <2 x float> %119, <2 x float> %121, <2 x i32> <i32 0, i32 2>
  %134 = fmul <2 x float> %133, %133
  %135 = fadd <2 x float> %132, %134
  %136 = shufflevector <2 x float> %119, <2 x float> %121, <2 x i32> <i32 1, i32 3>
  %137 = fmul <2 x float> %136, %136
  %138 = fadd <2 x float> %135, %137
  %139 = fpext <2 x float> %138 to <2 x double>
  %140 = fmul double %127, %127
  %141 = extractelement <2 x double> %139, i32 0
  %142 = extractelement <2 x double> %139, i32 1
  %143 = fmul double %141, %142
  %144 = fdiv double %140, %143
  %145 = fsub double 1.000000e+00, %144
  %146 = tail call double @llvm.fabs.f64(double %145) #5
  %147 = fcmp ogt double %146, 1.000000e-04
  br i1 %147, label %171, label %148

148:                                              ; preds = %129
  %149 = extractelement <2 x float> %119, i32 1
  %150 = extractelement <2 x float> %119, i32 0
  %151 = bitcast %"class.blink::FloatPoint3D"* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 12, i8* nonnull %151) #5
  %152 = getelementptr inbounds %"class.blink::FloatPoint3D", %"class.blink::FloatPoint3D"* %8, i64 0, i32 1
  %153 = getelementptr inbounds %"class.blink::FloatPoint3D", %"class.blink::FloatPoint3D"* %8, i64 0, i32 2
  %154 = getelementptr inbounds %"class.blink::FloatPoint3D", %"class.blink::FloatPoint3D"* %8, i64 0, i32 0
  store float %14, float* %154, align 4, !alias.scope !8
  store float %150, float* %152, align 4, !alias.scope !8
  store float %149, float* %153, align 4, !alias.scope !8
  %155 = extractelement <2 x float> %138, i32 0
  %156 = tail call float @sqrtf(float %155) #5, !noalias !8
  %157 = fpext float %156 to double
  %158 = fcmp ogt double %157, 1.000000e-05
  br i1 %158, label %159, label %160

159:                                              ; preds = %148
  call void @_ZN5blink12FloatPoint3D9NormalizeEv(%"class.blink::FloatPoint3D"* nonnull %8) #5
  br label %162

160:                                              ; preds = %148
  %161 = getelementptr inbounds %"class.blink::FloatPoint3D", %"class.blink::FloatPoint3D"* %8, i64 0, i32 0
  store float 0.000000e+00, float* %161, align 4, !alias.scope !8
  store float 0.000000e+00, float* %152, align 4, !alias.scope !8
  store float 1.000000e+00, float* %153, align 4, !alias.scope !8
  br label %162

162:                                              ; preds = %159, %160
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %9, i8* nonnull align 4 %151, i64 12, i1 false)
  call void @llvm.lifetime.end.p0i8(i64 12, i8* nonnull %151) #5
  %163 = getelementptr inbounds %"struct.blink::Rotation", %"struct.blink::Rotation"* %0, i64 0, i32 1
  %164 = bitcast double* %163 to i64*
  %165 = load i64, i64* %164, align 8
  %166 = bitcast double* %3 to i64*
  store i64 %165, i64* %166, align 8
  %167 = getelementptr inbounds %"struct.blink::Rotation", %"struct.blink::Rotation"* %1, i64 0, i32 1
  %168 = bitcast double* %167 to i64*
  %169 = load i64, i64* %168, align 8
  %170 = bitcast double* %4 to i64*
  store i64 %169, i64* %170, align 8
  br label %171

171:                                              ; preds = %47, %114, %129, %162, %109, %77
  %172 = phi i1 [ true, %77 ], [ true, %109 ], [ true, %47 ], [ false, %114 ], [ true, %162 ], [ false, %129 ]
  ret i1 %172
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: nounwind readnone speculatable
declare double @llvm.fabs.f64(double) #2

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5blink8Rotation5SlerpERKS0_S2_d(%"struct.blink::Rotation"* noalias nocapture sret, %"struct.blink::Rotation"* nocapture readonly dereferenceable(24), %"struct.blink::Rotation"* nocapture readonly dereferenceable(24), double) local_unnamed_addr #0 align 2 {
  %5 = alloca %"class.blink::FloatPoint3D", align 4
  %6 = alloca double, align 8
  %7 = alloca double, align 8
  %8 = alloca %"class.blink::FloatPoint3D", align 4
  %9 = alloca %"class.gfx::Quaternion", align 8
  %10 = alloca %"class.gfx::Quaternion", align 8
  %11 = alloca %"class.gfx::Quaternion", align 8
  %12 = bitcast double* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %12) #5
  store double 0xFFFFFFFFFFFFFFFF, double* %6, align 8
  %13 = bitcast double* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %13) #5
  store double 0xFFFFFFFFFFFFFFFF, double* %7, align 8
  %14 = bitcast %"class.blink::FloatPoint3D"* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 12, i8* nonnull %14) #5
  %15 = getelementptr inbounds %"class.blink::FloatPoint3D", %"class.blink::FloatPoint3D"* %8, i64 0, i32 0
  %16 = getelementptr inbounds %"class.blink::FloatPoint3D", %"class.blink::FloatPoint3D"* %8, i64 0, i32 1
  %17 = getelementptr inbounds %"class.blink::FloatPoint3D", %"class.blink::FloatPoint3D"* %8, i64 0, i32 2
  store float 0.000000e+00, float* %15, align 4
  store float 0.000000e+00, float* %16, align 4
  store float 0.000000e+00, float* %17, align 4
  %18 = call zeroext i1 @_ZN5blink8Rotation13GetCommonAxisERKS0_S2_RNS_12FloatPoint3DERdS5_(%"struct.blink::Rotation"* dereferenceable(24) %1, %"struct.blink::Rotation"* dereferenceable(24) %2, %"class.blink::FloatPoint3D"* nonnull dereferenceable(12) %8, double* nonnull dereferenceable(8) %6, double* nonnull dereferenceable(8) %7)
  br i1 %18, label %19, label %37

19:                                               ; preds = %4
  %20 = load double, double* %6, align 8
  %21 = load double, double* %7, align 8
  %22 = fsub double %21, %20
  %23 = fmul double %22, %3
  %24 = fadd double %20, %23
  %25 = bitcast %"class.blink::FloatPoint3D"* %8 to i32*
  %26 = load i32, i32* %25, align 4
  %27 = bitcast %"struct.blink::Rotation"* %0 to i32*
  store i32 %26, i32* %27, align 8
  %28 = getelementptr inbounds %"struct.blink::Rotation", %"struct.blink::Rotation"* %0, i64 0, i32 0, i32 1
  %29 = bitcast float* %16 to i32*
  %30 = load i32, i32* %29, align 4
  %31 = bitcast float* %28 to i32*
  store i32 %30, i32* %31, align 4
  %32 = getelementptr inbounds %"struct.blink::Rotation", %"struct.blink::Rotation"* %0, i64 0, i32 0, i32 2
  %33 = bitcast float* %17 to i32*
  %34 = load i32, i32* %33, align 4
  %35 = bitcast float* %32 to i32*
  store i32 %34, i32* %35, align 8
  %36 = getelementptr inbounds %"struct.blink::Rotation", %"struct.blink::Rotation"* %0, i64 0, i32 1
  store double %24, double* %36, align 8
  br label %113

37:                                               ; preds = %4
  %38 = bitcast %"class.gfx::Quaternion"* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %38) #5
  %39 = getelementptr inbounds %"struct.blink::Rotation", %"struct.blink::Rotation"* %1, i64 0, i32 0, i32 0
  %40 = bitcast %"class.gfx::Quaternion"* %9 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %40, i8 -1, i64 32, i1 false)
  %41 = load float, float* %39, align 4, !noalias !11
  %42 = fpext float %41 to double
  %43 = getelementptr inbounds %"struct.blink::Rotation", %"struct.blink::Rotation"* %1, i64 0, i32 0, i32 1
  %44 = load float, float* %43, align 4, !noalias !11
  %45 = fpext float %44 to double
  %46 = getelementptr inbounds %"struct.blink::Rotation", %"struct.blink::Rotation"* %1, i64 0, i32 0, i32 2
  %47 = load float, float* %46, align 4, !noalias !11
  %48 = fpext float %47 to double
  %49 = getelementptr inbounds %"struct.blink::Rotation", %"struct.blink::Rotation"* %1, i64 0, i32 1
  %50 = load double, double* %49, align 8, !noalias !11
  %51 = fmul double %50, 0x3F91DF46A2529D39
  call void @_ZN3gfx10Quaternion13FromAxisAngleEdddd(%"class.gfx::Quaternion"* nonnull sret %9, double %42, double %45, double %48, double %51) #5
  %52 = bitcast %"class.gfx::Quaternion"* %10 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %52) #5
  %53 = getelementptr inbounds %"struct.blink::Rotation", %"struct.blink::Rotation"* %2, i64 0, i32 0, i32 0
  %54 = bitcast %"class.gfx::Quaternion"* %10 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %54, i8 -1, i64 32, i1 false)
  %55 = load float, float* %53, align 4, !noalias !14
  %56 = fpext float %55 to double
  %57 = getelementptr inbounds %"struct.blink::Rotation", %"struct.blink::Rotation"* %2, i64 0, i32 0, i32 1
  %58 = load float, float* %57, align 4, !noalias !14
  %59 = fpext float %58 to double
  %60 = getelementptr inbounds %"struct.blink::Rotation", %"struct.blink::Rotation"* %2, i64 0, i32 0, i32 2
  %61 = load float, float* %60, align 4, !noalias !14
  %62 = fpext float %61 to double
  %63 = getelementptr inbounds %"struct.blink::Rotation", %"struct.blink::Rotation"* %2, i64 0, i32 1
  %64 = load double, double* %63, align 8, !noalias !14
  %65 = fmul double %64, 0x3F91DF46A2529D39
  call void @_ZN3gfx10Quaternion13FromAxisAngleEdddd(%"class.gfx::Quaternion"* nonnull sret %10, double %56, double %59, double %62, double %65) #5
  %66 = bitcast %"class.gfx::Quaternion"* %11 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %66) #5
  %67 = getelementptr inbounds %"class.gfx::Quaternion", %"class.gfx::Quaternion"* %11, i64 0, i32 0
  %68 = getelementptr inbounds %"class.gfx::Quaternion", %"class.gfx::Quaternion"* %11, i64 0, i32 1
  %69 = getelementptr inbounds %"class.gfx::Quaternion", %"class.gfx::Quaternion"* %11, i64 0, i32 3
  %70 = bitcast %"class.gfx::Quaternion"* %11 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %70, i8 -1, i64 32, i1 false)
  call void @_ZNK3gfx10Quaternion5SlerpERKS0_d(%"class.gfx::Quaternion"* nonnull sret %11, %"class.gfx::Quaternion"* nonnull %9, %"class.gfx::Quaternion"* nonnull dereferenceable(32) %10, double %3) #5
  %71 = load double, double* %67, align 8
  %72 = bitcast double* %68 to <2 x double>*
  %73 = load <2 x double>, <2 x double>* %72, align 8
  %74 = load double, double* %69, align 8
  %75 = call double @acos(double %74) #5, !noalias !17
  %76 = fmul double %75, 2.000000e+00
  %77 = fmul double %76, 0x404CA5DC1A63C1F8
  %78 = bitcast %"class.blink::FloatPoint3D"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 12, i8* nonnull %78) #5, !noalias !17
  %79 = getelementptr inbounds %"class.blink::FloatPoint3D", %"class.blink::FloatPoint3D"* %5, i64 0, i32 0
  %80 = getelementptr inbounds %"class.blink::FloatPoint3D", %"class.blink::FloatPoint3D"* %5, i64 0, i32 1
  %81 = getelementptr inbounds %"class.blink::FloatPoint3D", %"class.blink::FloatPoint3D"* %5, i64 0, i32 2
  %82 = fptrunc double %71 to float
  %83 = fptrunc <2 x double> %73 to <2 x float>
  store float %82, float* %79, align 4, !alias.scope !20, !noalias !17
  %84 = extractelement <2 x float> %83, i32 0
  store float %84, float* %80, align 4, !alias.scope !20, !noalias !17
  %85 = extractelement <2 x float> %83, i32 1
  store float %85, float* %81, align 4, !alias.scope !20, !noalias !17
  %86 = fmul float %82, %82
  %87 = fmul <2 x float> %83, %83
  %88 = extractelement <2 x float> %87, i32 0
  %89 = fadd float %86, %88
  %90 = extractelement <2 x float> %87, i32 1
  %91 = fadd float %90, %89
  %92 = call float @sqrtf(float %91) #5, !noalias !23
  %93 = fpext float %92 to double
  %94 = fcmp ogt double %93, 1.000000e-05
  br i1 %94, label %95, label %102

95:                                               ; preds = %37
  %96 = bitcast float* %81 to i32*
  %97 = bitcast float* %80 to i32*
  %98 = bitcast %"class.blink::FloatPoint3D"* %5 to i32*
  call void @_ZN5blink12FloatPoint3D9NormalizeEv(%"class.blink::FloatPoint3D"* nonnull %5) #5, !noalias !17
  %99 = load i32, i32* %98, align 4, !noalias !17
  %100 = load i32, i32* %97, align 4, !noalias !17
  %101 = load i32, i32* %96, align 4, !noalias !17
  br label %103

102:                                              ; preds = %37
  store float 0.000000e+00, float* %79, align 4, !alias.scope !20, !noalias !17
  store float 0.000000e+00, float* %80, align 4, !alias.scope !20, !noalias !17
  store float 1.000000e+00, float* %81, align 4, !alias.scope !20, !noalias !17
  br label %103

103:                                              ; preds = %95, %102
  %104 = phi i32 [ %101, %95 ], [ 1065353216, %102 ]
  %105 = phi i32 [ %100, %95 ], [ 0, %102 ]
  %106 = phi i32 [ %99, %95 ], [ 0, %102 ]
  %107 = bitcast %"struct.blink::Rotation"* %0 to i32*
  store i32 %106, i32* %107, align 8, !alias.scope !17
  %108 = getelementptr inbounds %"struct.blink::Rotation", %"struct.blink::Rotation"* %0, i64 0, i32 0, i32 1
  %109 = bitcast float* %108 to i32*
  store i32 %105, i32* %109, align 4, !alias.scope !17
  %110 = getelementptr inbounds %"struct.blink::Rotation", %"struct.blink::Rotation"* %0, i64 0, i32 0, i32 2
  %111 = bitcast float* %110 to i32*
  store i32 %104, i32* %111, align 8, !alias.scope !17
  %112 = getelementptr inbounds %"struct.blink::Rotation", %"struct.blink::Rotation"* %0, i64 0, i32 1
  store double %77, double* %112, align 8, !alias.scope !17
  call void @llvm.lifetime.end.p0i8(i64 12, i8* nonnull %78) #5, !noalias !17
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %66) #5
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %52) #5
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %38) #5
  br label %113

113:                                              ; preds = %103, %19
  call void @llvm.lifetime.end.p0i8(i64 12, i8* nonnull %14) #5
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %13) #5
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %12) #5
  ret void
}

declare void @_ZNK3gfx10Quaternion5SlerpERKS0_d(%"class.gfx::Quaternion"* sret, %"class.gfx::Quaternion"*, %"class.gfx::Quaternion"* dereferenceable(32), double) local_unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5blink8Rotation3AddERKS0_S2_(%"struct.blink::Rotation"* noalias nocapture sret, %"struct.blink::Rotation"* nocapture readonly dereferenceable(24), %"struct.blink::Rotation"* nocapture readonly dereferenceable(24)) local_unnamed_addr #0 align 2 {
  %4 = alloca %"class.blink::FloatPoint3D", align 4
  %5 = alloca double, align 8
  %6 = alloca double, align 8
  %7 = alloca %"class.blink::FloatPoint3D", align 4
  %8 = alloca %"class.gfx::Quaternion", align 8
  %9 = alloca %"class.gfx::Quaternion", align 16
  %10 = bitcast double* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %10) #5
  store double 0xFFFFFFFFFFFFFFFF, double* %5, align 8
  %11 = bitcast double* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %11) #5
  store double 0xFFFFFFFFFFFFFFFF, double* %6, align 8
  %12 = bitcast %"class.blink::FloatPoint3D"* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 12, i8* nonnull %12) #5
  %13 = getelementptr inbounds %"class.blink::FloatPoint3D", %"class.blink::FloatPoint3D"* %7, i64 0, i32 0
  %14 = getelementptr inbounds %"class.blink::FloatPoint3D", %"class.blink::FloatPoint3D"* %7, i64 0, i32 1
  %15 = getelementptr inbounds %"class.blink::FloatPoint3D", %"class.blink::FloatPoint3D"* %7, i64 0, i32 2
  store float 0.000000e+00, float* %13, align 4
  store float 0.000000e+00, float* %14, align 4
  store float 0.000000e+00, float* %15, align 4
  %16 = call zeroext i1 @_ZN5blink8Rotation13GetCommonAxisERKS0_S2_RNS_12FloatPoint3DERdS5_(%"struct.blink::Rotation"* dereferenceable(24) %1, %"struct.blink::Rotation"* dereferenceable(24) %2, %"class.blink::FloatPoint3D"* nonnull dereferenceable(12) %7, double* nonnull dereferenceable(8) %5, double* nonnull dereferenceable(8) %6)
  br i1 %16, label %17, label %33

17:                                               ; preds = %3
  %18 = load double, double* %5, align 8
  %19 = load double, double* %6, align 8
  %20 = fadd double %18, %19
  %21 = bitcast %"class.blink::FloatPoint3D"* %7 to i32*
  %22 = load i32, i32* %21, align 4
  %23 = bitcast %"struct.blink::Rotation"* %0 to i32*
  store i32 %22, i32* %23, align 8
  %24 = getelementptr inbounds %"struct.blink::Rotation", %"struct.blink::Rotation"* %0, i64 0, i32 0, i32 1
  %25 = bitcast float* %14 to i32*
  %26 = load i32, i32* %25, align 4
  %27 = bitcast float* %24 to i32*
  store i32 %26, i32* %27, align 4
  %28 = getelementptr inbounds %"struct.blink::Rotation", %"struct.blink::Rotation"* %0, i64 0, i32 0, i32 2
  %29 = bitcast float* %15 to i32*
  %30 = load i32, i32* %29, align 4
  %31 = bitcast float* %28 to i32*
  store i32 %30, i32* %31, align 8
  %32 = getelementptr inbounds %"struct.blink::Rotation", %"struct.blink::Rotation"* %0, i64 0, i32 1
  store double %20, double* %32, align 8
  br label %158

33:                                               ; preds = %3
  %34 = bitcast %"class.gfx::Quaternion"* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %34) #5
  %35 = getelementptr inbounds %"class.gfx::Quaternion", %"class.gfx::Quaternion"* %8, i64 0, i32 0
  %36 = getelementptr inbounds %"class.gfx::Quaternion", %"class.gfx::Quaternion"* %8, i64 0, i32 1
  %37 = getelementptr inbounds %"class.gfx::Quaternion", %"class.gfx::Quaternion"* %8, i64 0, i32 2
  %38 = getelementptr inbounds %"class.gfx::Quaternion", %"class.gfx::Quaternion"* %8, i64 0, i32 3
  %39 = getelementptr inbounds %"struct.blink::Rotation", %"struct.blink::Rotation"* %1, i64 0, i32 0, i32 0
  %40 = bitcast %"class.gfx::Quaternion"* %8 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %40, i8 -1, i64 32, i1 false)
  %41 = load float, float* %39, align 4, !noalias !24
  %42 = fpext float %41 to double
  %43 = getelementptr inbounds %"struct.blink::Rotation", %"struct.blink::Rotation"* %1, i64 0, i32 0, i32 1
  %44 = load float, float* %43, align 4, !noalias !24
  %45 = fpext float %44 to double
  %46 = getelementptr inbounds %"struct.blink::Rotation", %"struct.blink::Rotation"* %1, i64 0, i32 0, i32 2
  %47 = load float, float* %46, align 4, !noalias !24
  %48 = fpext float %47 to double
  %49 = getelementptr inbounds %"struct.blink::Rotation", %"struct.blink::Rotation"* %1, i64 0, i32 1
  %50 = load double, double* %49, align 8, !noalias !24
  %51 = fmul double %50, 0x3F91DF46A2529D39
  call void @_ZN3gfx10Quaternion13FromAxisAngleEdddd(%"class.gfx::Quaternion"* nonnull sret %8, double %42, double %45, double %48, double %51) #5
  %52 = bitcast %"class.gfx::Quaternion"* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %52) #5
  %53 = getelementptr inbounds %"class.gfx::Quaternion", %"class.gfx::Quaternion"* %9, i64 0, i32 2
  %54 = getelementptr inbounds %"struct.blink::Rotation", %"struct.blink::Rotation"* %2, i64 0, i32 0, i32 0
  %55 = bitcast %"class.gfx::Quaternion"* %9 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %55, i8 -1, i64 32, i1 false)
  %56 = load float, float* %54, align 4, !noalias !27
  %57 = fpext float %56 to double
  %58 = getelementptr inbounds %"struct.blink::Rotation", %"struct.blink::Rotation"* %2, i64 0, i32 0, i32 1
  %59 = load float, float* %58, align 4, !noalias !27
  %60 = fpext float %59 to double
  %61 = getelementptr inbounds %"struct.blink::Rotation", %"struct.blink::Rotation"* %2, i64 0, i32 0, i32 2
  %62 = load float, float* %61, align 4, !noalias !27
  %63 = fpext float %62 to double
  %64 = getelementptr inbounds %"struct.blink::Rotation", %"struct.blink::Rotation"* %2, i64 0, i32 1
  %65 = load double, double* %64, align 8, !noalias !27
  %66 = fmul double %65, 0x3F91DF46A2529D39
  call void @_ZN3gfx10Quaternion13FromAxisAngleEdddd(%"class.gfx::Quaternion"* nonnull sret %9, double %57, double %60, double %63, double %66) #5
  %67 = load double, double* %38, align 8, !noalias !30
  %68 = load double, double* %35, align 8, !noalias !30
  %69 = load double, double* %36, align 8, !noalias !30
  %70 = bitcast double* %53 to <2 x double>*
  %71 = load <2 x double>, <2 x double>* %70, align 16, !noalias !30
  %72 = shufflevector <2 x double> %71, <2 x double> undef, <2 x i32> <i32 1, i32 0>
  %73 = load double, double* %37, align 8, !noalias !30
  %74 = bitcast %"class.gfx::Quaternion"* %9 to <2 x double>*
  %75 = load <2 x double>, <2 x double>* %74, align 16, !noalias !30
  %76 = insertelement <2 x double> undef, double %67, i32 0
  %77 = shufflevector <2 x double> %76, <2 x double> undef, <2 x i32> zeroinitializer
  %78 = fmul <2 x double> %77, %75
  %79 = insertelement <2 x double> undef, double %68, i32 0
  %80 = shufflevector <2 x double> %79, <2 x double> undef, <2 x i32> zeroinitializer
  %81 = fmul <2 x double> %80, %72
  %82 = fadd <2 x double> %78, %81
  %83 = fsub <2 x double> %78, %81
  %84 = shufflevector <2 x double> %82, <2 x double> %83, <2 x i32> <i32 0, i32 3>
  %85 = insertelement <2 x double> undef, double %69, i32 0
  %86 = shufflevector <2 x double> %85, <2 x double> undef, <2 x i32> zeroinitializer
  %87 = fmul <2 x double> %86, %71
  %88 = fadd <2 x double> %84, %87
  %89 = insertelement <2 x double> undef, double %73, i32 0
  %90 = shufflevector <2 x double> %89, <2 x double> %75, <2 x i32> <i32 0, i32 2>
  %91 = extractelement <2 x double> %75, i32 1
  %92 = insertelement <2 x double> undef, double %91, i32 0
  %93 = insertelement <2 x double> %92, double %73, i32 1
  %94 = fmul <2 x double> %90, %93
  %95 = fsub <2 x double> %88, %94
  %96 = fadd <2 x double> %88, %94
  %97 = shufflevector <2 x double> %95, <2 x double> %96, <2 x i32> <i32 0, i32 3>
  %98 = fmul <2 x double> %77, %71
  %99 = shufflevector <2 x double> %75, <2 x double> undef, <2 x i32> <i32 1, i32 0>
  %100 = fmul <2 x double> %80, %99
  %101 = fadd <2 x double> %98, %100
  %102 = fsub <2 x double> %98, %100
  %103 = shufflevector <2 x double> %101, <2 x double> %102, <2 x i32> <i32 0, i32 3>
  %104 = fmul <2 x double> %75, %86
  %105 = fsub <2 x double> %103, %104
  %106 = shufflevector <2 x double> %89, <2 x double> undef, <2 x i32> zeroinitializer
  %107 = fmul <2 x double> %72, %106
  %108 = fadd <2 x double> %105, %107
  %109 = fsub <2 x double> %105, %107
  %110 = shufflevector <2 x double> %108, <2 x double> %109, <2 x i32> <i32 0, i32 3>
  %111 = extractelement <2 x double> %109, i32 1
  %112 = fcmp olt double %111, 0.000000e+00
  %113 = fsub <2 x double> <double -0.000000e+00, double -0.000000e+00>, %97
  %114 = fsub <2 x double> <double -0.000000e+00, double -0.000000e+00>, %110
  %115 = select i1 %112, <2 x double> %113, <2 x double> %97
  %116 = select i1 %112, <2 x double> %114, <2 x double> %110
  %117 = extractelement <2 x double> %116, i32 1
  %118 = call double @acos(double %117) #5, !noalias !33
  %119 = fmul double %118, 2.000000e+00
  %120 = fmul double %119, 0x404CA5DC1A63C1F8
  %121 = bitcast %"class.blink::FloatPoint3D"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 12, i8* nonnull %121) #5, !noalias !33
  %122 = getelementptr inbounds %"class.blink::FloatPoint3D", %"class.blink::FloatPoint3D"* %4, i64 0, i32 0
  %123 = getelementptr inbounds %"class.blink::FloatPoint3D", %"class.blink::FloatPoint3D"* %4, i64 0, i32 1
  %124 = getelementptr inbounds %"class.blink::FloatPoint3D", %"class.blink::FloatPoint3D"* %4, i64 0, i32 2
  %125 = extractelement <2 x double> %115, i32 0
  %126 = fptrunc double %125 to float
  %127 = shufflevector <2 x double> %116, <2 x double> %115, <2 x i32> <i32 0, i32 3>
  %128 = fptrunc <2 x double> %127 to <2 x float>
  store float %126, float* %122, align 4, !alias.scope !36, !noalias !33
  %129 = extractelement <2 x float> %128, i32 1
  store float %129, float* %123, align 4, !alias.scope !36, !noalias !33
  %130 = extractelement <2 x float> %128, i32 0
  store float %130, float* %124, align 4, !alias.scope !36, !noalias !33
  %131 = fmul float %126, %126
  %132 = fmul <2 x float> %128, %128
  %133 = extractelement <2 x float> %132, i32 1
  %134 = fadd float %131, %133
  %135 = extractelement <2 x float> %132, i32 0
  %136 = fadd float %135, %134
  %137 = call float @sqrtf(float %136) #5, !noalias !39
  %138 = fpext float %137 to double
  %139 = fcmp ogt double %138, 1.000000e-05
  br i1 %139, label %140, label %147

140:                                              ; preds = %33
  %141 = bitcast float* %124 to i32*
  %142 = bitcast float* %123 to i32*
  %143 = bitcast %"class.blink::FloatPoint3D"* %4 to i32*
  call void @_ZN5blink12FloatPoint3D9NormalizeEv(%"class.blink::FloatPoint3D"* nonnull %4) #5, !noalias !33
  %144 = load i32, i32* %143, align 4, !noalias !33
  %145 = load i32, i32* %142, align 4, !noalias !33
  %146 = load i32, i32* %141, align 4, !noalias !33
  br label %148

147:                                              ; preds = %33
  store float 0.000000e+00, float* %122, align 4, !alias.scope !36, !noalias !33
  store float 0.000000e+00, float* %123, align 4, !alias.scope !36, !noalias !33
  store float 1.000000e+00, float* %124, align 4, !alias.scope !36, !noalias !33
  br label %148

148:                                              ; preds = %140, %147
  %149 = phi i32 [ %146, %140 ], [ 1065353216, %147 ]
  %150 = phi i32 [ %145, %140 ], [ 0, %147 ]
  %151 = phi i32 [ %144, %140 ], [ 0, %147 ]
  %152 = bitcast %"struct.blink::Rotation"* %0 to i32*
  store i32 %151, i32* %152, align 8, !alias.scope !33
  %153 = getelementptr inbounds %"struct.blink::Rotation", %"struct.blink::Rotation"* %0, i64 0, i32 0, i32 1
  %154 = bitcast float* %153 to i32*
  store i32 %150, i32* %154, align 4, !alias.scope !33
  %155 = getelementptr inbounds %"struct.blink::Rotation", %"struct.blink::Rotation"* %0, i64 0, i32 0, i32 2
  %156 = bitcast float* %155 to i32*
  store i32 %149, i32* %156, align 8, !alias.scope !33
  %157 = getelementptr inbounds %"struct.blink::Rotation", %"struct.blink::Rotation"* %0, i64 0, i32 1
  store double %120, double* %157, align 8, !alias.scope !33
  call void @llvm.lifetime.end.p0i8(i64 12, i8* nonnull %121) #5, !noalias !33
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %52) #5
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %34) #5
  br label %158

158:                                              ; preds = %148, %17
  call void @llvm.lifetime.end.p0i8(i64 12, i8* nonnull %12) #5
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %11) #5
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %10) #5
  ret void
}

declare void @_ZN5blink12FloatPoint3D9NormalizeEv(%"class.blink::FloatPoint3D"*) local_unnamed_addr #3

; Function Attrs: nofree nounwind
declare float @sqrtf(float) local_unnamed_addr #4

declare void @_ZN3gfx10Quaternion13FromAxisAngleEdddd(%"class.gfx::Quaternion"* sret, double, double, double, double) local_unnamed_addr #3

; Function Attrs: nofree nounwind
declare double @acos(double) local_unnamed_addr #4

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { nounwind readnone speculatable }
attributes #3 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{!3}
!3 = distinct !{!3, !4, !"_ZN5blink12_GLOBAL__N_113NormalizeAxisENS_12FloatPoint3DE: argument 0"}
!4 = distinct !{!4, !"_ZN5blink12_GLOBAL__N_113NormalizeAxisENS_12FloatPoint3DE"}
!5 = !{!6}
!6 = distinct !{!6, !7, !"_ZN5blink12_GLOBAL__N_113NormalizeAxisENS_12FloatPoint3DE: argument 0"}
!7 = distinct !{!7, !"_ZN5blink12_GLOBAL__N_113NormalizeAxisENS_12FloatPoint3DE"}
!8 = !{!9}
!9 = distinct !{!9, !10, !"_ZN5blink12_GLOBAL__N_113NormalizeAxisENS_12FloatPoint3DE: argument 0"}
!10 = distinct !{!10, !"_ZN5blink12_GLOBAL__N_113NormalizeAxisENS_12FloatPoint3DE"}
!11 = !{!12}
!12 = distinct !{!12, !13, !"_ZN5blink12_GLOBAL__N_117ComputeQuaternionERKNS_8RotationE: argument 0"}
!13 = distinct !{!13, !"_ZN5blink12_GLOBAL__N_117ComputeQuaternionERKNS_8RotationE"}
!14 = !{!15}
!15 = distinct !{!15, !16, !"_ZN5blink12_GLOBAL__N_117ComputeQuaternionERKNS_8RotationE: argument 0"}
!16 = distinct !{!16, !"_ZN5blink12_GLOBAL__N_117ComputeQuaternionERKNS_8RotationE"}
!17 = !{!18}
!18 = distinct !{!18, !19, !"_ZN5blink12_GLOBAL__N_115ComputeRotationEN3gfx10QuaternionE: argument 0"}
!19 = distinct !{!19, !"_ZN5blink12_GLOBAL__N_115ComputeRotationEN3gfx10QuaternionE"}
!20 = !{!21}
!21 = distinct !{!21, !22, !"_ZN5blink12_GLOBAL__N_113NormalizeAxisENS_12FloatPoint3DE: argument 0"}
!22 = distinct !{!22, !"_ZN5blink12_GLOBAL__N_113NormalizeAxisENS_12FloatPoint3DE"}
!23 = !{!21, !18}
!24 = !{!25}
!25 = distinct !{!25, !26, !"_ZN5blink12_GLOBAL__N_117ComputeQuaternionERKNS_8RotationE: argument 0"}
!26 = distinct !{!26, !"_ZN5blink12_GLOBAL__N_117ComputeQuaternionERKNS_8RotationE"}
!27 = !{!28}
!28 = distinct !{!28, !29, !"_ZN5blink12_GLOBAL__N_117ComputeQuaternionERKNS_8RotationE: argument 0"}
!29 = distinct !{!29, !"_ZN5blink12_GLOBAL__N_117ComputeQuaternionERKNS_8RotationE"}
!30 = !{!31}
!31 = distinct !{!31, !32, !"_ZNK3gfx10QuaternionmlERKS0_: argument 0"}
!32 = distinct !{!32, !"_ZNK3gfx10QuaternionmlERKS0_"}
!33 = !{!34}
!34 = distinct !{!34, !35, !"_ZN5blink12_GLOBAL__N_115ComputeRotationEN3gfx10QuaternionE: argument 0"}
!35 = distinct !{!35, !"_ZN5blink12_GLOBAL__N_115ComputeRotationEN3gfx10QuaternionE"}
!36 = !{!37}
!37 = distinct !{!37, !38, !"_ZN5blink12_GLOBAL__N_113NormalizeAxisENS_12FloatPoint3DE: argument 0"}
!38 = distinct !{!38, !"_ZN5blink12_GLOBAL__N_113NormalizeAxisENS_12FloatPoint3DE"}
!39 = !{!37, !34}
