; ModuleID = '../../third_party/openscreen/src/util/crypto/digest_sign.cc'
source_filename = "../../third_party/openscreen/src/util/crypto/digest_sign.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%"class.openscreen::ErrorOr" = type <{ %union.anon.0, i8, [7 x i8] }>
%union.anon.0 = type { %"class.openscreen::Error" }
%"class.openscreen::Error" = type { i8, %"class.std::__1::basic_string" }
%"class.std::__1::basic_string" = type { %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" = type { %union.anon.1 }
%union.anon.1 = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" = type { i8*, i64, i64 }
%struct.env_md_st = type opaque
%struct.evp_pkey_st = type { i32, i32, %union.anon, %struct.evp_pkey_asn1_method_st* }
%union.anon = type { i8* }
%struct.evp_pkey_asn1_method_st = type opaque
%"class.bssl::internal::StackAllocated" = type { %struct.env_md_ctx_st }
%struct.env_md_ctx_st = type { %struct.env_md_st*, i8*, %struct.evp_pkey_ctx_st*, %struct.evp_md_pctx_ops* }
%struct.evp_pkey_ctx_st = type opaque
%struct.evp_md_pctx_ops = type opaque
%struct.engine_st = type opaque
%"class.std::__1::__basic_string_common" = type { i8 }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short" = type { [23 x i8], %struct.anon }
%struct.anon = type { i8 }

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN10openscreen8SignDataEPK9env_md_stP11evp_pkey_stN4absl4SpanIKhEE(%"class.openscreen::ErrorOr"* noalias sret, %struct.env_md_st*, %struct.evp_pkey_st*, i8*, i64) local_unnamed_addr #0 {
  %6 = alloca %"class.bssl::internal::StackAllocated", align 8
  %7 = alloca i64, align 8
  %8 = alloca %"class.std::__1::basic_string", align 8
  %9 = bitcast %"class.bssl::internal::StackAllocated"* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %9) #6
  %10 = getelementptr inbounds %"class.bssl::internal::StackAllocated", %"class.bssl::internal::StackAllocated"* %6, i64 0, i32 0
  %11 = bitcast %"class.bssl::internal::StackAllocated"* %6 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %11, i8 -86, i64 32, i1 false)
  call void @EVP_MD_CTX_init(%struct.env_md_ctx_st* nonnull %10) #6
  %12 = call i32 @EVP_DigestSignInit(%struct.env_md_ctx_st* nonnull %10, %struct.evp_pkey_ctx_st** null, %struct.env_md_st* %1, %struct.engine_st* null, %struct.evp_pkey_st* %2) #6
  %13 = icmp eq i32 %12, 0
  br i1 %13, label %14, label %17

14:                                               ; preds = %5
  %15 = getelementptr inbounds %"class.openscreen::ErrorOr", %"class.openscreen::ErrorOr"* %0, i64 0, i32 0, i32 0
  call void @_ZN10openscreen5ErrorC1ENS0_4CodeE(%"class.openscreen::Error"* %15, i8 signext 43) #6
  %16 = getelementptr inbounds %"class.openscreen::ErrorOr", %"class.openscreen::ErrorOr"* %0, i64 0, i32 1
  store i8 0, i8* %16, align 8
  br label %71

17:                                               ; preds = %5
  %18 = bitcast i64* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %18) #6
  store i64 0, i64* %7, align 8
  %19 = call i32 @EVP_DigestSign(%struct.env_md_ctx_st* nonnull %10, i8* null, i64* nonnull %7, i8* %3, i64 %4) #6
  %20 = icmp ne i32 %19, 1
  %21 = load i64, i64* %7, align 8
  %22 = icmp eq i64 %21, 0
  %23 = or i1 %20, %22
  br i1 %23, label %24, label %27

24:                                               ; preds = %17
  %25 = getelementptr inbounds %"class.openscreen::ErrorOr", %"class.openscreen::ErrorOr"* %0, i64 0, i32 0, i32 0
  call void @_ZN10openscreen5ErrorC1ENS0_4CodeE(%"class.openscreen::Error"* %25, i8 signext 43) #6
  %26 = getelementptr inbounds %"class.openscreen::ErrorOr", %"class.openscreen::ErrorOr"* %0, i64 0, i32 1
  store i8 0, i8* %26, align 8
  br label %70

27:                                               ; preds = %17
  %28 = bitcast %"class.std::__1::basic_string"* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %28) #6
  %29 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %8, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %30 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %8, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %31 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %8, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 2
  %32 = icmp ugt i64 %21, -17
  %33 = bitcast %"class.std::__1::basic_string"* %8 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %33, i8 -86, i64 24, i1 false)
  br i1 %32, label %34, label %36

34:                                               ; preds = %27
  %35 = bitcast %"class.std::__1::basic_string"* %8 to %"class.std::__1::__basic_string_common"*
  call void @_ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__basic_string_common"* nonnull %35) #7
  unreachable

36:                                               ; preds = %27
  %37 = icmp ult i64 %21, 23
  br i1 %37, label %44, label %38

38:                                               ; preds = %36
  %39 = add nuw i64 %21, 16
  %40 = and i64 %39, -16
  %41 = call i8* @_Znwm(i64 %40) #8
  store i8* %41, i8** %29, align 8
  %42 = or i64 %40, -9223372036854775808
  store i64 %42, i64* %31, align 8
  store i64 %21, i64* %30, align 8
  %43 = bitcast %"class.std::__1::basic_string"* %8 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  br label %48

44:                                               ; preds = %36
  %45 = trunc i64 %21 to i8
  %46 = bitcast %"class.std::__1::basic_string"* %8 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %47 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %46, i64 0, i32 1, i32 0
  store i8 %45, i8* %47, align 1
  br label %48

48:                                               ; preds = %38, %44
  %49 = phi %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* [ %43, %38 ], [ %46, %44 ]
  %50 = phi i8* [ %41, %38 ], [ %28, %44 ]
  call void @llvm.memset.p0i8.i64(i8* nonnull align 1 %50, i8 0, i64 %21, i1 false) #6
  %51 = getelementptr inbounds i8, i8* %50, i64 %21
  store i8 0, i8* %51, align 1
  %52 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %49, i64 0, i32 1, i32 0
  %53 = load i8, i8* %52, align 1
  %54 = icmp slt i8 %53, 0
  %55 = load i8*, i8** %29, align 8
  %56 = select i1 %54, i8* %55, i8* %28
  %57 = call i32 @EVP_DigestSign(%struct.env_md_ctx_st* nonnull %10, i8* %56, i64* nonnull %7, i8* %3, i64 %4) #6
  %58 = icmp eq i32 %57, 1
  br i1 %58, label %59, label %62

59:                                               ; preds = %48
  %60 = getelementptr inbounds %"class.openscreen::ErrorOr", %"class.openscreen::ErrorOr"* %0, i64 0, i32 0, i32 0, i32 0
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %60, i8* nonnull align 8 %28, i64 24, i1 false) #6
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %28, i8 0, i64 24, i1 false) #6
  %61 = getelementptr inbounds %"class.openscreen::ErrorOr", %"class.openscreen::ErrorOr"* %0, i64 0, i32 1
  store i8 1, i8* %61, align 8
  br label %69

62:                                               ; preds = %48
  %63 = getelementptr inbounds %"class.openscreen::ErrorOr", %"class.openscreen::ErrorOr"* %0, i64 0, i32 0, i32 0
  call void @_ZN10openscreen5ErrorC1ENS0_4CodeE(%"class.openscreen::Error"* %63, i8 signext 84) #6
  %64 = load i8, i8* %52, align 1
  %65 = icmp slt i8 %64, 0
  %66 = getelementptr inbounds %"class.openscreen::ErrorOr", %"class.openscreen::ErrorOr"* %0, i64 0, i32 1
  store i8 0, i8* %66, align 8
  br i1 %65, label %67, label %69

67:                                               ; preds = %62
  %68 = load i8*, i8** %29, align 8
  call void @_ZdlPv(i8* %68) #8
  br label %69

69:                                               ; preds = %59, %62, %67
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %28) #6
  br label %70

70:                                               ; preds = %69, %24
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %18) #6
  br label %71

71:                                               ; preds = %70, %14
  %72 = call i32 @EVP_MD_CTX_cleanup(%struct.env_md_ctx_st* nonnull %10) #6
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %9) #6
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

declare i32 @EVP_DigestSignInit(%struct.env_md_ctx_st*, %struct.evp_pkey_ctx_st**, %struct.env_md_st*, %struct.engine_st*, %struct.evp_pkey_st*) local_unnamed_addr #2

declare i32 @EVP_DigestSign(%struct.env_md_ctx_st*, i8*, i64*, i8*, i64) local_unnamed_addr #2

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(i8*) local_unnamed_addr #3

declare void @EVP_MD_CTX_init(%struct.env_md_ctx_st*) local_unnamed_addr #2

declare i32 @EVP_MD_CTX_cleanup(%struct.env_md_ctx_st*) local_unnamed_addr #2

declare void @_ZN10openscreen5ErrorC1ENS0_4CodeE(%"class.openscreen::Error"*, i8 signext) unnamed_addr #2

; Function Attrs: noreturn
declare void @_ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__basic_string_common"*) local_unnamed_addr #4

; Function Attrs: nobuiltin nofree
declare noalias nonnull i8* @_Znwm(i64) local_unnamed_addr #5

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #1

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nobuiltin nofree "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nounwind }
attributes #7 = { noreturn nounwind }
attributes #8 = { builtin nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
