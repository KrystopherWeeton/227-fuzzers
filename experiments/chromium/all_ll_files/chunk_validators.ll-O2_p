; ModuleID = '../../third_party/webrtc/net/dcsctp/packet/chunk_validators.cc'
source_filename = "../../third_party/webrtc/net/dcsctp/packet/chunk_validators.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"class.dcsctp::SackChunk" = type { %"class.dcsctp::Chunk", %"class.dcsctp::StrongAlias", i32, %"class.std::__1::vector", %"class.std::__1::set" }
%"class.dcsctp::Chunk" = type { i32 (...)** }
%"class.dcsctp::StrongAlias" = type { i32 }
%"class.std::__1::vector" = type { %"class.std::__1::__vector_base" }
%"class.std::__1::__vector_base" = type { %"struct.dcsctp::SackChunk::GapAckBlock"*, %"struct.dcsctp::SackChunk::GapAckBlock"*, %"class.std::__1::__compressed_pair" }
%"struct.dcsctp::SackChunk::GapAckBlock" = type { i16, i16 }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %"struct.dcsctp::SackChunk::GapAckBlock"* }
%"class.std::__1::set" = type { %"class.std::__1::__tree" }
%"class.std::__1::__tree" = type { %"class.std::__1::__tree_end_node"*, %"class.std::__1::__compressed_pair.1", %"class.std::__1::__compressed_pair.6" }
%"class.std::__1::__tree_end_node" = type { %"class.std::__1::__tree_node_base"* }
%"class.std::__1::__tree_node_base" = type <{ %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_end_node"*, i8, [7 x i8] }>
%"class.std::__1::__compressed_pair.1" = type { %"struct.std::__1::__compressed_pair_elem.2" }
%"struct.std::__1::__compressed_pair_elem.2" = type { %"class.std::__1::__tree_end_node" }
%"class.std::__1::__compressed_pair.6" = type { %"struct.std::__1::__compressed_pair_elem.7" }
%"struct.std::__1::__compressed_pair_elem.7" = type { i64 }
%"class.std::__1::__vector_base_common" = type { i8 }
%"class.std::__1::__tree_node" = type { %"class.std::__1::__tree_node_base.base", %"class.dcsctp::StrongAlias" }
%"class.std::__1::__tree_node_base.base" = type <{ %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_end_node"*, i8 }>

$_ZNSt3__13setIN6dcsctp11StrongAliasINS1_6TSNTagEjEENS_4lessIS4_EENS_9allocatorIS4_EEEC2ERKS9_ = comdat any

$_ZNSt3__16__treeIN6dcsctp11StrongAliasINS1_6TSNTagEjEENS_4lessIS4_EENS_9allocatorIS4_EEE7destroyEPNS_11__tree_nodeIS4_PvEE = comdat any

$_ZNSt3__127__tree_balance_after_insertIPNS_16__tree_node_baseIPvEEEEvT_S5_ = comdat any

@_ZTVN6dcsctp9SackChunkE = external unnamed_addr constant { [6 x i8*] }, align 8

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN6dcsctp15ChunkValidators5CleanEONS_9SackChunkE(%"class.dcsctp::SackChunk"* noalias sret, %"class.dcsctp::SackChunk"* dereferenceable(64)) local_unnamed_addr #0 align 2 {
  %3 = alloca %"class.std::__1::vector", align 8
  %4 = alloca %"class.std::__1::set", align 16
  %5 = alloca %"class.std::__1::vector", align 8
  %6 = alloca %"class.std::__1::set", align 16
  %7 = getelementptr inbounds %"class.dcsctp::SackChunk", %"class.dcsctp::SackChunk"* %1, i64 0, i32 3, i32 0, i32 0
  %8 = load %"struct.dcsctp::SackChunk::GapAckBlock"*, %"struct.dcsctp::SackChunk::GapAckBlock"** %7, align 8
  %9 = getelementptr inbounds %"class.dcsctp::SackChunk", %"class.dcsctp::SackChunk"* %1, i64 0, i32 3, i32 0, i32 1
  %10 = bitcast %"struct.dcsctp::SackChunk::GapAckBlock"** %9 to i64*
  %11 = load i64, i64* %10, align 8
  %12 = ptrtoint %"struct.dcsctp::SackChunk::GapAckBlock"* %8 to i64
  %13 = sub i64 %11, %12
  %14 = icmp eq i64 %13, 0
  br i1 %14, label %34, label %15

15:                                               ; preds = %2
  %16 = ashr exact i64 %13, 2
  %17 = getelementptr inbounds %"struct.dcsctp::SackChunk::GapAckBlock", %"struct.dcsctp::SackChunk::GapAckBlock"* %8, i64 %16
  br label %20

18:                                               ; preds = %28
  %19 = icmp eq %"struct.dcsctp::SackChunk::GapAckBlock"* %33, %17
  br i1 %19, label %34, label %20

20:                                               ; preds = %18, %15
  %21 = phi %"struct.dcsctp::SackChunk::GapAckBlock"* [ %33, %18 ], [ %8, %15 ]
  %22 = phi i16 [ %24, %18 ], [ 0, %15 ]
  %23 = getelementptr inbounds %"struct.dcsctp::SackChunk::GapAckBlock", %"struct.dcsctp::SackChunk::GapAckBlock"* %21, i64 0, i32 1
  %24 = load i16, i16* %23, align 2
  %25 = getelementptr inbounds %"struct.dcsctp::SackChunk::GapAckBlock", %"struct.dcsctp::SackChunk::GapAckBlock"* %21, i64 0, i32 0
  %26 = load i16, i16* %25, align 2
  %27 = icmp ult i16 %24, %26
  br i1 %27, label %71, label %28

28:                                               ; preds = %20
  %29 = zext i16 %26 to i32
  %30 = zext i16 %22 to i32
  %31 = add nuw nsw i32 %30, 1
  %32 = icmp ult i32 %31, %29
  %33 = getelementptr inbounds %"struct.dcsctp::SackChunk::GapAckBlock", %"struct.dcsctp::SackChunk::GapAckBlock"* %21, i64 1
  br i1 %32, label %18, label %71

34:                                               ; preds = %18, %2
  %35 = getelementptr inbounds %"class.dcsctp::SackChunk", %"class.dcsctp::SackChunk"* %0, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [6 x i8*] }, { [6 x i8*] }* @_ZTVN6dcsctp9SackChunkE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %35, align 8
  %36 = getelementptr inbounds %"class.dcsctp::SackChunk", %"class.dcsctp::SackChunk"* %0, i64 0, i32 1
  %37 = getelementptr inbounds %"class.dcsctp::SackChunk", %"class.dcsctp::SackChunk"* %1, i64 0, i32 1
  %38 = bitcast %"class.dcsctp::StrongAlias"* %37 to i64*
  %39 = bitcast %"class.dcsctp::StrongAlias"* %36 to i64*
  %40 = load i64, i64* %38, align 8
  store i64 %40, i64* %39, align 8
  %41 = getelementptr inbounds %"class.dcsctp::SackChunk", %"class.dcsctp::SackChunk"* %0, i64 0, i32 3
  %42 = getelementptr inbounds %"class.dcsctp::SackChunk", %"class.dcsctp::SackChunk"* %1, i64 0, i32 3
  %43 = bitcast %"class.std::__1::vector"* %41 to i64*
  store i64 %12, i64* %43, align 8
  %44 = getelementptr inbounds %"class.dcsctp::SackChunk", %"class.dcsctp::SackChunk"* %0, i64 0, i32 3, i32 0, i32 1
  %45 = bitcast %"struct.dcsctp::SackChunk::GapAckBlock"** %44 to i64*
  store i64 %11, i64* %45, align 8
  %46 = getelementptr inbounds %"class.dcsctp::SackChunk", %"class.dcsctp::SackChunk"* %1, i64 0, i32 3, i32 0, i32 2, i32 0, i32 0
  %47 = bitcast %"struct.dcsctp::SackChunk::GapAckBlock"** %46 to i64*
  %48 = load i64, i64* %47, align 8
  %49 = getelementptr inbounds %"class.dcsctp::SackChunk", %"class.dcsctp::SackChunk"* %0, i64 0, i32 3, i32 0, i32 2, i32 0, i32 0
  %50 = bitcast %"struct.dcsctp::SackChunk::GapAckBlock"** %49 to i64*
  store i64 %48, i64* %50, align 8
  %51 = bitcast %"class.std::__1::vector"* %42 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %51, i8 0, i64 24, i1 false) #8
  %52 = getelementptr inbounds %"class.dcsctp::SackChunk", %"class.dcsctp::SackChunk"* %0, i64 0, i32 4
  %53 = getelementptr inbounds %"class.dcsctp::SackChunk", %"class.dcsctp::SackChunk"* %1, i64 0, i32 4
  %54 = bitcast %"class.std::__1::set"* %53 to <2 x i64>*
  %55 = load <2 x i64>, <2 x i64>* %54, align 8
  %56 = bitcast %"class.std::__1::set"* %52 to <2 x i64>*
  store <2 x i64> %55, <2 x i64>* %56, align 8
  %57 = getelementptr inbounds %"class.dcsctp::SackChunk", %"class.dcsctp::SackChunk"* %1, i64 0, i32 4, i32 0, i32 2, i32 0, i32 0
  %58 = getelementptr inbounds %"class.dcsctp::SackChunk", %"class.dcsctp::SackChunk"* %0, i64 0, i32 4, i32 0, i32 2, i32 0, i32 0
  %59 = load i64, i64* %57, align 8
  store i64 %59, i64* %58, align 8
  %60 = icmp eq i64 %59, 0
  %61 = getelementptr inbounds %"class.dcsctp::SackChunk", %"class.dcsctp::SackChunk"* %0, i64 0, i32 4, i32 0, i32 1, i32 0, i32 0
  br i1 %60, label %62, label %64

62:                                               ; preds = %34
  %63 = getelementptr inbounds %"class.std::__1::set", %"class.std::__1::set"* %52, i64 0, i32 0, i32 0
  store %"class.std::__1::__tree_end_node"* %61, %"class.std::__1::__tree_end_node"** %63, align 8
  br label %430

64:                                               ; preds = %34
  %65 = extractelement <2 x i64> %55, i32 1
  %66 = inttoptr i64 %65 to %"class.std::__1::__tree_node_base"*
  %67 = getelementptr inbounds %"class.std::__1::set", %"class.std::__1::set"* %53, i64 0, i32 0, i32 0
  %68 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %66, i64 0, i32 2
  store %"class.std::__1::__tree_end_node"* %61, %"class.std::__1::__tree_end_node"** %68, align 8
  %69 = getelementptr inbounds %"class.dcsctp::SackChunk", %"class.dcsctp::SackChunk"* %1, i64 0, i32 4, i32 0, i32 1, i32 0, i32 0
  store %"class.std::__1::__tree_end_node"* %69, %"class.std::__1::__tree_end_node"** %67, align 8
  %70 = bitcast %"class.std::__1::__tree_end_node"* %69 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %70, i8 0, i64 16, i1 false) #8
  br label %430

71:                                               ; preds = %28, %20
  %72 = bitcast %"class.std::__1::vector"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %72) #8
  %73 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %3, i64 0, i32 0, i32 0
  %74 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %3, i64 0, i32 0, i32 1
  %75 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %3, i64 0, i32 0, i32 2, i32 0, i32 0
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %72, i8 0, i64 24, i1 false) #8
  %76 = bitcast %"struct.dcsctp::SackChunk::GapAckBlock"** %75 to i64*
  %77 = bitcast %"class.std::__1::vector"* %3 to i64*
  %78 = icmp eq i64 %13, 0
  br i1 %78, label %90, label %79

79:                                               ; preds = %71
  %80 = icmp ugt i64 %16, 4611686018427387903
  br i1 %80, label %81, label %82

81:                                               ; preds = %79
  tail call void @abort() #9
  unreachable

82:                                               ; preds = %79
  %83 = bitcast %"struct.dcsctp::SackChunk::GapAckBlock"** %74 to i64*
  %84 = tail call i8* @_Znwm(i64 %13) #10
  %85 = bitcast i8* %84 to %"struct.dcsctp::SackChunk::GapAckBlock"*
  %86 = ptrtoint i8* %84 to i64
  %87 = getelementptr inbounds %"struct.dcsctp::SackChunk::GapAckBlock", %"struct.dcsctp::SackChunk::GapAckBlock"* %85, i64 %16
  %88 = ptrtoint %"struct.dcsctp::SackChunk::GapAckBlock"* %87 to i64
  %89 = ptrtoint i8* %84 to i64
  store i64 %89, i64* %77, align 8
  store i64 %86, i64* %83, align 8
  store i64 %88, i64* %76, align 8
  br label %90

90:                                               ; preds = %71, %82
  %91 = phi %"struct.dcsctp::SackChunk::GapAckBlock"* [ null, %71 ], [ %85, %82 ]
  %92 = phi i64 [ 0, %71 ], [ %86, %82 ]
  %93 = bitcast %"struct.dcsctp::SackChunk::GapAckBlock"** %74 to i64*
  br label %101

94:                                               ; preds = %171
  %95 = load i64, i64* %77, align 8
  %96 = inttoptr i64 %95 to %"struct.dcsctp::SackChunk::GapAckBlock"*
  %97 = inttoptr i64 %95 to i32*
  %98 = sub i64 %173, %95
  %99 = ashr exact i64 %98, 2
  %100 = icmp ult i64 %99, 2
  br i1 %100, label %177, label %215

101:                                              ; preds = %90, %171
  %102 = phi %"struct.dcsctp::SackChunk::GapAckBlock"* [ %91, %90 ], [ %172, %171 ]
  %103 = phi i64 [ %92, %90 ], [ %173, %171 ]
  %104 = phi %"struct.dcsctp::SackChunk::GapAckBlock"* [ %91, %90 ], [ %174, %171 ]
  %105 = phi %"struct.dcsctp::SackChunk::GapAckBlock"* [ %8, %90 ], [ %175, %171 ]
  %106 = getelementptr inbounds %"struct.dcsctp::SackChunk::GapAckBlock", %"struct.dcsctp::SackChunk::GapAckBlock"* %105, i64 0, i32 1
  %107 = load i16, i16* %106, align 2
  %108 = getelementptr inbounds %"struct.dcsctp::SackChunk::GapAckBlock", %"struct.dcsctp::SackChunk::GapAckBlock"* %105, i64 0, i32 0
  %109 = load i16, i16* %108, align 2
  %110 = icmp ugt i16 %107, %109
  br i1 %110, label %111, label %171

111:                                              ; preds = %101
  %112 = load %"struct.dcsctp::SackChunk::GapAckBlock"*, %"struct.dcsctp::SackChunk::GapAckBlock"** %75, align 8
  %113 = icmp ult %"struct.dcsctp::SackChunk::GapAckBlock"* %104, %112
  %114 = ptrtoint %"struct.dcsctp::SackChunk::GapAckBlock"* %112 to i64
  br i1 %113, label %115, label %121

115:                                              ; preds = %111
  %116 = bitcast %"struct.dcsctp::SackChunk::GapAckBlock"* %105 to i32*
  %117 = bitcast %"struct.dcsctp::SackChunk::GapAckBlock"* %104 to i32*
  %118 = load i32, i32* %116, align 2
  store i32 %118, i32* %117, align 2
  %119 = getelementptr inbounds %"struct.dcsctp::SackChunk::GapAckBlock", %"struct.dcsctp::SackChunk::GapAckBlock"* %104, i64 1
  %120 = ptrtoint %"struct.dcsctp::SackChunk::GapAckBlock"* %119 to i64
  store i64 %120, i64* %93, align 8
  br label %171

121:                                              ; preds = %111
  %122 = ptrtoint %"struct.dcsctp::SackChunk::GapAckBlock"* %104 to i64
  %123 = load i64, i64* %77, align 8
  %124 = sub i64 %122, %123
  %125 = ashr exact i64 %124, 2
  %126 = add nsw i64 %125, 1
  %127 = icmp ugt i64 %126, 4611686018427387903
  br i1 %127, label %128, label %130

128:                                              ; preds = %121
  %129 = bitcast %"class.std::__1::vector"* %3 to %"class.std::__1::__vector_base_common"*
  call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* nonnull %129) #9
  unreachable

130:                                              ; preds = %121
  %131 = sub i64 %114, %123
  %132 = ashr exact i64 %131, 2
  %133 = icmp ult i64 %132, 2305843009213693951
  br i1 %133, label %134, label %142

134:                                              ; preds = %130
  %135 = ashr exact i64 %131, 1
  %136 = icmp ult i64 %135, %126
  %137 = select i1 %136, i64 %126, i64 %135
  %138 = icmp eq i64 %137, 0
  br i1 %138, label %147, label %139

139:                                              ; preds = %134
  %140 = icmp ugt i64 %137, 4611686018427387903
  br i1 %140, label %141, label %142

141:                                              ; preds = %139
  tail call void @abort() #9
  unreachable

142:                                              ; preds = %139, %130
  %143 = phi i64 [ %137, %139 ], [ 4611686018427387903, %130 ]
  %144 = shl i64 %143, 2
  %145 = tail call i8* @_Znwm(i64 %144) #10
  %146 = bitcast i8* %145 to %"struct.dcsctp::SackChunk::GapAckBlock"*
  br label %147

147:                                              ; preds = %142, %134
  %148 = phi i64 [ %143, %142 ], [ 0, %134 ]
  %149 = phi %"struct.dcsctp::SackChunk::GapAckBlock"* [ %146, %142 ], [ null, %134 ]
  %150 = getelementptr inbounds %"struct.dcsctp::SackChunk::GapAckBlock", %"struct.dcsctp::SackChunk::GapAckBlock"* %149, i64 %125
  %151 = getelementptr inbounds %"struct.dcsctp::SackChunk::GapAckBlock", %"struct.dcsctp::SackChunk::GapAckBlock"* %149, i64 %148
  %152 = ptrtoint %"struct.dcsctp::SackChunk::GapAckBlock"* %151 to i64
  %153 = bitcast %"struct.dcsctp::SackChunk::GapAckBlock"* %105 to i32*
  %154 = bitcast %"struct.dcsctp::SackChunk::GapAckBlock"* %150 to i32*
  %155 = load i32, i32* %153, align 2
  store i32 %155, i32* %154, align 2
  %156 = getelementptr inbounds %"struct.dcsctp::SackChunk::GapAckBlock", %"struct.dcsctp::SackChunk::GapAckBlock"* %150, i64 1
  %157 = ptrtoint %"struct.dcsctp::SackChunk::GapAckBlock"* %156 to i64
  %158 = sub i64 %103, %123
  %159 = ashr exact i64 %158, 2
  %160 = sub nsw i64 0, %159
  %161 = getelementptr inbounds %"struct.dcsctp::SackChunk::GapAckBlock", %"struct.dcsctp::SackChunk::GapAckBlock"* %150, i64 %160
  %162 = ptrtoint %"struct.dcsctp::SackChunk::GapAckBlock"* %161 to i64
  %163 = icmp sgt i64 %158, 0
  br i1 %163, label %164, label %167

164:                                              ; preds = %147
  %165 = bitcast %"struct.dcsctp::SackChunk::GapAckBlock"* %161 to i8*
  %166 = inttoptr i64 %123 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 2 %165, i8* align 2 %166, i64 %158, i1 false) #8
  br label %167

167:                                              ; preds = %164, %147
  store i64 %162, i64* %77, align 8
  store i64 %157, i64* %93, align 8
  store i64 %152, i64* %76, align 8
  %168 = icmp eq i64 %123, 0
  br i1 %168, label %171, label %169

169:                                              ; preds = %167
  %170 = inttoptr i64 %123 to i8*
  tail call void @_ZdlPv(i8* %170) #10
  br label %171

171:                                              ; preds = %169, %167, %115, %101
  %172 = phi %"struct.dcsctp::SackChunk::GapAckBlock"* [ %156, %169 ], [ %156, %167 ], [ %119, %115 ], [ %102, %101 ]
  %173 = phi i64 [ %157, %169 ], [ %157, %167 ], [ %120, %115 ], [ %103, %101 ]
  %174 = phi %"struct.dcsctp::SackChunk::GapAckBlock"* [ %156, %169 ], [ %156, %167 ], [ %119, %115 ], [ %104, %101 ]
  %175 = getelementptr inbounds %"struct.dcsctp::SackChunk::GapAckBlock", %"struct.dcsctp::SackChunk::GapAckBlock"* %105, i64 1
  %176 = icmp eq %"struct.dcsctp::SackChunk::GapAckBlock"* %175, %17
  br i1 %176, label %94, label %101

177:                                              ; preds = %94
  %178 = getelementptr inbounds %"class.dcsctp::SackChunk", %"class.dcsctp::SackChunk"* %1, i64 0, i32 1, i32 0
  %179 = load i32, i32* %178, align 8
  %180 = getelementptr inbounds %"class.dcsctp::SackChunk", %"class.dcsctp::SackChunk"* %1, i64 0, i32 2
  %181 = load i32, i32* %180, align 4
  %182 = load i64, i64* %76, align 8
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %72, i8 0, i64 24, i1 false) #8
  %183 = getelementptr inbounds %"class.dcsctp::SackChunk", %"class.dcsctp::SackChunk"* %1, i64 0, i32 4
  call void @_ZNSt3__13setIN6dcsctp11StrongAliasINS1_6TSNTagEjEENS_4lessIS4_EENS_9allocatorIS4_EEEC2ERKS9_(%"class.std::__1::set"* nonnull %4, %"class.std::__1::set"* dereferenceable(24) %183)
  %184 = getelementptr inbounds %"class.dcsctp::SackChunk", %"class.dcsctp::SackChunk"* %0, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [6 x i8*] }, { [6 x i8*] }* @_ZTVN6dcsctp9SackChunkE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %184, align 8
  %185 = getelementptr inbounds %"class.dcsctp::SackChunk", %"class.dcsctp::SackChunk"* %0, i64 0, i32 1, i32 0
  store i32 %179, i32* %185, align 8
  %186 = getelementptr inbounds %"class.dcsctp::SackChunk", %"class.dcsctp::SackChunk"* %0, i64 0, i32 2
  store i32 %181, i32* %186, align 4
  %187 = getelementptr inbounds %"class.dcsctp::SackChunk", %"class.dcsctp::SackChunk"* %0, i64 0, i32 3
  %188 = bitcast %"class.std::__1::vector"* %187 to i64*
  store i64 %95, i64* %188, align 8
  %189 = getelementptr inbounds %"class.dcsctp::SackChunk", %"class.dcsctp::SackChunk"* %0, i64 0, i32 3, i32 0, i32 1
  %190 = bitcast %"struct.dcsctp::SackChunk::GapAckBlock"** %189 to i64*
  store i64 %173, i64* %190, align 8
  %191 = getelementptr inbounds %"class.dcsctp::SackChunk", %"class.dcsctp::SackChunk"* %0, i64 0, i32 3, i32 0, i32 2, i32 0, i32 0
  %192 = bitcast %"struct.dcsctp::SackChunk::GapAckBlock"** %191 to i64*
  store i64 %182, i64* %192, align 8
  %193 = getelementptr inbounds %"class.dcsctp::SackChunk", %"class.dcsctp::SackChunk"* %0, i64 0, i32 4
  %194 = bitcast %"class.std::__1::set"* %4 to <2 x i64>*
  %195 = load <2 x i64>, <2 x i64>* %194, align 16
  %196 = bitcast %"class.std::__1::set"* %193 to <2 x i64>*
  store <2 x i64> %195, <2 x i64>* %196, align 8
  %197 = getelementptr inbounds %"class.std::__1::set", %"class.std::__1::set"* %4, i64 0, i32 0, i32 2, i32 0, i32 0
  %198 = getelementptr inbounds %"class.dcsctp::SackChunk", %"class.dcsctp::SackChunk"* %0, i64 0, i32 4, i32 0, i32 2, i32 0, i32 0
  %199 = load i64, i64* %197, align 16
  store i64 %199, i64* %198, align 8
  %200 = icmp eq i64 %199, 0
  %201 = getelementptr inbounds %"class.dcsctp::SackChunk", %"class.dcsctp::SackChunk"* %0, i64 0, i32 4, i32 0, i32 1, i32 0, i32 0
  %202 = extractelement <2 x i64> %195, i32 1
  br i1 %200, label %203, label %206

203:                                              ; preds = %177
  %204 = inttoptr i64 %202 to %"class.std::__1::__tree_node"*
  %205 = getelementptr inbounds %"class.std::__1::set", %"class.std::__1::set"* %193, i64 0, i32 0, i32 0
  store %"class.std::__1::__tree_end_node"* %201, %"class.std::__1::__tree_end_node"** %205, align 8
  br label %212

206:                                              ; preds = %177
  %207 = inttoptr i64 %202 to %"class.std::__1::__tree_node_base"*
  %208 = getelementptr inbounds %"class.std::__1::set", %"class.std::__1::set"* %4, i64 0, i32 0, i32 0
  %209 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %207, i64 0, i32 2
  store %"class.std::__1::__tree_end_node"* %201, %"class.std::__1::__tree_end_node"** %209, align 8
  %210 = getelementptr inbounds %"class.std::__1::set", %"class.std::__1::set"* %4, i64 0, i32 0, i32 1, i32 0, i32 0
  store %"class.std::__1::__tree_end_node"* %210, %"class.std::__1::__tree_end_node"** %208, align 16
  %211 = bitcast %"class.std::__1::__tree_end_node"* %210 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %211, i8 0, i64 16, i1 false) #8
  br label %212

212:                                              ; preds = %206, %203
  %213 = phi %"class.std::__1::__tree_node"* [ null, %206 ], [ %204, %203 ]
  %214 = getelementptr inbounds %"class.std::__1::set", %"class.std::__1::set"* %4, i64 0, i32 0
  call void @_ZNSt3__16__treeIN6dcsctp11StrongAliasINS1_6TSNTagEjEENS_4lessIS4_EENS_9allocatorIS4_EEE7destroyEPNS_11__tree_nodeIS4_PvEE(%"class.std::__1::__tree"* nonnull %214, %"class.std::__1::__tree_node"* %213) #8
  br label %423

215:                                              ; preds = %94
  tail call fastcc void @"_ZNSt3__16__sortIRZN6dcsctp15ChunkValidators5CleanEONS1_9SackChunkEE3$_0PNS3_11GapAckBlockEEEvT0_S9_T_"(%"struct.dcsctp::SackChunk::GapAckBlock"* %96, %"struct.dcsctp::SackChunk::GapAckBlock"* %172) #8
  %216 = bitcast %"class.std::__1::vector"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %216) #8
  %217 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %5, i64 0, i32 0, i32 0
  %218 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %5, i64 0, i32 0, i32 1
  %219 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %5, i64 0, i32 0, i32 2, i32 0, i32 0
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %216, i8 0, i64 24, i1 false) #8
  %220 = bitcast %"struct.dcsctp::SackChunk::GapAckBlock"** %219 to i64*
  %221 = bitcast %"class.std::__1::vector"* %5 to i64*
  %222 = icmp ugt i64 %99, 4611686018427387903
  br i1 %222, label %223, label %224

223:                                              ; preds = %215
  tail call void @abort() #9
  unreachable

224:                                              ; preds = %215
  %225 = bitcast %"struct.dcsctp::SackChunk::GapAckBlock"** %218 to i64*
  %226 = tail call i8* @_Znwm(i64 %98) #10
  %227 = bitcast i8* %226 to %"struct.dcsctp::SackChunk::GapAckBlock"*
  %228 = ptrtoint i8* %226 to i64
  %229 = getelementptr inbounds %"struct.dcsctp::SackChunk::GapAckBlock", %"struct.dcsctp::SackChunk::GapAckBlock"* %227, i64 %99
  %230 = ptrtoint %"struct.dcsctp::SackChunk::GapAckBlock"* %229 to i64
  %231 = ptrtoint i8* %226 to i64
  store i64 %231, i64* %221, align 8
  store i64 %228, i64* %225, align 8
  store i64 %230, i64* %220, align 8
  %232 = icmp eq %"struct.dcsctp::SackChunk::GapAckBlock"* %229, %227
  br i1 %232, label %240, label %233

233:                                              ; preds = %224
  %234 = bitcast i8* %226 to i32*
  %235 = load i32, i32* %97, align 2
  store i32 %235, i32* %234, align 2
  %236 = getelementptr inbounds i8, i8* %226, i64 4
  %237 = bitcast i8* %236 to %"struct.dcsctp::SackChunk::GapAckBlock"*
  %238 = ptrtoint i8* %236 to i64
  %239 = bitcast %"struct.dcsctp::SackChunk::GapAckBlock"** %218 to i64*
  store i64 %238, i64* %239, align 8
  br label %275

240:                                              ; preds = %224
  %241 = ptrtoint %"struct.dcsctp::SackChunk::GapAckBlock"* %229 to i64
  %242 = bitcast %"struct.dcsctp::SackChunk::GapAckBlock"** %218 to i64*
  %243 = sub i64 %241, %231
  %244 = ashr exact i64 %243, 2
  %245 = add nsw i64 %244, 1
  %246 = icmp ugt i64 %245, 4611686018427387903
  br i1 %246, label %247, label %249

247:                                              ; preds = %240
  %248 = bitcast %"class.std::__1::vector"* %5 to %"class.std::__1::__vector_base_common"*
  call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* nonnull %248) #9
  unreachable

249:                                              ; preds = %240
  %250 = icmp ult i64 %244, 2305843009213693951
  br i1 %250, label %251, label %259

251:                                              ; preds = %249
  %252 = ashr exact i64 %243, 1
  %253 = icmp ult i64 %252, %245
  %254 = select i1 %253, i64 %245, i64 %252
  %255 = icmp eq i64 %254, 0
  br i1 %255, label %264, label %256

256:                                              ; preds = %251
  %257 = icmp ugt i64 %254, 4611686018427387903
  br i1 %257, label %258, label %259

258:                                              ; preds = %256
  tail call void @abort() #9
  unreachable

259:                                              ; preds = %256, %249
  %260 = phi i64 [ %254, %256 ], [ 4611686018427387903, %249 ]
  %261 = shl i64 %260, 2
  %262 = tail call i8* @_Znwm(i64 %261) #10
  %263 = bitcast i8* %262 to %"struct.dcsctp::SackChunk::GapAckBlock"*
  br label %264

264:                                              ; preds = %259, %251
  %265 = phi i64 [ %260, %259 ], [ 0, %251 ]
  %266 = phi %"struct.dcsctp::SackChunk::GapAckBlock"* [ %263, %259 ], [ null, %251 ]
  %267 = getelementptr inbounds %"struct.dcsctp::SackChunk::GapAckBlock", %"struct.dcsctp::SackChunk::GapAckBlock"* %266, i64 %244
  %268 = getelementptr inbounds %"struct.dcsctp::SackChunk::GapAckBlock", %"struct.dcsctp::SackChunk::GapAckBlock"* %266, i64 %265
  %269 = ptrtoint %"struct.dcsctp::SackChunk::GapAckBlock"* %268 to i64
  %270 = bitcast %"struct.dcsctp::SackChunk::GapAckBlock"* %267 to i32*
  %271 = load i32, i32* %97, align 2
  store i32 %271, i32* %270, align 2
  %272 = getelementptr inbounds %"struct.dcsctp::SackChunk::GapAckBlock", %"struct.dcsctp::SackChunk::GapAckBlock"* %267, i64 1
  %273 = ptrtoint %"struct.dcsctp::SackChunk::GapAckBlock"* %272 to i64
  %274 = ptrtoint %"struct.dcsctp::SackChunk::GapAckBlock"* %267 to i64
  store i64 %274, i64* %221, align 8
  store i64 %273, i64* %242, align 8
  store i64 %269, i64* %220, align 8
  tail call void @_ZdlPv(i8* nonnull %226) #10
  br label %275

275:                                              ; preds = %233, %264
  %276 = phi i64 [ %230, %233 ], [ %269, %264 ]
  %277 = phi i64 [ %231, %233 ], [ %274, %264 ]
  %278 = phi i64 [ %238, %233 ], [ %273, %264 ]
  %279 = phi %"struct.dcsctp::SackChunk::GapAckBlock"* [ %237, %233 ], [ %272, %264 ]
  %280 = icmp ugt i64 %99, 1
  %281 = bitcast %"struct.dcsctp::SackChunk::GapAckBlock"** %218 to i64*
  br i1 %280, label %332, label %286

282:                                              ; preds = %412
  %283 = load i64, i64* %221, align 8
  %284 = load i64, i64* %281, align 8
  %285 = load i64, i64* %220, align 8
  br label %286

286:                                              ; preds = %275, %282
  %287 = phi i64 [ %285, %282 ], [ %276, %275 ]
  %288 = phi i64 [ %284, %282 ], [ %278, %275 ]
  %289 = phi i64 [ %283, %282 ], [ %277, %275 ]
  %290 = getelementptr inbounds %"class.dcsctp::SackChunk", %"class.dcsctp::SackChunk"* %1, i64 0, i32 1, i32 0
  %291 = load i32, i32* %290, align 8
  %292 = getelementptr inbounds %"class.dcsctp::SackChunk", %"class.dcsctp::SackChunk"* %1, i64 0, i32 2
  %293 = load i32, i32* %292, align 4
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %216, i8 0, i64 24, i1 false) #8
  %294 = getelementptr inbounds %"class.dcsctp::SackChunk", %"class.dcsctp::SackChunk"* %1, i64 0, i32 4
  call void @_ZNSt3__13setIN6dcsctp11StrongAliasINS1_6TSNTagEjEENS_4lessIS4_EENS_9allocatorIS4_EEEC2ERKS9_(%"class.std::__1::set"* nonnull %6, %"class.std::__1::set"* dereferenceable(24) %294)
  %295 = getelementptr inbounds %"class.dcsctp::SackChunk", %"class.dcsctp::SackChunk"* %0, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [6 x i8*] }, { [6 x i8*] }* @_ZTVN6dcsctp9SackChunkE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %295, align 8
  %296 = getelementptr inbounds %"class.dcsctp::SackChunk", %"class.dcsctp::SackChunk"* %0, i64 0, i32 1, i32 0
  store i32 %291, i32* %296, align 8
  %297 = getelementptr inbounds %"class.dcsctp::SackChunk", %"class.dcsctp::SackChunk"* %0, i64 0, i32 2
  store i32 %293, i32* %297, align 4
  %298 = getelementptr inbounds %"class.dcsctp::SackChunk", %"class.dcsctp::SackChunk"* %0, i64 0, i32 3
  %299 = bitcast %"class.std::__1::vector"* %298 to i64*
  store i64 %289, i64* %299, align 8
  %300 = getelementptr inbounds %"class.dcsctp::SackChunk", %"class.dcsctp::SackChunk"* %0, i64 0, i32 3, i32 0, i32 1
  %301 = bitcast %"struct.dcsctp::SackChunk::GapAckBlock"** %300 to i64*
  store i64 %288, i64* %301, align 8
  %302 = getelementptr inbounds %"class.dcsctp::SackChunk", %"class.dcsctp::SackChunk"* %0, i64 0, i32 3, i32 0, i32 2, i32 0, i32 0
  %303 = bitcast %"struct.dcsctp::SackChunk::GapAckBlock"** %302 to i64*
  store i64 %287, i64* %303, align 8
  %304 = getelementptr inbounds %"class.dcsctp::SackChunk", %"class.dcsctp::SackChunk"* %0, i64 0, i32 4
  %305 = bitcast %"class.std::__1::set"* %6 to <2 x i64>*
  %306 = load <2 x i64>, <2 x i64>* %305, align 16
  %307 = bitcast %"class.std::__1::set"* %304 to <2 x i64>*
  store <2 x i64> %306, <2 x i64>* %307, align 8
  %308 = getelementptr inbounds %"class.std::__1::set", %"class.std::__1::set"* %6, i64 0, i32 0, i32 2, i32 0, i32 0
  %309 = getelementptr inbounds %"class.dcsctp::SackChunk", %"class.dcsctp::SackChunk"* %0, i64 0, i32 4, i32 0, i32 2, i32 0, i32 0
  %310 = load i64, i64* %308, align 16
  store i64 %310, i64* %309, align 8
  %311 = icmp eq i64 %310, 0
  %312 = getelementptr inbounds %"class.dcsctp::SackChunk", %"class.dcsctp::SackChunk"* %0, i64 0, i32 4, i32 0, i32 1, i32 0, i32 0
  %313 = extractelement <2 x i64> %306, i32 1
  br i1 %311, label %314, label %317

314:                                              ; preds = %286
  %315 = inttoptr i64 %313 to %"class.std::__1::__tree_node"*
  %316 = getelementptr inbounds %"class.std::__1::set", %"class.std::__1::set"* %304, i64 0, i32 0, i32 0
  store %"class.std::__1::__tree_end_node"* %312, %"class.std::__1::__tree_end_node"** %316, align 8
  br label %323

317:                                              ; preds = %286
  %318 = inttoptr i64 %313 to %"class.std::__1::__tree_node_base"*
  %319 = getelementptr inbounds %"class.std::__1::set", %"class.std::__1::set"* %6, i64 0, i32 0, i32 0
  %320 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %318, i64 0, i32 2
  store %"class.std::__1::__tree_end_node"* %312, %"class.std::__1::__tree_end_node"** %320, align 8
  %321 = getelementptr inbounds %"class.std::__1::set", %"class.std::__1::set"* %6, i64 0, i32 0, i32 1, i32 0, i32 0
  store %"class.std::__1::__tree_end_node"* %321, %"class.std::__1::__tree_end_node"** %319, align 16
  %322 = bitcast %"class.std::__1::__tree_end_node"* %321 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %322, i8 0, i64 16, i1 false) #8
  br label %323

323:                                              ; preds = %317, %314
  %324 = phi %"class.std::__1::__tree_node"* [ null, %317 ], [ %315, %314 ]
  %325 = getelementptr inbounds %"class.std::__1::set", %"class.std::__1::set"* %6, i64 0, i32 0
  call void @_ZNSt3__16__treeIN6dcsctp11StrongAliasINS1_6TSNTagEjEENS_4lessIS4_EENS_9allocatorIS4_EEE7destroyEPNS_11__tree_nodeIS4_PvEE(%"class.std::__1::__tree"* nonnull %325, %"class.std::__1::__tree_node"* %324) #8
  %326 = load %"struct.dcsctp::SackChunk::GapAckBlock"*, %"struct.dcsctp::SackChunk::GapAckBlock"** %217, align 8
  %327 = icmp eq %"struct.dcsctp::SackChunk::GapAckBlock"* %326, null
  br i1 %327, label %331, label %328

328:                                              ; preds = %323
  %329 = ptrtoint %"struct.dcsctp::SackChunk::GapAckBlock"* %326 to i64
  store i64 %329, i64* %281, align 8
  %330 = bitcast %"struct.dcsctp::SackChunk::GapAckBlock"* %326 to i8*
  call void @_ZdlPv(i8* %330) #10
  br label %331

331:                                              ; preds = %323, %328
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %216) #8
  br label %423

332:                                              ; preds = %275, %419
  %333 = phi i64 [ %422, %419 ], [ %278, %275 ]
  %334 = phi %"struct.dcsctp::SackChunk::GapAckBlock"* [ %420, %419 ], [ %96, %275 ]
  %335 = phi %"struct.dcsctp::SackChunk::GapAckBlock"* [ %421, %419 ], [ %279, %275 ]
  %336 = phi i64 [ %413, %419 ], [ 1, %275 ]
  %337 = getelementptr inbounds %"struct.dcsctp::SackChunk::GapAckBlock", %"struct.dcsctp::SackChunk::GapAckBlock"* %335, i64 -1, i32 1
  %338 = load i16, i16* %337, align 2
  %339 = zext i16 %338 to i32
  %340 = add nuw nsw i32 %339, 1
  %341 = getelementptr inbounds %"struct.dcsctp::SackChunk::GapAckBlock", %"struct.dcsctp::SackChunk::GapAckBlock"* %334, i64 %336
  %342 = getelementptr inbounds %"struct.dcsctp::SackChunk::GapAckBlock", %"struct.dcsctp::SackChunk::GapAckBlock"* %341, i64 0, i32 0
  %343 = load i16, i16* %342, align 2
  %344 = zext i16 %343 to i32
  %345 = icmp ult i32 %340, %344
  br i1 %345, label %352, label %346

346:                                              ; preds = %332
  %347 = getelementptr inbounds %"struct.dcsctp::SackChunk::GapAckBlock", %"struct.dcsctp::SackChunk::GapAckBlock"* %334, i64 %336, i32 1
  %348 = load i16, i16* %347, align 2
  %349 = icmp ult i16 %338, %348
  %350 = select i1 %349, i16* %347, i16* %337
  %351 = load i16, i16* %350, align 2
  store i16 %351, i16* %337, align 2
  br label %412

352:                                              ; preds = %332
  %353 = load %"struct.dcsctp::SackChunk::GapAckBlock"*, %"struct.dcsctp::SackChunk::GapAckBlock"** %219, align 8
  %354 = icmp eq %"struct.dcsctp::SackChunk::GapAckBlock"* %335, %353
  %355 = ptrtoint %"struct.dcsctp::SackChunk::GapAckBlock"* %353 to i64
  br i1 %354, label %362, label %356

356:                                              ; preds = %352
  %357 = bitcast %"struct.dcsctp::SackChunk::GapAckBlock"* %341 to i32*
  %358 = bitcast %"struct.dcsctp::SackChunk::GapAckBlock"* %335 to i32*
  %359 = load i32, i32* %357, align 2
  store i32 %359, i32* %358, align 2
  %360 = getelementptr inbounds %"struct.dcsctp::SackChunk::GapAckBlock", %"struct.dcsctp::SackChunk::GapAckBlock"* %335, i64 1
  %361 = ptrtoint %"struct.dcsctp::SackChunk::GapAckBlock"* %360 to i64
  store i64 %361, i64* %281, align 8
  br label %412

362:                                              ; preds = %352
  %363 = ptrtoint %"struct.dcsctp::SackChunk::GapAckBlock"* %335 to i64
  %364 = load i64, i64* %221, align 8
  %365 = sub i64 %363, %364
  %366 = ashr exact i64 %365, 2
  %367 = add nsw i64 %366, 1
  %368 = icmp ugt i64 %367, 4611686018427387903
  br i1 %368, label %369, label %371

369:                                              ; preds = %362
  %370 = bitcast %"class.std::__1::vector"* %5 to %"class.std::__1::__vector_base_common"*
  call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* nonnull %370) #9
  unreachable

371:                                              ; preds = %362
  %372 = sub i64 %355, %364
  %373 = ashr exact i64 %372, 2
  %374 = icmp ult i64 %373, 2305843009213693951
  br i1 %374, label %375, label %383

375:                                              ; preds = %371
  %376 = ashr exact i64 %372, 1
  %377 = icmp ult i64 %376, %367
  %378 = select i1 %377, i64 %367, i64 %376
  %379 = icmp eq i64 %378, 0
  br i1 %379, label %388, label %380

380:                                              ; preds = %375
  %381 = icmp ugt i64 %378, 4611686018427387903
  br i1 %381, label %382, label %383

382:                                              ; preds = %380
  tail call void @abort() #9
  unreachable

383:                                              ; preds = %380, %371
  %384 = phi i64 [ %378, %380 ], [ 4611686018427387903, %371 ]
  %385 = shl i64 %384, 2
  %386 = tail call i8* @_Znwm(i64 %385) #10
  %387 = bitcast i8* %386 to %"struct.dcsctp::SackChunk::GapAckBlock"*
  br label %388

388:                                              ; preds = %383, %375
  %389 = phi i64 [ %384, %383 ], [ 0, %375 ]
  %390 = phi %"struct.dcsctp::SackChunk::GapAckBlock"* [ %387, %383 ], [ null, %375 ]
  %391 = getelementptr inbounds %"struct.dcsctp::SackChunk::GapAckBlock", %"struct.dcsctp::SackChunk::GapAckBlock"* %390, i64 %366
  %392 = getelementptr inbounds %"struct.dcsctp::SackChunk::GapAckBlock", %"struct.dcsctp::SackChunk::GapAckBlock"* %390, i64 %389
  %393 = ptrtoint %"struct.dcsctp::SackChunk::GapAckBlock"* %392 to i64
  %394 = bitcast %"struct.dcsctp::SackChunk::GapAckBlock"* %341 to i32*
  %395 = bitcast %"struct.dcsctp::SackChunk::GapAckBlock"* %391 to i32*
  %396 = load i32, i32* %394, align 2
  store i32 %396, i32* %395, align 2
  %397 = getelementptr inbounds %"struct.dcsctp::SackChunk::GapAckBlock", %"struct.dcsctp::SackChunk::GapAckBlock"* %391, i64 1
  %398 = ptrtoint %"struct.dcsctp::SackChunk::GapAckBlock"* %397 to i64
  %399 = sub i64 %333, %364
  %400 = ashr exact i64 %399, 2
  %401 = sub nsw i64 0, %400
  %402 = getelementptr inbounds %"struct.dcsctp::SackChunk::GapAckBlock", %"struct.dcsctp::SackChunk::GapAckBlock"* %391, i64 %401
  %403 = ptrtoint %"struct.dcsctp::SackChunk::GapAckBlock"* %402 to i64
  %404 = icmp sgt i64 %399, 0
  br i1 %404, label %405, label %408

405:                                              ; preds = %388
  %406 = bitcast %"struct.dcsctp::SackChunk::GapAckBlock"* %402 to i8*
  %407 = inttoptr i64 %364 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 2 %406, i8* align 2 %407, i64 %399, i1 false) #8
  br label %408

408:                                              ; preds = %405, %388
  store i64 %403, i64* %221, align 8
  store i64 %398, i64* %281, align 8
  store i64 %393, i64* %220, align 8
  %409 = icmp eq i64 %364, 0
  br i1 %409, label %412, label %410

410:                                              ; preds = %408
  %411 = inttoptr i64 %364 to i8*
  tail call void @_ZdlPv(i8* %411) #10
  br label %412

412:                                              ; preds = %410, %408, %356, %346
  %413 = add nuw i64 %336, 1
  %414 = load i64, i64* %93, align 8
  %415 = load i64, i64* %77, align 8
  %416 = sub i64 %414, %415
  %417 = ashr exact i64 %416, 2
  %418 = icmp ult i64 %413, %417
  br i1 %418, label %419, label %282

419:                                              ; preds = %412
  %420 = inttoptr i64 %415 to %"struct.dcsctp::SackChunk::GapAckBlock"*
  %421 = load %"struct.dcsctp::SackChunk::GapAckBlock"*, %"struct.dcsctp::SackChunk::GapAckBlock"** %218, align 8
  %422 = ptrtoint %"struct.dcsctp::SackChunk::GapAckBlock"* %421 to i64
  br label %332

423:                                              ; preds = %331, %212
  %424 = load %"struct.dcsctp::SackChunk::GapAckBlock"*, %"struct.dcsctp::SackChunk::GapAckBlock"** %73, align 8
  %425 = icmp eq %"struct.dcsctp::SackChunk::GapAckBlock"* %424, null
  br i1 %425, label %429, label %426

426:                                              ; preds = %423
  %427 = ptrtoint %"struct.dcsctp::SackChunk::GapAckBlock"* %424 to i64
  store i64 %427, i64* %93, align 8
  %428 = bitcast %"struct.dcsctp::SackChunk::GapAckBlock"* %424 to i8*
  call void @_ZdlPv(i8* %428) #10
  br label %429

429:                                              ; preds = %423, %426
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %72) #8
  br label %430

430:                                              ; preds = %64, %62, %429
  ret void
}

; Function Attrs: nounwind readonly ssp uwtable
define hidden zeroext i1 @_ZN6dcsctp15ChunkValidators8ValidateERKNS_9SackChunkE(%"class.dcsctp::SackChunk"* nocapture readonly dereferenceable(64)) local_unnamed_addr #1 align 2 {
  %2 = getelementptr inbounds %"class.dcsctp::SackChunk", %"class.dcsctp::SackChunk"* %0, i64 0, i32 3, i32 0, i32 0
  %3 = load %"struct.dcsctp::SackChunk::GapAckBlock"*, %"struct.dcsctp::SackChunk::GapAckBlock"** %2, align 8
  %4 = getelementptr inbounds %"class.dcsctp::SackChunk", %"class.dcsctp::SackChunk"* %0, i64 0, i32 3, i32 0, i32 1
  %5 = bitcast %"struct.dcsctp::SackChunk::GapAckBlock"** %4 to i64*
  %6 = load i64, i64* %5, align 8
  %7 = ptrtoint %"struct.dcsctp::SackChunk::GapAckBlock"* %3 to i64
  %8 = sub i64 %6, %7
  %9 = icmp eq i64 %8, 0
  br i1 %9, label %29, label %10

10:                                               ; preds = %1
  %11 = ashr exact i64 %8, 2
  %12 = getelementptr inbounds %"struct.dcsctp::SackChunk::GapAckBlock", %"struct.dcsctp::SackChunk::GapAckBlock"* %3, i64 %11
  br label %15

13:                                               ; preds = %23
  %14 = icmp eq %"struct.dcsctp::SackChunk::GapAckBlock"* %28, %12
  br i1 %14, label %29, label %15

15:                                               ; preds = %10, %13
  %16 = phi %"struct.dcsctp::SackChunk::GapAckBlock"* [ %28, %13 ], [ %3, %10 ]
  %17 = phi i16 [ %19, %13 ], [ 0, %10 ]
  %18 = getelementptr inbounds %"struct.dcsctp::SackChunk::GapAckBlock", %"struct.dcsctp::SackChunk::GapAckBlock"* %16, i64 0, i32 1
  %19 = load i16, i16* %18, align 2
  %20 = getelementptr inbounds %"struct.dcsctp::SackChunk::GapAckBlock", %"struct.dcsctp::SackChunk::GapAckBlock"* %16, i64 0, i32 0
  %21 = load i16, i16* %20, align 2
  %22 = icmp ult i16 %19, %21
  br i1 %22, label %29, label %23

23:                                               ; preds = %15
  %24 = zext i16 %21 to i32
  %25 = zext i16 %17 to i32
  %26 = add nuw nsw i32 %25, 1
  %27 = icmp ult i32 %26, %24
  %28 = getelementptr inbounds %"struct.dcsctp::SackChunk::GapAckBlock", %"struct.dcsctp::SackChunk::GapAckBlock"* %16, i64 1
  br i1 %27, label %13, label %29

29:                                               ; preds = %13, %23, %15, %1
  %30 = phi i1 [ true, %1 ], [ true, %13 ], [ false, %23 ], [ false, %15 ]
  ret i1 %30
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__13setIN6dcsctp11StrongAliasINS1_6TSNTagEjEENS_4lessIS4_EENS_9allocatorIS4_EEEC2ERKS9_(%"class.std::__1::set"*, %"class.std::__1::set"* dereferenceable(24)) unnamed_addr #0 comdat align 2 {
  %3 = getelementptr inbounds %"class.std::__1::set", %"class.std::__1::set"* %0, i64 0, i32 0, i32 0
  %4 = getelementptr inbounds %"class.std::__1::set", %"class.std::__1::set"* %0, i64 0, i32 0, i32 1, i32 0, i32 0
  %5 = getelementptr inbounds %"class.std::__1::set", %"class.std::__1::set"* %0, i64 0, i32 0, i32 1
  %6 = bitcast %"class.std::__1::__compressed_pair.1"* %5 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %6, i8 0, i64 16, i1 false) #8
  store %"class.std::__1::__tree_end_node"* %4, %"class.std::__1::__tree_end_node"** %3, align 8
  %7 = getelementptr inbounds %"class.std::__1::set", %"class.std::__1::set"* %1, i64 0, i32 0, i32 0
  %8 = load %"class.std::__1::__tree_end_node"*, %"class.std::__1::__tree_end_node"** %7, align 8
  %9 = getelementptr inbounds %"class.std::__1::set", %"class.std::__1::set"* %1, i64 0, i32 0, i32 1, i32 0, i32 0
  %10 = icmp eq %"class.std::__1::__tree_end_node"* %8, %9
  br i1 %10, label %149, label %11

11:                                               ; preds = %2
  %12 = ptrtoint %"class.std::__1::__tree_end_node"* %4 to i64
  %13 = getelementptr inbounds %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_end_node"* %4, i64 0, i32 0
  %14 = getelementptr inbounds %"class.std::__1::set", %"class.std::__1::set"* %0, i64 0, i32 0, i32 1, i32 0, i32 0, i32 0
  %15 = bitcast %"class.std::__1::set"* %0 to i64*
  %16 = getelementptr inbounds %"class.std::__1::set", %"class.std::__1::set"* %0, i64 0, i32 0, i32 2, i32 0, i32 0
  br label %17

17:                                               ; preds = %145, %11
  %18 = phi %"class.std::__1::__tree_node"* [ %148, %145 ], [ null, %11 ]
  %19 = phi %"class.std::__1::__tree_node_base"* [ %147, %145 ], [ null, %11 ]
  %20 = phi %"class.std::__1::__tree_end_node"* [ %146, %145 ], [ %4, %11 ]
  %21 = phi %"class.std::__1::__tree_end_node"* [ %143, %145 ], [ %8, %11 ]
  %22 = bitcast %"class.std::__1::__tree_end_node"* %21 to %"class.std::__1::__tree_node"*
  %23 = getelementptr inbounds %"class.std::__1::__tree_node", %"class.std::__1::__tree_node"* %22, i64 0, i32 1
  %24 = icmp eq %"class.std::__1::__tree_end_node"* %20, %4
  br i1 %24, label %52, label %25

25:                                               ; preds = %17
  %26 = icmp eq %"class.std::__1::__tree_node_base"* %19, null
  br i1 %26, label %32, label %27

27:                                               ; preds = %25, %27
  %28 = phi %"class.std::__1::__tree_node_base"* [ %30, %27 ], [ %19, %25 ]
  %29 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %28, i64 0, i32 1
  %30 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %29, align 8
  %31 = icmp eq %"class.std::__1::__tree_node_base"* %30, null
  br i1 %31, label %43, label %27

32:                                               ; preds = %25, %32
  %33 = phi %"class.std::__1::__tree_end_node"* [ %37, %32 ], [ %4, %25 ]
  %34 = bitcast %"class.std::__1::__tree_end_node"* %33 to %"class.std::__1::__tree_node_base"*
  %35 = getelementptr inbounds %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_end_node"* %33, i64 2
  %36 = bitcast %"class.std::__1::__tree_end_node"* %35 to %"class.std::__1::__tree_end_node"**
  %37 = load %"class.std::__1::__tree_end_node"*, %"class.std::__1::__tree_end_node"** %36, align 8
  %38 = getelementptr inbounds %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_end_node"* %37, i64 0, i32 0
  %39 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %38, align 8
  %40 = icmp eq %"class.std::__1::__tree_node_base"* %39, %34
  br i1 %40, label %32, label %41

41:                                               ; preds = %32
  %42 = bitcast %"class.std::__1::__tree_end_node"* %37 to %"class.std::__1::__tree_node_base"*
  br label %43

43:                                               ; preds = %27, %41
  %44 = phi %"class.std::__1::__tree_node_base"* [ %42, %41 ], [ %28, %27 ]
  %45 = ptrtoint %"class.std::__1::__tree_node_base"* %44 to i64
  %46 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %44, i64 0, i32 4, i64 3
  %47 = bitcast i8* %46 to i32*
  %48 = load i32, i32* %47, align 4
  %49 = getelementptr inbounds %"class.dcsctp::StrongAlias", %"class.dcsctp::StrongAlias"* %23, i64 0, i32 0
  %50 = load i32, i32* %49, align 4
  %51 = icmp ult i32 %48, %50
  br i1 %51, label %52, label %58

52:                                               ; preds = %43, %17
  %53 = phi i64 [ %45, %43 ], [ %12, %17 ]
  %54 = icmp eq %"class.std::__1::__tree_node_base"* %19, null
  br i1 %54, label %86, label %55

55:                                               ; preds = %52
  %56 = inttoptr i64 %53 to %"class.std::__1::__tree_node_base"*
  %57 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %56, i64 0, i32 1
  br label %86

58:                                               ; preds = %43
  %59 = icmp eq %"class.std::__1::__tree_node"* %18, null
  br i1 %59, label %86, label %60

60:                                               ; preds = %58, %82
  %61 = phi %"class.std::__1::__tree_node"* [ %85, %82 ], [ %18, %58 ]
  %62 = phi %"class.std::__1::__tree_node_base"** [ %84, %82 ], [ %14, %58 ]
  %63 = getelementptr inbounds %"class.std::__1::__tree_node", %"class.std::__1::__tree_node"* %61, i64 0, i32 1, i32 0
  %64 = load i32, i32* %63, align 4
  %65 = icmp ult i32 %50, %64
  br i1 %65, label %66, label %72

66:                                               ; preds = %60
  %67 = getelementptr inbounds %"class.std::__1::__tree_node", %"class.std::__1::__tree_node"* %61, i64 0, i32 0, i32 0, i32 0
  %68 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %67, align 8
  %69 = icmp eq %"class.std::__1::__tree_node_base"* %68, null
  br i1 %69, label %70, label %82

70:                                               ; preds = %66
  %71 = ptrtoint %"class.std::__1::__tree_node"* %61 to i64
  br label %86

72:                                               ; preds = %60
  %73 = icmp ult i32 %64, %50
  br i1 %73, label %74, label %80

74:                                               ; preds = %72
  %75 = getelementptr inbounds %"class.std::__1::__tree_node", %"class.std::__1::__tree_node"* %61, i64 0, i32 0, i32 1
  %76 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %75, align 8
  %77 = icmp eq %"class.std::__1::__tree_node_base"* %76, null
  br i1 %77, label %78, label %82

78:                                               ; preds = %74
  %79 = ptrtoint %"class.std::__1::__tree_node"* %61 to i64
  br label %86

80:                                               ; preds = %72
  %81 = ptrtoint %"class.std::__1::__tree_node"* %61 to i64
  br label %86

82:                                               ; preds = %74, %66
  %83 = phi %"class.std::__1::__tree_node_base"* [ %68, %66 ], [ %76, %74 ]
  %84 = phi %"class.std::__1::__tree_node_base"** [ %67, %66 ], [ %75, %74 ]
  %85 = bitcast %"class.std::__1::__tree_node_base"* %83 to %"class.std::__1::__tree_node"*
  br label %60

86:                                               ; preds = %58, %52, %55, %70, %78, %80
  %87 = phi i64 [ %53, %55 ], [ %71, %70 ], [ %79, %78 ], [ %81, %80 ], [ %12, %52 ], [ %12, %58 ]
  %88 = phi %"class.std::__1::__tree_node_base"** [ %57, %55 ], [ %67, %70 ], [ %75, %78 ], [ %62, %80 ], [ %13, %52 ], [ %13, %58 ]
  %89 = bitcast %"class.std::__1::__tree_node_base"** %88 to %"class.std::__1::__tree_node"**
  %90 = load %"class.std::__1::__tree_node"*, %"class.std::__1::__tree_node"** %89, align 8
  %91 = icmp eq %"class.std::__1::__tree_node"* %90, null
  br i1 %91, label %92, label %114

92:                                               ; preds = %86
  %93 = tail call i8* @_Znwm(i64 32) #10, !noalias !2
  %94 = getelementptr inbounds i8, i8* %93, i64 28
  %95 = getelementptr inbounds %"class.dcsctp::StrongAlias", %"class.dcsctp::StrongAlias"* %23, i64 0, i32 0
  %96 = bitcast i8* %94 to i32*
  %97 = load i32, i32* %95, align 4, !noalias !2
  store i32 %97, i32* %96, align 4, !noalias !2
  %98 = bitcast i8* %93 to %"class.std::__1::__tree_node_base"*
  %99 = getelementptr inbounds i8, i8* %93, i64 16
  tail call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %93, i8 0, i64 16, i1 false) #8
  %100 = bitcast i8* %99 to i64*
  store i64 %87, i64* %100, align 8
  %101 = bitcast %"class.std::__1::__tree_node_base"** %88 to i8**
  store i8* %93, i8** %101, align 8
  %102 = load %"class.std::__1::__tree_end_node"*, %"class.std::__1::__tree_end_node"** %3, align 8
  %103 = getelementptr inbounds %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_end_node"* %102, i64 0, i32 0
  %104 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %103, align 8
  %105 = icmp eq %"class.std::__1::__tree_node_base"* %104, null
  br i1 %105, label %109, label %106

106:                                              ; preds = %92
  %107 = ptrtoint %"class.std::__1::__tree_node_base"* %104 to i64
  store i64 %107, i64* %15, align 8
  %108 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %88, align 8
  br label %109

109:                                              ; preds = %106, %92
  %110 = phi %"class.std::__1::__tree_node_base"* [ %98, %92 ], [ %108, %106 ]
  %111 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %14, align 8
  tail call void @_ZNSt3__127__tree_balance_after_insertIPNS_16__tree_node_baseIPvEEEEvT_S5_(%"class.std::__1::__tree_node_base"* %111, %"class.std::__1::__tree_node_base"* %110) #8
  %112 = load i64, i64* %16, align 8
  %113 = add i64 %112, 1
  store i64 %113, i64* %16, align 8
  br label %114

114:                                              ; preds = %86, %109
  %115 = getelementptr inbounds %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_end_node"* %21, i64 1, i32 0
  %116 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %115, align 8
  %117 = icmp eq %"class.std::__1::__tree_node_base"* %116, null
  br i1 %117, label %118, label %126

118:                                              ; preds = %114
  %119 = bitcast %"class.std::__1::__tree_end_node"* %21 to %"class.std::__1::__tree_node_base"*
  %120 = getelementptr inbounds %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_end_node"* %21, i64 2
  %121 = bitcast %"class.std::__1::__tree_end_node"* %120 to %"class.std::__1::__tree_end_node"**
  %122 = load %"class.std::__1::__tree_end_node"*, %"class.std::__1::__tree_end_node"** %121, align 8
  %123 = getelementptr inbounds %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_end_node"* %122, i64 0, i32 0
  %124 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %123, align 8
  %125 = icmp eq %"class.std::__1::__tree_node_base"* %124, %119
  br i1 %125, label %142, label %133

126:                                              ; preds = %114, %126
  %127 = phi %"class.std::__1::__tree_node_base"* [ %129, %126 ], [ %116, %114 ]
  %128 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %127, i64 0, i32 0, i32 0
  %129 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %128, align 8
  %130 = icmp eq %"class.std::__1::__tree_node_base"* %129, null
  br i1 %130, label %131, label %126

131:                                              ; preds = %126
  %132 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %127, i64 0, i32 0
  br label %142

133:                                              ; preds = %118, %133
  %134 = phi %"class.std::__1::__tree_end_node"** [ %137, %133 ], [ %121, %118 ]
  %135 = bitcast %"class.std::__1::__tree_end_node"** %134 to %"class.std::__1::__tree_node_base"**
  %136 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %135, align 8
  %137 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %136, i64 0, i32 2
  %138 = load %"class.std::__1::__tree_end_node"*, %"class.std::__1::__tree_end_node"** %137, align 8
  %139 = getelementptr inbounds %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_end_node"* %138, i64 0, i32 0
  %140 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %139, align 8
  %141 = icmp eq %"class.std::__1::__tree_node_base"* %140, %136
  br i1 %141, label %142, label %133

142:                                              ; preds = %133, %131, %118
  %143 = phi %"class.std::__1::__tree_end_node"* [ %132, %131 ], [ %122, %118 ], [ %138, %133 ]
  %144 = icmp eq %"class.std::__1::__tree_end_node"* %143, %9
  br i1 %144, label %149, label %145

145:                                              ; preds = %142
  %146 = load %"class.std::__1::__tree_end_node"*, %"class.std::__1::__tree_end_node"** %3, align 8
  %147 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %13, align 8
  %148 = bitcast %"class.std::__1::__tree_node_base"* %147 to %"class.std::__1::__tree_node"*
  br label %17

149:                                              ; preds = %142, %2
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #2

; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(i8*) local_unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__16__treeIN6dcsctp11StrongAliasINS1_6TSNTagEjEENS_4lessIS4_EENS_9allocatorIS4_EEE7destroyEPNS_11__tree_nodeIS4_PvEE(%"class.std::__1::__tree"*, %"class.std::__1::__tree_node"*) local_unnamed_addr #0 comdat align 2 {
  %3 = icmp eq %"class.std::__1::__tree_node"* %1, null
  br i1 %3, label %11, label %4

4:                                                ; preds = %2
  %5 = bitcast %"class.std::__1::__tree_node"* %1 to %"class.std::__1::__tree_node"**
  %6 = load %"class.std::__1::__tree_node"*, %"class.std::__1::__tree_node"** %5, align 8
  tail call void @_ZNSt3__16__treeIN6dcsctp11StrongAliasINS1_6TSNTagEjEENS_4lessIS4_EENS_9allocatorIS4_EEE7destroyEPNS_11__tree_nodeIS4_PvEE(%"class.std::__1::__tree"* %0, %"class.std::__1::__tree_node"* %6) #8
  %7 = getelementptr inbounds %"class.std::__1::__tree_node", %"class.std::__1::__tree_node"* %1, i64 0, i32 0, i32 1
  %8 = bitcast %"class.std::__1::__tree_node_base"** %7 to %"class.std::__1::__tree_node"**
  %9 = load %"class.std::__1::__tree_node"*, %"class.std::__1::__tree_node"** %8, align 8
  tail call void @_ZNSt3__16__treeIN6dcsctp11StrongAliasINS1_6TSNTagEjEENS_4lessIS4_EENS_9allocatorIS4_EEE7destroyEPNS_11__tree_nodeIS4_PvEE(%"class.std::__1::__tree"* %0, %"class.std::__1::__tree_node"* %9) #8
  %10 = bitcast %"class.std::__1::__tree_node"* %1 to i8*
  tail call void @_ZdlPv(i8* %10) #10
  ret void

11:                                               ; preds = %2
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #2

; Function Attrs: noreturn nounwind
declare void @abort() local_unnamed_addr #4

; Function Attrs: nobuiltin nofree
declare noalias nonnull i8* @_Znwm(i64) local_unnamed_addr #5

; Function Attrs: noreturn
declare void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"*) local_unnamed_addr #6

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__127__tree_balance_after_insertIPNS_16__tree_node_baseIPvEEEEvT_S5_(%"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"*) local_unnamed_addr #0 comdat {
  %3 = icmp eq %"class.std::__1::__tree_node_base"* %1, %0
  %4 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %1, i64 0, i32 3
  %5 = zext i1 %3 to i8
  store i8 %5, i8* %4, align 8
  br i1 %3, label %156, label %6

6:                                                ; preds = %2, %149
  %7 = phi %"class.std::__1::__tree_node_base"* [ %20, %149 ], [ %1, %2 ]
  %8 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %7, i64 0, i32 2
  %9 = bitcast %"class.std::__1::__tree_end_node"** %8 to %"class.std::__1::__tree_node_base"**
  %10 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %9, align 8
  %11 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %10, i64 0, i32 3
  %12 = load i8, i8* %11, align 8, !range !5
  %13 = icmp eq i8 %12, 0
  br i1 %13, label %14, label %156

14:                                               ; preds = %6
  %15 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %10, i64 0, i32 2
  %16 = load %"class.std::__1::__tree_end_node"*, %"class.std::__1::__tree_end_node"** %15, align 8
  %17 = getelementptr inbounds %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_end_node"* %16, i64 0, i32 0
  %18 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %17, align 8
  %19 = icmp eq %"class.std::__1::__tree_node_base"* %18, %10
  %20 = bitcast %"class.std::__1::__tree_end_node"* %16 to %"class.std::__1::__tree_node_base"*
  br i1 %19, label %21, label %87

21:                                               ; preds = %14
  %22 = getelementptr inbounds %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_end_node"* %16, i64 1, i32 0
  %23 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %22, align 8
  %24 = icmp eq %"class.std::__1::__tree_node_base"* %23, null
  br i1 %24, label %29, label %25

25:                                               ; preds = %21
  %26 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %23, i64 0, i32 3
  %27 = load i8, i8* %26, align 8, !range !5
  %28 = icmp eq i8 %27, 0
  br i1 %28, label %149, label %29

29:                                               ; preds = %25, %21
  %30 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %10, i64 0, i32 2
  %31 = bitcast %"class.std::__1::__tree_end_node"* %16 to %"class.std::__1::__tree_node_base"*
  %32 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %10, i64 0, i32 0, i32 0
  %33 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %32, align 8
  %34 = icmp eq %"class.std::__1::__tree_node_base"* %33, %7
  br i1 %34, label %61, label %35

35:                                               ; preds = %29
  %36 = ptrtoint %"class.std::__1::__tree_end_node"* %16 to i64
  %37 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %10, i64 0, i32 1
  %38 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %37, align 8
  %39 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %38, i64 0, i32 0, i32 0
  %40 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %39, align 8
  store %"class.std::__1::__tree_node_base"* %40, %"class.std::__1::__tree_node_base"** %37, align 8
  %41 = icmp eq %"class.std::__1::__tree_node_base"* %40, null
  br i1 %41, label %47, label %42

42:                                               ; preds = %35
  %43 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %10, i64 0, i32 0
  %44 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %40, i64 0, i32 2
  store %"class.std::__1::__tree_end_node"* %43, %"class.std::__1::__tree_end_node"** %44, align 8
  %45 = bitcast %"class.std::__1::__tree_end_node"** %30 to i64*
  %46 = load i64, i64* %45, align 8
  br label %47

47:                                               ; preds = %35, %42
  %48 = phi i64 [ %46, %42 ], [ %36, %35 ]
  %49 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %38, i64 0, i32 2
  %50 = bitcast %"class.std::__1::__tree_end_node"** %49 to i64*
  store i64 %48, i64* %50, align 8
  %51 = load %"class.std::__1::__tree_end_node"*, %"class.std::__1::__tree_end_node"** %30, align 8
  %52 = getelementptr inbounds %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_end_node"* %51, i64 0, i32 0
  %53 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %52, align 8
  %54 = icmp eq %"class.std::__1::__tree_node_base"* %53, %10
  %55 = getelementptr inbounds %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_end_node"* %51, i64 1, i32 0
  %56 = select i1 %54, %"class.std::__1::__tree_node_base"** %52, %"class.std::__1::__tree_node_base"** %55
  store %"class.std::__1::__tree_node_base"* %38, %"class.std::__1::__tree_node_base"** %56, align 8
  store %"class.std::__1::__tree_node_base"* %10, %"class.std::__1::__tree_node_base"** %39, align 8
  %57 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %38, i64 0, i32 0
  store %"class.std::__1::__tree_end_node"* %57, %"class.std::__1::__tree_end_node"** %30, align 8
  %58 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %38, i64 0, i32 2
  %59 = bitcast %"class.std::__1::__tree_end_node"** %58 to %"class.std::__1::__tree_node_base"**
  %60 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %59, align 8
  br label %61

61:                                               ; preds = %47, %29
  %62 = phi %"class.std::__1::__tree_node_base"* [ %31, %29 ], [ %60, %47 ]
  %63 = phi %"class.std::__1::__tree_node_base"* [ %10, %29 ], [ %38, %47 ]
  %64 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %63, i64 0, i32 3
  store i8 1, i8* %64, align 8
  %65 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %62, i64 0, i32 3
  store i8 0, i8* %65, align 8
  %66 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %62, i64 0, i32 0, i32 0
  %67 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %66, align 8
  %68 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %67, i64 0, i32 1
  %69 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %68, align 8
  store %"class.std::__1::__tree_node_base"* %69, %"class.std::__1::__tree_node_base"** %66, align 8
  %70 = icmp eq %"class.std::__1::__tree_node_base"* %69, null
  br i1 %70, label %74, label %71

71:                                               ; preds = %61
  %72 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %62, i64 0, i32 0
  %73 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %69, i64 0, i32 2
  store %"class.std::__1::__tree_end_node"* %72, %"class.std::__1::__tree_end_node"** %73, align 8
  br label %74

74:                                               ; preds = %71, %61
  %75 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %62, i64 0, i32 2
  %76 = bitcast %"class.std::__1::__tree_end_node"** %75 to i64*
  %77 = load i64, i64* %76, align 8
  %78 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %67, i64 0, i32 2
  %79 = bitcast %"class.std::__1::__tree_end_node"** %78 to i64*
  store i64 %77, i64* %79, align 8
  %80 = load %"class.std::__1::__tree_end_node"*, %"class.std::__1::__tree_end_node"** %75, align 8
  %81 = getelementptr inbounds %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_end_node"* %80, i64 0, i32 0
  %82 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %81, align 8
  %83 = icmp eq %"class.std::__1::__tree_node_base"* %82, %62
  %84 = getelementptr inbounds %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_end_node"* %80, i64 1, i32 0
  %85 = select i1 %83, %"class.std::__1::__tree_node_base"** %81, %"class.std::__1::__tree_node_base"** %84
  store %"class.std::__1::__tree_node_base"* %67, %"class.std::__1::__tree_node_base"** %85, align 8
  store %"class.std::__1::__tree_node_base"* %62, %"class.std::__1::__tree_node_base"** %68, align 8
  %86 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %67, i64 0, i32 0
  store %"class.std::__1::__tree_end_node"* %86, %"class.std::__1::__tree_end_node"** %75, align 8
  br label %156

87:                                               ; preds = %14
  %88 = icmp eq %"class.std::__1::__tree_node_base"* %18, null
  br i1 %88, label %93, label %89

89:                                               ; preds = %87
  %90 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %18, i64 0, i32 3
  %91 = load i8, i8* %90, align 8, !range !5
  %92 = icmp eq i8 %91, 0
  br i1 %92, label %149, label %93

93:                                               ; preds = %89, %87
  %94 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %10, i64 0, i32 2
  %95 = bitcast %"class.std::__1::__tree_end_node"* %16 to %"class.std::__1::__tree_node_base"*
  %96 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %10, i64 0, i32 0, i32 0
  %97 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %96, align 8
  %98 = icmp eq %"class.std::__1::__tree_node_base"* %97, %7
  br i1 %98, label %99, label %123

99:                                               ; preds = %93
  %100 = ptrtoint %"class.std::__1::__tree_end_node"* %16 to i64
  %101 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %10, i64 0, i32 0, i32 0
  %102 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %7, i64 0, i32 1
  %103 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %102, align 8
  store %"class.std::__1::__tree_node_base"* %103, %"class.std::__1::__tree_node_base"** %101, align 8
  %104 = icmp eq %"class.std::__1::__tree_node_base"* %103, null
  br i1 %104, label %110, label %105

105:                                              ; preds = %99
  %106 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %10, i64 0, i32 0
  %107 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %103, i64 0, i32 2
  store %"class.std::__1::__tree_end_node"* %106, %"class.std::__1::__tree_end_node"** %107, align 8
  %108 = bitcast %"class.std::__1::__tree_end_node"** %94 to i64*
  %109 = load i64, i64* %108, align 8
  br label %110

110:                                              ; preds = %99, %105
  %111 = phi i64 [ %109, %105 ], [ %100, %99 ]
  %112 = bitcast %"class.std::__1::__tree_end_node"** %8 to i64*
  store i64 %111, i64* %112, align 8
  %113 = load %"class.std::__1::__tree_end_node"*, %"class.std::__1::__tree_end_node"** %94, align 8
  %114 = getelementptr inbounds %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_end_node"* %113, i64 0, i32 0
  %115 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %114, align 8
  %116 = icmp eq %"class.std::__1::__tree_node_base"* %115, %10
  %117 = getelementptr inbounds %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_end_node"* %113, i64 1, i32 0
  %118 = select i1 %116, %"class.std::__1::__tree_node_base"** %114, %"class.std::__1::__tree_node_base"** %117
  store %"class.std::__1::__tree_node_base"* %7, %"class.std::__1::__tree_node_base"** %118, align 8
  store %"class.std::__1::__tree_node_base"* %10, %"class.std::__1::__tree_node_base"** %102, align 8
  %119 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %7, i64 0, i32 0
  store %"class.std::__1::__tree_end_node"* %119, %"class.std::__1::__tree_end_node"** %94, align 8
  %120 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %7, i64 0, i32 2
  %121 = bitcast %"class.std::__1::__tree_end_node"** %120 to %"class.std::__1::__tree_node_base"**
  %122 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %121, align 8
  br label %123

123:                                              ; preds = %93, %110
  %124 = phi %"class.std::__1::__tree_node_base"* [ %122, %110 ], [ %95, %93 ]
  %125 = phi %"class.std::__1::__tree_node_base"* [ %7, %110 ], [ %10, %93 ]
  %126 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %125, i64 0, i32 3
  store i8 1, i8* %126, align 8
  %127 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %124, i64 0, i32 3
  store i8 0, i8* %127, align 8
  %128 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %124, i64 0, i32 1
  %129 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %128, align 8
  %130 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %129, i64 0, i32 0, i32 0
  %131 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %130, align 8
  store %"class.std::__1::__tree_node_base"* %131, %"class.std::__1::__tree_node_base"** %128, align 8
  %132 = icmp eq %"class.std::__1::__tree_node_base"* %131, null
  br i1 %132, label %136, label %133

133:                                              ; preds = %123
  %134 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %124, i64 0, i32 0
  %135 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %131, i64 0, i32 2
  store %"class.std::__1::__tree_end_node"* %134, %"class.std::__1::__tree_end_node"** %135, align 8
  br label %136

136:                                              ; preds = %133, %123
  %137 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %124, i64 0, i32 2
  %138 = bitcast %"class.std::__1::__tree_end_node"** %137 to i64*
  %139 = load i64, i64* %138, align 8
  %140 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %129, i64 0, i32 2
  %141 = bitcast %"class.std::__1::__tree_end_node"** %140 to i64*
  store i64 %139, i64* %141, align 8
  %142 = load %"class.std::__1::__tree_end_node"*, %"class.std::__1::__tree_end_node"** %137, align 8
  %143 = getelementptr inbounds %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_end_node"* %142, i64 0, i32 0
  %144 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %143, align 8
  %145 = icmp eq %"class.std::__1::__tree_node_base"* %144, %124
  %146 = getelementptr inbounds %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_end_node"* %142, i64 1, i32 0
  %147 = select i1 %145, %"class.std::__1::__tree_node_base"** %143, %"class.std::__1::__tree_node_base"** %146
  store %"class.std::__1::__tree_node_base"* %129, %"class.std::__1::__tree_node_base"** %147, align 8
  store %"class.std::__1::__tree_node_base"* %124, %"class.std::__1::__tree_node_base"** %130, align 8
  %148 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %129, i64 0, i32 0
  store %"class.std::__1::__tree_end_node"* %148, %"class.std::__1::__tree_end_node"** %137, align 8
  br label %156

149:                                              ; preds = %89, %25
  %150 = phi i8* [ %26, %25 ], [ %90, %89 ]
  store i8 1, i8* %11, align 8
  %151 = icmp eq %"class.std::__1::__tree_node_base"* %20, %0
  %152 = getelementptr inbounds %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_end_node"* %16, i64 3
  %153 = bitcast %"class.std::__1::__tree_end_node"* %152 to i8*
  %154 = zext i1 %151 to i8
  store i8 %154, i8* %153, align 8
  store i8 1, i8* %150, align 8
  %155 = icmp eq %"class.std::__1::__tree_node_base"* %20, %0
  br i1 %155, label %156, label %6

156:                                              ; preds = %6, %149, %2, %136, %74
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal fastcc void @"_ZNSt3__16__sortIRZN6dcsctp15ChunkValidators5CleanEONS1_9SackChunkEE3$_0PNS3_11GapAckBlockEEEvT0_S9_T_"(%"struct.dcsctp::SackChunk::GapAckBlock"*, %"struct.dcsctp::SackChunk::GapAckBlock"*) unnamed_addr #0 {
  br label %3

3:                                                ; preds = %396, %2
  %4 = phi %"struct.dcsctp::SackChunk::GapAckBlock"* [ %1, %2 ], [ %374, %396 ]
  %5 = phi %"struct.dcsctp::SackChunk::GapAckBlock"* [ %0, %2 ], [ %20, %396 ]
  %6 = ptrtoint %"struct.dcsctp::SackChunk::GapAckBlock"* %4 to i64
  %7 = getelementptr inbounds %"struct.dcsctp::SackChunk::GapAckBlock", %"struct.dcsctp::SackChunk::GapAckBlock"* %4, i64 -1
  %8 = getelementptr inbounds %"struct.dcsctp::SackChunk::GapAckBlock", %"struct.dcsctp::SackChunk::GapAckBlock"* %7, i64 0, i32 0
  %9 = bitcast %"struct.dcsctp::SackChunk::GapAckBlock"* %7 to i32*
  %10 = bitcast %"struct.dcsctp::SackChunk::GapAckBlock"* %7 to i32*
  %11 = bitcast %"struct.dcsctp::SackChunk::GapAckBlock"* %7 to i32*
  %12 = getelementptr inbounds %"struct.dcsctp::SackChunk::GapAckBlock", %"struct.dcsctp::SackChunk::GapAckBlock"* %7, i64 0, i32 0
  %13 = bitcast %"struct.dcsctp::SackChunk::GapAckBlock"* %7 to i32*
  %14 = getelementptr inbounds %"struct.dcsctp::SackChunk::GapAckBlock", %"struct.dcsctp::SackChunk::GapAckBlock"* %7, i64 0, i32 0
  %15 = bitcast %"struct.dcsctp::SackChunk::GapAckBlock"* %7 to i32*
  %16 = ptrtoint %"struct.dcsctp::SackChunk::GapAckBlock"* %4 to i64
  br label %17

17:                                               ; preds = %405, %3
  %18 = phi %"struct.dcsctp::SackChunk::GapAckBlock"* [ %5, %3 ], [ %406, %405 ]
  br label %19

19:                                               ; preds = %319, %17
  %20 = phi %"struct.dcsctp::SackChunk::GapAckBlock"* [ %18, %17 ], [ %308, %319 ]
  %21 = ptrtoint %"struct.dcsctp::SackChunk::GapAckBlock"* %20 to i64
  %22 = sub i64 %6, %21
  %23 = ashr exact i64 %22, 2
  switch i64 %23, label %117 [
    i64 0, label %409
    i64 1, label %409
    i64 2, label %24
    i64 3, label %36
    i64 4, label %75
    i64 5, label %80
  ]

24:                                               ; preds = %19
  %25 = getelementptr inbounds %"struct.dcsctp::SackChunk::GapAckBlock", %"struct.dcsctp::SackChunk::GapAckBlock"* %4, i64 -1
  %26 = getelementptr inbounds %"struct.dcsctp::SackChunk::GapAckBlock", %"struct.dcsctp::SackChunk::GapAckBlock"* %25, i64 0, i32 0
  %27 = load i16, i16* %26, align 2
  %28 = getelementptr inbounds %"struct.dcsctp::SackChunk::GapAckBlock", %"struct.dcsctp::SackChunk::GapAckBlock"* %20, i64 0, i32 0
  %29 = load i16, i16* %28, align 2
  %30 = icmp ult i16 %27, %29
  br i1 %30, label %31, label %409

31:                                               ; preds = %24
  %32 = bitcast %"struct.dcsctp::SackChunk::GapAckBlock"* %20 to i32*
  %33 = load i32, i32* %32, align 2
  %34 = bitcast %"struct.dcsctp::SackChunk::GapAckBlock"* %25 to i32*
  %35 = load i32, i32* %34, align 2
  store i32 %35, i32* %32, align 2
  store i32 %33, i32* %34, align 2
  br label %409

36:                                               ; preds = %19
  %37 = getelementptr inbounds %"struct.dcsctp::SackChunk::GapAckBlock", %"struct.dcsctp::SackChunk::GapAckBlock"* %20, i64 1
  %38 = getelementptr inbounds %"struct.dcsctp::SackChunk::GapAckBlock", %"struct.dcsctp::SackChunk::GapAckBlock"* %4, i64 -1
  %39 = getelementptr inbounds %"struct.dcsctp::SackChunk::GapAckBlock", %"struct.dcsctp::SackChunk::GapAckBlock"* %37, i64 0, i32 0
  %40 = load i16, i16* %39, align 2
  %41 = getelementptr inbounds %"struct.dcsctp::SackChunk::GapAckBlock", %"struct.dcsctp::SackChunk::GapAckBlock"* %20, i64 0, i32 0
  %42 = load i16, i16* %41, align 2
  %43 = icmp ult i16 %40, %42
  %44 = getelementptr inbounds %"struct.dcsctp::SackChunk::GapAckBlock", %"struct.dcsctp::SackChunk::GapAckBlock"* %38, i64 0, i32 0
  %45 = load i16, i16* %44, align 2
  %46 = icmp ult i16 %45, %40
  br i1 %43, label %60, label %47

47:                                               ; preds = %36
  br i1 %46, label %48, label %409

48:                                               ; preds = %47
  %49 = bitcast %"struct.dcsctp::SackChunk::GapAckBlock"* %37 to i32*
  %50 = load i32, i32* %49, align 2
  %51 = bitcast %"struct.dcsctp::SackChunk::GapAckBlock"* %38 to i32*
  %52 = load i32, i32* %51, align 2
  store i32 %52, i32* %49, align 2
  store i32 %50, i32* %51, align 2
  %53 = load i16, i16* %39, align 2
  %54 = load i16, i16* %41, align 2
  %55 = icmp ult i16 %53, %54
  br i1 %55, label %56, label %409

56:                                               ; preds = %48
  %57 = bitcast %"struct.dcsctp::SackChunk::GapAckBlock"* %20 to i32*
  %58 = load i32, i32* %57, align 2
  %59 = load i32, i32* %49, align 2
  store i32 %59, i32* %57, align 2
  store i32 %58, i32* %49, align 2
  br label %409

60:                                               ; preds = %36
  %61 = bitcast %"struct.dcsctp::SackChunk::GapAckBlock"* %20 to i32*
  %62 = load i32, i32* %61, align 2
  br i1 %46, label %63, label %66

63:                                               ; preds = %60
  %64 = bitcast %"struct.dcsctp::SackChunk::GapAckBlock"* %38 to i32*
  %65 = load i32, i32* %64, align 2
  store i32 %65, i32* %61, align 2
  store i32 %62, i32* %64, align 2
  br label %409

66:                                               ; preds = %60
  %67 = bitcast %"struct.dcsctp::SackChunk::GapAckBlock"* %37 to i32*
  %68 = load i32, i32* %67, align 2
  store i32 %68, i32* %61, align 2
  store i32 %62, i32* %67, align 2
  %69 = load i16, i16* %44, align 2
  %70 = trunc i32 %62 to i16
  %71 = icmp ult i16 %69, %70
  br i1 %71, label %72, label %409

72:                                               ; preds = %66
  %73 = bitcast %"struct.dcsctp::SackChunk::GapAckBlock"* %38 to i32*
  %74 = load i32, i32* %73, align 2
  store i32 %74, i32* %67, align 2
  store i32 %62, i32* %73, align 2
  br label %409

75:                                               ; preds = %19
  %76 = getelementptr inbounds %"struct.dcsctp::SackChunk::GapAckBlock", %"struct.dcsctp::SackChunk::GapAckBlock"* %20, i64 1
  %77 = getelementptr inbounds %"struct.dcsctp::SackChunk::GapAckBlock", %"struct.dcsctp::SackChunk::GapAckBlock"* %20, i64 2
  %78 = getelementptr inbounds %"struct.dcsctp::SackChunk::GapAckBlock", %"struct.dcsctp::SackChunk::GapAckBlock"* %4, i64 -1
  %79 = tail call fastcc i32 @"_ZNSt3__17__sort4IRZN6dcsctp15ChunkValidators5CleanEONS1_9SackChunkEE3$_0PNS3_11GapAckBlockEEEjT0_S9_S9_S9_T_"(%"struct.dcsctp::SackChunk::GapAckBlock"* %20, %"struct.dcsctp::SackChunk::GapAckBlock"* %76, %"struct.dcsctp::SackChunk::GapAckBlock"* %77, %"struct.dcsctp::SackChunk::GapAckBlock"* %78)
  br label %409

80:                                               ; preds = %19
  %81 = getelementptr inbounds %"struct.dcsctp::SackChunk::GapAckBlock", %"struct.dcsctp::SackChunk::GapAckBlock"* %20, i64 1
  %82 = getelementptr inbounds %"struct.dcsctp::SackChunk::GapAckBlock", %"struct.dcsctp::SackChunk::GapAckBlock"* %20, i64 2
  %83 = getelementptr inbounds %"struct.dcsctp::SackChunk::GapAckBlock", %"struct.dcsctp::SackChunk::GapAckBlock"* %20, i64 3
  %84 = getelementptr inbounds %"struct.dcsctp::SackChunk::GapAckBlock", %"struct.dcsctp::SackChunk::GapAckBlock"* %4, i64 -1
  %85 = tail call fastcc i32 @"_ZNSt3__17__sort4IRZN6dcsctp15ChunkValidators5CleanEONS1_9SackChunkEE3$_0PNS3_11GapAckBlockEEEjT0_S9_S9_S9_T_"(%"struct.dcsctp::SackChunk::GapAckBlock"* %20, %"struct.dcsctp::SackChunk::GapAckBlock"* %81, %"struct.dcsctp::SackChunk::GapAckBlock"* %82, %"struct.dcsctp::SackChunk::GapAckBlock"* %83) #8
  %86 = getelementptr inbounds %"struct.dcsctp::SackChunk::GapAckBlock", %"struct.dcsctp::SackChunk::GapAckBlock"* %84, i64 0, i32 0
  %87 = load i16, i16* %86, align 2
  %88 = getelementptr inbounds %"struct.dcsctp::SackChunk::GapAckBlock", %"struct.dcsctp::SackChunk::GapAckBlock"* %83, i64 0, i32 0
  %89 = load i16, i16* %88, align 2
  %90 = icmp ult i16 %87, %89
  br i1 %90, label %91, label %409

91:                                               ; preds = %80
  %92 = bitcast %"struct.dcsctp::SackChunk::GapAckBlock"* %83 to i32*
  %93 = load i32, i32* %92, align 2
  %94 = bitcast %"struct.dcsctp::SackChunk::GapAckBlock"* %84 to i32*
  %95 = load i32, i32* %94, align 2
  store i32 %95, i32* %92, align 2
  store i32 %93, i32* %94, align 2
  %96 = load i16, i16* %88, align 2
  %97 = getelementptr inbounds %"struct.dcsctp::SackChunk::GapAckBlock", %"struct.dcsctp::SackChunk::GapAckBlock"* %82, i64 0, i32 0
  %98 = load i16, i16* %97, align 2
  %99 = icmp ult i16 %96, %98
  br i1 %99, label %100, label %409

100:                                              ; preds = %91
  %101 = bitcast %"struct.dcsctp::SackChunk::GapAckBlock"* %82 to i32*
  %102 = load i32, i32* %101, align 2
  %103 = load i32, i32* %92, align 2
  store i32 %103, i32* %101, align 2
  store i32 %102, i32* %92, align 2
  %104 = trunc i32 %103 to i16
  %105 = getelementptr inbounds %"struct.dcsctp::SackChunk::GapAckBlock", %"struct.dcsctp::SackChunk::GapAckBlock"* %81, i64 0, i32 0
  %106 = load i16, i16* %105, align 2
  %107 = icmp ugt i16 %106, %104
  br i1 %107, label %108, label %409

108:                                              ; preds = %100
  %109 = bitcast %"struct.dcsctp::SackChunk::GapAckBlock"* %81 to i32*
  %110 = load i32, i32* %109, align 2
  store i32 %103, i32* %109, align 2
  store i32 %110, i32* %101, align 2
  %111 = getelementptr inbounds %"struct.dcsctp::SackChunk::GapAckBlock", %"struct.dcsctp::SackChunk::GapAckBlock"* %20, i64 0, i32 0
  %112 = load i16, i16* %111, align 2
  %113 = icmp ugt i16 %112, %104
  br i1 %113, label %114, label %409

114:                                              ; preds = %108
  %115 = bitcast %"struct.dcsctp::SackChunk::GapAckBlock"* %20 to i32*
  %116 = load i32, i32* %115, align 2
  store i32 %103, i32* %115, align 2
  store i32 %116, i32* %109, align 2
  br label %409

117:                                              ; preds = %19
  %118 = icmp slt i64 %22, 124
  br i1 %118, label %119, label %192

119:                                              ; preds = %117
  %120 = getelementptr inbounds %"struct.dcsctp::SackChunk::GapAckBlock", %"struct.dcsctp::SackChunk::GapAckBlock"* %20, i64 2
  %121 = getelementptr inbounds %"struct.dcsctp::SackChunk::GapAckBlock", %"struct.dcsctp::SackChunk::GapAckBlock"* %20, i64 1
  %122 = getelementptr inbounds %"struct.dcsctp::SackChunk::GapAckBlock", %"struct.dcsctp::SackChunk::GapAckBlock"* %121, i64 0, i32 0
  %123 = load i16, i16* %122, align 2
  %124 = getelementptr inbounds %"struct.dcsctp::SackChunk::GapAckBlock", %"struct.dcsctp::SackChunk::GapAckBlock"* %20, i64 0, i32 0
  %125 = load i16, i16* %124, align 2
  %126 = icmp ult i16 %123, %125
  %127 = getelementptr inbounds %"struct.dcsctp::SackChunk::GapAckBlock", %"struct.dcsctp::SackChunk::GapAckBlock"* %120, i64 0, i32 0
  %128 = load i16, i16* %127, align 2
  %129 = icmp ult i16 %128, %123
  br i1 %126, label %142, label %130

130:                                              ; preds = %119
  br i1 %129, label %131, label %157

131:                                              ; preds = %130
  %132 = bitcast %"struct.dcsctp::SackChunk::GapAckBlock"* %121 to i32*
  %133 = load i32, i32* %132, align 2
  %134 = bitcast %"struct.dcsctp::SackChunk::GapAckBlock"* %120 to i32*
  %135 = load i32, i32* %134, align 2
  store i32 %135, i32* %132, align 2
  store i32 %133, i32* %134, align 2
  %136 = trunc i32 %135 to i16
  %137 = icmp ugt i16 %125, %136
  %138 = trunc i32 %133 to i16
  br i1 %137, label %139, label %157

139:                                              ; preds = %131
  %140 = bitcast %"struct.dcsctp::SackChunk::GapAckBlock"* %20 to i32*
  %141 = load i32, i32* %140, align 2
  store i32 %135, i32* %140, align 2
  store i32 %141, i32* %132, align 2
  br label %157

142:                                              ; preds = %119
  %143 = bitcast %"struct.dcsctp::SackChunk::GapAckBlock"* %20 to i32*
  %144 = load i32, i32* %143, align 2
  br i1 %129, label %145, label %149

145:                                              ; preds = %142
  %146 = bitcast %"struct.dcsctp::SackChunk::GapAckBlock"* %120 to i32*
  %147 = load i32, i32* %146, align 2
  store i32 %147, i32* %143, align 2
  store i32 %144, i32* %146, align 2
  %148 = trunc i32 %144 to i16
  br label %157

149:                                              ; preds = %142
  %150 = bitcast %"struct.dcsctp::SackChunk::GapAckBlock"* %121 to i32*
  %151 = load i32, i32* %150, align 2
  store i32 %151, i32* %143, align 2
  store i32 %144, i32* %150, align 2
  %152 = trunc i32 %144 to i16
  %153 = icmp ult i16 %128, %152
  br i1 %153, label %154, label %157

154:                                              ; preds = %149
  %155 = bitcast %"struct.dcsctp::SackChunk::GapAckBlock"* %120 to i32*
  %156 = load i32, i32* %155, align 2
  store i32 %156, i32* %150, align 2
  store i32 %144, i32* %155, align 2
  br label %157

157:                                              ; preds = %154, %149, %145, %139, %131, %130
  %158 = phi i16 [ %128, %130 ], [ %138, %131 ], [ %138, %139 ], [ %148, %145 ], [ %128, %149 ], [ %152, %154 ]
  %159 = getelementptr inbounds %"struct.dcsctp::SackChunk::GapAckBlock", %"struct.dcsctp::SackChunk::GapAckBlock"* %20, i64 3
  %160 = icmp eq %"struct.dcsctp::SackChunk::GapAckBlock"* %159, %4
  br i1 %160, label %409, label %161

161:                                              ; preds = %157, %190
  %162 = phi i16 [ %191, %190 ], [ %158, %157 ]
  %163 = phi %"struct.dcsctp::SackChunk::GapAckBlock"* [ %188, %190 ], [ %159, %157 ]
  %164 = phi %"struct.dcsctp::SackChunk::GapAckBlock"* [ %163, %190 ], [ %120, %157 ]
  %165 = getelementptr inbounds %"struct.dcsctp::SackChunk::GapAckBlock", %"struct.dcsctp::SackChunk::GapAckBlock"* %163, i64 0, i32 0
  %166 = load i16, i16* %165, align 2
  %167 = icmp ult i16 %166, %162
  br i1 %167, label %168, label %187

168:                                              ; preds = %161
  %169 = bitcast %"struct.dcsctp::SackChunk::GapAckBlock"* %163 to i32*
  %170 = load i32, i32* %169, align 2
  %171 = trunc i32 %170 to i16
  br label %172

172:                                              ; preds = %179, %168
  %173 = phi %"struct.dcsctp::SackChunk::GapAckBlock"* [ %163, %168 ], [ %174, %179 ]
  %174 = phi %"struct.dcsctp::SackChunk::GapAckBlock"* [ %164, %168 ], [ %180, %179 ]
  %175 = bitcast %"struct.dcsctp::SackChunk::GapAckBlock"* %174 to i32*
  %176 = bitcast %"struct.dcsctp::SackChunk::GapAckBlock"* %173 to i32*
  %177 = load i32, i32* %175, align 2
  store i32 %177, i32* %176, align 2
  %178 = icmp eq %"struct.dcsctp::SackChunk::GapAckBlock"* %174, %20
  br i1 %178, label %184, label %179

179:                                              ; preds = %172
  %180 = getelementptr inbounds %"struct.dcsctp::SackChunk::GapAckBlock", %"struct.dcsctp::SackChunk::GapAckBlock"* %174, i64 -1
  %181 = getelementptr inbounds %"struct.dcsctp::SackChunk::GapAckBlock", %"struct.dcsctp::SackChunk::GapAckBlock"* %180, i64 0, i32 0
  %182 = load i16, i16* %181, align 2
  %183 = icmp ugt i16 %182, %171
  br i1 %183, label %172, label %184

184:                                              ; preds = %172, %179
  %185 = phi %"struct.dcsctp::SackChunk::GapAckBlock"* [ %174, %179 ], [ %20, %172 ]
  %186 = bitcast %"struct.dcsctp::SackChunk::GapAckBlock"* %185 to i32*
  store i32 %170, i32* %186, align 2
  br label %187

187:                                              ; preds = %184, %161
  %188 = getelementptr inbounds %"struct.dcsctp::SackChunk::GapAckBlock", %"struct.dcsctp::SackChunk::GapAckBlock"* %163, i64 1
  %189 = icmp eq %"struct.dcsctp::SackChunk::GapAckBlock"* %188, %4
  br i1 %189, label %409, label %190

190:                                              ; preds = %187
  %191 = load i16, i16* %165, align 2
  br label %161

192:                                              ; preds = %117
  %193 = icmp sgt i64 %22, 3996
  %194 = sdiv i64 %23, 2
  %195 = getelementptr inbounds %"struct.dcsctp::SackChunk::GapAckBlock", %"struct.dcsctp::SackChunk::GapAckBlock"* %20, i64 %194
  br i1 %193, label %196, label %237

196:                                              ; preds = %192
  %197 = sdiv i64 %23, 4
  %198 = getelementptr inbounds %"struct.dcsctp::SackChunk::GapAckBlock", %"struct.dcsctp::SackChunk::GapAckBlock"* %20, i64 %197
  %199 = getelementptr inbounds %"struct.dcsctp::SackChunk::GapAckBlock", %"struct.dcsctp::SackChunk::GapAckBlock"* %195, i64 %197
  %200 = tail call fastcc i32 @"_ZNSt3__17__sort4IRZN6dcsctp15ChunkValidators5CleanEONS1_9SackChunkEE3$_0PNS3_11GapAckBlockEEEjT0_S9_S9_S9_T_"(%"struct.dcsctp::SackChunk::GapAckBlock"* %20, %"struct.dcsctp::SackChunk::GapAckBlock"* %198, %"struct.dcsctp::SackChunk::GapAckBlock"* %195, %"struct.dcsctp::SackChunk::GapAckBlock"* %199) #8
  %201 = load i16, i16* %12, align 2
  %202 = getelementptr inbounds %"struct.dcsctp::SackChunk::GapAckBlock", %"struct.dcsctp::SackChunk::GapAckBlock"* %199, i64 0, i32 0
  %203 = load i16, i16* %202, align 2
  %204 = icmp ult i16 %201, %203
  br i1 %204, label %205, label %270

205:                                              ; preds = %196
  %206 = bitcast %"struct.dcsctp::SackChunk::GapAckBlock"* %199 to i32*
  %207 = load i32, i32* %206, align 2
  %208 = load i32, i32* %13, align 2
  store i32 %208, i32* %206, align 2
  store i32 %207, i32* %13, align 2
  %209 = add i32 %200, 1
  %210 = load i16, i16* %202, align 2
  %211 = getelementptr inbounds %"struct.dcsctp::SackChunk::GapAckBlock", %"struct.dcsctp::SackChunk::GapAckBlock"* %195, i64 0, i32 0
  %212 = load i16, i16* %211, align 2
  %213 = icmp ult i16 %210, %212
  br i1 %213, label %214, label %270

214:                                              ; preds = %205
  %215 = bitcast %"struct.dcsctp::SackChunk::GapAckBlock"* %195 to i32*
  %216 = load i32, i32* %215, align 2
  %217 = load i32, i32* %206, align 2
  store i32 %217, i32* %215, align 2
  store i32 %216, i32* %206, align 2
  %218 = add i32 %200, 2
  %219 = load i16, i16* %211, align 2
  %220 = getelementptr inbounds %"struct.dcsctp::SackChunk::GapAckBlock", %"struct.dcsctp::SackChunk::GapAckBlock"* %198, i64 0, i32 0
  %221 = load i16, i16* %220, align 2
  %222 = icmp ult i16 %219, %221
  br i1 %222, label %223, label %270

223:                                              ; preds = %214
  %224 = bitcast %"struct.dcsctp::SackChunk::GapAckBlock"* %198 to i32*
  %225 = load i32, i32* %224, align 2
  %226 = load i32, i32* %215, align 2
  store i32 %226, i32* %224, align 2
  store i32 %225, i32* %215, align 2
  %227 = add i32 %200, 3
  %228 = load i16, i16* %220, align 2
  %229 = getelementptr inbounds %"struct.dcsctp::SackChunk::GapAckBlock", %"struct.dcsctp::SackChunk::GapAckBlock"* %20, i64 0, i32 0
  %230 = load i16, i16* %229, align 2
  %231 = icmp ult i16 %228, %230
  br i1 %231, label %232, label %270

232:                                              ; preds = %223
  %233 = bitcast %"struct.dcsctp::SackChunk::GapAckBlock"* %20 to i32*
  %234 = load i32, i32* %233, align 2
  %235 = load i32, i32* %224, align 2
  store i32 %235, i32* %233, align 2
  store i32 %234, i32* %224, align 2
  %236 = add i32 %200, 4
  br label %270

237:                                              ; preds = %192
  %238 = getelementptr inbounds %"struct.dcsctp::SackChunk::GapAckBlock", %"struct.dcsctp::SackChunk::GapAckBlock"* %195, i64 0, i32 0
  %239 = load i16, i16* %238, align 2
  %240 = getelementptr inbounds %"struct.dcsctp::SackChunk::GapAckBlock", %"struct.dcsctp::SackChunk::GapAckBlock"* %20, i64 0, i32 0
  %241 = load i16, i16* %240, align 2
  %242 = icmp ult i16 %239, %241
  %243 = load i16, i16* %8, align 2
  %244 = icmp ult i16 %243, %239
  br i1 %242, label %257, label %245

245:                                              ; preds = %237
  br i1 %244, label %246, label %270

246:                                              ; preds = %245
  %247 = bitcast %"struct.dcsctp::SackChunk::GapAckBlock"* %195 to i32*
  %248 = load i32, i32* %247, align 2
  %249 = load i32, i32* %9, align 2
  store i32 %249, i32* %247, align 2
  store i32 %248, i32* %9, align 2
  %250 = load i16, i16* %238, align 2
  %251 = load i16, i16* %240, align 2
  %252 = icmp ult i16 %250, %251
  br i1 %252, label %253, label %270

253:                                              ; preds = %246
  %254 = bitcast %"struct.dcsctp::SackChunk::GapAckBlock"* %20 to i32*
  %255 = load i32, i32* %254, align 2
  %256 = load i32, i32* %247, align 2
  store i32 %256, i32* %254, align 2
  store i32 %255, i32* %247, align 2
  br label %270

257:                                              ; preds = %237
  %258 = bitcast %"struct.dcsctp::SackChunk::GapAckBlock"* %20 to i32*
  %259 = load i32, i32* %258, align 2
  br i1 %244, label %260, label %262

260:                                              ; preds = %257
  %261 = load i32, i32* %11, align 2
  store i32 %261, i32* %258, align 2
  store i32 %259, i32* %11, align 2
  br label %270

262:                                              ; preds = %257
  %263 = bitcast %"struct.dcsctp::SackChunk::GapAckBlock"* %195 to i32*
  %264 = load i32, i32* %263, align 2
  store i32 %264, i32* %258, align 2
  store i32 %259, i32* %263, align 2
  %265 = load i16, i16* %8, align 2
  %266 = trunc i32 %259 to i16
  %267 = icmp ult i16 %265, %266
  br i1 %267, label %268, label %270

268:                                              ; preds = %262
  %269 = load i32, i32* %10, align 2
  store i32 %269, i32* %263, align 2
  store i32 %259, i32* %10, align 2
  br label %270

270:                                              ; preds = %268, %262, %260, %253, %246, %245, %232, %223, %214, %205, %196
  %271 = phi i32 [ %236, %232 ], [ %227, %223 ], [ %218, %214 ], [ %209, %205 ], [ %200, %196 ], [ 1, %260 ], [ 0, %245 ], [ 2, %253 ], [ 1, %246 ], [ 2, %268 ], [ 1, %262 ]
  %272 = getelementptr inbounds %"struct.dcsctp::SackChunk::GapAckBlock", %"struct.dcsctp::SackChunk::GapAckBlock"* %20, i64 0, i32 0
  %273 = load i16, i16* %272, align 2
  %274 = getelementptr inbounds %"struct.dcsctp::SackChunk::GapAckBlock", %"struct.dcsctp::SackChunk::GapAckBlock"* %195, i64 0, i32 0
  %275 = load i16, i16* %274, align 2
  %276 = icmp ult i16 %273, %275
  br i1 %276, label %336, label %277

277:                                              ; preds = %270, %326
  %278 = phi %"struct.dcsctp::SackChunk::GapAckBlock"* [ %279, %326 ], [ %7, %270 ]
  %279 = getelementptr inbounds %"struct.dcsctp::SackChunk::GapAckBlock", %"struct.dcsctp::SackChunk::GapAckBlock"* %278, i64 -1
  %280 = icmp eq %"struct.dcsctp::SackChunk::GapAckBlock"* %20, %279
  br i1 %280, label %281, label %326

281:                                              ; preds = %277
  %282 = getelementptr inbounds %"struct.dcsctp::SackChunk::GapAckBlock", %"struct.dcsctp::SackChunk::GapAckBlock"* %20, i64 1
  %283 = load i16, i16* %14, align 2
  %284 = icmp ult i16 %273, %283
  br i1 %284, label %300, label %285

285:                                              ; preds = %281
  %286 = icmp eq %"struct.dcsctp::SackChunk::GapAckBlock"* %282, %7
  br i1 %286, label %409, label %287

287:                                              ; preds = %285, %297
  %288 = phi %"struct.dcsctp::SackChunk::GapAckBlock"* [ %298, %297 ], [ %282, %285 ]
  %289 = getelementptr inbounds %"struct.dcsctp::SackChunk::GapAckBlock", %"struct.dcsctp::SackChunk::GapAckBlock"* %288, i64 0, i32 0
  %290 = load i16, i16* %289, align 2
  %291 = icmp ult i16 %273, %290
  br i1 %291, label %292, label %297

292:                                              ; preds = %287
  %293 = bitcast %"struct.dcsctp::SackChunk::GapAckBlock"* %288 to i32*
  %294 = load i32, i32* %293, align 2
  %295 = load i32, i32* %15, align 2
  store i32 %295, i32* %293, align 2
  store i32 %294, i32* %15, align 2
  %296 = getelementptr inbounds %"struct.dcsctp::SackChunk::GapAckBlock", %"struct.dcsctp::SackChunk::GapAckBlock"* %288, i64 1
  br label %300

297:                                              ; preds = %287
  %298 = getelementptr inbounds %"struct.dcsctp::SackChunk::GapAckBlock", %"struct.dcsctp::SackChunk::GapAckBlock"* %288, i64 1
  %299 = icmp eq %"struct.dcsctp::SackChunk::GapAckBlock"* %298, %7
  br i1 %299, label %409, label %287

300:                                              ; preds = %292, %281
  %301 = phi %"struct.dcsctp::SackChunk::GapAckBlock"* [ %282, %281 ], [ %296, %292 ]
  %302 = icmp eq %"struct.dcsctp::SackChunk::GapAckBlock"* %301, %7
  br i1 %302, label %409, label %303

303:                                              ; preds = %300, %321
  %304 = phi %"struct.dcsctp::SackChunk::GapAckBlock"* [ %312, %321 ], [ %301, %300 ]
  %305 = phi %"struct.dcsctp::SackChunk::GapAckBlock"* [ %315, %321 ], [ %7, %300 ]
  %306 = load i16, i16* %272, align 2
  br label %307

307:                                              ; preds = %307, %303
  %308 = phi %"struct.dcsctp::SackChunk::GapAckBlock"* [ %304, %303 ], [ %312, %307 ]
  %309 = getelementptr inbounds %"struct.dcsctp::SackChunk::GapAckBlock", %"struct.dcsctp::SackChunk::GapAckBlock"* %308, i64 0, i32 0
  %310 = load i16, i16* %309, align 2
  %311 = icmp ult i16 %306, %310
  %312 = getelementptr inbounds %"struct.dcsctp::SackChunk::GapAckBlock", %"struct.dcsctp::SackChunk::GapAckBlock"* %308, i64 1
  br i1 %311, label %313, label %307

313:                                              ; preds = %307, %313
  %314 = phi %"struct.dcsctp::SackChunk::GapAckBlock"* [ %315, %313 ], [ %305, %307 ]
  %315 = getelementptr inbounds %"struct.dcsctp::SackChunk::GapAckBlock", %"struct.dcsctp::SackChunk::GapAckBlock"* %314, i64 -1
  %316 = getelementptr inbounds %"struct.dcsctp::SackChunk::GapAckBlock", %"struct.dcsctp::SackChunk::GapAckBlock"* %315, i64 0, i32 0
  %317 = load i16, i16* %316, align 2
  %318 = icmp ult i16 %306, %317
  br i1 %318, label %313, label %319

319:                                              ; preds = %313
  %320 = icmp ult %"struct.dcsctp::SackChunk::GapAckBlock"* %308, %315
  br i1 %320, label %321, label %19

321:                                              ; preds = %319
  %322 = bitcast %"struct.dcsctp::SackChunk::GapAckBlock"* %308 to i32*
  %323 = load i32, i32* %322, align 2
  %324 = bitcast %"struct.dcsctp::SackChunk::GapAckBlock"* %315 to i32*
  %325 = load i32, i32* %324, align 2
  store i32 %325, i32* %322, align 2
  store i32 %323, i32* %324, align 2
  br label %303

326:                                              ; preds = %277
  %327 = getelementptr inbounds %"struct.dcsctp::SackChunk::GapAckBlock", %"struct.dcsctp::SackChunk::GapAckBlock"* %279, i64 0, i32 0
  %328 = load i16, i16* %327, align 2
  %329 = icmp ult i16 %328, %275
  br i1 %329, label %330, label %277

330:                                              ; preds = %326
  %331 = bitcast %"struct.dcsctp::SackChunk::GapAckBlock"* %20 to i32*
  %332 = load i32, i32* %331, align 2
  %333 = bitcast %"struct.dcsctp::SackChunk::GapAckBlock"* %279 to i32*
  %334 = load i32, i32* %333, align 2
  store i32 %334, i32* %331, align 2
  store i32 %332, i32* %333, align 2
  %335 = add i32 %271, 1
  br label %336

336:                                              ; preds = %270, %330
  %337 = phi i32 [ %335, %330 ], [ %271, %270 ]
  %338 = phi %"struct.dcsctp::SackChunk::GapAckBlock"* [ %279, %330 ], [ %7, %270 ]
  %339 = ptrtoint %"struct.dcsctp::SackChunk::GapAckBlock"* %20 to i64
  %340 = getelementptr inbounds %"struct.dcsctp::SackChunk::GapAckBlock", %"struct.dcsctp::SackChunk::GapAckBlock"* %20, i64 1
  %341 = icmp ult %"struct.dcsctp::SackChunk::GapAckBlock"* %340, %338
  br i1 %341, label %342, label %371

342:                                              ; preds = %336, %363
  %343 = phi %"struct.dcsctp::SackChunk::GapAckBlock"* [ %370, %363 ], [ %195, %336 ]
  %344 = phi i32 [ %368, %363 ], [ %337, %336 ]
  %345 = phi %"struct.dcsctp::SackChunk::GapAckBlock"* [ %354, %363 ], [ %340, %336 ]
  %346 = phi %"struct.dcsctp::SackChunk::GapAckBlock"* [ %357, %363 ], [ %338, %336 ]
  %347 = getelementptr inbounds %"struct.dcsctp::SackChunk::GapAckBlock", %"struct.dcsctp::SackChunk::GapAckBlock"* %343, i64 0, i32 0
  %348 = load i16, i16* %347, align 2
  br label %349

349:                                              ; preds = %349, %342
  %350 = phi %"struct.dcsctp::SackChunk::GapAckBlock"* [ %345, %342 ], [ %354, %349 ]
  %351 = getelementptr inbounds %"struct.dcsctp::SackChunk::GapAckBlock", %"struct.dcsctp::SackChunk::GapAckBlock"* %350, i64 0, i32 0
  %352 = load i16, i16* %351, align 2
  %353 = icmp ult i16 %352, %348
  %354 = getelementptr inbounds %"struct.dcsctp::SackChunk::GapAckBlock", %"struct.dcsctp::SackChunk::GapAckBlock"* %350, i64 1
  br i1 %353, label %349, label %355

355:                                              ; preds = %349, %355
  %356 = phi %"struct.dcsctp::SackChunk::GapAckBlock"* [ %357, %355 ], [ %346, %349 ]
  %357 = getelementptr inbounds %"struct.dcsctp::SackChunk::GapAckBlock", %"struct.dcsctp::SackChunk::GapAckBlock"* %356, i64 -1
  %358 = getelementptr inbounds %"struct.dcsctp::SackChunk::GapAckBlock", %"struct.dcsctp::SackChunk::GapAckBlock"* %357, i64 0, i32 0
  %359 = load i16, i16* %358, align 2
  %360 = icmp ult i16 %359, %348
  br i1 %360, label %361, label %355

361:                                              ; preds = %355
  %362 = icmp ugt %"struct.dcsctp::SackChunk::GapAckBlock"* %350, %357
  br i1 %362, label %371, label %363

363:                                              ; preds = %361
  %364 = bitcast %"struct.dcsctp::SackChunk::GapAckBlock"* %350 to i32*
  %365 = load i32, i32* %364, align 2
  %366 = bitcast %"struct.dcsctp::SackChunk::GapAckBlock"* %357 to i32*
  %367 = load i32, i32* %366, align 2
  store i32 %367, i32* %364, align 2
  store i32 %365, i32* %366, align 2
  %368 = add i32 %344, 1
  %369 = icmp eq %"struct.dcsctp::SackChunk::GapAckBlock"* %343, %350
  %370 = select i1 %369, %"struct.dcsctp::SackChunk::GapAckBlock"* %357, %"struct.dcsctp::SackChunk::GapAckBlock"* %343
  br label %342

371:                                              ; preds = %361, %336
  %372 = phi %"struct.dcsctp::SackChunk::GapAckBlock"* [ %195, %336 ], [ %343, %361 ]
  %373 = phi i32 [ %337, %336 ], [ %344, %361 ]
  %374 = phi %"struct.dcsctp::SackChunk::GapAckBlock"* [ %340, %336 ], [ %350, %361 ]
  %375 = icmp eq %"struct.dcsctp::SackChunk::GapAckBlock"* %374, %372
  br i1 %375, label %388, label %376

376:                                              ; preds = %371
  %377 = getelementptr inbounds %"struct.dcsctp::SackChunk::GapAckBlock", %"struct.dcsctp::SackChunk::GapAckBlock"* %372, i64 0, i32 0
  %378 = load i16, i16* %377, align 2
  %379 = getelementptr inbounds %"struct.dcsctp::SackChunk::GapAckBlock", %"struct.dcsctp::SackChunk::GapAckBlock"* %374, i64 0, i32 0
  %380 = load i16, i16* %379, align 2
  %381 = icmp ult i16 %378, %380
  br i1 %381, label %382, label %388

382:                                              ; preds = %376
  %383 = bitcast %"struct.dcsctp::SackChunk::GapAckBlock"* %374 to i32*
  %384 = load i32, i32* %383, align 2
  %385 = bitcast %"struct.dcsctp::SackChunk::GapAckBlock"* %372 to i32*
  %386 = load i32, i32* %385, align 2
  store i32 %386, i32* %383, align 2
  store i32 %384, i32* %385, align 2
  %387 = add i32 %373, 1
  br label %388

388:                                              ; preds = %371, %382, %376
  %389 = phi i32 [ %387, %382 ], [ %373, %376 ], [ %373, %371 ]
  %390 = icmp eq i32 %389, 0
  br i1 %390, label %391, label %398

391:                                              ; preds = %388
  %392 = tail call fastcc zeroext i1 @"_ZNSt3__127__insertion_sort_incompleteIRZN6dcsctp15ChunkValidators5CleanEONS1_9SackChunkEE3$_0PNS3_11GapAckBlockEEEbT0_S9_T_"(%"struct.dcsctp::SackChunk::GapAckBlock"* %20, %"struct.dcsctp::SackChunk::GapAckBlock"* %374)
  %393 = getelementptr inbounds %"struct.dcsctp::SackChunk::GapAckBlock", %"struct.dcsctp::SackChunk::GapAckBlock"* %374, i64 1
  %394 = tail call fastcc zeroext i1 @"_ZNSt3__127__insertion_sort_incompleteIRZN6dcsctp15ChunkValidators5CleanEONS1_9SackChunkEE3$_0PNS3_11GapAckBlockEEEbT0_S9_T_"(%"struct.dcsctp::SackChunk::GapAckBlock"* %393, %"struct.dcsctp::SackChunk::GapAckBlock"* %4)
  br i1 %394, label %395, label %397

395:                                              ; preds = %391
  br i1 %392, label %409, label %396

396:                                              ; preds = %395, %407
  br label %3

397:                                              ; preds = %391
  br i1 %392, label %405, label %398

398:                                              ; preds = %397, %388
  %399 = ptrtoint %"struct.dcsctp::SackChunk::GapAckBlock"* %374 to i64
  %400 = sub i64 %399, %339
  %401 = sub i64 %16, %399
  %402 = icmp slt i64 %400, %401
  br i1 %402, label %403, label %407

403:                                              ; preds = %398
  tail call fastcc void @"_ZNSt3__16__sortIRZN6dcsctp15ChunkValidators5CleanEONS1_9SackChunkEE3$_0PNS3_11GapAckBlockEEEvT0_S9_T_"(%"struct.dcsctp::SackChunk::GapAckBlock"* %20, %"struct.dcsctp::SackChunk::GapAckBlock"* %374)
  %404 = getelementptr inbounds %"struct.dcsctp::SackChunk::GapAckBlock", %"struct.dcsctp::SackChunk::GapAckBlock"* %374, i64 1
  br label %405

405:                                              ; preds = %403, %397
  %406 = phi %"struct.dcsctp::SackChunk::GapAckBlock"* [ %393, %397 ], [ %404, %403 ]
  br label %17

407:                                              ; preds = %398
  %408 = getelementptr inbounds %"struct.dcsctp::SackChunk::GapAckBlock", %"struct.dcsctp::SackChunk::GapAckBlock"* %374, i64 1
  tail call fastcc void @"_ZNSt3__16__sortIRZN6dcsctp15ChunkValidators5CleanEONS1_9SackChunkEE3$_0PNS3_11GapAckBlockEEEvT0_S9_T_"(%"struct.dcsctp::SackChunk::GapAckBlock"* %408, %"struct.dcsctp::SackChunk::GapAckBlock"* %4)
  br label %396

409:                                              ; preds = %395, %300, %19, %19, %285, %297, %187, %157, %114, %108, %100, %91, %80, %72, %66, %63, %56, %48, %47, %24, %31, %75
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal fastcc i32 @"_ZNSt3__17__sort4IRZN6dcsctp15ChunkValidators5CleanEONS1_9SackChunkEE3$_0PNS3_11GapAckBlockEEEjT0_S9_S9_S9_T_"(%"struct.dcsctp::SackChunk::GapAckBlock"* nocapture, %"struct.dcsctp::SackChunk::GapAckBlock"* nocapture, %"struct.dcsctp::SackChunk::GapAckBlock"* nocapture, %"struct.dcsctp::SackChunk::GapAckBlock"* nocapture) unnamed_addr #7 {
  %5 = getelementptr inbounds %"struct.dcsctp::SackChunk::GapAckBlock", %"struct.dcsctp::SackChunk::GapAckBlock"* %1, i64 0, i32 0
  %6 = load i16, i16* %5, align 2
  %7 = getelementptr inbounds %"struct.dcsctp::SackChunk::GapAckBlock", %"struct.dcsctp::SackChunk::GapAckBlock"* %0, i64 0, i32 0
  %8 = load i16, i16* %7, align 2
  %9 = icmp ult i16 %6, %8
  %10 = getelementptr inbounds %"struct.dcsctp::SackChunk::GapAckBlock", %"struct.dcsctp::SackChunk::GapAckBlock"* %2, i64 0, i32 0
  %11 = load i16, i16* %10, align 2
  %12 = icmp ult i16 %11, %6
  br i1 %9, label %28, label %13

13:                                               ; preds = %4
  br i1 %12, label %14, label %44

14:                                               ; preds = %13
  %15 = bitcast %"struct.dcsctp::SackChunk::GapAckBlock"* %1 to i32*
  %16 = load i32, i32* %15, align 2
  %17 = bitcast %"struct.dcsctp::SackChunk::GapAckBlock"* %2 to i32*
  %18 = load i32, i32* %17, align 2
  store i32 %18, i32* %15, align 2
  store i32 %16, i32* %17, align 2
  %19 = load i16, i16* %5, align 2
  %20 = load i16, i16* %7, align 2
  %21 = icmp ult i16 %19, %20
  %22 = trunc i32 %16 to i16
  br i1 %21, label %23, label %44

23:                                               ; preds = %14
  %24 = bitcast %"struct.dcsctp::SackChunk::GapAckBlock"* %0 to i32*
  %25 = load i32, i32* %24, align 2
  %26 = load i32, i32* %15, align 2
  store i32 %26, i32* %24, align 2
  store i32 %25, i32* %15, align 2
  %27 = load i16, i16* %10, align 2
  br label %44

28:                                               ; preds = %4
  %29 = bitcast %"struct.dcsctp::SackChunk::GapAckBlock"* %0 to i32*
  %30 = load i32, i32* %29, align 2
  br i1 %12, label %31, label %35

31:                                               ; preds = %28
  %32 = bitcast %"struct.dcsctp::SackChunk::GapAckBlock"* %2 to i32*
  %33 = load i32, i32* %32, align 2
  store i32 %33, i32* %29, align 2
  store i32 %30, i32* %32, align 2
  %34 = trunc i32 %30 to i16
  br label %44

35:                                               ; preds = %28
  %36 = bitcast %"struct.dcsctp::SackChunk::GapAckBlock"* %1 to i32*
  %37 = load i32, i32* %36, align 2
  store i32 %37, i32* %29, align 2
  store i32 %30, i32* %36, align 2
  %38 = load i16, i16* %10, align 2
  %39 = trunc i32 %30 to i16
  %40 = icmp ult i16 %38, %39
  br i1 %40, label %41, label %44

41:                                               ; preds = %35
  %42 = bitcast %"struct.dcsctp::SackChunk::GapAckBlock"* %2 to i32*
  %43 = load i32, i32* %42, align 2
  store i32 %43, i32* %36, align 2
  store i32 %30, i32* %42, align 2
  br label %44

44:                                               ; preds = %13, %14, %23, %31, %35, %41
  %45 = phi i16 [ %34, %31 ], [ %11, %13 ], [ %27, %23 ], [ %22, %14 ], [ %39, %41 ], [ %38, %35 ]
  %46 = phi i32 [ 1, %31 ], [ 0, %13 ], [ 2, %23 ], [ 1, %14 ], [ 2, %41 ], [ 1, %35 ]
  %47 = getelementptr inbounds %"struct.dcsctp::SackChunk::GapAckBlock", %"struct.dcsctp::SackChunk::GapAckBlock"* %3, i64 0, i32 0
  %48 = load i16, i16* %47, align 2
  %49 = icmp ult i16 %48, %45
  br i1 %49, label %50, label %72

50:                                               ; preds = %44
  %51 = bitcast %"struct.dcsctp::SackChunk::GapAckBlock"* %2 to i32*
  %52 = load i32, i32* %51, align 2
  %53 = bitcast %"struct.dcsctp::SackChunk::GapAckBlock"* %3 to i32*
  %54 = load i32, i32* %53, align 2
  store i32 %54, i32* %51, align 2
  store i32 %52, i32* %53, align 2
  %55 = add nuw nsw i32 %46, 1
  %56 = load i16, i16* %10, align 2
  %57 = load i16, i16* %5, align 2
  %58 = icmp ult i16 %56, %57
  br i1 %58, label %59, label %72

59:                                               ; preds = %50
  %60 = bitcast %"struct.dcsctp::SackChunk::GapAckBlock"* %1 to i32*
  %61 = load i32, i32* %60, align 2
  %62 = load i32, i32* %51, align 2
  store i32 %62, i32* %60, align 2
  store i32 %61, i32* %51, align 2
  %63 = add nuw nsw i32 %46, 2
  %64 = load i16, i16* %5, align 2
  %65 = load i16, i16* %7, align 2
  %66 = icmp ult i16 %64, %65
  br i1 %66, label %67, label %72

67:                                               ; preds = %59
  %68 = bitcast %"struct.dcsctp::SackChunk::GapAckBlock"* %0 to i32*
  %69 = load i32, i32* %68, align 2
  %70 = load i32, i32* %60, align 2
  store i32 %70, i32* %68, align 2
  store i32 %69, i32* %60, align 2
  %71 = add nuw nsw i32 %46, 3
  br label %72

72:                                               ; preds = %50, %67, %59, %44
  %73 = phi i32 [ %71, %67 ], [ %63, %59 ], [ %55, %50 ], [ %46, %44 ]
  ret i32 %73
}

; Function Attrs: nounwind ssp uwtable
define internal fastcc zeroext i1 @"_ZNSt3__127__insertion_sort_incompleteIRZN6dcsctp15ChunkValidators5CleanEONS1_9SackChunkEE3$_0PNS3_11GapAckBlockEEEbT0_S9_T_"(%"struct.dcsctp::SackChunk::GapAckBlock"*, %"struct.dcsctp::SackChunk::GapAckBlock"*) unnamed_addr #0 {
  %3 = ptrtoint %"struct.dcsctp::SackChunk::GapAckBlock"* %1 to i64
  %4 = ptrtoint %"struct.dcsctp::SackChunk::GapAckBlock"* %0 to i64
  %5 = sub i64 %3, %4
  %6 = ashr exact i64 %5, 2
  switch i64 %6, label %100 [
    i64 0, label %181
    i64 1, label %181
    i64 2, label %7
    i64 3, label %19
    i64 4, label %58
    i64 5, label %63
  ]

7:                                                ; preds = %2
  %8 = getelementptr inbounds %"struct.dcsctp::SackChunk::GapAckBlock", %"struct.dcsctp::SackChunk::GapAckBlock"* %1, i64 -1
  %9 = getelementptr inbounds %"struct.dcsctp::SackChunk::GapAckBlock", %"struct.dcsctp::SackChunk::GapAckBlock"* %8, i64 0, i32 0
  %10 = load i16, i16* %9, align 2
  %11 = getelementptr inbounds %"struct.dcsctp::SackChunk::GapAckBlock", %"struct.dcsctp::SackChunk::GapAckBlock"* %0, i64 0, i32 0
  %12 = load i16, i16* %11, align 2
  %13 = icmp ult i16 %10, %12
  br i1 %13, label %14, label %181

14:                                               ; preds = %7
  %15 = bitcast %"struct.dcsctp::SackChunk::GapAckBlock"* %0 to i32*
  %16 = load i32, i32* %15, align 2
  %17 = bitcast %"struct.dcsctp::SackChunk::GapAckBlock"* %8 to i32*
  %18 = load i32, i32* %17, align 2
  store i32 %18, i32* %15, align 2
  store i32 %16, i32* %17, align 2
  br label %181

19:                                               ; preds = %2
  %20 = getelementptr inbounds %"struct.dcsctp::SackChunk::GapAckBlock", %"struct.dcsctp::SackChunk::GapAckBlock"* %0, i64 1
  %21 = getelementptr inbounds %"struct.dcsctp::SackChunk::GapAckBlock", %"struct.dcsctp::SackChunk::GapAckBlock"* %1, i64 -1
  %22 = getelementptr inbounds %"struct.dcsctp::SackChunk::GapAckBlock", %"struct.dcsctp::SackChunk::GapAckBlock"* %20, i64 0, i32 0
  %23 = load i16, i16* %22, align 2
  %24 = getelementptr inbounds %"struct.dcsctp::SackChunk::GapAckBlock", %"struct.dcsctp::SackChunk::GapAckBlock"* %0, i64 0, i32 0
  %25 = load i16, i16* %24, align 2
  %26 = icmp ult i16 %23, %25
  %27 = getelementptr inbounds %"struct.dcsctp::SackChunk::GapAckBlock", %"struct.dcsctp::SackChunk::GapAckBlock"* %21, i64 0, i32 0
  %28 = load i16, i16* %27, align 2
  %29 = icmp ult i16 %28, %23
  br i1 %26, label %43, label %30

30:                                               ; preds = %19
  br i1 %29, label %31, label %181

31:                                               ; preds = %30
  %32 = bitcast %"struct.dcsctp::SackChunk::GapAckBlock"* %20 to i32*
  %33 = load i32, i32* %32, align 2
  %34 = bitcast %"struct.dcsctp::SackChunk::GapAckBlock"* %21 to i32*
  %35 = load i32, i32* %34, align 2
  store i32 %35, i32* %32, align 2
  store i32 %33, i32* %34, align 2
  %36 = load i16, i16* %22, align 2
  %37 = load i16, i16* %24, align 2
  %38 = icmp ult i16 %36, %37
  br i1 %38, label %39, label %181

39:                                               ; preds = %31
  %40 = bitcast %"struct.dcsctp::SackChunk::GapAckBlock"* %0 to i32*
  %41 = load i32, i32* %40, align 2
  %42 = load i32, i32* %32, align 2
  store i32 %42, i32* %40, align 2
  store i32 %41, i32* %32, align 2
  br label %181

43:                                               ; preds = %19
  %44 = bitcast %"struct.dcsctp::SackChunk::GapAckBlock"* %0 to i32*
  %45 = load i32, i32* %44, align 2
  br i1 %29, label %46, label %49

46:                                               ; preds = %43
  %47 = bitcast %"struct.dcsctp::SackChunk::GapAckBlock"* %21 to i32*
  %48 = load i32, i32* %47, align 2
  store i32 %48, i32* %44, align 2
  store i32 %45, i32* %47, align 2
  br label %181

49:                                               ; preds = %43
  %50 = bitcast %"struct.dcsctp::SackChunk::GapAckBlock"* %20 to i32*
  %51 = load i32, i32* %50, align 2
  store i32 %51, i32* %44, align 2
  store i32 %45, i32* %50, align 2
  %52 = load i16, i16* %27, align 2
  %53 = trunc i32 %45 to i16
  %54 = icmp ult i16 %52, %53
  br i1 %54, label %55, label %181

55:                                               ; preds = %49
  %56 = bitcast %"struct.dcsctp::SackChunk::GapAckBlock"* %21 to i32*
  %57 = load i32, i32* %56, align 2
  store i32 %57, i32* %50, align 2
  store i32 %45, i32* %56, align 2
  br label %181

58:                                               ; preds = %2
  %59 = getelementptr inbounds %"struct.dcsctp::SackChunk::GapAckBlock", %"struct.dcsctp::SackChunk::GapAckBlock"* %0, i64 1
  %60 = getelementptr inbounds %"struct.dcsctp::SackChunk::GapAckBlock", %"struct.dcsctp::SackChunk::GapAckBlock"* %0, i64 2
  %61 = getelementptr inbounds %"struct.dcsctp::SackChunk::GapAckBlock", %"struct.dcsctp::SackChunk::GapAckBlock"* %1, i64 -1
  %62 = tail call fastcc i32 @"_ZNSt3__17__sort4IRZN6dcsctp15ChunkValidators5CleanEONS1_9SackChunkEE3$_0PNS3_11GapAckBlockEEEjT0_S9_S9_S9_T_"(%"struct.dcsctp::SackChunk::GapAckBlock"* %0, %"struct.dcsctp::SackChunk::GapAckBlock"* %59, %"struct.dcsctp::SackChunk::GapAckBlock"* %60, %"struct.dcsctp::SackChunk::GapAckBlock"* %61)
  br label %181

63:                                               ; preds = %2
  %64 = getelementptr inbounds %"struct.dcsctp::SackChunk::GapAckBlock", %"struct.dcsctp::SackChunk::GapAckBlock"* %0, i64 1
  %65 = getelementptr inbounds %"struct.dcsctp::SackChunk::GapAckBlock", %"struct.dcsctp::SackChunk::GapAckBlock"* %0, i64 2
  %66 = getelementptr inbounds %"struct.dcsctp::SackChunk::GapAckBlock", %"struct.dcsctp::SackChunk::GapAckBlock"* %0, i64 3
  %67 = getelementptr inbounds %"struct.dcsctp::SackChunk::GapAckBlock", %"struct.dcsctp::SackChunk::GapAckBlock"* %1, i64 -1
  %68 = tail call fastcc i32 @"_ZNSt3__17__sort4IRZN6dcsctp15ChunkValidators5CleanEONS1_9SackChunkEE3$_0PNS3_11GapAckBlockEEEjT0_S9_S9_S9_T_"(%"struct.dcsctp::SackChunk::GapAckBlock"* %0, %"struct.dcsctp::SackChunk::GapAckBlock"* %64, %"struct.dcsctp::SackChunk::GapAckBlock"* %65, %"struct.dcsctp::SackChunk::GapAckBlock"* %66) #8
  %69 = getelementptr inbounds %"struct.dcsctp::SackChunk::GapAckBlock", %"struct.dcsctp::SackChunk::GapAckBlock"* %67, i64 0, i32 0
  %70 = load i16, i16* %69, align 2
  %71 = getelementptr inbounds %"struct.dcsctp::SackChunk::GapAckBlock", %"struct.dcsctp::SackChunk::GapAckBlock"* %66, i64 0, i32 0
  %72 = load i16, i16* %71, align 2
  %73 = icmp ult i16 %70, %72
  br i1 %73, label %74, label %181

74:                                               ; preds = %63
  %75 = bitcast %"struct.dcsctp::SackChunk::GapAckBlock"* %66 to i32*
  %76 = load i32, i32* %75, align 2
  %77 = bitcast %"struct.dcsctp::SackChunk::GapAckBlock"* %67 to i32*
  %78 = load i32, i32* %77, align 2
  store i32 %78, i32* %75, align 2
  store i32 %76, i32* %77, align 2
  %79 = load i16, i16* %71, align 2
  %80 = getelementptr inbounds %"struct.dcsctp::SackChunk::GapAckBlock", %"struct.dcsctp::SackChunk::GapAckBlock"* %65, i64 0, i32 0
  %81 = load i16, i16* %80, align 2
  %82 = icmp ult i16 %79, %81
  br i1 %82, label %83, label %181

83:                                               ; preds = %74
  %84 = bitcast %"struct.dcsctp::SackChunk::GapAckBlock"* %65 to i32*
  %85 = load i32, i32* %84, align 2
  %86 = load i32, i32* %75, align 2
  store i32 %86, i32* %84, align 2
  store i32 %85, i32* %75, align 2
  %87 = trunc i32 %86 to i16
  %88 = getelementptr inbounds %"struct.dcsctp::SackChunk::GapAckBlock", %"struct.dcsctp::SackChunk::GapAckBlock"* %64, i64 0, i32 0
  %89 = load i16, i16* %88, align 2
  %90 = icmp ugt i16 %89, %87
  br i1 %90, label %91, label %181

91:                                               ; preds = %83
  %92 = bitcast %"struct.dcsctp::SackChunk::GapAckBlock"* %64 to i32*
  %93 = load i32, i32* %92, align 2
  store i32 %86, i32* %92, align 2
  store i32 %93, i32* %84, align 2
  %94 = getelementptr inbounds %"struct.dcsctp::SackChunk::GapAckBlock", %"struct.dcsctp::SackChunk::GapAckBlock"* %0, i64 0, i32 0
  %95 = load i16, i16* %94, align 2
  %96 = icmp ugt i16 %95, %87
  br i1 %96, label %97, label %181

97:                                               ; preds = %91
  %98 = bitcast %"struct.dcsctp::SackChunk::GapAckBlock"* %0 to i32*
  %99 = load i32, i32* %98, align 2
  store i32 %86, i32* %98, align 2
  store i32 %99, i32* %92, align 2
  br label %181

100:                                              ; preds = %2
  %101 = getelementptr inbounds %"struct.dcsctp::SackChunk::GapAckBlock", %"struct.dcsctp::SackChunk::GapAckBlock"* %0, i64 2
  %102 = getelementptr inbounds %"struct.dcsctp::SackChunk::GapAckBlock", %"struct.dcsctp::SackChunk::GapAckBlock"* %0, i64 1
  %103 = getelementptr inbounds %"struct.dcsctp::SackChunk::GapAckBlock", %"struct.dcsctp::SackChunk::GapAckBlock"* %102, i64 0, i32 0
  %104 = load i16, i16* %103, align 2
  %105 = getelementptr inbounds %"struct.dcsctp::SackChunk::GapAckBlock", %"struct.dcsctp::SackChunk::GapAckBlock"* %0, i64 0, i32 0
  %106 = load i16, i16* %105, align 2
  %107 = icmp ult i16 %104, %106
  %108 = getelementptr inbounds %"struct.dcsctp::SackChunk::GapAckBlock", %"struct.dcsctp::SackChunk::GapAckBlock"* %101, i64 0, i32 0
  %109 = load i16, i16* %108, align 2
  %110 = icmp ult i16 %109, %104
  br i1 %107, label %123, label %111

111:                                              ; preds = %100
  br i1 %110, label %112, label %138

112:                                              ; preds = %111
  %113 = bitcast %"struct.dcsctp::SackChunk::GapAckBlock"* %102 to i32*
  %114 = load i32, i32* %113, align 2
  %115 = bitcast %"struct.dcsctp::SackChunk::GapAckBlock"* %101 to i32*
  %116 = load i32, i32* %115, align 2
  store i32 %116, i32* %113, align 2
  store i32 %114, i32* %115, align 2
  %117 = trunc i32 %116 to i16
  %118 = icmp ugt i16 %106, %117
  %119 = trunc i32 %114 to i16
  br i1 %118, label %120, label %138

120:                                              ; preds = %112
  %121 = bitcast %"struct.dcsctp::SackChunk::GapAckBlock"* %0 to i32*
  %122 = load i32, i32* %121, align 2
  store i32 %116, i32* %121, align 2
  store i32 %122, i32* %113, align 2
  br label %138

123:                                              ; preds = %100
  %124 = bitcast %"struct.dcsctp::SackChunk::GapAckBlock"* %0 to i32*
  %125 = load i32, i32* %124, align 2
  br i1 %110, label %126, label %130

126:                                              ; preds = %123
  %127 = bitcast %"struct.dcsctp::SackChunk::GapAckBlock"* %101 to i32*
  %128 = load i32, i32* %127, align 2
  store i32 %128, i32* %124, align 2
  store i32 %125, i32* %127, align 2
  %129 = trunc i32 %125 to i16
  br label %138

130:                                              ; preds = %123
  %131 = bitcast %"struct.dcsctp::SackChunk::GapAckBlock"* %102 to i32*
  %132 = load i32, i32* %131, align 2
  store i32 %132, i32* %124, align 2
  store i32 %125, i32* %131, align 2
  %133 = trunc i32 %125 to i16
  %134 = icmp ult i16 %109, %133
  br i1 %134, label %135, label %138

135:                                              ; preds = %130
  %136 = bitcast %"struct.dcsctp::SackChunk::GapAckBlock"* %101 to i32*
  %137 = load i32, i32* %136, align 2
  store i32 %137, i32* %131, align 2
  store i32 %125, i32* %136, align 2
  br label %138

138:                                              ; preds = %111, %112, %120, %126, %130, %135
  %139 = phi i16 [ %109, %111 ], [ %119, %112 ], [ %119, %120 ], [ %129, %126 ], [ %109, %130 ], [ %133, %135 ]
  %140 = getelementptr inbounds %"struct.dcsctp::SackChunk::GapAckBlock", %"struct.dcsctp::SackChunk::GapAckBlock"* %0, i64 3
  %141 = icmp eq %"struct.dcsctp::SackChunk::GapAckBlock"* %140, %1
  br i1 %141, label %181, label %142

142:                                              ; preds = %138, %175
  %143 = phi i16 [ %177, %175 ], [ %139, %138 ]
  %144 = phi %"struct.dcsctp::SackChunk::GapAckBlock"* [ %173, %175 ], [ %140, %138 ]
  %145 = phi i32 [ %172, %175 ], [ 0, %138 ]
  %146 = phi %"struct.dcsctp::SackChunk::GapAckBlock"* [ %144, %175 ], [ %101, %138 ]
  %147 = getelementptr inbounds %"struct.dcsctp::SackChunk::GapAckBlock", %"struct.dcsctp::SackChunk::GapAckBlock"* %144, i64 0, i32 0
  %148 = load i16, i16* %147, align 2
  %149 = icmp ult i16 %148, %143
  br i1 %149, label %150, label %171

150:                                              ; preds = %142
  %151 = bitcast %"struct.dcsctp::SackChunk::GapAckBlock"* %144 to i32*
  %152 = load i32, i32* %151, align 2
  %153 = trunc i32 %152 to i16
  br label %154

154:                                              ; preds = %161, %150
  %155 = phi %"struct.dcsctp::SackChunk::GapAckBlock"* [ %144, %150 ], [ %156, %161 ]
  %156 = phi %"struct.dcsctp::SackChunk::GapAckBlock"* [ %146, %150 ], [ %162, %161 ]
  %157 = bitcast %"struct.dcsctp::SackChunk::GapAckBlock"* %156 to i32*
  %158 = bitcast %"struct.dcsctp::SackChunk::GapAckBlock"* %155 to i32*
  %159 = load i32, i32* %157, align 2
  store i32 %159, i32* %158, align 2
  %160 = icmp eq %"struct.dcsctp::SackChunk::GapAckBlock"* %156, %0
  br i1 %160, label %166, label %161

161:                                              ; preds = %154
  %162 = getelementptr inbounds %"struct.dcsctp::SackChunk::GapAckBlock", %"struct.dcsctp::SackChunk::GapAckBlock"* %156, i64 -1
  %163 = getelementptr inbounds %"struct.dcsctp::SackChunk::GapAckBlock", %"struct.dcsctp::SackChunk::GapAckBlock"* %162, i64 0, i32 0
  %164 = load i16, i16* %163, align 2
  %165 = icmp ugt i16 %164, %153
  br i1 %165, label %154, label %166

166:                                              ; preds = %154, %161
  %167 = phi %"struct.dcsctp::SackChunk::GapAckBlock"* [ %156, %161 ], [ %0, %154 ]
  %168 = bitcast %"struct.dcsctp::SackChunk::GapAckBlock"* %167 to i32*
  store i32 %152, i32* %168, align 2
  %169 = add i32 %145, 1
  %170 = icmp eq i32 %169, 8
  br i1 %170, label %178, label %171

171:                                              ; preds = %166, %142
  %172 = phi i32 [ %169, %166 ], [ %145, %142 ]
  %173 = getelementptr inbounds %"struct.dcsctp::SackChunk::GapAckBlock", %"struct.dcsctp::SackChunk::GapAckBlock"* %144, i64 1
  %174 = icmp eq %"struct.dcsctp::SackChunk::GapAckBlock"* %173, %1
  br i1 %174, label %181, label %175

175:                                              ; preds = %171
  %176 = getelementptr inbounds %"struct.dcsctp::SackChunk::GapAckBlock", %"struct.dcsctp::SackChunk::GapAckBlock"* %144, i64 0, i32 0
  %177 = load i16, i16* %176, align 2
  br label %142

178:                                              ; preds = %166
  %179 = getelementptr inbounds %"struct.dcsctp::SackChunk::GapAckBlock", %"struct.dcsctp::SackChunk::GapAckBlock"* %144, i64 1
  %180 = icmp eq %"struct.dcsctp::SackChunk::GapAckBlock"* %179, %1
  br label %181

181:                                              ; preds = %171, %178, %138, %97, %91, %83, %74, %63, %55, %49, %46, %39, %31, %30, %7, %14, %2, %2, %58
  %182 = phi i1 [ true, %58 ], [ true, %2 ], [ true, %2 ], [ true, %14 ], [ true, %7 ], [ true, %30 ], [ true, %31 ], [ true, %39 ], [ true, %46 ], [ true, %49 ], [ true, %55 ], [ true, %63 ], [ true, %74 ], [ true, %83 ], [ true, %91 ], [ true, %97 ], [ true, %138 ], [ %180, %178 ], [ true, %171 ]
  ret i1 %182
}

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind readonly ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind }
attributes #3 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { noreturn nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nobuiltin nofree "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { nofree norecurse nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #8 = { nounwind }
attributes #9 = { noreturn nounwind }
attributes #10 = { builtin nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{!3}
!3 = distinct !{!3, !4, !"_ZNSt3__16__treeIN6dcsctp11StrongAliasINS1_6TSNTagEjEENS_4lessIS4_EENS_9allocatorIS4_EEE16__construct_nodeIJRKS4_EEENS_10unique_ptrINS_11__tree_nodeIS4_PvEENS_22__tree_node_destructorINS7_ISG_EEEEEEDpOT_: argument 0"}
!4 = distinct !{!4, !"_ZNSt3__16__treeIN6dcsctp11StrongAliasINS1_6TSNTagEjEENS_4lessIS4_EENS_9allocatorIS4_EEE16__construct_nodeIJRKS4_EEENS_10unique_ptrINS_11__tree_nodeIS4_PvEENS_22__tree_node_destructorINS7_ISG_EEEEEEDpOT_"}
!5 = !{i8 0, i8 2}
