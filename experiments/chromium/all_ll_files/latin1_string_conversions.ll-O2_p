; ModuleID = '../../base/strings/latin1_string_conversions.cc'
source_filename = "../../base/strings/latin1_string_conversions.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%"class.std::__1::basic_string" = type { %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__rep" }
%"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__rep" = type { %union.anon }
%union.anon = type { %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__long" }
%"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__long" = type { i16*, i64, i64 }
%"class.std::__1::__basic_string_common" = type { i8 }
%"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short" = type { [11 x i16], %struct.anon }
%struct.anon = type { %"struct.std::__1::__padding", i8 }
%"struct.std::__1::__padding" = type { [1 x i8] }

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN4base20Latin1OrUTF16ToUTF16EmPKhPKDs(%"class.std::__1::basic_string"* noalias sret, i64, i8*, i16*) local_unnamed_addr #0 {
  %5 = icmp eq i64 %1, 0
  br i1 %5, label %6, label %8

6:                                                ; preds = %4
  %7 = bitcast %"class.std::__1::basic_string"* %0 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %7, i8 0, i64 24, i1 false) #5
  br label %238

8:                                                ; preds = %4
  %9 = icmp eq i8* %2, null
  br i1 %9, label %111, label %10

10:                                               ; preds = %8
  %11 = getelementptr inbounds i8, i8* %2, i64 %1
  %12 = icmp ugt i64 %1, 9223372036854775791
  br i1 %12, label %13, label %15

13:                                               ; preds = %10
  %14 = bitcast %"class.std::__1::basic_string"* %0 to %"class.std::__1::__basic_string_common"*
  tail call void @_ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__basic_string_common"* %14) #6
  unreachable

15:                                               ; preds = %10
  %16 = icmp ult i64 %1, 11
  br i1 %16, label %17, label %22

17:                                               ; preds = %15
  %18 = trunc i64 %1 to i8
  %19 = bitcast %"class.std::__1::basic_string"* %0 to %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"*
  %20 = getelementptr inbounds %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short", %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"* %19, i64 0, i32 1, i32 1
  store i8 %18, i8* %20, align 1
  %21 = bitcast %"class.std::__1::basic_string"* %0 to i16*
  br label %35

22:                                               ; preds = %15
  %23 = add nuw nsw i64 %1, 8
  %24 = and i64 %23, -8
  %25 = icmp slt i64 %24, 0
  br i1 %25, label %26, label %27

26:                                               ; preds = %22
  tail call void @abort() #6
  unreachable

27:                                               ; preds = %22
  %28 = shl i64 %24, 1
  %29 = tail call i8* @_Znwm(i64 %28) #7
  %30 = bitcast i8* %29 to i16*
  %31 = bitcast %"class.std::__1::basic_string"* %0 to i8**
  store i8* %29, i8** %31, align 8
  %32 = or i64 %24, -9223372036854775808
  %33 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 2
  store i64 %32, i64* %33, align 8
  %34 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  store i64 %1, i64* %34, align 8
  br label %35

35:                                               ; preds = %17, %27
  %36 = phi i16* [ %21, %17 ], [ %30, %27 ]
  %37 = icmp ult i64 %1, 16
  br i1 %37, label %98, label %38

38:                                               ; preds = %35
  %39 = and i64 %1, -16
  %40 = getelementptr i8, i8* %2, i64 %39
  %41 = getelementptr i16, i16* %36, i64 %39
  %42 = add i64 %39, -16
  %43 = lshr exact i64 %42, 4
  %44 = add nuw nsw i64 %43, 1
  %45 = and i64 %44, 1
  %46 = icmp eq i64 %42, 0
  br i1 %46, label %80, label %47

47:                                               ; preds = %38
  %48 = sub nuw nsw i64 %44, %45
  br label %49

49:                                               ; preds = %49, %47
  %50 = phi i64 [ 0, %47 ], [ %77, %49 ]
  %51 = phi i64 [ %48, %47 ], [ %78, %49 ]
  %52 = getelementptr i8, i8* %2, i64 %50
  %53 = getelementptr i16, i16* %36, i64 %50
  %54 = bitcast i8* %52 to <8 x i8>*
  %55 = load <8 x i8>, <8 x i8>* %54, align 1
  %56 = getelementptr i8, i8* %52, i64 8
  %57 = bitcast i8* %56 to <8 x i8>*
  %58 = load <8 x i8>, <8 x i8>* %57, align 1
  %59 = zext <8 x i8> %55 to <8 x i16>
  %60 = zext <8 x i8> %58 to <8 x i16>
  %61 = bitcast i16* %53 to <8 x i16>*
  store <8 x i16> %59, <8 x i16>* %61, align 2
  %62 = getelementptr i16, i16* %53, i64 8
  %63 = bitcast i16* %62 to <8 x i16>*
  store <8 x i16> %60, <8 x i16>* %63, align 2
  %64 = or i64 %50, 16
  %65 = getelementptr i8, i8* %2, i64 %64
  %66 = getelementptr i16, i16* %36, i64 %64
  %67 = bitcast i8* %65 to <8 x i8>*
  %68 = load <8 x i8>, <8 x i8>* %67, align 1
  %69 = getelementptr i8, i8* %65, i64 8
  %70 = bitcast i8* %69 to <8 x i8>*
  %71 = load <8 x i8>, <8 x i8>* %70, align 1
  %72 = zext <8 x i8> %68 to <8 x i16>
  %73 = zext <8 x i8> %71 to <8 x i16>
  %74 = bitcast i16* %66 to <8 x i16>*
  store <8 x i16> %72, <8 x i16>* %74, align 2
  %75 = getelementptr i16, i16* %66, i64 8
  %76 = bitcast i16* %75 to <8 x i16>*
  store <8 x i16> %73, <8 x i16>* %76, align 2
  %77 = add i64 %50, 32
  %78 = add i64 %51, -2
  %79 = icmp eq i64 %78, 0
  br i1 %79, label %80, label %49, !llvm.loop !2

80:                                               ; preds = %49, %38
  %81 = phi i64 [ 0, %38 ], [ %77, %49 ]
  %82 = icmp eq i64 %45, 0
  br i1 %82, label %96, label %83

83:                                               ; preds = %80
  %84 = getelementptr i8, i8* %2, i64 %81
  %85 = getelementptr i16, i16* %36, i64 %81
  %86 = bitcast i8* %84 to <8 x i8>*
  %87 = load <8 x i8>, <8 x i8>* %86, align 1
  %88 = getelementptr i8, i8* %84, i64 8
  %89 = bitcast i8* %88 to <8 x i8>*
  %90 = load <8 x i8>, <8 x i8>* %89, align 1
  %91 = zext <8 x i8> %87 to <8 x i16>
  %92 = zext <8 x i8> %90 to <8 x i16>
  %93 = bitcast i16* %85 to <8 x i16>*
  store <8 x i16> %91, <8 x i16>* %93, align 2
  %94 = getelementptr i16, i16* %85, i64 8
  %95 = bitcast i16* %94 to <8 x i16>*
  store <8 x i16> %92, <8 x i16>* %95, align 2
  br label %96

96:                                               ; preds = %80, %83
  %97 = icmp eq i64 %39, %1
  br i1 %97, label %109, label %98

98:                                               ; preds = %96, %35
  %99 = phi i8* [ %2, %35 ], [ %40, %96 ]
  %100 = phi i16* [ %36, %35 ], [ %41, %96 ]
  br label %101

101:                                              ; preds = %98, %101
  %102 = phi i8* [ %106, %101 ], [ %99, %98 ]
  %103 = phi i16* [ %107, %101 ], [ %100, %98 ]
  %104 = load i8, i8* %102, align 1
  %105 = zext i8 %104 to i16
  store i16 %105, i16* %103, align 2
  %106 = getelementptr inbounds i8, i8* %102, i64 1
  %107 = getelementptr inbounds i16, i16* %103, i64 1
  %108 = icmp eq i8* %106, %11
  br i1 %108, label %109, label %101, !llvm.loop !4

109:                                              ; preds = %101, %96
  %110 = phi i16* [ %41, %96 ], [ %107, %101 ]
  store i16 0, i16* %110, align 2
  br label %238

111:                                              ; preds = %8
  %112 = getelementptr inbounds i16, i16* %3, i64 %1
  %113 = shl nuw i64 %1, 1
  %114 = ashr exact i64 %113, 1
  %115 = icmp ugt i64 %114, 9223372036854775791
  br i1 %115, label %116, label %118

116:                                              ; preds = %111
  %117 = bitcast %"class.std::__1::basic_string"* %0 to %"class.std::__1::__basic_string_common"*
  tail call void @_ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__basic_string_common"* %117) #6
  unreachable

118:                                              ; preds = %111
  %119 = icmp ult i64 %114, 11
  br i1 %119, label %120, label %125

120:                                              ; preds = %118
  %121 = trunc i64 %114 to i8
  %122 = bitcast %"class.std::__1::basic_string"* %0 to %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"*
  %123 = getelementptr inbounds %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short", %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"* %122, i64 0, i32 1, i32 1
  store i8 %121, i8* %123, align 1
  %124 = bitcast %"class.std::__1::basic_string"* %0 to i16*
  br label %138

125:                                              ; preds = %118
  %126 = add nuw nsw i64 %114, 8
  %127 = and i64 %126, -8
  %128 = icmp slt i64 %127, 0
  br i1 %128, label %129, label %130

129:                                              ; preds = %125
  tail call void @abort() #6
  unreachable

130:                                              ; preds = %125
  %131 = shl i64 %127, 1
  %132 = tail call i8* @_Znwm(i64 %131) #7
  %133 = bitcast i8* %132 to i16*
  %134 = bitcast %"class.std::__1::basic_string"* %0 to i8**
  store i8* %132, i8** %134, align 8
  %135 = or i64 %127, -9223372036854775808
  %136 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 2
  store i64 %135, i64* %136, align 8
  %137 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  store i64 %114, i64* %137, align 8
  br label %138

138:                                              ; preds = %120, %130
  %139 = phi i16* [ %124, %120 ], [ %133, %130 ]
  %140 = shl nsw i64 %1, 1
  %141 = add i64 %140, -2
  %142 = lshr exact i64 %141, 1
  %143 = add nuw i64 %142, 1
  %144 = icmp ult i64 %143, 16
  br i1 %144, label %226, label %145

145:                                              ; preds = %138
  %146 = and i64 %143, -16
  %147 = getelementptr i16, i16* %3, i64 %146
  %148 = getelementptr i16, i16* %139, i64 %146
  %149 = add i64 %146, -16
  %150 = lshr exact i64 %149, 4
  %151 = add nuw nsw i64 %150, 1
  %152 = and i64 %151, 3
  %153 = icmp ult i64 %149, 48
  br i1 %153, label %205, label %154

154:                                              ; preds = %145
  %155 = sub nsw i64 %151, %152
  br label %156

156:                                              ; preds = %156, %154
  %157 = phi i64 [ 0, %154 ], [ %202, %156 ]
  %158 = phi i64 [ %155, %154 ], [ %203, %156 ]
  %159 = getelementptr i16, i16* %3, i64 %157
  %160 = getelementptr i16, i16* %139, i64 %157
  %161 = bitcast i16* %159 to <8 x i16>*
  %162 = load <8 x i16>, <8 x i16>* %161, align 2
  %163 = getelementptr i16, i16* %159, i64 8
  %164 = bitcast i16* %163 to <8 x i16>*
  %165 = load <8 x i16>, <8 x i16>* %164, align 2
  %166 = bitcast i16* %160 to <8 x i16>*
  store <8 x i16> %162, <8 x i16>* %166, align 2
  %167 = getelementptr i16, i16* %160, i64 8
  %168 = bitcast i16* %167 to <8 x i16>*
  store <8 x i16> %165, <8 x i16>* %168, align 2
  %169 = or i64 %157, 16
  %170 = getelementptr i16, i16* %3, i64 %169
  %171 = getelementptr i16, i16* %139, i64 %169
  %172 = bitcast i16* %170 to <8 x i16>*
  %173 = load <8 x i16>, <8 x i16>* %172, align 2
  %174 = getelementptr i16, i16* %170, i64 8
  %175 = bitcast i16* %174 to <8 x i16>*
  %176 = load <8 x i16>, <8 x i16>* %175, align 2
  %177 = bitcast i16* %171 to <8 x i16>*
  store <8 x i16> %173, <8 x i16>* %177, align 2
  %178 = getelementptr i16, i16* %171, i64 8
  %179 = bitcast i16* %178 to <8 x i16>*
  store <8 x i16> %176, <8 x i16>* %179, align 2
  %180 = or i64 %157, 32
  %181 = getelementptr i16, i16* %3, i64 %180
  %182 = getelementptr i16, i16* %139, i64 %180
  %183 = bitcast i16* %181 to <8 x i16>*
  %184 = load <8 x i16>, <8 x i16>* %183, align 2
  %185 = getelementptr i16, i16* %181, i64 8
  %186 = bitcast i16* %185 to <8 x i16>*
  %187 = load <8 x i16>, <8 x i16>* %186, align 2
  %188 = bitcast i16* %182 to <8 x i16>*
  store <8 x i16> %184, <8 x i16>* %188, align 2
  %189 = getelementptr i16, i16* %182, i64 8
  %190 = bitcast i16* %189 to <8 x i16>*
  store <8 x i16> %187, <8 x i16>* %190, align 2
  %191 = or i64 %157, 48
  %192 = getelementptr i16, i16* %3, i64 %191
  %193 = getelementptr i16, i16* %139, i64 %191
  %194 = bitcast i16* %192 to <8 x i16>*
  %195 = load <8 x i16>, <8 x i16>* %194, align 2
  %196 = getelementptr i16, i16* %192, i64 8
  %197 = bitcast i16* %196 to <8 x i16>*
  %198 = load <8 x i16>, <8 x i16>* %197, align 2
  %199 = bitcast i16* %193 to <8 x i16>*
  store <8 x i16> %195, <8 x i16>* %199, align 2
  %200 = getelementptr i16, i16* %193, i64 8
  %201 = bitcast i16* %200 to <8 x i16>*
  store <8 x i16> %198, <8 x i16>* %201, align 2
  %202 = add i64 %157, 64
  %203 = add i64 %158, -4
  %204 = icmp eq i64 %203, 0
  br i1 %204, label %205, label %156, !llvm.loop !6

205:                                              ; preds = %156, %145
  %206 = phi i64 [ 0, %145 ], [ %202, %156 ]
  %207 = icmp eq i64 %152, 0
  br i1 %207, label %224, label %208

208:                                              ; preds = %205, %208
  %209 = phi i64 [ %221, %208 ], [ %206, %205 ]
  %210 = phi i64 [ %222, %208 ], [ %152, %205 ]
  %211 = getelementptr i16, i16* %3, i64 %209
  %212 = getelementptr i16, i16* %139, i64 %209
  %213 = bitcast i16* %211 to <8 x i16>*
  %214 = load <8 x i16>, <8 x i16>* %213, align 2
  %215 = getelementptr i16, i16* %211, i64 8
  %216 = bitcast i16* %215 to <8 x i16>*
  %217 = load <8 x i16>, <8 x i16>* %216, align 2
  %218 = bitcast i16* %212 to <8 x i16>*
  store <8 x i16> %214, <8 x i16>* %218, align 2
  %219 = getelementptr i16, i16* %212, i64 8
  %220 = bitcast i16* %219 to <8 x i16>*
  store <8 x i16> %217, <8 x i16>* %220, align 2
  %221 = add i64 %209, 16
  %222 = add i64 %210, -1
  %223 = icmp eq i64 %222, 0
  br i1 %223, label %224, label %208, !llvm.loop !7

224:                                              ; preds = %208, %205
  %225 = icmp eq i64 %143, %146
  br i1 %225, label %236, label %226

226:                                              ; preds = %224, %138
  %227 = phi i16* [ %3, %138 ], [ %147, %224 ]
  %228 = phi i16* [ %139, %138 ], [ %148, %224 ]
  br label %229

229:                                              ; preds = %226, %229
  %230 = phi i16* [ %233, %229 ], [ %227, %226 ]
  %231 = phi i16* [ %234, %229 ], [ %228, %226 ]
  %232 = load i16, i16* %230, align 2
  store i16 %232, i16* %231, align 2
  %233 = getelementptr inbounds i16, i16* %230, i64 1
  %234 = getelementptr inbounds i16, i16* %231, i64 1
  %235 = icmp eq i16* %233, %112
  br i1 %235, label %236, label %229, !llvm.loop !9

236:                                              ; preds = %229, %224
  %237 = phi i16* [ %148, %224 ], [ %234, %229 ]
  store i16 0, i16* %237, align 2
  br label %238

238:                                              ; preds = %236, %109, %6
  ret void
}

; Function Attrs: noreturn
declare void @_ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__basic_string_common"*) local_unnamed_addr #1

; Function Attrs: noreturn nounwind
declare void @abort() local_unnamed_addr #2

; Function Attrs: nobuiltin nofree
declare noalias nonnull i8* @_Znwm(i64) local_unnamed_addr #3

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #4

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { noreturn nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nobuiltin nofree "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { argmemonly nounwind }
attributes #5 = { nounwind }
attributes #6 = { noreturn nounwind }
attributes #7 = { builtin nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = distinct !{!2, !3}
!3 = !{!"llvm.loop.isvectorized", i32 1}
!4 = distinct !{!4, !5, !3}
!5 = !{!"llvm.loop.unroll.runtime.disable"}
!6 = distinct !{!6, !3}
!7 = distinct !{!7, !8}
!8 = !{!"llvm.loop.unroll.disable"}
!9 = distinct !{!9, !5, !3}
