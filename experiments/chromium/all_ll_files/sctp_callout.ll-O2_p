; ModuleID = '../../third_party/usrsctp/usrsctplib/usrsctplib/netinet/sctp_callout.c'
source_filename = "../../third_party/usrsctp/usrsctplib/usrsctplib/netinet/sctp_callout.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.sctp_base_info = type { %struct.sctp_epinfo, %struct.sctpstat, %struct.sctp_sysctl, i8, i8, %union.pthread_mutex_t, i64, i32, i32, i32, %union.pthread_mutexattr_t, i32 (i8*, i8*, i64, i8, i8)*, void (i8*, ...)*, i32 }
%struct.sctp_epinfo = type { %struct.sctpasochead*, i64, %struct.sctppcbhead*, i64, %struct.sctppcbhead*, i64, i32, %struct.sctp_vrflist*, i64, %struct.sctp_ifnlist*, i64, %struct.sctppcbhead, %struct.sctpladdr, i64, i64, i64, i64, i64, i64, i64, i64, i64, %union.pthread_mutex_t, %union.pthread_mutex_t, %union.pthread_mutex_t, %union.pthread_mutex_t, %union.pthread_mutex_t, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, [32 x %struct.sctpvtaghead], %struct.sctp_timer, %struct.calloutlist }
%struct.sctpasochead = type { %struct.sctp_tcb* }
%struct.sctp_tcb = type { %struct.socket*, %struct.sctp_inpcb*, %struct.anon.10, %struct.anon.11, %struct.anon.12, %struct.anon.13, %struct.sctp_block_entry*, %struct.sctp_association, i32, i32, i32, i32, i16, i16, %union.pthread_mutex_t, %union.pthread_mutex_t }
%struct.socket = type { i32, i16, i16, i16, i16, i32, i8*, i32, %struct.socket*, %struct.anon, %struct.anon.0, %struct.anon.1, i16, i16, i16, i16, %union.pthread_cond_t, i16, %struct.sigio*, i64, %struct.anon.5, %struct.sockbuf, %struct.sockbuf, void (%struct.socket*, i8*, i32)*, i8*, %struct.ucred*, %struct.label*, %struct.label*, i32, i8*, %struct.so_accf* }
%struct.anon = type { %struct.socket*, %struct.socket** }
%struct.anon.0 = type { %struct.socket*, %struct.socket** }
%struct.anon.1 = type { %struct.socket*, %struct.socket** }
%union.pthread_cond_t = type { %struct.__pthread_cond_s }
%struct.__pthread_cond_s = type { %union.anon, %union.anon.3, [2 x i32], [2 x i32], i32, i32, [2 x i32] }
%union.anon = type { i64 }
%union.anon.3 = type { i64 }
%struct.sigio = type opaque
%struct.anon.5 = type { %struct.aiocblist*, %struct.aiocblist** }
%struct.aiocblist = type opaque
%struct.sockbuf = type { %union.pthread_cond_t, %union.pthread_mutex_t, i16, %struct.mbuf*, %struct.mbuf*, %struct.mbuf*, %struct.mbuf*, i32, i32, i32, i32, i32, i32, i32, i32, i16 }
%struct.mbuf = type { %struct.m_hdr, %union.anon.6 }
%struct.m_hdr = type { %struct.mbuf*, %struct.mbuf*, i8*, i32, i32, i16, [6 x i8] }
%union.anon.6 = type { %struct.anon.7 }
%struct.anon.7 = type { %struct.pkthdr, %union.anon.9 }
%struct.pkthdr = type { %struct.ifnet*, i8*, i32, i32, i32, i16, i16, %struct.packet_tags }
%struct.ifnet = type opaque
%struct.packet_tags = type { %struct.m_tag* }
%struct.m_tag = type { %struct.anon.8, i16, i16, i32, void (%struct.m_tag*)* }
%struct.anon.8 = type { %struct.m_tag* }
%union.anon.9 = type { %struct.m_ext, [128 x i8] }
%struct.m_ext = type { i8*, void (i8*, i8*)*, i8*, i32, i32*, i32 }
%struct.ucred = type { i32, i32, i32 }
%struct.label = type opaque
%struct.so_accf = type { %struct.accept_filter*, i8*, i8* }
%struct.accept_filter = type opaque
%struct.sctp_inpcb = type { %union.anon.40, %struct.sctp_readhead, %struct.anon.49, %struct.anon.50, i32, %struct.sctpladdr, %struct.sctp_laddr*, %struct.socket*, i64, i32, i32, %struct.sctp_pcb, %struct.sctpasochead*, i64, %struct.sctpasochead, %struct.sctp_iterator*, i32, i32, i32, i32, i8, i32, i8, i8, i8, i8, i8, i8, i8, i8, %struct.sctp_nonpad_sndrcvinfo, %struct.mbuf*, %struct.mbuf*, %struct.mbuf*, %union.pthread_mutex_t, %union.pthread_mutex_t, %union.pthread_mutex_t, i32, i32, i16, i32, i32, i32, i32, %struct.sctpasochead*, i64, i32, i8*, i32 (%struct.socket*, %union.sctp_sockstore*, i8*, i64, %struct.sctp_rcvinfo*, i32, i8*)*, i32, i32 (%struct.socket*, i32, i8*)* }
%union.anon.40 = type { %struct.inpcb, [24 x i8] }
%struct.inpcb = type { %struct.anon.41, %struct.anon.42, i8*, %struct.inpcbinfo*, %struct.socket*, i32, i32, i8, i8, i8, i8, i32, [2 x i8*], %struct.in_conninfo, %struct.label*, %struct.inpcbpolicy*, %struct.anon.46, %struct.anon.47, %struct.anon.48, %struct.inpcbport*, %struct.mtx }
%struct.anon.41 = type { %struct.inpcb*, %struct.inpcb** }
%struct.anon.42 = type { %struct.inpcb*, %struct.inpcb** }
%struct.inpcbinfo = type { %struct.inpcbhead*, i32, %struct.inpcbhead*, i64, %struct.inpcbporthead*, i64, i16, i16, i16, %struct.uma_zone*, %struct.mtx, [2 x i8*] }
%struct.inpcbhead = type { %struct.inpcb* }
%struct.inpcbporthead = type { %struct.inpcbport* }
%struct.uma_zone = type opaque
%struct.in_conninfo = type { i8, i8, i16, %struct.in_endpoints }
%struct.in_endpoints = type { i16, i16, %union.anon.44, %union.anon.45 }
%union.anon.44 = type { %struct.in_addr_4in6 }
%struct.in_addr_4in6 = type { [3 x i32], %struct.in_addr }
%struct.in_addr = type { i32 }
%union.anon.45 = type { %struct.in_addr_4in6 }
%struct.inpcbpolicy = type opaque
%struct.anon.46 = type { i8, %struct.mbuf*, %struct.ip_moptions* }
%struct.ip_moptions = type opaque
%struct.anon.47 = type { %struct.mbuf*, %struct.ip6_pktopts*, %struct.icmp6_filter*, i32, i16 }
%struct.ip6_pktopts = type opaque
%struct.icmp6_filter = type opaque
%struct.anon.48 = type { %struct.inpcb*, %struct.inpcb** }
%struct.inpcbport = type { %struct.anon.43, %struct.inpcbhead, i16 }
%struct.anon.43 = type { %struct.inpcbport*, %struct.inpcbport** }
%struct.mtx = type { i32 }
%struct.sctp_readhead = type { %struct.sctp_queued_to_read*, %struct.sctp_queued_to_read** }
%struct.sctp_queued_to_read = type { i16, i16, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, %struct.sctp_nets*, %struct.mbuf*, %struct.mbuf*, %struct.mbuf*, %struct.sctp_tcb*, %struct.anon.35, %struct.anon.36, %struct.sctpchunk_listhead, i16, i16, i8, i8, i8, i8, i8, i8, i8, i8, i8 }
%struct.sctp_nets = type { %struct.anon.23, %struct.sctp_timer, %struct.sctp_timer, %struct.sctp_net_route, i32, i32, i32, i32, i32, i32, i32, i32, i64, i32, %struct.sctp_timer, %struct.timeval, %union.cc_control_data, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i8, %struct.timeval, i32, i32, i32, i16, i16, i16, i16, i16, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8 }
%struct.anon.23 = type { %struct.sctp_nets*, %struct.sctp_nets** }
%struct.sctp_net_route = type { %struct.sctp_rtentry*, %union.sctp_sockstore, %struct.sctp_ifa* }
%struct.sctp_rtentry = type { %struct.ifnet*, %struct.ifaddr*, %struct.sctp_rt_metrics_lite, i64, %struct.mtx }
%struct.ifaddr = type { %struct.sockaddr, %union.anon.24, %struct.iface*, %struct.ifaddr* }
%struct.sockaddr = type { i16, [14 x i8] }
%union.anon.24 = type { %struct.sockaddr }
%struct.iface = type opaque
%struct.sctp_rt_metrics_lite = type { i32 }
%union.sctp_sockstore = type { %struct.sockaddr_conn, [16 x i8] }
%struct.sockaddr_conn = type { i16, i16, i8* }
%struct.sctp_ifa = type { %struct.anon.15, %struct.anon.16, %struct.sctp_ifn*, i8*, %union.sctp_sockstore, i32, i32, i32, i32, i8, i8, i8, i8 }
%struct.anon.15 = type { %struct.sctp_ifa*, %struct.sctp_ifa** }
%struct.anon.16 = type { %struct.sctp_ifa*, %struct.sctp_ifa** }
%struct.sctp_ifn = type { %struct.sctp_ifalist, %struct.sctp_vrf*, %struct.anon.18, %struct.anon.19, i8*, i32, i32, i32, i32, i32, i32, i32, i32, [16 x i8] }
%struct.sctp_ifalist = type { %struct.sctp_ifa* }
%struct.sctp_vrf = type { %struct.anon.17, %struct.sctp_ifalist*, %struct.sctp_ifnlist, i32, i32, i32, i32, i64, i32 }
%struct.anon.17 = type { %struct.sctp_vrf*, %struct.sctp_vrf** }
%struct.sctp_ifnlist = type { %struct.sctp_ifn* }
%struct.anon.18 = type { %struct.sctp_ifn*, %struct.sctp_ifn** }
%struct.anon.19 = type { %struct.sctp_ifn*, %struct.sctp_ifn** }
%union.cc_control_data = type { %struct.rtcc_cc }
%struct.rtcc_cc = type { %struct.timeval, i64, i64, i64, i64, i64, i64, i32, i32, i16, i16, i8, i8, i8, i8, i8, i8 }
%struct.timeval = type { i64, i64 }
%struct.anon.35 = type { %struct.sctp_queued_to_read*, %struct.sctp_queued_to_read** }
%struct.anon.36 = type { %struct.sctp_queued_to_read*, %struct.sctp_queued_to_read** }
%struct.sctpchunk_listhead = type { %struct.sctp_tmit_chunk*, %struct.sctp_tmit_chunk** }
%struct.sctp_tmit_chunk = type { %union.anon.25, %struct.sctp_association*, %struct.timeval, %struct.mbuf*, %struct.mbuf*, %struct.sctp_nets*, %struct.anon.26, i32, i16, i16, i16, i16, i16, i16, i8, i8, i8, i8, i8, i8, i8 }
%union.anon.25 = type { %struct.sctp_data_chunkrec }
%struct.sctp_data_chunkrec = type { i32, i32, i16, i32, i32, i32, i32, %struct.timeval, i32, i8, i8, i8, i8, i8 }
%struct.anon.26 = type { %struct.sctp_tmit_chunk*, %struct.sctp_tmit_chunk** }
%struct.anon.49 = type { %struct.sctp_inpcb*, %struct.sctp_inpcb** }
%struct.anon.50 = type { %struct.sctp_inpcb*, %struct.sctp_inpcb** }
%struct.sctp_laddr = type { %struct.anon.22, %struct.sctp_ifa*, i32, %struct.timeval }
%struct.anon.22 = type { %struct.sctp_laddr*, %struct.sctp_laddr** }
%struct.sctp_pcb = type { i32, [2 x [8 x i32]], i32, [7 x i32], i32, i32, i32, i32, i32, i32, i32, i32, i32, %struct.sctp_keyhead, %struct.sctp_auth_chklist*, %struct.sctp_hmaclist*, i16, i32, i16, i16, i16, i16, i16, i16, i32, [20 x i8], [20 x i8], %struct.sctp_timer, i32, i32, i32, i32, i8, i32, i32, i32, i8, i8, i8, i16 }
%struct.sctp_keyhead = type { %struct.sctp_shared_key* }
%struct.sctp_shared_key = type { %struct.anon.38, %struct.sctp_key*, i32, i16, i8 }
%struct.anon.38 = type { %struct.sctp_shared_key*, %struct.sctp_shared_key** }
%struct.sctp_key = type { i32, [0 x i8] }
%struct.sctp_auth_chklist = type { [256 x i8], i8 }
%struct.sctp_hmaclist = type { i16, i16, [0 x i16] }
%struct.sctp_iterator = type { %struct.anon.33, %struct.sctp_timer, %struct.sctp_inpcb*, %struct.sctp_tcb*, %struct.sctp_inpcb*, void (%struct.sctp_inpcb*, %struct.sctp_tcb*, i8*, i32)*, i32 (%struct.sctp_inpcb*, i8*, i32)*, i32 (%struct.sctp_inpcb*, i8*, i32)*, void (i8*, i32)*, i8*, i32, i32, i32, i32, i32, i8, i8 }
%struct.anon.33 = type { %struct.sctp_iterator*, %struct.sctp_iterator** }
%struct.sctp_nonpad_sndrcvinfo = type { i16, i16, i16, i32, i32, i32, i32, i32, i32, i16, i16 }
%struct.sctp_rcvinfo = type { i16, i16, i16, i32, i32, i32, i32, i32 }
%struct.anon.10 = type { %struct.sctp_tcb*, %struct.sctp_tcb** }
%struct.anon.11 = type { %struct.sctp_tcb*, %struct.sctp_tcb** }
%struct.anon.12 = type { %struct.sctp_tcb*, %struct.sctp_tcb** }
%struct.anon.13 = type { %struct.sctp_tcb*, %struct.sctp_tcb** }
%struct.sctp_block_entry = type { i32 }
%struct.sctp_association = type { i32, %struct.sctp_asconf_addrhead, %struct.timeval, %struct.timeval, %struct.timeval, %struct.timeval, %struct.sctp_nonpad_sndrcvinfo, %struct.sctp_timer, %struct.sctp_timer, %struct.sctp_timer, %struct.sctp_timer, %struct.sctp_timer, %struct.sctp_timer, %struct.sctpladdr, %struct.sctp_ifa*, %struct.sctp_nets*, %struct.sctpnetlisthead, %struct.sctpchunk_listhead, %struct.sctpchunk_listhead, %struct.sctpchunk_listhead, %struct.sctpchunk_listhead, %struct.sctpchunk_listhead, %struct.scheduling_data, %struct.sctp_iterator*, %struct.sctp_asconf_ackhead, %struct.sctp_tmit_chunk*, %struct.sctp_laddr*, %struct.sctp_stream_in*, %struct.sctp_stream_out*, i8*, %struct.sctp_nets*, %struct.sctp_nets*, %struct.sctp_nets*, %struct.sctp_nets*, %struct.sctp_nets*, %struct.sctp_resethead, %struct.sctp_readhead, %struct.sctp_cc_functions, i32, %struct.sctp_ss_functions, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i8*, i32, i32, i32, i32, %struct.sctp_queued_to_read*, i32, i32, i32, [2 x i32], [2 x i32], [2 x i32], i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, [20 x i32], i32, i32, i32, i32, %struct.sctp_auth_chklist*, %struct.sctp_auth_chklist*, %struct.sctp_hmaclist*, %struct.sctp_hmaclist*, %struct.sctp_keyhead, %struct.sctp_authinformation, i32, i32, i32, i32, i16, i16, i16, i16, i16, i16, i16, i16, i16, i16, i16, i16, i16, i16, i16, i16, i16, i16, i16, i16, i8, i8, i8, i32, i32, i8, i8, i8, [4 x i8], i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, %struct.sctp_scoping, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, [8 x i8], i8, i8, i64, i32, i16, i32, i32, i32, i32, i32, i32, i32, i32, %struct.timeval, %struct.timeval, [4 x i64], [4 x i64] }
%struct.sctp_asconf_addrhead = type { %struct.sctp_asconf_addr*, %struct.sctp_asconf_addr** }
%struct.sctp_asconf_addr = type { %struct.anon.14, %struct.sctp_asconf_addr_param, %struct.sctp_ifa*, i8, i8 }
%struct.anon.14 = type { %struct.sctp_asconf_addr*, %struct.sctp_asconf_addr** }
%struct.sctp_asconf_addr_param = type { %struct.sctp_asconf_paramhdr, %struct.sctp_ipv6addr_param }
%struct.sctp_asconf_paramhdr = type { %struct.sctp_paramhdr, i32 }
%struct.sctp_paramhdr = type { i16, i16 }
%struct.sctp_ipv6addr_param = type { %struct.sctp_paramhdr, [16 x i8] }
%struct.sctpnetlisthead = type { %struct.sctp_nets*, %struct.sctp_nets** }
%struct.scheduling_data = type { %struct.sctp_stream_out*, %struct.sctp_stream_out*, %union.anon.32 }
%union.anon.32 = type { %struct.sctpwheel_listhead }
%struct.sctpwheel_listhead = type { %struct.sctp_stream_out*, %struct.sctp_stream_out** }
%struct.sctp_asconf_ackhead = type { %struct.sctp_asconf_ack*, %struct.sctp_asconf_ack** }
%struct.sctp_asconf_ack = type { %struct.anon.34, i32, %struct.sctp_nets*, %struct.mbuf*, i16 }
%struct.anon.34 = type { %struct.sctp_asconf_ack*, %struct.sctp_asconf_ack** }
%struct.sctp_stream_in = type { %struct.sctp_readhead, %struct.sctp_readhead, i32, i16, i8, i8 }
%struct.sctp_stream_out = type { %struct.sctp_streamhead, %union.scheduling_parameters, i32, [1 x i32], [1 x i32], i32, i32, i16, i8, i8 }
%struct.sctp_streamhead = type { %struct.sctp_stream_queue_pending*, %struct.sctp_stream_queue_pending** }
%struct.sctp_stream_queue_pending = type { %struct.mbuf*, %struct.mbuf*, %struct.timeval, %struct.sctp_nets*, %struct.anon.27, %struct.anon.28, i32, i32, i32, i32, i32, i16, i16, i16, i16, i8, i8, i8, i8, i8, i8, i8 }
%struct.anon.27 = type { %struct.sctp_stream_queue_pending*, %struct.sctp_stream_queue_pending** }
%struct.anon.28 = type { %struct.sctp_stream_queue_pending*, %struct.sctp_stream_queue_pending** }
%union.scheduling_parameters = type { %struct.ss_prio }
%struct.ss_prio = type { %struct.anon.30, i16 }
%struct.anon.30 = type { %struct.sctp_stream_out*, %struct.sctp_stream_out** }
%struct.sctp_resethead = type { %struct.sctp_stream_reset_list*, %struct.sctp_stream_reset_list** }
%struct.sctp_stream_reset_list = type { %struct.anon.37, i32, i32, i32, [0 x i16] }
%struct.anon.37 = type { %struct.sctp_stream_reset_list*, %struct.sctp_stream_reset_list** }
%struct.sctp_cc_functions = type { void (%struct.sctp_tcb*, %struct.sctp_nets*)*, void (%struct.sctp_tcb*, %struct.sctp_association*, i32, i32, i32)*, void (%struct.sctp_tcb*, %struct.sctp_nets*)*, void (%struct.sctp_tcb*, %struct.sctp_association*)*, void (%struct.sctp_tcb*, %struct.sctp_nets*)*, void (%struct.sctp_tcb*, %struct.sctp_nets*, i32, i32)*, void (%struct.sctp_tcb*, %struct.sctp_nets*, %struct.sctp_pktdrop_chunk*, i32*, i32*)*, void (%struct.sctp_tcb*, %struct.sctp_nets*, i32)*, void (%struct.sctp_tcb*, %struct.sctp_nets*)*, void (%struct.sctp_nets*, %struct.sctp_tmit_chunk*)*, void (%struct.sctp_tcb*, %struct.sctp_nets*)*, void (%struct.sctp_tcb*, %struct.sctp_nets*)*, i32 (%struct.sctp_tcb*, i32, %struct.sctp_cc_option*)*, void (%struct.sctp_tcb*, %struct.sctp_nets*, %struct.timeval*)* }
%struct.sctp_pktdrop_chunk = type { %struct.sctp_chunkhdr, i32, i32, i16, i16, [0 x i8] }
%struct.sctp_chunkhdr = type { i8, i8, i16 }
%struct.sctp_cc_option = type { i32, %struct.sctp_assoc_value }
%struct.sctp_assoc_value = type { i32, i32 }
%struct.sctp_ss_functions = type { void (%struct.sctp_tcb*, %struct.sctp_association*, i32)*, void (%struct.sctp_tcb*, %struct.sctp_association*, i32, i32)*, void (%struct.sctp_tcb*, %struct.sctp_stream_out*, %struct.sctp_stream_out*)*, void (%struct.sctp_tcb*, %struct.sctp_association*, %struct.sctp_stream_out*, %struct.sctp_stream_queue_pending*, i32)*, i32 (%struct.sctp_tcb*, %struct.sctp_association*)*, void (%struct.sctp_tcb*, %struct.sctp_association*, %struct.sctp_stream_out*, %struct.sctp_stream_queue_pending*, i32)*, %struct.sctp_stream_out* (%struct.sctp_tcb*, %struct.sctp_nets*, %struct.sctp_association*)*, void (%struct.sctp_tcb*, %struct.sctp_nets*, %struct.sctp_association*, %struct.sctp_stream_out*, i32)*, void (%struct.sctp_tcb*, %struct.sctp_nets*, %struct.sctp_association*)*, i32 (%struct.sctp_tcb*, %struct.sctp_association*, %struct.sctp_stream_out*, i16*)*, i32 (%struct.sctp_tcb*, %struct.sctp_association*, %struct.sctp_stream_out*, i16)*, i32 (%struct.sctp_tcb*, %struct.sctp_association*)* }
%struct.sctp_authinformation = type { %struct.sctp_key*, i32, %struct.sctp_key*, %struct.sctp_key*, %struct.sctp_key*, i16, i16, i16 }
%struct.sctp_scoping = type { i8, i8, i8, i8, i8, i8, i8 }
%struct.sctp_vrflist = type { %struct.sctp_vrf* }
%struct.sctppcbhead = type { %struct.sctp_inpcb* }
%struct.sctpladdr = type { %struct.sctp_laddr* }
%struct.sctpvtaghead = type { %struct.sctp_tagblock* }
%struct.sctp_tagblock = type { %struct.anon.39, [15 x %struct.sctp_timewait] }
%struct.anon.39 = type { %struct.sctp_tagblock*, %struct.sctp_tagblock** }
%struct.sctp_timewait = type { i32, i32, i16, i16 }
%struct.sctp_timer = type { %struct.sctp_callout, i32, i8*, i8*, i8*, i8*, i32, i32 }
%struct.sctp_callout = type { %struct.anon.21, i32, i8*, void (i8*)*, i32 }
%struct.anon.21 = type { %struct.sctp_callout*, %struct.sctp_callout** }
%struct.calloutlist = type { %struct.sctp_callout*, %struct.sctp_callout** }
%struct.sctpstat = type { %struct.sctp_timeval, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, [11 x i32], i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, [31 x i32] }
%struct.sctp_timeval = type { i32, i32 }
%struct.sctp_sysctl = type { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }
%union.pthread_mutex_t = type { %struct.__pthread_mutex_s }
%struct.__pthread_mutex_s = type { i32, i32, i32, i32, i32, i16, i16, %struct.__pthread_internal_list }
%struct.__pthread_internal_list = type { %struct.__pthread_internal_list*, %struct.__pthread_internal_list* }
%union.pthread_mutexattr_t = type { i32 }
%struct.timespec = type { i64, i64 }

@system_base_info = external global %struct.sctp_base_info, align 8
@ticks = internal unnamed_addr global i32 0, align 4
@sctp_os_timer_next = internal unnamed_addr global %struct.sctp_callout* null, align 8
@.str = private unnamed_addr constant [11 x i8] c"SCTP timer\00", align 1
@.str.1 = private unnamed_addr constant [52 x i8] c"ERROR; return code from sctp_thread_create() is %d\0A\00", align 1

; Function Attrs: nounwind ssp uwtable
define hidden i32 @sctp_get_tick_count() local_unnamed_addr #0 {
  %1 = tail call i32 @pthread_mutex_lock(%union.pthread_mutex_t* getelementptr inbounds (%struct.sctp_base_info, %struct.sctp_base_info* @system_base_info, i64 0, i32 5)) #4
  %2 = load i32, i32* @ticks, align 4
  %3 = tail call i32 @pthread_mutex_unlock(%union.pthread_mutex_t* getelementptr inbounds (%struct.sctp_base_info, %struct.sctp_base_info* @system_base_info, i64 0, i32 5)) #4
  ret i32 %2
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: nounwind
declare i32 @pthread_mutex_lock(%union.pthread_mutex_t*) local_unnamed_addr #2

; Function Attrs: nounwind
declare i32 @pthread_mutex_unlock(%union.pthread_mutex_t*) local_unnamed_addr #2

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: nounwind ssp uwtable
define hidden void @sctp_os_timer_init(%struct.sctp_callout* nocapture) local_unnamed_addr #0 {
  %2 = bitcast %struct.sctp_callout* %0 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %2, i8 0, i64 48, i1 false)
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

; Function Attrs: nounwind ssp uwtable
define hidden i32 @sctp_os_timer_start(%struct.sctp_callout*, i32, void (i8*)*, i8*) local_unnamed_addr #0 {
  %5 = icmp eq %struct.sctp_callout* %0, null
  %6 = icmp eq void (i8*)* %2, null
  %7 = or i1 %5, %6
  br i1 %7, label %49, label %8

8:                                                ; preds = %4
  %9 = tail call i32 @pthread_mutex_lock(%union.pthread_mutex_t* getelementptr inbounds (%struct.sctp_base_info, %struct.sctp_base_info* @system_base_info, i64 0, i32 5)) #4
  %10 = getelementptr inbounds %struct.sctp_callout, %struct.sctp_callout* %0, i64 0, i32 4
  %11 = load i32, i32* %10, align 8
  %12 = and i32 %11, 4
  %13 = icmp eq i32 %12, 0
  br i1 %13, label %34, label %14

14:                                               ; preds = %8
  %15 = load %struct.sctp_callout*, %struct.sctp_callout** @sctp_os_timer_next, align 8
  %16 = icmp eq %struct.sctp_callout* %15, %0
  br i1 %16, label %17, label %20

17:                                               ; preds = %14
  %18 = bitcast %struct.sctp_callout* %0 to i64*
  %19 = load i64, i64* %18, align 8
  store i64 %19, i64* bitcast (%struct.sctp_callout** @sctp_os_timer_next to i64*), align 8
  br label %20

20:                                               ; preds = %14, %17
  %21 = getelementptr inbounds %struct.sctp_callout, %struct.sctp_callout* %0, i64 0, i32 0, i32 0
  %22 = load %struct.sctp_callout*, %struct.sctp_callout** %21, align 8
  %23 = icmp eq %struct.sctp_callout* %22, null
  %24 = getelementptr inbounds %struct.sctp_callout, %struct.sctp_callout* %0, i64 0, i32 0, i32 1
  %25 = bitcast %struct.sctp_callout*** %24 to i64*
  %26 = load i64, i64* %25, align 8
  %27 = getelementptr inbounds %struct.sctp_callout, %struct.sctp_callout* %22, i64 0, i32 0, i32 1
  %28 = bitcast %struct.sctp_callout*** %27 to i64*
  %29 = select i1 %23, i64* bitcast (%struct.sctp_callout*** getelementptr inbounds (%struct.sctp_base_info, %struct.sctp_base_info* @system_base_info, i64 0, i32 0, i32 41, i32 1) to i64*), i64* %28
  store i64 %26, i64* %29, align 8
  %30 = bitcast %struct.sctp_callout* %0 to i64*
  %31 = load i64, i64* %30, align 8
  %32 = bitcast %struct.sctp_callout*** %24 to i64**
  %33 = load i64*, i64** %32, align 8
  store i64 %31, i64* %33, align 8
  br label %34

34:                                               ; preds = %8, %20
  %35 = phi i32 [ 1, %20 ], [ 0, %8 ]
  %36 = icmp eq i32 %1, 0
  %37 = select i1 %36, i32 1, i32 %1
  %38 = getelementptr inbounds %struct.sctp_callout, %struct.sctp_callout* %0, i64 0, i32 2
  store i8* %3, i8** %38, align 8
  store i32 6, i32* %10, align 8
  %39 = getelementptr inbounds %struct.sctp_callout, %struct.sctp_callout* %0, i64 0, i32 3
  store void (i8*)* %2, void (i8*)** %39, align 8
  %40 = load i32, i32* @ticks, align 4
  %41 = add i32 %40, %37
  %42 = getelementptr inbounds %struct.sctp_callout, %struct.sctp_callout* %0, i64 0, i32 1
  store i32 %41, i32* %42, align 8
  %43 = getelementptr inbounds %struct.sctp_callout, %struct.sctp_callout* %0, i64 0, i32 0, i32 0
  store %struct.sctp_callout* null, %struct.sctp_callout** %43, align 8
  %44 = load i64, i64* bitcast (%struct.sctp_callout*** getelementptr inbounds (%struct.sctp_base_info, %struct.sctp_base_info* @system_base_info, i64 0, i32 0, i32 41, i32 1) to i64*), align 8
  %45 = getelementptr inbounds %struct.sctp_callout, %struct.sctp_callout* %0, i64 0, i32 0, i32 1
  %46 = bitcast %struct.sctp_callout*** %45 to i64*
  store i64 %44, i64* %46, align 8
  %47 = load %struct.sctp_callout**, %struct.sctp_callout*** getelementptr inbounds (%struct.sctp_base_info, %struct.sctp_base_info* @system_base_info, i64 0, i32 0, i32 41, i32 1), align 8
  store %struct.sctp_callout* %0, %struct.sctp_callout** %47, align 8
  store %struct.sctp_callout** %43, %struct.sctp_callout*** getelementptr inbounds (%struct.sctp_base_info, %struct.sctp_base_info* @system_base_info, i64 0, i32 0, i32 41, i32 1), align 8
  %48 = tail call i32 @pthread_mutex_unlock(%union.pthread_mutex_t* getelementptr inbounds (%struct.sctp_base_info, %struct.sctp_base_info* @system_base_info, i64 0, i32 5)) #4
  br label %49

49:                                               ; preds = %4, %34
  %50 = phi i32 [ %35, %34 ], [ 0, %4 ]
  ret i32 %50
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @sctp_os_timer_stop(%struct.sctp_callout* nocapture) local_unnamed_addr #0 {
  %2 = tail call i32 @pthread_mutex_lock(%union.pthread_mutex_t* getelementptr inbounds (%struct.sctp_base_info, %struct.sctp_base_info* @system_base_info, i64 0, i32 5)) #4
  %3 = getelementptr inbounds %struct.sctp_callout, %struct.sctp_callout* %0, i64 0, i32 4
  %4 = load i32, i32* %3, align 8
  %5 = and i32 %4, 4
  %6 = icmp eq i32 %5, 0
  br i1 %6, label %7, label %9

7:                                                ; preds = %1
  %8 = and i32 %4, -3
  store i32 %8, i32* %3, align 8
  br label %30

9:                                                ; preds = %1
  %10 = and i32 %4, -7
  store i32 %10, i32* %3, align 8
  %11 = load %struct.sctp_callout*, %struct.sctp_callout** @sctp_os_timer_next, align 8
  %12 = icmp eq %struct.sctp_callout* %11, %0
  br i1 %12, label %13, label %16

13:                                               ; preds = %9
  %14 = bitcast %struct.sctp_callout* %0 to i64*
  %15 = load i64, i64* %14, align 8
  store i64 %15, i64* bitcast (%struct.sctp_callout** @sctp_os_timer_next to i64*), align 8
  br label %16

16:                                               ; preds = %9, %13
  %17 = getelementptr inbounds %struct.sctp_callout, %struct.sctp_callout* %0, i64 0, i32 0, i32 0
  %18 = load %struct.sctp_callout*, %struct.sctp_callout** %17, align 8
  %19 = icmp eq %struct.sctp_callout* %18, null
  %20 = getelementptr inbounds %struct.sctp_callout, %struct.sctp_callout* %0, i64 0, i32 0, i32 1
  %21 = bitcast %struct.sctp_callout*** %20 to i64*
  %22 = load i64, i64* %21, align 8
  %23 = getelementptr inbounds %struct.sctp_callout, %struct.sctp_callout* %18, i64 0, i32 0, i32 1
  %24 = bitcast %struct.sctp_callout*** %23 to i64*
  %25 = select i1 %19, i64* bitcast (%struct.sctp_callout*** getelementptr inbounds (%struct.sctp_base_info, %struct.sctp_base_info* @system_base_info, i64 0, i32 0, i32 41, i32 1) to i64*), i64* %24
  store i64 %22, i64* %25, align 8
  %26 = bitcast %struct.sctp_callout* %0 to i64*
  %27 = load i64, i64* %26, align 8
  %28 = bitcast %struct.sctp_callout*** %20 to i64**
  %29 = load i64*, i64** %28, align 8
  store i64 %27, i64* %29, align 8
  br label %30

30:                                               ; preds = %16, %7
  %31 = phi i32 [ 1, %16 ], [ 0, %7 ]
  %32 = tail call i32 @pthread_mutex_unlock(%union.pthread_mutex_t* getelementptr inbounds (%struct.sctp_base_info, %struct.sctp_base_info* @system_base_info, i64 0, i32 5)) #4
  ret i32 %31
}

; Function Attrs: nounwind ssp uwtable
define hidden void @sctp_handle_tick(i32) local_unnamed_addr #0 {
  %2 = tail call i32 @pthread_mutex_lock(%union.pthread_mutex_t* getelementptr inbounds (%struct.sctp_base_info, %struct.sctp_base_info* @system_base_info, i64 0, i32 5)) #4
  %3 = load i32, i32* @ticks, align 4
  %4 = add i32 %3, %0
  store i32 %4, i32* @ticks, align 4
  %5 = load %struct.sctp_callout*, %struct.sctp_callout** getelementptr inbounds (%struct.sctp_base_info, %struct.sctp_base_info* @system_base_info, i64 0, i32 0, i32 41, i32 0), align 8
  %6 = icmp eq %struct.sctp_callout* %5, null
  br i1 %6, label %55, label %7

7:                                                ; preds = %1, %53
  %8 = phi i32 [ %54, %53 ], [ %4, %1 ]
  %9 = phi %struct.sctp_callout* [ %51, %53 ], [ %5, %1 ]
  %10 = getelementptr inbounds %struct.sctp_callout, %struct.sctp_callout* %9, i64 0, i32 1
  %11 = load i32, i32* %10, align 8
  %12 = icmp ugt i32 %11, %8
  %13 = sub i32 %11, %8
  %14 = icmp ugt i32 %13, -2147483648
  %15 = and i1 %12, %14
  br i1 %15, label %23, label %16

16:                                               ; preds = %7
  %17 = icmp ugt i32 %8, %11
  %18 = sub i32 %8, %11
  %19 = icmp sgt i32 %18, -1
  %20 = and i1 %17, %19
  %21 = icmp eq i32 %8, %11
  %22 = or i1 %21, %20
  br i1 %22, label %23, label %47

23:                                               ; preds = %16, %7
  %24 = getelementptr inbounds %struct.sctp_callout, %struct.sctp_callout* %9, i64 0, i32 0, i32 0
  %25 = bitcast %struct.sctp_callout* %9 to i64*
  %26 = load i64, i64* %25, align 8
  store i64 %26, i64* bitcast (%struct.sctp_callout** @sctp_os_timer_next to i64*), align 8
  %27 = load %struct.sctp_callout*, %struct.sctp_callout** %24, align 8
  %28 = icmp eq %struct.sctp_callout* %27, null
  %29 = getelementptr inbounds %struct.sctp_callout, %struct.sctp_callout* %9, i64 0, i32 0, i32 1
  %30 = bitcast %struct.sctp_callout*** %29 to i64*
  %31 = load i64, i64* %30, align 8
  %32 = getelementptr inbounds %struct.sctp_callout, %struct.sctp_callout* %27, i64 0, i32 0, i32 1
  %33 = bitcast %struct.sctp_callout*** %32 to i64*
  %34 = select i1 %28, i64* bitcast (%struct.sctp_callout*** getelementptr inbounds (%struct.sctp_base_info, %struct.sctp_base_info* @system_base_info, i64 0, i32 0, i32 41, i32 1) to i64*), i64* %33
  store i64 %31, i64* %34, align 8
  %35 = load i64, i64* %25, align 8
  %36 = bitcast %struct.sctp_callout*** %29 to i64**
  %37 = load i64*, i64** %36, align 8
  store i64 %35, i64* %37, align 8
  %38 = getelementptr inbounds %struct.sctp_callout, %struct.sctp_callout* %9, i64 0, i32 3
  %39 = load void (i8*)*, void (i8*)** %38, align 8
  %40 = getelementptr inbounds %struct.sctp_callout, %struct.sctp_callout* %9, i64 0, i32 2
  %41 = load i8*, i8** %40, align 8
  %42 = getelementptr inbounds %struct.sctp_callout, %struct.sctp_callout* %9, i64 0, i32 4
  %43 = load i32, i32* %42, align 8
  %44 = and i32 %43, -5
  store i32 %44, i32* %42, align 8
  %45 = tail call i32 @pthread_mutex_unlock(%union.pthread_mutex_t* getelementptr inbounds (%struct.sctp_base_info, %struct.sctp_base_info* @system_base_info, i64 0, i32 5)) #4
  tail call void %39(i8* %41) #4
  %46 = tail call i32 @pthread_mutex_lock(%union.pthread_mutex_t* getelementptr inbounds (%struct.sctp_base_info, %struct.sctp_base_info* @system_base_info, i64 0, i32 5)) #4
  br label %49

47:                                               ; preds = %16
  %48 = getelementptr inbounds %struct.sctp_callout, %struct.sctp_callout* %9, i64 0, i32 0, i32 0
  br label %49

49:                                               ; preds = %47, %23
  %50 = phi %struct.sctp_callout** [ @sctp_os_timer_next, %23 ], [ %48, %47 ]
  %51 = load %struct.sctp_callout*, %struct.sctp_callout** %50, align 8
  %52 = icmp eq %struct.sctp_callout* %51, null
  br i1 %52, label %55, label %53

53:                                               ; preds = %49
  %54 = load i32, i32* @ticks, align 4
  br label %7

55:                                               ; preds = %49, %1
  store %struct.sctp_callout* null, %struct.sctp_callout** @sctp_os_timer_next, align 8
  %56 = tail call i32 @pthread_mutex_unlock(%union.pthread_mutex_t* getelementptr inbounds (%struct.sctp_base_info, %struct.sctp_base_info* @system_base_info, i64 0, i32 5)) #4
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden noalias i8* @user_sctp_timer_iterate(i8* nocapture readnone) #0 {
  %2 = alloca %struct.timespec, align 8
  %3 = alloca <2 x i64>, align 16
  %4 = bitcast <2 x i64>* %3 to %struct.timespec*
  tail call void @sctp_userspace_set_threadname(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str, i64 0, i64 0)) #4
  %5 = bitcast %struct.timespec* %2 to i8*
  %6 = bitcast <2 x i64>* %3 to i8*
  %7 = bitcast %struct.timespec* %2 to i8*
  br label %8

8:                                                ; preds = %15, %1
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %5) #4
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %7, i8 -86, i64 16, i1 false)
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %6) #4
  store <2 x i64> <i64 0, i64 10000000>, <2 x i64>* %3, align 16
  br label %9

9:                                                ; preds = %9, %8
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %5, i8* nonnull align 16 %6, i64 16, i1 false)
  %10 = call i32 @nanosleep(%struct.timespec* nonnull %2, %struct.timespec* nonnull %4) #4
  %11 = icmp eq i32 %10, -1
  br i1 %11, label %9, label %12

12:                                               ; preds = %9
  %13 = cmpxchg i32* getelementptr inbounds (%struct.sctp_base_info, %struct.sctp_base_info* @system_base_info, i64 0, i32 7), i32 1, i32 1 seq_cst seq_cst
  %14 = extractvalue { i32, i1 } %13, 1
  br i1 %14, label %17, label %15

15:                                               ; preds = %12
  %16 = call i32 @sctp_msecs_to_ticks(i32 10) #4
  call void @sctp_handle_tick(i32 %16)
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %6) #4
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %5) #4
  br label %8

17:                                               ; preds = %12
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %6) #4
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %5) #4
  ret i8* null
}

declare void @sctp_userspace_set_threadname(i8*) local_unnamed_addr #3

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #1

declare i32 @nanosleep(%struct.timespec*, %struct.timespec*) local_unnamed_addr #3

declare i32 @sctp_msecs_to_ticks(i32) local_unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define hidden void @sctp_start_timer_thread() local_unnamed_addr #0 {
  %1 = tail call i32 @sctp_userspace_thread_create(i64* getelementptr inbounds (%struct.sctp_base_info, %struct.sctp_base_info* @system_base_info, i64 0, i32 6), i8* (i8*)* nonnull @user_sctp_timer_iterate) #4
  %2 = icmp eq i32 %1, 0
  br i1 %2, label %7, label %3

3:                                                ; preds = %0
  %4 = load void (i8*, ...)*, void (i8*, ...)** getelementptr inbounds (%struct.sctp_base_info, %struct.sctp_base_info* @system_base_info, i64 0, i32 12), align 8
  %5 = icmp eq void (i8*, ...)* %4, null
  br i1 %5, label %8, label %6

6:                                                ; preds = %3
  tail call void (i8*, ...) %4(i8* getelementptr inbounds ([52 x i8], [52 x i8]* @.str.1, i64 0, i64 0), i32 %1) #4
  br label %8

7:                                                ; preds = %0
  store i32 1, i32* getelementptr inbounds (%struct.sctp_base_info, %struct.sctp_base_info* @system_base_info, i64 0, i32 9), align 8
  br label %8

8:                                                ; preds = %3, %6, %7
  ret void
}

declare i32 @sctp_userspace_thread_create(i64*, i8* (i8*)*) local_unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define hidden void @sctp_stop_timer_thread() local_unnamed_addr #0 {
  %1 = cmpxchg i32* getelementptr inbounds (%struct.sctp_base_info, %struct.sctp_base_info* @system_base_info, i64 0, i32 7), i32 0, i32 1 seq_cst seq_cst
  %2 = load i32, i32* getelementptr inbounds (%struct.sctp_base_info, %struct.sctp_base_info* @system_base_info, i64 0, i32 9), align 8
  %3 = icmp eq i32 %2, 0
  br i1 %3, label %7, label %4

4:                                                ; preds = %0
  %5 = load i64, i64* getelementptr inbounds (%struct.sctp_base_info, %struct.sctp_base_info* @system_base_info, i64 0, i32 6), align 8
  %6 = tail call i32 @pthread_join(i64 %5, i8** null) #4
  br label %7

7:                                                ; preds = %0, %4
  ret void
}

declare i32 @pthread_join(i64, i8**) local_unnamed_addr #3

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
