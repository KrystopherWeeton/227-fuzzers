; ModuleID = '../../third_party/blink/renderer/platform/fonts/string_truncator.cc'
source_filename = "../../third_party/blink/renderer/platform/fonts/string_truncator.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"class.WTF::StringImpl" = type { i32, i32, %"struct.std::__1::atomic" }
%"struct.std::__1::atomic" = type { %"struct.std::__1::__atomic_base" }
%"struct.std::__1::__atomic_base" = type { %"struct.std::__1::__atomic_base.0" }
%"struct.std::__1::__atomic_base.0" = type { %"struct.std::__1::__cxx_atomic_impl" }
%"struct.std::__1::__cxx_atomic_impl" = type { %"struct.std::__1::__cxx_atomic_base_impl" }
%"struct.std::__1::__cxx_atomic_base_impl" = type { i32 }
%"class.WTF::String" = type { %class.scoped_refptr }
%class.scoped_refptr = type { %"class.WTF::StringImpl"* }
%"class.blink::Font" = type { %"class.blink::FontDescription", %class.scoped_refptr.21 }
%"class.blink::FontDescription" = type { %"class.blink::FontFamily", %class.scoped_refptr.2, %class.scoped_refptr.3, %class.scoped_refptr.13, float, float, float, float, float, float, %"struct.blink::FontSelectionRequest", %"class.blink::FontSelectionValue", %union.anon.20 }
%"class.blink::FontFamily" = type { %"class.WTF::AtomicString", %class.scoped_refptr.1 }
%"class.WTF::AtomicString" = type { %"class.WTF::String" }
%class.scoped_refptr.1 = type { %"class.blink::SharedFontFamily"* }
%"class.blink::SharedFontFamily" = type <{ %"class.blink::FontFamily", %"class.WTF::RefCounted.240", [4 x i8] }>
%"class.WTF::RefCounted.240" = type { %"class.base::RefCounted.241" }
%"class.base::RefCounted.241" = type { %"class.base::subtle::RefCountedBase" }
%"class.base::subtle::RefCountedBase" = type { i32 }
%class.scoped_refptr.2 = type { %"class.blink::FontFeatureSettings"* }
%"class.blink::FontFeatureSettings" = type <{ %"class.blink::FontSettings", %"class.WTF::RefCounted", [4 x i8] }>
%"class.blink::FontSettings" = type { %"class.WTF::Vector" }
%"class.WTF::Vector" = type { %"class.WTF::VectorBuffer" }
%"class.WTF::VectorBuffer" = type { %"class.WTF::VectorBufferBase" }
%"class.WTF::VectorBufferBase" = type { %"class.blink::FontTagValuePair"*, i32, i32 }
%"class.blink::FontTagValuePair" = type { i32, i32 }
%"class.WTF::RefCounted" = type { %"class.base::RefCounted" }
%"class.base::RefCounted" = type { %"class.base::subtle::RefCountedBase" }
%class.scoped_refptr.3 = type { %"class.blink::FontVariationSettings"* }
%"class.blink::FontVariationSettings" = type <{ %"class.blink::FontSettings.4", %"class.WTF::RefCounted.11", [4 x i8] }>
%"class.blink::FontSettings.4" = type { %"class.WTF::Vector.5" }
%"class.WTF::Vector.5" = type { %"class.WTF::VectorBuffer.6" }
%"class.WTF::VectorBuffer.6" = type { %"class.WTF::VectorBufferBase.7" }
%"class.WTF::VectorBufferBase.7" = type { %"class.blink::FontTagValuePair.8"*, i32, i32 }
%"class.blink::FontTagValuePair.8" = type { i32, float }
%"class.WTF::RefCounted.11" = type { %"class.base::RefCounted.12" }
%"class.base::RefCounted.12" = type { %"class.base::subtle::RefCountedBase" }
%class.scoped_refptr.13 = type { %"class.blink::LayoutLocale"* }
%"class.blink::LayoutLocale" = type <{ %"class.WTF::RefCounted.14", [4 x i8], %"class.WTF::AtomicString", %"class.std::__1::basic_string", %"class.WTF::CaseMap::Locale", %class.scoped_refptr.17, %struct.hb_language_impl_t*, i32, i32, i8, [7 x i8] }>
%"class.WTF::RefCounted.14" = type { %"class.base::RefCounted.15" }
%"class.base::RefCounted.15" = type { %"class.base::subtle::RefCountedBase" }
%"class.std::__1::basic_string" = type { %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" = type { %union.anon }
%union.anon = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" = type { i8*, i64, i64 }
%"class.WTF::CaseMap::Locale" = type { i8* }
%class.scoped_refptr.17 = type { %"class.blink::Hyphenation"* }
%"class.blink::Hyphenation" = type <{ i32 (...)**, %"class.WTF::RefCounted.18", [4 x i8] }>
%"class.WTF::RefCounted.18" = type { %"class.base::RefCounted.19" }
%"class.base::RefCounted.19" = type { %"class.base::subtle::RefCountedBase" }
%struct.hb_language_impl_t = type opaque
%"struct.blink::FontSelectionRequest" = type { %"class.blink::FontSelectionValue", %"class.blink::FontSelectionValue", %"class.blink::FontSelectionValue" }
%"class.blink::FontSelectionValue" = type { i16 }
%union.anon.20 = type { %"struct.blink::FontDescription::BitFields" }
%"struct.blink::FontDescription::BitFields" = type { i56 }
%class.scoped_refptr.21 = type { %"class.blink::FontFallbackList"* }
%"class.blink::FontFallbackList" = type { %"class.WTF::RefCounted.22", %"class.WTF::Vector.24", %"class.blink::SimpleFontData"*, %"class.blink::WeakPersistent", i32, i16, i8, %"class.base::WeakPtr" }
%"class.WTF::RefCounted.22" = type { %"class.base::RefCounted.23" }
%"class.base::RefCounted.23" = type { %"class.base::subtle::RefCountedBase" }
%"class.WTF::Vector.24" = type { %"class.WTF::VectorBuffer.25" }
%"class.WTF::VectorBuffer.25" = type { %"class.WTF::VectorBufferBase.26", [8 x i8] }
%"class.WTF::VectorBufferBase.26" = type { %class.scoped_refptr.27*, i32, i32 }
%class.scoped_refptr.27 = type { %"class.blink::FontData"* }
%"class.blink::FontData" = type <{ i32 (...)**, %"class.WTF::RefCounted.28", [4 x i8] }>
%"class.WTF::RefCounted.28" = type { %"class.base::RefCounted.29" }
%"class.base::RefCounted.29" = type { %"class.base::subtle::RefCountedBase" }
%"class.blink::SimpleFontData" = type { %"class.blink::FontData.base", %"class.blink::FontMetrics", float, float, [4 x i8], %"class.blink::FontPlatformData", %class.SkFont, i16, float, i16, %"class.std::__1::unique_ptr", %class.scoped_refptr.48, i32, i32, %"struct.blink::FontHeight" }
%"class.blink::FontData.base" = type <{ i32 (...)**, %"class.WTF::RefCounted.28" }>
%"class.blink::FontMetrics" = type <{ i32, float, float, float, float, float, float, %"class.absl::optional", %"class.absl::optional", i32, i32, i8, i8, [2 x i8] }>
%"class.absl::optional" = type { %"class.absl::optional_internal::optional_data" }
%"class.absl::optional_internal::optional_data" = type { %"class.absl::optional_internal::optional_data_base" }
%"class.absl::optional_internal::optional_data_base" = type { %"class.absl::optional_internal::optional_data_dtor_base" }
%"class.absl::optional_internal::optional_data_dtor_base" = type { i8, %union.anon.32 }
%union.anon.32 = type { float }
%"class.blink::FontPlatformData" = type <{ %class.sk_sp, %"class.std::__1::basic_string", float, i8, i8, i8, i8, i32, %"struct.blink::WebFontRenderStyle", [5 x i8], %class.scoped_refptr.43, i8, [7 x i8] }>
%class.sk_sp = type { %class.SkTypeface* }
%class.SkTypeface = type <{ %class.SkWeakRefCnt, i32, %class.SkFontStyle, %struct.SkRect, %class.SkOnce, i8, [6 x i8] }>
%class.SkWeakRefCnt = type { %class.SkRefCnt.base, %"struct.std::__1::atomic.33" }
%class.SkRefCnt.base = type { %class.SkRefCntBase.base }
%class.SkRefCntBase.base = type <{ i32 (...)**, %"struct.std::__1::atomic.33" }>
%"struct.std::__1::atomic.33" = type { %"struct.std::__1::__atomic_base.34" }
%"struct.std::__1::__atomic_base.34" = type { %"struct.std::__1::__atomic_base.35" }
%"struct.std::__1::__atomic_base.35" = type { %"struct.std::__1::__cxx_atomic_impl.36" }
%"struct.std::__1::__cxx_atomic_impl.36" = type { %"struct.std::__1::__cxx_atomic_base_impl.37" }
%"struct.std::__1::__cxx_atomic_base_impl.37" = type { i32 }
%class.SkFontStyle = type { i32 }
%struct.SkRect = type { float, float, float, float }
%class.SkOnce = type { %"struct.std::__1::atomic.38" }
%"struct.std::__1::atomic.38" = type { %"struct.std::__1::__atomic_base.39" }
%"struct.std::__1::__atomic_base.39" = type { %"struct.std::__1::__atomic_base.40" }
%"struct.std::__1::__atomic_base.40" = type { %"struct.std::__1::__cxx_atomic_impl.41" }
%"struct.std::__1::__cxx_atomic_impl.41" = type { %"struct.std::__1::__cxx_atomic_base_impl.42" }
%"struct.std::__1::__cxx_atomic_base_impl.42" = type { i8 }
%"struct.blink::WebFontRenderStyle" = type { i8, i8, i8, i8, i8, i8, i8 }
%class.scoped_refptr.43 = type { %"class.blink::HarfBuzzFace"* }
%"class.blink::HarfBuzzFace" = type opaque
%class.SkFont = type <{ %class.sk_sp, float, float, float, i8, i8, i8, i8 }>
%"class.std::__1::unique_ptr" = type { %"class.std::__1::__compressed_pair.44" }
%"class.std::__1::__compressed_pair.44" = type { %"struct.std::__1::__compressed_pair_elem.45" }
%"struct.std::__1::__compressed_pair_elem.45" = type { %"struct.blink::SimpleFontData::DerivedFontData"* }
%"struct.blink::SimpleFontData::DerivedFontData" = type { %class.scoped_refptr.46, %class.scoped_refptr.46 }
%class.scoped_refptr.46 = type { %"class.blink::SimpleFontData"* }
%class.scoped_refptr.48 = type { %"class.blink::CustomFontData"* }
%"class.blink::CustomFontData" = type <{ i32 (...)**, %"class.WTF::RefCounted.49", [4 x i8] }>
%"class.WTF::RefCounted.49" = type { %"class.base::RefCounted.50" }
%"class.base::RefCounted.50" = type { %"class.base::subtle::RefCountedBase" }
%"struct.blink::FontHeight" = type { %"class.blink::LayoutUnit", %"class.blink::LayoutUnit" }
%"class.blink::LayoutUnit" = type { i32 }
%"class.blink::WeakPersistent" = type { %"class.blink::PersistentBase" }
%"class.blink::PersistentBase" = type { %"class.blink::FontFallbackMap"*, %"class.blink::PersistentNodePtr" }
%"class.blink::FontFallbackMap" = type opaque
%"class.blink::PersistentNodePtr" = type { %"class.blink::PersistentNode"* }
%"class.blink::PersistentNode" = type { i8*, void (%"class.blink::Visitor"*, i8*)* }
%"class.blink::Visitor" = type { i32 (...)**, %"class.blink::ThreadState"* }
%"class.blink::ThreadState" = type <{ %"class.std::__1::unique_ptr.51", i32, [4 x i8], %"class.std::__1::unique_ptr.189", %"class.std::__1::unique_ptr.189", i8**, i8, i8, i8, i8, i8, i8, [2 x i8], i64, i64, i32, i32, i32, [4 x i8], %"class.WTF::Deque", %"class.v8::Isolate"*, void (%"class.v8::Isolate"*, %"class.v8::EmbedderGraph"*, i8*)*, %"class.std::__1::unique_ptr.199", %"class.std::__1::unique_ptr.205", %"struct.blink::ThreadState::GCData", %"class.std::__1::unique_ptr.217", %"class.std::__1::unique_ptr.223", %"class.base::JobHandle", %"class.base::JobHandle", %"struct.std::__1::atomic.230", [7 x i8], i64, i8, [7 x i8], i64, %"class.base::TimeTicks", i8, i8, [6 x i8] }>
%"class.std::__1::unique_ptr.51" = type { %"class.std::__1::__compressed_pair.52" }
%"class.std::__1::__compressed_pair.52" = type { %"struct.std::__1::__compressed_pair_elem.53" }
%"struct.std::__1::__compressed_pair_elem.53" = type { %"class.blink::ThreadHeap"* }
%"class.blink::ThreadHeap" = type { %"class.blink::ThreadState"*, %"class.std::__1::unique_ptr.54", %"class.std::__1::unique_ptr.60", %"class.std::__1::unique_ptr.66", %"class.std::__1::unique_ptr.72", %"class.std::__1::unique_ptr.78", %"class.std::__1::unique_ptr.84", %"class.std::__1::unique_ptr.95", %"class.std::__1::unique_ptr.102", %"class.std::__1::unique_ptr.102", %"class.std::__1::unique_ptr.109", %"class.std::__1::unique_ptr.116", %"class.std::__1::unique_ptr.123", %"class.std::__1::unique_ptr.123", %"class.std::__1::unique_ptr.130", %"class.std::__1::unique_ptr.137", %"class.std::__1::unique_ptr.144", %"class.std::__1::unique_ptr.169", %"struct.blink::ThreadHeap::LastAllocatedRegion", [9 x %"class.blink::BaseArena"*], i64, i64 }
%"class.std::__1::unique_ptr.54" = type { %"class.std::__1::__compressed_pair.55" }
%"class.std::__1::__compressed_pair.55" = type { %"struct.std::__1::__compressed_pair_elem.56" }
%"struct.std::__1::__compressed_pair_elem.56" = type { %"class.blink::ThreadHeapStatsCollector"* }
%"class.blink::ThreadHeapStatsCollector" = type opaque
%"class.std::__1::unique_ptr.60" = type { %"class.std::__1::__compressed_pair.61" }
%"class.std::__1::__compressed_pair.61" = type { %"struct.std::__1::__compressed_pair_elem.62" }
%"struct.std::__1::__compressed_pair_elem.62" = type { %"class.blink::RegionTree"* }
%"class.blink::RegionTree" = type opaque
%"class.std::__1::unique_ptr.66" = type { %"class.std::__1::__compressed_pair.67" }
%"class.std::__1::__compressed_pair.67" = type { %"struct.std::__1::__compressed_pair_elem.68" }
%"struct.std::__1::__compressed_pair_elem.68" = type { %"class.blink::PageBloomFilter"* }
%"class.blink::PageBloomFilter" = type opaque
%"class.std::__1::unique_ptr.72" = type { %"class.std::__1::__compressed_pair.73" }
%"class.std::__1::__compressed_pair.73" = type { %"struct.std::__1::__compressed_pair_elem.74" }
%"struct.std::__1::__compressed_pair_elem.74" = type { %"class.blink::PagePool"* }
%"class.blink::PagePool" = type opaque
%"class.std::__1::unique_ptr.78" = type { %"class.std::__1::__compressed_pair.79" }
%"class.std::__1::__compressed_pair.79" = type { %"struct.std::__1::__compressed_pair_elem.80" }
%"struct.std::__1::__compressed_pair_elem.80" = type { %"class.blink::ProcessHeapReporter"* }
%"class.blink::ProcessHeapReporter" = type opaque
%"class.std::__1::unique_ptr.84" = type { %"class.std::__1::__compressed_pair.85" }
%"class.std::__1::__compressed_pair.85" = type { %"struct.std::__1::__compressed_pair_elem.86" }
%"struct.std::__1::__compressed_pair_elem.86" = type { %"class.blink::Worklist"* }
%"class.blink::Worklist" = type { [4 x %"struct.blink::Worklist<blink::TraceDescriptor, 512, 4>::PrivateSegmentHolder"], %"class.blink::Worklist<blink::TraceDescriptor, 512, 4>::GlobalPool" }
%"struct.blink::Worklist<blink::TraceDescriptor, 512, 4>::PrivateSegmentHolder" = type { %"class.blink::Worklist<blink::TraceDescriptor, 512, 4>::Segment"*, %"class.blink::Worklist<blink::TraceDescriptor, 512, 4>::Segment"*, [64 x i8] }
%"class.blink::Worklist<blink::TraceDescriptor, 512, 4>::Segment" = type { %"class.blink::Worklist<blink::TraceDescriptor, 512, 4>::Segment"*, i64, [512 x %"struct.blink::TraceDescriptor"] }
%"struct.blink::TraceDescriptor" = type { i8*, void (%"class.blink::Visitor"*, i8*)* }
%"class.blink::Worklist<blink::TraceDescriptor, 512, 4>::GlobalPool" = type { %"class.base::Lock", %"class.blink::Worklist<blink::TraceDescriptor, 512, 4>::Segment"*, %"struct.std::__1::atomic.87" }
%"class.base::Lock" = type { %"class.base::internal::LockImpl" }
%"class.base::internal::LockImpl" = type { %union.pthread_mutex_t }
%union.pthread_mutex_t = type { %struct.__pthread_mutex_s }
%struct.__pthread_mutex_s = type { i32, i32, i32, i32, i32, i16, i16, %struct.__pthread_internal_list }
%struct.__pthread_internal_list = type { %struct.__pthread_internal_list*, %struct.__pthread_internal_list* }
%"struct.std::__1::atomic.87" = type { %"struct.std::__1::__atomic_base.88" }
%"struct.std::__1::__atomic_base.88" = type { %"struct.std::__1::__atomic_base.89" }
%"struct.std::__1::__atomic_base.89" = type { %"struct.std::__1::__cxx_atomic_impl.90" }
%"struct.std::__1::__cxx_atomic_impl.90" = type { %"struct.std::__1::__cxx_atomic_base_impl.91" }
%"struct.std::__1::__cxx_atomic_base_impl.91" = type { i64 }
%"class.std::__1::unique_ptr.95" = type { %"class.std::__1::__compressed_pair.96" }
%"class.std::__1::__compressed_pair.96" = type { %"struct.std::__1::__compressed_pair_elem.97" }
%"struct.std::__1::__compressed_pair_elem.97" = type { %"class.blink::Worklist.98"* }
%"class.blink::Worklist.98" = type { [4 x %"struct.blink::Worklist<blink::HeapObjectHeader *, 64, 4>::PrivateSegmentHolder"], %"class.blink::Worklist<blink::HeapObjectHeader *, 64, 4>::GlobalPool" }
%"struct.blink::Worklist<blink::HeapObjectHeader *, 64, 4>::PrivateSegmentHolder" = type { %"class.blink::Worklist<blink::HeapObjectHeader *, 64, 4>::Segment"*, %"class.blink::Worklist<blink::HeapObjectHeader *, 64, 4>::Segment"*, [64 x i8] }
%"class.blink::Worklist<blink::HeapObjectHeader *, 64, 4>::Segment" = type opaque
%"class.blink::Worklist<blink::HeapObjectHeader *, 64, 4>::GlobalPool" = type { %"class.base::Lock", %"class.blink::Worklist<blink::HeapObjectHeader *, 64, 4>::Segment"*, %"struct.std::__1::atomic.87" }
%"class.std::__1::unique_ptr.102" = type { %"class.std::__1::__compressed_pair.103" }
%"class.std::__1::__compressed_pair.103" = type { %"struct.std::__1::__compressed_pair_elem.104" }
%"struct.std::__1::__compressed_pair_elem.104" = type { %"class.blink::Worklist.105"* }
%"class.blink::Worklist.105" = type { [4 x %"struct.blink::Worklist<const void *, 16, 4>::PrivateSegmentHolder"], %"class.blink::Worklist<const void *, 16, 4>::GlobalPool" }
%"struct.blink::Worklist<const void *, 16, 4>::PrivateSegmentHolder" = type { %"class.blink::Worklist<const void *, 16, 4>::Segment"*, %"class.blink::Worklist<const void *, 16, 4>::Segment"*, [64 x i8] }
%"class.blink::Worklist<const void *, 16, 4>::Segment" = type { %"class.blink::Worklist<const void *, 16, 4>::Segment"*, i64, [16 x i8*] }
%"class.blink::Worklist<const void *, 16, 4>::GlobalPool" = type { %"class.base::Lock", %"class.blink::Worklist<const void *, 16, 4>::Segment"*, %"struct.std::__1::atomic.87" }
%"class.std::__1::unique_ptr.109" = type { %"class.std::__1::__compressed_pair.110" }
%"class.std::__1::__compressed_pair.110" = type { %"struct.std::__1::__compressed_pair_elem.111" }
%"struct.std::__1::__compressed_pair_elem.111" = type { %"class.blink::Worklist.112"* }
%"class.blink::Worklist.112" = type { [4 x %"struct.blink::Worklist<blink::CustomCallbackItem, 64, 4>::PrivateSegmentHolder"], %"class.blink::Worklist<blink::CustomCallbackItem, 64, 4>::GlobalPool" }
%"struct.blink::Worklist<blink::CustomCallbackItem, 64, 4>::PrivateSegmentHolder" = type { %"class.blink::Worklist<blink::CustomCallbackItem, 64, 4>::Segment"*, %"class.blink::Worklist<blink::CustomCallbackItem, 64, 4>::Segment"*, [64 x i8] }
%"class.blink::Worklist<blink::CustomCallbackItem, 64, 4>::Segment" = type opaque
%"class.blink::Worklist<blink::CustomCallbackItem, 64, 4>::GlobalPool" = type { %"class.base::Lock", %"class.blink::Worklist<blink::CustomCallbackItem, 64, 4>::Segment"*, %"struct.std::__1::atomic.87" }
%"class.std::__1::unique_ptr.116" = type { %"class.std::__1::__compressed_pair.117" }
%"class.std::__1::__compressed_pair.117" = type { %"struct.std::__1::__compressed_pair_elem.118" }
%"struct.std::__1::__compressed_pair_elem.118" = type { %"class.blink::Worklist.119"* }
%"class.blink::Worklist.119" = type { [4 x %"struct.blink::Worklist<const void *const *, 256, 4>::PrivateSegmentHolder"], %"class.blink::Worklist<const void *const *, 256, 4>::GlobalPool" }
%"struct.blink::Worklist<const void *const *, 256, 4>::PrivateSegmentHolder" = type { %"class.blink::Worklist<const void *const *, 256, 4>::Segment"*, %"class.blink::Worklist<const void *const *, 256, 4>::Segment"*, [64 x i8] }
%"class.blink::Worklist<const void *const *, 256, 4>::Segment" = type opaque
%"class.blink::Worklist<const void *const *, 256, 4>::GlobalPool" = type { %"class.base::Lock", %"class.blink::Worklist<const void *const *, 256, 4>::Segment"*, %"struct.std::__1::atomic.87" }
%"class.std::__1::unique_ptr.123" = type { %"class.std::__1::__compressed_pair.124" }
%"class.std::__1::__compressed_pair.124" = type { %"struct.std::__1::__compressed_pair_elem.125" }
%"struct.std::__1::__compressed_pair_elem.125" = type { %"class.blink::Worklist.126"* }
%"class.blink::Worklist.126" = type { [4 x %"struct.blink::Worklist<blink::EphemeronPairItem, 64, 4>::PrivateSegmentHolder"], %"class.blink::Worklist<blink::EphemeronPairItem, 64, 4>::GlobalPool" }
%"struct.blink::Worklist<blink::EphemeronPairItem, 64, 4>::PrivateSegmentHolder" = type { %"class.blink::Worklist<blink::EphemeronPairItem, 64, 4>::Segment"*, %"class.blink::Worklist<blink::EphemeronPairItem, 64, 4>::Segment"*, [64 x i8] }
%"class.blink::Worklist<blink::EphemeronPairItem, 64, 4>::Segment" = type opaque
%"class.blink::Worklist<blink::EphemeronPairItem, 64, 4>::GlobalPool" = type { %"class.base::Lock", %"class.blink::Worklist<blink::EphemeronPairItem, 64, 4>::Segment"*, %"struct.std::__1::atomic.87" }
%"class.std::__1::unique_ptr.130" = type { %"class.std::__1::__compressed_pair.131" }
%"class.std::__1::__compressed_pair.131" = type { %"struct.std::__1::__compressed_pair_elem.132" }
%"struct.std::__1::__compressed_pair_elem.132" = type { %"class.blink::Worklist.133"* }
%"class.blink::Worklist.133" = type { [4 x %"struct.blink::Worklist<const blink::TraceWrapperV8Reference<v8::Value> *, 16, 4>::PrivateSegmentHolder"], %"class.blink::Worklist<const blink::TraceWrapperV8Reference<v8::Value> *, 16, 4>::GlobalPool" }
%"struct.blink::Worklist<const blink::TraceWrapperV8Reference<v8::Value> *, 16, 4>::PrivateSegmentHolder" = type { %"class.blink::Worklist<const blink::TraceWrapperV8Reference<v8::Value> *, 16, 4>::Segment"*, %"class.blink::Worklist<const blink::TraceWrapperV8Reference<v8::Value> *, 16, 4>::Segment"*, [64 x i8] }
%"class.blink::Worklist<const blink::TraceWrapperV8Reference<v8::Value> *, 16, 4>::Segment" = type opaque
%"class.blink::Worklist<const blink::TraceWrapperV8Reference<v8::Value> *, 16, 4>::GlobalPool" = type { %"class.base::Lock", %"class.blink::Worklist<const blink::TraceWrapperV8Reference<v8::Value> *, 16, 4>::Segment"*, %"struct.std::__1::atomic.87" }
%"class.std::__1::unique_ptr.137" = type { %"class.std::__1::__compressed_pair.138" }
%"class.std::__1::__compressed_pair.138" = type { %"struct.std::__1::__compressed_pair_elem.139" }
%"struct.std::__1::__compressed_pair_elem.139" = type { %"class.blink::Worklist.140"* }
%"class.blink::Worklist.140" = type { [4 x %"struct.blink::Worklist<blink::NotSafeToConcurrentlyTraceItem, 64, 4>::PrivateSegmentHolder"], %"class.blink::Worklist<blink::NotSafeToConcurrentlyTraceItem, 64, 4>::GlobalPool" }
%"struct.blink::Worklist<blink::NotSafeToConcurrentlyTraceItem, 64, 4>::PrivateSegmentHolder" = type { %"class.blink::Worklist<blink::NotSafeToConcurrentlyTraceItem, 64, 4>::Segment"*, %"class.blink::Worklist<blink::NotSafeToConcurrentlyTraceItem, 64, 4>::Segment"*, [64 x i8] }
%"class.blink::Worklist<blink::NotSafeToConcurrentlyTraceItem, 64, 4>::Segment" = type { %"class.blink::Worklist<blink::NotSafeToConcurrentlyTraceItem, 64, 4>::Segment"*, i64, [64 x %"struct.blink::NotSafeToConcurrentlyTraceItem"] }
%"struct.blink::NotSafeToConcurrentlyTraceItem" = type { %"struct.blink::TraceDescriptor", i64 }
%"class.blink::Worklist<blink::NotSafeToConcurrentlyTraceItem, 64, 4>::GlobalPool" = type { %"class.base::Lock", %"class.blink::Worklist<blink::NotSafeToConcurrentlyTraceItem, 64, 4>::Segment"*, %"struct.std::__1::atomic.87" }
%"class.std::__1::unique_ptr.144" = type { %"class.std::__1::__compressed_pair.145" }
%"class.std::__1::__compressed_pair.145" = type { %"struct.std::__1::__compressed_pair_elem.146" }
%"struct.std::__1::__compressed_pair_elem.146" = type { %"class.blink::WeakContainersWorklist"* }
%"class.blink::WeakContainersWorklist" = type { %"class.WTF::Mutex", %"class.std::__1::unordered_set" }
%"class.WTF::Mutex" = type { %"class.WTF::MutexBase" }
%"class.WTF::MutexBase" = type { %"struct.WTF::PlatformMutex" }
%"struct.WTF::PlatformMutex" = type { %union.pthread_mutex_t }
%"class.std::__1::unordered_set" = type { %"class.std::__1::__hash_table" }
%"class.std::__1::__hash_table" = type <{ %"class.std::__1::unique_ptr.147", %"class.std::__1::__compressed_pair.156", %"class.std::__1::__compressed_pair.161", %"class.std::__1::__compressed_pair.163", [4 x i8] }>
%"class.std::__1::unique_ptr.147" = type { %"class.std::__1::__compressed_pair.148" }
%"class.std::__1::__compressed_pair.148" = type { %"struct.std::__1::__compressed_pair_elem.149", %"struct.std::__1::__compressed_pair_elem.150" }
%"struct.std::__1::__compressed_pair_elem.149" = type { %"struct.std::__1::__hash_node_base"** }
%"struct.std::__1::__hash_node_base" = type { %"struct.std::__1::__hash_node_base"* }
%"struct.std::__1::__compressed_pair_elem.150" = type { %"class.std::__1::__bucket_list_deallocator" }
%"class.std::__1::__bucket_list_deallocator" = type { %"class.std::__1::__compressed_pair.151" }
%"class.std::__1::__compressed_pair.151" = type { %"struct.std::__1::__compressed_pair_elem.152" }
%"struct.std::__1::__compressed_pair_elem.152" = type { i64 }
%"class.std::__1::__compressed_pair.156" = type { %"struct.std::__1::__compressed_pair_elem.157" }
%"struct.std::__1::__compressed_pair_elem.157" = type { %"struct.std::__1::__hash_node_base" }
%"class.std::__1::__compressed_pair.161" = type { %"struct.std::__1::__compressed_pair_elem.152" }
%"class.std::__1::__compressed_pair.163" = type { %"struct.std::__1::__compressed_pair_elem.164" }
%"struct.std::__1::__compressed_pair_elem.164" = type { float }
%"class.std::__1::unique_ptr.169" = type { %"class.std::__1::__compressed_pair.170" }
%"class.std::__1::__compressed_pair.170" = type { %"struct.std::__1::__compressed_pair_elem.171" }
%"struct.std::__1::__compressed_pair_elem.171" = type { %"class.blink::HeapCompact"* }
%"class.blink::HeapCompact" = type <{ %"class.blink::ThreadHeap"*, %"class.std::__1::unique_ptr.172", i8, [7 x i8], i64, i64, i32, [4 x i8], i64, i8, [7 x i8] }>
%"class.std::__1::unique_ptr.172" = type { %"class.std::__1::__compressed_pair.173" }
%"class.std::__1::__compressed_pair.173" = type { %"struct.std::__1::__compressed_pair_elem.174" }
%"struct.std::__1::__compressed_pair_elem.174" = type { %"class.blink::HeapCompact::MovableObjectFixups"* }
%"class.blink::HeapCompact::MovableObjectFixups" = type opaque
%"struct.blink::ThreadHeap::LastAllocatedRegion" = type { i8*, i64 }
%"class.blink::BaseArena" = type <{ i32 (...)**, %"class.blink::PageStackThreadSafe", %"class.blink::PageStackThreadSafe", %"class.blink::PageStackThreadSafe", %"class.blink::PageStackThreadSafe", %"class.blink::ThreadState"*, i32, [4 x i8] }>
%"class.blink::PageStackThreadSafe" = type { %"class.blink::PageStack", %"class.WTF::Mutex" }
%"class.blink::PageStack" = type { %"class.WTF::Vector.181" }
%"class.WTF::Vector.181" = type { %"class.WTF::VectorBuffer.182" }
%"class.WTF::VectorBuffer.182" = type { %"class.WTF::VectorBufferBase.183" }
%"class.WTF::VectorBufferBase.183" = type { %"class.blink::BasePage"**, i32, i32 }
%"class.blink::BasePage" = type <{ i32 (...)**, %"class.blink::PageMemory"*, %"class.blink::BaseArena"*, %"class.blink::ThreadState"*, i64, i8, i8, i8, [5 x i8] }>
%"class.blink::PageMemory" = type opaque
%"class.std::__1::unique_ptr.189" = type { %"class.std::__1::__compressed_pair.190" }
%"class.std::__1::__compressed_pair.190" = type { %"struct.std::__1::__compressed_pair_elem.191" }
%"struct.std::__1::__compressed_pair_elem.191" = type { %"class.blink::PersistentRegion"* }
%"class.blink::PersistentRegion" = type { %"class.blink::PersistentRegionBase" }
%"class.blink::PersistentRegionBase" = type { %"class.blink::PersistentNode"*, %"struct.blink::PersistentNodeSlots"* }
%"struct.blink::PersistentNodeSlots" = type { %"struct.blink::PersistentNodeSlots"*, [256 x %"class.blink::PersistentNode"] }
%"class.WTF::Deque" = type { %"class.WTF::Deque<std::__1::pair<void *, bool (*)(const blink::LivenessBroker &, void *)>, 0, WTF::PartitionAllocator>::BackingBuffer", i32, i32 }
%"class.WTF::Deque<std::__1::pair<void *, bool (*)(const blink::LivenessBroker &, void *)>, 0, WTF::PartitionAllocator>::BackingBuffer" = type { %"class.WTF::VectorBuffer.197" }
%"class.WTF::VectorBuffer.197" = type { %"class.WTF::VectorBufferBase.198" }
%"class.WTF::VectorBufferBase.198" = type { %"struct.std::__1::pair"*, i32, i32 }
%"struct.std::__1::pair" = type { i8*, i1 (%"class.blink::LivenessBroker"*, i8*)* }
%"class.blink::LivenessBroker" = type { i8 }
%"class.v8::Isolate" = type { i8 }
%"class.v8::EmbedderGraph" = type opaque
%"class.std::__1::unique_ptr.199" = type { %"class.std::__1::__compressed_pair.200" }
%"class.std::__1::__compressed_pair.200" = type { %"struct.std::__1::__compressed_pair_elem.201" }
%"struct.std::__1::__compressed_pair_elem.201" = type { %"class.blink::UnifiedHeapController"* }
%"class.blink::UnifiedHeapController" = type opaque
%"class.std::__1::unique_ptr.205" = type { %"class.std::__1::__compressed_pair.206" }
%"class.std::__1::__compressed_pair.206" = type { %"struct.std::__1::__compressed_pair_elem.207" }
%"struct.std::__1::__compressed_pair_elem.207" = type { %"class.v8::EmbedderRootsHandler"* }
%"class.v8::EmbedderRootsHandler" = type { i32 (...)** }
%"struct.blink::ThreadState::GCData" = type { i32, i32, i32, i32, %"class.std::__1::unique_ptr.211" }
%"class.std::__1::unique_ptr.211" = type { %"class.std::__1::__compressed_pair.212" }
%"class.std::__1::__compressed_pair.212" = type { %"struct.std::__1::__compressed_pair_elem.213" }
%"struct.std::__1::__compressed_pair_elem.213" = type { %"class.blink::MarkingVisitor"* }
%"class.blink::MarkingVisitor" = type { %"class.blink::MarkingVisitorBase", %"class.blink::MarkingVisitor::RecentlyRetracedWeakContainers" }
%"class.blink::MarkingVisitorBase" = type { %"class.blink::Visitor", %"class.blink::Worklist<blink::TraceDescriptor, 512, 4>::View", %"class.blink::Worklist<blink::HeapObjectHeader *, 64, 4>::View", %"class.blink::Worklist<const void *, 16, 4>::View", %"class.blink::Worklist<blink::CustomCallbackItem, 64, 4>::View", %"class.blink::Worklist<const void *const *, 256, 4>::View", %"class.blink::Worklist<blink::EphemeronPairItem, 64, 4>::View", %"class.blink::Worklist<blink::EphemeronPairItem, 64, 4>::View", %"class.blink::WeakContainersWorklist"*, i64, i32, i32 }
%"class.blink::Worklist<blink::TraceDescriptor, 512, 4>::View" = type <{ %"class.blink::Worklist"*, i32, [4 x i8] }>
%"class.blink::Worklist<blink::HeapObjectHeader *, 64, 4>::View" = type <{ %"class.blink::Worklist.98"*, i32, [4 x i8] }>
%"class.blink::Worklist<const void *, 16, 4>::View" = type <{ %"class.blink::Worklist.105"*, i32, [4 x i8] }>
%"class.blink::Worklist<blink::CustomCallbackItem, 64, 4>::View" = type <{ %"class.blink::Worklist.112"*, i32, [4 x i8] }>
%"class.blink::Worklist<const void *const *, 256, 4>::View" = type <{ %"class.blink::Worklist.119"*, i32, [4 x i8] }>
%"class.blink::Worklist<blink::EphemeronPairItem, 64, 4>::View" = type <{ %"class.blink::Worklist.126"*, i32, [4 x i8] }>
%"class.blink::MarkingVisitor::RecentlyRetracedWeakContainers" = type { %"class.std::__1::vector", i64 }
%"class.std::__1::vector" = type { %"class.std::__1::__vector_base" }
%"class.std::__1::__vector_base" = type { %"class.blink::HeapObjectHeader"**, %"class.blink::HeapObjectHeader"**, %"class.std::__1::__compressed_pair.235" }
%"class.blink::HeapObjectHeader" = type { i32, i16, i16 }
%"class.std::__1::__compressed_pair.235" = type { %"struct.std::__1::__compressed_pair_elem.236" }
%"struct.std::__1::__compressed_pair_elem.236" = type { %"class.blink::HeapObjectHeader"** }
%"class.std::__1::unique_ptr.217" = type { %"class.std::__1::__compressed_pair.218" }
%"class.std::__1::__compressed_pair.218" = type { %"struct.std::__1::__compressed_pair_elem.219" }
%"struct.std::__1::__compressed_pair_elem.219" = type { %"class.blink::ThreadState::IncrementalMarkingScheduler"* }
%"class.blink::ThreadState::IncrementalMarkingScheduler" = type opaque
%"class.std::__1::unique_ptr.223" = type { %"class.std::__1::__compressed_pair.224" }
%"class.std::__1::__compressed_pair.224" = type { %"struct.std::__1::__compressed_pair_elem.225" }
%"struct.std::__1::__compressed_pair_elem.225" = type { %"class.blink::MarkingSchedulingOracle"* }
%"class.blink::MarkingSchedulingOracle" = type opaque
%"class.base::JobHandle" = type { %class.scoped_refptr.229 }
%class.scoped_refptr.229 = type { %"class.base::internal::JobTaskSource"* }
%"class.base::internal::JobTaskSource" = type opaque
%"struct.std::__1::atomic.230" = type { %"struct.std::__1::__atomic_base.231" }
%"struct.std::__1::__atomic_base.231" = type { %"struct.std::__1::__cxx_atomic_impl.232" }
%"struct.std::__1::__cxx_atomic_impl.232" = type { %"struct.std::__1::__cxx_atomic_base_impl.233" }
%"struct.std::__1::__cxx_atomic_base_impl.233" = type { i8 }
%"class.base::TimeTicks" = type { %"class.base::time_internal::TimeBase" }
%"class.base::time_internal::TimeBase" = type { i64 }
%"class.base::WeakPtr" = type { %"class.base::internal::WeakPtrBase" }
%"class.base::internal::WeakPtrBase" = type { %"class.base::internal::WeakReference", i64 }
%"class.base::internal::WeakReference" = type { %class.scoped_refptr.234 }
%class.scoped_refptr.234 = type { %"class.base::internal::WeakReference::Flag"* }
%"class.base::internal::WeakReference::Flag" = type <{ %"class.base::RefCountedThreadSafe", %"class.base::AtomicFlag", [3 x i8] }>
%"class.base::RefCountedThreadSafe" = type { %"class.base::subtle::RefCountedThreadSafeBase" }
%"class.base::subtle::RefCountedThreadSafeBase" = type { %"class.base::AtomicRefCount" }
%"class.base::AtomicRefCount" = type { %"struct.std::__1::atomic.33" }
%"class.base::AtomicFlag" = type { %"struct.std::__1::atomic.38" }
%"class.blink::TextRun" = type <{ %union.anon.242, i32, i32, float, float, i16, [2 x i8], %"struct.blink::TabSize", [4 x i8] }>
%union.anon.242 = type { i8* }
%"struct.blink::TabSize" = type <{ float, i8, [3 x i8] }>
%"class.WTF::HashSet" = type opaque
%"class.blink::FloatRect" = type { %"class.blink::FloatPoint", %"class.blink::FloatSize" }
%"class.blink::FloatPoint" = type { float, float }
%"class.blink::FloatSize" = type { float, float }
%"class.blink::NonSharedCharacterBreakIterator" = type { i8, i8*, i32, i32, %"class.icu_69::BreakIterator"* }
%"class.icu_69::BreakIterator" = type <{ %"class.icu_69::UObject", [157 x i8], [157 x i8], [6 x i8] }>
%"class.icu_69::UObject" = type { i32 (...)** }
%"class.WTF::StringView" = type <{ %"class.WTF::StringImpl"*, i8*, i32, [4 x i8] }>

@_ZN3WTF7unicodeL28kHorizontalEllipsisCharacterE = internal constant i16 8230, align 2
@_ZN3WTF10StringImpl6empty_E = external local_unnamed_addr global %"class.WTF::StringImpl"*, align 8

; Function Attrs: nounwind ssp uwtable
define hidden %"class.WTF::StringImpl"* @_ZN5blink15StringTruncator14CenterTruncateERKN3WTF6StringEfRKNS_4FontE(%"class.WTF::String"* dereferenceable(8), float, %"class.blink::Font"* dereferenceable(88)) local_unnamed_addr #0 align 2 {
  %4 = tail call fastcc %"class.WTF::StringImpl"* @_ZN5blinkL14TruncateStringERKN3WTF6StringEfRKNS_4FontEPFjS3_jjPDsE(%"class.WTF::String"* dereferenceable(8) %0, float %1, %"class.blink::Font"* dereferenceable(88) %2, i32 (%"class.WTF::String"*, i32, i32, i16*)* nonnull @_ZN5blinkL22CenterTruncateToBufferERKN3WTF6StringEjjPDs)
  ret %"class.WTF::StringImpl"* %4
}

; Function Attrs: nounwind ssp uwtable
define internal fastcc %"class.WTF::StringImpl"* @_ZN5blinkL14TruncateStringERKN3WTF6StringEfRKNS_4FontEPFjS3_jjPDsE(%"class.WTF::String"* dereferenceable(8), float, %"class.blink::Font"* dereferenceable(88), i32 (%"class.WTF::String"*, i32, i32, i16*)* nocapture) unnamed_addr #0 {
  %5 = alloca %"class.blink::TextRun", align 8
  %6 = alloca %"class.blink::TextRun", align 8
  %7 = alloca %"class.blink::TextRun", align 8
  %8 = alloca %"class.WTF::String", align 8
  %9 = alloca [2048 x i16], align 16
  %10 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %0, i64 0, i32 0, i32 0
  %11 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %10, align 8
  %12 = icmp eq %"class.WTF::StringImpl"* %11, null
  br i1 %12, label %13, label %15

13:                                               ; preds = %4
  %14 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %8, i64 0, i32 0, i32 0
  store %"class.WTF::StringImpl"* null, %"class.WTF::StringImpl"** %14, align 8
  br label %165

15:                                               ; preds = %4
  %16 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %11, i64 0, i32 1
  %17 = load i32, i32* %16, align 4
  %18 = icmp eq i32 %17, 0
  br i1 %18, label %19, label %37

19:                                               ; preds = %15
  %20 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %8, i64 0, i32 0, i32 0
  store %"class.WTF::StringImpl"* %11, %"class.WTF::StringImpl"** %20, align 8
  %21 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %11, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %22 = load atomic i32, i32* %21 monotonic, align 4
  %23 = and i32 %22, 2
  %24 = icmp eq i32 %23, 0
  br i1 %24, label %25, label %165

25:                                               ; preds = %19
  %26 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %11, i64 0, i32 0
  %27 = load i32, i32* %26, align 4
  %28 = zext i32 %27 to i33
  %29 = tail call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %28, i33 1) #6
  %30 = extractvalue { i33, i1 } %29, 1
  %31 = extractvalue { i33, i1 } %29, 0
  %32 = icmp slt i33 %31, 0
  %33 = or i1 %30, %32
  br i1 %33, label %34, label %35, !prof !2

34:                                               ; preds = %25
  tail call void @llvm.trap() #6
  unreachable

35:                                               ; preds = %25
  %36 = trunc i33 %31 to i32
  store i32 %36, i32* %26, align 4
  br label %165

37:                                               ; preds = %15
  %38 = bitcast %"class.blink::TextRun"* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %38) #6
  %39 = getelementptr inbounds %"class.blink::TextRun", %"class.blink::TextRun"* %6, i64 0, i32 1
  %40 = getelementptr inbounds %"class.blink::TextRun", %"class.blink::TextRun"* %6, i64 0, i32 2
  %41 = getelementptr inbounds %"class.blink::TextRun", %"class.blink::TextRun"* %6, i64 0, i32 3
  %42 = getelementptr inbounds %"class.blink::TextRun", %"class.blink::TextRun"* %6, i64 0, i32 4
  %43 = getelementptr inbounds %"class.blink::TextRun", %"class.blink::TextRun"* %6, i64 0, i32 5
  %44 = getelementptr inbounds %"class.blink::TextRun", %"class.blink::TextRun"* %6, i64 0, i32 6, i64 0
  store i8 -86, i8* %44, align 2
  %45 = getelementptr inbounds %"class.blink::TextRun", %"class.blink::TextRun"* %6, i64 0, i32 6, i64 1
  store i8 -86, i8* %45, align 1
  %46 = getelementptr inbounds %"class.blink::TextRun", %"class.blink::TextRun"* %6, i64 0, i32 7, i32 0
  %47 = getelementptr inbounds %"class.blink::TextRun", %"class.blink::TextRun"* %6, i64 0, i32 7, i32 1
  %48 = bitcast i8* %47 to i64*
  store i64 -6148914691236517205, i64* %48, align 4
  store i32 1, i32* %39, align 8
  store i32 1, i32* %40, align 4
  store float 0.000000e+00, float* %41, align 8
  store float 0.000000e+00, float* %42, align 4
  store i16 -22527, i16* %43, align 8
  store float 0.000000e+00, float* %46, align 4
  %49 = bitcast %"class.blink::TextRun"* %6 to i16**
  store i16* @_ZN3WTF7unicodeL28kHorizontalEllipsisCharacterE, i16** %49, align 8
  %50 = call float @_ZNK5blink4Font5WidthERKNS_7TextRunEPN3WTF7HashSetIPKNS_14SimpleFontDataENS4_7PtrHashIS7_EENS4_10HashTraitsIS8_EENS4_18PartitionAllocatorEEEPNS_9FloatRectE(%"class.blink::Font"* %2, %"class.blink::TextRun"* nonnull dereferenceable(40) %6, %"class.WTF::HashSet"* null, %"class.blink::FloatRect"* null) #6
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %38) #6
  %51 = bitcast [2048 x i16]* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4096, i8* nonnull %51) #6
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %51, i8 -86, i64 4096, i1 false)
  %52 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %10, align 8
  %53 = icmp eq %"class.WTF::StringImpl"* %52, null
  br i1 %53, label %54, label %56

54:                                               ; preds = %37
  %55 = getelementptr inbounds [2048 x i16], [2048 x i16]* %9, i64 0, i64 0
  br label %65

56:                                               ; preds = %37
  %57 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %52, i64 0, i32 1
  %58 = load i32, i32* %57, align 4
  %59 = icmp ugt i32 %58, 2048
  %60 = getelementptr inbounds [2048 x i16], [2048 x i16]* %9, i64 0, i64 0
  br i1 %59, label %61, label %63

61:                                               ; preds = %56
  %62 = call i32 @_ZN5blinkL22CenterTruncateToBufferERKN3WTF6StringEjjPDs(%"class.WTF::String"* dereferenceable(8) %0, i32 %58, i32 2047, i16* nonnull %60)
  br label %65

63:                                               ; preds = %56
  %64 = call i32 @_ZNK3WTF10StringImpl6CopyToEPDsjj(%"class.WTF::StringImpl"* nonnull %52, i16* nonnull %60, i32 0, i32 %58) #6
  br label %65

65:                                               ; preds = %63, %54, %61
  %66 = phi i16* [ %60, %61 ], [ %60, %63 ], [ %55, %54 ]
  %67 = phi i32 [ %58, %61 ], [ %58, %63 ], [ 0, %54 ]
  %68 = phi i32 [ %62, %61 ], [ %58, %63 ], [ 0, %54 ]
  %69 = phi i32 [ 2047, %61 ], [ %58, %63 ], [ 0, %54 ]
  %70 = bitcast %"class.blink::TextRun"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %70) #6
  %71 = getelementptr inbounds %"class.blink::TextRun", %"class.blink::TextRun"* %5, i64 0, i32 1
  %72 = getelementptr inbounds %"class.blink::TextRun", %"class.blink::TextRun"* %5, i64 0, i32 2
  %73 = getelementptr inbounds %"class.blink::TextRun", %"class.blink::TextRun"* %5, i64 0, i32 3
  %74 = getelementptr inbounds %"class.blink::TextRun", %"class.blink::TextRun"* %5, i64 0, i32 4
  %75 = getelementptr inbounds %"class.blink::TextRun", %"class.blink::TextRun"* %5, i64 0, i32 5
  %76 = getelementptr inbounds %"class.blink::TextRun", %"class.blink::TextRun"* %5, i64 0, i32 6, i64 0
  store i8 -86, i8* %76, align 2
  %77 = getelementptr inbounds %"class.blink::TextRun", %"class.blink::TextRun"* %5, i64 0, i32 6, i64 1
  store i8 -86, i8* %77, align 1
  %78 = getelementptr inbounds %"class.blink::TextRun", %"class.blink::TextRun"* %5, i64 0, i32 7, i32 0
  %79 = getelementptr inbounds %"class.blink::TextRun", %"class.blink::TextRun"* %5, i64 0, i32 7, i32 1
  %80 = bitcast i8* %79 to i64*
  store i64 -6148914691236517205, i64* %80, align 4
  store i32 %68, i32* %71, align 8
  store i32 %68, i32* %72, align 4
  store float 0.000000e+00, float* %73, align 8
  store float 0.000000e+00, float* %74, align 4
  store i16 -22527, i16* %75, align 8
  store float 0.000000e+00, float* %78, align 4
  %81 = bitcast %"class.blink::TextRun"* %5 to i16**
  store i16* %66, i16** %81, align 8
  %82 = call float @_ZNK5blink4Font5WidthERKNS_7TextRunEPN3WTF7HashSetIPKNS_14SimpleFontDataENS4_7PtrHashIS7_EENS4_10HashTraitsIS8_EENS4_18PartitionAllocatorEEEPNS_9FloatRectE(%"class.blink::Font"* %2, %"class.blink::TextRun"* nonnull dereferenceable(40) %5, %"class.WTF::HashSet"* null, %"class.blink::FloatRect"* null) #6
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %70) #6
  %83 = fcmp ugt float %82, %1
  br i1 %83, label %105, label %84

84:                                               ; preds = %65
  %85 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %10, align 8
  %86 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %8, i64 0, i32 0, i32 0
  store %"class.WTF::StringImpl"* %85, %"class.WTF::StringImpl"** %86, align 8
  %87 = icmp eq %"class.WTF::StringImpl"* %85, null
  br i1 %87, label %164, label %88

88:                                               ; preds = %84
  %89 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %85, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %90 = load atomic i32, i32* %89 monotonic, align 4
  %91 = and i32 %90, 2
  %92 = icmp eq i32 %91, 0
  br i1 %92, label %93, label %164

93:                                               ; preds = %88
  %94 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %85, i64 0, i32 0
  %95 = load i32, i32* %94, align 4
  %96 = zext i32 %95 to i33
  %97 = call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %96, i33 1) #6
  %98 = extractvalue { i33, i1 } %97, 1
  %99 = extractvalue { i33, i1 } %97, 0
  %100 = icmp slt i33 %99, 0
  %101 = or i1 %98, %100
  br i1 %101, label %102, label %103, !prof !2

102:                                              ; preds = %93
  call void @llvm.trap() #6
  unreachable

103:                                              ; preds = %93
  %104 = trunc i33 %99 to i32
  store i32 %104, i32* %94, align 4
  br label %164

105:                                              ; preds = %65
  %106 = fcmp ult float %50, %1
  %107 = xor i1 %106, true
  %108 = zext i1 %107 to i32
  %109 = select i1 %106, i32 %69, i32 2
  %110 = select i1 %106, i32 1, i32 2
  %111 = icmp ult i32 %110, %109
  br i1 %111, label %112, label %153

112:                                              ; preds = %105
  %113 = bitcast %"class.blink::TextRun"* %7 to i8*
  %114 = getelementptr inbounds %"class.blink::TextRun", %"class.blink::TextRun"* %7, i64 0, i32 1
  %115 = getelementptr inbounds %"class.blink::TextRun", %"class.blink::TextRun"* %7, i64 0, i32 2
  %116 = getelementptr inbounds %"class.blink::TextRun", %"class.blink::TextRun"* %7, i64 0, i32 3
  %117 = getelementptr inbounds %"class.blink::TextRun", %"class.blink::TextRun"* %7, i64 0, i32 4
  %118 = getelementptr inbounds %"class.blink::TextRun", %"class.blink::TextRun"* %7, i64 0, i32 5
  %119 = getelementptr inbounds %"class.blink::TextRun", %"class.blink::TextRun"* %7, i64 0, i32 6, i64 0
  %120 = getelementptr inbounds %"class.blink::TextRun", %"class.blink::TextRun"* %7, i64 0, i32 6, i64 1
  %121 = getelementptr inbounds %"class.blink::TextRun", %"class.blink::TextRun"* %7, i64 0, i32 7, i32 0
  %122 = getelementptr inbounds %"class.blink::TextRun", %"class.blink::TextRun"* %7, i64 0, i32 7, i32 1
  %123 = bitcast i8* %122 to i64*
  %124 = bitcast %"class.blink::TextRun"* %7 to i16**
  br label %125

125:                                              ; preds = %112, %142
  %126 = phi i32 [ %110, %112 ], [ %151, %142 ]
  %127 = phi float [ %82, %112 ], [ %150, %142 ]
  %128 = phi i32 [ %109, %112 ], [ %149, %142 ]
  %129 = phi float [ %50, %112 ], [ %148, %142 ]
  %130 = phi i32 [ %108, %112 ], [ %147, %142 ]
  %131 = sub i32 %128, %130
  %132 = uitofp i32 %131 to float
  %133 = fsub float %127, %129
  %134 = fdiv float %132, %133
  %135 = fmul float %134, %1
  %136 = fptoui float %135 to i32
  %137 = icmp ult i32 %130, %136
  br i1 %137, label %138, label %142

138:                                              ; preds = %125
  %139 = icmp ugt i32 %128, %136
  %140 = add i32 %128, -1
  %141 = select i1 %139, i32 %136, i32 %140
  br label %142

142:                                              ; preds = %138, %125
  %143 = phi i32 [ %126, %125 ], [ %141, %138 ]
  %144 = call i32 %3(%"class.WTF::String"* dereferenceable(8) %0, i32 %67, i32 %143, i16* %66) #6, !callees !3
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %113) #6
  store i8 -86, i8* %119, align 2
  store i8 -86, i8* %120, align 1
  store i64 -6148914691236517205, i64* %123, align 4
  store i32 %144, i32* %114, align 8
  store i32 %144, i32* %115, align 4
  store float 0.000000e+00, float* %116, align 8
  store float 0.000000e+00, float* %117, align 4
  store i16 -22527, i16* %118, align 8
  store float 0.000000e+00, float* %121, align 4
  store i16* %66, i16** %124, align 8
  %145 = call float @_ZNK5blink4Font5WidthERKNS_7TextRunEPN3WTF7HashSetIPKNS_14SimpleFontDataENS4_7PtrHashIS7_EENS4_10HashTraitsIS8_EENS4_18PartitionAllocatorEEEPNS_9FloatRectE(%"class.blink::Font"* %2, %"class.blink::TextRun"* nonnull dereferenceable(40) %7, %"class.WTF::HashSet"* null, %"class.blink::FloatRect"* null) #6
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %113) #6
  %146 = fcmp ugt float %145, %1
  %147 = select i1 %146, i32 %130, i32 %143
  %148 = select i1 %146, float %129, float %145
  %149 = select i1 %146, i32 %143, i32 %128
  %150 = select i1 %146, float %145, float %127
  %151 = add i32 %147, 1
  %152 = icmp ult i32 %151, %149
  br i1 %152, label %125, label %153

153:                                              ; preds = %142, %105
  %154 = phi i32 [ %68, %105 ], [ %144, %142 ]
  %155 = phi i32 [ %69, %105 ], [ %143, %142 ]
  %156 = phi i32 [ %108, %105 ], [ %147, %142 ]
  %157 = icmp eq i32 %156, 0
  %158 = select i1 %157, i32 1, i32 %156
  %159 = icmp eq i32 %155, %158
  br i1 %159, label %162, label %160

160:                                              ; preds = %153
  %161 = call i32 %3(%"class.WTF::String"* dereferenceable(8) %0, i32 %67, i32 %158, i16* %66) #6, !callees !3
  br label %162

162:                                              ; preds = %153, %160
  %163 = phi i32 [ %161, %160 ], [ %154, %153 ]
  call void @_ZN3WTF6StringC1EPKDsj(%"class.WTF::String"* nonnull %8, i16* %66, i32 %163) #6
  br label %164

164:                                              ; preds = %103, %88, %84, %162
  call void @llvm.lifetime.end.p0i8(i64 4096, i8* nonnull %51) #6
  br label %165

165:                                              ; preds = %35, %19, %13, %164
  %166 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %8, i64 0, i32 0, i32 0
  %167 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %166, align 8
  ret %"class.WTF::StringImpl"* %167
}

; Function Attrs: nounwind ssp uwtable
define internal i32 @_ZN5blinkL22CenterTruncateToBufferERKN3WTF6StringEjjPDs(%"class.WTF::String"* nocapture readonly dereferenceable(8), i32, i32, i16*) #0 {
  %5 = alloca %"class.blink::NonSharedCharacterBreakIterator", align 8
  %6 = alloca %"class.WTF::StringView", align 8
  %7 = add i32 %2, 1
  %8 = lshr i32 %7, 1
  %9 = getelementptr inbounds %"class.blink::NonSharedCharacterBreakIterator", %"class.blink::NonSharedCharacterBreakIterator"* %5, i64 0, i32 0
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %9) #6
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %9, i8 -86, i64 32, i1 false)
  %10 = bitcast %"class.WTF::StringView"* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %10) #6
  %11 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %0, i64 0, i32 0, i32 0
  %12 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %11, align 8
  %13 = icmp eq %"class.WTF::StringImpl"* %12, null
  br i1 %13, label %14, label %18

14:                                               ; preds = %4
  %15 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %6, i64 0, i32 1
  store i8* null, i8** %15, align 8
  %16 = load i64, i64* bitcast (%"class.WTF::StringImpl"** @_ZN3WTF10StringImpl6empty_E to i64*), align 8
  %17 = bitcast %"class.WTF::StringView"* %6 to i64*
  store i64 %16, i64* %17, align 8
  br label %25

18:                                               ; preds = %4
  %19 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %6, i64 0, i32 0
  store %"class.WTF::StringImpl"* %12, %"class.WTF::StringImpl"** %19, align 8
  %20 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %12, i64 0, i32 1
  %21 = load i32, i32* %20, align 4
  %22 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %12, i64 1
  %23 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %6, i64 0, i32 1
  %24 = bitcast i8** %23 to %"class.WTF::StringImpl"**
  store %"class.WTF::StringImpl"* %22, %"class.WTF::StringImpl"** %24, align 8
  br label %25

25:                                               ; preds = %14, %18
  %26 = phi i32 [ %21, %18 ], [ 0, %14 ]
  %27 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %6, i64 0, i32 2
  store i32 %26, i32* %27, align 8
  call void @_ZN5blink31NonSharedCharacterBreakIteratorC1ERKN3WTF10StringViewE(%"class.blink::NonSharedCharacterBreakIterator"* nonnull %5, %"class.WTF::StringView"* nonnull dereferenceable(24) %6) #6
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %10) #6
  %28 = xor i32 %2, -1
  %29 = add i32 %28, %1
  %30 = add i32 %29, %8
  %31 = call i32 @_ZNK5blink31NonSharedCharacterBreakIterator9FollowingEi(%"class.blink::NonSharedCharacterBreakIterator"* nonnull %5, i32 %30) #6
  %32 = icmp eq i32 %31, -1
  %33 = select i1 %32, i32 %1, i32 %31
  %34 = call zeroext i1 @_ZNK5blink31NonSharedCharacterBreakIterator7IsBreakEi(%"class.blink::NonSharedCharacterBreakIterator"* nonnull %5, i32 %8) #6
  br i1 %34, label %39, label %35

35:                                               ; preds = %25
  %36 = call i32 @_ZNK5blink31NonSharedCharacterBreakIterator9PrecedingEi(%"class.blink::NonSharedCharacterBreakIterator"* nonnull %5, i32 %8) #6
  %37 = icmp eq i32 %36, -1
  %38 = select i1 %37, i32 0, i32 %36
  br label %39

39:                                               ; preds = %25, %35
  %40 = phi i32 [ %38, %35 ], [ %8, %25 ]
  %41 = add i32 %40, 1
  %42 = sub i32 %1, %33
  %43 = add i32 %41, %42
  %44 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %11, align 8
  %45 = icmp eq %"class.WTF::StringImpl"* %44, null
  br i1 %45, label %48, label %46

46:                                               ; preds = %39
  %47 = call i32 @_ZNK3WTF10StringImpl6CopyToEPDsjj(%"class.WTF::StringImpl"* nonnull %44, i16* %3, i32 0, i32 %40) #6
  br label %48

48:                                               ; preds = %39, %46
  %49 = zext i32 %40 to i64
  %50 = getelementptr inbounds i16, i16* %3, i64 %49
  store i16 8230, i16* %50, align 2
  %51 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %11, align 8
  %52 = icmp eq %"class.WTF::StringImpl"* %51, null
  br i1 %52, label %57, label %53

53:                                               ; preds = %48
  %54 = zext i32 %41 to i64
  %55 = getelementptr inbounds i16, i16* %3, i64 %54
  %56 = call i32 @_ZNK3WTF10StringImpl6CopyToEPDsjj(%"class.WTF::StringImpl"* nonnull %51, i16* %55, i32 %33, i32 %42) #6
  br label %57

57:                                               ; preds = %48, %53
  call void @_ZN5blink31NonSharedCharacterBreakIteratorD1Ev(%"class.blink::NonSharedCharacterBreakIterator"* nonnull %5) #6
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %9) #6
  ret i32 %43
}

; Function Attrs: nounwind ssp uwtable
define hidden %"class.WTF::StringImpl"* @_ZN5blink15StringTruncator13RightTruncateERKN3WTF6StringEfRKNS_4FontE(%"class.WTF::String"* dereferenceable(8), float, %"class.blink::Font"* dereferenceable(88)) local_unnamed_addr #0 align 2 {
  %4 = tail call fastcc %"class.WTF::StringImpl"* @_ZN5blinkL14TruncateStringERKN3WTF6StringEfRKNS_4FontEPFjS3_jjPDsE(%"class.WTF::String"* dereferenceable(8) %0, float %1, %"class.blink::Font"* dereferenceable(88) %2, i32 (%"class.WTF::String"*, i32, i32, i16*)* nonnull @_ZN5blinkL21RightTruncateToBufferERKN3WTF6StringEjjPDs)
  ret %"class.WTF::StringImpl"* %4
}

; Function Attrs: nounwind ssp uwtable
define internal i32 @_ZN5blinkL21RightTruncateToBufferERKN3WTF6StringEjjPDs(%"class.WTF::String"* nocapture readonly dereferenceable(8), i32, i32, i16*) #0 {
  %5 = alloca %"class.blink::NonSharedCharacterBreakIterator", align 8
  %6 = alloca %"class.WTF::StringView", align 8
  %7 = getelementptr inbounds %"class.blink::NonSharedCharacterBreakIterator", %"class.blink::NonSharedCharacterBreakIterator"* %5, i64 0, i32 0
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %7) #6
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %7, i8 -86, i64 32, i1 false)
  %8 = bitcast %"class.WTF::StringView"* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %8) #6
  %9 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %0, i64 0, i32 0, i32 0
  %10 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %9, align 8
  %11 = icmp eq %"class.WTF::StringImpl"* %10, null
  br i1 %11, label %12, label %16

12:                                               ; preds = %4
  %13 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %6, i64 0, i32 1
  store i8* null, i8** %13, align 8
  %14 = load i64, i64* bitcast (%"class.WTF::StringImpl"** @_ZN3WTF10StringImpl6empty_E to i64*), align 8
  %15 = bitcast %"class.WTF::StringView"* %6 to i64*
  store i64 %14, i64* %15, align 8
  br label %23

16:                                               ; preds = %4
  %17 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %6, i64 0, i32 0
  store %"class.WTF::StringImpl"* %10, %"class.WTF::StringImpl"** %17, align 8
  %18 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %10, i64 0, i32 1
  %19 = load i32, i32* %18, align 4
  %20 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %10, i64 1
  %21 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %6, i64 0, i32 1
  %22 = bitcast i8** %21 to %"class.WTF::StringImpl"**
  store %"class.WTF::StringImpl"* %20, %"class.WTF::StringImpl"** %22, align 8
  br label %23

23:                                               ; preds = %12, %16
  %24 = phi i32 [ %19, %16 ], [ 0, %12 ]
  %25 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %6, i64 0, i32 2
  store i32 %24, i32* %25, align 8
  call void @_ZN5blink31NonSharedCharacterBreakIteratorC1ERKN3WTF10StringViewE(%"class.blink::NonSharedCharacterBreakIterator"* nonnull %5, %"class.WTF::StringView"* nonnull dereferenceable(24) %6) #6
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %8) #6
  %26 = call zeroext i1 @_ZNK5blink31NonSharedCharacterBreakIterator7IsBreakEi(%"class.blink::NonSharedCharacterBreakIterator"* nonnull %5, i32 %2) #6
  br i1 %26, label %31, label %27

27:                                               ; preds = %23
  %28 = call i32 @_ZNK5blink31NonSharedCharacterBreakIterator9PrecedingEi(%"class.blink::NonSharedCharacterBreakIterator"* nonnull %5, i32 %2) #6
  %29 = icmp eq i32 %28, -1
  %30 = select i1 %29, i32 0, i32 %28
  br label %31

31:                                               ; preds = %23, %27
  %32 = phi i32 [ %30, %27 ], [ %2, %23 ]
  %33 = add i32 %32, 1
  %34 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %9, align 8
  %35 = icmp eq %"class.WTF::StringImpl"* %34, null
  br i1 %35, label %38, label %36

36:                                               ; preds = %31
  %37 = call i32 @_ZNK3WTF10StringImpl6CopyToEPDsjj(%"class.WTF::StringImpl"* nonnull %34, i16* %3, i32 0, i32 %32) #6
  br label %38

38:                                               ; preds = %31, %36
  %39 = zext i32 %32 to i64
  %40 = getelementptr inbounds i16, i16* %3, i64 %39
  store i16 8230, i16* %40, align 2
  call void @_ZN5blink31NonSharedCharacterBreakIteratorD1Ev(%"class.blink::NonSharedCharacterBreakIterator"* nonnull %5) #6
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %7) #6
  ret i32 %33
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

declare void @_ZN3WTF6StringC1EPKDsj(%"class.WTF::String"*, i16*, i32) unnamed_addr #2

; Function Attrs: nounwind readnone speculatable
declare { i33, i1 } @llvm.sadd.with.overflow.i33(i33, i33) #3

; Function Attrs: cold noreturn nounwind
declare void @llvm.trap() #4

declare float @_ZNK5blink4Font5WidthERKNS_7TextRunEPN3WTF7HashSetIPKNS_14SimpleFontDataENS4_7PtrHashIS7_EENS4_10HashTraitsIS8_EENS4_18PartitionAllocatorEEEPNS_9FloatRectE(%"class.blink::Font"*, %"class.blink::TextRun"* dereferenceable(40), %"class.WTF::HashSet"*, %"class.blink::FloatRect"*) local_unnamed_addr #2

declare i32 @_ZNK3WTF10StringImpl6CopyToEPDsjj(%"class.WTF::StringImpl"*, i16*, i32, i32) local_unnamed_addr #2

declare void @_ZN5blink31NonSharedCharacterBreakIteratorC1ERKN3WTF10StringViewE(%"class.blink::NonSharedCharacterBreakIterator"*, %"class.WTF::StringView"* dereferenceable(24)) unnamed_addr #2

; Function Attrs: nounwind
declare void @_ZN5blink31NonSharedCharacterBreakIteratorD1Ev(%"class.blink::NonSharedCharacterBreakIterator"*) unnamed_addr #5

declare i32 @_ZNK5blink31NonSharedCharacterBreakIterator9FollowingEi(%"class.blink::NonSharedCharacterBreakIterator"*, i32) local_unnamed_addr #2

declare zeroext i1 @_ZNK5blink31NonSharedCharacterBreakIterator7IsBreakEi(%"class.blink::NonSharedCharacterBreakIterator"*, i32) local_unnamed_addr #2

declare i32 @_ZNK5blink31NonSharedCharacterBreakIterator9PrecedingEi(%"class.blink::NonSharedCharacterBreakIterator"*, i32) local_unnamed_addr #2

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind readnone speculatable }
attributes #4 = { cold noreturn nounwind }
attributes #5 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{!"branch_weights", i32 1, i32 2000}
!3 = !{i32 (%"class.WTF::String"*, i32, i32, i16*)* @_ZN5blinkL21RightTruncateToBufferERKN3WTF6StringEjjPDs, i32 (%"class.WTF::String"*, i32, i32, i16*)* @_ZN5blinkL22CenterTruncateToBufferERKN3WTF6StringEjjPDs}
