; ModuleID = '../../third_party/blink/renderer/platform/geometry/calculation_expression_node.cc'
source_filename = "../../third_party/blink/renderer/platform/geometry/calculation_expression_node.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"class.blink::CalculationExpressionLeafNode" = type { %"class.blink::CalculationExpressionNode.base", %"struct.blink::PixelsAndPercent", [4 x i8] }
%"class.blink::CalculationExpressionNode.base" = type <{ i32 (...)**, %"class.WTF::RefCounted" }>
%"class.WTF::RefCounted" = type { %"class.base::RefCounted" }
%"class.base::RefCounted" = type { %"class.base::subtle::RefCountedBase" }
%"class.base::subtle::RefCountedBase" = type { i32 }
%"struct.blink::PixelsAndPercent" = type { float, float }
%"class.blink::CalculationExpressionNode" = type <{ i32 (...)**, %"class.WTF::RefCounted", [4 x i8] }>
%"class.blink::CalculationExpressionMultiplicationNode" = type <{ %"class.blink::CalculationExpressionNode.base", [4 x i8], %class.scoped_refptr, float, [4 x i8] }>
%class.scoped_refptr = type { %"class.blink::CalculationExpressionNode"* }
%"class.blink::CalculationExpressionAdditiveNode" = type <{ %"class.blink::CalculationExpressionNode.base", [4 x i8], %class.scoped_refptr, %class.scoped_refptr, i32, [4 x i8] }>
%"class.WTF::Vector" = type { %"class.WTF::VectorBuffer" }
%"class.WTF::VectorBuffer" = type { %"class.WTF::VectorBufferBase" }
%"class.WTF::VectorBufferBase" = type { %class.scoped_refptr*, i32, i32 }
%"class.blink::CalculationExpressionComparisonNode" = type <{ %"class.blink::CalculationExpressionNode.base", [4 x i8], %"class.WTF::Vector", i32, [4 x i8] }>
%"class.logging::CheckOpResult" = type { i8* }
%"class.logging::CheckError" = type { %"class.logging::LogMessage"* }
%"class.logging::LogMessage" = type { i32 (...)**, i32, %"class.std::__1::basic_ostringstream", i64, i8*, i32, %"class.base::ScopedClearLastErrorBase" }
%"class.std::__1::basic_ostringstream" = type { %"class.std::__1::basic_ostream.base", %"class.std::__1::basic_stringbuf", %"class.std::__1::basic_ios.base" }
%"class.std::__1::basic_ostream.base" = type { i32 (...)** }
%"class.std::__1::basic_stringbuf" = type <{ %"class.std::__1::basic_streambuf", %"class.std::__1::basic_string", i8*, i32, [4 x i8] }>
%"class.std::__1::basic_streambuf" = type { i32 (...)**, %"class.std::__1::locale", i8*, i8*, i8*, i8*, i8*, i8* }
%"class.std::__1::locale" = type { %"class.std::__1::locale::__imp"* }
%"class.std::__1::locale::__imp" = type opaque
%"class.std::__1::basic_string" = type { %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" = type { %union.anon }
%union.anon = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" = type { i8*, i64, i64 }
%"class.std::__1::basic_ios.base" = type <{ %"class.std::__1::ios_base", %"class.std::__1::basic_ostream"*, i32 }>
%"class.std::__1::ios_base" = type { i32 (...)**, i32, i64, i64, i32, i32, i8*, i8*, void (i32, %"class.std::__1::ios_base"*, i32)**, i32*, i64, i64, i64*, i64, i64, i8**, i64, i64 }
%"class.std::__1::basic_ostream" = type { i32 (...)**, %"class.std::__1::basic_ios.base" }
%"class.base::ScopedClearLastErrorBase" = type { i32 }

$_ZNK5blink29CalculationExpressionLeafNode6IsLeafEv = comdat any

$_ZNK5blink25CalculationExpressionNode16IsMultiplicationEv = comdat any

$_ZNK5blink25CalculationExpressionNode10IsAdditiveEv = comdat any

$_ZNK5blink25CalculationExpressionNode12IsComparisonEv = comdat any

$_ZN5blink25CalculationExpressionNodeD2Ev = comdat any

$_ZN5blink29CalculationExpressionLeafNodeD0Ev = comdat any

$_ZNK5blink25CalculationExpressionNode6IsLeafEv = comdat any

$_ZNK5blink39CalculationExpressionMultiplicationNode16IsMultiplicationEv = comdat any

$_ZN5blink39CalculationExpressionMultiplicationNodeD2Ev = comdat any

$_ZN5blink39CalculationExpressionMultiplicationNodeD0Ev = comdat any

$_ZNK5blink33CalculationExpressionAdditiveNode10IsAdditiveEv = comdat any

$_ZN5blink33CalculationExpressionAdditiveNodeD2Ev = comdat any

$_ZN5blink33CalculationExpressionAdditiveNodeD0Ev = comdat any

$_ZNK5blink35CalculationExpressionComparisonNode12IsComparisonEv = comdat any

$_ZN5blink35CalculationExpressionComparisonNodeD2Ev = comdat any

$_ZN5blink35CalculationExpressionComparisonNodeD0Ev = comdat any

$_ZN3WTF6VectorI13scoped_refptrIKN5blink25CalculationExpressionNodeEELj0ENS_18PartitionAllocatorEE2atEj = comdat any

$_ZNK3WTF6VectorI13scoped_refptrIKN5blink25CalculationExpressionNodeEELj0ENS_18PartitionAllocatorEE2atEj = comdat any

$_ZN3WTF18PartitionAllocator13QuantizedSizeI13scoped_refptrIKN5blink25CalculationExpressionNodeEEEEmm = comdat any

$_ZN3WTF6VectorI13scoped_refptrIKN5blink25CalculationExpressionNodeEELj0ENS_18PartitionAllocatorEE14AppendSlowCaseIS5_EEvOT_ = comdat any

@_ZTVN5blink29CalculationExpressionLeafNodeE = hidden unnamed_addr constant { [11 x i8*] } { [11 x i8*] [i8* null, i8* null, i8* bitcast (float (%"class.blink::CalculationExpressionLeafNode"*, float)* @_ZNK5blink29CalculationExpressionLeafNode8EvaluateEf to i8*), i8* bitcast (i1 (%"class.blink::CalculationExpressionLeafNode"*, %"class.blink::CalculationExpressionNode"*)* @_ZNK5blink29CalculationExpressionLeafNodeeqERKNS_25CalculationExpressionNodeE to i8*), i8* bitcast (i1 (%"class.blink::CalculationExpressionLeafNode"*)* @_ZNK5blink29CalculationExpressionLeafNode6IsLeafEv to i8*), i8* bitcast (i1 (%"class.blink::CalculationExpressionNode"*)* @_ZNK5blink25CalculationExpressionNode16IsMultiplicationEv to i8*), i8* bitcast (i1 (%"class.blink::CalculationExpressionNode"*)* @_ZNK5blink25CalculationExpressionNode10IsAdditiveEv to i8*), i8* bitcast (i1 (%"class.blink::CalculationExpressionNode"*)* @_ZNK5blink25CalculationExpressionNode12IsComparisonEv to i8*), i8* bitcast (%"class.blink::CalculationExpressionNode"* (%"class.blink::CalculationExpressionLeafNode"*, double)* @_ZNK5blink29CalculationExpressionLeafNode4ZoomEd to i8*), i8* bitcast (void (%"class.blink::CalculationExpressionNode"*)* @_ZN5blink25CalculationExpressionNodeD2Ev to i8*), i8* bitcast (void (%"class.blink::CalculationExpressionLeafNode"*)* @_ZN5blink29CalculationExpressionLeafNodeD0Ev to i8*)] }, align 8
@_ZTVN5blink39CalculationExpressionMultiplicationNodeE = hidden unnamed_addr constant { [11 x i8*] } { [11 x i8*] [i8* null, i8* null, i8* bitcast (float (%"class.blink::CalculationExpressionMultiplicationNode"*, float)* @_ZNK5blink39CalculationExpressionMultiplicationNode8EvaluateEf to i8*), i8* bitcast (i1 (%"class.blink::CalculationExpressionMultiplicationNode"*, %"class.blink::CalculationExpressionNode"*)* @_ZNK5blink39CalculationExpressionMultiplicationNodeeqERKNS_25CalculationExpressionNodeE to i8*), i8* bitcast (i1 (%"class.blink::CalculationExpressionNode"*)* @_ZNK5blink25CalculationExpressionNode6IsLeafEv to i8*), i8* bitcast (i1 (%"class.blink::CalculationExpressionMultiplicationNode"*)* @_ZNK5blink39CalculationExpressionMultiplicationNode16IsMultiplicationEv to i8*), i8* bitcast (i1 (%"class.blink::CalculationExpressionNode"*)* @_ZNK5blink25CalculationExpressionNode10IsAdditiveEv to i8*), i8* bitcast (i1 (%"class.blink::CalculationExpressionNode"*)* @_ZNK5blink25CalculationExpressionNode12IsComparisonEv to i8*), i8* bitcast (%"class.blink::CalculationExpressionNode"* (%"class.blink::CalculationExpressionMultiplicationNode"*, double)* @_ZNK5blink39CalculationExpressionMultiplicationNode4ZoomEd to i8*), i8* bitcast (void (%"class.blink::CalculationExpressionMultiplicationNode"*)* @_ZN5blink39CalculationExpressionMultiplicationNodeD2Ev to i8*), i8* bitcast (void (%"class.blink::CalculationExpressionMultiplicationNode"*)* @_ZN5blink39CalculationExpressionMultiplicationNodeD0Ev to i8*)] }, align 8
@_ZTVN5blink33CalculationExpressionAdditiveNodeE = hidden unnamed_addr constant { [11 x i8*] } { [11 x i8*] [i8* null, i8* null, i8* bitcast (float (%"class.blink::CalculationExpressionAdditiveNode"*, float)* @_ZNK5blink33CalculationExpressionAdditiveNode8EvaluateEf to i8*), i8* bitcast (i1 (%"class.blink::CalculationExpressionAdditiveNode"*, %"class.blink::CalculationExpressionNode"*)* @_ZNK5blink33CalculationExpressionAdditiveNodeeqERKNS_25CalculationExpressionNodeE to i8*), i8* bitcast (i1 (%"class.blink::CalculationExpressionNode"*)* @_ZNK5blink25CalculationExpressionNode6IsLeafEv to i8*), i8* bitcast (i1 (%"class.blink::CalculationExpressionNode"*)* @_ZNK5blink25CalculationExpressionNode16IsMultiplicationEv to i8*), i8* bitcast (i1 (%"class.blink::CalculationExpressionAdditiveNode"*)* @_ZNK5blink33CalculationExpressionAdditiveNode10IsAdditiveEv to i8*), i8* bitcast (i1 (%"class.blink::CalculationExpressionNode"*)* @_ZNK5blink25CalculationExpressionNode12IsComparisonEv to i8*), i8* bitcast (%"class.blink::CalculationExpressionNode"* (%"class.blink::CalculationExpressionAdditiveNode"*, double)* @_ZNK5blink33CalculationExpressionAdditiveNode4ZoomEd to i8*), i8* bitcast (void (%"class.blink::CalculationExpressionAdditiveNode"*)* @_ZN5blink33CalculationExpressionAdditiveNodeD2Ev to i8*), i8* bitcast (void (%"class.blink::CalculationExpressionAdditiveNode"*)* @_ZN5blink33CalculationExpressionAdditiveNodeD0Ev to i8*)] }, align 8
@_ZTVN5blink35CalculationExpressionComparisonNodeE = hidden unnamed_addr constant { [11 x i8*] } { [11 x i8*] [i8* null, i8* null, i8* bitcast (float (%"class.blink::CalculationExpressionComparisonNode"*, float)* @_ZNK5blink35CalculationExpressionComparisonNode8EvaluateEf to i8*), i8* bitcast (i1 (%"class.blink::CalculationExpressionComparisonNode"*, %"class.blink::CalculationExpressionNode"*)* @_ZNK5blink35CalculationExpressionComparisonNodeeqERKNS_25CalculationExpressionNodeE to i8*), i8* bitcast (i1 (%"class.blink::CalculationExpressionNode"*)* @_ZNK5blink25CalculationExpressionNode6IsLeafEv to i8*), i8* bitcast (i1 (%"class.blink::CalculationExpressionNode"*)* @_ZNK5blink25CalculationExpressionNode16IsMultiplicationEv to i8*), i8* bitcast (i1 (%"class.blink::CalculationExpressionNode"*)* @_ZNK5blink25CalculationExpressionNode10IsAdditiveEv to i8*), i8* bitcast (i1 (%"class.blink::CalculationExpressionComparisonNode"*)* @_ZNK5blink35CalculationExpressionComparisonNode12IsComparisonEv to i8*), i8* bitcast (%"class.blink::CalculationExpressionNode"* (%"class.blink::CalculationExpressionComparisonNode"*, double)* @_ZNK5blink35CalculationExpressionComparisonNode4ZoomEd to i8*), i8* bitcast (void (%"class.blink::CalculationExpressionComparisonNode"*)* @_ZN5blink35CalculationExpressionComparisonNodeD2Ev to i8*), i8* bitcast (void (%"class.blink::CalculationExpressionComparisonNode"*)* @_ZN5blink35CalculationExpressionComparisonNodeD0Ev to i8*)] }, align 8
@.str = private unnamed_addr constant [11 x i8] c"i < size()\00", align 1
@.str.1 = private unnamed_addr constant [55 x i8] c"../../third_party/blink/renderer/platform/wtf/vector.h\00", align 1
@.str.3 = private unnamed_addr constant [44 x i8] c"count <= MaxElementCountInBackingStore<T>()\00", align 1
@.str.4 = private unnamed_addr constant [78 x i8] c"../../third_party/blink/renderer/platform/wtf/allocator/partition_allocator.h\00", align 1
@__PRETTY_FUNCTION__._ZN3WTF21GetStringWithTypeNameI13scoped_refptrIKN5blink25CalculationExpressionNodeEEEEPKcv = private unnamed_addr constant [101 x i8] c"const char *WTF::GetStringWithTypeName() [T = scoped_refptr<const blink::CalculationExpressionNode>]\00", align 1

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden float @_ZNK5blink29CalculationExpressionLeafNode8EvaluateEf(%"class.blink::CalculationExpressionLeafNode"* nocapture readonly, float) unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"class.blink::CalculationExpressionLeafNode", %"class.blink::CalculationExpressionLeafNode"* %0, i64 0, i32 1, i32 0
  %4 = load float, float* %3, align 4
  %5 = getelementptr inbounds %"class.blink::CalculationExpressionLeafNode", %"class.blink::CalculationExpressionLeafNode"* %0, i64 0, i32 1, i32 1
  %6 = load float, float* %5, align 4
  %7 = fdiv float %6, 1.000000e+02
  %8 = fmul float %7, %1
  %9 = fadd float %4, %8
  ret float %9
}

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZNK5blink29CalculationExpressionLeafNodeeqERKNS_25CalculationExpressionNodeE(%"class.blink::CalculationExpressionLeafNode"* nocapture readonly, %"class.blink::CalculationExpressionNode"* dereferenceable(16)) unnamed_addr #1 align 2 {
  %3 = bitcast %"class.blink::CalculationExpressionNode"* %1 to i1 (%"class.blink::CalculationExpressionNode"*)***
  %4 = load i1 (%"class.blink::CalculationExpressionNode"*)**, i1 (%"class.blink::CalculationExpressionNode"*)*** %3, align 8
  %5 = getelementptr inbounds i1 (%"class.blink::CalculationExpressionNode"*)*, i1 (%"class.blink::CalculationExpressionNode"*)** %4, i64 2
  %6 = load i1 (%"class.blink::CalculationExpressionNode"*)*, i1 (%"class.blink::CalculationExpressionNode"*)** %5, align 8
  %7 = tail call zeroext i1 %6(%"class.blink::CalculationExpressionNode"* %1) #8
  br i1 %7, label %8, label %22

8:                                                ; preds = %2
  %9 = getelementptr inbounds %"class.blink::CalculationExpressionLeafNode", %"class.blink::CalculationExpressionLeafNode"* %0, i64 0, i32 1, i32 0
  %10 = load float, float* %9, align 4
  %11 = getelementptr inbounds %"class.blink::CalculationExpressionNode", %"class.blink::CalculationExpressionNode"* %1, i64 0, i32 2
  %12 = bitcast [4 x i8]* %11 to float*
  %13 = load float, float* %12, align 4
  %14 = fcmp oeq float %10, %13
  br i1 %14, label %15, label %22

15:                                               ; preds = %8
  %16 = getelementptr inbounds %"class.blink::CalculationExpressionLeafNode", %"class.blink::CalculationExpressionLeafNode"* %0, i64 0, i32 1, i32 1
  %17 = load float, float* %16, align 4
  %18 = getelementptr inbounds %"class.blink::CalculationExpressionNode", %"class.blink::CalculationExpressionNode"* %1, i64 1
  %19 = bitcast %"class.blink::CalculationExpressionNode"* %18 to float*
  %20 = load float, float* %19, align 4
  %21 = fcmp oeq float %17, %20
  br label %22

22:                                               ; preds = %8, %15, %2
  %23 = phi i1 [ false, %2 ], [ false, %8 ], [ %21, %15 ]
  ret i1 %23
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nounwind ssp uwtable
define hidden %"class.blink::CalculationExpressionNode"* @_ZNK5blink29CalculationExpressionLeafNode4ZoomEd(%"class.blink::CalculationExpressionLeafNode"* nocapture readonly, double) unnamed_addr #3 align 2 {
  %3 = getelementptr inbounds %"class.blink::CalculationExpressionLeafNode", %"class.blink::CalculationExpressionLeafNode"* %0, i64 0, i32 1, i32 0
  %4 = load float, float* %3, align 4
  %5 = fpext float %4 to double
  %6 = fmul double %5, %1
  %7 = fptrunc double %6 to float
  %8 = getelementptr inbounds %"class.blink::CalculationExpressionLeafNode", %"class.blink::CalculationExpressionLeafNode"* %0, i64 0, i32 1, i32 1
  %9 = bitcast float* %8 to i32*
  %10 = load i32, i32* %9, align 4
  %11 = tail call noalias i8* @malloc(i64 24) #8
  %12 = getelementptr inbounds i8, i8* %11, i64 8
  %13 = bitcast i8* %12 to i32*
  store i32 1, i32* %13, align 4
  %14 = bitcast i8* %11 to i32 (...)***
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [11 x i8*] }, { [11 x i8*] }* @_ZTVN5blink29CalculationExpressionLeafNodeE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %14, align 8
  %15 = getelementptr inbounds i8, i8* %11, i64 12
  %16 = bitcast i8* %15 to float*
  store float %7, float* %16, align 4
  %17 = getelementptr inbounds i8, i8* %11, i64 16
  %18 = bitcast i8* %17 to i32*
  store i32 %10, i32* %18, align 4
  %19 = bitcast i8* %11 to %"class.blink::CalculationExpressionNode"*
  ret %"class.blink::CalculationExpressionNode"* %19
}

; Function Attrs: nounwind ssp uwtable
define hidden %"class.blink::CalculationExpressionNode"* @_ZN5blink39CalculationExpressionMultiplicationNode16CreateSimplifiedE13scoped_refptrIKNS_25CalculationExpressionNodeEEf(%"class.blink::CalculationExpressionNode"*, float) local_unnamed_addr #3 align 2 {
  %3 = bitcast %"class.blink::CalculationExpressionNode"* %0 to i1 (%"class.blink::CalculationExpressionNode"*)***
  %4 = load i1 (%"class.blink::CalculationExpressionNode"*)**, i1 (%"class.blink::CalculationExpressionNode"*)*** %3, align 8
  %5 = getelementptr inbounds i1 (%"class.blink::CalculationExpressionNode"*)*, i1 (%"class.blink::CalculationExpressionNode"*)** %4, i64 2
  %6 = load i1 (%"class.blink::CalculationExpressionNode"*)*, i1 (%"class.blink::CalculationExpressionNode"*)** %5, align 8
  %7 = tail call zeroext i1 %6(%"class.blink::CalculationExpressionNode"* %0) #8
  br i1 %7, label %19, label %8

8:                                                ; preds = %2
  %9 = ptrtoint %"class.blink::CalculationExpressionNode"* %0 to i64
  %10 = tail call noalias i8* @malloc(i64 32) #8
  %11 = getelementptr inbounds i8, i8* %10, i64 8
  %12 = bitcast i8* %11 to i32*
  store i32 1, i32* %12, align 4
  %13 = bitcast i8* %10 to i32 (...)***
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [11 x i8*] }, { [11 x i8*] }* @_ZTVN5blink39CalculationExpressionMultiplicationNodeE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %13, align 8
  %14 = getelementptr inbounds i8, i8* %10, i64 16
  %15 = bitcast i8* %14 to i64*
  store i64 %9, i64* %15, align 8
  %16 = getelementptr inbounds i8, i8* %10, i64 24
  %17 = bitcast i8* %16 to float*
  store float %1, float* %17, align 8
  %18 = ptrtoint i8* %10 to i64
  br label %51

19:                                               ; preds = %2
  %20 = getelementptr inbounds %"class.blink::CalculationExpressionNode", %"class.blink::CalculationExpressionNode"* %0, i64 0, i32 2
  %21 = bitcast [4 x i8]* %20 to float*
  %22 = load float, float* %21, align 4
  %23 = fmul float %22, %1
  %24 = getelementptr inbounds %"class.blink::CalculationExpressionNode", %"class.blink::CalculationExpressionNode"* %0, i64 1
  %25 = bitcast %"class.blink::CalculationExpressionNode"* %24 to float*
  %26 = load float, float* %25, align 4
  %27 = fmul float %26, %1
  %28 = tail call noalias i8* @malloc(i64 24) #8
  %29 = getelementptr inbounds i8, i8* %28, i64 8
  %30 = bitcast i8* %29 to i32*
  store i32 1, i32* %30, align 4
  %31 = bitcast i8* %28 to i32 (...)***
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [11 x i8*] }, { [11 x i8*] }* @_ZTVN5blink29CalculationExpressionLeafNodeE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %31, align 8
  %32 = getelementptr inbounds i8, i8* %28, i64 12
  %33 = bitcast i8* %32 to float*
  store float %23, float* %33, align 4
  %34 = getelementptr inbounds i8, i8* %28, i64 16
  %35 = bitcast i8* %34 to float*
  store float %27, float* %35, align 4
  %36 = ptrtoint i8* %28 to i64
  %37 = icmp eq %"class.blink::CalculationExpressionNode"* %0, null
  br i1 %37, label %51, label %38

38:                                               ; preds = %19
  %39 = getelementptr inbounds %"class.blink::CalculationExpressionNode", %"class.blink::CalculationExpressionNode"* %0, i64 0, i32 1, i32 0
  %40 = getelementptr inbounds %"class.base::RefCounted", %"class.base::RefCounted"* %39, i64 0, i32 0
  tail call void @_ZNK4base6subtle14RefCountedBase11ReleaseImplEv(%"class.base::subtle::RefCountedBase"* %40) #8
  %41 = getelementptr inbounds %"class.base::RefCounted", %"class.base::RefCounted"* %39, i64 0, i32 0, i32 0
  %42 = load i32, i32* %41, align 4
  %43 = icmp eq i32 %42, 0
  br i1 %43, label %44, label %51

44:                                               ; preds = %38
  %45 = getelementptr inbounds %"class.base::RefCounted", %"class.base::RefCounted"* %39, i64 -2
  %46 = bitcast %"class.base::RefCounted"* %45 to %"class.blink::CalculationExpressionNode"*
  %47 = bitcast %"class.base::RefCounted"* %45 to void (%"class.blink::CalculationExpressionNode"*)***
  %48 = load void (%"class.blink::CalculationExpressionNode"*)**, void (%"class.blink::CalculationExpressionNode"*)*** %47, align 8
  %49 = getelementptr inbounds void (%"class.blink::CalculationExpressionNode"*)*, void (%"class.blink::CalculationExpressionNode"*)** %48, i64 8
  %50 = load void (%"class.blink::CalculationExpressionNode"*)*, void (%"class.blink::CalculationExpressionNode"*)** %49, align 8
  tail call void %50(%"class.blink::CalculationExpressionNode"* nonnull %46) #8
  br label %51

51:                                               ; preds = %8, %19, %38, %44
  %52 = phi i64 [ %18, %8 ], [ %36, %19 ], [ %36, %38 ], [ %36, %44 ]
  %53 = inttoptr i64 %52 to %"class.blink::CalculationExpressionNode"*
  ret %"class.blink::CalculationExpressionNode"* %53
}

; Function Attrs: nounwind ssp uwtable
define hidden float @_ZNK5blink39CalculationExpressionMultiplicationNode8EvaluateEf(%"class.blink::CalculationExpressionMultiplicationNode"* nocapture readonly, float) unnamed_addr #1 align 2 {
  %3 = getelementptr inbounds %"class.blink::CalculationExpressionMultiplicationNode", %"class.blink::CalculationExpressionMultiplicationNode"* %0, i64 0, i32 2, i32 0
  %4 = load %"class.blink::CalculationExpressionNode"*, %"class.blink::CalculationExpressionNode"** %3, align 8
  %5 = bitcast %"class.blink::CalculationExpressionNode"* %4 to float (%"class.blink::CalculationExpressionNode"*, float)***
  %6 = load float (%"class.blink::CalculationExpressionNode"*, float)**, float (%"class.blink::CalculationExpressionNode"*, float)*** %5, align 8
  %7 = load float (%"class.blink::CalculationExpressionNode"*, float)*, float (%"class.blink::CalculationExpressionNode"*, float)** %6, align 8
  %8 = tail call float %7(%"class.blink::CalculationExpressionNode"* %4, float %1) #8
  %9 = getelementptr inbounds %"class.blink::CalculationExpressionMultiplicationNode", %"class.blink::CalculationExpressionMultiplicationNode"* %0, i64 0, i32 3
  %10 = load float, float* %9, align 8
  %11 = fmul float %8, %10
  ret float %11
}

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZNK5blink39CalculationExpressionMultiplicationNodeeqERKNS_25CalculationExpressionNodeE(%"class.blink::CalculationExpressionMultiplicationNode"* nocapture readonly, %"class.blink::CalculationExpressionNode"* dereferenceable(16)) unnamed_addr #1 align 2 {
  %3 = bitcast %"class.blink::CalculationExpressionNode"* %1 to i1 (%"class.blink::CalculationExpressionNode"*)***
  %4 = load i1 (%"class.blink::CalculationExpressionNode"*)**, i1 (%"class.blink::CalculationExpressionNode"*)*** %3, align 8
  %5 = getelementptr inbounds i1 (%"class.blink::CalculationExpressionNode"*)*, i1 (%"class.blink::CalculationExpressionNode"*)** %4, i64 3
  %6 = load i1 (%"class.blink::CalculationExpressionNode"*)*, i1 (%"class.blink::CalculationExpressionNode"*)** %5, align 8
  %7 = tail call zeroext i1 %6(%"class.blink::CalculationExpressionNode"* %1) #8
  br i1 %7, label %8, label %26

8:                                                ; preds = %2
  %9 = getelementptr inbounds %"class.blink::CalculationExpressionMultiplicationNode", %"class.blink::CalculationExpressionMultiplicationNode"* %0, i64 0, i32 3
  %10 = load float, float* %9, align 8
  %11 = getelementptr inbounds %"class.blink::CalculationExpressionNode", %"class.blink::CalculationExpressionNode"* %1, i64 1, i32 1
  %12 = bitcast %"class.WTF::RefCounted"* %11 to float*
  %13 = load float, float* %12, align 8
  %14 = fcmp oeq float %10, %13
  br i1 %14, label %15, label %26

15:                                               ; preds = %8
  %16 = getelementptr inbounds %"class.blink::CalculationExpressionMultiplicationNode", %"class.blink::CalculationExpressionMultiplicationNode"* %0, i64 0, i32 2, i32 0
  %17 = load %"class.blink::CalculationExpressionNode"*, %"class.blink::CalculationExpressionNode"** %16, align 8
  %18 = getelementptr inbounds %"class.blink::CalculationExpressionNode", %"class.blink::CalculationExpressionNode"* %1, i64 1
  %19 = bitcast %"class.blink::CalculationExpressionNode"* %18 to %"class.blink::CalculationExpressionNode"**
  %20 = load %"class.blink::CalculationExpressionNode"*, %"class.blink::CalculationExpressionNode"** %19, align 8
  %21 = bitcast %"class.blink::CalculationExpressionNode"* %17 to i1 (%"class.blink::CalculationExpressionNode"*, %"class.blink::CalculationExpressionNode"*)***
  %22 = load i1 (%"class.blink::CalculationExpressionNode"*, %"class.blink::CalculationExpressionNode"*)**, i1 (%"class.blink::CalculationExpressionNode"*, %"class.blink::CalculationExpressionNode"*)*** %21, align 8
  %23 = getelementptr inbounds i1 (%"class.blink::CalculationExpressionNode"*, %"class.blink::CalculationExpressionNode"*)*, i1 (%"class.blink::CalculationExpressionNode"*, %"class.blink::CalculationExpressionNode"*)** %22, i64 1
  %24 = load i1 (%"class.blink::CalculationExpressionNode"*, %"class.blink::CalculationExpressionNode"*)*, i1 (%"class.blink::CalculationExpressionNode"*, %"class.blink::CalculationExpressionNode"*)** %23, align 8
  %25 = tail call zeroext i1 %24(%"class.blink::CalculationExpressionNode"* %17, %"class.blink::CalculationExpressionNode"* dereferenceable(16) %20) #8
  br label %26

26:                                               ; preds = %8, %15, %2
  %27 = phi i1 [ false, %2 ], [ false, %8 ], [ %25, %15 ]
  ret i1 %27
}

; Function Attrs: nounwind ssp uwtable
define hidden %"class.blink::CalculationExpressionNode"* @_ZNK5blink39CalculationExpressionMultiplicationNode4ZoomEd(%"class.blink::CalculationExpressionMultiplicationNode"* nocapture readonly, double) unnamed_addr #3 align 2 {
  %3 = getelementptr inbounds %"class.blink::CalculationExpressionMultiplicationNode", %"class.blink::CalculationExpressionMultiplicationNode"* %0, i64 0, i32 2, i32 0
  %4 = load %"class.blink::CalculationExpressionNode"*, %"class.blink::CalculationExpressionNode"** %3, align 8
  %5 = bitcast %"class.blink::CalculationExpressionNode"* %4 to %"class.blink::CalculationExpressionNode"* (%"class.blink::CalculationExpressionNode"*, double)***
  %6 = load %"class.blink::CalculationExpressionNode"* (%"class.blink::CalculationExpressionNode"*, double)**, %"class.blink::CalculationExpressionNode"* (%"class.blink::CalculationExpressionNode"*, double)*** %5, align 8
  %7 = getelementptr inbounds %"class.blink::CalculationExpressionNode"* (%"class.blink::CalculationExpressionNode"*, double)*, %"class.blink::CalculationExpressionNode"* (%"class.blink::CalculationExpressionNode"*, double)** %6, i64 6
  %8 = load %"class.blink::CalculationExpressionNode"* (%"class.blink::CalculationExpressionNode"*, double)*, %"class.blink::CalculationExpressionNode"* (%"class.blink::CalculationExpressionNode"*, double)** %7, align 8
  %9 = tail call %"class.blink::CalculationExpressionNode"* %8(%"class.blink::CalculationExpressionNode"* %4, double %1) #8
  %10 = getelementptr inbounds %"class.blink::CalculationExpressionMultiplicationNode", %"class.blink::CalculationExpressionMultiplicationNode"* %0, i64 0, i32 3
  %11 = load float, float* %10, align 8
  %12 = bitcast %"class.blink::CalculationExpressionNode"* %9 to i1 (%"class.blink::CalculationExpressionNode"*)***
  %13 = load i1 (%"class.blink::CalculationExpressionNode"*)**, i1 (%"class.blink::CalculationExpressionNode"*)*** %12, align 8
  %14 = getelementptr inbounds i1 (%"class.blink::CalculationExpressionNode"*)*, i1 (%"class.blink::CalculationExpressionNode"*)** %13, i64 2
  %15 = load i1 (%"class.blink::CalculationExpressionNode"*)*, i1 (%"class.blink::CalculationExpressionNode"*)** %14, align 8
  %16 = tail call zeroext i1 %15(%"class.blink::CalculationExpressionNode"* %9) #8
  br i1 %16, label %28, label %17

17:                                               ; preds = %2
  %18 = ptrtoint %"class.blink::CalculationExpressionNode"* %9 to i64
  %19 = tail call noalias i8* @malloc(i64 32) #8
  %20 = getelementptr inbounds i8, i8* %19, i64 8
  %21 = bitcast i8* %20 to i32*
  store i32 1, i32* %21, align 4
  %22 = bitcast i8* %19 to i32 (...)***
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [11 x i8*] }, { [11 x i8*] }* @_ZTVN5blink39CalculationExpressionMultiplicationNodeE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %22, align 8
  %23 = getelementptr inbounds i8, i8* %19, i64 16
  %24 = bitcast i8* %23 to i64*
  store i64 %18, i64* %24, align 8
  %25 = getelementptr inbounds i8, i8* %19, i64 24
  %26 = bitcast i8* %25 to float*
  store float %11, float* %26, align 8
  %27 = ptrtoint i8* %19 to i64
  br label %60

28:                                               ; preds = %2
  %29 = getelementptr inbounds %"class.blink::CalculationExpressionNode", %"class.blink::CalculationExpressionNode"* %9, i64 0, i32 2
  %30 = bitcast [4 x i8]* %29 to float*
  %31 = load float, float* %30, align 4
  %32 = fmul float %11, %31
  %33 = getelementptr inbounds %"class.blink::CalculationExpressionNode", %"class.blink::CalculationExpressionNode"* %9, i64 1
  %34 = bitcast %"class.blink::CalculationExpressionNode"* %33 to float*
  %35 = load float, float* %34, align 4
  %36 = fmul float %11, %35
  %37 = tail call noalias i8* @malloc(i64 24) #8
  %38 = getelementptr inbounds i8, i8* %37, i64 8
  %39 = bitcast i8* %38 to i32*
  store i32 1, i32* %39, align 4
  %40 = bitcast i8* %37 to i32 (...)***
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [11 x i8*] }, { [11 x i8*] }* @_ZTVN5blink29CalculationExpressionLeafNodeE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %40, align 8
  %41 = getelementptr inbounds i8, i8* %37, i64 12
  %42 = bitcast i8* %41 to float*
  store float %32, float* %42, align 4
  %43 = getelementptr inbounds i8, i8* %37, i64 16
  %44 = bitcast i8* %43 to float*
  store float %36, float* %44, align 4
  %45 = ptrtoint i8* %37 to i64
  %46 = icmp eq %"class.blink::CalculationExpressionNode"* %9, null
  br i1 %46, label %60, label %47

47:                                               ; preds = %28
  %48 = getelementptr inbounds %"class.blink::CalculationExpressionNode", %"class.blink::CalculationExpressionNode"* %9, i64 0, i32 1, i32 0
  %49 = getelementptr inbounds %"class.base::RefCounted", %"class.base::RefCounted"* %48, i64 0, i32 0
  tail call void @_ZNK4base6subtle14RefCountedBase11ReleaseImplEv(%"class.base::subtle::RefCountedBase"* %49) #8
  %50 = getelementptr inbounds %"class.base::RefCounted", %"class.base::RefCounted"* %48, i64 0, i32 0, i32 0
  %51 = load i32, i32* %50, align 4
  %52 = icmp eq i32 %51, 0
  br i1 %52, label %53, label %60

53:                                               ; preds = %47
  %54 = getelementptr inbounds %"class.base::RefCounted", %"class.base::RefCounted"* %48, i64 -2
  %55 = bitcast %"class.base::RefCounted"* %54 to %"class.blink::CalculationExpressionNode"*
  %56 = bitcast %"class.base::RefCounted"* %54 to void (%"class.blink::CalculationExpressionNode"*)***
  %57 = load void (%"class.blink::CalculationExpressionNode"*)**, void (%"class.blink::CalculationExpressionNode"*)*** %56, align 8
  %58 = getelementptr inbounds void (%"class.blink::CalculationExpressionNode"*)*, void (%"class.blink::CalculationExpressionNode"*)** %57, i64 8
  %59 = load void (%"class.blink::CalculationExpressionNode"*)*, void (%"class.blink::CalculationExpressionNode"*)** %58, align 8
  tail call void %59(%"class.blink::CalculationExpressionNode"* nonnull %55) #8
  br label %60

60:                                               ; preds = %17, %28, %47, %53
  %61 = phi i64 [ %27, %17 ], [ %45, %28 ], [ %45, %47 ], [ %45, %53 ]
  %62 = inttoptr i64 %61 to %"class.blink::CalculationExpressionNode"*
  ret %"class.blink::CalculationExpressionNode"* %62
}

; Function Attrs: nounwind ssp uwtable
define hidden %"class.blink::CalculationExpressionNode"* @_ZN5blink33CalculationExpressionAdditiveNode16CreateSimplifiedE13scoped_refptrIKNS_25CalculationExpressionNodeEES4_NS0_4TypeE(%"class.blink::CalculationExpressionNode"*, %"class.blink::CalculationExpressionNode"*, i32) local_unnamed_addr #3 align 2 {
  %4 = ptrtoint %"class.blink::CalculationExpressionNode"* %0 to i64
  %5 = ptrtoint %"class.blink::CalculationExpressionNode"* %1 to i64
  %6 = bitcast %"class.blink::CalculationExpressionNode"* %0 to i1 (%"class.blink::CalculationExpressionNode"*)***
  %7 = load i1 (%"class.blink::CalculationExpressionNode"*)**, i1 (%"class.blink::CalculationExpressionNode"*)*** %6, align 8
  %8 = getelementptr inbounds i1 (%"class.blink::CalculationExpressionNode"*)*, i1 (%"class.blink::CalculationExpressionNode"*)** %7, i64 2
  %9 = load i1 (%"class.blink::CalculationExpressionNode"*)*, i1 (%"class.blink::CalculationExpressionNode"*)** %8, align 8
  %10 = tail call zeroext i1 %9(%"class.blink::CalculationExpressionNode"* %0) #8
  br i1 %10, label %11, label %17

11:                                               ; preds = %3
  %12 = bitcast %"class.blink::CalculationExpressionNode"* %1 to i1 (%"class.blink::CalculationExpressionNode"*)***
  %13 = load i1 (%"class.blink::CalculationExpressionNode"*)**, i1 (%"class.blink::CalculationExpressionNode"*)*** %12, align 8
  %14 = getelementptr inbounds i1 (%"class.blink::CalculationExpressionNode"*)*, i1 (%"class.blink::CalculationExpressionNode"*)** %13, i64 2
  %15 = load i1 (%"class.blink::CalculationExpressionNode"*)*, i1 (%"class.blink::CalculationExpressionNode"*)** %14, align 8
  %16 = tail call zeroext i1 %15(%"class.blink::CalculationExpressionNode"* %1) #8
  br i1 %16, label %29, label %17

17:                                               ; preds = %3, %11
  %18 = tail call noalias i8* @malloc(i64 40) #8
  %19 = getelementptr inbounds i8, i8* %18, i64 8
  %20 = bitcast i8* %19 to i32*
  store i32 1, i32* %20, align 4
  %21 = bitcast i8* %18 to i32 (...)***
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [11 x i8*] }, { [11 x i8*] }* @_ZTVN5blink33CalculationExpressionAdditiveNodeE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %21, align 8
  %22 = getelementptr inbounds i8, i8* %18, i64 16
  %23 = bitcast i8* %22 to i64*
  store i64 %4, i64* %23, align 8
  %24 = getelementptr inbounds i8, i8* %18, i64 24
  %25 = bitcast i8* %24 to i64*
  store i64 %5, i64* %25, align 8
  %26 = getelementptr inbounds i8, i8* %18, i64 32
  %27 = bitcast i8* %26 to i32*
  store i32 %2, i32* %27, align 8
  %28 = ptrtoint i8* %18 to i64
  br label %94

29:                                               ; preds = %11
  %30 = getelementptr inbounds %"class.blink::CalculationExpressionNode", %"class.blink::CalculationExpressionNode"* %0, i64 0, i32 2
  %31 = bitcast [4 x i8]* %30 to <2 x float>*
  %32 = load <2 x float>, <2 x float>* %31, align 4
  %33 = icmp eq i32 %2, 0
  %34 = getelementptr inbounds %"class.blink::CalculationExpressionNode", %"class.blink::CalculationExpressionNode"* %1, i64 0, i32 2
  %35 = bitcast [4 x i8]* %34 to float*
  %36 = load float, float* %35, align 4
  %37 = extractelement <2 x float> %32, i32 0
  br i1 %33, label %38, label %46

38:                                               ; preds = %29
  %39 = fadd float %37, %36
  %40 = insertelement <2 x float> %32, float %39, i32 0
  %41 = getelementptr inbounds %"class.blink::CalculationExpressionNode", %"class.blink::CalculationExpressionNode"* %1, i64 1
  %42 = bitcast %"class.blink::CalculationExpressionNode"* %41 to float*
  %43 = load float, float* %42, align 4
  %44 = extractelement <2 x float> %32, i32 1
  %45 = fadd float %44, %43
  br label %54

46:                                               ; preds = %29
  %47 = fsub float %37, %36
  %48 = insertelement <2 x float> %32, float %47, i32 0
  %49 = getelementptr inbounds %"class.blink::CalculationExpressionNode", %"class.blink::CalculationExpressionNode"* %1, i64 1
  %50 = bitcast %"class.blink::CalculationExpressionNode"* %49 to float*
  %51 = load float, float* %50, align 4
  %52 = extractelement <2 x float> %32, i32 1
  %53 = fsub float %52, %51
  br label %54

54:                                               ; preds = %46, %38
  %55 = phi <2 x float> [ %40, %38 ], [ %48, %46 ]
  %56 = phi float [ %45, %38 ], [ %53, %46 ]
  %57 = insertelement <2 x float> %55, float %56, i32 1
  %58 = tail call noalias i8* @malloc(i64 24) #8
  %59 = getelementptr inbounds i8, i8* %58, i64 8
  %60 = bitcast i8* %59 to i32*
  store i32 1, i32* %60, align 4
  %61 = bitcast i8* %58 to i32 (...)***
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [11 x i8*] }, { [11 x i8*] }* @_ZTVN5blink29CalculationExpressionLeafNodeE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %61, align 8
  %62 = getelementptr inbounds i8, i8* %58, i64 12
  %63 = bitcast i8* %62 to <2 x float>*
  store <2 x float> %57, <2 x float>* %63, align 4
  %64 = ptrtoint i8* %58 to i64
  %65 = icmp eq %"class.blink::CalculationExpressionNode"* %1, null
  br i1 %65, label %79, label %66

66:                                               ; preds = %54
  %67 = getelementptr inbounds %"class.blink::CalculationExpressionNode", %"class.blink::CalculationExpressionNode"* %1, i64 0, i32 1, i32 0
  %68 = getelementptr inbounds %"class.base::RefCounted", %"class.base::RefCounted"* %67, i64 0, i32 0
  tail call void @_ZNK4base6subtle14RefCountedBase11ReleaseImplEv(%"class.base::subtle::RefCountedBase"* %68) #8
  %69 = getelementptr inbounds %"class.base::RefCounted", %"class.base::RefCounted"* %67, i64 0, i32 0, i32 0
  %70 = load i32, i32* %69, align 4
  %71 = icmp eq i32 %70, 0
  br i1 %71, label %72, label %79

72:                                               ; preds = %66
  %73 = getelementptr inbounds %"class.base::RefCounted", %"class.base::RefCounted"* %67, i64 -2
  %74 = bitcast %"class.base::RefCounted"* %73 to %"class.blink::CalculationExpressionNode"*
  %75 = bitcast %"class.base::RefCounted"* %73 to void (%"class.blink::CalculationExpressionNode"*)***
  %76 = load void (%"class.blink::CalculationExpressionNode"*)**, void (%"class.blink::CalculationExpressionNode"*)*** %75, align 8
  %77 = getelementptr inbounds void (%"class.blink::CalculationExpressionNode"*)*, void (%"class.blink::CalculationExpressionNode"*)** %76, i64 8
  %78 = load void (%"class.blink::CalculationExpressionNode"*)*, void (%"class.blink::CalculationExpressionNode"*)** %77, align 8
  tail call void %78(%"class.blink::CalculationExpressionNode"* nonnull %74) #8
  br label %79

79:                                               ; preds = %54, %66, %72
  %80 = icmp eq %"class.blink::CalculationExpressionNode"* %0, null
  br i1 %80, label %94, label %81

81:                                               ; preds = %79
  %82 = getelementptr inbounds %"class.blink::CalculationExpressionNode", %"class.blink::CalculationExpressionNode"* %0, i64 0, i32 1, i32 0
  %83 = getelementptr inbounds %"class.base::RefCounted", %"class.base::RefCounted"* %82, i64 0, i32 0
  tail call void @_ZNK4base6subtle14RefCountedBase11ReleaseImplEv(%"class.base::subtle::RefCountedBase"* %83) #8
  %84 = getelementptr inbounds %"class.base::RefCounted", %"class.base::RefCounted"* %82, i64 0, i32 0, i32 0
  %85 = load i32, i32* %84, align 4
  %86 = icmp eq i32 %85, 0
  br i1 %86, label %87, label %94

87:                                               ; preds = %81
  %88 = getelementptr inbounds %"class.base::RefCounted", %"class.base::RefCounted"* %82, i64 -2
  %89 = bitcast %"class.base::RefCounted"* %88 to %"class.blink::CalculationExpressionNode"*
  %90 = bitcast %"class.base::RefCounted"* %88 to void (%"class.blink::CalculationExpressionNode"*)***
  %91 = load void (%"class.blink::CalculationExpressionNode"*)**, void (%"class.blink::CalculationExpressionNode"*)*** %90, align 8
  %92 = getelementptr inbounds void (%"class.blink::CalculationExpressionNode"*)*, void (%"class.blink::CalculationExpressionNode"*)** %91, i64 8
  %93 = load void (%"class.blink::CalculationExpressionNode"*)*, void (%"class.blink::CalculationExpressionNode"*)** %92, align 8
  tail call void %93(%"class.blink::CalculationExpressionNode"* nonnull %89) #8
  br label %94

94:                                               ; preds = %17, %79, %81, %87
  %95 = phi i64 [ %28, %17 ], [ %64, %79 ], [ %64, %81 ], [ %64, %87 ]
  %96 = inttoptr i64 %95 to %"class.blink::CalculationExpressionNode"*
  ret %"class.blink::CalculationExpressionNode"* %96
}

; Function Attrs: nounwind ssp uwtable
define hidden float @_ZNK5blink33CalculationExpressionAdditiveNode8EvaluateEf(%"class.blink::CalculationExpressionAdditiveNode"* nocapture readonly, float) unnamed_addr #1 align 2 {
  %3 = getelementptr inbounds %"class.blink::CalculationExpressionAdditiveNode", %"class.blink::CalculationExpressionAdditiveNode"* %0, i64 0, i32 4
  %4 = load i32, i32* %3, align 8
  switch i32 %4, label %33 [
    i32 0, label %5
    i32 1, label %19
  ]

5:                                                ; preds = %2
  %6 = getelementptr inbounds %"class.blink::CalculationExpressionAdditiveNode", %"class.blink::CalculationExpressionAdditiveNode"* %0, i64 0, i32 2, i32 0
  %7 = load %"class.blink::CalculationExpressionNode"*, %"class.blink::CalculationExpressionNode"** %6, align 8
  %8 = bitcast %"class.blink::CalculationExpressionNode"* %7 to float (%"class.blink::CalculationExpressionNode"*, float)***
  %9 = load float (%"class.blink::CalculationExpressionNode"*, float)**, float (%"class.blink::CalculationExpressionNode"*, float)*** %8, align 8
  %10 = load float (%"class.blink::CalculationExpressionNode"*, float)*, float (%"class.blink::CalculationExpressionNode"*, float)** %9, align 8
  %11 = tail call float %10(%"class.blink::CalculationExpressionNode"* %7, float %1) #8
  %12 = getelementptr inbounds %"class.blink::CalculationExpressionAdditiveNode", %"class.blink::CalculationExpressionAdditiveNode"* %0, i64 0, i32 3, i32 0
  %13 = load %"class.blink::CalculationExpressionNode"*, %"class.blink::CalculationExpressionNode"** %12, align 8
  %14 = bitcast %"class.blink::CalculationExpressionNode"* %13 to float (%"class.blink::CalculationExpressionNode"*, float)***
  %15 = load float (%"class.blink::CalculationExpressionNode"*, float)**, float (%"class.blink::CalculationExpressionNode"*, float)*** %14, align 8
  %16 = load float (%"class.blink::CalculationExpressionNode"*, float)*, float (%"class.blink::CalculationExpressionNode"*, float)** %15, align 8
  %17 = tail call float %16(%"class.blink::CalculationExpressionNode"* %13, float %1) #8
  %18 = fadd float %11, %17
  br label %33

19:                                               ; preds = %2
  %20 = getelementptr inbounds %"class.blink::CalculationExpressionAdditiveNode", %"class.blink::CalculationExpressionAdditiveNode"* %0, i64 0, i32 2, i32 0
  %21 = load %"class.blink::CalculationExpressionNode"*, %"class.blink::CalculationExpressionNode"** %20, align 8
  %22 = bitcast %"class.blink::CalculationExpressionNode"* %21 to float (%"class.blink::CalculationExpressionNode"*, float)***
  %23 = load float (%"class.blink::CalculationExpressionNode"*, float)**, float (%"class.blink::CalculationExpressionNode"*, float)*** %22, align 8
  %24 = load float (%"class.blink::CalculationExpressionNode"*, float)*, float (%"class.blink::CalculationExpressionNode"*, float)** %23, align 8
  %25 = tail call float %24(%"class.blink::CalculationExpressionNode"* %21, float %1) #8
  %26 = getelementptr inbounds %"class.blink::CalculationExpressionAdditiveNode", %"class.blink::CalculationExpressionAdditiveNode"* %0, i64 0, i32 3, i32 0
  %27 = load %"class.blink::CalculationExpressionNode"*, %"class.blink::CalculationExpressionNode"** %26, align 8
  %28 = bitcast %"class.blink::CalculationExpressionNode"* %27 to float (%"class.blink::CalculationExpressionNode"*, float)***
  %29 = load float (%"class.blink::CalculationExpressionNode"*, float)**, float (%"class.blink::CalculationExpressionNode"*, float)*** %28, align 8
  %30 = load float (%"class.blink::CalculationExpressionNode"*, float)*, float (%"class.blink::CalculationExpressionNode"*, float)** %29, align 8
  %31 = tail call float %30(%"class.blink::CalculationExpressionNode"* %27, float %1) #8
  %32 = fsub float %25, %31
  br label %33

33:                                               ; preds = %2, %19, %5
  %34 = phi float [ %18, %5 ], [ %32, %19 ], [ 0.000000e+00, %2 ]
  ret float %34
}

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZNK5blink33CalculationExpressionAdditiveNodeeqERKNS_25CalculationExpressionNodeE(%"class.blink::CalculationExpressionAdditiveNode"* nocapture readonly, %"class.blink::CalculationExpressionNode"* dereferenceable(16)) unnamed_addr #1 align 2 {
  %3 = bitcast %"class.blink::CalculationExpressionNode"* %1 to i1 (%"class.blink::CalculationExpressionNode"*)***
  %4 = load i1 (%"class.blink::CalculationExpressionNode"*)**, i1 (%"class.blink::CalculationExpressionNode"*)*** %3, align 8
  %5 = getelementptr inbounds i1 (%"class.blink::CalculationExpressionNode"*)*, i1 (%"class.blink::CalculationExpressionNode"*)** %4, i64 4
  %6 = load i1 (%"class.blink::CalculationExpressionNode"*)*, i1 (%"class.blink::CalculationExpressionNode"*)** %5, align 8
  %7 = tail call zeroext i1 %6(%"class.blink::CalculationExpressionNode"* %1) #8
  br i1 %7, label %8, label %37

8:                                                ; preds = %2
  %9 = getelementptr inbounds %"class.blink::CalculationExpressionAdditiveNode", %"class.blink::CalculationExpressionAdditiveNode"* %0, i64 0, i32 4
  %10 = load i32, i32* %9, align 8
  %11 = getelementptr inbounds %"class.blink::CalculationExpressionNode", %"class.blink::CalculationExpressionNode"* %1, i64 2
  %12 = bitcast %"class.blink::CalculationExpressionNode"* %11 to i32*
  %13 = load i32, i32* %12, align 8
  %14 = icmp eq i32 %10, %13
  br i1 %14, label %15, label %37

15:                                               ; preds = %8
  %16 = getelementptr inbounds %"class.blink::CalculationExpressionAdditiveNode", %"class.blink::CalculationExpressionAdditiveNode"* %0, i64 0, i32 2, i32 0
  %17 = load %"class.blink::CalculationExpressionNode"*, %"class.blink::CalculationExpressionNode"** %16, align 8
  %18 = getelementptr inbounds %"class.blink::CalculationExpressionNode", %"class.blink::CalculationExpressionNode"* %1, i64 1
  %19 = bitcast %"class.blink::CalculationExpressionNode"* %18 to %"class.blink::CalculationExpressionNode"**
  %20 = load %"class.blink::CalculationExpressionNode"*, %"class.blink::CalculationExpressionNode"** %19, align 8
  %21 = bitcast %"class.blink::CalculationExpressionNode"* %17 to i1 (%"class.blink::CalculationExpressionNode"*, %"class.blink::CalculationExpressionNode"*)***
  %22 = load i1 (%"class.blink::CalculationExpressionNode"*, %"class.blink::CalculationExpressionNode"*)**, i1 (%"class.blink::CalculationExpressionNode"*, %"class.blink::CalculationExpressionNode"*)*** %21, align 8
  %23 = getelementptr inbounds i1 (%"class.blink::CalculationExpressionNode"*, %"class.blink::CalculationExpressionNode"*)*, i1 (%"class.blink::CalculationExpressionNode"*, %"class.blink::CalculationExpressionNode"*)** %22, i64 1
  %24 = load i1 (%"class.blink::CalculationExpressionNode"*, %"class.blink::CalculationExpressionNode"*)*, i1 (%"class.blink::CalculationExpressionNode"*, %"class.blink::CalculationExpressionNode"*)** %23, align 8
  %25 = tail call zeroext i1 %24(%"class.blink::CalculationExpressionNode"* %17, %"class.blink::CalculationExpressionNode"* dereferenceable(16) %20) #8
  br i1 %25, label %26, label %37

26:                                               ; preds = %15
  %27 = getelementptr inbounds %"class.blink::CalculationExpressionAdditiveNode", %"class.blink::CalculationExpressionAdditiveNode"* %0, i64 0, i32 3, i32 0
  %28 = load %"class.blink::CalculationExpressionNode"*, %"class.blink::CalculationExpressionNode"** %27, align 8
  %29 = getelementptr inbounds %"class.blink::CalculationExpressionNode", %"class.blink::CalculationExpressionNode"* %1, i64 1, i32 1
  %30 = bitcast %"class.WTF::RefCounted"* %29 to %"class.blink::CalculationExpressionNode"**
  %31 = load %"class.blink::CalculationExpressionNode"*, %"class.blink::CalculationExpressionNode"** %30, align 8
  %32 = bitcast %"class.blink::CalculationExpressionNode"* %28 to i1 (%"class.blink::CalculationExpressionNode"*, %"class.blink::CalculationExpressionNode"*)***
  %33 = load i1 (%"class.blink::CalculationExpressionNode"*, %"class.blink::CalculationExpressionNode"*)**, i1 (%"class.blink::CalculationExpressionNode"*, %"class.blink::CalculationExpressionNode"*)*** %32, align 8
  %34 = getelementptr inbounds i1 (%"class.blink::CalculationExpressionNode"*, %"class.blink::CalculationExpressionNode"*)*, i1 (%"class.blink::CalculationExpressionNode"*, %"class.blink::CalculationExpressionNode"*)** %33, i64 1
  %35 = load i1 (%"class.blink::CalculationExpressionNode"*, %"class.blink::CalculationExpressionNode"*)*, i1 (%"class.blink::CalculationExpressionNode"*, %"class.blink::CalculationExpressionNode"*)** %34, align 8
  %36 = tail call zeroext i1 %35(%"class.blink::CalculationExpressionNode"* %28, %"class.blink::CalculationExpressionNode"* dereferenceable(16) %31) #8
  br label %37

37:                                               ; preds = %8, %15, %26, %2
  %38 = phi i1 [ false, %2 ], [ false, %15 ], [ false, %8 ], [ %36, %26 ]
  ret i1 %38
}

; Function Attrs: nounwind ssp uwtable
define hidden %"class.blink::CalculationExpressionNode"* @_ZNK5blink33CalculationExpressionAdditiveNode4ZoomEd(%"class.blink::CalculationExpressionAdditiveNode"* nocapture readonly, double) unnamed_addr #1 align 2 {
  %3 = getelementptr inbounds %"class.blink::CalculationExpressionAdditiveNode", %"class.blink::CalculationExpressionAdditiveNode"* %0, i64 0, i32 2, i32 0
  %4 = load %"class.blink::CalculationExpressionNode"*, %"class.blink::CalculationExpressionNode"** %3, align 8
  %5 = bitcast %"class.blink::CalculationExpressionNode"* %4 to %"class.blink::CalculationExpressionNode"* (%"class.blink::CalculationExpressionNode"*, double)***
  %6 = load %"class.blink::CalculationExpressionNode"* (%"class.blink::CalculationExpressionNode"*, double)**, %"class.blink::CalculationExpressionNode"* (%"class.blink::CalculationExpressionNode"*, double)*** %5, align 8
  %7 = getelementptr inbounds %"class.blink::CalculationExpressionNode"* (%"class.blink::CalculationExpressionNode"*, double)*, %"class.blink::CalculationExpressionNode"* (%"class.blink::CalculationExpressionNode"*, double)** %6, i64 6
  %8 = load %"class.blink::CalculationExpressionNode"* (%"class.blink::CalculationExpressionNode"*, double)*, %"class.blink::CalculationExpressionNode"* (%"class.blink::CalculationExpressionNode"*, double)** %7, align 8
  %9 = tail call %"class.blink::CalculationExpressionNode"* %8(%"class.blink::CalculationExpressionNode"* %4, double %1) #8
  %10 = getelementptr inbounds %"class.blink::CalculationExpressionAdditiveNode", %"class.blink::CalculationExpressionAdditiveNode"* %0, i64 0, i32 3, i32 0
  %11 = load %"class.blink::CalculationExpressionNode"*, %"class.blink::CalculationExpressionNode"** %10, align 8
  %12 = bitcast %"class.blink::CalculationExpressionNode"* %11 to %"class.blink::CalculationExpressionNode"* (%"class.blink::CalculationExpressionNode"*, double)***
  %13 = load %"class.blink::CalculationExpressionNode"* (%"class.blink::CalculationExpressionNode"*, double)**, %"class.blink::CalculationExpressionNode"* (%"class.blink::CalculationExpressionNode"*, double)*** %12, align 8
  %14 = getelementptr inbounds %"class.blink::CalculationExpressionNode"* (%"class.blink::CalculationExpressionNode"*, double)*, %"class.blink::CalculationExpressionNode"* (%"class.blink::CalculationExpressionNode"*, double)** %13, i64 6
  %15 = load %"class.blink::CalculationExpressionNode"* (%"class.blink::CalculationExpressionNode"*, double)*, %"class.blink::CalculationExpressionNode"* (%"class.blink::CalculationExpressionNode"*, double)** %14, align 8
  %16 = tail call %"class.blink::CalculationExpressionNode"* %15(%"class.blink::CalculationExpressionNode"* %11, double %1) #8
  %17 = getelementptr inbounds %"class.blink::CalculationExpressionAdditiveNode", %"class.blink::CalculationExpressionAdditiveNode"* %0, i64 0, i32 4
  %18 = load i32, i32* %17, align 8
  %19 = tail call %"class.blink::CalculationExpressionNode"* @_ZN5blink33CalculationExpressionAdditiveNode16CreateSimplifiedE13scoped_refptrIKNS_25CalculationExpressionNodeEES4_NS0_4TypeE(%"class.blink::CalculationExpressionNode"* %9, %"class.blink::CalculationExpressionNode"* %16, i32 %18)
  ret %"class.blink::CalculationExpressionNode"* %19
}

; Function Attrs: nounwind ssp uwtable
define hidden %"class.blink::CalculationExpressionNode"* @_ZN5blink35CalculationExpressionComparisonNode16CreateSimplifiedEON3WTF6VectorI13scoped_refptrIKNS_25CalculationExpressionNodeEELj0ENS1_18PartitionAllocatorEEENS0_4TypeE(%"class.WTF::Vector"* dereferenceable(16), i32) local_unnamed_addr #3 align 2 {
  %3 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %0, i64 0, i32 0, i32 0, i32 2
  %4 = load i32, i32* %3, align 4
  %5 = icmp eq i32 %4, 0
  br i1 %5, label %51, label %6

6:                                                ; preds = %2
  %7 = icmp eq i32 %1, 0
  br label %8

8:                                                ; preds = %6, %45
  %9 = phi float [ 0xFFFFFFFFE0000000, %6 ], [ %47, %45 ]
  %10 = phi i32 [ 0, %6 ], [ %48, %45 ]
  %11 = tail call dereferenceable(8) %class.scoped_refptr* @_ZN3WTF6VectorI13scoped_refptrIKN5blink25CalculationExpressionNodeEELj0ENS_18PartitionAllocatorEE2atEj(%"class.WTF::Vector"* %0, i32 %10) #8
  %12 = getelementptr inbounds %class.scoped_refptr, %class.scoped_refptr* %11, i64 0, i32 0
  %13 = load %"class.blink::CalculationExpressionNode"*, %"class.blink::CalculationExpressionNode"** %12, align 8
  %14 = bitcast %"class.blink::CalculationExpressionNode"* %13 to i1 (%"class.blink::CalculationExpressionNode"*)***
  %15 = load i1 (%"class.blink::CalculationExpressionNode"*)**, i1 (%"class.blink::CalculationExpressionNode"*)*** %14, align 8
  %16 = getelementptr inbounds i1 (%"class.blink::CalculationExpressionNode"*)*, i1 (%"class.blink::CalculationExpressionNode"*)** %15, i64 2
  %17 = load i1 (%"class.blink::CalculationExpressionNode"*)*, i1 (%"class.blink::CalculationExpressionNode"*)** %16, align 8
  %18 = tail call zeroext i1 %17(%"class.blink::CalculationExpressionNode"* %13) #8
  %19 = icmp eq %"class.blink::CalculationExpressionNode"* %13, null
  %20 = xor i1 %18, true
  %21 = or i1 %19, %20
  br i1 %21, label %61, label %22

22:                                               ; preds = %8
  %23 = getelementptr inbounds %"class.blink::CalculationExpressionNode", %"class.blink::CalculationExpressionNode"* %13, i64 1
  %24 = bitcast %"class.blink::CalculationExpressionNode"* %23 to float*
  %25 = load float, float* %24, align 4
  %26 = fcmp une float %25, 0.000000e+00
  br i1 %26, label %61, label %27

27:                                               ; preds = %22
  %28 = icmp eq i32 %10, 0
  %29 = getelementptr inbounds %"class.blink::CalculationExpressionNode", %"class.blink::CalculationExpressionNode"* %13, i64 0, i32 2
  br i1 %28, label %30, label %34

30:                                               ; preds = %27
  %31 = bitcast [4 x i8]* %29 to i32*
  %32 = load i32, i32* %31, align 4
  %33 = bitcast i32 %32 to float
  br label %45

34:                                               ; preds = %27
  %35 = bitcast [4 x i8]* %29 to float*
  %36 = load float, float* %35, align 4
  br i1 %7, label %37, label %41

37:                                               ; preds = %34
  %38 = fcmp olt float %36, %9
  %39 = select i1 %38, float %36, float %9
  %40 = bitcast float %39 to i32
  br label %45

41:                                               ; preds = %34
  %42 = fcmp olt float %9, %36
  %43 = select i1 %42, float %36, float %9
  %44 = bitcast float %43 to i32
  br label %45

45:                                               ; preds = %37, %41, %30
  %46 = phi i32 [ %40, %37 ], [ %44, %41 ], [ %32, %30 ]
  %47 = phi float [ %39, %37 ], [ %43, %41 ], [ %33, %30 ]
  %48 = add nuw i32 %10, 1
  %49 = load i32, i32* %3, align 4
  %50 = icmp ult i32 %48, %49
  br i1 %50, label %8, label %51

51:                                               ; preds = %45, %2
  %52 = phi i32 [ -1, %2 ], [ %46, %45 ]
  %53 = tail call noalias i8* @malloc(i64 24) #8
  %54 = getelementptr inbounds i8, i8* %53, i64 8
  %55 = bitcast i8* %54 to i32*
  store i32 1, i32* %55, align 4
  %56 = bitcast i8* %53 to i32 (...)***
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [11 x i8*] }, { [11 x i8*] }* @_ZTVN5blink29CalculationExpressionLeafNodeE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %56, align 8
  %57 = getelementptr inbounds i8, i8* %53, i64 12
  %58 = bitcast i8* %57 to i32*
  store i32 %52, i32* %58, align 4
  %59 = getelementptr inbounds i8, i8* %53, i64 16
  %60 = bitcast i8* %59 to i32*
  store i32 0, i32* %60, align 4
  br label %79

61:                                               ; preds = %22, %8
  %62 = tail call noalias i8* @malloc(i64 40) #8
  %63 = getelementptr inbounds i8, i8* %62, i64 8
  %64 = bitcast i8* %63 to i32*
  store i32 1, i32* %64, align 4
  %65 = bitcast i8* %62 to i32 (...)***
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [11 x i8*] }, { [11 x i8*] }* @_ZTVN5blink35CalculationExpressionComparisonNodeE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %65, align 8
  %66 = getelementptr inbounds i8, i8* %62, i64 16
  %67 = getelementptr inbounds i8, i8* %62, i64 24
  %68 = bitcast i8* %67 to i32*
  %69 = getelementptr inbounds i8, i8* %62, i64 28
  %70 = bitcast i8* %69 to i32*
  %71 = bitcast %"class.WTF::Vector"* %0 to i64*
  %72 = bitcast i8* %66 to i64*
  store i64 0, i64* %72, align 8
  %73 = load i64, i64* %71, align 8
  store atomic i64 0, i64* %71 monotonic, align 8
  store atomic i64 %73, i64* %72 monotonic, align 8
  %74 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %0, i64 0, i32 0, i32 0, i32 1
  %75 = load i32, i32* %74, align 4
  store i32 %75, i32* %68, align 4
  store i32 0, i32* %74, align 4
  %76 = load i32, i32* %3, align 4
  store i32 %76, i32* %70, align 4
  store i32 0, i32* %3, align 4
  %77 = getelementptr inbounds i8, i8* %62, i64 32
  %78 = bitcast i8* %77 to i32*
  store i32 %1, i32* %78, align 8
  br label %79

79:                                               ; preds = %61, %51
  %80 = phi i8* [ %62, %61 ], [ %53, %51 ]
  %81 = bitcast i8* %80 to %"class.blink::CalculationExpressionNode"*
  ret %"class.blink::CalculationExpressionNode"* %81
}

; Function Attrs: nounwind ssp uwtable
define hidden float @_ZNK5blink35CalculationExpressionComparisonNode8EvaluateEf(%"class.blink::CalculationExpressionComparisonNode"*, float) unnamed_addr #1 align 2 {
  %3 = getelementptr inbounds %"class.blink::CalculationExpressionComparisonNode", %"class.blink::CalculationExpressionComparisonNode"* %0, i64 0, i32 2
  %4 = tail call dereferenceable(8) %class.scoped_refptr* @_ZNK3WTF6VectorI13scoped_refptrIKN5blink25CalculationExpressionNodeEELj0ENS_18PartitionAllocatorEE2atEj(%"class.WTF::Vector"* %3, i32 0) #8
  %5 = getelementptr inbounds %class.scoped_refptr, %class.scoped_refptr* %4, i64 0, i32 0
  %6 = load %"class.blink::CalculationExpressionNode"*, %"class.blink::CalculationExpressionNode"** %5, align 8
  %7 = bitcast %"class.blink::CalculationExpressionNode"* %6 to float (%"class.blink::CalculationExpressionNode"*, float)***
  %8 = load float (%"class.blink::CalculationExpressionNode"*, float)**, float (%"class.blink::CalculationExpressionNode"*, float)*** %7, align 8
  %9 = load float (%"class.blink::CalculationExpressionNode"*, float)*, float (%"class.blink::CalculationExpressionNode"*, float)** %8, align 8
  %10 = tail call float %9(%"class.blink::CalculationExpressionNode"* %6, float %1) #8
  %11 = getelementptr inbounds %"class.blink::CalculationExpressionComparisonNode", %"class.blink::CalculationExpressionComparisonNode"* %0, i64 0, i32 3
  %12 = load i32, i32* %11, align 8
  switch i32 %12, label %51 [
    i32 0, label %17
    i32 1, label %13
  ]

13:                                               ; preds = %2
  %14 = getelementptr inbounds %"class.blink::CalculationExpressionComparisonNode", %"class.blink::CalculationExpressionComparisonNode"* %0, i64 0, i32 2, i32 0, i32 0, i32 2
  %15 = load i32, i32* %14, align 4
  %16 = icmp ugt i32 %15, 1
  br i1 %16, label %36, label %51

17:                                               ; preds = %2
  %18 = getelementptr inbounds %"class.blink::CalculationExpressionComparisonNode", %"class.blink::CalculationExpressionComparisonNode"* %0, i64 0, i32 2, i32 0, i32 0, i32 2
  %19 = load i32, i32* %18, align 4
  %20 = icmp ugt i32 %19, 1
  br i1 %20, label %21, label %51

21:                                               ; preds = %17, %21
  %22 = phi float [ %32, %21 ], [ %10, %17 ]
  %23 = phi i32 [ %33, %21 ], [ 1, %17 ]
  %24 = tail call dereferenceable(8) %class.scoped_refptr* @_ZNK3WTF6VectorI13scoped_refptrIKN5blink25CalculationExpressionNodeEELj0ENS_18PartitionAllocatorEE2atEj(%"class.WTF::Vector"* %3, i32 %23) #8
  %25 = getelementptr inbounds %class.scoped_refptr, %class.scoped_refptr* %24, i64 0, i32 0
  %26 = load %"class.blink::CalculationExpressionNode"*, %"class.blink::CalculationExpressionNode"** %25, align 8
  %27 = bitcast %"class.blink::CalculationExpressionNode"* %26 to float (%"class.blink::CalculationExpressionNode"*, float)***
  %28 = load float (%"class.blink::CalculationExpressionNode"*, float)**, float (%"class.blink::CalculationExpressionNode"*, float)*** %27, align 8
  %29 = load float (%"class.blink::CalculationExpressionNode"*, float)*, float (%"class.blink::CalculationExpressionNode"*, float)** %28, align 8
  %30 = tail call float %29(%"class.blink::CalculationExpressionNode"* %26, float %1) #8
  %31 = fcmp olt float %30, %22
  %32 = select i1 %31, float %30, float %22
  %33 = add nuw i32 %23, 1
  %34 = load i32, i32* %18, align 4
  %35 = icmp ult i32 %33, %34
  br i1 %35, label %21, label %51

36:                                               ; preds = %13, %36
  %37 = phi float [ %47, %36 ], [ %10, %13 ]
  %38 = phi i32 [ %48, %36 ], [ 1, %13 ]
  %39 = tail call dereferenceable(8) %class.scoped_refptr* @_ZNK3WTF6VectorI13scoped_refptrIKN5blink25CalculationExpressionNodeEELj0ENS_18PartitionAllocatorEE2atEj(%"class.WTF::Vector"* %3, i32 %38) #8
  %40 = getelementptr inbounds %class.scoped_refptr, %class.scoped_refptr* %39, i64 0, i32 0
  %41 = load %"class.blink::CalculationExpressionNode"*, %"class.blink::CalculationExpressionNode"** %40, align 8
  %42 = bitcast %"class.blink::CalculationExpressionNode"* %41 to float (%"class.blink::CalculationExpressionNode"*, float)***
  %43 = load float (%"class.blink::CalculationExpressionNode"*, float)**, float (%"class.blink::CalculationExpressionNode"*, float)*** %42, align 8
  %44 = load float (%"class.blink::CalculationExpressionNode"*, float)*, float (%"class.blink::CalculationExpressionNode"*, float)** %43, align 8
  %45 = tail call float %44(%"class.blink::CalculationExpressionNode"* %41, float %1) #8
  %46 = fcmp olt float %37, %45
  %47 = select i1 %46, float %45, float %37
  %48 = add nuw i32 %38, 1
  %49 = load i32, i32* %14, align 4
  %50 = icmp ult i32 %48, %49
  br i1 %50, label %36, label %51

51:                                               ; preds = %36, %21, %13, %17, %2
  %52 = phi float [ %10, %13 ], [ %10, %17 ], [ %10, %2 ], [ %32, %21 ], [ %47, %36 ]
  ret float %52
}

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZNK5blink35CalculationExpressionComparisonNodeeqERKNS_25CalculationExpressionNodeE(%"class.blink::CalculationExpressionComparisonNode"*, %"class.blink::CalculationExpressionNode"* dereferenceable(16)) unnamed_addr #1 align 2 {
  %3 = bitcast %"class.blink::CalculationExpressionNode"* %1 to i1 (%"class.blink::CalculationExpressionNode"*)***
  %4 = load i1 (%"class.blink::CalculationExpressionNode"*)**, i1 (%"class.blink::CalculationExpressionNode"*)*** %3, align 8
  %5 = getelementptr inbounds i1 (%"class.blink::CalculationExpressionNode"*)*, i1 (%"class.blink::CalculationExpressionNode"*)** %4, i64 5
  %6 = load i1 (%"class.blink::CalculationExpressionNode"*)*, i1 (%"class.blink::CalculationExpressionNode"*)** %5, align 8
  %7 = tail call zeroext i1 %6(%"class.blink::CalculationExpressionNode"* %1) #8
  br i1 %7, label %8, label %44

8:                                                ; preds = %2
  %9 = getelementptr inbounds %"class.blink::CalculationExpressionComparisonNode", %"class.blink::CalculationExpressionComparisonNode"* %0, i64 0, i32 3
  %10 = load i32, i32* %9, align 8
  %11 = getelementptr inbounds %"class.blink::CalculationExpressionNode", %"class.blink::CalculationExpressionNode"* %1, i64 2
  %12 = bitcast %"class.blink::CalculationExpressionNode"* %11 to i32*
  %13 = load i32, i32* %12, align 8
  %14 = icmp eq i32 %10, %13
  br i1 %14, label %15, label %44

15:                                               ; preds = %8
  %16 = getelementptr inbounds %"class.blink::CalculationExpressionComparisonNode", %"class.blink::CalculationExpressionComparisonNode"* %0, i64 0, i32 2
  %17 = getelementptr inbounds %"class.blink::CalculationExpressionComparisonNode", %"class.blink::CalculationExpressionComparisonNode"* %0, i64 0, i32 2, i32 0, i32 0, i32 2
  %18 = load i32, i32* %17, align 4
  %19 = getelementptr inbounds %"class.blink::CalculationExpressionNode", %"class.blink::CalculationExpressionNode"* %1, i64 1
  %20 = bitcast %"class.blink::CalculationExpressionNode"* %19 to %"class.WTF::Vector"*
  %21 = getelementptr inbounds %"class.blink::CalculationExpressionNode", %"class.blink::CalculationExpressionNode"* %1, i64 1, i32 2
  %22 = bitcast [4 x i8]* %21 to i32*
  %23 = load i32, i32* %22, align 4
  %24 = icmp eq i32 %18, %23
  br i1 %24, label %25, label %44

25:                                               ; preds = %15
  %26 = icmp eq i32 %18, 0
  br i1 %26, label %44, label %30

27:                                               ; preds = %30
  %28 = load i32, i32* %17, align 4
  %29 = icmp ult i32 %43, %28
  br i1 %29, label %30, label %44

30:                                               ; preds = %25, %27
  %31 = phi i32 [ %43, %27 ], [ 0, %25 ]
  %32 = tail call dereferenceable(8) %class.scoped_refptr* @_ZNK3WTF6VectorI13scoped_refptrIKN5blink25CalculationExpressionNodeEELj0ENS_18PartitionAllocatorEE2atEj(%"class.WTF::Vector"* %16, i32 %31) #8
  %33 = getelementptr inbounds %class.scoped_refptr, %class.scoped_refptr* %32, i64 0, i32 0
  %34 = load %"class.blink::CalculationExpressionNode"*, %"class.blink::CalculationExpressionNode"** %33, align 8
  %35 = tail call dereferenceable(8) %class.scoped_refptr* @_ZNK3WTF6VectorI13scoped_refptrIKN5blink25CalculationExpressionNodeEELj0ENS_18PartitionAllocatorEE2atEj(%"class.WTF::Vector"* %20, i32 %31) #8
  %36 = getelementptr inbounds %class.scoped_refptr, %class.scoped_refptr* %35, i64 0, i32 0
  %37 = load %"class.blink::CalculationExpressionNode"*, %"class.blink::CalculationExpressionNode"** %36, align 8
  %38 = bitcast %"class.blink::CalculationExpressionNode"* %34 to i1 (%"class.blink::CalculationExpressionNode"*, %"class.blink::CalculationExpressionNode"*)***
  %39 = load i1 (%"class.blink::CalculationExpressionNode"*, %"class.blink::CalculationExpressionNode"*)**, i1 (%"class.blink::CalculationExpressionNode"*, %"class.blink::CalculationExpressionNode"*)*** %38, align 8
  %40 = getelementptr inbounds i1 (%"class.blink::CalculationExpressionNode"*, %"class.blink::CalculationExpressionNode"*)*, i1 (%"class.blink::CalculationExpressionNode"*, %"class.blink::CalculationExpressionNode"*)** %39, i64 1
  %41 = load i1 (%"class.blink::CalculationExpressionNode"*, %"class.blink::CalculationExpressionNode"*)*, i1 (%"class.blink::CalculationExpressionNode"*, %"class.blink::CalculationExpressionNode"*)** %40, align 8
  %42 = tail call zeroext i1 %41(%"class.blink::CalculationExpressionNode"* %34, %"class.blink::CalculationExpressionNode"* dereferenceable(16) %37) #8
  %43 = add nuw i32 %31, 1
  br i1 %42, label %27, label %44

44:                                               ; preds = %27, %30, %25, %2, %15, %8
  %45 = phi i1 [ false, %8 ], [ false, %15 ], [ false, %2 ], [ true, %25 ], [ true, %27 ], [ false, %30 ]
  ret i1 %45
}

; Function Attrs: nounwind ssp uwtable
define hidden %"class.blink::CalculationExpressionNode"* @_ZNK5blink35CalculationExpressionComparisonNode4ZoomEd(%"class.blink::CalculationExpressionComparisonNode"* nocapture readonly, double) unnamed_addr #1 align 2 {
  %3 = alloca %"class.WTF::Vector", align 8
  %4 = alloca %class.scoped_refptr, align 8
  %5 = bitcast %"class.WTF::Vector"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %5) #8
  %6 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %3, i64 0, i32 0, i32 0, i32 0
  %7 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %3, i64 0, i32 0, i32 0, i32 1
  %8 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %3, i64 0, i32 0, i32 0, i32 2
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %5, i8 0, i64 16, i1 false) #8
  %9 = getelementptr inbounds %"class.blink::CalculationExpressionComparisonNode", %"class.blink::CalculationExpressionComparisonNode"* %0, i64 0, i32 2, i32 0, i32 0, i32 2
  %10 = load i32, i32* %9, align 4
  %11 = icmp eq i32 %10, 0
  br i1 %11, label %29, label %12, !prof !2

12:                                               ; preds = %2
  %13 = zext i32 %10 to i64
  %14 = tail call i64 @_ZN3WTF18PartitionAllocator13QuantizedSizeI13scoped_refptrIKN5blink25CalculationExpressionNodeEEEEmm(i64 %13) #8
  %15 = tail call i8* @_ZN3WTF18PartitionAllocator15AllocateBackingEmPKc(i64 %14, i8* getelementptr inbounds ([101 x i8], [101 x i8]* @__PRETTY_FUNCTION__._ZN3WTF21GetStringWithTypeNameI13scoped_refptrIKN5blink25CalculationExpressionNodeEEEEPKcv, i64 0, i64 0)) #8
  %16 = ptrtoint i8* %15 to i64
  %17 = bitcast %"class.WTF::Vector"* %3 to i64*
  store atomic i64 %16, i64* %17 monotonic, align 8
  %18 = lshr i64 %14, 3
  %19 = trunc i64 %18 to i32
  store i32 %19, i32* %7, align 8
  %20 = load i32, i32* %9, align 4
  %21 = getelementptr inbounds %"class.blink::CalculationExpressionComparisonNode", %"class.blink::CalculationExpressionComparisonNode"* %0, i64 0, i32 2, i32 0, i32 0, i32 0
  %22 = load %class.scoped_refptr*, %class.scoped_refptr** %21, align 8
  %23 = zext i32 %20 to i64
  %24 = getelementptr inbounds %class.scoped_refptr, %class.scoped_refptr* %22, i64 %23
  %25 = icmp eq i32 %20, 0
  br i1 %25, label %29, label %26

26:                                               ; preds = %12
  %27 = bitcast %class.scoped_refptr* %4 to i8*
  %28 = getelementptr inbounds %class.scoped_refptr, %class.scoped_refptr* %4, i64 0, i32 0
  br label %69

29:                                               ; preds = %105, %2, %12
  %30 = getelementptr inbounds %"class.blink::CalculationExpressionComparisonNode", %"class.blink::CalculationExpressionComparisonNode"* %0, i64 0, i32 3
  %31 = load i32, i32* %30, align 8
  %32 = call %"class.blink::CalculationExpressionNode"* @_ZN5blink35CalculationExpressionComparisonNode16CreateSimplifiedEON3WTF6VectorI13scoped_refptrIKNS_25CalculationExpressionNodeEELj0ENS1_18PartitionAllocatorEEENS0_4TypeE(%"class.WTF::Vector"* nonnull dereferenceable(16) %3, i32 %31)
  %33 = load %class.scoped_refptr*, %class.scoped_refptr** %6, align 8
  %34 = icmp eq %class.scoped_refptr* %33, null
  br i1 %34, label %68, label %35, !prof !3

35:                                               ; preds = %29
  %36 = bitcast %class.scoped_refptr* %33 to i8*
  %37 = load i32, i32* %8, align 4
  %38 = icmp eq i32 %37, 0
  br i1 %38, label %66, label %39, !prof !2

39:                                               ; preds = %35
  %40 = zext i32 %37 to i64
  %41 = getelementptr inbounds %class.scoped_refptr, %class.scoped_refptr* %33, i64 %40
  br label %42

42:                                               ; preds = %60, %39
  %43 = phi %class.scoped_refptr* [ %61, %60 ], [ %33, %39 ]
  %44 = getelementptr inbounds %class.scoped_refptr, %class.scoped_refptr* %43, i64 0, i32 0
  %45 = load %"class.blink::CalculationExpressionNode"*, %"class.blink::CalculationExpressionNode"** %44, align 8
  %46 = icmp eq %"class.blink::CalculationExpressionNode"* %45, null
  br i1 %46, label %60, label %47

47:                                               ; preds = %42
  %48 = getelementptr inbounds %"class.blink::CalculationExpressionNode", %"class.blink::CalculationExpressionNode"* %45, i64 0, i32 1, i32 0
  %49 = getelementptr inbounds %"class.base::RefCounted", %"class.base::RefCounted"* %48, i64 0, i32 0
  call void @_ZNK4base6subtle14RefCountedBase11ReleaseImplEv(%"class.base::subtle::RefCountedBase"* %49) #8
  %50 = getelementptr inbounds %"class.base::RefCounted", %"class.base::RefCounted"* %48, i64 0, i32 0, i32 0
  %51 = load i32, i32* %50, align 4
  %52 = icmp eq i32 %51, 0
  br i1 %52, label %53, label %60

53:                                               ; preds = %47
  %54 = getelementptr inbounds %"class.base::RefCounted", %"class.base::RefCounted"* %48, i64 -2
  %55 = bitcast %"class.base::RefCounted"* %54 to %"class.blink::CalculationExpressionNode"*
  %56 = bitcast %"class.base::RefCounted"* %54 to void (%"class.blink::CalculationExpressionNode"*)***
  %57 = load void (%"class.blink::CalculationExpressionNode"*)**, void (%"class.blink::CalculationExpressionNode"*)*** %56, align 8
  %58 = getelementptr inbounds void (%"class.blink::CalculationExpressionNode"*)*, void (%"class.blink::CalculationExpressionNode"*)** %57, i64 8
  %59 = load void (%"class.blink::CalculationExpressionNode"*)*, void (%"class.blink::CalculationExpressionNode"*)** %58, align 8
  call void %59(%"class.blink::CalculationExpressionNode"* nonnull %55) #8
  br label %60

60:                                               ; preds = %53, %47, %42
  %61 = getelementptr inbounds %class.scoped_refptr, %class.scoped_refptr* %43, i64 1
  %62 = icmp eq %class.scoped_refptr* %61, %41
  br i1 %62, label %63, label %42

63:                                               ; preds = %60
  store i32 0, i32* %8, align 4
  %64 = bitcast %"class.WTF::Vector"* %3 to i8**
  %65 = load i8*, i8** %64, align 8
  br label %66

66:                                               ; preds = %63, %35
  %67 = phi i8* [ %65, %63 ], [ %36, %35 ]
  call void @_ZN3WTF18PartitionAllocator11FreeBackingEPv(i8* %67) #8
  store %class.scoped_refptr* null, %class.scoped_refptr** %6, align 8
  br label %68

68:                                               ; preds = %29, %66
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %5) #8
  ret %"class.blink::CalculationExpressionNode"* %32

69:                                               ; preds = %26, %105
  %70 = phi %class.scoped_refptr* [ %22, %26 ], [ %106, %105 ]
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %27) #8
  %71 = getelementptr inbounds %class.scoped_refptr, %class.scoped_refptr* %70, i64 0, i32 0
  %72 = load %"class.blink::CalculationExpressionNode"*, %"class.blink::CalculationExpressionNode"** %71, align 8
  %73 = bitcast %"class.blink::CalculationExpressionNode"* %72 to %"class.blink::CalculationExpressionNode"* (%"class.blink::CalculationExpressionNode"*, double)***
  %74 = load %"class.blink::CalculationExpressionNode"* (%"class.blink::CalculationExpressionNode"*, double)**, %"class.blink::CalculationExpressionNode"* (%"class.blink::CalculationExpressionNode"*, double)*** %73, align 8
  %75 = getelementptr inbounds %"class.blink::CalculationExpressionNode"* (%"class.blink::CalculationExpressionNode"*, double)*, %"class.blink::CalculationExpressionNode"* (%"class.blink::CalculationExpressionNode"*, double)** %74, i64 6
  %76 = load %"class.blink::CalculationExpressionNode"* (%"class.blink::CalculationExpressionNode"*, double)*, %"class.blink::CalculationExpressionNode"* (%"class.blink::CalculationExpressionNode"*, double)** %75, align 8
  %77 = call %"class.blink::CalculationExpressionNode"* %76(%"class.blink::CalculationExpressionNode"* %72, double %1) #8
  store %"class.blink::CalculationExpressionNode"* %77, %"class.blink::CalculationExpressionNode"** %28, align 8
  %78 = load i32, i32* %8, align 4
  %79 = load i32, i32* %7, align 8
  %80 = icmp eq i32 %78, %79
  br i1 %80, label %89, label %81, !prof !2

81:                                               ; preds = %69
  %82 = ptrtoint %"class.blink::CalculationExpressionNode"* %77 to i64
  %83 = load %class.scoped_refptr*, %class.scoped_refptr** %6, align 8
  %84 = zext i32 %78 to i64
  %85 = getelementptr inbounds %class.scoped_refptr, %class.scoped_refptr* %83, i64 %84
  %86 = bitcast %class.scoped_refptr* %85 to i64*
  store i64 %82, i64* %86, align 8
  store %"class.blink::CalculationExpressionNode"* null, %"class.blink::CalculationExpressionNode"** %28, align 8
  %87 = load i32, i32* %8, align 4
  %88 = add i32 %87, 1
  store i32 %88, i32* %8, align 4
  br label %105

89:                                               ; preds = %69
  call void @_ZN3WTF6VectorI13scoped_refptrIKN5blink25CalculationExpressionNodeEELj0ENS_18PartitionAllocatorEE14AppendSlowCaseIS5_EEvOT_(%"class.WTF::Vector"* nonnull %3, %class.scoped_refptr* nonnull dereferenceable(8) %4) #8
  %90 = load %"class.blink::CalculationExpressionNode"*, %"class.blink::CalculationExpressionNode"** %28, align 8
  %91 = icmp eq %"class.blink::CalculationExpressionNode"* %90, null
  br i1 %91, label %105, label %92

92:                                               ; preds = %89
  %93 = getelementptr inbounds %"class.blink::CalculationExpressionNode", %"class.blink::CalculationExpressionNode"* %90, i64 0, i32 1, i32 0
  %94 = getelementptr inbounds %"class.base::RefCounted", %"class.base::RefCounted"* %93, i64 0, i32 0
  call void @_ZNK4base6subtle14RefCountedBase11ReleaseImplEv(%"class.base::subtle::RefCountedBase"* %94) #8
  %95 = getelementptr inbounds %"class.base::RefCounted", %"class.base::RefCounted"* %93, i64 0, i32 0, i32 0
  %96 = load i32, i32* %95, align 4
  %97 = icmp eq i32 %96, 0
  br i1 %97, label %98, label %105

98:                                               ; preds = %92
  %99 = getelementptr inbounds %"class.base::RefCounted", %"class.base::RefCounted"* %93, i64 -2
  %100 = bitcast %"class.base::RefCounted"* %99 to %"class.blink::CalculationExpressionNode"*
  %101 = bitcast %"class.base::RefCounted"* %99 to void (%"class.blink::CalculationExpressionNode"*)***
  %102 = load void (%"class.blink::CalculationExpressionNode"*)**, void (%"class.blink::CalculationExpressionNode"*)*** %101, align 8
  %103 = getelementptr inbounds void (%"class.blink::CalculationExpressionNode"*)*, void (%"class.blink::CalculationExpressionNode"*)** %102, i64 8
  %104 = load void (%"class.blink::CalculationExpressionNode"*)*, void (%"class.blink::CalculationExpressionNode"*)** %103, align 8
  call void %104(%"class.blink::CalculationExpressionNode"* nonnull %100) #8
  br label %105

105:                                              ; preds = %81, %89, %92, %98
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %27) #8
  %106 = getelementptr inbounds %class.scoped_refptr, %class.scoped_refptr* %70, i64 1
  %107 = icmp eq %class.scoped_refptr* %106, %24
  br i1 %107, label %29, label %69
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZNK5blink29CalculationExpressionLeafNode6IsLeafEv(%"class.blink::CalculationExpressionLeafNode"*) unnamed_addr #1 comdat align 2 {
  ret i1 true
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZNK5blink25CalculationExpressionNode16IsMultiplicationEv(%"class.blink::CalculationExpressionNode"*) unnamed_addr #1 comdat align 2 {
  ret i1 false
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZNK5blink25CalculationExpressionNode10IsAdditiveEv(%"class.blink::CalculationExpressionNode"*) unnamed_addr #1 comdat align 2 {
  ret i1 false
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZNK5blink25CalculationExpressionNode12IsComparisonEv(%"class.blink::CalculationExpressionNode"*) unnamed_addr #1 comdat align 2 {
  ret i1 false
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN5blink25CalculationExpressionNodeD2Ev(%"class.blink::CalculationExpressionNode"*) unnamed_addr #1 comdat align 2 {
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN5blink29CalculationExpressionLeafNodeD0Ev(%"class.blink::CalculationExpressionLeafNode"*) unnamed_addr #1 comdat align 2 {
  %2 = bitcast %"class.blink::CalculationExpressionLeafNode"* %0 to i8*
  tail call void @free(i8* %2) #8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZNK5blink25CalculationExpressionNode6IsLeafEv(%"class.blink::CalculationExpressionNode"*) unnamed_addr #1 comdat align 2 {
  ret i1 false
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZNK5blink39CalculationExpressionMultiplicationNode16IsMultiplicationEv(%"class.blink::CalculationExpressionMultiplicationNode"*) unnamed_addr #1 comdat align 2 {
  ret i1 true
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN5blink39CalculationExpressionMultiplicationNodeD2Ev(%"class.blink::CalculationExpressionMultiplicationNode"*) unnamed_addr #1 comdat align 2 {
  %2 = getelementptr inbounds %"class.blink::CalculationExpressionMultiplicationNode", %"class.blink::CalculationExpressionMultiplicationNode"* %0, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [11 x i8*] }, { [11 x i8*] }* @_ZTVN5blink39CalculationExpressionMultiplicationNodeE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %2, align 8
  %3 = getelementptr inbounds %"class.blink::CalculationExpressionMultiplicationNode", %"class.blink::CalculationExpressionMultiplicationNode"* %0, i64 0, i32 2, i32 0
  %4 = load %"class.blink::CalculationExpressionNode"*, %"class.blink::CalculationExpressionNode"** %3, align 8
  %5 = icmp eq %"class.blink::CalculationExpressionNode"* %4, null
  br i1 %5, label %19, label %6

6:                                                ; preds = %1
  %7 = getelementptr inbounds %"class.blink::CalculationExpressionNode", %"class.blink::CalculationExpressionNode"* %4, i64 0, i32 1, i32 0
  %8 = getelementptr inbounds %"class.base::RefCounted", %"class.base::RefCounted"* %7, i64 0, i32 0
  tail call void @_ZNK4base6subtle14RefCountedBase11ReleaseImplEv(%"class.base::subtle::RefCountedBase"* %8) #8
  %9 = getelementptr inbounds %"class.base::RefCounted", %"class.base::RefCounted"* %7, i64 0, i32 0, i32 0
  %10 = load i32, i32* %9, align 4
  %11 = icmp eq i32 %10, 0
  br i1 %11, label %12, label %19

12:                                               ; preds = %6
  %13 = getelementptr inbounds %"class.base::RefCounted", %"class.base::RefCounted"* %7, i64 -2
  %14 = bitcast %"class.base::RefCounted"* %13 to %"class.blink::CalculationExpressionNode"*
  %15 = bitcast %"class.base::RefCounted"* %13 to void (%"class.blink::CalculationExpressionNode"*)***
  %16 = load void (%"class.blink::CalculationExpressionNode"*)**, void (%"class.blink::CalculationExpressionNode"*)*** %15, align 8
  %17 = getelementptr inbounds void (%"class.blink::CalculationExpressionNode"*)*, void (%"class.blink::CalculationExpressionNode"*)** %16, i64 8
  %18 = load void (%"class.blink::CalculationExpressionNode"*)*, void (%"class.blink::CalculationExpressionNode"*)** %17, align 8
  tail call void %18(%"class.blink::CalculationExpressionNode"* nonnull %14) #8
  br label %19

19:                                               ; preds = %1, %6, %12
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN5blink39CalculationExpressionMultiplicationNodeD0Ev(%"class.blink::CalculationExpressionMultiplicationNode"*) unnamed_addr #1 comdat align 2 {
  %2 = getelementptr inbounds %"class.blink::CalculationExpressionMultiplicationNode", %"class.blink::CalculationExpressionMultiplicationNode"* %0, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [11 x i8*] }, { [11 x i8*] }* @_ZTVN5blink39CalculationExpressionMultiplicationNodeE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %2, align 8
  %3 = getelementptr inbounds %"class.blink::CalculationExpressionMultiplicationNode", %"class.blink::CalculationExpressionMultiplicationNode"* %0, i64 0, i32 2, i32 0
  %4 = load %"class.blink::CalculationExpressionNode"*, %"class.blink::CalculationExpressionNode"** %3, align 8
  %5 = icmp eq %"class.blink::CalculationExpressionNode"* %4, null
  br i1 %5, label %19, label %6

6:                                                ; preds = %1
  %7 = getelementptr inbounds %"class.blink::CalculationExpressionNode", %"class.blink::CalculationExpressionNode"* %4, i64 0, i32 1, i32 0
  %8 = getelementptr inbounds %"class.base::RefCounted", %"class.base::RefCounted"* %7, i64 0, i32 0
  tail call void @_ZNK4base6subtle14RefCountedBase11ReleaseImplEv(%"class.base::subtle::RefCountedBase"* %8) #8
  %9 = getelementptr inbounds %"class.base::RefCounted", %"class.base::RefCounted"* %7, i64 0, i32 0, i32 0
  %10 = load i32, i32* %9, align 4
  %11 = icmp eq i32 %10, 0
  br i1 %11, label %12, label %19

12:                                               ; preds = %6
  %13 = getelementptr inbounds %"class.base::RefCounted", %"class.base::RefCounted"* %7, i64 -2
  %14 = bitcast %"class.base::RefCounted"* %13 to %"class.blink::CalculationExpressionNode"*
  %15 = bitcast %"class.base::RefCounted"* %13 to void (%"class.blink::CalculationExpressionNode"*)***
  %16 = load void (%"class.blink::CalculationExpressionNode"*)**, void (%"class.blink::CalculationExpressionNode"*)*** %15, align 8
  %17 = getelementptr inbounds void (%"class.blink::CalculationExpressionNode"*)*, void (%"class.blink::CalculationExpressionNode"*)** %16, i64 8
  %18 = load void (%"class.blink::CalculationExpressionNode"*)*, void (%"class.blink::CalculationExpressionNode"*)** %17, align 8
  tail call void %18(%"class.blink::CalculationExpressionNode"* nonnull %14) #8
  br label %19

19:                                               ; preds = %1, %6, %12
  %20 = bitcast %"class.blink::CalculationExpressionMultiplicationNode"* %0 to i8*
  tail call void @free(i8* %20) #8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZNK5blink33CalculationExpressionAdditiveNode10IsAdditiveEv(%"class.blink::CalculationExpressionAdditiveNode"*) unnamed_addr #1 comdat align 2 {
  ret i1 true
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN5blink33CalculationExpressionAdditiveNodeD2Ev(%"class.blink::CalculationExpressionAdditiveNode"*) unnamed_addr #1 comdat align 2 {
  %2 = getelementptr inbounds %"class.blink::CalculationExpressionAdditiveNode", %"class.blink::CalculationExpressionAdditiveNode"* %0, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [11 x i8*] }, { [11 x i8*] }* @_ZTVN5blink33CalculationExpressionAdditiveNodeE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %2, align 8
  %3 = getelementptr inbounds %"class.blink::CalculationExpressionAdditiveNode", %"class.blink::CalculationExpressionAdditiveNode"* %0, i64 0, i32 3, i32 0
  %4 = load %"class.blink::CalculationExpressionNode"*, %"class.blink::CalculationExpressionNode"** %3, align 8
  %5 = icmp eq %"class.blink::CalculationExpressionNode"* %4, null
  br i1 %5, label %19, label %6

6:                                                ; preds = %1
  %7 = getelementptr inbounds %"class.blink::CalculationExpressionNode", %"class.blink::CalculationExpressionNode"* %4, i64 0, i32 1, i32 0
  %8 = getelementptr inbounds %"class.base::RefCounted", %"class.base::RefCounted"* %7, i64 0, i32 0
  tail call void @_ZNK4base6subtle14RefCountedBase11ReleaseImplEv(%"class.base::subtle::RefCountedBase"* %8) #8
  %9 = getelementptr inbounds %"class.base::RefCounted", %"class.base::RefCounted"* %7, i64 0, i32 0, i32 0
  %10 = load i32, i32* %9, align 4
  %11 = icmp eq i32 %10, 0
  br i1 %11, label %12, label %19

12:                                               ; preds = %6
  %13 = getelementptr inbounds %"class.base::RefCounted", %"class.base::RefCounted"* %7, i64 -2
  %14 = bitcast %"class.base::RefCounted"* %13 to %"class.blink::CalculationExpressionNode"*
  %15 = bitcast %"class.base::RefCounted"* %13 to void (%"class.blink::CalculationExpressionNode"*)***
  %16 = load void (%"class.blink::CalculationExpressionNode"*)**, void (%"class.blink::CalculationExpressionNode"*)*** %15, align 8
  %17 = getelementptr inbounds void (%"class.blink::CalculationExpressionNode"*)*, void (%"class.blink::CalculationExpressionNode"*)** %16, i64 8
  %18 = load void (%"class.blink::CalculationExpressionNode"*)*, void (%"class.blink::CalculationExpressionNode"*)** %17, align 8
  tail call void %18(%"class.blink::CalculationExpressionNode"* nonnull %14) #8
  br label %19

19:                                               ; preds = %1, %6, %12
  %20 = getelementptr inbounds %"class.blink::CalculationExpressionAdditiveNode", %"class.blink::CalculationExpressionAdditiveNode"* %0, i64 0, i32 2, i32 0
  %21 = load %"class.blink::CalculationExpressionNode"*, %"class.blink::CalculationExpressionNode"** %20, align 8
  %22 = icmp eq %"class.blink::CalculationExpressionNode"* %21, null
  br i1 %22, label %36, label %23

23:                                               ; preds = %19
  %24 = getelementptr inbounds %"class.blink::CalculationExpressionNode", %"class.blink::CalculationExpressionNode"* %21, i64 0, i32 1, i32 0
  %25 = getelementptr inbounds %"class.base::RefCounted", %"class.base::RefCounted"* %24, i64 0, i32 0
  tail call void @_ZNK4base6subtle14RefCountedBase11ReleaseImplEv(%"class.base::subtle::RefCountedBase"* %25) #8
  %26 = getelementptr inbounds %"class.base::RefCounted", %"class.base::RefCounted"* %24, i64 0, i32 0, i32 0
  %27 = load i32, i32* %26, align 4
  %28 = icmp eq i32 %27, 0
  br i1 %28, label %29, label %36

29:                                               ; preds = %23
  %30 = getelementptr inbounds %"class.base::RefCounted", %"class.base::RefCounted"* %24, i64 -2
  %31 = bitcast %"class.base::RefCounted"* %30 to %"class.blink::CalculationExpressionNode"*
  %32 = bitcast %"class.base::RefCounted"* %30 to void (%"class.blink::CalculationExpressionNode"*)***
  %33 = load void (%"class.blink::CalculationExpressionNode"*)**, void (%"class.blink::CalculationExpressionNode"*)*** %32, align 8
  %34 = getelementptr inbounds void (%"class.blink::CalculationExpressionNode"*)*, void (%"class.blink::CalculationExpressionNode"*)** %33, i64 8
  %35 = load void (%"class.blink::CalculationExpressionNode"*)*, void (%"class.blink::CalculationExpressionNode"*)** %34, align 8
  tail call void %35(%"class.blink::CalculationExpressionNode"* nonnull %31) #8
  br label %36

36:                                               ; preds = %19, %23, %29
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN5blink33CalculationExpressionAdditiveNodeD0Ev(%"class.blink::CalculationExpressionAdditiveNode"*) unnamed_addr #1 comdat align 2 {
  %2 = getelementptr inbounds %"class.blink::CalculationExpressionAdditiveNode", %"class.blink::CalculationExpressionAdditiveNode"* %0, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [11 x i8*] }, { [11 x i8*] }* @_ZTVN5blink33CalculationExpressionAdditiveNodeE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %2, align 8
  %3 = getelementptr inbounds %"class.blink::CalculationExpressionAdditiveNode", %"class.blink::CalculationExpressionAdditiveNode"* %0, i64 0, i32 3, i32 0
  %4 = load %"class.blink::CalculationExpressionNode"*, %"class.blink::CalculationExpressionNode"** %3, align 8
  %5 = icmp eq %"class.blink::CalculationExpressionNode"* %4, null
  br i1 %5, label %19, label %6

6:                                                ; preds = %1
  %7 = getelementptr inbounds %"class.blink::CalculationExpressionNode", %"class.blink::CalculationExpressionNode"* %4, i64 0, i32 1, i32 0
  %8 = getelementptr inbounds %"class.base::RefCounted", %"class.base::RefCounted"* %7, i64 0, i32 0
  tail call void @_ZNK4base6subtle14RefCountedBase11ReleaseImplEv(%"class.base::subtle::RefCountedBase"* %8) #8
  %9 = getelementptr inbounds %"class.base::RefCounted", %"class.base::RefCounted"* %7, i64 0, i32 0, i32 0
  %10 = load i32, i32* %9, align 4
  %11 = icmp eq i32 %10, 0
  br i1 %11, label %12, label %19

12:                                               ; preds = %6
  %13 = getelementptr inbounds %"class.base::RefCounted", %"class.base::RefCounted"* %7, i64 -2
  %14 = bitcast %"class.base::RefCounted"* %13 to %"class.blink::CalculationExpressionNode"*
  %15 = bitcast %"class.base::RefCounted"* %13 to void (%"class.blink::CalculationExpressionNode"*)***
  %16 = load void (%"class.blink::CalculationExpressionNode"*)**, void (%"class.blink::CalculationExpressionNode"*)*** %15, align 8
  %17 = getelementptr inbounds void (%"class.blink::CalculationExpressionNode"*)*, void (%"class.blink::CalculationExpressionNode"*)** %16, i64 8
  %18 = load void (%"class.blink::CalculationExpressionNode"*)*, void (%"class.blink::CalculationExpressionNode"*)** %17, align 8
  tail call void %18(%"class.blink::CalculationExpressionNode"* nonnull %14) #8
  br label %19

19:                                               ; preds = %12, %6, %1
  %20 = getelementptr inbounds %"class.blink::CalculationExpressionAdditiveNode", %"class.blink::CalculationExpressionAdditiveNode"* %0, i64 0, i32 2, i32 0
  %21 = load %"class.blink::CalculationExpressionNode"*, %"class.blink::CalculationExpressionNode"** %20, align 8
  %22 = icmp eq %"class.blink::CalculationExpressionNode"* %21, null
  br i1 %22, label %36, label %23

23:                                               ; preds = %19
  %24 = getelementptr inbounds %"class.blink::CalculationExpressionNode", %"class.blink::CalculationExpressionNode"* %21, i64 0, i32 1, i32 0
  %25 = getelementptr inbounds %"class.base::RefCounted", %"class.base::RefCounted"* %24, i64 0, i32 0
  tail call void @_ZNK4base6subtle14RefCountedBase11ReleaseImplEv(%"class.base::subtle::RefCountedBase"* %25) #8
  %26 = getelementptr inbounds %"class.base::RefCounted", %"class.base::RefCounted"* %24, i64 0, i32 0, i32 0
  %27 = load i32, i32* %26, align 4
  %28 = icmp eq i32 %27, 0
  br i1 %28, label %29, label %36

29:                                               ; preds = %23
  %30 = getelementptr inbounds %"class.base::RefCounted", %"class.base::RefCounted"* %24, i64 -2
  %31 = bitcast %"class.base::RefCounted"* %30 to %"class.blink::CalculationExpressionNode"*
  %32 = bitcast %"class.base::RefCounted"* %30 to void (%"class.blink::CalculationExpressionNode"*)***
  %33 = load void (%"class.blink::CalculationExpressionNode"*)**, void (%"class.blink::CalculationExpressionNode"*)*** %32, align 8
  %34 = getelementptr inbounds void (%"class.blink::CalculationExpressionNode"*)*, void (%"class.blink::CalculationExpressionNode"*)** %33, i64 8
  %35 = load void (%"class.blink::CalculationExpressionNode"*)*, void (%"class.blink::CalculationExpressionNode"*)** %34, align 8
  tail call void %35(%"class.blink::CalculationExpressionNode"* nonnull %31) #8
  br label %36

36:                                               ; preds = %19, %23, %29
  %37 = bitcast %"class.blink::CalculationExpressionAdditiveNode"* %0 to i8*
  tail call void @free(i8* %37) #8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZNK5blink35CalculationExpressionComparisonNode12IsComparisonEv(%"class.blink::CalculationExpressionComparisonNode"*) unnamed_addr #1 comdat align 2 {
  ret i1 true
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN5blink35CalculationExpressionComparisonNodeD2Ev(%"class.blink::CalculationExpressionComparisonNode"*) unnamed_addr #1 comdat align 2 {
  %2 = getelementptr inbounds %"class.blink::CalculationExpressionComparisonNode", %"class.blink::CalculationExpressionComparisonNode"* %0, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [11 x i8*] }, { [11 x i8*] }* @_ZTVN5blink35CalculationExpressionComparisonNodeE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %2, align 8
  %3 = getelementptr inbounds %"class.blink::CalculationExpressionComparisonNode", %"class.blink::CalculationExpressionComparisonNode"* %0, i64 0, i32 2
  %4 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %3, i64 0, i32 0, i32 0, i32 0
  %5 = load %class.scoped_refptr*, %class.scoped_refptr** %4, align 8
  %6 = icmp eq %class.scoped_refptr* %5, null
  br i1 %6, label %41, label %7, !prof !3

7:                                                ; preds = %1
  %8 = bitcast %class.scoped_refptr* %5 to i8*
  %9 = getelementptr inbounds %"class.blink::CalculationExpressionComparisonNode", %"class.blink::CalculationExpressionComparisonNode"* %0, i64 0, i32 2, i32 0, i32 0, i32 2
  %10 = load i32, i32* %9, align 4
  %11 = icmp eq i32 %10, 0
  br i1 %11, label %39, label %12, !prof !2

12:                                               ; preds = %7
  %13 = zext i32 %10 to i64
  %14 = getelementptr inbounds %class.scoped_refptr, %class.scoped_refptr* %5, i64 %13
  br label %15

15:                                               ; preds = %33, %12
  %16 = phi %class.scoped_refptr* [ %34, %33 ], [ %5, %12 ]
  %17 = getelementptr inbounds %class.scoped_refptr, %class.scoped_refptr* %16, i64 0, i32 0
  %18 = load %"class.blink::CalculationExpressionNode"*, %"class.blink::CalculationExpressionNode"** %17, align 8
  %19 = icmp eq %"class.blink::CalculationExpressionNode"* %18, null
  br i1 %19, label %33, label %20

20:                                               ; preds = %15
  %21 = getelementptr inbounds %"class.blink::CalculationExpressionNode", %"class.blink::CalculationExpressionNode"* %18, i64 0, i32 1, i32 0
  %22 = getelementptr inbounds %"class.base::RefCounted", %"class.base::RefCounted"* %21, i64 0, i32 0
  tail call void @_ZNK4base6subtle14RefCountedBase11ReleaseImplEv(%"class.base::subtle::RefCountedBase"* %22) #8
  %23 = getelementptr inbounds %"class.base::RefCounted", %"class.base::RefCounted"* %21, i64 0, i32 0, i32 0
  %24 = load i32, i32* %23, align 4
  %25 = icmp eq i32 %24, 0
  br i1 %25, label %26, label %33

26:                                               ; preds = %20
  %27 = getelementptr inbounds %"class.base::RefCounted", %"class.base::RefCounted"* %21, i64 -2
  %28 = bitcast %"class.base::RefCounted"* %27 to %"class.blink::CalculationExpressionNode"*
  %29 = bitcast %"class.base::RefCounted"* %27 to void (%"class.blink::CalculationExpressionNode"*)***
  %30 = load void (%"class.blink::CalculationExpressionNode"*)**, void (%"class.blink::CalculationExpressionNode"*)*** %29, align 8
  %31 = getelementptr inbounds void (%"class.blink::CalculationExpressionNode"*)*, void (%"class.blink::CalculationExpressionNode"*)** %30, i64 8
  %32 = load void (%"class.blink::CalculationExpressionNode"*)*, void (%"class.blink::CalculationExpressionNode"*)** %31, align 8
  tail call void %32(%"class.blink::CalculationExpressionNode"* nonnull %28) #8
  br label %33

33:                                               ; preds = %26, %20, %15
  %34 = getelementptr inbounds %class.scoped_refptr, %class.scoped_refptr* %16, i64 1
  %35 = icmp eq %class.scoped_refptr* %34, %14
  br i1 %35, label %36, label %15

36:                                               ; preds = %33
  store i32 0, i32* %9, align 4
  %37 = bitcast %"class.WTF::Vector"* %3 to i8**
  %38 = load i8*, i8** %37, align 8
  br label %39

39:                                               ; preds = %36, %7
  %40 = phi i8* [ %38, %36 ], [ %8, %7 ]
  tail call void @_ZN3WTF18PartitionAllocator11FreeBackingEPv(i8* %40) #8
  store %class.scoped_refptr* null, %class.scoped_refptr** %4, align 8
  br label %41

41:                                               ; preds = %1, %39
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN5blink35CalculationExpressionComparisonNodeD0Ev(%"class.blink::CalculationExpressionComparisonNode"*) unnamed_addr #1 comdat align 2 {
  %2 = getelementptr inbounds %"class.blink::CalculationExpressionComparisonNode", %"class.blink::CalculationExpressionComparisonNode"* %0, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [11 x i8*] }, { [11 x i8*] }* @_ZTVN5blink35CalculationExpressionComparisonNodeE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %2, align 8
  %3 = getelementptr inbounds %"class.blink::CalculationExpressionComparisonNode", %"class.blink::CalculationExpressionComparisonNode"* %0, i64 0, i32 2
  %4 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %3, i64 0, i32 0, i32 0, i32 0
  %5 = load %class.scoped_refptr*, %class.scoped_refptr** %4, align 8
  %6 = icmp eq %class.scoped_refptr* %5, null
  br i1 %6, label %41, label %7, !prof !3

7:                                                ; preds = %1
  %8 = bitcast %class.scoped_refptr* %5 to i8*
  %9 = getelementptr inbounds %"class.blink::CalculationExpressionComparisonNode", %"class.blink::CalculationExpressionComparisonNode"* %0, i64 0, i32 2, i32 0, i32 0, i32 2
  %10 = load i32, i32* %9, align 4
  %11 = icmp eq i32 %10, 0
  br i1 %11, label %39, label %12, !prof !2

12:                                               ; preds = %7
  %13 = zext i32 %10 to i64
  %14 = getelementptr inbounds %class.scoped_refptr, %class.scoped_refptr* %5, i64 %13
  br label %15

15:                                               ; preds = %33, %12
  %16 = phi %class.scoped_refptr* [ %34, %33 ], [ %5, %12 ]
  %17 = getelementptr inbounds %class.scoped_refptr, %class.scoped_refptr* %16, i64 0, i32 0
  %18 = load %"class.blink::CalculationExpressionNode"*, %"class.blink::CalculationExpressionNode"** %17, align 8
  %19 = icmp eq %"class.blink::CalculationExpressionNode"* %18, null
  br i1 %19, label %33, label %20

20:                                               ; preds = %15
  %21 = getelementptr inbounds %"class.blink::CalculationExpressionNode", %"class.blink::CalculationExpressionNode"* %18, i64 0, i32 1, i32 0
  %22 = getelementptr inbounds %"class.base::RefCounted", %"class.base::RefCounted"* %21, i64 0, i32 0
  tail call void @_ZNK4base6subtle14RefCountedBase11ReleaseImplEv(%"class.base::subtle::RefCountedBase"* %22) #8
  %23 = getelementptr inbounds %"class.base::RefCounted", %"class.base::RefCounted"* %21, i64 0, i32 0, i32 0
  %24 = load i32, i32* %23, align 4
  %25 = icmp eq i32 %24, 0
  br i1 %25, label %26, label %33

26:                                               ; preds = %20
  %27 = getelementptr inbounds %"class.base::RefCounted", %"class.base::RefCounted"* %21, i64 -2
  %28 = bitcast %"class.base::RefCounted"* %27 to %"class.blink::CalculationExpressionNode"*
  %29 = bitcast %"class.base::RefCounted"* %27 to void (%"class.blink::CalculationExpressionNode"*)***
  %30 = load void (%"class.blink::CalculationExpressionNode"*)**, void (%"class.blink::CalculationExpressionNode"*)*** %29, align 8
  %31 = getelementptr inbounds void (%"class.blink::CalculationExpressionNode"*)*, void (%"class.blink::CalculationExpressionNode"*)** %30, i64 8
  %32 = load void (%"class.blink::CalculationExpressionNode"*)*, void (%"class.blink::CalculationExpressionNode"*)** %31, align 8
  tail call void %32(%"class.blink::CalculationExpressionNode"* nonnull %28) #8
  br label %33

33:                                               ; preds = %26, %20, %15
  %34 = getelementptr inbounds %class.scoped_refptr, %class.scoped_refptr* %16, i64 1
  %35 = icmp eq %class.scoped_refptr* %34, %14
  br i1 %35, label %36, label %15

36:                                               ; preds = %33
  store i32 0, i32* %9, align 4
  %37 = bitcast %"class.WTF::Vector"* %3 to i8**
  %38 = load i8*, i8** %37, align 8
  br label %39

39:                                               ; preds = %36, %7
  %40 = phi i8* [ %38, %36 ], [ %8, %7 ]
  tail call void @_ZN3WTF18PartitionAllocator11FreeBackingEPv(i8* %40) #8
  br label %41

41:                                               ; preds = %1, %39
  %42 = bitcast %"class.blink::CalculationExpressionComparisonNode"* %0 to i8*
  tail call void @free(i8* %42) #8
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #2

declare void @_ZN3WTF18PartitionAllocator11FreeBackingEPv(i8*) local_unnamed_addr #4

; Function Attrs: nounwind
declare void @free(i8* nocapture) local_unnamed_addr #5

declare void @_ZNK4base6subtle14RefCountedBase11ReleaseImplEv(%"class.base::subtle::RefCountedBase"*) local_unnamed_addr #4

; Function Attrs: nofree nounwind
declare noalias i8* @malloc(i64) local_unnamed_addr #6

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden dereferenceable(8) %class.scoped_refptr* @_ZN3WTF6VectorI13scoped_refptrIKN5blink25CalculationExpressionNodeEELj0ENS_18PartitionAllocatorEE2atEj(%"class.WTF::Vector"*, i32) local_unnamed_addr #1 comdat align 2 {
  %3 = alloca %"class.logging::CheckOpResult", align 8
  %4 = alloca %"class.logging::CheckOpResult", align 8
  %5 = alloca %"class.logging::CheckError", align 8
  %6 = bitcast %"class.logging::CheckOpResult"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %6) #8
  %7 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %4, i64 0, i32 0
  store i8* inttoptr (i64 -6148914691236517206 to i8*), i8** %7, align 8
  %8 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %0, i64 0, i32 0, i32 0, i32 2
  %9 = load i32, i32* %8, align 4
  %10 = bitcast %"class.logging::CheckOpResult"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %10)
  %11 = icmp ugt i32 %9, %1
  br i1 %11, label %12, label %13

12:                                               ; preds = %2
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %10)
  store i8* null, i8** %7, align 8
  br label %22

13:                                               ; preds = %2
  %14 = tail call i8* @_ZN7logging15CheckOpValueStrEj(i32 %1) #8
  %15 = tail call i8* @_ZN7logging15CheckOpValueStrEj(i32 %9) #8
  call void @_ZN7logging13CheckOpResultC1EPKcPcS3_(%"class.logging::CheckOpResult"* nonnull %3, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str, i64 0, i64 0), i8* %14, i8* %15) #8
  %16 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %3, i64 0, i32 0
  %17 = load i8*, i8** %16, align 8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %10)
  store i8* %17, i8** %7, align 8
  %18 = icmp eq i8* %17, null
  br i1 %18, label %22, label %19

19:                                               ; preds = %13
  %20 = bitcast %"class.logging::CheckError"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %20) #8
  call void @_ZN7logging10CheckError7CheckOpEPKciPNS_13CheckOpResultE(%"class.logging::CheckError"* nonnull sret %5, i8* getelementptr inbounds ([55 x i8], [55 x i8]* @.str.1, i64 0, i64 0), i32 1172, %"class.logging::CheckOpResult"* nonnull %4) #8
  %21 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %5) #8
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %5) #8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %20) #8
  br label %22

22:                                               ; preds = %12, %13, %19
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %6) #8
  %23 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %0, i64 0, i32 0, i32 0, i32 0
  %24 = load %class.scoped_refptr*, %class.scoped_refptr** %23, align 8
  %25 = zext i32 %1 to i64
  %26 = getelementptr inbounds %class.scoped_refptr, %class.scoped_refptr* %24, i64 %25
  ret %class.scoped_refptr* %26
}

declare void @_ZN7logging10CheckError7CheckOpEPKciPNS_13CheckOpResultE(%"class.logging::CheckError"* sret, i8*, i32, %"class.logging::CheckOpResult"*) local_unnamed_addr #4

declare dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"*) local_unnamed_addr #4

; Function Attrs: nounwind
declare void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"*) unnamed_addr #5

declare i8* @_ZN7logging15CheckOpValueStrEj(i32) local_unnamed_addr #4

declare void @_ZN7logging13CheckOpResultC1EPKcPcS3_(%"class.logging::CheckOpResult"*, i8*, i8*, i8*) unnamed_addr #4

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden dereferenceable(8) %class.scoped_refptr* @_ZNK3WTF6VectorI13scoped_refptrIKN5blink25CalculationExpressionNodeEELj0ENS_18PartitionAllocatorEE2atEj(%"class.WTF::Vector"*, i32) local_unnamed_addr #1 comdat align 2 {
  %3 = alloca %"class.logging::CheckOpResult", align 8
  %4 = alloca %"class.logging::CheckOpResult", align 8
  %5 = alloca %"class.logging::CheckError", align 8
  %6 = bitcast %"class.logging::CheckOpResult"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %6) #8
  %7 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %4, i64 0, i32 0
  store i8* inttoptr (i64 -6148914691236517206 to i8*), i8** %7, align 8
  %8 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %0, i64 0, i32 0, i32 0, i32 2
  %9 = load i32, i32* %8, align 4
  %10 = bitcast %"class.logging::CheckOpResult"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %10)
  %11 = icmp ugt i32 %9, %1
  br i1 %11, label %12, label %13

12:                                               ; preds = %2
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %10)
  store i8* null, i8** %7, align 8
  br label %22

13:                                               ; preds = %2
  %14 = tail call i8* @_ZN7logging15CheckOpValueStrEj(i32 %1) #8
  %15 = tail call i8* @_ZN7logging15CheckOpValueStrEj(i32 %9) #8
  call void @_ZN7logging13CheckOpResultC1EPKcPcS3_(%"class.logging::CheckOpResult"* nonnull %3, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str, i64 0, i64 0), i8* %14, i8* %15) #8
  %16 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %3, i64 0, i32 0
  %17 = load i8*, i8** %16, align 8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %10)
  store i8* %17, i8** %7, align 8
  %18 = icmp eq i8* %17, null
  br i1 %18, label %22, label %19

19:                                               ; preds = %13
  %20 = bitcast %"class.logging::CheckError"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %20) #8
  call void @_ZN7logging10CheckError7CheckOpEPKciPNS_13CheckOpResultE(%"class.logging::CheckError"* nonnull sret %5, i8* getelementptr inbounds ([55 x i8], [55 x i8]* @.str.1, i64 0, i64 0), i32 1176, %"class.logging::CheckOpResult"* nonnull %4) #8
  %21 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %5) #8
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %5) #8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %20) #8
  br label %22

22:                                               ; preds = %12, %13, %19
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %6) #8
  %23 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %0, i64 0, i32 0, i32 0, i32 0
  %24 = load %class.scoped_refptr*, %class.scoped_refptr** %23, align 8
  %25 = zext i32 %1 to i64
  %26 = getelementptr inbounds %class.scoped_refptr, %class.scoped_refptr* %24, i64 %25
  ret %class.scoped_refptr* %26
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden i64 @_ZN3WTF18PartitionAllocator13QuantizedSizeI13scoped_refptrIKN5blink25CalculationExpressionNodeEEEEmm(i64) local_unnamed_addr #1 comdat align 2 {
  %2 = alloca %"class.logging::CheckOpResult", align 8
  %3 = alloca %"class.logging::CheckOpResult", align 8
  %4 = alloca %"class.logging::CheckError", align 8
  %5 = bitcast %"class.logging::CheckOpResult"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %5) #8
  %6 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %3, i64 0, i32 0
  store i8* inttoptr (i64 -6148914691236517206 to i8*), i8** %6, align 8
  %7 = bitcast %"class.logging::CheckOpResult"* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %7)
  %8 = icmp ugt i64 %0, 268173312
  br i1 %8, label %10, label %9

9:                                                ; preds = %1
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %7)
  store i8* null, i8** %6, align 8
  br label %19

10:                                               ; preds = %1
  %11 = tail call i8* @_ZN7logging15CheckOpValueStrEm(i64 %0) #8
  %12 = tail call i8* @_ZN7logging15CheckOpValueStrEm(i64 268173312) #8
  call void @_ZN7logging13CheckOpResultC1EPKcPcS3_(%"class.logging::CheckOpResult"* nonnull %2, i8* getelementptr inbounds ([44 x i8], [44 x i8]* @.str.3, i64 0, i64 0), i8* %11, i8* %12) #8
  %13 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %2, i64 0, i32 0
  %14 = load i8*, i8** %13, align 8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %7)
  store i8* %14, i8** %6, align 8
  %15 = icmp eq i8* %14, null
  br i1 %15, label %19, label %16

16:                                               ; preds = %10
  %17 = bitcast %"class.logging::CheckError"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %17) #8
  call void @_ZN7logging10CheckError7CheckOpEPKciPNS_13CheckOpResultE(%"class.logging::CheckError"* nonnull sret %4, i8* getelementptr inbounds ([78 x i8], [78 x i8]* @.str.4, i64 0, i64 0), i32 31, %"class.logging::CheckOpResult"* nonnull %3) #8
  %18 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %4) #8
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %4) #8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %17) #8
  br label %19

19:                                               ; preds = %9, %10, %16
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %5) #8
  %20 = shl i64 %0, 3
  %21 = call i64 @_ZN3WTF10Partitions23BufferPotentialCapacityEm(i64 %20) #8
  ret i64 %21
}

declare i64 @_ZN3WTF10Partitions23BufferPotentialCapacityEm(i64) local_unnamed_addr #4

declare i8* @_ZN7logging15CheckOpValueStrEm(i64) local_unnamed_addr #4

declare i8* @_ZN3WTF18PartitionAllocator15AllocateBackingEmPKc(i64, i8*) local_unnamed_addr #4

; Function Attrs: noinline nounwind ssp uwtable
define linkonce_odr hidden void @_ZN3WTF6VectorI13scoped_refptrIKN5blink25CalculationExpressionNodeEELj0ENS_18PartitionAllocatorEE14AppendSlowCaseIS5_EEvOT_(%"class.WTF::Vector"*, %class.scoped_refptr* dereferenceable(8)) local_unnamed_addr #7 comdat align 2 {
  %3 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %0, i64 0, i32 0, i32 0, i32 2
  %4 = load i32, i32* %3, align 4
  %5 = add i32 %4, 1
  %6 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %0, i64 0, i32 0, i32 0, i32 0
  %7 = load %class.scoped_refptr*, %class.scoped_refptr** %6, align 8
  %8 = icmp ugt %class.scoped_refptr* %7, %1
  br i1 %8, label %13, label %9

9:                                                ; preds = %2
  %10 = zext i32 %4 to i64
  %11 = getelementptr inbounds %class.scoped_refptr, %class.scoped_refptr* %7, i64 %10
  %12 = icmp ugt %class.scoped_refptr* %11, %1
  br i1 %12, label %54, label %13

13:                                               ; preds = %9, %2
  %14 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %0, i64 0, i32 0, i32 0, i32 1
  %15 = load i32, i32* %14, align 8
  %16 = lshr i32 %15, 2
  %17 = add i32 %15, 1
  %18 = add i32 %17, %16
  %19 = icmp ugt i32 %18, 4
  %20 = select i1 %19, i32 %18, i32 4
  %21 = icmp ugt i32 %20, %5
  %22 = select i1 %21, i32 %20, i32 %5
  %23 = icmp ult i32 %15, %22
  br i1 %23, label %24, label %99, !prof !3

24:                                               ; preds = %13
  %25 = icmp eq %class.scoped_refptr* %7, null
  %26 = zext i32 %22 to i64
  %27 = tail call i64 @_ZN3WTF18PartitionAllocator13QuantizedSizeI13scoped_refptrIKN5blink25CalculationExpressionNodeEEEEmm(i64 %26) #8
  %28 = tail call i8* @_ZN3WTF18PartitionAllocator15AllocateBackingEmPKc(i64 %27, i8* getelementptr inbounds ([101 x i8], [101 x i8]* @__PRETTY_FUNCTION__._ZN3WTF21GetStringWithTypeNameI13scoped_refptrIKN5blink25CalculationExpressionNodeEEEEPKcv, i64 0, i64 0)) #8
  br i1 %25, label %29, label %35

29:                                               ; preds = %24
  %30 = ptrtoint i8* %28 to i64
  %31 = bitcast %"class.WTF::Vector"* %0 to i64*
  store atomic i64 %30, i64* %31 monotonic, align 8
  %32 = lshr i64 %27, 3
  %33 = trunc i64 %32 to i32
  store i32 %33, i32* %14, align 8
  %34 = bitcast i8* %28 to %class.scoped_refptr*
  br label %99

35:                                               ; preds = %24
  %36 = lshr i64 %27, 3
  %37 = ptrtoint i8* %28 to i64
  %38 = load %class.scoped_refptr*, %class.scoped_refptr** %6, align 8
  %39 = icmp ne i8* %28, null
  %40 = icmp ne %class.scoped_refptr* %38, null
  %41 = and i1 %39, %40
  %42 = bitcast %class.scoped_refptr* %38 to i8*
  br i1 %41, label %43, label %49, !prof !3

43:                                               ; preds = %35
  %44 = load i32, i32* %3, align 4
  %45 = zext i32 %44 to i64
  %46 = shl nuw nsw i64 %45, 3
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %28, i8* nonnull align 8 %42, i64 %46, i1 false) #8
  %47 = bitcast %"class.WTF::Vector"* %0 to i8**
  %48 = load i8*, i8** %47, align 8
  br label %49

49:                                               ; preds = %43, %35
  %50 = phi i8* [ %48, %43 ], [ %42, %35 ]
  tail call void @_ZN3WTF18PartitionAllocator11FreeBackingEPv(i8* %50) #8
  %51 = bitcast %"class.WTF::Vector"* %0 to i64*
  store atomic i64 %37, i64* %51 monotonic, align 8
  %52 = trunc i64 %36 to i32
  store i32 %52, i32* %14, align 8
  %53 = bitcast i8* %28 to %class.scoped_refptr*
  br label %99

54:                                               ; preds = %9
  %55 = ptrtoint %class.scoped_refptr* %1 to i64
  %56 = ptrtoint %class.scoped_refptr* %7 to i64
  %57 = sub i64 %55, %56
  %58 = ashr exact i64 %57, 3
  %59 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %0, i64 0, i32 0, i32 0, i32 1
  %60 = load i32, i32* %59, align 8
  %61 = lshr i32 %60, 2
  %62 = add i32 %60, 1
  %63 = add i32 %62, %61
  %64 = icmp ugt i32 %63, 4
  %65 = select i1 %64, i32 %63, i32 4
  %66 = icmp ugt i32 %65, %5
  %67 = select i1 %66, i32 %65, i32 %5
  %68 = icmp ult i32 %60, %67
  br i1 %68, label %69, label %96, !prof !3

69:                                               ; preds = %54
  %70 = icmp eq %class.scoped_refptr* %7, null
  %71 = zext i32 %67 to i64
  %72 = tail call i64 @_ZN3WTF18PartitionAllocator13QuantizedSizeI13scoped_refptrIKN5blink25CalculationExpressionNodeEEEEmm(i64 %71) #8
  %73 = tail call i8* @_ZN3WTF18PartitionAllocator15AllocateBackingEmPKc(i64 %72, i8* getelementptr inbounds ([101 x i8], [101 x i8]* @__PRETTY_FUNCTION__._ZN3WTF21GetStringWithTypeNameI13scoped_refptrIKN5blink25CalculationExpressionNodeEEEEPKcv, i64 0, i64 0)) #8
  %74 = ptrtoint i8* %73 to i64
  br i1 %70, label %75, label %77

75:                                               ; preds = %69
  %76 = bitcast %"class.WTF::Vector"* %0 to i64*
  store atomic i64 %74, i64* %76 monotonic, align 8
  br label %92

77:                                               ; preds = %69
  %78 = load %class.scoped_refptr*, %class.scoped_refptr** %6, align 8
  %79 = icmp ne i8* %73, null
  %80 = icmp ne %class.scoped_refptr* %78, null
  %81 = and i1 %79, %80
  %82 = bitcast %class.scoped_refptr* %78 to i8*
  br i1 %81, label %83, label %89, !prof !3

83:                                               ; preds = %77
  %84 = load i32, i32* %3, align 4
  %85 = zext i32 %84 to i64
  %86 = shl nuw nsw i64 %85, 3
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %73, i8* nonnull align 8 %82, i64 %86, i1 false) #8
  %87 = bitcast %"class.WTF::Vector"* %0 to i8**
  %88 = load i8*, i8** %87, align 8
  br label %89

89:                                               ; preds = %83, %77
  %90 = phi i8* [ %88, %83 ], [ %82, %77 ]
  tail call void @_ZN3WTF18PartitionAllocator11FreeBackingEPv(i8* %90) #8
  %91 = bitcast %"class.WTF::Vector"* %0 to i64*
  store atomic i64 %74, i64* %91 monotonic, align 8
  br label %92

92:                                               ; preds = %89, %75
  %93 = lshr i64 %72, 3
  %94 = trunc i64 %93 to i32
  store i32 %94, i32* %59, align 8
  %95 = bitcast i8* %73 to %class.scoped_refptr*
  br label %96

96:                                               ; preds = %92, %54
  %97 = phi %class.scoped_refptr* [ %7, %54 ], [ %95, %92 ]
  %98 = getelementptr inbounds %class.scoped_refptr, %class.scoped_refptr* %97, i64 %58
  br label %99

99:                                               ; preds = %49, %29, %13, %96
  %100 = phi %class.scoped_refptr* [ %97, %96 ], [ %7, %13 ], [ %34, %29 ], [ %53, %49 ]
  %101 = phi %class.scoped_refptr* [ %98, %96 ], [ %1, %13 ], [ %1, %29 ], [ %1, %49 ]
  %102 = load i32, i32* %3, align 4
  %103 = zext i32 %102 to i64
  %104 = getelementptr inbounds %class.scoped_refptr, %class.scoped_refptr* %100, i64 %103
  %105 = getelementptr inbounds %class.scoped_refptr, %class.scoped_refptr* %101, i64 0, i32 0
  %106 = bitcast %class.scoped_refptr* %101 to i64*
  %107 = load i64, i64* %106, align 8
  %108 = bitcast %class.scoped_refptr* %104 to i64*
  store i64 %107, i64* %108, align 8
  store %"class.blink::CalculationExpressionNode"* null, %"class.blink::CalculationExpressionNode"** %105, align 8
  %109 = load i32, i32* %3, align 4
  %110 = add i32 %109, 1
  store i32 %110, i32* %3, align 4
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #2

attributes #0 = { norecurse nounwind readonly ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind }
attributes #3 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="64" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { noinline nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #8 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{!"branch_weights", i32 1, i32 2000}
!3 = !{!"branch_weights", i32 2000, i32 1}
