; ModuleID = '../../ui/gfx/mojom/color_space_mojom_traits.cc'
source_filename = "../../ui/gfx/mojom/color_space_mojom_traits.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"class.gfx::mojom::internal::ColorSpace_Data" = type { %"struct.mojo::internal::StructHeader", i32, i32, i32, i32, %"struct.mojo::internal::Pointer", %"struct.mojo::internal::Pointer" }
%"struct.mojo::internal::StructHeader" = type { i32, i32 }
%"struct.mojo::internal::Pointer" = type { i64 }
%"class.mojo::Message" = type { %"class.mojo::ScopedHandleBase", %"class.mojo::internal::Buffer", %"class.std::__1::vector", %"class.std::__1::vector.2", %"class.mojo::ConnectionGroup::Ref"*, i8, i8, i8* }
%"class.mojo::ScopedHandleBase" = type { %"class.mojo::MessageHandle" }
%"class.mojo::MessageHandle" = type { i64 }
%"class.mojo::internal::Buffer" = type { %"class.mojo::MessageHandle", i64, i8*, i64, i64 }
%"class.std::__1::vector" = type { %"class.std::__1::__vector_base" }
%"class.std::__1::__vector_base" = type { %"class.mojo::ScopedHandleBase.0"*, %"class.mojo::ScopedHandleBase.0"*, %"class.std::__1::__compressed_pair" }
%"class.mojo::ScopedHandleBase.0" = type { %"class.mojo::Handle" }
%"class.mojo::Handle" = type { i32 }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %"class.mojo::ScopedHandleBase.0"* }
%"class.std::__1::vector.2" = type { %"class.std::__1::__vector_base.3" }
%"class.std::__1::__vector_base.3" = type { %"class.mojo::ScopedInterfaceEndpointHandle"*, %"class.mojo::ScopedInterfaceEndpointHandle"*, %"class.std::__1::__compressed_pair.4" }
%"class.mojo::ScopedInterfaceEndpointHandle" = type { %class.scoped_refptr }
%class.scoped_refptr = type { %"class.mojo::ScopedInterfaceEndpointHandle::State"* }
%"class.mojo::ScopedInterfaceEndpointHandle::State" = type opaque
%"class.std::__1::__compressed_pair.4" = type { %"struct.std::__1::__compressed_pair_elem.5" }
%"struct.std::__1::__compressed_pair_elem.5" = type { %"class.mojo::ScopedInterfaceEndpointHandle"* }
%"class.mojo::ConnectionGroup::Ref" = type { i32, %class.scoped_refptr.9 }
%class.scoped_refptr.9 = type { %"class.mojo::ConnectionGroup"* }
%"class.mojo::ConnectionGroup" = type <{ i32 (...)**, %"class.base::RefCountedThreadSafe", [4 x i8], %"class.base::RepeatingCallback", %class.scoped_refptr.13, %"class.mojo::ConnectionGroup::Ref", %"struct.std::__1::atomic.15", [4 x i8] }>
%"class.base::RefCountedThreadSafe" = type { %"class.base::subtle::RefCountedThreadSafeBase" }
%"class.base::subtle::RefCountedThreadSafeBase" = type { %"class.base::AtomicRefCount" }
%"class.base::AtomicRefCount" = type { %"struct.std::__1::atomic" }
%"struct.std::__1::atomic" = type { %"struct.std::__1::__atomic_base" }
%"struct.std::__1::__atomic_base" = type { %"struct.std::__1::__atomic_base.10" }
%"struct.std::__1::__atomic_base.10" = type { %"struct.std::__1::__cxx_atomic_impl" }
%"struct.std::__1::__cxx_atomic_impl" = type { %"struct.std::__1::__cxx_atomic_base_impl" }
%"struct.std::__1::__cxx_atomic_base_impl" = type { i32 }
%"class.base::RepeatingCallback" = type { %"class.base::internal::CallbackBaseCopyable" }
%"class.base::internal::CallbackBaseCopyable" = type { %"class.base::internal::CallbackBase" }
%"class.base::internal::CallbackBase" = type { %class.scoped_refptr.11 }
%class.scoped_refptr.11 = type { %"class.base::internal::BindStateBase"* }
%"class.base::internal::BindStateBase" = type { %"class.base::RefCountedThreadSafe.12", void ()*, void (%"class.base::internal::BindStateBase"*)*, i1 (%"class.base::internal::BindStateBase"*, i32)* }
%"class.base::RefCountedThreadSafe.12" = type { %"class.base::subtle::RefCountedThreadSafeBase" }
%class.scoped_refptr.13 = type { %"class.base::SequencedTaskRunner"* }
%"class.base::SequencedTaskRunner" = type { %"class.base::TaskRunner.base", [4 x i8] }
%"class.base::TaskRunner.base" = type <{ i32 (...)**, %"class.base::RefCountedThreadSafe.14" }>
%"class.base::RefCountedThreadSafe.14" = type { %"class.base::subtle::RefCountedThreadSafeBase" }
%"struct.std::__1::atomic.15" = type { %"struct.std::__1::__atomic_base.16" }
%"struct.std::__1::__atomic_base.16" = type { %"struct.std::__1::__atomic_base.17" }
%"struct.std::__1::__atomic_base.17" = type { %"struct.std::__1::__cxx_atomic_impl.18" }
%"struct.std::__1::__cxx_atomic_impl.18" = type { %"struct.std::__1::__cxx_atomic_base_impl.19" }
%"struct.std::__1::__cxx_atomic_base_impl.19" = type { i32 }
%"class.gfx::ColorSpace" = type { i8, i8, i8, i8, [9 x float], [7 x float] }
%"class.base::span" = type { %"struct.base::internal::ExtentStorage", float* }
%"struct.base::internal::ExtentStorage" = type { i64 }
%"class.logging::CheckError" = type { %"class.logging::LogMessage"* }
%"class.logging::LogMessage" = type { i32 (...)**, i32, %"class.std::__1::basic_ostringstream", i64, i8*, i32, %"class.base::ScopedClearLastErrorBase" }
%"class.std::__1::basic_ostringstream" = type { %"class.std::__1::basic_ostream.base", %"class.std::__1::basic_stringbuf", %"class.std::__1::basic_ios.base" }
%"class.std::__1::basic_ostream.base" = type { i32 (...)** }
%"class.std::__1::basic_stringbuf" = type <{ %"class.std::__1::basic_streambuf", %"class.std::__1::basic_string", i8*, i32, [4 x i8] }>
%"class.std::__1::basic_streambuf" = type { i32 (...)**, %"class.std::__1::locale", i8*, i8*, i8*, i8*, i8*, i8* }
%"class.std::__1::locale" = type { %"class.std::__1::locale::__imp"* }
%"class.std::__1::locale::__imp" = type opaque
%"class.std::__1::basic_string" = type { %"class.std::__1::__compressed_pair.20" }
%"class.std::__1::__compressed_pair.20" = type { %"struct.std::__1::__compressed_pair_elem.21" }
%"struct.std::__1::__compressed_pair_elem.21" = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" = type { %union.anon }
%union.anon = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" = type { i8*, i64, i64 }
%"class.std::__1::basic_ios.base" = type <{ %"class.std::__1::ios_base", %"class.std::__1::basic_ostream"*, i32 }>
%"class.std::__1::ios_base" = type { i32 (...)**, i32, i64, i64, i32, i32, i8*, i8*, void (i32, %"class.std::__1::ios_base"*, i32)**, i32*, i64, i64, i64*, i64, i64, i8**, i64, i64 }
%"class.std::__1::basic_ostream" = type { i32 (...)**, %"class.std::__1::basic_ios.base" }
%"class.base::ScopedClearLastErrorBase" = type { i32 }

$_ZN4mojo10EnumTraitsIN3gfx5mojom20ColorSpaceTransferIDENS1_10ColorSpace10TransferIDEE9FromMojomES3_PS5_ = comdat any

$_ZNK4base4spanIfLm18446744073709551615EE7subspanEmm = comdat any

@.str = private unnamed_addr constant [29 x i8] c"../../base/containers/span.h\00", align 1
@.str.1 = private unnamed_addr constant [17 x i8] c"offset <= size()\00", align 1
@.str.2 = private unnamed_addr constant [52 x i8] c"count == dynamic_extent || count <= size() - offset\00", align 1

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZN4mojo12StructTraitsIN3gfx5mojom18ColorSpaceDataViewENS1_10ColorSpaceEE4ReadES3_PS4_(%"class.gfx::mojom::internal::ColorSpace_Data"*, %"class.mojo::Message"*, %"class.gfx::ColorSpace"*) local_unnamed_addr #0 align 2 {
  %4 = alloca %"class.base::span", align 8
  %5 = alloca %"class.base::span", align 8
  %6 = getelementptr inbounds %"class.gfx::mojom::internal::ColorSpace_Data", %"class.gfx::mojom::internal::ColorSpace_Data"* %0, i64 0, i32 1
  %7 = load i32, i32* %6, align 1
  %8 = icmp ult i32 %7, 16
  br i1 %8, label %9, label %141

9:                                                ; preds = %3
  %10 = getelementptr inbounds %"class.gfx::ColorSpace", %"class.gfx::ColorSpace"* %2, i64 0, i32 0
  %11 = trunc i32 %7 to i8
  store i8 %11, i8* %10, align 1
  %12 = getelementptr inbounds %"class.gfx::ColorSpace", %"class.gfx::ColorSpace"* %2, i64 0, i32 1
  %13 = getelementptr inbounds %"class.gfx::mojom::internal::ColorSpace_Data", %"class.gfx::mojom::internal::ColorSpace_Data"* %0, i64 0, i32 2
  %14 = load i32, i32* %13, align 1
  %15 = tail call zeroext i1 @_ZN4mojo10EnumTraitsIN3gfx5mojom20ColorSpaceTransferIDENS1_10ColorSpace10TransferIDEE9FromMojomES3_PS5_(i32 %14, i8* %12) #4
  br i1 %15, label %16, label %141

16:                                               ; preds = %9
  %17 = getelementptr inbounds %"class.gfx::mojom::internal::ColorSpace_Data", %"class.gfx::mojom::internal::ColorSpace_Data"* %0, i64 0, i32 3
  %18 = load i32, i32* %17, align 1
  %19 = icmp ult i32 %18, 12
  br i1 %19, label %20, label %141

20:                                               ; preds = %16
  %21 = getelementptr inbounds %"class.gfx::ColorSpace", %"class.gfx::ColorSpace"* %2, i64 0, i32 2
  %22 = trunc i32 %18 to i8
  store i8 %22, i8* %21, align 1
  %23 = getelementptr inbounds %"class.gfx::mojom::internal::ColorSpace_Data", %"class.gfx::mojom::internal::ColorSpace_Data"* %0, i64 0, i32 4
  %24 = load i32, i32* %23, align 1
  %25 = icmp ult i32 %24, 4
  br i1 %25, label %26, label %141

26:                                               ; preds = %20
  %27 = getelementptr inbounds %"class.gfx::ColorSpace", %"class.gfx::ColorSpace"* %2, i64 0, i32 3
  %28 = trunc i32 %24 to i8
  store i8 %28, i8* %27, align 1
  %29 = bitcast %"class.base::span"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %29) #4
  %30 = getelementptr inbounds %"class.base::span", %"class.base::span"* %4, i64 0, i32 0, i32 0
  %31 = getelementptr inbounds %"class.base::span", %"class.base::span"* %4, i64 0, i32 1
  %32 = getelementptr inbounds %"class.gfx::ColorSpace", %"class.gfx::ColorSpace"* %2, i64 0, i32 4, i64 0
  store i64 9, i64* %30, align 8
  store float* %32, float** %31, align 8
  %33 = getelementptr inbounds %"class.gfx::mojom::internal::ColorSpace_Data", %"class.gfx::mojom::internal::ColorSpace_Data"* %0, i64 0, i32 5
  %34 = getelementptr inbounds %"struct.mojo::internal::Pointer", %"struct.mojo::internal::Pointer"* %33, i64 0, i32 0
  %35 = load i64, i64* %34, align 8
  %36 = icmp eq i64 %35, 0
  %37 = bitcast %"struct.mojo::internal::Pointer"* %33 to i8*
  %38 = getelementptr inbounds i8, i8* %37, i64 %35
  br i1 %36, label %84, label %39

39:                                               ; preds = %26
  %40 = getelementptr inbounds i8, i8* %38, i64 4
  %41 = bitcast i8* %40 to i32*
  %42 = load i32, i32* %41, align 1
  %43 = icmp ugt i32 %42, 9
  br i1 %43, label %83, label %44

44:                                               ; preds = %39
  %45 = zext i32 %42 to i64
  %46 = call { i64, float* } @_ZNK4base4spanIfLm18446744073709551615EE7subspanEmm(%"class.base::span"* nonnull %4, i64 0, i64 %45) #4
  %47 = extractvalue { i64, float* } %46, 0
  %48 = extractvalue { i64, float* } %46, 1
  store i64 %47, i64* %30, align 8
  store float* %48, float** %31, align 8
  %49 = load i32, i32* %41, align 1
  %50 = zext i32 %49 to i64
  %51 = icmp eq i32 %49, 0
  br i1 %51, label %84, label %52

52:                                               ; preds = %44
  %53 = icmp eq float* %48, null
  br i1 %53, label %54, label %67

54:                                               ; preds = %52
  %55 = getelementptr inbounds i8, i8* %38, i64 8
  %56 = bitcast i8* %55 to float*
  %57 = bitcast i8* %55 to i32*
  %58 = load i32, i32* %57, align 4
  store i32 %58, i32* null, align 536870912
  %59 = load i32, i32* %41, align 1
  %60 = icmp ugt i32 %59, 1
  br i1 %60, label %61, label %84

61:                                               ; preds = %54
  %62 = getelementptr inbounds i8, i8* %55, i64 4
  %63 = bitcast i8* %62 to i32*
  %64 = load i32, i32* %63, align 4
  store i32 %64, i32* inttoptr (i64 4 to i32*), align 4
  %65 = load i32, i32* %41, align 1
  %66 = icmp ugt i32 %65, 2
  br i1 %66, label %71, label %84

67:                                               ; preds = %52
  %68 = bitcast float* %48 to i8*
  %69 = getelementptr inbounds i8, i8* %38, i64 8
  %70 = shl nuw nsw i64 %50, 2
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %68, i8* align 4 %69, i64 %70, i1 false) #4
  br label %84

71:                                               ; preds = %61, %71
  %72 = phi i64 [ %77, %71 ], [ 2, %61 ]
  %73 = load float*, float** %31, align 8
  %74 = getelementptr inbounds float, float* %56, i64 %72
  %75 = bitcast float* %74 to i32*
  %76 = load i32, i32* %75, align 4
  %77 = add nuw nsw i64 %72, 1
  %78 = getelementptr inbounds float, float* %73, i64 %72
  %79 = bitcast float* %78 to i32*
  store i32 %76, i32* %79, align 4
  %80 = load i32, i32* %41, align 1
  %81 = zext i32 %80 to i64
  %82 = icmp ult i64 %77, %81
  br i1 %82, label %71, label %84

83:                                               ; preds = %39
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %29) #4
  br label %141

84:                                               ; preds = %71, %61, %26, %67, %44, %54
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %29) #4
  %85 = bitcast %"class.base::span"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %85) #4
  %86 = getelementptr inbounds %"class.base::span", %"class.base::span"* %5, i64 0, i32 0, i32 0
  %87 = getelementptr inbounds %"class.base::span", %"class.base::span"* %5, i64 0, i32 1
  %88 = getelementptr inbounds %"class.gfx::ColorSpace", %"class.gfx::ColorSpace"* %2, i64 0, i32 5, i64 0
  store i64 7, i64* %86, align 8
  store float* %88, float** %87, align 8
  %89 = getelementptr inbounds %"class.gfx::mojom::internal::ColorSpace_Data", %"class.gfx::mojom::internal::ColorSpace_Data"* %0, i64 0, i32 6
  %90 = getelementptr inbounds %"struct.mojo::internal::Pointer", %"struct.mojo::internal::Pointer"* %89, i64 0, i32 0
  %91 = load i64, i64* %90, align 8
  %92 = icmp eq i64 %91, 0
  %93 = bitcast %"struct.mojo::internal::Pointer"* %89 to i8*
  %94 = getelementptr inbounds i8, i8* %93, i64 %91
  br i1 %92, label %140, label %95

95:                                               ; preds = %84
  %96 = getelementptr inbounds i8, i8* %94, i64 4
  %97 = bitcast i8* %96 to i32*
  %98 = load i32, i32* %97, align 1
  %99 = icmp ugt i32 %98, 7
  br i1 %99, label %139, label %100

100:                                              ; preds = %95
  %101 = zext i32 %98 to i64
  %102 = call { i64, float* } @_ZNK4base4spanIfLm18446744073709551615EE7subspanEmm(%"class.base::span"* nonnull %5, i64 0, i64 %101) #4
  %103 = extractvalue { i64, float* } %102, 0
  %104 = extractvalue { i64, float* } %102, 1
  store i64 %103, i64* %86, align 8
  store float* %104, float** %87, align 8
  %105 = load i32, i32* %97, align 1
  %106 = zext i32 %105 to i64
  %107 = icmp eq i32 %105, 0
  br i1 %107, label %140, label %108

108:                                              ; preds = %100
  %109 = icmp eq float* %104, null
  br i1 %109, label %110, label %123

110:                                              ; preds = %108
  %111 = getelementptr inbounds i8, i8* %94, i64 8
  %112 = bitcast i8* %111 to float*
  %113 = bitcast i8* %111 to i32*
  %114 = load i32, i32* %113, align 4
  store i32 %114, i32* null, align 536870912
  %115 = load i32, i32* %97, align 1
  %116 = icmp ugt i32 %115, 1
  br i1 %116, label %117, label %140

117:                                              ; preds = %110
  %118 = getelementptr inbounds i8, i8* %111, i64 4
  %119 = bitcast i8* %118 to i32*
  %120 = load i32, i32* %119, align 4
  store i32 %120, i32* inttoptr (i64 4 to i32*), align 4
  %121 = load i32, i32* %97, align 1
  %122 = icmp ugt i32 %121, 2
  br i1 %122, label %127, label %140

123:                                              ; preds = %108
  %124 = bitcast float* %104 to i8*
  %125 = getelementptr inbounds i8, i8* %94, i64 8
  %126 = shl nuw nsw i64 %106, 2
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %124, i8* align 4 %125, i64 %126, i1 false) #4
  br label %140

127:                                              ; preds = %117, %127
  %128 = phi i64 [ %133, %127 ], [ 2, %117 ]
  %129 = load float*, float** %87, align 8
  %130 = getelementptr inbounds float, float* %112, i64 %128
  %131 = bitcast float* %130 to i32*
  %132 = load i32, i32* %131, align 4
  %133 = add nuw nsw i64 %128, 1
  %134 = getelementptr inbounds float, float* %129, i64 %128
  %135 = bitcast float* %134 to i32*
  store i32 %132, i32* %135, align 4
  %136 = load i32, i32* %97, align 1
  %137 = zext i32 %136 to i64
  %138 = icmp ult i64 %133, %137
  br i1 %138, label %127, label %140

139:                                              ; preds = %95
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %85) #4
  br label %141

140:                                              ; preds = %127, %117, %84, %123, %100, %110
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %85) #4
  br label %141

141:                                              ; preds = %20, %16, %3, %9, %83, %139, %140
  %142 = phi i1 [ true, %140 ], [ false, %139 ], [ false, %83 ], [ false, %20 ], [ false, %16 ], [ false, %3 ], [ false, %9 ]
  ret i1 %142
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZN4mojo10EnumTraitsIN3gfx5mojom20ColorSpaceTransferIDENS1_10ColorSpace10TransferIDEE9FromMojomES3_PS5_(i32, i8*) local_unnamed_addr #0 comdat align 2 {
  %3 = icmp ult i32 %0, 25
  br i1 %3, label %4, label %6

4:                                                ; preds = %2
  %5 = trunc i32 %0 to i8
  store i8 %5, i8* %1, align 1
  br label %6

6:                                                ; preds = %2, %4
  %7 = phi i1 [ false, %2 ], [ true, %4 ]
  ret i1 %7
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #1

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden { i64, float* } @_ZNK4base4spanIfLm18446744073709551615EE7subspanEmm(%"class.base::span"*, i64, i64) local_unnamed_addr #0 comdat align 2 {
  %4 = alloca %"class.logging::CheckError", align 8
  %5 = alloca %"class.logging::CheckError", align 8
  %6 = getelementptr inbounds %"class.base::span", %"class.base::span"* %0, i64 0, i32 0, i32 0
  %7 = load i64, i64* %6, align 8
  %8 = icmp ult i64 %7, %1
  br i1 %8, label %9, label %13

9:                                                ; preds = %3
  %10 = bitcast %"class.logging::CheckError"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %10) #4
  call void @_ZN7logging10CheckError5CheckEPKciS2_(%"class.logging::CheckError"* nonnull sret %4, i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str, i64 0, i64 0), i32 403, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.1, i64 0, i64 0)) #4
  %11 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %4) #4
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %4) #4
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %10) #4
  %12 = load i64, i64* %6, align 8
  br label %13

13:                                               ; preds = %3, %9
  %14 = phi i64 [ %7, %3 ], [ %12, %9 ]
  %15 = icmp eq i64 %2, -1
  %16 = sub i64 %14, %1
  br i1 %15, label %22, label %17

17:                                               ; preds = %13
  %18 = icmp ult i64 %16, %2
  br i1 %18, label %19, label %22

19:                                               ; preds = %17
  %20 = bitcast %"class.logging::CheckError"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %20) #4
  call void @_ZN7logging10CheckError5CheckEPKciS2_(%"class.logging::CheckError"* nonnull sret %5, i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str, i64 0, i64 0), i32 404, i8* getelementptr inbounds ([52 x i8], [52 x i8]* @.str.2, i64 0, i64 0)) #4
  %21 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %5) #4
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %5) #4
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %20) #4
  br label %22

22:                                               ; preds = %13, %19, %17
  %23 = phi i64 [ %2, %17 ], [ %2, %19 ], [ %16, %13 ]
  %24 = getelementptr inbounds %"class.base::span", %"class.base::span"* %0, i64 0, i32 1
  %25 = load float*, float** %24, align 8
  %26 = getelementptr inbounds float, float* %25, i64 %1
  %27 = insertvalue { i64, float* } undef, i64 %23, 0
  %28 = insertvalue { i64, float* } %27, float* %26, 1
  ret { i64, float* } %28
}

declare void @_ZN7logging10CheckError5CheckEPKciS2_(%"class.logging::CheckError"* sret, i8*, i32, i8*) local_unnamed_addr #2

declare dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"*) local_unnamed_addr #2

; Function Attrs: nounwind
declare void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"*) unnamed_addr #3

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
