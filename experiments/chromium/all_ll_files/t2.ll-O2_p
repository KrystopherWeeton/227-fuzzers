; ModuleID = '../../third_party/pdfium/third_party/libopenjpeg20/t2.c'
source_filename = "../../third_party/pdfium/third_party/libopenjpeg20/t2.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%struct.opj_t2 = type { %struct.opj_image*, %struct.opj_cp* }
%struct.opj_image = type { i32, i32, i32, i32, i32, i32, %struct.opj_image_comp*, i8*, i32 }
%struct.opj_image_comp = type { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32*, i16 }
%struct.opj_cp = type { i16, i32, i32, i32, i32, i8*, i32, i32, i32, %struct.opj_ppx_struct*, i8*, i32, i32, i8*, i8*, i8*, i32, i32, i32, %struct.opj_tcp*, %union.anon, i8 }
%struct.opj_ppx_struct = type { i8*, i32 }
%struct.opj_tcp = type { i32, i32, i32, i32, i32, [100 x float], i32, [32 x %struct.opj_poc], i32, %struct.opj_ppx_struct*, i8*, i8*, i32, i32, [100 x float], %struct.opj_tccp*, i32, i32, i8*, i32, double*, float*, float*, %struct.opj_mct_data*, i32, i32, %struct.opj_simple_mcc_decorrelation_data*, i32, i32, i8 }
%struct.opj_poc = type { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, [5 x i8], i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }
%struct.opj_tccp = type { i32, i32, i32, i32, i32, i32, i32, [97 x %struct.opj_stepsize], i32, i32, [33 x i32], [33 x i32], i32 }
%struct.opj_stepsize = type { i32, i32 }
%struct.opj_mct_data = type { i32, i32, i32, i8*, i32 }
%struct.opj_simple_mcc_decorrelation_data = type { i32, i32, %struct.opj_mct_data*, %struct.opj_mct_data*, i8 }
%union.anon = type { %struct.opj_encoding_param }
%struct.opj_encoding_param = type { i32, i32, i32*, i8, i8 }
%struct.opj_tcd_tile = type { i32, i32, i32, i32, i32, %struct.opj_tcd_tilecomp*, i32, double, [100 x double], i32 }
%struct.opj_tcd_tilecomp = type { i32, i32, i32, i32, i32, i32, i32, %struct.opj_tcd_resolution*, i32, i32*, i32, i64, i64, i32*, i32, i32, i32, i32, i32 }
%struct.opj_tcd_resolution = type { i32, i32, i32, i32, i32, i32, i32, [3 x %struct.opj_tcd_band], i32, i32, i32, i32 }
%struct.opj_tcd_band = type { i32, i32, i32, i32, i32, %struct.opj_tcd_precinct*, i32, i32, float }
%struct.opj_tcd_precinct = type { i32, i32, i32, i32, i32, i32, %union.anon.0, i32, %struct.opj_tgt_tree*, %struct.opj_tgt_tree* }
%union.anon.0 = type { %struct.opj_tcd_cblk_enc* }
%struct.opj_tcd_cblk_enc = type { i8*, %struct.opj_tcd_layer*, %struct.opj_tcd_pass*, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }
%struct.opj_tcd_layer = type { i32, i32, double, i8* }
%struct.opj_tcd_pass = type { i32, double, i32, i8 }
%struct.opj_tgt_tree = type { i32, i32, i32, %struct.opj_tgt_node*, i32 }
%struct.opj_tgt_node = type { %struct.opj_tgt_node*, i32, i32, i32 }
%struct.opj_codestream_info = type { double, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32*, i32, %struct.opj_marker_info*, i32, i32, i32, i32, %struct.opj_tile_info* }
%struct.opj_marker_info = type { i16, i64, i32 }
%struct.opj_tile_info = type { double*, i32, i32, i32, i32, [33 x i32], [33 x i32], [33 x i32], [33 x i32], %struct.opj_packet_info*, i32, double, i32, %struct.opj_marker_info*, i32, i32, %struct.opj_tp_info* }
%struct.opj_packet_info = type { i64, i64, i64, double }
%struct.opj_tp_info = type { i32, i32, i32, i32, i32 }
%struct.opj_tcd_marker_info = type { i32, i32, i32* }
%struct.opj_event_mgr = type { i8*, i8*, i8*, void (i8*, i8*)*, void (i8*, i8*)*, void (i8*, i8*)* }
%struct.opj_pi_iterator = type { i8, i16*, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, %struct.opj_poc, i32, %struct.opj_pi_comp*, i32, i32, i32, i32, i32, i32, i32, i32, %struct.opj_event_mgr* }
%struct.opj_pi_comp = type { i32, i32, i32, %struct.opj_pi_resolution* }
%struct.opj_pi_resolution = type { i32, i32, i32, i32 }
%struct.opj_bio = type { i8*, i8*, i8*, i32, i32 }
%struct.opj_tcd = type { i32, i32, i32, i32, i32, %struct.opj_tcd_image*, %struct.opj_image*, %struct.opj_cp*, %struct.opj_tcp*, i32, i8, %struct.opj_thread_pool_t*, i32, i32, i32, i32, i32, i32* }
%struct.opj_tcd_image = type { %struct.opj_tcd_tile* }
%struct.opj_thread_pool_t = type opaque
%struct.opj_codestream_index = type { i64, i64, i64, i32, %struct.opj_marker_info*, i32, i32, %struct.opj_tile_index* }
%struct.opj_tile_index = type { i32, i32, i32, i32, %struct.opj_tp_index*, i32, %struct.opj_marker_info*, i32, i32, %struct.opj_packet_info* }
%struct.opj_tp_index = type { i64, i64, i64 }
%struct.opj_tcd_cblk_dec = type { %struct.opj_tcd_seg*, %struct.opj_tcd_seg_data_chunk*, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32* }
%struct.opj_tcd_seg = type { i32, i32, i32, i32, i32, i32 }
%struct.opj_tcd_seg_data_chunk = type { i8*, i32 }

@.str.1 = private unnamed_addr constant [18 x i8] c"Invalid precinct\0A\00", align 1
@.str.2 = private unnamed_addr constant [42 x i8] c"Not enough space for expected SOP marker\0A\00", align 1
@.str.3 = private unnamed_addr constant [21 x i8] c"Expected SOP marker\0A\00", align 1
@.str.5 = private unnamed_addr constant [42 x i8] c"Not enough space for expected EPH marker\0A\00", align 1
@.str.6 = private unnamed_addr constant [21 x i8] c"Expected EPH marker\0A\00", align 1
@.str.8 = private unnamed_addr constant [54 x i8] c"Invalid bit number %d in opj_t2_read_packet_header()\0A\00", align 1
@.str.12 = private unnamed_addr constant [85 x i8] c"read: segment too long (%d) with max (%d) for codeblock %d (p=%d, b=%d, r=%d, c=%d)\0A\00", align 1
@.str.13 = private unnamed_addr constant [48 x i8] c"cannot allocate opj_tcd_seg_data_chunk_t* array\00", align 1
@.str.14 = private unnamed_addr constant [78 x i8] c"opj_t2_encode_packet(): only %u bytes remaining in output buffer. %u needed.\0A\00", align 1
@.str.15 = private unnamed_addr constant [51 x i8] c"opj_t2_encode_packet(): accessing precno=%u >= %u\0A\00", align 1
@.str.16 = private unnamed_addr constant [85 x i8] c"skip: segment too long (%d) with max (%d) for codeblock %d (p=%d, b=%d, r=%d, c=%d)\0A\00", align 1

; Function Attrs: nounwind ssp uwtable
define hidden i32 @opj_t2_encode_packets(%struct.opj_t2* nocapture readonly, i32, %struct.opj_tcd_tile* nocapture, i32, i8*, i32* nocapture, i32, %struct.opj_codestream_info*, %struct.opj_tcd_marker_info*, i32, i32, i32, i32, %struct.opj_event_mgr*) local_unnamed_addr #0 {
  %15 = alloca i32, align 4
  %16 = bitcast i32* %15 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %16) #3
  store i32 0, i32* %15, align 4
  %17 = getelementptr inbounds %struct.opj_t2, %struct.opj_t2* %0, i64 0, i32 0
  %18 = load %struct.opj_image*, %struct.opj_image** %17, align 8
  %19 = getelementptr inbounds %struct.opj_t2, %struct.opj_t2* %0, i64 0, i32 1
  %20 = load %struct.opj_cp*, %struct.opj_cp** %19, align 8
  %21 = getelementptr inbounds %struct.opj_cp, %struct.opj_cp* %20, i64 0, i32 19
  %22 = load %struct.opj_tcp*, %struct.opj_tcp** %21, align 8
  %23 = zext i32 %1 to i64
  %24 = getelementptr inbounds %struct.opj_tcp, %struct.opj_tcp* %22, i64 %23
  %25 = getelementptr inbounds %struct.opj_cp, %struct.opj_cp* %20, i64 0, i32 0
  %26 = load i16, i16* %25, align 8
  %27 = icmp eq i16 %26, 4
  %28 = select i1 %27, i32 2, i32 1
  %29 = getelementptr inbounds %struct.opj_cp, %struct.opj_cp* %20, i64 0, i32 20, i32 0, i32 0
  %30 = load i32, i32* %29, align 8
  %31 = icmp eq i32 %30, 0
  br i1 %31, label %35, label %32

32:                                               ; preds = %14
  %33 = getelementptr inbounds %struct.opj_image, %struct.opj_image* %18, i64 0, i32 4
  %34 = load i32, i32* %33, align 8
  br label %35

35:                                               ; preds = %14, %32
  %36 = phi i32 [ %34, %32 ], [ 1, %14 ]
  %37 = getelementptr inbounds %struct.opj_tcp, %struct.opj_tcp* %22, i64 %23, i32 6
  %38 = load i32, i32* %37, align 4
  %39 = add i32 %38, 1
  %40 = tail call %struct.opj_pi_iterator* @opj_pi_initialise_encode(%struct.opj_image* %18, %struct.opj_cp* %20, i32 %1, i32 %12, %struct.opj_event_mgr* %13) #3
  %41 = icmp eq %struct.opj_pi_iterator* %40, null
  br i1 %41, label %219, label %42

42:                                               ; preds = %35
  store i32 0, i32* %5, align 4
  %43 = icmp eq i32 %12, 0
  br i1 %43, label %44, label %102

44:                                               ; preds = %42
  %45 = icmp eq i32 %36, 0
  br i1 %45, label %217, label %46

46:                                               ; preds = %44, %99
  %47 = phi i32 [ %100, %99 ], [ 0, %44 ]
  %48 = phi i8* [ %89, %99 ], [ %4, %44 ]
  %49 = phi i32 [ %88, %99 ], [ %6, %44 ]
  br label %50

50:                                               ; preds = %46, %95
  %51 = phi i32 [ 0, %46 ], [ %90, %95 ]
  %52 = phi %struct.opj_pi_iterator* [ %40, %46 ], [ %96, %95 ]
  %53 = phi i32 [ 0, %46 ], [ %97, %95 ]
  %54 = phi i8* [ %48, %46 ], [ %89, %95 ]
  %55 = phi i32 [ %49, %46 ], [ %88, %95 ]
  tail call void @opj_pi_create_encode(%struct.opj_pi_iterator* nonnull %40, %struct.opj_cp* %20, i32 %1, i32 %53, i32 %47, i32 %10, i32 0) #3
  %56 = getelementptr inbounds %struct.opj_pi_iterator, %struct.opj_pi_iterator* %52, i64 0, i32 12, i32 9
  %57 = load i32, i32* %56, align 4
  %58 = icmp eq i32 %57, -1
  br i1 %58, label %217, label %59

59:                                               ; preds = %50
  %60 = tail call i32 @opj_pi_next(%struct.opj_pi_iterator* %52) #3
  %61 = icmp eq i32 %60, 0
  br i1 %61, label %87, label %62

62:                                               ; preds = %59
  %63 = getelementptr inbounds %struct.opj_pi_iterator, %struct.opj_pi_iterator* %52, i64 0, i32 10
  br label %64

64:                                               ; preds = %62, %81
  %65 = phi i32 [ %51, %62 ], [ %84, %81 ]
  %66 = phi i8* [ %54, %62 ], [ %83, %81 ]
  %67 = phi i32 [ %55, %62 ], [ %82, %81 ]
  %68 = load i32, i32* %63, align 8
  %69 = icmp ult i32 %68, %3
  br i1 %69, label %70, label %81

70:                                               ; preds = %64
  store i32 0, i32* %15, align 4
  %71 = call fastcc i32 @opj_t2_encode_packet(i32 %1, %struct.opj_tcd_tile* %2, %struct.opj_tcp* %24, %struct.opj_pi_iterator* %52, i8* %66, i32* nonnull %15, i32 %67, %struct.opj_codestream_info* %7, i32 0, %struct.opj_event_mgr* %13)
  %72 = icmp eq i32 %71, 0
  br i1 %72, label %217, label %73

73:                                               ; preds = %70
  %74 = load i32, i32* %15, align 4
  %75 = add i32 %74, %65
  %76 = zext i32 %74 to i64
  %77 = getelementptr inbounds i8, i8* %66, i64 %76
  %78 = sub i32 %67, %74
  %79 = load i32, i32* %5, align 4
  %80 = add i32 %79, %74
  store i32 %80, i32* %5, align 4
  br label %81

81:                                               ; preds = %73, %64
  %82 = phi i32 [ %78, %73 ], [ %67, %64 ]
  %83 = phi i8* [ %77, %73 ], [ %66, %64 ]
  %84 = phi i32 [ %75, %73 ], [ %65, %64 ]
  %85 = tail call i32 @opj_pi_next(%struct.opj_pi_iterator* %52) #3
  %86 = icmp eq i32 %85, 0
  br i1 %86, label %87, label %64

87:                                               ; preds = %81, %59
  %88 = phi i32 [ %55, %59 ], [ %82, %81 ]
  %89 = phi i8* [ %54, %59 ], [ %83, %81 ]
  %90 = phi i32 [ %51, %59 ], [ %84, %81 ]
  %91 = load i32, i32* %29, align 8
  %92 = icmp ne i32 %91, 0
  %93 = icmp ugt i32 %90, %91
  %94 = and i1 %92, %93
  br i1 %94, label %217, label %95

95:                                               ; preds = %87
  %96 = getelementptr inbounds %struct.opj_pi_iterator, %struct.opj_pi_iterator* %52, i64 1
  %97 = add nuw nsw i32 %53, 1
  %98 = icmp ult i32 %97, %28
  br i1 %98, label %50, label %99

99:                                               ; preds = %95
  %100 = add nuw i32 %47, 1
  %101 = icmp eq i32 %100, %36
  br i1 %101, label %217, label %46

102:                                              ; preds = %42
  tail call void @opj_pi_create_encode(%struct.opj_pi_iterator* nonnull %40, %struct.opj_cp* %20, i32 %1, i32 %11, i32 %9, i32 %10, i32 %12) #3
  %103 = zext i32 %11 to i64
  %104 = getelementptr inbounds %struct.opj_pi_iterator, %struct.opj_pi_iterator* %40, i64 %103
  %105 = getelementptr inbounds %struct.opj_pi_iterator, %struct.opj_pi_iterator* %40, i64 %103, i32 12, i32 9
  %106 = load i32, i32* %105, align 4
  %107 = icmp eq i32 %106, -1
  br i1 %107, label %217, label %108

108:                                              ; preds = %102
  %109 = icmp ne %struct.opj_tcd_marker_info* %8, null
  br i1 %109, label %110, label %122

110:                                              ; preds = %108
  %111 = getelementptr inbounds %struct.opj_tcd_marker_info, %struct.opj_tcd_marker_info* %8, i64 0, i32 0
  %112 = load i32, i32* %111, align 8
  %113 = icmp eq i32 %112, 0
  br i1 %113, label %122, label %114

114:                                              ; preds = %110
  %115 = tail call i32 @opj_get_encoding_packet_count(%struct.opj_image* %18, %struct.opj_cp* %20, i32 %1) #3
  %116 = zext i32 %115 to i64
  %117 = shl nuw nsw i64 %116, 2
  %118 = tail call i8* @opj_malloc(i64 %117) #3
  %119 = getelementptr inbounds %struct.opj_tcd_marker_info, %struct.opj_tcd_marker_info* %8, i64 0, i32 2
  %120 = bitcast i32** %119 to i8**
  store i8* %118, i8** %120, align 8
  %121 = icmp eq i8* %118, null
  br i1 %121, label %217, label %122

122:                                              ; preds = %110, %114, %108
  %123 = tail call i32 @opj_pi_next(%struct.opj_pi_iterator* %104) #3
  %124 = icmp eq i32 %123, 0
  br i1 %124, label %217, label %125

125:                                              ; preds = %122
  %126 = getelementptr inbounds %struct.opj_pi_iterator, %struct.opj_pi_iterator* %40, i64 %103, i32 10
  %127 = getelementptr inbounds %struct.opj_tcd_marker_info, %struct.opj_tcd_marker_info* %8, i64 0, i32 0
  %128 = getelementptr inbounds %struct.opj_tcd_marker_info, %struct.opj_tcd_marker_info* %8, i64 0, i32 2
  %129 = getelementptr inbounds %struct.opj_tcd_marker_info, %struct.opj_tcd_marker_info* %8, i64 0, i32 1
  %130 = icmp eq %struct.opj_codestream_info* %7, null
  %131 = getelementptr inbounds %struct.opj_codestream_info, %struct.opj_codestream_info* %7, i64 0, i32 2
  %132 = getelementptr inbounds %struct.opj_codestream_info, %struct.opj_codestream_info* %7, i64 0, i32 21
  %133 = getelementptr inbounds %struct.opj_codestream_info, %struct.opj_codestream_info* %7, i64 0, i32 1
  %134 = getelementptr inbounds %struct.opj_cp, %struct.opj_cp* %20, i64 0, i32 20, i32 0, i32 4
  %135 = getelementptr inbounds %struct.opj_tcp, %struct.opj_tcp* %22, i64 %23, i32 29
  %136 = getelementptr inbounds %struct.opj_tcd_tile, %struct.opj_tcd_tile* %2, i64 0, i32 9
  br label %137

137:                                              ; preds = %125, %212
  %138 = phi i8* [ %4, %125 ], [ %214, %212 ]
  %139 = phi i32 [ %6, %125 ], [ %213, %212 ]
  %140 = load i32, i32* %126, align 8
  %141 = icmp ult i32 %140, %3
  br i1 %141, label %142, label %212

142:                                              ; preds = %137
  store i32 0, i32* %15, align 4
  %143 = call fastcc i32 @opj_t2_encode_packet(i32 %1, %struct.opj_tcd_tile* %2, %struct.opj_tcp* %24, %struct.opj_pi_iterator* %104, i8* %138, i32* nonnull %15, i32 %139, %struct.opj_codestream_info* %7, i32 %12, %struct.opj_event_mgr* %13)
  %144 = icmp eq i32 %143, 0
  br i1 %144, label %217, label %145

145:                                              ; preds = %142
  %146 = load i32, i32* %15, align 4
  %147 = zext i32 %146 to i64
  %148 = getelementptr inbounds i8, i8* %138, i64 %147
  %149 = sub i32 %139, %146
  %150 = load i32, i32* %5, align 4
  %151 = add i32 %150, %146
  store i32 %151, i32* %5, align 4
  br i1 %109, label %152, label %162

152:                                              ; preds = %145
  %153 = load i32, i32* %127, align 8
  %154 = icmp eq i32 %153, 0
  br i1 %154, label %162, label %155

155:                                              ; preds = %152
  %156 = load i32*, i32** %128, align 8
  %157 = load i32, i32* %129, align 4
  %158 = zext i32 %157 to i64
  %159 = getelementptr inbounds i32, i32* %156, i64 %158
  store i32 %146, i32* %159, align 4
  %160 = load i32, i32* %129, align 4
  %161 = add i32 %160, 1
  store i32 %161, i32* %129, align 4
  br label %162

162:                                              ; preds = %152, %155, %145
  br i1 %130, label %209, label %163

163:                                              ; preds = %162
  %164 = load i32, i32* %131, align 4
  %165 = icmp eq i32 %164, 0
  br i1 %165, label %206, label %166

166:                                              ; preds = %163
  %167 = load %struct.opj_tile_info*, %struct.opj_tile_info** %132, align 8
  %168 = getelementptr inbounds %struct.opj_tile_info, %struct.opj_tile_info* %167, i64 %23, i32 9
  %169 = load %struct.opj_packet_info*, %struct.opj_packet_info** %168, align 8
  %170 = load i32, i32* %133, align 8
  %171 = sext i32 %170 to i64
  %172 = getelementptr inbounds %struct.opj_packet_info, %struct.opj_packet_info* %169, i64 %171
  %173 = icmp eq i32 %170, 0
  br i1 %173, label %174, label %179

174:                                              ; preds = %166
  %175 = getelementptr inbounds %struct.opj_tile_info, %struct.opj_tile_info* %167, i64 %23, i32 3
  %176 = load i32, i32* %175, align 8
  %177 = add nsw i32 %176, 1
  %178 = sext i32 %177 to i64
  br label %197

179:                                              ; preds = %166
  %180 = load i8, i8* %134, align 1
  %181 = lshr i8 %180, 3
  %182 = load i8, i8* %135, align 8
  %183 = lshr i8 %182, 2
  %184 = or i8 %183, %181
  %185 = and i8 %184, 1
  %186 = icmp eq i8 %185, 0
  br i1 %186, label %191, label %187

187:                                              ; preds = %179
  %188 = getelementptr inbounds %struct.opj_packet_info, %struct.opj_packet_info* %172, i64 0, i32 0
  %189 = load i64, i64* %188, align 8
  %190 = icmp eq i64 %189, 0
  br i1 %190, label %191, label %197

191:                                              ; preds = %187, %179
  %192 = add nsw i32 %170, -1
  %193 = sext i32 %192 to i64
  %194 = getelementptr inbounds %struct.opj_packet_info, %struct.opj_packet_info* %169, i64 %193, i32 2
  %195 = load i64, i64* %194, align 8
  %196 = add nsw i64 %195, 1
  br label %197

197:                                              ; preds = %191, %187, %174
  %198 = phi i64 [ %178, %174 ], [ %196, %191 ], [ %189, %187 ]
  %199 = getelementptr inbounds %struct.opj_packet_info, %struct.opj_packet_info* %172, i64 0, i32 0
  store i64 %198, i64* %199, align 8
  %200 = add i64 %198, -1
  %201 = add i64 %200, %147
  %202 = getelementptr inbounds %struct.opj_packet_info, %struct.opj_packet_info* %169, i64 %171, i32 2
  store i64 %201, i64* %202, align 8
  %203 = getelementptr inbounds %struct.opj_packet_info, %struct.opj_packet_info* %169, i64 %171, i32 1
  %204 = load i64, i64* %203, align 8
  %205 = add nsw i64 %200, %204
  store i64 %205, i64* %203, align 8
  br label %206

206:                                              ; preds = %163, %197
  %207 = load i32, i32* %133, align 8
  %208 = add nsw i32 %207, 1
  store i32 %208, i32* %133, align 8
  br label %209

209:                                              ; preds = %162, %206
  %210 = load i32, i32* %136, align 8
  %211 = add i32 %210, 1
  store i32 %211, i32* %136, align 8
  br label %212

212:                                              ; preds = %209, %137
  %213 = phi i32 [ %149, %209 ], [ %139, %137 ]
  %214 = phi i8* [ %148, %209 ], [ %138, %137 ]
  %215 = tail call i32 @opj_pi_next(%struct.opj_pi_iterator* %104) #3
  %216 = icmp eq i32 %215, 0
  br i1 %216, label %217, label %137

217:                                              ; preds = %212, %142, %99, %87, %50, %70, %122, %44, %114, %102
  %218 = phi i32 [ 0, %102 ], [ 0, %114 ], [ 1, %44 ], [ 1, %122 ], [ 0, %70 ], [ 0, %50 ], [ 0, %87 ], [ 1, %99 ], [ 1, %212 ], [ 0, %142 ]
  tail call void @opj_pi_destroy(%struct.opj_pi_iterator* nonnull %40, i32 %39) #3
  br label %219

219:                                              ; preds = %217, %35
  %220 = phi i32 [ 0, %35 ], [ %218, %217 ]
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %16) #3
  ret i32 %220
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

declare %struct.opj_pi_iterator* @opj_pi_initialise_encode(%struct.opj_image*, %struct.opj_cp*, i32, i32, %struct.opj_event_mgr*) local_unnamed_addr #2

declare void @opj_pi_create_encode(%struct.opj_pi_iterator*, %struct.opj_cp*, i32, i32, i32, i32, i32) local_unnamed_addr #2

declare void @opj_pi_destroy(%struct.opj_pi_iterator*, i32) local_unnamed_addr #2

declare i32 @opj_pi_next(%struct.opj_pi_iterator*) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define internal fastcc i32 @opj_t2_encode_packet(i32, %struct.opj_tcd_tile* nocapture readonly, %struct.opj_tcp* nocapture readonly, %struct.opj_pi_iterator* nocapture readonly, i8*, i32* nocapture, i32, %struct.opj_codestream_info*, i32, %struct.opj_event_mgr*) unnamed_addr #0 {
  %11 = getelementptr inbounds %struct.opj_pi_iterator, %struct.opj_pi_iterator* %3, i64 0, i32 7
  %12 = load i32, i32* %11, align 4
  %13 = getelementptr inbounds %struct.opj_pi_iterator, %struct.opj_pi_iterator* %3, i64 0, i32 8
  %14 = load i32, i32* %13, align 8
  %15 = getelementptr inbounds %struct.opj_pi_iterator, %struct.opj_pi_iterator* %3, i64 0, i32 9
  %16 = load i32, i32* %15, align 4
  %17 = getelementptr inbounds %struct.opj_pi_iterator, %struct.opj_pi_iterator* %3, i64 0, i32 10
  %18 = load i32, i32* %17, align 8
  %19 = getelementptr inbounds %struct.opj_tcd_tile, %struct.opj_tcd_tile* %1, i64 0, i32 5
  %20 = load %struct.opj_tcd_tilecomp*, %struct.opj_tcd_tilecomp** %19, align 8
  %21 = zext i32 %12 to i64
  %22 = getelementptr inbounds %struct.opj_tcd_tilecomp, %struct.opj_tcd_tilecomp* %20, i64 %21, i32 7
  %23 = load %struct.opj_tcd_resolution*, %struct.opj_tcd_resolution** %22, align 8
  %24 = zext i32 %14 to i64
  %25 = getelementptr inbounds %struct.opj_tcp, %struct.opj_tcp* %2, i64 0, i32 0
  %26 = load i32, i32* %25, align 8
  %27 = and i32 %26, 2
  %28 = icmp eq i32 %27, 0
  br i1 %28, label %49, label %29

29:                                               ; preds = %10
  %30 = icmp ult i32 %6, 6
  br i1 %30, label %31, label %35

31:                                               ; preds = %29
  %32 = icmp eq i32 %8, 1
  br i1 %32, label %33, label %485

33:                                               ; preds = %31
  %34 = tail call i32 (%struct.opj_event_mgr*, i32, i8*, ...) @opj_event_msg(%struct.opj_event_mgr* %9, i32 1, i8* getelementptr inbounds ([78 x i8], [78 x i8]* @.str.14, i64 0, i64 0), i32 %6, i32 6) #3
  br label %485

35:                                               ; preds = %29
  store i8 -1, i8* %4, align 1
  %36 = getelementptr inbounds i8, i8* %4, i64 1
  store i8 -111, i8* %36, align 1
  %37 = getelementptr inbounds i8, i8* %4, i64 2
  store i8 0, i8* %37, align 1
  %38 = getelementptr inbounds i8, i8* %4, i64 3
  store i8 4, i8* %38, align 1
  %39 = getelementptr inbounds %struct.opj_tcd_tile, %struct.opj_tcd_tile* %1, i64 0, i32 9
  %40 = load i32, i32* %39, align 8
  %41 = lshr i32 %40, 8
  %42 = trunc i32 %41 to i8
  %43 = getelementptr inbounds i8, i8* %4, i64 4
  store i8 %42, i8* %43, align 1
  %44 = load i32, i32* %39, align 8
  %45 = trunc i32 %44 to i8
  %46 = getelementptr inbounds i8, i8* %4, i64 5
  store i8 %45, i8* %46, align 1
  %47 = getelementptr inbounds i8, i8* %4, i64 6
  %48 = add i32 %6, -6
  br label %49

49:                                               ; preds = %10, %35
  %50 = phi i8* [ %47, %35 ], [ %4, %10 ]
  %51 = phi i32 [ %48, %35 ], [ %6, %10 ]
  %52 = icmp eq i32 %18, 0
  br i1 %52, label %53, label %108

53:                                               ; preds = %49
  %54 = getelementptr inbounds %struct.opj_tcd_resolution, %struct.opj_tcd_resolution* %23, i64 %24, i32 6
  %55 = load i32, i32* %54, align 8
  %56 = icmp eq i32 %55, 0
  br i1 %56, label %108, label %57

57:                                               ; preds = %53
  %58 = getelementptr inbounds %struct.opj_tcd_resolution, %struct.opj_tcd_resolution* %23, i64 %24, i32 7, i64 0
  %59 = getelementptr inbounds %struct.opj_tcd_resolution, %struct.opj_tcd_resolution* %23, i64 %24, i32 4
  %60 = getelementptr inbounds %struct.opj_tcd_resolution, %struct.opj_tcd_resolution* %23, i64 %24, i32 5
  %61 = zext i32 %16 to i64
  br label %62

62:                                               ; preds = %57, %103
  %63 = phi %struct.opj_tcd_band* [ %58, %57 ], [ %105, %103 ]
  %64 = phi i32 [ 0, %57 ], [ %104, %103 ]
  %65 = tail call i32 @opj_tcd_is_band_empty(%struct.opj_tcd_band* %63) #3
  %66 = icmp eq i32 %65, 0
  br i1 %66, label %67, label %103

67:                                               ; preds = %62
  %68 = load i32, i32* %59, align 8
  %69 = load i32, i32* %60, align 4
  %70 = mul i32 %69, %68
  %71 = icmp ult i32 %16, %70
  br i1 %71, label %72, label %101

72:                                               ; preds = %67
  %73 = getelementptr inbounds %struct.opj_tcd_band, %struct.opj_tcd_band* %63, i64 0, i32 5
  %74 = load %struct.opj_tcd_precinct*, %struct.opj_tcd_precinct** %73, align 8
  %75 = getelementptr inbounds %struct.opj_tcd_precinct, %struct.opj_tcd_precinct* %74, i64 %61, i32 8
  %76 = load %struct.opj_tgt_tree*, %struct.opj_tgt_tree** %75, align 8
  tail call void @opj_tgt_reset(%struct.opj_tgt_tree* %76) #3
  %77 = getelementptr inbounds %struct.opj_tcd_precinct, %struct.opj_tcd_precinct* %74, i64 %61, i32 9
  %78 = load %struct.opj_tgt_tree*, %struct.opj_tgt_tree** %77, align 8
  tail call void @opj_tgt_reset(%struct.opj_tgt_tree* %78) #3
  %79 = getelementptr inbounds %struct.opj_tcd_precinct, %struct.opj_tcd_precinct* %74, i64 %61, i32 4
  %80 = load i32, i32* %79, align 8
  %81 = getelementptr inbounds %struct.opj_tcd_precinct, %struct.opj_tcd_precinct* %74, i64 %61, i32 5
  %82 = load i32, i32* %81, align 4
  %83 = mul i32 %82, %80
  %84 = icmp eq i32 %83, 0
  br i1 %84, label %103, label %85

85:                                               ; preds = %72
  %86 = getelementptr inbounds %struct.opj_tcd_precinct, %struct.opj_tcd_precinct* %74, i64 %61, i32 6, i32 0
  %87 = getelementptr inbounds %struct.opj_tcd_band, %struct.opj_tcd_band* %63, i64 0, i32 7
  %88 = zext i32 %83 to i64
  br label %89

89:                                               ; preds = %89, %85
  %90 = phi i64 [ 0, %85 ], [ %99, %89 ]
  %91 = load %struct.opj_tcd_cblk_enc*, %struct.opj_tcd_cblk_enc** %86, align 8
  %92 = getelementptr inbounds %struct.opj_tcd_cblk_enc, %struct.opj_tcd_cblk_enc* %91, i64 %90, i32 10
  store i32 0, i32* %92, align 4
  %93 = load %struct.opj_tgt_tree*, %struct.opj_tgt_tree** %77, align 8
  %94 = load i32, i32* %87, align 4
  %95 = getelementptr inbounds %struct.opj_tcd_cblk_enc, %struct.opj_tcd_cblk_enc* %91, i64 %90, i32 7
  %96 = load i32, i32* %95, align 8
  %97 = sub nsw i32 %94, %96
  %98 = trunc i64 %90 to i32
  tail call void @opj_tgt_setvalue(%struct.opj_tgt_tree* %93, i32 %98, i32 %97) #3
  %99 = add nuw nsw i64 %90, 1
  %100 = icmp eq i64 %99, %88
  br i1 %100, label %103, label %89

101:                                              ; preds = %67
  %102 = tail call i32 (%struct.opj_event_mgr*, i32, i8*, ...) @opj_event_msg(%struct.opj_event_mgr* %9, i32 1, i8* getelementptr inbounds ([51 x i8], [51 x i8]* @.str.15, i64 0, i64 0), i32 %16, i32 %70) #3
  br label %485

103:                                              ; preds = %89, %72, %62
  %104 = add nuw i32 %64, 1
  %105 = getelementptr inbounds %struct.opj_tcd_band, %struct.opj_tcd_band* %63, i64 1
  %106 = load i32, i32* %54, align 8
  %107 = icmp ult i32 %104, %106
  br i1 %107, label %62, label %108

108:                                              ; preds = %103, %53, %49
  %109 = tail call %struct.opj_bio* @opj_bio_create() #3
  %110 = icmp eq %struct.opj_bio* %109, null
  br i1 %110, label %485, label %111

111:                                              ; preds = %108
  tail call void @opj_bio_init_enc(%struct.opj_bio* nonnull %109, i8* %50, i32 %51) #3
  tail call void @opj_bio_write(%struct.opj_bio* nonnull %109, i32 1, i32 1) #3
  %112 = getelementptr inbounds %struct.opj_tcd_resolution, %struct.opj_tcd_resolution* %23, i64 %24, i32 7, i64 0
  %113 = getelementptr inbounds %struct.opj_tcd_resolution, %struct.opj_tcd_resolution* %23, i64 %24, i32 6
  %114 = load i32, i32* %113, align 8
  %115 = icmp eq i32 %114, 0
  br i1 %115, label %341, label %116

116:                                              ; preds = %111
  %117 = getelementptr inbounds %struct.opj_tcd_resolution, %struct.opj_tcd_resolution* %23, i64 %24, i32 4
  %118 = getelementptr inbounds %struct.opj_tcd_resolution, %struct.opj_tcd_resolution* %23, i64 %24, i32 5
  %119 = zext i32 %16 to i64
  %120 = zext i32 %18 to i64
  %121 = add i32 %18, 1
  br label %122

122:                                              ; preds = %116, %336
  %123 = phi %struct.opj_tcd_band* [ %112, %116 ], [ %338, %336 ]
  %124 = phi i32 [ 0, %116 ], [ %337, %336 ]
  %125 = tail call i32 @opj_tcd_is_band_empty(%struct.opj_tcd_band* %123) #3
  %126 = icmp eq i32 %125, 0
  br i1 %126, label %127, label %336

127:                                              ; preds = %122
  %128 = load i32, i32* %117, align 8
  %129 = load i32, i32* %118, align 4
  %130 = mul i32 %129, %128
  %131 = icmp ult i32 %16, %130
  br i1 %131, label %132, label %334

132:                                              ; preds = %127
  %133 = getelementptr inbounds %struct.opj_tcd_band, %struct.opj_tcd_band* %123, i64 0, i32 5
  %134 = load %struct.opj_tcd_precinct*, %struct.opj_tcd_precinct** %133, align 8
  %135 = getelementptr inbounds %struct.opj_tcd_precinct, %struct.opj_tcd_precinct* %134, i64 %119, i32 4
  %136 = load i32, i32* %135, align 8
  %137 = getelementptr inbounds %struct.opj_tcd_precinct, %struct.opj_tcd_precinct* %134, i64 %119, i32 5
  %138 = load i32, i32* %137, align 4
  %139 = mul i32 %138, %136
  %140 = getelementptr inbounds %struct.opj_tcd_precinct, %struct.opj_tcd_precinct* %134, i64 %119, i32 6, i32 0
  %141 = icmp eq i32 %139, 0
  br i1 %141, label %336, label %142

142:                                              ; preds = %132
  %143 = load %struct.opj_tcd_cblk_enc*, %struct.opj_tcd_cblk_enc** %140, align 8
  %144 = getelementptr inbounds %struct.opj_tcd_precinct, %struct.opj_tcd_precinct* %134, i64 %119, i32 8
  br label %145

145:                                              ; preds = %159, %142
  %146 = phi %struct.opj_tcd_cblk_enc* [ %143, %142 ], [ %160, %159 ]
  %147 = phi i32 [ 0, %142 ], [ %161, %159 ]
  %148 = getelementptr inbounds %struct.opj_tcd_cblk_enc, %struct.opj_tcd_cblk_enc* %146, i64 0, i32 10
  %149 = load i32, i32* %148, align 4
  %150 = icmp eq i32 %149, 0
  br i1 %150, label %151, label %159

151:                                              ; preds = %145
  %152 = getelementptr inbounds %struct.opj_tcd_cblk_enc, %struct.opj_tcd_cblk_enc* %146, i64 0, i32 1
  %153 = load %struct.opj_tcd_layer*, %struct.opj_tcd_layer** %152, align 8
  %154 = getelementptr inbounds %struct.opj_tcd_layer, %struct.opj_tcd_layer* %153, i64 %120, i32 0
  %155 = load i32, i32* %154, align 8
  %156 = icmp eq i32 %155, 0
  br i1 %156, label %159, label %157

157:                                              ; preds = %151
  %158 = load %struct.opj_tgt_tree*, %struct.opj_tgt_tree** %144, align 8
  tail call void @opj_tgt_setvalue(%struct.opj_tgt_tree* %158, i32 %147, i32 %18) #3
  br label %159

159:                                              ; preds = %151, %145, %157
  %160 = getelementptr inbounds %struct.opj_tcd_cblk_enc, %struct.opj_tcd_cblk_enc* %146, i64 1
  %161 = add nuw i32 %147, 1
  %162 = icmp eq i32 %161, %139
  br i1 %162, label %163, label %145

163:                                              ; preds = %159
  br i1 %141, label %336, label %164

164:                                              ; preds = %163
  %165 = load %struct.opj_tcd_cblk_enc*, %struct.opj_tcd_cblk_enc** %140, align 8
  %166 = getelementptr inbounds %struct.opj_tcd_precinct, %struct.opj_tcd_precinct* %134, i64 %119, i32 8
  %167 = getelementptr inbounds %struct.opj_tcd_precinct, %struct.opj_tcd_precinct* %134, i64 %119, i32 9
  br label %168

168:                                              ; preds = %330, %164
  %169 = phi %struct.opj_tcd_cblk_enc* [ %165, %164 ], [ %331, %330 ]
  %170 = phi i32 [ 0, %164 ], [ %332, %330 ]
  %171 = getelementptr inbounds %struct.opj_tcd_cblk_enc, %struct.opj_tcd_cblk_enc* %169, i64 0, i32 1
  %172 = load %struct.opj_tcd_layer*, %struct.opj_tcd_layer** %171, align 8
  %173 = getelementptr inbounds %struct.opj_tcd_layer, %struct.opj_tcd_layer* %172, i64 %120
  %174 = getelementptr inbounds %struct.opj_tcd_cblk_enc, %struct.opj_tcd_cblk_enc* %169, i64 0, i32 10
  %175 = load i32, i32* %174, align 4
  %176 = icmp eq i32 %175, 0
  br i1 %176, label %177, label %179

177:                                              ; preds = %168
  %178 = load %struct.opj_tgt_tree*, %struct.opj_tgt_tree** %166, align 8
  tail call void @opj_tgt_encode(%struct.opj_bio* nonnull %109, %struct.opj_tgt_tree* %178, i32 %170, i32 %121) #3
  br label %184

179:                                              ; preds = %168
  %180 = getelementptr inbounds %struct.opj_tcd_layer, %struct.opj_tcd_layer* %173, i64 0, i32 0
  %181 = load i32, i32* %180, align 8
  %182 = icmp ne i32 %181, 0
  %183 = zext i1 %182 to i32
  tail call void @opj_bio_write(%struct.opj_bio* nonnull %109, i32 %183, i32 1) #3
  br label %184

184:                                              ; preds = %179, %177
  %185 = getelementptr inbounds %struct.opj_tcd_layer, %struct.opj_tcd_layer* %173, i64 0, i32 0
  %186 = load i32, i32* %185, align 8
  %187 = icmp eq i32 %186, 0
  br i1 %187, label %330, label %188

188:                                              ; preds = %184
  %189 = load i32, i32* %174, align 4
  %190 = icmp eq i32 %189, 0
  br i1 %190, label %191, label %195

191:                                              ; preds = %188
  %192 = getelementptr inbounds %struct.opj_tcd_cblk_enc, %struct.opj_tcd_cblk_enc* %169, i64 0, i32 8
  store i32 3, i32* %192, align 4
  %193 = load %struct.opj_tgt_tree*, %struct.opj_tgt_tree** %167, align 8
  tail call void @opj_tgt_encode(%struct.opj_bio* nonnull %109, %struct.opj_tgt_tree* %193, i32 %170, i32 999) #3
  %194 = load i32, i32* %185, align 8
  br label %195

195:                                              ; preds = %188, %191
  %196 = phi i32 [ %186, %188 ], [ %194, %191 ]
  switch i32 %196, label %199 [
    i32 1, label %197
    i32 2, label %198
  ]

197:                                              ; preds = %195
  tail call void @opj_bio_write(%struct.opj_bio* nonnull %109, i32 0, i32 1) #3
  br label %214

198:                                              ; preds = %195
  tail call void @opj_bio_write(%struct.opj_bio* nonnull %109, i32 2, i32 2) #3
  br label %214

199:                                              ; preds = %195
  %200 = icmp ult i32 %196, 6
  br i1 %200, label %201, label %204

201:                                              ; preds = %199
  %202 = add nsw i32 %196, -3
  %203 = or i32 %202, 12
  tail call void @opj_bio_write(%struct.opj_bio* nonnull %109, i32 %203, i32 4) #3
  br label %214

204:                                              ; preds = %199
  %205 = icmp ult i32 %196, 37
  br i1 %205, label %206, label %209

206:                                              ; preds = %204
  %207 = add nsw i32 %196, -6
  %208 = or i32 %207, 480
  tail call void @opj_bio_write(%struct.opj_bio* nonnull %109, i32 %208, i32 9) #3
  br label %214

209:                                              ; preds = %204
  %210 = icmp ult i32 %196, 165
  br i1 %210, label %211, label %214

211:                                              ; preds = %209
  %212 = add nsw i32 %196, -37
  %213 = or i32 %212, 65408
  tail call void @opj_bio_write(%struct.opj_bio* nonnull %109, i32 %213, i32 16) #3
  br label %214

214:                                              ; preds = %197, %198, %201, %206, %209, %211
  %215 = load i32, i32* %174, align 4
  %216 = load i32, i32* %185, align 8
  %217 = add i32 %216, %215
  %218 = getelementptr inbounds %struct.opj_tcd_cblk_enc, %struct.opj_tcd_cblk_enc* %169, i64 0, i32 2
  %219 = icmp ult i32 %215, %217
  br i1 %219, label %220, label %280

220:                                              ; preds = %214
  %221 = load %struct.opj_tcd_pass*, %struct.opj_tcd_pass** %218, align 8
  %222 = zext i32 %215 to i64
  %223 = getelementptr inbounds %struct.opj_tcd_pass, %struct.opj_tcd_pass* %221, i64 %222
  %224 = add i32 %217, -1
  %225 = getelementptr inbounds %struct.opj_tcd_cblk_enc, %struct.opj_tcd_cblk_enc* %169, i64 0, i32 8
  br label %226

226:                                              ; preds = %267, %220
  %227 = phi i32 [ %215, %220 ], [ %272, %267 ]
  %228 = phi i32 [ 0, %220 ], [ %270, %267 ]
  %229 = phi i32 [ 0, %220 ], [ %269, %267 ]
  %230 = phi i32 [ 0, %220 ], [ %268, %267 ]
  %231 = phi %struct.opj_tcd_pass* [ %223, %220 ], [ %271, %267 ]
  %232 = add i32 %229, 1
  %233 = getelementptr inbounds %struct.opj_tcd_pass, %struct.opj_tcd_pass* %231, i64 0, i32 2
  %234 = load i32, i32* %233, align 8
  %235 = add i32 %234, %228
  %236 = getelementptr inbounds %struct.opj_tcd_pass, %struct.opj_tcd_pass* %231, i64 0, i32 3
  %237 = load i8, i8* %236, align 4
  %238 = and i8 %237, 1
  %239 = icmp ne i8 %238, 0
  %240 = icmp eq i32 %227, %224
  %241 = or i1 %240, %239
  br i1 %241, label %242, label %267

242:                                              ; preds = %226
  %243 = icmp sgt i32 %235, 1
  br i1 %243, label %244, label %250

244:                                              ; preds = %242, %244
  %245 = phi i32 [ %248, %244 ], [ 0, %242 ]
  %246 = phi i32 [ %247, %244 ], [ %235, %242 ]
  %247 = lshr i32 %246, 1
  %248 = add nuw nsw i32 %245, 1
  %249 = icmp ugt i32 %246, 3
  br i1 %249, label %244, label %250

250:                                              ; preds = %244, %242
  %251 = phi i32 [ 0, %242 ], [ %248, %244 ]
  %252 = load i32, i32* %225, align 4
  %253 = icmp sgt i32 %232, 1
  br i1 %253, label %254, label %260

254:                                              ; preds = %250, %254
  %255 = phi i32 [ %258, %254 ], [ 0, %250 ]
  %256 = phi i32 [ %257, %254 ], [ %232, %250 ]
  %257 = lshr i32 %256, 1
  %258 = add nuw nsw i32 %255, 1
  %259 = icmp ugt i32 %256, 3
  br i1 %259, label %254, label %260

260:                                              ; preds = %254, %250
  %261 = phi i32 [ 0, %250 ], [ %258, %254 ]
  %262 = add i32 %251, 1
  %263 = sub i32 %262, %252
  %264 = sub i32 %263, %261
  %265 = icmp sgt i32 %230, %264
  %266 = select i1 %265, i32 %230, i32 %264
  br label %267

267:                                              ; preds = %226, %260
  %268 = phi i32 [ %266, %260 ], [ %230, %226 ]
  %269 = phi i32 [ 0, %260 ], [ %232, %226 ]
  %270 = phi i32 [ 0, %260 ], [ %235, %226 ]
  %271 = getelementptr inbounds %struct.opj_tcd_pass, %struct.opj_tcd_pass* %231, i64 1
  %272 = add nuw i32 %227, 1
  %273 = icmp eq i32 %272, %217
  br i1 %273, label %274, label %226

274:                                              ; preds = %267
  %275 = icmp sgt i32 %268, 0
  br i1 %275, label %276, label %280

276:                                              ; preds = %274, %276
  %277 = phi i32 [ %278, %276 ], [ %268, %274 ]
  %278 = add nsw i32 %277, -1
  tail call void @opj_bio_write(%struct.opj_bio* nonnull %109, i32 1, i32 1) #3
  %279 = icmp sgt i32 %278, 0
  br i1 %279, label %276, label %280

280:                                              ; preds = %276, %214, %274
  %281 = phi i32 [ %270, %274 ], [ 0, %214 ], [ %270, %276 ]
  %282 = phi i32 [ %269, %274 ], [ 0, %214 ], [ %269, %276 ]
  %283 = phi i32 [ %268, %274 ], [ 0, %214 ], [ %268, %276 ]
  tail call void @opj_bio_write(%struct.opj_bio* nonnull %109, i32 0, i32 1) #3
  %284 = getelementptr inbounds %struct.opj_tcd_cblk_enc, %struct.opj_tcd_cblk_enc* %169, i64 0, i32 8
  %285 = load i32, i32* %284, align 4
  %286 = add i32 %285, %283
  store i32 %286, i32* %284, align 4
  %287 = load i32, i32* %174, align 4
  %288 = icmp ult i32 %287, %217
  br i1 %288, label %289, label %330

289:                                              ; preds = %280
  %290 = load %struct.opj_tcd_pass*, %struct.opj_tcd_pass** %218, align 8
  %291 = zext i32 %287 to i64
  %292 = getelementptr inbounds %struct.opj_tcd_pass, %struct.opj_tcd_pass* %290, i64 %291
  br label %293

293:                                              ; preds = %324, %289
  %294 = phi i32 [ %328, %324 ], [ %287, %289 ]
  %295 = phi i32 [ %326, %324 ], [ %281, %289 ]
  %296 = phi i32 [ %325, %324 ], [ %282, %289 ]
  %297 = phi %struct.opj_tcd_pass* [ %327, %324 ], [ %292, %289 ]
  %298 = add i32 %296, 1
  %299 = getelementptr inbounds %struct.opj_tcd_pass, %struct.opj_tcd_pass* %297, i64 0, i32 2
  %300 = load i32, i32* %299, align 8
  %301 = add i32 %300, %295
  %302 = getelementptr inbounds %struct.opj_tcd_pass, %struct.opj_tcd_pass* %297, i64 0, i32 3
  %303 = load i8, i8* %302, align 4
  %304 = and i8 %303, 1
  %305 = icmp eq i8 %304, 0
  br i1 %305, label %306, label %312

306:                                              ; preds = %293
  %307 = load i32, i32* %174, align 4
  %308 = load i32, i32* %185, align 8
  %309 = add i32 %307, -1
  %310 = add i32 %309, %308
  %311 = icmp eq i32 %294, %310
  br i1 %311, label %312, label %324

312:                                              ; preds = %293, %306
  %313 = load i32, i32* %284, align 4
  %314 = icmp sgt i32 %298, 1
  br i1 %314, label %315, label %321

315:                                              ; preds = %312, %315
  %316 = phi i32 [ %319, %315 ], [ 0, %312 ]
  %317 = phi i32 [ %318, %315 ], [ %298, %312 ]
  %318 = lshr i32 %317, 1
  %319 = add nuw nsw i32 %316, 1
  %320 = icmp ugt i32 %317, 3
  br i1 %320, label %315, label %321

321:                                              ; preds = %315, %312
  %322 = phi i32 [ 0, %312 ], [ %319, %315 ]
  %323 = add i32 %322, %313
  tail call void @opj_bio_write(%struct.opj_bio* nonnull %109, i32 %301, i32 %323) #3
  br label %324

324:                                              ; preds = %321, %306
  %325 = phi i32 [ 0, %321 ], [ %298, %306 ]
  %326 = phi i32 [ 0, %321 ], [ %301, %306 ]
  %327 = getelementptr inbounds %struct.opj_tcd_pass, %struct.opj_tcd_pass* %297, i64 1
  %328 = add nuw i32 %294, 1
  %329 = icmp eq i32 %328, %217
  br i1 %329, label %330, label %293

330:                                              ; preds = %324, %280, %184
  %331 = getelementptr inbounds %struct.opj_tcd_cblk_enc, %struct.opj_tcd_cblk_enc* %169, i64 1
  %332 = add nuw i32 %170, 1
  %333 = icmp eq i32 %332, %139
  br i1 %333, label %336, label %168

334:                                              ; preds = %127
  %335 = tail call i32 (%struct.opj_event_mgr*, i32, i8*, ...) @opj_event_msg(%struct.opj_event_mgr* %9, i32 1, i8* getelementptr inbounds ([51 x i8], [51 x i8]* @.str.15, i64 0, i64 0), i32 %16, i32 %130) #3
  br label %485

336:                                              ; preds = %330, %132, %163, %122
  %337 = add nuw i32 %124, 1
  %338 = getelementptr inbounds %struct.opj_tcd_band, %struct.opj_tcd_band* %123, i64 1
  %339 = load i32, i32* %113, align 8
  %340 = icmp ult i32 %337, %339
  br i1 %340, label %122, label %341

341:                                              ; preds = %336, %111
  %342 = tail call i32 @opj_bio_flush(%struct.opj_bio* nonnull %109) #3
  %343 = icmp eq i32 %342, 0
  br i1 %343, label %344, label %345

344:                                              ; preds = %341
  tail call void @opj_bio_destroy(%struct.opj_bio* nonnull %109) #3
  br label %485

345:                                              ; preds = %341
  %346 = tail call i64 @opj_bio_numbytes(%struct.opj_bio* nonnull %109) #3
  %347 = trunc i64 %346 to i32
  %348 = and i64 %346, 4294967295
  %349 = getelementptr inbounds i8, i8* %50, i64 %348
  %350 = sub i32 %51, %347
  tail call void @opj_bio_destroy(%struct.opj_bio* nonnull %109) #3
  %351 = load i32, i32* %25, align 8
  %352 = and i32 %351, 4
  %353 = icmp eq i32 %352, 0
  br i1 %353, label %364, label %354

354:                                              ; preds = %345
  %355 = icmp ult i32 %350, 2
  br i1 %355, label %356, label %360

356:                                              ; preds = %354
  %357 = icmp eq i32 %8, 1
  br i1 %357, label %358, label %485

358:                                              ; preds = %356
  %359 = tail call i32 (%struct.opj_event_mgr*, i32, i8*, ...) @opj_event_msg(%struct.opj_event_mgr* %9, i32 1, i8* getelementptr inbounds ([78 x i8], [78 x i8]* @.str.14, i64 0, i64 0), i32 %350, i32 2) #3
  br label %485

360:                                              ; preds = %354
  store i8 -1, i8* %349, align 1
  %361 = getelementptr inbounds i8, i8* %349, i64 1
  store i8 -110, i8* %361, align 1
  %362 = getelementptr inbounds i8, i8* %349, i64 2
  %363 = add i32 %350, -2
  br label %364

364:                                              ; preds = %345, %360
  %365 = phi i8* [ %362, %360 ], [ %349, %345 ]
  %366 = phi i32 [ %363, %360 ], [ %350, %345 ]
  %367 = icmp ne %struct.opj_codestream_info* %7, null
  br i1 %367, label %368, label %387

368:                                              ; preds = %364
  %369 = getelementptr inbounds %struct.opj_codestream_info, %struct.opj_codestream_info* %7, i64 0, i32 2
  %370 = load i32, i32* %369, align 4
  %371 = icmp eq i32 %370, 0
  br i1 %371, label %387, label %372

372:                                              ; preds = %368
  %373 = getelementptr inbounds %struct.opj_codestream_info, %struct.opj_codestream_info* %7, i64 0, i32 21
  %374 = load %struct.opj_tile_info*, %struct.opj_tile_info** %373, align 8
  %375 = zext i32 %0 to i64
  %376 = getelementptr inbounds %struct.opj_tile_info, %struct.opj_tile_info* %374, i64 %375, i32 9
  %377 = load %struct.opj_packet_info*, %struct.opj_packet_info** %376, align 8
  %378 = getelementptr inbounds %struct.opj_codestream_info, %struct.opj_codestream_info* %7, i64 0, i32 1
  %379 = load i32, i32* %378, align 8
  %380 = sext i32 %379 to i64
  %381 = ptrtoint i8* %365 to i64
  %382 = ptrtoint i8* %4 to i64
  %383 = sub i64 %381, %382
  %384 = shl i64 %383, 32
  %385 = ashr exact i64 %384, 32
  %386 = getelementptr inbounds %struct.opj_packet_info, %struct.opj_packet_info* %377, i64 %380, i32 1
  store i64 %385, i64* %386, align 8
  br label %387

387:                                              ; preds = %368, %372, %364
  %388 = load i32, i32* %113, align 8
  %389 = icmp eq i32 %388, 0
  br i1 %389, label %477, label %390

390:                                              ; preds = %387
  %391 = zext i32 %16 to i64
  %392 = zext i32 %18 to i64
  %393 = getelementptr inbounds %struct.opj_codestream_info, %struct.opj_codestream_info* %7, i64 0, i32 2
  %394 = getelementptr inbounds %struct.opj_codestream_info, %struct.opj_codestream_info* %7, i64 0, i32 21
  %395 = zext i32 %0 to i64
  %396 = getelementptr inbounds %struct.opj_codestream_info, %struct.opj_codestream_info* %7, i64 0, i32 1
  %397 = getelementptr inbounds %struct.opj_codestream_info, %struct.opj_codestream_info* %7, i64 0, i32 0
  br label %398

398:                                              ; preds = %390, %470
  %399 = phi i32 [ %366, %390 ], [ %472, %470 ]
  %400 = phi %struct.opj_tcd_band* [ %112, %390 ], [ %474, %470 ]
  %401 = phi i32 [ 0, %390 ], [ %473, %470 ]
  %402 = phi i8* [ %365, %390 ], [ %471, %470 ]
  %403 = tail call i32 @opj_tcd_is_band_empty(%struct.opj_tcd_band* %400) #3
  %404 = icmp eq i32 %403, 0
  br i1 %404, label %405, label %470

405:                                              ; preds = %398
  %406 = getelementptr inbounds %struct.opj_tcd_band, %struct.opj_tcd_band* %400, i64 0, i32 5
  %407 = load %struct.opj_tcd_precinct*, %struct.opj_tcd_precinct** %406, align 8
  %408 = getelementptr inbounds %struct.opj_tcd_precinct, %struct.opj_tcd_precinct* %407, i64 %391, i32 4
  %409 = load i32, i32* %408, align 8
  %410 = getelementptr inbounds %struct.opj_tcd_precinct, %struct.opj_tcd_precinct* %407, i64 %391, i32 5
  %411 = load i32, i32* %410, align 4
  %412 = mul i32 %411, %409
  %413 = icmp eq i32 %412, 0
  br i1 %413, label %470, label %414

414:                                              ; preds = %405
  %415 = getelementptr inbounds %struct.opj_tcd_precinct, %struct.opj_tcd_precinct* %407, i64 %391, i32 6, i32 0
  %416 = load %struct.opj_tcd_cblk_enc*, %struct.opj_tcd_cblk_enc** %415, align 8
  br label %417

417:                                              ; preds = %464, %414
  %418 = phi i32 [ %466, %464 ], [ %399, %414 ]
  %419 = phi %struct.opj_tcd_cblk_enc* [ %467, %464 ], [ %416, %414 ]
  %420 = phi i32 [ %468, %464 ], [ 0, %414 ]
  %421 = phi i8* [ %465, %464 ], [ %402, %414 ]
  %422 = getelementptr inbounds %struct.opj_tcd_cblk_enc, %struct.opj_tcd_cblk_enc* %419, i64 0, i32 1
  %423 = load %struct.opj_tcd_layer*, %struct.opj_tcd_layer** %422, align 8
  %424 = getelementptr inbounds %struct.opj_tcd_layer, %struct.opj_tcd_layer* %423, i64 %392, i32 0
  %425 = load i32, i32* %424, align 8
  %426 = icmp eq i32 %425, 0
  br i1 %426, label %464, label %427

427:                                              ; preds = %417
  %428 = getelementptr inbounds %struct.opj_tcd_layer, %struct.opj_tcd_layer* %423, i64 %392, i32 1
  %429 = load i32, i32* %428, align 4
  %430 = icmp ugt i32 %429, %418
  br i1 %430, label %431, label %435

431:                                              ; preds = %427
  %432 = icmp eq i32 %8, 1
  br i1 %432, label %433, label %485

433:                                              ; preds = %431
  %434 = tail call i32 (%struct.opj_event_mgr*, i32, i8*, ...) @opj_event_msg(%struct.opj_event_mgr* %9, i32 1, i8* getelementptr inbounds ([78 x i8], [78 x i8]* @.str.14, i64 0, i64 0), i32 %418, i32 %429) #3
  br label %485

435:                                              ; preds = %427
  %436 = getelementptr inbounds %struct.opj_tcd_layer, %struct.opj_tcd_layer* %423, i64 %392, i32 3
  %437 = load i8*, i8** %436, align 8
  %438 = zext i32 %429 to i64
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %421, i8* align 1 %437, i64 %438, i1 false)
  %439 = load i32, i32* %424, align 8
  %440 = getelementptr inbounds %struct.opj_tcd_cblk_enc, %struct.opj_tcd_cblk_enc* %419, i64 0, i32 10
  %441 = load i32, i32* %440, align 4
  %442 = add i32 %441, %439
  store i32 %442, i32* %440, align 4
  %443 = load i32, i32* %428, align 4
  %444 = zext i32 %443 to i64
  %445 = getelementptr inbounds i8, i8* %421, i64 %444
  %446 = sub i32 %418, %443
  br i1 %367, label %447, label %464

447:                                              ; preds = %435
  %448 = load i32, i32* %393, align 4
  %449 = icmp eq i32 %448, 0
  br i1 %449, label %464, label %450

450:                                              ; preds = %447
  %451 = load %struct.opj_tile_info*, %struct.opj_tile_info** %394, align 8
  %452 = getelementptr inbounds %struct.opj_tile_info, %struct.opj_tile_info* %451, i64 %395, i32 9
  %453 = load %struct.opj_packet_info*, %struct.opj_packet_info** %452, align 8
  %454 = load i32, i32* %396, align 8
  %455 = sext i32 %454 to i64
  %456 = getelementptr inbounds %struct.opj_tcd_layer, %struct.opj_tcd_layer* %423, i64 %392, i32 2
  %457 = load double, double* %456, align 8
  %458 = getelementptr inbounds %struct.opj_packet_info, %struct.opj_packet_info* %453, i64 %455, i32 3
  %459 = load double, double* %458, align 8
  %460 = fadd double %457, %459
  store double %460, double* %458, align 8
  %461 = load double, double* %397, align 8
  %462 = fcmp olt double %461, %460
  br i1 %462, label %463, label %464

463:                                              ; preds = %450
  store double %460, double* %397, align 8
  br label %464

464:                                              ; preds = %435, %447, %463, %450, %417
  %465 = phi i8* [ %421, %417 ], [ %445, %450 ], [ %445, %463 ], [ %445, %447 ], [ %445, %435 ]
  %466 = phi i32 [ %418, %417 ], [ %446, %450 ], [ %446, %463 ], [ %446, %447 ], [ %446, %435 ]
  %467 = getelementptr inbounds %struct.opj_tcd_cblk_enc, %struct.opj_tcd_cblk_enc* %419, i64 1
  %468 = add nuw i32 %420, 1
  %469 = icmp eq i32 %468, %412
  br i1 %469, label %470, label %417

470:                                              ; preds = %464, %405, %398
  %471 = phi i8* [ %402, %398 ], [ %402, %405 ], [ %465, %464 ]
  %472 = phi i32 [ %399, %398 ], [ %399, %405 ], [ %466, %464 ]
  %473 = add nuw i32 %401, 1
  %474 = getelementptr inbounds %struct.opj_tcd_band, %struct.opj_tcd_band* %400, i64 1
  %475 = load i32, i32* %113, align 8
  %476 = icmp ult i32 %473, %475
  br i1 %476, label %398, label %477

477:                                              ; preds = %470, %387
  %478 = phi i8* [ %365, %387 ], [ %471, %470 ]
  %479 = ptrtoint i8* %478 to i64
  %480 = ptrtoint i8* %4 to i64
  %481 = sub i64 %479, %480
  %482 = trunc i64 %481 to i32
  %483 = load i32, i32* %5, align 4
  %484 = add i32 %483, %482
  store i32 %484, i32* %5, align 4
  br label %485

485:                                              ; preds = %431, %433, %334, %101, %356, %358, %108, %31, %33, %477, %344
  %486 = phi i32 [ 1, %477 ], [ 0, %344 ], [ 0, %334 ], [ 0, %101 ], [ 0, %33 ], [ 0, %31 ], [ 0, %108 ], [ 0, %358 ], [ 0, %356 ], [ 0, %433 ], [ 0, %431 ]
  ret i32 %486
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

declare i8* @opj_malloc(i64) local_unnamed_addr #2

declare i32 @opj_get_encoding_packet_count(%struct.opj_image*, %struct.opj_cp*, i32) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden i32 @opj_t2_decode_packets(%struct.opj_tcd*, %struct.opj_t2* nocapture readonly, i32, %struct.opj_tcd_tile* nocapture readonly, i8*, i32* nocapture, i32, %struct.opj_codestream_index* nocapture readnone, %struct.opj_event_mgr*) local_unnamed_addr #0 {
  %10 = alloca i32, align 4
  %11 = alloca i32, align 4
  %12 = alloca i32, align 4
  %13 = alloca i32, align 4
  %14 = getelementptr inbounds %struct.opj_t2, %struct.opj_t2* %1, i64 0, i32 0
  %15 = load %struct.opj_image*, %struct.opj_image** %14, align 8
  %16 = getelementptr inbounds %struct.opj_t2, %struct.opj_t2* %1, i64 0, i32 1
  %17 = load %struct.opj_cp*, %struct.opj_cp** %16, align 8
  %18 = getelementptr inbounds %struct.opj_cp, %struct.opj_cp* %17, i64 0, i32 19
  %19 = load %struct.opj_tcp*, %struct.opj_tcp** %18, align 8
  %20 = zext i32 %2 to i64
  %21 = getelementptr inbounds %struct.opj_tcp, %struct.opj_tcp* %19, i64 %20
  %22 = getelementptr inbounds %struct.opj_tcp, %struct.opj_tcp* %19, i64 %20, i32 6
  %23 = load i32, i32* %22, align 4
  %24 = add i32 %23, 1
  %25 = tail call %struct.opj_pi_iterator* @opj_pi_create_decode(%struct.opj_image* %15, %struct.opj_cp* %17, i32 %2, %struct.opj_event_mgr* %8) #3
  %26 = icmp eq %struct.opj_pi_iterator* %25, null
  br i1 %26, label %490, label %27

27:                                               ; preds = %9
  %28 = getelementptr inbounds %struct.opj_image, %struct.opj_image* %15, i64 0, i32 4
  %29 = getelementptr inbounds %struct.opj_tcp, %struct.opj_tcp* %19, i64 %20, i32 3
  %30 = getelementptr inbounds %struct.opj_tcd_tile, %struct.opj_tcd_tile* %3, i64 0, i32 5
  %31 = bitcast i32* %12 to i8*
  %32 = bitcast i32* %13 to i8*
  %33 = bitcast i32* %10 to i8*
  %34 = bitcast i32* %11 to i8*
  %35 = getelementptr inbounds %struct.opj_image, %struct.opj_image* %15, i64 0, i32 6
  br label %36

36:                                               ; preds = %27, %478
  %37 = phi i32 [ %6, %27 ], [ %480, %478 ]
  %38 = phi i8* [ %4, %27 ], [ %479, %478 ]
  %39 = phi %struct.opj_pi_iterator* [ %25, %27 ], [ %481, %478 ]
  %40 = phi i32 [ 0, %27 ], [ %482, %478 ]
  %41 = getelementptr inbounds %struct.opj_pi_iterator, %struct.opj_pi_iterator* %39, i64 0, i32 12, i32 9
  %42 = load i32, i32* %41, align 4
  %43 = icmp eq i32 %42, -1
  br i1 %43, label %44, label %45

44:                                               ; preds = %36
  tail call void @opj_pi_destroy(%struct.opj_pi_iterator* nonnull %25, i32 %24) #3
  br label %490

45:                                               ; preds = %36
  %46 = load i32, i32* %28, align 8
  %47 = zext i32 %46 to i64
  %48 = shl nuw nsw i64 %47, 2
  %49 = tail call i8* @opj_malloc(i64 %48) #3
  %50 = bitcast i8* %49 to i32*
  %51 = icmp eq i8* %49, null
  br i1 %51, label %52, label %53

52:                                               ; preds = %45
  tail call void @opj_pi_destroy(%struct.opj_pi_iterator* nonnull %25, i32 %24) #3
  br label %490

53:                                               ; preds = %45
  %54 = load i32, i32* %28, align 8
  %55 = zext i32 %54 to i64
  %56 = shl nuw nsw i64 %55, 2
  tail call void @llvm.memset.p0i8.i64(i8* nonnull align 4 %49, i8 1, i64 %56, i1 false)
  %57 = tail call i32 @opj_pi_next(%struct.opj_pi_iterator* %39) #3
  %58 = icmp eq i32 %57, 0
  br i1 %58, label %478, label %59

59:                                               ; preds = %53
  %60 = getelementptr inbounds %struct.opj_pi_iterator, %struct.opj_pi_iterator* %39, i64 0, i32 7
  %61 = getelementptr inbounds %struct.opj_pi_iterator, %struct.opj_pi_iterator* %39, i64 0, i32 8
  %62 = getelementptr inbounds %struct.opj_pi_iterator, %struct.opj_pi_iterator* %39, i64 0, i32 9
  %63 = getelementptr inbounds %struct.opj_pi_iterator, %struct.opj_pi_iterator* %39, i64 0, i32 10
  br label %64

64:                                               ; preds = %59, %472
  %65 = phi i32 [ %37, %59 ], [ %475, %472 ]
  %66 = phi i8* [ %38, %59 ], [ %474, %472 ]
  %67 = load i32, i32* %63, align 8
  %68 = load i32, i32* %29, align 4
  %69 = icmp ult i32 %67, %68
  br i1 %69, label %70, label %318

70:                                               ; preds = %64
  %71 = load i32, i32* %61, align 8
  %72 = load %struct.opj_tcd_tilecomp*, %struct.opj_tcd_tilecomp** %30, align 8
  %73 = load i32, i32* %60, align 4
  %74 = zext i32 %73 to i64
  %75 = getelementptr inbounds %struct.opj_tcd_tilecomp, %struct.opj_tcd_tilecomp* %72, i64 %74, i32 6
  %76 = load i32, i32* %75, align 8
  %77 = icmp ult i32 %71, %76
  br i1 %77, label %78, label %318

78:                                               ; preds = %70
  %79 = getelementptr inbounds %struct.opj_tcd_tilecomp, %struct.opj_tcd_tilecomp* %72, i64 %74, i32 7
  %80 = load %struct.opj_tcd_resolution*, %struct.opj_tcd_resolution** %79, align 8
  %81 = zext i32 %71 to i64
  %82 = getelementptr inbounds %struct.opj_tcd_resolution, %struct.opj_tcd_resolution* %80, i64 %81, i32 6
  %83 = load i32, i32* %82, align 8
  %84 = icmp eq i32 %83, 0
  br i1 %84, label %318, label %92

85:                                               ; preds = %92
  %86 = load i32, i32* %82, align 8
  %87 = zext i32 %86 to i64
  %88 = icmp ult i64 %112, %87
  br i1 %88, label %89, label %318

89:                                               ; preds = %85
  %90 = load i32, i32* %60, align 4
  %91 = load i32, i32* %61, align 8
  br label %92

92:                                               ; preds = %78, %89
  %93 = phi i32 [ %91, %89 ], [ %71, %78 ]
  %94 = phi i32 [ %90, %89 ], [ %73, %78 ]
  %95 = phi i64 [ %112, %89 ], [ 0, %78 ]
  %96 = getelementptr inbounds %struct.opj_tcd_resolution, %struct.opj_tcd_resolution* %80, i64 %81, i32 7, i64 %95, i32 5
  %97 = load %struct.opj_tcd_precinct*, %struct.opj_tcd_precinct** %96, align 8
  %98 = load i32, i32* %62, align 4
  %99 = zext i32 %98 to i64
  %100 = getelementptr inbounds %struct.opj_tcd_resolution, %struct.opj_tcd_resolution* %80, i64 %81, i32 7, i64 %95, i32 4
  %101 = load i32, i32* %100, align 8
  %102 = getelementptr inbounds %struct.opj_tcd_precinct, %struct.opj_tcd_precinct* %97, i64 %99, i32 0
  %103 = load i32, i32* %102, align 8
  %104 = getelementptr inbounds %struct.opj_tcd_precinct, %struct.opj_tcd_precinct* %97, i64 %99, i32 1
  %105 = load i32, i32* %104, align 4
  %106 = getelementptr inbounds %struct.opj_tcd_precinct, %struct.opj_tcd_precinct* %97, i64 %99, i32 2
  %107 = load i32, i32* %106, align 8
  %108 = getelementptr inbounds %struct.opj_tcd_precinct, %struct.opj_tcd_precinct* %97, i64 %99, i32 3
  %109 = load i32, i32* %108, align 4
  %110 = tail call i32 @opj_tcd_is_subband_area_of_interest(%struct.opj_tcd* %0, i32 %94, i32 %93, i32 %101, i32 %103, i32 %105, i32 %107, i32 %109) #3
  %111 = icmp eq i32 %110, 0
  %112 = add nuw nsw i64 %95, 1
  br i1 %111, label %85, label %113

113:                                              ; preds = %92
  %114 = load i32, i32* %60, align 4
  %115 = zext i32 %114 to i64
  %116 = getelementptr inbounds i32, i32* %50, i64 %115
  store i32 0, i32* %116, align 4
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %33) #3
  store i32 -1431655766, i32* %10, align 4
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %34) #3
  store i32 0, i32* %11, align 4
  %117 = call fastcc i32 @opj_t2_read_packet_header(%struct.opj_t2* %1, %struct.opj_tcd_tile* %3, %struct.opj_tcp* %21, %struct.opj_pi_iterator* %39, i32* nonnull %10, i8* %66, i32* nonnull %11, i32 %65, %struct.opj_event_mgr* %8) #3
  %118 = icmp eq i32 %117, 0
  br i1 %118, label %307, label %119

119:                                              ; preds = %113
  %120 = load i32, i32* %11, align 4
  %121 = load i32, i32* %10, align 4
  %122 = icmp eq i32 %121, 0
  br i1 %122, label %308, label %123

123:                                              ; preds = %119
  %124 = sub i32 %65, %120
  %125 = zext i32 %120 to i64
  %126 = getelementptr inbounds i8, i8* %66, i64 %125
  store i32 0, i32* %11, align 4
  %127 = load %struct.opj_tcd_tilecomp*, %struct.opj_tcd_tilecomp** %30, align 8
  %128 = load i32, i32* %60, align 4
  %129 = zext i32 %128 to i64
  %130 = getelementptr inbounds %struct.opj_tcd_tilecomp, %struct.opj_tcd_tilecomp* %127, i64 %129, i32 7
  %131 = load %struct.opj_tcd_resolution*, %struct.opj_tcd_resolution** %130, align 8
  %132 = load i32, i32* %61, align 8
  %133 = zext i32 %132 to i64
  %134 = getelementptr inbounds %struct.opj_tcd_resolution, %struct.opj_tcd_resolution* %131, i64 %133, i32 6
  %135 = load i32, i32* %134, align 8
  %136 = icmp eq i32 %135, 0
  br i1 %136, label %300, label %137

137:                                              ; preds = %123
  %138 = getelementptr inbounds %struct.opj_tcd_resolution, %struct.opj_tcd_resolution* %131, i64 %133, i32 7, i64 0
  %139 = zext i32 %124 to i64
  %140 = getelementptr inbounds i8, i8* %126, i64 %139
  br label %141

141:                                              ; preds = %294, %137
  %142 = phi i32 [ %135, %137 ], [ %295, %294 ]
  %143 = phi %struct.opj_tcd_band* [ %138, %137 ], [ %297, %294 ]
  %144 = phi i8* [ %126, %137 ], [ %296, %294 ]
  %145 = phi i32 [ 0, %137 ], [ %298, %294 ]
  %146 = getelementptr inbounds %struct.opj_tcd_band, %struct.opj_tcd_band* %143, i64 0, i32 5
  %147 = load %struct.opj_tcd_precinct*, %struct.opj_tcd_precinct** %146, align 8
  %148 = load i32, i32* %62, align 4
  %149 = zext i32 %148 to i64
  %150 = getelementptr inbounds %struct.opj_tcd_band, %struct.opj_tcd_band* %143, i64 0, i32 2
  %151 = load i32, i32* %150, align 8
  %152 = getelementptr inbounds %struct.opj_tcd_band, %struct.opj_tcd_band* %143, i64 0, i32 0
  %153 = load i32, i32* %152, align 8
  %154 = icmp eq i32 %151, %153
  br i1 %154, label %294, label %155

155:                                              ; preds = %141
  %156 = getelementptr inbounds %struct.opj_tcd_band, %struct.opj_tcd_band* %143, i64 0, i32 3
  %157 = load i32, i32* %156, align 4
  %158 = getelementptr inbounds %struct.opj_tcd_band, %struct.opj_tcd_band* %143, i64 0, i32 1
  %159 = load i32, i32* %158, align 4
  %160 = icmp eq i32 %157, %159
  br i1 %160, label %294, label %161

161:                                              ; preds = %155
  %162 = getelementptr inbounds %struct.opj_tcd_precinct, %struct.opj_tcd_precinct* %147, i64 %149, i32 4
  %163 = load i32, i32* %162, align 8
  %164 = getelementptr inbounds %struct.opj_tcd_precinct, %struct.opj_tcd_precinct* %147, i64 %149, i32 5
  %165 = load i32, i32* %164, align 4
  %166 = mul i32 %165, %163
  %167 = icmp eq i32 %166, 0
  br i1 %167, label %294, label %168

168:                                              ; preds = %161
  %169 = getelementptr inbounds %struct.opj_tcd_precinct, %struct.opj_tcd_precinct* %147, i64 %149, i32 6
  %170 = bitcast %union.anon.0* %169 to %struct.opj_tcd_cblk_dec**
  %171 = load %struct.opj_tcd_cblk_dec*, %struct.opj_tcd_cblk_dec** %170, align 8
  br label %172

172:                                              ; preds = %287, %168
  %173 = phi %struct.opj_tcd_cblk_dec* [ %289, %287 ], [ %171, %168 ]
  %174 = phi i8* [ %288, %287 ], [ %144, %168 ]
  %175 = phi i32 [ %290, %287 ], [ 0, %168 ]
  %176 = getelementptr inbounds %struct.opj_tcd_cblk_dec, %struct.opj_tcd_cblk_dec* %173, i64 0, i32 8
  %177 = load i32, i32* %176, align 8
  %178 = icmp eq i32 %177, 0
  br i1 %178, label %287, label %179

179:                                              ; preds = %172
  %180 = getelementptr inbounds %struct.opj_tcd_cblk_dec, %struct.opj_tcd_cblk_dec* %173, i64 0, i32 9
  %181 = load i32, i32* %180, align 4
  %182 = icmp eq i32 %181, 0
  %183 = getelementptr inbounds %struct.opj_tcd_cblk_dec, %struct.opj_tcd_cblk_dec* %173, i64 0, i32 0
  %184 = load %struct.opj_tcd_seg*, %struct.opj_tcd_seg** %183, align 8
  br i1 %182, label %197, label %185

185:                                              ; preds = %179
  %186 = add i32 %181, -1
  %187 = zext i32 %186 to i64
  %188 = getelementptr inbounds %struct.opj_tcd_seg, %struct.opj_tcd_seg* %184, i64 %187
  %189 = getelementptr inbounds %struct.opj_tcd_seg, %struct.opj_tcd_seg* %184, i64 %187, i32 1
  %190 = load i32, i32* %189, align 4
  %191 = getelementptr inbounds %struct.opj_tcd_seg, %struct.opj_tcd_seg* %184, i64 %187, i32 3
  %192 = load i32, i32* %191, align 4
  %193 = icmp eq i32 %190, %192
  br i1 %193, label %194, label %200

194:                                              ; preds = %185
  %195 = getelementptr inbounds %struct.opj_tcd_seg, %struct.opj_tcd_seg* %188, i64 1
  %196 = add i32 %181, 1
  br label %197

197:                                              ; preds = %179, %194
  %198 = phi i32 [ %196, %194 ], [ 1, %179 ]
  %199 = phi %struct.opj_tcd_seg* [ %195, %194 ], [ %184, %179 ]
  store i32 %198, i32* %180, align 4
  br label %200

200:                                              ; preds = %197, %185
  %201 = phi %struct.opj_tcd_seg* [ %188, %185 ], [ %199, %197 ]
  %202 = ptrtoint i8* %174 to i64
  %203 = getelementptr inbounds %struct.opj_tcd_seg, %struct.opj_tcd_seg* %201, i64 0, i32 5
  %204 = load i32, i32* %203, align 4
  %205 = zext i32 %204 to i64
  %206 = xor i64 %202, -1
  %207 = icmp ult i64 %206, %205
  br i1 %207, label %219, label %208

208:                                              ; preds = %200
  %209 = getelementptr inbounds %struct.opj_tcd_cblk_dec, %struct.opj_tcd_cblk_dec* %173, i64 0, i32 12
  %210 = getelementptr inbounds %struct.opj_tcd_cblk_dec, %struct.opj_tcd_cblk_dec* %173, i64 0, i32 13
  %211 = getelementptr inbounds %struct.opj_tcd_cblk_dec, %struct.opj_tcd_cblk_dec* %173, i64 0, i32 1
  %212 = bitcast %struct.opj_tcd_seg_data_chunk** %211 to i8**
  %213 = getelementptr inbounds i8, i8* %174, i64 %205
  %214 = icmp ugt i8* %213, %140
  br i1 %214, label %219, label %225

215:                                              ; preds = %277
  %216 = getelementptr inbounds %struct.opj_tcd_seg, %struct.opj_tcd_seg* %227, i64 1
  %217 = getelementptr inbounds i8, i8* %261, i64 %282
  %218 = icmp ugt i8* %217, %140
  br i1 %218, label %219, label %225

219:                                              ; preds = %208, %200, %277, %215
  %220 = phi i32 [ %281, %215 ], [ %281, %277 ], [ %204, %200 ], [ %204, %208 ]
  %221 = load i32, i32* %62, align 4
  %222 = load i32, i32* %61, align 8
  %223 = load i32, i32* %60, align 4
  %224 = tail call i32 (%struct.opj_event_mgr*, i32, i8*, ...) @opj_event_msg(%struct.opj_event_mgr* %8, i32 1, i8* getelementptr inbounds ([85 x i8], [85 x i8]* @.str.12, i64 0, i64 0), i32 %220, i32 %124, i32 %175, i32 %221, i32 %145, i32 %222, i32 %223) #3
  br label %307

225:                                              ; preds = %208, %215
  %226 = phi i8* [ %261, %215 ], [ %174, %208 ]
  %227 = phi %struct.opj_tcd_seg* [ %216, %215 ], [ %201, %208 ]
  %228 = phi i32* [ %280, %215 ], [ %203, %208 ]
  %229 = load i32, i32* %209, align 8
  %230 = load i32, i32* %210, align 4
  %231 = icmp eq i32 %229, %230
  br i1 %231, label %234, label %232

232:                                              ; preds = %225
  %233 = load %struct.opj_tcd_seg_data_chunk*, %struct.opj_tcd_seg_data_chunk** %211, align 8
  br label %247

234:                                              ; preds = %225
  %235 = shl i32 %229, 1
  %236 = or i32 %235, 1
  %237 = load i8*, i8** %212, align 8
  %238 = zext i32 %236 to i64
  %239 = shl nuw nsw i64 %238, 4
  %240 = tail call i8* @opj_realloc(i8* %237, i64 %239) #3
  %241 = icmp eq i8* %240, null
  br i1 %241, label %245, label %242

242:                                              ; preds = %234
  store i8* %240, i8** %212, align 8
  store i32 %236, i32* %210, align 4
  %243 = bitcast i8* %240 to %struct.opj_tcd_seg_data_chunk*
  %244 = load i32, i32* %209, align 8
  br label %247

245:                                              ; preds = %234
  %246 = tail call i32 (%struct.opj_event_mgr*, i32, i8*, ...) @opj_event_msg(%struct.opj_event_mgr* %8, i32 1, i8* getelementptr inbounds ([48 x i8], [48 x i8]* @.str.13, i64 0, i64 0)) #3
  br label %307

247:                                              ; preds = %242, %232
  %248 = phi i32 [ %229, %232 ], [ %244, %242 ]
  %249 = phi %struct.opj_tcd_seg_data_chunk* [ %233, %232 ], [ %243, %242 ]
  %250 = zext i32 %248 to i64
  %251 = getelementptr inbounds %struct.opj_tcd_seg_data_chunk, %struct.opj_tcd_seg_data_chunk* %249, i64 %250, i32 0
  store i8* %226, i8** %251, align 8
  %252 = load i32, i32* %228, align 4
  %253 = load %struct.opj_tcd_seg_data_chunk*, %struct.opj_tcd_seg_data_chunk** %211, align 8
  %254 = load i32, i32* %209, align 8
  %255 = zext i32 %254 to i64
  %256 = getelementptr inbounds %struct.opj_tcd_seg_data_chunk, %struct.opj_tcd_seg_data_chunk* %253, i64 %255, i32 1
  store i32 %252, i32* %256, align 8
  %257 = load i32, i32* %209, align 8
  %258 = add i32 %257, 1
  store i32 %258, i32* %209, align 8
  %259 = load i32, i32* %228, align 4
  %260 = zext i32 %259 to i64
  %261 = getelementptr inbounds i8, i8* %226, i64 %260
  %262 = getelementptr inbounds %struct.opj_tcd_seg, %struct.opj_tcd_seg* %227, i64 0, i32 0
  %263 = load i32, i32* %262, align 4
  %264 = add i32 %263, %259
  store i32 %264, i32* %262, align 4
  %265 = getelementptr inbounds %struct.opj_tcd_seg, %struct.opj_tcd_seg* %227, i64 0, i32 4
  %266 = load i32, i32* %265, align 4
  %267 = getelementptr inbounds %struct.opj_tcd_seg, %struct.opj_tcd_seg* %227, i64 0, i32 1
  %268 = load i32, i32* %267, align 4
  %269 = add i32 %268, %266
  store i32 %269, i32* %267, align 4
  %270 = load i32, i32* %176, align 8
  %271 = sub i32 %270, %266
  store i32 %271, i32* %176, align 8
  %272 = load i32, i32* %267, align 4
  %273 = getelementptr inbounds %struct.opj_tcd_seg, %struct.opj_tcd_seg* %227, i64 0, i32 2
  store i32 %272, i32* %273, align 4
  %274 = load i32, i32* %176, align 8
  %275 = icmp eq i32 %274, 0
  %276 = load i32, i32* %180, align 4
  br i1 %275, label %285, label %277

277:                                              ; preds = %247
  %278 = add i32 %276, 1
  store i32 %278, i32* %180, align 4
  %279 = ptrtoint i8* %261 to i64
  %280 = getelementptr inbounds %struct.opj_tcd_seg, %struct.opj_tcd_seg* %227, i64 1, i32 5
  %281 = load i32, i32* %280, align 4
  %282 = zext i32 %281 to i64
  %283 = xor i64 %279, -1
  %284 = icmp ult i64 %283, %282
  br i1 %284, label %219, label %215

285:                                              ; preds = %247
  %286 = getelementptr inbounds %struct.opj_tcd_cblk_dec, %struct.opj_tcd_cblk_dec* %173, i64 0, i32 10
  store i32 %276, i32* %286, align 8
  br label %287

287:                                              ; preds = %285, %172
  %288 = phi i8* [ %261, %285 ], [ %174, %172 ]
  %289 = getelementptr inbounds %struct.opj_tcd_cblk_dec, %struct.opj_tcd_cblk_dec* %173, i64 1
  %290 = add nuw i32 %175, 1
  %291 = icmp eq i32 %290, %166
  br i1 %291, label %292, label %172

292:                                              ; preds = %287
  %293 = load i32, i32* %134, align 8
  br label %294

294:                                              ; preds = %292, %161, %155, %141
  %295 = phi i32 [ %142, %155 ], [ %142, %141 ], [ %142, %161 ], [ %293, %292 ]
  %296 = phi i8* [ %144, %155 ], [ %144, %141 ], [ %144, %161 ], [ %288, %292 ]
  %297 = getelementptr inbounds %struct.opj_tcd_band, %struct.opj_tcd_band* %143, i64 1
  %298 = add nuw i32 %145, 1
  %299 = icmp ult i32 %298, %295
  br i1 %299, label %141, label %300

300:                                              ; preds = %294, %123
  %301 = phi i8* [ %126, %123 ], [ %296, %294 ]
  %302 = ptrtoint i8* %301 to i64
  %303 = ptrtoint i8* %126 to i64
  %304 = sub i64 %302, %303
  %305 = trunc i64 %304 to i32
  store i32 %305, i32* %11, align 4
  %306 = add i32 %120, %305
  br label %308

307:                                              ; preds = %113, %219, %245
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %34) #3
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %33) #3
  tail call void @opj_pi_destroy(%struct.opj_pi_iterator* nonnull %25, i32 %24) #3
  tail call void @opj_free(i8* nonnull %49) #3
  br label %490

308:                                              ; preds = %300, %119
  %309 = phi i32 [ %306, %300 ], [ %120, %119 ]
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %34) #3
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %33) #3
  %310 = load %struct.opj_image_comp*, %struct.opj_image_comp** %35, align 8
  %311 = load i32, i32* %60, align 4
  %312 = zext i32 %311 to i64
  %313 = load i32, i32* %61, align 8
  %314 = getelementptr inbounds %struct.opj_image_comp, %struct.opj_image_comp* %310, i64 %312, i32 9
  %315 = load i32, i32* %314, align 4
  %316 = icmp ugt i32 %313, %315
  %317 = select i1 %316, i32 %313, i32 %315
  store i32 %317, i32* %314, align 4
  br label %455

318:                                              ; preds = %85, %78, %70, %64
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %31) #3
  store i32 -1431655766, i32* %12, align 4
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %32) #3
  store i32 0, i32* %13, align 4
  %319 = call fastcc i32 @opj_t2_read_packet_header(%struct.opj_t2* %1, %struct.opj_tcd_tile* %3, %struct.opj_tcp* %21, %struct.opj_pi_iterator* %39, i32* nonnull %12, i8* %66, i32* nonnull %13, i32 %65, %struct.opj_event_mgr* %8) #3
  %320 = icmp eq i32 %319, 0
  br i1 %320, label %454, label %321

321:                                              ; preds = %318
  %322 = load i32, i32* %13, align 4
  %323 = load i32, i32* %12, align 4
  %324 = icmp eq i32 %323, 0
  br i1 %324, label %452, label %325

325:                                              ; preds = %321
  %326 = sub i32 %65, %322
  %327 = load %struct.opj_tcd_tilecomp*, %struct.opj_tcd_tilecomp** %30, align 8
  %328 = load i32, i32* %60, align 4
  %329 = zext i32 %328 to i64
  %330 = getelementptr inbounds %struct.opj_tcd_tilecomp, %struct.opj_tcd_tilecomp* %327, i64 %329, i32 7
  %331 = load %struct.opj_tcd_resolution*, %struct.opj_tcd_resolution** %330, align 8
  %332 = load i32, i32* %61, align 8
  %333 = zext i32 %332 to i64
  store i32 0, i32* %13, align 4
  %334 = getelementptr inbounds %struct.opj_tcd_resolution, %struct.opj_tcd_resolution* %331, i64 %333, i32 6
  %335 = load i32, i32* %334, align 8
  %336 = icmp eq i32 %335, 0
  br i1 %336, label %449, label %337

337:                                              ; preds = %325
  %338 = getelementptr inbounds %struct.opj_tcd_resolution, %struct.opj_tcd_resolution* %331, i64 %333, i32 7, i64 0
  br label %339

339:                                              ; preds = %434, %337
  %340 = phi i32 [ 0, %337 ], [ %435, %434 ]
  %341 = phi i32 [ %335, %337 ], [ %436, %434 ]
  %342 = phi %struct.opj_tcd_band* [ %338, %337 ], [ %437, %434 ]
  %343 = phi i32 [ 0, %337 ], [ %438, %434 ]
  %344 = getelementptr inbounds %struct.opj_tcd_band, %struct.opj_tcd_band* %342, i64 0, i32 5
  %345 = load %struct.opj_tcd_precinct*, %struct.opj_tcd_precinct** %344, align 8
  %346 = load i32, i32* %62, align 4
  %347 = zext i32 %346 to i64
  %348 = getelementptr inbounds %struct.opj_tcd_band, %struct.opj_tcd_band* %342, i64 0, i32 2
  %349 = load i32, i32* %348, align 8
  %350 = getelementptr inbounds %struct.opj_tcd_band, %struct.opj_tcd_band* %342, i64 0, i32 0
  %351 = load i32, i32* %350, align 8
  %352 = icmp eq i32 %349, %351
  br i1 %352, label %434, label %353

353:                                              ; preds = %339
  %354 = getelementptr inbounds %struct.opj_tcd_band, %struct.opj_tcd_band* %342, i64 0, i32 3
  %355 = load i32, i32* %354, align 4
  %356 = getelementptr inbounds %struct.opj_tcd_band, %struct.opj_tcd_band* %342, i64 0, i32 1
  %357 = load i32, i32* %356, align 4
  %358 = icmp eq i32 %355, %357
  br i1 %358, label %434, label %359

359:                                              ; preds = %353
  %360 = getelementptr inbounds %struct.opj_tcd_precinct, %struct.opj_tcd_precinct* %345, i64 %347, i32 4
  %361 = load i32, i32* %360, align 8
  %362 = getelementptr inbounds %struct.opj_tcd_precinct, %struct.opj_tcd_precinct* %345, i64 %347, i32 5
  %363 = load i32, i32* %362, align 4
  %364 = mul i32 %363, %361
  %365 = icmp eq i32 %364, 0
  br i1 %365, label %434, label %366

366:                                              ; preds = %359
  %367 = getelementptr inbounds %struct.opj_tcd_precinct, %struct.opj_tcd_precinct* %345, i64 %347, i32 6
  %368 = bitcast %union.anon.0* %367 to %struct.opj_tcd_cblk_dec**
  %369 = load %struct.opj_tcd_cblk_dec*, %struct.opj_tcd_cblk_dec** %368, align 8
  br label %370

370:                                              ; preds = %427, %366
  %371 = phi i32 [ %428, %427 ], [ %340, %366 ]
  %372 = phi %struct.opj_tcd_cblk_dec* [ %429, %427 ], [ %369, %366 ]
  %373 = phi i32 [ %430, %427 ], [ 0, %366 ]
  %374 = getelementptr inbounds %struct.opj_tcd_cblk_dec, %struct.opj_tcd_cblk_dec* %372, i64 0, i32 8
  %375 = load i32, i32* %374, align 8
  %376 = icmp eq i32 %375, 0
  br i1 %376, label %427, label %377

377:                                              ; preds = %370
  %378 = getelementptr inbounds %struct.opj_tcd_cblk_dec, %struct.opj_tcd_cblk_dec* %372, i64 0, i32 9
  %379 = load i32, i32* %378, align 4
  %380 = icmp eq i32 %379, 0
  %381 = getelementptr inbounds %struct.opj_tcd_cblk_dec, %struct.opj_tcd_cblk_dec* %372, i64 0, i32 0
  %382 = load %struct.opj_tcd_seg*, %struct.opj_tcd_seg** %381, align 8
  br i1 %380, label %395, label %383

383:                                              ; preds = %377
  %384 = add i32 %379, -1
  %385 = zext i32 %384 to i64
  %386 = getelementptr inbounds %struct.opj_tcd_seg, %struct.opj_tcd_seg* %382, i64 %385
  %387 = getelementptr inbounds %struct.opj_tcd_seg, %struct.opj_tcd_seg* %382, i64 %385, i32 1
  %388 = load i32, i32* %387, align 4
  %389 = getelementptr inbounds %struct.opj_tcd_seg, %struct.opj_tcd_seg* %382, i64 %385, i32 3
  %390 = load i32, i32* %389, align 4
  %391 = icmp eq i32 %388, %390
  br i1 %391, label %392, label %398

392:                                              ; preds = %383
  %393 = getelementptr inbounds %struct.opj_tcd_seg, %struct.opj_tcd_seg* %386, i64 1
  %394 = add i32 %379, 1
  br label %395

395:                                              ; preds = %377, %392
  %396 = phi i32 [ %394, %392 ], [ 1, %377 ]
  %397 = phi %struct.opj_tcd_seg* [ %393, %392 ], [ %382, %377 ]
  store i32 %396, i32* %378, align 4
  br label %398

398:                                              ; preds = %395, %383
  %399 = phi %struct.opj_tcd_seg* [ %386, %383 ], [ %397, %395 ]
  %400 = getelementptr inbounds %struct.opj_tcd_seg, %struct.opj_tcd_seg* %399, i64 0, i32 5
  %401 = load i32, i32* %400, align 4
  %402 = add i32 %401, %371
  %403 = icmp ult i32 %402, %371
  %404 = icmp ugt i32 %402, %326
  %405 = or i1 %403, %404
  br i1 %405, label %440, label %406

406:                                              ; preds = %398, %417
  %407 = phi i32 [ %423, %417 ], [ %402, %398 ]
  %408 = phi %struct.opj_tcd_seg* [ %418, %417 ], [ %399, %398 ]
  %409 = getelementptr inbounds %struct.opj_tcd_seg, %struct.opj_tcd_seg* %408, i64 0, i32 4
  %410 = load i32, i32* %409, align 4
  %411 = getelementptr inbounds %struct.opj_tcd_seg, %struct.opj_tcd_seg* %408, i64 0, i32 1
  %412 = load i32, i32* %411, align 4
  %413 = add i32 %412, %410
  store i32 %413, i32* %411, align 4
  %414 = load i32, i32* %374, align 8
  %415 = sub i32 %414, %410
  store i32 %415, i32* %374, align 8
  %416 = icmp eq i32 %415, 0
  br i1 %416, label %427, label %417

417:                                              ; preds = %406
  %418 = getelementptr inbounds %struct.opj_tcd_seg, %struct.opj_tcd_seg* %408, i64 1
  %419 = load i32, i32* %378, align 4
  %420 = add i32 %419, 1
  store i32 %420, i32* %378, align 4
  %421 = getelementptr inbounds %struct.opj_tcd_seg, %struct.opj_tcd_seg* %408, i64 1, i32 5
  %422 = load i32, i32* %421, align 4
  %423 = add i32 %422, %407
  %424 = icmp ult i32 %423, %407
  %425 = icmp ugt i32 %423, %326
  %426 = or i1 %424, %425
  br i1 %426, label %441, label %406

427:                                              ; preds = %406, %370
  %428 = phi i32 [ %371, %370 ], [ %407, %406 ]
  %429 = getelementptr inbounds %struct.opj_tcd_cblk_dec, %struct.opj_tcd_cblk_dec* %372, i64 1
  %430 = add nuw i32 %373, 1
  %431 = icmp eq i32 %430, %364
  br i1 %431, label %432, label %370

432:                                              ; preds = %427
  %433 = load i32, i32* %334, align 8
  br label %434

434:                                              ; preds = %432, %359, %353, %339
  %435 = phi i32 [ %428, %432 ], [ %340, %359 ], [ %340, %339 ], [ %340, %353 ]
  %436 = phi i32 [ %433, %432 ], [ %341, %359 ], [ %341, %339 ], [ %341, %353 ]
  %437 = getelementptr inbounds %struct.opj_tcd_band, %struct.opj_tcd_band* %342, i64 1
  %438 = add nuw i32 %343, 1
  %439 = icmp ult i32 %438, %436
  br i1 %439, label %339, label %448

440:                                              ; preds = %398
  store i32 %340, i32* %13, align 4
  br label %441

441:                                              ; preds = %417, %440
  %442 = phi i32 [ %371, %440 ], [ %407, %417 ]
  %443 = phi i32 [ %401, %440 ], [ %422, %417 ]
  store i32 %442, i32* %13, align 4
  %444 = load i32, i32* %62, align 4
  %445 = load i32, i32* %61, align 8
  %446 = load i32, i32* %60, align 4
  %447 = tail call i32 (%struct.opj_event_mgr*, i32, i8*, ...) @opj_event_msg(%struct.opj_event_mgr* %8, i32 1, i8* getelementptr inbounds ([85 x i8], [85 x i8]* @.str.16, i64 0, i64 0), i32 %443, i32 %326, i32 %373, i32 %444, i32 %343, i32 %445, i32 %446) #3
  br label %454

448:                                              ; preds = %434
  store i32 %435, i32* %13, align 4
  br label %449

449:                                              ; preds = %448, %325
  %450 = phi i32 [ %435, %448 ], [ 0, %325 ]
  %451 = add i32 %450, %322
  br label %452

452:                                              ; preds = %321, %449
  %453 = phi i32 [ %451, %449 ], [ %322, %321 ]
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %32) #3
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %31) #3
  br label %455

454:                                              ; preds = %318, %441
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %32) #3
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %31) #3
  tail call void @opj_pi_destroy(%struct.opj_pi_iterator* nonnull %25, i32 %24) #3
  tail call void @opj_free(i8* nonnull %49) #3
  br label %490

455:                                              ; preds = %452, %308
  %456 = phi i32 [ %309, %308 ], [ %453, %452 ]
  %457 = load i32, i32* %60, align 4
  %458 = zext i32 %457 to i64
  %459 = getelementptr inbounds i32, i32* %50, i64 %458
  %460 = load i32, i32* %459, align 4
  %461 = icmp eq i32 %460, 0
  br i1 %461, label %472, label %462

462:                                              ; preds = %455
  %463 = load %struct.opj_image_comp*, %struct.opj_image_comp** %35, align 8
  %464 = getelementptr inbounds %struct.opj_image_comp, %struct.opj_image_comp* %463, i64 %458, i32 9
  %465 = load i32, i32* %464, align 4
  %466 = icmp eq i32 %465, 0
  br i1 %466, label %467, label %472

467:                                              ; preds = %462
  %468 = load %struct.opj_tcd_tilecomp*, %struct.opj_tcd_tilecomp** %30, align 8
  %469 = getelementptr inbounds %struct.opj_tcd_tilecomp, %struct.opj_tcd_tilecomp* %468, i64 %458, i32 6
  %470 = load i32, i32* %469, align 8
  %471 = add i32 %470, -1
  store i32 %471, i32* %464, align 4
  br label %472

472:                                              ; preds = %467, %462, %455
  %473 = zext i32 %456 to i64
  %474 = getelementptr inbounds i8, i8* %66, i64 %473
  %475 = sub i32 %65, %456
  %476 = tail call i32 @opj_pi_next(%struct.opj_pi_iterator* %39) #3
  %477 = icmp eq i32 %476, 0
  br i1 %477, label %478, label %64

478:                                              ; preds = %472, %53
  %479 = phi i8* [ %38, %53 ], [ %474, %472 ]
  %480 = phi i32 [ %37, %53 ], [ %475, %472 ]
  %481 = getelementptr inbounds %struct.opj_pi_iterator, %struct.opj_pi_iterator* %39, i64 1
  tail call void @opj_free(i8* nonnull %49) #3
  %482 = add i32 %40, 1
  %483 = load i32, i32* %22, align 4
  %484 = icmp ugt i32 %482, %483
  br i1 %484, label %485, label %36

485:                                              ; preds = %478
  tail call void @opj_pi_destroy(%struct.opj_pi_iterator* nonnull %25, i32 %24) #3
  %486 = ptrtoint i8* %479 to i64
  %487 = ptrtoint i8* %4 to i64
  %488 = sub i64 %486, %487
  %489 = trunc i64 %488 to i32
  store i32 %489, i32* %5, align 4
  br label %490

490:                                              ; preds = %307, %454, %52, %44, %9, %485
  %491 = phi i32 [ 1, %485 ], [ 0, %9 ], [ 0, %44 ], [ 0, %52 ], [ 0, %454 ], [ 0, %307 ]
  ret i32 %491
}

declare %struct.opj_pi_iterator* @opj_pi_create_decode(%struct.opj_image*, %struct.opj_cp*, i32, %struct.opj_event_mgr*) local_unnamed_addr #2

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

declare i32 @opj_tcd_is_subband_area_of_interest(%struct.opj_tcd*, i32, i32, i32, i32, i32, i32, i32) local_unnamed_addr #2

declare void @opj_free(i8*) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden %struct.opj_t2* @opj_t2_create(%struct.opj_image*, %struct.opj_cp*) local_unnamed_addr #0 {
  %3 = tail call i8* @opj_calloc(i64 1, i64 16) #3
  %4 = icmp eq i8* %3, null
  br i1 %4, label %10, label %5

5:                                                ; preds = %2
  %6 = bitcast i8* %3 to %struct.opj_t2*
  %7 = bitcast i8* %3 to %struct.opj_image**
  store %struct.opj_image* %0, %struct.opj_image** %7, align 8
  %8 = getelementptr inbounds i8, i8* %3, i64 8
  %9 = bitcast i8* %8 to %struct.opj_cp**
  store %struct.opj_cp* %1, %struct.opj_cp** %9, align 8
  br label %10

10:                                               ; preds = %2, %5
  %11 = phi %struct.opj_t2* [ %6, %5 ], [ null, %2 ]
  ret %struct.opj_t2* %11
}

declare i8* @opj_calloc(i64, i64) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden void @opj_t2_destroy(%struct.opj_t2*) local_unnamed_addr #0 {
  %2 = icmp eq %struct.opj_t2* %0, null
  br i1 %2, label %5, label %3

3:                                                ; preds = %1
  %4 = bitcast %struct.opj_t2* %0 to i8*
  tail call void @opj_free(i8* nonnull %4) #3
  br label %5

5:                                                ; preds = %1, %3
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal fastcc i32 @opj_t2_read_packet_header(%struct.opj_t2* nocapture readonly, %struct.opj_tcd_tile* nocapture readonly, %struct.opj_tcp* nocapture, %struct.opj_pi_iterator* nocapture readonly, i32* nocapture, i8*, i32* nocapture, i32, %struct.opj_event_mgr*) unnamed_addr #0 {
  %10 = alloca i32, align 4
  %11 = alloca i64, align 8
  %12 = bitcast i64* %11 to i8**
  %13 = bitcast i32* %10 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %13)
  store i32 -1431655766, i32* %10, align 4
  %14 = bitcast i64* %11 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %14)
  %15 = ptrtoint i8* %5 to i64
  store i64 %15, i64* %11, align 8
  %16 = getelementptr inbounds %struct.opj_t2, %struct.opj_t2* %0, i64 0, i32 1
  %17 = load %struct.opj_cp*, %struct.opj_cp** %16, align 8
  %18 = getelementptr inbounds %struct.opj_tcd_tile, %struct.opj_tcd_tile* %1, i64 0, i32 5
  %19 = load %struct.opj_tcd_tilecomp*, %struct.opj_tcd_tilecomp** %18, align 8
  %20 = getelementptr inbounds %struct.opj_pi_iterator, %struct.opj_pi_iterator* %3, i64 0, i32 7
  %21 = load i32, i32* %20, align 4
  %22 = zext i32 %21 to i64
  %23 = getelementptr inbounds %struct.opj_tcd_tilecomp, %struct.opj_tcd_tilecomp* %19, i64 %22, i32 7
  %24 = load %struct.opj_tcd_resolution*, %struct.opj_tcd_resolution** %23, align 8
  %25 = getelementptr inbounds %struct.opj_pi_iterator, %struct.opj_pi_iterator* %3, i64 0, i32 8
  %26 = load i32, i32* %25, align 8
  %27 = zext i32 %26 to i64
  %28 = getelementptr inbounds %struct.opj_pi_iterator, %struct.opj_pi_iterator* %3, i64 0, i32 10
  %29 = load i32, i32* %28, align 8
  %30 = icmp eq i32 %29, 0
  br i1 %30, label %31, label %112

31:                                               ; preds = %9
  %32 = getelementptr inbounds %struct.opj_tcd_resolution, %struct.opj_tcd_resolution* %24, i64 %27, i32 6
  %33 = load i32, i32* %32, align 8
  %34 = icmp eq i32 %33, 0
  br i1 %34, label %112, label %35

35:                                               ; preds = %31
  %36 = getelementptr inbounds %struct.opj_tcd_resolution, %struct.opj_tcd_resolution* %24, i64 %27, i32 7, i64 0
  %37 = getelementptr inbounds %struct.opj_pi_iterator, %struct.opj_pi_iterator* %3, i64 0, i32 9
  br label %38

38:                                               ; preds = %35, %107
  %39 = phi %struct.opj_tcd_band* [ %36, %35 ], [ %108, %107 ]
  %40 = phi i32 [ 0, %35 ], [ %109, %107 ]
  %41 = tail call i32 @opj_tcd_is_band_empty(%struct.opj_tcd_band* %39) #3
  %42 = icmp eq i32 %41, 0
  br i1 %42, label %43, label %107

43:                                               ; preds = %38
  %44 = getelementptr inbounds %struct.opj_tcd_band, %struct.opj_tcd_band* %39, i64 0, i32 5
  %45 = load %struct.opj_tcd_precinct*, %struct.opj_tcd_precinct** %44, align 8
  %46 = load i32, i32* %37, align 4
  %47 = zext i32 %46 to i64
  %48 = getelementptr inbounds %struct.opj_tcd_band, %struct.opj_tcd_band* %39, i64 0, i32 6
  %49 = load i32, i32* %48, align 8
  %50 = udiv i32 %49, 56
  %51 = icmp ult i32 %46, %50
  br i1 %51, label %54, label %52

52:                                               ; preds = %43
  %53 = tail call i32 (%struct.opj_event_mgr*, i32, i8*, ...) @opj_event_msg(%struct.opj_event_mgr* %8, i32 1, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.1, i64 0, i64 0)) #3
  br label %552

54:                                               ; preds = %43
  %55 = getelementptr inbounds %struct.opj_tcd_precinct, %struct.opj_tcd_precinct* %45, i64 %47, i32 8
  %56 = load %struct.opj_tgt_tree*, %struct.opj_tgt_tree** %55, align 8
  tail call void @opj_tgt_reset(%struct.opj_tgt_tree* %56) #3
  %57 = getelementptr inbounds %struct.opj_tcd_precinct, %struct.opj_tcd_precinct* %45, i64 %47, i32 9
  %58 = load %struct.opj_tgt_tree*, %struct.opj_tgt_tree** %57, align 8
  tail call void @opj_tgt_reset(%struct.opj_tgt_tree* %58) #3
  %59 = getelementptr inbounds %struct.opj_tcd_precinct, %struct.opj_tcd_precinct* %45, i64 %47, i32 4
  %60 = load i32, i32* %59, align 8
  %61 = getelementptr inbounds %struct.opj_tcd_precinct, %struct.opj_tcd_precinct* %45, i64 %47, i32 5
  %62 = load i32, i32* %61, align 4
  %63 = mul i32 %62, %60
  %64 = icmp eq i32 %63, 0
  br i1 %64, label %107, label %65

65:                                               ; preds = %54
  %66 = getelementptr inbounds %struct.opj_tcd_precinct, %struct.opj_tcd_precinct* %45, i64 %47, i32 6
  %67 = bitcast %union.anon.0* %66 to %struct.opj_tcd_cblk_dec**
  %68 = load %struct.opj_tcd_cblk_dec*, %struct.opj_tcd_cblk_dec** %67, align 8
  %69 = add i32 %63, -1
  %70 = and i32 %63, 7
  %71 = icmp ult i32 %69, 7
  br i1 %71, label %96, label %72

72:                                               ; preds = %65
  %73 = sub i32 %63, %70
  br label %74

74:                                               ; preds = %74, %72
  %75 = phi %struct.opj_tcd_cblk_dec* [ %68, %72 ], [ %93, %74 ]
  %76 = phi i32 [ %73, %72 ], [ %94, %74 ]
  %77 = getelementptr inbounds %struct.opj_tcd_cblk_dec, %struct.opj_tcd_cblk_dec* %75, i64 0, i32 9
  store i32 0, i32* %77, align 4
  %78 = getelementptr inbounds %struct.opj_tcd_cblk_dec, %struct.opj_tcd_cblk_dec* %75, i64 0, i32 10
  store i32 0, i32* %78, align 8
  %79 = getelementptr inbounds %struct.opj_tcd_cblk_dec, %struct.opj_tcd_cblk_dec* %75, i64 1, i32 9
  store i32 0, i32* %79, align 4
  %80 = getelementptr inbounds %struct.opj_tcd_cblk_dec, %struct.opj_tcd_cblk_dec* %75, i64 1, i32 10
  store i32 0, i32* %80, align 8
  %81 = getelementptr inbounds %struct.opj_tcd_cblk_dec, %struct.opj_tcd_cblk_dec* %75, i64 2, i32 9
  store i32 0, i32* %81, align 4
  %82 = getelementptr inbounds %struct.opj_tcd_cblk_dec, %struct.opj_tcd_cblk_dec* %75, i64 2, i32 10
  store i32 0, i32* %82, align 8
  %83 = getelementptr inbounds %struct.opj_tcd_cblk_dec, %struct.opj_tcd_cblk_dec* %75, i64 3, i32 9
  store i32 0, i32* %83, align 4
  %84 = getelementptr inbounds %struct.opj_tcd_cblk_dec, %struct.opj_tcd_cblk_dec* %75, i64 3, i32 10
  store i32 0, i32* %84, align 8
  %85 = getelementptr inbounds %struct.opj_tcd_cblk_dec, %struct.opj_tcd_cblk_dec* %75, i64 4, i32 9
  store i32 0, i32* %85, align 4
  %86 = getelementptr inbounds %struct.opj_tcd_cblk_dec, %struct.opj_tcd_cblk_dec* %75, i64 4, i32 10
  store i32 0, i32* %86, align 8
  %87 = getelementptr inbounds %struct.opj_tcd_cblk_dec, %struct.opj_tcd_cblk_dec* %75, i64 5, i32 9
  store i32 0, i32* %87, align 4
  %88 = getelementptr inbounds %struct.opj_tcd_cblk_dec, %struct.opj_tcd_cblk_dec* %75, i64 5, i32 10
  store i32 0, i32* %88, align 8
  %89 = getelementptr inbounds %struct.opj_tcd_cblk_dec, %struct.opj_tcd_cblk_dec* %75, i64 6, i32 9
  store i32 0, i32* %89, align 4
  %90 = getelementptr inbounds %struct.opj_tcd_cblk_dec, %struct.opj_tcd_cblk_dec* %75, i64 6, i32 10
  store i32 0, i32* %90, align 8
  %91 = getelementptr inbounds %struct.opj_tcd_cblk_dec, %struct.opj_tcd_cblk_dec* %75, i64 7, i32 9
  store i32 0, i32* %91, align 4
  %92 = getelementptr inbounds %struct.opj_tcd_cblk_dec, %struct.opj_tcd_cblk_dec* %75, i64 7, i32 10
  store i32 0, i32* %92, align 8
  %93 = getelementptr inbounds %struct.opj_tcd_cblk_dec, %struct.opj_tcd_cblk_dec* %75, i64 8
  %94 = add i32 %76, -8
  %95 = icmp eq i32 %94, 0
  br i1 %95, label %96, label %74

96:                                               ; preds = %74, %65
  %97 = phi %struct.opj_tcd_cblk_dec* [ %68, %65 ], [ %93, %74 ]
  %98 = icmp eq i32 %70, 0
  br i1 %98, label %107, label %99

99:                                               ; preds = %96, %99
  %100 = phi %struct.opj_tcd_cblk_dec* [ %104, %99 ], [ %97, %96 ]
  %101 = phi i32 [ %105, %99 ], [ %70, %96 ]
  %102 = getelementptr inbounds %struct.opj_tcd_cblk_dec, %struct.opj_tcd_cblk_dec* %100, i64 0, i32 9
  store i32 0, i32* %102, align 4
  %103 = getelementptr inbounds %struct.opj_tcd_cblk_dec, %struct.opj_tcd_cblk_dec* %100, i64 0, i32 10
  store i32 0, i32* %103, align 8
  %104 = getelementptr inbounds %struct.opj_tcd_cblk_dec, %struct.opj_tcd_cblk_dec* %100, i64 1
  %105 = add i32 %101, -1
  %106 = icmp eq i32 %105, 0
  br i1 %106, label %107, label %99, !llvm.loop !2

107:                                              ; preds = %96, %99, %54, %38
  %108 = getelementptr inbounds %struct.opj_tcd_band, %struct.opj_tcd_band* %39, i64 1
  %109 = add nuw i32 %40, 1
  %110 = load i32, i32* %32, align 8
  %111 = icmp ult i32 %109, %110
  br i1 %111, label %38, label %112

112:                                              ; preds = %107, %31, %9
  %113 = getelementptr inbounds %struct.opj_tcp, %struct.opj_tcp* %2, i64 0, i32 0
  %114 = load i32, i32* %113, align 8
  %115 = and i32 %114, 2
  %116 = icmp eq i32 %115, 0
  br i1 %116, label %133, label %117

117:                                              ; preds = %112
  %118 = icmp ult i32 %7, 6
  br i1 %118, label %119, label %121

119:                                              ; preds = %117
  %120 = tail call i32 (%struct.opj_event_mgr*, i32, i8*, ...) @opj_event_msg(%struct.opj_event_mgr* %8, i32 2, i8* getelementptr inbounds ([42 x i8], [42 x i8]* @.str.2, i64 0, i64 0)) #3
  br label %133

121:                                              ; preds = %117
  %122 = load i8, i8* %5, align 1
  %123 = icmp eq i8 %122, -1
  br i1 %123, label %124, label %128

124:                                              ; preds = %121
  %125 = getelementptr inbounds i8, i8* %5, i64 1
  %126 = load i8, i8* %125, align 1
  %127 = icmp eq i8 %126, -111
  br i1 %127, label %130, label %128

128:                                              ; preds = %124, %121
  %129 = tail call i32 (%struct.opj_event_mgr*, i32, i8*, ...) @opj_event_msg(%struct.opj_event_mgr* %8, i32 2, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.3, i64 0, i64 0)) #3
  br label %133

130:                                              ; preds = %124
  %131 = getelementptr inbounds i8, i8* %5, i64 6
  %132 = ptrtoint i8* %131 to i64
  store i64 %132, i64* %11, align 8
  br label %133

133:                                              ; preds = %112, %119, %130, %128
  %134 = phi i64 [ %15, %112 ], [ %15, %119 ], [ %132, %130 ], [ %15, %128 ]
  %135 = tail call %struct.opj_bio* @opj_bio_create() #3
  %136 = icmp eq %struct.opj_bio* %135, null
  br i1 %136, label %552, label %137

137:                                              ; preds = %133
  %138 = getelementptr inbounds %struct.opj_cp, %struct.opj_cp* %17, i64 0, i32 21
  %139 = load i8, i8* %138, align 8
  %140 = and i8 %139, 1
  %141 = icmp eq i8 %140, 0
  br i1 %141, label %146, label %142

142:                                              ; preds = %137
  %143 = getelementptr inbounds %struct.opj_cp, %struct.opj_cp* %17, i64 0, i32 10
  %144 = load i8*, i8** %143, align 8
  %145 = getelementptr inbounds %struct.opj_cp, %struct.opj_cp* %17, i64 0, i32 11
  br label %162

146:                                              ; preds = %137
  %147 = getelementptr inbounds %struct.opj_tcp, %struct.opj_tcp* %2, i64 0, i32 29
  %148 = load i8, i8* %147, align 8
  %149 = and i8 %148, 2
  %150 = icmp eq i8 %149, 0
  br i1 %150, label %155, label %151

151:                                              ; preds = %146
  %152 = getelementptr inbounds %struct.opj_tcp, %struct.opj_tcp* %2, i64 0, i32 10
  %153 = load i8*, i8** %152, align 8
  %154 = getelementptr inbounds %struct.opj_tcp, %struct.opj_tcp* %2, i64 0, i32 13
  br label %162

155:                                              ; preds = %146
  %156 = inttoptr i64 %134 to i8*
  %157 = zext i32 %7 to i64
  %158 = getelementptr inbounds i8, i8* %5, i64 %157
  %159 = ptrtoint i8* %158 to i64
  %160 = sub i64 %159, %134
  %161 = trunc i64 %160 to i32
  store i32 %161, i32* %10, align 4
  br label %162

162:                                              ; preds = %151, %155, %142
  %163 = phi i32* [ %145, %142 ], [ %154, %151 ], [ %10, %155 ]
  %164 = phi i8* [ %144, %142 ], [ %153, %151 ], [ %156, %155 ]
  %165 = phi i8** [ %143, %142 ], [ %152, %151 ], [ %12, %155 ]
  %166 = load i32, i32* %163, align 4
  tail call void @opj_bio_init_dec(%struct.opj_bio* nonnull %135, i8* %164, i32 %166) #3
  %167 = tail call i32 @opj_bio_read(%struct.opj_bio* nonnull %135, i32 1) #3
  %168 = icmp eq i32 %167, 0
  br i1 %168, label %169, label %215

169:                                              ; preds = %162
  %170 = tail call i32 @opj_bio_inalign(%struct.opj_bio* nonnull %135) #3
  %171 = tail call i64 @opj_bio_numbytes(%struct.opj_bio* nonnull %135) #3
  %172 = getelementptr inbounds i8, i8* %164, i64 %171
  tail call void @opj_bio_destroy(%struct.opj_bio* nonnull %135) #3
  %173 = load i32, i32* %113, align 8
  %174 = and i32 %173, 4
  %175 = icmp eq i32 %174, 0
  br i1 %175, label %176, label %178

176:                                              ; preds = %169
  %177 = bitcast i8** %165 to i64*
  br label %200

178:                                              ; preds = %169
  %179 = load i32, i32* %163, align 4
  %180 = bitcast i8** %165 to i64*
  %181 = load i64, i64* %180, align 8
  %182 = ptrtoint i8* %172 to i64
  %183 = sub i64 %182, %181
  %184 = trunc i64 %183 to i32
  %185 = sub i32 %179, %184
  %186 = icmp ult i32 %185, 2
  br i1 %186, label %187, label %189

187:                                              ; preds = %178
  %188 = tail call i32 (%struct.opj_event_mgr*, i32, i8*, ...) @opj_event_msg(%struct.opj_event_mgr* %8, i32 2, i8* getelementptr inbounds ([42 x i8], [42 x i8]* @.str.5, i64 0, i64 0)) #3
  br label %200

189:                                              ; preds = %178
  %190 = load i8, i8* %172, align 1
  %191 = icmp eq i8 %190, -1
  br i1 %191, label %192, label %196

192:                                              ; preds = %189
  %193 = getelementptr inbounds i8, i8* %172, i64 1
  %194 = load i8, i8* %193, align 1
  %195 = icmp eq i8 %194, -110
  br i1 %195, label %198, label %196

196:                                              ; preds = %192, %189
  %197 = tail call i32 (%struct.opj_event_mgr*, i32, i8*, ...) @opj_event_msg(%struct.opj_event_mgr* %8, i32 2, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.6, i64 0, i64 0)) #3
  br label %200

198:                                              ; preds = %192
  %199 = getelementptr inbounds i8, i8* %172, i64 2
  br label %200

200:                                              ; preds = %176, %187, %198, %196
  %201 = phi i64* [ %177, %176 ], [ %180, %187 ], [ %180, %198 ], [ %180, %196 ]
  %202 = phi i8* [ %172, %176 ], [ %172, %187 ], [ %199, %198 ], [ %172, %196 ]
  %203 = load i64, i64* %201, align 8
  %204 = ptrtoint i8* %202 to i64
  %205 = sub i64 %204, %203
  %206 = trunc i64 %205 to i32
  %207 = load i32, i32* %163, align 4
  %208 = sub i32 %207, %206
  store i32 %208, i32* %163, align 4
  %209 = inttoptr i64 %203 to i8*
  %210 = and i64 %205, 4294967295
  %211 = getelementptr inbounds i8, i8* %209, i64 %210
  store i8* %211, i8** %165, align 8
  store i32 0, i32* %4, align 4
  %212 = load i64, i64* %11, align 8
  %213 = sub i64 %212, %15
  %214 = trunc i64 %213 to i32
  store i32 %214, i32* %6, align 4
  br label %552

215:                                              ; preds = %162
  %216 = getelementptr inbounds %struct.opj_tcd_resolution, %struct.opj_tcd_resolution* %24, i64 %27, i32 6
  %217 = load i32, i32* %216, align 8
  %218 = icmp eq i32 %217, 0
  br i1 %218, label %503, label %219

219:                                              ; preds = %215
  %220 = getelementptr inbounds %struct.opj_tcd_resolution, %struct.opj_tcd_resolution* %24, i64 %27, i32 7, i64 0
  %221 = getelementptr inbounds %struct.opj_pi_iterator, %struct.opj_pi_iterator* %3, i64 0, i32 9
  %222 = getelementptr inbounds %struct.opj_tcp, %struct.opj_tcp* %2, i64 0, i32 15
  br label %223

223:                                              ; preds = %219, %498
  %224 = phi %struct.opj_tcd_band* [ %220, %219 ], [ %500, %498 ]
  %225 = phi i32 [ 0, %219 ], [ %499, %498 ]
  %226 = getelementptr inbounds %struct.opj_tcd_band, %struct.opj_tcd_band* %224, i64 0, i32 5
  %227 = load %struct.opj_tcd_precinct*, %struct.opj_tcd_precinct** %226, align 8
  %228 = load i32, i32* %221, align 4
  %229 = zext i32 %228 to i64
  %230 = tail call i32 @opj_tcd_is_band_empty(%struct.opj_tcd_band* %224) #3
  %231 = icmp eq i32 %230, 0
  br i1 %231, label %232, label %498

232:                                              ; preds = %223
  %233 = getelementptr inbounds %struct.opj_tcd_precinct, %struct.opj_tcd_precinct* %227, i64 %229, i32 4
  %234 = load i32, i32* %233, align 8
  %235 = getelementptr inbounds %struct.opj_tcd_precinct, %struct.opj_tcd_precinct* %227, i64 %229, i32 5
  %236 = load i32, i32* %235, align 4
  %237 = mul i32 %236, %234
  %238 = icmp eq i32 %237, 0
  br i1 %238, label %498, label %239

239:                                              ; preds = %232
  %240 = getelementptr inbounds %struct.opj_tcd_precinct, %struct.opj_tcd_precinct* %227, i64 %229, i32 6
  %241 = bitcast %union.anon.0* %240 to %struct.opj_tcd_cblk_dec**
  %242 = load %struct.opj_tcd_cblk_dec*, %struct.opj_tcd_cblk_dec** %241, align 8
  %243 = getelementptr inbounds %struct.opj_tcd_precinct, %struct.opj_tcd_precinct* %227, i64 %229, i32 8
  %244 = getelementptr inbounds %struct.opj_tcd_precinct, %struct.opj_tcd_precinct* %227, i64 %229, i32 9
  %245 = getelementptr inbounds %struct.opj_tcd_band, %struct.opj_tcd_band* %224, i64 0, i32 7
  br label %246

246:                                              ; preds = %494, %239
  %247 = phi %struct.opj_tcd_cblk_dec* [ %242, %239 ], [ %495, %494 ]
  %248 = phi i32 [ 0, %239 ], [ %496, %494 ]
  %249 = getelementptr inbounds %struct.opj_tcd_cblk_dec, %struct.opj_tcd_cblk_dec* %247, i64 0, i32 9
  %250 = load i32, i32* %249, align 4
  %251 = icmp eq i32 %250, 0
  br i1 %251, label %252, label %257

252:                                              ; preds = %246
  %253 = load %struct.opj_tgt_tree*, %struct.opj_tgt_tree** %243, align 8
  %254 = load i32, i32* %28, align 8
  %255 = add i32 %254, 1
  %256 = tail call i32 @opj_tgt_decode(%struct.opj_bio* nonnull %135, %struct.opj_tgt_tree* %253, i32 %248, i32 %255) #3
  br label %259

257:                                              ; preds = %246
  %258 = tail call i32 @opj_bio_read(%struct.opj_bio* nonnull %135, i32 1) #3
  br label %259

259:                                              ; preds = %257, %252
  %260 = phi i32 [ %258, %257 ], [ %256, %252 ]
  %261 = icmp eq i32 %260, 0
  br i1 %261, label %262, label %264

262:                                              ; preds = %259
  %263 = getelementptr inbounds %struct.opj_tcd_cblk_dec, %struct.opj_tcd_cblk_dec* %247, i64 0, i32 8
  store i32 0, i32* %263, align 8
  br label %494

264:                                              ; preds = %259
  %265 = load i32, i32* %249, align 4
  %266 = icmp eq i32 %265, 0
  br i1 %266, label %267, label %279

267:                                              ; preds = %264, %267
  %268 = phi i32 [ %272, %267 ], [ 0, %264 ]
  %269 = load %struct.opj_tgt_tree*, %struct.opj_tgt_tree** %244, align 8
  %270 = tail call i32 @opj_tgt_decode(%struct.opj_bio* nonnull %135, %struct.opj_tgt_tree* %269, i32 %248, i32 %268) #3
  %271 = icmp eq i32 %270, 0
  %272 = add i32 %268, 1
  br i1 %271, label %267, label %273

273:                                              ; preds = %267
  %274 = load i32, i32* %245, align 4
  %275 = sub i32 1, %268
  %276 = add i32 %275, %274
  %277 = getelementptr inbounds %struct.opj_tcd_cblk_dec, %struct.opj_tcd_cblk_dec* %247, i64 0, i32 6
  store i32 %276, i32* %277, align 8
  %278 = getelementptr inbounds %struct.opj_tcd_cblk_dec, %struct.opj_tcd_cblk_dec* %247, i64 0, i32 7
  store i32 3, i32* %278, align 4
  br label %279

279:                                              ; preds = %264, %273
  %280 = tail call i32 @opj_bio_read(%struct.opj_bio* %135, i32 1) #3
  %281 = icmp eq i32 %280, 0
  br i1 %281, label %298, label %282

282:                                              ; preds = %279
  %283 = tail call i32 @opj_bio_read(%struct.opj_bio* %135, i32 1) #3
  %284 = icmp eq i32 %283, 0
  br i1 %284, label %298, label %285

285:                                              ; preds = %282
  %286 = tail call i32 @opj_bio_read(%struct.opj_bio* %135, i32 2) #3
  %287 = icmp eq i32 %286, 3
  br i1 %287, label %290, label %288

288:                                              ; preds = %285
  %289 = add i32 %286, 3
  br label %298

290:                                              ; preds = %285
  %291 = tail call i32 @opj_bio_read(%struct.opj_bio* %135, i32 5) #3
  %292 = icmp eq i32 %291, 31
  br i1 %292, label %295, label %293

293:                                              ; preds = %290
  %294 = add i32 %291, 6
  br label %298

295:                                              ; preds = %290
  %296 = tail call i32 @opj_bio_read(%struct.opj_bio* %135, i32 7) #3
  %297 = add i32 %296, 37
  br label %298

298:                                              ; preds = %279, %282, %288, %293, %295
  %299 = phi i32 [ %289, %288 ], [ %294, %293 ], [ %297, %295 ], [ 1, %279 ], [ 2, %282 ]
  %300 = getelementptr inbounds %struct.opj_tcd_cblk_dec, %struct.opj_tcd_cblk_dec* %247, i64 0, i32 8
  store i32 %299, i32* %300, align 8
  br label %301

301:                                              ; preds = %301, %298
  %302 = phi i32 [ 0, %298 ], [ %305, %301 ]
  %303 = tail call i32 @opj_bio_read(%struct.opj_bio* %135, i32 1) #3
  %304 = icmp eq i32 %303, 0
  %305 = add i32 %302, 1
  br i1 %304, label %306, label %301

306:                                              ; preds = %301
  %307 = getelementptr inbounds %struct.opj_tcd_cblk_dec, %struct.opj_tcd_cblk_dec* %247, i64 0, i32 7
  %308 = load i32, i32* %307, align 4
  %309 = add i32 %308, %302
  store i32 %309, i32* %307, align 4
  %310 = load i32, i32* %249, align 4
  %311 = icmp eq i32 %310, 0
  br i1 %311, label %312, label %346

312:                                              ; preds = %306
  %313 = load %struct.opj_tccp*, %struct.opj_tccp** %222, align 8
  %314 = load i32, i32* %20, align 4
  %315 = zext i32 %314 to i64
  %316 = getelementptr inbounds %struct.opj_tccp, %struct.opj_tccp* %313, i64 %315, i32 4
  %317 = load i32, i32* %316, align 4
  %318 = getelementptr inbounds %struct.opj_tcd_cblk_dec, %struct.opj_tcd_cblk_dec* %247, i64 0, i32 11
  %319 = load i32, i32* %318, align 4
  %320 = icmp eq i32 %319, 0
  br i1 %320, label %321, label %332

321:                                              ; preds = %312
  %322 = bitcast %struct.opj_tcd_cblk_dec* %247 to i8**
  %323 = load i8*, i8** %322, align 8
  %324 = tail call i8* @opj_realloc(i8* %323, i64 240) #3
  %325 = icmp eq i8* %324, null
  br i1 %325, label %345, label %326

326:                                              ; preds = %321
  %327 = bitcast i8* %324 to %struct.opj_tcd_seg*
  store i8* %324, i8** %322, align 8
  %328 = load i32, i32* %318, align 4
  %329 = zext i32 %328 to i64
  %330 = getelementptr inbounds %struct.opj_tcd_seg, %struct.opj_tcd_seg* %327, i64 %329
  %331 = bitcast %struct.opj_tcd_seg* %330 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 4 %331, i8 0, i64 240, i1 false) #3
  store i32 10, i32* %318, align 4
  br label %332

332:                                              ; preds = %326, %312
  %333 = getelementptr inbounds %struct.opj_tcd_cblk_dec, %struct.opj_tcd_cblk_dec* %247, i64 0, i32 0
  %334 = load %struct.opj_tcd_seg*, %struct.opj_tcd_seg** %333, align 8
  tail call void @opj_tcd_reinit_segment(%struct.opj_tcd_seg* %334) #3
  %335 = and i32 %317, 4
  %336 = icmp eq i32 %335, 0
  br i1 %336, label %339, label %337

337:                                              ; preds = %332
  %338 = getelementptr inbounds %struct.opj_tcd_seg, %struct.opj_tcd_seg* %334, i64 0, i32 3
  store i32 1, i32* %338, align 4
  br label %404

339:                                              ; preds = %332
  %340 = and i32 %317, 1
  %341 = icmp eq i32 %340, 0
  %342 = getelementptr inbounds %struct.opj_tcd_seg, %struct.opj_tcd_seg* %334, i64 0, i32 3
  br i1 %341, label %344, label %343

343:                                              ; preds = %339
  store i32 10, i32* %342, align 4
  br label %404

344:                                              ; preds = %339
  store i32 109, i32* %342, align 4
  br label %404

345:                                              ; preds = %321
  tail call void @opj_bio_destroy(%struct.opj_bio* nonnull %135) #3
  br label %552

346:                                              ; preds = %306
  %347 = add i32 %310, -1
  %348 = getelementptr inbounds %struct.opj_tcd_cblk_dec, %struct.opj_tcd_cblk_dec* %247, i64 0, i32 0
  %349 = load %struct.opj_tcd_seg*, %struct.opj_tcd_seg** %348, align 8
  %350 = zext i32 %347 to i64
  %351 = getelementptr inbounds %struct.opj_tcd_seg, %struct.opj_tcd_seg* %349, i64 %350, i32 1
  %352 = load i32, i32* %351, align 4
  %353 = getelementptr inbounds %struct.opj_tcd_seg, %struct.opj_tcd_seg* %349, i64 %350, i32 3
  %354 = load i32, i32* %353, align 4
  %355 = icmp eq i32 %352, %354
  %356 = bitcast %struct.opj_tcd_seg* %349 to i8*
  br i1 %355, label %357, label %404

357:                                              ; preds = %346
  %358 = load %struct.opj_tccp*, %struct.opj_tccp** %222, align 8
  %359 = load i32, i32* %20, align 4
  %360 = zext i32 %359 to i64
  %361 = getelementptr inbounds %struct.opj_tccp, %struct.opj_tccp* %358, i64 %360, i32 4
  %362 = load i32, i32* %361, align 4
  %363 = add i32 %310, 1
  %364 = getelementptr inbounds %struct.opj_tcd_cblk_dec, %struct.opj_tcd_cblk_dec* %247, i64 0, i32 11
  %365 = load i32, i32* %364, align 4
  %366 = icmp ugt i32 %363, %365
  br i1 %366, label %367, label %381

367:                                              ; preds = %357
  %368 = add i32 %365, 10
  %369 = zext i32 %368 to i64
  %370 = mul nuw nsw i64 %369, 24
  %371 = tail call i8* @opj_realloc(i8* %356, i64 %370) #3
  %372 = icmp eq i8* %371, null
  br i1 %372, label %403, label %373

373:                                              ; preds = %367
  %374 = bitcast %struct.opj_tcd_cblk_dec* %247 to i8**
  %375 = bitcast i8* %371 to %struct.opj_tcd_seg*
  store i8* %371, i8** %374, align 8
  %376 = load i32, i32* %364, align 4
  %377 = zext i32 %376 to i64
  %378 = getelementptr inbounds %struct.opj_tcd_seg, %struct.opj_tcd_seg* %375, i64 %377
  %379 = bitcast %struct.opj_tcd_seg* %378 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 4 %379, i8 0, i64 240, i1 false) #3
  store i32 %368, i32* %364, align 4
  %380 = load %struct.opj_tcd_seg*, %struct.opj_tcd_seg** %348, align 8
  br label %381

381:                                              ; preds = %373, %357
  %382 = phi %struct.opj_tcd_seg* [ %380, %373 ], [ %349, %357 ]
  %383 = zext i32 %310 to i64
  %384 = getelementptr inbounds %struct.opj_tcd_seg, %struct.opj_tcd_seg* %382, i64 %383
  tail call void @opj_tcd_reinit_segment(%struct.opj_tcd_seg* %384) #3
  %385 = and i32 %362, 4
  %386 = icmp eq i32 %385, 0
  br i1 %386, label %389, label %387

387:                                              ; preds = %381
  %388 = getelementptr inbounds %struct.opj_tcd_seg, %struct.opj_tcd_seg* %382, i64 %383, i32 3
  store i32 1, i32* %388, align 4
  br label %404

389:                                              ; preds = %381
  %390 = and i32 %362, 1
  %391 = icmp eq i32 %390, 0
  br i1 %391, label %401, label %392

392:                                              ; preds = %389
  %393 = getelementptr inbounds %struct.opj_tcd_seg, %struct.opj_tcd_seg* %384, i64 -1
  %394 = getelementptr inbounds %struct.opj_tcd_seg, %struct.opj_tcd_seg* %393, i64 0, i32 3
  %395 = load i32, i32* %394, align 4
  %396 = icmp eq i32 %395, 1
  %397 = icmp eq i32 %395, 10
  %398 = or i1 %396, %397
  %399 = select i1 %398, i32 2, i32 1
  %400 = getelementptr inbounds %struct.opj_tcd_seg, %struct.opj_tcd_seg* %382, i64 %383, i32 3
  store i32 %399, i32* %400, align 4
  br label %404

401:                                              ; preds = %389
  %402 = getelementptr inbounds %struct.opj_tcd_seg, %struct.opj_tcd_seg* %382, i64 %383, i32 3
  store i32 109, i32* %402, align 4
  br label %404

403:                                              ; preds = %367
  tail call void @opj_bio_destroy(%struct.opj_bio* nonnull %135) #3
  br label %552

404:                                              ; preds = %387, %392, %401, %337, %343, %344, %346
  %405 = phi i32 [ %347, %346 ], [ 0, %344 ], [ 0, %343 ], [ 0, %337 ], [ %310, %401 ], [ %310, %392 ], [ %310, %387 ]
  %406 = load i32, i32* %300, align 8
  %407 = getelementptr inbounds %struct.opj_tcd_cblk_dec, %struct.opj_tcd_cblk_dec* %247, i64 0, i32 0
  %408 = getelementptr inbounds %struct.opj_tcd_cblk_dec, %struct.opj_tcd_cblk_dec* %247, i64 0, i32 11
  %409 = bitcast %struct.opj_tcd_cblk_dec* %247 to i8**
  br label %410

410:                                              ; preds = %491, %404
  %411 = phi i32 [ %405, %404 ], [ %451, %491 ]
  %412 = phi i32 [ %406, %404 ], [ %447, %491 ]
  %413 = load %struct.opj_tcd_seg*, %struct.opj_tcd_seg** %407, align 8
  %414 = zext i32 %411 to i64
  %415 = getelementptr inbounds %struct.opj_tcd_seg, %struct.opj_tcd_seg* %413, i64 %414, i32 3
  %416 = load i32, i32* %415, align 4
  %417 = getelementptr inbounds %struct.opj_tcd_seg, %struct.opj_tcd_seg* %413, i64 %414, i32 1
  %418 = load i32, i32* %417, align 4
  %419 = sub i32 %416, %418
  %420 = icmp slt i32 %419, %412
  %421 = select i1 %420, i32 %419, i32 %412
  %422 = getelementptr inbounds %struct.opj_tcd_seg, %struct.opj_tcd_seg* %413, i64 %414, i32 4
  store i32 %421, i32* %422, align 4
  %423 = load i32, i32* %307, align 4
  %424 = load %struct.opj_tcd_seg*, %struct.opj_tcd_seg** %407, align 8
  %425 = getelementptr inbounds %struct.opj_tcd_seg, %struct.opj_tcd_seg* %424, i64 %414, i32 4
  %426 = load i32, i32* %425, align 4
  %427 = icmp ugt i32 %426, 1
  br i1 %427, label %428, label %434

428:                                              ; preds = %410, %428
  %429 = phi i32 [ %432, %428 ], [ 0, %410 ]
  %430 = phi i32 [ %431, %428 ], [ %426, %410 ]
  %431 = lshr i32 %430, 1
  %432 = add nuw nsw i32 %429, 1
  %433 = icmp ugt i32 %430, 3
  br i1 %433, label %428, label %434

434:                                              ; preds = %428, %410
  %435 = phi i32 [ 0, %410 ], [ %432, %428 ]
  %436 = add i32 %435, %423
  %437 = icmp ugt i32 %436, 32
  br i1 %437, label %438, label %440

438:                                              ; preds = %434
  %439 = tail call i32 (%struct.opj_event_mgr*, i32, i8*, ...) @opj_event_msg(%struct.opj_event_mgr* %8, i32 1, i8* getelementptr inbounds ([54 x i8], [54 x i8]* @.str.8, i64 0, i64 0), i32 %436) #3
  tail call void @opj_bio_destroy(%struct.opj_bio* nonnull %135) #3
  br label %552

440:                                              ; preds = %434
  %441 = tail call i32 @opj_bio_read(%struct.opj_bio* nonnull %135, i32 %436) #3
  %442 = load %struct.opj_tcd_seg*, %struct.opj_tcd_seg** %407, align 8
  %443 = getelementptr inbounds %struct.opj_tcd_seg, %struct.opj_tcd_seg* %442, i64 %414, i32 5
  store i32 %441, i32* %443, align 4
  %444 = load %struct.opj_tcd_seg*, %struct.opj_tcd_seg** %407, align 8
  %445 = getelementptr inbounds %struct.opj_tcd_seg, %struct.opj_tcd_seg* %444, i64 %414, i32 4
  %446 = load i32, i32* %445, align 4
  %447 = sub nsw i32 %412, %446
  %448 = icmp sgt i32 %447, 0
  %449 = bitcast %struct.opj_tcd_seg* %444 to i8*
  br i1 %448, label %450, label %494

450:                                              ; preds = %440
  %451 = add i32 %411, 1
  %452 = load %struct.opj_tccp*, %struct.opj_tccp** %222, align 8
  %453 = load i32, i32* %20, align 4
  %454 = zext i32 %453 to i64
  %455 = getelementptr inbounds %struct.opj_tccp, %struct.opj_tccp* %452, i64 %454, i32 4
  %456 = load i32, i32* %455, align 4
  %457 = add i32 %411, 2
  %458 = load i32, i32* %408, align 4
  %459 = icmp ugt i32 %457, %458
  br i1 %459, label %460, label %473

460:                                              ; preds = %450
  %461 = add i32 %458, 10
  %462 = zext i32 %461 to i64
  %463 = mul nuw nsw i64 %462, 24
  %464 = tail call i8* @opj_realloc(i8* %449, i64 %463) #3
  %465 = icmp eq i8* %464, null
  br i1 %465, label %490, label %466

466:                                              ; preds = %460
  %467 = bitcast i8* %464 to %struct.opj_tcd_seg*
  store i8* %464, i8** %409, align 8
  %468 = load i32, i32* %408, align 4
  %469 = zext i32 %468 to i64
  %470 = getelementptr inbounds %struct.opj_tcd_seg, %struct.opj_tcd_seg* %467, i64 %469
  %471 = bitcast %struct.opj_tcd_seg* %470 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 4 %471, i8 0, i64 240, i1 false) #3
  store i32 %461, i32* %408, align 4
  %472 = load %struct.opj_tcd_seg*, %struct.opj_tcd_seg** %407, align 8
  br label %473

473:                                              ; preds = %466, %450
  %474 = phi %struct.opj_tcd_seg* [ %472, %466 ], [ %444, %450 ]
  %475 = zext i32 %451 to i64
  %476 = getelementptr inbounds %struct.opj_tcd_seg, %struct.opj_tcd_seg* %474, i64 %475
  tail call void @opj_tcd_reinit_segment(%struct.opj_tcd_seg* %476) #3
  %477 = and i32 %456, 4
  %478 = icmp eq i32 %477, 0
  br i1 %478, label %479, label %491

479:                                              ; preds = %473
  %480 = and i32 %456, 1
  %481 = icmp eq i32 %480, 0
  br i1 %481, label %491, label %482

482:                                              ; preds = %479
  %483 = getelementptr inbounds %struct.opj_tcd_seg, %struct.opj_tcd_seg* %476, i64 -1
  %484 = getelementptr inbounds %struct.opj_tcd_seg, %struct.opj_tcd_seg* %483, i64 0, i32 3
  %485 = load i32, i32* %484, align 4
  %486 = icmp eq i32 %485, 1
  %487 = icmp eq i32 %485, 10
  %488 = or i1 %486, %487
  %489 = select i1 %488, i32 2, i32 1
  br label %491

490:                                              ; preds = %460
  tail call void @opj_bio_destroy(%struct.opj_bio* nonnull %135) #3
  br label %552

491:                                              ; preds = %479, %473, %482
  %492 = phi i32 [ %489, %482 ], [ 1, %473 ], [ 109, %479 ]
  %493 = getelementptr inbounds %struct.opj_tcd_seg, %struct.opj_tcd_seg* %474, i64 %475, i32 3
  store i32 %492, i32* %493, align 4
  br label %410

494:                                              ; preds = %440, %262
  %495 = getelementptr inbounds %struct.opj_tcd_cblk_dec, %struct.opj_tcd_cblk_dec* %247, i64 1
  %496 = add nuw i32 %248, 1
  %497 = icmp eq i32 %496, %237
  br i1 %497, label %498, label %246

498:                                              ; preds = %494, %232, %223
  %499 = add nuw i32 %225, 1
  %500 = getelementptr inbounds %struct.opj_tcd_band, %struct.opj_tcd_band* %224, i64 1
  %501 = load i32, i32* %216, align 8
  %502 = icmp ult i32 %499, %501
  br i1 %502, label %223, label %503

503:                                              ; preds = %498, %215
  %504 = tail call i32 @opj_bio_inalign(%struct.opj_bio* nonnull %135) #3
  %505 = icmp eq i32 %504, 0
  br i1 %505, label %506, label %507

506:                                              ; preds = %503
  tail call void @opj_bio_destroy(%struct.opj_bio* nonnull %135) #3
  br label %552

507:                                              ; preds = %503
  %508 = tail call i64 @opj_bio_numbytes(%struct.opj_bio* nonnull %135) #3
  %509 = getelementptr inbounds i8, i8* %164, i64 %508
  tail call void @opj_bio_destroy(%struct.opj_bio* nonnull %135) #3
  %510 = load i32, i32* %113, align 8
  %511 = and i32 %510, 4
  %512 = icmp eq i32 %511, 0
  br i1 %512, label %513, label %515

513:                                              ; preds = %507
  %514 = bitcast i8** %165 to i64*
  br label %537

515:                                              ; preds = %507
  %516 = load i32, i32* %163, align 4
  %517 = bitcast i8** %165 to i64*
  %518 = load i64, i64* %517, align 8
  %519 = ptrtoint i8* %509 to i64
  %520 = sub i64 %519, %518
  %521 = trunc i64 %520 to i32
  %522 = sub i32 %516, %521
  %523 = icmp ult i32 %522, 2
  br i1 %523, label %524, label %526

524:                                              ; preds = %515
  %525 = tail call i32 (%struct.opj_event_mgr*, i32, i8*, ...) @opj_event_msg(%struct.opj_event_mgr* %8, i32 2, i8* getelementptr inbounds ([42 x i8], [42 x i8]* @.str.5, i64 0, i64 0)) #3
  br label %537

526:                                              ; preds = %515
  %527 = load i8, i8* %509, align 1
  %528 = icmp eq i8 %527, -1
  br i1 %528, label %529, label %533

529:                                              ; preds = %526
  %530 = getelementptr inbounds i8, i8* %509, i64 1
  %531 = load i8, i8* %530, align 1
  %532 = icmp eq i8 %531, -110
  br i1 %532, label %535, label %533

533:                                              ; preds = %529, %526
  %534 = tail call i32 (%struct.opj_event_mgr*, i32, i8*, ...) @opj_event_msg(%struct.opj_event_mgr* %8, i32 2, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.6, i64 0, i64 0)) #3
  br label %537

535:                                              ; preds = %529
  %536 = getelementptr inbounds i8, i8* %509, i64 2
  br label %537

537:                                              ; preds = %513, %524, %535, %533
  %538 = phi i64* [ %514, %513 ], [ %517, %524 ], [ %517, %535 ], [ %517, %533 ]
  %539 = phi i8* [ %509, %513 ], [ %509, %524 ], [ %536, %535 ], [ %509, %533 ]
  %540 = load i64, i64* %538, align 8
  %541 = ptrtoint i8* %539 to i64
  %542 = sub i64 %541, %540
  %543 = trunc i64 %542 to i32
  %544 = load i32, i32* %163, align 4
  %545 = sub i32 %544, %543
  store i32 %545, i32* %163, align 4
  %546 = inttoptr i64 %540 to i8*
  %547 = and i64 %542, 4294967295
  %548 = getelementptr inbounds i8, i8* %546, i64 %547
  store i8* %548, i8** %165, align 8
  store i32 1, i32* %4, align 4
  %549 = load i64, i64* %11, align 8
  %550 = sub i64 %549, %15
  %551 = trunc i64 %550 to i32
  store i32 %551, i32* %6, align 4
  br label %552

552:                                              ; preds = %490, %438, %345, %403, %133, %52, %537, %506, %200
  %553 = phi i32 [ 1, %537 ], [ 0, %506 ], [ 1, %200 ], [ 0, %52 ], [ 0, %133 ], [ 0, %403 ], [ 0, %345 ], [ 0, %438 ], [ 0, %490 ]
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %14)
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %13)
  ret i32 %553
}

declare i32 @opj_tcd_is_band_empty(%struct.opj_tcd_band*) local_unnamed_addr #2

declare i32 @opj_event_msg(%struct.opj_event_mgr*, i32, i8*, ...) local_unnamed_addr #2

declare void @opj_tgt_reset(%struct.opj_tgt_tree*) local_unnamed_addr #2

declare %struct.opj_bio* @opj_bio_create() local_unnamed_addr #2

declare void @opj_bio_init_dec(%struct.opj_bio*, i8*, i32) local_unnamed_addr #2

declare i32 @opj_bio_read(%struct.opj_bio*, i32) local_unnamed_addr #2

declare i32 @opj_bio_inalign(%struct.opj_bio*) local_unnamed_addr #2

declare i64 @opj_bio_numbytes(%struct.opj_bio*) local_unnamed_addr #2

declare void @opj_bio_destroy(%struct.opj_bio*) local_unnamed_addr #2

declare i32 @opj_tgt_decode(%struct.opj_bio*, %struct.opj_tgt_tree*, i32, i32) local_unnamed_addr #2

declare i8* @opj_realloc(i8*, i64) local_unnamed_addr #2

declare void @opj_tcd_reinit_segment(%struct.opj_tcd_seg*) local_unnamed_addr #2

declare void @opj_tgt_setvalue(%struct.opj_tgt_tree*, i32, i32) local_unnamed_addr #2

declare void @opj_bio_init_enc(%struct.opj_bio*, i8*, i32) local_unnamed_addr #2

declare void @opj_bio_write(%struct.opj_bio*, i32, i32) local_unnamed_addr #2

declare void @opj_tgt_encode(%struct.opj_bio*, %struct.opj_tgt_tree*, i32, i32) local_unnamed_addr #2

declare i32 @opj_bio_flush(%struct.opj_bio*) local_unnamed_addr #2

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #1

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = distinct !{!2, !3}
!3 = !{!"llvm.loop.unroll.disable"}
