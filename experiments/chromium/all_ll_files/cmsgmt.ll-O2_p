; ModuleID = '../../third_party/pdfium/third_party/lcms/src/cmsgmt.c'
source_filename = "../../third_party/pdfium/third_party/lcms/src/cmsgmt.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%struct._cmsContext_struct = type { %struct._cmsContext_struct*, %struct._cmsSubAllocator*, [15 x i8*], %struct._cmsMemPluginChunkType }
%struct._cmsSubAllocator = type { %struct._cmsContext_struct*, %struct._cmsSubAllocator_chunk_st* }
%struct._cmsSubAllocator_chunk_st = type { i8*, i32, i32, %struct._cmsSubAllocator_chunk_st* }
%struct._cmsMemPluginChunkType = type { i8* (%struct._cmsContext_struct*, i32)*, i8* (%struct._cmsContext_struct*, i32)*, void (%struct._cmsContext_struct*, i8*)*, i8* (%struct._cmsContext_struct*, i8*, i32)*, i8* (%struct._cmsContext_struct*, i32, i32)*, i8* (%struct._cmsContext_struct*, i8*, i32)* }
%struct.cmsCIExyY = type { double, double, double }
%struct._cms_curve_struct = type { %struct._cms_interp_struc*, i32, %struct.cmsCurveSegment*, %struct._cms_interp_struc**, double (i32, double*, double)**, i32, i16* }
%struct._cms_interp_struc = type { %struct._cmsContext_struct*, i32, i32, i32, [8 x i32], [8 x i32], [8 x i32], i8*, %union.cmsInterpFunction }
%union.cmsInterpFunction = type { void (i16*, i16*, %struct._cms_interp_struc*)* }
%struct.cmsCurveSegment = type { float, float, i32, [10 x double], i32, float* }
%struct.cmsCIELab = type { double, double, double }
%struct._cmsPipeline_struct = type { %struct._cmsStage_struct*, i32, i32, i8*, void (i16*, i16*, i8*)*, void (float*, float*, i8*)*, void (%struct._cmsContext_struct*, i8*)*, i8* (%struct._cmsContext_struct*, i8*)*, %struct._cmsContext_struct*, i32 }
%struct._cmsStage_struct = type { %struct._cmsContext_struct*, i32, i32, i32, i32, void (float*, float*, %struct._cmsStage_struct*)*, i8* (%struct._cmsStage_struct*)*, void (%struct._cmsStage_struct*)*, i8*, %struct._cmsStage_struct* }
%struct.GAMUTCHAIN = type { i8*, i8*, i8*, double }
%struct.cmsTACestimator = type { i32, i8*, float, [16 x float] }
%struct.cmsCIELCh = type { double, double, double }

@.str = private unnamed_addr constant [50 x i8] c"Wrong position of PCS. 1..255 expected, %d found.\00", align 1
@__const.cmsDetectTAC.bp = private unnamed_addr constant { i32, [4 x i8], i8*, float, [16 x float], [4 x i8] } { i32 -1431655766, [4 x i8] c"\AA\AA\AA\AA", i8* inttoptr (i64 -6148914691236517206 to i8*), float 0xFFFFFFFFE0000000, [16 x float] [float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000], [4 x i8] c"\AA\AA\AA\AA" }, align 8
@.str.1 = private unnamed_addr constant [14 x i8] c"Invalid angle\00", align 1

; Function Attrs: nounwind ssp uwtable
define hidden i8* @_cmsChain2Lab(%struct._cmsContext_struct*, i32, i32, i32, i32* nocapture readonly, i8** nocapture readonly, i32* nocapture readonly, double* nocapture readonly, i32) local_unnamed_addr #0 {
  %10 = bitcast i8** %5 to i8*
  %11 = bitcast i32* %6 to i8*
  %12 = bitcast double* %7 to i8*
  %13 = bitcast i32* %4 to i8*
  %14 = alloca [256 x i8*], align 16
  %15 = bitcast [256 x i8*]* %14 to i8*
  %16 = alloca [256 x i32], align 16
  %17 = bitcast [256 x i32]* %16 to i8*
  %18 = alloca [256 x double], align 16
  %19 = bitcast [256 x double]* %18 to i8*
  %20 = alloca [256 x i32], align 16
  %21 = bitcast [256 x i32]* %20 to i8*
  call void @llvm.lifetime.start.p0i8(i64 2048, i8* nonnull %15) #4
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %15, i8 -86, i64 2048, i1 false)
  call void @llvm.lifetime.start.p0i8(i64 1024, i8* nonnull %17) #4
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %17, i8 -86, i64 1024, i1 false)
  call void @llvm.lifetime.start.p0i8(i64 2048, i8* nonnull %19) #4
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %19, i8 -1, i64 2048, i1 false)
  call void @llvm.lifetime.start.p0i8(i64 1024, i8* nonnull %21) #4
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %21, i8 -86, i64 1024, i1 false)
  %22 = icmp ugt i32 %1, 254
  br i1 %22, label %45, label %23

23:                                               ; preds = %9
  %24 = tail call i8* @cmsCreateLab4ProfileTHR(%struct._cmsContext_struct* %0, %struct.cmsCIExyY* null) #4
  %25 = icmp eq i8* %24, null
  br i1 %25, label %45, label %26

26:                                               ; preds = %23
  %27 = icmp eq i32 %1, 0
  br i1 %27, label %32, label %28

28:                                               ; preds = %26
  %29 = zext i32 %1 to i64
  %30 = shl nuw nsw i64 %29, 3
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 16 %15, i8* align 8 %10, i64 %30, i1 false)
  %31 = shl nuw nsw i64 %29, 2
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 16 %17, i8* align 4 %11, i64 %31, i1 false)
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 16 %19, i8* align 8 %12, i64 %30, i1 false)
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 16 %21, i8* align 4 %13, i64 %31, i1 false)
  br label %32

32:                                               ; preds = %26, %28
  %33 = phi i64 [ %29, %28 ], [ 0, %26 ]
  %34 = getelementptr inbounds [256 x i8*], [256 x i8*]* %14, i64 0, i64 %33
  store i8* %24, i8** %34, align 8
  %35 = getelementptr inbounds [256 x i32], [256 x i32]* %16, i64 0, i64 %33
  store i32 0, i32* %35, align 4
  %36 = getelementptr inbounds [256 x double], [256 x double]* %18, i64 0, i64 %33
  store double 1.000000e+00, double* %36, align 8
  %37 = getelementptr inbounds [256 x i32], [256 x i32]* %20, i64 0, i64 %33
  store i32 1, i32* %37, align 4
  %38 = add nuw nsw i32 %1, 1
  %39 = getelementptr inbounds [256 x i8*], [256 x i8*]* %14, i64 0, i64 0
  %40 = getelementptr inbounds [256 x i32], [256 x i32]* %16, i64 0, i64 0
  %41 = getelementptr inbounds [256 x i32], [256 x i32]* %20, i64 0, i64 0
  %42 = getelementptr inbounds [256 x double], [256 x double]* %18, i64 0, i64 0
  %43 = call i8* @cmsCreateExtendedTransform(%struct._cmsContext_struct* %0, i32 %38, i8** nonnull %39, i32* nonnull %40, i32* nonnull %41, double* nonnull %42, i8* null, i32 0, i32 %2, i32 %3, i32 %8) #4
  %44 = call i32 @cmsCloseProfile(i8* nonnull %24) #4
  br label %45

45:                                               ; preds = %23, %9, %32
  %46 = phi i8* [ %43, %32 ], [ null, %9 ], [ null, %23 ]
  call void @llvm.lifetime.end.p0i8(i64 1024, i8* nonnull %21) #4
  call void @llvm.lifetime.end.p0i8(i64 2048, i8* nonnull %19) #4
  call void @llvm.lifetime.end.p0i8(i64 1024, i8* nonnull %17) #4
  call void @llvm.lifetime.end.p0i8(i64 2048, i8* nonnull %15) #4
  ret i8* %46
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

declare i8* @cmsCreateLab4ProfileTHR(%struct._cmsContext_struct*, %struct.cmsCIExyY*) local_unnamed_addr #2

declare i8* @cmsCreateExtendedTransform(%struct._cmsContext_struct*, i32, i8**, i32*, i32*, double*, i8*, i32, i32, i32, i32) local_unnamed_addr #2

declare i32 @cmsCloseProfile(i8*) local_unnamed_addr #2

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: nounwind ssp uwtable
define hidden %struct._cms_curve_struct* @_cmsBuildKToneCurve(%struct._cmsContext_struct*, i32, i32, i32* nocapture readonly, i8** nocapture readonly, i32* nocapture readonly, double* nocapture readonly, i32) local_unnamed_addr #0 {
  %9 = load i8*, i8** %4, align 8
  %10 = tail call i32 @cmsGetColorSpace(i8* %9) #4
  %11 = icmp eq i32 %10, 1129142603
  br i1 %11, label %12, label %40

12:                                               ; preds = %8
  %13 = add i32 %2, -1
  %14 = zext i32 %13 to i64
  %15 = getelementptr inbounds i8*, i8** %4, i64 %14
  %16 = load i8*, i8** %15, align 8
  %17 = tail call i32 @cmsGetColorSpace(i8* %16) #4
  %18 = icmp eq i32 %17, 1129142603
  br i1 %18, label %19, label %40

19:                                               ; preds = %12
  %20 = load i8*, i8** %15, align 8
  %21 = tail call i32 @cmsGetDeviceClass(i8* %20) #4
  %22 = icmp eq i32 %21, 1886549106
  br i1 %22, label %23, label %40

23:                                               ; preds = %19
  %24 = tail call fastcc %struct._cms_curve_struct* @ComputeKToLstar(%struct._cmsContext_struct* %0, i32 %1, i32 %13, i32* %3, i8** %4, i32* %5, double* %6, i32 %7)
  %25 = icmp eq %struct._cms_curve_struct* %24, null
  br i1 %25, label %40, label %26

26:                                               ; preds = %23
  %27 = getelementptr inbounds i32, i32* %3, i64 %14
  %28 = getelementptr inbounds i32, i32* %5, i64 %14
  %29 = getelementptr inbounds double, double* %6, i64 %14
  %30 = tail call fastcc %struct._cms_curve_struct* @ComputeKToLstar(%struct._cmsContext_struct* %0, i32 %1, i32 1, i32* %27, i8** %15, i32* %28, double* %29, i32 %7)
  %31 = icmp eq %struct._cms_curve_struct* %30, null
  br i1 %31, label %32, label %33

32:                                               ; preds = %26
  tail call void @cmsFreeToneCurve(%struct._cms_curve_struct* nonnull %24) #4
  br label %40

33:                                               ; preds = %26
  %34 = tail call %struct._cms_curve_struct* @cmsJoinToneCurve(%struct._cmsContext_struct* %0, %struct._cms_curve_struct* nonnull %24, %struct._cms_curve_struct* nonnull %30, i32 %1) #4
  tail call void @cmsFreeToneCurve(%struct._cms_curve_struct* nonnull %24) #4
  tail call void @cmsFreeToneCurve(%struct._cms_curve_struct* nonnull %30) #4
  %35 = icmp eq %struct._cms_curve_struct* %34, null
  br i1 %35, label %40, label %36

36:                                               ; preds = %33
  %37 = tail call i32 @cmsIsToneCurveMonotonic(%struct._cms_curve_struct* nonnull %34) #4
  %38 = icmp eq i32 %37, 0
  br i1 %38, label %39, label %40

39:                                               ; preds = %36
  tail call void @cmsFreeToneCurve(%struct._cms_curve_struct* nonnull %34) #4
  br label %40

40:                                               ; preds = %36, %33, %23, %19, %8, %12, %39, %32
  %41 = phi %struct._cms_curve_struct* [ null, %32 ], [ null, %39 ], [ null, %12 ], [ null, %8 ], [ null, %19 ], [ null, %23 ], [ null, %33 ], [ %34, %36 ]
  ret %struct._cms_curve_struct* %41
}

declare i32 @cmsGetColorSpace(i8*) local_unnamed_addr #2

declare i32 @cmsGetDeviceClass(i8*) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define internal fastcc %struct._cms_curve_struct* @ComputeKToLstar(%struct._cmsContext_struct*, i32, i32, i32* nocapture readonly, i8** nocapture readonly, i32* nocapture readonly, double* nocapture readonly, i32) unnamed_addr #0 {
  %9 = alloca [256 x i8*], align 16
  %10 = alloca [256 x i32], align 16
  %11 = alloca [256 x double], align 16
  %12 = alloca [256 x i32], align 16
  %13 = alloca %struct.cmsCIELab, align 8
  %14 = alloca [4 x float], align 16
  %15 = bitcast %struct.cmsCIELab* %13 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %15) #4
  %16 = getelementptr inbounds %struct.cmsCIELab, %struct.cmsCIELab* %13, i64 0, i32 0
  %17 = bitcast [4 x float]* %14 to i8*
  %18 = bitcast %struct.cmsCIELab* %13 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %18, i8 -1, i64 24, i1 false)
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %17) #4
  %19 = getelementptr inbounds [4 x float], [4 x float]* %14, i64 0, i64 0
  %20 = getelementptr inbounds [4 x float], [4 x float]* %14, i64 0, i64 1
  %21 = getelementptr inbounds [4 x float], [4 x float]* %14, i64 0, i64 2
  %22 = getelementptr inbounds [4 x float], [4 x float]* %14, i64 0, i64 3
  %23 = bitcast i8** %4 to i8*
  %24 = bitcast i32* %5 to i8*
  %25 = bitcast double* %6 to i8*
  %26 = bitcast i32* %3 to i8*
  %27 = bitcast [256 x i8*]* %9 to i8*
  %28 = bitcast [256 x i32]* %10 to i8*
  %29 = bitcast [256 x double]* %11 to i8*
  %30 = bitcast [256 x i32]* %12 to i8*
  %31 = bitcast [4 x float]* %14 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %31, i8 -1, i64 16, i1 false)
  call void @llvm.lifetime.start.p0i8(i64 2048, i8* nonnull %27) #4
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %27, i8 -86, i64 2048, i1 false) #4
  call void @llvm.lifetime.start.p0i8(i64 1024, i8* nonnull %28) #4
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %28, i8 -86, i64 1024, i1 false) #4
  call void @llvm.lifetime.start.p0i8(i64 2048, i8* nonnull %29) #4
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %29, i8 -1, i64 2048, i1 false) #4
  call void @llvm.lifetime.start.p0i8(i64 1024, i8* nonnull %30) #4
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %30, i8 -86, i64 1024, i1 false) #4
  %32 = icmp ugt i32 %2, 254
  br i1 %32, label %55, label %33

33:                                               ; preds = %8
  %34 = tail call i8* @cmsCreateLab4ProfileTHR(%struct._cmsContext_struct* %0, %struct.cmsCIExyY* null) #4
  %35 = icmp eq i8* %34, null
  br i1 %35, label %55, label %36

36:                                               ; preds = %33
  %37 = icmp eq i32 %2, 0
  br i1 %37, label %42, label %38

38:                                               ; preds = %36
  %39 = zext i32 %2 to i64
  %40 = shl nuw nsw i64 %39, 3
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 16 %27, i8* align 8 %23, i64 %40, i1 false) #4
  %41 = shl nuw nsw i64 %39, 2
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 16 %28, i8* align 4 %24, i64 %41, i1 false) #4
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 16 %29, i8* align 8 %25, i64 %40, i1 false) #4
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 16 %30, i8* align 4 %26, i64 %41, i1 false) #4
  br label %42

42:                                               ; preds = %38, %36
  %43 = phi i64 [ %39, %38 ], [ 0, %36 ]
  %44 = getelementptr inbounds [256 x i8*], [256 x i8*]* %9, i64 0, i64 %43
  store i8* %34, i8** %44, align 8
  %45 = getelementptr inbounds [256 x i32], [256 x i32]* %10, i64 0, i64 %43
  store i32 0, i32* %45, align 4
  %46 = getelementptr inbounds [256 x double], [256 x double]* %11, i64 0, i64 %43
  store double 1.000000e+00, double* %46, align 8
  %47 = getelementptr inbounds [256 x i32], [256 x i32]* %12, i64 0, i64 %43
  store i32 1, i32* %47, align 4
  %48 = add nuw nsw i32 %2, 1
  %49 = getelementptr inbounds [256 x i8*], [256 x i8*]* %9, i64 0, i64 0
  %50 = getelementptr inbounds [256 x i32], [256 x i32]* %10, i64 0, i64 0
  %51 = getelementptr inbounds [256 x i32], [256 x i32]* %12, i64 0, i64 0
  %52 = getelementptr inbounds [256 x double], [256 x double]* %11, i64 0, i64 0
  %53 = call i8* @cmsCreateExtendedTransform(%struct._cmsContext_struct* %0, i32 %48, i8** nonnull %49, i32* nonnull %50, i32* nonnull %51, double* nonnull %52, i8* null, i32 0, i32 4587556, i32 4849688, i32 %7) #4
  %54 = call i32 @cmsCloseProfile(i8* nonnull %34) #4
  br label %55

55:                                               ; preds = %8, %33, %42
  %56 = phi i8* [ %53, %42 ], [ null, %8 ], [ null, %33 ]
  call void @llvm.lifetime.end.p0i8(i64 1024, i8* nonnull %30) #4
  call void @llvm.lifetime.end.p0i8(i64 2048, i8* nonnull %29) #4
  call void @llvm.lifetime.end.p0i8(i64 1024, i8* nonnull %28) #4
  call void @llvm.lifetime.end.p0i8(i64 2048, i8* nonnull %27) #4
  %57 = icmp eq i8* %56, null
  br i1 %57, label %85, label %58

58:                                               ; preds = %55
  %59 = call i8* @_cmsCalloc(%struct._cmsContext_struct* %0, i32 %1, i32 4) #4
  %60 = bitcast i8* %59 to float*
  %61 = icmp eq i8* %59, null
  br i1 %61, label %68, label %62

62:                                               ; preds = %58
  %63 = icmp eq i32 %1, 0
  br i1 %63, label %83, label %64

64:                                               ; preds = %62
  %65 = add i32 %1, -1
  %66 = uitofp i32 %65 to double
  %67 = zext i32 %1 to i64
  br label %69

68:                                               ; preds = %58
  call void @cmsDeleteTransform(i8* nonnull %56) #4
  br label %85

69:                                               ; preds = %69, %64
  %70 = phi i64 [ 0, %64 ], [ %81, %69 ]
  store float 0.000000e+00, float* %19, align 16
  store float 0.000000e+00, float* %20, align 4
  store float 0.000000e+00, float* %21, align 8
  %71 = trunc i64 %70 to i32
  %72 = uitofp i32 %71 to double
  %73 = fmul double %72, 1.000000e+02
  %74 = fdiv double %73, %66
  %75 = fptrunc double %74 to float
  store float %75, float* %22, align 4
  call void @cmsDoTransform(i8* nonnull %56, i8* nonnull %17, i8* nonnull %15, i32 1) #4
  %76 = load double, double* %16, align 8
  %77 = fdiv double %76, 1.000000e+02
  %78 = fsub double 1.000000e+00, %77
  %79 = fptrunc double %78 to float
  %80 = getelementptr inbounds float, float* %60, i64 %70
  store float %79, float* %80, align 4
  %81 = add nuw nsw i64 %70, 1
  %82 = icmp eq i64 %81, %67
  br i1 %82, label %83, label %69

83:                                               ; preds = %69, %62
  %84 = call %struct._cms_curve_struct* @cmsBuildTabulatedToneCurveFloat(%struct._cmsContext_struct* %0, i32 %1, float* nonnull %60) #4
  call void @cmsDeleteTransform(i8* nonnull %56) #4
  call void @_cmsFree(%struct._cmsContext_struct* %0, i8* nonnull %59) #4
  br label %85

85:                                               ; preds = %68, %83, %55
  %86 = phi %struct._cms_curve_struct* [ null, %55 ], [ %84, %83 ], [ null, %68 ]
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %17) #4
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %15) #4
  ret %struct._cms_curve_struct* %86
}

declare void @cmsFreeToneCurve(%struct._cms_curve_struct*) local_unnamed_addr #2

declare %struct._cms_curve_struct* @cmsJoinToneCurve(%struct._cmsContext_struct*, %struct._cms_curve_struct*, %struct._cms_curve_struct*, i32) local_unnamed_addr #2

declare i32 @cmsIsToneCurveMonotonic(%struct._cms_curve_struct*) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden %struct._cmsPipeline_struct* @_cmsCreateGamutCheckPipeline(%struct._cmsContext_struct*, i8** nocapture readonly, i32* nocapture readonly, i32* nocapture readonly, double* nocapture readonly, i32, i8*) local_unnamed_addr #0 {
  %8 = bitcast i8** %1 to i8*
  %9 = bitcast i32* %2 to i8*
  %10 = bitcast double* %4 to i8*
  %11 = bitcast i32* %3 to i8*
  %12 = alloca %struct.GAMUTCHAIN, align 8
  %13 = alloca [256 x i8*], align 16
  %14 = bitcast [256 x i8*]* %13 to i8*
  %15 = alloca [256 x i32], align 16
  %16 = bitcast [256 x i32]* %15 to i8*
  %17 = alloca [256 x double], align 16
  %18 = bitcast [256 x double]* %17 to i8*
  %19 = alloca [256 x i32], align 16
  %20 = bitcast [256 x i32]* %19 to i8*
  %21 = bitcast %struct.GAMUTCHAIN* %12 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %21) #4
  %22 = getelementptr inbounds %struct.GAMUTCHAIN, %struct.GAMUTCHAIN* %12, i64 0, i32 0
  %23 = getelementptr inbounds %struct.GAMUTCHAIN, %struct.GAMUTCHAIN* %12, i64 0, i32 1
  %24 = getelementptr inbounds %struct.GAMUTCHAIN, %struct.GAMUTCHAIN* %12, i64 0, i32 2
  %25 = getelementptr inbounds %struct.GAMUTCHAIN, %struct.GAMUTCHAIN* %12, i64 0, i32 3
  call void @llvm.lifetime.start.p0i8(i64 2048, i8* nonnull %14) #4
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %14, i8 -86, i64 2048, i1 false)
  call void @llvm.lifetime.start.p0i8(i64 1024, i8* nonnull %16) #4
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %16, i8 -86, i64 1024, i1 false)
  call void @llvm.lifetime.start.p0i8(i64 2048, i8* nonnull %18) #4
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %18, i8 -1, i64 2048, i1 false)
  call void @llvm.lifetime.start.p0i8(i64 1024, i8* nonnull %20) #4
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %20, i8 -86, i64 1024, i1 false)
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %21, i8 0, i64 32, i1 false)
  %26 = add i32 %5, -1
  %27 = icmp ugt i32 %26, 254
  br i1 %27, label %28, label %29

28:                                               ; preds = %7
  tail call void (%struct._cmsContext_struct*, i32, i8*, ...) @cmsSignalError(%struct._cmsContext_struct* %0, i32 2, i8* getelementptr inbounds ([50 x i8], [50 x i8]* @.str, i64 0, i64 0), i32 %5) #4
  br label %86

29:                                               ; preds = %7
  %30 = tail call i8* @cmsCreateLab4ProfileTHR(%struct._cmsContext_struct* %0, %struct.cmsCIExyY* null) #4
  %31 = icmp eq i8* %30, null
  br i1 %31, label %86, label %32

32:                                               ; preds = %29
  %33 = tail call i32 @cmsIsMatrixShaper(i8* %6) #4
  %34 = icmp eq i32 %33, 0
  %35 = select i1 %34, double 5.000000e+00, double 1.000000e+00
  store double %35, double* %25, align 8
  %36 = zext i32 %5 to i64
  %37 = shl nuw nsw i64 %36, 3
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 16 %14, i8* align 8 %8, i64 %37, i1 false)
  %38 = shl nuw nsw i64 %36, 2
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 16 %16, i8* align 4 %9, i64 %38, i1 false)
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 16 %18, i8* align 8 %10, i64 %37, i1 false)
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 16 %20, i8* align 4 %11, i64 %38, i1 false)
  %39 = getelementptr inbounds [256 x i8*], [256 x i8*]* %13, i64 0, i64 %36
  store i8* %30, i8** %39, align 8
  %40 = getelementptr inbounds [256 x i32], [256 x i32]* %15, i64 0, i64 %36
  store i32 0, i32* %40, align 4
  %41 = getelementptr inbounds [256 x double], [256 x double]* %17, i64 0, i64 %36
  store double 1.000000e+00, double* %41, align 8
  %42 = getelementptr inbounds [256 x i32], [256 x i32]* %19, i64 0, i64 %36
  store i32 1, i32* %42, align 4
  %43 = tail call i32 @cmsGetColorSpace(i8* %6) #4
  %44 = tail call i32 @cmsChannelsOf(i32 %43) #4
  %45 = tail call i32 @_cmsReasonableGridpointsByColorspace(i32 %43, i32 1024) #4
  %46 = shl i32 %44, 3
  %47 = or i32 %46, 2
  %48 = add nuw nsw i32 %5, 1
  %49 = getelementptr inbounds [256 x i8*], [256 x i8*]* %13, i64 0, i64 0
  %50 = getelementptr inbounds [256 x i32], [256 x i32]* %15, i64 0, i64 0
  %51 = getelementptr inbounds [256 x i32], [256 x i32]* %19, i64 0, i64 0
  %52 = getelementptr inbounds [256 x double], [256 x double]* %17, i64 0, i64 0
  %53 = call i8* @cmsCreateExtendedTransform(%struct._cmsContext_struct* %0, i32 %48, i8** nonnull %49, i32* nonnull %50, i32* nonnull %51, double* nonnull %52, i8* null, i32 0, i32 %47, i32 4849688, i32 64) #4
  store i8* %53, i8** %22, align 8
  %54 = call i8* @cmsCreateTransformTHR(%struct._cmsContext_struct* %0, i8* nonnull %30, i32 4849688, i8* %6, i32 %47, i32 1, i32 64) #4
  store i8* %54, i8** %23, align 8
  %55 = call i8* @cmsCreateTransformTHR(%struct._cmsContext_struct* %0, i8* %6, i32 %47, i8* nonnull %30, i32 4849688, i32 1, i32 64) #4
  store i8* %55, i8** %24, align 8
  %56 = icmp eq i8* %53, null
  %57 = icmp eq i8* %54, null
  %58 = or i1 %56, %57
  %59 = icmp eq i8* %55, null
  %60 = or i1 %59, %58
  br i1 %60, label %71, label %61

61:                                               ; preds = %32
  %62 = call %struct._cmsPipeline_struct* @cmsPipelineAlloc(%struct._cmsContext_struct* %0, i32 3, i32 1) #4
  %63 = icmp eq %struct._cmsPipeline_struct* %62, null
  br i1 %63, label %71, label %64

64:                                               ; preds = %61
  %65 = call %struct._cmsStage_struct* @cmsStageAllocCLut16bit(%struct._cmsContext_struct* %0, i32 %45, i32 %44, i32 1, i16* null) #4
  %66 = call i32 @cmsPipelineInsertStage(%struct._cmsPipeline_struct* nonnull %62, i32 0, %struct._cmsStage_struct* %65) #4
  %67 = icmp eq i32 %66, 0
  br i1 %67, label %68, label %69

68:                                               ; preds = %64
  call void @cmsPipelineFree(%struct._cmsPipeline_struct* nonnull %62) #4
  br label %71

69:                                               ; preds = %64
  %70 = call i32 @cmsStageSampleCLut16bit(%struct._cmsStage_struct* %65, i32 (i16*, i16*, i8*)* nonnull @GamutSampler, i8* nonnull %21, i32 0) #4
  br label %71

71:                                               ; preds = %32, %61, %69, %68
  %72 = phi %struct._cmsPipeline_struct* [ %62, %69 ], [ null, %68 ], [ null, %61 ], [ null, %32 ]
  %73 = load i8*, i8** %22, align 8
  %74 = icmp eq i8* %73, null
  br i1 %74, label %76, label %75

75:                                               ; preds = %71
  call void @cmsDeleteTransform(i8* nonnull %73) #4
  br label %76

76:                                               ; preds = %71, %75
  %77 = load i8*, i8** %23, align 8
  %78 = icmp eq i8* %77, null
  br i1 %78, label %80, label %79

79:                                               ; preds = %76
  call void @cmsDeleteTransform(i8* nonnull %77) #4
  br label %80

80:                                               ; preds = %76, %79
  %81 = load i8*, i8** %24, align 8
  %82 = icmp eq i8* %81, null
  br i1 %82, label %84, label %83

83:                                               ; preds = %80
  call void @cmsDeleteTransform(i8* nonnull %81) #4
  br label %84

84:                                               ; preds = %83, %80
  %85 = call i32 @cmsCloseProfile(i8* nonnull %30) #4
  br label %86

86:                                               ; preds = %29, %84, %28
  %87 = phi %struct._cmsPipeline_struct* [ null, %28 ], [ %72, %84 ], [ null, %29 ]
  call void @llvm.lifetime.end.p0i8(i64 1024, i8* nonnull %20) #4
  call void @llvm.lifetime.end.p0i8(i64 2048, i8* nonnull %18) #4
  call void @llvm.lifetime.end.p0i8(i64 1024, i8* nonnull %16) #4
  call void @llvm.lifetime.end.p0i8(i64 2048, i8* nonnull %14) #4
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %21) #4
  ret %struct._cmsPipeline_struct* %87
}

declare void @cmsSignalError(%struct._cmsContext_struct*, i32, i8*, ...) local_unnamed_addr #2

declare i32 @cmsIsMatrixShaper(i8*) local_unnamed_addr #2

declare i32 @cmsChannelsOf(i32) local_unnamed_addr #2

declare i32 @_cmsReasonableGridpointsByColorspace(i32, i32) local_unnamed_addr #2

declare i8* @cmsCreateTransformTHR(%struct._cmsContext_struct*, i8*, i32, i8*, i32, i32, i32) local_unnamed_addr #2

declare %struct._cmsPipeline_struct* @cmsPipelineAlloc(%struct._cmsContext_struct*, i32, i32) local_unnamed_addr #2

declare %struct._cmsStage_struct* @cmsStageAllocCLut16bit(%struct._cmsContext_struct*, i32, i32, i32, i16*) local_unnamed_addr #2

declare i32 @cmsPipelineInsertStage(%struct._cmsPipeline_struct*, i32, %struct._cmsStage_struct*) local_unnamed_addr #2

declare void @cmsPipelineFree(%struct._cmsPipeline_struct*) local_unnamed_addr #2

declare i32 @cmsStageSampleCLut16bit(%struct._cmsStage_struct*, i32 (i16*, i16*, i8*)*, i8*, i32) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define internal i32 @GamutSampler(i16*, i16* nocapture, i8* nocapture readonly) #0 {
  %4 = alloca %struct.cmsCIELab, align 8
  %5 = alloca %struct.cmsCIELab, align 8
  %6 = alloca %struct.cmsCIELab, align 8
  %7 = alloca %struct.cmsCIELab, align 8
  %8 = alloca [16 x i16], align 16
  %9 = alloca [16 x i16], align 16
  %10 = bitcast %struct.cmsCIELab* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %10) #4
  %11 = bitcast %struct.cmsCIELab* %5 to i8*
  %12 = bitcast %struct.cmsCIELab* %4 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %12, i8 -1, i64 24, i1 false)
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %11) #4
  %13 = bitcast %struct.cmsCIELab* %6 to i8*
  %14 = bitcast %struct.cmsCIELab* %5 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %14, i8 -1, i64 24, i1 false)
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %13) #4
  %15 = bitcast %struct.cmsCIELab* %7 to i8*
  %16 = bitcast %struct.cmsCIELab* %6 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %16, i8 -1, i64 24, i1 false)
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %15) #4
  %17 = bitcast [16 x i16]* %8 to i8*
  %18 = bitcast %struct.cmsCIELab* %7 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %18, i8 -1, i64 24, i1 false)
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %17) #4
  %19 = bitcast [16 x i16]* %9 to i8*
  %20 = bitcast [16 x i16]* %8 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %20, i8 -86, i64 32, i1 false)
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %19) #4
  %21 = bitcast i8* %2 to i8**
  %22 = bitcast [16 x i16]* %9 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %22, i8 -86, i64 32, i1 false)
  %23 = load i8*, i8** %21, align 8
  %24 = bitcast i16* %0 to i8*
  call void @cmsDoTransform(i8* %23, i8* %24, i8* nonnull %10, i32 1) #4
  %25 = getelementptr inbounds i8, i8* %2, i64 8
  %26 = bitcast i8* %25 to i8**
  %27 = load i8*, i8** %26, align 8
  call void @cmsDoTransform(i8* %27, i8* nonnull %10, i8* nonnull %17, i32 1) #4
  %28 = getelementptr inbounds i8, i8* %2, i64 16
  %29 = bitcast i8* %28 to i8**
  %30 = load i8*, i8** %29, align 8
  call void @cmsDoTransform(i8* %30, i8* nonnull %17, i8* nonnull %11, i32 1) #4
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %13, i8* nonnull align 8 %11, i64 24, i1 false)
  %31 = load i8*, i8** %26, align 8
  call void @cmsDoTransform(i8* %31, i8* nonnull %11, i8* nonnull %19, i32 1) #4
  %32 = load i8*, i8** %29, align 8
  call void @cmsDoTransform(i8* %32, i8* nonnull %19, i8* nonnull %15, i32 1) #4
  %33 = call double @cmsDeltaE(%struct.cmsCIELab* nonnull %4, %struct.cmsCIELab* nonnull %5) #4
  %34 = call double @cmsDeltaE(%struct.cmsCIELab* nonnull %6, %struct.cmsCIELab* nonnull %7) #4
  %35 = getelementptr inbounds i8, i8* %2, i64 24
  %36 = bitcast i8* %35 to double*
  %37 = load double, double* %36, align 8
  %38 = fcmp olt double %33, %37
  %39 = fcmp one double %34, %37
  %40 = and i1 %38, %39
  br i1 %40, label %62, label %41

41:                                               ; preds = %3
  %42 = fcmp olt double %34, %37
  %43 = fcmp ogt double %33, %37
  %44 = and i1 %43, %42
  br i1 %44, label %45, label %51

45:                                               ; preds = %41
  %46 = fsub double %33, %37
  %47 = fadd double %46, 5.000000e-01
  %48 = call double @llvm.floor.f64(double %47) #4
  %49 = fptosi double %48 to i32
  %50 = trunc i32 %49 to i16
  br label %62

51:                                               ; preds = %41
  %52 = fcmp oeq double %34, 0.000000e+00
  %53 = fdiv double %33, %34
  %54 = select i1 %52, double %33, double %53
  %55 = fcmp ogt double %54, %37
  br i1 %55, label %56, label %62

56:                                               ; preds = %51
  %57 = fsub double %54, %37
  %58 = fadd double %57, 5.000000e-01
  %59 = call double @llvm.floor.f64(double %58) #4
  %60 = fptosi double %59 to i32
  %61 = trunc i32 %60 to i16
  br label %62

62:                                               ; preds = %51, %3, %56, %45
  %63 = phi i16 [ %61, %56 ], [ %50, %45 ], [ 0, %3 ], [ 0, %51 ]
  store i16 %63, i16* %1, align 2
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %19) #4
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %17) #4
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %15) #4
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %13) #4
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %11) #4
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %10) #4
  ret i32 1
}

declare void @cmsDeleteTransform(i8*) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden double @cmsDetectTAC(i8*) local_unnamed_addr #0 {
  %2 = alloca %struct.cmsTACestimator, align 8
  %3 = alloca [8 x i32], align 16
  %4 = bitcast %struct.cmsTACestimator* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 88, i8* nonnull %4) #4
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %4, i8* align 8 bitcast ({ i32, [4 x i8], i8*, float, [16 x float], [4 x i8] }* @__const.cmsDetectTAC.bp to i8*), i64 88, i1 false)
  %5 = bitcast [8 x i32]* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %5) #4
  %6 = getelementptr inbounds [8 x i32], [8 x i32]* %3, i64 0, i64 0
  %7 = getelementptr inbounds [8 x i32], [8 x i32]* %3, i64 0, i64 1
  %8 = getelementptr inbounds [8 x i32], [8 x i32]* %3, i64 0, i64 2
  %9 = bitcast [8 x i32]* %3 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %9, i8 -86, i64 32, i1 false)
  %10 = tail call %struct._cmsContext_struct* @cmsGetProfileContextID(i8* %0) #4
  %11 = tail call i32 @cmsGetDeviceClass(i8* %0) #4
  %12 = icmp eq i32 %11, 1886549106
  br i1 %12, label %13, label %34

13:                                               ; preds = %1
  %14 = tail call i32 @cmsFormatterForColorspaceOfProfile(i8* %0, i32 4, i32 1) #4
  %15 = lshr i32 %14, 3
  %16 = and i32 %15, 15
  %17 = getelementptr inbounds %struct.cmsTACestimator, %struct.cmsTACestimator* %2, i64 0, i32 0
  store i32 %16, i32* %17, align 8
  %18 = getelementptr inbounds %struct.cmsTACestimator, %struct.cmsTACestimator* %2, i64 0, i32 2
  store float 0.000000e+00, float* %18, align 8
  %19 = tail call i8* @cmsCreateLab4ProfileTHR(%struct._cmsContext_struct* %10, %struct.cmsCIExyY* null) #4
  %20 = icmp eq i8* %19, null
  br i1 %20, label %34, label %21

21:                                               ; preds = %13
  %22 = tail call i8* @cmsCreateTransformTHR(%struct._cmsContext_struct* %10, i8* nonnull %19, i32 655386, i8* %0, i32 %14, i32 0, i32 320) #4
  %23 = getelementptr inbounds %struct.cmsTACestimator, %struct.cmsTACestimator* %2, i64 0, i32 1
  store i8* %22, i8** %23, align 8
  %24 = tail call i32 @cmsCloseProfile(i8* nonnull %19) #4
  %25 = icmp eq i8* %22, null
  br i1 %25, label %34, label %26

26:                                               ; preds = %21
  store i32 6, i32* %6, align 16
  store i32 74, i32* %7, align 4
  store i32 74, i32* %8, align 8
  %27 = call i32 @cmsSliceSpace16(i32 3, i32* nonnull %6, i32 (i16*, i16*, i8*)* nonnull @EstimateTAC, i8* nonnull %4) #4
  %28 = icmp eq i32 %27, 0
  br i1 %28, label %29, label %30

29:                                               ; preds = %26
  store float 0.000000e+00, float* %18, align 8
  br label %30

30:                                               ; preds = %26, %29
  %31 = load i8*, i8** %23, align 8
  call void @cmsDeleteTransform(i8* %31) #4
  %32 = load float, float* %18, align 8
  %33 = fpext float %32 to double
  br label %34

34:                                               ; preds = %21, %13, %1, %30
  %35 = phi double [ %33, %30 ], [ 0.000000e+00, %1 ], [ 0.000000e+00, %13 ], [ 0.000000e+00, %21 ]
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %5) #4
  call void @llvm.lifetime.end.p0i8(i64 88, i8* nonnull %4) #4
  ret double %35
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #1

declare %struct._cmsContext_struct* @cmsGetProfileContextID(i8*) local_unnamed_addr #2

declare i32 @cmsFormatterForColorspaceOfProfile(i8*, i32, i32) local_unnamed_addr #2

declare i32 @cmsSliceSpace16(i32, i32*, i32 (i16*, i16*, i8*)*, i8*) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define internal i32 @EstimateTAC(i16*, i16* nocapture readnone, i8* nocapture) #0 {
  %4 = bitcast i16* %0 to i8*
  %5 = alloca [16 x float], align 16
  %6 = bitcast [16 x float]* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 64, i8* nonnull %6) #4
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %6, i8 -1, i64 64, i1 false)
  %7 = getelementptr inbounds i8, i8* %2, i64 8
  %8 = bitcast i8* %7 to i8**
  %9 = load i8*, i8** %8, align 8
  call void @cmsDoTransform(i8* %9, i8* %4, i8* nonnull %6, i32 1) #4
  %10 = bitcast i8* %2 to i32*
  %11 = load i32, i32* %10, align 8
  %12 = icmp eq i32 %11, 0
  br i1 %12, label %73, label %13

13:                                               ; preds = %3
  %14 = zext i32 %11 to i64
  %15 = add nsw i64 %14, -1
  %16 = and i64 %14, 7
  %17 = icmp ult i64 %15, 7
  br i1 %17, label %58, label %18

18:                                               ; preds = %13
  %19 = sub nsw i64 %14, %16
  br label %20

20:                                               ; preds = %20, %18
  %21 = phi i64 [ 0, %18 ], [ %55, %20 ]
  %22 = phi float [ 0.000000e+00, %18 ], [ %54, %20 ]
  %23 = phi i64 [ %19, %18 ], [ %56, %20 ]
  %24 = getelementptr inbounds [16 x float], [16 x float]* %5, i64 0, i64 %21
  %25 = load float, float* %24, align 16
  %26 = fadd float %22, %25
  %27 = or i64 %21, 1
  %28 = getelementptr inbounds [16 x float], [16 x float]* %5, i64 0, i64 %27
  %29 = load float, float* %28, align 4
  %30 = fadd float %26, %29
  %31 = or i64 %21, 2
  %32 = getelementptr inbounds [16 x float], [16 x float]* %5, i64 0, i64 %31
  %33 = load float, float* %32, align 8
  %34 = fadd float %30, %33
  %35 = or i64 %21, 3
  %36 = getelementptr inbounds [16 x float], [16 x float]* %5, i64 0, i64 %35
  %37 = load float, float* %36, align 4
  %38 = fadd float %34, %37
  %39 = or i64 %21, 4
  %40 = getelementptr inbounds [16 x float], [16 x float]* %5, i64 0, i64 %39
  %41 = load float, float* %40, align 16
  %42 = fadd float %38, %41
  %43 = or i64 %21, 5
  %44 = getelementptr inbounds [16 x float], [16 x float]* %5, i64 0, i64 %43
  %45 = load float, float* %44, align 4
  %46 = fadd float %42, %45
  %47 = or i64 %21, 6
  %48 = getelementptr inbounds [16 x float], [16 x float]* %5, i64 0, i64 %47
  %49 = load float, float* %48, align 8
  %50 = fadd float %46, %49
  %51 = or i64 %21, 7
  %52 = getelementptr inbounds [16 x float], [16 x float]* %5, i64 0, i64 %51
  %53 = load float, float* %52, align 4
  %54 = fadd float %50, %53
  %55 = add nuw nsw i64 %21, 8
  %56 = add i64 %23, -8
  %57 = icmp eq i64 %56, 0
  br i1 %57, label %58, label %20

58:                                               ; preds = %20, %13
  %59 = phi float [ undef, %13 ], [ %54, %20 ]
  %60 = phi i64 [ 0, %13 ], [ %55, %20 ]
  %61 = phi float [ 0.000000e+00, %13 ], [ %54, %20 ]
  %62 = icmp eq i64 %16, 0
  br i1 %62, label %73, label %63

63:                                               ; preds = %58, %63
  %64 = phi i64 [ %70, %63 ], [ %60, %58 ]
  %65 = phi float [ %69, %63 ], [ %61, %58 ]
  %66 = phi i64 [ %71, %63 ], [ %16, %58 ]
  %67 = getelementptr inbounds [16 x float], [16 x float]* %5, i64 0, i64 %64
  %68 = load float, float* %67, align 4
  %69 = fadd float %65, %68
  %70 = add nuw nsw i64 %64, 1
  %71 = add i64 %66, -1
  %72 = icmp eq i64 %71, 0
  br i1 %72, label %73, label %63, !llvm.loop !2

73:                                               ; preds = %58, %63, %3
  %74 = phi float [ 0.000000e+00, %3 ], [ %59, %58 ], [ %69, %63 ]
  %75 = getelementptr inbounds i8, i8* %2, i64 16
  %76 = bitcast i8* %75 to float*
  %77 = load float, float* %76, align 8
  %78 = fcmp ogt float %74, %77
  br i1 %78, label %79, label %195

79:                                               ; preds = %73
  store float %74, float* %76, align 8
  %80 = icmp eq i32 %11, 0
  br i1 %80, label %195, label %81

81:                                               ; preds = %79
  %82 = getelementptr inbounds i8, i8* %2, i64 20
  %83 = bitcast i8* %82 to [16 x float]*
  %84 = zext i32 %11 to i64
  %85 = icmp ult i32 %11, 8
  br i1 %85, label %153, label %86

86:                                               ; preds = %81
  %87 = shl nuw nsw i64 %84, 2
  %88 = add nuw nsw i64 %87, 20
  %89 = getelementptr i8, i8* %2, i64 %88
  %90 = getelementptr i16, i16* %0, i64 %84
  %91 = bitcast i16* %90 to i8*
  %92 = icmp ult i8* %82, %91
  %93 = icmp ugt i8* %89, %4
  %94 = and i1 %92, %93
  br i1 %94, label %153, label %95

95:                                               ; preds = %86
  %96 = and i64 %84, 4294967288
  %97 = add nsw i64 %96, -8
  %98 = lshr exact i64 %97, 3
  %99 = add nuw nsw i64 %98, 1
  %100 = and i64 %99, 1
  %101 = icmp eq i64 %97, 0
  br i1 %101, label %135, label %102

102:                                              ; preds = %95
  %103 = sub nuw nsw i64 %99, %100
  br label %104

104:                                              ; preds = %104, %102
  %105 = phi i64 [ 0, %102 ], [ %132, %104 ]
  %106 = phi i64 [ %103, %102 ], [ %133, %104 ]
  %107 = getelementptr inbounds i16, i16* %0, i64 %105
  %108 = bitcast i16* %107 to <4 x i16>*
  %109 = load <4 x i16>, <4 x i16>* %108, align 2, !alias.scope !4
  %110 = getelementptr inbounds i16, i16* %107, i64 4
  %111 = bitcast i16* %110 to <4 x i16>*
  %112 = load <4 x i16>, <4 x i16>* %111, align 2, !alias.scope !4
  %113 = uitofp <4 x i16> %109 to <4 x float>
  %114 = uitofp <4 x i16> %112 to <4 x float>
  %115 = getelementptr inbounds [16 x float], [16 x float]* %83, i64 0, i64 %105
  %116 = bitcast float* %115 to <4 x float>*
  store <4 x float> %113, <4 x float>* %116, align 4, !alias.scope !7, !noalias !4
  %117 = getelementptr inbounds float, float* %115, i64 4
  %118 = bitcast float* %117 to <4 x float>*
  store <4 x float> %114, <4 x float>* %118, align 4, !alias.scope !7, !noalias !4
  %119 = or i64 %105, 8
  %120 = getelementptr inbounds i16, i16* %0, i64 %119
  %121 = bitcast i16* %120 to <4 x i16>*
  %122 = load <4 x i16>, <4 x i16>* %121, align 2, !alias.scope !4
  %123 = getelementptr inbounds i16, i16* %120, i64 4
  %124 = bitcast i16* %123 to <4 x i16>*
  %125 = load <4 x i16>, <4 x i16>* %124, align 2, !alias.scope !4
  %126 = uitofp <4 x i16> %122 to <4 x float>
  %127 = uitofp <4 x i16> %125 to <4 x float>
  %128 = getelementptr inbounds [16 x float], [16 x float]* %83, i64 0, i64 %119
  %129 = bitcast float* %128 to <4 x float>*
  store <4 x float> %126, <4 x float>* %129, align 4, !alias.scope !7, !noalias !4
  %130 = getelementptr inbounds float, float* %128, i64 4
  %131 = bitcast float* %130 to <4 x float>*
  store <4 x float> %127, <4 x float>* %131, align 4, !alias.scope !7, !noalias !4
  %132 = add i64 %105, 16
  %133 = add i64 %106, -2
  %134 = icmp eq i64 %133, 0
  br i1 %134, label %135, label %104, !llvm.loop !9

135:                                              ; preds = %104, %95
  %136 = phi i64 [ 0, %95 ], [ %132, %104 ]
  %137 = icmp eq i64 %100, 0
  br i1 %137, label %151, label %138

138:                                              ; preds = %135
  %139 = getelementptr inbounds i16, i16* %0, i64 %136
  %140 = bitcast i16* %139 to <4 x i16>*
  %141 = load <4 x i16>, <4 x i16>* %140, align 2, !alias.scope !4
  %142 = getelementptr inbounds i16, i16* %139, i64 4
  %143 = bitcast i16* %142 to <4 x i16>*
  %144 = load <4 x i16>, <4 x i16>* %143, align 2, !alias.scope !4
  %145 = uitofp <4 x i16> %141 to <4 x float>
  %146 = uitofp <4 x i16> %144 to <4 x float>
  %147 = getelementptr inbounds [16 x float], [16 x float]* %83, i64 0, i64 %136
  %148 = bitcast float* %147 to <4 x float>*
  store <4 x float> %145, <4 x float>* %148, align 4, !alias.scope !7, !noalias !4
  %149 = getelementptr inbounds float, float* %147, i64 4
  %150 = bitcast float* %149 to <4 x float>*
  store <4 x float> %146, <4 x float>* %150, align 4, !alias.scope !7, !noalias !4
  br label %151

151:                                              ; preds = %135, %138
  %152 = icmp eq i64 %96, %84
  br i1 %152, label %195, label %153

153:                                              ; preds = %151, %86, %81
  %154 = phi i64 [ 0, %86 ], [ 0, %81 ], [ %96, %151 ]
  %155 = xor i64 %154, -1
  %156 = add nsw i64 %155, %84
  %157 = and i64 %84, 3
  %158 = icmp eq i64 %157, 0
  br i1 %158, label %169, label %159

159:                                              ; preds = %153, %159
  %160 = phi i64 [ %166, %159 ], [ %154, %153 ]
  %161 = phi i64 [ %167, %159 ], [ %157, %153 ]
  %162 = getelementptr inbounds i16, i16* %0, i64 %160
  %163 = load i16, i16* %162, align 2
  %164 = uitofp i16 %163 to float
  %165 = getelementptr inbounds [16 x float], [16 x float]* %83, i64 0, i64 %160
  store float %164, float* %165, align 4
  %166 = add nuw nsw i64 %160, 1
  %167 = add i64 %161, -1
  %168 = icmp eq i64 %167, 0
  br i1 %168, label %169, label %159, !llvm.loop !11

169:                                              ; preds = %159, %153
  %170 = phi i64 [ %154, %153 ], [ %166, %159 ]
  %171 = icmp ult i64 %156, 3
  br i1 %171, label %195, label %172

172:                                              ; preds = %169, %172
  %173 = phi i64 [ %193, %172 ], [ %170, %169 ]
  %174 = getelementptr inbounds i16, i16* %0, i64 %173
  %175 = load i16, i16* %174, align 2
  %176 = uitofp i16 %175 to float
  %177 = getelementptr inbounds [16 x float], [16 x float]* %83, i64 0, i64 %173
  store float %176, float* %177, align 4
  %178 = add nuw nsw i64 %173, 1
  %179 = getelementptr inbounds i16, i16* %0, i64 %178
  %180 = load i16, i16* %179, align 2
  %181 = uitofp i16 %180 to float
  %182 = getelementptr inbounds [16 x float], [16 x float]* %83, i64 0, i64 %178
  store float %181, float* %182, align 4
  %183 = add nuw nsw i64 %173, 2
  %184 = getelementptr inbounds i16, i16* %0, i64 %183
  %185 = load i16, i16* %184, align 2
  %186 = uitofp i16 %185 to float
  %187 = getelementptr inbounds [16 x float], [16 x float]* %83, i64 0, i64 %183
  store float %186, float* %187, align 4
  %188 = add nuw nsw i64 %173, 3
  %189 = getelementptr inbounds i16, i16* %0, i64 %188
  %190 = load i16, i16* %189, align 2
  %191 = uitofp i16 %190 to float
  %192 = getelementptr inbounds [16 x float], [16 x float]* %83, i64 0, i64 %188
  store float %191, float* %192, align 4
  %193 = add nuw nsw i64 %173, 4
  %194 = icmp eq i64 %193, %84
  br i1 %194, label %195, label %172, !llvm.loop !12

195:                                              ; preds = %169, %172, %151, %79, %73
  call void @llvm.lifetime.end.p0i8(i64 64, i8* nonnull %6) #4
  ret i32 1
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @cmsDesaturateLab(%struct.cmsCIELab*, double, double, double, double) local_unnamed_addr #0 {
  %6 = alloca %struct.cmsCIELCh, align 8
  %7 = getelementptr inbounds %struct.cmsCIELab, %struct.cmsCIELab* %0, i64 0, i32 0
  %8 = load double, double* %7, align 8
  %9 = fcmp olt double %8, 0.000000e+00
  br i1 %9, label %10, label %12

10:                                               ; preds = %5
  %11 = bitcast %struct.cmsCIELab* %0 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %11, i8 0, i64 24, i1 false)
  br label %74

12:                                               ; preds = %5
  %13 = fcmp ogt double %8, 1.000000e+02
  br i1 %13, label %14, label %15

14:                                               ; preds = %12
  store double 1.000000e+02, double* %7, align 8
  br label %15

15:                                               ; preds = %14, %12
  %16 = getelementptr inbounds %struct.cmsCIELab, %struct.cmsCIELab* %0, i64 0, i32 1
  %17 = load double, double* %16, align 8
  %18 = fcmp olt double %17, %2
  %19 = fcmp ogt double %17, %1
  %20 = or i1 %18, %19
  br i1 %20, label %27, label %21

21:                                               ; preds = %15
  %22 = getelementptr inbounds %struct.cmsCIELab, %struct.cmsCIELab* %0, i64 0, i32 2
  %23 = load double, double* %22, align 8
  %24 = fcmp olt double %23, %4
  %25 = fcmp ogt double %23, %3
  %26 = or i1 %24, %25
  br i1 %26, label %27, label %74

27:                                               ; preds = %21, %15
  %28 = bitcast %struct.cmsCIELCh* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %28) #4
  %29 = fcmp oeq double %17, 0.000000e+00
  %30 = bitcast %struct.cmsCIELCh* %6 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %30, i8 -1, i64 24, i1 false)
  br i1 %29, label %31, label %36

31:                                               ; preds = %27
  %32 = getelementptr inbounds %struct.cmsCIELab, %struct.cmsCIELab* %0, i64 0, i32 2
  %33 = load double, double* %32, align 8
  %34 = fcmp olt double %33, 0.000000e+00
  %35 = select i1 %34, double %4, double %3
  store double %35, double* %32, align 8
  br label %72

36:                                               ; preds = %27
  %37 = getelementptr inbounds %struct.cmsCIELCh, %struct.cmsCIELCh* %6, i64 0, i32 2
  call void @cmsLab2LCh(%struct.cmsCIELCh* nonnull %6, %struct.cmsCIELab* %0) #4
  %38 = getelementptr inbounds %struct.cmsCIELab, %struct.cmsCIELab* %0, i64 0, i32 2
  %39 = load double, double* %38, align 8
  %40 = load double, double* %16, align 8
  %41 = fdiv double %39, %40
  %42 = load double, double* %37, align 8
  %43 = fcmp oge double %42, 0.000000e+00
  %44 = fcmp olt double %42, 4.500000e+01
  %45 = and i1 %43, %44
  br i1 %45, label %50, label %46

46:                                               ; preds = %36
  %47 = fcmp oge double %42, 3.150000e+02
  %48 = fcmp ole double %42, 3.600000e+02
  %49 = and i1 %47, %48
  br i1 %49, label %50, label %52

50:                                               ; preds = %46, %36
  store double %1, double* %16, align 8
  %51 = fmul double %41, %1
  store double %51, double* %38, align 8
  br label %71

52:                                               ; preds = %46
  %53 = fcmp oge double %42, 4.500000e+01
  %54 = fcmp olt double %42, 1.350000e+02
  %55 = and i1 %53, %54
  br i1 %55, label %56, label %58

56:                                               ; preds = %52
  store double %3, double* %38, align 8
  %57 = fdiv double %3, %41
  store double %57, double* %16, align 8
  br label %71

58:                                               ; preds = %52
  %59 = fcmp oge double %42, 1.350000e+02
  %60 = fcmp olt double %42, 2.250000e+02
  %61 = and i1 %59, %60
  br i1 %61, label %62, label %64

62:                                               ; preds = %58
  store double %2, double* %16, align 8
  %63 = fmul double %41, %2
  store double %63, double* %38, align 8
  br label %71

64:                                               ; preds = %58
  %65 = fcmp oge double %42, 2.250000e+02
  %66 = fcmp olt double %42, 3.150000e+02
  %67 = and i1 %65, %66
  br i1 %67, label %68, label %70

68:                                               ; preds = %64
  store double %4, double* %38, align 8
  %69 = fdiv double %4, %41
  store double %69, double* %16, align 8
  br label %71

70:                                               ; preds = %64
  call void (%struct._cmsContext_struct*, i32, i8*, ...) @cmsSignalError(%struct._cmsContext_struct* null, i32 2, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.1, i64 0, i64 0)) #4
  br label %72

71:                                               ; preds = %56, %68, %62, %50
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %28) #4
  br label %74

72:                                               ; preds = %70, %31
  %73 = phi i32 [ 1, %31 ], [ 0, %70 ]
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %28) #4
  br label %74

74:                                               ; preds = %21, %71, %72, %10
  %75 = phi i32 [ 0, %10 ], [ %73, %72 ], [ 1, %71 ], [ 1, %21 ]
  ret i32 %75
}

declare void @cmsLab2LCh(%struct.cmsCIELCh*, %struct.cmsCIELab*) local_unnamed_addr #2

declare i8* @_cmsCalloc(%struct._cmsContext_struct*, i32, i32) local_unnamed_addr #2

declare void @cmsDoTransform(i8*, i8*, i8*, i32) local_unnamed_addr #2

declare %struct._cms_curve_struct* @cmsBuildTabulatedToneCurveFloat(%struct._cmsContext_struct*, i32, float*) local_unnamed_addr #2

declare void @_cmsFree(%struct._cmsContext_struct*, i8*) local_unnamed_addr #2

declare double @cmsDeltaE(%struct.cmsCIELab*, %struct.cmsCIELab*) local_unnamed_addr #2

; Function Attrs: nounwind readnone speculatable
declare double @llvm.floor.f64(double) #3

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind readnone speculatable }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = distinct !{!2, !3}
!3 = !{!"llvm.loop.unroll.disable"}
!4 = !{!5}
!5 = distinct !{!5, !6}
!6 = distinct !{!6, !"LVerDomain"}
!7 = !{!8}
!8 = distinct !{!8, !6}
!9 = distinct !{!9, !10}
!10 = !{!"llvm.loop.isvectorized", i32 1}
!11 = distinct !{!11, !3}
!12 = distinct !{!12, !10}
