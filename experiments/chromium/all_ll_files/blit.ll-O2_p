; ModuleID = '../../ui/gfx/blit.cc'
source_filename = "../../ui/gfx/blit.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%class.SkCanvas = type { i32 (...)**, %class.SkDeque, %"class.SkCanvas::MCRec"*, %class.sk_sp, [384 x i64], %class.sk_sp.0, %class.SkSurfaceProps, i32, %"class.std::__1::unique_ptr", %class.SkSurface_Base*, %struct.SkIRect, %struct.SkRect, %"class.std::__1::unique_ptr.2" }
%class.SkDeque = type { i8*, i8*, %"struct.SkDeque::Block"*, %"struct.SkDeque::Block"*, i64, i8*, i32, i32 }
%"struct.SkDeque::Block" = type opaque
%"class.SkCanvas::MCRec" = type opaque
%class.sk_sp = type { %class.SkMarkerStack* }
%class.SkMarkerStack = type opaque
%class.sk_sp.0 = type { %class.SkBaseDevice* }
%class.SkBaseDevice = type opaque
%class.SkSurfaceProps = type { i32, i32 }
%"class.std::__1::unique_ptr" = type { %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %class.SkRasterHandleAllocator* }
%class.SkRasterHandleAllocator = type { i32 (...)** }
%class.SkSurface_Base = type opaque
%struct.SkIRect = type { i32, i32, i32, i32 }
%struct.SkRect = type { float, float, float, float }
%"class.std::__1::unique_ptr.2" = type { %"class.std::__1::__compressed_pair.3" }
%"class.std::__1::__compressed_pair.3" = type { %"struct.std::__1::__compressed_pair_elem.4" }
%"struct.std::__1::__compressed_pair_elem.4" = type { %class.SkGlyphRunBuilder* }
%class.SkGlyphRunBuilder = type opaque
%"class.gfx::Rect" = type { %"class.gfx::Point", %"class.gfx::Size" }
%"class.gfx::Point" = type { i32, i32 }
%"class.gfx::Size" = type { i32, i32 }
%"class.gfx::Vector2d" = type { i32, i32 }
%class.SkPixmap = type { i8*, i64, %struct.SkImageInfo }
%struct.SkImageInfo = type { %class.SkColorInfo, %struct.SkISize }
%class.SkColorInfo = type { %class.sk_sp.8, i32, i32 }
%class.sk_sp.8 = type { %class.SkColorSpace* }
%class.SkColorSpace = type <{ %class.SkNVRefCnt, i32, i32, %struct.skcms_TransferFunction, %struct.skcms_Matrix3x3, %struct.skcms_TransferFunction, %struct.skcms_Matrix3x3, %class.SkOnce, [3 x i8] }>
%class.SkNVRefCnt = type { %"struct.std::__1::atomic" }
%"struct.std::__1::atomic" = type { %"struct.std::__1::__atomic_base" }
%"struct.std::__1::__atomic_base" = type { %"struct.std::__1::__atomic_base.9" }
%"struct.std::__1::__atomic_base.9" = type { %"struct.std::__1::__cxx_atomic_impl" }
%"struct.std::__1::__cxx_atomic_impl" = type { %"struct.std::__1::__cxx_atomic_base_impl" }
%"struct.std::__1::__cxx_atomic_base_impl" = type { i32 }
%struct.skcms_TransferFunction = type { float, float, float, float, float, float, float }
%struct.skcms_Matrix3x3 = type { [3 x [3 x float]] }
%class.SkOnce = type { %"struct.std::__1::atomic.10" }
%"struct.std::__1::atomic.10" = type { %"struct.std::__1::__atomic_base.11" }
%"struct.std::__1::__atomic_base.11" = type { %"struct.std::__1::__atomic_base.12" }
%"struct.std::__1::__atomic_base.12" = type { %"struct.std::__1::__cxx_atomic_impl.13" }
%"struct.std::__1::__cxx_atomic_impl.13" = type { %"struct.std::__1::__cxx_atomic_base_impl.14" }
%"struct.std::__1::__cxx_atomic_base_impl.14" = type { i8 }
%struct.SkISize = type { i32, i32 }

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN3gfx12ScrollCanvasEP8SkCanvasRKNS_4RectERKNS_8Vector2dE(%class.SkCanvas*, %"class.gfx::Rect"* dereferenceable(16), %"class.gfx::Vector2d"* dereferenceable(8)) local_unnamed_addr #0 {
  %4 = alloca %class.SkPixmap, align 8
  %5 = alloca { i64, i64 }, align 8
  %6 = bitcast { i64, i64 }* %5 to %"class.gfx::Rect"*
  %7 = alloca %"class.gfx::Rect", align 4
  %8 = alloca { i64, i64 }, align 8
  %9 = bitcast { i64, i64 }* %8 to %"class.gfx::Rect"*
  %10 = alloca { i64, i64 }, align 8
  %11 = bitcast { i64, i64 }* %10 to %"class.gfx::Rect"*
  %12 = bitcast %class.SkPixmap* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %12) #4
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %12, i8 0, i64 40, i1 false) #4
  %13 = call zeroext i1 @_ZN4skia17GetWritablePixelsEP8SkCanvasP8SkPixmap(%class.SkCanvas* %0, %class.SkPixmap* nonnull %4) #4
  %14 = bitcast { i64, i64 }* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %14) #4
  %15 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %5, i64 0, i32 1
  %16 = bitcast %"class.gfx::Rect"* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %16) #4
  %17 = getelementptr inbounds %class.SkPixmap, %class.SkPixmap* %4, i64 0, i32 2, i32 1, i32 0
  %18 = load i32, i32* %17, align 8
  %19 = getelementptr inbounds %class.SkPixmap, %class.SkPixmap* %4, i64 0, i32 2, i32 1, i32 1
  %20 = load i32, i32* %19, align 4
  %21 = getelementptr inbounds %"class.gfx::Rect", %"class.gfx::Rect"* %7, i64 0, i32 0, i32 0
  store i32 0, i32* %21, align 4
  %22 = getelementptr inbounds %"class.gfx::Rect", %"class.gfx::Rect"* %7, i64 0, i32 0, i32 1
  store i32 0, i32* %22, align 4
  %23 = getelementptr inbounds %"class.gfx::Rect", %"class.gfx::Rect"* %7, i64 0, i32 1, i32 0
  %24 = icmp sgt i32 %18, 0
  %25 = select i1 %24, i32 %18, i32 0
  store i32 %25, i32* %23, align 4
  %26 = getelementptr inbounds %"class.gfx::Rect", %"class.gfx::Rect"* %7, i64 0, i32 1, i32 1
  %27 = icmp sgt i32 %20, 0
  %28 = select i1 %27, i32 %20, i32 0
  store i32 %28, i32* %26, align 4
  %29 = call { i64, i64 } @_ZN3gfx14IntersectRectsERKNS_4RectES2_(%"class.gfx::Rect"* dereferenceable(16) %1, %"class.gfx::Rect"* nonnull dereferenceable(16) %7) #4
  %30 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %5, i64 0, i32 0
  %31 = extractvalue { i64, i64 } %29, 0
  store i64 %31, i64* %30, align 8
  %32 = extractvalue { i64, i64 } %29, 1
  store i64 %32, i64* %15, align 8
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %16) #4
  %33 = bitcast { i64, i64 }* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %33) #4
  %34 = bitcast { i64, i64 }* %8 to i32*
  %35 = getelementptr inbounds %"class.gfx::Rect", %"class.gfx::Rect"* %9, i64 0, i32 0, i32 1
  %36 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %8, i64 0, i32 1
  %37 = getelementptr inbounds %"class.gfx::Rect", %"class.gfx::Rect"* %9, i64 0, i32 1, i32 1
  %38 = bitcast { i64, i64 }* %10 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %38) #4
  %39 = call { i64, i64 } @_ZN3gfxplERKNS_4RectERKNS_8Vector2dE(%"class.gfx::Rect"* nonnull dereferenceable(16) %6, %"class.gfx::Vector2d"* dereferenceable(8) %2) #4
  %40 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %10, i64 0, i32 0
  %41 = extractvalue { i64, i64 } %39, 0
  store i64 %41, i64* %40, align 8
  %42 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %10, i64 0, i32 1
  %43 = extractvalue { i64, i64 } %39, 1
  store i64 %43, i64* %42, align 8
  %44 = call { i64, i64 } @_ZN3gfx14IntersectRectsERKNS_4RectES2_(%"class.gfx::Rect"* nonnull dereferenceable(16) %11, %"class.gfx::Rect"* nonnull dereferenceable(16) %6) #4
  %45 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %8, i64 0, i32 0
  %46 = extractvalue { i64, i64 } %44, 0
  store i64 %46, i64* %45, align 8
  %47 = extractvalue { i64, i64 } %44, 1
  store i64 %47, i64* %36, align 8
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %38) #4
  %48 = trunc i64 %47 to i32
  %49 = icmp eq i32 %48, 0
  %50 = icmp ult i64 %47, 4294967296
  %51 = or i1 %49, %50
  br i1 %51, label %158, label %52

52:                                               ; preds = %3
  %53 = bitcast i64* %36 to i32*
  %54 = call { i64, i64 } @_ZN3gfxmiERKNS_4RectERKNS_8Vector2dE(%"class.gfx::Rect"* nonnull dereferenceable(16) %9, %"class.gfx::Vector2d"* dereferenceable(8) %2) #4
  %55 = extractvalue { i64, i64 } %54, 0
  %56 = trunc i64 %55 to i32
  %57 = load i32, i32* %53, align 8
  %58 = shl nsw i32 %57, 2
  %59 = sext i32 %58 to i64
  %60 = getelementptr inbounds %"class.gfx::Vector2d", %"class.gfx::Vector2d"* %2, i64 0, i32 1
  %61 = load i32, i32* %60, align 4
  %62 = icmp sgt i32 %61, 0
  br i1 %62, label %63, label %92

63:                                               ; preds = %52
  %64 = load i32, i32* %37, align 4
  %65 = icmp sgt i32 %64, 0
  br i1 %65, label %66, label %158

66:                                               ; preds = %63
  %67 = getelementptr inbounds %class.SkPixmap, %class.SkPixmap* %4, i64 0, i32 0
  %68 = getelementptr inbounds %class.SkPixmap, %class.SkPixmap* %4, i64 0, i32 1
  %69 = shl i32 %56, 2
  %70 = sext i32 %69 to i64
  %71 = sext i32 %64 to i64
  %72 = ashr i64 %55, 32
  br label %73

73:                                               ; preds = %66, %73
  %74 = phi i64 [ %71, %66 ], [ %75, %73 ]
  %75 = add nsw i64 %74, -1
  %76 = load i32, i32* %34, align 8
  %77 = load i32, i32* %35, align 4
  %78 = sext i32 %77 to i64
  %79 = add nsw i64 %75, %78
  %80 = load i8*, i8** %67, align 8
  %81 = load i64, i64* %68, align 8
  %82 = mul i64 %81, %79
  %83 = getelementptr inbounds i8, i8* %80, i64 %82
  %84 = shl i32 %76, 2
  %85 = sext i32 %84 to i64
  %86 = getelementptr inbounds i8, i8* %83, i64 %85
  %87 = add nsw i64 %75, %72
  %88 = mul i64 %81, %87
  %89 = getelementptr inbounds i8, i8* %80, i64 %70
  %90 = getelementptr inbounds i8, i8* %89, i64 %88
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %86, i8* align 4 %90, i64 %59, i1 false)
  %91 = icmp sgt i64 %75, 0
  br i1 %91, label %73, label %158

92:                                               ; preds = %52
  %93 = icmp slt i32 %61, 0
  br i1 %93, label %94, label %124

94:                                               ; preds = %92
  %95 = load i32, i32* %37, align 4
  %96 = icmp sgt i32 %95, 0
  br i1 %96, label %97, label %158

97:                                               ; preds = %94
  %98 = getelementptr inbounds %class.SkPixmap, %class.SkPixmap* %4, i64 0, i32 0
  %99 = getelementptr inbounds %class.SkPixmap, %class.SkPixmap* %4, i64 0, i32 1
  %100 = shl i32 %56, 2
  %101 = sext i32 %100 to i64
  %102 = ashr i64 %55, 32
  br label %103

103:                                              ; preds = %97, %103
  %104 = phi i64 [ 0, %97 ], [ %120, %103 ]
  %105 = load i32, i32* %34, align 8
  %106 = load i32, i32* %35, align 4
  %107 = sext i32 %106 to i64
  %108 = add nsw i64 %104, %107
  %109 = load i8*, i8** %98, align 8
  %110 = load i64, i64* %99, align 8
  %111 = mul i64 %110, %108
  %112 = getelementptr inbounds i8, i8* %109, i64 %111
  %113 = shl i32 %105, 2
  %114 = sext i32 %113 to i64
  %115 = getelementptr inbounds i8, i8* %112, i64 %114
  %116 = add nsw i64 %104, %102
  %117 = mul i64 %110, %116
  %118 = getelementptr inbounds i8, i8* %109, i64 %101
  %119 = getelementptr inbounds i8, i8* %118, i64 %117
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %115, i8* align 4 %119, i64 %59, i1 false)
  %120 = add nuw nsw i64 %104, 1
  %121 = load i32, i32* %37, align 4
  %122 = sext i32 %121 to i64
  %123 = icmp slt i64 %120, %122
  br i1 %123, label %103, label %158

124:                                              ; preds = %92
  %125 = getelementptr inbounds %"class.gfx::Vector2d", %"class.gfx::Vector2d"* %2, i64 0, i32 0
  %126 = load i32, i32* %125, align 4
  %127 = icmp ne i32 %126, 0
  %128 = load i32, i32* %37, align 4
  %129 = icmp sgt i32 %128, 0
  %130 = and i1 %127, %129
  br i1 %130, label %131, label %158

131:                                              ; preds = %124
  %132 = getelementptr inbounds %class.SkPixmap, %class.SkPixmap* %4, i64 0, i32 0
  %133 = getelementptr inbounds %class.SkPixmap, %class.SkPixmap* %4, i64 0, i32 1
  %134 = shl i32 %56, 2
  %135 = sext i32 %134 to i64
  %136 = ashr i64 %55, 32
  br label %137

137:                                              ; preds = %131, %137
  %138 = phi i64 [ 0, %131 ], [ %154, %137 ]
  %139 = load i32, i32* %34, align 8
  %140 = load i32, i32* %35, align 4
  %141 = sext i32 %140 to i64
  %142 = add nsw i64 %138, %141
  %143 = load i8*, i8** %132, align 8
  %144 = load i64, i64* %133, align 8
  %145 = mul i64 %144, %142
  %146 = getelementptr inbounds i8, i8* %143, i64 %145
  %147 = shl i32 %139, 2
  %148 = sext i32 %147 to i64
  %149 = getelementptr inbounds i8, i8* %146, i64 %148
  %150 = add nsw i64 %138, %136
  %151 = mul i64 %144, %150
  %152 = getelementptr inbounds i8, i8* %143, i64 %135
  %153 = getelementptr inbounds i8, i8* %152, i64 %151
  call void @llvm.memmove.p0i8.p0i8.i64(i8* align 4 %149, i8* align 4 %153, i64 %59, i1 false)
  %154 = add nuw nsw i64 %138, 1
  %155 = load i32, i32* %37, align 4
  %156 = sext i32 %155 to i64
  %157 = icmp slt i64 %154, %156
  br i1 %157, label %137, label %158

158:                                              ; preds = %137, %103, %73, %124, %94, %63, %3
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %33) #4
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %14) #4
  %159 = getelementptr inbounds %class.SkPixmap, %class.SkPixmap* %4, i64 0, i32 2, i32 0, i32 0, i32 0
  %160 = load %class.SkColorSpace*, %class.SkColorSpace** %159, align 8
  %161 = icmp eq %class.SkColorSpace* %160, null
  br i1 %161, label %168, label %162

162:                                              ; preds = %158
  %163 = getelementptr inbounds %class.SkColorSpace, %class.SkColorSpace* %160, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %164 = atomicrmw add i32* %163, i32 -1 acq_rel
  %165 = icmp eq i32 %164, 1
  br i1 %165, label %166, label %168

166:                                              ; preds = %162
  %167 = bitcast %class.SkColorSpace* %160 to i8*
  call void @_ZdlPv(i8* %167) #5
  br label %168

168:                                              ; preds = %158, %162, %166
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %12) #4
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

declare zeroext i1 @_ZN4skia17GetWritablePixelsEP8SkCanvasP8SkPixmap(%class.SkCanvas*, %class.SkPixmap*) local_unnamed_addr #2

declare { i64, i64 } @_ZN3gfx14IntersectRectsERKNS_4RectES2_(%"class.gfx::Rect"* dereferenceable(16), %"class.gfx::Rect"* dereferenceable(16)) local_unnamed_addr #2

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

declare { i64, i64 } @_ZN3gfxplERKNS_4RectERKNS_8Vector2dE(%"class.gfx::Rect"* dereferenceable(16), %"class.gfx::Vector2d"* dereferenceable(8)) local_unnamed_addr #2

declare { i64, i64 } @_ZN3gfxmiERKNS_4RectERKNS_8Vector2dE(%"class.gfx::Rect"* dereferenceable(16), %"class.gfx::Vector2d"* dereferenceable(8)) local_unnamed_addr #2

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.memmove.p0i8.p0i8.i64(i8* nocapture, i8* nocapture readonly, i64, i1 immarg) #1

; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(i8*) local_unnamed_addr #3

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind }
attributes #5 = { builtin nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
