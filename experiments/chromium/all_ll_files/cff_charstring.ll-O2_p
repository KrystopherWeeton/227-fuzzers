; ModuleID = '../../third_party/ots/src/src/cff_charstring.cc'
source_filename = "../../third_party/ots/src/src/cff_charstring.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%"class.ots::OpenTypeCFF" = type { %"class.ots::Table.base", i8, %"class.std::__1::basic_string", i64, %"class.std::__1::map.29", %"struct.ots::CFFIndex"*, %"class.std::__1::vector.43", %"struct.ots::CFFIndex"*, %"class.std::__1::vector.50", i8*, i64 }
%"class.ots::Table.base" = type <{ i32 (...)**, i32, i32, %"struct.ots::Font"*, i8 }>
%"struct.ots::Font" = type { %"struct.ots::FontFile"*, i32, i16, i16, i16, i16, %"class.std::__1::map.15" }
%"struct.ots::FontFile" = type { %"class.ots::OTSContext"*, %"class.std::__1::map", %"class.std::__1::map.4" }
%"class.ots::OTSContext" = type { i32 (...)** }
%"class.std::__1::map" = type { %"class.std::__1::__tree" }
%"class.std::__1::__tree" = type { %"class.std::__1::__tree_end_node"*, %"class.std::__1::__compressed_pair", %"class.std::__1::__compressed_pair.1" }
%"class.std::__1::__tree_end_node" = type { %"class.std::__1::__tree_node_base"* }
%"class.std::__1::__tree_node_base" = type <{ %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_end_node"*, i8, [7 x i8] }>
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %"class.std::__1::__tree_end_node" }
%"class.std::__1::__compressed_pair.1" = type { %"struct.std::__1::__compressed_pair_elem.2" }
%"struct.std::__1::__compressed_pair_elem.2" = type { i64 }
%"class.std::__1::map.4" = type { %"class.std::__1::__tree.5" }
%"class.std::__1::__tree.5" = type { %"class.std::__1::__tree_end_node"*, %"class.std::__1::__compressed_pair.6", %"class.std::__1::__compressed_pair.10" }
%"class.std::__1::__compressed_pair.6" = type { %"struct.std::__1::__compressed_pair_elem" }
%"class.std::__1::__compressed_pair.10" = type { %"struct.std::__1::__compressed_pair_elem.2" }
%"class.std::__1::map.15" = type { %"class.std::__1::__tree.16" }
%"class.std::__1::__tree.16" = type { %"class.std::__1::__tree_end_node"*, %"class.std::__1::__compressed_pair.17", %"class.std::__1::__compressed_pair.21" }
%"class.std::__1::__compressed_pair.17" = type { %"struct.std::__1::__compressed_pair_elem" }
%"class.std::__1::__compressed_pair.21" = type { %"struct.std::__1::__compressed_pair_elem.2" }
%"class.std::__1::basic_string" = type { %"class.std::__1::__compressed_pair.24" }
%"class.std::__1::__compressed_pair.24" = type { %"struct.std::__1::__compressed_pair_elem.25" }
%"struct.std::__1::__compressed_pair_elem.25" = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" = type { %union.anon }
%union.anon = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" = type { i8*, i64, i64 }
%"class.std::__1::map.29" = type { %"class.std::__1::__tree.30" }
%"class.std::__1::__tree.30" = type { %"class.std::__1::__tree_end_node"*, %"class.std::__1::__compressed_pair.31", %"class.std::__1::__compressed_pair.35" }
%"class.std::__1::__compressed_pair.31" = type { %"struct.std::__1::__compressed_pair_elem" }
%"class.std::__1::__compressed_pair.35" = type { %"struct.std::__1::__compressed_pair_elem.2" }
%"class.std::__1::vector.43" = type { %"class.std::__1::__vector_base.44" }
%"class.std::__1::__vector_base.44" = type { %"struct.ots::CFFIndex"**, %"struct.ots::CFFIndex"**, %"class.std::__1::__compressed_pair.45" }
%"class.std::__1::__compressed_pair.45" = type { %"struct.std::__1::__compressed_pair_elem.46" }
%"struct.std::__1::__compressed_pair_elem.46" = type { %"struct.ots::CFFIndex"** }
%"class.std::__1::vector.50" = type { %"class.std::__1::__vector_base.51" }
%"class.std::__1::__vector_base.51" = type { i16*, i16*, %"class.std::__1::__compressed_pair.52" }
%"class.std::__1::__compressed_pair.52" = type { %"struct.std::__1::__compressed_pair_elem.53" }
%"struct.std::__1::__compressed_pair_elem.53" = type { i16* }
%"struct.ots::CFFIndex" = type <{ i32, i8, [3 x i8], %"class.std::__1::vector", i32, [4 x i8] }>
%"class.std::__1::vector" = type { %"class.std::__1::__vector_base" }
%"class.std::__1::__vector_base" = type { i32*, i32*, %"class.std::__1::__compressed_pair.38" }
%"class.std::__1::__compressed_pair.38" = type { %"struct.std::__1::__compressed_pair_elem.39" }
%"struct.std::__1::__compressed_pair_elem.39" = type { i32* }
%"class.ots::Buffer" = type { i8*, i64, i64 }
%"class.std::__1::stack" = type { %"class.std::__1::deque" }
%"class.std::__1::deque" = type { %"class.std::__1::__deque_base" }
%"class.std::__1::__deque_base" = type { %"struct.std::__1::__split_buffer", i64, %"class.std::__1::__compressed_pair.62" }
%"struct.std::__1::__split_buffer" = type { i32**, i32**, i32**, %"class.std::__1::__compressed_pair.57" }
%"class.std::__1::__compressed_pair.57" = type { %"struct.std::__1::__compressed_pair_elem.58" }
%"struct.std::__1::__compressed_pair_elem.58" = type { i32** }
%"class.std::__1::__compressed_pair.62" = type { %"struct.std::__1::__compressed_pair_elem.2" }
%"class.std::__1::__tree_node" = type { %"class.std::__1::__tree_node_base.base", [3 x i8], %"struct.std::__1::__value_type", [4 x i8] }
%"class.std::__1::__tree_node_base.base" = type <{ %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_end_node"*, i8 }>
%"struct.std::__1::__value_type" = type { %"struct.std::__1::pair" }
%"struct.std::__1::pair" = type <{ i32, i16, [2 x i8] }>
%"struct.std::__1::__split_buffer.66" = type { i32**, i32**, i32**, %"class.std::__1::__compressed_pair.67" }
%"class.std::__1::__compressed_pair.67" = type { %"struct.std::__1::__compressed_pair_elem.58", %"struct.std::__1::__compressed_pair_elem.68" }
%"struct.std::__1::__compressed_pair_elem.68" = type { %"class.std::__1::allocator.60"* }
%"class.std::__1::allocator.60" = type { i8 }

$_ZNSt3__15dequeIiNS_9allocatorIiEEE19__add_back_capacityEv = comdat any

$_ZNSt3__114__split_bufferIPiNS_9allocatorIS1_EEE9push_backEOS1_ = comdat any

$_ZNSt3__114__split_bufferIPiNS_9allocatorIS1_EEE10push_frontEOS1_ = comdat any

$_ZNSt3__114__split_bufferIPiRNS_9allocatorIS1_EEE10push_frontERKS1_ = comdat any

@.str.1 = private unnamed_addr constant [35 x i8] c"CFF: Undefined operator: %d (0x%x)\00", align 1

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZN3ots22ValidateCFFCharStringsERNS_11OpenTypeCFFERKNS_8CFFIndexEPNS_6BufferE(%"class.ots::OpenTypeCFF"* dereferenceable(168), %"struct.ots::CFFIndex"* nocapture dereferenceable(40), %"class.ots::Buffer"* nocapture) local_unnamed_addr #0 {
  %4 = alloca %"class.ots::Buffer", align 8
  %5 = alloca %"struct.ots::CFFIndex", align 8
  %6 = alloca %"class.std::__1::stack", align 8
  %7 = alloca i8, align 1
  %8 = alloca i8, align 1
  %9 = alloca i64, align 8
  %10 = getelementptr inbounds %"class.ots::OpenTypeCFF", %"class.ots::OpenTypeCFF"* %0, i64 0, i32 5
  %11 = load %"struct.ots::CFFIndex"*, %"struct.ots::CFFIndex"** %10, align 8
  %12 = getelementptr inbounds %"struct.ots::CFFIndex", %"struct.ots::CFFIndex"* %11, i64 0, i32 3
  %13 = getelementptr inbounds %"struct.ots::CFFIndex", %"struct.ots::CFFIndex"* %11, i64 0, i32 3, i32 0, i32 1
  %14 = bitcast i32** %13 to i64*
  %15 = load i64, i64* %14, align 8
  %16 = bitcast %"class.std::__1::vector"* %12 to i64*
  %17 = load i64, i64* %16, align 8
  %18 = icmp eq i64 %15, %17
  br i1 %18, label %265, label %19

19:                                               ; preds = %3
  %20 = getelementptr inbounds %"class.ots::OpenTypeCFF", %"class.ots::OpenTypeCFF"* %0, i64 0, i32 1
  %21 = load i8, i8* %20, align 1
  %22 = icmp eq i8 %21, 2
  %23 = zext i1 %22 to i8
  %24 = sub i64 %15, %17
  %25 = ashr exact i64 %24, 2
  %26 = icmp ugt i64 %25, 1
  br i1 %26, label %27, label %265

27:                                               ; preds = %19
  %28 = getelementptr inbounds %"class.ots::Buffer", %"class.ots::Buffer"* %2, i64 0, i32 2
  %29 = getelementptr inbounds %"class.ots::Buffer", %"class.ots::Buffer"* %2, i64 0, i32 1
  %30 = bitcast %"class.ots::Buffer"* %4 to i8*
  %31 = getelementptr inbounds %"class.ots::Buffer", %"class.ots::Buffer"* %4, i64 0, i32 0
  %32 = getelementptr inbounds %"class.ots::Buffer", %"class.ots::Buffer"* %4, i64 0, i32 1
  %33 = getelementptr inbounds %"class.ots::Buffer", %"class.ots::Buffer"* %4, i64 0, i32 2
  %34 = getelementptr inbounds %"class.ots::Buffer", %"class.ots::Buffer"* %2, i64 0, i32 0
  %35 = getelementptr inbounds %"class.ots::OpenTypeCFF", %"class.ots::OpenTypeCFF"* %0, i64 0, i32 4, i32 0, i32 2, i32 0, i32 0
  %36 = getelementptr inbounds %"class.ots::OpenTypeCFF", %"class.ots::OpenTypeCFF"* %0, i64 0, i32 6, i32 0, i32 0
  %37 = getelementptr inbounds %"class.ots::OpenTypeCFF", %"class.ots::OpenTypeCFF"* %0, i64 0, i32 6, i32 0, i32 1
  %38 = getelementptr inbounds %"class.ots::OpenTypeCFF", %"class.ots::OpenTypeCFF"* %0, i64 0, i32 4, i32 0, i32 1, i32 0, i32 0
  %39 = bitcast %"class.std::__1::__tree_end_node"* %38 to %"class.std::__1::__tree_node"**
  %40 = getelementptr inbounds %"class.ots::OpenTypeCFF", %"class.ots::OpenTypeCFF"* %0, i64 0, i32 7
  %41 = getelementptr inbounds %"class.ots::OpenTypeCFF", %"class.ots::OpenTypeCFF"* %0, i64 0, i32 6
  %42 = bitcast %"struct.ots::CFFIndex"*** %37 to i64*
  %43 = bitcast %"class.std::__1::vector.43"* %41 to i64*
  %44 = bitcast %"struct.ots::CFFIndex"* %5 to i8*
  %45 = getelementptr inbounds %"struct.ots::CFFIndex", %"struct.ots::CFFIndex"* %5, i64 0, i32 0
  %46 = getelementptr inbounds %"struct.ots::CFFIndex", %"struct.ots::CFFIndex"* %5, i64 0, i32 1
  %47 = getelementptr inbounds %"struct.ots::CFFIndex", %"struct.ots::CFFIndex"* %5, i64 0, i32 3
  %48 = bitcast %"class.std::__1::vector"* %47 to i8*
  %49 = ptrtoint %"struct.ots::CFFIndex"* %5 to i64
  %50 = bitcast %"class.std::__1::stack"* %6 to i8*
  %51 = getelementptr inbounds %"class.std::__1::stack", %"class.std::__1::stack"* %6, i64 0, i32 0, i32 0, i32 0, i32 0
  %52 = getelementptr inbounds %"class.std::__1::stack", %"class.std::__1::stack"* %6, i64 0, i32 0, i32 0, i32 0, i32 1
  %53 = getelementptr inbounds %"class.std::__1::stack", %"class.std::__1::stack"* %6, i64 0, i32 0, i32 0, i32 0, i32 2
  %54 = getelementptr inbounds %"class.std::__1::stack", %"class.std::__1::stack"* %6, i64 0, i32 0, i32 0, i32 1
  %55 = getelementptr inbounds %"class.std::__1::stack", %"class.std::__1::stack"* %6, i64 0, i32 0, i32 0, i32 2, i32 0, i32 0
  %56 = bitcast i64* %9 to i8*
  %57 = xor i1 %22, true
  %58 = bitcast i32*** %53 to i64*
  %59 = getelementptr inbounds %"struct.ots::CFFIndex", %"struct.ots::CFFIndex"* %5, i64 0, i32 3, i32 0, i32 0
  %60 = getelementptr inbounds %"struct.ots::CFFIndex", %"struct.ots::CFFIndex"* %5, i64 0, i32 3, i32 0, i32 1
  %61 = bitcast i32** %60 to i64*
  br label %69

62:                                               ; preds = %262
  %63 = zext i32 %264 to i64
  %64 = load i64, i64* %14, align 8
  %65 = load i64, i64* %16, align 8
  %66 = sub i64 %64, %65
  %67 = ashr exact i64 %66, 2
  %68 = icmp ugt i64 %67, %63
  br i1 %68, label %69, label %265

69:                                               ; preds = %27, %62
  %70 = phi i64 [ %17, %27 ], [ %65, %62 ]
  %71 = phi i64 [ 1, %27 ], [ %63, %62 ]
  %72 = phi i32 [ 1, %27 ], [ %264, %62 ]
  %73 = inttoptr i64 %70 to i32*
  %74 = getelementptr inbounds i32, i32* %73, i64 %71
  %75 = load i32, i32* %74, align 4
  %76 = add i32 %72, -1
  %77 = zext i32 %76 to i64
  %78 = getelementptr inbounds i32, i32* %73, i64 %77
  %79 = load i32, i32* %78, align 4
  %80 = sub i32 %75, %79
  %81 = zext i32 %80 to i64
  %82 = icmp ugt i32 %80, 65535
  br i1 %82, label %265, label %83

83:                                               ; preds = %69
  %84 = zext i32 %79 to i64
  store i64 %84, i64* %28, align 8
  %85 = add nuw nsw i64 %81, %84
  %86 = load i64, i64* %29, align 8
  %87 = icmp ugt i64 %85, %86
  %88 = sub i64 %86, %81
  %89 = icmp ult i64 %88, %84
  %90 = or i1 %87, %89
  br i1 %90, label %265, label %91

91:                                               ; preds = %83
  store i64 %85, i64* %28, align 8
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %30) #5
  %92 = load i8*, i8** %34, align 8
  %93 = getelementptr inbounds i8, i8* %92, i64 %84
  store i8* %93, i8** %31, align 8
  store i64 %81, i64* %32, align 8
  store i64 0, i64* %33, align 8
  %94 = load i8, i8* %20, align 1
  %95 = icmp eq i8 %94, 2
  %96 = load i64, i64* %35, align 8
  %97 = icmp eq i64 %96, 0
  br i1 %97, label %141, label %98

98:                                               ; preds = %91
  %99 = load %"struct.ots::CFFIndex"**, %"struct.ots::CFFIndex"*** %36, align 8
  %100 = load %"struct.ots::CFFIndex"**, %"struct.ots::CFFIndex"*** %37, align 8
  %101 = icmp eq %"struct.ots::CFFIndex"** %99, %100
  %102 = ptrtoint %"struct.ots::CFFIndex"** %100 to i64
  %103 = ptrtoint %"struct.ots::CFFIndex"** %99 to i64
  br i1 %101, label %141, label %104

104:                                              ; preds = %98
  %105 = and i32 %76, 65535
  %106 = load %"class.std::__1::__tree_node"*, %"class.std::__1::__tree_node"** %39, align 8
  %107 = icmp eq %"class.std::__1::__tree_node"* %106, null
  br i1 %107, label %261, label %108

108:                                              ; preds = %104, %108
  %109 = phi %"class.std::__1::__tree_end_node"* [ %119, %108 ], [ %38, %104 ]
  %110 = phi %"class.std::__1::__tree_node"* [ %120, %108 ], [ %106, %104 ]
  %111 = getelementptr inbounds %"class.std::__1::__tree_node", %"class.std::__1::__tree_node"* %110, i64 0, i32 2, i32 0, i32 0
  %112 = load i32, i32* %111, align 4
  %113 = icmp ult i32 %112, %105
  %114 = getelementptr inbounds %"class.std::__1::__tree_node", %"class.std::__1::__tree_node"* %110, i64 0, i32 0, i32 1
  %115 = bitcast %"class.std::__1::__tree_node_base"** %114 to %"class.std::__1::__tree_node"**
  %116 = getelementptr inbounds %"class.std::__1::__tree_node", %"class.std::__1::__tree_node"* %110, i64 0, i32 0, i32 0
  %117 = bitcast %"class.std::__1::__tree_node"* %110 to %"class.std::__1::__tree_node"**
  %118 = select i1 %113, %"class.std::__1::__tree_node"** %115, %"class.std::__1::__tree_node"** %117
  %119 = select i1 %113, %"class.std::__1::__tree_end_node"* %109, %"class.std::__1::__tree_end_node"* %116
  %120 = load %"class.std::__1::__tree_node"*, %"class.std::__1::__tree_node"** %118, align 8
  %121 = icmp eq %"class.std::__1::__tree_node"* %120, null
  br i1 %121, label %122, label %108

122:                                              ; preds = %108
  %123 = icmp eq %"class.std::__1::__tree_end_node"* %119, %38
  br i1 %123, label %261, label %124

124:                                              ; preds = %122
  %125 = bitcast %"class.std::__1::__tree_end_node"* %119 to %"class.std::__1::__tree_node"*
  %126 = getelementptr inbounds %"class.std::__1::__tree_node", %"class.std::__1::__tree_node"* %125, i64 0, i32 2, i32 0, i32 0
  %127 = load i32, i32* %126, align 4
  %128 = icmp ugt i32 %127, %105
  br i1 %128, label %261, label %129

129:                                              ; preds = %124
  %130 = getelementptr inbounds %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_end_node"* %119, i64 4
  %131 = bitcast %"class.std::__1::__tree_end_node"* %130 to i16*
  %132 = load i16, i16* %131, align 4
  %133 = zext i16 %132 to i64
  %134 = sub i64 %102, %103
  %135 = ashr exact i64 %134, 3
  %136 = icmp ugt i64 %135, %133
  br i1 %136, label %137, label %261

137:                                              ; preds = %129
  %138 = getelementptr inbounds %"struct.ots::CFFIndex"*, %"struct.ots::CFFIndex"** %99, i64 %133
  %139 = bitcast %"struct.ots::CFFIndex"** %138 to i64*
  %140 = load i64, i64* %139, align 8
  br label %155

141:                                              ; preds = %98, %91
  %142 = load %"struct.ots::CFFIndex"*, %"struct.ots::CFFIndex"** %40, align 8
  %143 = icmp eq %"struct.ots::CFFIndex"* %142, null
  br i1 %143, label %146, label %144

144:                                              ; preds = %141
  %145 = ptrtoint %"struct.ots::CFFIndex"* %142 to i64
  br label %155

146:                                              ; preds = %141
  br i1 %95, label %147, label %155

147:                                              ; preds = %146
  %148 = load i64, i64* %42, align 8
  %149 = load i64, i64* %43, align 8
  %150 = sub i64 %148, %149
  %151 = icmp eq i64 %150, 8
  br i1 %151, label %152, label %155

152:                                              ; preds = %147
  %153 = inttoptr i64 %149 to i64*
  %154 = load i64, i64* %153, align 8
  br label %155

155:                                              ; preds = %137, %144, %152, %147, %146
  %156 = phi i64 [ 0, %146 ], [ 0, %147 ], [ %140, %137 ], [ %145, %144 ], [ %154, %152 ]
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %44) #5
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %44, i8 -86, i64 40, i1 false)
  store i32 0, i32* %45, align 8
  store i8 0, i8* %46, align 4
  call void @llvm.memset.p0i8.i64(i8* align 8 %48, i8 0, i64 28, i1 false) #5
  %157 = icmp eq i64 %156, 0
  %158 = select i1 %157, i64 %49, i64 %156
  call void @llvm.lifetime.start.p0i8(i64 48, i8* nonnull %50) #5
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %50, i8 0, i64 48, i1 false) #5
  call void @llvm.lifetime.start.p0i8(i64 1, i8* nonnull %7) #5
  store i8 0, i8* %7, align 1
  call void @llvm.lifetime.start.p0i8(i64 1, i8* nonnull %8) #5
  store i8 %23, i8* %8, align 1
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %56) #5
  store i64 0, i64* %9, align 8
  %159 = inttoptr i64 %158 to %"struct.ots::CFFIndex"*
  %160 = call fastcc zeroext i1 @_ZN12_GLOBAL__N_117ExecuteCharStringERN3ots11OpenTypeCFFEmRKNS0_8CFFIndexES5_PNS0_6BufferES7_PNSt3__15stackIiNS8_5dequeIiNS8_9allocatorIiEEEEEEPbSG_Pmb(%"class.ots::OpenTypeCFF"* dereferenceable(168) %0, i64 0, %"struct.ots::CFFIndex"* dereferenceable(40) %1, %"struct.ots::CFFIndex"* dereferenceable(40) %159, %"class.ots::Buffer"* %2, %"class.ots::Buffer"* nonnull %4, %"class.std::__1::stack"* nonnull %6, i8* nonnull %7, i8* nonnull %8, i64* nonnull %9, i1 zeroext %22)
  br i1 %160, label %161, label %166

161:                                              ; preds = %155
  %162 = load i8, i8* %7, align 1
  %163 = icmp eq i8 %162, 0
  %164 = and i1 %163, %57
  %165 = zext i1 %164 to i32
  br label %166

166:                                              ; preds = %161, %155
  %167 = phi i32 [ 1, %155 ], [ %165, %161 ]
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %56) #5
  call void @llvm.lifetime.end.p0i8(i64 1, i8* nonnull %8) #5
  call void @llvm.lifetime.end.p0i8(i64 1, i8* nonnull %7) #5
  %168 = load i32**, i32*** %52, align 8
  %169 = load i64, i64* %54, align 8
  %170 = lshr i64 %169, 10
  %171 = getelementptr inbounds i32*, i32** %168, i64 %170
  %172 = load i32**, i32*** %53, align 8
  %173 = icmp eq i32** %172, %168
  %174 = ptrtoint i32** %172 to i64
  %175 = ptrtoint i32** %168 to i64
  br i1 %173, label %188, label %176

176:                                              ; preds = %166
  %177 = load i32*, i32** %171, align 8
  %178 = and i64 %169, 1023
  %179 = getelementptr inbounds i32, i32* %177, i64 %178
  %180 = load i64, i64* %55, align 8
  %181 = add i64 %180, %169
  %182 = lshr i64 %181, 10
  %183 = getelementptr inbounds i32*, i32** %168, i64 %182
  %184 = load i32*, i32** %183, align 8
  %185 = and i64 %181, 1023
  %186 = getelementptr inbounds i32, i32* %184, i64 %185
  %187 = icmp eq i32* %186, %179
  br i1 %187, label %188, label %192

188:                                              ; preds = %205, %166, %176
  store i64 0, i64* %55, align 8
  %189 = sub i64 %174, %175
  %190 = ashr exact i64 %189, 3
  %191 = icmp ugt i64 %190, 2
  br i1 %191, label %210, label %223

192:                                              ; preds = %176, %205
  %193 = phi i32* [ %208, %205 ], [ %179, %176 ]
  %194 = phi i32** [ %207, %205 ], [ %171, %176 ]
  %195 = getelementptr inbounds i32, i32* %193, i64 1
  %196 = ptrtoint i32* %195 to i64
  %197 = bitcast i32** %194 to i64*
  %198 = load i64, i64* %197, align 8
  %199 = sub i64 %196, %198
  %200 = icmp eq i64 %199, 4096
  br i1 %200, label %201, label %205

201:                                              ; preds = %192
  %202 = getelementptr inbounds i32*, i32** %194, i64 1
  %203 = bitcast i32** %202 to i64*
  %204 = load i64, i64* %203, align 8
  br label %205

205:                                              ; preds = %201, %192
  %206 = phi i64 [ %204, %201 ], [ %196, %192 ]
  %207 = phi i32** [ %202, %201 ], [ %194, %192 ]
  %208 = inttoptr i64 %206 to i32*
  %209 = icmp eq i32* %186, %208
  br i1 %209, label %188, label %192

210:                                              ; preds = %188, %210
  %211 = phi i32** [ %215, %210 ], [ %168, %188 ]
  %212 = bitcast i32** %211 to i8**
  %213 = load i8*, i8** %212, align 8
  call void @_ZdlPv(i8* %213) #6
  %214 = load i32**, i32*** %52, align 8
  %215 = getelementptr inbounds i32*, i32** %214, i64 1
  store i32** %215, i32*** %52, align 8
  %216 = load i64, i64* %58, align 8
  %217 = ptrtoint i32** %215 to i64
  %218 = sub i64 %216, %217
  %219 = ashr exact i64 %218, 3
  %220 = icmp ugt i64 %219, 2
  br i1 %220, label %210, label %221

221:                                              ; preds = %210
  %222 = inttoptr i64 %216 to i32**
  br label %223

223:                                              ; preds = %221, %188
  %224 = phi i32** [ %172, %188 ], [ %222, %221 ]
  %225 = phi i32** [ %168, %188 ], [ %215, %221 ]
  %226 = phi i64 [ %190, %188 ], [ %219, %221 ]
  switch i64 %226, label %230 [
    i64 1, label %228
    i64 2, label %227
  ]

227:                                              ; preds = %223
  br label %228

228:                                              ; preds = %223, %227
  %229 = phi i64 [ 1024, %227 ], [ 512, %223 ]
  store i64 %229, i64* %54, align 8
  br label %230

230:                                              ; preds = %228, %223
  %231 = icmp eq i32** %225, %224
  br i1 %231, label %250, label %232

232:                                              ; preds = %230, %232
  %233 = phi i32** [ %236, %232 ], [ %225, %230 ]
  %234 = bitcast i32** %233 to i8**
  %235 = load i8*, i8** %234, align 8
  call void @_ZdlPv(i8* %235) #6
  %236 = getelementptr inbounds i32*, i32** %233, i64 1
  %237 = icmp eq i32** %236, %224
  br i1 %237, label %238, label %232

238:                                              ; preds = %232
  %239 = load i32**, i32*** %52, align 8
  %240 = load i32**, i32*** %53, align 8
  %241 = icmp eq i32** %240, %239
  br i1 %241, label %250, label %242

242:                                              ; preds = %238
  %243 = ptrtoint i32** %239 to i64
  %244 = getelementptr i32*, i32** %240, i64 -1
  %245 = ptrtoint i32** %244 to i64
  %246 = sub i64 %245, %243
  %247 = lshr i64 %246, 3
  %248 = xor i64 %247, -1
  %249 = getelementptr i32*, i32** %240, i64 %248
  store i32** %249, i32*** %53, align 8
  br label %250

250:                                              ; preds = %242, %238, %230
  %251 = load i32**, i32*** %51, align 8
  %252 = icmp eq i32** %251, null
  br i1 %252, label %255, label %253

253:                                              ; preds = %250
  %254 = bitcast i32** %251 to i8*
  call void @_ZdlPv(i8* %254) #6
  br label %255

255:                                              ; preds = %250, %253
  call void @llvm.lifetime.end.p0i8(i64 48, i8* nonnull %50) #5
  %256 = load i32*, i32** %59, align 8
  %257 = icmp eq i32* %256, null
  br i1 %257, label %262, label %258

258:                                              ; preds = %255
  %259 = ptrtoint i32* %256 to i64
  store i64 %259, i64* %61, align 8
  %260 = bitcast i32* %256 to i8*
  call void @_ZdlPv(i8* %260) #6
  br label %262

261:                                              ; preds = %104, %122, %124, %129
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %30) #5
  br label %265

262:                                              ; preds = %258, %255
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %44) #5
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %30) #5
  %263 = icmp eq i32 %167, 0
  %264 = add i32 %72, 1
  br i1 %263, label %62, label %265

265:                                              ; preds = %62, %262, %69, %83, %19, %261, %3
  %266 = phi i1 [ false, %3 ], [ false, %261 ], [ true, %19 ], [ true, %62 ], [ false, %262 ], [ false, %69 ], [ false, %83 ]
  ret i1 %266
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

; Function Attrs: nounwind ssp uwtable
define internal fastcc zeroext i1 @_ZN12_GLOBAL__N_117ExecuteCharStringERN3ots11OpenTypeCFFEmRKNS0_8CFFIndexES5_PNS0_6BufferES7_PNSt3__15stackIiNS8_5dequeIiNS8_9allocatorIiEEEEEEPbSG_Pmb(%"class.ots::OpenTypeCFF"* dereferenceable(168), i64, %"struct.ots::CFFIndex"* nocapture dereferenceable(40), %"struct.ots::CFFIndex"* nocapture dereferenceable(40), %"class.ots::Buffer"* nocapture, %"class.ots::Buffer"* nocapture, %"class.std::__1::stack"*, i8* nocapture, i8*, i64* nocapture, i1 zeroext) unnamed_addr #0 {
  %12 = alloca %"class.ots::Buffer", align 8
  %13 = icmp ugt i64 %1, 10
  br i1 %13, label %1860, label %14

14:                                               ; preds = %11
  store i8 0, i8* %7, align 1
  %15 = getelementptr inbounds %"class.ots::Buffer", %"class.ots::Buffer"* %5, i64 0, i32 1
  %16 = load i64, i64* %15, align 8
  %17 = getelementptr inbounds %"class.ots::Buffer", %"class.ots::Buffer"* %5, i64 0, i32 2
  %18 = load i64, i64* %17, align 8
  %19 = icmp ult i64 %18, %16
  br i1 %19, label %20, label %1860

20:                                               ; preds = %14
  %21 = getelementptr inbounds %"class.ots::Buffer", %"class.ots::Buffer"* %5, i64 0, i32 0
  %22 = getelementptr inbounds %"class.std::__1::stack", %"class.std::__1::stack"* %6, i64 0, i32 0, i32 0, i32 0, i32 2
  %23 = bitcast i32*** %22 to i64*
  %24 = getelementptr inbounds %"class.std::__1::stack", %"class.std::__1::stack"* %6, i64 0, i32 0, i32 0, i32 0, i32 1
  %25 = bitcast i32*** %24 to i64*
  %26 = getelementptr inbounds %"class.std::__1::stack", %"class.std::__1::stack"* %6, i64 0, i32 0, i32 0, i32 1
  %27 = getelementptr inbounds %"class.std::__1::stack", %"class.std::__1::stack"* %6, i64 0, i32 0, i32 0, i32 2, i32 0, i32 0
  %28 = getelementptr inbounds %"class.std::__1::stack", %"class.std::__1::stack"* %6, i64 0, i32 0
  %29 = getelementptr inbounds %"class.ots::OpenTypeCFF", %"class.ots::OpenTypeCFF"* %0, i64 0, i32 0, i32 3
  %30 = xor i1 %10, true
  %31 = getelementptr inbounds %"class.ots::OpenTypeCFF", %"class.ots::OpenTypeCFF"* %0, i64 0, i32 8
  %32 = getelementptr inbounds %"class.ots::OpenTypeCFF", %"class.ots::OpenTypeCFF"* %0, i64 0, i32 8, i32 0, i32 1
  %33 = bitcast i16** %32 to i64*
  %34 = bitcast %"class.std::__1::vector.50"* %31 to i64*
  %35 = getelementptr inbounds %"class.ots::Buffer", %"class.ots::Buffer"* %4, i64 0, i32 2
  %36 = getelementptr inbounds %"class.ots::Buffer", %"class.ots::Buffer"* %4, i64 0, i32 1
  %37 = bitcast %"class.ots::Buffer"* %12 to i8*
  %38 = getelementptr inbounds %"class.ots::Buffer", %"class.ots::Buffer"* %12, i64 0, i32 0
  %39 = getelementptr inbounds %"class.ots::Buffer", %"class.ots::Buffer"* %12, i64 0, i32 1
  %40 = getelementptr inbounds %"class.ots::Buffer", %"class.ots::Buffer"* %12, i64 0, i32 2
  %41 = getelementptr inbounds %"class.ots::Buffer", %"class.ots::Buffer"* %4, i64 0, i32 0
  %42 = add nuw nsw i64 %1, 1
  br label %43

43:                                               ; preds = %20, %1855
  %44 = phi i64 [ %18, %20 ], [ %1853, %1855 ]
  %45 = phi i8 [ 0, %20 ], [ %1850, %1855 ]
  %46 = phi i8 [ 0, %20 ], [ %1851, %1855 ]
  %47 = phi i32 [ 0, %20 ], [ %1852, %1855 ]
  %48 = phi i64 [ %16, %20 ], [ %1856, %1855 ]
  %49 = add nuw i64 %44, 1
  %50 = load i8*, i8** %21, align 8
  %51 = getelementptr inbounds i8, i8* %50, i64 %44
  %52 = load i8, i8* %51, align 1
  store i64 %49, i64* %17, align 8
  %53 = zext i8 %52 to i32
  %54 = icmp ult i8 %52, 12
  br i1 %54, label %162, label %55

55:                                               ; preds = %43
  %56 = icmp eq i8 %52, 12
  br i1 %56, label %57, label %65

57:                                               ; preds = %55
  %58 = add i64 %44, 2
  %59 = icmp ugt i64 %58, %48
  br i1 %59, label %1858, label %60

60:                                               ; preds = %57
  %61 = getelementptr inbounds i8, i8* %50, i64 %49
  %62 = load i8, i8* %61, align 1
  store i64 %58, i64* %17, align 8
  %63 = zext i8 %62 to i32
  %64 = or i32 %63, 3072
  br label %162

65:                                               ; preds = %55
  %66 = icmp ult i8 %52, 28
  br i1 %66, label %162, label %67

67:                                               ; preds = %65
  %68 = icmp eq i8 %52, 28
  br i1 %68, label %69, label %84

69:                                               ; preds = %67
  %70 = add i64 %44, 2
  %71 = icmp ugt i64 %70, %48
  br i1 %71, label %1858, label %72

72:                                               ; preds = %69
  %73 = getelementptr inbounds i8, i8* %50, i64 %49
  %74 = load i8, i8* %73, align 1
  store i64 %70, i64* %17, align 8
  %75 = add i64 %44, 3
  %76 = icmp ugt i64 %75, %48
  br i1 %76, label %1858, label %77

77:                                               ; preds = %72
  %78 = getelementptr inbounds i8, i8* %50, i64 %70
  %79 = load i8, i8* %78, align 1
  store i64 %75, i64* %17, align 8
  %80 = zext i8 %74 to i32
  %81 = shl nuw nsw i32 %80, 8
  %82 = zext i8 %79 to i32
  %83 = or i32 %81, %82
  br label %122

84:                                               ; preds = %67
  %85 = icmp ult i8 %52, 32
  br i1 %85, label %162, label %86

86:                                               ; preds = %84
  %87 = icmp ult i8 %52, -9
  br i1 %87, label %88, label %90

88:                                               ; preds = %86
  %89 = add nsw i32 %53, -139
  br label %122

90:                                               ; preds = %86
  %91 = icmp ult i8 %52, -5
  br i1 %91, label %92, label %103

92:                                               ; preds = %90
  %93 = add i64 %44, 2
  %94 = icmp ugt i64 %93, %48
  br i1 %94, label %1858, label %95

95:                                               ; preds = %92
  %96 = getelementptr inbounds i8, i8* %50, i64 %49
  %97 = load i8, i8* %96, align 1
  store i64 %93, i64* %17, align 8
  %98 = shl nuw nsw i32 %53, 8
  %99 = add nsw i32 %98, -63232
  %100 = zext i8 %97 to i32
  %101 = or i32 %99, %100
  %102 = add nsw i32 %101, 108
  br label %122

103:                                              ; preds = %90
  %104 = icmp eq i8 %52, -1
  br i1 %104, label %115, label %105

105:                                              ; preds = %103
  %106 = add i64 %44, 2
  %107 = icmp ugt i64 %106, %48
  br i1 %107, label %1858, label %108

108:                                              ; preds = %105
  %109 = getelementptr inbounds i8, i8* %50, i64 %49
  %110 = load i8, i8* %109, align 1
  store i64 %106, i64* %17, align 8
  %111 = shl nuw nsw i32 %53, 8
  %112 = zext i8 %110 to i32
  %113 = sub nsw i32 64148, %111
  %114 = sub nsw i32 %113, %112
  br label %122

115:                                              ; preds = %103
  %116 = add i64 %44, 5
  %117 = icmp ugt i64 %116, %48
  %118 = add i64 %48, -4
  %119 = icmp uge i64 %44, %118
  %120 = or i1 %117, %119
  br i1 %120, label %1858, label %121

121:                                              ; preds = %115
  store i64 %116, i64* %17, align 8
  br label %122

122:                                              ; preds = %108, %121, %95, %88, %77
  %123 = phi i32 [ %83, %77 ], [ %89, %88 ], [ %102, %95 ], [ 2147483647, %121 ], [ %114, %108 ]
  %124 = load i64, i64* %23, align 8
  %125 = load i64, i64* %25, align 8
  %126 = sub i64 %124, %125
  %127 = icmp eq i64 %126, 0
  %128 = shl i64 %126, 7
  %129 = add i64 %128, -1
  %130 = select i1 %127, i64 0, i64 %129
  %131 = load i64, i64* %26, align 8
  %132 = load i64, i64* %27, align 8
  %133 = add i64 %132, %131
  %134 = icmp eq i64 %130, %133
  %135 = inttoptr i64 %125 to i32**
  %136 = inttoptr i64 %124 to i32**
  br i1 %134, label %137, label %143

137:                                              ; preds = %122
  tail call void @_ZNSt3__15dequeIiNS_9allocatorIiEEE19__add_back_capacityEv(%"class.std::__1::deque"* %28) #5
  %138 = load i64, i64* %27, align 8
  %139 = load i64, i64* %26, align 8
  %140 = load i32**, i32*** %24, align 8
  %141 = load i32**, i32*** %22, align 8
  %142 = add i64 %139, %138
  br label %143

143:                                              ; preds = %137, %122
  %144 = phi i64 [ %142, %137 ], [ %133, %122 ]
  %145 = phi i32** [ %141, %137 ], [ %136, %122 ]
  %146 = phi i32** [ %140, %137 ], [ %135, %122 ]
  %147 = icmp eq i32** %145, %146
  br i1 %147, label %154, label %148

148:                                              ; preds = %143
  %149 = lshr i64 %144, 10
  %150 = getelementptr inbounds i32*, i32** %146, i64 %149
  %151 = load i32*, i32** %150, align 8
  %152 = and i64 %144, 1023
  %153 = getelementptr inbounds i32, i32* %151, i64 %152
  br label %154

154:                                              ; preds = %143, %148
  %155 = phi i32* [ %153, %148 ], [ null, %143 ]
  store i32 %123, i32* %155, align 4
  %156 = load i64, i64* %27, align 8
  %157 = add i64 %156, 1
  store i64 %157, i64* %27, align 8
  br i1 %10, label %158, label %160

158:                                              ; preds = %154
  %159 = icmp ugt i64 %157, 513
  br i1 %159, label %1858, label %1849

160:                                              ; preds = %154
  %161 = icmp ugt i64 %157, 48
  br i1 %161, label %1858, label %1849

162:                                              ; preds = %84, %65, %43, %60
  %163 = phi i32 [ %53, %84 ], [ %53, %65 ], [ %53, %43 ], [ %64, %60 ]
  %164 = load %"struct.ots::Font"*, %"struct.ots::Font"** %29, align 8
  %165 = load i64, i64* %27, align 8
  br i1 %10, label %166, label %167

166:                                              ; preds = %162
  switch i32 %163, label %167 [
    i32 11, label %1858
    i32 14, label %1858
    i32 3081, label %1858
    i32 3082, label %1858
    i32 3083, label %1858
    i32 3084, label %1858
    i32 3086, label %1858
    i32 3095, label %1858
    i32 3096, label %1858
    i32 3098, label %1858
    i32 3090, label %1858
    i32 3100, label %1858
    i32 3101, label %1858
    i32 3102, label %1858
    i32 3099, label %1858
    i32 3092, label %1858
    i32 3093, label %1858
    i32 3072, label %1858
    i32 3075, label %1858
    i32 3076, label %1858
    i32 3077, label %1858
    i32 3087, label %1858
    i32 3094, label %1858
  ]

167:                                              ; preds = %166, %162
  switch i32 %163, label %1829 [
    i32 10, label %168
    i32 29, label %168
    i32 11, label %1860
    i32 14, label %246
    i32 15, label %247
    i32 16, label %302
    i32 1, label %373
    i32 3, label %373
    i32 18, label %373
    i32 23, label %373
    i32 21, label %421
    i32 4, label %462
    i32 22, label %462
    i32 19, label %503
    i32 20, label %503
    i32 5, label %570
    i32 6, label %608
    i32 7, label %608
    i32 8, label %643
    i32 24, label %681
    i32 25, label %720
    i32 26, label %758
    i32 27, label %800
    i32 30, label %843
    i32 31, label %843
    i32 3072, label %900
    i32 3075, label %902
    i32 3076, label %902
    i32 3087, label %902
    i32 3082, label %902
    i32 3083, label %902
    i32 3077, label %992
    i32 3081, label %992
    i32 3086, label %992
    i32 3084, label %1056
    i32 3090, label %1146
    i32 3092, label %1858
    i32 3093, label %1858
    i32 3101, label %1858
    i32 3102, label %1858
    i32 3095, label %1858
    i32 3094, label %1169
    i32 3096, label %1311
    i32 3098, label %1401
    i32 3099, label %1465
    i32 3100, label %1566
    i32 3106, label %1689
    i32 3107, label %1724
    i32 3108, label %1759
    i32 3109, label %1794
  ]

168:                                              ; preds = %167, %167
  %169 = icmp eq i32 %163, 10
  %170 = select i1 %169, %"struct.ots::CFFIndex"* %3, %"struct.ots::CFFIndex"* %2
  %171 = icmp eq i64 %165, 0
  br i1 %171, label %1858, label %172

172:                                              ; preds = %168
  %173 = load i64, i64* %26, align 8
  %174 = add i64 %165, -1
  %175 = add i64 %173, %174
  %176 = load i32**, i32*** %24, align 8
  %177 = lshr i64 %175, 10
  %178 = getelementptr inbounds i32*, i32** %176, i64 %177
  %179 = load i32*, i32** %178, align 8
  %180 = and i64 %175, 1023
  %181 = getelementptr inbounds i32, i32* %179, i64 %180
  %182 = load i32, i32* %181, align 4
  store i64 %174, i64* %27, align 8
  %183 = load i64, i64* %23, align 8
  %184 = ptrtoint i32** %176 to i64
  %185 = sub i64 %183, %184
  %186 = icmp eq i64 %185, 0
  %187 = shl i64 %185, 7
  %188 = add i64 %187, -1
  %189 = select i1 %186, i64 0, i64 %188
  %190 = sub i64 1, %165
  %191 = sub i64 %190, %173
  %192 = add i64 %191, %189
  %193 = icmp ult i64 %192, 2048
  br i1 %193, label %201, label %194

194:                                              ; preds = %172
  %195 = inttoptr i64 %183 to i32**
  %196 = getelementptr inbounds i32*, i32** %195, i64 -1
  %197 = bitcast i32** %196 to i8**
  %198 = load i8*, i8** %197, align 8
  tail call void @_ZdlPv(i8* %198) #6
  %199 = load i32**, i32*** %22, align 8
  %200 = getelementptr i32*, i32** %199, i64 -1
  store i32** %200, i32*** %22, align 8
  br label %201

201:                                              ; preds = %194, %172
  %202 = icmp eq i32 %182, 2147483647
  br i1 %202, label %1858, label %203

203:                                              ; preds = %201
  %204 = getelementptr inbounds %"struct.ots::CFFIndex", %"struct.ots::CFFIndex"* %170, i64 0, i32 0
  %205 = load i32, i32* %204, align 8
  %206 = icmp ult i32 %205, 1240
  %207 = icmp ult i32 %205, 33900
  %208 = select i1 %207, i32 1131, i32 32768
  %209 = select i1 %206, i32 107, i32 %208
  %210 = add nsw i32 %209, %182
  %211 = icmp ugt i32 %210, 65535
  br i1 %211, label %1858, label %212

212:                                              ; preds = %203
  %213 = getelementptr inbounds %"struct.ots::CFFIndex", %"struct.ots::CFFIndex"* %170, i64 0, i32 3
  %214 = getelementptr inbounds %"struct.ots::CFFIndex", %"struct.ots::CFFIndex"* %170, i64 0, i32 3, i32 0, i32 1
  %215 = bitcast i32** %214 to i64*
  %216 = load i64, i64* %215, align 8
  %217 = bitcast %"class.std::__1::vector"* %213 to i64*
  %218 = load i64, i64* %217, align 8
  %219 = sub i64 %216, %218
  %220 = ashr exact i64 %219, 2
  %221 = add nuw nsw i32 %210, 1
  %222 = sext i32 %221 to i64
  %223 = icmp ugt i64 %220, %222
  %224 = inttoptr i64 %218 to i32*
  br i1 %223, label %225, label %1858

225:                                              ; preds = %212
  %226 = getelementptr inbounds i32, i32* %224, i64 %222
  %227 = load i32, i32* %226, align 4
  %228 = sext i32 %210 to i64
  %229 = getelementptr inbounds i32, i32* %224, i64 %228
  %230 = load i32, i32* %229, align 4
  %231 = sub i32 %227, %230
  %232 = zext i32 %231 to i64
  %233 = icmp ugt i32 %231, 65535
  br i1 %233, label %1858, label %234

234:                                              ; preds = %225
  %235 = zext i32 %230 to i64
  store i64 %235, i64* %35, align 8
  %236 = add nuw nsw i64 %232, %235
  %237 = load i64, i64* %36, align 8
  %238 = icmp ugt i64 %236, %237
  %239 = sub i64 %237, %232
  %240 = icmp ult i64 %239, %235
  %241 = or i1 %238, %240
  br i1 %241, label %1858, label %242

242:                                              ; preds = %234
  store i64 %236, i64* %35, align 8
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %37) #5
  %243 = load i8*, i8** %41, align 8
  %244 = getelementptr inbounds i8, i8* %243, i64 %235
  store i8* %244, i8** %38, align 8
  store i64 %232, i64* %39, align 8
  store i64 0, i64* %40, align 8
  %245 = call fastcc zeroext i1 @_ZN12_GLOBAL__N_117ExecuteCharStringERN3ots11OpenTypeCFFEmRKNS0_8CFFIndexES5_PNS0_6BufferES7_PNSt3__15stackIiNS8_5dequeIiNS8_9allocatorIiEEEEEEPbSG_Pmb(%"class.ots::OpenTypeCFF"* dereferenceable(168) %0, i64 %42, %"struct.ots::CFFIndex"* dereferenceable(40) %2, %"struct.ots::CFFIndex"* dereferenceable(40) %3, %"class.ots::Buffer"* %4, %"class.ots::Buffer"* nonnull %12, %"class.std::__1::stack"* %6, i8* %7, i8* %8, i64* %9, i1 zeroext %10) #5
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %37) #5
  br i1 %245, label %1840, label %1858

246:                                              ; preds = %167
  store i8 1, i8* %7, align 1
  store i8 1, i8* %8, align 1
  br label %1840

247:                                              ; preds = %167
  %248 = icmp eq i64 %165, 1
  %249 = and i1 %248, %10
  %250 = or i8 %46, %45
  %251 = icmp eq i8 %250, 0
  %252 = and i1 %251, %249
  br i1 %252, label %253, label %1858

253:                                              ; preds = %247
  %254 = load i64, i64* %26, align 8
  %255 = load i32**, i32*** %24, align 8
  %256 = lshr i64 %254, 10
  %257 = getelementptr inbounds i32*, i32** %255, i64 %256
  %258 = load i32*, i32** %257, align 8
  %259 = and i64 %254, 1023
  %260 = getelementptr inbounds i32, i32* %258, i64 %259
  %261 = load i32, i32* %260, align 4
  %262 = sext i32 %261 to i64
  %263 = load i64, i64* %33, align 8
  %264 = load i64, i64* %34, align 8
  %265 = sub i64 %263, %264
  %266 = ashr exact i64 %265, 1
  %267 = icmp ugt i64 %266, %262
  br i1 %267, label %268, label %1858

268:                                              ; preds = %253
  %269 = ptrtoint i32** %255 to i64
  %270 = load i64, i64* %23, align 8
  br label %271

271:                                              ; preds = %299, %268
  %272 = phi i64 [ %301, %299 ], [ %269, %268 ]
  %273 = phi i64 [ %297, %299 ], [ %270, %268 ]
  %274 = phi i64 [ %300, %299 ], [ %254, %268 ]
  %275 = phi i64 [ %296, %299 ], [ 1, %268 ]
  %276 = add i64 %275, -1
  store i64 %276, i64* %27, align 8
  %277 = sub i64 %273, %272
  %278 = icmp eq i64 %277, 0
  %279 = shl i64 %277, 7
  %280 = add i64 %279, -1
  %281 = select i1 %278, i64 0, i64 %280
  %282 = sub i64 1, %275
  %283 = sub i64 %282, %274
  %284 = add i64 %283, %281
  %285 = icmp ult i64 %284, 2048
  br i1 %285, label %295, label %286

286:                                              ; preds = %271
  %287 = inttoptr i64 %273 to i32**
  %288 = getelementptr inbounds i32*, i32** %287, i64 -1
  %289 = bitcast i32** %288 to i8**
  %290 = load i8*, i8** %289, align 8
  tail call void @_ZdlPv(i8* %290) #6
  %291 = load i32**, i32*** %22, align 8
  %292 = getelementptr i32*, i32** %291, i64 -1
  store i32** %292, i32*** %22, align 8
  %293 = ptrtoint i32** %292 to i64
  %294 = load i64, i64* %27, align 8
  br label %295

295:                                              ; preds = %286, %271
  %296 = phi i64 [ %294, %286 ], [ %276, %271 ]
  %297 = phi i64 [ %293, %286 ], [ %273, %271 ]
  %298 = icmp eq i64 %296, 0
  br i1 %298, label %1840, label %299

299:                                              ; preds = %295
  %300 = load i64, i64* %26, align 8
  %301 = load i64, i64* %25, align 8
  br label %271

302:                                              ; preds = %167
  %303 = icmp eq i64 %165, 0
  %304 = or i1 %303, %30
  br i1 %304, label %1858, label %305

305:                                              ; preds = %302
  %306 = sext i32 %47 to i64
  %307 = load i64, i64* %33, align 8
  %308 = load i64, i64* %34, align 8
  %309 = sub i64 %307, %308
  %310 = ashr exact i64 %309, 1
  %311 = icmp ugt i64 %310, %306
  br i1 %311, label %312, label %1858

312:                                              ; preds = %305
  %313 = inttoptr i64 %308 to i16*
  %314 = getelementptr inbounds i16, i16* %313, i64 %306
  %315 = load i16, i16* %314, align 2
  %316 = load i64, i64* %26, align 8
  %317 = add i64 %165, -1
  %318 = add i64 %317, %316
  %319 = load i32**, i32*** %24, align 8
  %320 = lshr i64 %318, 10
  %321 = getelementptr inbounds i32*, i32** %319, i64 %320
  %322 = load i32*, i32** %321, align 8
  %323 = and i64 %318, 1023
  %324 = getelementptr inbounds i32, i32* %322, i64 %323
  %325 = load i32, i32* %324, align 4
  %326 = and i32 %325, 65535
  %327 = zext i16 %315 to i32
  %328 = add nuw nsw i32 %327, 1
  %329 = mul nsw i32 %326, %328
  %330 = add nuw nsw i32 %329, 1
  %331 = zext i32 %330 to i64
  %332 = icmp ult i64 %165, %331
  %333 = ptrtoint i32** %319 to i64
  br i1 %332, label %1858, label %334

334:                                              ; preds = %312
  %335 = mul nuw nsw i32 %326, %327
  %336 = add nuw nsw i32 %335, 1
  %337 = zext i32 %336 to i64
  %338 = sub i64 %165, %337
  %339 = icmp ugt i64 %165, %338
  br i1 %339, label %340, label %1840

340:                                              ; preds = %334
  %341 = load i64, i64* %23, align 8
  br label %342

342:                                              ; preds = %370, %340
  %343 = phi i64 [ %372, %370 ], [ %333, %340 ]
  %344 = phi i64 [ %368, %370 ], [ %341, %340 ]
  %345 = phi i64 [ %371, %370 ], [ %316, %340 ]
  %346 = phi i64 [ %367, %370 ], [ %165, %340 ]
  %347 = add i64 %346, -1
  store i64 %347, i64* %27, align 8
  %348 = sub i64 %344, %343
  %349 = icmp eq i64 %348, 0
  %350 = shl i64 %348, 7
  %351 = add i64 %350, -1
  %352 = select i1 %349, i64 0, i64 %351
  %353 = sub i64 1, %346
  %354 = sub i64 %353, %345
  %355 = add i64 %354, %352
  %356 = icmp ult i64 %355, 2048
  br i1 %356, label %366, label %357

357:                                              ; preds = %342
  %358 = inttoptr i64 %344 to i32**
  %359 = getelementptr inbounds i32*, i32** %358, i64 -1
  %360 = bitcast i32** %359 to i8**
  %361 = load i8*, i8** %360, align 8
  tail call void @_ZdlPv(i8* %361) #6
  %362 = load i32**, i32*** %22, align 8
  %363 = getelementptr i32*, i32** %362, i64 -1
  store i32** %363, i32*** %22, align 8
  %364 = ptrtoint i32** %363 to i64
  %365 = load i64, i64* %27, align 8
  br label %366

366:                                              ; preds = %357, %342
  %367 = phi i64 [ %365, %357 ], [ %347, %342 ]
  %368 = phi i64 [ %364, %357 ], [ %344, %342 ]
  %369 = icmp ugt i64 %367, %338
  br i1 %369, label %370, label %1840

370:                                              ; preds = %366
  %371 = load i64, i64* %26, align 8
  %372 = load i64, i64* %25, align 8
  br label %342

373:                                              ; preds = %167, %167, %167, %167
  %374 = icmp ult i64 %165, 2
  br i1 %374, label %1858, label %375

375:                                              ; preds = %373
  %376 = and i64 %165, 1
  %377 = icmp eq i64 %376, 0
  br i1 %377, label %381, label %378

378:                                              ; preds = %375
  %379 = load i8, i8* %8, align 1, !range !2
  %380 = icmp eq i8 %379, 0
  br label %381

381:                                              ; preds = %378, %375
  %382 = phi i1 [ true, %375 ], [ %380, %378 ]
  %383 = lshr i64 %165, 1
  %384 = load i64, i64* %9, align 8
  %385 = add i64 %384, %383
  store i64 %385, i64* %9, align 8
  %386 = icmp ugt i64 %385, 96
  br i1 %386, label %1858, label %387

387:                                              ; preds = %381
  %388 = load i64, i64* %27, align 8
  %389 = icmp eq i64 %388, 0
  br i1 %389, label %420, label %390

390:                                              ; preds = %387
  %391 = load i64, i64* %23, align 8
  br label %392

392:                                              ; preds = %390, %416
  %393 = phi i64 [ %418, %416 ], [ %391, %390 ]
  %394 = phi i64 [ %417, %416 ], [ %388, %390 ]
  %395 = load i64, i64* %26, align 8
  %396 = add i64 %394, -1
  store i64 %396, i64* %27, align 8
  %397 = load i64, i64* %25, align 8
  %398 = sub i64 %393, %397
  %399 = icmp eq i64 %398, 0
  %400 = shl i64 %398, 7
  %401 = add i64 %400, -1
  %402 = select i1 %399, i64 0, i64 %401
  %403 = sub i64 1, %394
  %404 = sub i64 %403, %395
  %405 = add i64 %404, %402
  %406 = icmp ult i64 %405, 2048
  br i1 %406, label %416, label %407

407:                                              ; preds = %392
  %408 = inttoptr i64 %393 to i32**
  %409 = getelementptr inbounds i32*, i32** %408, i64 -1
  %410 = bitcast i32** %409 to i8**
  %411 = load i8*, i8** %410, align 8
  tail call void @_ZdlPv(i8* %411) #6
  %412 = load i32**, i32*** %22, align 8
  %413 = getelementptr i32*, i32** %412, i64 -1
  store i32** %413, i32*** %22, align 8
  %414 = ptrtoint i32** %413 to i64
  %415 = load i64, i64* %27, align 8
  br label %416

416:                                              ; preds = %407, %392
  %417 = phi i64 [ %415, %407 ], [ %396, %392 ]
  %418 = phi i64 [ %414, %407 ], [ %393, %392 ]
  %419 = icmp eq i64 %417, 0
  br i1 %419, label %420, label %392

420:                                              ; preds = %416, %387
  store i8 1, i8* %8, align 1
  br i1 %382, label %1840, label %1858

421:                                              ; preds = %167
  %422 = icmp eq i64 %165, 2
  br i1 %422, label %429, label %423

423:                                              ; preds = %421
  %424 = load i8, i8* %8, align 1, !range !2
  %425 = icmp eq i8 %424, 0
  %426 = icmp eq i64 %165, 3
  %427 = and i1 %426, %425
  %428 = icmp eq i64 %165, 0
  br i1 %428, label %460, label %429

429:                                              ; preds = %421, %423
  %430 = phi i1 [ %427, %423 ], [ true, %421 ]
  %431 = load i64, i64* %23, align 8
  br label %432

432:                                              ; preds = %429, %456
  %433 = phi i64 [ %458, %456 ], [ %431, %429 ]
  %434 = phi i64 [ %457, %456 ], [ %165, %429 ]
  %435 = load i64, i64* %26, align 8
  %436 = add i64 %434, -1
  store i64 %436, i64* %27, align 8
  %437 = load i64, i64* %25, align 8
  %438 = sub i64 %433, %437
  %439 = icmp eq i64 %438, 0
  %440 = shl i64 %438, 7
  %441 = add i64 %440, -1
  %442 = select i1 %439, i64 0, i64 %441
  %443 = sub i64 1, %434
  %444 = sub i64 %443, %435
  %445 = add i64 %444, %442
  %446 = icmp ult i64 %445, 2048
  br i1 %446, label %456, label %447

447:                                              ; preds = %432
  %448 = inttoptr i64 %433 to i32**
  %449 = getelementptr inbounds i32*, i32** %448, i64 -1
  %450 = bitcast i32** %449 to i8**
  %451 = load i8*, i8** %450, align 8
  tail call void @_ZdlPv(i8* %451) #6
  %452 = load i32**, i32*** %22, align 8
  %453 = getelementptr i32*, i32** %452, i64 -1
  store i32** %453, i32*** %22, align 8
  %454 = ptrtoint i32** %453 to i64
  %455 = load i64, i64* %27, align 8
  br label %456

456:                                              ; preds = %447, %432
  %457 = phi i64 [ %455, %447 ], [ %436, %432 ]
  %458 = phi i64 [ %454, %447 ], [ %433, %432 ]
  %459 = icmp eq i64 %457, 0
  br i1 %459, label %460, label %432

460:                                              ; preds = %456, %423
  %461 = phi i1 [ %427, %423 ], [ %430, %456 ]
  store i8 1, i8* %8, align 1
  br i1 %461, label %1840, label %1858

462:                                              ; preds = %167, %167
  %463 = icmp eq i64 %165, 1
  br i1 %463, label %470, label %464

464:                                              ; preds = %462
  %465 = load i8, i8* %8, align 1, !range !2
  %466 = icmp eq i8 %465, 0
  %467 = icmp eq i64 %165, 2
  %468 = and i1 %467, %466
  %469 = icmp eq i64 %165, 0
  br i1 %469, label %501, label %470

470:                                              ; preds = %462, %464
  %471 = phi i1 [ %468, %464 ], [ true, %462 ]
  %472 = load i64, i64* %23, align 8
  br label %473

473:                                              ; preds = %470, %497
  %474 = phi i64 [ %499, %497 ], [ %472, %470 ]
  %475 = phi i64 [ %498, %497 ], [ %165, %470 ]
  %476 = load i64, i64* %26, align 8
  %477 = add i64 %475, -1
  store i64 %477, i64* %27, align 8
  %478 = load i64, i64* %25, align 8
  %479 = sub i64 %474, %478
  %480 = icmp eq i64 %479, 0
  %481 = shl i64 %479, 7
  %482 = add i64 %481, -1
  %483 = select i1 %480, i64 0, i64 %482
  %484 = sub i64 1, %475
  %485 = sub i64 %484, %476
  %486 = add i64 %485, %483
  %487 = icmp ult i64 %486, 2048
  br i1 %487, label %497, label %488

488:                                              ; preds = %473
  %489 = inttoptr i64 %474 to i32**
  %490 = getelementptr inbounds i32*, i32** %489, i64 -1
  %491 = bitcast i32** %490 to i8**
  %492 = load i8*, i8** %491, align 8
  tail call void @_ZdlPv(i8* %492) #6
  %493 = load i32**, i32*** %22, align 8
  %494 = getelementptr i32*, i32** %493, i64 -1
  store i32** %494, i32*** %22, align 8
  %495 = ptrtoint i32** %494 to i64
  %496 = load i64, i64* %27, align 8
  br label %497

497:                                              ; preds = %488, %473
  %498 = phi i64 [ %496, %488 ], [ %477, %473 ]
  %499 = phi i64 [ %495, %488 ], [ %474, %473 ]
  %500 = icmp eq i64 %498, 0
  br i1 %500, label %501, label %473

501:                                              ; preds = %497, %464
  %502 = phi i1 [ %468, %464 ], [ %471, %497 ]
  store i8 1, i8* %8, align 1
  br i1 %502, label %1840, label %1858

503:                                              ; preds = %167, %167
  %504 = icmp eq i64 %165, 0
  br i1 %504, label %519, label %505

505:                                              ; preds = %503
  %506 = load i8, i8* %8, align 1, !range !2
  %507 = icmp eq i8 %506, 0
  %508 = icmp eq i64 %165, 1
  %509 = and i1 %508, %507
  br i1 %509, label %519, label %510

510:                                              ; preds = %505
  %511 = and i64 %165, 1
  %512 = icmp eq i64 %511, 0
  %513 = or i1 %512, %507
  br i1 %513, label %514, label %1858

514:                                              ; preds = %510
  %515 = lshr i64 %165, 1
  %516 = load i64, i64* %9, align 8
  %517 = add i64 %516, %515
  store i64 %517, i64* %9, align 8
  %518 = icmp ugt i64 %517, 96
  br i1 %518, label %1858, label %521

519:                                              ; preds = %503, %505
  %520 = load i64, i64* %9, align 8
  br label %521

521:                                              ; preds = %519, %514
  %522 = phi i64 [ %520, %519 ], [ %517, %514 ]
  %523 = icmp eq i64 %522, 0
  br i1 %523, label %1858, label %524

524:                                              ; preds = %521
  %525 = add i64 %522, 7
  %526 = lshr i64 %525, 3
  %527 = icmp ugt i64 %525, 8589934599
  br i1 %527, label %1858, label %528

528:                                              ; preds = %524
  %529 = load i64, i64* %17, align 8
  %530 = add i64 %529, %526
  %531 = load i64, i64* %15, align 8
  %532 = icmp ugt i64 %530, %531
  %533 = sub i64 %531, %526
  %534 = icmp ugt i64 %529, %533
  %535 = or i1 %532, %534
  br i1 %535, label %1858, label %536

536:                                              ; preds = %528
  store i64 %530, i64* %17, align 8
  %537 = load i64, i64* %27, align 8
  %538 = icmp eq i64 %537, 0
  br i1 %538, label %569, label %539

539:                                              ; preds = %536
  %540 = load i64, i64* %23, align 8
  br label %541

541:                                              ; preds = %539, %565
  %542 = phi i64 [ %567, %565 ], [ %540, %539 ]
  %543 = phi i64 [ %566, %565 ], [ %537, %539 ]
  %544 = load i64, i64* %26, align 8
  %545 = add i64 %543, -1
  store i64 %545, i64* %27, align 8
  %546 = load i64, i64* %25, align 8
  %547 = sub i64 %542, %546
  %548 = icmp eq i64 %547, 0
  %549 = shl i64 %547, 7
  %550 = add i64 %549, -1
  %551 = select i1 %548, i64 0, i64 %550
  %552 = sub i64 1, %543
  %553 = sub i64 %552, %544
  %554 = add i64 %553, %551
  %555 = icmp ult i64 %554, 2048
  br i1 %555, label %565, label %556

556:                                              ; preds = %541
  %557 = inttoptr i64 %542 to i32**
  %558 = getelementptr inbounds i32*, i32** %557, i64 -1
  %559 = bitcast i32** %558 to i8**
  %560 = load i8*, i8** %559, align 8
  tail call void @_ZdlPv(i8* %560) #6
  %561 = load i32**, i32*** %22, align 8
  %562 = getelementptr i32*, i32** %561, i64 -1
  store i32** %562, i32*** %22, align 8
  %563 = ptrtoint i32** %562 to i64
  %564 = load i64, i64* %27, align 8
  br label %565

565:                                              ; preds = %556, %541
  %566 = phi i64 [ %564, %556 ], [ %545, %541 ]
  %567 = phi i64 [ %563, %556 ], [ %542, %541 ]
  %568 = icmp eq i64 %566, 0
  br i1 %568, label %569, label %541

569:                                              ; preds = %565, %536
  store i8 1, i8* %8, align 1
  br label %1840

570:                                              ; preds = %167
  %571 = load i8, i8* %8, align 1, !range !2
  %572 = icmp ne i8 %571, 0
  %573 = icmp ugt i64 %165, 1
  %574 = and i1 %573, %572
  %575 = and i64 %165, 1
  %576 = icmp eq i64 %575, 0
  %577 = and i1 %576, %574
  br i1 %577, label %578, label %1858

578:                                              ; preds = %570
  %579 = load i64, i64* %23, align 8
  br label %580

580:                                              ; preds = %578, %604
  %581 = phi i64 [ %606, %604 ], [ %579, %578 ]
  %582 = phi i64 [ %605, %604 ], [ %165, %578 ]
  %583 = load i64, i64* %26, align 8
  %584 = add i64 %582, -1
  store i64 %584, i64* %27, align 8
  %585 = load i64, i64* %25, align 8
  %586 = sub i64 %581, %585
  %587 = icmp eq i64 %586, 0
  %588 = shl i64 %586, 7
  %589 = add i64 %588, -1
  %590 = select i1 %587, i64 0, i64 %589
  %591 = sub i64 1, %582
  %592 = sub i64 %591, %583
  %593 = add i64 %592, %590
  %594 = icmp ult i64 %593, 2048
  br i1 %594, label %604, label %595

595:                                              ; preds = %580
  %596 = inttoptr i64 %581 to i32**
  %597 = getelementptr inbounds i32*, i32** %596, i64 -1
  %598 = bitcast i32** %597 to i8**
  %599 = load i8*, i8** %598, align 8
  tail call void @_ZdlPv(i8* %599) #6
  %600 = load i32**, i32*** %22, align 8
  %601 = getelementptr i32*, i32** %600, i64 -1
  store i32** %601, i32*** %22, align 8
  %602 = ptrtoint i32** %601 to i64
  %603 = load i64, i64* %27, align 8
  br label %604

604:                                              ; preds = %595, %580
  %605 = phi i64 [ %603, %595 ], [ %584, %580 ]
  %606 = phi i64 [ %602, %595 ], [ %581, %580 ]
  %607 = icmp eq i64 %605, 0
  br i1 %607, label %1840, label %580

608:                                              ; preds = %167, %167
  %609 = load i8, i8* %8, align 1, !range !2
  %610 = icmp eq i8 %609, 0
  %611 = icmp eq i64 %165, 0
  %612 = or i1 %611, %610
  br i1 %612, label %1858, label %613

613:                                              ; preds = %608
  %614 = load i64, i64* %23, align 8
  br label %615

615:                                              ; preds = %613, %639
  %616 = phi i64 [ %641, %639 ], [ %614, %613 ]
  %617 = phi i64 [ %640, %639 ], [ %165, %613 ]
  %618 = load i64, i64* %26, align 8
  %619 = add i64 %617, -1
  store i64 %619, i64* %27, align 8
  %620 = load i64, i64* %25, align 8
  %621 = sub i64 %616, %620
  %622 = icmp eq i64 %621, 0
  %623 = shl i64 %621, 7
  %624 = add i64 %623, -1
  %625 = select i1 %622, i64 0, i64 %624
  %626 = sub i64 1, %617
  %627 = sub i64 %626, %618
  %628 = add i64 %627, %625
  %629 = icmp ult i64 %628, 2048
  br i1 %629, label %639, label %630

630:                                              ; preds = %615
  %631 = inttoptr i64 %616 to i32**
  %632 = getelementptr inbounds i32*, i32** %631, i64 -1
  %633 = bitcast i32** %632 to i8**
  %634 = load i8*, i8** %633, align 8
  tail call void @_ZdlPv(i8* %634) #6
  %635 = load i32**, i32*** %22, align 8
  %636 = getelementptr i32*, i32** %635, i64 -1
  store i32** %636, i32*** %22, align 8
  %637 = ptrtoint i32** %636 to i64
  %638 = load i64, i64* %27, align 8
  br label %639

639:                                              ; preds = %630, %615
  %640 = phi i64 [ %638, %630 ], [ %619, %615 ]
  %641 = phi i64 [ %637, %630 ], [ %616, %615 ]
  %642 = icmp eq i64 %640, 0
  br i1 %642, label %1840, label %615

643:                                              ; preds = %167
  %644 = load i8, i8* %8, align 1, !range !2
  %645 = icmp ne i8 %644, 0
  %646 = icmp ugt i64 %165, 5
  %647 = and i1 %646, %645
  %648 = urem i64 %165, 6
  %649 = icmp eq i64 %648, 0
  %650 = and i1 %649, %647
  br i1 %650, label %651, label %1858

651:                                              ; preds = %643
  %652 = load i64, i64* %23, align 8
  br label %653

653:                                              ; preds = %651, %677
  %654 = phi i64 [ %679, %677 ], [ %652, %651 ]
  %655 = phi i64 [ %678, %677 ], [ %165, %651 ]
  %656 = load i64, i64* %26, align 8
  %657 = add i64 %655, -1
  store i64 %657, i64* %27, align 8
  %658 = load i64, i64* %25, align 8
  %659 = sub i64 %654, %658
  %660 = icmp eq i64 %659, 0
  %661 = shl i64 %659, 7
  %662 = add i64 %661, -1
  %663 = select i1 %660, i64 0, i64 %662
  %664 = sub i64 1, %655
  %665 = sub i64 %664, %656
  %666 = add i64 %665, %663
  %667 = icmp ult i64 %666, 2048
  br i1 %667, label %677, label %668

668:                                              ; preds = %653
  %669 = inttoptr i64 %654 to i32**
  %670 = getelementptr inbounds i32*, i32** %669, i64 -1
  %671 = bitcast i32** %670 to i8**
  %672 = load i8*, i8** %671, align 8
  tail call void @_ZdlPv(i8* %672) #6
  %673 = load i32**, i32*** %22, align 8
  %674 = getelementptr i32*, i32** %673, i64 -1
  store i32** %674, i32*** %22, align 8
  %675 = ptrtoint i32** %674 to i64
  %676 = load i64, i64* %27, align 8
  br label %677

677:                                              ; preds = %668, %653
  %678 = phi i64 [ %676, %668 ], [ %657, %653 ]
  %679 = phi i64 [ %675, %668 ], [ %654, %653 ]
  %680 = icmp eq i64 %678, 0
  br i1 %680, label %1840, label %653

681:                                              ; preds = %167
  %682 = load i8, i8* %8, align 1, !range !2
  %683 = icmp eq i8 %682, 0
  %684 = icmp ult i64 %165, 8
  %685 = or i1 %684, %683
  br i1 %685, label %1858, label %686

686:                                              ; preds = %681
  %687 = add i64 %165, -2
  %688 = urem i64 %687, 6
  %689 = icmp eq i64 %688, 0
  br i1 %689, label %690, label %1858

690:                                              ; preds = %686
  %691 = load i64, i64* %23, align 8
  br label %692

692:                                              ; preds = %690, %716
  %693 = phi i64 [ %718, %716 ], [ %691, %690 ]
  %694 = phi i64 [ %717, %716 ], [ %165, %690 ]
  %695 = load i64, i64* %26, align 8
  %696 = add i64 %694, -1
  store i64 %696, i64* %27, align 8
  %697 = load i64, i64* %25, align 8
  %698 = sub i64 %693, %697
  %699 = icmp eq i64 %698, 0
  %700 = shl i64 %698, 7
  %701 = add i64 %700, -1
  %702 = select i1 %699, i64 0, i64 %701
  %703 = sub i64 1, %694
  %704 = sub i64 %703, %695
  %705 = add i64 %704, %702
  %706 = icmp ult i64 %705, 2048
  br i1 %706, label %716, label %707

707:                                              ; preds = %692
  %708 = inttoptr i64 %693 to i32**
  %709 = getelementptr inbounds i32*, i32** %708, i64 -1
  %710 = bitcast i32** %709 to i8**
  %711 = load i8*, i8** %710, align 8
  tail call void @_ZdlPv(i8* %711) #6
  %712 = load i32**, i32*** %22, align 8
  %713 = getelementptr i32*, i32** %712, i64 -1
  store i32** %713, i32*** %22, align 8
  %714 = ptrtoint i32** %713 to i64
  %715 = load i64, i64* %27, align 8
  br label %716

716:                                              ; preds = %707, %692
  %717 = phi i64 [ %715, %707 ], [ %696, %692 ]
  %718 = phi i64 [ %714, %707 ], [ %693, %692 ]
  %719 = icmp eq i64 %717, 0
  br i1 %719, label %1840, label %692

720:                                              ; preds = %167
  %721 = load i8, i8* %8, align 1, !range !2
  %722 = icmp ne i8 %721, 0
  %723 = icmp ugt i64 %165, 7
  %724 = and i1 %723, %722
  %725 = and i64 %165, 1
  %726 = icmp eq i64 %725, 0
  %727 = and i1 %726, %724
  br i1 %727, label %728, label %1858

728:                                              ; preds = %720
  %729 = load i64, i64* %23, align 8
  br label %730

730:                                              ; preds = %728, %754
  %731 = phi i64 [ %756, %754 ], [ %729, %728 ]
  %732 = phi i64 [ %755, %754 ], [ %165, %728 ]
  %733 = load i64, i64* %26, align 8
  %734 = add i64 %732, -1
  store i64 %734, i64* %27, align 8
  %735 = load i64, i64* %25, align 8
  %736 = sub i64 %731, %735
  %737 = icmp eq i64 %736, 0
  %738 = shl i64 %736, 7
  %739 = add i64 %738, -1
  %740 = select i1 %737, i64 0, i64 %739
  %741 = sub i64 1, %732
  %742 = sub i64 %741, %733
  %743 = add i64 %742, %740
  %744 = icmp ult i64 %743, 2048
  br i1 %744, label %754, label %745

745:                                              ; preds = %730
  %746 = inttoptr i64 %731 to i32**
  %747 = getelementptr inbounds i32*, i32** %746, i64 -1
  %748 = bitcast i32** %747 to i8**
  %749 = load i8*, i8** %748, align 8
  tail call void @_ZdlPv(i8* %749) #6
  %750 = load i32**, i32*** %22, align 8
  %751 = getelementptr i32*, i32** %750, i64 -1
  store i32** %751, i32*** %22, align 8
  %752 = ptrtoint i32** %751 to i64
  %753 = load i64, i64* %27, align 8
  br label %754

754:                                              ; preds = %745, %730
  %755 = phi i64 [ %753, %745 ], [ %734, %730 ]
  %756 = phi i64 [ %752, %745 ], [ %731, %730 ]
  %757 = icmp eq i64 %755, 0
  br i1 %757, label %1840, label %730

758:                                              ; preds = %167
  %759 = load i8, i8* %8, align 1, !range !2
  %760 = icmp eq i8 %759, 0
  %761 = icmp ult i64 %165, 4
  %762 = or i1 %761, %760
  br i1 %762, label %1858, label %763

763:                                              ; preds = %758
  %764 = and i64 %165, 3
  %765 = icmp eq i64 %764, 0
  br i1 %765, label %770, label %766

766:                                              ; preds = %763
  %767 = add i64 %165, 3
  %768 = and i64 %767, 3
  %769 = icmp eq i64 %768, 0
  br i1 %769, label %770, label %1858

770:                                              ; preds = %763, %766
  %771 = load i64, i64* %23, align 8
  br label %772

772:                                              ; preds = %770, %796
  %773 = phi i64 [ %798, %796 ], [ %771, %770 ]
  %774 = phi i64 [ %797, %796 ], [ %165, %770 ]
  %775 = load i64, i64* %26, align 8
  %776 = add i64 %774, -1
  store i64 %776, i64* %27, align 8
  %777 = load i64, i64* %25, align 8
  %778 = sub i64 %773, %777
  %779 = icmp eq i64 %778, 0
  %780 = shl i64 %778, 7
  %781 = add i64 %780, -1
  %782 = select i1 %779, i64 0, i64 %781
  %783 = sub i64 1, %774
  %784 = sub i64 %783, %775
  %785 = add i64 %784, %782
  %786 = icmp ult i64 %785, 2048
  br i1 %786, label %796, label %787

787:                                              ; preds = %772
  %788 = inttoptr i64 %773 to i32**
  %789 = getelementptr inbounds i32*, i32** %788, i64 -1
  %790 = bitcast i32** %789 to i8**
  %791 = load i8*, i8** %790, align 8
  tail call void @_ZdlPv(i8* %791) #6
  %792 = load i32**, i32*** %22, align 8
  %793 = getelementptr i32*, i32** %792, i64 -1
  store i32** %793, i32*** %22, align 8
  %794 = ptrtoint i32** %793 to i64
  %795 = load i64, i64* %27, align 8
  br label %796

796:                                              ; preds = %787, %772
  %797 = phi i64 [ %795, %787 ], [ %776, %772 ]
  %798 = phi i64 [ %794, %787 ], [ %773, %772 ]
  %799 = icmp eq i64 %797, 0
  br i1 %799, label %1840, label %772

800:                                              ; preds = %167
  %801 = load i8, i8* %8, align 1, !range !2
  %802 = icmp eq i8 %801, 0
  %803 = icmp ult i64 %165, 4
  %804 = or i1 %803, %802
  br i1 %804, label %1858, label %805

805:                                              ; preds = %800
  %806 = and i64 %165, 3
  %807 = icmp eq i64 %806, 0
  br i1 %807, label %812, label %808

808:                                              ; preds = %805
  %809 = add i64 %165, 3
  %810 = and i64 %809, 3
  %811 = icmp eq i64 %810, 0
  br label %812

812:                                              ; preds = %805, %808
  %813 = phi i1 [ true, %805 ], [ %811, %808 ]
  %814 = load i64, i64* %23, align 8
  br label %815

815:                                              ; preds = %812, %839
  %816 = phi i64 [ %841, %839 ], [ %814, %812 ]
  %817 = phi i64 [ %840, %839 ], [ %165, %812 ]
  %818 = load i64, i64* %26, align 8
  %819 = add i64 %817, -1
  store i64 %819, i64* %27, align 8
  %820 = load i64, i64* %25, align 8
  %821 = sub i64 %816, %820
  %822 = icmp eq i64 %821, 0
  %823 = shl i64 %821, 7
  %824 = add i64 %823, -1
  %825 = select i1 %822, i64 0, i64 %824
  %826 = sub i64 1, %817
  %827 = sub i64 %826, %818
  %828 = add i64 %827, %825
  %829 = icmp ult i64 %828, 2048
  br i1 %829, label %839, label %830

830:                                              ; preds = %815
  %831 = inttoptr i64 %816 to i32**
  %832 = getelementptr inbounds i32*, i32** %831, i64 -1
  %833 = bitcast i32** %832 to i8**
  %834 = load i8*, i8** %833, align 8
  tail call void @_ZdlPv(i8* %834) #6
  %835 = load i32**, i32*** %22, align 8
  %836 = getelementptr i32*, i32** %835, i64 -1
  store i32** %836, i32*** %22, align 8
  %837 = ptrtoint i32** %836 to i64
  %838 = load i64, i64* %27, align 8
  br label %839

839:                                              ; preds = %830, %815
  %840 = phi i64 [ %838, %830 ], [ %819, %815 ]
  %841 = phi i64 [ %837, %830 ], [ %816, %815 ]
  %842 = icmp eq i64 %840, 0
  br i1 %842, label %1838, label %815

843:                                              ; preds = %167, %167
  %844 = load i8, i8* %8, align 1, !range !2
  %845 = icmp eq i8 %844, 0
  %846 = icmp ult i64 %165, 4
  %847 = or i1 %846, %845
  br i1 %847, label %1858, label %848

848:                                              ; preds = %843
  %849 = add i64 %165, 4
  %850 = and i64 %849, 7
  %851 = icmp eq i64 %850, 0
  br i1 %851, label %869, label %852

852:                                              ; preds = %848
  %853 = icmp ugt i64 %165, 4
  br i1 %853, label %854, label %869

854:                                              ; preds = %852
  %855 = add i64 %165, 3
  %856 = and i64 %855, 7
  %857 = icmp eq i64 %856, 0
  br i1 %857, label %869, label %858

858:                                              ; preds = %854
  %859 = icmp ugt i64 %165, 7
  %860 = and i64 %165, 7
  %861 = icmp eq i64 %860, 0
  %862 = and i1 %859, %861
  br i1 %862, label %869, label %863

863:                                              ; preds = %858
  %864 = icmp ugt i64 %165, 8
  br i1 %864, label %865, label %869

865:                                              ; preds = %863
  %866 = add i64 %165, 7
  %867 = and i64 %866, 7
  %868 = icmp eq i64 %867, 0
  br label %869

869:                                              ; preds = %848, %854, %858, %863, %865, %852
  %870 = phi i1 [ false, %863 ], [ true, %848 ], [ true, %854 ], [ true, %858 ], [ %868, %865 ], [ false, %852 ]
  %871 = load i64, i64* %23, align 8
  br label %872

872:                                              ; preds = %869, %896
  %873 = phi i64 [ %898, %896 ], [ %871, %869 ]
  %874 = phi i64 [ %897, %896 ], [ %165, %869 ]
  %875 = load i64, i64* %26, align 8
  %876 = add i64 %874, -1
  store i64 %876, i64* %27, align 8
  %877 = load i64, i64* %25, align 8
  %878 = sub i64 %873, %877
  %879 = icmp eq i64 %878, 0
  %880 = shl i64 %878, 7
  %881 = add i64 %880, -1
  %882 = select i1 %879, i64 0, i64 %881
  %883 = sub i64 1, %874
  %884 = sub i64 %883, %875
  %885 = add i64 %884, %882
  %886 = icmp ult i64 %885, 2048
  br i1 %886, label %896, label %887

887:                                              ; preds = %872
  %888 = inttoptr i64 %873 to i32**
  %889 = getelementptr inbounds i32*, i32** %888, i64 -1
  %890 = bitcast i32** %889 to i8**
  %891 = load i8*, i8** %890, align 8
  tail call void @_ZdlPv(i8* %891) #6
  %892 = load i32**, i32*** %22, align 8
  %893 = getelementptr i32*, i32** %892, i64 -1
  store i32** %893, i32*** %22, align 8
  %894 = ptrtoint i32** %893 to i64
  %895 = load i64, i64* %27, align 8
  br label %896

896:                                              ; preds = %887, %872
  %897 = phi i64 [ %895, %887 ], [ %876, %872 ]
  %898 = phi i64 [ %894, %887 ], [ %873, %872 ]
  %899 = icmp eq i64 %897, 0
  br i1 %899, label %1838, label %872

900:                                              ; preds = %167
  %901 = icmp eq i64 %165, 0
  br i1 %901, label %1840, label %1858

902:                                              ; preds = %167, %167, %167, %167, %167
  %903 = icmp ult i64 %165, 2
  br i1 %903, label %1858, label %904

904:                                              ; preds = %902
  %905 = load i64, i64* %26, align 8
  %906 = add i64 %165, -1
  store i64 %906, i64* %27, align 8
  %907 = load i64, i64* %23, align 8
  %908 = load i64, i64* %25, align 8
  %909 = sub i64 %907, %908
  %910 = icmp eq i64 %909, 0
  %911 = shl i64 %909, 7
  %912 = add i64 %911, -1
  %913 = select i1 %910, i64 0, i64 %912
  %914 = sub i64 1, %165
  %915 = sub i64 %914, %905
  %916 = add i64 %915, %913
  %917 = icmp ult i64 %916, 2048
  br i1 %917, label %932, label %918

918:                                              ; preds = %904
  %919 = inttoptr i64 %907 to i32**
  %920 = getelementptr inbounds i32*, i32** %919, i64 -1
  %921 = bitcast i32** %920 to i8**
  %922 = load i8*, i8** %921, align 8
  tail call void @_ZdlPv(i8* %922) #6
  %923 = load i32**, i32*** %22, align 8
  %924 = getelementptr i32*, i32** %923, i64 -1
  store i32** %924, i32*** %22, align 8
  %925 = load i64, i64* %27, align 8
  %926 = load i64, i64* %26, align 8
  %927 = ptrtoint i32** %924 to i64
  %928 = load i64, i64* %25, align 8
  %929 = sub i64 %927, %928
  %930 = shl i64 %929, 7
  %931 = add i64 %930, -1
  br label %932

932:                                              ; preds = %918, %904
  %933 = phi i64 [ %931, %918 ], [ %912, %904 ]
  %934 = phi i64 [ %929, %918 ], [ %909, %904 ]
  %935 = phi i64 [ %927, %918 ], [ %907, %904 ]
  %936 = phi i64 [ %928, %918 ], [ %908, %904 ]
  %937 = phi i64 [ %926, %918 ], [ %905, %904 ]
  %938 = phi i64 [ %925, %918 ], [ %906, %904 ]
  %939 = add i64 %938, -1
  store i64 %939, i64* %27, align 8
  %940 = icmp eq i64 %934, 0
  %941 = select i1 %940, i64 0, i64 %933
  %942 = sub i64 1, %938
  %943 = sub i64 %942, %937
  %944 = add i64 %943, %941
  %945 = icmp ult i64 %944, 2048
  br i1 %945, label %957, label %946

946:                                              ; preds = %932
  %947 = inttoptr i64 %935 to i32**
  %948 = getelementptr inbounds i32*, i32** %947, i64 -1
  %949 = bitcast i32** %948 to i8**
  %950 = load i8*, i8** %949, align 8
  tail call void @_ZdlPv(i8* %950) #6
  %951 = load i32**, i32*** %22, align 8
  %952 = getelementptr i32*, i32** %951, i64 -1
  store i32** %952, i32*** %22, align 8
  %953 = ptrtoint i32** %952 to i64
  %954 = load i64, i64* %25, align 8
  %955 = load i64, i64* %26, align 8
  %956 = load i64, i64* %27, align 8
  br label %957

957:                                              ; preds = %946, %932
  %958 = phi i64 [ %956, %946 ], [ %939, %932 ]
  %959 = phi i64 [ %955, %946 ], [ %937, %932 ]
  %960 = phi i64 [ %954, %946 ], [ %936, %932 ]
  %961 = phi i64 [ %953, %946 ], [ %935, %932 ]
  %962 = sub i64 %961, %960
  %963 = icmp eq i64 %962, 0
  %964 = shl i64 %962, 7
  %965 = add i64 %964, -1
  %966 = select i1 %963, i64 0, i64 %965
  %967 = add i64 %958, %959
  %968 = icmp eq i64 %966, %967
  %969 = inttoptr i64 %960 to i32**
  %970 = inttoptr i64 %961 to i32**
  br i1 %968, label %971, label %977

971:                                              ; preds = %957
  tail call void @_ZNSt3__15dequeIiNS_9allocatorIiEEE19__add_back_capacityEv(%"class.std::__1::deque"* %28) #5
  %972 = load i64, i64* %27, align 8
  %973 = load i64, i64* %26, align 8
  %974 = load i32**, i32*** %24, align 8
  %975 = load i32**, i32*** %22, align 8
  %976 = add i64 %973, %972
  br label %977

977:                                              ; preds = %971, %957
  %978 = phi i64 [ %976, %971 ], [ %967, %957 ]
  %979 = phi i32** [ %975, %971 ], [ %970, %957 ]
  %980 = phi i32** [ %974, %971 ], [ %969, %957 ]
  %981 = icmp eq i32** %979, %980
  br i1 %981, label %988, label %982

982:                                              ; preds = %977
  %983 = lshr i64 %978, 10
  %984 = getelementptr inbounds i32*, i32** %980, i64 %983
  %985 = load i32*, i32** %984, align 8
  %986 = and i64 %978, 1023
  %987 = getelementptr inbounds i32, i32* %985, i64 %986
  br label %988

988:                                              ; preds = %982, %977
  %989 = phi i32* [ %987, %982 ], [ null, %977 ]
  store i32 2147483647, i32* %989, align 4
  %990 = load i64, i64* %27, align 8
  %991 = add i64 %990, 1
  store i64 %991, i64* %27, align 8
  br label %1840

992:                                              ; preds = %167, %167, %167
  %993 = icmp eq i64 %165, 0
  br i1 %993, label %1858, label %994

994:                                              ; preds = %992
  %995 = load i64, i64* %26, align 8
  %996 = add i64 %165, -1
  store i64 %996, i64* %27, align 8
  %997 = load i64, i64* %23, align 8
  %998 = load i64, i64* %25, align 8
  %999 = sub i64 %997, %998
  %1000 = icmp eq i64 %999, 0
  %1001 = shl i64 %999, 7
  %1002 = add i64 %1001, -1
  %1003 = select i1 %1000, i64 0, i64 %1002
  %1004 = sub i64 1, %165
  %1005 = sub i64 %1004, %995
  %1006 = add i64 %1005, %1003
  %1007 = icmp ult i64 %1006, 2048
  br i1 %1007, label %1022, label %1008

1008:                                             ; preds = %994
  %1009 = inttoptr i64 %997 to i32**
  %1010 = getelementptr inbounds i32*, i32** %1009, i64 -1
  %1011 = bitcast i32** %1010 to i8**
  %1012 = load i8*, i8** %1011, align 8
  tail call void @_ZdlPv(i8* %1012) #6
  %1013 = load i32**, i32*** %22, align 8
  %1014 = getelementptr i32*, i32** %1013, i64 -1
  store i32** %1014, i32*** %22, align 8
  %1015 = ptrtoint i32** %1014 to i64
  %1016 = load i64, i64* %25, align 8
  %1017 = load i64, i64* %26, align 8
  %1018 = load i64, i64* %27, align 8
  %1019 = sub i64 %1015, %1016
  %1020 = shl i64 %1019, 7
  %1021 = add i64 %1020, -1
  br label %1022

1022:                                             ; preds = %1008, %994
  %1023 = phi i64 [ %1021, %1008 ], [ %1002, %994 ]
  %1024 = phi i64 [ %1019, %1008 ], [ %999, %994 ]
  %1025 = phi i64 [ %1018, %1008 ], [ %996, %994 ]
  %1026 = phi i64 [ %1017, %1008 ], [ %995, %994 ]
  %1027 = phi i64 [ %1016, %1008 ], [ %998, %994 ]
  %1028 = phi i64 [ %1015, %1008 ], [ %997, %994 ]
  %1029 = icmp eq i64 %1024, 0
  %1030 = select i1 %1029, i64 0, i64 %1023
  %1031 = add i64 %1025, %1026
  %1032 = icmp eq i64 %1030, %1031
  %1033 = inttoptr i64 %1027 to i32**
  %1034 = inttoptr i64 %1028 to i32**
  br i1 %1032, label %1035, label %1041

1035:                                             ; preds = %1022
  tail call void @_ZNSt3__15dequeIiNS_9allocatorIiEEE19__add_back_capacityEv(%"class.std::__1::deque"* %28) #5
  %1036 = load i64, i64* %27, align 8
  %1037 = load i64, i64* %26, align 8
  %1038 = load i32**, i32*** %24, align 8
  %1039 = load i32**, i32*** %22, align 8
  %1040 = add i64 %1037, %1036
  br label %1041

1041:                                             ; preds = %1035, %1022
  %1042 = phi i64 [ %1040, %1035 ], [ %1031, %1022 ]
  %1043 = phi i32** [ %1039, %1035 ], [ %1034, %1022 ]
  %1044 = phi i32** [ %1038, %1035 ], [ %1033, %1022 ]
  %1045 = icmp eq i32** %1043, %1044
  br i1 %1045, label %1052, label %1046

1046:                                             ; preds = %1041
  %1047 = lshr i64 %1042, 10
  %1048 = getelementptr inbounds i32*, i32** %1044, i64 %1047
  %1049 = load i32*, i32** %1048, align 8
  %1050 = and i64 %1042, 1023
  %1051 = getelementptr inbounds i32, i32* %1049, i64 %1050
  br label %1052

1052:                                             ; preds = %1046, %1041
  %1053 = phi i32* [ %1051, %1046 ], [ null, %1041 ]
  store i32 2147483647, i32* %1053, align 4
  %1054 = load i64, i64* %27, align 8
  %1055 = add i64 %1054, 1
  store i64 %1055, i64* %27, align 8
  br label %1840

1056:                                             ; preds = %167
  %1057 = icmp ult i64 %165, 2
  br i1 %1057, label %1858, label %1058

1058:                                             ; preds = %1056
  %1059 = load i64, i64* %26, align 8
  %1060 = add i64 %165, -1
  store i64 %1060, i64* %27, align 8
  %1061 = load i64, i64* %23, align 8
  %1062 = load i64, i64* %25, align 8
  %1063 = sub i64 %1061, %1062
  %1064 = icmp eq i64 %1063, 0
  %1065 = shl i64 %1063, 7
  %1066 = add i64 %1065, -1
  %1067 = select i1 %1064, i64 0, i64 %1066
  %1068 = sub i64 1, %165
  %1069 = sub i64 %1068, %1059
  %1070 = add i64 %1069, %1067
  %1071 = icmp ult i64 %1070, 2048
  br i1 %1071, label %1086, label %1072

1072:                                             ; preds = %1058
  %1073 = inttoptr i64 %1061 to i32**
  %1074 = getelementptr inbounds i32*, i32** %1073, i64 -1
  %1075 = bitcast i32** %1074 to i8**
  %1076 = load i8*, i8** %1075, align 8
  tail call void @_ZdlPv(i8* %1076) #6
  %1077 = load i32**, i32*** %22, align 8
  %1078 = getelementptr i32*, i32** %1077, i64 -1
  store i32** %1078, i32*** %22, align 8
  %1079 = load i64, i64* %27, align 8
  %1080 = load i64, i64* %26, align 8
  %1081 = ptrtoint i32** %1078 to i64
  %1082 = load i64, i64* %25, align 8
  %1083 = sub i64 %1081, %1082
  %1084 = shl i64 %1083, 7
  %1085 = add i64 %1084, -1
  br label %1086

1086:                                             ; preds = %1072, %1058
  %1087 = phi i64 [ %1085, %1072 ], [ %1066, %1058 ]
  %1088 = phi i64 [ %1083, %1072 ], [ %1063, %1058 ]
  %1089 = phi i64 [ %1081, %1072 ], [ %1061, %1058 ]
  %1090 = phi i64 [ %1082, %1072 ], [ %1062, %1058 ]
  %1091 = phi i64 [ %1080, %1072 ], [ %1059, %1058 ]
  %1092 = phi i64 [ %1079, %1072 ], [ %1060, %1058 ]
  %1093 = add i64 %1092, -1
  store i64 %1093, i64* %27, align 8
  %1094 = icmp eq i64 %1088, 0
  %1095 = select i1 %1094, i64 0, i64 %1087
  %1096 = sub i64 1, %1092
  %1097 = sub i64 %1096, %1091
  %1098 = add i64 %1097, %1095
  %1099 = icmp ult i64 %1098, 2048
  br i1 %1099, label %1111, label %1100

1100:                                             ; preds = %1086
  %1101 = inttoptr i64 %1089 to i32**
  %1102 = getelementptr inbounds i32*, i32** %1101, i64 -1
  %1103 = bitcast i32** %1102 to i8**
  %1104 = load i8*, i8** %1103, align 8
  tail call void @_ZdlPv(i8* %1104) #6
  %1105 = load i32**, i32*** %22, align 8
  %1106 = getelementptr i32*, i32** %1105, i64 -1
  store i32** %1106, i32*** %22, align 8
  %1107 = ptrtoint i32** %1106 to i64
  %1108 = load i64, i64* %25, align 8
  %1109 = load i64, i64* %26, align 8
  %1110 = load i64, i64* %27, align 8
  br label %1111

1111:                                             ; preds = %1100, %1086
  %1112 = phi i64 [ %1110, %1100 ], [ %1093, %1086 ]
  %1113 = phi i64 [ %1109, %1100 ], [ %1091, %1086 ]
  %1114 = phi i64 [ %1108, %1100 ], [ %1090, %1086 ]
  %1115 = phi i64 [ %1107, %1100 ], [ %1089, %1086 ]
  %1116 = sub i64 %1115, %1114
  %1117 = icmp eq i64 %1116, 0
  %1118 = shl i64 %1116, 7
  %1119 = add i64 %1118, -1
  %1120 = select i1 %1117, i64 0, i64 %1119
  %1121 = add i64 %1112, %1113
  %1122 = icmp eq i64 %1120, %1121
  %1123 = inttoptr i64 %1114 to i32**
  %1124 = inttoptr i64 %1115 to i32**
  br i1 %1122, label %1125, label %1131

1125:                                             ; preds = %1111
  tail call void @_ZNSt3__15dequeIiNS_9allocatorIiEEE19__add_back_capacityEv(%"class.std::__1::deque"* %28) #5
  %1126 = load i64, i64* %27, align 8
  %1127 = load i64, i64* %26, align 8
  %1128 = load i32**, i32*** %24, align 8
  %1129 = load i32**, i32*** %22, align 8
  %1130 = add i64 %1127, %1126
  br label %1131

1131:                                             ; preds = %1125, %1111
  %1132 = phi i64 [ %1130, %1125 ], [ %1121, %1111 ]
  %1133 = phi i32** [ %1129, %1125 ], [ %1124, %1111 ]
  %1134 = phi i32** [ %1128, %1125 ], [ %1123, %1111 ]
  %1135 = icmp eq i32** %1133, %1134
  br i1 %1135, label %1142, label %1136

1136:                                             ; preds = %1131
  %1137 = lshr i64 %1132, 10
  %1138 = getelementptr inbounds i32*, i32** %1134, i64 %1137
  %1139 = load i32*, i32** %1138, align 8
  %1140 = and i64 %1132, 1023
  %1141 = getelementptr inbounds i32, i32* %1139, i64 %1140
  br label %1142

1142:                                             ; preds = %1136, %1131
  %1143 = phi i32* [ %1141, %1136 ], [ null, %1131 ]
  store i32 2147483647, i32* %1143, align 4
  %1144 = load i64, i64* %27, align 8
  %1145 = add i64 %1144, 1
  store i64 %1145, i64* %27, align 8
  br label %1840

1146:                                             ; preds = %167
  %1147 = icmp eq i64 %165, 0
  br i1 %1147, label %1858, label %1148

1148:                                             ; preds = %1146
  %1149 = load i64, i64* %26, align 8
  %1150 = add i64 %165, -1
  store i64 %1150, i64* %27, align 8
  %1151 = load i64, i64* %23, align 8
  %1152 = load i64, i64* %25, align 8
  %1153 = sub i64 %1151, %1152
  %1154 = icmp eq i64 %1153, 0
  %1155 = shl i64 %1153, 7
  %1156 = add i64 %1155, -1
  %1157 = select i1 %1154, i64 0, i64 %1156
  %1158 = sub i64 1, %165
  %1159 = sub i64 %1158, %1149
  %1160 = add i64 %1159, %1157
  %1161 = icmp ult i64 %1160, 2048
  br i1 %1161, label %1840, label %1162

1162:                                             ; preds = %1148
  %1163 = inttoptr i64 %1151 to i32**
  %1164 = getelementptr inbounds i32*, i32** %1163, i64 -1
  %1165 = bitcast i32** %1164 to i8**
  %1166 = load i8*, i8** %1165, align 8
  tail call void @_ZdlPv(i8* %1166) #6
  %1167 = load i32**, i32*** %22, align 8
  %1168 = getelementptr i32*, i32** %1167, i64 -1
  store i32** %1168, i32*** %22, align 8
  br label %1840

1169:                                             ; preds = %167
  %1170 = icmp ult i64 %165, 4
  br i1 %1170, label %1858, label %1171

1171:                                             ; preds = %1169
  %1172 = load i64, i64* %26, align 8
  %1173 = add i64 %165, -1
  store i64 %1173, i64* %27, align 8
  %1174 = load i64, i64* %23, align 8
  %1175 = load i64, i64* %25, align 8
  %1176 = sub i64 %1174, %1175
  %1177 = icmp eq i64 %1176, 0
  %1178 = shl i64 %1176, 7
  %1179 = add i64 %1178, -1
  %1180 = select i1 %1177, i64 0, i64 %1179
  %1181 = sub i64 1, %165
  %1182 = sub i64 %1181, %1172
  %1183 = add i64 %1182, %1180
  %1184 = icmp ult i64 %1183, 2048
  br i1 %1184, label %1199, label %1185

1185:                                             ; preds = %1171
  %1186 = inttoptr i64 %1174 to i32**
  %1187 = getelementptr inbounds i32*, i32** %1186, i64 -1
  %1188 = bitcast i32** %1187 to i8**
  %1189 = load i8*, i8** %1188, align 8
  tail call void @_ZdlPv(i8* %1189) #6
  %1190 = load i32**, i32*** %22, align 8
  %1191 = getelementptr i32*, i32** %1190, i64 -1
  store i32** %1191, i32*** %22, align 8
  %1192 = load i64, i64* %27, align 8
  %1193 = load i64, i64* %26, align 8
  %1194 = ptrtoint i32** %1191 to i64
  %1195 = load i64, i64* %25, align 8
  %1196 = sub i64 %1194, %1195
  %1197 = shl i64 %1196, 7
  %1198 = add i64 %1197, -1
  br label %1199

1199:                                             ; preds = %1185, %1171
  %1200 = phi i64 [ %1198, %1185 ], [ %1179, %1171 ]
  %1201 = phi i64 [ %1196, %1185 ], [ %1176, %1171 ]
  %1202 = phi i64 [ %1194, %1185 ], [ %1174, %1171 ]
  %1203 = phi i64 [ %1195, %1185 ], [ %1175, %1171 ]
  %1204 = phi i64 [ %1193, %1185 ], [ %1172, %1171 ]
  %1205 = phi i64 [ %1192, %1185 ], [ %1173, %1171 ]
  %1206 = add i64 %1205, -1
  store i64 %1206, i64* %27, align 8
  %1207 = icmp eq i64 %1201, 0
  %1208 = select i1 %1207, i64 0, i64 %1200
  %1209 = sub i64 1, %1205
  %1210 = sub i64 %1209, %1204
  %1211 = add i64 %1210, %1208
  %1212 = icmp ult i64 %1211, 2048
  br i1 %1212, label %1224, label %1213

1213:                                             ; preds = %1199
  %1214 = inttoptr i64 %1202 to i32**
  %1215 = getelementptr inbounds i32*, i32** %1214, i64 -1
  %1216 = bitcast i32** %1215 to i8**
  %1217 = load i8*, i8** %1216, align 8
  tail call void @_ZdlPv(i8* %1217) #6
  %1218 = load i32**, i32*** %22, align 8
  %1219 = getelementptr i32*, i32** %1218, i64 -1
  store i32** %1219, i32*** %22, align 8
  %1220 = load i64, i64* %27, align 8
  %1221 = load i64, i64* %26, align 8
  %1222 = ptrtoint i32** %1219 to i64
  %1223 = load i64, i64* %25, align 8
  br label %1224

1224:                                             ; preds = %1213, %1199
  %1225 = phi i64 [ %1222, %1213 ], [ %1202, %1199 ]
  %1226 = phi i64 [ %1223, %1213 ], [ %1203, %1199 ]
  %1227 = phi i64 [ %1221, %1213 ], [ %1204, %1199 ]
  %1228 = phi i64 [ %1220, %1213 ], [ %1206, %1199 ]
  %1229 = add i64 %1228, -1
  store i64 %1229, i64* %27, align 8
  %1230 = sub i64 %1225, %1226
  %1231 = icmp eq i64 %1230, 0
  %1232 = shl i64 %1230, 7
  %1233 = add i64 %1232, -1
  %1234 = select i1 %1231, i64 0, i64 %1233
  %1235 = sub i64 1, %1228
  %1236 = sub i64 %1235, %1227
  %1237 = add i64 %1236, %1234
  %1238 = icmp ult i64 %1237, 2048
  br i1 %1238, label %1250, label %1239

1239:                                             ; preds = %1224
  %1240 = inttoptr i64 %1225 to i32**
  %1241 = getelementptr inbounds i32*, i32** %1240, i64 -1
  %1242 = bitcast i32** %1241 to i8**
  %1243 = load i8*, i8** %1242, align 8
  tail call void @_ZdlPv(i8* %1243) #6
  %1244 = load i32**, i32*** %22, align 8
  %1245 = getelementptr i32*, i32** %1244, i64 -1
  store i32** %1245, i32*** %22, align 8
  %1246 = load i64, i64* %27, align 8
  %1247 = load i64, i64* %26, align 8
  %1248 = ptrtoint i32** %1245 to i64
  %1249 = load i64, i64* %25, align 8
  br label %1250

1250:                                             ; preds = %1239, %1224
  %1251 = phi i64 [ %1248, %1239 ], [ %1225, %1224 ]
  %1252 = phi i64 [ %1249, %1239 ], [ %1226, %1224 ]
  %1253 = phi i64 [ %1247, %1239 ], [ %1227, %1224 ]
  %1254 = phi i64 [ %1246, %1239 ], [ %1229, %1224 ]
  %1255 = add i64 %1254, -1
  store i64 %1255, i64* %27, align 8
  %1256 = sub i64 %1251, %1252
  %1257 = icmp eq i64 %1256, 0
  %1258 = shl i64 %1256, 7
  %1259 = add i64 %1258, -1
  %1260 = select i1 %1257, i64 0, i64 %1259
  %1261 = sub i64 1, %1254
  %1262 = sub i64 %1261, %1253
  %1263 = add i64 %1262, %1260
  %1264 = icmp ult i64 %1263, 2048
  br i1 %1264, label %1276, label %1265

1265:                                             ; preds = %1250
  %1266 = inttoptr i64 %1251 to i32**
  %1267 = getelementptr inbounds i32*, i32** %1266, i64 -1
  %1268 = bitcast i32** %1267 to i8**
  %1269 = load i8*, i8** %1268, align 8
  tail call void @_ZdlPv(i8* %1269) #6
  %1270 = load i32**, i32*** %22, align 8
  %1271 = getelementptr i32*, i32** %1270, i64 -1
  store i32** %1271, i32*** %22, align 8
  %1272 = ptrtoint i32** %1271 to i64
  %1273 = load i64, i64* %25, align 8
  %1274 = load i64, i64* %26, align 8
  %1275 = load i64, i64* %27, align 8
  br label %1276

1276:                                             ; preds = %1265, %1250
  %1277 = phi i64 [ %1275, %1265 ], [ %1255, %1250 ]
  %1278 = phi i64 [ %1274, %1265 ], [ %1253, %1250 ]
  %1279 = phi i64 [ %1273, %1265 ], [ %1252, %1250 ]
  %1280 = phi i64 [ %1272, %1265 ], [ %1251, %1250 ]
  %1281 = sub i64 %1280, %1279
  %1282 = icmp eq i64 %1281, 0
  %1283 = shl i64 %1281, 7
  %1284 = add i64 %1283, -1
  %1285 = select i1 %1282, i64 0, i64 %1284
  %1286 = add i64 %1277, %1278
  %1287 = icmp eq i64 %1285, %1286
  %1288 = inttoptr i64 %1279 to i32**
  %1289 = inttoptr i64 %1280 to i32**
  br i1 %1287, label %1290, label %1296

1290:                                             ; preds = %1276
  tail call void @_ZNSt3__15dequeIiNS_9allocatorIiEEE19__add_back_capacityEv(%"class.std::__1::deque"* %28) #5
  %1291 = load i64, i64* %27, align 8
  %1292 = load i64, i64* %26, align 8
  %1293 = load i32**, i32*** %24, align 8
  %1294 = load i32**, i32*** %22, align 8
  %1295 = add i64 %1292, %1291
  br label %1296

1296:                                             ; preds = %1290, %1276
  %1297 = phi i64 [ %1295, %1290 ], [ %1286, %1276 ]
  %1298 = phi i32** [ %1294, %1290 ], [ %1289, %1276 ]
  %1299 = phi i32** [ %1293, %1290 ], [ %1288, %1276 ]
  %1300 = icmp eq i32** %1298, %1299
  br i1 %1300, label %1307, label %1301

1301:                                             ; preds = %1296
  %1302 = lshr i64 %1297, 10
  %1303 = getelementptr inbounds i32*, i32** %1299, i64 %1302
  %1304 = load i32*, i32** %1303, align 8
  %1305 = and i64 %1297, 1023
  %1306 = getelementptr inbounds i32, i32* %1304, i64 %1305
  br label %1307

1307:                                             ; preds = %1301, %1296
  %1308 = phi i32* [ %1306, %1301 ], [ null, %1296 ]
  store i32 2147483647, i32* %1308, align 4
  %1309 = load i64, i64* %27, align 8
  %1310 = add i64 %1309, 1
  store i64 %1310, i64* %27, align 8
  br label %1840

1311:                                             ; preds = %167
  %1312 = icmp ult i64 %165, 2
  br i1 %1312, label %1858, label %1313

1313:                                             ; preds = %1311
  %1314 = load i64, i64* %26, align 8
  %1315 = add i64 %165, -1
  store i64 %1315, i64* %27, align 8
  %1316 = load i64, i64* %23, align 8
  %1317 = load i64, i64* %25, align 8
  %1318 = sub i64 %1316, %1317
  %1319 = icmp eq i64 %1318, 0
  %1320 = shl i64 %1318, 7
  %1321 = add i64 %1320, -1
  %1322 = select i1 %1319, i64 0, i64 %1321
  %1323 = sub i64 1, %165
  %1324 = sub i64 %1323, %1314
  %1325 = add i64 %1324, %1322
  %1326 = icmp ult i64 %1325, 2048
  br i1 %1326, label %1341, label %1327

1327:                                             ; preds = %1313
  %1328 = inttoptr i64 %1316 to i32**
  %1329 = getelementptr inbounds i32*, i32** %1328, i64 -1
  %1330 = bitcast i32** %1329 to i8**
  %1331 = load i8*, i8** %1330, align 8
  tail call void @_ZdlPv(i8* %1331) #6
  %1332 = load i32**, i32*** %22, align 8
  %1333 = getelementptr i32*, i32** %1332, i64 -1
  store i32** %1333, i32*** %22, align 8
  %1334 = load i64, i64* %27, align 8
  %1335 = load i64, i64* %26, align 8
  %1336 = ptrtoint i32** %1333 to i64
  %1337 = load i64, i64* %25, align 8
  %1338 = sub i64 %1336, %1337
  %1339 = shl i64 %1338, 7
  %1340 = add i64 %1339, -1
  br label %1341

1341:                                             ; preds = %1327, %1313
  %1342 = phi i64 [ %1340, %1327 ], [ %1321, %1313 ]
  %1343 = phi i64 [ %1338, %1327 ], [ %1318, %1313 ]
  %1344 = phi i64 [ %1336, %1327 ], [ %1316, %1313 ]
  %1345 = phi i64 [ %1337, %1327 ], [ %1317, %1313 ]
  %1346 = phi i64 [ %1335, %1327 ], [ %1314, %1313 ]
  %1347 = phi i64 [ %1334, %1327 ], [ %1315, %1313 ]
  %1348 = add i64 %1347, -1
  store i64 %1348, i64* %27, align 8
  %1349 = icmp eq i64 %1343, 0
  %1350 = select i1 %1349, i64 0, i64 %1342
  %1351 = sub i64 1, %1347
  %1352 = sub i64 %1351, %1346
  %1353 = add i64 %1352, %1350
  %1354 = icmp ult i64 %1353, 2048
  br i1 %1354, label %1366, label %1355

1355:                                             ; preds = %1341
  %1356 = inttoptr i64 %1344 to i32**
  %1357 = getelementptr inbounds i32*, i32** %1356, i64 -1
  %1358 = bitcast i32** %1357 to i8**
  %1359 = load i8*, i8** %1358, align 8
  tail call void @_ZdlPv(i8* %1359) #6
  %1360 = load i32**, i32*** %22, align 8
  %1361 = getelementptr i32*, i32** %1360, i64 -1
  store i32** %1361, i32*** %22, align 8
  %1362 = ptrtoint i32** %1361 to i64
  %1363 = load i64, i64* %25, align 8
  %1364 = load i64, i64* %26, align 8
  %1365 = load i64, i64* %27, align 8
  br label %1366

1366:                                             ; preds = %1355, %1341
  %1367 = phi i64 [ %1365, %1355 ], [ %1348, %1341 ]
  %1368 = phi i64 [ %1364, %1355 ], [ %1346, %1341 ]
  %1369 = phi i64 [ %1363, %1355 ], [ %1345, %1341 ]
  %1370 = phi i64 [ %1362, %1355 ], [ %1344, %1341 ]
  %1371 = sub i64 %1370, %1369
  %1372 = icmp eq i64 %1371, 0
  %1373 = shl i64 %1371, 7
  %1374 = add i64 %1373, -1
  %1375 = select i1 %1372, i64 0, i64 %1374
  %1376 = add i64 %1367, %1368
  %1377 = icmp eq i64 %1375, %1376
  %1378 = inttoptr i64 %1369 to i32**
  %1379 = inttoptr i64 %1370 to i32**
  br i1 %1377, label %1380, label %1386

1380:                                             ; preds = %1366
  tail call void @_ZNSt3__15dequeIiNS_9allocatorIiEEE19__add_back_capacityEv(%"class.std::__1::deque"* %28) #5
  %1381 = load i64, i64* %27, align 8
  %1382 = load i64, i64* %26, align 8
  %1383 = load i32**, i32*** %24, align 8
  %1384 = load i32**, i32*** %22, align 8
  %1385 = add i64 %1382, %1381
  br label %1386

1386:                                             ; preds = %1380, %1366
  %1387 = phi i64 [ %1385, %1380 ], [ %1376, %1366 ]
  %1388 = phi i32** [ %1384, %1380 ], [ %1379, %1366 ]
  %1389 = phi i32** [ %1383, %1380 ], [ %1378, %1366 ]
  %1390 = icmp eq i32** %1388, %1389
  br i1 %1390, label %1397, label %1391

1391:                                             ; preds = %1386
  %1392 = lshr i64 %1387, 10
  %1393 = getelementptr inbounds i32*, i32** %1389, i64 %1392
  %1394 = load i32*, i32** %1393, align 8
  %1395 = and i64 %1387, 1023
  %1396 = getelementptr inbounds i32, i32* %1394, i64 %1395
  br label %1397

1397:                                             ; preds = %1391, %1386
  %1398 = phi i32* [ %1396, %1391 ], [ null, %1386 ]
  store i32 2147483647, i32* %1398, align 4
  %1399 = load i64, i64* %27, align 8
  %1400 = add i64 %1399, 1
  store i64 %1400, i64* %27, align 8
  br label %1840

1401:                                             ; preds = %167
  %1402 = icmp eq i64 %165, 0
  br i1 %1402, label %1858, label %1403

1403:                                             ; preds = %1401
  %1404 = load i64, i64* %26, align 8
  %1405 = add i64 %165, -1
  store i64 %1405, i64* %27, align 8
  %1406 = load i64, i64* %23, align 8
  %1407 = load i64, i64* %25, align 8
  %1408 = sub i64 %1406, %1407
  %1409 = icmp eq i64 %1408, 0
  %1410 = shl i64 %1408, 7
  %1411 = add i64 %1410, -1
  %1412 = select i1 %1409, i64 0, i64 %1411
  %1413 = sub i64 1, %165
  %1414 = sub i64 %1413, %1404
  %1415 = add i64 %1414, %1412
  %1416 = icmp ult i64 %1415, 2048
  br i1 %1416, label %1431, label %1417

1417:                                             ; preds = %1403
  %1418 = inttoptr i64 %1406 to i32**
  %1419 = getelementptr inbounds i32*, i32** %1418, i64 -1
  %1420 = bitcast i32** %1419 to i8**
  %1421 = load i8*, i8** %1420, align 8
  tail call void @_ZdlPv(i8* %1421) #6
  %1422 = load i32**, i32*** %22, align 8
  %1423 = getelementptr i32*, i32** %1422, i64 -1
  store i32** %1423, i32*** %22, align 8
  %1424 = ptrtoint i32** %1423 to i64
  %1425 = load i64, i64* %25, align 8
  %1426 = load i64, i64* %26, align 8
  %1427 = load i64, i64* %27, align 8
  %1428 = sub i64 %1424, %1425
  %1429 = shl i64 %1428, 7
  %1430 = add i64 %1429, -1
  br label %1431

1431:                                             ; preds = %1417, %1403
  %1432 = phi i64 [ %1430, %1417 ], [ %1411, %1403 ]
  %1433 = phi i64 [ %1428, %1417 ], [ %1408, %1403 ]
  %1434 = phi i64 [ %1427, %1417 ], [ %1405, %1403 ]
  %1435 = phi i64 [ %1426, %1417 ], [ %1404, %1403 ]
  %1436 = phi i64 [ %1425, %1417 ], [ %1407, %1403 ]
  %1437 = phi i64 [ %1424, %1417 ], [ %1406, %1403 ]
  %1438 = icmp eq i64 %1433, 0
  %1439 = select i1 %1438, i64 0, i64 %1432
  %1440 = add i64 %1434, %1435
  %1441 = icmp eq i64 %1439, %1440
  %1442 = inttoptr i64 %1436 to i32**
  %1443 = inttoptr i64 %1437 to i32**
  br i1 %1441, label %1444, label %1450

1444:                                             ; preds = %1431
  tail call void @_ZNSt3__15dequeIiNS_9allocatorIiEEE19__add_back_capacityEv(%"class.std::__1::deque"* %28) #5
  %1445 = load i64, i64* %27, align 8
  %1446 = load i64, i64* %26, align 8
  %1447 = load i32**, i32*** %24, align 8
  %1448 = load i32**, i32*** %22, align 8
  %1449 = add i64 %1446, %1445
  br label %1450

1450:                                             ; preds = %1444, %1431
  %1451 = phi i64 [ %1449, %1444 ], [ %1440, %1431 ]
  %1452 = phi i32** [ %1448, %1444 ], [ %1443, %1431 ]
  %1453 = phi i32** [ %1447, %1444 ], [ %1442, %1431 ]
  %1454 = icmp eq i32** %1452, %1453
  br i1 %1454, label %1461, label %1455

1455:                                             ; preds = %1450
  %1456 = lshr i64 %1451, 10
  %1457 = getelementptr inbounds i32*, i32** %1453, i64 %1456
  %1458 = load i32*, i32** %1457, align 8
  %1459 = and i64 %1451, 1023
  %1460 = getelementptr inbounds i32, i32* %1458, i64 %1459
  br label %1461

1461:                                             ; preds = %1455, %1450
  %1462 = phi i32* [ %1460, %1455 ], [ null, %1450 ]
  store i32 2147483647, i32* %1462, align 4
  %1463 = load i64, i64* %27, align 8
  %1464 = add i64 %1463, 1
  store i64 %1464, i64* %27, align 8
  br label %1840

1465:                                             ; preds = %167
  %1466 = icmp eq i64 %165, 0
  br i1 %1466, label %1858, label %1467

1467:                                             ; preds = %1465
  %1468 = load i64, i64* %26, align 8
  %1469 = add i64 %165, -1
  store i64 %1469, i64* %27, align 8
  %1470 = load i64, i64* %23, align 8
  %1471 = load i64, i64* %25, align 8
  %1472 = sub i64 %1470, %1471
  %1473 = icmp eq i64 %1472, 0
  %1474 = shl i64 %1472, 7
  %1475 = add i64 %1474, -1
  %1476 = select i1 %1473, i64 0, i64 %1475
  %1477 = sub i64 1, %165
  %1478 = sub i64 %1477, %1468
  %1479 = add i64 %1478, %1476
  %1480 = icmp ult i64 %1479, 2048
  br i1 %1480, label %1495, label %1481

1481:                                             ; preds = %1467
  %1482 = inttoptr i64 %1470 to i32**
  %1483 = getelementptr inbounds i32*, i32** %1482, i64 -1
  %1484 = bitcast i32** %1483 to i8**
  %1485 = load i8*, i8** %1484, align 8
  tail call void @_ZdlPv(i8* %1485) #6
  %1486 = load i32**, i32*** %22, align 8
  %1487 = getelementptr i32*, i32** %1486, i64 -1
  store i32** %1487, i32*** %22, align 8
  %1488 = ptrtoint i32** %1487 to i64
  %1489 = load i64, i64* %25, align 8
  %1490 = load i64, i64* %26, align 8
  %1491 = load i64, i64* %27, align 8
  %1492 = sub i64 %1488, %1489
  %1493 = shl i64 %1492, 7
  %1494 = add i64 %1493, -1
  br label %1495

1495:                                             ; preds = %1481, %1467
  %1496 = phi i64 [ %1494, %1481 ], [ %1475, %1467 ]
  %1497 = phi i64 [ %1492, %1481 ], [ %1472, %1467 ]
  %1498 = phi i64 [ %1491, %1481 ], [ %1469, %1467 ]
  %1499 = phi i64 [ %1490, %1481 ], [ %1468, %1467 ]
  %1500 = phi i64 [ %1489, %1481 ], [ %1471, %1467 ]
  %1501 = phi i64 [ %1488, %1481 ], [ %1470, %1467 ]
  %1502 = icmp eq i64 %1497, 0
  %1503 = select i1 %1502, i64 0, i64 %1496
  %1504 = add i64 %1498, %1499
  %1505 = icmp eq i64 %1503, %1504
  %1506 = inttoptr i64 %1500 to i32**
  %1507 = inttoptr i64 %1501 to i32**
  br i1 %1505, label %1508, label %1514

1508:                                             ; preds = %1495
  tail call void @_ZNSt3__15dequeIiNS_9allocatorIiEEE19__add_back_capacityEv(%"class.std::__1::deque"* %28) #5
  %1509 = load i64, i64* %27, align 8
  %1510 = load i64, i64* %26, align 8
  %1511 = load i32**, i32*** %24, align 8
  %1512 = load i32**, i32*** %22, align 8
  %1513 = add i64 %1510, %1509
  br label %1514

1514:                                             ; preds = %1508, %1495
  %1515 = phi i64 [ %1513, %1508 ], [ %1504, %1495 ]
  %1516 = phi i32** [ %1512, %1508 ], [ %1507, %1495 ]
  %1517 = phi i32** [ %1511, %1508 ], [ %1506, %1495 ]
  %1518 = icmp eq i32** %1516, %1517
  br i1 %1518, label %1525, label %1519

1519:                                             ; preds = %1514
  %1520 = lshr i64 %1515, 10
  %1521 = getelementptr inbounds i32*, i32** %1517, i64 %1520
  %1522 = load i32*, i32** %1521, align 8
  %1523 = and i64 %1515, 1023
  %1524 = getelementptr inbounds i32, i32* %1522, i64 %1523
  br label %1525

1525:                                             ; preds = %1519, %1514
  %1526 = phi i32* [ %1524, %1519 ], [ null, %1514 ]
  store i32 2147483647, i32* %1526, align 4
  %1527 = load i64, i64* %27, align 8
  %1528 = add i64 %1527, 1
  store i64 %1528, i64* %27, align 8
  %1529 = load i64, i64* %23, align 8
  %1530 = load i64, i64* %25, align 8
  %1531 = sub i64 %1529, %1530
  %1532 = icmp eq i64 %1531, 0
  %1533 = shl i64 %1531, 7
  %1534 = add i64 %1533, -1
  %1535 = select i1 %1532, i64 0, i64 %1534
  %1536 = load i64, i64* %26, align 8
  %1537 = add i64 %1536, %1528
  %1538 = icmp eq i64 %1535, %1537
  %1539 = inttoptr i64 %1530 to i32**
  %1540 = inttoptr i64 %1529 to i32**
  br i1 %1538, label %1541, label %1547

1541:                                             ; preds = %1525
  tail call void @_ZNSt3__15dequeIiNS_9allocatorIiEEE19__add_back_capacityEv(%"class.std::__1::deque"* %28) #5
  %1542 = load i64, i64* %27, align 8
  %1543 = load i64, i64* %26, align 8
  %1544 = load i32**, i32*** %24, align 8
  %1545 = load i32**, i32*** %22, align 8
  %1546 = add i64 %1543, %1542
  br label %1547

1547:                                             ; preds = %1541, %1525
  %1548 = phi i64 [ %1546, %1541 ], [ %1537, %1525 ]
  %1549 = phi i32** [ %1545, %1541 ], [ %1540, %1525 ]
  %1550 = phi i32** [ %1544, %1541 ], [ %1539, %1525 ]
  %1551 = icmp eq i32** %1549, %1550
  br i1 %1551, label %1558, label %1552

1552:                                             ; preds = %1547
  %1553 = lshr i64 %1548, 10
  %1554 = getelementptr inbounds i32*, i32** %1550, i64 %1553
  %1555 = load i32*, i32** %1554, align 8
  %1556 = and i64 %1548, 1023
  %1557 = getelementptr inbounds i32, i32* %1555, i64 %1556
  br label %1558

1558:                                             ; preds = %1552, %1547
  %1559 = phi i32* [ %1557, %1552 ], [ null, %1547 ]
  store i32 2147483647, i32* %1559, align 4
  %1560 = load i64, i64* %27, align 8
  %1561 = add i64 %1560, 1
  store i64 %1561, i64* %27, align 8
  br i1 %10, label %1562, label %1564

1562:                                             ; preds = %1558
  %1563 = icmp ugt i64 %1561, 513
  br i1 %1563, label %1858, label %1840

1564:                                             ; preds = %1558
  %1565 = icmp ugt i64 %1561, 48
  br i1 %1565, label %1858, label %1840

1566:                                             ; preds = %167
  %1567 = icmp ult i64 %165, 2
  br i1 %1567, label %1858, label %1568

1568:                                             ; preds = %1566
  %1569 = load i64, i64* %26, align 8
  %1570 = add i64 %165, -1
  store i64 %1570, i64* %27, align 8
  %1571 = load i64, i64* %23, align 8
  %1572 = load i64, i64* %25, align 8
  %1573 = sub i64 %1571, %1572
  %1574 = icmp eq i64 %1573, 0
  %1575 = shl i64 %1573, 7
  %1576 = add i64 %1575, -1
  %1577 = select i1 %1574, i64 0, i64 %1576
  %1578 = sub i64 1, %165
  %1579 = sub i64 %1578, %1569
  %1580 = add i64 %1579, %1577
  %1581 = icmp ult i64 %1580, 2048
  br i1 %1581, label %1596, label %1582

1582:                                             ; preds = %1568
  %1583 = inttoptr i64 %1571 to i32**
  %1584 = getelementptr inbounds i32*, i32** %1583, i64 -1
  %1585 = bitcast i32** %1584 to i8**
  %1586 = load i8*, i8** %1585, align 8
  tail call void @_ZdlPv(i8* %1586) #6
  %1587 = load i32**, i32*** %22, align 8
  %1588 = getelementptr i32*, i32** %1587, i64 -1
  store i32** %1588, i32*** %22, align 8
  %1589 = load i64, i64* %27, align 8
  %1590 = load i64, i64* %26, align 8
  %1591 = ptrtoint i32** %1588 to i64
  %1592 = load i64, i64* %25, align 8
  %1593 = sub i64 %1591, %1592
  %1594 = shl i64 %1593, 7
  %1595 = add i64 %1594, -1
  br label %1596

1596:                                             ; preds = %1582, %1568
  %1597 = phi i64 [ %1595, %1582 ], [ %1576, %1568 ]
  %1598 = phi i64 [ %1593, %1582 ], [ %1573, %1568 ]
  %1599 = phi i64 [ %1591, %1582 ], [ %1571, %1568 ]
  %1600 = phi i64 [ %1592, %1582 ], [ %1572, %1568 ]
  %1601 = phi i64 [ %1590, %1582 ], [ %1569, %1568 ]
  %1602 = phi i64 [ %1589, %1582 ], [ %1570, %1568 ]
  %1603 = add i64 %1602, -1
  store i64 %1603, i64* %27, align 8
  %1604 = icmp eq i64 %1598, 0
  %1605 = select i1 %1604, i64 0, i64 %1597
  %1606 = sub i64 1, %1602
  %1607 = sub i64 %1606, %1601
  %1608 = add i64 %1607, %1605
  %1609 = icmp ult i64 %1608, 2048
  br i1 %1609, label %1621, label %1610

1610:                                             ; preds = %1596
  %1611 = inttoptr i64 %1599 to i32**
  %1612 = getelementptr inbounds i32*, i32** %1611, i64 -1
  %1613 = bitcast i32** %1612 to i8**
  %1614 = load i8*, i8** %1613, align 8
  tail call void @_ZdlPv(i8* %1614) #6
  %1615 = load i32**, i32*** %22, align 8
  %1616 = getelementptr i32*, i32** %1615, i64 -1
  store i32** %1616, i32*** %22, align 8
  %1617 = ptrtoint i32** %1616 to i64
  %1618 = load i64, i64* %25, align 8
  %1619 = load i64, i64* %26, align 8
  %1620 = load i64, i64* %27, align 8
  br label %1621

1621:                                             ; preds = %1610, %1596
  %1622 = phi i64 [ %1620, %1610 ], [ %1603, %1596 ]
  %1623 = phi i64 [ %1619, %1610 ], [ %1601, %1596 ]
  %1624 = phi i64 [ %1618, %1610 ], [ %1600, %1596 ]
  %1625 = phi i64 [ %1617, %1610 ], [ %1599, %1596 ]
  %1626 = sub i64 %1625, %1624
  %1627 = icmp eq i64 %1626, 0
  %1628 = shl i64 %1626, 7
  %1629 = add i64 %1628, -1
  %1630 = select i1 %1627, i64 0, i64 %1629
  %1631 = add i64 %1622, %1623
  %1632 = icmp eq i64 %1630, %1631
  %1633 = inttoptr i64 %1624 to i32**
  %1634 = inttoptr i64 %1625 to i32**
  br i1 %1632, label %1635, label %1641

1635:                                             ; preds = %1621
  tail call void @_ZNSt3__15dequeIiNS_9allocatorIiEEE19__add_back_capacityEv(%"class.std::__1::deque"* %28) #5
  %1636 = load i64, i64* %27, align 8
  %1637 = load i64, i64* %26, align 8
  %1638 = load i32**, i32*** %24, align 8
  %1639 = load i32**, i32*** %22, align 8
  %1640 = add i64 %1637, %1636
  br label %1641

1641:                                             ; preds = %1635, %1621
  %1642 = phi i64 [ %1640, %1635 ], [ %1631, %1621 ]
  %1643 = phi i32** [ %1639, %1635 ], [ %1634, %1621 ]
  %1644 = phi i32** [ %1638, %1635 ], [ %1633, %1621 ]
  %1645 = icmp eq i32** %1643, %1644
  br i1 %1645, label %1652, label %1646

1646:                                             ; preds = %1641
  %1647 = lshr i64 %1642, 10
  %1648 = getelementptr inbounds i32*, i32** %1644, i64 %1647
  %1649 = load i32*, i32** %1648, align 8
  %1650 = and i64 %1642, 1023
  %1651 = getelementptr inbounds i32, i32* %1649, i64 %1650
  br label %1652

1652:                                             ; preds = %1646, %1641
  %1653 = phi i32* [ %1651, %1646 ], [ null, %1641 ]
  store i32 2147483647, i32* %1653, align 4
  %1654 = load i64, i64* %27, align 8
  %1655 = add i64 %1654, 1
  store i64 %1655, i64* %27, align 8
  %1656 = load i64, i64* %23, align 8
  %1657 = load i64, i64* %25, align 8
  %1658 = sub i64 %1656, %1657
  %1659 = icmp eq i64 %1658, 0
  %1660 = shl i64 %1658, 7
  %1661 = add i64 %1660, -1
  %1662 = select i1 %1659, i64 0, i64 %1661
  %1663 = load i64, i64* %26, align 8
  %1664 = add i64 %1663, %1655
  %1665 = icmp eq i64 %1662, %1664
  %1666 = inttoptr i64 %1657 to i32**
  %1667 = inttoptr i64 %1656 to i32**
  br i1 %1665, label %1668, label %1674

1668:                                             ; preds = %1652
  tail call void @_ZNSt3__15dequeIiNS_9allocatorIiEEE19__add_back_capacityEv(%"class.std::__1::deque"* %28) #5
  %1669 = load i64, i64* %27, align 8
  %1670 = load i64, i64* %26, align 8
  %1671 = load i32**, i32*** %24, align 8
  %1672 = load i32**, i32*** %22, align 8
  %1673 = add i64 %1670, %1669
  br label %1674

1674:                                             ; preds = %1668, %1652
  %1675 = phi i64 [ %1673, %1668 ], [ %1664, %1652 ]
  %1676 = phi i32** [ %1672, %1668 ], [ %1667, %1652 ]
  %1677 = phi i32** [ %1671, %1668 ], [ %1666, %1652 ]
  %1678 = icmp eq i32** %1676, %1677
  br i1 %1678, label %1685, label %1679

1679:                                             ; preds = %1674
  %1680 = lshr i64 %1675, 10
  %1681 = getelementptr inbounds i32*, i32** %1677, i64 %1680
  %1682 = load i32*, i32** %1681, align 8
  %1683 = and i64 %1675, 1023
  %1684 = getelementptr inbounds i32, i32* %1682, i64 %1683
  br label %1685

1685:                                             ; preds = %1679, %1674
  %1686 = phi i32* [ %1684, %1679 ], [ null, %1674 ]
  store i32 2147483647, i32* %1686, align 4
  %1687 = load i64, i64* %27, align 8
  %1688 = add i64 %1687, 1
  store i64 %1688, i64* %27, align 8
  br label %1840

1689:                                             ; preds = %167
  %1690 = load i8, i8* %8, align 1, !range !2
  %1691 = icmp ne i8 %1690, 0
  %1692 = icmp eq i64 %165, 7
  %1693 = and i1 %1692, %1691
  br i1 %1693, label %1694, label %1858

1694:                                             ; preds = %1689
  %1695 = load i64, i64* %23, align 8
  br label %1696

1696:                                             ; preds = %1694, %1720
  %1697 = phi i64 [ %1722, %1720 ], [ %1695, %1694 ]
  %1698 = phi i64 [ %1721, %1720 ], [ 7, %1694 ]
  %1699 = load i64, i64* %26, align 8
  %1700 = add i64 %1698, -1
  store i64 %1700, i64* %27, align 8
  %1701 = load i64, i64* %25, align 8
  %1702 = sub i64 %1697, %1701
  %1703 = icmp eq i64 %1702, 0
  %1704 = shl i64 %1702, 7
  %1705 = add i64 %1704, -1
  %1706 = select i1 %1703, i64 0, i64 %1705
  %1707 = sub i64 1, %1698
  %1708 = sub i64 %1707, %1699
  %1709 = add i64 %1708, %1706
  %1710 = icmp ult i64 %1709, 2048
  br i1 %1710, label %1720, label %1711

1711:                                             ; preds = %1696
  %1712 = inttoptr i64 %1697 to i32**
  %1713 = getelementptr inbounds i32*, i32** %1712, i64 -1
  %1714 = bitcast i32** %1713 to i8**
  %1715 = load i8*, i8** %1714, align 8
  tail call void @_ZdlPv(i8* %1715) #6
  %1716 = load i32**, i32*** %22, align 8
  %1717 = getelementptr i32*, i32** %1716, i64 -1
  store i32** %1717, i32*** %22, align 8
  %1718 = ptrtoint i32** %1717 to i64
  %1719 = load i64, i64* %27, align 8
  br label %1720

1720:                                             ; preds = %1711, %1696
  %1721 = phi i64 [ %1719, %1711 ], [ %1700, %1696 ]
  %1722 = phi i64 [ %1718, %1711 ], [ %1697, %1696 ]
  %1723 = icmp eq i64 %1721, 0
  br i1 %1723, label %1840, label %1696

1724:                                             ; preds = %167
  %1725 = load i8, i8* %8, align 1, !range !2
  %1726 = icmp ne i8 %1725, 0
  %1727 = icmp eq i64 %165, 13
  %1728 = and i1 %1727, %1726
  br i1 %1728, label %1729, label %1858

1729:                                             ; preds = %1724
  %1730 = load i64, i64* %23, align 8
  br label %1731

1731:                                             ; preds = %1729, %1755
  %1732 = phi i64 [ %1757, %1755 ], [ %1730, %1729 ]
  %1733 = phi i64 [ %1756, %1755 ], [ 13, %1729 ]
  %1734 = load i64, i64* %26, align 8
  %1735 = add i64 %1733, -1
  store i64 %1735, i64* %27, align 8
  %1736 = load i64, i64* %25, align 8
  %1737 = sub i64 %1732, %1736
  %1738 = icmp eq i64 %1737, 0
  %1739 = shl i64 %1737, 7
  %1740 = add i64 %1739, -1
  %1741 = select i1 %1738, i64 0, i64 %1740
  %1742 = sub i64 1, %1733
  %1743 = sub i64 %1742, %1734
  %1744 = add i64 %1743, %1741
  %1745 = icmp ult i64 %1744, 2048
  br i1 %1745, label %1755, label %1746

1746:                                             ; preds = %1731
  %1747 = inttoptr i64 %1732 to i32**
  %1748 = getelementptr inbounds i32*, i32** %1747, i64 -1
  %1749 = bitcast i32** %1748 to i8**
  %1750 = load i8*, i8** %1749, align 8
  tail call void @_ZdlPv(i8* %1750) #6
  %1751 = load i32**, i32*** %22, align 8
  %1752 = getelementptr i32*, i32** %1751, i64 -1
  store i32** %1752, i32*** %22, align 8
  %1753 = ptrtoint i32** %1752 to i64
  %1754 = load i64, i64* %27, align 8
  br label %1755

1755:                                             ; preds = %1746, %1731
  %1756 = phi i64 [ %1754, %1746 ], [ %1735, %1731 ]
  %1757 = phi i64 [ %1753, %1746 ], [ %1732, %1731 ]
  %1758 = icmp eq i64 %1756, 0
  br i1 %1758, label %1840, label %1731

1759:                                             ; preds = %167
  %1760 = load i8, i8* %8, align 1, !range !2
  %1761 = icmp ne i8 %1760, 0
  %1762 = icmp eq i64 %165, 9
  %1763 = and i1 %1762, %1761
  br i1 %1763, label %1764, label %1858

1764:                                             ; preds = %1759
  %1765 = load i64, i64* %23, align 8
  br label %1766

1766:                                             ; preds = %1764, %1790
  %1767 = phi i64 [ %1792, %1790 ], [ %1765, %1764 ]
  %1768 = phi i64 [ %1791, %1790 ], [ 9, %1764 ]
  %1769 = load i64, i64* %26, align 8
  %1770 = add i64 %1768, -1
  store i64 %1770, i64* %27, align 8
  %1771 = load i64, i64* %25, align 8
  %1772 = sub i64 %1767, %1771
  %1773 = icmp eq i64 %1772, 0
  %1774 = shl i64 %1772, 7
  %1775 = add i64 %1774, -1
  %1776 = select i1 %1773, i64 0, i64 %1775
  %1777 = sub i64 1, %1768
  %1778 = sub i64 %1777, %1769
  %1779 = add i64 %1778, %1776
  %1780 = icmp ult i64 %1779, 2048
  br i1 %1780, label %1790, label %1781

1781:                                             ; preds = %1766
  %1782 = inttoptr i64 %1767 to i32**
  %1783 = getelementptr inbounds i32*, i32** %1782, i64 -1
  %1784 = bitcast i32** %1783 to i8**
  %1785 = load i8*, i8** %1784, align 8
  tail call void @_ZdlPv(i8* %1785) #6
  %1786 = load i32**, i32*** %22, align 8
  %1787 = getelementptr i32*, i32** %1786, i64 -1
  store i32** %1787, i32*** %22, align 8
  %1788 = ptrtoint i32** %1787 to i64
  %1789 = load i64, i64* %27, align 8
  br label %1790

1790:                                             ; preds = %1781, %1766
  %1791 = phi i64 [ %1789, %1781 ], [ %1770, %1766 ]
  %1792 = phi i64 [ %1788, %1781 ], [ %1767, %1766 ]
  %1793 = icmp eq i64 %1791, 0
  br i1 %1793, label %1840, label %1766

1794:                                             ; preds = %167
  %1795 = load i8, i8* %8, align 1, !range !2
  %1796 = icmp ne i8 %1795, 0
  %1797 = icmp eq i64 %165, 11
  %1798 = and i1 %1797, %1796
  br i1 %1798, label %1799, label %1858

1799:                                             ; preds = %1794
  %1800 = load i64, i64* %23, align 8
  br label %1801

1801:                                             ; preds = %1799, %1825
  %1802 = phi i64 [ %1827, %1825 ], [ %1800, %1799 ]
  %1803 = phi i64 [ %1826, %1825 ], [ 11, %1799 ]
  %1804 = load i64, i64* %26, align 8
  %1805 = add i64 %1803, -1
  store i64 %1805, i64* %27, align 8
  %1806 = load i64, i64* %25, align 8
  %1807 = sub i64 %1802, %1806
  %1808 = icmp eq i64 %1807, 0
  %1809 = shl i64 %1807, 7
  %1810 = add i64 %1809, -1
  %1811 = select i1 %1808, i64 0, i64 %1810
  %1812 = sub i64 1, %1803
  %1813 = sub i64 %1812, %1804
  %1814 = add i64 %1813, %1811
  %1815 = icmp ult i64 %1814, 2048
  br i1 %1815, label %1825, label %1816

1816:                                             ; preds = %1801
  %1817 = inttoptr i64 %1802 to i32**
  %1818 = getelementptr inbounds i32*, i32** %1817, i64 -1
  %1819 = bitcast i32** %1818 to i8**
  %1820 = load i8*, i8** %1819, align 8
  tail call void @_ZdlPv(i8* %1820) #6
  %1821 = load i32**, i32*** %22, align 8
  %1822 = getelementptr i32*, i32** %1821, i64 -1
  store i32** %1822, i32*** %22, align 8
  %1823 = ptrtoint i32** %1822 to i64
  %1824 = load i64, i64* %27, align 8
  br label %1825

1825:                                             ; preds = %1816, %1801
  %1826 = phi i64 [ %1824, %1816 ], [ %1805, %1801 ]
  %1827 = phi i64 [ %1823, %1816 ], [ %1802, %1801 ]
  %1828 = icmp eq i64 %1826, 0
  br i1 %1828, label %1840, label %1801

1829:                                             ; preds = %167
  %1830 = getelementptr inbounds %"struct.ots::Font", %"struct.ots::Font"* %164, i64 0, i32 0
  %1831 = load %"struct.ots::FontFile"*, %"struct.ots::FontFile"** %1830, align 8
  %1832 = getelementptr inbounds %"struct.ots::FontFile", %"struct.ots::FontFile"* %1831, i64 0, i32 0
  %1833 = load %"class.ots::OTSContext"*, %"class.ots::OTSContext"** %1832, align 8
  %1834 = bitcast %"class.ots::OTSContext"* %1833 to void (%"class.ots::OTSContext"*, i32, i8*, ...)***
  %1835 = load void (%"class.ots::OTSContext"*, i32, i8*, ...)**, void (%"class.ots::OTSContext"*, i32, i8*, ...)*** %1834, align 8
  %1836 = getelementptr inbounds void (%"class.ots::OTSContext"*, i32, i8*, ...)*, void (%"class.ots::OTSContext"*, i32, i8*, ...)** %1835, i64 2
  %1837 = load void (%"class.ots::OTSContext"*, i32, i8*, ...)*, void (%"class.ots::OTSContext"*, i32, i8*, ...)** %1836, align 8
  tail call void (%"class.ots::OTSContext"*, i32, i8*, ...) %1837(%"class.ots::OTSContext"* %1833, i32 0, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.1, i64 0, i64 0), i32 %163, i32 %163) #5
  br label %1860

1838:                                             ; preds = %896, %839
  %1839 = phi i1 [ %813, %839 ], [ %870, %896 ]
  br i1 %1839, label %1840, label %1858

1840:                                             ; preds = %1825, %1790, %1755, %1720, %796, %754, %716, %677, %639, %604, %366, %295, %334, %1564, %1562, %1148, %1162, %569, %246, %988, %1052, %1142, %1307, %1397, %1461, %1685, %900, %420, %242, %460, %501, %1838
  %1841 = phi i32 [ %47, %1838 ], [ %47, %501 ], [ %47, %460 ], [ %47, %242 ], [ %47, %420 ], [ %47, %900 ], [ %47, %1562 ], [ %47, %1564 ], [ %47, %1148 ], [ %47, %1162 ], [ %47, %246 ], [ %47, %569 ], [ %47, %988 ], [ %47, %1052 ], [ %47, %1142 ], [ %47, %1307 ], [ %47, %1397 ], [ %47, %1461 ], [ %47, %1685 ], [ %47, %334 ], [ %261, %295 ], [ %47, %366 ], [ %47, %604 ], [ %47, %639 ], [ %47, %677 ], [ %47, %716 ], [ %47, %754 ], [ %47, %796 ], [ %47, %1720 ], [ %47, %1755 ], [ %47, %1790 ], [ %47, %1825 ]
  %1842 = phi i8 [ %46, %1838 ], [ %46, %501 ], [ %46, %460 ], [ %46, %242 ], [ %46, %420 ], [ %46, %900 ], [ %46, %1562 ], [ %46, %1564 ], [ %46, %1148 ], [ %46, %1162 ], [ %46, %246 ], [ %46, %569 ], [ %46, %988 ], [ %46, %1052 ], [ %46, %1142 ], [ %46, %1307 ], [ %46, %1397 ], [ %46, %1461 ], [ %46, %1685 ], [ %46, %334 ], [ 1, %295 ], [ %46, %366 ], [ %46, %604 ], [ %46, %639 ], [ %46, %677 ], [ %46, %716 ], [ %46, %754 ], [ %46, %796 ], [ %46, %1720 ], [ %46, %1755 ], [ %46, %1790 ], [ %46, %1825 ]
  %1843 = phi i8 [ %45, %1838 ], [ %45, %501 ], [ %45, %460 ], [ %45, %242 ], [ %45, %420 ], [ %45, %900 ], [ %45, %1562 ], [ %45, %1564 ], [ %45, %1148 ], [ %45, %1162 ], [ %45, %246 ], [ %45, %569 ], [ %45, %988 ], [ %45, %1052 ], [ %45, %1142 ], [ %45, %1307 ], [ %45, %1397 ], [ %45, %1461 ], [ %45, %1685 ], [ 1, %334 ], [ %45, %295 ], [ 1, %366 ], [ %45, %604 ], [ %45, %639 ], [ %45, %677 ], [ %45, %716 ], [ %45, %754 ], [ %45, %796 ], [ %45, %1720 ], [ %45, %1755 ], [ %45, %1790 ], [ %45, %1825 ]
  %1844 = phi i32 [ %163, %1838 ], [ %163, %501 ], [ 21, %460 ], [ %163, %242 ], [ %163, %420 ], [ 3072, %900 ], [ 3099, %1562 ], [ 3099, %1564 ], [ 3090, %1148 ], [ 3090, %1162 ], [ 14, %246 ], [ %163, %569 ], [ %163, %988 ], [ %163, %1052 ], [ 3084, %1142 ], [ 3094, %1307 ], [ 3096, %1397 ], [ 3098, %1461 ], [ 3100, %1685 ], [ 16, %334 ], [ 15, %295 ], [ 16, %366 ], [ 5, %604 ], [ %163, %639 ], [ 8, %677 ], [ 24, %716 ], [ 25, %754 ], [ 26, %796 ], [ 3106, %1720 ], [ 3107, %1755 ], [ 3108, %1790 ], [ 3109, %1825 ]
  %1845 = load i8, i8* %7, align 1, !range !2
  %1846 = icmp ne i8 %1845, 0
  %1847 = icmp eq i32 %1844, 11
  %1848 = or i1 %1847, %1846
  br i1 %1848, label %1858, label %1849

1849:                                             ; preds = %1840, %160, %158
  %1850 = phi i8 [ %45, %158 ], [ %45, %160 ], [ %1843, %1840 ]
  %1851 = phi i8 [ %46, %158 ], [ %46, %160 ], [ %1842, %1840 ]
  %1852 = phi i32 [ %47, %158 ], [ %47, %160 ], [ %1841, %1840 ]
  %1853 = load i64, i64* %17, align 8
  %1854 = icmp ult i64 %1853, %16
  br i1 %1854, label %1855, label %1858

1855:                                             ; preds = %1849
  %1856 = load i64, i64* %15, align 8
  %1857 = icmp ult i64 %1853, %1856
  br i1 %1857, label %43, label %1858

1858:                                             ; preds = %1838, %57, %69, %72, %92, %105, %115, %160, %158, %501, %460, %242, %420, %900, %168, %201, %203, %212, %225, %247, %253, %302, %305, %312, %373, %381, %514, %521, %570, %608, %643, %681, %686, %720, %758, %766, %800, %843, %902, %992, %1056, %1146, %1169, %1311, %1401, %1465, %1566, %1689, %1724, %1759, %1794, %510, %166, %166, %166, %166, %166, %166, %166, %166, %166, %166, %166, %166, %166, %166, %166, %166, %166, %166, %166, %166, %166, %166, %166, %234, %524, %528, %167, %167, %167, %167, %167, %1564, %1562, %1855, %1840, %1849
  %1859 = phi i1 [ false, %1838 ], [ false, %57 ], [ false, %69 ], [ false, %72 ], [ false, %92 ], [ false, %105 ], [ false, %115 ], [ false, %160 ], [ false, %158 ], [ false, %501 ], [ false, %460 ], [ false, %242 ], [ false, %420 ], [ false, %900 ], [ false, %168 ], [ false, %201 ], [ false, %203 ], [ false, %212 ], [ false, %225 ], [ false, %247 ], [ false, %253 ], [ false, %302 ], [ false, %305 ], [ false, %312 ], [ false, %373 ], [ false, %381 ], [ false, %514 ], [ false, %521 ], [ false, %570 ], [ false, %608 ], [ false, %643 ], [ false, %681 ], [ false, %686 ], [ false, %720 ], [ false, %758 ], [ false, %766 ], [ false, %800 ], [ false, %843 ], [ false, %902 ], [ false, %992 ], [ false, %1056 ], [ false, %1146 ], [ false, %1169 ], [ false, %1311 ], [ false, %1401 ], [ false, %1465 ], [ false, %1566 ], [ false, %1689 ], [ false, %1724 ], [ false, %1759 ], [ false, %1794 ], [ false, %510 ], [ false, %166 ], [ false, %166 ], [ false, %166 ], [ false, %166 ], [ false, %166 ], [ false, %166 ], [ false, %166 ], [ false, %166 ], [ false, %166 ], [ false, %166 ], [ false, %166 ], [ false, %166 ], [ false, %166 ], [ false, %166 ], [ false, %166 ], [ false, %166 ], [ false, %166 ], [ false, %166 ], [ false, %166 ], [ false, %166 ], [ false, %166 ], [ false, %166 ], [ false, %166 ], [ false, %234 ], [ false, %524 ], [ false, %528 ], [ false, %167 ], [ false, %167 ], [ false, %167 ], [ false, %167 ], [ false, %167 ], [ false, %1564 ], [ false, %1562 ], [ false, %1855 ], [ true, %1840 ], [ %10, %1849 ]
  br label %1860

1860:                                             ; preds = %167, %1858, %14, %1829, %11
  %1861 = phi i1 [ false, %11 ], [ false, %1829 ], [ %10, %14 ], [ %1859, %1858 ], [ true, %167 ]
  ret i1 %1861
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__15dequeIiNS_9allocatorIiEEE19__add_back_capacityEv(%"class.std::__1::deque"*) local_unnamed_addr #0 comdat align 2 {
  %2 = alloca i32*, align 8
  %3 = alloca i32*, align 8
  %4 = alloca %"struct.std::__1::__split_buffer.66", align 8
  %5 = getelementptr inbounds %"class.std::__1::deque", %"class.std::__1::deque"* %0, i64 0, i32 0, i32 1
  %6 = load i64, i64* %5, align 8
  %7 = icmp ugt i64 %6, 1023
  br i1 %7, label %8, label %162

8:                                                ; preds = %1
  %9 = add i64 %6, -1024
  store i64 %9, i64* %5, align 8
  %10 = getelementptr inbounds %"class.std::__1::deque", %"class.std::__1::deque"* %0, i64 0, i32 0, i32 0, i32 1
  %11 = load i32**, i32*** %10, align 8
  %12 = bitcast i32** %11 to i64*
  %13 = load i64, i64* %12, align 8
  %14 = getelementptr inbounds i32*, i32** %11, i64 1
  store i32** %14, i32*** %10, align 8
  %15 = getelementptr inbounds %"class.std::__1::deque", %"class.std::__1::deque"* %0, i64 0, i32 0, i32 0, i32 2
  %16 = load i32**, i32*** %15, align 8
  %17 = getelementptr inbounds %"class.std::__1::deque", %"class.std::__1::deque"* %0, i64 0, i32 0, i32 0, i32 3, i32 0, i32 0
  %18 = load i32**, i32*** %17, align 8
  %19 = icmp eq i32** %16, %18
  %20 = ptrtoint i32** %18 to i64
  %21 = bitcast i32** %16 to i64*
  br i1 %19, label %22, label %158

22:                                               ; preds = %8
  %23 = getelementptr inbounds %"class.std::__1::deque", %"class.std::__1::deque"* %0, i64 0, i32 0, i32 0, i32 0
  %24 = load i32**, i32*** %23, align 8
  %25 = icmp ugt i32** %14, %24
  %26 = ptrtoint i32** %24 to i64
  br i1 %25, label %27, label %47

27:                                               ; preds = %22
  %28 = ptrtoint i32** %14 to i64
  %29 = sub i64 %28, %26
  %30 = ashr exact i64 %29, 3
  %31 = add nsw i64 %30, 1
  %32 = sdiv i64 %31, -2
  %33 = getelementptr inbounds i32*, i32** %14, i64 %32
  %34 = ptrtoint i32** %16 to i64
  %35 = sub i64 %34, %28
  %36 = ashr exact i64 %35, 3
  %37 = icmp eq i64 %35, 0
  br i1 %37, label %42, label %38

38:                                               ; preds = %27
  %39 = bitcast i32** %33 to i8*
  %40 = bitcast i32** %14 to i8*
  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* align 8 %39, i8* align 8 %40, i64 %35, i1 false) #5
  %41 = load i32**, i32*** %10, align 8
  br label %42

42:                                               ; preds = %38, %27
  %43 = phi i32** [ %14, %27 ], [ %41, %38 ]
  %44 = getelementptr inbounds i32*, i32** %33, i64 %36
  store i32** %44, i32*** %15, align 8
  %45 = getelementptr inbounds i32*, i32** %43, i64 %32
  store i32** %45, i32*** %10, align 8
  %46 = bitcast i32** %44 to i64*
  br label %158

47:                                               ; preds = %22
  %48 = bitcast i32*** %17 to i64*
  %49 = bitcast %"class.std::__1::deque"* %0 to i64*
  %50 = sub i64 %20, %26
  %51 = ashr exact i64 %50, 2
  %52 = icmp eq i64 %50, 0
  %53 = select i1 %52, i64 1, i64 %51
  %54 = icmp ugt i64 %53, 2305843009213693951
  br i1 %54, label %55, label %56

55:                                               ; preds = %47
  tail call void @abort() #7
  unreachable

56:                                               ; preds = %47
  %57 = lshr i64 %53, 2
  %58 = shl i64 %53, 3
  %59 = tail call i8* @_Znwm(i64 %58) #6
  %60 = bitcast i8* %59 to i32**
  %61 = ptrtoint i8* %59 to i64
  %62 = getelementptr inbounds i32*, i32** %60, i64 %57
  %63 = ptrtoint i32** %62 to i64
  %64 = getelementptr inbounds i32*, i32** %60, i64 %53
  %65 = ptrtoint i32** %64 to i64
  %66 = ptrtoint i32** %14 to i64
  %67 = ptrtoint i32** %16 to i64
  %68 = sub i64 %67, %66
  %69 = ashr exact i64 %68, 3
  %70 = getelementptr inbounds i32*, i32** %62, i64 %69
  %71 = icmp eq i64 %68, 0
  br i1 %71, label %147, label %72

72:                                               ; preds = %56
  %73 = add i64 %68, -8
  %74 = lshr i64 %73, 3
  %75 = add nuw nsw i64 %74, 1
  %76 = and i64 %75, 7
  %77 = icmp eq i64 %76, 0
  br i1 %77, label %93, label %78

78:                                               ; preds = %72, %78
  %79 = phi i32** [ %86, %78 ], [ %62, %72 ]
  %80 = phi i64 [ %87, %78 ], [ %63, %72 ]
  %81 = phi i32** [ %88, %78 ], [ %14, %72 ]
  %82 = phi i64 [ %89, %78 ], [ %76, %72 ]
  %83 = bitcast i32** %81 to i64*
  %84 = load i64, i64* %83, align 8
  %85 = inttoptr i64 %80 to i64*
  store i64 %84, i64* %85, align 8
  %86 = getelementptr inbounds i32*, i32** %79, i64 1
  %87 = ptrtoint i32** %86 to i64
  %88 = getelementptr inbounds i32*, i32** %81, i64 1
  %89 = add i64 %82, -1
  %90 = icmp eq i64 %89, 0
  br i1 %90, label %91, label %78, !llvm.loop !3

91:                                               ; preds = %78
  %92 = ptrtoint i32** %86 to i64
  br label %93

93:                                               ; preds = %72, %91
  %94 = phi i32** [ %62, %72 ], [ %86, %91 ]
  %95 = phi i64 [ %63, %72 ], [ %92, %91 ]
  %96 = phi i32** [ %14, %72 ], [ %88, %91 ]
  %97 = icmp ult i64 %73, 56
  br i1 %97, label %144, label %98

98:                                               ; preds = %93, %98
  %99 = phi i32** [ %140, %98 ], [ %94, %93 ]
  %100 = phi i64 [ %141, %98 ], [ %95, %93 ]
  %101 = phi i32** [ %142, %98 ], [ %96, %93 ]
  %102 = bitcast i32** %101 to i64*
  %103 = load i64, i64* %102, align 8
  %104 = inttoptr i64 %100 to i64*
  store i64 %103, i64* %104, align 8
  %105 = getelementptr inbounds i32*, i32** %99, i64 1
  %106 = getelementptr inbounds i32*, i32** %101, i64 1
  %107 = bitcast i32** %106 to i64*
  %108 = load i64, i64* %107, align 8
  %109 = bitcast i32** %105 to i64*
  store i64 %108, i64* %109, align 8
  %110 = getelementptr inbounds i32*, i32** %99, i64 2
  %111 = getelementptr inbounds i32*, i32** %101, i64 2
  %112 = bitcast i32** %111 to i64*
  %113 = load i64, i64* %112, align 8
  %114 = bitcast i32** %110 to i64*
  store i64 %113, i64* %114, align 8
  %115 = getelementptr inbounds i32*, i32** %99, i64 3
  %116 = getelementptr inbounds i32*, i32** %101, i64 3
  %117 = bitcast i32** %116 to i64*
  %118 = load i64, i64* %117, align 8
  %119 = bitcast i32** %115 to i64*
  store i64 %118, i64* %119, align 8
  %120 = getelementptr inbounds i32*, i32** %99, i64 4
  %121 = getelementptr inbounds i32*, i32** %101, i64 4
  %122 = bitcast i32** %121 to i64*
  %123 = load i64, i64* %122, align 8
  %124 = bitcast i32** %120 to i64*
  store i64 %123, i64* %124, align 8
  %125 = getelementptr inbounds i32*, i32** %99, i64 5
  %126 = getelementptr inbounds i32*, i32** %101, i64 5
  %127 = bitcast i32** %126 to i64*
  %128 = load i64, i64* %127, align 8
  %129 = bitcast i32** %125 to i64*
  store i64 %128, i64* %129, align 8
  %130 = getelementptr inbounds i32*, i32** %99, i64 6
  %131 = getelementptr inbounds i32*, i32** %101, i64 6
  %132 = bitcast i32** %131 to i64*
  %133 = load i64, i64* %132, align 8
  %134 = bitcast i32** %130 to i64*
  store i64 %133, i64* %134, align 8
  %135 = getelementptr inbounds i32*, i32** %99, i64 7
  %136 = getelementptr inbounds i32*, i32** %101, i64 7
  %137 = bitcast i32** %136 to i64*
  %138 = load i64, i64* %137, align 8
  %139 = bitcast i32** %135 to i64*
  store i64 %138, i64* %139, align 8
  %140 = getelementptr inbounds i32*, i32** %99, i64 8
  %141 = ptrtoint i32** %140 to i64
  %142 = getelementptr inbounds i32*, i32** %101, i64 8
  %143 = icmp eq i32** %70, %140
  br i1 %143, label %144, label %98

144:                                              ; preds = %98, %93
  %145 = ptrtoint i32** %70 to i64
  %146 = load i32**, i32*** %23, align 8
  br label %147

147:                                              ; preds = %144, %56
  %148 = phi i32** [ %146, %144 ], [ %24, %56 ]
  %149 = phi i64 [ %145, %144 ], [ %63, %56 ]
  store i64 %61, i64* %49, align 8
  %150 = bitcast i32*** %10 to i64*
  store i64 %63, i64* %150, align 8
  %151 = bitcast i32*** %15 to i64*
  store i64 %149, i64* %151, align 8
  store i64 %65, i64* %48, align 8
  %152 = icmp eq i32** %148, null
  %153 = inttoptr i64 %149 to i64*
  br i1 %152, label %158, label %154

154:                                              ; preds = %147
  %155 = bitcast i32** %148 to i8*
  tail call void @_ZdlPv(i8* %155) #6
  %156 = bitcast i32*** %15 to i64**
  %157 = load i64*, i64** %156, align 8
  br label %158

158:                                              ; preds = %8, %42, %147, %154
  %159 = phi i64* [ %157, %154 ], [ %153, %147 ], [ %46, %42 ], [ %21, %8 ]
  store i64 %13, i64* %159, align 8
  %160 = load i32**, i32*** %15, align 8
  %161 = getelementptr inbounds i32*, i32** %160, i64 1
  store i32** %161, i32*** %15, align 8
  br label %460

162:                                              ; preds = %1
  %163 = getelementptr inbounds %"class.std::__1::deque", %"class.std::__1::deque"* %0, i64 0, i32 0, i32 0
  %164 = getelementptr inbounds %"class.std::__1::deque", %"class.std::__1::deque"* %0, i64 0, i32 0, i32 0, i32 2
  %165 = bitcast i32*** %164 to i64*
  %166 = load i64, i64* %165, align 8
  %167 = getelementptr inbounds %"class.std::__1::deque", %"class.std::__1::deque"* %0, i64 0, i32 0, i32 0, i32 1
  %168 = bitcast i32*** %167 to i64*
  %169 = load i64, i64* %168, align 8
  %170 = sub i64 %166, %169
  %171 = ashr exact i64 %170, 3
  %172 = getelementptr inbounds %"class.std::__1::deque", %"class.std::__1::deque"* %0, i64 0, i32 0, i32 0, i32 3, i32 0, i32 0
  %173 = bitcast i32*** %172 to i64*
  %174 = load i64, i64* %173, align 8
  %175 = bitcast %"class.std::__1::deque"* %0 to i64*
  %176 = load i64, i64* %175, align 8
  %177 = sub i64 %174, %176
  %178 = ashr exact i64 %177, 3
  %179 = icmp ult i64 %171, %178
  %180 = inttoptr i64 %166 to i32**
  %181 = inttoptr i64 %169 to i32**
  br i1 %179, label %182, label %337

182:                                              ; preds = %162
  %183 = icmp eq i64 %174, %166
  br i1 %183, label %188, label %184

184:                                              ; preds = %182
  %185 = bitcast i32** %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %185) #5
  %186 = tail call i8* @_Znwm(i64 4096) #6
  %187 = bitcast i32** %2 to i8**
  store i8* %186, i8** %187, align 8
  call void @_ZNSt3__114__split_bufferIPiNS_9allocatorIS1_EEE9push_backEOS1_(%"struct.std::__1::__split_buffer"* %163, i32** nonnull dereferenceable(8) %2)
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %185) #5
  br label %460

188:                                              ; preds = %182
  %189 = bitcast i32** %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %189) #5
  %190 = tail call i8* @_Znwm(i64 4096) #6
  %191 = bitcast i32** %3 to i8**
  store i8* %190, i8** %191, align 8
  call void @_ZNSt3__114__split_bufferIPiNS_9allocatorIS1_EEE10push_frontEOS1_(%"struct.std::__1::__split_buffer"* %163, i32** nonnull dereferenceable(8) %3)
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %189) #5
  %192 = load i32**, i32*** %167, align 8
  %193 = bitcast i32** %192 to i64*
  %194 = load i64, i64* %193, align 8
  %195 = getelementptr inbounds i32*, i32** %192, i64 1
  store i32** %195, i32*** %167, align 8
  %196 = load i32**, i32*** %164, align 8
  %197 = load i32**, i32*** %172, align 8
  %198 = icmp eq i32** %196, %197
  %199 = ptrtoint i32** %197 to i64
  %200 = bitcast i32** %196 to i64*
  br i1 %198, label %201, label %333

201:                                              ; preds = %188
  %202 = getelementptr inbounds %"class.std::__1::deque", %"class.std::__1::deque"* %0, i64 0, i32 0, i32 0, i32 0
  %203 = load i32**, i32*** %202, align 8
  %204 = icmp ugt i32** %195, %203
  %205 = ptrtoint i32** %203 to i64
  br i1 %204, label %206, label %226

206:                                              ; preds = %201
  %207 = ptrtoint i32** %195 to i64
  %208 = sub i64 %207, %205
  %209 = ashr exact i64 %208, 3
  %210 = add nsw i64 %209, 1
  %211 = sdiv i64 %210, -2
  %212 = getelementptr inbounds i32*, i32** %195, i64 %211
  %213 = ptrtoint i32** %196 to i64
  %214 = sub i64 %213, %207
  %215 = ashr exact i64 %214, 3
  %216 = icmp eq i64 %214, 0
  br i1 %216, label %221, label %217

217:                                              ; preds = %206
  %218 = bitcast i32** %212 to i8*
  %219 = bitcast i32** %195 to i8*
  call void @llvm.memmove.p0i8.p0i8.i64(i8* align 8 %218, i8* align 8 %219, i64 %214, i1 false) #5
  %220 = load i32**, i32*** %167, align 8
  br label %221

221:                                              ; preds = %217, %206
  %222 = phi i32** [ %195, %206 ], [ %220, %217 ]
  %223 = getelementptr inbounds i32*, i32** %212, i64 %215
  store i32** %223, i32*** %164, align 8
  %224 = getelementptr inbounds i32*, i32** %222, i64 %211
  store i32** %224, i32*** %167, align 8
  %225 = bitcast i32** %223 to i64*
  br label %333

226:                                              ; preds = %201
  %227 = sub i64 %199, %205
  %228 = ashr exact i64 %227, 2
  %229 = icmp eq i64 %227, 0
  %230 = select i1 %229, i64 1, i64 %228
  %231 = icmp ugt i64 %230, 2305843009213693951
  br i1 %231, label %232, label %233

232:                                              ; preds = %226
  call void @abort() #7
  unreachable

233:                                              ; preds = %226
  %234 = lshr i64 %230, 2
  %235 = shl i64 %230, 3
  %236 = call i8* @_Znwm(i64 %235) #6
  %237 = bitcast i8* %236 to i32**
  %238 = ptrtoint i8* %236 to i64
  %239 = getelementptr inbounds i32*, i32** %237, i64 %234
  %240 = ptrtoint i32** %239 to i64
  %241 = getelementptr inbounds i32*, i32** %237, i64 %230
  %242 = ptrtoint i32** %241 to i64
  %243 = ptrtoint i32** %195 to i64
  %244 = ptrtoint i32** %196 to i64
  %245 = sub i64 %244, %243
  %246 = ashr exact i64 %245, 3
  %247 = getelementptr inbounds i32*, i32** %239, i64 %246
  %248 = icmp eq i64 %245, 0
  br i1 %248, label %324, label %249

249:                                              ; preds = %233
  %250 = add i64 %245, -8
  %251 = lshr i64 %250, 3
  %252 = add nuw nsw i64 %251, 1
  %253 = and i64 %252, 7
  %254 = icmp eq i64 %253, 0
  br i1 %254, label %270, label %255

255:                                              ; preds = %249, %255
  %256 = phi i32** [ %263, %255 ], [ %239, %249 ]
  %257 = phi i64 [ %264, %255 ], [ %240, %249 ]
  %258 = phi i32** [ %265, %255 ], [ %195, %249 ]
  %259 = phi i64 [ %266, %255 ], [ %253, %249 ]
  %260 = bitcast i32** %258 to i64*
  %261 = load i64, i64* %260, align 8
  %262 = inttoptr i64 %257 to i64*
  store i64 %261, i64* %262, align 8
  %263 = getelementptr inbounds i32*, i32** %256, i64 1
  %264 = ptrtoint i32** %263 to i64
  %265 = getelementptr inbounds i32*, i32** %258, i64 1
  %266 = add i64 %259, -1
  %267 = icmp eq i64 %266, 0
  br i1 %267, label %268, label %255, !llvm.loop !5

268:                                              ; preds = %255
  %269 = ptrtoint i32** %263 to i64
  br label %270

270:                                              ; preds = %249, %268
  %271 = phi i32** [ %239, %249 ], [ %263, %268 ]
  %272 = phi i64 [ %240, %249 ], [ %269, %268 ]
  %273 = phi i32** [ %195, %249 ], [ %265, %268 ]
  %274 = icmp ult i64 %250, 56
  br i1 %274, label %321, label %275

275:                                              ; preds = %270, %275
  %276 = phi i32** [ %317, %275 ], [ %271, %270 ]
  %277 = phi i64 [ %318, %275 ], [ %272, %270 ]
  %278 = phi i32** [ %319, %275 ], [ %273, %270 ]
  %279 = bitcast i32** %278 to i64*
  %280 = load i64, i64* %279, align 8
  %281 = inttoptr i64 %277 to i64*
  store i64 %280, i64* %281, align 8
  %282 = getelementptr inbounds i32*, i32** %276, i64 1
  %283 = getelementptr inbounds i32*, i32** %278, i64 1
  %284 = bitcast i32** %283 to i64*
  %285 = load i64, i64* %284, align 8
  %286 = bitcast i32** %282 to i64*
  store i64 %285, i64* %286, align 8
  %287 = getelementptr inbounds i32*, i32** %276, i64 2
  %288 = getelementptr inbounds i32*, i32** %278, i64 2
  %289 = bitcast i32** %288 to i64*
  %290 = load i64, i64* %289, align 8
  %291 = bitcast i32** %287 to i64*
  store i64 %290, i64* %291, align 8
  %292 = getelementptr inbounds i32*, i32** %276, i64 3
  %293 = getelementptr inbounds i32*, i32** %278, i64 3
  %294 = bitcast i32** %293 to i64*
  %295 = load i64, i64* %294, align 8
  %296 = bitcast i32** %292 to i64*
  store i64 %295, i64* %296, align 8
  %297 = getelementptr inbounds i32*, i32** %276, i64 4
  %298 = getelementptr inbounds i32*, i32** %278, i64 4
  %299 = bitcast i32** %298 to i64*
  %300 = load i64, i64* %299, align 8
  %301 = bitcast i32** %297 to i64*
  store i64 %300, i64* %301, align 8
  %302 = getelementptr inbounds i32*, i32** %276, i64 5
  %303 = getelementptr inbounds i32*, i32** %278, i64 5
  %304 = bitcast i32** %303 to i64*
  %305 = load i64, i64* %304, align 8
  %306 = bitcast i32** %302 to i64*
  store i64 %305, i64* %306, align 8
  %307 = getelementptr inbounds i32*, i32** %276, i64 6
  %308 = getelementptr inbounds i32*, i32** %278, i64 6
  %309 = bitcast i32** %308 to i64*
  %310 = load i64, i64* %309, align 8
  %311 = bitcast i32** %307 to i64*
  store i64 %310, i64* %311, align 8
  %312 = getelementptr inbounds i32*, i32** %276, i64 7
  %313 = getelementptr inbounds i32*, i32** %278, i64 7
  %314 = bitcast i32** %313 to i64*
  %315 = load i64, i64* %314, align 8
  %316 = bitcast i32** %312 to i64*
  store i64 %315, i64* %316, align 8
  %317 = getelementptr inbounds i32*, i32** %276, i64 8
  %318 = ptrtoint i32** %317 to i64
  %319 = getelementptr inbounds i32*, i32** %278, i64 8
  %320 = icmp eq i32** %247, %317
  br i1 %320, label %321, label %275

321:                                              ; preds = %275, %270
  %322 = ptrtoint i32** %247 to i64
  %323 = load i32**, i32*** %202, align 8
  br label %324

324:                                              ; preds = %321, %233
  %325 = phi i32** [ %323, %321 ], [ %203, %233 ]
  %326 = phi i64 [ %322, %321 ], [ %240, %233 ]
  store i64 %238, i64* %175, align 8
  store i64 %240, i64* %168, align 8
  store i64 %326, i64* %165, align 8
  store i64 %242, i64* %173, align 8
  %327 = icmp eq i32** %325, null
  %328 = inttoptr i64 %326 to i64*
  br i1 %327, label %333, label %329

329:                                              ; preds = %324
  %330 = bitcast i32** %325 to i8*
  call void @_ZdlPv(i8* %330) #6
  %331 = bitcast i32*** %164 to i64**
  %332 = load i64*, i64** %331, align 8
  br label %333

333:                                              ; preds = %188, %221, %324, %329
  %334 = phi i64* [ %332, %329 ], [ %328, %324 ], [ %225, %221 ], [ %200, %188 ]
  store i64 %194, i64* %334, align 8
  %335 = load i32**, i32*** %164, align 8
  %336 = getelementptr inbounds i32*, i32** %335, i64 1
  store i32** %336, i32*** %164, align 8
  br label %460

337:                                              ; preds = %162
  %338 = bitcast %"struct.std::__1::__split_buffer.66"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %338) #5
  %339 = getelementptr inbounds %"struct.std::__1::__split_buffer.66", %"struct.std::__1::__split_buffer.66"* %4, i64 0, i32 1
  %340 = getelementptr inbounds %"struct.std::__1::__split_buffer.66", %"struct.std::__1::__split_buffer.66"* %4, i64 0, i32 2
  %341 = getelementptr inbounds %"struct.std::__1::__split_buffer.66", %"struct.std::__1::__split_buffer.66"* %4, i64 0, i32 3, i32 0, i32 0
  %342 = getelementptr inbounds %"struct.std::__1::__split_buffer.66", %"struct.std::__1::__split_buffer.66"* %4, i64 0, i32 3, i32 1, i32 0
  %343 = ashr exact i64 %177, 2
  %344 = icmp eq i64 %177, 0
  %345 = select i1 %344, i64 1, i64 %343
  %346 = getelementptr inbounds %"class.std::__1::deque", %"class.std::__1::deque"* %0, i64 0, i32 0, i32 0, i32 3
  %347 = bitcast %"struct.std::__1::__split_buffer.66"* %4 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %347, i8 -86, i64 24, i1 false)
  store i32** null, i32*** %341, align 8
  %348 = bitcast %"class.std::__1::allocator.60"** %342 to %"class.std::__1::__compressed_pair.57"**
  store %"class.std::__1::__compressed_pair.57"* %346, %"class.std::__1::__compressed_pair.57"** %348, align 8
  %349 = icmp ugt i64 %345, 2305843009213693951
  br i1 %349, label %350, label %351

350:                                              ; preds = %337
  tail call void @abort() #7
  unreachable

351:                                              ; preds = %337
  %352 = shl i64 %345, 3
  %353 = tail call i8* @_Znwm(i64 %352) #6
  %354 = bitcast i8* %353 to i32**
  %355 = bitcast %"struct.std::__1::__split_buffer.66"* %4 to i8**
  store i8* %353, i8** %355, align 8
  %356 = getelementptr inbounds i32*, i32** %354, i64 %171
  store i32** %356, i32*** %340, align 8
  store i32** %356, i32*** %339, align 8
  %357 = getelementptr inbounds i32*, i32** %354, i64 %345
  store i32** %357, i32*** %341, align 8
  %358 = tail call i8* @_Znwm(i64 4096) #6
  %359 = ptrtoint i8* %358 to i64
  %360 = icmp eq i64 %171, %345
  %361 = ptrtoint i32** %357 to i64
  %362 = ptrtoint i8* %353 to i64
  %363 = ptrtoint i32** %356 to i64
  br i1 %360, label %364, label %398

364:                                              ; preds = %351
  %365 = icmp ugt i32** %356, %354
  br i1 %365, label %366, label %373

366:                                              ; preds = %364
  %367 = sub i64 %363, %362
  %368 = ashr exact i64 %367, 3
  %369 = add nsw i64 %368, 1
  %370 = sdiv i64 %369, -2
  %371 = getelementptr inbounds i32*, i32** %356, i64 %370
  store i32** %371, i32*** %340, align 8
  store i32** %371, i32*** %339, align 8
  %372 = ptrtoint i32** %371 to i64
  br label %398

373:                                              ; preds = %364
  %374 = sub i64 %361, %362
  %375 = ashr exact i64 %374, 2
  %376 = icmp eq i64 %374, 0
  %377 = select i1 %376, i64 1, i64 %375
  %378 = icmp ugt i64 %377, 2305843009213693951
  br i1 %378, label %379, label %380

379:                                              ; preds = %373
  tail call void @abort() #7
  unreachable

380:                                              ; preds = %373
  %381 = bitcast %"struct.std::__1::__split_buffer.66"* %4 to i64*
  %382 = bitcast i32*** %341 to i64*
  %383 = lshr i64 %377, 2
  %384 = shl i64 %377, 3
  %385 = tail call i8* @_Znwm(i64 %384) #6
  %386 = bitcast i8* %385 to i32**
  %387 = ptrtoint i8* %385 to i64
  %388 = getelementptr inbounds i32*, i32** %386, i64 %383
  %389 = ptrtoint i32** %388 to i64
  %390 = getelementptr inbounds i32*, i32** %386, i64 %377
  %391 = ptrtoint i32** %390 to i64
  store i64 %387, i64* %381, align 8
  %392 = bitcast i32*** %339 to i64*
  store i64 %389, i64* %392, align 8
  %393 = bitcast i32*** %340 to i64*
  store i64 %389, i64* %393, align 8
  store i64 %391, i64* %382, align 8
  tail call void @_ZdlPv(i8* nonnull %353) #6
  %394 = load i32**, i32*** %164, align 8
  %395 = load i32**, i32*** %167, align 8
  %396 = ptrtoint i32** %395 to i64
  %397 = ptrtoint i32** %394 to i64
  br label %398

398:                                              ; preds = %351, %366, %380
  %399 = phi i64 [ %391, %380 ], [ %361, %366 ], [ %361, %351 ]
  %400 = phi i64 [ %397, %380 ], [ %166, %366 ], [ %166, %351 ]
  %401 = phi i64 [ %389, %380 ], [ %372, %366 ], [ %363, %351 ]
  %402 = phi i64 [ %396, %380 ], [ %169, %366 ], [ %169, %351 ]
  %403 = phi i64 [ %387, %380 ], [ %362, %366 ], [ %362, %351 ]
  %404 = phi i32** [ %395, %380 ], [ %181, %366 ], [ %181, %351 ]
  %405 = phi i32** [ %394, %380 ], [ %180, %366 ], [ %180, %351 ]
  %406 = phi i32** [ %388, %380 ], [ %371, %366 ], [ %356, %351 ]
  %407 = bitcast i32** %406 to i64*
  store i64 %359, i64* %407, align 8
  %408 = getelementptr inbounds i32*, i32** %406, i64 1
  store i32** %408, i32*** %340, align 8
  %409 = icmp eq i32** %405, %404
  br i1 %409, label %410, label %455

410:                                              ; preds = %398
  %411 = ptrtoint i32** %408 to i64
  %412 = bitcast %"struct.std::__1::__split_buffer.66"* %4 to i64*
  %413 = bitcast i32*** %339 to i64*
  %414 = bitcast i32*** %340 to i64*
  %415 = bitcast i32*** %341 to i64*
  br label %427

416:                                              ; preds = %455
  %417 = ptrtoint i32** %458 to i64
  %418 = bitcast %"struct.std::__1::__split_buffer.66"* %4 to i64*
  %419 = load i64, i64* %418, align 8
  %420 = bitcast i32*** %339 to i64*
  %421 = load i64, i64* %420, align 8
  %422 = load i64, i64* %165, align 8
  %423 = bitcast i32*** %340 to i64*
  %424 = load i64, i64* %423, align 8
  %425 = bitcast i32*** %341 to i64*
  %426 = load i64, i64* %425, align 8
  br label %427

427:                                              ; preds = %410, %416
  %428 = phi i64* [ %415, %410 ], [ %425, %416 ]
  %429 = phi i64* [ %414, %410 ], [ %423, %416 ]
  %430 = phi i64* [ %413, %410 ], [ %420, %416 ]
  %431 = phi i64* [ %412, %410 ], [ %418, %416 ]
  %432 = phi i64 [ %399, %410 ], [ %426, %416 ]
  %433 = phi i64 [ %411, %410 ], [ %424, %416 ]
  %434 = phi i64 [ %400, %410 ], [ %422, %416 ]
  %435 = phi i64 [ %401, %410 ], [ %421, %416 ]
  %436 = phi i64 [ %402, %410 ], [ %417, %416 ]
  %437 = phi i64 [ %403, %410 ], [ %419, %416 ]
  %438 = load i64, i64* %175, align 8
  store i64 %437, i64* %175, align 8
  store i64 %438, i64* %431, align 8
  store i64 %435, i64* %168, align 8
  store i64 %436, i64* %430, align 8
  store i64 %433, i64* %165, align 8
  store i64 %434, i64* %429, align 8
  %439 = load i64, i64* %173, align 8
  store i64 %432, i64* %173, align 8
  store i64 %439, i64* %428, align 8
  %440 = inttoptr i64 %436 to i32**
  %441 = inttoptr i64 %434 to i32**
  %442 = icmp eq i32** %441, %440
  br i1 %442, label %450, label %443

443:                                              ; preds = %427
  %444 = getelementptr i32*, i32** %441, i64 -1
  %445 = ptrtoint i32** %444 to i64
  %446 = sub i64 %445, %436
  %447 = lshr i64 %446, 3
  %448 = xor i64 %447, -1
  %449 = getelementptr i32*, i32** %441, i64 %448
  store i32** %449, i32*** %340, align 8
  br label %450

450:                                              ; preds = %443, %427
  %451 = icmp eq i64 %438, 0
  br i1 %451, label %454, label %452

452:                                              ; preds = %450
  %453 = inttoptr i64 %438 to i8*
  call void @_ZdlPv(i8* %453) #6
  br label %454

454:                                              ; preds = %450, %452
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %338) #5
  br label %460

455:                                              ; preds = %398, %455
  %456 = phi i32** [ %457, %455 ], [ %405, %398 ]
  %457 = getelementptr inbounds i32*, i32** %456, i64 -1
  call void @_ZNSt3__114__split_bufferIPiRNS_9allocatorIS1_EEE10push_frontERKS1_(%"struct.std::__1::__split_buffer.66"* nonnull %4, i32** dereferenceable(8) %457)
  %458 = load i32**, i32*** %167, align 8
  %459 = icmp eq i32** %457, %458
  br i1 %459, label %416, label %455

460:                                              ; preds = %454, %333, %184, %158
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__114__split_bufferIPiNS_9allocatorIS1_EEE9push_backEOS1_(%"struct.std::__1::__split_buffer"*, i32** dereferenceable(8)) local_unnamed_addr #0 comdat align 2 {
  %3 = getelementptr inbounds %"struct.std::__1::__split_buffer", %"struct.std::__1::__split_buffer"* %0, i64 0, i32 2
  %4 = load i32**, i32*** %3, align 8
  %5 = getelementptr inbounds %"struct.std::__1::__split_buffer", %"struct.std::__1::__split_buffer"* %0, i64 0, i32 3, i32 0, i32 0
  %6 = load i32**, i32*** %5, align 8
  %7 = icmp eq i32** %4, %6
  %8 = ptrtoint i32** %6 to i64
  %9 = bitcast i32** %4 to i64*
  br i1 %7, label %10, label %148

10:                                               ; preds = %2
  %11 = getelementptr inbounds %"struct.std::__1::__split_buffer", %"struct.std::__1::__split_buffer"* %0, i64 0, i32 1
  %12 = load i32**, i32*** %11, align 8
  %13 = getelementptr inbounds %"struct.std::__1::__split_buffer", %"struct.std::__1::__split_buffer"* %0, i64 0, i32 0
  %14 = load i32**, i32*** %13, align 8
  %15 = icmp ugt i32** %12, %14
  %16 = ptrtoint i32** %14 to i64
  br i1 %15, label %17, label %37

17:                                               ; preds = %10
  %18 = ptrtoint i32** %12 to i64
  %19 = sub i64 %18, %16
  %20 = ashr exact i64 %19, 3
  %21 = add nsw i64 %20, 1
  %22 = sdiv i64 %21, -2
  %23 = getelementptr inbounds i32*, i32** %12, i64 %22
  %24 = ptrtoint i32** %4 to i64
  %25 = sub i64 %24, %18
  %26 = ashr exact i64 %25, 3
  %27 = icmp eq i64 %25, 0
  br i1 %27, label %32, label %28

28:                                               ; preds = %17
  %29 = bitcast i32** %23 to i8*
  %30 = bitcast i32** %12 to i8*
  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* align 8 %29, i8* align 8 %30, i64 %25, i1 false) #5
  %31 = load i32**, i32*** %11, align 8
  br label %32

32:                                               ; preds = %17, %28
  %33 = phi i32** [ %12, %17 ], [ %31, %28 ]
  %34 = getelementptr inbounds i32*, i32** %23, i64 %26
  store i32** %34, i32*** %3, align 8
  %35 = getelementptr inbounds i32*, i32** %33, i64 %22
  store i32** %35, i32*** %11, align 8
  %36 = bitcast i32** %34 to i64*
  br label %148

37:                                               ; preds = %10
  %38 = bitcast i32*** %5 to i64*
  %39 = bitcast %"struct.std::__1::__split_buffer"* %0 to i64*
  %40 = sub i64 %8, %16
  %41 = ashr exact i64 %40, 2
  %42 = icmp eq i64 %40, 0
  %43 = select i1 %42, i64 1, i64 %41
  %44 = icmp ugt i64 %43, 2305843009213693951
  br i1 %44, label %45, label %46

45:                                               ; preds = %37
  tail call void @abort() #7
  unreachable

46:                                               ; preds = %37
  %47 = lshr i64 %43, 2
  %48 = shl i64 %43, 3
  %49 = tail call i8* @_Znwm(i64 %48) #6
  %50 = bitcast i8* %49 to i32**
  %51 = ptrtoint i8* %49 to i64
  %52 = getelementptr inbounds i32*, i32** %50, i64 %47
  %53 = ptrtoint i32** %52 to i64
  %54 = getelementptr inbounds i32*, i32** %50, i64 %43
  %55 = ptrtoint i32** %54 to i64
  %56 = ptrtoint i32** %12 to i64
  %57 = ptrtoint i32** %4 to i64
  %58 = sub i64 %57, %56
  %59 = ashr exact i64 %58, 3
  %60 = getelementptr inbounds i32*, i32** %52, i64 %59
  %61 = icmp eq i64 %58, 0
  br i1 %61, label %137, label %62

62:                                               ; preds = %46
  %63 = add i64 %58, -8
  %64 = lshr i64 %63, 3
  %65 = add nuw nsw i64 %64, 1
  %66 = and i64 %65, 7
  %67 = icmp eq i64 %66, 0
  br i1 %67, label %83, label %68

68:                                               ; preds = %62, %68
  %69 = phi i32** [ %76, %68 ], [ %52, %62 ]
  %70 = phi i64 [ %77, %68 ], [ %53, %62 ]
  %71 = phi i32** [ %78, %68 ], [ %12, %62 ]
  %72 = phi i64 [ %79, %68 ], [ %66, %62 ]
  %73 = bitcast i32** %71 to i64*
  %74 = load i64, i64* %73, align 8
  %75 = inttoptr i64 %70 to i64*
  store i64 %74, i64* %75, align 8
  %76 = getelementptr inbounds i32*, i32** %69, i64 1
  %77 = ptrtoint i32** %76 to i64
  %78 = getelementptr inbounds i32*, i32** %71, i64 1
  %79 = add i64 %72, -1
  %80 = icmp eq i64 %79, 0
  br i1 %80, label %81, label %68, !llvm.loop !6

81:                                               ; preds = %68
  %82 = ptrtoint i32** %76 to i64
  br label %83

83:                                               ; preds = %62, %81
  %84 = phi i32** [ %52, %62 ], [ %76, %81 ]
  %85 = phi i64 [ %53, %62 ], [ %82, %81 ]
  %86 = phi i32** [ %12, %62 ], [ %78, %81 ]
  %87 = icmp ult i64 %63, 56
  br i1 %87, label %134, label %88

88:                                               ; preds = %83, %88
  %89 = phi i32** [ %130, %88 ], [ %84, %83 ]
  %90 = phi i64 [ %131, %88 ], [ %85, %83 ]
  %91 = phi i32** [ %132, %88 ], [ %86, %83 ]
  %92 = bitcast i32** %91 to i64*
  %93 = load i64, i64* %92, align 8
  %94 = inttoptr i64 %90 to i64*
  store i64 %93, i64* %94, align 8
  %95 = getelementptr inbounds i32*, i32** %89, i64 1
  %96 = getelementptr inbounds i32*, i32** %91, i64 1
  %97 = bitcast i32** %96 to i64*
  %98 = load i64, i64* %97, align 8
  %99 = bitcast i32** %95 to i64*
  store i64 %98, i64* %99, align 8
  %100 = getelementptr inbounds i32*, i32** %89, i64 2
  %101 = getelementptr inbounds i32*, i32** %91, i64 2
  %102 = bitcast i32** %101 to i64*
  %103 = load i64, i64* %102, align 8
  %104 = bitcast i32** %100 to i64*
  store i64 %103, i64* %104, align 8
  %105 = getelementptr inbounds i32*, i32** %89, i64 3
  %106 = getelementptr inbounds i32*, i32** %91, i64 3
  %107 = bitcast i32** %106 to i64*
  %108 = load i64, i64* %107, align 8
  %109 = bitcast i32** %105 to i64*
  store i64 %108, i64* %109, align 8
  %110 = getelementptr inbounds i32*, i32** %89, i64 4
  %111 = getelementptr inbounds i32*, i32** %91, i64 4
  %112 = bitcast i32** %111 to i64*
  %113 = load i64, i64* %112, align 8
  %114 = bitcast i32** %110 to i64*
  store i64 %113, i64* %114, align 8
  %115 = getelementptr inbounds i32*, i32** %89, i64 5
  %116 = getelementptr inbounds i32*, i32** %91, i64 5
  %117 = bitcast i32** %116 to i64*
  %118 = load i64, i64* %117, align 8
  %119 = bitcast i32** %115 to i64*
  store i64 %118, i64* %119, align 8
  %120 = getelementptr inbounds i32*, i32** %89, i64 6
  %121 = getelementptr inbounds i32*, i32** %91, i64 6
  %122 = bitcast i32** %121 to i64*
  %123 = load i64, i64* %122, align 8
  %124 = bitcast i32** %120 to i64*
  store i64 %123, i64* %124, align 8
  %125 = getelementptr inbounds i32*, i32** %89, i64 7
  %126 = getelementptr inbounds i32*, i32** %91, i64 7
  %127 = bitcast i32** %126 to i64*
  %128 = load i64, i64* %127, align 8
  %129 = bitcast i32** %125 to i64*
  store i64 %128, i64* %129, align 8
  %130 = getelementptr inbounds i32*, i32** %89, i64 8
  %131 = ptrtoint i32** %130 to i64
  %132 = getelementptr inbounds i32*, i32** %91, i64 8
  %133 = icmp eq i32** %60, %130
  br i1 %133, label %134, label %88

134:                                              ; preds = %88, %83
  %135 = ptrtoint i32** %60 to i64
  %136 = load i32**, i32*** %13, align 8
  br label %137

137:                                              ; preds = %46, %134
  %138 = phi i32** [ %136, %134 ], [ %14, %46 ]
  %139 = phi i64 [ %135, %134 ], [ %53, %46 ]
  store i64 %51, i64* %39, align 8
  %140 = bitcast i32*** %11 to i64*
  store i64 %53, i64* %140, align 8
  %141 = bitcast i32*** %3 to i64*
  store i64 %139, i64* %141, align 8
  store i64 %55, i64* %38, align 8
  %142 = icmp eq i32** %138, null
  %143 = inttoptr i64 %139 to i64*
  br i1 %142, label %148, label %144

144:                                              ; preds = %137
  %145 = bitcast i32** %138 to i8*
  tail call void @_ZdlPv(i8* %145) #6
  %146 = bitcast i32*** %3 to i64**
  %147 = load i64*, i64** %146, align 8
  br label %148

148:                                              ; preds = %144, %137, %32, %2
  %149 = phi i64* [ %147, %144 ], [ %143, %137 ], [ %36, %32 ], [ %9, %2 ]
  %150 = bitcast i32** %1 to i64*
  %151 = load i64, i64* %150, align 8
  store i64 %151, i64* %149, align 8
  %152 = load i32**, i32*** %3, align 8
  %153 = getelementptr inbounds i32*, i32** %152, i64 1
  store i32** %153, i32*** %3, align 8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__114__split_bufferIPiNS_9allocatorIS1_EEE10push_frontEOS1_(%"struct.std::__1::__split_buffer"*, i32** dereferenceable(8)) local_unnamed_addr #0 comdat align 2 {
  %3 = getelementptr inbounds %"struct.std::__1::__split_buffer", %"struct.std::__1::__split_buffer"* %0, i64 0, i32 1
  %4 = load i32**, i32*** %3, align 8
  %5 = getelementptr inbounds %"struct.std::__1::__split_buffer", %"struct.std::__1::__split_buffer"* %0, i64 0, i32 0
  %6 = load i32**, i32*** %5, align 8
  %7 = icmp eq i32** %4, %6
  %8 = ptrtoint i32** %6 to i64
  br i1 %7, label %9, label %147

9:                                                ; preds = %2
  %10 = getelementptr inbounds %"struct.std::__1::__split_buffer", %"struct.std::__1::__split_buffer"* %0, i64 0, i32 2
  %11 = load i32**, i32*** %10, align 8
  %12 = getelementptr inbounds %"struct.std::__1::__split_buffer", %"struct.std::__1::__split_buffer"* %0, i64 0, i32 3, i32 0, i32 0
  %13 = load i32**, i32*** %12, align 8
  %14 = icmp ult i32** %11, %13
  %15 = bitcast i32*** %12 to i64*
  %16 = ptrtoint i32** %13 to i64
  br i1 %14, label %17, label %38

17:                                               ; preds = %9
  %18 = ptrtoint i32** %11 to i64
  %19 = sub i64 %16, %18
  %20 = ashr exact i64 %19, 3
  %21 = add nsw i64 %20, 1
  %22 = sdiv i64 %21, 2
  %23 = getelementptr inbounds i32*, i32** %11, i64 %22
  %24 = ptrtoint i32** %4 to i64
  %25 = sub i64 %18, %24
  %26 = icmp eq i64 %25, 0
  br i1 %26, label %34, label %27

27:                                               ; preds = %17
  %28 = ashr exact i64 %25, 3
  %29 = sub nsw i64 0, %28
  %30 = getelementptr inbounds i32*, i32** %23, i64 %29
  %31 = bitcast i32** %30 to i8*
  %32 = bitcast i32** %4 to i8*
  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* align 8 %31, i8* align 8 %32, i64 %25, i1 false) #5
  %33 = load i32**, i32*** %10, align 8
  br label %34

34:                                               ; preds = %17, %27
  %35 = phi i32** [ %33, %27 ], [ %11, %17 ]
  %36 = phi i32** [ %30, %27 ], [ %23, %17 ]
  store i32** %36, i32*** %3, align 8
  %37 = getelementptr inbounds i32*, i32** %35, i64 %22
  store i32** %37, i32*** %10, align 8
  br label %147

38:                                               ; preds = %9
  %39 = bitcast %"struct.std::__1::__split_buffer"* %0 to i64*
  %40 = sub i64 %16, %8
  %41 = ashr exact i64 %40, 2
  %42 = icmp eq i64 %40, 0
  %43 = select i1 %42, i64 1, i64 %41
  %44 = icmp ugt i64 %43, 2305843009213693951
  br i1 %44, label %45, label %46

45:                                               ; preds = %38
  tail call void @abort() #7
  unreachable

46:                                               ; preds = %38
  %47 = add nuw nsw i64 %43, 3
  %48 = lshr i64 %47, 2
  %49 = shl i64 %43, 3
  %50 = tail call i8* @_Znwm(i64 %49) #6
  %51 = bitcast i8* %50 to i32**
  %52 = ptrtoint i8* %50 to i64
  %53 = getelementptr inbounds i32*, i32** %51, i64 %48
  %54 = ptrtoint i32** %53 to i64
  %55 = getelementptr inbounds i32*, i32** %51, i64 %43
  %56 = ptrtoint i32** %55 to i64
  %57 = ptrtoint i32** %4 to i64
  %58 = ptrtoint i32** %11 to i64
  %59 = sub i64 %58, %57
  %60 = ashr exact i64 %59, 3
  %61 = getelementptr inbounds i32*, i32** %53, i64 %60
  %62 = icmp eq i64 %59, 0
  br i1 %62, label %138, label %63

63:                                               ; preds = %46
  %64 = add i64 %59, -8
  %65 = lshr i64 %64, 3
  %66 = add nuw nsw i64 %65, 1
  %67 = and i64 %66, 7
  %68 = icmp eq i64 %67, 0
  br i1 %68, label %84, label %69

69:                                               ; preds = %63, %69
  %70 = phi i32** [ %77, %69 ], [ %53, %63 ]
  %71 = phi i64 [ %78, %69 ], [ %54, %63 ]
  %72 = phi i32** [ %79, %69 ], [ %4, %63 ]
  %73 = phi i64 [ %80, %69 ], [ %67, %63 ]
  %74 = bitcast i32** %72 to i64*
  %75 = load i64, i64* %74, align 8
  %76 = inttoptr i64 %71 to i64*
  store i64 %75, i64* %76, align 8
  %77 = getelementptr inbounds i32*, i32** %70, i64 1
  %78 = ptrtoint i32** %77 to i64
  %79 = getelementptr inbounds i32*, i32** %72, i64 1
  %80 = add i64 %73, -1
  %81 = icmp eq i64 %80, 0
  br i1 %81, label %82, label %69, !llvm.loop !7

82:                                               ; preds = %69
  %83 = ptrtoint i32** %77 to i64
  br label %84

84:                                               ; preds = %63, %82
  %85 = phi i32** [ %53, %63 ], [ %77, %82 ]
  %86 = phi i64 [ %54, %63 ], [ %83, %82 ]
  %87 = phi i32** [ %4, %63 ], [ %79, %82 ]
  %88 = icmp ult i64 %64, 56
  br i1 %88, label %135, label %89

89:                                               ; preds = %84, %89
  %90 = phi i32** [ %131, %89 ], [ %85, %84 ]
  %91 = phi i64 [ %132, %89 ], [ %86, %84 ]
  %92 = phi i32** [ %133, %89 ], [ %87, %84 ]
  %93 = bitcast i32** %92 to i64*
  %94 = load i64, i64* %93, align 8
  %95 = inttoptr i64 %91 to i64*
  store i64 %94, i64* %95, align 8
  %96 = getelementptr inbounds i32*, i32** %90, i64 1
  %97 = getelementptr inbounds i32*, i32** %92, i64 1
  %98 = bitcast i32** %97 to i64*
  %99 = load i64, i64* %98, align 8
  %100 = bitcast i32** %96 to i64*
  store i64 %99, i64* %100, align 8
  %101 = getelementptr inbounds i32*, i32** %90, i64 2
  %102 = getelementptr inbounds i32*, i32** %92, i64 2
  %103 = bitcast i32** %102 to i64*
  %104 = load i64, i64* %103, align 8
  %105 = bitcast i32** %101 to i64*
  store i64 %104, i64* %105, align 8
  %106 = getelementptr inbounds i32*, i32** %90, i64 3
  %107 = getelementptr inbounds i32*, i32** %92, i64 3
  %108 = bitcast i32** %107 to i64*
  %109 = load i64, i64* %108, align 8
  %110 = bitcast i32** %106 to i64*
  store i64 %109, i64* %110, align 8
  %111 = getelementptr inbounds i32*, i32** %90, i64 4
  %112 = getelementptr inbounds i32*, i32** %92, i64 4
  %113 = bitcast i32** %112 to i64*
  %114 = load i64, i64* %113, align 8
  %115 = bitcast i32** %111 to i64*
  store i64 %114, i64* %115, align 8
  %116 = getelementptr inbounds i32*, i32** %90, i64 5
  %117 = getelementptr inbounds i32*, i32** %92, i64 5
  %118 = bitcast i32** %117 to i64*
  %119 = load i64, i64* %118, align 8
  %120 = bitcast i32** %116 to i64*
  store i64 %119, i64* %120, align 8
  %121 = getelementptr inbounds i32*, i32** %90, i64 6
  %122 = getelementptr inbounds i32*, i32** %92, i64 6
  %123 = bitcast i32** %122 to i64*
  %124 = load i64, i64* %123, align 8
  %125 = bitcast i32** %121 to i64*
  store i64 %124, i64* %125, align 8
  %126 = getelementptr inbounds i32*, i32** %90, i64 7
  %127 = getelementptr inbounds i32*, i32** %92, i64 7
  %128 = bitcast i32** %127 to i64*
  %129 = load i64, i64* %128, align 8
  %130 = bitcast i32** %126 to i64*
  store i64 %129, i64* %130, align 8
  %131 = getelementptr inbounds i32*, i32** %90, i64 8
  %132 = ptrtoint i32** %131 to i64
  %133 = getelementptr inbounds i32*, i32** %92, i64 8
  %134 = icmp eq i32** %61, %131
  br i1 %134, label %135, label %89

135:                                              ; preds = %89, %84
  %136 = ptrtoint i32** %61 to i64
  %137 = load i32**, i32*** %5, align 8
  br label %138

138:                                              ; preds = %46, %135
  %139 = phi i32** [ %137, %135 ], [ %4, %46 ]
  %140 = phi i64 [ %136, %135 ], [ %54, %46 ]
  store i64 %52, i64* %39, align 8
  %141 = bitcast i32*** %3 to i64*
  store i64 %54, i64* %141, align 8
  %142 = bitcast i32*** %10 to i64*
  store i64 %140, i64* %142, align 8
  store i64 %56, i64* %15, align 8
  %143 = icmp eq i32** %139, null
  br i1 %143, label %147, label %144

144:                                              ; preds = %138
  %145 = bitcast i32** %139 to i8*
  tail call void @_ZdlPv(i8* %145) #6
  %146 = load i32**, i32*** %3, align 8
  br label %147

147:                                              ; preds = %144, %138, %34, %2
  %148 = phi i32** [ %146, %144 ], [ %53, %138 ], [ %36, %34 ], [ %4, %2 ]
  %149 = getelementptr inbounds i32*, i32** %148, i64 -1
  %150 = bitcast i32** %1 to i64*
  %151 = load i64, i64* %150, align 8
  %152 = bitcast i32** %149 to i64*
  store i64 %151, i64* %152, align 8
  %153 = load i32**, i32*** %3, align 8
  %154 = getelementptr inbounds i32*, i32** %153, i64 -1
  store i32** %154, i32*** %3, align 8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__114__split_bufferIPiRNS_9allocatorIS1_EEE10push_frontERKS1_(%"struct.std::__1::__split_buffer.66"*, i32** dereferenceable(8)) local_unnamed_addr #0 comdat align 2 {
  %3 = getelementptr inbounds %"struct.std::__1::__split_buffer.66", %"struct.std::__1::__split_buffer.66"* %0, i64 0, i32 1
  %4 = load i32**, i32*** %3, align 8
  %5 = getelementptr inbounds %"struct.std::__1::__split_buffer.66", %"struct.std::__1::__split_buffer.66"* %0, i64 0, i32 0
  %6 = load i32**, i32*** %5, align 8
  %7 = icmp eq i32** %4, %6
  %8 = ptrtoint i32** %6 to i64
  br i1 %7, label %9, label %147

9:                                                ; preds = %2
  %10 = getelementptr inbounds %"struct.std::__1::__split_buffer.66", %"struct.std::__1::__split_buffer.66"* %0, i64 0, i32 2
  %11 = load i32**, i32*** %10, align 8
  %12 = getelementptr inbounds %"struct.std::__1::__split_buffer.66", %"struct.std::__1::__split_buffer.66"* %0, i64 0, i32 3, i32 0, i32 0
  %13 = load i32**, i32*** %12, align 8
  %14 = icmp ult i32** %11, %13
  %15 = bitcast i32*** %12 to i64*
  %16 = ptrtoint i32** %13 to i64
  br i1 %14, label %17, label %38

17:                                               ; preds = %9
  %18 = ptrtoint i32** %11 to i64
  %19 = sub i64 %16, %18
  %20 = ashr exact i64 %19, 3
  %21 = add nsw i64 %20, 1
  %22 = sdiv i64 %21, 2
  %23 = getelementptr inbounds i32*, i32** %11, i64 %22
  %24 = ptrtoint i32** %4 to i64
  %25 = sub i64 %18, %24
  %26 = icmp eq i64 %25, 0
  br i1 %26, label %34, label %27

27:                                               ; preds = %17
  %28 = ashr exact i64 %25, 3
  %29 = sub nsw i64 0, %28
  %30 = getelementptr inbounds i32*, i32** %23, i64 %29
  %31 = bitcast i32** %30 to i8*
  %32 = bitcast i32** %4 to i8*
  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* align 8 %31, i8* align 8 %32, i64 %25, i1 false) #5
  %33 = load i32**, i32*** %10, align 8
  br label %34

34:                                               ; preds = %17, %27
  %35 = phi i32** [ %33, %27 ], [ %11, %17 ]
  %36 = phi i32** [ %30, %27 ], [ %23, %17 ]
  store i32** %36, i32*** %3, align 8
  %37 = getelementptr inbounds i32*, i32** %35, i64 %22
  store i32** %37, i32*** %10, align 8
  br label %147

38:                                               ; preds = %9
  %39 = bitcast %"struct.std::__1::__split_buffer.66"* %0 to i64*
  %40 = sub i64 %16, %8
  %41 = ashr exact i64 %40, 2
  %42 = icmp eq i64 %40, 0
  %43 = select i1 %42, i64 1, i64 %41
  %44 = icmp ugt i64 %43, 2305843009213693951
  br i1 %44, label %45, label %46

45:                                               ; preds = %38
  tail call void @abort() #7
  unreachable

46:                                               ; preds = %38
  %47 = add nuw nsw i64 %43, 3
  %48 = lshr i64 %47, 2
  %49 = shl i64 %43, 3
  %50 = tail call i8* @_Znwm(i64 %49) #6
  %51 = bitcast i8* %50 to i32**
  %52 = ptrtoint i8* %50 to i64
  %53 = getelementptr inbounds i32*, i32** %51, i64 %48
  %54 = ptrtoint i32** %53 to i64
  %55 = getelementptr inbounds i32*, i32** %51, i64 %43
  %56 = ptrtoint i32** %55 to i64
  %57 = ptrtoint i32** %4 to i64
  %58 = ptrtoint i32** %11 to i64
  %59 = sub i64 %58, %57
  %60 = ashr exact i64 %59, 3
  %61 = getelementptr inbounds i32*, i32** %53, i64 %60
  %62 = icmp eq i64 %59, 0
  br i1 %62, label %138, label %63

63:                                               ; preds = %46
  %64 = add i64 %59, -8
  %65 = lshr i64 %64, 3
  %66 = add nuw nsw i64 %65, 1
  %67 = and i64 %66, 7
  %68 = icmp eq i64 %67, 0
  br i1 %68, label %84, label %69

69:                                               ; preds = %63, %69
  %70 = phi i32** [ %77, %69 ], [ %53, %63 ]
  %71 = phi i64 [ %78, %69 ], [ %54, %63 ]
  %72 = phi i32** [ %79, %69 ], [ %4, %63 ]
  %73 = phi i64 [ %80, %69 ], [ %67, %63 ]
  %74 = bitcast i32** %72 to i64*
  %75 = load i64, i64* %74, align 8
  %76 = inttoptr i64 %71 to i64*
  store i64 %75, i64* %76, align 8
  %77 = getelementptr inbounds i32*, i32** %70, i64 1
  %78 = ptrtoint i32** %77 to i64
  %79 = getelementptr inbounds i32*, i32** %72, i64 1
  %80 = add i64 %73, -1
  %81 = icmp eq i64 %80, 0
  br i1 %81, label %82, label %69, !llvm.loop !8

82:                                               ; preds = %69
  %83 = ptrtoint i32** %77 to i64
  br label %84

84:                                               ; preds = %63, %82
  %85 = phi i32** [ %53, %63 ], [ %77, %82 ]
  %86 = phi i64 [ %54, %63 ], [ %83, %82 ]
  %87 = phi i32** [ %4, %63 ], [ %79, %82 ]
  %88 = icmp ult i64 %64, 56
  br i1 %88, label %135, label %89

89:                                               ; preds = %84, %89
  %90 = phi i32** [ %131, %89 ], [ %85, %84 ]
  %91 = phi i64 [ %132, %89 ], [ %86, %84 ]
  %92 = phi i32** [ %133, %89 ], [ %87, %84 ]
  %93 = bitcast i32** %92 to i64*
  %94 = load i64, i64* %93, align 8
  %95 = inttoptr i64 %91 to i64*
  store i64 %94, i64* %95, align 8
  %96 = getelementptr inbounds i32*, i32** %90, i64 1
  %97 = getelementptr inbounds i32*, i32** %92, i64 1
  %98 = bitcast i32** %97 to i64*
  %99 = load i64, i64* %98, align 8
  %100 = bitcast i32** %96 to i64*
  store i64 %99, i64* %100, align 8
  %101 = getelementptr inbounds i32*, i32** %90, i64 2
  %102 = getelementptr inbounds i32*, i32** %92, i64 2
  %103 = bitcast i32** %102 to i64*
  %104 = load i64, i64* %103, align 8
  %105 = bitcast i32** %101 to i64*
  store i64 %104, i64* %105, align 8
  %106 = getelementptr inbounds i32*, i32** %90, i64 3
  %107 = getelementptr inbounds i32*, i32** %92, i64 3
  %108 = bitcast i32** %107 to i64*
  %109 = load i64, i64* %108, align 8
  %110 = bitcast i32** %106 to i64*
  store i64 %109, i64* %110, align 8
  %111 = getelementptr inbounds i32*, i32** %90, i64 4
  %112 = getelementptr inbounds i32*, i32** %92, i64 4
  %113 = bitcast i32** %112 to i64*
  %114 = load i64, i64* %113, align 8
  %115 = bitcast i32** %111 to i64*
  store i64 %114, i64* %115, align 8
  %116 = getelementptr inbounds i32*, i32** %90, i64 5
  %117 = getelementptr inbounds i32*, i32** %92, i64 5
  %118 = bitcast i32** %117 to i64*
  %119 = load i64, i64* %118, align 8
  %120 = bitcast i32** %116 to i64*
  store i64 %119, i64* %120, align 8
  %121 = getelementptr inbounds i32*, i32** %90, i64 6
  %122 = getelementptr inbounds i32*, i32** %92, i64 6
  %123 = bitcast i32** %122 to i64*
  %124 = load i64, i64* %123, align 8
  %125 = bitcast i32** %121 to i64*
  store i64 %124, i64* %125, align 8
  %126 = getelementptr inbounds i32*, i32** %90, i64 7
  %127 = getelementptr inbounds i32*, i32** %92, i64 7
  %128 = bitcast i32** %127 to i64*
  %129 = load i64, i64* %128, align 8
  %130 = bitcast i32** %126 to i64*
  store i64 %129, i64* %130, align 8
  %131 = getelementptr inbounds i32*, i32** %90, i64 8
  %132 = ptrtoint i32** %131 to i64
  %133 = getelementptr inbounds i32*, i32** %92, i64 8
  %134 = icmp eq i32** %61, %131
  br i1 %134, label %135, label %89

135:                                              ; preds = %89, %84
  %136 = ptrtoint i32** %61 to i64
  %137 = load i32**, i32*** %5, align 8
  br label %138

138:                                              ; preds = %46, %135
  %139 = phi i32** [ %137, %135 ], [ %4, %46 ]
  %140 = phi i64 [ %136, %135 ], [ %54, %46 ]
  store i64 %52, i64* %39, align 8
  %141 = bitcast i32*** %3 to i64*
  store i64 %54, i64* %141, align 8
  %142 = bitcast i32*** %10 to i64*
  store i64 %140, i64* %142, align 8
  store i64 %56, i64* %15, align 8
  %143 = icmp eq i32** %139, null
  br i1 %143, label %147, label %144

144:                                              ; preds = %138
  %145 = bitcast i32** %139 to i8*
  tail call void @_ZdlPv(i8* %145) #6
  %146 = load i32**, i32*** %3, align 8
  br label %147

147:                                              ; preds = %144, %138, %34, %2
  %148 = phi i32** [ %146, %144 ], [ %53, %138 ], [ %36, %34 ], [ %4, %2 ]
  %149 = getelementptr inbounds i32*, i32** %148, i64 -1
  %150 = bitcast i32** %1 to i64*
  %151 = load i64, i64* %150, align 8
  %152 = bitcast i32** %149 to i64*
  store i64 %151, i64* %152, align 8
  %153 = load i32**, i32*** %3, align 8
  %154 = getelementptr inbounds i32*, i32** %153, i64 -1
  store i32** %154, i32*** %3, align 8
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memmove.p0i8.p0i8.i64(i8* nocapture, i8* nocapture readonly, i64, i1 immarg) #1

; Function Attrs: noreturn nounwind
declare void @abort() local_unnamed_addr #2

; Function Attrs: nobuiltin nofree
declare noalias nonnull i8* @_Znwm(i64) local_unnamed_addr #3

; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(i8*) local_unnamed_addr #4

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { noreturn nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nobuiltin nofree "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind }
attributes #6 = { builtin nounwind }
attributes #7 = { noreturn nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{i8 0, i8 2}
!3 = distinct !{!3, !4}
!4 = !{!"llvm.loop.unroll.disable"}
!5 = distinct !{!5, !4}
!6 = distinct !{!6, !4}
!7 = distinct !{!7, !4}
!8 = distinct !{!8, !4}
