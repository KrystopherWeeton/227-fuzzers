; ModuleID = '../../third_party/zlib/crc32_simd.c'
source_filename = "../../third_party/zlib/crc32_simd.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

; Function Attrs: nounwind readonly ssp uwtable
define hidden i32 @Cr_z_crc32_sse42_simd_(i8* nocapture readonly, i64, i32) local_unnamed_addr #0 {
  %4 = bitcast i8* %0 to <2 x i64>*
  %5 = load <2 x i64>, <2 x i64>* %4, align 1
  %6 = getelementptr inbounds i8, i8* %0, i64 16
  %7 = bitcast i8* %6 to <2 x i64>*
  %8 = load <2 x i64>, <2 x i64>* %7, align 1
  %9 = getelementptr inbounds i8, i8* %0, i64 32
  %10 = bitcast i8* %9 to <2 x i64>*
  %11 = load <2 x i64>, <2 x i64>* %10, align 1
  %12 = getelementptr inbounds i8, i8* %0, i64 48
  %13 = bitcast i8* %12 to <2 x i64>*
  %14 = load <2 x i64>, <2 x i64>* %13, align 1
  %15 = insertelement <4 x i32> <i32 undef, i32 0, i32 0, i32 0>, i32 %2, i32 0
  %16 = bitcast <4 x i32> %15 to <2 x i64>
  %17 = xor <2 x i64> %5, %16
  %18 = add i64 %1, -64
  %19 = getelementptr inbounds i8, i8* %0, i64 64
  %20 = icmp ugt i64 %18, 63
  br i1 %20, label %21, label %66

21:                                               ; preds = %3
  %22 = add i64 %1, -128
  %23 = and i64 %22, -64
  %24 = add i64 %23, 128
  br label %25

25:                                               ; preds = %21, %25
  %26 = phi i8* [ %61, %25 ], [ %19, %21 ]
  %27 = phi i64 [ %60, %25 ], [ %18, %21 ]
  %28 = phi <2 x i64> [ %59, %25 ], [ %14, %21 ]
  %29 = phi <2 x i64> [ %58, %25 ], [ %11, %21 ]
  %30 = phi <2 x i64> [ %57, %25 ], [ %8, %21 ]
  %31 = phi <2 x i64> [ %56, %25 ], [ %17, %21 ]
  %32 = phi i8* [ %26, %25 ], [ %0, %21 ]
  %33 = tail call <2 x i64> @llvm.x86.pclmulqdq(<2 x i64> %31, <2 x i64> <i64 5708721108, i64 undef>, i8 0)
  %34 = tail call <2 x i64> @llvm.x86.pclmulqdq(<2 x i64> %30, <2 x i64> <i64 5708721108, i64 undef>, i8 0)
  %35 = tail call <2 x i64> @llvm.x86.pclmulqdq(<2 x i64> %29, <2 x i64> <i64 5708721108, i64 undef>, i8 0)
  %36 = tail call <2 x i64> @llvm.x86.pclmulqdq(<2 x i64> %28, <2 x i64> <i64 5708721108, i64 undef>, i8 0)
  %37 = tail call <2 x i64> @llvm.x86.pclmulqdq(<2 x i64> %31, <2 x i64> <i64 undef, i64 7631803798>, i8 17)
  %38 = tail call <2 x i64> @llvm.x86.pclmulqdq(<2 x i64> %30, <2 x i64> <i64 undef, i64 7631803798>, i8 17)
  %39 = tail call <2 x i64> @llvm.x86.pclmulqdq(<2 x i64> %29, <2 x i64> <i64 undef, i64 7631803798>, i8 17)
  %40 = tail call <2 x i64> @llvm.x86.pclmulqdq(<2 x i64> %28, <2 x i64> <i64 undef, i64 7631803798>, i8 17)
  %41 = bitcast i8* %26 to <2 x i64>*
  %42 = load <2 x i64>, <2 x i64>* %41, align 1
  %43 = getelementptr inbounds i8, i8* %32, i64 80
  %44 = bitcast i8* %43 to <2 x i64>*
  %45 = load <2 x i64>, <2 x i64>* %44, align 1
  %46 = getelementptr inbounds i8, i8* %32, i64 96
  %47 = bitcast i8* %46 to <2 x i64>*
  %48 = load <2 x i64>, <2 x i64>* %47, align 1
  %49 = getelementptr inbounds i8, i8* %32, i64 112
  %50 = bitcast i8* %49 to <2 x i64>*
  %51 = load <2 x i64>, <2 x i64>* %50, align 1
  %52 = xor <2 x i64> %37, %33
  %53 = xor <2 x i64> %38, %34
  %54 = xor <2 x i64> %39, %35
  %55 = xor <2 x i64> %40, %36
  %56 = xor <2 x i64> %52, %42
  %57 = xor <2 x i64> %53, %45
  %58 = xor <2 x i64> %54, %48
  %59 = xor <2 x i64> %55, %51
  %60 = add i64 %27, -64
  %61 = getelementptr inbounds i8, i8* %26, i64 64
  %62 = icmp ugt i64 %60, 63
  br i1 %62, label %25, label %63

63:                                               ; preds = %25
  %64 = sub i64 %22, %23
  %65 = getelementptr i8, i8* %0, i64 %24
  br label %66

66:                                               ; preds = %63, %3
  %67 = phi <2 x i64> [ %17, %3 ], [ %56, %63 ]
  %68 = phi <2 x i64> [ %8, %3 ], [ %57, %63 ]
  %69 = phi <2 x i64> [ %11, %3 ], [ %58, %63 ]
  %70 = phi <2 x i64> [ %14, %3 ], [ %59, %63 ]
  %71 = phi i64 [ %18, %3 ], [ %64, %63 ]
  %72 = phi i8* [ %19, %3 ], [ %65, %63 ]
  %73 = tail call <2 x i64> @llvm.x86.pclmulqdq(<2 x i64> %67, <2 x i64> <i64 6259578832, i64 undef>, i8 0)
  %74 = tail call <2 x i64> @llvm.x86.pclmulqdq(<2 x i64> %67, <2 x i64> <i64 undef, i64 3433693342>, i8 17)
  %75 = xor <2 x i64> %73, %68
  %76 = xor <2 x i64> %75, %74
  %77 = tail call <2 x i64> @llvm.x86.pclmulqdq(<2 x i64> %76, <2 x i64> <i64 6259578832, i64 undef>, i8 0)
  %78 = tail call <2 x i64> @llvm.x86.pclmulqdq(<2 x i64> %76, <2 x i64> <i64 undef, i64 3433693342>, i8 17)
  %79 = xor <2 x i64> %77, %69
  %80 = xor <2 x i64> %79, %78
  %81 = tail call <2 x i64> @llvm.x86.pclmulqdq(<2 x i64> %80, <2 x i64> <i64 6259578832, i64 undef>, i8 0)
  %82 = tail call <2 x i64> @llvm.x86.pclmulqdq(<2 x i64> %80, <2 x i64> <i64 undef, i64 3433693342>, i8 17)
  %83 = xor <2 x i64> %81, %70
  %84 = xor <2 x i64> %83, %82
  %85 = icmp ugt i64 %71, 15
  br i1 %85, label %86, label %147

86:                                               ; preds = %66
  %87 = add i64 %71, -16
  %88 = lshr i64 %87, 4
  %89 = add nuw nsw i64 %88, 1
  %90 = and i64 %89, 3
  %91 = icmp eq i64 %90, 0
  br i1 %91, label %107, label %92

92:                                               ; preds = %86, %92
  %93 = phi <2 x i64> [ %102, %92 ], [ %84, %86 ]
  %94 = phi i8* [ %103, %92 ], [ %72, %86 ]
  %95 = phi i64 [ %104, %92 ], [ %71, %86 ]
  %96 = phi i64 [ %105, %92 ], [ %90, %86 ]
  %97 = bitcast i8* %94 to <2 x i64>*
  %98 = load <2 x i64>, <2 x i64>* %97, align 1
  %99 = tail call <2 x i64> @llvm.x86.pclmulqdq(<2 x i64> %93, <2 x i64> <i64 6259578832, i64 undef>, i8 0)
  %100 = tail call <2 x i64> @llvm.x86.pclmulqdq(<2 x i64> %93, <2 x i64> <i64 undef, i64 3433693342>, i8 17)
  %101 = xor <2 x i64> %99, %98
  %102 = xor <2 x i64> %101, %100
  %103 = getelementptr inbounds i8, i8* %94, i64 16
  %104 = add i64 %95, -16
  %105 = add i64 %96, -1
  %106 = icmp eq i64 %105, 0
  br i1 %106, label %107, label %92, !llvm.loop !2

107:                                              ; preds = %92, %86
  %108 = phi <2 x i64> [ %84, %86 ], [ %102, %92 ]
  %109 = phi i8* [ %72, %86 ], [ %103, %92 ]
  %110 = phi i64 [ %71, %86 ], [ %104, %92 ]
  %111 = phi <2 x i64> [ undef, %86 ], [ %102, %92 ]
  %112 = icmp ult i64 %87, 48
  br i1 %112, label %147, label %113

113:                                              ; preds = %107, %113
  %114 = phi <2 x i64> [ %143, %113 ], [ %108, %107 ]
  %115 = phi i8* [ %144, %113 ], [ %109, %107 ]
  %116 = phi i64 [ %145, %113 ], [ %110, %107 ]
  %117 = bitcast i8* %115 to <2 x i64>*
  %118 = load <2 x i64>, <2 x i64>* %117, align 1
  %119 = tail call <2 x i64> @llvm.x86.pclmulqdq(<2 x i64> %114, <2 x i64> <i64 6259578832, i64 undef>, i8 0)
  %120 = tail call <2 x i64> @llvm.x86.pclmulqdq(<2 x i64> %114, <2 x i64> <i64 undef, i64 3433693342>, i8 17)
  %121 = xor <2 x i64> %119, %118
  %122 = xor <2 x i64> %121, %120
  %123 = getelementptr inbounds i8, i8* %115, i64 16
  %124 = bitcast i8* %123 to <2 x i64>*
  %125 = load <2 x i64>, <2 x i64>* %124, align 1
  %126 = tail call <2 x i64> @llvm.x86.pclmulqdq(<2 x i64> %122, <2 x i64> <i64 6259578832, i64 undef>, i8 0)
  %127 = tail call <2 x i64> @llvm.x86.pclmulqdq(<2 x i64> %122, <2 x i64> <i64 undef, i64 3433693342>, i8 17)
  %128 = xor <2 x i64> %126, %125
  %129 = xor <2 x i64> %128, %127
  %130 = getelementptr inbounds i8, i8* %115, i64 32
  %131 = bitcast i8* %130 to <2 x i64>*
  %132 = load <2 x i64>, <2 x i64>* %131, align 1
  %133 = tail call <2 x i64> @llvm.x86.pclmulqdq(<2 x i64> %129, <2 x i64> <i64 6259578832, i64 undef>, i8 0)
  %134 = tail call <2 x i64> @llvm.x86.pclmulqdq(<2 x i64> %129, <2 x i64> <i64 undef, i64 3433693342>, i8 17)
  %135 = xor <2 x i64> %133, %132
  %136 = xor <2 x i64> %135, %134
  %137 = getelementptr inbounds i8, i8* %115, i64 48
  %138 = bitcast i8* %137 to <2 x i64>*
  %139 = load <2 x i64>, <2 x i64>* %138, align 1
  %140 = tail call <2 x i64> @llvm.x86.pclmulqdq(<2 x i64> %136, <2 x i64> <i64 6259578832, i64 undef>, i8 0)
  %141 = tail call <2 x i64> @llvm.x86.pclmulqdq(<2 x i64> %136, <2 x i64> <i64 undef, i64 3433693342>, i8 17)
  %142 = xor <2 x i64> %140, %139
  %143 = xor <2 x i64> %142, %141
  %144 = getelementptr inbounds i8, i8* %115, i64 64
  %145 = add i64 %116, -64
  %146 = icmp ugt i64 %145, 15
  br i1 %146, label %113, label %147

147:                                              ; preds = %107, %113, %66
  %148 = phi <2 x i64> [ %84, %66 ], [ %111, %107 ], [ %143, %113 ]
  %149 = tail call <2 x i64> @llvm.x86.pclmulqdq(<2 x i64> %148, <2 x i64> <i64 undef, i64 3433693342>, i8 16)
  %150 = bitcast <2 x i64> %148 to <16 x i8>
  %151 = shufflevector <16 x i8> %150, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23>
  %152 = bitcast <16 x i8> %151 to <2 x i64>
  %153 = xor <2 x i64> %149, %152
  %154 = bitcast <2 x i64> %153 to <16 x i8>
  %155 = shufflevector <16 x i8> %154, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19>
  %156 = bitcast <16 x i8> %155 to <2 x i64>
  %157 = and <2 x i64> %153, <i64 4294967295, i64 undef>
  %158 = tail call <2 x i64> @llvm.x86.pclmulqdq(<2 x i64> %157, <2 x i64> <i64 5969371428, i64 undef>, i8 0)
  %159 = xor <2 x i64> %158, %156
  %160 = and <2 x i64> %159, <i64 4294967295, i64 undef>
  %161 = tail call <2 x i64> @llvm.x86.pclmulqdq(<2 x i64> %160, <2 x i64> <i64 undef, i64 8439010881>, i8 16)
  %162 = and <2 x i64> %161, <i64 4294967295, i64 undef>
  %163 = tail call <2 x i64> @llvm.x86.pclmulqdq(<2 x i64> %162, <2 x i64> <i64 7976584769, i64 undef>, i8 0)
  %164 = xor <2 x i64> %159, %163
  %165 = bitcast <2 x i64> %164 to <4 x i32>
  %166 = extractelement <4 x i32> %165, i64 1
  ret i32 %166
}

; Function Attrs: nounwind readnone
declare <2 x i64> @llvm.x86.pclmulqdq(<2 x i64>, <2 x i64>, i8 immarg) #1

attributes #0 = { nounwind readonly ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="128" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+pclmul,+popcnt,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+ssse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind readnone }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = distinct !{!2, !3}
!3 = !{!"llvm.loop.unroll.disable"}
