; ModuleID = '../../third_party/libvpx/source/libvpx/vp9/encoder/vp9_segmentation.c'
source_filename = "../../third_party/libvpx/source/libvpx/vp9/encoder/vp9_segmentation.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%struct.segmentation = type { i8, i8, i8, i8, i8, [7 x i8], [3 x i8], [8 x [4 x i16]], [8 x i32], i32 }
%struct.VP9_COMP = type { %struct.FRAME_INFO, [8 x i8], %struct.QUANTS, %struct.ThreadData, %struct.MB_MODE_INFO_EXT*, [8 x i8], [256 x [8 x i16]], [256 x [8 x i16]], %struct.VP9Common, %struct.VP9EncoderConfig, %struct.lookahead_ctx*, %struct.lookahead_entry*, %struct.yv12_buffer_config*, %struct.yv12_buffer_config*, %struct.yv12_buffer_config*, %struct.yv12_buffer_config, %struct.yv12_buffer_config*, %struct.yv12_buffer_config, %struct.yv12_buffer_config*, i8, [50 x %struct.TplDepFrame], [8 x %struct.yv12_buffer_config*], [8 x %struct.EncFrameBuf], %union.pthread_mutex_t, i32, %struct.KMEANS_DATA*, i32, i32, [8 x double], [8 x double], [8 x i32], i32, %struct.TileDataEnc*, i32, i32, [3 x i32], i32, i32, i32, [8 x i32], i32, i32, i32, i32, i32, i32, i32, i32, i32, i64, i64*, i32, i32, double*, %struct.yv12_buffer_config, [4 x [64 x %struct.TOKENEXTRA*]], [4 x [64 x %struct.TOKENLIST*]], i64, %struct.RD_OPT, %struct.CODING_CONTEXT, [2 x i32*], [2 x i32*], [2 x i32*], [2 x i32*], i64, i64, i64, %struct.RATE_CONTROL, double, [8 x [4 x i32]], %struct.vpx_codec_pkt_list*, [25 x %struct.MBGRAPH_FRAME_STATS], i32, i32, i32, %struct.SPEED_FEATURES, i32, i32, i32, i32, i32, i8*, i8*, [8 x i32], %struct.CYCLIC_REFRESH*, %struct.ActiveMap, i32 (%struct.macroblock*, %struct.mv*, %struct.mv*, i32, i32, %struct.vp9_variance_vtable*, i32, i32, i32*, i32*, i32**, i32*, i32*, i8*, i32, i32, i32)*, %struct.scale_factors, i32 (%struct.macroblock*, %struct.search_site_config*, %struct.mv*, %struct.mv*, i32, i32, i32*, %struct.vp9_variance_vtable*, %struct.mv*)*, [13 x %struct.vp9_variance_vtable], i64, i64, i64, i64, %struct.TWO_PASS, i8, %struct.yv12_buffer_config, %struct.ALT_REF_AQ*, i32, i32, i32, i32, i32, i32, %struct.SVC, %struct.diff*, i32, i32, i32, %struct.search_site_config, [10 x i32], [7 x [4 x i32]], [2 x [10 x [10 x i32]]], [10 x [10 x [10 x i32]]], [4 x [3 x i32]], [16 x [4 x i32]], [3 x [2 x [4 x i32]]], %struct.vp9_denoiser, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, %struct.noise_estimate, i8*, [4 x i64], i64, i64, i64, i8, i32, %struct.VPxWorker*, %struct.EncWorkerData*, %struct.VP9LfSyncData, %struct.VP9BitstreamWorkerData*, i32, %struct.Vp9LevelInfo, %struct.MultiThreadHandle, void (%struct.VP9RowMTSyncData*, i32, i32)*, void (%struct.VP9RowMTSyncData*, i32, i32, i32)*, %struct.ARNRFilterData, i32, i32, i8*, i8*, i8*, i8*, i8, i8, i8*, i32, %struct.LevelConstraint, i8*, i8*, i32, %struct.vpx_roi_map, i32, %struct.EXT_RATECTRL, [8 x i8] }
%struct.FRAME_INFO = type { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }
%struct.QUANTS = type { [256 x [8 x i16]], [256 x [8 x i16]], [256 x [8 x i16]], [256 x [8 x i16]], [256 x [8 x i16]], [256 x [8 x i16]], [256 x [8 x i16]], [256 x [8 x i16]], [256 x [8 x i16]], [256 x [8 x i16]], [256 x [8 x i16]], [256 x [8 x i16]] }
%struct.ThreadData = type { %struct.macroblock, %struct.RD_COUNTS, %struct.FRAME_COUNTS*, %struct.PICK_MODE_CONTEXT*, %struct.PC_TREE*, %struct.PC_TREE*, [8 x i8] }
%struct.macroblock = type { [3 x %struct.macroblock_plane], %struct.macroblockd, %struct.MB_MODE_INFO_EXT*, %struct.MB_MODE_INFO_EXT*, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i8, i8, [4 x i32], [4 x i32], i32, [4 x i32], [4 x i32], [4 x i32], [2 x i32*], [2 x i32*], i32**, [4 x i32], [2 x i32*], [2 x i32*], i32**, i32, i32, %struct.MvLimits, [4 x [256 x i8]], [4 x i32], i32, i32, [4 x [2 x [2 x [6 x [2 x [6 x [12 x i32]]]]]]], i32, i32, i32, i32, i32, [12 x i8], [12 x i64], [4 x %struct.mv], [2 x i8], i8, i8, i8, i8, i32, i32, i32, i32, i32, i8, [25 x i8], i8, i8, void (i16*, i32*, i32)*, void (i32*, i8*, i32, i32)*, void (i32*, i16*, i32, i32, i32)*, [8 x i8], [4096 x i8], %struct.scale_factors*, [8 x i8] }
%struct.macroblock_plane = type { [4096 x i16], i32*, i32*, i16*, %struct.buf_2d, [8 x i8], [8 x i16], i16*, i16*, i16*, i16*, i16*, [2 x i64], [8 x i8] }
%struct.buf_2d = type { i8*, i32 }
%struct.macroblockd = type { [3 x %struct.macroblockd_plane], i8, i8, %struct.FRAME_COUNTS*, %struct.TileInfo, i32, %struct.MODE_INFO**, %struct.MODE_INFO*, %struct.MODE_INFO*, i32, i32, [3 x i8]*, i32, i32, i32, i32, %struct.frame_contexts*, [2 x %struct.RefBuffer*], %struct.yv12_buffer_config*, [3 x i8*], [3 x [16 x i8]], i8*, [8 x i8], i32, i32, i32, %struct.vpx_internal_error_info*, i32* }
%struct.macroblockd_plane = type { i32*, i32, i32, %struct.buf_2d, [2 x %struct.buf_2d], i8*, i8*, [8 x [2 x i16]], i16, i16, i8, i8, i16*, i32* }
%struct.TileInfo = type { i32, i32, i32, i32 }
%struct.MODE_INFO = type { i8, i8, i8, i8, i8, i8, i8, i8, [2 x i8], [2 x %union.int_mv], [4 x %struct.b_mode_info] }
%union.int_mv = type { i32 }
%struct.b_mode_info = type { i8, [2 x %union.int_mv] }
%struct.frame_contexts = type { [4 x [9 x i8]], [10 x [9 x i8]], [16 x [3 x i8]], [4 x [2 x [2 x [6 x [6 x [3 x i8]]]]]], [4 x [2 x i8]], [7 x [3 x i8]], [4 x i8], [5 x i8], [5 x [2 x i8]], [5 x i8], %struct.tx_probs, [3 x i8], %struct.nmv_context, i32 }
%struct.tx_probs = type { [2 x [3 x i8]], [2 x [2 x i8]], [2 x [1 x i8]] }
%struct.nmv_context = type { [3 x i8], [2 x %struct.nmv_component] }
%struct.nmv_component = type { i8, [10 x i8], [1 x i8], [10 x i8], [2 x [3 x i8]], [3 x i8], i8, i8 }
%struct.RefBuffer = type { i32, %struct.yv12_buffer_config*, %struct.scale_factors }
%struct.vpx_internal_error_info = type { i32, i32, [80 x i8], i32, [1 x %struct.__jmp_buf_tag] }
%struct.__jmp_buf_tag = type { [8 x i64], i32, %struct.__sigset_t }
%struct.__sigset_t = type { [16 x i64] }
%struct.MvLimits = type { i32, i32, i32, i32 }
%struct.mv = type { i16, i16 }
%struct.RD_COUNTS = type { [4 x [2 x [2 x [6 x [6 x [12 x i32]]]]]], [3 x i64], [4 x i64] }
%struct.FRAME_COUNTS = type { [4 x [10 x i32]], [10 x [10 x i32]], [16 x [4 x i32]], [4 x [2 x [2 x [6 x [6 x [4 x i32]]]]]], [4 x [2 x [2 x [6 x [6 x i32]]]]], [4 x [3 x i32]], [7 x [4 x i32]], [4 x [2 x i32]], [5 x [2 x i32]], [5 x [2 x [2 x i32]]], [5 x [2 x i32]], %struct.tx_counts, [3 x [2 x i32]], %struct.nmv_context_counts }
%struct.tx_counts = type { [2 x [4 x i32]], [2 x [3 x i32]], [2 x [2 x i32]], [4 x i32] }
%struct.nmv_context_counts = type { [4 x i32], [2 x %struct.nmv_component_counts] }
%struct.nmv_component_counts = type { [2 x i32], [11 x i32], [2 x i32], [10 x [2 x i32]], [2 x [4 x i32]], [4 x i32], [2 x i32], [2 x i32] }
%struct.PICK_MODE_CONTEXT = type { %struct.MODE_INFO, %struct.MB_MODE_INFO_EXT, i8*, [3 x [3 x i32*]], [3 x [3 x i32*]], [3 x [3 x i32*]], [3 x [3 x i16*]], [3 x [3 x i32*]], [3 x [3 x i32*]], [3 x [3 x i32*]], [3 x [3 x i16*]], i32, i32, i32, i32, i32, [12 x i8], i32, i32, i32, i32, [4 x i64], i32, i64, i64, i32, i32, i32, i8, %union.int_mv, i8, i8, i32, [4 x %struct.mv], i8, i32, i8 }
%struct.MB_MODE_INFO_EXT = type { [4 x [2 x %union.int_mv]], [4 x i8] }
%struct.PC_TREE = type { i32, i32, i8, %struct.PICK_MODE_CONTEXT, [2 x %struct.PICK_MODE_CONTEXT], [2 x %struct.PICK_MODE_CONTEXT], %union.anon, %struct.mv }
%union.anon = type { [4 x %struct.PC_TREE*] }
%struct.VP9Common = type { %struct.vpx_internal_error_info, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, %struct.yv12_buffer_config*, %struct.RefCntBuffer*, %struct.RefCntBuffer*, [8 x i32], [8 x i32], [3 x %struct.RefBuffer], i32, i32, %struct.yv12_buffer_config, %struct.yv12_buffer_config, i32, i32, i32, i32, i32, i8, i8, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, [8 x [2 x i16]], [8 x [2 x i16]], i32, %struct.MODE_INFO*, %struct.MODE_INFO*, %struct.MODE_INFO*, %struct.MODE_INFO*, i32 (%struct.VP9Common*, i32)*, void (%struct.VP9Common*)*, void (%struct.VP9Common*)*, %struct.MODE_INFO**, %struct.MODE_INFO**, %struct.MODE_INFO**, %struct.MODE_INFO**, i32, i32, i32, [2 x i8*], i8*, i8*, i32, i8, [11 x i8], %struct.loop_filter_info_n, i32, [4 x i32], %struct.loopfilter, %struct.segmentation, i8, [2 x i8], i32, %struct.frame_contexts*, %struct.frame_contexts*, i32, %struct.FRAME_COUNTS, i32, i32, i32, i32, i32, %struct.postproc_state, i32, i32, i32, i32, i32, i32, %struct.BufferPool*, i8*, i8*, i32, i32, [8 x i8] }
%struct.RefCntBuffer = type { i32, %struct.MV_REF*, i32, i32, i8, i32, i32, %struct.vpx_codec_frame_buffer, %struct.yv12_buffer_config }
%struct.MV_REF = type { [2 x %union.int_mv], [2 x i8] }
%struct.vpx_codec_frame_buffer = type { i8*, i64, i8* }
%struct.loop_filter_info_n = type { [64 x %struct.loop_filter_thresh], [8 x [4 x [2 x i8]]] }
%struct.loop_filter_thresh = type { [16 x i8], [16 x i8], [16 x i8] }
%struct.loopfilter = type { i32, i32, i32, i32, i8, i8, [4 x i8], [4 x i8], [2 x i8], [2 x i8], %struct.LOOP_FILTER_MASK*, i32 }
%struct.LOOP_FILTER_MASK = type { [4 x i64], [4 x i64], i64, [4 x i16], [4 x i16], i16, [64 x i8] }
%struct.postproc_state = type { i32, i32, i32, i32, %struct.MODE_INFO*, %struct.MODE_INFO*, i32, i8*, i8* }
%struct.BufferPool = type { i8*, i32 (i8*, i64, %struct.vpx_codec_frame_buffer*)*, i32 (i8*, %struct.vpx_codec_frame_buffer*)*, [12 x %struct.RefCntBuffer], %struct.InternalFrameBufferList }
%struct.InternalFrameBufferList = type { i32, %struct.InternalFrameBuffer* }
%struct.InternalFrameBuffer = type { i8*, i64, i32 }
%struct.VP9EncoderConfig = type { i32, i32, i32, i32, i32, double, %struct.vpx_rational, %struct.vpx_rational64, i64, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i64, i64, i64, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, [12 x i32], [5 x i32], [5 x i32], [5 x i32], i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, %struct.vpx_fixed_buf, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }
%struct.vpx_rational = type { i32, i32 }
%struct.vpx_rational64 = type { i64, i32 }
%struct.vpx_fixed_buf = type { i8*, i64 }
%struct.lookahead_ctx = type { i32, i32, i32, i32, i32, %struct.lookahead_entry* }
%struct.lookahead_entry = type { %struct.yv12_buffer_config, i64, i64, i32, i64 }
%struct.TplDepFrame = type { i8, %struct.TplDepStats*, i32, i32, i32, i32, i32, i32 }
%struct.TplDepStats = type { i64, i64, i64, i64, i64, i32, %union.int_mv }
%struct.EncFrameBuf = type { i32, i32, %struct.yv12_buffer_config }
%union.pthread_mutex_t = type { %struct.__pthread_mutex_s }
%struct.__pthread_mutex_s = type { i32, i32, i32, i32, i32, i16, i16, %struct.__pthread_internal_list }
%struct.__pthread_internal_list = type { %struct.__pthread_internal_list*, %struct.__pthread_internal_list* }
%struct.KMEANS_DATA = type { double, i32, i32 }
%struct.TileDataEnc = type { %struct.TileInfo, [13 x [30 x i32]], [13 x [30 x i8]], %struct.FIRSTPASS_DATA, %struct.VP9RowMTSyncData, i32* }
%struct.FIRSTPASS_DATA = type { double, double, i64, i64, i64, i64, i32, i32, double, double, double, i32, i32, i32, i32, i32, i32, i32, i64, i64, i32, i32 }
%struct.VP9RowMTSyncData = type { %union.pthread_mutex_t*, %union.pthread_cond_t*, i32*, i32, i32 }
%union.pthread_cond_t = type { %struct.__pthread_cond_s }
%struct.__pthread_cond_s = type { %union.anon.0, %union.anon.1, [2 x i32], [2 x i32], i32, i32, [2 x i32] }
%union.anon.0 = type { i64 }
%union.anon.1 = type { i64 }
%struct.TOKENEXTRA = type { i8*, i16, i32 }
%struct.TOKENLIST = type { %struct.TOKENEXTRA*, %struct.TOKENEXTRA*, i32 }
%struct.RD_OPT = type { [30 x i32], [6 x i32], [8 x [13 x [30 x i32]]], [4 x [3 x i64]], [4 x [4 x i64]], i32, i32, double }
%struct.CODING_CONTEXT = type { [4 x i32], [2 x [32767 x i32]], [2 x [32767 x i32]], [3 x i8], i8*, [4 x i8], [2 x i8], %struct.frame_contexts }
%struct.RATE_CONTROL = type { i32, i32, i32, i32, [2 x i32], i32, i32, i32, i32, i32, [5 x double], i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, [2 x i32], double, double, i64, i64, i64, i64, i32, i32, i32, i32, i32, i32, i32, i64, i64, i64, i32, i32, i64, i64, i64, i32, i32, i32, i32, i32, i32, i32, [2 x i32], [2 x i32], [5 x i32], i32, i32, [25 x i64], i64, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, double, i32, i32, i32, i32, i32, [5 x i32], double, i32, i32, i32, i32 }
%struct.vpx_codec_pkt_list = type { i32, i32, [1 x %struct.vpx_codec_cx_pkt] }
%struct.vpx_codec_cx_pkt = type { i32, %union.anon.3 }
%union.anon.3 = type { %struct.anon.4, [40 x i8] }
%struct.anon.4 = type { i8*, i64, i64, i64, i32, i32, [5 x i32], [5 x i32], [5 x i8] }
%struct.MBGRAPH_FRAME_STATS = type { %struct.MBGRAPH_MB_STATS* }
%struct.MBGRAPH_MB_STATS = type { [4 x %struct.anon.5] }
%struct.anon.5 = type { i32, %union.anon.6 }
%union.anon.6 = type { %union.int_mv }
%struct.SPEED_FEATURES = type { %struct.MV_SPEED_FEATURES, i32, i32, i32, i32, i8, i32, i32, i32, i32, i32, i32, i32, double, i32, i32, i32, double, i32, i32, i32, i32, i32, i32, i32, i8, i32, i32, i8, i8, i32, i32, i8, i8, i8, i32, i32, i32, i32, i32, i32, [4 x %struct.MESH_PATTERN], i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, [4 x i32], [4 x i32], [13 x i32], i32, i32, i32, i32, i32, [13 x i32], i32, i32, i32, i8, i32, i32, i32, i8, i32, i32, i32, %struct.PARTITION_SEARCH_BREAKOUT_THR, %struct.anon.7, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }
%struct.MV_SPEED_FEATURES = type { i32, i32, i32, i32, i32, i32, i32, %struct.ADAPT_SUBPEL_FORCE_STOP, i32 }
%struct.ADAPT_SUBPEL_FORCE_STOP = type { i32, i32, i32 }
%struct.MESH_PATTERN = type { i32, i32 }
%struct.PARTITION_SEARCH_BREAKOUT_THR = type { i64, i32 }
%struct.anon.7 = type { i32, [3 x float], i32, i32, [4 x i32] }
%struct.CYCLIC_REFRESH = type { i32, i32, i32, i32, i32, i32, i32, i32, i8*, i8*, i64, i64, i16, double, i32, double, [3 x i32], i32, double, i32, i32, i32 }
%struct.ActiveMap = type { i32, i32, i8* }
%struct.vp9_variance_vtable = type { i32 (i8*, i32, i8*, i32)*, i32 (i8*, i32, i8*, i32, i8*)*, i32 (i8*, i32, i8*, i32, i32*)*, i32 (i8*, i32, i32, i32, i8*, i32, i32*)*, i32 (i8*, i32, i32, i32, i8*, i32, i32*, i8*)*, void (i8*, i32, i8**, i32, i32*)*, void (i8*, i32, i8*, i32, i32*)* }
%struct.scale_factors = type { i32, i32, i32, i32, i32 (i32, %struct.scale_factors*)*, i32 (i32, %struct.scale_factors*)*, [2 x [2 x [2 x void (i8*, i64, i8*, i64, [8 x i16]*, i32, i32, i32, i32, i32, i32)*]]], [2 x [2 x [2 x void (i16*, i64, i16*, i64, [8 x i16]*, i32, i32, i32, i32, i32, i32, i32)*]]] }
%struct.TWO_PASS = type { i32, i32, %struct.FIRSTPASS_STATS, %struct.FIRSTPASS_STATS, %struct.FIRSTPASS_STATS*, %struct.FIRSTPASS_STATS*, %struct.FIRSTPASS_STATS*, %struct.FIRST_PASS_INFO, %struct.FIRSTPASS_STATS, i32, i64, double, double, double, double, %struct.FP_MB_FLOAT_STATS*, i32, i64, double, double, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, [6 x i32], %struct.GF_GROUP }
%struct.FIRST_PASS_INFO = type { %struct.FIRSTPASS_STATS*, i32 }
%struct.FIRSTPASS_STATS = type { double, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double, i64 }
%struct.FP_MB_FLOAT_STATS = type { double, double, double }
%struct.GF_GROUP = type { i8, [252 x i32], [252 x i32], [252 x i8], [252 x i8], [252 x i8], [252 x i32], [252 x i32], i32, i32, [50 x i32], i32, i32, i32, i32, i32, i32 }
%struct.yv12_buffer_config = type { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i8*, i8*, i8*, i8*, i8*, i64, i32, i64, i32, i32, i32, i32, i32, i32, i32, i32, i32 }
%struct.ALT_REF_AQ = type opaque
%struct.SVC = type { i32, i32, i32, i32, i32, i32, %struct.lookahead_entry, i32, [25 x %struct.yv12_buffer_config], %struct.yv12_buffer_config, i32, i32, [12 x %struct.LAYER_CONTEXT], i32, [12 x i32], [12 x i32], [12 x i32], [12 x i32], i32, i32, i32, [2 x %struct.BUFFER_LONGTERM_REF], i32, i32, i32, i32, [5 x i8], [5 x i32], i8*, [12 x i32], [12 x i32], [12 x i32], i32, i32, i32, [12 x i32], [12 x i32], [12 x i32], [12 x i32], [12 x i32], i32, i32, i32, i32, i32, [5 x i32], [5 x i8], [5 x i8], [5 x i8], [5 x i8], [5 x i8], [5 x i8], [5 x i32], [8 x i8], [8 x i8], [5 x i32], i8, i8, i8, [8 x i8], i32, [5 x i32], i32, [5 x i64], i64, i64, [5 x i64], i32, i32, i32, i32 }
%struct.LAYER_CONTEXT = type { %struct.RATE_CONTROL, i32, i32, double, i32, i32, i32, i32, i32, i32, i32, %struct.TWO_PASS, %struct.vpx_fixed_buf, i32, i32, i32, i32, %struct.lookahead_entry*, i32, i32, i32, i64, i32, i8*, i8*, i8*, i32, i32, i32, i8, i32 }
%struct.BUFFER_LONGTERM_REF = type { i32, i32 }
%struct.diff = type { i32, i32, i32 }
%struct.search_site_config = type { [88 x %struct.mv], [88 x i64], i32, i32 }
%struct.vp9_denoiser = type { %struct.yv12_buffer_config*, %struct.yv12_buffer_config*, %struct.yv12_buffer_config, i32, i32, i32, i32, i32, i32, i32 }
%struct.noise_estimate = type { i32, i32, i32, i32, i32, i32, i32, i32, i32 }
%struct.VPxWorker = type { %struct.VPxWorkerImpl*, i32, i32 (i8*, i8*)*, i8*, i8*, i32 }
%struct.VPxWorkerImpl = type opaque
%struct.EncWorkerData = type { %struct.VP9_COMP*, %struct.ThreadData*, i32, i32, [64 x i32] }
%struct.VP9LfSyncData = type { %union.pthread_mutex_t*, %union.pthread_cond_t*, i32*, i32, i32, %struct.LoopFilterWorkerData*, i32, i32, %union.pthread_mutex_t*, %union.pthread_mutex_t*, %union.pthread_cond_t*, i32*, i32 }
%struct.LoopFilterWorkerData = type { %struct.yv12_buffer_config*, %struct.VP9Common*, [3 x %struct.macroblockd_plane], i32, i32, i32 }
%struct.VP9BitstreamWorkerData = type opaque
%struct.Vp9LevelInfo = type { %struct.Vp9LevelStats, %struct.Vp9LevelSpec }
%struct.Vp9LevelStats = type { i8, i32, i64, i64, double, %struct.FrameWindowBuffer, i32 }
%struct.FrameWindowBuffer = type { [128 x %struct.FrameRecord], i8, i8 }
%struct.FrameRecord = type { i64, i32, i32 }
%struct.Vp9LevelSpec = type { i32, i64, i32, i32, double, double, double, i8, i32, i8 }
%struct.MultiThreadHandle = type { i32, i32, i32, [4 x i32], %struct.JobQueue*, i32, [64 x %struct.RowMTInfo], [80 x i32] }
%struct.JobQueue = type { i8*, %struct.JobNode }
%struct.JobNode = type { i32, i32, i32 }
%struct.RowMTInfo = type { %struct.JobQueueHandle, %union.pthread_mutex_t }
%struct.JobQueueHandle = type { i8*, i32 }
%struct.ARNRFilterData = type { [25 x %struct.yv12_buffer_config*], i32, i32, i32, %struct.scale_factors }
%struct.LevelConstraint = type { i8, i8, i32, double }
%struct.vpx_roi_map = type { i8, i8*, i32, i32, [8 x i32], [8 x i32], [8 x i32], [8 x i32], [4 x i32] }
%struct.EXT_RATECTRL = type { i32, i8*, %struct.vpx_rc_funcs, %struct.vpx_rc_config, %struct.vpx_rc_firstpass_stats }
%struct.vpx_rc_funcs = type { i32 (i8*, %struct.vpx_rc_config*, i8**)*, i32 (i8*, %struct.vpx_rc_firstpass_stats*)*, i32 (i8*, %struct.vpx_rc_encodeframe_info*, %struct.vpx_rc_encodeframe_decision*)*, i32 (i8*, %struct.vpx_rc_encodeframe_result*)*, i32 (i8*)*, i8* }
%struct.vpx_rc_encodeframe_info = type { i32, i32, i32, i32, [3 x i32], [3 x i32] }
%struct.vpx_rc_encodeframe_decision = type { i32 }
%struct.vpx_rc_encodeframe_result = type { i64, i64, i64 }
%struct.vpx_rc_config = type { i32, i32, i32, i32, i32, i32 }
%struct.vpx_rc_firstpass_stats = type { %struct.vpx_rc_frame_stats*, i32 }
%struct.vpx_rc_frame_stats = type { double, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double }

@vp9_prob_cost = external local_unnamed_addr constant [256 x i16], align 16
@num_8x8_blocks_wide_lookup = external local_unnamed_addr constant [13 x i8], align 1
@num_8x8_blocks_high_lookup = external local_unnamed_addr constant [13 x i8], align 1
@subsize_lookup = external local_unnamed_addr constant [4 x [13 x i8]], align 16

; Function Attrs: nofree norecurse nounwind ssp uwtable writeonly
define hidden void @vp9_enable_segmentation(%struct.segmentation* nocapture) local_unnamed_addr #0 {
  %2 = getelementptr inbounds %struct.segmentation, %struct.segmentation* %0, i64 0, i32 0
  store i8 1, i8* %2, align 4
  %3 = getelementptr inbounds %struct.segmentation, %struct.segmentation* %0, i64 0, i32 1
  store i8 1, i8* %3, align 1
  %4 = getelementptr inbounds %struct.segmentation, %struct.segmentation* %0, i64 0, i32 2
  store i8 1, i8* %4, align 2
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable writeonly
define hidden void @vp9_disable_segmentation(%struct.segmentation* nocapture) local_unnamed_addr #0 {
  %2 = getelementptr inbounds %struct.segmentation, %struct.segmentation* %0, i64 0, i32 0
  store i8 0, i8* %2, align 4
  %3 = getelementptr inbounds %struct.segmentation, %struct.segmentation* %0, i64 0, i32 1
  store i8 0, i8* %3, align 1
  %4 = getelementptr inbounds %struct.segmentation, %struct.segmentation* %0, i64 0, i32 2
  store i8 0, i8* %4, align 2
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @vp9_set_segment_data(%struct.segmentation* nocapture, i8* nocapture readonly, i8 zeroext) local_unnamed_addr #1 {
  %4 = getelementptr inbounds %struct.segmentation, %struct.segmentation* %0, i64 0, i32 3
  store i8 %2, i8* %4, align 1
  %5 = getelementptr inbounds %struct.segmentation, %struct.segmentation* %0, i64 0, i32 7, i64 0
  %6 = bitcast [4 x i16]* %5 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %6, i8* align 1 %1, i64 64, i1 false)
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #2

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @vp9_disable_segfeature(%struct.segmentation* nocapture, i32, i32) local_unnamed_addr #3 {
  %4 = shl i32 1, %2
  %5 = xor i32 %4, -1
  %6 = sext i32 %1 to i64
  %7 = getelementptr inbounds %struct.segmentation, %struct.segmentation* %0, i64 0, i32 8, i64 %6
  %8 = load i32, i32* %7, align 4
  %9 = and i32 %8, %5
  store i32 %9, i32* %7, align 4
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable writeonly
define hidden void @vp9_clear_segdata(%struct.segmentation* nocapture, i32, i32) local_unnamed_addr #0 {
  %4 = sext i32 %1 to i64
  %5 = zext i32 %2 to i64
  %6 = getelementptr inbounds %struct.segmentation, %struct.segmentation* %0, i64 0, i32 7, i64 %4, i64 %5
  store i16 0, i16* %6, align 2
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @vp9_psnr_aq_mode_setup(%struct.segmentation*) local_unnamed_addr #1 {
  %2 = getelementptr inbounds %struct.segmentation, %struct.segmentation* %0, i64 0, i32 0
  store i8 1, i8* %2, align 4
  %3 = getelementptr inbounds %struct.segmentation, %struct.segmentation* %0, i64 0, i32 1
  store i8 1, i8* %3, align 1
  %4 = getelementptr inbounds %struct.segmentation, %struct.segmentation* %0, i64 0, i32 2
  store i8 1, i8* %4, align 2
  tail call void @vp9_clearall_segfeatures(%struct.segmentation* %0) #7
  %5 = getelementptr inbounds %struct.segmentation, %struct.segmentation* %0, i64 0, i32 3
  store i8 0, i8* %5, align 1
  tail call void @vp9_set_segdata(%struct.segmentation* %0, i32 0, i32 0, i32 -8) #7
  tail call void @vp9_enable_segfeature(%struct.segmentation* %0, i32 0, i32 0) #7
  tail call void @vp9_set_segdata(%struct.segmentation* %0, i32 1, i32 0, i32 -6) #7
  tail call void @vp9_enable_segfeature(%struct.segmentation* %0, i32 1, i32 0) #7
  tail call void @vp9_set_segdata(%struct.segmentation* %0, i32 2, i32 0, i32 -4) #7
  tail call void @vp9_enable_segfeature(%struct.segmentation* %0, i32 2, i32 0) #7
  tail call void @vp9_set_segdata(%struct.segmentation* %0, i32 3, i32 0, i32 -2) #7
  tail call void @vp9_enable_segfeature(%struct.segmentation* %0, i32 3, i32 0) #7
  tail call void @vp9_set_segdata(%struct.segmentation* %0, i32 4, i32 0, i32 0) #7
  tail call void @vp9_enable_segfeature(%struct.segmentation* %0, i32 4, i32 0) #7
  tail call void @vp9_set_segdata(%struct.segmentation* %0, i32 5, i32 0, i32 2) #7
  tail call void @vp9_enable_segfeature(%struct.segmentation* %0, i32 5, i32 0) #7
  tail call void @vp9_set_segdata(%struct.segmentation* %0, i32 6, i32 0, i32 4) #7
  tail call void @vp9_enable_segfeature(%struct.segmentation* %0, i32 6, i32 0) #7
  tail call void @vp9_set_segdata(%struct.segmentation* %0, i32 7, i32 0, i32 6) #7
  tail call void @vp9_enable_segfeature(%struct.segmentation* %0, i32 7, i32 0) #7
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #2

declare void @vp9_clearall_segfeatures(%struct.segmentation*) local_unnamed_addr #4

declare void @vp9_set_segdata(%struct.segmentation*, i32, i32, i32) local_unnamed_addr #4

declare void @vp9_enable_segfeature(%struct.segmentation*, i32, i32) local_unnamed_addr #4

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nounwind ssp uwtable
define hidden void @vp9_perceptual_aq_mode_setup(%struct.VP9_COMP* nocapture readonly, %struct.segmentation*) local_unnamed_addr #1 {
  %3 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 31
  %4 = load i32, i32* %3, align 8
  %5 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 8, i32 38
  %6 = load i32, i32* %5, align 4
  %7 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 8, i32 80
  %8 = load i32, i32* %7, align 16
  %9 = tail call double @vp9_convert_qindex_to_q(i32 %6, i32 %8) #7
  %10 = sdiv i32 %4, 2
  %11 = sext i32 %10 to i64
  %12 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 28, i64 %11
  %13 = load double, double* %12, align 8
  %14 = getelementptr inbounds %struct.segmentation, %struct.segmentation* %1, i64 0, i32 0
  store i8 1, i8* %14, align 4
  %15 = getelementptr inbounds %struct.segmentation, %struct.segmentation* %1, i64 0, i32 1
  store i8 1, i8* %15, align 1
  %16 = getelementptr inbounds %struct.segmentation, %struct.segmentation* %1, i64 0, i32 2
  store i8 1, i8* %16, align 2
  tail call void @vp9_clearall_segfeatures(%struct.segmentation* %1) #7
  %17 = getelementptr inbounds %struct.segmentation, %struct.segmentation* %1, i64 0, i32 3
  store i8 0, i8* %17, align 1
  %18 = icmp sgt i32 %4, 1
  br i1 %18, label %19, label %35

19:                                               ; preds = %2
  %20 = zext i32 %10 to i64
  br label %21

21:                                               ; preds = %21, %19
  %22 = phi i64 [ 0, %19 ], [ %33, %21 ]
  %23 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 28, i64 %22
  %24 = load double, double* %23, align 8
  %25 = fsub double %13, %24
  %26 = fmul double %25, 2.500000e-01
  %27 = fadd double %26, 1.000000e+00
  %28 = fdiv double %9, %27
  %29 = load i32, i32* %7, align 16
  %30 = tail call i32 @vp9_convert_q_to_qindex(double %28, i32 %29) #7
  %31 = sub nsw i32 %30, %6
  %32 = trunc i64 %22 to i32
  tail call void @vp9_set_segdata(%struct.segmentation* %1, i32 %32, i32 0, i32 %31) #7
  tail call void @vp9_enable_segfeature(%struct.segmentation* %1, i32 %32, i32 0) #7
  %33 = add nuw nsw i64 %22, 1
  %34 = icmp eq i64 %33, %20
  br i1 %34, label %35, label %21

35:                                               ; preds = %21, %2
  %36 = phi i32 [ 0, %2 ], [ %10, %21 ]
  tail call void @vp9_set_segdata(%struct.segmentation* %1, i32 %36, i32 0, i32 0) #7
  tail call void @vp9_enable_segfeature(%struct.segmentation* %1, i32 %36, i32 0) #7
  %37 = icmp slt i32 %36, %4
  br i1 %37, label %38, label %55

38:                                               ; preds = %35
  %39 = zext i32 %36 to i64
  %40 = zext i32 %4 to i64
  br label %41

41:                                               ; preds = %41, %38
  %42 = phi i64 [ %39, %38 ], [ %53, %41 ]
  %43 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 28, i64 %42
  %44 = load double, double* %43, align 8
  %45 = fsub double %44, %13
  %46 = fmul double %45, 2.500000e-01
  %47 = fadd double %46, 1.000000e+00
  %48 = fmul double %9, %47
  %49 = load i32, i32* %7, align 16
  %50 = tail call i32 @vp9_convert_q_to_qindex(double %48, i32 %49) #7
  %51 = sub nsw i32 %50, %6
  %52 = trunc i64 %42 to i32
  tail call void @vp9_set_segdata(%struct.segmentation* %1, i32 %52, i32 0, i32 %51) #7
  tail call void @vp9_enable_segfeature(%struct.segmentation* %1, i32 %52, i32 0) #7
  %53 = add nuw nsw i64 %42, 1
  %54 = icmp eq i64 %53, %40
  br i1 %54, label %55, label %41

55:                                               ; preds = %41, %35
  ret void
}

declare double @vp9_convert_qindex_to_q(i32, i32) local_unnamed_addr #4

declare i32 @vp9_convert_q_to_qindex(double, i32) local_unnamed_addr #4

; Function Attrs: nounwind ssp uwtable
define hidden void @vp9_choose_segmap_coding_method(%struct.VP9Common*, %struct.macroblockd* nocapture) local_unnamed_addr #1 {
  %3 = alloca [3 x [2 x i32]], align 16
  %4 = alloca [8 x i32], align 16
  %5 = alloca [8 x i32], align 16
  %6 = alloca [7 x i8], align 1
  %7 = alloca [7 x i8], align 1
  %8 = alloca [3 x i8], align 1
  %9 = alloca %struct.TileInfo, align 4
  %10 = bitcast [3 x [2 x i32]]* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %10) #7
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %10, i8 0, i64 24, i1 false)
  %11 = bitcast [8 x i32]* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %11) #7
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %11, i8 0, i64 32, i1 false)
  %12 = bitcast [8 x i32]* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %12) #7
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %12, i8 0, i64 32, i1 false)
  %13 = getelementptr inbounds [7 x i8], [7 x i8]* %6, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 7, i8* nonnull %13) #7
  %14 = getelementptr inbounds [7 x i8], [7 x i8]* %7, i64 0, i64 0
  call void @llvm.memset.p0i8.i64(i8* nonnull align 1 %13, i8 -86, i64 7, i1 false)
  call void @llvm.lifetime.start.p0i8(i64 7, i8* nonnull %14) #7
  %15 = getelementptr inbounds [3 x i8], [3 x i8]* %8, i64 0, i64 0
  call void @llvm.memset.p0i8.i64(i8* nonnull align 1 %14, i8 -86, i64 7, i1 false)
  call void @llvm.lifetime.start.p0i8(i64 3, i8* nonnull %15) #7
  store i8 -86, i8* %15, align 1
  %16 = getelementptr inbounds [3 x i8], [3 x i8]* %8, i64 0, i64 1
  store i8 -86, i8* %16, align 1
  %17 = getelementptr inbounds [3 x i8], [3 x i8]* %8, i64 0, i64 2
  store i8 -86, i8* %17, align 1
  %18 = getelementptr inbounds %struct.VP9Common, %struct.VP9Common* %0, i64 0, i32 69, i32 5, i64 0
  %19 = getelementptr inbounds %struct.VP9Common, %struct.VP9Common* %0, i64 0, i32 69, i32 6, i64 0
  %20 = getelementptr inbounds %struct.VP9Common, %struct.VP9Common* %0, i64 0, i32 85
  call void @llvm.memset.p0i8.i64(i8* align 1 %18, i8 -1, i64 10, i1 false)
  %21 = load i32, i32* %20, align 8
  %22 = icmp eq i32 %21, 31
  br i1 %22, label %76, label %23

23:                                               ; preds = %2
  %24 = bitcast %struct.TileInfo* %9 to i8*
  %25 = getelementptr inbounds %struct.TileInfo, %struct.TileInfo* %9, i64 0, i32 2
  %26 = getelementptr inbounds %struct.TileInfo, %struct.TileInfo* %9, i64 0, i32 3
  %27 = getelementptr inbounds %struct.VP9Common, %struct.VP9Common* %0, i64 0, i32 53
  %28 = getelementptr inbounds %struct.VP9Common, %struct.VP9Common* %0, i64 0, i32 33
  %29 = getelementptr inbounds [8 x i32], [8 x i32]* %4, i64 0, i64 0
  %30 = getelementptr inbounds [3 x [2 x i32]], [3 x [2 x i32]]* %3, i64 0, i64 0
  %31 = getelementptr inbounds [8 x i32], [8 x i32]* %5, i64 0, i64 0
  %32 = getelementptr inbounds %struct.VP9Common, %struct.VP9Common* %0, i64 0, i32 36
  %33 = bitcast %struct.TileInfo* %9 to i8*
  br label %34

34:                                               ; preds = %23, %71
  %35 = phi i32 [ 0, %23 ], [ %72, %71 ]
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %24) #7
  call void @llvm.memset.p0i8.i64(i8* nonnull align 4 %33, i8 -86, i64 16, i1 false)
  call void @vp9_tile_init(%struct.TileInfo* nonnull %9, %struct.VP9Common* %0, i32 0, i32 %35) #7
  %36 = load i32, i32* %25, align 4
  %37 = load i32, i32* %28, align 16
  %38 = icmp sgt i32 %37, 0
  br i1 %38, label %39, label %71

39:                                               ; preds = %34
  %40 = load %struct.MODE_INFO**, %struct.MODE_INFO*** %27, align 8
  %41 = sext i32 %36 to i64
  %42 = getelementptr inbounds %struct.MODE_INFO*, %struct.MODE_INFO** %40, i64 %41
  %43 = load i32, i32* %26, align 4
  br label %44

44:                                               ; preds = %65, %39
  %45 = phi i32 [ %61, %65 ], [ %37, %39 ]
  %46 = phi i32 [ %62, %65 ], [ %43, %39 ]
  %47 = phi i32 [ %70, %65 ], [ %36, %39 ]
  %48 = phi %struct.MODE_INFO** [ %69, %65 ], [ %42, %39 ]
  %49 = phi i32 [ %63, %65 ], [ 0, %39 ]
  %50 = icmp slt i32 %47, %46
  br i1 %50, label %51, label %60

51:                                               ; preds = %44, %51
  %52 = phi %struct.MODE_INFO** [ %55, %51 ], [ %48, %44 ]
  %53 = phi i32 [ %54, %51 ], [ %47, %44 ]
  call fastcc void @count_segs_sb(%struct.VP9Common* %0, %struct.macroblockd* %1, %struct.TileInfo* nonnull %9, %struct.MODE_INFO** %52, i32* nonnull %29, [2 x i32]* nonnull %30, i32* nonnull %31, i32 %49, i32 %53, i8 zeroext 12)
  %54 = add nsw i32 %53, 8
  %55 = getelementptr inbounds %struct.MODE_INFO*, %struct.MODE_INFO** %52, i64 8
  %56 = load i32, i32* %26, align 4
  %57 = icmp slt i32 %54, %56
  br i1 %57, label %51, label %58

58:                                               ; preds = %51
  %59 = load i32, i32* %28, align 16
  br label %60

60:                                               ; preds = %58, %44
  %61 = phi i32 [ %59, %58 ], [ %45, %44 ]
  %62 = phi i32 [ %56, %58 ], [ %46, %44 ]
  %63 = add nuw nsw i32 %49, 8
  %64 = icmp slt i32 %63, %61
  br i1 %64, label %65, label %71

65:                                               ; preds = %60
  %66 = load i32, i32* %32, align 4
  %67 = shl nsw i32 %66, 3
  %68 = sext i32 %67 to i64
  %69 = getelementptr inbounds %struct.MODE_INFO*, %struct.MODE_INFO** %48, i64 %68
  %70 = load i32, i32* %25, align 4
  br label %44

71:                                               ; preds = %60, %34
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %24) #7
  %72 = add nuw nsw i32 %35, 1
  %73 = load i32, i32* %20, align 8
  %74 = shl i32 1, %73
  %75 = icmp slt i32 %72, %74
  br i1 %75, label %34, label %76

76:                                               ; preds = %71, %2
  %77 = getelementptr inbounds [8 x i32], [8 x i32]* %4, i64 0, i64 0
  call fastcc void @calc_segtree_probs(i32* nonnull %77, i8* nonnull %13)
  %78 = call fastcc i32 @cost_segmap(i32* nonnull %77, i8* nonnull %13)
  %79 = getelementptr inbounds %struct.VP9Common, %struct.VP9Common* %0, i64 0, i32 23
  %80 = load i32, i32* %79, align 4
  %81 = icmp eq i32 %80, 0
  br i1 %81, label %131, label %82

82:                                               ; preds = %76
  %83 = getelementptr inbounds %struct.VP9Common, %struct.VP9Common* %0, i64 0, i32 27
  %84 = load i8, i8* %83, align 4
  %85 = icmp eq i8 %84, 0
  br i1 %85, label %86, label %131

86:                                               ; preds = %82
  %87 = getelementptr inbounds [8 x i32], [8 x i32]* %5, i64 0, i64 0
  call fastcc void @calc_segtree_probs(i32* nonnull %87, i8* nonnull %14)
  %88 = call fastcc i32 @cost_segmap(i32* nonnull %87, i8* nonnull %14)
  %89 = getelementptr inbounds [3 x [2 x i32]], [3 x [2 x i32]]* %3, i64 0, i64 0, i64 0
  %90 = load i32, i32* %89, align 16
  %91 = getelementptr inbounds [3 x [2 x i32]], [3 x [2 x i32]]* %3, i64 0, i64 0, i64 1
  %92 = load i32, i32* %91, align 4
  %93 = add i32 %92, %90
  %94 = icmp eq i32 %93, 0
  br i1 %94, label %111, label %95

95:                                               ; preds = %86
  %96 = zext i32 %90 to i64
  %97 = shl nuw nsw i64 %96, 8
  %98 = lshr i32 %93, 1
  %99 = zext i32 %98 to i64
  %100 = add nuw nsw i64 %97, %99
  %101 = zext i32 %93 to i64
  %102 = udiv i64 %100, %101
  %103 = trunc i64 %102 to i32
  %104 = sub nsw i32 255, %103
  %105 = lshr i32 %104, 23
  %106 = or i32 %105, %103
  %107 = icmp eq i32 %103, 0
  %108 = zext i1 %107 to i32
  %109 = or i32 %106, %108
  %110 = trunc i32 %109 to i8
  br label %111

111:                                              ; preds = %86, %95
  %112 = phi i8 [ %110, %95 ], [ -128, %86 ]
  store i8 %112, i8* %15, align 1
  %113 = zext i8 %112 to i64
  %114 = getelementptr inbounds [256 x i16], [256 x i16]* @vp9_prob_cost, i64 0, i64 %113
  %115 = load i16, i16* %114, align 2
  %116 = zext i16 %115 to i32
  %117 = mul nsw i32 %90, %116
  %118 = sub nuw nsw i64 256, %113
  %119 = getelementptr inbounds [256 x i16], [256 x i16]* @vp9_prob_cost, i64 0, i64 %118
  %120 = load i16, i16* %119, align 2
  %121 = zext i16 %120 to i32
  %122 = mul nsw i32 %92, %121
  %123 = add i32 %117, %88
  %124 = add i32 %123, %122
  %125 = getelementptr inbounds [3 x [2 x i32]], [3 x [2 x i32]]* %3, i64 0, i64 1, i64 0
  %126 = load i32, i32* %125, align 8
  %127 = getelementptr inbounds [3 x [2 x i32]], [3 x [2 x i32]]* %3, i64 0, i64 1, i64 1
  %128 = load i32, i32* %127, align 4
  %129 = add i32 %128, %126
  %130 = icmp eq i32 %129, 0
  br i1 %130, label %153, label %137

131:                                              ; preds = %82, %76
  %132 = getelementptr inbounds %struct.VP9Common, %struct.VP9Common* %0, i64 0, i32 69, i32 4
  br label %134

133:                                              ; preds = %189
  store i8 1, i8* %204, align 4
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %18, i8* nonnull align 1 %14, i64 7, i1 false)
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %19, i8* nonnull align 1 %15, i64 3, i1 false)
  br label %136

134:                                              ; preds = %131, %189
  %135 = phi i8* [ %132, %131 ], [ %204, %189 ]
  store i8 0, i8* %135, align 4
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %18, i8* nonnull align 1 %13, i64 7, i1 false)
  br label %136

136:                                              ; preds = %134, %133
  call void @llvm.lifetime.end.p0i8(i64 3, i8* nonnull %15) #7
  call void @llvm.lifetime.end.p0i8(i64 7, i8* nonnull %14) #7
  call void @llvm.lifetime.end.p0i8(i64 7, i8* nonnull %13) #7
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %12) #7
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %11) #7
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %10) #7
  ret void

137:                                              ; preds = %111
  %138 = zext i32 %126 to i64
  %139 = shl nuw nsw i64 %138, 8
  %140 = lshr i32 %129, 1
  %141 = zext i32 %140 to i64
  %142 = add nuw nsw i64 %139, %141
  %143 = zext i32 %129 to i64
  %144 = udiv i64 %142, %143
  %145 = trunc i64 %144 to i32
  %146 = sub nsw i32 255, %145
  %147 = lshr i32 %146, 23
  %148 = or i32 %147, %145
  %149 = icmp eq i32 %145, 0
  %150 = zext i1 %149 to i32
  %151 = or i32 %148, %150
  %152 = trunc i32 %151 to i8
  br label %153

153:                                              ; preds = %137, %111
  %154 = phi i8 [ %152, %137 ], [ -128, %111 ]
  store i8 %154, i8* %16, align 1
  %155 = zext i8 %154 to i64
  %156 = getelementptr inbounds [256 x i16], [256 x i16]* @vp9_prob_cost, i64 0, i64 %155
  %157 = load i16, i16* %156, align 2
  %158 = zext i16 %157 to i32
  %159 = mul nsw i32 %126, %158
  %160 = sub nuw nsw i64 256, %155
  %161 = getelementptr inbounds [256 x i16], [256 x i16]* @vp9_prob_cost, i64 0, i64 %160
  %162 = load i16, i16* %161, align 2
  %163 = zext i16 %162 to i32
  %164 = mul nsw i32 %128, %163
  %165 = add i32 %159, %124
  %166 = add i32 %165, %164
  %167 = getelementptr inbounds [3 x [2 x i32]], [3 x [2 x i32]]* %3, i64 0, i64 2, i64 0
  %168 = load i32, i32* %167, align 16
  %169 = getelementptr inbounds [3 x [2 x i32]], [3 x [2 x i32]]* %3, i64 0, i64 2, i64 1
  %170 = load i32, i32* %169, align 4
  %171 = add i32 %170, %168
  %172 = icmp eq i32 %171, 0
  br i1 %172, label %189, label %173

173:                                              ; preds = %153
  %174 = zext i32 %168 to i64
  %175 = shl nuw nsw i64 %174, 8
  %176 = lshr i32 %171, 1
  %177 = zext i32 %176 to i64
  %178 = add nuw nsw i64 %175, %177
  %179 = zext i32 %171 to i64
  %180 = udiv i64 %178, %179
  %181 = trunc i64 %180 to i32
  %182 = sub nsw i32 255, %181
  %183 = lshr i32 %182, 23
  %184 = or i32 %183, %181
  %185 = icmp eq i32 %181, 0
  %186 = zext i1 %185 to i32
  %187 = or i32 %184, %186
  %188 = trunc i32 %187 to i8
  br label %189

189:                                              ; preds = %173, %153
  %190 = phi i8 [ %188, %173 ], [ -128, %153 ]
  store i8 %190, i8* %17, align 1
  %191 = zext i8 %190 to i64
  %192 = getelementptr inbounds [256 x i16], [256 x i16]* @vp9_prob_cost, i64 0, i64 %191
  %193 = load i16, i16* %192, align 2
  %194 = zext i16 %193 to i32
  %195 = mul nsw i32 %168, %194
  %196 = sub nuw nsw i64 256, %191
  %197 = getelementptr inbounds [256 x i16], [256 x i16]* @vp9_prob_cost, i64 0, i64 %196
  %198 = load i16, i16* %197, align 2
  %199 = zext i16 %198 to i32
  %200 = mul nsw i32 %170, %199
  %201 = add i32 %195, %166
  %202 = add i32 %201, %200
  %203 = icmp slt i32 %202, %78
  %204 = getelementptr inbounds %struct.VP9Common, %struct.VP9Common* %0, i64 0, i32 69, i32 4
  br i1 %203, label %133, label %134
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #2

declare void @vp9_tile_init(%struct.TileInfo*, %struct.VP9Common*, i32, i32) local_unnamed_addr #4

; Function Attrs: nofree nounwind ssp uwtable
define internal fastcc void @count_segs_sb(%struct.VP9Common* nocapture readonly, %struct.macroblockd* nocapture, %struct.TileInfo* nocapture readonly, %struct.MODE_INFO**, i32* nocapture, [2 x i32]* nocapture, i32* nocapture, i32, i32, i8 zeroext) unnamed_addr #5 {
  %11 = getelementptr inbounds %struct.VP9Common, %struct.VP9Common* %0, i64 0, i32 36
  %12 = load i32, i32* %11, align 4
  %13 = zext i8 %9 to i64
  %14 = getelementptr inbounds [13 x i8], [13 x i8]* @num_8x8_blocks_wide_lookup, i64 0, i64 %13
  %15 = load i8, i8* %14, align 1
  %16 = zext i8 %15 to i32
  %17 = lshr i32 %16, 1
  %18 = getelementptr inbounds %struct.VP9Common, %struct.VP9Common* %0, i64 0, i32 33
  %19 = load i32, i32* %18, align 16
  %20 = icmp sgt i32 %19, %7
  br i1 %20, label %21, label %66

21:                                               ; preds = %10
  %22 = getelementptr inbounds %struct.VP9Common, %struct.VP9Common* %0, i64 0, i32 35
  %23 = load i32, i32* %22, align 8
  %24 = icmp sgt i32 %23, %8
  br i1 %24, label %25, label %66

25:                                               ; preds = %21
  %26 = load %struct.MODE_INFO*, %struct.MODE_INFO** %3, align 8
  %27 = getelementptr inbounds %struct.MODE_INFO, %struct.MODE_INFO* %26, i64 0, i32 0
  %28 = load i8, i8* %27, align 4
  %29 = zext i8 %28 to i64
  %30 = getelementptr inbounds [13 x i8], [13 x i8]* @num_8x8_blocks_wide_lookup, i64 0, i64 %29
  %31 = load i8, i8* %30, align 1
  %32 = getelementptr inbounds [13 x i8], [13 x i8]* @num_8x8_blocks_high_lookup, i64 0, i64 %29
  %33 = load i8, i8* %32, align 1
  %34 = icmp eq i8 %31, %15
  %35 = icmp eq i8 %33, %15
  %36 = and i1 %34, %35
  br i1 %36, label %37, label %38

37:                                               ; preds = %25
  tail call fastcc void @count_segs(%struct.VP9Common* %0, %struct.macroblockd* %1, %struct.TileInfo* %2, %struct.MODE_INFO** %3, i32* %4, [2 x i32]* %5, i32* %6, i32 %16, i32 %16, i32 %7, i32 %8)
  br label %66

38:                                               ; preds = %25
  %39 = icmp ult i8 %33, %15
  %40 = and i1 %34, %39
  br i1 %40, label %41, label %46

41:                                               ; preds = %38
  tail call fastcc void @count_segs(%struct.VP9Common* %0, %struct.macroblockd* %1, %struct.TileInfo* %2, %struct.MODE_INFO** %3, i32* %4, [2 x i32]* %5, i32* %6, i32 %16, i32 %17, i32 %7, i32 %8)
  %42 = mul nsw i32 %17, %12
  %43 = sext i32 %42 to i64
  %44 = getelementptr inbounds %struct.MODE_INFO*, %struct.MODE_INFO** %3, i64 %43
  %45 = add nsw i32 %17, %7
  tail call fastcc void @count_segs(%struct.VP9Common* %0, %struct.macroblockd* %1, %struct.TileInfo* %2, %struct.MODE_INFO** %44, i32* %4, [2 x i32]* %5, i32* %6, i32 %16, i32 %17, i32 %45, i32 %8)
  br label %66

46:                                               ; preds = %38
  %47 = icmp ult i8 %31, %15
  %48 = and i1 %47, %35
  br i1 %48, label %49, label %53

49:                                               ; preds = %46
  tail call fastcc void @count_segs(%struct.VP9Common* %0, %struct.macroblockd* %1, %struct.TileInfo* %2, %struct.MODE_INFO** %3, i32* %4, [2 x i32]* %5, i32* %6, i32 %17, i32 %16, i32 %7, i32 %8)
  %50 = zext i32 %17 to i64
  %51 = getelementptr inbounds %struct.MODE_INFO*, %struct.MODE_INFO** %3, i64 %50
  %52 = add nsw i32 %17, %8
  tail call fastcc void @count_segs(%struct.VP9Common* %0, %struct.macroblockd* %1, %struct.TileInfo* %2, %struct.MODE_INFO** %51, i32* %4, [2 x i32]* %5, i32* %6, i32 %17, i32 %16, i32 %7, i32 %52)
  br label %66

53:                                               ; preds = %46
  %54 = getelementptr inbounds [4 x [13 x i8]], [4 x [13 x i8]]* @subsize_lookup, i64 0, i64 3, i64 %13
  %55 = load i8, i8* %54, align 1
  tail call fastcc void @count_segs_sb(%struct.VP9Common* %0, %struct.macroblockd* %1, %struct.TileInfo* %2, %struct.MODE_INFO** %3, i32* %4, [2 x i32]* %5, i32* %6, i32 %7, i32 %8, i8 zeroext %55)
  %56 = zext i32 %17 to i64
  %57 = getelementptr inbounds %struct.MODE_INFO*, %struct.MODE_INFO** %3, i64 %56
  %58 = add nsw i32 %17, %8
  tail call fastcc void @count_segs_sb(%struct.VP9Common* %0, %struct.macroblockd* %1, %struct.TileInfo* %2, %struct.MODE_INFO** %57, i32* %4, [2 x i32]* %5, i32* %6, i32 %7, i32 %58, i8 zeroext %55)
  %59 = mul nsw i32 %17, %12
  %60 = sext i32 %59 to i64
  %61 = getelementptr inbounds %struct.MODE_INFO*, %struct.MODE_INFO** %3, i64 %60
  %62 = add nsw i32 %17, %7
  tail call fastcc void @count_segs_sb(%struct.VP9Common* %0, %struct.macroblockd* %1, %struct.TileInfo* %2, %struct.MODE_INFO** %61, i32* %4, [2 x i32]* %5, i32* %6, i32 %62, i32 %8, i8 zeroext %55)
  %63 = add nsw i32 %59, %17
  %64 = sext i32 %63 to i64
  %65 = getelementptr inbounds %struct.MODE_INFO*, %struct.MODE_INFO** %3, i64 %64
  tail call fastcc void @count_segs_sb(%struct.VP9Common* %0, %struct.macroblockd* %1, %struct.TileInfo* %2, %struct.MODE_INFO** %65, i32* %4, [2 x i32]* %5, i32* %6, i32 %62, i32 %58, i8 zeroext %55)
  br label %66

66:                                               ; preds = %53, %37, %49, %41, %10, %21
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal fastcc void @calc_segtree_probs(i32* nocapture readonly, i8* nocapture) unnamed_addr #3 {
  %3 = load i32, i32* %0, align 4
  %4 = getelementptr inbounds i32, i32* %0, i64 1
  %5 = load i32, i32* %4, align 4
  %6 = add nsw i32 %5, %3
  %7 = getelementptr inbounds i32, i32* %0, i64 2
  %8 = load i32, i32* %7, align 4
  %9 = getelementptr inbounds i32, i32* %0, i64 3
  %10 = load i32, i32* %9, align 4
  %11 = getelementptr inbounds i32, i32* %0, i64 4
  %12 = load i32, i32* %11, align 4
  %13 = getelementptr inbounds i32, i32* %0, i64 5
  %14 = load i32, i32* %13, align 4
  %15 = add nsw i32 %14, %12
  %16 = getelementptr inbounds i32, i32* %0, i64 6
  %17 = load i32, i32* %16, align 4
  %18 = getelementptr inbounds i32, i32* %0, i64 7
  %19 = load i32, i32* %18, align 4
  %20 = add i32 %6, %8
  %21 = add i32 %20, %10
  %22 = add i32 %15, %17
  %23 = add i32 %22, %19
  %24 = add i32 %23, %21
  %25 = icmp eq i32 %24, 0
  br i1 %25, label %42, label %26

26:                                               ; preds = %2
  %27 = zext i32 %21 to i64
  %28 = shl nuw nsw i64 %27, 8
  %29 = lshr i32 %24, 1
  %30 = zext i32 %29 to i64
  %31 = add nuw nsw i64 %28, %30
  %32 = zext i32 %24 to i64
  %33 = udiv i64 %31, %32
  %34 = trunc i64 %33 to i32
  %35 = sub nsw i32 255, %34
  %36 = lshr i32 %35, 23
  %37 = or i32 %36, %34
  %38 = icmp eq i32 %34, 0
  %39 = zext i1 %38 to i32
  %40 = or i32 %37, %39
  %41 = trunc i32 %40 to i8
  br label %42

42:                                               ; preds = %2, %26
  %43 = phi i8 [ %41, %26 ], [ -128, %2 ]
  store i8 %43, i8* %1, align 1
  %44 = icmp eq i32 %21, 0
  br i1 %44, label %61, label %45

45:                                               ; preds = %42
  %46 = zext i32 %6 to i64
  %47 = shl nuw nsw i64 %46, 8
  %48 = lshr i32 %21, 1
  %49 = zext i32 %48 to i64
  %50 = add nuw nsw i64 %47, %49
  %51 = zext i32 %21 to i64
  %52 = udiv i64 %50, %51
  %53 = trunc i64 %52 to i32
  %54 = sub nsw i32 255, %53
  %55 = lshr i32 %54, 23
  %56 = or i32 %55, %53
  %57 = icmp eq i32 %53, 0
  %58 = zext i1 %57 to i32
  %59 = or i32 %56, %58
  %60 = trunc i32 %59 to i8
  br label %61

61:                                               ; preds = %42, %45
  %62 = phi i8 [ %60, %45 ], [ -128, %42 ]
  %63 = getelementptr inbounds i8, i8* %1, i64 1
  store i8 %62, i8* %63, align 1
  %64 = icmp eq i32 %23, 0
  br i1 %64, label %81, label %65

65:                                               ; preds = %61
  %66 = zext i32 %15 to i64
  %67 = shl nuw nsw i64 %66, 8
  %68 = lshr i32 %23, 1
  %69 = zext i32 %68 to i64
  %70 = add nuw nsw i64 %67, %69
  %71 = zext i32 %23 to i64
  %72 = udiv i64 %70, %71
  %73 = trunc i64 %72 to i32
  %74 = sub nsw i32 255, %73
  %75 = lshr i32 %74, 23
  %76 = or i32 %75, %73
  %77 = icmp eq i32 %73, 0
  %78 = zext i1 %77 to i32
  %79 = or i32 %76, %78
  %80 = trunc i32 %79 to i8
  br label %81

81:                                               ; preds = %61, %65
  %82 = phi i8 [ %80, %65 ], [ -128, %61 ]
  %83 = getelementptr inbounds i8, i8* %1, i64 2
  store i8 %82, i8* %83, align 1
  %84 = load i32, i32* %0, align 4
  %85 = load i32, i32* %4, align 4
  %86 = add i32 %85, %84
  %87 = icmp eq i32 %86, 0
  br i1 %87, label %104, label %88

88:                                               ; preds = %81
  %89 = zext i32 %84 to i64
  %90 = shl nuw nsw i64 %89, 8
  %91 = lshr i32 %86, 1
  %92 = zext i32 %91 to i64
  %93 = add nuw nsw i64 %90, %92
  %94 = zext i32 %86 to i64
  %95 = udiv i64 %93, %94
  %96 = trunc i64 %95 to i32
  %97 = sub nsw i32 255, %96
  %98 = lshr i32 %97, 23
  %99 = or i32 %98, %96
  %100 = icmp eq i32 %96, 0
  %101 = zext i1 %100 to i32
  %102 = or i32 %99, %101
  %103 = trunc i32 %102 to i8
  br label %104

104:                                              ; preds = %81, %88
  %105 = phi i8 [ %103, %88 ], [ -128, %81 ]
  %106 = getelementptr inbounds i8, i8* %1, i64 3
  store i8 %105, i8* %106, align 1
  %107 = load i32, i32* %7, align 4
  %108 = load i32, i32* %9, align 4
  %109 = add i32 %108, %107
  %110 = icmp eq i32 %109, 0
  br i1 %110, label %127, label %111

111:                                              ; preds = %104
  %112 = zext i32 %107 to i64
  %113 = shl nuw nsw i64 %112, 8
  %114 = lshr i32 %109, 1
  %115 = zext i32 %114 to i64
  %116 = add nuw nsw i64 %113, %115
  %117 = zext i32 %109 to i64
  %118 = udiv i64 %116, %117
  %119 = trunc i64 %118 to i32
  %120 = sub nsw i32 255, %119
  %121 = lshr i32 %120, 23
  %122 = or i32 %121, %119
  %123 = icmp eq i32 %119, 0
  %124 = zext i1 %123 to i32
  %125 = or i32 %122, %124
  %126 = trunc i32 %125 to i8
  br label %127

127:                                              ; preds = %104, %111
  %128 = phi i8 [ %126, %111 ], [ -128, %104 ]
  %129 = getelementptr inbounds i8, i8* %1, i64 4
  store i8 %128, i8* %129, align 1
  %130 = load i32, i32* %11, align 4
  %131 = load i32, i32* %13, align 4
  %132 = add i32 %131, %130
  %133 = icmp eq i32 %132, 0
  br i1 %133, label %150, label %134

134:                                              ; preds = %127
  %135 = zext i32 %130 to i64
  %136 = shl nuw nsw i64 %135, 8
  %137 = lshr i32 %132, 1
  %138 = zext i32 %137 to i64
  %139 = add nuw nsw i64 %136, %138
  %140 = zext i32 %132 to i64
  %141 = udiv i64 %139, %140
  %142 = trunc i64 %141 to i32
  %143 = sub nsw i32 255, %142
  %144 = lshr i32 %143, 23
  %145 = or i32 %144, %142
  %146 = icmp eq i32 %142, 0
  %147 = zext i1 %146 to i32
  %148 = or i32 %145, %147
  %149 = trunc i32 %148 to i8
  br label %150

150:                                              ; preds = %127, %134
  %151 = phi i8 [ %149, %134 ], [ -128, %127 ]
  %152 = getelementptr inbounds i8, i8* %1, i64 5
  store i8 %151, i8* %152, align 1
  %153 = load i32, i32* %16, align 4
  %154 = load i32, i32* %18, align 4
  %155 = add i32 %154, %153
  %156 = icmp eq i32 %155, 0
  br i1 %156, label %173, label %157

157:                                              ; preds = %150
  %158 = zext i32 %153 to i64
  %159 = shl nuw nsw i64 %158, 8
  %160 = lshr i32 %155, 1
  %161 = zext i32 %160 to i64
  %162 = add nuw nsw i64 %159, %161
  %163 = zext i32 %155 to i64
  %164 = udiv i64 %162, %163
  %165 = trunc i64 %164 to i32
  %166 = sub nsw i32 255, %165
  %167 = lshr i32 %166, 23
  %168 = or i32 %167, %165
  %169 = icmp eq i32 %165, 0
  %170 = zext i1 %169 to i32
  %171 = or i32 %168, %170
  %172 = trunc i32 %171 to i8
  br label %173

173:                                              ; preds = %150, %157
  %174 = phi i8 [ %172, %157 ], [ -128, %150 ]
  %175 = getelementptr inbounds i8, i8* %1, i64 6
  store i8 %174, i8* %175, align 1
  ret void
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define internal fastcc i32 @cost_segmap(i32* nocapture readonly, i8* nocapture readonly) unnamed_addr #6 {
  %3 = load i32, i32* %0, align 4
  %4 = getelementptr inbounds i32, i32* %0, i64 1
  %5 = load i32, i32* %4, align 4
  %6 = add nsw i32 %5, %3
  %7 = getelementptr inbounds i32, i32* %0, i64 2
  %8 = load i32, i32* %7, align 4
  %9 = getelementptr inbounds i32, i32* %0, i64 3
  %10 = load i32, i32* %9, align 4
  %11 = add nsw i32 %10, %8
  %12 = getelementptr inbounds i32, i32* %0, i64 4
  %13 = load i32, i32* %12, align 4
  %14 = getelementptr inbounds i32, i32* %0, i64 5
  %15 = load i32, i32* %14, align 4
  %16 = add nsw i32 %15, %13
  %17 = getelementptr inbounds i32, i32* %0, i64 6
  %18 = load i32, i32* %17, align 4
  %19 = getelementptr inbounds i32, i32* %0, i64 7
  %20 = load i32, i32* %19, align 4
  %21 = add nsw i32 %20, %18
  %22 = add nsw i32 %11, %6
  %23 = add nsw i32 %21, %16
  %24 = load i8, i8* %1, align 1
  %25 = zext i8 %24 to i64
  %26 = getelementptr inbounds [256 x i16], [256 x i16]* @vp9_prob_cost, i64 0, i64 %25
  %27 = load i16, i16* %26, align 2
  %28 = zext i16 %27 to i32
  %29 = mul nsw i32 %22, %28
  %30 = sub nuw nsw i64 256, %25
  %31 = getelementptr inbounds [256 x i16], [256 x i16]* @vp9_prob_cost, i64 0, i64 %30
  %32 = load i16, i16* %31, align 2
  %33 = zext i16 %32 to i32
  %34 = mul nsw i32 %23, %33
  %35 = add nsw i32 %34, %29
  %36 = icmp sgt i32 %22, 0
  br i1 %36, label %37, label %86

37:                                               ; preds = %2
  %38 = getelementptr inbounds i8, i8* %1, i64 1
  %39 = load i8, i8* %38, align 1
  %40 = zext i8 %39 to i64
  %41 = getelementptr inbounds [256 x i16], [256 x i16]* @vp9_prob_cost, i64 0, i64 %40
  %42 = load i16, i16* %41, align 2
  %43 = zext i16 %42 to i32
  %44 = mul nsw i32 %6, %43
  %45 = sub nuw nsw i64 256, %40
  %46 = getelementptr inbounds [256 x i16], [256 x i16]* @vp9_prob_cost, i64 0, i64 %45
  %47 = load i16, i16* %46, align 2
  %48 = zext i16 %47 to i32
  %49 = mul nsw i32 %11, %48
  %50 = add i32 %44, %35
  %51 = add i32 %50, %49
  %52 = icmp sgt i32 %6, 0
  br i1 %52, label %53, label %68

53:                                               ; preds = %37
  %54 = getelementptr inbounds i8, i8* %1, i64 3
  %55 = load i8, i8* %54, align 1
  %56 = zext i8 %55 to i64
  %57 = getelementptr inbounds [256 x i16], [256 x i16]* @vp9_prob_cost, i64 0, i64 %56
  %58 = load i16, i16* %57, align 2
  %59 = zext i16 %58 to i32
  %60 = mul nsw i32 %3, %59
  %61 = sub nuw nsw i64 256, %56
  %62 = getelementptr inbounds [256 x i16], [256 x i16]* @vp9_prob_cost, i64 0, i64 %61
  %63 = load i16, i16* %62, align 2
  %64 = zext i16 %63 to i32
  %65 = mul nsw i32 %5, %64
  %66 = add i32 %60, %51
  %67 = add i32 %66, %65
  br label %68

68:                                               ; preds = %53, %37
  %69 = phi i32 [ %67, %53 ], [ %51, %37 ]
  %70 = icmp sgt i32 %11, 0
  br i1 %70, label %71, label %86

71:                                               ; preds = %68
  %72 = getelementptr inbounds i8, i8* %1, i64 4
  %73 = load i8, i8* %72, align 1
  %74 = zext i8 %73 to i64
  %75 = getelementptr inbounds [256 x i16], [256 x i16]* @vp9_prob_cost, i64 0, i64 %74
  %76 = load i16, i16* %75, align 2
  %77 = zext i16 %76 to i32
  %78 = mul nsw i32 %8, %77
  %79 = sub nuw nsw i64 256, %74
  %80 = getelementptr inbounds [256 x i16], [256 x i16]* @vp9_prob_cost, i64 0, i64 %79
  %81 = load i16, i16* %80, align 2
  %82 = zext i16 %81 to i32
  %83 = mul nsw i32 %10, %82
  %84 = add i32 %78, %69
  %85 = add i32 %84, %83
  br label %86

86:                                               ; preds = %68, %71, %2
  %87 = phi i32 [ %85, %71 ], [ %69, %68 ], [ %35, %2 ]
  %88 = icmp sgt i32 %23, 0
  br i1 %88, label %89, label %138

89:                                               ; preds = %86
  %90 = getelementptr inbounds i8, i8* %1, i64 2
  %91 = load i8, i8* %90, align 1
  %92 = zext i8 %91 to i64
  %93 = getelementptr inbounds [256 x i16], [256 x i16]* @vp9_prob_cost, i64 0, i64 %92
  %94 = load i16, i16* %93, align 2
  %95 = zext i16 %94 to i32
  %96 = mul nsw i32 %16, %95
  %97 = sub nuw nsw i64 256, %92
  %98 = getelementptr inbounds [256 x i16], [256 x i16]* @vp9_prob_cost, i64 0, i64 %97
  %99 = load i16, i16* %98, align 2
  %100 = zext i16 %99 to i32
  %101 = mul nsw i32 %21, %100
  %102 = add i32 %96, %87
  %103 = add i32 %102, %101
  %104 = icmp sgt i32 %16, 0
  br i1 %104, label %105, label %120

105:                                              ; preds = %89
  %106 = getelementptr inbounds i8, i8* %1, i64 5
  %107 = load i8, i8* %106, align 1
  %108 = zext i8 %107 to i64
  %109 = getelementptr inbounds [256 x i16], [256 x i16]* @vp9_prob_cost, i64 0, i64 %108
  %110 = load i16, i16* %109, align 2
  %111 = zext i16 %110 to i32
  %112 = mul nsw i32 %13, %111
  %113 = sub nuw nsw i64 256, %108
  %114 = getelementptr inbounds [256 x i16], [256 x i16]* @vp9_prob_cost, i64 0, i64 %113
  %115 = load i16, i16* %114, align 2
  %116 = zext i16 %115 to i32
  %117 = mul nsw i32 %15, %116
  %118 = add i32 %112, %103
  %119 = add i32 %118, %117
  br label %120

120:                                              ; preds = %105, %89
  %121 = phi i32 [ %119, %105 ], [ %103, %89 ]
  %122 = icmp sgt i32 %21, 0
  br i1 %122, label %123, label %138

123:                                              ; preds = %120
  %124 = getelementptr inbounds i8, i8* %1, i64 6
  %125 = load i8, i8* %124, align 1
  %126 = zext i8 %125 to i64
  %127 = getelementptr inbounds [256 x i16], [256 x i16]* @vp9_prob_cost, i64 0, i64 %126
  %128 = load i16, i16* %127, align 2
  %129 = zext i16 %128 to i32
  %130 = mul nsw i32 %18, %129
  %131 = sub nuw nsw i64 256, %126
  %132 = getelementptr inbounds [256 x i16], [256 x i16]* @vp9_prob_cost, i64 0, i64 %131
  %133 = load i16, i16* %132, align 2
  %134 = zext i16 %133 to i32
  %135 = mul nsw i32 %20, %134
  %136 = add i32 %130, %121
  %137 = add i32 %136, %135
  br label %138

138:                                              ; preds = %120, %123, %86
  %139 = phi i32 [ %137, %123 ], [ %121, %120 ], [ %87, %86 ]
  ret i32 %139
}

; Function Attrs: nounwind ssp uwtable
define hidden void @vp9_reset_segment_features(%struct.segmentation*) local_unnamed_addr #1 {
  %2 = getelementptr inbounds %struct.segmentation, %struct.segmentation* %0, i64 0, i32 0
  store i8 0, i8* %2, align 4
  %3 = getelementptr inbounds %struct.segmentation, %struct.segmentation* %0, i64 0, i32 1
  store i8 0, i8* %3, align 1
  %4 = getelementptr inbounds %struct.segmentation, %struct.segmentation* %0, i64 0, i32 2
  store i8 0, i8* %4, align 2
  %5 = getelementptr inbounds %struct.segmentation, %struct.segmentation* %0, i64 0, i32 5, i64 0
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %5, i8 -1, i64 7, i1 false)
  tail call void @vp9_clearall_segfeatures(%struct.segmentation* %0) #7
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal fastcc void @count_segs(%struct.VP9Common* nocapture readonly, %struct.macroblockd* nocapture, %struct.TileInfo* nocapture readonly, %struct.MODE_INFO**, i32* nocapture, [2 x i32]* nocapture, i32* nocapture, i32, i32, i32, i32) unnamed_addr #3 {
  %12 = getelementptr inbounds %struct.VP9Common, %struct.VP9Common* %0, i64 0, i32 33
  %13 = load i32, i32* %12, align 16
  %14 = icmp sgt i32 %13, %9
  br i1 %14, label %15, label %248

15:                                               ; preds = %11
  %16 = getelementptr inbounds %struct.VP9Common, %struct.VP9Common* %0, i64 0, i32 35
  %17 = load i32, i32* %16, align 8
  %18 = icmp sgt i32 %17, %10
  br i1 %18, label %19, label %248

19:                                               ; preds = %15
  %20 = getelementptr inbounds %struct.macroblockd, %struct.macroblockd* %1, i64 0, i32 6
  store %struct.MODE_INFO** %3, %struct.MODE_INFO*** %20, align 8
  %21 = load %struct.MODE_INFO*, %struct.MODE_INFO** %3, align 8
  %22 = getelementptr inbounds %struct.MODE_INFO, %struct.MODE_INFO* %21, i64 0, i32 4
  %23 = load i8, i8* %22, align 4
  %24 = load i32, i32* %12, align 16
  %25 = load i32, i32* %16, align 8
  %26 = shl nsw i32 %9, 6
  %27 = sub nsw i32 0, %26
  %28 = getelementptr inbounds %struct.macroblockd, %struct.macroblockd* %1, i64 0, i32 14
  store i32 %27, i32* %28, align 8
  %29 = add i32 %9, %8
  %30 = sub i32 %24, %29
  %31 = shl nsw i32 %30, 6
  %32 = getelementptr inbounds %struct.macroblockd, %struct.macroblockd* %1, i64 0, i32 15
  store i32 %31, i32* %32, align 4
  %33 = shl nsw i32 %10, 6
  %34 = sub nsw i32 0, %33
  %35 = getelementptr inbounds %struct.macroblockd, %struct.macroblockd* %1, i64 0, i32 12
  store i32 %34, i32* %35, align 8
  %36 = add i32 %10, %7
  %37 = sub i32 %25, %36
  %38 = shl nsw i32 %37, 6
  %39 = getelementptr inbounds %struct.macroblockd, %struct.macroblockd* %1, i64 0, i32 13
  store i32 %38, i32* %39, align 4
  %40 = icmp eq i32 %9, 0
  br i1 %40, label %48, label %41

41:                                               ; preds = %19
  %42 = getelementptr inbounds %struct.macroblockd, %struct.macroblockd* %1, i64 0, i32 5
  %43 = load i32, i32* %42, align 8
  %44 = sub nsw i32 0, %43
  %45 = sext i32 %44 to i64
  %46 = getelementptr inbounds %struct.MODE_INFO*, %struct.MODE_INFO** %3, i64 %45
  %47 = load %struct.MODE_INFO*, %struct.MODE_INFO** %46, align 8
  br label %48

48:                                               ; preds = %41, %19
  %49 = phi %struct.MODE_INFO* [ %47, %41 ], [ null, %19 ]
  %50 = getelementptr inbounds %struct.macroblockd, %struct.macroblockd* %1, i64 0, i32 8
  store %struct.MODE_INFO* %49, %struct.MODE_INFO** %50, align 8
  %51 = getelementptr inbounds %struct.TileInfo, %struct.TileInfo* %2, i64 0, i32 2
  %52 = load i32, i32* %51, align 4
  %53 = icmp slt i32 %52, %10
  br i1 %53, label %54, label %57

54:                                               ; preds = %48
  %55 = getelementptr inbounds %struct.MODE_INFO*, %struct.MODE_INFO** %3, i64 -1
  %56 = load %struct.MODE_INFO*, %struct.MODE_INFO** %55, align 8
  br label %57

57:                                               ; preds = %48, %54
  %58 = phi %struct.MODE_INFO* [ %56, %54 ], [ null, %48 ]
  %59 = getelementptr inbounds %struct.macroblockd, %struct.macroblockd* %1, i64 0, i32 7
  store %struct.MODE_INFO* %58, %struct.MODE_INFO** %59, align 8
  %60 = sext i8 %23 to i64
  %61 = getelementptr inbounds i32, i32* %4, i64 %60
  %62 = load i32, i32* %61, align 4
  %63 = add nsw i32 %62, 1
  store i32 %63, i32* %61, align 4
  %64 = getelementptr inbounds %struct.VP9Common, %struct.VP9Common* %0, i64 0, i32 23
  %65 = load i32, i32* %64, align 4
  %66 = icmp eq i32 %65, 0
  br i1 %66, label %248, label %67

67:                                               ; preds = %57
  %68 = sext i8 %23 to i32
  %69 = load %struct.MODE_INFO**, %struct.MODE_INFO*** %20, align 8
  %70 = load %struct.MODE_INFO*, %struct.MODE_INFO** %69, align 8
  %71 = getelementptr inbounds %struct.MODE_INFO, %struct.MODE_INFO* %70, i64 0, i32 0
  %72 = load i8, i8* %71, align 4
  %73 = getelementptr inbounds %struct.VP9Common, %struct.VP9Common* %0, i64 0, i32 60
  %74 = load i8*, i8** %73, align 16
  %75 = load i32, i32* %16, align 8
  %76 = zext i8 %72 to i64
  %77 = getelementptr inbounds [13 x i8], [13 x i8]* @num_8x8_blocks_wide_lookup, i64 0, i64 %76
  %78 = load i8, i8* %77, align 1
  %79 = zext i8 %78 to i32
  %80 = getelementptr inbounds [13 x i8], [13 x i8]* @num_8x8_blocks_high_lookup, i64 0, i64 %76
  %81 = load i8, i8* %80, align 1
  %82 = zext i8 %81 to i32
  %83 = sub nsw i32 %75, %10
  %84 = icmp slt i32 %83, %79
  %85 = select i1 %84, i32 %83, i32 %79
  %86 = load i32, i32* %12, align 16
  %87 = sub nsw i32 %86, %9
  %88 = icmp slt i32 %87, %82
  %89 = select i1 %88, i32 %87, i32 %82
  %90 = icmp sgt i32 %89, 0
  br i1 %90, label %91, label %218

91:                                               ; preds = %67
  %92 = icmp sgt i32 %85, 0
  %93 = sext i32 %85 to i64
  %94 = add nsw i64 %93, -1
  %95 = mul i32 %75, %9
  %96 = add i32 %95, %10
  %97 = add nsw i64 %93, -8
  %98 = lshr i64 %97, 3
  %99 = add nuw nsw i64 %98, 1
  %100 = icmp ult i32 %85, 8
  %101 = trunc i64 %94 to i32
  %102 = icmp ugt i64 %94, 4294967295
  %103 = and i64 %93, -8
  %104 = and i64 %99, 1
  %105 = icmp eq i64 %98, 0
  %106 = sub nuw nsw i64 %99, %104
  %107 = icmp eq i64 %104, 0
  %108 = icmp eq i64 %103, %93
  br label %109

109:                                              ; preds = %214, %91
  %110 = phi i32 [ 8, %91 ], [ %215, %214 ]
  %111 = phi i32 [ 0, %91 ], [ %216, %214 ]
  %112 = mul i32 %75, %111
  %113 = add i32 %96, %112
  br i1 %92, label %114, label %214

114:                                              ; preds = %109
  %115 = add i32 %111, %9
  %116 = mul i32 %115, %75
  %117 = add i32 %116, %10
  br i1 %100, label %198, label %118

118:                                              ; preds = %114
  %119 = add i32 %113, %101
  %120 = icmp slt i32 %119, %113
  %121 = or i1 %120, %102
  br i1 %121, label %198, label %122

122:                                              ; preds = %118
  %123 = insertelement <4 x i32> undef, i32 %110, i32 0
  %124 = shufflevector <4 x i32> %123, <4 x i32> undef, <4 x i32> zeroinitializer
  br i1 %105, label %164, label %125

125:                                              ; preds = %122, %125
  %126 = phi i64 [ %161, %125 ], [ 0, %122 ]
  %127 = phi <4 x i32> [ %159, %125 ], [ %124, %122 ]
  %128 = phi <4 x i32> [ %160, %125 ], [ %124, %122 ]
  %129 = phi i64 [ %162, %125 ], [ %106, %122 ]
  %130 = trunc i64 %126 to i32
  %131 = add i32 %117, %130
  %132 = sext i32 %131 to i64
  %133 = getelementptr inbounds i8, i8* %74, i64 %132
  %134 = bitcast i8* %133 to <4 x i8>*
  %135 = load <4 x i8>, <4 x i8>* %134, align 1
  %136 = getelementptr inbounds i8, i8* %133, i64 4
  %137 = bitcast i8* %136 to <4 x i8>*
  %138 = load <4 x i8>, <4 x i8>* %137, align 1
  %139 = zext <4 x i8> %135 to <4 x i32>
  %140 = zext <4 x i8> %138 to <4 x i32>
  %141 = icmp slt <4 x i32> %127, %139
  %142 = icmp slt <4 x i32> %128, %140
  %143 = select <4 x i1> %141, <4 x i32> %127, <4 x i32> %139
  %144 = select <4 x i1> %142, <4 x i32> %128, <4 x i32> %140
  %145 = trunc i64 %126 to i32
  %146 = or i32 %145, 8
  %147 = add i32 %117, %146
  %148 = sext i32 %147 to i64
  %149 = getelementptr inbounds i8, i8* %74, i64 %148
  %150 = bitcast i8* %149 to <4 x i8>*
  %151 = load <4 x i8>, <4 x i8>* %150, align 1
  %152 = getelementptr inbounds i8, i8* %149, i64 4
  %153 = bitcast i8* %152 to <4 x i8>*
  %154 = load <4 x i8>, <4 x i8>* %153, align 1
  %155 = zext <4 x i8> %151 to <4 x i32>
  %156 = zext <4 x i8> %154 to <4 x i32>
  %157 = icmp slt <4 x i32> %143, %155
  %158 = icmp slt <4 x i32> %144, %156
  %159 = select <4 x i1> %157, <4 x i32> %143, <4 x i32> %155
  %160 = select <4 x i1> %158, <4 x i32> %144, <4 x i32> %156
  %161 = add i64 %126, 16
  %162 = add i64 %129, -2
  %163 = icmp eq i64 %162, 0
  br i1 %163, label %164, label %125, !llvm.loop !2

164:                                              ; preds = %125, %122
  %165 = phi <4 x i32> [ undef, %122 ], [ %159, %125 ]
  %166 = phi <4 x i32> [ undef, %122 ], [ %160, %125 ]
  %167 = phi i64 [ 0, %122 ], [ %161, %125 ]
  %168 = phi <4 x i32> [ %124, %122 ], [ %159, %125 ]
  %169 = phi <4 x i32> [ %124, %122 ], [ %160, %125 ]
  br i1 %107, label %186, label %170

170:                                              ; preds = %164
  %171 = trunc i64 %167 to i32
  %172 = add i32 %117, %171
  %173 = sext i32 %172 to i64
  %174 = getelementptr inbounds i8, i8* %74, i64 %173
  %175 = bitcast i8* %174 to <4 x i8>*
  %176 = load <4 x i8>, <4 x i8>* %175, align 1
  %177 = getelementptr inbounds i8, i8* %174, i64 4
  %178 = bitcast i8* %177 to <4 x i8>*
  %179 = load <4 x i8>, <4 x i8>* %178, align 1
  %180 = zext <4 x i8> %176 to <4 x i32>
  %181 = zext <4 x i8> %179 to <4 x i32>
  %182 = icmp slt <4 x i32> %169, %181
  %183 = select <4 x i1> %182, <4 x i32> %169, <4 x i32> %181
  %184 = icmp slt <4 x i32> %168, %180
  %185 = select <4 x i1> %184, <4 x i32> %168, <4 x i32> %180
  br label %186

186:                                              ; preds = %164, %170
  %187 = phi <4 x i32> [ %165, %164 ], [ %185, %170 ]
  %188 = phi <4 x i32> [ %166, %164 ], [ %183, %170 ]
  %189 = icmp slt <4 x i32> %187, %188
  %190 = select <4 x i1> %189, <4 x i32> %187, <4 x i32> %188
  %191 = shufflevector <4 x i32> %190, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %192 = icmp slt <4 x i32> %190, %191
  %193 = select <4 x i1> %192, <4 x i32> %190, <4 x i32> %191
  %194 = shufflevector <4 x i32> %193, <4 x i32> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %195 = icmp slt <4 x i32> %193, %194
  %196 = select <4 x i1> %195, <4 x i32> %193, <4 x i32> %194
  %197 = extractelement <4 x i32> %196, i32 0
  br i1 %108, label %214, label %198

198:                                              ; preds = %186, %118, %114
  %199 = phi i64 [ 0, %118 ], [ 0, %114 ], [ %103, %186 ]
  %200 = phi i32 [ %110, %118 ], [ %110, %114 ], [ %197, %186 ]
  br label %201

201:                                              ; preds = %198, %201
  %202 = phi i64 [ %212, %201 ], [ %199, %198 ]
  %203 = phi i32 [ %211, %201 ], [ %200, %198 ]
  %204 = trunc i64 %202 to i32
  %205 = add i32 %117, %204
  %206 = sext i32 %205 to i64
  %207 = getelementptr inbounds i8, i8* %74, i64 %206
  %208 = load i8, i8* %207, align 1
  %209 = zext i8 %208 to i32
  %210 = icmp slt i32 %203, %209
  %211 = select i1 %210, i32 %203, i32 %209
  %212 = add nuw nsw i64 %202, 1
  %213 = icmp slt i64 %212, %93
  br i1 %213, label %201, label %214, !llvm.loop !4

214:                                              ; preds = %201, %186, %109
  %215 = phi i32 [ %110, %109 ], [ %197, %186 ], [ %211, %201 ]
  %216 = add nuw nsw i32 %111, 1
  %217 = icmp slt i32 %216, %89
  br i1 %217, label %109, label %218

218:                                              ; preds = %214, %67
  %219 = phi i32 [ 8, %67 ], [ %215, %214 ]
  %220 = icmp eq i32 %219, %68
  %221 = load %struct.MODE_INFO*, %struct.MODE_INFO** %50, align 8
  %222 = load %struct.MODE_INFO*, %struct.MODE_INFO** %59, align 8
  %223 = icmp eq %struct.MODE_INFO* %221, null
  br i1 %223, label %228, label %224

224:                                              ; preds = %218
  %225 = getelementptr inbounds %struct.MODE_INFO, %struct.MODE_INFO* %221, i64 0, i32 5
  %226 = load i8, i8* %225, align 1
  %227 = sext i8 %226 to i64
  br label %228

228:                                              ; preds = %224, %218
  %229 = phi i64 [ %227, %224 ], [ 0, %218 ]
  %230 = icmp eq %struct.MODE_INFO* %222, null
  br i1 %230, label %235, label %231

231:                                              ; preds = %228
  %232 = getelementptr inbounds %struct.MODE_INFO, %struct.MODE_INFO* %222, i64 0, i32 5
  %233 = load i8, i8* %232, align 1
  %234 = sext i8 %233 to i64
  br label %235

235:                                              ; preds = %228, %231
  %236 = phi i64 [ %234, %231 ], [ 0, %228 ]
  %237 = add nsw i64 %236, %229
  %238 = zext i1 %220 to i8
  %239 = getelementptr inbounds %struct.MODE_INFO, %struct.MODE_INFO* %70, i64 0, i32 5
  store i8 %238, i8* %239, align 1
  %240 = zext i1 %220 to i64
  %241 = getelementptr inbounds [2 x i32], [2 x i32]* %5, i64 %237, i64 %240
  %242 = load i32, i32* %241, align 4
  %243 = add nsw i32 %242, 1
  store i32 %243, i32* %241, align 4
  br i1 %220, label %248, label %244

244:                                              ; preds = %235
  %245 = getelementptr inbounds i32, i32* %6, i64 %60
  %246 = load i32, i32* %245, align 4
  %247 = add nsw i32 %246, 1
  store i32 %247, i32* %245, align 4
  br label %248

248:                                              ; preds = %57, %244, %235, %11, %15
  ret void
}

attributes #0 = { nofree norecurse nounwind ssp uwtable writeonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind }
attributes #3 = { nofree norecurse nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nofree nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { norecurse nounwind readonly ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = distinct !{!2, !3}
!3 = !{!"llvm.loop.isvectorized", i32 1}
!4 = distinct !{!4, !3}
