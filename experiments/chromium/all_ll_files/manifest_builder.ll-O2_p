; ModuleID = '../../services/service_manager/public/cpp/manifest_builder.cc'
source_filename = "../../services/service_manager/public/cpp/manifest_builder.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%"class.service_manager::ManifestBuilder" = type { %"struct.service_manager::Manifest" }
%"struct.service_manager::Manifest" = type { %"class.std::__1::basic_string", %"struct.service_manager::Manifest::DisplayName", %"struct.service_manager::Manifest::Options", %"class.std::__1::map", %"class.std::__1::map", %"class.std::__1::map.10", %"class.std::__1::map.10", %"class.std::__1::vector", %"class.std::__1::vector.24", %"class.std::__1::set" }
%"class.std::__1::basic_string" = type { %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" = type { %union.anon }
%union.anon = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" = type { i8*, i64, i64 }
%"struct.service_manager::Manifest::DisplayName" = type { i32, %union.anon.1 }
%union.anon.1 = type { i8* }
%"struct.service_manager::Manifest::Options" = type { i32, i8, i8, i8, i32, %"class.std::__1::basic_string" }
%"class.std::__1::map" = type { %"class.std::__1::__tree" }
%"class.std::__1::__tree" = type { %"class.std::__1::__tree_end_node"*, %"class.std::__1::__compressed_pair.2", %"class.std::__1::__compressed_pair.7" }
%"class.std::__1::__tree_end_node" = type { %"class.std::__1::__tree_node_base"* }
%"class.std::__1::__tree_node_base" = type <{ %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_end_node"*, i8, [7 x i8] }>
%"class.std::__1::__compressed_pair.2" = type { %"struct.std::__1::__compressed_pair_elem.3" }
%"struct.std::__1::__compressed_pair_elem.3" = type { %"class.std::__1::__tree_end_node" }
%"class.std::__1::__compressed_pair.7" = type { %"struct.std::__1::__compressed_pair_elem.8" }
%"struct.std::__1::__compressed_pair_elem.8" = type { i64 }
%"class.std::__1::map.10" = type { %"class.std::__1::__tree.11" }
%"class.std::__1::__tree.11" = type { %"class.std::__1::__tree_end_node"*, %"class.std::__1::__compressed_pair.12", %"class.std::__1::__compressed_pair.16" }
%"class.std::__1::__compressed_pair.12" = type { %"struct.std::__1::__compressed_pair_elem.3" }
%"class.std::__1::__compressed_pair.16" = type { %"struct.std::__1::__compressed_pair_elem.8" }
%"class.std::__1::vector" = type { %"class.std::__1::__vector_base" }
%"class.std::__1::__vector_base" = type { %"struct.service_manager::Manifest"*, %"struct.service_manager::Manifest"*, %"class.std::__1::__compressed_pair.19" }
%"class.std::__1::__compressed_pair.19" = type { %"struct.std::__1::__compressed_pair_elem.20" }
%"struct.std::__1::__compressed_pair_elem.20" = type { %"struct.service_manager::Manifest"* }
%"class.std::__1::vector.24" = type { %"class.std::__1::__vector_base.25" }
%"class.std::__1::__vector_base.25" = type { %"struct.service_manager::Manifest::PreloadedFileInfo"*, %"struct.service_manager::Manifest::PreloadedFileInfo"*, %"class.std::__1::__compressed_pair.26" }
%"struct.service_manager::Manifest::PreloadedFileInfo" = type { %"class.std::__1::basic_string", %"class.base::FilePath" }
%"class.base::FilePath" = type { %"class.std::__1::basic_string" }
%"class.std::__1::__compressed_pair.26" = type { %"struct.std::__1::__compressed_pair_elem.27" }
%"struct.std::__1::__compressed_pair_elem.27" = type { %"struct.service_manager::Manifest::PreloadedFileInfo"* }
%"class.std::__1::set" = type { %"class.std::__1::__tree.31" }
%"class.std::__1::__tree.31" = type { %"class.std::__1::__tree_end_node"*, %"class.std::__1::__compressed_pair.32", %"class.std::__1::__compressed_pair.36" }
%"class.std::__1::__compressed_pair.32" = type { %"struct.std::__1::__compressed_pair_elem.3" }
%"class.std::__1::__compressed_pair.36" = type { %"struct.std::__1::__compressed_pair_elem.8" }
%"class.service_manager::ManifestOptionsBuilder" = type { %"struct.service_manager::Manifest::Options" }

@_ZN15service_manager15ManifestBuilderC1Ev = hidden unnamed_addr alias void (%"class.service_manager::ManifestBuilder"*), void (%"class.service_manager::ManifestBuilder"*)* @_ZN15service_manager15ManifestBuilderC2Ev
@_ZN15service_manager15ManifestBuilderD1Ev = hidden unnamed_addr alias void (%"class.service_manager::ManifestBuilder"*), void (%"class.service_manager::ManifestBuilder"*)* @_ZN15service_manager15ManifestBuilderD2Ev
@_ZN15service_manager22ManifestOptionsBuilderC1Ev = hidden unnamed_addr alias void (%"class.service_manager::ManifestOptionsBuilder"*), void (%"class.service_manager::ManifestOptionsBuilder"*)* @_ZN15service_manager22ManifestOptionsBuilderC2Ev
@_ZN15service_manager22ManifestOptionsBuilderD1Ev = hidden unnamed_addr alias void (%"class.service_manager::ManifestOptionsBuilder"*), void (%"class.service_manager::ManifestOptionsBuilder"*)* @_ZN15service_manager22ManifestOptionsBuilderD2Ev

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN15service_manager15ManifestBuilderC2Ev(%"class.service_manager::ManifestBuilder"*) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.service_manager::ManifestBuilder", %"class.service_manager::ManifestBuilder"* %0, i64 0, i32 0
  tail call void @_ZN15service_manager8ManifestC1Ev(%"struct.service_manager::Manifest"* %2) #3
  ret void
}

declare void @_ZN15service_manager8ManifestC1Ev(%"struct.service_manager::Manifest"*) unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN15service_manager15ManifestBuilderD2Ev(%"class.service_manager::ManifestBuilder"*) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.service_manager::ManifestBuilder", %"class.service_manager::ManifestBuilder"* %0, i64 0, i32 0
  tail call void @_ZN15service_manager8ManifestD1Ev(%"struct.service_manager::Manifest"* %2) #3
  ret void
}

; Function Attrs: nounwind
declare void @_ZN15service_manager8ManifestD1Ev(%"struct.service_manager::Manifest"*) unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN15service_manager22ManifestOptionsBuilderC2Ev(%"class.service_manager::ManifestOptionsBuilder"*) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.service_manager::ManifestOptionsBuilder", %"class.service_manager::ManifestOptionsBuilder"* %0, i64 0, i32 0
  tail call void @_ZN15service_manager8Manifest7OptionsC1Ev(%"struct.service_manager::Manifest::Options"* %2) #3
  ret void
}

declare void @_ZN15service_manager8Manifest7OptionsC1Ev(%"struct.service_manager::Manifest::Options"*) unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN15service_manager22ManifestOptionsBuilderD2Ev(%"class.service_manager::ManifestOptionsBuilder"*) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.service_manager::ManifestOptionsBuilder", %"class.service_manager::ManifestOptionsBuilder"* %0, i64 0, i32 0
  tail call void @_ZN15service_manager8Manifest7OptionsD1Ev(%"struct.service_manager::Manifest::Options"* %2) #3
  ret void
}

; Function Attrs: nounwind
declare void @_ZN15service_manager8Manifest7OptionsD1Ev(%"struct.service_manager::Manifest::Options"*) unnamed_addr #2

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
