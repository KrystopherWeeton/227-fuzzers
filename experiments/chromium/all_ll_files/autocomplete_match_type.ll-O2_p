; ModuleID = '../../components/omnibox/browser/autocomplete_match_type.cc'
source_filename = "../../components/omnibox/browser/autocomplete_match_type.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"class.std::__1::basic_string" = type { %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" = type { %union.anon }
%union.anon = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" = type { i8*, i64, i64 }
%"class.std::__1::__basic_string_common" = type { i8 }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short" = type { [23 x i8], %struct.anon }
%struct.anon = type { i8 }
%"class.std::__1::basic_string.1" = type { %"class.std::__1::__compressed_pair.2" }
%"class.std::__1::__compressed_pair.2" = type { %"struct.std::__1::__compressed_pair_elem.3" }
%"struct.std::__1::__compressed_pair_elem.3" = type { %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__rep" }
%"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__rep" = type { %union.anon.4 }
%union.anon.4 = type { %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__long" }
%"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__long" = type { i16*, i64, i64 }
%"class.std::__1::vector" = type { %"class.std::__1::__vector_base" }
%"class.std::__1::__vector_base" = type { %"class.std::__1::basic_string.1"*, %"class.std::__1::basic_string.1"*, %"class.std::__1::__compressed_pair.10" }
%"class.std::__1::__compressed_pair.10" = type { %"struct.std::__1::__compressed_pair_elem.11" }
%"struct.std::__1::__compressed_pair_elem.11" = type { %"class.std::__1::basic_string.1"* }
%"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short" = type { [11 x i16], %struct.anon.5 }
%struct.anon.5 = type { %"struct.std::__1::__padding.6", i8 }
%"struct.std::__1::__padding.6" = type { [1 x i8] }
%"class.std::__1::vector.15" = type { %"class.std::__1::__vector_base.16" }
%"class.std::__1::__vector_base.16" = type { i64*, i64*, %"class.std::__1::__compressed_pair.17" }
%"class.std::__1::__compressed_pair.17" = type { %"struct.std::__1::__compressed_pair_elem.18" }
%"struct.std::__1::__compressed_pair_elem.18" = type { i64* }
%struct.AutocompleteMatch = type { %class.AutocompleteProvider*, i32, i32, i8, %"class.std::__1::basic_string.1", %"class.std::__1::basic_string.1", %"class.std::__1::basic_string.1", i8, %"class.std::__1::basic_string.1", %struct.SplitAutocompletion, i8, %class.GURL, %class.GURL, %"class.std::__1::basic_string", %class.GURL, i32, %"class.std::__1::basic_string.1", %"class.std::__1::basic_string.1", %"class.std::__1::vector.40", %"class.std::__1::basic_string.1", %"class.std::__1::vector.40", %"class.std::__1::basic_string.1", %"class.std::__1::vector.40", %"class.absl::optional", i8, [7 x i8], %"class.absl::optional.48", i32, i32, i8, %"class.base::internal::flat_tree", %"class.std::__1::unique_ptr.72", %"class.std::__1::basic_string.1", i8, %class.scoped_refptr, i8, %"class.std::__1::unique_ptr.77", %"class.std::__1::unique_ptr.83", %"class.std::__1::map", %"class.std::__1::vector.23", %"class.std::__1::vector.97", %"class.std::__1::vector.126" }
%class.AutocompleteProvider = type { i32 (...)**, %"class.base::RefCountedThreadSafe", i64, %"class.std::__1::vector.23", i8, i32 }
%"class.base::RefCountedThreadSafe" = type { %"class.base::subtle::RefCountedThreadSafeBase" }
%"class.base::subtle::RefCountedThreadSafeBase" = type { %"class.base::AtomicRefCount" }
%"class.base::AtomicRefCount" = type { %"struct.std::__1::atomic" }
%"struct.std::__1::atomic" = type { %"struct.std::__1::__atomic_base" }
%"struct.std::__1::__atomic_base" = type { %"struct.std::__1::__atomic_base.22" }
%"struct.std::__1::__atomic_base.22" = type { %"struct.std::__1::__cxx_atomic_impl" }
%"struct.std::__1::__cxx_atomic_impl" = type { %"struct.std::__1::__cxx_atomic_base_impl" }
%"struct.std::__1::__cxx_atomic_base_impl" = type { i32 }
%struct.SplitAutocompletion = type { %"class.std::__1::basic_string.1", %"class.std::__1::vector.30" }
%"class.std::__1::vector.30" = type { %"class.std::__1::__vector_base.31" }
%"class.std::__1::__vector_base.31" = type { %"class.gfx::Range"*, %"class.gfx::Range"*, %"class.std::__1::__compressed_pair.32" }
%"class.gfx::Range" = type { i32, i32 }
%"class.std::__1::__compressed_pair.32" = type { %"struct.std::__1::__compressed_pair_elem.33" }
%"struct.std::__1::__compressed_pair_elem.33" = type { %"class.gfx::Range"* }
%class.GURL = type { %"class.std::__1::basic_string", i8, %"struct.url::Parsed", %"class.std::__1::unique_ptr" }
%"struct.url::Parsed" = type { %"struct.url::Component", %"struct.url::Component", %"struct.url::Component", %"struct.url::Component", %"struct.url::Component", %"struct.url::Component", %"struct.url::Component", %"struct.url::Component", i8, %"struct.url::Parsed"* }
%"struct.url::Component" = type { i32, i32 }
%"class.std::__1::unique_ptr" = type { %"class.std::__1::__compressed_pair.37" }
%"class.std::__1::__compressed_pair.37" = type { %"struct.std::__1::__compressed_pair_elem.38" }
%"struct.std::__1::__compressed_pair_elem.38" = type { %class.GURL* }
%"class.std::__1::vector.40" = type { %"class.std::__1::__vector_base.41" }
%"class.std::__1::__vector_base.41" = type { %"struct.AutocompleteMatch::ACMatchClassification"*, %"struct.AutocompleteMatch::ACMatchClassification"*, %"class.std::__1::__compressed_pair.42" }
%"struct.AutocompleteMatch::ACMatchClassification" = type <{ i64, i32, [4 x i8] }>
%"class.std::__1::__compressed_pair.42" = type { %"struct.std::__1::__compressed_pair_elem.43" }
%"struct.std::__1::__compressed_pair_elem.43" = type { %"struct.AutocompleteMatch::ACMatchClassification"* }
%"class.absl::optional" = type { %"class.absl::optional_internal::optional_data" }
%"class.absl::optional_internal::optional_data" = type { %"class.absl::optional_internal::optional_data_base" }
%"class.absl::optional_internal::optional_data_base" = type { %"class.absl::optional_internal::optional_data_dtor_base" }
%"class.absl::optional_internal::optional_data_dtor_base" = type { i8, %union.anon.47 }
%union.anon.47 = type { i32 }
%"class.absl::optional.48" = type { %"class.absl::optional_internal::optional_data.49" }
%"class.absl::optional_internal::optional_data.49" = type { %"class.absl::optional_internal::optional_data_base.50" }
%"class.absl::optional_internal::optional_data_base.50" = type { %"class.absl::optional_internal::optional_data_dtor_base.51" }
%"class.absl::optional_internal::optional_data_dtor_base.51" = type { i8, [7 x i8], %union.anon.52 }
%union.anon.52 = type { %class.SuggestionAnswer }
%class.SuggestionAnswer = type <{ %class.GURL, %"class.SuggestionAnswer::ImageLine", %"class.SuggestionAnswer::ImageLine", i32, [4 x i8] }>
%"class.SuggestionAnswer::ImageLine" = type { %"class.std::__1::vector.53", i32, %"class.absl::optional.60", %"class.absl::optional.60", %class.GURL }
%"class.std::__1::vector.53" = type { %"class.std::__1::__vector_base.54" }
%"class.std::__1::__vector_base.54" = type { %"class.SuggestionAnswer::TextField"*, %"class.SuggestionAnswer::TextField"*, %"class.std::__1::__compressed_pair.55" }
%"class.SuggestionAnswer::TextField" = type { %"class.std::__1::basic_string.1", i32, i8, i32, i32 }
%"class.std::__1::__compressed_pair.55" = type { %"struct.std::__1::__compressed_pair_elem.56" }
%"struct.std::__1::__compressed_pair_elem.56" = type { %"class.SuggestionAnswer::TextField"* }
%"class.absl::optional.60" = type { %"class.absl::optional_internal::optional_data.61" }
%"class.absl::optional_internal::optional_data.61" = type { %"class.absl::optional_internal::optional_data_base.62" }
%"class.absl::optional_internal::optional_data_base.62" = type { %"class.absl::optional_internal::optional_data_dtor_base.63" }
%"class.absl::optional_internal::optional_data_dtor_base.63" = type { i8, %union.anon.64 }
%union.anon.64 = type { %"class.SuggestionAnswer::TextField" }
%"class.base::internal::flat_tree" = type { %"class.std::__1::vector.65" }
%"class.std::__1::vector.65" = type { %"class.std::__1::__vector_base.66" }
%"class.std::__1::__vector_base.66" = type { i32*, i32*, %"class.std::__1::__compressed_pair.67" }
%"class.std::__1::__compressed_pair.67" = type { %"struct.std::__1::__compressed_pair_elem.68" }
%"struct.std::__1::__compressed_pair_elem.68" = type { i32* }
%"class.std::__1::unique_ptr.72" = type { %"class.std::__1::__compressed_pair.73" }
%"class.std::__1::__compressed_pair.73" = type { %"struct.std::__1::__compressed_pair_elem.26" }
%"struct.std::__1::__compressed_pair_elem.26" = type { %struct.AutocompleteMatch* }
%class.scoped_refptr = type { %class.OmniboxAction* }
%class.OmniboxAction = type opaque
%"class.std::__1::unique_ptr.77" = type { %"class.std::__1::__compressed_pair.78" }
%"class.std::__1::__compressed_pair.78" = type { %"struct.std::__1::__compressed_pair_elem.79" }
%"struct.std::__1::__compressed_pair_elem.79" = type { %"struct.TemplateURLRef::SearchTermsArgs"* }
%"struct.TemplateURLRef::SearchTermsArgs" = type { %"class.std::__1::basic_string.1", %"class.std::__1::basic_string.1", i32, i32, %"class.std::__1::basic_string", i32, i64, %"class.std::__1::basic_string", i32, %"class.std::__1::basic_string", %"class.std::__1::basic_string", %"class.std::__1::basic_string", %"class.std::__1::basic_string", i8, %"class.std::__1::basic_string", %class.GURL, %"class.gfx::Size", i32, i8, %"struct.TemplateURLRef::SearchTermsArgs::ContextualSearchParams" }
%"class.gfx::Size" = type { i32, i32 }
%"struct.TemplateURLRef::SearchTermsArgs::ContextualSearchParams" = type { i32, i32, %"class.std::__1::basic_string", i64, i32, i8, %"class.std::__1::basic_string", %"class.std::__1::basic_string", %"class.std::__1::basic_string", %"class.std::__1::basic_string" }
%"class.std::__1::unique_ptr.83" = type { %"class.std::__1::__compressed_pair.84" }
%"class.std::__1::__compressed_pair.84" = type { %"struct.std::__1::__compressed_pair_elem.85" }
%"struct.std::__1::__compressed_pair_elem.85" = type { %"struct.std::__1::pair"* }
%"struct.std::__1::pair" = type opaque
%"class.std::__1::map" = type { %"class.std::__1::__tree" }
%"class.std::__1::__tree" = type { %"class.std::__1::__tree_end_node"*, %"class.std::__1::__compressed_pair.89", %"class.std::__1::__compressed_pair.94" }
%"class.std::__1::__tree_end_node" = type { %"class.std::__1::__tree_node_base"* }
%"class.std::__1::__tree_node_base" = type <{ %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_end_node"*, i8, [7 x i8] }>
%"class.std::__1::__compressed_pair.89" = type { %"struct.std::__1::__compressed_pair_elem.90" }
%"struct.std::__1::__compressed_pair_elem.90" = type { %"class.std::__1::__tree_end_node" }
%"class.std::__1::__compressed_pair.94" = type { %"struct.std::__1::__compressed_pair_elem.95" }
%"struct.std::__1::__compressed_pair_elem.95" = type { i64 }
%"class.std::__1::vector.23" = type { %"class.std::__1::__vector_base.24" }
%"class.std::__1::__vector_base.24" = type { %struct.AutocompleteMatch*, %struct.AutocompleteMatch*, %"class.std::__1::__compressed_pair.25" }
%"class.std::__1::__compressed_pair.25" = type { %"struct.std::__1::__compressed_pair_elem.26" }
%"class.std::__1::vector.97" = type { %"class.std::__1::__vector_base.98" }
%"class.std::__1::__vector_base.98" = type { %"struct.query_tiles::Tile"*, %"struct.query_tiles::Tile"*, %"class.std::__1::__compressed_pair.121" }
%"struct.query_tiles::Tile" = type { %"class.std::__1::basic_string", %"class.std::__1::basic_string", %"class.std::__1::basic_string", %"class.std::__1::basic_string", %"class.std::__1::vector.99", %"class.std::__1::vector.106", %"class.std::__1::vector.114" }
%"class.std::__1::vector.99" = type { %"class.std::__1::__vector_base.100" }
%"class.std::__1::__vector_base.100" = type { %"struct.query_tiles::ImageMetadata"*, %"struct.query_tiles::ImageMetadata"*, %"class.std::__1::__compressed_pair.101" }
%"struct.query_tiles::ImageMetadata" = type { %class.GURL }
%"class.std::__1::__compressed_pair.101" = type { %"struct.std::__1::__compressed_pair_elem.102" }
%"struct.std::__1::__compressed_pair_elem.102" = type { %"struct.query_tiles::ImageMetadata"* }
%"class.std::__1::vector.106" = type { %"class.std::__1::__vector_base.107" }
%"class.std::__1::__vector_base.107" = type { %"class.std::__1::unique_ptr.108"*, %"class.std::__1::unique_ptr.108"*, %"class.std::__1::__compressed_pair.109" }
%"class.std::__1::unique_ptr.108" = type opaque
%"class.std::__1::__compressed_pair.109" = type { %"struct.std::__1::__compressed_pair_elem.110" }
%"struct.std::__1::__compressed_pair_elem.110" = type { %"class.std::__1::unique_ptr.108"* }
%"class.std::__1::vector.114" = type { %"class.std::__1::__vector_base.115" }
%"class.std::__1::__vector_base.115" = type { %"class.std::__1::basic_string"*, %"class.std::__1::basic_string"*, %"class.std::__1::__compressed_pair.116" }
%"class.std::__1::__compressed_pair.116" = type { %"struct.std::__1::__compressed_pair_elem.117" }
%"struct.std::__1::__compressed_pair_elem.117" = type { %"class.std::__1::basic_string"* }
%"class.std::__1::__compressed_pair.121" = type { %"struct.std::__1::__compressed_pair_elem.122" }
%"struct.std::__1::__compressed_pair_elem.122" = type { %"struct.query_tiles::Tile"* }
%"class.std::__1::vector.126" = type { %"class.std::__1::__vector_base.127" }
%"class.std::__1::__vector_base.127" = type { %"struct.AutocompleteMatch::NavsuggestTile"*, %"struct.AutocompleteMatch::NavsuggestTile"*, %"class.std::__1::__compressed_pair.128" }
%"struct.AutocompleteMatch::NavsuggestTile" = type { %class.GURL, %"class.std::__1::basic_string.1" }
%"class.std::__1::__compressed_pair.128" = type { %"struct.std::__1::__compressed_pair_elem.129" }
%"struct.std::__1::__compressed_pair_elem.129" = type { %"struct.AutocompleteMatch::NavsuggestTile"* }

$_ZNSt3__1plIDsNS_11char_traitsIDsEENS_9allocatorIDsEEEENS_12basic_stringIT_T0_T1_EERKS9_PKS6_ = comdat any

$_ZNSt3__112basic_stringIDsNS_11char_traitsIDsEENS_9allocatorIDsEEEaSERKS5_ = comdat any

$_ZNSt3__112basic_stringIDsNS_11char_traitsIDsEENS_9allocatorIDsEEE21__grow_by_and_replaceEmmmmmmPKDs = comdat any

@.str = private unnamed_addr constant [19 x i8] c"url-what-you-typed\00", align 1
@.str.1 = private unnamed_addr constant [12 x i8] c"history-url\00", align 1
@.str.2 = private unnamed_addr constant [14 x i8] c"history-title\00", align 1
@.str.3 = private unnamed_addr constant [13 x i8] c"history-body\00", align 1
@.str.4 = private unnamed_addr constant [16 x i8] c"history-keyword\00", align 1
@.str.5 = private unnamed_addr constant [11 x i8] c"navsuggest\00", align 1
@.str.6 = private unnamed_addr constant [22 x i8] c"search-what-you-typed\00", align 1
@.str.7 = private unnamed_addr constant [15 x i8] c"search-history\00", align 1
@.str.8 = private unnamed_addr constant [15 x i8] c"search-suggest\00", align 1
@.str.9 = private unnamed_addr constant [22 x i8] c"search-suggest-entity\00", align 1
@.str.10 = private unnamed_addr constant [24 x i8] c"search-suggest-infinite\00", align 1
@.str.11 = private unnamed_addr constant [28 x i8] c"search-suggest-personalized\00", align 1
@.str.12 = private unnamed_addr constant [23 x i8] c"search-suggest-profile\00", align 1
@.str.13 = private unnamed_addr constant [20 x i8] c"search-other-engine\00", align 1
@.str.14 = private unnamed_addr constant [14 x i8] c"extension-app\00", align 1
@.str.15 = private unnamed_addr constant [8 x i8] c"contact\00", align 1
@.str.16 = private unnamed_addr constant [15 x i8] c"bookmark-title\00", align 1
@.str.17 = private unnamed_addr constant [24 x i8] c"navsuggest-personalized\00", align 1
@.str.18 = private unnamed_addr constant [25 x i8] c"search-calculator-answer\00", align 1
@.str.19 = private unnamed_addr constant [19 x i8] c"url-from-clipboard\00", align 1
@.str.20 = private unnamed_addr constant [14 x i8] c"voice-suggest\00", align 1
@.str.21 = private unnamed_addr constant [13 x i8] c"physical-web\00", align 1
@.str.22 = private unnamed_addr constant [22 x i8] c"physical-web-overflow\00", align 1
@.str.23 = private unnamed_addr constant [11 x i8] c"tab-search\00", align 1
@.str.24 = private unnamed_addr constant [9 x i8] c"document\00", align 1
@.str.25 = private unnamed_addr constant [6 x i8] c"pedal\00", align 1
@.str.26 = private unnamed_addr constant [20 x i8] c"text-from-clipboard\00", align 1
@.str.27 = private unnamed_addr constant [21 x i8] c"image-from-clipboard\00", align 1
@.str.28 = private unnamed_addr constant [12 x i8] c"query-tiles\00", align 1
@.str.29 = private unnamed_addr constant [17 x i8] c"navsuggest-tiles\00", align 1
@__const._ZN21AutocompleteMatchType8ToStringENS_4TypeE.strings = private unnamed_addr constant [30 x i8*] [i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str, i32 0, i32 0), i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.1, i32 0, i32 0), i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.2, i32 0, i32 0), i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.3, i32 0, i32 0), i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.4, i32 0, i32 0), i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.5, i32 0, i32 0), i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.6, i32 0, i32 0), i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.7, i32 0, i32 0), i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.8, i32 0, i32 0), i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.9, i32 0, i32 0), i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.10, i32 0, i32 0), i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.11, i32 0, i32 0), i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.12, i32 0, i32 0), i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.13, i32 0, i32 0), i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.14, i32 0, i32 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.15, i32 0, i32 0), i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.16, i32 0, i32 0), i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.17, i32 0, i32 0), i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.18, i32 0, i32 0), i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.19, i32 0, i32 0), i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.20, i32 0, i32 0), i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.21, i32 0, i32 0), i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.22, i32 0, i32 0), i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.23, i32 0, i32 0), i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.24, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.25, i32 0, i32 0), i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.26, i32 0, i32 0), i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.27, i32 0, i32 0), i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.28, i32 0, i32 0), i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.29, i32 0, i32 0)], align 16
@_ZZ25GetAccessibilityBaseLabelRK17AutocompleteMatchRKNSt3__112basic_stringIDsNS2_11char_traitsIDsEENS2_9allocatorIDsEEEEPiE11message_ids = internal unnamed_addr constant [30 x i32] [i32 0, i32 19729, i32 19729, i32 19729, i32 0, i32 0, i32 19731, i32 19730, i32 19732, i32 19733, i32 19732, i32 19729, i32 19732, i32 19731, i32 0, i32 0, i32 19735, i32 19729, i32 0, i32 19738, i32 0, i32 0, i32 0, i32 19729, i32 0, i32 0, i32 19737, i32 19736, i32 0, i32 0], align 16
@.str.30 = private unnamed_addr constant [3 x i16] [i16 44, i16 32, i16 0], align 2
@_ZN17OmniboxPopupModel8kNoMatchE = external local_unnamed_addr constant i64, align 8

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN21AutocompleteMatchType8ToStringENS_4TypeE(%"class.std::__1::basic_string"* noalias sret, i32) local_unnamed_addr #0 align 2 {
  %3 = zext i32 %1 to i64
  %4 = getelementptr inbounds [30 x i8*], [30 x i8*]* @__const._ZN21AutocompleteMatchType8ToStringENS_4TypeE.strings, i64 0, i64 %3
  %5 = load i8*, i8** %4, align 8
  %6 = tail call i64 @strlen(i8* %5) #10
  %7 = icmp ugt i64 %6, -17
  br i1 %7, label %8, label %10

8:                                                ; preds = %2
  %9 = bitcast %"class.std::__1::basic_string"* %0 to %"class.std::__1::__basic_string_common"*
  tail call void @_ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__basic_string_common"* %9) #11
  unreachable

10:                                               ; preds = %2
  %11 = icmp ult i64 %6, 23
  br i1 %11, label %20, label %12

12:                                               ; preds = %10
  %13 = add nuw i64 %6, 16
  %14 = and i64 %13, -16
  %15 = tail call i8* @_Znwm(i64 %14) #12
  %16 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  store i8* %15, i8** %16, align 8
  %17 = or i64 %14, -9223372036854775808
  %18 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 2
  store i64 %17, i64* %18, align 8
  %19 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  store i64 %6, i64* %19, align 8
  br label %26

20:                                               ; preds = %10
  %21 = trunc i64 %6 to i8
  %22 = bitcast %"class.std::__1::basic_string"* %0 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %23 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %22, i64 0, i32 1, i32 0
  store i8 %21, i8* %23, align 1
  %24 = bitcast %"class.std::__1::basic_string"* %0 to i8*
  %25 = icmp eq i64 %6, 0
  br i1 %25, label %28, label %26

26:                                               ; preds = %20, %12
  %27 = phi i8* [ %15, %12 ], [ %24, %20 ]
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %27, i8* align 1 %5, i64 %6, i1 false) #10
  br label %28

28:                                               ; preds = %20, %26
  %29 = phi i8* [ %24, %20 ], [ %27, %26 ]
  %30 = getelementptr inbounds i8, i8* %29, i64 %6
  store i8 0, i8* %30, align 1
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: nofree norecurse nounwind ssp uwtable writeonly
define hidden zeroext i1 @_ZN21AutocompleteMatchType11FromIntegerEiPNS_4TypeE(i32, i32* nocapture) local_unnamed_addr #2 align 2 {
  %3 = icmp ugt i32 %0, 29
  br i1 %3, label %5, label %4

4:                                                ; preds = %2
  store i32 %0, i32* %1, align 4
  br label %5

5:                                                ; preds = %2, %4
  %6 = phi i1 [ true, %4 ], [ false, %2 ]
  ret i1 %6
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_Z22AddAdditionalMessagingRKNSt3__112basic_stringIDsNS_11char_traitsIDsEENS_9allocatorIDsEEEES7_Pi(%"class.std::__1::basic_string.1"* noalias sret, %"class.std::__1::basic_string.1"* dereferenceable(24), %"class.std::__1::basic_string.1"* nocapture readonly dereferenceable(24), i32*) local_unnamed_addr #0 {
  %5 = alloca %"class.std::__1::basic_string.1", align 8
  %6 = alloca %"class.std::__1::vector", align 8
  %7 = alloca [1 x %"class.std::__1::basic_string.1"], align 8
  %8 = alloca %"class.std::__1::vector", align 8
  %9 = alloca [1 x %"class.std::__1::basic_string.1"], align 8
  %10 = icmp eq i32* %3, null
  br i1 %10, label %291, label %11

11:                                               ; preds = %4
  %12 = bitcast %"class.std::__1::vector"* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %12) #10
  %13 = bitcast [1 x %"class.std::__1::basic_string.1"]* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %13) #10
  %14 = bitcast [1 x %"class.std::__1::basic_string.1"]* %7 to %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"*
  %15 = getelementptr inbounds %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short", %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"* %14, i64 0, i32 1, i32 1
  store i8 1, i8* %15, align 1
  %16 = bitcast [1 x %"class.std::__1::basic_string.1"]* %7 to i16*
  store i16 -4, i16* %16, align 8
  %17 = getelementptr inbounds i16, i16* %16, i64 1
  store i16 0, i16* %17, align 2
  %18 = tail call i8* @_Znwm(i64 24) #12
  %19 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %6, i64 0, i32 0, i32 1
  %20 = bitcast %"class.std::__1::basic_string.1"** %19 to i8**
  store i8* %18, i8** %20, align 8
  %21 = bitcast %"class.std::__1::vector"* %6 to i8**
  store i8* %18, i8** %21, align 8
  %22 = getelementptr inbounds i8, i8* %18, i64 24
  %23 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %6, i64 0, i32 0, i32 2, i32 0, i32 0
  %24 = bitcast %"class.std::__1::basic_string.1"** %23 to i8**
  store i8* %22, i8** %24, align 8
  %25 = bitcast %"class.std::__1::basic_string.1"** %19 to i64*
  %26 = bitcast [1 x %"class.std::__1::basic_string.1"]* %7 to %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"*
  %27 = getelementptr inbounds %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short", %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"* %26, i64 0, i32 1, i32 1
  %28 = load i8, i8* %27, align 1
  %29 = icmp slt i8 %28, 0
  br i1 %29, label %32, label %30

30:                                               ; preds = %11
  %31 = bitcast [1 x %"class.std::__1::basic_string.1"]* %7 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %18, i8* nonnull align 8 %31, i64 24, i1 false) #10
  br label %211

32:                                               ; preds = %11
  %33 = getelementptr inbounds [1 x %"class.std::__1::basic_string.1"], [1 x %"class.std::__1::basic_string.1"]* %7, i64 0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %34 = load i16*, i16** %33, align 8
  %35 = bitcast i16* %34 to i8*
  %36 = getelementptr inbounds [1 x %"class.std::__1::basic_string.1"], [1 x %"class.std::__1::basic_string.1"]* %7, i64 0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %37 = load i64, i64* %36, align 8
  %38 = icmp ult i64 %37, 11
  br i1 %38, label %39, label %42

39:                                               ; preds = %32
  %40 = trunc i64 %37 to i8
  %41 = getelementptr inbounds i8, i8* %18, i64 23
  store i8 %40, i8* %41, align 1
  br label %60

42:                                               ; preds = %32
  %43 = icmp ugt i64 %37, 9223372036854775791
  br i1 %43, label %44, label %46

44:                                               ; preds = %42
  %45 = bitcast i8* %18 to %"class.std::__1::__basic_string_common"*
  call void @_ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__basic_string_common"* nonnull %45) #11
  unreachable

46:                                               ; preds = %42
  %47 = add nuw nsw i64 %37, 8
  %48 = and i64 %47, -8
  %49 = icmp slt i64 %48, 0
  br i1 %49, label %50, label %51

50:                                               ; preds = %46
  call void @abort() #11
  unreachable

51:                                               ; preds = %46
  %52 = shl i64 %48, 1
  %53 = call i8* @_Znwm(i64 %52) #12
  %54 = bitcast i8* %18 to i8**
  store i8* %53, i8** %54, align 8
  %55 = or i64 %48, -9223372036854775808
  %56 = getelementptr inbounds i8, i8* %18, i64 16
  %57 = bitcast i8* %56 to i64*
  store i64 %55, i64* %57, align 8
  %58 = getelementptr inbounds i8, i8* %18, i64 8
  %59 = bitcast i8* %58 to i64*
  store i64 %37, i64* %59, align 8
  br label %60

60:                                               ; preds = %51, %39
  %61 = phi i8* [ %18, %39 ], [ %53, %51 ]
  %62 = bitcast i8* %61 to i16*
  %63 = add nuw nsw i64 %37, 1
  %64 = add i64 %37, 1
  %65 = icmp ult i64 %64, 16
  br i1 %65, label %158, label %66

66:                                               ; preds = %60
  %67 = shl i64 %37, 1
  %68 = add i64 %67, 2
  %69 = getelementptr i8, i8* %61, i64 %68
  %70 = add i64 %37, 1
  %71 = getelementptr i16, i16* %34, i64 %70
  %72 = bitcast i16* %71 to i8*
  %73 = icmp ult i8* %61, %72
  %74 = icmp ugt i8* %69, %35
  %75 = and i1 %73, %74
  br i1 %75, label %158, label %76

76:                                               ; preds = %66
  %77 = and i64 %64, -16
  %78 = sub i64 %63, %77
  %79 = getelementptr i16, i16* %34, i64 %77
  %80 = getelementptr i16, i16* %62, i64 %77
  %81 = add i64 %77, -16
  %82 = lshr exact i64 %81, 4
  %83 = add nuw nsw i64 %82, 1
  %84 = and i64 %83, 3
  %85 = icmp ult i64 %81, 48
  br i1 %85, label %137, label %86

86:                                               ; preds = %76
  %87 = sub nsw i64 %83, %84
  br label %88

88:                                               ; preds = %88, %86
  %89 = phi i64 [ 0, %86 ], [ %134, %88 ]
  %90 = phi i64 [ %87, %86 ], [ %135, %88 ]
  %91 = getelementptr i16, i16* %34, i64 %89
  %92 = getelementptr i16, i16* %62, i64 %89
  %93 = bitcast i16* %91 to <8 x i16>*
  %94 = load <8 x i16>, <8 x i16>* %93, align 2, !alias.scope !2
  %95 = getelementptr i16, i16* %91, i64 8
  %96 = bitcast i16* %95 to <8 x i16>*
  %97 = load <8 x i16>, <8 x i16>* %96, align 2, !alias.scope !2
  %98 = bitcast i16* %92 to <8 x i16>*
  store <8 x i16> %94, <8 x i16>* %98, align 2, !alias.scope !5, !noalias !2
  %99 = getelementptr i16, i16* %92, i64 8
  %100 = bitcast i16* %99 to <8 x i16>*
  store <8 x i16> %97, <8 x i16>* %100, align 2, !alias.scope !5, !noalias !2
  %101 = or i64 %89, 16
  %102 = getelementptr i16, i16* %34, i64 %101
  %103 = getelementptr i16, i16* %62, i64 %101
  %104 = bitcast i16* %102 to <8 x i16>*
  %105 = load <8 x i16>, <8 x i16>* %104, align 2, !alias.scope !2
  %106 = getelementptr i16, i16* %102, i64 8
  %107 = bitcast i16* %106 to <8 x i16>*
  %108 = load <8 x i16>, <8 x i16>* %107, align 2, !alias.scope !2
  %109 = bitcast i16* %103 to <8 x i16>*
  store <8 x i16> %105, <8 x i16>* %109, align 2, !alias.scope !5, !noalias !2
  %110 = getelementptr i16, i16* %103, i64 8
  %111 = bitcast i16* %110 to <8 x i16>*
  store <8 x i16> %108, <8 x i16>* %111, align 2, !alias.scope !5, !noalias !2
  %112 = or i64 %89, 32
  %113 = getelementptr i16, i16* %34, i64 %112
  %114 = getelementptr i16, i16* %62, i64 %112
  %115 = bitcast i16* %113 to <8 x i16>*
  %116 = load <8 x i16>, <8 x i16>* %115, align 2, !alias.scope !2
  %117 = getelementptr i16, i16* %113, i64 8
  %118 = bitcast i16* %117 to <8 x i16>*
  %119 = load <8 x i16>, <8 x i16>* %118, align 2, !alias.scope !2
  %120 = bitcast i16* %114 to <8 x i16>*
  store <8 x i16> %116, <8 x i16>* %120, align 2, !alias.scope !5, !noalias !2
  %121 = getelementptr i16, i16* %114, i64 8
  %122 = bitcast i16* %121 to <8 x i16>*
  store <8 x i16> %119, <8 x i16>* %122, align 2, !alias.scope !5, !noalias !2
  %123 = or i64 %89, 48
  %124 = getelementptr i16, i16* %34, i64 %123
  %125 = getelementptr i16, i16* %62, i64 %123
  %126 = bitcast i16* %124 to <8 x i16>*
  %127 = load <8 x i16>, <8 x i16>* %126, align 2, !alias.scope !2
  %128 = getelementptr i16, i16* %124, i64 8
  %129 = bitcast i16* %128 to <8 x i16>*
  %130 = load <8 x i16>, <8 x i16>* %129, align 2, !alias.scope !2
  %131 = bitcast i16* %125 to <8 x i16>*
  store <8 x i16> %127, <8 x i16>* %131, align 2, !alias.scope !5, !noalias !2
  %132 = getelementptr i16, i16* %125, i64 8
  %133 = bitcast i16* %132 to <8 x i16>*
  store <8 x i16> %130, <8 x i16>* %133, align 2, !alias.scope !5, !noalias !2
  %134 = add i64 %89, 64
  %135 = add i64 %90, -4
  %136 = icmp eq i64 %135, 0
  br i1 %136, label %137, label %88, !llvm.loop !7

137:                                              ; preds = %88, %76
  %138 = phi i64 [ 0, %76 ], [ %134, %88 ]
  %139 = icmp eq i64 %84, 0
  br i1 %139, label %156, label %140

140:                                              ; preds = %137, %140
  %141 = phi i64 [ %153, %140 ], [ %138, %137 ]
  %142 = phi i64 [ %154, %140 ], [ %84, %137 ]
  %143 = getelementptr i16, i16* %34, i64 %141
  %144 = getelementptr i16, i16* %62, i64 %141
  %145 = bitcast i16* %143 to <8 x i16>*
  %146 = load <8 x i16>, <8 x i16>* %145, align 2, !alias.scope !2
  %147 = getelementptr i16, i16* %143, i64 8
  %148 = bitcast i16* %147 to <8 x i16>*
  %149 = load <8 x i16>, <8 x i16>* %148, align 2, !alias.scope !2
  %150 = bitcast i16* %144 to <8 x i16>*
  store <8 x i16> %146, <8 x i16>* %150, align 2, !alias.scope !5, !noalias !2
  %151 = getelementptr i16, i16* %144, i64 8
  %152 = bitcast i16* %151 to <8 x i16>*
  store <8 x i16> %149, <8 x i16>* %152, align 2, !alias.scope !5, !noalias !2
  %153 = add i64 %141, 16
  %154 = add i64 %142, -1
  %155 = icmp eq i64 %154, 0
  br i1 %155, label %156, label %140, !llvm.loop !9

156:                                              ; preds = %140, %137
  %157 = icmp eq i64 %64, %77
  br i1 %157, label %211, label %158

158:                                              ; preds = %156, %66, %60
  %159 = phi i64 [ %63, %66 ], [ %63, %60 ], [ %78, %156 ]
  %160 = phi i16* [ %34, %66 ], [ %34, %60 ], [ %79, %156 ]
  %161 = phi i16* [ %62, %66 ], [ %62, %60 ], [ %80, %156 ]
  %162 = add i64 %159, -1
  %163 = and i64 %159, 7
  %164 = icmp eq i64 %163, 0
  br i1 %164, label %176, label %165

165:                                              ; preds = %158, %165
  %166 = phi i64 [ %171, %165 ], [ %159, %158 ]
  %167 = phi i16* [ %173, %165 ], [ %160, %158 ]
  %168 = phi i16* [ %172, %165 ], [ %161, %158 ]
  %169 = phi i64 [ %174, %165 ], [ %163, %158 ]
  %170 = load i16, i16* %167, align 2
  store i16 %170, i16* %168, align 2
  %171 = add i64 %166, -1
  %172 = getelementptr inbounds i16, i16* %168, i64 1
  %173 = getelementptr inbounds i16, i16* %167, i64 1
  %174 = add i64 %169, -1
  %175 = icmp eq i64 %174, 0
  br i1 %175, label %176, label %165, !llvm.loop !11

176:                                              ; preds = %165, %158
  %177 = phi i64 [ %159, %158 ], [ %171, %165 ]
  %178 = phi i16* [ %160, %158 ], [ %173, %165 ]
  %179 = phi i16* [ %161, %158 ], [ %172, %165 ]
  %180 = icmp ult i64 %162, 7
  br i1 %180, label %211, label %181

181:                                              ; preds = %176, %181
  %182 = phi i64 [ %207, %181 ], [ %177, %176 ]
  %183 = phi i16* [ %209, %181 ], [ %178, %176 ]
  %184 = phi i16* [ %208, %181 ], [ %179, %176 ]
  %185 = load i16, i16* %183, align 2
  store i16 %185, i16* %184, align 2
  %186 = getelementptr inbounds i16, i16* %184, i64 1
  %187 = getelementptr inbounds i16, i16* %183, i64 1
  %188 = load i16, i16* %187, align 2
  store i16 %188, i16* %186, align 2
  %189 = getelementptr inbounds i16, i16* %184, i64 2
  %190 = getelementptr inbounds i16, i16* %183, i64 2
  %191 = load i16, i16* %190, align 2
  store i16 %191, i16* %189, align 2
  %192 = getelementptr inbounds i16, i16* %184, i64 3
  %193 = getelementptr inbounds i16, i16* %183, i64 3
  %194 = load i16, i16* %193, align 2
  store i16 %194, i16* %192, align 2
  %195 = getelementptr inbounds i16, i16* %184, i64 4
  %196 = getelementptr inbounds i16, i16* %183, i64 4
  %197 = load i16, i16* %196, align 2
  store i16 %197, i16* %195, align 2
  %198 = getelementptr inbounds i16, i16* %184, i64 5
  %199 = getelementptr inbounds i16, i16* %183, i64 5
  %200 = load i16, i16* %199, align 2
  store i16 %200, i16* %198, align 2
  %201 = getelementptr inbounds i16, i16* %184, i64 6
  %202 = getelementptr inbounds i16, i16* %183, i64 6
  %203 = load i16, i16* %202, align 2
  store i16 %203, i16* %201, align 2
  %204 = getelementptr inbounds i16, i16* %184, i64 7
  %205 = getelementptr inbounds i16, i16* %183, i64 7
  %206 = load i16, i16* %205, align 2
  store i16 %206, i16* %204, align 2
  %207 = add i64 %182, -8
  %208 = getelementptr inbounds i16, i16* %184, i64 8
  %209 = getelementptr inbounds i16, i16* %183, i64 8
  %210 = icmp eq i64 %207, 0
  br i1 %210, label %211, label %181, !llvm.loop !12

211:                                              ; preds = %176, %181, %156, %30
  %212 = getelementptr inbounds i8, i8* %18, i64 24
  %213 = ptrtoint i8* %212 to i64
  store i64 %213, i64* %25, align 8
  call void @_ZN9l10n_util12FormatStringERKNSt3__112basic_stringIDsNS0_11char_traitsIDsEENS0_9allocatorIDsEEEERKNS0_6vectorIS6_NS4_IS6_EEEEPNS9_ImNS4_ImEEEE(%"class.std::__1::basic_string.1"* nonnull sret %5, %"class.std::__1::basic_string.1"* dereferenceable(24) %1, %"class.std::__1::vector"* nonnull dereferenceable(24) %6, %"class.std::__1::vector.15"* null) #10
  %214 = bitcast %"class.std::__1::basic_string.1"* %5 to %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"*
  %215 = getelementptr inbounds %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short", %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"* %214, i64 0, i32 1, i32 1
  %216 = load i8, i8* %215, align 1
  %217 = icmp slt i8 %216, 0
  %218 = getelementptr inbounds %"class.std::__1::basic_string.1", %"class.std::__1::basic_string.1"* %5, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %219 = load i16*, i16** %218, align 8
  %220 = getelementptr inbounds %"class.std::__1::basic_string.1", %"class.std::__1::basic_string.1"* %5, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %221 = load i64, i64* %220, align 8
  %222 = bitcast %"class.std::__1::basic_string.1"* %5 to i16*
  %223 = zext i8 %216 to i64
  %224 = select i1 %217, i16* %219, i16* %222
  %225 = select i1 %217, i64 %221, i64 %223
  %226 = getelementptr inbounds i16, i16* %224, i64 %225
  %227 = ptrtoint i16* %224 to i64
  %228 = shl nuw i64 %225, 1
  %229 = icmp slt i64 %228, 2
  %230 = icmp eq i64 %225, 0
  %231 = or i1 %230, %229
  %232 = bitcast i16* %219 to i8*
  br i1 %231, label %252, label %233

233:                                              ; preds = %211, %238
  %234 = phi i64 [ %240, %238 ], [ %225, %211 ]
  %235 = phi i16* [ %239, %238 ], [ %224, %211 ]
  %236 = load i16, i16* %235, align 2
  %237 = icmp eq i16 %236, -4
  br i1 %237, label %242, label %238

238:                                              ; preds = %233
  %239 = getelementptr inbounds i16, i16* %235, i64 1
  %240 = add i64 %234, -1
  %241 = icmp eq i64 %240, 0
  br i1 %241, label %252, label %233

242:                                              ; preds = %233
  %243 = icmp eq i16* %235, null
  br i1 %243, label %252, label %244

244:                                              ; preds = %242
  %245 = ptrtoint i16* %235 to i64
  %246 = icmp eq i16* %235, %226
  %247 = sub i64 %245, %227
  br i1 %246, label %252, label %248

248:                                              ; preds = %244
  %249 = lshr exact i64 %247, 1
  %250 = icmp eq i64 %247, -2
  %251 = trunc i64 %249 to i32
  br i1 %250, label %252, label %253

252:                                              ; preds = %238, %248, %244, %242, %211
  br label %253

253:                                              ; preds = %248, %252
  %254 = phi i32 [ 0, %252 ], [ %251, %248 ]
  %255 = load i32, i32* %3, align 4
  %256 = add nsw i32 %255, %254
  store i32 %256, i32* %3, align 4
  br i1 %217, label %257, label %258

257:                                              ; preds = %253
  call void @_ZdlPv(i8* %232) #12
  br label %258

258:                                              ; preds = %253, %257
  %259 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %6, i64 0, i32 0, i32 0
  %260 = load %"class.std::__1::basic_string.1"*, %"class.std::__1::basic_string.1"** %259, align 8
  %261 = icmp eq %"class.std::__1::basic_string.1"* %260, null
  br i1 %261, label %282, label %262

262:                                              ; preds = %258
  %263 = bitcast %"class.std::__1::basic_string.1"* %260 to i8*
  %264 = load %"class.std::__1::basic_string.1"*, %"class.std::__1::basic_string.1"** %19, align 8
  %265 = icmp eq %"class.std::__1::basic_string.1"* %264, %260
  br i1 %265, label %280, label %266

266:                                              ; preds = %262, %276
  %267 = phi %"class.std::__1::basic_string.1"* [ %268, %276 ], [ %264, %262 ]
  %268 = getelementptr inbounds %"class.std::__1::basic_string.1", %"class.std::__1::basic_string.1"* %267, i64 -1
  %269 = bitcast %"class.std::__1::basic_string.1"* %268 to %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"*
  %270 = getelementptr inbounds %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short", %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"* %269, i64 0, i32 1, i32 1
  %271 = load i8, i8* %270, align 1
  %272 = icmp slt i8 %271, 0
  br i1 %272, label %273, label %276

273:                                              ; preds = %266
  %274 = bitcast %"class.std::__1::basic_string.1"* %268 to i8**
  %275 = load i8*, i8** %274, align 8
  call void @_ZdlPv(i8* %275) #12
  br label %276

276:                                              ; preds = %273, %266
  %277 = icmp eq %"class.std::__1::basic_string.1"* %268, %260
  br i1 %277, label %278, label %266

278:                                              ; preds = %276
  %279 = load i8*, i8** %21, align 8
  br label %280

280:                                              ; preds = %278, %262
  %281 = phi i8* [ %279, %278 ], [ %263, %262 ]
  store %"class.std::__1::basic_string.1"* %260, %"class.std::__1::basic_string.1"** %19, align 8
  call void @_ZdlPv(i8* %281) #12
  br label %282

282:                                              ; preds = %258, %280
  %283 = bitcast [1 x %"class.std::__1::basic_string.1"]* %7 to %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"*
  %284 = getelementptr inbounds %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short", %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"* %283, i64 0, i32 1, i32 1
  %285 = load i8, i8* %284, align 1
  %286 = icmp slt i8 %285, 0
  br i1 %286, label %287, label %290

287:                                              ; preds = %282
  %288 = bitcast [1 x %"class.std::__1::basic_string.1"]* %7 to i8**
  %289 = load i8*, i8** %288, align 8
  call void @_ZdlPv(i8* %289) #12
  br label %290

290:                                              ; preds = %282, %287
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %13) #10
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %12) #10
  br label %291

291:                                              ; preds = %4, %290
  %292 = bitcast %"class.std::__1::vector"* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %292) #10
  %293 = bitcast [1 x %"class.std::__1::basic_string.1"]* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %293) #10
  %294 = bitcast %"class.std::__1::basic_string.1"* %2 to %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"*
  %295 = getelementptr inbounds %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short", %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"* %294, i64 0, i32 1, i32 1
  %296 = load i8, i8* %295, align 1
  %297 = icmp slt i8 %296, 0
  br i1 %297, label %300, label %298

298:                                              ; preds = %291
  %299 = bitcast %"class.std::__1::basic_string.1"* %2 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %293, i8* align 8 %299, i64 24, i1 false) #10
  br label %475

300:                                              ; preds = %291
  %301 = getelementptr inbounds %"class.std::__1::basic_string.1", %"class.std::__1::basic_string.1"* %2, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %302 = load i16*, i16** %301, align 8
  %303 = getelementptr inbounds %"class.std::__1::basic_string.1", %"class.std::__1::basic_string.1"* %2, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %304 = load i64, i64* %303, align 8
  %305 = icmp ult i64 %304, 11
  br i1 %305, label %306, label %311

306:                                              ; preds = %300
  %307 = bitcast [1 x %"class.std::__1::basic_string.1"]* %9 to i16*
  %308 = trunc i64 %304 to i8
  %309 = bitcast [1 x %"class.std::__1::basic_string.1"]* %9 to %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"*
  %310 = getelementptr inbounds %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short", %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"* %309, i64 0, i32 1, i32 1
  store i8 %308, i8* %310, align 1
  br label %328

311:                                              ; preds = %300
  %312 = icmp ugt i64 %304, 9223372036854775791
  br i1 %312, label %313, label %315

313:                                              ; preds = %311
  %314 = bitcast [1 x %"class.std::__1::basic_string.1"]* %9 to %"class.std::__1::__basic_string_common"*
  call void @_ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__basic_string_common"* nonnull %314) #11
  unreachable

315:                                              ; preds = %311
  %316 = add nuw nsw i64 %304, 8
  %317 = and i64 %316, -8
  %318 = icmp slt i64 %317, 0
  br i1 %318, label %319, label %320

319:                                              ; preds = %315
  call void @abort() #11
  unreachable

320:                                              ; preds = %315
  %321 = shl i64 %317, 1
  %322 = call i8* @_Znwm(i64 %321) #12
  %323 = bitcast i8* %322 to i16*
  %324 = bitcast [1 x %"class.std::__1::basic_string.1"]* %9 to i8**
  store i8* %322, i8** %324, align 8
  %325 = or i64 %317, -9223372036854775808
  %326 = getelementptr inbounds [1 x %"class.std::__1::basic_string.1"], [1 x %"class.std::__1::basic_string.1"]* %9, i64 0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 2
  store i64 %325, i64* %326, align 8
  %327 = getelementptr inbounds [1 x %"class.std::__1::basic_string.1"], [1 x %"class.std::__1::basic_string.1"]* %9, i64 0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  store i64 %304, i64* %327, align 8
  br label %328

328:                                              ; preds = %320, %306
  %329 = phi i16* [ %307, %306 ], [ %323, %320 ]
  %330 = add nuw nsw i64 %304, 1
  %331 = add i64 %304, 1
  %332 = icmp ult i64 %331, 16
  br i1 %332, label %422, label %333

333:                                              ; preds = %328
  %334 = add i64 %304, 1
  %335 = getelementptr i16, i16* %329, i64 %334
  %336 = getelementptr i16, i16* %302, i64 %334
  %337 = icmp ult i16* %329, %336
  %338 = icmp ult i16* %302, %335
  %339 = and i1 %337, %338
  br i1 %339, label %422, label %340

340:                                              ; preds = %333
  %341 = and i64 %331, -16
  %342 = sub i64 %330, %341
  %343 = getelementptr i16, i16* %302, i64 %341
  %344 = getelementptr i16, i16* %329, i64 %341
  %345 = add i64 %341, -16
  %346 = lshr exact i64 %345, 4
  %347 = add nuw nsw i64 %346, 1
  %348 = and i64 %347, 3
  %349 = icmp ult i64 %345, 48
  br i1 %349, label %401, label %350

350:                                              ; preds = %340
  %351 = sub nsw i64 %347, %348
  br label %352

352:                                              ; preds = %352, %350
  %353 = phi i64 [ 0, %350 ], [ %398, %352 ]
  %354 = phi i64 [ %351, %350 ], [ %399, %352 ]
  %355 = getelementptr i16, i16* %302, i64 %353
  %356 = getelementptr i16, i16* %329, i64 %353
  %357 = bitcast i16* %355 to <8 x i16>*
  %358 = load <8 x i16>, <8 x i16>* %357, align 2, !alias.scope !13
  %359 = getelementptr i16, i16* %355, i64 8
  %360 = bitcast i16* %359 to <8 x i16>*
  %361 = load <8 x i16>, <8 x i16>* %360, align 2, !alias.scope !13
  %362 = bitcast i16* %356 to <8 x i16>*
  store <8 x i16> %358, <8 x i16>* %362, align 2, !alias.scope !16, !noalias !13
  %363 = getelementptr i16, i16* %356, i64 8
  %364 = bitcast i16* %363 to <8 x i16>*
  store <8 x i16> %361, <8 x i16>* %364, align 2, !alias.scope !16, !noalias !13
  %365 = or i64 %353, 16
  %366 = getelementptr i16, i16* %302, i64 %365
  %367 = getelementptr i16, i16* %329, i64 %365
  %368 = bitcast i16* %366 to <8 x i16>*
  %369 = load <8 x i16>, <8 x i16>* %368, align 2, !alias.scope !13
  %370 = getelementptr i16, i16* %366, i64 8
  %371 = bitcast i16* %370 to <8 x i16>*
  %372 = load <8 x i16>, <8 x i16>* %371, align 2, !alias.scope !13
  %373 = bitcast i16* %367 to <8 x i16>*
  store <8 x i16> %369, <8 x i16>* %373, align 2, !alias.scope !16, !noalias !13
  %374 = getelementptr i16, i16* %367, i64 8
  %375 = bitcast i16* %374 to <8 x i16>*
  store <8 x i16> %372, <8 x i16>* %375, align 2, !alias.scope !16, !noalias !13
  %376 = or i64 %353, 32
  %377 = getelementptr i16, i16* %302, i64 %376
  %378 = getelementptr i16, i16* %329, i64 %376
  %379 = bitcast i16* %377 to <8 x i16>*
  %380 = load <8 x i16>, <8 x i16>* %379, align 2, !alias.scope !13
  %381 = getelementptr i16, i16* %377, i64 8
  %382 = bitcast i16* %381 to <8 x i16>*
  %383 = load <8 x i16>, <8 x i16>* %382, align 2, !alias.scope !13
  %384 = bitcast i16* %378 to <8 x i16>*
  store <8 x i16> %380, <8 x i16>* %384, align 2, !alias.scope !16, !noalias !13
  %385 = getelementptr i16, i16* %378, i64 8
  %386 = bitcast i16* %385 to <8 x i16>*
  store <8 x i16> %383, <8 x i16>* %386, align 2, !alias.scope !16, !noalias !13
  %387 = or i64 %353, 48
  %388 = getelementptr i16, i16* %302, i64 %387
  %389 = getelementptr i16, i16* %329, i64 %387
  %390 = bitcast i16* %388 to <8 x i16>*
  %391 = load <8 x i16>, <8 x i16>* %390, align 2, !alias.scope !13
  %392 = getelementptr i16, i16* %388, i64 8
  %393 = bitcast i16* %392 to <8 x i16>*
  %394 = load <8 x i16>, <8 x i16>* %393, align 2, !alias.scope !13
  %395 = bitcast i16* %389 to <8 x i16>*
  store <8 x i16> %391, <8 x i16>* %395, align 2, !alias.scope !16, !noalias !13
  %396 = getelementptr i16, i16* %389, i64 8
  %397 = bitcast i16* %396 to <8 x i16>*
  store <8 x i16> %394, <8 x i16>* %397, align 2, !alias.scope !16, !noalias !13
  %398 = add i64 %353, 64
  %399 = add i64 %354, -4
  %400 = icmp eq i64 %399, 0
  br i1 %400, label %401, label %352, !llvm.loop !18

401:                                              ; preds = %352, %340
  %402 = phi i64 [ 0, %340 ], [ %398, %352 ]
  %403 = icmp eq i64 %348, 0
  br i1 %403, label %420, label %404

404:                                              ; preds = %401, %404
  %405 = phi i64 [ %417, %404 ], [ %402, %401 ]
  %406 = phi i64 [ %418, %404 ], [ %348, %401 ]
  %407 = getelementptr i16, i16* %302, i64 %405
  %408 = getelementptr i16, i16* %329, i64 %405
  %409 = bitcast i16* %407 to <8 x i16>*
  %410 = load <8 x i16>, <8 x i16>* %409, align 2, !alias.scope !13
  %411 = getelementptr i16, i16* %407, i64 8
  %412 = bitcast i16* %411 to <8 x i16>*
  %413 = load <8 x i16>, <8 x i16>* %412, align 2, !alias.scope !13
  %414 = bitcast i16* %408 to <8 x i16>*
  store <8 x i16> %410, <8 x i16>* %414, align 2, !alias.scope !16, !noalias !13
  %415 = getelementptr i16, i16* %408, i64 8
  %416 = bitcast i16* %415 to <8 x i16>*
  store <8 x i16> %413, <8 x i16>* %416, align 2, !alias.scope !16, !noalias !13
  %417 = add i64 %405, 16
  %418 = add i64 %406, -1
  %419 = icmp eq i64 %418, 0
  br i1 %419, label %420, label %404, !llvm.loop !19

420:                                              ; preds = %404, %401
  %421 = icmp eq i64 %331, %341
  br i1 %421, label %475, label %422

422:                                              ; preds = %420, %333, %328
  %423 = phi i64 [ %330, %333 ], [ %330, %328 ], [ %342, %420 ]
  %424 = phi i16* [ %302, %333 ], [ %302, %328 ], [ %343, %420 ]
  %425 = phi i16* [ %329, %333 ], [ %329, %328 ], [ %344, %420 ]
  %426 = add i64 %423, -1
  %427 = and i64 %423, 7
  %428 = icmp eq i64 %427, 0
  br i1 %428, label %440, label %429

429:                                              ; preds = %422, %429
  %430 = phi i64 [ %435, %429 ], [ %423, %422 ]
  %431 = phi i16* [ %437, %429 ], [ %424, %422 ]
  %432 = phi i16* [ %436, %429 ], [ %425, %422 ]
  %433 = phi i64 [ %438, %429 ], [ %427, %422 ]
  %434 = load i16, i16* %431, align 2
  store i16 %434, i16* %432, align 2
  %435 = add i64 %430, -1
  %436 = getelementptr inbounds i16, i16* %432, i64 1
  %437 = getelementptr inbounds i16, i16* %431, i64 1
  %438 = add i64 %433, -1
  %439 = icmp eq i64 %438, 0
  br i1 %439, label %440, label %429, !llvm.loop !20

440:                                              ; preds = %429, %422
  %441 = phi i64 [ %423, %422 ], [ %435, %429 ]
  %442 = phi i16* [ %424, %422 ], [ %437, %429 ]
  %443 = phi i16* [ %425, %422 ], [ %436, %429 ]
  %444 = icmp ult i64 %426, 7
  br i1 %444, label %475, label %445

445:                                              ; preds = %440, %445
  %446 = phi i64 [ %471, %445 ], [ %441, %440 ]
  %447 = phi i16* [ %473, %445 ], [ %442, %440 ]
  %448 = phi i16* [ %472, %445 ], [ %443, %440 ]
  %449 = load i16, i16* %447, align 2
  store i16 %449, i16* %448, align 2
  %450 = getelementptr inbounds i16, i16* %448, i64 1
  %451 = getelementptr inbounds i16, i16* %447, i64 1
  %452 = load i16, i16* %451, align 2
  store i16 %452, i16* %450, align 2
  %453 = getelementptr inbounds i16, i16* %448, i64 2
  %454 = getelementptr inbounds i16, i16* %447, i64 2
  %455 = load i16, i16* %454, align 2
  store i16 %455, i16* %453, align 2
  %456 = getelementptr inbounds i16, i16* %448, i64 3
  %457 = getelementptr inbounds i16, i16* %447, i64 3
  %458 = load i16, i16* %457, align 2
  store i16 %458, i16* %456, align 2
  %459 = getelementptr inbounds i16, i16* %448, i64 4
  %460 = getelementptr inbounds i16, i16* %447, i64 4
  %461 = load i16, i16* %460, align 2
  store i16 %461, i16* %459, align 2
  %462 = getelementptr inbounds i16, i16* %448, i64 5
  %463 = getelementptr inbounds i16, i16* %447, i64 5
  %464 = load i16, i16* %463, align 2
  store i16 %464, i16* %462, align 2
  %465 = getelementptr inbounds i16, i16* %448, i64 6
  %466 = getelementptr inbounds i16, i16* %447, i64 6
  %467 = load i16, i16* %466, align 2
  store i16 %467, i16* %465, align 2
  %468 = getelementptr inbounds i16, i16* %448, i64 7
  %469 = getelementptr inbounds i16, i16* %447, i64 7
  %470 = load i16, i16* %469, align 2
  store i16 %470, i16* %468, align 2
  %471 = add i64 %446, -8
  %472 = getelementptr inbounds i16, i16* %448, i64 8
  %473 = getelementptr inbounds i16, i16* %447, i64 8
  %474 = icmp eq i64 %471, 0
  br i1 %474, label %475, label %445, !llvm.loop !21

475:                                              ; preds = %440, %445, %420, %298
  %476 = call i8* @_Znwm(i64 24) #12
  %477 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %8, i64 0, i32 0, i32 1
  %478 = bitcast %"class.std::__1::basic_string.1"** %477 to i8**
  store i8* %476, i8** %478, align 8
  %479 = bitcast %"class.std::__1::vector"* %8 to i8**
  store i8* %476, i8** %479, align 8
  %480 = getelementptr inbounds i8, i8* %476, i64 24
  %481 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %8, i64 0, i32 0, i32 2, i32 0, i32 0
  %482 = bitcast %"class.std::__1::basic_string.1"** %481 to i8**
  store i8* %480, i8** %482, align 8
  %483 = bitcast %"class.std::__1::basic_string.1"** %477 to i64*
  %484 = bitcast [1 x %"class.std::__1::basic_string.1"]* %9 to %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"*
  %485 = getelementptr inbounds %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short", %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"* %484, i64 0, i32 1, i32 1
  %486 = load i8, i8* %485, align 1
  %487 = icmp slt i8 %486, 0
  br i1 %487, label %490, label %488

488:                                              ; preds = %475
  %489 = bitcast [1 x %"class.std::__1::basic_string.1"]* %9 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %476, i8* nonnull align 8 %489, i64 24, i1 false) #10
  br label %669

490:                                              ; preds = %475
  %491 = getelementptr inbounds [1 x %"class.std::__1::basic_string.1"], [1 x %"class.std::__1::basic_string.1"]* %9, i64 0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %492 = load i16*, i16** %491, align 8
  %493 = bitcast i16* %492 to i8*
  %494 = getelementptr inbounds [1 x %"class.std::__1::basic_string.1"], [1 x %"class.std::__1::basic_string.1"]* %9, i64 0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %495 = load i64, i64* %494, align 8
  %496 = icmp ult i64 %495, 11
  br i1 %496, label %497, label %500

497:                                              ; preds = %490
  %498 = trunc i64 %495 to i8
  %499 = getelementptr inbounds i8, i8* %476, i64 23
  store i8 %498, i8* %499, align 1
  br label %518

500:                                              ; preds = %490
  %501 = icmp ugt i64 %495, 9223372036854775791
  br i1 %501, label %502, label %504

502:                                              ; preds = %500
  %503 = bitcast i8* %476 to %"class.std::__1::__basic_string_common"*
  call void @_ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__basic_string_common"* nonnull %503) #11
  unreachable

504:                                              ; preds = %500
  %505 = add nuw nsw i64 %495, 8
  %506 = and i64 %505, -8
  %507 = icmp slt i64 %506, 0
  br i1 %507, label %508, label %509

508:                                              ; preds = %504
  call void @abort() #11
  unreachable

509:                                              ; preds = %504
  %510 = shl i64 %506, 1
  %511 = call i8* @_Znwm(i64 %510) #12
  %512 = bitcast i8* %476 to i8**
  store i8* %511, i8** %512, align 8
  %513 = or i64 %506, -9223372036854775808
  %514 = getelementptr inbounds i8, i8* %476, i64 16
  %515 = bitcast i8* %514 to i64*
  store i64 %513, i64* %515, align 8
  %516 = getelementptr inbounds i8, i8* %476, i64 8
  %517 = bitcast i8* %516 to i64*
  store i64 %495, i64* %517, align 8
  br label %518

518:                                              ; preds = %509, %497
  %519 = phi i8* [ %476, %497 ], [ %511, %509 ]
  %520 = bitcast i8* %519 to i16*
  %521 = add nuw nsw i64 %495, 1
  %522 = add i64 %495, 1
  %523 = icmp ult i64 %522, 16
  br i1 %523, label %616, label %524

524:                                              ; preds = %518
  %525 = shl i64 %495, 1
  %526 = add i64 %525, 2
  %527 = getelementptr i8, i8* %519, i64 %526
  %528 = add i64 %495, 1
  %529 = getelementptr i16, i16* %492, i64 %528
  %530 = bitcast i16* %529 to i8*
  %531 = icmp ult i8* %519, %530
  %532 = icmp ugt i8* %527, %493
  %533 = and i1 %531, %532
  br i1 %533, label %616, label %534

534:                                              ; preds = %524
  %535 = and i64 %522, -16
  %536 = sub i64 %521, %535
  %537 = getelementptr i16, i16* %492, i64 %535
  %538 = getelementptr i16, i16* %520, i64 %535
  %539 = add i64 %535, -16
  %540 = lshr exact i64 %539, 4
  %541 = add nuw nsw i64 %540, 1
  %542 = and i64 %541, 3
  %543 = icmp ult i64 %539, 48
  br i1 %543, label %595, label %544

544:                                              ; preds = %534
  %545 = sub nsw i64 %541, %542
  br label %546

546:                                              ; preds = %546, %544
  %547 = phi i64 [ 0, %544 ], [ %592, %546 ]
  %548 = phi i64 [ %545, %544 ], [ %593, %546 ]
  %549 = getelementptr i16, i16* %492, i64 %547
  %550 = getelementptr i16, i16* %520, i64 %547
  %551 = bitcast i16* %549 to <8 x i16>*
  %552 = load <8 x i16>, <8 x i16>* %551, align 2, !alias.scope !22
  %553 = getelementptr i16, i16* %549, i64 8
  %554 = bitcast i16* %553 to <8 x i16>*
  %555 = load <8 x i16>, <8 x i16>* %554, align 2, !alias.scope !22
  %556 = bitcast i16* %550 to <8 x i16>*
  store <8 x i16> %552, <8 x i16>* %556, align 2, !alias.scope !25, !noalias !22
  %557 = getelementptr i16, i16* %550, i64 8
  %558 = bitcast i16* %557 to <8 x i16>*
  store <8 x i16> %555, <8 x i16>* %558, align 2, !alias.scope !25, !noalias !22
  %559 = or i64 %547, 16
  %560 = getelementptr i16, i16* %492, i64 %559
  %561 = getelementptr i16, i16* %520, i64 %559
  %562 = bitcast i16* %560 to <8 x i16>*
  %563 = load <8 x i16>, <8 x i16>* %562, align 2, !alias.scope !22
  %564 = getelementptr i16, i16* %560, i64 8
  %565 = bitcast i16* %564 to <8 x i16>*
  %566 = load <8 x i16>, <8 x i16>* %565, align 2, !alias.scope !22
  %567 = bitcast i16* %561 to <8 x i16>*
  store <8 x i16> %563, <8 x i16>* %567, align 2, !alias.scope !25, !noalias !22
  %568 = getelementptr i16, i16* %561, i64 8
  %569 = bitcast i16* %568 to <8 x i16>*
  store <8 x i16> %566, <8 x i16>* %569, align 2, !alias.scope !25, !noalias !22
  %570 = or i64 %547, 32
  %571 = getelementptr i16, i16* %492, i64 %570
  %572 = getelementptr i16, i16* %520, i64 %570
  %573 = bitcast i16* %571 to <8 x i16>*
  %574 = load <8 x i16>, <8 x i16>* %573, align 2, !alias.scope !22
  %575 = getelementptr i16, i16* %571, i64 8
  %576 = bitcast i16* %575 to <8 x i16>*
  %577 = load <8 x i16>, <8 x i16>* %576, align 2, !alias.scope !22
  %578 = bitcast i16* %572 to <8 x i16>*
  store <8 x i16> %574, <8 x i16>* %578, align 2, !alias.scope !25, !noalias !22
  %579 = getelementptr i16, i16* %572, i64 8
  %580 = bitcast i16* %579 to <8 x i16>*
  store <8 x i16> %577, <8 x i16>* %580, align 2, !alias.scope !25, !noalias !22
  %581 = or i64 %547, 48
  %582 = getelementptr i16, i16* %492, i64 %581
  %583 = getelementptr i16, i16* %520, i64 %581
  %584 = bitcast i16* %582 to <8 x i16>*
  %585 = load <8 x i16>, <8 x i16>* %584, align 2, !alias.scope !22
  %586 = getelementptr i16, i16* %582, i64 8
  %587 = bitcast i16* %586 to <8 x i16>*
  %588 = load <8 x i16>, <8 x i16>* %587, align 2, !alias.scope !22
  %589 = bitcast i16* %583 to <8 x i16>*
  store <8 x i16> %585, <8 x i16>* %589, align 2, !alias.scope !25, !noalias !22
  %590 = getelementptr i16, i16* %583, i64 8
  %591 = bitcast i16* %590 to <8 x i16>*
  store <8 x i16> %588, <8 x i16>* %591, align 2, !alias.scope !25, !noalias !22
  %592 = add i64 %547, 64
  %593 = add i64 %548, -4
  %594 = icmp eq i64 %593, 0
  br i1 %594, label %595, label %546, !llvm.loop !27

595:                                              ; preds = %546, %534
  %596 = phi i64 [ 0, %534 ], [ %592, %546 ]
  %597 = icmp eq i64 %542, 0
  br i1 %597, label %614, label %598

598:                                              ; preds = %595, %598
  %599 = phi i64 [ %611, %598 ], [ %596, %595 ]
  %600 = phi i64 [ %612, %598 ], [ %542, %595 ]
  %601 = getelementptr i16, i16* %492, i64 %599
  %602 = getelementptr i16, i16* %520, i64 %599
  %603 = bitcast i16* %601 to <8 x i16>*
  %604 = load <8 x i16>, <8 x i16>* %603, align 2, !alias.scope !22
  %605 = getelementptr i16, i16* %601, i64 8
  %606 = bitcast i16* %605 to <8 x i16>*
  %607 = load <8 x i16>, <8 x i16>* %606, align 2, !alias.scope !22
  %608 = bitcast i16* %602 to <8 x i16>*
  store <8 x i16> %604, <8 x i16>* %608, align 2, !alias.scope !25, !noalias !22
  %609 = getelementptr i16, i16* %602, i64 8
  %610 = bitcast i16* %609 to <8 x i16>*
  store <8 x i16> %607, <8 x i16>* %610, align 2, !alias.scope !25, !noalias !22
  %611 = add i64 %599, 16
  %612 = add i64 %600, -1
  %613 = icmp eq i64 %612, 0
  br i1 %613, label %614, label %598, !llvm.loop !28

614:                                              ; preds = %598, %595
  %615 = icmp eq i64 %522, %535
  br i1 %615, label %669, label %616

616:                                              ; preds = %614, %524, %518
  %617 = phi i64 [ %521, %524 ], [ %521, %518 ], [ %536, %614 ]
  %618 = phi i16* [ %492, %524 ], [ %492, %518 ], [ %537, %614 ]
  %619 = phi i16* [ %520, %524 ], [ %520, %518 ], [ %538, %614 ]
  %620 = add i64 %617, -1
  %621 = and i64 %617, 7
  %622 = icmp eq i64 %621, 0
  br i1 %622, label %634, label %623

623:                                              ; preds = %616, %623
  %624 = phi i64 [ %629, %623 ], [ %617, %616 ]
  %625 = phi i16* [ %631, %623 ], [ %618, %616 ]
  %626 = phi i16* [ %630, %623 ], [ %619, %616 ]
  %627 = phi i64 [ %632, %623 ], [ %621, %616 ]
  %628 = load i16, i16* %625, align 2
  store i16 %628, i16* %626, align 2
  %629 = add i64 %624, -1
  %630 = getelementptr inbounds i16, i16* %626, i64 1
  %631 = getelementptr inbounds i16, i16* %625, i64 1
  %632 = add i64 %627, -1
  %633 = icmp eq i64 %632, 0
  br i1 %633, label %634, label %623, !llvm.loop !29

634:                                              ; preds = %623, %616
  %635 = phi i64 [ %617, %616 ], [ %629, %623 ]
  %636 = phi i16* [ %618, %616 ], [ %631, %623 ]
  %637 = phi i16* [ %619, %616 ], [ %630, %623 ]
  %638 = icmp ult i64 %620, 7
  br i1 %638, label %669, label %639

639:                                              ; preds = %634, %639
  %640 = phi i64 [ %665, %639 ], [ %635, %634 ]
  %641 = phi i16* [ %667, %639 ], [ %636, %634 ]
  %642 = phi i16* [ %666, %639 ], [ %637, %634 ]
  %643 = load i16, i16* %641, align 2
  store i16 %643, i16* %642, align 2
  %644 = getelementptr inbounds i16, i16* %642, i64 1
  %645 = getelementptr inbounds i16, i16* %641, i64 1
  %646 = load i16, i16* %645, align 2
  store i16 %646, i16* %644, align 2
  %647 = getelementptr inbounds i16, i16* %642, i64 2
  %648 = getelementptr inbounds i16, i16* %641, i64 2
  %649 = load i16, i16* %648, align 2
  store i16 %649, i16* %647, align 2
  %650 = getelementptr inbounds i16, i16* %642, i64 3
  %651 = getelementptr inbounds i16, i16* %641, i64 3
  %652 = load i16, i16* %651, align 2
  store i16 %652, i16* %650, align 2
  %653 = getelementptr inbounds i16, i16* %642, i64 4
  %654 = getelementptr inbounds i16, i16* %641, i64 4
  %655 = load i16, i16* %654, align 2
  store i16 %655, i16* %653, align 2
  %656 = getelementptr inbounds i16, i16* %642, i64 5
  %657 = getelementptr inbounds i16, i16* %641, i64 5
  %658 = load i16, i16* %657, align 2
  store i16 %658, i16* %656, align 2
  %659 = getelementptr inbounds i16, i16* %642, i64 6
  %660 = getelementptr inbounds i16, i16* %641, i64 6
  %661 = load i16, i16* %660, align 2
  store i16 %661, i16* %659, align 2
  %662 = getelementptr inbounds i16, i16* %642, i64 7
  %663 = getelementptr inbounds i16, i16* %641, i64 7
  %664 = load i16, i16* %663, align 2
  store i16 %664, i16* %662, align 2
  %665 = add i64 %640, -8
  %666 = getelementptr inbounds i16, i16* %642, i64 8
  %667 = getelementptr inbounds i16, i16* %641, i64 8
  %668 = icmp eq i64 %665, 0
  br i1 %668, label %669, label %639, !llvm.loop !30

669:                                              ; preds = %634, %639, %614, %488
  %670 = getelementptr inbounds i8, i8* %476, i64 24
  %671 = ptrtoint i8* %670 to i64
  store i64 %671, i64* %483, align 8
  call void @_ZN9l10n_util12FormatStringERKNSt3__112basic_stringIDsNS0_11char_traitsIDsEENS0_9allocatorIDsEEEERKNS0_6vectorIS6_NS4_IS6_EEEEPNS9_ImNS4_ImEEEE(%"class.std::__1::basic_string.1"* sret %0, %"class.std::__1::basic_string.1"* dereferenceable(24) %1, %"class.std::__1::vector"* nonnull dereferenceable(24) %8, %"class.std::__1::vector.15"* null) #10
  %672 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %8, i64 0, i32 0, i32 0
  %673 = load %"class.std::__1::basic_string.1"*, %"class.std::__1::basic_string.1"** %672, align 8
  %674 = icmp eq %"class.std::__1::basic_string.1"* %673, null
  br i1 %674, label %695, label %675

675:                                              ; preds = %669
  %676 = bitcast %"class.std::__1::basic_string.1"* %673 to i8*
  %677 = load %"class.std::__1::basic_string.1"*, %"class.std::__1::basic_string.1"** %477, align 8
  %678 = icmp eq %"class.std::__1::basic_string.1"* %677, %673
  br i1 %678, label %693, label %679

679:                                              ; preds = %675, %689
  %680 = phi %"class.std::__1::basic_string.1"* [ %681, %689 ], [ %677, %675 ]
  %681 = getelementptr inbounds %"class.std::__1::basic_string.1", %"class.std::__1::basic_string.1"* %680, i64 -1
  %682 = bitcast %"class.std::__1::basic_string.1"* %681 to %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"*
  %683 = getelementptr inbounds %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short", %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"* %682, i64 0, i32 1, i32 1
  %684 = load i8, i8* %683, align 1
  %685 = icmp slt i8 %684, 0
  br i1 %685, label %686, label %689

686:                                              ; preds = %679
  %687 = bitcast %"class.std::__1::basic_string.1"* %681 to i8**
  %688 = load i8*, i8** %687, align 8
  call void @_ZdlPv(i8* %688) #12
  br label %689

689:                                              ; preds = %686, %679
  %690 = icmp eq %"class.std::__1::basic_string.1"* %681, %673
  br i1 %690, label %691, label %679

691:                                              ; preds = %689
  %692 = load i8*, i8** %479, align 8
  br label %693

693:                                              ; preds = %691, %675
  %694 = phi i8* [ %692, %691 ], [ %676, %675 ]
  store %"class.std::__1::basic_string.1"* %673, %"class.std::__1::basic_string.1"** %477, align 8
  call void @_ZdlPv(i8* %694) #12
  br label %695

695:                                              ; preds = %669, %693
  %696 = bitcast [1 x %"class.std::__1::basic_string.1"]* %9 to %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"*
  %697 = getelementptr inbounds %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short", %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"* %696, i64 0, i32 1, i32 1
  %698 = load i8, i8* %697, align 1
  %699 = icmp slt i8 %698, 0
  br i1 %699, label %700, label %703

700:                                              ; preds = %695
  %701 = bitcast [1 x %"class.std::__1::basic_string.1"]* %9 to i8**
  %702 = load i8*, i8** %701, align 8
  call void @_ZdlPv(i8* %702) #12
  br label %703

703:                                              ; preds = %695, %700
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %293) #10
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %292) #10
  ret void
}

declare void @_ZN9l10n_util12FormatStringERKNSt3__112basic_stringIDsNS0_11char_traitsIDsEENS0_9allocatorIDsEEEERKNS0_6vectorIS6_NS4_IS6_EEEEPNS9_ImNS4_ImEEEE(%"class.std::__1::basic_string.1"* sret, %"class.std::__1::basic_string.1"* dereferenceable(24), %"class.std::__1::vector"* dereferenceable(24), %"class.std::__1::vector.15"*) local_unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define hidden void @_Z25GetAccessibilityBaseLabelRK17AutocompleteMatchRKNSt3__112basic_stringIDsNS2_11char_traitsIDsEENS2_9allocatorIDsEEEEPi(%"class.std::__1::basic_string.1"* noalias sret, %struct.AutocompleteMatch* dereferenceable(1600), %"class.std::__1::basic_string.1"* dereferenceable(24), i32*) local_unnamed_addr #0 {
  %5 = alloca %"class.std::__1::basic_string.1", align 8
  %6 = alloca %"class.std::__1::basic_string.1", align 8
  %7 = alloca %"class.std::__1::basic_string.1", align 8
  %8 = alloca %"class.std::__1::basic_string.1", align 8
  %9 = alloca %"class.std::__1::basic_string.1", align 8
  %10 = alloca %"class.std::__1::basic_string.1", align 8
  %11 = alloca %"class.std::__1::basic_string.1", align 8
  %12 = alloca %"class.std::__1::basic_string.1", align 8
  %13 = alloca %"class.std::__1::basic_string.1", align 8
  %14 = getelementptr inbounds %struct.AutocompleteMatch, %struct.AutocompleteMatch* %1, i64 0, i32 28
  %15 = load i32, i32* %14, align 4
  %16 = icmp eq i32 %15, 24
  br i1 %16, label %17, label %465

17:                                               ; preds = %4
  %18 = bitcast %"class.std::__1::basic_string.1"* %5 to i8*
  %19 = bitcast %"class.std::__1::basic_string.1"* %0 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %19, i8 -86, i64 24, i1 false)
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %18) #10
  %20 = bitcast %"class.std::__1::basic_string.1"* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %20) #10
  %21 = bitcast %"class.std::__1::basic_string.1"* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %21) #10
  %22 = getelementptr inbounds %struct.AutocompleteMatch, %struct.AutocompleteMatch* %1, i64 0, i32 17
  call void @_ZNSt3__1plIDsNS_11char_traitsIDsEENS_9allocatorIDsEEEENS_12basic_stringIT_T0_T1_EERKS9_PKS6_(%"class.std::__1::basic_string.1"* nonnull sret %7, %"class.std::__1::basic_string.1"* dereferenceable(24) %22, i16* getelementptr inbounds ([3 x i16], [3 x i16]* @.str.30, i64 0, i64 0))
  %23 = getelementptr inbounds %struct.AutocompleteMatch, %struct.AutocompleteMatch* %1, i64 0, i32 19
  %24 = bitcast %"class.std::__1::basic_string.1"* %23 to %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"*
  %25 = getelementptr inbounds %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short", %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"* %24, i64 0, i32 1, i32 1
  %26 = load i8, i8* %25, align 1, !noalias !31
  %27 = icmp slt i8 %26, 0
  %28 = getelementptr inbounds %"class.std::__1::basic_string.1", %"class.std::__1::basic_string.1"* %23, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %29 = load i16*, i16** %28, align 8, !noalias !31
  %30 = getelementptr inbounds %struct.AutocompleteMatch, %struct.AutocompleteMatch* %1, i64 0, i32 19, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %31 = load i64, i64* %30, align 8, !noalias !31
  %32 = bitcast %"class.std::__1::basic_string.1"* %23 to i16*
  %33 = zext i8 %26 to i64
  %34 = select i1 %27, i16* %29, i16* %32
  %35 = select i1 %27, i64 %31, i64 %33
  %36 = bitcast %"class.std::__1::basic_string.1"* %7 to %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"*
  %37 = getelementptr inbounds %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short", %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"* %36, i64 0, i32 1, i32 1
  %38 = load i8, i8* %37, align 1, !noalias !31
  %39 = icmp slt i8 %38, 0
  br i1 %39, label %40, label %47

40:                                               ; preds = %17
  %41 = getelementptr inbounds %"class.std::__1::basic_string.1", %"class.std::__1::basic_string.1"* %7, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 2
  %42 = load i64, i64* %41, align 8, !noalias !31
  %43 = and i64 %42, 9223372036854775807
  %44 = add nsw i64 %43, -1
  %45 = getelementptr inbounds %"class.std::__1::basic_string.1", %"class.std::__1::basic_string.1"* %7, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %46 = load i64, i64* %45, align 8, !noalias !31
  br label %49

47:                                               ; preds = %17
  %48 = zext i8 %38 to i64
  br label %49

49:                                               ; preds = %47, %40
  %50 = phi i64 [ %44, %40 ], [ 10, %47 ]
  %51 = phi i64 [ %46, %40 ], [ %48, %47 ]
  %52 = sub i64 %50, %51
  %53 = icmp ult i64 %52, %35
  br i1 %53, label %215, label %54

54:                                               ; preds = %49
  %55 = icmp eq i64 %35, 0
  br i1 %55, label %218, label %56

56:                                               ; preds = %54
  %57 = getelementptr inbounds %"class.std::__1::basic_string.1", %"class.std::__1::basic_string.1"* %7, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %58 = load i16*, i16** %57, align 8, !noalias !31
  %59 = bitcast %"class.std::__1::basic_string.1"* %7 to i16*
  %60 = select i1 %39, i16* %58, i16* %59
  %61 = getelementptr inbounds i16, i16* %60, i64 %51
  %62 = icmp ult i64 %35, 16
  br i1 %62, label %152, label %63

63:                                               ; preds = %56
  %64 = add i64 %35, %51
  %65 = getelementptr i16, i16* %60, i64 %64
  %66 = getelementptr i16, i16* %34, i64 %35
  %67 = icmp ult i16* %61, %66
  %68 = icmp ult i16* %34, %65
  %69 = and i1 %67, %68
  br i1 %69, label %152, label %70

70:                                               ; preds = %63
  %71 = and i64 %35, -16
  %72 = sub i64 %35, %71
  %73 = getelementptr i16, i16* %34, i64 %71
  %74 = getelementptr i16, i16* %61, i64 %71
  %75 = add i64 %71, -16
  %76 = lshr exact i64 %75, 4
  %77 = add nuw nsw i64 %76, 1
  %78 = and i64 %77, 3
  %79 = icmp ult i64 %75, 48
  br i1 %79, label %131, label %80

80:                                               ; preds = %70
  %81 = sub nsw i64 %77, %78
  br label %82

82:                                               ; preds = %82, %80
  %83 = phi i64 [ 0, %80 ], [ %128, %82 ]
  %84 = phi i64 [ %81, %80 ], [ %129, %82 ]
  %85 = getelementptr i16, i16* %34, i64 %83
  %86 = getelementptr i16, i16* %61, i64 %83
  %87 = bitcast i16* %85 to <8 x i16>*
  %88 = load <8 x i16>, <8 x i16>* %87, align 2, !alias.scope !34, !noalias !31
  %89 = getelementptr i16, i16* %85, i64 8
  %90 = bitcast i16* %89 to <8 x i16>*
  %91 = load <8 x i16>, <8 x i16>* %90, align 2, !alias.scope !34, !noalias !31
  %92 = bitcast i16* %86 to <8 x i16>*
  store <8 x i16> %88, <8 x i16>* %92, align 2, !alias.scope !37, !noalias !39
  %93 = getelementptr i16, i16* %86, i64 8
  %94 = bitcast i16* %93 to <8 x i16>*
  store <8 x i16> %91, <8 x i16>* %94, align 2, !alias.scope !37, !noalias !39
  %95 = or i64 %83, 16
  %96 = getelementptr i16, i16* %34, i64 %95
  %97 = getelementptr i16, i16* %61, i64 %95
  %98 = bitcast i16* %96 to <8 x i16>*
  %99 = load <8 x i16>, <8 x i16>* %98, align 2, !alias.scope !34, !noalias !31
  %100 = getelementptr i16, i16* %96, i64 8
  %101 = bitcast i16* %100 to <8 x i16>*
  %102 = load <8 x i16>, <8 x i16>* %101, align 2, !alias.scope !34, !noalias !31
  %103 = bitcast i16* %97 to <8 x i16>*
  store <8 x i16> %99, <8 x i16>* %103, align 2, !alias.scope !37, !noalias !39
  %104 = getelementptr i16, i16* %97, i64 8
  %105 = bitcast i16* %104 to <8 x i16>*
  store <8 x i16> %102, <8 x i16>* %105, align 2, !alias.scope !37, !noalias !39
  %106 = or i64 %83, 32
  %107 = getelementptr i16, i16* %34, i64 %106
  %108 = getelementptr i16, i16* %61, i64 %106
  %109 = bitcast i16* %107 to <8 x i16>*
  %110 = load <8 x i16>, <8 x i16>* %109, align 2, !alias.scope !34, !noalias !31
  %111 = getelementptr i16, i16* %107, i64 8
  %112 = bitcast i16* %111 to <8 x i16>*
  %113 = load <8 x i16>, <8 x i16>* %112, align 2, !alias.scope !34, !noalias !31
  %114 = bitcast i16* %108 to <8 x i16>*
  store <8 x i16> %110, <8 x i16>* %114, align 2, !alias.scope !37, !noalias !39
  %115 = getelementptr i16, i16* %108, i64 8
  %116 = bitcast i16* %115 to <8 x i16>*
  store <8 x i16> %113, <8 x i16>* %116, align 2, !alias.scope !37, !noalias !39
  %117 = or i64 %83, 48
  %118 = getelementptr i16, i16* %34, i64 %117
  %119 = getelementptr i16, i16* %61, i64 %117
  %120 = bitcast i16* %118 to <8 x i16>*
  %121 = load <8 x i16>, <8 x i16>* %120, align 2, !alias.scope !34, !noalias !31
  %122 = getelementptr i16, i16* %118, i64 8
  %123 = bitcast i16* %122 to <8 x i16>*
  %124 = load <8 x i16>, <8 x i16>* %123, align 2, !alias.scope !34, !noalias !31
  %125 = bitcast i16* %119 to <8 x i16>*
  store <8 x i16> %121, <8 x i16>* %125, align 2, !alias.scope !37, !noalias !39
  %126 = getelementptr i16, i16* %119, i64 8
  %127 = bitcast i16* %126 to <8 x i16>*
  store <8 x i16> %124, <8 x i16>* %127, align 2, !alias.scope !37, !noalias !39
  %128 = add i64 %83, 64
  %129 = add i64 %84, -4
  %130 = icmp eq i64 %129, 0
  br i1 %130, label %131, label %82, !llvm.loop !40

131:                                              ; preds = %82, %70
  %132 = phi i64 [ 0, %70 ], [ %128, %82 ]
  %133 = icmp eq i64 %78, 0
  br i1 %133, label %150, label %134

134:                                              ; preds = %131, %134
  %135 = phi i64 [ %147, %134 ], [ %132, %131 ]
  %136 = phi i64 [ %148, %134 ], [ %78, %131 ]
  %137 = getelementptr i16, i16* %34, i64 %135
  %138 = getelementptr i16, i16* %61, i64 %135
  %139 = bitcast i16* %137 to <8 x i16>*
  %140 = load <8 x i16>, <8 x i16>* %139, align 2, !alias.scope !34, !noalias !31
  %141 = getelementptr i16, i16* %137, i64 8
  %142 = bitcast i16* %141 to <8 x i16>*
  %143 = load <8 x i16>, <8 x i16>* %142, align 2, !alias.scope !34, !noalias !31
  %144 = bitcast i16* %138 to <8 x i16>*
  store <8 x i16> %140, <8 x i16>* %144, align 2, !alias.scope !37, !noalias !39
  %145 = getelementptr i16, i16* %138, i64 8
  %146 = bitcast i16* %145 to <8 x i16>*
  store <8 x i16> %143, <8 x i16>* %146, align 2, !alias.scope !37, !noalias !39
  %147 = add i64 %135, 16
  %148 = add i64 %136, -1
  %149 = icmp eq i64 %148, 0
  br i1 %149, label %150, label %134, !llvm.loop !41

150:                                              ; preds = %134, %131
  %151 = icmp eq i64 %35, %71
  br i1 %151, label %205, label %152

152:                                              ; preds = %150, %63, %56
  %153 = phi i64 [ %35, %63 ], [ %35, %56 ], [ %72, %150 ]
  %154 = phi i16* [ %34, %63 ], [ %34, %56 ], [ %73, %150 ]
  %155 = phi i16* [ %61, %63 ], [ %61, %56 ], [ %74, %150 ]
  %156 = add i64 %153, -1
  %157 = and i64 %153, 7
  %158 = icmp eq i64 %157, 0
  br i1 %158, label %170, label %159

159:                                              ; preds = %152, %159
  %160 = phi i64 [ %165, %159 ], [ %153, %152 ]
  %161 = phi i16* [ %167, %159 ], [ %154, %152 ]
  %162 = phi i16* [ %166, %159 ], [ %155, %152 ]
  %163 = phi i64 [ %168, %159 ], [ %157, %152 ]
  %164 = load i16, i16* %161, align 2, !noalias !31
  store i16 %164, i16* %162, align 2, !noalias !31
  %165 = add i64 %160, -1
  %166 = getelementptr inbounds i16, i16* %162, i64 1
  %167 = getelementptr inbounds i16, i16* %161, i64 1
  %168 = add i64 %163, -1
  %169 = icmp eq i64 %168, 0
  br i1 %169, label %170, label %159, !llvm.loop !42

170:                                              ; preds = %159, %152
  %171 = phi i64 [ %153, %152 ], [ %165, %159 ]
  %172 = phi i16* [ %154, %152 ], [ %167, %159 ]
  %173 = phi i16* [ %155, %152 ], [ %166, %159 ]
  %174 = icmp ult i64 %156, 7
  br i1 %174, label %205, label %175

175:                                              ; preds = %170, %175
  %176 = phi i64 [ %201, %175 ], [ %171, %170 ]
  %177 = phi i16* [ %203, %175 ], [ %172, %170 ]
  %178 = phi i16* [ %202, %175 ], [ %173, %170 ]
  %179 = load i16, i16* %177, align 2, !noalias !31
  store i16 %179, i16* %178, align 2, !noalias !31
  %180 = getelementptr inbounds i16, i16* %178, i64 1
  %181 = getelementptr inbounds i16, i16* %177, i64 1
  %182 = load i16, i16* %181, align 2, !noalias !31
  store i16 %182, i16* %180, align 2, !noalias !31
  %183 = getelementptr inbounds i16, i16* %178, i64 2
  %184 = getelementptr inbounds i16, i16* %177, i64 2
  %185 = load i16, i16* %184, align 2, !noalias !31
  store i16 %185, i16* %183, align 2, !noalias !31
  %186 = getelementptr inbounds i16, i16* %178, i64 3
  %187 = getelementptr inbounds i16, i16* %177, i64 3
  %188 = load i16, i16* %187, align 2, !noalias !31
  store i16 %188, i16* %186, align 2, !noalias !31
  %189 = getelementptr inbounds i16, i16* %178, i64 4
  %190 = getelementptr inbounds i16, i16* %177, i64 4
  %191 = load i16, i16* %190, align 2, !noalias !31
  store i16 %191, i16* %189, align 2, !noalias !31
  %192 = getelementptr inbounds i16, i16* %178, i64 5
  %193 = getelementptr inbounds i16, i16* %177, i64 5
  %194 = load i16, i16* %193, align 2, !noalias !31
  store i16 %194, i16* %192, align 2, !noalias !31
  %195 = getelementptr inbounds i16, i16* %178, i64 6
  %196 = getelementptr inbounds i16, i16* %177, i64 6
  %197 = load i16, i16* %196, align 2, !noalias !31
  store i16 %197, i16* %195, align 2, !noalias !31
  %198 = getelementptr inbounds i16, i16* %178, i64 7
  %199 = getelementptr inbounds i16, i16* %177, i64 7
  %200 = load i16, i16* %199, align 2, !noalias !31
  store i16 %200, i16* %198, align 2, !noalias !31
  %201 = add i64 %176, -8
  %202 = getelementptr inbounds i16, i16* %178, i64 8
  %203 = getelementptr inbounds i16, i16* %177, i64 8
  %204 = icmp eq i64 %201, 0
  br i1 %204, label %205, label %175, !llvm.loop !43

205:                                              ; preds = %170, %175, %150
  %206 = add i64 %51, %35
  %207 = load i8, i8* %37, align 1, !noalias !31
  %208 = icmp slt i8 %207, 0
  br i1 %208, label %209, label %211

209:                                              ; preds = %205
  %210 = getelementptr inbounds %"class.std::__1::basic_string.1", %"class.std::__1::basic_string.1"* %7, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  store i64 %206, i64* %210, align 8, !noalias !31
  br label %213

211:                                              ; preds = %205
  %212 = trunc i64 %206 to i8
  store i8 %212, i8* %37, align 1, !noalias !31
  br label %213

213:                                              ; preds = %211, %209
  %214 = getelementptr inbounds i16, i16* %60, i64 %206
  store i16 0, i16* %214, align 2, !noalias !31
  br label %218

215:                                              ; preds = %49
  %216 = add i64 %51, %35
  %217 = sub i64 %216, %50
  call void @_ZNSt3__112basic_stringIDsNS_11char_traitsIDsEENS_9allocatorIDsEEE21__grow_by_and_replaceEmmmmmmPKDs(%"class.std::__1::basic_string.1"* nonnull %7, i64 %50, i64 %217, i64 %51, i64 %51, i64 0, i64 %35, i16* %34) #10, !noalias !31
  br label %218

218:                                              ; preds = %54, %213, %215
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %20, i8* nonnull align 8 %21, i64 24, i1 false) #10
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %21, i8 0, i64 24, i1 false) #10, !noalias !31
  %219 = bitcast %"class.std::__1::basic_string.1"* %6 to %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"*
  %220 = getelementptr inbounds %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short", %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"* %219, i64 0, i32 1, i32 1
  %221 = load i8, i8* %220, align 1, !noalias !44
  %222 = icmp slt i8 %221, 0
  br i1 %222, label %223, label %230

223:                                              ; preds = %218
  %224 = getelementptr inbounds %"class.std::__1::basic_string.1", %"class.std::__1::basic_string.1"* %6, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 2
  %225 = load i64, i64* %224, align 8, !noalias !44
  %226 = and i64 %225, 9223372036854775807
  %227 = add nsw i64 %226, -1
  %228 = getelementptr inbounds %"class.std::__1::basic_string.1", %"class.std::__1::basic_string.1"* %6, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %229 = load i64, i64* %228, align 8, !noalias !44
  br label %232

230:                                              ; preds = %218
  %231 = zext i8 %221 to i64
  br label %232

232:                                              ; preds = %230, %223
  %233 = phi i64 [ %227, %223 ], [ 10, %230 ]
  %234 = phi i64 [ %229, %223 ], [ %231, %230 ]
  %235 = sub i64 %233, %234
  %236 = icmp ult i64 %235, 2
  br i1 %236, label %253, label %237

237:                                              ; preds = %232
  %238 = getelementptr inbounds %"class.std::__1::basic_string.1", %"class.std::__1::basic_string.1"* %6, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %239 = load i16*, i16** %238, align 8, !noalias !44
  %240 = bitcast %"class.std::__1::basic_string.1"* %6 to i16*
  %241 = select i1 %222, i16* %239, i16* %240
  %242 = getelementptr inbounds i16, i16* %241, i64 %234
  store i16 44, i16* %242, align 2, !noalias !44
  %243 = getelementptr inbounds i16, i16* %242, i64 1
  store i16 32, i16* %243, align 2, !noalias !44
  %244 = add i64 %234, 2
  %245 = load i8, i8* %220, align 1, !noalias !44
  %246 = icmp slt i8 %245, 0
  br i1 %246, label %247, label %249

247:                                              ; preds = %237
  %248 = getelementptr inbounds %"class.std::__1::basic_string.1", %"class.std::__1::basic_string.1"* %6, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  store i64 %244, i64* %248, align 8, !noalias !44
  br label %251

249:                                              ; preds = %237
  %250 = trunc i64 %244 to i8
  store i8 %250, i8* %220, align 1, !noalias !44
  br label %251

251:                                              ; preds = %249, %247
  %252 = getelementptr inbounds i16, i16* %241, i64 %244
  store i16 0, i16* %252, align 2, !noalias !44
  br label %256

253:                                              ; preds = %232
  %254 = add i64 %234, 2
  %255 = sub i64 %254, %233
  call void @_ZNSt3__112basic_stringIDsNS_11char_traitsIDsEENS_9allocatorIDsEEE21__grow_by_and_replaceEmmmmmmPKDs(%"class.std::__1::basic_string.1"* nonnull %6, i64 %233, i64 %255, i64 %234, i64 %234, i64 0, i64 2, i16* getelementptr inbounds ([3 x i16], [3 x i16]* @.str.30, i64 0, i64 0)) #10, !noalias !44
  br label %256

256:                                              ; preds = %251, %253
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %18, i8* nonnull align 8 %20, i64 24, i1 false) #10
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %20, i8 0, i64 24, i1 false) #10, !noalias !44
  %257 = bitcast %"class.std::__1::basic_string.1"* %2 to %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"*
  %258 = getelementptr inbounds %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short", %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"* %257, i64 0, i32 1, i32 1
  %259 = load i8, i8* %258, align 1, !noalias !47
  %260 = icmp slt i8 %259, 0
  %261 = getelementptr inbounds %"class.std::__1::basic_string.1", %"class.std::__1::basic_string.1"* %2, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %262 = load i16*, i16** %261, align 8, !noalias !47
  %263 = getelementptr inbounds %"class.std::__1::basic_string.1", %"class.std::__1::basic_string.1"* %2, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %264 = load i64, i64* %263, align 8, !noalias !47
  %265 = bitcast %"class.std::__1::basic_string.1"* %2 to i16*
  %266 = zext i8 %259 to i64
  %267 = select i1 %260, i16* %262, i16* %265
  %268 = select i1 %260, i64 %264, i64 %266
  %269 = bitcast %"class.std::__1::basic_string.1"* %5 to %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"*
  %270 = getelementptr inbounds %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short", %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"* %269, i64 0, i32 1, i32 1
  %271 = load i8, i8* %270, align 1, !noalias !47
  %272 = icmp slt i8 %271, 0
  br i1 %272, label %273, label %280

273:                                              ; preds = %256
  %274 = getelementptr inbounds %"class.std::__1::basic_string.1", %"class.std::__1::basic_string.1"* %5, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 2
  %275 = load i64, i64* %274, align 8, !noalias !47
  %276 = and i64 %275, 9223372036854775807
  %277 = add nsw i64 %276, -1
  %278 = getelementptr inbounds %"class.std::__1::basic_string.1", %"class.std::__1::basic_string.1"* %5, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %279 = load i64, i64* %278, align 8, !noalias !47
  br label %282

280:                                              ; preds = %256
  %281 = zext i8 %271 to i64
  br label %282

282:                                              ; preds = %280, %273
  %283 = phi i64 [ %277, %273 ], [ 10, %280 ]
  %284 = phi i64 [ %279, %273 ], [ %281, %280 ]
  %285 = sub i64 %283, %284
  %286 = icmp ult i64 %285, %268
  br i1 %286, label %448, label %287

287:                                              ; preds = %282
  %288 = icmp eq i64 %268, 0
  br i1 %288, label %451, label %289

289:                                              ; preds = %287
  %290 = getelementptr inbounds %"class.std::__1::basic_string.1", %"class.std::__1::basic_string.1"* %5, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %291 = load i16*, i16** %290, align 8, !noalias !47
  %292 = bitcast %"class.std::__1::basic_string.1"* %5 to i16*
  %293 = select i1 %272, i16* %291, i16* %292
  %294 = getelementptr inbounds i16, i16* %293, i64 %284
  %295 = icmp ult i64 %268, 16
  br i1 %295, label %385, label %296

296:                                              ; preds = %289
  %297 = add i64 %268, %284
  %298 = getelementptr i16, i16* %293, i64 %297
  %299 = getelementptr i16, i16* %267, i64 %268
  %300 = icmp ult i16* %294, %299
  %301 = icmp ult i16* %267, %298
  %302 = and i1 %300, %301
  br i1 %302, label %385, label %303

303:                                              ; preds = %296
  %304 = and i64 %268, -16
  %305 = sub i64 %268, %304
  %306 = getelementptr i16, i16* %267, i64 %304
  %307 = getelementptr i16, i16* %294, i64 %304
  %308 = add i64 %304, -16
  %309 = lshr exact i64 %308, 4
  %310 = add nuw nsw i64 %309, 1
  %311 = and i64 %310, 3
  %312 = icmp ult i64 %308, 48
  br i1 %312, label %364, label %313

313:                                              ; preds = %303
  %314 = sub nsw i64 %310, %311
  br label %315

315:                                              ; preds = %315, %313
  %316 = phi i64 [ 0, %313 ], [ %361, %315 ]
  %317 = phi i64 [ %314, %313 ], [ %362, %315 ]
  %318 = getelementptr i16, i16* %267, i64 %316
  %319 = getelementptr i16, i16* %294, i64 %316
  %320 = bitcast i16* %318 to <8 x i16>*
  %321 = load <8 x i16>, <8 x i16>* %320, align 2, !alias.scope !50, !noalias !47
  %322 = getelementptr i16, i16* %318, i64 8
  %323 = bitcast i16* %322 to <8 x i16>*
  %324 = load <8 x i16>, <8 x i16>* %323, align 2, !alias.scope !50, !noalias !47
  %325 = bitcast i16* %319 to <8 x i16>*
  store <8 x i16> %321, <8 x i16>* %325, align 2, !alias.scope !53, !noalias !55
  %326 = getelementptr i16, i16* %319, i64 8
  %327 = bitcast i16* %326 to <8 x i16>*
  store <8 x i16> %324, <8 x i16>* %327, align 2, !alias.scope !53, !noalias !55
  %328 = or i64 %316, 16
  %329 = getelementptr i16, i16* %267, i64 %328
  %330 = getelementptr i16, i16* %294, i64 %328
  %331 = bitcast i16* %329 to <8 x i16>*
  %332 = load <8 x i16>, <8 x i16>* %331, align 2, !alias.scope !50, !noalias !47
  %333 = getelementptr i16, i16* %329, i64 8
  %334 = bitcast i16* %333 to <8 x i16>*
  %335 = load <8 x i16>, <8 x i16>* %334, align 2, !alias.scope !50, !noalias !47
  %336 = bitcast i16* %330 to <8 x i16>*
  store <8 x i16> %332, <8 x i16>* %336, align 2, !alias.scope !53, !noalias !55
  %337 = getelementptr i16, i16* %330, i64 8
  %338 = bitcast i16* %337 to <8 x i16>*
  store <8 x i16> %335, <8 x i16>* %338, align 2, !alias.scope !53, !noalias !55
  %339 = or i64 %316, 32
  %340 = getelementptr i16, i16* %267, i64 %339
  %341 = getelementptr i16, i16* %294, i64 %339
  %342 = bitcast i16* %340 to <8 x i16>*
  %343 = load <8 x i16>, <8 x i16>* %342, align 2, !alias.scope !50, !noalias !47
  %344 = getelementptr i16, i16* %340, i64 8
  %345 = bitcast i16* %344 to <8 x i16>*
  %346 = load <8 x i16>, <8 x i16>* %345, align 2, !alias.scope !50, !noalias !47
  %347 = bitcast i16* %341 to <8 x i16>*
  store <8 x i16> %343, <8 x i16>* %347, align 2, !alias.scope !53, !noalias !55
  %348 = getelementptr i16, i16* %341, i64 8
  %349 = bitcast i16* %348 to <8 x i16>*
  store <8 x i16> %346, <8 x i16>* %349, align 2, !alias.scope !53, !noalias !55
  %350 = or i64 %316, 48
  %351 = getelementptr i16, i16* %267, i64 %350
  %352 = getelementptr i16, i16* %294, i64 %350
  %353 = bitcast i16* %351 to <8 x i16>*
  %354 = load <8 x i16>, <8 x i16>* %353, align 2, !alias.scope !50, !noalias !47
  %355 = getelementptr i16, i16* %351, i64 8
  %356 = bitcast i16* %355 to <8 x i16>*
  %357 = load <8 x i16>, <8 x i16>* %356, align 2, !alias.scope !50, !noalias !47
  %358 = bitcast i16* %352 to <8 x i16>*
  store <8 x i16> %354, <8 x i16>* %358, align 2, !alias.scope !53, !noalias !55
  %359 = getelementptr i16, i16* %352, i64 8
  %360 = bitcast i16* %359 to <8 x i16>*
  store <8 x i16> %357, <8 x i16>* %360, align 2, !alias.scope !53, !noalias !55
  %361 = add i64 %316, 64
  %362 = add i64 %317, -4
  %363 = icmp eq i64 %362, 0
  br i1 %363, label %364, label %315, !llvm.loop !56

364:                                              ; preds = %315, %303
  %365 = phi i64 [ 0, %303 ], [ %361, %315 ]
  %366 = icmp eq i64 %311, 0
  br i1 %366, label %383, label %367

367:                                              ; preds = %364, %367
  %368 = phi i64 [ %380, %367 ], [ %365, %364 ]
  %369 = phi i64 [ %381, %367 ], [ %311, %364 ]
  %370 = getelementptr i16, i16* %267, i64 %368
  %371 = getelementptr i16, i16* %294, i64 %368
  %372 = bitcast i16* %370 to <8 x i16>*
  %373 = load <8 x i16>, <8 x i16>* %372, align 2, !alias.scope !50, !noalias !47
  %374 = getelementptr i16, i16* %370, i64 8
  %375 = bitcast i16* %374 to <8 x i16>*
  %376 = load <8 x i16>, <8 x i16>* %375, align 2, !alias.scope !50, !noalias !47
  %377 = bitcast i16* %371 to <8 x i16>*
  store <8 x i16> %373, <8 x i16>* %377, align 2, !alias.scope !53, !noalias !55
  %378 = getelementptr i16, i16* %371, i64 8
  %379 = bitcast i16* %378 to <8 x i16>*
  store <8 x i16> %376, <8 x i16>* %379, align 2, !alias.scope !53, !noalias !55
  %380 = add i64 %368, 16
  %381 = add i64 %369, -1
  %382 = icmp eq i64 %381, 0
  br i1 %382, label %383, label %367, !llvm.loop !57

383:                                              ; preds = %367, %364
  %384 = icmp eq i64 %268, %304
  br i1 %384, label %438, label %385

385:                                              ; preds = %383, %296, %289
  %386 = phi i64 [ %268, %296 ], [ %268, %289 ], [ %305, %383 ]
  %387 = phi i16* [ %267, %296 ], [ %267, %289 ], [ %306, %383 ]
  %388 = phi i16* [ %294, %296 ], [ %294, %289 ], [ %307, %383 ]
  %389 = add i64 %386, -1
  %390 = and i64 %386, 7
  %391 = icmp eq i64 %390, 0
  br i1 %391, label %403, label %392

392:                                              ; preds = %385, %392
  %393 = phi i64 [ %398, %392 ], [ %386, %385 ]
  %394 = phi i16* [ %400, %392 ], [ %387, %385 ]
  %395 = phi i16* [ %399, %392 ], [ %388, %385 ]
  %396 = phi i64 [ %401, %392 ], [ %390, %385 ]
  %397 = load i16, i16* %394, align 2, !noalias !47
  store i16 %397, i16* %395, align 2, !noalias !47
  %398 = add i64 %393, -1
  %399 = getelementptr inbounds i16, i16* %395, i64 1
  %400 = getelementptr inbounds i16, i16* %394, i64 1
  %401 = add i64 %396, -1
  %402 = icmp eq i64 %401, 0
  br i1 %402, label %403, label %392, !llvm.loop !58

403:                                              ; preds = %392, %385
  %404 = phi i64 [ %386, %385 ], [ %398, %392 ]
  %405 = phi i16* [ %387, %385 ], [ %400, %392 ]
  %406 = phi i16* [ %388, %385 ], [ %399, %392 ]
  %407 = icmp ult i64 %389, 7
  br i1 %407, label %438, label %408

408:                                              ; preds = %403, %408
  %409 = phi i64 [ %434, %408 ], [ %404, %403 ]
  %410 = phi i16* [ %436, %408 ], [ %405, %403 ]
  %411 = phi i16* [ %435, %408 ], [ %406, %403 ]
  %412 = load i16, i16* %410, align 2, !noalias !47
  store i16 %412, i16* %411, align 2, !noalias !47
  %413 = getelementptr inbounds i16, i16* %411, i64 1
  %414 = getelementptr inbounds i16, i16* %410, i64 1
  %415 = load i16, i16* %414, align 2, !noalias !47
  store i16 %415, i16* %413, align 2, !noalias !47
  %416 = getelementptr inbounds i16, i16* %411, i64 2
  %417 = getelementptr inbounds i16, i16* %410, i64 2
  %418 = load i16, i16* %417, align 2, !noalias !47
  store i16 %418, i16* %416, align 2, !noalias !47
  %419 = getelementptr inbounds i16, i16* %411, i64 3
  %420 = getelementptr inbounds i16, i16* %410, i64 3
  %421 = load i16, i16* %420, align 2, !noalias !47
  store i16 %421, i16* %419, align 2, !noalias !47
  %422 = getelementptr inbounds i16, i16* %411, i64 4
  %423 = getelementptr inbounds i16, i16* %410, i64 4
  %424 = load i16, i16* %423, align 2, !noalias !47
  store i16 %424, i16* %422, align 2, !noalias !47
  %425 = getelementptr inbounds i16, i16* %411, i64 5
  %426 = getelementptr inbounds i16, i16* %410, i64 5
  %427 = load i16, i16* %426, align 2, !noalias !47
  store i16 %427, i16* %425, align 2, !noalias !47
  %428 = getelementptr inbounds i16, i16* %411, i64 6
  %429 = getelementptr inbounds i16, i16* %410, i64 6
  %430 = load i16, i16* %429, align 2, !noalias !47
  store i16 %430, i16* %428, align 2, !noalias !47
  %431 = getelementptr inbounds i16, i16* %411, i64 7
  %432 = getelementptr inbounds i16, i16* %410, i64 7
  %433 = load i16, i16* %432, align 2, !noalias !47
  store i16 %433, i16* %431, align 2, !noalias !47
  %434 = add i64 %409, -8
  %435 = getelementptr inbounds i16, i16* %411, i64 8
  %436 = getelementptr inbounds i16, i16* %410, i64 8
  %437 = icmp eq i64 %434, 0
  br i1 %437, label %438, label %408, !llvm.loop !59

438:                                              ; preds = %403, %408, %383
  %439 = add i64 %284, %268
  %440 = load i8, i8* %270, align 1, !noalias !47
  %441 = icmp slt i8 %440, 0
  br i1 %441, label %442, label %444

442:                                              ; preds = %438
  %443 = getelementptr inbounds %"class.std::__1::basic_string.1", %"class.std::__1::basic_string.1"* %5, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  store i64 %439, i64* %443, align 8, !noalias !47
  br label %446

444:                                              ; preds = %438
  %445 = trunc i64 %439 to i8
  store i8 %445, i8* %270, align 1, !noalias !47
  br label %446

446:                                              ; preds = %444, %442
  %447 = getelementptr inbounds i16, i16* %293, i64 %439
  store i16 0, i16* %447, align 2, !noalias !47
  br label %451

448:                                              ; preds = %282
  %449 = add i64 %284, %268
  %450 = sub i64 %449, %283
  call void @_ZNSt3__112basic_stringIDsNS_11char_traitsIDsEENS_9allocatorIDsEEE21__grow_by_and_replaceEmmmmmmPKDs(%"class.std::__1::basic_string.1"* nonnull %5, i64 %283, i64 %450, i64 %284, i64 %284, i64 0, i64 %268, i16* %267) #10, !noalias !47
  br label %451

451:                                              ; preds = %287, %446, %448
  %452 = bitcast %"class.std::__1::basic_string.1"* %0 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %452, i8* nonnull align 8 %18, i64 24, i1 false) #10
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %18, i8 0, i64 24, i1 false) #10, !noalias !47
  %453 = load i8, i8* %220, align 1
  %454 = icmp slt i8 %453, 0
  br i1 %454, label %455, label %458

455:                                              ; preds = %451
  %456 = bitcast %"class.std::__1::basic_string.1"* %6 to i8**
  %457 = load i8*, i8** %456, align 8
  call void @_ZdlPv(i8* %457) #12
  br label %458

458:                                              ; preds = %451, %455
  %459 = load i8, i8* %37, align 1
  %460 = icmp slt i8 %459, 0
  br i1 %460, label %461, label %464

461:                                              ; preds = %458
  %462 = bitcast %"class.std::__1::basic_string.1"* %7 to i8**
  %463 = load i8*, i8** %462, align 8
  call void @_ZdlPv(i8* %463) #12
  br label %464

464:                                              ; preds = %458, %461
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %21) #10
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %20) #10
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %18) #10
  br label %822

465:                                              ; preds = %4
  %466 = zext i32 %15 to i64
  %467 = getelementptr inbounds [30 x i32], [30 x i32]* @_ZZ25GetAccessibilityBaseLabelRK17AutocompleteMatchRKNSt3__112basic_stringIDsNS2_11char_traitsIDsEENS2_9allocatorIDsEEEEPiE11message_ids, i64 0, i64 %466
  %468 = load i32, i32* %467, align 4
  %469 = lshr i64 210452430, %466
  %470 = and i64 %469, 1
  %471 = icmp eq i64 %470, 0
  br i1 %471, label %472, label %655

472:                                              ; preds = %465
  %473 = bitcast %"class.std::__1::basic_string.1"* %2 to %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"*
  %474 = getelementptr inbounds %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short", %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"* %473, i64 0, i32 1, i32 1
  %475 = load i8, i8* %474, align 1
  %476 = icmp slt i8 %475, 0
  br i1 %476, label %480, label %477

477:                                              ; preds = %472
  %478 = bitcast %"class.std::__1::basic_string.1"* %0 to i8*
  %479 = bitcast %"class.std::__1::basic_string.1"* %2 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %478, i8* align 8 %479, i64 24, i1 false) #10
  br label %822

480:                                              ; preds = %472
  %481 = getelementptr inbounds %"class.std::__1::basic_string.1", %"class.std::__1::basic_string.1"* %2, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %482 = load i16*, i16** %481, align 8
  %483 = getelementptr inbounds %"class.std::__1::basic_string.1", %"class.std::__1::basic_string.1"* %2, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %484 = load i64, i64* %483, align 8
  %485 = icmp ult i64 %484, 11
  br i1 %485, label %486, label %491

486:                                              ; preds = %480
  %487 = bitcast %"class.std::__1::basic_string.1"* %0 to i16*
  %488 = trunc i64 %484 to i8
  %489 = bitcast %"class.std::__1::basic_string.1"* %0 to %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"*
  %490 = getelementptr inbounds %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short", %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"* %489, i64 0, i32 1, i32 1
  store i8 %488, i8* %490, align 1
  br label %508

491:                                              ; preds = %480
  %492 = icmp ugt i64 %484, 9223372036854775791
  br i1 %492, label %493, label %495

493:                                              ; preds = %491
  %494 = bitcast %"class.std::__1::basic_string.1"* %0 to %"class.std::__1::__basic_string_common"*
  tail call void @_ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__basic_string_common"* %494) #11
  unreachable

495:                                              ; preds = %491
  %496 = add nuw nsw i64 %484, 8
  %497 = and i64 %496, -8
  %498 = icmp slt i64 %497, 0
  br i1 %498, label %499, label %500

499:                                              ; preds = %495
  tail call void @abort() #11
  unreachable

500:                                              ; preds = %495
  %501 = shl i64 %497, 1
  %502 = tail call i8* @_Znwm(i64 %501) #12
  %503 = bitcast i8* %502 to i16*
  %504 = bitcast %"class.std::__1::basic_string.1"* %0 to i8**
  store i8* %502, i8** %504, align 8
  %505 = or i64 %497, -9223372036854775808
  %506 = getelementptr inbounds %"class.std::__1::basic_string.1", %"class.std::__1::basic_string.1"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 2
  store i64 %505, i64* %506, align 8
  %507 = getelementptr inbounds %"class.std::__1::basic_string.1", %"class.std::__1::basic_string.1"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  store i64 %484, i64* %507, align 8
  br label %508

508:                                              ; preds = %500, %486
  %509 = phi i16* [ %487, %486 ], [ %503, %500 ]
  %510 = add nuw nsw i64 %484, 1
  %511 = add i64 %484, 1
  %512 = icmp ult i64 %511, 16
  br i1 %512, label %602, label %513

513:                                              ; preds = %508
  %514 = add i64 %484, 1
  %515 = getelementptr i16, i16* %509, i64 %514
  %516 = getelementptr i16, i16* %482, i64 %514
  %517 = icmp ult i16* %509, %516
  %518 = icmp ult i16* %482, %515
  %519 = and i1 %517, %518
  br i1 %519, label %602, label %520

520:                                              ; preds = %513
  %521 = and i64 %511, -16
  %522 = sub i64 %510, %521
  %523 = getelementptr i16, i16* %482, i64 %521
  %524 = getelementptr i16, i16* %509, i64 %521
  %525 = add i64 %521, -16
  %526 = lshr exact i64 %525, 4
  %527 = add nuw nsw i64 %526, 1
  %528 = and i64 %527, 3
  %529 = icmp ult i64 %525, 48
  br i1 %529, label %581, label %530

530:                                              ; preds = %520
  %531 = sub nsw i64 %527, %528
  br label %532

532:                                              ; preds = %532, %530
  %533 = phi i64 [ 0, %530 ], [ %578, %532 ]
  %534 = phi i64 [ %531, %530 ], [ %579, %532 ]
  %535 = getelementptr i16, i16* %482, i64 %533
  %536 = getelementptr i16, i16* %509, i64 %533
  %537 = bitcast i16* %535 to <8 x i16>*
  %538 = load <8 x i16>, <8 x i16>* %537, align 2, !alias.scope !60
  %539 = getelementptr i16, i16* %535, i64 8
  %540 = bitcast i16* %539 to <8 x i16>*
  %541 = load <8 x i16>, <8 x i16>* %540, align 2, !alias.scope !60
  %542 = bitcast i16* %536 to <8 x i16>*
  store <8 x i16> %538, <8 x i16>* %542, align 2, !alias.scope !63, !noalias !60
  %543 = getelementptr i16, i16* %536, i64 8
  %544 = bitcast i16* %543 to <8 x i16>*
  store <8 x i16> %541, <8 x i16>* %544, align 2, !alias.scope !63, !noalias !60
  %545 = or i64 %533, 16
  %546 = getelementptr i16, i16* %482, i64 %545
  %547 = getelementptr i16, i16* %509, i64 %545
  %548 = bitcast i16* %546 to <8 x i16>*
  %549 = load <8 x i16>, <8 x i16>* %548, align 2, !alias.scope !60
  %550 = getelementptr i16, i16* %546, i64 8
  %551 = bitcast i16* %550 to <8 x i16>*
  %552 = load <8 x i16>, <8 x i16>* %551, align 2, !alias.scope !60
  %553 = bitcast i16* %547 to <8 x i16>*
  store <8 x i16> %549, <8 x i16>* %553, align 2, !alias.scope !63, !noalias !60
  %554 = getelementptr i16, i16* %547, i64 8
  %555 = bitcast i16* %554 to <8 x i16>*
  store <8 x i16> %552, <8 x i16>* %555, align 2, !alias.scope !63, !noalias !60
  %556 = or i64 %533, 32
  %557 = getelementptr i16, i16* %482, i64 %556
  %558 = getelementptr i16, i16* %509, i64 %556
  %559 = bitcast i16* %557 to <8 x i16>*
  %560 = load <8 x i16>, <8 x i16>* %559, align 2, !alias.scope !60
  %561 = getelementptr i16, i16* %557, i64 8
  %562 = bitcast i16* %561 to <8 x i16>*
  %563 = load <8 x i16>, <8 x i16>* %562, align 2, !alias.scope !60
  %564 = bitcast i16* %558 to <8 x i16>*
  store <8 x i16> %560, <8 x i16>* %564, align 2, !alias.scope !63, !noalias !60
  %565 = getelementptr i16, i16* %558, i64 8
  %566 = bitcast i16* %565 to <8 x i16>*
  store <8 x i16> %563, <8 x i16>* %566, align 2, !alias.scope !63, !noalias !60
  %567 = or i64 %533, 48
  %568 = getelementptr i16, i16* %482, i64 %567
  %569 = getelementptr i16, i16* %509, i64 %567
  %570 = bitcast i16* %568 to <8 x i16>*
  %571 = load <8 x i16>, <8 x i16>* %570, align 2, !alias.scope !60
  %572 = getelementptr i16, i16* %568, i64 8
  %573 = bitcast i16* %572 to <8 x i16>*
  %574 = load <8 x i16>, <8 x i16>* %573, align 2, !alias.scope !60
  %575 = bitcast i16* %569 to <8 x i16>*
  store <8 x i16> %571, <8 x i16>* %575, align 2, !alias.scope !63, !noalias !60
  %576 = getelementptr i16, i16* %569, i64 8
  %577 = bitcast i16* %576 to <8 x i16>*
  store <8 x i16> %574, <8 x i16>* %577, align 2, !alias.scope !63, !noalias !60
  %578 = add i64 %533, 64
  %579 = add i64 %534, -4
  %580 = icmp eq i64 %579, 0
  br i1 %580, label %581, label %532, !llvm.loop !65

581:                                              ; preds = %532, %520
  %582 = phi i64 [ 0, %520 ], [ %578, %532 ]
  %583 = icmp eq i64 %528, 0
  br i1 %583, label %600, label %584

584:                                              ; preds = %581, %584
  %585 = phi i64 [ %597, %584 ], [ %582, %581 ]
  %586 = phi i64 [ %598, %584 ], [ %528, %581 ]
  %587 = getelementptr i16, i16* %482, i64 %585
  %588 = getelementptr i16, i16* %509, i64 %585
  %589 = bitcast i16* %587 to <8 x i16>*
  %590 = load <8 x i16>, <8 x i16>* %589, align 2, !alias.scope !60
  %591 = getelementptr i16, i16* %587, i64 8
  %592 = bitcast i16* %591 to <8 x i16>*
  %593 = load <8 x i16>, <8 x i16>* %592, align 2, !alias.scope !60
  %594 = bitcast i16* %588 to <8 x i16>*
  store <8 x i16> %590, <8 x i16>* %594, align 2, !alias.scope !63, !noalias !60
  %595 = getelementptr i16, i16* %588, i64 8
  %596 = bitcast i16* %595 to <8 x i16>*
  store <8 x i16> %593, <8 x i16>* %596, align 2, !alias.scope !63, !noalias !60
  %597 = add i64 %585, 16
  %598 = add i64 %586, -1
  %599 = icmp eq i64 %598, 0
  br i1 %599, label %600, label %584, !llvm.loop !66

600:                                              ; preds = %584, %581
  %601 = icmp eq i64 %511, %521
  br i1 %601, label %822, label %602

602:                                              ; preds = %600, %513, %508
  %603 = phi i64 [ %510, %513 ], [ %510, %508 ], [ %522, %600 ]
  %604 = phi i16* [ %482, %513 ], [ %482, %508 ], [ %523, %600 ]
  %605 = phi i16* [ %509, %513 ], [ %509, %508 ], [ %524, %600 ]
  %606 = add i64 %603, -1
  %607 = and i64 %603, 7
  %608 = icmp eq i64 %607, 0
  br i1 %608, label %620, label %609

609:                                              ; preds = %602, %609
  %610 = phi i64 [ %615, %609 ], [ %603, %602 ]
  %611 = phi i16* [ %617, %609 ], [ %604, %602 ]
  %612 = phi i16* [ %616, %609 ], [ %605, %602 ]
  %613 = phi i64 [ %618, %609 ], [ %607, %602 ]
  %614 = load i16, i16* %611, align 2
  store i16 %614, i16* %612, align 2
  %615 = add i64 %610, -1
  %616 = getelementptr inbounds i16, i16* %612, i64 1
  %617 = getelementptr inbounds i16, i16* %611, i64 1
  %618 = add i64 %613, -1
  %619 = icmp eq i64 %618, 0
  br i1 %619, label %620, label %609, !llvm.loop !67

620:                                              ; preds = %609, %602
  %621 = phi i64 [ %603, %602 ], [ %615, %609 ]
  %622 = phi i16* [ %604, %602 ], [ %617, %609 ]
  %623 = phi i16* [ %605, %602 ], [ %616, %609 ]
  %624 = icmp ult i64 %606, 7
  br i1 %624, label %822, label %625

625:                                              ; preds = %620, %625
  %626 = phi i64 [ %651, %625 ], [ %621, %620 ]
  %627 = phi i16* [ %653, %625 ], [ %622, %620 ]
  %628 = phi i16* [ %652, %625 ], [ %623, %620 ]
  %629 = load i16, i16* %627, align 2
  store i16 %629, i16* %628, align 2
  %630 = getelementptr inbounds i16, i16* %628, i64 1
  %631 = getelementptr inbounds i16, i16* %627, i64 1
  %632 = load i16, i16* %631, align 2
  store i16 %632, i16* %630, align 2
  %633 = getelementptr inbounds i16, i16* %628, i64 2
  %634 = getelementptr inbounds i16, i16* %627, i64 2
  %635 = load i16, i16* %634, align 2
  store i16 %635, i16* %633, align 2
  %636 = getelementptr inbounds i16, i16* %628, i64 3
  %637 = getelementptr inbounds i16, i16* %627, i64 3
  %638 = load i16, i16* %637, align 2
  store i16 %638, i16* %636, align 2
  %639 = getelementptr inbounds i16, i16* %628, i64 4
  %640 = getelementptr inbounds i16, i16* %627, i64 4
  %641 = load i16, i16* %640, align 2
  store i16 %641, i16* %639, align 2
  %642 = getelementptr inbounds i16, i16* %628, i64 5
  %643 = getelementptr inbounds i16, i16* %627, i64 5
  %644 = load i16, i16* %643, align 2
  store i16 %644, i16* %642, align 2
  %645 = getelementptr inbounds i16, i16* %628, i64 6
  %646 = getelementptr inbounds i16, i16* %627, i64 6
  %647 = load i16, i16* %646, align 2
  store i16 %647, i16* %645, align 2
  %648 = getelementptr inbounds i16, i16* %628, i64 7
  %649 = getelementptr inbounds i16, i16* %627, i64 7
  %650 = load i16, i16* %649, align 2
  store i16 %650, i16* %648, align 2
  %651 = add i64 %626, -8
  %652 = getelementptr inbounds i16, i16* %628, i64 8
  %653 = getelementptr inbounds i16, i16* %627, i64 8
  %654 = icmp eq i64 %651, 0
  br i1 %654, label %822, label %625, !llvm.loop !68

655:                                              ; preds = %465
  %656 = bitcast %"class.std::__1::basic_string.1"* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %656) #10
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %656, i8 0, i64 24, i1 false) #10
  switch i32 %468, label %691 [
    i32 19730, label %657
    i32 19731, label %657
    i32 19732, label %657
    i32 19733, label %672
    i32 19729, label %685
    i32 19735, label %685
    i32 19738, label %688
    i32 19737, label %688
  ]

657:                                              ; preds = %655, %655, %655
  %658 = getelementptr inbounds %struct.AutocompleteMatch, %struct.AutocompleteMatch* %1, i64 0, i32 26, i32 0, i32 0, i32 0, i32 0
  %659 = load i8, i8* %658, align 8, !range !69
  %660 = icmp eq i8 %659, 0
  br i1 %660, label %691, label %661

661:                                              ; preds = %657
  %662 = bitcast %"class.std::__1::basic_string.1"* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %662) #10
  %663 = getelementptr inbounds %struct.AutocompleteMatch, %struct.AutocompleteMatch* %1, i64 0, i32 26, i32 0, i32 0, i32 0, i32 2, i32 0, i32 2
  call void @_ZNK16SuggestionAnswer9ImageLine14AccessibleTextEv(%"class.std::__1::basic_string.1"* nonnull sret %9, %"class.SuggestionAnswer::ImageLine"* %663) #10
  %664 = bitcast %"class.std::__1::basic_string.1"* %8 to %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"*
  %665 = getelementptr inbounds %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short", %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"* %664, i64 0, i32 1, i32 1
  %666 = load i8, i8* %665, align 1
  %667 = icmp slt i8 %666, 0
  br i1 %667, label %668, label %671

668:                                              ; preds = %661
  %669 = bitcast %"class.std::__1::basic_string.1"* %8 to i8**
  %670 = load i8*, i8** %669, align 8
  call void @_ZdlPv(i8* %670) #12
  br label %671

671:                                              ; preds = %668, %661
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %656, i8* nonnull align 8 %662, i64 24, i1 false) #10
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %662) #10
  br label %691

672:                                              ; preds = %655
  %673 = getelementptr inbounds %struct.AutocompleteMatch, %struct.AutocompleteMatch* %1, i64 0, i32 19
  %674 = bitcast %"class.std::__1::basic_string.1"* %673 to %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"*
  %675 = getelementptr inbounds %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short", %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"* %674, i64 0, i32 1, i32 1
  %676 = load i8, i8* %675, align 1
  %677 = icmp slt i8 %676, 0
  %678 = getelementptr inbounds %struct.AutocompleteMatch, %struct.AutocompleteMatch* %1, i64 0, i32 19, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %679 = load i64, i64* %678, align 8
  %680 = zext i8 %676 to i64
  %681 = select i1 %677, i64 %679, i64 %680
  %682 = icmp eq i64 %681, 0
  br i1 %682, label %691, label %683

683:                                              ; preds = %672
  %684 = call dereferenceable(24) %"class.std::__1::basic_string.1"* @_ZNSt3__112basic_stringIDsNS_11char_traitsIDsEENS_9allocatorIDsEEEaSERKS5_(%"class.std::__1::basic_string.1"* nonnull %8, %"class.std::__1::basic_string.1"* dereferenceable(24) %673)
  br label %691

685:                                              ; preds = %655, %655
  %686 = getelementptr inbounds %struct.AutocompleteMatch, %struct.AutocompleteMatch* %1, i64 0, i32 19
  %687 = call dereferenceable(24) %"class.std::__1::basic_string.1"* @_ZNSt3__112basic_stringIDsNS_11char_traitsIDsEENS_9allocatorIDsEEEaSERKS5_(%"class.std::__1::basic_string.1"* nonnull %8, %"class.std::__1::basic_string.1"* dereferenceable(24) %686)
  br label %691

688:                                              ; preds = %655, %655
  %689 = getelementptr inbounds %struct.AutocompleteMatch, %struct.AutocompleteMatch* %1, i64 0, i32 19
  %690 = call dereferenceable(24) %"class.std::__1::basic_string.1"* @_ZNSt3__112basic_stringIDsNS_11char_traitsIDsEENS_9allocatorIDsEEEaSERKS5_(%"class.std::__1::basic_string.1"* nonnull %8, %"class.std::__1::basic_string.1"* dereferenceable(24) %689)
  br label %691

691:                                              ; preds = %657, %672, %655, %683, %671, %688, %685
  %692 = phi i32 [ %468, %655 ], [ %468, %688 ], [ %468, %685 ], [ 19733, %683 ], [ 19734, %671 ], [ %468, %657 ], [ 19732, %672 ]
  %693 = phi i1 [ false, %655 ], [ true, %688 ], [ true, %685 ], [ true, %683 ], [ true, %671 ], [ false, %657 ], [ false, %672 ]
  %694 = icmp eq i32* %3, null
  br i1 %694, label %810, label %695

695:                                              ; preds = %691
  br i1 %693, label %696, label %741

696:                                              ; preds = %695
  %697 = bitcast %"class.std::__1::basic_string.1"* %11 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %697) #10
  %698 = bitcast %"class.std::__1::basic_string.1"* %11 to %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"*
  %699 = getelementptr inbounds %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short", %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"* %698, i64 0, i32 1, i32 1
  store i8 1, i8* %699, align 1
  %700 = bitcast %"class.std::__1::basic_string.1"* %11 to i16*
  store i16 -4, i16* %700, align 8
  %701 = getelementptr inbounds i16, i16* %700, i64 1
  store i16 0, i16* %701, align 2
  call void @_ZN9l10n_util15GetStringFUTF16EiRKNSt3__112basic_stringIDsNS0_11char_traitsIDsEENS0_9allocatorIDsEEEES8_(%"class.std::__1::basic_string.1"* nonnull sret %10, i32 %692, %"class.std::__1::basic_string.1"* nonnull dereferenceable(24) %11, %"class.std::__1::basic_string.1"* nonnull dereferenceable(24) %8) #10
  %702 = bitcast %"class.std::__1::basic_string.1"* %10 to %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"*
  %703 = getelementptr inbounds %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short", %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"* %702, i64 0, i32 1, i32 1
  %704 = load i8, i8* %703, align 1
  %705 = icmp slt i8 %704, 0
  %706 = getelementptr inbounds %"class.std::__1::basic_string.1", %"class.std::__1::basic_string.1"* %10, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %707 = load i16*, i16** %706, align 8
  %708 = getelementptr inbounds %"class.std::__1::basic_string.1", %"class.std::__1::basic_string.1"* %10, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %709 = load i64, i64* %708, align 8
  %710 = bitcast %"class.std::__1::basic_string.1"* %10 to i16*
  %711 = zext i8 %704 to i64
  %712 = select i1 %705, i16* %707, i16* %710
  %713 = select i1 %705, i64 %709, i64 %711
  %714 = getelementptr inbounds i16, i16* %712, i64 %713
  %715 = ptrtoint i16* %712 to i64
  %716 = shl nuw i64 %713, 1
  %717 = icmp slt i64 %716, 2
  %718 = icmp eq i64 %713, 0
  %719 = or i1 %718, %717
  %720 = bitcast i16* %707 to i8*
  br i1 %719, label %740, label %721

721:                                              ; preds = %696, %726
  %722 = phi i64 [ %728, %726 ], [ %713, %696 ]
  %723 = phi i16* [ %727, %726 ], [ %712, %696 ]
  %724 = load i16, i16* %723, align 2
  %725 = icmp eq i16 %724, -4
  br i1 %725, label %730, label %726

726:                                              ; preds = %721
  %727 = getelementptr inbounds i16, i16* %723, i64 1
  %728 = add i64 %722, -1
  %729 = icmp eq i64 %728, 0
  br i1 %729, label %740, label %721

730:                                              ; preds = %721
  %731 = icmp eq i16* %723, null
  br i1 %731, label %740, label %732

732:                                              ; preds = %730
  %733 = ptrtoint i16* %723 to i64
  %734 = icmp eq i16* %723, %714
  %735 = sub i64 %733, %715
  br i1 %734, label %740, label %736

736:                                              ; preds = %732
  %737 = lshr exact i64 %735, 1
  %738 = icmp eq i64 %735, -2
  %739 = trunc i64 %737 to i32
  br i1 %738, label %740, label %797

740:                                              ; preds = %726, %736, %732, %730, %696
  br label %797

741:                                              ; preds = %695
  %742 = bitcast %"class.std::__1::basic_string.1"* %13 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %742) #10
  %743 = bitcast %"class.std::__1::basic_string.1"* %13 to %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"*
  %744 = getelementptr inbounds %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short", %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"* %743, i64 0, i32 1, i32 1
  store i8 1, i8* %744, align 1
  %745 = bitcast %"class.std::__1::basic_string.1"* %13 to i16*
  store i16 -4, i16* %745, align 8
  %746 = getelementptr inbounds i16, i16* %745, i64 1
  store i16 0, i16* %746, align 2
  call void @_ZN9l10n_util15GetStringFUTF16EiRKNSt3__112basic_stringIDsNS0_11char_traitsIDsEENS0_9allocatorIDsEEEE(%"class.std::__1::basic_string.1"* nonnull sret %12, i32 %692, %"class.std::__1::basic_string.1"* nonnull dereferenceable(24) %13) #10
  %747 = bitcast %"class.std::__1::basic_string.1"* %12 to %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"*
  %748 = getelementptr inbounds %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short", %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"* %747, i64 0, i32 1, i32 1
  %749 = load i8, i8* %748, align 1
  %750 = icmp slt i8 %749, 0
  %751 = getelementptr inbounds %"class.std::__1::basic_string.1", %"class.std::__1::basic_string.1"* %12, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %752 = load i16*, i16** %751, align 8
  %753 = getelementptr inbounds %"class.std::__1::basic_string.1", %"class.std::__1::basic_string.1"* %12, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %754 = load i64, i64* %753, align 8
  %755 = bitcast %"class.std::__1::basic_string.1"* %12 to i16*
  %756 = zext i8 %749 to i64
  %757 = select i1 %750, i16* %752, i16* %755
  %758 = select i1 %750, i64 %754, i64 %756
  %759 = getelementptr inbounds i16, i16* %757, i64 %758
  %760 = ptrtoint i16* %757 to i64
  %761 = shl nuw i64 %758, 1
  %762 = icmp slt i64 %761, 2
  %763 = icmp eq i64 %758, 0
  %764 = or i1 %763, %762
  %765 = bitcast i16* %752 to i8*
  br i1 %764, label %785, label %766

766:                                              ; preds = %741, %771
  %767 = phi i64 [ %773, %771 ], [ %758, %741 ]
  %768 = phi i16* [ %772, %771 ], [ %757, %741 ]
  %769 = load i16, i16* %768, align 2
  %770 = icmp eq i16 %769, -4
  br i1 %770, label %775, label %771

771:                                              ; preds = %766
  %772 = getelementptr inbounds i16, i16* %768, i64 1
  %773 = add i64 %767, -1
  %774 = icmp eq i64 %773, 0
  br i1 %774, label %785, label %766

775:                                              ; preds = %766
  %776 = icmp eq i16* %768, null
  br i1 %776, label %785, label %777

777:                                              ; preds = %775
  %778 = ptrtoint i16* %768 to i64
  %779 = icmp eq i16* %768, %759
  %780 = sub i64 %778, %760
  br i1 %779, label %785, label %781

781:                                              ; preds = %777
  %782 = lshr exact i64 %780, 1
  %783 = icmp eq i64 %780, -2
  %784 = trunc i64 %782 to i32
  br i1 %783, label %785, label %786

785:                                              ; preds = %771, %781, %777, %775, %741
  br label %786

786:                                              ; preds = %781, %785
  %787 = phi i32 [ %784, %781 ], [ 0, %785 ]
  store i32 %787, i32* %3, align 4
  br i1 %750, label %788, label %789

788:                                              ; preds = %786
  call void @_ZdlPv(i8* %765) #12
  br label %789

789:                                              ; preds = %786, %788
  %790 = bitcast %"class.std::__1::basic_string.1"* %13 to %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"*
  %791 = getelementptr inbounds %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short", %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"* %790, i64 0, i32 1, i32 1
  %792 = load i8, i8* %791, align 1
  %793 = icmp slt i8 %792, 0
  br i1 %793, label %794, label %808

794:                                              ; preds = %789
  %795 = bitcast %"class.std::__1::basic_string.1"* %13 to i8**
  %796 = load i8*, i8** %795, align 8
  call void @_ZdlPv(i8* %796) #12
  br label %808

797:                                              ; preds = %736, %740
  %798 = phi i32 [ 0, %740 ], [ %739, %736 ]
  store i32 %798, i32* %3, align 4
  br i1 %705, label %799, label %800

799:                                              ; preds = %797
  call void @_ZdlPv(i8* %720) #12
  br label %800

800:                                              ; preds = %797, %799
  %801 = bitcast %"class.std::__1::basic_string.1"* %11 to %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"*
  %802 = getelementptr inbounds %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short", %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"* %801, i64 0, i32 1, i32 1
  %803 = load i8, i8* %802, align 1
  %804 = icmp slt i8 %803, 0
  br i1 %804, label %805, label %808

805:                                              ; preds = %800
  %806 = bitcast %"class.std::__1::basic_string.1"* %11 to i8**
  %807 = load i8*, i8** %806, align 8
  call void @_ZdlPv(i8* %807) #12
  br label %808

808:                                              ; preds = %805, %800, %789, %794
  %809 = phi i8* [ %742, %794 ], [ %742, %789 ], [ %697, %800 ], [ %697, %805 ]
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %809) #10
  br label %810

810:                                              ; preds = %808, %691
  br i1 %693, label %811, label %812

811:                                              ; preds = %810
  call void @_ZN9l10n_util15GetStringFUTF16EiRKNSt3__112basic_stringIDsNS0_11char_traitsIDsEENS0_9allocatorIDsEEEES8_(%"class.std::__1::basic_string.1"* sret %0, i32 %692, %"class.std::__1::basic_string.1"* dereferenceable(24) %2, %"class.std::__1::basic_string.1"* nonnull dereferenceable(24) %8) #10
  br label %813

812:                                              ; preds = %810
  call void @_ZN9l10n_util15GetStringFUTF16EiRKNSt3__112basic_stringIDsNS0_11char_traitsIDsEENS0_9allocatorIDsEEEE(%"class.std::__1::basic_string.1"* sret %0, i32 %692, %"class.std::__1::basic_string.1"* dereferenceable(24) %2) #10
  br label %813

813:                                              ; preds = %812, %811
  %814 = bitcast %"class.std::__1::basic_string.1"* %8 to %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"*
  %815 = getelementptr inbounds %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short", %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"* %814, i64 0, i32 1, i32 1
  %816 = load i8, i8* %815, align 1
  %817 = icmp slt i8 %816, 0
  br i1 %817, label %818, label %821

818:                                              ; preds = %813
  %819 = bitcast %"class.std::__1::basic_string.1"* %8 to i8**
  %820 = load i8*, i8** %819, align 8
  call void @_ZdlPv(i8* %820) #12
  br label %821

821:                                              ; preds = %813, %818
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %656) #10
  br label %822

822:                                              ; preds = %620, %625, %600, %477, %821, %464
  ret void
}

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__1plIDsNS_11char_traitsIDsEENS_9allocatorIDsEEEENS_12basic_stringIT_T0_T1_EERKS9_PKS6_(%"class.std::__1::basic_string.1"* noalias sret, %"class.std::__1::basic_string.1"* dereferenceable(24), i16*) local_unnamed_addr #4 comdat {
  %4 = getelementptr inbounds %"class.std::__1::basic_string.1", %"class.std::__1::basic_string.1"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %5 = getelementptr inbounds %"class.std::__1::basic_string.1", %"class.std::__1::basic_string.1"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %6 = getelementptr inbounds %"class.std::__1::basic_string.1", %"class.std::__1::basic_string.1"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 2
  %7 = bitcast %"class.std::__1::basic_string.1"* %0 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %7, i8 0, i64 24, i1 false) #10
  %8 = bitcast %"class.std::__1::basic_string.1"* %1 to %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"*
  %9 = getelementptr inbounds %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short", %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"* %8, i64 0, i32 1, i32 1
  %10 = load i8, i8* %9, align 1
  %11 = icmp slt i8 %10, 0
  %12 = getelementptr inbounds %"class.std::__1::basic_string.1", %"class.std::__1::basic_string.1"* %1, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %13 = load i64, i64* %12, align 8
  %14 = zext i8 %10 to i64
  %15 = select i1 %11, i64 %13, i64 %14
  %16 = load i16, i16* %2, align 2
  %17 = icmp eq i16 %16, 0
  br i1 %17, label %25, label %18

18:                                               ; preds = %3, %18
  %19 = phi i64 [ %21, %18 ], [ 0, %3 ]
  %20 = phi i16* [ %22, %18 ], [ %2, %3 ]
  %21 = add i64 %19, 1
  %22 = getelementptr inbounds i16, i16* %20, i64 1
  %23 = load i16, i16* %22, align 2
  %24 = icmp eq i16 %23, 0
  br i1 %24, label %25, label %18

25:                                               ; preds = %18, %3
  %26 = phi i64 [ 0, %3 ], [ %21, %18 ]
  %27 = getelementptr inbounds %"class.std::__1::basic_string.1", %"class.std::__1::basic_string.1"* %1, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %28 = load i16*, i16** %27, align 8
  %29 = bitcast %"class.std::__1::basic_string.1"* %1 to i16*
  %30 = select i1 %11, i16* %28, i16* %29
  %31 = add i64 %26, %15
  %32 = icmp ugt i64 %31, 9223372036854775791
  br i1 %32, label %33, label %35

33:                                               ; preds = %25
  %34 = bitcast %"class.std::__1::basic_string.1"* %0 to %"class.std::__1::__basic_string_common"*
  tail call void @_ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__basic_string_common"* %34) #11
  unreachable

35:                                               ; preds = %25
  %36 = icmp ult i64 %31, 11
  br i1 %36, label %37, label %42

37:                                               ; preds = %35
  %38 = trunc i64 %15 to i8
  %39 = bitcast %"class.std::__1::basic_string.1"* %0 to %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"*
  %40 = getelementptr inbounds %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short", %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"* %39, i64 0, i32 1, i32 1
  store i8 %38, i8* %40, align 1
  %41 = bitcast %"class.std::__1::basic_string.1"* %0 to i16*
  br label %53

42:                                               ; preds = %35
  %43 = add nuw nsw i64 %31, 8
  %44 = and i64 %43, -8
  %45 = icmp slt i64 %44, 0
  br i1 %45, label %46, label %47

46:                                               ; preds = %42
  tail call void @abort() #11
  unreachable

47:                                               ; preds = %42
  %48 = shl i64 %44, 1
  %49 = tail call i8* @_Znwm(i64 %48) #12
  %50 = bitcast i8* %49 to i16*
  %51 = bitcast %"class.std::__1::basic_string.1"* %0 to i8**
  store i8* %49, i8** %51, align 8
  %52 = or i64 %44, -9223372036854775808
  store i64 %52, i64* %6, align 8
  store i64 %15, i64* %5, align 8
  br label %53

53:                                               ; preds = %47, %37
  %54 = phi i16* [ %41, %37 ], [ %50, %47 ]
  %55 = icmp eq i64 %15, 0
  br i1 %55, label %199, label %56

56:                                               ; preds = %53
  %57 = icmp ult i64 %15, 16
  br i1 %57, label %146, label %58

58:                                               ; preds = %56
  %59 = getelementptr i16, i16* %54, i64 %15
  %60 = getelementptr i16, i16* %30, i64 %15
  %61 = icmp ult i16* %54, %60
  %62 = icmp ult i16* %30, %59
  %63 = and i1 %61, %62
  br i1 %63, label %146, label %64

64:                                               ; preds = %58
  %65 = and i64 %15, -16
  %66 = sub i64 %15, %65
  %67 = getelementptr i16, i16* %30, i64 %65
  %68 = getelementptr i16, i16* %54, i64 %65
  %69 = add i64 %65, -16
  %70 = lshr exact i64 %69, 4
  %71 = add nuw nsw i64 %70, 1
  %72 = and i64 %71, 3
  %73 = icmp ult i64 %69, 48
  br i1 %73, label %125, label %74

74:                                               ; preds = %64
  %75 = sub nsw i64 %71, %72
  br label %76

76:                                               ; preds = %76, %74
  %77 = phi i64 [ 0, %74 ], [ %122, %76 ]
  %78 = phi i64 [ %75, %74 ], [ %123, %76 ]
  %79 = getelementptr i16, i16* %30, i64 %77
  %80 = getelementptr i16, i16* %54, i64 %77
  %81 = bitcast i16* %79 to <8 x i16>*
  %82 = load <8 x i16>, <8 x i16>* %81, align 2, !alias.scope !70
  %83 = getelementptr i16, i16* %79, i64 8
  %84 = bitcast i16* %83 to <8 x i16>*
  %85 = load <8 x i16>, <8 x i16>* %84, align 2, !alias.scope !70
  %86 = bitcast i16* %80 to <8 x i16>*
  store <8 x i16> %82, <8 x i16>* %86, align 2, !alias.scope !73, !noalias !70
  %87 = getelementptr i16, i16* %80, i64 8
  %88 = bitcast i16* %87 to <8 x i16>*
  store <8 x i16> %85, <8 x i16>* %88, align 2, !alias.scope !73, !noalias !70
  %89 = or i64 %77, 16
  %90 = getelementptr i16, i16* %30, i64 %89
  %91 = getelementptr i16, i16* %54, i64 %89
  %92 = bitcast i16* %90 to <8 x i16>*
  %93 = load <8 x i16>, <8 x i16>* %92, align 2, !alias.scope !70
  %94 = getelementptr i16, i16* %90, i64 8
  %95 = bitcast i16* %94 to <8 x i16>*
  %96 = load <8 x i16>, <8 x i16>* %95, align 2, !alias.scope !70
  %97 = bitcast i16* %91 to <8 x i16>*
  store <8 x i16> %93, <8 x i16>* %97, align 2, !alias.scope !73, !noalias !70
  %98 = getelementptr i16, i16* %91, i64 8
  %99 = bitcast i16* %98 to <8 x i16>*
  store <8 x i16> %96, <8 x i16>* %99, align 2, !alias.scope !73, !noalias !70
  %100 = or i64 %77, 32
  %101 = getelementptr i16, i16* %30, i64 %100
  %102 = getelementptr i16, i16* %54, i64 %100
  %103 = bitcast i16* %101 to <8 x i16>*
  %104 = load <8 x i16>, <8 x i16>* %103, align 2, !alias.scope !70
  %105 = getelementptr i16, i16* %101, i64 8
  %106 = bitcast i16* %105 to <8 x i16>*
  %107 = load <8 x i16>, <8 x i16>* %106, align 2, !alias.scope !70
  %108 = bitcast i16* %102 to <8 x i16>*
  store <8 x i16> %104, <8 x i16>* %108, align 2, !alias.scope !73, !noalias !70
  %109 = getelementptr i16, i16* %102, i64 8
  %110 = bitcast i16* %109 to <8 x i16>*
  store <8 x i16> %107, <8 x i16>* %110, align 2, !alias.scope !73, !noalias !70
  %111 = or i64 %77, 48
  %112 = getelementptr i16, i16* %30, i64 %111
  %113 = getelementptr i16, i16* %54, i64 %111
  %114 = bitcast i16* %112 to <8 x i16>*
  %115 = load <8 x i16>, <8 x i16>* %114, align 2, !alias.scope !70
  %116 = getelementptr i16, i16* %112, i64 8
  %117 = bitcast i16* %116 to <8 x i16>*
  %118 = load <8 x i16>, <8 x i16>* %117, align 2, !alias.scope !70
  %119 = bitcast i16* %113 to <8 x i16>*
  store <8 x i16> %115, <8 x i16>* %119, align 2, !alias.scope !73, !noalias !70
  %120 = getelementptr i16, i16* %113, i64 8
  %121 = bitcast i16* %120 to <8 x i16>*
  store <8 x i16> %118, <8 x i16>* %121, align 2, !alias.scope !73, !noalias !70
  %122 = add i64 %77, 64
  %123 = add i64 %78, -4
  %124 = icmp eq i64 %123, 0
  br i1 %124, label %125, label %76, !llvm.loop !75

125:                                              ; preds = %76, %64
  %126 = phi i64 [ 0, %64 ], [ %122, %76 ]
  %127 = icmp eq i64 %72, 0
  br i1 %127, label %144, label %128

128:                                              ; preds = %125, %128
  %129 = phi i64 [ %141, %128 ], [ %126, %125 ]
  %130 = phi i64 [ %142, %128 ], [ %72, %125 ]
  %131 = getelementptr i16, i16* %30, i64 %129
  %132 = getelementptr i16, i16* %54, i64 %129
  %133 = bitcast i16* %131 to <8 x i16>*
  %134 = load <8 x i16>, <8 x i16>* %133, align 2, !alias.scope !70
  %135 = getelementptr i16, i16* %131, i64 8
  %136 = bitcast i16* %135 to <8 x i16>*
  %137 = load <8 x i16>, <8 x i16>* %136, align 2, !alias.scope !70
  %138 = bitcast i16* %132 to <8 x i16>*
  store <8 x i16> %134, <8 x i16>* %138, align 2, !alias.scope !73, !noalias !70
  %139 = getelementptr i16, i16* %132, i64 8
  %140 = bitcast i16* %139 to <8 x i16>*
  store <8 x i16> %137, <8 x i16>* %140, align 2, !alias.scope !73, !noalias !70
  %141 = add i64 %129, 16
  %142 = add i64 %130, -1
  %143 = icmp eq i64 %142, 0
  br i1 %143, label %144, label %128, !llvm.loop !76

144:                                              ; preds = %128, %125
  %145 = icmp eq i64 %15, %65
  br i1 %145, label %199, label %146

146:                                              ; preds = %144, %58, %56
  %147 = phi i64 [ %15, %58 ], [ %15, %56 ], [ %66, %144 ]
  %148 = phi i16* [ %30, %58 ], [ %30, %56 ], [ %67, %144 ]
  %149 = phi i16* [ %54, %58 ], [ %54, %56 ], [ %68, %144 ]
  %150 = add i64 %147, -1
  %151 = and i64 %147, 7
  %152 = icmp eq i64 %151, 0
  br i1 %152, label %164, label %153

153:                                              ; preds = %146, %153
  %154 = phi i64 [ %159, %153 ], [ %147, %146 ]
  %155 = phi i16* [ %161, %153 ], [ %148, %146 ]
  %156 = phi i16* [ %160, %153 ], [ %149, %146 ]
  %157 = phi i64 [ %162, %153 ], [ %151, %146 ]
  %158 = load i16, i16* %155, align 2
  store i16 %158, i16* %156, align 2
  %159 = add i64 %154, -1
  %160 = getelementptr inbounds i16, i16* %156, i64 1
  %161 = getelementptr inbounds i16, i16* %155, i64 1
  %162 = add i64 %157, -1
  %163 = icmp eq i64 %162, 0
  br i1 %163, label %164, label %153, !llvm.loop !77

164:                                              ; preds = %153, %146
  %165 = phi i64 [ %147, %146 ], [ %159, %153 ]
  %166 = phi i16* [ %148, %146 ], [ %161, %153 ]
  %167 = phi i16* [ %149, %146 ], [ %160, %153 ]
  %168 = icmp ult i64 %150, 7
  br i1 %168, label %199, label %169

169:                                              ; preds = %164, %169
  %170 = phi i64 [ %195, %169 ], [ %165, %164 ]
  %171 = phi i16* [ %197, %169 ], [ %166, %164 ]
  %172 = phi i16* [ %196, %169 ], [ %167, %164 ]
  %173 = load i16, i16* %171, align 2
  store i16 %173, i16* %172, align 2
  %174 = getelementptr inbounds i16, i16* %172, i64 1
  %175 = getelementptr inbounds i16, i16* %171, i64 1
  %176 = load i16, i16* %175, align 2
  store i16 %176, i16* %174, align 2
  %177 = getelementptr inbounds i16, i16* %172, i64 2
  %178 = getelementptr inbounds i16, i16* %171, i64 2
  %179 = load i16, i16* %178, align 2
  store i16 %179, i16* %177, align 2
  %180 = getelementptr inbounds i16, i16* %172, i64 3
  %181 = getelementptr inbounds i16, i16* %171, i64 3
  %182 = load i16, i16* %181, align 2
  store i16 %182, i16* %180, align 2
  %183 = getelementptr inbounds i16, i16* %172, i64 4
  %184 = getelementptr inbounds i16, i16* %171, i64 4
  %185 = load i16, i16* %184, align 2
  store i16 %185, i16* %183, align 2
  %186 = getelementptr inbounds i16, i16* %172, i64 5
  %187 = getelementptr inbounds i16, i16* %171, i64 5
  %188 = load i16, i16* %187, align 2
  store i16 %188, i16* %186, align 2
  %189 = getelementptr inbounds i16, i16* %172, i64 6
  %190 = getelementptr inbounds i16, i16* %171, i64 6
  %191 = load i16, i16* %190, align 2
  store i16 %191, i16* %189, align 2
  %192 = getelementptr inbounds i16, i16* %172, i64 7
  %193 = getelementptr inbounds i16, i16* %171, i64 7
  %194 = load i16, i16* %193, align 2
  store i16 %194, i16* %192, align 2
  %195 = add i64 %170, -8
  %196 = getelementptr inbounds i16, i16* %172, i64 8
  %197 = getelementptr inbounds i16, i16* %171, i64 8
  %198 = icmp eq i64 %195, 0
  br i1 %198, label %199, label %169, !llvm.loop !78

199:                                              ; preds = %164, %169, %144, %53
  %200 = getelementptr inbounds i16, i16* %54, i64 %15
  store i16 0, i16* %200, align 2
  %201 = bitcast %"class.std::__1::basic_string.1"* %0 to %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"*
  %202 = getelementptr inbounds %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short", %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"* %201, i64 0, i32 1, i32 1
  %203 = load i8, i8* %202, align 1
  %204 = icmp slt i8 %203, 0
  br i1 %204, label %205, label %210

205:                                              ; preds = %199
  %206 = load i64, i64* %6, align 8
  %207 = and i64 %206, 9223372036854775807
  %208 = add nsw i64 %207, -1
  %209 = load i64, i64* %5, align 8
  br label %212

210:                                              ; preds = %199
  %211 = zext i8 %203 to i64
  br label %212

212:                                              ; preds = %210, %205
  %213 = phi i64 [ %208, %205 ], [ 10, %210 ]
  %214 = phi i64 [ %209, %205 ], [ %211, %210 ]
  %215 = sub i64 %213, %214
  %216 = icmp ult i64 %215, %26
  br i1 %216, label %376, label %217

217:                                              ; preds = %212
  %218 = icmp eq i64 %26, 0
  br i1 %218, label %379, label %219

219:                                              ; preds = %217
  %220 = load i16*, i16** %4, align 8
  %221 = bitcast %"class.std::__1::basic_string.1"* %0 to i16*
  %222 = select i1 %204, i16* %220, i16* %221
  %223 = getelementptr inbounds i16, i16* %222, i64 %214
  %224 = icmp ult i64 %26, 16
  br i1 %224, label %314, label %225

225:                                              ; preds = %219
  %226 = add i64 %214, %26
  %227 = getelementptr i16, i16* %222, i64 %226
  %228 = getelementptr i16, i16* %2, i64 %26
  %229 = icmp ult i16* %223, %228
  %230 = icmp ugt i16* %227, %2
  %231 = and i1 %229, %230
  br i1 %231, label %314, label %232

232:                                              ; preds = %225
  %233 = and i64 %26, -16
  %234 = sub i64 %26, %233
  %235 = getelementptr i16, i16* %2, i64 %233
  %236 = getelementptr i16, i16* %223, i64 %233
  %237 = add i64 %233, -16
  %238 = lshr exact i64 %237, 4
  %239 = add nuw nsw i64 %238, 1
  %240 = and i64 %239, 3
  %241 = icmp ult i64 %237, 48
  br i1 %241, label %293, label %242

242:                                              ; preds = %232
  %243 = sub nsw i64 %239, %240
  br label %244

244:                                              ; preds = %244, %242
  %245 = phi i64 [ 0, %242 ], [ %290, %244 ]
  %246 = phi i64 [ %243, %242 ], [ %291, %244 ]
  %247 = getelementptr i16, i16* %2, i64 %245
  %248 = getelementptr i16, i16* %223, i64 %245
  %249 = bitcast i16* %247 to <8 x i16>*
  %250 = load <8 x i16>, <8 x i16>* %249, align 2, !alias.scope !79
  %251 = getelementptr i16, i16* %247, i64 8
  %252 = bitcast i16* %251 to <8 x i16>*
  %253 = load <8 x i16>, <8 x i16>* %252, align 2, !alias.scope !79
  %254 = bitcast i16* %248 to <8 x i16>*
  store <8 x i16> %250, <8 x i16>* %254, align 2, !alias.scope !82, !noalias !79
  %255 = getelementptr i16, i16* %248, i64 8
  %256 = bitcast i16* %255 to <8 x i16>*
  store <8 x i16> %253, <8 x i16>* %256, align 2, !alias.scope !82, !noalias !79
  %257 = or i64 %245, 16
  %258 = getelementptr i16, i16* %2, i64 %257
  %259 = getelementptr i16, i16* %223, i64 %257
  %260 = bitcast i16* %258 to <8 x i16>*
  %261 = load <8 x i16>, <8 x i16>* %260, align 2, !alias.scope !79
  %262 = getelementptr i16, i16* %258, i64 8
  %263 = bitcast i16* %262 to <8 x i16>*
  %264 = load <8 x i16>, <8 x i16>* %263, align 2, !alias.scope !79
  %265 = bitcast i16* %259 to <8 x i16>*
  store <8 x i16> %261, <8 x i16>* %265, align 2, !alias.scope !82, !noalias !79
  %266 = getelementptr i16, i16* %259, i64 8
  %267 = bitcast i16* %266 to <8 x i16>*
  store <8 x i16> %264, <8 x i16>* %267, align 2, !alias.scope !82, !noalias !79
  %268 = or i64 %245, 32
  %269 = getelementptr i16, i16* %2, i64 %268
  %270 = getelementptr i16, i16* %223, i64 %268
  %271 = bitcast i16* %269 to <8 x i16>*
  %272 = load <8 x i16>, <8 x i16>* %271, align 2, !alias.scope !79
  %273 = getelementptr i16, i16* %269, i64 8
  %274 = bitcast i16* %273 to <8 x i16>*
  %275 = load <8 x i16>, <8 x i16>* %274, align 2, !alias.scope !79
  %276 = bitcast i16* %270 to <8 x i16>*
  store <8 x i16> %272, <8 x i16>* %276, align 2, !alias.scope !82, !noalias !79
  %277 = getelementptr i16, i16* %270, i64 8
  %278 = bitcast i16* %277 to <8 x i16>*
  store <8 x i16> %275, <8 x i16>* %278, align 2, !alias.scope !82, !noalias !79
  %279 = or i64 %245, 48
  %280 = getelementptr i16, i16* %2, i64 %279
  %281 = getelementptr i16, i16* %223, i64 %279
  %282 = bitcast i16* %280 to <8 x i16>*
  %283 = load <8 x i16>, <8 x i16>* %282, align 2, !alias.scope !79
  %284 = getelementptr i16, i16* %280, i64 8
  %285 = bitcast i16* %284 to <8 x i16>*
  %286 = load <8 x i16>, <8 x i16>* %285, align 2, !alias.scope !79
  %287 = bitcast i16* %281 to <8 x i16>*
  store <8 x i16> %283, <8 x i16>* %287, align 2, !alias.scope !82, !noalias !79
  %288 = getelementptr i16, i16* %281, i64 8
  %289 = bitcast i16* %288 to <8 x i16>*
  store <8 x i16> %286, <8 x i16>* %289, align 2, !alias.scope !82, !noalias !79
  %290 = add i64 %245, 64
  %291 = add i64 %246, -4
  %292 = icmp eq i64 %291, 0
  br i1 %292, label %293, label %244, !llvm.loop !84

293:                                              ; preds = %244, %232
  %294 = phi i64 [ 0, %232 ], [ %290, %244 ]
  %295 = icmp eq i64 %240, 0
  br i1 %295, label %312, label %296

296:                                              ; preds = %293, %296
  %297 = phi i64 [ %309, %296 ], [ %294, %293 ]
  %298 = phi i64 [ %310, %296 ], [ %240, %293 ]
  %299 = getelementptr i16, i16* %2, i64 %297
  %300 = getelementptr i16, i16* %223, i64 %297
  %301 = bitcast i16* %299 to <8 x i16>*
  %302 = load <8 x i16>, <8 x i16>* %301, align 2, !alias.scope !79
  %303 = getelementptr i16, i16* %299, i64 8
  %304 = bitcast i16* %303 to <8 x i16>*
  %305 = load <8 x i16>, <8 x i16>* %304, align 2, !alias.scope !79
  %306 = bitcast i16* %300 to <8 x i16>*
  store <8 x i16> %302, <8 x i16>* %306, align 2, !alias.scope !82, !noalias !79
  %307 = getelementptr i16, i16* %300, i64 8
  %308 = bitcast i16* %307 to <8 x i16>*
  store <8 x i16> %305, <8 x i16>* %308, align 2, !alias.scope !82, !noalias !79
  %309 = add i64 %297, 16
  %310 = add i64 %298, -1
  %311 = icmp eq i64 %310, 0
  br i1 %311, label %312, label %296, !llvm.loop !85

312:                                              ; preds = %296, %293
  %313 = icmp eq i64 %26, %233
  br i1 %313, label %367, label %314

314:                                              ; preds = %312, %225, %219
  %315 = phi i64 [ %26, %225 ], [ %26, %219 ], [ %234, %312 ]
  %316 = phi i16* [ %2, %225 ], [ %2, %219 ], [ %235, %312 ]
  %317 = phi i16* [ %223, %225 ], [ %223, %219 ], [ %236, %312 ]
  %318 = add i64 %315, -1
  %319 = and i64 %315, 7
  %320 = icmp eq i64 %319, 0
  br i1 %320, label %332, label %321

321:                                              ; preds = %314, %321
  %322 = phi i64 [ %327, %321 ], [ %315, %314 ]
  %323 = phi i16* [ %329, %321 ], [ %316, %314 ]
  %324 = phi i16* [ %328, %321 ], [ %317, %314 ]
  %325 = phi i64 [ %330, %321 ], [ %319, %314 ]
  %326 = load i16, i16* %323, align 2
  store i16 %326, i16* %324, align 2
  %327 = add i64 %322, -1
  %328 = getelementptr inbounds i16, i16* %324, i64 1
  %329 = getelementptr inbounds i16, i16* %323, i64 1
  %330 = add i64 %325, -1
  %331 = icmp eq i64 %330, 0
  br i1 %331, label %332, label %321, !llvm.loop !86

332:                                              ; preds = %321, %314
  %333 = phi i64 [ %315, %314 ], [ %327, %321 ]
  %334 = phi i16* [ %316, %314 ], [ %329, %321 ]
  %335 = phi i16* [ %317, %314 ], [ %328, %321 ]
  %336 = icmp ult i64 %318, 7
  br i1 %336, label %367, label %337

337:                                              ; preds = %332, %337
  %338 = phi i64 [ %363, %337 ], [ %333, %332 ]
  %339 = phi i16* [ %365, %337 ], [ %334, %332 ]
  %340 = phi i16* [ %364, %337 ], [ %335, %332 ]
  %341 = load i16, i16* %339, align 2
  store i16 %341, i16* %340, align 2
  %342 = getelementptr inbounds i16, i16* %340, i64 1
  %343 = getelementptr inbounds i16, i16* %339, i64 1
  %344 = load i16, i16* %343, align 2
  store i16 %344, i16* %342, align 2
  %345 = getelementptr inbounds i16, i16* %340, i64 2
  %346 = getelementptr inbounds i16, i16* %339, i64 2
  %347 = load i16, i16* %346, align 2
  store i16 %347, i16* %345, align 2
  %348 = getelementptr inbounds i16, i16* %340, i64 3
  %349 = getelementptr inbounds i16, i16* %339, i64 3
  %350 = load i16, i16* %349, align 2
  store i16 %350, i16* %348, align 2
  %351 = getelementptr inbounds i16, i16* %340, i64 4
  %352 = getelementptr inbounds i16, i16* %339, i64 4
  %353 = load i16, i16* %352, align 2
  store i16 %353, i16* %351, align 2
  %354 = getelementptr inbounds i16, i16* %340, i64 5
  %355 = getelementptr inbounds i16, i16* %339, i64 5
  %356 = load i16, i16* %355, align 2
  store i16 %356, i16* %354, align 2
  %357 = getelementptr inbounds i16, i16* %340, i64 6
  %358 = getelementptr inbounds i16, i16* %339, i64 6
  %359 = load i16, i16* %358, align 2
  store i16 %359, i16* %357, align 2
  %360 = getelementptr inbounds i16, i16* %340, i64 7
  %361 = getelementptr inbounds i16, i16* %339, i64 7
  %362 = load i16, i16* %361, align 2
  store i16 %362, i16* %360, align 2
  %363 = add i64 %338, -8
  %364 = getelementptr inbounds i16, i16* %340, i64 8
  %365 = getelementptr inbounds i16, i16* %339, i64 8
  %366 = icmp eq i64 %363, 0
  br i1 %366, label %367, label %337, !llvm.loop !87

367:                                              ; preds = %332, %337, %312
  %368 = add i64 %214, %26
  %369 = load i8, i8* %202, align 1
  %370 = icmp slt i8 %369, 0
  br i1 %370, label %371, label %372

371:                                              ; preds = %367
  store i64 %368, i64* %5, align 8
  br label %374

372:                                              ; preds = %367
  %373 = trunc i64 %368 to i8
  store i8 %373, i8* %202, align 1
  br label %374

374:                                              ; preds = %372, %371
  %375 = getelementptr inbounds i16, i16* %222, i64 %368
  store i16 0, i16* %375, align 2
  br label %379

376:                                              ; preds = %212
  %377 = add i64 %214, %26
  %378 = sub i64 %377, %213
  tail call void @_ZNSt3__112basic_stringIDsNS_11char_traitsIDsEENS_9allocatorIDsEEE21__grow_by_and_replaceEmmmmmmPKDs(%"class.std::__1::basic_string.1"* %0, i64 %213, i64 %378, i64 %214, i64 %214, i64 0, i64 %26, i16* %2) #10
  br label %379

379:                                              ; preds = %217, %374, %376
  ret void
}

declare void @_ZNK16SuggestionAnswer9ImageLine14AccessibleTextEv(%"class.std::__1::basic_string.1"* sret, %"class.SuggestionAnswer::ImageLine"*) local_unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden dereferenceable(24) %"class.std::__1::basic_string.1"* @_ZNSt3__112basic_stringIDsNS_11char_traitsIDsEENS_9allocatorIDsEEEaSERKS5_(%"class.std::__1::basic_string.1"*, %"class.std::__1::basic_string.1"* dereferenceable(24)) local_unnamed_addr #0 comdat align 2 {
  %3 = bitcast %"class.std::__1::basic_string.1"* %0 to i8*
  %4 = icmp eq %"class.std::__1::basic_string.1"* %0, %1
  br i1 %4, label %510, label %5

5:                                                ; preds = %2
  %6 = bitcast %"class.std::__1::basic_string.1"* %0 to %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"*
  %7 = getelementptr inbounds %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short", %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"* %6, i64 0, i32 1, i32 1
  %8 = load i8, i8* %7, align 1
  %9 = icmp slt i8 %8, 0
  %10 = bitcast %"class.std::__1::basic_string.1"* %1 to %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"*
  %11 = getelementptr inbounds %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short", %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"* %10, i64 0, i32 1, i32 1
  %12 = load i8, i8* %11, align 1
  %13 = icmp slt i8 %12, 0
  br i1 %9, label %341, label %14

14:                                               ; preds = %5
  br i1 %13, label %17, label %15

15:                                               ; preds = %14
  %16 = bitcast %"class.std::__1::basic_string.1"* %1 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %3, i8* align 8 %16, i64 24, i1 false)
  br label %510

17:                                               ; preds = %14
  %18 = getelementptr inbounds %"class.std::__1::basic_string.1", %"class.std::__1::basic_string.1"* %1, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %19 = load i16*, i16** %18, align 8
  %20 = bitcast i16* %19 to i8*
  %21 = getelementptr inbounds %"class.std::__1::basic_string.1", %"class.std::__1::basic_string.1"* %1, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %22 = load i64, i64* %21, align 8
  %23 = icmp ult i64 %22, 11
  br i1 %23, label %24, label %175

24:                                               ; preds = %17
  %25 = bitcast %"class.std::__1::basic_string.1"* %0 to i16*
  %26 = trunc i64 %22 to i8
  store i8 %26, i8* %7, align 1
  %27 = icmp eq i64 %22, 0
  br i1 %27, label %173, label %28

28:                                               ; preds = %24
  %29 = icmp ult i64 %22, 16
  br i1 %29, label %120, label %30

30:                                               ; preds = %28
  %31 = shl i64 %22, 1
  %32 = getelementptr i8, i8* %3, i64 %31
  %33 = getelementptr i16, i16* %19, i64 %22
  %34 = bitcast i16* %33 to %"class.std::__1::basic_string.1"*
  %35 = icmp ugt %"class.std::__1::basic_string.1"* %34, %0
  %36 = icmp ugt i8* %32, %20
  %37 = and i1 %35, %36
  br i1 %37, label %120, label %38

38:                                               ; preds = %30
  %39 = and i64 %22, -16
  %40 = sub i64 %22, %39
  %41 = getelementptr i16, i16* %19, i64 %39
  %42 = getelementptr i16, i16* %25, i64 %39
  %43 = add i64 %39, -16
  %44 = lshr exact i64 %43, 4
  %45 = add nuw nsw i64 %44, 1
  %46 = and i64 %45, 3
  %47 = icmp ult i64 %43, 48
  br i1 %47, label %99, label %48

48:                                               ; preds = %38
  %49 = sub nsw i64 %45, %46
  br label %50

50:                                               ; preds = %50, %48
  %51 = phi i64 [ 0, %48 ], [ %96, %50 ]
  %52 = phi i64 [ %49, %48 ], [ %97, %50 ]
  %53 = getelementptr i16, i16* %19, i64 %51
  %54 = getelementptr i16, i16* %25, i64 %51
  %55 = bitcast i16* %53 to <8 x i16>*
  %56 = load <8 x i16>, <8 x i16>* %55, align 2, !alias.scope !88
  %57 = getelementptr i16, i16* %53, i64 8
  %58 = bitcast i16* %57 to <8 x i16>*
  %59 = load <8 x i16>, <8 x i16>* %58, align 2, !alias.scope !88
  %60 = bitcast i16* %54 to <8 x i16>*
  store <8 x i16> %56, <8 x i16>* %60, align 2, !alias.scope !91, !noalias !88
  %61 = getelementptr i16, i16* %54, i64 8
  %62 = bitcast i16* %61 to <8 x i16>*
  store <8 x i16> %59, <8 x i16>* %62, align 2, !alias.scope !91, !noalias !88
  %63 = or i64 %51, 16
  %64 = getelementptr i16, i16* %19, i64 %63
  %65 = getelementptr i16, i16* %25, i64 %63
  %66 = bitcast i16* %64 to <8 x i16>*
  %67 = load <8 x i16>, <8 x i16>* %66, align 2, !alias.scope !88
  %68 = getelementptr i16, i16* %64, i64 8
  %69 = bitcast i16* %68 to <8 x i16>*
  %70 = load <8 x i16>, <8 x i16>* %69, align 2, !alias.scope !88
  %71 = bitcast i16* %65 to <8 x i16>*
  store <8 x i16> %67, <8 x i16>* %71, align 2, !alias.scope !91, !noalias !88
  %72 = getelementptr i16, i16* %65, i64 8
  %73 = bitcast i16* %72 to <8 x i16>*
  store <8 x i16> %70, <8 x i16>* %73, align 2, !alias.scope !91, !noalias !88
  %74 = or i64 %51, 32
  %75 = getelementptr i16, i16* %19, i64 %74
  %76 = getelementptr i16, i16* %25, i64 %74
  %77 = bitcast i16* %75 to <8 x i16>*
  %78 = load <8 x i16>, <8 x i16>* %77, align 2, !alias.scope !88
  %79 = getelementptr i16, i16* %75, i64 8
  %80 = bitcast i16* %79 to <8 x i16>*
  %81 = load <8 x i16>, <8 x i16>* %80, align 2, !alias.scope !88
  %82 = bitcast i16* %76 to <8 x i16>*
  store <8 x i16> %78, <8 x i16>* %82, align 2, !alias.scope !91, !noalias !88
  %83 = getelementptr i16, i16* %76, i64 8
  %84 = bitcast i16* %83 to <8 x i16>*
  store <8 x i16> %81, <8 x i16>* %84, align 2, !alias.scope !91, !noalias !88
  %85 = or i64 %51, 48
  %86 = getelementptr i16, i16* %19, i64 %85
  %87 = getelementptr i16, i16* %25, i64 %85
  %88 = bitcast i16* %86 to <8 x i16>*
  %89 = load <8 x i16>, <8 x i16>* %88, align 2, !alias.scope !88
  %90 = getelementptr i16, i16* %86, i64 8
  %91 = bitcast i16* %90 to <8 x i16>*
  %92 = load <8 x i16>, <8 x i16>* %91, align 2, !alias.scope !88
  %93 = bitcast i16* %87 to <8 x i16>*
  store <8 x i16> %89, <8 x i16>* %93, align 2, !alias.scope !91, !noalias !88
  %94 = getelementptr i16, i16* %87, i64 8
  %95 = bitcast i16* %94 to <8 x i16>*
  store <8 x i16> %92, <8 x i16>* %95, align 2, !alias.scope !91, !noalias !88
  %96 = add i64 %51, 64
  %97 = add i64 %52, -4
  %98 = icmp eq i64 %97, 0
  br i1 %98, label %99, label %50, !llvm.loop !93

99:                                               ; preds = %50, %38
  %100 = phi i64 [ 0, %38 ], [ %96, %50 ]
  %101 = icmp eq i64 %46, 0
  br i1 %101, label %118, label %102

102:                                              ; preds = %99, %102
  %103 = phi i64 [ %115, %102 ], [ %100, %99 ]
  %104 = phi i64 [ %116, %102 ], [ %46, %99 ]
  %105 = getelementptr i16, i16* %19, i64 %103
  %106 = getelementptr i16, i16* %25, i64 %103
  %107 = bitcast i16* %105 to <8 x i16>*
  %108 = load <8 x i16>, <8 x i16>* %107, align 2, !alias.scope !88
  %109 = getelementptr i16, i16* %105, i64 8
  %110 = bitcast i16* %109 to <8 x i16>*
  %111 = load <8 x i16>, <8 x i16>* %110, align 2, !alias.scope !88
  %112 = bitcast i16* %106 to <8 x i16>*
  store <8 x i16> %108, <8 x i16>* %112, align 2, !alias.scope !91, !noalias !88
  %113 = getelementptr i16, i16* %106, i64 8
  %114 = bitcast i16* %113 to <8 x i16>*
  store <8 x i16> %111, <8 x i16>* %114, align 2, !alias.scope !91, !noalias !88
  %115 = add i64 %103, 16
  %116 = add i64 %104, -1
  %117 = icmp eq i64 %116, 0
  br i1 %117, label %118, label %102, !llvm.loop !94

118:                                              ; preds = %102, %99
  %119 = icmp eq i64 %22, %39
  br i1 %119, label %173, label %120

120:                                              ; preds = %118, %30, %28
  %121 = phi i64 [ %22, %30 ], [ %22, %28 ], [ %40, %118 ]
  %122 = phi i16* [ %19, %30 ], [ %19, %28 ], [ %41, %118 ]
  %123 = phi i16* [ %25, %30 ], [ %25, %28 ], [ %42, %118 ]
  %124 = add i64 %121, -1
  %125 = and i64 %121, 7
  %126 = icmp eq i64 %125, 0
  br i1 %126, label %138, label %127

127:                                              ; preds = %120, %127
  %128 = phi i64 [ %133, %127 ], [ %121, %120 ]
  %129 = phi i16* [ %135, %127 ], [ %122, %120 ]
  %130 = phi i16* [ %134, %127 ], [ %123, %120 ]
  %131 = phi i64 [ %136, %127 ], [ %125, %120 ]
  %132 = load i16, i16* %129, align 2
  store i16 %132, i16* %130, align 2
  %133 = add i64 %128, -1
  %134 = getelementptr inbounds i16, i16* %130, i64 1
  %135 = getelementptr inbounds i16, i16* %129, i64 1
  %136 = add i64 %131, -1
  %137 = icmp eq i64 %136, 0
  br i1 %137, label %138, label %127, !llvm.loop !95

138:                                              ; preds = %127, %120
  %139 = phi i64 [ %121, %120 ], [ %133, %127 ]
  %140 = phi i16* [ %122, %120 ], [ %135, %127 ]
  %141 = phi i16* [ %123, %120 ], [ %134, %127 ]
  %142 = icmp ult i64 %124, 7
  br i1 %142, label %173, label %143

143:                                              ; preds = %138, %143
  %144 = phi i64 [ %169, %143 ], [ %139, %138 ]
  %145 = phi i16* [ %171, %143 ], [ %140, %138 ]
  %146 = phi i16* [ %170, %143 ], [ %141, %138 ]
  %147 = load i16, i16* %145, align 2
  store i16 %147, i16* %146, align 2
  %148 = getelementptr inbounds i16, i16* %146, i64 1
  %149 = getelementptr inbounds i16, i16* %145, i64 1
  %150 = load i16, i16* %149, align 2
  store i16 %150, i16* %148, align 2
  %151 = getelementptr inbounds i16, i16* %146, i64 2
  %152 = getelementptr inbounds i16, i16* %145, i64 2
  %153 = load i16, i16* %152, align 2
  store i16 %153, i16* %151, align 2
  %154 = getelementptr inbounds i16, i16* %146, i64 3
  %155 = getelementptr inbounds i16, i16* %145, i64 3
  %156 = load i16, i16* %155, align 2
  store i16 %156, i16* %154, align 2
  %157 = getelementptr inbounds i16, i16* %146, i64 4
  %158 = getelementptr inbounds i16, i16* %145, i64 4
  %159 = load i16, i16* %158, align 2
  store i16 %159, i16* %157, align 2
  %160 = getelementptr inbounds i16, i16* %146, i64 5
  %161 = getelementptr inbounds i16, i16* %145, i64 5
  %162 = load i16, i16* %161, align 2
  store i16 %162, i16* %160, align 2
  %163 = getelementptr inbounds i16, i16* %146, i64 6
  %164 = getelementptr inbounds i16, i16* %145, i64 6
  %165 = load i16, i16* %164, align 2
  store i16 %165, i16* %163, align 2
  %166 = getelementptr inbounds i16, i16* %146, i64 7
  %167 = getelementptr inbounds i16, i16* %145, i64 7
  %168 = load i16, i16* %167, align 2
  store i16 %168, i16* %166, align 2
  %169 = add i64 %144, -8
  %170 = getelementptr inbounds i16, i16* %146, i64 8
  %171 = getelementptr inbounds i16, i16* %145, i64 8
  %172 = icmp eq i64 %169, 0
  br i1 %172, label %173, label %143, !llvm.loop !96

173:                                              ; preds = %138, %143, %118, %24
  %174 = getelementptr inbounds i16, i16* %25, i64 %22
  store i16 0, i16* %174, align 2
  br label %510

175:                                              ; preds = %17
  %176 = add i64 %22, -10
  %177 = icmp ugt i64 %176, 9223372036854775780
  br i1 %177, label %178, label %180

178:                                              ; preds = %175
  %179 = bitcast %"class.std::__1::basic_string.1"* %0 to %"class.std::__1::__basic_string_common"*
  tail call void @_ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__basic_string_common"* %179) #11
  unreachable

180:                                              ; preds = %175
  %181 = icmp ugt i64 %22, 20
  %182 = select i1 %181, i64 %22, i64 20
  %183 = add nuw nsw i64 %182, 8
  %184 = and i64 %183, -8
  %185 = icmp slt i64 %184, 0
  br i1 %185, label %186, label %187

186:                                              ; preds = %180
  tail call void @abort() #11
  unreachable

187:                                              ; preds = %180
  %188 = shl i64 %184, 1
  %189 = tail call i8* @_Znwm(i64 %188) #12
  %190 = bitcast i8* %189 to i16*
  %191 = icmp ult i64 %22, 16
  br i1 %191, label %282, label %192

192:                                              ; preds = %187
  %193 = shl i64 %22, 1
  %194 = getelementptr i8, i8* %189, i64 %193
  %195 = getelementptr i16, i16* %19, i64 %22
  %196 = bitcast i16* %195 to i8*
  %197 = icmp ult i8* %189, %196
  %198 = icmp ugt i8* %194, %20
  %199 = and i1 %197, %198
  br i1 %199, label %282, label %200

200:                                              ; preds = %192
  %201 = and i64 %22, -16
  %202 = sub i64 %22, %201
  %203 = getelementptr i16, i16* %19, i64 %201
  %204 = getelementptr i16, i16* %190, i64 %201
  %205 = add i64 %201, -16
  %206 = lshr exact i64 %205, 4
  %207 = add nuw nsw i64 %206, 1
  %208 = and i64 %207, 3
  %209 = icmp ult i64 %205, 48
  br i1 %209, label %261, label %210

210:                                              ; preds = %200
  %211 = sub nsw i64 %207, %208
  br label %212

212:                                              ; preds = %212, %210
  %213 = phi i64 [ 0, %210 ], [ %258, %212 ]
  %214 = phi i64 [ %211, %210 ], [ %259, %212 ]
  %215 = getelementptr i16, i16* %19, i64 %213
  %216 = getelementptr i16, i16* %190, i64 %213
  %217 = bitcast i16* %215 to <8 x i16>*
  %218 = load <8 x i16>, <8 x i16>* %217, align 2, !alias.scope !97
  %219 = getelementptr i16, i16* %215, i64 8
  %220 = bitcast i16* %219 to <8 x i16>*
  %221 = load <8 x i16>, <8 x i16>* %220, align 2, !alias.scope !97
  %222 = bitcast i16* %216 to <8 x i16>*
  store <8 x i16> %218, <8 x i16>* %222, align 2, !alias.scope !100, !noalias !97
  %223 = getelementptr i16, i16* %216, i64 8
  %224 = bitcast i16* %223 to <8 x i16>*
  store <8 x i16> %221, <8 x i16>* %224, align 2, !alias.scope !100, !noalias !97
  %225 = or i64 %213, 16
  %226 = getelementptr i16, i16* %19, i64 %225
  %227 = getelementptr i16, i16* %190, i64 %225
  %228 = bitcast i16* %226 to <8 x i16>*
  %229 = load <8 x i16>, <8 x i16>* %228, align 2, !alias.scope !97
  %230 = getelementptr i16, i16* %226, i64 8
  %231 = bitcast i16* %230 to <8 x i16>*
  %232 = load <8 x i16>, <8 x i16>* %231, align 2, !alias.scope !97
  %233 = bitcast i16* %227 to <8 x i16>*
  store <8 x i16> %229, <8 x i16>* %233, align 2, !alias.scope !100, !noalias !97
  %234 = getelementptr i16, i16* %227, i64 8
  %235 = bitcast i16* %234 to <8 x i16>*
  store <8 x i16> %232, <8 x i16>* %235, align 2, !alias.scope !100, !noalias !97
  %236 = or i64 %213, 32
  %237 = getelementptr i16, i16* %19, i64 %236
  %238 = getelementptr i16, i16* %190, i64 %236
  %239 = bitcast i16* %237 to <8 x i16>*
  %240 = load <8 x i16>, <8 x i16>* %239, align 2, !alias.scope !97
  %241 = getelementptr i16, i16* %237, i64 8
  %242 = bitcast i16* %241 to <8 x i16>*
  %243 = load <8 x i16>, <8 x i16>* %242, align 2, !alias.scope !97
  %244 = bitcast i16* %238 to <8 x i16>*
  store <8 x i16> %240, <8 x i16>* %244, align 2, !alias.scope !100, !noalias !97
  %245 = getelementptr i16, i16* %238, i64 8
  %246 = bitcast i16* %245 to <8 x i16>*
  store <8 x i16> %243, <8 x i16>* %246, align 2, !alias.scope !100, !noalias !97
  %247 = or i64 %213, 48
  %248 = getelementptr i16, i16* %19, i64 %247
  %249 = getelementptr i16, i16* %190, i64 %247
  %250 = bitcast i16* %248 to <8 x i16>*
  %251 = load <8 x i16>, <8 x i16>* %250, align 2, !alias.scope !97
  %252 = getelementptr i16, i16* %248, i64 8
  %253 = bitcast i16* %252 to <8 x i16>*
  %254 = load <8 x i16>, <8 x i16>* %253, align 2, !alias.scope !97
  %255 = bitcast i16* %249 to <8 x i16>*
  store <8 x i16> %251, <8 x i16>* %255, align 2, !alias.scope !100, !noalias !97
  %256 = getelementptr i16, i16* %249, i64 8
  %257 = bitcast i16* %256 to <8 x i16>*
  store <8 x i16> %254, <8 x i16>* %257, align 2, !alias.scope !100, !noalias !97
  %258 = add i64 %213, 64
  %259 = add i64 %214, -4
  %260 = icmp eq i64 %259, 0
  br i1 %260, label %261, label %212, !llvm.loop !102

261:                                              ; preds = %212, %200
  %262 = phi i64 [ 0, %200 ], [ %258, %212 ]
  %263 = icmp eq i64 %208, 0
  br i1 %263, label %280, label %264

264:                                              ; preds = %261, %264
  %265 = phi i64 [ %277, %264 ], [ %262, %261 ]
  %266 = phi i64 [ %278, %264 ], [ %208, %261 ]
  %267 = getelementptr i16, i16* %19, i64 %265
  %268 = getelementptr i16, i16* %190, i64 %265
  %269 = bitcast i16* %267 to <8 x i16>*
  %270 = load <8 x i16>, <8 x i16>* %269, align 2, !alias.scope !97
  %271 = getelementptr i16, i16* %267, i64 8
  %272 = bitcast i16* %271 to <8 x i16>*
  %273 = load <8 x i16>, <8 x i16>* %272, align 2, !alias.scope !97
  %274 = bitcast i16* %268 to <8 x i16>*
  store <8 x i16> %270, <8 x i16>* %274, align 2, !alias.scope !100, !noalias !97
  %275 = getelementptr i16, i16* %268, i64 8
  %276 = bitcast i16* %275 to <8 x i16>*
  store <8 x i16> %273, <8 x i16>* %276, align 2, !alias.scope !100, !noalias !97
  %277 = add i64 %265, 16
  %278 = add i64 %266, -1
  %279 = icmp eq i64 %278, 0
  br i1 %279, label %280, label %264, !llvm.loop !103

280:                                              ; preds = %264, %261
  %281 = icmp eq i64 %22, %201
  br i1 %281, label %335, label %282

282:                                              ; preds = %280, %192, %187
  %283 = phi i64 [ %22, %192 ], [ %22, %187 ], [ %202, %280 ]
  %284 = phi i16* [ %19, %192 ], [ %19, %187 ], [ %203, %280 ]
  %285 = phi i16* [ %190, %192 ], [ %190, %187 ], [ %204, %280 ]
  %286 = add i64 %283, -1
  %287 = and i64 %283, 7
  %288 = icmp eq i64 %287, 0
  br i1 %288, label %300, label %289

289:                                              ; preds = %282, %289
  %290 = phi i64 [ %295, %289 ], [ %283, %282 ]
  %291 = phi i16* [ %297, %289 ], [ %284, %282 ]
  %292 = phi i16* [ %296, %289 ], [ %285, %282 ]
  %293 = phi i64 [ %298, %289 ], [ %287, %282 ]
  %294 = load i16, i16* %291, align 2
  store i16 %294, i16* %292, align 2
  %295 = add i64 %290, -1
  %296 = getelementptr inbounds i16, i16* %292, i64 1
  %297 = getelementptr inbounds i16, i16* %291, i64 1
  %298 = add i64 %293, -1
  %299 = icmp eq i64 %298, 0
  br i1 %299, label %300, label %289, !llvm.loop !104

300:                                              ; preds = %289, %282
  %301 = phi i64 [ %283, %282 ], [ %295, %289 ]
  %302 = phi i16* [ %284, %282 ], [ %297, %289 ]
  %303 = phi i16* [ %285, %282 ], [ %296, %289 ]
  %304 = icmp ult i64 %286, 7
  br i1 %304, label %335, label %305

305:                                              ; preds = %300, %305
  %306 = phi i64 [ %331, %305 ], [ %301, %300 ]
  %307 = phi i16* [ %333, %305 ], [ %302, %300 ]
  %308 = phi i16* [ %332, %305 ], [ %303, %300 ]
  %309 = load i16, i16* %307, align 2
  store i16 %309, i16* %308, align 2
  %310 = getelementptr inbounds i16, i16* %308, i64 1
  %311 = getelementptr inbounds i16, i16* %307, i64 1
  %312 = load i16, i16* %311, align 2
  store i16 %312, i16* %310, align 2
  %313 = getelementptr inbounds i16, i16* %308, i64 2
  %314 = getelementptr inbounds i16, i16* %307, i64 2
  %315 = load i16, i16* %314, align 2
  store i16 %315, i16* %313, align 2
  %316 = getelementptr inbounds i16, i16* %308, i64 3
  %317 = getelementptr inbounds i16, i16* %307, i64 3
  %318 = load i16, i16* %317, align 2
  store i16 %318, i16* %316, align 2
  %319 = getelementptr inbounds i16, i16* %308, i64 4
  %320 = getelementptr inbounds i16, i16* %307, i64 4
  %321 = load i16, i16* %320, align 2
  store i16 %321, i16* %319, align 2
  %322 = getelementptr inbounds i16, i16* %308, i64 5
  %323 = getelementptr inbounds i16, i16* %307, i64 5
  %324 = load i16, i16* %323, align 2
  store i16 %324, i16* %322, align 2
  %325 = getelementptr inbounds i16, i16* %308, i64 6
  %326 = getelementptr inbounds i16, i16* %307, i64 6
  %327 = load i16, i16* %326, align 2
  store i16 %327, i16* %325, align 2
  %328 = getelementptr inbounds i16, i16* %308, i64 7
  %329 = getelementptr inbounds i16, i16* %307, i64 7
  %330 = load i16, i16* %329, align 2
  store i16 %330, i16* %328, align 2
  %331 = add i64 %306, -8
  %332 = getelementptr inbounds i16, i16* %308, i64 8
  %333 = getelementptr inbounds i16, i16* %307, i64 8
  %334 = icmp eq i64 %331, 0
  br i1 %334, label %335, label %305, !llvm.loop !105

335:                                              ; preds = %300, %305, %280
  %336 = bitcast %"class.std::__1::basic_string.1"* %0 to i8**
  store i8* %189, i8** %336, align 8
  %337 = or i64 %184, -9223372036854775808
  %338 = getelementptr inbounds %"class.std::__1::basic_string.1", %"class.std::__1::basic_string.1"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 2
  store i64 %337, i64* %338, align 8
  %339 = getelementptr inbounds %"class.std::__1::basic_string.1", %"class.std::__1::basic_string.1"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  store i64 %22, i64* %339, align 8
  %340 = getelementptr inbounds i16, i16* %190, i64 %22
  store i16 0, i16* %340, align 2
  br label %510

341:                                              ; preds = %5
  %342 = getelementptr inbounds %"class.std::__1::basic_string.1", %"class.std::__1::basic_string.1"* %1, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %343 = load i16*, i16** %342, align 8
  %344 = getelementptr inbounds %"class.std::__1::basic_string.1", %"class.std::__1::basic_string.1"* %1, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %345 = load i64, i64* %344, align 8
  %346 = bitcast %"class.std::__1::basic_string.1"* %1 to i16*
  %347 = zext i8 %12 to i64
  %348 = select i1 %13, i16* %343, i16* %346
  %349 = select i1 %13, i64 %345, i64 %347
  %350 = getelementptr inbounds %"class.std::__1::basic_string.1", %"class.std::__1::basic_string.1"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 2
  %351 = load i64, i64* %350, align 8
  %352 = and i64 %351, 9223372036854775807
  %353 = icmp ugt i64 %352, %349
  br i1 %353, label %354, label %504

354:                                              ; preds = %341
  %355 = getelementptr inbounds %"class.std::__1::basic_string.1", %"class.std::__1::basic_string.1"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %356 = load i16*, i16** %355, align 8
  %357 = getelementptr inbounds %"class.std::__1::basic_string.1", %"class.std::__1::basic_string.1"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  store i64 %349, i64* %357, align 8
  %358 = icmp eq i64 %349, 0
  br i1 %358, label %502, label %359

359:                                              ; preds = %354
  %360 = icmp ult i64 %349, 16
  br i1 %360, label %449, label %361

361:                                              ; preds = %359
  %362 = getelementptr i16, i16* %356, i64 %349
  %363 = getelementptr i16, i16* %348, i64 %349
  %364 = icmp ult i16* %356, %363
  %365 = icmp ult i16* %348, %362
  %366 = and i1 %364, %365
  br i1 %366, label %449, label %367

367:                                              ; preds = %361
  %368 = and i64 %349, -16
  %369 = sub i64 %349, %368
  %370 = getelementptr i16, i16* %348, i64 %368
  %371 = getelementptr i16, i16* %356, i64 %368
  %372 = add i64 %368, -16
  %373 = lshr exact i64 %372, 4
  %374 = add nuw nsw i64 %373, 1
  %375 = and i64 %374, 3
  %376 = icmp ult i64 %372, 48
  br i1 %376, label %428, label %377

377:                                              ; preds = %367
  %378 = sub nsw i64 %374, %375
  br label %379

379:                                              ; preds = %379, %377
  %380 = phi i64 [ 0, %377 ], [ %425, %379 ]
  %381 = phi i64 [ %378, %377 ], [ %426, %379 ]
  %382 = getelementptr i16, i16* %348, i64 %380
  %383 = getelementptr i16, i16* %356, i64 %380
  %384 = bitcast i16* %382 to <8 x i16>*
  %385 = load <8 x i16>, <8 x i16>* %384, align 2, !alias.scope !106
  %386 = getelementptr i16, i16* %382, i64 8
  %387 = bitcast i16* %386 to <8 x i16>*
  %388 = load <8 x i16>, <8 x i16>* %387, align 2, !alias.scope !106
  %389 = bitcast i16* %383 to <8 x i16>*
  store <8 x i16> %385, <8 x i16>* %389, align 2, !alias.scope !109, !noalias !106
  %390 = getelementptr i16, i16* %383, i64 8
  %391 = bitcast i16* %390 to <8 x i16>*
  store <8 x i16> %388, <8 x i16>* %391, align 2, !alias.scope !109, !noalias !106
  %392 = or i64 %380, 16
  %393 = getelementptr i16, i16* %348, i64 %392
  %394 = getelementptr i16, i16* %356, i64 %392
  %395 = bitcast i16* %393 to <8 x i16>*
  %396 = load <8 x i16>, <8 x i16>* %395, align 2, !alias.scope !106
  %397 = getelementptr i16, i16* %393, i64 8
  %398 = bitcast i16* %397 to <8 x i16>*
  %399 = load <8 x i16>, <8 x i16>* %398, align 2, !alias.scope !106
  %400 = bitcast i16* %394 to <8 x i16>*
  store <8 x i16> %396, <8 x i16>* %400, align 2, !alias.scope !109, !noalias !106
  %401 = getelementptr i16, i16* %394, i64 8
  %402 = bitcast i16* %401 to <8 x i16>*
  store <8 x i16> %399, <8 x i16>* %402, align 2, !alias.scope !109, !noalias !106
  %403 = or i64 %380, 32
  %404 = getelementptr i16, i16* %348, i64 %403
  %405 = getelementptr i16, i16* %356, i64 %403
  %406 = bitcast i16* %404 to <8 x i16>*
  %407 = load <8 x i16>, <8 x i16>* %406, align 2, !alias.scope !106
  %408 = getelementptr i16, i16* %404, i64 8
  %409 = bitcast i16* %408 to <8 x i16>*
  %410 = load <8 x i16>, <8 x i16>* %409, align 2, !alias.scope !106
  %411 = bitcast i16* %405 to <8 x i16>*
  store <8 x i16> %407, <8 x i16>* %411, align 2, !alias.scope !109, !noalias !106
  %412 = getelementptr i16, i16* %405, i64 8
  %413 = bitcast i16* %412 to <8 x i16>*
  store <8 x i16> %410, <8 x i16>* %413, align 2, !alias.scope !109, !noalias !106
  %414 = or i64 %380, 48
  %415 = getelementptr i16, i16* %348, i64 %414
  %416 = getelementptr i16, i16* %356, i64 %414
  %417 = bitcast i16* %415 to <8 x i16>*
  %418 = load <8 x i16>, <8 x i16>* %417, align 2, !alias.scope !106
  %419 = getelementptr i16, i16* %415, i64 8
  %420 = bitcast i16* %419 to <8 x i16>*
  %421 = load <8 x i16>, <8 x i16>* %420, align 2, !alias.scope !106
  %422 = bitcast i16* %416 to <8 x i16>*
  store <8 x i16> %418, <8 x i16>* %422, align 2, !alias.scope !109, !noalias !106
  %423 = getelementptr i16, i16* %416, i64 8
  %424 = bitcast i16* %423 to <8 x i16>*
  store <8 x i16> %421, <8 x i16>* %424, align 2, !alias.scope !109, !noalias !106
  %425 = add i64 %380, 64
  %426 = add i64 %381, -4
  %427 = icmp eq i64 %426, 0
  br i1 %427, label %428, label %379, !llvm.loop !111

428:                                              ; preds = %379, %367
  %429 = phi i64 [ 0, %367 ], [ %425, %379 ]
  %430 = icmp eq i64 %375, 0
  br i1 %430, label %447, label %431

431:                                              ; preds = %428, %431
  %432 = phi i64 [ %444, %431 ], [ %429, %428 ]
  %433 = phi i64 [ %445, %431 ], [ %375, %428 ]
  %434 = getelementptr i16, i16* %348, i64 %432
  %435 = getelementptr i16, i16* %356, i64 %432
  %436 = bitcast i16* %434 to <8 x i16>*
  %437 = load <8 x i16>, <8 x i16>* %436, align 2, !alias.scope !106
  %438 = getelementptr i16, i16* %434, i64 8
  %439 = bitcast i16* %438 to <8 x i16>*
  %440 = load <8 x i16>, <8 x i16>* %439, align 2, !alias.scope !106
  %441 = bitcast i16* %435 to <8 x i16>*
  store <8 x i16> %437, <8 x i16>* %441, align 2, !alias.scope !109, !noalias !106
  %442 = getelementptr i16, i16* %435, i64 8
  %443 = bitcast i16* %442 to <8 x i16>*
  store <8 x i16> %440, <8 x i16>* %443, align 2, !alias.scope !109, !noalias !106
  %444 = add i64 %432, 16
  %445 = add i64 %433, -1
  %446 = icmp eq i64 %445, 0
  br i1 %446, label %447, label %431, !llvm.loop !112

447:                                              ; preds = %431, %428
  %448 = icmp eq i64 %349, %368
  br i1 %448, label %502, label %449

449:                                              ; preds = %447, %361, %359
  %450 = phi i64 [ %349, %361 ], [ %349, %359 ], [ %369, %447 ]
  %451 = phi i16* [ %348, %361 ], [ %348, %359 ], [ %370, %447 ]
  %452 = phi i16* [ %356, %361 ], [ %356, %359 ], [ %371, %447 ]
  %453 = add i64 %450, -1
  %454 = and i64 %450, 7
  %455 = icmp eq i64 %454, 0
  br i1 %455, label %467, label %456

456:                                              ; preds = %449, %456
  %457 = phi i64 [ %462, %456 ], [ %450, %449 ]
  %458 = phi i16* [ %464, %456 ], [ %451, %449 ]
  %459 = phi i16* [ %463, %456 ], [ %452, %449 ]
  %460 = phi i64 [ %465, %456 ], [ %454, %449 ]
  %461 = load i16, i16* %458, align 2
  store i16 %461, i16* %459, align 2
  %462 = add i64 %457, -1
  %463 = getelementptr inbounds i16, i16* %459, i64 1
  %464 = getelementptr inbounds i16, i16* %458, i64 1
  %465 = add i64 %460, -1
  %466 = icmp eq i64 %465, 0
  br i1 %466, label %467, label %456, !llvm.loop !113

467:                                              ; preds = %456, %449
  %468 = phi i64 [ %450, %449 ], [ %462, %456 ]
  %469 = phi i16* [ %451, %449 ], [ %464, %456 ]
  %470 = phi i16* [ %452, %449 ], [ %463, %456 ]
  %471 = icmp ult i64 %453, 7
  br i1 %471, label %502, label %472

472:                                              ; preds = %467, %472
  %473 = phi i64 [ %498, %472 ], [ %468, %467 ]
  %474 = phi i16* [ %500, %472 ], [ %469, %467 ]
  %475 = phi i16* [ %499, %472 ], [ %470, %467 ]
  %476 = load i16, i16* %474, align 2
  store i16 %476, i16* %475, align 2
  %477 = getelementptr inbounds i16, i16* %475, i64 1
  %478 = getelementptr inbounds i16, i16* %474, i64 1
  %479 = load i16, i16* %478, align 2
  store i16 %479, i16* %477, align 2
  %480 = getelementptr inbounds i16, i16* %475, i64 2
  %481 = getelementptr inbounds i16, i16* %474, i64 2
  %482 = load i16, i16* %481, align 2
  store i16 %482, i16* %480, align 2
  %483 = getelementptr inbounds i16, i16* %475, i64 3
  %484 = getelementptr inbounds i16, i16* %474, i64 3
  %485 = load i16, i16* %484, align 2
  store i16 %485, i16* %483, align 2
  %486 = getelementptr inbounds i16, i16* %475, i64 4
  %487 = getelementptr inbounds i16, i16* %474, i64 4
  %488 = load i16, i16* %487, align 2
  store i16 %488, i16* %486, align 2
  %489 = getelementptr inbounds i16, i16* %475, i64 5
  %490 = getelementptr inbounds i16, i16* %474, i64 5
  %491 = load i16, i16* %490, align 2
  store i16 %491, i16* %489, align 2
  %492 = getelementptr inbounds i16, i16* %475, i64 6
  %493 = getelementptr inbounds i16, i16* %474, i64 6
  %494 = load i16, i16* %493, align 2
  store i16 %494, i16* %492, align 2
  %495 = getelementptr inbounds i16, i16* %475, i64 7
  %496 = getelementptr inbounds i16, i16* %474, i64 7
  %497 = load i16, i16* %496, align 2
  store i16 %497, i16* %495, align 2
  %498 = add i64 %473, -8
  %499 = getelementptr inbounds i16, i16* %475, i64 8
  %500 = getelementptr inbounds i16, i16* %474, i64 8
  %501 = icmp eq i64 %498, 0
  br i1 %501, label %502, label %472, !llvm.loop !114

502:                                              ; preds = %467, %472, %447, %354
  %503 = getelementptr inbounds i16, i16* %356, i64 %349
  store i16 0, i16* %503, align 2
  br label %510

504:                                              ; preds = %341
  %505 = getelementptr inbounds %"class.std::__1::basic_string.1", %"class.std::__1::basic_string.1"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %506 = load i64, i64* %505, align 8
  %507 = add nsw i64 %352, -1
  %508 = add i64 %349, 1
  %509 = sub i64 %508, %352
  tail call void @_ZNSt3__112basic_stringIDsNS_11char_traitsIDsEENS_9allocatorIDsEEE21__grow_by_and_replaceEmmmmmmPKDs(%"class.std::__1::basic_string.1"* %0, i64 %507, i64 %509, i64 %506, i64 0, i64 %506, i64 %349, i16* %348) #10
  br label %510

510:                                              ; preds = %504, %502, %335, %173, %15, %2
  ret %"class.std::__1::basic_string.1"* %0
}

declare void @_ZN9l10n_util15GetStringFUTF16EiRKNSt3__112basic_stringIDsNS0_11char_traitsIDsEENS0_9allocatorIDsEEEES8_(%"class.std::__1::basic_string.1"* sret, i32, %"class.std::__1::basic_string.1"* dereferenceable(24), %"class.std::__1::basic_string.1"* dereferenceable(24)) local_unnamed_addr #3

declare void @_ZN9l10n_util15GetStringFUTF16EiRKNSt3__112basic_stringIDsNS0_11char_traitsIDsEENS0_9allocatorIDsEEEE(%"class.std::__1::basic_string.1"* sret, i32, %"class.std::__1::basic_string.1"* dereferenceable(24)) local_unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN21AutocompleteMatchType20ToAccessibilityLabelERK17AutocompleteMatchRKNSt3__112basic_stringIDsNS3_11char_traitsIDsEENS3_9allocatorIDsEEEEmmSB_Pi(%"class.std::__1::basic_string.1"* noalias sret, %struct.AutocompleteMatch* dereferenceable(1600), %"class.std::__1::basic_string.1"* dereferenceable(24), i64, i64, %"class.std::__1::basic_string.1"* dereferenceable(24), i32*) local_unnamed_addr #0 align 2 {
  %8 = alloca %"class.std::__1::basic_string.1", align 8
  %9 = alloca %"class.std::__1::basic_string.1", align 8
  %10 = alloca %"class.std::__1::basic_string.1", align 8
  %11 = alloca %"class.std::__1::basic_string.1", align 8
  %12 = icmp eq i32* %6, null
  br i1 %12, label %14, label %13

13:                                               ; preds = %7
  store i32 0, i32* %6, align 4
  br label %14

14:                                               ; preds = %7, %13
  %15 = bitcast %"class.std::__1::basic_string.1"* %0 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %15, i8 -86, i64 24, i1 false)
  tail call void @_Z25GetAccessibilityBaseLabelRK17AutocompleteMatchRKNSt3__112basic_stringIDsNS2_11char_traitsIDsEENS2_9allocatorIDsEEEEPi(%"class.std::__1::basic_string.1"* sret %0, %struct.AutocompleteMatch* dereferenceable(1600) %1, %"class.std::__1::basic_string.1"* dereferenceable(24) %2, i32* %6)
  %16 = bitcast %"class.std::__1::basic_string.1"* %5 to %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"*
  %17 = getelementptr inbounds %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short", %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"* %16, i64 0, i32 1, i32 1
  %18 = load i8, i8* %17, align 1
  %19 = icmp slt i8 %18, 0
  %20 = getelementptr inbounds %"class.std::__1::basic_string.1", %"class.std::__1::basic_string.1"* %5, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %21 = load i64, i64* %20, align 8
  %22 = zext i8 %18 to i64
  %23 = select i1 %19, i64 %21, i64 %22
  %24 = icmp eq i64 %23, 0
  br i1 %24, label %36, label %25

25:                                               ; preds = %14
  %26 = bitcast %"class.std::__1::basic_string.1"* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %26) #10
  call void @_Z22AddAdditionalMessagingRKNSt3__112basic_stringIDsNS_11char_traitsIDsEENS_9allocatorIDsEEEES7_Pi(%"class.std::__1::basic_string.1"* nonnull sret %8, %"class.std::__1::basic_string.1"* dereferenceable(24) %5, %"class.std::__1::basic_string.1"* dereferenceable(24) %0, i32* %6)
  %27 = bitcast %"class.std::__1::basic_string.1"* %0 to %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"*
  %28 = getelementptr inbounds %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short", %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"* %27, i64 0, i32 1, i32 1
  %29 = load i8, i8* %28, align 1
  %30 = icmp slt i8 %29, 0
  br i1 %30, label %31, label %34

31:                                               ; preds = %25
  %32 = bitcast %"class.std::__1::basic_string.1"* %0 to i8**
  %33 = load i8*, i8** %32, align 8
  call void @_ZdlPv(i8* %33) #12
  br label %34

34:                                               ; preds = %31, %25
  %35 = bitcast %"class.std::__1::basic_string.1"* %0 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %35, i8* nonnull align 8 %26, i64 24, i1 false) #10
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %26) #10
  br label %36

36:                                               ; preds = %34, %14
  %37 = icmp eq i64 %4, 0
  %38 = load i64, i64* @_ZN17OmniboxPopupModel8kNoMatchE, align 8
  %39 = icmp eq i64 %38, %3
  %40 = or i1 %37, %39
  br i1 %40, label %74, label %41

41:                                               ; preds = %36
  %42 = bitcast %"class.std::__1::basic_string.1"* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %42) #10
  %43 = bitcast %"class.std::__1::basic_string.1"* %10 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %43) #10
  %44 = add i64 %3, 1
  call void @_ZN4base16NumberToString16Em(%"class.std::__1::basic_string.1"* nonnull sret %10, i64 %44) #10
  %45 = bitcast %"class.std::__1::basic_string.1"* %11 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %45) #10
  call void @_ZN4base16NumberToString16Em(%"class.std::__1::basic_string.1"* nonnull sret %11, i64 %4) #10
  call void @_ZN9l10n_util15GetStringFUTF16EiRKNSt3__112basic_stringIDsNS0_11char_traitsIDsEENS0_9allocatorIDsEEEES8_S8_(%"class.std::__1::basic_string.1"* nonnull sret %9, i32 19740, %"class.std::__1::basic_string.1"* dereferenceable(24) %0, %"class.std::__1::basic_string.1"* nonnull dereferenceable(24) %10, %"class.std::__1::basic_string.1"* nonnull dereferenceable(24) %11) #10
  %46 = bitcast %"class.std::__1::basic_string.1"* %0 to %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"*
  %47 = getelementptr inbounds %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short", %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"* %46, i64 0, i32 1, i32 1
  %48 = load i8, i8* %47, align 1
  %49 = icmp slt i8 %48, 0
  br i1 %49, label %50, label %53

50:                                               ; preds = %41
  %51 = bitcast %"class.std::__1::basic_string.1"* %0 to i8**
  %52 = load i8*, i8** %51, align 8
  call void @_ZdlPv(i8* %52) #12
  br label %53

53:                                               ; preds = %50, %41
  %54 = bitcast %"class.std::__1::basic_string.1"* %0 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %54, i8* nonnull align 8 %42, i64 24, i1 false) #10
  %55 = bitcast %"class.std::__1::basic_string.1"* %9 to %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"*
  %56 = getelementptr inbounds %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short", %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"* %55, i64 0, i32 1, i32 1
  store i8 0, i8* %56, align 1
  %57 = bitcast %"class.std::__1::basic_string.1"* %9 to i16*
  store i16 0, i16* %57, align 8
  %58 = bitcast %"class.std::__1::basic_string.1"* %11 to %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"*
  %59 = getelementptr inbounds %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short", %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"* %58, i64 0, i32 1, i32 1
  %60 = load i8, i8* %59, align 1
  %61 = icmp slt i8 %60, 0
  br i1 %61, label %62, label %65

62:                                               ; preds = %53
  %63 = bitcast %"class.std::__1::basic_string.1"* %11 to i8**
  %64 = load i8*, i8** %63, align 8
  call void @_ZdlPv(i8* %64) #12
  br label %65

65:                                               ; preds = %53, %62
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %45) #10
  %66 = bitcast %"class.std::__1::basic_string.1"* %10 to %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"*
  %67 = getelementptr inbounds %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short", %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"* %66, i64 0, i32 1, i32 1
  %68 = load i8, i8* %67, align 1
  %69 = icmp slt i8 %68, 0
  br i1 %69, label %70, label %73

70:                                               ; preds = %65
  %71 = bitcast %"class.std::__1::basic_string.1"* %10 to i8**
  %72 = load i8*, i8** %71, align 8
  call void @_ZdlPv(i8* %72) #12
  br label %73

73:                                               ; preds = %65, %70
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %43) #10
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %42) #10
  br label %74

74:                                               ; preds = %73, %36
  ret void
}

declare void @_ZN9l10n_util15GetStringFUTF16EiRKNSt3__112basic_stringIDsNS0_11char_traitsIDsEENS0_9allocatorIDsEEEES8_S8_(%"class.std::__1::basic_string.1"* sret, i32, %"class.std::__1::basic_string.1"* dereferenceable(24), %"class.std::__1::basic_string.1"* dereferenceable(24), %"class.std::__1::basic_string.1"* dereferenceable(24)) local_unnamed_addr #3

declare void @_ZN4base16NumberToString16Em(%"class.std::__1::basic_string.1"* sret, i64) local_unnamed_addr #3

; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(i8*) local_unnamed_addr #5

; Function Attrs: noreturn
declare void @_ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__basic_string_common"*) local_unnamed_addr #6

; Function Attrs: noreturn nounwind
declare void @abort() local_unnamed_addr #7

; Function Attrs: nobuiltin nofree
declare noalias nonnull i8* @_Znwm(i64) local_unnamed_addr #8

; Function Attrs: argmemonly nofree nounwind readonly
declare i64 @strlen(i8* nocapture) local_unnamed_addr #9

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__112basic_stringIDsNS_11char_traitsIDsEENS_9allocatorIDsEEE21__grow_by_and_replaceEmmmmmmPKDs(%"class.std::__1::basic_string.1"*, i64, i64, i64, i64, i64, i64, i16*) local_unnamed_addr #0 comdat align 2 {
  %9 = sub i64 9223372036854775790, %1
  %10 = icmp ult i64 %9, %2
  br i1 %10, label %11, label %13

11:                                               ; preds = %8
  %12 = bitcast %"class.std::__1::basic_string.1"* %0 to %"class.std::__1::__basic_string_common"*
  tail call void @_ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__basic_string_common"* %12) #11
  unreachable

13:                                               ; preds = %8
  %14 = bitcast %"class.std::__1::basic_string.1"* %0 to %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"*
  %15 = getelementptr inbounds %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short", %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"* %14, i64 0, i32 1, i32 1
  %16 = load i8, i8* %15, align 1
  %17 = icmp slt i8 %16, 0
  br i1 %17, label %18, label %21

18:                                               ; preds = %13
  %19 = getelementptr inbounds %"class.std::__1::basic_string.1", %"class.std::__1::basic_string.1"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %20 = load i16*, i16** %19, align 8
  br label %23

21:                                               ; preds = %13
  %22 = bitcast %"class.std::__1::basic_string.1"* %0 to i16*
  br label %23

23:                                               ; preds = %18, %21
  %24 = phi i16* [ %20, %18 ], [ %22, %21 ]
  %25 = bitcast i16* %24 to i8*
  %26 = icmp ult i64 %1, 4611686018427387879
  br i1 %26, label %27, label %38

27:                                               ; preds = %23
  %28 = add i64 %2, %1
  %29 = shl i64 %1, 1
  %30 = icmp ult i64 %28, %29
  %31 = select i1 %30, i64 %29, i64 %28
  %32 = icmp ult i64 %31, 11
  br i1 %32, label %38, label %33

33:                                               ; preds = %27
  %34 = add i64 %31, 8
  %35 = and i64 %34, -8
  %36 = icmp slt i64 %35, 0
  br i1 %36, label %37, label %38

37:                                               ; preds = %33
  tail call void @abort() #11
  unreachable

38:                                               ; preds = %23, %27, %33
  %39 = phi i64 [ %35, %33 ], [ 9223372036854775791, %23 ], [ 11, %27 ]
  %40 = shl i64 %39, 1
  %41 = tail call i8* @_Znwm(i64 %40) #12
  %42 = bitcast i8* %41 to i16*
  %43 = icmp eq i64 %4, 0
  br i1 %43, label %189, label %44

44:                                               ; preds = %38
  %45 = icmp ult i64 %4, 16
  br i1 %45, label %136, label %46

46:                                               ; preds = %44
  %47 = shl i64 %4, 1
  %48 = getelementptr i8, i8* %41, i64 %47
  %49 = getelementptr i16, i16* %24, i64 %4
  %50 = bitcast i16* %49 to i8*
  %51 = icmp ult i8* %41, %50
  %52 = icmp ugt i8* %48, %25
  %53 = and i1 %51, %52
  br i1 %53, label %136, label %54

54:                                               ; preds = %46
  %55 = and i64 %4, -16
  %56 = sub i64 %4, %55
  %57 = getelementptr i16, i16* %24, i64 %55
  %58 = getelementptr i16, i16* %42, i64 %55
  %59 = add i64 %55, -16
  %60 = lshr exact i64 %59, 4
  %61 = add nuw nsw i64 %60, 1
  %62 = and i64 %61, 3
  %63 = icmp ult i64 %59, 48
  br i1 %63, label %115, label %64

64:                                               ; preds = %54
  %65 = sub nsw i64 %61, %62
  br label %66

66:                                               ; preds = %66, %64
  %67 = phi i64 [ 0, %64 ], [ %112, %66 ]
  %68 = phi i64 [ %65, %64 ], [ %113, %66 ]
  %69 = getelementptr i16, i16* %24, i64 %67
  %70 = getelementptr i16, i16* %42, i64 %67
  %71 = bitcast i16* %69 to <8 x i16>*
  %72 = load <8 x i16>, <8 x i16>* %71, align 2, !alias.scope !115
  %73 = getelementptr i16, i16* %69, i64 8
  %74 = bitcast i16* %73 to <8 x i16>*
  %75 = load <8 x i16>, <8 x i16>* %74, align 2, !alias.scope !115
  %76 = bitcast i16* %70 to <8 x i16>*
  store <8 x i16> %72, <8 x i16>* %76, align 2, !alias.scope !118, !noalias !115
  %77 = getelementptr i16, i16* %70, i64 8
  %78 = bitcast i16* %77 to <8 x i16>*
  store <8 x i16> %75, <8 x i16>* %78, align 2, !alias.scope !118, !noalias !115
  %79 = or i64 %67, 16
  %80 = getelementptr i16, i16* %24, i64 %79
  %81 = getelementptr i16, i16* %42, i64 %79
  %82 = bitcast i16* %80 to <8 x i16>*
  %83 = load <8 x i16>, <8 x i16>* %82, align 2, !alias.scope !115
  %84 = getelementptr i16, i16* %80, i64 8
  %85 = bitcast i16* %84 to <8 x i16>*
  %86 = load <8 x i16>, <8 x i16>* %85, align 2, !alias.scope !115
  %87 = bitcast i16* %81 to <8 x i16>*
  store <8 x i16> %83, <8 x i16>* %87, align 2, !alias.scope !118, !noalias !115
  %88 = getelementptr i16, i16* %81, i64 8
  %89 = bitcast i16* %88 to <8 x i16>*
  store <8 x i16> %86, <8 x i16>* %89, align 2, !alias.scope !118, !noalias !115
  %90 = or i64 %67, 32
  %91 = getelementptr i16, i16* %24, i64 %90
  %92 = getelementptr i16, i16* %42, i64 %90
  %93 = bitcast i16* %91 to <8 x i16>*
  %94 = load <8 x i16>, <8 x i16>* %93, align 2, !alias.scope !115
  %95 = getelementptr i16, i16* %91, i64 8
  %96 = bitcast i16* %95 to <8 x i16>*
  %97 = load <8 x i16>, <8 x i16>* %96, align 2, !alias.scope !115
  %98 = bitcast i16* %92 to <8 x i16>*
  store <8 x i16> %94, <8 x i16>* %98, align 2, !alias.scope !118, !noalias !115
  %99 = getelementptr i16, i16* %92, i64 8
  %100 = bitcast i16* %99 to <8 x i16>*
  store <8 x i16> %97, <8 x i16>* %100, align 2, !alias.scope !118, !noalias !115
  %101 = or i64 %67, 48
  %102 = getelementptr i16, i16* %24, i64 %101
  %103 = getelementptr i16, i16* %42, i64 %101
  %104 = bitcast i16* %102 to <8 x i16>*
  %105 = load <8 x i16>, <8 x i16>* %104, align 2, !alias.scope !115
  %106 = getelementptr i16, i16* %102, i64 8
  %107 = bitcast i16* %106 to <8 x i16>*
  %108 = load <8 x i16>, <8 x i16>* %107, align 2, !alias.scope !115
  %109 = bitcast i16* %103 to <8 x i16>*
  store <8 x i16> %105, <8 x i16>* %109, align 2, !alias.scope !118, !noalias !115
  %110 = getelementptr i16, i16* %103, i64 8
  %111 = bitcast i16* %110 to <8 x i16>*
  store <8 x i16> %108, <8 x i16>* %111, align 2, !alias.scope !118, !noalias !115
  %112 = add i64 %67, 64
  %113 = add i64 %68, -4
  %114 = icmp eq i64 %113, 0
  br i1 %114, label %115, label %66, !llvm.loop !120

115:                                              ; preds = %66, %54
  %116 = phi i64 [ 0, %54 ], [ %112, %66 ]
  %117 = icmp eq i64 %62, 0
  br i1 %117, label %134, label %118

118:                                              ; preds = %115, %118
  %119 = phi i64 [ %131, %118 ], [ %116, %115 ]
  %120 = phi i64 [ %132, %118 ], [ %62, %115 ]
  %121 = getelementptr i16, i16* %24, i64 %119
  %122 = getelementptr i16, i16* %42, i64 %119
  %123 = bitcast i16* %121 to <8 x i16>*
  %124 = load <8 x i16>, <8 x i16>* %123, align 2, !alias.scope !115
  %125 = getelementptr i16, i16* %121, i64 8
  %126 = bitcast i16* %125 to <8 x i16>*
  %127 = load <8 x i16>, <8 x i16>* %126, align 2, !alias.scope !115
  %128 = bitcast i16* %122 to <8 x i16>*
  store <8 x i16> %124, <8 x i16>* %128, align 2, !alias.scope !118, !noalias !115
  %129 = getelementptr i16, i16* %122, i64 8
  %130 = bitcast i16* %129 to <8 x i16>*
  store <8 x i16> %127, <8 x i16>* %130, align 2, !alias.scope !118, !noalias !115
  %131 = add i64 %119, 16
  %132 = add i64 %120, -1
  %133 = icmp eq i64 %132, 0
  br i1 %133, label %134, label %118, !llvm.loop !121

134:                                              ; preds = %118, %115
  %135 = icmp eq i64 %55, %4
  br i1 %135, label %189, label %136

136:                                              ; preds = %134, %46, %44
  %137 = phi i64 [ %4, %46 ], [ %4, %44 ], [ %56, %134 ]
  %138 = phi i16* [ %24, %46 ], [ %24, %44 ], [ %57, %134 ]
  %139 = phi i16* [ %42, %46 ], [ %42, %44 ], [ %58, %134 ]
  %140 = add i64 %137, -1
  %141 = and i64 %137, 7
  %142 = icmp eq i64 %141, 0
  br i1 %142, label %154, label %143

143:                                              ; preds = %136, %143
  %144 = phi i64 [ %149, %143 ], [ %137, %136 ]
  %145 = phi i16* [ %151, %143 ], [ %138, %136 ]
  %146 = phi i16* [ %150, %143 ], [ %139, %136 ]
  %147 = phi i64 [ %152, %143 ], [ %141, %136 ]
  %148 = load i16, i16* %145, align 2
  store i16 %148, i16* %146, align 2
  %149 = add i64 %144, -1
  %150 = getelementptr inbounds i16, i16* %146, i64 1
  %151 = getelementptr inbounds i16, i16* %145, i64 1
  %152 = add i64 %147, -1
  %153 = icmp eq i64 %152, 0
  br i1 %153, label %154, label %143, !llvm.loop !122

154:                                              ; preds = %143, %136
  %155 = phi i64 [ %137, %136 ], [ %149, %143 ]
  %156 = phi i16* [ %138, %136 ], [ %151, %143 ]
  %157 = phi i16* [ %139, %136 ], [ %150, %143 ]
  %158 = icmp ult i64 %140, 7
  br i1 %158, label %189, label %159

159:                                              ; preds = %154, %159
  %160 = phi i64 [ %185, %159 ], [ %155, %154 ]
  %161 = phi i16* [ %187, %159 ], [ %156, %154 ]
  %162 = phi i16* [ %186, %159 ], [ %157, %154 ]
  %163 = load i16, i16* %161, align 2
  store i16 %163, i16* %162, align 2
  %164 = getelementptr inbounds i16, i16* %162, i64 1
  %165 = getelementptr inbounds i16, i16* %161, i64 1
  %166 = load i16, i16* %165, align 2
  store i16 %166, i16* %164, align 2
  %167 = getelementptr inbounds i16, i16* %162, i64 2
  %168 = getelementptr inbounds i16, i16* %161, i64 2
  %169 = load i16, i16* %168, align 2
  store i16 %169, i16* %167, align 2
  %170 = getelementptr inbounds i16, i16* %162, i64 3
  %171 = getelementptr inbounds i16, i16* %161, i64 3
  %172 = load i16, i16* %171, align 2
  store i16 %172, i16* %170, align 2
  %173 = getelementptr inbounds i16, i16* %162, i64 4
  %174 = getelementptr inbounds i16, i16* %161, i64 4
  %175 = load i16, i16* %174, align 2
  store i16 %175, i16* %173, align 2
  %176 = getelementptr inbounds i16, i16* %162, i64 5
  %177 = getelementptr inbounds i16, i16* %161, i64 5
  %178 = load i16, i16* %177, align 2
  store i16 %178, i16* %176, align 2
  %179 = getelementptr inbounds i16, i16* %162, i64 6
  %180 = getelementptr inbounds i16, i16* %161, i64 6
  %181 = load i16, i16* %180, align 2
  store i16 %181, i16* %179, align 2
  %182 = getelementptr inbounds i16, i16* %162, i64 7
  %183 = getelementptr inbounds i16, i16* %161, i64 7
  %184 = load i16, i16* %183, align 2
  store i16 %184, i16* %182, align 2
  %185 = add i64 %160, -8
  %186 = getelementptr inbounds i16, i16* %162, i64 8
  %187 = getelementptr inbounds i16, i16* %161, i64 8
  %188 = icmp eq i64 %185, 0
  br i1 %188, label %189, label %159, !llvm.loop !123

189:                                              ; preds = %154, %159, %134, %38
  %190 = icmp eq i64 %6, 0
  br i1 %190, label %289, label %191

191:                                              ; preds = %189
  %192 = getelementptr inbounds i16, i16* %42, i64 %4
  %193 = icmp ult i64 %6, 16
  br i1 %193, label %276, label %194

194:                                              ; preds = %191
  %195 = and i64 %6, -16
  %196 = sub i64 %6, %195
  %197 = getelementptr i16, i16* %7, i64 %195
  %198 = getelementptr i16, i16* %192, i64 %195
  %199 = add i64 %195, -16
  %200 = lshr exact i64 %199, 4
  %201 = add nuw nsw i64 %200, 1
  %202 = and i64 %201, 3
  %203 = icmp ult i64 %199, 48
  br i1 %203, label %255, label %204

204:                                              ; preds = %194
  %205 = sub nsw i64 %201, %202
  br label %206

206:                                              ; preds = %206, %204
  %207 = phi i64 [ 0, %204 ], [ %252, %206 ]
  %208 = phi i64 [ %205, %204 ], [ %253, %206 ]
  %209 = getelementptr i16, i16* %7, i64 %207
  %210 = getelementptr i16, i16* %192, i64 %207
  %211 = bitcast i16* %209 to <8 x i16>*
  %212 = load <8 x i16>, <8 x i16>* %211, align 2
  %213 = getelementptr i16, i16* %209, i64 8
  %214 = bitcast i16* %213 to <8 x i16>*
  %215 = load <8 x i16>, <8 x i16>* %214, align 2
  %216 = bitcast i16* %210 to <8 x i16>*
  store <8 x i16> %212, <8 x i16>* %216, align 2
  %217 = getelementptr i16, i16* %210, i64 8
  %218 = bitcast i16* %217 to <8 x i16>*
  store <8 x i16> %215, <8 x i16>* %218, align 2
  %219 = or i64 %207, 16
  %220 = getelementptr i16, i16* %7, i64 %219
  %221 = getelementptr i16, i16* %192, i64 %219
  %222 = bitcast i16* %220 to <8 x i16>*
  %223 = load <8 x i16>, <8 x i16>* %222, align 2
  %224 = getelementptr i16, i16* %220, i64 8
  %225 = bitcast i16* %224 to <8 x i16>*
  %226 = load <8 x i16>, <8 x i16>* %225, align 2
  %227 = bitcast i16* %221 to <8 x i16>*
  store <8 x i16> %223, <8 x i16>* %227, align 2
  %228 = getelementptr i16, i16* %221, i64 8
  %229 = bitcast i16* %228 to <8 x i16>*
  store <8 x i16> %226, <8 x i16>* %229, align 2
  %230 = or i64 %207, 32
  %231 = getelementptr i16, i16* %7, i64 %230
  %232 = getelementptr i16, i16* %192, i64 %230
  %233 = bitcast i16* %231 to <8 x i16>*
  %234 = load <8 x i16>, <8 x i16>* %233, align 2
  %235 = getelementptr i16, i16* %231, i64 8
  %236 = bitcast i16* %235 to <8 x i16>*
  %237 = load <8 x i16>, <8 x i16>* %236, align 2
  %238 = bitcast i16* %232 to <8 x i16>*
  store <8 x i16> %234, <8 x i16>* %238, align 2
  %239 = getelementptr i16, i16* %232, i64 8
  %240 = bitcast i16* %239 to <8 x i16>*
  store <8 x i16> %237, <8 x i16>* %240, align 2
  %241 = or i64 %207, 48
  %242 = getelementptr i16, i16* %7, i64 %241
  %243 = getelementptr i16, i16* %192, i64 %241
  %244 = bitcast i16* %242 to <8 x i16>*
  %245 = load <8 x i16>, <8 x i16>* %244, align 2
  %246 = getelementptr i16, i16* %242, i64 8
  %247 = bitcast i16* %246 to <8 x i16>*
  %248 = load <8 x i16>, <8 x i16>* %247, align 2
  %249 = bitcast i16* %243 to <8 x i16>*
  store <8 x i16> %245, <8 x i16>* %249, align 2
  %250 = getelementptr i16, i16* %243, i64 8
  %251 = bitcast i16* %250 to <8 x i16>*
  store <8 x i16> %248, <8 x i16>* %251, align 2
  %252 = add i64 %207, 64
  %253 = add i64 %208, -4
  %254 = icmp eq i64 %253, 0
  br i1 %254, label %255, label %206, !llvm.loop !124

255:                                              ; preds = %206, %194
  %256 = phi i64 [ 0, %194 ], [ %252, %206 ]
  %257 = icmp eq i64 %202, 0
  br i1 %257, label %274, label %258

258:                                              ; preds = %255, %258
  %259 = phi i64 [ %271, %258 ], [ %256, %255 ]
  %260 = phi i64 [ %272, %258 ], [ %202, %255 ]
  %261 = getelementptr i16, i16* %7, i64 %259
  %262 = getelementptr i16, i16* %192, i64 %259
  %263 = bitcast i16* %261 to <8 x i16>*
  %264 = load <8 x i16>, <8 x i16>* %263, align 2
  %265 = getelementptr i16, i16* %261, i64 8
  %266 = bitcast i16* %265 to <8 x i16>*
  %267 = load <8 x i16>, <8 x i16>* %266, align 2
  %268 = bitcast i16* %262 to <8 x i16>*
  store <8 x i16> %264, <8 x i16>* %268, align 2
  %269 = getelementptr i16, i16* %262, i64 8
  %270 = bitcast i16* %269 to <8 x i16>*
  store <8 x i16> %267, <8 x i16>* %270, align 2
  %271 = add i64 %259, 16
  %272 = add i64 %260, -1
  %273 = icmp eq i64 %272, 0
  br i1 %273, label %274, label %258, !llvm.loop !125

274:                                              ; preds = %258, %255
  %275 = icmp eq i64 %195, %6
  br i1 %275, label %289, label %276

276:                                              ; preds = %274, %191
  %277 = phi i64 [ %6, %191 ], [ %196, %274 ]
  %278 = phi i16* [ %7, %191 ], [ %197, %274 ]
  %279 = phi i16* [ %192, %191 ], [ %198, %274 ]
  br label %280

280:                                              ; preds = %276, %280
  %281 = phi i64 [ %285, %280 ], [ %277, %276 ]
  %282 = phi i16* [ %287, %280 ], [ %278, %276 ]
  %283 = phi i16* [ %286, %280 ], [ %279, %276 ]
  %284 = load i16, i16* %282, align 2
  store i16 %284, i16* %283, align 2
  %285 = add i64 %281, -1
  %286 = getelementptr inbounds i16, i16* %283, i64 1
  %287 = getelementptr inbounds i16, i16* %282, i64 1
  %288 = icmp eq i64 %285, 0
  br i1 %288, label %289, label %280, !llvm.loop !126

289:                                              ; preds = %280, %274, %189
  %290 = sub i64 %3, %5
  %291 = sub i64 %290, %4
  %292 = icmp eq i64 %291, 0
  br i1 %292, label %448, label %293

293:                                              ; preds = %289
  %294 = getelementptr inbounds i16, i16* %42, i64 %4
  %295 = getelementptr inbounds i16, i16* %294, i64 %6
  %296 = getelementptr inbounds i16, i16* %24, i64 %4
  %297 = getelementptr inbounds i16, i16* %296, i64 %5
  %298 = icmp ult i64 %291, 16
  br i1 %298, label %395, label %299

299:                                              ; preds = %293
  %300 = bitcast i16* %297 to i8*
  %301 = add i64 %6, %4
  %302 = shl i64 %301, 1
  %303 = getelementptr i8, i8* %41, i64 %302
  %304 = add i64 %6, %3
  %305 = sub i64 %304, %5
  %306 = shl i64 %305, 1
  %307 = getelementptr i8, i8* %41, i64 %306
  %308 = getelementptr i16, i16* %24, i64 %3
  %309 = bitcast i16* %308 to i8*
  %310 = icmp ult i8* %303, %309
  %311 = icmp ugt i8* %307, %300
  %312 = and i1 %310, %311
  br i1 %312, label %395, label %313

313:                                              ; preds = %299
  %314 = and i64 %291, -16
  %315 = sub i64 %291, %314
  %316 = getelementptr i16, i16* %297, i64 %314
  %317 = getelementptr i16, i16* %295, i64 %314
  %318 = add i64 %314, -16
  %319 = lshr exact i64 %318, 4
  %320 = add nuw nsw i64 %319, 1
  %321 = and i64 %320, 3
  %322 = icmp ult i64 %318, 48
  br i1 %322, label %374, label %323

323:                                              ; preds = %313
  %324 = sub nsw i64 %320, %321
  br label %325

325:                                              ; preds = %325, %323
  %326 = phi i64 [ 0, %323 ], [ %371, %325 ]
  %327 = phi i64 [ %324, %323 ], [ %372, %325 ]
  %328 = getelementptr i16, i16* %297, i64 %326
  %329 = getelementptr i16, i16* %295, i64 %326
  %330 = bitcast i16* %328 to <8 x i16>*
  %331 = load <8 x i16>, <8 x i16>* %330, align 2, !alias.scope !128
  %332 = getelementptr i16, i16* %328, i64 8
  %333 = bitcast i16* %332 to <8 x i16>*
  %334 = load <8 x i16>, <8 x i16>* %333, align 2, !alias.scope !128
  %335 = bitcast i16* %329 to <8 x i16>*
  store <8 x i16> %331, <8 x i16>* %335, align 2, !alias.scope !131, !noalias !128
  %336 = getelementptr i16, i16* %329, i64 8
  %337 = bitcast i16* %336 to <8 x i16>*
  store <8 x i16> %334, <8 x i16>* %337, align 2, !alias.scope !131, !noalias !128
  %338 = or i64 %326, 16
  %339 = getelementptr i16, i16* %297, i64 %338
  %340 = getelementptr i16, i16* %295, i64 %338
  %341 = bitcast i16* %339 to <8 x i16>*
  %342 = load <8 x i16>, <8 x i16>* %341, align 2, !alias.scope !128
  %343 = getelementptr i16, i16* %339, i64 8
  %344 = bitcast i16* %343 to <8 x i16>*
  %345 = load <8 x i16>, <8 x i16>* %344, align 2, !alias.scope !128
  %346 = bitcast i16* %340 to <8 x i16>*
  store <8 x i16> %342, <8 x i16>* %346, align 2, !alias.scope !131, !noalias !128
  %347 = getelementptr i16, i16* %340, i64 8
  %348 = bitcast i16* %347 to <8 x i16>*
  store <8 x i16> %345, <8 x i16>* %348, align 2, !alias.scope !131, !noalias !128
  %349 = or i64 %326, 32
  %350 = getelementptr i16, i16* %297, i64 %349
  %351 = getelementptr i16, i16* %295, i64 %349
  %352 = bitcast i16* %350 to <8 x i16>*
  %353 = load <8 x i16>, <8 x i16>* %352, align 2, !alias.scope !128
  %354 = getelementptr i16, i16* %350, i64 8
  %355 = bitcast i16* %354 to <8 x i16>*
  %356 = load <8 x i16>, <8 x i16>* %355, align 2, !alias.scope !128
  %357 = bitcast i16* %351 to <8 x i16>*
  store <8 x i16> %353, <8 x i16>* %357, align 2, !alias.scope !131, !noalias !128
  %358 = getelementptr i16, i16* %351, i64 8
  %359 = bitcast i16* %358 to <8 x i16>*
  store <8 x i16> %356, <8 x i16>* %359, align 2, !alias.scope !131, !noalias !128
  %360 = or i64 %326, 48
  %361 = getelementptr i16, i16* %297, i64 %360
  %362 = getelementptr i16, i16* %295, i64 %360
  %363 = bitcast i16* %361 to <8 x i16>*
  %364 = load <8 x i16>, <8 x i16>* %363, align 2, !alias.scope !128
  %365 = getelementptr i16, i16* %361, i64 8
  %366 = bitcast i16* %365 to <8 x i16>*
  %367 = load <8 x i16>, <8 x i16>* %366, align 2, !alias.scope !128
  %368 = bitcast i16* %362 to <8 x i16>*
  store <8 x i16> %364, <8 x i16>* %368, align 2, !alias.scope !131, !noalias !128
  %369 = getelementptr i16, i16* %362, i64 8
  %370 = bitcast i16* %369 to <8 x i16>*
  store <8 x i16> %367, <8 x i16>* %370, align 2, !alias.scope !131, !noalias !128
  %371 = add i64 %326, 64
  %372 = add i64 %327, -4
  %373 = icmp eq i64 %372, 0
  br i1 %373, label %374, label %325, !llvm.loop !133

374:                                              ; preds = %325, %313
  %375 = phi i64 [ 0, %313 ], [ %371, %325 ]
  %376 = icmp eq i64 %321, 0
  br i1 %376, label %393, label %377

377:                                              ; preds = %374, %377
  %378 = phi i64 [ %390, %377 ], [ %375, %374 ]
  %379 = phi i64 [ %391, %377 ], [ %321, %374 ]
  %380 = getelementptr i16, i16* %297, i64 %378
  %381 = getelementptr i16, i16* %295, i64 %378
  %382 = bitcast i16* %380 to <8 x i16>*
  %383 = load <8 x i16>, <8 x i16>* %382, align 2, !alias.scope !128
  %384 = getelementptr i16, i16* %380, i64 8
  %385 = bitcast i16* %384 to <8 x i16>*
  %386 = load <8 x i16>, <8 x i16>* %385, align 2, !alias.scope !128
  %387 = bitcast i16* %381 to <8 x i16>*
  store <8 x i16> %383, <8 x i16>* %387, align 2, !alias.scope !131, !noalias !128
  %388 = getelementptr i16, i16* %381, i64 8
  %389 = bitcast i16* %388 to <8 x i16>*
  store <8 x i16> %386, <8 x i16>* %389, align 2, !alias.scope !131, !noalias !128
  %390 = add i64 %378, 16
  %391 = add i64 %379, -1
  %392 = icmp eq i64 %391, 0
  br i1 %392, label %393, label %377, !llvm.loop !134

393:                                              ; preds = %377, %374
  %394 = icmp eq i64 %291, %314
  br i1 %394, label %448, label %395

395:                                              ; preds = %393, %299, %293
  %396 = phi i64 [ %291, %299 ], [ %291, %293 ], [ %315, %393 ]
  %397 = phi i16* [ %297, %299 ], [ %297, %293 ], [ %316, %393 ]
  %398 = phi i16* [ %295, %299 ], [ %295, %293 ], [ %317, %393 ]
  %399 = add i64 %396, -1
  %400 = and i64 %396, 7
  %401 = icmp eq i64 %400, 0
  br i1 %401, label %413, label %402

402:                                              ; preds = %395, %402
  %403 = phi i64 [ %408, %402 ], [ %396, %395 ]
  %404 = phi i16* [ %410, %402 ], [ %397, %395 ]
  %405 = phi i16* [ %409, %402 ], [ %398, %395 ]
  %406 = phi i64 [ %411, %402 ], [ %400, %395 ]
  %407 = load i16, i16* %404, align 2
  store i16 %407, i16* %405, align 2
  %408 = add i64 %403, -1
  %409 = getelementptr inbounds i16, i16* %405, i64 1
  %410 = getelementptr inbounds i16, i16* %404, i64 1
  %411 = add i64 %406, -1
  %412 = icmp eq i64 %411, 0
  br i1 %412, label %413, label %402, !llvm.loop !135

413:                                              ; preds = %402, %395
  %414 = phi i64 [ %396, %395 ], [ %408, %402 ]
  %415 = phi i16* [ %397, %395 ], [ %410, %402 ]
  %416 = phi i16* [ %398, %395 ], [ %409, %402 ]
  %417 = icmp ult i64 %399, 7
  br i1 %417, label %448, label %418

418:                                              ; preds = %413, %418
  %419 = phi i64 [ %444, %418 ], [ %414, %413 ]
  %420 = phi i16* [ %446, %418 ], [ %415, %413 ]
  %421 = phi i16* [ %445, %418 ], [ %416, %413 ]
  %422 = load i16, i16* %420, align 2
  store i16 %422, i16* %421, align 2
  %423 = getelementptr inbounds i16, i16* %421, i64 1
  %424 = getelementptr inbounds i16, i16* %420, i64 1
  %425 = load i16, i16* %424, align 2
  store i16 %425, i16* %423, align 2
  %426 = getelementptr inbounds i16, i16* %421, i64 2
  %427 = getelementptr inbounds i16, i16* %420, i64 2
  %428 = load i16, i16* %427, align 2
  store i16 %428, i16* %426, align 2
  %429 = getelementptr inbounds i16, i16* %421, i64 3
  %430 = getelementptr inbounds i16, i16* %420, i64 3
  %431 = load i16, i16* %430, align 2
  store i16 %431, i16* %429, align 2
  %432 = getelementptr inbounds i16, i16* %421, i64 4
  %433 = getelementptr inbounds i16, i16* %420, i64 4
  %434 = load i16, i16* %433, align 2
  store i16 %434, i16* %432, align 2
  %435 = getelementptr inbounds i16, i16* %421, i64 5
  %436 = getelementptr inbounds i16, i16* %420, i64 5
  %437 = load i16, i16* %436, align 2
  store i16 %437, i16* %435, align 2
  %438 = getelementptr inbounds i16, i16* %421, i64 6
  %439 = getelementptr inbounds i16, i16* %420, i64 6
  %440 = load i16, i16* %439, align 2
  store i16 %440, i16* %438, align 2
  %441 = getelementptr inbounds i16, i16* %421, i64 7
  %442 = getelementptr inbounds i16, i16* %420, i64 7
  %443 = load i16, i16* %442, align 2
  store i16 %443, i16* %441, align 2
  %444 = add i64 %419, -8
  %445 = getelementptr inbounds i16, i16* %421, i64 8
  %446 = getelementptr inbounds i16, i16* %420, i64 8
  %447 = icmp eq i64 %444, 0
  br i1 %447, label %448, label %418, !llvm.loop !136

448:                                              ; preds = %413, %418, %393, %289
  %449 = icmp eq i64 %1, 10
  br i1 %449, label %451, label %450

450:                                              ; preds = %448
  tail call void @_ZdlPv(i8* %25) #12
  br label %451

451:                                              ; preds = %448, %450
  %452 = bitcast %"class.std::__1::basic_string.1"* %0 to i8**
  store i8* %41, i8** %452, align 8
  %453 = or i64 %39, -9223372036854775808
  %454 = getelementptr inbounds %"class.std::__1::basic_string.1", %"class.std::__1::basic_string.1"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 2
  store i64 %453, i64* %454, align 8
  %455 = add i64 %290, %6
  %456 = getelementptr inbounds %"class.std::__1::basic_string.1", %"class.std::__1::basic_string.1"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  store i64 %455, i64* %456, align 8
  %457 = getelementptr inbounds i16, i16* %42, i64 %455
  store i16 0, i16* %457, align 2
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { nofree norecurse nounwind ssp uwtable writeonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { inlinehint nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { noreturn nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #8 = { nobuiltin nofree "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #9 = { argmemonly nofree nounwind readonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #10 = { nounwind }
attributes #11 = { noreturn nounwind }
attributes #12 = { builtin nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{!3}
!3 = distinct !{!3, !4}
!4 = distinct !{!4, !"LVerDomain"}
!5 = !{!6}
!6 = distinct !{!6, !4}
!7 = distinct !{!7, !8}
!8 = !{!"llvm.loop.isvectorized", i32 1}
!9 = distinct !{!9, !10}
!10 = !{!"llvm.loop.unroll.disable"}
!11 = distinct !{!11, !10}
!12 = distinct !{!12, !8}
!13 = !{!14}
!14 = distinct !{!14, !15}
!15 = distinct !{!15, !"LVerDomain"}
!16 = !{!17}
!17 = distinct !{!17, !15}
!18 = distinct !{!18, !8}
!19 = distinct !{!19, !10}
!20 = distinct !{!20, !10}
!21 = distinct !{!21, !8}
!22 = !{!23}
!23 = distinct !{!23, !24}
!24 = distinct !{!24, !"LVerDomain"}
!25 = !{!26}
!26 = distinct !{!26, !24}
!27 = distinct !{!27, !8}
!28 = distinct !{!28, !10}
!29 = distinct !{!29, !10}
!30 = distinct !{!30, !8}
!31 = !{!32}
!32 = distinct !{!32, !33, !"_ZNSt3__1plIDsNS_11char_traitsIDsEENS_9allocatorIDsEEEENS_12basic_stringIT_T0_T1_EEOS9_RKS9_: argument 0"}
!33 = distinct !{!33, !"_ZNSt3__1plIDsNS_11char_traitsIDsEENS_9allocatorIDsEEEENS_12basic_stringIT_T0_T1_EEOS9_RKS9_"}
!34 = !{!35}
!35 = distinct !{!35, !36}
!36 = distinct !{!36, !"LVerDomain"}
!37 = !{!38}
!38 = distinct !{!38, !36}
!39 = !{!32, !35}
!40 = distinct !{!40, !8}
!41 = distinct !{!41, !10}
!42 = distinct !{!42, !10}
!43 = distinct !{!43, !8}
!44 = !{!45}
!45 = distinct !{!45, !46, !"_ZNSt3__1plIDsNS_11char_traitsIDsEENS_9allocatorIDsEEEENS_12basic_stringIT_T0_T1_EEOS9_PKS6_: argument 0"}
!46 = distinct !{!46, !"_ZNSt3__1plIDsNS_11char_traitsIDsEENS_9allocatorIDsEEEENS_12basic_stringIT_T0_T1_EEOS9_PKS6_"}
!47 = !{!48}
!48 = distinct !{!48, !49, !"_ZNSt3__1plIDsNS_11char_traitsIDsEENS_9allocatorIDsEEEENS_12basic_stringIT_T0_T1_EEOS9_RKS9_: argument 0"}
!49 = distinct !{!49, !"_ZNSt3__1plIDsNS_11char_traitsIDsEENS_9allocatorIDsEEEENS_12basic_stringIT_T0_T1_EEOS9_RKS9_"}
!50 = !{!51}
!51 = distinct !{!51, !52}
!52 = distinct !{!52, !"LVerDomain"}
!53 = !{!54}
!54 = distinct !{!54, !52}
!55 = !{!48, !51}
!56 = distinct !{!56, !8}
!57 = distinct !{!57, !10}
!58 = distinct !{!58, !10}
!59 = distinct !{!59, !8}
!60 = !{!61}
!61 = distinct !{!61, !62}
!62 = distinct !{!62, !"LVerDomain"}
!63 = !{!64}
!64 = distinct !{!64, !62}
!65 = distinct !{!65, !8}
!66 = distinct !{!66, !10}
!67 = distinct !{!67, !10}
!68 = distinct !{!68, !8}
!69 = !{i8 0, i8 2}
!70 = !{!71}
!71 = distinct !{!71, !72}
!72 = distinct !{!72, !"LVerDomain"}
!73 = !{!74}
!74 = distinct !{!74, !72}
!75 = distinct !{!75, !8}
!76 = distinct !{!76, !10}
!77 = distinct !{!77, !10}
!78 = distinct !{!78, !8}
!79 = !{!80}
!80 = distinct !{!80, !81}
!81 = distinct !{!81, !"LVerDomain"}
!82 = !{!83}
!83 = distinct !{!83, !81}
!84 = distinct !{!84, !8}
!85 = distinct !{!85, !10}
!86 = distinct !{!86, !10}
!87 = distinct !{!87, !8}
!88 = !{!89}
!89 = distinct !{!89, !90}
!90 = distinct !{!90, !"LVerDomain"}
!91 = !{!92}
!92 = distinct !{!92, !90}
!93 = distinct !{!93, !8}
!94 = distinct !{!94, !10}
!95 = distinct !{!95, !10}
!96 = distinct !{!96, !8}
!97 = !{!98}
!98 = distinct !{!98, !99}
!99 = distinct !{!99, !"LVerDomain"}
!100 = !{!101}
!101 = distinct !{!101, !99}
!102 = distinct !{!102, !8}
!103 = distinct !{!103, !10}
!104 = distinct !{!104, !10}
!105 = distinct !{!105, !8}
!106 = !{!107}
!107 = distinct !{!107, !108}
!108 = distinct !{!108, !"LVerDomain"}
!109 = !{!110}
!110 = distinct !{!110, !108}
!111 = distinct !{!111, !8}
!112 = distinct !{!112, !10}
!113 = distinct !{!113, !10}
!114 = distinct !{!114, !8}
!115 = !{!116}
!116 = distinct !{!116, !117}
!117 = distinct !{!117, !"LVerDomain"}
!118 = !{!119}
!119 = distinct !{!119, !117}
!120 = distinct !{!120, !8}
!121 = distinct !{!121, !10}
!122 = distinct !{!122, !10}
!123 = distinct !{!123, !8}
!124 = distinct !{!124, !8}
!125 = distinct !{!125, !10}
!126 = distinct !{!126, !127, !8}
!127 = !{!"llvm.loop.unroll.runtime.disable"}
!128 = !{!129}
!129 = distinct !{!129, !130}
!130 = distinct !{!130, !"LVerDomain"}
!131 = !{!132}
!132 = distinct !{!132, !130}
!133 = distinct !{!133, !8}
!134 = distinct !{!134, !10}
!135 = distinct !{!135, !10}
!136 = distinct !{!136, !8}
