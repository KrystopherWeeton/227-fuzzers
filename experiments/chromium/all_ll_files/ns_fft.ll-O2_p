; ModuleID = '../../third_party/webrtc/modules/audio_processing/ns/ns_fft.cc'
source_filename = "../../third_party/webrtc/modules/audio_processing/ns/ns_fft.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%"class.webrtc::NrFft" = type { %"class.std::__1::vector", %"class.std::__1::vector.1" }
%"class.std::__1::vector" = type { %"class.std::__1::__vector_base" }
%"class.std::__1::__vector_base" = type { i64*, i64*, %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { i64* }
%"class.std::__1::vector.1" = type { %"class.std::__1::__vector_base.2" }
%"class.std::__1::__vector_base.2" = type { float*, float*, %"class.std::__1::__compressed_pair.3" }
%"class.std::__1::__compressed_pair.3" = type { %"struct.std::__1::__compressed_pair_elem.4" }
%"struct.std::__1::__compressed_pair_elem.4" = type { float* }
%"struct.std::__1::array" = type { [256 x float] }
%"class.rtc::ArrayView.10" = type { %"class.rtc::impl::ArrayViewBase.11" }
%"class.rtc::impl::ArrayViewBase.11" = type { float*, i64 }

@_ZN6webrtc5NrFftC1Ev = hidden unnamed_addr alias void (%"class.webrtc::NrFft"*), void (%"class.webrtc::NrFft"*)* @_ZN6webrtc5NrFftC2Ev

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN6webrtc5NrFftC2Ev(%"class.webrtc::NrFft"* nocapture) unnamed_addr #0 align 2 {
  %2 = alloca %"struct.std::__1::array", align 4
  %3 = bitcast %"struct.std::__1::array"* %2 to i8*
  %4 = tail call i8* @_Znwm(i64 1024) #4
  %5 = getelementptr inbounds %"class.webrtc::NrFft", %"class.webrtc::NrFft"* %0, i64 0, i32 0, i32 0, i32 1
  %6 = bitcast %"class.webrtc::NrFft"* %0 to i8**
  store i8* %4, i8** %6, align 8
  %7 = getelementptr inbounds i8, i8* %4, i64 1024
  %8 = getelementptr inbounds %"class.webrtc::NrFft", %"class.webrtc::NrFft"* %0, i64 0, i32 0, i32 0, i32 2, i32 0, i32 0
  %9 = bitcast i64** %8 to i8**
  store i8* %7, i8** %9, align 8
  %10 = bitcast i64** %5 to i64*
  %11 = getelementptr inbounds i8, i8* %4, i64 8
  tail call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %11, i8 0, i64 1016, i1 false) #5
  %12 = ptrtoint i8* %7 to i64
  store i64 %12, i64* %10, align 8
  %13 = getelementptr inbounds %"class.webrtc::NrFft", %"class.webrtc::NrFft"* %0, i64 0, i32 1
  %14 = tail call i8* @_Znwm(i64 512) #4
  %15 = getelementptr inbounds %"class.webrtc::NrFft", %"class.webrtc::NrFft"* %0, i64 0, i32 1, i32 0, i32 1
  %16 = bitcast %"class.std::__1::vector.1"* %13 to i8**
  store i8* %14, i8** %16, align 8
  %17 = getelementptr inbounds i8, i8* %14, i64 512
  %18 = getelementptr inbounds %"class.webrtc::NrFft", %"class.webrtc::NrFft"* %0, i64 0, i32 1, i32 0, i32 2, i32 0, i32 0
  %19 = bitcast float** %18 to i8**
  store i8* %17, i8** %19, align 8
  %20 = bitcast float** %15 to i64*
  tail call void @llvm.memset.p0i8.i64(i8* nonnull align 4 %14, i8 0, i64 512, i1 false) #5
  %21 = ptrtoint i8* %17 to i64
  store i64 %21, i64* %20, align 8
  %22 = bitcast i8* %4 to i64*
  store i64 0, i64* %22, align 8
  call void @llvm.lifetime.start.p0i8(i64 1024, i8* nonnull %3) #5
  %23 = getelementptr inbounds %"struct.std::__1::array", %"struct.std::__1::array"* %2, i64 0, i32 0, i64 0
  call void @llvm.memset.p0i8.i64(i8* nonnull align 4 %3, i8 0, i64 1024, i1 false)
  %24 = bitcast i8* %14 to float*
  call void @_ZN6webrtc11WebRtc_rdftEmiPfPmS0_(i64 256, i32 1, float* nonnull %23, i64* nonnull %22, float* nonnull %24) #5
  call void @llvm.lifetime.end.p0i8(i64 1024, i8* nonnull %3) #5
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

declare void @_ZN6webrtc11WebRtc_rdftEmiPfPmS0_(i64, i32, float*, i64*, float*) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN6webrtc5NrFft3FftEN3rtc9ArrayViewIfLl256EEES3_S3_(%"class.webrtc::NrFft"* nocapture readonly, float*, float*, float*) local_unnamed_addr #0 align 2 {
  %5 = getelementptr inbounds %"class.webrtc::NrFft", %"class.webrtc::NrFft"* %0, i64 0, i32 0, i32 0, i32 0
  %6 = load i64*, i64** %5, align 8
  %7 = getelementptr inbounds %"class.webrtc::NrFft", %"class.webrtc::NrFft"* %0, i64 0, i32 1, i32 0, i32 0
  %8 = load float*, float** %7, align 8
  tail call void @_ZN6webrtc11WebRtc_rdftEmiPfPmS0_(i64 256, i32 1, float* %1, i64* %6, float* %8) #5
  store float 0.000000e+00, float* %3, align 4
  %9 = bitcast float* %1 to i32*
  %10 = load i32, i32* %9, align 4
  %11 = bitcast float* %2 to i32*
  store i32 %10, i32* %11, align 4
  %12 = getelementptr inbounds float, float* %3, i64 128
  store float 0.000000e+00, float* %12, align 4
  %13 = getelementptr inbounds float, float* %1, i64 1
  %14 = bitcast float* %13 to i32*
  %15 = load i32, i32* %14, align 4
  %16 = getelementptr inbounds float, float* %2, i64 128
  %17 = bitcast float* %16 to i32*
  store i32 %15, i32* %17, align 4
  %18 = getelementptr float, float* %2, i64 1
  %19 = getelementptr float, float* %2, i64 128
  %20 = getelementptr float, float* %3, i64 1
  %21 = getelementptr float, float* %3, i64 128
  %22 = getelementptr float, float* %1, i64 2
  %23 = getelementptr float, float* %1, i64 256
  %24 = icmp ult float* %18, %21
  %25 = icmp ult float* %20, %19
  %26 = and i1 %24, %25
  %27 = icmp ult float* %18, %23
  %28 = icmp ult float* %22, %19
  %29 = and i1 %27, %28
  %30 = or i1 %26, %29
  %31 = icmp ult float* %20, %23
  %32 = icmp ult float* %22, %21
  %33 = and i1 %31, %32
  %34 = or i1 %30, %33
  br i1 %34, label %35, label %50

35:                                               ; preds = %50, %4
  %36 = phi i64 [ 1, %4 ], [ 125, %50 ]
  %37 = shl nuw nsw i64 %36, 1
  %38 = getelementptr inbounds float, float* %1, i64 %37
  %39 = bitcast float* %38 to i32*
  %40 = load i32, i32* %39, align 4
  %41 = getelementptr inbounds float, float* %2, i64 %36
  %42 = bitcast float* %41 to i32*
  store i32 %40, i32* %42, align 4
  %43 = or i64 %37, 1
  %44 = getelementptr inbounds float, float* %1, i64 %43
  %45 = bitcast float* %44 to i32*
  %46 = load i32, i32* %45, align 4
  %47 = getelementptr inbounds float, float* %3, i64 %36
  %48 = bitcast float* %47 to i32*
  store i32 %46, i32* %48, align 4
  %49 = add nuw nsw i64 %36, 1
  br label %66

50:                                               ; preds = %4, %95
  %51 = phi i64 [ %107, %95 ], [ 0, %4 ]
  %52 = or i64 %51, 1
  %53 = shl nuw i64 %52, 1
  %54 = getelementptr inbounds float, float* %1, i64 %53
  %55 = bitcast float* %54 to <8 x i32>*
  %56 = load <8 x i32>, <8 x i32>* %55, align 4
  %57 = shufflevector <8 x i32> %56, <8 x i32> undef, <4 x i32> <i32 0, i32 2, i32 4, i32 6>
  %58 = shufflevector <8 x i32> %56, <8 x i32> undef, <4 x i32> <i32 1, i32 3, i32 5, i32 7>
  %59 = getelementptr inbounds float, float* %2, i64 %52
  %60 = bitcast float* %59 to <4 x i32>*
  store <4 x i32> %57, <4 x i32>* %60, align 4, !alias.scope !2, !noalias !5
  %61 = getelementptr inbounds float, float* %3, i64 %52
  %62 = bitcast float* %61 to <4 x i32>*
  store <4 x i32> %58, <4 x i32>* %62, align 4, !alias.scope !8, !noalias !9
  %63 = or i64 %51, 4
  %64 = icmp eq i64 %63, 124
  br i1 %64, label %35, label %95, !llvm.loop !10

65:                                               ; preds = %66
  ret void

66:                                               ; preds = %66, %35
  %67 = phi i64 [ %49, %35 ], [ %93, %66 ]
  %68 = shl nuw i64 %67, 1
  %69 = getelementptr inbounds float, float* %1, i64 %68
  %70 = bitcast float* %69 to i32*
  %71 = load i32, i32* %70, align 4
  %72 = getelementptr inbounds float, float* %2, i64 %67
  %73 = bitcast float* %72 to i32*
  store i32 %71, i32* %73, align 4
  %74 = or i64 %68, 1
  %75 = getelementptr inbounds float, float* %1, i64 %74
  %76 = bitcast float* %75 to i32*
  %77 = load i32, i32* %76, align 4
  %78 = getelementptr inbounds float, float* %3, i64 %67
  %79 = bitcast float* %78 to i32*
  store i32 %77, i32* %79, align 4
  %80 = add nuw nsw i64 %67, 1
  %81 = shl nuw i64 %80, 1
  %82 = getelementptr inbounds float, float* %1, i64 %81
  %83 = bitcast float* %82 to i32*
  %84 = load i32, i32* %83, align 4
  %85 = getelementptr inbounds float, float* %2, i64 %80
  %86 = bitcast float* %85 to i32*
  store i32 %84, i32* %86, align 4
  %87 = or i64 %81, 1
  %88 = getelementptr inbounds float, float* %1, i64 %87
  %89 = bitcast float* %88 to i32*
  %90 = load i32, i32* %89, align 4
  %91 = getelementptr inbounds float, float* %3, i64 %80
  %92 = bitcast float* %91 to i32*
  store i32 %90, i32* %92, align 4
  %93 = add nuw nsw i64 %67, 2
  %94 = icmp eq i64 %93, 128
  br i1 %94, label %65, label %66, !llvm.loop !12

95:                                               ; preds = %50
  %96 = or i64 %51, 5
  %97 = shl nuw i64 %96, 1
  %98 = getelementptr inbounds float, float* %1, i64 %97
  %99 = bitcast float* %98 to <8 x i32>*
  %100 = load <8 x i32>, <8 x i32>* %99, align 4
  %101 = shufflevector <8 x i32> %100, <8 x i32> undef, <4 x i32> <i32 0, i32 2, i32 4, i32 6>
  %102 = shufflevector <8 x i32> %100, <8 x i32> undef, <4 x i32> <i32 1, i32 3, i32 5, i32 7>
  %103 = getelementptr inbounds float, float* %2, i64 %96
  %104 = bitcast float* %103 to <4 x i32>*
  store <4 x i32> %101, <4 x i32>* %104, align 4, !alias.scope !2, !noalias !5
  %105 = getelementptr inbounds float, float* %3, i64 %96
  %106 = bitcast float* %105 to <4 x i32>*
  store <4 x i32> %102, <4 x i32>* %106, align 4, !alias.scope !8, !noalias !9
  %107 = add nuw nsw i64 %51, 8
  br label %50
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN6webrtc5NrFft4IfftEN3rtc9ArrayViewIKfLln4711EEES4_NS2_IfLln4711EEE(%"class.webrtc::NrFft"* nocapture readonly, float*, i64, float*, i64, %"class.rtc::ArrayView.10"* nocapture readonly byval(%"class.rtc::ArrayView.10") align 8) local_unnamed_addr #0 align 2 {
  %7 = bitcast float* %1 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = getelementptr inbounds %"class.rtc::ArrayView.10", %"class.rtc::ArrayView.10"* %5, i64 0, i32 0, i32 0
  %10 = load float*, float** %9, align 8
  %11 = bitcast float* %10 to i32*
  store i32 %8, i32* %11, align 4
  %12 = getelementptr inbounds float, float* %1, i64 128
  %13 = bitcast float* %12 to i32*
  %14 = load i32, i32* %13, align 4
  %15 = getelementptr inbounds float, float* %10, i64 1
  %16 = bitcast float* %15 to i32*
  store i32 %14, i32* %16, align 4
  %17 = getelementptr float, float* %10, i64 2
  %18 = getelementptr float, float* %10, i64 256
  %19 = getelementptr float, float* %1, i64 1
  %20 = getelementptr float, float* %1, i64 128
  %21 = getelementptr float, float* %3, i64 1
  %22 = getelementptr float, float* %3, i64 128
  %23 = icmp ult float* %17, %20
  %24 = icmp ult float* %19, %18
  %25 = and i1 %23, %24
  %26 = icmp ult float* %17, %22
  %27 = icmp ult float* %21, %18
  %28 = and i1 %26, %27
  %29 = or i1 %25, %28
  br i1 %29, label %33, label %30

30:                                               ; preds = %6
  %31 = getelementptr inbounds float, float* %10, i64 -1
  %32 = getelementptr inbounds float, float* %10, i64 -1
  br label %48

33:                                               ; preds = %48, %6
  %34 = phi i64 [ 1, %6 ], [ 125, %48 ]
  %35 = getelementptr inbounds float, float* %1, i64 %34
  %36 = bitcast float* %35 to i32*
  %37 = load i32, i32* %36, align 4
  %38 = shl nuw nsw i64 %34, 1
  %39 = getelementptr inbounds float, float* %10, i64 %38
  %40 = bitcast float* %39 to i32*
  store i32 %37, i32* %40, align 4
  %41 = getelementptr inbounds float, float* %3, i64 %34
  %42 = bitcast float* %41 to i32*
  %43 = load i32, i32* %42, align 4
  %44 = or i64 %38, 1
  %45 = getelementptr inbounds float, float* %10, i64 %44
  %46 = bitcast float* %45 to i32*
  store i32 %43, i32* %46, align 4
  %47 = add nuw nsw i64 %34, 1
  br label %134

48:                                               ; preds = %170, %30
  %49 = phi i64 [ 0, %30 ], [ %183, %170 ]
  %50 = or i64 %49, 1
  %51 = getelementptr inbounds float, float* %1, i64 %50
  %52 = bitcast float* %51 to <4 x i32>*
  %53 = load <4 x i32>, <4 x i32>* %52, align 4, !alias.scope !13
  %54 = shl nuw i64 %50, 1
  %55 = getelementptr inbounds float, float* %3, i64 %50
  %56 = bitcast float* %55 to <4 x i32>*
  %57 = load <4 x i32>, <4 x i32>* %56, align 4, !alias.scope !16
  %58 = or i64 %54, 1
  %59 = getelementptr inbounds float, float* %31, i64 %58
  %60 = bitcast float* %59 to <8 x i32>*
  %61 = shufflevector <4 x i32> %53, <4 x i32> %57, <8 x i32> <i32 0, i32 4, i32 1, i32 5, i32 2, i32 6, i32 3, i32 7>
  store <8 x i32> %61, <8 x i32>* %60, align 4
  %62 = or i64 %49, 4
  %63 = icmp eq i64 %62, 124
  br i1 %63, label %33, label %170, !llvm.loop !18

64:                                               ; preds = %134
  %65 = getelementptr inbounds %"class.webrtc::NrFft", %"class.webrtc::NrFft"* %0, i64 0, i32 0, i32 0, i32 0
  %66 = load i64*, i64** %65, align 8
  %67 = getelementptr inbounds %"class.webrtc::NrFft", %"class.webrtc::NrFft"* %0, i64 0, i32 1, i32 0, i32 0
  %68 = load float*, float** %67, align 8
  tail call void @_ZN6webrtc11WebRtc_rdftEmiPfPmS0_(i64 256, i32 -1, float* %10, i64* %66, float* %68) #5
  %69 = getelementptr inbounds %"class.rtc::ArrayView.10", %"class.rtc::ArrayView.10"* %5, i64 0, i32 0, i32 1
  %70 = load i64, i64* %69, align 8
  %71 = getelementptr inbounds float, float* %10, i64 %70
  %72 = icmp eq i64 %70, 0
  br i1 %72, label %163, label %73

73:                                               ; preds = %64
  %74 = shl nsw i64 %70, 2
  %75 = add i64 %74, -4
  %76 = lshr exact i64 %75, 2
  %77 = add nuw nsw i64 %76, 1
  %78 = icmp ult i64 %77, 8
  br i1 %78, label %79, label %81

79:                                               ; preds = %132, %73
  %80 = phi float* [ %10, %73 ], [ %83, %132 ]
  br label %164

81:                                               ; preds = %73
  %82 = and i64 %77, 9223372036854775800
  %83 = getelementptr float, float* %10, i64 %82
  %84 = add nsw i64 %82, -8
  %85 = lshr exact i64 %84, 3
  %86 = add nuw nsw i64 %85, 1
  %87 = and i64 %86, 1
  %88 = icmp eq i64 %84, 0
  br i1 %88, label %118, label %89

89:                                               ; preds = %81
  %90 = sub nuw nsw i64 %86, %87
  br label %91

91:                                               ; preds = %91, %89
  %92 = phi i64 [ 0, %89 ], [ %115, %91 ]
  %93 = phi i64 [ %90, %89 ], [ %116, %91 ]
  %94 = getelementptr float, float* %10, i64 %92
  %95 = bitcast float* %94 to <4 x float>*
  %96 = load <4 x float>, <4 x float>* %95, align 4
  %97 = getelementptr float, float* %94, i64 4
  %98 = bitcast float* %97 to <4 x float>*
  %99 = load <4 x float>, <4 x float>* %98, align 4
  %100 = fmul <4 x float> %96, <float 7.812500e-03, float 7.812500e-03, float 7.812500e-03, float 7.812500e-03>
  %101 = fmul <4 x float> %99, <float 7.812500e-03, float 7.812500e-03, float 7.812500e-03, float 7.812500e-03>
  %102 = bitcast float* %94 to <4 x float>*
  store <4 x float> %100, <4 x float>* %102, align 4
  %103 = bitcast float* %97 to <4 x float>*
  store <4 x float> %101, <4 x float>* %103, align 4
  %104 = or i64 %92, 8
  %105 = getelementptr float, float* %10, i64 %104
  %106 = bitcast float* %105 to <4 x float>*
  %107 = load <4 x float>, <4 x float>* %106, align 4
  %108 = getelementptr float, float* %105, i64 4
  %109 = bitcast float* %108 to <4 x float>*
  %110 = load <4 x float>, <4 x float>* %109, align 4
  %111 = fmul <4 x float> %107, <float 7.812500e-03, float 7.812500e-03, float 7.812500e-03, float 7.812500e-03>
  %112 = fmul <4 x float> %110, <float 7.812500e-03, float 7.812500e-03, float 7.812500e-03, float 7.812500e-03>
  %113 = bitcast float* %105 to <4 x float>*
  store <4 x float> %111, <4 x float>* %113, align 4
  %114 = bitcast float* %108 to <4 x float>*
  store <4 x float> %112, <4 x float>* %114, align 4
  %115 = add i64 %92, 16
  %116 = add i64 %93, -2
  %117 = icmp eq i64 %116, 0
  br i1 %117, label %118, label %91, !llvm.loop !19

118:                                              ; preds = %91, %81
  %119 = phi i64 [ 0, %81 ], [ %115, %91 ]
  %120 = icmp eq i64 %87, 0
  br i1 %120, label %132, label %121

121:                                              ; preds = %118
  %122 = getelementptr float, float* %10, i64 %119
  %123 = bitcast float* %122 to <4 x float>*
  %124 = load <4 x float>, <4 x float>* %123, align 4
  %125 = getelementptr float, float* %122, i64 4
  %126 = bitcast float* %125 to <4 x float>*
  %127 = load <4 x float>, <4 x float>* %126, align 4
  %128 = fmul <4 x float> %124, <float 7.812500e-03, float 7.812500e-03, float 7.812500e-03, float 7.812500e-03>
  %129 = fmul <4 x float> %127, <float 7.812500e-03, float 7.812500e-03, float 7.812500e-03, float 7.812500e-03>
  %130 = bitcast float* %122 to <4 x float>*
  store <4 x float> %128, <4 x float>* %130, align 4
  %131 = bitcast float* %125 to <4 x float>*
  store <4 x float> %129, <4 x float>* %131, align 4
  br label %132

132:                                              ; preds = %118, %121
  %133 = icmp eq i64 %77, %82
  br i1 %133, label %163, label %79

134:                                              ; preds = %134, %33
  %135 = phi i64 [ %47, %33 ], [ %161, %134 ]
  %136 = getelementptr inbounds float, float* %1, i64 %135
  %137 = bitcast float* %136 to i32*
  %138 = load i32, i32* %137, align 4
  %139 = shl nuw i64 %135, 1
  %140 = getelementptr inbounds float, float* %10, i64 %139
  %141 = bitcast float* %140 to i32*
  store i32 %138, i32* %141, align 4
  %142 = getelementptr inbounds float, float* %3, i64 %135
  %143 = bitcast float* %142 to i32*
  %144 = load i32, i32* %143, align 4
  %145 = or i64 %139, 1
  %146 = getelementptr inbounds float, float* %10, i64 %145
  %147 = bitcast float* %146 to i32*
  store i32 %144, i32* %147, align 4
  %148 = add nuw nsw i64 %135, 1
  %149 = getelementptr inbounds float, float* %1, i64 %148
  %150 = bitcast float* %149 to i32*
  %151 = load i32, i32* %150, align 4
  %152 = shl nuw i64 %148, 1
  %153 = getelementptr inbounds float, float* %10, i64 %152
  %154 = bitcast float* %153 to i32*
  store i32 %151, i32* %154, align 4
  %155 = getelementptr inbounds float, float* %3, i64 %148
  %156 = bitcast float* %155 to i32*
  %157 = load i32, i32* %156, align 4
  %158 = or i64 %152, 1
  %159 = getelementptr inbounds float, float* %10, i64 %158
  %160 = bitcast float* %159 to i32*
  store i32 %157, i32* %160, align 4
  %161 = add nuw nsw i64 %135, 2
  %162 = icmp eq i64 %161, 128
  br i1 %162, label %64, label %134, !llvm.loop !20

163:                                              ; preds = %164, %132, %64
  ret void

164:                                              ; preds = %79, %164
  %165 = phi float* [ %168, %164 ], [ %80, %79 ]
  %166 = load float, float* %165, align 4
  %167 = fmul float %166, 7.812500e-03
  store float %167, float* %165, align 4
  %168 = getelementptr inbounds float, float* %165, i64 1
  %169 = icmp eq float* %168, %71
  br i1 %169, label %163, label %164, !llvm.loop !21

170:                                              ; preds = %48
  %171 = or i64 %49, 5
  %172 = getelementptr inbounds float, float* %1, i64 %171
  %173 = bitcast float* %172 to <4 x i32>*
  %174 = load <4 x i32>, <4 x i32>* %173, align 4, !alias.scope !13
  %175 = shl nuw i64 %171, 1
  %176 = getelementptr inbounds float, float* %3, i64 %171
  %177 = bitcast float* %176 to <4 x i32>*
  %178 = load <4 x i32>, <4 x i32>* %177, align 4, !alias.scope !16
  %179 = or i64 %175, 1
  %180 = getelementptr inbounds float, float* %32, i64 %179
  %181 = bitcast float* %180 to <8 x i32>*
  %182 = shufflevector <4 x i32> %174, <4 x i32> %178, <8 x i32> <i32 0, i32 4, i32 1, i32 5, i32 2, i32 6, i32 3, i32 7>
  store <8 x i32> %182, <8 x i32>* %181, align 4
  %183 = add nuw nsw i64 %49, 8
  br label %48
}

; Function Attrs: nobuiltin nofree
declare noalias nonnull i8* @_Znwm(i64) local_unnamed_addr #3

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nobuiltin nofree "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { builtin nounwind }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{!3}
!3 = distinct !{!3, !4}
!4 = distinct !{!4, !"LVerDomain"}
!5 = !{!6, !7}
!6 = distinct !{!6, !4}
!7 = distinct !{!7, !4}
!8 = !{!6}
!9 = !{!7}
!10 = distinct !{!10, !11}
!11 = !{!"llvm.loop.isvectorized", i32 1}
!12 = distinct !{!12, !11}
!13 = !{!14}
!14 = distinct !{!14, !15}
!15 = distinct !{!15, !"LVerDomain"}
!16 = !{!17}
!17 = distinct !{!17, !15}
!18 = distinct !{!18, !11}
!19 = distinct !{!19, !11}
!20 = distinct !{!20, !11}
!21 = distinct !{!21, !22, !11}
!22 = !{!"llvm.loop.unroll.runtime.disable"}
