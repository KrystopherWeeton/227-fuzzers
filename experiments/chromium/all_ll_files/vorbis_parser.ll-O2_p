; ModuleID = '../../third_party/ffmpeg/libavcodec/vorbis_parser.c'
source_filename = "../../third_party/ffmpeg/libavcodec/vorbis_parser.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"
module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"
module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%struct.AVCodecParserContext = type { i8*, %struct.AVCodecParser*, i64, i64, i64, i32, i32, i64, i64, i64, i64, i32, i32, [4 x i64], [4 x i64], [4 x i64], i32, i64, [4 x i64], i32, i64, i32, i32, i32, [4 x i64], i64, i64, i32, i32, i32, i32, i32, i32, i32, i32, i32 }
%struct.AVCodecContext = type { %struct.AVClass*, i32, i32, %struct.AVCodec*, i32, i32, i8*, %struct.AVCodecInternal*, i8*, i64, i32, i32, i32, i32, i32, i8*, i32, %struct.AVRational, i32, i32, i32, i32, i32, i32, i32, i32, void (%struct.AVCodecContext*, %struct.AVFrame*, i32*, i32, i32, i32)*, i32 (%struct.AVCodecContext*, i32*)*, i32, float, i32, float, i32, i32, float, float, float, float, float, float, float, i32, i32, i32*, %struct.AVRational, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i16*, i16*, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i64, i64, i32, i32, i32 (%struct.AVCodecContext*, %struct.AVFrame*, i32)*, i32, float, float, i32, i32, i32, i32, i32, %struct.RcOverride*, i64, i64, float, float, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i64, void (%struct.AVCodecContext*, i8*, i32, i32)*, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i8*, i8*, i32, i32, i32, i32, i32, i64, %struct.AVHWAccel*, i8*, [8 x i64], i32, i32, i32, i32, i32, %struct.AVFrame*, i32, i32, i32, i32, i32 (%struct.AVCodecContext*, i32 (%struct.AVCodecContext*, i8*)*, i8*, i32*, i32, i32)*, i32 (%struct.AVCodecContext*, i32 (%struct.AVCodecContext*, i8*, i32, i32)*, i8*, i32*, i32)*, i32, i32, i32, i32, i32, i32, i8*, i32, i64, i32, i32, %struct.AVRational, i32, %struct.AVRational, %struct.AVCodecDescriptor*, i64, i64, i64, i64, i8*, i32, i32, i32, i32, i16*, i8*, i8*, i32, %struct.AVPacketSideData*, i32, %struct.AVBufferRef*, i32, i32, i64, %struct.AVBufferRef*, i32, i32, i32, i32, i64, i32 }
%struct.AVClass = type { i8*, i8* (i8*)*, %struct.AVOption*, i32, i32, i32, i8* (i8*, i8*)*, %struct.AVClass* (%struct.AVClass*)*, i32, i32 (i8*)*, i32 (%struct.AVOptionRanges**, i8*, i8*, i32)*, %struct.AVClass* (i8**)* }
%struct.AVOption = type opaque
%struct.AVOptionRanges = type opaque
%struct.AVCodec = type { i8*, i8*, i32, i32, i32, %struct.AVRational*, i32*, i32*, i32*, i64*, i8, %struct.AVClass*, %struct.AVProfile*, i8*, i32, %struct.AVCodec*, i32 (%struct.AVCodecContext*, %struct.AVCodecContext*)*, %struct.AVCodecDefault*, void (%struct.AVCodec*)*, i32 (%struct.AVCodecContext*)*, i32 (%struct.AVCodecContext*, i8*, i32, %struct.AVSubtitle*)*, i32 (%struct.AVCodecContext*, %struct.AVPacket*, %struct.AVFrame*, i32*)*, i32 (%struct.AVCodecContext*, i8*, i32*, %struct.AVPacket*)*, i32 (%struct.AVCodecContext*)*, i32 (%struct.AVCodecContext*, %struct.AVPacket*)*, i32 (%struct.AVCodecContext*, %struct.AVFrame*)*, void (%struct.AVCodecContext*)*, i32, i8*, %struct.AVCodecHWConfigInternal**, i32* }
%struct.AVProfile = type { i32, i8* }
%struct.AVCodecDefault = type opaque
%struct.AVSubtitle = type { i16, i32, i32, i32, %struct.AVSubtitleRect**, i64 }
%struct.AVSubtitleRect = type { i32, i32, i32, i32, i32, %struct.AVPicture, [4 x i8*], [4 x i32], i32, i8*, i8*, i32 }
%struct.AVPicture = type { [8 x i8*], [8 x i32] }
%struct.AVPacket = type { %struct.AVBufferRef*, i64, i64, i8*, i32, i32, i32, %struct.AVPacketSideData*, i32, i64, i64, i64 }
%struct.AVCodecHWConfigInternal = type opaque
%struct.AVCodecInternal = type opaque
%struct.RcOverride = type { i32, i32, i32, float }
%struct.AVHWAccel = type { i8*, i32, i32, i32, i32, i32 (%struct.AVCodecContext*, %struct.AVFrame*)*, i32 (%struct.AVCodecContext*, i8*, i32)*, i32 (%struct.AVCodecContext*, i32, i8*, i32)*, i32 (%struct.AVCodecContext*, i8*, i32)*, i32 (%struct.AVCodecContext*)*, i32, void (%struct.MpegEncContext*)*, i32 (%struct.AVCodecContext*)*, i32 (%struct.AVCodecContext*)*, i32, i32, i32 (%struct.AVCodecContext*, %struct.AVBufferRef*)* }
%struct.MpegEncContext = type opaque
%struct.AVFrame = type { [8 x i8*], [8 x i32], i8**, i32, i32, i32, i32, i32, i32, %struct.AVRational, i64, i64, i64, i32, i32, i32, i8*, [8 x i64], i32, i32, i32, i32, i64, i32, i64, [8 x %struct.AVBufferRef*], %struct.AVBufferRef**, i32, %struct.AVFrameSideData**, i32, i32, i32, i32, i32, i32, i32, i64, i64, i64, %struct.AVDictionary*, i32, i32, i32, i8*, i32, i32, %struct.AVBufferRef*, %struct.AVBufferRef*, %struct.AVBufferRef*, i64, i64, i64, i64, %struct.AVBufferRef* }
%struct.AVFrameSideData = type { i32, i8*, i32, %struct.AVDictionary*, %struct.AVBufferRef* }
%struct.AVDictionary = type opaque
%struct.AVRational = type { i32, i32 }
%struct.AVCodecDescriptor = type { i32, i32, i8*, i8*, i32, i8**, %struct.AVProfile* }
%struct.AVPacketSideData = type { i8*, i32, i32 }
%struct.AVBufferRef = type { %struct.AVBuffer*, i8*, i32 }
%struct.AVBuffer = type opaque
%struct.AVCodecParser = type { [5 x i32], i32, {}*, i32 (%struct.AVCodecParserContext*, %struct.AVCodecContext*, i8**, i32*, i8*, i32)*, void (%struct.AVCodecParserContext*)*, i32 (%struct.AVCodecContext*, i8*, i32)*, %struct.AVCodecParser* }
%struct.AVVorbisParseContext = type { %struct.AVClass*, i32, i32, [2 x i32], i32, [64 x i32], i32, i32, i32 }
%struct.VorbisParseContext = type { %struct.AVVorbisParseContext* }

@.str = private unnamed_addr constant [16 x i8] c"Invalid packet\0A\00", align 1
@.str.1 = private unnamed_addr constant [24 x i8] c"Invalid mode in packet\0A\00", align 1
@ff_vorbis_parser = hidden local_unnamed_addr global { [5 x i32], i32, i32 (%struct.AVCodecParserContext*)*, i32 (%struct.AVCodecParserContext*, %struct.AVCodecContext*, i8**, i32*, i8*, i32)*, void (%struct.AVCodecParserContext*)*, i32 (%struct.AVCodecContext*, i8*, i32)*, %struct.AVCodecParser* } { [5 x i32] [i32 86021, i32 0, i32 0, i32 0, i32 0], i32 8, i32 (%struct.AVCodecParserContext*)* null, i32 (%struct.AVCodecParserContext*, %struct.AVCodecContext*, i8**, i32*, i8*, i32)* @vorbis_parse, void (%struct.AVCodecParserContext*)* @vorbis_parser_close, i32 (%struct.AVCodecContext*, i8*, i32)* null, %struct.AVCodecParser* null }, align 8
@vorbis_parser_class = internal constant %struct.AVClass { i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.3, i32 0, i32 0), i8* (i8*)* @av_default_item_name, %struct.AVOption* null, i32 3687524, i32 0, i32 0, i8* (i8*, i8*)* null, %struct.AVClass* (%struct.AVClass*)* null, i32 0, i32 (i8*)* null, i32 (%struct.AVOptionRanges**, i8*, i8*, i32)* null, %struct.AVClass* (i8**)* null }, align 8
@.str.2 = private unnamed_addr constant [20 x i8] c"Extradata corrupt.\0A\00", align 1
@.str.3 = private unnamed_addr constant [14 x i8] c"Vorbis parser\00", align 1
@.str.4 = private unnamed_addr constant [24 x i8] c"Id header is too short\0A\00", align 1
@.str.5 = private unnamed_addr constant [32 x i8] c"Wrong packet type in Id header\0A\00", align 1
@.str.6 = private unnamed_addr constant [7 x i8] c"vorbis\00", align 1
@.str.7 = private unnamed_addr constant [39 x i8] c"Invalid packet signature in Id header\0A\00", align 1
@.str.8 = private unnamed_addr constant [34 x i8] c"Invalid framing bit in Id header\0A\00", align 1
@.str.9 = private unnamed_addr constant [27 x i8] c"Setup header is too short\0A\00", align 1
@.str.10 = private unnamed_addr constant [35 x i8] c"Wrong packet type in Setup header\0A\00", align 1
@.str.11 = private unnamed_addr constant [42 x i8] c"Invalid packet signature in Setup header\0A\00", align 1
@.str.12 = private unnamed_addr constant [15 x i8] c"Out of memory\0A\00", align 1
@.str.13 = private unnamed_addr constant [22 x i8] c"Invalid Setup header\0A\00", align 1
@.str.14 = private unnamed_addr constant [71 x i8] c"%d modes (either a false positive or a sample from an unknown encoder)\00", align 1
@.str.15 = private unnamed_addr constant [28 x i8] c"Unsupported mode count: %d\0A\00", align 1

; Function Attrs: nounwind ssp uwtable
define hidden i32 @av_vorbis_parse_frame_flags(%struct.AVVorbisParseContext*, i8* nocapture readonly, i32, i32*) local_unnamed_addr #0 {
  %5 = getelementptr inbounds %struct.AVVorbisParseContext, %struct.AVVorbisParseContext* %0, i64 0, i32 2
  %6 = load i32, i32* %5, align 4
  %7 = icmp ne i32 %6, 0
  %8 = icmp sgt i32 %2, 0
  %9 = and i1 %8, %7
  br i1 %9, label %10, label %65

10:                                               ; preds = %4
  %11 = getelementptr inbounds %struct.AVVorbisParseContext, %struct.AVVorbisParseContext* %0, i64 0, i32 4
  %12 = load i32, i32* %11, align 8
  %13 = load i8, i8* %1, align 1
  %14 = zext i8 %13 to i32
  %15 = and i32 %14, 1
  %16 = icmp eq i32 %15, 0
  br i1 %16, label %31, label %17

17:                                               ; preds = %10
  %18 = icmp eq i32* %3, null
  br i1 %18, label %29, label %19

19:                                               ; preds = %17
  switch i8 %13, label %29 [
    i8 1, label %20
    i8 3, label %23
    i8 5, label %26
  ]

20:                                               ; preds = %19
  %21 = load i32, i32* %3, align 4
  %22 = or i32 %21, 1
  store i32 %22, i32* %3, align 4
  br label %65

23:                                               ; preds = %19
  %24 = load i32, i32* %3, align 4
  %25 = or i32 %24, 2
  store i32 %25, i32* %3, align 4
  br label %65

26:                                               ; preds = %19
  %27 = load i32, i32* %3, align 4
  %28 = or i32 %27, 4
  store i32 %28, i32* %3, align 4
  br label %65

29:                                               ; preds = %19, %17
  %30 = bitcast %struct.AVVorbisParseContext* %0 to i8*
  tail call void (i8*, i32, i8*, ...) @av_log(i8* %30, i32 16, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str, i64 0, i64 0)) #6
  br label %65

31:                                               ; preds = %10
  %32 = getelementptr inbounds %struct.AVVorbisParseContext, %struct.AVVorbisParseContext* %0, i64 0, i32 6
  %33 = load i32, i32* %32, align 4
  %34 = icmp eq i32 %33, 1
  br i1 %34, label %40, label %35

35:                                               ; preds = %31
  %36 = getelementptr inbounds %struct.AVVorbisParseContext, %struct.AVVorbisParseContext* %0, i64 0, i32 7
  %37 = load i32, i32* %36, align 8
  %38 = and i32 %37, %14
  %39 = lshr i32 %38, 1
  br label %40

40:                                               ; preds = %31, %35
  %41 = phi i32 [ %39, %35 ], [ 0, %31 ]
  %42 = icmp slt i32 %41, %33
  br i1 %42, label %45, label %43

43:                                               ; preds = %40
  %44 = bitcast %struct.AVVorbisParseContext* %0 to i8*
  tail call void (i8*, i32, i8*, ...) @av_log(i8* %44, i32 16, i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.1, i64 0, i64 0)) #6
  br label %65

45:                                               ; preds = %40
  %46 = zext i32 %41 to i64
  %47 = getelementptr inbounds %struct.AVVorbisParseContext, %struct.AVVorbisParseContext* %0, i64 0, i32 5, i64 %46
  %48 = load i32, i32* %47, align 4
  %49 = icmp eq i32 %48, 0
  br i1 %49, label %58, label %50

50:                                               ; preds = %45
  %51 = getelementptr inbounds %struct.AVVorbisParseContext, %struct.AVVorbisParseContext* %0, i64 0, i32 8
  %52 = load i32, i32* %51, align 4
  %53 = and i32 %52, %14
  %54 = icmp ne i32 %53, 0
  %55 = zext i1 %54 to i64
  %56 = getelementptr inbounds %struct.AVVorbisParseContext, %struct.AVVorbisParseContext* %0, i64 0, i32 3, i64 %55
  %57 = load i32, i32* %56, align 4
  br label %58

58:                                               ; preds = %50, %45
  %59 = phi i32 [ %57, %50 ], [ %12, %45 ]
  %60 = sext i32 %48 to i64
  %61 = getelementptr inbounds %struct.AVVorbisParseContext, %struct.AVVorbisParseContext* %0, i64 0, i32 3, i64 %60
  %62 = load i32, i32* %61, align 4
  %63 = add nsw i32 %62, %59
  %64 = ashr i32 %63, 2
  store i32 %62, i32* %11, align 8
  br label %65

65:                                               ; preds = %20, %26, %23, %43, %29, %4, %58
  %66 = phi i32 [ %64, %58 ], [ 0, %4 ], [ 0, %20 ], [ 0, %26 ], [ 0, %23 ], [ -1094995529, %43 ], [ -1094995529, %29 ]
  ret i32 %66
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

declare void @av_log(i8*, i32, i8*, ...) local_unnamed_addr #2

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: nounwind ssp uwtable
define hidden i32 @av_vorbis_parse_frame(%struct.AVVorbisParseContext*, i8* nocapture readonly, i32) local_unnamed_addr #0 {
  %4 = getelementptr inbounds %struct.AVVorbisParseContext, %struct.AVVorbisParseContext* %0, i64 0, i32 2
  %5 = load i32, i32* %4, align 4
  %6 = icmp ne i32 %5, 0
  %7 = icmp sgt i32 %2, 0
  %8 = and i1 %7, %6
  br i1 %8, label %9, label %52

9:                                                ; preds = %3
  %10 = getelementptr inbounds %struct.AVVorbisParseContext, %struct.AVVorbisParseContext* %0, i64 0, i32 4
  %11 = load i32, i32* %10, align 8
  %12 = load i8, i8* %1, align 1
  %13 = zext i8 %12 to i32
  %14 = and i32 %13, 1
  %15 = icmp eq i32 %14, 0
  br i1 %15, label %18, label %16

16:                                               ; preds = %9
  %17 = bitcast %struct.AVVorbisParseContext* %0 to i8*
  tail call void (i8*, i32, i8*, ...) @av_log(i8* %17, i32 16, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str, i64 0, i64 0)) #6
  br label %52

18:                                               ; preds = %9
  %19 = getelementptr inbounds %struct.AVVorbisParseContext, %struct.AVVorbisParseContext* %0, i64 0, i32 6
  %20 = load i32, i32* %19, align 4
  %21 = icmp eq i32 %20, 1
  br i1 %21, label %27, label %22

22:                                               ; preds = %18
  %23 = getelementptr inbounds %struct.AVVorbisParseContext, %struct.AVVorbisParseContext* %0, i64 0, i32 7
  %24 = load i32, i32* %23, align 8
  %25 = and i32 %24, %13
  %26 = lshr i32 %25, 1
  br label %27

27:                                               ; preds = %22, %18
  %28 = phi i32 [ %26, %22 ], [ 0, %18 ]
  %29 = icmp slt i32 %28, %20
  br i1 %29, label %32, label %30

30:                                               ; preds = %27
  %31 = bitcast %struct.AVVorbisParseContext* %0 to i8*
  tail call void (i8*, i32, i8*, ...) @av_log(i8* %31, i32 16, i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.1, i64 0, i64 0)) #6
  br label %52

32:                                               ; preds = %27
  %33 = zext i32 %28 to i64
  %34 = getelementptr inbounds %struct.AVVorbisParseContext, %struct.AVVorbisParseContext* %0, i64 0, i32 5, i64 %33
  %35 = load i32, i32* %34, align 4
  %36 = icmp eq i32 %35, 0
  br i1 %36, label %45, label %37

37:                                               ; preds = %32
  %38 = getelementptr inbounds %struct.AVVorbisParseContext, %struct.AVVorbisParseContext* %0, i64 0, i32 8
  %39 = load i32, i32* %38, align 4
  %40 = and i32 %39, %13
  %41 = icmp ne i32 %40, 0
  %42 = zext i1 %41 to i64
  %43 = getelementptr inbounds %struct.AVVorbisParseContext, %struct.AVVorbisParseContext* %0, i64 0, i32 3, i64 %42
  %44 = load i32, i32* %43, align 4
  br label %45

45:                                               ; preds = %37, %32
  %46 = phi i32 [ %44, %37 ], [ %11, %32 ]
  %47 = sext i32 %35 to i64
  %48 = getelementptr inbounds %struct.AVVorbisParseContext, %struct.AVVorbisParseContext* %0, i64 0, i32 3, i64 %47
  %49 = load i32, i32* %48, align 4
  %50 = add nsw i32 %49, %46
  %51 = ashr i32 %50, 2
  store i32 %49, i32* %10, align 8
  br label %52

52:                                               ; preds = %3, %16, %30, %45
  %53 = phi i32 [ %51, %45 ], [ 0, %3 ], [ -1094995529, %30 ], [ -1094995529, %16 ]
  ret i32 %53
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @av_vorbis_parse_reset(%struct.AVVorbisParseContext* nocapture) local_unnamed_addr #3 {
  %2 = getelementptr inbounds %struct.AVVorbisParseContext, %struct.AVVorbisParseContext* %0, i64 0, i32 2
  %3 = load i32, i32* %2, align 4
  %4 = icmp eq i32 %3, 0
  br i1 %4, label %9, label %5

5:                                                ; preds = %1
  %6 = getelementptr inbounds %struct.AVVorbisParseContext, %struct.AVVorbisParseContext* %0, i64 0, i32 3, i64 0
  %7 = load i32, i32* %6, align 8
  %8 = getelementptr inbounds %struct.AVVorbisParseContext, %struct.AVVorbisParseContext* %0, i64 0, i32 4
  store i32 %7, i32* %8, align 8
  br label %9

9:                                                ; preds = %1, %5
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @av_vorbis_parse_free(%struct.AVVorbisParseContext**) local_unnamed_addr #0 {
  %2 = bitcast %struct.AVVorbisParseContext** %0 to i8*
  tail call void @av_freep(i8* %2) #6
  ret void
}

declare void @av_freep(i8*) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden %struct.AVVorbisParseContext* @av_vorbis_parse_init(i8*, i32) local_unnamed_addr #0 {
  %3 = alloca [3 x i8*], align 16
  %4 = alloca [3 x i32], align 4
  %5 = alloca %struct.AVVorbisParseContext*, align 8
  %6 = bitcast %struct.AVVorbisParseContext** %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %6) #6
  %7 = tail call noalias i8* @av_mallocz(i64 296) #6
  %8 = bitcast %struct.AVVorbisParseContext** %5 to i8**
  store i8* %7, i8** %8, align 8
  %9 = icmp eq i8* %7, null
  br i1 %9, label %282, label %10

10:                                               ; preds = %2
  %11 = bitcast i8* %7 to %struct.AVVorbisParseContext*
  %12 = bitcast [3 x i8*]* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %12) #6
  %13 = getelementptr inbounds [3 x i8*], [3 x i8*]* %3, i64 0, i64 0
  %14 = getelementptr inbounds [3 x i8*], [3 x i8*]* %3, i64 0, i64 2
  %15 = bitcast [3 x i32]* %4 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %12, i8 -86, i64 24, i1 false) #6
  call void @llvm.lifetime.start.p0i8(i64 12, i8* nonnull %15) #6
  %16 = getelementptr inbounds [3 x i32], [3 x i32]* %4, i64 0, i64 0
  store i32 -1431655766, i32* %16, align 4
  %17 = getelementptr inbounds [3 x i32], [3 x i32]* %4, i64 0, i64 1
  store i32 -1431655766, i32* %17, align 4
  %18 = getelementptr inbounds [3 x i32], [3 x i32]* %4, i64 0, i64 2
  store i32 -1431655766, i32* %18, align 4
  %19 = bitcast i8* %7 to %struct.AVClass**
  store %struct.AVClass* @vorbis_parser_class, %struct.AVClass** %19, align 8
  %20 = getelementptr inbounds i8, i8* %7, i64 8
  %21 = bitcast i8* %20 to i32*
  store i32 1, i32* %21, align 8
  %22 = call i32 @avpriv_split_xiph_headers(i8* %0, i32 %1, i32 30, i8** nonnull %13, i32* nonnull %16) #6
  %23 = icmp slt i32 %22, 0
  br i1 %23, label %24, label %25

24:                                               ; preds = %10
  call void (i8*, i32, i8*, ...) @av_log(i8* nonnull %7, i32 16, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.2, i64 0, i64 0)) #6
  br label %269

25:                                               ; preds = %10
  %26 = load i8*, i8** %13, align 16
  %27 = load i32, i32* %16, align 4
  %28 = icmp slt i32 %27, 30
  br i1 %28, label %29, label %30

29:                                               ; preds = %25
  call void (i8*, i32, i8*, ...) @av_log(i8* nonnull %7, i32 16, i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.4, i64 0, i64 0)) #6
  br label %269

30:                                               ; preds = %25
  %31 = load i8, i8* %26, align 1
  %32 = icmp eq i8 %31, 1
  br i1 %32, label %34, label %33

33:                                               ; preds = %30
  call void (i8*, i32, i8*, ...) @av_log(i8* nonnull %7, i32 16, i8* getelementptr inbounds ([32 x i8], [32 x i8]* @.str.5, i64 0, i64 0)) #6
  br label %269

34:                                               ; preds = %30
  %35 = getelementptr inbounds i8, i8* %26, i64 1
  %36 = call i32 @bcmp(i8* %35, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.6, i64 0, i64 0), i64 6) #6
  %37 = icmp eq i32 %36, 0
  br i1 %37, label %39, label %38

38:                                               ; preds = %34
  call void (i8*, i32, i8*, ...) @av_log(i8* nonnull %7, i32 16, i8* getelementptr inbounds ([39 x i8], [39 x i8]* @.str.7, i64 0, i64 0)) #6
  br label %269

39:                                               ; preds = %34
  %40 = getelementptr inbounds i8, i8* %26, i64 29
  %41 = load i8, i8* %40, align 1
  %42 = and i8 %41, 1
  %43 = icmp eq i8 %42, 0
  br i1 %43, label %44, label %45

44:                                               ; preds = %39
  call void (i8*, i32, i8*, ...) @av_log(i8* nonnull %7, i32 16, i8* getelementptr inbounds ([34 x i8], [34 x i8]* @.str.8, i64 0, i64 0)) #6
  br label %269

45:                                               ; preds = %39
  %46 = getelementptr inbounds i8, i8* %26, i64 28
  %47 = load i8, i8* %46, align 1
  %48 = and i8 %47, 15
  %49 = zext i8 %48 to i32
  %50 = shl i32 1, %49
  %51 = getelementptr inbounds i8, i8* %7, i64 16
  %52 = bitcast i8* %51 to i32*
  store i32 %50, i32* %52, align 8
  %53 = load i8, i8* %46, align 1
  %54 = lshr i8 %53, 4
  %55 = zext i8 %54 to i32
  %56 = shl i32 1, %55
  %57 = getelementptr inbounds i8, i8* %7, i64 20
  %58 = bitcast i8* %57 to i32*
  store i32 %56, i32* %58, align 4
  %59 = load i8*, i8** %14, align 16
  %60 = load i32, i32* %18, align 4
  %61 = icmp slt i32 %60, 7
  br i1 %61, label %62, label %63

62:                                               ; preds = %45
  call void (i8*, i32, i8*, ...) @av_log(i8* nonnull %7, i32 16, i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.9, i64 0, i64 0)) #6
  br label %269

63:                                               ; preds = %45
  %64 = load i8, i8* %59, align 1
  %65 = icmp eq i8 %64, 5
  br i1 %65, label %67, label %66

66:                                               ; preds = %63
  call void (i8*, i32, i8*, ...) @av_log(i8* nonnull %7, i32 16, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.10, i64 0, i64 0)) #6
  br label %269

67:                                               ; preds = %63
  %68 = getelementptr inbounds i8, i8* %59, i64 1
  %69 = call i32 @bcmp(i8* %68, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.6, i64 0, i64 0), i64 6) #6
  %70 = icmp eq i32 %69, 0
  br i1 %70, label %72, label %71

71:                                               ; preds = %67
  call void (i8*, i32, i8*, ...) @av_log(i8* nonnull %7, i32 16, i8* getelementptr inbounds ([42 x i8], [42 x i8]* @.str.11, i64 0, i64 0)) #6
  br label %269

72:                                               ; preds = %67
  %73 = sext i32 %60 to i64
  %74 = call noalias i8* @av_malloc(i64 %73) #6
  %75 = icmp eq i8* %74, null
  br i1 %75, label %82, label %76

76:                                               ; preds = %72
  %77 = zext i32 %60 to i64
  %78 = and i64 %77, 1
  %79 = icmp eq i32 %60, 1
  br i1 %79, label %104, label %80

80:                                               ; preds = %76
  %81 = sub nsw i64 %77, %78
  br label %83

82:                                               ; preds = %72
  call void (i8*, i32, i8*, ...) @av_log(i8* nonnull %7, i32 16, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.12, i64 0, i64 0)) #6
  br label %269

83:                                               ; preds = %83, %80
  %84 = phi i64 [ 0, %80 ], [ %101, %83 ]
  %85 = phi i64 [ %81, %80 ], [ %102, %83 ]
  %86 = trunc i64 %84 to i32
  %87 = xor i32 %86, -1
  %88 = add i32 %60, %87
  %89 = sext i32 %88 to i64
  %90 = getelementptr inbounds i8, i8* %59, i64 %89
  %91 = load i8, i8* %90, align 1
  %92 = getelementptr inbounds i8, i8* %74, i64 %84
  store i8 %91, i8* %92, align 1
  %93 = or i64 %84, 1
  %94 = trunc i64 %93 to i32
  %95 = xor i32 %94, -1
  %96 = add i32 %60, %95
  %97 = sext i32 %96 to i64
  %98 = getelementptr inbounds i8, i8* %59, i64 %97
  %99 = load i8, i8* %98, align 1
  %100 = getelementptr inbounds i8, i8* %74, i64 %93
  store i8 %99, i8* %100, align 1
  %101 = add nuw nsw i64 %84, 2
  %102 = add i64 %85, -2
  %103 = icmp eq i64 %102, 0
  br i1 %103, label %104, label %83

104:                                              ; preds = %83, %76
  %105 = phi i64 [ 0, %76 ], [ %101, %83 ]
  %106 = icmp eq i64 %78, 0
  br i1 %106, label %115, label %107

107:                                              ; preds = %104
  %108 = trunc i64 %105 to i32
  %109 = xor i32 %108, -1
  %110 = add i32 %60, %109
  %111 = sext i32 %110 to i64
  %112 = getelementptr inbounds i8, i8* %59, i64 %111
  %113 = load i8, i8* %112, align 1
  %114 = getelementptr inbounds i8, i8* %74, i64 %105
  store i8 %113, i8* %114, align 1
  br label %115

115:                                              ; preds = %104, %107
  %116 = shl nsw i32 %60, 3
  %117 = icmp ult i32 %116, 2147483135
  %118 = select i1 %117, i32 %116, i32 0
  %119 = select i1 %117, i8* %74, i8* null
  %120 = add nuw nsw i32 %118, 8
  br label %121

121:                                              ; preds = %125, %115
  %122 = phi i32 [ 0, %115 ], [ %135, %125 ]
  %123 = sub nsw i32 %118, %122
  %124 = icmp sgt i32 %123, 97
  br i1 %124, label %125, label %143

125:                                              ; preds = %121
  %126 = lshr i32 %122, 3
  %127 = zext i32 %126 to i64
  %128 = getelementptr inbounds i8, i8* %119, i64 %127
  %129 = load i8, i8* %128, align 1
  %130 = and i32 %122, 7
  %131 = zext i8 %129 to i32
  %132 = shl i32 %131, %130
  %133 = icmp slt i32 %122, %120
  %134 = zext i1 %133 to i32
  %135 = add i32 %122, %134
  %136 = trunc i32 %132 to i8
  %137 = icmp sgt i8 %136, -1
  br i1 %137, label %121, label %138

138:                                              ; preds = %125
  %139 = icmp eq i32 %135, 0
  br i1 %139, label %143, label %140

140:                                              ; preds = %138
  %141 = sub nsw i32 %118, %135
  %142 = icmp sgt i32 %141, 96
  br i1 %142, label %144, label %215

143:                                              ; preds = %121, %138
  call void (i8*, i32, i8*, ...) @av_log(i8* nonnull %7, i32 16, i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.13, i64 0, i64 0)) #6
  br label %268

144:                                              ; preds = %140, %196
  %145 = phi i32 [ %208, %196 ], [ 0, %140 ]
  %146 = phi i32 [ %207, %196 ], [ 0, %140 ]
  %147 = phi i32 [ %194, %196 ], [ 0, %140 ]
  %148 = phi i32 [ %193, %196 ], [ %135, %140 ]
  %149 = lshr i32 %148, 3
  %150 = zext i32 %149 to i64
  %151 = getelementptr inbounds i8, i8* %119, i64 %150
  %152 = bitcast i8* %151 to i32*
  %153 = load i32, i32* %152, align 1
  %154 = call i32 asm "bswap   $0", "=r,0,~{dirflag},~{fpsr},~{flags}"(i32 %153) #7, !srcloc !2
  %155 = and i32 %148, 7
  %156 = shl i32 %154, %155
  %157 = call i32 asm "shrl $1, $0\0A\09", "=r,i{cx},0,~{dirflag},~{fpsr},~{flags}"(i8 -8, i32 %156) #7, !srcloc !3
  %158 = add i32 %148, 8
  %159 = icmp ugt i32 %120, %158
  %160 = select i1 %159, i32 %158, i32 %120
  %161 = icmp ugt i32 %157, 63
  br i1 %161, label %211, label %162

162:                                              ; preds = %144
  %163 = lshr i32 %160, 3
  %164 = zext i32 %163 to i64
  %165 = getelementptr inbounds i8, i8* %119, i64 %164
  %166 = bitcast i8* %165 to i32*
  %167 = load i32, i32* %166, align 1
  %168 = call i32 asm "bswap   $0", "=r,0,~{dirflag},~{fpsr},~{flags}"(i32 %167) #7, !srcloc !2
  %169 = and i32 %160, 7
  %170 = shl i32 %168, %169
  %171 = call i32 asm "shrl $1, $0\0A\09", "=r,i{cx},0,~{dirflag},~{fpsr},~{flags}"(i8 -16, i32 %170) #7, !srcloc !3
  %172 = add i32 %160, 16
  %173 = icmp ugt i32 %120, %172
  %174 = select i1 %173, i32 %172, i32 %120
  %175 = icmp eq i32 %171, 0
  br i1 %175, label %176, label %211

176:                                              ; preds = %162
  %177 = lshr i32 %174, 3
  %178 = zext i32 %177 to i64
  %179 = getelementptr inbounds i8, i8* %119, i64 %178
  %180 = bitcast i8* %179 to i32*
  %181 = load i32, i32* %180, align 1
  %182 = call i32 asm "bswap   $0", "=r,0,~{dirflag},~{fpsr},~{flags}"(i32 %181) #7, !srcloc !2
  %183 = and i32 %174, 7
  %184 = shl i32 %182, %183
  %185 = call i32 asm "shrl $1, $0\0A\09", "=r,i{cx},0,~{dirflag},~{fpsr},~{flags}"(i8 -16, i32 %184) #7, !srcloc !3
  %186 = add i32 %174, 16
  %187 = icmp eq i32 %185, 0
  br i1 %187, label %188, label %211

188:                                              ; preds = %176
  %189 = icmp ugt i32 %120, %186
  %190 = select i1 %189, i32 %186, i32 %120
  %191 = add i32 %190, 1
  %192 = icmp ugt i32 %120, %191
  %193 = select i1 %192, i32 %191, i32 %120
  %194 = add nuw nsw i32 %147, 1
  %195 = icmp eq i32 %147, 64
  br i1 %195, label %211, label %196

196:                                              ; preds = %188
  %197 = lshr i32 %193, 3
  %198 = zext i32 %197 to i64
  %199 = getelementptr inbounds i8, i8* %119, i64 %198
  %200 = bitcast i8* %199 to i32*
  %201 = load i32, i32* %200, align 1
  %202 = call i32 asm "bswap   $0", "=r,0,~{dirflag},~{fpsr},~{flags}"(i32 %201) #7, !srcloc !2
  %203 = and i32 %193, 7
  %204 = shl i32 %202, %203
  %205 = call i32 asm "shrl $1, $0\0A\09", "=r,i{cx},0,~{dirflag},~{fpsr},~{flags}"(i8 -6, i32 %204) #7, !srcloc !3
  %206 = icmp eq i32 %205, %147
  %207 = select i1 %206, i32 1, i32 %146
  %208 = select i1 %206, i32 %194, i32 %145
  %209 = sub nsw i32 %118, %193
  %210 = icmp sgt i32 %209, 96
  br i1 %210, label %144, label %211

211:                                              ; preds = %196, %188, %176, %162, %144
  %212 = phi i32 [ %207, %196 ], [ %146, %144 ], [ %146, %188 ], [ %146, %162 ], [ %146, %176 ]
  %213 = phi i32 [ %208, %196 ], [ %145, %144 ], [ %145, %188 ], [ %145, %162 ], [ %145, %176 ]
  %214 = icmp eq i32 %212, 0
  br i1 %214, label %215, label %216

215:                                              ; preds = %211, %140
  call void (i8*, i32, i8*, ...) @av_log(i8* nonnull %7, i32 16, i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.13, i64 0, i64 0)) #6
  br label %268

216:                                              ; preds = %211
  %217 = icmp sgt i32 %213, 2
  br i1 %217, label %218, label %221

218:                                              ; preds = %216
  call void (i8*, i8*, ...) @avpriv_request_sample(i8* %7, i8* getelementptr inbounds ([71 x i8], [71 x i8]* @.str.14, i64 0, i64 0), i32 %213) #6
  %219 = icmp sgt i32 %213, 63
  br i1 %219, label %220, label %221

220:                                              ; preds = %218
  call void (i8*, i32, i8*, ...) @av_log(i8* %7, i32 16, i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.15, i64 0, i64 0), i32 %213) #6
  br label %268

221:                                              ; preds = %218, %216
  %222 = getelementptr inbounds i8, i8* %7, i64 284
  %223 = bitcast i8* %222 to i32*
  store i32 %213, i32* %223, align 4
  %224 = add nsw i32 %213, -1
  %225 = or i32 %224, 1
  %226 = call i32 @llvm.ctlz.i32(i32 %225, i1 true) #6, !range !4
  %227 = sub nuw nsw i32 32, %226
  %228 = shl i32 -2, %227
  %229 = xor i32 %228, -2
  %230 = getelementptr inbounds i8, i8* %7, i64 288
  %231 = bitcast i8* %230 to i32*
  store i32 %229, i32* %231, align 8
  %232 = or i32 %229, 1
  %233 = add nsw i32 %232, 1
  %234 = getelementptr inbounds i8, i8* %7, i64 292
  %235 = bitcast i8* %234 to i32*
  store i32 %233, i32* %235, align 4
  %236 = icmp sgt i32 %213, 0
  br i1 %236, label %237, label %270

237:                                              ; preds = %221
  %238 = icmp slt i32 %135, 0
  %239 = icmp slt i32 %120, %135
  %240 = select i1 %239, i32 %120, i32 %135
  %241 = select i1 %238, i32 0, i32 %240
  %242 = sext i32 %213 to i64
  br label %243

243:                                              ; preds = %243, %237
  %244 = phi i64 [ %242, %237 ], [ %246, %243 ]
  %245 = phi i32 [ %241, %237 ], [ %265, %243 ]
  %246 = add nsw i64 %244, -1
  %247 = sub nsw i32 0, %245
  %248 = sub nsw i32 %120, %245
  %249 = icmp slt i32 %245, -40
  %250 = icmp slt i32 %248, 40
  %251 = select i1 %250, i32 %248, i32 40
  %252 = select i1 %249, i32 %247, i32 %251
  %253 = add nsw i32 %252, %245
  %254 = lshr i32 %253, 3
  %255 = zext i32 %254 to i64
  %256 = getelementptr inbounds i8, i8* %119, i64 %255
  %257 = load i8, i8* %256, align 1
  %258 = and i32 %253, 7
  %259 = zext i8 %257 to i32
  %260 = shl i32 %259, %258
  %261 = lshr i32 %260, 7
  %262 = and i32 %261, 1
  %263 = icmp slt i32 %253, %120
  %264 = zext i1 %263 to i32
  %265 = add i32 %253, %264
  %266 = getelementptr inbounds %struct.AVVorbisParseContext, %struct.AVVorbisParseContext* %11, i64 0, i32 5, i64 %246
  store i32 %262, i32* %266, align 4
  %267 = icmp sgt i64 %246, 0
  br i1 %267, label %243, label %270

268:                                              ; preds = %220, %215, %143
  call void @av_free(i8* nonnull %74) #6
  br label %269

269:                                              ; preds = %24, %268, %29, %33, %38, %44, %82, %71, %66, %62
  call void @llvm.lifetime.end.p0i8(i64 12, i8* nonnull %15) #6
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %12) #6
  call void @av_freep(i8* nonnull %6) #6
  br label %282

270:                                              ; preds = %243, %221
  call void @av_free(i8* nonnull %74) #6
  %271 = getelementptr inbounds i8, i8* %7, i64 12
  %272 = bitcast i8* %271 to i32*
  store i32 1, i32* %272, align 4
  %273 = getelementptr inbounds i8, i8* %7, i64 28
  %274 = bitcast i8* %273 to i32*
  %275 = load i32, i32* %274, align 4
  %276 = sext i32 %275 to i64
  %277 = getelementptr inbounds %struct.AVVorbisParseContext, %struct.AVVorbisParseContext* %11, i64 0, i32 3, i64 %276
  %278 = load i32, i32* %277, align 4
  %279 = getelementptr inbounds i8, i8* %7, i64 24
  %280 = bitcast i8* %279 to i32*
  store i32 %278, i32* %280, align 8
  call void @llvm.lifetime.end.p0i8(i64 12, i8* nonnull %15) #6
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %12) #6
  %281 = load %struct.AVVorbisParseContext*, %struct.AVVorbisParseContext** %5, align 8
  br label %282

282:                                              ; preds = %2, %270, %269
  %283 = phi %struct.AVVorbisParseContext* [ null, %269 ], [ %281, %270 ], [ null, %2 ]
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %6) #6
  ret %struct.AVVorbisParseContext* %283
}

declare noalias i8* @av_mallocz(i64) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define internal i32 @vorbis_parse(%struct.AVCodecParserContext* nocapture, %struct.AVCodecContext* nocapture readonly, i8** nocapture, i32* nocapture, i8*, i32 returned) #0 {
  %7 = bitcast %struct.AVCodecParserContext* %0 to %struct.VorbisParseContext**
  %8 = load %struct.VorbisParseContext*, %struct.VorbisParseContext** %7, align 8
  %9 = getelementptr inbounds %struct.VorbisParseContext, %struct.VorbisParseContext* %8, i64 0, i32 0
  %10 = load %struct.AVVorbisParseContext*, %struct.AVVorbisParseContext** %9, align 8
  %11 = icmp eq %struct.AVVorbisParseContext* %10, null
  br i1 %11, label %12, label %23

12:                                               ; preds = %6
  %13 = getelementptr inbounds %struct.AVCodecContext, %struct.AVCodecContext* %1, i64 0, i32 15
  %14 = load i8*, i8** %13, align 8
  %15 = icmp eq i8* %14, null
  br i1 %15, label %77, label %16

16:                                               ; preds = %12
  %17 = getelementptr inbounds %struct.AVCodecContext, %struct.AVCodecContext* %1, i64 0, i32 16
  %18 = load i32, i32* %17, align 8
  %19 = icmp eq i32 %18, 0
  br i1 %19, label %77, label %20

20:                                               ; preds = %16
  %21 = tail call %struct.AVVorbisParseContext* @av_vorbis_parse_init(i8* nonnull %14, i32 %18)
  store %struct.AVVorbisParseContext* %21, %struct.AVVorbisParseContext** %9, align 8
  %22 = icmp eq %struct.AVVorbisParseContext* %21, null
  br i1 %22, label %77, label %23

23:                                               ; preds = %6, %20
  %24 = phi %struct.AVVorbisParseContext* [ %21, %20 ], [ %10, %6 ]
  %25 = getelementptr inbounds %struct.AVVorbisParseContext, %struct.AVVorbisParseContext* %24, i64 0, i32 2
  %26 = load i32, i32* %25, align 4
  %27 = icmp ne i32 %26, 0
  %28 = icmp sgt i32 %5, 0
  %29 = and i1 %28, %27
  br i1 %29, label %30, label %74

30:                                               ; preds = %23
  %31 = getelementptr inbounds %struct.AVVorbisParseContext, %struct.AVVorbisParseContext* %24, i64 0, i32 4
  %32 = load i32, i32* %31, align 8
  %33 = load i8, i8* %4, align 1
  %34 = zext i8 %33 to i32
  %35 = and i32 %34, 1
  %36 = icmp eq i32 %35, 0
  br i1 %36, label %39, label %37

37:                                               ; preds = %30
  %38 = bitcast %struct.AVVorbisParseContext* %24 to i8*
  tail call void (i8*, i32, i8*, ...) @av_log(i8* %38, i32 16, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str, i64 0, i64 0)) #6
  br label %77

39:                                               ; preds = %30
  %40 = getelementptr inbounds %struct.AVVorbisParseContext, %struct.AVVorbisParseContext* %24, i64 0, i32 6
  %41 = load i32, i32* %40, align 4
  %42 = icmp eq i32 %41, 1
  br i1 %42, label %48, label %43

43:                                               ; preds = %39
  %44 = getelementptr inbounds %struct.AVVorbisParseContext, %struct.AVVorbisParseContext* %24, i64 0, i32 7
  %45 = load i32, i32* %44, align 8
  %46 = and i32 %45, %34
  %47 = lshr i32 %46, 1
  br label %48

48:                                               ; preds = %43, %39
  %49 = phi i32 [ %47, %43 ], [ 0, %39 ]
  %50 = icmp slt i32 %49, %41
  br i1 %50, label %53, label %51

51:                                               ; preds = %48
  %52 = bitcast %struct.AVVorbisParseContext* %24 to i8*
  tail call void (i8*, i32, i8*, ...) @av_log(i8* %52, i32 16, i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.1, i64 0, i64 0)) #6
  br label %77

53:                                               ; preds = %48
  %54 = zext i32 %49 to i64
  %55 = getelementptr inbounds %struct.AVVorbisParseContext, %struct.AVVorbisParseContext* %24, i64 0, i32 5, i64 %54
  %56 = load i32, i32* %55, align 4
  %57 = icmp eq i32 %56, 0
  br i1 %57, label %66, label %58

58:                                               ; preds = %53
  %59 = getelementptr inbounds %struct.AVVorbisParseContext, %struct.AVVorbisParseContext* %24, i64 0, i32 8
  %60 = load i32, i32* %59, align 4
  %61 = and i32 %60, %34
  %62 = icmp ne i32 %61, 0
  %63 = zext i1 %62 to i64
  %64 = getelementptr inbounds %struct.AVVorbisParseContext, %struct.AVVorbisParseContext* %24, i64 0, i32 3, i64 %63
  %65 = load i32, i32* %64, align 4
  br label %66

66:                                               ; preds = %53, %58
  %67 = phi i32 [ %65, %58 ], [ %32, %53 ]
  %68 = sext i32 %56 to i64
  %69 = getelementptr inbounds %struct.AVVorbisParseContext, %struct.AVVorbisParseContext* %24, i64 0, i32 3, i64 %68
  %70 = load i32, i32* %69, align 4
  %71 = add nsw i32 %70, %67
  %72 = ashr i32 %71, 2
  store i32 %70, i32* %31, align 8
  %73 = icmp sgt i32 %71, -1
  br i1 %73, label %74, label %77

74:                                               ; preds = %23, %66
  %75 = phi i32 [ %72, %66 ], [ 0, %23 ]
  %76 = getelementptr inbounds %struct.AVCodecParserContext, %struct.AVCodecParserContext* %0, i64 0, i32 27
  store i32 %75, i32* %76, align 8
  br label %77

77:                                               ; preds = %16, %12, %37, %51, %20, %66, %74
  store i8* %4, i8** %2, align 8
  store i32 %5, i32* %3, align 4
  ret i32 %5
}

; Function Attrs: nounwind ssp uwtable
define internal void @vorbis_parser_close(%struct.AVCodecParserContext* nocapture readonly) #0 {
  %2 = getelementptr inbounds %struct.AVCodecParserContext, %struct.AVCodecParserContext* %0, i64 0, i32 0
  %3 = load i8*, i8** %2, align 8
  tail call void @av_freep(i8* %3) #6
  ret void
}

declare i32 @avpriv_split_xiph_headers(i8*, i32, i32, i8**, i32*) local_unnamed_addr #2

declare i8* @av_default_item_name(i8*) #2

declare noalias i8* @av_malloc(i64) local_unnamed_addr #2

declare void @avpriv_request_sample(i8*, i8*, ...) local_unnamed_addr #2

; Function Attrs: nounwind readnone speculatable
declare i32 @llvm.ctlz.i32(i32, i1 immarg) #4

declare void @av_free(i8*) local_unnamed_addr #2

; Function Attrs: nofree nounwind readonly
declare i32 @bcmp(i8* nocapture, i8* nocapture, i64) local_unnamed_addr #5

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="true" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="true" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nofree norecurse nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="true" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind readnone speculatable }
attributes #5 = { nofree nounwind readonly }
attributes #6 = { nounwind }
attributes #7 = { nounwind readnone }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{i32 1456467}
!3 = !{i32 1812106, i32 1812120}
!4 = !{i32 0, i32 32}
