; ModuleID = '../../third_party/skia/src/core/SkConvertPixels.cpp'
source_filename = "../../third_party/skia/src/core/SkConvertPixels.cpp"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"struct.SkColorSpaceXformSteps::Flags" = type { i8, i8, i8, i8, i8 }
%struct.skcms_TransferFunction = type { float, float, float, float, float, float, float }
%struct.SkImageInfo = type { %class.SkColorInfo, %struct.SkISize }
%class.SkColorInfo = type { %class.sk_sp, i32, i32 }
%class.sk_sp = type { %class.SkColorSpace* }
%class.SkColorSpace = type <{ %class.SkNVRefCnt, i32, i32, %struct.skcms_TransferFunction, %struct.skcms_Matrix3x3, %struct.skcms_TransferFunction, %struct.skcms_Matrix3x3, %class.SkOnce, [3 x i8] }>
%class.SkNVRefCnt = type { %"struct.std::__1::atomic" }
%"struct.std::__1::atomic" = type { %"struct.std::__1::__atomic_base" }
%"struct.std::__1::__atomic_base" = type { %"struct.std::__1::__atomic_base.0" }
%"struct.std::__1::__atomic_base.0" = type { %"struct.std::__1::__cxx_atomic_impl" }
%"struct.std::__1::__cxx_atomic_impl" = type { %"struct.std::__1::__cxx_atomic_base_impl" }
%"struct.std::__1::__cxx_atomic_base_impl" = type { i32 }
%struct.skcms_Matrix3x3 = type { [3 x [3 x float]] }
%class.SkOnce = type { %"struct.std::__1::atomic.1" }
%"struct.std::__1::atomic.1" = type { %"struct.std::__1::__atomic_base.2" }
%"struct.std::__1::__atomic_base.2" = type { %"struct.std::__1::__atomic_base.3" }
%"struct.std::__1::__atomic_base.3" = type { %"struct.std::__1::__cxx_atomic_impl.4" }
%"struct.std::__1::__cxx_atomic_impl.4" = type { %"struct.std::__1::__cxx_atomic_base_impl.5" }
%"struct.std::__1::__cxx_atomic_base_impl.5" = type { i8 }
%struct.SkISize = type { i32, i32 }
%struct.SkRasterPipeline_MemoryCtx = type { i8*, i32 }
%class.SkRasterPipeline_ = type { %class.SkRasterPipeline, %class.SkSTArenaAlloc }
%class.SkRasterPipeline = type { %class.SkArenaAlloc*, %"struct.SkRasterPipeline::StageList"*, i32, i32 }
%class.SkArenaAlloc = type <{ i8*, i8*, i8*, %class.SkFibBlockSizes, [4 x i8] }>
%class.SkFibBlockSizes = type { i32 }
%"struct.SkRasterPipeline::StageList" = type { %"struct.SkRasterPipeline::StageList"*, i32, i8* }
%class.SkSTArenaAlloc = type { %"struct.std::__1::array", %class.SkArenaAlloc.base, [4 x i8] }
%"struct.std::__1::array" = type { [256 x i8] }
%class.SkArenaAlloc.base = type <{ i8*, i8*, i8*, %class.SkFibBlockSizes }>
%struct.SkColorSpaceXformSteps = type { %"struct.SkColorSpaceXformSteps::Flags", %struct.skcms_TransferFunction, %struct.skcms_TransferFunction, [9 x float] }

@__const._Z15SkConvertPixelsRK11SkImageInfoPvmS1_PKvm.steps = private unnamed_addr constant { %"struct.SkColorSpaceXformSteps::Flags", [3 x i8], %struct.skcms_TransferFunction, %struct.skcms_TransferFunction, [9 x float] } { %"struct.SkColorSpaceXformSteps::Flags" { i8 -86, i8 -86, i8 -86, i8 -86, i8 -86 }, [3 x i8] c"\AA\AA\AA", %struct.skcms_TransferFunction { float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000 }, %struct.skcms_TransferFunction { float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000 }, [9 x float] [float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000] }, align 4
@_ZN6SkOpts12RGBA_to_bgrAE = external local_unnamed_addr global void (i32*, i32*, i32)*, align 8
@_ZN6SkOpts12RGBA_to_rgbAE = external local_unnamed_addr global void (i32*, i32*, i32)*, align 8
@_ZN6SkOpts12RGBA_to_BGRAE = external local_unnamed_addr global void (i32*, i32*, i32)*, align 8

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_Z15SkConvertPixelsRK11SkImageInfoPvmS1_PKvm(%struct.SkImageInfo* dereferenceable(24), i8*, i64, %struct.SkImageInfo* dereferenceable(24), i8*, i64) local_unnamed_addr #0 {
  %7 = alloca %struct.SkRasterPipeline_MemoryCtx, align 8
  %8 = alloca %struct.SkRasterPipeline_MemoryCtx, align 8
  %9 = alloca %class.SkRasterPipeline_, align 8
  %10 = alloca %struct.SkColorSpaceXformSteps, align 4
  %11 = getelementptr inbounds %struct.SkImageInfo, %struct.SkImageInfo* %3, i64 0, i32 0
  %12 = tail call i32 @_ZNK11SkColorInfo13bytesPerPixelEv(%class.SkColorInfo* %11) #4
  %13 = sext i32 %12 to i64
  %14 = udiv i64 %5, %13
  %15 = trunc i64 %14 to i32
  %16 = getelementptr inbounds %struct.SkImageInfo, %struct.SkImageInfo* %0, i64 0, i32 0
  %17 = tail call i32 @_ZNK11SkColorInfo13bytesPerPixelEv(%class.SkColorInfo* %16) #4
  %18 = sext i32 %17 to i64
  %19 = udiv i64 %2, %18
  %20 = trunc i64 %19 to i32
  %21 = shl i64 %14, 32
  %22 = ashr exact i64 %21, 32
  %23 = tail call i32 @_ZNK11SkColorInfo13bytesPerPixelEv(%class.SkColorInfo* %11) #4
  %24 = sext i32 %23 to i64
  %25 = mul nsw i64 %22, %24
  %26 = icmp eq i64 %25, %5
  br i1 %26, label %27, label %48

27:                                               ; preds = %6
  %28 = shl i64 %19, 32
  %29 = ashr exact i64 %28, 32
  %30 = tail call i32 @_ZNK11SkColorInfo13bytesPerPixelEv(%class.SkColorInfo* %16) #4
  %31 = sext i32 %30 to i64
  %32 = mul nsw i64 %29, %31
  %33 = icmp eq i64 %32, %2
  br i1 %33, label %34, label %48

34:                                               ; preds = %27
  %35 = getelementptr inbounds %struct.SkColorSpaceXformSteps, %struct.SkColorSpaceXformSteps* %10, i64 0, i32 0, i32 0
  call void @llvm.lifetime.start.p0i8(i64 100, i8* nonnull %35) #4
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %35, i8* align 4 getelementptr inbounds ({ %"struct.SkColorSpaceXformSteps::Flags", [3 x i8], %struct.skcms_TransferFunction, %struct.skcms_TransferFunction, [9 x float] }, { %"struct.SkColorSpaceXformSteps::Flags", [3 x i8], %struct.skcms_TransferFunction, %struct.skcms_TransferFunction, [9 x float] }* @__const._Z15SkConvertPixelsRK11SkImageInfoPvmS1_PKvm.steps, i64 0, i32 0, i32 0), i64 100, i1 false)
  %36 = getelementptr inbounds %struct.SkImageInfo, %struct.SkImageInfo* %3, i64 0, i32 0, i32 0, i32 0
  %37 = load %class.SkColorSpace*, %class.SkColorSpace** %36, align 8
  %38 = getelementptr inbounds %struct.SkImageInfo, %struct.SkImageInfo* %3, i64 0, i32 0, i32 2
  %39 = load i32, i32* %38, align 4
  %40 = getelementptr inbounds %struct.SkImageInfo, %struct.SkImageInfo* %0, i64 0, i32 0, i32 0, i32 0
  %41 = load %class.SkColorSpace*, %class.SkColorSpace** %40, align 8
  %42 = getelementptr inbounds %struct.SkImageInfo, %struct.SkImageInfo* %0, i64 0, i32 0, i32 2
  %43 = load i32, i32* %42, align 4
  call void @_ZN22SkColorSpaceXformStepsC1EPK12SkColorSpace11SkAlphaTypeS2_S3_(%struct.SkColorSpaceXformSteps* nonnull %10, %class.SkColorSpace* %37, i32 %39, %class.SkColorSpace* %41, i32 %43) #4
  %44 = call fastcc zeroext i1 @_ZL11rect_memcpyRK11SkImageInfoPvmS1_PKvmRK22SkColorSpaceXformSteps(%struct.SkImageInfo* dereferenceable(24) %0, i8* %1, i64 %2, %struct.SkImageInfo* dereferenceable(24) %3, i8* %4, i64 %5, %struct.SkColorSpaceXformSteps* nonnull dereferenceable(100) %10) #4
  br i1 %44, label %47, label %45

45:                                               ; preds = %34
  %46 = call fastcc zeroext i1 @_ZL17swizzle_or_premulRK11SkImageInfoPvmS1_PKvmRK22SkColorSpaceXformSteps(%struct.SkImageInfo* dereferenceable(24) %0, i8* %1, i64 %2, %struct.SkImageInfo* dereferenceable(24) %3, i8* %4, i64 %5, %struct.SkColorSpaceXformSteps* nonnull dereferenceable(100) %10) #4
  br i1 %46, label %47, label %50

47:                                               ; preds = %34, %45, %50, %52
  call void @llvm.lifetime.end.p0i8(i64 100, i8* nonnull %35) #4
  br label %48

48:                                               ; preds = %6, %27, %47
  %49 = phi i1 [ true, %47 ], [ false, %27 ], [ false, %6 ]
  ret i1 %49

50:                                               ; preds = %45
  %51 = call fastcc zeroext i1 @_ZL17convert_to_alpha8RK11SkImageInfoPvmS1_PKvmRK22SkColorSpaceXformSteps(%struct.SkImageInfo* dereferenceable(24) %0, i8* %1, i64 %2, %struct.SkImageInfo* dereferenceable(24) %3, i8* %4, i64 %5, %struct.SkColorSpaceXformSteps* nonnull dereferenceable(100) %10) #4
  br i1 %51, label %47, label %52

52:                                               ; preds = %50
  %53 = bitcast %struct.SkRasterPipeline_MemoryCtx* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %53) #4
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %53, i8 -86, i64 16, i1 false) #4
  %54 = getelementptr inbounds %struct.SkRasterPipeline_MemoryCtx, %struct.SkRasterPipeline_MemoryCtx* %7, i64 0, i32 0
  store i8* %4, i8** %54, align 8
  %55 = getelementptr inbounds %struct.SkRasterPipeline_MemoryCtx, %struct.SkRasterPipeline_MemoryCtx* %7, i64 0, i32 1
  store i32 %15, i32* %55, align 8
  %56 = bitcast %struct.SkRasterPipeline_MemoryCtx* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %56) #4
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %56, i8 -86, i64 16, i1 false) #4
  %57 = getelementptr inbounds %struct.SkRasterPipeline_MemoryCtx, %struct.SkRasterPipeline_MemoryCtx* %8, i64 0, i32 0
  store i8* %1, i8** %57, align 8
  %58 = getelementptr inbounds %struct.SkRasterPipeline_MemoryCtx, %struct.SkRasterPipeline_MemoryCtx* %8, i64 0, i32 1
  store i32 %20, i32* %58, align 8
  %59 = bitcast %class.SkRasterPipeline_* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 312, i8* nonnull %59) #4
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %59, i8 -86, i64 312, i1 false) #4
  %60 = getelementptr inbounds %class.SkRasterPipeline_, %class.SkRasterPipeline_* %9, i64 0, i32 0
  %61 = getelementptr inbounds %class.SkRasterPipeline_, %class.SkRasterPipeline_* %9, i64 0, i32 1, i32 0, i32 0, i64 256
  %62 = bitcast i8* %61 to %class.SkArenaAlloc*
  call void @_ZN16SkRasterPipelineC2EP12SkArenaAlloc(%class.SkRasterPipeline* nonnull %60, %class.SkArenaAlloc* %62) #4
  %63 = getelementptr inbounds %class.SkRasterPipeline_, %class.SkRasterPipeline_* %9, i64 0, i32 1, i32 0, i32 0, i64 0
  call void @_ZN12SkArenaAllocC2EPcmm(%class.SkArenaAlloc* %62, i8* %63, i64 256, i64 256) #4
  %64 = getelementptr inbounds %struct.SkImageInfo, %struct.SkImageInfo* %3, i64 0, i32 0, i32 1
  %65 = load i32, i32* %64, align 8
  call void @_ZN16SkRasterPipeline11append_loadE11SkColorTypePK26SkRasterPipeline_MemoryCtx(%class.SkRasterPipeline* nonnull %60, i32 %65, %struct.SkRasterPipeline_MemoryCtx* nonnull %7) #4
  call void @_ZNK22SkColorSpaceXformSteps5applyEP16SkRasterPipeline(%struct.SkColorSpaceXformSteps* nonnull %10, %class.SkRasterPipeline* nonnull %60) #4
  call void @_ZN16SkRasterPipeline32append_gamut_clamp_if_normalizedERK11SkImageInfo(%class.SkRasterPipeline* nonnull %60, %struct.SkImageInfo* dereferenceable(24) %0) #4
  %66 = getelementptr inbounds %struct.SkImageInfo, %struct.SkImageInfo* %0, i64 0, i32 0, i32 1
  %67 = load i32, i32* %66, align 8
  call void @_ZN16SkRasterPipeline12append_storeE11SkColorTypePK26SkRasterPipeline_MemoryCtx(%class.SkRasterPipeline* nonnull %60, i32 %67, %struct.SkRasterPipeline_MemoryCtx* nonnull %8) #4
  %68 = getelementptr inbounds %struct.SkImageInfo, %struct.SkImageInfo* %3, i64 0, i32 1, i32 0
  %69 = load i32, i32* %68, align 4
  %70 = sext i32 %69 to i64
  %71 = getelementptr inbounds %struct.SkImageInfo, %struct.SkImageInfo* %3, i64 0, i32 1, i32 1
  %72 = load i32, i32* %71, align 4
  %73 = sext i32 %72 to i64
  call void @_ZNK16SkRasterPipeline3runEmmmm(%class.SkRasterPipeline* nonnull %60, i64 0, i64 0, i64 %70, i64 %73) #4
  call void @_ZN12SkArenaAllocD2Ev(%class.SkArenaAlloc* %62) #4
  call void @llvm.lifetime.end.p0i8(i64 312, i8* nonnull %59) #4
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %56) #4
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %53) #4
  br label %47
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #1

declare void @_ZN22SkColorSpaceXformStepsC1EPK12SkColorSpace11SkAlphaTypeS2_S3_(%struct.SkColorSpaceXformSteps*, %class.SkColorSpace*, i32, %class.SkColorSpace*, i32) unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define internal fastcc zeroext i1 @_ZL11rect_memcpyRK11SkImageInfoPvmS1_PKvmRK22SkColorSpaceXformSteps(%struct.SkImageInfo* dereferenceable(24), i8* nocapture, i64, %struct.SkImageInfo* nocapture readonly dereferenceable(24), i8* nocapture readonly, i64, %struct.SkColorSpaceXformSteps* nocapture readonly dereferenceable(100)) unnamed_addr #0 {
  %8 = getelementptr inbounds %struct.SkImageInfo, %struct.SkImageInfo* %0, i64 0, i32 0, i32 1
  %9 = load i32, i32* %8, align 8
  %10 = getelementptr inbounds %struct.SkImageInfo, %struct.SkImageInfo* %3, i64 0, i32 0, i32 1
  %11 = load i32, i32* %10, align 8
  %12 = icmp eq i32 %9, %11
  br i1 %12, label %13, label %83

13:                                               ; preds = %7
  %14 = icmp eq i32 %9, 1
  br i1 %14, label %31, label %15

15:                                               ; preds = %13
  %16 = getelementptr inbounds %struct.SkColorSpaceXformSteps, %struct.SkColorSpaceXformSteps* %6, i64 0, i32 0, i32 0
  %17 = load i8, i8* %16, align 1, !range !2
  %18 = zext i8 %17 to i32
  %19 = getelementptr inbounds %struct.SkColorSpaceXformSteps, %struct.SkColorSpaceXformSteps* %6, i64 0, i32 0, i32 1
  %20 = bitcast i8* %19 to <4 x i8>*
  %21 = load <4 x i8>, <4 x i8>* %20, align 1
  %22 = icmp eq <4 x i8> %21, zeroinitializer
  %23 = select <4 x i1> %22, <4 x i32> zeroinitializer, <4 x i32> <i32 2, i32 4, i32 8, i32 16>
  %24 = shufflevector <4 x i32> %23, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %25 = or <4 x i32> %23, %24
  %26 = shufflevector <4 x i32> %25, <4 x i32> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %27 = or <4 x i32> %25, %26
  %28 = extractelement <4 x i32> %27, i32 0
  %29 = or i32 %28, %18
  %30 = icmp eq i32 %29, 0
  br i1 %30, label %31, label %83

31:                                               ; preds = %15, %13
  %32 = getelementptr inbounds %struct.SkImageInfo, %struct.SkImageInfo* %0, i64 0, i32 1, i32 0
  %33 = load i32, i32* %32, align 4
  %34 = sext i32 %33 to i64
  %35 = getelementptr inbounds %struct.SkImageInfo, %struct.SkImageInfo* %0, i64 0, i32 0
  %36 = tail call i32 @_ZNK11SkColorInfo13bytesPerPixelEv(%class.SkColorInfo* %35) #4
  %37 = sext i32 %36 to i64
  %38 = mul nsw i64 %37, %34
  %39 = icmp ult i64 %38, 2147483648
  %40 = select i1 %39, i64 %38, i64 0
  %41 = getelementptr inbounds %struct.SkImageInfo, %struct.SkImageInfo* %0, i64 0, i32 1, i32 1
  %42 = load i32, i32* %41, align 4
  %43 = icmp eq i64 %40, %2
  %44 = icmp eq i64 %40, %5
  %45 = and i1 %43, %44
  br i1 %45, label %54, label %46

46:                                               ; preds = %31
  %47 = icmp sgt i32 %42, 0
  br i1 %47, label %48, label %83

48:                                               ; preds = %46
  %49 = add i32 %42, -1
  %50 = and i32 %42, 3
  %51 = icmp ult i32 %49, 3
  br i1 %51, label %71, label %52

52:                                               ; preds = %48
  %53 = sub i32 %42, %50
  br label %57

54:                                               ; preds = %31
  %55 = sext i32 %42 to i64
  %56 = mul i64 %55, %5
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %1, i8* align 1 %4, i64 %56, i1 false) #4
  br label %83

57:                                               ; preds = %57, %52
  %58 = phi i8* [ %1, %52 ], [ %67, %57 ]
  %59 = phi i8* [ %4, %52 ], [ %68, %57 ]
  %60 = phi i32 [ %53, %52 ], [ %69, %57 ]
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %58, i8* align 1 %59, i64 %40, i1 false) #4
  %61 = getelementptr inbounds i8, i8* %58, i64 %2
  %62 = getelementptr inbounds i8, i8* %59, i64 %5
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %61, i8* align 1 %62, i64 %40, i1 false) #4
  %63 = getelementptr inbounds i8, i8* %61, i64 %2
  %64 = getelementptr inbounds i8, i8* %62, i64 %5
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %63, i8* align 1 %64, i64 %40, i1 false) #4
  %65 = getelementptr inbounds i8, i8* %63, i64 %2
  %66 = getelementptr inbounds i8, i8* %64, i64 %5
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %65, i8* align 1 %66, i64 %40, i1 false) #4
  %67 = getelementptr inbounds i8, i8* %65, i64 %2
  %68 = getelementptr inbounds i8, i8* %66, i64 %5
  %69 = add i32 %60, -4
  %70 = icmp eq i32 %69, 0
  br i1 %70, label %71, label %57

71:                                               ; preds = %57, %48
  %72 = phi i8* [ %1, %48 ], [ %67, %57 ]
  %73 = phi i8* [ %4, %48 ], [ %68, %57 ]
  %74 = icmp eq i32 %50, 0
  br i1 %74, label %83, label %75

75:                                               ; preds = %71, %75
  %76 = phi i8* [ %79, %75 ], [ %72, %71 ]
  %77 = phi i8* [ %80, %75 ], [ %73, %71 ]
  %78 = phi i32 [ %81, %75 ], [ %50, %71 ]
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %76, i8* align 1 %77, i64 %40, i1 false) #4
  %79 = getelementptr inbounds i8, i8* %76, i64 %2
  %80 = getelementptr inbounds i8, i8* %77, i64 %5
  %81 = add i32 %78, -1
  %82 = icmp eq i32 %81, 0
  br i1 %82, label %83, label %75, !llvm.loop !3

83:                                               ; preds = %71, %75, %54, %46, %15, %7
  %84 = phi i1 [ false, %7 ], [ false, %15 ], [ true, %46 ], [ true, %54 ], [ true, %75 ], [ true, %71 ]
  ret i1 %84
}

; Function Attrs: nounwind ssp uwtable
define internal fastcc zeroext i1 @_ZL17swizzle_or_premulRK11SkImageInfoPvmS1_PKvmRK22SkColorSpaceXformSteps(%struct.SkImageInfo* nocapture readonly dereferenceable(24), i8*, i64, %struct.SkImageInfo* nocapture readonly dereferenceable(24), i8*, i64, %struct.SkColorSpaceXformSteps* nocapture readonly dereferenceable(100)) unnamed_addr #0 {
  %8 = getelementptr inbounds %struct.SkImageInfo, %struct.SkImageInfo* %0, i64 0, i32 0, i32 1
  %9 = load i32, i32* %8, align 8
  %10 = or i32 %9, 2
  %11 = icmp eq i32 %10, 6
  br i1 %11, label %12, label %63

12:                                               ; preds = %7
  %13 = getelementptr inbounds %struct.SkImageInfo, %struct.SkImageInfo* %3, i64 0, i32 0, i32 1
  %14 = load i32, i32* %13, align 8
  %15 = or i32 %14, 2
  %16 = icmp eq i32 %15, 6
  br i1 %16, label %17, label %63

17:                                               ; preds = %12
  %18 = getelementptr inbounds %struct.SkColorSpaceXformSteps, %struct.SkColorSpaceXformSteps* %6, i64 0, i32 0, i32 1
  %19 = load i8, i8* %18, align 1, !range !2
  %20 = icmp eq i8 %19, 0
  br i1 %20, label %21, label %63

21:                                               ; preds = %17
  %22 = getelementptr inbounds %struct.SkColorSpaceXformSteps, %struct.SkColorSpaceXformSteps* %6, i64 0, i32 0, i32 2
  %23 = load i8, i8* %22, align 2, !range !2
  %24 = icmp eq i8 %23, 0
  br i1 %24, label %25, label %63

25:                                               ; preds = %21
  %26 = getelementptr inbounds %struct.SkColorSpaceXformSteps, %struct.SkColorSpaceXformSteps* %6, i64 0, i32 0, i32 0
  %27 = load i8, i8* %26, align 4, !range !2
  %28 = icmp eq i8 %27, 0
  br i1 %28, label %29, label %63

29:                                               ; preds = %25
  %30 = getelementptr inbounds %struct.SkColorSpaceXformSteps, %struct.SkColorSpaceXformSteps* %6, i64 0, i32 0, i32 3
  %31 = load i8, i8* %30, align 1, !range !2
  %32 = icmp eq i8 %31, 0
  br i1 %32, label %33, label %63

33:                                               ; preds = %29
  %34 = getelementptr inbounds %struct.SkColorSpaceXformSteps, %struct.SkColorSpaceXformSteps* %6, i64 0, i32 0, i32 4
  %35 = load i8, i8* %34, align 4, !range !2
  %36 = icmp eq i8 %35, 0
  br i1 %36, label %42, label %37

37:                                               ; preds = %33
  %38 = icmp eq i32 %9, %14
  %39 = load void (i32*, i32*, i32)*, void (i32*, i32*, i32)** @_ZN6SkOpts12RGBA_to_bgrAE, align 8
  %40 = load void (i32*, i32*, i32)*, void (i32*, i32*, i32)** @_ZN6SkOpts12RGBA_to_rgbAE, align 8
  %41 = select i1 %38, void (i32*, i32*, i32)* %40, void (i32*, i32*, i32)* %39
  br label %44

42:                                               ; preds = %33
  %43 = load void (i32*, i32*, i32)*, void (i32*, i32*, i32)** @_ZN6SkOpts12RGBA_to_BGRAE, align 8
  br label %44

44:                                               ; preds = %42, %37
  %45 = phi void (i32*, i32*, i32)* [ %41, %37 ], [ %43, %42 ]
  %46 = getelementptr inbounds %struct.SkImageInfo, %struct.SkImageInfo* %0, i64 0, i32 1, i32 1
  %47 = load i32, i32* %46, align 4
  %48 = icmp sgt i32 %47, 0
  br i1 %48, label %49, label %63

49:                                               ; preds = %44
  %50 = getelementptr inbounds %struct.SkImageInfo, %struct.SkImageInfo* %0, i64 0, i32 1, i32 0
  br label %51

51:                                               ; preds = %49, %51
  %52 = phi i32 [ 0, %49 ], [ %60, %51 ]
  %53 = phi i8* [ %1, %49 ], [ %58, %51 ]
  %54 = phi i8* [ %4, %49 ], [ %59, %51 ]
  %55 = bitcast i8* %53 to i32*
  %56 = bitcast i8* %54 to i32*
  %57 = load i32, i32* %50, align 4
  tail call void %45(i32* %55, i32* %56, i32 %57) #4
  %58 = getelementptr inbounds i8, i8* %53, i64 %2
  %59 = getelementptr inbounds i8, i8* %54, i64 %5
  %60 = add nuw nsw i32 %52, 1
  %61 = load i32, i32* %46, align 4
  %62 = icmp slt i32 %60, %61
  br i1 %62, label %51, label %63

63:                                               ; preds = %51, %44, %7, %12, %17, %21, %25, %29
  %64 = phi i1 [ false, %29 ], [ false, %25 ], [ false, %21 ], [ false, %17 ], [ false, %12 ], [ false, %7 ], [ true, %44 ], [ true, %51 ]
  ret i1 %64
}

; Function Attrs: nounwind ssp uwtable
define internal fastcc zeroext i1 @_ZL17convert_to_alpha8RK11SkImageInfoPvmS1_PKvmRK22SkColorSpaceXformSteps(%struct.SkImageInfo* nocapture readonly dereferenceable(24), i8* nocapture, i64, %struct.SkImageInfo* nocapture readonly dereferenceable(24), i8* nocapture readonly, i64, %struct.SkColorSpaceXformSteps* nocapture readnone dereferenceable(100)) unnamed_addr #0 {
  %8 = getelementptr inbounds %struct.SkImageInfo, %struct.SkImageInfo* %0, i64 0, i32 0, i32 1
  %9 = load i32, i32* %8, align 8
  %10 = icmp eq i32 %9, 1
  br i1 %10, label %11, label %319

11:                                               ; preds = %7
  %12 = getelementptr inbounds %struct.SkImageInfo, %struct.SkImageInfo* %3, i64 0, i32 0, i32 1
  %13 = load i32, i32* %12, align 8
  switch i32 %13, label %319 [
    i32 20, label %42
    i32 16, label %35
    i32 18, label %28
    i32 11, label %77
    i32 2, label %77
    i32 15, label %77
    i32 19, label %77
    i32 17, label %77
    i32 5, label %77
    i32 9, label %77
    i32 10, label %77
    i32 3, label %21
    i32 6, label %122
    i32 4, label %122
    i32 7, label %157
    i32 8, label %157
    i32 12, label %193
    i32 13, label %193
    i32 14, label %14
  ]

14:                                               ; preds = %11
  %15 = getelementptr inbounds %struct.SkImageInfo, %struct.SkImageInfo* %3, i64 0, i32 1, i32 1
  %16 = load i32, i32* %15, align 4
  %17 = icmp sgt i32 %16, 0
  br i1 %17, label %18, label %319

18:                                               ; preds = %14
  %19 = getelementptr inbounds %struct.SkImageInfo, %struct.SkImageInfo* %3, i64 0, i32 1, i32 0
  %20 = load i32, i32* %19, align 4
  br label %231

21:                                               ; preds = %11
  %22 = getelementptr inbounds %struct.SkImageInfo, %struct.SkImageInfo* %3, i64 0, i32 1, i32 1
  %23 = load i32, i32* %22, align 4
  %24 = icmp sgt i32 %23, 0
  br i1 %24, label %25, label %319

25:                                               ; preds = %21
  %26 = getelementptr inbounds %struct.SkImageInfo, %struct.SkImageInfo* %3, i64 0, i32 1, i32 0
  %27 = load i32, i32* %26, align 4
  br label %92

28:                                               ; preds = %11
  %29 = getelementptr inbounds %struct.SkImageInfo, %struct.SkImageInfo* %3, i64 0, i32 1, i32 1
  %30 = load i32, i32* %29, align 4
  %31 = icmp sgt i32 %30, 0
  br i1 %31, label %32, label %319

32:                                               ; preds = %28
  %33 = getelementptr inbounds %struct.SkImageInfo, %struct.SkImageInfo* %3, i64 0, i32 1, i32 0
  %34 = load i32, i32* %33, align 4
  br label %49

35:                                               ; preds = %11
  %36 = getelementptr inbounds %struct.SkImageInfo, %struct.SkImageInfo* %3, i64 0, i32 1, i32 1
  %37 = load i32, i32* %36, align 4
  %38 = icmp sgt i32 %37, 0
  br i1 %38, label %39, label %319

39:                                               ; preds = %35
  %40 = getelementptr inbounds %struct.SkImageInfo, %struct.SkImageInfo* %3, i64 0, i32 1, i32 0
  %41 = load i32, i32* %40, align 4
  br label %262

42:                                               ; preds = %11
  %43 = getelementptr inbounds %struct.SkImageInfo, %struct.SkImageInfo* %3, i64 0, i32 1, i32 1
  %44 = load i32, i32* %43, align 4
  %45 = icmp sgt i32 %44, 0
  br i1 %45, label %46, label %319

46:                                               ; preds = %42
  %47 = getelementptr inbounds %struct.SkImageInfo, %struct.SkImageInfo* %3, i64 0, i32 1, i32 0
  %48 = load i32, i32* %47, align 4
  br label %291

49:                                               ; preds = %32, %59
  %50 = phi i32 [ %30, %32 ], [ %60, %59 ]
  %51 = phi i32 [ %34, %32 ], [ %61, %59 ]
  %52 = phi i32 [ 0, %32 ], [ %64, %59 ]
  %53 = phi i8* [ %4, %32 ], [ %63, %59 ]
  %54 = phi i8* [ %1, %32 ], [ %62, %59 ]
  %55 = bitcast i8* %53 to i16*
  %56 = icmp sgt i32 %51, 0
  br i1 %56, label %66, label %59

57:                                               ; preds = %66
  %58 = load i32, i32* %29, align 4
  br label %59

59:                                               ; preds = %57, %49
  %60 = phi i32 [ %58, %57 ], [ %50, %49 ]
  %61 = phi i32 [ %74, %57 ], [ %51, %49 ]
  %62 = getelementptr inbounds i8, i8* %54, i64 %2
  %63 = getelementptr inbounds i8, i8* %53, i64 %5
  %64 = add nuw nsw i32 %52, 1
  %65 = icmp slt i32 %64, %60
  br i1 %65, label %49, label %319

66:                                               ; preds = %49, %66
  %67 = phi i64 [ %73, %66 ], [ 0, %49 ]
  %68 = getelementptr inbounds i16, i16* %55, i64 %67
  %69 = load i16, i16* %68, align 2
  %70 = lshr i16 %69, 8
  %71 = trunc i16 %70 to i8
  %72 = getelementptr inbounds i8, i8* %54, i64 %67
  store i8 %71, i8* %72, align 1
  %73 = add nuw nsw i64 %67, 1
  %74 = load i32, i32* %33, align 4
  %75 = sext i32 %74 to i64
  %76 = icmp slt i64 %73, %75
  br i1 %76, label %66, label %57

77:                                               ; preds = %11, %11, %11, %11, %11, %11, %11, %11
  %78 = getelementptr inbounds %struct.SkImageInfo, %struct.SkImageInfo* %3, i64 0, i32 1, i32 1
  %79 = load i32, i32* %78, align 4
  %80 = icmp sgt i32 %79, 0
  br i1 %80, label %81, label %319

81:                                               ; preds = %77
  %82 = getelementptr inbounds %struct.SkImageInfo, %struct.SkImageInfo* %3, i64 0, i32 1, i32 0
  br label %83

83:                                               ; preds = %81, %83
  %84 = phi i32 [ 0, %81 ], [ %89, %83 ]
  %85 = phi i8* [ %1, %81 ], [ %88, %83 ]
  %86 = load i32, i32* %82, align 4
  %87 = sext i32 %86 to i64
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %85, i8 -1, i64 %87, i1 false)
  %88 = getelementptr inbounds i8, i8* %85, i64 %2
  %89 = add nuw nsw i32 %84, 1
  %90 = load i32, i32* %78, align 4
  %91 = icmp slt i32 %89, %90
  br i1 %91, label %83, label %319

92:                                               ; preds = %25, %102
  %93 = phi i32 [ %23, %25 ], [ %103, %102 ]
  %94 = phi i32 [ %27, %25 ], [ %104, %102 ]
  %95 = phi i32 [ 0, %25 ], [ %107, %102 ]
  %96 = phi i8* [ %4, %25 ], [ %106, %102 ]
  %97 = phi i8* [ %1, %25 ], [ %105, %102 ]
  %98 = bitcast i8* %96 to i16*
  %99 = icmp sgt i32 %94, 0
  br i1 %99, label %109, label %102

100:                                              ; preds = %109
  %101 = load i32, i32* %22, align 4
  br label %102

102:                                              ; preds = %100, %92
  %103 = phi i32 [ %101, %100 ], [ %93, %92 ]
  %104 = phi i32 [ %119, %100 ], [ %94, %92 ]
  %105 = getelementptr inbounds i8, i8* %97, i64 %2
  %106 = getelementptr inbounds i8, i8* %96, i64 %5
  %107 = add nuw nsw i32 %95, 1
  %108 = icmp slt i32 %107, %103
  br i1 %108, label %92, label %319

109:                                              ; preds = %92, %109
  %110 = phi i64 [ %118, %109 ], [ 0, %92 ]
  %111 = getelementptr inbounds i16, i16* %98, i64 %110
  %112 = load i16, i16* %111, align 2
  %113 = and i16 %112, 15
  %114 = shl nuw nsw i16 %113, 4
  %115 = or i16 %114, %113
  %116 = trunc i16 %115 to i8
  %117 = getelementptr inbounds i8, i8* %97, i64 %110
  store i8 %116, i8* %117, align 1
  %118 = add nuw nsw i64 %110, 1
  %119 = load i32, i32* %26, align 4
  %120 = sext i32 %119 to i64
  %121 = icmp slt i64 %118, %120
  br i1 %121, label %109, label %100

122:                                              ; preds = %11, %11
  %123 = getelementptr inbounds %struct.SkImageInfo, %struct.SkImageInfo* %3, i64 0, i32 1, i32 1
  %124 = load i32, i32* %123, align 4
  %125 = icmp sgt i32 %124, 0
  br i1 %125, label %126, label %319

126:                                              ; preds = %122
  %127 = getelementptr inbounds %struct.SkImageInfo, %struct.SkImageInfo* %3, i64 0, i32 1, i32 0
  %128 = load i32, i32* %127, align 4
  br label %129

129:                                              ; preds = %126, %139
  %130 = phi i32 [ %124, %126 ], [ %140, %139 ]
  %131 = phi i32 [ %128, %126 ], [ %141, %139 ]
  %132 = phi i32 [ 0, %126 ], [ %144, %139 ]
  %133 = phi i8* [ %4, %126 ], [ %143, %139 ]
  %134 = phi i8* [ %1, %126 ], [ %142, %139 ]
  %135 = bitcast i8* %133 to i32*
  %136 = icmp sgt i32 %131, 0
  br i1 %136, label %146, label %139

137:                                              ; preds = %146
  %138 = load i32, i32* %123, align 4
  br label %139

139:                                              ; preds = %137, %129
  %140 = phi i32 [ %138, %137 ], [ %130, %129 ]
  %141 = phi i32 [ %154, %137 ], [ %131, %129 ]
  %142 = getelementptr inbounds i8, i8* %134, i64 %2
  %143 = getelementptr inbounds i8, i8* %133, i64 %5
  %144 = add nuw nsw i32 %132, 1
  %145 = icmp slt i32 %144, %140
  br i1 %145, label %129, label %319

146:                                              ; preds = %129, %146
  %147 = phi i64 [ %153, %146 ], [ 0, %129 ]
  %148 = getelementptr inbounds i32, i32* %135, i64 %147
  %149 = load i32, i32* %148, align 4
  %150 = lshr i32 %149, 24
  %151 = trunc i32 %150 to i8
  %152 = getelementptr inbounds i8, i8* %134, i64 %147
  store i8 %151, i8* %152, align 1
  %153 = add nuw nsw i64 %147, 1
  %154 = load i32, i32* %127, align 4
  %155 = sext i32 %154 to i64
  %156 = icmp slt i64 %153, %155
  br i1 %156, label %146, label %137

157:                                              ; preds = %11, %11
  %158 = getelementptr inbounds %struct.SkImageInfo, %struct.SkImageInfo* %3, i64 0, i32 1, i32 1
  %159 = load i32, i32* %158, align 4
  %160 = icmp sgt i32 %159, 0
  br i1 %160, label %161, label %319

161:                                              ; preds = %157
  %162 = getelementptr inbounds %struct.SkImageInfo, %struct.SkImageInfo* %3, i64 0, i32 1, i32 0
  %163 = load i32, i32* %162, align 4
  br label %164

164:                                              ; preds = %161, %174
  %165 = phi i32 [ %159, %161 ], [ %175, %174 ]
  %166 = phi i32 [ %163, %161 ], [ %176, %174 ]
  %167 = phi i32 [ 0, %161 ], [ %179, %174 ]
  %168 = phi i8* [ %4, %161 ], [ %178, %174 ]
  %169 = phi i8* [ %1, %161 ], [ %177, %174 ]
  %170 = bitcast i8* %168 to i32*
  %171 = icmp sgt i32 %166, 0
  br i1 %171, label %181, label %174

172:                                              ; preds = %181
  %173 = load i32, i32* %158, align 4
  br label %174

174:                                              ; preds = %172, %164
  %175 = phi i32 [ %173, %172 ], [ %165, %164 ]
  %176 = phi i32 [ %190, %172 ], [ %166, %164 ]
  %177 = getelementptr inbounds i8, i8* %169, i64 %2
  %178 = getelementptr inbounds i8, i8* %168, i64 %5
  %179 = add nuw nsw i32 %167, 1
  %180 = icmp slt i32 %179, %175
  br i1 %180, label %164, label %319

181:                                              ; preds = %164, %181
  %182 = phi i64 [ %189, %181 ], [ 0, %164 ]
  %183 = getelementptr inbounds i32, i32* %170, i64 %182
  %184 = load i32, i32* %183, align 4
  %185 = lshr i32 %184, 30
  %186 = trunc i32 %185 to i8
  %187 = mul nuw i8 %186, 85
  %188 = getelementptr inbounds i8, i8* %169, i64 %182
  store i8 %187, i8* %188, align 1
  %189 = add nuw nsw i64 %182, 1
  %190 = load i32, i32* %162, align 4
  %191 = sext i32 %190 to i64
  %192 = icmp slt i64 %189, %191
  br i1 %192, label %181, label %172

193:                                              ; preds = %11, %11
  %194 = getelementptr inbounds %struct.SkImageInfo, %struct.SkImageInfo* %3, i64 0, i32 1, i32 1
  %195 = load i32, i32* %194, align 4
  %196 = icmp sgt i32 %195, 0
  br i1 %196, label %197, label %319

197:                                              ; preds = %193
  %198 = getelementptr inbounds %struct.SkImageInfo, %struct.SkImageInfo* %3, i64 0, i32 1, i32 0
  %199 = load i32, i32* %198, align 4
  br label %200

200:                                              ; preds = %197, %210
  %201 = phi i32 [ %195, %197 ], [ %211, %210 ]
  %202 = phi i32 [ %199, %197 ], [ %212, %210 ]
  %203 = phi i32 [ 0, %197 ], [ %215, %210 ]
  %204 = phi i8* [ %4, %197 ], [ %214, %210 ]
  %205 = phi i8* [ %1, %197 ], [ %213, %210 ]
  %206 = bitcast i8* %204 to i64*
  %207 = icmp sgt i32 %202, 0
  br i1 %207, label %217, label %210

208:                                              ; preds = %217
  %209 = load i32, i32* %194, align 4
  br label %210

210:                                              ; preds = %208, %200
  %211 = phi i32 [ %209, %208 ], [ %201, %200 ]
  %212 = phi i32 [ %228, %208 ], [ %202, %200 ]
  %213 = getelementptr inbounds i8, i8* %205, i64 %2
  %214 = getelementptr inbounds i8, i8* %204, i64 %5
  %215 = add nuw nsw i32 %203, 1
  %216 = icmp slt i32 %215, %211
  br i1 %216, label %200, label %319

217:                                              ; preds = %200, %217
  %218 = phi i64 [ %227, %217 ], [ 0, %200 ]
  %219 = getelementptr inbounds i64, i64* %206, i64 %218
  %220 = load i64, i64* %219, align 8
  %221 = lshr i64 %220, 48
  %222 = trunc i64 %221 to i16
  %223 = tail call float @_Z13SkHalfToFloatt(i16 zeroext %222) #4
  %224 = fmul float %223, 2.550000e+02
  %225 = fptoui float %224 to i8
  %226 = getelementptr inbounds i8, i8* %205, i64 %218
  store i8 %225, i8* %226, align 1
  %227 = add nuw nsw i64 %218, 1
  %228 = load i32, i32* %198, align 4
  %229 = sext i32 %228 to i64
  %230 = icmp slt i64 %227, %229
  br i1 %230, label %217, label %208

231:                                              ; preds = %18, %241
  %232 = phi i32 [ %16, %18 ], [ %242, %241 ]
  %233 = phi i32 [ %20, %18 ], [ %243, %241 ]
  %234 = phi i32 [ 0, %18 ], [ %246, %241 ]
  %235 = phi i8* [ %4, %18 ], [ %245, %241 ]
  %236 = phi i8* [ %1, %18 ], [ %244, %241 ]
  %237 = bitcast i8* %235 to float*
  %238 = icmp sgt i32 %233, 0
  br i1 %238, label %248, label %241

239:                                              ; preds = %248
  %240 = load i32, i32* %15, align 4
  br label %241

241:                                              ; preds = %239, %231
  %242 = phi i32 [ %240, %239 ], [ %232, %231 ]
  %243 = phi i32 [ %259, %239 ], [ %233, %231 ]
  %244 = getelementptr inbounds i8, i8* %236, i64 %2
  %245 = getelementptr inbounds i8, i8* %235, i64 %5
  %246 = add nuw nsw i32 %234, 1
  %247 = icmp slt i32 %246, %242
  br i1 %247, label %231, label %319

248:                                              ; preds = %231, %248
  %249 = phi i64 [ %258, %248 ], [ 0, %231 ]
  %250 = shl i64 %249, 2
  %251 = and i64 %250, 4294967292
  %252 = or i64 %251, 3
  %253 = getelementptr inbounds float, float* %237, i64 %252
  %254 = load float, float* %253, align 4
  %255 = fmul float %254, 2.550000e+02
  %256 = fptoui float %255 to i8
  %257 = getelementptr inbounds i8, i8* %236, i64 %249
  store i8 %256, i8* %257, align 1
  %258 = add nuw nsw i64 %249, 1
  %259 = load i32, i32* %19, align 4
  %260 = sext i32 %259 to i64
  %261 = icmp slt i64 %258, %260
  br i1 %261, label %248, label %239

262:                                              ; preds = %39, %272
  %263 = phi i32 [ %37, %39 ], [ %273, %272 ]
  %264 = phi i32 [ %41, %39 ], [ %274, %272 ]
  %265 = phi i32 [ 0, %39 ], [ %277, %272 ]
  %266 = phi i8* [ %4, %39 ], [ %276, %272 ]
  %267 = phi i8* [ %1, %39 ], [ %275, %272 ]
  %268 = bitcast i8* %266 to i16*
  %269 = icmp sgt i32 %264, 0
  br i1 %269, label %279, label %272

270:                                              ; preds = %279
  %271 = load i32, i32* %36, align 4
  br label %272

272:                                              ; preds = %270, %262
  %273 = phi i32 [ %271, %270 ], [ %263, %262 ]
  %274 = phi i32 [ %288, %270 ], [ %264, %262 ]
  %275 = getelementptr inbounds i8, i8* %267, i64 %2
  %276 = getelementptr inbounds i8, i8* %266, i64 %5
  %277 = add nuw nsw i32 %265, 1
  %278 = icmp slt i32 %277, %273
  br i1 %278, label %262, label %319

279:                                              ; preds = %262, %279
  %280 = phi i64 [ %287, %279 ], [ 0, %262 ]
  %281 = getelementptr inbounds i16, i16* %268, i64 %280
  %282 = load i16, i16* %281, align 2
  %283 = tail call float @_Z13SkHalfToFloatt(i16 zeroext %282) #4
  %284 = fmul float %283, 2.550000e+02
  %285 = fptoui float %284 to i8
  %286 = getelementptr inbounds i8, i8* %267, i64 %280
  store i8 %285, i8* %286, align 1
  %287 = add nuw nsw i64 %280, 1
  %288 = load i32, i32* %40, align 4
  %289 = sext i32 %288 to i64
  %290 = icmp slt i64 %287, %289
  br i1 %290, label %279, label %270

291:                                              ; preds = %46, %301
  %292 = phi i32 [ %44, %46 ], [ %302, %301 ]
  %293 = phi i32 [ %48, %46 ], [ %303, %301 ]
  %294 = phi i32 [ 0, %46 ], [ %306, %301 ]
  %295 = phi i8* [ %4, %46 ], [ %305, %301 ]
  %296 = phi i8* [ %1, %46 ], [ %304, %301 ]
  %297 = bitcast i8* %295 to i64*
  %298 = icmp sgt i32 %293, 0
  br i1 %298, label %308, label %301

299:                                              ; preds = %308
  %300 = load i32, i32* %43, align 4
  br label %301

301:                                              ; preds = %299, %291
  %302 = phi i32 [ %300, %299 ], [ %292, %291 ]
  %303 = phi i32 [ %316, %299 ], [ %293, %291 ]
  %304 = getelementptr inbounds i8, i8* %296, i64 %2
  %305 = getelementptr inbounds i8, i8* %295, i64 %5
  %306 = add nuw nsw i32 %294, 1
  %307 = icmp slt i32 %306, %302
  br i1 %307, label %291, label %319

308:                                              ; preds = %291, %308
  %309 = phi i64 [ %315, %308 ], [ 0, %291 ]
  %310 = getelementptr inbounds i64, i64* %297, i64 %309
  %311 = load i64, i64* %310, align 8
  %312 = lshr i64 %311, 56
  %313 = trunc i64 %312 to i8
  %314 = getelementptr inbounds i8, i8* %296, i64 %309
  store i8 %313, i8* %314, align 1
  %315 = add nuw nsw i64 %309, 1
  %316 = load i32, i32* %47, align 4
  %317 = sext i32 %316 to i64
  %318 = icmp slt i64 %315, %317
  br i1 %318, label %308, label %299

319:                                              ; preds = %241, %210, %174, %139, %102, %83, %59, %272, %301, %14, %193, %157, %122, %21, %77, %28, %35, %42, %11, %7
  %320 = phi i1 [ false, %7 ], [ false, %11 ], [ true, %42 ], [ true, %35 ], [ true, %28 ], [ true, %77 ], [ true, %21 ], [ true, %122 ], [ true, %157 ], [ true, %193 ], [ true, %14 ], [ true, %301 ], [ true, %272 ], [ true, %59 ], [ true, %83 ], [ true, %102 ], [ true, %139 ], [ true, %174 ], [ true, %210 ], [ true, %241 ]
  ret i1 %320
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

declare i32 @_ZNK11SkColorInfo13bytesPerPixelEv(%class.SkColorInfo*) local_unnamed_addr #2

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

declare float @_Z13SkHalfToFloatt(i16 zeroext) local_unnamed_addr #2

declare void @_ZN16SkRasterPipeline11append_loadE11SkColorTypePK26SkRasterPipeline_MemoryCtx(%class.SkRasterPipeline*, i32, %struct.SkRasterPipeline_MemoryCtx*) local_unnamed_addr #2

declare void @_ZNK22SkColorSpaceXformSteps5applyEP16SkRasterPipeline(%struct.SkColorSpaceXformSteps*, %class.SkRasterPipeline*) local_unnamed_addr #2

declare void @_ZN16SkRasterPipeline32append_gamut_clamp_if_normalizedERK11SkImageInfo(%class.SkRasterPipeline*, %struct.SkImageInfo* dereferenceable(24)) local_unnamed_addr #2

declare void @_ZN16SkRasterPipeline12append_storeE11SkColorTypePK26SkRasterPipeline_MemoryCtx(%class.SkRasterPipeline*, i32, %struct.SkRasterPipeline_MemoryCtx*) local_unnamed_addr #2

declare void @_ZNK16SkRasterPipeline3runEmmmm(%class.SkRasterPipeline*, i64, i64, i64, i64) local_unnamed_addr #2

declare void @_ZN16SkRasterPipelineC2EP12SkArenaAlloc(%class.SkRasterPipeline*, %class.SkArenaAlloc*) unnamed_addr #2

declare void @_ZN12SkArenaAllocC2EPcmm(%class.SkArenaAlloc*, i8*, i64, i64) unnamed_addr #2

; Function Attrs: nounwind
declare void @_ZN12SkArenaAllocD2Ev(%class.SkArenaAlloc*) unnamed_addr #3

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{i8 0, i8 2}
!3 = distinct !{!3, !4}
!4 = !{!"llvm.loop.unroll.disable"}
