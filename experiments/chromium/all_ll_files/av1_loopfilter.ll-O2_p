; ModuleID = '../../third_party/libaom/source/libaom/av1/common/av1_loopfilter.c'
source_filename = "../../third_party/libaom/source/libaom/av1/common/av1_loopfilter.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"
module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"
module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%struct.AV1Common = type { %struct.CurrentFrame, %struct.aom_internal_error_info*, i32, i32, i32, i32, i32, i32, i8, [33 x i32], i32, %struct.RefCntBuffer*, %struct.RefCntBuffer*, [8 x i32], %struct.scale_factors, [8 x %struct.scale_factors], [8 x %struct.RefCntBuffer*], i32, i32, i32, %struct.FeatureFlags, %struct.CommonModeInfoParams, %struct.CommonQuantParams, %struct.segmentation, i8*, %struct.loop_filter_info_n, %struct.loopfilter, [3 x %struct.RestorationInfo], i32*, %struct.RestorationLineBuffers*, %struct.yv12_buffer_config, %struct.CdefInfo, %struct.aom_film_grain_t, %struct.DeltaQInfo, [8 x %struct.WarpedMotionParams], %struct.SequenceHeader*, %struct.frame_contexts*, %struct.frame_contexts*, %struct.CommonTileParams, %struct.BufferPool*, %struct.CommonContexts, i32, [8 x i32], %struct.TPL_MV_REF*, i32, [8 x i32], [8 x i8], i32, i32 }
%struct.CurrentFrame = type { i8, i8, i32, i32, i32, %struct.SkipModeInfo, i32, i32 }
%struct.SkipModeInfo = type { i32, i32, i32, i32 }
%struct.aom_internal_error_info = type { i32, i32, [200 x i8], i32, [1 x %struct.__jmp_buf_tag] }
%struct.__jmp_buf_tag = type { [8 x i64], i32, %struct.__sigset_t }
%struct.__sigset_t = type { [16 x i64] }
%struct.RefCntBuffer = type { i32, i32, [7 x i32], i32, [7 x i32], %struct.MV_REF*, i8*, %struct.segmentation, i32, i32, i32, i32, [8 x %struct.WarpedMotionParams], i32, i8, %struct.aom_film_grain_t, %struct.aom_codec_frame_buffer, %struct.yv12_buffer_config, i8, [4 x i32], [8 x i8], [2 x i8], %struct.frame_contexts }
%struct.MV_REF = type { %union.int_mv, i8 }
%union.int_mv = type { i32 }
%struct.aom_codec_frame_buffer = type { i8*, i64, i8* }
%struct.frame_contexts = type { [5 x [13 x [3 x i16]]], [5 x [2 x [9 x [3 x i16]]]], [2 x [3 x [3 x i16]]], [2 x [2 x [6 x i16]]], [2 x [2 x [7 x i16]]], [2 x [2 x [8 x i16]]], [2 x [2 x [9 x i16]]], [2 x [2 x [10 x i16]]], [2 x [2 x [11 x i16]]], [2 x [2 x [12 x i16]]], [5 x [2 x [4 x [4 x i16]]]], [5 x [2 x [42 x [5 x i16]]]], [5 x [2 x [21 x [5 x i16]]]], [6 x [3 x i16]], [2 x [3 x i16]], [6 x [3 x i16]], [3 x [3 x i16]], [8 x [9 x i16]], [22 x [3 x i16]], [22 x [17 x i16]], [4 x [3 x i16]], [22 x [3 x i16]], [4 x [5 x i16]], [22 x [4 x i16]], [22 x [3 x i16]], [7 x [8 x i16]], [7 x [8 x i16]], [7 x [5 x [9 x i16]]], [7 x [5 x [9 x i16]]], [7 x [3 x [3 x i16]]], [2 x [3 x i16]], [5 x [3 x i16]], [3 x [6 x [3 x i16]]], [5 x [3 x i16]], [3 x [3 x [3 x i16]]], [3 x [3 x [3 x i16]]], [3 x [2 x [3 x i16]]], [21 x [3 x i16]], [6 x [3 x i16]], [6 x [3 x i16]], [3 x [3 x i16]], [3 x [3 x i16]], [4 x [3 x i16]], %struct.nmv_context, %struct.nmv_context, [3 x i16], %struct.segmentation_probs, [22 x [3 x i16]], [6 x i16], [4 x i16], [3 x i16], [3 x i16], [4 x [14 x i16]], [2 x [13 x [15 x i16]]], [20 x [11 x i16]], [16 x [4 x i16]], [5 x [5 x [14 x i16]]], [8 x [8 x i16]], [4 x [3 x [4 x i16]]], [5 x i16], [4 x [5 x i16]], [5 x i16], [3 x [4 x [13 x [17 x i16]]]], [4 x [4 x [17 x i16]]], [9 x i16], [6 x [17 x i16]], i32 }
%struct.nmv_context = type { [5 x i16], [2 x %struct.nmv_component] }
%struct.nmv_component = type { [12 x i16], [2 x [5 x i16]], [5 x i16], [3 x i16], [3 x i16], [3 x i16], [3 x i16], [10 x [3 x i16]] }
%struct.segmentation_probs = type { [9 x i16], [3 x [3 x i16]], [3 x [9 x i16]] }
%struct.scale_factors = type { i32, i32, i32, i32, i32 (i32, %struct.scale_factors*)*, i32 (i32, %struct.scale_factors*)* }
%struct.FeatureFlags = type { i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i32, i32, i8 }
%struct.CommonModeInfoParams = type { i32, i32, i32, i32, i32, %struct.MB_MODE_INFO*, i32, i32, i8, %struct.MB_MODE_INFO**, i32, i32, i8*, void (%struct.CommonModeInfoParams*)*, void (%struct.CommonModeInfoParams*)*, void (%struct.CommonModeInfoParams*, i32, i32)* }
%struct.CommonQuantParams = type { i32, i32, i32, i32, i32, i32, [8 x [2 x i16]], [8 x [2 x i16]], [8 x [2 x i16]], [16 x [3 x [19 x i8*]]], [16 x [3 x [19 x i8*]]], [8 x [19 x i8*]], [8 x [19 x i8*]], [8 x [19 x i8*]], i8, i32, i32, i32 }
%struct.segmentation = type { i8, i8, i8, i8, [8 x [8 x i16]], [8 x i32], i32, i8 }
%struct.loop_filter_info_n = type { [64 x %struct.loop_filter_thresh], [3 x [8 x [2 x [8 x [2 x i8]]]]] }
%struct.loop_filter_thresh = type { [16 x i8], [16 x i8], [16 x i8] }
%struct.loopfilter = type { [2 x i32], i32, i32, i32, i8, i8, [8 x i8], [2 x i8], i32 }
%struct.RestorationInfo = type { i32, i32, i32, i32, i32, %struct.RestorationUnitInfo*, %struct.RestorationStripeBoundaries, i32 }
%struct.RestorationUnitInfo = type { i32, [12 x i8], %struct.WienerInfo, %struct.SgrprojInfo, [4 x i8] }
%struct.WienerInfo = type { [8 x i16], [8 x i16] }
%struct.SgrprojInfo = type { i32, [2 x i32] }
%struct.RestorationStripeBoundaries = type { i8*, i8*, i32, i32 }
%struct.RestorationLineBuffers = type { [3 x [392 x i16]], [3 x [392 x i16]] }
%struct.yv12_buffer_config = type { %union.anon, %union.anon.0, %union.anon.2, %union.anon.4, %union.anon.6, %union.anon.8, i32, [3 x i8*], i8*, i32, i8*, i64, i32, i64, i32, i32, i32, i32, i32, i32, i8, i32, i32, i32, i32, i32, i32, %struct.aom_metadata_array* }
%union.anon = type { %struct.anon }
%struct.anon = type { i32, i32 }
%union.anon.0 = type { %struct.anon.1 }
%struct.anon.1 = type { i32, i32 }
%union.anon.2 = type { %struct.anon.3 }
%struct.anon.3 = type { i32, i32 }
%union.anon.4 = type { %struct.anon.5 }
%struct.anon.5 = type { i32, i32 }
%union.anon.6 = type { %struct.anon.7 }
%struct.anon.7 = type { i32, i32 }
%union.anon.8 = type { %struct.anon.9 }
%struct.anon.9 = type { i8*, i8*, i8* }
%struct.aom_metadata_array = type { i64, %struct.aom_metadata** }
%struct.aom_metadata = type { i32, i8*, i64, i32 }
%struct.CdefInfo = type { [3 x i16*], [3 x i16*], i16*, [3 x i64], [3 x i64], i64, i32, i32, [16 x i32], [16 x i32], i32, i32, i32 }
%struct.aom_film_grain_t = type { i32, i32, [14 x [2 x i32]], i32, [10 x [2 x i32]], i32, [10 x [2 x i32]], i32, i32, i32, [24 x i32], [25 x i32], [25 x i32], i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i16 }
%struct.DeltaQInfo = type { i32, i32, i32, i32, i32 }
%struct.WarpedMotionParams = type { [8 x i32], i16, i16, i16, i16, i8, i8 }
%struct.SequenceHeader = type { i32, i32, i32, i32, i8, i32, i32, i8, i32, i32, %struct.OrderHintInfo, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i32, i8, i8, i32, i32, i32, i32, i32, i32, i32, i8, i8, i32, [32 x i32], i32, %struct.aom_timing, i8, %struct.aom_dec_model_info, i8, [32 x i8], [32 x i8], [33 x %struct.aom_dec_model_op_parameters] }
%struct.OrderHintInfo = type { i32, i32, i32, i32 }
%struct.aom_timing = type { i32, i32, i32, i32 }
%struct.aom_dec_model_info = type { i32, i32, i32, i32 }
%struct.aom_dec_model_op_parameters = type { i32, i64, i64, i32, i32, i32, i32, i32 }
%struct.CommonTileParams = type { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, [65 x i32], [65 x i32], i32, i32 }
%struct.BufferPool = type { %union.pthread_mutex_t, i8*, i32 (i8*, i64, %struct.aom_codec_frame_buffer*)*, i32 (i8*, %struct.aom_codec_frame_buffer*)*, [16 x %struct.RefCntBuffer], %struct.InternalFrameBufferList }
%union.pthread_mutex_t = type { %struct.__pthread_mutex_s }
%struct.__pthread_mutex_s = type { i32, i32, i32, i32, i32, i16, i16, %struct.__pthread_internal_list }
%struct.__pthread_internal_list = type { %struct.__pthread_internal_list*, %struct.__pthread_internal_list* }
%struct.InternalFrameBufferList = type { i32, %struct.InternalFrameBuffer* }
%struct.InternalFrameBuffer = type { i8*, i64, i32 }
%struct.CommonContexts = type { i8**, [3 x i8**], i8**, i32, i32, i32 }
%struct.TPL_MV_REF = type { %union.int_mv, i8 }
%struct.MB_MODE_INFO = type <{ i8, i8, i8, i8, i32, [2 x %union.int_mv], [2 x i8], [2 x i8], %union.int_interpfilters, i8, i8, i8, i8, %struct.WarpedMotionParams, i8, i8, [6 x i8], %struct.INTERINTER_COMPOUND_DATA, [2 x i8], %struct.FILTER_INTRA_MODE_INFO, i8, i8, %struct.PALETTE_MODE_INFO, i8, i8, [16 x i8], i8, [4 x i8], i16, [7 x i8] }>
%union.int_interpfilters = type { i32 }
%struct.INTERINTER_COMPOUND_DATA = type { i8*, i8, i8, i8, i8 }
%struct.FILTER_INTRA_MODE_INFO = type { i8, i8 }
%struct.PALETTE_MODE_INFO = type { [24 x i16], [2 x i8] }
%struct.macroblockd = type { i32, i32, i32, i8, [3 x %struct.macroblockd_plane], %struct.TileInfo, %struct.MB_MODE_INFO**, i8, i8, i8, i8, %struct.MB_MODE_INFO*, %struct.MB_MODE_INFO*, %struct.MB_MODE_INFO*, %struct.MB_MODE_INFO*, i8*, i32, i32, i32, i32, i32, [2 x %struct.scale_factors*], %struct.yv12_buffer_config*, [3 x i8*], [3 x [32 x i8]], i8*, [32 x i8], i8*, i8*, [32 x i8], [3 x %struct.WienerInfo], [3 x %struct.SgrprojInfo], i8, i8, [29 x [8 x %struct.candidate_mv]], [29 x [8 x i16]], i8, i8, [8 x i8], %struct.frame_contexts*, i32, [8 x i32], [8 x i32], i32, i32, %struct.aom_internal_error_info*, %struct.WarpedMotionParams*, i8, [4 x i8], [4 x i8], i8*, %struct.cfl_ctx, [2 x i16], i16*, [2 x i8*], [8 x i8] }
%struct.macroblockd_plane = type { i8, i32, i32, %struct.buf_2d, [2 x %struct.buf_2d], i8*, i8*, [8 x [2 x i16]], i8*, i8, i8, [8 x [19 x i8*]], [8 x [19 x i8*]] }
%struct.buf_2d = type { i8*, i8*, i32, i32, i32 }
%struct.TileInfo = type { i32, i32, i32, i32, i32, i32 }
%struct.candidate_mv = type { %union.int_mv, %union.int_mv }
%struct.cfl_ctx = type { [1024 x i16], [1024 x i16], [2 x i32], i32, [2 x [32 x i16]], i32, i32, i32, i32, i32, i32 }
%struct.AV1_DEBLOCKING_PARAMETERS = type { i32, i8*, i8*, i8* }

@delta_lf_id_lut = internal unnamed_addr constant [3 x [2 x i32]] [[2 x i32] [i32 0, i32 1], [2 x i32] [i32 2, i32 2], [2 x i32] [i32 3, i32 3]], align 16
@seg_lvl_lf_lut = internal unnamed_addr constant [3 x [2 x i8]] [[2 x i8] c"\01\02", [2 x i8] c"\03\03", [2 x i8] c"\04\04"], align 1
@mode_lf_lut = internal unnamed_addr constant [25 x i32] [i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1, i32 1, i32 0, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 0, i32 1], align 16
@tx_size_wide_unit = internal unnamed_addr constant [19 x i32] [i32 1, i32 2, i32 4, i32 8, i32 16, i32 1, i32 2, i32 2, i32 4, i32 4, i32 8, i32 8, i32 16, i32 1, i32 4, i32 2, i32 8, i32 4, i32 16], align 16
@tx_size_high_unit = internal unnamed_addr constant [19 x i32] [i32 1, i32 2, i32 4, i32 8, i32 16, i32 2, i32 1, i32 4, i32 2, i32 8, i32 4, i32 16, i32 8, i32 4, i32 1, i32 8, i32 2, i32 16, i32 4], align 16
@tx_size_wide = internal unnamed_addr constant [19 x i32] [i32 4, i32 8, i32 16, i32 32, i32 64, i32 4, i32 8, i32 8, i32 16, i32 16, i32 32, i32 32, i32 64, i32 4, i32 16, i32 8, i32 32, i32 16, i32 64], align 16
@tx_size_high = internal unnamed_addr constant [19 x i32] [i32 4, i32 8, i32 16, i32 32, i32 64, i32 8, i32 4, i32 16, i32 8, i32 32, i32 16, i32 64, i32 32, i32 16, i32 4, i32 32, i32 8, i32 64, i32 16], align 16
@block_size_wide = internal unnamed_addr constant [22 x i8] c"\04\04\08\08\08\10\10\10   @@@\80\80\04\10\08 \10@", align 16
@block_size_high = internal unnamed_addr constant [22 x i8] c"\04\08\04\08\10\08\10 \10 @ @\80@\80\10\04 \08@\10", align 16
@mi_size_high = internal unnamed_addr constant [22 x i8] c"\01\02\01\02\04\02\04\08\04\08\10\08\10 \10 \04\01\08\02\10\04", align 16
@mi_size_wide = internal unnamed_addr constant [22 x i8] c"\01\01\02\02\02\04\04\04\08\08\08\10\10\10  \01\04\02\08\04\10", align 16
@txsize_horz_map = internal unnamed_addr constant [19 x i8] c"\00\01\02\03\04\00\01\01\02\02\03\03\04\00\02\01\03\02\04", align 16
@txsize_vert_map = internal unnamed_addr constant [19 x i8] c"\00\01\02\03\04\01\00\02\01\03\02\04\03\02\00\03\01\04\02", align 16
@max_txsize_rect_lookup = internal unnamed_addr constant [22 x i8] c"\00\05\06\01\07\08\02\09\0A\03\0B\0C\04\04\04\04\0D\0E\0F\10\11\12", align 16
@av1_get_txb_size_index.tw_w_log2_table = internal unnamed_addr constant [22 x i8] c"\00\00\00\00\01\01\01\02\02\02\03\03\03\03\03\03\00\01\01\02\02\03", align 16
@av1_get_txb_size_index.tw_h_log2_table = internal unnamed_addr constant [22 x i8] c"\00\00\00\00\01\01\01\02\02\02\03\03\03\03\03\03\01\00\02\01\03\02", align 16
@av1_get_txb_size_index.stride_log2_table = internal unnamed_addr constant [22 x i8] c"\00\00\01\01\00\01\01\00\01\01\00\01\01\01\02\02\00\01\00\01\00\01", align 16
@ss_size_lookup = internal unnamed_addr constant [22 x [2 x [2 x i8]]] [[2 x [2 x i8]] zeroinitializer, [2 x [2 x i8]] [[2 x i8] c"\01\00", [2 x i8] c"\FF\00"], [2 x [2 x i8]] [[2 x i8] c"\02\FF", [2 x i8] zeroinitializer], [2 x [2 x i8]] [[2 x i8] c"\03\02", [2 x i8] c"\01\00"], [2 x [2 x i8]] [[2 x i8] c"\04\03", [2 x i8] c"\FF\01"], [2 x [2 x i8]] [[2 x i8] c"\05\FF", [2 x i8] c"\03\02"], [2 x [2 x i8]] [[2 x i8] c"\06\05", [2 x i8] c"\04\03"], [2 x [2 x i8]] [[2 x i8] c"\07\06", [2 x i8] c"\FF\04"], [2 x [2 x i8]] [[2 x i8] c"\08\FF", [2 x i8] c"\06\05"], [2 x [2 x i8]] [[2 x i8] c"\09\08", [2 x i8] c"\07\06"], [2 x [2 x i8]] [[2 x i8] c"\0A\09", [2 x i8] c"\FF\07"], [2 x [2 x i8]] [[2 x i8] c"\0B\FF", [2 x i8] c"\09\08"], [2 x [2 x i8]] [[2 x i8] c"\0C\0B", [2 x i8] c"\0A\09"], [2 x [2 x i8]] [[2 x i8] c"\0D\0C", [2 x i8] c"\FF\0A"], [2 x [2 x i8]] [[2 x i8] c"\0E\FF", [2 x i8] c"\0C\0B"], [2 x [2 x i8]] [[2 x i8] c"\0F\0E", [2 x i8] c"\0D\0C"], [2 x [2 x i8]] [[2 x i8] c"\10\01", [2 x i8] c"\FF\01"], [2 x [2 x i8]] [[2 x i8] c"\11\FF", [2 x i8] c"\02\02"], [2 x [2 x i8]] [[2 x i8] c"\12\04", [2 x i8] c"\FF\10"], [2 x [2 x i8]] [[2 x i8] c"\13\FF", [2 x i8] c"\05\11"], [2 x [2 x i8]] [[2 x i8] c"\14\07", [2 x i8] c"\FF\12"], [2 x [2 x i8]] [[2 x i8] c"\15\FF", [2 x i8] c"\08\13"]], align 16

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden zeroext i8 @av1_get_filter_level(%struct.AV1Common* nocapture readonly, %struct.loop_filter_info_n* nocapture readonly, i32, i32, %struct.MB_MODE_INFO* nocapture readonly) local_unnamed_addr #0 {
  %6 = getelementptr inbounds %struct.MB_MODE_INFO, %struct.MB_MODE_INFO* %4, i64 0, i32 28
  %7 = load i16, i16* %6, align 1
  %8 = and i16 %7, 7
  %9 = getelementptr inbounds %struct.AV1Common, %struct.AV1Common* %0, i64 0, i32 33, i32 2
  %10 = load i32, i32* %9, align 8
  %11 = icmp eq i32 %10, 0
  br i1 %11, label %106, label %12

12:                                               ; preds = %5
  %13 = getelementptr inbounds %struct.AV1Common, %struct.AV1Common* %0, i64 0, i32 33, i32 4
  %14 = load i32, i32* %13, align 8
  %15 = icmp eq i32 %14, 0
  br i1 %15, label %23, label %16

16:                                               ; preds = %12
  %17 = sext i32 %3 to i64
  %18 = sext i32 %2 to i64
  %19 = getelementptr inbounds [3 x [2 x i32]], [3 x [2 x i32]]* @delta_lf_id_lut, i64 0, i64 %17, i64 %18
  %20 = load i32, i32* %19, align 4
  %21 = sext i32 %20 to i64
  %22 = getelementptr inbounds %struct.MB_MODE_INFO, %struct.MB_MODE_INFO* %4, i64 0, i32 27, i64 %21
  br label %25

23:                                               ; preds = %12
  %24 = getelementptr inbounds %struct.MB_MODE_INFO, %struct.MB_MODE_INFO* %4, i64 0, i32 26
  br label %25

25:                                               ; preds = %23, %16
  %26 = phi i8* [ %22, %16 ], [ %24, %23 ]
  %27 = load i8, i8* %26, align 1
  switch i32 %3, label %33 [
    i32 0, label %28
    i32 1, label %31
  ]

28:                                               ; preds = %25
  %29 = sext i32 %2 to i64
  %30 = getelementptr inbounds %struct.AV1Common, %struct.AV1Common* %0, i64 0, i32 26, i32 0, i64 %29
  br label %35

31:                                               ; preds = %25
  %32 = getelementptr inbounds %struct.AV1Common, %struct.AV1Common* %0, i64 0, i32 26, i32 1
  br label %35

33:                                               ; preds = %25
  %34 = getelementptr inbounds %struct.AV1Common, %struct.AV1Common* %0, i64 0, i32 26, i32 2
  br label %35

35:                                               ; preds = %31, %33, %28
  %36 = phi i32* [ %30, %28 ], [ %32, %31 ], [ %34, %33 ]
  %37 = load i32, i32* %36, align 4
  %38 = sext i8 %27 to i32
  %39 = add nsw i32 %37, %38
  %40 = icmp slt i32 %39, 63
  %41 = select i1 %40, i32 %39, i32 63
  %42 = icmp sgt i32 %41, 0
  %43 = select i1 %42, i32 %41, i32 0
  %44 = sext i32 %3 to i64
  %45 = sext i32 %2 to i64
  %46 = getelementptr inbounds [3 x [2 x i8]], [3 x [2 x i8]]* @seg_lvl_lf_lut, i64 0, i64 %44, i64 %45
  %47 = load i8, i8* %46, align 1
  %48 = getelementptr inbounds %struct.AV1Common, %struct.AV1Common* %0, i64 0, i32 23, i32 0
  %49 = load i8, i8* %48, align 4
  %50 = icmp eq i8 %49, 0
  br i1 %50, label %69, label %51

51:                                               ; preds = %35
  %52 = zext i16 %8 to i64
  %53 = getelementptr inbounds %struct.AV1Common, %struct.AV1Common* %0, i64 0, i32 23, i32 5, i64 %52
  %54 = load i32, i32* %53, align 4
  %55 = zext i8 %47 to i32
  %56 = shl i32 1, %55
  %57 = and i32 %54, %56
  %58 = icmp eq i32 %57, 0
  br i1 %58, label %69, label %59

59:                                               ; preds = %51
  %60 = zext i8 %47 to i64
  %61 = getelementptr inbounds %struct.AV1Common, %struct.AV1Common* %0, i64 0, i32 23, i32 4, i64 %52, i64 %60
  %62 = load i16, i16* %61, align 2
  %63 = sext i16 %62 to i32
  %64 = add nsw i32 %43, %63
  %65 = icmp slt i32 %64, 63
  %66 = select i1 %65, i32 %64, i32 63
  %67 = icmp sgt i32 %66, 0
  %68 = select i1 %67, i32 %66, i32 0
  br label %69

69:                                               ; preds = %35, %51, %59
  %70 = phi i32 [ %68, %59 ], [ %43, %51 ], [ %43, %35 ]
  %71 = getelementptr inbounds %struct.AV1Common, %struct.AV1Common* %0, i64 0, i32 26, i32 4
  %72 = load i8, i8* %71, align 4
  %73 = icmp eq i8 %72, 0
  br i1 %73, label %103, label %74

74:                                               ; preds = %69
  %75 = lshr i32 %70, 5
  %76 = getelementptr inbounds %struct.MB_MODE_INFO, %struct.MB_MODE_INFO* %4, i64 0, i32 6, i64 0
  %77 = load i8, i8* %76, align 8
  %78 = sext i8 %77 to i64
  %79 = getelementptr inbounds %struct.AV1Common, %struct.AV1Common* %0, i64 0, i32 26, i32 6, i64 %78
  %80 = load i8, i8* %79, align 1
  %81 = sext i8 %80 to i32
  %82 = shl i32 %81, %75
  %83 = add nsw i32 %82, %70
  %84 = icmp sgt i8 %77, 0
  br i1 %84, label %85, label %97

85:                                               ; preds = %74
  %86 = getelementptr inbounds %struct.MB_MODE_INFO, %struct.MB_MODE_INFO* %4, i64 0, i32 2
  %87 = load i8, i8* %86, align 2
  %88 = zext i8 %87 to i64
  %89 = getelementptr inbounds [25 x i32], [25 x i32]* @mode_lf_lut, i64 0, i64 %88
  %90 = load i32, i32* %89, align 4
  %91 = sext i32 %90 to i64
  %92 = getelementptr inbounds %struct.AV1Common, %struct.AV1Common* %0, i64 0, i32 26, i32 7, i64 %91
  %93 = load i8, i8* %92, align 1
  %94 = sext i8 %93 to i32
  %95 = shl i32 %94, %75
  %96 = add nsw i32 %95, %83
  br label %97

97:                                               ; preds = %85, %74
  %98 = phi i32 [ %96, %85 ], [ %83, %74 ]
  %99 = icmp slt i32 %98, 63
  %100 = select i1 %99, i32 %98, i32 63
  %101 = icmp sgt i32 %100, 0
  %102 = select i1 %101, i32 %100, i32 0
  br label %103

103:                                              ; preds = %69, %97
  %104 = phi i32 [ %102, %97 ], [ %70, %69 ]
  %105 = trunc i32 %104 to i8
  br label %121

106:                                              ; preds = %5
  %107 = sext i32 %3 to i64
  %108 = zext i16 %8 to i64
  %109 = sext i32 %2 to i64
  %110 = getelementptr inbounds %struct.MB_MODE_INFO, %struct.MB_MODE_INFO* %4, i64 0, i32 6, i64 0
  %111 = load i8, i8* %110, align 8
  %112 = sext i8 %111 to i64
  %113 = getelementptr inbounds %struct.MB_MODE_INFO, %struct.MB_MODE_INFO* %4, i64 0, i32 2
  %114 = load i8, i8* %113, align 2
  %115 = zext i8 %114 to i64
  %116 = getelementptr inbounds [25 x i32], [25 x i32]* @mode_lf_lut, i64 0, i64 %115
  %117 = load i32, i32* %116, align 4
  %118 = sext i32 %117 to i64
  %119 = getelementptr inbounds %struct.loop_filter_info_n, %struct.loop_filter_info_n* %1, i64 0, i32 1, i64 %107, i64 %108, i64 %109, i64 %112, i64 %118
  %120 = load i8, i8* %119, align 1
  br label %121

121:                                              ; preds = %106, %103
  %122 = phi i8 [ %105, %103 ], [ %120, %106 ]
  ret i8 %122
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: nounwind ssp uwtable
define hidden void @av1_loop_filter_init(%struct.AV1Common* nocapture) local_unnamed_addr #2 {
  %2 = getelementptr inbounds %struct.AV1Common, %struct.AV1Common* %0, i64 0, i32 26, i32 8
  store i32 1, i32* %2, align 4
  %3 = getelementptr inbounds %struct.AV1Common, %struct.AV1Common* %0, i64 0, i32 26, i32 3
  %4 = load i32, i32* %3, align 4
  %5 = icmp sgt i32 %4, 0
  %6 = zext i1 %5 to i32
  %7 = icmp sgt i32 %4, 4
  %8 = zext i1 %7 to i32
  %9 = add nuw nsw i32 %6, %8
  %10 = sub nsw i32 9, %4
  br label %11

11:                                               ; preds = %11, %1
  %12 = phi i64 [ 0, %1 ], [ %27, %11 ]
  %13 = trunc i64 %12 to i32
  %14 = lshr i32 %13, %9
  %15 = icmp sgt i32 %14, %10
  %16 = and i1 %5, %15
  %17 = select i1 %16, i32 %10, i32 %14
  %18 = icmp sgt i32 %17, 1
  %19 = select i1 %18, i32 %17, i32 1
  %20 = getelementptr inbounds %struct.AV1Common, %struct.AV1Common* %0, i64 0, i32 25, i32 0, i64 %12, i32 1, i64 0
  %21 = trunc i32 %19 to i8
  tail call void @llvm.memset.p0i8.i64(i8* align 16 %20, i8 %21, i64 16, i1 false) #5
  %22 = getelementptr inbounds %struct.AV1Common, %struct.AV1Common* %0, i64 0, i32 25, i32 0, i64 %12, i32 0, i64 0
  %23 = shl i32 %13, 1
  %24 = add i32 %23, 4
  %25 = add nuw nsw i32 %24, %19
  %26 = trunc i32 %25 to i8
  tail call void @llvm.memset.p0i8.i64(i8* align 16 %22, i8 %26, i64 16, i1 false) #5
  %27 = add nuw nsw i64 %12, 1
  %28 = icmp eq i64 %27, 64
  br i1 %28, label %29, label %11

29:                                               ; preds = %11, %29
  %30 = phi i64 [ %50, %29 ], [ 0, %11 ]
  %31 = getelementptr inbounds %struct.AV1Common, %struct.AV1Common* %0, i64 0, i32 25, i32 0, i64 %30, i32 2, i64 0
  %32 = trunc i64 %30 to i32
  %33 = lshr i32 %32, 4
  %34 = trunc i32 %33 to i8
  tail call void @llvm.memset.p0i8.i64(i8* align 16 %31, i8 %34, i64 16, i1 false)
  %35 = or i64 %30, 1
  %36 = getelementptr inbounds %struct.AV1Common, %struct.AV1Common* %0, i64 0, i32 25, i32 0, i64 %35, i32 2, i64 0
  %37 = trunc i64 %30 to i32
  %38 = lshr i32 %37, 4
  %39 = trunc i32 %38 to i8
  tail call void @llvm.memset.p0i8.i64(i8* align 16 %36, i8 %39, i64 16, i1 false)
  %40 = or i64 %30, 2
  %41 = getelementptr inbounds %struct.AV1Common, %struct.AV1Common* %0, i64 0, i32 25, i32 0, i64 %40, i32 2, i64 0
  %42 = trunc i64 %30 to i32
  %43 = lshr i32 %42, 4
  %44 = trunc i32 %43 to i8
  tail call void @llvm.memset.p0i8.i64(i8* align 16 %41, i8 %44, i64 16, i1 false)
  %45 = or i64 %30, 3
  %46 = getelementptr inbounds %struct.AV1Common, %struct.AV1Common* %0, i64 0, i32 25, i32 0, i64 %45, i32 2, i64 0
  %47 = trunc i64 %30 to i32
  %48 = lshr i32 %47, 4
  %49 = trunc i32 %48 to i8
  tail call void @llvm.memset.p0i8.i64(i8* align 16 %46, i8 %49, i64 16, i1 false)
  %50 = add nuw nsw i64 %30, 4
  %51 = icmp eq i64 %50, 64
  br i1 %51, label %52, label %29

52:                                               ; preds = %29
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

; Function Attrs: nounwind ssp uwtable
define hidden void @av1_loop_filter_frame_init(%struct.AV1Common* nocapture, i32, i32) local_unnamed_addr #2 {
  %4 = alloca [3 x i32], align 4
  %5 = alloca [3 x i32], align 4
  %6 = bitcast [3 x i32]* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 12, i8* nonnull %6) #5
  %7 = getelementptr inbounds [3 x i32], [3 x i32]* %4, i64 0, i64 0
  store i32 -1431655766, i32* %7, align 4
  %8 = getelementptr inbounds [3 x i32], [3 x i32]* %4, i64 0, i64 1
  store i32 -1431655766, i32* %8, align 4
  %9 = getelementptr inbounds [3 x i32], [3 x i32]* %4, i64 0, i64 2
  store i32 -1431655766, i32* %9, align 4
  %10 = bitcast [3 x i32]* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 12, i8* nonnull %10) #5
  %11 = getelementptr inbounds [3 x i32], [3 x i32]* %5, i64 0, i64 0
  store i32 -1431655766, i32* %11, align 4
  %12 = getelementptr inbounds [3 x i32], [3 x i32]* %5, i64 0, i64 1
  store i32 -1431655766, i32* %12, align 4
  %13 = getelementptr inbounds [3 x i32], [3 x i32]* %5, i64 0, i64 2
  store i32 -1431655766, i32* %13, align 4
  %14 = getelementptr inbounds %struct.AV1Common, %struct.AV1Common* %0, i64 0, i32 26, i32 3
  %15 = load i32, i32* %14, align 4
  %16 = icmp sgt i32 %15, 0
  %17 = zext i1 %16 to i32
  %18 = icmp sgt i32 %15, 4
  %19 = zext i1 %18 to i32
  %20 = add nuw nsw i32 %17, %19
  %21 = sub nsw i32 9, %15
  br label %22

22:                                               ; preds = %22, %3
  %23 = phi i64 [ 0, %3 ], [ %38, %22 ]
  %24 = trunc i64 %23 to i32
  %25 = lshr i32 %24, %20
  %26 = icmp sgt i32 %25, %21
  %27 = and i1 %16, %26
  %28 = select i1 %27, i32 %21, i32 %25
  %29 = icmp sgt i32 %28, 1
  %30 = select i1 %29, i32 %28, i32 1
  %31 = getelementptr inbounds %struct.AV1Common, %struct.AV1Common* %0, i64 0, i32 25, i32 0, i64 %23, i32 1, i64 0
  %32 = trunc i32 %30 to i8
  tail call void @llvm.memset.p0i8.i64(i8* align 16 %31, i8 %32, i64 16, i1 false) #5
  %33 = getelementptr inbounds %struct.AV1Common, %struct.AV1Common* %0, i64 0, i32 25, i32 0, i64 %23, i32 0, i64 0
  %34 = shl i32 %24, 1
  %35 = add i32 %34, 4
  %36 = add nuw nsw i32 %35, %30
  %37 = trunc i32 %36 to i8
  tail call void @llvm.memset.p0i8.i64(i8* align 16 %33, i8 %37, i64 16, i1 false) #5
  %38 = add nuw nsw i64 %23, 1
  %39 = icmp eq i64 %38, 64
  br i1 %39, label %40, label %22

40:                                               ; preds = %22
  %41 = getelementptr inbounds %struct.AV1Common, %struct.AV1Common* %0, i64 0, i32 26, i32 0, i64 0
  %42 = load i32, i32* %41, align 16
  store i32 %42, i32* %7, align 4
  %43 = getelementptr inbounds %struct.AV1Common, %struct.AV1Common* %0, i64 0, i32 26, i32 1
  %44 = load i32, i32* %43, align 8
  store i32 %44, i32* %8, align 4
  %45 = getelementptr inbounds %struct.AV1Common, %struct.AV1Common* %0, i64 0, i32 26, i32 2
  %46 = load i32, i32* %45, align 4
  store i32 %46, i32* %9, align 4
  %47 = getelementptr inbounds %struct.AV1Common, %struct.AV1Common* %0, i64 0, i32 26, i32 0, i64 1
  %48 = load i32, i32* %47, align 4
  store i32 %48, i32* %11, align 4
  store i32 %44, i32* %12, align 4
  store i32 %46, i32* %13, align 4
  %49 = or i32 %48, %42
  %50 = icmp slt i32 %1, %2
  br i1 %50, label %51, label %165

51:                                               ; preds = %40
  %52 = icmp eq i32 %44, 0
  %53 = icmp eq i32 %46, 0
  %54 = getelementptr inbounds %struct.AV1Common, %struct.AV1Common* %0, i64 0, i32 23, i32 0
  %55 = getelementptr inbounds %struct.AV1Common, %struct.AV1Common* %0, i64 0, i32 26, i32 4
  %56 = getelementptr inbounds %struct.AV1Common, %struct.AV1Common* %0, i64 0, i32 26, i32 6, i64 0
  %57 = sext i32 %1 to i64
  %58 = getelementptr inbounds %struct.AV1Common, %struct.AV1Common* %0, i64 0, i32 26, i32 7, i64 0
  %59 = getelementptr inbounds %struct.AV1Common, %struct.AV1Common* %0, i64 0, i32 26, i32 7, i64 1
  %60 = getelementptr inbounds %struct.AV1Common, %struct.AV1Common* %0, i64 0, i32 26, i32 7, i64 0
  %61 = getelementptr inbounds %struct.AV1Common, %struct.AV1Common* %0, i64 0, i32 26, i32 7, i64 1
  br label %62

62:                                               ; preds = %161, %51
  %63 = phi i64 [ %57, %51 ], [ %162, %161 ]
  %64 = trunc i64 %63 to i32
  %65 = or i32 %49, %64
  %66 = icmp eq i32 %65, 0
  br i1 %66, label %165, label %67

67:                                               ; preds = %62
  %68 = icmp eq i64 %63, 1
  %69 = and i1 %52, %68
  %70 = icmp eq i64 %63, 2
  %71 = and i1 %53, %70
  %72 = or i1 %69, %71
  br i1 %72, label %161, label %73

73:                                               ; preds = %67
  %74 = getelementptr inbounds [3 x i32], [3 x i32]* %4, i64 0, i64 %63
  %75 = load i32, i32* %74, align 4
  %76 = getelementptr inbounds [3 x [2 x i8]], [3 x [2 x i8]]* @seg_lvl_lf_lut, i64 0, i64 %63, i64 0
  %77 = load i8, i8* %76, align 1
  %78 = zext i8 %77 to i32
  %79 = shl i32 1, %78
  %80 = zext i8 %77 to i64
  %81 = getelementptr inbounds [3 x i32], [3 x i32]* %5, i64 0, i64 %63
  %82 = load i32, i32* %81, align 4
  %83 = getelementptr inbounds [3 x [2 x i8]], [3 x [2 x i8]]* @seg_lvl_lf_lut, i64 0, i64 %63, i64 1
  %84 = load i8, i8* %83, align 1
  %85 = zext i8 %84 to i32
  %86 = shl i32 1, %85
  %87 = zext i8 %84 to i64
  br label %88

88:                                               ; preds = %231, %73
  %89 = phi i64 [ 0, %73 ], [ %232, %231 ]
  %90 = getelementptr inbounds %struct.AV1Common, %struct.AV1Common* %0, i64 0, i32 23, i32 5, i64 %89
  %91 = load i8, i8* %54, align 4
  %92 = icmp eq i8 %91, 0
  br i1 %92, label %106, label %93

93:                                               ; preds = %88
  %94 = load i32, i32* %90, align 4
  %95 = and i32 %94, %79
  %96 = icmp eq i32 %95, 0
  br i1 %96, label %106, label %97

97:                                               ; preds = %93
  %98 = getelementptr inbounds %struct.AV1Common, %struct.AV1Common* %0, i64 0, i32 23, i32 4, i64 %89, i64 %80
  %99 = load i16, i16* %98, align 2
  %100 = sext i16 %99 to i32
  %101 = add nsw i32 %75, %100
  %102 = icmp slt i32 %101, 63
  %103 = select i1 %102, i32 %101, i32 63
  %104 = icmp sgt i32 %103, 0
  %105 = select i1 %104, i32 %103, i32 0
  br label %106

106:                                              ; preds = %88, %93, %97
  %107 = phi i32 [ %105, %97 ], [ %75, %93 ], [ %75, %88 ]
  %108 = load i8, i8* %55, align 4
  %109 = icmp eq i8 %108, 0
  br i1 %109, label %110, label %113

110:                                              ; preds = %106
  %111 = getelementptr inbounds %struct.AV1Common, %struct.AV1Common* %0, i64 0, i32 25, i32 1, i64 %63, i64 %89, i64 0, i64 0, i64 0
  %112 = trunc i32 %107 to i8
  tail call void @llvm.memset.p0i8.i64(i8* align 16 %111, i8 %112, i64 16, i1 false)
  br label %158

113:                                              ; preds = %106
  %114 = ashr i32 %107, 5
  %115 = load i8, i8* %56, align 2
  %116 = sext i8 %115 to i32
  %117 = shl i32 %116, %114
  %118 = add nsw i32 %117, %107
  %119 = icmp slt i32 %118, 63
  %120 = select i1 %119, i32 %118, i32 63
  %121 = icmp sgt i32 %120, 0
  %122 = select i1 %121, i32 %120, i32 0
  %123 = trunc i32 %122 to i8
  %124 = getelementptr inbounds %struct.AV1Common, %struct.AV1Common* %0, i64 0, i32 25, i32 1, i64 %63, i64 %89, i64 0, i64 0, i64 0
  store i8 %123, i8* %124, align 16
  br label %125

125:                                              ; preds = %125, %113
  %126 = phi i64 [ 1, %113 ], [ %156, %125 ]
  %127 = getelementptr inbounds %struct.AV1Common, %struct.AV1Common* %0, i64 0, i32 26, i32 6, i64 %126
  %128 = load i8, i8* %127, align 1
  %129 = sext i8 %128 to i32
  %130 = shl i32 %129, %114
  %131 = add nsw i32 %130, %107
  %132 = load i8, i8* %58, align 1
  %133 = sext i8 %132 to i32
  %134 = shl i32 %133, %114
  %135 = add nsw i32 %131, %134
  %136 = icmp slt i32 %135, 63
  %137 = select i1 %136, i32 %135, i32 63
  %138 = icmp sgt i32 %137, 0
  %139 = select i1 %138, i32 %137, i32 0
  %140 = trunc i32 %139 to i8
  %141 = getelementptr inbounds %struct.AV1Common, %struct.AV1Common* %0, i64 0, i32 25, i32 1, i64 %63, i64 %89, i64 0, i64 %126, i64 0
  store i8 %140, i8* %141, align 1
  %142 = load i8, i8* %127, align 1
  %143 = sext i8 %142 to i32
  %144 = shl i32 %143, %114
  %145 = add nsw i32 %144, %107
  %146 = load i8, i8* %59, align 1
  %147 = sext i8 %146 to i32
  %148 = shl i32 %147, %114
  %149 = add nsw i32 %145, %148
  %150 = icmp slt i32 %149, 63
  %151 = select i1 %150, i32 %149, i32 63
  %152 = icmp sgt i32 %151, 0
  %153 = select i1 %152, i32 %151, i32 0
  %154 = trunc i32 %153 to i8
  %155 = getelementptr inbounds %struct.AV1Common, %struct.AV1Common* %0, i64 0, i32 25, i32 1, i64 %63, i64 %89, i64 0, i64 %126, i64 1
  store i8 %154, i8* %155, align 1
  %156 = add nuw nsw i64 %126, 1
  %157 = icmp eq i64 %156, 8
  br i1 %157, label %158, label %125

158:                                              ; preds = %125, %110
  %159 = load i8, i8* %54, align 4
  %160 = icmp eq i8 %159, 0
  br i1 %160, label %179, label %166

161:                                              ; preds = %231, %67
  %162 = add nsw i64 %63, 1
  %163 = trunc i64 %162 to i32
  %164 = icmp eq i32 %163, %2
  br i1 %164, label %165, label %62

165:                                              ; preds = %62, %161, %40
  call void @llvm.lifetime.end.p0i8(i64 12, i8* nonnull %10) #5
  call void @llvm.lifetime.end.p0i8(i64 12, i8* nonnull %6) #5
  ret void

166:                                              ; preds = %158
  %167 = load i32, i32* %90, align 4
  %168 = and i32 %167, %86
  %169 = icmp eq i32 %168, 0
  br i1 %169, label %179, label %170

170:                                              ; preds = %166
  %171 = getelementptr inbounds %struct.AV1Common, %struct.AV1Common* %0, i64 0, i32 23, i32 4, i64 %89, i64 %87
  %172 = load i16, i16* %171, align 2
  %173 = sext i16 %172 to i32
  %174 = add nsw i32 %82, %173
  %175 = icmp slt i32 %174, 63
  %176 = select i1 %175, i32 %174, i32 63
  %177 = icmp sgt i32 %176, 0
  %178 = select i1 %177, i32 %176, i32 0
  br label %179

179:                                              ; preds = %170, %166, %158
  %180 = phi i32 [ %178, %170 ], [ %82, %166 ], [ %82, %158 ]
  %181 = load i8, i8* %55, align 4
  %182 = icmp eq i8 %181, 0
  br i1 %182, label %228, label %183

183:                                              ; preds = %179
  %184 = ashr i32 %180, 5
  %185 = load i8, i8* %56, align 2
  %186 = sext i8 %185 to i32
  %187 = shl i32 %186, %184
  %188 = add nsw i32 %187, %180
  %189 = icmp slt i32 %188, 63
  %190 = select i1 %189, i32 %188, i32 63
  %191 = icmp sgt i32 %190, 0
  %192 = select i1 %191, i32 %190, i32 0
  %193 = trunc i32 %192 to i8
  %194 = getelementptr inbounds %struct.AV1Common, %struct.AV1Common* %0, i64 0, i32 25, i32 1, i64 %63, i64 %89, i64 1, i64 0, i64 0
  store i8 %193, i8* %194, align 16
  br label %195

195:                                              ; preds = %195, %183
  %196 = phi i64 [ 1, %183 ], [ %226, %195 ]
  %197 = getelementptr inbounds %struct.AV1Common, %struct.AV1Common* %0, i64 0, i32 26, i32 6, i64 %196
  %198 = load i8, i8* %197, align 1
  %199 = sext i8 %198 to i32
  %200 = shl i32 %199, %184
  %201 = add nsw i32 %200, %180
  %202 = load i8, i8* %60, align 1
  %203 = sext i8 %202 to i32
  %204 = shl i32 %203, %184
  %205 = add nsw i32 %201, %204
  %206 = icmp slt i32 %205, 63
  %207 = select i1 %206, i32 %205, i32 63
  %208 = icmp sgt i32 %207, 0
  %209 = select i1 %208, i32 %207, i32 0
  %210 = trunc i32 %209 to i8
  %211 = getelementptr inbounds %struct.AV1Common, %struct.AV1Common* %0, i64 0, i32 25, i32 1, i64 %63, i64 %89, i64 1, i64 %196, i64 0
  store i8 %210, i8* %211, align 1
  %212 = load i8, i8* %197, align 1
  %213 = sext i8 %212 to i32
  %214 = shl i32 %213, %184
  %215 = add nsw i32 %214, %180
  %216 = load i8, i8* %61, align 1
  %217 = sext i8 %216 to i32
  %218 = shl i32 %217, %184
  %219 = add nsw i32 %215, %218
  %220 = icmp slt i32 %219, 63
  %221 = select i1 %220, i32 %219, i32 63
  %222 = icmp sgt i32 %221, 0
  %223 = select i1 %222, i32 %221, i32 0
  %224 = trunc i32 %223 to i8
  %225 = getelementptr inbounds %struct.AV1Common, %struct.AV1Common* %0, i64 0, i32 25, i32 1, i64 %63, i64 %89, i64 1, i64 %196, i64 1
  store i8 %224, i8* %225, align 1
  %226 = add nuw nsw i64 %196, 1
  %227 = icmp eq i64 %226, 8
  br i1 %227, label %231, label %195

228:                                              ; preds = %179
  %229 = getelementptr inbounds %struct.AV1Common, %struct.AV1Common* %0, i64 0, i32 25, i32 1, i64 %63, i64 %89, i64 1, i64 0, i64 0
  %230 = trunc i32 %180 to i8
  tail call void @llvm.memset.p0i8.i64(i8* align 16 %229, i8 %230, i64 16, i1 false)
  br label %231

231:                                              ; preds = %195, %228
  %232 = add nuw nsw i64 %89, 1
  %233 = icmp eq i64 %232, 8
  br i1 %233, label %161, label %88
}

; Function Attrs: nounwind ssp uwtable
define hidden void @av1_filter_block_plane_vert(%struct.AV1Common*, %struct.macroblockd*, i32, %struct.macroblockd_plane* nocapture readonly, i32, i32) local_unnamed_addr #2 {
  %7 = alloca %struct.AV1_DEBLOCKING_PARAMETERS, align 8
  %8 = getelementptr inbounds %struct.macroblockd_plane, %struct.macroblockd_plane* %3, i64 0, i32 1
  %9 = load i32, i32* %8, align 4
  %10 = getelementptr inbounds %struct.macroblockd_plane, %struct.macroblockd_plane* %3, i64 0, i32 2
  %11 = load i32, i32* %10, align 8
  %12 = getelementptr inbounds %struct.macroblockd_plane, %struct.macroblockd_plane* %3, i64 0, i32 3, i32 0
  %13 = load i8*, i8** %12, align 8
  %14 = getelementptr inbounds %struct.macroblockd_plane, %struct.macroblockd_plane* %3, i64 0, i32 3, i32 4
  %15 = load i32, i32* %14, align 8
  %16 = getelementptr inbounds %struct.AV1Common, %struct.AV1Common* %0, i64 0, i32 21, i32 3
  %17 = load i32, i32* %16, align 4
  %18 = shl i32 1, %11
  %19 = ashr i32 %18, 1
  %20 = add nsw i32 %17, %19
  %21 = ashr i32 %20, %11
  %22 = getelementptr inbounds %struct.AV1Common, %struct.AV1Common* %0, i64 0, i32 21, i32 4
  %23 = load i32, i32* %22, align 16
  %24 = shl i32 1, %9
  %25 = ashr i32 %24, 1
  %26 = add nsw i32 %23, %25
  %27 = ashr i32 %26, %9
  %28 = lshr i32 %4, %11
  %29 = sub i32 %21, %28
  %30 = lshr i32 32, %11
  %31 = icmp slt i32 %29, %30
  %32 = select i1 %31, i32 %29, i32 %30
  %33 = lshr i32 %5, %9
  %34 = sub i32 %27, %33
  %35 = lshr i32 32, %9
  %36 = icmp slt i32 %34, %35
  %37 = select i1 %36, i32 %34, i32 %35
  %38 = icmp sgt i32 %32, 0
  br i1 %38, label %39, label %53

39:                                               ; preds = %6
  %40 = icmp sgt i32 %37, 0
  %41 = shl i32 %5, 2
  %42 = lshr i32 %41, %9
  %43 = shl i32 %4, 2
  %44 = lshr i32 %43, %11
  %45 = bitcast %struct.AV1_DEBLOCKING_PARAMETERS* %7 to i8*
  %46 = zext i32 %9 to i64
  %47 = shl i64 1, %46
  %48 = getelementptr inbounds %struct.AV1_DEBLOCKING_PARAMETERS, %struct.AV1_DEBLOCKING_PARAMETERS* %7, i64 0, i32 0
  %49 = getelementptr inbounds %struct.AV1_DEBLOCKING_PARAMETERS, %struct.AV1_DEBLOCKING_PARAMETERS* %7, i64 0, i32 2
  %50 = getelementptr inbounds %struct.AV1_DEBLOCKING_PARAMETERS, %struct.AV1_DEBLOCKING_PARAMETERS* %7, i64 0, i32 1
  %51 = getelementptr inbounds %struct.AV1_DEBLOCKING_PARAMETERS, %struct.AV1_DEBLOCKING_PARAMETERS* %7, i64 0, i32 3
  %52 = sext i32 %32 to i64
  br label %54

53:                                               ; preds = %63, %6
  ret void

54:                                               ; preds = %39, %63
  %55 = phi i64 [ 0, %39 ], [ %64, %63 ]
  %56 = trunc i64 %55 to i32
  %57 = shl nsw i32 %56, 2
  br i1 %40, label %58, label %63

58:                                               ; preds = %54
  %59 = mul nsw i32 %57, %15
  %60 = sext i32 %59 to i64
  %61 = getelementptr inbounds i8, i8* %13, i64 %60
  %62 = add i32 %57, %44
  br label %66

63:                                               ; preds = %99, %54
  %64 = add nuw nsw i64 %55, 1
  %65 = icmp slt i64 %64, %52
  br i1 %65, label %54, label %53

66:                                               ; preds = %58, %99
  %67 = phi i32 [ 0, %58 ], [ %103, %99 ]
  %68 = phi i8* [ %61, %58 ], [ %106, %99 ]
  %69 = shl i32 %67, 2
  %70 = add i32 %69, %42
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %45) #5
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %45, i8 0, i64 32, i1 false)
  %71 = call fastcc zeroext i8 @set_lpf_parameters(%struct.AV1_DEBLOCKING_PARAMETERS* nonnull %7, i64 %47, %struct.AV1Common* %0, %struct.macroblockd* %1, i8 zeroext 0, i32 %70, i32 %62, i32 %2, %struct.macroblockd_plane* %3)
  %72 = icmp eq i8 %71, -1
  br i1 %72, label %75, label %73

73:                                               ; preds = %66
  %74 = load i32, i32* %48, align 8
  br label %76

75:                                               ; preds = %66
  store i32 0, i32* %48, align 8
  br label %76

76:                                               ; preds = %73, %75
  %77 = phi i32 [ 0, %75 ], [ %74, %73 ]
  %78 = phi i8 [ 0, %75 ], [ %71, %73 ]
  %79 = add i32 %77, -4
  %80 = lshr i32 %79, 1
  %81 = shl i32 %79, 31
  %82 = or i32 %80, %81
  switch i32 %82, label %99 [
    i32 0, label %83
    i32 1, label %87
    i32 2, label %91
    i32 5, label %95
  ]

83:                                               ; preds = %76
  %84 = load i8*, i8** %49, align 8
  %85 = load i8*, i8** %50, align 8
  %86 = load i8*, i8** %51, align 8
  tail call void @aom_lpf_vertical_4_sse2(i8* %68, i32 %15, i8* %84, i8* %85, i8* %86) #5
  br label %99

87:                                               ; preds = %76
  %88 = load i8*, i8** %49, align 8
  %89 = load i8*, i8** %50, align 8
  %90 = load i8*, i8** %51, align 8
  tail call void @aom_lpf_vertical_6_sse2(i8* %68, i32 %15, i8* %88, i8* %89, i8* %90) #5
  br label %99

91:                                               ; preds = %76
  %92 = load i8*, i8** %49, align 8
  %93 = load i8*, i8** %50, align 8
  %94 = load i8*, i8** %51, align 8
  tail call void @aom_lpf_vertical_8_sse2(i8* %68, i32 %15, i8* %92, i8* %93, i8* %94) #5
  br label %99

95:                                               ; preds = %76
  %96 = load i8*, i8** %49, align 8
  %97 = load i8*, i8** %50, align 8
  %98 = load i8*, i8** %51, align 8
  tail call void @aom_lpf_vertical_14_sse2(i8* %68, i32 %15, i8* %96, i8* %97, i8* %98) #5
  br label %99

99:                                               ; preds = %76, %95, %91, %87, %83
  %100 = zext i8 %78 to i64
  %101 = getelementptr inbounds [19 x i32], [19 x i32]* @tx_size_wide_unit, i64 0, i64 %100
  %102 = load i32, i32* %101, align 4
  %103 = add i32 %102, %67
  %104 = shl i32 %102, 2
  %105 = zext i32 %104 to i64
  %106 = getelementptr inbounds i8, i8* %68, i64 %105
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %45) #5
  %107 = icmp slt i32 %103, %37
  br i1 %107, label %66, label %63
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal fastcc zeroext i8 @set_lpf_parameters(%struct.AV1_DEBLOCKING_PARAMETERS* nocapture, i64, %struct.AV1Common*, %struct.macroblockd*, i8 zeroext, i32, i32, i32, %struct.macroblockd_plane* nocapture readonly) unnamed_addr #3 {
  %10 = getelementptr inbounds %struct.AV1_DEBLOCKING_PARAMETERS, %struct.AV1_DEBLOCKING_PARAMETERS* %0, i64 0, i32 0
  store i32 0, i32* %10, align 8
  %11 = getelementptr inbounds %struct.macroblockd_plane, %struct.macroblockd_plane* %8, i64 0, i32 3, i32 2
  %12 = load i32, i32* %11, align 8
  %13 = icmp ugt i32 %12, %5
  br i1 %13, label %14, label %139

14:                                               ; preds = %9
  %15 = getelementptr inbounds %struct.macroblockd_plane, %struct.macroblockd_plane* %8, i64 0, i32 3, i32 3
  %16 = load i32, i32* %15, align 4
  %17 = icmp ugt i32 %16, %6
  br i1 %17, label %18, label %139

18:                                               ; preds = %14
  %19 = getelementptr inbounds %struct.macroblockd_plane, %struct.macroblockd_plane* %8, i64 0, i32 1
  %20 = load i32, i32* %19, align 4
  %21 = getelementptr inbounds %struct.macroblockd_plane, %struct.macroblockd_plane* %8, i64 0, i32 2
  %22 = load i32, i32* %21, align 8
  %23 = shl i32 %6, %22
  %24 = lshr i32 %23, 2
  %25 = or i32 %24, %22
  %26 = shl i32 %5, %20
  %27 = lshr i32 %26, 2
  %28 = or i32 %27, %20
  %29 = getelementptr inbounds %struct.AV1Common, %struct.AV1Common* %2, i64 0, i32 21, i32 9
  %30 = load %struct.MB_MODE_INFO**, %struct.MB_MODE_INFO*** %29, align 16
  %31 = getelementptr inbounds %struct.AV1Common, %struct.AV1Common* %2, i64 0, i32 21, i32 11
  %32 = load i32, i32* %31, align 4
  %33 = mul nsw i32 %25, %32
  %34 = sext i32 %33 to i64
  %35 = getelementptr inbounds %struct.MB_MODE_INFO*, %struct.MB_MODE_INFO** %30, i64 %34
  %36 = sext i32 %28 to i64
  %37 = getelementptr inbounds %struct.MB_MODE_INFO*, %struct.MB_MODE_INFO** %35, i64 %36
  %38 = load %struct.MB_MODE_INFO*, %struct.MB_MODE_INFO** %37, align 8
  %39 = icmp eq %struct.MB_MODE_INFO* %38, null
  br i1 %39, label %139, label %40

40:                                               ; preds = %18
  %41 = tail call fastcc zeroext i8 @get_transform_size(%struct.macroblockd* %3, %struct.MB_MODE_INFO* nonnull %38, i8 zeroext %4, i32 %25, i32 %28, i32 %7, %struct.macroblockd_plane* %8)
  %42 = zext i8 %4 to i32
  %43 = icmp eq i8 %4, 0
  %44 = select i1 %43, i32 %5, i32 %6
  %45 = zext i8 %41 to i64
  %46 = select i1 %43, [19 x i32]* @tx_size_wide, [19 x i32]* @tx_size_high
  %47 = getelementptr inbounds [19 x i32], [19 x i32]* %46, i64 0, i64 %45
  %48 = load i32, i32* %47, align 4
  %49 = add nsw i32 %48, -1
  %50 = and i32 %49, %44
  %51 = icmp eq i32 %50, 0
  br i1 %51, label %52, label %139

52:                                               ; preds = %40
  %53 = getelementptr inbounds %struct.AV1Common, %struct.AV1Common* %2, i64 0, i32 25
  %54 = tail call zeroext i8 @av1_get_filter_level(%struct.AV1Common* %2, %struct.loop_filter_info_n* %53, i32 %42, i32 %7, %struct.MB_MODE_INFO* nonnull %38)
  %55 = getelementptr inbounds %struct.MB_MODE_INFO, %struct.MB_MODE_INFO* %38, i64 0, i32 23
  %56 = load i8, i8* %55, align 8
  %57 = icmp eq i8 %56, 0
  br i1 %57, label %67, label %58

58:                                               ; preds = %52
  %59 = getelementptr inbounds %struct.MB_MODE_INFO, %struct.MB_MODE_INFO* %38, i64 0, i32 28
  %60 = load i16, i16* %59, align 1
  %61 = trunc i16 %60 to i8
  %62 = icmp sgt i8 %61, -1
  br i1 %62, label %63, label %67

63:                                               ; preds = %58
  %64 = getelementptr inbounds %struct.MB_MODE_INFO, %struct.MB_MODE_INFO* %38, i64 0, i32 6, i64 0
  %65 = load i8, i8* %64, align 8
  %66 = icmp sgt i8 %65, 0
  br label %67

67:                                               ; preds = %63, %58, %52
  %68 = phi i1 [ false, %52 ], [ true, %58 ], [ %66, %63 ]
  %69 = icmp eq i32 %44, 0
  br i1 %69, label %139, label %70

70:                                               ; preds = %67
  %71 = sub i64 0, %1
  %72 = getelementptr inbounds %struct.MB_MODE_INFO*, %struct.MB_MODE_INFO** %37, i64 %71
  %73 = load %struct.MB_MODE_INFO*, %struct.MB_MODE_INFO** %72, align 8
  %74 = icmp eq %struct.MB_MODE_INFO* %73, null
  br i1 %74, label %139, label %75

75:                                               ; preds = %70
  %76 = shl i32 1, %22
  %77 = select i1 %43, i32 0, i32 %76
  %78 = sub nsw i32 %25, %77
  %79 = shl i32 1, %20
  %80 = select i1 %43, i32 %79, i32 0
  %81 = sub nsw i32 %28, %80
  %82 = tail call fastcc zeroext i8 @get_transform_size(%struct.macroblockd* %3, %struct.MB_MODE_INFO* nonnull %73, i8 zeroext %4, i32 %78, i32 %81, i32 %7, %struct.macroblockd_plane* %8)
  %83 = tail call zeroext i8 @av1_get_filter_level(%struct.AV1Common* %2, %struct.loop_filter_info_n* %53, i32 %42, i32 %7, %struct.MB_MODE_INFO* nonnull %73)
  %84 = getelementptr inbounds %struct.MB_MODE_INFO, %struct.MB_MODE_INFO* %73, i64 0, i32 23
  %85 = load i8, i8* %84, align 8
  %86 = icmp eq i8 %85, 0
  br i1 %86, label %96, label %87

87:                                               ; preds = %75
  %88 = getelementptr inbounds %struct.MB_MODE_INFO, %struct.MB_MODE_INFO* %73, i64 0, i32 28
  %89 = load i16, i16* %88, align 1
  %90 = trunc i16 %89 to i8
  %91 = icmp sgt i8 %90, -1
  br i1 %91, label %92, label %96

92:                                               ; preds = %87
  %93 = getelementptr inbounds %struct.MB_MODE_INFO, %struct.MB_MODE_INFO* %73, i64 0, i32 6, i64 0
  %94 = load i8, i8* %93, align 8
  %95 = icmp sgt i8 %94, 0
  br label %96

96:                                               ; preds = %92, %87, %75
  %97 = phi i1 [ false, %75 ], [ true, %87 ], [ %95, %92 ]
  %98 = icmp eq i8 %54, 0
  %99 = or i8 %83, %54
  %100 = icmp eq i8 %99, 0
  br i1 %100, label %139, label %101

101:                                              ; preds = %96
  %102 = select i1 %43, [22 x i8]* @block_size_wide, [22 x i8]* @block_size_high
  %103 = getelementptr inbounds %struct.MB_MODE_INFO, %struct.MB_MODE_INFO* %38, i64 0, i32 0
  %104 = load i8, i8* %103, align 8
  %105 = zext i8 %104 to i64
  %106 = sext i32 %20 to i64
  %107 = sext i32 %22 to i64
  %108 = getelementptr inbounds [22 x [2 x [2 x i8]]], [22 x [2 x [2 x i8]]]* @ss_size_lookup, i64 0, i64 %105, i64 %106, i64 %107
  %109 = load i8, i8* %108, align 1
  %110 = zext i8 %109 to i64
  %111 = getelementptr inbounds [22 x i8], [22 x i8]* %102, i64 0, i64 %110
  %112 = load i8, i8* %111, align 1
  %113 = zext i8 %112 to i32
  %114 = add nsw i32 %113, -1
  %115 = and i32 %114, %44
  %116 = icmp eq i32 %115, 0
  %117 = and i1 %68, %97
  %118 = xor i1 %117, true
  %119 = or i1 %116, %118
  br i1 %119, label %120, label %139

120:                                              ; preds = %101
  %121 = icmp ult i8 %41, %82
  %122 = select i1 %121, i8 %41, i8 %82
  switch i8 %122, label %126 [
    i8 0, label %129
    i8 1, label %123
  ]

123:                                              ; preds = %120
  %124 = icmp eq i32 %7, 0
  %125 = select i1 %124, i32 8, i32 6
  br label %129

126:                                              ; preds = %120
  %127 = icmp eq i32 %7, 0
  %128 = select i1 %127, i32 14, i32 6
  br label %129

129:                                              ; preds = %123, %120, %126
  %130 = phi i32 [ %128, %126 ], [ 4, %120 ], [ %125, %123 ]
  store i32 %130, i32* %10, align 8
  %131 = select i1 %98, i8 %83, i8 %54
  %132 = zext i8 %131 to i64
  %133 = getelementptr inbounds %struct.AV1Common, %struct.AV1Common* %2, i64 0, i32 25, i32 0, i64 %132, i32 1, i64 0
  %134 = getelementptr inbounds %struct.AV1_DEBLOCKING_PARAMETERS, %struct.AV1_DEBLOCKING_PARAMETERS* %0, i64 0, i32 1
  store i8* %133, i8** %134, align 8
  %135 = getelementptr inbounds %struct.AV1Common, %struct.AV1Common* %2, i64 0, i32 25, i32 0, i64 %132, i32 0, i64 0
  %136 = getelementptr inbounds %struct.AV1_DEBLOCKING_PARAMETERS, %struct.AV1_DEBLOCKING_PARAMETERS* %0, i64 0, i32 2
  store i8* %135, i8** %136, align 8
  %137 = getelementptr inbounds %struct.AV1Common, %struct.AV1Common* %2, i64 0, i32 25, i32 0, i64 %132, i32 2, i64 0
  %138 = getelementptr inbounds %struct.AV1_DEBLOCKING_PARAMETERS, %struct.AV1_DEBLOCKING_PARAMETERS* %0, i64 0, i32 3
  store i8* %137, i8** %138, align 8
  br label %139

139:                                              ; preds = %101, %96, %67, %70, %40, %129, %18, %9, %14
  %140 = phi i8 [ 0, %14 ], [ 0, %9 ], [ -1, %18 ], [ %41, %129 ], [ %41, %40 ], [ -1, %70 ], [ %41, %67 ], [ %41, %96 ], [ %41, %101 ]
  ret i8 %140
}

declare void @aom_lpf_vertical_4_sse2(i8*, i32, i8*, i8*, i8*) local_unnamed_addr #4

declare void @aom_lpf_vertical_6_sse2(i8*, i32, i8*, i8*, i8*) local_unnamed_addr #4

declare void @aom_lpf_vertical_8_sse2(i8*, i32, i8*, i8*, i8*) local_unnamed_addr #4

declare void @aom_lpf_vertical_14_sse2(i8*, i32, i8*, i8*, i8*) local_unnamed_addr #4

; Function Attrs: nounwind ssp uwtable
define hidden void @av1_filter_block_plane_horz(%struct.AV1Common*, %struct.macroblockd*, i32, %struct.macroblockd_plane* nocapture readonly, i32, i32) local_unnamed_addr #2 {
  %7 = alloca %struct.AV1_DEBLOCKING_PARAMETERS, align 8
  %8 = getelementptr inbounds %struct.macroblockd_plane, %struct.macroblockd_plane* %3, i64 0, i32 1
  %9 = load i32, i32* %8, align 4
  %10 = getelementptr inbounds %struct.macroblockd_plane, %struct.macroblockd_plane* %3, i64 0, i32 2
  %11 = load i32, i32* %10, align 8
  %12 = getelementptr inbounds %struct.macroblockd_plane, %struct.macroblockd_plane* %3, i64 0, i32 3, i32 0
  %13 = load i8*, i8** %12, align 8
  %14 = getelementptr inbounds %struct.macroblockd_plane, %struct.macroblockd_plane* %3, i64 0, i32 3, i32 4
  %15 = load i32, i32* %14, align 8
  %16 = getelementptr inbounds %struct.AV1Common, %struct.AV1Common* %0, i64 0, i32 21, i32 3
  %17 = load i32, i32* %16, align 4
  %18 = shl i32 1, %11
  %19 = ashr i32 %18, 1
  %20 = add nsw i32 %17, %19
  %21 = ashr i32 %20, %11
  %22 = getelementptr inbounds %struct.AV1Common, %struct.AV1Common* %0, i64 0, i32 21, i32 4
  %23 = load i32, i32* %22, align 16
  %24 = shl i32 1, %9
  %25 = ashr i32 %24, 1
  %26 = add nsw i32 %23, %25
  %27 = ashr i32 %26, %9
  %28 = lshr i32 %4, %11
  %29 = sub i32 %21, %28
  %30 = lshr i32 32, %11
  %31 = icmp slt i32 %29, %30
  %32 = select i1 %31, i32 %29, i32 %30
  %33 = lshr i32 %5, %9
  %34 = sub i32 %27, %33
  %35 = lshr i32 32, %9
  %36 = icmp slt i32 %34, %35
  %37 = select i1 %36, i32 %34, i32 %35
  %38 = icmp sgt i32 %37, 0
  br i1 %38, label %39, label %53

39:                                               ; preds = %6
  %40 = icmp sgt i32 %32, 0
  %41 = shl i32 %5, 2
  %42 = lshr i32 %41, %9
  %43 = shl i32 %4, 2
  %44 = lshr i32 %43, %11
  %45 = bitcast %struct.AV1_DEBLOCKING_PARAMETERS* %7 to i8*
  %46 = getelementptr inbounds %struct.AV1Common, %struct.AV1Common* %0, i64 0, i32 21, i32 11
  %47 = getelementptr inbounds %struct.AV1_DEBLOCKING_PARAMETERS, %struct.AV1_DEBLOCKING_PARAMETERS* %7, i64 0, i32 0
  %48 = getelementptr inbounds %struct.AV1_DEBLOCKING_PARAMETERS, %struct.AV1_DEBLOCKING_PARAMETERS* %7, i64 0, i32 2
  %49 = getelementptr inbounds %struct.AV1_DEBLOCKING_PARAMETERS, %struct.AV1_DEBLOCKING_PARAMETERS* %7, i64 0, i32 1
  %50 = getelementptr inbounds %struct.AV1_DEBLOCKING_PARAMETERS, %struct.AV1_DEBLOCKING_PARAMETERS* %7, i64 0, i32 3
  %51 = shl i32 %15, 2
  %52 = sext i32 %37 to i64
  br label %54

53:                                               ; preds = %62, %6
  ret void

54:                                               ; preds = %39, %62
  %55 = phi i64 [ 0, %39 ], [ %63, %62 ]
  %56 = trunc i64 %55 to i32
  %57 = shl nsw i32 %56, 2
  br i1 %40, label %58, label %62

58:                                               ; preds = %54
  %59 = zext i32 %57 to i64
  %60 = getelementptr inbounds i8, i8* %13, i64 %59
  %61 = add i32 %57, %42
  br label %65

62:                                               ; preds = %101, %54
  %63 = add nuw nsw i64 %55, 1
  %64 = icmp slt i64 %63, %52
  br i1 %64, label %54, label %53

65:                                               ; preds = %58, %101
  %66 = phi i32 [ 0, %58 ], [ %105, %101 ]
  %67 = phi i8* [ %60, %58 ], [ %108, %101 ]
  %68 = shl i32 %66, 2
  %69 = add i32 %68, %44
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %45) #5
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %45, i8 0, i64 32, i1 false)
  %70 = load i32, i32* %46, align 4
  %71 = shl i32 %70, %11
  %72 = sext i32 %71 to i64
  %73 = call fastcc zeroext i8 @set_lpf_parameters(%struct.AV1_DEBLOCKING_PARAMETERS* nonnull %7, i64 %72, %struct.AV1Common* %0, %struct.macroblockd* %1, i8 zeroext 1, i32 %61, i32 %69, i32 %2, %struct.macroblockd_plane* %3)
  %74 = icmp eq i8 %73, -1
  br i1 %74, label %77, label %75

75:                                               ; preds = %65
  %76 = load i32, i32* %47, align 8
  br label %78

77:                                               ; preds = %65
  store i32 0, i32* %47, align 8
  br label %78

78:                                               ; preds = %75, %77
  %79 = phi i32 [ 0, %77 ], [ %76, %75 ]
  %80 = phi i8 [ 0, %77 ], [ %73, %75 ]
  %81 = add i32 %79, -4
  %82 = lshr i32 %81, 1
  %83 = shl i32 %81, 31
  %84 = or i32 %82, %83
  switch i32 %84, label %101 [
    i32 0, label %85
    i32 1, label %89
    i32 2, label %93
    i32 5, label %97
  ]

85:                                               ; preds = %78
  %86 = load i8*, i8** %48, align 8
  %87 = load i8*, i8** %49, align 8
  %88 = load i8*, i8** %50, align 8
  tail call void @aom_lpf_horizontal_4_sse2(i8* %67, i32 %15, i8* %86, i8* %87, i8* %88) #5
  br label %101

89:                                               ; preds = %78
  %90 = load i8*, i8** %48, align 8
  %91 = load i8*, i8** %49, align 8
  %92 = load i8*, i8** %50, align 8
  tail call void @aom_lpf_horizontal_6_sse2(i8* %67, i32 %15, i8* %90, i8* %91, i8* %92) #5
  br label %101

93:                                               ; preds = %78
  %94 = load i8*, i8** %48, align 8
  %95 = load i8*, i8** %49, align 8
  %96 = load i8*, i8** %50, align 8
  tail call void @aom_lpf_horizontal_8_sse2(i8* %67, i32 %15, i8* %94, i8* %95, i8* %96) #5
  br label %101

97:                                               ; preds = %78
  %98 = load i8*, i8** %48, align 8
  %99 = load i8*, i8** %49, align 8
  %100 = load i8*, i8** %50, align 8
  tail call void @aom_lpf_horizontal_14_sse2(i8* %67, i32 %15, i8* %98, i8* %99, i8* %100) #5
  br label %101

101:                                              ; preds = %78, %97, %93, %89, %85
  %102 = zext i8 %80 to i64
  %103 = getelementptr inbounds [19 x i32], [19 x i32]* @tx_size_high_unit, i64 0, i64 %102
  %104 = load i32, i32* %103, align 4
  %105 = add i32 %104, %66
  %106 = mul i32 %51, %104
  %107 = zext i32 %106 to i64
  %108 = getelementptr inbounds i8, i8* %67, i64 %107
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %45) #5
  %109 = icmp slt i32 %105, %32
  br i1 %109, label %65, label %62
}

declare void @aom_lpf_horizontal_4_sse2(i8*, i32, i8*, i8*, i8*) local_unnamed_addr #4

declare void @aom_lpf_horizontal_6_sse2(i8*, i32, i8*, i8*, i8*) local_unnamed_addr #4

declare void @aom_lpf_horizontal_8_sse2(i8*, i32, i8*, i8*, i8*) local_unnamed_addr #4

declare void @aom_lpf_horizontal_14_sse2(i8*, i32, i8*, i8*, i8*) local_unnamed_addr #4

; Function Attrs: nounwind ssp uwtable
define hidden void @av1_filter_block_plane_vert_test(%struct.AV1Common*, %struct.macroblockd*, i32, %struct.macroblockd_plane* nocapture readonly, i32, i32) local_unnamed_addr #2 {
  %7 = alloca %struct.AV1_DEBLOCKING_PARAMETERS, align 8
  %8 = getelementptr inbounds %struct.macroblockd_plane, %struct.macroblockd_plane* %3, i64 0, i32 1
  %9 = load i32, i32* %8, align 4
  %10 = getelementptr inbounds %struct.macroblockd_plane, %struct.macroblockd_plane* %3, i64 0, i32 2
  %11 = load i32, i32* %10, align 8
  %12 = getelementptr inbounds %struct.AV1Common, %struct.AV1Common* %0, i64 0, i32 21, i32 3
  %13 = load i32, i32* %12, align 4
  %14 = ashr i32 %13, %11
  %15 = getelementptr inbounds %struct.AV1Common, %struct.AV1Common* %0, i64 0, i32 21, i32 4
  %16 = load i32, i32* %15, align 16
  %17 = ashr i32 %16, %9
  %18 = icmp sgt i32 %14, 0
  br i1 %18, label %19, label %29

19:                                               ; preds = %6
  %20 = icmp sgt i32 %17, 0
  %21 = shl i32 %5, 2
  %22 = lshr i32 %21, %9
  %23 = shl i32 %4, 2
  %24 = lshr i32 %23, %11
  %25 = bitcast %struct.AV1_DEBLOCKING_PARAMETERS* %7 to i8*
  %26 = zext i32 %9 to i64
  %27 = shl i64 1, %26
  %28 = getelementptr inbounds %struct.AV1_DEBLOCKING_PARAMETERS, %struct.AV1_DEBLOCKING_PARAMETERS* %7, i64 0, i32 0
  br label %30

29:                                               ; preds = %35, %6
  ret void

30:                                               ; preds = %35, %19
  %31 = phi i32 [ 0, %19 ], [ %36, %35 ]
  br i1 %20, label %32, label %35

32:                                               ; preds = %30
  %33 = shl i32 %31, 2
  %34 = add i32 %33, %24
  br label %38

35:                                               ; preds = %45, %30
  %36 = add nuw nsw i32 %31, 1
  %37 = icmp eq i32 %36, %14
  br i1 %37, label %29, label %30

38:                                               ; preds = %32, %45
  %39 = phi i32 [ 0, %32 ], [ %50, %45 ]
  %40 = shl i32 %39, 2
  %41 = add i32 %40, %22
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %25) #5
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %25, i8 0, i64 32, i1 false)
  %42 = call fastcc zeroext i8 @set_lpf_parameters(%struct.AV1_DEBLOCKING_PARAMETERS* nonnull %7, i64 %27, %struct.AV1Common* %0, %struct.macroblockd* %1, i8 zeroext 0, i32 %41, i32 %34, i32 %2, %struct.macroblockd_plane* %3)
  %43 = icmp eq i8 %42, -1
  br i1 %43, label %44, label %45

44:                                               ; preds = %38
  store i32 0, i32* %28, align 8
  br label %45

45:                                               ; preds = %44, %38
  %46 = phi i8 [ 0, %44 ], [ %42, %38 ]
  %47 = zext i8 %46 to i64
  %48 = getelementptr inbounds [19 x i32], [19 x i32]* @tx_size_wide_unit, i64 0, i64 %47
  %49 = load i32, i32* %48, align 4
  %50 = add i32 %49, %39
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %25) #5
  %51 = icmp slt i32 %50, %17
  br i1 %51, label %38, label %35
}

; Function Attrs: nounwind ssp uwtable
define hidden void @av1_filter_block_plane_horz_test(%struct.AV1Common*, %struct.macroblockd*, i32, %struct.macroblockd_plane* nocapture readonly, i32, i32) local_unnamed_addr #2 {
  %7 = alloca %struct.AV1_DEBLOCKING_PARAMETERS, align 8
  %8 = getelementptr inbounds %struct.macroblockd_plane, %struct.macroblockd_plane* %3, i64 0, i32 1
  %9 = load i32, i32* %8, align 4
  %10 = getelementptr inbounds %struct.macroblockd_plane, %struct.macroblockd_plane* %3, i64 0, i32 2
  %11 = load i32, i32* %10, align 8
  %12 = getelementptr inbounds %struct.AV1Common, %struct.AV1Common* %0, i64 0, i32 21, i32 3
  %13 = load i32, i32* %12, align 4
  %14 = ashr i32 %13, %11
  %15 = getelementptr inbounds %struct.AV1Common, %struct.AV1Common* %0, i64 0, i32 21, i32 4
  %16 = load i32, i32* %15, align 16
  %17 = ashr i32 %16, %9
  %18 = icmp sgt i32 %17, 0
  br i1 %18, label %19, label %28

19:                                               ; preds = %6
  %20 = icmp sgt i32 %14, 0
  %21 = shl i32 %5, 2
  %22 = lshr i32 %21, %9
  %23 = shl i32 %4, 2
  %24 = lshr i32 %23, %11
  %25 = bitcast %struct.AV1_DEBLOCKING_PARAMETERS* %7 to i8*
  %26 = getelementptr inbounds %struct.AV1Common, %struct.AV1Common* %0, i64 0, i32 21, i32 11
  %27 = getelementptr inbounds %struct.AV1_DEBLOCKING_PARAMETERS, %struct.AV1_DEBLOCKING_PARAMETERS* %7, i64 0, i32 0
  br label %29

28:                                               ; preds = %34, %6
  ret void

29:                                               ; preds = %34, %19
  %30 = phi i32 [ 0, %19 ], [ %35, %34 ]
  br i1 %20, label %31, label %34

31:                                               ; preds = %29
  %32 = shl i32 %30, 2
  %33 = add i32 %32, %22
  br label %37

34:                                               ; preds = %47, %29
  %35 = add nuw nsw i32 %30, 1
  %36 = icmp eq i32 %35, %17
  br i1 %36, label %28, label %29

37:                                               ; preds = %31, %47
  %38 = phi i32 [ 0, %31 ], [ %52, %47 ]
  %39 = shl i32 %38, 2
  %40 = add i32 %39, %24
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %25) #5
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %25, i8 0, i64 32, i1 false)
  %41 = load i32, i32* %26, align 4
  %42 = shl i32 %41, %11
  %43 = sext i32 %42 to i64
  %44 = call fastcc zeroext i8 @set_lpf_parameters(%struct.AV1_DEBLOCKING_PARAMETERS* nonnull %7, i64 %43, %struct.AV1Common* %0, %struct.macroblockd* %1, i8 zeroext 1, i32 %33, i32 %40, i32 %2, %struct.macroblockd_plane* %3)
  %45 = icmp eq i8 %44, -1
  br i1 %45, label %46, label %47

46:                                               ; preds = %37
  store i32 0, i32* %27, align 8
  br label %47

47:                                               ; preds = %46, %37
  %48 = phi i8 [ 0, %46 ], [ %44, %37 ]
  %49 = zext i8 %48 to i64
  %50 = getelementptr inbounds [19 x i32], [19 x i32]* @tx_size_high_unit, i64 0, i64 %49
  %51 = load i32, i32* %50, align 4
  %52 = add i32 %51, %38
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %25) #5
  %53 = icmp slt i32 %52, %14
  br i1 %53, label %37, label %34
}

; Function Attrs: nounwind ssp uwtable
define hidden void @av1_loop_filter_frame(%struct.yv12_buffer_config*, %struct.AV1Common*, %struct.macroblockd*, i32, i32, i32) local_unnamed_addr #2 {
  %7 = getelementptr inbounds %struct.AV1Common, %struct.AV1Common* %1, i64 0, i32 21, i32 3
  %8 = load i32, i32* %7, align 4
  %9 = icmp ne i32 %5, 0
  %10 = icmp sgt i32 %8, 8
  %11 = and i1 %9, %10
  br i1 %11, label %12, label %18

12:                                               ; preds = %6
  %13 = lshr i32 %8, 1
  %14 = and i32 %13, 2147483640
  %15 = icmp sgt i32 %8, 71
  %16 = lshr i32 %8, 3
  %17 = select i1 %15, i32 %16, i32 8
  br label %18

18:                                               ; preds = %12, %6
  %19 = phi i32 [ 0, %6 ], [ %14, %12 ]
  %20 = phi i32 [ %8, %6 ], [ %17, %12 ]
  %21 = add nsw i32 %20, %19
  tail call void @av1_loop_filter_frame_init(%struct.AV1Common* %1, i32 %3, i32 %4)
  %22 = getelementptr inbounds %struct.macroblockd, %struct.macroblockd* %2, i64 0, i32 4, i64 0
  %23 = getelementptr inbounds %struct.AV1Common, %struct.AV1Common* %1, i64 0, i32 21, i32 4
  %24 = load i32, i32* %23, align 16
  %25 = getelementptr inbounds %struct.AV1Common, %struct.AV1Common* %1, i64 0, i32 26, i32 0, i64 1
  %26 = icmp slt i32 %3, %4
  br i1 %26, label %27, label %120

27:                                               ; preds = %18
  %28 = getelementptr inbounds %struct.AV1Common, %struct.AV1Common* %1, i64 0, i32 26, i32 2
  %29 = getelementptr inbounds %struct.AV1Common, %struct.AV1Common* %1, i64 0, i32 26, i32 1
  %30 = getelementptr inbounds %struct.AV1Common, %struct.AV1Common* %1, i64 0, i32 26, i32 0, i64 0
  %31 = getelementptr inbounds %struct.AV1Common, %struct.AV1Common* %1, i64 0, i32 26, i32 8
  %32 = icmp sgt i32 %20, 0
  %33 = icmp sgt i32 %24, 0
  %34 = getelementptr inbounds %struct.AV1Common, %struct.AV1Common* %1, i64 0, i32 35
  %35 = sext i32 %3 to i64
  %36 = icmp sgt i32 %24, 32
  br label %37

37:                                               ; preds = %115, %27
  %38 = phi i64 [ %35, %27 ], [ %116, %115 ]
  %39 = phi i32 [ %3, %27 ], [ %117, %115 ]
  %40 = trunc i64 %38 to i32
  switch i32 %40, label %53 [
    i32 0, label %41
    i32 1, label %47
    i32 2, label %50
  ]

41:                                               ; preds = %37
  %42 = load i32, i32* %30, align 16
  %43 = icmp eq i32 %42, 0
  br i1 %43, label %44, label %53

44:                                               ; preds = %41
  %45 = load i32, i32* %25, align 4
  %46 = icmp eq i32 %45, 0
  br i1 %46, label %120, label %53

47:                                               ; preds = %37
  %48 = load i32, i32* %29, align 8
  %49 = icmp eq i32 %48, 0
  br i1 %49, label %115, label %53

50:                                               ; preds = %37
  %51 = load i32, i32* %28, align 4
  %52 = icmp eq i32 %51, 0
  br i1 %52, label %115, label %53

53:                                               ; preds = %50, %47, %44, %41, %37
  %54 = load i32, i32* %31, align 16
  %55 = icmp eq i32 %54, 0
  br i1 %55, label %60, label %56

56:                                               ; preds = %53
  br i1 %32, label %57, label %115

57:                                               ; preds = %56
  %58 = add nsw i32 %39, 1
  %59 = getelementptr inbounds %struct.macroblockd, %struct.macroblockd* %2, i64 0, i32 4, i64 %38
  br label %64

60:                                               ; preds = %53
  br i1 %32, label %61, label %115

61:                                               ; preds = %60
  %62 = add nsw i32 %39, 1
  %63 = getelementptr inbounds %struct.macroblockd, %struct.macroblockd* %2, i64 0, i32 4, i64 %38
  br label %91

64:                                               ; preds = %85, %57
  %65 = phi i32 [ %19, %57 ], [ %89, %85 ]
  %66 = load %struct.SequenceHeader*, %struct.SequenceHeader** %34, align 16
  %67 = getelementptr inbounds %struct.SequenceHeader, %struct.SequenceHeader* %66, i64 0, i32 7
  %68 = load i8, i8* %67, align 4
  br i1 %33, label %69, label %85

69:                                               ; preds = %64
  tail call void @av1_setup_dst_planes(%struct.macroblockd_plane* %22, i8 zeroext %68, %struct.yv12_buffer_config* %0, i32 %65, i32 0, i32 %40, i32 %58) #5
  tail call void @av1_filter_block_plane_vert(%struct.AV1Common* %1, %struct.macroblockd* %2, i32 %40, %struct.macroblockd_plane* %59, i32 %65, i32 0) #5
  %70 = load %struct.SequenceHeader*, %struct.SequenceHeader** %34, align 16
  %71 = getelementptr inbounds %struct.SequenceHeader, %struct.SequenceHeader* %70, i64 0, i32 7
  %72 = load i8, i8* %71, align 4
  br i1 %36, label %73, label %85

73:                                               ; preds = %69, %73
  %74 = phi i8 [ %84, %73 ], [ %72, %69 ]
  %75 = phi i32 [ %80, %73 ], [ 32, %69 ]
  tail call void @av1_setup_dst_planes(%struct.macroblockd_plane* %22, i8 zeroext %74, %struct.yv12_buffer_config* %0, i32 %65, i32 %75, i32 %40, i32 %58) #5
  tail call void @av1_filter_block_plane_vert(%struct.AV1Common* %1, %struct.macroblockd* %2, i32 %40, %struct.macroblockd_plane* %59, i32 %65, i32 %75) #5
  %76 = add nsw i32 %75, -32
  %77 = load %struct.SequenceHeader*, %struct.SequenceHeader** %34, align 16
  %78 = getelementptr inbounds %struct.SequenceHeader, %struct.SequenceHeader* %77, i64 0, i32 7
  %79 = load i8, i8* %78, align 4
  tail call void @av1_setup_dst_planes(%struct.macroblockd_plane* %22, i8 zeroext %79, %struct.yv12_buffer_config* %0, i32 %65, i32 %76, i32 %40, i32 %58) #5
  tail call void @av1_filter_block_plane_horz(%struct.AV1Common* %1, %struct.macroblockd* %2, i32 %40, %struct.macroblockd_plane* %59, i32 %65, i32 %76) #5
  %80 = add nuw nsw i32 %75, 32
  %81 = icmp slt i32 %80, %24
  %82 = load %struct.SequenceHeader*, %struct.SequenceHeader** %34, align 16
  %83 = getelementptr inbounds %struct.SequenceHeader, %struct.SequenceHeader* %82, i64 0, i32 7
  %84 = load i8, i8* %83, align 4
  br i1 %81, label %73, label %85, !llvm.loop !2

85:                                               ; preds = %69, %73, %64
  %86 = phi i32 [ 0, %64 ], [ 32, %69 ], [ %80, %73 ]
  %87 = phi i8 [ %68, %64 ], [ %72, %69 ], [ %84, %73 ]
  %88 = add nsw i32 %86, -32
  tail call void @av1_setup_dst_planes(%struct.macroblockd_plane* %22, i8 zeroext %87, %struct.yv12_buffer_config* %0, i32 %65, i32 %88, i32 %40, i32 %58) #5
  tail call void @av1_filter_block_plane_horz(%struct.AV1Common* %1, %struct.macroblockd* %2, i32 %40, %struct.macroblockd_plane* %59, i32 %65, i32 %88) #5
  %89 = add nuw nsw i32 %65, 32
  %90 = icmp slt i32 %89, %21
  br i1 %90, label %64, label %115

91:                                               ; preds = %100, %61
  %92 = phi i32 [ %19, %61 ], [ %101, %100 ]
  br i1 %33, label %93, label %100

93:                                               ; preds = %91, %93
  %94 = phi i32 [ %98, %93 ], [ 0, %91 ]
  %95 = load %struct.SequenceHeader*, %struct.SequenceHeader** %34, align 16
  %96 = getelementptr inbounds %struct.SequenceHeader, %struct.SequenceHeader* %95, i64 0, i32 7
  %97 = load i8, i8* %96, align 4
  tail call void @av1_setup_dst_planes(%struct.macroblockd_plane* %22, i8 zeroext %97, %struct.yv12_buffer_config* %0, i32 %92, i32 %94, i32 %40, i32 %62) #5
  tail call void @av1_filter_block_plane_vert(%struct.AV1Common* %1, %struct.macroblockd* %2, i32 %40, %struct.macroblockd_plane* %63, i32 %92, i32 %94) #5
  %98 = add nuw nsw i32 %94, 32
  %99 = icmp slt i32 %98, %24
  br i1 %99, label %93, label %100

100:                                              ; preds = %93, %91
  %101 = add nuw nsw i32 %92, 32
  %102 = icmp slt i32 %101, %21
  br i1 %102, label %91, label %103

103:                                              ; preds = %100, %112
  %104 = phi i32 [ %113, %112 ], [ %19, %100 ]
  br i1 %33, label %105, label %112

105:                                              ; preds = %103, %105
  %106 = phi i32 [ %110, %105 ], [ 0, %103 ]
  %107 = load %struct.SequenceHeader*, %struct.SequenceHeader** %34, align 16
  %108 = getelementptr inbounds %struct.SequenceHeader, %struct.SequenceHeader* %107, i64 0, i32 7
  %109 = load i8, i8* %108, align 4
  tail call void @av1_setup_dst_planes(%struct.macroblockd_plane* %22, i8 zeroext %109, %struct.yv12_buffer_config* %0, i32 %104, i32 %106, i32 %40, i32 %62) #5
  tail call void @av1_filter_block_plane_horz(%struct.AV1Common* %1, %struct.macroblockd* %2, i32 %40, %struct.macroblockd_plane* %63, i32 %104, i32 %106) #5
  %110 = add nuw nsw i32 %106, 32
  %111 = icmp slt i32 %110, %24
  br i1 %111, label %105, label %112

112:                                              ; preds = %105, %103
  %113 = add nuw nsw i32 %104, 32
  %114 = icmp slt i32 %113, %21
  br i1 %114, label %103, label %115

115:                                              ; preds = %85, %112, %60, %56, %50, %47
  %116 = add nsw i64 %38, 1
  %117 = add nsw i32 %39, 1
  %118 = trunc i64 %116 to i32
  %119 = icmp eq i32 %118, %4
  br i1 %119, label %120, label %37

120:                                              ; preds = %44, %115, %18
  ret void
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define internal fastcc zeroext i8 @get_transform_size(%struct.macroblockd* readonly, %struct.MB_MODE_INFO* nocapture readonly, i8 zeroext, i32, i32, i32, %struct.macroblockd_plane* nocapture readonly) unnamed_addr #0 {
  %8 = icmp eq %struct.macroblockd* %0, null
  br i1 %8, label %17, label %9

9:                                                ; preds = %7
  %10 = getelementptr inbounds %struct.MB_MODE_INFO, %struct.MB_MODE_INFO* %1, i64 0, i32 28
  %11 = load i16, i16* %10, align 1
  %12 = and i16 %11, 7
  %13 = zext i16 %12 to i64
  %14 = getelementptr inbounds %struct.macroblockd, %struct.macroblockd* %0, i64 0, i32 42, i64 %13
  %15 = load i32, i32* %14, align 4
  %16 = icmp eq i32 %15, 0
  br i1 %16, label %17, label %89

17:                                               ; preds = %9, %7
  %18 = icmp eq i32 %5, 0
  br i1 %18, label %37, label %19

19:                                               ; preds = %17
  %20 = getelementptr inbounds %struct.MB_MODE_INFO, %struct.MB_MODE_INFO* %1, i64 0, i32 0
  %21 = load i8, i8* %20, align 8
  %22 = getelementptr inbounds %struct.macroblockd_plane, %struct.macroblockd_plane* %6, i64 0, i32 1
  %23 = load i32, i32* %22, align 4
  %24 = getelementptr inbounds %struct.macroblockd_plane, %struct.macroblockd_plane* %6, i64 0, i32 2
  %25 = load i32, i32* %24, align 8
  %26 = zext i8 %21 to i64
  %27 = sext i32 %23 to i64
  %28 = sext i32 %25 to i64
  %29 = getelementptr inbounds [22 x [2 x [2 x i8]]], [22 x [2 x [2 x i8]]]* @ss_size_lookup, i64 0, i64 %26, i64 %27, i64 %28
  %30 = load i8, i8* %29, align 1
  %31 = zext i8 %30 to i64
  %32 = getelementptr inbounds [22 x i8], [22 x i8]* @max_txsize_rect_lookup, i64 0, i64 %31
  %33 = load i8, i8* %32, align 1
  switch i8 %33, label %36 [
    i8 4, label %82
    i8 12, label %82
    i8 11, label %82
    i8 18, label %34
    i8 17, label %35
  ]

34:                                               ; preds = %19
  br label %82

35:                                               ; preds = %19
  br label %82

36:                                               ; preds = %19
  br label %82

37:                                               ; preds = %17
  %38 = getelementptr inbounds %struct.MB_MODE_INFO, %struct.MB_MODE_INFO* %1, i64 0, i32 24
  %39 = load i8, i8* %38, align 1
  %40 = getelementptr inbounds %struct.MB_MODE_INFO, %struct.MB_MODE_INFO* %1, i64 0, i32 28
  %41 = load i16, i16* %40, align 1
  %42 = trunc i16 %41 to i8
  %43 = icmp sgt i8 %42, -1
  br i1 %43, label %44, label %48

44:                                               ; preds = %37
  %45 = getelementptr inbounds %struct.MB_MODE_INFO, %struct.MB_MODE_INFO* %1, i64 0, i32 6, i64 0
  %46 = load i8, i8* %45, align 8
  %47 = icmp slt i8 %46, 1
  br i1 %47, label %82, label %48

48:                                               ; preds = %37, %44
  %49 = getelementptr inbounds %struct.MB_MODE_INFO, %struct.MB_MODE_INFO* %1, i64 0, i32 23
  %50 = load i8, i8* %49, align 8
  %51 = icmp eq i8 %50, 0
  br i1 %51, label %52, label %82

52:                                               ; preds = %48
  %53 = getelementptr inbounds %struct.MB_MODE_INFO, %struct.MB_MODE_INFO* %1, i64 0, i32 0
  %54 = load i8, i8* %53, align 8
  %55 = zext i8 %54 to i64
  %56 = getelementptr inbounds [22 x i8], [22 x i8]* @mi_size_high, i64 0, i64 %55
  %57 = load i8, i8* %56, align 1
  %58 = zext i8 %57 to i32
  %59 = add nsw i32 %58, -1
  %60 = and i32 %59, %3
  %61 = getelementptr inbounds [22 x i8], [22 x i8]* @mi_size_wide, i64 0, i64 %55
  %62 = load i8, i8* %61, align 1
  %63 = zext i8 %62 to i32
  %64 = add nsw i32 %63, -1
  %65 = and i32 %64, %4
  %66 = getelementptr inbounds [22 x i8], [22 x i8]* @av1_get_txb_size_index.tw_h_log2_table, i64 0, i64 %55
  %67 = load i8, i8* %66, align 1
  %68 = zext i8 %67 to i32
  %69 = ashr i32 %60, %68
  %70 = getelementptr inbounds [22 x i8], [22 x i8]* @av1_get_txb_size_index.stride_log2_table, i64 0, i64 %55
  %71 = load i8, i8* %70, align 1
  %72 = zext i8 %71 to i32
  %73 = shl i32 %69, %72
  %74 = getelementptr inbounds [22 x i8], [22 x i8]* @av1_get_txb_size_index.tw_w_log2_table, i64 0, i64 %55
  %75 = load i8, i8* %74, align 1
  %76 = zext i8 %75 to i32
  %77 = ashr i32 %65, %76
  %78 = add nsw i32 %77, %73
  %79 = sext i32 %78 to i64
  %80 = getelementptr inbounds %struct.MB_MODE_INFO, %struct.MB_MODE_INFO* %1, i64 0, i32 25, i64 %79
  %81 = load i8, i8* %80, align 1
  br label %82

82:                                               ; preds = %19, %19, %19, %34, %35, %36, %48, %44, %52
  %83 = phi i8 [ %39, %48 ], [ %81, %52 ], [ %39, %44 ], [ 3, %19 ], [ 3, %19 ], [ 3, %19 ], [ 10, %34 ], [ 9, %35 ], [ %33, %36 ]
  %84 = icmp eq i8 %2, 0
  %85 = zext i8 %83 to i64
  %86 = select i1 %84, [19 x i8]* @txsize_horz_map, [19 x i8]* @txsize_vert_map
  %87 = getelementptr inbounds [19 x i8], [19 x i8]* %86, i64 0, i64 %85
  %88 = load i8, i8* %87, align 1
  br label %89

89:                                               ; preds = %9, %82
  %90 = phi i8 [ %88, %82 ], [ 0, %9 ]
  ret i8 %90
}

declare void @av1_setup_dst_planes(%struct.macroblockd_plane*, i8 zeroext, %struct.yv12_buffer_config*, i32, i32, i32, i32) local_unnamed_addr #4

attributes #0 = { norecurse nounwind readonly ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nofree norecurse nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = distinct !{!2, !3}
!3 = !{!"llvm.loop.unroll.disable"}
