; ModuleID = '../../third_party/ffmpeg/libavformat/oggparseopus.c'
source_filename = "../../third_party/ffmpeg/libavformat/oggparseopus.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"
module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"
module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%struct.ogg_codec = type { i8*, i8, i8*, i32 (%struct.AVFormatContext*, i32)*, i32 (%struct.AVFormatContext*, i32)*, i64 (%struct.AVFormatContext*, i32, i64, i64*)*, i32, i32, void (%struct.AVFormatContext*, i32)* }
%struct.AVFormatContext = type { %struct.AVClass*, %struct.AVInputFormat*, %struct.AVOutputFormat*, i8*, %struct.AVIOContext*, i32, i32, %struct.AVStream**, [1024 x i8], i8*, i64, i64, i64, i32, i32, i32, i64, i64, i8*, i32, i32, %struct.AVProgram**, i32, i32, i32, i32, i32, i32, %struct.AVChapter**, %struct.AVDictionary*, i64, i32, i32, %struct.AVIOInterruptCB, i32, i64, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i64, i32, i32, i32, i32, i32, i8*, i8*, %struct.AVFormatInternal*, i32, %struct.AVCodec*, %struct.AVCodec*, %struct.AVCodec*, %struct.AVCodec*, i32, i8*, i32 (%struct.AVFormatContext*, i32, i8*, i64)*, i64, i8*, i32, i32 (%struct.AVFormatContext*, %struct.AVIOContext**, i8*, i32, %struct.AVIOInterruptCB*, %struct.AVDictionary**)*, i8*, i32 (%struct.AVFormatContext*, %struct.AVIOContext**, i8*, i32, %struct.AVDictionary**)*, void (%struct.AVFormatContext*, %struct.AVIOContext*)*, i8*, i32, i32, i32 }
%struct.AVClass = type { i8*, i8* (i8*)*, %struct.AVOption*, i32, i32, i32, i8* (i8*, i8*)*, %struct.AVClass* (%struct.AVClass*)*, i32, i32 (i8*)*, i32 (%struct.AVOptionRanges**, i8*, i8*, i32)*, %struct.AVClass* (i8**)* }
%struct.AVOption = type opaque
%struct.AVOptionRanges = type opaque
%struct.AVInputFormat = type { i8*, i8*, i32, i8*, %struct.AVCodecTag**, %struct.AVClass*, i8*, %struct.AVInputFormat*, i32, i32, i32 (%struct.AVProbeData*)*, i32 (%struct.AVFormatContext*)*, i32 (%struct.AVFormatContext*, %struct.AVPacket*)*, i32 (%struct.AVFormatContext*)*, i32 (%struct.AVFormatContext*, i32, i64, i32)*, i64 (%struct.AVFormatContext*, i32, i64*, i64)*, i32 (%struct.AVFormatContext*)*, i32 (%struct.AVFormatContext*)*, i32 (%struct.AVFormatContext*, i32, i64, i64, i64, i32)*, i32 (%struct.AVFormatContext*, %struct.AVDeviceInfoList*)*, i32 (%struct.AVFormatContext*, %struct.AVDeviceCapabilitiesQuery*)*, i32 (%struct.AVFormatContext*, %struct.AVDeviceCapabilitiesQuery*)* }
%struct.AVCodecTag = type { i32, i32 }
%struct.AVProbeData = type { i8*, i8*, i32, i8* }
%struct.AVPacket = type { %struct.AVBufferRef*, i64, i64, i8*, i32, i32, i32, %struct.AVPacketSideData*, i32, i64, i64, i64 }
%struct.AVBufferRef = type { %struct.AVBuffer*, i8*, i32 }
%struct.AVBuffer = type opaque
%struct.AVPacketSideData = type { i8*, i32, i32 }
%struct.AVDeviceInfoList = type opaque
%struct.AVDeviceCapabilitiesQuery = type opaque
%struct.AVOutputFormat = type { i8*, i8*, i8*, i8*, i32, i32, i32, i32, %struct.AVCodecTag**, %struct.AVClass*, %struct.AVOutputFormat*, i32, i32 (%struct.AVFormatContext*)*, i32 (%struct.AVFormatContext*, %struct.AVPacket*)*, i32 (%struct.AVFormatContext*)*, i32 (%struct.AVFormatContext*, %struct.AVPacket*, %struct.AVPacket*, i32)*, i32 (i32, i32)*, void (%struct.AVFormatContext*, i32, i64*, i64*)*, i32 (%struct.AVFormatContext*, i32, i8*, i64)*, i32 (%struct.AVFormatContext*, i32, %struct.AVFrame**, i32)*, i32 (%struct.AVFormatContext*, %struct.AVDeviceInfoList*)*, i32 (%struct.AVFormatContext*, %struct.AVDeviceCapabilitiesQuery*)*, i32 (%struct.AVFormatContext*, %struct.AVDeviceCapabilitiesQuery*)*, i32, i32 (%struct.AVFormatContext*)*, void (%struct.AVFormatContext*)*, i32 (%struct.AVFormatContext*, %struct.AVPacket*)* }
%struct.AVFrame = type { [8 x i8*], [8 x i32], i8**, i32, i32, i32, i32, i32, i32, %struct.AVRational, i64, i64, i64, i32, i32, i32, i8*, [8 x i64], i32, i32, i32, i32, i64, i32, i64, [8 x %struct.AVBufferRef*], %struct.AVBufferRef**, i32, %struct.AVFrameSideData**, i32, i32, i32, i32, i32, i32, i32, i64, i64, i64, %struct.AVDictionary*, i32, i32, i32, i8*, i32, i32, %struct.AVBufferRef*, %struct.AVBufferRef*, %struct.AVBufferRef*, i64, i64, i64, i64, %struct.AVBufferRef* }
%struct.AVRational = type { i32, i32 }
%struct.AVFrameSideData = type { i32, i8*, i32, %struct.AVDictionary*, %struct.AVBufferRef* }
%struct.AVIOContext = type { %struct.AVClass*, i8*, i32, i8*, i8*, i8*, i32 (i8*, i8*, i32)*, i32 (i8*, i8*, i32)*, i64 (i8*, i64, i32)*, i64, i32, i32, i32, i64, i8*, i64 (i64, i8*, i32)*, i32, i32 (i8*, i32)*, i64 (i8*, i32, i64, i32)*, i32, i64, i32, i64, i32, i32, i32, i32, i8*, i8*, i32 (i8*, i8*, i32, i32, i64)*, i32, i32, i64, i32 (i8*)*, i64, i8*, i32 }
%struct.AVStream = type { i32, i32, %struct.AVCodecContext*, i8*, %struct.AVRational, i64, i64, i64, i32, i32, %struct.AVRational, %struct.AVDictionary*, %struct.AVRational, %struct.AVPacket, %struct.AVPacketSideData*, i32, i32, %struct.AVRational, i8*, %struct.AVCodecParameters*, i8*, i32, i64, i64, i64, i32, i32, i32, i32, %struct.AVCodecParserContext*, i8*, %struct.AVProbeData, [17 x i64], i8*, i32, i32, i32, i32, i32, i32, %struct.AVStreamInternal* }
%struct.AVCodecContext = type { %struct.AVClass*, i32, i32, %struct.AVCodec*, i32, i32, i8*, %struct.AVCodecInternal*, i8*, i64, i32, i32, i32, i32, i32, i8*, i32, %struct.AVRational, i32, i32, i32, i32, i32, i32, i32, i32, void (%struct.AVCodecContext*, %struct.AVFrame*, i32*, i32, i32, i32)*, i32 (%struct.AVCodecContext*, i32*)*, i32, float, i32, float, i32, i32, float, float, float, float, float, float, float, i32, i32, i32*, %struct.AVRational, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i16*, i16*, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i64, i64, i32, i32, i32 (%struct.AVCodecContext*, %struct.AVFrame*, i32)*, i32, float, float, i32, i32, i32, i32, i32, %struct.RcOverride*, i64, i64, float, float, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i64, void (%struct.AVCodecContext*, i8*, i32, i32)*, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i8*, i8*, i32, i32, i32, i32, i32, i64, %struct.AVHWAccel*, i8*, [8 x i64], i32, i32, i32, i32, i32, %struct.AVFrame*, i32, i32, i32, i32, i32 (%struct.AVCodecContext*, i32 (%struct.AVCodecContext*, i8*)*, i8*, i32*, i32, i32)*, i32 (%struct.AVCodecContext*, i32 (%struct.AVCodecContext*, i8*, i32, i32)*, i8*, i32*, i32)*, i32, i32, i32, i32, i32, i32, i8*, i32, i64, i32, i32, %struct.AVRational, i32, %struct.AVRational, %struct.AVCodecDescriptor*, i64, i64, i64, i64, i8*, i32, i32, i32, i32, i16*, i8*, i8*, i32, %struct.AVPacketSideData*, i32, %struct.AVBufferRef*, i32, i32, i64, %struct.AVBufferRef*, i32, i32, i32, i32, i64, i32 }
%struct.AVCodecInternal = type opaque
%struct.RcOverride = type { i32, i32, i32, float }
%struct.AVHWAccel = type { i8*, i32, i32, i32, i32, i32 (%struct.AVCodecContext*, %struct.AVFrame*)*, i32 (%struct.AVCodecContext*, i8*, i32)*, i32 (%struct.AVCodecContext*, i32, i8*, i32)*, i32 (%struct.AVCodecContext*, i8*, i32)*, i32 (%struct.AVCodecContext*)*, i32, void (%struct.MpegEncContext*)*, i32 (%struct.AVCodecContext*)*, i32 (%struct.AVCodecContext*)*, i32, i32, i32 (%struct.AVCodecContext*, %struct.AVBufferRef*)* }
%struct.MpegEncContext = type opaque
%struct.AVCodecDescriptor = type { i32, i32, i8*, i8*, i32, i8**, %struct.AVProfile* }
%struct.AVProfile = type { i32, i8* }
%struct.AVCodecParameters = type { i32, i32, i32, i8*, i32, i32, i64, i32, i32, i32, i32, i32, i32, %struct.AVRational, i32, i32, i32, i32, i32, i32, i32, i64, i32, i32, i32, i32, i32, i32, i32 }
%struct.AVCodecParserContext = type { i8*, %struct.AVCodecParser*, i64, i64, i64, i32, i32, i64, i64, i64, i64, i32, i32, [4 x i64], [4 x i64], [4 x i64], i32, i64, [4 x i64], i32, i64, i32, i32, i32, [4 x i64], i64, i64, i32, i32, i32, i32, i32, i32, i32, i32, i32 }
%struct.AVCodecParser = type { [5 x i32], i32, i32 (%struct.AVCodecParserContext*)*, i32 (%struct.AVCodecParserContext*, %struct.AVCodecContext*, i8**, i32*, i8*, i32)*, void (%struct.AVCodecParserContext*)*, i32 (%struct.AVCodecContext*, i8*, i32)*, %struct.AVCodecParser* }
%struct.AVStreamInternal = type { i32, %struct.AVBSFContext*, i32, %struct.AVCodecContext*, i32, i32, %struct.anon, i32, i32, %struct.FFFrac*, %struct.anon.0*, %struct.AVIndexEntry*, i32, i32, i64, i64, i32, i32, i32, i64, i64, i64, i32, i64, i64, i32, i32, [17 x i64], [17 x i8], [17 x i64], i64, i8, i8, i32, %struct.AVRational, %struct.AVProbeData, %struct.AVPacketList* }
%struct.AVBSFContext = type { %struct.AVClass*, %struct.AVBitStreamFilter*, %struct.AVBSFInternal*, i8*, %struct.AVCodecParameters*, %struct.AVCodecParameters*, %struct.AVRational, %struct.AVRational }
%struct.AVBitStreamFilter = type { i8*, i32*, %struct.AVClass*, i32, i32 (%struct.AVBSFContext*)*, i32 (%struct.AVBSFContext*, %struct.AVPacket*)*, void (%struct.AVBSFContext*)*, void (%struct.AVBSFContext*)* }
%struct.AVBSFInternal = type opaque
%struct.anon = type { %struct.AVBSFContext*, %struct.AVPacket*, i32 }
%struct.FFFrac = type { i64, i64, i64 }
%struct.anon.0 = type { i64, i64, i32, i64, [2 x [399 x double]]*, i64, i64, i32, i32, i64, i64, i32, i64, i32 }
%struct.AVIndexEntry = type { i64, i64, i32, i32 }
%struct.AVPacketList = type { %struct.AVPacket, %struct.AVPacketList* }
%struct.AVProgram = type { i32, i32, i32, i32*, i32, %struct.AVDictionary*, i32, i32, i32, i32, i64, i64, i64, i32 }
%struct.AVChapter = type { i32, %struct.AVRational, i64, i64, %struct.AVDictionary* }
%struct.AVDictionary = type opaque
%struct.AVIOInterruptCB = type { i32 (i8*)*, i8* }
%struct.AVFormatInternal = type { i32, %struct.AVPacketList*, %struct.AVPacketList*, i64, %struct.AVPacketList*, %struct.AVPacketList*, %struct.AVPacketList*, %struct.AVPacketList*, i32, i64, %struct.AVRational, i32, i32, i32, i64, i32, i32, %struct.AVDictionary*, i32, i32 }
%struct.AVCodec = type { i8*, i8*, i32, i32, i32, %struct.AVRational*, i32*, i32*, i32*, i64*, i8, %struct.AVClass*, %struct.AVProfile*, i8*, i32, %struct.AVCodec*, i32 (%struct.AVCodecContext*, %struct.AVCodecContext*)*, %struct.AVCodecDefault*, void (%struct.AVCodec*)*, i32 (%struct.AVCodecContext*)*, i32 (%struct.AVCodecContext*, i8*, i32, %struct.AVSubtitle*)*, i32 (%struct.AVCodecContext*, %struct.AVPacket*, %struct.AVFrame*, i32*)*, i32 (%struct.AVCodecContext*, i8*, i32*, %struct.AVPacket*)*, i32 (%struct.AVCodecContext*)*, i32 (%struct.AVCodecContext*, %struct.AVPacket*)*, i32 (%struct.AVCodecContext*, %struct.AVFrame*)*, void (%struct.AVCodecContext*)*, i32, i8*, %struct.AVCodecHWConfigInternal**, i32* }
%struct.AVCodecDefault = type opaque
%struct.AVSubtitle = type { i16, i32, i32, i32, %struct.AVSubtitleRect**, i64 }
%struct.AVSubtitleRect = type { i32, i32, i32, i32, i32, %struct.AVPicture, [4 x i8*], [4 x i32], i32, i8*, i8*, i32 }
%struct.AVPicture = type { [8 x i8*], [8 x i32] }
%struct.AVCodecHWConfigInternal = type opaque
%struct.ogg = type { %struct.ogg_stream*, i32, i32, i32, i64, %struct.ogg_state* }
%struct.ogg_stream = type { i8*, i32, i32, i32, i32, i32, i32, i32, i64, i64, i64, i64, i64, i64, i32, %struct.ogg_codec*, i32, i32, i32, [255 x i8], i32, i32, i32, i32, i32, i32, i32, i32, i8*, i32, i8* }
%struct.ogg_state = type { i64, i32, %struct.ogg_state*, i32, [1 x %struct.ogg_stream] }
%struct.oggopus_private = type { i32, i32, i64 }

@.str = private unnamed_addr constant [9 x i8] c"OpusHead\00", align 1
@.str.1 = private unnamed_addr constant [5 x i8] c"Opus\00", align 1
@ff_opus_codec = hidden local_unnamed_addr constant %struct.ogg_codec { i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str, i32 0, i32 0), i8 8, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.1, i32 0, i32 0), i32 (%struct.AVFormatContext*, i32)* @opus_header, i32 (%struct.AVFormatContext*, i32)* @opus_packet, i64 (%struct.AVFormatContext*, i32, i64, i64*)* null, i32 0, i32 1, void (%struct.AVFormatContext*, i32)* null }, align 8
@.str.2 = private unnamed_addr constant [9 x i8] c"OpusTags\00", align 1
@.str.3 = private unnamed_addr constant [34 x i8] c"Unsupported huge granule pos %ld\0A\00", align 1
@.str.4 = private unnamed_addr constant [54 x i8] c"Last packet was truncated to %d due to end trimming.\0A\00", align 1

; Function Attrs: nounwind ssp uwtable
define internal i32 @opus_header(%struct.AVFormatContext*, i32) #0 {
  %3 = getelementptr inbounds %struct.AVFormatContext, %struct.AVFormatContext* %0, i64 0, i32 3
  %4 = bitcast i8** %3 to %struct.ogg**
  %5 = load %struct.ogg*, %struct.ogg** %4, align 8
  %6 = getelementptr inbounds %struct.ogg, %struct.ogg* %5, i64 0, i32 0
  %7 = load %struct.ogg_stream*, %struct.ogg_stream** %6, align 8
  %8 = sext i32 %1 to i64
  %9 = getelementptr inbounds %struct.AVFormatContext, %struct.AVFormatContext* %0, i64 0, i32 7
  %10 = load %struct.AVStream**, %struct.AVStream*** %9, align 8
  %11 = getelementptr inbounds %struct.AVStream*, %struct.AVStream** %10, i64 %8
  %12 = load %struct.AVStream*, %struct.AVStream** %11, align 8
  %13 = getelementptr inbounds %struct.ogg_stream, %struct.ogg_stream* %7, i64 %8, i32 30
  %14 = bitcast i8** %13 to %struct.oggopus_private**
  %15 = load %struct.oggopus_private*, %struct.oggopus_private** %14, align 8
  %16 = getelementptr inbounds %struct.ogg_stream, %struct.ogg_stream* %7, i64 %8, i32 0
  %17 = load i8*, i8** %16, align 8
  %18 = getelementptr inbounds %struct.ogg_stream, %struct.ogg_stream* %7, i64 %8, i32 3
  %19 = load i32, i32* %18, align 8
  %20 = zext i32 %19 to i64
  %21 = getelementptr inbounds i8, i8* %17, i64 %20
  %22 = icmp eq %struct.oggopus_private* %15, null
  br i1 %22, label %23, label %27

23:                                               ; preds = %2
  %24 = tail call noalias i8* @av_mallocz(i64 16) #5
  store i8* %24, i8** %13, align 8
  %25 = bitcast i8* %24 to %struct.oggopus_private*
  %26 = icmp eq i8* %24, null
  br i1 %26, label %98, label %27

27:                                               ; preds = %23, %2
  %28 = phi %struct.oggopus_private* [ %15, %2 ], [ %25, %23 ]
  %29 = getelementptr inbounds %struct.ogg_stream, %struct.ogg_stream* %7, i64 %8, i32 14
  %30 = load i32, i32* %29, align 8
  %31 = and i32 %30, 2
  %32 = icmp eq i32 %31, 0
  br i1 %32, label %81, label %33

33:                                               ; preds = %27
  %34 = getelementptr inbounds %struct.ogg_stream, %struct.ogg_stream* %7, i64 %8, i32 4
  %35 = load i32, i32* %34, align 4
  %36 = icmp ult i32 %35, 19
  br i1 %36, label %98, label %37

37:                                               ; preds = %33
  %38 = getelementptr inbounds i8, i8* %21, i64 8
  %39 = load i8, i8* %38, align 1
  %40 = icmp ugt i8 %39, 15
  br i1 %40, label %98, label %41

41:                                               ; preds = %37
  %42 = getelementptr inbounds %struct.AVStream, %struct.AVStream* %12, i64 0, i32 19
  %43 = load %struct.AVCodecParameters*, %struct.AVCodecParameters** %42, align 8
  %44 = getelementptr inbounds %struct.AVCodecParameters, %struct.AVCodecParameters* %43, i64 0, i32 0
  store i32 1, i32* %44, align 8
  %45 = load %struct.AVCodecParameters*, %struct.AVCodecParameters** %42, align 8
  %46 = getelementptr inbounds %struct.AVCodecParameters, %struct.AVCodecParameters* %45, i64 0, i32 1
  store i32 86076, i32* %46, align 4
  %47 = getelementptr inbounds i8, i8* %21, i64 9
  %48 = load i8, i8* %47, align 1
  %49 = zext i8 %48 to i32
  %50 = load %struct.AVCodecParameters*, %struct.AVCodecParameters** %42, align 8
  %51 = getelementptr inbounds %struct.AVCodecParameters, %struct.AVCodecParameters* %50, i64 0, i32 22
  store i32 %49, i32* %51, align 8
  %52 = getelementptr inbounds i8, i8* %21, i64 10
  %53 = bitcast i8* %52 to i16*
  %54 = load i16, i16* %53, align 1
  %55 = zext i16 %54 to i32
  %56 = getelementptr inbounds %struct.oggopus_private, %struct.oggopus_private* %28, i64 0, i32 1
  store i32 %55, i32* %56, align 4
  %57 = load %struct.AVCodecParameters*, %struct.AVCodecParameters** %42, align 8
  %58 = getelementptr inbounds %struct.AVCodecParameters, %struct.AVCodecParameters* %57, i64 0, i32 26
  store i32 %55, i32* %58, align 8
  %59 = load i32, i32* %56, align 4
  %60 = getelementptr inbounds %struct.ogg_stream, %struct.ogg_stream* %7, i64 %8, i32 26
  store i32 %59, i32* %60, align 4
  %61 = load %struct.AVCodecParameters*, %struct.AVCodecParameters** %42, align 8
  %62 = load i32, i32* %34, align 4
  %63 = tail call i32 @ff_alloc_extradata(%struct.AVCodecParameters* %61, i32 %62) #5
  %64 = icmp slt i32 %63, 0
  br i1 %64, label %98, label %65

65:                                               ; preds = %41
  %66 = load %struct.AVCodecParameters*, %struct.AVCodecParameters** %42, align 8
  %67 = getelementptr inbounds %struct.AVCodecParameters, %struct.AVCodecParameters* %66, i64 0, i32 3
  %68 = load i8*, i8** %67, align 8
  %69 = load i32, i32* %34, align 4
  %70 = zext i32 %69 to i64
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %68, i8* align 1 %21, i64 %70, i1 false)
  %71 = load %struct.AVCodecParameters*, %struct.AVCodecParameters** %42, align 8
  %72 = getelementptr inbounds %struct.AVCodecParameters, %struct.AVCodecParameters* %71, i64 0, i32 23
  store i32 48000, i32* %72, align 4
  %73 = load %struct.AVCodecParameters*, %struct.AVCodecParameters** %42, align 8
  %74 = getelementptr inbounds %struct.AVCodecParameters, %struct.AVCodecParameters* %73, i64 0, i32 23
  %75 = load i32, i32* %74, align 4
  %76 = sext i32 %75 to i64
  %77 = tail call i64 @av_rescale(i64 80, i64 %76, i64 1000) #6
  %78 = trunc i64 %77 to i32
  %79 = getelementptr inbounds %struct.AVCodecParameters, %struct.AVCodecParameters* %73, i64 0, i32 28
  store i32 %78, i32* %79, align 8
  tail call void @avpriv_set_pts_info(%struct.AVStream* %12, i32 64, i32 1, i32 48000) #5
  %80 = getelementptr inbounds %struct.oggopus_private, %struct.oggopus_private* %28, i64 0, i32 0
  store i32 1, i32* %80, align 8
  br label %98

81:                                               ; preds = %27
  %82 = getelementptr inbounds %struct.oggopus_private, %struct.oggopus_private* %28, i64 0, i32 0
  %83 = load i32, i32* %82, align 8
  %84 = icmp eq i32 %83, 0
  br i1 %84, label %98, label %85

85:                                               ; preds = %81
  %86 = getelementptr inbounds %struct.ogg_stream, %struct.ogg_stream* %7, i64 %8, i32 4
  %87 = load i32, i32* %86, align 4
  %88 = icmp ult i32 %87, 8
  br i1 %88, label %98, label %89

89:                                               ; preds = %85
  %90 = tail call i32 @bcmp(i8* %21, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.2, i64 0, i64 0), i64 8)
  %91 = icmp eq i32 %90, 0
  br i1 %91, label %92, label %98

92:                                               ; preds = %89
  %93 = getelementptr inbounds i8, i8* %21, i64 8
  %94 = add i32 %87, -8
  %95 = tail call i32 @ff_vorbis_stream_comment(%struct.AVFormatContext* %0, %struct.AVStream* %12, i8* %93, i32 %94) #5
  %96 = load i32, i32* %82, align 8
  %97 = add nsw i32 %96, -1
  store i32 %97, i32* %82, align 8
  br label %98

98:                                               ; preds = %81, %85, %89, %41, %33, %37, %23, %92, %65
  %99 = phi i32 [ 1, %65 ], [ 1, %92 ], [ -12, %23 ], [ -1094995529, %37 ], [ -1094995529, %33 ], [ %63, %41 ], [ -1094995529, %89 ], [ -1094995529, %85 ], [ 0, %81 ]
  ret i32 %99
}

; Function Attrs: nounwind ssp uwtable
define internal i32 @opus_packet(%struct.AVFormatContext*, i32) #0 {
  %3 = getelementptr inbounds %struct.AVFormatContext, %struct.AVFormatContext* %0, i64 0, i32 3
  %4 = bitcast i8** %3 to %struct.ogg**
  %5 = load %struct.ogg*, %struct.ogg** %4, align 8
  %6 = getelementptr inbounds %struct.ogg, %struct.ogg* %5, i64 0, i32 0
  %7 = load %struct.ogg_stream*, %struct.ogg_stream** %6, align 8
  %8 = sext i32 %1 to i64
  %9 = getelementptr inbounds %struct.AVFormatContext, %struct.AVFormatContext* %0, i64 0, i32 7
  %10 = load %struct.AVStream**, %struct.AVStream*** %9, align 8
  %11 = getelementptr inbounds %struct.AVStream*, %struct.AVStream** %10, i64 %8
  %12 = load %struct.AVStream*, %struct.AVStream** %11, align 8
  %13 = getelementptr inbounds %struct.ogg_stream, %struct.ogg_stream* %7, i64 %8, i32 30
  %14 = bitcast i8** %13 to %struct.oggopus_private**
  %15 = load %struct.oggopus_private*, %struct.oggopus_private** %14, align 8
  %16 = getelementptr inbounds %struct.ogg_stream, %struct.ogg_stream* %7, i64 %8, i32 0
  %17 = load i8*, i8** %16, align 8
  %18 = getelementptr inbounds %struct.ogg_stream, %struct.ogg_stream* %7, i64 %8, i32 3
  %19 = load i32, i32* %18, align 8
  %20 = zext i32 %19 to i64
  %21 = getelementptr inbounds i8, i8* %17, i64 %20
  %22 = getelementptr inbounds %struct.ogg_stream, %struct.ogg_stream* %7, i64 %8, i32 4
  %23 = load i32, i32* %22, align 4
  %24 = icmp eq i32 %23, 0
  br i1 %24, label %229, label %25

25:                                               ; preds = %2
  %26 = getelementptr inbounds %struct.ogg_stream, %struct.ogg_stream* %7, i64 %8, i32 8
  %27 = load i64, i64* %26, align 8
  %28 = icmp ugt i64 %27, 4611686018427387904
  br i1 %28, label %29, label %31

29:                                               ; preds = %25
  %30 = bitcast %struct.AVFormatContext* %0 to i8*
  tail call void (i8*, i32, i8*, ...) @av_log(i8* %30, i32 16, i8* getelementptr inbounds ([34 x i8], [34 x i8]* @.str.3, i64 0, i64 0), i64 %27) #5
  br label %229

31:                                               ; preds = %25
  %32 = getelementptr inbounds %struct.ogg_stream, %struct.ogg_stream* %7, i64 %8, i32 10
  %33 = load i64, i64* %32, align 8
  switch i64 %33, label %146 [
    i64 0, label %34
    i64 -9223372036854775808, label %34
  ]

34:                                               ; preds = %31, %31
  %35 = getelementptr inbounds %struct.ogg_stream, %struct.ogg_stream* %7, i64 %8, i32 14
  %36 = load i32, i32* %35, align 8
  %37 = and i32 %36, 4
  %38 = icmp eq i32 %37, 0
  br i1 %38, label %39, label %146

39:                                               ; preds = %34
  %40 = getelementptr inbounds %struct.ogg_stream, %struct.ogg_stream* %7, i64 %8, i32 18
  %41 = load i32, i32* %40, align 8
  %42 = load i8, i8* %21, align 1
  %43 = zext i8 %42 to i32
  %44 = lshr i32 %43, 3
  %45 = and i32 %43, 3
  %46 = icmp ult i8 %42, 96
  br i1 %46, label %47, label %52

47:                                               ; preds = %39
  %48 = and i32 %44, 3
  %49 = mul nuw nsw i32 %48, 960
  %50 = icmp ugt i32 %49, 480
  %51 = select i1 %50, i32 %49, i32 480
  br label %59

52:                                               ; preds = %39
  %53 = icmp sgt i8 %42, -1
  %54 = and i32 %44, 1
  %55 = shl i32 480, %54
  %56 = and i32 %44, 3
  %57 = shl i32 120, %56
  %58 = select i1 %53, i32 %55, i32 %57
  br label %59

59:                                               ; preds = %52, %47
  %60 = phi i32 [ %58, %52 ], [ %51, %47 ]
  switch i32 %45, label %68 [
    i32 3, label %61
    i32 0, label %69
  ]

61:                                               ; preds = %59
  %62 = icmp slt i32 %23, 2
  br i1 %62, label %73, label %63

63:                                               ; preds = %61
  %64 = getelementptr inbounds i8, i8* %21, i64 1
  %65 = load i8, i8* %64, align 1
  %66 = and i8 %65, 63
  %67 = zext i8 %66 to i32
  br label %69

68:                                               ; preds = %59
  br label %69

69:                                               ; preds = %59, %63, %68
  %70 = phi i32 [ %67, %63 ], [ 2, %68 ], [ 1, %59 ]
  %71 = mul nsw i32 %70, %60
  %72 = icmp slt i32 %71, 0
  br i1 %72, label %73, label %77

73:                                               ; preds = %61, %69
  %74 = getelementptr inbounds %struct.ogg_stream, %struct.ogg_stream* %7, i64 %8, i32 5
  %75 = load i32, i32* %74, align 8
  %76 = or i32 %75, 2
  store i32 %76, i32* %74, align 8
  br label %229

77:                                               ; preds = %69
  %78 = zext i32 %23 to i64
  %79 = getelementptr inbounds i8, i8* %21, i64 %78
  %80 = getelementptr inbounds %struct.ogg_stream, %struct.ogg_stream* %7, i64 %8, i32 17
  %81 = load i32, i32* %80, align 4
  %82 = icmp slt i32 %41, %81
  br i1 %82, label %83, label %141

83:                                               ; preds = %77
  %84 = sext i32 %41 to i64
  %85 = sext i32 %81 to i64
  br label %86

86:                                               ; preds = %83, %136
  %87 = phi i64 [ %84, %83 ], [ %139, %136 ]
  %88 = phi i8* [ %79, %83 ], [ %94, %136 ]
  %89 = phi i8* [ %79, %83 ], [ %138, %136 ]
  %90 = phi i32 [ %71, %83 ], [ %137, %136 ]
  %91 = getelementptr inbounds %struct.ogg_stream, %struct.ogg_stream* %7, i64 %8, i32 19, i64 %87
  %92 = load i8, i8* %91, align 1
  %93 = zext i8 %92 to i64
  %94 = getelementptr inbounds i8, i8* %88, i64 %93
  %95 = icmp eq i8 %92, -1
  %96 = icmp eq i8* %94, %89
  %97 = or i1 %95, %96
  br i1 %97, label %136, label %98

98:                                               ; preds = %86
  %99 = ptrtoint i8* %94 to i64
  %100 = ptrtoint i8* %89 to i64
  %101 = sub i64 %99, %100
  %102 = trunc i64 %101 to i32
  %103 = load i8, i8* %89, align 1
  %104 = zext i8 %103 to i32
  %105 = lshr i32 %104, 3
  %106 = and i32 %104, 3
  %107 = icmp ult i8 %103, 96
  br i1 %107, label %108, label %113

108:                                              ; preds = %98
  %109 = and i32 %105, 3
  %110 = mul nuw nsw i32 %109, 960
  %111 = icmp ugt i32 %110, 480
  %112 = select i1 %111, i32 %110, i32 480
  br label %120

113:                                              ; preds = %98
  %114 = icmp sgt i8 %103, -1
  %115 = and i32 %105, 1
  %116 = shl i32 480, %115
  %117 = and i32 %105, 3
  %118 = shl i32 120, %117
  %119 = select i1 %114, i32 %116, i32 %118
  br label %120

120:                                              ; preds = %113, %108
  %121 = phi i32 [ %119, %113 ], [ %112, %108 ]
  switch i32 %106, label %129 [
    i32 3, label %122
    i32 0, label %130
  ]

122:                                              ; preds = %120
  %123 = icmp slt i32 %102, 2
  br i1 %123, label %136, label %124

124:                                              ; preds = %122
  %125 = getelementptr inbounds i8, i8* %89, i64 1
  %126 = load i8, i8* %125, align 1
  %127 = and i8 %126, 63
  %128 = zext i8 %127 to i32
  br label %130

129:                                              ; preds = %120
  br label %130

130:                                              ; preds = %120, %124, %129
  %131 = phi i32 [ %128, %124 ], [ 2, %129 ], [ 1, %120 ]
  %132 = mul nsw i32 %131, %121
  %133 = icmp sgt i32 %132, 0
  %134 = select i1 %133, i32 %132, i32 0
  %135 = add nsw i32 %134, %90
  br label %136

136:                                              ; preds = %130, %122, %86
  %137 = phi i32 [ %90, %86 ], [ %90, %122 ], [ %135, %130 ]
  %138 = phi i8* [ %89, %86 ], [ %94, %122 ], [ %94, %130 ]
  %139 = add nsw i64 %87, 1
  %140 = icmp slt i64 %139, %85
  br i1 %140, label %86, label %141

141:                                              ; preds = %136, %77
  %142 = phi i32 [ %71, %77 ], [ %137, %136 ]
  %143 = sext i32 %142 to i64
  %144 = sub i64 %27, %143
  %145 = getelementptr inbounds %struct.ogg_stream, %struct.ogg_stream* %7, i64 %8, i32 11
  store i64 %144, i64* %145, align 8
  store i64 %144, i64* %32, align 8
  br label %146

146:                                              ; preds = %141, %31, %34
  %147 = phi i64 [ %144, %141 ], [ %33, %31 ], [ %33, %34 ]
  %148 = load i8, i8* %21, align 1
  %149 = zext i8 %148 to i32
  %150 = lshr i32 %149, 3
  %151 = and i32 %149, 3
  %152 = icmp ult i8 %148, 96
  br i1 %152, label %153, label %158

153:                                              ; preds = %146
  %154 = and i32 %150, 3
  %155 = mul nuw nsw i32 %154, 960
  %156 = icmp ugt i32 %155, 480
  %157 = select i1 %156, i32 %155, i32 480
  br label %165

158:                                              ; preds = %146
  %159 = icmp sgt i8 %148, -1
  %160 = and i32 %150, 1
  %161 = shl i32 480, %160
  %162 = and i32 %150, 3
  %163 = shl i32 120, %162
  %164 = select i1 %159, i32 %161, i32 %163
  br label %165

165:                                              ; preds = %158, %153
  %166 = phi i32 [ %164, %158 ], [ %157, %153 ]
  switch i32 %151, label %174 [
    i32 3, label %167
    i32 0, label %175
  ]

167:                                              ; preds = %165
  %168 = icmp slt i32 %23, 2
  br i1 %168, label %229, label %169

169:                                              ; preds = %167
  %170 = getelementptr inbounds i8, i8* %21, i64 1
  %171 = load i8, i8* %170, align 1
  %172 = and i8 %171, 63
  %173 = zext i8 %172 to i32
  br label %175

174:                                              ; preds = %165
  br label %175

175:                                              ; preds = %165, %169, %174
  %176 = phi i32 [ %173, %169 ], [ 2, %174 ], [ 1, %165 ]
  %177 = mul nsw i32 %176, %166
  %178 = icmp slt i32 %177, 0
  br i1 %178, label %229, label %179

179:                                              ; preds = %175
  %180 = getelementptr inbounds %struct.ogg_stream, %struct.ogg_stream* %7, i64 %8, i32 6
  store i32 %177, i32* %180, align 4
  %181 = icmp eq i64 %147, -9223372036854775808
  br i1 %181, label %182, label %185

182:                                              ; preds = %179
  %183 = getelementptr inbounds %struct.oggopus_private, %struct.oggopus_private* %15, i64 0, i32 2
  %184 = load i64, i64* %183, align 8
  br label %200

185:                                              ; preds = %179
  %186 = getelementptr inbounds %struct.AVStream, %struct.AVStream* %12, i64 0, i32 5
  %187 = load i64, i64* %186, align 8
  %188 = icmp eq i64 %187, -9223372036854775808
  br i1 %188, label %189, label %191

189:                                              ; preds = %185
  store i64 %147, i64* %186, align 8
  %190 = load i64, i64* %32, align 8
  br label %191

191:                                              ; preds = %189, %185
  %192 = phi i64 [ %190, %189 ], [ %147, %185 ]
  %193 = getelementptr inbounds %struct.oggopus_private, %struct.oggopus_private* %15, i64 0, i32 1
  %194 = load i32, i32* %193, align 4
  %195 = zext i32 %194 to i64
  %196 = sub nsw i64 %192, %195
  store i64 %196, i64* %32, align 8
  %197 = getelementptr inbounds %struct.ogg_stream, %struct.ogg_stream* %7, i64 %8, i32 11
  store i64 %196, i64* %197, align 8
  %198 = getelementptr inbounds %struct.oggopus_private, %struct.oggopus_private* %15, i64 0, i32 2
  store i64 %196, i64* %198, align 8
  %199 = load i32, i32* %180, align 4
  br label %200

200:                                              ; preds = %182, %191
  %201 = phi i64 [ %184, %182 ], [ %196, %191 ]
  %202 = phi i32 [ %177, %182 ], [ %199, %191 ]
  %203 = zext i32 %202 to i64
  %204 = getelementptr inbounds %struct.oggopus_private, %struct.oggopus_private* %15, i64 0, i32 2
  %205 = add nsw i64 %201, %203
  store i64 %205, i64* %204, align 8
  %206 = getelementptr inbounds %struct.ogg_stream, %struct.ogg_stream* %7, i64 %8, i32 14
  %207 = load i32, i32* %206, align 8
  %208 = and i32 %207, 4
  %209 = icmp eq i32 %208, 0
  br i1 %209, label %229, label %210

210:                                              ; preds = %200
  %211 = load i64, i64* %26, align 8
  %212 = sub i64 %205, %211
  %213 = getelementptr inbounds %struct.oggopus_private, %struct.oggopus_private* %15, i64 0, i32 1
  %214 = load i32, i32* %213, align 4
  %215 = zext i32 %214 to i64
  %216 = add i64 %212, %215
  %217 = load i32, i32* %180, align 4
  %218 = zext i32 %217 to i64
  %219 = icmp sgt i64 %216, %218
  %220 = select i1 %219, i64 %218, i64 %216
  %221 = icmp sgt i64 %220, 0
  br i1 %221, label %222, label %229

222:                                              ; preds = %210
  %223 = icmp slt i64 %216, %218
  %224 = trunc i64 %220 to i32
  %225 = sub i32 %217, %224
  %226 = select i1 %223, i32 %225, i32 1
  store i32 %226, i32* %180, align 4
  %227 = getelementptr inbounds %struct.ogg_stream, %struct.ogg_stream* %7, i64 %8, i32 27
  store i32 %224, i32* %227, align 8
  %228 = bitcast %struct.AVFormatContext* %0 to i8*
  tail call void (i8*, i32, i8*, ...) @av_log(i8* %228, i32 48, i8* getelementptr inbounds ([54 x i8], [54 x i8]* @.str.4, i64 0, i64 0), i32 %226) #5
  br label %229

229:                                              ; preds = %167, %200, %222, %210, %175, %73, %2, %29
  %230 = phi i32 [ -1094995529, %29 ], [ -1094995529, %2 ], [ 0, %73 ], [ %177, %175 ], [ 0, %210 ], [ 0, %222 ], [ 0, %200 ], [ -1094995529, %167 ]
  ret i32 %230
}

declare noalias i8* @av_mallocz(i64) local_unnamed_addr #1

declare i32 @ff_alloc_extradata(%struct.AVCodecParameters*, i32) local_unnamed_addr #1

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #2

; Function Attrs: nounwind readnone
declare i64 @av_rescale(i64, i64, i64) local_unnamed_addr #3

declare void @avpriv_set_pts_info(%struct.AVStream*, i32, i32, i32) local_unnamed_addr #1

declare i32 @ff_vorbis_stream_comment(%struct.AVFormatContext*, %struct.AVStream*, i8*, i32) local_unnamed_addr #1

declare void @av_log(i8*, i32, i8*, ...) local_unnamed_addr #1

; Function Attrs: nofree nounwind readonly
declare i32 @bcmp(i8* nocapture, i8* nocapture, i64) local_unnamed_addr #4

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="true" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="true" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind }
attributes #3 = { nounwind readnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="true" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nofree nounwind readonly }
attributes #5 = { nounwind }
attributes #6 = { nounwind readnone }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
