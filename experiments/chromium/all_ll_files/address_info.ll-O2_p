; ModuleID = '../../net/dns/address_info.cc'
source_filename = "../../net/dns/address_info.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%union.anon.11 = type { %"class.std::__1::basic_string" }
%"class.std::__1::basic_string" = type { %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" = type { %union.anon }
%union.anon = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" = type { i8*, i64, i64 }
%"class.net::AddressInfo::const_iterator" = type { %struct.addrinfo* }
%struct.addrinfo = type { i32, i32, i32, i32, i32, %struct.sockaddr*, i8*, %struct.addrinfo* }
%struct.sockaddr = type { i16, [14 x i8] }
%"class.net::AddressInfo" = type { %struct.addrinfo*, %"class.std::__1::unique_ptr" }
%"class.std::__1::unique_ptr" = type { %"class.std::__1::__compressed_pair.1" }
%"class.std::__1::__compressed_pair.1" = type { %"struct.std::__1::__compressed_pair_elem.2" }
%"struct.std::__1::__compressed_pair_elem.2" = type { %"class.net::AddrInfoGetter"* }
%"class.net::AddrInfoGetter" = type { i32 (...)** }
%"class.std::__1::tuple" = type { %"struct.std::__1::__tuple_impl" }
%"struct.std::__1::__tuple_impl" = type { %"class.std::__1::__tuple_leaf", %"class.std::__1::__tuple_leaf.5", %"class.std::__1::__tuple_leaf.6" }
%"class.std::__1::__tuple_leaf" = type { %"class.absl::optional" }
%"class.absl::optional" = type { %"class.absl::optional_internal::optional_data" }
%"class.absl::optional_internal::optional_data" = type { %"class.absl::optional_internal::optional_data_base" }
%"class.absl::optional_internal::optional_data_base" = type { %"class.absl::optional_internal::optional_data_dtor_base" }
%"class.absl::optional_internal::optional_data_dtor_base" = type { i8, %union.anon.4 }
%union.anon.4 = type { %"class.net::AddressInfo" }
%"class.std::__1::__tuple_leaf.5" = type { i32 }
%"class.std::__1::__tuple_leaf.6" = type { i32 }
%"class.absl::optional.7" = type { %"class.absl::optional_internal::optional_data.8" }
%"class.absl::optional_internal::optional_data.8" = type { %"class.absl::optional_internal::optional_data_base.9" }
%"class.absl::optional_internal::optional_data_base.9" = type { %"class.absl::optional_internal::optional_data_dtor_base.10" }
%"class.absl::optional_internal::optional_data_dtor_base.10" = type { i8, %union.anon.11 }
%"class.std::__1::__basic_string_common" = type { i8 }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short" = type { [23 x i8], %struct.anon }
%struct.anon = type { i8 }
%struct.sockaddr_in = type { i16, i16, %struct.in_addr, [8 x i8] }
%struct.in_addr = type { i32 }
%struct.sockaddr_in6 = type { i16, i16, i32, %struct.in6_addr, i32 }
%struct.in6_addr = type { %union.anon.16 }
%union.anon.16 = type { [4 x i32] }
%"class.net::AddressList" = type { %"class.std::__1::vector", %"class.std::__1::vector.22" }
%"class.std::__1::vector" = type { %"class.std::__1::__vector_base" }
%"class.std::__1::__vector_base" = type { %"class.net::IPEndPoint"*, %"class.net::IPEndPoint"*, %"class.std::__1::__compressed_pair.17" }
%"class.net::IPEndPoint" = type { %"class.net::IPAddress", i16 }
%"class.net::IPAddress" = type { %"class.net::IPAddressBytes" }
%"class.net::IPAddressBytes" = type { %"struct.std::__1::array", i8 }
%"struct.std::__1::array" = type { [16 x i8] }
%"class.std::__1::__compressed_pair.17" = type { %"struct.std::__1::__compressed_pair_elem.18" }
%"struct.std::__1::__compressed_pair_elem.18" = type { %"class.net::IPEndPoint"* }
%"class.std::__1::vector.22" = type { %"class.std::__1::__vector_base.23" }
%"class.std::__1::__vector_base.23" = type { %"class.std::__1::basic_string"*, %"class.std::__1::basic_string"*, %"class.std::__1::__compressed_pair.24" }
%"class.std::__1::__compressed_pair.24" = type { %"struct.std::__1::__compressed_pair_elem.25" }
%"struct.std::__1::__compressed_pair_elem.25" = type { %"class.std::__1::basic_string"* }
%"class.std::__1::__vector_base_common" = type { i8 }

$_ZNSt3__16vectorIN3net10IPEndPointENS_9allocatorIS2_EEE21__push_back_slow_pathIRKS2_EEvOT_ = comdat any

@__const._ZNK3net11AddressInfo17CreateAddressListEv.canonical_name = private unnamed_addr constant { { { { i8, [7 x i8], %union.anon.11 } } } } { { { { i8, [7 x i8], %union.anon.11 } } } { { { i8, [7 x i8], %union.anon.11 } } { { i8, [7 x i8], %union.anon.11 } { i8 -86, [7 x i8] c"\AA\AA\AA\AA\AA\AA\AA", %union.anon.11 { %"class.std::__1::basic_string" { %"class.std::__1::__compressed_pair" { %"struct.std::__1::__compressed_pair_elem" { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" { %union.anon { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" { i8* inttoptr (i64 -6148914691236517206 to i8*), i64 -6148914691236517206, i64 -6148914691236517206 } } } } } } } } } } }, align 8
@_ZTVN3net14AddrInfoGetterE = hidden unnamed_addr constant { [6 x i8*] } { [6 x i8*] [i8* null, i8* null, i8* bitcast (void (%"class.net::AddrInfoGetter"*)* @_ZN3net14AddrInfoGetterD2Ev to i8*), i8* bitcast (void (%"class.net::AddrInfoGetter"*)* @_ZN3net14AddrInfoGetterD0Ev to i8*), i8* bitcast (%struct.addrinfo* (%"class.net::AddrInfoGetter"*, %"class.std::__1::basic_string"*, %struct.addrinfo*, i32*)* @_ZN3net14AddrInfoGetter11getaddrinfoERKNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEPK8addrinfoPi to i8*), i8* bitcast (void (%"class.net::AddrInfoGetter"*, %struct.addrinfo*)* @_ZN3net14AddrInfoGetter12freeaddrinfoEP8addrinfo to i8*)] }, align 8

@_ZN3net11AddressInfo14const_iteratorC1EPK8addrinfo = hidden unnamed_addr alias void (%"class.net::AddressInfo::const_iterator"*, %struct.addrinfo*), void (%"class.net::AddressInfo::const_iterator"*, %struct.addrinfo*)* @_ZN3net11AddressInfo14const_iteratorC2EPK8addrinfo
@_ZN3net11AddressInfoC1EOS0_ = hidden unnamed_addr alias void (%"class.net::AddressInfo"*, %"class.net::AddressInfo"*), void (%"class.net::AddressInfo"*, %"class.net::AddressInfo"*)* @_ZN3net11AddressInfoC2EOS0_
@_ZN3net11AddressInfoD1Ev = hidden unnamed_addr alias void (%"class.net::AddressInfo"*), void (%"class.net::AddressInfo"*)* @_ZN3net11AddressInfoD2Ev
@_ZN3net11AddressInfoC1EP8addrinfoNSt3__110unique_ptrINS_14AddrInfoGetterENS3_14default_deleteIS5_EEEE = hidden unnamed_addr alias void (%"class.net::AddressInfo"*, %struct.addrinfo*, %"class.net::AddrInfoGetter"*), void (%"class.net::AddressInfo"*, %struct.addrinfo*, %"class.net::AddrInfoGetter"*)* @_ZN3net11AddressInfoC2EP8addrinfoNSt3__110unique_ptrINS_14AddrInfoGetterENS3_14default_deleteIS5_EEEE
@_ZN3net14AddrInfoGetterC1Ev = hidden unnamed_addr alias void (%"class.net::AddrInfoGetter"*), void (%"class.net::AddrInfoGetter"*)* @_ZN3net14AddrInfoGetterC2Ev
@_ZN3net14AddrInfoGetterD1Ev = hidden unnamed_addr alias void (%"class.net::AddrInfoGetter"*), void (%"class.net::AddrInfoGetter"*)* @_ZN3net14AddrInfoGetterD2Ev

; Function Attrs: nofree norecurse nounwind ssp uwtable writeonly
define hidden void @_ZN3net11AddressInfo14const_iteratorC2EPK8addrinfo(%"class.net::AddressInfo::const_iterator"* nocapture, %struct.addrinfo*) unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"class.net::AddressInfo::const_iterator", %"class.net::AddressInfo::const_iterator"* %0, i64 0, i32 0
  store %struct.addrinfo* %1, %struct.addrinfo** %3, align 8
  ret void
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden zeroext i1 @_ZNK3net11AddressInfo14const_iteratorneERKS1_(%"class.net::AddressInfo::const_iterator"* nocapture readonly, %"class.net::AddressInfo::const_iterator"* nocapture readonly dereferenceable(8)) local_unnamed_addr #1 align 2 {
  %3 = getelementptr inbounds %"class.net::AddressInfo::const_iterator", %"class.net::AddressInfo::const_iterator"* %0, i64 0, i32 0
  %4 = load %struct.addrinfo*, %struct.addrinfo** %3, align 8
  %5 = getelementptr inbounds %"class.net::AddressInfo::const_iterator", %"class.net::AddressInfo::const_iterator"* %1, i64 0, i32 0
  %6 = load %struct.addrinfo*, %struct.addrinfo** %5, align 8
  %7 = icmp ne %struct.addrinfo* %4, %6
  ret i1 %7
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden dereferenceable(8) %"class.net::AddressInfo::const_iterator"* @_ZN3net11AddressInfo14const_iteratorppEv(%"class.net::AddressInfo::const_iterator"* returned) local_unnamed_addr #2 align 2 {
  %2 = getelementptr inbounds %"class.net::AddressInfo::const_iterator", %"class.net::AddressInfo::const_iterator"* %0, i64 0, i32 0
  %3 = load %struct.addrinfo*, %struct.addrinfo** %2, align 8
  %4 = getelementptr inbounds %struct.addrinfo, %struct.addrinfo* %3, i64 0, i32 7
  %5 = bitcast %struct.addrinfo** %4 to i64*
  %6 = load i64, i64* %5, align 8
  %7 = bitcast %"class.net::AddressInfo::const_iterator"* %0 to i64*
  store i64 %6, i64* %7, align 8
  ret %"class.net::AddressInfo::const_iterator"* %0
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden %struct.addrinfo* @_ZNK3net11AddressInfo14const_iteratorptEv(%"class.net::AddressInfo::const_iterator"* nocapture readonly) local_unnamed_addr #1 align 2 {
  %2 = getelementptr inbounds %"class.net::AddressInfo::const_iterator", %"class.net::AddressInfo::const_iterator"* %0, i64 0, i32 0
  %3 = load %struct.addrinfo*, %struct.addrinfo** %2, align 8
  ret %struct.addrinfo* %3
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden dereferenceable(48) %struct.addrinfo* @_ZNK3net11AddressInfo14const_iteratordeEv(%"class.net::AddressInfo::const_iterator"* nocapture readonly) local_unnamed_addr #1 align 2 {
  %2 = getelementptr inbounds %"class.net::AddressInfo::const_iterator", %"class.net::AddressInfo::const_iterator"* %0, i64 0, i32 0
  %3 = load %struct.addrinfo*, %struct.addrinfo** %2, align 8
  ret %struct.addrinfo* %3
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN3net11AddressInfo3GetERKNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEERK8addrinfoNS1_10unique_ptrINS_14AddrInfoGetterENS1_14default_deleteISE_EEEE(%"class.std::__1::tuple"* noalias nocapture sret, %"class.std::__1::basic_string"* dereferenceable(24), %struct.addrinfo* dereferenceable(48), %"class.net::AddrInfoGetter"*) local_unnamed_addr #3 align 2 {
  %5 = alloca i32, align 4
  %6 = icmp eq %"class.net::AddrInfoGetter"* %3, null
  br i1 %6, label %7, label %11

7:                                                ; preds = %4
  %8 = tail call i8* @_Znwm(i64 8) #14
  %9 = bitcast i8* %8 to %"class.net::AddrInfoGetter"*
  %10 = bitcast i8* %8 to i32 (...)***
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [6 x i8*] }, { [6 x i8*] }* @_ZTVN3net14AddrInfoGetterE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %10, align 8
  br label %11

11:                                               ; preds = %7, %4
  %12 = phi %"class.net::AddrInfoGetter"* [ %9, %7 ], [ %3, %4 ]
  %13 = bitcast i32* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %13) #15
  store i32 0, i32* %5, align 4
  %14 = bitcast %"class.net::AddrInfoGetter"* %12 to %struct.addrinfo* (%"class.net::AddrInfoGetter"*, %"class.std::__1::basic_string"*, %struct.addrinfo*, i32*)***
  %15 = load %struct.addrinfo* (%"class.net::AddrInfoGetter"*, %"class.std::__1::basic_string"*, %struct.addrinfo*, i32*)**, %struct.addrinfo* (%"class.net::AddrInfoGetter"*, %"class.std::__1::basic_string"*, %struct.addrinfo*, i32*)*** %14, align 8
  %16 = getelementptr inbounds %struct.addrinfo* (%"class.net::AddrInfoGetter"*, %"class.std::__1::basic_string"*, %struct.addrinfo*, i32*)*, %struct.addrinfo* (%"class.net::AddrInfoGetter"*, %"class.std::__1::basic_string"*, %struct.addrinfo*, i32*)** %15, i64 2
  %17 = load %struct.addrinfo* (%"class.net::AddrInfoGetter"*, %"class.std::__1::basic_string"*, %struct.addrinfo*, i32*)*, %struct.addrinfo* (%"class.net::AddrInfoGetter"*, %"class.std::__1::basic_string"*, %struct.addrinfo*, i32*)** %16, align 8
  %18 = call %struct.addrinfo* %17(%"class.net::AddrInfoGetter"* nonnull %12, %"class.std::__1::basic_string"* dereferenceable(24) %1, %struct.addrinfo* %2, i32* nonnull %5) #15
  %19 = icmp eq %struct.addrinfo* %18, null
  br i1 %19, label %33, label %20

20:                                               ; preds = %11
  %21 = ptrtoint %"class.net::AddrInfoGetter"* %12 to i64
  %22 = ptrtoint %struct.addrinfo* %18 to i64
  %23 = getelementptr inbounds %"class.std::__1::tuple", %"class.std::__1::tuple"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %24 = bitcast %"class.std::__1::tuple"* %0 to i64*
  store i64 0, i64* %24, align 8
  %25 = getelementptr inbounds %"class.std::__1::tuple", %"class.std::__1::tuple"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1, i32 0
  %26 = bitcast %"class.net::AddressInfo"* %25 to i64*
  store i64 %22, i64* %26, align 8
  %27 = getelementptr inbounds %"class.std::__1::tuple", %"class.std::__1::tuple"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 1
  %28 = bitcast %"class.std::__1::unique_ptr"* %27 to i64*
  store i64 %21, i64* %28, align 8
  store i8 1, i8* %23, align 8
  %29 = getelementptr inbounds i8, i8* %23, i64 24
  %30 = bitcast i8* %29 to i32*
  store i32 0, i32* %30, align 8
  %31 = getelementptr inbounds i8, i8* %23, i64 28
  %32 = bitcast i8* %31 to i32*
  store i32 0, i32* %32, align 4
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %13) #15
  br label %48

33:                                               ; preds = %11
  %34 = load i32, i32* %5, align 4
  %35 = icmp ne i32 %34, -2
  %36 = icmp ne i32 %34, -5
  %37 = and i1 %35, %36
  %38 = select i1 %37, i32 -137, i32 -105
  %39 = getelementptr inbounds %"class.std::__1::tuple", %"class.std::__1::tuple"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  call void @llvm.memset.p0i8.i64(i8* align 8 %39, i8 0, i64 24, i1 false) #15
  %40 = getelementptr inbounds i8, i8* %39, i64 24
  %41 = bitcast i8* %40 to i32*
  store i32 %38, i32* %41, align 8
  %42 = getelementptr inbounds i8, i8* %39, i64 28
  %43 = bitcast i8* %42 to i32*
  store i32 %34, i32* %43, align 4
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %13) #15
  %44 = bitcast %"class.net::AddrInfoGetter"* %12 to void (%"class.net::AddrInfoGetter"*)***
  %45 = load void (%"class.net::AddrInfoGetter"*)**, void (%"class.net::AddrInfoGetter"*)*** %44, align 8
  %46 = getelementptr inbounds void (%"class.net::AddrInfoGetter"*)*, void (%"class.net::AddrInfoGetter"*)** %45, i64 1
  %47 = load void (%"class.net::AddrInfoGetter"*)*, void (%"class.net::AddrInfoGetter"*)** %46, align 8
  call void %47(%"class.net::AddrInfoGetter"* nonnull %12) #15
  br label %48

48:                                               ; preds = %20, %33
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #4

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #4

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @_ZN3net11AddressInfoC2EOS0_(%"class.net::AddressInfo"* nocapture, %"class.net::AddressInfo"* nocapture dereferenceable(16)) unnamed_addr #2 align 2 {
  %3 = getelementptr inbounds %"class.net::AddressInfo", %"class.net::AddressInfo"* %1, i64 0, i32 0
  %4 = bitcast %"class.net::AddressInfo"* %1 to i64*
  %5 = load i64, i64* %4, align 8
  %6 = bitcast %"class.net::AddressInfo"* %0 to i64*
  store i64 %5, i64* %6, align 8
  %7 = getelementptr inbounds %"class.net::AddressInfo", %"class.net::AddressInfo"* %0, i64 0, i32 1
  %8 = getelementptr inbounds %"class.net::AddressInfo", %"class.net::AddressInfo"* %1, i64 0, i32 1
  %9 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %8, i64 0, i32 0, i32 0, i32 0
  %10 = bitcast %"class.std::__1::unique_ptr"* %8 to i64*
  %11 = load i64, i64* %10, align 8
  store %"class.net::AddrInfoGetter"* null, %"class.net::AddrInfoGetter"** %9, align 8
  %12 = bitcast %"class.std::__1::unique_ptr"* %7 to i64*
  store i64 %11, i64* %12, align 8
  store %struct.addrinfo* null, %struct.addrinfo** %3, align 8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden dereferenceable(16) %"class.net::AddressInfo"* @_ZN3net11AddressInfoaSEOS0_(%"class.net::AddressInfo"* returned, %"class.net::AddressInfo"* nocapture dereferenceable(16)) local_unnamed_addr #3 align 2 {
  %3 = getelementptr inbounds %"class.net::AddressInfo", %"class.net::AddressInfo"* %1, i64 0, i32 0
  %4 = bitcast %"class.net::AddressInfo"* %1 to i64*
  %5 = load i64, i64* %4, align 8
  %6 = bitcast %"class.net::AddressInfo"* %0 to i64*
  store i64 %5, i64* %6, align 8
  store %struct.addrinfo* null, %struct.addrinfo** %3, align 8
  %7 = getelementptr inbounds %"class.net::AddressInfo", %"class.net::AddressInfo"* %1, i64 0, i32 1
  %8 = getelementptr inbounds %"class.net::AddressInfo", %"class.net::AddressInfo"* %0, i64 0, i32 1
  %9 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %7, i64 0, i32 0, i32 0, i32 0
  %10 = bitcast %"class.std::__1::unique_ptr"* %7 to i64*
  %11 = load i64, i64* %10, align 8
  store %"class.net::AddrInfoGetter"* null, %"class.net::AddrInfoGetter"** %9, align 8
  %12 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %8, i64 0, i32 0, i32 0, i32 0
  %13 = load %"class.net::AddrInfoGetter"*, %"class.net::AddrInfoGetter"** %12, align 8
  %14 = bitcast %"class.std::__1::unique_ptr"* %8 to i64*
  store i64 %11, i64* %14, align 8
  %15 = icmp eq %"class.net::AddrInfoGetter"* %13, null
  br i1 %15, label %21, label %16

16:                                               ; preds = %2
  %17 = bitcast %"class.net::AddrInfoGetter"* %13 to void (%"class.net::AddrInfoGetter"*)***
  %18 = load void (%"class.net::AddrInfoGetter"*)**, void (%"class.net::AddrInfoGetter"*)*** %17, align 8
  %19 = getelementptr inbounds void (%"class.net::AddrInfoGetter"*)*, void (%"class.net::AddrInfoGetter"*)** %18, i64 1
  %20 = load void (%"class.net::AddrInfoGetter"*)*, void (%"class.net::AddrInfoGetter"*)** %19, align 8
  tail call void %20(%"class.net::AddrInfoGetter"* nonnull %13) #15
  br label %21

21:                                               ; preds = %2, %16
  ret %"class.net::AddressInfo"* %0
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN3net11AddressInfoD2Ev(%"class.net::AddressInfo"* nocapture) unnamed_addr #3 align 2 {
  %2 = getelementptr inbounds %"class.net::AddressInfo", %"class.net::AddressInfo"* %0, i64 0, i32 0
  %3 = load %struct.addrinfo*, %struct.addrinfo** %2, align 8
  %4 = icmp eq %struct.addrinfo* %3, null
  br i1 %4, label %12, label %5

5:                                                ; preds = %1
  %6 = getelementptr inbounds %"class.net::AddressInfo", %"class.net::AddressInfo"* %0, i64 0, i32 1, i32 0, i32 0, i32 0
  %7 = load %"class.net::AddrInfoGetter"*, %"class.net::AddrInfoGetter"** %6, align 8
  %8 = bitcast %"class.net::AddrInfoGetter"* %7 to void (%"class.net::AddrInfoGetter"*, %struct.addrinfo*)***
  %9 = load void (%"class.net::AddrInfoGetter"*, %struct.addrinfo*)**, void (%"class.net::AddrInfoGetter"*, %struct.addrinfo*)*** %8, align 8
  %10 = getelementptr inbounds void (%"class.net::AddrInfoGetter"*, %struct.addrinfo*)*, void (%"class.net::AddrInfoGetter"*, %struct.addrinfo*)** %9, i64 3
  %11 = load void (%"class.net::AddrInfoGetter"*, %struct.addrinfo*)*, void (%"class.net::AddrInfoGetter"*, %struct.addrinfo*)** %10, align 8
  tail call void %11(%"class.net::AddrInfoGetter"* %7, %struct.addrinfo* nonnull %3) #15
  br label %12

12:                                               ; preds = %1, %5
  %13 = getelementptr inbounds %"class.net::AddressInfo", %"class.net::AddressInfo"* %0, i64 0, i32 1, i32 0, i32 0, i32 0
  %14 = load %"class.net::AddrInfoGetter"*, %"class.net::AddrInfoGetter"** %13, align 8
  store %"class.net::AddrInfoGetter"* null, %"class.net::AddrInfoGetter"** %13, align 8
  %15 = icmp eq %"class.net::AddrInfoGetter"* %14, null
  br i1 %15, label %21, label %16

16:                                               ; preds = %12
  %17 = bitcast %"class.net::AddrInfoGetter"* %14 to void (%"class.net::AddrInfoGetter"*)***
  %18 = load void (%"class.net::AddrInfoGetter"*)**, void (%"class.net::AddrInfoGetter"*)*** %17, align 8
  %19 = getelementptr inbounds void (%"class.net::AddrInfoGetter"*)*, void (%"class.net::AddrInfoGetter"*)** %18, i64 1
  %20 = load void (%"class.net::AddrInfoGetter"*)*, void (%"class.net::AddrInfoGetter"*)** %19, align 8
  tail call void %20(%"class.net::AddrInfoGetter"* nonnull %14) #15
  br label %21

21:                                               ; preds = %12, %16
  ret void
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden %struct.addrinfo* @_ZNK3net11AddressInfo5beginEv(%"class.net::AddressInfo"* nocapture readonly) local_unnamed_addr #1 align 2 {
  %2 = getelementptr inbounds %"class.net::AddressInfo", %"class.net::AddressInfo"* %0, i64 0, i32 0
  %3 = load %struct.addrinfo*, %struct.addrinfo** %2, align 8
  ret %struct.addrinfo* %3
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden %struct.addrinfo* @_ZNK3net11AddressInfo3endEv(%"class.net::AddressInfo"* nocapture readnone) local_unnamed_addr #5 align 2 {
  ret %struct.addrinfo* null
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZNK3net11AddressInfo16GetCanonicalNameEv(%"class.absl::optional.7"* noalias nocapture sret, %"class.net::AddressInfo"* nocapture readonly) local_unnamed_addr #3 align 2 {
  %3 = alloca %"class.std::__1::basic_string", align 8
  %4 = getelementptr inbounds %"class.net::AddressInfo", %"class.net::AddressInfo"* %1, i64 0, i32 0
  %5 = load %struct.addrinfo*, %struct.addrinfo** %4, align 8
  %6 = getelementptr inbounds %struct.addrinfo, %struct.addrinfo* %5, i64 0, i32 6
  %7 = load i8*, i8** %6, align 8
  %8 = icmp eq i8* %7, null
  br i1 %8, label %38, label %9

9:                                                ; preds = %2
  %10 = bitcast %"class.std::__1::basic_string"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %10) #15
  %11 = tail call i64 @strlen(i8* nonnull %7) #15
  %12 = icmp ugt i64 %11, -17
  br i1 %12, label %13, label %15

13:                                               ; preds = %9
  %14 = bitcast %"class.std::__1::basic_string"* %3 to %"class.std::__1::__basic_string_common"*
  call void @_ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__basic_string_common"* nonnull %14) #16
  unreachable

15:                                               ; preds = %9
  %16 = icmp ult i64 %11, 23
  br i1 %16, label %25, label %17

17:                                               ; preds = %15
  %18 = add nuw i64 %11, 16
  %19 = and i64 %18, -16
  %20 = tail call i8* @_Znwm(i64 %19) #14
  %21 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %3, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  store i8* %20, i8** %21, align 8
  %22 = or i64 %19, -9223372036854775808
  %23 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %3, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 2
  store i64 %22, i64* %23, align 8
  %24 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %3, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  store i64 %11, i64* %24, align 8
  br label %30

25:                                               ; preds = %15
  %26 = trunc i64 %11 to i8
  %27 = bitcast %"class.std::__1::basic_string"* %3 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %28 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %27, i64 0, i32 1, i32 0
  store i8 %26, i8* %28, align 1
  %29 = icmp eq i64 %11, 0
  br i1 %29, label %32, label %30

30:                                               ; preds = %25, %17
  %31 = phi i8* [ %20, %17 ], [ %10, %25 ]
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 1 %31, i8* nonnull align 1 %7, i64 %11, i1 false) #15
  br label %32

32:                                               ; preds = %30, %25
  %33 = phi i8* [ %10, %25 ], [ %31, %30 ]
  %34 = getelementptr inbounds i8, i8* %33, i64 %11
  store i8 0, i8* %34, align 1
  %35 = getelementptr inbounds %"class.absl::optional.7", %"class.absl::optional.7"* %0, i64 0, i32 0, i32 0, i32 0, i32 0
  store i8 1, i8* %35, align 8
  %36 = getelementptr inbounds %"class.absl::optional.7", %"class.absl::optional.7"* %0, i64 0, i32 0, i32 0, i32 0, i32 1, i32 0
  %37 = bitcast %"class.std::__1::basic_string"* %36 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %37, i8* nonnull align 8 %10, i64 24, i1 false) #15
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %10) #15
  br label %42

38:                                               ; preds = %2
  %39 = getelementptr inbounds %"class.absl::optional.7", %"class.absl::optional.7"* %0, i64 0, i32 0, i32 0, i32 0, i32 0
  store i8 0, i8* %39, align 8
  %40 = getelementptr inbounds %"class.absl::optional.7", %"class.absl::optional.7"* %0, i64 0, i32 0, i32 0, i32 0, i32 1
  %41 = bitcast %union.anon.11* %40 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %41, i8 0, i64 24, i1 false) #15
  br label %42

42:                                               ; preds = %38, %32
  ret void
}

; Function Attrs: nounwind readonly ssp uwtable
define hidden zeroext i1 @_ZNK3net11AddressInfo25IsAllLocalhostOfOneFamilyEv(%"class.net::AddressInfo"* nocapture readonly) local_unnamed_addr #6 align 2 {
  %2 = getelementptr inbounds %"class.net::AddressInfo", %"class.net::AddressInfo"* %0, i64 0, i32 0
  %3 = load %struct.addrinfo*, %struct.addrinfo** %2, align 8
  %4 = icmp eq %struct.addrinfo* %3, null
  br i1 %4, label %44, label %5

5:                                                ; preds = %1, %38
  %6 = phi %struct.addrinfo* [ %42, %38 ], [ %3, %1 ]
  %7 = phi i8 [ %40, %38 ], [ 0, %1 ]
  %8 = phi i8 [ %39, %38 ], [ 0, %1 ]
  %9 = getelementptr inbounds %struct.addrinfo, %struct.addrinfo* %6, i64 0, i32 1
  %10 = load i32, i32* %9, align 4
  switch i32 %10, label %50 [
    i32 2, label %11
    i32 10, label %19
  ]

11:                                               ; preds = %5
  %12 = getelementptr inbounds %struct.addrinfo, %struct.addrinfo* %6, i64 0, i32 5
  %13 = bitcast %struct.sockaddr** %12 to %struct.sockaddr_in**
  %14 = load %struct.sockaddr_in*, %struct.sockaddr_in** %13, align 8
  %15 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %14, i64 0, i32 2, i32 0
  %16 = load i32, i32* %15, align 4
  %17 = and i32 %16, 255
  %18 = icmp eq i32 %17, 127
  br i1 %18, label %38, label %50

19:                                               ; preds = %5
  %20 = getelementptr inbounds %struct.addrinfo, %struct.addrinfo* %6, i64 0, i32 5
  %21 = bitcast %struct.sockaddr** %20 to %struct.sockaddr_in6**
  %22 = load %struct.sockaddr_in6*, %struct.sockaddr_in6** %21, align 8
  %23 = getelementptr inbounds %struct.sockaddr_in6, %struct.sockaddr_in6* %22, i64 0, i32 3, i32 0, i32 0, i64 0
  %24 = load i32, i32* %23, align 4
  %25 = icmp eq i32 %24, 0
  br i1 %25, label %26, label %50

26:                                               ; preds = %19
  %27 = getelementptr inbounds %struct.sockaddr_in6, %struct.sockaddr_in6* %22, i64 0, i32 3, i32 0, i32 0, i64 1
  %28 = load i32, i32* %27, align 4
  %29 = icmp eq i32 %28, 0
  br i1 %29, label %30, label %50

30:                                               ; preds = %26
  %31 = getelementptr inbounds %struct.sockaddr_in6, %struct.sockaddr_in6* %22, i64 0, i32 3, i32 0, i32 0, i64 2
  %32 = load i32, i32* %31, align 4
  %33 = icmp eq i32 %32, 0
  br i1 %33, label %34, label %50

34:                                               ; preds = %30
  %35 = getelementptr inbounds %struct.sockaddr_in6, %struct.sockaddr_in6* %22, i64 0, i32 3, i32 0, i32 0, i64 3
  %36 = load i32, i32* %35, align 4
  %37 = icmp eq i32 %36, 16777216
  br i1 %37, label %38, label %50

38:                                               ; preds = %34, %11
  %39 = phi i8 [ %8, %11 ], [ 1, %34 ]
  %40 = phi i8 [ 1, %11 ], [ %7, %34 ]
  %41 = getelementptr inbounds %struct.addrinfo, %struct.addrinfo* %6, i64 0, i32 7
  %42 = load %struct.addrinfo*, %struct.addrinfo** %41, align 8
  %43 = icmp eq %struct.addrinfo* %42, null
  br i1 %43, label %44, label %5

44:                                               ; preds = %38, %1
  %45 = phi i8 [ 0, %1 ], [ %39, %38 ]
  %46 = phi i8 [ 0, %1 ], [ %40, %38 ]
  %47 = xor i8 %46, %45
  %48 = and i8 %47, 1
  %49 = icmp ne i8 %48, 0
  br label %50

50:                                               ; preds = %19, %26, %30, %34, %5, %11, %44
  %51 = phi i1 [ %49, %44 ], [ false, %11 ], [ false, %5 ], [ false, %34 ], [ false, %30 ], [ false, %26 ], [ false, %19 ]
  ret i1 %51
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZNK3net11AddressInfo17CreateAddressListEv(%"class.net::AddressList"* noalias sret, %"class.net::AddressInfo"* nocapture readonly) local_unnamed_addr #3 align 2 {
  %3 = alloca %"class.std::__1::basic_string", align 8
  %4 = alloca [7 x i8], align 8
  %5 = alloca [1 x %"class.std::__1::basic_string"], align 8
  %6 = alloca %"class.std::__1::vector.22", align 8
  %7 = alloca %"class.net::IPEndPoint", align 2
  %8 = getelementptr inbounds %"class.net::AddressList", %"class.net::AddressList"* %0, i64 0, i32 0, i32 0, i32 1
  %9 = getelementptr inbounds %"class.net::AddressList", %"class.net::AddressList"* %0, i64 0, i32 0, i32 0, i32 2, i32 0, i32 0
  %10 = bitcast %"class.net::AddressList"* %0 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %10, i8 -86, i64 48, i1 false)
  tail call void @_ZN3net11AddressListC1Ev(%"class.net::AddressList"* %0) #15
  %11 = getelementptr inbounds [7 x i8], [7 x i8]* %4, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 7, i8* nonnull %11)
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %11, i8* align 8 bitcast (i64* getelementptr inbounds ({ { { { i8, [7 x i8], %union.anon.11 } } } }, { { { { i8, [7 x i8], %union.anon.11 } } } }* @__const._ZNK3net11AddressInfo17CreateAddressListEv.canonical_name, i64 0, i32 0, i32 0, i32 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 2) to i8*), i64 7, i1 false)
  %12 = getelementptr inbounds %"class.net::AddressInfo", %"class.net::AddressInfo"* %1, i64 0, i32 0
  %13 = load %struct.addrinfo*, %struct.addrinfo** %12, align 8, !noalias !2
  %14 = getelementptr inbounds %struct.addrinfo, %struct.addrinfo* %13, i64 0, i32 6
  %15 = load i8*, i8** %14, align 8, !noalias !2
  %16 = icmp eq i8* %15, null
  br i1 %16, label %40, label %17

17:                                               ; preds = %2
  %18 = bitcast %"class.std::__1::basic_string"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %18) #15, !noalias !2
  %19 = tail call i64 @strlen(i8* nonnull %15) #15, !noalias !2
  %20 = icmp ugt i64 %19, -17
  br i1 %20, label %21, label %23

21:                                               ; preds = %17
  %22 = bitcast %"class.std::__1::basic_string"* %3 to %"class.std::__1::__basic_string_common"*
  call void @_ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__basic_string_common"* nonnull %22) #16, !noalias !2
  unreachable

23:                                               ; preds = %17
  %24 = icmp ult i64 %19, 23
  br i1 %24, label %33, label %25

25:                                               ; preds = %23
  %26 = add nuw i64 %19, 16
  %27 = and i64 %26, -16
  %28 = tail call i8* @_Znwm(i64 %27) #14, !noalias !2
  %29 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %3, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  store i8* %28, i8** %29, align 8, !noalias !2
  %30 = or i64 %27, -9223372036854775808
  %31 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %3, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 2
  store i64 %30, i64* %31, align 8, !noalias !2
  %32 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %3, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  store i64 %19, i64* %32, align 8, !noalias !2
  br label %38

33:                                               ; preds = %23
  %34 = trunc i64 %19 to i8
  %35 = bitcast %"class.std::__1::basic_string"* %3 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %36 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %35, i64 0, i32 1, i32 0
  store i8 %34, i8* %36, align 1, !noalias !2
  %37 = icmp eq i64 %19, 0
  br i1 %37, label %41, label %38

38:                                               ; preds = %33, %25
  %39 = phi i8* [ %28, %25 ], [ %18, %33 ]
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 1 %39, i8* nonnull align 1 %15, i64 %19, i1 false) #15, !noalias !2
  br label %41

40:                                               ; preds = %2
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %11, i8 0, i64 7, i1 false), !alias.scope !2
  br label %127

41:                                               ; preds = %38, %33
  %42 = phi i8* [ %18, %33 ], [ %39, %38 ]
  %43 = getelementptr inbounds i8, i8* %42, i64 %19
  store i8 0, i8* %43, align 1, !noalias !2
  %44 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %3, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %45 = load i8*, i8** %44, align 8
  %46 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %3, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %47 = load i64, i64* %46, align 8
  %48 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %3, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 2
  %49 = bitcast i64* %48 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %11, i8* align 8 %49, i64 7, i1 false)
  %50 = getelementptr inbounds i8, i8* %18, i64 23
  %51 = load i8, i8* %50, align 1
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %18) #15, !noalias !2
  %52 = bitcast [1 x %"class.std::__1::basic_string"]* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %52) #15
  %53 = icmp slt i8 %51, 0
  br i1 %53, label %62, label %54

54:                                               ; preds = %41
  %55 = getelementptr inbounds [1 x %"class.std::__1::basic_string"], [1 x %"class.std::__1::basic_string"]* %5, i64 0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  store i8* %45, i8** %55, align 8
  %56 = getelementptr inbounds [1 x %"class.std::__1::basic_string"], [1 x %"class.std::__1::basic_string"]* %5, i64 0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  store i64 %47, i64* %56, align 8
  %57 = getelementptr inbounds [1 x %"class.std::__1::basic_string"], [1 x %"class.std::__1::basic_string"]* %5, i64 0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 2
  %58 = bitcast i64* %57 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %58, i8* nonnull align 8 %11, i64 7, i1 false)
  %59 = getelementptr inbounds i8, i8* %52, i64 23
  store i8 %51, i8* %59, align 1
  %60 = call i8* @_Znwm(i64 24) #14
  %61 = getelementptr inbounds i8, i8* %60, i64 24
  br label %70

62:                                               ; preds = %41
  %63 = getelementptr inbounds [1 x %"class.std::__1::basic_string"], [1 x %"class.std::__1::basic_string"]* %5, i64 0, i64 0
  call void @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE25__init_copy_ctor_externalEPKcm(%"class.std::__1::basic_string"* nonnull %63, i8* %45, i64 %47) #15
  %64 = bitcast [1 x %"class.std::__1::basic_string"]* %5 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %65 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %64, i64 0, i32 1, i32 0
  %66 = load i8, i8* %65, align 1
  %67 = call i8* @_Znwm(i64 24) #14
  %68 = getelementptr inbounds i8, i8* %67, i64 24
  %69 = icmp slt i8 %66, 0
  br i1 %69, label %77, label %70

70:                                               ; preds = %62, %54
  %71 = phi i8* [ %61, %54 ], [ %68, %62 ]
  %72 = phi i8* [ %60, %54 ], [ %67, %62 ]
  %73 = bitcast [1 x %"class.std::__1::basic_string"]* %5 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %72, i8* nonnull align 8 %73, i64 24, i1 false) #15
  %74 = getelementptr inbounds i8, i8* %72, i64 24
  %75 = ptrtoint i8* %72 to i64
  %76 = ptrtoint i8* %71 to i64
  br label %93

77:                                               ; preds = %62
  %78 = bitcast i8* %67 to %"class.std::__1::basic_string"*
  %79 = getelementptr inbounds [1 x %"class.std::__1::basic_string"], [1 x %"class.std::__1::basic_string"]* %5, i64 0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %80 = load i8*, i8** %79, align 8
  %81 = getelementptr inbounds [1 x %"class.std::__1::basic_string"], [1 x %"class.std::__1::basic_string"]* %5, i64 0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %82 = load i64, i64* %81, align 8
  call void @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE25__init_copy_ctor_externalEPKcm(%"class.std::__1::basic_string"* nonnull %78, i8* %80, i64 %82) #15
  %83 = bitcast [1 x %"class.std::__1::basic_string"]* %5 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %84 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %83, i64 0, i32 1, i32 0
  %85 = load i8, i8* %84, align 1
  %86 = getelementptr inbounds i8, i8* %67, i64 24
  %87 = ptrtoint i8* %67 to i64
  %88 = ptrtoint i8* %68 to i64
  %89 = icmp slt i8 %85, 0
  br i1 %89, label %90, label %93

90:                                               ; preds = %77
  %91 = getelementptr inbounds [1 x %"class.std::__1::basic_string"], [1 x %"class.std::__1::basic_string"]* %5, i64 0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %92 = load i8*, i8** %91, align 8
  call void @_ZdlPv(i8* %92) #14
  br label %93

93:                                               ; preds = %70, %77, %90
  %94 = phi i64 [ %76, %70 ], [ %88, %77 ], [ %88, %90 ]
  %95 = phi i64 [ %75, %70 ], [ %87, %77 ], [ %87, %90 ]
  %96 = phi i8* [ %74, %70 ], [ %86, %77 ], [ %86, %90 ]
  %97 = ptrtoint i8* %96 to i64
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %52) #15
  %98 = bitcast %"class.std::__1::vector.22"* %6 to i64*
  store i64 %95, i64* %98, align 8
  %99 = getelementptr inbounds %"class.std::__1::vector.22", %"class.std::__1::vector.22"* %6, i64 0, i32 0, i32 1
  %100 = bitcast %"class.std::__1::basic_string"** %99 to i64*
  store i64 %97, i64* %100, align 8
  %101 = getelementptr inbounds %"class.std::__1::vector.22", %"class.std::__1::vector.22"* %6, i64 0, i32 0, i32 2, i32 0, i32 0
  %102 = bitcast %"class.std::__1::basic_string"** %101 to i64*
  store i64 %94, i64* %102, align 8
  call void @_ZN3net11AddressList13SetDnsAliasesENSt3__16vectorINS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEENS6_IS8_EEEE(%"class.net::AddressList"* %0, %"class.std::__1::vector.22"* nonnull %6) #15
  %103 = getelementptr inbounds %"class.std::__1::vector.22", %"class.std::__1::vector.22"* %6, i64 0, i32 0, i32 0
  %104 = load %"class.std::__1::basic_string"*, %"class.std::__1::basic_string"** %103, align 8
  %105 = icmp eq %"class.std::__1::basic_string"* %104, null
  br i1 %105, label %127, label %106

106:                                              ; preds = %93
  %107 = bitcast %"class.std::__1::basic_string"* %104 to i8*
  %108 = load %"class.std::__1::basic_string"*, %"class.std::__1::basic_string"** %99, align 8
  %109 = icmp eq %"class.std::__1::basic_string"* %108, %104
  br i1 %109, label %125, label %110

110:                                              ; preds = %106, %120
  %111 = phi %"class.std::__1::basic_string"* [ %112, %120 ], [ %108, %106 ]
  %112 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %111, i64 -1
  %113 = bitcast %"class.std::__1::basic_string"* %112 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %114 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %113, i64 0, i32 1, i32 0
  %115 = load i8, i8* %114, align 1
  %116 = icmp slt i8 %115, 0
  br i1 %116, label %117, label %120

117:                                              ; preds = %110
  %118 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %112, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %119 = load i8*, i8** %118, align 8
  call void @_ZdlPv(i8* %119) #14
  br label %120

120:                                              ; preds = %117, %110
  %121 = icmp eq %"class.std::__1::basic_string"* %112, %104
  br i1 %121, label %122, label %110

122:                                              ; preds = %120
  %123 = bitcast %"class.std::__1::vector.22"* %6 to i8**
  %124 = load i8*, i8** %123, align 8
  br label %125

125:                                              ; preds = %122, %106
  %126 = phi i8* [ %124, %122 ], [ %107, %106 ]
  store %"class.std::__1::basic_string"* %104, %"class.std::__1::basic_string"** %99, align 8
  call void @_ZdlPv(i8* %126) #14
  br label %127

127:                                              ; preds = %93, %125, %40
  %128 = phi i8 [ 0, %40 ], [ 1, %125 ], [ 1, %93 ]
  %129 = phi i8 [ 0, %40 ], [ %51, %125 ], [ %51, %93 ]
  %130 = phi i8* [ null, %40 ], [ %45, %125 ], [ %45, %93 ]
  %131 = load %struct.addrinfo*, %struct.addrinfo** %12, align 8
  %132 = icmp eq %struct.addrinfo* %131, null
  br i1 %132, label %137, label %133

133:                                              ; preds = %127
  %134 = getelementptr inbounds %"class.net::IPEndPoint", %"class.net::IPEndPoint"* %7, i64 0, i32 0, i32 0, i32 0, i32 0, i64 0
  %135 = bitcast %"class.net::IPEndPoint"** %8 to i64*
  %136 = getelementptr inbounds %"class.net::AddressList", %"class.net::AddressList"* %0, i64 0, i32 0
  br label %143

137:                                              ; preds = %158, %127
  %138 = icmp ne i8 %128, 0
  %139 = icmp slt i8 %129, 0
  %140 = and i1 %138, %139
  br i1 %140, label %141, label %142

141:                                              ; preds = %137
  call void @_ZdlPv(i8* %130) #14
  br label %142

142:                                              ; preds = %137, %141
  call void @llvm.lifetime.end.p0i8(i64 7, i8* nonnull %11)
  ret void

143:                                              ; preds = %133, %158
  %144 = phi %struct.addrinfo* [ %131, %133 ], [ %160, %158 ]
  call void @llvm.lifetime.start.p0i8(i64 20, i8* nonnull %134) #15
  call void @llvm.memset.p0i8.i64(i8* nonnull align 2 %134, i8 -86, i64 20, i1 false)
  call void @_ZN3net10IPEndPointC1Ev(%"class.net::IPEndPoint"* nonnull %7) #15
  %145 = getelementptr inbounds %struct.addrinfo, %struct.addrinfo* %144, i64 0, i32 5
  %146 = load %struct.sockaddr*, %struct.sockaddr** %145, align 8
  %147 = getelementptr inbounds %struct.addrinfo, %struct.addrinfo* %144, i64 0, i32 4
  %148 = load i32, i32* %147, align 8
  %149 = call zeroext i1 @_ZN3net10IPEndPoint12FromSockAddrEPK8sockaddrj(%"class.net::IPEndPoint"* nonnull %7, %struct.sockaddr* %146, i32 %148) #15
  br i1 %149, label %150, label %158

150:                                              ; preds = %143
  %151 = load %"class.net::IPEndPoint"*, %"class.net::IPEndPoint"** %8, align 8
  %152 = load %"class.net::IPEndPoint"*, %"class.net::IPEndPoint"** %9, align 8
  %153 = icmp eq %"class.net::IPEndPoint"* %151, %152
  br i1 %153, label %157, label %154

154:                                              ; preds = %150
  call void @_ZN3net10IPEndPointC1ERKS0_(%"class.net::IPEndPoint"* %151, %"class.net::IPEndPoint"* nonnull dereferenceable(20) %7) #15
  %155 = getelementptr inbounds %"class.net::IPEndPoint", %"class.net::IPEndPoint"* %151, i64 1
  %156 = ptrtoint %"class.net::IPEndPoint"* %155 to i64
  store i64 %156, i64* %135, align 8
  br label %158

157:                                              ; preds = %150
  call void @_ZNSt3__16vectorIN3net10IPEndPointENS_9allocatorIS2_EEE21__push_back_slow_pathIRKS2_EEvOT_(%"class.std::__1::vector"* %136, %"class.net::IPEndPoint"* nonnull dereferenceable(20) %7) #15
  br label %158

158:                                              ; preds = %157, %154, %143
  call void @_ZN3net10IPEndPointD1Ev(%"class.net::IPEndPoint"* nonnull %7) #15
  call void @llvm.lifetime.end.p0i8(i64 20, i8* nonnull %134) #15
  %159 = getelementptr inbounds %struct.addrinfo, %struct.addrinfo* %144, i64 0, i32 7
  %160 = load %struct.addrinfo*, %struct.addrinfo** %159, align 8
  %161 = icmp eq %struct.addrinfo* %160, null
  br i1 %161, label %137, label %143
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #4

declare void @_ZN3net11AddressListC1Ev(%"class.net::AddressList"*) unnamed_addr #7

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #4

declare void @_ZN3net11AddressList13SetDnsAliasesENSt3__16vectorINS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEENS6_IS8_EEEE(%"class.net::AddressList"*, %"class.std::__1::vector.22"*) local_unnamed_addr #7

declare void @_ZN3net10IPEndPointC1Ev(%"class.net::IPEndPoint"*) unnamed_addr #7

declare zeroext i1 @_ZN3net10IPEndPoint12FromSockAddrEPK8sockaddrj(%"class.net::IPEndPoint"*, %struct.sockaddr*, i32) local_unnamed_addr #7

; Function Attrs: nounwind
declare void @_ZN3net10IPEndPointD1Ev(%"class.net::IPEndPoint"*) unnamed_addr #8

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN3net11AddressInfoC2EP8addrinfoNSt3__110unique_ptrINS_14AddrInfoGetterENS3_14default_deleteIS5_EEEE(%"class.net::AddressInfo"* nocapture, %struct.addrinfo*, %"class.net::AddrInfoGetter"*) unnamed_addr #3 align 2 {
  %4 = ptrtoint %"class.net::AddrInfoGetter"* %2 to i64
  %5 = getelementptr inbounds %"class.net::AddressInfo", %"class.net::AddressInfo"* %0, i64 0, i32 0
  store %struct.addrinfo* %1, %struct.addrinfo** %5, align 8
  %6 = getelementptr inbounds %"class.net::AddressInfo", %"class.net::AddressInfo"* %0, i64 0, i32 1
  %7 = bitcast %"class.std::__1::unique_ptr"* %6 to i64*
  store i64 %4, i64* %7, align 8
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable writeonly
define hidden void @_ZN3net14AddrInfoGetterC2Ev(%"class.net::AddrInfoGetter"* nocapture) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.net::AddrInfoGetter", %"class.net::AddrInfoGetter"* %0, i64 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [6 x i8*] }, { [6 x i8*] }* @_ZTVN3net14AddrInfoGetterE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %2, align 8
  ret void
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden void @_ZN3net14AddrInfoGetterD2Ev(%"class.net::AddrInfoGetter"* nocapture) unnamed_addr #5 align 2 {
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN3net14AddrInfoGetterD0Ev(%"class.net::AddrInfoGetter"*) unnamed_addr #3 align 2 {
  %2 = bitcast %"class.net::AddrInfoGetter"* %0 to i8*
  tail call void @_ZdlPv(i8* %2) #14
  ret void
}

; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(i8*) local_unnamed_addr #9

; Function Attrs: nounwind ssp uwtable
define hidden %struct.addrinfo* @_ZN3net14AddrInfoGetter11getaddrinfoERKNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEPK8addrinfoPi(%"class.net::AddrInfoGetter"* nocapture readnone, %"class.std::__1::basic_string"* dereferenceable(24), %struct.addrinfo*, i32* nocapture) unnamed_addr #3 align 2 {
  %5 = alloca %struct.addrinfo*, align 8
  %6 = bitcast %struct.addrinfo** %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %6) #15
  store %struct.addrinfo* inttoptr (i64 -6148914691236517206 to %struct.addrinfo*), %struct.addrinfo** %5, align 8
  %7 = bitcast %"class.std::__1::basic_string"* %1 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %8 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %7, i64 0, i32 1, i32 0
  %9 = load i8, i8* %8, align 1
  %10 = icmp slt i8 %9, 0
  %11 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %1, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %12 = load i8*, i8** %11, align 8
  %13 = bitcast %"class.std::__1::basic_string"* %1 to i8*
  %14 = select i1 %10, i8* %12, i8* %13
  %15 = call i32 @getaddrinfo(i8* %14, i8* null, %struct.addrinfo* %2, %struct.addrinfo** nonnull %5) #15
  store i32 %15, i32* %3, align 4
  %16 = icmp eq i32 %15, 0
  %17 = load %struct.addrinfo*, %struct.addrinfo** %5, align 8
  %18 = select i1 %16, %struct.addrinfo* %17, %struct.addrinfo* null
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %6) #15
  ret %struct.addrinfo* %18
}

declare i32 @getaddrinfo(i8*, i8*, %struct.addrinfo*, %struct.addrinfo**) local_unnamed_addr #7

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN3net14AddrInfoGetter12freeaddrinfoEP8addrinfo(%"class.net::AddrInfoGetter"* nocapture readnone, %struct.addrinfo*) unnamed_addr #3 align 2 {
  tail call void @freeaddrinfo(%struct.addrinfo* %1) #15
  ret void
}

; Function Attrs: nounwind
declare void @freeaddrinfo(%struct.addrinfo*) local_unnamed_addr #8

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__16vectorIN3net10IPEndPointENS_9allocatorIS2_EEE21__push_back_slow_pathIRKS2_EEvOT_(%"class.std::__1::vector"*, %"class.net::IPEndPoint"* dereferenceable(20)) local_unnamed_addr #10 comdat align 2 {
  %3 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %0, i64 0, i32 0, i32 1
  %4 = bitcast %"class.net::IPEndPoint"** %3 to i64*
  %5 = load i64, i64* %4, align 8
  %6 = bitcast %"class.std::__1::vector"* %0 to i64*
  %7 = load i64, i64* %6, align 8
  %8 = sub i64 %5, %7
  %9 = sdiv exact i64 %8, 20
  %10 = add nsw i64 %9, 1
  %11 = icmp ugt i64 %10, 922337203685477580
  br i1 %11, label %12, label %14

12:                                               ; preds = %2
  %13 = bitcast %"class.std::__1::vector"* %0 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %13) #16
  unreachable

14:                                               ; preds = %2
  %15 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %0, i64 0, i32 0, i32 2, i32 0, i32 0
  %16 = bitcast %"class.net::IPEndPoint"** %15 to i64*
  %17 = load i64, i64* %16, align 8
  %18 = sub i64 %17, %7
  %19 = sdiv exact i64 %18, 20
  %20 = icmp ult i64 %19, 461168601842738790
  br i1 %20, label %21, label %26

21:                                               ; preds = %14
  %22 = shl nsw i64 %19, 1
  %23 = icmp ult i64 %22, %10
  %24 = select i1 %23, i64 %10, i64 %22
  %25 = icmp eq i64 %24, 0
  br i1 %25, label %31, label %26

26:                                               ; preds = %14, %21
  %27 = phi i64 [ %24, %21 ], [ 922337203685477580, %14 ]
  %28 = mul i64 %27, 20
  %29 = tail call i8* @_Znwm(i64 %28) #14
  %30 = bitcast i8* %29 to %"class.net::IPEndPoint"*
  br label %31

31:                                               ; preds = %21, %26
  %32 = phi i64 [ %27, %26 ], [ 0, %21 ]
  %33 = phi %"class.net::IPEndPoint"* [ %30, %26 ], [ null, %21 ]
  %34 = getelementptr inbounds %"class.net::IPEndPoint", %"class.net::IPEndPoint"* %33, i64 %9
  %35 = getelementptr inbounds %"class.net::IPEndPoint", %"class.net::IPEndPoint"* %33, i64 %32
  %36 = ptrtoint %"class.net::IPEndPoint"* %35 to i64
  tail call void @_ZN3net10IPEndPointC1ERKS0_(%"class.net::IPEndPoint"* %34, %"class.net::IPEndPoint"* dereferenceable(20) %1) #15
  %37 = getelementptr inbounds %"class.net::IPEndPoint", %"class.net::IPEndPoint"* %34, i64 1
  %38 = ptrtoint %"class.net::IPEndPoint"* %37 to i64
  %39 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %0, i64 0, i32 0, i32 0
  %40 = load %"class.net::IPEndPoint"*, %"class.net::IPEndPoint"** %39, align 8
  %41 = load %"class.net::IPEndPoint"*, %"class.net::IPEndPoint"** %3, align 8
  %42 = icmp eq %"class.net::IPEndPoint"* %41, %40
  br i1 %42, label %43, label %45

43:                                               ; preds = %31
  %44 = ptrtoint %"class.net::IPEndPoint"* %34 to i64
  store i64 %44, i64* %6, align 8
  store i64 %38, i64* %4, align 8
  store i64 %36, i64* %16, align 8
  br label %60

45:                                               ; preds = %31, %45
  %46 = phi %"class.net::IPEndPoint"* [ %48, %45 ], [ %34, %31 ]
  %47 = phi %"class.net::IPEndPoint"* [ %49, %45 ], [ %41, %31 ]
  %48 = getelementptr inbounds %"class.net::IPEndPoint", %"class.net::IPEndPoint"* %46, i64 -1
  %49 = getelementptr inbounds %"class.net::IPEndPoint", %"class.net::IPEndPoint"* %47, i64 -1
  tail call void @_ZN3net10IPEndPointC1ERKS0_(%"class.net::IPEndPoint"* %48, %"class.net::IPEndPoint"* dereferenceable(20) %49) #15
  %50 = icmp eq %"class.net::IPEndPoint"* %49, %40
  br i1 %50, label %51, label %45

51:                                               ; preds = %45
  %52 = load %"class.net::IPEndPoint"*, %"class.net::IPEndPoint"** %39, align 8
  %53 = load %"class.net::IPEndPoint"*, %"class.net::IPEndPoint"** %3, align 8
  %54 = ptrtoint %"class.net::IPEndPoint"* %48 to i64
  store i64 %54, i64* %6, align 8
  store i64 %38, i64* %4, align 8
  store i64 %36, i64* %16, align 8
  %55 = icmp eq %"class.net::IPEndPoint"* %53, %52
  br i1 %55, label %60, label %56

56:                                               ; preds = %51, %56
  %57 = phi %"class.net::IPEndPoint"* [ %58, %56 ], [ %53, %51 ]
  %58 = getelementptr inbounds %"class.net::IPEndPoint", %"class.net::IPEndPoint"* %57, i64 -1
  tail call void @_ZN3net10IPEndPointD1Ev(%"class.net::IPEndPoint"* %58) #15
  %59 = icmp eq %"class.net::IPEndPoint"* %58, %52
  br i1 %59, label %60, label %56

60:                                               ; preds = %56, %43, %51
  %61 = phi %"class.net::IPEndPoint"* [ %40, %43 ], [ %52, %51 ], [ %52, %56 ]
  %62 = icmp eq %"class.net::IPEndPoint"* %61, null
  br i1 %62, label %65, label %63

63:                                               ; preds = %60
  %64 = getelementptr inbounds %"class.net::IPEndPoint", %"class.net::IPEndPoint"* %61, i64 0, i32 0, i32 0, i32 0, i32 0, i64 0
  tail call void @_ZdlPv(i8* %64) #14
  br label %65

65:                                               ; preds = %60, %63
  ret void
}

declare void @_ZN3net10IPEndPointC1ERKS0_(%"class.net::IPEndPoint"*, %"class.net::IPEndPoint"* dereferenceable(20)) unnamed_addr #7

; Function Attrs: noreturn
declare void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"*) local_unnamed_addr #11

; Function Attrs: nobuiltin nofree
declare noalias nonnull i8* @_Znwm(i64) local_unnamed_addr #12

; Function Attrs: noreturn
declare void @_ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__basic_string_common"*) local_unnamed_addr #11

; Function Attrs: argmemonly nofree nounwind readonly
declare i64 @strlen(i8* nocapture) local_unnamed_addr #13

declare void @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE25__init_copy_ctor_externalEPKcm(%"class.std::__1::basic_string"*, i8*, i64) local_unnamed_addr #7

attributes #0 = { nofree norecurse nounwind ssp uwtable writeonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { norecurse nounwind readonly ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nofree norecurse nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { argmemonly nounwind }
attributes #5 = { norecurse nounwind readnone ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nounwind readonly ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #8 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #9 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #10 = { inlinehint nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #11 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #12 = { nobuiltin nofree "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #13 = { argmemonly nofree nounwind readonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #14 = { builtin nounwind }
attributes #15 = { nounwind }
attributes #16 = { noreturn nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{!3}
!3 = distinct !{!3, !4, !"_ZNK3net11AddressInfo16GetCanonicalNameEv: argument 0"}
!4 = distinct !{!4, !"_ZNK3net11AddressInfo16GetCanonicalNameEv"}
