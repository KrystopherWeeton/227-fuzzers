; ModuleID = '../../third_party/libjpeg_turbo/jmemmgr.c'
source_filename = "../../third_party/libjpeg_turbo/jmemmgr.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.jpeg_common_struct = type { %struct.jpeg_error_mgr*, %struct.jpeg_memory_mgr*, %struct.jpeg_progress_mgr*, i8*, i32, i32 }
%struct.jpeg_error_mgr = type { {}*, void (%struct.jpeg_common_struct*, i32)*, {}*, void (%struct.jpeg_common_struct*, i8*)*, {}*, i32, %union.anon, i32, i64, i8**, i32, i8**, i32, i32 }
%union.anon = type { [8 x i32], [48 x i8] }
%struct.jpeg_memory_mgr = type { i8* (%struct.jpeg_common_struct*, i32, i64)*, i8* (%struct.jpeg_common_struct*, i32, i64)*, i8** (%struct.jpeg_common_struct*, i32, i32, i32)*, [64 x i16]** (%struct.jpeg_common_struct*, i32, i32, i32)*, %struct.jvirt_sarray_control* (%struct.jpeg_common_struct*, i32, i32, i32, i32, i32)*, %struct.jvirt_barray_control* (%struct.jpeg_common_struct*, i32, i32, i32, i32, i32)*, {}*, i8** (%struct.jpeg_common_struct*, %struct.jvirt_sarray_control*, i32, i32, i32)*, [64 x i16]** (%struct.jpeg_common_struct*, %struct.jvirt_barray_control*, i32, i32, i32)*, void (%struct.jpeg_common_struct*, i32)*, {}*, i64, i64 }
%struct.jvirt_sarray_control = type { i8**, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, %struct.jvirt_sarray_control*, %struct.backing_store_struct }
%struct.backing_store_struct = type { void (%struct.jpeg_common_struct*, %struct.backing_store_struct*, i8*, i64, i64)*, void (%struct.jpeg_common_struct*, %struct.backing_store_struct*, i8*, i64, i64)*, void (%struct.jpeg_common_struct*, %struct.backing_store_struct*)*, %struct._IO_FILE*, [64 x i8] }
%struct._IO_FILE = type { i32, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, %struct._IO_marker*, %struct._IO_FILE*, i32, i32, i64, i16, i8, [1 x i8], i8*, i64, %struct._IO_codecvt*, %struct._IO_wide_data*, %struct._IO_FILE*, i8*, i64, i32, [20 x i8] }
%struct._IO_marker = type opaque
%struct._IO_codecvt = type opaque
%struct._IO_wide_data = type opaque
%struct.jvirt_barray_control = type { [64 x i16]**, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, %struct.jvirt_barray_control*, %struct.backing_store_struct }
%struct.jpeg_progress_mgr = type { {}*, i64, i64, i32, i32 }
%struct.large_pool_struct = type { %struct.large_pool_struct*, i64, i64 }
%struct.small_pool_struct = type { %struct.small_pool_struct*, i64, i64 }
%struct.my_memory_mgr = type { %struct.jpeg_memory_mgr, [2 x %struct.small_pool_struct*], [2 x %struct.large_pool_struct*], %struct.jvirt_sarray_control*, %struct.jvirt_barray_control*, i64, i32 }

@first_pool_slop = internal unnamed_addr constant [2 x i64] [i64 1600, i64 16000], align 16
@extra_pool_slop = internal unnamed_addr constant [2 x i64] [i64 0, i64 5000], align 16

; Function Attrs: nounwind ssp uwtable
define hidden void @jinit_memory_mgr(%struct.jpeg_common_struct*) local_unnamed_addr #0 {
  %2 = getelementptr inbounds %struct.jpeg_common_struct, %struct.jpeg_common_struct* %0, i64 0, i32 1
  store %struct.jpeg_memory_mgr* null, %struct.jpeg_memory_mgr** %2, align 8
  %3 = tail call i64 @jpeg_mem_init(%struct.jpeg_common_struct* %0) #3
  %4 = tail call i8* @jpeg_get_small(%struct.jpeg_common_struct* %0, i64 168) #3
  %5 = icmp eq i8* %4, null
  br i1 %5, label %6, label %15

6:                                                ; preds = %1
  tail call void @jpeg_mem_term(%struct.jpeg_common_struct* %0) #3
  %7 = getelementptr inbounds %struct.jpeg_common_struct, %struct.jpeg_common_struct* %0, i64 0, i32 0
  %8 = load %struct.jpeg_error_mgr*, %struct.jpeg_error_mgr** %7, align 8
  %9 = getelementptr inbounds %struct.jpeg_error_mgr, %struct.jpeg_error_mgr* %8, i64 0, i32 5
  store i32 54, i32* %9, align 8
  %10 = load %struct.jpeg_error_mgr*, %struct.jpeg_error_mgr** %7, align 8
  %11 = getelementptr inbounds %struct.jpeg_error_mgr, %struct.jpeg_error_mgr* %10, i64 0, i32 6, i32 0, i64 0
  store i32 0, i32* %11, align 4
  %12 = bitcast %struct.jpeg_common_struct* %0 to void (%struct.jpeg_common_struct*)***
  %13 = load void (%struct.jpeg_common_struct*)**, void (%struct.jpeg_common_struct*)*** %12, align 8
  %14 = load void (%struct.jpeg_common_struct*)*, void (%struct.jpeg_common_struct*)** %13, align 8
  tail call void %14(%struct.jpeg_common_struct* %0) #3
  br label %15

15:                                               ; preds = %6, %1
  %16 = bitcast i8* %4 to <2 x i8* (%struct.jpeg_common_struct*, i32, i64)*>*
  store <2 x i8* (%struct.jpeg_common_struct*, i32, i64)*> <i8* (%struct.jpeg_common_struct*, i32, i64)* @alloc_small, i8* (%struct.jpeg_common_struct*, i32, i64)* @alloc_large>, <2 x i8* (%struct.jpeg_common_struct*, i32, i64)*>* %16, align 8
  %17 = getelementptr inbounds i8, i8* %4, i64 16
  %18 = bitcast i8* %17 to i8** (%struct.jpeg_common_struct*, i32, i32, i32)**
  store i8** (%struct.jpeg_common_struct*, i32, i32, i32)* @alloc_sarray, i8** (%struct.jpeg_common_struct*, i32, i32, i32)** %18, align 8
  %19 = getelementptr inbounds i8, i8* %4, i64 24
  %20 = bitcast i8* %19 to [64 x i16]** (%struct.jpeg_common_struct*, i32, i32, i32)**
  store [64 x i16]** (%struct.jpeg_common_struct*, i32, i32, i32)* @alloc_barray, [64 x i16]** (%struct.jpeg_common_struct*, i32, i32, i32)** %20, align 8
  %21 = getelementptr inbounds i8, i8* %4, i64 32
  %22 = bitcast i8* %21 to %struct.jvirt_sarray_control* (%struct.jpeg_common_struct*, i32, i32, i32, i32, i32)**
  store %struct.jvirt_sarray_control* (%struct.jpeg_common_struct*, i32, i32, i32, i32, i32)* @request_virt_sarray, %struct.jvirt_sarray_control* (%struct.jpeg_common_struct*, i32, i32, i32, i32, i32)** %22, align 8
  %23 = getelementptr inbounds i8, i8* %4, i64 40
  %24 = bitcast i8* %23 to %struct.jvirt_barray_control* (%struct.jpeg_common_struct*, i32, i32, i32, i32, i32)**
  store %struct.jvirt_barray_control* (%struct.jpeg_common_struct*, i32, i32, i32, i32, i32)* @request_virt_barray, %struct.jvirt_barray_control* (%struct.jpeg_common_struct*, i32, i32, i32, i32, i32)** %24, align 8
  %25 = getelementptr inbounds i8, i8* %4, i64 48
  %26 = bitcast i8* %25 to void (%struct.jpeg_common_struct*)**
  store void (%struct.jpeg_common_struct*)* @realize_virt_arrays, void (%struct.jpeg_common_struct*)** %26, align 8
  %27 = getelementptr inbounds i8, i8* %4, i64 56
  %28 = bitcast i8* %27 to i8** (%struct.jpeg_common_struct*, %struct.jvirt_sarray_control*, i32, i32, i32)**
  store i8** (%struct.jpeg_common_struct*, %struct.jvirt_sarray_control*, i32, i32, i32)* @access_virt_sarray, i8** (%struct.jpeg_common_struct*, %struct.jvirt_sarray_control*, i32, i32, i32)** %28, align 8
  %29 = getelementptr inbounds i8, i8* %4, i64 64
  %30 = bitcast i8* %29 to [64 x i16]** (%struct.jpeg_common_struct*, %struct.jvirt_barray_control*, i32, i32, i32)**
  store [64 x i16]** (%struct.jpeg_common_struct*, %struct.jvirt_barray_control*, i32, i32, i32)* @access_virt_barray, [64 x i16]** (%struct.jpeg_common_struct*, %struct.jvirt_barray_control*, i32, i32, i32)** %30, align 8
  %31 = getelementptr inbounds i8, i8* %4, i64 72
  %32 = bitcast i8* %31 to void (%struct.jpeg_common_struct*, i32)**
  store void (%struct.jpeg_common_struct*, i32)* @free_pool, void (%struct.jpeg_common_struct*, i32)** %32, align 8
  %33 = getelementptr inbounds i8, i8* %4, i64 80
  %34 = bitcast i8* %33 to void (%struct.jpeg_common_struct*)**
  store void (%struct.jpeg_common_struct*)* @self_destruct, void (%struct.jpeg_common_struct*)** %34, align 8
  %35 = getelementptr inbounds i8, i8* %4, i64 96
  %36 = bitcast i8* %35 to i64*
  store i64 1000000000, i64* %36, align 8
  %37 = getelementptr inbounds i8, i8* %4, i64 88
  %38 = bitcast i8* %37 to i64*
  store i64 %3, i64* %38, align 8
  %39 = getelementptr inbounds i8, i8* %4, i64 104
  %40 = getelementptr inbounds i8, i8* %4, i64 120
  %41 = getelementptr inbounds i8, i8* %4, i64 128
  %42 = bitcast i8* %41 to %struct.large_pool_struct**
  store %struct.large_pool_struct* null, %struct.large_pool_struct** %42, align 8
  %43 = bitcast i8* %39 to <2 x %struct.small_pool_struct*>*
  store <2 x %struct.small_pool_struct*> zeroinitializer, <2 x %struct.small_pool_struct*>* %43, align 8
  %44 = bitcast i8* %40 to %struct.large_pool_struct**
  store %struct.large_pool_struct* null, %struct.large_pool_struct** %44, align 8
  %45 = getelementptr inbounds i8, i8* %4, i64 136
  %46 = getelementptr inbounds i8, i8* %4, i64 152
  %47 = bitcast i8* %46 to i64*
  call void @llvm.memset.p0i8.i64(i8* align 8 %45, i8 0, i64 16, i1 false)
  store i64 168, i64* %47, align 8
  %48 = bitcast %struct.jpeg_memory_mgr** %2 to i8**
  store i8* %4, i8** %48, align 8
  ret void
}

declare i64 @jpeg_mem_init(%struct.jpeg_common_struct*) local_unnamed_addr #1

declare i8* @jpeg_get_small(%struct.jpeg_common_struct*, i64) local_unnamed_addr #1

declare void @jpeg_mem_term(%struct.jpeg_common_struct*) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define internal i8* @alloc_small(%struct.jpeg_common_struct*, i32, i64) #0 {
  %4 = getelementptr inbounds %struct.jpeg_common_struct, %struct.jpeg_common_struct* %0, i64 0, i32 1
  %5 = bitcast %struct.jpeg_memory_mgr** %4 to %struct.my_memory_mgr**
  %6 = load %struct.my_memory_mgr*, %struct.my_memory_mgr** %5, align 8
  %7 = icmp ugt i64 %2, 1000000000
  br i1 %7, label %8, label %17

8:                                                ; preds = %3
  %9 = getelementptr inbounds %struct.jpeg_common_struct, %struct.jpeg_common_struct* %0, i64 0, i32 0
  %10 = load %struct.jpeg_error_mgr*, %struct.jpeg_error_mgr** %9, align 8
  %11 = getelementptr inbounds %struct.jpeg_error_mgr, %struct.jpeg_error_mgr* %10, i64 0, i32 5
  store i32 54, i32* %11, align 8
  %12 = load %struct.jpeg_error_mgr*, %struct.jpeg_error_mgr** %9, align 8
  %13 = getelementptr inbounds %struct.jpeg_error_mgr, %struct.jpeg_error_mgr* %12, i64 0, i32 6, i32 0, i64 0
  store i32 7, i32* %13, align 4
  %14 = bitcast %struct.jpeg_common_struct* %0 to void (%struct.jpeg_common_struct*)***
  %15 = load void (%struct.jpeg_common_struct*)**, void (%struct.jpeg_common_struct*)*** %14, align 8
  %16 = load void (%struct.jpeg_common_struct*)*, void (%struct.jpeg_common_struct*)** %15, align 8
  tail call void %16(%struct.jpeg_common_struct* %0) #3
  br label %17

17:                                               ; preds = %8, %3
  %18 = add i64 %2, 31
  %19 = and i64 %18, -32
  %20 = add i64 %19, 55
  %21 = icmp ugt i64 %20, 1000000000
  br i1 %21, label %22, label %31

22:                                               ; preds = %17
  %23 = getelementptr inbounds %struct.jpeg_common_struct, %struct.jpeg_common_struct* %0, i64 0, i32 0
  %24 = load %struct.jpeg_error_mgr*, %struct.jpeg_error_mgr** %23, align 8
  %25 = getelementptr inbounds %struct.jpeg_error_mgr, %struct.jpeg_error_mgr* %24, i64 0, i32 5
  store i32 54, i32* %25, align 8
  %26 = load %struct.jpeg_error_mgr*, %struct.jpeg_error_mgr** %23, align 8
  %27 = getelementptr inbounds %struct.jpeg_error_mgr, %struct.jpeg_error_mgr* %26, i64 0, i32 6, i32 0, i64 0
  store i32 1, i32* %27, align 4
  %28 = bitcast %struct.jpeg_common_struct* %0 to void (%struct.jpeg_common_struct*)***
  %29 = load void (%struct.jpeg_common_struct*)**, void (%struct.jpeg_common_struct*)*** %28, align 8
  %30 = load void (%struct.jpeg_common_struct*)*, void (%struct.jpeg_common_struct*)** %29, align 8
  tail call void %30(%struct.jpeg_common_struct* %0) #3
  br label %31

31:                                               ; preds = %22, %17
  %32 = icmp ugt i32 %1, 1
  br i1 %32, label %33, label %42

33:                                               ; preds = %31
  %34 = getelementptr inbounds %struct.jpeg_common_struct, %struct.jpeg_common_struct* %0, i64 0, i32 0
  %35 = load %struct.jpeg_error_mgr*, %struct.jpeg_error_mgr** %34, align 8
  %36 = getelementptr inbounds %struct.jpeg_error_mgr, %struct.jpeg_error_mgr* %35, i64 0, i32 5
  store i32 14, i32* %36, align 8
  %37 = load %struct.jpeg_error_mgr*, %struct.jpeg_error_mgr** %34, align 8
  %38 = getelementptr inbounds %struct.jpeg_error_mgr, %struct.jpeg_error_mgr* %37, i64 0, i32 6, i32 0, i64 0
  store i32 %1, i32* %38, align 4
  %39 = bitcast %struct.jpeg_common_struct* %0 to void (%struct.jpeg_common_struct*)***
  %40 = load void (%struct.jpeg_common_struct*)**, void (%struct.jpeg_common_struct*)*** %39, align 8
  %41 = load void (%struct.jpeg_common_struct*)*, void (%struct.jpeg_common_struct*)** %40, align 8
  tail call void %41(%struct.jpeg_common_struct* %0) #3
  br label %42

42:                                               ; preds = %31, %33
  %43 = sext i32 %1 to i64
  %44 = getelementptr inbounds %struct.my_memory_mgr, %struct.my_memory_mgr* %6, i64 0, i32 1, i64 %43
  %45 = load %struct.small_pool_struct*, %struct.small_pool_struct** %44, align 8
  %46 = icmp eq %struct.small_pool_struct* %45, null
  br i1 %46, label %56, label %47

47:                                               ; preds = %42, %52
  %48 = phi %struct.small_pool_struct* [ %54, %52 ], [ %45, %42 ]
  %49 = getelementptr inbounds %struct.small_pool_struct, %struct.small_pool_struct* %48, i64 0, i32 2
  %50 = load i64, i64* %49, align 8
  %51 = icmp ult i64 %50, %19
  br i1 %51, label %52, label %100

52:                                               ; preds = %47
  %53 = getelementptr inbounds %struct.small_pool_struct, %struct.small_pool_struct* %48, i64 0, i32 0
  %54 = load %struct.small_pool_struct*, %struct.small_pool_struct** %53, align 8
  %55 = icmp eq %struct.small_pool_struct* %54, null
  br i1 %55, label %56, label %47

56:                                               ; preds = %52, %42
  %57 = phi %struct.small_pool_struct* [ null, %42 ], [ %48, %52 ]
  %58 = icmp eq %struct.small_pool_struct* %57, null
  %59 = select i1 %58, [2 x i64]* @first_pool_slop, [2 x i64]* @extra_pool_slop
  %60 = getelementptr inbounds [2 x i64], [2 x i64]* %59, i64 0, i64 %43
  %61 = load i64, i64* %60, align 8
  %62 = sub i64 999999945, %19
  %63 = icmp ugt i64 %61, %62
  %64 = select i1 %63, i64 %62, i64 %61
  %65 = add i64 %64, %20
  %66 = tail call i8* @jpeg_get_small(%struct.jpeg_common_struct* %0, i64 %65) #3
  %67 = icmp eq i8* %66, null
  br i1 %67, label %68, label %86

68:                                               ; preds = %56
  %69 = getelementptr inbounds %struct.jpeg_common_struct, %struct.jpeg_common_struct* %0, i64 0, i32 0
  %70 = bitcast %struct.jpeg_common_struct* %0 to void (%struct.jpeg_common_struct*)***
  br label %71

71:                                               ; preds = %68, %82
  %72 = phi i64 [ %64, %68 ], [ %73, %82 ]
  %73 = lshr i64 %72, 1
  %74 = icmp ult i64 %72, 100
  br i1 %74, label %75, label %82

75:                                               ; preds = %71
  %76 = load %struct.jpeg_error_mgr*, %struct.jpeg_error_mgr** %69, align 8
  %77 = getelementptr inbounds %struct.jpeg_error_mgr, %struct.jpeg_error_mgr* %76, i64 0, i32 5
  store i32 54, i32* %77, align 8
  %78 = load %struct.jpeg_error_mgr*, %struct.jpeg_error_mgr** %69, align 8
  %79 = getelementptr inbounds %struct.jpeg_error_mgr, %struct.jpeg_error_mgr* %78, i64 0, i32 6, i32 0, i64 0
  store i32 2, i32* %79, align 4
  %80 = load void (%struct.jpeg_common_struct*)**, void (%struct.jpeg_common_struct*)*** %70, align 8
  %81 = load void (%struct.jpeg_common_struct*)*, void (%struct.jpeg_common_struct*)** %80, align 8
  tail call void %81(%struct.jpeg_common_struct* %0) #3
  br label %82

82:                                               ; preds = %75, %71
  %83 = add i64 %73, %20
  %84 = tail call i8* @jpeg_get_small(%struct.jpeg_common_struct* %0, i64 %83) #3
  %85 = icmp eq i8* %84, null
  br i1 %85, label %71, label %86

86:                                               ; preds = %82, %56
  %87 = phi i64 [ %64, %56 ], [ %73, %82 ]
  %88 = phi i64 [ %65, %56 ], [ %83, %82 ]
  %89 = phi i8* [ %66, %56 ], [ %84, %82 ]
  %90 = bitcast i8* %89 to %struct.small_pool_struct*
  %91 = getelementptr inbounds %struct.my_memory_mgr, %struct.my_memory_mgr* %6, i64 0, i32 5
  %92 = load i64, i64* %91, align 8
  %93 = add i64 %92, %88
  store i64 %93, i64* %91, align 8
  %94 = add i64 %87, %19
  %95 = getelementptr inbounds i8, i8* %89, i64 16
  %96 = bitcast i8* %95 to i64*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %89, i8 0, i64 16, i1 false)
  store i64 %94, i64* %96, align 8
  %97 = bitcast %struct.small_pool_struct** %44 to i8**
  %98 = bitcast %struct.small_pool_struct* %57 to i8**
  %99 = select i1 %58, i8** %97, i8** %98
  store i8* %89, i8** %99, align 8
  br label %100

100:                                              ; preds = %47, %86
  %101 = phi %struct.small_pool_struct* [ %90, %86 ], [ %48, %47 ]
  %102 = getelementptr inbounds %struct.small_pool_struct, %struct.small_pool_struct* %101, i64 1
  %103 = bitcast %struct.small_pool_struct* %102 to i8*
  %104 = ptrtoint %struct.small_pool_struct* %102 to i64
  %105 = and i64 %104, 31
  %106 = icmp eq i64 %105, 0
  %107 = sub nuw nsw i64 32, %105
  %108 = getelementptr inbounds i8, i8* %103, i64 %107
  %109 = select i1 %106, i8* %103, i8* %108
  %110 = getelementptr inbounds %struct.small_pool_struct, %struct.small_pool_struct* %101, i64 0, i32 1
  %111 = load i64, i64* %110, align 8
  %112 = getelementptr inbounds i8, i8* %109, i64 %111
  %113 = add i64 %111, %19
  store i64 %113, i64* %110, align 8
  %114 = getelementptr inbounds %struct.small_pool_struct, %struct.small_pool_struct* %101, i64 0, i32 2
  %115 = load i64, i64* %114, align 8
  %116 = sub i64 %115, %19
  store i64 %116, i64* %114, align 8
  ret i8* %112
}

; Function Attrs: nounwind ssp uwtable
define internal i8* @alloc_large(%struct.jpeg_common_struct*, i32, i64) #0 {
  %4 = getelementptr inbounds %struct.jpeg_common_struct, %struct.jpeg_common_struct* %0, i64 0, i32 1
  %5 = bitcast %struct.jpeg_memory_mgr** %4 to %struct.my_memory_mgr**
  %6 = load %struct.my_memory_mgr*, %struct.my_memory_mgr** %5, align 8
  %7 = icmp ugt i64 %2, 1000000000
  br i1 %7, label %8, label %17

8:                                                ; preds = %3
  %9 = getelementptr inbounds %struct.jpeg_common_struct, %struct.jpeg_common_struct* %0, i64 0, i32 0
  %10 = load %struct.jpeg_error_mgr*, %struct.jpeg_error_mgr** %9, align 8
  %11 = getelementptr inbounds %struct.jpeg_error_mgr, %struct.jpeg_error_mgr* %10, i64 0, i32 5
  store i32 54, i32* %11, align 8
  %12 = load %struct.jpeg_error_mgr*, %struct.jpeg_error_mgr** %9, align 8
  %13 = getelementptr inbounds %struct.jpeg_error_mgr, %struct.jpeg_error_mgr* %12, i64 0, i32 6, i32 0, i64 0
  store i32 8, i32* %13, align 4
  %14 = bitcast %struct.jpeg_common_struct* %0 to void (%struct.jpeg_common_struct*)***
  %15 = load void (%struct.jpeg_common_struct*)**, void (%struct.jpeg_common_struct*)*** %14, align 8
  %16 = load void (%struct.jpeg_common_struct*)*, void (%struct.jpeg_common_struct*)** %15, align 8
  tail call void %16(%struct.jpeg_common_struct* %0) #3
  br label %17

17:                                               ; preds = %8, %3
  %18 = add i64 %2, 31
  %19 = and i64 %18, -32
  %20 = add i64 %19, 55
  %21 = icmp ugt i64 %20, 1000000000
  br i1 %21, label %22, label %31

22:                                               ; preds = %17
  %23 = getelementptr inbounds %struct.jpeg_common_struct, %struct.jpeg_common_struct* %0, i64 0, i32 0
  %24 = load %struct.jpeg_error_mgr*, %struct.jpeg_error_mgr** %23, align 8
  %25 = getelementptr inbounds %struct.jpeg_error_mgr, %struct.jpeg_error_mgr* %24, i64 0, i32 5
  store i32 54, i32* %25, align 8
  %26 = load %struct.jpeg_error_mgr*, %struct.jpeg_error_mgr** %23, align 8
  %27 = getelementptr inbounds %struct.jpeg_error_mgr, %struct.jpeg_error_mgr* %26, i64 0, i32 6, i32 0, i64 0
  store i32 3, i32* %27, align 4
  %28 = bitcast %struct.jpeg_common_struct* %0 to void (%struct.jpeg_common_struct*)***
  %29 = load void (%struct.jpeg_common_struct*)**, void (%struct.jpeg_common_struct*)*** %28, align 8
  %30 = load void (%struct.jpeg_common_struct*)*, void (%struct.jpeg_common_struct*)** %29, align 8
  tail call void %30(%struct.jpeg_common_struct* %0) #3
  br label %31

31:                                               ; preds = %22, %17
  %32 = icmp ugt i32 %1, 1
  br i1 %32, label %33, label %42

33:                                               ; preds = %31
  %34 = getelementptr inbounds %struct.jpeg_common_struct, %struct.jpeg_common_struct* %0, i64 0, i32 0
  %35 = load %struct.jpeg_error_mgr*, %struct.jpeg_error_mgr** %34, align 8
  %36 = getelementptr inbounds %struct.jpeg_error_mgr, %struct.jpeg_error_mgr* %35, i64 0, i32 5
  store i32 14, i32* %36, align 8
  %37 = load %struct.jpeg_error_mgr*, %struct.jpeg_error_mgr** %34, align 8
  %38 = getelementptr inbounds %struct.jpeg_error_mgr, %struct.jpeg_error_mgr* %37, i64 0, i32 6, i32 0, i64 0
  store i32 %1, i32* %38, align 4
  %39 = bitcast %struct.jpeg_common_struct* %0 to void (%struct.jpeg_common_struct*)***
  %40 = load void (%struct.jpeg_common_struct*)**, void (%struct.jpeg_common_struct*)*** %39, align 8
  %41 = load void (%struct.jpeg_common_struct*)*, void (%struct.jpeg_common_struct*)** %40, align 8
  tail call void %41(%struct.jpeg_common_struct* %0) #3
  br label %42

42:                                               ; preds = %31, %33
  %43 = tail call i8* @jpeg_get_large(%struct.jpeg_common_struct* %0, i64 %20) #3
  %44 = icmp eq i8* %43, null
  br i1 %44, label %45, label %54

45:                                               ; preds = %42
  %46 = getelementptr inbounds %struct.jpeg_common_struct, %struct.jpeg_common_struct* %0, i64 0, i32 0
  %47 = load %struct.jpeg_error_mgr*, %struct.jpeg_error_mgr** %46, align 8
  %48 = getelementptr inbounds %struct.jpeg_error_mgr, %struct.jpeg_error_mgr* %47, i64 0, i32 5
  store i32 54, i32* %48, align 8
  %49 = load %struct.jpeg_error_mgr*, %struct.jpeg_error_mgr** %46, align 8
  %50 = getelementptr inbounds %struct.jpeg_error_mgr, %struct.jpeg_error_mgr* %49, i64 0, i32 6, i32 0, i64 0
  store i32 4, i32* %50, align 4
  %51 = bitcast %struct.jpeg_common_struct* %0 to void (%struct.jpeg_common_struct*)***
  %52 = load void (%struct.jpeg_common_struct*)**, void (%struct.jpeg_common_struct*)*** %51, align 8
  %53 = load void (%struct.jpeg_common_struct*)*, void (%struct.jpeg_common_struct*)** %52, align 8
  tail call void %53(%struct.jpeg_common_struct* %0) #3
  br label %54

54:                                               ; preds = %45, %42
  %55 = getelementptr inbounds %struct.my_memory_mgr, %struct.my_memory_mgr* %6, i64 0, i32 5
  %56 = load i64, i64* %55, align 8
  %57 = add i64 %56, %20
  store i64 %57, i64* %55, align 8
  %58 = sext i32 %1 to i64
  %59 = getelementptr inbounds %struct.my_memory_mgr, %struct.my_memory_mgr* %6, i64 0, i32 2, i64 %58
  %60 = bitcast %struct.large_pool_struct** %59 to i64*
  %61 = load i64, i64* %60, align 8
  %62 = bitcast i8* %43 to i64*
  store i64 %61, i64* %62, align 8
  %63 = getelementptr inbounds i8, i8* %43, i64 8
  %64 = bitcast i8* %63 to i64*
  store i64 %19, i64* %64, align 8
  %65 = getelementptr inbounds i8, i8* %43, i64 16
  %66 = bitcast i8* %65 to i64*
  store i64 0, i64* %66, align 8
  %67 = bitcast %struct.large_pool_struct** %59 to i8**
  store i8* %43, i8** %67, align 8
  %68 = getelementptr inbounds i8, i8* %43, i64 24
  %69 = ptrtoint i8* %68 to i64
  %70 = and i64 %69, 31
  %71 = icmp eq i64 %70, 0
  %72 = sub nuw nsw i64 32, %70
  %73 = getelementptr inbounds i8, i8* %68, i64 %72
  %74 = select i1 %71, i8* %68, i8* %73
  ret i8* %74
}

; Function Attrs: nounwind ssp uwtable
define internal i8** @alloc_sarray(%struct.jpeg_common_struct*, i32, i32, i32) #0 {
  %5 = getelementptr inbounds %struct.jpeg_common_struct, %struct.jpeg_common_struct* %0, i64 0, i32 1
  %6 = bitcast %struct.jpeg_memory_mgr** %5 to %struct.my_memory_mgr**
  %7 = load %struct.my_memory_mgr*, %struct.my_memory_mgr** %6, align 8
  %8 = icmp ugt i32 %2, 1000000000
  br i1 %8, label %9, label %18

9:                                                ; preds = %4
  %10 = getelementptr inbounds %struct.jpeg_common_struct, %struct.jpeg_common_struct* %0, i64 0, i32 0
  %11 = load %struct.jpeg_error_mgr*, %struct.jpeg_error_mgr** %10, align 8
  %12 = getelementptr inbounds %struct.jpeg_error_mgr, %struct.jpeg_error_mgr* %11, i64 0, i32 5
  store i32 54, i32* %12, align 8
  %13 = load %struct.jpeg_error_mgr*, %struct.jpeg_error_mgr** %10, align 8
  %14 = getelementptr inbounds %struct.jpeg_error_mgr, %struct.jpeg_error_mgr* %13, i64 0, i32 6, i32 0, i64 0
  store i32 9, i32* %14, align 4
  %15 = bitcast %struct.jpeg_common_struct* %0 to void (%struct.jpeg_common_struct*)***
  %16 = load void (%struct.jpeg_common_struct*)**, void (%struct.jpeg_common_struct*)*** %15, align 8
  %17 = load void (%struct.jpeg_common_struct*)*, void (%struct.jpeg_common_struct*)** %16, align 8
  tail call void %17(%struct.jpeg_common_struct* %0) #3
  br label %18

18:                                               ; preds = %9, %4
  %19 = add i32 %2, 63
  %20 = and i32 %19, -64
  %21 = zext i32 %20 to i64
  %22 = udiv i32 999999976, %20
  %23 = icmp ugt i32 %20, 999999976
  br i1 %23, label %24, label %31

24:                                               ; preds = %18
  %25 = getelementptr inbounds %struct.jpeg_common_struct, %struct.jpeg_common_struct* %0, i64 0, i32 0
  %26 = load %struct.jpeg_error_mgr*, %struct.jpeg_error_mgr** %25, align 8
  %27 = getelementptr inbounds %struct.jpeg_error_mgr, %struct.jpeg_error_mgr* %26, i64 0, i32 5
  store i32 70, i32* %27, align 8
  %28 = bitcast %struct.jpeg_common_struct* %0 to void (%struct.jpeg_common_struct*)***
  %29 = load void (%struct.jpeg_common_struct*)**, void (%struct.jpeg_common_struct*)*** %28, align 8
  %30 = load void (%struct.jpeg_common_struct*)*, void (%struct.jpeg_common_struct*)** %29, align 8
  tail call void %30(%struct.jpeg_common_struct* %0) #3
  br label %31

31:                                               ; preds = %24, %18
  %32 = zext i32 %3 to i64
  %33 = icmp ult i32 %22, %3
  %34 = select i1 %33, i32 %22, i32 %3
  %35 = getelementptr inbounds %struct.my_memory_mgr, %struct.my_memory_mgr* %7, i64 0, i32 6
  store i32 %34, i32* %35, align 8
  %36 = shl nuw nsw i64 %32, 3
  %37 = tail call i8* @alloc_small(%struct.jpeg_common_struct* %0, i32 %1, i64 %36)
  %38 = bitcast i8* %37 to i8**
  %39 = icmp eq i32 %3, 0
  br i1 %39, label %97, label %43

40:                                               ; preds = %69, %75, %43
  %41 = phi i32 [ %44, %43 ], [ %70, %69 ], [ %91, %75 ]
  %42 = icmp ult i32 %41, %3
  br i1 %42, label %43, label %97

43:                                               ; preds = %31, %40
  %44 = phi i32 [ %41, %40 ], [ 0, %31 ]
  %45 = phi i32 [ %48, %40 ], [ %34, %31 ]
  %46 = sub i32 %3, %44
  %47 = icmp ult i32 %45, %46
  %48 = select i1 %47, i32 %45, i32 %46
  %49 = zext i32 %48 to i64
  %50 = mul nuw i64 %49, %21
  %51 = tail call i8* @alloc_large(%struct.jpeg_common_struct* %0, i32 %1, i64 %50)
  %52 = icmp eq i32 %48, 0
  br i1 %52, label %40, label %53

53:                                               ; preds = %43
  %54 = add i32 %48, -1
  %55 = and i32 %48, 3
  %56 = icmp eq i32 %55, 0
  br i1 %56, label %69, label %57

57:                                               ; preds = %53, %57
  %58 = phi i32 [ %66, %57 ], [ %48, %53 ]
  %59 = phi i32 [ %62, %57 ], [ %44, %53 ]
  %60 = phi i8* [ %65, %57 ], [ %51, %53 ]
  %61 = phi i32 [ %67, %57 ], [ %55, %53 ]
  %62 = add i32 %59, 1
  %63 = zext i32 %59 to i64
  %64 = getelementptr inbounds i8*, i8** %38, i64 %63
  store i8* %60, i8** %64, align 8
  %65 = getelementptr inbounds i8, i8* %60, i64 %21
  %66 = add i32 %58, -1
  %67 = add i32 %61, -1
  %68 = icmp eq i32 %67, 0
  br i1 %68, label %69, label %57, !llvm.loop !2

69:                                               ; preds = %57, %53
  %70 = phi i32 [ undef, %53 ], [ %62, %57 ]
  %71 = phi i32 [ %48, %53 ], [ %66, %57 ]
  %72 = phi i32 [ %44, %53 ], [ %62, %57 ]
  %73 = phi i8* [ %51, %53 ], [ %65, %57 ]
  %74 = icmp ult i32 %54, 3
  br i1 %74, label %40, label %75

75:                                               ; preds = %69, %75
  %76 = phi i32 [ %95, %75 ], [ %71, %69 ]
  %77 = phi i32 [ %91, %75 ], [ %72, %69 ]
  %78 = phi i8* [ %94, %75 ], [ %73, %69 ]
  %79 = add i32 %77, 1
  %80 = zext i32 %77 to i64
  %81 = getelementptr inbounds i8*, i8** %38, i64 %80
  store i8* %78, i8** %81, align 8
  %82 = getelementptr inbounds i8, i8* %78, i64 %21
  %83 = add i32 %77, 2
  %84 = zext i32 %79 to i64
  %85 = getelementptr inbounds i8*, i8** %38, i64 %84
  store i8* %82, i8** %85, align 8
  %86 = getelementptr inbounds i8, i8* %82, i64 %21
  %87 = add i32 %77, 3
  %88 = zext i32 %83 to i64
  %89 = getelementptr inbounds i8*, i8** %38, i64 %88
  store i8* %86, i8** %89, align 8
  %90 = getelementptr inbounds i8, i8* %86, i64 %21
  %91 = add i32 %77, 4
  %92 = zext i32 %87 to i64
  %93 = getelementptr inbounds i8*, i8** %38, i64 %92
  store i8* %90, i8** %93, align 8
  %94 = getelementptr inbounds i8, i8* %90, i64 %21
  %95 = add i32 %76, -4
  %96 = icmp eq i32 %95, 0
  br i1 %96, label %40, label %75

97:                                               ; preds = %40, %31
  ret i8** %38
}

; Function Attrs: nounwind ssp uwtable
define internal [64 x i16]** @alloc_barray(%struct.jpeg_common_struct*, i32, i32, i32) #0 {
  %5 = getelementptr inbounds %struct.jpeg_common_struct, %struct.jpeg_common_struct* %0, i64 0, i32 1
  %6 = bitcast %struct.jpeg_memory_mgr** %5 to %struct.my_memory_mgr**
  %7 = load %struct.my_memory_mgr*, %struct.my_memory_mgr** %6, align 8
  %8 = zext i32 %2 to i64
  %9 = shl nuw nsw i64 %8, 7
  %10 = udiv i64 999999976, %9
  %11 = icmp slt i64 %10, 1
  br i1 %11, label %12, label %19

12:                                               ; preds = %4
  %13 = getelementptr inbounds %struct.jpeg_common_struct, %struct.jpeg_common_struct* %0, i64 0, i32 0
  %14 = load %struct.jpeg_error_mgr*, %struct.jpeg_error_mgr** %13, align 8
  %15 = getelementptr inbounds %struct.jpeg_error_mgr, %struct.jpeg_error_mgr* %14, i64 0, i32 5
  store i32 70, i32* %15, align 8
  %16 = bitcast %struct.jpeg_common_struct* %0 to void (%struct.jpeg_common_struct*)***
  %17 = load void (%struct.jpeg_common_struct*)**, void (%struct.jpeg_common_struct*)*** %16, align 8
  %18 = load void (%struct.jpeg_common_struct*)*, void (%struct.jpeg_common_struct*)** %17, align 8
  tail call void %18(%struct.jpeg_common_struct* %0) #3
  br label %19

19:                                               ; preds = %12, %4
  %20 = zext i32 %3 to i64
  %21 = icmp slt i64 %10, %20
  %22 = trunc i64 %10 to i32
  %23 = select i1 %21, i32 %22, i32 %3
  %24 = getelementptr inbounds %struct.my_memory_mgr, %struct.my_memory_mgr* %7, i64 0, i32 6
  store i32 %23, i32* %24, align 8
  %25 = shl nuw nsw i64 %20, 3
  %26 = tail call i8* @alloc_small(%struct.jpeg_common_struct* %0, i32 %1, i64 %25)
  %27 = bitcast i8* %26 to [64 x i16]**
  %28 = icmp eq i32 %3, 0
  br i1 %28, label %87, label %32

29:                                               ; preds = %59, %65, %32
  %30 = phi i32 [ %33, %32 ], [ %60, %59 ], [ %81, %65 ]
  %31 = icmp ult i32 %30, %3
  br i1 %31, label %32, label %87

32:                                               ; preds = %19, %29
  %33 = phi i32 [ %30, %29 ], [ 0, %19 ]
  %34 = phi i32 [ %37, %29 ], [ %23, %19 ]
  %35 = sub i32 %3, %33
  %36 = icmp ult i32 %34, %35
  %37 = select i1 %36, i32 %34, i32 %35
  %38 = zext i32 %37 to i64
  %39 = mul i64 %9, %38
  %40 = tail call i8* @alloc_large(%struct.jpeg_common_struct* %0, i32 %1, i64 %39)
  %41 = icmp eq i32 %37, 0
  br i1 %41, label %29, label %42

42:                                               ; preds = %32
  %43 = bitcast i8* %40 to [64 x i16]*
  %44 = add i32 %37, -1
  %45 = and i32 %37, 3
  %46 = icmp eq i32 %45, 0
  br i1 %46, label %59, label %47

47:                                               ; preds = %42, %47
  %48 = phi i32 [ %56, %47 ], [ %37, %42 ]
  %49 = phi i32 [ %52, %47 ], [ %33, %42 ]
  %50 = phi [64 x i16]* [ %55, %47 ], [ %43, %42 ]
  %51 = phi i32 [ %57, %47 ], [ %45, %42 ]
  %52 = add i32 %49, 1
  %53 = zext i32 %49 to i64
  %54 = getelementptr inbounds [64 x i16]*, [64 x i16]** %27, i64 %53
  store [64 x i16]* %50, [64 x i16]** %54, align 8
  %55 = getelementptr inbounds [64 x i16], [64 x i16]* %50, i64 %8
  %56 = add i32 %48, -1
  %57 = add i32 %51, -1
  %58 = icmp eq i32 %57, 0
  br i1 %58, label %59, label %47, !llvm.loop !4

59:                                               ; preds = %47, %42
  %60 = phi i32 [ undef, %42 ], [ %52, %47 ]
  %61 = phi i32 [ %37, %42 ], [ %56, %47 ]
  %62 = phi i32 [ %33, %42 ], [ %52, %47 ]
  %63 = phi [64 x i16]* [ %43, %42 ], [ %55, %47 ]
  %64 = icmp ult i32 %44, 3
  br i1 %64, label %29, label %65

65:                                               ; preds = %59, %65
  %66 = phi i32 [ %85, %65 ], [ %61, %59 ]
  %67 = phi i32 [ %81, %65 ], [ %62, %59 ]
  %68 = phi [64 x i16]* [ %84, %65 ], [ %63, %59 ]
  %69 = add i32 %67, 1
  %70 = zext i32 %67 to i64
  %71 = getelementptr inbounds [64 x i16]*, [64 x i16]** %27, i64 %70
  store [64 x i16]* %68, [64 x i16]** %71, align 8
  %72 = getelementptr inbounds [64 x i16], [64 x i16]* %68, i64 %8
  %73 = add i32 %67, 2
  %74 = zext i32 %69 to i64
  %75 = getelementptr inbounds [64 x i16]*, [64 x i16]** %27, i64 %74
  store [64 x i16]* %72, [64 x i16]** %75, align 8
  %76 = getelementptr inbounds [64 x i16], [64 x i16]* %72, i64 %8
  %77 = add i32 %67, 3
  %78 = zext i32 %73 to i64
  %79 = getelementptr inbounds [64 x i16]*, [64 x i16]** %27, i64 %78
  store [64 x i16]* %76, [64 x i16]** %79, align 8
  %80 = getelementptr inbounds [64 x i16], [64 x i16]* %76, i64 %8
  %81 = add i32 %67, 4
  %82 = zext i32 %77 to i64
  %83 = getelementptr inbounds [64 x i16]*, [64 x i16]** %27, i64 %82
  store [64 x i16]* %80, [64 x i16]** %83, align 8
  %84 = getelementptr inbounds [64 x i16], [64 x i16]* %80, i64 %8
  %85 = add i32 %66, -4
  %86 = icmp eq i32 %85, 0
  br i1 %86, label %29, label %65

87:                                               ; preds = %29, %19
  ret [64 x i16]** %27
}

; Function Attrs: nounwind ssp uwtable
define internal %struct.jvirt_sarray_control* @request_virt_sarray(%struct.jpeg_common_struct*, i32, i32, i32, i32, i32) #0 {
  %7 = getelementptr inbounds %struct.jpeg_common_struct, %struct.jpeg_common_struct* %0, i64 0, i32 1
  %8 = bitcast %struct.jpeg_memory_mgr** %7 to %struct.my_memory_mgr**
  %9 = load %struct.my_memory_mgr*, %struct.my_memory_mgr** %8, align 8
  %10 = icmp eq i32 %1, 1
  br i1 %10, label %20, label %11

11:                                               ; preds = %6
  %12 = getelementptr inbounds %struct.jpeg_common_struct, %struct.jpeg_common_struct* %0, i64 0, i32 0
  %13 = load %struct.jpeg_error_mgr*, %struct.jpeg_error_mgr** %12, align 8
  %14 = getelementptr inbounds %struct.jpeg_error_mgr, %struct.jpeg_error_mgr* %13, i64 0, i32 5
  store i32 14, i32* %14, align 8
  %15 = load %struct.jpeg_error_mgr*, %struct.jpeg_error_mgr** %12, align 8
  %16 = getelementptr inbounds %struct.jpeg_error_mgr, %struct.jpeg_error_mgr* %15, i64 0, i32 6, i32 0, i64 0
  store i32 %1, i32* %16, align 4
  %17 = bitcast %struct.jpeg_common_struct* %0 to void (%struct.jpeg_common_struct*)***
  %18 = load void (%struct.jpeg_common_struct*)**, void (%struct.jpeg_common_struct*)*** %17, align 8
  %19 = load void (%struct.jpeg_common_struct*)*, void (%struct.jpeg_common_struct*)** %18, align 8
  tail call void %19(%struct.jpeg_common_struct* %0) #3
  br label %20

20:                                               ; preds = %6, %11
  %21 = tail call i8* @alloc_small(%struct.jpeg_common_struct* %0, i32 %1, i64 152)
  %22 = bitcast i8* %21 to %struct.jvirt_sarray_control*
  %23 = bitcast i8* %21 to i8***
  store i8** null, i8*** %23, align 8
  %24 = getelementptr inbounds i8, i8* %21, i64 8
  %25 = bitcast i8* %24 to i32*
  store i32 %4, i32* %25, align 8
  %26 = getelementptr inbounds i8, i8* %21, i64 12
  %27 = bitcast i8* %26 to i32*
  store i32 %3, i32* %27, align 4
  %28 = getelementptr inbounds i8, i8* %21, i64 16
  %29 = bitcast i8* %28 to i32*
  store i32 %5, i32* %29, align 8
  %30 = getelementptr inbounds i8, i8* %21, i64 36
  %31 = bitcast i8* %30 to i32*
  store i32 %2, i32* %31, align 4
  %32 = getelementptr inbounds i8, i8* %21, i64 44
  %33 = bitcast i8* %32 to i32*
  store i32 0, i32* %33, align 4
  %34 = getelementptr inbounds %struct.my_memory_mgr, %struct.my_memory_mgr* %9, i64 0, i32 3
  %35 = bitcast %struct.jvirt_sarray_control** %34 to i64*
  %36 = load i64, i64* %35, align 8
  %37 = getelementptr inbounds i8, i8* %21, i64 48
  %38 = bitcast i8* %37 to i64*
  store i64 %36, i64* %38, align 8
  %39 = bitcast %struct.jvirt_sarray_control** %34 to i8**
  store i8* %21, i8** %39, align 8
  ret %struct.jvirt_sarray_control* %22
}

; Function Attrs: nounwind ssp uwtable
define internal %struct.jvirt_barray_control* @request_virt_barray(%struct.jpeg_common_struct*, i32, i32, i32, i32, i32) #0 {
  %7 = getelementptr inbounds %struct.jpeg_common_struct, %struct.jpeg_common_struct* %0, i64 0, i32 1
  %8 = bitcast %struct.jpeg_memory_mgr** %7 to %struct.my_memory_mgr**
  %9 = load %struct.my_memory_mgr*, %struct.my_memory_mgr** %8, align 8
  %10 = icmp eq i32 %1, 1
  br i1 %10, label %20, label %11

11:                                               ; preds = %6
  %12 = getelementptr inbounds %struct.jpeg_common_struct, %struct.jpeg_common_struct* %0, i64 0, i32 0
  %13 = load %struct.jpeg_error_mgr*, %struct.jpeg_error_mgr** %12, align 8
  %14 = getelementptr inbounds %struct.jpeg_error_mgr, %struct.jpeg_error_mgr* %13, i64 0, i32 5
  store i32 14, i32* %14, align 8
  %15 = load %struct.jpeg_error_mgr*, %struct.jpeg_error_mgr** %12, align 8
  %16 = getelementptr inbounds %struct.jpeg_error_mgr, %struct.jpeg_error_mgr* %15, i64 0, i32 6, i32 0, i64 0
  store i32 %1, i32* %16, align 4
  %17 = bitcast %struct.jpeg_common_struct* %0 to void (%struct.jpeg_common_struct*)***
  %18 = load void (%struct.jpeg_common_struct*)**, void (%struct.jpeg_common_struct*)*** %17, align 8
  %19 = load void (%struct.jpeg_common_struct*)*, void (%struct.jpeg_common_struct*)** %18, align 8
  tail call void %19(%struct.jpeg_common_struct* %0) #3
  br label %20

20:                                               ; preds = %6, %11
  %21 = tail call i8* @alloc_small(%struct.jpeg_common_struct* %0, i32 %1, i64 152)
  %22 = bitcast i8* %21 to %struct.jvirt_barray_control*
  %23 = bitcast i8* %21 to [64 x i16]***
  store [64 x i16]** null, [64 x i16]*** %23, align 8
  %24 = getelementptr inbounds i8, i8* %21, i64 8
  %25 = bitcast i8* %24 to i32*
  store i32 %4, i32* %25, align 8
  %26 = getelementptr inbounds i8, i8* %21, i64 12
  %27 = bitcast i8* %26 to i32*
  store i32 %3, i32* %27, align 4
  %28 = getelementptr inbounds i8, i8* %21, i64 16
  %29 = bitcast i8* %28 to i32*
  store i32 %5, i32* %29, align 8
  %30 = getelementptr inbounds i8, i8* %21, i64 36
  %31 = bitcast i8* %30 to i32*
  store i32 %2, i32* %31, align 4
  %32 = getelementptr inbounds i8, i8* %21, i64 44
  %33 = bitcast i8* %32 to i32*
  store i32 0, i32* %33, align 4
  %34 = getelementptr inbounds %struct.my_memory_mgr, %struct.my_memory_mgr* %9, i64 0, i32 4
  %35 = bitcast %struct.jvirt_barray_control** %34 to i64*
  %36 = load i64, i64* %35, align 8
  %37 = getelementptr inbounds i8, i8* %21, i64 48
  %38 = bitcast i8* %37 to i64*
  store i64 %36, i64* %38, align 8
  %39 = bitcast %struct.jvirt_barray_control** %34 to i8**
  store i8* %21, i8** %39, align 8
  ret %struct.jvirt_barray_control* %22
}

; Function Attrs: nounwind ssp uwtable
define internal void @realize_virt_arrays(%struct.jpeg_common_struct*) #0 {
  %2 = getelementptr inbounds %struct.jpeg_common_struct, %struct.jpeg_common_struct* %0, i64 0, i32 1
  %3 = bitcast %struct.jpeg_memory_mgr** %2 to %struct.my_memory_mgr**
  %4 = load %struct.my_memory_mgr*, %struct.my_memory_mgr** %3, align 8
  %5 = getelementptr inbounds %struct.my_memory_mgr, %struct.my_memory_mgr* %4, i64 0, i32 3
  %6 = load %struct.jvirt_sarray_control*, %struct.jvirt_sarray_control** %5, align 8
  %7 = icmp eq %struct.jvirt_sarray_control* %6, null
  br i1 %7, label %48, label %8

8:                                                ; preds = %1
  %9 = getelementptr inbounds %struct.jpeg_common_struct, %struct.jpeg_common_struct* %0, i64 0, i32 0
  %10 = bitcast %struct.jpeg_common_struct* %0 to void (%struct.jpeg_common_struct*)***
  br label %11

11:                                               ; preds = %8, %42
  %12 = phi %struct.jvirt_sarray_control* [ %6, %8 ], [ %46, %42 ]
  %13 = phi i64 [ 0, %8 ], [ %44, %42 ]
  %14 = phi i64 [ 0, %8 ], [ %43, %42 ]
  %15 = getelementptr inbounds %struct.jvirt_sarray_control, %struct.jvirt_sarray_control* %12, i64 0, i32 0
  %16 = load i8**, i8*** %15, align 8
  %17 = icmp eq i8** %16, null
  br i1 %17, label %18, label %42

18:                                               ; preds = %11
  %19 = getelementptr inbounds %struct.jvirt_sarray_control, %struct.jvirt_sarray_control* %12, i64 0, i32 1
  %20 = load i32, i32* %19, align 8
  %21 = zext i32 %20 to i64
  %22 = getelementptr inbounds %struct.jvirt_sarray_control, %struct.jvirt_sarray_control* %12, i64 0, i32 2
  %23 = load i32, i32* %22, align 4
  %24 = zext i32 %23 to i64
  %25 = mul nuw nsw i64 %24, %21
  %26 = getelementptr inbounds %struct.jvirt_sarray_control, %struct.jvirt_sarray_control* %12, i64 0, i32 3
  %27 = load i32, i32* %26, align 8
  %28 = zext i32 %27 to i64
  %29 = mul nuw nsw i64 %28, %24
  %30 = add i64 %29, %14
  %31 = xor i64 %13, -1
  %32 = icmp ugt i64 %25, %31
  br i1 %32, label %33, label %40

33:                                               ; preds = %18
  %34 = load %struct.jpeg_error_mgr*, %struct.jpeg_error_mgr** %9, align 8
  %35 = getelementptr inbounds %struct.jpeg_error_mgr, %struct.jpeg_error_mgr* %34, i64 0, i32 5
  store i32 54, i32* %35, align 8
  %36 = load %struct.jpeg_error_mgr*, %struct.jpeg_error_mgr** %9, align 8
  %37 = getelementptr inbounds %struct.jpeg_error_mgr, %struct.jpeg_error_mgr* %36, i64 0, i32 6, i32 0, i64 0
  store i32 10, i32* %37, align 4
  %38 = load void (%struct.jpeg_common_struct*)**, void (%struct.jpeg_common_struct*)*** %10, align 8
  %39 = load void (%struct.jpeg_common_struct*)*, void (%struct.jpeg_common_struct*)** %38, align 8
  tail call void %39(%struct.jpeg_common_struct* %0) #3
  br label %40

40:                                               ; preds = %33, %18
  %41 = add i64 %25, %13
  br label %42

42:                                               ; preds = %11, %40
  %43 = phi i64 [ %30, %40 ], [ %14, %11 ]
  %44 = phi i64 [ %41, %40 ], [ %13, %11 ]
  %45 = getelementptr inbounds %struct.jvirt_sarray_control, %struct.jvirt_sarray_control* %12, i64 0, i32 11
  %46 = load %struct.jvirt_sarray_control*, %struct.jvirt_sarray_control** %45, align 8
  %47 = icmp eq %struct.jvirt_sarray_control* %46, null
  br i1 %47, label %48, label %11

48:                                               ; preds = %42, %1
  %49 = phi i64 [ 0, %1 ], [ %43, %42 ]
  %50 = phi i64 [ 0, %1 ], [ %44, %42 ]
  %51 = getelementptr inbounds %struct.my_memory_mgr, %struct.my_memory_mgr* %4, i64 0, i32 4
  %52 = load %struct.jvirt_barray_control*, %struct.jvirt_barray_control** %51, align 8
  %53 = icmp eq %struct.jvirt_barray_control* %52, null
  br i1 %53, label %96, label %54

54:                                               ; preds = %48
  %55 = getelementptr inbounds %struct.jpeg_common_struct, %struct.jpeg_common_struct* %0, i64 0, i32 0
  %56 = bitcast %struct.jpeg_common_struct* %0 to void (%struct.jpeg_common_struct*)***
  br label %57

57:                                               ; preds = %54, %90
  %58 = phi %struct.jvirt_barray_control* [ %52, %54 ], [ %94, %90 ]
  %59 = phi i64 [ %50, %54 ], [ %92, %90 ]
  %60 = phi i64 [ %49, %54 ], [ %91, %90 ]
  %61 = getelementptr inbounds %struct.jvirt_barray_control, %struct.jvirt_barray_control* %58, i64 0, i32 0
  %62 = load [64 x i16]**, [64 x i16]*** %61, align 8
  %63 = icmp eq [64 x i16]** %62, null
  br i1 %63, label %64, label %90

64:                                               ; preds = %57
  %65 = getelementptr inbounds %struct.jvirt_barray_control, %struct.jvirt_barray_control* %58, i64 0, i32 1
  %66 = load i32, i32* %65, align 8
  %67 = zext i32 %66 to i64
  %68 = getelementptr inbounds %struct.jvirt_barray_control, %struct.jvirt_barray_control* %58, i64 0, i32 2
  %69 = load i32, i32* %68, align 4
  %70 = zext i32 %69 to i64
  %71 = shl nuw nsw i64 %67, 7
  %72 = mul i64 %71, %70
  %73 = getelementptr inbounds %struct.jvirt_barray_control, %struct.jvirt_barray_control* %58, i64 0, i32 3
  %74 = load i32, i32* %73, align 8
  %75 = zext i32 %74 to i64
  %76 = shl nuw nsw i64 %70, 7
  %77 = mul i64 %76, %75
  %78 = add i64 %77, %60
  %79 = xor i64 %59, -1
  %80 = icmp ugt i64 %72, %79
  br i1 %80, label %81, label %88

81:                                               ; preds = %64
  %82 = load %struct.jpeg_error_mgr*, %struct.jpeg_error_mgr** %55, align 8
  %83 = getelementptr inbounds %struct.jpeg_error_mgr, %struct.jpeg_error_mgr* %82, i64 0, i32 5
  store i32 54, i32* %83, align 8
  %84 = load %struct.jpeg_error_mgr*, %struct.jpeg_error_mgr** %55, align 8
  %85 = getelementptr inbounds %struct.jpeg_error_mgr, %struct.jpeg_error_mgr* %84, i64 0, i32 6, i32 0, i64 0
  store i32 11, i32* %85, align 4
  %86 = load void (%struct.jpeg_common_struct*)**, void (%struct.jpeg_common_struct*)*** %56, align 8
  %87 = load void (%struct.jpeg_common_struct*)*, void (%struct.jpeg_common_struct*)** %86, align 8
  tail call void %87(%struct.jpeg_common_struct* %0) #3
  br label %88

88:                                               ; preds = %81, %64
  %89 = add i64 %72, %59
  br label %90

90:                                               ; preds = %57, %88
  %91 = phi i64 [ %78, %88 ], [ %60, %57 ]
  %92 = phi i64 [ %89, %88 ], [ %59, %57 ]
  %93 = getelementptr inbounds %struct.jvirt_barray_control, %struct.jvirt_barray_control* %58, i64 0, i32 11
  %94 = load %struct.jvirt_barray_control*, %struct.jvirt_barray_control** %93, align 8
  %95 = icmp eq %struct.jvirt_barray_control* %94, null
  br i1 %95, label %96, label %57

96:                                               ; preds = %90, %48
  %97 = phi i64 [ %49, %48 ], [ %91, %90 ]
  %98 = phi i64 [ %50, %48 ], [ %92, %90 ]
  %99 = icmp eq i64 %97, 0
  br i1 %99, label %288, label %100

100:                                              ; preds = %96
  %101 = getelementptr inbounds %struct.my_memory_mgr, %struct.my_memory_mgr* %4, i64 0, i32 5
  %102 = load i64, i64* %101, align 8
  %103 = tail call i64 @jpeg_mem_available(%struct.jpeg_common_struct* %0, i64 %97, i64 %98, i64 %102) #3
  %104 = icmp ult i64 %103, %98
  br i1 %104, label %105, label %109

105:                                              ; preds = %100
  %106 = udiv i64 %103, %97
  %107 = icmp ugt i64 %97, %103
  %108 = select i1 %107, i64 1, i64 %106
  br label %109

109:                                              ; preds = %100, %105
  %110 = phi i64 [ %108, %105 ], [ 1000000000, %100 ]
  %111 = load %struct.jvirt_sarray_control*, %struct.jvirt_sarray_control** %5, align 8
  %112 = icmp eq %struct.jvirt_sarray_control* %111, null
  br i1 %112, label %116, label %113

113:                                              ; preds = %109
  %114 = trunc i64 %110 to i32
  %115 = getelementptr inbounds %struct.my_memory_mgr, %struct.my_memory_mgr* %4, i64 0, i32 6
  br label %124

116:                                              ; preds = %162, %109
  %117 = load %struct.jvirt_barray_control*, %struct.jvirt_barray_control** %51, align 8
  %118 = icmp eq %struct.jvirt_barray_control* %117, null
  br i1 %118, label %288, label %119

119:                                              ; preds = %116
  %120 = trunc i64 %110 to i32
  %121 = getelementptr inbounds %struct.jpeg_common_struct, %struct.jpeg_common_struct* %0, i64 0, i32 0
  %122 = bitcast %struct.jpeg_common_struct* %0 to void (%struct.jpeg_common_struct*)***
  %123 = getelementptr inbounds %struct.my_memory_mgr, %struct.my_memory_mgr* %4, i64 0, i32 6
  br label %166

124:                                              ; preds = %113, %162
  %125 = phi %struct.jvirt_sarray_control* [ %111, %113 ], [ %164, %162 ]
  %126 = getelementptr inbounds %struct.jvirt_sarray_control, %struct.jvirt_sarray_control* %125, i64 0, i32 0
  %127 = load i8**, i8*** %126, align 8
  %128 = icmp eq i8** %127, null
  br i1 %128, label %129, label %162

129:                                              ; preds = %124
  %130 = getelementptr inbounds %struct.jvirt_sarray_control, %struct.jvirt_sarray_control* %125, i64 0, i32 1
  %131 = load i32, i32* %130, align 8
  %132 = zext i32 %131 to i64
  %133 = add nsw i64 %132, -1
  %134 = getelementptr inbounds %struct.jvirt_sarray_control, %struct.jvirt_sarray_control* %125, i64 0, i32 3
  %135 = load i32, i32* %134, align 8
  %136 = zext i32 %135 to i64
  %137 = sdiv i64 %133, %136
  %138 = add nsw i64 %137, 1
  %139 = icmp ugt i64 %138, %110
  br i1 %139, label %142, label %140

140:                                              ; preds = %129
  %141 = getelementptr inbounds %struct.jvirt_sarray_control, %struct.jvirt_sarray_control* %125, i64 0, i32 4
  store i32 %131, i32* %141, align 4
  br label %152

142:                                              ; preds = %129
  %143 = mul i32 %135, %114
  %144 = getelementptr inbounds %struct.jvirt_sarray_control, %struct.jvirt_sarray_control* %125, i64 0, i32 4
  store i32 %143, i32* %144, align 4
  %145 = getelementptr inbounds %struct.jvirt_sarray_control, %struct.jvirt_sarray_control* %125, i64 0, i32 12
  %146 = getelementptr inbounds %struct.jvirt_sarray_control, %struct.jvirt_sarray_control* %125, i64 0, i32 2
  %147 = load i32, i32* %146, align 4
  %148 = zext i32 %147 to i64
  %149 = mul nuw nsw i64 %148, %132
  tail call void @jpeg_open_backing_store(%struct.jpeg_common_struct* %0, %struct.backing_store_struct* %145, i64 %149) #3
  %150 = getelementptr inbounds %struct.jvirt_sarray_control, %struct.jvirt_sarray_control* %125, i64 0, i32 10
  store i32 1, i32* %150, align 4
  %151 = load i32, i32* %144, align 4
  br label %152

152:                                              ; preds = %142, %140
  %153 = phi i32 [ %151, %142 ], [ %131, %140 ]
  %154 = getelementptr inbounds %struct.jvirt_sarray_control, %struct.jvirt_sarray_control* %125, i64 0, i32 2
  %155 = load i32, i32* %154, align 4
  %156 = tail call i8** @alloc_sarray(%struct.jpeg_common_struct* %0, i32 1, i32 %155, i32 %153)
  store i8** %156, i8*** %126, align 8
  %157 = load i32, i32* %115, align 8
  %158 = getelementptr inbounds %struct.jvirt_sarray_control, %struct.jvirt_sarray_control* %125, i64 0, i32 5
  store i32 %157, i32* %158, align 8
  %159 = getelementptr inbounds %struct.jvirt_sarray_control, %struct.jvirt_sarray_control* %125, i64 0, i32 6
  store i32 0, i32* %159, align 4
  %160 = getelementptr inbounds %struct.jvirt_sarray_control, %struct.jvirt_sarray_control* %125, i64 0, i32 7
  store i32 0, i32* %160, align 8
  %161 = getelementptr inbounds %struct.jvirt_sarray_control, %struct.jvirt_sarray_control* %125, i64 0, i32 9
  store i32 0, i32* %161, align 8
  br label %162

162:                                              ; preds = %124, %152
  %163 = getelementptr inbounds %struct.jvirt_sarray_control, %struct.jvirt_sarray_control* %125, i64 0, i32 11
  %164 = load %struct.jvirt_sarray_control*, %struct.jvirt_sarray_control** %163, align 8
  %165 = icmp eq %struct.jvirt_sarray_control* %164, null
  br i1 %165, label %116, label %124

166:                                              ; preds = %119, %284
  %167 = phi %struct.jvirt_barray_control* [ %117, %119 ], [ %286, %284 ]
  %168 = getelementptr inbounds %struct.jvirt_barray_control, %struct.jvirt_barray_control* %167, i64 0, i32 0
  %169 = load [64 x i16]**, [64 x i16]*** %168, align 8
  %170 = icmp eq [64 x i16]** %169, null
  br i1 %170, label %171, label %284

171:                                              ; preds = %166
  %172 = getelementptr inbounds %struct.jvirt_barray_control, %struct.jvirt_barray_control* %167, i64 0, i32 1
  %173 = load i32, i32* %172, align 8
  %174 = zext i32 %173 to i64
  %175 = add nsw i64 %174, -1
  %176 = getelementptr inbounds %struct.jvirt_barray_control, %struct.jvirt_barray_control* %167, i64 0, i32 3
  %177 = load i32, i32* %176, align 8
  %178 = zext i32 %177 to i64
  %179 = sdiv i64 %175, %178
  %180 = add nsw i64 %179, 1
  %181 = icmp ugt i64 %180, %110
  br i1 %181, label %184, label %182

182:                                              ; preds = %171
  %183 = getelementptr inbounds %struct.jvirt_barray_control, %struct.jvirt_barray_control* %167, i64 0, i32 4
  store i32 %173, i32* %183, align 4
  br label %195

184:                                              ; preds = %171
  %185 = mul i32 %177, %120
  %186 = getelementptr inbounds %struct.jvirt_barray_control, %struct.jvirt_barray_control* %167, i64 0, i32 4
  store i32 %185, i32* %186, align 4
  %187 = getelementptr inbounds %struct.jvirt_barray_control, %struct.jvirt_barray_control* %167, i64 0, i32 12
  %188 = getelementptr inbounds %struct.jvirt_barray_control, %struct.jvirt_barray_control* %167, i64 0, i32 2
  %189 = load i32, i32* %188, align 4
  %190 = zext i32 %189 to i64
  %191 = shl nuw nsw i64 %174, 7
  %192 = mul i64 %191, %190
  tail call void @jpeg_open_backing_store(%struct.jpeg_common_struct* %0, %struct.backing_store_struct* %187, i64 %192) #3
  %193 = getelementptr inbounds %struct.jvirt_barray_control, %struct.jvirt_barray_control* %167, i64 0, i32 10
  store i32 1, i32* %193, align 4
  %194 = load i32, i32* %186, align 4
  br label %195

195:                                              ; preds = %184, %182
  %196 = phi i32 [ %194, %184 ], [ %173, %182 ]
  %197 = getelementptr inbounds %struct.jvirt_barray_control, %struct.jvirt_barray_control* %167, i64 0, i32 2
  %198 = load i32, i32* %197, align 4
  %199 = load %struct.my_memory_mgr*, %struct.my_memory_mgr** %3, align 8
  %200 = zext i32 %198 to i64
  %201 = shl nuw nsw i64 %200, 7
  %202 = udiv i64 999999976, %201
  %203 = icmp slt i64 %202, 1
  br i1 %203, label %204, label %209

204:                                              ; preds = %195
  %205 = load %struct.jpeg_error_mgr*, %struct.jpeg_error_mgr** %121, align 8
  %206 = getelementptr inbounds %struct.jpeg_error_mgr, %struct.jpeg_error_mgr* %205, i64 0, i32 5
  store i32 70, i32* %206, align 8
  %207 = load void (%struct.jpeg_common_struct*)**, void (%struct.jpeg_common_struct*)*** %122, align 8
  %208 = load void (%struct.jpeg_common_struct*)*, void (%struct.jpeg_common_struct*)** %207, align 8
  tail call void %208(%struct.jpeg_common_struct* %0) #3
  br label %209

209:                                              ; preds = %204, %195
  %210 = zext i32 %196 to i64
  %211 = icmp slt i64 %202, %210
  %212 = trunc i64 %202 to i32
  %213 = select i1 %211, i32 %212, i32 %196
  %214 = getelementptr inbounds %struct.my_memory_mgr, %struct.my_memory_mgr* %199, i64 0, i32 6
  store i32 %213, i32* %214, align 8
  %215 = shl nuw nsw i64 %210, 3
  %216 = tail call i8* @alloc_small(%struct.jpeg_common_struct* %0, i32 1, i64 %215) #3
  %217 = bitcast i8* %216 to [64 x i16]**
  %218 = icmp eq i32 %196, 0
  br i1 %218, label %277, label %222

219:                                              ; preds = %249, %255, %222
  %220 = phi i32 [ %223, %222 ], [ %250, %249 ], [ %271, %255 ]
  %221 = icmp ult i32 %220, %196
  br i1 %221, label %222, label %277

222:                                              ; preds = %209, %219
  %223 = phi i32 [ %220, %219 ], [ 0, %209 ]
  %224 = phi i32 [ %227, %219 ], [ %213, %209 ]
  %225 = sub i32 %196, %223
  %226 = icmp ult i32 %224, %225
  %227 = select i1 %226, i32 %224, i32 %225
  %228 = zext i32 %227 to i64
  %229 = mul i64 %201, %228
  %230 = tail call i8* @alloc_large(%struct.jpeg_common_struct* %0, i32 1, i64 %229) #3
  %231 = icmp eq i32 %227, 0
  br i1 %231, label %219, label %232

232:                                              ; preds = %222
  %233 = bitcast i8* %230 to [64 x i16]*
  %234 = add i32 %227, -1
  %235 = and i32 %227, 3
  %236 = icmp eq i32 %235, 0
  br i1 %236, label %249, label %237

237:                                              ; preds = %232, %237
  %238 = phi i32 [ %246, %237 ], [ %227, %232 ]
  %239 = phi i32 [ %242, %237 ], [ %223, %232 ]
  %240 = phi [64 x i16]* [ %245, %237 ], [ %233, %232 ]
  %241 = phi i32 [ %247, %237 ], [ %235, %232 ]
  %242 = add i32 %239, 1
  %243 = zext i32 %239 to i64
  %244 = getelementptr inbounds [64 x i16]*, [64 x i16]** %217, i64 %243
  store [64 x i16]* %240, [64 x i16]** %244, align 8
  %245 = getelementptr inbounds [64 x i16], [64 x i16]* %240, i64 %200
  %246 = add i32 %238, -1
  %247 = add i32 %241, -1
  %248 = icmp eq i32 %247, 0
  br i1 %248, label %249, label %237, !llvm.loop !5

249:                                              ; preds = %237, %232
  %250 = phi i32 [ undef, %232 ], [ %242, %237 ]
  %251 = phi i32 [ %227, %232 ], [ %246, %237 ]
  %252 = phi i32 [ %223, %232 ], [ %242, %237 ]
  %253 = phi [64 x i16]* [ %233, %232 ], [ %245, %237 ]
  %254 = icmp ult i32 %234, 3
  br i1 %254, label %219, label %255

255:                                              ; preds = %249, %255
  %256 = phi i32 [ %275, %255 ], [ %251, %249 ]
  %257 = phi i32 [ %271, %255 ], [ %252, %249 ]
  %258 = phi [64 x i16]* [ %274, %255 ], [ %253, %249 ]
  %259 = add i32 %257, 1
  %260 = zext i32 %257 to i64
  %261 = getelementptr inbounds [64 x i16]*, [64 x i16]** %217, i64 %260
  store [64 x i16]* %258, [64 x i16]** %261, align 8
  %262 = getelementptr inbounds [64 x i16], [64 x i16]* %258, i64 %200
  %263 = add i32 %257, 2
  %264 = zext i32 %259 to i64
  %265 = getelementptr inbounds [64 x i16]*, [64 x i16]** %217, i64 %264
  store [64 x i16]* %262, [64 x i16]** %265, align 8
  %266 = getelementptr inbounds [64 x i16], [64 x i16]* %262, i64 %200
  %267 = add i32 %257, 3
  %268 = zext i32 %263 to i64
  %269 = getelementptr inbounds [64 x i16]*, [64 x i16]** %217, i64 %268
  store [64 x i16]* %266, [64 x i16]** %269, align 8
  %270 = getelementptr inbounds [64 x i16], [64 x i16]* %266, i64 %200
  %271 = add i32 %257, 4
  %272 = zext i32 %267 to i64
  %273 = getelementptr inbounds [64 x i16]*, [64 x i16]** %217, i64 %272
  store [64 x i16]* %270, [64 x i16]** %273, align 8
  %274 = getelementptr inbounds [64 x i16], [64 x i16]* %270, i64 %200
  %275 = add i32 %256, -4
  %276 = icmp eq i32 %275, 0
  br i1 %276, label %219, label %255

277:                                              ; preds = %219, %209
  %278 = bitcast %struct.jvirt_barray_control* %167 to i8**
  store i8* %216, i8** %278, align 8
  %279 = load i32, i32* %123, align 8
  %280 = getelementptr inbounds %struct.jvirt_barray_control, %struct.jvirt_barray_control* %167, i64 0, i32 5
  store i32 %279, i32* %280, align 8
  %281 = getelementptr inbounds %struct.jvirt_barray_control, %struct.jvirt_barray_control* %167, i64 0, i32 6
  store i32 0, i32* %281, align 4
  %282 = getelementptr inbounds %struct.jvirt_barray_control, %struct.jvirt_barray_control* %167, i64 0, i32 7
  store i32 0, i32* %282, align 8
  %283 = getelementptr inbounds %struct.jvirt_barray_control, %struct.jvirt_barray_control* %167, i64 0, i32 9
  store i32 0, i32* %283, align 8
  br label %284

284:                                              ; preds = %166, %277
  %285 = getelementptr inbounds %struct.jvirt_barray_control, %struct.jvirt_barray_control* %167, i64 0, i32 11
  %286 = load %struct.jvirt_barray_control*, %struct.jvirt_barray_control** %285, align 8
  %287 = icmp eq %struct.jvirt_barray_control* %286, null
  br i1 %287, label %288, label %166

288:                                              ; preds = %284, %116, %96
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal i8** @access_virt_sarray(%struct.jpeg_common_struct*, %struct.jvirt_sarray_control*, i32, i32, i32) #0 {
  %6 = add i32 %3, %2
  %7 = getelementptr inbounds %struct.jvirt_sarray_control, %struct.jvirt_sarray_control* %1, i64 0, i32 1
  %8 = load i32, i32* %7, align 8
  %9 = icmp ugt i32 %6, %8
  br i1 %9, label %18, label %10

10:                                               ; preds = %5
  %11 = getelementptr inbounds %struct.jvirt_sarray_control, %struct.jvirt_sarray_control* %1, i64 0, i32 3
  %12 = load i32, i32* %11, align 8
  %13 = icmp ult i32 %12, %3
  br i1 %13, label %18, label %14

14:                                               ; preds = %10
  %15 = getelementptr inbounds %struct.jvirt_sarray_control, %struct.jvirt_sarray_control* %1, i64 0, i32 0
  %16 = load i8**, i8*** %15, align 8
  %17 = icmp eq i8** %16, null
  br i1 %17, label %18, label %25

18:                                               ; preds = %14, %10, %5
  %19 = getelementptr inbounds %struct.jpeg_common_struct, %struct.jpeg_common_struct* %0, i64 0, i32 0
  %20 = load %struct.jpeg_error_mgr*, %struct.jpeg_error_mgr** %19, align 8
  %21 = getelementptr inbounds %struct.jpeg_error_mgr, %struct.jpeg_error_mgr* %20, i64 0, i32 5
  store i32 22, i32* %21, align 8
  %22 = bitcast %struct.jpeg_common_struct* %0 to void (%struct.jpeg_common_struct*)***
  %23 = load void (%struct.jpeg_common_struct*)**, void (%struct.jpeg_common_struct*)*** %22, align 8
  %24 = load void (%struct.jpeg_common_struct*)*, void (%struct.jpeg_common_struct*)** %23, align 8
  tail call void %24(%struct.jpeg_common_struct* %0) #3
  br label %25

25:                                               ; preds = %18, %14
  %26 = getelementptr inbounds %struct.jvirt_sarray_control, %struct.jvirt_sarray_control* %1, i64 0, i32 6
  %27 = load i32, i32* %26, align 4
  %28 = icmp ugt i32 %27, %2
  br i1 %28, label %34, label %29

29:                                               ; preds = %25
  %30 = getelementptr inbounds %struct.jvirt_sarray_control, %struct.jvirt_sarray_control* %1, i64 0, i32 4
  %31 = load i32, i32* %30, align 4
  %32 = add i32 %31, %27
  %33 = icmp ugt i32 %6, %32
  br i1 %33, label %34, label %199

34:                                               ; preds = %29, %25
  %35 = getelementptr inbounds %struct.jvirt_sarray_control, %struct.jvirt_sarray_control* %1, i64 0, i32 10
  %36 = load i32, i32* %35, align 4
  %37 = icmp eq i32 %36, 0
  br i1 %37, label %38, label %45

38:                                               ; preds = %34
  %39 = getelementptr inbounds %struct.jpeg_common_struct, %struct.jpeg_common_struct* %0, i64 0, i32 0
  %40 = load %struct.jpeg_error_mgr*, %struct.jpeg_error_mgr** %39, align 8
  %41 = getelementptr inbounds %struct.jpeg_error_mgr, %struct.jpeg_error_mgr* %40, i64 0, i32 5
  store i32 69, i32* %41, align 8
  %42 = bitcast %struct.jpeg_common_struct* %0 to void (%struct.jpeg_common_struct*)***
  %43 = load void (%struct.jpeg_common_struct*)**, void (%struct.jpeg_common_struct*)*** %42, align 8
  %44 = load void (%struct.jpeg_common_struct*)*, void (%struct.jpeg_common_struct*)** %43, align 8
  tail call void %44(%struct.jpeg_common_struct* %0) #3
  br label %45

45:                                               ; preds = %34, %38
  %46 = getelementptr inbounds %struct.jvirt_sarray_control, %struct.jvirt_sarray_control* %1, i64 0, i32 9
  %47 = load i32, i32* %46, align 8
  %48 = icmp eq i32 %47, 0
  br i1 %48, label %117, label %49

49:                                               ; preds = %45
  %50 = getelementptr inbounds %struct.jvirt_sarray_control, %struct.jvirt_sarray_control* %1, i64 0, i32 2
  %51 = load i32, i32* %50, align 4
  %52 = zext i32 %51 to i64
  %53 = getelementptr inbounds %struct.jvirt_sarray_control, %struct.jvirt_sarray_control* %1, i64 0, i32 5
  %54 = getelementptr inbounds %struct.jvirt_sarray_control, %struct.jvirt_sarray_control* %1, i64 0, i32 4
  %55 = load i32, i32* %54, align 4
  %56 = icmp eq i32 %55, 0
  br i1 %56, label %116, label %57

57:                                               ; preds = %49
  %58 = zext i32 %55 to i64
  %59 = load i32, i32* %26, align 4
  %60 = zext i32 %59 to i64
  %61 = getelementptr inbounds %struct.jvirt_sarray_control, %struct.jvirt_sarray_control* %1, i64 0, i32 7
  %62 = getelementptr inbounds %struct.jvirt_sarray_control, %struct.jvirt_sarray_control* %1, i64 0, i32 12
  %63 = getelementptr inbounds %struct.jvirt_sarray_control, %struct.jvirt_sarray_control* %1, i64 0, i32 12, i32 1
  %64 = getelementptr inbounds %struct.jvirt_sarray_control, %struct.jvirt_sarray_control* %1, i64 0, i32 0
  %65 = load i32, i32* %53, align 8
  %66 = zext i32 %65 to i64
  %67 = icmp ugt i64 %58, %66
  %68 = select i1 %67, i64 %66, i64 %58
  %69 = load i32, i32* %61, align 8
  %70 = zext i32 %69 to i64
  %71 = sub nsw i64 %70, %60
  %72 = icmp slt i64 %68, %71
  %73 = select i1 %72, i64 %68, i64 %71
  %74 = load i32, i32* %7, align 8
  %75 = zext i32 %74 to i64
  %76 = sub nsw i64 %75, %60
  %77 = icmp slt i64 %73, %76
  %78 = select i1 %77, i64 %73, i64 %76
  %79 = icmp slt i64 %78, 1
  br i1 %79, label %116, label %80

80:                                               ; preds = %57
  %81 = mul nuw nsw i64 %60, %52
  br label %82

82:                                               ; preds = %80, %97
  %83 = phi i64 [ %114, %97 ], [ %78, %80 ]
  %84 = phi i64 [ %98, %97 ], [ %81, %80 ]
  %85 = phi i64 [ %93, %97 ], [ 0, %80 ]
  %86 = mul nsw i64 %83, %52
  %87 = load void (%struct.jpeg_common_struct*, %struct.backing_store_struct*, i8*, i64, i64)*, void (%struct.jpeg_common_struct*, %struct.backing_store_struct*, i8*, i64, i64)** %63, align 8
  %88 = load i8**, i8*** %64, align 8
  %89 = getelementptr inbounds i8*, i8** %88, i64 %85
  %90 = load i8*, i8** %89, align 8
  tail call void %87(%struct.jpeg_common_struct* %0, %struct.backing_store_struct* %62, i8* %90, i64 %84, i64 %86) #3
  %91 = load i32, i32* %53, align 8
  %92 = zext i32 %91 to i64
  %93 = add nuw nsw i64 %85, %92
  %94 = load i32, i32* %54, align 4
  %95 = zext i32 %94 to i64
  %96 = icmp ult i64 %93, %95
  br i1 %96, label %97, label %116

97:                                               ; preds = %82
  %98 = add nsw i64 %86, %84
  %99 = load i32, i32* %26, align 4
  %100 = sub nsw i64 %95, %93
  %101 = icmp sgt i64 %100, %92
  %102 = select i1 %101, i64 %92, i64 %100
  %103 = zext i32 %99 to i64
  %104 = add nuw nsw i64 %93, %103
  %105 = load i32, i32* %61, align 8
  %106 = zext i32 %105 to i64
  %107 = sub nsw i64 %106, %104
  %108 = icmp slt i64 %102, %107
  %109 = select i1 %108, i64 %102, i64 %107
  %110 = load i32, i32* %7, align 8
  %111 = zext i32 %110 to i64
  %112 = sub nsw i64 %111, %104
  %113 = icmp slt i64 %109, %112
  %114 = select i1 %113, i64 %109, i64 %112
  %115 = icmp slt i64 %114, 1
  br i1 %115, label %116, label %82

116:                                              ; preds = %82, %97, %57, %49
  store i32 0, i32* %46, align 8
  br label %117

117:                                              ; preds = %45, %116
  %118 = load i32, i32* %26, align 4
  %119 = icmp ult i32 %118, %2
  br i1 %119, label %120, label %123

120:                                              ; preds = %117
  %121 = getelementptr inbounds %struct.jvirt_sarray_control, %struct.jvirt_sarray_control* %1, i64 0, i32 4
  %122 = load i32, i32* %121, align 4
  br label %132

123:                                              ; preds = %117
  %124 = zext i32 %6 to i64
  %125 = getelementptr inbounds %struct.jvirt_sarray_control, %struct.jvirt_sarray_control* %1, i64 0, i32 4
  %126 = load i32, i32* %125, align 4
  %127 = zext i32 %126 to i64
  %128 = sub nsw i64 %124, %127
  %129 = icmp sgt i64 %128, 0
  %130 = select i1 %129, i64 %128, i64 0
  %131 = trunc i64 %130 to i32
  br label %132

132:                                              ; preds = %120, %123
  %133 = phi i32 [ %126, %123 ], [ %122, %120 ]
  %134 = phi i32 [ %131, %123 ], [ %2, %120 ]
  store i32 %134, i32* %26, align 4
  %135 = getelementptr inbounds %struct.jvirt_sarray_control, %struct.jvirt_sarray_control* %1, i64 0, i32 2
  %136 = load i32, i32* %135, align 4
  %137 = zext i32 %136 to i64
  %138 = getelementptr inbounds %struct.jvirt_sarray_control, %struct.jvirt_sarray_control* %1, i64 0, i32 5
  %139 = getelementptr inbounds %struct.jvirt_sarray_control, %struct.jvirt_sarray_control* %1, i64 0, i32 4
  %140 = icmp eq i32 %133, 0
  br i1 %140, label %199, label %141

141:                                              ; preds = %132
  %142 = zext i32 %133 to i64
  %143 = zext i32 %134 to i64
  %144 = getelementptr inbounds %struct.jvirt_sarray_control, %struct.jvirt_sarray_control* %1, i64 0, i32 7
  %145 = getelementptr inbounds %struct.jvirt_sarray_control, %struct.jvirt_sarray_control* %1, i64 0, i32 12
  %146 = getelementptr inbounds %struct.jvirt_sarray_control, %struct.jvirt_sarray_control* %1, i64 0, i32 0
  %147 = getelementptr inbounds %struct.backing_store_struct, %struct.backing_store_struct* %145, i64 0, i32 0
  %148 = load i32, i32* %138, align 8
  %149 = zext i32 %148 to i64
  %150 = icmp ugt i64 %142, %149
  %151 = select i1 %150, i64 %149, i64 %142
  %152 = load i32, i32* %144, align 8
  %153 = zext i32 %152 to i64
  %154 = sub nsw i64 %153, %143
  %155 = icmp slt i64 %151, %154
  %156 = select i1 %155, i64 %151, i64 %154
  %157 = load i32, i32* %7, align 8
  %158 = zext i32 %157 to i64
  %159 = sub nsw i64 %158, %143
  %160 = icmp slt i64 %156, %159
  %161 = select i1 %160, i64 %156, i64 %159
  %162 = icmp slt i64 %161, 1
  br i1 %162, label %199, label %163

163:                                              ; preds = %141
  %164 = mul nuw nsw i64 %137, %143
  br label %165

165:                                              ; preds = %163, %180
  %166 = phi i64 [ %197, %180 ], [ %161, %163 ]
  %167 = phi i64 [ %181, %180 ], [ %164, %163 ]
  %168 = phi i64 [ %176, %180 ], [ 0, %163 ]
  %169 = mul nsw i64 %166, %137
  %170 = load void (%struct.jpeg_common_struct*, %struct.backing_store_struct*, i8*, i64, i64)*, void (%struct.jpeg_common_struct*, %struct.backing_store_struct*, i8*, i64, i64)** %147, align 8
  %171 = load i8**, i8*** %146, align 8
  %172 = getelementptr inbounds i8*, i8** %171, i64 %168
  %173 = load i8*, i8** %172, align 8
  tail call void %170(%struct.jpeg_common_struct* %0, %struct.backing_store_struct* %145, i8* %173, i64 %167, i64 %169) #3
  %174 = load i32, i32* %138, align 8
  %175 = zext i32 %174 to i64
  %176 = add nuw nsw i64 %168, %175
  %177 = load i32, i32* %139, align 4
  %178 = zext i32 %177 to i64
  %179 = icmp ult i64 %176, %178
  br i1 %179, label %180, label %199

180:                                              ; preds = %165
  %181 = add nsw i64 %169, %167
  %182 = load i32, i32* %26, align 4
  %183 = sub nsw i64 %178, %176
  %184 = icmp sgt i64 %183, %175
  %185 = select i1 %184, i64 %175, i64 %183
  %186 = zext i32 %182 to i64
  %187 = add nuw nsw i64 %176, %186
  %188 = load i32, i32* %144, align 8
  %189 = zext i32 %188 to i64
  %190 = sub nsw i64 %189, %187
  %191 = icmp slt i64 %185, %190
  %192 = select i1 %191, i64 %185, i64 %190
  %193 = load i32, i32* %7, align 8
  %194 = zext i32 %193 to i64
  %195 = sub nsw i64 %194, %187
  %196 = icmp slt i64 %192, %195
  %197 = select i1 %196, i64 %192, i64 %195
  %198 = icmp slt i64 %197, 1
  br i1 %198, label %199, label %165

199:                                              ; preds = %180, %165, %141, %132, %29
  %200 = getelementptr inbounds %struct.jvirt_sarray_control, %struct.jvirt_sarray_control* %1, i64 0, i32 7
  %201 = load i32, i32* %200, align 8
  %202 = icmp ult i32 %201, %6
  br i1 %202, label %203, label %250

203:                                              ; preds = %199
  %204 = icmp ult i32 %201, %2
  %205 = icmp eq i32 %4, 0
  br i1 %204, label %206, label %214

206:                                              ; preds = %203
  br i1 %205, label %217, label %207

207:                                              ; preds = %206
  %208 = getelementptr inbounds %struct.jpeg_common_struct, %struct.jpeg_common_struct* %0, i64 0, i32 0
  %209 = load %struct.jpeg_error_mgr*, %struct.jpeg_error_mgr** %208, align 8
  %210 = getelementptr inbounds %struct.jpeg_error_mgr, %struct.jpeg_error_mgr* %209, i64 0, i32 5
  store i32 22, i32* %210, align 8
  %211 = bitcast %struct.jpeg_common_struct* %0 to void (%struct.jpeg_common_struct*)***
  %212 = load void (%struct.jpeg_common_struct*)**, void (%struct.jpeg_common_struct*)*** %211, align 8
  %213 = load void (%struct.jpeg_common_struct*)*, void (%struct.jpeg_common_struct*)** %212, align 8
  tail call void %213(%struct.jpeg_common_struct* %0) #3
  br label %215

214:                                              ; preds = %203
  br i1 %205, label %217, label %215

215:                                              ; preds = %214, %207
  %216 = phi i32 [ %2, %207 ], [ %201, %214 ]
  store i32 %6, i32* %200, align 8
  br label %217

217:                                              ; preds = %214, %206, %215
  %218 = phi i1 [ true, %215 ], [ false, %214 ], [ false, %206 ]
  %219 = phi i32 [ %216, %215 ], [ %201, %214 ], [ %2, %206 ]
  %220 = getelementptr inbounds %struct.jvirt_sarray_control, %struct.jvirt_sarray_control* %1, i64 0, i32 8
  %221 = load i32, i32* %220, align 4
  %222 = icmp eq i32 %221, 0
  br i1 %222, label %242, label %223

223:                                              ; preds = %217
  %224 = getelementptr inbounds %struct.jvirt_sarray_control, %struct.jvirt_sarray_control* %1, i64 0, i32 2
  %225 = load i32, i32* %224, align 4
  %226 = zext i32 %225 to i64
  %227 = load i32, i32* %26, align 4
  %228 = sub i32 %219, %227
  %229 = sub i32 %6, %227
  %230 = icmp ult i32 %228, %229
  br i1 %230, label %231, label %250

231:                                              ; preds = %223
  %232 = getelementptr inbounds %struct.jvirt_sarray_control, %struct.jvirt_sarray_control* %1, i64 0, i32 0
  %233 = zext i32 %228 to i64
  br label %234

234:                                              ; preds = %234, %231
  %235 = phi i64 [ %233, %231 ], [ %239, %234 ]
  %236 = load i8**, i8*** %232, align 8
  %237 = getelementptr inbounds i8*, i8** %236, i64 %235
  %238 = load i8*, i8** %237, align 8
  tail call void @jzero_far(i8* %238, i64 %226) #3
  %239 = add nuw nsw i64 %235, 1
  %240 = trunc i64 %239 to i32
  %241 = icmp eq i32 %229, %240
  br i1 %241, label %250, label %234

242:                                              ; preds = %217
  br i1 %218, label %250, label %243

243:                                              ; preds = %242
  %244 = getelementptr inbounds %struct.jpeg_common_struct, %struct.jpeg_common_struct* %0, i64 0, i32 0
  %245 = load %struct.jpeg_error_mgr*, %struct.jpeg_error_mgr** %244, align 8
  %246 = getelementptr inbounds %struct.jpeg_error_mgr, %struct.jpeg_error_mgr* %245, i64 0, i32 5
  store i32 22, i32* %246, align 8
  %247 = bitcast %struct.jpeg_common_struct* %0 to void (%struct.jpeg_common_struct*)***
  %248 = load void (%struct.jpeg_common_struct*)**, void (%struct.jpeg_common_struct*)*** %247, align 8
  %249 = load void (%struct.jpeg_common_struct*)*, void (%struct.jpeg_common_struct*)** %248, align 8
  tail call void %249(%struct.jpeg_common_struct* %0) #3
  br label %250

250:                                              ; preds = %234, %223, %243, %242, %199
  %251 = icmp eq i32 %4, 0
  br i1 %251, label %254, label %252

252:                                              ; preds = %250
  %253 = getelementptr inbounds %struct.jvirt_sarray_control, %struct.jvirt_sarray_control* %1, i64 0, i32 9
  store i32 1, i32* %253, align 8
  br label %254

254:                                              ; preds = %250, %252
  %255 = getelementptr inbounds %struct.jvirt_sarray_control, %struct.jvirt_sarray_control* %1, i64 0, i32 0
  %256 = load i8**, i8*** %255, align 8
  %257 = load i32, i32* %26, align 4
  %258 = sub i32 %2, %257
  %259 = zext i32 %258 to i64
  %260 = getelementptr inbounds i8*, i8** %256, i64 %259
  ret i8** %260
}

; Function Attrs: nounwind ssp uwtable
define internal [64 x i16]** @access_virt_barray(%struct.jpeg_common_struct*, %struct.jvirt_barray_control*, i32, i32, i32) #0 {
  %6 = add i32 %3, %2
  %7 = getelementptr inbounds %struct.jvirt_barray_control, %struct.jvirt_barray_control* %1, i64 0, i32 1
  %8 = load i32, i32* %7, align 8
  %9 = icmp ugt i32 %6, %8
  br i1 %9, label %18, label %10

10:                                               ; preds = %5
  %11 = getelementptr inbounds %struct.jvirt_barray_control, %struct.jvirt_barray_control* %1, i64 0, i32 3
  %12 = load i32, i32* %11, align 8
  %13 = icmp ult i32 %12, %3
  br i1 %13, label %18, label %14

14:                                               ; preds = %10
  %15 = getelementptr inbounds %struct.jvirt_barray_control, %struct.jvirt_barray_control* %1, i64 0, i32 0
  %16 = load [64 x i16]**, [64 x i16]*** %15, align 8
  %17 = icmp eq [64 x i16]** %16, null
  br i1 %17, label %18, label %25

18:                                               ; preds = %14, %10, %5
  %19 = getelementptr inbounds %struct.jpeg_common_struct, %struct.jpeg_common_struct* %0, i64 0, i32 0
  %20 = load %struct.jpeg_error_mgr*, %struct.jpeg_error_mgr** %19, align 8
  %21 = getelementptr inbounds %struct.jpeg_error_mgr, %struct.jpeg_error_mgr* %20, i64 0, i32 5
  store i32 22, i32* %21, align 8
  %22 = bitcast %struct.jpeg_common_struct* %0 to void (%struct.jpeg_common_struct*)***
  %23 = load void (%struct.jpeg_common_struct*)**, void (%struct.jpeg_common_struct*)*** %22, align 8
  %24 = load void (%struct.jpeg_common_struct*)*, void (%struct.jpeg_common_struct*)** %23, align 8
  tail call void %24(%struct.jpeg_common_struct* %0) #3
  br label %25

25:                                               ; preds = %18, %14
  %26 = getelementptr inbounds %struct.jvirt_barray_control, %struct.jvirt_barray_control* %1, i64 0, i32 6
  %27 = load i32, i32* %26, align 4
  %28 = icmp ugt i32 %27, %2
  br i1 %28, label %34, label %29

29:                                               ; preds = %25
  %30 = getelementptr inbounds %struct.jvirt_barray_control, %struct.jvirt_barray_control* %1, i64 0, i32 4
  %31 = load i32, i32* %30, align 4
  %32 = add i32 %31, %27
  %33 = icmp ugt i32 %6, %32
  br i1 %33, label %34, label %203

34:                                               ; preds = %29, %25
  %35 = getelementptr inbounds %struct.jvirt_barray_control, %struct.jvirt_barray_control* %1, i64 0, i32 10
  %36 = load i32, i32* %35, align 4
  %37 = icmp eq i32 %36, 0
  br i1 %37, label %38, label %45

38:                                               ; preds = %34
  %39 = getelementptr inbounds %struct.jpeg_common_struct, %struct.jpeg_common_struct* %0, i64 0, i32 0
  %40 = load %struct.jpeg_error_mgr*, %struct.jpeg_error_mgr** %39, align 8
  %41 = getelementptr inbounds %struct.jpeg_error_mgr, %struct.jpeg_error_mgr* %40, i64 0, i32 5
  store i32 69, i32* %41, align 8
  %42 = bitcast %struct.jpeg_common_struct* %0 to void (%struct.jpeg_common_struct*)***
  %43 = load void (%struct.jpeg_common_struct*)**, void (%struct.jpeg_common_struct*)*** %42, align 8
  %44 = load void (%struct.jpeg_common_struct*)*, void (%struct.jpeg_common_struct*)** %43, align 8
  tail call void %44(%struct.jpeg_common_struct* %0) #3
  br label %45

45:                                               ; preds = %34, %38
  %46 = getelementptr inbounds %struct.jvirt_barray_control, %struct.jvirt_barray_control* %1, i64 0, i32 9
  %47 = load i32, i32* %46, align 8
  %48 = icmp eq i32 %47, 0
  br i1 %48, label %119, label %49

49:                                               ; preds = %45
  %50 = getelementptr inbounds %struct.jvirt_barray_control, %struct.jvirt_barray_control* %1, i64 0, i32 2
  %51 = load i32, i32* %50, align 4
  %52 = zext i32 %51 to i64
  %53 = shl nuw nsw i64 %52, 7
  %54 = getelementptr inbounds %struct.jvirt_barray_control, %struct.jvirt_barray_control* %1, i64 0, i32 5
  %55 = getelementptr inbounds %struct.jvirt_barray_control, %struct.jvirt_barray_control* %1, i64 0, i32 4
  %56 = load i32, i32* %55, align 4
  %57 = icmp eq i32 %56, 0
  br i1 %57, label %118, label %58

58:                                               ; preds = %49
  %59 = zext i32 %56 to i64
  %60 = load i32, i32* %26, align 4
  %61 = zext i32 %60 to i64
  %62 = getelementptr inbounds %struct.jvirt_barray_control, %struct.jvirt_barray_control* %1, i64 0, i32 7
  %63 = getelementptr inbounds %struct.jvirt_barray_control, %struct.jvirt_barray_control* %1, i64 0, i32 12
  %64 = getelementptr inbounds %struct.jvirt_barray_control, %struct.jvirt_barray_control* %1, i64 0, i32 12, i32 1
  %65 = getelementptr inbounds %struct.jvirt_barray_control, %struct.jvirt_barray_control* %1, i64 0, i32 0
  %66 = load i32, i32* %54, align 8
  %67 = zext i32 %66 to i64
  %68 = icmp ugt i64 %59, %67
  %69 = select i1 %68, i64 %67, i64 %59
  %70 = load i32, i32* %62, align 8
  %71 = zext i32 %70 to i64
  %72 = sub nsw i64 %71, %61
  %73 = icmp slt i64 %69, %72
  %74 = select i1 %73, i64 %69, i64 %72
  %75 = load i32, i32* %7, align 8
  %76 = zext i32 %75 to i64
  %77 = sub nsw i64 %76, %61
  %78 = icmp slt i64 %74, %77
  %79 = select i1 %78, i64 %74, i64 %77
  %80 = icmp slt i64 %79, 1
  br i1 %80, label %118, label %81

81:                                               ; preds = %58
  %82 = mul nsw i64 %53, %61
  br label %83

83:                                               ; preds = %81, %99
  %84 = phi i64 [ %116, %99 ], [ %79, %81 ]
  %85 = phi i64 [ %100, %99 ], [ %82, %81 ]
  %86 = phi i64 [ %95, %99 ], [ 0, %81 ]
  %87 = mul nsw i64 %84, %53
  %88 = load void (%struct.jpeg_common_struct*, %struct.backing_store_struct*, i8*, i64, i64)*, void (%struct.jpeg_common_struct*, %struct.backing_store_struct*, i8*, i64, i64)** %64, align 8
  %89 = load [64 x i16]**, [64 x i16]*** %65, align 8
  %90 = getelementptr inbounds [64 x i16]*, [64 x i16]** %89, i64 %86
  %91 = bitcast [64 x i16]** %90 to i8**
  %92 = load i8*, i8** %91, align 8
  tail call void %88(%struct.jpeg_common_struct* %0, %struct.backing_store_struct* %63, i8* %92, i64 %85, i64 %87) #3
  %93 = load i32, i32* %54, align 8
  %94 = zext i32 %93 to i64
  %95 = add nuw nsw i64 %86, %94
  %96 = load i32, i32* %55, align 4
  %97 = zext i32 %96 to i64
  %98 = icmp ult i64 %95, %97
  br i1 %98, label %99, label %118

99:                                               ; preds = %83
  %100 = add nsw i64 %87, %85
  %101 = load i32, i32* %26, align 4
  %102 = sub nsw i64 %97, %95
  %103 = icmp sgt i64 %102, %94
  %104 = select i1 %103, i64 %94, i64 %102
  %105 = zext i32 %101 to i64
  %106 = add nuw nsw i64 %95, %105
  %107 = load i32, i32* %62, align 8
  %108 = zext i32 %107 to i64
  %109 = sub nsw i64 %108, %106
  %110 = icmp slt i64 %104, %109
  %111 = select i1 %110, i64 %104, i64 %109
  %112 = load i32, i32* %7, align 8
  %113 = zext i32 %112 to i64
  %114 = sub nsw i64 %113, %106
  %115 = icmp slt i64 %111, %114
  %116 = select i1 %115, i64 %111, i64 %114
  %117 = icmp slt i64 %116, 1
  br i1 %117, label %118, label %83

118:                                              ; preds = %83, %99, %58, %49
  store i32 0, i32* %46, align 8
  br label %119

119:                                              ; preds = %45, %118
  %120 = load i32, i32* %26, align 4
  %121 = icmp ult i32 %120, %2
  br i1 %121, label %122, label %125

122:                                              ; preds = %119
  %123 = getelementptr inbounds %struct.jvirt_barray_control, %struct.jvirt_barray_control* %1, i64 0, i32 4
  %124 = load i32, i32* %123, align 4
  br label %134

125:                                              ; preds = %119
  %126 = zext i32 %6 to i64
  %127 = getelementptr inbounds %struct.jvirt_barray_control, %struct.jvirt_barray_control* %1, i64 0, i32 4
  %128 = load i32, i32* %127, align 4
  %129 = zext i32 %128 to i64
  %130 = sub nsw i64 %126, %129
  %131 = icmp sgt i64 %130, 0
  %132 = select i1 %131, i64 %130, i64 0
  %133 = trunc i64 %132 to i32
  br label %134

134:                                              ; preds = %122, %125
  %135 = phi i32 [ %128, %125 ], [ %124, %122 ]
  %136 = phi i32 [ %133, %125 ], [ %2, %122 ]
  store i32 %136, i32* %26, align 4
  %137 = getelementptr inbounds %struct.jvirt_barray_control, %struct.jvirt_barray_control* %1, i64 0, i32 2
  %138 = load i32, i32* %137, align 4
  %139 = zext i32 %138 to i64
  %140 = shl nuw nsw i64 %139, 7
  %141 = getelementptr inbounds %struct.jvirt_barray_control, %struct.jvirt_barray_control* %1, i64 0, i32 5
  %142 = getelementptr inbounds %struct.jvirt_barray_control, %struct.jvirt_barray_control* %1, i64 0, i32 4
  %143 = icmp eq i32 %135, 0
  br i1 %143, label %203, label %144

144:                                              ; preds = %134
  %145 = zext i32 %135 to i64
  %146 = zext i32 %136 to i64
  %147 = getelementptr inbounds %struct.jvirt_barray_control, %struct.jvirt_barray_control* %1, i64 0, i32 7
  %148 = getelementptr inbounds %struct.jvirt_barray_control, %struct.jvirt_barray_control* %1, i64 0, i32 12
  %149 = getelementptr inbounds %struct.jvirt_barray_control, %struct.jvirt_barray_control* %1, i64 0, i32 0
  %150 = getelementptr inbounds %struct.backing_store_struct, %struct.backing_store_struct* %148, i64 0, i32 0
  %151 = load i32, i32* %141, align 8
  %152 = zext i32 %151 to i64
  %153 = icmp ugt i64 %145, %152
  %154 = select i1 %153, i64 %152, i64 %145
  %155 = load i32, i32* %147, align 8
  %156 = zext i32 %155 to i64
  %157 = sub nsw i64 %156, %146
  %158 = icmp slt i64 %154, %157
  %159 = select i1 %158, i64 %154, i64 %157
  %160 = load i32, i32* %7, align 8
  %161 = zext i32 %160 to i64
  %162 = sub nsw i64 %161, %146
  %163 = icmp slt i64 %159, %162
  %164 = select i1 %163, i64 %159, i64 %162
  %165 = icmp slt i64 %164, 1
  br i1 %165, label %203, label %166

166:                                              ; preds = %144
  %167 = mul nsw i64 %140, %146
  br label %168

168:                                              ; preds = %166, %184
  %169 = phi i64 [ %201, %184 ], [ %164, %166 ]
  %170 = phi i64 [ %185, %184 ], [ %167, %166 ]
  %171 = phi i64 [ %180, %184 ], [ 0, %166 ]
  %172 = mul nsw i64 %169, %140
  %173 = load void (%struct.jpeg_common_struct*, %struct.backing_store_struct*, i8*, i64, i64)*, void (%struct.jpeg_common_struct*, %struct.backing_store_struct*, i8*, i64, i64)** %150, align 8
  %174 = load [64 x i16]**, [64 x i16]*** %149, align 8
  %175 = getelementptr inbounds [64 x i16]*, [64 x i16]** %174, i64 %171
  %176 = bitcast [64 x i16]** %175 to i8**
  %177 = load i8*, i8** %176, align 8
  tail call void %173(%struct.jpeg_common_struct* %0, %struct.backing_store_struct* %148, i8* %177, i64 %170, i64 %172) #3
  %178 = load i32, i32* %141, align 8
  %179 = zext i32 %178 to i64
  %180 = add nuw nsw i64 %171, %179
  %181 = load i32, i32* %142, align 4
  %182 = zext i32 %181 to i64
  %183 = icmp ult i64 %180, %182
  br i1 %183, label %184, label %203

184:                                              ; preds = %168
  %185 = add nsw i64 %172, %170
  %186 = load i32, i32* %26, align 4
  %187 = sub nsw i64 %182, %180
  %188 = icmp sgt i64 %187, %179
  %189 = select i1 %188, i64 %179, i64 %187
  %190 = zext i32 %186 to i64
  %191 = add nuw nsw i64 %180, %190
  %192 = load i32, i32* %147, align 8
  %193 = zext i32 %192 to i64
  %194 = sub nsw i64 %193, %191
  %195 = icmp slt i64 %189, %194
  %196 = select i1 %195, i64 %189, i64 %194
  %197 = load i32, i32* %7, align 8
  %198 = zext i32 %197 to i64
  %199 = sub nsw i64 %198, %191
  %200 = icmp slt i64 %196, %199
  %201 = select i1 %200, i64 %196, i64 %199
  %202 = icmp slt i64 %201, 1
  br i1 %202, label %203, label %168

203:                                              ; preds = %184, %168, %144, %134, %29
  %204 = getelementptr inbounds %struct.jvirt_barray_control, %struct.jvirt_barray_control* %1, i64 0, i32 7
  %205 = load i32, i32* %204, align 8
  %206 = icmp ult i32 %205, %6
  br i1 %206, label %207, label %256

207:                                              ; preds = %203
  %208 = icmp ult i32 %205, %2
  %209 = icmp eq i32 %4, 0
  br i1 %208, label %210, label %218

210:                                              ; preds = %207
  br i1 %209, label %221, label %211

211:                                              ; preds = %210
  %212 = getelementptr inbounds %struct.jpeg_common_struct, %struct.jpeg_common_struct* %0, i64 0, i32 0
  %213 = load %struct.jpeg_error_mgr*, %struct.jpeg_error_mgr** %212, align 8
  %214 = getelementptr inbounds %struct.jpeg_error_mgr, %struct.jpeg_error_mgr* %213, i64 0, i32 5
  store i32 22, i32* %214, align 8
  %215 = bitcast %struct.jpeg_common_struct* %0 to void (%struct.jpeg_common_struct*)***
  %216 = load void (%struct.jpeg_common_struct*)**, void (%struct.jpeg_common_struct*)*** %215, align 8
  %217 = load void (%struct.jpeg_common_struct*)*, void (%struct.jpeg_common_struct*)** %216, align 8
  tail call void %217(%struct.jpeg_common_struct* %0) #3
  br label %219

218:                                              ; preds = %207
  br i1 %209, label %221, label %219

219:                                              ; preds = %218, %211
  %220 = phi i32 [ %2, %211 ], [ %205, %218 ]
  store i32 %6, i32* %204, align 8
  br label %221

221:                                              ; preds = %218, %210, %219
  %222 = phi i1 [ true, %219 ], [ false, %218 ], [ false, %210 ]
  %223 = phi i32 [ %220, %219 ], [ %205, %218 ], [ %2, %210 ]
  %224 = getelementptr inbounds %struct.jvirt_barray_control, %struct.jvirt_barray_control* %1, i64 0, i32 8
  %225 = load i32, i32* %224, align 4
  %226 = icmp eq i32 %225, 0
  br i1 %226, label %248, label %227

227:                                              ; preds = %221
  %228 = getelementptr inbounds %struct.jvirt_barray_control, %struct.jvirt_barray_control* %1, i64 0, i32 2
  %229 = load i32, i32* %228, align 4
  %230 = zext i32 %229 to i64
  %231 = shl nuw nsw i64 %230, 7
  %232 = load i32, i32* %26, align 4
  %233 = sub i32 %223, %232
  %234 = sub i32 %6, %232
  %235 = icmp ult i32 %233, %234
  br i1 %235, label %236, label %256

236:                                              ; preds = %227
  %237 = getelementptr inbounds %struct.jvirt_barray_control, %struct.jvirt_barray_control* %1, i64 0, i32 0
  %238 = zext i32 %233 to i64
  br label %239

239:                                              ; preds = %239, %236
  %240 = phi i64 [ %238, %236 ], [ %245, %239 ]
  %241 = load [64 x i16]**, [64 x i16]*** %237, align 8
  %242 = getelementptr inbounds [64 x i16]*, [64 x i16]** %241, i64 %240
  %243 = bitcast [64 x i16]** %242 to i8**
  %244 = load i8*, i8** %243, align 8
  tail call void @jzero_far(i8* %244, i64 %231) #3
  %245 = add nuw nsw i64 %240, 1
  %246 = trunc i64 %245 to i32
  %247 = icmp eq i32 %234, %246
  br i1 %247, label %256, label %239

248:                                              ; preds = %221
  br i1 %222, label %256, label %249

249:                                              ; preds = %248
  %250 = getelementptr inbounds %struct.jpeg_common_struct, %struct.jpeg_common_struct* %0, i64 0, i32 0
  %251 = load %struct.jpeg_error_mgr*, %struct.jpeg_error_mgr** %250, align 8
  %252 = getelementptr inbounds %struct.jpeg_error_mgr, %struct.jpeg_error_mgr* %251, i64 0, i32 5
  store i32 22, i32* %252, align 8
  %253 = bitcast %struct.jpeg_common_struct* %0 to void (%struct.jpeg_common_struct*)***
  %254 = load void (%struct.jpeg_common_struct*)**, void (%struct.jpeg_common_struct*)*** %253, align 8
  %255 = load void (%struct.jpeg_common_struct*)*, void (%struct.jpeg_common_struct*)** %254, align 8
  tail call void %255(%struct.jpeg_common_struct* %0) #3
  br label %256

256:                                              ; preds = %239, %227, %249, %248, %203
  %257 = icmp eq i32 %4, 0
  br i1 %257, label %260, label %258

258:                                              ; preds = %256
  %259 = getelementptr inbounds %struct.jvirt_barray_control, %struct.jvirt_barray_control* %1, i64 0, i32 9
  store i32 1, i32* %259, align 8
  br label %260

260:                                              ; preds = %256, %258
  %261 = getelementptr inbounds %struct.jvirt_barray_control, %struct.jvirt_barray_control* %1, i64 0, i32 0
  %262 = load [64 x i16]**, [64 x i16]*** %261, align 8
  %263 = load i32, i32* %26, align 4
  %264 = sub i32 %2, %263
  %265 = zext i32 %264 to i64
  %266 = getelementptr inbounds [64 x i16]*, [64 x i16]** %262, i64 %265
  ret [64 x i16]** %266
}

; Function Attrs: nounwind ssp uwtable
define internal void @free_pool(%struct.jpeg_common_struct*, i32) #0 {
  %3 = getelementptr inbounds %struct.jpeg_common_struct, %struct.jpeg_common_struct* %0, i64 0, i32 1
  %4 = bitcast %struct.jpeg_memory_mgr** %3 to %struct.my_memory_mgr**
  %5 = load %struct.my_memory_mgr*, %struct.my_memory_mgr** %4, align 8
  %6 = icmp ugt i32 %1, 1
  br i1 %6, label %7, label %16

7:                                                ; preds = %2
  %8 = getelementptr inbounds %struct.jpeg_common_struct, %struct.jpeg_common_struct* %0, i64 0, i32 0
  %9 = load %struct.jpeg_error_mgr*, %struct.jpeg_error_mgr** %8, align 8
  %10 = getelementptr inbounds %struct.jpeg_error_mgr, %struct.jpeg_error_mgr* %9, i64 0, i32 5
  store i32 14, i32* %10, align 8
  %11 = load %struct.jpeg_error_mgr*, %struct.jpeg_error_mgr** %8, align 8
  %12 = getelementptr inbounds %struct.jpeg_error_mgr, %struct.jpeg_error_mgr* %11, i64 0, i32 6, i32 0, i64 0
  store i32 %1, i32* %12, align 4
  %13 = bitcast %struct.jpeg_common_struct* %0 to void (%struct.jpeg_common_struct*)***
  %14 = load void (%struct.jpeg_common_struct*)**, void (%struct.jpeg_common_struct*)*** %13, align 8
  %15 = load void (%struct.jpeg_common_struct*)*, void (%struct.jpeg_common_struct*)** %14, align 8
  tail call void %15(%struct.jpeg_common_struct* %0) #3
  br label %53

16:                                               ; preds = %2
  %17 = icmp eq i32 %1, 1
  br i1 %17, label %18, label %53

18:                                               ; preds = %16
  %19 = getelementptr inbounds %struct.my_memory_mgr, %struct.my_memory_mgr* %5, i64 0, i32 3
  %20 = load %struct.jvirt_sarray_control*, %struct.jvirt_sarray_control** %19, align 8
  %21 = icmp eq %struct.jvirt_sarray_control* %20, null
  br i1 %21, label %35, label %22

22:                                               ; preds = %18, %31
  %23 = phi %struct.jvirt_sarray_control* [ %33, %31 ], [ %20, %18 ]
  %24 = getelementptr inbounds %struct.jvirt_sarray_control, %struct.jvirt_sarray_control* %23, i64 0, i32 10
  %25 = load i32, i32* %24, align 4
  %26 = icmp eq i32 %25, 0
  br i1 %26, label %31, label %27

27:                                               ; preds = %22
  store i32 0, i32* %24, align 4
  %28 = getelementptr inbounds %struct.jvirt_sarray_control, %struct.jvirt_sarray_control* %23, i64 0, i32 12
  %29 = getelementptr inbounds %struct.jvirt_sarray_control, %struct.jvirt_sarray_control* %23, i64 0, i32 12, i32 2
  %30 = load void (%struct.jpeg_common_struct*, %struct.backing_store_struct*)*, void (%struct.jpeg_common_struct*, %struct.backing_store_struct*)** %29, align 8
  tail call void %30(%struct.jpeg_common_struct* %0, %struct.backing_store_struct* %28) #3
  br label %31

31:                                               ; preds = %22, %27
  %32 = getelementptr inbounds %struct.jvirt_sarray_control, %struct.jvirt_sarray_control* %23, i64 0, i32 11
  %33 = load %struct.jvirt_sarray_control*, %struct.jvirt_sarray_control** %32, align 8
  %34 = icmp eq %struct.jvirt_sarray_control* %33, null
  br i1 %34, label %35, label %22

35:                                               ; preds = %31, %18
  store %struct.jvirt_sarray_control* null, %struct.jvirt_sarray_control** %19, align 8
  %36 = getelementptr inbounds %struct.my_memory_mgr, %struct.my_memory_mgr* %5, i64 0, i32 4
  %37 = load %struct.jvirt_barray_control*, %struct.jvirt_barray_control** %36, align 8
  %38 = icmp eq %struct.jvirt_barray_control* %37, null
  br i1 %38, label %52, label %39

39:                                               ; preds = %35, %48
  %40 = phi %struct.jvirt_barray_control* [ %50, %48 ], [ %37, %35 ]
  %41 = getelementptr inbounds %struct.jvirt_barray_control, %struct.jvirt_barray_control* %40, i64 0, i32 10
  %42 = load i32, i32* %41, align 4
  %43 = icmp eq i32 %42, 0
  br i1 %43, label %48, label %44

44:                                               ; preds = %39
  store i32 0, i32* %41, align 4
  %45 = getelementptr inbounds %struct.jvirt_barray_control, %struct.jvirt_barray_control* %40, i64 0, i32 12
  %46 = getelementptr inbounds %struct.jvirt_barray_control, %struct.jvirt_barray_control* %40, i64 0, i32 12, i32 2
  %47 = load void (%struct.jpeg_common_struct*, %struct.backing_store_struct*)*, void (%struct.jpeg_common_struct*, %struct.backing_store_struct*)** %46, align 8
  tail call void %47(%struct.jpeg_common_struct* %0, %struct.backing_store_struct* %45) #3
  br label %48

48:                                               ; preds = %39, %44
  %49 = getelementptr inbounds %struct.jvirt_barray_control, %struct.jvirt_barray_control* %40, i64 0, i32 11
  %50 = load %struct.jvirt_barray_control*, %struct.jvirt_barray_control** %49, align 8
  %51 = icmp eq %struct.jvirt_barray_control* %50, null
  br i1 %51, label %52, label %39

52:                                               ; preds = %48, %35
  store %struct.jvirt_barray_control* null, %struct.jvirt_barray_control** %36, align 8
  br label %53

53:                                               ; preds = %7, %52, %16
  %54 = sext i32 %1 to i64
  %55 = getelementptr inbounds %struct.my_memory_mgr, %struct.my_memory_mgr* %5, i64 0, i32 2, i64 %54
  %56 = load %struct.large_pool_struct*, %struct.large_pool_struct** %55, align 8
  store %struct.large_pool_struct* null, %struct.large_pool_struct** %55, align 8
  %57 = icmp eq %struct.large_pool_struct* %56, null
  br i1 %57, label %74, label %58

58:                                               ; preds = %53
  %59 = getelementptr inbounds %struct.my_memory_mgr, %struct.my_memory_mgr* %5, i64 0, i32 5
  br label %60

60:                                               ; preds = %58, %60
  %61 = phi %struct.large_pool_struct* [ %56, %58 ], [ %64, %60 ]
  %62 = bitcast %struct.large_pool_struct* %61 to i8*
  %63 = getelementptr inbounds %struct.large_pool_struct, %struct.large_pool_struct* %61, i64 0, i32 0
  %64 = load %struct.large_pool_struct*, %struct.large_pool_struct** %63, align 8
  %65 = getelementptr inbounds %struct.large_pool_struct, %struct.large_pool_struct* %61, i64 0, i32 1
  %66 = load i64, i64* %65, align 8
  %67 = getelementptr inbounds %struct.large_pool_struct, %struct.large_pool_struct* %61, i64 0, i32 2
  %68 = load i64, i64* %67, align 8
  %69 = add i64 %66, 24
  %70 = add i64 %69, %68
  tail call void @jpeg_free_large(%struct.jpeg_common_struct* %0, i8* %62, i64 %70) #3
  %71 = load i64, i64* %59, align 8
  %72 = sub i64 %71, %70
  store i64 %72, i64* %59, align 8
  %73 = icmp eq %struct.large_pool_struct* %64, null
  br i1 %73, label %74, label %60

74:                                               ; preds = %60, %53
  %75 = getelementptr inbounds %struct.my_memory_mgr, %struct.my_memory_mgr* %5, i64 0, i32 1, i64 %54
  %76 = load %struct.small_pool_struct*, %struct.small_pool_struct** %75, align 8
  store %struct.small_pool_struct* null, %struct.small_pool_struct** %75, align 8
  %77 = icmp eq %struct.small_pool_struct* %76, null
  br i1 %77, label %94, label %78

78:                                               ; preds = %74
  %79 = getelementptr inbounds %struct.my_memory_mgr, %struct.my_memory_mgr* %5, i64 0, i32 5
  br label %80

80:                                               ; preds = %78, %80
  %81 = phi %struct.small_pool_struct* [ %76, %78 ], [ %84, %80 ]
  %82 = bitcast %struct.small_pool_struct* %81 to i8*
  %83 = getelementptr inbounds %struct.small_pool_struct, %struct.small_pool_struct* %81, i64 0, i32 0
  %84 = load %struct.small_pool_struct*, %struct.small_pool_struct** %83, align 8
  %85 = getelementptr inbounds %struct.small_pool_struct, %struct.small_pool_struct* %81, i64 0, i32 1
  %86 = load i64, i64* %85, align 8
  %87 = getelementptr inbounds %struct.small_pool_struct, %struct.small_pool_struct* %81, i64 0, i32 2
  %88 = load i64, i64* %87, align 8
  %89 = add i64 %86, 24
  %90 = add i64 %89, %88
  tail call void @jpeg_free_small(%struct.jpeg_common_struct* %0, i8* %82, i64 %90) #3
  %91 = load i64, i64* %79, align 8
  %92 = sub i64 %91, %90
  store i64 %92, i64* %79, align 8
  %93 = icmp eq %struct.small_pool_struct* %84, null
  br i1 %93, label %94, label %80

94:                                               ; preds = %80, %74
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @self_destruct(%struct.jpeg_common_struct*) #0 {
  tail call void @free_pool(%struct.jpeg_common_struct* %0, i32 1)
  tail call void @free_pool(%struct.jpeg_common_struct* %0, i32 0)
  %2 = getelementptr inbounds %struct.jpeg_common_struct, %struct.jpeg_common_struct* %0, i64 0, i32 1
  %3 = bitcast %struct.jpeg_memory_mgr** %2 to i8**
  %4 = load i8*, i8** %3, align 8
  tail call void @jpeg_free_small(%struct.jpeg_common_struct* %0, i8* %4, i64 168) #3
  store %struct.jpeg_memory_mgr* null, %struct.jpeg_memory_mgr** %2, align 8
  tail call void @jpeg_mem_term(%struct.jpeg_common_struct* %0) #3
  ret void
}

declare i8* @jpeg_get_large(%struct.jpeg_common_struct*, i64) local_unnamed_addr #1

declare i64 @jpeg_mem_available(%struct.jpeg_common_struct*, i64, i64, i64) local_unnamed_addr #1

declare void @jpeg_open_backing_store(%struct.jpeg_common_struct*, %struct.backing_store_struct*, i64) local_unnamed_addr #1

declare void @jzero_far(i8*, i64) local_unnamed_addr #1

declare void @jpeg_free_large(%struct.jpeg_common_struct*, i8*, i64) local_unnamed_addr #1

declare void @jpeg_free_small(%struct.jpeg_common_struct*, i8*, i64) local_unnamed_addr #1

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #2

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = distinct !{!2, !3}
!3 = !{!"llvm.loop.unroll.disable"}
!4 = distinct !{!4, !3}
!5 = distinct !{!5, !3}
