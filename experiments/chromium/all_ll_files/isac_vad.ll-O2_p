; ModuleID = '../../third_party/webrtc/modules/audio_coding/codecs/isac/main/source/isac_vad.c'
source_filename = "../../third_party/webrtc/modules/audio_coding/codecs/isac/main/source/isac_vad.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%struct.PitchFiltstr = type { [190 x double], [5 x double], [1 x double], [1 x double] }
%struct.PitchAnalysisStruct = type { [72 x double], [5 x double], [2 x double], [24 x double], [24 x double], %struct.PitchFiltstr, %struct.PitchFiltstr, %struct.WeightFiltstr }
%struct.WeightFiltstr = type { [240 x double], [6 x double], [6 x double], [6 x double], [240 x double] }
%struct.PreFiltBankstr = type { [4 x double], [4 x double], [4 x double], [4 x double], [24 x double], [24 x double], [4 x float], [4 x float], [4 x float], [4 x float], [24 x float], [24 x float], [2 x double], [2 x float] }

@WebRtcIsac_kUpperApFactorsFloat = hidden local_unnamed_addr constant [2 x float] [float 0x3FA1C432C0000000, float 0x3FD87C84C0000000], align 4
@WebRtcIsac_kLowerApFactorsFloat = hidden local_unnamed_addr constant [2 x float] [float 0x3FC3C36120000000, float 0x3FE7CED920000000], align 4

; Function Attrs: nofree norecurse nounwind ssp uwtable writeonly
define hidden void @WebRtcIsac_InitPitchFilter(%struct.PitchFiltstr* nocapture) local_unnamed_addr #0 {
  %2 = getelementptr inbounds %struct.PitchFiltstr, %struct.PitchFiltstr* %0, i64 0, i32 2, i64 0
  %3 = bitcast %struct.PitchFiltstr* %0 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %3, i8 0, i64 1560, i1 false)
  %4 = bitcast double* %2 to <2 x double>*
  store <2 x double> <double 5.000000e+01, double 0.000000e+00>, <2 x double>* %4, align 8
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: nounwind ssp uwtable
define hidden void @WebRtcIsac_InitPitchAnalysis(%struct.PitchAnalysisStruct* nocapture) local_unnamed_addr #2 {
  %2 = getelementptr inbounds %struct.PitchAnalysisStruct, %struct.PitchAnalysisStruct* %0, i64 0, i32 5, i32 2, i64 0
  %3 = bitcast %struct.PitchAnalysisStruct* %0 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %3, i8 0, i64 2576, i1 false)
  store double 5.000000e+01, double* %2, align 8
  %4 = getelementptr inbounds %struct.PitchAnalysisStruct, %struct.PitchAnalysisStruct* %0, i64 0, i32 5, i32 3, i64 0
  %5 = getelementptr inbounds %struct.PitchAnalysisStruct, %struct.PitchAnalysisStruct* %0, i64 0, i32 6, i32 2, i64 0
  %6 = bitcast double* %4 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %6, i8 0, i64 1568, i1 false)
  store double 5.000000e+01, double* %5, align 8
  %7 = getelementptr inbounds %struct.PitchAnalysisStruct, %struct.PitchAnalysisStruct* %0, i64 0, i32 6, i32 3, i64 0
  %8 = bitcast double* %7 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %8, i8 0, i64 2072, i1 false)
  br label %9

9:                                                ; preds = %9, %1
  %10 = phi i64 [ 0, %1 ], [ %35, %9 ]
  %11 = phi double [ 5.000000e-01, %1 ], [ %34, %9 ]
  %12 = fmul double %11, 3.000000e-01
  %13 = fmul double %12, 0x3F71111111111111
  %14 = fmul double %11, 0x3FE6666666666666
  %15 = fmul double %11, %14
  %16 = fmul double %15, 0x3EF23456789ABCDF
  %17 = fadd double %13, %16
  %18 = fmul double %17, 0x400921FB53C8D4F1
  %19 = tail call double @sin(double %18) #5
  %20 = fmul double %19, %19
  %21 = getelementptr inbounds %struct.PitchAnalysisStruct, %struct.PitchAnalysisStruct* %0, i64 0, i32 7, i32 4, i64 %10
  store double %20, double* %21, align 8
  %22 = fadd double %11, 1.000000e+00
  %23 = or i64 %10, 1
  %24 = fmul double %22, 3.000000e-01
  %25 = fmul double %24, 0x3F71111111111111
  %26 = fmul double %22, 0x3FE6666666666666
  %27 = fmul double %22, %26
  %28 = fmul double %27, 0x3EF23456789ABCDF
  %29 = fadd double %25, %28
  %30 = fmul double %29, 0x400921FB53C8D4F1
  %31 = tail call double @sin(double %30) #5
  %32 = fmul double %31, %31
  %33 = getelementptr inbounds %struct.PitchAnalysisStruct, %struct.PitchAnalysisStruct* %0, i64 0, i32 7, i32 4, i64 %23
  store double %32, double* %33, align 8
  %34 = fadd double %22, 1.000000e+00
  %35 = add nuw nsw i64 %10, 2
  %36 = icmp eq i64 %35, 240
  br i1 %36, label %37, label %9

37:                                               ; preds = %9
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable writeonly
define hidden void @WebRtcIsac_InitPreFilterbank(%struct.PreFiltBankstr* nocapture) local_unnamed_addr #0 {
  %2 = bitcast %struct.PreFiltBankstr* %0 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %2, i8 0, i64 792, i1 false)
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden double @WebRtcIsac_LevDurb(double* nocapture, double* nocapture, double* nocapture readonly, i64) local_unnamed_addr #3 {
  store double 1.000000e+00, double* %0, align 8
  %5 = load double, double* %2, align 8
  %6 = fcmp olt double %5, 1.000000e-10
  br i1 %6, label %7, label %125

7:                                                ; preds = %4
  %8 = icmp eq i64 %3, 0
  br i1 %8, label %289, label %9

9:                                                ; preds = %7
  %10 = icmp ult i64 %3, 4
  br i1 %10, label %93, label %11

11:                                               ; preds = %9
  %12 = getelementptr double, double* %1, i64 %3
  %13 = getelementptr double, double* %0, i64 1
  %14 = add i64 %3, 1
  %15 = getelementptr double, double* %0, i64 %14
  %16 = icmp ugt double* %15, %1
  %17 = icmp ult double* %13, %12
  %18 = and i1 %16, %17
  br i1 %18, label %93, label %19

19:                                               ; preds = %11
  %20 = and i64 %3, -4
  %21 = add i64 %20, -4
  %22 = lshr exact i64 %21, 2
  %23 = add nuw nsw i64 %22, 1
  %24 = and i64 %23, 3
  %25 = icmp ult i64 %21, 12
  br i1 %25, label %73, label %26

26:                                               ; preds = %19
  %27 = sub nsw i64 %23, %24
  br label %28

28:                                               ; preds = %28, %26
  %29 = phi i64 [ 0, %26 ], [ %70, %28 ]
  %30 = phi i64 [ %27, %26 ], [ %71, %28 ]
  %31 = getelementptr inbounds double, double* %1, i64 %29
  %32 = bitcast double* %31 to <2 x double>*
  store <2 x double> zeroinitializer, <2 x double>* %32, align 8, !alias.scope !2, !noalias !5
  %33 = getelementptr inbounds double, double* %31, i64 2
  %34 = bitcast double* %33 to <2 x double>*
  store <2 x double> zeroinitializer, <2 x double>* %34, align 8, !alias.scope !2, !noalias !5
  %35 = or i64 %29, 1
  %36 = getelementptr inbounds double, double* %0, i64 %35
  %37 = bitcast double* %36 to <2 x double>*
  store <2 x double> zeroinitializer, <2 x double>* %37, align 8, !alias.scope !5
  %38 = getelementptr inbounds double, double* %36, i64 2
  %39 = bitcast double* %38 to <2 x double>*
  store <2 x double> zeroinitializer, <2 x double>* %39, align 8, !alias.scope !5
  %40 = or i64 %29, 4
  %41 = getelementptr inbounds double, double* %1, i64 %40
  %42 = bitcast double* %41 to <2 x double>*
  store <2 x double> zeroinitializer, <2 x double>* %42, align 8, !alias.scope !2, !noalias !5
  %43 = getelementptr inbounds double, double* %41, i64 2
  %44 = bitcast double* %43 to <2 x double>*
  store <2 x double> zeroinitializer, <2 x double>* %44, align 8, !alias.scope !2, !noalias !5
  %45 = or i64 %29, 5
  %46 = getelementptr inbounds double, double* %0, i64 %45
  %47 = bitcast double* %46 to <2 x double>*
  store <2 x double> zeroinitializer, <2 x double>* %47, align 8, !alias.scope !5
  %48 = getelementptr inbounds double, double* %46, i64 2
  %49 = bitcast double* %48 to <2 x double>*
  store <2 x double> zeroinitializer, <2 x double>* %49, align 8, !alias.scope !5
  %50 = or i64 %29, 8
  %51 = getelementptr inbounds double, double* %1, i64 %50
  %52 = bitcast double* %51 to <2 x double>*
  store <2 x double> zeroinitializer, <2 x double>* %52, align 8, !alias.scope !2, !noalias !5
  %53 = getelementptr inbounds double, double* %51, i64 2
  %54 = bitcast double* %53 to <2 x double>*
  store <2 x double> zeroinitializer, <2 x double>* %54, align 8, !alias.scope !2, !noalias !5
  %55 = or i64 %29, 9
  %56 = getelementptr inbounds double, double* %0, i64 %55
  %57 = bitcast double* %56 to <2 x double>*
  store <2 x double> zeroinitializer, <2 x double>* %57, align 8, !alias.scope !5
  %58 = getelementptr inbounds double, double* %56, i64 2
  %59 = bitcast double* %58 to <2 x double>*
  store <2 x double> zeroinitializer, <2 x double>* %59, align 8, !alias.scope !5
  %60 = or i64 %29, 12
  %61 = getelementptr inbounds double, double* %1, i64 %60
  %62 = bitcast double* %61 to <2 x double>*
  store <2 x double> zeroinitializer, <2 x double>* %62, align 8, !alias.scope !2, !noalias !5
  %63 = getelementptr inbounds double, double* %61, i64 2
  %64 = bitcast double* %63 to <2 x double>*
  store <2 x double> zeroinitializer, <2 x double>* %64, align 8, !alias.scope !2, !noalias !5
  %65 = or i64 %29, 13
  %66 = getelementptr inbounds double, double* %0, i64 %65
  %67 = bitcast double* %66 to <2 x double>*
  store <2 x double> zeroinitializer, <2 x double>* %67, align 8, !alias.scope !5
  %68 = getelementptr inbounds double, double* %66, i64 2
  %69 = bitcast double* %68 to <2 x double>*
  store <2 x double> zeroinitializer, <2 x double>* %69, align 8, !alias.scope !5
  %70 = add i64 %29, 16
  %71 = add i64 %30, -4
  %72 = icmp eq i64 %71, 0
  br i1 %72, label %73, label %28, !llvm.loop !7

73:                                               ; preds = %28, %19
  %74 = phi i64 [ 0, %19 ], [ %70, %28 ]
  %75 = icmp eq i64 %24, 0
  br i1 %75, label %91, label %76

76:                                               ; preds = %73, %76
  %77 = phi i64 [ %88, %76 ], [ %74, %73 ]
  %78 = phi i64 [ %89, %76 ], [ %24, %73 ]
  %79 = getelementptr inbounds double, double* %1, i64 %77
  %80 = bitcast double* %79 to <2 x double>*
  store <2 x double> zeroinitializer, <2 x double>* %80, align 8, !alias.scope !2, !noalias !5
  %81 = getelementptr inbounds double, double* %79, i64 2
  %82 = bitcast double* %81 to <2 x double>*
  store <2 x double> zeroinitializer, <2 x double>* %82, align 8, !alias.scope !2, !noalias !5
  %83 = or i64 %77, 1
  %84 = getelementptr inbounds double, double* %0, i64 %83
  %85 = bitcast double* %84 to <2 x double>*
  store <2 x double> zeroinitializer, <2 x double>* %85, align 8, !alias.scope !5
  %86 = getelementptr inbounds double, double* %84, i64 2
  %87 = bitcast double* %86 to <2 x double>*
  store <2 x double> zeroinitializer, <2 x double>* %87, align 8, !alias.scope !5
  %88 = add i64 %77, 4
  %89 = add i64 %78, -1
  %90 = icmp eq i64 %89, 0
  br i1 %90, label %91, label %76, !llvm.loop !9

91:                                               ; preds = %76, %73
  %92 = icmp eq i64 %20, %3
  br i1 %92, label %289, label %93

93:                                               ; preds = %91, %11, %9
  %94 = phi i64 [ 0, %11 ], [ 0, %9 ], [ %20, %91 ]
  %95 = xor i64 %94, -1
  %96 = add i64 %95, %3
  %97 = and i64 %3, 3
  %98 = icmp eq i64 %97, 0
  br i1 %98, label %107, label %99

99:                                               ; preds = %93, %99
  %100 = phi i64 [ %103, %99 ], [ %94, %93 ]
  %101 = phi i64 [ %105, %99 ], [ %97, %93 ]
  %102 = getelementptr inbounds double, double* %1, i64 %100
  store double 0.000000e+00, double* %102, align 8
  %103 = add nuw i64 %100, 1
  %104 = getelementptr inbounds double, double* %0, i64 %103
  store double 0.000000e+00, double* %104, align 8
  %105 = add i64 %101, -1
  %106 = icmp eq i64 %105, 0
  br i1 %106, label %107, label %99, !llvm.loop !11

107:                                              ; preds = %99, %93
  %108 = phi i64 [ %94, %93 ], [ %103, %99 ]
  %109 = icmp ult i64 %96, 3
  br i1 %109, label %289, label %110

110:                                              ; preds = %107, %110
  %111 = phi i64 [ %122, %110 ], [ %108, %107 ]
  %112 = getelementptr inbounds double, double* %1, i64 %111
  store double 0.000000e+00, double* %112, align 8
  %113 = add nuw i64 %111, 1
  %114 = getelementptr inbounds double, double* %0, i64 %113
  store double 0.000000e+00, double* %114, align 8
  %115 = getelementptr inbounds double, double* %1, i64 %113
  store double 0.000000e+00, double* %115, align 8
  %116 = add nuw i64 %111, 2
  %117 = getelementptr inbounds double, double* %0, i64 %116
  store double 0.000000e+00, double* %117, align 8
  %118 = getelementptr inbounds double, double* %1, i64 %116
  store double 0.000000e+00, double* %118, align 8
  %119 = add nuw i64 %111, 3
  %120 = getelementptr inbounds double, double* %0, i64 %119
  store double 0.000000e+00, double* %120, align 8
  %121 = getelementptr inbounds double, double* %1, i64 %119
  store double 0.000000e+00, double* %121, align 8
  %122 = add nuw i64 %111, 4
  %123 = getelementptr inbounds double, double* %0, i64 %122
  store double 0.000000e+00, double* %123, align 8
  %124 = icmp eq i64 %122, %3
  br i1 %124, label %289, label %110, !llvm.loop !12

125:                                              ; preds = %4
  %126 = getelementptr inbounds double, double* %2, i64 1
  %127 = load double, double* %126, align 8
  %128 = fsub double -0.000000e+00, %127
  %129 = fdiv double %128, %5
  store double %129, double* %1, align 8
  %130 = getelementptr inbounds double, double* %0, i64 1
  store double %129, double* %130, align 8
  %131 = load double, double* %2, align 8
  %132 = load double, double* %126, align 8
  %133 = load double, double* %1, align 8
  %134 = fmul double %132, %133
  %135 = fadd double %131, %134
  %136 = icmp ugt i64 %3, 1
  br i1 %136, label %137, label %289

137:                                              ; preds = %125
  %138 = getelementptr inbounds double, double* %0, i64 1
  br label %139

139:                                              ; preds = %137, %282
  %140 = phi i64 [ 0, %137 ], [ %288, %282 ]
  %141 = phi i64 [ 2, %137 ], [ %286, %282 ]
  %142 = phi i64 [ 1, %137 ], [ %148, %282 ]
  %143 = phi double [ %135, %137 ], [ %218, %282 ]
  %144 = add i64 %140, 2
  %145 = lshr i64 %144, 1
  %146 = add nsw i64 %145, -1
  %147 = add i64 %140, 1
  %148 = add nuw i64 %142, 1
  %149 = getelementptr inbounds double, double* %2, i64 %148
  %150 = load double, double* %149, align 8
  %151 = and i64 %147, 3
  %152 = icmp ult i64 %140, 3
  br i1 %152, label %193, label %153

153:                                              ; preds = %139
  %154 = sub i64 %147, %151
  br label %155

155:                                              ; preds = %155, %153
  %156 = phi i64 [ 0, %153 ], [ %183, %155 ]
  %157 = phi double [ %150, %153 ], [ %190, %155 ]
  %158 = phi i64 [ %154, %153 ], [ %191, %155 ]
  %159 = or i64 %156, 1
  %160 = getelementptr inbounds double, double* %0, i64 %159
  %161 = load double, double* %160, align 8
  %162 = sub i64 %142, %156
  %163 = getelementptr inbounds double, double* %2, i64 %162
  %164 = load double, double* %163, align 8
  %165 = fmul double %161, %164
  %166 = fadd double %157, %165
  %167 = or i64 %156, 2
  %168 = getelementptr inbounds double, double* %0, i64 %167
  %169 = load double, double* %168, align 8
  %170 = sub i64 %142, %159
  %171 = getelementptr inbounds double, double* %2, i64 %170
  %172 = load double, double* %171, align 8
  %173 = fmul double %169, %172
  %174 = fadd double %166, %173
  %175 = or i64 %156, 3
  %176 = getelementptr inbounds double, double* %0, i64 %175
  %177 = load double, double* %176, align 8
  %178 = sub i64 %142, %167
  %179 = getelementptr inbounds double, double* %2, i64 %178
  %180 = load double, double* %179, align 8
  %181 = fmul double %177, %180
  %182 = fadd double %174, %181
  %183 = add nuw i64 %156, 4
  %184 = getelementptr inbounds double, double* %0, i64 %183
  %185 = load double, double* %184, align 8
  %186 = sub i64 %142, %175
  %187 = getelementptr inbounds double, double* %2, i64 %186
  %188 = load double, double* %187, align 8
  %189 = fmul double %185, %188
  %190 = fadd double %182, %189
  %191 = add i64 %158, -4
  %192 = icmp eq i64 %191, 0
  br i1 %192, label %193, label %155

193:                                              ; preds = %155, %139
  %194 = phi double [ undef, %139 ], [ %190, %155 ]
  %195 = phi i64 [ 0, %139 ], [ %183, %155 ]
  %196 = phi double [ %150, %139 ], [ %190, %155 ]
  %197 = icmp eq i64 %151, 0
  br i1 %197, label %212, label %198

198:                                              ; preds = %193, %198
  %199 = phi i64 [ %202, %198 ], [ %195, %193 ]
  %200 = phi double [ %209, %198 ], [ %196, %193 ]
  %201 = phi i64 [ %210, %198 ], [ %151, %193 ]
  %202 = add nuw i64 %199, 1
  %203 = getelementptr inbounds double, double* %0, i64 %202
  %204 = load double, double* %203, align 8
  %205 = sub i64 %142, %199
  %206 = getelementptr inbounds double, double* %2, i64 %205
  %207 = load double, double* %206, align 8
  %208 = fmul double %204, %207
  %209 = fadd double %200, %208
  %210 = add i64 %201, -1
  %211 = icmp eq i64 %210, 0
  br i1 %211, label %212, label %198, !llvm.loop !13

212:                                              ; preds = %198, %193
  %213 = phi double [ %194, %193 ], [ %209, %198 ]
  %214 = fsub double -0.000000e+00, %213
  %215 = fdiv double %214, %143
  %216 = getelementptr inbounds double, double* %1, i64 %142
  store double %215, double* %216, align 8
  %217 = fmul double %213, %215
  %218 = fadd double %143, %217
  %219 = icmp ult i64 %148, 2
  br i1 %219, label %235, label %220

220:                                              ; preds = %212
  %221 = load double, double* %138, align 8
  %222 = getelementptr inbounds double, double* %0, i64 %142
  %223 = load double, double* %222, align 8
  %224 = fmul double %215, %223
  %225 = fadd double %221, %224
  %226 = fmul double %221, %215
  %227 = fadd double %223, %226
  store double %227, double* %222, align 8
  store double %225, double* %138, align 8
  %228 = and i64 %141, -2
  %229 = icmp eq i64 %228, 2
  br i1 %229, label %279, label %230

230:                                              ; preds = %220
  %231 = and i64 %146, 1
  %232 = icmp eq i64 %145, 2
  br i1 %232, label %264, label %233

233:                                              ; preds = %230
  %234 = sub i64 %146, %231
  br label %237

235:                                              ; preds = %212
  %236 = bitcast double %215 to i64
  br label %282

237:                                              ; preds = %237, %233
  %238 = phi i64 [ 1, %233 ], [ %252, %237 ]
  %239 = phi i64 [ %234, %233 ], [ %262, %237 ]
  %240 = load double, double* %216, align 8
  %241 = add nuw nsw i64 %238, 1
  %242 = getelementptr inbounds double, double* %0, i64 %241
  %243 = load double, double* %242, align 8
  %244 = sub i64 %142, %238
  %245 = getelementptr inbounds double, double* %0, i64 %244
  %246 = load double, double* %245, align 8
  %247 = fmul double %240, %246
  %248 = fadd double %243, %247
  %249 = fmul double %243, %240
  %250 = fadd double %246, %249
  store double %250, double* %245, align 8
  store double %248, double* %242, align 8
  %251 = load double, double* %216, align 8
  %252 = add nuw nsw i64 %238, 2
  %253 = getelementptr inbounds double, double* %0, i64 %252
  %254 = load double, double* %253, align 8
  %255 = sub i64 %142, %241
  %256 = getelementptr inbounds double, double* %0, i64 %255
  %257 = load double, double* %256, align 8
  %258 = fmul double %251, %257
  %259 = fadd double %254, %258
  %260 = fmul double %254, %251
  %261 = fadd double %257, %260
  store double %261, double* %256, align 8
  store double %259, double* %253, align 8
  %262 = add i64 %239, -2
  %263 = icmp eq i64 %262, 0
  br i1 %263, label %264, label %237

264:                                              ; preds = %237, %230
  %265 = phi i64 [ 1, %230 ], [ %252, %237 ]
  %266 = icmp eq i64 %231, 0
  br i1 %266, label %279, label %267

267:                                              ; preds = %264
  %268 = load double, double* %216, align 8
  %269 = add nuw nsw i64 %265, 1
  %270 = getelementptr inbounds double, double* %0, i64 %269
  %271 = load double, double* %270, align 8
  %272 = sub i64 %142, %265
  %273 = getelementptr inbounds double, double* %0, i64 %272
  %274 = load double, double* %273, align 8
  %275 = fmul double %268, %274
  %276 = fadd double %271, %275
  %277 = fmul double %271, %268
  %278 = fadd double %274, %277
  store double %278, double* %273, align 8
  store double %276, double* %270, align 8
  br label %279

279:                                              ; preds = %267, %264, %220
  %280 = bitcast double* %216 to i64*
  %281 = load i64, i64* %280, align 8
  br label %282

282:                                              ; preds = %235, %279
  %283 = phi i64 [ %281, %279 ], [ %236, %235 ]
  %284 = getelementptr inbounds double, double* %0, i64 %148
  %285 = bitcast double* %284 to i64*
  store i64 %283, i64* %285, align 8
  %286 = add i64 %141, 1
  %287 = icmp eq i64 %141, %3
  %288 = add i64 %140, 1
  br i1 %287, label %289, label %139

289:                                              ; preds = %282, %107, %110, %91, %7, %125
  %290 = phi double [ 0.000000e+00, %7 ], [ %135, %125 ], [ 0.000000e+00, %91 ], [ 0.000000e+00, %110 ], [ 0.000000e+00, %107 ], [ %218, %282 ]
  ret double %290
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @WebRtcIsac_AllPassFilter2Float(float* nocapture, float* nocapture readonly, i32, i32, float* nocapture) local_unnamed_addr #3 {
  %6 = icmp sgt i32 %3, 0
  br i1 %6, label %7, label %57

7:                                                ; preds = %5
  %8 = icmp sgt i32 %2, 0
  %9 = zext i32 %3 to i64
  %10 = zext i32 %2 to i64
  %11 = and i64 %10, 1
  %12 = icmp eq i32 %2, 1
  %13 = sub nsw i64 %10, %11
  %14 = icmp eq i64 %11, 0
  br label %15

15:                                               ; preds = %54, %7
  %16 = phi i64 [ 0, %7 ], [ %55, %54 ]
  br i1 %8, label %17, label %54

17:                                               ; preds = %15
  %18 = getelementptr inbounds float, float* %4, i64 %16
  %19 = getelementptr inbounds float, float* %1, i64 %16
  br i1 %12, label %43, label %20

20:                                               ; preds = %17, %20
  %21 = phi i64 [ %40, %20 ], [ 0, %17 ]
  %22 = phi i64 [ %41, %20 ], [ %13, %17 ]
  %23 = load float, float* %18, align 4
  %24 = load float, float* %19, align 4
  %25 = getelementptr inbounds float, float* %0, i64 %21
  %26 = load float, float* %25, align 4
  %27 = fmul float %24, %26
  %28 = fadd float %23, %27
  %29 = fmul float %24, %28
  %30 = fsub float %26, %29
  store float %30, float* %18, align 4
  store float %28, float* %25, align 4
  %31 = or i64 %21, 1
  %32 = load float, float* %18, align 4
  %33 = load float, float* %19, align 4
  %34 = getelementptr inbounds float, float* %0, i64 %31
  %35 = load float, float* %34, align 4
  %36 = fmul float %33, %35
  %37 = fadd float %32, %36
  %38 = fmul float %33, %37
  %39 = fsub float %35, %38
  store float %39, float* %18, align 4
  store float %37, float* %34, align 4
  %40 = add nuw nsw i64 %21, 2
  %41 = add i64 %22, -2
  %42 = icmp eq i64 %41, 0
  br i1 %42, label %43, label %20

43:                                               ; preds = %20, %17
  %44 = phi i64 [ 0, %17 ], [ %40, %20 ]
  br i1 %14, label %54, label %45

45:                                               ; preds = %43
  %46 = load float, float* %18, align 4
  %47 = load float, float* %19, align 4
  %48 = getelementptr inbounds float, float* %0, i64 %44
  %49 = load float, float* %48, align 4
  %50 = fmul float %47, %49
  %51 = fadd float %46, %50
  %52 = fmul float %47, %51
  %53 = fsub float %49, %52
  store float %53, float* %18, align 4
  store float %51, float* %48, align 4
  br label %54

54:                                               ; preds = %45, %43, %15
  %55 = add nuw nsw i64 %16, 1
  %56 = icmp eq i64 %55, %9
  br i1 %56, label %57, label %15

57:                                               ; preds = %54, %5
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @WebRtcIsac_SplitAndFilterFloat(float* nocapture readonly, float* nocapture, float* nocapture, double* nocapture, double* nocapture, %struct.PreFiltBankstr* nocapture) local_unnamed_addr #2 {
  %7 = alloca [4 x float], align 16
  %8 = bitcast [4 x float]* %7 to i8*
  %9 = alloca [4 x float], align 16
  %10 = bitcast [4 x float]* %9 to i8*
  %11 = alloca [4 x float], align 16
  %12 = bitcast [4 x float]* %11 to i8*
  %13 = alloca [492 x float], align 16
  %14 = alloca [492 x float], align 16
  %15 = alloca [492 x float], align 16
  %16 = alloca [480 x float], align 16
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %8) #5
  %17 = getelementptr inbounds [4 x float], [4 x float]* %7, i64 0, i64 0
  %18 = getelementptr inbounds [4 x float], [4 x float]* %7, i64 0, i64 1
  %19 = getelementptr inbounds [4 x float], [4 x float]* %7, i64 0, i64 2
  %20 = getelementptr inbounds [4 x float], [4 x float]* %7, i64 0, i64 3
  %21 = bitcast [4 x float]* %7 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %21, i8 -1, i64 16, i1 false)
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %10) #5
  %22 = getelementptr inbounds [4 x float], [4 x float]* %9, i64 0, i64 0
  %23 = getelementptr inbounds [4 x float], [4 x float]* %9, i64 0, i64 1
  %24 = getelementptr inbounds [4 x float], [4 x float]* %9, i64 0, i64 2
  %25 = getelementptr inbounds [4 x float], [4 x float]* %9, i64 0, i64 3
  %26 = bitcast [4 x float]* %9 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %26, i8 -1, i64 16, i1 false)
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %12) #5
  %27 = getelementptr inbounds [4 x float], [4 x float]* %11, i64 0, i64 0
  %28 = getelementptr inbounds [4 x float], [4 x float]* %11, i64 0, i64 1
  %29 = getelementptr inbounds [4 x float], [4 x float]* %11, i64 0, i64 2
  %30 = getelementptr inbounds [4 x float], [4 x float]* %11, i64 0, i64 3
  %31 = bitcast [492 x float]* %13 to i8*
  %32 = bitcast [4 x float]* %11 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %32, i8 -1, i64 16, i1 false)
  call void @llvm.lifetime.start.p0i8(i64 1968, i8* nonnull %31) #5
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %31, i8 -1, i64 1968, i1 false)
  %33 = bitcast [492 x float]* %14 to i8*
  call void @llvm.lifetime.start.p0i8(i64 1968, i8* nonnull %33) #5
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %33, i8 -1, i64 1968, i1 false)
  %34 = bitcast [492 x float]* %15 to i8*
  call void @llvm.lifetime.start.p0i8(i64 1968, i8* nonnull %34) #5
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %34, i8 -1, i64 1968, i1 false)
  %35 = bitcast [480 x float]* %16 to i8*
  call void @llvm.lifetime.start.p0i8(i64 1920, i8* nonnull %35) #5
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %35, i8 -1, i64 1920, i1 false)
  %36 = getelementptr inbounds %struct.PreFiltBankstr, %struct.PreFiltBankstr* %5, i64 0, i32 13, i64 0
  %37 = getelementptr inbounds %struct.PreFiltBankstr, %struct.PreFiltBankstr* %5, i64 0, i32 13, i64 1
  %38 = load float, float* %36, align 8
  %39 = load float, float* %37, align 4
  br label %40

40:                                               ; preds = %40, %6
  %41 = phi float [ %39, %6 ], [ %42, %40 ]
  %42 = phi float [ %38, %6 ], [ %54, %40 ]
  %43 = phi i64 [ 0, %6 ], [ %55, %40 ]
  %44 = getelementptr inbounds float, float* %0, i64 %43
  %45 = load float, float* %44, align 4
  %46 = fmul float %42, 0x3FAA1F10C0000000
  %47 = fsub float %45, %46
  %48 = fmul float %41, 0x3FA9ADE520000000
  %49 = fadd float %47, %48
  %50 = getelementptr inbounds [480 x float], [480 x float]* %16, i64 0, i64 %43
  store float %49, float* %50, align 4
  %51 = fmul float %42, 0x3FFF2EF040000000
  %52 = fadd float %45, %51
  %53 = fmul float %41, 0x3FEE6521A0000000
  %54 = fsub float %52, %53
  store float %42, float* %37, align 4
  store float %54, float* %36, align 8
  %55 = add nuw nsw i64 %43, 1
  %56 = icmp eq i64 %55, 480
  br i1 %56, label %57, label %40

57:                                               ; preds = %40
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %8, i8 0, i64 16, i1 false)
  br label %58

58:                                               ; preds = %58, %57
  %59 = phi i64 [ 0, %57 ], [ %99, %58 ]
  %60 = shl nuw nsw i64 %59, 1
  %61 = sub nuw nsw i64 479, %60
  %62 = getelementptr inbounds [480 x float], [480 x float]* %16, i64 0, i64 %61
  %63 = bitcast float* %62 to i32*
  %64 = load i32, i32* %63, align 4
  %65 = getelementptr inbounds [492 x float], [492 x float]* %13, i64 0, i64 %59
  %66 = bitcast float* %65 to i32*
  store i32 %64, i32* %66, align 4
  %67 = add nuw nsw i64 %59, 1
  %68 = shl nuw nsw i64 %67, 1
  %69 = sub nuw nsw i64 479, %68
  %70 = getelementptr inbounds [480 x float], [480 x float]* %16, i64 0, i64 %69
  %71 = bitcast float* %70 to i32*
  %72 = load i32, i32* %71, align 4
  %73 = getelementptr inbounds [492 x float], [492 x float]* %13, i64 0, i64 %67
  %74 = bitcast float* %73 to i32*
  store i32 %72, i32* %74, align 4
  %75 = add nuw nsw i64 %59, 2
  %76 = shl nuw nsw i64 %75, 1
  %77 = sub nuw nsw i64 479, %76
  %78 = getelementptr inbounds [480 x float], [480 x float]* %16, i64 0, i64 %77
  %79 = bitcast float* %78 to i32*
  %80 = load i32, i32* %79, align 4
  %81 = getelementptr inbounds [492 x float], [492 x float]* %13, i64 0, i64 %75
  %82 = bitcast float* %81 to i32*
  store i32 %80, i32* %82, align 4
  %83 = add nuw nsw i64 %59, 3
  %84 = shl nuw nsw i64 %83, 1
  %85 = sub nuw nsw i64 479, %84
  %86 = getelementptr inbounds [480 x float], [480 x float]* %16, i64 0, i64 %85
  %87 = bitcast float* %86 to i32*
  %88 = load i32, i32* %87, align 4
  %89 = getelementptr inbounds [492 x float], [492 x float]* %13, i64 0, i64 %83
  %90 = bitcast float* %89 to i32*
  store i32 %88, i32* %90, align 4
  %91 = add nuw nsw i64 %59, 4
  %92 = shl nuw nsw i64 %91, 1
  %93 = sub nuw nsw i64 479, %92
  %94 = getelementptr inbounds [480 x float], [480 x float]* %16, i64 0, i64 %93
  %95 = bitcast float* %94 to i32*
  %96 = load i32, i32* %95, align 4
  %97 = getelementptr inbounds [492 x float], [492 x float]* %13, i64 0, i64 %91
  %98 = bitcast float* %97 to i32*
  store i32 %96, i32* %98, align 4
  %99 = add nuw nsw i64 %59, 5
  %100 = icmp eq i64 %99, 240
  br i1 %100, label %101, label %58

101:                                              ; preds = %58, %101
  %102 = phi float [ %123, %101 ], [ 0.000000e+00, %58 ]
  %103 = phi i64 [ %124, %101 ], [ 0, %58 ]
  %104 = getelementptr inbounds [492 x float], [492 x float]* %13, i64 0, i64 %103
  %105 = load float, float* %104, align 4
  %106 = fmul float %105, 0x3FA1C432C0000000
  %107 = fadd float %102, %106
  %108 = fmul float %107, 0x3FA1C432C0000000
  %109 = fsub float %105, %108
  store float %107, float* %104, align 4
  %110 = add nuw nsw i64 %103, 1
  %111 = getelementptr inbounds [492 x float], [492 x float]* %13, i64 0, i64 %110
  %112 = load float, float* %111, align 4
  %113 = fmul float %112, 0x3FA1C432C0000000
  %114 = fadd float %109, %113
  %115 = fmul float %114, 0x3FA1C432C0000000
  %116 = fsub float %112, %115
  store float %114, float* %111, align 4
  %117 = add nuw nsw i64 %103, 2
  %118 = getelementptr inbounds [492 x float], [492 x float]* %13, i64 0, i64 %117
  %119 = load float, float* %118, align 4
  %120 = fmul float %119, 0x3FA1C432C0000000
  %121 = fadd float %116, %120
  %122 = fmul float %121, 0x3FA1C432C0000000
  %123 = fsub float %119, %122
  store float %121, float* %118, align 4
  %124 = add nuw nsw i64 %103, 3
  %125 = icmp eq i64 %124, 240
  br i1 %125, label %126, label %101

126:                                              ; preds = %101
  store float %123, float* %17, align 16
  br label %1054

127:                                              ; preds = %127, %1180
  %128 = phi float [ %123, %1180 ], [ %149, %127 ]
  %129 = phi i64 [ 0, %1180 ], [ %150, %127 ]
  %130 = getelementptr inbounds %struct.PreFiltBankstr, %struct.PreFiltBankstr* %5, i64 0, i32 10, i64 %129
  %131 = load float, float* %130, align 4
  %132 = fmul float %131, 0x3FA1C432C0000000
  %133 = fadd float %128, %132
  %134 = fmul float %133, 0x3FA1C432C0000000
  %135 = fsub float %131, %134
  store float %133, float* %130, align 4
  %136 = add nuw nsw i64 %129, 1
  %137 = getelementptr inbounds %struct.PreFiltBankstr, %struct.PreFiltBankstr* %5, i64 0, i32 10, i64 %136
  %138 = load float, float* %137, align 4
  %139 = fmul float %138, 0x3FA1C432C0000000
  %140 = fadd float %135, %139
  %141 = fmul float %140, 0x3FA1C432C0000000
  %142 = fsub float %138, %141
  store float %140, float* %137, align 4
  %143 = add nuw nsw i64 %129, 2
  %144 = getelementptr inbounds %struct.PreFiltBankstr, %struct.PreFiltBankstr* %5, i64 0, i32 10, i64 %143
  %145 = load float, float* %144, align 4
  %146 = fmul float %145, 0x3FA1C432C0000000
  %147 = fadd float %142, %146
  %148 = fmul float %147, 0x3FA1C432C0000000
  %149 = fsub float %145, %148
  store float %147, float* %144, align 4
  %150 = add nuw nsw i64 %129, 3
  %151 = icmp eq i64 %150, 24
  br i1 %151, label %152, label %127

152:                                              ; preds = %127
  store float %149, float* %17, align 16
  br label %976

153:                                              ; preds = %153, %1053
  %154 = phi i64 [ 0, %1053 ], [ %190, %153 ]
  %155 = getelementptr inbounds %struct.PreFiltBankstr, %struct.PreFiltBankstr* %5, i64 0, i32 10, i64 %154
  %156 = bitcast float* %155 to i32*
  %157 = load i32, i32* %156, align 4
  %158 = sub nuw nsw i64 23, %154
  %159 = getelementptr inbounds [492 x float], [492 x float]* %14, i64 0, i64 %158
  %160 = bitcast float* %159 to i32*
  store i32 %157, i32* %160, align 4
  %161 = shl nuw nsw i64 %154, 1
  %162 = sub nuw nsw i64 479, %161
  %163 = getelementptr inbounds [480 x float], [480 x float]* %16, i64 0, i64 %162
  %164 = bitcast float* %163 to i32*
  %165 = load i32, i32* %164, align 4
  store i32 %165, i32* %156, align 4
  %166 = add nuw nsw i64 %154, 1
  %167 = getelementptr inbounds %struct.PreFiltBankstr, %struct.PreFiltBankstr* %5, i64 0, i32 10, i64 %166
  %168 = bitcast float* %167 to i32*
  %169 = load i32, i32* %168, align 4
  %170 = sub nsw i64 22, %154
  %171 = getelementptr inbounds [492 x float], [492 x float]* %14, i64 0, i64 %170
  %172 = bitcast float* %171 to i32*
  store i32 %169, i32* %172, align 4
  %173 = shl nuw nsw i64 %166, 1
  %174 = sub nuw nsw i64 479, %173
  %175 = getelementptr inbounds [480 x float], [480 x float]* %16, i64 0, i64 %174
  %176 = bitcast float* %175 to i32*
  %177 = load i32, i32* %176, align 4
  store i32 %177, i32* %168, align 4
  %178 = add nuw nsw i64 %154, 2
  %179 = getelementptr inbounds %struct.PreFiltBankstr, %struct.PreFiltBankstr* %5, i64 0, i32 10, i64 %178
  %180 = bitcast float* %179 to i32*
  %181 = load i32, i32* %180, align 4
  %182 = sub nsw i64 21, %154
  %183 = getelementptr inbounds [492 x float], [492 x float]* %14, i64 0, i64 %182
  %184 = bitcast float* %183 to i32*
  store i32 %181, i32* %184, align 4
  %185 = shl nuw nsw i64 %178, 1
  %186 = sub nuw nsw i64 479, %185
  %187 = getelementptr inbounds [480 x float], [480 x float]* %16, i64 0, i64 %186
  %188 = bitcast float* %187 to i32*
  %189 = load i32, i32* %188, align 4
  store i32 %189, i32* %180, align 4
  %190 = add nuw nsw i64 %154, 3
  %191 = icmp eq i64 %190, 24
  br i1 %191, label %192, label %153

192:                                              ; preds = %153
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %8, i8 0, i64 16, i1 false)
  br label %193

193:                                              ; preds = %193, %192
  %194 = phi i64 [ 0, %192 ], [ %234, %193 ]
  %195 = shl nuw nsw i64 %194, 1
  %196 = sub nuw nsw i64 478, %195
  %197 = getelementptr inbounds [480 x float], [480 x float]* %16, i64 0, i64 %196
  %198 = bitcast float* %197 to i32*
  %199 = load i32, i32* %198, align 8
  %200 = getelementptr inbounds [492 x float], [492 x float]* %13, i64 0, i64 %194
  %201 = bitcast float* %200 to i32*
  store i32 %199, i32* %201, align 4
  %202 = add nuw nsw i64 %194, 1
  %203 = shl nuw nsw i64 %202, 1
  %204 = sub nuw nsw i64 478, %203
  %205 = getelementptr inbounds [480 x float], [480 x float]* %16, i64 0, i64 %204
  %206 = bitcast float* %205 to i32*
  %207 = load i32, i32* %206, align 8
  %208 = getelementptr inbounds [492 x float], [492 x float]* %13, i64 0, i64 %202
  %209 = bitcast float* %208 to i32*
  store i32 %207, i32* %209, align 4
  %210 = add nuw nsw i64 %194, 2
  %211 = shl nuw nsw i64 %210, 1
  %212 = sub nuw nsw i64 478, %211
  %213 = getelementptr inbounds [480 x float], [480 x float]* %16, i64 0, i64 %212
  %214 = bitcast float* %213 to i32*
  %215 = load i32, i32* %214, align 8
  %216 = getelementptr inbounds [492 x float], [492 x float]* %13, i64 0, i64 %210
  %217 = bitcast float* %216 to i32*
  store i32 %215, i32* %217, align 4
  %218 = add nuw nsw i64 %194, 3
  %219 = shl nuw nsw i64 %218, 1
  %220 = sub nuw nsw i64 478, %219
  %221 = getelementptr inbounds [480 x float], [480 x float]* %16, i64 0, i64 %220
  %222 = bitcast float* %221 to i32*
  %223 = load i32, i32* %222, align 8
  %224 = getelementptr inbounds [492 x float], [492 x float]* %13, i64 0, i64 %218
  %225 = bitcast float* %224 to i32*
  store i32 %223, i32* %225, align 4
  %226 = add nuw nsw i64 %194, 4
  %227 = shl nuw nsw i64 %226, 1
  %228 = sub nuw nsw i64 478, %227
  %229 = getelementptr inbounds [480 x float], [480 x float]* %16, i64 0, i64 %228
  %230 = bitcast float* %229 to i32*
  %231 = load i32, i32* %230, align 8
  %232 = getelementptr inbounds [492 x float], [492 x float]* %13, i64 0, i64 %226
  %233 = bitcast float* %232 to i32*
  store i32 %231, i32* %233, align 4
  %234 = add nuw nsw i64 %194, 5
  %235 = icmp eq i64 %234, 240
  br i1 %235, label %236, label %193

236:                                              ; preds = %193, %236
  %237 = phi float [ %258, %236 ], [ 0.000000e+00, %193 ]
  %238 = phi i64 [ %259, %236 ], [ 0, %193 ]
  %239 = getelementptr inbounds [492 x float], [492 x float]* %13, i64 0, i64 %238
  %240 = load float, float* %239, align 4
  %241 = fmul float %240, 0x3FA1C432C0000000
  %242 = fadd float %237, %241
  %243 = fmul float %242, 0x3FA1C432C0000000
  %244 = fsub float %240, %243
  store float %242, float* %239, align 4
  %245 = add nuw nsw i64 %238, 1
  %246 = getelementptr inbounds [492 x float], [492 x float]* %13, i64 0, i64 %245
  %247 = load float, float* %246, align 4
  %248 = fmul float %247, 0x3FA1C432C0000000
  %249 = fadd float %244, %248
  %250 = fmul float %249, 0x3FA1C432C0000000
  %251 = fsub float %247, %250
  store float %249, float* %246, align 4
  %252 = add nuw nsw i64 %238, 2
  %253 = getelementptr inbounds [492 x float], [492 x float]* %13, i64 0, i64 %252
  %254 = load float, float* %253, align 4
  %255 = fmul float %254, 0x3FA1C432C0000000
  %256 = fadd float %251, %255
  %257 = fmul float %256, 0x3FA1C432C0000000
  %258 = fsub float %254, %257
  store float %256, float* %253, align 4
  %259 = add nuw nsw i64 %238, 3
  %260 = icmp eq i64 %259, 240
  br i1 %260, label %261, label %236

261:                                              ; preds = %236
  store float %258, float* %17, align 16
  br label %849

262:                                              ; preds = %262, %975
  %263 = phi float [ %258, %975 ], [ %284, %262 ]
  %264 = phi i64 [ 0, %975 ], [ %285, %262 ]
  %265 = getelementptr inbounds %struct.PreFiltBankstr, %struct.PreFiltBankstr* %5, i64 0, i32 11, i64 %264
  %266 = load float, float* %265, align 4
  %267 = fmul float %266, 0x3FA1C432C0000000
  %268 = fadd float %263, %267
  %269 = fmul float %268, 0x3FA1C432C0000000
  %270 = fsub float %266, %269
  store float %268, float* %265, align 4
  %271 = add nuw nsw i64 %264, 1
  %272 = getelementptr inbounds %struct.PreFiltBankstr, %struct.PreFiltBankstr* %5, i64 0, i32 11, i64 %271
  %273 = load float, float* %272, align 4
  %274 = fmul float %273, 0x3FA1C432C0000000
  %275 = fadd float %270, %274
  %276 = fmul float %275, 0x3FA1C432C0000000
  %277 = fsub float %273, %276
  store float %275, float* %272, align 4
  %278 = add nuw nsw i64 %264, 2
  %279 = getelementptr inbounds %struct.PreFiltBankstr, %struct.PreFiltBankstr* %5, i64 0, i32 11, i64 %278
  %280 = load float, float* %279, align 4
  %281 = fmul float %280, 0x3FA1C432C0000000
  %282 = fadd float %277, %281
  %283 = fmul float %282, 0x3FA1C432C0000000
  %284 = fsub float %280, %283
  store float %282, float* %279, align 4
  %285 = add nuw nsw i64 %264, 3
  %286 = icmp eq i64 %285, 24
  br i1 %286, label %287, label %262

287:                                              ; preds = %262
  store float %284, float* %17, align 16
  br label %771

288:                                              ; preds = %288, %848
  %289 = phi i64 [ 0, %848 ], [ %325, %288 ]
  %290 = getelementptr inbounds %struct.PreFiltBankstr, %struct.PreFiltBankstr* %5, i64 0, i32 11, i64 %289
  %291 = bitcast float* %290 to i32*
  %292 = load i32, i32* %291, align 4
  %293 = sub nuw nsw i64 23, %289
  %294 = getelementptr inbounds [492 x float], [492 x float]* %15, i64 0, i64 %293
  %295 = bitcast float* %294 to i32*
  store i32 %292, i32* %295, align 4
  %296 = shl nuw nsw i64 %289, 1
  %297 = sub nuw nsw i64 478, %296
  %298 = getelementptr inbounds [480 x float], [480 x float]* %16, i64 0, i64 %297
  %299 = bitcast float* %298 to i32*
  %300 = load i32, i32* %299, align 8
  store i32 %300, i32* %291, align 4
  %301 = add nuw nsw i64 %289, 1
  %302 = getelementptr inbounds %struct.PreFiltBankstr, %struct.PreFiltBankstr* %5, i64 0, i32 11, i64 %301
  %303 = bitcast float* %302 to i32*
  %304 = load i32, i32* %303, align 4
  %305 = sub nsw i64 22, %289
  %306 = getelementptr inbounds [492 x float], [492 x float]* %15, i64 0, i64 %305
  %307 = bitcast float* %306 to i32*
  store i32 %304, i32* %307, align 4
  %308 = shl nuw nsw i64 %301, 1
  %309 = sub nuw nsw i64 478, %308
  %310 = getelementptr inbounds [480 x float], [480 x float]* %16, i64 0, i64 %309
  %311 = bitcast float* %310 to i32*
  %312 = load i32, i32* %311, align 8
  store i32 %312, i32* %303, align 4
  %313 = add nuw nsw i64 %289, 2
  %314 = getelementptr inbounds %struct.PreFiltBankstr, %struct.PreFiltBankstr* %5, i64 0, i32 11, i64 %313
  %315 = bitcast float* %314 to i32*
  %316 = load i32, i32* %315, align 4
  %317 = sub nsw i64 21, %289
  %318 = getelementptr inbounds [492 x float], [492 x float]* %15, i64 0, i64 %317
  %319 = bitcast float* %318 to i32*
  store i32 %316, i32* %319, align 4
  %320 = shl nuw nsw i64 %313, 1
  %321 = sub nuw nsw i64 478, %320
  %322 = getelementptr inbounds [480 x float], [480 x float]* %16, i64 0, i64 %321
  %323 = bitcast float* %322 to i32*
  %324 = load i32, i32* %323, align 8
  store i32 %324, i32* %315, align 4
  %325 = add nuw nsw i64 %289, 3
  %326 = icmp eq i64 %325, 24
  br i1 %326, label %327, label %288

327:                                              ; preds = %288
  %328 = getelementptr inbounds %struct.PreFiltBankstr, %struct.PreFiltBankstr* %5, i64 0, i32 6, i64 0
  %329 = getelementptr inbounds %struct.PreFiltBankstr, %struct.PreFiltBankstr* %5, i64 0, i32 7, i64 0
  %330 = load float, float* %328, align 4
  %331 = load float, float* %329, align 4
  %332 = load float, float* %22, align 16
  %333 = fmul float %332, 0xBF59FF7580000000
  %334 = fadd float %330, %333
  %335 = load float, float* %27, align 16
  %336 = fmul float %335, 0xBF5BF71760000000
  %337 = fadd float %331, %336
  %338 = load float, float* %23, align 4
  %339 = fmul float %338, 0x3F54D562A0000000
  %340 = fadd float %334, %339
  %341 = load float, float* %28, align 4
  %342 = fmul float %341, 0x3F5668F940000000
  %343 = fadd float %337, %342
  %344 = load float, float* %24, align 8
  %345 = fmul float %344, 0xBF512BDE60000000
  %346 = fadd float %340, %345
  %347 = load float, float* %29, align 8
  %348 = fmul float %347, 0xBF52788340000000
  %349 = fadd float %343, %348
  %350 = load float, float* %25, align 4
  %351 = fmul float %350, 0x3F4BCCAA00000000
  %352 = fadd float %346, %351
  %353 = load float, float* %30, align 4
  %354 = fmul float %353, 0x3F4DE73260000000
  %355 = fadd float %349, %354
  store float %352, float* %328, align 4
  store float %355, float* %329, align 4
  %356 = getelementptr inbounds %struct.PreFiltBankstr, %struct.PreFiltBankstr* %5, i64 0, i32 6, i64 1
  %357 = getelementptr inbounds %struct.PreFiltBankstr, %struct.PreFiltBankstr* %5, i64 0, i32 7, i64 1
  %358 = load float, float* %356, align 4
  %359 = load float, float* %357, align 4
  %360 = fmul float %332, 0xBF512BDE60000000
  %361 = fadd float %358, %360
  %362 = fmul float %335, 0xBF52788340000000
  %363 = fadd float %359, %362
  %364 = fmul float %338, 0x3F4BCCAA00000000
  %365 = fadd float %361, %364
  %366 = fmul float %341, 0x3F4DE73260000000
  %367 = fadd float %363, %366
  %368 = fmul float %344, 0x3F5607FF00000000
  %369 = fadd float %365, %368
  %370 = fmul float %347, 0x3F50E41660000000
  %371 = fadd float %367, %370
  %372 = fmul float %350, 0xBF51A7A320000000
  %373 = fadd float %369, %372
  %374 = fmul float %353, 0xBF4B124140000000
  %375 = fadd float %371, %374
  store float %373, float* %356, align 4
  store float %375, float* %357, align 4
  br label %376

376:                                              ; preds = %376, %327
  %377 = phi float [ %352, %327 ], [ %398, %376 ]
  %378 = phi i64 [ 0, %327 ], [ %399, %376 ]
  %379 = getelementptr inbounds [492 x float], [492 x float]* %14, i64 0, i64 %378
  %380 = load float, float* %379, align 4
  %381 = fmul float %380, 0x3FA1C432C0000000
  %382 = fadd float %377, %381
  %383 = fmul float %382, 0x3FA1C432C0000000
  %384 = fsub float %380, %383
  store float %382, float* %379, align 4
  %385 = add nuw nsw i64 %378, 1
  %386 = getelementptr inbounds [492 x float], [492 x float]* %14, i64 0, i64 %385
  %387 = load float, float* %386, align 4
  %388 = fmul float %387, 0x3FA1C432C0000000
  %389 = fadd float %384, %388
  %390 = fmul float %389, 0x3FA1C432C0000000
  %391 = fsub float %387, %390
  store float %389, float* %386, align 4
  %392 = add nuw nsw i64 %378, 2
  %393 = getelementptr inbounds [492 x float], [492 x float]* %14, i64 0, i64 %392
  %394 = load float, float* %393, align 4
  %395 = fmul float %394, 0x3FA1C432C0000000
  %396 = fadd float %391, %395
  %397 = fmul float %396, 0x3FA1C432C0000000
  %398 = fsub float %394, %397
  store float %396, float* %393, align 4
  %399 = add nuw nsw i64 %378, 3
  %400 = icmp eq i64 %399, 240
  br i1 %400, label %401, label %376

401:                                              ; preds = %376
  store float %398, float* %328, align 4
  br label %745

402:                                              ; preds = %402, %770
  %403 = phi float [ %355, %770 ], [ %424, %402 ]
  %404 = phi i64 [ 0, %770 ], [ %425, %402 ]
  %405 = getelementptr inbounds [492 x float], [492 x float]* %15, i64 0, i64 %404
  %406 = load float, float* %405, align 4
  %407 = fmul float %406, 0x3FC3C36120000000
  %408 = fadd float %403, %407
  %409 = fmul float %408, 0x3FC3C36120000000
  %410 = fsub float %406, %409
  store float %408, float* %405, align 4
  %411 = add nuw nsw i64 %404, 1
  %412 = getelementptr inbounds [492 x float], [492 x float]* %15, i64 0, i64 %411
  %413 = load float, float* %412, align 4
  %414 = fmul float %413, 0x3FC3C36120000000
  %415 = fadd float %410, %414
  %416 = fmul float %415, 0x3FC3C36120000000
  %417 = fsub float %413, %416
  store float %415, float* %412, align 4
  %418 = add nuw nsw i64 %404, 2
  %419 = getelementptr inbounds [492 x float], [492 x float]* %15, i64 0, i64 %418
  %420 = load float, float* %419, align 4
  %421 = fmul float %420, 0x3FC3C36120000000
  %422 = fadd float %417, %421
  %423 = fmul float %422, 0x3FC3C36120000000
  %424 = fsub float %420, %423
  store float %422, float* %419, align 4
  %425 = add nuw nsw i64 %404, 3
  %426 = icmp eq i64 %425, 240
  br i1 %426, label %427, label %402

427:                                              ; preds = %402
  store float %424, float* %329, align 4
  br label %681

428:                                              ; preds = %706, %428
  %429 = phi i64 [ %451, %428 ], [ 0, %706 ]
  %430 = getelementptr inbounds [492 x float], [492 x float]* %14, i64 0, i64 %429
  %431 = load float, float* %430, align 8
  %432 = getelementptr inbounds [492 x float], [492 x float]* %15, i64 0, i64 %429
  %433 = load float, float* %432, align 8
  %434 = fadd float %431, %433
  %435 = fmul float %434, 5.000000e-01
  %436 = getelementptr inbounds float, float* %1, i64 %429
  store float %435, float* %436, align 4
  %437 = fsub float %431, %433
  %438 = fmul float %437, 5.000000e-01
  %439 = getelementptr inbounds float, float* %2, i64 %429
  store float %438, float* %439, align 4
  %440 = or i64 %429, 1
  %441 = getelementptr inbounds [492 x float], [492 x float]* %14, i64 0, i64 %440
  %442 = load float, float* %441, align 4
  %443 = getelementptr inbounds [492 x float], [492 x float]* %15, i64 0, i64 %440
  %444 = load float, float* %443, align 4
  %445 = fadd float %442, %444
  %446 = fmul float %445, 5.000000e-01
  %447 = getelementptr inbounds float, float* %1, i64 %440
  store float %446, float* %447, align 4
  %448 = fsub float %442, %444
  %449 = fmul float %448, 5.000000e-01
  %450 = getelementptr inbounds float, float* %2, i64 %440
  store float %449, float* %450, align 4
  %451 = add nuw nsw i64 %429, 2
  %452 = icmp eq i64 %451, 240
  br i1 %452, label %453, label %428, !llvm.loop !14

453:                                              ; preds = %712, %428
  br label %454

454:                                              ; preds = %454, %453
  %455 = phi i64 [ 0, %453 ], [ %494, %454 ]
  %456 = shl nuw nsw i64 %455, 1
  %457 = or i64 %456, 1
  %458 = getelementptr inbounds [480 x float], [480 x float]* %16, i64 0, i64 %457
  %459 = getelementptr inbounds float, float* %458, i64 -1
  %460 = bitcast float* %459 to <8 x i32>*
  %461 = load <8 x i32>, <8 x i32>* %460, align 4
  %462 = shufflevector <8 x i32> %461, <8 x i32> undef, <4 x i32> <i32 0, i32 2, i32 4, i32 6>
  %463 = shufflevector <8 x i32> %461, <8 x i32> undef, <4 x i32> <i32 1, i32 3, i32 5, i32 7>
  %464 = getelementptr inbounds [492 x float], [492 x float]* %14, i64 0, i64 %455
  %465 = bitcast float* %464 to <4 x i32>*
  store <4 x i32> %463, <4 x i32>* %465, align 16
  %466 = getelementptr inbounds [492 x float], [492 x float]* %15, i64 0, i64 %455
  %467 = bitcast float* %466 to <4 x i32>*
  store <4 x i32> %462, <4 x i32>* %467, align 16
  %468 = add nuw nsw i64 %455, 4
  %469 = shl nuw nsw i64 %468, 1
  %470 = or i64 %469, 1
  %471 = getelementptr inbounds [480 x float], [480 x float]* %16, i64 0, i64 %470
  %472 = getelementptr inbounds float, float* %471, i64 -1
  %473 = bitcast float* %472 to <8 x i32>*
  %474 = load <8 x i32>, <8 x i32>* %473, align 4
  %475 = shufflevector <8 x i32> %474, <8 x i32> undef, <4 x i32> <i32 0, i32 2, i32 4, i32 6>
  %476 = shufflevector <8 x i32> %474, <8 x i32> undef, <4 x i32> <i32 1, i32 3, i32 5, i32 7>
  %477 = getelementptr inbounds [492 x float], [492 x float]* %14, i64 0, i64 %468
  %478 = bitcast float* %477 to <4 x i32>*
  store <4 x i32> %476, <4 x i32>* %478, align 16
  %479 = getelementptr inbounds [492 x float], [492 x float]* %15, i64 0, i64 %468
  %480 = bitcast float* %479 to <4 x i32>*
  store <4 x i32> %475, <4 x i32>* %480, align 16
  %481 = add nuw nsw i64 %455, 8
  %482 = shl nuw nsw i64 %481, 1
  %483 = or i64 %482, 1
  %484 = getelementptr inbounds [480 x float], [480 x float]* %16, i64 0, i64 %483
  %485 = getelementptr inbounds float, float* %484, i64 -1
  %486 = bitcast float* %485 to <8 x i32>*
  %487 = load <8 x i32>, <8 x i32>* %486, align 4
  %488 = shufflevector <8 x i32> %487, <8 x i32> undef, <4 x i32> <i32 0, i32 2, i32 4, i32 6>
  %489 = shufflevector <8 x i32> %487, <8 x i32> undef, <4 x i32> <i32 1, i32 3, i32 5, i32 7>
  %490 = getelementptr inbounds [492 x float], [492 x float]* %14, i64 0, i64 %481
  %491 = bitcast float* %490 to <4 x i32>*
  store <4 x i32> %489, <4 x i32>* %491, align 16
  %492 = getelementptr inbounds [492 x float], [492 x float]* %15, i64 0, i64 %481
  %493 = bitcast float* %492 to <4 x i32>*
  store <4 x i32> %488, <4 x i32>* %493, align 16
  %494 = add nuw nsw i64 %455, 12
  %495 = icmp eq i64 %494, 240
  br i1 %495, label %496, label %454, !llvm.loop !15

496:                                              ; preds = %454
  %497 = getelementptr inbounds %struct.PreFiltBankstr, %struct.PreFiltBankstr* %5, i64 0, i32 8, i64 0
  %498 = load float, float* %497, align 4
  br label %499

499:                                              ; preds = %499, %496
  %500 = phi float [ %498, %496 ], [ %521, %499 ]
  %501 = phi i64 [ 0, %496 ], [ %522, %499 ]
  %502 = getelementptr inbounds [492 x float], [492 x float]* %14, i64 0, i64 %501
  %503 = load float, float* %502, align 4
  %504 = fmul float %503, 0x3FA1C432C0000000
  %505 = fadd float %500, %504
  %506 = fmul float %505, 0x3FA1C432C0000000
  %507 = fsub float %503, %506
  store float %505, float* %502, align 4
  %508 = add nuw nsw i64 %501, 1
  %509 = getelementptr inbounds [492 x float], [492 x float]* %14, i64 0, i64 %508
  %510 = load float, float* %509, align 4
  %511 = fmul float %510, 0x3FA1C432C0000000
  %512 = fadd float %507, %511
  %513 = fmul float %512, 0x3FA1C432C0000000
  %514 = fsub float %510, %513
  store float %512, float* %509, align 4
  %515 = add nuw nsw i64 %501, 2
  %516 = getelementptr inbounds [492 x float], [492 x float]* %14, i64 0, i64 %515
  %517 = load float, float* %516, align 4
  %518 = fmul float %517, 0x3FA1C432C0000000
  %519 = fadd float %514, %518
  %520 = fmul float %519, 0x3FA1C432C0000000
  %521 = fsub float %517, %520
  store float %519, float* %516, align 4
  %522 = add nuw nsw i64 %501, 3
  %523 = icmp eq i64 %522, 240
  br i1 %523, label %524, label %499

524:                                              ; preds = %499
  store float %521, float* %497, align 4
  %525 = getelementptr inbounds %struct.PreFiltBankstr, %struct.PreFiltBankstr* %5, i64 0, i32 8, i64 1
  %526 = load float, float* %525, align 4
  br label %653

527:                                              ; preds = %527, %678
  %528 = phi float [ %680, %678 ], [ %549, %527 ]
  %529 = phi i64 [ 0, %678 ], [ %550, %527 ]
  %530 = getelementptr inbounds [492 x float], [492 x float]* %15, i64 0, i64 %529
  %531 = load float, float* %530, align 4
  %532 = fmul float %531, 0x3FC3C36120000000
  %533 = fadd float %528, %532
  %534 = fmul float %533, 0x3FC3C36120000000
  %535 = fsub float %531, %534
  store float %533, float* %530, align 4
  %536 = add nuw nsw i64 %529, 1
  %537 = getelementptr inbounds [492 x float], [492 x float]* %15, i64 0, i64 %536
  %538 = load float, float* %537, align 4
  %539 = fmul float %538, 0x3FC3C36120000000
  %540 = fadd float %535, %539
  %541 = fmul float %540, 0x3FC3C36120000000
  %542 = fsub float %538, %541
  store float %540, float* %537, align 4
  %543 = add nuw nsw i64 %529, 2
  %544 = getelementptr inbounds [492 x float], [492 x float]* %15, i64 0, i64 %543
  %545 = load float, float* %544, align 4
  %546 = fmul float %545, 0x3FC3C36120000000
  %547 = fadd float %542, %546
  %548 = fmul float %547, 0x3FC3C36120000000
  %549 = fsub float %545, %548
  store float %547, float* %544, align 4
  %550 = add nuw nsw i64 %529, 3
  %551 = icmp eq i64 %550, 240
  br i1 %551, label %552, label %527

552:                                              ; preds = %527
  store float %549, float* %679, align 4
  %553 = getelementptr inbounds %struct.PreFiltBankstr, %struct.PreFiltBankstr* %5, i64 0, i32 9, i64 1
  %554 = load float, float* %553, align 4
  br label %585

555:                                              ; preds = %610, %555
  %556 = phi i64 [ %582, %555 ], [ 0, %610 ]
  %557 = getelementptr inbounds [492 x float], [492 x float]* %14, i64 0, i64 %556
  %558 = load float, float* %557, align 8
  %559 = getelementptr inbounds [492 x float], [492 x float]* %15, i64 0, i64 %556
  %560 = load float, float* %559, align 8
  %561 = fadd float %558, %560
  %562 = fmul float %561, 5.000000e-01
  %563 = fpext float %562 to double
  %564 = getelementptr inbounds double, double* %3, i64 %556
  store double %563, double* %564, align 8
  %565 = fsub float %558, %560
  %566 = fmul float %565, 5.000000e-01
  %567 = fpext float %566 to double
  %568 = getelementptr inbounds double, double* %4, i64 %556
  store double %567, double* %568, align 8
  %569 = or i64 %556, 1
  %570 = getelementptr inbounds [492 x float], [492 x float]* %14, i64 0, i64 %569
  %571 = load float, float* %570, align 4
  %572 = getelementptr inbounds [492 x float], [492 x float]* %15, i64 0, i64 %569
  %573 = load float, float* %572, align 4
  %574 = fadd float %571, %573
  %575 = fmul float %574, 5.000000e-01
  %576 = fpext float %575 to double
  %577 = getelementptr inbounds double, double* %3, i64 %569
  store double %576, double* %577, align 8
  %578 = fsub float %571, %573
  %579 = fmul float %578, 5.000000e-01
  %580 = fpext float %579 to double
  %581 = getelementptr inbounds double, double* %4, i64 %569
  store double %580, double* %581, align 8
  %582 = add nuw nsw i64 %556, 2
  %583 = icmp eq i64 %582, 240
  br i1 %583, label %584, label %555, !llvm.loop !16

584:                                              ; preds = %616, %555
  call void @llvm.lifetime.end.p0i8(i64 1920, i8* nonnull %35) #5
  call void @llvm.lifetime.end.p0i8(i64 1968, i8* nonnull %34) #5
  call void @llvm.lifetime.end.p0i8(i64 1968, i8* nonnull %33) #5
  call void @llvm.lifetime.end.p0i8(i64 1968, i8* nonnull %31) #5
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %12) #5
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %10) #5
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %8) #5
  ret void

585:                                              ; preds = %585, %552
  %586 = phi float [ %554, %552 ], [ %607, %585 ]
  %587 = phi i64 [ 0, %552 ], [ %608, %585 ]
  %588 = getelementptr inbounds [492 x float], [492 x float]* %15, i64 0, i64 %587
  %589 = load float, float* %588, align 4
  %590 = fmul float %589, 0x3FE7CED920000000
  %591 = fadd float %586, %590
  %592 = fmul float %591, 0x3FE7CED920000000
  %593 = fsub float %589, %592
  store float %591, float* %588, align 4
  %594 = add nuw nsw i64 %587, 1
  %595 = getelementptr inbounds [492 x float], [492 x float]* %15, i64 0, i64 %594
  %596 = load float, float* %595, align 4
  %597 = fmul float %596, 0x3FE7CED920000000
  %598 = fadd float %593, %597
  %599 = fmul float %598, 0x3FE7CED920000000
  %600 = fsub float %596, %599
  store float %598, float* %595, align 4
  %601 = add nuw nsw i64 %587, 2
  %602 = getelementptr inbounds [492 x float], [492 x float]* %15, i64 0, i64 %601
  %603 = load float, float* %602, align 4
  %604 = fmul float %603, 0x3FE7CED920000000
  %605 = fadd float %600, %604
  %606 = fmul float %605, 0x3FE7CED920000000
  %607 = fsub float %603, %606
  store float %605, float* %602, align 4
  %608 = add nuw nsw i64 %587, 3
  %609 = icmp eq i64 %608, 240
  br i1 %609, label %610, label %585

610:                                              ; preds = %585
  store float %607, float* %553, align 4
  %611 = getelementptr double, double* %3, i64 240
  %612 = getelementptr double, double* %4, i64 240
  %613 = icmp ugt double* %612, %3
  %614 = icmp ugt double* %611, %4
  %615 = and i1 %613, %614
  br i1 %615, label %555, label %616

616:                                              ; preds = %610, %616
  %617 = phi i64 [ %651, %616 ], [ 0, %610 ]
  %618 = getelementptr inbounds [492 x float], [492 x float]* %14, i64 0, i64 %617
  %619 = bitcast float* %618 to <2 x float>*
  %620 = load <2 x float>, <2 x float>* %619, align 16, !alias.scope !17
  %621 = getelementptr inbounds [492 x float], [492 x float]* %15, i64 0, i64 %617
  %622 = bitcast float* %621 to <2 x float>*
  %623 = load <2 x float>, <2 x float>* %622, align 16, !alias.scope !20
  %624 = fadd <2 x float> %620, %623
  %625 = fmul <2 x float> %624, <float 5.000000e-01, float 5.000000e-01>
  %626 = fpext <2 x float> %625 to <2 x double>
  %627 = getelementptr inbounds double, double* %3, i64 %617
  %628 = bitcast double* %627 to <2 x double>*
  store <2 x double> %626, <2 x double>* %628, align 8, !alias.scope !22, !noalias !24
  %629 = fsub <2 x float> %620, %623
  %630 = fmul <2 x float> %629, <float 5.000000e-01, float 5.000000e-01>
  %631 = fpext <2 x float> %630 to <2 x double>
  %632 = getelementptr inbounds double, double* %4, i64 %617
  %633 = bitcast double* %632 to <2 x double>*
  store <2 x double> %631, <2 x double>* %633, align 8, !alias.scope !24
  %634 = or i64 %617, 2
  %635 = getelementptr inbounds [492 x float], [492 x float]* %14, i64 0, i64 %634
  %636 = bitcast float* %635 to <2 x float>*
  %637 = load <2 x float>, <2 x float>* %636, align 8, !alias.scope !17
  %638 = getelementptr inbounds [492 x float], [492 x float]* %15, i64 0, i64 %634
  %639 = bitcast float* %638 to <2 x float>*
  %640 = load <2 x float>, <2 x float>* %639, align 8, !alias.scope !20
  %641 = fadd <2 x float> %637, %640
  %642 = fmul <2 x float> %641, <float 5.000000e-01, float 5.000000e-01>
  %643 = fpext <2 x float> %642 to <2 x double>
  %644 = getelementptr inbounds double, double* %3, i64 %634
  %645 = bitcast double* %644 to <2 x double>*
  store <2 x double> %643, <2 x double>* %645, align 8, !alias.scope !22, !noalias !24
  %646 = fsub <2 x float> %637, %640
  %647 = fmul <2 x float> %646, <float 5.000000e-01, float 5.000000e-01>
  %648 = fpext <2 x float> %647 to <2 x double>
  %649 = getelementptr inbounds double, double* %4, i64 %634
  %650 = bitcast double* %649 to <2 x double>*
  store <2 x double> %648, <2 x double>* %650, align 8, !alias.scope !24
  %651 = add nuw nsw i64 %617, 4
  %652 = icmp eq i64 %651, 240
  br i1 %652, label %584, label %616, !llvm.loop !26

653:                                              ; preds = %653, %524
  %654 = phi float [ %526, %524 ], [ %675, %653 ]
  %655 = phi i64 [ 0, %524 ], [ %676, %653 ]
  %656 = getelementptr inbounds [492 x float], [492 x float]* %14, i64 0, i64 %655
  %657 = load float, float* %656, align 4
  %658 = fmul float %657, 0x3FD87C84C0000000
  %659 = fadd float %654, %658
  %660 = fmul float %659, 0x3FD87C84C0000000
  %661 = fsub float %657, %660
  store float %659, float* %656, align 4
  %662 = add nuw nsw i64 %655, 1
  %663 = getelementptr inbounds [492 x float], [492 x float]* %14, i64 0, i64 %662
  %664 = load float, float* %663, align 4
  %665 = fmul float %664, 0x3FD87C84C0000000
  %666 = fadd float %661, %665
  %667 = fmul float %666, 0x3FD87C84C0000000
  %668 = fsub float %664, %667
  store float %666, float* %663, align 4
  %669 = add nuw nsw i64 %655, 2
  %670 = getelementptr inbounds [492 x float], [492 x float]* %14, i64 0, i64 %669
  %671 = load float, float* %670, align 4
  %672 = fmul float %671, 0x3FD87C84C0000000
  %673 = fadd float %668, %672
  %674 = fmul float %673, 0x3FD87C84C0000000
  %675 = fsub float %671, %674
  store float %673, float* %670, align 4
  %676 = add nuw nsw i64 %655, 3
  %677 = icmp eq i64 %676, 240
  br i1 %677, label %678, label %653

678:                                              ; preds = %653
  store float %675, float* %525, align 4
  %679 = getelementptr inbounds %struct.PreFiltBankstr, %struct.PreFiltBankstr* %5, i64 0, i32 9, i64 0
  %680 = load float, float* %679, align 4
  br label %527

681:                                              ; preds = %681, %427
  %682 = phi float [ %375, %427 ], [ %703, %681 ]
  %683 = phi i64 [ 0, %427 ], [ %704, %681 ]
  %684 = getelementptr inbounds [492 x float], [492 x float]* %15, i64 0, i64 %683
  %685 = load float, float* %684, align 4
  %686 = fmul float %685, 0x3FE7CED920000000
  %687 = fadd float %682, %686
  %688 = fmul float %687, 0x3FE7CED920000000
  %689 = fsub float %685, %688
  store float %687, float* %684, align 4
  %690 = add nuw nsw i64 %683, 1
  %691 = getelementptr inbounds [492 x float], [492 x float]* %15, i64 0, i64 %690
  %692 = load float, float* %691, align 4
  %693 = fmul float %692, 0x3FE7CED920000000
  %694 = fadd float %689, %693
  %695 = fmul float %694, 0x3FE7CED920000000
  %696 = fsub float %692, %695
  store float %694, float* %691, align 4
  %697 = add nuw nsw i64 %683, 2
  %698 = getelementptr inbounds [492 x float], [492 x float]* %15, i64 0, i64 %697
  %699 = load float, float* %698, align 4
  %700 = fmul float %699, 0x3FE7CED920000000
  %701 = fadd float %696, %700
  %702 = fmul float %701, 0x3FE7CED920000000
  %703 = fsub float %699, %702
  store float %701, float* %698, align 4
  %704 = add nuw nsw i64 %683, 3
  %705 = icmp eq i64 %704, 240
  br i1 %705, label %706, label %681

706:                                              ; preds = %681
  store float %703, float* %357, align 4
  %707 = getelementptr float, float* %1, i64 240
  %708 = getelementptr float, float* %2, i64 240
  %709 = icmp ugt float* %708, %1
  %710 = icmp ugt float* %707, %2
  %711 = and i1 %709, %710
  br i1 %711, label %428, label %712

712:                                              ; preds = %706, %712
  %713 = phi i64 [ %743, %712 ], [ 0, %706 ]
  %714 = getelementptr inbounds [492 x float], [492 x float]* %14, i64 0, i64 %713
  %715 = bitcast float* %714 to <4 x float>*
  %716 = load <4 x float>, <4 x float>* %715, align 16, !alias.scope !27
  %717 = getelementptr inbounds [492 x float], [492 x float]* %15, i64 0, i64 %713
  %718 = bitcast float* %717 to <4 x float>*
  %719 = load <4 x float>, <4 x float>* %718, align 16, !alias.scope !30
  %720 = fadd <4 x float> %716, %719
  %721 = fmul <4 x float> %720, <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>
  %722 = getelementptr inbounds float, float* %1, i64 %713
  %723 = bitcast float* %722 to <4 x float>*
  store <4 x float> %721, <4 x float>* %723, align 4, !alias.scope !32, !noalias !34
  %724 = fsub <4 x float> %716, %719
  %725 = fmul <4 x float> %724, <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>
  %726 = getelementptr inbounds float, float* %2, i64 %713
  %727 = bitcast float* %726 to <4 x float>*
  store <4 x float> %725, <4 x float>* %727, align 4, !alias.scope !34
  %728 = or i64 %713, 4
  %729 = getelementptr inbounds [492 x float], [492 x float]* %14, i64 0, i64 %728
  %730 = bitcast float* %729 to <4 x float>*
  %731 = load <4 x float>, <4 x float>* %730, align 16, !alias.scope !27
  %732 = getelementptr inbounds [492 x float], [492 x float]* %15, i64 0, i64 %728
  %733 = bitcast float* %732 to <4 x float>*
  %734 = load <4 x float>, <4 x float>* %733, align 16, !alias.scope !30
  %735 = fadd <4 x float> %731, %734
  %736 = fmul <4 x float> %735, <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>
  %737 = getelementptr inbounds float, float* %1, i64 %728
  %738 = bitcast float* %737 to <4 x float>*
  store <4 x float> %736, <4 x float>* %738, align 4, !alias.scope !32, !noalias !34
  %739 = fsub <4 x float> %731, %734
  %740 = fmul <4 x float> %739, <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>
  %741 = getelementptr inbounds float, float* %2, i64 %728
  %742 = bitcast float* %741 to <4 x float>*
  store <4 x float> %740, <4 x float>* %742, align 4, !alias.scope !34
  %743 = add nuw nsw i64 %713, 8
  %744 = icmp eq i64 %743, 240
  br i1 %744, label %453, label %712, !llvm.loop !36

745:                                              ; preds = %745, %401
  %746 = phi float [ %373, %401 ], [ %767, %745 ]
  %747 = phi i64 [ 0, %401 ], [ %768, %745 ]
  %748 = getelementptr inbounds [492 x float], [492 x float]* %14, i64 0, i64 %747
  %749 = load float, float* %748, align 4
  %750 = fmul float %749, 0x3FD87C84C0000000
  %751 = fadd float %746, %750
  %752 = fmul float %751, 0x3FD87C84C0000000
  %753 = fsub float %749, %752
  store float %751, float* %748, align 4
  %754 = add nuw nsw i64 %747, 1
  %755 = getelementptr inbounds [492 x float], [492 x float]* %14, i64 0, i64 %754
  %756 = load float, float* %755, align 4
  %757 = fmul float %756, 0x3FD87C84C0000000
  %758 = fadd float %753, %757
  %759 = fmul float %758, 0x3FD87C84C0000000
  %760 = fsub float %756, %759
  store float %758, float* %755, align 4
  %761 = add nuw nsw i64 %747, 2
  %762 = getelementptr inbounds [492 x float], [492 x float]* %14, i64 0, i64 %761
  %763 = load float, float* %762, align 4
  %764 = fmul float %763, 0x3FD87C84C0000000
  %765 = fadd float %760, %764
  %766 = fmul float %765, 0x3FD87C84C0000000
  %767 = fsub float %763, %766
  store float %765, float* %762, align 4
  %768 = add nuw nsw i64 %747, 3
  %769 = icmp eq i64 %768, 240
  br i1 %769, label %770, label %745

770:                                              ; preds = %745
  store float %767, float* %356, align 4
  br label %402

771:                                              ; preds = %771, %287
  %772 = phi float [ %871, %287 ], [ %793, %771 ]
  %773 = phi i64 [ 0, %287 ], [ %794, %771 ]
  %774 = getelementptr inbounds %struct.PreFiltBankstr, %struct.PreFiltBankstr* %5, i64 0, i32 11, i64 %773
  %775 = load float, float* %774, align 4
  %776 = fmul float %775, 0x3FC3C36120000000
  %777 = fadd float %772, %776
  %778 = fmul float %777, 0x3FC3C36120000000
  %779 = fsub float %775, %778
  store float %777, float* %774, align 4
  %780 = add nuw nsw i64 %773, 1
  %781 = getelementptr inbounds %struct.PreFiltBankstr, %struct.PreFiltBankstr* %5, i64 0, i32 11, i64 %780
  %782 = load float, float* %781, align 4
  %783 = fmul float %782, 0x3FC3C36120000000
  %784 = fadd float %779, %783
  %785 = fmul float %784, 0x3FC3C36120000000
  %786 = fsub float %782, %785
  store float %784, float* %781, align 4
  %787 = add nuw nsw i64 %773, 2
  %788 = getelementptr inbounds %struct.PreFiltBankstr, %struct.PreFiltBankstr* %5, i64 0, i32 11, i64 %787
  %789 = load float, float* %788, align 4
  %790 = fmul float %789, 0x3FC3C36120000000
  %791 = fadd float %786, %790
  %792 = fmul float %791, 0x3FC3C36120000000
  %793 = fsub float %789, %792
  store float %791, float* %788, align 4
  %794 = add nuw nsw i64 %773, 3
  %795 = icmp eq i64 %794, 24
  br i1 %795, label %796, label %771

796:                                              ; preds = %771
  store float %793, float* %18, align 4
  br label %797

797:                                              ; preds = %797, %796
  %798 = phi float [ %897, %796 ], [ %819, %797 ]
  %799 = phi i64 [ 0, %796 ], [ %820, %797 ]
  %800 = getelementptr inbounds %struct.PreFiltBankstr, %struct.PreFiltBankstr* %5, i64 0, i32 11, i64 %799
  %801 = load float, float* %800, align 4
  %802 = fmul float %801, 0x3FD87C84C0000000
  %803 = fadd float %798, %802
  %804 = fmul float %803, 0x3FD87C84C0000000
  %805 = fsub float %801, %804
  store float %803, float* %800, align 4
  %806 = add nuw nsw i64 %799, 1
  %807 = getelementptr inbounds %struct.PreFiltBankstr, %struct.PreFiltBankstr* %5, i64 0, i32 11, i64 %806
  %808 = load float, float* %807, align 4
  %809 = fmul float %808, 0x3FD87C84C0000000
  %810 = fadd float %805, %809
  %811 = fmul float %810, 0x3FD87C84C0000000
  %812 = fsub float %808, %811
  store float %810, float* %807, align 4
  %813 = add nuw nsw i64 %799, 2
  %814 = getelementptr inbounds %struct.PreFiltBankstr, %struct.PreFiltBankstr* %5, i64 0, i32 11, i64 %813
  %815 = load float, float* %814, align 4
  %816 = fmul float %815, 0x3FD87C84C0000000
  %817 = fadd float %812, %816
  %818 = fmul float %817, 0x3FD87C84C0000000
  %819 = fsub float %815, %818
  store float %817, float* %814, align 4
  %820 = add nuw nsw i64 %799, 3
  %821 = icmp eq i64 %820, 24
  br i1 %821, label %822, label %797

822:                                              ; preds = %797
  store float %819, float* %19, align 8
  br label %823

823:                                              ; preds = %823, %822
  %824 = phi float [ %923, %822 ], [ %845, %823 ]
  %825 = phi i64 [ 0, %822 ], [ %846, %823 ]
  %826 = getelementptr inbounds %struct.PreFiltBankstr, %struct.PreFiltBankstr* %5, i64 0, i32 11, i64 %825
  %827 = load float, float* %826, align 4
  %828 = fmul float %827, 0x3FE7CED920000000
  %829 = fadd float %824, %828
  %830 = fmul float %829, 0x3FE7CED920000000
  %831 = fsub float %827, %830
  store float %829, float* %826, align 4
  %832 = add nuw nsw i64 %825, 1
  %833 = getelementptr inbounds %struct.PreFiltBankstr, %struct.PreFiltBankstr* %5, i64 0, i32 11, i64 %832
  %834 = load float, float* %833, align 4
  %835 = fmul float %834, 0x3FE7CED920000000
  %836 = fadd float %831, %835
  %837 = fmul float %836, 0x3FE7CED920000000
  %838 = fsub float %834, %837
  store float %836, float* %833, align 4
  %839 = add nuw nsw i64 %825, 2
  %840 = getelementptr inbounds %struct.PreFiltBankstr, %struct.PreFiltBankstr* %5, i64 0, i32 11, i64 %839
  %841 = load float, float* %840, align 4
  %842 = fmul float %841, 0x3FE7CED920000000
  %843 = fadd float %838, %842
  %844 = fmul float %843, 0x3FE7CED920000000
  %845 = fsub float %841, %844
  store float %843, float* %840, align 4
  %846 = add nuw nsw i64 %825, 3
  %847 = icmp eq i64 %846, 24
  br i1 %847, label %848, label %823

848:                                              ; preds = %823
  store float %845, float* %20, align 4
  br label %288

849:                                              ; preds = %849, %261
  %850 = phi float [ 0.000000e+00, %261 ], [ %871, %849 ]
  %851 = phi i64 [ 0, %261 ], [ %872, %849 ]
  %852 = getelementptr inbounds [492 x float], [492 x float]* %13, i64 0, i64 %851
  %853 = load float, float* %852, align 4
  %854 = fmul float %853, 0x3FC3C36120000000
  %855 = fadd float %850, %854
  %856 = fmul float %855, 0x3FC3C36120000000
  %857 = fsub float %853, %856
  store float %855, float* %852, align 4
  %858 = add nuw nsw i64 %851, 1
  %859 = getelementptr inbounds [492 x float], [492 x float]* %13, i64 0, i64 %858
  %860 = load float, float* %859, align 4
  %861 = fmul float %860, 0x3FC3C36120000000
  %862 = fadd float %857, %861
  %863 = fmul float %862, 0x3FC3C36120000000
  %864 = fsub float %860, %863
  store float %862, float* %859, align 4
  %865 = add nuw nsw i64 %851, 2
  %866 = getelementptr inbounds [492 x float], [492 x float]* %13, i64 0, i64 %865
  %867 = load float, float* %866, align 4
  %868 = fmul float %867, 0x3FC3C36120000000
  %869 = fadd float %864, %868
  %870 = fmul float %869, 0x3FC3C36120000000
  %871 = fsub float %867, %870
  store float %869, float* %866, align 4
  %872 = add nuw nsw i64 %851, 3
  %873 = icmp eq i64 %872, 240
  br i1 %873, label %874, label %849

874:                                              ; preds = %849
  store float %871, float* %18, align 4
  br label %875

875:                                              ; preds = %875, %874
  %876 = phi float [ 0.000000e+00, %874 ], [ %897, %875 ]
  %877 = phi i64 [ 0, %874 ], [ %898, %875 ]
  %878 = getelementptr inbounds [492 x float], [492 x float]* %13, i64 0, i64 %877
  %879 = load float, float* %878, align 4
  %880 = fmul float %879, 0x3FD87C84C0000000
  %881 = fadd float %876, %880
  %882 = fmul float %881, 0x3FD87C84C0000000
  %883 = fsub float %879, %882
  store float %881, float* %878, align 4
  %884 = add nuw nsw i64 %877, 1
  %885 = getelementptr inbounds [492 x float], [492 x float]* %13, i64 0, i64 %884
  %886 = load float, float* %885, align 4
  %887 = fmul float %886, 0x3FD87C84C0000000
  %888 = fadd float %883, %887
  %889 = fmul float %888, 0x3FD87C84C0000000
  %890 = fsub float %886, %889
  store float %888, float* %885, align 4
  %891 = add nuw nsw i64 %877, 2
  %892 = getelementptr inbounds [492 x float], [492 x float]* %13, i64 0, i64 %891
  %893 = load float, float* %892, align 4
  %894 = fmul float %893, 0x3FD87C84C0000000
  %895 = fadd float %890, %894
  %896 = fmul float %895, 0x3FD87C84C0000000
  %897 = fsub float %893, %896
  store float %895, float* %892, align 4
  %898 = add nuw nsw i64 %877, 3
  %899 = icmp eq i64 %898, 240
  br i1 %899, label %900, label %875

900:                                              ; preds = %875
  store float %897, float* %19, align 8
  br label %901

901:                                              ; preds = %901, %900
  %902 = phi float [ 0.000000e+00, %900 ], [ %923, %901 ]
  %903 = phi i64 [ 0, %900 ], [ %924, %901 ]
  %904 = getelementptr inbounds [492 x float], [492 x float]* %13, i64 0, i64 %903
  %905 = load float, float* %904, align 4
  %906 = fmul float %905, 0x3FE7CED920000000
  %907 = fadd float %902, %906
  %908 = fmul float %907, 0x3FE7CED920000000
  %909 = fsub float %905, %908
  store float %907, float* %904, align 4
  %910 = add nuw nsw i64 %903, 1
  %911 = getelementptr inbounds [492 x float], [492 x float]* %13, i64 0, i64 %910
  %912 = load float, float* %911, align 4
  %913 = fmul float %912, 0x3FE7CED920000000
  %914 = fadd float %909, %913
  %915 = fmul float %914, 0x3FE7CED920000000
  %916 = fsub float %912, %915
  store float %914, float* %911, align 4
  %917 = add nuw nsw i64 %903, 2
  %918 = getelementptr inbounds [492 x float], [492 x float]* %13, i64 0, i64 %917
  %919 = load float, float* %918, align 4
  %920 = fmul float %919, 0x3FE7CED920000000
  %921 = fadd float %916, %920
  %922 = fmul float %921, 0x3FE7CED920000000
  %923 = fsub float %919, %922
  store float %921, float* %918, align 4
  %924 = add nuw nsw i64 %903, 3
  %925 = icmp eq i64 %924, 240
  br i1 %925, label %926, label %901

926:                                              ; preds = %901
  store float %923, float* %20, align 4
  br label %927

927:                                              ; preds = %927, %926
  %928 = phi i64 [ 0, %926 ], [ %973, %927 ]
  %929 = getelementptr inbounds [492 x float], [492 x float]* %13, i64 0, i64 %928
  %930 = bitcast float* %929 to <4 x i32>*
  %931 = load <4 x i32>, <4 x i32>* %930, align 16
  %932 = getelementptr inbounds float, float* %929, i64 4
  %933 = bitcast float* %932 to <4 x i32>*
  %934 = load <4 x i32>, <4 x i32>* %933, align 16
  %935 = sub nuw nsw i64 263, %928
  %936 = getelementptr inbounds [492 x float], [492 x float]* %15, i64 0, i64 %935
  %937 = shufflevector <4 x i32> %931, <4 x i32> undef, <4 x i32> <i32 3, i32 2, i32 1, i32 0>
  %938 = getelementptr inbounds float, float* %936, i64 -3
  %939 = bitcast float* %938 to <4 x i32>*
  store <4 x i32> %937, <4 x i32>* %939, align 4
  %940 = shufflevector <4 x i32> %934, <4 x i32> undef, <4 x i32> <i32 3, i32 2, i32 1, i32 0>
  %941 = getelementptr inbounds float, float* %936, i64 -7
  %942 = bitcast float* %941 to <4 x i32>*
  store <4 x i32> %940, <4 x i32>* %942, align 4
  %943 = add nuw nsw i64 %928, 8
  %944 = getelementptr inbounds [492 x float], [492 x float]* %13, i64 0, i64 %943
  %945 = bitcast float* %944 to <4 x i32>*
  %946 = load <4 x i32>, <4 x i32>* %945, align 16
  %947 = getelementptr inbounds float, float* %944, i64 4
  %948 = bitcast float* %947 to <4 x i32>*
  %949 = load <4 x i32>, <4 x i32>* %948, align 16
  %950 = sub nsw i64 255, %928
  %951 = getelementptr inbounds [492 x float], [492 x float]* %15, i64 0, i64 %950
  %952 = shufflevector <4 x i32> %946, <4 x i32> undef, <4 x i32> <i32 3, i32 2, i32 1, i32 0>
  %953 = getelementptr inbounds float, float* %951, i64 -3
  %954 = bitcast float* %953 to <4 x i32>*
  store <4 x i32> %952, <4 x i32>* %954, align 4
  %955 = shufflevector <4 x i32> %949, <4 x i32> undef, <4 x i32> <i32 3, i32 2, i32 1, i32 0>
  %956 = getelementptr inbounds float, float* %951, i64 -7
  %957 = bitcast float* %956 to <4 x i32>*
  store <4 x i32> %955, <4 x i32>* %957, align 4
  %958 = add nuw nsw i64 %928, 16
  %959 = getelementptr inbounds [492 x float], [492 x float]* %13, i64 0, i64 %958
  %960 = bitcast float* %959 to <4 x i32>*
  %961 = load <4 x i32>, <4 x i32>* %960, align 16
  %962 = getelementptr inbounds float, float* %959, i64 4
  %963 = bitcast float* %962 to <4 x i32>*
  %964 = load <4 x i32>, <4 x i32>* %963, align 16
  %965 = sub nsw i64 247, %928
  %966 = getelementptr inbounds [492 x float], [492 x float]* %15, i64 0, i64 %965
  %967 = shufflevector <4 x i32> %961, <4 x i32> undef, <4 x i32> <i32 3, i32 2, i32 1, i32 0>
  %968 = getelementptr inbounds float, float* %966, i64 -3
  %969 = bitcast float* %968 to <4 x i32>*
  store <4 x i32> %967, <4 x i32>* %969, align 4
  %970 = shufflevector <4 x i32> %964, <4 x i32> undef, <4 x i32> <i32 3, i32 2, i32 1, i32 0>
  %971 = getelementptr inbounds float, float* %966, i64 -7
  %972 = bitcast float* %971 to <4 x i32>*
  store <4 x i32> %970, <4 x i32>* %972, align 4
  %973 = add nuw nsw i64 %928, 24
  %974 = icmp eq i64 %973, 240
  br i1 %974, label %975, label %927, !llvm.loop !37

975:                                              ; preds = %927
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 16 %12, i8* nonnull align 16 %8, i64 16, i1 false)
  br label %262

976:                                              ; preds = %976, %152
  %977 = phi float [ %1076, %152 ], [ %998, %976 ]
  %978 = phi i64 [ 0, %152 ], [ %999, %976 ]
  %979 = getelementptr inbounds %struct.PreFiltBankstr, %struct.PreFiltBankstr* %5, i64 0, i32 10, i64 %978
  %980 = load float, float* %979, align 4
  %981 = fmul float %980, 0x3FC3C36120000000
  %982 = fadd float %977, %981
  %983 = fmul float %982, 0x3FC3C36120000000
  %984 = fsub float %980, %983
  store float %982, float* %979, align 4
  %985 = add nuw nsw i64 %978, 1
  %986 = getelementptr inbounds %struct.PreFiltBankstr, %struct.PreFiltBankstr* %5, i64 0, i32 10, i64 %985
  %987 = load float, float* %986, align 4
  %988 = fmul float %987, 0x3FC3C36120000000
  %989 = fadd float %984, %988
  %990 = fmul float %989, 0x3FC3C36120000000
  %991 = fsub float %987, %990
  store float %989, float* %986, align 4
  %992 = add nuw nsw i64 %978, 2
  %993 = getelementptr inbounds %struct.PreFiltBankstr, %struct.PreFiltBankstr* %5, i64 0, i32 10, i64 %992
  %994 = load float, float* %993, align 4
  %995 = fmul float %994, 0x3FC3C36120000000
  %996 = fadd float %991, %995
  %997 = fmul float %996, 0x3FC3C36120000000
  %998 = fsub float %994, %997
  store float %996, float* %993, align 4
  %999 = add nuw nsw i64 %978, 3
  %1000 = icmp eq i64 %999, 24
  br i1 %1000, label %1001, label %976

1001:                                             ; preds = %976
  store float %998, float* %18, align 4
  br label %1002

1002:                                             ; preds = %1002, %1001
  %1003 = phi float [ %1102, %1001 ], [ %1024, %1002 ]
  %1004 = phi i64 [ 0, %1001 ], [ %1025, %1002 ]
  %1005 = getelementptr inbounds %struct.PreFiltBankstr, %struct.PreFiltBankstr* %5, i64 0, i32 10, i64 %1004
  %1006 = load float, float* %1005, align 4
  %1007 = fmul float %1006, 0x3FD87C84C0000000
  %1008 = fadd float %1003, %1007
  %1009 = fmul float %1008, 0x3FD87C84C0000000
  %1010 = fsub float %1006, %1009
  store float %1008, float* %1005, align 4
  %1011 = add nuw nsw i64 %1004, 1
  %1012 = getelementptr inbounds %struct.PreFiltBankstr, %struct.PreFiltBankstr* %5, i64 0, i32 10, i64 %1011
  %1013 = load float, float* %1012, align 4
  %1014 = fmul float %1013, 0x3FD87C84C0000000
  %1015 = fadd float %1010, %1014
  %1016 = fmul float %1015, 0x3FD87C84C0000000
  %1017 = fsub float %1013, %1016
  store float %1015, float* %1012, align 4
  %1018 = add nuw nsw i64 %1004, 2
  %1019 = getelementptr inbounds %struct.PreFiltBankstr, %struct.PreFiltBankstr* %5, i64 0, i32 10, i64 %1018
  %1020 = load float, float* %1019, align 4
  %1021 = fmul float %1020, 0x3FD87C84C0000000
  %1022 = fadd float %1017, %1021
  %1023 = fmul float %1022, 0x3FD87C84C0000000
  %1024 = fsub float %1020, %1023
  store float %1022, float* %1019, align 4
  %1025 = add nuw nsw i64 %1004, 3
  %1026 = icmp eq i64 %1025, 24
  br i1 %1026, label %1027, label %1002

1027:                                             ; preds = %1002
  store float %1024, float* %19, align 8
  br label %1028

1028:                                             ; preds = %1028, %1027
  %1029 = phi float [ %1128, %1027 ], [ %1050, %1028 ]
  %1030 = phi i64 [ 0, %1027 ], [ %1051, %1028 ]
  %1031 = getelementptr inbounds %struct.PreFiltBankstr, %struct.PreFiltBankstr* %5, i64 0, i32 10, i64 %1030
  %1032 = load float, float* %1031, align 4
  %1033 = fmul float %1032, 0x3FE7CED920000000
  %1034 = fadd float %1029, %1033
  %1035 = fmul float %1034, 0x3FE7CED920000000
  %1036 = fsub float %1032, %1035
  store float %1034, float* %1031, align 4
  %1037 = add nuw nsw i64 %1030, 1
  %1038 = getelementptr inbounds %struct.PreFiltBankstr, %struct.PreFiltBankstr* %5, i64 0, i32 10, i64 %1037
  %1039 = load float, float* %1038, align 4
  %1040 = fmul float %1039, 0x3FE7CED920000000
  %1041 = fadd float %1036, %1040
  %1042 = fmul float %1041, 0x3FE7CED920000000
  %1043 = fsub float %1039, %1042
  store float %1041, float* %1038, align 4
  %1044 = add nuw nsw i64 %1030, 2
  %1045 = getelementptr inbounds %struct.PreFiltBankstr, %struct.PreFiltBankstr* %5, i64 0, i32 10, i64 %1044
  %1046 = load float, float* %1045, align 4
  %1047 = fmul float %1046, 0x3FE7CED920000000
  %1048 = fadd float %1043, %1047
  %1049 = fmul float %1048, 0x3FE7CED920000000
  %1050 = fsub float %1046, %1049
  store float %1048, float* %1045, align 4
  %1051 = add nuw nsw i64 %1030, 3
  %1052 = icmp eq i64 %1051, 24
  br i1 %1052, label %1053, label %1028

1053:                                             ; preds = %1028
  store float %1050, float* %20, align 4
  br label %153

1054:                                             ; preds = %1054, %126
  %1055 = phi float [ 0.000000e+00, %126 ], [ %1076, %1054 ]
  %1056 = phi i64 [ 0, %126 ], [ %1077, %1054 ]
  %1057 = getelementptr inbounds [492 x float], [492 x float]* %13, i64 0, i64 %1056
  %1058 = load float, float* %1057, align 4
  %1059 = fmul float %1058, 0x3FC3C36120000000
  %1060 = fadd float %1055, %1059
  %1061 = fmul float %1060, 0x3FC3C36120000000
  %1062 = fsub float %1058, %1061
  store float %1060, float* %1057, align 4
  %1063 = add nuw nsw i64 %1056, 1
  %1064 = getelementptr inbounds [492 x float], [492 x float]* %13, i64 0, i64 %1063
  %1065 = load float, float* %1064, align 4
  %1066 = fmul float %1065, 0x3FC3C36120000000
  %1067 = fadd float %1062, %1066
  %1068 = fmul float %1067, 0x3FC3C36120000000
  %1069 = fsub float %1065, %1068
  store float %1067, float* %1064, align 4
  %1070 = add nuw nsw i64 %1056, 2
  %1071 = getelementptr inbounds [492 x float], [492 x float]* %13, i64 0, i64 %1070
  %1072 = load float, float* %1071, align 4
  %1073 = fmul float %1072, 0x3FC3C36120000000
  %1074 = fadd float %1069, %1073
  %1075 = fmul float %1074, 0x3FC3C36120000000
  %1076 = fsub float %1072, %1075
  store float %1074, float* %1071, align 4
  %1077 = add nuw nsw i64 %1056, 3
  %1078 = icmp eq i64 %1077, 240
  br i1 %1078, label %1079, label %1054

1079:                                             ; preds = %1054
  store float %1076, float* %18, align 4
  br label %1080

1080:                                             ; preds = %1080, %1079
  %1081 = phi float [ 0.000000e+00, %1079 ], [ %1102, %1080 ]
  %1082 = phi i64 [ 0, %1079 ], [ %1103, %1080 ]
  %1083 = getelementptr inbounds [492 x float], [492 x float]* %13, i64 0, i64 %1082
  %1084 = load float, float* %1083, align 4
  %1085 = fmul float %1084, 0x3FD87C84C0000000
  %1086 = fadd float %1081, %1085
  %1087 = fmul float %1086, 0x3FD87C84C0000000
  %1088 = fsub float %1084, %1087
  store float %1086, float* %1083, align 4
  %1089 = add nuw nsw i64 %1082, 1
  %1090 = getelementptr inbounds [492 x float], [492 x float]* %13, i64 0, i64 %1089
  %1091 = load float, float* %1090, align 4
  %1092 = fmul float %1091, 0x3FD87C84C0000000
  %1093 = fadd float %1088, %1092
  %1094 = fmul float %1093, 0x3FD87C84C0000000
  %1095 = fsub float %1091, %1094
  store float %1093, float* %1090, align 4
  %1096 = add nuw nsw i64 %1082, 2
  %1097 = getelementptr inbounds [492 x float], [492 x float]* %13, i64 0, i64 %1096
  %1098 = load float, float* %1097, align 4
  %1099 = fmul float %1098, 0x3FD87C84C0000000
  %1100 = fadd float %1095, %1099
  %1101 = fmul float %1100, 0x3FD87C84C0000000
  %1102 = fsub float %1098, %1101
  store float %1100, float* %1097, align 4
  %1103 = add nuw nsw i64 %1082, 3
  %1104 = icmp eq i64 %1103, 240
  br i1 %1104, label %1105, label %1080

1105:                                             ; preds = %1080
  store float %1102, float* %19, align 8
  br label %1106

1106:                                             ; preds = %1106, %1105
  %1107 = phi float [ 0.000000e+00, %1105 ], [ %1128, %1106 ]
  %1108 = phi i64 [ 0, %1105 ], [ %1129, %1106 ]
  %1109 = getelementptr inbounds [492 x float], [492 x float]* %13, i64 0, i64 %1108
  %1110 = load float, float* %1109, align 4
  %1111 = fmul float %1110, 0x3FE7CED920000000
  %1112 = fadd float %1107, %1111
  %1113 = fmul float %1112, 0x3FE7CED920000000
  %1114 = fsub float %1110, %1113
  store float %1112, float* %1109, align 4
  %1115 = add nuw nsw i64 %1108, 1
  %1116 = getelementptr inbounds [492 x float], [492 x float]* %13, i64 0, i64 %1115
  %1117 = load float, float* %1116, align 4
  %1118 = fmul float %1117, 0x3FE7CED920000000
  %1119 = fadd float %1114, %1118
  %1120 = fmul float %1119, 0x3FE7CED920000000
  %1121 = fsub float %1117, %1120
  store float %1119, float* %1116, align 4
  %1122 = add nuw nsw i64 %1108, 2
  %1123 = getelementptr inbounds [492 x float], [492 x float]* %13, i64 0, i64 %1122
  %1124 = load float, float* %1123, align 4
  %1125 = fmul float %1124, 0x3FE7CED920000000
  %1126 = fadd float %1121, %1125
  %1127 = fmul float %1126, 0x3FE7CED920000000
  %1128 = fsub float %1124, %1127
  store float %1126, float* %1123, align 4
  %1129 = add nuw nsw i64 %1108, 3
  %1130 = icmp eq i64 %1129, 240
  br i1 %1130, label %1131, label %1106

1131:                                             ; preds = %1106
  store float %1128, float* %20, align 4
  br label %1132

1132:                                             ; preds = %1132, %1131
  %1133 = phi i64 [ 0, %1131 ], [ %1178, %1132 ]
  %1134 = getelementptr inbounds [492 x float], [492 x float]* %13, i64 0, i64 %1133
  %1135 = bitcast float* %1134 to <4 x i32>*
  %1136 = load <4 x i32>, <4 x i32>* %1135, align 16
  %1137 = getelementptr inbounds float, float* %1134, i64 4
  %1138 = bitcast float* %1137 to <4 x i32>*
  %1139 = load <4 x i32>, <4 x i32>* %1138, align 16
  %1140 = sub nuw nsw i64 263, %1133
  %1141 = getelementptr inbounds [492 x float], [492 x float]* %14, i64 0, i64 %1140
  %1142 = shufflevector <4 x i32> %1136, <4 x i32> undef, <4 x i32> <i32 3, i32 2, i32 1, i32 0>
  %1143 = getelementptr inbounds float, float* %1141, i64 -3
  %1144 = bitcast float* %1143 to <4 x i32>*
  store <4 x i32> %1142, <4 x i32>* %1144, align 4
  %1145 = shufflevector <4 x i32> %1139, <4 x i32> undef, <4 x i32> <i32 3, i32 2, i32 1, i32 0>
  %1146 = getelementptr inbounds float, float* %1141, i64 -7
  %1147 = bitcast float* %1146 to <4 x i32>*
  store <4 x i32> %1145, <4 x i32>* %1147, align 4
  %1148 = add nuw nsw i64 %1133, 8
  %1149 = getelementptr inbounds [492 x float], [492 x float]* %13, i64 0, i64 %1148
  %1150 = bitcast float* %1149 to <4 x i32>*
  %1151 = load <4 x i32>, <4 x i32>* %1150, align 16
  %1152 = getelementptr inbounds float, float* %1149, i64 4
  %1153 = bitcast float* %1152 to <4 x i32>*
  %1154 = load <4 x i32>, <4 x i32>* %1153, align 16
  %1155 = sub nsw i64 255, %1133
  %1156 = getelementptr inbounds [492 x float], [492 x float]* %14, i64 0, i64 %1155
  %1157 = shufflevector <4 x i32> %1151, <4 x i32> undef, <4 x i32> <i32 3, i32 2, i32 1, i32 0>
  %1158 = getelementptr inbounds float, float* %1156, i64 -3
  %1159 = bitcast float* %1158 to <4 x i32>*
  store <4 x i32> %1157, <4 x i32>* %1159, align 4
  %1160 = shufflevector <4 x i32> %1154, <4 x i32> undef, <4 x i32> <i32 3, i32 2, i32 1, i32 0>
  %1161 = getelementptr inbounds float, float* %1156, i64 -7
  %1162 = bitcast float* %1161 to <4 x i32>*
  store <4 x i32> %1160, <4 x i32>* %1162, align 4
  %1163 = add nuw nsw i64 %1133, 16
  %1164 = getelementptr inbounds [492 x float], [492 x float]* %13, i64 0, i64 %1163
  %1165 = bitcast float* %1164 to <4 x i32>*
  %1166 = load <4 x i32>, <4 x i32>* %1165, align 16
  %1167 = getelementptr inbounds float, float* %1164, i64 4
  %1168 = bitcast float* %1167 to <4 x i32>*
  %1169 = load <4 x i32>, <4 x i32>* %1168, align 16
  %1170 = sub nsw i64 247, %1133
  %1171 = getelementptr inbounds [492 x float], [492 x float]* %14, i64 0, i64 %1170
  %1172 = shufflevector <4 x i32> %1166, <4 x i32> undef, <4 x i32> <i32 3, i32 2, i32 1, i32 0>
  %1173 = getelementptr inbounds float, float* %1171, i64 -3
  %1174 = bitcast float* %1173 to <4 x i32>*
  store <4 x i32> %1172, <4 x i32>* %1174, align 4
  %1175 = shufflevector <4 x i32> %1169, <4 x i32> undef, <4 x i32> <i32 3, i32 2, i32 1, i32 0>
  %1176 = getelementptr inbounds float, float* %1171, i64 -7
  %1177 = bitcast float* %1176 to <4 x i32>*
  store <4 x i32> %1175, <4 x i32>* %1177, align 4
  %1178 = add nuw nsw i64 %1133, 24
  %1179 = icmp eq i64 %1178, 240
  br i1 %1179, label %1180, label %1132, !llvm.loop !38

1180:                                             ; preds = %1132
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 16 %10, i8* nonnull align 16 %8, i64 16, i1 false)
  br label %127
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

; Function Attrs: nofree nounwind
declare double @sin(double) local_unnamed_addr #4

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #1

attributes #0 = { nofree norecurse nounwind ssp uwtable writeonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nofree norecurse nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{!3}
!3 = distinct !{!3, !4}
!4 = distinct !{!4, !"LVerDomain"}
!5 = !{!6}
!6 = distinct !{!6, !4}
!7 = distinct !{!7, !8}
!8 = !{!"llvm.loop.isvectorized", i32 1}
!9 = distinct !{!9, !10}
!10 = !{!"llvm.loop.unroll.disable"}
!11 = distinct !{!11, !10}
!12 = distinct !{!12, !8}
!13 = distinct !{!13, !10}
!14 = distinct !{!14, !8}
!15 = distinct !{!15, !8}
!16 = distinct !{!16, !8}
!17 = !{!18}
!18 = distinct !{!18, !19}
!19 = distinct !{!19, !"LVerDomain"}
!20 = !{!21}
!21 = distinct !{!21, !19}
!22 = !{!23}
!23 = distinct !{!23, !19}
!24 = !{!25}
!25 = distinct !{!25, !19}
!26 = distinct !{!26, !8}
!27 = !{!28}
!28 = distinct !{!28, !29}
!29 = distinct !{!29, !"LVerDomain"}
!30 = !{!31}
!31 = distinct !{!31, !29}
!32 = !{!33}
!33 = distinct !{!33, !29}
!34 = !{!35}
!35 = distinct !{!35, !29}
!36 = distinct !{!36, !8}
!37 = distinct !{!37, !8}
!38 = distinct !{!38, !8}
