; ModuleID = '../../third_party/tflite/src/tensorflow/lite/kernels/floor.cc'
source_filename = "../../third_party/tflite/src/tensorflow/lite/kernels/floor.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%struct.TfLiteContext = type { i64, i32 (%struct.TfLiteContext*, %struct.TfLiteIntArray**)*, %struct.TfLiteTensor*, i8*, i32 (%struct.TfLiteContext*, %struct.TfLiteTensor*, %struct.TfLiteIntArray*)*, void (%struct.TfLiteContext*, i8*, ...)*, i32 (%struct.TfLiteContext*, i32, i32*)*, i32 (%struct.TfLiteContext*, i32, %struct.TfLiteNode**, %struct.TfLiteRegistration**)*, i32 (%struct.TfLiteContext*, %struct.TfLiteRegistration*, %struct.TfLiteIntArray*, %struct.TfLiteDelegate*)*, i32, %struct.TfLiteExternalContext* (%struct.TfLiteContext*, i32)*, void (%struct.TfLiteContext*, i32, %struct.TfLiteExternalContext*)*, i8, i8*, i32 (%struct.TfLiteContext*, i64, i8**)*, i32 (%struct.TfLiteContext*, i64, i8**)*, i32 (%struct.TfLiteContext*, i64, i32*)*, i8* (%struct.TfLiteContext*, i32)*, i32 (%struct.TfLiteContext*, %struct.TfLiteTensor*, i32, i32*)*, i32 (%struct.TfLiteContext*, %struct.TfLiteIntArray*, %struct.TfLiteDelegateParams**, i32*)* }
%struct.TfLiteIntArray = type { i32, [0 x i32] }
%struct.TfLiteTensor = type { i32, %union.TfLitePtrUnion, %struct.TfLiteIntArray*, %struct.TfLiteQuantizationParams, i32, i64, i8*, i8*, %struct.TfLiteDelegate*, i32, i8, i8, %struct.TfLiteQuantization, %struct.TfLiteSparsity*, %struct.TfLiteIntArray* }
%union.TfLitePtrUnion = type { i32* }
%struct.TfLiteQuantizationParams = type { float, i32 }
%struct.TfLiteDelegate = type { i8*, i32 (%struct.TfLiteContext*, %struct.TfLiteDelegate*)*, i32 (%struct.TfLiteContext*, %struct.TfLiteDelegate*, i32, %struct.TfLiteTensor*)*, i32 (%struct.TfLiteContext*, %struct.TfLiteDelegate*, i32, %struct.TfLiteTensor*)*, void (%struct.TfLiteContext*, %struct.TfLiteDelegate*, i32*)*, i64 }
%struct.TfLiteQuantization = type { i32, i8* }
%struct.TfLiteSparsity = type { %struct.TfLiteIntArray*, %struct.TfLiteIntArray*, %struct.TfLiteDimensionMetadata*, i32 }
%struct.TfLiteDimensionMetadata = type { i32, i32, %struct.TfLiteIntArray*, %struct.TfLiteIntArray* }
%struct.TfLiteNode = type { %struct.TfLiteIntArray*, %struct.TfLiteIntArray*, %struct.TfLiteIntArray*, %struct.TfLiteIntArray*, i8*, i8*, i8*, i32, %struct.TfLiteDelegate* }
%struct.TfLiteRegistration = type { i8* (%struct.TfLiteContext*, i8*, i64)*, void (%struct.TfLiteContext*, i8*)*, {}*, {}*, i8* (%struct.TfLiteContext*, %struct.TfLiteNode*)*, i32, i8*, i32 }
%struct.TfLiteExternalContext = type { i32, i32 (%struct.TfLiteContext*)* }
%struct.TfLiteDelegateParams = type { %struct.TfLiteDelegate*, %struct.TfLiteIntArray*, %struct.TfLiteIntArray*, %struct.TfLiteIntArray* }
%"class.tflite::RuntimeShape" = type { i32, %union.anon }
%union.anon = type { i32*, [16 x i8] }

$_ZN6tflite3ops7builtin5floor4EvalILNS2_10KernelTypeE0EEE12TfLiteStatusP13TfLiteContextP10TfLiteNode = comdat any

$_ZN6tflite3ops7builtin5floor4EvalILNS2_10KernelTypeE1EEE12TfLiteStatusP13TfLiteContextP10TfLiteNode = comdat any

@.str = private unnamed_addr constant [26 x i8] c"%s:%d %s != %s (%d != %d)\00", align 1
@.str.3 = private unnamed_addr constant [62 x i8] c"../../third_party/tflite/src/tensorflow/lite/kernels/floor.cc\00", align 1
@.str.4 = private unnamed_addr constant [16 x i8] c"NumInputs(node)\00", align 1
@.str.5 = private unnamed_addr constant [2 x i8] c"1\00", align 1
@.str.6 = private unnamed_addr constant [17 x i8] c"NumOutputs(node)\00", align 1
@.str.7 = private unnamed_addr constant [26 x i8] c"%s:%d %s != %s (%s != %s)\00", align 1
@.str.8 = private unnamed_addr constant [12 x i8] c"input->type\00", align 1
@.str.9 = private unnamed_addr constant [15 x i8] c"kTfLiteFloat32\00", align 1
@_ZZN6tflite3ops7builtin18Register_FLOOR_REFEvE1r = internal global { i8* (%struct.TfLiteContext*, i8*, i64)*, void (%struct.TfLiteContext*, i8*)*, i32 (%struct.TfLiteContext*, %struct.TfLiteNode*)*, i32 (%struct.TfLiteContext*, %struct.TfLiteNode*)*, i8* (%struct.TfLiteContext*, %struct.TfLiteNode*)*, i32, i8*, i32 } { i8* (%struct.TfLiteContext*, i8*, i64)* null, void (%struct.TfLiteContext*, i8*)* null, i32 (%struct.TfLiteContext*, %struct.TfLiteNode*)* @_ZN6tflite3ops7builtin5floor7PrepareEP13TfLiteContextP10TfLiteNode, i32 (%struct.TfLiteContext*, %struct.TfLiteNode*)* @_ZN6tflite3ops7builtin5floor4EvalILNS2_10KernelTypeE0EEE12TfLiteStatusP13TfLiteContextP10TfLiteNode, i8* (%struct.TfLiteContext*, %struct.TfLiteNode*)* null, i32 0, i8* null, i32 0 }, align 8
@_ZZN6tflite3ops7builtin14Register_FLOOREvE1r = internal global { i8* (%struct.TfLiteContext*, i8*, i64)*, void (%struct.TfLiteContext*, i8*)*, i32 (%struct.TfLiteContext*, %struct.TfLiteNode*)*, i32 (%struct.TfLiteContext*, %struct.TfLiteNode*)*, i8* (%struct.TfLiteContext*, %struct.TfLiteNode*)*, i32, i8*, i32 } { i8* (%struct.TfLiteContext*, i8*, i64)* null, void (%struct.TfLiteContext*, i8*)* null, i32 (%struct.TfLiteContext*, %struct.TfLiteNode*)* @_ZN6tflite3ops7builtin5floor7PrepareEP13TfLiteContextP10TfLiteNode, i32 (%struct.TfLiteContext*, %struct.TfLiteNode*)* @_ZN6tflite3ops7builtin5floor4EvalILNS2_10KernelTypeE1EEE12TfLiteStatusP13TfLiteContextP10TfLiteNode, i8* (%struct.TfLiteContext*, %struct.TfLiteNode*)* null, i32 0, i8* null, i32 0 }, align 8
@llvm.global_ctors = appending global [0 x { i32, void ()*, i8* }] zeroinitializer

; Function Attrs: nounwind ssp uwtable
define hidden i32 @_ZN6tflite3ops7builtin5floor7PrepareEP13TfLiteContextP10TfLiteNode(%struct.TfLiteContext*, %struct.TfLiteNode* nocapture readonly) #0 {
  %3 = getelementptr inbounds %struct.TfLiteNode, %struct.TfLiteNode* %1, i64 0, i32 0
  %4 = load %struct.TfLiteIntArray*, %struct.TfLiteIntArray** %3, align 8
  %5 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %4, i64 0, i32 1, i64 0
  %6 = load i32, i32* %5, align 4
  %7 = icmp slt i32 %6, 0
  br i1 %7, label %13, label %8

8:                                                ; preds = %2
  %9 = getelementptr inbounds %struct.TfLiteContext, %struct.TfLiteContext* %0, i64 0, i32 2
  %10 = load %struct.TfLiteTensor*, %struct.TfLiteTensor** %9, align 8
  %11 = sext i32 %6 to i64
  %12 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %10, i64 %11
  br label %13

13:                                               ; preds = %2, %8
  %14 = phi %struct.TfLiteTensor* [ %12, %8 ], [ null, %2 ]
  %15 = getelementptr inbounds %struct.TfLiteNode, %struct.TfLiteNode* %1, i64 0, i32 1
  %16 = load %struct.TfLiteIntArray*, %struct.TfLiteIntArray** %15, align 8
  %17 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %16, i64 0, i32 1, i64 0
  %18 = load i32, i32* %17, align 4
  %19 = icmp slt i32 %18, 0
  br i1 %19, label %25, label %20

20:                                               ; preds = %13
  %21 = getelementptr inbounds %struct.TfLiteContext, %struct.TfLiteContext* %0, i64 0, i32 2
  %22 = load %struct.TfLiteTensor*, %struct.TfLiteTensor** %21, align 8
  %23 = sext i32 %18 to i64
  %24 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %22, i64 %23
  br label %25

25:                                               ; preds = %13, %20
  %26 = phi %struct.TfLiteTensor* [ %24, %20 ], [ null, %13 ]
  %27 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %4, i64 0, i32 0
  %28 = load i32, i32* %27, align 4
  %29 = icmp eq i32 %28, 1
  br i1 %29, label %33, label %30

30:                                               ; preds = %25
  %31 = getelementptr inbounds %struct.TfLiteContext, %struct.TfLiteContext* %0, i64 0, i32 5
  %32 = load void (%struct.TfLiteContext*, i8*, ...)*, void (%struct.TfLiteContext*, i8*, ...)** %31, align 8
  tail call void (%struct.TfLiteContext*, i8*, ...) %32(%struct.TfLiteContext* %0, i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str, i64 0, i64 0), i8* getelementptr inbounds ([62 x i8], [62 x i8]* @.str.3, i64 0, i64 0), i32 40, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.4, i64 0, i64 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.5, i64 0, i64 0), i32 %28, i32 1) #9
  br label %57

33:                                               ; preds = %25
  %34 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %16, i64 0, i32 0
  %35 = load i32, i32* %34, align 4
  %36 = icmp eq i32 %35, 1
  br i1 %36, label %40, label %37

37:                                               ; preds = %33
  %38 = getelementptr inbounds %struct.TfLiteContext, %struct.TfLiteContext* %0, i64 0, i32 5
  %39 = load void (%struct.TfLiteContext*, i8*, ...)*, void (%struct.TfLiteContext*, i8*, ...)** %38, align 8
  tail call void (%struct.TfLiteContext*, i8*, ...) %39(%struct.TfLiteContext* %0, i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str, i64 0, i64 0), i8* getelementptr inbounds ([62 x i8], [62 x i8]* @.str.3, i64 0, i64 0), i32 41, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.6, i64 0, i64 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.5, i64 0, i64 0), i32 %35, i32 1) #9
  br label %57

40:                                               ; preds = %33
  %41 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %14, i64 0, i32 0
  %42 = load i32, i32* %41, align 8
  %43 = icmp eq i32 %42, 1
  br i1 %43, label %49, label %44

44:                                               ; preds = %40
  %45 = getelementptr inbounds %struct.TfLiteContext, %struct.TfLiteContext* %0, i64 0, i32 5
  %46 = load void (%struct.TfLiteContext*, i8*, ...)*, void (%struct.TfLiteContext*, i8*, ...)** %45, align 8
  %47 = tail call i8* @TfLiteTypeGetName(i32 %42) #9
  %48 = tail call i8* @TfLiteTypeGetName(i32 1) #9
  tail call void (%struct.TfLiteContext*, i8*, ...) %46(%struct.TfLiteContext* %0, i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.7, i64 0, i64 0), i8* getelementptr inbounds ([62 x i8], [62 x i8]* @.str.3, i64 0, i64 0), i32 42, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.8, i64 0, i64 0), i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.9, i64 0, i64 0), i8* %47, i8* %48) #9
  br label %57

49:                                               ; preds = %40
  %50 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %26, i64 0, i32 0
  store i32 1, i32* %50, align 8
  %51 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %14, i64 0, i32 2
  %52 = load %struct.TfLiteIntArray*, %struct.TfLiteIntArray** %51, align 8
  %53 = tail call %struct.TfLiteIntArray* @TfLiteIntArrayCopy(%struct.TfLiteIntArray* %52) #9
  %54 = getelementptr inbounds %struct.TfLiteContext, %struct.TfLiteContext* %0, i64 0, i32 4
  %55 = load i32 (%struct.TfLiteContext*, %struct.TfLiteTensor*, %struct.TfLiteIntArray*)*, i32 (%struct.TfLiteContext*, %struct.TfLiteTensor*, %struct.TfLiteIntArray*)** %54, align 8
  %56 = tail call i32 %55(%struct.TfLiteContext* %0, %struct.TfLiteTensor* %26, %struct.TfLiteIntArray* %53) #9
  br label %57

57:                                               ; preds = %49, %44, %37, %30
  %58 = phi i32 [ 1, %30 ], [ 1, %37 ], [ 1, %44 ], [ %56, %49 ]
  ret i32 %58
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

declare i8* @TfLiteTypeGetName(i32) local_unnamed_addr #2

declare %struct.TfLiteIntArray* @TfLiteIntArrayCopy(%struct.TfLiteIntArray*) local_unnamed_addr #2

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden %struct.TfLiteRegistration* @_ZN6tflite3ops7builtin18Register_FLOOR_REFEv() local_unnamed_addr #3 {
  ret %struct.TfLiteRegistration* bitcast ({ i8* (%struct.TfLiteContext*, i8*, i64)*, void (%struct.TfLiteContext*, i8*)*, i32 (%struct.TfLiteContext*, %struct.TfLiteNode*)*, i32 (%struct.TfLiteContext*, %struct.TfLiteNode*)*, i8* (%struct.TfLiteContext*, %struct.TfLiteNode*)*, i32, i8*, i32 }* @_ZZN6tflite3ops7builtin18Register_FLOOR_REFEvE1r to %struct.TfLiteRegistration*)
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden i32 @_ZN6tflite3ops7builtin5floor4EvalILNS2_10KernelTypeE0EEE12TfLiteStatusP13TfLiteContextP10TfLiteNode(%struct.TfLiteContext*, %struct.TfLiteNode*) #0 comdat {
  %3 = alloca %"class.tflite::RuntimeShape", align 8
  %4 = alloca %"class.tflite::RuntimeShape", align 8
  %5 = getelementptr inbounds %struct.TfLiteNode, %struct.TfLiteNode* %1, i64 0, i32 0
  %6 = load %struct.TfLiteIntArray*, %struct.TfLiteIntArray** %5, align 8
  %7 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %6, i64 0, i32 1, i64 0
  %8 = load i32, i32* %7, align 4
  %9 = icmp slt i32 %8, 0
  br i1 %9, label %15, label %10

10:                                               ; preds = %2
  %11 = getelementptr inbounds %struct.TfLiteContext, %struct.TfLiteContext* %0, i64 0, i32 2
  %12 = load %struct.TfLiteTensor*, %struct.TfLiteTensor** %11, align 8
  %13 = sext i32 %8 to i64
  %14 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %12, i64 %13
  br label %15

15:                                               ; preds = %2, %10
  %16 = phi %struct.TfLiteTensor* [ %14, %10 ], [ null, %2 ]
  %17 = getelementptr inbounds %struct.TfLiteNode, %struct.TfLiteNode* %1, i64 0, i32 1
  %18 = load %struct.TfLiteIntArray*, %struct.TfLiteIntArray** %17, align 8
  %19 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %18, i64 0, i32 1, i64 0
  %20 = load i32, i32* %19, align 4
  %21 = icmp slt i32 %20, 0
  br i1 %21, label %27, label %22

22:                                               ; preds = %15
  %23 = getelementptr inbounds %struct.TfLiteContext, %struct.TfLiteContext* %0, i64 0, i32 2
  %24 = load %struct.TfLiteTensor*, %struct.TfLiteTensor** %23, align 8
  %25 = sext i32 %20 to i64
  %26 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %24, i64 %25
  br label %27

27:                                               ; preds = %15, %22
  %28 = phi %struct.TfLiteTensor* [ %26, %22 ], [ null, %15 ]
  %29 = bitcast %"class.tflite::RuntimeShape"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %29) #9
  %30 = icmp eq %struct.TfLiteTensor* %16, null
  br i1 %30, label %31, label %33

31:                                               ; preds = %27
  %32 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %3, i64 0, i32 0
  store i32 0, i32* %32, align 8, !alias.scope !2
  br label %62

33:                                               ; preds = %27
  %34 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %16, i64 0, i32 2
  %35 = load %struct.TfLiteIntArray*, %struct.TfLiteIntArray** %34, align 8, !noalias !2
  %36 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %35, i64 0, i32 0
  %37 = load i32, i32* %36, align 4, !noalias !2
  %38 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %35, i64 0, i32 1, i64 0
  %39 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %3, i64 0, i32 0
  store i32 %37, i32* %39, align 8, !alias.scope !2
  %40 = icmp sgt i32 %37, 5
  br i1 %40, label %41, label %48

41:                                               ; preds = %33
  %42 = sext i32 %37 to i64
  %43 = shl nsw i64 %42, 2
  %44 = tail call i8* @_Znam(i64 %43) #10, !noalias !2
  %45 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %3, i64 0, i32 1, i32 0
  %46 = bitcast i32** %45 to i8**
  store i8* %44, i8** %46, align 8, !alias.scope !2
  %47 = bitcast i8* %44 to i32*
  br label %53

48:                                               ; preds = %33
  %49 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %3, i64 0, i32 1
  %50 = bitcast %union.anon* %49 to i32*
  %51 = sext i32 %37 to i64
  %52 = shl nsw i64 %51, 2
  br label %53

53:                                               ; preds = %48, %41
  %54 = phi i64 [ %43, %41 ], [ %52, %48 ]
  %55 = phi i32* [ %47, %41 ], [ %50, %48 ]
  %56 = bitcast i32* %55 to i8*
  %57 = bitcast i32* %38 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %56, i8* align 4 %57, i64 %54, i1 false) #9
  %58 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %16, i64 0, i32 1
  %59 = bitcast %union.TfLitePtrUnion* %58 to float**
  %60 = load float*, float** %59, align 8
  %61 = bitcast float* %60 to i8*
  br label %62

62:                                               ; preds = %31, %53
  %63 = phi i32 [ %37, %53 ], [ 0, %31 ]
  %64 = phi i8* [ %61, %53 ], [ null, %31 ]
  %65 = phi float* [ %60, %53 ], [ null, %31 ]
  %66 = bitcast %"class.tflite::RuntimeShape"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %66) #9
  %67 = icmp eq %struct.TfLiteTensor* %28, null
  br i1 %67, label %68, label %70

68:                                               ; preds = %62
  %69 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %4, i64 0, i32 0
  store i32 0, i32* %69, align 8, !alias.scope !5
  br label %99

70:                                               ; preds = %62
  %71 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %28, i64 0, i32 2
  %72 = load %struct.TfLiteIntArray*, %struct.TfLiteIntArray** %71, align 8, !noalias !5
  %73 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %72, i64 0, i32 0
  %74 = load i32, i32* %73, align 4, !noalias !5
  %75 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %72, i64 0, i32 1, i64 0
  %76 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %4, i64 0, i32 0
  store i32 %74, i32* %76, align 8, !alias.scope !5
  %77 = icmp sgt i32 %74, 5
  br i1 %77, label %78, label %85

78:                                               ; preds = %70
  %79 = sext i32 %74 to i64
  %80 = shl nsw i64 %79, 2
  %81 = tail call i8* @_Znam(i64 %80) #10, !noalias !5
  %82 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %4, i64 0, i32 1, i32 0
  %83 = bitcast i32** %82 to i8**
  store i8* %81, i8** %83, align 8, !alias.scope !5
  %84 = bitcast i8* %81 to i32*
  br label %90

85:                                               ; preds = %70
  %86 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %4, i64 0, i32 1
  %87 = bitcast %union.anon* %86 to i32*
  %88 = sext i32 %74 to i64
  %89 = shl nsw i64 %88, 2
  br label %90

90:                                               ; preds = %85, %78
  %91 = phi i64 [ %80, %78 ], [ %89, %85 ]
  %92 = phi i32* [ %84, %78 ], [ %87, %85 ]
  %93 = bitcast i32* %92 to i8*
  %94 = bitcast i32* %75 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %93, i8* align 4 %94, i64 %91, i1 false) #9
  %95 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %28, i64 0, i32 1
  %96 = bitcast %union.TfLitePtrUnion* %95 to float**
  %97 = load float*, float** %96, align 8
  %98 = bitcast float* %97 to i8*
  br label %99

99:                                               ; preds = %68, %90
  %100 = phi i32 [ %74, %90 ], [ 0, %68 ]
  %101 = phi i8* [ %98, %90 ], [ null, %68 ]
  %102 = phi float* [ %97, %90 ], [ null, %68 ]
  %103 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %3, i64 0, i32 1
  %104 = icmp sgt i32 %63, 5
  br i1 %104, label %105, label %108

105:                                              ; preds = %99
  %106 = getelementptr inbounds %union.anon, %union.anon* %103, i64 0, i32 0
  %107 = load i32*, i32** %106, align 8
  br label %111

108:                                              ; preds = %99
  %109 = bitcast %union.anon* %103 to i32*
  %110 = icmp sgt i32 %63, 0
  br i1 %110, label %111, label %214

111:                                              ; preds = %108, %105
  %112 = phi i32* [ %107, %105 ], [ %109, %108 ]
  %113 = zext i32 %63 to i64
  %114 = icmp ult i32 %63, 8
  br i1 %114, label %200, label %115

115:                                              ; preds = %111
  %116 = and i64 %113, 4294967288
  %117 = add nsw i64 %116, -8
  %118 = lshr exact i64 %117, 3
  %119 = add nuw nsw i64 %118, 1
  %120 = and i64 %119, 3
  %121 = icmp ult i64 %117, 24
  br i1 %121, label %167, label %122

122:                                              ; preds = %115
  %123 = sub nsw i64 %119, %120
  br label %124

124:                                              ; preds = %124, %122
  %125 = phi i64 [ 0, %122 ], [ %164, %124 ]
  %126 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %122 ], [ %162, %124 ]
  %127 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %122 ], [ %163, %124 ]
  %128 = phi i64 [ %123, %122 ], [ %165, %124 ]
  %129 = getelementptr inbounds i32, i32* %112, i64 %125
  %130 = bitcast i32* %129 to <4 x i32>*
  %131 = load <4 x i32>, <4 x i32>* %130, align 4
  %132 = getelementptr inbounds i32, i32* %129, i64 4
  %133 = bitcast i32* %132 to <4 x i32>*
  %134 = load <4 x i32>, <4 x i32>* %133, align 4
  %135 = mul nsw <4 x i32> %131, %126
  %136 = mul nsw <4 x i32> %134, %127
  %137 = or i64 %125, 8
  %138 = getelementptr inbounds i32, i32* %112, i64 %137
  %139 = bitcast i32* %138 to <4 x i32>*
  %140 = load <4 x i32>, <4 x i32>* %139, align 4
  %141 = getelementptr inbounds i32, i32* %138, i64 4
  %142 = bitcast i32* %141 to <4 x i32>*
  %143 = load <4 x i32>, <4 x i32>* %142, align 4
  %144 = mul nsw <4 x i32> %140, %135
  %145 = mul nsw <4 x i32> %143, %136
  %146 = or i64 %125, 16
  %147 = getelementptr inbounds i32, i32* %112, i64 %146
  %148 = bitcast i32* %147 to <4 x i32>*
  %149 = load <4 x i32>, <4 x i32>* %148, align 4
  %150 = getelementptr inbounds i32, i32* %147, i64 4
  %151 = bitcast i32* %150 to <4 x i32>*
  %152 = load <4 x i32>, <4 x i32>* %151, align 4
  %153 = mul nsw <4 x i32> %149, %144
  %154 = mul nsw <4 x i32> %152, %145
  %155 = or i64 %125, 24
  %156 = getelementptr inbounds i32, i32* %112, i64 %155
  %157 = bitcast i32* %156 to <4 x i32>*
  %158 = load <4 x i32>, <4 x i32>* %157, align 4
  %159 = getelementptr inbounds i32, i32* %156, i64 4
  %160 = bitcast i32* %159 to <4 x i32>*
  %161 = load <4 x i32>, <4 x i32>* %160, align 4
  %162 = mul nsw <4 x i32> %158, %153
  %163 = mul nsw <4 x i32> %161, %154
  %164 = add i64 %125, 32
  %165 = add i64 %128, -4
  %166 = icmp eq i64 %165, 0
  br i1 %166, label %167, label %124, !llvm.loop !8

167:                                              ; preds = %124, %115
  %168 = phi <4 x i32> [ undef, %115 ], [ %162, %124 ]
  %169 = phi <4 x i32> [ undef, %115 ], [ %163, %124 ]
  %170 = phi i64 [ 0, %115 ], [ %164, %124 ]
  %171 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %115 ], [ %162, %124 ]
  %172 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %115 ], [ %163, %124 ]
  %173 = icmp eq i64 %120, 0
  br i1 %173, label %190, label %174

174:                                              ; preds = %167, %174
  %175 = phi i64 [ %187, %174 ], [ %170, %167 ]
  %176 = phi <4 x i32> [ %185, %174 ], [ %171, %167 ]
  %177 = phi <4 x i32> [ %186, %174 ], [ %172, %167 ]
  %178 = phi i64 [ %188, %174 ], [ %120, %167 ]
  %179 = getelementptr inbounds i32, i32* %112, i64 %175
  %180 = bitcast i32* %179 to <4 x i32>*
  %181 = load <4 x i32>, <4 x i32>* %180, align 4
  %182 = getelementptr inbounds i32, i32* %179, i64 4
  %183 = bitcast i32* %182 to <4 x i32>*
  %184 = load <4 x i32>, <4 x i32>* %183, align 4
  %185 = mul nsw <4 x i32> %181, %176
  %186 = mul nsw <4 x i32> %184, %177
  %187 = add i64 %175, 8
  %188 = add i64 %178, -1
  %189 = icmp eq i64 %188, 0
  br i1 %189, label %190, label %174, !llvm.loop !10

190:                                              ; preds = %174, %167
  %191 = phi <4 x i32> [ %168, %167 ], [ %185, %174 ]
  %192 = phi <4 x i32> [ %169, %167 ], [ %186, %174 ]
  %193 = mul <4 x i32> %192, %191
  %194 = shufflevector <4 x i32> %193, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %195 = mul <4 x i32> %193, %194
  %196 = shufflevector <4 x i32> %195, <4 x i32> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %197 = mul <4 x i32> %195, %196
  %198 = extractelement <4 x i32> %197, i32 0
  %199 = icmp eq i64 %116, %113
  br i1 %199, label %211, label %200

200:                                              ; preds = %190, %111
  %201 = phi i64 [ 0, %111 ], [ %116, %190 ]
  %202 = phi i32 [ 1, %111 ], [ %198, %190 ]
  br label %203

203:                                              ; preds = %200, %203
  %204 = phi i64 [ %209, %203 ], [ %201, %200 ]
  %205 = phi i32 [ %208, %203 ], [ %202, %200 ]
  %206 = getelementptr inbounds i32, i32* %112, i64 %204
  %207 = load i32, i32* %206, align 4
  %208 = mul nsw i32 %207, %205
  %209 = add nuw nsw i64 %204, 1
  %210 = icmp eq i64 %209, %113
  br i1 %210, label %211, label %203, !llvm.loop !12

211:                                              ; preds = %203, %190
  %212 = phi i32 [ %198, %190 ], [ %208, %203 ]
  %213 = icmp sgt i32 %212, 0
  br i1 %213, label %214, label %327

214:                                              ; preds = %211, %108
  %215 = phi i32 [ %212, %211 ], [ 1, %108 ]
  %216 = zext i32 %215 to i64
  %217 = icmp ult i32 %215, 4
  br i1 %217, label %285, label %218

218:                                              ; preds = %214
  %219 = getelementptr float, float* %102, i64 %216
  %220 = bitcast float* %219 to i8*
  %221 = getelementptr float, float* %65, i64 %216
  %222 = bitcast float* %221 to i8*
  %223 = icmp ult i8* %101, %222
  %224 = icmp ult i8* %64, %220
  %225 = and i1 %223, %224
  br i1 %225, label %285, label %226

226:                                              ; preds = %218
  %227 = and i64 %216, 4294967292
  %228 = add nsw i64 %227, -4
  %229 = lshr exact i64 %228, 2
  %230 = add nuw nsw i64 %229, 1
  %231 = and i64 %230, 3
  %232 = icmp ult i64 %228, 12
  br i1 %232, label %268, label %233

233:                                              ; preds = %226
  %234 = sub nsw i64 %230, %231
  br label %235

235:                                              ; preds = %235, %233
  %236 = phi i64 [ 0, %233 ], [ %265, %235 ]
  %237 = phi i64 [ %234, %233 ], [ %266, %235 ]
  %238 = getelementptr inbounds float, float* %65, i64 %236
  %239 = bitcast float* %238 to <4 x float>*
  %240 = load <4 x float>, <4 x float>* %239, align 4, !alias.scope !14
  %241 = call <4 x float> @llvm.floor.v4f32(<4 x float> %240)
  %242 = getelementptr inbounds float, float* %102, i64 %236
  %243 = bitcast float* %242 to <4 x float>*
  store <4 x float> %241, <4 x float>* %243, align 4, !alias.scope !17, !noalias !14
  %244 = or i64 %236, 4
  %245 = getelementptr inbounds float, float* %65, i64 %244
  %246 = bitcast float* %245 to <4 x float>*
  %247 = load <4 x float>, <4 x float>* %246, align 4, !alias.scope !14
  %248 = call <4 x float> @llvm.floor.v4f32(<4 x float> %247)
  %249 = getelementptr inbounds float, float* %102, i64 %244
  %250 = bitcast float* %249 to <4 x float>*
  store <4 x float> %248, <4 x float>* %250, align 4, !alias.scope !17, !noalias !14
  %251 = or i64 %236, 8
  %252 = getelementptr inbounds float, float* %65, i64 %251
  %253 = bitcast float* %252 to <4 x float>*
  %254 = load <4 x float>, <4 x float>* %253, align 4, !alias.scope !14
  %255 = call <4 x float> @llvm.floor.v4f32(<4 x float> %254)
  %256 = getelementptr inbounds float, float* %102, i64 %251
  %257 = bitcast float* %256 to <4 x float>*
  store <4 x float> %255, <4 x float>* %257, align 4, !alias.scope !17, !noalias !14
  %258 = or i64 %236, 12
  %259 = getelementptr inbounds float, float* %65, i64 %258
  %260 = bitcast float* %259 to <4 x float>*
  %261 = load <4 x float>, <4 x float>* %260, align 4, !alias.scope !14
  %262 = call <4 x float> @llvm.floor.v4f32(<4 x float> %261)
  %263 = getelementptr inbounds float, float* %102, i64 %258
  %264 = bitcast float* %263 to <4 x float>*
  store <4 x float> %262, <4 x float>* %264, align 4, !alias.scope !17, !noalias !14
  %265 = add i64 %236, 16
  %266 = add i64 %237, -4
  %267 = icmp eq i64 %266, 0
  br i1 %267, label %268, label %235, !llvm.loop !19

268:                                              ; preds = %235, %226
  %269 = phi i64 [ 0, %226 ], [ %265, %235 ]
  %270 = icmp eq i64 %231, 0
  br i1 %270, label %283, label %271

271:                                              ; preds = %268, %271
  %272 = phi i64 [ %280, %271 ], [ %269, %268 ]
  %273 = phi i64 [ %281, %271 ], [ %231, %268 ]
  %274 = getelementptr inbounds float, float* %65, i64 %272
  %275 = bitcast float* %274 to <4 x float>*
  %276 = load <4 x float>, <4 x float>* %275, align 4, !alias.scope !14
  %277 = call <4 x float> @llvm.floor.v4f32(<4 x float> %276)
  %278 = getelementptr inbounds float, float* %102, i64 %272
  %279 = bitcast float* %278 to <4 x float>*
  store <4 x float> %277, <4 x float>* %279, align 4, !alias.scope !17, !noalias !14
  %280 = add i64 %272, 4
  %281 = add i64 %273, -1
  %282 = icmp eq i64 %281, 0
  br i1 %282, label %283, label %271, !llvm.loop !20

283:                                              ; preds = %271, %268
  %284 = icmp eq i64 %227, %216
  br i1 %284, label %327, label %285

285:                                              ; preds = %283, %218, %214
  %286 = phi i64 [ 0, %218 ], [ 0, %214 ], [ %227, %283 ]
  %287 = xor i64 %286, -1
  %288 = add nsw i64 %287, %216
  %289 = and i64 %216, 3
  %290 = icmp eq i64 %289, 0
  br i1 %290, label %301, label %291

291:                                              ; preds = %285, %291
  %292 = phi i64 [ %298, %291 ], [ %286, %285 ]
  %293 = phi i64 [ %299, %291 ], [ %289, %285 ]
  %294 = getelementptr inbounds float, float* %65, i64 %292
  %295 = load float, float* %294, align 4
  %296 = tail call float @llvm.floor.f32(float %295) #9
  %297 = getelementptr inbounds float, float* %102, i64 %292
  store float %296, float* %297, align 4
  %298 = add nuw nsw i64 %292, 1
  %299 = add i64 %293, -1
  %300 = icmp eq i64 %299, 0
  br i1 %300, label %301, label %291, !llvm.loop !21

301:                                              ; preds = %291, %285
  %302 = phi i64 [ %286, %285 ], [ %298, %291 ]
  %303 = icmp ult i64 %288, 3
  br i1 %303, label %327, label %304

304:                                              ; preds = %301, %304
  %305 = phi i64 [ %325, %304 ], [ %302, %301 ]
  %306 = getelementptr inbounds float, float* %65, i64 %305
  %307 = load float, float* %306, align 4
  %308 = tail call float @llvm.floor.f32(float %307) #9
  %309 = getelementptr inbounds float, float* %102, i64 %305
  store float %308, float* %309, align 4
  %310 = add nuw nsw i64 %305, 1
  %311 = getelementptr inbounds float, float* %65, i64 %310
  %312 = load float, float* %311, align 4
  %313 = tail call float @llvm.floor.f32(float %312) #9
  %314 = getelementptr inbounds float, float* %102, i64 %310
  store float %313, float* %314, align 4
  %315 = add nuw nsw i64 %305, 2
  %316 = getelementptr inbounds float, float* %65, i64 %315
  %317 = load float, float* %316, align 4
  %318 = tail call float @llvm.floor.f32(float %317) #9
  %319 = getelementptr inbounds float, float* %102, i64 %315
  store float %318, float* %319, align 4
  %320 = add nuw nsw i64 %305, 3
  %321 = getelementptr inbounds float, float* %65, i64 %320
  %322 = load float, float* %321, align 4
  %323 = tail call float @llvm.floor.f32(float %322) #9
  %324 = getelementptr inbounds float, float* %102, i64 %320
  store float %323, float* %324, align 4
  %325 = add nuw nsw i64 %305, 4
  %326 = icmp eq i64 %325, %216
  br i1 %326, label %327, label %304, !llvm.loop !22

327:                                              ; preds = %301, %304, %283, %211
  %328 = icmp sgt i32 %100, 5
  br i1 %328, label %329, label %335

329:                                              ; preds = %327
  %330 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %4, i64 0, i32 1, i32 0
  %331 = load i32*, i32** %330, align 8
  %332 = icmp eq i32* %331, null
  br i1 %332, label %335, label %333

333:                                              ; preds = %329
  %334 = bitcast i32* %331 to i8*
  tail call void @_ZdaPv(i8* %334) #10
  br label %335

335:                                              ; preds = %327, %329, %333
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %66) #9
  br i1 %104, label %336, label %342

336:                                              ; preds = %335
  %337 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %3, i64 0, i32 1, i32 0
  %338 = load i32*, i32** %337, align 8
  %339 = icmp eq i32* %338, null
  br i1 %339, label %342, label %340

340:                                              ; preds = %336
  %341 = bitcast i32* %338 to i8*
  tail call void @_ZdaPv(i8* %341) #10
  br label %342

342:                                              ; preds = %335, %336, %340
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %29) #9
  ret i32 0
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden %struct.TfLiteRegistration* @_ZN6tflite3ops7builtin14Register_FLOOREv() local_unnamed_addr #3 {
  ret %struct.TfLiteRegistration* bitcast ({ i8* (%struct.TfLiteContext*, i8*, i64)*, void (%struct.TfLiteContext*, i8*)*, i32 (%struct.TfLiteContext*, %struct.TfLiteNode*)*, i32 (%struct.TfLiteContext*, %struct.TfLiteNode*)*, i8* (%struct.TfLiteContext*, %struct.TfLiteNode*)*, i32, i8*, i32 }* @_ZZN6tflite3ops7builtin14Register_FLOOREvE1r to %struct.TfLiteRegistration*)
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden i32 @_ZN6tflite3ops7builtin5floor4EvalILNS2_10KernelTypeE1EEE12TfLiteStatusP13TfLiteContextP10TfLiteNode(%struct.TfLiteContext*, %struct.TfLiteNode*) #4 comdat {
  %3 = alloca %"class.tflite::RuntimeShape", align 8
  %4 = alloca %"class.tflite::RuntimeShape", align 8
  %5 = getelementptr inbounds %struct.TfLiteNode, %struct.TfLiteNode* %1, i64 0, i32 0
  %6 = load %struct.TfLiteIntArray*, %struct.TfLiteIntArray** %5, align 8
  %7 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %6, i64 0, i32 1, i64 0
  %8 = load i32, i32* %7, align 4
  %9 = icmp slt i32 %8, 0
  br i1 %9, label %15, label %10

10:                                               ; preds = %2
  %11 = getelementptr inbounds %struct.TfLiteContext, %struct.TfLiteContext* %0, i64 0, i32 2
  %12 = load %struct.TfLiteTensor*, %struct.TfLiteTensor** %11, align 8
  %13 = sext i32 %8 to i64
  %14 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %12, i64 %13
  br label %15

15:                                               ; preds = %2, %10
  %16 = phi %struct.TfLiteTensor* [ %14, %10 ], [ null, %2 ]
  %17 = getelementptr inbounds %struct.TfLiteNode, %struct.TfLiteNode* %1, i64 0, i32 1
  %18 = load %struct.TfLiteIntArray*, %struct.TfLiteIntArray** %17, align 8
  %19 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %18, i64 0, i32 1, i64 0
  %20 = load i32, i32* %19, align 4
  %21 = icmp slt i32 %20, 0
  br i1 %21, label %27, label %22

22:                                               ; preds = %15
  %23 = getelementptr inbounds %struct.TfLiteContext, %struct.TfLiteContext* %0, i64 0, i32 2
  %24 = load %struct.TfLiteTensor*, %struct.TfLiteTensor** %23, align 8
  %25 = sext i32 %20 to i64
  %26 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %24, i64 %25
  br label %27

27:                                               ; preds = %15, %22
  %28 = phi %struct.TfLiteTensor* [ %26, %22 ], [ null, %15 ]
  %29 = bitcast %"class.tflite::RuntimeShape"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %29) #9
  %30 = icmp eq %struct.TfLiteTensor* %16, null
  br i1 %30, label %31, label %33

31:                                               ; preds = %27
  %32 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %3, i64 0, i32 0
  store i32 0, i32* %32, align 8, !alias.scope !23
  br label %62

33:                                               ; preds = %27
  %34 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %16, i64 0, i32 2
  %35 = load %struct.TfLiteIntArray*, %struct.TfLiteIntArray** %34, align 8, !noalias !23
  %36 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %35, i64 0, i32 0
  %37 = load i32, i32* %36, align 4, !noalias !23
  %38 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %35, i64 0, i32 1, i64 0
  %39 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %3, i64 0, i32 0
  store i32 %37, i32* %39, align 8, !alias.scope !23
  %40 = icmp sgt i32 %37, 5
  br i1 %40, label %41, label %48

41:                                               ; preds = %33
  %42 = sext i32 %37 to i64
  %43 = shl nsw i64 %42, 2
  %44 = tail call i8* @_Znam(i64 %43) #10, !noalias !23
  %45 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %3, i64 0, i32 1, i32 0
  %46 = bitcast i32** %45 to i8**
  store i8* %44, i8** %46, align 8, !alias.scope !23
  %47 = bitcast i8* %44 to i32*
  br label %53

48:                                               ; preds = %33
  %49 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %3, i64 0, i32 1
  %50 = bitcast %union.anon* %49 to i32*
  %51 = sext i32 %37 to i64
  %52 = shl nsw i64 %51, 2
  br label %53

53:                                               ; preds = %48, %41
  %54 = phi i64 [ %43, %41 ], [ %52, %48 ]
  %55 = phi i32* [ %47, %41 ], [ %50, %48 ]
  %56 = bitcast i32* %55 to i8*
  %57 = bitcast i32* %38 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %56, i8* align 4 %57, i64 %54, i1 false) #9
  %58 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %16, i64 0, i32 1
  %59 = bitcast %union.TfLitePtrUnion* %58 to float**
  %60 = load float*, float** %59, align 8
  %61 = bitcast float* %60 to i8*
  br label %62

62:                                               ; preds = %31, %53
  %63 = phi i32 [ %37, %53 ], [ 0, %31 ]
  %64 = phi i8* [ %61, %53 ], [ null, %31 ]
  %65 = phi float* [ %60, %53 ], [ null, %31 ]
  %66 = bitcast %"class.tflite::RuntimeShape"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %66) #9
  %67 = icmp eq %struct.TfLiteTensor* %28, null
  br i1 %67, label %68, label %70

68:                                               ; preds = %62
  %69 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %4, i64 0, i32 0
  store i32 0, i32* %69, align 8, !alias.scope !26
  br label %207

70:                                               ; preds = %62
  %71 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %28, i64 0, i32 2
  %72 = load %struct.TfLiteIntArray*, %struct.TfLiteIntArray** %71, align 8, !noalias !26
  %73 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %72, i64 0, i32 0
  %74 = load i32, i32* %73, align 4, !noalias !26
  %75 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %72, i64 0, i32 1, i64 0
  %76 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %4, i64 0, i32 0
  store i32 %74, i32* %76, align 8, !alias.scope !26
  %77 = icmp sgt i32 %74, 5
  br i1 %77, label %78, label %90

78:                                               ; preds = %70
  %79 = sext i32 %74 to i64
  %80 = shl nsw i64 %79, 2
  %81 = tail call i8* @_Znam(i64 %80) #10, !noalias !26
  %82 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %4, i64 0, i32 1, i32 0
  %83 = bitcast i32** %82 to i8**
  store i8* %81, i8** %83, align 8, !alias.scope !26
  %84 = bitcast i32* %75 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %81, i8* align 4 %84, i64 %80, i1 false) #9
  %85 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %28, i64 0, i32 1
  %86 = bitcast %union.TfLitePtrUnion* %85 to float**
  %87 = load float*, float** %86, align 8
  %88 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %4, i64 0, i32 1, i32 0
  %89 = load i32*, i32** %88, align 8, !noalias !29
  br label %102

90:                                               ; preds = %70
  %91 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %4, i64 0, i32 1
  %92 = sext i32 %74 to i64
  %93 = shl nsw i64 %92, 2
  %94 = bitcast %union.anon* %91 to i8*
  %95 = bitcast i32* %75 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %94, i8* align 4 %95, i64 %93, i1 false) #9
  %96 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %28, i64 0, i32 1
  %97 = bitcast %union.TfLitePtrUnion* %96 to float**
  %98 = load float*, float** %97, align 8
  %99 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %4, i64 0, i32 1
  %100 = bitcast %union.anon* %99 to i32*
  %101 = icmp sgt i32 %74, 0
  br i1 %101, label %102, label %207

102:                                              ; preds = %90, %78
  %103 = phi i1 [ true, %78 ], [ false, %90 ]
  %104 = phi float* [ %87, %78 ], [ %98, %90 ]
  %105 = phi i32* [ %89, %78 ], [ %100, %90 ]
  %106 = zext i32 %74 to i64
  %107 = icmp ult i32 %74, 8
  br i1 %107, label %193, label %108

108:                                              ; preds = %102
  %109 = and i64 %106, 4294967288
  %110 = add nsw i64 %109, -8
  %111 = lshr exact i64 %110, 3
  %112 = add nuw nsw i64 %111, 1
  %113 = and i64 %112, 3
  %114 = icmp ult i64 %110, 24
  br i1 %114, label %160, label %115

115:                                              ; preds = %108
  %116 = sub nsw i64 %112, %113
  br label %117

117:                                              ; preds = %117, %115
  %118 = phi i64 [ 0, %115 ], [ %157, %117 ]
  %119 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %115 ], [ %155, %117 ]
  %120 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %115 ], [ %156, %117 ]
  %121 = phi i64 [ %116, %115 ], [ %158, %117 ]
  %122 = getelementptr inbounds i32, i32* %105, i64 %118
  %123 = bitcast i32* %122 to <4 x i32>*
  %124 = load <4 x i32>, <4 x i32>* %123, align 4, !noalias !29
  %125 = getelementptr inbounds i32, i32* %122, i64 4
  %126 = bitcast i32* %125 to <4 x i32>*
  %127 = load <4 x i32>, <4 x i32>* %126, align 4, !noalias !29
  %128 = mul nsw <4 x i32> %124, %119
  %129 = mul nsw <4 x i32> %127, %120
  %130 = or i64 %118, 8
  %131 = getelementptr inbounds i32, i32* %105, i64 %130
  %132 = bitcast i32* %131 to <4 x i32>*
  %133 = load <4 x i32>, <4 x i32>* %132, align 4, !noalias !29
  %134 = getelementptr inbounds i32, i32* %131, i64 4
  %135 = bitcast i32* %134 to <4 x i32>*
  %136 = load <4 x i32>, <4 x i32>* %135, align 4, !noalias !29
  %137 = mul nsw <4 x i32> %133, %128
  %138 = mul nsw <4 x i32> %136, %129
  %139 = or i64 %118, 16
  %140 = getelementptr inbounds i32, i32* %105, i64 %139
  %141 = bitcast i32* %140 to <4 x i32>*
  %142 = load <4 x i32>, <4 x i32>* %141, align 4, !noalias !29
  %143 = getelementptr inbounds i32, i32* %140, i64 4
  %144 = bitcast i32* %143 to <4 x i32>*
  %145 = load <4 x i32>, <4 x i32>* %144, align 4, !noalias !29
  %146 = mul nsw <4 x i32> %142, %137
  %147 = mul nsw <4 x i32> %145, %138
  %148 = or i64 %118, 24
  %149 = getelementptr inbounds i32, i32* %105, i64 %148
  %150 = bitcast i32* %149 to <4 x i32>*
  %151 = load <4 x i32>, <4 x i32>* %150, align 4, !noalias !29
  %152 = getelementptr inbounds i32, i32* %149, i64 4
  %153 = bitcast i32* %152 to <4 x i32>*
  %154 = load <4 x i32>, <4 x i32>* %153, align 4, !noalias !29
  %155 = mul nsw <4 x i32> %151, %146
  %156 = mul nsw <4 x i32> %154, %147
  %157 = add i64 %118, 32
  %158 = add i64 %121, -4
  %159 = icmp eq i64 %158, 0
  br i1 %159, label %160, label %117, !llvm.loop !32

160:                                              ; preds = %117, %108
  %161 = phi <4 x i32> [ undef, %108 ], [ %155, %117 ]
  %162 = phi <4 x i32> [ undef, %108 ], [ %156, %117 ]
  %163 = phi i64 [ 0, %108 ], [ %157, %117 ]
  %164 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %108 ], [ %155, %117 ]
  %165 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %108 ], [ %156, %117 ]
  %166 = icmp eq i64 %113, 0
  br i1 %166, label %183, label %167

167:                                              ; preds = %160, %167
  %168 = phi i64 [ %180, %167 ], [ %163, %160 ]
  %169 = phi <4 x i32> [ %178, %167 ], [ %164, %160 ]
  %170 = phi <4 x i32> [ %179, %167 ], [ %165, %160 ]
  %171 = phi i64 [ %181, %167 ], [ %113, %160 ]
  %172 = getelementptr inbounds i32, i32* %105, i64 %168
  %173 = bitcast i32* %172 to <4 x i32>*
  %174 = load <4 x i32>, <4 x i32>* %173, align 4, !noalias !29
  %175 = getelementptr inbounds i32, i32* %172, i64 4
  %176 = bitcast i32* %175 to <4 x i32>*
  %177 = load <4 x i32>, <4 x i32>* %176, align 4, !noalias !29
  %178 = mul nsw <4 x i32> %174, %169
  %179 = mul nsw <4 x i32> %177, %170
  %180 = add i64 %168, 8
  %181 = add i64 %171, -1
  %182 = icmp eq i64 %181, 0
  br i1 %182, label %183, label %167, !llvm.loop !33

183:                                              ; preds = %167, %160
  %184 = phi <4 x i32> [ %161, %160 ], [ %178, %167 ]
  %185 = phi <4 x i32> [ %162, %160 ], [ %179, %167 ]
  %186 = mul <4 x i32> %185, %184
  %187 = shufflevector <4 x i32> %186, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %188 = mul <4 x i32> %186, %187
  %189 = shufflevector <4 x i32> %188, <4 x i32> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %190 = mul <4 x i32> %188, %189
  %191 = extractelement <4 x i32> %190, i32 0
  %192 = icmp eq i64 %109, %106
  br i1 %192, label %204, label %193

193:                                              ; preds = %183, %102
  %194 = phi i64 [ 0, %102 ], [ %109, %183 ]
  %195 = phi i32 [ 1, %102 ], [ %191, %183 ]
  br label %196

196:                                              ; preds = %193, %196
  %197 = phi i64 [ %202, %196 ], [ %194, %193 ]
  %198 = phi i32 [ %201, %196 ], [ %195, %193 ]
  %199 = getelementptr inbounds i32, i32* %105, i64 %197
  %200 = load i32, i32* %199, align 4, !noalias !29
  %201 = mul nsw i32 %200, %198
  %202 = add nuw nsw i64 %197, 1
  %203 = icmp eq i64 %202, %106
  br i1 %203, label %204, label %196, !llvm.loop !34

204:                                              ; preds = %196, %183
  %205 = phi i32 [ %191, %183 ], [ %201, %196 ]
  %206 = sext i32 %205 to i64
  br label %207

207:                                              ; preds = %68, %204, %90
  %208 = phi i1 [ false, %90 ], [ %103, %204 ], [ false, %68 ]
  %209 = phi float* [ %98, %90 ], [ %104, %204 ], [ null, %68 ]
  %210 = phi i64 [ 1, %90 ], [ %206, %204 ], [ 1, %68 ]
  %211 = ptrtoint float* %209 to i64
  %212 = and i64 %211, 3
  %213 = icmp eq i64 %212, 0
  br i1 %213, label %214, label %220

214:                                              ; preds = %207
  %215 = lshr i64 %211, 2
  %216 = sub nsw i64 0, %215
  %217 = and i64 %216, 3
  %218 = icmp slt i64 %217, %210
  %219 = select i1 %218, i64 %217, i64 %210
  br label %220

220:                                              ; preds = %214, %207
  %221 = phi i64 [ %219, %214 ], [ %210, %207 ]
  %222 = sub nsw i64 %210, %221
  %223 = sdiv i64 %222, 4
  %224 = shl nsw i64 %223, 2
  %225 = add nsw i64 %224, %221
  %226 = icmp sgt i64 %221, 0
  br i1 %226, label %227, label %337

227:                                              ; preds = %220
  %228 = icmp ult i64 %221, 4
  br i1 %228, label %295, label %229

229:                                              ; preds = %227
  %230 = getelementptr float, float* %209, i64 %221
  %231 = bitcast float* %230 to i8*
  %232 = getelementptr float, float* %65, i64 %221
  %233 = icmp ult float* %209, %232
  %234 = icmp ult i8* %64, %231
  %235 = and i1 %233, %234
  br i1 %235, label %295, label %236

236:                                              ; preds = %229
  %237 = and i64 %221, -4
  %238 = add nsw i64 %237, -4
  %239 = lshr exact i64 %238, 2
  %240 = add nuw nsw i64 %239, 1
  %241 = and i64 %240, 3
  %242 = icmp ult i64 %238, 12
  br i1 %242, label %278, label %243

243:                                              ; preds = %236
  %244 = sub nsw i64 %240, %241
  br label %245

245:                                              ; preds = %245, %243
  %246 = phi i64 [ 0, %243 ], [ %275, %245 ]
  %247 = phi i64 [ %244, %243 ], [ %276, %245 ]
  %248 = getelementptr inbounds float, float* %209, i64 %246
  %249 = getelementptr inbounds float, float* %65, i64 %246
  %250 = bitcast float* %249 to <4 x float>*
  %251 = load <4 x float>, <4 x float>* %250, align 4, !alias.scope !35
  %252 = call <4 x float> @llvm.floor.v4f32(<4 x float> %251)
  %253 = bitcast float* %248 to <4 x float>*
  store <4 x float> %252, <4 x float>* %253, align 4, !alias.scope !38, !noalias !35
  %254 = or i64 %246, 4
  %255 = getelementptr inbounds float, float* %209, i64 %254
  %256 = getelementptr inbounds float, float* %65, i64 %254
  %257 = bitcast float* %256 to <4 x float>*
  %258 = load <4 x float>, <4 x float>* %257, align 4, !alias.scope !35
  %259 = call <4 x float> @llvm.floor.v4f32(<4 x float> %258)
  %260 = bitcast float* %255 to <4 x float>*
  store <4 x float> %259, <4 x float>* %260, align 4, !alias.scope !38, !noalias !35
  %261 = or i64 %246, 8
  %262 = getelementptr inbounds float, float* %209, i64 %261
  %263 = getelementptr inbounds float, float* %65, i64 %261
  %264 = bitcast float* %263 to <4 x float>*
  %265 = load <4 x float>, <4 x float>* %264, align 4, !alias.scope !35
  %266 = call <4 x float> @llvm.floor.v4f32(<4 x float> %265)
  %267 = bitcast float* %262 to <4 x float>*
  store <4 x float> %266, <4 x float>* %267, align 4, !alias.scope !38, !noalias !35
  %268 = or i64 %246, 12
  %269 = getelementptr inbounds float, float* %209, i64 %268
  %270 = getelementptr inbounds float, float* %65, i64 %268
  %271 = bitcast float* %270 to <4 x float>*
  %272 = load <4 x float>, <4 x float>* %271, align 4, !alias.scope !35
  %273 = call <4 x float> @llvm.floor.v4f32(<4 x float> %272)
  %274 = bitcast float* %269 to <4 x float>*
  store <4 x float> %273, <4 x float>* %274, align 4, !alias.scope !38, !noalias !35
  %275 = add i64 %246, 16
  %276 = add i64 %247, -4
  %277 = icmp eq i64 %276, 0
  br i1 %277, label %278, label %245, !llvm.loop !40

278:                                              ; preds = %245, %236
  %279 = phi i64 [ 0, %236 ], [ %275, %245 ]
  %280 = icmp eq i64 %241, 0
  br i1 %280, label %293, label %281

281:                                              ; preds = %278, %281
  %282 = phi i64 [ %290, %281 ], [ %279, %278 ]
  %283 = phi i64 [ %291, %281 ], [ %241, %278 ]
  %284 = getelementptr inbounds float, float* %209, i64 %282
  %285 = getelementptr inbounds float, float* %65, i64 %282
  %286 = bitcast float* %285 to <4 x float>*
  %287 = load <4 x float>, <4 x float>* %286, align 4, !alias.scope !35
  %288 = call <4 x float> @llvm.floor.v4f32(<4 x float> %287)
  %289 = bitcast float* %284 to <4 x float>*
  store <4 x float> %288, <4 x float>* %289, align 4, !alias.scope !38, !noalias !35
  %290 = add i64 %282, 4
  %291 = add i64 %283, -1
  %292 = icmp eq i64 %291, 0
  br i1 %292, label %293, label %281, !llvm.loop !41

293:                                              ; preds = %281, %278
  %294 = icmp eq i64 %221, %237
  br i1 %294, label %337, label %295

295:                                              ; preds = %293, %229, %227
  %296 = phi i64 [ 0, %229 ], [ 0, %227 ], [ %237, %293 ]
  %297 = xor i64 %296, -1
  %298 = add i64 %221, %297
  %299 = and i64 %221, 3
  %300 = icmp eq i64 %299, 0
  br i1 %300, label %311, label %301

301:                                              ; preds = %295, %301
  %302 = phi i64 [ %308, %301 ], [ %296, %295 ]
  %303 = phi i64 [ %309, %301 ], [ %299, %295 ]
  %304 = getelementptr inbounds float, float* %209, i64 %302
  %305 = getelementptr inbounds float, float* %65, i64 %302
  %306 = load float, float* %305, align 4
  %307 = tail call float @llvm.floor.f32(float %306) #9
  store float %307, float* %304, align 4
  %308 = add nuw nsw i64 %302, 1
  %309 = add i64 %303, -1
  %310 = icmp eq i64 %309, 0
  br i1 %310, label %311, label %301, !llvm.loop !42

311:                                              ; preds = %301, %295
  %312 = phi i64 [ %296, %295 ], [ %308, %301 ]
  %313 = icmp ult i64 %298, 3
  br i1 %313, label %337, label %314

314:                                              ; preds = %311, %314
  %315 = phi i64 [ %335, %314 ], [ %312, %311 ]
  %316 = getelementptr inbounds float, float* %209, i64 %315
  %317 = getelementptr inbounds float, float* %65, i64 %315
  %318 = load float, float* %317, align 4
  %319 = tail call float @llvm.floor.f32(float %318) #9
  store float %319, float* %316, align 4
  %320 = add nuw nsw i64 %315, 1
  %321 = getelementptr inbounds float, float* %209, i64 %320
  %322 = getelementptr inbounds float, float* %65, i64 %320
  %323 = load float, float* %322, align 4
  %324 = tail call float @llvm.floor.f32(float %323) #9
  store float %324, float* %321, align 4
  %325 = add nuw nsw i64 %315, 2
  %326 = getelementptr inbounds float, float* %209, i64 %325
  %327 = getelementptr inbounds float, float* %65, i64 %325
  %328 = load float, float* %327, align 4
  %329 = tail call float @llvm.floor.f32(float %328) #9
  store float %329, float* %326, align 4
  %330 = add nuw nsw i64 %315, 3
  %331 = getelementptr inbounds float, float* %209, i64 %330
  %332 = getelementptr inbounds float, float* %65, i64 %330
  %333 = load float, float* %332, align 4
  %334 = tail call float @llvm.floor.f32(float %333) #9
  store float %334, float* %331, align 4
  %335 = add nuw nsw i64 %315, 4
  %336 = icmp eq i64 %335, %221
  br i1 %336, label %337, label %314, !llvm.loop !43

337:                                              ; preds = %311, %314, %293, %220
  %338 = icmp sgt i64 %222, 3
  br i1 %338, label %462, label %339

339:                                              ; preds = %462, %337
  %340 = icmp slt i64 %225, %210
  br i1 %340, label %341, label %476

341:                                              ; preds = %339
  %342 = sub nsw i64 %210, %221
  %343 = sub i64 %342, %224
  %344 = icmp ult i64 %343, 4
  br i1 %344, label %419, label %345

345:                                              ; preds = %341
  %346 = add i64 %221, %224
  %347 = getelementptr float, float* %209, i64 %346
  %348 = getelementptr float, float* %209, i64 %210
  %349 = getelementptr float, float* %65, i64 %346
  %350 = getelementptr float, float* %65, i64 %210
  %351 = icmp ult float* %347, %350
  %352 = icmp ult float* %349, %348
  %353 = and i1 %351, %352
  br i1 %353, label %419, label %354

354:                                              ; preds = %345
  %355 = and i64 %343, -4
  %356 = add i64 %225, %355
  %357 = add i64 %355, -4
  %358 = lshr exact i64 %357, 2
  %359 = add nuw nsw i64 %358, 1
  %360 = and i64 %359, 3
  %361 = icmp ult i64 %357, 12
  br i1 %361, label %401, label %362

362:                                              ; preds = %354
  %363 = sub nsw i64 %359, %360
  br label %364

364:                                              ; preds = %364, %362
  %365 = phi i64 [ 0, %362 ], [ %398, %364 ]
  %366 = phi i64 [ %363, %362 ], [ %399, %364 ]
  %367 = add i64 %225, %365
  %368 = getelementptr inbounds float, float* %209, i64 %367
  %369 = getelementptr inbounds float, float* %65, i64 %367
  %370 = bitcast float* %369 to <4 x float>*
  %371 = load <4 x float>, <4 x float>* %370, align 4, !alias.scope !44
  %372 = call <4 x float> @llvm.floor.v4f32(<4 x float> %371)
  %373 = bitcast float* %368 to <4 x float>*
  store <4 x float> %372, <4 x float>* %373, align 4, !alias.scope !47, !noalias !44
  %374 = or i64 %365, 4
  %375 = add i64 %225, %374
  %376 = getelementptr inbounds float, float* %209, i64 %375
  %377 = getelementptr inbounds float, float* %65, i64 %375
  %378 = bitcast float* %377 to <4 x float>*
  %379 = load <4 x float>, <4 x float>* %378, align 4, !alias.scope !44
  %380 = call <4 x float> @llvm.floor.v4f32(<4 x float> %379)
  %381 = bitcast float* %376 to <4 x float>*
  store <4 x float> %380, <4 x float>* %381, align 4, !alias.scope !47, !noalias !44
  %382 = or i64 %365, 8
  %383 = add i64 %225, %382
  %384 = getelementptr inbounds float, float* %209, i64 %383
  %385 = getelementptr inbounds float, float* %65, i64 %383
  %386 = bitcast float* %385 to <4 x float>*
  %387 = load <4 x float>, <4 x float>* %386, align 4, !alias.scope !44
  %388 = call <4 x float> @llvm.floor.v4f32(<4 x float> %387)
  %389 = bitcast float* %384 to <4 x float>*
  store <4 x float> %388, <4 x float>* %389, align 4, !alias.scope !47, !noalias !44
  %390 = or i64 %365, 12
  %391 = add i64 %225, %390
  %392 = getelementptr inbounds float, float* %209, i64 %391
  %393 = getelementptr inbounds float, float* %65, i64 %391
  %394 = bitcast float* %393 to <4 x float>*
  %395 = load <4 x float>, <4 x float>* %394, align 4, !alias.scope !44
  %396 = call <4 x float> @llvm.floor.v4f32(<4 x float> %395)
  %397 = bitcast float* %392 to <4 x float>*
  store <4 x float> %396, <4 x float>* %397, align 4, !alias.scope !47, !noalias !44
  %398 = add i64 %365, 16
  %399 = add i64 %366, -4
  %400 = icmp eq i64 %399, 0
  br i1 %400, label %401, label %364, !llvm.loop !49

401:                                              ; preds = %364, %354
  %402 = phi i64 [ 0, %354 ], [ %398, %364 ]
  %403 = icmp eq i64 %360, 0
  br i1 %403, label %417, label %404

404:                                              ; preds = %401, %404
  %405 = phi i64 [ %414, %404 ], [ %402, %401 ]
  %406 = phi i64 [ %415, %404 ], [ %360, %401 ]
  %407 = add i64 %225, %405
  %408 = getelementptr inbounds float, float* %209, i64 %407
  %409 = getelementptr inbounds float, float* %65, i64 %407
  %410 = bitcast float* %409 to <4 x float>*
  %411 = load <4 x float>, <4 x float>* %410, align 4, !alias.scope !44
  %412 = call <4 x float> @llvm.floor.v4f32(<4 x float> %411)
  %413 = bitcast float* %408 to <4 x float>*
  store <4 x float> %412, <4 x float>* %413, align 4, !alias.scope !47, !noalias !44
  %414 = add i64 %405, 4
  %415 = add i64 %406, -1
  %416 = icmp eq i64 %415, 0
  br i1 %416, label %417, label %404, !llvm.loop !50

417:                                              ; preds = %404, %401
  %418 = icmp eq i64 %343, %355
  br i1 %418, label %476, label %419

419:                                              ; preds = %417, %345, %341
  %420 = phi i64 [ %225, %345 ], [ %225, %341 ], [ %356, %417 ]
  %421 = sub i64 %210, %420
  %422 = xor i64 %420, -1
  %423 = add i64 %210, %422
  %424 = and i64 %421, 3
  %425 = icmp eq i64 %424, 0
  br i1 %425, label %436, label %426

426:                                              ; preds = %419, %426
  %427 = phi i64 [ %433, %426 ], [ %420, %419 ]
  %428 = phi i64 [ %434, %426 ], [ %424, %419 ]
  %429 = getelementptr inbounds float, float* %209, i64 %427
  %430 = getelementptr inbounds float, float* %65, i64 %427
  %431 = load float, float* %430, align 4
  %432 = tail call float @llvm.floor.f32(float %431) #9
  store float %432, float* %429, align 4
  %433 = add nsw i64 %427, 1
  %434 = add i64 %428, -1
  %435 = icmp eq i64 %434, 0
  br i1 %435, label %436, label %426, !llvm.loop !51

436:                                              ; preds = %426, %419
  %437 = phi i64 [ %420, %419 ], [ %433, %426 ]
  %438 = icmp ult i64 %423, 3
  br i1 %438, label %476, label %439

439:                                              ; preds = %436, %439
  %440 = phi i64 [ %460, %439 ], [ %437, %436 ]
  %441 = getelementptr inbounds float, float* %209, i64 %440
  %442 = getelementptr inbounds float, float* %65, i64 %440
  %443 = load float, float* %442, align 4
  %444 = tail call float @llvm.floor.f32(float %443) #9
  store float %444, float* %441, align 4
  %445 = add nsw i64 %440, 1
  %446 = getelementptr inbounds float, float* %209, i64 %445
  %447 = getelementptr inbounds float, float* %65, i64 %445
  %448 = load float, float* %447, align 4
  %449 = tail call float @llvm.floor.f32(float %448) #9
  store float %449, float* %446, align 4
  %450 = add nsw i64 %440, 2
  %451 = getelementptr inbounds float, float* %209, i64 %450
  %452 = getelementptr inbounds float, float* %65, i64 %450
  %453 = load float, float* %452, align 4
  %454 = tail call float @llvm.floor.f32(float %453) #9
  store float %454, float* %451, align 4
  %455 = add nsw i64 %440, 3
  %456 = getelementptr inbounds float, float* %209, i64 %455
  %457 = getelementptr inbounds float, float* %65, i64 %455
  %458 = load float, float* %457, align 4
  %459 = tail call float @llvm.floor.f32(float %458) #9
  store float %459, float* %456, align 4
  %460 = add nsw i64 %440, 4
  %461 = icmp eq i64 %460, %210
  br i1 %461, label %476, label %439, !llvm.loop !52

462:                                              ; preds = %337, %462
  %463 = phi i64 [ %474, %462 ], [ %221, %337 ]
  %464 = getelementptr inbounds float, float* %209, i64 %463
  %465 = getelementptr inbounds float, float* %65, i64 %463
  %466 = bitcast float* %465 to <4 x float>*
  %467 = load <4 x float>, <4 x float>* %466, align 1
  %468 = tail call <4 x i32> @llvm.x86.sse2.cvttps2dq(<4 x float> %467) #9
  %469 = sitofp <4 x i32> %468 to <4 x float>
  %470 = fcmp olt <4 x float> %467, %469
  %471 = select <4 x i1> %470, <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, <4 x float> zeroinitializer
  %472 = fsub <4 x float> %469, %471
  %473 = bitcast float* %464 to <4 x float>*
  store <4 x float> %472, <4 x float>* %473, align 16
  %474 = add nsw i64 %463, 4
  %475 = icmp slt i64 %474, %225
  br i1 %475, label %462, label %339

476:                                              ; preds = %436, %439, %417, %339
  br i1 %208, label %477, label %483

477:                                              ; preds = %476
  %478 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %4, i64 0, i32 1, i32 0
  %479 = load i32*, i32** %478, align 8
  %480 = icmp eq i32* %479, null
  br i1 %480, label %483, label %481

481:                                              ; preds = %477
  %482 = bitcast i32* %479 to i8*
  tail call void @_ZdaPv(i8* %482) #10
  br label %483

483:                                              ; preds = %476, %477, %481
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %66) #9
  %484 = icmp sgt i32 %63, 5
  br i1 %484, label %485, label %491

485:                                              ; preds = %483
  %486 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %3, i64 0, i32 1, i32 0
  %487 = load i32*, i32** %486, align 8
  %488 = icmp eq i32* %487, null
  br i1 %488, label %491, label %489

489:                                              ; preds = %485
  %490 = bitcast i32* %487 to i8*
  tail call void @_ZdaPv(i8* %490) #10
  br label %491

491:                                              ; preds = %483, %485, %489
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %29) #9
  ret i32 0
}

; Function Attrs: nounwind readnone speculatable
declare float @llvm.floor.f32(float) #5

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #1

; Function Attrs: nobuiltin nounwind
declare void @_ZdaPv(i8*) local_unnamed_addr #6

; Function Attrs: nobuiltin nofree
declare noalias nonnull i8* @_Znam(i64) local_unnamed_addr #7

; Function Attrs: nounwind readnone
declare <4 x i32> @llvm.x86.sse2.cvttps2dq(<4 x float>) #8

; Function Attrs: nounwind readnone speculatable
declare <4 x float> @llvm.floor.v4f32(<4 x float>) #5

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { norecurse nounwind readnone ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="128" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind readnone speculatable }
attributes #6 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { nobuiltin nofree "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #8 = { nounwind readnone }
attributes #9 = { nounwind }
attributes #10 = { builtin nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{!3}
!3 = distinct !{!3, !4, !"_ZN6tflite14GetTensorShapeEPK12TfLiteTensor: argument 0"}
!4 = distinct !{!4, !"_ZN6tflite14GetTensorShapeEPK12TfLiteTensor"}
!5 = !{!6}
!6 = distinct !{!6, !7, !"_ZN6tflite14GetTensorShapeEPK12TfLiteTensor: argument 0"}
!7 = distinct !{!7, !"_ZN6tflite14GetTensorShapeEPK12TfLiteTensor"}
!8 = distinct !{!8, !9}
!9 = !{!"llvm.loop.isvectorized", i32 1}
!10 = distinct !{!10, !11}
!11 = !{!"llvm.loop.unroll.disable"}
!12 = distinct !{!12, !13, !9}
!13 = !{!"llvm.loop.unroll.runtime.disable"}
!14 = !{!15}
!15 = distinct !{!15, !16}
!16 = distinct !{!16, !"LVerDomain"}
!17 = !{!18}
!18 = distinct !{!18, !16}
!19 = distinct !{!19, !9}
!20 = distinct !{!20, !11}
!21 = distinct !{!21, !11}
!22 = distinct !{!22, !9}
!23 = !{!24}
!24 = distinct !{!24, !25, !"_ZN6tflite14GetTensorShapeEPK12TfLiteTensor: argument 0"}
!25 = distinct !{!25, !"_ZN6tflite14GetTensorShapeEPK12TfLiteTensor"}
!26 = !{!27}
!27 = distinct !{!27, !28, !"_ZN6tflite14GetTensorShapeEPK12TfLiteTensor: argument 0"}
!28 = distinct !{!28, !"_ZN6tflite14GetTensorShapeEPK12TfLiteTensor"}
!29 = !{!30}
!30 = distinct !{!30, !31, !"_ZN6tflite13optimized_ops11MapAsVectorIfEENSt3__111conditionalIXsr3std8is_constIT_EE5valueEN5Eigen3MapIKNS5_6MatrixINS2_12remove_constIS4_E4typeELin1ELi1ELi0ELin1ELi1EEELi0ENS5_6StrideILi0ELi0EEEEENS6_INS7_IS4_Lin1ELi1ELi0ELin1ELi1EEELi0ESE_EEE4typeEPS4_RKNS_12RuntimeShapeE: argument 0"}
!31 = distinct !{!31, !"_ZN6tflite13optimized_ops11MapAsVectorIfEENSt3__111conditionalIXsr3std8is_constIT_EE5valueEN5Eigen3MapIKNS5_6MatrixINS2_12remove_constIS4_E4typeELin1ELi1ELi0ELin1ELi1EEELi0ENS5_6StrideILi0ELi0EEEEENS6_INS7_IS4_Lin1ELi1ELi0ELin1ELi1EEELi0ESE_EEE4typeEPS4_RKNS_12RuntimeShapeE"}
!32 = distinct !{!32, !9}
!33 = distinct !{!33, !11}
!34 = distinct !{!34, !13, !9}
!35 = !{!36}
!36 = distinct !{!36, !37}
!37 = distinct !{!37, !"LVerDomain"}
!38 = !{!39}
!39 = distinct !{!39, !37}
!40 = distinct !{!40, !9}
!41 = distinct !{!41, !11}
!42 = distinct !{!42, !11}
!43 = distinct !{!43, !9}
!44 = !{!45}
!45 = distinct !{!45, !46}
!46 = distinct !{!46, !"LVerDomain"}
!47 = !{!48}
!48 = distinct !{!48, !46}
!49 = distinct !{!49, !9}
!50 = distinct !{!50, !11}
!51 = distinct !{!51, !11}
!52 = distinct !{!52, !9}
