; ModuleID = '../../ui/base/cursor/cursor_util.cc'
source_filename = "../../ui/base/cursor/cursor_util.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%class.SkBitmap = type { %class.sk_sp, %class.SkPixmap, %class.sk_sp.7 }
%class.sk_sp = type { %class.SkPixelRef* }
%class.SkPixelRef = type opaque
%class.SkPixmap = type { i8*, i64, %struct.SkImageInfo }
%struct.SkImageInfo = type { %class.SkColorInfo, %struct.SkISize }
%class.SkColorInfo = type { %class.sk_sp.0, i32, i32 }
%class.sk_sp.0 = type { %class.SkColorSpace* }
%class.SkColorSpace = type <{ %class.SkNVRefCnt, i32, i32, %struct.skcms_TransferFunction, %struct.skcms_Matrix3x3, %struct.skcms_TransferFunction, %struct.skcms_Matrix3x3, %class.SkOnce, [3 x i8] }>
%class.SkNVRefCnt = type { %"struct.std::__1::atomic" }
%"struct.std::__1::atomic" = type { %"struct.std::__1::__atomic_base" }
%"struct.std::__1::__atomic_base" = type { %"struct.std::__1::__atomic_base.1" }
%"struct.std::__1::__atomic_base.1" = type { %"struct.std::__1::__cxx_atomic_impl" }
%"struct.std::__1::__cxx_atomic_impl" = type { %"struct.std::__1::__cxx_atomic_base_impl" }
%"struct.std::__1::__cxx_atomic_base_impl" = type { i32 }
%struct.skcms_TransferFunction = type { float, float, float, float, float, float, float }
%struct.skcms_Matrix3x3 = type { [3 x [3 x float]] }
%class.SkOnce = type { %"struct.std::__1::atomic.2" }
%"struct.std::__1::atomic.2" = type { %"struct.std::__1::__atomic_base.3" }
%"struct.std::__1::__atomic_base.3" = type { %"struct.std::__1::__atomic_base.4" }
%"struct.std::__1::__atomic_base.4" = type { %"struct.std::__1::__cxx_atomic_impl.5" }
%"struct.std::__1::__cxx_atomic_impl.5" = type { %"struct.std::__1::__cxx_atomic_base_impl.6" }
%"struct.std::__1::__cxx_atomic_base_impl.6" = type { i8 }
%struct.SkISize = type { i32, i32 }
%class.sk_sp.7 = type { %class.SkMipmap* }
%class.SkMipmap = type opaque
%"class.gfx::Point" = type { i32, i32 }
%"class.gfx::Size" = type { i32, i32 }
%struct.SkSamplingOptions = type { i8, %struct.SkCubicResampler, i32, i32 }
%struct.SkCubicResampler = type { float, float }
%"class.SkBitmap::Allocator" = type { %class.SkRefCnt.base, [4 x i8] }
%class.SkRefCnt.base = type { %class.SkRefCntBase.base }
%class.SkRefCntBase.base = type <{ i32 (...)**, %"struct.std::__1::atomic" }>
%"class.std::__1::vector.77" = type { %"class.std::__1::__vector_base.78" }
%"class.std::__1::__vector_base.78" = type { i8*, i8*, %"class.std::__1::__compressed_pair.79" }
%"class.std::__1::__compressed_pair.79" = type { %"struct.std::__1::__compressed_pair_elem.65" }
%"struct.std::__1::__compressed_pair_elem.65" = type { i8* }
%"class.std::__1::__vector_base_common" = type { i8 }
%"class.ui::ResourceBundle" = type { %"class.ui::ResourceBundle::Delegate"*, %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr.9", %"class.std::__1::unique_ptr.9", %"class.std::__1::vector", i32, %"class.std::__1::map", %"class.gfx::Image", %"class.std::__1::map.27", %"class.base::FilePath", %"class.std::__1::unordered_map", i8, i8, %"class.std::__1::basic_string" }
%"class.ui::ResourceBundle::Delegate" = type { i32 (...)** }
%"class.std::__1::unique_ptr" = type { %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %"class.base::Lock"* }
%"class.base::Lock" = type { %"class.base::internal::LockImpl" }
%"class.base::internal::LockImpl" = type { %union.pthread_mutex_t }
%union.pthread_mutex_t = type { %struct.__pthread_mutex_s }
%struct.__pthread_mutex_s = type { i32, i32, i32, i32, i32, i16, i16, %struct.__pthread_internal_list }
%struct.__pthread_internal_list = type { %struct.__pthread_internal_list*, %struct.__pthread_internal_list* }
%"class.std::__1::unique_ptr.9" = type { %"class.std::__1::__compressed_pair.10" }
%"class.std::__1::__compressed_pair.10" = type { %"struct.std::__1::__compressed_pair_elem.11" }
%"struct.std::__1::__compressed_pair_elem.11" = type { %"class.ui::ResourceHandle"* }
%"class.ui::ResourceHandle" = type opaque
%"class.std::__1::vector" = type { %"class.std::__1::__vector_base" }
%"class.std::__1::__vector_base" = type { %"class.std::__1::unique_ptr.9"*, %"class.std::__1::unique_ptr.9"*, %"class.std::__1::__compressed_pair.15" }
%"class.std::__1::__compressed_pair.15" = type { %"struct.std::__1::__compressed_pair_elem.16" }
%"struct.std::__1::__compressed_pair_elem.16" = type { %"class.std::__1::unique_ptr.9"* }
%"class.std::__1::map" = type { %"class.std::__1::__tree" }
%"class.std::__1::__tree" = type { %"class.std::__1::__tree_end_node"*, %"class.std::__1::__compressed_pair.18", %"class.std::__1::__compressed_pair.23" }
%"class.std::__1::__tree_end_node" = type { %"class.std::__1::__tree_node_base"* }
%"class.std::__1::__tree_node_base" = type opaque
%"class.std::__1::__compressed_pair.18" = type { %"struct.std::__1::__compressed_pair_elem.19" }
%"struct.std::__1::__compressed_pair_elem.19" = type { %"class.std::__1::__tree_end_node" }
%"class.std::__1::__compressed_pair.23" = type { %"struct.std::__1::__compressed_pair_elem.24" }
%"struct.std::__1::__compressed_pair_elem.24" = type { i64 }
%"class.gfx::Image" = type { %class.scoped_refptr.26 }
%class.scoped_refptr.26 = type { %"class.gfx::internal::ImageStorage"* }
%"class.gfx::internal::ImageStorage" = type opaque
%"class.std::__1::map.27" = type { %"class.std::__1::__tree.28" }
%"class.std::__1::__tree.28" = type { %"class.std::__1::__tree_end_node"*, %"class.std::__1::__compressed_pair.29", %"class.std::__1::__compressed_pair.33" }
%"class.std::__1::__compressed_pair.29" = type { %"struct.std::__1::__compressed_pair_elem.19" }
%"class.std::__1::__compressed_pair.33" = type { %"struct.std::__1::__compressed_pair_elem.24" }
%"class.base::FilePath" = type { %"class.std::__1::basic_string" }
%"class.std::__1::unordered_map" = type { %"class.std::__1::__hash_table" }
%"class.std::__1::__hash_table" = type <{ %"class.std::__1::unique_ptr.43", %"class.std::__1::__compressed_pair.51", %"class.std::__1::__compressed_pair.56", %"class.std::__1::__compressed_pair.58", [4 x i8] }>
%"class.std::__1::unique_ptr.43" = type { %"class.std::__1::__compressed_pair.44" }
%"class.std::__1::__compressed_pair.44" = type { %"struct.std::__1::__compressed_pair_elem.45", %"struct.std::__1::__compressed_pair_elem.46" }
%"struct.std::__1::__compressed_pair_elem.45" = type { %"struct.std::__1::__hash_node_base"** }
%"struct.std::__1::__hash_node_base" = type { %"struct.std::__1::__hash_node_base"* }
%"struct.std::__1::__compressed_pair_elem.46" = type { %"class.std::__1::__bucket_list_deallocator" }
%"class.std::__1::__bucket_list_deallocator" = type { %"class.std::__1::__compressed_pair.47" }
%"class.std::__1::__compressed_pair.47" = type { %"struct.std::__1::__compressed_pair_elem.24" }
%"class.std::__1::__compressed_pair.51" = type { %"struct.std::__1::__compressed_pair_elem.52" }
%"struct.std::__1::__compressed_pair_elem.52" = type { %"struct.std::__1::__hash_node_base" }
%"class.std::__1::__compressed_pair.56" = type { %"struct.std::__1::__compressed_pair_elem.24" }
%"class.std::__1::__compressed_pair.58" = type { %"struct.std::__1::__compressed_pair_elem.59" }
%"struct.std::__1::__compressed_pair_elem.59" = type { float }
%"class.std::__1::basic_string" = type { %"class.std::__1::__compressed_pair.38" }
%"class.std::__1::__compressed_pair.38" = type { %"struct.std::__1::__compressed_pair_elem.39" }
%"struct.std::__1::__compressed_pair_elem.39" = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" = type { %union.anon }
%union.anon = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" = type { i8*, i64, i64 }
%"class.gfx::ImageSkia" = type { %class.scoped_refptr }
%class.scoped_refptr = type { %"class.gfx::internal::ImageSkiaStorage"* }
%"class.gfx::internal::ImageSkiaStorage" = type opaque
%"class.gfx::ImageSkiaRep" = type <{ %"class.cc::PaintImage", %class.sk_sp.62, i32, %"class.gfx::Size", [4 x i8], %class.SkBitmap, float, [4 x i8] }>
%"class.cc::PaintImage" = type { %class.sk_sp.61, %class.sk_sp.62, %"class.gfx::Rect", i32, %class.sk_sp.67, %class.sk_sp.68, i32, i32, i32, i32, i8, i8, i32, i32, %class.sk_sp.61, %class.scoped_refptr.69 }
%"class.gfx::Rect" = type { %"class.gfx::Point", %"class.gfx::Size" }
%class.sk_sp.67 = type { %"class.cc::PaintImageGenerator"* }
%"class.cc::PaintImageGenerator" = type opaque
%class.sk_sp.68 = type { %"class.cc::TextureBacking"* }
%"class.cc::TextureBacking" = type opaque
%class.sk_sp.61 = type { %class.SkImage* }
%class.SkImage = type <{ %class.SkRefCnt.base, [4 x i8], %struct.SkImageInfo, i32, [4 x i8] }>
%class.scoped_refptr.69 = type { %"class.cc::PaintWorkletInput"* }
%"class.cc::PaintWorkletInput" = type opaque
%class.sk_sp.62 = type { %"class.cc::PaintOpBuffer"* }
%"class.cc::PaintOpBuffer" = type <{ %class.SkRefCnt.base, [4 x i8], %"class.std::__1::unique_ptr.63", i64, i64, i64, i64, i64, i32, i8, [3 x i8] }>
%"class.std::__1::unique_ptr.63" = type { %"class.std::__1::__compressed_pair.64" }
%"class.std::__1::__compressed_pair.64" = type { %"struct.std::__1::__compressed_pair_elem.65" }
%"class.std::__1::vector.70" = type { %"class.std::__1::__vector_base.71" }
%"class.std::__1::__vector_base.71" = type { %class.SkBitmap*, %class.SkBitmap*, %"class.std::__1::__compressed_pair.72" }
%"class.std::__1::__compressed_pair.72" = type { %"struct.std::__1::__compressed_pair_elem.73" }
%"struct.std::__1::__compressed_pair_elem.73" = type { %class.SkBitmap* }

$_ZNSt3__16vectorI8SkBitmapNS_9allocatorIS1_EEE8__appendEm = comdat any

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2ui37ScaleAndRotateCursorBitmapAndHotpointEfN7display7Display8RotationEP8SkBitmapPN3gfx5PointE(float, i32, %class.SkBitmap*, %"class.gfx::Point"*) local_unnamed_addr #0 {
  %5 = alloca %class.SkBitmap, align 8
  %6 = alloca %class.SkBitmap, align 8
  %7 = alloca %class.SkBitmap, align 8
  %8 = alloca %"class.gfx::Size", align 4
  %9 = alloca %class.SkBitmap, align 8
  %10 = alloca %struct.SkImageInfo, align 8
  %11 = alloca %struct.SkSamplingOptions, align 4
  %12 = icmp eq i32 %1, 0
  br i1 %12, label %55, label %13

13:                                               ; preds = %4
  %14 = getelementptr inbounds %class.SkBitmap, %class.SkBitmap* %2, i64 0, i32 1, i32 2, i32 0, i32 2
  %15 = load i32, i32* %14, align 4
  %16 = icmp eq i32 %15, 3
  br i1 %16, label %17, label %18

17:                                               ; preds = %13
  tail call fastcc void @_ZN2ui12_GLOBAL__N_124ConvertSkBitmapAlphaTypeEP8SkBitmap11SkAlphaType(%class.SkBitmap* %2, i32 2)
  br label %18

18:                                               ; preds = %17, %13
  %19 = phi i1 [ true, %17 ], [ false, %13 ]
  switch i32 %1, label %53 [
    i32 3, label %43
    i32 1, label %20
    i32 2, label %30
  ]

20:                                               ; preds = %18
  %21 = getelementptr inbounds %class.SkBitmap, %class.SkBitmap* %2, i64 0, i32 1, i32 2, i32 1, i32 1
  %22 = load i32, i32* %21, align 4
  %23 = getelementptr inbounds %"class.gfx::Point", %"class.gfx::Point"* %3, i64 0, i32 1
  %24 = load i32, i32* %23, align 4
  %25 = sub nsw i32 %22, %24
  %26 = getelementptr inbounds %"class.gfx::Point", %"class.gfx::Point"* %3, i64 0, i32 0
  %27 = load i32, i32* %26, align 4
  store i32 %25, i32* %26, align 4
  store i32 %27, i32* %23, align 4
  %28 = bitcast %class.SkBitmap* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 56, i8* nonnull %28) #7
  call void @_ZN18SkBitmapOperations6RotateERK8SkBitmapNS_14RotationAmountE(%class.SkBitmap* nonnull sret %5, %class.SkBitmap* dereferenceable(56) %2, i32 0) #7
  %29 = call dereferenceable(56) %class.SkBitmap* @_ZN8SkBitmapaSEOS_(%class.SkBitmap* %2, %class.SkBitmap* nonnull dereferenceable(56) %5) #7
  call void @_ZN8SkBitmapD1Ev(%class.SkBitmap* nonnull %5) #7
  call void @llvm.lifetime.end.p0i8(i64 56, i8* nonnull %28) #7
  br i1 %19, label %54, label %55

30:                                               ; preds = %18
  %31 = getelementptr inbounds %class.SkBitmap, %class.SkBitmap* %2, i64 0, i32 1, i32 2, i32 1, i32 0
  %32 = load i32, i32* %31, align 4
  %33 = getelementptr inbounds %"class.gfx::Point", %"class.gfx::Point"* %3, i64 0, i32 0
  %34 = load i32, i32* %33, align 4
  %35 = sub nsw i32 %32, %34
  %36 = getelementptr inbounds %class.SkBitmap, %class.SkBitmap* %2, i64 0, i32 1, i32 2, i32 1, i32 1
  %37 = load i32, i32* %36, align 4
  %38 = getelementptr inbounds %"class.gfx::Point", %"class.gfx::Point"* %3, i64 0, i32 1
  %39 = load i32, i32* %38, align 4
  %40 = sub nsw i32 %37, %39
  store i32 %35, i32* %33, align 4
  store i32 %40, i32* %38, align 4
  %41 = bitcast %class.SkBitmap* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 56, i8* nonnull %41) #7
  call void @_ZN18SkBitmapOperations6RotateERK8SkBitmapNS_14RotationAmountE(%class.SkBitmap* nonnull sret %6, %class.SkBitmap* dereferenceable(56) %2, i32 1) #7
  %42 = call dereferenceable(56) %class.SkBitmap* @_ZN8SkBitmapaSEOS_(%class.SkBitmap* %2, %class.SkBitmap* nonnull dereferenceable(56) %6) #7
  call void @_ZN8SkBitmapD1Ev(%class.SkBitmap* nonnull %6) #7
  call void @llvm.lifetime.end.p0i8(i64 56, i8* nonnull %41) #7
  br i1 %19, label %54, label %55

43:                                               ; preds = %18
  %44 = getelementptr inbounds %"class.gfx::Point", %"class.gfx::Point"* %3, i64 0, i32 1
  %45 = load i32, i32* %44, align 4
  %46 = getelementptr inbounds %class.SkBitmap, %class.SkBitmap* %2, i64 0, i32 1, i32 2, i32 1, i32 0
  %47 = load i32, i32* %46, align 4
  %48 = getelementptr inbounds %"class.gfx::Point", %"class.gfx::Point"* %3, i64 0, i32 0
  %49 = load i32, i32* %48, align 4
  %50 = sub nsw i32 %47, %49
  store i32 %45, i32* %48, align 4
  store i32 %50, i32* %44, align 4
  %51 = bitcast %class.SkBitmap* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 56, i8* nonnull %51) #7
  call void @_ZN18SkBitmapOperations6RotateERK8SkBitmapNS_14RotationAmountE(%class.SkBitmap* nonnull sret %7, %class.SkBitmap* dereferenceable(56) %2, i32 2) #7
  %52 = call dereferenceable(56) %class.SkBitmap* @_ZN8SkBitmapaSEOS_(%class.SkBitmap* %2, %class.SkBitmap* nonnull dereferenceable(56) %7) #7
  call void @_ZN8SkBitmapD1Ev(%class.SkBitmap* nonnull %7) #7
  call void @llvm.lifetime.end.p0i8(i64 56, i8* nonnull %51) #7
  br i1 %19, label %54, label %55

53:                                               ; preds = %18
  br i1 %19, label %54, label %55

54:                                               ; preds = %20, %30, %43, %53
  call fastcc void @_ZN2ui12_GLOBAL__N_124ConvertSkBitmapAlphaTypeEP8SkBitmap11SkAlphaType(%class.SkBitmap* %2, i32 3)
  br label %55

55:                                               ; preds = %4, %20, %30, %43, %54, %53
  %56 = fcmp olt float %0, 0x3E80000000000000
  %57 = select i1 %56, float 1.000000e+00, float %0
  %58 = fcmp oeq float %57, 1.000000e+00
  br i1 %58, label %113, label %59

59:                                               ; preds = %55
  %60 = bitcast %"class.gfx::Size"* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %60) #7
  %61 = getelementptr inbounds %class.SkBitmap, %class.SkBitmap* %2, i64 0, i32 1, i32 2, i32 1, i32 0
  %62 = load i32, i32* %61, align 4
  %63 = getelementptr inbounds %class.SkBitmap, %class.SkBitmap* %2, i64 0, i32 1, i32 2, i32 1, i32 1
  %64 = load i32, i32* %63, align 4
  %65 = getelementptr inbounds %"class.gfx::Size", %"class.gfx::Size"* %8, i64 0, i32 0
  %66 = icmp sgt i32 %62, 0
  %67 = select i1 %66, i32 %62, i32 0
  store i32 %67, i32* %65, align 4
  %68 = getelementptr inbounds %"class.gfx::Size", %"class.gfx::Size"* %8, i64 0, i32 1
  %69 = icmp sgt i32 %64, 0
  %70 = select i1 %69, i32 %64, i32 0
  store i32 %70, i32* %68, align 4
  %71 = call i64 @_ZN3gfx18ScaleToFlooredSizeERKNS_4SizeEf(%"class.gfx::Size"* nonnull dereferenceable(8) %8, float %57) #7
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %60) #7
  %72 = bitcast %class.SkBitmap* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 56, i8* nonnull %72) #7
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %72, i8 -86, i64 56, i1 false)
  call void @_ZN8SkBitmapC1Ev(%class.SkBitmap* nonnull %9) #7
  %73 = bitcast %struct.SkImageInfo* %10 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %73) #7
  %74 = getelementptr inbounds %struct.SkImageInfo, %struct.SkImageInfo* %10, i64 0, i32 0, i32 0, i32 0
  %75 = getelementptr inbounds %class.SkBitmap, %class.SkBitmap* %2, i64 0, i32 1, i32 2, i32 0, i32 0, i32 0
  %76 = load %class.SkColorSpace*, %class.SkColorSpace** %75, align 8, !noalias !2
  %77 = icmp eq %class.SkColorSpace* %76, null
  br i1 %77, label %81, label %78

78:                                               ; preds = %59
  %79 = getelementptr inbounds %class.SkColorSpace, %class.SkColorSpace* %76, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %80 = atomicrmw add i32* %79, i32 1 monotonic, !noalias !2
  br label %81

81:                                               ; preds = %59, %78
  store %class.SkColorSpace* %76, %class.SkColorSpace** %74, align 8, !alias.scope !2
  %82 = getelementptr inbounds %struct.SkImageInfo, %struct.SkImageInfo* %10, i64 0, i32 0, i32 1
  %83 = getelementptr inbounds %class.SkBitmap, %class.SkBitmap* %2, i64 0, i32 1, i32 2, i32 0, i32 1
  %84 = bitcast i32* %83 to i64*
  %85 = bitcast i32* %82 to i64*
  %86 = load i64, i64* %84, align 8, !noalias !2
  store i64 %86, i64* %85, align 8, !alias.scope !2
  %87 = getelementptr inbounds %struct.SkImageInfo, %struct.SkImageInfo* %10, i64 0, i32 1
  %88 = bitcast %struct.SkISize* %87 to i64*
  store i64 %71, i64* %88, align 8, !alias.scope !2
  %89 = call zeroext i1 @_ZN8SkBitmap7setInfoERK11SkImageInfom(%class.SkBitmap* nonnull %9, %struct.SkImageInfo* nonnull dereferenceable(24) %10, i64 0) #7
  %90 = load %class.SkColorSpace*, %class.SkColorSpace** %74, align 8
  %91 = icmp eq %class.SkColorSpace* %90, null
  br i1 %91, label %98, label %92

92:                                               ; preds = %81
  %93 = getelementptr inbounds %class.SkColorSpace, %class.SkColorSpace* %90, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %94 = atomicrmw add i32* %93, i32 -1 acq_rel
  %95 = icmp eq i32 %94, 1
  br i1 %95, label %96, label %98

96:                                               ; preds = %92
  %97 = bitcast %class.SkColorSpace* %90 to i8*
  call void @_ZdlPv(i8* %97) #8
  br label %98

98:                                               ; preds = %81, %92, %96
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %73) #7
  %99 = call zeroext i1 @_ZN8SkBitmap14tryAllocPixelsEPNS_9AllocatorE(%class.SkBitmap* nonnull %9, %"class.SkBitmap::Allocator"* null) #7
  br i1 %99, label %100, label %109

100:                                              ; preds = %98
  %101 = getelementptr inbounds %class.SkBitmap, %class.SkBitmap* %2, i64 0, i32 1
  %102 = getelementptr inbounds %class.SkBitmap, %class.SkBitmap* %9, i64 0, i32 1
  %103 = getelementptr inbounds %struct.SkSamplingOptions, %struct.SkSamplingOptions* %11, i64 0, i32 0
  call void @llvm.lifetime.start.p0i8(i64 20, i8* nonnull %103) #7
  store i8 0, i8* %103, align 4
  %104 = getelementptr inbounds %struct.SkSamplingOptions, %struct.SkSamplingOptions* %11, i64 0, i32 1, i32 0
  store float 0.000000e+00, float* %104, align 4
  %105 = getelementptr inbounds %struct.SkSamplingOptions, %struct.SkSamplingOptions* %11, i64 0, i32 1, i32 1
  store float 0.000000e+00, float* %105, align 4
  %106 = getelementptr inbounds %struct.SkSamplingOptions, %struct.SkSamplingOptions* %11, i64 0, i32 2
  store i32 1, i32* %106, align 4
  %107 = getelementptr inbounds %struct.SkSamplingOptions, %struct.SkSamplingOptions* %11, i64 0, i32 3
  store i32 1, i32* %107, align 4
  %108 = call zeroext i1 @_ZNK8SkPixmap11scalePixelsERKS_RK17SkSamplingOptions(%class.SkPixmap* %101, %class.SkPixmap* dereferenceable(40) %102, %struct.SkSamplingOptions* nonnull dereferenceable(20) %11) #7
  call void @llvm.lifetime.end.p0i8(i64 20, i8* nonnull %103) #7
  br label %109

109:                                              ; preds = %100, %98
  %110 = call dereferenceable(56) %class.SkBitmap* @_ZN8SkBitmapaSERKS_(%class.SkBitmap* %2, %class.SkBitmap* nonnull dereferenceable(56) %9) #7
  %111 = call i64 @_ZN3gfx19ScaleToFlooredPointERKNS_5PointEf(%"class.gfx::Point"* dereferenceable(8) %3, float %57) #7
  %112 = bitcast %"class.gfx::Point"* %3 to i64*
  store i64 %111, i64* %112, align 4
  call void @_ZN8SkBitmapD1Ev(%class.SkBitmap* nonnull %9) #7
  call void @llvm.lifetime.end.p0i8(i64 56, i8* nonnull %72) #7
  br label %113

113:                                              ; preds = %55, %109
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: nounwind ssp uwtable
define internal fastcc void @_ZN2ui12_GLOBAL__N_124ConvertSkBitmapAlphaTypeEP8SkBitmap11SkAlphaType(%class.SkBitmap*, i32) unnamed_addr #0 {
  %3 = alloca %struct.SkImageInfo, align 8
  %4 = alloca %"class.std::__1::vector.77", align 8
  %5 = getelementptr inbounds %class.SkBitmap, %class.SkBitmap* %0, i64 0, i32 1, i32 2, i32 0, i32 2
  %6 = load i32, i32* %5, align 4
  %7 = icmp eq i32 %6, %1
  br i1 %7, label %80, label %8

8:                                                ; preds = %2
  %9 = bitcast %struct.SkImageInfo* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %9) #7
  %10 = getelementptr inbounds %struct.SkImageInfo, %struct.SkImageInfo* %3, i64 0, i32 0, i32 0, i32 0
  %11 = getelementptr inbounds %struct.SkImageInfo, %struct.SkImageInfo* %3, i64 0, i32 0, i32 1
  %12 = getelementptr inbounds %class.SkBitmap, %class.SkBitmap* %0, i64 0, i32 1, i32 2, i32 1, i32 0
  %13 = load i32, i32* %12, align 4
  %14 = getelementptr inbounds %class.SkBitmap, %class.SkBitmap* %0, i64 0, i32 1, i32 2, i32 1, i32 1
  %15 = load i32, i32* %14, align 4
  %16 = zext i32 %15 to i64
  %17 = shl nuw i64 %16, 32
  %18 = zext i32 %13 to i64
  %19 = or i64 %17, %18
  %20 = zext i32 %1 to i64
  %21 = shl nuw i64 %20, 32
  %22 = or i64 %21, 6
  %23 = bitcast %struct.SkImageInfo* %3 to i64*
  store i64 0, i64* %23, align 8, !alias.scope !7
  %24 = bitcast i32* %11 to i64*
  store i64 %22, i64* %24, align 8, !alias.scope !7
  %25 = getelementptr inbounds %struct.SkImageInfo, %struct.SkImageInfo* %3, i64 0, i32 1
  %26 = bitcast %struct.SkISize* %25 to i64*
  store i64 %19, i64* %26, align 8, !alias.scope !7
  %27 = sext i32 %13 to i64
  %28 = getelementptr inbounds %struct.SkImageInfo, %struct.SkImageInfo* %3, i64 0, i32 0
  %29 = call i32 @_ZNK11SkColorInfo13bytesPerPixelEv(%class.SkColorInfo* nonnull %28) #7
  %30 = sext i32 %29 to i64
  %31 = mul nsw i64 %30, %27
  %32 = icmp ult i64 %31, 2147483648
  %33 = select i1 %32, i64 %31, i64 0
  %34 = bitcast %"class.std::__1::vector.77"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %34) #7
  %35 = getelementptr inbounds %"class.std::__1::vector.77", %"class.std::__1::vector.77"* %4, i64 0, i32 0, i32 0
  %36 = getelementptr inbounds %"class.std::__1::vector.77", %"class.std::__1::vector.77"* %4, i64 0, i32 0, i32 1
  %37 = getelementptr inbounds %"class.std::__1::vector.77", %"class.std::__1::vector.77"* %4, i64 0, i32 0, i32 2, i32 0, i32 0
  %38 = bitcast %"class.std::__1::vector.77"* %4 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %38, i8 -86, i64 24, i1 false)
  %39 = call i64 @_ZNK11SkImageInfo15computeByteSizeEm(%struct.SkImageInfo* nonnull %3, i64 %33) #7
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %34, i8 0, i64 24, i1 false) #7
  %40 = icmp eq i64 %39, 0
  br i1 %40, label %41, label %43

41:                                               ; preds = %8
  %42 = bitcast i8** %36 to i64*
  br label %56

43:                                               ; preds = %8
  %44 = icmp slt i64 %39, 0
  br i1 %44, label %45, label %47

45:                                               ; preds = %43
  %46 = bitcast %"class.std::__1::vector.77"* %4 to %"class.std::__1::__vector_base_common"*
  call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* nonnull %46) #9
  unreachable

47:                                               ; preds = %43
  %48 = call i8* @_Znwm(i64 %39) #8
  store i8* %48, i8** %35, align 8
  %49 = getelementptr inbounds i8, i8* %48, i64 %39
  store i8* %49, i8** %37, align 8
  %50 = bitcast i8** %36 to i64*
  %51 = ptrtoint i8* %48 to i64
  %52 = sub i64 %39, %51
  %53 = getelementptr i8, i8* %48, i64 %52
  %54 = ptrtoint i8* %53 to i64
  call void @llvm.memset.p0i8.i64(i8* nonnull align 1 %48, i8 0, i64 %54, i1 false) #7
  %55 = ptrtoint i8* %49 to i64
  store i64 %55, i64* %50, align 8
  br label %56

56:                                               ; preds = %41, %47
  %57 = phi i64* [ %42, %41 ], [ %50, %47 ]
  %58 = phi i8* [ null, %41 ], [ %48, %47 ]
  %59 = call zeroext i1 @_ZNK8SkBitmap10readPixelsERK11SkImageInfoPvmii(%class.SkBitmap* %0, %struct.SkImageInfo* nonnull dereferenceable(24) %3, i8* %58, i64 %33, i32 0, i32 0) #7
  call void @_ZN8SkBitmap5resetEv(%class.SkBitmap* %0) #7
  call void @_ZN8SkBitmap11allocPixelsERK11SkImageInfo(%class.SkBitmap* %0, %struct.SkImageInfo* nonnull dereferenceable(24) %3) #7
  %60 = getelementptr inbounds %class.SkBitmap, %class.SkBitmap* %0, i64 0, i32 1, i32 0
  %61 = load i8*, i8** %60, align 8
  %62 = load i8*, i8** %35, align 8
  %63 = load i64, i64* %57, align 8
  %64 = ptrtoint i8* %62 to i64
  %65 = sub i64 %63, %64
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %61, i8* align 1 %62, i64 %65, i1 false)
  %66 = load i8*, i8** %35, align 8
  %67 = icmp eq i8* %66, null
  br i1 %67, label %70, label %68

68:                                               ; preds = %56
  %69 = ptrtoint i8* %66 to i64
  store i64 %69, i64* %57, align 8
  call void @_ZdlPv(i8* nonnull %66) #8
  br label %70

70:                                               ; preds = %56, %68
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %34) #7
  %71 = load %class.SkColorSpace*, %class.SkColorSpace** %10, align 8
  %72 = icmp eq %class.SkColorSpace* %71, null
  br i1 %72, label %79, label %73

73:                                               ; preds = %70
  %74 = getelementptr inbounds %class.SkColorSpace, %class.SkColorSpace* %71, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %75 = atomicrmw add i32* %74, i32 -1 acq_rel
  %76 = icmp eq i32 %75, 1
  br i1 %76, label %77, label %79

77:                                               ; preds = %73
  %78 = bitcast %class.SkColorSpace* %71 to i8*
  call void @_ZdlPv(i8* %78) #8
  br label %79

79:                                               ; preds = %70, %73, %77
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %9) #7
  br label %80

80:                                               ; preds = %2, %79
  ret void
}

declare void @_ZN18SkBitmapOperations6RotateERK8SkBitmapNS_14RotationAmountE(%class.SkBitmap* sret, %class.SkBitmap* dereferenceable(56), i32) local_unnamed_addr #2

declare dereferenceable(56) %class.SkBitmap* @_ZN8SkBitmapaSEOS_(%class.SkBitmap*, %class.SkBitmap* dereferenceable(56)) local_unnamed_addr #2

; Function Attrs: nounwind
declare void @_ZN8SkBitmapD1Ev(%class.SkBitmap*) unnamed_addr #3

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

declare i64 @_ZN3gfx18ScaleToFlooredSizeERKNS_4SizeEf(%"class.gfx::Size"* dereferenceable(8), float) local_unnamed_addr #2

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

declare void @_ZN8SkBitmapC1Ev(%class.SkBitmap*) unnamed_addr #2

declare zeroext i1 @_ZN8SkBitmap7setInfoERK11SkImageInfom(%class.SkBitmap*, %struct.SkImageInfo* dereferenceable(24), i64) local_unnamed_addr #2

declare zeroext i1 @_ZNK8SkPixmap11scalePixelsERKS_RK17SkSamplingOptions(%class.SkPixmap*, %class.SkPixmap* dereferenceable(40), %struct.SkSamplingOptions* dereferenceable(20)) local_unnamed_addr #2

declare dereferenceable(56) %class.SkBitmap* @_ZN8SkBitmapaSERKS_(%class.SkBitmap*, %class.SkBitmap* dereferenceable(56)) local_unnamed_addr #2

declare i64 @_ZN3gfx19ScaleToFlooredPointERKNS_5PointEf(%"class.gfx::Point"* dereferenceable(8), float) local_unnamed_addr #2

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #1

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2ui20GetImageCursorBitmapEifN7display7Display8RotationEPN3gfx5PointEP8SkBitmap(i32, float, i32, %"class.gfx::Point"*, %class.SkBitmap*) local_unnamed_addr #0 {
  %6 = tail call dereferenceable(216) %"class.ui::ResourceBundle"* @_ZN2ui14ResourceBundle17GetSharedInstanceEv() #7
  %7 = tail call %"class.gfx::ImageSkia"* @_ZN2ui14ResourceBundle17GetImageSkiaNamedEi(%"class.ui::ResourceBundle"* %6, i32 %0) #7
  %8 = tail call dereferenceable(192) %"class.gfx::ImageSkiaRep"* @_ZNK3gfx9ImageSkia17GetRepresentationEf(%"class.gfx::ImageSkia"* %7, float %1) #7
  %9 = tail call dereferenceable(56) %class.SkBitmap* @_ZNK3gfx12ImageSkiaRep9GetBitmapEv(%"class.gfx::ImageSkiaRep"* %8) #7
  %10 = tail call dereferenceable(56) %class.SkBitmap* @_ZN8SkBitmapaSERKS_(%class.SkBitmap* %4, %class.SkBitmap* dereferenceable(56) %9) #7
  %11 = getelementptr inbounds %"class.gfx::ImageSkiaRep", %"class.gfx::ImageSkiaRep"* %8, i64 0, i32 6
  %12 = load float, float* %11, align 8
  %13 = fcmp oeq float %12, 0.000000e+00
  %14 = select i1 %13, float 1.000000e+00, float %12
  %15 = fdiv float %1, %14
  tail call void @_ZN2ui37ScaleAndRotateCursorBitmapAndHotpointEfN7display7Display8RotationEP8SkBitmapPN3gfx5PointE(float %15, i32 %2, %class.SkBitmap* %4, %"class.gfx::Point"* %3)
  ret void
}

declare dereferenceable(216) %"class.ui::ResourceBundle"* @_ZN2ui14ResourceBundle17GetSharedInstanceEv() local_unnamed_addr #2

declare %"class.gfx::ImageSkia"* @_ZN2ui14ResourceBundle17GetImageSkiaNamedEi(%"class.ui::ResourceBundle"*, i32) local_unnamed_addr #2

declare dereferenceable(192) %"class.gfx::ImageSkiaRep"* @_ZNK3gfx9ImageSkia17GetRepresentationEf(%"class.gfx::ImageSkia"*, float) local_unnamed_addr #2

declare dereferenceable(56) %class.SkBitmap* @_ZNK3gfx12ImageSkiaRep9GetBitmapEv(%"class.gfx::ImageSkiaRep"*) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2ui24GetAnimatedCursorBitmapsEifN7display7Display8RotationEPN3gfx5PointEPNSt3__16vectorI8SkBitmapNS6_9allocatorIS8_EEEE(i32, float, i32, %"class.gfx::Point"* nocapture readnone, %"class.std::__1::vector.70"*) local_unnamed_addr #0 {
  %6 = alloca %class.SkBitmap, align 8
  %7 = alloca %class.SkBitmap, align 8
  %8 = tail call dereferenceable(216) %"class.ui::ResourceBundle"* @_ZN2ui14ResourceBundle17GetSharedInstanceEv() #7
  %9 = tail call %"class.gfx::ImageSkia"* @_ZN2ui14ResourceBundle17GetImageSkiaNamedEi(%"class.ui::ResourceBundle"* %8, i32 %0) #7
  %10 = tail call dereferenceable(192) %"class.gfx::ImageSkiaRep"* @_ZNK3gfx9ImageSkia17GetRepresentationEf(%"class.gfx::ImageSkia"* %9, float %1) #7
  %11 = bitcast %class.SkBitmap* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 56, i8* nonnull %11) #7
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %11, i8 -86, i64 56, i1 false)
  %12 = tail call dereferenceable(56) %class.SkBitmap* @_ZNK3gfx12ImageSkiaRep9GetBitmapEv(%"class.gfx::ImageSkiaRep"* %10) #7
  call void @_ZN8SkBitmapC1ERKS_(%class.SkBitmap* nonnull %6, %class.SkBitmap* dereferenceable(56) %12) #7
  %13 = getelementptr inbounds %class.SkBitmap, %class.SkBitmap* %6, i64 0, i32 1, i32 2, i32 1, i32 1
  %14 = load i32, i32* %13, align 4
  %15 = getelementptr inbounds %class.SkBitmap, %class.SkBitmap* %6, i64 0, i32 1, i32 2, i32 1, i32 0
  %16 = load i32, i32* %15, align 8
  %17 = sdiv i32 %16, %14
  %18 = sext i32 %17 to i64
  %19 = getelementptr inbounds %"class.std::__1::vector.70", %"class.std::__1::vector.70"* %4, i64 0, i32 0, i32 1
  %20 = bitcast %class.SkBitmap** %19 to i64*
  %21 = load i64, i64* %20, align 8
  %22 = bitcast %"class.std::__1::vector.70"* %4 to i64*
  %23 = load i64, i64* %22, align 8
  %24 = sub i64 %21, %23
  %25 = sdiv exact i64 %24, 56
  %26 = icmp ult i64 %25, %18
  %27 = inttoptr i64 %23 to %class.SkBitmap*
  %28 = inttoptr i64 %21 to %class.SkBitmap*
  br i1 %26, label %29, label %31

29:                                               ; preds = %5
  %30 = sub nsw i64 %18, %25
  call void @_ZNSt3__16vectorI8SkBitmapNS_9allocatorIS1_EEE8__appendEm(%"class.std::__1::vector.70"* %4, i64 %30) #7
  br label %41

31:                                               ; preds = %5
  %32 = icmp ugt i64 %25, %18
  br i1 %32, label %33, label %41

33:                                               ; preds = %31
  %34 = getelementptr inbounds %class.SkBitmap, %class.SkBitmap* %27, i64 %18
  %35 = icmp eq %class.SkBitmap* %34, %28
  br i1 %35, label %40, label %36

36:                                               ; preds = %33, %36
  %37 = phi %class.SkBitmap* [ %38, %36 ], [ %28, %33 ]
  %38 = getelementptr inbounds %class.SkBitmap, %class.SkBitmap* %37, i64 -1
  call void @_ZN8SkBitmapD1Ev(%class.SkBitmap* %38) #7
  %39 = icmp eq %class.SkBitmap* %38, %34
  br i1 %39, label %40, label %36

40:                                               ; preds = %36, %33
  store %class.SkBitmap* %34, %class.SkBitmap** %19, align 8
  br label %41

41:                                               ; preds = %29, %31, %40
  %42 = icmp sgt i32 %17, 0
  br i1 %42, label %43, label %47

43:                                               ; preds = %41
  %44 = bitcast %class.SkBitmap* %7 to i8*
  %45 = getelementptr inbounds %"class.std::__1::vector.70", %"class.std::__1::vector.70"* %4, i64 0, i32 0, i32 0
  %46 = zext i32 %17 to i64
  br label %48

47:                                               ; preds = %48, %41
  call void @_ZN8SkBitmapD1Ev(%class.SkBitmap* nonnull %6) #7
  call void @llvm.lifetime.end.p0i8(i64 56, i8* nonnull %11) #7
  ret void

48:                                               ; preds = %48, %43
  %49 = phi i64 [ 0, %43 ], [ %55, %48 ]
  %50 = trunc i64 %49 to i32
  %51 = mul nsw i32 %14, %50
  call void @llvm.lifetime.start.p0i8(i64 56, i8* nonnull %44) #7
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %44, i8 -86, i64 56, i1 false)
  call void @_ZN18SkBitmapOperations17CreateTiledBitmapERK8SkBitmapiiii(%class.SkBitmap* nonnull sret %7, %class.SkBitmap* nonnull dereferenceable(56) %6, i32 %51, i32 0, i32 %14, i32 %14) #7
  %52 = load %class.SkBitmap*, %class.SkBitmap** %45, align 8
  %53 = getelementptr inbounds %class.SkBitmap, %class.SkBitmap* %52, i64 %49
  %54 = call dereferenceable(56) %class.SkBitmap* @_ZN8SkBitmapaSERKS_(%class.SkBitmap* %53, %class.SkBitmap* nonnull dereferenceable(56) %7) #7
  call void @_ZN8SkBitmapD1Ev(%class.SkBitmap* nonnull %7) #7
  call void @llvm.lifetime.end.p0i8(i64 56, i8* nonnull %44) #7
  %55 = add nuw nsw i64 %49, 1
  %56 = icmp eq i64 %55, %46
  br i1 %56, label %47, label %48
}

declare void @_ZN8SkBitmapC1ERKS_(%class.SkBitmap*, %class.SkBitmap* dereferenceable(56)) unnamed_addr #2

declare void @_ZN18SkBitmapOperations17CreateTiledBitmapERK8SkBitmapiiii(%class.SkBitmap* sret, %class.SkBitmap* dereferenceable(56), i32, i32, i32, i32) local_unnamed_addr #2

declare i64 @_ZNK11SkImageInfo15computeByteSizeEm(%struct.SkImageInfo*, i64) local_unnamed_addr #2

declare zeroext i1 @_ZNK8SkBitmap10readPixelsERK11SkImageInfoPvmii(%class.SkBitmap*, %struct.SkImageInfo* dereferenceable(24), i8*, i64, i32, i32) local_unnamed_addr #2

declare void @_ZN8SkBitmap5resetEv(%class.SkBitmap*) local_unnamed_addr #2

declare void @_ZN8SkBitmap11allocPixelsERK11SkImageInfo(%class.SkBitmap*, %struct.SkImageInfo* dereferenceable(24)) local_unnamed_addr #2

; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(i8*) local_unnamed_addr #4

declare i32 @_ZNK11SkColorInfo13bytesPerPixelEv(%class.SkColorInfo*) local_unnamed_addr #2

; Function Attrs: noreturn
declare void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"*) local_unnamed_addr #5

; Function Attrs: nobuiltin nofree
declare noalias nonnull i8* @_Znwm(i64) local_unnamed_addr #6

declare zeroext i1 @_ZN8SkBitmap14tryAllocPixelsEPNS_9AllocatorE(%class.SkBitmap*, %"class.SkBitmap::Allocator"*) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__16vectorI8SkBitmapNS_9allocatorIS1_EEE8__appendEm(%"class.std::__1::vector.70"*, i64) local_unnamed_addr #0 comdat align 2 {
  %3 = getelementptr inbounds %"class.std::__1::vector.70", %"class.std::__1::vector.70"* %0, i64 0, i32 0, i32 2, i32 0, i32 0
  %4 = bitcast %class.SkBitmap** %3 to i64*
  %5 = load i64, i64* %4, align 8
  %6 = getelementptr inbounds %"class.std::__1::vector.70", %"class.std::__1::vector.70"* %0, i64 0, i32 0, i32 1
  %7 = bitcast %class.SkBitmap** %6 to i64*
  %8 = load i64, i64* %7, align 8
  %9 = sub i64 %5, %8
  %10 = sdiv exact i64 %9, 56
  %11 = icmp ult i64 %10, %1
  br i1 %11, label %24, label %12

12:                                               ; preds = %2
  %13 = inttoptr i64 %8 to %class.SkBitmap*
  %14 = getelementptr inbounds %class.SkBitmap, %class.SkBitmap* %13, i64 %1
  %15 = icmp eq i64 %1, 0
  br i1 %15, label %22, label %18

16:                                               ; preds = %18
  %17 = ptrtoint %class.SkBitmap* %14 to i64
  br label %22

18:                                               ; preds = %12, %18
  %19 = phi %class.SkBitmap* [ %20, %18 ], [ %13, %12 ]
  tail call void @_ZN8SkBitmapC1Ev(%class.SkBitmap* %19) #7
  %20 = getelementptr inbounds %class.SkBitmap, %class.SkBitmap* %19, i64 1
  %21 = icmp eq %class.SkBitmap* %20, %14
  br i1 %21, label %16, label %18

22:                                               ; preds = %12, %16
  %23 = phi i64 [ %17, %16 ], [ %8, %12 ]
  store i64 %23, i64* %7, align 8
  br label %90

24:                                               ; preds = %2
  %25 = bitcast %"class.std::__1::vector.70"* %0 to i64*
  %26 = load i64, i64* %25, align 8
  %27 = sub i64 %8, %26
  %28 = sdiv exact i64 %27, 56
  %29 = add i64 %28, %1
  %30 = icmp ugt i64 %29, 329406144173384850
  br i1 %30, label %31, label %33

31:                                               ; preds = %24
  %32 = bitcast %"class.std::__1::vector.70"* %0 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %32) #9
  unreachable

33:                                               ; preds = %24
  %34 = sub i64 %5, %26
  %35 = sdiv exact i64 %34, 56
  %36 = icmp ult i64 %35, 164703072086692425
  br i1 %36, label %37, label %42

37:                                               ; preds = %33
  %38 = shl nsw i64 %35, 1
  %39 = icmp ult i64 %38, %29
  %40 = select i1 %39, i64 %29, i64 %38
  %41 = icmp eq i64 %40, 0
  br i1 %41, label %47, label %42

42:                                               ; preds = %33, %37
  %43 = phi i64 [ %40, %37 ], [ 329406144173384850, %33 ]
  %44 = mul i64 %43, 56
  %45 = tail call i8* @_Znwm(i64 %44) #8
  %46 = bitcast i8* %45 to %class.SkBitmap*
  br label %47

47:                                               ; preds = %37, %42
  %48 = phi i64 [ %43, %42 ], [ 0, %37 ]
  %49 = phi %class.SkBitmap* [ %46, %42 ], [ null, %37 ]
  %50 = getelementptr inbounds %class.SkBitmap, %class.SkBitmap* %49, i64 %28
  %51 = getelementptr inbounds %class.SkBitmap, %class.SkBitmap* %49, i64 %48
  %52 = getelementptr inbounds %class.SkBitmap, %class.SkBitmap* %50, i64 %1
  br label %53

53:                                               ; preds = %47, %53
  %54 = phi %class.SkBitmap* [ %55, %53 ], [ %50, %47 ]
  tail call void @_ZN8SkBitmapC1Ev(%class.SkBitmap* %54) #7
  %55 = getelementptr inbounds %class.SkBitmap, %class.SkBitmap* %54, i64 1
  %56 = icmp eq %class.SkBitmap* %52, %55
  br i1 %56, label %57, label %53

57:                                               ; preds = %53
  %58 = ptrtoint %class.SkBitmap* %51 to i64
  %59 = ptrtoint %class.SkBitmap* %52 to i64
  %60 = getelementptr inbounds %"class.std::__1::vector.70", %"class.std::__1::vector.70"* %0, i64 0, i32 0, i32 0
  %61 = load %class.SkBitmap*, %class.SkBitmap** %60, align 8
  %62 = load %class.SkBitmap*, %class.SkBitmap** %6, align 8
  %63 = icmp eq %class.SkBitmap* %62, %61
  br i1 %63, label %64, label %66

64:                                               ; preds = %57
  %65 = ptrtoint %class.SkBitmap* %61 to i64
  br label %75

66:                                               ; preds = %57, %66
  %67 = phi %class.SkBitmap* [ %69, %66 ], [ %50, %57 ]
  %68 = phi %class.SkBitmap* [ %70, %66 ], [ %62, %57 ]
  %69 = getelementptr inbounds %class.SkBitmap, %class.SkBitmap* %67, i64 -1
  %70 = getelementptr inbounds %class.SkBitmap, %class.SkBitmap* %68, i64 -1
  tail call void @_ZN8SkBitmapC1EOS_(%class.SkBitmap* %69, %class.SkBitmap* dereferenceable(56) %70) #7
  %71 = icmp eq %class.SkBitmap* %70, %61
  br i1 %71, label %72, label %66

72:                                               ; preds = %66
  %73 = load i64, i64* %25, align 8
  %74 = load %class.SkBitmap*, %class.SkBitmap** %6, align 8
  br label %75

75:                                               ; preds = %64, %72
  %76 = phi %class.SkBitmap* [ %61, %64 ], [ %74, %72 ]
  %77 = phi %class.SkBitmap* [ %50, %64 ], [ %69, %72 ]
  %78 = phi i64 [ %65, %64 ], [ %73, %72 ]
  %79 = ptrtoint %class.SkBitmap* %77 to i64
  store i64 %79, i64* %25, align 8
  store i64 %59, i64* %7, align 8
  store i64 %58, i64* %4, align 8
  %80 = inttoptr i64 %78 to %class.SkBitmap*
  %81 = icmp eq %class.SkBitmap* %76, %80
  br i1 %81, label %86, label %82

82:                                               ; preds = %75, %82
  %83 = phi %class.SkBitmap* [ %84, %82 ], [ %76, %75 ]
  %84 = getelementptr inbounds %class.SkBitmap, %class.SkBitmap* %83, i64 -1
  tail call void @_ZN8SkBitmapD1Ev(%class.SkBitmap* %84) #7
  %85 = icmp eq %class.SkBitmap* %84, %80
  br i1 %85, label %86, label %82

86:                                               ; preds = %82, %75
  %87 = icmp eq i64 %78, 0
  br i1 %87, label %90, label %88

88:                                               ; preds = %86
  %89 = inttoptr i64 %78 to i8*
  tail call void @_ZdlPv(i8* %89) #8
  br label %90

90:                                               ; preds = %88, %86, %22
  ret void
}

declare void @_ZN8SkBitmapC1EOS_(%class.SkBitmap*, %class.SkBitmap* dereferenceable(56)) unnamed_addr #2

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nobuiltin nofree "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { nounwind }
attributes #8 = { builtin nounwind }
attributes #9 = { noreturn nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{!3, !5}
!3 = distinct !{!3, !4, !"_ZN11SkImageInfo4MakeE7SkISizeRK11SkColorInfo: argument 0"}
!4 = distinct !{!4, !"_ZN11SkImageInfo4MakeE7SkISizeRK11SkColorInfo"}
!5 = distinct !{!5, !6, !"_ZNK11SkImageInfo6makeWHEii: argument 0"}
!6 = distinct !{!6, !"_ZNK11SkImageInfo6makeWHEii"}
!7 = !{!8, !10}
!8 = distinct !{!8, !9, !"_ZN11SkImageInfo4MakeE7SkISize11SkColorType11SkAlphaType5sk_spI12SkColorSpaceE: argument 0"}
!9 = distinct !{!9, !"_ZN11SkImageInfo4MakeE7SkISize11SkColorType11SkAlphaType5sk_spI12SkColorSpaceE"}
!10 = distinct !{!10, !11, !"_ZN11SkImageInfo7MakeN32Eii11SkAlphaType5sk_spI12SkColorSpaceE: argument 0"}
!11 = distinct !{!11, !"_ZN11SkImageInfo7MakeN32Eii11SkAlphaType5sk_spI12SkColorSpaceE"}
