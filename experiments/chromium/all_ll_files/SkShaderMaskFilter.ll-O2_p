; ModuleID = '../../third_party/skia/src/effects/SkShaderMaskFilter.cpp'
source_filename = "../../third_party/skia/src/effects/SkShaderMaskFilter.cpp"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%class.SkPaint = type <{ %class.sk_sp.21, %class.sk_sp.16, %class.sk_sp.15, %class.sk_sp.22, %class.sk_sp.23, %struct.SkRGBA4f, float, float, %union.anon, [4 x i8] }>
%class.sk_sp.21 = type { %class.SkPathEffect* }
%class.SkPathEffect = type { %class.SkFlattenable.base, [4 x i8] }
%class.SkFlattenable.base = type { %class.SkRefCnt.base }
%class.SkRefCnt.base = type { %class.SkRefCntBase.base }
%class.SkRefCntBase.base = type <{ i32 (...)**, %"struct.std::__1::atomic" }>
%"struct.std::__1::atomic" = type { %"struct.std::__1::__atomic_base" }
%"struct.std::__1::__atomic_base" = type { %"struct.std::__1::__atomic_base.1" }
%"struct.std::__1::__atomic_base.1" = type { %"struct.std::__1::__cxx_atomic_impl" }
%"struct.std::__1::__cxx_atomic_impl" = type { %"struct.std::__1::__cxx_atomic_base_impl" }
%"struct.std::__1::__cxx_atomic_base_impl" = type { i32 }
%class.sk_sp.16 = type { %class.SkShader* }
%class.SkShader = type { %class.SkFlattenable.base, [4 x i8] }
%class.sk_sp.15 = type { %class.SkMaskFilter* }
%class.SkMaskFilter = type { %class.SkFlattenable.base, [4 x i8] }
%class.sk_sp.22 = type { %class.SkColorFilter* }
%class.SkColorFilter = type { %class.SkFlattenable.base, [4 x i8] }
%class.sk_sp.23 = type { %class.SkImageFilter* }
%class.SkImageFilter = type { %class.SkFlattenable.base, [4 x i8] }
%struct.SkRGBA4f = type { float, float, float, float }
%union.anon = type { %struct.anon }
%struct.anon = type { i32 }
%class.SkDeque = type { i8*, i8*, %"struct.SkDeque::Block"*, %"struct.SkDeque::Block"*, i64, i8*, i32, i32 }
%"struct.SkDeque::Block" = type opaque
%"class.SkCanvas::MCRec" = type opaque
%class.sk_sp.24 = type { %class.SkMarkerStack* }
%class.SkMarkerStack = type opaque
%class.sk_sp.25 = type { %class.SkBaseDevice* }
%class.SkBaseDevice = type opaque
%class.SkSurfaceProps = type { i32, i32 }
%"class.std::__1::unique_ptr.26" = type { %"class.std::__1::__compressed_pair.27" }
%"class.std::__1::__compressed_pair.27" = type { %"struct.std::__1::__compressed_pair_elem.28" }
%"struct.std::__1::__compressed_pair_elem.28" = type { %class.SkRasterHandleAllocator* }
%class.SkRasterHandleAllocator = type { i32 (...)** }
%class.SkSurface_Base = type opaque
%struct.SkIRect = type { i32, i32, i32, i32 }
%struct.SkRect = type { float, float, float, float }
%"class.std::__1::unique_ptr.32" = type { %"class.std::__1::__compressed_pair.33" }
%"class.std::__1::__compressed_pair.33" = type { %"struct.std::__1::__compressed_pair_elem.34" }
%"struct.std::__1::__compressed_pair_elem.34" = type { %class.SkGlyphRunBuilder* }
%class.SkGlyphRunBuilder = type opaque
%class.sk_sp.14 = type { %class.SkFlattenable* }
%class.SkFlattenable = type { %class.SkRefCnt.base, [4 x i8] }
%class.SkReadBuffer = type <{ i8*, i8*, i8*, %class.SkTHashMap, i32, [4 x i8], %class.sk_sp*, i32, [4 x i8], {}**, i32, [4 x i8], %struct.SkDeserialProcs, i8, [7 x i8] }>
%class.SkTHashMap = type { %class.SkTHashTable }
%class.SkTHashTable = type { i32, i32, %class.SkAutoTArray }
%class.SkAutoTArray = type { %"class.std::__1::unique_ptr" }
%"class.std::__1::unique_ptr" = type { %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %"struct.SkTHashTable<SkTHashMap<unsigned int, sk_sp<SkFlattenable> (*)(SkReadBuffer &), SkGoodHash>::Pair, unsigned int, SkTHashMap<unsigned int, sk_sp<SkFlattenable> (*)(SkReadBuffer &), SkGoodHash>::Pair>::Slot"* }
%"struct.SkTHashTable<SkTHashMap<unsigned int, sk_sp<SkFlattenable> (*)(SkReadBuffer &), SkGoodHash>::Pair, unsigned int, SkTHashMap<unsigned int, sk_sp<SkFlattenable> (*)(SkReadBuffer &), SkGoodHash>::Pair>::Slot" = type <{ %"struct.SkTHashMap<unsigned int, sk_sp<SkFlattenable> (*)(SkReadBuffer &), SkGoodHash>::Pair", i32, [4 x i8] }>
%"struct.SkTHashMap<unsigned int, sk_sp<SkFlattenable> (*)(SkReadBuffer &), SkGoodHash>::Pair" = type { %"struct.std::__1::pair" }
%"struct.std::__1::pair" = type { i32, void (%class.sk_sp.14*, %class.SkReadBuffer*)* }
%class.sk_sp = type { %class.SkTypeface* }
%class.SkTypeface = type <{ %class.SkWeakRefCnt, i32, %class.SkFontStyle, %struct.SkRect, %class.SkOnce, i8, [6 x i8] }>
%class.SkWeakRefCnt = type { %class.SkRefCnt.base, %"struct.std::__1::atomic" }
%class.SkFontStyle = type { i32 }
%class.SkOnce = type { %"struct.std::__1::atomic.2" }
%"struct.std::__1::atomic.2" = type { %"struct.std::__1::__atomic_base.3" }
%"struct.std::__1::__atomic_base.3" = type { %"struct.std::__1::__atomic_base.4" }
%"struct.std::__1::__atomic_base.4" = type { %"struct.std::__1::__cxx_atomic_impl.5" }
%"struct.std::__1::__cxx_atomic_impl.5" = type { %"struct.std::__1::__cxx_atomic_base_impl.6" }
%"struct.std::__1::__cxx_atomic_base_impl.6" = type { i8 }
%struct.SkDeserialProcs = type { void (%class.sk_sp.7*, i8*, i64, i8*)*, i8*, void (%class.sk_sp.12*, i8*, i64, i8*)*, i8*, void (%class.sk_sp*, i8*, i64, i8*)*, i8* }
%class.sk_sp.7 = type { %class.SkPicture* }
%class.SkPicture = type <{ %class.SkRefCnt.base, i32, %"struct.std::__1::atomic.8", [7 x i8] }>
%"struct.std::__1::atomic.8" = type { %"struct.std::__1::__atomic_base.9" }
%"struct.std::__1::__atomic_base.9" = type { %"struct.std::__1::__cxx_atomic_impl.10" }
%"struct.std::__1::__cxx_atomic_impl.10" = type { %"struct.std::__1::__cxx_atomic_base_impl.11" }
%"struct.std::__1::__cxx_atomic_base_impl.11" = type { i8 }
%class.sk_sp.12 = type { %class.SkImage* }
%class.SkImage = type <{ %class.SkRefCnt.base, [4 x i8], %struct.SkImageInfo, i32, [4 x i8] }>
%struct.SkImageInfo = type { %class.SkColorInfo, %struct.SkISize }
%class.SkColorInfo = type { %class.sk_sp.13, i32, i32 }
%class.sk_sp.13 = type { %class.SkColorSpace* }
%class.SkColorSpace = type <{ %class.SkNVRefCnt, i32, i32, %struct.skcms_TransferFunction, %struct.skcms_Matrix3x3, %struct.skcms_TransferFunction, %struct.skcms_Matrix3x3, %class.SkOnce, [3 x i8] }>
%class.SkNVRefCnt = type { %"struct.std::__1::atomic" }
%struct.skcms_TransferFunction = type { float, float, float, float, float, float, float }
%struct.skcms_Matrix3x3 = type { [3 x [3 x float]] }
%struct.SkISize = type { i32, i32 }
%class.SkShaderMF = type { %class.SkMaskFilterBase.base, %class.sk_sp.16 }
%class.SkMaskFilterBase.base = type { %class.SkMaskFilter.base }
%class.SkMaskFilter.base = type { %class.SkFlattenable.base }
%class.SkWriteBuffer = type { i32 (...)**, %struct.SkSerialProcs }
%struct.SkSerialProcs = type { void (%class.sk_sp.17*, %class.SkPicture*, i8*)*, i8*, void (%class.sk_sp.17*, %class.SkImage*, i8*)*, i8*, void (%class.sk_sp.17*, %class.SkTypeface*, i8*)*, i8* }
%class.sk_sp.17 = type { %class.SkData* }
%class.SkData = type { %class.SkNVRefCnt.18, void (i8*, i8*)*, i8*, i8*, i64 }
%class.SkNVRefCnt.18 = type { %"struct.std::__1::atomic" }
%struct.SkMask = type <{ i8*, %struct.SkIRect, i32, i8, [3 x i8] }>
%class.SkMatrix = type { [9 x float], i32 }
%struct.SkIPoint = type { i32, i32 }
%class.SkBitmap = type { %class.sk_sp.19, %class.SkPixmap, %class.sk_sp.20 }
%class.sk_sp.19 = type { %class.SkPixelRef* }
%class.SkPixelRef = type opaque
%class.SkPixmap = type { i8*, i64, %struct.SkImageInfo }
%class.sk_sp.20 = type { %class.SkMipmap* }
%class.SkMipmap = type opaque
%class.SkCanvas = type { i32 (...)**, %class.SkDeque, %"class.SkCanvas::MCRec"*, %class.sk_sp.24, [384 x i64], %class.sk_sp.25, %class.SkSurfaceProps, i32, %"class.std::__1::unique_ptr.26", %class.SkSurface_Base*, %struct.SkIRect, %struct.SkRect, %"class.std::__1::unique_ptr.32" }
%class.SkRefCntBase = type <{ i32 (...)**, %"struct.std::__1::atomic", [4 x i8] }>
%class.GrFragmentProcessor = type <{ %class.GrProcessor, %class.SkSTArray, %class.GrFragmentProcessor*, i32, %"struct.SkSL::SampleUsage", [4 x i8] }>
%class.GrProcessor = type { i32 (...)**, i32, i32 }
%class.SkSTArray = type { %class.SkAlignedSTStorage, %class.SkTArray }
%class.SkAlignedSTStorage = type { [8 x i8] }
%class.SkTArray = type { %"class.std::__1::unique_ptr.38"*, i64 }
%"class.std::__1::unique_ptr.38" = type { %"class.std::__1::__compressed_pair.39" }
%"class.std::__1::__compressed_pair.39" = type { %"struct.std::__1::__compressed_pair_elem.40" }
%"struct.std::__1::__compressed_pair_elem.40" = type { %class.GrFragmentProcessor* }
%"struct.SkSL::SampleUsage" = type <{ i32, i8, [3 x i8] }>
%struct.GrFPArgs = type { %class.GrRecordingContext*, %class.SkMatrixProvider*, %class.SkMatrix*, i8, %class.GrColorInfo* }
%class.GrRecordingContext = type { %class.GrImageContext.base, %"class.GrRecordingContext::Stats", %"class.std::__1::unique_ptr.45", %"class.GrRecordingContext::OwnedArenas", %"class.std::__1::unique_ptr.88", %"class.std::__1::unique_ptr.94" }
%class.GrImageContext.base = type <{ %class.GrContext_Base, %class.GrSingleOwner }>
%class.GrContext_Base = type { %class.SkRefCnt.base, %class.sk_sp.44 }
%class.sk_sp.44 = type { %class.GrContextThreadSafeProxy* }
%class.GrContextThreadSafeProxy = type opaque
%class.GrSingleOwner = type { i8 }
%"class.GrRecordingContext::Stats" = type { i8 }
%"class.std::__1::unique_ptr.45" = type { %"class.std::__1::__compressed_pair.46" }
%"class.std::__1::__compressed_pair.46" = type { %"struct.std::__1::__compressed_pair_elem.47" }
%"struct.std::__1::__compressed_pair_elem.47" = type { %class.GrAuditTrail* }
%class.GrAuditTrail = type <{ %class.SkTArray.48, %class.SkTHashMap.50, %class.SkTHashMap.59, %class.SkTArray.68, %class.SkTArray.70, i32, i8, [3 x i8] }>
%class.SkTArray.48 = type { %"class.std::__1::unique_ptr.49"*, i64 }
%"class.std::__1::unique_ptr.49" = type { %"class.std::__1::__compressed_pair.145" }
%"class.std::__1::__compressed_pair.145" = type { %"struct.std::__1::__compressed_pair_elem.146" }
%"struct.std::__1::__compressed_pair_elem.146" = type { %"struct.GrAuditTrail::Op"* }
%"struct.GrAuditTrail::Op" = type <{ %class.SkString, %class.SkTArray.70, %struct.SkRect, i32, i32, i32, [4 x i8] }>
%class.SkString = type { %class.sk_sp.71 }
%class.sk_sp.71 = type { %"struct.SkString::Rec"* }
%"struct.SkString::Rec" = type <{ i32, %"struct.std::__1::atomic", i8, [3 x i8] }>
%class.SkTHashMap.50 = type { %class.SkTHashTable.51 }
%class.SkTHashTable.51 = type { i32, i32, %class.SkAutoTArray.52 }
%class.SkAutoTArray.52 = type { %"class.std::__1::unique_ptr.53" }
%"class.std::__1::unique_ptr.53" = type { %"class.std::__1::__compressed_pair.54" }
%"class.std::__1::__compressed_pair.54" = type { %"struct.std::__1::__compressed_pair_elem.55" }
%"struct.std::__1::__compressed_pair_elem.55" = type { %"struct.SkTHashTable<SkTHashMap<unsigned int, int, SkGoodHash>::Pair, unsigned int, SkTHashMap<unsigned int, int, SkGoodHash>::Pair>::Slot"* }
%"struct.SkTHashTable<SkTHashMap<unsigned int, int, SkGoodHash>::Pair, unsigned int, SkTHashMap<unsigned int, int, SkGoodHash>::Pair>::Slot" = type { %"struct.SkTHashMap<unsigned int, int, SkGoodHash>::Pair", i32 }
%"struct.SkTHashMap<unsigned int, int, SkGoodHash>::Pair" = type { %"struct.std::__1::pair.150" }
%"struct.std::__1::pair.150" = type { i32, i32 }
%class.SkTHashMap.59 = type { %class.SkTHashTable.60 }
%class.SkTHashTable.60 = type { i32, i32, %class.SkAutoTArray.61 }
%class.SkAutoTArray.61 = type { %"class.std::__1::unique_ptr.62" }
%"class.std::__1::unique_ptr.62" = type { %"class.std::__1::__compressed_pair.63" }
%"class.std::__1::__compressed_pair.63" = type { %"struct.std::__1::__compressed_pair_elem.64" }
%"struct.std::__1::__compressed_pair_elem.64" = type { %"struct.SkTHashTable<SkTHashMap<int, SkTArray<GrAuditTrail::Op *, false> *, SkGoodHash>::Pair, int, SkTHashMap<int, SkTArray<GrAuditTrail::Op *, false> *, SkGoodHash>::Pair>::Slot"* }
%"struct.SkTHashTable<SkTHashMap<int, SkTArray<GrAuditTrail::Op *, false> *, SkGoodHash>::Pair, int, SkTHashMap<int, SkTArray<GrAuditTrail::Op *, false> *, SkGoodHash>::Pair>::Slot" = type <{ %"struct.SkTHashMap<int, SkTArray<GrAuditTrail::Op *, false> *, SkGoodHash>::Pair", i32, [4 x i8] }>
%"struct.SkTHashMap<int, SkTArray<GrAuditTrail::Op *, false> *, SkGoodHash>::Pair" = type { %"struct.std::__1::pair.151" }
%"struct.std::__1::pair.151" = type { i32, %class.SkTArray.152* }
%class.SkTArray.152 = type { %"struct.GrAuditTrail::Op"**, i64 }
%class.SkTArray.68 = type { %"class.std::__1::unique_ptr.69"*, i64 }
%"class.std::__1::unique_ptr.69" = type { %"class.std::__1::__compressed_pair.153" }
%"class.std::__1::__compressed_pair.153" = type { %"struct.std::__1::__compressed_pair_elem.154" }
%"struct.std::__1::__compressed_pair_elem.154" = type { %"struct.GrAuditTrail::OpNode"* }
%"struct.GrAuditTrail::OpNode" = type <{ %struct.SkRect, %class.SkTArray.152, %"class.GrSurfaceProxy::UniqueID", [4 x i8] }>
%"class.GrSurfaceProxy::UniqueID" = type { i32 }
%class.SkTArray.70 = type { %class.SkString*, i64 }
%"class.GrRecordingContext::OwnedArenas" = type { i8, %"class.std::__1::unique_ptr.75", %"class.std::__1::unique_ptr.81" }
%"class.std::__1::unique_ptr.75" = type { %"class.std::__1::__compressed_pair.76" }
%"class.std::__1::__compressed_pair.76" = type { %"struct.std::__1::__compressed_pair_elem.77" }
%"struct.std::__1::__compressed_pair_elem.77" = type { %class.SkArenaAlloc* }
%class.SkArenaAlloc = type <{ i8*, i8*, i8*, %class.SkFibBlockSizes, [4 x i8] }>
%class.SkFibBlockSizes = type { i32 }
%"class.std::__1::unique_ptr.81" = type { %"class.std::__1::__compressed_pair.82" }
%"class.std::__1::__compressed_pair.82" = type { %"struct.std::__1::__compressed_pair_elem.83" }
%"struct.std::__1::__compressed_pair_elem.83" = type { %class.GrSubRunAllocator* }
%class.GrSubRunAllocator = type { %class.GrBagOfBytes }
%class.GrBagOfBytes = type { i8*, i32, %class.SkFibBlockSizes.84 }
%class.SkFibBlockSizes.84 = type { i32 }
%"class.std::__1::unique_ptr.88" = type { %"class.std::__1::__compressed_pair.89" }
%"class.std::__1::__compressed_pair.89" = type { %"struct.std::__1::__compressed_pair_elem.90" }
%"struct.std::__1::__compressed_pair_elem.90" = type { %class.GrDrawingManager* }
%class.GrDrawingManager = type opaque
%"class.std::__1::unique_ptr.94" = type { %"class.std::__1::__compressed_pair.95" }
%"class.std::__1::__compressed_pair.95" = type { %"struct.std::__1::__compressed_pair_elem.96" }
%"struct.std::__1::__compressed_pair_elem.96" = type { %class.GrProxyProvider* }
%class.GrProxyProvider = type opaque
%class.SkMatrixProvider = type opaque
%class.GrColorInfo = type opaque
%class.SkShaderBase = type { %class.SkShader.base, %class.SkMatrix, [4 x i8] }
%class.SkShader.base = type { %class.SkFlattenable.base }
%class.SkMaskFilterBase = type { %class.SkMaskFilter.base, [4 x i8] }
%class.GrStyledShape = type opaque
%class.GrSurfaceDrawContext = type opaque
%class.GrPaint = type opaque
%class.GrClip = type opaque
%class.GrSurfaceProxyView = type <{ %class.sk_sp.100, i32, %class.GrSwizzle, [2 x i8] }>
%class.sk_sp.100 = type { %class.GrSurfaceProxy* }
%class.GrSurfaceProxy = type { i32 (...)**, %class.SkNVRefCnt.101, %class.sk_sp.102, i32, [4 x i8], %class.GrBackendFormat, %struct.SkISize, i32, i8, i32, %"class.GrSurfaceProxy::UniqueID", %"class.std::__1::function", i8, i8, i8, i8, i32, %"struct.std::__1::atomic.140" }
%class.SkNVRefCnt.101 = type { %"struct.std::__1::atomic" }
%class.sk_sp.102 = type { %class.GrSurface* }
%class.GrSurface = type { %class.GrGpuResource, %struct.SkISize, i32, i8, %class.sk_sp.104 }
%class.GrGpuResource = type { i32 (...)**, %class.GrIORef, i32, i32, %"class.std::__1::chrono::time_point", %class.GrScratchKey, %class.GrUniqueKey, %class.GrGpu*, i64, i8, i8, %"class.GrGpuResource::UniqueID" }
%class.GrIORef = type { %"struct.std::__1::atomic", %"struct.std::__1::atomic" }
%"class.std::__1::chrono::time_point" = type { %"class.std::__1::chrono::duration" }
%"class.std::__1::chrono::duration" = type { i64 }
%class.GrScratchKey = type { %class.GrResourceKey }
%class.GrResourceKey = type { %class.SkAutoSTMalloc }
%class.SkAutoSTMalloc = type <{ i32*, %union.anon.103, [4 x i8] }>
%union.anon.103 = type { [7 x i32] }
%class.GrUniqueKey = type { %class.GrResourceKey, %class.sk_sp.17, i8* }
%class.GrGpu = type opaque
%"class.GrGpuResource::UniqueID" = type { i32 }
%class.sk_sp.104 = type { %class.GrRefCntedCallback* }
%class.GrRefCntedCallback = type { %class.SkNVRefCnt.105, void (i8*)*, i8* }
%class.SkNVRefCnt.105 = type { %"struct.std::__1::atomic" }
%class.GrBackendFormat = type { i32, i8, %union.anon.106, i32, [4 x i8] }
%union.anon.106 = type { %struct.anon.107 }
%struct.anon.107 = type { i32, [4 x i8], %struct.GrVkYcbcrConversionInfo }
%struct.GrVkYcbcrConversionInfo = type <{ i32, [4 x i8], i64, i32, i32, i32, i32, i32, i32, i32, [4 x i8] }>
%"class.std::__1::function" = type { %"class.std::__1::__function::__policy_func" }
%"class.std::__1::__function::__policy_func" = type { %"union.std::__1::__function::__policy_storage", %"struct.std::__1::__function::__policy_invoker", %"struct.std::__1::__function::__policy"* }
%"union.std::__1::__function::__policy_storage" = type { i8*, [8 x i8] }
%"struct.std::__1::__function::__policy_invoker" = type { void (%"struct.GrSurfaceProxy::LazyCallbackResult"*, %"union.std::__1::__function::__policy_storage"*, %class.GrResourceProvider*, %"struct.GrSurfaceProxy::LazySurfaceDesc"*)* }
%"struct.GrSurfaceProxy::LazyCallbackResult" = type <{ %class.sk_sp.102, i32, i8, [3 x i8] }>
%class.GrResourceProvider = type { %class.GrResourceCache*, %class.GrGpu*, %class.sk_sp.137, %class.sk_sp.139, %class.sk_sp.139 }
%class.GrResourceCache = type { %class.GrProxyProvider*, %class.GrThreadSafeCache*, i32, %class.SkTDPQueue, %class.SkTDArray, %class.SkTMultiMap, %class.SkTDynamicHash.117, i64, i64, i32, i64, i64, i32, [4 x i8], %"class.SkMessageBus<GrUniqueKeyInvalidatedMessage, unsigned int, true>::Inbox", %"class.SkMessageBus<GrTextureFreedMessage, GrDirectContext::DirectContextID, true>::Inbox", %class.SkTHashMap.128, %"class.GrDirectContext::DirectContextID", i32, %class.GrSingleOwner* }
%class.GrThreadSafeCache = type opaque
%class.SkTDPQueue = type { %class.SkTDArray }
%class.SkTDArray = type { %class.GrGpuResource**, i32, i32 }
%class.SkTMultiMap = type <{ %class.SkTDynamicHash, i32, [4 x i8] }>
%class.SkTDynamicHash = type { %class.SkTHashTable.109 }
%class.SkTHashTable.109 = type { i32, i32, %class.SkAutoTArray.110 }
%class.SkAutoTArray.110 = type { %"class.std::__1::unique_ptr.111" }
%"class.std::__1::unique_ptr.111" = type { %"class.std::__1::__compressed_pair.112" }
%"class.std::__1::__compressed_pair.112" = type { %"struct.std::__1::__compressed_pair_elem.113" }
%"struct.std::__1::__compressed_pair_elem.113" = type { %"struct.SkTHashTable<SkTMultiMap<GrGpuResource, GrScratchKey, GrResourceCache::ScratchMapTraits>::ValueList *, GrScratchKey, SkTDynamicHash<SkTMultiMap<GrGpuResource, GrScratchKey, GrResourceCache::ScratchMapTraits>::ValueList, GrScratchKey, SkTMultiMap<GrGpuResource, GrScratchKey, GrResourceCache::ScratchMapTraits>::ValueList>::AdaptedTraits>::Slot"* }
%"struct.SkTHashTable<SkTMultiMap<GrGpuResource, GrScratchKey, GrResourceCache::ScratchMapTraits>::ValueList *, GrScratchKey, SkTDynamicHash<SkTMultiMap<GrGpuResource, GrScratchKey, GrResourceCache::ScratchMapTraits>::ValueList, GrScratchKey, SkTMultiMap<GrGpuResource, GrScratchKey, GrResourceCache::ScratchMapTraits>::ValueList>::AdaptedTraits>::Slot" = type opaque
%class.SkTDynamicHash.117 = type { %class.SkTHashTable.118 }
%class.SkTHashTable.118 = type { i32, i32, %class.SkAutoTArray.119 }
%class.SkAutoTArray.119 = type { %"class.std::__1::unique_ptr.120" }
%"class.std::__1::unique_ptr.120" = type { %"class.std::__1::__compressed_pair.121" }
%"class.std::__1::__compressed_pair.121" = type { %"struct.std::__1::__compressed_pair_elem.122" }
%"struct.std::__1::__compressed_pair_elem.122" = type { %"struct.SkTHashTable<GrGpuResource *, GrUniqueKey, SkTDynamicHash<GrGpuResource, GrUniqueKey, GrResourceCache::UniqueHashTraits>::AdaptedTraits>::Slot"* }
%"struct.SkTHashTable<GrGpuResource *, GrUniqueKey, SkTDynamicHash<GrGpuResource, GrUniqueKey, GrResourceCache::UniqueHashTraits>::AdaptedTraits>::Slot" = type <{ %class.GrGpuResource*, i32, [4 x i8] }>
%"class.SkMessageBus<GrUniqueKeyInvalidatedMessage, unsigned int, true>::Inbox" = type <{ %class.SkTArray.126, %class.SkMutex, i32, [4 x i8] }>
%class.SkTArray.126 = type { %class.GrUniqueKeyInvalidatedMessage*, i64 }
%class.GrUniqueKeyInvalidatedMessage = type <{ %class.GrUniqueKey, i32, i8, [3 x i8] }>
%class.SkMutex = type { %class.SkSemaphore }
%class.SkSemaphore = type { %"struct.std::__1::atomic", %class.SkOnce, %"struct.SkSemaphore::OSSemaphore"* }
%"struct.SkSemaphore::OSSemaphore" = type opaque
%"class.SkMessageBus<GrTextureFreedMessage, GrDirectContext::DirectContextID, true>::Inbox" = type <{ %class.SkTArray.127, %class.SkMutex, %"class.GrDirectContext::DirectContextID", [4 x i8] }>
%class.SkTArray.127 = type { %struct.GrTextureFreedMessage*, i64 }
%struct.GrTextureFreedMessage = type <{ %class.GrTexture*, %"class.GrDirectContext::DirectContextID", [4 x i8] }>
%class.GrTexture = type <{ i32 (...)**, i32, i32, i32, [4 x i8], %class.GrSurface }>
%class.SkTHashMap.128 = type { %class.SkTHashTable.129 }
%class.SkTHashTable.129 = type { i32, i32, %class.SkAutoTArray.130 }
%class.SkAutoTArray.130 = type { %"class.std::__1::unique_ptr.131" }
%"class.std::__1::unique_ptr.131" = type { %"class.std::__1::__compressed_pair.132" }
%"class.std::__1::__compressed_pair.132" = type { %"struct.std::__1::__compressed_pair_elem.133" }
%"struct.std::__1::__compressed_pair_elem.133" = type { %"struct.SkTHashTable<SkTHashMap<unsigned int, GrResourceCache::TextureAwaitingUnref, SkGoodHash>::Pair, unsigned int, SkTHashMap<unsigned int, GrResourceCache::TextureAwaitingUnref, SkGoodHash>::Pair>::Slot"* }
%"struct.SkTHashTable<SkTHashMap<unsigned int, GrResourceCache::TextureAwaitingUnref, SkGoodHash>::Pair, unsigned int, SkTHashMap<unsigned int, GrResourceCache::TextureAwaitingUnref, SkGoodHash>::Pair>::Slot" = type opaque
%"class.GrDirectContext::DirectContextID" = type { i32 }
%class.sk_sp.137 = type { %class.GrCaps* }
%class.GrCaps = type <{ %class.SkRefCnt.base, [4 x i8], %class.sk_sp.138, i48, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, [4 x i8], i64, %class.GrDriverBugWorkarounds, i8, i8 }>
%class.sk_sp.138 = type { %class.GrShaderCaps* }
%class.GrShaderCaps = type <{ %class.SkRefCnt.base, i32, i56, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i32, i32, i32, [4 x i8] }>
%class.GrDriverBugWorkarounds = type { i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8 }
%class.sk_sp.139 = type { %class.GrGpuBuffer* }
%class.GrGpuBuffer = type { %class.GrGpuResource, %class.GrBuffer, i8*, i64, i32, i32 }
%class.GrBuffer = type { i32 (...)** }
%"struct.GrSurfaceProxy::LazySurfaceDesc" = type <{ %struct.SkISize, i32, i8, i8, [2 x i8], i32, [4 x i8], %class.GrBackendFormat*, i8, i8, [6 x i8] }>
%"struct.std::__1::__function::__policy" = type { i8* (i8*)*, void (i8*)*, i8, %"class.std::type_info"* }
%"class.std::type_info" = type { i32 (...)**, i8* }
%"struct.std::__1::atomic.140" = type { %"struct.std::__1::__atomic_base.141" }
%"struct.std::__1::__atomic_base.141" = type { %"struct.std::__1::__atomic_base.142" }
%"struct.std::__1::__atomic_base.142" = type { %"struct.std::__1::__cxx_atomic_impl.143" }
%"struct.std::__1::__cxx_atomic_impl.143" = type { %"struct.std::__1::__cxx_atomic_base_impl.144" }
%"struct.std::__1::__cxx_atomic_base_impl.144" = type { i64 }
%class.GrSwizzle = type { i16 }
%"struct.SkMaskFilterBase::BlurRec" = type { float, i32 }
%"class.SkMaskFilterBase::NinePatch" = type { %struct.SkMask, %struct.SkIRect, %struct.SkIPoint, %class.SkCachedData* }
%class.SkCachedData = type opaque
%class.SkRRect = type { %struct.SkRect, [4 x %struct.SkPoint], i32 }
%struct.SkPoint = type { float, float }

$_ZN10SkShaderMFD2Ev = comdat any

$_ZN10SkShaderMFD0Ev = comdat any

$_ZNK12SkRefCntBase16internal_disposeEv = comdat any

$_ZNK10SkShaderMF10getFactoryEv = comdat any

$_ZNK10SkShaderMF11getTypeNameEv = comdat any

$_ZNK12SkMaskFilter18getFlattenableTypeEv = comdat any

$_ZNK10SkShaderMF9getFormatEv = comdat any

$_ZNK10SkShaderMF17computeFastBoundsERK6SkRectPS0_ = comdat any

$_ZNK10SkShaderMF7asABlurEPN16SkMaskFilterBase7BlurRecE = comdat any

@__const._ZNK10SkShaderMF10filterMaskEP6SkMaskRKS0_RK8SkMatrixP8SkIPoint.paint = private unnamed_addr constant %class.SkPaint <{ %class.sk_sp.21 { %class.SkPathEffect* inttoptr (i64 -6148914691236517206 to %class.SkPathEffect*) }, %class.sk_sp.16 { %class.SkShader* inttoptr (i64 -6148914691236517206 to %class.SkShader*) }, %class.sk_sp.15 { %class.SkMaskFilter* inttoptr (i64 -6148914691236517206 to %class.SkMaskFilter*) }, %class.sk_sp.22 { %class.SkColorFilter* inttoptr (i64 -6148914691236517206 to %class.SkColorFilter*) }, %class.sk_sp.23 { %class.SkImageFilter* inttoptr (i64 -6148914691236517206 to %class.SkImageFilter*) }, %struct.SkRGBA4f { float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000 }, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, %union.anon { %struct.anon { i32 -1431655766 } }, [4 x i8] c"\AA\AA\AA\AA" }>, align 8
@__const._ZNK10SkShaderMF10filterMaskEP6SkMaskRKS0_RK8SkMatrixP8SkIPoint.canvas = private unnamed_addr constant { i32 (...)**, %class.SkDeque, %"class.SkCanvas::MCRec"*, %class.sk_sp.24, [384 x i64], %class.sk_sp.25, %class.SkSurfaceProps, i32, [4 x i8], %"class.std::__1::unique_ptr.26", %class.SkSurface_Base*, %struct.SkIRect, %struct.SkRect, %"class.std::__1::unique_ptr.32" } { i32 (...)** inttoptr (i64 -6148914691236517206 to i32 (...)**), %class.SkDeque { i8* inttoptr (i64 -6148914691236517206 to i8*), i8* inttoptr (i64 -6148914691236517206 to i8*), %"struct.SkDeque::Block"* inttoptr (i64 -6148914691236517206 to %"struct.SkDeque::Block"*), %"struct.SkDeque::Block"* inttoptr (i64 -6148914691236517206 to %"struct.SkDeque::Block"*), i64 -6148914691236517206, i8* inttoptr (i64 -6148914691236517206 to i8*), i32 -1431655766, i32 -1431655766 }, %"class.SkCanvas::MCRec"* inttoptr (i64 -6148914691236517206 to %"class.SkCanvas::MCRec"*), %class.sk_sp.24 { %class.SkMarkerStack* inttoptr (i64 -6148914691236517206 to %class.SkMarkerStack*) }, [384 x i64] [i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206], %class.sk_sp.25 { %class.SkBaseDevice* inttoptr (i64 -6148914691236517206 to %class.SkBaseDevice*) }, %class.SkSurfaceProps { i32 -1431655766, i32 -1431655766 }, i32 -1431655766, [4 x i8] c"\AA\AA\AA\AA", %"class.std::__1::unique_ptr.26" { %"class.std::__1::__compressed_pair.27" { %"struct.std::__1::__compressed_pair_elem.28" { %class.SkRasterHandleAllocator* inttoptr (i64 -6148914691236517206 to %class.SkRasterHandleAllocator*) } } }, %class.SkSurface_Base* inttoptr (i64 -6148914691236517206 to %class.SkSurface_Base*), %struct.SkIRect { i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766 }, %struct.SkRect { float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000 }, %"class.std::__1::unique_ptr.32" { %"class.std::__1::__compressed_pair.33" { %"struct.std::__1::__compressed_pair_elem.34" { %class.SkGlyphRunBuilder* inttoptr (i64 -6148914691236517206 to %class.SkGlyphRunBuilder*) } } } }, align 8
@.str = private unnamed_addr constant [11 x i8] c"SkShaderMF\00", align 1
@_ZTV10SkShaderMF = hidden unnamed_addr constant { [20 x i8*] } { [20 x i8*] [i8* null, i8* null, i8* bitcast (void (%class.SkShaderMF*)* @_ZN10SkShaderMFD2Ev to i8*), i8* bitcast (void (%class.SkShaderMF*)* @_ZN10SkShaderMFD0Ev to i8*), i8* bitcast (void (%class.SkRefCntBase*)* @_ZNK12SkRefCntBase16internal_disposeEv to i8*), i8* bitcast (void (%class.sk_sp.14*, %class.SkReadBuffer*)* (%class.SkShaderMF*)* @_ZNK10SkShaderMF10getFactoryEv to i8*), i8* bitcast (i8* (%class.SkShaderMF*)* @_ZNK10SkShaderMF11getTypeNameEv to i8*), i8* bitcast (void (%class.SkShaderMF*, %class.SkWriteBuffer*)* @_ZNK10SkShaderMF7flattenER13SkWriteBuffer to i8*), i8* bitcast (i32 (%class.SkMaskFilter*)* @_ZNK12SkMaskFilter18getFlattenableTypeEv to i8*), i8* bitcast (i8 (%class.SkShaderMF*)* @_ZNK10SkShaderMF9getFormatEv to i8*), i8* bitcast (i1 (%class.SkShaderMF*, %struct.SkMask*, %struct.SkMask*, %class.SkMatrix*, %struct.SkIPoint*)* @_ZNK10SkShaderMF10filterMaskEP6SkMaskRKS0_RK8SkMatrixP8SkIPoint to i8*), i8* bitcast (i1 (%class.SkMaskFilterBase*, %class.GrStyledShape*, %struct.SkIRect*, %struct.SkIRect*, %class.SkMatrix*, %struct.SkIRect*)* @_ZNK16SkMaskFilterBase16canFilterMaskGPUERK13GrStyledShapeRK7SkIRectS5_RK8SkMatrixPS3_ to i8*), i8* bitcast (i1 (%class.SkMaskFilterBase*, %class.GrRecordingContext*, %class.GrSurfaceDrawContext*, %class.GrPaint*, %class.GrClip*, %class.SkMatrix*, %class.GrStyledShape*)* @_ZNK16SkMaskFilterBase19directFilterMaskGPUEP18GrRecordingContextP20GrSurfaceDrawContextO7GrPaintPK6GrClipRK8SkMatrixRK13GrStyledShape to i8*), i8* bitcast (void (%class.GrSurfaceProxyView*, %class.SkMaskFilterBase*, %class.GrRecordingContext*, %class.GrSurfaceProxyView*, i32, i32, %class.SkMatrix*, %struct.SkIRect*)* @_ZNK16SkMaskFilterBase13filterMaskGPUEP18GrRecordingContext18GrSurfaceProxyView11GrColorType11SkAlphaTypeRK8SkMatrixRK7SkIRect to i8*), i8* bitcast (void (%class.SkShaderMF*, %struct.SkRect*, %struct.SkRect*)* @_ZNK10SkShaderMF17computeFastBoundsERK6SkRectPS0_ to i8*), i8* bitcast (i1 (%class.SkShaderMF*, %"struct.SkMaskFilterBase::BlurRec"*)* @_ZNK10SkShaderMF7asABlurEPN16SkMaskFilterBase7BlurRecE to i8*), i8* bitcast (%class.GrFragmentProcessor* (%class.SkShaderMF*, %struct.GrFPArgs*)* @_ZNK10SkShaderMF21onAsFragmentProcessorERK8GrFPArgs to i8*), i8* bitcast (i1 (%class.SkShaderMF*)* @_ZNK10SkShaderMF22onHasFragmentProcessorEv to i8*), i8* bitcast (i32 (%class.SkMaskFilterBase*, %struct.SkRect*, i32, %class.SkMatrix*, %struct.SkIRect*, %"class.SkMaskFilterBase::NinePatch"*)* @_ZNK16SkMaskFilterBase17filterRectsToNineEPK6SkRectiRK8SkMatrixRK7SkIRectPNS_9NinePatchE to i8*), i8* bitcast (i32 (%class.SkMaskFilterBase*, %class.SkRRect*, %class.SkMatrix*, %struct.SkIRect*, %"class.SkMaskFilterBase::NinePatch"*)* @_ZNK16SkMaskFilterBase17filterRRectToNineERK7SkRRectRK8SkMatrixRK7SkIRectPNS_9NinePatchE to i8*)] }, align 8

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN10SkShaderMF10CreateProcER12SkReadBuffer(%class.sk_sp.14* noalias nocapture sret, %class.SkReadBuffer* dereferenceable(136)) #0 align 2 {
  %3 = tail call %class.SkFlattenable* @_ZN12SkReadBuffer15readFlattenableEN13SkFlattenable4TypeE(%class.SkReadBuffer* %1, i32 8) #8, !noalias !2
  %4 = icmp eq %class.SkFlattenable* %3, null
  br i1 %4, label %14, label %5

5:                                                ; preds = %2
  %6 = ptrtoint %class.SkFlattenable* %3 to i64
  %7 = tail call i8* @_Znwm(i64 24) #9, !noalias !7
  %8 = getelementptr inbounds i8, i8* %7, i64 8
  %9 = bitcast i8* %8 to i32*
  store i32 1, i32* %9, align 4, !noalias !7
  %10 = bitcast i8* %7 to i32 (...)***
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [20 x i8*] }, { [20 x i8*] }* @_ZTV10SkShaderMF, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %10, align 8, !noalias !7
  %11 = getelementptr inbounds i8, i8* %7, i64 16
  %12 = bitcast i8* %11 to i64*
  store i64 %6, i64* %12, align 8, !noalias !7
  %13 = ptrtoint i8* %7 to i64
  br label %14

14:                                               ; preds = %2, %5
  %15 = phi i64 [ %13, %5 ], [ 0, %2 ]
  %16 = bitcast %class.sk_sp.14* %0 to i64*
  store i64 %15, i64* %16, align 8
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN18SkShaderMaskFilter4MakeE5sk_spI8SkShaderE(%class.sk_sp.15* noalias nocapture sret, %class.sk_sp.16* nocapture) local_unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %class.sk_sp.16, %class.sk_sp.16* %1, i64 0, i32 0
  %4 = load %class.SkShader*, %class.SkShader** %3, align 8
  %5 = icmp eq %class.SkShader* %4, null
  br i1 %5, label %15, label %6

6:                                                ; preds = %2
  %7 = ptrtoint %class.SkShader* %4 to i64
  %8 = tail call i8* @_Znwm(i64 24) #9
  store %class.SkShader* null, %class.SkShader** %3, align 8
  %9 = getelementptr inbounds i8, i8* %8, i64 8
  %10 = bitcast i8* %9 to i32*
  store i32 1, i32* %10, align 4
  %11 = bitcast i8* %8 to i32 (...)***
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [20 x i8*] }, { [20 x i8*] }* @_ZTV10SkShaderMF, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %11, align 8
  %12 = getelementptr inbounds i8, i8* %8, i64 16
  %13 = bitcast i8* %12 to i64*
  store i64 %7, i64* %13, align 8
  %14 = bitcast %class.sk_sp.15* %0 to i8**
  store i8* %8, i8** %14, align 8
  br label %17

15:                                               ; preds = %2
  %16 = getelementptr inbounds %class.sk_sp.15, %class.sk_sp.15* %0, i64 0, i32 0
  store %class.SkMaskFilter* null, %class.SkMaskFilter** %16, align 8
  br label %17

17:                                               ; preds = %15, %6
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZNK10SkShaderMF7flattenER13SkWriteBuffer(%class.SkShaderMF* nocapture readonly, %class.SkWriteBuffer* dereferenceable(56)) unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %class.SkShaderMF, %class.SkShaderMF* %0, i64 0, i32 1, i32 0
  %4 = bitcast %class.SkShader** %3 to %class.SkFlattenable**
  %5 = load %class.SkFlattenable*, %class.SkFlattenable** %4, align 8
  %6 = bitcast %class.SkWriteBuffer* %1 to void (%class.SkWriteBuffer*, %class.SkFlattenable*)***
  %7 = load void (%class.SkWriteBuffer*, %class.SkFlattenable*)**, void (%class.SkWriteBuffer*, %class.SkFlattenable*)*** %6, align 8
  %8 = getelementptr inbounds void (%class.SkWriteBuffer*, %class.SkFlattenable*)*, void (%class.SkWriteBuffer*, %class.SkFlattenable*)** %7, i64 11
  %9 = load void (%class.SkWriteBuffer*, %class.SkFlattenable*)*, void (%class.SkWriteBuffer*, %class.SkFlattenable*)** %8, align 8
  tail call void %9(%class.SkWriteBuffer* %1, %class.SkFlattenable* %5) #8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZNK10SkShaderMF10filterMaskEP6SkMaskRKS0_RK8SkMatrixP8SkIPoint(%class.SkShaderMF* nocapture readonly, %struct.SkMask*, %struct.SkMask* nocapture readonly dereferenceable(32), %class.SkMatrix* dereferenceable(40), %struct.SkIPoint*) unnamed_addr #0 align 2 {
  %6 = alloca %class.SkBitmap, align 8
  %7 = alloca %class.SkPaint, align 8
  %8 = alloca %class.sk_sp.16, align 8
  %9 = alloca %class.SkCanvas, align 8
  %10 = getelementptr inbounds %struct.SkMask, %struct.SkMask* %2, i64 0, i32 3
  %11 = load i8, i8* %10, align 4
  %12 = icmp eq i8 %11, 1
  br i1 %12, label %13, label %131

13:                                               ; preds = %5
  %14 = icmp eq %struct.SkIPoint* %4, null
  br i1 %14, label %18, label %15

15:                                               ; preds = %13
  %16 = getelementptr inbounds %struct.SkIPoint, %struct.SkIPoint* %4, i64 0, i32 0
  store i32 0, i32* %16, align 4
  %17 = getelementptr inbounds %struct.SkIPoint, %struct.SkIPoint* %4, i64 0, i32 1
  store i32 0, i32* %17, align 4
  br label %18

18:                                               ; preds = %13, %15
  %19 = getelementptr inbounds %struct.SkMask, %struct.SkMask* %2, i64 0, i32 1
  %20 = getelementptr inbounds %struct.SkMask, %struct.SkMask* %1, i64 0, i32 1
  %21 = bitcast %struct.SkIRect* %20 to i8*
  %22 = bitcast %struct.SkIRect* %19 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %21, i8* align 4 %22, i64 16, i1 false)
  %23 = getelementptr inbounds %struct.SkMask, %struct.SkMask* %2, i64 0, i32 1, i32 2
  %24 = load i32, i32* %23, align 4
  %25 = getelementptr inbounds %struct.SkIRect, %struct.SkIRect* %19, i64 0, i32 0
  %26 = load i32, i32* %25, align 4
  %27 = sub i32 %24, %26
  %28 = getelementptr inbounds %struct.SkMask, %struct.SkMask* %1, i64 0, i32 2
  store i32 %27, i32* %28, align 8
  %29 = getelementptr inbounds %struct.SkMask, %struct.SkMask* %1, i64 0, i32 3
  store i8 1, i8* %29, align 4
  %30 = getelementptr inbounds %struct.SkMask, %struct.SkMask* %2, i64 0, i32 0
  %31 = load i8*, i8** %30, align 8
  %32 = icmp eq i8* %31, null
  br i1 %32, label %33, label %35

33:                                               ; preds = %18
  %34 = getelementptr inbounds %struct.SkMask, %struct.SkMask* %1, i64 0, i32 0
  store i8* null, i8** %34, align 8
  br label %131

35:                                               ; preds = %18
  %36 = tail call i64 @_ZNK6SkMask16computeImageSizeEv(%struct.SkMask* %1) #8
  %37 = icmp eq i64 %36, 0
  br i1 %37, label %131, label %38

38:                                               ; preds = %35
  %39 = tail call i8* @_ZN6SkMask10AllocImageEmNS_9AllocTypeE(i64 %36, i32 0) #8
  %40 = getelementptr inbounds %struct.SkMask, %struct.SkMask* %1, i64 0, i32 0
  store i8* %39, i8** %40, align 8
  %41 = load i32, i32* %28, align 8
  %42 = zext i32 %41 to i64
  %43 = getelementptr inbounds %struct.SkMask, %struct.SkMask* %2, i64 0, i32 2
  %44 = load i32, i32* %43, align 8
  %45 = zext i32 %44 to i64
  %46 = load i32, i32* %23, align 4
  %47 = load i32, i32* %25, align 4
  %48 = sub i32 %46, %47
  %49 = sext i32 %48 to i64
  %50 = getelementptr inbounds %struct.SkMask, %struct.SkMask* %2, i64 0, i32 1, i32 3
  %51 = load i32, i32* %50, align 4
  %52 = getelementptr inbounds %struct.SkMask, %struct.SkMask* %2, i64 0, i32 1, i32 1
  %53 = load i32, i32* %52, align 4
  %54 = sub i32 %51, %53
  %55 = icmp sgt i32 %54, 0
  br i1 %55, label %56, label %90

56:                                               ; preds = %38
  %57 = load i8*, i8** %30, align 8
  %58 = xor i32 %53, -1
  %59 = add i32 %51, %58
  %60 = and i32 %54, 3
  %61 = icmp ult i32 %59, 3
  br i1 %61, label %78, label %62

62:                                               ; preds = %56
  %63 = sub i32 %54, %60
  br label %64

64:                                               ; preds = %64, %62
  %65 = phi i8* [ %39, %62 ], [ %74, %64 ]
  %66 = phi i8* [ %57, %62 ], [ %75, %64 ]
  %67 = phi i32 [ %63, %62 ], [ %76, %64 ]
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %65, i8* align 1 %66, i64 %49, i1 false) #8
  %68 = getelementptr inbounds i8, i8* %65, i64 %42
  %69 = getelementptr inbounds i8, i8* %66, i64 %45
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %68, i8* align 1 %69, i64 %49, i1 false) #8
  %70 = getelementptr inbounds i8, i8* %68, i64 %42
  %71 = getelementptr inbounds i8, i8* %69, i64 %45
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %70, i8* align 1 %71, i64 %49, i1 false) #8
  %72 = getelementptr inbounds i8, i8* %70, i64 %42
  %73 = getelementptr inbounds i8, i8* %71, i64 %45
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %72, i8* align 1 %73, i64 %49, i1 false) #8
  %74 = getelementptr inbounds i8, i8* %72, i64 %42
  %75 = getelementptr inbounds i8, i8* %73, i64 %45
  %76 = add i32 %67, -4
  %77 = icmp eq i32 %76, 0
  br i1 %77, label %78, label %64

78:                                               ; preds = %64, %56
  %79 = phi i8* [ %39, %56 ], [ %74, %64 ]
  %80 = phi i8* [ %57, %56 ], [ %75, %64 ]
  %81 = icmp eq i32 %60, 0
  br i1 %81, label %90, label %82

82:                                               ; preds = %78, %82
  %83 = phi i8* [ %86, %82 ], [ %79, %78 ]
  %84 = phi i8* [ %87, %82 ], [ %80, %78 ]
  %85 = phi i32 [ %88, %82 ], [ %60, %78 ]
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %83, i8* align 1 %84, i64 %49, i1 false) #8
  %86 = getelementptr inbounds i8, i8* %83, i64 %42
  %87 = getelementptr inbounds i8, i8* %84, i64 %45
  %88 = add i32 %85, -1
  %89 = icmp eq i32 %88, 0
  br i1 %89, label %90, label %82, !llvm.loop !10

90:                                               ; preds = %78, %82, %38
  %91 = bitcast %class.SkBitmap* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 56, i8* nonnull %91) #8
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %91, i8 -86, i64 56, i1 false)
  call void @_ZN8SkBitmapC1Ev(%class.SkBitmap* nonnull %6) #8
  %92 = call zeroext i1 @_ZN8SkBitmap17installMaskPixelsERK6SkMask(%class.SkBitmap* nonnull %6, %struct.SkMask* dereferenceable(32) %1) #8
  br i1 %92, label %93, label %129

93:                                               ; preds = %90
  %94 = bitcast %class.SkPaint* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 72, i8* nonnull %94) #8
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %94, i8* align 8 bitcast (%class.SkPaint* @__const._ZNK10SkShaderMF10filterMaskEP6SkMaskRKS0_RK8SkMatrixP8SkIPoint.paint to i8*), i64 72, i1 false)
  call void @_ZN7SkPaintC1Ev(%class.SkPaint* nonnull %7) #8
  %95 = getelementptr inbounds %class.sk_sp.16, %class.sk_sp.16* %8, i64 0, i32 0
  %96 = getelementptr inbounds %class.SkShaderMF, %class.SkShaderMF* %0, i64 0, i32 1, i32 0
  %97 = load %class.SkShader*, %class.SkShader** %96, align 8
  %98 = icmp eq %class.SkShader* %97, null
  br i1 %98, label %102, label %99

99:                                               ; preds = %93
  %100 = getelementptr inbounds %class.SkShader, %class.SkShader* %97, i64 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0
  %101 = atomicrmw add i32* %100, i32 1 monotonic
  br label %102

102:                                              ; preds = %93, %99
  store %class.SkShader* %97, %class.SkShader** %95, align 8
  call void @_ZN7SkPaint9setShaderE5sk_spI8SkShaderE(%class.SkPaint* nonnull %7, %class.sk_sp.16* nonnull %8) #8
  %103 = load %class.SkShader*, %class.SkShader** %95, align 8
  %104 = icmp eq %class.SkShader* %103, null
  br i1 %104, label %115, label %105

105:                                              ; preds = %102
  %106 = getelementptr inbounds %class.SkShader, %class.SkShader* %103, i64 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0
  %107 = atomicrmw add i32* %106, i32 -1 acq_rel
  %108 = icmp eq i32 %107, 1
  br i1 %108, label %109, label %115

109:                                              ; preds = %105
  %110 = bitcast %class.SkShader* %103 to %class.SkRefCntBase*
  %111 = bitcast %class.SkShader* %103 to void (%class.SkRefCntBase*)***
  %112 = load void (%class.SkRefCntBase*)**, void (%class.SkRefCntBase*)*** %111, align 8
  %113 = getelementptr inbounds void (%class.SkRefCntBase*)*, void (%class.SkRefCntBase*)** %112, i64 2
  %114 = load void (%class.SkRefCntBase*)*, void (%class.SkRefCntBase*)** %113, align 8
  call void %114(%class.SkRefCntBase* nonnull %110) #8
  br label %115

115:                                              ; preds = %102, %105, %109
  %116 = getelementptr inbounds %class.SkPaint, %class.SkPaint* %7, i64 0, i32 8, i32 0, i32 0
  %117 = load i32, i32* %116, align 8
  %118 = and i32 %117, -261121
  %119 = or i32 %118, 5120
  store i32 %119, i32* %116, align 8
  %120 = bitcast %class.SkCanvas* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 3232, i8* nonnull %120) #8
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %120, i8* align 8 bitcast ({ i32 (...)**, %class.SkDeque, %"class.SkCanvas::MCRec"*, %class.sk_sp.24, [384 x i64], %class.sk_sp.25, %class.SkSurfaceProps, i32, [4 x i8], %"class.std::__1::unique_ptr.26", %class.SkSurface_Base*, %struct.SkIRect, %struct.SkRect, %"class.std::__1::unique_ptr.32" }* @__const._ZNK10SkShaderMF10filterMaskEP6SkMaskRKS0_RK8SkMatrixP8SkIPoint.canvas to i8*), i64 3232, i1 false)
  call void @_ZN8SkCanvasC1ERK8SkBitmap(%class.SkCanvas* nonnull %9, %class.SkBitmap* nonnull dereferenceable(56) %6) #8
  %121 = getelementptr inbounds %struct.SkIRect, %struct.SkIRect* %20, i64 0, i32 0
  %122 = load i32, i32* %121, align 8
  %123 = sitofp i32 %122 to float
  %124 = fsub float -0.000000e+00, %123
  %125 = getelementptr inbounds %struct.SkMask, %struct.SkMask* %1, i64 0, i32 1, i32 1
  %126 = load i32, i32* %125, align 4
  %127 = sitofp i32 %126 to float
  %128 = fsub float -0.000000e+00, %127
  call void @_ZN8SkCanvas9translateEff(%class.SkCanvas* nonnull %9, float %124, float %128) #8
  call void @_ZN8SkCanvas6concatERK8SkMatrix(%class.SkCanvas* nonnull %9, %class.SkMatrix* dereferenceable(40) %3) #8
  call void @_ZN8SkCanvas9drawPaintERK7SkPaint(%class.SkCanvas* nonnull %9, %class.SkPaint* nonnull dereferenceable(72) %7) #8
  call void @_ZN8SkCanvasD1Ev(%class.SkCanvas* nonnull %9) #8
  call void @llvm.lifetime.end.p0i8(i64 3232, i8* nonnull %120) #8
  call void @_ZN7SkPaintD1Ev(%class.SkPaint* nonnull %7) #8
  call void @llvm.lifetime.end.p0i8(i64 72, i8* nonnull %94) #8
  br label %129

129:                                              ; preds = %90, %115
  %130 = phi i1 [ true, %115 ], [ false, %90 ]
  call void @_ZN8SkBitmapD1Ev(%class.SkBitmap* nonnull %6) #8
  call void @llvm.lifetime.end.p0i8(i64 56, i8* nonnull %91) #8
  br label %131

131:                                              ; preds = %129, %35, %5, %33
  %132 = phi i1 [ true, %33 ], [ false, %5 ], [ %130, %129 ], [ false, %35 ]
  ret i1 %132
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #1

declare i64 @_ZNK6SkMask16computeImageSizeEv(%struct.SkMask*) local_unnamed_addr #2

declare i8* @_ZN6SkMask10AllocImageEmNS_9AllocTypeE(i64, i32) local_unnamed_addr #2

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

declare void @_ZN8SkBitmapC1Ev(%class.SkBitmap*) unnamed_addr #2

declare zeroext i1 @_ZN8SkBitmap17installMaskPixelsERK6SkMask(%class.SkBitmap*, %struct.SkMask* dereferenceable(32)) local_unnamed_addr #2

declare void @_ZN7SkPaintC1Ev(%class.SkPaint*) unnamed_addr #2

declare void @_ZN7SkPaint9setShaderE5sk_spI8SkShaderE(%class.SkPaint*, %class.sk_sp.16*) local_unnamed_addr #2

declare void @_ZN8SkCanvasC1ERK8SkBitmap(%class.SkCanvas*, %class.SkBitmap* dereferenceable(56)) unnamed_addr #2

declare void @_ZN8SkCanvas9translateEff(%class.SkCanvas*, float, float) local_unnamed_addr #2

declare void @_ZN8SkCanvas6concatERK8SkMatrix(%class.SkCanvas*, %class.SkMatrix* dereferenceable(40)) local_unnamed_addr #2

declare void @_ZN8SkCanvas9drawPaintERK7SkPaint(%class.SkCanvas*, %class.SkPaint* dereferenceable(72)) local_unnamed_addr #2

; Function Attrs: nounwind
declare void @_ZN8SkCanvasD1Ev(%class.SkCanvas*) unnamed_addr #3

; Function Attrs: nounwind
declare void @_ZN7SkPaintD1Ev(%class.SkPaint*) unnamed_addr #3

; Function Attrs: nounwind
declare void @_ZN8SkBitmapD1Ev(%class.SkBitmap*) unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define hidden %class.GrFragmentProcessor* @_ZNK10SkShaderMF21onAsFragmentProcessorERK8GrFPArgs(%class.SkShaderMF* nocapture readonly, %struct.GrFPArgs* dereferenceable(40)) unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %class.SkShaderMF, %class.SkShaderMF* %0, i64 0, i32 1
  %4 = bitcast %class.sk_sp.16* %3 to %class.SkShaderBase**
  %5 = load %class.SkShaderBase*, %class.SkShaderBase** %4, align 8
  %6 = bitcast %class.SkShaderBase* %5 to %class.GrFragmentProcessor* (%class.SkShaderBase*, %struct.GrFPArgs*)***
  %7 = load %class.GrFragmentProcessor* (%class.SkShaderBase*, %struct.GrFPArgs*)**, %class.GrFragmentProcessor* (%class.SkShaderBase*, %struct.GrFPArgs*)*** %6, align 8
  %8 = getelementptr inbounds %class.GrFragmentProcessor* (%class.SkShaderBase*, %struct.GrFPArgs*)*, %class.GrFragmentProcessor* (%class.SkShaderBase*, %struct.GrFPArgs*)** %7, i64 10
  %9 = load %class.GrFragmentProcessor* (%class.SkShaderBase*, %struct.GrFPArgs*)*, %class.GrFragmentProcessor* (%class.SkShaderBase*, %struct.GrFPArgs*)** %8, align 8
  %10 = tail call %class.GrFragmentProcessor* %9(%class.SkShaderBase* %5, %struct.GrFPArgs* dereferenceable(40) %1) #8
  %11 = tail call %class.GrFragmentProcessor* @_ZN19GrFragmentProcessor20MulInputByChildAlphaENSt3__110unique_ptrIS_NS0_14default_deleteIS_EEEE(%class.GrFragmentProcessor* %10) #8
  ret %class.GrFragmentProcessor* %11
}

declare %class.GrFragmentProcessor* @_ZN19GrFragmentProcessor20MulInputByChildAlphaENSt3__110unique_ptrIS_NS0_14default_deleteIS_EEEE(%class.GrFragmentProcessor*) local_unnamed_addr #2

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden zeroext i1 @_ZNK10SkShaderMF22onHasFragmentProcessorEv(%class.SkShaderMF* nocapture readnone) unnamed_addr #4 align 2 {
  ret i1 true
}

; Function Attrs: nobuiltin nofree
declare noalias nonnull i8* @_Znwm(i64) local_unnamed_addr #5

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN18SkShaderMaskFilter20RegisterFlattenablesEv() local_unnamed_addr #0 align 2 {
  tail call void @_ZN13SkFlattenable8RegisterEPKcPF5sk_spIS_ER12SkReadBufferE(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str, i64 0, i64 0), void (%class.sk_sp.14*, %class.SkReadBuffer*)* nonnull @_ZN10SkShaderMF10CreateProcER12SkReadBuffer) #8
  ret void
}

declare void @_ZN13SkFlattenable8RegisterEPKcPF5sk_spIS_ER12SkReadBufferE(i8*, void (%class.sk_sp.14*, %class.SkReadBuffer*)*) local_unnamed_addr #2

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZN10SkShaderMFD2Ev(%class.SkShaderMF*) unnamed_addr #6 comdat align 2 {
  %2 = getelementptr inbounds %class.SkShaderMF, %class.SkShaderMF* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [20 x i8*] }, { [20 x i8*] }* @_ZTV10SkShaderMF, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %2, align 8
  %3 = getelementptr inbounds %class.SkShaderMF, %class.SkShaderMF* %0, i64 0, i32 1, i32 0
  %4 = load %class.SkShader*, %class.SkShader** %3, align 8
  %5 = icmp eq %class.SkShader* %4, null
  br i1 %5, label %16, label %6

6:                                                ; preds = %1
  %7 = getelementptr inbounds %class.SkShader, %class.SkShader* %4, i64 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0
  %8 = atomicrmw add i32* %7, i32 -1 acq_rel
  %9 = icmp eq i32 %8, 1
  br i1 %9, label %10, label %16

10:                                               ; preds = %6
  %11 = bitcast %class.SkShader* %4 to %class.SkRefCntBase*
  %12 = bitcast %class.SkShader* %4 to void (%class.SkRefCntBase*)***
  %13 = load void (%class.SkRefCntBase*)**, void (%class.SkRefCntBase*)*** %12, align 8
  %14 = getelementptr inbounds void (%class.SkRefCntBase*)*, void (%class.SkRefCntBase*)** %13, i64 2
  %15 = load void (%class.SkRefCntBase*)*, void (%class.SkRefCntBase*)** %14, align 8
  tail call void %15(%class.SkRefCntBase* nonnull %11) #8
  br label %16

16:                                               ; preds = %1, %6, %10
  ret void
}

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZN10SkShaderMFD0Ev(%class.SkShaderMF*) unnamed_addr #6 comdat align 2 {
  %2 = getelementptr inbounds %class.SkShaderMF, %class.SkShaderMF* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [20 x i8*] }, { [20 x i8*] }* @_ZTV10SkShaderMF, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %2, align 8
  %3 = getelementptr inbounds %class.SkShaderMF, %class.SkShaderMF* %0, i64 0, i32 1, i32 0
  %4 = load %class.SkShader*, %class.SkShader** %3, align 8
  %5 = icmp eq %class.SkShader* %4, null
  br i1 %5, label %16, label %6

6:                                                ; preds = %1
  %7 = getelementptr inbounds %class.SkShader, %class.SkShader* %4, i64 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0
  %8 = atomicrmw add i32* %7, i32 -1 acq_rel
  %9 = icmp eq i32 %8, 1
  br i1 %9, label %10, label %16

10:                                               ; preds = %6
  %11 = bitcast %class.SkShader* %4 to %class.SkRefCntBase*
  %12 = bitcast %class.SkShader* %4 to void (%class.SkRefCntBase*)***
  %13 = load void (%class.SkRefCntBase*)**, void (%class.SkRefCntBase*)*** %12, align 8
  %14 = getelementptr inbounds void (%class.SkRefCntBase*)*, void (%class.SkRefCntBase*)** %13, i64 2
  %15 = load void (%class.SkRefCntBase*)*, void (%class.SkRefCntBase*)** %14, align 8
  tail call void %15(%class.SkRefCntBase* nonnull %11) #8
  br label %16

16:                                               ; preds = %1, %6, %10
  %17 = bitcast %class.SkShaderMF* %0 to i8*
  tail call void @_ZdlPv(i8* %17) #9
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNK12SkRefCntBase16internal_disposeEv(%class.SkRefCntBase*) unnamed_addr #0 comdat align 2 {
  %2 = icmp eq %class.SkRefCntBase* %0, null
  br i1 %2, label %8, label %3

3:                                                ; preds = %1
  %4 = bitcast %class.SkRefCntBase* %0 to void (%class.SkRefCntBase*)***
  %5 = load void (%class.SkRefCntBase*)**, void (%class.SkRefCntBase*)*** %4, align 8
  %6 = getelementptr inbounds void (%class.SkRefCntBase*)*, void (%class.SkRefCntBase*)** %5, i64 1
  %7 = load void (%class.SkRefCntBase*)*, void (%class.SkRefCntBase*)** %6, align 8
  tail call void %7(%class.SkRefCntBase* nonnull %0) #8
  br label %8

8:                                                ; preds = %3, %1
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void (%class.sk_sp.14*, %class.SkReadBuffer*)* @_ZNK10SkShaderMF10getFactoryEv(%class.SkShaderMF*) unnamed_addr #0 comdat align 2 {
  ret void (%class.sk_sp.14*, %class.SkReadBuffer*)* @_ZN10SkShaderMF10CreateProcER12SkReadBuffer
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden i8* @_ZNK10SkShaderMF11getTypeNameEv(%class.SkShaderMF*) unnamed_addr #0 comdat align 2 {
  ret i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str, i64 0, i64 0)
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden i32 @_ZNK12SkMaskFilter18getFlattenableTypeEv(%class.SkMaskFilter*) unnamed_addr #0 comdat align 2 {
  ret i32 4
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden zeroext i8 @_ZNK10SkShaderMF9getFormatEv(%class.SkShaderMF*) unnamed_addr #0 comdat align 2 {
  ret i8 1
}

declare zeroext i1 @_ZNK16SkMaskFilterBase16canFilterMaskGPUERK13GrStyledShapeRK7SkIRectS5_RK8SkMatrixPS3_(%class.SkMaskFilterBase*, %class.GrStyledShape*, %struct.SkIRect* dereferenceable(16), %struct.SkIRect* dereferenceable(16), %class.SkMatrix* dereferenceable(40), %struct.SkIRect*) unnamed_addr #2

declare zeroext i1 @_ZNK16SkMaskFilterBase19directFilterMaskGPUEP18GrRecordingContextP20GrSurfaceDrawContextO7GrPaintPK6GrClipRK8SkMatrixRK13GrStyledShape(%class.SkMaskFilterBase*, %class.GrRecordingContext*, %class.GrSurfaceDrawContext*, %class.GrPaint*, %class.GrClip*, %class.SkMatrix* dereferenceable(40), %class.GrStyledShape*) unnamed_addr #2

declare void @_ZNK16SkMaskFilterBase13filterMaskGPUEP18GrRecordingContext18GrSurfaceProxyView11GrColorType11SkAlphaTypeRK8SkMatrixRK7SkIRect(%class.GrSurfaceProxyView* sret, %class.SkMaskFilterBase*, %class.GrRecordingContext*, %class.GrSurfaceProxyView*, i32, i32, %class.SkMatrix* dereferenceable(40), %struct.SkIRect* dereferenceable(16)) unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNK10SkShaderMF17computeFastBoundsERK6SkRectPS0_(%class.SkShaderMF*, %struct.SkRect* dereferenceable(16), %struct.SkRect*) unnamed_addr #0 comdat align 2 {
  %4 = bitcast %struct.SkRect* %2 to i8*
  %5 = bitcast %struct.SkRect* %1 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %4, i8* align 4 %5, i64 16, i1 false)
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZNK10SkShaderMF7asABlurEPN16SkMaskFilterBase7BlurRecE(%class.SkShaderMF*, %"struct.SkMaskFilterBase::BlurRec"*) unnamed_addr #0 comdat align 2 {
  ret i1 false
}

declare i32 @_ZNK16SkMaskFilterBase17filterRectsToNineEPK6SkRectiRK8SkMatrixRK7SkIRectPNS_9NinePatchE(%class.SkMaskFilterBase*, %struct.SkRect*, i32, %class.SkMatrix* dereferenceable(40), %struct.SkIRect* dereferenceable(16), %"class.SkMaskFilterBase::NinePatch"*) unnamed_addr #2

declare i32 @_ZNK16SkMaskFilterBase17filterRRectToNineERK7SkRRectRK8SkMatrixRK7SkIRectPNS_9NinePatchE(%class.SkMaskFilterBase*, %class.SkRRect* dereferenceable(52), %class.SkMatrix* dereferenceable(40), %struct.SkIRect* dereferenceable(16), %"class.SkMaskFilterBase::NinePatch"*) unnamed_addr #2

declare %class.SkFlattenable* @_ZN12SkReadBuffer15readFlattenableEN13SkFlattenable4TypeE(%class.SkReadBuffer*, i32) local_unnamed_addr #2

; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(i8*) local_unnamed_addr #7

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { norecurse nounwind readnone ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nobuiltin nofree "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { inlinehint nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #8 = { nounwind }
attributes #9 = { builtin nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{!3, !5}
!3 = distinct !{!3, !4, !"_ZN12SkReadBuffer15readFlattenableI12SkShaderBaseEE5sk_spIT_Ev: argument 0"}
!4 = distinct !{!4, !"_ZN12SkReadBuffer15readFlattenableI12SkShaderBaseEE5sk_spIT_Ev"}
!5 = distinct !{!5, !6, !"_ZN12SkReadBuffer10readShaderEv: argument 0"}
!6 = distinct !{!6, !"_ZN12SkReadBuffer10readShaderEv"}
!7 = !{!8}
!8 = distinct !{!8, !9, !"_ZN18SkShaderMaskFilter4MakeE5sk_spI8SkShaderE: argument 0"}
!9 = distinct !{!9, !"_ZN18SkShaderMaskFilter4MakeE5sk_spI8SkShaderE"}
!10 = distinct !{!10, !11}
!11 = !{!"llvm.loop.unroll.disable"}
