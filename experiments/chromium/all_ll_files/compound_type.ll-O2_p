; ModuleID = '../../third_party/libaom/source/libaom/av1/encoder/compound_type.c'
source_filename = "../../third_party/libaom/source/libaom/av1/encoder/compound_type.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"
module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%struct.wedge_params_type = type { i32, %struct.wedge_code_type*, i8*, [16 x i8*]* }
%struct.wedge_code_type = type { i8, i32, i32 }
%struct.AV1_COMP = type { %struct.AV1_PRIMARY*, [8 x i8], %struct.EncQuantDequantParams, %struct.ThreadData, %struct.FRAME_COUNTS, %struct.MBMIExtFrameBufferInfo, %struct.CB_COEFF_BUFFER*, %struct.CoeffBufferPool, %struct.AV1Common, %struct.AV1EncoderConfig, i32, [8 x i8], %struct.yv12_buffer_config*, %struct.yv12_buffer_config*, %struct.yv12_buffer_config*, %struct.yv12_buffer_config, %struct.yv12_buffer_config*, %struct.yv12_buffer_config, %struct.yv12_buffer_config*, i32, %struct.TemporalFilterCtx, i32, %struct.ForceIntegerMVInfo, [7 x %struct.RefCntBuffer*], %struct.RefCntBuffer*, %struct.RefreshFrameFlagsInfo, [8 x i32], %struct.ExternalFlags, %struct.yv12_buffer_config, %struct.yv12_buffer_config, i64, %struct.RD_OPT, %struct.CODING_CONTEXT, %struct.GlobalMotionInfo, %struct.WinnerModeParams, %struct.TimeStamps, %struct.RATE_CONTROL, double, i32, i32, %struct.SPEED_FEATURES, %struct.MotionVectorSearchParams, i32, %struct.EncSegmentationInfo, %struct.CYCLIC_REFRESH*, %struct.ActiveMap, i8, %struct.RefBufferStack, i32, i32, %struct.FRAME_INFO, %struct.FRAME_INDEX_SET, %struct.InitialDimensions, i32, %struct.ResizePendingParams, %struct.TileDataEnc*, i32, %struct.TokenInfo, i32, %struct.VarBasedPartitionInfo, %struct.FrameProbInfo, %struct.MultiThreadInfo, i32, i32, i32, %struct.AV1LrStruct, %struct.aom_film_grain_table_t*, %struct.aom_denoise_and_model_t*, %struct.InterpSearchFlags, i32, i32, i32, i32, %struct.RefFrameDistanceInfo, double*, %struct.SVC, i8, %struct.MV_STATS, i8, i32, i32, %struct.FirstPassData, %struct.noise_estimate, %struct.av1_denoiser, i8*, i8, i32, i64, [8 x i8] }
%struct.AV1_PRIMARY = type { %struct.AV1_COMP*, %struct.AV1_COMP*, %struct.lookahead_ctx*, i32, %struct.aom_codec_pkt_list*, i32, %struct.GF_GROUP, %struct.GF_STATE, i32, %struct.AV1LevelParams, i32, i32, %struct.TWO_PASS, %struct.PRIMARY_RATE_CONTROL, %struct.yv12_buffer_config, %struct.SequenceHeader, i32, i8, i32, i32, %struct.aom_internal_error_info, [22 x %struct.aom_variance_vtable], double*, double*, %struct.TplParams }
%struct.lookahead_ctx = type { i32, i32, [2 x %struct.read_ctx], %struct.lookahead_entry*, i32, i8 }
%struct.read_ctx = type { i32, i32, i32, i32 }
%struct.lookahead_entry = type { %struct.yv12_buffer_config, i64, i64, i32, i64 }
%struct.aom_codec_pkt_list = type { i32, i32, [1 x %struct.aom_codec_cx_pkt] }
%struct.aom_codec_cx_pkt = type { i32, %union.anon.10 }
%union.anon.10 = type { %struct.aom_psnr_pkt }
%struct.aom_psnr_pkt = type { [4 x i32], [4 x i64], [4 x double], [4 x i32], [4 x i64], [4 x double] }
%struct.GF_GROUP = type { [250 x i8], [250 x i8], [250 x i8], [250 x i32], [250 x i32], i32, i32, [250 x i8], [250 x i32], [250 x i8], [250 x i8], i32, i32 }
%struct.GF_STATE = type { i32 }
%struct.AV1LevelParams = type { [32 x i8], i32, [32 x %struct.AV1LevelInfo*] }
%struct.AV1LevelInfo = type { %struct.AV1LevelStats, %struct.AV1LevelSpec, %struct.FrameWindowBuffer, [24 x %struct.DECODER_MODEL] }
%struct.AV1LevelStats = type { i32, i32, i32, i32, i32, i32, i32, i32, double, double, double }
%struct.AV1LevelSpec = type { i8, i32, i32, i32, i32, i32, i32, i32, i64, i64, double, double, double, double }
%struct.FrameWindowBuffer = type { [256 x %struct.FrameRecord], i32, i32 }
%struct.FrameRecord = type { i64, i64, i64, i32, i32, i32, i32, i32 }
%struct.DECODER_MODEL = type { i8, i8, i8, i8, i32, i32, i32, i32, i64, double, double, double, double, i32, i32, i32, [8 x i32], [10 x %struct.FRAME_BUFFER], %struct.DFG_INTERVAL_QUEUE, double, double, i64, double, double, i32, i32, double, double }
%struct.FRAME_BUFFER = type { i32, i32, i32, i8, double }
%struct.DFG_INTERVAL_QUEUE = type { i32, i32, double, [64 x %struct.DFG_INTERVAL] }
%struct.DFG_INTERVAL = type { double, double, double }
%struct.TWO_PASS = type { i32, [36 x %struct.FIRSTPASS_STATS*], i32, %struct.FIRSTPASS_STATS*, %struct.STATS_BUFFER_CTX*, i32, i64, double, double, double, double, double, i8, i64, i64, double, i32, i32, i32, i32, i32, i32, i32, i32 }
%struct.FIRSTPASS_STATS = type { double, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double, i64, double, double }
%struct.STATS_BUFFER_CTX = type { %struct.FIRSTPASS_STATS*, %struct.FIRSTPASS_STATS*, %struct.FIRSTPASS_STATS*, %struct.FIRSTPASS_STATS*, %struct.FIRSTPASS_STATS* }
%struct.PRIMARY_RATE_CONTROL = type { i64, i32, i32, [15 x i32], i32, i32, [150 x %struct.regions], i32, i32, i32, i32, i32, i32, i64, i64, i64, i32, float, i32, i32, i32, i32, i32, i32, i32, i32 }
%struct.regions = type { i32, i32, double, double, double, double, double, i32 }
%struct.SequenceHeader = type { i32, i32, i32, i32, i8, i32, i32, i8, i32, i32, %struct.OrderHintInfo, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i32, i8, i8, i32, i32, i32, i32, i32, i32, i32, i8, i8, i32, [32 x i32], i32, %struct.aom_timing, i8, %struct.aom_dec_model_info, i8, [32 x i8], [32 x i8], [33 x %struct.aom_dec_model_op_parameters] }
%struct.OrderHintInfo = type { i32, i32, i32, i32 }
%struct.aom_timing = type { i32, i32, i32, i32 }
%struct.aom_dec_model_info = type { i32, i32, i32, i32 }
%struct.aom_dec_model_op_parameters = type { i32, i64, i64, i32, i32, i32, i32, i32 }
%struct.aom_internal_error_info = type { i32, i32, [200 x i8], i32, [1 x %struct.__jmp_buf_tag] }
%struct.__jmp_buf_tag = type { [8 x i64], i32, %struct.__sigset_t }
%struct.__sigset_t = type { [16 x i64] }
%struct.aom_variance_vtable = type { i32 (i8*, i32, i8*, i32)*, i32 (i8*, i32, i8*, i32)*, i32 (i8*, i32, i8*, i32, i8*)*, i32 (i8*, i32, i8*, i32, i32*)*, i32 (i8*, i32, i32, i32, i8*, i32, i32*)*, i32 (i8*, i32, i32, i32, i8*, i32, i32*, i8*)*, void (i8*, i32, i8**, i32, i32*)*, void (i8*, i32, i8**, i32, i32*)*, i32 (i8*, i32, i8*, i32, i8*, i8*, i32, i32)*, i32 (i8*, i32, i32, i32, i8*, i32, i8*, i8*, i32, i32, i32*)*, i32 (i8*, i32, i32*, i32*)*, i32 (i8*, i32, i32*, i32*, i32*)*, i32 (i8*, i32, i32, i32, i32*, i32*, i32*)*, i32 (i8*, i32, i8*, i32, i8*, %struct.dist_wtd_comp_params*)*, i32 (i8*, i32, i32, i32, i8*, i32, i32*, i8*, %struct.dist_wtd_comp_params*)* }
%struct.dist_wtd_comp_params = type { i32, i32, i32 }
%struct.TplParams = type { i8, i8, [79 x %struct.TplDepFrame], [35 x %struct.TplDepStats*], [35 x %struct.yv12_buffer_config], %struct.TplDepFrame*, %struct.scale_factors, i32, [7 x %struct.yv12_buffer_config*], [7 x %struct.yv12_buffer_config*], %struct.AV1TplRowMultiThreadSync, i32 }
%struct.TplDepFrame = type { i8, %struct.TplDepStats*, %struct.yv12_buffer_config*, %struct.yv12_buffer_config*, [8 x i32], i32, i32, i32, i32, i32, i32, i32, [256 x double], [256 x double], i32, i32 }
%struct.TplDepStats = type { i64, i64, i64, i64, [2 x i64], i64, i64, [2 x i64], i64, i64, [7 x %union.int_mv], [2 x i32], [7 x i64] }
%union.int_mv = type { i32 }
%struct.scale_factors = type { i32, i32, i32, i32, i32 (i32, %struct.scale_factors*)*, i32 (i32, %struct.scale_factors*)* }
%struct.AV1TplRowMultiThreadSync = type { %union.pthread_mutex_t*, %union.pthread_cond_t*, i32*, i32, i32, i32 }
%union.pthread_mutex_t = type { %struct.__pthread_mutex_s }
%struct.__pthread_mutex_s = type { i32, i32, i32, i32, i32, i16, i16, %struct.__pthread_internal_list }
%struct.__pthread_internal_list = type { %struct.__pthread_internal_list*, %struct.__pthread_internal_list* }
%union.pthread_cond_t = type { %struct.__pthread_cond_s }
%struct.__pthread_cond_s = type { %union.anon.12, %union.anon.14, [2 x i32], [2 x i32], i32, i32, [2 x i32] }
%union.anon.12 = type { i64 }
%union.anon.14 = type { i64 }
%struct.EncQuantDequantParams = type { %struct.QUANTS, %struct.Dequants }
%struct.QUANTS = type { [256 x [8 x i16]], [256 x [8 x i16]], [256 x [8 x i16]], [256 x [8 x i16]], [256 x [8 x i16]], [256 x [8 x i16]], [256 x [8 x i16]], [256 x [8 x i16]], [256 x [8 x i16]], [256 x [8 x i16]], [256 x [8 x i16]], [256 x [8 x i16]], [256 x [8 x i16]], [256 x [8 x i16]], [256 x [8 x i16]], [256 x [8 x i16]], [256 x [8 x i16]], [256 x [8 x i16]] }
%struct.Dequants = type { [256 x [8 x i16]], [256 x [8 x i16]], [256 x [8 x i16]] }
%struct.ThreadData = type { %struct.macroblock, %struct.RD_COUNTS, %struct.FRAME_COUNTS*, %struct.PC_TREE_SHARED_BUFFERS, %struct.SIMPLE_MOTION_DATA_TREE*, %struct.SIMPLE_MOTION_DATA_TREE*, %struct.inter_modes_info*, [2 x [2 x i32*]], %struct.OBMCBuffer, %struct.PALETTE_BUFFER*, %struct.CompoundTypeRdBuffers, i16*, [2 x i8*], i32, i32, i32, i32, [4 x i32], %struct.frame_contexts*, %struct.VP64x64*, i32, %struct.PICK_MODE_CONTEXT*, %struct.TemporalFilterData, %struct.TplTxfmStats, %struct.PixelLevelGradientInfo*, [8 x i8] }
%struct.macroblock = type { [3 x %struct.macroblock_plane], [8 x i8], %struct.macroblockd, %struct.MB_MODE_INFO_EXT, %struct.MB_MODE_INFO_EXT_FRAME*, %struct.frame_contexts*, %struct.frame_contexts*, %struct.CB_COEFF_BUFFER*, [2 x i16], %struct.OBMCBuffer, %struct.PALETTE_BUFFER*, %struct.CompoundTypeRdBuffers, i16*, %struct.aom_internal_error_info*, [2 x i8*], i32, i32, i32, i32, i32, %struct.ModeCosts, %struct.MvCosts*, %struct.IntraBCMVCosts*, %struct.CoeffCosts, i32, i32, i32, i32, i32, i32, %struct.SuperBlockEnc, %struct.CONTENT_STATE_SB, [8 x i32], i32, [8 x i8], [8 x %struct.WARP_SAMPLE_INFO], [1024 x i32], i32, %struct.PartitionSearchInfo, i32, i32, [22 x [169 x i32]], %struct.WinnerModeStats*, i32, i8, %struct.inter_modes_info*, i8, [64 x %struct.COMP_RD_STATS], i32, i32, %struct.intrabc_hash_info, i32, %struct.MB_MODE_INFO*, %struct.PixelLevelGradientInfo*, [2 x i8], [8 x i32], %struct.FullMvLimits, %struct.TxfmSearchParams, %struct.TxfmSearchInfo, [2 x i8], i32, [8 x i32] }
%struct.macroblock_plane = type { i16*, i32*, i32*, i32*, i16*, i8*, %struct.buf_2d, i16*, i16*, i16*, i16*, i16*, i16*, i16* }
%struct.buf_2d = type { i8*, i8*, i32, i32, i32 }
%struct.macroblockd = type { i32, i32, i32, i8, [3 x %struct.macroblockd_plane], %struct.TileInfo, %struct.MB_MODE_INFO**, i8, i8, i8, i8, %struct.MB_MODE_INFO*, %struct.MB_MODE_INFO*, %struct.MB_MODE_INFO*, %struct.MB_MODE_INFO*, i8*, i32, i32, i32, i32, i32, [2 x %struct.scale_factors*], %struct.yv12_buffer_config*, [3 x i8*], [3 x [32 x i8]], i8*, [32 x i8], i8*, i8*, [32 x i8], [3 x %struct.WienerInfo], [3 x %struct.SgrprojInfo], i8, i8, [29 x [8 x %struct.candidate_mv]], [29 x [8 x i16]], i8, i8, [8 x i8], %struct.frame_contexts*, i32, [8 x i32], [8 x i32], i32, i32, %struct.aom_internal_error_info*, %struct.WarpedMotionParams*, i8, [4 x i8], [4 x i8], i8*, %struct.cfl_ctx, [2 x i16], i16*, [2 x i8*], [8 x i8] }
%struct.macroblockd_plane = type { i8, i32, i32, %struct.buf_2d, [2 x %struct.buf_2d], i8*, i8*, [8 x [2 x i16]], i8*, i8, i8, [8 x [19 x i8*]], [8 x [19 x i8*]] }
%struct.TileInfo = type { i32, i32, i32, i32, i32, i32 }
%struct.WienerInfo = type { [8 x i16], [8 x i16] }
%struct.SgrprojInfo = type { i32, [2 x i32] }
%struct.candidate_mv = type { %union.int_mv, %union.int_mv }
%struct.WarpedMotionParams = type { [8 x i32], i16, i16, i16, i16, i8, i8 }
%struct.cfl_ctx = type { [1024 x i16], [1024 x i16], [2 x i32], i32, [2 x [32 x i16]], i32, i32, i32, i32, i32, i32 }
%struct.MB_MODE_INFO_EXT = type { [29 x [4 x %struct.candidate_mv]], [29 x [4 x i16]], [29 x i8], [8 x %union.int_mv], [29 x i16] }
%struct.MB_MODE_INFO_EXT_FRAME = type { [4 x %struct.candidate_mv], [4 x i16], i8, [8 x %union.int_mv], i16, [2 x i16] }
%struct.ModeCosts = type { [20 x [10 x i32]], [4 x [13 x i32]], [13 x [13 x [13 x i32]]], [2 x [13 x [14 x i32]]], [22 x [2 x i32]], [5 x i32], [8 x [7 x i32]], [8 x [2 x [16 x i32]]], [2 x i32], [7 x [7 x i32]], [7 x [7 x i32]], [7 x [5 x [8 x i32]]], [7 x [5 x [8 x i32]]], [7 x [3 x [2 x i32]]], [2 x [2 x i32]], [3 x [2 x i32]], [6 x [2 x i32]], [2 x [2 x i32]], [6 x [2 x i32]], [3 x [2 x i32]], [3 x [6 x [2 x i32]]], [5 x [2 x i32]], [5 x [3 x i32]], [3 x [3 x [3 x i32]]], [3 x [3 x [2 x i32]]], [3 x [2 x [2 x i32]]], [4 x [2 x i32]], [8 x [8 x i32]], [22 x [2 x i32]], [22 x [16 x i32]], [4 x [2 x i32]], [22 x [2 x i32]], [4 x [4 x i32]], [6 x [2 x i32]], [6 x [2 x i32]], [22 x [3 x i32]], [22 x [2 x i32]], [16 x [3 x i32]], [3 x [2 x i32]], [4 x [3 x [5 x i32]]], [21 x [2 x i32]], [4 x [4 x [16 x i32]]], [3 x [4 x [13 x [16 x i32]]]], [3 x i32], [2 x i32], [2 x i32] }
%struct.MvCosts = type { [4 x i32], [2 x [32767 x i32]], [2 x [32767 x i32]], [2 x i32*], [2 x i32*], i32** }
%struct.IntraBCMVCosts = type { [4 x i32], [2 x [32767 x i32]], [2 x i32*] }
%struct.CoeffCosts = type { [5 x [2 x %struct.LV_MAP_COEFF_COST]], [7 x [2 x %struct.LV_MAP_EOB_COST]] }
%struct.LV_MAP_COEFF_COST = type { [13 x [2 x i32]], [4 x [3 x i32]], [42 x [8 x i32]], [9 x [2 x i32]], [3 x [2 x i32]], [21 x [26 x i32]] }
%struct.LV_MAP_EOB_COST = type { [2 x [11 x i32]] }
%struct.SuperBlockEnc = type { i8, i8, i32, [64 x i64], [64 x i64], [64 x [7 x %union.int_mv]], i32 }
%struct.CONTENT_STATE_SB = type { i32, i32, i32 }
%struct.WARP_SAMPLE_INFO = type { i32, [16 x i32], [16 x i32] }
%struct.PartitionSearchInfo = type { [105 x i8] }
%struct.WinnerModeStats = type { %struct.MB_MODE_INFO, %struct.RD_STATS, i64, i32, i32, [16384 x i8], i8 }
%struct.MB_MODE_INFO = type <{ i8, i8, i8, i8, i32, [2 x %union.int_mv], [2 x i8], [2 x i8], %union.int_interpfilters, i8, i8, i8, i8, %struct.WarpedMotionParams, i8, i8, [6 x i8], %struct.INTERINTER_COMPOUND_DATA, [2 x i8], %struct.FILTER_INTRA_MODE_INFO, i8, i8, %struct.PALETTE_MODE_INFO, i8, i8, [16 x i8], i8, [4 x i8], i16, [7 x i8] }>
%union.int_interpfilters = type { i32 }
%struct.INTERINTER_COMPOUND_DATA = type { i8*, i8, i8, i8, i8 }
%struct.FILTER_INTRA_MODE_INFO = type { i8, i8 }
%struct.PALETTE_MODE_INFO = type { [24 x i16], [2 x i8] }
%struct.RD_STATS = type { i32, i64, i64, i64, i32, i32 }
%struct.COMP_RD_STATS = type { [4 x i32], [4 x i64], [4 x i32], [4 x i64], [4 x i32], [2 x %union.int_mv], [2 x i8], i8, %union.int_interpfilters, i32, [2 x i32], %struct.INTERINTER_COMPOUND_DATA }
%struct.intrabc_hash_info = type { [2 x [2 x i32*]], %struct._hash_table, %struct._crc_calculator, %struct._crc_calculator, i32 }
%struct._hash_table = type { %struct.Vector** }
%struct.Vector = type { i64, i64, i64, i8* }
%struct._crc_calculator = type { i32, i32, i32, [256 x i32], i32 }
%struct.FullMvLimits = type { i32, i32, i32, i32 }
%struct.TxfmSearchParams = type { i32, i32, i32, [2 x i32], i32, i8, i32, i32, i8, i32 }
%struct.TxfmSearchInfo = type { i32, [1024 x i8], [1024 x i8], %struct.TxbRdRecords*, i32 }
%struct.TxbRdRecords = type { %struct.MB_RD_RECORD, [256 x %struct.TXB_RD_RECORD], [64 x %struct.TXB_RD_RECORD], [16 x %struct.TXB_RD_RECORD], [4 x %struct.TXB_RD_RECORD], %struct.TXB_RD_RECORD }
%struct.MB_RD_RECORD = type { [8 x %struct.MB_RD_INFO], i32, i32, %struct._CRC32C }
%struct.MB_RD_INFO = type { i8, [16 x i8], [1024 x i8], [1024 x i8], %struct.RD_STATS, i32 }
%struct._CRC32C = type { [8 x [256 x i32]] }
%struct.TXB_RD_RECORD = type { [256 x i32], [256 x %struct.TXB_RD_INFO], i32, i32 }
%struct.TXB_RD_INFO = type { i64, i64, i32, i16, i8, i16, i8, i8, i8, i8 }
%struct.RD_COUNTS = type { [3 x i64], i32, i32, [19 x [16 x i32]], [22 x [2 x i32]], [2 x i32] }
%struct.PC_TREE_SHARED_BUFFERS = type { [3 x i32*], [3 x i32*], [3 x i32*] }
%struct.SIMPLE_MOTION_DATA_TREE = type { i8, i8, [4 x %struct.SIMPLE_MOTION_DATA_TREE*], [8 x %struct.fullpel_mv], [2 x i32], [8 x i32], i32, i32 }
%struct.fullpel_mv = type { i16, i16 }
%struct.inter_modes_info = type { i32, [4 x i8], [1024 x %struct.MB_MODE_INFO], [1024 x i32], [1024 x i64], [1024 x i64], [1024 x %struct.RdIdxPair], [1024 x %struct.RD_STATS], [1024 x %struct.RD_STATS], [1024 x %struct.RD_STATS] }
%struct.RdIdxPair = type { i32, i64 }
%struct.OBMCBuffer = type { i32*, i32*, i8*, i8* }
%struct.PALETTE_BUFFER = type { [4096 x i8], [8192 x i32] }
%struct.CompoundTypeRdBuffers = type { i8*, i8*, i16*, i16*, i8* }
%struct.frame_contexts = type { [5 x [13 x [3 x i16]]], [5 x [2 x [9 x [3 x i16]]]], [2 x [3 x [3 x i16]]], [2 x [2 x [6 x i16]]], [2 x [2 x [7 x i16]]], [2 x [2 x [8 x i16]]], [2 x [2 x [9 x i16]]], [2 x [2 x [10 x i16]]], [2 x [2 x [11 x i16]]], [2 x [2 x [12 x i16]]], [5 x [2 x [4 x [4 x i16]]]], [5 x [2 x [42 x [5 x i16]]]], [5 x [2 x [21 x [5 x i16]]]], [6 x [3 x i16]], [2 x [3 x i16]], [6 x [3 x i16]], [3 x [3 x i16]], [8 x [9 x i16]], [22 x [3 x i16]], [22 x [17 x i16]], [4 x [3 x i16]], [22 x [3 x i16]], [4 x [5 x i16]], [22 x [4 x i16]], [22 x [3 x i16]], [7 x [8 x i16]], [7 x [8 x i16]], [7 x [5 x [9 x i16]]], [7 x [5 x [9 x i16]]], [7 x [3 x [3 x i16]]], [2 x [3 x i16]], [5 x [3 x i16]], [3 x [6 x [3 x i16]]], [5 x [3 x i16]], [3 x [3 x [3 x i16]]], [3 x [3 x [3 x i16]]], [3 x [2 x [3 x i16]]], [21 x [3 x i16]], [6 x [3 x i16]], [6 x [3 x i16]], [3 x [3 x i16]], [3 x [3 x i16]], [4 x [3 x i16]], %struct.nmv_context, %struct.nmv_context, [3 x i16], %struct.segmentation_probs, [22 x [3 x i16]], [6 x i16], [4 x i16], [3 x i16], [3 x i16], [4 x [14 x i16]], [2 x [13 x [15 x i16]]], [20 x [11 x i16]], [16 x [4 x i16]], [5 x [5 x [14 x i16]]], [8 x [8 x i16]], [4 x [3 x [4 x i16]]], [5 x i16], [4 x [5 x i16]], [5 x i16], [3 x [4 x [13 x [17 x i16]]]], [4 x [4 x [17 x i16]]], [9 x i16], [6 x [17 x i16]], i32 }
%struct.nmv_context = type { [5 x i16], [2 x %struct.nmv_component] }
%struct.nmv_component = type { [12 x i16], [2 x [5 x i16]], [5 x i16], [3 x i16], [3 x i16], [3 x i16], [3 x i16], [10 x [3 x i16]] }
%struct.segmentation_probs = type { [9 x i16], [3 x [3 x i16]], [3 x [9 x i16]] }
%struct.VP64x64 = type { %struct.VPVariance, [4 x %struct.VP32x32] }
%struct.VPVariance = type { %struct.VPartVar, [2 x %struct.VPartVar], [2 x %struct.VPartVar] }
%struct.VPartVar = type { i32, i32, i32, i32 }
%struct.VP32x32 = type { %struct.VPVariance, [4 x %struct.VP16x16] }
%struct.VP16x16 = type { %struct.VPVariance, [4 x %struct.VP8x8] }
%struct.VP8x8 = type { %struct.VPVariance, [4 x %struct.VP4x4] }
%struct.VP4x4 = type { %struct.VPVariance, [4 x %struct.VPartVar] }
%struct.PICK_MODE_CONTEXT = type { %struct.MB_MODE_INFO, %struct.MB_MODE_INFO_EXT_FRAME, [2 x i8*], i8*, [3 x i32*], [3 x i32*], [3 x i32*], [3 x i16*], [3 x i8*], i8*, i32, i32, i32, i32, i32, %struct.RD_STATS, i32, i64, i64, i64, i8, %union.int_mv, i8, i8, i32 }
%struct.TemporalFilterData = type { %struct.FRAME_DIFF, %struct.MB_MODE_INFO*, i32*, i16*, i8* }
%struct.FRAME_DIFF = type { i64, i64 }
%struct.TplTxfmStats = type { [256 x double], i32 }
%struct.PixelLevelGradientInfo = type { i16, i8, i8 }
%struct.FRAME_COUNTS = type { [16 x [3 x i32]] }
%struct.MBMIExtFrameBufferInfo = type { %struct.MB_MODE_INFO_EXT_FRAME*, i32, i32 }
%struct.CB_COEFF_BUFFER = type { [3 x i32*], [3 x i16*], [3 x i8*] }
%struct.CoeffBufferPool = type { i32*, i16*, i8* }
%struct.AV1Common = type { %struct.CurrentFrame, %struct.aom_internal_error_info*, i32, i32, i32, i32, i32, i32, i8, [33 x i32], i32, %struct.RefCntBuffer*, %struct.RefCntBuffer*, [8 x i32], %struct.scale_factors, [8 x %struct.scale_factors], [8 x %struct.RefCntBuffer*], i32, i32, i32, %struct.FeatureFlags, %struct.CommonModeInfoParams, %struct.CommonQuantParams, %struct.segmentation, i8*, %struct.loop_filter_info_n, %struct.loopfilter, [3 x %struct.RestorationInfo], i32*, %struct.RestorationLineBuffers*, %struct.yv12_buffer_config, %struct.CdefInfo, %struct.aom_film_grain_t, %struct.DeltaQInfo, [8 x %struct.WarpedMotionParams], %struct.SequenceHeader*, %struct.frame_contexts*, %struct.frame_contexts*, %struct.CommonTileParams, %struct.BufferPool*, %struct.CommonContexts, i32, [8 x i32], %struct.TPL_MV_REF*, i32, [8 x i32], [8 x i8], i32, i32 }
%struct.CurrentFrame = type { i8, i8, i32, i32, i32, %struct.SkipModeInfo, i32, i32 }
%struct.SkipModeInfo = type { i32, i32, i32, i32 }
%struct.FeatureFlags = type { i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i32, i32, i8 }
%struct.CommonModeInfoParams = type { i32, i32, i32, i32, i32, %struct.MB_MODE_INFO*, i32, i32, i8, %struct.MB_MODE_INFO**, i32, i32, i8*, void (%struct.CommonModeInfoParams*)*, void (%struct.CommonModeInfoParams*)*, void (%struct.CommonModeInfoParams*, i32, i32)* }
%struct.CommonQuantParams = type { i32, i32, i32, i32, i32, i32, [8 x [2 x i16]], [8 x [2 x i16]], [8 x [2 x i16]], [16 x [3 x [19 x i8*]]], [16 x [3 x [19 x i8*]]], [8 x [19 x i8*]], [8 x [19 x i8*]], [8 x [19 x i8*]], i8, i32, i32, i32 }
%struct.segmentation = type { i8, i8, i8, i8, [8 x [8 x i16]], [8 x i32], i32, i8 }
%struct.loop_filter_info_n = type { [64 x %struct.loop_filter_thresh], [3 x [8 x [2 x [8 x [2 x i8]]]]] }
%struct.loop_filter_thresh = type { [16 x i8], [16 x i8], [16 x i8] }
%struct.loopfilter = type { [2 x i32], i32, i32, i32, i8, i8, [8 x i8], [2 x i8], i32 }
%struct.RestorationInfo = type { i32, i32, i32, i32, i32, %struct.RestorationUnitInfo*, %struct.RestorationStripeBoundaries, i32 }
%struct.RestorationUnitInfo = type { i32, [12 x i8], %struct.WienerInfo, %struct.SgrprojInfo, [4 x i8] }
%struct.RestorationStripeBoundaries = type { i8*, i8*, i32, i32 }
%struct.RestorationLineBuffers = type { [3 x [392 x i16]], [3 x [392 x i16]] }
%struct.CdefInfo = type { [3 x i16*], [3 x i16*], i16*, [3 x i64], [3 x i64], i64, i32, i32, [16 x i32], [16 x i32], i32, i32, i32 }
%struct.aom_film_grain_t = type { i32, i32, [14 x [2 x i32]], i32, [10 x [2 x i32]], i32, [10 x [2 x i32]], i32, i32, i32, [24 x i32], [25 x i32], [25 x i32], i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i16 }
%struct.DeltaQInfo = type { i32, i32, i32, i32, i32 }
%struct.CommonTileParams = type { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, [65 x i32], [65 x i32], i32, i32 }
%struct.BufferPool = type { %union.pthread_mutex_t, i8*, i32 (i8*, i64, %struct.aom_codec_frame_buffer*)*, i32 (i8*, %struct.aom_codec_frame_buffer*)*, [16 x %struct.RefCntBuffer], %struct.InternalFrameBufferList }
%struct.aom_codec_frame_buffer = type { i8*, i64, i8* }
%struct.RefCntBuffer = type { i32, i32, [7 x i32], i32, [7 x i32], %struct.MV_REF*, i8*, %struct.segmentation, i32, i32, i32, i32, [8 x %struct.WarpedMotionParams], i32, i8, %struct.aom_film_grain_t, %struct.aom_codec_frame_buffer, %struct.yv12_buffer_config, i8, [4 x i32], [8 x i8], [2 x i8], %struct.frame_contexts }
%struct.MV_REF = type { %union.int_mv, i8 }
%struct.InternalFrameBufferList = type { i32, %struct.InternalFrameBuffer* }
%struct.InternalFrameBuffer = type { i8*, i64, i32 }
%struct.CommonContexts = type { i8**, [3 x i8**], i8**, i32, i32, i32 }
%struct.TPL_MV_REF = type { %union.int_mv, i8 }
%struct.AV1EncoderConfig = type { %struct.InputCfg, %struct.FrameDimensionCfg, %struct.AlgoCfg, %struct.KeyFrameCfg, %struct.RateControlCfg, %struct.QuantizationCfg, %struct.ResizeCfg, %struct.SuperResCfg, %struct.aom_fixed_buf, %struct.ToolCfg, %struct.GFConfig, %struct.TileConfig, %struct.TuneCfg, %struct.ColorCfg, %struct.DecoderModelCfg, %struct.RefFrameCfg, %struct.UnitTestCfg, %struct.MotionModeCfg, %struct.IntraModeCfg, %struct.TxfmSizeTypeCfg, %struct.CompoundTypeCfg, %struct.PartitionCfg, %struct.CostUpdateFreq, float, i32, i32, i32, i32, i32, i32, i32, [32 x i8], i8, i32, i8, i8, i8, i8, i8* }
%struct.InputCfg = type { double, i32, i32, i32, i32 }
%struct.FrameDimensionCfg = type { i32, i32, i32, i32, i32, i32 }
%struct.AlgoCfg = type { i32, i32, i32, i32, i8, i8, i8 }
%struct.KeyFrameCfg = type { i32, i32, i32, i32, i32, i8, i8, i8, i8 }
%struct.RateControlCfg = type { i64, i64, i64, i64, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }
%struct.QuantizationCfg = type { [5 x double], i32, i32, i32, i32, i8, i8, i8, i8 }
%struct.ResizeCfg = type { i8, i8, i8 }
%struct.SuperResCfg = type { i32, i32, i8, i8, i32, i8 }
%struct.aom_fixed_buf = type { i8*, i64 }
%struct.ToolCfg = type { i32, i32, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8 }
%struct.GFConfig = type { i32, i32, i32, i32, i32, i8, i8 }
%struct.TileConfig = type { i32, i32, i32, i32, i32, i32, [64 x i32], [64 x i32], i8, i8, i8 }
%struct.TuneCfg = type { i8*, i8*, i32, i32, i32 }
%struct.ColorCfg = type { i32, i32, i32, i32, i32 }
%struct.DecoderModelCfg = type { %struct.aom_timing, i32, i8, i8, i8 }
%struct.RefFrameCfg = type { i32, i8, i8 }
%struct.UnitTestCfg = type { i32, i32 }
%struct.MotionModeCfg = type { i8, i8, i8 }
%struct.IntraModeCfg = type { i8, i8, i8, i8, i8, i8, i8 }
%struct.TxfmSizeTypeCfg = type { i8, i8, i8, i8, i8, i8, i8 }
%struct.CompoundTypeCfg = type { i8, i8, i8, i8, i8, i8 }
%struct.PartitionCfg = type { i8, i8, i8, i8, i8 }
%struct.CostUpdateFreq = type { i32, i32, i32, i32 }
%struct.TemporalFilterCtx = type { [35 x %struct.yv12_buffer_config*], i32, i32, i32, %struct.scale_factors, [3 x double], i32, i32, i32, i32, i32 }
%struct.ForceIntegerMVInfo = type { [32 x double], i32, i32 }
%struct.RefreshFrameFlagsInfo = type { i8, i8, i8 }
%struct.ExternalFlags = type { i32, %struct.ExtRefreshFrameFlagsInfo, i8, i8, i8, i8, i8, i8 }
%struct.ExtRefreshFrameFlagsInfo = type { i8, i8, i8, i8, i8, i8 }
%struct.yv12_buffer_config = type { %union.anon, %union.anon.0, %union.anon.2, %union.anon.4, %union.anon.6, %union.anon.8, i32, [3 x i8*], i8*, i32, i8*, i64, i32, i64, i32, i32, i32, i32, i32, i32, i8, i32, i32, i32, i32, i32, i32, %struct.aom_metadata_array* }
%union.anon = type { %struct.anon }
%struct.anon = type { i32, i32 }
%union.anon.0 = type { %struct.anon.1 }
%struct.anon.1 = type { i32, i32 }
%union.anon.2 = type { %struct.anon.3 }
%struct.anon.3 = type { i32, i32 }
%union.anon.4 = type { %struct.anon.5 }
%struct.anon.5 = type { i32, i32 }
%union.anon.6 = type { %struct.anon.7 }
%struct.anon.7 = type { i32, i32 }
%union.anon.8 = type { %struct.anon.9 }
%struct.anon.9 = type { i8*, i8*, i8* }
%struct.aom_metadata_array = type { i64, %struct.aom_metadata** }
%struct.aom_metadata = type { i32, i8*, i64, i32 }
%struct.RD_OPT = type { [169 x i32], [8 x [22 x [169 x i32]]], i32, double }
%struct.CODING_CONTEXT = type { %struct.loopfilter, %struct.CdefInfo, %struct.yv12_buffer_config, %struct.RATE_CONTROL, %struct.MV_STATS }
%struct.GlobalMotionInfo = type { i8, [8 x %struct.yv12_buffer_config*], i8*, [2 x i32], [2 x [7 x %struct.FrameDistPair]], i32, i32, i32, [8192 x i32] }
%struct.FrameDistPair = type { i32, i8 }
%struct.WinnerModeParams = type { [3 x [2 x i32]], [3 x i8], [3 x i32], [3 x i32], [3 x i32], [3 x i32] }
%struct.TimeStamps = type { i64, i64, i64 }
%struct.RATE_CONTROL = type { i32, i32, i32, i32, i32, [4 x i32], i32, [4 x double], i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i64, i64, i32, i32, i32, i32, i32, i32, i32, [4 x i32], double, double, i64, i64, i64, i64, i32, i32, i32, i32, i32, i64, i64, i32, i32, i32, i32, i32, i32, i32, [7 x i32], i32, i32, i32, i32, i32 }
%struct.SPEED_FEATURES = type { %struct.HIGH_LEVEL_SPEED_FEATURES, %struct.FIRST_PASS_SPEED_FEATURES, %struct.TPL_SPEED_FEATURES, %struct.GLOBAL_MOTION_SPEED_FEATURES, %struct.PARTITION_SPEED_FEATURES, %struct.MV_SPEED_FEATURES, %struct.INTER_MODE_SPEED_FEATURES, %struct.INTERP_FILTER_SPEED_FEATURES, %struct.INTRA_MODE_SPEED_FEATURES, %struct.TX_SPEED_FEATURES, %struct.RD_CALC_SPEED_FEATURES, %struct.WINNER_MODE_SPEED_FEATURES, %struct.LOOP_FILTER_SPEED_FEATURES, %struct.REAL_TIME_SPEED_FEATURES }
%struct.HIGH_LEVEL_SPEED_FEATURES = type { i32, i8, i32, i8, i32, i8, i32, i32 }
%struct.FIRST_PASS_SPEED_FEATURES = type { i32, i32 }
%struct.TPL_SPEED_FEATURES = type { i32, i32, i32, i32, i8, i8, i32, i32, i32, i32, i32 }
%struct.GLOBAL_MOTION_SPEED_FEATURES = type { i8, i32, i32 }
%struct.PARTITION_SPEED_FEATURES = type { i8, i8, i32, i32, i32, i32, i32, i8, i8, i8, i8, i32, i64, i32, [5 x i32], i32, i32, i32, i32, i32, i32, i8, i32, i8, i32, i32, i32, i32, i32, i32, i32 }
%struct.MV_SPEED_FEATURES = type { i8, i32, i32, i8, i32, i8, i8, i8, i32, [4 x %struct.MESH_PATTERN], [4 x %struct.MESH_PATTERN], i32, i32, i32, i32, i32, i32, i32, i32 }
%struct.MESH_PATTERN = type { i32, i32 }
%struct.INTER_MODE_SPEED_FEATURES = type { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i8, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i8, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }
%struct.INTERP_FILTER_SPEED_FEATURES = type { i32, i32, i32, i32, i32, i32 }
%struct.INTRA_MODE_SPEED_FEATURES = type { [5 x i32], [5 x i32], i32, i32, i32, i32, i32, i32, i32, i32, i32 }
%struct.TX_SPEED_FEATURES = type { i32, i32, i32, i32, i32, %struct.TX_TYPE_SEARCH, i32, i32, i32, i32, i32, i32, i32 }
%struct.TX_TYPE_SEARCH = type { i8, i32, i32, i32, i32, i32, i32, i32, i32, i32 }
%struct.RD_CALC_SPEED_FEATURES = type { i32, i32, i32, i8, i32, i32 }
%struct.WINNER_MODE_SPEED_FEATURES = type { i32, i32, i32, i32, i8, i32, i32 }
%struct.LOOP_FILTER_SPEED_FEATURES = type { i8, i32, i32, i32, i32, i32, i32, i32, i32, i32 }
%struct.REAL_TIME_SPEED_FEATURES = type { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i8, i32, i32, i32, i32, i32, [16 x i32], i32 }
%struct.MotionVectorSearchParams = type { i32, i32, i32 (%struct.macroblockd*, %struct.AV1Common*, %struct.SUBPEL_MOTION_SEARCH_PARAMS*, i32, %struct.mv*, i32*, i32*, %union.int_mv*)*, [3 x [7 x %struct.search_site_config]] }
%struct.SUBPEL_MOTION_SEARCH_PARAMS = type { i32, i32*, i8, i32, %struct.SubpelMvLimits, %struct.MV_COST_PARAMS, %struct.SUBPEL_SEARCH_VAR_PARAMS }
%struct.SubpelMvLimits = type { i32, i32, i32, i32 }
%struct.MV_COST_PARAMS = type { %struct.mv*, %struct.fullpel_mv, i8, i32*, [2 x i32*], i32, i32 }
%struct.SUBPEL_SEARCH_VAR_PARAMS = type { %struct.aom_variance_vtable*, i8, %struct.MSBuffers, i32, i32 }
%struct.MSBuffers = type { %struct.buf_2d*, %struct.buf_2d*, i8*, i8*, i32, i32, i32*, i32* }
%struct.mv = type { i16, i16 }
%struct.search_site_config = type { [22 x [17 x %struct.search_site]], i32, [22 x i32], [22 x i32], i32 }
%struct.search_site = type { %struct.fullpel_mv, i32 }
%struct.EncSegmentationInfo = type { i8*, i8 }
%struct.CYCLIC_REFRESH = type { i32, i32, i32, i32, i32, i32, i32, i32, i32, i8*, i8*, i64, i64, i16, double, i32, [3 x i32], double, i32 }
%struct.ActiveMap = type { i32, i32, i8* }
%struct.RefBufferStack = type { [16 x i32], i32, [16 x i32], i32, [16 x i32], i32 }
%struct.FRAME_INFO = type { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }
%struct.FRAME_INDEX_SET = type { i32 }
%struct.InitialDimensions = type { i32, i32 }
%struct.ResizePendingParams = type { i32, i32 }
%struct.TileDataEnc = type { %struct.TileInfo, [8 x i8], %struct.frame_contexts, %struct.frame_contexts*, i8, [22 x %struct.InterModeRdModel], %struct.AV1EncRowMultiThreadSync, %struct.mv }
%struct.InterModeRdModel = type { i32, double, double, double, double, double, double, double, i32, double, double, double, double, double }
%struct.AV1EncRowMultiThreadSync = type { %union.pthread_mutex_t*, %union.pthread_cond_t*, i32*, i32, i32, i32, i32 }
%struct.TokenInfo = type { [64 x [64 x %struct.TokenExtra*]], [64 x [64 x %struct.TokenList*]] }
%struct.TokenExtra = type { i8 }
%struct.TokenList = type { %struct.TokenExtra*, i32 }
%struct.VarBasedPartitionInfo = type { [5 x i64], i64 }
%struct.FrameProbInfo = type { [7 x [22 x i32]], [7 x i32], [7 x [19 x [16 x i32]]], [7 x [16 x [3 x i32]]] }
%struct.MultiThreadInfo = type { i32, [10 x i32], i32, i32, %struct.AVxWorker*, %struct.EncWorkerData*, i8, %struct.AV1EncRowMultiThreadInfo, %struct.AV1TplRowMultiThreadInfo, %struct.AV1LfSyncData, %struct.AV1LrSyncData, %struct.AV1EncPackBSSync, %struct.AV1GlobalMotionSync, %struct.AV1TemporalFilterSync, %struct.AV1CdefSyncData, %struct.AV1CdefWorker* }
%struct.AVxWorker = type { %struct.AVxWorkerImpl*, i32, i8*, i32 (i8*, i8*)*, i8*, i8*, i32 }
%struct.AVxWorkerImpl = type opaque
%struct.EncWorkerData = type opaque
%struct.AV1EncRowMultiThreadInfo = type { i32, i32, i32, i32, [64 x i32], %union.pthread_mutex_t*, void (%struct.AV1EncRowMultiThreadSync*, i32, i32)*, void (%struct.AV1EncRowMultiThreadSync*, i32, i32, i32)* }
%struct.AV1TplRowMultiThreadInfo = type { void (%struct.AV1TplRowMultiThreadSync*, i32, i32)*, void (%struct.AV1TplRowMultiThreadSync*, i32, i32, i32)* }
%struct.AV1LfSyncData = type { [3 x %union.pthread_mutex_t*], [3 x %union.pthread_cond_t*], [3 x i32*], i32, i32, %struct.LoopFilterWorkerData*, i32, %union.pthread_mutex_t*, %struct.AV1LfMTInfo*, i32, i32 }
%struct.LoopFilterWorkerData = type { %struct.yv12_buffer_config*, %struct.AV1Common*, [3 x %struct.macroblockd_plane], %struct.macroblockd* }
%struct.AV1LfMTInfo = type { i32, i32, i32 }
%struct.AV1LrSyncData = type { [3 x %union.pthread_mutex_t*], [3 x %union.pthread_cond_t*], [3 x i32*], i32, i32, i32, i32, %union.pthread_mutex_t*, %struct.LoopRestorationWorkerData*, %struct.AV1LrMTInfo*, i32, i32 }
%struct.LoopRestorationWorkerData = type { i32*, i8*, i8* }
%struct.AV1LrMTInfo = type { i32, i32, i32, i32, i32, i32, i32 }
%struct.AV1EncPackBSSync = type { %union.pthread_mutex_t*, [512 x %struct.PackBSTileOrder], i32 }
%struct.PackBSTileOrder = type { i16, i32 }
%struct.AV1GlobalMotionSync = type { %struct.JobInfo, %struct.GlobalMotionThreadData*, %union.pthread_mutex_t*, i32, i32, i8 }
%struct.JobInfo = type { [64 x i8], [2 x i8], [2 x i8] }
%struct.GlobalMotionThreadData = type { [1 x %struct.MotionModel], i8* }
%struct.MotionModel = type { [8 x double], i32*, i32 }
%struct.AV1TemporalFilterSync = type { %union.pthread_mutex_t*, i32 }
%struct.AV1CdefSyncData = type { %union.pthread_mutex_t*, %struct.AV1CdefRowSync*, i32, i32, i32 }
%struct.AV1CdefRowSync = type { %union.pthread_mutex_t*, %union.pthread_cond_t*, i32 }
%struct.AV1CdefWorker = type { %struct.AV1Common*, %struct.macroblockd*, [3 x i16*], i16*, [3 x i16*], void (%struct.AV1Common*, %struct.macroblockd*, %struct.CdefBlockInfo*, i16**, i16*, %struct.AV1CdefSyncData*, i32)* }
%struct.CdefBlockInfo = type { i16*, [3 x i16*], [3 x i16*], i8*, [256 x %struct.cdef_list], i32, i32, i32, i32, [4 x i32], i32, i32, i32, i32, i32, i32, [16 x [16 x i32]], [16 x [16 x i32]], i32, i32, i32 }
%struct.cdef_list = type { i8, i8 }
%struct.AV1LrStruct = type { void (%struct.RestorationTileLimits*, %struct.AV1PixelRect*, i32, i8*, i32*, %struct.RestorationLineBuffers*)*, [3 x %struct.FilterFrameCtxt], %struct.yv12_buffer_config*, %struct.yv12_buffer_config* }
%struct.RestorationTileLimits = type { i32, i32, i32, i32 }
%struct.AV1PixelRect = type { i32, i32, i32, i32 }
%struct.FilterFrameCtxt = type { %struct.RestorationInfo*, i32, i32, i32, i32, i32, i8*, i8*, i32, i32, %struct.AV1PixelRect }
%struct.aom_film_grain_table_t = type { %struct.aom_film_grain_table_entry_t*, %struct.aom_film_grain_table_entry_t* }
%struct.aom_film_grain_table_entry_t = type { %struct.aom_film_grain_t, i64, i64, %struct.aom_film_grain_table_entry_t* }
%struct.aom_denoise_and_model_t = type opaque
%struct.InterpSearchFlags = type { i32, i16 }
%struct.RefFrameDistanceInfo = type { [7 x i32], i8, i8 }
%struct.SVC = type { i32, i32, i32, i32, i32, i32, i32, i32, [7 x i32], [7 x i32], [8 x i32], double, i32, [8 x i32], [8 x i8], i32, i32, [8 x i32], [8 x i32], i32, i32, [32 x %struct.LAYER_CONTEXT], [4 x i8], [4 x i32], i32 }
%struct.LAYER_CONTEXT = type { %struct.RATE_CONTROL, %struct.PRIMARY_RATE_CONTROL, i32, i64, i32, i32, i64, i64, double, i32, i32, i32, i32, i32, i8*, i8*, i32, i32, i32, i8, i8, i32, i32 }
%struct.MV_STATS = type { i32, i32, i32, i32, i32, i32, [4 x i32], i32, i32, i32, i32, i32, i32, i32, i32, i32 }
%struct.FirstPassData = type { %struct.FRAME_STATS*, i32* }
%struct.FRAME_STATS = type { i64, i64, i64, i64, i64, i32, i32, i32, i32, double, i32, i32, i32, i32, i32, i32, i32, i32, i64, i64, double, double }
%struct.noise_estimate = type { i32, i32, i32, i32, i32, i32, i32, i32, i32 }
%struct.av1_denoiser = type { %struct.yv12_buffer_config*, %struct.yv12_buffer_config*, %struct.yv12_buffer_config, i32, i32, i32, i32, i32, i32, i32 }
%struct.HandleInterModeArgs = type { [3 x i8*], [3 x i32], [3 x i8*], [3 x i32], [8 x %union.int_mv]*, [8 x i32]*, [8 x i32]*, [3 x [8 x i64]]*, i32, i32, [3 x [8 x i64]]*, i32, i8*, [128 x %struct.INTERPOLATION_FILTER_STATS], i32, i32, i32, i32, [29 x i32], [8 x i32] }
%struct.INTERPOLATION_FILTER_STATS = type { %union.int_interpfilters, [2 x %union.int_mv], [2 x i8], i8, i32, i64, i32 }
%struct.BUFFER_SET = type { [3 x i8*], [3 x i32] }
%struct.InterPredParams = type { i32, i32, %struct.WarpedMotionParams, %struct.ConvolveParams, [2 x %struct.InterpFilterParams*], i32, i32, i32, i32, %struct.buf_2d, i32, i32, %struct.scale_factors*, i32, i32, %struct.INTERINTER_COMPOUND_DATA, i8, i32 }
%struct.ConvolveParams = type { i32, i16*, i32, i32, i32, i32, i32, i32, i32, i32 }
%struct.InterpFilterParams = type { i16*, i16, i8 }

@block_size_wide = internal unnamed_addr constant [22 x i8] c"\04\04\08\08\08\10\10\10   @@@\80\80\04\10\08 \10@", align 16
@__const.av1_compound_type_rd.comp_model_rate = private unnamed_addr constant [4 x i32] [i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647], align 16
@__const.av1_compound_type_rd.comp_model_dist = private unnamed_addr constant [4 x i64] [i64 9223372036854775807, i64 9223372036854775807, i64 9223372036854775807, i64 9223372036854775807], align 16
@av1_compound_type_rd.asym_mask_idx = internal unnamed_addr constant [4 x i32] [i32 7, i32 11, i32 13, i32 9], align 16
@comp_type_rd_threshold_mul = internal unnamed_addr constant [3 x i32] [i32 1, i32 11, i32 12], align 4
@comp_type_rd_threshold_div = internal unnamed_addr constant [3 x i32] [i32 3, i32 16, i32 16], align 4
@av1_wedge_params_lookup = external local_unnamed_addr constant [22 x %struct.wedge_params_type], align 16
@size_group_lookup = internal unnamed_addr constant [22 x i8] c"\00\00\00\01\01\01\02\02\02\03\03\03\03\03\03\03\00\00\01\01\02\02", align 16
@block_size_high = internal unnamed_addr constant [22 x i8] c"\04\08\04\08\10\08\10 \10 @ @\80@\80\10\04 \08@\10", align 16
@aom_subtract_block = external local_unnamed_addr global void (i32, i32, i16*, i64, i8*, i64, i8*, i64)*, align 8
@av1_wedge_sse_from_residuals = external local_unnamed_addr global i64 (i16*, i16*, i8*, i32)*, align 8
@num_pels_log2_lookup = internal unnamed_addr constant [22 x i8] c"\04\05\05\06\07\07\08\09\09\0A\0B\0B\0C\0D\0D\0E\06\06\08\08\0A\0A", align 16
@ss_size_lookup = internal unnamed_addr constant [22 x [2 x [2 x i8]]] [[2 x [2 x i8]] zeroinitializer, [2 x [2 x i8]] [[2 x i8] c"\01\00", [2 x i8] c"\FF\00"], [2 x [2 x i8]] [[2 x i8] c"\02\FF", [2 x i8] zeroinitializer], [2 x [2 x i8]] [[2 x i8] c"\03\02", [2 x i8] c"\01\00"], [2 x [2 x i8]] [[2 x i8] c"\04\03", [2 x i8] c"\FF\01"], [2 x [2 x i8]] [[2 x i8] c"\05\FF", [2 x i8] c"\03\02"], [2 x [2 x i8]] [[2 x i8] c"\06\05", [2 x i8] c"\04\03"], [2 x [2 x i8]] [[2 x i8] c"\07\06", [2 x i8] c"\FF\04"], [2 x [2 x i8]] [[2 x i8] c"\08\FF", [2 x i8] c"\06\05"], [2 x [2 x i8]] [[2 x i8] c"\09\08", [2 x i8] c"\07\06"], [2 x [2 x i8]] [[2 x i8] c"\0A\09", [2 x i8] c"\FF\07"], [2 x [2 x i8]] [[2 x i8] c"\0B\FF", [2 x i8] c"\09\08"], [2 x [2 x i8]] [[2 x i8] c"\0C\0B", [2 x i8] c"\0A\09"], [2 x [2 x i8]] [[2 x i8] c"\0D\0C", [2 x i8] c"\FF\0A"], [2 x [2 x i8]] [[2 x i8] c"\0E\FF", [2 x i8] c"\0C\0B"], [2 x [2 x i8]] [[2 x i8] c"\0F\0E", [2 x i8] c"\0D\0C"], [2 x [2 x i8]] [[2 x i8] c"\10\01", [2 x i8] c"\FF\01"], [2 x [2 x i8]] [[2 x i8] c"\11\FF", [2 x i8] c"\02\02"], [2 x [2 x i8]] [[2 x i8] c"\12\04", [2 x i8] c"\FF\10"], [2 x [2 x i8]] [[2 x i8] c"\13\FF", [2 x i8] c"\05\11"], [2 x [2 x i8]] [[2 x i8] c"\14\07", [2 x i8] c"\FF\12"], [2 x [2 x i8]] [[2 x i8] c"\15\FF", [2 x i8] c"\08\13"]], align 16
@aom_sse = external local_unnamed_addr global i64 (i8*, i32, i8*, i32, i32, i32)*, align 8
@check_txfm_eval.scale = internal unnamed_addr constant [5 x i32] [i32 2147483647, i32 4, i32 3, i32 2, i32 2], align 16
@check_txfm_eval.level_to_qindex_map = internal unnamed_addr constant [5 x i32] [i32 0, i32 0, i32 0, i32 80, i32 100], align 16
@check_txfm_eval.luma_mul = internal unnamed_addr constant [5 x i32] [i32 2147483647, i32 32, i32 29, i32 17, i32 17], align 16
@max_txsize_rect_lookup = internal unnamed_addr constant [22 x i8] c"\00\05\06\01\07\08\02\09\0A\03\0B\0C\04\04\04\04\0D\0E\0F\10\11\12", align 16
@__const.masked_compound_type_rd.pick_interinter_mask = private unnamed_addr constant [2 x i64 (%struct.AV1_COMP*, %struct.macroblock*, i8, i8*, i8*, i16*, i16*, i64*)*] [i64 (%struct.AV1_COMP*, %struct.macroblock*, i8, i8*, i8*, i16*, i16*, i64*)* @pick_interinter_wedge, i64 (%struct.AV1_COMP*, %struct.macroblock*, i8, i8*, i8*, i16*, i16*, i64*)* @pick_interinter_seg], align 16
@estimate_wedge_sign.split_qtr = internal unnamed_addr constant [22 x i8] c"\FF\FF\FF\00\01\02\03\04\05\06\07\08\09\0A\0B\0C\FF\FF\10\11\12\13", align 16
@av1_wedge_compute_delta_squares = external local_unnamed_addr global void (i16*, i16*, i16*, i32)*, align 8
@av1_wedge_sign_from_residuals = external local_unnamed_addr global i8 (i16*, i8*, i32, i64)*, align 8
@av1_build_compound_diffwtd_mask = external local_unnamed_addr global void (i8*, i8, i8*, i32, i8*, i32, i32, i32)*, align 8
@switch.table.av1_compound_type_rd = private unnamed_addr constant [9 x i32] [i32 0, i32 1, i32 1, i32 0, i32 0, i32 0, i32 0, i32 1, i32 0], align 4

; Function Attrs: nounwind ssp uwtable
define hidden i32 @av1_handle_inter_intra_mode(%struct.AV1_COMP*, %struct.macroblock*, i8 zeroext, %struct.MB_MODE_INFO*, %struct.HandleInterModeArgs* nocapture readonly, i64, i32* nocapture, i32* nocapture, %struct.BUFFER_SET*) local_unnamed_addr #0 {
  %10 = alloca i32, align 4
  %11 = alloca i32, align 4
  %12 = alloca i64, align 8
  %13 = alloca i64, align 8
  %14 = alloca %struct.RD_STATS, align 8
  %15 = alloca %struct.BUFFER_SET, align 8
  %16 = alloca i8, align 1
  %17 = alloca i64, align 8
  %18 = alloca i8, align 1
  %19 = alloca i64, align 8
  %20 = alloca i32, align 4
  %21 = alloca i32, align 4
  %22 = alloca i64, align 8
  %23 = alloca i64, align 8
  %24 = alloca i8, align 1
  %25 = alloca i64, align 8
  %26 = alloca [16384 x i16], align 32
  %27 = alloca [16384 x i16], align 32
  %28 = alloca i8, align 1
  %29 = alloca i64, align 8
  %30 = alloca i32, align 4
  %31 = alloca i32, align 4
  %32 = alloca i64, align 8
  %33 = alloca i64, align 8
  %34 = alloca %struct.RD_STATS, align 8
  %35 = alloca [2048 x i8], align 16
  %36 = alloca [2048 x i8], align 16
  %37 = alloca %union.int_mv, align 4
  %38 = alloca i32, align 4
  %39 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 9, i32 20, i32 2
  %40 = load i8, i8* %39, align 1, !range !2
  %41 = icmp ne i8 %40, 0
  %42 = zext i8 %2 to i64
  %43 = getelementptr inbounds [22 x %struct.wedge_params_type], [22 x %struct.wedge_params_type]* @av1_wedge_params_lookup, i64 0, i64 %42, i32 0
  %44 = load i32, i32* %43, align 16
  %45 = icmp slt i32 %44, 1
  br i1 %45, label %56, label %46

46:                                               ; preds = %9
  %47 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 40, i32 6, i32 25
  %48 = load i32, i32* %47, align 4
  %49 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 60
  %50 = load i32, i32* %49, align 4
  %51 = icmp ugt i32 %50, %48
  br i1 %51, label %52, label %56

52:                                               ; preds = %46
  %53 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 9, i32 20, i32 5
  %54 = load i8, i8* %53, align 1, !range !2
  %55 = icmp ne i8 %54, 0
  br label %56

56:                                               ; preds = %52, %46, %9
  %57 = phi i1 [ false, %9 ], [ false, %46 ], [ %55, %52 ]
  %58 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8
  %59 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 2
  %60 = getelementptr inbounds [22 x i8], [22 x i8]* @block_size_wide, i64 0, i64 %42
  %61 = load i8, i8* %60, align 1
  %62 = zext i8 %61 to i32
  %63 = getelementptr inbounds [2048 x i8], [2048 x i8]* %35, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 2048, i8* nonnull %63) #5
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %63, i8 -86, i64 2048, i1 false)
  %64 = getelementptr inbounds [2048 x i8], [2048 x i8]* %36, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 2048, i8* nonnull %64) #5
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %64, i8 -86, i64 2048, i1 false)
  %65 = getelementptr inbounds %struct.macroblockd, %struct.macroblockd* %59, i64 0, i32 0
  %66 = load i32, i32* %65, align 16
  %67 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 2, i32 1
  %68 = load i32, i32* %67, align 4
  %69 = getelementptr inbounds %struct.MB_MODE_INFO, %struct.MB_MODE_INFO* %3, i64 0, i32 6, i64 1
  store i8 -1, i8* %69, align 1
  %70 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 2, i32 4, i64 0, i32 3, i32 0
  store i8* %63, i8** %70, align 16
  %71 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 2, i32 4, i64 0, i32 3, i32 4
  store i32 %62, i32* %71, align 8
  call void @av1_enc_build_inter_predictor(%struct.AV1Common* %58, %struct.macroblockd* %59, i32 %66, i32 %68, %struct.BUFFER_SET* null, i8 zeroext %2, i32 0, i32 0) #5
  %72 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 35
  %73 = load %struct.SequenceHeader*, %struct.SequenceHeader** %72, align 16
  %74 = getelementptr inbounds %struct.SequenceHeader, %struct.SequenceHeader* %73, i64 0, i32 27
  %75 = load i8, i8* %74, align 1
  %76 = icmp eq i8 %75, 0
  %77 = bitcast %struct.BUFFER_SET* %15 to i8*
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %77)
  %78 = bitcast %struct.BUFFER_SET* %8 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %77, i8* align 1 %78, i64 40, i1 false)
  %79 = bitcast %struct.BUFFER_SET* %15 to i64*
  %80 = load i64, i64* %79, align 8
  %81 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 2, i32 4, i64 0, i32 3
  %82 = bitcast %struct.buf_2d* %81 to i64*
  store i64 %80, i64* %82, align 16
  %83 = getelementptr inbounds %struct.BUFFER_SET, %struct.BUFFER_SET* %15, i64 0, i32 1, i64 0
  %84 = load i32, i32* %83, align 8
  %85 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 2, i32 4, i64 0, i32 3, i32 4
  store i32 %84, i32* %85, align 8
  br i1 %76, label %612, label %86

86:                                               ; preds = %56, %612
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %77)
  store i8 0, i8* %69, align 1
  %87 = getelementptr inbounds %struct.HandleInterModeArgs, %struct.HandleInterModeArgs* %4, i64 0, i32 12
  %88 = load i8*, i8** %87, align 8
  %89 = getelementptr inbounds %struct.MB_MODE_INFO, %struct.MB_MODE_INFO* %3, i64 0, i32 6, i64 0
  %90 = load i8, i8* %89, align 8
  %91 = sext i8 %90 to i64
  %92 = getelementptr inbounds i8, i8* %88, i64 %91
  %93 = load i8, i8* %92, align 1
  br i1 %41, label %94, label %245

94:                                               ; preds = %86
  %95 = getelementptr inbounds [22 x i8], [22 x i8]* @size_group_lookup, i64 0, i64 %42
  %96 = load i8, i8* %95, align 1
  %97 = zext i8 %96 to i64
  %98 = getelementptr inbounds %struct.MB_MODE_INFO, %struct.MB_MODE_INFO* %3, i64 0, i32 28
  %99 = load i16, i16* %98, align 1
  %100 = and i16 %99, -1025
  store i16 %100, i16* %98, align 1
  %101 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 40, i32 6, i32 12
  %102 = load i32, i32* %101, align 4
  %103 = icmp eq i32 %102, 0
  %104 = icmp eq i8 %93, 4
  %105 = or i1 %104, %103
  br i1 %105, label %106, label %157

106:                                              ; preds = %94
  %107 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 9, i32 18, i32 2
  %108 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 40, i32 8, i32 5
  %109 = bitcast i32* %10 to i8*
  %110 = bitcast i32* %11 to i8*
  %111 = bitcast i64* %12 to i8*
  %112 = bitcast i64* %13 to i8*
  %113 = getelementptr inbounds %struct.MB_MODE_INFO, %struct.MB_MODE_INFO* %3, i64 0, i32 14
  %114 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 17
  br label %115

115:                                              ; preds = %146, %106
  %116 = phi i8 [ %93, %106 ], [ %147, %146 ]
  %117 = phi i64 [ 0, %106 ], [ %149, %146 ]
  %118 = phi i64 [ 9223372036854775807, %106 ], [ %148, %146 ]
  %119 = load i8, i8* %107, align 1, !range !2
  %120 = icmp eq i8 %119, 0
  br i1 %120, label %126, label %121

121:                                              ; preds = %115
  %122 = load i32, i32* %108, align 4
  %123 = icmp ne i32 %122, 0
  %124 = icmp eq i64 %117, 3
  %125 = and i1 %124, %123
  br i1 %125, label %151, label %128

126:                                              ; preds = %115
  %127 = icmp eq i64 %117, 3
  br i1 %127, label %151, label %128

128:                                              ; preds = %126, %121
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %109) #5
  store i32 -1431655766, i32* %10, align 4
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %110) #5
  store i32 -1431655766, i32* %11, align 4
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %111) #5
  store i64 -6148914691236517206, i64* %12, align 8
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %112) #5
  store i64 -6148914691236517206, i64* %13, align 8
  %129 = trunc i64 %117 to i8
  store i8 %129, i8* %113, align 8
  %130 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 20, i32 32, i64 %97, i64 %117
  %131 = load i32, i32* %130, align 4
  call void @av1_build_intra_predictors_for_interintra(%struct.AV1Common* %58, %struct.macroblockd* %59, i8 zeroext %2, i32 0, %struct.BUFFER_SET* %8, i8* nonnull %64, i32 %62) #5
  call void @av1_combine_interintra(%struct.macroblockd* %59, i8 zeroext %2, i32 0, i8* nonnull %63, i32 %62, i8* nonnull %64, i32 %62) #5
  call fastcc void @model_rd_for_sb_with_curvfit(i8 zeroext %2, %struct.macroblock* %1, %struct.macroblockd* %59, i32 0, i32 0, i32* nonnull %10, i64* nonnull %12, i32* nonnull %11, i64* nonnull %13, i32* null, i64* null, i64* null) #5
  %132 = load i32, i32* %10, align 4
  %133 = add nsw i32 %132, %131
  %134 = sext i32 %133 to i64
  %135 = load i32, i32* %114, align 8
  %136 = sext i32 %135 to i64
  %137 = mul nsw i64 %134, %136
  %138 = add nsw i64 %137, 256
  %139 = ashr i64 %138, 9
  %140 = load i64, i64* %12, align 8
  %141 = shl nsw i64 %140, 7
  %142 = add nsw i64 %139, %141
  %143 = icmp slt i64 %142, %118
  br i1 %143, label %144, label %146

144:                                              ; preds = %128
  %145 = load i8, i8* %113, align 8
  br label %146

146:                                              ; preds = %144, %128
  %147 = phi i8 [ %145, %144 ], [ %116, %128 ]
  %148 = phi i64 [ %142, %144 ], [ %118, %128 ]
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %112) #5
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %111) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %110) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %109) #5
  %149 = add nuw nsw i64 %117, 1
  %150 = icmp eq i64 %149, 4
  br i1 %150, label %151, label %115

151:                                              ; preds = %146, %126, %121
  %152 = phi i8 [ %116, %126 ], [ %147, %146 ], [ %116, %121 ]
  %153 = load i8*, i8** %87, align 8
  %154 = load i8, i8* %89, align 8
  %155 = sext i8 %154 to i64
  %156 = getelementptr inbounds i8, i8* %153, i64 %155
  store i8 %152, i8* %156, align 1
  br label %157

157:                                              ; preds = %94, %151
  %158 = phi i8 [ %152, %151 ], [ %93, %94 ]
  %159 = getelementptr inbounds %struct.MB_MODE_INFO, %struct.MB_MODE_INFO* %3, i64 0, i32 14
  store i8 %158, i8* %159, align 8
  call void @av1_build_intra_predictors_for_interintra(%struct.AV1Common* %58, %struct.macroblockd* %59, i8 zeroext %2, i32 0, %struct.BUFFER_SET* %8, i8* nonnull %64, i32 %62) #5
  call void @av1_combine_interintra(%struct.macroblockd* %59, i8 zeroext %2, i32 0, i8* nonnull %63, i32 %62, i8* nonnull %64, i32 %62) #5
  %160 = bitcast %struct.RD_STATS* %14 to i8*
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %160) #5
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %160, i8 -86, i64 40, i1 false) #5
  %161 = zext i8 %158 to i64
  %162 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 20, i32 32, i64 %97, i64 %161
  %163 = load i32, i32* %162, align 4
  br i1 %45, label %167, label %164

164:                                              ; preds = %157
  %165 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 20, i32 31, i64 %42, i64 0
  %166 = load i32, i32* %165, align 4
  br label %167

167:                                              ; preds = %164, %157
  %168 = phi i32 [ %166, %164 ], [ 0, %157 ]
  %169 = add nsw i32 %168, %163
  %170 = load i32, i32* %6, align 4
  %171 = add nsw i32 %169, %170
  %172 = icmp slt i64 %5, 5188146770730811383
  br i1 %172, label %173, label %176

173:                                              ; preds = %167
  %174 = sdiv i64 %5, 9
  %175 = shl nsw i64 %174, 4
  br label %176

176:                                              ; preds = %173, %167
  %177 = phi i64 [ %175, %173 ], [ 9223372036854775807, %167 ]
  %178 = sext i32 %171 to i64
  %179 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 17
  %180 = load i32, i32* %179, align 8
  %181 = sext i32 %180 to i64
  %182 = mul nsw i64 %181, %178
  %183 = add nsw i64 %182, 256
  %184 = ashr i64 %183, 9
  %185 = sub nsw i64 %177, %184
  %186 = icmp slt i64 %185, 0
  br i1 %186, label %244, label %187

187:                                              ; preds = %176
  call void @av1_subtract_plane(%struct.macroblock* %1, i8 zeroext %2, i32 0) #5
  %188 = getelementptr inbounds [22 x i8], [22 x i8]* @max_txsize_rect_lookup, i64 0, i64 %42
  %189 = load i8, i8* %188, align 1
  %190 = call i64 @av1_estimate_txfm_yrd(%struct.AV1_COMP* %0, %struct.macroblock* %1, %struct.RD_STATS* nonnull %14, i64 %185, i8 zeroext %2, i8 zeroext %189) #5
  %191 = icmp eq i64 %190, 9223372036854775807
  br i1 %191, label %244, label %192

192:                                              ; preds = %187
  %193 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 2, i32 12
  %194 = load %struct.MB_MODE_INFO*, %struct.MB_MODE_INFO** %193, align 16
  %195 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 2, i32 11
  %196 = load %struct.MB_MODE_INFO*, %struct.MB_MODE_INFO** %195, align 8
  %197 = icmp eq %struct.MB_MODE_INFO* %194, null
  br i1 %197, label %202, label %198

198:                                              ; preds = %192
  %199 = getelementptr inbounds %struct.MB_MODE_INFO, %struct.MB_MODE_INFO* %194, i64 0, i32 23
  %200 = load i8, i8* %199, align 8
  %201 = sext i8 %200 to i64
  br label %202

202:                                              ; preds = %198, %192
  %203 = phi i64 [ %201, %198 ], [ 0, %192 ]
  %204 = icmp eq %struct.MB_MODE_INFO* %196, null
  br i1 %204, label %209, label %205

205:                                              ; preds = %202
  %206 = getelementptr inbounds %struct.MB_MODE_INFO, %struct.MB_MODE_INFO* %196, i64 0, i32 23
  %207 = load i8, i8* %206, align 8
  %208 = sext i8 %207 to i64
  br label %209

209:                                              ; preds = %205, %202
  %210 = phi i64 [ %208, %205 ], [ 0, %202 ]
  %211 = add nsw i64 %210, %203
  %212 = getelementptr inbounds %struct.RD_STATS, %struct.RD_STATS* %14, i64 0, i32 4
  %213 = load i32, i32* %212, align 8
  %214 = icmp eq i32 %213, 0
  br i1 %214, label %219, label %215

215:                                              ; preds = %209
  %216 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 20, i32 38, i64 %211, i64 1
  %217 = load i32, i32* %216, align 4
  %218 = getelementptr inbounds %struct.RD_STATS, %struct.RD_STATS* %14, i64 0, i32 0
  store i32 %217, i32* %218, align 8
  br label %225

219:                                              ; preds = %209
  %220 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 20, i32 38, i64 %211, i64 0
  %221 = load i32, i32* %220, align 4
  %222 = getelementptr inbounds %struct.RD_STATS, %struct.RD_STATS* %14, i64 0, i32 0
  %223 = load i32, i32* %222, align 8
  %224 = add nsw i32 %223, %221
  store i32 %224, i32* %222, align 8
  br label %225

225:                                              ; preds = %219, %215
  %226 = phi i32 [ %224, %219 ], [ %217, %215 ]
  %227 = add nsw i32 %226, %171
  %228 = sext i32 %227 to i64
  %229 = load i32, i32* %179, align 8
  %230 = sext i32 %229 to i64
  %231 = mul nsw i64 %228, %230
  %232 = add nsw i64 %231, 256
  %233 = ashr i64 %232, 9
  %234 = getelementptr inbounds %struct.RD_STATS, %struct.RD_STATS* %14, i64 0, i32 1
  %235 = load i64, i64* %234, align 8
  %236 = shl i64 %235, 7
  %237 = add nsw i64 %233, %236
  %238 = icmp eq i64 %5, 9223372036854775807
  br i1 %238, label %243, label %239

239:                                              ; preds = %225
  %240 = ashr i64 %237, 4
  %241 = mul nsw i64 %240, 9
  %242 = icmp sgt i64 %241, %5
  br i1 %242, label %244, label %243

243:                                              ; preds = %239, %225
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %160) #5
  br label %245

244:                                              ; preds = %187, %176, %239
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %160) #5
  br label %610

245:                                              ; preds = %243, %86
  %246 = phi i8 [ %93, %86 ], [ %158, %243 ]
  %247 = phi i64 [ 9223372036854775807, %86 ], [ %237, %243 ]
  %248 = phi i32 [ 2147483647, %86 ], [ %169, %243 ]
  %249 = getelementptr inbounds %struct.MB_MODE_INFO, %struct.MB_MODE_INFO* %3, i64 0, i32 5, i64 0, i32 0
  %250 = load i32, i32* %249, align 8
  %251 = bitcast %union.int_mv* %37 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %251) #5
  %252 = getelementptr inbounds %union.int_mv, %union.int_mv* %37, i64 0, i32 0
  store i32 %250, i32* %252, align 4
  %253 = bitcast i32* %38 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %253) #5
  store i32 0, i32* %38, align 4
  br i1 %57, label %254, label %580

254:                                              ; preds = %245
  %255 = getelementptr inbounds [22 x i8], [22 x i8]* @size_group_lookup, i64 0, i64 %42
  %256 = load i8, i8* %255, align 1
  %257 = zext i8 %256 to i64
  %258 = load i8, i8* %39, align 1, !range !2
  %259 = getelementptr inbounds %struct.MB_MODE_INFO, %struct.MB_MODE_INFO* %3, i64 0, i32 28
  %260 = load i16, i16* %259, align 1
  %261 = or i16 %260, 1024
  store i16 %261, i16* %259, align 1
  %262 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 40, i32 6, i32 27
  %263 = load i32, i32* %262, align 4
  %264 = icmp eq i32 %263, 0
  br i1 %264, label %265, label %329

265:                                              ; preds = %254
  %266 = getelementptr inbounds %struct.MB_MODE_INFO, %struct.MB_MODE_INFO* %3, i64 0, i32 14
  %267 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 2, i32 6
  %268 = getelementptr inbounds [22 x i8], [22 x i8]* @block_size_high, i64 0, i64 %42
  %269 = bitcast [16384 x i16]* %26 to i8*
  %270 = bitcast [16384 x i16]* %27 to i8*
  %271 = getelementptr inbounds [16384 x i16], [16384 x i16]* %26, i64 0, i64 0
  %272 = zext i8 %61 to i64
  %273 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 0, i64 0, i32 6, i32 0
  %274 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 0, i64 0, i32 6, i32 4
  %275 = getelementptr inbounds [16384 x i16], [16384 x i16]* %27, i64 0, i64 0
  %276 = bitcast i64* %29 to i8*
  %277 = getelementptr inbounds %struct.MB_MODE_INFO, %struct.MB_MODE_INFO* %3, i64 0, i32 15
  %278 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 17
  br label %279

279:                                              ; preds = %317, %265
  %280 = phi i32 [ 0, %265 ], [ %318, %317 ]
  %281 = phi i32 [ 0, %265 ], [ %319, %317 ]
  %282 = phi i64 [ 0, %265 ], [ %322, %317 ]
  %283 = phi i64 [ 9223372036854775807, %265 ], [ %321, %317 ]
  %284 = phi i64 [ 9223372036854775807, %265 ], [ %320, %317 ]
  %285 = trunc i64 %282 to i8
  store i8 %285, i8* %266, align 8
  call void @av1_build_intra_predictors_for_interintra(%struct.AV1Common* %58, %struct.macroblockd* %59, i8 zeroext %2, i32 0, %struct.BUFFER_SET* %8, i8* nonnull %64, i32 %62) #5
  %286 = load %struct.MB_MODE_INFO**, %struct.MB_MODE_INFO*** %267, align 8
  %287 = load %struct.MB_MODE_INFO*, %struct.MB_MODE_INFO** %286, align 8
  %288 = load i8, i8* %268, align 1
  %289 = zext i8 %288 to i32
  call void @llvm.lifetime.start.p0i8(i64 32768, i8* nonnull %269) #5
  call void @llvm.memset.p0i8.i64(i8* nonnull align 32 %269, i8 -86, i64 32768, i1 false) #5
  call void @llvm.lifetime.start.p0i8(i64 32768, i8* nonnull %270) #5
  call void @llvm.memset.p0i8.i64(i8* nonnull align 32 %270, i8 -86, i64 32768, i1 false) #5
  %290 = load void (i32, i32, i16*, i64, i8*, i64, i8*, i64)*, void (i32, i32, i16*, i64, i8*, i64, i8*, i64)** @aom_subtract_block, align 8
  %291 = load i8*, i8** %273, align 8
  %292 = load i32, i32* %274, align 8
  %293 = sext i32 %292 to i64
  call void %290(i32 %289, i32 %62, i16* nonnull %271, i64 %272, i8* %291, i64 %293, i8* nonnull %63, i64 %272) #5
  %294 = load void (i32, i32, i16*, i64, i8*, i64, i8*, i64)*, void (i32, i32, i16*, i64, i8*, i64, i8*, i64)** @aom_subtract_block, align 8
  call void %294(i32 %289, i32 %62, i16* nonnull %275, i64 %272, i8* nonnull %63, i64 %272, i8* nonnull %64, i64 %272) #5
  call void @llvm.lifetime.start.p0i8(i64 1, i8* nonnull %28) #5
  store i8 -1, i8* %28, align 1
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %276) #5
  store i64 -6148914691236517206, i64* %29, align 8
  %295 = call fastcc i64 @pick_wedge_fixed_sign(%struct.macroblock* %1, i8 zeroext %2, i16* nonnull %271, i16* nonnull %275, i8 signext 0, i8* nonnull %28, i64* nonnull %29) #5
  %296 = load i8, i8* %28, align 1
  %297 = getelementptr inbounds %struct.MB_MODE_INFO, %struct.MB_MODE_INFO* %287, i64 0, i32 15
  store i8 %296, i8* %297, align 1
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %276) #5
  call void @llvm.lifetime.end.p0i8(i64 1, i8* nonnull %28) #5
  call void @llvm.lifetime.end.p0i8(i64 32768, i8* nonnull %270) #5
  call void @llvm.lifetime.end.p0i8(i64 32768, i8* nonnull %269) #5
  %298 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 20, i32 32, i64 %257, i64 %282
  %299 = load i32, i32* %298, align 4
  %300 = load i8, i8* %277, align 1
  %301 = sext i8 %300 to i64
  %302 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 20, i32 29, i64 %42, i64 %301
  %303 = load i32, i32* %302, align 4
  %304 = add nsw i32 %303, %299
  %305 = sext i32 %304 to i64
  %306 = load i32, i32* %278, align 8
  %307 = sext i32 %306 to i64
  %308 = mul nsw i64 %305, %307
  %309 = add nsw i64 %308, 256
  %310 = ashr i64 %309, 9
  %311 = add nsw i64 %310, %295
  %312 = icmp slt i64 %311, %283
  br i1 %312, label %313, label %317

313:                                              ; preds = %279
  %314 = load i8, i8* %266, align 8
  %315 = zext i8 %314 to i32
  %316 = sext i8 %300 to i32
  br label %317

317:                                              ; preds = %313, %279
  %318 = phi i32 [ %315, %313 ], [ %280, %279 ]
  %319 = phi i32 [ %316, %313 ], [ %281, %279 ]
  %320 = phi i64 [ %295, %313 ], [ %284, %279 ]
  %321 = phi i64 [ %311, %313 ], [ %283, %279 ]
  %322 = add nuw nsw i64 %282, 1
  %323 = icmp eq i64 %322, 4
  br i1 %323, label %324, label %279

324:                                              ; preds = %317
  %325 = trunc i32 %318 to i8
  store i8 %325, i8* %266, align 8
  %326 = trunc i32 %319 to i8
  store i8 %326, i8* %277, align 1
  %327 = icmp eq i32 %318, 3
  br i1 %327, label %441, label %328

328:                                              ; preds = %324
  call void @av1_build_intra_predictors_for_interintra(%struct.AV1Common* %58, %struct.macroblockd* %59, i8 zeroext %2, i32 0, %struct.BUFFER_SET* %8, i8* nonnull %64, i32 %62) #5
  br label %441

329:                                              ; preds = %254
  %330 = icmp eq i8 %258, 0
  br i1 %330, label %331, label %418

331:                                              ; preds = %329
  %332 = icmp eq i8 %246, 4
  %333 = getelementptr inbounds %struct.MB_MODE_INFO, %struct.MB_MODE_INFO* %3, i64 0, i32 14
  br i1 %332, label %334, label %395

334:                                              ; preds = %331
  store i8 3, i8* %333, align 8
  call void @av1_build_intra_predictors_for_interintra(%struct.AV1Common* %58, %struct.macroblockd* %59, i8 zeroext %2, i32 0, %struct.BUFFER_SET* %8, i8* nonnull %64, i32 %62) #5
  %335 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 2, i32 6
  %336 = load %struct.MB_MODE_INFO**, %struct.MB_MODE_INFO*** %335, align 8
  %337 = load %struct.MB_MODE_INFO*, %struct.MB_MODE_INFO** %336, align 8
  %338 = getelementptr inbounds [22 x i8], [22 x i8]* @block_size_high, i64 0, i64 %42
  %339 = load i8, i8* %338, align 1
  %340 = zext i8 %339 to i32
  %341 = bitcast [16384 x i16]* %26 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32768, i8* nonnull %341) #5
  call void @llvm.memset.p0i8.i64(i8* nonnull align 32 %341, i8 -86, i64 32768, i1 false) #5
  %342 = bitcast [16384 x i16]* %27 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32768, i8* nonnull %342) #5
  call void @llvm.memset.p0i8.i64(i8* nonnull align 32 %342, i8 -86, i64 32768, i1 false) #5
  %343 = load void (i32, i32, i16*, i64, i8*, i64, i8*, i64)*, void (i32, i32, i16*, i64, i8*, i64, i8*, i64)** @aom_subtract_block, align 8
  %344 = getelementptr inbounds [16384 x i16], [16384 x i16]* %26, i64 0, i64 0
  %345 = zext i8 %61 to i64
  %346 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 0, i64 0, i32 6, i32 0
  %347 = load i8*, i8** %346, align 8
  %348 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 0, i64 0, i32 6, i32 4
  %349 = load i32, i32* %348, align 8
  %350 = sext i32 %349 to i64
  call void %343(i32 %340, i32 %62, i16* nonnull %344, i64 %345, i8* %347, i64 %350, i8* nonnull %63, i64 %345) #5
  %351 = load void (i32, i32, i16*, i64, i8*, i64, i8*, i64)*, void (i32, i32, i16*, i64, i8*, i64, i8*, i64)** @aom_subtract_block, align 8
  %352 = getelementptr inbounds [16384 x i16], [16384 x i16]* %27, i64 0, i64 0
  call void %351(i32 %340, i32 %62, i16* nonnull %352, i64 %345, i8* nonnull %63, i64 %345, i8* nonnull %64, i64 %345) #5
  call void @llvm.lifetime.start.p0i8(i64 1, i8* nonnull %24) #5
  store i8 -1, i8* %24, align 1
  %353 = bitcast i64* %25 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %353) #5
  store i64 -6148914691236517206, i64* %25, align 8
  %354 = call fastcc i64 @pick_wedge_fixed_sign(%struct.macroblock* %1, i8 zeroext %2, i16* nonnull %344, i16* nonnull %352, i8 signext 0, i8* nonnull %24, i64* nonnull %25) #5
  %355 = load i8, i8* %24, align 1
  %356 = getelementptr inbounds %struct.MB_MODE_INFO, %struct.MB_MODE_INFO* %337, i64 0, i32 15
  store i8 %355, i8* %356, align 1
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %353) #5
  call void @llvm.lifetime.end.p0i8(i64 1, i8* nonnull %24) #5
  call void @llvm.lifetime.end.p0i8(i64 32768, i8* nonnull %342) #5
  call void @llvm.lifetime.end.p0i8(i64 32768, i8* nonnull %341) #5
  %357 = bitcast i32* %20 to i8*
  %358 = bitcast i32* %21 to i8*
  %359 = bitcast i64* %22 to i8*
  %360 = bitcast i64* %23 to i8*
  %361 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 17
  br label %368

362:                                              ; preds = %389
  %363 = load i8*, i8** %87, align 8
  %364 = load i8, i8* %89, align 8
  %365 = sext i8 %364 to i64
  %366 = getelementptr inbounds i8, i8* %363, i64 %365
  store i8 %390, i8* %366, align 1
  store i8 %390, i8* %333, align 8
  %367 = icmp eq i8 %390, 3
  br i1 %367, label %441, label %394

368:                                              ; preds = %389, %334
  %369 = phi i8 [ 3, %334 ], [ %390, %389 ]
  %370 = phi i64 [ %354, %334 ], [ %391, %389 ]
  %371 = phi i64 [ 0, %334 ], [ %392, %389 ]
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %357) #5
  store i32 -1431655766, i32* %20, align 4
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %358) #5
  store i32 -1431655766, i32* %21, align 4
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %359) #5
  store i64 -6148914691236517206, i64* %22, align 8
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %360) #5
  store i64 -6148914691236517206, i64* %23, align 8
  %372 = trunc i64 %371 to i8
  store i8 %372, i8* %333, align 8
  %373 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 20, i32 32, i64 %257, i64 %371
  %374 = load i32, i32* %373, align 4
  call void @av1_build_intra_predictors_for_interintra(%struct.AV1Common* %58, %struct.macroblockd* %59, i8 zeroext %2, i32 0, %struct.BUFFER_SET* %8, i8* nonnull %64, i32 %62) #5
  call void @av1_combine_interintra(%struct.macroblockd* %59, i8 zeroext %2, i32 0, i8* nonnull %63, i32 %62, i8* nonnull %64, i32 %62) #5
  call fastcc void @model_rd_for_sb_with_curvfit(i8 zeroext %2, %struct.macroblock* %1, %struct.macroblockd* %59, i32 0, i32 0, i32* nonnull %20, i64* nonnull %22, i32* nonnull %21, i64* nonnull %23, i32* null, i64* null, i64* null) #5
  %375 = load i32, i32* %20, align 4
  %376 = add nsw i32 %375, %374
  %377 = sext i32 %376 to i64
  %378 = load i32, i32* %361, align 8
  %379 = sext i32 %378 to i64
  %380 = mul nsw i64 %377, %379
  %381 = add nsw i64 %380, 256
  %382 = ashr i64 %381, 9
  %383 = load i64, i64* %22, align 8
  %384 = shl nsw i64 %383, 7
  %385 = add nsw i64 %382, %384
  %386 = icmp slt i64 %385, %370
  br i1 %386, label %387, label %389

387:                                              ; preds = %368
  %388 = load i8, i8* %333, align 8
  br label %389

389:                                              ; preds = %387, %368
  %390 = phi i8 [ %388, %387 ], [ %369, %368 ]
  %391 = phi i64 [ %385, %387 ], [ %370, %368 ]
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %360) #5
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %359) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %358) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %357) #5
  %392 = add nuw nsw i64 %371, 1
  %393 = icmp eq i64 %392, 4
  br i1 %393, label %362, label %368

394:                                              ; preds = %362
  call void @av1_build_intra_predictors_for_interintra(%struct.AV1Common* %58, %struct.macroblockd* %59, i8 zeroext %2, i32 0, %struct.BUFFER_SET* %8, i8* nonnull %64, i32 %62) #5
  br label %441

395:                                              ; preds = %331
  store i8 %246, i8* %333, align 8
  call void @av1_build_intra_predictors_for_interintra(%struct.AV1Common* %58, %struct.macroblockd* %59, i8 zeroext %2, i32 0, %struct.BUFFER_SET* %8, i8* nonnull %64, i32 %62) #5
  %396 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 2, i32 6
  %397 = load %struct.MB_MODE_INFO**, %struct.MB_MODE_INFO*** %396, align 8
  %398 = load %struct.MB_MODE_INFO*, %struct.MB_MODE_INFO** %397, align 8
  %399 = getelementptr inbounds [22 x i8], [22 x i8]* @block_size_high, i64 0, i64 %42
  %400 = load i8, i8* %399, align 1
  %401 = zext i8 %400 to i32
  %402 = bitcast [16384 x i16]* %26 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32768, i8* nonnull %402) #5
  call void @llvm.memset.p0i8.i64(i8* nonnull align 32 %402, i8 -86, i64 32768, i1 false) #5
  %403 = bitcast [16384 x i16]* %27 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32768, i8* nonnull %403) #5
  call void @llvm.memset.p0i8.i64(i8* nonnull align 32 %403, i8 -86, i64 32768, i1 false) #5
  %404 = load void (i32, i32, i16*, i64, i8*, i64, i8*, i64)*, void (i32, i32, i16*, i64, i8*, i64, i8*, i64)** @aom_subtract_block, align 8
  %405 = getelementptr inbounds [16384 x i16], [16384 x i16]* %26, i64 0, i64 0
  %406 = zext i8 %61 to i64
  %407 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 0, i64 0, i32 6, i32 0
  %408 = load i8*, i8** %407, align 8
  %409 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 0, i64 0, i32 6, i32 4
  %410 = load i32, i32* %409, align 8
  %411 = sext i32 %410 to i64
  call void %404(i32 %401, i32 %62, i16* nonnull %405, i64 %406, i8* %408, i64 %411, i8* nonnull %63, i64 %406) #5
  %412 = load void (i32, i32, i16*, i64, i8*, i64, i8*, i64)*, void (i32, i32, i16*, i64, i8*, i64, i8*, i64)** @aom_subtract_block, align 8
  %413 = getelementptr inbounds [16384 x i16], [16384 x i16]* %27, i64 0, i64 0
  call void %412(i32 %401, i32 %62, i16* nonnull %413, i64 %406, i8* nonnull %63, i64 %406, i8* nonnull %64, i64 %406) #5
  call void @llvm.lifetime.start.p0i8(i64 1, i8* nonnull %18) #5
  store i8 -1, i8* %18, align 1
  %414 = bitcast i64* %19 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %414) #5
  store i64 -6148914691236517206, i64* %19, align 8
  %415 = call fastcc i64 @pick_wedge_fixed_sign(%struct.macroblock* %1, i8 zeroext %2, i16* nonnull %405, i16* nonnull %413, i8 signext 0, i8* nonnull %18, i64* nonnull %19) #5
  %416 = load i8, i8* %18, align 1
  %417 = getelementptr inbounds %struct.MB_MODE_INFO, %struct.MB_MODE_INFO* %398, i64 0, i32 15
  store i8 %416, i8* %417, align 1
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %414) #5
  call void @llvm.lifetime.end.p0i8(i64 1, i8* nonnull %18) #5
  call void @llvm.lifetime.end.p0i8(i64 32768, i8* nonnull %403) #5
  call void @llvm.lifetime.end.p0i8(i64 32768, i8* nonnull %402) #5
  br label %441

418:                                              ; preds = %329
  %419 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 2, i32 6
  %420 = load %struct.MB_MODE_INFO**, %struct.MB_MODE_INFO*** %419, align 8
  %421 = load %struct.MB_MODE_INFO*, %struct.MB_MODE_INFO** %420, align 8
  %422 = getelementptr inbounds [22 x i8], [22 x i8]* @block_size_high, i64 0, i64 %42
  %423 = load i8, i8* %422, align 1
  %424 = zext i8 %423 to i32
  %425 = bitcast [16384 x i16]* %26 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32768, i8* nonnull %425) #5
  call void @llvm.memset.p0i8.i64(i8* nonnull align 32 %425, i8 -86, i64 32768, i1 false) #5
  %426 = bitcast [16384 x i16]* %27 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32768, i8* nonnull %426) #5
  call void @llvm.memset.p0i8.i64(i8* nonnull align 32 %426, i8 -86, i64 32768, i1 false) #5
  %427 = load void (i32, i32, i16*, i64, i8*, i64, i8*, i64)*, void (i32, i32, i16*, i64, i8*, i64, i8*, i64)** @aom_subtract_block, align 8
  %428 = getelementptr inbounds [16384 x i16], [16384 x i16]* %26, i64 0, i64 0
  %429 = zext i8 %61 to i64
  %430 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 0, i64 0, i32 6, i32 0
  %431 = load i8*, i8** %430, align 8
  %432 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 0, i64 0, i32 6, i32 4
  %433 = load i32, i32* %432, align 8
  %434 = sext i32 %433 to i64
  call void %427(i32 %424, i32 %62, i16* nonnull %428, i64 %429, i8* %431, i64 %434, i8* nonnull %63, i64 %429) #5
  %435 = load void (i32, i32, i16*, i64, i8*, i64, i8*, i64)*, void (i32, i32, i16*, i64, i8*, i64, i8*, i64)** @aom_subtract_block, align 8
  %436 = getelementptr inbounds [16384 x i16], [16384 x i16]* %27, i64 0, i64 0
  call void %435(i32 %424, i32 %62, i16* nonnull %436, i64 %429, i8* nonnull %63, i64 %429, i8* nonnull %64, i64 %429) #5
  call void @llvm.lifetime.start.p0i8(i64 1, i8* nonnull %16) #5
  store i8 -1, i8* %16, align 1
  %437 = bitcast i64* %17 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %437) #5
  store i64 -6148914691236517206, i64* %17, align 8
  %438 = call fastcc i64 @pick_wedge_fixed_sign(%struct.macroblock* %1, i8 zeroext %2, i16* nonnull %428, i16* nonnull %436, i8 signext 0, i8* nonnull %16, i64* nonnull %17) #5
  %439 = load i8, i8* %16, align 1
  %440 = getelementptr inbounds %struct.MB_MODE_INFO, %struct.MB_MODE_INFO* %421, i64 0, i32 15
  store i8 %439, i8* %440, align 1
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %437) #5
  call void @llvm.lifetime.end.p0i8(i64 1, i8* nonnull %16) #5
  call void @llvm.lifetime.end.p0i8(i64 32768, i8* nonnull %426) #5
  call void @llvm.lifetime.end.p0i8(i64 32768, i8* nonnull %425) #5
  br label %441

441:                                              ; preds = %418, %395, %394, %362, %328, %324
  %442 = phi i8 [ %246, %324 ], [ %246, %328 ], [ 3, %362 ], [ %390, %394 ], [ %246, %395 ], [ %246, %418 ]
  %443 = phi i64 [ %320, %324 ], [ %320, %328 ], [ %391, %362 ], [ %391, %394 ], [ %415, %395 ], [ %438, %418 ]
  %444 = getelementptr inbounds %struct.MB_MODE_INFO, %struct.MB_MODE_INFO* %3, i64 0, i32 14
  %445 = load i8, i8* %444, align 8
  %446 = zext i8 %445 to i64
  %447 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 20, i32 32, i64 %257, i64 %446
  %448 = load i32, i32* %447, align 4
  %449 = getelementptr inbounds %struct.MB_MODE_INFO, %struct.MB_MODE_INFO* %3, i64 0, i32 15
  %450 = load i8, i8* %449, align 1
  %451 = sext i8 %450 to i64
  %452 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 20, i32 29, i64 %42, i64 %451
  %453 = load i32, i32* %452, align 4
  %454 = add nsw i32 %453, %448
  %455 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 20, i32 31, i64 %42, i64 1
  %456 = load i32, i32* %455, align 4
  %457 = add nsw i32 %454, %456
  %458 = load i32, i32* %6, align 4
  %459 = add nsw i32 %458, %457
  %460 = sext i32 %459 to i64
  %461 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 17
  %462 = load i32, i32* %461, align 8
  %463 = sext i32 %462 to i64
  %464 = mul nsw i64 %460, %463
  %465 = add nsw i64 %464, 256
  %466 = ashr i64 %465, 9
  %467 = add nsw i64 %466, %443
  %468 = load i32, i32* %249, align 8
  %469 = getelementptr inbounds %struct.MB_MODE_INFO, %struct.MB_MODE_INFO* %3, i64 0, i32 2
  %470 = load i8, i8* %469, align 2
  switch i8 %470, label %508 [
    i8 16, label %471
    i8 24, label %471
    i8 19, label %471
    i8 20, label %471
    i8 21, label %471
    i8 22, label %471
  ]

471:                                              ; preds = %441, %441, %441, %441, %441, %441
  %472 = bitcast i32* %30 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %472) #5
  store i32 -1431655766, i32* %30, align 4
  %473 = bitcast i32* %31 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %473) #5
  store i32 -1431655766, i32* %31, align 4
  %474 = bitcast i64* %32 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %474) #5
  store i64 -6148914691236517206, i64* %32, align 8
  %475 = bitcast i64* %33 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %475) #5
  store i64 -6148914691236517206, i64* %33, align 8
  %476 = getelementptr inbounds [22 x %struct.wedge_params_type], [22 x %struct.wedge_params_type]* @av1_wedge_params_lookup, i64 0, i64 %42, i32 3
  %477 = load [16 x i8*]*, [16 x i8*]** %476, align 8
  %478 = getelementptr inbounds [16 x i8*], [16 x i8*]* %477, i64 1, i64 %451
  %479 = load i8*, i8** %478, align 8
  %480 = bitcast %union.int_mv* %37 to %struct.mv*
  %481 = call i32 @av1_compound_single_motion_search(%struct.AV1_COMP* %0, %struct.macroblock* %1, i8 zeroext %2, %struct.mv* nonnull %480, i8* nonnull %64, i8* %479, i32 %62, i32* nonnull %38, i32 0) #5
  %482 = load i32, i32* %249, align 8
  %483 = load i32, i32* %252, align 4
  %484 = icmp eq i32 %482, %483
  br i1 %484, label %503, label %485

485:                                              ; preds = %471
  store i32 %483, i32* %249, align 8
  store i8 -1, i8* %69, align 1
  %486 = load i32, i32* %65, align 16
  %487 = load i32, i32* %67, align 4
  call void @av1_enc_build_inter_predictor(%struct.AV1Common* %58, %struct.macroblockd* %59, i32 %486, i32 %487, %struct.BUFFER_SET* %8, i8 zeroext %2, i32 0, i32 0) #5
  store i8 0, i8* %69, align 1
  %488 = load i8*, i8** %70, align 16
  %489 = load i32, i32* %71, align 8
  call void @av1_combine_interintra(%struct.macroblockd* %59, i8 zeroext %2, i32 0, i8* %488, i32 %489, i8* nonnull %64, i32 %62) #5
  call fastcc void @model_rd_for_sb_with_curvfit(i8 zeroext %2, %struct.macroblock* %1, %struct.macroblockd* %59, i32 0, i32 0, i32* nonnull %30, i64* nonnull %32, i32* nonnull %31, i64* nonnull %33, i32* null, i64* null, i64* null) #5
  %490 = load i32, i32* %38, align 4
  %491 = add nsw i32 %490, %457
  %492 = load i32, i32* %30, align 4
  %493 = add nsw i32 %491, %492
  %494 = sext i32 %493 to i64
  %495 = load i32, i32* %461, align 8
  %496 = sext i32 %495 to i64
  %497 = mul nsw i64 %494, %496
  %498 = add nsw i64 %497, 256
  %499 = ashr i64 %498, 9
  %500 = load i64, i64* %32, align 8
  %501 = shl i64 %500, 7
  %502 = add nsw i64 %499, %501
  br label %503

503:                                              ; preds = %485, %471
  %504 = phi i64 [ %502, %485 ], [ 9223372036854775807, %471 ]
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %475) #5
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %474) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %473) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %472) #5
  %505 = icmp slt i64 %504, %467
  br i1 %505, label %510, label %506

506:                                              ; preds = %503
  %507 = load i32, i32* %6, align 4
  br label %508

508:                                              ; preds = %506, %441
  %509 = phi i32 [ %507, %506 ], [ %458, %441 ]
  store i32 %468, i32* %252, align 4
  store i32 %509, i32* %38, align 4
  call void @av1_combine_interintra(%struct.macroblockd* %59, i8 zeroext %2, i32 0, i8* nonnull %63, i32 %62, i8* nonnull %64, i32 %62) #5
  br label %510

510:                                              ; preds = %508, %503
  %511 = bitcast %struct.RD_STATS* %34 to i8*
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %511) #5
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %511, i8 -86, i64 40, i1 false) #5
  %512 = load i32, i32* %38, align 4
  %513 = add nsw i32 %512, %457
  %514 = sext i32 %513 to i64
  %515 = load i32, i32* %461, align 8
  %516 = sext i32 %515 to i64
  %517 = mul nsw i64 %514, %516
  %518 = add nsw i64 %517, 256
  %519 = ashr i64 %518, 9
  %520 = sub nsw i64 %247, %519
  %521 = icmp slt i64 %520, 0
  br i1 %521, label %575, label %522

522:                                              ; preds = %510
  call void @av1_subtract_plane(%struct.macroblock* %1, i8 zeroext %2, i32 0) #5
  %523 = getelementptr inbounds [22 x i8], [22 x i8]* @max_txsize_rect_lookup, i64 0, i64 %42
  %524 = load i8, i8* %523, align 1
  %525 = call i64 @av1_estimate_txfm_yrd(%struct.AV1_COMP* %0, %struct.macroblock* %1, %struct.RD_STATS* nonnull %34, i64 %520, i8 zeroext %2, i8 zeroext %524) #5
  %526 = icmp eq i64 %525, 9223372036854775807
  br i1 %526, label %575, label %527

527:                                              ; preds = %522
  %528 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 2, i32 12
  %529 = load %struct.MB_MODE_INFO*, %struct.MB_MODE_INFO** %528, align 16
  %530 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 2, i32 11
  %531 = load %struct.MB_MODE_INFO*, %struct.MB_MODE_INFO** %530, align 8
  %532 = icmp eq %struct.MB_MODE_INFO* %529, null
  br i1 %532, label %537, label %533

533:                                              ; preds = %527
  %534 = getelementptr inbounds %struct.MB_MODE_INFO, %struct.MB_MODE_INFO* %529, i64 0, i32 23
  %535 = load i8, i8* %534, align 8
  %536 = sext i8 %535 to i64
  br label %537

537:                                              ; preds = %533, %527
  %538 = phi i64 [ %536, %533 ], [ 0, %527 ]
  %539 = icmp eq %struct.MB_MODE_INFO* %531, null
  br i1 %539, label %544, label %540

540:                                              ; preds = %537
  %541 = getelementptr inbounds %struct.MB_MODE_INFO, %struct.MB_MODE_INFO* %531, i64 0, i32 23
  %542 = load i8, i8* %541, align 8
  %543 = sext i8 %542 to i64
  br label %544

544:                                              ; preds = %540, %537
  %545 = phi i64 [ %543, %540 ], [ 0, %537 ]
  %546 = add nsw i64 %545, %538
  %547 = getelementptr inbounds %struct.RD_STATS, %struct.RD_STATS* %34, i64 0, i32 4
  %548 = load i32, i32* %547, align 8
  %549 = icmp eq i32 %548, 0
  br i1 %549, label %554, label %550

550:                                              ; preds = %544
  %551 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 20, i32 38, i64 %546, i64 1
  %552 = load i32, i32* %551, align 4
  %553 = getelementptr inbounds %struct.RD_STATS, %struct.RD_STATS* %34, i64 0, i32 0
  store i32 %552, i32* %553, align 8
  br label %560

554:                                              ; preds = %544
  %555 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 20, i32 38, i64 %546, i64 0
  %556 = load i32, i32* %555, align 4
  %557 = getelementptr inbounds %struct.RD_STATS, %struct.RD_STATS* %34, i64 0, i32 0
  %558 = load i32, i32* %557, align 8
  %559 = add nsw i32 %558, %556
  store i32 %559, i32* %557, align 8
  br label %560

560:                                              ; preds = %554, %550
  %561 = phi i32 [ %559, %554 ], [ %552, %550 ]
  %562 = load i32, i32* %38, align 4
  %563 = add i32 %561, %457
  %564 = add i32 %563, %562
  %565 = sext i32 %564 to i64
  %566 = load i32, i32* %461, align 8
  %567 = sext i32 %566 to i64
  %568 = mul nsw i64 %565, %567
  %569 = add nsw i64 %568, 256
  %570 = ashr i64 %569, 9
  %571 = getelementptr inbounds %struct.RD_STATS, %struct.RD_STATS* %34, i64 0, i32 1
  %572 = load i64, i64* %571, align 8
  %573 = shl i64 %572, 7
  %574 = add nsw i64 %570, %573
  br label %577

575:                                              ; preds = %522, %510
  %576 = icmp eq i64 %467, 9223372036854775807
  br i1 %576, label %579, label %577

577:                                              ; preds = %575, %560
  %578 = phi i64 [ %574, %560 ], [ 9223372036854775807, %575 ]
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %511) #5
  br label %580

579:                                              ; preds = %575
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %511) #5
  br label %608

580:                                              ; preds = %577, %245
  %581 = phi i8 [ %246, %245 ], [ %442, %577 ]
  %582 = phi i64 [ 9223372036854775807, %245 ], [ %578, %577 ]
  %583 = phi i32 [ 0, %245 ], [ %457, %577 ]
  %584 = icmp eq i64 %247, 9223372036854775807
  %585 = icmp eq i64 %582, 9223372036854775807
  %586 = and i1 %584, %585
  br i1 %586, label %608, label %587

587:                                              ; preds = %580
  %588 = icmp slt i64 %582, %247
  br i1 %588, label %589, label %596

589:                                              ; preds = %587
  %590 = load i32, i32* %252, align 4
  store i32 %590, i32* %249, align 8
  %591 = load i32, i32* %38, align 4
  %592 = load i32, i32* %6, align 4
  %593 = sub i32 %591, %592
  %594 = load i32, i32* %7, align 4
  %595 = add nsw i32 %593, %594
  store i32 %595, i32* %7, align 4
  store i32 %591, i32* %6, align 4
  br label %603

596:                                              ; preds = %587
  %597 = and i1 %41, %57
  br i1 %597, label %598, label %603

598:                                              ; preds = %596
  %599 = getelementptr inbounds %struct.MB_MODE_INFO, %struct.MB_MODE_INFO* %3, i64 0, i32 28
  %600 = load i16, i16* %599, align 1
  %601 = and i16 %600, -1025
  store i16 %601, i16* %599, align 1
  %602 = getelementptr inbounds %struct.MB_MODE_INFO, %struct.MB_MODE_INFO* %3, i64 0, i32 14
  store i8 %581, i8* %602, align 8
  store i32 %250, i32* %249, align 8
  call void @av1_enc_build_inter_predictor(%struct.AV1Common* %58, %struct.macroblockd* %59, i32 %66, i32 %68, %struct.BUFFER_SET* %8, i8 zeroext %2, i32 0, i32 0) #5
  br label %603

603:                                              ; preds = %596, %598, %589
  %604 = phi i32 [ %583, %589 ], [ %248, %598 ], [ %248, %596 ]
  %605 = load i32, i32* %7, align 4
  %606 = add nsw i32 %605, %604
  store i32 %606, i32* %7, align 4
  br i1 %76, label %607, label %608

607:                                              ; preds = %603
  call void @av1_enc_build_inter_predictor(%struct.AV1Common* %58, %struct.macroblockd* %59, i32 %66, i32 %68, %struct.BUFFER_SET* %8, i8 zeroext %2, i32 1, i32 2) #5
  br label %608

608:                                              ; preds = %579, %603, %607, %580
  %609 = phi i32 [ -1, %579 ], [ -1, %580 ], [ 0, %607 ], [ 0, %603 ]
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %253) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %251) #5
  br label %610

610:                                              ; preds = %244, %608
  %611 = phi i32 [ %609, %608 ], [ -1, %244 ]
  call void @llvm.lifetime.end.p0i8(i64 2048, i8* nonnull %64) #5
  call void @llvm.lifetime.end.p0i8(i64 2048, i8* nonnull %63) #5
  ret i32 %611

612:                                              ; preds = %56
  %613 = getelementptr inbounds %struct.BUFFER_SET, %struct.BUFFER_SET* %15, i64 0, i32 0, i64 1
  %614 = bitcast i8** %613 to i64*
  %615 = load i64, i64* %614, align 8
  %616 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 2, i32 4, i64 1, i32 3
  %617 = bitcast %struct.buf_2d* %616 to i64*
  store i64 %615, i64* %617, align 16
  %618 = getelementptr inbounds %struct.BUFFER_SET, %struct.BUFFER_SET* %15, i64 0, i32 1, i64 1
  %619 = load i32, i32* %618, align 4
  %620 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 2, i32 4, i64 1, i32 3, i32 4
  store i32 %619, i32* %620, align 8
  %621 = getelementptr inbounds %struct.BUFFER_SET, %struct.BUFFER_SET* %15, i64 0, i32 0, i64 2
  %622 = bitcast i8** %621 to i64*
  %623 = load i64, i64* %622, align 8
  %624 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 2, i32 4, i64 2, i32 3
  %625 = bitcast %struct.buf_2d* %624 to i64*
  store i64 %623, i64* %625, align 16
  %626 = getelementptr inbounds %struct.BUFFER_SET, %struct.BUFFER_SET* %15, i64 0, i32 1, i64 2
  %627 = load i32, i32* %626, align 8
  %628 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 2, i32 4, i64 2, i32 3, i32 4
  store i32 %627, i32* %628, align 8
  br label %86
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

declare void @av1_enc_build_inter_predictor(%struct.AV1Common*, %struct.macroblockd*, i32, i32, %struct.BUFFER_SET*, i8 zeroext, i32, i32) local_unnamed_addr #2

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #1

; Function Attrs: nounwind ssp uwtable
define hidden i32 @av1_compound_type_rd(%struct.AV1_COMP*, %struct.macroblock*, %struct.HandleInterModeArgs* nocapture, i8 zeroext, %union.int_mv*, i32, i32, %struct.BUFFER_SET*, %struct.BUFFER_SET* nocapture readonly, %struct.CompoundTypeRdBuffers* nocapture readonly, i32* nocapture, i64* nocapture, %struct.RD_STATS* nocapture, i64, i64, i32* nocapture, i64) local_unnamed_addr #0 {
  %18 = alloca %struct.BUFFER_SET, align 8
  %19 = alloca %struct.BUFFER_SET, align 8
  %20 = alloca i32, align 4
  %21 = alloca i32, align 4
  %22 = alloca i64, align 8
  %23 = alloca i64, align 8
  %24 = alloca i32, align 4
  %25 = alloca i64, align 8
  %26 = alloca %struct.RD_STATS, align 8
  %27 = alloca %struct.BUFFER_SET, align 8
  %28 = alloca [11 x i8], align 8
  %29 = alloca [1 x i8*], align 8
  %30 = alloca [1 x i8*], align 8
  %31 = alloca [1 x i32], align 4
  %32 = alloca <4 x i32>, align 16
  %33 = alloca [4 x i64], align 16
  %34 = alloca [4 x i32], align 16
  %35 = alloca [4 x i32], align 16
  %36 = alloca [4 x i32], align 16
  %37 = alloca [4 x i64], align 16
  %38 = alloca i32, align 4
  %39 = bitcast i32* %38 to [4 x i8]*
  %40 = alloca i32, align 4
  %41 = alloca i32, align 4
  %42 = alloca i64, align 8
  %43 = alloca i64, align 8
  %44 = alloca %struct.RD_STATS, align 8
  %45 = alloca %struct.InterPredParams, align 8
  %46 = alloca %struct.RD_STATS, align 8
  %47 = alloca %struct.RD_STATS, align 8
  %48 = alloca %struct.RD_STATS, align 8
  %49 = alloca %struct.RD_STATS, align 8
  %50 = alloca %struct.RD_STATS, align 8
  %51 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8
  %52 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 2
  %53 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 2, i32 6
  %54 = load %struct.MB_MODE_INFO**, %struct.MB_MODE_INFO*** %53, align 8
  %55 = load %struct.MB_MODE_INFO*, %struct.MB_MODE_INFO** %54, align 8
  %56 = getelementptr inbounds %struct.MB_MODE_INFO, %struct.MB_MODE_INFO* %55, i64 0, i32 2
  %57 = load i8, i8* %56, align 2
  %58 = getelementptr inbounds %struct.MB_MODE_INFO, %struct.MB_MODE_INFO* %55, i64 0, i32 6, i64 0
  %59 = getelementptr inbounds %struct.MB_MODE_INFO, %struct.MB_MODE_INFO* %55, i64 0, i32 6, i64 1
  %60 = load i8, i8* %59, align 1
  %61 = icmp sgt i8 %60, 0
  %62 = load i8, i8* %58, align 1
  br i1 %61, label %63, label %93

63:                                               ; preds = %17
  %64 = icmp slt i8 %62, 5
  %65 = icmp sgt i8 %60, 4
  %66 = and i1 %65, %64
  br i1 %66, label %89, label %67

67:                                               ; preds = %63
  switch i8 %62, label %89 [
    i8 1, label %68
    i8 5, label %71
    i8 2, label %75
    i8 3, label %79
    i8 6, label %81
  ]

68:                                               ; preds = %67
  %69 = add i8 %60, -2
  %70 = icmp ult i8 %69, 3
  br i1 %70, label %86, label %89

71:                                               ; preds = %67
  %72 = icmp eq i8 %60, 6
  %73 = select i1 %72, i8 7, i8 -1
  %74 = icmp eq i8 %60, 7
  br i1 %74, label %86, label %83

75:                                               ; preds = %67
  %76 = icmp eq i8 %60, 4
  %77 = select i1 %76, i8 5, i8 -1
  %78 = icmp eq i8 %60, 3
  br i1 %78, label %86, label %83

79:                                               ; preds = %67
  %80 = icmp eq i8 %60, 4
  br i1 %80, label %86, label %89

81:                                               ; preds = %67
  %82 = icmp eq i8 %60, 7
  br i1 %82, label %86, label %89

83:                                               ; preds = %75, %71
  %84 = phi i8 [ %73, %71 ], [ %77, %75 ]
  %85 = icmp sgt i8 %84, -1
  br i1 %85, label %86, label %89

86:                                               ; preds = %68, %83, %81, %79, %75, %71
  %87 = phi i8 [ %84, %83 ], [ 8, %81 ], [ 6, %79 ], [ 3, %71 ], [ 4, %75 ], [ %69, %68 ]
  %88 = add nuw nsw i8 %87, 20
  br label %93

89:                                               ; preds = %68, %83, %81, %79, %67, %63
  %90 = shl i8 %60, 2
  %91 = add i8 %90, -13
  %92 = add i8 %91, %62
  br label %93

93:                                               ; preds = %17, %86, %89
  %94 = phi i8 [ %88, %86 ], [ %92, %89 ], [ %62, %17 ]
  %95 = zext i8 %3 to i64
  %96 = getelementptr inbounds [22 x i8], [22 x i8]* @block_size_wide, i64 0, i64 %95
  %97 = load i8, i8* %96, align 1
  %98 = zext i8 %97 to i32
  %99 = load i32, i32* %10, align 4
  %100 = getelementptr inbounds [11 x i8], [11 x i8]* %28, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 11, i8* nonnull %100)
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %100, i8 -86, i64 11, i1 false)
  %101 = bitcast [1 x i8*]* %29 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %101) #5
  %102 = getelementptr inbounds [1 x i8*], [1 x i8*]* %29, i64 0, i64 0
  %103 = bitcast %struct.CompoundTypeRdBuffers* %9 to i64*
  %104 = load i64, i64* %103, align 8
  %105 = bitcast [1 x i8*]* %29 to i64*
  store i64 %104, i64* %105, align 8
  %106 = bitcast [1 x i8*]* %30 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %106) #5
  %107 = getelementptr inbounds [1 x i8*], [1 x i8*]* %30, i64 0, i64 0
  %108 = getelementptr inbounds %struct.CompoundTypeRdBuffers, %struct.CompoundTypeRdBuffers* %9, i64 0, i32 1
  %109 = bitcast i8** %108 to i64*
  %110 = load i64, i64* %109, align 8
  %111 = bitcast [1 x i8*]* %30 to i64*
  store i64 %110, i64* %111, align 8
  %112 = bitcast [1 x i32]* %31 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %112) #5
  %113 = getelementptr inbounds [1 x i32], [1 x i32]* %31, i64 0, i64 0
  store i32 %98, i32* %113, align 4
  %114 = bitcast <4 x i32>* %32 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %114) #5
  %115 = getelementptr inbounds <4 x i32>, <4 x i32>* %32, i64 0, i64 0
  %116 = getelementptr inbounds <4 x i32>, <4 x i32>* %32, i64 0, i64 1
  %117 = getelementptr inbounds <4 x i32>, <4 x i32>* %32, i64 0, i64 2
  %118 = getelementptr inbounds <4 x i32>, <4 x i32>* %32, i64 0, i64 3
  %119 = bitcast [4 x i64]* %33 to i8*
  %120 = bitcast <4 x i32>* %32 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %120, i8 -86, i64 16, i1 false)
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %119) #5
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 16 %119, i8* align 16 bitcast ([4 x i64]* @__const.av1_compound_type_rd.comp_model_dist to i8*), i64 32, i1 false)
  %121 = bitcast [4 x i32]* %34 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %121) #5
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 16 %121, i8* align 16 bitcast ([4 x i32]* @__const.av1_compound_type_rd.comp_model_rate to i8*), i64 16, i1 false)
  %122 = bitcast [4 x i32]* %35 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %122) #5
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 16 %122, i8* align 16 bitcast ([4 x i32]* @__const.av1_compound_type_rd.comp_model_rate to i8*), i64 16, i1 false)
  %123 = bitcast [4 x i32]* %36 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %123) #5
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 16 %123, i8* align 16 bitcast ([4 x i32]* @__const.av1_compound_type_rd.comp_model_rate to i8*), i64 16, i1 false)
  %124 = bitcast [4 x i64]* %37 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %124) #5
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 16 %124, i8* align 16 bitcast ([4 x i64]* @__const.av1_compound_type_rd.comp_model_dist to i8*), i64 32, i1 false)
  %125 = getelementptr inbounds [4 x i32], [4 x i32]* %34, i64 0, i64 0
  %126 = getelementptr inbounds [4 x i32], [4 x i32]* %36, i64 0, i64 0
  %127 = getelementptr inbounds [4 x i32], [4 x i32]* %35, i64 0, i64 0
  %128 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 48
  %129 = load i32, i32* %128, align 16
  %130 = icmp sgt i32 %129, 0
  br i1 %130, label %131, label %298

131:                                              ; preds = %93
  %132 = getelementptr inbounds %struct.MB_MODE_INFO, %struct.MB_MODE_INFO* %55, i64 0, i32 8, i32 0
  %133 = load i32, i32* %132, align 4
  %134 = getelementptr inbounds %struct.MB_MODE_INFO, %struct.MB_MODE_INFO* %55, i64 0, i32 0
  %135 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 2, i32 46
  %136 = getelementptr inbounds %struct.MB_MODE_INFO, %struct.MB_MODE_INFO* %55, i64 0, i32 5, i64 0, i32 0
  %137 = getelementptr inbounds %struct.MB_MODE_INFO, %struct.MB_MODE_INFO* %55, i64 0, i32 5, i64 1, i32 0
  %138 = sext i32 %129 to i64
  %139 = sext i8 %62 to i64
  %140 = sext i8 %60 to i64
  br label %141

141:                                              ; preds = %295, %131
  %142 = phi i64 [ 0, %131 ], [ %296, %295 ]
  %143 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 47, i64 %142, i32 8, i32 0
  %144 = load i32, i32* %143, align 4
  %145 = icmp eq i32 %144, %133
  br i1 %145, label %146, label %295

146:                                              ; preds = %141
  %147 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 47, i64 %142, i32 6, i64 0
  %148 = load i8, i8* %147, align 1
  %149 = icmp eq i8 %148, %62
  br i1 %149, label %154, label %295

150:                                              ; preds = %177
  %151 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 47, i64 %142, i32 6, i64 1
  %152 = load i8, i8* %151, align 1
  %153 = icmp eq i8 %152, %60
  br i1 %153, label %272, label %295

154:                                              ; preds = %146
  %155 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 47, i64 %142, i32 5, i64 0, i32 0
  %156 = load i32, i32* %155, align 4
  %157 = load i32, i32* %136, align 4
  %158 = icmp eq i32 %156, %157
  br i1 %158, label %159, label %295

159:                                              ; preds = %154
  %160 = load i8, i8* %56, align 2
  %161 = load i8, i8* %134, align 8
  %162 = zext i8 %161 to i64
  %163 = getelementptr inbounds [22 x i8], [22 x i8]* @block_size_wide, i64 0, i64 %162
  %164 = load i8, i8* %163, align 1
  %165 = getelementptr inbounds [22 x i8], [22 x i8]* @block_size_high, i64 0, i64 %162
  %166 = load i8, i8* %165, align 1
  switch i8 %160, label %177 [
    i8 15, label %167
    i8 23, label %167
  ]

167:                                              ; preds = %159, %159
  %168 = load %struct.WarpedMotionParams*, %struct.WarpedMotionParams** %135, align 8
  %169 = getelementptr inbounds %struct.WarpedMotionParams, %struct.WarpedMotionParams* %168, i64 %139, i32 5
  %170 = load i8, i8* %169, align 4
  %171 = icmp ult i8 %164, %166
  %172 = select i1 %171, i8 %164, i8 %166
  %173 = icmp ugt i8 %172, 7
  %174 = icmp ugt i8 %170, 1
  %175 = and i1 %173, %174
  %176 = zext i1 %175 to i32
  br label %177

177:                                              ; preds = %167, %159
  %178 = phi i32 [ %176, %167 ], [ 0, %159 ]
  %179 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 47, i64 %142, i32 10, i64 0
  %180 = load i32, i32* %179, align 4
  %181 = icmp eq i32 %178, %180
  br i1 %181, label %150, label %295

182:                                              ; preds = %293
  %183 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 47, i64 %294, i32 7
  %184 = load i8, i8* %183, align 2
  switch i8 %184, label %189 [
    i8 16, label %185
    i8 24, label %185
    i8 19, label %185
    i8 20, label %185
    i8 21, label %185
    i8 22, label %185
  ]

185:                                              ; preds = %293, %293, %293, %293, %293, %293, %182, %182, %182, %182, %182, %182
  %186 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 40, i32 6, i32 29
  %187 = load i32, i32* %186, align 4
  %188 = icmp eq i32 %187, 0
  br i1 %188, label %190, label %189

189:                                              ; preds = %185, %182
  br label %190

190:                                              ; preds = %189, %185
  %191 = phi i32 [ 0, %185 ], [ 1, %189 ]
  %192 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 40, i32 6, i32 37
  %193 = load i32, i32* %192, align 4
  %194 = icmp eq i32 %193, 0
  br i1 %194, label %195, label %212

195:                                              ; preds = %190
  %196 = add i8 %160, -16
  %197 = icmp ult i8 %196, 9
  br i1 %197, label %203, label %198

198:                                              ; preds = %203, %195
  %199 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 47, i64 %294, i32 7
  %200 = load i8, i8* %199, align 2
  %201 = add i8 %200, -16
  %202 = icmp ult i8 %201, 9
  br i1 %202, label %208, label %212

203:                                              ; preds = %195
  %204 = zext i8 %196 to i16
  %205 = lshr i16 377, %204
  %206 = and i16 %205, 1
  %207 = icmp eq i16 %206, 0
  br i1 %207, label %198, label %212

208:                                              ; preds = %198
  %209 = sext i8 %201 to i64
  %210 = getelementptr inbounds [9 x i32], [9 x i32]* @switch.table.av1_compound_type_rd, i64 0, i64 %209
  %211 = load i32, i32* %210, align 4
  br label %212

212:                                              ; preds = %203, %190, %198, %208
  %213 = phi i32 [ %211, %208 ], [ 1, %198 ], [ 1, %190 ], [ 0, %203 ]
  %214 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 47, i64 %294, i32 0, i64 0
  %215 = load i32, i32* %214, align 4
  store i32 %215, i32* %125, align 16
  %216 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 47, i64 %294, i32 1, i64 0
  %217 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 47, i64 %294, i32 2, i64 0
  %218 = load i32, i32* %217, align 4
  store i32 %218, i32* %126, align 16
  %219 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 47, i64 %294, i32 3, i64 0
  %220 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 47, i64 %294, i32 4, i64 0
  %221 = load i32, i32* %220, align 4
  store i32 %221, i32* %127, align 16
  %222 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 47, i64 %294, i32 0, i64 1
  %223 = load i32, i32* %222, align 4
  %224 = getelementptr inbounds [4 x i32], [4 x i32]* %34, i64 0, i64 1
  store i32 %223, i32* %224, align 4
  %225 = bitcast i64* %216 to <2 x i64>*
  %226 = load <2 x i64>, <2 x i64>* %225, align 8
  %227 = bitcast [4 x i64]* %33 to <2 x i64>*
  store <2 x i64> %226, <2 x i64>* %227, align 16
  %228 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 47, i64 %294, i32 2, i64 1
  %229 = load i32, i32* %228, align 4
  %230 = getelementptr inbounds [4 x i32], [4 x i32]* %36, i64 0, i64 1
  store i32 %229, i32* %230, align 4
  %231 = bitcast i64* %219 to <2 x i64>*
  %232 = load <2 x i64>, <2 x i64>* %231, align 8
  %233 = bitcast [4 x i64]* %37 to <2 x i64>*
  store <2 x i64> %232, <2 x i64>* %233, align 16
  %234 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 47, i64 %294, i32 4, i64 1
  %235 = load i32, i32* %234, align 4
  %236 = getelementptr inbounds [4 x i32], [4 x i32]* %35, i64 0, i64 1
  store i32 %235, i32* %236, align 4
  %237 = icmp eq i32 %191, 0
  br i1 %237, label %254, label %238

238:                                              ; preds = %212
  %239 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 47, i64 %294, i32 0, i64 2
  %240 = load i32, i32* %239, align 4
  %241 = getelementptr inbounds [4 x i32], [4 x i32]* %34, i64 0, i64 2
  store i32 %240, i32* %241, align 8
  %242 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 47, i64 %294, i32 1, i64 2
  %243 = load i64, i64* %242, align 8
  %244 = getelementptr inbounds [4 x i64], [4 x i64]* %33, i64 0, i64 2
  store i64 %243, i64* %244, align 16
  %245 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 47, i64 %294, i32 2, i64 2
  %246 = load i32, i32* %245, align 4
  %247 = getelementptr inbounds [4 x i32], [4 x i32]* %36, i64 0, i64 2
  store i32 %246, i32* %247, align 8
  %248 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 47, i64 %294, i32 3, i64 2
  %249 = load i64, i64* %248, align 8
  %250 = getelementptr inbounds [4 x i64], [4 x i64]* %37, i64 0, i64 2
  store i64 %249, i64* %250, align 16
  %251 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 47, i64 %294, i32 4, i64 2
  %252 = load i32, i32* %251, align 4
  %253 = getelementptr inbounds [4 x i32], [4 x i32]* %35, i64 0, i64 2
  store i32 %252, i32* %253, align 8
  br label %254

254:                                              ; preds = %238, %212
  %255 = icmp eq i32 %213, 0
  br i1 %255, label %298, label %256

256:                                              ; preds = %254
  %257 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 47, i64 %294, i32 0, i64 3
  %258 = load i32, i32* %257, align 4
  %259 = getelementptr inbounds [4 x i32], [4 x i32]* %34, i64 0, i64 3
  store i32 %258, i32* %259, align 4
  %260 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 47, i64 %294, i32 1, i64 3
  %261 = load i64, i64* %260, align 8
  %262 = getelementptr inbounds [4 x i64], [4 x i64]* %33, i64 0, i64 3
  store i64 %261, i64* %262, align 8
  %263 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 47, i64 %294, i32 2, i64 3
  %264 = load i32, i32* %263, align 4
  %265 = getelementptr inbounds [4 x i32], [4 x i32]* %36, i64 0, i64 3
  store i32 %264, i32* %265, align 4
  %266 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 47, i64 %294, i32 3, i64 3
  %267 = load i64, i64* %266, align 8
  %268 = getelementptr inbounds [4 x i64], [4 x i64]* %37, i64 0, i64 3
  store i64 %267, i64* %268, align 8
  %269 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 47, i64 %294, i32 4, i64 3
  %270 = load i32, i32* %269, align 4
  %271 = getelementptr inbounds [4 x i32], [4 x i32]* %35, i64 0, i64 3
  store i32 %270, i32* %271, align 4
  br label %298

272:                                              ; preds = %150
  %273 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 47, i64 %142, i32 5, i64 1, i32 0
  %274 = load i32, i32* %273, align 4
  %275 = load i32, i32* %137, align 4
  %276 = icmp eq i32 %274, %275
  br i1 %276, label %277, label %295

277:                                              ; preds = %272
  switch i8 %160, label %288 [
    i8 15, label %278
    i8 23, label %278
  ]

278:                                              ; preds = %277, %277
  %279 = load %struct.WarpedMotionParams*, %struct.WarpedMotionParams** %135, align 8
  %280 = getelementptr inbounds %struct.WarpedMotionParams, %struct.WarpedMotionParams* %279, i64 %140, i32 5
  %281 = load i8, i8* %280, align 4
  %282 = icmp ult i8 %164, %166
  %283 = select i1 %282, i8 %164, i8 %166
  %284 = icmp ugt i8 %283, 7
  %285 = icmp ugt i8 %281, 1
  %286 = and i1 %284, %285
  %287 = zext i1 %286 to i32
  br label %288

288:                                              ; preds = %278, %277
  %289 = phi i32 [ %287, %278 ], [ 0, %277 ]
  %290 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 47, i64 %142, i32 10, i64 1
  %291 = load i32, i32* %290, align 4
  %292 = icmp eq i32 %289, %291
  br i1 %292, label %293, label %295

293:                                              ; preds = %288
  %294 = and i64 %142, 4294967295
  switch i8 %160, label %182 [
    i8 16, label %185
    i8 24, label %185
    i8 19, label %185
    i8 20, label %185
    i8 21, label %185
    i8 22, label %185
  ]

295:                                              ; preds = %288, %272, %177, %154, %150, %146, %141
  %296 = add nuw nsw i64 %142, 1
  %297 = icmp eq i64 %296, %138
  br i1 %297, label %298, label %141

298:                                              ; preds = %295, %254, %256, %93
  %299 = phi i64 [ 0, %93 ], [ %142, %256 ], [ %142, %254 ], [ 0, %295 ]
  %300 = phi i32 [ 0, %93 ], [ 1, %256 ], [ 1, %254 ], [ 0, %295 ]
  %301 = getelementptr inbounds %union.int_mv, %union.int_mv* %4, i64 0, i32 0
  %302 = load i32, i32* %301, align 4
  %303 = getelementptr inbounds %union.int_mv, %union.int_mv* %4, i64 1, i32 0
  %304 = load i32, i32* %303, align 4
  store i64 9223372036854775807, i64* %11, align 8
  %305 = bitcast i32* %38 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %305) #5
  store i32 50462976, i32* %38, align 4
  %306 = and i32 %5, 1
  %307 = and i32 %5, 2
  %308 = icmp eq i32 %307, 0
  br i1 %308, label %320, label %309

309:                                              ; preds = %298
  %310 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 35
  %311 = load %struct.SequenceHeader*, %struct.SequenceHeader** %310, align 16
  %312 = getelementptr inbounds %struct.SequenceHeader, %struct.SequenceHeader* %311, i64 0, i32 10, i32 2
  %313 = load i32, i32* %312, align 8
  %314 = icmp eq i32 %313, 1
  br i1 %314, label %315, label %320

315:                                              ; preds = %309
  %316 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 40, i32 6, i32 30
  %317 = load i8, i8* %316, align 4
  %318 = icmp ne i8 %317, 2
  %319 = zext i1 %318 to i32
  br label %320

320:                                              ; preds = %315, %309, %298
  %321 = phi i32 [ 0, %309 ], [ 0, %298 ], [ %319, %315 ]
  %322 = getelementptr inbounds [22 x i8], [22 x i8]* @block_size_high, i64 0, i64 %95
  %323 = getelementptr inbounds [22 x %struct.wedge_params_type], [22 x %struct.wedge_params_type]* @av1_wedge_params_lookup, i64 0, i64 %95, i32 0
  %324 = icmp eq i32 %306, 0
  br i1 %324, label %331, label %325

325:                                              ; preds = %320
  %326 = load i8, i8* %322, align 1
  %327 = icmp ult i8 %97, %326
  %328 = select i1 %327, i8 %97, i8 %326
  %329 = icmp ugt i8 %328, 7
  br i1 %329, label %330, label %331

330:                                              ; preds = %325
  store i8 0, i8* %305, align 4
  br label %331

331:                                              ; preds = %330, %325, %320
  %332 = phi i32 [ 1, %330 ], [ 0, %325 ], [ 0, %320 ]
  %333 = icmp eq i32 %321, 0
  br i1 %333, label %387, label %378

334:                                              ; preds = %387
  %335 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 40, i32 6, i32 26
  %336 = load i32, i32* %335, align 4
  %337 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 60
  %338 = load i32, i32* %337, align 4
  %339 = icmp ugt i32 %338, %336
  br i1 %339, label %340, label %343

340:                                              ; preds = %334
  %341 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 9, i32 20, i32 4
  %342 = load i8, i8* %341, align 1, !range !2
  br label %343

343:                                              ; preds = %340, %334
  %344 = phi i8 [ 0, %334 ], [ %342, %340 ]
  %345 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 9, i32 20, i32 3
  %346 = load i8, i8* %345, align 1, !range !2
  %347 = and i32 %5, 4
  %348 = icmp eq i32 %347, 0
  br i1 %348, label %363, label %349

349:                                              ; preds = %343
  %350 = load i8, i8* %322, align 1
  %351 = icmp ult i8 %97, %350
  %352 = select i1 %351, i8 %97, i8 %350
  %353 = icmp ugt i8 %352, 7
  br i1 %353, label %354, label %363

354:                                              ; preds = %349
  %355 = load i32, i32* %323, align 16
  %356 = icmp slt i32 %355, 1
  %357 = icmp eq i8 %344, 0
  %358 = or i1 %357, %356
  br i1 %358, label %363, label %359

359:                                              ; preds = %354
  %360 = add nuw nsw i32 %388, 1
  %361 = sext i32 %388 to i64
  %362 = getelementptr inbounds i8, i8* %305, i64 %361
  store i8 2, i8* %362, align 1
  br label %363

363:                                              ; preds = %359, %354, %349, %343
  %364 = phi i32 [ %360, %359 ], [ %388, %354 ], [ %388, %343 ], [ %388, %349 ]
  %365 = and i32 %5, 8
  %366 = icmp eq i32 %365, 0
  br i1 %366, label %390, label %367

367:                                              ; preds = %363
  %368 = load i8, i8* %322, align 1
  %369 = icmp ult i8 %97, %368
  %370 = select i1 %369, i8 %97, i8 %368
  %371 = icmp ult i8 %370, 8
  %372 = icmp eq i8 %346, 0
  %373 = or i1 %372, %371
  br i1 %373, label %390, label %374

374:                                              ; preds = %367
  %375 = add nuw nsw i32 %364, 1
  %376 = sext i32 %364 to i64
  %377 = getelementptr inbounds i8, i8* %305, i64 %376
  store i8 3, i8* %377, align 1
  br label %390

378:                                              ; preds = %331
  %379 = load i8, i8* %322, align 1
  %380 = icmp ult i8 %97, %379
  %381 = select i1 %380, i8 %97, i8 %379
  %382 = icmp ugt i8 %381, 7
  br i1 %382, label %383, label %387

383:                                              ; preds = %378
  %384 = add nuw nsw i32 %332, 1
  %385 = zext i32 %332 to i64
  %386 = getelementptr inbounds i8, i8* %305, i64 %385
  store i8 1, i8* %386, align 1
  br label %387

387:                                              ; preds = %383, %378, %331
  %388 = phi i32 [ %384, %383 ], [ %332, %378 ], [ %332, %331 ]
  %389 = icmp eq i32 %6, 0
  br i1 %389, label %390, label %334

390:                                              ; preds = %363, %367, %374, %387
  %391 = phi i32 [ %388, %387 ], [ %375, %374 ], [ %364, %367 ], [ %364, %363 ]
  %392 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 2, i32 12
  %393 = load %struct.MB_MODE_INFO*, %struct.MB_MODE_INFO** %392, align 16
  %394 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 2, i32 11
  %395 = load %struct.MB_MODE_INFO*, %struct.MB_MODE_INFO** %394, align 8
  %396 = icmp eq %struct.MB_MODE_INFO* %393, null
  br i1 %396, label %412, label %397

397:                                              ; preds = %390
  %398 = getelementptr inbounds %struct.MB_MODE_INFO, %struct.MB_MODE_INFO* %393, i64 0, i32 6, i64 1
  %399 = load i8, i8* %398, align 1
  %400 = icmp slt i8 %399, 1
  br i1 %400, label %407, label %401

401:                                              ; preds = %397
  %402 = getelementptr inbounds %struct.MB_MODE_INFO, %struct.MB_MODE_INFO* %393, i64 0, i32 28
  %403 = load i16, i16* %402, align 1
  %404 = lshr i16 %403, 8
  %405 = and i16 %404, 1
  %406 = zext i16 %405 to i32
  br label %412

407:                                              ; preds = %397
  %408 = getelementptr inbounds %struct.MB_MODE_INFO, %struct.MB_MODE_INFO* %393, i64 0, i32 6, i64 0
  %409 = load i8, i8* %408, align 8
  %410 = icmp eq i8 %409, 7
  %411 = select i1 %410, i32 3, i32 0
  br label %412

412:                                              ; preds = %407, %401, %390
  %413 = phi i32 [ %406, %401 ], [ 0, %390 ], [ %411, %407 ]
  %414 = icmp eq %struct.MB_MODE_INFO* %395, null
  br i1 %414, label %430, label %415

415:                                              ; preds = %412
  %416 = getelementptr inbounds %struct.MB_MODE_INFO, %struct.MB_MODE_INFO* %395, i64 0, i32 6, i64 1
  %417 = load i8, i8* %416, align 1
  %418 = icmp slt i8 %417, 1
  br i1 %418, label %425, label %419

419:                                              ; preds = %415
  %420 = getelementptr inbounds %struct.MB_MODE_INFO, %struct.MB_MODE_INFO* %395, i64 0, i32 28
  %421 = load i16, i16* %420, align 1
  %422 = lshr i16 %421, 8
  %423 = and i16 %422, 1
  %424 = zext i16 %423 to i32
  br label %430

425:                                              ; preds = %415
  %426 = getelementptr inbounds %struct.MB_MODE_INFO, %struct.MB_MODE_INFO* %395, i64 0, i32 6, i64 0
  %427 = load i8, i8* %426, align 8
  %428 = icmp eq i8 %427, 7
  %429 = select i1 %428, i32 3, i32 0
  br label %430

430:                                              ; preds = %412, %419, %425
  %431 = phi i32 [ %424, %419 ], [ 0, %412 ], [ %429, %425 ]
  %432 = add nuw nsw i32 %431, %413
  %433 = icmp ult i32 %432, 5
  %434 = select i1 %433, i32 %432, i32 5
  %435 = load %struct.MB_MODE_INFO**, %struct.MB_MODE_INFO*** %53, align 8
  %436 = load %struct.MB_MODE_INFO*, %struct.MB_MODE_INFO** %435, align 8
  %437 = getelementptr inbounds %struct.MB_MODE_INFO, %struct.MB_MODE_INFO* %436, i64 0, i32 6, i64 0
  %438 = load i8, i8* %437, align 8
  %439 = add i8 %438, -1
  %440 = icmp ult i8 %439, 8
  br i1 %440, label %441, label %451

441:                                              ; preds = %430
  %442 = sext i8 %438 to i64
  %443 = add nsw i64 %442, -1
  %444 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 13, i64 %443
  %445 = load i32, i32* %444, align 4
  %446 = icmp eq i32 %445, -1
  br i1 %446, label %451, label %447

447:                                              ; preds = %441
  %448 = sext i32 %445 to i64
  %449 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 16, i64 %448
  %450 = load %struct.RefCntBuffer*, %struct.RefCntBuffer** %449, align 8
  br label %451

451:                                              ; preds = %447, %441, %430
  %452 = phi %struct.RefCntBuffer* [ %450, %447 ], [ null, %441 ], [ null, %430 ]
  %453 = getelementptr inbounds %struct.MB_MODE_INFO, %struct.MB_MODE_INFO* %436, i64 0, i32 6, i64 1
  %454 = load i8, i8* %453, align 1
  %455 = add i8 %454, -1
  %456 = icmp ult i8 %455, 8
  br i1 %456, label %457, label %467

457:                                              ; preds = %451
  %458 = sext i8 %454 to i64
  %459 = add nsw i64 %458, -1
  %460 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 13, i64 %459
  %461 = load i32, i32* %460, align 4
  %462 = icmp eq i32 %461, -1
  br i1 %462, label %467, label %463

463:                                              ; preds = %457
  %464 = sext i32 %461 to i64
  %465 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 16, i64 %464
  %466 = load %struct.RefCntBuffer*, %struct.RefCntBuffer** %465, align 8
  br label %467

467:                                              ; preds = %463, %457, %451
  %468 = phi %struct.RefCntBuffer* [ %466, %463 ], [ null, %457 ], [ null, %451 ]
  %469 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 12
  %470 = load %struct.RefCntBuffer*, %struct.RefCntBuffer** %469, align 16
  %471 = getelementptr inbounds %struct.RefCntBuffer, %struct.RefCntBuffer* %470, i64 0, i32 1
  %472 = load i32, i32* %471, align 4
  %473 = icmp eq %struct.RefCntBuffer* %452, null
  br i1 %473, label %477, label %474

474:                                              ; preds = %467
  %475 = getelementptr inbounds %struct.RefCntBuffer, %struct.RefCntBuffer* %452, i64 0, i32 1
  %476 = load i32, i32* %475, align 4
  br label %477

477:                                              ; preds = %474, %467
  %478 = phi i32 [ %476, %474 ], [ 0, %467 ]
  %479 = icmp eq %struct.RefCntBuffer* %468, null
  br i1 %479, label %483, label %480

480:                                              ; preds = %477
  %481 = getelementptr inbounds %struct.RefCntBuffer, %struct.RefCntBuffer* %468, i64 0, i32 1
  %482 = load i32, i32* %481, align 4
  br label %483

483:                                              ; preds = %480, %477
  %484 = phi i32 [ %482, %480 ], [ 0, %477 ]
  %485 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 35
  %486 = load %struct.SequenceHeader*, %struct.SequenceHeader** %485, align 16
  %487 = getelementptr inbounds %struct.SequenceHeader, %struct.SequenceHeader* %486, i64 0, i32 10, i32 0
  %488 = load i32, i32* %487, align 4
  %489 = icmp eq i32 %488, 0
  br i1 %489, label %509, label %490

490:                                              ; preds = %483
  %491 = getelementptr inbounds %struct.SequenceHeader, %struct.SequenceHeader* %486, i64 0, i32 10, i32 1
  %492 = load i32, i32* %491, align 4
  %493 = sub nsw i32 %484, %472
  %494 = shl i32 1, %492
  %495 = add nsw i32 %494, -1
  %496 = and i32 %495, %493
  %497 = and i32 %494, %493
  %498 = sub nsw i32 %496, %497
  %499 = icmp slt i32 %498, 0
  %500 = sub nsw i32 0, %498
  %501 = select i1 %499, i32 %500, i32 %498
  %502 = sub nsw i32 %472, %478
  %503 = and i32 %495, %502
  %504 = and i32 %494, %502
  %505 = sub nsw i32 %503, %504
  %506 = icmp slt i32 %505, 0
  %507 = sub nsw i32 0, %505
  %508 = select i1 %506, i32 %507, i32 %505
  br label %509

509:                                              ; preds = %490, %483
  %510 = phi i32 [ 0, %483 ], [ %501, %490 ]
  %511 = phi i32 [ 0, %483 ], [ %508, %490 ]
  %512 = icmp eq i32 %510, %511
  br i1 %396, label %528, label %513

513:                                              ; preds = %509
  %514 = getelementptr inbounds %struct.MB_MODE_INFO, %struct.MB_MODE_INFO* %393, i64 0, i32 6, i64 1
  %515 = load i8, i8* %514, align 1
  %516 = icmp slt i8 %515, 1
  br i1 %516, label %523, label %517

517:                                              ; preds = %513
  %518 = getelementptr inbounds %struct.MB_MODE_INFO, %struct.MB_MODE_INFO* %393, i64 0, i32 28
  %519 = load i16, i16* %518, align 1
  %520 = lshr i16 %519, 9
  %521 = and i16 %520, 1
  %522 = zext i16 %521 to i64
  br label %528

523:                                              ; preds = %513
  %524 = getelementptr inbounds %struct.MB_MODE_INFO, %struct.MB_MODE_INFO* %393, i64 0, i32 6, i64 0
  %525 = load i8, i8* %524, align 8
  %526 = icmp eq i8 %525, 7
  %527 = zext i1 %526 to i64
  br label %528

528:                                              ; preds = %523, %517, %509
  %529 = phi i64 [ %522, %517 ], [ 0, %509 ], [ %527, %523 ]
  br i1 %414, label %545, label %530

530:                                              ; preds = %528
  %531 = getelementptr inbounds %struct.MB_MODE_INFO, %struct.MB_MODE_INFO* %395, i64 0, i32 6, i64 1
  %532 = load i8, i8* %531, align 1
  %533 = icmp slt i8 %532, 1
  br i1 %533, label %540, label %534

534:                                              ; preds = %530
  %535 = getelementptr inbounds %struct.MB_MODE_INFO, %struct.MB_MODE_INFO* %395, i64 0, i32 28
  %536 = load i16, i16* %535, align 1
  %537 = lshr i16 %536, 9
  %538 = and i16 %537, 1
  %539 = zext i16 %538 to i64
  br label %545

540:                                              ; preds = %530
  %541 = getelementptr inbounds %struct.MB_MODE_INFO, %struct.MB_MODE_INFO* %395, i64 0, i32 6, i64 0
  %542 = load i8, i8* %541, align 8
  %543 = icmp eq i8 %542, 7
  %544 = zext i1 %543 to i64
  br label %545

545:                                              ; preds = %528, %534, %540
  %546 = phi i64 [ %539, %534 ], [ 0, %528 ], [ %544, %540 ]
  %547 = select i1 %512, i64 3, i64 0
  %548 = add nuw nsw i64 %529, %547
  %549 = add nuw nsw i64 %548, %546
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %114, i8 0, i64 16, i1 false) #5
  br i1 %389, label %557, label %550

550:                                              ; preds = %545
  %551 = zext i32 %434 to i64
  %552 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 20, i32 34, i64 %551, i64 0
  %553 = bitcast i32* %552 to <2 x i32>*
  %554 = load <2 x i32>, <2 x i32>* %553, align 4
  %555 = extractelement <2 x i32> %554, i32 0
  store i32 %555, i32* %115, align 16
  store i32 %555, i32* %116, align 4
  %556 = extractelement <2 x i32> %554, i32 1
  store i32 %556, i32* %117, align 8
  store i32 %556, i32* %118, align 4
  br label %557

557:                                              ; preds = %545, %550
  %558 = phi <2 x i32> [ zeroinitializer, %545 ], [ %554, %550 ]
  %559 = shufflevector <2 x i32> %558, <2 x i32> undef, <4 x i32> <i32 0, i32 0, i32 1, i32 1>
  %560 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 20, i32 33, i64 %549, i64 1
  %561 = load i32, i32* %560, align 4
  %562 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 20, i32 33, i64 %549, i64 0
  %563 = load i32, i32* %562, align 4
  %564 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 20, i32 28, i64 %95, i64 0
  %565 = load i32, i32* %564, align 4
  %566 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 20, i32 28, i64 %95, i64 1
  %567 = load i32, i32* %566, align 4
  %568 = insertelement <4 x i32> undef, i32 %561, i32 0
  %569 = insertelement <4 x i32> %568, i32 %563, i32 1
  %570 = insertelement <4 x i32> %569, i32 %565, i32 2
  %571 = insertelement <4 x i32> %570, i32 %567, i32 3
  %572 = add nsw <4 x i32> %571, %559
  store <4 x i32> %572, <4 x i32>* %32, align 16
  %573 = getelementptr inbounds %struct.macroblockd, %struct.macroblockd* %52, i64 0, i32 0
  %574 = load i32, i32* %573, align 16
  %575 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 2, i32 1
  %576 = load i32, i32* %575, align 4
  %577 = icmp ne i32 %300, 0
  br i1 %577, label %578, label %628

578:                                              ; preds = %557
  %579 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 40, i32 6, i32 35
  %580 = load i32, i32* %579, align 4
  %581 = icmp eq i32 %580, 0
  br i1 %581, label %628, label %582

582:                                              ; preds = %578
  %583 = shl i64 %299, 32
  %584 = ashr exact i64 %583, 32
  %585 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 47, i64 %584, i32 11, i32 4
  %586 = load i8, i8* %585, align 1
  %587 = zext i8 %586 to i64
  %588 = getelementptr inbounds [4 x i32], [4 x i32]* %34, i64 0, i64 %587
  %589 = load i32, i32* %588, align 4
  %590 = icmp eq i32 %589, 2147483647
  br i1 %590, label %2419, label %591

591:                                              ; preds = %582
  %592 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 47, i64 %584, i32 11
  %593 = getelementptr inbounds %struct.MB_MODE_INFO, %struct.MB_MODE_INFO* %55, i64 0, i32 17, i32 4
  store i8 %586, i8* %593, align 1
  %594 = icmp ugt i8 %586, 1
  %595 = getelementptr inbounds %struct.MB_MODE_INFO, %struct.MB_MODE_INFO* %55, i64 0, i32 28
  %596 = zext i1 %594 to i16
  %597 = load i16, i16* %595, align 1
  %598 = shl nuw nsw i16 %596, 8
  %599 = and i16 %597, -769
  %600 = icmp ne i8 %586, 1
  %601 = zext i1 %600 to i16
  %602 = shl nuw nsw i16 %601, 9
  %603 = or i16 %602, %598
  %604 = or i16 %603, %599
  store i16 %604, i16* %595, align 1
  %605 = getelementptr inbounds %struct.MB_MODE_INFO, %struct.MB_MODE_INFO* %55, i64 0, i32 17
  %606 = bitcast %struct.INTERINTER_COMPOUND_DATA* %605 to i8*
  %607 = bitcast %struct.INTERINTER_COMPOUND_DATA* %592 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %606, i8* align 16 %607, i64 16, i1 false) #5
  %608 = getelementptr inbounds [4 x i32], [4 x i32]* %35, i64 0, i64 %587
  %609 = load i32, i32* %608, align 4
  %610 = load i32, i32* %10, align 4
  %611 = add i32 %609, %589
  %612 = add i32 %611, %610
  %613 = sext i32 %612 to i64
  %614 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 17
  %615 = load i32, i32* %614, align 8
  %616 = sext i32 %615 to i64
  %617 = mul nsw i64 %613, %616
  %618 = add nsw i64 %617, 256
  %619 = ashr i64 %618, 9
  %620 = getelementptr inbounds [4 x i64], [4 x i64]* %33, i64 0, i64 %587
  %621 = load i64, i64* %620, align 8
  %622 = shl i64 %621, 7
  %623 = add nsw i64 %619, %622
  store i64 %623, i64* %11, align 8
  %624 = load i32, i32* %301, align 4
  %625 = getelementptr inbounds %struct.MB_MODE_INFO, %struct.MB_MODE_INFO* %55, i64 0, i32 5, i64 0, i32 0
  store i32 %624, i32* %625, align 8
  %626 = load i32, i32* %303, align 4
  %627 = getelementptr inbounds %struct.MB_MODE_INFO, %struct.MB_MODE_INFO* %55, i64 0, i32 5, i64 1, i32 0
  store i32 %626, i32* %627, align 4
  br label %2419

628:                                              ; preds = %578, %557
  %629 = load i8, i8* %305, align 4
  %630 = icmp eq i8 %629, 0
  br i1 %630, label %641, label %631

631:                                              ; preds = %628
  %632 = bitcast %struct.BUFFER_SET* %19 to i8*
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %632)
  %633 = bitcast %struct.BUFFER_SET* %8 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %632, i8* align 1 %633, i64 40, i1 false)
  %634 = bitcast %struct.BUFFER_SET* %19 to i64*
  %635 = load i64, i64* %634, align 8
  %636 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 2, i32 4, i64 0, i32 3
  %637 = bitcast %struct.buf_2d* %636 to i64*
  store i64 %635, i64* %637, align 16
  %638 = getelementptr inbounds %struct.BUFFER_SET, %struct.BUFFER_SET* %19, i64 0, i32 1, i64 0
  %639 = load i32, i32* %638, align 8
  %640 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 2, i32 4, i64 0, i32 3, i32 4
  store i32 %639, i32* %640, align 8
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %632)
  br label %641

641:                                              ; preds = %628, %631
  %642 = icmp sgt i32 %391, 0
  br i1 %642, label %643, label %741

643:                                              ; preds = %641
  %644 = sext i8 %94 to i64
  %645 = getelementptr inbounds %struct.HandleInterModeArgs, %struct.HandleInterModeArgs* %2, i64 0, i32 18, i64 %644
  %646 = getelementptr inbounds %struct.MB_MODE_INFO, %struct.MB_MODE_INFO* %55, i64 0, i32 17, i32 4
  %647 = getelementptr inbounds %struct.MB_MODE_INFO, %struct.MB_MODE_INFO* %55, i64 0, i32 28
  %648 = getelementptr inbounds %struct.RD_STATS, %struct.RD_STATS* %12, i64 0, i32 0
  %649 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 17
  %650 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 40, i32 6, i32 37
  %651 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 40, i32 6, i32 14
  %652 = getelementptr inbounds %struct.CompoundTypeRdBuffers, %struct.CompoundTypeRdBuffers* %9, i64 0, i32 2
  %653 = getelementptr inbounds %struct.CompoundTypeRdBuffers, %struct.CompoundTypeRdBuffers* %9, i64 0, i32 3
  %654 = bitcast i32* %20 to i8*
  %655 = bitcast i32* %21 to i8*
  %656 = bitcast i64* %22 to i8*
  %657 = bitcast i64* %23 to i8*
  %658 = zext i8 %97 to i64
  %659 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 0, i64 0, i32 6, i32 0
  %660 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 0, i64 0, i32 6, i32 4
  %661 = bitcast i32* %24 to i8*
  %662 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 0
  %663 = getelementptr inbounds [22 x i8], [22 x i8]* @num_pels_log2_lookup, i64 0, i64 %95
  %664 = icmp ne i8 %57, 22
  %665 = bitcast i64* %25 to i8*
  %666 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 40, i32 6, i32 1
  %667 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 60
  %668 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 15
  %669 = icmp eq i64 %14, 9223372036854775807
  %670 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 40, i32 6, i32 29
  %671 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 40, i32 6, i32 13
  %672 = bitcast %struct.RD_STATS* %26 to i8*
  %673 = getelementptr inbounds [22 x i8], [22 x i8]* @max_txsize_rect_lookup, i64 0, i64 %95
  %674 = getelementptr inbounds %struct.RD_STATS, %struct.RD_STATS* %26, i64 0, i32 4
  %675 = getelementptr inbounds %struct.RD_STATS, %struct.RD_STATS* %26, i64 0, i32 0
  %676 = getelementptr inbounds %struct.RD_STATS, %struct.RD_STATS* %26, i64 0, i32 1
  %677 = getelementptr inbounds %struct.HandleInterModeArgs, %struct.HandleInterModeArgs* %2, i64 0, i32 17
  %678 = getelementptr inbounds %struct.MB_MODE_INFO, %struct.MB_MODE_INFO* %55, i64 0, i32 17, i32 3
  %679 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 2, i32 50
  %680 = bitcast %struct.RD_STATS* %49 to i8*
  %681 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 2, i32 4, i64 0, i32 1
  %682 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 2, i32 4, i64 0, i32 2
  %683 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 2, i32 20
  %684 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 2, i32 18
  %685 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 2, i32 40
  %686 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 2, i32 4, i64 0, i32 3, i32 0
  %687 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 2, i32 4, i64 0, i32 3, i32 4
  %688 = getelementptr inbounds %struct.RD_STATS, %struct.RD_STATS* %49, i64 0, i32 4
  %689 = getelementptr inbounds %struct.RD_STATS, %struct.RD_STATS* %49, i64 0, i32 0
  %690 = getelementptr inbounds %struct.RD_STATS, %struct.RD_STATS* %49, i64 0, i32 1
  %691 = getelementptr inbounds %struct.MB_MODE_INFO, %struct.MB_MODE_INFO* %55, i64 0, i32 5, i64 0, i32 0
  %692 = getelementptr inbounds %struct.MB_MODE_INFO, %struct.MB_MODE_INFO* %55, i64 0, i32 5, i64 1, i32 0
  %693 = getelementptr inbounds %struct.MB_MODE_INFO, %struct.MB_MODE_INFO* %55, i64 0, i32 0
  %694 = getelementptr inbounds %struct.MB_MODE_INFO, %struct.MB_MODE_INFO* %55, i64 0, i32 17, i32 1
  %695 = bitcast %struct.RD_STATS* %50 to i8*
  %696 = getelementptr inbounds %struct.RD_STATS, %struct.RD_STATS* %50, i64 0, i32 4
  %697 = getelementptr inbounds %struct.RD_STATS, %struct.RD_STATS* %50, i64 0, i32 0
  %698 = getelementptr inbounds %struct.RD_STATS, %struct.RD_STATS* %50, i64 0, i32 1
  %699 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 40, i32 6, i32 38
  %700 = icmp ne i8 %57, 24
  %701 = getelementptr inbounds %struct.HandleInterModeArgs, %struct.HandleInterModeArgs* %2, i64 0, i32 15
  %702 = getelementptr inbounds %struct.MB_MODE_INFO, %struct.MB_MODE_INFO* %55, i64 0, i32 17, i32 2
  %703 = bitcast %struct.RD_STATS* %47 to i8*
  %704 = getelementptr inbounds %struct.RD_STATS, %struct.RD_STATS* %47, i64 0, i32 4
  %705 = getelementptr inbounds %struct.RD_STATS, %struct.RD_STATS* %47, i64 0, i32 0
  %706 = getelementptr inbounds %struct.RD_STATS, %struct.RD_STATS* %47, i64 0, i32 1
  %707 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 40, i32 6, i32 39
  %708 = getelementptr inbounds %struct.HandleInterModeArgs, %struct.HandleInterModeArgs* %2, i64 0, i32 16
  %709 = bitcast %struct.RD_STATS* %48 to i8*
  %710 = getelementptr inbounds %struct.RD_STATS, %struct.RD_STATS* %48, i64 0, i32 4
  %711 = getelementptr inbounds %struct.RD_STATS, %struct.RD_STATS* %48, i64 0, i32 0
  %712 = getelementptr inbounds %struct.RD_STATS, %struct.RD_STATS* %48, i64 0, i32 1
  %713 = icmp eq i8 %57, 22
  %714 = bitcast %struct.InterPredParams* %45 to i8*
  %715 = getelementptr inbounds %struct.InterPredParams, %struct.InterPredParams* %45, i64 0, i32 3, i32 8
  %716 = getelementptr inbounds %struct.InterPredParams, %struct.InterPredParams* %45, i64 0, i32 3, i32 9
  %717 = getelementptr inbounds %struct.InterPredParams, %struct.InterPredParams* %45, i64 0, i32 3, i32 7
  %718 = bitcast %struct.RD_STATS* %46 to i8*
  %719 = getelementptr inbounds %struct.RD_STATS, %struct.RD_STATS* %46, i64 0, i32 4
  %720 = getelementptr inbounds %struct.RD_STATS, %struct.RD_STATS* %46, i64 0, i32 0
  %721 = getelementptr inbounds %struct.RD_STATS, %struct.RD_STATS* %46, i64 0, i32 1
  %722 = bitcast i32* %40 to i8*
  %723 = bitcast i32* %41 to i8*
  %724 = bitcast i64* %42 to i8*
  %725 = bitcast i64* %43 to i8*
  %726 = bitcast %struct.RD_STATS* %44 to i8*
  %727 = getelementptr inbounds %struct.RD_STATS, %struct.RD_STATS* %44, i64 0, i32 4
  %728 = getelementptr inbounds %struct.RD_STATS, %struct.RD_STATS* %44, i64 0, i32 0
  %729 = getelementptr inbounds %struct.RD_STATS, %struct.RD_STATS* %44, i64 0, i32 1
  %730 = bitcast %struct.BUFFER_SET* %18 to i8*
  %731 = bitcast %struct.BUFFER_SET* %8 to i8*
  %732 = getelementptr inbounds %struct.MB_MODE_INFO, %struct.MB_MODE_INFO* %55, i64 0, i32 17
  %733 = bitcast %struct.INTERINTER_COMPOUND_DATA* %732 to i8*
  %734 = getelementptr inbounds i8, i8* %733, i64 12
  %735 = bitcast i8* %734 to i32*
  %736 = zext i32 %391 to i64
  %737 = bitcast %struct.BUFFER_SET* %18 to i64*
  %738 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 2, i32 4, i64 0, i32 3
  %739 = bitcast %struct.buf_2d* %738 to i64*
  %740 = getelementptr inbounds %struct.BUFFER_SET, %struct.BUFFER_SET* %18, i64 0, i32 1, i64 0
  br label %764

741:                                              ; preds = %2299, %641
  %742 = phi i32 [ %304, %641 ], [ %2300, %2299 ]
  %743 = phi i32 [ %302, %641 ], [ %2301, %2299 ]
  %744 = phi i32 [ %99, %641 ], [ %2302, %2299 ]
  %745 = phi i32 [ 0, %641 ], [ %2303, %2299 ]
  %746 = phi i32 [ -1431655766, %641 ], [ %2305, %2299 ]
  %747 = phi i8 [ 0, %641 ], [ %2306, %2299 ]
  %748 = icmp ugt i8 %747, 1
  %749 = getelementptr inbounds %struct.MB_MODE_INFO, %struct.MB_MODE_INFO* %55, i64 0, i32 28
  %750 = zext i1 %748 to i16
  %751 = load i16, i16* %749, align 1
  %752 = shl nuw nsw i16 %750, 8
  %753 = and i16 %751, -769
  %754 = icmp ne i8 %747, 1
  %755 = zext i1 %754 to i16
  %756 = shl nuw nsw i16 %755, 9
  %757 = or i16 %756, %752
  %758 = or i16 %757, %753
  store i16 %758, i16* %749, align 1
  %759 = getelementptr inbounds %struct.MB_MODE_INFO, %struct.MB_MODE_INFO* %55, i64 0, i32 17
  %760 = bitcast %struct.INTERINTER_COMPOUND_DATA* %759 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %760, i8* nonnull align 8 %100, i64 11, i1 false)
  %761 = getelementptr inbounds %struct.MB_MODE_INFO, %struct.MB_MODE_INFO* %55, i64 0, i32 17, i32 4
  store i8 %747, i8* %761, align 1
  %762 = getelementptr inbounds i8, i8* %760, i64 12
  %763 = bitcast i8* %762 to i32*
  store i32 %746, i32* %763, align 4
  switch i8 %57, label %2325 [
    i8 16, label %2311
    i8 24, label %2311
    i8 19, label %2311
    i8 20, label %2311
    i8 21, label %2311
    i8 22, label %2311
  ]

764:                                              ; preds = %2299, %643
  %765 = phi i64 [ 0, %643 ], [ %2309, %2299 ]
  %766 = phi i64 [ %13, %643 ], [ %2308, %2299 ]
  %767 = phi i32 [ 1, %643 ], [ %2307, %2299 ]
  %768 = phi i8 [ 0, %643 ], [ %2306, %2299 ]
  %769 = phi i32 [ -1431655766, %643 ], [ %2305, %2299 ]
  %770 = phi i64 [ 9223372036854775807, %643 ], [ %2304, %2299 ]
  %771 = phi i32 [ 0, %643 ], [ %2303, %2299 ]
  %772 = phi i32 [ %99, %643 ], [ %2302, %2299 ]
  %773 = phi i32 [ %302, %643 ], [ %2301, %2299 ]
  %774 = phi i32 [ %304, %643 ], [ %2300, %2299 ]
  %775 = getelementptr inbounds [4 x i8], [4 x i8]* %39, i64 0, i64 %765
  %776 = load i8, i8* %775, align 1
  %777 = load i32, i32* %645, align 4
  %778 = icmp eq i32 %777, 0
  %779 = icmp eq i8 %776, 2
  %780 = and i1 %779, %778
  br i1 %780, label %2299, label %781

781:                                              ; preds = %764
  %782 = load i32, i32* %10, align 4
  %783 = load i64, i64* %11, align 8
  %784 = icmp slt i64 %766, %783
  %785 = select i1 %784, i64 %766, i64 %783
  store i8 %776, i8* %646, align 1
  %786 = icmp ugt i8 %776, 1
  %787 = zext i1 %786 to i16
  %788 = load i16, i16* %647, align 1
  %789 = shl nuw nsw i16 %787, 8
  %790 = and i16 %788, -769
  %791 = icmp ne i8 %776, 1
  %792 = zext i1 %791 to i16
  %793 = shl nuw nsw i16 %792, 9
  %794 = or i16 %793, %789
  %795 = or i16 %794, %790
  store i16 %795, i16* %647, align 1
  %796 = zext i8 %776 to i64
  %797 = getelementptr inbounds <4 x i32>, <4 x i32>* %32, i64 0, i64 %796
  %798 = load i32, i32* %797, align 4
  %799 = load i32, i32* %648, align 8
  %800 = add nsw i32 %799, %798
  %801 = sext i32 %800 to i64
  %802 = load i32, i32* %649, align 8
  %803 = sext i32 %802 to i64
  %804 = mul nsw i64 %801, %803
  %805 = add nsw i64 %804, 256
  %806 = ashr i64 %805, 9
  %807 = icmp slt i64 %806, %785
  br i1 %807, label %808, label %2299

808:                                              ; preds = %781
  %809 = icmp ult i8 %776, 2
  br i1 %809, label %810, label %1178

810:                                              ; preds = %808
  %811 = load i32, i32* %650, align 4
  %812 = icmp eq i32 %811, 2
  br i1 %812, label %813, label %1015

813:                                              ; preds = %810
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %722) #5
  store i32 -1431655766, i32* %40, align 4
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %723) #5
  store i32 -1431655766, i32* %41, align 4
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %724) #5
  store i64 -6148914691236517206, i64* %42, align 8
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %725) #5
  store i64 -6148914691236517206, i64* %43, align 8
  %814 = getelementptr inbounds [4 x i32], [4 x i32]* %34, i64 0, i64 %796
  %815 = load i32, i32* %814, align 4
  %816 = icmp eq i32 %815, 2147483647
  br i1 %816, label %817, label %989

817:                                              ; preds = %813
  call void @av1_enc_build_inter_predictor(%struct.AV1Common* %51, %struct.macroblockd* %52, i32 %574, i32 %576, %struct.BUFFER_SET* %7, i8 zeroext %3, i32 0, i32 0) #5
  %818 = icmp eq i8 %776, 0
  br i1 %818, label %819, label %820

819:                                              ; preds = %817
  store i32 1, i32* %15, align 4
  br label %820

820:                                              ; preds = %819, %817
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %726) #5
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %726, i8 -86, i64 40, i1 false)
  %821 = load i64, i64* %11, align 8
  %822 = icmp slt i64 %821, %16
  %823 = select i1 %822, i64 %821, i64 %16
  %824 = load i32, i32* %10, align 4
  %825 = add nsw i32 %824, %798
  %826 = load i32, i32* %666, align 4
  %827 = icmp eq i32 %826, 0
  br i1 %827, label %918, label %828

828:                                              ; preds = %820
  %829 = load i32, i32* %681, align 4
  %830 = load i32, i32* %682, align 8
  %831 = sext i32 %829 to i64
  %832 = sext i32 %830 to i64
  %833 = getelementptr inbounds [22 x [2 x [2 x i8]]], [22 x [2 x [2 x i8]]]* @ss_size_lookup, i64 0, i64 %95, i64 %831, i64 %832
  %834 = load i8, i8* %833, align 1
  %835 = zext i8 %834 to i64
  %836 = getelementptr inbounds [22 x i8], [22 x i8]* @block_size_high, i64 0, i64 %835
  %837 = load i8, i8* %836, align 1
  %838 = zext i8 %837 to i32
  %839 = getelementptr inbounds [22 x i8], [22 x i8]* @block_size_wide, i64 0, i64 %835
  %840 = load i8, i8* %839, align 1
  %841 = zext i8 %840 to i32
  %842 = load i32, i32* %683, align 16
  %843 = icmp sgt i32 %842, -1
  br i1 %843, label %852, label %844

844:                                              ; preds = %828
  %845 = add nsw i32 %830, 3
  %846 = ashr i32 %842, %845
  %847 = add nsw i32 %846, %838
  %848 = icmp slt i32 %847, 0
  %849 = icmp sgt i32 %847, %838
  %850 = select i1 %849, i32 %838, i32 %847
  %851 = select i1 %848, i32 0, i32 %850
  br label %852

852:                                              ; preds = %844, %828
  %853 = phi i32 [ %851, %844 ], [ %838, %828 ]
  %854 = load i32, i32* %684, align 8
  %855 = icmp sgt i32 %854, -1
  br i1 %855, label %864, label %856

856:                                              ; preds = %852
  %857 = add nsw i32 %829, 3
  %858 = ashr i32 %854, %857
  %859 = add nsw i32 %858, %841
  %860 = icmp slt i32 %859, 0
  %861 = icmp sgt i32 %859, %841
  %862 = select i1 %861, i32 %841, i32 %859
  %863 = select i1 %860, i32 0, i32 %862
  br label %864

864:                                              ; preds = %856, %852
  %865 = phi i32 [ %863, %856 ], [ %841, %852 ]
  %866 = load i32, i32* %685, align 16
  %867 = load i64 (i8*, i32, i8*, i32, i32, i32)*, i64 (i8*, i32, i8*, i32, i32, i32)** @aom_sse, align 8
  %868 = load i8*, i8** %659, align 8
  %869 = load i32, i32* %660, align 8
  %870 = load i8*, i8** %686, align 8
  %871 = load i32, i32* %687, align 8
  %872 = call i64 %867(i8* %868, i32 %869, i8* %870, i32 %871, i32 %865, i32 %853) #5
  %873 = shl i32 %866, 1
  %874 = add i32 %873, -16
  %875 = shl i32 1, %874
  %876 = ashr i32 %875, 1
  %877 = sext i32 %876 to i64
  %878 = add nsw i64 %872, %877
  %879 = zext i32 %874 to i64
  %880 = ashr i64 %878, %879
  %881 = sext i32 %825 to i64
  %882 = load i32, i32* %649, align 8
  %883 = sext i32 %882 to i64
  %884 = mul nsw i64 %883, %881
  %885 = add nsw i64 %884, 256
  %886 = ashr i64 %885, 9
  %887 = shl i64 %880, 11
  %888 = add nsw i64 %886, %887
  %889 = load i32, i32* %666, align 4
  %890 = sext i32 %889 to i64
  %891 = load i32, i32* %667, align 4
  %892 = load i8, i8* %663, align 1
  %893 = zext i8 %892 to i32
  %894 = add nuw nsw i32 %893, 7
  %895 = shl i32 %891, %894
  %896 = zext i32 %895 to i64
  %897 = icmp slt i64 %896, %14
  br i1 %897, label %898, label %908

898:                                              ; preds = %864
  %899 = getelementptr inbounds [5 x i32], [5 x i32]* @check_txfm_eval.level_to_qindex_map, i64 0, i64 %890
  %900 = load i32, i32* %899, align 4
  %901 = load i32, i32* %668, align 16
  %902 = icmp slt i32 %901, %900
  br i1 %902, label %908, label %903

903:                                              ; preds = %898
  %904 = getelementptr inbounds [5 x i32], [5 x i32]* @check_txfm_eval.scale, i64 0, i64 %890
  %905 = load i32, i32* %904, align 4
  %906 = shl nsw i32 %905, 2
  %907 = sext i32 %906 to i64
  br label %908

908:                                              ; preds = %903, %898, %864
  %909 = phi i64 [ %907, %903 ], [ 4, %898 ], [ 4, %864 ]
  br i1 %669, label %918, label %910

910:                                              ; preds = %908
  %911 = getelementptr inbounds [5 x i32], [5 x i32]* @check_txfm_eval.luma_mul, i64 0, i64 %890
  %912 = load i32, i32* %911, align 4
  %913 = mul nsw i64 %909, %14
  %914 = sext i32 %912 to i64
  %915 = mul nsw i64 %913, %914
  %916 = ashr i64 %915, 6
  %917 = icmp slt i64 %916, %888
  br i1 %917, label %986, label %918

918:                                              ; preds = %908, %820, %910
  %919 = sub nsw i64 %823, %806
  %920 = icmp slt i64 %919, 0
  br i1 %920, label %986, label %921

921:                                              ; preds = %918
  call void @av1_subtract_plane(%struct.macroblock* %1, i8 zeroext %3, i32 0) #5
  %922 = load i8, i8* %673, align 1
  %923 = call i64 @av1_estimate_txfm_yrd(%struct.AV1_COMP* %0, %struct.macroblock* %1, %struct.RD_STATS* nonnull %44, i64 %919, i8 zeroext %3, i8 zeroext %922) #5
  %924 = icmp eq i64 %923, 9223372036854775807
  br i1 %924, label %986, label %925

925:                                              ; preds = %921
  %926 = load %struct.MB_MODE_INFO*, %struct.MB_MODE_INFO** %392, align 16
  %927 = load %struct.MB_MODE_INFO*, %struct.MB_MODE_INFO** %394, align 8
  %928 = icmp eq %struct.MB_MODE_INFO* %926, null
  br i1 %928, label %933, label %929

929:                                              ; preds = %925
  %930 = getelementptr inbounds %struct.MB_MODE_INFO, %struct.MB_MODE_INFO* %926, i64 0, i32 23
  %931 = load i8, i8* %930, align 8
  %932 = sext i8 %931 to i64
  br label %933

933:                                              ; preds = %929, %925
  %934 = phi i64 [ %932, %929 ], [ 0, %925 ]
  %935 = icmp eq %struct.MB_MODE_INFO* %927, null
  br i1 %935, label %940, label %936

936:                                              ; preds = %933
  %937 = getelementptr inbounds %struct.MB_MODE_INFO, %struct.MB_MODE_INFO* %927, i64 0, i32 23
  %938 = load i8, i8* %937, align 8
  %939 = sext i8 %938 to i64
  br label %940

940:                                              ; preds = %936, %933
  %941 = phi i64 [ %939, %936 ], [ 0, %933 ]
  %942 = add nsw i64 %941, %934
  %943 = load i32, i32* %727, align 8
  %944 = icmp eq i32 %943, 0
  br i1 %944, label %948, label %945

945:                                              ; preds = %940
  %946 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 20, i32 38, i64 %942, i64 1
  %947 = load i32, i32* %946, align 4
  br label %953

948:                                              ; preds = %940
  %949 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 20, i32 38, i64 %942, i64 0
  %950 = load i32, i32* %949, align 4
  %951 = load i32, i32* %728, align 8
  %952 = add nsw i32 %951, %950
  br label %953

953:                                              ; preds = %945, %948
  %954 = phi i32 [ %947, %945 ], [ %952, %948 ]
  store i32 %954, i32* %728, align 8
  %955 = load i32, i32* %10, align 4
  %956 = add nsw i32 %955, %798
  %957 = add nsw i32 %956, %954
  %958 = sext i32 %957 to i64
  %959 = load i32, i32* %649, align 8
  %960 = sext i32 %959 to i64
  %961 = mul nsw i64 %958, %960
  %962 = add nsw i64 %961, 256
  %963 = ashr i64 %962, 9
  %964 = load i64, i64* %729, align 8
  %965 = shl i64 %964, 7
  %966 = add nsw i64 %963, %965
  call fastcc void @model_rd_for_sb_with_curvfit(i8 zeroext %3, %struct.macroblock* %1, %struct.macroblockd* %52, i32 0, i32 0, i32* nonnull %40, i64* nonnull %42, i32* nonnull %41, i64* nonnull %43, i32* null, i64* null, i64* null)
  %967 = load i32, i32* %10, align 4
  %968 = add nsw i32 %967, %798
  %969 = load i32, i32* %40, align 4
  %970 = add nsw i32 %968, %969
  %971 = sext i32 %970 to i64
  %972 = load i32, i32* %649, align 8
  %973 = sext i32 %972 to i64
  %974 = mul nsw i64 %971, %973
  %975 = add nsw i64 %974, 256
  %976 = ashr i64 %975, 9
  %977 = load i64, i64* %42, align 8
  %978 = shl i64 %977, 7
  %979 = add nsw i64 %976, %978
  %980 = load i32, i32* %728, align 8
  store i32 %980, i32* %814, align 4
  %981 = load i64, i64* %729, align 8
  %982 = getelementptr inbounds [4 x i64], [4 x i64]* %33, i64 0, i64 %796
  store i64 %981, i64* %982, align 8
  %983 = getelementptr inbounds [4 x i32], [4 x i32]* %36, i64 0, i64 %796
  store i32 %969, i32* %983, align 4
  %984 = getelementptr inbounds [4 x i64], [4 x i64]* %37, i64 0, i64 %796
  store i64 %977, i64* %984, align 8
  %985 = getelementptr inbounds [4 x i32], [4 x i32]* %35, i64 0, i64 %796
  store i32 %798, i32* %985, align 4
  br label %986

986:                                              ; preds = %921, %918, %910, %953
  %987 = phi i64 [ %979, %953 ], [ 9223372036854775807, %910 ], [ 9223372036854775807, %918 ], [ 9223372036854775807, %921 ]
  %988 = phi i64 [ %966, %953 ], [ 9223372036854775807, %910 ], [ 9223372036854775807, %918 ], [ 9223372036854775807, %921 ]
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %726) #5
  br label %1012

989:                                              ; preds = %813
  %990 = load i32, i32* %10, align 4
  %991 = add nsw i32 %990, %798
  %992 = add nsw i32 %991, %815
  %993 = sext i32 %992 to i64
  %994 = mul nsw i64 %993, %803
  %995 = add nsw i64 %994, 256
  %996 = ashr i64 %995, 9
  %997 = getelementptr inbounds [4 x i64], [4 x i64]* %33, i64 0, i64 %796
  %998 = load i64, i64* %997, align 8
  %999 = shl i64 %998, 7
  %1000 = add nsw i64 %996, %999
  %1001 = getelementptr inbounds [4 x i32], [4 x i32]* %36, i64 0, i64 %796
  %1002 = load i32, i32* %1001, align 4
  %1003 = add nsw i32 %1002, %991
  %1004 = sext i32 %1003 to i64
  %1005 = mul nsw i64 %1004, %803
  %1006 = add nsw i64 %1005, 256
  %1007 = ashr i64 %1006, 9
  %1008 = getelementptr inbounds [4 x i64], [4 x i64]* %37, i64 0, i64 %796
  %1009 = load i64, i64* %1008, align 8
  %1010 = shl i64 %1009, 7
  %1011 = add nsw i64 %1007, %1010
  br label %1012

1012:                                             ; preds = %989, %986
  %1013 = phi i64 [ %987, %986 ], [ %1011, %989 ]
  %1014 = phi i64 [ %988, %986 ], [ %1000, %989 ]
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %725) #5
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %724) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %723) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %722) #5
  br label %1170

1015:                                             ; preds = %810
  switch i8 %57, label %1016 [
    i8 16, label %1018
    i8 24, label %1018
    i8 19, label %1018
    i8 20, label %1018
    i8 21, label %1018
  ]

1016:                                             ; preds = %1015
  %1017 = load i32, i32* %10, align 4
  br i1 %713, label %1018, label %1024

1018:                                             ; preds = %1016, %1015, %1015, %1015, %1015, %1015
  call void @llvm.lifetime.start.p0i8(i64 216, i8* nonnull %714) #5
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %714, i8 -86, i64 216, i1 false)
  call void @av1_dist_wtd_comp_weight_assign(%struct.AV1Common* %51, %struct.MB_MODE_INFO* %55, i32 0, i32* %715, i32* %716, i32* %717, i32 1) #5
  %1019 = load i32, i32* %715, align 8
  %1020 = load i8*, i8** %679, align 16
  %1021 = trunc i32 %1019 to i8
  %1022 = shl i8 %1021, 2
  call void @llvm.memset.p0i8.i64(i8* align 1 %1020, i8 %1022, i64 32768, i1 false)
  %1023 = call i32 @av1_interinter_compound_motion_search(%struct.AV1_COMP* %0, %struct.macroblock* %1, %union.int_mv* %4, i8 zeroext %3, i8 zeroext %57) #5
  call void @llvm.lifetime.end.p0i8(i64 216, i8* nonnull %714) #5
  br label %1024

1024:                                             ; preds = %1016, %1018
  %1025 = phi i32 [ %1017, %1016 ], [ %1023, %1018 ]
  call void @av1_enc_build_inter_predictor(%struct.AV1Common* %51, %struct.macroblockd* %52, i32 %574, i32 %576, %struct.BUFFER_SET* %7, i8 zeroext %3, i32 0, i32 0) #5
  %1026 = icmp eq i8 %776, 0
  br i1 %1026, label %1027, label %1028

1027:                                             ; preds = %1024
  store i32 1, i32* %15, align 4
  br label %1028

1028:                                             ; preds = %1027, %1024
  %1029 = load i32, i32* %10, align 4
  %1030 = add nsw i32 %1029, %798
  %1031 = load i32, i32* %666, align 4
  %1032 = icmp eq i32 %1031, 0
  br i1 %1032, label %1123, label %1033

1033:                                             ; preds = %1028
  %1034 = load i32, i32* %681, align 4
  %1035 = load i32, i32* %682, align 8
  %1036 = sext i32 %1034 to i64
  %1037 = sext i32 %1035 to i64
  %1038 = getelementptr inbounds [22 x [2 x [2 x i8]]], [22 x [2 x [2 x i8]]]* @ss_size_lookup, i64 0, i64 %95, i64 %1036, i64 %1037
  %1039 = load i8, i8* %1038, align 1
  %1040 = zext i8 %1039 to i64
  %1041 = getelementptr inbounds [22 x i8], [22 x i8]* @block_size_high, i64 0, i64 %1040
  %1042 = load i8, i8* %1041, align 1
  %1043 = zext i8 %1042 to i32
  %1044 = getelementptr inbounds [22 x i8], [22 x i8]* @block_size_wide, i64 0, i64 %1040
  %1045 = load i8, i8* %1044, align 1
  %1046 = zext i8 %1045 to i32
  %1047 = load i32, i32* %683, align 16
  %1048 = icmp sgt i32 %1047, -1
  br i1 %1048, label %1057, label %1049

1049:                                             ; preds = %1033
  %1050 = add nsw i32 %1035, 3
  %1051 = ashr i32 %1047, %1050
  %1052 = add nsw i32 %1051, %1043
  %1053 = icmp slt i32 %1052, 0
  %1054 = icmp sgt i32 %1052, %1043
  %1055 = select i1 %1054, i32 %1043, i32 %1052
  %1056 = select i1 %1053, i32 0, i32 %1055
  br label %1057

1057:                                             ; preds = %1049, %1033
  %1058 = phi i32 [ %1056, %1049 ], [ %1043, %1033 ]
  %1059 = load i32, i32* %684, align 8
  %1060 = icmp sgt i32 %1059, -1
  br i1 %1060, label %1069, label %1061

1061:                                             ; preds = %1057
  %1062 = add nsw i32 %1034, 3
  %1063 = ashr i32 %1059, %1062
  %1064 = add nsw i32 %1063, %1046
  %1065 = icmp slt i32 %1064, 0
  %1066 = icmp sgt i32 %1064, %1046
  %1067 = select i1 %1066, i32 %1046, i32 %1064
  %1068 = select i1 %1065, i32 0, i32 %1067
  br label %1069

1069:                                             ; preds = %1061, %1057
  %1070 = phi i32 [ %1068, %1061 ], [ %1046, %1057 ]
  %1071 = load i32, i32* %685, align 16
  %1072 = load i64 (i8*, i32, i8*, i32, i32, i32)*, i64 (i8*, i32, i8*, i32, i32, i32)** @aom_sse, align 8
  %1073 = load i8*, i8** %659, align 8
  %1074 = load i32, i32* %660, align 8
  %1075 = load i8*, i8** %686, align 8
  %1076 = load i32, i32* %687, align 8
  %1077 = call i64 %1072(i8* %1073, i32 %1074, i8* %1075, i32 %1076, i32 %1070, i32 %1058) #5
  %1078 = shl i32 %1071, 1
  %1079 = add i32 %1078, -16
  %1080 = shl i32 1, %1079
  %1081 = ashr i32 %1080, 1
  %1082 = sext i32 %1081 to i64
  %1083 = add nsw i64 %1077, %1082
  %1084 = zext i32 %1079 to i64
  %1085 = ashr i64 %1083, %1084
  %1086 = sext i32 %1030 to i64
  %1087 = load i32, i32* %649, align 8
  %1088 = sext i32 %1087 to i64
  %1089 = mul nsw i64 %1088, %1086
  %1090 = add nsw i64 %1089, 256
  %1091 = ashr i64 %1090, 9
  %1092 = shl i64 %1085, 11
  %1093 = add nsw i64 %1091, %1092
  %1094 = load i32, i32* %666, align 4
  %1095 = sext i32 %1094 to i64
  %1096 = load i32, i32* %667, align 4
  %1097 = load i8, i8* %663, align 1
  %1098 = zext i8 %1097 to i32
  %1099 = add nuw nsw i32 %1098, 7
  %1100 = shl i32 %1096, %1099
  %1101 = zext i32 %1100 to i64
  %1102 = icmp slt i64 %1101, %14
  br i1 %1102, label %1103, label %1113

1103:                                             ; preds = %1069
  %1104 = getelementptr inbounds [5 x i32], [5 x i32]* @check_txfm_eval.level_to_qindex_map, i64 0, i64 %1095
  %1105 = load i32, i32* %1104, align 4
  %1106 = load i32, i32* %668, align 16
  %1107 = icmp slt i32 %1106, %1105
  br i1 %1107, label %1113, label %1108

1108:                                             ; preds = %1103
  %1109 = getelementptr inbounds [5 x i32], [5 x i32]* @check_txfm_eval.scale, i64 0, i64 %1095
  %1110 = load i32, i32* %1109, align 4
  %1111 = shl nsw i32 %1110, 2
  %1112 = sext i32 %1111 to i64
  br label %1113

1113:                                             ; preds = %1108, %1103, %1069
  %1114 = phi i64 [ %1112, %1108 ], [ 4, %1103 ], [ 4, %1069 ]
  br i1 %669, label %1123, label %1115

1115:                                             ; preds = %1113
  %1116 = getelementptr inbounds [5 x i32], [5 x i32]* @check_txfm_eval.luma_mul, i64 0, i64 %1095
  %1117 = load i32, i32* %1116, align 4
  %1118 = mul nsw i64 %1114, %14
  %1119 = sext i32 %1117 to i64
  %1120 = mul nsw i64 %1118, %1119
  %1121 = ashr i64 %1120, 6
  %1122 = icmp slt i64 %1121, %1093
  br i1 %1122, label %1170, label %1123

1123:                                             ; preds = %1113, %1028, %1115
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %718) #5
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %718, i8 -86, i64 40, i1 false)
  call void @av1_subtract_plane(%struct.macroblock* %1, i8 zeroext %3, i32 0) #5
  %1124 = load i8, i8* %673, align 1
  %1125 = call i64 @av1_estimate_txfm_yrd(%struct.AV1_COMP* %0, %struct.macroblock* %1, %struct.RD_STATS* nonnull %46, i64 9223372036854775807, i8 zeroext %3, i8 zeroext %1124) #5
  %1126 = icmp eq i64 %1125, 9223372036854775807
  br i1 %1126, label %1127, label %1129

1127:                                             ; preds = %1123
  %1128 = load i32, i32* %720, align 8
  br label %1157

1129:                                             ; preds = %1123
  %1130 = load %struct.MB_MODE_INFO*, %struct.MB_MODE_INFO** %392, align 16
  %1131 = load %struct.MB_MODE_INFO*, %struct.MB_MODE_INFO** %394, align 8
  %1132 = icmp eq %struct.MB_MODE_INFO* %1130, null
  br i1 %1132, label %1137, label %1133

1133:                                             ; preds = %1129
  %1134 = getelementptr inbounds %struct.MB_MODE_INFO, %struct.MB_MODE_INFO* %1130, i64 0, i32 23
  %1135 = load i8, i8* %1134, align 8
  %1136 = sext i8 %1135 to i64
  br label %1137

1137:                                             ; preds = %1133, %1129
  %1138 = phi i64 [ %1136, %1133 ], [ 0, %1129 ]
  %1139 = icmp eq %struct.MB_MODE_INFO* %1131, null
  br i1 %1139, label %1144, label %1140

1140:                                             ; preds = %1137
  %1141 = getelementptr inbounds %struct.MB_MODE_INFO, %struct.MB_MODE_INFO* %1131, i64 0, i32 23
  %1142 = load i8, i8* %1141, align 8
  %1143 = sext i8 %1142 to i64
  br label %1144

1144:                                             ; preds = %1140, %1137
  %1145 = phi i64 [ %1143, %1140 ], [ 0, %1137 ]
  %1146 = add nsw i64 %1145, %1138
  %1147 = load i32, i32* %719, align 8
  %1148 = icmp eq i32 %1147, 0
  br i1 %1148, label %1152, label %1149

1149:                                             ; preds = %1144
  %1150 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 20, i32 38, i64 %1146, i64 1
  %1151 = load i32, i32* %1150, align 4
  store i32 %1151, i32* %720, align 8
  br label %1157

1152:                                             ; preds = %1144
  %1153 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 20, i32 38, i64 %1146, i64 0
  %1154 = load i32, i32* %1153, align 4
  %1155 = load i32, i32* %720, align 8
  %1156 = add nsw i32 %1155, %1154
  store i32 %1156, i32* %720, align 8
  br label %1157

1157:                                             ; preds = %1127, %1149, %1152
  %1158 = phi i32 [ %1128, %1127 ], [ %1151, %1149 ], [ %1156, %1152 ]
  %1159 = add nsw i32 %1025, %798
  %1160 = add nsw i32 %1159, %1158
  %1161 = sext i32 %1160 to i64
  %1162 = load i32, i32* %649, align 8
  %1163 = sext i32 %1162 to i64
  %1164 = mul nsw i64 %1161, %1163
  %1165 = add nsw i64 %1164, 256
  %1166 = ashr i64 %1165, 9
  %1167 = load i64, i64* %721, align 8
  %1168 = shl i64 %1167, 7
  %1169 = add nsw i64 %1166, %1168
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %718) #5
  br label %1170

1170:                                             ; preds = %1157, %1115, %1012
  %1171 = phi i32 [ %782, %1012 ], [ %1025, %1115 ], [ %1025, %1157 ]
  %1172 = phi i64 [ %1013, %1012 ], [ 9223372036854775807, %1115 ], [ 9223372036854775807, %1157 ]
  %1173 = phi i64 [ %1014, %1012 ], [ 9223372036854775807, %1115 ], [ %1169, %1157 ]
  %1174 = icmp eq i8 %776, 0
  br i1 %1174, label %1175, label %2274

1175:                                             ; preds = %1170
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %730)
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %730, i8* align 1 %731, i64 40, i1 false)
  %1176 = load i64, i64* %737, align 8
  store i64 %1176, i64* %739, align 16
  %1177 = load i32, i32* %740, align 8
  store i32 %1177, i32* %687, align 8
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %730)
  br label %2274

1178:                                             ; preds = %808
  br i1 %779, label %1179, label %1631

1179:                                             ; preds = %1178
  %1180 = load i32, i32* %691, align 8
  %1181 = load i32, i32* %692, align 4
  %1182 = load i32, i32* %10, align 4
  %1183 = load i32, i32* %323, align 16
  %1184 = load i32, i32* %701, align 4
  %1185 = icmp eq i32 %1184, -1
  br i1 %1185, label %1186, label %1445

1186:                                             ; preds = %1179
  switch i8 %57, label %1187 [
    i8 16, label %1188
    i8 24, label %1188
    i8 19, label %1188
    i8 20, label %1188
    i8 21, label %1188
    i8 22, label %1188
  ]

1187:                                             ; preds = %1186
  call void @av1_build_inter_predictors_for_planes_single_buf(%struct.macroblockd* %52, i8 zeroext %3, i32 0, i32 0, i32 0, i8** nonnull %102, i32* nonnull %113) #5
  call void @av1_build_inter_predictors_for_planes_single_buf(%struct.macroblockd* %52, i8 zeroext %3, i32 0, i32 0, i32 1, i8** nonnull %107, i32* nonnull %113) #5
  br label %1188

1188:                                             ; preds = %1186, %1186, %1186, %1186, %1186, %1186, %1187
  %1189 = icmp sgt i32 %1183, 0
  %1190 = and i1 %1185, %1189
  br i1 %1190, label %1191, label %1433

1191:                                             ; preds = %1188
  %1192 = sdiv i64 %785, 2
  br label %1193

1193:                                             ; preds = %1191, %1427
  %1194 = phi i64 [ 9223372036854775807, %1191 ], [ %1417, %1427 ]
  %1195 = phi i32 [ 0, %1191 ], [ %1430, %1427 ]
  %1196 = phi i32 [ %1183, %1191 ], [ %1428, %1427 ]
  %1197 = phi i32 [ %1182, %1191 ], [ %1416, %1427 ]
  %1198 = phi i32 [ 0, %1191 ], [ %1415, %1427 ]
  %1199 = phi i32 [ %1180, %1191 ], [ %1414, %1427 ]
  %1200 = phi i32 [ %1181, %1191 ], [ %1413, %1427 ]
  %1201 = phi i32 [ 0, %1191 ], [ %1412, %1427 ]
  %1202 = phi i32 [ 0, %1191 ], [ %1411, %1427 ]
  %1203 = trunc i32 %1195 to i8
  %1204 = sext i8 %1203 to i64
  br label %1210

1205:                                             ; preds = %1409
  %1206 = load i32, i32* %707, align 4
  %1207 = icmp ne i32 %1206, 0
  %1208 = icmp eq i32 %1195, 7
  %1209 = and i1 %1208, %1207
  br i1 %1209, label %1420, label %1427

1210:                                             ; preds = %1409, %1193
  %1211 = phi i64 [ %1194, %1193 ], [ %1417, %1409 ]
  %1212 = phi i32 [ 0, %1193 ], [ %1418, %1409 ]
  %1213 = phi i32 [ %1197, %1193 ], [ %1416, %1409 ]
  %1214 = phi i32 [ %1198, %1193 ], [ %1415, %1409 ]
  %1215 = phi i32 [ %1199, %1193 ], [ %1414, %1409 ]
  %1216 = phi i32 [ %1200, %1193 ], [ %1413, %1409 ]
  %1217 = phi i32 [ %1201, %1193 ], [ %1412, %1409 ]
  %1218 = phi i32 [ %1202, %1193 ], [ %1411, %1409 ]
  %1219 = load i32, i32* %10, align 4
  store i8 %1203, i8* %694, align 8
  %1220 = trunc i32 %1212 to i8
  store i8 %1220, i8* %702, align 1
  %1221 = load i8, i8* %646, align 1
  %1222 = icmp eq i8 %1221, 2
  br i1 %1222, label %1223, label %1233

1223:                                             ; preds = %1210
  %1224 = load i8, i8* %693, align 8
  %1225 = zext i8 %1224 to i64
  %1226 = getelementptr inbounds [22 x %struct.wedge_params_type], [22 x %struct.wedge_params_type]* @av1_wedge_params_lookup, i64 0, i64 %1225, i32 0
  %1227 = load i32, i32* %1226, align 16
  %1228 = icmp slt i32 %1227, 1
  br i1 %1228, label %1233, label %1229

1229:                                             ; preds = %1223
  %1230 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 20, i32 29, i64 %1225, i64 %1204
  %1231 = load i32, i32* %1230, align 4
  %1232 = add nsw i32 %1231, 512
  br label %1233

1233:                                             ; preds = %1210, %1223, %1229
  %1234 = phi i32 [ %1232, %1229 ], [ 0, %1223 ], [ 512, %1210 ]
  %1235 = add nsw i32 %1234, %798
  %1236 = load i32, i32* %648, align 8
  %1237 = add nsw i32 %1235, %1236
  %1238 = sext i32 %1237 to i64
  %1239 = load i32, i32* %649, align 8
  %1240 = sext i32 %1239 to i64
  %1241 = mul nsw i64 %1238, %1240
  %1242 = add nsw i64 %1241, 256
  %1243 = ashr i64 %1242, 9
  %1244 = icmp slt i64 %1243, %1192
  br i1 %1244, label %1245, label %1409

1245:                                             ; preds = %1233
  switch i8 %57, label %1251 [
    i8 16, label %1246
    i8 24, label %1246
    i8 19, label %1246
    i8 20, label %1246
    i8 21, label %1246
    i8 22, label %1246
  ]

1246:                                             ; preds = %1245, %1245, %1245, %1245, %1245, %1245
  %1247 = load i32, i32* %670, align 4
  %1248 = icmp eq i32 %1247, 0
  br i1 %1248, label %1249, label %1251

1249:                                             ; preds = %1246
  %1250 = call i32 @av1_interinter_compound_motion_search(%struct.AV1_COMP* %0, %struct.macroblock* %1, %union.int_mv* %4, i8 zeroext %3, i8 zeroext %57) #5
  call void @av1_enc_build_inter_predictor(%struct.AV1Common* %51, %struct.macroblockd* %52, i32 %574, i32 %576, %struct.BUFFER_SET* %7, i8 zeroext %3, i32 0, i32 0) #5
  br label %1252

1251:                                             ; preds = %1245, %1246
  call void @av1_build_wedge_inter_predictor_from_buf(%struct.macroblockd* %52, i8 zeroext %3, i32 0, i32 0, i8** nonnull %102, i32* nonnull %113, i8** nonnull %107, i32* nonnull %113) #5
  br label %1252

1252:                                             ; preds = %1251, %1249
  %1253 = phi i32 [ %1219, %1251 ], [ %1250, %1249 ]
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %703) #5
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %703, i8 -86, i64 40, i1 false)
  %1254 = load i32, i32* %10, align 4
  %1255 = add nsw i32 %1254, %1235
  %1256 = load i32, i32* %666, align 4
  %1257 = icmp eq i32 %1256, 0
  br i1 %1257, label %1348, label %1258

1258:                                             ; preds = %1252
  %1259 = load i32, i32* %681, align 4
  %1260 = load i32, i32* %682, align 8
  %1261 = sext i32 %1259 to i64
  %1262 = sext i32 %1260 to i64
  %1263 = getelementptr inbounds [22 x [2 x [2 x i8]]], [22 x [2 x [2 x i8]]]* @ss_size_lookup, i64 0, i64 %95, i64 %1261, i64 %1262
  %1264 = load i8, i8* %1263, align 1
  %1265 = zext i8 %1264 to i64
  %1266 = getelementptr inbounds [22 x i8], [22 x i8]* @block_size_high, i64 0, i64 %1265
  %1267 = load i8, i8* %1266, align 1
  %1268 = zext i8 %1267 to i32
  %1269 = getelementptr inbounds [22 x i8], [22 x i8]* @block_size_wide, i64 0, i64 %1265
  %1270 = load i8, i8* %1269, align 1
  %1271 = zext i8 %1270 to i32
  %1272 = load i32, i32* %683, align 16
  %1273 = icmp sgt i32 %1272, -1
  br i1 %1273, label %1282, label %1274

1274:                                             ; preds = %1258
  %1275 = add nsw i32 %1260, 3
  %1276 = ashr i32 %1272, %1275
  %1277 = add nsw i32 %1276, %1268
  %1278 = icmp slt i32 %1277, 0
  %1279 = icmp sgt i32 %1277, %1268
  %1280 = select i1 %1279, i32 %1268, i32 %1277
  %1281 = select i1 %1278, i32 0, i32 %1280
  br label %1282

1282:                                             ; preds = %1274, %1258
  %1283 = phi i32 [ %1281, %1274 ], [ %1268, %1258 ]
  %1284 = load i32, i32* %684, align 8
  %1285 = icmp sgt i32 %1284, -1
  br i1 %1285, label %1294, label %1286

1286:                                             ; preds = %1282
  %1287 = add nsw i32 %1259, 3
  %1288 = ashr i32 %1284, %1287
  %1289 = add nsw i32 %1288, %1271
  %1290 = icmp slt i32 %1289, 0
  %1291 = icmp sgt i32 %1289, %1271
  %1292 = select i1 %1291, i32 %1271, i32 %1289
  %1293 = select i1 %1290, i32 0, i32 %1292
  br label %1294

1294:                                             ; preds = %1286, %1282
  %1295 = phi i32 [ %1293, %1286 ], [ %1271, %1282 ]
  %1296 = load i32, i32* %685, align 16
  %1297 = load i64 (i8*, i32, i8*, i32, i32, i32)*, i64 (i8*, i32, i8*, i32, i32, i32)** @aom_sse, align 8
  %1298 = load i8*, i8** %659, align 8
  %1299 = load i32, i32* %660, align 8
  %1300 = load i8*, i8** %686, align 8
  %1301 = load i32, i32* %687, align 8
  %1302 = call i64 %1297(i8* %1298, i32 %1299, i8* %1300, i32 %1301, i32 %1295, i32 %1283) #5
  %1303 = shl i32 %1296, 1
  %1304 = add i32 %1303, -16
  %1305 = shl i32 1, %1304
  %1306 = ashr i32 %1305, 1
  %1307 = sext i32 %1306 to i64
  %1308 = add nsw i64 %1302, %1307
  %1309 = zext i32 %1304 to i64
  %1310 = ashr i64 %1308, %1309
  %1311 = sext i32 %1255 to i64
  %1312 = load i32, i32* %649, align 8
  %1313 = sext i32 %1312 to i64
  %1314 = mul nsw i64 %1313, %1311
  %1315 = add nsw i64 %1314, 256
  %1316 = ashr i64 %1315, 9
  %1317 = shl i64 %1310, 11
  %1318 = add nsw i64 %1316, %1317
  %1319 = load i32, i32* %666, align 4
  %1320 = sext i32 %1319 to i64
  %1321 = load i32, i32* %667, align 4
  %1322 = load i8, i8* %663, align 1
  %1323 = zext i8 %1322 to i32
  %1324 = add nuw nsw i32 %1323, 7
  %1325 = shl i32 %1321, %1324
  %1326 = zext i32 %1325 to i64
  %1327 = icmp slt i64 %1326, %14
  br i1 %1327, label %1328, label %1338

1328:                                             ; preds = %1294
  %1329 = getelementptr inbounds [5 x i32], [5 x i32]* @check_txfm_eval.level_to_qindex_map, i64 0, i64 %1320
  %1330 = load i32, i32* %1329, align 4
  %1331 = load i32, i32* %668, align 16
  %1332 = icmp slt i32 %1331, %1330
  br i1 %1332, label %1338, label %1333

1333:                                             ; preds = %1328
  %1334 = getelementptr inbounds [5 x i32], [5 x i32]* @check_txfm_eval.scale, i64 0, i64 %1320
  %1335 = load i32, i32* %1334, align 4
  %1336 = shl nsw i32 %1335, 2
  %1337 = sext i32 %1336 to i64
  br label %1338

1338:                                             ; preds = %1333, %1328, %1294
  %1339 = phi i64 [ %1337, %1333 ], [ 4, %1328 ], [ 4, %1294 ]
  br i1 %669, label %1348, label %1340

1340:                                             ; preds = %1338
  %1341 = getelementptr inbounds [5 x i32], [5 x i32]* @check_txfm_eval.luma_mul, i64 0, i64 %1320
  %1342 = load i32, i32* %1341, align 4
  %1343 = mul nsw i64 %1339, %14
  %1344 = sext i32 %1342 to i64
  %1345 = mul nsw i64 %1343, %1344
  %1346 = ashr i64 %1345, 6
  %1347 = icmp slt i64 %1346, %1318
  br i1 %1347, label %1401, label %1348

1348:                                             ; preds = %1338, %1252, %1340
  %1349 = icmp slt i64 %1211, %785
  %1350 = select i1 %1349, i64 %1211, i64 %785
  %1351 = icmp slt i64 %1350, 0
  br i1 %1351, label %1401, label %1352

1352:                                             ; preds = %1348
  call void @av1_subtract_plane(%struct.macroblock* %1, i8 zeroext %3, i32 0) #5
  %1353 = load i8, i8* %673, align 1
  %1354 = call i64 @av1_estimate_txfm_yrd(%struct.AV1_COMP* %0, %struct.macroblock* %1, %struct.RD_STATS* nonnull %47, i64 %1350, i8 zeroext %3, i8 zeroext %1353) #5
  %1355 = icmp eq i64 %1354, 9223372036854775807
  br i1 %1355, label %1401, label %1356

1356:                                             ; preds = %1352
  %1357 = load %struct.MB_MODE_INFO*, %struct.MB_MODE_INFO** %392, align 16
  %1358 = load %struct.MB_MODE_INFO*, %struct.MB_MODE_INFO** %394, align 8
  %1359 = icmp eq %struct.MB_MODE_INFO* %1357, null
  br i1 %1359, label %1364, label %1360

1360:                                             ; preds = %1356
  %1361 = getelementptr inbounds %struct.MB_MODE_INFO, %struct.MB_MODE_INFO* %1357, i64 0, i32 23
  %1362 = load i8, i8* %1361, align 8
  %1363 = sext i8 %1362 to i64
  br label %1364

1364:                                             ; preds = %1360, %1356
  %1365 = phi i64 [ %1363, %1360 ], [ 0, %1356 ]
  %1366 = icmp eq %struct.MB_MODE_INFO* %1358, null
  br i1 %1366, label %1371, label %1367

1367:                                             ; preds = %1364
  %1368 = getelementptr inbounds %struct.MB_MODE_INFO, %struct.MB_MODE_INFO* %1358, i64 0, i32 23
  %1369 = load i8, i8* %1368, align 8
  %1370 = sext i8 %1369 to i64
  br label %1371

1371:                                             ; preds = %1367, %1364
  %1372 = phi i64 [ %1370, %1367 ], [ 0, %1364 ]
  %1373 = add nsw i64 %1372, %1365
  %1374 = load i32, i32* %704, align 8
  %1375 = icmp eq i32 %1374, 0
  br i1 %1375, label %1379, label %1376

1376:                                             ; preds = %1371
  %1377 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 20, i32 38, i64 %1373, i64 1
  %1378 = load i32, i32* %1377, align 4
  br label %1384

1379:                                             ; preds = %1371
  %1380 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 20, i32 38, i64 %1373, i64 0
  %1381 = load i32, i32* %1380, align 4
  %1382 = load i32, i32* %705, align 8
  %1383 = add nsw i32 %1382, %1381
  br label %1384

1384:                                             ; preds = %1379, %1376
  %1385 = phi i32 [ %1378, %1376 ], [ %1383, %1379 ]
  store i32 %1385, i32* %705, align 8
  %1386 = add nsw i32 %1253, %1235
  %1387 = add nsw i32 %1386, %1385
  %1388 = sext i32 %1387 to i64
  %1389 = load i32, i32* %649, align 8
  %1390 = sext i32 %1389 to i64
  %1391 = mul nsw i64 %1388, %1390
  %1392 = add nsw i64 %1391, 256
  %1393 = ashr i64 %1392, 9
  %1394 = load i64, i64* %706, align 8
  %1395 = shl nsw i64 %1394, 7
  %1396 = add nsw i64 %1393, %1395
  %1397 = icmp slt i64 %1396, %1211
  br i1 %1397, label %1398, label %1401

1398:                                             ; preds = %1384
  %1399 = load i32, i32* %691, align 8
  %1400 = load i32, i32* %692, align 4
  br label %1401

1401:                                             ; preds = %1340, %1348, %1352, %1398, %1384
  %1402 = phi i32 [ %1195, %1398 ], [ %1218, %1384 ], [ %1218, %1352 ], [ %1218, %1348 ], [ %1218, %1340 ]
  %1403 = phi i32 [ %1212, %1398 ], [ %1217, %1384 ], [ %1217, %1352 ], [ %1217, %1348 ], [ %1217, %1340 ]
  %1404 = phi i32 [ %1400, %1398 ], [ %1216, %1384 ], [ %1216, %1352 ], [ %1216, %1348 ], [ %1216, %1340 ]
  %1405 = phi i32 [ %1399, %1398 ], [ %1215, %1384 ], [ %1215, %1352 ], [ %1215, %1348 ], [ %1215, %1340 ]
  %1406 = phi i32 [ %1235, %1398 ], [ %1214, %1384 ], [ %1214, %1352 ], [ %1214, %1348 ], [ %1214, %1340 ]
  %1407 = phi i32 [ %1253, %1398 ], [ %1213, %1384 ], [ %1213, %1352 ], [ %1213, %1348 ], [ %1213, %1340 ]
  %1408 = phi i64 [ %1396, %1398 ], [ %1211, %1384 ], [ %1211, %1352 ], [ %1211, %1348 ], [ %1211, %1340 ]
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %703) #5
  br label %1409

1409:                                             ; preds = %1233, %1401
  %1410 = phi i32 [ %1253, %1401 ], [ %1219, %1233 ]
  %1411 = phi i32 [ %1402, %1401 ], [ %1218, %1233 ]
  %1412 = phi i32 [ %1403, %1401 ], [ %1217, %1233 ]
  %1413 = phi i32 [ %1404, %1401 ], [ %1216, %1233 ]
  %1414 = phi i32 [ %1405, %1401 ], [ %1215, %1233 ]
  %1415 = phi i32 [ %1406, %1401 ], [ %1214, %1233 ]
  %1416 = phi i32 [ %1407, %1401 ], [ %1213, %1233 ]
  %1417 = phi i64 [ %1408, %1401 ], [ %1211, %1233 ]
  %1418 = add nuw nsw i32 %1212, 1
  %1419 = icmp eq i32 %1418, 2
  br i1 %1419, label %1205, label %1210

1420:                                             ; preds = %1205
  %1421 = icmp sgt i32 %1411, 3
  br i1 %1421, label %1432, label %1422

1422:                                             ; preds = %1420
  %1423 = sext i32 %1411 to i64
  %1424 = getelementptr inbounds [4 x i32], [4 x i32]* @av1_compound_type_rd.asym_mask_idx, i64 0, i64 %1423
  %1425 = load i32, i32* %1424, align 4
  %1426 = add nsw i32 %1425, 3
  br label %1427

1427:                                             ; preds = %1205, %1422
  %1428 = phi i32 [ %1196, %1205 ], [ %1426, %1422 ]
  %1429 = phi i32 [ %1195, %1205 ], [ %1425, %1422 ]
  %1430 = add nsw i32 %1429, 1
  %1431 = icmp slt i32 %1430, %1428
  br i1 %1431, label %1193, label %1432

1432:                                             ; preds = %1427, %1420
  br i1 %1185, label %1433, label %1445

1433:                                             ; preds = %1188, %1432
  %1434 = phi i64 [ %1417, %1432 ], [ 9223372036854775807, %1188 ]
  %1435 = phi i32 [ %1416, %1432 ], [ %1182, %1188 ]
  %1436 = phi i32 [ %1415, %1432 ], [ 0, %1188 ]
  %1437 = phi i32 [ %1414, %1432 ], [ %1180, %1188 ]
  %1438 = phi i32 [ %1413, %1432 ], [ %1181, %1188 ]
  %1439 = phi i32 [ %1412, %1432 ], [ 0, %1188 ]
  %1440 = phi i32 [ %1411, %1432 ], [ 0, %1188 ]
  %1441 = load i32, i32* %699, align 4
  %1442 = icmp eq i32 %1441, 0
  %1443 = and i1 %700, %1442
  br i1 %1443, label %1621, label %1444

1444:                                             ; preds = %1433
  store i32 %1440, i32* %701, align 4
  store i32 %1439, i32* %708, align 8
  br label %1621

1445:                                             ; preds = %1179, %1432
  %1446 = phi i64 [ %1417, %1432 ], [ 9223372036854775807, %1179 ]
  %1447 = phi i32 [ %1410, %1432 ], [ %782, %1179 ]
  %1448 = load i32, i32* %701, align 4
  %1449 = trunc i32 %1448 to i8
  store i8 %1449, i8* %694, align 8
  %1450 = load i32, i32* %708, align 8
  %1451 = trunc i32 %1450 to i8
  store i8 %1451, i8* %702, align 1
  switch i8 %57, label %1457 [
    i8 16, label %1452
    i8 24, label %1452
    i8 19, label %1452
    i8 20, label %1452
    i8 21, label %1452
    i8 22, label %1452
  ]

1452:                                             ; preds = %1445, %1445, %1445, %1445, %1445, %1445
  %1453 = load i32, i32* %670, align 4
  %1454 = icmp eq i32 %1453, 0
  br i1 %1454, label %1455, label %1457

1455:                                             ; preds = %1452
  %1456 = call i32 @av1_interinter_compound_motion_search(%struct.AV1_COMP* %0, %struct.macroblock* %1, %union.int_mv* %4, i8 zeroext %3, i8 zeroext %57) #5
  br label %1457

1457:                                             ; preds = %1445, %1452, %1455
  %1458 = phi i32 [ %1456, %1455 ], [ %1447, %1452 ], [ %1447, %1445 ]
  %1459 = load i32, i32* %701, align 4
  %1460 = load i32, i32* %708, align 8
  %1461 = load i32, i32* %691, align 8
  %1462 = load i32, i32* %692, align 4
  %1463 = load i8, i8* %646, align 1
  %1464 = icmp eq i8 %1463, 2
  br i1 %1464, label %1465, label %1477

1465:                                             ; preds = %1457
  %1466 = load i8, i8* %693, align 8
  %1467 = zext i8 %1466 to i64
  %1468 = getelementptr inbounds [22 x %struct.wedge_params_type], [22 x %struct.wedge_params_type]* @av1_wedge_params_lookup, i64 0, i64 %1467, i32 0
  %1469 = load i32, i32* %1468, align 16
  %1470 = icmp slt i32 %1469, 1
  br i1 %1470, label %1477, label %1471

1471:                                             ; preds = %1465
  %1472 = load i8, i8* %694, align 8
  %1473 = sext i8 %1472 to i64
  %1474 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 20, i32 29, i64 %1467, i64 %1473
  %1475 = load i32, i32* %1474, align 4
  %1476 = add nsw i32 %1475, 512
  br label %1477

1477:                                             ; preds = %1457, %1465, %1471
  %1478 = phi i32 [ %1476, %1471 ], [ 0, %1465 ], [ 512, %1457 ]
  %1479 = add nsw i32 %1478, %798
  call void @av1_enc_build_inter_predictor(%struct.AV1Common* %51, %struct.macroblockd* %52, i32 %574, i32 %576, %struct.BUFFER_SET* %7, i8 zeroext %3, i32 0, i32 0) #5
  %1480 = load i32, i32* %10, align 4
  %1481 = add nsw i32 %1480, %1479
  %1482 = load i32, i32* %666, align 4
  %1483 = icmp eq i32 %1482, 0
  br i1 %1483, label %1574, label %1484

1484:                                             ; preds = %1477
  %1485 = load i32, i32* %681, align 4
  %1486 = load i32, i32* %682, align 8
  %1487 = sext i32 %1485 to i64
  %1488 = sext i32 %1486 to i64
  %1489 = getelementptr inbounds [22 x [2 x [2 x i8]]], [22 x [2 x [2 x i8]]]* @ss_size_lookup, i64 0, i64 %95, i64 %1487, i64 %1488
  %1490 = load i8, i8* %1489, align 1
  %1491 = zext i8 %1490 to i64
  %1492 = getelementptr inbounds [22 x i8], [22 x i8]* @block_size_high, i64 0, i64 %1491
  %1493 = load i8, i8* %1492, align 1
  %1494 = zext i8 %1493 to i32
  %1495 = getelementptr inbounds [22 x i8], [22 x i8]* @block_size_wide, i64 0, i64 %1491
  %1496 = load i8, i8* %1495, align 1
  %1497 = zext i8 %1496 to i32
  %1498 = load i32, i32* %683, align 16
  %1499 = icmp sgt i32 %1498, -1
  br i1 %1499, label %1508, label %1500

1500:                                             ; preds = %1484
  %1501 = add nsw i32 %1486, 3
  %1502 = ashr i32 %1498, %1501
  %1503 = add nsw i32 %1502, %1494
  %1504 = icmp slt i32 %1503, 0
  %1505 = icmp sgt i32 %1503, %1494
  %1506 = select i1 %1505, i32 %1494, i32 %1503
  %1507 = select i1 %1504, i32 0, i32 %1506
  br label %1508

1508:                                             ; preds = %1500, %1484
  %1509 = phi i32 [ %1507, %1500 ], [ %1494, %1484 ]
  %1510 = load i32, i32* %684, align 8
  %1511 = icmp sgt i32 %1510, -1
  br i1 %1511, label %1520, label %1512

1512:                                             ; preds = %1508
  %1513 = add nsw i32 %1485, 3
  %1514 = ashr i32 %1510, %1513
  %1515 = add nsw i32 %1514, %1497
  %1516 = icmp slt i32 %1515, 0
  %1517 = icmp sgt i32 %1515, %1497
  %1518 = select i1 %1517, i32 %1497, i32 %1515
  %1519 = select i1 %1516, i32 0, i32 %1518
  br label %1520

1520:                                             ; preds = %1512, %1508
  %1521 = phi i32 [ %1519, %1512 ], [ %1497, %1508 ]
  %1522 = load i32, i32* %685, align 16
  %1523 = load i64 (i8*, i32, i8*, i32, i32, i32)*, i64 (i8*, i32, i8*, i32, i32, i32)** @aom_sse, align 8
  %1524 = load i8*, i8** %659, align 8
  %1525 = load i32, i32* %660, align 8
  %1526 = load i8*, i8** %686, align 8
  %1527 = load i32, i32* %687, align 8
  %1528 = call i64 %1523(i8* %1524, i32 %1525, i8* %1526, i32 %1527, i32 %1521, i32 %1509) #5
  %1529 = shl i32 %1522, 1
  %1530 = add i32 %1529, -16
  %1531 = shl i32 1, %1530
  %1532 = ashr i32 %1531, 1
  %1533 = sext i32 %1532 to i64
  %1534 = add nsw i64 %1528, %1533
  %1535 = zext i32 %1530 to i64
  %1536 = ashr i64 %1534, %1535
  %1537 = sext i32 %1481 to i64
  %1538 = load i32, i32* %649, align 8
  %1539 = sext i32 %1538 to i64
  %1540 = mul nsw i64 %1539, %1537
  %1541 = add nsw i64 %1540, 256
  %1542 = ashr i64 %1541, 9
  %1543 = shl i64 %1536, 11
  %1544 = add nsw i64 %1542, %1543
  %1545 = load i32, i32* %666, align 4
  %1546 = sext i32 %1545 to i64
  %1547 = load i32, i32* %667, align 4
  %1548 = load i8, i8* %663, align 1
  %1549 = zext i8 %1548 to i32
  %1550 = add nuw nsw i32 %1549, 7
  %1551 = shl i32 %1547, %1550
  %1552 = zext i32 %1551 to i64
  %1553 = icmp slt i64 %1552, %14
  br i1 %1553, label %1554, label %1564

1554:                                             ; preds = %1520
  %1555 = getelementptr inbounds [5 x i32], [5 x i32]* @check_txfm_eval.level_to_qindex_map, i64 0, i64 %1546
  %1556 = load i32, i32* %1555, align 4
  %1557 = load i32, i32* %668, align 16
  %1558 = icmp slt i32 %1557, %1556
  br i1 %1558, label %1564, label %1559

1559:                                             ; preds = %1554
  %1560 = getelementptr inbounds [5 x i32], [5 x i32]* @check_txfm_eval.scale, i64 0, i64 %1546
  %1561 = load i32, i32* %1560, align 4
  %1562 = shl nsw i32 %1561, 2
  %1563 = sext i32 %1562 to i64
  br label %1564

1564:                                             ; preds = %1559, %1554, %1520
  %1565 = phi i64 [ %1563, %1559 ], [ 4, %1554 ], [ 4, %1520 ]
  br i1 %669, label %1574, label %1566

1566:                                             ; preds = %1564
  %1567 = getelementptr inbounds [5 x i32], [5 x i32]* @check_txfm_eval.luma_mul, i64 0, i64 %1546
  %1568 = load i32, i32* %1567, align 4
  %1569 = mul nsw i64 %1565, %14
  %1570 = sext i32 %1568 to i64
  %1571 = mul nsw i64 %1569, %1570
  %1572 = ashr i64 %1571, 6
  %1573 = icmp slt i64 %1572, %1544
  br i1 %1573, label %1621, label %1574

1574:                                             ; preds = %1564, %1477, %1566
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %709) #5
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %709, i8 -86, i64 40, i1 false)
  call void @av1_subtract_plane(%struct.macroblock* %1, i8 zeroext %3, i32 0) #5
  %1575 = load i8, i8* %673, align 1
  %1576 = call i64 @av1_estimate_txfm_yrd(%struct.AV1_COMP* %0, %struct.macroblock* %1, %struct.RD_STATS* nonnull %48, i64 9223372036854775807, i8 zeroext %3, i8 zeroext %1575) #5
  %1577 = icmp eq i64 %1576, 9223372036854775807
  br i1 %1577, label %1578, label %1580

1578:                                             ; preds = %1574
  %1579 = load i32, i32* %711, align 8
  br label %1608

1580:                                             ; preds = %1574
  %1581 = load %struct.MB_MODE_INFO*, %struct.MB_MODE_INFO** %392, align 16
  %1582 = load %struct.MB_MODE_INFO*, %struct.MB_MODE_INFO** %394, align 8
  %1583 = icmp eq %struct.MB_MODE_INFO* %1581, null
  br i1 %1583, label %1588, label %1584

1584:                                             ; preds = %1580
  %1585 = getelementptr inbounds %struct.MB_MODE_INFO, %struct.MB_MODE_INFO* %1581, i64 0, i32 23
  %1586 = load i8, i8* %1585, align 8
  %1587 = sext i8 %1586 to i64
  br label %1588

1588:                                             ; preds = %1584, %1580
  %1589 = phi i64 [ %1587, %1584 ], [ 0, %1580 ]
  %1590 = icmp eq %struct.MB_MODE_INFO* %1582, null
  br i1 %1590, label %1595, label %1591

1591:                                             ; preds = %1588
  %1592 = getelementptr inbounds %struct.MB_MODE_INFO, %struct.MB_MODE_INFO* %1582, i64 0, i32 23
  %1593 = load i8, i8* %1592, align 8
  %1594 = sext i8 %1593 to i64
  br label %1595

1595:                                             ; preds = %1591, %1588
  %1596 = phi i64 [ %1594, %1591 ], [ 0, %1588 ]
  %1597 = add nsw i64 %1596, %1589
  %1598 = load i32, i32* %710, align 8
  %1599 = icmp eq i32 %1598, 0
  br i1 %1599, label %1603, label %1600

1600:                                             ; preds = %1595
  %1601 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 20, i32 38, i64 %1597, i64 1
  %1602 = load i32, i32* %1601, align 4
  store i32 %1602, i32* %711, align 8
  br label %1608

1603:                                             ; preds = %1595
  %1604 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 20, i32 38, i64 %1597, i64 0
  %1605 = load i32, i32* %1604, align 4
  %1606 = load i32, i32* %711, align 8
  %1607 = add nsw i32 %1606, %1605
  store i32 %1607, i32* %711, align 8
  br label %1608

1608:                                             ; preds = %1578, %1600, %1603
  %1609 = phi i32 [ %1579, %1578 ], [ %1602, %1600 ], [ %1607, %1603 ]
  %1610 = add nsw i32 %1479, %1458
  %1611 = add nsw i32 %1610, %1609
  %1612 = sext i32 %1611 to i64
  %1613 = load i32, i32* %649, align 8
  %1614 = sext i32 %1613 to i64
  %1615 = mul nsw i64 %1612, %1614
  %1616 = add nsw i64 %1615, 256
  %1617 = ashr i64 %1616, 9
  %1618 = load i64, i64* %712, align 8
  %1619 = shl i64 %1618, 7
  %1620 = add nsw i64 %1617, %1619
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %709) #5
  br label %1621

1621:                                             ; preds = %1608, %1566, %1433, %1444
  %1622 = phi i32 [ %1440, %1444 ], [ %1440, %1433 ], [ %1459, %1566 ], [ %1459, %1608 ]
  %1623 = phi i32 [ %1439, %1444 ], [ %1439, %1433 ], [ %1460, %1566 ], [ %1460, %1608 ]
  %1624 = phi i32 [ %1438, %1444 ], [ %1438, %1433 ], [ %1462, %1566 ], [ %1462, %1608 ]
  %1625 = phi i32 [ %1437, %1444 ], [ %1437, %1433 ], [ %1461, %1566 ], [ %1461, %1608 ]
  %1626 = phi i32 [ %1436, %1444 ], [ %1436, %1433 ], [ %1479, %1566 ], [ %1479, %1608 ]
  %1627 = phi i32 [ %1435, %1444 ], [ %1435, %1433 ], [ %1458, %1566 ], [ %1458, %1608 ]
  %1628 = phi i64 [ %1434, %1444 ], [ %1434, %1433 ], [ %1446, %1566 ], [ %1620, %1608 ]
  %1629 = trunc i32 %1622 to i8
  store i8 %1629, i8* %694, align 8
  %1630 = trunc i32 %1623 to i8
  store i8 %1630, i8* %702, align 1
  store i32 %1625, i32* %691, align 8
  store i32 %1624, i32* %692, align 4
  br label %2274

1631:                                             ; preds = %1178
  %1632 = load i32, i32* %650, align 4
  %1633 = icmp eq i32 %1632, 0
  %1634 = icmp eq i8 %776, 3
  %1635 = and i1 %1634, %1633
  br i1 %1635, label %1636, label %2003

1636:                                             ; preds = %1631
  %1637 = add nsw i32 %798, 512
  %1638 = load i32, i32* %677, align 4
  %1639 = icmp eq i32 %1638, -1
  br i1 %1639, label %1640, label %1817

1640:                                             ; preds = %1636
  %1641 = icmp slt i64 %785, 0
  br label %1643

1642:                                             ; preds = %1805
  br i1 %1639, label %1812, label %1817

1643:                                             ; preds = %1640, %1805
  %1644 = phi i32 [ 0, %1640 ], [ %1810, %1805 ]
  %1645 = phi i32 [ 0, %1640 ], [ %1809, %1805 ]
  %1646 = phi i32 [ -1431655766, %1640 ], [ %1808, %1805 ]
  %1647 = phi i32 [ -1431655766, %1640 ], [ %1807, %1805 ]
  %1648 = phi i64 [ 9223372036854775807, %1640 ], [ %1806, %1805 ]
  %1649 = load i32, i32* %10, align 4
  %1650 = trunc i32 %1644 to i8
  store i8 %1650, i8* %678, align 2
  switch i8 %57, label %1656 [
    i8 16, label %1651
    i8 24, label %1651
    i8 19, label %1651
    i8 20, label %1651
    i8 21, label %1651
    i8 22, label %1651
  ]

1651:                                             ; preds = %1643, %1643, %1643, %1643, %1643, %1643
  %1652 = icmp eq i32 %1644, 0
  %1653 = select i1 %1652, i8 38, i8 26
  %1654 = load i8*, i8** %679, align 16
  call void @llvm.memset.p0i8.i64(i8* align 1 %1654, i8 %1653, i64 32768, i1 false)
  %1655 = call i32 @av1_interinter_compound_motion_search(%struct.AV1_COMP* %0, %struct.macroblock* %1, %union.int_mv* %4, i8 zeroext %3, i8 zeroext %57) #5
  br label %1656

1656:                                             ; preds = %1643, %1651
  %1657 = phi i32 [ %1655, %1651 ], [ %1649, %1643 ]
  call void @av1_enc_build_inter_predictor(%struct.AV1Common* %51, %struct.macroblockd* %52, i32 %574, i32 %576, %struct.BUFFER_SET* %7, i8 zeroext %3, i32 0, i32 0) #5
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %680) #5
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %680, i8 -86, i64 40, i1 false)
  %1658 = load i32, i32* %10, align 4
  %1659 = add nsw i32 %1658, %1637
  %1660 = load i32, i32* %666, align 4
  %1661 = icmp eq i32 %1660, 0
  br i1 %1661, label %1753, label %1662

1662:                                             ; preds = %1656
  %1663 = load i32, i32* %681, align 4
  %1664 = load i32, i32* %682, align 8
  %1665 = sext i32 %1663 to i64
  %1666 = sext i32 %1664 to i64
  %1667 = getelementptr inbounds [22 x [2 x [2 x i8]]], [22 x [2 x [2 x i8]]]* @ss_size_lookup, i64 0, i64 %95, i64 %1665, i64 %1666
  %1668 = load i8, i8* %1667, align 1
  %1669 = zext i8 %1668 to i64
  %1670 = getelementptr inbounds [22 x i8], [22 x i8]* @block_size_high, i64 0, i64 %1669
  %1671 = load i8, i8* %1670, align 1
  %1672 = zext i8 %1671 to i32
  %1673 = getelementptr inbounds [22 x i8], [22 x i8]* @block_size_wide, i64 0, i64 %1669
  %1674 = load i8, i8* %1673, align 1
  %1675 = zext i8 %1674 to i32
  %1676 = load i32, i32* %683, align 16
  %1677 = icmp sgt i32 %1676, -1
  br i1 %1677, label %1686, label %1678

1678:                                             ; preds = %1662
  %1679 = add nsw i32 %1664, 3
  %1680 = ashr i32 %1676, %1679
  %1681 = add nsw i32 %1680, %1672
  %1682 = icmp slt i32 %1681, 0
  %1683 = icmp sgt i32 %1681, %1672
  %1684 = select i1 %1683, i32 %1672, i32 %1681
  %1685 = select i1 %1682, i32 0, i32 %1684
  br label %1686

1686:                                             ; preds = %1678, %1662
  %1687 = phi i32 [ %1685, %1678 ], [ %1672, %1662 ]
  %1688 = load i32, i32* %684, align 8
  %1689 = icmp sgt i32 %1688, -1
  br i1 %1689, label %1698, label %1690

1690:                                             ; preds = %1686
  %1691 = add nsw i32 %1663, 3
  %1692 = ashr i32 %1688, %1691
  %1693 = add nsw i32 %1692, %1675
  %1694 = icmp slt i32 %1693, 0
  %1695 = icmp sgt i32 %1693, %1675
  %1696 = select i1 %1695, i32 %1675, i32 %1693
  %1697 = select i1 %1694, i32 0, i32 %1696
  br label %1698

1698:                                             ; preds = %1690, %1686
  %1699 = phi i32 [ %1697, %1690 ], [ %1675, %1686 ]
  %1700 = load i32, i32* %685, align 16
  %1701 = load i64 (i8*, i32, i8*, i32, i32, i32)*, i64 (i8*, i32, i8*, i32, i32, i32)** @aom_sse, align 8
  %1702 = load i8*, i8** %659, align 8
  %1703 = load i32, i32* %660, align 8
  %1704 = load i8*, i8** %686, align 8
  %1705 = load i32, i32* %687, align 8
  %1706 = call i64 %1701(i8* %1702, i32 %1703, i8* %1704, i32 %1705, i32 %1699, i32 %1687) #5
  %1707 = shl i32 %1700, 1
  %1708 = add i32 %1707, -16
  %1709 = shl i32 1, %1708
  %1710 = ashr i32 %1709, 1
  %1711 = sext i32 %1710 to i64
  %1712 = add nsw i64 %1706, %1711
  %1713 = zext i32 %1708 to i64
  %1714 = ashr i64 %1712, %1713
  %1715 = sext i32 %1659 to i64
  %1716 = load i32, i32* %649, align 8
  %1717 = sext i32 %1716 to i64
  %1718 = mul nsw i64 %1717, %1715
  %1719 = add nsw i64 %1718, 256
  %1720 = ashr i64 %1719, 9
  %1721 = shl i64 %1714, 11
  %1722 = add nsw i64 %1720, %1721
  %1723 = load i32, i32* %666, align 4
  %1724 = sext i32 %1723 to i64
  %1725 = load i32, i32* %667, align 4
  %1726 = load i8, i8* %663, align 1
  %1727 = zext i8 %1726 to i32
  %1728 = add nuw nsw i32 %1727, 7
  %1729 = shl i32 %1725, %1728
  %1730 = zext i32 %1729 to i64
  %1731 = icmp slt i64 %1730, %14
  br i1 %1731, label %1732, label %1742

1732:                                             ; preds = %1698
  %1733 = getelementptr inbounds [5 x i32], [5 x i32]* @check_txfm_eval.level_to_qindex_map, i64 0, i64 %1724
  %1734 = load i32, i32* %1733, align 4
  %1735 = load i32, i32* %668, align 16
  %1736 = icmp slt i32 %1735, %1734
  br i1 %1736, label %1742, label %1737

1737:                                             ; preds = %1732
  %1738 = getelementptr inbounds [5 x i32], [5 x i32]* @check_txfm_eval.scale, i64 0, i64 %1724
  %1739 = load i32, i32* %1738, align 4
  %1740 = shl nsw i32 %1739, 2
  %1741 = sext i32 %1740 to i64
  br label %1742

1742:                                             ; preds = %1737, %1732, %1698
  %1743 = phi i64 [ %1741, %1737 ], [ 4, %1732 ], [ 4, %1698 ]
  br i1 %669, label %1753, label %1744

1744:                                             ; preds = %1742
  %1745 = getelementptr inbounds [5 x i32], [5 x i32]* @check_txfm_eval.luma_mul, i64 0, i64 %1724
  %1746 = load i32, i32* %1745, align 4
  %1747 = mul nsw i64 %1743, %14
  %1748 = sext i32 %1746 to i64
  %1749 = mul nsw i64 %1747, %1748
  %1750 = ashr i64 %1749, 6
  %1751 = icmp slt i64 %1750, %1722
  %1752 = or i1 %1641, %1751
  br i1 %1752, label %1805, label %1754

1753:                                             ; preds = %1742, %1656
  br i1 %1641, label %1805, label %1754

1754:                                             ; preds = %1744, %1753
  call void @av1_subtract_plane(%struct.macroblock* %1, i8 zeroext %3, i32 0) #5
  %1755 = load i8, i8* %673, align 1
  %1756 = call i64 @av1_estimate_txfm_yrd(%struct.AV1_COMP* %0, %struct.macroblock* %1, %struct.RD_STATS* nonnull %49, i64 %785, i8 zeroext %3, i8 zeroext %1755) #5
  %1757 = icmp eq i64 %1756, 9223372036854775807
  br i1 %1757, label %1805, label %1758

1758:                                             ; preds = %1754
  %1759 = load %struct.MB_MODE_INFO*, %struct.MB_MODE_INFO** %392, align 16
  %1760 = load %struct.MB_MODE_INFO*, %struct.MB_MODE_INFO** %394, align 8
  %1761 = icmp eq %struct.MB_MODE_INFO* %1759, null
  br i1 %1761, label %1766, label %1762

1762:                                             ; preds = %1758
  %1763 = getelementptr inbounds %struct.MB_MODE_INFO, %struct.MB_MODE_INFO* %1759, i64 0, i32 23
  %1764 = load i8, i8* %1763, align 8
  %1765 = sext i8 %1764 to i64
  br label %1766

1766:                                             ; preds = %1762, %1758
  %1767 = phi i64 [ %1765, %1762 ], [ 0, %1758 ]
  %1768 = icmp eq %struct.MB_MODE_INFO* %1760, null
  br i1 %1768, label %1773, label %1769

1769:                                             ; preds = %1766
  %1770 = getelementptr inbounds %struct.MB_MODE_INFO, %struct.MB_MODE_INFO* %1760, i64 0, i32 23
  %1771 = load i8, i8* %1770, align 8
  %1772 = sext i8 %1771 to i64
  br label %1773

1773:                                             ; preds = %1769, %1766
  %1774 = phi i64 [ %1772, %1769 ], [ 0, %1766 ]
  %1775 = add nsw i64 %1774, %1767
  %1776 = load i32, i32* %688, align 8
  %1777 = icmp eq i32 %1776, 0
  br i1 %1777, label %1781, label %1778

1778:                                             ; preds = %1773
  %1779 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 20, i32 38, i64 %1775, i64 1
  %1780 = load i32, i32* %1779, align 4
  br label %1786

1781:                                             ; preds = %1773
  %1782 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 20, i32 38, i64 %1775, i64 0
  %1783 = load i32, i32* %1782, align 4
  %1784 = load i32, i32* %689, align 8
  %1785 = add nsw i32 %1784, %1783
  br label %1786

1786:                                             ; preds = %1781, %1778
  %1787 = phi i32 [ %1780, %1778 ], [ %1785, %1781 ]
  store i32 %1787, i32* %689, align 8
  %1788 = add nsw i32 %1657, %1637
  %1789 = add nsw i32 %1788, %1787
  %1790 = sext i32 %1789 to i64
  %1791 = load i32, i32* %649, align 8
  %1792 = sext i32 %1791 to i64
  %1793 = mul nsw i64 %1790, %1792
  %1794 = add nsw i64 %1793, 256
  %1795 = ashr i64 %1794, 9
  %1796 = load i64, i64* %690, align 8
  %1797 = shl nsw i64 %1796, 7
  %1798 = add nsw i64 %1795, %1797
  %1799 = icmp slt i64 %1798, %1648
  br i1 %1799, label %1800, label %1805

1800:                                             ; preds = %1786
  %1801 = load i8, i8* %678, align 2
  %1802 = zext i8 %1801 to i32
  %1803 = load i32, i32* %691, align 8
  %1804 = load i32, i32* %692, align 4
  br label %1805

1805:                                             ; preds = %1744, %1753, %1754, %1800, %1786
  %1806 = phi i64 [ %1798, %1800 ], [ %1648, %1786 ], [ %1648, %1754 ], [ %1648, %1753 ], [ %1648, %1744 ]
  %1807 = phi i32 [ %1804, %1800 ], [ %1647, %1786 ], [ %1647, %1754 ], [ %1647, %1753 ], [ %1647, %1744 ]
  %1808 = phi i32 [ %1803, %1800 ], [ %1646, %1786 ], [ %1646, %1754 ], [ %1646, %1753 ], [ %1646, %1744 ]
  %1809 = phi i32 [ %1802, %1800 ], [ %1645, %1786 ], [ %1645, %1754 ], [ %1645, %1753 ], [ %1645, %1744 ]
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %680) #5
  %1810 = add nuw nsw i32 %1644, 1
  %1811 = icmp ult i32 %1810, 2
  br i1 %1811, label %1643, label %1642

1812:                                             ; preds = %1642
  %1813 = load i32, i32* %699, align 4
  %1814 = icmp eq i32 %1813, 0
  %1815 = and i1 %700, %1814
  br i1 %1815, label %1995, label %1816

1816:                                             ; preds = %1812
  store i32 %1809, i32* %677, align 4
  br label %1995

1817:                                             ; preds = %1636, %1642
  %1818 = phi i64 [ %1806, %1642 ], [ 9223372036854775807, %1636 ]
  %1819 = phi i32 [ %1657, %1642 ], [ %782, %1636 ]
  %1820 = load i32, i32* %677, align 4
  %1821 = trunc i32 %1820 to i8
  store i8 %1821, i8* %678, align 2
  %1822 = load i8, i8* %646, align 1
  %1823 = icmp eq i8 %1822, 2
  br i1 %1823, label %1824, label %1836

1824:                                             ; preds = %1817
  %1825 = load i8, i8* %693, align 8
  %1826 = zext i8 %1825 to i64
  %1827 = getelementptr inbounds [22 x %struct.wedge_params_type], [22 x %struct.wedge_params_type]* @av1_wedge_params_lookup, i64 0, i64 %1826, i32 0
  %1828 = load i32, i32* %1827, align 16
  %1829 = icmp slt i32 %1828, 1
  br i1 %1829, label %1836, label %1830

1830:                                             ; preds = %1824
  %1831 = load i8, i8* %694, align 8
  %1832 = sext i8 %1831 to i64
  %1833 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 20, i32 29, i64 %1826, i64 %1832
  %1834 = load i32, i32* %1833, align 4
  %1835 = add nsw i32 %1834, 512
  br label %1836

1836:                                             ; preds = %1817, %1824, %1830
  %1837 = phi i32 [ %1835, %1830 ], [ 0, %1824 ], [ 512, %1817 ]
  %1838 = add nsw i32 %1837, %798
  %1839 = icmp eq i8 %1821, 0
  %1840 = load i8*, i8** %679, align 16
  %1841 = select i1 %1839, i8 38, i8 26
  call void @llvm.memset.p0i8.i64(i8* align 1 %1840, i8 %1841, i64 32768, i1 false)
  switch i8 %57, label %1844 [
    i8 16, label %1842
    i8 24, label %1842
    i8 19, label %1842
    i8 20, label %1842
    i8 21, label %1842
    i8 22, label %1842
  ]

1842:                                             ; preds = %1836, %1836, %1836, %1836, %1836, %1836
  %1843 = call i32 @av1_interinter_compound_motion_search(%struct.AV1_COMP* %0, %struct.macroblock* %1, %union.int_mv* %4, i8 zeroext %3, i8 zeroext %57) #5
  br label %1844

1844:                                             ; preds = %1836, %1842
  %1845 = phi i32 [ %1843, %1842 ], [ %1819, %1836 ]
  %1846 = load i8, i8* %678, align 2
  %1847 = zext i8 %1846 to i32
  %1848 = load i32, i32* %691, align 8
  %1849 = load i32, i32* %692, align 4
  call void @av1_enc_build_inter_predictor(%struct.AV1Common* %51, %struct.macroblockd* %52, i32 %574, i32 %576, %struct.BUFFER_SET* %7, i8 zeroext %3, i32 0, i32 0) #5
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %695) #5
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %695, i8 -86, i64 40, i1 false)
  %1850 = load i32, i32* %10, align 4
  %1851 = add nsw i32 %1850, %1838
  %1852 = load i32, i32* %666, align 4
  %1853 = icmp eq i32 %1852, 0
  br i1 %1853, label %1946, label %1854

1854:                                             ; preds = %1844
  %1855 = load i32, i32* %681, align 4
  %1856 = load i32, i32* %682, align 8
  %1857 = sext i32 %1855 to i64
  %1858 = sext i32 %1856 to i64
  %1859 = getelementptr inbounds [22 x [2 x [2 x i8]]], [22 x [2 x [2 x i8]]]* @ss_size_lookup, i64 0, i64 %95, i64 %1857, i64 %1858
  %1860 = load i8, i8* %1859, align 1
  %1861 = zext i8 %1860 to i64
  %1862 = getelementptr inbounds [22 x i8], [22 x i8]* @block_size_high, i64 0, i64 %1861
  %1863 = load i8, i8* %1862, align 1
  %1864 = zext i8 %1863 to i32
  %1865 = getelementptr inbounds [22 x i8], [22 x i8]* @block_size_wide, i64 0, i64 %1861
  %1866 = load i8, i8* %1865, align 1
  %1867 = zext i8 %1866 to i32
  %1868 = load i32, i32* %683, align 16
  %1869 = icmp sgt i32 %1868, -1
  br i1 %1869, label %1878, label %1870

1870:                                             ; preds = %1854
  %1871 = add nsw i32 %1856, 3
  %1872 = ashr i32 %1868, %1871
  %1873 = add nsw i32 %1872, %1864
  %1874 = icmp slt i32 %1873, 0
  %1875 = icmp sgt i32 %1873, %1864
  %1876 = select i1 %1875, i32 %1864, i32 %1873
  %1877 = select i1 %1874, i32 0, i32 %1876
  br label %1878

1878:                                             ; preds = %1870, %1854
  %1879 = phi i32 [ %1877, %1870 ], [ %1864, %1854 ]
  %1880 = load i32, i32* %684, align 8
  %1881 = icmp sgt i32 %1880, -1
  br i1 %1881, label %1890, label %1882

1882:                                             ; preds = %1878
  %1883 = add nsw i32 %1855, 3
  %1884 = ashr i32 %1880, %1883
  %1885 = add nsw i32 %1884, %1867
  %1886 = icmp slt i32 %1885, 0
  %1887 = icmp sgt i32 %1885, %1867
  %1888 = select i1 %1887, i32 %1867, i32 %1885
  %1889 = select i1 %1886, i32 0, i32 %1888
  br label %1890

1890:                                             ; preds = %1882, %1878
  %1891 = phi i32 [ %1889, %1882 ], [ %1867, %1878 ]
  %1892 = load i32, i32* %685, align 16
  %1893 = load i64 (i8*, i32, i8*, i32, i32, i32)*, i64 (i8*, i32, i8*, i32, i32, i32)** @aom_sse, align 8
  %1894 = load i8*, i8** %659, align 8
  %1895 = load i32, i32* %660, align 8
  %1896 = load i8*, i8** %686, align 8
  %1897 = load i32, i32* %687, align 8
  %1898 = call i64 %1893(i8* %1894, i32 %1895, i8* %1896, i32 %1897, i32 %1891, i32 %1879) #5
  %1899 = shl i32 %1892, 1
  %1900 = add i32 %1899, -16
  %1901 = shl i32 1, %1900
  %1902 = ashr i32 %1901, 1
  %1903 = sext i32 %1902 to i64
  %1904 = add nsw i64 %1898, %1903
  %1905 = zext i32 %1900 to i64
  %1906 = ashr i64 %1904, %1905
  %1907 = sext i32 %1851 to i64
  %1908 = load i32, i32* %649, align 8
  %1909 = sext i32 %1908 to i64
  %1910 = mul nsw i64 %1909, %1907
  %1911 = add nsw i64 %1910, 256
  %1912 = ashr i64 %1911, 9
  %1913 = shl i64 %1906, 11
  %1914 = add nsw i64 %1912, %1913
  %1915 = load i32, i32* %666, align 4
  %1916 = sext i32 %1915 to i64
  %1917 = load i32, i32* %667, align 4
  %1918 = load i8, i8* %663, align 1
  %1919 = zext i8 %1918 to i32
  %1920 = add nuw nsw i32 %1919, 7
  %1921 = shl i32 %1917, %1920
  %1922 = zext i32 %1921 to i64
  %1923 = icmp slt i64 %1922, %14
  br i1 %1923, label %1924, label %1934

1924:                                             ; preds = %1890
  %1925 = getelementptr inbounds [5 x i32], [5 x i32]* @check_txfm_eval.level_to_qindex_map, i64 0, i64 %1916
  %1926 = load i32, i32* %1925, align 4
  %1927 = load i32, i32* %668, align 16
  %1928 = icmp slt i32 %1927, %1926
  br i1 %1928, label %1934, label %1929

1929:                                             ; preds = %1924
  %1930 = getelementptr inbounds [5 x i32], [5 x i32]* @check_txfm_eval.scale, i64 0, i64 %1916
  %1931 = load i32, i32* %1930, align 4
  %1932 = shl nsw i32 %1931, 2
  %1933 = sext i32 %1932 to i64
  br label %1934

1934:                                             ; preds = %1929, %1924, %1890
  %1935 = phi i64 [ %1933, %1929 ], [ 4, %1924 ], [ 4, %1890 ]
  br i1 %669, label %1946, label %1936

1936:                                             ; preds = %1934
  %1937 = getelementptr inbounds [5 x i32], [5 x i32]* @check_txfm_eval.luma_mul, i64 0, i64 %1916
  %1938 = load i32, i32* %1937, align 4
  %1939 = mul nsw i64 %1935, %14
  %1940 = sext i32 %1938 to i64
  %1941 = mul nsw i64 %1939, %1940
  %1942 = ashr i64 %1941, 6
  %1943 = icmp slt i64 %1942, %1914
  %1944 = icmp slt i64 %785, 0
  %1945 = or i1 %1944, %1943
  br i1 %1945, label %1993, label %1948

1946:                                             ; preds = %1934, %1844
  %1947 = icmp slt i64 %785, 0
  br i1 %1947, label %1993, label %1948

1948:                                             ; preds = %1936, %1946
  call void @av1_subtract_plane(%struct.macroblock* %1, i8 zeroext %3, i32 0) #5
  %1949 = load i8, i8* %673, align 1
  %1950 = call i64 @av1_estimate_txfm_yrd(%struct.AV1_COMP* %0, %struct.macroblock* %1, %struct.RD_STATS* nonnull %50, i64 %785, i8 zeroext %3, i8 zeroext %1949) #5
  %1951 = icmp eq i64 %1950, 9223372036854775807
  br i1 %1951, label %1993, label %1952

1952:                                             ; preds = %1948
  %1953 = load %struct.MB_MODE_INFO*, %struct.MB_MODE_INFO** %392, align 16
  %1954 = load %struct.MB_MODE_INFO*, %struct.MB_MODE_INFO** %394, align 8
  %1955 = icmp eq %struct.MB_MODE_INFO* %1953, null
  br i1 %1955, label %1960, label %1956

1956:                                             ; preds = %1952
  %1957 = getelementptr inbounds %struct.MB_MODE_INFO, %struct.MB_MODE_INFO* %1953, i64 0, i32 23
  %1958 = load i8, i8* %1957, align 8
  %1959 = sext i8 %1958 to i64
  br label %1960

1960:                                             ; preds = %1956, %1952
  %1961 = phi i64 [ %1959, %1956 ], [ 0, %1952 ]
  %1962 = icmp eq %struct.MB_MODE_INFO* %1954, null
  br i1 %1962, label %1967, label %1963

1963:                                             ; preds = %1960
  %1964 = getelementptr inbounds %struct.MB_MODE_INFO, %struct.MB_MODE_INFO* %1954, i64 0, i32 23
  %1965 = load i8, i8* %1964, align 8
  %1966 = sext i8 %1965 to i64
  br label %1967

1967:                                             ; preds = %1963, %1960
  %1968 = phi i64 [ %1966, %1963 ], [ 0, %1960 ]
  %1969 = add nsw i64 %1968, %1961
  %1970 = load i32, i32* %696, align 8
  %1971 = icmp eq i32 %1970, 0
  br i1 %1971, label %1975, label %1972

1972:                                             ; preds = %1967
  %1973 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 20, i32 38, i64 %1969, i64 1
  %1974 = load i32, i32* %1973, align 4
  br label %1980

1975:                                             ; preds = %1967
  %1976 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 20, i32 38, i64 %1969, i64 0
  %1977 = load i32, i32* %1976, align 4
  %1978 = load i32, i32* %697, align 8
  %1979 = add nsw i32 %1978, %1977
  br label %1980

1980:                                             ; preds = %1972, %1975
  %1981 = phi i32 [ %1974, %1972 ], [ %1979, %1975 ]
  store i32 %1981, i32* %697, align 8
  %1982 = add nsw i32 %1845, %1838
  %1983 = add nsw i32 %1982, %1981
  %1984 = sext i32 %1983 to i64
  %1985 = load i32, i32* %649, align 8
  %1986 = sext i32 %1985 to i64
  %1987 = mul nsw i64 %1984, %1986
  %1988 = add nsw i64 %1987, 256
  %1989 = ashr i64 %1988, 9
  %1990 = load i64, i64* %698, align 8
  %1991 = shl i64 %1990, 7
  %1992 = add nsw i64 %1989, %1991
  br label %1993

1993:                                             ; preds = %1948, %1946, %1936, %1980
  %1994 = phi i64 [ %1992, %1980 ], [ %1818, %1936 ], [ %1818, %1946 ], [ %1818, %1948 ]
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %695) #5
  br label %1995

1995:                                             ; preds = %1812, %1816, %1993
  %1996 = phi i32 [ %1637, %1812 ], [ %1637, %1816 ], [ %1838, %1993 ]
  %1997 = phi i32 [ %1657, %1812 ], [ %1657, %1816 ], [ %1845, %1993 ]
  %1998 = phi i64 [ %1806, %1812 ], [ %1806, %1816 ], [ %1994, %1993 ]
  %1999 = phi i32 [ %1807, %1812 ], [ %1807, %1816 ], [ %1849, %1993 ]
  %2000 = phi i32 [ %1808, %1812 ], [ %1808, %1816 ], [ %1848, %1993 ]
  %2001 = phi i32 [ %1809, %1812 ], [ %1809, %1816 ], [ %1847, %1993 ]
  %2002 = trunc i32 %2001 to i8
  store i8 %2002, i8* %678, align 2
  store i32 %2000, i32* %691, align 8
  store i32 %1999, i32* %692, align 4
  br label %2274

2003:                                             ; preds = %1631
  %2004 = load i32, i32* %651, align 4
  %2005 = sext i32 %2004 to i64
  %2006 = getelementptr inbounds [3 x i32], [3 x i32]* @comp_type_rd_threshold_mul, i64 0, i64 %2005
  %2007 = load i32, i32* %2006, align 4
  %2008 = getelementptr inbounds [3 x i32], [3 x i32]* @comp_type_rd_threshold_div, i64 0, i64 %2005
  %2009 = load i32, i32* %2008, align 4
  %2010 = load i64, i64* %11, align 8
  %2011 = sext i32 %2009 to i64
  %2012 = sdiv i64 %2010, %2011
  %2013 = sext i32 %2007 to i64
  %2014 = mul nsw i64 %2012, %2013
  %2015 = icmp slt i64 %2014, %785
  br i1 %2015, label %2016, label %2288

2016:                                             ; preds = %2003
  %2017 = icmp slt i64 %2010, %16
  %2018 = select i1 %2017, i64 %2010, i64 %16
  %2019 = load i32, i32* %10, align 4
  %2020 = load i16*, i16** %652, align 8
  %2021 = load i16*, i16** %653, align 8
  %2022 = load %struct.MB_MODE_INFO**, %struct.MB_MODE_INFO*** %53, align 8
  %2023 = load %struct.MB_MODE_INFO*, %struct.MB_MODE_INFO** %2022, align 8
  %2024 = getelementptr inbounds %struct.MB_MODE_INFO, %struct.MB_MODE_INFO* %2023, i64 0, i32 17, i32 4
  %2025 = load i8, i8* %2024, align 1
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %654) #5
  store i32 -1431655766, i32* %20, align 4
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %655) #5
  store i32 -1431655766, i32* %21, align 4
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %656) #5
  store i64 -6148914691236517206, i64* %22, align 8
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %657) #5
  store i64 -6148914691236517206, i64* %23, align 8
  %2026 = icmp eq i32 %767, 0
  br i1 %2026, label %2038, label %2027

2027:                                             ; preds = %2016
  %2028 = load i8, i8* %322, align 1
  %2029 = zext i8 %2028 to i32
  call void @av1_build_inter_predictors_for_planes_single_buf(%struct.macroblockd* %52, i8 zeroext %3, i32 0, i32 0, i32 0, i8** nonnull %102, i32* nonnull %113) #5
  call void @av1_build_inter_predictors_for_planes_single_buf(%struct.macroblockd* %52, i8 zeroext %3, i32 0, i32 0, i32 1, i8** nonnull %107, i32* nonnull %113) #5
  %2030 = load void (i32, i32, i16*, i64, i8*, i64, i8*, i64)*, void (i32, i32, i16*, i64, i8*, i64, i8*, i64)** @aom_subtract_block, align 8
  %2031 = load i8*, i8** %659, align 8
  %2032 = load i32, i32* %660, align 8
  %2033 = sext i32 %2032 to i64
  %2034 = load i8*, i8** %107, align 8
  call void %2030(i32 %2029, i32 %98, i16* %2020, i64 %658, i8* %2031, i64 %2033, i8* %2034, i64 %658) #5
  %2035 = load void (i32, i32, i16*, i64, i8*, i64, i8*, i64)*, void (i32, i32, i16*, i64, i8*, i64, i8*, i64)** @aom_subtract_block, align 8
  %2036 = load i8*, i8** %107, align 8
  %2037 = load i8*, i8** %102, align 8
  call void %2035(i32 %2029, i32 %98, i16* %2021, i64 %658, i8* %2036, i64 %658, i8* %2037, i64 %658) #5
  br label %2038

2038:                                             ; preds = %2027, %2016
  %2039 = zext i8 %2025 to i64
  %2040 = icmp eq i8 %2025, 2
  br i1 %2040, label %2041, label %2063

2041:                                             ; preds = %2038
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %661) #5
  store i32 -1431655766, i32* %24, align 4
  %2042 = load i8*, i8** %102, align 8
  %2043 = load %struct.AV1_PRIMARY*, %struct.AV1_PRIMARY** %662, align 16
  %2044 = getelementptr inbounds %struct.AV1_PRIMARY, %struct.AV1_PRIMARY* %2043, i64 0, i32 21, i64 %95, i32 3
  %2045 = load i32 (i8*, i32, i8*, i32, i32*)*, i32 (i8*, i32, i8*, i32, i32*)** %2044, align 8
  %2046 = load i32, i32* %113, align 4
  %2047 = load i8*, i8** %107, align 8
  %2048 = call i32 %2045(i8* %2042, i32 %2046, i8* %2047, i32 %2046, i32* nonnull %24) #5
  %2049 = load i32, i32* %24, align 4
  %2050 = load i8, i8* %663, align 1
  %2051 = zext i8 %2050 to i32
  %2052 = shl i32 1, %2051
  %2053 = ashr i32 %2052, 1
  %2054 = add i32 %2053, %2049
  %2055 = lshr i32 %2054, %2051
  %2056 = icmp ult i32 %2055, 8
  br i1 %2056, label %2061, label %2057

2057:                                             ; preds = %2041
  switch i8 %57, label %2058 [
    i8 16, label %2062
    i8 24, label %2062
    i8 19, label %2062
    i8 20, label %2062
    i8 21, label %2062
  ]

2058:                                             ; preds = %2057
  %2059 = icmp ult i32 %2055, 64
  %2060 = and i1 %664, %2059
  br i1 %2060, label %2061, label %2062

2061:                                             ; preds = %2058, %2041
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %661) #5
  br label %2269

2062:                                             ; preds = %2058, %2057, %2057, %2057, %2057, %2057
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %661) #5
  br label %2063

2063:                                             ; preds = %2062, %2038
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %665) #5
  store i64 -1, i64* %25, align 8
  %2064 = add nsw i64 %2039, -2
  %2065 = getelementptr inbounds [2 x i64 (%struct.AV1_COMP*, %struct.macroblock*, i8, i8*, i8*, i16*, i16*, i64*)*], [2 x i64 (%struct.AV1_COMP*, %struct.macroblock*, i8, i8*, i8*, i16*, i16*, i64*)*]* @__const.masked_compound_type_rd.pick_interinter_mask, i64 0, i64 %2064
  %2066 = load i64 (%struct.AV1_COMP*, %struct.macroblock*, i8, i8*, i8*, i16*, i16*, i64*)*, i64 (%struct.AV1_COMP*, %struct.macroblock*, i8, i8*, i8*, i16*, i16*, i64*)** %2065, align 8
  %2067 = load i8*, i8** %102, align 8
  %2068 = load i8*, i8** %107, align 8
  %2069 = call i64 %2066(%struct.AV1_COMP* %0, %struct.macroblock* %1, i8 zeroext %3, i8* %2067, i8* %2068, i16* %2020, i16* %2021, i64* nonnull %25) #5
  %2070 = load i8, i8* %2024, align 1
  %2071 = icmp eq i8 %2070, 2
  br i1 %2071, label %2072, label %2086

2072:                                             ; preds = %2063
  %2073 = getelementptr inbounds %struct.MB_MODE_INFO, %struct.MB_MODE_INFO* %2023, i64 0, i32 0
  %2074 = load i8, i8* %2073, align 8
  %2075 = zext i8 %2074 to i64
  %2076 = getelementptr inbounds [22 x %struct.wedge_params_type], [22 x %struct.wedge_params_type]* @av1_wedge_params_lookup, i64 0, i64 %2075, i32 0
  %2077 = load i32, i32* %2076, align 16
  %2078 = icmp slt i32 %2077, 1
  br i1 %2078, label %2086, label %2079

2079:                                             ; preds = %2072
  %2080 = getelementptr inbounds %struct.MB_MODE_INFO, %struct.MB_MODE_INFO* %2023, i64 0, i32 17, i32 1
  %2081 = load i8, i8* %2080, align 8
  %2082 = sext i8 %2081 to i64
  %2083 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 20, i32 29, i64 %2075, i64 %2082
  %2084 = load i32, i32* %2083, align 4
  %2085 = add nsw i32 %2084, 512
  br label %2086

2086:                                             ; preds = %2079, %2072, %2063
  %2087 = phi i32 [ %2085, %2079 ], [ 0, %2072 ], [ 512, %2063 ]
  %2088 = add nsw i32 %2087, %798
  %2089 = add nsw i32 %2088, %2019
  %2090 = sext i32 %2089 to i64
  %2091 = load i32, i32* %649, align 8
  %2092 = sext i32 %2091 to i64
  %2093 = mul nsw i64 %2090, %2092
  %2094 = add nsw i64 %2093, 256
  %2095 = ashr i64 %2094, 9
  %2096 = add nsw i64 %2095, %2069
  %2097 = load i64, i64* %25, align 8
  %2098 = shl i64 %2097, 11
  %2099 = add i64 %2095, %2098
  %2100 = add nsw i32 %2088, %799
  %2101 = sext i32 %2100 to i64
  %2102 = mul nsw i64 %2101, %2092
  %2103 = add nsw i64 %2102, 256
  %2104 = ashr i64 %2103, 9
  %2105 = icmp sgt i64 %2104, %2018
  br i1 %2105, label %2265, label %2106

2106:                                             ; preds = %2086
  %2107 = load i32, i32* %666, align 4
  %2108 = icmp eq i32 %2107, 0
  br i1 %2108, label %2138, label %2109

2109:                                             ; preds = %2106
  %2110 = sext i32 %2107 to i64
  %2111 = load i32, i32* %667, align 4
  %2112 = load i8, i8* %663, align 1
  %2113 = zext i8 %2112 to i32
  %2114 = add nuw nsw i32 %2113, 7
  %2115 = shl i32 %2111, %2114
  %2116 = zext i32 %2115 to i64
  %2117 = icmp slt i64 %2116, %14
  br i1 %2117, label %2118, label %2128

2118:                                             ; preds = %2109
  %2119 = getelementptr inbounds [5 x i32], [5 x i32]* @check_txfm_eval.level_to_qindex_map, i64 0, i64 %2110
  %2120 = load i32, i32* %2119, align 4
  %2121 = load i32, i32* %668, align 16
  %2122 = icmp slt i32 %2121, %2120
  br i1 %2122, label %2128, label %2123

2123:                                             ; preds = %2118
  %2124 = getelementptr inbounds [5 x i32], [5 x i32]* @check_txfm_eval.scale, i64 0, i64 %2110
  %2125 = load i32, i32* %2124, align 4
  %2126 = shl nsw i32 %2125, 2
  %2127 = sext i32 %2126 to i64
  br label %2128

2128:                                             ; preds = %2123, %2118, %2109
  %2129 = phi i64 [ %2127, %2123 ], [ 4, %2118 ], [ 4, %2109 ]
  br i1 %669, label %2138, label %2130

2130:                                             ; preds = %2128
  %2131 = getelementptr inbounds [5 x i32], [5 x i32]* @check_txfm_eval.luma_mul, i64 0, i64 %2110
  %2132 = load i32, i32* %2131, align 4
  %2133 = mul nsw i64 %2129, %14
  %2134 = sext i32 %2132 to i64
  %2135 = mul nsw i64 %2133, %2134
  %2136 = ashr i64 %2135, 6
  %2137 = icmp slt i64 %2136, %2099
  br i1 %2137, label %2265, label %2138

2138:                                             ; preds = %2130, %2128, %2106
  %2139 = getelementptr inbounds [4 x i32], [4 x i32]* %34, i64 0, i64 %2039
  %2140 = load i32, i32* %2139, align 4
  %2141 = icmp eq i32 %2140, 2147483647
  br i1 %2141, label %2142, label %2244

2142:                                             ; preds = %2138
  switch i8 %57, label %2152 [
    i8 16, label %2143
    i8 24, label %2143
    i8 19, label %2143
    i8 20, label %2143
    i8 21, label %2143
    i8 22, label %2143
  ]

2143:                                             ; preds = %2142, %2142, %2142, %2142, %2142, %2142
  br i1 %2040, label %2144, label %2152

2144:                                             ; preds = %2143
  %2145 = load i32, i32* %670, align 4
  %2146 = icmp eq i32 %2145, 0
  br i1 %2146, label %2147, label %2152

2147:                                             ; preds = %2144
  %2148 = call i32 @av1_interinter_compound_motion_search(%struct.AV1_COMP* %0, %struct.macroblock* %1, %union.int_mv* %4, i8 zeroext %3, i8 zeroext %57) #5
  %2149 = load i32, i32* %573, align 16
  %2150 = load i32, i32* %575, align 4
  call void @av1_enc_build_inter_predictor(%struct.AV1Common* %51, %struct.macroblockd* %52, i32 %2149, i32 %2150, %struct.BUFFER_SET* %7, i8 zeroext %3, i32 0, i32 0) #5
  %2151 = add nsw i32 %2148, %2088
  br label %2153

2152:                                             ; preds = %2144, %2143, %2142
  call void @av1_build_wedge_inter_predictor_from_buf(%struct.macroblockd* %52, i8 zeroext %3, i32 0, i32 0, i8** nonnull %102, i32* nonnull %113, i8** nonnull %107, i32* nonnull %113) #5
  br label %2153

2153:                                             ; preds = %2152, %2147
  %2154 = phi i32 [ %2089, %2152 ], [ %2151, %2147 ]
  %2155 = phi i32 [ %2019, %2152 ], [ %2148, %2147 ]
  %2156 = phi i1 [ true, %2152 ], [ false, %2147 ]
  call fastcc void @model_rd_for_sb_with_curvfit(i8 zeroext %3, %struct.macroblock* %1, %struct.macroblockd* %52, i32 0, i32 0, i32* nonnull %20, i64* nonnull %22, i32* nonnull %21, i64* nonnull %23, i32* null, i64* null, i64* null) #5
  %2157 = load i32, i32* %20, align 4
  %2158 = add nsw i32 %2154, %2157
  %2159 = sext i32 %2158 to i64
  %2160 = load i32, i32* %649, align 8
  %2161 = sext i32 %2160 to i64
  %2162 = mul nsw i64 %2159, %2161
  %2163 = add nsw i64 %2162, 256
  %2164 = ashr i64 %2163, 9
  %2165 = load i64, i64* %22, align 8
  %2166 = shl nsw i64 %2165, 7
  %2167 = add nsw i64 %2164, %2166
  %2168 = icmp slt i64 %2167, %2096
  %2169 = or i1 %2156, %2168
  br i1 %2169, label %2175, label %2170

2170:                                             ; preds = %2153
  %2171 = load i32, i32* %301, align 4
  %2172 = getelementptr inbounds %struct.MB_MODE_INFO, %struct.MB_MODE_INFO* %2023, i64 0, i32 5, i64 0, i32 0
  store i32 %2171, i32* %2172, align 8
  %2173 = load i32, i32* %303, align 4
  %2174 = getelementptr inbounds %struct.MB_MODE_INFO, %struct.MB_MODE_INFO* %2023, i64 0, i32 5, i64 1, i32 0
  store i32 %2173, i32* %2174, align 4
  call void @av1_build_wedge_inter_predictor_from_buf(%struct.macroblockd* %52, i8 zeroext %3, i32 0, i32 0, i8** nonnull %102, i32* nonnull %113, i8** nonnull %107, i32* nonnull %113) #5
  br label %2175

2175:                                             ; preds = %2170, %2153
  %2176 = phi i32 [ %2155, %2153 ], [ %2019, %2170 ]
  %2177 = phi i64 [ %2167, %2153 ], [ %2096, %2170 ]
  %2178 = load i32, i32* %671, align 4
  %2179 = icmp eq i32 %2178, 0
  br i1 %2179, label %2184, label %2180

2180:                                             ; preds = %2175
  %2181 = icmp sgt i64 %2177, %770
  %2182 = icmp ne i64 %770, 9223372036854775807
  %2183 = and i1 %2182, %2181
  br i1 %2183, label %2265, label %2184

2184:                                             ; preds = %2180, %2175
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %672) #5
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %672, i8 -86, i64 40, i1 false) #5
  %2185 = add nsw i32 %2176, %2088
  %2186 = sext i32 %2185 to i64
  %2187 = load i32, i32* %649, align 8
  %2188 = sext i32 %2187 to i64
  %2189 = mul nsw i64 %2188, %2186
  %2190 = add nsw i64 %2189, 256
  %2191 = ashr i64 %2190, 9
  %2192 = sub nsw i64 %2018, %2191
  %2193 = icmp slt i64 %2192, 0
  br i1 %2193, label %2242, label %2194

2194:                                             ; preds = %2184
  call void @av1_subtract_plane(%struct.macroblock* %1, i8 zeroext %3, i32 0) #5
  %2195 = load i8, i8* %673, align 1
  %2196 = call i64 @av1_estimate_txfm_yrd(%struct.AV1_COMP* %0, %struct.macroblock* %1, %struct.RD_STATS* nonnull %26, i64 %2192, i8 zeroext %3, i8 zeroext %2195) #5
  %2197 = icmp eq i64 %2196, 9223372036854775807
  br i1 %2197, label %2242, label %2198

2198:                                             ; preds = %2194
  %2199 = load %struct.MB_MODE_INFO*, %struct.MB_MODE_INFO** %392, align 16
  %2200 = load %struct.MB_MODE_INFO*, %struct.MB_MODE_INFO** %394, align 8
  %2201 = icmp eq %struct.MB_MODE_INFO* %2199, null
  br i1 %2201, label %2206, label %2202

2202:                                             ; preds = %2198
  %2203 = getelementptr inbounds %struct.MB_MODE_INFO, %struct.MB_MODE_INFO* %2199, i64 0, i32 23
  %2204 = load i8, i8* %2203, align 8
  %2205 = sext i8 %2204 to i64
  br label %2206

2206:                                             ; preds = %2202, %2198
  %2207 = phi i64 [ %2205, %2202 ], [ 0, %2198 ]
  %2208 = icmp eq %struct.MB_MODE_INFO* %2200, null
  br i1 %2208, label %2213, label %2209

2209:                                             ; preds = %2206
  %2210 = getelementptr inbounds %struct.MB_MODE_INFO, %struct.MB_MODE_INFO* %2200, i64 0, i32 23
  %2211 = load i8, i8* %2210, align 8
  %2212 = sext i8 %2211 to i64
  br label %2213

2213:                                             ; preds = %2209, %2206
  %2214 = phi i64 [ %2212, %2209 ], [ 0, %2206 ]
  %2215 = add nsw i64 %2214, %2207
  %2216 = load i32, i32* %674, align 8
  %2217 = icmp eq i32 %2216, 0
  br i1 %2217, label %2221, label %2218

2218:                                             ; preds = %2213
  %2219 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 20, i32 38, i64 %2215, i64 1
  %2220 = load i32, i32* %2219, align 4
  br label %2226

2221:                                             ; preds = %2213
  %2222 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 20, i32 38, i64 %2215, i64 0
  %2223 = load i32, i32* %2222, align 4
  %2224 = load i32, i32* %675, align 8
  %2225 = add nsw i32 %2224, %2223
  br label %2226

2226:                                             ; preds = %2221, %2218
  %2227 = phi i32 [ %2220, %2218 ], [ %2225, %2221 ]
  store i32 %2227, i32* %675, align 8
  %2228 = add nsw i32 %2227, %2185
  %2229 = sext i32 %2228 to i64
  %2230 = load i32, i32* %649, align 8
  %2231 = sext i32 %2230 to i64
  %2232 = mul nsw i64 %2229, %2231
  %2233 = add nsw i64 %2232, 256
  %2234 = ashr i64 %2233, 9
  %2235 = load i64, i64* %676, align 8
  %2236 = shl i64 %2235, 7
  %2237 = add nsw i64 %2234, %2236
  store i32 %2227, i32* %2139, align 4
  %2238 = getelementptr inbounds [4 x i64], [4 x i64]* %33, i64 0, i64 %2039
  store i64 %2235, i64* %2238, align 8
  %2239 = getelementptr inbounds [4 x i32], [4 x i32]* %36, i64 0, i64 %2039
  store i32 %2157, i32* %2239, align 4
  %2240 = getelementptr inbounds [4 x i64], [4 x i64]* %37, i64 0, i64 %2039
  store i64 %2165, i64* %2240, align 8
  %2241 = getelementptr inbounds [4 x i32], [4 x i32]* %35, i64 0, i64 %2039
  store i32 %2088, i32* %2241, align 4
  br label %2242

2242:                                             ; preds = %2226, %2194, %2184
  %2243 = phi i64 [ %2237, %2226 ], [ 9223372036854775807, %2184 ], [ 9223372036854775807, %2194 ]
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %672) #5
  br label %2265

2244:                                             ; preds = %2138
  %2245 = add nsw i32 %2140, %2089
  %2246 = sext i32 %2245 to i64
  %2247 = mul nsw i64 %2246, %2092
  %2248 = add nsw i64 %2247, 256
  %2249 = ashr i64 %2248, 9
  %2250 = getelementptr inbounds [4 x i64], [4 x i64]* %33, i64 0, i64 %2039
  %2251 = load i64, i64* %2250, align 8
  %2252 = shl i64 %2251, 7
  %2253 = add nsw i64 %2252, %2249
  %2254 = getelementptr inbounds [4 x i32], [4 x i32]* %36, i64 0, i64 %2039
  %2255 = load i32, i32* %2254, align 4
  %2256 = add nsw i32 %2255, %2089
  %2257 = sext i32 %2256 to i64
  %2258 = mul nsw i64 %2257, %2092
  %2259 = add nsw i64 %2258, 256
  %2260 = ashr i64 %2259, 9
  %2261 = getelementptr inbounds [4 x i64], [4 x i64]* %37, i64 0, i64 %2039
  %2262 = load i64, i64* %2261, align 8
  %2263 = shl i64 %2262, 7
  %2264 = add nsw i64 %2260, %2263
  br label %2265

2265:                                             ; preds = %2180, %2130, %2086, %2244, %2242
  %2266 = phi i32 [ %2176, %2242 ], [ %2019, %2244 ], [ %782, %2086 ], [ %782, %2130 ], [ %2176, %2180 ]
  %2267 = phi i64 [ %2177, %2242 ], [ %2264, %2244 ], [ 9223372036854775807, %2086 ], [ 9223372036854775807, %2130 ], [ 9223372036854775807, %2180 ]
  %2268 = phi i64 [ %2243, %2242 ], [ %2253, %2244 ], [ 9223372036854775807, %2086 ], [ 9223372036854775807, %2130 ], [ 9223372036854775807, %2180 ]
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %665) #5
  br label %2269

2269:                                             ; preds = %2061, %2265
  %2270 = phi i32 [ %798, %2061 ], [ %2088, %2265 ]
  %2271 = phi i32 [ %782, %2061 ], [ %2266, %2265 ]
  %2272 = phi i64 [ 9223372036854775807, %2061 ], [ %2267, %2265 ]
  %2273 = phi i64 [ 9223372036854775807, %2061 ], [ %2268, %2265 ]
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %657) #5
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %656) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %655) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %654) #5
  br label %2274

2274:                                             ; preds = %2269, %1621, %1995, %1170, %1175
  %2275 = phi i32 [ %798, %1175 ], [ %798, %1170 ], [ %1626, %1621 ], [ %1996, %1995 ], [ %2270, %2269 ]
  %2276 = phi i32 [ %1171, %1175 ], [ %1171, %1170 ], [ %1627, %1621 ], [ %1997, %1995 ], [ %2271, %2269 ]
  %2277 = phi i32 [ %767, %1175 ], [ %767, %1170 ], [ %767, %1621 ], [ %767, %1995 ], [ 0, %2269 ]
  %2278 = phi i64 [ %1172, %1175 ], [ %1172, %1170 ], [ 9223372036854775807, %1621 ], [ 9223372036854775807, %1995 ], [ %2272, %2269 ]
  %2279 = phi i64 [ %1173, %1175 ], [ %1173, %1170 ], [ %1628, %1621 ], [ %1998, %1995 ], [ %2273, %2269 ]
  %2280 = load i64, i64* %11, align 8
  %2281 = icmp slt i64 %2279, %2280
  br i1 %2281, label %2282, label %2288

2282:                                             ; preds = %2274
  store i64 %2279, i64* %11, align 8
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %100, i8* align 8 %733, i64 11, i1 false)
  %2283 = load i8, i8* %646, align 1
  %2284 = load i32, i32* %735, align 4
  switch i8 %57, label %2288 [
    i8 16, label %2285
    i8 24, label %2285
    i8 19, label %2285
    i8 20, label %2285
    i8 21, label %2285
    i8 22, label %2285
  ]

2285:                                             ; preds = %2282, %2282, %2282, %2282, %2282, %2282
  %2286 = load i32, i32* %691, align 8
  %2287 = load i32, i32* %692, align 4
  br label %2288

2288:                                             ; preds = %2282, %2003, %2285, %2274
  %2289 = phi i32 [ %2277, %2285 ], [ %2277, %2274 ], [ %767, %2003 ], [ %2277, %2282 ]
  %2290 = phi i32 [ %2287, %2285 ], [ %774, %2274 ], [ %774, %2003 ], [ %774, %2282 ]
  %2291 = phi i32 [ %2286, %2285 ], [ %773, %2274 ], [ %773, %2003 ], [ %773, %2282 ]
  %2292 = phi i32 [ %2276, %2285 ], [ %772, %2274 ], [ %772, %2003 ], [ %772, %2282 ]
  %2293 = phi i32 [ %2275, %2285 ], [ %771, %2274 ], [ %771, %2003 ], [ %2275, %2282 ]
  %2294 = phi i64 [ %2278, %2285 ], [ %770, %2274 ], [ %770, %2003 ], [ %2278, %2282 ]
  %2295 = phi i32 [ %2284, %2285 ], [ %769, %2274 ], [ %769, %2003 ], [ %2284, %2282 ]
  %2296 = phi i8 [ %2283, %2285 ], [ %768, %2274 ], [ %768, %2003 ], [ %2283, %2282 ]
  %2297 = load i32, i32* %301, align 4
  store i32 %2297, i32* %691, align 8
  %2298 = load i32, i32* %303, align 4
  store i32 %2298, i32* %692, align 4
  br label %2299

2299:                                             ; preds = %2288, %781, %764
  %2300 = phi i32 [ %774, %764 ], [ %2290, %2288 ], [ %774, %781 ]
  %2301 = phi i32 [ %773, %764 ], [ %2291, %2288 ], [ %773, %781 ]
  %2302 = phi i32 [ %772, %764 ], [ %2292, %2288 ], [ %772, %781 ]
  %2303 = phi i32 [ %771, %764 ], [ %2293, %2288 ], [ %771, %781 ]
  %2304 = phi i64 [ %770, %764 ], [ %2294, %2288 ], [ %770, %781 ]
  %2305 = phi i32 [ %769, %764 ], [ %2295, %2288 ], [ %769, %781 ]
  %2306 = phi i8 [ %768, %764 ], [ %2296, %2288 ], [ %768, %781 ]
  %2307 = phi i32 [ %767, %764 ], [ %2289, %2288 ], [ %767, %781 ]
  %2308 = phi i64 [ %766, %764 ], [ %785, %2288 ], [ %785, %781 ]
  %2309 = add nuw nsw i64 %765, 1
  %2310 = icmp eq i64 %2309, %736
  br i1 %2310, label %741, label %764

2311:                                             ; preds = %741, %741, %741, %741, %741, %741
  %2312 = getelementptr inbounds %struct.MB_MODE_INFO, %struct.MB_MODE_INFO* %55, i64 0, i32 5, i64 0, i32 0
  store i32 %743, i32* %2312, align 8
  %2313 = getelementptr inbounds %struct.MB_MODE_INFO, %struct.MB_MODE_INFO* %55, i64 0, i32 5, i64 1, i32 0
  store i32 %742, i32* %2313, align 4
  %2314 = load i32, i32* %10, align 4
  %2315 = sub i32 %744, %2314
  %2316 = getelementptr inbounds %struct.RD_STATS, %struct.RD_STATS* %12, i64 0, i32 0
  %2317 = load i32, i32* %2316, align 8
  %2318 = add nsw i32 %2315, %2317
  store i32 %2318, i32* %2316, align 8
  store i32 %744, i32* %10, align 4
  %2319 = icmp eq i8 %57, 24
  br i1 %2319, label %2320, label %2325

2320:                                             ; preds = %2311
  %2321 = load i8, i8* %761, align 1
  %2322 = zext i8 %2321 to i32
  %2323 = sext i8 %94 to i64
  %2324 = getelementptr inbounds %struct.HandleInterModeArgs, %struct.HandleInterModeArgs* %2, i64 0, i32 18, i64 %2323
  store i32 %2322, i32* %2324, align 4
  br label %2325

2325:                                             ; preds = %741, %2320, %2311
  %2326 = bitcast %struct.BUFFER_SET* %27 to i8*
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %2326)
  %2327 = bitcast %struct.BUFFER_SET* %7 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %2326, i8* align 1 %2327, i64 40, i1 false)
  %2328 = bitcast %struct.BUFFER_SET* %27 to i64*
  %2329 = load i64, i64* %2328, align 8
  %2330 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 2, i32 4, i64 0, i32 3
  %2331 = bitcast %struct.buf_2d* %2330 to i64*
  store i64 %2329, i64* %2331, align 16
  %2332 = getelementptr inbounds %struct.BUFFER_SET, %struct.BUFFER_SET* %27, i64 0, i32 1, i64 0
  %2333 = load i32, i32* %2332, align 8
  %2334 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 2, i32 4, i64 0, i32 3, i32 4
  store i32 %2333, i32* %2334, align 8
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %2326)
  br i1 %577, label %2419, label %2335

2335:                                             ; preds = %2325
  %2336 = load i32, i32* %128, align 16
  %2337 = icmp slt i32 %2336, 64
  br i1 %2337, label %2338, label %2419

2338:                                             ; preds = %2335
  %2339 = sext i32 %2336 to i64
  %2340 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 47, i64 %2339
  %2341 = bitcast %struct.COMP_RD_STATS* %2340 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %2341, i8* nonnull align 16 %121, i64 16, i1 false) #5
  %2342 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 47, i64 %2339, i32 1, i64 0
  %2343 = bitcast i64* %2342 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %2343, i8* nonnull align 16 %119, i64 32, i1 false) #5
  %2344 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 47, i64 %2339, i32 2, i64 0
  %2345 = bitcast i32* %2344 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %2345, i8* nonnull align 16 %123, i64 16, i1 false) #5
  %2346 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 47, i64 %2339, i32 3, i64 0
  %2347 = bitcast i64* %2346 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %2347, i8* nonnull align 16 %124, i64 32, i1 false) #5
  %2348 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 47, i64 %2339, i32 4, i64 0
  %2349 = bitcast i32* %2348 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %2349, i8* nonnull align 16 %122, i64 16, i1 false) #5
  %2350 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 47, i64 %2339, i32 5, i64 0
  %2351 = bitcast %union.int_mv* %4 to i64*
  %2352 = bitcast %union.int_mv* %2350 to i64*
  %2353 = load i64, i64* %2351, align 4
  store i64 %2353, i64* %2352, align 8
  %2354 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 47, i64 %2339, i32 6, i64 0
  %2355 = getelementptr inbounds %struct.MB_MODE_INFO, %struct.MB_MODE_INFO* %55, i64 0, i32 6
  %2356 = bitcast [2 x i8]* %2355 to i16*
  %2357 = bitcast i8* %2354 to i16*
  %2358 = load i16, i16* %2356, align 8
  store i16 %2358, i16* %2357, align 8
  %2359 = load i8, i8* %56, align 2
  %2360 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 47, i64 %2339, i32 7
  store i8 %2359, i8* %2360, align 2
  %2361 = getelementptr inbounds %struct.MB_MODE_INFO, %struct.MB_MODE_INFO* %55, i64 0, i32 8, i32 0
  %2362 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 47, i64 %2339, i32 8, i32 0
  %2363 = load i32, i32* %2361, align 4
  store i32 %2363, i32* %2362, align 4
  %2364 = load i16, i16* %749, align 1
  %2365 = lshr i16 %2364, 4
  %2366 = and i16 %2365, 3
  %2367 = zext i16 %2366 to i32
  %2368 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 47, i64 %2339, i32 9
  store i32 %2367, i32* %2368, align 8
  %2369 = getelementptr inbounds %struct.MB_MODE_INFO, %struct.MB_MODE_INFO* %55, i64 0, i32 0
  %2370 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 2, i32 46
  %2371 = load i8, i8* %56, align 2
  %2372 = load i8, i8* %2369, align 8
  %2373 = zext i8 %2372 to i64
  %2374 = getelementptr inbounds [22 x i8], [22 x i8]* @block_size_wide, i64 0, i64 %2373
  %2375 = load i8, i8* %2374, align 1
  %2376 = getelementptr inbounds [22 x i8], [22 x i8]* @block_size_high, i64 0, i64 %2373
  %2377 = load i8, i8* %2376, align 1
  switch i8 %2371, label %2390 [
    i8 15, label %2378
    i8 23, label %2378
  ]

2378:                                             ; preds = %2338, %2338
  %2379 = load %struct.WarpedMotionParams*, %struct.WarpedMotionParams** %2370, align 8
  %2380 = load i8, i8* %58, align 1
  %2381 = sext i8 %2380 to i64
  %2382 = getelementptr inbounds %struct.WarpedMotionParams, %struct.WarpedMotionParams* %2379, i64 %2381, i32 5
  %2383 = load i8, i8* %2382, align 4
  %2384 = icmp ult i8 %2375, %2377
  %2385 = select i1 %2384, i8 %2375, i8 %2377
  %2386 = icmp ugt i8 %2385, 7
  %2387 = icmp ugt i8 %2383, 1
  %2388 = and i1 %2386, %2387
  %2389 = zext i1 %2388 to i32
  br label %2390

2390:                                             ; preds = %2378, %2338
  %2391 = phi i32 [ %2389, %2378 ], [ 0, %2338 ]
  %2392 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 47, i64 %2339, i32 10, i64 0
  store i32 %2391, i32* %2392, align 4
  %2393 = load i8, i8* %56, align 2
  %2394 = load i8, i8* %2369, align 8
  %2395 = zext i8 %2394 to i64
  %2396 = getelementptr inbounds [22 x i8], [22 x i8]* @block_size_wide, i64 0, i64 %2395
  %2397 = load i8, i8* %2396, align 1
  %2398 = getelementptr inbounds [22 x i8], [22 x i8]* @block_size_high, i64 0, i64 %2395
  %2399 = load i8, i8* %2398, align 1
  switch i8 %2393, label %2412 [
    i8 15, label %2400
    i8 23, label %2400
  ]

2400:                                             ; preds = %2390, %2390
  %2401 = load %struct.WarpedMotionParams*, %struct.WarpedMotionParams** %2370, align 8
  %2402 = load i8, i8* %59, align 1
  %2403 = sext i8 %2402 to i64
  %2404 = getelementptr inbounds %struct.WarpedMotionParams, %struct.WarpedMotionParams* %2401, i64 %2403, i32 5
  %2405 = load i8, i8* %2404, align 4
  %2406 = icmp ult i8 %2397, %2399
  %2407 = select i1 %2406, i8 %2397, i8 %2399
  %2408 = icmp ugt i8 %2407, 7
  %2409 = icmp ugt i8 %2405, 1
  %2410 = and i1 %2408, %2409
  %2411 = zext i1 %2410 to i32
  br label %2412

2412:                                             ; preds = %2400, %2390
  %2413 = phi i32 [ %2411, %2400 ], [ 0, %2390 ]
  %2414 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 47, i64 %2339, i32 10, i64 1
  store i32 %2413, i32* %2414, align 4
  %2415 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 47, i64 %2339, i32 11
  %2416 = bitcast %struct.INTERINTER_COMPOUND_DATA* %2415 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %2416, i8* align 8 %760, i64 16, i1 false) #5
  %2417 = load i32, i32* %128, align 16
  %2418 = add nsw i32 %2417, 1
  store i32 %2418, i32* %128, align 16
  br label %2419

2419:                                             ; preds = %2325, %2335, %2412, %591, %582
  %2420 = phi i32 [ %609, %591 ], [ 0, %582 ], [ %745, %2412 ], [ %745, %2335 ], [ %745, %2325 ]
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %305) #5
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %124) #5
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %123) #5
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %122) #5
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %121) #5
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %119) #5
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %114) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %112) #5
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %106) #5
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %101) #5
  call void @llvm.lifetime.end.p0i8(i64 11, i8* nonnull %100)
  ret i32 %2420
}

declare void @av1_dist_wtd_comp_weight_assign(%struct.AV1Common*, %struct.MB_MODE_INFO*, i32, i32*, i32*, i32*, i32) local_unnamed_addr #2

declare i32 @av1_interinter_compound_motion_search(%struct.AV1_COMP*, %struct.macroblock*, %union.int_mv*, i8 zeroext, i8 zeroext) local_unnamed_addr #2

declare void @av1_build_inter_predictors_for_planes_single_buf(%struct.macroblockd*, i8 zeroext, i32, i32, i32, i8**, i32*) local_unnamed_addr #2

declare void @av1_build_wedge_inter_predictor_from_buf(%struct.macroblockd*, i8 zeroext, i32, i32, i8**, i32*, i8**, i32*) local_unnamed_addr #2

declare void @av1_build_intra_predictors_for_interintra(%struct.AV1Common*, %struct.macroblockd*, i8 zeroext, i32, %struct.BUFFER_SET*, i8*, i32) local_unnamed_addr #2

declare void @av1_combine_interintra(%struct.macroblockd*, i8 zeroext, i32, i8*, i32, i8*, i32) local_unnamed_addr #2

declare i32 @av1_compound_single_motion_search(%struct.AV1_COMP*, %struct.macroblock*, i8 zeroext, %struct.mv*, i8*, i8*, i32, i32*, i32) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define internal fastcc i64 @pick_wedge_fixed_sign(%struct.macroblock* nocapture readonly, i8 zeroext, i16*, i16*, i8 signext, i8* nocapture, i64* nocapture) unnamed_addr #0 {
  %8 = alloca double, align 8
  %9 = alloca double, align 8
  %10 = zext i8 %1 to i64
  %11 = getelementptr inbounds [22 x i8], [22 x i8]* @block_size_wide, i64 0, i64 %10
  %12 = load i8, i8* %11, align 1
  %13 = zext i8 %12 to i32
  %14 = getelementptr inbounds [22 x i8], [22 x i8]* @block_size_high, i64 0, i64 %10
  %15 = load i8, i8* %14, align 1
  %16 = zext i8 %15 to i32
  %17 = mul nuw nsw i32 %16, %13
  %18 = getelementptr inbounds [22 x %struct.wedge_params_type], [22 x %struct.wedge_params_type]* @av1_wedge_params_lookup, i64 0, i64 %10, i32 0
  %19 = load i32, i32* %18, align 16
  %20 = shl i32 %19, 24
  %21 = ashr exact i32 %20, 24
  %22 = icmp sgt i32 %20, 0
  br i1 %22, label %23, label %108

23:                                               ; preds = %7
  %24 = getelementptr inbounds [22 x %struct.wedge_params_type], [22 x %struct.wedge_params_type]* @av1_wedge_params_lookup, i64 0, i64 %10, i32 3
  %25 = load [16 x i8*]*, [16 x i8*]** %24, align 8
  %26 = sext i8 %4 to i64
  %27 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %0, i64 0, i32 0, i64 0, i32 13
  %28 = sitofp i32 %17 to double
  %29 = bitcast double* %8 to i8*
  %30 = bitcast double* %9 to i8*
  %31 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %0, i64 0, i32 17
  br label %32

32:                                               ; preds = %23, %103
  %33 = phi i8 [ 0, %23 ], [ %105, %103 ]
  %34 = phi i64 [ 9223372036854775807, %23 ], [ %104, %103 ]
  %35 = sext i8 %33 to i64
  %36 = getelementptr inbounds [16 x i8*], [16 x i8*]* %25, i64 %26, i64 %35
  %37 = load i8*, i8** %36, align 8
  %38 = load i64 (i16*, i16*, i8*, i32)*, i64 (i16*, i16*, i8*, i32)** @av1_wedge_sse_from_residuals, align 8
  %39 = call i64 %38(i16* %2, i16* %3, i8* %37, i32 %17) #5
  %40 = load i16*, i16** %27, align 8
  %41 = getelementptr inbounds i16, i16* %40, i64 1
  %42 = load i16, i16* %41, align 2
  %43 = icmp sgt i16 %42, 15
  %44 = ashr i16 %42, 3
  %45 = sitofp i16 %44 to double
  %46 = select i1 %43, double %45, double 1.000000e+00
  %47 = icmp eq i64 %39, 0
  br i1 %47, label %87, label %48

48:                                               ; preds = %32
  %49 = sitofp i64 %39 to double
  %50 = fdiv double %49, %28
  %51 = fmul double %46, %46
  %52 = fdiv double %50, %51
  %53 = call double @log2(double %52) #5
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %29) #5
  store double 0xFFFFFFFFFFFFFFFF, double* %8, align 8
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %30) #5
  store double 0xFFFFFFFFFFFFFFFF, double* %9, align 8
  call void @av1_model_rd_curvfit(i8 zeroext %1, double %50, double %53, double* nonnull %8, double* nonnull %9) #5
  %54 = load double, double* %9, align 8
  %55 = fmul double %50, %54
  %56 = load double, double* %8, align 8
  %57 = fmul double %56, %28
  %58 = fcmp olt double %57, 0.000000e+00
  %59 = fadd double %57, 5.000000e-01
  %60 = fptosi double %59 to i32
  %61 = fmul double %55, %28
  %62 = fcmp olt double %61, 0.000000e+00
  %63 = fadd double %61, 5.000000e-01
  %64 = fptosi double %63 to i64
  %65 = select i1 %62, i64 0, i64 %64
  %66 = icmp eq i32 %60, 0
  %67 = or i1 %58, %66
  br i1 %67, label %68, label %70

68:                                               ; preds = %48
  %69 = shl i64 %39, 4
  br label %84

70:                                               ; preds = %48
  %71 = sext i32 %60 to i64
  %72 = load i32, i32* %31, align 8
  %73 = sext i32 %72 to i64
  %74 = mul nsw i64 %73, %71
  %75 = add nsw i64 %74, 256
  %76 = ashr i64 %75, 9
  %77 = shl i64 %65, 7
  %78 = add nsw i64 %76, %77
  %79 = shl i64 %39, 11
  %80 = icmp slt i64 %78, %79
  %81 = shl i64 %39, 4
  %82 = select i1 %80, i32 %60, i32 0
  %83 = select i1 %80, i64 %65, i64 %81
  br label %84

84:                                               ; preds = %70, %68
  %85 = phi i32 [ 0, %68 ], [ %82, %70 ]
  %86 = phi i64 [ %69, %68 ], [ %83, %70 ]
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %30) #5
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %29) #5
  br label %87

87:                                               ; preds = %32, %84
  %88 = phi i32 [ %85, %84 ], [ 0, %32 ]
  %89 = phi i64 [ %86, %84 ], [ 0, %32 ]
  %90 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %0, i64 0, i32 20, i32 29, i64 %10, i64 %35
  %91 = load i32, i32* %90, align 4
  %92 = add nsw i32 %91, %88
  %93 = sext i32 %92 to i64
  %94 = load i32, i32* %31, align 8
  %95 = sext i32 %94 to i64
  %96 = mul nsw i64 %93, %95
  %97 = add nsw i64 %96, 256
  %98 = ashr i64 %97, 9
  %99 = shl nsw i64 %89, 7
  %100 = add nsw i64 %98, %99
  %101 = icmp slt i64 %100, %34
  br i1 %101, label %102, label %103

102:                                              ; preds = %87
  store i8 %33, i8* %5, align 1
  store i64 %39, i64* %6, align 8
  br label %103

103:                                              ; preds = %87, %102
  %104 = phi i64 [ %100, %102 ], [ %34, %87 ]
  %105 = add i8 %33, 1
  %106 = sext i8 %105 to i32
  %107 = icmp sgt i32 %21, %106
  br i1 %107, label %32, label %108

108:                                              ; preds = %103, %7
  %109 = phi i64 [ 9223372036854775807, %7 ], [ %104, %103 ]
  %110 = load i8, i8* %5, align 1
  %111 = sext i8 %110 to i64
  %112 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %0, i64 0, i32 20, i32 29, i64 %10, i64 %111
  %113 = load i32, i32* %112, align 4
  %114 = sext i32 %113 to i64
  %115 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %0, i64 0, i32 17
  %116 = load i32, i32* %115, align 8
  %117 = sext i32 %116 to i64
  %118 = mul nsw i64 %117, %114
  %119 = add nsw i64 %118, 256
  %120 = ashr i64 %119, 9
  %121 = sub nsw i64 %109, %120
  ret i64 %121
}

; Function Attrs: nofree nounwind
declare double @log2(double) local_unnamed_addr #3

declare void @av1_model_rd_curvfit(i8 zeroext, double, double, double*, double*) local_unnamed_addr #2

declare void @av1_subtract_plane(%struct.macroblock*, i8 zeroext, i32) local_unnamed_addr #2

declare i64 @av1_estimate_txfm_yrd(%struct.AV1_COMP*, %struct.macroblock*, %struct.RD_STATS*, i64, i8 zeroext, i8 zeroext) local_unnamed_addr #2

; Function Attrs: inlinehint nounwind ssp uwtable
define internal fastcc void @model_rd_for_sb_with_curvfit(i8 zeroext, %struct.macroblock* nocapture, %struct.macroblockd* nocapture readonly, i32, i32, i32* nocapture, i64* nocapture, i32*, i64*, i32*, i64*, i64*) unnamed_addr #4 {
  %13 = alloca double, align 8
  %14 = alloca double, align 8
  %15 = getelementptr inbounds %struct.macroblockd, %struct.macroblockd* %2, i64 0, i32 3
  %16 = icmp sgt i32 %3, %4
  br i1 %16, label %178, label %17

17:                                               ; preds = %12
  %18 = getelementptr inbounds %struct.macroblockd, %struct.macroblockd* %2, i64 0, i32 6
  %19 = load %struct.MB_MODE_INFO**, %struct.MB_MODE_INFO*** %18, align 8
  %20 = load %struct.MB_MODE_INFO*, %struct.MB_MODE_INFO** %19, align 8
  %21 = getelementptr inbounds %struct.MB_MODE_INFO, %struct.MB_MODE_INFO* %20, i64 0, i32 6, i64 0
  %22 = load i8, i8* %21, align 8
  %23 = zext i8 %0 to i64
  %24 = getelementptr inbounds %struct.macroblockd, %struct.macroblockd* %2, i64 0, i32 20
  %25 = getelementptr inbounds %struct.macroblockd, %struct.macroblockd* %2, i64 0, i32 18
  %26 = getelementptr inbounds %struct.macroblockd, %struct.macroblockd* %2, i64 0, i32 40
  %27 = bitcast double* %13 to i8*
  %28 = bitcast double* %14 to i8*
  %29 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 17
  %30 = sext i8 %22 to i64
  %31 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 61, i64 %30
  %32 = icmp eq i32* %9, null
  %33 = icmp eq i64* %10, null
  %34 = icmp eq i64* %11, null
  %35 = sext i32 %3 to i64
  %36 = sext i32 %4 to i64
  br label %37

37:                                               ; preds = %175, %17
  %38 = phi i64 [ %176, %175 ], [ %35, %17 ]
  %39 = phi i64 [ %165, %175 ], [ 0, %17 ]
  %40 = phi i64 [ %166, %175 ], [ 0, %17 ]
  %41 = phi i64 [ %163, %175 ], [ 0, %17 ]
  %42 = icmp eq i64 %38, 0
  br i1 %42, label %46, label %43

43:                                               ; preds = %37
  %44 = load i8, i8* %15, align 4, !range !2
  %45 = icmp eq i8 %44, 0
  br i1 %45, label %178, label %46

46:                                               ; preds = %43, %37
  %47 = getelementptr inbounds %struct.macroblockd, %struct.macroblockd* %2, i64 0, i32 4, i64 %38, i32 1
  %48 = load i32, i32* %47, align 4
  %49 = getelementptr inbounds %struct.macroblockd, %struct.macroblockd* %2, i64 0, i32 4, i64 %38, i32 2
  %50 = load i32, i32* %49, align 8
  %51 = sext i32 %48 to i64
  %52 = sext i32 %50 to i64
  %53 = getelementptr inbounds [22 x [2 x [2 x i8]]], [22 x [2 x [2 x i8]]]* @ss_size_lookup, i64 0, i64 %23, i64 %51, i64 %52
  %54 = load i8, i8* %53, align 1
  %55 = zext i8 %54 to i64
  %56 = getelementptr inbounds [22 x i8], [22 x i8]* @block_size_high, i64 0, i64 %55
  %57 = load i8, i8* %56, align 1
  %58 = zext i8 %57 to i32
  %59 = getelementptr inbounds [22 x i8], [22 x i8]* @block_size_wide, i64 0, i64 %55
  %60 = load i8, i8* %59, align 1
  %61 = zext i8 %60 to i32
  %62 = load i32, i32* %24, align 16
  %63 = icmp sgt i32 %62, -1
  br i1 %63, label %72, label %64

64:                                               ; preds = %46
  %65 = add nsw i32 %50, 3
  %66 = ashr i32 %62, %65
  %67 = add nsw i32 %66, %58
  %68 = icmp slt i32 %67, 0
  %69 = icmp sgt i32 %67, %58
  %70 = select i1 %69, i32 %58, i32 %67
  %71 = select i1 %68, i32 0, i32 %70
  br label %72

72:                                               ; preds = %64, %46
  %73 = phi i32 [ %71, %64 ], [ %58, %46 ]
  %74 = load i32, i32* %25, align 8
  %75 = icmp sgt i32 %74, -1
  br i1 %75, label %84, label %76

76:                                               ; preds = %72
  %77 = add nsw i32 %48, 3
  %78 = ashr i32 %74, %77
  %79 = add nsw i32 %78, %61
  %80 = icmp slt i32 %79, 0
  %81 = icmp sgt i32 %79, %61
  %82 = select i1 %81, i32 %61, i32 %79
  %83 = select i1 %80, i32 0, i32 %82
  br label %84

84:                                               ; preds = %72, %76
  %85 = phi i32 [ %83, %76 ], [ %61, %72 ]
  %86 = load i32, i32* %26, align 16
  %87 = load i64 (i8*, i32, i8*, i32, i32, i32)*, i64 (i8*, i32, i8*, i32, i32, i32)** @aom_sse, align 8
  %88 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 0, i64 %38, i32 6, i32 0
  %89 = load i8*, i8** %88, align 8
  %90 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 0, i64 %38, i32 6, i32 4
  %91 = load i32, i32* %90, align 8
  %92 = getelementptr inbounds %struct.macroblockd, %struct.macroblockd* %2, i64 0, i32 4, i64 %38, i32 3, i32 0
  %93 = load i8*, i8** %92, align 8
  %94 = getelementptr inbounds %struct.macroblockd, %struct.macroblockd* %2, i64 0, i32 4, i64 %38, i32 3, i32 4
  %95 = load i32, i32* %94, align 8
  %96 = call i64 %87(i8* %89, i32 %91, i8* %93, i32 %95, i32 %85, i32 %73) #5
  %97 = shl i32 %86, 1
  %98 = add i32 %97, -16
  %99 = shl i32 1, %98
  %100 = ashr i32 %99, 1
  %101 = sext i32 %100 to i64
  %102 = add nsw i64 %96, %101
  %103 = zext i32 %98 to i64
  %104 = ashr i64 %102, %103
  %105 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 0, i64 %38, i32 13
  %106 = load i16*, i16** %105, align 8
  %107 = getelementptr inbounds i16, i16* %106, i64 1
  %108 = load i16, i16* %107, align 2
  %109 = icmp sgt i16 %108, 15
  %110 = ashr i16 %108, 3
  %111 = sitofp i16 %110 to double
  %112 = select i1 %109, double %111, double 1.000000e+00
  %113 = icmp eq i64 %104, 0
  br i1 %113, label %155, label %114

114:                                              ; preds = %84
  %115 = mul nsw i32 %85, %73
  %116 = sitofp i64 %104 to double
  %117 = sitofp i32 %115 to double
  %118 = fdiv double %116, %117
  %119 = fmul double %112, %112
  %120 = fdiv double %118, %119
  %121 = call double @log2(double %120) #5
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %27) #5
  store double 0xFFFFFFFFFFFFFFFF, double* %13, align 8
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %28) #5
  store double 0xFFFFFFFFFFFFFFFF, double* %14, align 8
  call void @av1_model_rd_curvfit(i8 zeroext %54, double %118, double %121, double* nonnull %13, double* nonnull %14) #5
  %122 = load double, double* %14, align 8
  %123 = fmul double %118, %122
  %124 = load double, double* %13, align 8
  %125 = fmul double %124, %117
  %126 = fcmp olt double %125, 0.000000e+00
  %127 = fadd double %125, 5.000000e-01
  %128 = fptosi double %127 to i32
  %129 = fmul double %123, %117
  %130 = fcmp olt double %129, 0.000000e+00
  %131 = fadd double %129, 5.000000e-01
  %132 = fptosi double %131 to i64
  %133 = select i1 %130, i64 0, i64 %132
  %134 = icmp eq i32 %128, 0
  %135 = or i1 %126, %134
  br i1 %135, label %136, label %138

136:                                              ; preds = %114
  %137 = shl i64 %104, 4
  br label %152

138:                                              ; preds = %114
  %139 = sext i32 %128 to i64
  %140 = load i32, i32* %29, align 8
  %141 = sext i32 %140 to i64
  %142 = mul nsw i64 %141, %139
  %143 = add nsw i64 %142, 256
  %144 = ashr i64 %143, 9
  %145 = shl i64 %133, 7
  %146 = add nsw i64 %144, %145
  %147 = shl i64 %104, 11
  %148 = icmp slt i64 %146, %147
  %149 = shl i64 %104, 4
  %150 = select i1 %148, i32 %128, i32 0
  %151 = select i1 %148, i64 %133, i64 %149
  br label %152

152:                                              ; preds = %138, %136
  %153 = phi i32 [ 0, %136 ], [ %150, %138 ]
  %154 = phi i64 [ %137, %136 ], [ %151, %138 ]
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %28) #5
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %27) #5
  br label %155

155:                                              ; preds = %84, %152
  %156 = phi i64 [ %154, %152 ], [ 0, %84 ]
  %157 = phi i32 [ %153, %152 ], [ 0, %84 ]
  br i1 %42, label %158, label %162

158:                                              ; preds = %155
  %159 = icmp slt i64 %104, 4294967295
  %160 = select i1 %159, i64 %104, i64 4294967295
  %161 = trunc i64 %160 to i32
  store i32 %161, i32* %31, align 4
  br label %162

162:                                              ; preds = %158, %155
  %163 = add nsw i64 %104, %41
  %164 = sext i32 %157 to i64
  %165 = add nsw i64 %39, %164
  %166 = add nsw i64 %156, %40
  br i1 %32, label %169, label %167

167:                                              ; preds = %162
  %168 = getelementptr inbounds i32, i32* %9, i64 %38
  store i32 %157, i32* %168, align 4
  br label %169

169:                                              ; preds = %162, %167
  br i1 %33, label %172, label %170

170:                                              ; preds = %169
  %171 = getelementptr inbounds i64, i64* %10, i64 %38
  store i64 %104, i64* %171, align 8
  br label %172

172:                                              ; preds = %169, %170
  br i1 %34, label %175, label %173

173:                                              ; preds = %172
  %174 = getelementptr inbounds i64, i64* %11, i64 %38
  store i64 %156, i64* %174, align 8
  br label %175

175:                                              ; preds = %172, %173
  %176 = add nsw i64 %38, 1
  %177 = icmp slt i64 %38, %36
  br i1 %177, label %37, label %178

178:                                              ; preds = %175, %43, %12
  %179 = phi i64 [ 0, %12 ], [ %41, %43 ], [ %163, %175 ]
  %180 = phi i64 [ 0, %12 ], [ %40, %43 ], [ %166, %175 ]
  %181 = phi i64 [ 0, %12 ], [ %39, %43 ], [ %165, %175 ]
  %182 = icmp eq i32* %7, null
  br i1 %182, label %186, label %183

183:                                              ; preds = %178
  %184 = icmp eq i64 %181, 0
  %185 = zext i1 %184 to i32
  store i32 %185, i32* %7, align 4
  br label %186

186:                                              ; preds = %178, %183
  %187 = icmp eq i64* %8, null
  br i1 %187, label %190, label %188

188:                                              ; preds = %186
  %189 = shl i64 %179, 4
  store i64 %189, i64* %8, align 8
  br label %190

190:                                              ; preds = %186, %188
  %191 = trunc i64 %181 to i32
  store i32 %191, i32* %5, align 4
  store i64 %180, i64* %6, align 8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal i64 @pick_interinter_wedge(%struct.AV1_COMP* nocapture readonly, %struct.macroblock* nocapture readonly, i8 zeroext, i8*, i8*, i16*, i16*, i64* nocapture) #0 {
  %9 = alloca double, align 8
  %10 = alloca double, align 8
  %11 = alloca [16384 x i16], align 32
  %12 = alloca [2 x [2 x i32]], align 16
  %13 = alloca i8, align 1
  %14 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 2, i32 6
  %15 = load %struct.MB_MODE_INFO**, %struct.MB_MODE_INFO*** %14, align 8
  %16 = load %struct.MB_MODE_INFO*, %struct.MB_MODE_INFO** %15, align 8
  %17 = zext i8 %2 to i64
  %18 = getelementptr inbounds [22 x i8], [22 x i8]* @block_size_wide, i64 0, i64 %17
  %19 = load i8, i8* %18, align 1
  %20 = zext i8 %19 to i32
  call void @llvm.lifetime.start.p0i8(i64 1, i8* nonnull %13) #5
  store i8 -1, i8* %13, align 1
  %21 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 40, i32 6, i32 28
  %22 = load i32, i32* %21, align 4
  %23 = icmp eq i32 %22, 0
  br i1 %23, label %84, label %24

24:                                               ; preds = %8
  %25 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 0, i64 0, i32 6, i32 0
  %26 = load i8*, i8** %25, align 8
  %27 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 0, i64 0, i32 6, i32 4
  %28 = load i32, i32* %27, align 8
  %29 = getelementptr inbounds [22 x i8], [22 x i8]* @block_size_high, i64 0, i64 %17
  %30 = load i8, i8* %29, align 1
  %31 = lshr i8 %30, 1
  %32 = zext i8 %31 to i32
  %33 = bitcast [2 x [2 x i32]]* %12 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %33) #5
  %34 = getelementptr inbounds [2 x [2 x i32]], [2 x [2 x i32]]* %12, i64 0, i64 0, i64 0
  %35 = getelementptr inbounds [2 x [2 x i32]], [2 x [2 x i32]]* %12, i64 0, i64 0, i64 1
  %36 = getelementptr inbounds [2 x [2 x i32]], [2 x [2 x i32]]* %12, i64 0, i64 1, i64 0
  %37 = getelementptr inbounds [2 x [2 x i32]], [2 x [2 x i32]]* %12, i64 0, i64 1, i64 1
  %38 = getelementptr inbounds [22 x i8], [22 x i8]* @estimate_wedge_sign.split_qtr, i64 0, i64 %17
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %33, i8 -86, i64 16, i1 false) #5
  %39 = load i8, i8* %38, align 1
  %40 = lshr i8 %19, 1
  %41 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 0
  %42 = load %struct.AV1_PRIMARY*, %struct.AV1_PRIMARY** %41, align 16
  %43 = zext i8 %39 to i64
  %44 = getelementptr inbounds %struct.AV1_PRIMARY, %struct.AV1_PRIMARY* %42, i64 0, i32 21, i64 %43, i32 3
  %45 = load i32 (i8*, i32, i8*, i32, i32*)*, i32 (i8*, i32, i8*, i32, i32*)** %44, align 8
  %46 = call i32 %45(i8* %26, i32 %28, i8* %3, i32 %20, i32* nonnull %34) #5
  %47 = load %struct.AV1_PRIMARY*, %struct.AV1_PRIMARY** %41, align 16
  %48 = getelementptr inbounds %struct.AV1_PRIMARY, %struct.AV1_PRIMARY* %47, i64 0, i32 21, i64 %43, i32 3
  %49 = load i32 (i8*, i32, i8*, i32, i32*)*, i32 (i8*, i32, i8*, i32, i32*)** %48, align 8
  %50 = mul nsw i32 %28, %32
  %51 = sext i32 %50 to i64
  %52 = getelementptr inbounds i8, i8* %26, i64 %51
  %53 = zext i8 %40 to i64
  %54 = getelementptr inbounds i8, i8* %52, i64 %53
  %55 = mul nuw nsw i32 %32, %20
  %56 = zext i32 %55 to i64
  %57 = getelementptr inbounds i8, i8* %3, i64 %56
  %58 = getelementptr inbounds i8, i8* %57, i64 %53
  %59 = call i32 %49(i8* %54, i32 %28, i8* %58, i32 %20, i32* %35) #5
  %60 = load %struct.AV1_PRIMARY*, %struct.AV1_PRIMARY** %41, align 16
  %61 = getelementptr inbounds %struct.AV1_PRIMARY, %struct.AV1_PRIMARY* %60, i64 0, i32 21, i64 %43, i32 3
  %62 = load i32 (i8*, i32, i8*, i32, i32*)*, i32 (i8*, i32, i8*, i32, i32*)** %61, align 8
  %63 = call i32 %62(i8* %26, i32 %28, i8* %4, i32 %20, i32* %36) #5
  %64 = load %struct.AV1_PRIMARY*, %struct.AV1_PRIMARY** %41, align 16
  %65 = getelementptr inbounds %struct.AV1_PRIMARY, %struct.AV1_PRIMARY* %64, i64 0, i32 21, i64 %43, i32 3
  %66 = load i32 (i8*, i32, i8*, i32, i32*)*, i32 (i8*, i32, i8*, i32, i32*)** %65, align 8
  %67 = getelementptr inbounds i8, i8* %4, i64 %56
  %68 = getelementptr inbounds i8, i8* %67, i64 %53
  %69 = call i32 %66(i8* %54, i32 %28, i8* %68, i32 %20, i32* %37) #5
  %70 = load i32, i32* %34, align 16
  %71 = zext i32 %70 to i64
  %72 = load i32, i32* %36, align 8
  %73 = zext i32 %72 to i64
  %74 = load i32, i32* %37, align 4
  %75 = zext i32 %74 to i64
  %76 = load i32, i32* %35, align 4
  %77 = zext i32 %76 to i64
  %78 = sub nsw i64 %71, %73
  %79 = add nsw i64 %78, %75
  %80 = icmp sgt i64 %79, %77
  %81 = zext i1 %80 to i8
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %33) #5
  %82 = call fastcc i64 @pick_wedge_fixed_sign(%struct.macroblock* %1, i8 zeroext %2, i16* %5, i16* %6, i8 signext %81, i8* nonnull %13, i64* %7)
  %83 = load i8, i8* %13, align 1
  br label %217

84:                                               ; preds = %8
  %85 = getelementptr inbounds [22 x i8], [22 x i8]* @block_size_high, i64 0, i64 %17
  %86 = load i8, i8* %85, align 1
  %87 = zext i8 %86 to i32
  %88 = mul nuw nsw i32 %87, %20
  %89 = getelementptr inbounds [22 x %struct.wedge_params_type], [22 x %struct.wedge_params_type]* @av1_wedge_params_lookup, i64 0, i64 %17, i32 0
  %90 = load i32, i32* %89, align 16
  %91 = bitcast [16384 x i16]* %11 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32768, i8* nonnull %91) #5
  call void @llvm.memset.p0i8.i64(i8* nonnull align 32 %91, i8 -86, i64 32768, i1 false) #5
  %92 = load void (i32, i32, i16*, i64, i8*, i64, i8*, i64)*, void (i32, i32, i16*, i64, i8*, i64, i8*, i64)** @aom_subtract_block, align 8
  %93 = getelementptr inbounds [16384 x i16], [16384 x i16]* %11, i64 0, i64 0
  %94 = zext i8 %19 to i64
  %95 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 0, i64 0, i32 6, i32 0
  %96 = load i8*, i8** %95, align 8
  %97 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 0, i64 0, i32 6, i32 4
  %98 = load i32, i32* %97, align 8
  %99 = sext i32 %98 to i64
  call void %92(i32 %87, i32 %20, i16* nonnull %93, i64 %94, i8* %96, i64 %99, i8* %3, i64 %94) #5
  %100 = call i64 @aom_sum_squares_i16_sse2(i16* nonnull %93, i32 %88) #5
  %101 = call i64 @aom_sum_squares_i16_sse2(i16* %5, i32 %88) #5
  %102 = sub nsw i64 %100, %101
  %103 = shl nsw i64 %102, 5
  %104 = load void (i16*, i16*, i16*, i32)*, void (i16*, i16*, i16*, i32)** @av1_wedge_compute_delta_squares, align 8
  call void %104(i16* nonnull %93, i16* nonnull %93, i16* %5, i32 %88) #5
  %105 = shl i32 %90, 24
  %106 = ashr exact i32 %105, 24
  %107 = icmp sgt i32 %105, 0
  br i1 %107, label %108, label %202

108:                                              ; preds = %84
  %109 = getelementptr inbounds [22 x %struct.wedge_params_type], [22 x %struct.wedge_params_type]* @av1_wedge_params_lookup, i64 0, i64 %17, i32 3
  %110 = load [16 x i8*]*, [16 x i8*]** %109, align 8
  %111 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 0, i64 0, i32 13
  %112 = sitofp i32 %88 to double
  %113 = bitcast double* %9 to i8*
  %114 = bitcast double* %10 to i8*
  %115 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 17
  br label %116

116:                                              ; preds = %194, %108
  %117 = phi i8 [ -1, %108 ], [ %195, %194 ]
  %118 = phi i8 [ 0, %108 ], [ %196, %194 ]
  %119 = phi i8 [ 0, %108 ], [ %198, %194 ]
  %120 = phi i64 [ 9223372036854775807, %108 ], [ %197, %194 ]
  %121 = sext i8 %119 to i64
  %122 = getelementptr inbounds [16 x i8*], [16 x i8*]* %110, i64 0, i64 %121
  %123 = load i8*, i8** %122, align 8
  %124 = load i8 (i16*, i8*, i32, i64)*, i8 (i16*, i8*, i32, i64)** @av1_wedge_sign_from_residuals, align 8
  %125 = call signext i8 %124(i16* nonnull %93, i8* %123, i32 %88, i64 %103) #5
  %126 = sext i8 %125 to i64
  %127 = getelementptr inbounds [16 x i8*], [16 x i8*]* %110, i64 %126, i64 %121
  %128 = load i8*, i8** %127, align 8
  %129 = load i64 (i16*, i16*, i8*, i32)*, i64 (i16*, i16*, i8*, i32)** @av1_wedge_sse_from_residuals, align 8
  %130 = call i64 %129(i16* %5, i16* %6, i8* %128, i32 %88) #5
  %131 = load i16*, i16** %111, align 8
  %132 = getelementptr inbounds i16, i16* %131, i64 1
  %133 = load i16, i16* %132, align 2
  %134 = icmp sgt i16 %133, 15
  %135 = ashr i16 %133, 3
  %136 = sitofp i16 %135 to double
  %137 = select i1 %134, double %136, double 1.000000e+00
  %138 = icmp eq i64 %130, 0
  br i1 %138, label %178, label %139

139:                                              ; preds = %116
  %140 = sitofp i64 %130 to double
  %141 = fdiv double %140, %112
  %142 = fmul double %137, %137
  %143 = fdiv double %141, %142
  %144 = call double @log2(double %143) #5
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %113) #5
  store double 0xFFFFFFFFFFFFFFFF, double* %9, align 8
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %114) #5
  store double 0xFFFFFFFFFFFFFFFF, double* %10, align 8
  call void @av1_model_rd_curvfit(i8 zeroext %2, double %141, double %144, double* nonnull %9, double* nonnull %10) #5
  %145 = load double, double* %10, align 8
  %146 = fmul double %141, %145
  %147 = load double, double* %9, align 8
  %148 = fmul double %147, %112
  %149 = fcmp olt double %148, 0.000000e+00
  %150 = fadd double %148, 5.000000e-01
  %151 = fptosi double %150 to i32
  %152 = fmul double %146, %112
  %153 = fcmp olt double %152, 0.000000e+00
  %154 = fadd double %152, 5.000000e-01
  %155 = fptosi double %154 to i64
  %156 = select i1 %153, i64 0, i64 %155
  %157 = icmp eq i32 %151, 0
  %158 = or i1 %149, %157
  br i1 %158, label %159, label %161

159:                                              ; preds = %139
  %160 = shl i64 %130, 4
  br label %175

161:                                              ; preds = %139
  %162 = sext i32 %151 to i64
  %163 = load i32, i32* %115, align 8
  %164 = sext i32 %163 to i64
  %165 = mul nsw i64 %164, %162
  %166 = add nsw i64 %165, 256
  %167 = ashr i64 %166, 9
  %168 = shl i64 %156, 7
  %169 = add nsw i64 %167, %168
  %170 = shl i64 %130, 11
  %171 = icmp slt i64 %169, %170
  %172 = shl i64 %130, 4
  %173 = select i1 %171, i32 %151, i32 0
  %174 = select i1 %171, i64 %156, i64 %172
  br label %175

175:                                              ; preds = %161, %159
  %176 = phi i32 [ 0, %159 ], [ %173, %161 ]
  %177 = phi i64 [ %160, %159 ], [ %174, %161 ]
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %114) #5
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %113) #5
  br label %178

178:                                              ; preds = %175, %116
  %179 = phi i32 [ %176, %175 ], [ 0, %116 ]
  %180 = phi i64 [ %177, %175 ], [ 0, %116 ]
  %181 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 20, i32 29, i64 %17, i64 %121
  %182 = load i32, i32* %181, align 4
  %183 = add nsw i32 %182, %179
  %184 = sext i32 %183 to i64
  %185 = load i32, i32* %115, align 8
  %186 = sext i32 %185 to i64
  %187 = mul nsw i64 %184, %186
  %188 = add nsw i64 %187, 256
  %189 = ashr i64 %188, 9
  %190 = shl nsw i64 %180, 7
  %191 = add nsw i64 %189, %190
  %192 = icmp slt i64 %191, %120
  br i1 %192, label %193, label %194

193:                                              ; preds = %178
  store i64 %130, i64* %7, align 8
  br label %194

194:                                              ; preds = %193, %178
  %195 = phi i8 [ %119, %193 ], [ %117, %178 ]
  %196 = phi i8 [ %125, %193 ], [ %118, %178 ]
  %197 = phi i64 [ %191, %193 ], [ %120, %178 ]
  %198 = add i8 %119, 1
  %199 = sext i8 %198 to i32
  %200 = icmp sgt i32 %106, %199
  br i1 %200, label %116, label %201

201:                                              ; preds = %194
  store i8 %195, i8* %13, align 1
  br label %202

202:                                              ; preds = %201, %84
  %203 = phi i8 [ -1, %84 ], [ %195, %201 ]
  %204 = phi i8 [ 0, %84 ], [ %196, %201 ]
  %205 = phi i64 [ 9223372036854775807, %84 ], [ %197, %201 ]
  %206 = sext i8 %203 to i64
  %207 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 20, i32 29, i64 %17, i64 %206
  %208 = load i32, i32* %207, align 4
  %209 = sext i32 %208 to i64
  %210 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 17
  %211 = load i32, i32* %210, align 8
  %212 = sext i32 %211 to i64
  %213 = mul nsw i64 %212, %209
  %214 = add nsw i64 %213, 256
  %215 = ashr i64 %214, 9
  %216 = sub nsw i64 %205, %215
  call void @llvm.lifetime.end.p0i8(i64 32768, i8* nonnull %91) #5
  br label %217

217:                                              ; preds = %202, %24
  %218 = phi i8 [ %203, %202 ], [ %83, %24 ]
  %219 = phi i8 [ %204, %202 ], [ %81, %24 ]
  %220 = phi i64 [ %216, %202 ], [ %82, %24 ]
  %221 = getelementptr inbounds %struct.MB_MODE_INFO, %struct.MB_MODE_INFO* %16, i64 0, i32 17, i32 2
  store i8 %219, i8* %221, align 1
  %222 = getelementptr inbounds %struct.MB_MODE_INFO, %struct.MB_MODE_INFO* %16, i64 0, i32 17, i32 1
  store i8 %218, i8* %222, align 8
  call void @llvm.lifetime.end.p0i8(i64 1, i8* nonnull %13) #5
  ret i64 %220
}

; Function Attrs: nounwind ssp uwtable
define internal i64 @pick_interinter_seg(%struct.AV1_COMP* nocapture readnone, %struct.macroblock* nocapture readonly, i8 zeroext, i8*, i8*, i16*, i16*, i64* nocapture) #0 {
  %9 = alloca double, align 8
  %10 = alloca double, align 8
  %11 = alloca [32768 x i8], align 16
  %12 = alloca [2 x i8*], align 16
  %13 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 2, i32 6
  %14 = load %struct.MB_MODE_INFO**, %struct.MB_MODE_INFO*** %13, align 8
  %15 = load %struct.MB_MODE_INFO*, %struct.MB_MODE_INFO** %14, align 8
  %16 = zext i8 %2 to i64
  %17 = getelementptr inbounds [22 x i8], [22 x i8]* @block_size_wide, i64 0, i64 %16
  %18 = load i8, i8* %17, align 1
  %19 = zext i8 %18 to i32
  %20 = getelementptr inbounds [22 x i8], [22 x i8]* @block_size_high, i64 0, i64 %16
  %21 = load i8, i8* %20, align 1
  %22 = zext i8 %21 to i32
  %23 = getelementptr inbounds [22 x i8], [22 x i8]* @num_pels_log2_lookup, i64 0, i64 %16
  %24 = load i8, i8* %23, align 1
  %25 = zext i8 %24 to i32
  %26 = shl i32 1, %25
  %27 = getelementptr inbounds [32768 x i8], [32768 x i8]* %11, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 32768, i8* nonnull %27) #5
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %27, i8 -86, i64 32768, i1 false)
  %28 = bitcast [2 x i8*]* %12 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %28) #5
  %29 = getelementptr inbounds [2 x i8*], [2 x i8*]* %12, i64 0, i64 1
  %30 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 2, i32 50
  %31 = bitcast i8** %30 to i64*
  %32 = load i64, i64* %31, align 16
  %33 = bitcast [2 x i8*]* %12 to i64*
  store i64 %32, i64* %33, align 16
  store i8* %27, i8** %29, align 8
  %34 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 0, i64 0, i32 13
  %35 = sitofp i32 %26 to double
  %36 = bitcast double* %9 to i8*
  %37 = bitcast double* %10 to i8*
  %38 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 17
  %39 = inttoptr i64 %32 to i8*
  br label %40

40:                                               ; preds = %114, %8
  %41 = phi i8* [ %39, %8 ], [ %116, %114 ]
  %42 = phi i64 [ 0, %8 ], [ %112, %114 ]
  %43 = phi i8 [ 0, %8 ], [ %111, %114 ]
  %44 = phi i64 [ 9223372036854775807, %8 ], [ %110, %114 ]
  %45 = load void (i8*, i8, i8*, i32, i8*, i32, i32, i32)*, void (i8*, i8, i8*, i32, i8*, i32, i32, i32)** @av1_build_compound_diffwtd_mask, align 8
  %46 = trunc i64 %42 to i8
  call void %45(i8* %41, i8 zeroext %46, i8* %3, i32 %19, i8* %4, i32 %19, i32 %22, i32 %19) #5
  %47 = load i64 (i16*, i16*, i8*, i32)*, i64 (i16*, i16*, i8*, i32)** @av1_wedge_sse_from_residuals, align 8
  %48 = call i64 %47(i16* %5, i16* %6, i8* %41, i32 %26) #5
  %49 = load i16*, i16** %34, align 8
  %50 = getelementptr inbounds i16, i16* %49, i64 1
  %51 = load i16, i16* %50, align 2
  %52 = icmp sgt i16 %51, 15
  %53 = ashr i16 %51, 3
  %54 = sitofp i16 %53 to double
  %55 = select i1 %52, double %54, double 1.000000e+00
  %56 = icmp eq i64 %48, 0
  br i1 %56, label %96, label %57

57:                                               ; preds = %40
  %58 = sitofp i64 %48 to double
  %59 = fdiv double %58, %35
  %60 = fmul double %55, %55
  %61 = fdiv double %59, %60
  %62 = call double @log2(double %61) #5
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %36) #5
  store double 0xFFFFFFFFFFFFFFFF, double* %9, align 8
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %37) #5
  store double 0xFFFFFFFFFFFFFFFF, double* %10, align 8
  call void @av1_model_rd_curvfit(i8 zeroext %2, double %59, double %62, double* nonnull %9, double* nonnull %10) #5
  %63 = load double, double* %10, align 8
  %64 = fmul double %59, %63
  %65 = load double, double* %9, align 8
  %66 = fmul double %65, %35
  %67 = fcmp olt double %66, 0.000000e+00
  %68 = fadd double %66, 5.000000e-01
  %69 = fptosi double %68 to i32
  %70 = fmul double %64, %35
  %71 = fcmp olt double %70, 0.000000e+00
  %72 = fadd double %70, 5.000000e-01
  %73 = fptosi double %72 to i64
  %74 = select i1 %71, i64 0, i64 %73
  %75 = icmp eq i32 %69, 0
  %76 = or i1 %67, %75
  br i1 %76, label %77, label %79

77:                                               ; preds = %57
  %78 = shl i64 %48, 4
  br label %93

79:                                               ; preds = %57
  %80 = sext i32 %69 to i64
  %81 = load i32, i32* %38, align 8
  %82 = sext i32 %81 to i64
  %83 = mul nsw i64 %82, %80
  %84 = add nsw i64 %83, 256
  %85 = ashr i64 %84, 9
  %86 = shl i64 %74, 7
  %87 = add nsw i64 %85, %86
  %88 = shl i64 %48, 11
  %89 = icmp slt i64 %87, %88
  %90 = shl i64 %48, 4
  %91 = select i1 %89, i32 %69, i32 0
  %92 = select i1 %89, i64 %74, i64 %90
  br label %93

93:                                               ; preds = %79, %77
  %94 = phi i32 [ 0, %77 ], [ %91, %79 ]
  %95 = phi i64 [ %78, %77 ], [ %92, %79 ]
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %37) #5
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %36) #5
  br label %96

96:                                               ; preds = %40, %93
  %97 = phi i32 [ %94, %93 ], [ 0, %40 ]
  %98 = phi i64 [ %95, %93 ], [ 0, %40 ]
  %99 = sext i32 %97 to i64
  %100 = load i32, i32* %38, align 8
  %101 = sext i32 %100 to i64
  %102 = mul nsw i64 %101, %99
  %103 = add nsw i64 %102, 256
  %104 = ashr i64 %103, 9
  %105 = shl nsw i64 %98, 7
  %106 = add nsw i64 %104, %105
  %107 = icmp slt i64 %106, %44
  br i1 %107, label %108, label %109

108:                                              ; preds = %96
  store i64 %48, i64* %7, align 8
  br label %109

109:                                              ; preds = %108, %96
  %110 = phi i64 [ %106, %108 ], [ %44, %96 ]
  %111 = phi i8 [ %46, %108 ], [ %43, %96 ]
  %112 = add nuw nsw i64 %42, 1
  %113 = icmp eq i64 %112, 2
  br i1 %113, label %117, label %114

114:                                              ; preds = %109
  %115 = getelementptr inbounds [2 x i8*], [2 x i8*]* %12, i64 0, i64 %112
  %116 = load i8*, i8** %115, align 8
  br label %40

117:                                              ; preds = %109
  %118 = getelementptr inbounds %struct.MB_MODE_INFO, %struct.MB_MODE_INFO* %15, i64 0, i32 17, i32 3
  store i8 %111, i8* %118, align 2
  %119 = icmp eq i8 %111, 1
  br i1 %119, label %120, label %124

120:                                              ; preds = %117
  %121 = load i8*, i8** %30, align 16
  %122 = shl nsw i32 %26, 1
  %123 = sext i32 %122 to i64
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %121, i8* nonnull align 16 %27, i64 %123, i1 false)
  br label %124

124:                                              ; preds = %120, %117
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %28) #5
  call void @llvm.lifetime.end.p0i8(i64 32768, i8* nonnull %27) #5
  ret i64 %110
}

declare i64 @aom_sum_squares_i16_sse2(i16*, i32) local_unnamed_addr #2

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { inlinehint nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{i8 0, i8 2}
