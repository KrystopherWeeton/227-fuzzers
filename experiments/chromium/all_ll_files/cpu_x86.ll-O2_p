; ModuleID = '../../native_client/src/trusted/cpu_features/arch/x86/cpu_x86.c'
source_filename = "../../native_client/src/trusted/cpu_features/arch/x86/cpu_x86.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver fmemopen, fmemopen@GLIBC_2.2.5"
module asm ".symver glob, glob@GLIBC_2.2.5"
module asm ".symver glob64, glob64@GLIBC_2.2.5"
module asm ".symver quick_exit, quick_exit@GLIBC_2.10"

%struct.cpufeature = type { i8, i32, i8* }
%struct.NaClCPUData = type { i32, [4 x i32], [12 x i32], [1 x i64], [21 x i8] }
%struct.NaClCPUFeaturesAbstract = type opaque
%struct.cpu_feature_struct_X86 = type { [39 x i8] }

@CPUFeatureDescriptions = internal unnamed_addr constant [39 x %struct.cpufeature] [%struct.cpufeature { i8 12, i32 0, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.1, i32 0, i32 0) }, %struct.cpufeature { i8 12, i32 0, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.2, i32 0, i32 0) }, %struct.cpufeature { i8 11, i32 -2147483648, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.3, i32 0, i32 0) }, %struct.cpufeature { i8 2, i32 33554432, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.4, i32 0, i32 0) }, %struct.cpufeature { i8 2, i32 268435456, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.5, i32 0, i32 0) }, %struct.cpufeature { i8 5, i32 32, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.6, i32 0, i32 0) }, %struct.cpufeature { i8 5, i32 8, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.7, i32 0, i32 0) }, %struct.cpufeature { i8 3, i32 524288, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.8, i32 0, i32 0) }, %struct.cpufeature { i8 2, i32 2, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.9, i32 0, i32 0) }, %struct.cpufeature { i8 3, i32 32768, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.10, i32 0, i32 0) }, %struct.cpufeature { i8 2, i32 8192, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.11, i32 0, i32 0) }, %struct.cpufeature { i8 3, i32 256, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.12, i32 0, i32 0) }, %struct.cpufeature { i8 11, i32 1073741824, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.13, i32 0, i32 0) }, %struct.cpufeature { i8 11, i32 4194304, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.14, i32 0, i32 0) }, %struct.cpufeature { i8 2, i32 536870912, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.15, i32 0, i32 0) }, %struct.cpufeature { i8 2, i32 4096, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.16, i32 0, i32 0) }, %struct.cpufeature { i8 10, i32 65536, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.17, i32 0, i32 0) }, %struct.cpufeature { i8 3, i32 16777216, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.18, i32 0, i32 0) }, %struct.cpufeature { i8 10, i32 1, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.19, i32 0, i32 0) }, %struct.cpufeature { i8 11, i32 536870912, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.20, i32 0, i32 0) }, %struct.cpufeature { i8 10, i32 32768, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.21, i32 0, i32 0) }, %struct.cpufeature { i8 10, i32 32, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.22, i32 0, i32 0) }, %struct.cpufeature { i8 3, i32 8388608, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.23, i32 0, i32 0) }, %struct.cpufeature { i8 2, i32 8, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.24, i32 0, i32 0) }, %struct.cpufeature { i8 2, i32 4194304, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.25, i32 0, i32 0) }, %struct.cpufeature { i8 2, i32 134217728, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.26, i32 0, i32 0) }, %struct.cpufeature { i8 2, i32 8388608, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.27, i32 0, i32 0) }, %struct.cpufeature { i8 10, i32 256, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.28, i32 0, i32 0) }, %struct.cpufeature { i8 3, i32 33554432, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.29, i32 0, i32 0) }, %struct.cpufeature { i8 3, i32 67108864, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.30, i32 0, i32 0) }, %struct.cpufeature { i8 2, i32 1, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.31, i32 0, i32 0) }, %struct.cpufeature { i8 2, i32 524288, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.32, i32 0, i32 0) }, %struct.cpufeature { i8 2, i32 1048576, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.33, i32 0, i32 0) }, %struct.cpufeature { i8 10, i32 64, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.34, i32 0, i32 0) }, %struct.cpufeature { i8 2, i32 512, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.35, i32 0, i32 0) }, %struct.cpufeature { i8 10, i32 2097152, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.36, i32 0, i32 0) }, %struct.cpufeature { i8 3, i32 16, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.37, i32 0, i32 0) }, %struct.cpufeature { i8 3, i32 1, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.38, i32 0, i32 0) }, %struct.cpufeature { i8 10, i32 2048, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.39, i32 0, i32 0) }], align 16
@.str = private unnamed_addr constant [5 x i8] c"%08x\00", align 1
@Intel_CPUID0 = internal constant [13 x i8] c"GenuineIntel\00", align 1
@AMD_CPUID0 = internal constant [13 x i8] c"AuthenticAMD\00", align 1
@.str.1 = private unnamed_addr constant [16 x i8] c"CPUID supported\00", align 1
@.str.2 = private unnamed_addr constant [14 x i8] c"CPU supported\00", align 1
@.str.3 = private unnamed_addr constant [6 x i8] c"3DNow\00", align 1
@.str.4 = private unnamed_addr constant [4 x i8] c"AES\00", align 1
@.str.5 = private unnamed_addr constant [4 x i8] c"AVX\00", align 1
@.str.6 = private unnamed_addr constant [5 x i8] c"AVX2\00", align 1
@.str.7 = private unnamed_addr constant [5 x i8] c"BMI1\00", align 1
@.str.8 = private unnamed_addr constant [8 x i8] c"CLFLUSH\00", align 1
@.str.9 = private unnamed_addr constant [6 x i8] c"CLMUL\00", align 1
@.str.10 = private unnamed_addr constant [5 x i8] c"CMOV\00", align 1
@.str.11 = private unnamed_addr constant [11 x i8] c"CMPXCHG16B\00", align 1
@.str.12 = private unnamed_addr constant [10 x i8] c"CMPXCHG8B\00", align 1
@.str.13 = private unnamed_addr constant [7 x i8] c"E3DNow\00", align 1
@.str.14 = private unnamed_addr constant [5 x i8] c"EMMX\00", align 1
@.str.15 = private unnamed_addr constant [5 x i8] c"F16C\00", align 1
@.str.16 = private unnamed_addr constant [4 x i8] c"FMA\00", align 1
@.str.17 = private unnamed_addr constant [5 x i8] c"FMA4\00", align 1
@.str.18 = private unnamed_addr constant [15 x i8] c"FXSAVE/FXRSTOR\00", align 1
@.str.19 = private unnamed_addr constant [5 x i8] c"LAHF\00", align 1
@.str.20 = private unnamed_addr constant [9 x i8] c"LongMode\00", align 1
@.str.21 = private unnamed_addr constant [4 x i8] c"LWP\00", align 1
@.str.22 = private unnamed_addr constant [6 x i8] c"LZCNT\00", align 1
@.str.23 = private unnamed_addr constant [4 x i8] c"MMX\00", align 1
@.str.24 = private unnamed_addr constant [14 x i8] c"MONITOR/MWAIT\00", align 1
@.str.25 = private unnamed_addr constant [6 x i8] c"MOVBE\00", align 1
@.str.26 = private unnamed_addr constant [8 x i8] c"OSXSAVE\00", align 1
@.str.27 = private unnamed_addr constant [7 x i8] c"POPCNT\00", align 1
@.str.28 = private unnamed_addr constant [14 x i8] c"3DNowPrefetch\00", align 1
@.str.29 = private unnamed_addr constant [4 x i8] c"SSE\00", align 1
@.str.30 = private unnamed_addr constant [5 x i8] c"SSE2\00", align 1
@.str.31 = private unnamed_addr constant [5 x i8] c"SSE3\00", align 1
@.str.32 = private unnamed_addr constant [6 x i8] c"SSE41\00", align 1
@.str.33 = private unnamed_addr constant [6 x i8] c"SSE42\00", align 1
@.str.34 = private unnamed_addr constant [6 x i8] c"SSE4A\00", align 1
@.str.35 = private unnamed_addr constant [6 x i8] c"SSSE3\00", align 1
@.str.36 = private unnamed_addr constant [4 x i8] c"TBM\00", align 1
@.str.37 = private unnamed_addr constant [6 x i8] c"RDTSC\00", align 1
@.str.38 = private unnamed_addr constant [4 x i8] c"x87\00", align 1
@.str.39 = private unnamed_addr constant [4 x i8] c"XOP\00", align 1

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden i8* @GetCPUIDString(%struct.NaClCPUData* readnone) local_unnamed_addr #0 {
  %2 = getelementptr inbounds %struct.NaClCPUData, %struct.NaClCPUData* %0, i64 0, i32 4, i64 0
  ret i8* %2
}

; Function Attrs: nounwind ssp uwtable
define hidden void @NaClSetAllCPUFeaturesX86(%struct.NaClCPUFeaturesAbstract* nocapture) local_unnamed_addr #1 {
  %2 = bitcast %struct.NaClCPUFeaturesAbstract* %0 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 1 %2, i8 1, i64 39, i1 false)
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nounwind ssp uwtable
define hidden void @NaClClearCPUFeaturesX86(%struct.cpu_feature_struct_X86* nocapture) local_unnamed_addr #1 {
  %2 = getelementptr inbounds %struct.cpu_feature_struct_X86, %struct.cpu_feature_struct_X86* %0, i64 0, i32 0, i64 0
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %2, i8 0, i64 39, i1 false)
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable writeonly
define hidden void @NaClSetCPUFeatureX86(%struct.cpu_feature_struct_X86* nocapture, i32, i32) local_unnamed_addr #3 {
  %4 = trunc i32 %2 to i8
  %5 = zext i32 %1 to i64
  %6 = getelementptr inbounds %struct.cpu_feature_struct_X86, %struct.cpu_feature_struct_X86* %0, i64 0, i32 0, i64 %5
  store i8 %4, i8* %6, align 1
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nounwind ssp uwtable
define hidden void @NaClCPUDataGet(%struct.NaClCPUData*) local_unnamed_addr #1 {
  %2 = alloca i32, align 16
  %3 = alloca i32, align 4
  %4 = alloca i32, align 8
  %5 = alloca i32, align 4
  %6 = getelementptr inbounds %struct.NaClCPUData, %struct.NaClCPUData* %0, i64 0, i32 0
  store i32 1, i32* %6, align 8
  %7 = bitcast i32* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %7)
  %8 = bitcast i32* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %8)
  %9 = bitcast i32* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %9)
  %10 = bitcast i32* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %10)
  %11 = tail call { i32, i32, i32, i32 } asm sideeffect "push %rbx       \0A\09cpuid            \0A\09movl %ebx, $1   \0A\09pop %rbx        \0A\09", "={ax},={si},={cx},={dx},{ax},~{cc},~{dirflag},~{fpsr},~{flags}"(i32 0) #9, !srcloc !2
  %12 = extractvalue { i32, i32, i32, i32 } %11, 0
  %13 = extractvalue { i32, i32, i32, i32 } %11, 1
  %14 = extractvalue { i32, i32, i32, i32 } %11, 2
  %15 = extractvalue { i32, i32, i32, i32 } %11, 3
  store volatile i32 %12, i32* %2, align 16
  store volatile i32 %13, i32* %3, align 4
  store volatile i32 %14, i32* %4, align 8
  store volatile i32 %15, i32* %5, align 4
  %16 = getelementptr inbounds %struct.NaClCPUData, %struct.NaClCPUData* %0, i64 0, i32 1, i64 0
  store i32 %13, i32* %16, align 4
  %17 = getelementptr inbounds %struct.NaClCPUData, %struct.NaClCPUData* %0, i64 0, i32 1, i64 1
  store i32 %15, i32* %17, align 4
  %18 = getelementptr inbounds %struct.NaClCPUData, %struct.NaClCPUData* %0, i64 0, i32 1, i64 2
  store i32 %14, i32* %18, align 4
  %19 = getelementptr inbounds %struct.NaClCPUData, %struct.NaClCPUData* %0, i64 0, i32 1, i64 3
  store i32 0, i32* %19, align 4
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %7)
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %8)
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %9)
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %10)
  %20 = getelementptr %struct.NaClCPUData, %struct.NaClCPUData* %0, i64 0, i32 2, i64 0
  %21 = bitcast i32* %20 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 4 %21, i8 0, i64 48, i1 false) #9
  %22 = getelementptr inbounds %struct.NaClCPUData, %struct.NaClCPUData* %0, i64 0, i32 2, i64 1
  %23 = getelementptr inbounds %struct.NaClCPUData, %struct.NaClCPUData* %0, i64 0, i32 2, i64 2
  %24 = getelementptr inbounds %struct.NaClCPUData, %struct.NaClCPUData* %0, i64 0, i32 2, i64 3
  %25 = tail call { i32, i32, i32, i32 } asm sideeffect "push %rbx       \0A\09cpuid            \0A\09movl %ebx, $1   \0A\09pop %rbx        \0A\09", "={ax},={si},={cx},={dx},{ax},~{cc},~{dirflag},~{fpsr},~{flags}"(i32 1) #9, !srcloc !2
  %26 = extractvalue { i32, i32, i32, i32 } %25, 0
  %27 = extractvalue { i32, i32, i32, i32 } %25, 1
  %28 = extractvalue { i32, i32, i32, i32 } %25, 2
  %29 = extractvalue { i32, i32, i32, i32 } %25, 3
  store volatile i32 %26, i32* %20, align 4
  store volatile i32 %27, i32* %22, align 4
  store volatile i32 %28, i32* %23, align 4
  store volatile i32 %29, i32* %24, align 4
  %30 = getelementptr inbounds %struct.NaClCPUData, %struct.NaClCPUData* %0, i64 0, i32 2, i64 4
  %31 = getelementptr inbounds %struct.NaClCPUData, %struct.NaClCPUData* %0, i64 0, i32 2, i64 5
  %32 = getelementptr inbounds %struct.NaClCPUData, %struct.NaClCPUData* %0, i64 0, i32 2, i64 6
  %33 = getelementptr inbounds %struct.NaClCPUData, %struct.NaClCPUData* %0, i64 0, i32 2, i64 7
  %34 = tail call { i32, i32, i32, i32 } asm sideeffect "push %rbx       \0A\09cpuid            \0A\09movl %ebx, $1   \0A\09pop %rbx        \0A\09", "={ax},={si},={cx},={dx},{ax},{cx},~{cc},~{dirflag},~{fpsr},~{flags}"(i32 7, i32 0) #9, !srcloc !3
  %35 = extractvalue { i32, i32, i32, i32 } %34, 0
  %36 = extractvalue { i32, i32, i32, i32 } %34, 1
  %37 = extractvalue { i32, i32, i32, i32 } %34, 2
  %38 = extractvalue { i32, i32, i32, i32 } %34, 3
  store volatile i32 %35, i32* %30, align 4
  store volatile i32 %36, i32* %31, align 4
  store volatile i32 %37, i32* %32, align 4
  store volatile i32 %38, i32* %33, align 4
  %39 = getelementptr inbounds %struct.NaClCPUData, %struct.NaClCPUData* %0, i64 0, i32 2, i64 8
  %40 = getelementptr inbounds %struct.NaClCPUData, %struct.NaClCPUData* %0, i64 0, i32 2, i64 9
  %41 = getelementptr inbounds %struct.NaClCPUData, %struct.NaClCPUData* %0, i64 0, i32 2, i64 10
  %42 = getelementptr inbounds %struct.NaClCPUData, %struct.NaClCPUData* %0, i64 0, i32 2, i64 11
  %43 = tail call { i32, i32, i32, i32 } asm sideeffect "push %rbx       \0A\09cpuid            \0A\09movl %ebx, $1   \0A\09pop %rbx        \0A\09", "={ax},={si},={cx},={dx},{ax},~{cc},~{dirflag},~{fpsr},~{flags}"(i32 -2147483647) #9, !srcloc !2
  %44 = extractvalue { i32, i32, i32, i32 } %43, 0
  %45 = extractvalue { i32, i32, i32, i32 } %43, 1
  %46 = extractvalue { i32, i32, i32, i32 } %43, 2
  %47 = extractvalue { i32, i32, i32, i32 } %43, 3
  store volatile i32 %44, i32* %39, align 4
  store volatile i32 %45, i32* %40, align 4
  store volatile i32 %46, i32* %41, align 4
  store volatile i32 %47, i32* %42, align 4
  %48 = load i32, i32* %23, align 4
  %49 = and i32 %48, 134217728
  %50 = icmp eq i32 %49, 0
  br i1 %50, label %53, label %51

51:                                               ; preds = %1
  %52 = tail call i64 @NaClXGETBV(i32 0) #9
  br label %53

53:                                               ; preds = %1, %51
  %54 = phi i64 [ %52, %51 ], [ 0, %1 ]
  %55 = getelementptr inbounds %struct.NaClCPUData, %struct.NaClCPUData* %0, i64 0, i32 3, i64 0
  store i64 %54, i64* %55, align 8
  %56 = bitcast i32* %16 to i8*
  %57 = getelementptr inbounds %struct.NaClCPUData, %struct.NaClCPUData* %0, i64 0, i32 4, i64 0
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %57, i8* align 1 %56, i64 12, i1 false) #9
  %58 = getelementptr inbounds %struct.NaClCPUData, %struct.NaClCPUData* %0, i64 0, i32 4, i64 12
  %59 = tail call i64 @llvm.objectsize.i64.p0i8(i8* %58, i1 false, i1 true, i1 false) #9
  %60 = load i32, i32* %20, align 4
  %61 = tail call i32 (i8*, i64, i32, i64, i8*, ...) @__snprintf_chk(i8* %58, i64 9, i32 1, i64 %59, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i64 0, i64 0), i32 %60) #9
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @NaClGetCurrentCPUFeaturesX86(%struct.NaClCPUFeaturesAbstract* nocapture) local_unnamed_addr #1 {
  %2 = alloca %struct.NaClCPUData, align 8
  %3 = bitcast %struct.NaClCPUFeaturesAbstract* %0 to %struct.cpu_feature_struct_X86*
  %4 = bitcast %struct.NaClCPUData* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 104, i8* nonnull %4) #9
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %4, i8 -86, i64 104, i1 false)
  call void @NaClCPUDataGet(%struct.NaClCPUData* nonnull %2)
  %5 = bitcast %struct.NaClCPUFeaturesAbstract* %0 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 1 %5, i8 0, i64 39, i1 false) #9
  %6 = getelementptr inbounds %struct.NaClCPUData, %struct.NaClCPUData* %2, i64 0, i32 0
  %7 = load i32, i32* %6, align 8
  %8 = icmp eq i32 %7, 0
  br i1 %8, label %10, label %9

9:                                                ; preds = %1
  store i8 1, i8* %5, align 1
  br label %10

10:                                               ; preds = %9, %1
  %11 = phi i8 [ 1, %9 ], [ 0, %1 ]
  %12 = getelementptr inbounds %struct.NaClCPUData, %struct.NaClCPUData* %2, i64 0, i32 1, i64 0
  %13 = bitcast i32* %12 to i8*
  %14 = call i32 @bcmp(i8* %13, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @Intel_CPUID0, i64 0, i64 0), i64 12)
  %15 = icmp eq i32 %14, 0
  br i1 %15, label %19, label %16

16:                                               ; preds = %10
  %17 = call i32 @bcmp(i8* %13, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @AMD_CPUID0, i64 0, i64 0), i64 12)
  %18 = icmp eq i32 %17, 0
  br i1 %18, label %19, label %21

19:                                               ; preds = %16, %10
  %20 = getelementptr inbounds %struct.cpu_feature_struct_X86, %struct.cpu_feature_struct_X86* %3, i64 0, i32 0, i64 1
  store i8 1, i8* %20, align 1
  br label %21

21:                                               ; preds = %19, %16
  %22 = icmp eq i8 %11, 0
  br i1 %22, label %56, label %23

23:                                               ; preds = %21
  %24 = bitcast %struct.NaClCPUFeaturesAbstract* %0 to i8*
  store i8 1, i8* %24, align 1
  %25 = getelementptr inbounds %struct.cpu_feature_struct_X86, %struct.cpu_feature_struct_X86* %3, i64 0, i32 0, i64 1
  store i8 1, i8* %25, align 1
  br label %26

26:                                               ; preds = %26, %23
  %27 = phi i64 [ %39, %26 ], [ 2, %23 ]
  %28 = getelementptr inbounds [39 x %struct.cpufeature], [39 x %struct.cpufeature]* @CPUFeatureDescriptions, i64 0, i64 %27, i32 0
  %29 = load i8, i8* %28, align 16
  %30 = zext i8 %29 to i64
  %31 = getelementptr inbounds %struct.NaClCPUData, %struct.NaClCPUData* %2, i64 0, i32 2, i64 %30
  %32 = load i32, i32* %31, align 4
  %33 = getelementptr inbounds [39 x %struct.cpufeature], [39 x %struct.cpufeature]* @CPUFeatureDescriptions, i64 0, i64 %27, i32 1
  %34 = load i32, i32* %33, align 4
  %35 = and i32 %34, %32
  %36 = icmp ne i32 %35, 0
  %37 = zext i1 %36 to i8
  %38 = getelementptr inbounds %struct.cpu_feature_struct_X86, %struct.cpu_feature_struct_X86* %3, i64 0, i32 0, i64 %27
  store i8 %37, i8* %38, align 1
  %39 = add nuw nsw i64 %27, 1
  %40 = icmp eq i64 %39, 39
  br i1 %40, label %41, label %26, !llvm.loop !4

41:                                               ; preds = %26
  %42 = getelementptr inbounds %struct.cpu_feature_struct_X86, %struct.cpu_feature_struct_X86* %3, i64 0, i32 0, i64 25
  %43 = load i8, i8* %42, align 1
  %44 = icmp eq i8 %43, 0
  br i1 %44, label %50, label %45

45:                                               ; preds = %41
  %46 = getelementptr inbounds %struct.NaClCPUData, %struct.NaClCPUData* %2, i64 0, i32 3, i64 0
  %47 = load i64, i64* %46, align 8
  %48 = and i64 %47, 6
  %49 = icmp eq i64 %48, 6
  br i1 %49, label %56, label %50

50:                                               ; preds = %45, %41
  %51 = getelementptr inbounds %struct.cpu_feature_struct_X86, %struct.cpu_feature_struct_X86* %3, i64 0, i32 0, i64 4
  store i8 0, i8* %51, align 1
  %52 = getelementptr inbounds %struct.cpu_feature_struct_X86, %struct.cpu_feature_struct_X86* %3, i64 0, i32 0, i64 5
  store i8 0, i8* %52, align 1
  %53 = getelementptr inbounds %struct.cpu_feature_struct_X86, %struct.cpu_feature_struct_X86* %3, i64 0, i32 0, i64 14
  store i8 0, i8* %53, align 1
  %54 = getelementptr inbounds %struct.cpu_feature_struct_X86, %struct.cpu_feature_struct_X86* %3, i64 0, i32 0, i64 15
  store i8 0, i8* %54, align 1
  %55 = getelementptr inbounds %struct.cpu_feature_struct_X86, %struct.cpu_feature_struct_X86* %3, i64 0, i32 0, i64 16
  store i8 0, i8* %55, align 1
  br label %56

56:                                               ; preds = %21, %45, %50
  call void @llvm.lifetime.end.p0i8(i64 104, i8* nonnull %4) #9
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #2

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden i8* @NaClGetCPUFeatureX86Name(i32) local_unnamed_addr #0 {
  %2 = zext i32 %0 to i64
  %3 = getelementptr inbounds [39 x %struct.cpufeature], [39 x %struct.cpufeature]* @CPUFeatureDescriptions, i64 0, i64 %2, i32 2
  %4 = load i8*, i8** %3, align 8
  ret i8* %4
}

; Function Attrs: nounwind ssp uwtable
define hidden void @NaClCopyCPUFeaturesX86(%struct.cpu_feature_struct_X86* nocapture, %struct.cpu_feature_struct_X86* nocapture readonly) local_unnamed_addr #1 {
  %3 = getelementptr inbounds %struct.cpu_feature_struct_X86, %struct.cpu_feature_struct_X86* %0, i64 0, i32 0, i64 0
  %4 = getelementptr inbounds %struct.cpu_feature_struct_X86, %struct.cpu_feature_struct_X86* %1, i64 0, i32 0, i64 0
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %3, i8* align 1 %4, i64 39, i1 false)
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #2

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden i32 @NaClArchSupportedX86(%struct.cpu_feature_struct_X86* nocapture readonly) local_unnamed_addr #4 {
  %2 = getelementptr inbounds %struct.cpu_feature_struct_X86, %struct.cpu_feature_struct_X86* %0, i64 0, i32 0, i64 0
  %3 = load i8, i8* %2, align 1
  %4 = icmp eq i8 %3, 0
  br i1 %4, label %10, label %5

5:                                                ; preds = %1
  %6 = getelementptr inbounds %struct.cpu_feature_struct_X86, %struct.cpu_feature_struct_X86* %0, i64 0, i32 0, i64 1
  %7 = load i8, i8* %6, align 1
  %8 = icmp ne i8 %7, 0
  %9 = zext i1 %8 to i32
  br label %10

10:                                               ; preds = %1, %5
  %11 = phi i32 [ 0, %1 ], [ %9, %5 ]
  ret i32 %11
}

declare i64 @NaClXGETBV(i32) local_unnamed_addr #5

; Function Attrs: nofree
declare i32 @__snprintf_chk(i8*, i64, i32, i64, i8*, ...) local_unnamed_addr #6

; Function Attrs: nounwind readnone speculatable
declare i64 @llvm.objectsize.i64.p0i8(i8*, i1 immarg, i1 immarg, i1 immarg) #7

; Function Attrs: nofree nounwind readonly
declare i32 @bcmp(i8* nocapture, i8* nocapture, i64) local_unnamed_addr #8

attributes #0 = { norecurse nounwind readnone ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind }
attributes #3 = { nofree norecurse nounwind ssp uwtable writeonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { norecurse nounwind readonly ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nofree "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { nounwind readnone speculatable }
attributes #8 = { nofree nounwind readonly }
attributes #9 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{i32 12479, i32 12499, i32 12613, i32 12656, i32 12786}
!3 = !{i32 14147, i32 14167, i32 14281, i32 14324, i32 14454}
!4 = distinct !{!4, !5}
!5 = !{!"llvm.loop.unroll.disable"}
