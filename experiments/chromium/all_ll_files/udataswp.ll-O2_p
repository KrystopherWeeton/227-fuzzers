; ModuleID = '../../third_party/icu/source/common/udataswp.cpp'
source_filename = "../../third_party/icu/source/common/udataswp.cpp"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.UDataSwapper = type { i8, i8, i8, i8, i16 (i16)*, i32 (i32)*, i32 (%struct.UDataSwapper*, i8*, i32, i16*, i32)*, void (i16*, i16)*, void (i32*, i32)*, i32 (%struct.UDataSwapper*, i8*, i32, i8*, i32*)*, i32 (%struct.UDataSwapper*, i8*, i32, i8*, i32*)*, i32 (%struct.UDataSwapper*, i8*, i32, i8*, i32*)*, i32 (%struct.UDataSwapper*, i8*, i32, i8*, i32*)*, void (i8*, i8*, %struct.__va_list_tag*)*, i8* }
%struct.__va_list_tag = type { i32, i32, i8*, i8* }

@.str = private unnamed_addr constant [65 x i8] c"udata_swapDataHeader(): initial bytes do not look like ICU data\0A\00", align 1
@.str.1 = private unnamed_addr constant [84 x i8] c"udata_swapDataHeader(): header size mismatch - headerSize %d infoSize %d length %d\0A\00", align 1

; Function Attrs: nounwind ssp uwtable
define hidden signext i16 @udata_readInt16_69(%struct.UDataSwapper* nocapture readonly, i16 signext) local_unnamed_addr #0 {
  %3 = getelementptr inbounds %struct.UDataSwapper, %struct.UDataSwapper* %0, i64 0, i32 4
  %4 = load i16 (i16)*, i16 (i16)** %3, align 8
  %5 = tail call zeroext i16 %4(i16 zeroext %1) #2
  ret i16 %5
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @udata_readInt32_69(%struct.UDataSwapper* nocapture readonly, i32) local_unnamed_addr #0 {
  %3 = getelementptr inbounds %struct.UDataSwapper, %struct.UDataSwapper* %0, i64 0, i32 5
  %4 = load i32 (i32)*, i32 (i32)** %3, align 8
  %5 = tail call i32 %4(i32 %1) #2
  ret i32 %5
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @udata_swapInvStringBlock_69(%struct.UDataSwapper*, i8*, i32, i8*, i32*) local_unnamed_addr #0 {
  %6 = icmp eq i32* %4, null
  br i1 %6, label %50, label %7

7:                                                ; preds = %5
  %8 = load i32, i32* %4, align 4
  %9 = icmp slt i32 %8, 1
  br i1 %9, label %10, label %50

10:                                               ; preds = %7
  %11 = icmp eq %struct.UDataSwapper* %0, null
  %12 = icmp eq i8* %1, null
  %13 = or i1 %11, %12
  %14 = icmp slt i32 %2, 0
  %15 = or i1 %13, %14
  br i1 %15, label %22, label %16

16:                                               ; preds = %10
  %17 = icmp sgt i32 %2, 0
  %18 = icmp eq i8* %3, null
  %19 = and i1 %17, %18
  br i1 %19, label %22, label %20

20:                                               ; preds = %16
  %21 = sext i32 %2 to i64
  br label %23

22:                                               ; preds = %16, %10
  store i32 1, i32* %4, align 4
  br label %50

23:                                               ; preds = %20, %26
  %24 = phi i64 [ %21, %20 ], [ %27, %26 ]
  %25 = icmp sgt i64 %24, 0
  br i1 %25, label %26, label %31

26:                                               ; preds = %23
  %27 = add nsw i64 %24, -1
  %28 = getelementptr inbounds i8, i8* %1, i64 %27
  %29 = load i8, i8* %28, align 1
  %30 = icmp eq i8 %29, 0
  br i1 %30, label %31, label %23

31:                                               ; preds = %26, %23
  %32 = trunc i64 %24 to i32
  %33 = getelementptr inbounds %struct.UDataSwapper, %struct.UDataSwapper* %0, i64 0, i32 12
  %34 = load i32 (%struct.UDataSwapper*, i8*, i32, i8*, i32*)*, i32 (%struct.UDataSwapper*, i8*, i32, i8*, i32*)** %33, align 8
  %35 = tail call i32 %34(%struct.UDataSwapper* %0, i8* %1, i32 %32, i8* %3, i32* nonnull %4) #2
  %36 = icmp ne i8* %1, %3
  %37 = icmp slt i32 %32, %2
  %38 = and i1 %36, %37
  br i1 %38, label %39, label %46

39:                                               ; preds = %31
  %40 = shl i64 %24, 32
  %41 = ashr exact i64 %40, 32
  %42 = getelementptr inbounds i8, i8* %3, i64 %41
  %43 = getelementptr inbounds i8, i8* %1, i64 %41
  %44 = sub nsw i32 %2, %32
  %45 = sext i32 %44 to i64
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %42, i8* align 1 %43, i64 %45, i1 false)
  br label %46

46:                                               ; preds = %31, %39
  %47 = load i32, i32* %4, align 4
  %48 = icmp sgt i32 %47, 0
  %49 = select i1 %48, i32 0, i32 %2
  br label %50

50:                                               ; preds = %46, %5, %7, %22
  %51 = phi i32 [ 0, %22 ], [ 0, %7 ], [ 0, %5 ], [ %49, %46 ]
  ret i32 %51
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: nounwind ssp uwtable
define hidden void @udata_printError_69(%struct.UDataSwapper* nocapture readonly, i8*, ...) local_unnamed_addr #0 {
  %3 = alloca [1 x %struct.__va_list_tag], align 16
  %4 = bitcast [1 x %struct.__va_list_tag]* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %4) #2
  %5 = getelementptr inbounds %struct.UDataSwapper, %struct.UDataSwapper* %0, i64 0, i32 13
  %6 = bitcast [1 x %struct.__va_list_tag]* %3 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %6, i8 -86, i64 24, i1 false)
  %7 = load void (i8*, i8*, %struct.__va_list_tag*)*, void (i8*, i8*, %struct.__va_list_tag*)** %5, align 8
  %8 = icmp eq void (i8*, i8*, %struct.__va_list_tag*)* %7, null
  br i1 %8, label %14, label %9

9:                                                ; preds = %2
  %10 = getelementptr inbounds [1 x %struct.__va_list_tag], [1 x %struct.__va_list_tag]* %3, i64 0, i64 0
  call void @llvm.va_start(i8* nonnull %4)
  %11 = load void (i8*, i8*, %struct.__va_list_tag*)*, void (i8*, i8*, %struct.__va_list_tag*)** %5, align 8
  %12 = getelementptr inbounds %struct.UDataSwapper, %struct.UDataSwapper* %0, i64 0, i32 14
  %13 = load i8*, i8** %12, align 8
  call void %11(i8* %13, i8* %1, %struct.__va_list_tag* nonnull %10) #2
  call void @llvm.va_end(i8* nonnull %4)
  br label %14

14:                                               ; preds = %2, %9
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %4) #2
  ret void
}

; Function Attrs: nounwind
declare void @llvm.va_start(i8*) #2

; Function Attrs: nounwind
declare void @llvm.va_end(i8*) #2

; Function Attrs: nounwind ssp uwtable
define hidden i32 @udata_swapDataHeader_69(%struct.UDataSwapper*, i8*, i32, i8*, i32*) local_unnamed_addr #0 {
  %6 = icmp eq i32* %4, null
  br i1 %6, label %104, label %7

7:                                                ; preds = %5
  %8 = load i32, i32* %4, align 4
  %9 = icmp slt i32 %8, 1
  br i1 %9, label %10, label %104

10:                                               ; preds = %7
  %11 = icmp eq %struct.UDataSwapper* %0, null
  %12 = icmp eq i8* %1, null
  %13 = or i1 %11, %12
  %14 = icmp slt i32 %2, -1
  %15 = or i1 %13, %14
  br i1 %15, label %20, label %16

16:                                               ; preds = %10
  %17 = icmp sgt i32 %2, 0
  %18 = icmp eq i8* %3, null
  %19 = and i1 %17, %18
  br i1 %19, label %20, label %21

20:                                               ; preds = %16, %10
  store i32 1, i32* %4, align 4
  br label %104

21:                                               ; preds = %16
  %22 = icmp ult i32 %2, 24
  br i1 %22, label %35, label %23

23:                                               ; preds = %21
  %24 = getelementptr inbounds i8, i8* %1, i64 2
  %25 = load i8, i8* %24, align 2
  %26 = icmp eq i8 %25, -38
  br i1 %26, label %27, label %35

27:                                               ; preds = %23
  %28 = getelementptr inbounds i8, i8* %1, i64 3
  %29 = load i8, i8* %28, align 1
  %30 = icmp eq i8 %29, 39
  br i1 %30, label %31, label %35

31:                                               ; preds = %27
  %32 = getelementptr inbounds i8, i8* %1, i64 10
  %33 = load i8, i8* %32, align 2
  %34 = icmp eq i8 %33, 2
  br i1 %34, label %36, label %35

35:                                               ; preds = %31, %27, %23, %21
  tail call void (%struct.UDataSwapper*, i8*, ...) @udata_printError_69(%struct.UDataSwapper* nonnull %0, i8* getelementptr inbounds ([65 x i8], [65 x i8]* @.str, i64 0, i64 0))
  store i32 16, i32* %4, align 4
  br label %104

36:                                               ; preds = %31
  %37 = getelementptr inbounds i8, i8* %1, i64 4
  %38 = getelementptr inbounds %struct.UDataSwapper, %struct.UDataSwapper* %0, i64 0, i32 4
  %39 = load i16 (i16)*, i16 (i16)** %38, align 8
  %40 = bitcast i8* %1 to i16*
  %41 = load i16, i16* %40, align 2
  %42 = tail call zeroext i16 %39(i16 zeroext %41) #2
  %43 = load i16 (i16)*, i16 (i16)** %38, align 8
  %44 = bitcast i8* %37 to i16*
  %45 = load i16, i16* %44, align 2
  %46 = tail call zeroext i16 %43(i16 zeroext %45) #2
  %47 = zext i16 %42 to i64
  %48 = icmp ult i16 %42, 24
  %49 = icmp ult i16 %46, 20
  %50 = or i1 %48, %49
  br i1 %50, label %58, label %51

51:                                               ; preds = %36
  %52 = zext i16 %46 to i64
  %53 = add nuw nsw i64 %52, 4
  %54 = icmp ugt i64 %53, %47
  br i1 %54, label %58, label %55

55:                                               ; preds = %51
  %56 = zext i16 %42 to i32
  %57 = icmp ugt i32 %56, %2
  br i1 %57, label %58, label %61

58:                                               ; preds = %55, %51, %36
  %59 = zext i16 %42 to i32
  %60 = zext i16 %46 to i32
  tail call void (%struct.UDataSwapper*, i8*, ...) @udata_printError_69(%struct.UDataSwapper* nonnull %0, i8* getelementptr inbounds ([84 x i8], [84 x i8]* @.str.1, i64 0, i64 0), i32 %59, i32 %60, i32 %2)
  store i32 8, i32* %4, align 4
  br label %104

61:                                               ; preds = %55
  br i1 %17, label %62, label %104

62:                                               ; preds = %61
  %63 = icmp eq i8* %1, %3
  br i1 %63, label %65, label %64

64:                                               ; preds = %62
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %3, i8* nonnull align 1 %1, i64 %47, i1 false)
  br label %65

65:                                               ; preds = %62, %64
  %66 = getelementptr inbounds %struct.UDataSwapper, %struct.UDataSwapper* %0, i64 0, i32 2
  %67 = load i8, i8* %66, align 2
  %68 = getelementptr inbounds i8, i8* %3, i64 4
  %69 = getelementptr inbounds i8, i8* %3, i64 8
  store i8 %67, i8* %69, align 2
  %70 = getelementptr inbounds %struct.UDataSwapper, %struct.UDataSwapper* %0, i64 0, i32 3
  %71 = load i8, i8* %70, align 1
  %72 = getelementptr inbounds i8, i8* %3, i64 9
  store i8 %71, i8* %72, align 1
  %73 = getelementptr inbounds %struct.UDataSwapper, %struct.UDataSwapper* %0, i64 0, i32 9
  %74 = load i32 (%struct.UDataSwapper*, i8*, i32, i8*, i32*)*, i32 (%struct.UDataSwapper*, i8*, i32, i8*, i32*)** %73, align 8
  %75 = tail call i32 %74(%struct.UDataSwapper* nonnull %0, i8* nonnull %1, i32 2, i8* %3, i32* nonnull %4) #2
  %76 = load i32 (%struct.UDataSwapper*, i8*, i32, i8*, i32*)*, i32 (%struct.UDataSwapper*, i8*, i32, i8*, i32*)** %73, align 8
  %77 = tail call i32 %76(%struct.UDataSwapper* nonnull %0, i8* %37, i32 4, i8* %68, i32* nonnull %4) #2
  %78 = trunc i64 %53 to i32
  %79 = and i32 %78, 65535
  %80 = zext i32 %79 to i64
  %81 = getelementptr inbounds i8, i8* %1, i64 %80
  %82 = sub nsw i32 %56, %79
  %83 = icmp sgt i32 %82, 0
  br i1 %83, label %84, label %98

84:                                               ; preds = %65
  %85 = zext i32 %82 to i64
  br label %86

86:                                               ; preds = %92, %84
  %87 = phi i64 [ 0, %84 ], [ %93, %92 ]
  %88 = phi i32 [ 0, %84 ], [ %94, %92 ]
  %89 = getelementptr inbounds i8, i8* %81, i64 %87
  %90 = load i8, i8* %89, align 1
  %91 = icmp eq i8 %90, 0
  br i1 %91, label %96, label %92

92:                                               ; preds = %86
  %93 = add nuw nsw i64 %87, 1
  %94 = add nuw nsw i32 %88, 1
  %95 = icmp eq i64 %93, %85
  br i1 %95, label %98, label %86

96:                                               ; preds = %86
  %97 = trunc i64 %87 to i32
  br label %98

98:                                               ; preds = %92, %96, %65
  %99 = phi i32 [ 0, %65 ], [ %97, %96 ], [ %94, %92 ]
  %100 = getelementptr inbounds %struct.UDataSwapper, %struct.UDataSwapper* %0, i64 0, i32 12
  %101 = load i32 (%struct.UDataSwapper*, i8*, i32, i8*, i32*)*, i32 (%struct.UDataSwapper*, i8*, i32, i8*, i32*)** %100, align 8
  %102 = getelementptr inbounds i8, i8* %3, i64 %80
  %103 = tail call i32 %101(%struct.UDataSwapper* %0, i8* %81, i32 %99, i8* %102, i32* nonnull %4) #2
  br label %104

104:                                              ; preds = %61, %98, %5, %7, %58, %35, %20
  %105 = phi i32 [ 0, %20 ], [ 0, %35 ], [ 0, %58 ], [ 0, %7 ], [ 0, %5 ], [ %56, %98 ], [ %56, %61 ]
  ret i32 %105
}

; Function Attrs: nounwind ssp uwtable
define hidden noalias %struct.UDataSwapper* @udata_openSwapper_69(i8 signext, i8 zeroext, i8 signext, i8 zeroext, i32*) local_unnamed_addr #0 {
  %6 = icmp eq i32* %4, null
  br i1 %6, label %61, label %7

7:                                                ; preds = %5
  %8 = load i32, i32* %4, align 4
  %9 = icmp slt i32 %8, 1
  br i1 %9, label %10, label %61

10:                                               ; preds = %7
  %11 = or i8 %3, %1
  %12 = icmp ugt i8 %11, 1
  br i1 %12, label %13, label %14

13:                                               ; preds = %10
  store i32 1, i32* %4, align 4
  br label %61

14:                                               ; preds = %10
  %15 = tail call noalias i8* @uprv_malloc_69(i64 96) #11
  %16 = bitcast i8* %15 to %struct.UDataSwapper*
  %17 = icmp eq i8* %15, null
  br i1 %17, label %18, label %19

18:                                               ; preds = %14
  store i32 7, i32* %4, align 4
  br label %61

19:                                               ; preds = %14
  tail call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %15, i8 0, i64 96, i1 false)
  store i8 %0, i8* %15, align 8
  %20 = getelementptr inbounds i8, i8* %15, i64 1
  store i8 %1, i8* %20, align 1
  %21 = getelementptr inbounds i8, i8* %15, i64 2
  store i8 %2, i8* %21, align 2
  %22 = getelementptr inbounds i8, i8* %15, i64 3
  store i8 %3, i8* %22, align 1
  %23 = icmp eq i8 %0, 0
  %24 = select i1 %23, i16 (i16)* @_ZL21uprv_readDirectUInt16t, i16 (i16)* @_ZL19uprv_readSwapUInt16t
  %25 = getelementptr inbounds i8, i8* %15, i64 8
  %26 = bitcast i8* %25 to i16 (i16)**
  store i16 (i16)* %24, i16 (i16)** %26, align 8
  %27 = select i1 %23, i32 (i32)* @_ZL21uprv_readDirectUInt32j, i32 (i32)* @_ZL19uprv_readSwapUInt32j
  %28 = getelementptr inbounds i8, i8* %15, i64 16
  %29 = bitcast i8* %28 to i32 (i32)**
  store i32 (i32)* %27, i32 (i32)** %29, align 8
  %30 = icmp eq i8 %2, 0
  %31 = select i1 %30, void (i16*, i16)* @_ZL22uprv_writeDirectUInt16Ptt, void (i16*, i16)* @_ZL20uprv_writeSwapUInt16Ptt
  %32 = getelementptr inbounds i8, i8* %15, i64 32
  %33 = bitcast i8* %32 to void (i16*, i16)**
  store void (i16*, i16)* %31, void (i16*, i16)** %33, align 8
  %34 = select i1 %30, void (i32*, i32)* @_ZL22uprv_writeDirectUInt32Pjj, void (i32*, i32)* @_ZL20uprv_writeSwapUInt32Pjj
  %35 = getelementptr inbounds i8, i8* %15, i64 40
  %36 = bitcast i8* %35 to void (i32*, i32)**
  store void (i32*, i32)* %34, void (i32*, i32)** %36, align 8
  %37 = icmp eq i8 %3, 0
  %38 = select i1 %37, i32 (%struct.UDataSwapper*, i8*, i32, i16*, i32)* @uprv_compareInvAscii_69, i32 (%struct.UDataSwapper*, i8*, i32, i16*, i32)* @uprv_compareInvEbcdic_69
  %39 = getelementptr inbounds i8, i8* %15, i64 24
  %40 = bitcast i8* %39 to i32 (%struct.UDataSwapper*, i8*, i32, i16*, i32)**
  store i32 (%struct.UDataSwapper*, i8*, i32, i16*, i32)* %38, i32 (%struct.UDataSwapper*, i8*, i32, i16*, i32)** %40, align 8
  %41 = icmp eq i8 %0, %2
  %42 = getelementptr inbounds i8, i8* %15, i64 48
  %43 = bitcast i8* %42 to i32 (%struct.UDataSwapper*, i8*, i32, i8*, i32*)**
  %44 = select i1 %41, i32 (%struct.UDataSwapper*, i8*, i32, i8*, i32*)* @_ZL16uprv_copyArray16PK12UDataSwapperPKviPvP10UErrorCode, i32 (%struct.UDataSwapper*, i8*, i32, i8*, i32*)* @_ZL16uprv_swapArray16PK12UDataSwapperPKviPvP10UErrorCode
  %45 = select i1 %41, i32 (%struct.UDataSwapper*, i8*, i32, i8*, i32*)* @_ZL16uprv_copyArray32PK12UDataSwapperPKviPvP10UErrorCode, i32 (%struct.UDataSwapper*, i8*, i32, i8*, i32*)* @_ZL16uprv_swapArray32PK12UDataSwapperPKviPvP10UErrorCode
  %46 = select i1 %41, i32 (%struct.UDataSwapper*, i8*, i32, i8*, i32*)* @_ZL16uprv_copyArray64PK12UDataSwapperPKviPvP10UErrorCode, i32 (%struct.UDataSwapper*, i8*, i32, i8*, i32*)* @_ZL16uprv_swapArray64PK12UDataSwapperPKviPvP10UErrorCode
  store i32 (%struct.UDataSwapper*, i8*, i32, i8*, i32*)* %44, i32 (%struct.UDataSwapper*, i8*, i32, i8*, i32*)** %43, align 8
  %47 = getelementptr inbounds i8, i8* %15, i64 56
  %48 = bitcast i8* %47 to i32 (%struct.UDataSwapper*, i8*, i32, i8*, i32*)**
  store i32 (%struct.UDataSwapper*, i8*, i32, i8*, i32*)* %45, i32 (%struct.UDataSwapper*, i8*, i32, i8*, i32*)** %48, align 8
  %49 = getelementptr inbounds i8, i8* %15, i64 64
  %50 = bitcast i8* %49 to i32 (%struct.UDataSwapper*, i8*, i32, i8*, i32*)**
  store i32 (%struct.UDataSwapper*, i8*, i32, i8*, i32*)* %46, i32 (%struct.UDataSwapper*, i8*, i32, i8*, i32*)** %50, align 8
  %51 = icmp eq i8 %1, 0
  br i1 %51, label %52, label %56

52:                                               ; preds = %19
  %53 = select i1 %37, i32 (%struct.UDataSwapper*, i8*, i32, i8*, i32*)* @uprv_copyAscii_69, i32 (%struct.UDataSwapper*, i8*, i32, i8*, i32*)* @uprv_ebcdicFromAscii_69
  %54 = getelementptr inbounds i8, i8* %15, i64 72
  %55 = bitcast i8* %54 to i32 (%struct.UDataSwapper*, i8*, i32, i8*, i32*)**
  store i32 (%struct.UDataSwapper*, i8*, i32, i8*, i32*)* %53, i32 (%struct.UDataSwapper*, i8*, i32, i8*, i32*)** %55, align 8
  br label %61

56:                                               ; preds = %19
  %57 = icmp eq i8 %3, 1
  %58 = select i1 %57, i32 (%struct.UDataSwapper*, i8*, i32, i8*, i32*)* @uprv_copyEbcdic_69, i32 (%struct.UDataSwapper*, i8*, i32, i8*, i32*)* @uprv_asciiFromEbcdic_69
  %59 = getelementptr inbounds i8, i8* %15, i64 72
  %60 = bitcast i8* %59 to i32 (%struct.UDataSwapper*, i8*, i32, i8*, i32*)**
  store i32 (%struct.UDataSwapper*, i8*, i32, i8*, i32*)* %58, i32 (%struct.UDataSwapper*, i8*, i32, i8*, i32*)** %60, align 8
  br label %61

61:                                               ; preds = %52, %56, %5, %7, %18, %13
  %62 = phi %struct.UDataSwapper* [ null, %13 ], [ null, %18 ], [ null, %7 ], [ null, %5 ], [ %16, %56 ], [ %16, %52 ]
  ret %struct.UDataSwapper* %62
}

; Function Attrs: allocsize(0)
declare noalias i8* @uprv_malloc_69(i64) local_unnamed_addr #3

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

; Function Attrs: norecurse nounwind readnone ssp uwtable
define internal zeroext i16 @_ZL21uprv_readDirectUInt16t(i16 returned zeroext) #4 {
  ret i16 %0
}

; Function Attrs: nounwind readnone ssp uwtable
define internal zeroext i16 @_ZL19uprv_readSwapUInt16t(i16 zeroext) #5 {
  %2 = tail call i16 @llvm.bswap.i16(i16 %0)
  ret i16 %2
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define internal i32 @_ZL21uprv_readDirectUInt32j(i32 returned) #4 {
  ret i32 %0
}

; Function Attrs: nounwind readnone ssp uwtable
define internal i32 @_ZL19uprv_readSwapUInt32j(i32) #5 {
  %2 = tail call i32 @llvm.bswap.i32(i32 %0)
  ret i32 %2
}

; Function Attrs: nofree norecurse nounwind ssp uwtable writeonly
define internal void @_ZL22uprv_writeDirectUInt16Ptt(i16* nocapture, i16 zeroext) #6 {
  store i16 %1, i16* %0, align 2
  ret void
}

; Function Attrs: nofree nounwind ssp uwtable writeonly
define internal void @_ZL20uprv_writeSwapUInt16Ptt(i16* nocapture, i16 zeroext) #7 {
  %3 = tail call i16 @llvm.bswap.i16(i16 %1)
  store i16 %3, i16* %0, align 2
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable writeonly
define internal void @_ZL22uprv_writeDirectUInt32Pjj(i32* nocapture, i32) #6 {
  store i32 %1, i32* %0, align 4
  ret void
}

; Function Attrs: nofree nounwind ssp uwtable writeonly
define internal void @_ZL20uprv_writeSwapUInt32Pjj(i32* nocapture, i32) #7 {
  %3 = tail call i32 @llvm.bswap.i32(i32 %1)
  store i32 %3, i32* %0, align 4
  ret void
}

declare i32 @uprv_compareInvAscii_69(%struct.UDataSwapper*, i8*, i32, i16*, i32) #8

declare i32 @uprv_compareInvEbcdic_69(%struct.UDataSwapper*, i8*, i32, i16*, i32) #8

; Function Attrs: nounwind ssp uwtable
define internal i32 @_ZL16uprv_copyArray16PK12UDataSwapperPKviPvP10UErrorCode(%struct.UDataSwapper* readnone, i8* readonly, i32, i8*, i32*) #0 {
  %6 = icmp eq i32* %4, null
  br i1 %6, label %28, label %7

7:                                                ; preds = %5
  %8 = load i32, i32* %4, align 4
  %9 = icmp slt i32 %8, 1
  br i1 %9, label %10, label %28

10:                                               ; preds = %7
  %11 = icmp eq %struct.UDataSwapper* %0, null
  %12 = icmp eq i8* %1, null
  %13 = or i1 %11, %12
  %14 = icmp slt i32 %2, 0
  %15 = or i1 %13, %14
  br i1 %15, label %21, label %16

16:                                               ; preds = %10
  %17 = and i32 %2, 1
  %18 = icmp ne i32 %17, 0
  %19 = icmp eq i8* %3, null
  %20 = or i1 %18, %19
  br i1 %20, label %21, label %22

21:                                               ; preds = %16, %10
  store i32 1, i32* %4, align 4
  br label %28

22:                                               ; preds = %16
  %23 = icmp slt i32 %2, 1
  %24 = icmp eq i8* %1, %3
  %25 = or i1 %23, %24
  br i1 %25, label %28, label %26

26:                                               ; preds = %22
  %27 = sext i32 %2 to i64
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 1 %3, i8* nonnull align 1 %1, i64 %27, i1 false)
  br label %28

28:                                               ; preds = %26, %22, %5, %7, %21
  %29 = phi i32 [ 0, %21 ], [ 0, %7 ], [ 0, %5 ], [ %2, %22 ], [ %2, %26 ]
  ret i32 %29
}

; Function Attrs: nounwind ssp uwtable
define internal i32 @_ZL16uprv_copyArray32PK12UDataSwapperPKviPvP10UErrorCode(%struct.UDataSwapper* readnone, i8* readonly, i32, i8*, i32*) #0 {
  %6 = icmp eq i32* %4, null
  br i1 %6, label %28, label %7

7:                                                ; preds = %5
  %8 = load i32, i32* %4, align 4
  %9 = icmp slt i32 %8, 1
  br i1 %9, label %10, label %28

10:                                               ; preds = %7
  %11 = icmp eq %struct.UDataSwapper* %0, null
  %12 = icmp eq i8* %1, null
  %13 = or i1 %11, %12
  %14 = icmp slt i32 %2, 0
  %15 = or i1 %13, %14
  br i1 %15, label %21, label %16

16:                                               ; preds = %10
  %17 = and i32 %2, 3
  %18 = icmp ne i32 %17, 0
  %19 = icmp eq i8* %3, null
  %20 = or i1 %18, %19
  br i1 %20, label %21, label %22

21:                                               ; preds = %16, %10
  store i32 1, i32* %4, align 4
  br label %28

22:                                               ; preds = %16
  %23 = icmp slt i32 %2, 1
  %24 = icmp eq i8* %1, %3
  %25 = or i1 %23, %24
  br i1 %25, label %28, label %26

26:                                               ; preds = %22
  %27 = sext i32 %2 to i64
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 1 %3, i8* nonnull align 1 %1, i64 %27, i1 false)
  br label %28

28:                                               ; preds = %26, %22, %5, %7, %21
  %29 = phi i32 [ 0, %21 ], [ 0, %7 ], [ 0, %5 ], [ %2, %22 ], [ %2, %26 ]
  ret i32 %29
}

; Function Attrs: nounwind ssp uwtable
define internal i32 @_ZL16uprv_copyArray64PK12UDataSwapperPKviPvP10UErrorCode(%struct.UDataSwapper* readnone, i8* readonly, i32, i8*, i32*) #0 {
  %6 = icmp eq i32* %4, null
  br i1 %6, label %28, label %7

7:                                                ; preds = %5
  %8 = load i32, i32* %4, align 4
  %9 = icmp slt i32 %8, 1
  br i1 %9, label %10, label %28

10:                                               ; preds = %7
  %11 = icmp eq %struct.UDataSwapper* %0, null
  %12 = icmp eq i8* %1, null
  %13 = or i1 %11, %12
  %14 = icmp slt i32 %2, 0
  %15 = or i1 %13, %14
  br i1 %15, label %21, label %16

16:                                               ; preds = %10
  %17 = and i32 %2, 7
  %18 = icmp ne i32 %17, 0
  %19 = icmp eq i8* %3, null
  %20 = or i1 %18, %19
  br i1 %20, label %21, label %22

21:                                               ; preds = %16, %10
  store i32 1, i32* %4, align 4
  br label %28

22:                                               ; preds = %16
  %23 = icmp slt i32 %2, 1
  %24 = icmp eq i8* %1, %3
  %25 = or i1 %23, %24
  br i1 %25, label %28, label %26

26:                                               ; preds = %22
  %27 = sext i32 %2 to i64
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 1 %3, i8* nonnull align 1 %1, i64 %27, i1 false)
  br label %28

28:                                               ; preds = %26, %22, %5, %7, %21
  %29 = phi i32 [ 0, %21 ], [ 0, %7 ], [ 0, %5 ], [ %2, %22 ], [ %2, %26 ]
  ret i32 %29
}

; Function Attrs: nofree nounwind ssp uwtable
define internal i32 @_ZL16uprv_swapArray16PK12UDataSwapperPKviPvP10UErrorCode(%struct.UDataSwapper* readnone, i8* readonly, i32, i8*, i32*) #9 {
  %6 = icmp eq i32* %4, null
  br i1 %6, label %118, label %7

7:                                                ; preds = %5
  %8 = load i32, i32* %4, align 4
  %9 = icmp slt i32 %8, 1
  br i1 %9, label %10, label %118

10:                                               ; preds = %7
  %11 = icmp eq %struct.UDataSwapper* %0, null
  %12 = icmp eq i8* %1, null
  %13 = or i1 %11, %12
  %14 = icmp slt i32 %2, 0
  %15 = or i1 %13, %14
  br i1 %15, label %21, label %16

16:                                               ; preds = %10
  %17 = and i32 %2, 1
  %18 = icmp ne i32 %17, 0
  %19 = icmp eq i8* %3, null
  %20 = or i1 %18, %19
  br i1 %20, label %21, label %22

21:                                               ; preds = %16, %10
  store i32 1, i32* %4, align 4
  br label %118

22:                                               ; preds = %16
  %23 = lshr i32 %2, 1
  %24 = icmp eq i32 %23, 0
  br i1 %24, label %118, label %25

25:                                               ; preds = %22
  %26 = bitcast i8* %3 to i16*
  %27 = bitcast i8* %1 to i16*
  %28 = add nsw i32 %23, -1
  %29 = zext i32 %28 to i64
  %30 = add nuw nsw i64 %29, 1
  %31 = icmp ult i64 %30, 16
  br i1 %31, label %104, label %32

32:                                               ; preds = %25
  %33 = add nsw i32 %23, -1
  %34 = zext i32 %33 to i64
  %35 = shl nuw nsw i64 %34, 1
  %36 = add nuw nsw i64 %35, 2
  %37 = getelementptr i8, i8* %3, i64 %36
  %38 = getelementptr i8, i8* %1, i64 %36
  %39 = icmp ugt i8* %38, %3
  %40 = icmp ugt i8* %37, %1
  %41 = and i1 %39, %40
  br i1 %41, label %104, label %42

42:                                               ; preds = %32
  %43 = and i64 %30, 8589934576
  %44 = trunc i64 %43 to i32
  %45 = sub i32 %23, %44
  %46 = getelementptr i16, i16* %26, i64 %43
  %47 = getelementptr i16, i16* %27, i64 %43
  %48 = add nsw i64 %43, -16
  %49 = lshr exact i64 %48, 4
  %50 = add nuw nsw i64 %49, 1
  %51 = and i64 %50, 1
  %52 = icmp eq i64 %48, 0
  br i1 %52, label %86, label %53

53:                                               ; preds = %42
  %54 = sub nuw nsw i64 %50, %51
  br label %55

55:                                               ; preds = %55, %53
  %56 = phi i64 [ 0, %53 ], [ %83, %55 ]
  %57 = phi i64 [ %54, %53 ], [ %84, %55 ]
  %58 = getelementptr i16, i16* %26, i64 %56
  %59 = getelementptr i16, i16* %27, i64 %56
  %60 = bitcast i16* %59 to <8 x i16>*
  %61 = load <8 x i16>, <8 x i16>* %60, align 2, !alias.scope !2
  %62 = getelementptr i16, i16* %59, i64 8
  %63 = bitcast i16* %62 to <8 x i16>*
  %64 = load <8 x i16>, <8 x i16>* %63, align 2, !alias.scope !2
  %65 = call <8 x i16> @llvm.bswap.v8i16(<8 x i16> %61)
  %66 = call <8 x i16> @llvm.bswap.v8i16(<8 x i16> %64)
  %67 = bitcast i16* %58 to <8 x i16>*
  store <8 x i16> %65, <8 x i16>* %67, align 2, !alias.scope !5, !noalias !2
  %68 = getelementptr i16, i16* %58, i64 8
  %69 = bitcast i16* %68 to <8 x i16>*
  store <8 x i16> %66, <8 x i16>* %69, align 2, !alias.scope !5, !noalias !2
  %70 = or i64 %56, 16
  %71 = getelementptr i16, i16* %26, i64 %70
  %72 = getelementptr i16, i16* %27, i64 %70
  %73 = bitcast i16* %72 to <8 x i16>*
  %74 = load <8 x i16>, <8 x i16>* %73, align 2, !alias.scope !2
  %75 = getelementptr i16, i16* %72, i64 8
  %76 = bitcast i16* %75 to <8 x i16>*
  %77 = load <8 x i16>, <8 x i16>* %76, align 2, !alias.scope !2
  %78 = call <8 x i16> @llvm.bswap.v8i16(<8 x i16> %74)
  %79 = call <8 x i16> @llvm.bswap.v8i16(<8 x i16> %77)
  %80 = bitcast i16* %71 to <8 x i16>*
  store <8 x i16> %78, <8 x i16>* %80, align 2, !alias.scope !5, !noalias !2
  %81 = getelementptr i16, i16* %71, i64 8
  %82 = bitcast i16* %81 to <8 x i16>*
  store <8 x i16> %79, <8 x i16>* %82, align 2, !alias.scope !5, !noalias !2
  %83 = add i64 %56, 32
  %84 = add i64 %57, -2
  %85 = icmp eq i64 %84, 0
  br i1 %85, label %86, label %55, !llvm.loop !7

86:                                               ; preds = %55, %42
  %87 = phi i64 [ 0, %42 ], [ %83, %55 ]
  %88 = icmp eq i64 %51, 0
  br i1 %88, label %102, label %89

89:                                               ; preds = %86
  %90 = getelementptr i16, i16* %26, i64 %87
  %91 = getelementptr i16, i16* %27, i64 %87
  %92 = bitcast i16* %91 to <8 x i16>*
  %93 = load <8 x i16>, <8 x i16>* %92, align 2, !alias.scope !2
  %94 = getelementptr i16, i16* %91, i64 8
  %95 = bitcast i16* %94 to <8 x i16>*
  %96 = load <8 x i16>, <8 x i16>* %95, align 2, !alias.scope !2
  %97 = call <8 x i16> @llvm.bswap.v8i16(<8 x i16> %93)
  %98 = call <8 x i16> @llvm.bswap.v8i16(<8 x i16> %96)
  %99 = bitcast i16* %90 to <8 x i16>*
  store <8 x i16> %97, <8 x i16>* %99, align 2, !alias.scope !5, !noalias !2
  %100 = getelementptr i16, i16* %90, i64 8
  %101 = bitcast i16* %100 to <8 x i16>*
  store <8 x i16> %98, <8 x i16>* %101, align 2, !alias.scope !5, !noalias !2
  br label %102

102:                                              ; preds = %86, %89
  %103 = icmp eq i64 %30, %43
  br i1 %103, label %118, label %104

104:                                              ; preds = %102, %32, %25
  %105 = phi i32 [ %23, %32 ], [ %23, %25 ], [ %45, %102 ]
  %106 = phi i16* [ %26, %32 ], [ %26, %25 ], [ %46, %102 ]
  %107 = phi i16* [ %27, %32 ], [ %27, %25 ], [ %47, %102 ]
  br label %108

108:                                              ; preds = %104, %108
  %109 = phi i32 [ %116, %108 ], [ %105, %104 ]
  %110 = phi i16* [ %115, %108 ], [ %106, %104 ]
  %111 = phi i16* [ %112, %108 ], [ %107, %104 ]
  %112 = getelementptr inbounds i16, i16* %111, i64 1
  %113 = load i16, i16* %111, align 2
  %114 = tail call i16 @llvm.bswap.i16(i16 %113)
  %115 = getelementptr inbounds i16, i16* %110, i64 1
  store i16 %114, i16* %110, align 2
  %116 = add nsw i32 %109, -1
  %117 = icmp sgt i32 %116, 0
  br i1 %117, label %108, label %118, !llvm.loop !9

118:                                              ; preds = %108, %102, %22, %5, %7, %21
  %119 = phi i32 [ 0, %21 ], [ 0, %7 ], [ 0, %5 ], [ %2, %22 ], [ %2, %102 ], [ %2, %108 ]
  ret i32 %119
}

; Function Attrs: nofree nounwind ssp uwtable
define internal i32 @_ZL16uprv_swapArray32PK12UDataSwapperPKviPvP10UErrorCode(%struct.UDataSwapper* readnone, i8* readonly, i32, i8*, i32*) #9 {
  %6 = icmp eq i32* %4, null
  br i1 %6, label %118, label %7

7:                                                ; preds = %5
  %8 = load i32, i32* %4, align 4
  %9 = icmp slt i32 %8, 1
  br i1 %9, label %10, label %118

10:                                               ; preds = %7
  %11 = icmp eq %struct.UDataSwapper* %0, null
  %12 = icmp eq i8* %1, null
  %13 = or i1 %11, %12
  %14 = icmp slt i32 %2, 0
  %15 = or i1 %13, %14
  br i1 %15, label %21, label %16

16:                                               ; preds = %10
  %17 = and i32 %2, 3
  %18 = icmp ne i32 %17, 0
  %19 = icmp eq i8* %3, null
  %20 = or i1 %18, %19
  br i1 %20, label %21, label %22

21:                                               ; preds = %16, %10
  store i32 1, i32* %4, align 4
  br label %118

22:                                               ; preds = %16
  %23 = lshr i32 %2, 2
  %24 = icmp eq i32 %23, 0
  br i1 %24, label %118, label %25

25:                                               ; preds = %22
  %26 = bitcast i8* %3 to i32*
  %27 = bitcast i8* %1 to i32*
  %28 = add nsw i32 %23, -1
  %29 = zext i32 %28 to i64
  %30 = add nuw nsw i64 %29, 1
  %31 = icmp ult i64 %30, 8
  br i1 %31, label %104, label %32

32:                                               ; preds = %25
  %33 = add nsw i32 %23, -1
  %34 = zext i32 %33 to i64
  %35 = shl nuw nsw i64 %34, 2
  %36 = add nuw nsw i64 %35, 4
  %37 = getelementptr i8, i8* %3, i64 %36
  %38 = getelementptr i8, i8* %1, i64 %36
  %39 = icmp ugt i8* %38, %3
  %40 = icmp ugt i8* %37, %1
  %41 = and i1 %39, %40
  br i1 %41, label %104, label %42

42:                                               ; preds = %32
  %43 = and i64 %30, 8589934584
  %44 = trunc i64 %43 to i32
  %45 = sub i32 %23, %44
  %46 = getelementptr i32, i32* %26, i64 %43
  %47 = getelementptr i32, i32* %27, i64 %43
  %48 = add nsw i64 %43, -8
  %49 = lshr exact i64 %48, 3
  %50 = add nuw nsw i64 %49, 1
  %51 = and i64 %50, 1
  %52 = icmp eq i64 %48, 0
  br i1 %52, label %86, label %53

53:                                               ; preds = %42
  %54 = sub nuw nsw i64 %50, %51
  br label %55

55:                                               ; preds = %55, %53
  %56 = phi i64 [ 0, %53 ], [ %83, %55 ]
  %57 = phi i64 [ %54, %53 ], [ %84, %55 ]
  %58 = getelementptr i32, i32* %26, i64 %56
  %59 = getelementptr i32, i32* %27, i64 %56
  %60 = bitcast i32* %59 to <4 x i32>*
  %61 = load <4 x i32>, <4 x i32>* %60, align 4, !alias.scope !10
  %62 = getelementptr i32, i32* %59, i64 4
  %63 = bitcast i32* %62 to <4 x i32>*
  %64 = load <4 x i32>, <4 x i32>* %63, align 4, !alias.scope !10
  %65 = call <4 x i32> @llvm.bswap.v4i32(<4 x i32> %61)
  %66 = call <4 x i32> @llvm.bswap.v4i32(<4 x i32> %64)
  %67 = bitcast i32* %58 to <4 x i32>*
  store <4 x i32> %65, <4 x i32>* %67, align 4, !alias.scope !13, !noalias !10
  %68 = getelementptr i32, i32* %58, i64 4
  %69 = bitcast i32* %68 to <4 x i32>*
  store <4 x i32> %66, <4 x i32>* %69, align 4, !alias.scope !13, !noalias !10
  %70 = or i64 %56, 8
  %71 = getelementptr i32, i32* %26, i64 %70
  %72 = getelementptr i32, i32* %27, i64 %70
  %73 = bitcast i32* %72 to <4 x i32>*
  %74 = load <4 x i32>, <4 x i32>* %73, align 4, !alias.scope !10
  %75 = getelementptr i32, i32* %72, i64 4
  %76 = bitcast i32* %75 to <4 x i32>*
  %77 = load <4 x i32>, <4 x i32>* %76, align 4, !alias.scope !10
  %78 = call <4 x i32> @llvm.bswap.v4i32(<4 x i32> %74)
  %79 = call <4 x i32> @llvm.bswap.v4i32(<4 x i32> %77)
  %80 = bitcast i32* %71 to <4 x i32>*
  store <4 x i32> %78, <4 x i32>* %80, align 4, !alias.scope !13, !noalias !10
  %81 = getelementptr i32, i32* %71, i64 4
  %82 = bitcast i32* %81 to <4 x i32>*
  store <4 x i32> %79, <4 x i32>* %82, align 4, !alias.scope !13, !noalias !10
  %83 = add i64 %56, 16
  %84 = add i64 %57, -2
  %85 = icmp eq i64 %84, 0
  br i1 %85, label %86, label %55, !llvm.loop !15

86:                                               ; preds = %55, %42
  %87 = phi i64 [ 0, %42 ], [ %83, %55 ]
  %88 = icmp eq i64 %51, 0
  br i1 %88, label %102, label %89

89:                                               ; preds = %86
  %90 = getelementptr i32, i32* %26, i64 %87
  %91 = getelementptr i32, i32* %27, i64 %87
  %92 = bitcast i32* %91 to <4 x i32>*
  %93 = load <4 x i32>, <4 x i32>* %92, align 4, !alias.scope !10
  %94 = getelementptr i32, i32* %91, i64 4
  %95 = bitcast i32* %94 to <4 x i32>*
  %96 = load <4 x i32>, <4 x i32>* %95, align 4, !alias.scope !10
  %97 = call <4 x i32> @llvm.bswap.v4i32(<4 x i32> %93)
  %98 = call <4 x i32> @llvm.bswap.v4i32(<4 x i32> %96)
  %99 = bitcast i32* %90 to <4 x i32>*
  store <4 x i32> %97, <4 x i32>* %99, align 4, !alias.scope !13, !noalias !10
  %100 = getelementptr i32, i32* %90, i64 4
  %101 = bitcast i32* %100 to <4 x i32>*
  store <4 x i32> %98, <4 x i32>* %101, align 4, !alias.scope !13, !noalias !10
  br label %102

102:                                              ; preds = %86, %89
  %103 = icmp eq i64 %30, %43
  br i1 %103, label %118, label %104

104:                                              ; preds = %102, %32, %25
  %105 = phi i32 [ %23, %32 ], [ %23, %25 ], [ %45, %102 ]
  %106 = phi i32* [ %26, %32 ], [ %26, %25 ], [ %46, %102 ]
  %107 = phi i32* [ %27, %32 ], [ %27, %25 ], [ %47, %102 ]
  br label %108

108:                                              ; preds = %104, %108
  %109 = phi i32 [ %116, %108 ], [ %105, %104 ]
  %110 = phi i32* [ %115, %108 ], [ %106, %104 ]
  %111 = phi i32* [ %112, %108 ], [ %107, %104 ]
  %112 = getelementptr inbounds i32, i32* %111, i64 1
  %113 = load i32, i32* %111, align 4
  %114 = tail call i32 @llvm.bswap.i32(i32 %113)
  %115 = getelementptr inbounds i32, i32* %110, i64 1
  store i32 %114, i32* %110, align 4
  %116 = add nsw i32 %109, -1
  %117 = icmp sgt i32 %116, 0
  br i1 %117, label %108, label %118, !llvm.loop !16

118:                                              ; preds = %108, %102, %22, %5, %7, %21
  %119 = phi i32 [ 0, %21 ], [ 0, %7 ], [ 0, %5 ], [ %2, %22 ], [ %2, %102 ], [ %2, %108 ]
  ret i32 %119
}

; Function Attrs: nofree nounwind ssp uwtable
define internal i32 @_ZL16uprv_swapArray64PK12UDataSwapperPKviPvP10UErrorCode(%struct.UDataSwapper* readnone, i8* readonly, i32, i8*, i32*) #9 {
  %6 = icmp eq i32* %4, null
  br i1 %6, label %70, label %7

7:                                                ; preds = %5
  %8 = load i32, i32* %4, align 4
  %9 = icmp slt i32 %8, 1
  br i1 %9, label %10, label %70

10:                                               ; preds = %7
  %11 = icmp eq %struct.UDataSwapper* %0, null
  %12 = icmp eq i8* %1, null
  %13 = or i1 %11, %12
  %14 = icmp slt i32 %2, 0
  %15 = or i1 %13, %14
  br i1 %15, label %21, label %16

16:                                               ; preds = %10
  %17 = and i32 %2, 7
  %18 = icmp ne i32 %17, 0
  %19 = icmp eq i8* %3, null
  %20 = or i1 %18, %19
  br i1 %20, label %21, label %22

21:                                               ; preds = %16, %10
  store i32 1, i32* %4, align 4
  br label %70

22:                                               ; preds = %16
  %23 = lshr i32 %2, 3
  %24 = icmp eq i32 %23, 0
  br i1 %24, label %70, label %25

25:                                               ; preds = %22
  %26 = bitcast i8* %3 to i64*
  %27 = bitcast i8* %1 to i64*
  %28 = add nsw i32 %23, -1
  %29 = and i32 %23, 3
  %30 = icmp eq i32 %29, 0
  br i1 %30, label %43, label %31

31:                                               ; preds = %25, %31
  %32 = phi i32 [ %40, %31 ], [ %23, %25 ]
  %33 = phi i64* [ %39, %31 ], [ %26, %25 ]
  %34 = phi i64* [ %36, %31 ], [ %27, %25 ]
  %35 = phi i32 [ %41, %31 ], [ %29, %25 ]
  %36 = getelementptr inbounds i64, i64* %34, i64 1
  %37 = load i64, i64* %34, align 8
  %38 = tail call i64 @llvm.bswap.i64(i64 %37)
  %39 = getelementptr inbounds i64, i64* %33, i64 1
  store i64 %38, i64* %33, align 8
  %40 = add nsw i32 %32, -1
  %41 = add i32 %35, -1
  %42 = icmp eq i32 %41, 0
  br i1 %42, label %43, label %31, !llvm.loop !17

43:                                               ; preds = %31, %25
  %44 = phi i32 [ %23, %25 ], [ %40, %31 ]
  %45 = phi i64* [ %26, %25 ], [ %39, %31 ]
  %46 = phi i64* [ %27, %25 ], [ %36, %31 ]
  %47 = icmp ult i32 %28, 3
  br i1 %47, label %70, label %48

48:                                               ; preds = %43, %48
  %49 = phi i32 [ %68, %48 ], [ %44, %43 ]
  %50 = phi i64* [ %67, %48 ], [ %45, %43 ]
  %51 = phi i64* [ %64, %48 ], [ %46, %43 ]
  %52 = getelementptr inbounds i64, i64* %51, i64 1
  %53 = load i64, i64* %51, align 8
  %54 = tail call i64 @llvm.bswap.i64(i64 %53)
  %55 = getelementptr inbounds i64, i64* %50, i64 1
  store i64 %54, i64* %50, align 8
  %56 = getelementptr inbounds i64, i64* %51, i64 2
  %57 = load i64, i64* %52, align 8
  %58 = tail call i64 @llvm.bswap.i64(i64 %57)
  %59 = getelementptr inbounds i64, i64* %50, i64 2
  store i64 %58, i64* %55, align 8
  %60 = getelementptr inbounds i64, i64* %51, i64 3
  %61 = load i64, i64* %56, align 8
  %62 = tail call i64 @llvm.bswap.i64(i64 %61)
  %63 = getelementptr inbounds i64, i64* %50, i64 3
  store i64 %62, i64* %59, align 8
  %64 = getelementptr inbounds i64, i64* %51, i64 4
  %65 = load i64, i64* %60, align 8
  %66 = tail call i64 @llvm.bswap.i64(i64 %65)
  %67 = getelementptr inbounds i64, i64* %50, i64 4
  store i64 %66, i64* %63, align 8
  %68 = add nsw i32 %49, -4
  %69 = icmp sgt i32 %68, 0
  br i1 %69, label %48, label %70

70:                                               ; preds = %43, %48, %22, %5, %7, %21
  %71 = phi i32 [ 0, %21 ], [ 0, %7 ], [ 0, %5 ], [ %2, %22 ], [ %2, %48 ], [ %2, %43 ]
  ret i32 %71
}

declare i32 @uprv_copyAscii_69(%struct.UDataSwapper*, i8*, i32, i8*, i32*) #8

declare i32 @uprv_ebcdicFromAscii_69(%struct.UDataSwapper*, i8*, i32, i8*, i32*) #8

declare i32 @uprv_copyEbcdic_69(%struct.UDataSwapper*, i8*, i32, i8*, i32*) #8

declare i32 @uprv_asciiFromEbcdic_69(%struct.UDataSwapper*, i8*, i32, i8*, i32*) #8

; Function Attrs: nounwind ssp uwtable
define hidden noalias %struct.UDataSwapper* @udata_openSwapperForInputData_69(i8* readonly, i32, i8 signext, i8 zeroext, i32*) local_unnamed_addr #0 {
  %6 = icmp eq i32* %4, null
  br i1 %6, label %112, label %7

7:                                                ; preds = %5
  %8 = load i32, i32* %4, align 4
  %9 = icmp slt i32 %8, 1
  br i1 %9, label %10, label %112

10:                                               ; preds = %7
  %11 = icmp eq i8* %0, null
  br i1 %11, label %16, label %12

12:                                               ; preds = %10
  %13 = icmp ult i32 %1, 24
  %14 = icmp ugt i8 %3, 1
  %15 = or i1 %13, %14
  br i1 %15, label %16, label %17

16:                                               ; preds = %12, %10
  store i32 1, i32* %4, align 4
  br label %112

17:                                               ; preds = %12
  %18 = getelementptr inbounds i8, i8* %0, i64 2
  %19 = load i8, i8* %18, align 2
  %20 = icmp eq i8 %19, -38
  br i1 %20, label %21, label %30

21:                                               ; preds = %17
  %22 = getelementptr inbounds i8, i8* %0, i64 3
  %23 = load i8, i8* %22, align 1
  %24 = icmp eq i8 %23, 39
  br i1 %24, label %25, label %30

25:                                               ; preds = %21
  %26 = getelementptr inbounds i8, i8* %0, i64 4
  %27 = getelementptr inbounds i8, i8* %0, i64 10
  %28 = load i8, i8* %27, align 2
  %29 = icmp eq i8 %28, 2
  br i1 %29, label %31, label %30

30:                                               ; preds = %25, %21, %17
  store i32 16, i32* %4, align 4
  br label %112

31:                                               ; preds = %25
  %32 = getelementptr inbounds i8, i8* %0, i64 8
  %33 = load i8, i8* %32, align 2
  %34 = getelementptr inbounds i8, i8* %0, i64 9
  %35 = load i8, i8* %34, align 1
  %36 = icmp eq i8 %33, 0
  %37 = bitcast i8* %0 to i16*
  %38 = load i16, i16* %37, align 2
  br i1 %36, label %39, label %42

39:                                               ; preds = %31
  %40 = bitcast i8* %26 to i16*
  %41 = load i16, i16* %40, align 2
  br label %47

42:                                               ; preds = %31
  %43 = tail call i16 @llvm.bswap.i16(i16 %38) #2
  %44 = bitcast i8* %26 to i16*
  %45 = load i16, i16* %44, align 2
  %46 = tail call i16 @llvm.bswap.i16(i16 %45) #2
  br label %47

47:                                               ; preds = %42, %39
  %48 = phi i16 [ %38, %39 ], [ %43, %42 ]
  %49 = phi i16 [ %41, %39 ], [ %46, %42 ]
  %50 = icmp ult i16 %48, 24
  %51 = icmp ult i16 %49, 20
  %52 = or i1 %50, %51
  br i1 %52, label %61, label %53

53:                                               ; preds = %47
  %54 = zext i16 %48 to i64
  %55 = zext i16 %49 to i64
  %56 = add nuw nsw i64 %55, 4
  %57 = icmp ugt i64 %56, %54
  %58 = zext i16 %48 to i32
  %59 = icmp ugt i32 %58, %1
  %60 = or i1 %59, %57
  br i1 %60, label %61, label %62

61:                                               ; preds = %53, %47
  store i32 16, i32* %4, align 4
  br label %112

62:                                               ; preds = %53
  %63 = or i8 %35, %3
  %64 = icmp ugt i8 %63, 1
  br i1 %64, label %65, label %66

65:                                               ; preds = %62
  store i32 1, i32* %4, align 4
  br label %112

66:                                               ; preds = %62
  %67 = tail call noalias i8* @uprv_malloc_69(i64 96) #11
  %68 = bitcast i8* %67 to %struct.UDataSwapper*
  %69 = icmp eq i8* %67, null
  br i1 %69, label %70, label %71

70:                                               ; preds = %66
  store i32 7, i32* %4, align 4
  br label %112

71:                                               ; preds = %66
  tail call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %67, i8 0, i64 96, i1 false) #2
  store i8 %33, i8* %67, align 8
  %72 = getelementptr inbounds i8, i8* %67, i64 1
  store i8 %35, i8* %72, align 1
  %73 = getelementptr inbounds i8, i8* %67, i64 2
  store i8 %2, i8* %73, align 2
  %74 = getelementptr inbounds i8, i8* %67, i64 3
  store i8 %3, i8* %74, align 1
  %75 = select i1 %36, i16 (i16)* @_ZL21uprv_readDirectUInt16t, i16 (i16)* @_ZL19uprv_readSwapUInt16t
  %76 = getelementptr inbounds i8, i8* %67, i64 8
  %77 = bitcast i8* %76 to i16 (i16)**
  store i16 (i16)* %75, i16 (i16)** %77, align 8
  %78 = select i1 %36, i32 (i32)* @_ZL21uprv_readDirectUInt32j, i32 (i32)* @_ZL19uprv_readSwapUInt32j
  %79 = getelementptr inbounds i8, i8* %67, i64 16
  %80 = bitcast i8* %79 to i32 (i32)**
  store i32 (i32)* %78, i32 (i32)** %80, align 8
  %81 = icmp eq i8 %2, 0
  %82 = select i1 %81, void (i16*, i16)* @_ZL22uprv_writeDirectUInt16Ptt, void (i16*, i16)* @_ZL20uprv_writeSwapUInt16Ptt
  %83 = getelementptr inbounds i8, i8* %67, i64 32
  %84 = bitcast i8* %83 to void (i16*, i16)**
  store void (i16*, i16)* %82, void (i16*, i16)** %84, align 8
  %85 = select i1 %81, void (i32*, i32)* @_ZL22uprv_writeDirectUInt32Pjj, void (i32*, i32)* @_ZL20uprv_writeSwapUInt32Pjj
  %86 = getelementptr inbounds i8, i8* %67, i64 40
  %87 = bitcast i8* %86 to void (i32*, i32)**
  store void (i32*, i32)* %85, void (i32*, i32)** %87, align 8
  %88 = icmp eq i8 %3, 0
  %89 = select i1 %88, i32 (%struct.UDataSwapper*, i8*, i32, i16*, i32)* @uprv_compareInvAscii_69, i32 (%struct.UDataSwapper*, i8*, i32, i16*, i32)* @uprv_compareInvEbcdic_69
  %90 = getelementptr inbounds i8, i8* %67, i64 24
  %91 = bitcast i8* %90 to i32 (%struct.UDataSwapper*, i8*, i32, i16*, i32)**
  store i32 (%struct.UDataSwapper*, i8*, i32, i16*, i32)* %89, i32 (%struct.UDataSwapper*, i8*, i32, i16*, i32)** %91, align 8
  %92 = icmp eq i8 %33, %2
  %93 = getelementptr inbounds i8, i8* %67, i64 48
  %94 = bitcast i8* %93 to i32 (%struct.UDataSwapper*, i8*, i32, i8*, i32*)**
  %95 = select i1 %92, i32 (%struct.UDataSwapper*, i8*, i32, i8*, i32*)* @_ZL16uprv_copyArray16PK12UDataSwapperPKviPvP10UErrorCode, i32 (%struct.UDataSwapper*, i8*, i32, i8*, i32*)* @_ZL16uprv_swapArray16PK12UDataSwapperPKviPvP10UErrorCode
  %96 = select i1 %92, i32 (%struct.UDataSwapper*, i8*, i32, i8*, i32*)* @_ZL16uprv_copyArray32PK12UDataSwapperPKviPvP10UErrorCode, i32 (%struct.UDataSwapper*, i8*, i32, i8*, i32*)* @_ZL16uprv_swapArray32PK12UDataSwapperPKviPvP10UErrorCode
  %97 = select i1 %92, i32 (%struct.UDataSwapper*, i8*, i32, i8*, i32*)* @_ZL16uprv_copyArray64PK12UDataSwapperPKviPvP10UErrorCode, i32 (%struct.UDataSwapper*, i8*, i32, i8*, i32*)* @_ZL16uprv_swapArray64PK12UDataSwapperPKviPvP10UErrorCode
  store i32 (%struct.UDataSwapper*, i8*, i32, i8*, i32*)* %95, i32 (%struct.UDataSwapper*, i8*, i32, i8*, i32*)** %94, align 8
  %98 = getelementptr inbounds i8, i8* %67, i64 56
  %99 = bitcast i8* %98 to i32 (%struct.UDataSwapper*, i8*, i32, i8*, i32*)**
  store i32 (%struct.UDataSwapper*, i8*, i32, i8*, i32*)* %96, i32 (%struct.UDataSwapper*, i8*, i32, i8*, i32*)** %99, align 8
  %100 = getelementptr inbounds i8, i8* %67, i64 64
  %101 = bitcast i8* %100 to i32 (%struct.UDataSwapper*, i8*, i32, i8*, i32*)**
  store i32 (%struct.UDataSwapper*, i8*, i32, i8*, i32*)* %97, i32 (%struct.UDataSwapper*, i8*, i32, i8*, i32*)** %101, align 8
  %102 = icmp eq i8 %35, 0
  br i1 %102, label %103, label %107

103:                                              ; preds = %71
  %104 = select i1 %88, i32 (%struct.UDataSwapper*, i8*, i32, i8*, i32*)* @uprv_copyAscii_69, i32 (%struct.UDataSwapper*, i8*, i32, i8*, i32*)* @uprv_ebcdicFromAscii_69
  %105 = getelementptr inbounds i8, i8* %67, i64 72
  %106 = bitcast i8* %105 to i32 (%struct.UDataSwapper*, i8*, i32, i8*, i32*)**
  store i32 (%struct.UDataSwapper*, i8*, i32, i8*, i32*)* %104, i32 (%struct.UDataSwapper*, i8*, i32, i8*, i32*)** %106, align 8
  br label %112

107:                                              ; preds = %71
  %108 = icmp eq i8 %3, 1
  %109 = select i1 %108, i32 (%struct.UDataSwapper*, i8*, i32, i8*, i32*)* @uprv_copyEbcdic_69, i32 (%struct.UDataSwapper*, i8*, i32, i8*, i32*)* @uprv_asciiFromEbcdic_69
  %110 = getelementptr inbounds i8, i8* %67, i64 72
  %111 = bitcast i8* %110 to i32 (%struct.UDataSwapper*, i8*, i32, i8*, i32*)**
  store i32 (%struct.UDataSwapper*, i8*, i32, i8*, i32*)* %109, i32 (%struct.UDataSwapper*, i8*, i32, i8*, i32*)** %111, align 8
  br label %112

112:                                              ; preds = %107, %103, %70, %65, %5, %7, %61, %30, %16
  %113 = phi %struct.UDataSwapper* [ null, %16 ], [ null, %30 ], [ null, %61 ], [ null, %7 ], [ null, %5 ], [ null, %65 ], [ null, %70 ], [ %68, %107 ], [ %68, %103 ]
  ret %struct.UDataSwapper* %113
}

; Function Attrs: nounwind ssp uwtable
define hidden void @udata_closeSwapper_69(%struct.UDataSwapper*) local_unnamed_addr #0 {
  %2 = getelementptr inbounds %struct.UDataSwapper, %struct.UDataSwapper* %0, i64 0, i32 0
  tail call void @uprv_free_69(i8* %2) #2
  ret void
}

declare void @uprv_free_69(i8*) local_unnamed_addr #8

; Function Attrs: nounwind readnone speculatable
declare i16 @llvm.bswap.i16(i16) #10

; Function Attrs: nounwind readnone speculatable
declare i32 @llvm.bswap.i32(i32) #10

; Function Attrs: nounwind readnone speculatable
declare i64 @llvm.bswap.i64(i64) #10

; Function Attrs: nounwind readnone speculatable
declare <8 x i16> @llvm.bswap.v8i16(<8 x i16>) #10

; Function Attrs: nounwind readnone speculatable
declare <4 x i32> @llvm.bswap.v4i32(<4 x i32>) #10

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { nounwind }
attributes #3 = { allocsize(0) "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { norecurse nounwind readnone ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind readnone ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nofree norecurse nounwind ssp uwtable writeonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { nofree nounwind ssp uwtable writeonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #8 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #9 = { nofree nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #10 = { nounwind readnone speculatable }
attributes #11 = { nounwind allocsize(0) }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{!3}
!3 = distinct !{!3, !4}
!4 = distinct !{!4, !"LVerDomain"}
!5 = !{!6}
!6 = distinct !{!6, !4}
!7 = distinct !{!7, !8}
!8 = !{!"llvm.loop.isvectorized", i32 1}
!9 = distinct !{!9, !8}
!10 = !{!11}
!11 = distinct !{!11, !12}
!12 = distinct !{!12, !"LVerDomain"}
!13 = !{!14}
!14 = distinct !{!14, !12}
!15 = distinct !{!15, !8}
!16 = distinct !{!16, !8}
!17 = distinct !{!17, !18}
!18 = !{!"llvm.loop.unroll.disable"}
