; ModuleID = '../../media/formats/mp4/sample_to_group_iterator.cc'
source_filename = "../../media/formats/mp4/sample_to_group_iterator.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"class.media::mp4::SampleToGroupIterator" = type { i32, %"class.std::__1::vector"*, %"class.std::__1::__wrap_iter" }
%"class.std::__1::vector" = type { %"class.std::__1::__vector_base" }
%"class.std::__1::__vector_base" = type { %"struct.media::mp4::SampleToGroupEntry"*, %"struct.media::mp4::SampleToGroupEntry"*, %"class.std::__1::__compressed_pair" }
%"struct.media::mp4::SampleToGroupEntry" = type { i32, i32 }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %"struct.media::mp4::SampleToGroupEntry"* }
%"class.std::__1::__wrap_iter" = type { %"struct.media::mp4::SampleToGroupEntry"* }
%"struct.media::mp4::SampleToGroup" = type { %"struct.media::mp4::Box", i32, i32, %"class.std::__1::vector" }
%"struct.media::mp4::Box" = type { i32 (...)** }

@_ZN5media3mp421SampleToGroupIteratorC1ERKNS0_13SampleToGroupE = hidden unnamed_addr alias void (%"class.media::mp4::SampleToGroupIterator"*, %"struct.media::mp4::SampleToGroup"*), void (%"class.media::mp4::SampleToGroupIterator"*, %"struct.media::mp4::SampleToGroup"*)* @_ZN5media3mp421SampleToGroupIteratorC2ERKNS0_13SampleToGroupE
@_ZN5media3mp421SampleToGroupIteratorD1Ev = hidden unnamed_addr alias void (%"class.media::mp4::SampleToGroupIterator"*), void (%"class.media::mp4::SampleToGroupIterator"*)* @_ZN5media3mp421SampleToGroupIteratorD2Ev

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5media3mp421SampleToGroupIteratorC2ERKNS0_13SampleToGroupE(%"class.media::mp4::SampleToGroupIterator"* nocapture, %"struct.media::mp4::SampleToGroup"* dereferenceable(40)) unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"class.media::mp4::SampleToGroupIterator", %"class.media::mp4::SampleToGroupIterator"* %0, i64 0, i32 0
  store i32 0, i32* %3, align 8
  %4 = getelementptr inbounds %"class.media::mp4::SampleToGroupIterator", %"class.media::mp4::SampleToGroupIterator"* %0, i64 0, i32 1
  %5 = getelementptr inbounds %"struct.media::mp4::SampleToGroup", %"struct.media::mp4::SampleToGroup"* %1, i64 0, i32 3
  store %"class.std::__1::vector"* %5, %"class.std::__1::vector"** %4, align 8
  %6 = getelementptr inbounds %"class.media::mp4::SampleToGroupIterator", %"class.media::mp4::SampleToGroupIterator"* %0, i64 0, i32 2
  %7 = bitcast %"class.std::__1::vector"* %5 to i64*
  %8 = load i64, i64* %7, align 8
  %9 = getelementptr inbounds %"class.std::__1::__wrap_iter", %"class.std::__1::__wrap_iter"* %6, i64 0, i32 0
  %10 = bitcast %"class.std::__1::__wrap_iter"* %6 to i64*
  store i64 %8, i64* %10, align 8
  %11 = getelementptr inbounds %"struct.media::mp4::SampleToGroup", %"struct.media::mp4::SampleToGroup"* %1, i64 0, i32 3, i32 0, i32 1
  %12 = load %"struct.media::mp4::SampleToGroupEntry"*, %"struct.media::mp4::SampleToGroupEntry"** %11, align 8
  %13 = inttoptr i64 %8 to %"struct.media::mp4::SampleToGroupEntry"*
  %14 = icmp eq %"struct.media::mp4::SampleToGroupEntry"* %12, %13
  br i1 %14, label %24, label %15

15:                                               ; preds = %2, %20
  %16 = phi %"struct.media::mp4::SampleToGroupEntry"* [ %21, %20 ], [ %13, %2 ]
  %17 = getelementptr inbounds %"struct.media::mp4::SampleToGroupEntry", %"struct.media::mp4::SampleToGroupEntry"* %16, i64 0, i32 0
  %18 = load i32, i32* %17, align 4
  store i32 %18, i32* %3, align 8
  %19 = icmp eq i32 %18, 0
  br i1 %19, label %20, label %24

20:                                               ; preds = %15
  %21 = getelementptr inbounds %"struct.media::mp4::SampleToGroupEntry", %"struct.media::mp4::SampleToGroupEntry"* %16, i64 1
  store %"struct.media::mp4::SampleToGroupEntry"* %21, %"struct.media::mp4::SampleToGroupEntry"** %9, align 8
  %22 = load %"struct.media::mp4::SampleToGroupEntry"*, %"struct.media::mp4::SampleToGroupEntry"** %11, align 8
  %23 = icmp eq %"struct.media::mp4::SampleToGroupEntry"* %21, %22
  br i1 %23, label %24, label %15

24:                                               ; preds = %15, %20, %2
  ret void
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden void @_ZN5media3mp421SampleToGroupIteratorD2Ev(%"class.media::mp4::SampleToGroupIterator"* nocapture) unnamed_addr #1 align 2 {
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZN5media3mp421SampleToGroupIterator7AdvanceEv(%"class.media::mp4::SampleToGroupIterator"* nocapture) local_unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.media::mp4::SampleToGroupIterator", %"class.media::mp4::SampleToGroupIterator"* %0, i64 0, i32 0
  %3 = load i32, i32* %2, align 8
  %4 = add i32 %3, -1
  %5 = getelementptr inbounds %"class.media::mp4::SampleToGroupIterator", %"class.media::mp4::SampleToGroupIterator"* %0, i64 0, i32 2, i32 0
  store i32 %4, i32* %2, align 8
  %6 = icmp eq i32 %4, 0
  br i1 %6, label %7, label %21

7:                                                ; preds = %1
  %8 = getelementptr inbounds %"class.media::mp4::SampleToGroupIterator", %"class.media::mp4::SampleToGroupIterator"* %0, i64 0, i32 1
  %9 = load %"struct.media::mp4::SampleToGroupEntry"*, %"struct.media::mp4::SampleToGroupEntry"** %5, align 8
  %10 = load %"class.std::__1::vector"*, %"class.std::__1::vector"** %8, align 8
  %11 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %10, i64 0, i32 0, i32 1
  br label %12

12:                                               ; preds = %7, %17
  %13 = phi %"struct.media::mp4::SampleToGroupEntry"* [ %9, %7 ], [ %14, %17 ]
  %14 = getelementptr inbounds %"struct.media::mp4::SampleToGroupEntry", %"struct.media::mp4::SampleToGroupEntry"* %13, i64 1
  store %"struct.media::mp4::SampleToGroupEntry"* %14, %"struct.media::mp4::SampleToGroupEntry"** %5, align 8
  %15 = load %"struct.media::mp4::SampleToGroupEntry"*, %"struct.media::mp4::SampleToGroupEntry"** %11, align 8
  %16 = icmp eq %"struct.media::mp4::SampleToGroupEntry"* %14, %15
  br i1 %16, label %21, label %17

17:                                               ; preds = %12
  %18 = getelementptr inbounds %"struct.media::mp4::SampleToGroupEntry", %"struct.media::mp4::SampleToGroupEntry"* %14, i64 0, i32 0
  %19 = load i32, i32* %18, align 4
  store i32 %19, i32* %2, align 8
  %20 = icmp eq i32 %19, 0
  br i1 %20, label %12, label %21

21:                                               ; preds = %12, %17, %1
  %22 = phi i1 [ true, %1 ], [ true, %17 ], [ false, %12 ]
  ret i1 %22
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden zeroext i1 @_ZNK5media3mp421SampleToGroupIterator7IsValidEv(%"class.media::mp4::SampleToGroupIterator"* nocapture readonly) local_unnamed_addr #2 align 2 {
  %2 = getelementptr inbounds %"class.media::mp4::SampleToGroupIterator", %"class.media::mp4::SampleToGroupIterator"* %0, i64 0, i32 0
  %3 = load i32, i32* %2, align 8
  %4 = icmp ne i32 %3, 0
  ret i1 %4
}

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { norecurse nounwind readnone ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { norecurse nounwind readonly ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
