; ModuleID = '../../third_party/blink/renderer/core/svg/svg_enumeration_map.cc'
source_filename = "../../third_party/blink/renderer/core/svg/svg_enumeration_map.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"class.WTF::StringImpl" = type { i32, i32, %"struct.std::__1::atomic" }
%"struct.std::__1::atomic" = type { %"struct.std::__1::__atomic_base" }
%"struct.std::__1::__atomic_base" = type { %"struct.std::__1::__atomic_base.0" }
%"struct.std::__1::__atomic_base.0" = type { %"struct.std::__1::__cxx_atomic_impl" }
%"struct.std::__1::__cxx_atomic_impl" = type { %"struct.std::__1::__cxx_atomic_base_impl" }
%"struct.std::__1::__cxx_atomic_base_impl" = type { i32 }
%"class.blink::SVGEnumerationMap" = type <{ %"struct.blink::SVGEnumerationMap::Entry"*, i16, i16, [4 x i8] }>
%"struct.blink::SVGEnumerationMap::Entry" = type { i16, i8* }
%"class.WTF::String" = type { %class.scoped_refptr }
%class.scoped_refptr = type { %"class.WTF::StringImpl"* }
%"class.WTF::StringView" = type <{ %"class.WTF::StringImpl"*, i8*, i32, [4 x i8] }>

@_ZN3WTF10StringImpl6empty_E = external local_unnamed_addr global %"class.WTF::StringImpl"*, align 8

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i16 @_ZNK5blink17SVGEnumerationMap13ValueFromNameERKN3WTF6StringE(%"class.blink::SVGEnumerationMap"* nocapture readonly, %"class.WTF::String"* nocapture readonly dereferenceable(8)) local_unnamed_addr #0 align 2 {
  %3 = alloca %"class.WTF::StringView", align 8
  %4 = alloca %"class.WTF::StringView", align 8
  %5 = getelementptr inbounds %"class.blink::SVGEnumerationMap", %"class.blink::SVGEnumerationMap"* %0, i64 0, i32 0
  %6 = load %"struct.blink::SVGEnumerationMap::Entry"*, %"struct.blink::SVGEnumerationMap::Entry"** %5, align 8
  %7 = getelementptr inbounds %"class.blink::SVGEnumerationMap", %"class.blink::SVGEnumerationMap"* %0, i64 0, i32 1
  %8 = load i16, i16* %7, align 8
  %9 = zext i16 %8 to i64
  %10 = getelementptr inbounds %"struct.blink::SVGEnumerationMap::Entry", %"struct.blink::SVGEnumerationMap::Entry"* %6, i64 %9
  %11 = icmp eq i16 %8, 0
  br i1 %11, label %55, label %12

12:                                               ; preds = %2
  %13 = bitcast %"class.WTF::StringView"* %3 to i8*
  %14 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %1, i64 0, i32 0, i32 0
  %15 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %3, i64 0, i32 0
  %16 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %3, i64 0, i32 1
  %17 = bitcast i8** %16 to %"class.WTF::StringImpl"**
  %18 = bitcast %"class.WTF::StringView"* %3 to i64*
  %19 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %3, i64 0, i32 2
  %20 = bitcast %"class.WTF::StringView"* %4 to i8*
  %21 = bitcast %"class.WTF::StringView"* %4 to i64*
  %22 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %4, i64 0, i32 1
  %23 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %4, i64 0, i32 2
  br label %24

24:                                               ; preds = %12, %49
  %25 = phi %"struct.blink::SVGEnumerationMap::Entry"* [ %6, %12 ], [ %50, %49 ]
  %26 = getelementptr inbounds %"struct.blink::SVGEnumerationMap::Entry", %"struct.blink::SVGEnumerationMap::Entry"* %25, i64 0, i32 1
  %27 = load i8*, i8** %26, align 8
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %13) #5
  %28 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %14, align 8
  %29 = icmp eq %"class.WTF::StringImpl"* %28, null
  br i1 %29, label %30, label %32

30:                                               ; preds = %24
  store i8* null, i8** %16, align 8
  %31 = load i64, i64* bitcast (%"class.WTF::StringImpl"** @_ZN3WTF10StringImpl6empty_E to i64*), align 8
  store i64 %31, i64* %18, align 8
  br label %36

32:                                               ; preds = %24
  store %"class.WTF::StringImpl"* %28, %"class.WTF::StringImpl"** %15, align 8
  %33 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %28, i64 0, i32 1
  %34 = load i32, i32* %33, align 4
  %35 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %28, i64 1
  store %"class.WTF::StringImpl"* %35, %"class.WTF::StringImpl"** %17, align 8
  br label %36

36:                                               ; preds = %32, %30
  %37 = phi i32 [ %34, %32 ], [ 0, %30 ]
  store i32 %37, i32* %19, align 8
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %20) #5
  %38 = icmp eq i8* %27, null
  br i1 %38, label %45, label %39

39:                                               ; preds = %36
  %40 = call i64 @strlen(i8* nonnull %27) #6
  %41 = icmp ult i64 %40, 4294967296
  br i1 %41, label %43, label %42, !prof !2

42:                                               ; preds = %39
  call void @llvm.trap() #5
  unreachable

43:                                               ; preds = %39
  %44 = trunc i64 %40 to i32
  br label %45

45:                                               ; preds = %36, %43
  %46 = phi i32 [ %44, %43 ], [ 0, %36 ]
  %47 = load i64, i64* bitcast (%"class.WTF::StringImpl"** @_ZN3WTF10StringImpl6empty_E to i64*), align 8
  store i64 %47, i64* %21, align 8
  store i8* %27, i8** %22, align 8
  store i32 %46, i32* %23, align 8
  %48 = call zeroext i1 @_ZN3WTF15EqualStringViewERKNS_10StringViewES2_(%"class.WTF::StringView"* nonnull dereferenceable(24) %3, %"class.WTF::StringView"* nonnull dereferenceable(24) %4) #5
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %20) #5
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %13) #5
  br i1 %48, label %52, label %49

49:                                               ; preds = %45
  %50 = getelementptr inbounds %"struct.blink::SVGEnumerationMap::Entry", %"struct.blink::SVGEnumerationMap::Entry"* %25, i64 1
  %51 = icmp eq %"struct.blink::SVGEnumerationMap::Entry"* %50, %10
  br i1 %51, label %55, label %24

52:                                               ; preds = %45
  %53 = getelementptr inbounds %"struct.blink::SVGEnumerationMap::Entry", %"struct.blink::SVGEnumerationMap::Entry"* %25, i64 0, i32 0
  %54 = load i16, i16* %53, align 8
  br label %55

55:                                               ; preds = %49, %2, %52
  %56 = phi i16 [ %54, %52 ], [ 0, %2 ], [ 0, %49 ]
  ret i16 %56
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

declare zeroext i1 @_ZN3WTF15EqualStringViewERKNS_10StringViewES2_(%"class.WTF::StringView"* dereferenceable(24), %"class.WTF::StringView"* dereferenceable(24)) local_unnamed_addr #2

; Function Attrs: argmemonly nofree nounwind readonly
declare i64 @strlen(i8* nocapture) local_unnamed_addr #3

; Function Attrs: cold noreturn nounwind
declare void @llvm.trap() #4

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { argmemonly nofree nounwind readonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { cold noreturn nounwind }
attributes #5 = { nounwind }
attributes #6 = { nounwind readonly }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{!"branch_weights", i32 2000, i32 1}
