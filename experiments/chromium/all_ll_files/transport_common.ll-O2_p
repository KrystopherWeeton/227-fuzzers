; ModuleID = '../../native_client/src/trusted/debug_stub/transport_common.cc'
source_filename = "../../native_client/src/trusted/debug_stub/transport_common.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%"class.port::SocketBinding" = type { i32 }
%"class.port::Transport" = type { %"class.port::ITransport", %"class.nacl::scoped_array", i32, i32, i32, i32 }
%"class.port::ITransport" = type { i32 (...)** }
%"class.nacl::scoped_array" = type { i8* }
%struct.NaClApp = type { i8, i64, i32, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i32, i32, %struct.NaClMutex, %struct.NaClCondVar, [151 x %struct.NaClSyscallTableEntry], %struct.NaClResourceNaClApp, i32, i32, %struct.NaClVmmap, %struct.NaClIntervalMultiset*, %struct.NaClDescEffector*, i32, i32, %struct.NaClDesc*, %struct.NaClMutex, i8*, %struct.NaClDynamicRegion*, i32, i32, i32, i32, i64, i32, i32, i32, %struct.NaClCPUFeaturesAbstract*, %struct.NaClValidationCache*, i32, i32, i32, i32, i32, i64, %struct.NaClMutex, %struct.DynArray, i32, %struct.NaClFastMutex, %struct.DynArray, %struct.NaClDebugCallbacks*, %struct.NaClDesc*, %struct.NaClDesc*, %struct.NaClMutex, i32, i32, i32, i32, i32, i32, i32, %struct.NaClValidatorInterface* }
%struct.NaClCondVar = type { %union.pthread_cond_t }
%union.pthread_cond_t = type { %struct.__pthread_cond_s }
%struct.__pthread_cond_s = type { %union.anon, %union.anon.0, [2 x i32], [2 x i32], i32, i32, [2 x i32] }
%union.anon = type { i64 }
%union.anon.0 = type { i64 }
%struct.NaClSyscallTableEntry = type { i32 (%struct.NaClAppThread*)* }
%struct.NaClAppThread = type opaque
%struct.NaClResourceNaClApp = type { %struct.NaClResource, %struct.NaClApp* }
%struct.NaClResource = type { %struct.NaClResourceSchemes*, i64 }
%struct.NaClResourceSchemes = type { i8*, i32, %struct.NaClDesc* (%struct.NaClResource*, i8*, i32, i32, i32)* }
%struct.NaClVmmap = type { %struct.NaClVmmapEntry**, i64, i64, i32 }
%struct.NaClVmmapEntry = type { i64, i64, i32, i32, i32, %struct.NaClDesc*, i64, i64 }
%struct.NaClIntervalMultiset = type { %struct.NaClIntervalMultisetVtbl* }
%struct.NaClIntervalMultisetVtbl = type { void (%struct.NaClIntervalMultiset*)*, void (%struct.NaClIntervalMultiset*, i32, i32)*, void (%struct.NaClIntervalMultiset*, i32, i32)*, i32 (%struct.NaClIntervalMultiset*, i32, i32)* }
%struct.NaClDescEffector = type opaque
%struct.NaClDynamicRegion = type opaque
%struct.NaClCPUFeaturesAbstract = type opaque
%struct.NaClValidationCache = type opaque
%struct.NaClFastMutex = type { %union.pthread_mutex_t }
%union.pthread_mutex_t = type { %struct.__pthread_mutex_s }
%struct.__pthread_mutex_s = type { i32, i32, i32, i32, i32, i16, i16, %struct.__pthread_internal_list }
%struct.__pthread_internal_list = type { %struct.__pthread_internal_list*, %struct.__pthread_internal_list* }
%struct.DynArray = type { i64, i8**, i64, i32*, i64 }
%struct.NaClDebugCallbacks = type { void (%struct.NaClAppThread*)*, void (%struct.NaClAppThread*)*, void ()* }
%struct.NaClDesc = type opaque
%struct.NaClMutex = type { %union.pthread_mutex_t, i32 }
%struct.NaClValidatorInterface = type { i32, i32, i32, i32 (i64, i8*, i64, i32, i32, i32, %struct.NaClCPUFeaturesAbstract*, %struct.NaClValidationMetadata*, %struct.NaClValidationCache*)*, i32 (i64, i8*, i8*, i64, %struct.NaClCPUFeaturesAbstract*, i32 (i8*, i8*, i8)*)*, i32 (i64, i8*, i8*, i64, %struct.NaClCPUFeaturesAbstract*)*, i64, void (%struct.NaClCPUFeaturesAbstract*)*, void (%struct.NaClCPUFeaturesAbstract*)*, i32 (i64, i64, i8*, i64, %struct.NaClCPUFeaturesAbstract*)* }
%struct.NaClValidationMetadata = type opaque
%struct.fd_set = type { [16 x i64] }
%struct.timeval = type { i64, i64 }
%"class.std::__1::basic_string" = type { %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" = type { %union.anon.2 }
%union.anon.2 = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" = type { i8*, i64, i64 }
%struct.sockaddr_in = type { i16, i16, %struct.in_addr, [8 x i8] }
%struct.in_addr = type { i32 }
%"class.std::__1::__basic_string_common" = type { i8 }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short" = type { [23 x i8], %struct.anon.3 }
%struct.anon.3 = type { i8 }
%"class.std::__1::allocator" = type { i8 }
%struct.hostent = type { i8*, i8**, i32, i32, i8** }
%struct.sockaddr = type { i16, [14 x i8] }

$_ZN4port9TransportD2Ev = comdat any

$_ZN4port9TransportD0Ev = comdat any

$_ZN4port9Transport15IsDataAvailableEv = comdat any

$_ZN4port9Transport10DisconnectEv = comdat any

$_ZN4port9Transport16AcceptConnectionEv = comdat any

@.str = private unnamed_addr constant [71 x i8] c"Transport::WaitForDebugStubEvent: Failed to wait for debug stub event\0A\00", align 1
@.str.1 = private unnamed_addr constant [80 x i8] c"Transport::WaitForDebugStubEvent: Failed to read from debug stub event pipe fd\0A\00", align 1
@.str.2 = private unnamed_addr constant [26 x i8] c"Failed to create socket.\0A\00", align 1
@.str.3 = private unnamed_addr constant [36 x i8] c"Failed to set SO_REUSEADDR option.\0A\00", align 1
@.str.4 = private unnamed_addr constant [24 x i8] c"Failed to bind server.\0A\00", align 1
@.str.5 = private unnamed_addr constant [19 x i8] c"Failed to listen.\0A\00", align 1
@.str.6 = private unnamed_addr constant [35 x i8] c"Failed to retrieve bound address.\0A\00", align 1
@_ZTVN4port9TransportE = hidden unnamed_addr constant { [10 x i8*] } { [10 x i8*] [i8* null, i8* null, i8* bitcast (void (%"class.port::Transport"*)* @_ZN4port9TransportD2Ev to i8*), i8* bitcast (void (%"class.port::Transport"*)* @_ZN4port9TransportD0Ev to i8*), i8* bitcast (i1 (%"class.port::Transport"*, i8*, i32)* @_ZN4port9Transport4ReadEPvi to i8*), i8* bitcast (i1 (%"class.port::Transport"*, i8*, i32)* @_ZN4port9Transport5WriteEPKvi to i8*), i8* bitcast (i1 (%"class.port::Transport"*)* @_ZN4port9Transport15IsDataAvailableEv to i8*), i8* bitcast (void (%"class.port::Transport"*, %struct.NaClApp*, i1)* @_ZN4port9Transport21WaitForDebugStubEventEP7NaClAppb to i8*), i8* bitcast (void (%"class.port::Transport"*)* @_ZN4port9Transport10DisconnectEv to i8*), i8* bitcast (i1 (%"class.port::Transport"*)* @_ZN4port9Transport16AcceptConnectionEv to i8*)] }, align 8
@.str.9 = private unnamed_addr constant [8 x i8] c"0.0.0.0\00", align 1
@.str.10 = private unnamed_addr constant [40 x i8] c"Fatal error in file %s, line %d: !(%s)\0A\00", align 1
@.str.11 = private unnamed_addr constant [63 x i8] c"../../native_client/src/trusted/debug_stub/transport_common.cc\00", align 1
@.str.12 = private unnamed_addr constant [38 x i8] c"handle_accept_ == NACL_INVALID_SOCKET\00", align 1
@.str.13 = private unnamed_addr constant [35 x i8] c"Failed to set TCP_NODELAY option.\0A\00", align 1

@_ZN4port13SocketBindingC1Ei = hidden unnamed_addr alias void (%"class.port::SocketBinding"*, i32), void (%"class.port::SocketBinding"*, i32)* @_ZN4port13SocketBindingC2Ei

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN4port9Transport14CopyFromBufferEPPcPi(%"class.port::Transport"* nocapture, i8** nocapture, i32* nocapture) local_unnamed_addr #0 align 2 {
  %4 = getelementptr inbounds %"class.port::Transport", %"class.port::Transport"* %0, i64 0, i32 3
  %5 = load i32, i32* %4, align 4
  %6 = getelementptr inbounds %"class.port::Transport", %"class.port::Transport"* %0, i64 0, i32 2
  %7 = load i32, i32* %6, align 8
  %8 = sub nsw i32 %5, %7
  %9 = load i32, i32* %2, align 4
  %10 = icmp slt i32 %8, %9
  %11 = select i1 %10, i32 %8, i32 %9
  %12 = load i8*, i8** %1, align 8
  %13 = getelementptr inbounds %"class.port::Transport", %"class.port::Transport"* %0, i64 0, i32 1, i32 0
  %14 = load i8*, i8** %13, align 8
  %15 = sext i32 %7 to i64
  %16 = getelementptr inbounds i8, i8* %14, i64 %15
  %17 = sext i32 %11 to i64
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %12, i8* align 1 %16, i64 %17, i1 false)
  %18 = load i32, i32* %6, align 8
  %19 = add nsw i32 %18, %11
  store i32 %19, i32* %6, align 8
  %20 = load i32, i32* %2, align 4
  %21 = sub nsw i32 %20, %11
  store i32 %21, i32* %2, align 4
  %22 = load i8*, i8** %1, align 8
  %23 = getelementptr inbounds i8, i8* %22, i64 %17
  store i8* %23, i8** %1, align 8
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #1

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZN4port9Transport12ReadSomeDataEv(%"class.port::Transport"* nocapture) local_unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.port::Transport", %"class.port::Transport"* %0, i64 0, i32 5
  %3 = getelementptr inbounds %"class.port::Transport", %"class.port::Transport"* %0, i64 0, i32 1, i32 0
  %4 = getelementptr inbounds %"class.port::Transport", %"class.port::Transport"* %0, i64 0, i32 3
  br label %5

5:                                                ; preds = %22, %1
  %6 = load i32, i32* %2, align 4
  %7 = load i8*, i8** %3, align 8
  %8 = load i32, i32* %4, align 4
  %9 = sext i32 %8 to i64
  %10 = getelementptr inbounds i8, i8* %7, i64 %9
  %11 = sub nsw i32 4096, %8
  %12 = sext i32 %11 to i64
  %13 = tail call i64 @recv(i32 %6, i8* %10, i64 %12, i32 0) #15
  %14 = trunc i64 %13 to i32
  %15 = icmp sgt i32 %14, 0
  br i1 %15, label %16, label %20

16:                                               ; preds = %5
  %17 = trunc i64 %13 to i32
  %18 = load i32, i32* %4, align 4
  %19 = add nsw i32 %18, %17
  store i32 %19, i32* %4, align 4
  br label %26

20:                                               ; preds = %5
  %21 = icmp eq i32 %14, 0
  br i1 %21, label %26, label %22

22:                                               ; preds = %20
  %23 = tail call i32* @__errno_location() #4
  %24 = load i32, i32* %23, align 4
  %25 = icmp eq i32 %24, 4
  br i1 %25, label %5, label %26

26:                                               ; preds = %20, %22, %16
  %27 = phi i1 [ true, %16 ], [ false, %22 ], [ false, %20 ]
  ret i1 %27
}

declare i64 @recv(i32, i8*, i64, i32) local_unnamed_addr #2

; Function Attrs: nounwind readnone
declare i32* @__errno_location() local_unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZN4port9Transport4ReadEPvi(%"class.port::Transport"* nocapture, i8*, i32) unnamed_addr #0 align 2 {
  %4 = getelementptr inbounds %"class.port::Transport", %"class.port::Transport"* %0, i64 0, i32 2
  %5 = load i32, i32* %4, align 8
  %6 = getelementptr inbounds %"class.port::Transport", %"class.port::Transport"* %0, i64 0, i32 3
  %7 = load i32, i32* %6, align 4
  %8 = icmp sgt i32 %7, %5
  br i1 %8, label %9, label %22

9:                                                ; preds = %3
  %10 = sub nsw i32 %7, %5
  %11 = icmp slt i32 %10, %2
  %12 = select i1 %11, i32 %10, i32 %2
  %13 = getelementptr inbounds %"class.port::Transport", %"class.port::Transport"* %0, i64 0, i32 1, i32 0
  %14 = load i8*, i8** %13, align 8
  %15 = sext i32 %5 to i64
  %16 = getelementptr inbounds i8, i8* %14, i64 %15
  %17 = sext i32 %12 to i64
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %1, i8* align 1 %16, i64 %17, i1 false) #15
  %18 = load i32, i32* %4, align 8
  %19 = add nsw i32 %18, %12
  store i32 %19, i32* %4, align 8
  %20 = sub nsw i32 %2, %12
  %21 = getelementptr inbounds i8, i8* %1, i64 %17
  br label %22

22:                                               ; preds = %9, %3
  %23 = phi i32 [ %20, %9 ], [ %2, %3 ]
  %24 = phi i8* [ %21, %9 ], [ %1, %3 ]
  %25 = icmp sgt i32 %23, 0
  br i1 %25, label %26, label %73

26:                                               ; preds = %22
  %27 = getelementptr inbounds %"class.port::Transport", %"class.port::Transport"* %0, i64 0, i32 5
  %28 = getelementptr inbounds %"class.port::Transport", %"class.port::Transport"* %0, i64 0, i32 1, i32 0
  br label %29

29:                                               ; preds = %26, %55
  %30 = phi i8* [ %24, %26 ], [ %71, %55 ]
  %31 = phi i32 [ %23, %26 ], [ %70, %55 ]
  store i32 0, i32* %4, align 8
  store i32 0, i32* %6, align 4
  %32 = load i32, i32* %27, align 4
  %33 = load i8*, i8** %28, align 8
  %34 = tail call i64 @recv(i32 %32, i8* %33, i64 4096, i32 0) #15
  %35 = trunc i64 %34 to i32
  %36 = icmp sgt i32 %35, 0
  br i1 %36, label %55, label %37

37:                                               ; preds = %29, %44
  %38 = phi i32 [ %53, %44 ], [ %35, %29 ]
  %39 = icmp eq i32 %38, 0
  br i1 %39, label %73, label %40

40:                                               ; preds = %37
  %41 = tail call i32* @__errno_location() #4
  %42 = load i32, i32* %41, align 4
  %43 = icmp eq i32 %42, 4
  br i1 %43, label %44, label %73

44:                                               ; preds = %40
  %45 = load i32, i32* %6, align 4
  %46 = load i32, i32* %27, align 4
  %47 = load i8*, i8** %28, align 8
  %48 = sext i32 %45 to i64
  %49 = getelementptr inbounds i8, i8* %47, i64 %48
  %50 = sub nsw i32 4096, %45
  %51 = sext i32 %50 to i64
  %52 = tail call i64 @recv(i32 %46, i8* %49, i64 %51, i32 0) #15
  %53 = trunc i64 %52 to i32
  %54 = icmp sgt i32 %53, 0
  br i1 %54, label %55, label %37

55:                                               ; preds = %44, %29
  %56 = phi i64 [ %34, %29 ], [ %52, %44 ]
  %57 = trunc i64 %56 to i32
  %58 = load i32, i32* %6, align 4
  %59 = add nsw i32 %58, %57
  store i32 %59, i32* %6, align 4
  %60 = load i32, i32* %4, align 8
  %61 = sub nsw i32 %59, %60
  %62 = icmp slt i32 %61, %31
  %63 = select i1 %62, i32 %61, i32 %31
  %64 = load i8*, i8** %28, align 8
  %65 = sext i32 %60 to i64
  %66 = getelementptr inbounds i8, i8* %64, i64 %65
  %67 = sext i32 %63 to i64
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %30, i8* align 1 %66, i64 %67, i1 false) #15
  %68 = load i32, i32* %4, align 8
  %69 = add nsw i32 %68, %63
  store i32 %69, i32* %4, align 8
  %70 = sub nsw i32 %31, %63
  %71 = getelementptr inbounds i8, i8* %30, i64 %67
  %72 = icmp sgt i32 %70, 0
  br i1 %72, label %29, label %73

73:                                               ; preds = %55, %37, %40, %22
  %74 = phi i1 [ true, %22 ], [ false, %40 ], [ false, %37 ], [ true, %55 ]
  ret i1 %74
}

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZN4port9Transport5WriteEPKvi(%"class.port::Transport"* nocapture readonly, i8*, i32) unnamed_addr #0 align 2 {
  %4 = icmp sgt i32 %2, 0
  br i1 %4, label %5, label %30

5:                                                ; preds = %3
  %6 = getelementptr inbounds %"class.port::Transport", %"class.port::Transport"* %0, i64 0, i32 5
  br label %7

7:                                                ; preds = %5, %26
  %8 = phi i8* [ %1, %5 ], [ %28, %26 ]
  %9 = phi i32 [ %2, %5 ], [ %27, %26 ]
  %10 = load i32, i32* %6, align 4
  %11 = sext i32 %9 to i64
  %12 = tail call i64 @send(i32 %10, i8* %8, i64 %11, i32 0) #15
  %13 = trunc i64 %12 to i32
  %14 = icmp sgt i32 %13, 0
  br i1 %14, label %15, label %20

15:                                               ; preds = %7
  %16 = shl i64 %12, 32
  %17 = ashr exact i64 %16, 32
  %18 = getelementptr inbounds i8, i8* %8, i64 %17
  %19 = sub nsw i32 %9, %13
  br label %26

20:                                               ; preds = %7
  %21 = icmp eq i32 %13, 0
  br i1 %21, label %30, label %22

22:                                               ; preds = %20
  %23 = tail call i32* @__errno_location() #4
  %24 = load i32, i32* %23, align 4
  %25 = icmp eq i32 %24, 4
  br i1 %25, label %26, label %30

26:                                               ; preds = %22, %15
  %27 = phi i32 [ %19, %15 ], [ %9, %22 ]
  %28 = phi i8* [ %18, %15 ], [ %8, %22 ]
  %29 = icmp sgt i32 %27, 0
  br i1 %29, label %7, label %30

30:                                               ; preds = %26, %20, %22, %3
  %31 = phi i1 [ true, %3 ], [ false, %22 ], [ false, %20 ], [ true, %26 ]
  ret i1 %31
}

declare i64 @send(i32, i8*, i64, i32) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN4port9Transport21WaitForDebugStubEventEP7NaClAppb(%"class.port::Transport"* nocapture, %struct.NaClApp* nocapture readonly, i1 zeroext) unnamed_addr #0 align 2 {
  %4 = alloca %struct.fd_set, align 8
  %5 = alloca %struct.timeval, align 8
  %6 = alloca [16 x i8], align 16
  %7 = getelementptr inbounds %"class.port::Transport", %"class.port::Transport"* %0, i64 0, i32 2
  %8 = load i32, i32* %7, align 8
  %9 = getelementptr inbounds %"class.port::Transport", %"class.port::Transport"* %0, i64 0, i32 3
  %10 = load i32, i32* %9, align 4
  %11 = icmp sge i32 %8, %10
  %12 = or i1 %11, %2
  br i1 %12, label %13, label %17

13:                                               ; preds = %3
  %14 = getelementptr inbounds %struct.NaClApp, %struct.NaClApp* %1, i64 0, i32 60
  %15 = load i32, i32* %14, align 4
  %16 = icmp sgt i32 %15, 0
  br i1 %16, label %17, label %18

17:                                               ; preds = %3, %13
  br label %18

18:                                               ; preds = %17, %13
  %19 = phi i1 [ false, %17 ], [ true, %13 ]
  %20 = bitcast %struct.fd_set* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 128, i8* nonnull %20) #15
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %20, i8 -86, i64 128, i1 false)
  %21 = getelementptr inbounds %struct.fd_set, %struct.fd_set* %4, i64 0, i32 0, i64 0
  %22 = call { i64, i64* } asm sideeffect "cld; rep; stosq", "={cx},={di},{ax},0,1,~{memory},~{dirflag},~{fpsr},~{flags}"(i32 0, i64 16, i64* nonnull %21) #15, !srcloc !2
  %23 = getelementptr inbounds %struct.NaClApp, %struct.NaClApp* %1, i64 0, i32 61
  %24 = load i32, i32* %23, align 8
  %25 = srem i32 %24, 64
  %26 = zext i32 %25 to i64
  %27 = shl i64 1, %26
  %28 = sext i32 %24 to i64
  %29 = call i1 @llvm.is.constant.i64(i64 %28)
  br i1 %29, label %30, label %36

30:                                               ; preds = %18
  %31 = icmp ult i32 %24, 1024
  br i1 %31, label %32, label %34

32:                                               ; preds = %30
  %33 = sdiv i64 %28, 64
  br label %38

34:                                               ; preds = %30
  %35 = call i64 @__fdelt_warn(i64 %28) #15
  br label %38

36:                                               ; preds = %18
  %37 = call i64 @__fdelt_chk(i64 %28) #15
  br label %38

38:                                               ; preds = %32, %34, %36
  %39 = phi i64 [ %37, %36 ], [ %33, %32 ], [ %35, %34 ]
  %40 = getelementptr inbounds %struct.fd_set, %struct.fd_set* %4, i64 0, i32 0, i64 %39
  %41 = load i64, i64* %40, align 8
  %42 = or i64 %41, %27
  store i64 %42, i64* %40, align 8
  %43 = load i32, i32* %23, align 8
  %44 = load i32, i32* %9, align 4
  %45 = icmp slt i32 %44, 4096
  br i1 %45, label %46, label %70

46:                                               ; preds = %38
  %47 = getelementptr inbounds %"class.port::Transport", %"class.port::Transport"* %0, i64 0, i32 5
  %48 = load i32, i32* %47, align 4
  %49 = srem i32 %48, 64
  %50 = zext i32 %49 to i64
  %51 = shl i64 1, %50
  %52 = sext i32 %48 to i64
  %53 = call i1 @llvm.is.constant.i64(i64 %52)
  br i1 %53, label %54, label %60

54:                                               ; preds = %46
  %55 = icmp ult i32 %48, 1024
  br i1 %55, label %56, label %58

56:                                               ; preds = %54
  %57 = sdiv i64 %52, 64
  br label %62

58:                                               ; preds = %54
  %59 = call i64 @__fdelt_warn(i64 %52) #15
  br label %62

60:                                               ; preds = %46
  %61 = call i64 @__fdelt_chk(i64 %52) #15
  br label %62

62:                                               ; preds = %56, %58, %60
  %63 = phi i64 [ %61, %60 ], [ %57, %56 ], [ %59, %58 ]
  %64 = getelementptr inbounds %struct.fd_set, %struct.fd_set* %4, i64 0, i32 0, i64 %63
  %65 = load i64, i64* %64, align 8
  %66 = or i64 %65, %51
  store i64 %66, i64* %64, align 8
  %67 = load i32, i32* %47, align 4
  %68 = icmp slt i32 %43, %67
  %69 = select i1 %68, i32 %67, i32 %43
  br label %70

70:                                               ; preds = %62, %38
  %71 = phi i32 [ %69, %62 ], [ %43, %38 ]
  br i1 %19, label %72, label %75

72:                                               ; preds = %70
  %73 = add nsw i32 %71, 1
  %74 = call i32 @select(i32 %73, %struct.fd_set* nonnull %4, %struct.fd_set* null, %struct.fd_set* null, %struct.timeval* null) #15
  br label %80

75:                                               ; preds = %70
  %76 = bitcast %struct.timeval* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %76) #15
  %77 = add nsw i32 %71, 1
  %78 = bitcast %struct.timeval* %5 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %78, i8 0, i64 16, i1 false)
  %79 = call i32 @select(i32 %77, %struct.fd_set* nonnull %4, %struct.fd_set* null, %struct.fd_set* null, %struct.timeval* nonnull %5) #15
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %76) #15
  br label %80

80:                                               ; preds = %75, %72
  %81 = phi i32 [ %74, %72 ], [ %79, %75 ]
  %82 = icmp slt i32 %81, 0
  br i1 %82, label %83, label %84

83:                                               ; preds = %80
  call void (i32, i8*, ...) @NaClLog(i32 -4, i8* getelementptr inbounds ([71 x i8], [71 x i8]* @.str, i64 0, i64 0)) #15
  br label %171

84:                                               ; preds = %80
  %85 = icmp eq i32 %81, 0
  br i1 %85, label %171, label %86

86:                                               ; preds = %84
  %87 = load i32, i32* %23, align 8
  %88 = sext i32 %87 to i64
  %89 = call i1 @llvm.is.constant.i64(i64 %88)
  br i1 %89, label %90, label %96

90:                                               ; preds = %86
  %91 = icmp ult i32 %87, 1024
  br i1 %91, label %92, label %94

92:                                               ; preds = %90
  %93 = sdiv i64 %88, 64
  br label %98

94:                                               ; preds = %90
  %95 = call i64 @__fdelt_warn(i64 %88) #15
  br label %98

96:                                               ; preds = %86
  %97 = call i64 @__fdelt_chk(i64 %88) #15
  br label %98

98:                                               ; preds = %92, %94, %96
  %99 = phi i64 [ %97, %96 ], [ %93, %92 ], [ %95, %94 ]
  %100 = getelementptr inbounds %struct.fd_set, %struct.fd_set* %4, i64 0, i32 0, i64 %99
  %101 = load i64, i64* %100, align 8
  %102 = load i32, i32* %23, align 8
  %103 = srem i32 %102, 64
  %104 = zext i32 %103 to i64
  %105 = shl i64 1, %104
  %106 = and i64 %105, %101
  %107 = icmp eq i64 %106, 0
  br i1 %107, label %114, label %108

108:                                              ; preds = %98
  %109 = getelementptr inbounds [16 x i8], [16 x i8]* %6, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %109) #15
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %109, i8 -86, i64 16, i1 false)
  %110 = call i64 @read(i32 %102, i8* nonnull %109, i64 16) #15
  %111 = icmp slt i64 %110, 0
  br i1 %111, label %112, label %113

112:                                              ; preds = %108
  call void (i32, i8*, ...) @NaClLog(i32 -4, i8* getelementptr inbounds ([80 x i8], [80 x i8]* @.str.1, i64 0, i64 0)) #15
  br label %113

113:                                              ; preds = %112, %108
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %109) #15
  br label %114

114:                                              ; preds = %98, %113
  %115 = getelementptr inbounds %"class.port::Transport", %"class.port::Transport"* %0, i64 0, i32 5
  %116 = load i32, i32* %115, align 4
  %117 = sext i32 %116 to i64
  %118 = call i1 @llvm.is.constant.i64(i64 %117)
  br i1 %118, label %119, label %125

119:                                              ; preds = %114
  %120 = icmp ult i32 %116, 1024
  br i1 %120, label %121, label %123

121:                                              ; preds = %119
  %122 = sdiv i64 %117, 64
  br label %127

123:                                              ; preds = %119
  %124 = call i64 @__fdelt_warn(i64 %117) #15
  br label %127

125:                                              ; preds = %114
  %126 = call i64 @__fdelt_chk(i64 %117) #15
  br label %127

127:                                              ; preds = %121, %123, %125
  %128 = phi i64 [ %126, %125 ], [ %122, %121 ], [ %124, %123 ]
  %129 = getelementptr inbounds %struct.fd_set, %struct.fd_set* %4, i64 0, i32 0, i64 %128
  %130 = load i64, i64* %129, align 8
  %131 = load i32, i32* %115, align 4
  %132 = srem i32 %131, 64
  %133 = zext i32 %132 to i64
  %134 = shl i64 1, %133
  %135 = and i64 %134, %130
  %136 = icmp eq i64 %135, 0
  br i1 %136, label %171, label %137

137:                                              ; preds = %127
  %138 = getelementptr inbounds %"class.port::Transport", %"class.port::Transport"* %0, i64 0, i32 1, i32 0
  %139 = load i8*, i8** %138, align 8
  %140 = load i32, i32* %9, align 4
  %141 = sext i32 %140 to i64
  %142 = getelementptr inbounds i8, i8* %139, i64 %141
  %143 = sub nsw i32 4096, %140
  %144 = sext i32 %143 to i64
  %145 = call i64 @recv(i32 %131, i8* %142, i64 %144, i32 0) #15
  %146 = trunc i64 %145 to i32
  %147 = icmp sgt i32 %146, 0
  br i1 %147, label %148, label %153

148:                                              ; preds = %160, %137
  %149 = phi i64 [ %145, %137 ], [ %168, %160 ]
  %150 = trunc i64 %149 to i32
  %151 = load i32, i32* %9, align 4
  %152 = add nsw i32 %151, %150
  store i32 %152, i32* %9, align 4
  br label %171

153:                                              ; preds = %137, %160
  %154 = phi i32 [ %169, %160 ], [ %146, %137 ]
  %155 = icmp eq i32 %154, 0
  br i1 %155, label %171, label %156

156:                                              ; preds = %153
  %157 = tail call i32* @__errno_location() #4
  %158 = load i32, i32* %157, align 4
  %159 = icmp eq i32 %158, 4
  br i1 %159, label %160, label %171

160:                                              ; preds = %156
  %161 = load i32, i32* %115, align 4
  %162 = load i8*, i8** %138, align 8
  %163 = load i32, i32* %9, align 4
  %164 = sext i32 %163 to i64
  %165 = getelementptr inbounds i8, i8* %162, i64 %164
  %166 = sub nsw i32 4096, %163
  %167 = sext i32 %166 to i64
  %168 = call i64 @recv(i32 %161, i8* %165, i64 %167, i32 0) #15
  %169 = trunc i64 %168 to i32
  %170 = icmp sgt i32 %169, 0
  br i1 %170, label %148, label %153

171:                                              ; preds = %156, %153, %84, %148, %83, %127
  call void @llvm.lifetime.end.p0i8(i64 128, i8* nonnull %20) #15
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

; Function Attrs: nounwind readnone
declare i1 @llvm.is.constant.i64(i64) #4

declare i64 @__fdelt_warn(i64) local_unnamed_addr #2

declare i64 @__fdelt_chk(i64) local_unnamed_addr #2

declare i32 @select(i32, %struct.fd_set*, %struct.fd_set*, %struct.fd_set*, %struct.timeval*) local_unnamed_addr #2

declare void @NaClLog(i32, i8*, ...) local_unnamed_addr #2

; Function Attrs: nofree
declare i64 @read(i32, i8* nocapture, i64) local_unnamed_addr #5

; Function Attrs: nofree norecurse nounwind ssp uwtable writeonly
define hidden void @_ZN4port13SocketBindingC2Ei(%"class.port::SocketBinding"* nocapture, i32) unnamed_addr #6 align 2 {
  %3 = getelementptr inbounds %"class.port::SocketBinding", %"class.port::SocketBinding"* %0, i64 0, i32 0
  store i32 %1, i32* %3, align 4
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden noalias %"class.port::SocketBinding"* @_ZN4port13SocketBinding4BindEPKc(i8* readonly) local_unnamed_addr #0 align 2 {
  %2 = alloca %"class.std::__1::basic_string", align 8
  %3 = alloca %"class.std::__1::basic_string", align 8
  %4 = alloca %"class.std::__1::basic_string", align 8
  %5 = alloca %"class.std::__1::basic_string", align 8
  %6 = alloca %"class.std::__1::basic_string", align 8
  %7 = alloca %struct.sockaddr_in, align 4
  %8 = alloca i32, align 4
  %9 = tail call i32 @socket(i32 2, i32 1, i32 6) #15
  %10 = icmp eq i32 %9, -1
  br i1 %10, label %11, label %12

11:                                               ; preds = %1
  tail call void (i32, i8*, ...) @NaClLog(i32 -3, i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.2, i64 0, i64 0)) #15
  br label %184

12:                                               ; preds = %1
  %13 = bitcast %struct.sockaddr_in* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %13) #15
  %14 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %7, i64 0, i32 0
  %15 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %7, i64 0, i32 1
  %16 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %7, i64 0, i32 2, i32 0
  %17 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %7, i64 0, i32 3, i64 0
  %18 = bitcast i8* %17 to i64*
  store i64 0, i64* %18, align 4
  store i16 2, i16* %14, align 4
  store i32 16777343, i32* %16, align 4
  store i16 -20977, i16* %15, align 2
  %19 = icmp eq i8* %0, null
  br i1 %19, label %164, label %20

20:                                               ; preds = %12
  %21 = bitcast %"class.std::__1::basic_string"* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %21) #15
  %22 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %6, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %23 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %6, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %24 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %6, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 2
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %21, i8 -86, i64 24, i1 false) #15
  %25 = tail call i64 @strlen(i8* nonnull %0) #15
  %26 = icmp ugt i64 %25, -17
  br i1 %26, label %27, label %29

27:                                               ; preds = %20
  %28 = bitcast %"class.std::__1::basic_string"* %6 to %"class.std::__1::__basic_string_common"*
  call void @_ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__basic_string_common"* nonnull %28) #16
  unreachable

29:                                               ; preds = %20
  %30 = icmp ult i64 %25, 23
  br i1 %30, label %36, label %31

31:                                               ; preds = %29
  %32 = add nuw i64 %25, 16
  %33 = and i64 %32, -16
  %34 = tail call i8* @_Znwm(i64 %33) #17
  store i8* %34, i8** %22, align 8
  %35 = or i64 %33, -9223372036854775808
  store i64 %35, i64* %24, align 8
  store i64 %25, i64* %23, align 8
  br label %41

36:                                               ; preds = %29
  %37 = trunc i64 %25 to i8
  %38 = bitcast %"class.std::__1::basic_string"* %6 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %39 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %38, i64 0, i32 1, i32 0
  store i8 %37, i8* %39, align 1
  %40 = icmp eq i64 %25, 0
  br i1 %40, label %43, label %41

41:                                               ; preds = %36, %31
  %42 = phi i8* [ %34, %31 ], [ %21, %36 ]
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 1 %42, i8* nonnull align 1 %0, i64 %25, i1 false) #15
  br label %43

43:                                               ; preds = %41, %36
  %44 = phi i8* [ %21, %36 ], [ %42, %41 ]
  %45 = getelementptr inbounds i8, i8* %44, i64 %25
  store i8 0, i8* %45, align 1
  store i16 2, i16* %14, align 4
  %46 = bitcast %"class.std::__1::basic_string"* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %46) #15
  %47 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %2, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %48 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %2, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %46, i8 0, i64 24, i1 false) #15
  %49 = bitcast %"class.std::__1::basic_string"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %49) #15
  %50 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %3, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %51 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %3, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %49, i8 0, i64 24, i1 false) #15
  %52 = call i64 @_ZNKSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE4findEcm(%"class.std::__1::basic_string"* nonnull %6, i8 signext 58, i64 0) #15
  %53 = icmp eq i64 %52, -1
  br i1 %53, label %54, label %58

54:                                               ; preds = %43
  %55 = bitcast %"class.std::__1::basic_string"* %6 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %56 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %55, i64 0, i32 1, i32 0
  %57 = load i8, i8* %56, align 1
  br label %79

58:                                               ; preds = %43
  %59 = add nuw i64 %52, 1
  %60 = bitcast %"class.std::__1::basic_string"* %6 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %61 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %60, i64 0, i32 1, i32 0
  %62 = load i8, i8* %61, align 1
  %63 = icmp slt i8 %62, 0
  %64 = load i64, i64* %23, align 8
  %65 = zext i8 %62 to i64
  %66 = select i1 %63, i64 %64, i64 %65
  %67 = icmp ult i64 %59, %66
  br i1 %67, label %68, label %79

68:                                               ; preds = %58
  %69 = bitcast %"class.std::__1::basic_string"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %69) #15
  %70 = bitcast %"class.std::__1::basic_string"* %6 to %"class.std::__1::allocator"*
  call void @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC1ERKS5_mmRKS4_(%"class.std::__1::basic_string"* nonnull %4, %"class.std::__1::basic_string"* nonnull dereferenceable(24) %6, i64 0, i64 %52, %"class.std::__1::allocator"* nonnull dereferenceable(1) %70) #15
  %71 = bitcast %"class.std::__1::basic_string"* %2 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %72 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %71, i64 0, i32 1, i32 0
  %73 = load i8, i8* %72, align 1
  %74 = icmp slt i8 %73, 0
  br i1 %74, label %75, label %77

75:                                               ; preds = %68
  %76 = load i8*, i8** %47, align 8
  call void @_ZdlPv(i8* %76) #17
  br label %77

77:                                               ; preds = %75, %68
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %46, i8* nonnull align 8 %69, i64 24, i1 false) #15
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %69) #15
  %78 = bitcast %"class.std::__1::basic_string"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %78) #15
  call void @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC1ERKS5_mmRKS4_(%"class.std::__1::basic_string"* nonnull %5, %"class.std::__1::basic_string"* nonnull dereferenceable(24) %6, i64 %59, i64 -1, %"class.std::__1::allocator"* nonnull dereferenceable(1) %70) #15
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %49, i8* nonnull align 8 %78, i64 24, i1 false) #15
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %78) #15
  br label %91

79:                                               ; preds = %58, %54
  %80 = phi i8 [ %57, %54 ], [ %62, %58 ]
  %81 = icmp slt i8 %80, 0
  br i1 %81, label %83, label %82

82:                                               ; preds = %79
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %46, i8* nonnull align 8 %21, i64 24, i1 false) #15
  br label %87

83:                                               ; preds = %79
  %84 = load i8*, i8** %22, align 8
  %85 = load i64, i64* %23, align 8
  %86 = call dereferenceable(24) %"class.std::__1::basic_string"* @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE17__assign_no_aliasILb1EEERS5_PKcm(%"class.std::__1::basic_string"* nonnull %2, i8* %84, i64 %85) #15
  br label %87

87:                                               ; preds = %83, %82
  %88 = bitcast %"class.std::__1::basic_string"* %3 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %89 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %88, i64 0, i32 1, i32 0
  store i8 0, i8* %89, align 1
  store i8 0, i8* %49, align 8
  %90 = bitcast %"class.std::__1::basic_string"* %2 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  br label %91

91:                                               ; preds = %87, %77
  %92 = phi %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* [ %90, %87 ], [ %71, %77 ]
  %93 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %92, i64 0, i32 1, i32 0
  %94 = load i8, i8* %93, align 1
  %95 = icmp slt i8 %94, 0
  %96 = load i64, i64* %48, align 8
  %97 = zext i8 %94 to i64
  %98 = select i1 %95, i64 %96, i64 %97
  switch i64 %98, label %104 [
    i64 0, label %123
    i64 7, label %99
  ]

99:                                               ; preds = %91
  %100 = call i32 @_ZNKSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7compareEmmPKcm(%"class.std::__1::basic_string"* nonnull %2, i64 0, i64 -1, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.9, i64 0, i64 0), i64 7) #15
  %101 = icmp eq i32 %100, 0
  br i1 %101, label %123, label %102

102:                                              ; preds = %99
  %103 = load i8, i8* %93, align 1
  br label %104

104:                                              ; preds = %102, %91
  %105 = phi i8 [ %103, %102 ], [ %94, %91 ]
  %106 = icmp slt i8 %105, 0
  %107 = load i8*, i8** %47, align 8
  %108 = select i1 %106, i8* %107, i8* %46
  %109 = call %struct.hostent* @gethostbyname(i8* %108) #15
  %110 = icmp eq %struct.hostent* %109, null
  br i1 %110, label %144, label %111

111:                                              ; preds = %104
  %112 = getelementptr inbounds %struct.hostent, %struct.hostent* %109, i64 0, i32 2
  %113 = load i32, i32* %112, align 8
  %114 = icmp eq i32 %113, 2
  br i1 %114, label %115, label %144

115:                                              ; preds = %111
  %116 = getelementptr inbounds %struct.hostent, %struct.hostent* %109, i64 0, i32 4
  %117 = load i8**, i8*** %116, align 8
  %118 = load i8*, i8** %117, align 8
  %119 = icmp eq i8* %118, null
  br i1 %119, label %144, label %120

120:                                              ; preds = %115
  %121 = bitcast i8* %118 to i32*
  %122 = load i32, i32* %121, align 4
  br label %123

123:                                              ; preds = %120, %99, %91
  %124 = phi i32 [ %122, %120 ], [ 16777343, %91 ], [ 0, %99 ]
  %125 = bitcast %"class.std::__1::basic_string"* %3 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %126 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %125, i64 0, i32 1, i32 0
  %127 = load i8, i8* %126, align 1
  %128 = icmp slt i8 %127, 0
  %129 = load i64, i64* %51, align 8
  %130 = zext i8 %127 to i64
  %131 = select i1 %128, i64 %129, i64 %130
  %132 = icmp eq i64 %131, 0
  br i1 %132, label %142, label %133

133:                                              ; preds = %123
  %134 = load i8*, i8** %50, align 8
  %135 = select i1 %128, i8* %134, i8* %49
  %136 = call i64 @strtol(i8* nocapture %135, i8** null, i32 10) #15
  %137 = trunc i64 %136 to i32
  %138 = icmp ugt i32 %137, 65535
  br i1 %138, label %144, label %139

139:                                              ; preds = %133
  %140 = trunc i64 %136 to i16
  %141 = call i16 @llvm.bswap.i16(i16 %140) #15
  br label %142

142:                                              ; preds = %139, %123
  %143 = phi i16 [ -20977, %123 ], [ %141, %139 ]
  store i32 %124, i32* %16, align 4
  store i16 %143, i16* %15, align 2
  br label %144

144:                                              ; preds = %142, %133, %115, %111, %104
  %145 = bitcast %"class.std::__1::basic_string"* %3 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %146 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %145, i64 0, i32 1, i32 0
  %147 = load i8, i8* %146, align 1
  %148 = icmp slt i8 %147, 0
  br i1 %148, label %149, label %151

149:                                              ; preds = %144
  %150 = load i8*, i8** %50, align 8
  call void @_ZdlPv(i8* %150) #17
  br label %151

151:                                              ; preds = %149, %144
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %49) #15
  %152 = load i8, i8* %93, align 1
  %153 = icmp slt i8 %152, 0
  br i1 %153, label %154, label %156

154:                                              ; preds = %151
  %155 = load i8*, i8** %47, align 8
  call void @_ZdlPv(i8* %155) #17
  br label %156

156:                                              ; preds = %154, %151
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %46) #15
  %157 = bitcast %"class.std::__1::basic_string"* %6 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %158 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %157, i64 0, i32 1, i32 0
  %159 = load i8, i8* %158, align 1
  %160 = icmp slt i8 %159, 0
  br i1 %160, label %161, label %163

161:                                              ; preds = %156
  %162 = load i8*, i8** %22, align 8
  call void @_ZdlPv(i8* %162) #17
  br label %163

163:                                              ; preds = %156, %161
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %21) #15
  br label %164

164:                                              ; preds = %12, %163
  %165 = bitcast i32* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %165) #15
  store i32 1, i32* %8, align 4
  %166 = call i32 @setsockopt(i32 %9, i32 1, i32 2, i8* nonnull %165, i32 4) #15
  %167 = icmp eq i32 %166, 0
  br i1 %167, label %169, label %168

168:                                              ; preds = %164
  call void (i32, i8*, ...) @NaClLog(i32 -2, i8* getelementptr inbounds ([36 x i8], [36 x i8]* @.str.3, i64 0, i64 0)) #15
  br label %169

169:                                              ; preds = %164, %168
  %170 = bitcast %struct.sockaddr_in* %7 to %struct.sockaddr*
  %171 = call i32 @bind(i32 %9, %struct.sockaddr* nonnull %170, i32 16) #15
  %172 = icmp eq i32 %171, 0
  br i1 %172, label %174, label %173

173:                                              ; preds = %169
  call void (i32, i8*, ...) @NaClLog(i32 -3, i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.4, i64 0, i64 0)) #15
  br label %182

174:                                              ; preds = %169
  %175 = call i32 @listen(i32 %9, i32 1) #15
  %176 = icmp eq i32 %175, 0
  br i1 %176, label %178, label %177

177:                                              ; preds = %174
  call void (i32, i8*, ...) @NaClLog(i32 -3, i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.5, i64 0, i64 0)) #15
  br label %182

178:                                              ; preds = %174
  %179 = call i8* @_Znwm(i64 4) #17
  %180 = bitcast i8* %179 to %"class.port::SocketBinding"*
  %181 = bitcast i8* %179 to i32*
  store i32 %9, i32* %181, align 4
  br label %182

182:                                              ; preds = %178, %177, %173
  %183 = phi %"class.port::SocketBinding"* [ null, %173 ], [ null, %177 ], [ %180, %178 ]
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %165) #15
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %13) #15
  br label %184

184:                                              ; preds = %182, %11
  %185 = phi %"class.port::SocketBinding"* [ null, %11 ], [ %183, %182 ]
  ret %"class.port::SocketBinding"* %185
}

; Function Attrs: nounwind
declare i32 @socket(i32, i32, i32) local_unnamed_addr #7

; Function Attrs: nounwind
declare i32 @setsockopt(i32, i32, i32, i8*, i32) local_unnamed_addr #7

; Function Attrs: nounwind
declare i32 @bind(i32, %struct.sockaddr*, i32) local_unnamed_addr #7

; Function Attrs: nounwind
declare i32 @listen(i32, i32) local_unnamed_addr #7

; Function Attrs: nobuiltin nofree
declare noalias nonnull i8* @_Znwm(i64) local_unnamed_addr #8

; Function Attrs: nofree nounwind ssp uwtable
define hidden noalias nonnull %"class.port::ITransport"* @_ZN4port13SocketBinding15CreateTransportEv(%"class.port::SocketBinding"* nocapture readonly) local_unnamed_addr #9 align 2 {
  %2 = tail call i8* @_Znwm(i64 32) #17
  %3 = getelementptr inbounds %"class.port::SocketBinding", %"class.port::SocketBinding"* %0, i64 0, i32 0
  %4 = load i32, i32* %3, align 4
  %5 = bitcast i8* %2 to i32 (...)***
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [10 x i8*] }, { [10 x i8*] }* @_ZTVN4port9TransportE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %5, align 8
  %6 = tail call i8* @_Znam(i64 4096) #17
  %7 = getelementptr inbounds i8, i8* %2, i64 8
  %8 = bitcast i8* %7 to i8**
  store i8* %6, i8** %8, align 8
  %9 = getelementptr inbounds i8, i8* %2, i64 16
  %10 = bitcast i8* %9 to i32*
  store i32 0, i32* %10, align 8
  %11 = getelementptr inbounds i8, i8* %2, i64 20
  %12 = bitcast i8* %11 to i32*
  store i32 0, i32* %12, align 4
  %13 = getelementptr inbounds i8, i8* %2, i64 24
  %14 = bitcast i8* %13 to i32*
  store i32 %4, i32* %14, align 8
  %15 = getelementptr inbounds i8, i8* %2, i64 28
  %16 = bitcast i8* %15 to i32*
  store i32 -1, i32* %16, align 4
  %17 = bitcast i8* %2 to %"class.port::ITransport"*
  ret %"class.port::ITransport"* %17
}

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i16 @_ZN4port13SocketBinding12GetBoundPortEv(%"class.port::SocketBinding"* nocapture readonly) local_unnamed_addr #0 align 2 {
  %2 = alloca %struct.sockaddr_in, align 4
  %3 = alloca i32, align 4
  %4 = bitcast %struct.sockaddr_in* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %4) #15
  %5 = bitcast %struct.sockaddr_in* %2 to %struct.sockaddr*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 4 %4, i8 0, i64 16, i1 false)
  %6 = bitcast i32* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %6) #15
  store i32 16, i32* %3, align 4
  %7 = getelementptr inbounds %"class.port::SocketBinding", %"class.port::SocketBinding"* %0, i64 0, i32 0
  %8 = load i32, i32* %7, align 4
  %9 = call i32 @getsockname(i32 %8, %struct.sockaddr* nonnull %5, i32* nonnull %3) #15
  %10 = icmp eq i32 %9, 0
  br i1 %10, label %12, label %11

11:                                               ; preds = %1
  call void (i32, i8*, ...) @NaClLog(i32 -3, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.6, i64 0, i64 0)) #15
  br label %16

12:                                               ; preds = %1
  %13 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %2, i64 0, i32 1
  %14 = load i16, i16* %13, align 2
  %15 = call i16 @llvm.bswap.i16(i16 %14) #15
  br label %16

16:                                               ; preds = %12, %11
  %17 = phi i16 [ 0, %11 ], [ %15, %12 ]
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %6) #15
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %4) #15
  ret i16 %17
}

; Function Attrs: nounwind
declare i32 @getsockname(i32, %struct.sockaddr*, i32*) local_unnamed_addr #7

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN4port9TransportD2Ev(%"class.port::Transport"*) unnamed_addr #0 comdat align 2 {
  %2 = getelementptr inbounds %"class.port::Transport", %"class.port::Transport"* %0, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [10 x i8*] }, { [10 x i8*] }* @_ZTVN4port9TransportE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %2, align 8
  %3 = getelementptr inbounds %"class.port::Transport", %"class.port::Transport"* %0, i64 0, i32 5
  %4 = load i32, i32* %3, align 4
  %5 = icmp eq i32 %4, -1
  br i1 %5, label %8, label %6

6:                                                ; preds = %1
  %7 = tail call i32 @close(i32 %4) #15
  br label %8

8:                                                ; preds = %1, %6
  %9 = getelementptr inbounds %"class.port::Transport", %"class.port::Transport"* %0, i64 0, i32 1, i32 0
  %10 = load i8*, i8** %9, align 8
  %11 = icmp eq i8* %10, null
  br i1 %11, label %13, label %12

12:                                               ; preds = %8
  tail call void @_ZdaPv(i8* nonnull %10) #17
  br label %13

13:                                               ; preds = %8, %12
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN4port9TransportD0Ev(%"class.port::Transport"*) unnamed_addr #0 comdat align 2 {
  %2 = getelementptr inbounds %"class.port::Transport", %"class.port::Transport"* %0, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [10 x i8*] }, { [10 x i8*] }* @_ZTVN4port9TransportE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %2, align 8
  %3 = getelementptr inbounds %"class.port::Transport", %"class.port::Transport"* %0, i64 0, i32 5
  %4 = load i32, i32* %3, align 4
  %5 = icmp eq i32 %4, -1
  br i1 %5, label %8, label %6

6:                                                ; preds = %1
  %7 = tail call i32 @close(i32 %4) #15
  br label %8

8:                                                ; preds = %6, %1
  %9 = getelementptr inbounds %"class.port::Transport", %"class.port::Transport"* %0, i64 0, i32 1, i32 0
  %10 = load i8*, i8** %9, align 8
  %11 = icmp eq i8* %10, null
  br i1 %11, label %13, label %12

12:                                               ; preds = %8
  tail call void @_ZdaPv(i8* nonnull %10) #17
  br label %13

13:                                               ; preds = %8, %12
  %14 = bitcast %"class.port::Transport"* %0 to i8*
  tail call void @_ZdlPv(i8* %14) #17
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZN4port9Transport15IsDataAvailableEv(%"class.port::Transport"*) unnamed_addr #0 comdat align 2 {
  %2 = alloca %struct.fd_set, align 8
  %3 = alloca %struct.timeval, align 8
  %4 = getelementptr inbounds %"class.port::Transport", %"class.port::Transport"* %0, i64 0, i32 2
  %5 = load i32, i32* %4, align 8
  %6 = getelementptr inbounds %"class.port::Transport", %"class.port::Transport"* %0, i64 0, i32 3
  %7 = load i32, i32* %6, align 4
  %8 = icmp slt i32 %5, %7
  br i1 %8, label %39, label %9

9:                                                ; preds = %1
  %10 = bitcast %struct.fd_set* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 128, i8* nonnull %10) #15
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %10, i8 -86, i64 128, i1 false)
  %11 = getelementptr inbounds %struct.fd_set, %struct.fd_set* %2, i64 0, i32 0, i64 0
  %12 = call { i64, i64* } asm sideeffect "cld; rep; stosq", "={cx},={di},{ax},0,1,~{memory},~{dirflag},~{fpsr},~{flags}"(i32 0, i64 16, i64* nonnull %11) #15, !srcloc !3
  %13 = getelementptr inbounds %"class.port::Transport", %"class.port::Transport"* %0, i64 0, i32 5
  %14 = load i32, i32* %13, align 4
  %15 = srem i32 %14, 64
  %16 = zext i32 %15 to i64
  %17 = shl i64 1, %16
  %18 = sext i32 %14 to i64
  %19 = call i1 @llvm.is.constant.i64(i64 %18)
  br i1 %19, label %20, label %26

20:                                               ; preds = %9
  %21 = icmp ult i32 %14, 1024
  br i1 %21, label %22, label %24

22:                                               ; preds = %20
  %23 = sdiv i64 %18, 64
  br label %28

24:                                               ; preds = %20
  %25 = call i64 @__fdelt_warn(i64 %18) #15
  br label %28

26:                                               ; preds = %9
  %27 = call i64 @__fdelt_chk(i64 %18) #15
  br label %28

28:                                               ; preds = %22, %24, %26
  %29 = phi i64 [ %27, %26 ], [ %23, %22 ], [ %25, %24 ]
  %30 = getelementptr inbounds %struct.fd_set, %struct.fd_set* %2, i64 0, i32 0, i64 %29
  %31 = load i64, i64* %30, align 8
  %32 = or i64 %31, %17
  store i64 %32, i64* %30, align 8
  %33 = bitcast %struct.timeval* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %33) #15
  %34 = bitcast %struct.timeval* %3 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %34, i8 0, i64 16, i1 false)
  %35 = load i32, i32* %13, align 4
  %36 = add nsw i32 %35, 1
  %37 = call i32 @select(i32 %36, %struct.fd_set* nonnull %2, %struct.fd_set* null, %struct.fd_set* null, %struct.timeval* nonnull %3) #15
  %38 = icmp ne i32 %37, 0
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %33) #15
  call void @llvm.lifetime.end.p0i8(i64 128, i8* nonnull %10) #15
  br label %39

39:                                               ; preds = %1, %28
  %40 = phi i1 [ %38, %28 ], [ true, %1 ]
  ret i1 %40
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN4port9Transport10DisconnectEv(%"class.port::Transport"*) unnamed_addr #0 comdat align 2 {
  %2 = getelementptr inbounds %"class.port::Transport", %"class.port::Transport"* %0, i64 0, i32 5
  %3 = load i32, i32* %2, align 4
  %4 = tail call i32 @shutdown(i32 %3, i32 2) #15
  %5 = load i32, i32* %2, align 4
  %6 = icmp eq i32 %5, -1
  br i1 %6, label %9, label %7

7:                                                ; preds = %1
  %8 = tail call i32 @close(i32 %5) #15
  br label %9

9:                                                ; preds = %1, %7
  store i32 -1, i32* %2, align 4
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZN4port9Transport16AcceptConnectionEv(%"class.port::Transport"*) unnamed_addr #0 comdat align 2 {
  %2 = alloca i32, align 4
  %3 = getelementptr inbounds %"class.port::Transport", %"class.port::Transport"* %0, i64 0, i32 5
  %4 = load i32, i32* %3, align 4
  %5 = icmp eq i32 %4, -1
  br i1 %5, label %7, label %6

6:                                                ; preds = %1
  tail call void (i32, i8*, ...) @NaClLog(i32 -4, i8* getelementptr inbounds ([40 x i8], [40 x i8]* @.str.10, i64 0, i64 0), i8* getelementptr inbounds ([63 x i8], [63 x i8]* @.str.11, i64 0, i64 0), i32 137, i8* getelementptr inbounds ([38 x i8], [38 x i8]* @.str.12, i64 0, i64 0)) #15
  br label %7

7:                                                ; preds = %1, %6
  %8 = getelementptr inbounds %"class.port::Transport", %"class.port::Transport"* %0, i64 0, i32 4
  %9 = load i32, i32* %8, align 8
  %10 = tail call i32 @accept(i32 %9, %struct.sockaddr* null, i32* null) #15
  store i32 %10, i32* %3, align 4
  %11 = icmp eq i32 %10, -1
  br i1 %11, label %18, label %12

12:                                               ; preds = %7
  %13 = bitcast i32* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %13) #15
  store i32 1, i32* %2, align 4
  %14 = call i32 @setsockopt(i32 %10, i32 6, i32 1, i8* nonnull %13, i32 4) #15
  %15 = icmp eq i32 %14, 0
  br i1 %15, label %17, label %16

16:                                               ; preds = %12
  call void (i32, i8*, ...) @NaClLog(i32 -2, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.13, i64 0, i64 0)) #15
  br label %17

17:                                               ; preds = %12, %16
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %13) #15
  br label %18

18:                                               ; preds = %7, %17
  %19 = phi i1 [ true, %17 ], [ false, %7 ]
  ret i1 %19
}

; Function Attrs: noreturn
declare void @_ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__basic_string_common"*) local_unnamed_addr #10

; Function Attrs: argmemonly nofree nounwind readonly
declare i64 @strlen(i8* nocapture) local_unnamed_addr #11

; Function Attrs: nounwind
declare i64 @_ZNKSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE4findEcm(%"class.std::__1::basic_string"*, i8 signext, i64) local_unnamed_addr #7

declare %struct.hostent* @gethostbyname(i8*) local_unnamed_addr #2

declare void @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC1ERKS5_mmRKS4_(%"class.std::__1::basic_string"*, %"class.std::__1::basic_string"* dereferenceable(24), i64, i64, %"class.std::__1::allocator"* dereferenceable(1)) unnamed_addr #2

; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(i8*) local_unnamed_addr #12

declare dereferenceable(24) %"class.std::__1::basic_string"* @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE17__assign_no_aliasILb1EEERS5_PKcm(%"class.std::__1::basic_string"*, i8*, i64) local_unnamed_addr #2

declare i32 @_ZNKSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7compareEmmPKcm(%"class.std::__1::basic_string"*, i64, i64, i8*, i64) local_unnamed_addr #2

; Function Attrs: nofree nounwind
declare i64 @strtol(i8* readonly, i8** nocapture, i32) local_unnamed_addr #13

; Function Attrs: nobuiltin nofree
declare noalias nonnull i8* @_Znam(i64) local_unnamed_addr #8

declare i32 @close(i32) local_unnamed_addr #2

; Function Attrs: nobuiltin nounwind
declare void @_ZdaPv(i8*) local_unnamed_addr #12

; Function Attrs: nounwind
declare i32 @shutdown(i32, i32) local_unnamed_addr #7

declare i32 @accept(i32, %struct.sockaddr*, i32*) local_unnamed_addr #2

; Function Attrs: nounwind readnone speculatable
declare i16 @llvm.bswap.i16(i16) #14

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind readnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind readnone }
attributes #5 = { nofree "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nofree norecurse nounwind ssp uwtable writeonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #8 = { nobuiltin nofree "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #9 = { nofree nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #10 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #11 = { argmemonly nofree nounwind readonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #12 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #13 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #14 = { nounwind readnone speculatable }
attributes #15 = { nounwind }
attributes #16 = { noreturn nounwind }
attributes #17 = { builtin nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{i32 -2143111318}
!3 = !{i32 -2143112871}
