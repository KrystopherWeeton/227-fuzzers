; ModuleID = '../../third_party/blink/renderer/core/fetch/multipart_parser.cc'
source_filename = "../../third_party/blink/renderer/core/fetch/multipart_parser.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"class.blink::GCInfoTable" = type { %"struct.blink::GCInfo"**, i32, i32, %"class.WTF::Mutex" }
%"struct.blink::GCInfo" = type { void (%"class.blink::Visitor"*, i8*)*, void (i8*)*, { i8*, i8 } (i8*)*, i8 }
%"class.blink::Visitor" = type { i32 (...)**, %"class.blink::ThreadState"* }
%"class.blink::ThreadState" = type <{ %"class.std::__1::unique_ptr", i32, [4 x i8], %"class.std::__1::unique_ptr.129", %"class.std::__1::unique_ptr.129", i8**, i8, i8, i8, i8, i8, i8, [2 x i8], i64, i64, i32, i32, i32, [4 x i8], %"class.WTF::Deque", %"class.v8::Isolate"*, void (%"class.v8::Isolate"*, %"class.v8::EmbedderGraph"*, i8*)*, %"class.std::__1::unique_ptr.139", %"class.std::__1::unique_ptr.145", %"struct.blink::ThreadState::GCData", %"class.std::__1::unique_ptr.157", %"class.std::__1::unique_ptr.163", %"class.base::JobHandle", %"class.base::JobHandle", %"struct.std::__1::atomic.169", [7 x i8], i64, i8, [7 x i8], i64, %"class.base::TimeTicks", i8, i8, [6 x i8] }>
%"class.std::__1::unique_ptr" = type { %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %"class.blink::ThreadHeap"* }
%"class.blink::ThreadHeap" = type { %"class.blink::ThreadState"*, %"class.std::__1::unique_ptr.2", %"class.std::__1::unique_ptr.6", %"class.std::__1::unique_ptr.12", %"class.std::__1::unique_ptr.18", %"class.std::__1::unique_ptr.24", %"class.std::__1::unique_ptr.30", %"class.std::__1::unique_ptr.37", %"class.std::__1::unique_ptr.44", %"class.std::__1::unique_ptr.44", %"class.std::__1::unique_ptr.51", %"class.std::__1::unique_ptr.58", %"class.std::__1::unique_ptr.65", %"class.std::__1::unique_ptr.65", %"class.std::__1::unique_ptr.72", %"class.std::__1::unique_ptr.79", %"class.std::__1::unique_ptr.86", %"class.std::__1::unique_ptr.109", %"struct.blink::ThreadHeap::LastAllocatedRegion", [9 x %"class.blink::BaseArena"*], i64, i64 }
%"class.std::__1::unique_ptr.2" = type { %"class.std::__1::__compressed_pair.3" }
%"class.std::__1::__compressed_pair.3" = type { %"struct.std::__1::__compressed_pair_elem.4" }
%"struct.std::__1::__compressed_pair_elem.4" = type { %"class.blink::ThreadHeapStatsCollector"* }
%"class.blink::ThreadHeapStatsCollector" = type opaque
%"class.std::__1::unique_ptr.6" = type { %"class.std::__1::__compressed_pair.7" }
%"class.std::__1::__compressed_pair.7" = type { %"struct.std::__1::__compressed_pair_elem.8" }
%"struct.std::__1::__compressed_pair_elem.8" = type { %"class.blink::RegionTree"* }
%"class.blink::RegionTree" = type opaque
%"class.std::__1::unique_ptr.12" = type { %"class.std::__1::__compressed_pair.13" }
%"class.std::__1::__compressed_pair.13" = type { %"struct.std::__1::__compressed_pair_elem.14" }
%"struct.std::__1::__compressed_pair_elem.14" = type { %"class.blink::PageBloomFilter"* }
%"class.blink::PageBloomFilter" = type opaque
%"class.std::__1::unique_ptr.18" = type { %"class.std::__1::__compressed_pair.19" }
%"class.std::__1::__compressed_pair.19" = type { %"struct.std::__1::__compressed_pair_elem.20" }
%"struct.std::__1::__compressed_pair_elem.20" = type { %"class.blink::PagePool"* }
%"class.blink::PagePool" = type opaque
%"class.std::__1::unique_ptr.24" = type { %"class.std::__1::__compressed_pair.25" }
%"class.std::__1::__compressed_pair.25" = type { %"struct.std::__1::__compressed_pair_elem.26" }
%"struct.std::__1::__compressed_pair_elem.26" = type { %"class.blink::ProcessHeapReporter"* }
%"class.blink::ProcessHeapReporter" = type opaque
%"class.std::__1::unique_ptr.30" = type { %"class.std::__1::__compressed_pair.31" }
%"class.std::__1::__compressed_pair.31" = type { %"struct.std::__1::__compressed_pair_elem.32" }
%"struct.std::__1::__compressed_pair_elem.32" = type { %"class.blink::Worklist"* }
%"class.blink::Worklist" = type { [4 x %"struct.blink::Worklist<blink::TraceDescriptor, 512, 4>::PrivateSegmentHolder"], %"class.blink::Worklist<blink::TraceDescriptor, 512, 4>::GlobalPool" }
%"struct.blink::Worklist<blink::TraceDescriptor, 512, 4>::PrivateSegmentHolder" = type { %"class.blink::Worklist<blink::TraceDescriptor, 512, 4>::Segment"*, %"class.blink::Worklist<blink::TraceDescriptor, 512, 4>::Segment"*, [64 x i8] }
%"class.blink::Worklist<blink::TraceDescriptor, 512, 4>::Segment" = type { %"class.blink::Worklist<blink::TraceDescriptor, 512, 4>::Segment"*, i64, [512 x %"struct.blink::TraceDescriptor"] }
%"struct.blink::TraceDescriptor" = type { i8*, void (%"class.blink::Visitor"*, i8*)* }
%"class.blink::Worklist<blink::TraceDescriptor, 512, 4>::GlobalPool" = type { %"class.base::Lock", %"class.blink::Worklist<blink::TraceDescriptor, 512, 4>::Segment"*, %"struct.std::__1::atomic" }
%"class.base::Lock" = type { %"class.base::internal::LockImpl" }
%"class.base::internal::LockImpl" = type { %union.pthread_mutex_t }
%union.pthread_mutex_t = type { %struct.__pthread_mutex_s }
%struct.__pthread_mutex_s = type { i32, i32, i32, i32, i32, i16, i16, %struct.__pthread_internal_list }
%struct.__pthread_internal_list = type { %struct.__pthread_internal_list*, %struct.__pthread_internal_list* }
%"struct.std::__1::atomic" = type { %"struct.std::__1::__atomic_base" }
%"struct.std::__1::__atomic_base" = type { %"struct.std::__1::__atomic_base.33" }
%"struct.std::__1::__atomic_base.33" = type { %"struct.std::__1::__cxx_atomic_impl" }
%"struct.std::__1::__cxx_atomic_impl" = type { %"struct.std::__1::__cxx_atomic_base_impl" }
%"struct.std::__1::__cxx_atomic_base_impl" = type { i64 }
%"class.std::__1::unique_ptr.37" = type { %"class.std::__1::__compressed_pair.38" }
%"class.std::__1::__compressed_pair.38" = type { %"struct.std::__1::__compressed_pair_elem.39" }
%"struct.std::__1::__compressed_pair_elem.39" = type { %"class.blink::Worklist.40"* }
%"class.blink::Worklist.40" = type { [4 x %"struct.blink::Worklist<blink::HeapObjectHeader *, 64, 4>::PrivateSegmentHolder"], %"class.blink::Worklist<blink::HeapObjectHeader *, 64, 4>::GlobalPool" }
%"struct.blink::Worklist<blink::HeapObjectHeader *, 64, 4>::PrivateSegmentHolder" = type { %"class.blink::Worklist<blink::HeapObjectHeader *, 64, 4>::Segment"*, %"class.blink::Worklist<blink::HeapObjectHeader *, 64, 4>::Segment"*, [64 x i8] }
%"class.blink::Worklist<blink::HeapObjectHeader *, 64, 4>::Segment" = type opaque
%"class.blink::Worklist<blink::HeapObjectHeader *, 64, 4>::GlobalPool" = type { %"class.base::Lock", %"class.blink::Worklist<blink::HeapObjectHeader *, 64, 4>::Segment"*, %"struct.std::__1::atomic" }
%"class.std::__1::unique_ptr.44" = type { %"class.std::__1::__compressed_pair.45" }
%"class.std::__1::__compressed_pair.45" = type { %"struct.std::__1::__compressed_pair_elem.46" }
%"struct.std::__1::__compressed_pair_elem.46" = type { %"class.blink::Worklist.47"* }
%"class.blink::Worklist.47" = type { [4 x %"struct.blink::Worklist<const void *, 16, 4>::PrivateSegmentHolder"], %"class.blink::Worklist<const void *, 16, 4>::GlobalPool" }
%"struct.blink::Worklist<const void *, 16, 4>::PrivateSegmentHolder" = type { %"class.blink::Worklist<const void *, 16, 4>::Segment"*, %"class.blink::Worklist<const void *, 16, 4>::Segment"*, [64 x i8] }
%"class.blink::Worklist<const void *, 16, 4>::Segment" = type { %"class.blink::Worklist<const void *, 16, 4>::Segment"*, i64, [16 x i8*] }
%"class.blink::Worklist<const void *, 16, 4>::GlobalPool" = type { %"class.base::Lock", %"class.blink::Worklist<const void *, 16, 4>::Segment"*, %"struct.std::__1::atomic" }
%"class.std::__1::unique_ptr.51" = type { %"class.std::__1::__compressed_pair.52" }
%"class.std::__1::__compressed_pair.52" = type { %"struct.std::__1::__compressed_pair_elem.53" }
%"struct.std::__1::__compressed_pair_elem.53" = type { %"class.blink::Worklist.54"* }
%"class.blink::Worklist.54" = type { [4 x %"struct.blink::Worklist<blink::CustomCallbackItem, 64, 4>::PrivateSegmentHolder"], %"class.blink::Worklist<blink::CustomCallbackItem, 64, 4>::GlobalPool" }
%"struct.blink::Worklist<blink::CustomCallbackItem, 64, 4>::PrivateSegmentHolder" = type { %"class.blink::Worklist<blink::CustomCallbackItem, 64, 4>::Segment"*, %"class.blink::Worklist<blink::CustomCallbackItem, 64, 4>::Segment"*, [64 x i8] }
%"class.blink::Worklist<blink::CustomCallbackItem, 64, 4>::Segment" = type opaque
%"class.blink::Worklist<blink::CustomCallbackItem, 64, 4>::GlobalPool" = type { %"class.base::Lock", %"class.blink::Worklist<blink::CustomCallbackItem, 64, 4>::Segment"*, %"struct.std::__1::atomic" }
%"class.std::__1::unique_ptr.58" = type { %"class.std::__1::__compressed_pair.59" }
%"class.std::__1::__compressed_pair.59" = type { %"struct.std::__1::__compressed_pair_elem.60" }
%"struct.std::__1::__compressed_pair_elem.60" = type { %"class.blink::Worklist.61"* }
%"class.blink::Worklist.61" = type { [4 x %"struct.blink::Worklist<const void *const *, 256, 4>::PrivateSegmentHolder"], %"class.blink::Worklist<const void *const *, 256, 4>::GlobalPool" }
%"struct.blink::Worklist<const void *const *, 256, 4>::PrivateSegmentHolder" = type { %"class.blink::Worklist<const void *const *, 256, 4>::Segment"*, %"class.blink::Worklist<const void *const *, 256, 4>::Segment"*, [64 x i8] }
%"class.blink::Worklist<const void *const *, 256, 4>::Segment" = type opaque
%"class.blink::Worklist<const void *const *, 256, 4>::GlobalPool" = type { %"class.base::Lock", %"class.blink::Worklist<const void *const *, 256, 4>::Segment"*, %"struct.std::__1::atomic" }
%"class.std::__1::unique_ptr.65" = type { %"class.std::__1::__compressed_pair.66" }
%"class.std::__1::__compressed_pair.66" = type { %"struct.std::__1::__compressed_pair_elem.67" }
%"struct.std::__1::__compressed_pair_elem.67" = type { %"class.blink::Worklist.68"* }
%"class.blink::Worklist.68" = type { [4 x %"struct.blink::Worklist<blink::EphemeronPairItem, 64, 4>::PrivateSegmentHolder"], %"class.blink::Worklist<blink::EphemeronPairItem, 64, 4>::GlobalPool" }
%"struct.blink::Worklist<blink::EphemeronPairItem, 64, 4>::PrivateSegmentHolder" = type { %"class.blink::Worklist<blink::EphemeronPairItem, 64, 4>::Segment"*, %"class.blink::Worklist<blink::EphemeronPairItem, 64, 4>::Segment"*, [64 x i8] }
%"class.blink::Worklist<blink::EphemeronPairItem, 64, 4>::Segment" = type opaque
%"class.blink::Worklist<blink::EphemeronPairItem, 64, 4>::GlobalPool" = type { %"class.base::Lock", %"class.blink::Worklist<blink::EphemeronPairItem, 64, 4>::Segment"*, %"struct.std::__1::atomic" }
%"class.std::__1::unique_ptr.72" = type { %"class.std::__1::__compressed_pair.73" }
%"class.std::__1::__compressed_pair.73" = type { %"struct.std::__1::__compressed_pair_elem.74" }
%"struct.std::__1::__compressed_pair_elem.74" = type { %"class.blink::Worklist.75"* }
%"class.blink::Worklist.75" = type { [4 x %"struct.blink::Worklist<const blink::TraceWrapperV8Reference<v8::Value> *, 16, 4>::PrivateSegmentHolder"], %"class.blink::Worklist<const blink::TraceWrapperV8Reference<v8::Value> *, 16, 4>::GlobalPool" }
%"struct.blink::Worklist<const blink::TraceWrapperV8Reference<v8::Value> *, 16, 4>::PrivateSegmentHolder" = type { %"class.blink::Worklist<const blink::TraceWrapperV8Reference<v8::Value> *, 16, 4>::Segment"*, %"class.blink::Worklist<const blink::TraceWrapperV8Reference<v8::Value> *, 16, 4>::Segment"*, [64 x i8] }
%"class.blink::Worklist<const blink::TraceWrapperV8Reference<v8::Value> *, 16, 4>::Segment" = type opaque
%"class.blink::Worklist<const blink::TraceWrapperV8Reference<v8::Value> *, 16, 4>::GlobalPool" = type { %"class.base::Lock", %"class.blink::Worklist<const blink::TraceWrapperV8Reference<v8::Value> *, 16, 4>::Segment"*, %"struct.std::__1::atomic" }
%"class.std::__1::unique_ptr.79" = type { %"class.std::__1::__compressed_pair.80" }
%"class.std::__1::__compressed_pair.80" = type { %"struct.std::__1::__compressed_pair_elem.81" }
%"struct.std::__1::__compressed_pair_elem.81" = type { %"class.blink::Worklist.82"* }
%"class.blink::Worklist.82" = type { [4 x %"struct.blink::Worklist<blink::NotSafeToConcurrentlyTraceItem, 64, 4>::PrivateSegmentHolder"], %"class.blink::Worklist<blink::NotSafeToConcurrentlyTraceItem, 64, 4>::GlobalPool" }
%"struct.blink::Worklist<blink::NotSafeToConcurrentlyTraceItem, 64, 4>::PrivateSegmentHolder" = type { %"class.blink::Worklist<blink::NotSafeToConcurrentlyTraceItem, 64, 4>::Segment"*, %"class.blink::Worklist<blink::NotSafeToConcurrentlyTraceItem, 64, 4>::Segment"*, [64 x i8] }
%"class.blink::Worklist<blink::NotSafeToConcurrentlyTraceItem, 64, 4>::Segment" = type { %"class.blink::Worklist<blink::NotSafeToConcurrentlyTraceItem, 64, 4>::Segment"*, i64, [64 x %"struct.blink::NotSafeToConcurrentlyTraceItem"] }
%"struct.blink::NotSafeToConcurrentlyTraceItem" = type { %"struct.blink::TraceDescriptor", i64 }
%"class.blink::Worklist<blink::NotSafeToConcurrentlyTraceItem, 64, 4>::GlobalPool" = type { %"class.base::Lock", %"class.blink::Worklist<blink::NotSafeToConcurrentlyTraceItem, 64, 4>::Segment"*, %"struct.std::__1::atomic" }
%"class.std::__1::unique_ptr.86" = type { %"class.std::__1::__compressed_pair.87" }
%"class.std::__1::__compressed_pair.87" = type { %"struct.std::__1::__compressed_pair_elem.88" }
%"struct.std::__1::__compressed_pair_elem.88" = type { %"class.blink::WeakContainersWorklist"* }
%"class.blink::WeakContainersWorklist" = type { %"class.WTF::Mutex", %"class.std::__1::unordered_set" }
%"class.std::__1::unordered_set" = type { %"class.std::__1::__hash_table" }
%"class.std::__1::__hash_table" = type <{ %"class.std::__1::unique_ptr.89", %"class.std::__1::__compressed_pair.96", %"class.std::__1::__compressed_pair.101", %"class.std::__1::__compressed_pair.103", [4 x i8] }>
%"class.std::__1::unique_ptr.89" = type { %"class.std::__1::__compressed_pair.90" }
%"class.std::__1::__compressed_pair.90" = type { %"struct.std::__1::__compressed_pair_elem.91", %"struct.std::__1::__compressed_pair_elem.92" }
%"struct.std::__1::__compressed_pair_elem.91" = type { %"struct.std::__1::__hash_node_base"** }
%"struct.std::__1::__hash_node_base" = type { %"struct.std::__1::__hash_node_base"* }
%"struct.std::__1::__compressed_pair_elem.92" = type { %"class.std::__1::__bucket_list_deallocator" }
%"class.std::__1::__bucket_list_deallocator" = type { %"class.std::__1::__compressed_pair.93" }
%"class.std::__1::__compressed_pair.93" = type { %"struct.std::__1::__compressed_pair_elem.94" }
%"struct.std::__1::__compressed_pair_elem.94" = type { i64 }
%"class.std::__1::__compressed_pair.96" = type { %"struct.std::__1::__compressed_pair_elem.97" }
%"struct.std::__1::__compressed_pair_elem.97" = type { %"struct.std::__1::__hash_node_base" }
%"class.std::__1::__compressed_pair.101" = type { %"struct.std::__1::__compressed_pair_elem.94" }
%"class.std::__1::__compressed_pair.103" = type { %"struct.std::__1::__compressed_pair_elem.104" }
%"struct.std::__1::__compressed_pair_elem.104" = type { float }
%"class.std::__1::unique_ptr.109" = type { %"class.std::__1::__compressed_pair.110" }
%"class.std::__1::__compressed_pair.110" = type { %"struct.std::__1::__compressed_pair_elem.111" }
%"struct.std::__1::__compressed_pair_elem.111" = type { %"class.blink::HeapCompact"* }
%"class.blink::HeapCompact" = type <{ %"class.blink::ThreadHeap"*, %"class.std::__1::unique_ptr.112", i8, [7 x i8], i64, i64, i32, [4 x i8], i64, i8, [7 x i8] }>
%"class.std::__1::unique_ptr.112" = type { %"class.std::__1::__compressed_pair.113" }
%"class.std::__1::__compressed_pair.113" = type { %"struct.std::__1::__compressed_pair_elem.114" }
%"struct.std::__1::__compressed_pair_elem.114" = type { %"class.blink::HeapCompact::MovableObjectFixups"* }
%"class.blink::HeapCompact::MovableObjectFixups" = type opaque
%"struct.blink::ThreadHeap::LastAllocatedRegion" = type { i8*, i64 }
%"class.blink::BaseArena" = type <{ i32 (...)**, %"class.blink::PageStackThreadSafe", %"class.blink::PageStackThreadSafe", %"class.blink::PageStackThreadSafe", %"class.blink::PageStackThreadSafe", %"class.blink::ThreadState"*, i32, [4 x i8] }>
%"class.blink::PageStackThreadSafe" = type { %"class.blink::PageStack", %"class.WTF::Mutex" }
%"class.blink::PageStack" = type { %"class.WTF::Vector.121" }
%"class.WTF::Vector.121" = type { %"class.WTF::VectorBuffer.122" }
%"class.WTF::VectorBuffer.122" = type { %"class.WTF::VectorBufferBase.123" }
%"class.WTF::VectorBufferBase.123" = type { %"class.blink::BasePage"**, i32, i32 }
%"class.blink::BasePage" = type <{ i32 (...)**, %"class.blink::PageMemory"*, %"class.blink::BaseArena"*, %"class.blink::ThreadState"*, i64, i8, i8, i8, [5 x i8] }>
%"class.blink::PageMemory" = type opaque
%"class.std::__1::unique_ptr.129" = type { %"class.std::__1::__compressed_pair.130" }
%"class.std::__1::__compressed_pair.130" = type { %"struct.std::__1::__compressed_pair_elem.131" }
%"struct.std::__1::__compressed_pair_elem.131" = type { %"class.blink::PersistentRegion"* }
%"class.blink::PersistentRegion" = type { %"class.blink::PersistentRegionBase" }
%"class.blink::PersistentRegionBase" = type { %"class.blink::PersistentNode"*, %"struct.blink::PersistentNodeSlots"* }
%"class.blink::PersistentNode" = type { i8*, void (%"class.blink::Visitor"*, i8*)* }
%"struct.blink::PersistentNodeSlots" = type { %"struct.blink::PersistentNodeSlots"*, [256 x %"class.blink::PersistentNode"] }
%"class.WTF::Deque" = type { %"class.WTF::Deque<std::__1::pair<void *, bool (*)(const blink::LivenessBroker &, void *)>, 0, WTF::PartitionAllocator>::BackingBuffer", i32, i32 }
%"class.WTF::Deque<std::__1::pair<void *, bool (*)(const blink::LivenessBroker &, void *)>, 0, WTF::PartitionAllocator>::BackingBuffer" = type { %"class.WTF::VectorBuffer.137" }
%"class.WTF::VectorBuffer.137" = type { %"class.WTF::VectorBufferBase.138" }
%"class.WTF::VectorBufferBase.138" = type { %"struct.std::__1::pair"*, i32, i32 }
%"struct.std::__1::pair" = type { i8*, i1 (%"class.blink::LivenessBroker"*, i8*)* }
%"class.blink::LivenessBroker" = type { i8 }
%"class.v8::Isolate" = type { i8 }
%"class.v8::EmbedderGraph" = type opaque
%"class.std::__1::unique_ptr.139" = type { %"class.std::__1::__compressed_pair.140" }
%"class.std::__1::__compressed_pair.140" = type { %"struct.std::__1::__compressed_pair_elem.141" }
%"struct.std::__1::__compressed_pair_elem.141" = type { %"class.blink::UnifiedHeapController"* }
%"class.blink::UnifiedHeapController" = type opaque
%"class.std::__1::unique_ptr.145" = type { %"class.std::__1::__compressed_pair.146" }
%"class.std::__1::__compressed_pair.146" = type { %"struct.std::__1::__compressed_pair_elem.147" }
%"struct.std::__1::__compressed_pair_elem.147" = type { %"class.v8::EmbedderRootsHandler"* }
%"class.v8::EmbedderRootsHandler" = type { i32 (...)** }
%"struct.blink::ThreadState::GCData" = type { i32, i32, i32, i32, %"class.std::__1::unique_ptr.151" }
%"class.std::__1::unique_ptr.151" = type { %"class.std::__1::__compressed_pair.152" }
%"class.std::__1::__compressed_pair.152" = type { %"struct.std::__1::__compressed_pair_elem.153" }
%"struct.std::__1::__compressed_pair_elem.153" = type { %"class.blink::MarkingVisitor"* }
%"class.blink::MarkingVisitor" = type { %"class.blink::MarkingVisitorBase", %"class.blink::MarkingVisitor::RecentlyRetracedWeakContainers" }
%"class.blink::MarkingVisitorBase" = type { %"class.blink::Visitor", %"class.blink::Worklist<blink::TraceDescriptor, 512, 4>::View", %"class.blink::Worklist<blink::HeapObjectHeader *, 64, 4>::View", %"class.blink::Worklist<const void *, 16, 4>::View", %"class.blink::Worklist<blink::CustomCallbackItem, 64, 4>::View", %"class.blink::Worklist<const void *const *, 256, 4>::View", %"class.blink::Worklist<blink::EphemeronPairItem, 64, 4>::View", %"class.blink::Worklist<blink::EphemeronPairItem, 64, 4>::View", %"class.blink::WeakContainersWorklist"*, i64, i32, i32 }
%"class.blink::Worklist<blink::TraceDescriptor, 512, 4>::View" = type <{ %"class.blink::Worklist"*, i32, [4 x i8] }>
%"class.blink::Worklist<blink::HeapObjectHeader *, 64, 4>::View" = type <{ %"class.blink::Worklist.40"*, i32, [4 x i8] }>
%"class.blink::Worklist<const void *, 16, 4>::View" = type <{ %"class.blink::Worklist.47"*, i32, [4 x i8] }>
%"class.blink::Worklist<blink::CustomCallbackItem, 64, 4>::View" = type <{ %"class.blink::Worklist.54"*, i32, [4 x i8] }>
%"class.blink::Worklist<const void *const *, 256, 4>::View" = type <{ %"class.blink::Worklist.61"*, i32, [4 x i8] }>
%"class.blink::Worklist<blink::EphemeronPairItem, 64, 4>::View" = type <{ %"class.blink::Worklist.68"*, i32, [4 x i8] }>
%"class.blink::MarkingVisitor::RecentlyRetracedWeakContainers" = type { %"class.std::__1::vector", i64 }
%"class.std::__1::vector" = type { %"class.std::__1::__vector_base" }
%"class.std::__1::__vector_base" = type { %"class.blink::HeapObjectHeader"**, %"class.blink::HeapObjectHeader"**, %"class.std::__1::__compressed_pair.173" }
%"class.blink::HeapObjectHeader" = type { i32, i16, i16 }
%"class.std::__1::__compressed_pair.173" = type { %"struct.std::__1::__compressed_pair_elem.174" }
%"struct.std::__1::__compressed_pair_elem.174" = type { %"class.blink::HeapObjectHeader"** }
%"class.std::__1::unique_ptr.157" = type { %"class.std::__1::__compressed_pair.158" }
%"class.std::__1::__compressed_pair.158" = type { %"struct.std::__1::__compressed_pair_elem.159" }
%"struct.std::__1::__compressed_pair_elem.159" = type { %"class.blink::ThreadState::IncrementalMarkingScheduler"* }
%"class.blink::ThreadState::IncrementalMarkingScheduler" = type opaque
%"class.std::__1::unique_ptr.163" = type { %"class.std::__1::__compressed_pair.164" }
%"class.std::__1::__compressed_pair.164" = type { %"struct.std::__1::__compressed_pair_elem.165" }
%"struct.std::__1::__compressed_pair_elem.165" = type { %"class.blink::MarkingSchedulingOracle"* }
%"class.blink::MarkingSchedulingOracle" = type opaque
%"class.base::JobHandle" = type { %class.scoped_refptr }
%class.scoped_refptr = type { %"class.base::internal::JobTaskSource"* }
%"class.base::internal::JobTaskSource" = type opaque
%"struct.std::__1::atomic.169" = type { %"struct.std::__1::__atomic_base.170" }
%"struct.std::__1::__atomic_base.170" = type { %"struct.std::__1::__cxx_atomic_impl.171" }
%"struct.std::__1::__cxx_atomic_impl.171" = type { %"struct.std::__1::__cxx_atomic_base_impl.172" }
%"struct.std::__1::__cxx_atomic_base_impl.172" = type { i8 }
%"class.base::TimeTicks" = type { %"class.base::time_internal::TimeBase" }
%"class.base::time_internal::TimeBase" = type { i64 }
%"class.WTF::Mutex" = type { %"class.WTF::MutexBase" }
%"class.WTF::MutexBase" = type { %"struct.WTF::PlatformMutex" }
%"struct.WTF::PlatformMutex" = type { %union.pthread_mutex_t }
%"class.blink::MultipartParser::Matcher" = type { i8*, i64, i64 }
%"class.blink::MultipartParser" = type <{ %"class.blink::MultipartParser::Matcher", %"class.WTF::Vector", %"class.blink::Member", %"class.WTF::Vector", i32, [4 x i8] }>
%"class.blink::Member" = type { %"class.blink::MemberBase" }
%"class.blink::MemberBase" = type { %"class.blink::MultipartParser::Client"* }
%"class.WTF::Vector" = type { %"class.WTF::VectorBuffer" }
%"class.WTF::VectorBuffer" = type { %"class.WTF::VectorBufferBase" }
%"class.WTF::VectorBufferBase" = type { i8*, i32, i32 }
%"class.blink::MultipartParser::Client" = type { %"class.blink::GarbageCollectedMixin" }
%"class.blink::GarbageCollectedMixin" = type { i32 (...)** }
%"class.blink::HTTPHeaderMap" = type { %"class.WTF::HashMap" }
%"class.WTF::HashMap" = type { %"class.WTF::HashTable" }
%"class.WTF::HashTable" = type <{ %"struct.WTF::KeyValuePair"*, i32, i32, i32, [4 x i8] }>
%"struct.WTF::KeyValuePair" = type { %"class.WTF::AtomicString", %"class.WTF::AtomicString" }
%"class.WTF::AtomicString" = type { %"class.WTF::String" }
%"class.WTF::String" = type { %class.scoped_refptr.178 }
%class.scoped_refptr.178 = type { %"class.WTF::StringImpl"* }
%"class.WTF::StringImpl" = type { i32, i32, %"struct.std::__1::atomic.179" }
%"struct.std::__1::atomic.179" = type { %"struct.std::__1::__atomic_base.180" }
%"struct.std::__1::__atomic_base.180" = type { %"struct.std::__1::__atomic_base.181" }
%"struct.std::__1::__atomic_base.181" = type { %"struct.std::__1::__cxx_atomic_impl.182" }
%"struct.std::__1::__cxx_atomic_impl.182" = type { %"struct.std::__1::__cxx_atomic_base_impl.183" }
%"struct.std::__1::__cxx_atomic_base_impl.183" = type { i32 }
%"class.logging::CheckOpResult" = type { i8* }
%"class.logging::CheckError" = type { %"class.logging::LogMessage"* }
%"class.logging::LogMessage" = type { i32 (...)**, i32, %"class.std::__1::basic_ostringstream", i64, i8*, i32, %"class.base::ScopedClearLastErrorBase" }
%"class.std::__1::basic_ostringstream" = type { %"class.std::__1::basic_ostream.base", %"class.std::__1::basic_stringbuf", %"class.std::__1::basic_ios.base" }
%"class.std::__1::basic_ostream.base" = type { i32 (...)** }
%"class.std::__1::basic_stringbuf" = type <{ %"class.std::__1::basic_streambuf", %"class.std::__1::basic_string", i8*, i32, [4 x i8] }>
%"class.std::__1::basic_streambuf" = type { i32 (...)**, %"class.std::__1::locale", i8*, i8*, i8*, i8*, i8*, i8* }
%"class.std::__1::locale" = type { %"class.std::__1::locale::__imp"* }
%"class.std::__1::locale::__imp" = type opaque
%"class.std::__1::basic_string" = type { %"class.std::__1::__compressed_pair.188" }
%"class.std::__1::__compressed_pair.188" = type { %"struct.std::__1::__compressed_pair_elem.189" }
%"struct.std::__1::__compressed_pair_elem.189" = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" = type { %union.anon }
%union.anon = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" = type { i8*, i64, i64 }
%"class.std::__1::basic_ios.base" = type <{ %"class.std::__1::ios_base", %"class.std::__1::basic_ostream"*, i32 }>
%"class.std::__1::ios_base" = type { i32 (...)**, i32, i64, i64, i32, i32, i8*, i8*, void (i32, %"class.std::__1::ios_base"*, i32)**, i32*, i64, i64, i64*, i64, i64, i8**, i64, i64 }
%"class.std::__1::basic_ostream" = type { i32 (...)**, %"class.std::__1::basic_ios.base" }
%"class.base::ScopedClearLastErrorBase" = type { i32 }
%"class.blink::NormalPage" = type { %"class.blink::BasePage.base", %"class.blink::NormalPage::CardTable", %"class.blink::PlatformAwareObjectStartBitmap", %"class.WTF::Vector.199", %"class.blink::FreeList", %"class.WTF::Vector.204" }
%"class.blink::BasePage.base" = type <{ i32 (...)**, %"class.blink::PageMemory"*, %"class.blink::BaseArena"*, %"class.blink::ThreadState"*, i64, i8, i8, i8 }>
%"class.blink::NormalPage::CardTable" = type { %"struct.std::__1::array" }
%"struct.std::__1::array" = type { [256 x i8] }
%"class.blink::PlatformAwareObjectStartBitmap" = type { %"class.blink::ObjectStartBitmap" }
%"class.blink::ObjectStartBitmap" = type { i8*, [2048 x i8] }
%"class.WTF::Vector.199" = type { %"class.WTF::VectorBuffer.200" }
%"class.WTF::VectorBuffer.200" = type { %"class.WTF::VectorBufferBase.201" }
%"class.WTF::VectorBufferBase.201" = type { %"struct.blink::NormalPage::ToBeFinalizedObject"*, i32, i32 }
%"struct.blink::NormalPage::ToBeFinalizedObject" = type { %"class.blink::HeapObjectHeader"* }
%"class.blink::FreeList" = type <{ [17 x %"class.blink::FreeListEntry"*], [17 x %"class.blink::FreeListEntry"*], i32, [4 x i8] }>
%"class.blink::FreeListEntry" = type { %"class.blink::HeapObjectHeader", %"class.blink::FreeListEntry"* }
%"class.WTF::Vector.204" = type { %"class.WTF::VectorBuffer.205" }
%"class.WTF::VectorBuffer.205" = type { %"class.WTF::VectorBufferBase.206" }
%"class.WTF::VectorBufferBase.206" = type { %"struct.blink::NormalPage::FutureFreelistEntry"*, i32, i32 }
%"struct.blink::NormalPage::FutureFreelistEntry" = type { i8*, i64 }

$_ZN3WTF6VectorIcLj0ENS_18PartitionAllocatorEE6AppendIcEEvPKT_j = comdat any

$_ZN3WTF6VectorIcLj0ENS_18PartitionAllocatorEE6insertIcEEvjPKT_j = comdat any

$_ZN3WTF18PartitionAllocator13QuantizedSizeIcEEmm = comdat any

@.str = private unnamed_addr constant [5 x i8] c"\0D\0A--\00", align 1
@_ZN5blink12_GLOBAL__N_121kCloseDelimiterSuffixE = internal constant [5 x i8] c"--\0D\0A\00", align 1
@_ZN5blink12_GLOBAL__N_116kDelimiterSuffixE = internal constant [3 x i8] c"\0D\0A\00", align 1
@.str.1 = private unnamed_addr constant [19 x i8] c"position <= size()\00", align 1
@.str.2 = private unnamed_addr constant [55 x i8] c"../../third_party/blink/renderer/platform/wtf/vector.h\00", align 1
@.str.3 = private unnamed_addr constant [18 x i8] c"new_size >= size_\00", align 1
@.str.5 = private unnamed_addr constant [44 x i8] c"count <= MaxElementCountInBackingStore<T>()\00", align 1
@.str.6 = private unnamed_addr constant [78 x i8] c"../../third_party/blink/renderer/platform/wtf/allocator/partition_allocator.h\00", align 1
@_ZN5blink11GCInfoTable13global_table_E = external local_unnamed_addr global %"class.blink::GCInfoTable"*, align 8

@_ZN5blink15MultipartParser7MatcherC1Ev = hidden unnamed_addr alias void (%"class.blink::MultipartParser::Matcher"*), void (%"class.blink::MultipartParser::Matcher"*)* @_ZN5blink15MultipartParser7MatcherC2Ev
@_ZN5blink15MultipartParser7MatcherC1EPKcmm = hidden unnamed_addr alias void (%"class.blink::MultipartParser::Matcher"*, i8*, i64, i64), void (%"class.blink::MultipartParser::Matcher"*, i8*, i64, i64)* @_ZN5blink15MultipartParser7MatcherC2EPKcmm
@_ZN5blink15MultipartParserC1EN3WTF6VectorIcLj0ENS1_18PartitionAllocatorEEEPNS0_6ClientE = hidden unnamed_addr alias void (%"class.blink::MultipartParser"*, %"class.WTF::Vector"*, %"class.blink::MultipartParser::Client"*), void (%"class.blink::MultipartParser"*, %"class.WTF::Vector"*, %"class.blink::MultipartParser::Client"*)* @_ZN5blink15MultipartParserC2EN3WTF6VectorIcLj0ENS1_18PartitionAllocatorEEEPNS0_6ClientE

; Function Attrs: nofree norecurse nounwind ssp uwtable writeonly
define hidden void @_ZN5blink15MultipartParser7MatcherC2Ev(%"class.blink::MultipartParser::Matcher"* nocapture) unnamed_addr #0 align 2 {
  %2 = bitcast %"class.blink::MultipartParser::Matcher"* %0 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %2, i8 0, i64 24, i1 false)
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable writeonly
define hidden void @_ZN5blink15MultipartParser7MatcherC2EPKcmm(%"class.blink::MultipartParser::Matcher"* nocapture, i8*, i64, i64) unnamed_addr #0 align 2 {
  %5 = getelementptr inbounds %"class.blink::MultipartParser::Matcher", %"class.blink::MultipartParser::Matcher"* %0, i64 0, i32 0
  store i8* %1, i8** %5, align 8
  %6 = getelementptr inbounds %"class.blink::MultipartParser::Matcher", %"class.blink::MultipartParser::Matcher"* %0, i64 0, i32 1
  store i64 %2, i64* %6, align 8
  %7 = getelementptr inbounds %"class.blink::MultipartParser::Matcher", %"class.blink::MultipartParser::Matcher"* %0, i64 0, i32 2
  store i64 %3, i64* %7, align 8
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden zeroext i1 @_ZN5blink15MultipartParser7Matcher5MatchEPKcS3_(%"class.blink::MultipartParser::Matcher"* nocapture, i8* readonly, i8* readnone) local_unnamed_addr #1 align 2 {
  %4 = icmp ult i8* %1, %2
  br i1 %4, label %5, label %21

5:                                                ; preds = %3
  %6 = getelementptr inbounds %"class.blink::MultipartParser::Matcher", %"class.blink::MultipartParser::Matcher"* %0, i64 0, i32 0
  %7 = getelementptr inbounds %"class.blink::MultipartParser::Matcher", %"class.blink::MultipartParser::Matcher"* %0, i64 0, i32 1
  %8 = load i8*, i8** %6, align 8
  %9 = load i64, i64* %7, align 8
  br label %10

10:                                               ; preds = %17, %5
  %11 = phi i64 [ %9, %5 ], [ %19, %17 ]
  %12 = phi i8* [ %1, %5 ], [ %18, %17 ]
  %13 = load i8, i8* %12, align 1
  %14 = getelementptr inbounds i8, i8* %8, i64 %11
  %15 = load i8, i8* %14, align 1
  %16 = icmp eq i8 %15, %13
  br i1 %16, label %17, label %21

17:                                               ; preds = %10
  %18 = getelementptr inbounds i8, i8* %12, i64 1
  %19 = add i64 %11, 1
  store i64 %19, i64* %7, align 8
  %20 = icmp eq i8* %18, %2
  br i1 %20, label %21, label %10

21:                                               ; preds = %10, %17, %3
  %22 = phi i1 [ true, %3 ], [ false, %10 ], [ true, %17 ]
  ret i1 %22
}

; Function Attrs: nofree norecurse nounwind ssp uwtable writeonly
define hidden void @_ZN5blink15MultipartParser7Matcher18SetNumMatchedBytesEm(%"class.blink::MultipartParser::Matcher"* nocapture, i64) local_unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"class.blink::MultipartParser::Matcher", %"class.blink::MultipartParser::Matcher"* %0, i64 0, i32 1
  store i64 %1, i64* %3, align 8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5blink15MultipartParserC2EN3WTF6VectorIcLj0ENS1_18PartitionAllocatorEEEPNS0_6ClientE(%"class.blink::MultipartParser"*, %"class.WTF::Vector"* nocapture, %"class.blink::MultipartParser::Client"*) unnamed_addr #2 align 2 {
  %4 = getelementptr inbounds %"class.blink::MultipartParser", %"class.blink::MultipartParser"* %0, i64 0, i32 2, i32 0, i32 0
  %5 = bitcast %"class.blink::MultipartParser"* %0 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %5, i8 0, i64 40, i1 false)
  store %"class.blink::MultipartParser::Client"* %2, %"class.blink::MultipartParser::Client"** %4, align 8
  %6 = getelementptr inbounds %"class.blink::MultipartParser", %"class.blink::MultipartParser"* %0, i64 0, i32 3
  %7 = getelementptr inbounds %"class.blink::MultipartParser", %"class.blink::MultipartParser"* %0, i64 0, i32 3, i32 0, i32 0, i32 1
  %8 = getelementptr inbounds %"class.blink::MultipartParser", %"class.blink::MultipartParser"* %0, i64 0, i32 3, i32 0, i32 0, i32 2
  %9 = bitcast %"class.WTF::Vector"* %1 to i64*
  %10 = bitcast %"class.WTF::Vector"* %6 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %10, i8 0, i64 16, i1 false) #7
  %11 = load i64, i64* %9, align 8
  %12 = bitcast %"class.WTF::Vector"* %6 to i64*
  store atomic i64 0, i64* %9 monotonic, align 8
  store atomic i64 %11, i64* %12 monotonic, align 8
  %13 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %1, i64 0, i32 0, i32 0, i32 1
  %14 = load i32, i32* %7, align 4
  %15 = load i32, i32* %13, align 4
  store i32 %15, i32* %7, align 4
  store i32 %14, i32* %13, align 4
  %16 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %1, i64 0, i32 0, i32 0, i32 2
  %17 = load i32, i32* %8, align 4
  %18 = load i32, i32* %16, align 4
  store i32 %18, i32* %8, align 4
  store i32 %17, i32* %16, align 4
  %19 = getelementptr inbounds %"class.blink::MultipartParser", %"class.blink::MultipartParser"* %0, i64 0, i32 4
  store i32 0, i32* %19, align 8
  tail call void @_ZN3WTF6VectorIcLj0ENS_18PartitionAllocatorEE6insertIcEEvjPKT_j(%"class.WTF::Vector"* %6, i32 0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i64 0, i64 0), i32 4) #7
  %20 = load i64, i64* %12, align 8, !noalias !2
  %21 = load i32, i32* %8, align 4, !noalias !2
  %22 = zext i32 %21 to i64
  %23 = bitcast %"class.blink::MultipartParser"* %0 to i64*
  store i64 %20, i64* %23, align 8
  %24 = getelementptr inbounds %"class.blink::MultipartParser", %"class.blink::MultipartParser"* %0, i64 0, i32 0, i32 1
  store i64 2, i64* %24, align 8
  %25 = getelementptr inbounds %"class.blink::MultipartParser", %"class.blink::MultipartParser"* %0, i64 0, i32 0, i32 2
  store i64 %22, i64* %25, align 8
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #3

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @_ZNK5blink15MultipartParser16DelimiterMatcherEm(%"class.blink::MultipartParser::Matcher"* noalias nocapture sret, %"class.blink::MultipartParser"* nocapture readonly, i64) local_unnamed_addr #1 align 2 {
  %4 = getelementptr inbounds %"class.blink::MultipartParser", %"class.blink::MultipartParser"* %1, i64 0, i32 3
  %5 = bitcast %"class.WTF::Vector"* %4 to i64*
  %6 = load i64, i64* %5, align 8
  %7 = getelementptr inbounds %"class.blink::MultipartParser", %"class.blink::MultipartParser"* %1, i64 0, i32 3, i32 0, i32 0, i32 2
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  %10 = bitcast %"class.blink::MultipartParser::Matcher"* %0 to i64*
  store i64 %6, i64* %10, align 8
  %11 = getelementptr inbounds %"class.blink::MultipartParser::Matcher", %"class.blink::MultipartParser::Matcher"* %0, i64 0, i32 1
  store i64 %2, i64* %11, align 8
  %12 = getelementptr inbounds %"class.blink::MultipartParser::Matcher", %"class.blink::MultipartParser::Matcher"* %0, i64 0, i32 2
  store i64 %9, i64* %12, align 8
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #3

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #3

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZN5blink15MultipartParser10AppendDataEPKcm(%"class.blink::MultipartParser"*, i8*, i64) local_unnamed_addr #2 align 2 {
  %4 = alloca i8*, align 8
  %5 = alloca %"class.blink::HTTPHeaderMap", align 8
  store i8* %1, i8** %4, align 8
  %6 = getelementptr inbounds i8, i8* %1, i64 %2
  %7 = icmp sgt i64 %2, 0
  br i1 %7, label %8, label %204

8:                                                ; preds = %3
  %9 = getelementptr inbounds %"class.blink::MultipartParser", %"class.blink::MultipartParser"* %0, i64 0, i32 4
  %10 = getelementptr inbounds %"class.blink::MultipartParser", %"class.blink::MultipartParser"* %0, i64 0, i32 0, i32 1
  %11 = getelementptr inbounds %"class.blink::MultipartParser", %"class.blink::MultipartParser"* %0, i64 0, i32 0, i32 0
  %12 = getelementptr inbounds %"class.blink::MultipartParser", %"class.blink::MultipartParser"* %0, i64 0, i32 0, i32 2
  %13 = getelementptr inbounds %"class.blink::MultipartParser", %"class.blink::MultipartParser"* %0, i64 0, i32 2, i32 0, i32 0
  %14 = bitcast %"class.blink::HTTPHeaderMap"* %5 to i8*
  %15 = getelementptr inbounds %"class.blink::MultipartParser", %"class.blink::MultipartParser"* %0, i64 0, i32 3
  %16 = bitcast %"class.WTF::Vector"* %15 to i64*
  %17 = getelementptr inbounds %"class.blink::MultipartParser", %"class.blink::MultipartParser"* %0, i64 0, i32 3, i32 0, i32 0, i32 2
  %18 = bitcast %"class.blink::MultipartParser"* %0 to i64*
  %19 = bitcast %"class.blink::HTTPHeaderMap"* %5 to i8*
  %20 = bitcast i64* %10 to <2 x i64>*
  %21 = bitcast i64* %10 to <2 x i64>*
  %22 = bitcast i64* %10 to <2 x i64>*
  br label %23

23:                                               ; preds = %8, %199
  %24 = phi i8* [ %1, %8 ], [ %200, %199 ]
  %25 = load i32, i32* %9, align 8
  switch i32 %25, label %199 [
    i32 0, label %28
    i32 1, label %60
    i32 2, label %87
    i32 3, label %99
    i32 4, label %166
    i32 5, label %26
    i32 6, label %203
    i32 7, label %204
    i32 8, label %204
  ]

26:                                               ; preds = %23
  %27 = load i64, i64* %10, align 8
  br label %171

28:                                               ; preds = %23, %40
  %29 = phi i8* [ %42, %40 ], [ %24, %23 ]
  %30 = icmp ult i8* %29, %6
  br i1 %30, label %33, label %31

31:                                               ; preds = %28
  %32 = load i64, i64* %10, align 8
  br label %45

33:                                               ; preds = %28
  %34 = load i8, i8* %29, align 1
  %35 = load i8*, i8** %11, align 8
  %36 = load i64, i64* %10, align 8
  %37 = getelementptr inbounds i8, i8* %35, i64 %36
  %38 = load i8, i8* %37, align 1
  %39 = icmp eq i8 %38, %34
  br i1 %39, label %40, label %45

40:                                               ; preds = %33
  %41 = add i64 %36, 1
  store i64 %41, i64* %10, align 8
  %42 = getelementptr inbounds i8, i8* %29, i64 1
  store i8* %42, i8** %4, align 8
  %43 = load i64, i64* %12, align 8
  %44 = icmp eq i64 %41, %43
  br i1 %44, label %45, label %28

45:                                               ; preds = %33, %40, %31
  %46 = phi i8* [ %29, %31 ], [ %42, %40 ], [ %29, %33 ]
  %47 = phi i64 [ %32, %31 ], [ %41, %40 ], [ %36, %33 ]
  %48 = load i64, i64* %12, align 8
  %49 = icmp ne i64 %47, %48
  %50 = icmp ult i8* %46, %6
  %51 = and i1 %49, %50
  br i1 %51, label %52, label %55

52:                                               ; preds = %45
  store i64 0, i64* %10, align 8
  call void @_ZN5blink15MultipartParser21ParseDataAndDelimiterEPPKcS2_(%"class.blink::MultipartParser"* %0, i8** nonnull %4, i8* %6)
  %53 = load i64, i64* %10, align 8
  %54 = load i64, i64* %12, align 8
  br label %55

55:                                               ; preds = %45, %52
  %56 = phi i64 [ %48, %45 ], [ %54, %52 ]
  %57 = phi i64 [ %47, %45 ], [ %53, %52 ]
  %58 = icmp eq i64 %57, %56
  br i1 %58, label %59, label %199

59:                                               ; preds = %55
  store i8* getelementptr inbounds ([3 x i8], [3 x i8]* @_ZN5blink12_GLOBAL__N_116kDelimiterSuffixE, i64 0, i64 0), i8** %11, align 8
  store <2 x i64> <i64 0, i64 2>, <2 x i64>* %22, align 8
  store i32 1, i32* %9, align 8
  br label %199

60:                                               ; preds = %23
  %61 = load i64, i64* %10, align 8
  %62 = icmp eq i64 %61, 0
  br i1 %62, label %63, label %69

63:                                               ; preds = %60, %66
  %64 = phi i8* [ %67, %66 ], [ %24, %60 ]
  %65 = load i8, i8* %64, align 1
  switch i8 %65, label %69 [
    i8 9, label %66
    i8 32, label %66
  ]

66:                                               ; preds = %63, %63
  %67 = getelementptr inbounds i8, i8* %64, i64 1
  store i8* %67, i8** %4, align 8
  %68 = icmp eq i8* %67, %6
  br i1 %68, label %69, label %63

69:                                               ; preds = %66, %63, %60
  %70 = phi i8* [ %24, %60 ], [ %6, %66 ], [ %64, %63 ]
  br label %71

71:                                               ; preds = %69, %82
  %72 = phi i64 [ %83, %82 ], [ %61, %69 ]
  %73 = phi i8* [ %76, %82 ], [ %70, %69 ]
  %74 = icmp ult i8* %73, %6
  br i1 %74, label %75, label %198

75:                                               ; preds = %71
  %76 = getelementptr inbounds i8, i8* %73, i64 1
  %77 = load i8, i8* %73, align 1
  %78 = load i8*, i8** %11, align 8
  %79 = getelementptr inbounds i8, i8* %78, i64 %72
  %80 = load i8, i8* %79, align 1
  %81 = icmp eq i8 %80, %77
  br i1 %81, label %82, label %202

82:                                               ; preds = %75
  %83 = add i64 %72, 1
  store i64 %83, i64* %10, align 8
  %84 = load i64, i64* %12, align 8
  %85 = icmp eq i64 %83, %84
  br i1 %85, label %86, label %71

86:                                               ; preds = %82
  store i8* %76, i8** %4, align 8
  store i32 2, i32* %9, align 8
  br label %199

87:                                               ; preds = %23
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %14) #7
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %19, i8 -86, i64 24, i1 false)
  call void @_ZN5blink13HTTPHeaderMapC1Ev(%"class.blink::HTTPHeaderMap"* nonnull %5) #7
  %88 = call zeroext i1 @_ZN5blink15MultipartParser17ParseHeaderFieldsEPPKcS2_PNS_13HTTPHeaderMapE(%"class.blink::MultipartParser"* %0, i8** nonnull %4, i8* %6, %"class.blink::HTTPHeaderMap"* nonnull %5)
  br i1 %88, label %89, label %98

89:                                               ; preds = %87
  %90 = load i64, i64* %16, align 8, !noalias !5
  %91 = load i32, i32* %17, align 4, !noalias !5
  %92 = zext i32 %91 to i64
  store i64 %90, i64* %18, align 8
  store i64 0, i64* %10, align 8
  store i64 %92, i64* %12, align 8
  store i32 3, i32* %9, align 8
  %93 = load %"class.blink::MultipartParser::Client"*, %"class.blink::MultipartParser::Client"** %13, align 8
  %94 = bitcast %"class.blink::MultipartParser::Client"* %93 to void (%"class.blink::MultipartParser::Client"*, %"class.blink::HTTPHeaderMap"*)***
  %95 = load void (%"class.blink::MultipartParser::Client"*, %"class.blink::HTTPHeaderMap"*)**, void (%"class.blink::MultipartParser::Client"*, %"class.blink::HTTPHeaderMap"*)*** %94, align 8
  %96 = getelementptr inbounds void (%"class.blink::MultipartParser::Client"*, %"class.blink::HTTPHeaderMap"*)*, void (%"class.blink::MultipartParser::Client"*, %"class.blink::HTTPHeaderMap"*)** %95, i64 3
  %97 = load void (%"class.blink::MultipartParser::Client"*, %"class.blink::HTTPHeaderMap"*)*, void (%"class.blink::MultipartParser::Client"*, %"class.blink::HTTPHeaderMap"*)** %96, align 8
  call void %97(%"class.blink::MultipartParser::Client"* %93, %"class.blink::HTTPHeaderMap"* nonnull dereferenceable(24) %5) #7
  br label %98

98:                                               ; preds = %89, %87
  call void @_ZN5blink13HTTPHeaderMapD1Ev(%"class.blink::HTTPHeaderMap"* nonnull %5) #7
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %14) #7
  br label %199

99:                                               ; preds = %23
  %100 = load i64, i64* %10, align 8
  br label %101

101:                                              ; preds = %111, %99
  %102 = phi i64 [ %112, %111 ], [ %100, %99 ]
  %103 = phi i8* [ %113, %111 ], [ %24, %99 ]
  %104 = icmp ult i8* %103, %6
  br i1 %104, label %105, label %116

105:                                              ; preds = %101
  %106 = load i8, i8* %103, align 1
  %107 = load i8*, i8** %11, align 8
  %108 = getelementptr inbounds i8, i8* %107, i64 %102
  %109 = load i8, i8* %108, align 1
  %110 = icmp eq i8 %109, %106
  br i1 %110, label %111, label %116

111:                                              ; preds = %105
  %112 = add i64 %102, 1
  store i64 %112, i64* %10, align 8
  %113 = getelementptr inbounds i8, i8* %103, i64 1
  %114 = load i64, i64* %12, align 8
  %115 = icmp eq i64 %112, %114
  br i1 %115, label %116, label %101

116:                                              ; preds = %101, %105, %111
  %117 = phi i64 [ %102, %101 ], [ %102, %105 ], [ %112, %111 ]
  %118 = phi i8* [ %103, %101 ], [ %103, %105 ], [ %113, %111 ]
  store i8* %118, i8** %4, align 8
  %119 = load i64, i64* %12, align 8
  %120 = icmp ne i64 %117, %119
  %121 = icmp ult i8* %118, %6
  %122 = and i1 %120, %121
  br i1 %122, label %123, label %156

123:                                              ; preds = %116
  %124 = icmp uge i64 %117, %100
  %125 = icmp ne i64 %100, 0
  %126 = and i1 %125, %124
  br i1 %126, label %127, label %136

127:                                              ; preds = %123
  %128 = load %"class.blink::MultipartParser::Client"*, %"class.blink::MultipartParser::Client"** %13, align 8
  %129 = load i8*, i8** %11, align 8
  %130 = bitcast %"class.blink::MultipartParser::Client"* %128 to void (%"class.blink::MultipartParser::Client"*, i8*, i64)***
  %131 = load void (%"class.blink::MultipartParser::Client"*, i8*, i64)**, void (%"class.blink::MultipartParser::Client"*, i8*, i64)*** %130, align 8
  %132 = getelementptr inbounds void (%"class.blink::MultipartParser::Client"*, i8*, i64)*, void (%"class.blink::MultipartParser::Client"*, i8*, i64)** %131, i64 4
  %133 = load void (%"class.blink::MultipartParser::Client"*, i8*, i64)*, void (%"class.blink::MultipartParser::Client"*, i8*, i64)** %132, align 8
  call void %133(%"class.blink::MultipartParser::Client"* %128, i8* %129, i64 %117) #7
  %134 = load i32, i32* %9, align 8
  %135 = icmp eq i32 %134, 3
  br i1 %135, label %136, label %199

136:                                              ; preds = %127, %123
  %137 = phi i8* [ %24, %123 ], [ %118, %127 ]
  store i64 0, i64* %10, align 8
  call void @_ZN5blink15MultipartParser21ParseDataAndDelimiterEPPKcS2_(%"class.blink::MultipartParser"* %0, i8** nonnull %4, i8* %6)
  %138 = load i8*, i8** %4, align 8
  %139 = load i64, i64* %10, align 8
  %140 = sub i64 0, %139
  %141 = getelementptr inbounds i8, i8* %138, i64 %140
  %142 = icmp ult i8* %137, %141
  br i1 %142, label %143, label %156

143:                                              ; preds = %136
  %144 = load %"class.blink::MultipartParser::Client"*, %"class.blink::MultipartParser::Client"** %13, align 8
  %145 = ptrtoint i8* %141 to i64
  %146 = ptrtoint i8* %137 to i64
  %147 = sub i64 %145, %146
  %148 = bitcast %"class.blink::MultipartParser::Client"* %144 to void (%"class.blink::MultipartParser::Client"*, i8*, i64)***
  %149 = load void (%"class.blink::MultipartParser::Client"*, i8*, i64)**, void (%"class.blink::MultipartParser::Client"*, i8*, i64)*** %148, align 8
  %150 = getelementptr inbounds void (%"class.blink::MultipartParser::Client"*, i8*, i64)*, void (%"class.blink::MultipartParser::Client"*, i8*, i64)** %149, i64 4
  %151 = load void (%"class.blink::MultipartParser::Client"*, i8*, i64)*, void (%"class.blink::MultipartParser::Client"*, i8*, i64)** %150, align 8
  call void %151(%"class.blink::MultipartParser::Client"* %144, i8* %137, i64 %147) #7
  %152 = load i32, i32* %9, align 8
  %153 = icmp eq i32 %152, 3
  br i1 %153, label %154, label %199

154:                                              ; preds = %143
  %155 = load i64, i64* %10, align 8
  br label %156

156:                                              ; preds = %154, %136, %116
  %157 = phi i64 [ %155, %154 ], [ %139, %136 ], [ %117, %116 ]
  %158 = load i64, i64* %12, align 8
  %159 = icmp eq i64 %157, %158
  br i1 %159, label %160, label %199

160:                                              ; preds = %156
  store i32 4, i32* %9, align 8
  %161 = load %"class.blink::MultipartParser::Client"*, %"class.blink::MultipartParser::Client"** %13, align 8
  %162 = bitcast %"class.blink::MultipartParser::Client"* %161 to void (%"class.blink::MultipartParser::Client"*)***
  %163 = load void (%"class.blink::MultipartParser::Client"*)**, void (%"class.blink::MultipartParser::Client"*)*** %162, align 8
  %164 = getelementptr inbounds void (%"class.blink::MultipartParser::Client"*)*, void (%"class.blink::MultipartParser::Client"*)** %163, i64 5
  %165 = load void (%"class.blink::MultipartParser::Client"*)*, void (%"class.blink::MultipartParser::Client"*)** %164, align 8
  call void %165(%"class.blink::MultipartParser::Client"* %161) #7
  br label %199

166:                                              ; preds = %23
  %167 = load i8, i8* %24, align 1
  %168 = icmp eq i8 %167, 45
  br i1 %168, label %169, label %170

169:                                              ; preds = %166
  store i8* getelementptr inbounds ([5 x i8], [5 x i8]* @_ZN5blink12_GLOBAL__N_121kCloseDelimiterSuffixE, i64 0, i64 0), i8** %11, align 8
  store <2 x i64> <i64 0, i64 4>, <2 x i64>* %21, align 8
  store i32 5, i32* %9, align 8
  br label %199

170:                                              ; preds = %166
  store i8* getelementptr inbounds ([3 x i8], [3 x i8]* @_ZN5blink12_GLOBAL__N_116kDelimiterSuffixE, i64 0, i64 0), i8** %11, align 8
  store <2 x i64> <i64 0, i64 2>, <2 x i64>* %20, align 8
  store i32 1, i32* %9, align 8
  br label %199

171:                                              ; preds = %26, %193
  %172 = phi i8* [ %24, %26 ], [ %187, %193 ]
  %173 = phi i64 [ %27, %26 ], [ %194, %193 ]
  %174 = icmp eq i64 %173, 2
  %175 = icmp ult i8* %172, %6
  %176 = and i1 %174, %175
  br i1 %176, label %177, label %183

177:                                              ; preds = %171, %180
  %178 = phi i8* [ %181, %180 ], [ %172, %171 ]
  %179 = load i8, i8* %178, align 1
  switch i8 %179, label %183 [
    i8 9, label %180
    i8 32, label %180
  ]

180:                                              ; preds = %177, %177
  %181 = getelementptr inbounds i8, i8* %178, i64 1
  store i8* %181, i8** %4, align 8
  %182 = icmp eq i8* %181, %6
  br i1 %182, label %199, label %177

183:                                              ; preds = %177, %171
  %184 = phi i8* [ %172, %171 ], [ %178, %177 ]
  %185 = icmp ult i8* %184, %6
  br i1 %185, label %186, label %199

186:                                              ; preds = %183
  %187 = getelementptr inbounds i8, i8* %184, i64 1
  store i8* %187, i8** %4, align 8
  %188 = load i8, i8* %184, align 1
  %189 = load i8*, i8** %11, align 8
  %190 = getelementptr inbounds i8, i8* %189, i64 %173
  %191 = load i8, i8* %190, align 1
  %192 = icmp eq i8 %191, %188
  br i1 %192, label %193, label %204

193:                                              ; preds = %186
  %194 = add i64 %173, 1
  store i64 %194, i64* %10, align 8
  %195 = load i64, i64* %12, align 8
  %196 = icmp eq i64 %194, %195
  br i1 %196, label %197, label %171

197:                                              ; preds = %193
  store i32 6, i32* %9, align 8
  br label %199

198:                                              ; preds = %71
  store i8* %73, i8** %4, align 8
  br label %199

199:                                              ; preds = %183, %180, %198, %127, %143, %160, %156, %197, %169, %170, %86, %55, %59, %23, %98
  %200 = load i8*, i8** %4, align 8
  %201 = icmp ult i8* %200, %6
  br i1 %201, label %23, label %203

202:                                              ; preds = %75
  store i8* %76, i8** %4, align 8
  br label %204

203:                                              ; preds = %199, %23
  br label %204

204:                                              ; preds = %186, %23, %23, %203, %3, %202
  %205 = phi i1 [ false, %202 ], [ true, %3 ], [ true, %203 ], [ false, %23 ], [ false, %23 ], [ false, %186 ]
  ret i1 %205
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @_ZN5blink15MultipartParser14ParseDelimiterEPPKcS2_(%"class.blink::MultipartParser"* nocapture, i8** nocapture, i8* readnone) local_unnamed_addr #1 align 2 {
  %4 = getelementptr inbounds %"class.blink::MultipartParser", %"class.blink::MultipartParser"* %0, i64 0, i32 0, i32 0
  %5 = getelementptr inbounds %"class.blink::MultipartParser", %"class.blink::MultipartParser"* %0, i64 0, i32 0, i32 1
  %6 = getelementptr inbounds %"class.blink::MultipartParser", %"class.blink::MultipartParser"* %0, i64 0, i32 0, i32 2
  %7 = load i8*, i8** %1, align 8
  br label %8

8:                                                ; preds = %18, %3
  %9 = phi i8* [ %21, %18 ], [ %7, %3 ]
  %10 = icmp ult i8* %9, %2
  br i1 %10, label %11, label %25

11:                                               ; preds = %8
  %12 = load i8, i8* %9, align 1
  %13 = load i8*, i8** %4, align 8
  %14 = load i64, i64* %5, align 8
  %15 = getelementptr inbounds i8, i8* %13, i64 %14
  %16 = load i8, i8* %15, align 1
  %17 = icmp eq i8 %16, %12
  br i1 %17, label %18, label %25

18:                                               ; preds = %11
  %19 = add i64 %14, 1
  store i64 %19, i64* %5, align 8
  %20 = load i8*, i8** %1, align 8
  %21 = getelementptr inbounds i8, i8* %20, i64 1
  store i8* %21, i8** %1, align 8
  %22 = load i64, i64* %5, align 8
  %23 = load i64, i64* %6, align 8
  %24 = icmp eq i64 %22, %23
  br i1 %24, label %25, label %8

25:                                               ; preds = %11, %8, %18
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5blink15MultipartParser21ParseDataAndDelimiterEPPKcS2_(%"class.blink::MultipartParser"* nocapture, i8** nocapture, i8*) local_unnamed_addr #2 align 2 {
  %4 = load i8*, i8** %1, align 8
  %5 = getelementptr inbounds %"class.blink::MultipartParser", %"class.blink::MultipartParser"* %0, i64 0, i32 3, i32 0, i32 0, i32 0
  %6 = load i8*, i8** %5, align 8
  %7 = getelementptr inbounds %"class.blink::MultipartParser", %"class.blink::MultipartParser"* %0, i64 0, i32 3, i32 0, i32 0, i32 2
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  %10 = getelementptr inbounds i8, i8* %6, i64 %9
  %11 = icmp eq i32 %8, 0
  %12 = ptrtoint i8* %4 to i64
  br i1 %11, label %45, label %13

13:                                               ; preds = %3
  %14 = ptrtoint i8* %2 to i64
  %15 = sub i64 %14, %12
  %16 = icmp slt i64 %15, %9
  br i1 %16, label %69, label %17

17:                                               ; preds = %13
  %18 = sub nsw i64 1, %9
  %19 = getelementptr inbounds i8, i8* %2, i64 %18
  %20 = icmp eq i8* %19, %4
  br i1 %20, label %69, label %21

21:                                               ; preds = %17
  %22 = load i8, i8* %6, align 1
  br label %23

23:                                               ; preds = %30, %21
  %24 = phi i8* [ %4, %21 ], [ %31, %30 ]
  %25 = load i8, i8* %24, align 1
  %26 = icmp eq i8 %25, %22
  br i1 %26, label %32, label %27

27:                                               ; preds = %23
  %28 = getelementptr inbounds i8, i8* %24, i64 1
  %29 = icmp eq i8* %28, %19
  br i1 %29, label %69, label %30

30:                                               ; preds = %27, %42
  %31 = phi i8* [ %28, %27 ], [ %43, %42 ]
  br label %23

32:                                               ; preds = %23, %37
  %33 = phi i8* [ %38, %37 ], [ %24, %23 ]
  %34 = phi i8* [ %35, %37 ], [ %6, %23 ]
  %35 = getelementptr inbounds i8, i8* %34, i64 1
  %36 = icmp eq i8* %35, %10
  br i1 %36, label %45, label %37

37:                                               ; preds = %32
  %38 = getelementptr inbounds i8, i8* %33, i64 1
  %39 = load i8, i8* %38, align 1
  %40 = load i8, i8* %35, align 1
  %41 = icmp eq i8 %39, %40
  br i1 %41, label %32, label %42

42:                                               ; preds = %37
  %43 = getelementptr inbounds i8, i8* %24, i64 1
  %44 = icmp eq i8* %43, %19
  br i1 %44, label %69, label %30

45:                                               ; preds = %32, %3
  %46 = phi i8* [ %4, %3 ], [ %24, %32 ]
  %47 = icmp eq i8* %46, %2
  br i1 %47, label %48, label %51

48:                                               ; preds = %45
  %49 = ptrtoint i8* %2 to i64
  %50 = sub i64 %49, %12
  br label %69

51:                                               ; preds = %45
  %52 = getelementptr inbounds i8, i8* %46, i64 %9
  br i1 %11, label %100, label %53

53:                                               ; preds = %51
  %54 = getelementptr inbounds %"class.blink::MultipartParser", %"class.blink::MultipartParser"* %0, i64 0, i32 0, i32 0
  %55 = getelementptr inbounds %"class.blink::MultipartParser", %"class.blink::MultipartParser"* %0, i64 0, i32 0, i32 1
  %56 = load i8*, i8** %54, align 8
  %57 = load i64, i64* %55, align 8
  br label %58

58:                                               ; preds = %65, %53
  %59 = phi i64 [ %57, %53 ], [ %67, %65 ]
  %60 = phi i8* [ %46, %53 ], [ %66, %65 ]
  %61 = load i8, i8* %60, align 1
  %62 = getelementptr inbounds i8, i8* %56, i64 %59
  %63 = load i8, i8* %62, align 1
  %64 = icmp eq i8 %63, %61
  br i1 %64, label %65, label %100

65:                                               ; preds = %58
  %66 = getelementptr inbounds i8, i8* %60, i64 1
  %67 = add i64 %59, 1
  store i64 %67, i64* %55, align 8
  %68 = icmp eq i8* %66, %52
  br i1 %68, label %100, label %58

69:                                               ; preds = %42, %27, %48, %17, %13
  %70 = phi i64 [ %50, %48 ], [ %15, %17 ], [ %15, %13 ], [ %15, %27 ], [ %15, %42 ]
  %71 = add i32 %8, -1
  %72 = zext i32 %71 to i64
  %73 = icmp ult i64 %70, %72
  %74 = select i1 %73, i64 %70, i64 %72
  %75 = icmp sgt i64 %74, 0
  br i1 %75, label %76, label %100

76:                                               ; preds = %69
  %77 = sub nsw i64 0, %74
  %78 = getelementptr inbounds i8, i8* %2, i64 %77
  %79 = getelementptr inbounds %"class.blink::MultipartParser", %"class.blink::MultipartParser"* %0, i64 0, i32 0, i32 0
  %80 = getelementptr inbounds %"class.blink::MultipartParser", %"class.blink::MultipartParser"* %0, i64 0, i32 0, i32 1
  %81 = load i64, i64* %80, align 8
  br label %82

82:                                               ; preds = %76, %97
  %83 = phi i64 [ %81, %76 ], [ 0, %97 ]
  %84 = phi i8* [ %78, %76 ], [ %98, %97 ]
  %85 = load i8*, i8** %79, align 8
  br label %86

86:                                               ; preds = %93, %82
  %87 = phi i64 [ %83, %82 ], [ %95, %93 ]
  %88 = phi i8* [ %84, %82 ], [ %94, %93 ]
  %89 = load i8, i8* %88, align 1
  %90 = getelementptr inbounds i8, i8* %85, i64 %87
  %91 = load i8, i8* %90, align 1
  %92 = icmp eq i8 %91, %89
  br i1 %92, label %93, label %97

93:                                               ; preds = %86
  %94 = getelementptr inbounds i8, i8* %88, i64 1
  %95 = add i64 %87, 1
  store i64 %95, i64* %80, align 8
  %96 = icmp eq i8* %94, %2
  br i1 %96, label %100, label %86

97:                                               ; preds = %86
  store i64 0, i64* %80, align 8
  %98 = getelementptr inbounds i8, i8* %84, i64 1
  %99 = icmp ult i8* %98, %2
  br i1 %99, label %82, label %100

100:                                              ; preds = %65, %58, %97, %93, %69, %51
  %101 = phi i8* [ %52, %51 ], [ %2, %69 ], [ %2, %93 ], [ %2, %97 ], [ %52, %58 ], [ %52, %65 ]
  store i8* %101, i8** %1, align 8
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable writeonly
define hidden void @_ZNK5blink15MultipartParser22DelimiterSuffixMatcherEv(%"class.blink::MultipartParser::Matcher"* noalias nocapture sret, %"class.blink::MultipartParser"* nocapture readnone) local_unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"class.blink::MultipartParser::Matcher", %"class.blink::MultipartParser::Matcher"* %0, i64 0, i32 0
  store i8* getelementptr inbounds ([3 x i8], [3 x i8]* @_ZN5blink12_GLOBAL__N_116kDelimiterSuffixE, i64 0, i64 0), i8** %3, align 8
  %4 = getelementptr inbounds %"class.blink::MultipartParser::Matcher", %"class.blink::MultipartParser::Matcher"* %0, i64 0, i32 1
  %5 = bitcast i64* %4 to <2 x i64>*
  store <2 x i64> <i64 0, i64 2>, <2 x i64>* %5, align 8
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @_ZNK5blink15MultipartParser21ParseTransportPaddingEPPKcS2_(%"class.blink::MultipartParser"* nocapture readnone, i8** nocapture, i8* readnone) local_unnamed_addr #1 align 2 {
  %4 = load i8*, i8** %1, align 8
  %5 = icmp ult i8* %4, %2
  br i1 %5, label %6, label %12

6:                                                ; preds = %3, %9
  %7 = phi i8* [ %10, %9 ], [ %4, %3 ]
  %8 = load i8, i8* %7, align 1
  switch i8 %8, label %12 [
    i8 9, label %9
    i8 32, label %9
  ]

9:                                                ; preds = %6, %6
  %10 = getelementptr inbounds i8, i8* %7, i64 1
  store i8* %10, i8** %1, align 8
  %11 = icmp eq i8* %10, %2
  br i1 %11, label %12, label %6

12:                                               ; preds = %6, %9, %3
  ret void
}

declare void @_ZN5blink13HTTPHeaderMapC1Ev(%"class.blink::HTTPHeaderMap"*) unnamed_addr #4

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZN5blink15MultipartParser17ParseHeaderFieldsEPPKcS2_PNS_13HTTPHeaderMapE(%"class.blink::MultipartParser"*, i8** nocapture, i8*, %"class.blink::HTTPHeaderMap"*) local_unnamed_addr #2 align 2 {
  %5 = alloca i32, align 4
  %6 = load i8*, i8** %1, align 8
  %7 = ptrtoint i8* %2 to i64
  %8 = ptrtoint i8* %6 to i64
  %9 = sub i64 %7, %8
  %10 = icmp sgt i64 %9, 4294967295
  br i1 %10, label %51, label %11

11:                                               ; preds = %4
  %12 = trunc i64 %9 to i32
  %13 = getelementptr inbounds %"class.blink::MultipartParser", %"class.blink::MultipartParser"* %0, i64 0, i32 1
  %14 = getelementptr inbounds %"class.blink::MultipartParser", %"class.blink::MultipartParser"* %0, i64 0, i32 1, i32 0, i32 0, i32 2
  %15 = load i32, i32* %14, align 4
  %16 = icmp eq i32 %15, 0
  br i1 %16, label %21, label %17

17:                                               ; preds = %11
  tail call void @_ZN3WTF6VectorIcLj0ENS_18PartitionAllocatorEE6AppendIcEEvPKT_j(%"class.WTF::Vector"* %13, i8* %6, i32 %12)
  %18 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %13, i64 0, i32 0, i32 0, i32 0
  %19 = load i8*, i8** %18, align 8
  %20 = load i32, i32* %14, align 4
  br label %21

21:                                               ; preds = %17, %11
  %22 = phi i8* [ %6, %11 ], [ %19, %17 ]
  %23 = phi i32 [ %12, %11 ], [ %20, %17 ]
  %24 = bitcast i32* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %24) #7
  store i32 0, i32* %5, align 4
  %25 = call zeroext i1 @_ZN5blink33ParseMultipartFormHeadersFromBodyEPKcjPNS_13HTTPHeaderMapEPj(i8* %22, i32 %23, %"class.blink::HTTPHeaderMap"* %3, i32* nonnull %5) #7
  br i1 %25, label %30, label %26

26:                                               ; preds = %21
  %27 = load i32, i32* %14, align 4
  %28 = icmp eq i32 %27, 0
  br i1 %28, label %29, label %48

29:                                               ; preds = %26
  call void @_ZN3WTF6VectorIcLj0ENS_18PartitionAllocatorEE6AppendIcEEvPKT_j(%"class.WTF::Vector"* %13, i8* %22, i32 %23)
  br label %48

30:                                               ; preds = %21
  %31 = getelementptr inbounds %"class.blink::MultipartParser", %"class.blink::MultipartParser"* %0, i64 0, i32 1, i32 0, i32 0, i32 1
  %32 = load i32, i32* %31, align 8
  %33 = icmp eq i32 %32, 0
  br i1 %33, label %42, label %34

34:                                               ; preds = %30
  %35 = load i32, i32* %14, align 4
  %36 = icmp eq i32 %35, 0
  br i1 %36, label %38, label %37

37:                                               ; preds = %34
  store i32 0, i32* %14, align 4
  br label %38

38:                                               ; preds = %37, %34
  %39 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %13, i64 0, i32 0, i32 0, i32 0
  %40 = load i8*, i8** %39, align 8
  %41 = bitcast %"class.WTF::Vector"* %13 to i64*
  store atomic i64 0, i64* %41 monotonic, align 8
  store i32 0, i32* %31, align 8
  call void @_ZN3WTF18PartitionAllocator11FreeBackingEPv(i8* %40) #7
  br label %42

42:                                               ; preds = %30, %38
  %43 = load i32, i32* %5, align 4
  %44 = sub i32 %23, %43
  %45 = zext i32 %44 to i64
  %46 = sub nsw i64 0, %45
  %47 = getelementptr inbounds i8, i8* %2, i64 %46
  br label %48

48:                                               ; preds = %26, %29, %42
  %49 = phi i8* [ %47, %42 ], [ %2, %29 ], [ %2, %26 ]
  %50 = phi i1 [ true, %42 ], [ false, %29 ], [ false, %26 ]
  store i8* %49, i8** %1, align 8
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %24) #7
  br label %51

51:                                               ; preds = %4, %48
  %52 = phi i1 [ %50, %48 ], [ false, %4 ]
  ret i1 %52
}

; Function Attrs: nounwind
declare void @_ZN5blink13HTTPHeaderMapD1Ev(%"class.blink::HTTPHeaderMap"*) unnamed_addr #5

; Function Attrs: nofree norecurse nounwind ssp uwtable writeonly
define hidden void @_ZNK5blink15MultipartParser27CloseDelimiterSuffixMatcherEv(%"class.blink::MultipartParser::Matcher"* noalias nocapture sret, %"class.blink::MultipartParser"* nocapture readnone) local_unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"class.blink::MultipartParser::Matcher", %"class.blink::MultipartParser::Matcher"* %0, i64 0, i32 0
  store i8* getelementptr inbounds ([5 x i8], [5 x i8]* @_ZN5blink12_GLOBAL__N_121kCloseDelimiterSuffixE, i64 0, i64 0), i8** %3, align 8
  %4 = getelementptr inbounds %"class.blink::MultipartParser::Matcher", %"class.blink::MultipartParser::Matcher"* %0, i64 0, i32 1
  %5 = bitcast i64* %4 to <2 x i64>*
  store <2 x i64> <i64 0, i64 4>, <2 x i64>* %5, align 8
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable writeonly
define hidden void @_ZN5blink15MultipartParser6CancelEv(%"class.blink::MultipartParser"* nocapture) local_unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.blink::MultipartParser", %"class.blink::MultipartParser"* %0, i64 0, i32 4
  store i32 7, i32* %2, align 8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZN5blink15MultipartParser6FinishEv(%"class.blink::MultipartParser"* nocapture) local_unnamed_addr #2 align 2 {
  %2 = getelementptr inbounds %"class.blink::MultipartParser", %"class.blink::MultipartParser"* %0, i64 0, i32 4
  %3 = load i32, i32* %2, align 8
  store i32 8, i32* %2, align 8
  switch i32 %3, label %21 [
    i32 3, label %4
    i32 5, label %17
    i32 6, label %22
  ]

4:                                                ; preds = %1
  %5 = getelementptr inbounds %"class.blink::MultipartParser", %"class.blink::MultipartParser"* %0, i64 0, i32 0, i32 1
  %6 = load i64, i64* %5, align 8
  %7 = icmp eq i64 %6, 0
  br i1 %7, label %22, label %8

8:                                                ; preds = %4
  %9 = getelementptr inbounds %"class.blink::MultipartParser", %"class.blink::MultipartParser"* %0, i64 0, i32 2, i32 0, i32 0
  %10 = load %"class.blink::MultipartParser::Client"*, %"class.blink::MultipartParser::Client"** %9, align 8
  %11 = getelementptr inbounds %"class.blink::MultipartParser", %"class.blink::MultipartParser"* %0, i64 0, i32 0, i32 0
  %12 = load i8*, i8** %11, align 8
  %13 = bitcast %"class.blink::MultipartParser::Client"* %10 to void (%"class.blink::MultipartParser::Client"*, i8*, i64)***
  %14 = load void (%"class.blink::MultipartParser::Client"*, i8*, i64)**, void (%"class.blink::MultipartParser::Client"*, i8*, i64)*** %13, align 8
  %15 = getelementptr inbounds void (%"class.blink::MultipartParser::Client"*, i8*, i64)*, void (%"class.blink::MultipartParser::Client"*, i8*, i64)** %14, i64 4
  %16 = load void (%"class.blink::MultipartParser::Client"*, i8*, i64)*, void (%"class.blink::MultipartParser::Client"*, i8*, i64)** %15, align 8
  tail call void %16(%"class.blink::MultipartParser::Client"* %10, i8* %12, i64 %6) #7
  br label %22

17:                                               ; preds = %1
  %18 = getelementptr inbounds %"class.blink::MultipartParser", %"class.blink::MultipartParser"* %0, i64 0, i32 0, i32 1
  %19 = load i64, i64* %18, align 8
  %20 = icmp ugt i64 %19, 1
  br label %22

21:                                               ; preds = %1
  br label %22

22:                                               ; preds = %1, %8, %4, %21, %17
  %23 = phi i1 [ false, %21 ], [ %20, %17 ], [ false, %4 ], [ false, %8 ], [ true, %1 ]
  ret i1 %23
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN3WTF6VectorIcLj0ENS_18PartitionAllocatorEE6AppendIcEEvPKT_j(%"class.WTF::Vector"*, i8*, i32) local_unnamed_addr #2 comdat align 2 {
  %4 = alloca %"class.logging::CheckOpResult", align 8
  %5 = alloca %"class.logging::CheckOpResult", align 8
  %6 = alloca %"class.logging::CheckError", align 8
  %7 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %0, i64 0, i32 0, i32 0, i32 2
  %8 = load i32, i32* %7, align 4
  %9 = add i32 %8, %2
  %10 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %0, i64 0, i32 0, i32 0, i32 1
  %11 = load i32, i32* %10, align 8
  %12 = icmp ugt i32 %9, %11
  br i1 %12, label %13, label %87

13:                                               ; preds = %3
  %14 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %0, i64 0, i32 0, i32 0, i32 0
  %15 = load i8*, i8** %14, align 8
  %16 = icmp ugt i8* %15, %1
  br i1 %16, label %21, label %17

17:                                               ; preds = %13
  %18 = zext i32 %8 to i64
  %19 = getelementptr inbounds i8, i8* %15, i64 %18
  %20 = icmp ugt i8* %19, %1
  br i1 %20, label %52, label %21

21:                                               ; preds = %17, %13
  %22 = lshr i32 %11, 2
  %23 = add nuw i32 %11, 1
  %24 = add i32 %23, %22
  %25 = icmp ugt i32 %24, 4
  %26 = select i1 %25, i32 %24, i32 4
  %27 = icmp ugt i32 %26, %9
  %28 = select i1 %27, i32 %26, i32 %9
  %29 = icmp ult i32 %11, %28
  br i1 %29, label %30, label %87, !prof !8

30:                                               ; preds = %21
  %31 = icmp eq i8* %15, null
  %32 = zext i32 %28 to i64
  %33 = tail call i64 @_ZN3WTF18PartitionAllocator13QuantizedSizeIcEEmm(i64 %32) #7
  %34 = tail call i8* @_ZN3WTF18PartitionAllocator21AllocateVectorBackingIcEEPT_m(i64 %33) #7
  %35 = ptrtoint i8* %34 to i64
  br i1 %31, label %36, label %39

36:                                               ; preds = %30
  %37 = bitcast %"class.WTF::Vector"* %0 to i64*
  store atomic i64 %35, i64* %37 monotonic, align 8
  %38 = trunc i64 %33 to i32
  store i32 %38, i32* %10, align 8
  br label %87

39:                                               ; preds = %30
  %40 = load i8*, i8** %14, align 8
  %41 = icmp ne i8* %34, null
  %42 = icmp ne i8* %40, null
  %43 = and i1 %41, %42
  br i1 %43, label %44, label %48, !prof !8

44:                                               ; preds = %39
  %45 = load i32, i32* %7, align 4
  %46 = zext i32 %45 to i64
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 1 %34, i8* nonnull align 1 %40, i64 %46, i1 false) #7
  %47 = load i8*, i8** %14, align 8
  br label %48

48:                                               ; preds = %44, %39
  %49 = phi i8* [ %40, %39 ], [ %47, %44 ]
  tail call void @_ZN3WTF18PartitionAllocator11FreeBackingEPv(i8* %49) #7
  %50 = bitcast %"class.WTF::Vector"* %0 to i64*
  store atomic i64 %35, i64* %50 monotonic, align 8
  %51 = trunc i64 %33 to i32
  store i32 %51, i32* %10, align 8
  br label %87

52:                                               ; preds = %17
  %53 = ptrtoint i8* %1 to i64
  %54 = ptrtoint i8* %15 to i64
  %55 = sub i64 %53, %54
  %56 = lshr i32 %11, 2
  %57 = add nuw i32 %11, 1
  %58 = add i32 %57, %56
  %59 = icmp ugt i32 %58, 4
  %60 = select i1 %59, i32 %58, i32 4
  %61 = icmp ugt i32 %60, %9
  %62 = select i1 %61, i32 %60, i32 %9
  %63 = icmp ult i32 %11, %62
  br i1 %63, label %64, label %84, !prof !8

64:                                               ; preds = %52
  %65 = icmp eq i8* %15, null
  %66 = zext i32 %62 to i64
  %67 = tail call i64 @_ZN3WTF18PartitionAllocator13QuantizedSizeIcEEmm(i64 %66) #7
  %68 = tail call i8* @_ZN3WTF18PartitionAllocator21AllocateVectorBackingIcEEPT_m(i64 %67) #7
  %69 = ptrtoint i8* %68 to i64
  br i1 %65, label %81, label %70

70:                                               ; preds = %64
  %71 = load i8*, i8** %14, align 8
  %72 = icmp ne i8* %68, null
  %73 = icmp ne i8* %71, null
  %74 = and i1 %72, %73
  br i1 %74, label %75, label %79, !prof !8

75:                                               ; preds = %70
  %76 = load i32, i32* %7, align 4
  %77 = zext i32 %76 to i64
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 1 %68, i8* nonnull align 1 %71, i64 %77, i1 false) #7
  %78 = load i8*, i8** %14, align 8
  br label %79

79:                                               ; preds = %75, %70
  %80 = phi i8* [ %71, %70 ], [ %78, %75 ]
  tail call void @_ZN3WTF18PartitionAllocator11FreeBackingEPv(i8* %80) #7
  br label %81

81:                                               ; preds = %64, %79
  %82 = bitcast %"class.WTF::Vector"* %0 to i64*
  store atomic i64 %69, i64* %82 monotonic, align 8
  %83 = trunc i64 %67 to i32
  store i32 %83, i32* %10, align 8
  br label %84

84:                                               ; preds = %81, %52
  %85 = phi i8* [ %15, %52 ], [ %68, %81 ]
  %86 = getelementptr inbounds i8, i8* %85, i64 %55
  br label %87

87:                                               ; preds = %84, %21, %36, %48, %3
  %88 = phi i8* [ %1, %3 ], [ %86, %84 ], [ %1, %21 ], [ %1, %36 ], [ %1, %48 ]
  %89 = bitcast %"class.logging::CheckOpResult"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %89) #7
  %90 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %5, i64 0, i32 0
  store i8* inttoptr (i64 -6148914691236517206 to i8*), i8** %90, align 8
  %91 = load i32, i32* %7, align 4
  %92 = bitcast %"class.logging::CheckOpResult"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %92)
  %93 = icmp ult i32 %9, %91
  br i1 %93, label %95, label %94

94:                                               ; preds = %87
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %92)
  store i8* null, i8** %90, align 8
  br label %104

95:                                               ; preds = %87
  %96 = tail call i8* @_ZN7logging15CheckOpValueStrEj(i32 %9) #7
  %97 = tail call i8* @_ZN7logging15CheckOpValueStrEj(i32 %91) #7
  call void @_ZN7logging13CheckOpResultC1EPKcPcS3_(%"class.logging::CheckOpResult"* nonnull %4, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.3, i64 0, i64 0), i8* %96, i8* %97) #7
  %98 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %4, i64 0, i32 0
  %99 = load i8*, i8** %98, align 8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %92)
  store i8* %99, i8** %90, align 8
  %100 = icmp eq i8* %99, null
  br i1 %100, label %104, label %101

101:                                              ; preds = %95
  %102 = bitcast %"class.logging::CheckError"* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %102) #7
  call void @_ZN7logging10CheckError7CheckOpEPKciPNS_13CheckOpResultE(%"class.logging::CheckError"* nonnull sret %6, i8* getelementptr inbounds ([55 x i8], [55 x i8]* @.str.2, i64 0, i64 0), i32 1907, %"class.logging::CheckOpResult"* nonnull %5) #7
  %103 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %6) #7
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %6) #7
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %102) #7
  br label %104

104:                                              ; preds = %94, %95, %101
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %89) #7
  %105 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %0, i64 0, i32 0, i32 0, i32 0
  %106 = load i8*, i8** %105, align 8
  %107 = load i32, i32* %7, align 4
  %108 = zext i32 %107 to i64
  %109 = getelementptr inbounds i8, i8* %106, i64 %108
  %110 = icmp ne i8* %109, null
  %111 = icmp ne i8* %88, null
  %112 = and i1 %111, %110
  br i1 %112, label %113, label %115, !prof !8

113:                                              ; preds = %104
  %114 = zext i32 %2 to i64
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 1 %109, i8* nonnull align 1 %88, i64 %114, i1 false) #7
  br label %115

115:                                              ; preds = %104, %113
  store i32 %9, i32* %7, align 4
  ret void
}

declare zeroext i1 @_ZN5blink33ParseMultipartFormHeadersFromBodyEPKcjPNS_13HTTPHeaderMapEPj(i8*, i32, %"class.blink::HTTPHeaderMap"*, i32*) local_unnamed_addr #4

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZNK5blink15MultipartParser5TraceEPNS_7VisitorE(%"class.blink::MultipartParser"* nocapture readonly, %"class.blink::Visitor"*) local_unnamed_addr #2 align 2 {
  %3 = getelementptr inbounds %"class.blink::MultipartParser", %"class.blink::MultipartParser"* %0, i64 0, i32 2
  %4 = bitcast %"class.blink::Member"* %3 to i64*
  %5 = load atomic i64, i64* %4 monotonic, align 8
  %6 = icmp eq i64 %5, 0
  br i1 %6, label %73, label %7

7:                                                ; preds = %2
  %8 = inttoptr i64 %5 to i8*
  %9 = and i64 %5, -131072
  %10 = inttoptr i64 %9 to i8*
  %11 = getelementptr inbounds i8, i8* %10, i64 4138
  %12 = load i8, i8* %11, align 2
  %13 = icmp eq i8 %12, 1
  br i1 %13, label %14, label %16

14:                                               ; preds = %7
  %15 = getelementptr inbounds i8, i8* %10, i64 4160
  br label %54

16:                                               ; preds = %7
  %17 = getelementptr inbounds i8, i8* %10, i64 4096
  %18 = bitcast i8* %17 to %"class.blink::NormalPage"*
  %19 = getelementptr inbounds i8, i8* %10, i64 4400
  %20 = bitcast i8* %19 to i8**
  %21 = bitcast i8* %19 to i64*
  %22 = load i64, i64* %21, align 16
  %23 = sub i64 %5, %22
  %24 = lshr i64 %23, 3
  %25 = lshr i64 %23, 6
  %26 = getelementptr inbounds %"class.blink::NormalPage", %"class.blink::NormalPage"* %18, i64 0, i32 2, i32 0, i32 1, i64 %25
  %27 = load atomic i8, i8* %26 acquire, align 1
  %28 = trunc i64 %24 to i32
  %29 = and i32 %28, 7
  %30 = shl i32 2, %29
  %31 = trunc i32 %30 to i8
  %32 = add i8 %31, -1
  %33 = and i8 %32, %27
  %34 = icmp eq i8 %33, 0
  br i1 %34, label %35, label %41

35:                                               ; preds = %16, %35
  %36 = phi i64 [ %37, %35 ], [ %25, %16 ]
  %37 = add i64 %36, -1
  %38 = getelementptr inbounds %"class.blink::NormalPage", %"class.blink::NormalPage"* %18, i64 0, i32 2, i32 0, i32 1, i64 %37
  %39 = load atomic i8, i8* %38 acquire, align 1
  %40 = icmp eq i8 %39, 0
  br i1 %40, label %35, label %41

41:                                               ; preds = %35, %16
  %42 = phi i64 [ %25, %16 ], [ %37, %35 ]
  %43 = phi i8 [ %33, %16 ], [ %39, %35 ]
  %44 = zext i8 %43 to i32
  %45 = tail call i32 @llvm.ctlz.i32(i32 %44, i1 true) #7, !range !9
  %46 = add nsw i32 %45, -24
  %47 = shl i64 %42, 3
  %48 = or i64 %47, 7
  %49 = sext i32 %46 to i64
  %50 = sub i64 %48, %49
  %51 = shl i64 %50, 3
  %52 = load i8*, i8** %20, align 16
  %53 = getelementptr inbounds i8, i8* %52, i64 %51
  br label %54

54:                                               ; preds = %41, %14
  %55 = phi i8* [ %15, %14 ], [ %53, %41 ]
  %56 = getelementptr inbounds i8, i8* %55, i64 8
  %57 = getelementptr inbounds i8, i8* %55, i64 4
  %58 = bitcast i8* %57 to i16*
  %59 = load atomic i16, i16* %58 acquire, align 2
  %60 = lshr i16 %59, 2
  %61 = load %"class.blink::GCInfoTable"*, %"class.blink::GCInfoTable"** @_ZN5blink11GCInfoTable13global_table_E, align 8
  %62 = getelementptr inbounds %"class.blink::GCInfoTable", %"class.blink::GCInfoTable"* %61, i64 0, i32 0
  %63 = load %"struct.blink::GCInfo"**, %"struct.blink::GCInfo"*** %62, align 8
  %64 = zext i16 %60 to i64
  %65 = getelementptr inbounds %"struct.blink::GCInfo"*, %"struct.blink::GCInfo"** %63, i64 %64
  %66 = load %"struct.blink::GCInfo"*, %"struct.blink::GCInfo"** %65, align 8
  %67 = getelementptr inbounds %"struct.blink::GCInfo", %"struct.blink::GCInfo"* %66, i64 0, i32 0
  %68 = load void (%"class.blink::Visitor"*, i8*)*, void (%"class.blink::Visitor"*, i8*)** %67, align 8
  %69 = bitcast %"class.blink::Visitor"* %1 to void (%"class.blink::Visitor"*, i8*, i8*, void (%"class.blink::Visitor"*, i8*)*)***
  %70 = load void (%"class.blink::Visitor"*, i8*, i8*, void (%"class.blink::Visitor"*, i8*)*)**, void (%"class.blink::Visitor"*, i8*, i8*, void (%"class.blink::Visitor"*, i8*)*)*** %69, align 8
  %71 = getelementptr inbounds void (%"class.blink::Visitor"*, i8*, i8*, void (%"class.blink::Visitor"*, i8*)*)*, void (%"class.blink::Visitor"*, i8*, i8*, void (%"class.blink::Visitor"*, i8*)*)** %70, i64 5
  %72 = load void (%"class.blink::Visitor"*, i8*, i8*, void (%"class.blink::Visitor"*, i8*)*)*, void (%"class.blink::Visitor"*, i8*, i8*, void (%"class.blink::Visitor"*, i8*)*)** %71, align 8
  tail call void %72(%"class.blink::Visitor"* %1, i8* nonnull %8, i8* %56, void (%"class.blink::Visitor"*, i8*)* %68) #7
  br label %73

73:                                               ; preds = %2, %54
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN3WTF6VectorIcLj0ENS_18PartitionAllocatorEE6insertIcEEvjPKT_j(%"class.WTF::Vector"*, i32, i8*, i32) local_unnamed_addr #2 comdat align 2 {
  %5 = alloca %"class.logging::CheckOpResult", align 8
  %6 = alloca %"class.logging::CheckOpResult", align 8
  %7 = alloca %"class.logging::CheckOpResult", align 8
  %8 = alloca %"class.logging::CheckError", align 8
  %9 = alloca %"class.logging::CheckOpResult", align 8
  %10 = alloca %"class.logging::CheckError", align 8
  %11 = bitcast %"class.logging::CheckOpResult"* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %11) #7
  %12 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %7, i64 0, i32 0
  store i8* inttoptr (i64 -6148914691236517206 to i8*), i8** %12, align 8
  %13 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %0, i64 0, i32 0, i32 0, i32 2
  %14 = load i32, i32* %13, align 4
  %15 = bitcast %"class.logging::CheckOpResult"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %15)
  %16 = icmp ult i32 %14, %1
  br i1 %16, label %18, label %17

17:                                               ; preds = %4
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %15)
  store i8* null, i8** %12, align 8
  br label %27

18:                                               ; preds = %4
  %19 = tail call i8* @_ZN7logging15CheckOpValueStrEj(i32 %1) #7
  %20 = tail call i8* @_ZN7logging15CheckOpValueStrEj(i32 %14) #7
  call void @_ZN7logging13CheckOpResultC1EPKcPcS3_(%"class.logging::CheckOpResult"* nonnull %5, i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.1, i64 0, i64 0), i8* %19, i8* %20) #7
  %21 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %5, i64 0, i32 0
  %22 = load i8*, i8** %21, align 8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %15)
  store i8* %22, i8** %12, align 8
  %23 = icmp eq i8* %22, null
  br i1 %23, label %27, label %24

24:                                               ; preds = %18
  %25 = bitcast %"class.logging::CheckError"* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %25) #7
  call void @_ZN7logging10CheckError7CheckOpEPKciPNS_13CheckOpResultE(%"class.logging::CheckError"* nonnull sret %8, i8* getelementptr inbounds ([55 x i8], [55 x i8]* @.str.2, i64 0, i64 0), i32 1990, %"class.logging::CheckOpResult"* nonnull %7) #7
  %26 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %8) #7
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %8) #7
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %25) #7
  br label %27

27:                                               ; preds = %17, %18, %24
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %11) #7
  %28 = load i32, i32* %13, align 4
  %29 = add i32 %28, %3
  %30 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %0, i64 0, i32 0, i32 0, i32 1
  %31 = load i32, i32* %30, align 8
  %32 = icmp ugt i32 %29, %31
  br i1 %32, label %33, label %107

33:                                               ; preds = %27
  %34 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %0, i64 0, i32 0, i32 0, i32 0
  %35 = load i8*, i8** %34, align 8
  %36 = icmp ugt i8* %35, %2
  br i1 %36, label %41, label %37

37:                                               ; preds = %33
  %38 = zext i32 %28 to i64
  %39 = getelementptr inbounds i8, i8* %35, i64 %38
  %40 = icmp ugt i8* %39, %2
  br i1 %40, label %72, label %41

41:                                               ; preds = %37, %33
  %42 = lshr i32 %31, 2
  %43 = add nuw i32 %31, 1
  %44 = add i32 %43, %42
  %45 = icmp ugt i32 %44, 4
  %46 = select i1 %45, i32 %44, i32 4
  %47 = icmp ugt i32 %46, %29
  %48 = select i1 %47, i32 %46, i32 %29
  %49 = icmp ult i32 %31, %48
  br i1 %49, label %50, label %107, !prof !8

50:                                               ; preds = %41
  %51 = icmp eq i8* %35, null
  %52 = zext i32 %48 to i64
  %53 = call i64 @_ZN3WTF18PartitionAllocator13QuantizedSizeIcEEmm(i64 %52) #7
  %54 = call i8* @_ZN3WTF18PartitionAllocator21AllocateVectorBackingIcEEPT_m(i64 %53) #7
  %55 = ptrtoint i8* %54 to i64
  br i1 %51, label %56, label %59

56:                                               ; preds = %50
  %57 = bitcast %"class.WTF::Vector"* %0 to i64*
  store atomic i64 %55, i64* %57 monotonic, align 8
  %58 = trunc i64 %53 to i32
  store i32 %58, i32* %30, align 8
  br label %107

59:                                               ; preds = %50
  %60 = load i8*, i8** %34, align 8
  %61 = icmp ne i8* %54, null
  %62 = icmp ne i8* %60, null
  %63 = and i1 %61, %62
  br i1 %63, label %64, label %68, !prof !8

64:                                               ; preds = %59
  %65 = load i32, i32* %13, align 4
  %66 = zext i32 %65 to i64
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 1 %54, i8* nonnull align 1 %60, i64 %66, i1 false) #7
  %67 = load i8*, i8** %34, align 8
  br label %68

68:                                               ; preds = %64, %59
  %69 = phi i8* [ %60, %59 ], [ %67, %64 ]
  call void @_ZN3WTF18PartitionAllocator11FreeBackingEPv(i8* %69) #7
  %70 = bitcast %"class.WTF::Vector"* %0 to i64*
  store atomic i64 %55, i64* %70 monotonic, align 8
  %71 = trunc i64 %53 to i32
  store i32 %71, i32* %30, align 8
  br label %107

72:                                               ; preds = %37
  %73 = ptrtoint i8* %2 to i64
  %74 = ptrtoint i8* %35 to i64
  %75 = sub i64 %73, %74
  %76 = lshr i32 %31, 2
  %77 = add nuw i32 %31, 1
  %78 = add i32 %77, %76
  %79 = icmp ugt i32 %78, 4
  %80 = select i1 %79, i32 %78, i32 4
  %81 = icmp ugt i32 %80, %29
  %82 = select i1 %81, i32 %80, i32 %29
  %83 = icmp ult i32 %31, %82
  br i1 %83, label %84, label %104, !prof !8

84:                                               ; preds = %72
  %85 = icmp eq i8* %35, null
  %86 = zext i32 %82 to i64
  %87 = call i64 @_ZN3WTF18PartitionAllocator13QuantizedSizeIcEEmm(i64 %86) #7
  %88 = call i8* @_ZN3WTF18PartitionAllocator21AllocateVectorBackingIcEEPT_m(i64 %87) #7
  %89 = ptrtoint i8* %88 to i64
  br i1 %85, label %101, label %90

90:                                               ; preds = %84
  %91 = load i8*, i8** %34, align 8
  %92 = icmp ne i8* %88, null
  %93 = icmp ne i8* %91, null
  %94 = and i1 %92, %93
  br i1 %94, label %95, label %99, !prof !8

95:                                               ; preds = %90
  %96 = load i32, i32* %13, align 4
  %97 = zext i32 %96 to i64
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 1 %88, i8* nonnull align 1 %91, i64 %97, i1 false) #7
  %98 = load i8*, i8** %34, align 8
  br label %99

99:                                               ; preds = %95, %90
  %100 = phi i8* [ %91, %90 ], [ %98, %95 ]
  call void @_ZN3WTF18PartitionAllocator11FreeBackingEPv(i8* %100) #7
  br label %101

101:                                              ; preds = %84, %99
  %102 = bitcast %"class.WTF::Vector"* %0 to i64*
  store atomic i64 %89, i64* %102 monotonic, align 8
  %103 = trunc i64 %87 to i32
  store i32 %103, i32* %30, align 8
  br label %104

104:                                              ; preds = %101, %72
  %105 = phi i8* [ %35, %72 ], [ %88, %101 ]
  %106 = getelementptr inbounds i8, i8* %105, i64 %75
  br label %107

107:                                              ; preds = %104, %41, %56, %68, %27
  %108 = phi i8* [ %2, %27 ], [ %106, %104 ], [ %2, %41 ], [ %2, %56 ], [ %2, %68 ]
  %109 = bitcast %"class.logging::CheckOpResult"* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %109) #7
  %110 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %9, i64 0, i32 0
  store i8* inttoptr (i64 -6148914691236517206 to i8*), i8** %110, align 8
  %111 = load i32, i32* %13, align 4
  %112 = bitcast %"class.logging::CheckOpResult"* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %112)
  %113 = icmp ult i32 %29, %111
  br i1 %113, label %115, label %114

114:                                              ; preds = %107
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %112)
  store i8* null, i8** %110, align 8
  br label %124

115:                                              ; preds = %107
  %116 = call i8* @_ZN7logging15CheckOpValueStrEj(i32 %29) #7
  %117 = call i8* @_ZN7logging15CheckOpValueStrEj(i32 %111) #7
  call void @_ZN7logging13CheckOpResultC1EPKcPcS3_(%"class.logging::CheckOpResult"* nonnull %6, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.3, i64 0, i64 0), i8* %116, i8* %117) #7
  %118 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %6, i64 0, i32 0
  %119 = load i8*, i8** %118, align 8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %112)
  store i8* %119, i8** %110, align 8
  %120 = icmp eq i8* %119, null
  br i1 %120, label %124, label %121

121:                                              ; preds = %115
  %122 = bitcast %"class.logging::CheckError"* %10 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %122) #7
  call void @_ZN7logging10CheckError7CheckOpEPKciPNS_13CheckOpResultE(%"class.logging::CheckError"* nonnull sret %10, i8* getelementptr inbounds ([55 x i8], [55 x i8]* @.str.2, i64 0, i64 0), i32 1996, %"class.logging::CheckOpResult"* nonnull %9) #7
  %123 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %10) #7
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %10) #7
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %122) #7
  br label %124

124:                                              ; preds = %114, %115, %121
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %109) #7
  %125 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %0, i64 0, i32 0, i32 0, i32 0
  %126 = load i8*, i8** %125, align 8
  %127 = zext i32 %1 to i64
  %128 = getelementptr inbounds i8, i8* %126, i64 %127
  %129 = zext i32 %3 to i64
  %130 = getelementptr inbounds i8, i8* %128, i64 %129
  %131 = icmp ne i8* %130, null
  %132 = icmp ne i8* %128, null
  %133 = and i1 %132, %131
  br i1 %133, label %134, label %141, !prof !8

134:                                              ; preds = %124
  %135 = load i32, i32* %13, align 4
  %136 = zext i32 %135 to i64
  %137 = getelementptr inbounds i8, i8* %126, i64 %136
  %138 = ptrtoint i8* %137 to i64
  %139 = ptrtoint i8* %128 to i64
  %140 = sub i64 %138, %139
  call void @llvm.memmove.p0i8.p0i8.i64(i8* nonnull align 1 %130, i8* nonnull align 1 %128, i64 %140, i1 false) #7
  br label %141

141:                                              ; preds = %124, %134
  %142 = icmp ne i8* %108, null
  %143 = and i1 %142, %132
  br i1 %143, label %144, label %145, !prof !8

144:                                              ; preds = %141
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 1 %128, i8* nonnull align 1 %108, i64 %129, i1 false) #7
  br label %145

145:                                              ; preds = %141, %144
  store i32 %29, i32* %13, align 4
  ret void
}

declare void @_ZN7logging10CheckError7CheckOpEPKciPNS_13CheckOpResultE(%"class.logging::CheckError"* sret, i8*, i32, %"class.logging::CheckOpResult"*) local_unnamed_addr #4

declare dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"*) local_unnamed_addr #4

; Function Attrs: nounwind
declare void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"*) unnamed_addr #5

declare i8* @_ZN7logging15CheckOpValueStrEj(i32) local_unnamed_addr #4

declare void @_ZN7logging13CheckOpResultC1EPKcPcS3_(%"class.logging::CheckOpResult"*, i8*, i8*, i8*) unnamed_addr #4

declare i8* @_ZN3WTF18PartitionAllocator21AllocateVectorBackingIcEEPT_m(i64) local_unnamed_addr #4

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden i64 @_ZN3WTF18PartitionAllocator13QuantizedSizeIcEEmm(i64) local_unnamed_addr #2 comdat align 2 {
  %2 = alloca %"class.logging::CheckOpResult", align 8
  %3 = alloca %"class.logging::CheckOpResult", align 8
  %4 = alloca %"class.logging::CheckError", align 8
  %5 = bitcast %"class.logging::CheckOpResult"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %5) #7
  %6 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %3, i64 0, i32 0
  store i8* inttoptr (i64 -6148914691236517206 to i8*), i8** %6, align 8
  %7 = bitcast %"class.logging::CheckOpResult"* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %7)
  %8 = icmp ugt i64 %0, 2145386496
  br i1 %8, label %10, label %9

9:                                                ; preds = %1
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %7)
  store i8* null, i8** %6, align 8
  br label %19

10:                                               ; preds = %1
  %11 = tail call i8* @_ZN7logging15CheckOpValueStrEm(i64 %0) #7
  %12 = tail call i8* @_ZN7logging15CheckOpValueStrEm(i64 2145386496) #7
  call void @_ZN7logging13CheckOpResultC1EPKcPcS3_(%"class.logging::CheckOpResult"* nonnull %2, i8* getelementptr inbounds ([44 x i8], [44 x i8]* @.str.5, i64 0, i64 0), i8* %11, i8* %12) #7
  %13 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %2, i64 0, i32 0
  %14 = load i8*, i8** %13, align 8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %7)
  store i8* %14, i8** %6, align 8
  %15 = icmp eq i8* %14, null
  br i1 %15, label %19, label %16

16:                                               ; preds = %10
  %17 = bitcast %"class.logging::CheckError"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %17) #7
  call void @_ZN7logging10CheckError7CheckOpEPKciPNS_13CheckOpResultE(%"class.logging::CheckError"* nonnull sret %4, i8* getelementptr inbounds ([78 x i8], [78 x i8]* @.str.6, i64 0, i64 0), i32 31, %"class.logging::CheckOpResult"* nonnull %3) #7
  %18 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %4) #7
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %4) #7
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %17) #7
  br label %19

19:                                               ; preds = %9, %10, %16
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %5) #7
  %20 = call i64 @_ZN3WTF10Partitions23BufferPotentialCapacityEm(i64 %0) #7
  ret i64 %20
}

declare i64 @_ZN3WTF10Partitions23BufferPotentialCapacityEm(i64) local_unnamed_addr #4

declare i8* @_ZN7logging15CheckOpValueStrEm(i64) local_unnamed_addr #4

declare void @_ZN3WTF18PartitionAllocator11FreeBackingEPv(i8*) local_unnamed_addr #4

; Function Attrs: argmemonly nounwind
declare void @llvm.memmove.p0i8.p0i8.i64(i8* nocapture, i8* nocapture readonly, i64, i1 immarg) #3

; Function Attrs: nounwind readnone speculatable
declare i32 @llvm.ctlz.i32(i32, i1 immarg) #6

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #3

attributes #0 = { nofree norecurse nounwind ssp uwtable writeonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nofree norecurse nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { argmemonly nounwind }
attributes #4 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nounwind readnone speculatable }
attributes #7 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{!3}
!3 = distinct !{!3, !4, !"_ZNK5blink15MultipartParser16DelimiterMatcherEm: argument 0"}
!4 = distinct !{!4, !"_ZNK5blink15MultipartParser16DelimiterMatcherEm"}
!5 = !{!6}
!6 = distinct !{!6, !7, !"_ZNK5blink15MultipartParser16DelimiterMatcherEm: argument 0"}
!7 = distinct !{!7, !"_ZNK5blink15MultipartParser16DelimiterMatcherEm"}
!8 = !{!"branch_weights", i32 2000, i32 1}
!9 = !{i32 24, i32 33}
