; ModuleID = '../../third_party/libjxl/src/lib/jxl/enc_coeff_order.cc'
source_filename = "../../third_party/libjxl/src/lib/jxl/enc_coeff_order.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"struct.std::nothrow_t" = type { i8 }
%"class.jxl::AcStrategyImage" = type { %"class.jxl::Plane", i8*, i64 }
%"class.jxl::Plane" = type { %"struct.jxl::PlaneBase" }
%"struct.jxl::PlaneBase" = type { i32, i32, i32, i32, i64, %"class.std::__1::unique_ptr" }
%"class.std::__1::unique_ptr" = type { %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { i8* }
%"class.jxl::Rect" = type { i64, i64, i64, i64 }
%"class.jxl::ACImage" = type { i32 (...)** }
%"struct.jxl::FrameDimensions" = type { i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64 }
%class.anon.8 = type { i8 }
%"union.jxl::ConstACPtr" = type { i32* }
%struct.PosAndCount = type { i32, i32 }
%"struct.jxl::AcStrategy::CoeffOrderAndLut" = type { [175744 x i32], [175744 x i32] }
%"struct.jxl::BitWriter" = type { i64, %"class.jxl::PaddedBytes", %"class.jxl::BitWriter::Allotment"* }
%"class.jxl::PaddedBytes" = type { i64, i64, %"class.std::__1::unique_ptr" }
%"class.jxl::BitWriter::Allotment" = type { i64, i64, i64, i8, %"class.jxl::BitWriter::Allotment"* }
%"struct.jxl::AuxOut" = type { %"struct.std::__1::array", i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, %"struct.std::__1::array.9", %"struct.std::__1::array.9", i32, %"class.std::__1::basic_string", i64, %"class.std::__1::function", %"class.std::__1::function.16" }
%"struct.std::__1::array" = type { [21 x %"struct.jxl::AuxOut::LayerTotals"] }
%"struct.jxl::AuxOut::LayerTotals" = type { i64, i64, i64, i64, double }
%"struct.std::__1::array.9" = type { [8 x i32] }
%"class.std::__1::basic_string" = type { %"class.std::__1::__compressed_pair.10" }
%"class.std::__1::__compressed_pair.10" = type { %"struct.std::__1::__compressed_pair_elem.11" }
%"struct.std::__1::__compressed_pair_elem.11" = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" = type { %union.anon }
%union.anon = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" = type { i8*, i64, i64 }
%"class.std::__1::function" = type { %"class.std::__1::__function::__policy_func" }
%"class.std::__1::__function::__policy_func" = type { %"union.std::__1::__function::__policy_storage", %"struct.std::__1::__function::__policy_invoker", %"struct.std::__1::__function::__policy"* }
%"union.std::__1::__function::__policy_storage" = type { i8*, [8 x i8] }
%"struct.std::__1::__function::__policy_invoker" = type { i1 (%"union.std::__1::__function::__policy_storage"*, i8*, %"class.jxl::Image3"*)* }
%"class.jxl::Image3" = type { [3 x %"class.jxl::Plane.15"] }
%"class.jxl::Plane.15" = type { %"struct.jxl::PlaneBase" }
%"struct.std::__1::__function::__policy" = type { i8* (i8*)*, void (i8*)*, i8, %"class.std::type_info"* }
%"class.std::type_info" = type { i32 (...)**, i8* }
%"class.std::__1::function.16" = type { %"class.std::__1::__function::__policy_func.20" }
%"class.std::__1::__function::__policy_func.20" = type { %"union.std::__1::__function::__policy_storage", %"struct.std::__1::__function::__policy_invoker.21", %"struct.std::__1::__function::__policy"* }
%"struct.std::__1::__function::__policy_invoker.21" = type { i32 (%"union.std::__1::__function::__policy_storage"*, %"class.jxl::CodecInOut"*, %"class.std::__1::basic_string"*)* }
%"class.jxl::CodecInOut" = type { %"struct.jxl::SizeConstraints", %"class.jxl::DecoderHints", i32, float, i64, %"struct.jxl::Blobs", %"struct.jxl::CodecMetadata", %"class.jxl::ImageBundle", %"class.std::__1::vector.120", i8, i64 }
%"struct.jxl::SizeConstraints" = type { i32, i32, i64 }
%"class.jxl::DecoderHints" = type { %"class.std::__1::vector.22" }
%"class.std::__1::vector.22" = type { %"class.std::__1::__vector_base.23" }
%"class.std::__1::__vector_base.23" = type { %"struct.jxl::DecoderHints::KeyValue"*, %"struct.jxl::DecoderHints::KeyValue"*, %"class.std::__1::__compressed_pair.24" }
%"struct.jxl::DecoderHints::KeyValue" = type { %"class.std::__1::basic_string", %"class.std::__1::basic_string" }
%"class.std::__1::__compressed_pair.24" = type { %"struct.std::__1::__compressed_pair_elem.25" }
%"struct.std::__1::__compressed_pair_elem.25" = type { %"struct.jxl::DecoderHints::KeyValue"* }
%"struct.jxl::Blobs" = type { %"class.jxl::PaddedBytes", %"class.jxl::PaddedBytes", %"class.jxl::PaddedBytes", %"class.jxl::PaddedBytes" }
%"struct.jxl::CodecMetadata" = type { %"struct.jxl::ImageMetadata", %"class.jxl::SizeHeader", %"struct.jxl::CustomTransformData" }
%"struct.jxl::ImageMetadata" = type <{ %"class.jxl::Fields", i8, [7 x i8], %"struct.jxl::BitDepth", i8, i8, [6 x i8], %"struct.jxl::ColorEncoding", i32, i8, i8, i8, i8, %"class.jxl::SizeHeader", %"struct.jxl::ToneMapping", i32, [4 x i8], %"class.std::__1::vector.29", %"struct.jxl::CustomTransformData", %"class.jxl::PreviewHeader", %"struct.jxl::AnimationHeader", i64, i8, [7 x i8] }>
%"class.jxl::Fields" = type { i32 (...)** }
%"struct.jxl::BitDepth" = type <{ %"class.jxl::Fields", i8, [3 x i8], i32, i32, [4 x i8] }>
%"struct.jxl::ColorEncoding" = type { %"class.jxl::Fields", i8, i32, i32, %"struct.jxl::CustomTransferFunction", i32, i8, i8, %"class.jxl::PaddedBytes", i32, %"struct.jxl::Customxy", %"struct.jxl::Customxy", %"struct.jxl::Customxy", %"struct.jxl::Customxy" }
%"struct.jxl::CustomTransferFunction" = type { %"class.jxl::Fields", i32, i8, i32, i32 }
%"struct.jxl::Customxy" = type { %"class.jxl::Fields", i32, i32 }
%"struct.jxl::ToneMapping" = type <{ %"class.jxl::Fields", i8, [3 x i8], float, float, i8, [3 x i8], float, [4 x i8] }>
%"class.std::__1::vector.29" = type { %"class.std::__1::__vector_base.30" }
%"class.std::__1::__vector_base.30" = type { %"struct.jxl::ExtraChannelInfo"*, %"struct.jxl::ExtraChannelInfo"*, %"class.std::__1::__compressed_pair.31" }
%"struct.jxl::ExtraChannelInfo" = type { %"class.jxl::Fields", i8, i32, %"struct.jxl::BitDepth", i32, %"class.std::__1::basic_string", i8, [4 x float], i32 }
%"class.std::__1::__compressed_pair.31" = type { %"struct.std::__1::__compressed_pair_elem.32" }
%"struct.std::__1::__compressed_pair_elem.32" = type { %"struct.jxl::ExtraChannelInfo"* }
%"class.jxl::PreviewHeader" = type { %"class.jxl::Fields", i8, i32, i32, i32, i32, i32 }
%"struct.jxl::AnimationHeader" = type <{ %"class.jxl::Fields", i32, i32, i32, i8, [3 x i8] }>
%"class.jxl::SizeHeader" = type { %"class.jxl::Fields", i8, i32, i32, i32, i32, i32 }
%"struct.jxl::CustomTransformData" = type <{ %"class.jxl::Fields", i8, i8, [6 x i8], %"struct.jxl::OpsinInverseMatrix", i32, [15 x float], [55 x float], [210 x float], [4 x i8] }>
%"struct.jxl::OpsinInverseMatrix" = type <{ %"class.jxl::Fields", i8, [3 x i8], [9 x float], [3 x float], [4 x float], [4 x i8] }>
%"class.jxl::ImageBundle" = type { %"class.std::__1::unique_ptr.36", i32, [4 x i8], %"struct.jxl::YCbCrChromaSubsampling", %"struct.jxl::FrameOrigin", i32, i8, i8, %"class.std::__1::basic_string", %"struct.jxl::ImageMetadata"*, %"class.jxl::Image3", %"struct.jxl::ColorEncoding", %"class.std::__1::vector.113", i64 }
%"class.std::__1::unique_ptr.36" = type { %"class.std::__1::__compressed_pair.37" }
%"class.std::__1::__compressed_pair.37" = type { %"struct.std::__1::__compressed_pair_elem.38" }
%"struct.std::__1::__compressed_pair_elem.38" = type { %"struct.jxl::jpeg::JPEGData"* }
%"struct.jxl::jpeg::JPEGData" = type { %"class.jxl::Fields", i32, i32, i32, %"class.std::__1::vector.39", %"class.std::__1::vector.52", %"class.std::__1::vector.39", %"class.std::__1::vector.59", %"class.std::__1::vector.67", %"class.std::__1::vector.76", %"class.std::__1::vector.90", %"class.std::__1::vector.41", %"class.std::__1::vector.39", %"class.std::__1::vector.41", i32, i8, %"class.std::__1::vector.41" }
%"class.std::__1::vector.52" = type { %"class.std::__1::__vector_base.53" }
%"class.std::__1::__vector_base.53" = type { i32*, i32*, %"class.std::__1::__compressed_pair.54" }
%"class.std::__1::__compressed_pair.54" = type { %"struct.std::__1::__compressed_pair_elem.55" }
%"struct.std::__1::__compressed_pair_elem.55" = type { i32* }
%"class.std::__1::vector.59" = type { %"class.std::__1::__vector_base.60" }
%"class.std::__1::__vector_base.60" = type { %"struct.jxl::jpeg::JPEGQuantTable"*, %"struct.jxl::jpeg::JPEGQuantTable"*, %"class.std::__1::__compressed_pair.62" }
%"struct.jxl::jpeg::JPEGQuantTable" = type <{ %"struct.std::__1::array.61", i32, i32, i8, [3 x i8] }>
%"struct.std::__1::array.61" = type { [64 x i32] }
%"class.std::__1::__compressed_pair.62" = type { %"struct.std::__1::__compressed_pair_elem.63" }
%"struct.std::__1::__compressed_pair_elem.63" = type { %"struct.jxl::jpeg::JPEGQuantTable"* }
%"class.std::__1::vector.67" = type { %"class.std::__1::__vector_base.68" }
%"class.std::__1::__vector_base.68" = type { %"struct.jxl::jpeg::JPEGHuffmanCode"*, %"struct.jxl::jpeg::JPEGHuffmanCode"*, %"class.std::__1::__compressed_pair.71" }
%"struct.jxl::jpeg::JPEGHuffmanCode" = type <{ %"struct.std::__1::array.69", %"struct.std::__1::array.70", i32, i8, [3 x i8] }>
%"struct.std::__1::array.69" = type { [17 x i32] }
%"struct.std::__1::array.70" = type { [257 x i32] }
%"class.std::__1::__compressed_pair.71" = type { %"struct.std::__1::__compressed_pair_elem.72" }
%"struct.std::__1::__compressed_pair_elem.72" = type { %"struct.jxl::jpeg::JPEGHuffmanCode"* }
%"class.std::__1::vector.76" = type { %"class.std::__1::__vector_base.77" }
%"class.std::__1::__vector_base.77" = type { %"struct.jxl::jpeg::JPEGComponent"*, %"struct.jxl::jpeg::JPEGComponent"*, %"class.std::__1::__compressed_pair.85" }
%"struct.jxl::jpeg::JPEGComponent" = type { i32, i32, i32, i32, i32, i32, %"class.std::__1::vector.78" }
%"class.std::__1::vector.78" = type { %"class.std::__1::__vector_base.79" }
%"class.std::__1::__vector_base.79" = type { i16*, i16*, %"class.std::__1::__compressed_pair.80" }
%"class.std::__1::__compressed_pair.80" = type { %"struct.std::__1::__compressed_pair_elem.81" }
%"struct.std::__1::__compressed_pair_elem.81" = type { i16* }
%"class.std::__1::__compressed_pair.85" = type { %"struct.std::__1::__compressed_pair_elem.86" }
%"struct.std::__1::__compressed_pair_elem.86" = type { %"struct.jxl::jpeg::JPEGComponent"* }
%"class.std::__1::vector.90" = type { %"class.std::__1::__vector_base.91" }
%"class.std::__1::__vector_base.91" = type { %"struct.jxl::jpeg::JPEGScanInfo"*, %"struct.jxl::jpeg::JPEGScanInfo"*, %"class.std::__1::__compressed_pair.107" }
%"struct.jxl::jpeg::JPEGScanInfo" = type { i32, i32, i32, i32, i32, %"struct.std::__1::array.92", i32, %"class.std::__1::vector.93", %"class.std::__1::vector.100" }
%"struct.std::__1::array.92" = type { [4 x %"struct.jxl::jpeg::JPEGComponentScanInfo"] }
%"struct.jxl::jpeg::JPEGComponentScanInfo" = type { i32, i32, i32 }
%"class.std::__1::vector.93" = type { %"class.std::__1::__vector_base.94" }
%"class.std::__1::__vector_base.94" = type { i32*, i32*, %"class.std::__1::__compressed_pair.95" }
%"class.std::__1::__compressed_pair.95" = type { %"struct.std::__1::__compressed_pair_elem.96" }
%"struct.std::__1::__compressed_pair_elem.96" = type { i32* }
%"class.std::__1::vector.100" = type { %"class.std::__1::__vector_base.101" }
%"class.std::__1::__vector_base.101" = type { %"struct.jxl::jpeg::JPEGScanInfo::ExtraZeroRunInfo"*, %"struct.jxl::jpeg::JPEGScanInfo::ExtraZeroRunInfo"*, %"class.std::__1::__compressed_pair.102" }
%"struct.jxl::jpeg::JPEGScanInfo::ExtraZeroRunInfo" = type { i32, i32 }
%"class.std::__1::__compressed_pair.102" = type { %"struct.std::__1::__compressed_pair_elem.103" }
%"struct.std::__1::__compressed_pair_elem.103" = type { %"struct.jxl::jpeg::JPEGScanInfo::ExtraZeroRunInfo"* }
%"class.std::__1::__compressed_pair.107" = type { %"struct.std::__1::__compressed_pair_elem.108" }
%"struct.std::__1::__compressed_pair_elem.108" = type { %"struct.jxl::jpeg::JPEGScanInfo"* }
%"class.std::__1::vector.39" = type { %"class.std::__1::__vector_base.40" }
%"class.std::__1::__vector_base.40" = type { %"class.std::__1::vector.41"*, %"class.std::__1::vector.41"*, %"class.std::__1::__compressed_pair.47" }
%"class.std::__1::__compressed_pair.47" = type { %"struct.std::__1::__compressed_pair_elem.48" }
%"struct.std::__1::__compressed_pair_elem.48" = type { %"class.std::__1::vector.41"* }
%"class.std::__1::vector.41" = type { %"class.std::__1::__vector_base.42" }
%"class.std::__1::__vector_base.42" = type { i8*, i8*, %"class.std::__1::__compressed_pair.43" }
%"class.std::__1::__compressed_pair.43" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.jxl::YCbCrChromaSubsampling" = type <{ %"class.jxl::Fields", [3 x i32], i8, i8, [2 x i8] }>
%"struct.jxl::FrameOrigin" = type { i32, i32 }
%"class.std::__1::vector.113" = type { %"class.std::__1::__vector_base.114" }
%"class.std::__1::__vector_base.114" = type { %"class.jxl::Plane.15"*, %"class.jxl::Plane.15"*, %"class.std::__1::__compressed_pair.115" }
%"class.std::__1::__compressed_pair.115" = type { %"struct.std::__1::__compressed_pair_elem.116" }
%"struct.std::__1::__compressed_pair_elem.116" = type { %"class.jxl::Plane.15"* }
%"class.std::__1::vector.120" = type { %"class.std::__1::__vector_base.121" }
%"class.std::__1::__vector_base.121" = type { %"class.jxl::ImageBundle"*, %"class.jxl::ImageBundle"*, %"class.std::__1::__compressed_pair.122" }
%"class.std::__1::__compressed_pair.122" = type { %"struct.std::__1::__compressed_pair_elem.123" }
%"struct.std::__1::__compressed_pair_elem.123" = type { %"class.jxl::ImageBundle"* }
%"class.std::__1::vector.127" = type { %"class.std::__1::__vector_base.128" }
%"class.std::__1::__vector_base.128" = type { %"class.std::__1::vector.129"*, %"class.std::__1::vector.129"*, %"class.std::__1::__compressed_pair.136" }
%"class.std::__1::vector.129" = type { %"class.std::__1::__vector_base.130" }
%"class.std::__1::__vector_base.130" = type { %"struct.jxl::Token"*, %"struct.jxl::Token"*, %"class.std::__1::__compressed_pair.131" }
%"struct.jxl::Token" = type { i32, i32 }
%"class.std::__1::__compressed_pair.131" = type { %"struct.std::__1::__compressed_pair_elem.132" }
%"struct.std::__1::__compressed_pair_elem.132" = type { %"struct.jxl::Token"* }
%"class.std::__1::__compressed_pair.136" = type { %"struct.std::__1::__compressed_pair_elem.137" }
%"struct.std::__1::__compressed_pair_elem.137" = type { %"class.std::__1::vector.129"* }
%"struct.jxl::EntropyEncodingData" = type { %"class.std::__1::vector.141", i8, %"class.std::__1::vector.149", %"struct.jxl::LZ77Params" }
%"class.std::__1::vector.141" = type { %"class.std::__1::__vector_base.142" }
%"class.std::__1::__vector_base.142" = type { %"class.std::__1::vector.143"*, %"class.std::__1::vector.143"*, %"class.std::__1::__compressed_pair.144" }
%"class.std::__1::vector.143" = type { %"class.std::__1::__vector_base.165" }
%"class.std::__1::__vector_base.165" = type { %"struct.jxl::ANSEncSymbolInfo"*, %"struct.jxl::ANSEncSymbolInfo"*, %"class.std::__1::__compressed_pair.173" }
%"struct.jxl::ANSEncSymbolInfo" = type <{ i16, [6 x i8], %"class.std::__1::vector.166", i64, i8, i8, i16, [4 x i8] }>
%"class.std::__1::vector.166" = type { %"class.std::__1::__vector_base.167" }
%"class.std::__1::__vector_base.167" = type { i16*, i16*, %"class.std::__1::__compressed_pair.168" }
%"class.std::__1::__compressed_pair.168" = type { %"struct.std::__1::__compressed_pair_elem.169" }
%"struct.std::__1::__compressed_pair_elem.169" = type { i16* }
%"class.std::__1::__compressed_pair.173" = type { %"struct.std::__1::__compressed_pair_elem.174" }
%"struct.std::__1::__compressed_pair_elem.174" = type { %"struct.jxl::ANSEncSymbolInfo"* }
%"class.std::__1::__compressed_pair.144" = type { %"struct.std::__1::__compressed_pair_elem.145" }
%"struct.std::__1::__compressed_pair_elem.145" = type { %"class.std::__1::vector.143"* }
%"class.std::__1::vector.149" = type { %"class.std::__1::__vector_base.150" }
%"class.std::__1::__vector_base.150" = type { %"struct.jxl::HybridUintConfig"*, %"struct.jxl::HybridUintConfig"*, %"class.std::__1::__compressed_pair.151" }
%"struct.jxl::HybridUintConfig" = type { i32, i32, i32, i32 }
%"class.std::__1::__compressed_pair.151" = type { %"struct.std::__1::__compressed_pair_elem.152" }
%"struct.std::__1::__compressed_pair_elem.152" = type { %"struct.jxl::HybridUintConfig"* }
%"struct.jxl::LZ77Params" = type { %"class.jxl::Fields", i8, i32, i32, %"struct.jxl::HybridUintConfig", i64 }
%"struct.jxl::HistogramParams" = type <{ i32, i32, i32, i32, %"class.std::__1::vector.156", i64, i8, [7 x i8] }>
%"class.std::__1::vector.156" = type { %"class.std::__1::__vector_base.157" }
%"class.std::__1::__vector_base.157" = type { i64*, i64*, %"class.std::__1::__compressed_pair.158" }
%"class.std::__1::__compressed_pair.158" = type { %"struct.std::__1::__compressed_pair_elem.159" }
%"struct.std::__1::__compressed_pair_elem.159" = type { i64* }
%"class.std::__1::__vector_base_common" = type { i8 }

$_ZZNK3jxl10AcStrategy19log2_covered_blocksEvE4kLut = comdat any

$_ZZNK3jxl10AcStrategy16covered_blocks_xEvE4kLut = comdat any

$_ZZNK3jxl10AcStrategy16covered_blocks_yEvE4kLut = comdat any

@_ZN3jxlL14kStrategyOrderE = internal unnamed_addr constant [27 x i8] c"\00\01\01\01\02\03\04\04\05\05\06\06\01\01\01\01\01\01\07\08\08\09\0A\0A\0B\0C\0C", align 16
@_ZZNK3jxl10AcStrategy19log2_covered_blocksEvE4kLut = linkonce_odr hidden local_unnamed_addr constant [27 x i8] c"\00\00\00\00\02\04\01\01\02\02\03\03\00\00\00\00\00\00\06\05\05\08\07\07\0A\09\09", comdat, align 16
@_ZN3jxlL17kCoeffOrderOffsetE = internal unnamed_addr constant [40 x i64] [i64 0, i64 1, i64 2, i64 3, i64 4, i64 5, i64 6, i64 10, i64 14, i64 18, i64 34, i64 50, i64 66, i64 68, i64 70, i64 72, i64 76, i64 80, i64 84, i64 92, i64 100, i64 108, i64 172, i64 236, i64 300, i64 332, i64 364, i64 396, i64 652, i64 908, i64 1164, i64 1292, i64 1420, i64 1548, i64 2572, i64 3596, i64 4620, i64 5132, i64 5644, i64 6156], align 16
@_ZZNK3jxl10AcStrategy16covered_blocks_xEvE4kLut = linkonce_odr hidden local_unnamed_addr constant [27 x i8] c"\01\01\01\01\02\04\01\02\01\04\02\04\01\01\01\01\01\01\08\04\08\10\08\10 \10 ", comdat, align 16
@_ZZNK3jxl10AcStrategy16covered_blocks_yEvE4kLut = linkonce_odr hidden local_unnamed_addr constant [27 x i8] c"\01\01\01\01\02\04\02\01\04\01\04\02\01\01\01\01\01\01\08\08\04\10\10\08  \10", comdat, align 16
@_ZN3jxl10AcStrategy16CoeffOrderAndLut7kOffsetE.const = private unnamed_addr constant [28 x i64] [i64 0, i64 1, i64 2, i64 3, i64 4, i64 8, i64 24, i64 26, i64 28, i64 32, i64 36, i64 44, i64 52, i64 53, i64 54, i64 55, i64 56, i64 57, i64 58, i64 122, i64 154, i64 186, i64 442, i64 570, i64 698, i64 1722, i64 2234, i64 2746], align 16
@_ZSt7nothrow = external global %"struct.std::nothrow_t", align 1

; Function Attrs: nounwind ssp uwtable
define hidden i32 @_ZN3jxl17ComputeUsedOrdersENS_9SpeedTierERKNS_15AcStrategyImageERKNS_4RectE(i32, %"class.jxl::AcStrategyImage"* nocapture readonly dereferenceable(48), %"class.jxl::Rect"* nocapture readonly dereferenceable(32)) local_unnamed_addr #0 {
  %4 = getelementptr inbounds %"class.jxl::AcStrategyImage", %"class.jxl::AcStrategyImage"* %1, i64 0, i32 0, i32 0, i32 0
  %5 = load i32, i32* %4, align 8
  %6 = icmp ult i32 %5, 5
  br i1 %6, label %7, label %11

7:                                                ; preds = %3
  %8 = getelementptr inbounds %"class.jxl::AcStrategyImage", %"class.jxl::AcStrategyImage"* %1, i64 0, i32 0, i32 0, i32 1
  %9 = load i32, i32* %8, align 4
  %10 = icmp ult i32 %9, 5
  br i1 %10, label %95, label %11

11:                                               ; preds = %7, %3
  %12 = icmp eq i32 %0, 7
  br i1 %12, label %95, label %13

13:                                               ; preds = %11
  %14 = getelementptr inbounds %"class.jxl::Rect", %"class.jxl::Rect"* %2, i64 0, i32 2
  %15 = load i64, i64* %14, align 8
  %16 = getelementptr inbounds %"class.jxl::Rect", %"class.jxl::Rect"* %2, i64 0, i32 3
  %17 = load i64, i64* %16, align 8
  %18 = icmp eq i64 %17, 0
  br i1 %18, label %95, label %19

19:                                               ; preds = %13
  %20 = getelementptr inbounds %"class.jxl::Rect", %"class.jxl::Rect"* %2, i64 0, i32 1
  %21 = load i64, i64* %20, align 8
  %22 = getelementptr inbounds %"class.jxl::Rect", %"class.jxl::Rect"* %2, i64 0, i32 0
  %23 = load i64, i64* %22, align 8
  %24 = getelementptr inbounds %"class.jxl::AcStrategyImage", %"class.jxl::AcStrategyImage"* %1, i64 0, i32 0, i32 0, i32 5, i32 0, i32 0, i32 0
  %25 = load i8*, i8** %24, align 8
  %26 = getelementptr inbounds %"class.jxl::AcStrategyImage", %"class.jxl::AcStrategyImage"* %1, i64 0, i32 0, i32 0, i32 4
  %27 = load i64, i64* %26, align 8
  %28 = and i64 %15, 1
  %29 = icmp eq i64 %15, 1
  %30 = sub i64 %15, %28
  %31 = icmp eq i64 %28, 0
  br label %32

32:                                               ; preds = %59, %19
  %33 = phi i64 [ 0, %19 ], [ %61, %59 ]
  %34 = phi i32 [ 0, %19 ], [ %60, %59 ]
  %35 = add i64 %21, %33
  %36 = mul i64 %27, %35
  %37 = getelementptr inbounds i8, i8* %25, i64 %36
  %38 = ptrtoint i8* %37 to i64
  %39 = and i64 %38, 63
  %40 = icmp eq i64 %39, 0
  tail call void @llvm.assume(i1 %40) #3
  %41 = getelementptr inbounds i8, i8* %37, i64 %23
  switch i64 %15, label %63 [
    i64 0, label %59
    i64 1, label %42
  ]

42:                                               ; preds = %63, %32
  %43 = phi i32 [ undef, %32 ], [ %91, %63 ]
  %44 = phi i64 [ 0, %32 ], [ %92, %63 ]
  %45 = phi i32 [ %34, %32 ], [ %91, %63 ]
  br i1 %31, label %59, label %46

46:                                               ; preds = %42
  %47 = getelementptr inbounds i8, i8* %41, i64 %44
  %48 = load i8, i8* %47, align 1
  %49 = lshr i8 %48, 1
  %50 = zext i8 %49 to i64
  %51 = add nsw i64 %50, -18
  %52 = icmp ult i64 %51, 9
  %53 = getelementptr inbounds [27 x i8], [27 x i8]* @_ZN3jxlL14kStrategyOrderE, i64 0, i64 %50
  %54 = load i8, i8* %53, align 1
  %55 = zext i8 %54 to i32
  %56 = shl i32 1, %55
  %57 = select i1 %52, i32 0, i32 %56
  %58 = or i32 %57, %45
  br label %59

59:                                               ; preds = %46, %42, %32
  %60 = phi i32 [ %34, %32 ], [ %43, %42 ], [ %58, %46 ]
  %61 = add nuw i64 %33, 1
  %62 = icmp eq i64 %61, %17
  br i1 %62, label %95, label %32

63:                                               ; preds = %32, %63
  %64 = phi i64 [ %92, %63 ], [ 0, %32 ]
  %65 = phi i32 [ %91, %63 ], [ %34, %32 ]
  %66 = phi i64 [ %93, %63 ], [ %30, %32 ]
  %67 = getelementptr inbounds i8, i8* %41, i64 %64
  %68 = load i8, i8* %67, align 1
  %69 = lshr i8 %68, 1
  %70 = zext i8 %69 to i64
  %71 = getelementptr inbounds [27 x i8], [27 x i8]* @_ZN3jxlL14kStrategyOrderE, i64 0, i64 %70
  %72 = load i8, i8* %71, align 1
  %73 = add nsw i64 %70, -18
  %74 = icmp ult i64 %73, 9
  %75 = zext i8 %72 to i32
  %76 = shl i32 1, %75
  %77 = select i1 %74, i32 0, i32 %76
  %78 = or i32 %77, %65
  %79 = or i64 %64, 1
  %80 = getelementptr inbounds i8, i8* %41, i64 %79
  %81 = load i8, i8* %80, align 1
  %82 = lshr i8 %81, 1
  %83 = zext i8 %82 to i64
  %84 = getelementptr inbounds [27 x i8], [27 x i8]* @_ZN3jxlL14kStrategyOrderE, i64 0, i64 %83
  %85 = load i8, i8* %84, align 1
  %86 = add nsw i64 %83, -18
  %87 = icmp ult i64 %86, 9
  %88 = zext i8 %85 to i32
  %89 = shl i32 1, %88
  %90 = select i1 %87, i32 0, i32 %89
  %91 = or i32 %90, %78
  %92 = add nuw i64 %64, 2
  %93 = add i64 %66, -2
  %94 = icmp eq i64 %93, 0
  br i1 %94, label %42, label %63

95:                                               ; preds = %59, %13, %11, %7
  %96 = phi i32 [ 0, %7 ], [ 1, %11 ], [ 0, %13 ], [ %60, %59 ]
  ret i32 %96
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN3jxl17ComputeCoeffOrderENS_9SpeedTierERKNS_7ACImageERKNS_15AcStrategyImageERKNS_15FrameDimensionsERjPj(i32, %"class.jxl::ACImage"* dereferenceable(8), %"class.jxl::AcStrategyImage"* nocapture readonly dereferenceable(48), %"struct.jxl::FrameDimensions"* nocapture readonly dereferenceable(144), i32* nocapture dereferenceable(4), i32* noalias) local_unnamed_addr #0 {
  %7 = alloca %class.anon.8, align 1
  %8 = alloca [3 x %"union.jxl::ConstACPtr"], align 16
  %9 = tail call i8* @_Znwm(i64 1575936) #11
  %10 = bitcast i8* %9 to i32*
  tail call void @llvm.memset.p0i8.i64(i8* nonnull align 4 %9, i8 0, i64 1575936, i1 false) #3
  %11 = load i32, i32* %4, align 4
  %12 = icmp eq i32 %11, 0
  br i1 %12, label %332, label %13

13:                                               ; preds = %6
  %14 = icmp sgt i32 %0, 2
  %15 = icmp eq i32 %11, 1
  %16 = and i1 %14, %15
  %17 = select i1 %16, i64 2147483647, i64 4294967295
  %18 = getelementptr inbounds %"struct.jxl::FrameDimensions", %"struct.jxl::FrameDimensions"* %3, i64 0, i32 14
  %19 = load i64, i64* %18, align 8
  %20 = icmp eq i64 %19, 0
  br i1 %20, label %332, label %21

21:                                               ; preds = %13
  %22 = getelementptr inbounds %"struct.jxl::FrameDimensions", %"struct.jxl::FrameDimensions"* %3, i64 0, i32 10
  %23 = getelementptr inbounds %"struct.jxl::FrameDimensions", %"struct.jxl::FrameDimensions"* %3, i64 0, i32 8
  %24 = getelementptr inbounds %"struct.jxl::FrameDimensions", %"struct.jxl::FrameDimensions"* %3, i64 0, i32 9
  %25 = bitcast [3 x %"union.jxl::ConstACPtr"]* %8 to i8*
  %26 = getelementptr inbounds [3 x %"union.jxl::ConstACPtr"], [3 x %"union.jxl::ConstACPtr"]* %8, i64 0, i64 0, i32 0
  %27 = getelementptr inbounds [3 x %"union.jxl::ConstACPtr"], [3 x %"union.jxl::ConstACPtr"]* %8, i64 0, i64 1, i32 0
  %28 = getelementptr inbounds [3 x %"union.jxl::ConstACPtr"], [3 x %"union.jxl::ConstACPtr"]* %8, i64 0, i64 2, i32 0
  %29 = bitcast %"class.jxl::ACImage"* %1 to i32 (%"class.jxl::ACImage"*)***
  %30 = bitcast %"class.jxl::ACImage"* %1 to i32* (%"class.jxl::ACImage"*, i64, i64, i64)***
  %31 = getelementptr inbounds %"class.jxl::AcStrategyImage", %"class.jxl::AcStrategyImage"* %2, i64 0, i32 0, i32 0, i32 5, i32 0, i32 0, i32 0
  %32 = getelementptr inbounds %"class.jxl::AcStrategyImage", %"class.jxl::AcStrategyImage"* %2, i64 0, i32 0, i32 0, i32 4
  br label %33

33:                                               ; preds = %21, %74
  %34 = phi i64 [ 0, %21 ], [ %77, %74 ]
  %35 = phi i64 [ -7723592293110705685, %21 ], [ %76, %74 ]
  %36 = phi i64 [ -4658895280553007687, %21 ], [ %75, %74 ]
  %37 = load i64, i64* %22, align 8
  %38 = urem i64 %34, %37
  %39 = udiv i64 %34, %37
  %40 = shl i64 %38, 5
  %41 = shl i64 %39, 5
  %42 = load i64, i64* %23, align 8
  %43 = load i64, i64* %24, align 8
  %44 = add i64 %40, 32
  %45 = tail call i64 @llvm.usub.sat.i64(i64 %42, i64 %40) #3
  %46 = add i64 %41, 32
  %47 = tail call i64 @llvm.usub.sat.i64(i64 %43, i64 %41) #3
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %25) #3
  %48 = load i32 (%"class.jxl::ACImage"*)**, i32 (%"class.jxl::ACImage"*)*** %29, align 8
  %49 = getelementptr inbounds i32 (%"class.jxl::ACImage"*)*, i32 (%"class.jxl::ACImage"*)** %48, i64 2
  %50 = load i32 (%"class.jxl::ACImage"*)*, i32 (%"class.jxl::ACImage"*)** %49, align 8
  %51 = tail call i32 %50(%"class.jxl::ACImage"* %1) #3
  %52 = load i32* (%"class.jxl::ACImage"*, i64, i64, i64)**, i32* (%"class.jxl::ACImage"*, i64, i64, i64)*** %30, align 8
  %53 = getelementptr inbounds i32* (%"class.jxl::ACImage"*, i64, i64, i64)*, i32* (%"class.jxl::ACImage"*, i64, i64, i64)** %52, i64 4
  %54 = load i32* (%"class.jxl::ACImage"*, i64, i64, i64)*, i32* (%"class.jxl::ACImage"*, i64, i64, i64)** %53, align 8
  %55 = tail call i32* %54(%"class.jxl::ACImage"* %1, i64 0, i64 %34, i64 0) #3
  store i32* %55, i32** %26, align 16
  %56 = load i32* (%"class.jxl::ACImage"*, i64, i64, i64)**, i32* (%"class.jxl::ACImage"*, i64, i64, i64)*** %30, align 8
  %57 = getelementptr inbounds i32* (%"class.jxl::ACImage"*, i64, i64, i64)*, i32* (%"class.jxl::ACImage"*, i64, i64, i64)** %56, i64 4
  %58 = load i32* (%"class.jxl::ACImage"*, i64, i64, i64)*, i32* (%"class.jxl::ACImage"*, i64, i64, i64)** %57, align 8
  %59 = tail call i32* %58(%"class.jxl::ACImage"* %1, i64 1, i64 %34, i64 0) #3
  store i32* %59, i32** %27, align 8
  %60 = load i32* (%"class.jxl::ACImage"*, i64, i64, i64)**, i32* (%"class.jxl::ACImage"*, i64, i64, i64)*** %30, align 8
  %61 = getelementptr inbounds i32* (%"class.jxl::ACImage"*, i64, i64, i64)*, i32* (%"class.jxl::ACImage"*, i64, i64, i64)** %60, i64 4
  %62 = load i32* (%"class.jxl::ACImage"*, i64, i64, i64)*, i32* (%"class.jxl::ACImage"*, i64, i64, i64)** %61, align 8
  %63 = tail call i32* %62(%"class.jxl::ACImage"* %1, i64 2, i64 %34, i64 0) #3
  store i32* %63, i32** %28, align 16
  %64 = icmp ugt i64 %44, %42
  %65 = select i1 %64, i64 %45, i64 32
  %66 = icmp ugt i64 %46, %43
  %67 = select i1 %66, i64 %47, i64 32
  %68 = icmp eq i64 %67, 0
  br i1 %68, label %74, label %69

69:                                               ; preds = %33
  %70 = icmp eq i64 %65, 0
  %71 = icmp eq i32 %51, 0
  %72 = load i8*, i8** %31, align 8
  %73 = load i64, i64* %32, align 8
  br label %80

74:                                               ; preds = %92, %33
  %75 = phi i64 [ %36, %33 ], [ %93, %92 ]
  %76 = phi i64 [ %35, %33 ], [ %94, %92 ]
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %25) #3
  %77 = add nuw i64 %34, 1
  %78 = load i64, i64* %18, align 8
  %79 = icmp ult i64 %77, %78
  br i1 %79, label %33, label %332

80:                                               ; preds = %92, %69
  %81 = phi i64 [ 0, %69 ], [ %95, %92 ]
  %82 = phi i64 [ 0, %69 ], [ %96, %92 ]
  %83 = phi i64 [ %35, %69 ], [ %94, %92 ]
  %84 = phi i64 [ %36, %69 ], [ %93, %92 ]
  %85 = add i64 %82, %41
  %86 = mul i64 %73, %85
  %87 = getelementptr inbounds i8, i8* %72, i64 %86
  %88 = ptrtoint i8* %87 to i64
  %89 = and i64 %88, 63
  %90 = icmp eq i64 %89, 0
  tail call void @llvm.assume(i1 %90) #3
  %91 = getelementptr inbounds i8, i8* %87, i64 %40
  br i1 %70, label %92, label %98

92:                                               ; preds = %326, %80
  %93 = phi i64 [ %84, %80 ], [ %327, %326 ]
  %94 = phi i64 [ %83, %80 ], [ %328, %326 ]
  %95 = phi i64 [ %81, %80 ], [ %329, %326 ]
  %96 = add nuw i64 %82, 1
  %97 = icmp eq i64 %96, %67
  br i1 %97, label %74, label %80

98:                                               ; preds = %80, %326
  %99 = phi i64 [ %329, %326 ], [ %81, %80 ]
  %100 = phi i64 [ %330, %326 ], [ 0, %80 ]
  %101 = phi i64 [ %328, %326 ], [ %83, %80 ]
  %102 = phi i64 [ %327, %326 ], [ %84, %80 ]
  %103 = getelementptr inbounds i8, i8* %91, i64 %100
  %104 = load i8, i8* %103, align 1
  %105 = lshr i8 %104, 1
  %106 = and i8 %104, 1
  %107 = icmp eq i8 %106, 0
  br i1 %107, label %326, label %108

108:                                              ; preds = %98
  %109 = add i64 %101, %102
  %110 = shl i64 %101, 23
  %111 = xor i64 %110, %101
  %112 = lshr i64 %111, 18
  %113 = lshr i64 %102, 5
  %114 = xor i64 %113, %102
  %115 = xor i64 %114, %111
  %116 = xor i64 %115, %112
  %117 = lshr i64 %109, 32
  %118 = icmp ugt i64 %117, %17
  br i1 %118, label %326, label %119

119:                                              ; preds = %108
  %120 = zext i8 %105 to i64
  %121 = getelementptr inbounds [27 x i8], [27 x i8]* @_ZZNK3jxl10AcStrategy19log2_covered_blocksEvE4kLut, i64 0, i64 %120
  %122 = load i8, i8* %121, align 1
  %123 = zext i8 %122 to i64
  %124 = shl i64 64, %123
  %125 = getelementptr inbounds [27 x i8], [27 x i8]* @_ZN3jxlL14kStrategyOrderE, i64 0, i64 %120
  %126 = load i8, i8* %125, align 1
  %127 = zext i8 %126 to i64
  %128 = mul nuw nsw i64 %127, 3
  %129 = getelementptr inbounds [27 x i8], [27 x i8]* @_ZZNK3jxl10AcStrategy16covered_blocks_xEvE4kLut, i64 0, i64 %120
  %130 = load i8, i8* %129, align 1
  %131 = getelementptr inbounds [27 x i8], [27 x i8]* @_ZZNK3jxl10AcStrategy16covered_blocks_yEvE4kLut, i64 0, i64 %120
  %132 = load i8, i8* %131, align 1
  %133 = icmp ult i8 %132, %130
  %134 = select i1 %133, i8 %132, i8 %130
  %135 = zext i8 %134 to i64
  %136 = select i1 %133, i8 %130, i8 %132
  %137 = zext i8 %136 to i64
  %138 = icmp eq i8 %134, 0
  %139 = icmp eq i8 %136, 0
  %140 = shl nuw nsw i64 %137, 5
  %141 = shl nuw nsw i64 %137, 2
  %142 = icmp ugt i64 %124, 1
  %143 = select i1 %142, i64 %124, i64 1
  %144 = icmp ugt i64 %124, 1
  %145 = select i1 %144, i64 %124, i64 1
  %146 = shl i64 %145, 2
  %147 = getelementptr i8, i8* %9, i64 %146
  %148 = add i64 %99, %145
  %149 = icmp ugt i64 %124, 1
  %150 = select i1 %149, i64 %124, i64 1
  %151 = icmp ugt i64 %124, 1
  %152 = select i1 %151, i64 %124, i64 1
  %153 = shl i64 %152, 2
  %154 = getelementptr i8, i8* %9, i64 %153
  %155 = add i64 %99, %152
  %156 = add nsw i64 %135, -1
  %157 = icmp ult i64 %150, 8
  %158 = and i64 %150, -8
  %159 = icmp eq i64 %150, %158
  %160 = icmp ult i64 %143, 8
  %161 = and i64 %143, -8
  %162 = icmp eq i64 %143, %161
  %163 = and i64 %135, 3
  %164 = icmp ult i64 %156, 3
  %165 = sub nsw i64 %135, %163
  %166 = icmp eq i64 %163, 0
  br label %169

167:                                              ; preds = %323
  %168 = add i64 %124, %99
  br label %326

169:                                              ; preds = %323, %119
  %170 = phi i64 [ 0, %119 ], [ %324, %323 ]
  %171 = add nuw nsw i64 %128, %170
  %172 = getelementptr inbounds [40 x i64], [40 x i64]* @_ZN3jxlL17kCoeffOrderOffsetE, i64 0, i64 %171
  %173 = load i64, i64* %172, align 8
  %174 = shl i64 %173, 6
  br i1 %71, label %218, label %175

175:                                              ; preds = %169
  %176 = getelementptr inbounds [3 x %"union.jxl::ConstACPtr"], [3 x %"union.jxl::ConstACPtr"]* %8, i64 0, i64 %170, i32 0
  %177 = load i32*, i32** %176, align 8
  br i1 %157, label %178, label %180

178:                                              ; preds = %217, %180, %175
  %179 = phi i64 [ 0, %180 ], [ 0, %175 ], [ %158, %217 ]
  br label %275

180:                                              ; preds = %175
  %181 = shl i64 %173, 8
  %182 = getelementptr i8, i8* %9, i64 %181
  %183 = getelementptr i8, i8* %154, i64 %181
  %184 = getelementptr i32, i32* %177, i64 %99
  %185 = bitcast i32* %184 to i8*
  %186 = getelementptr i32, i32* %177, i64 %155
  %187 = bitcast i32* %186 to i8*
  %188 = icmp ult i8* %182, %187
  %189 = icmp ugt i8* %183, %185
  %190 = and i1 %188, %189
  br i1 %190, label %178, label %191

191:                                              ; preds = %180, %191
  %192 = phi i64 [ %215, %191 ], [ 0, %180 ]
  %193 = add i64 %192, %99
  %194 = getelementptr inbounds i32, i32* %177, i64 %193
  %195 = bitcast i32* %194 to <4 x i32>*
  %196 = load <4 x i32>, <4 x i32>* %195, align 4, !alias.scope !2
  %197 = getelementptr inbounds i32, i32* %194, i64 4
  %198 = bitcast i32* %197 to <4 x i32>*
  %199 = load <4 x i32>, <4 x i32>* %198, align 4, !alias.scope !2
  %200 = icmp eq <4 x i32> %196, zeroinitializer
  %201 = icmp eq <4 x i32> %199, zeroinitializer
  %202 = zext <4 x i1> %200 to <4 x i32>
  %203 = zext <4 x i1> %201 to <4 x i32>
  %204 = add i64 %192, %174
  %205 = getelementptr inbounds i32, i32* %10, i64 %204
  %206 = bitcast i32* %205 to <4 x i32>*
  %207 = load <4 x i32>, <4 x i32>* %206, align 4, !alias.scope !5, !noalias !2
  %208 = getelementptr inbounds i32, i32* %205, i64 4
  %209 = bitcast i32* %208 to <4 x i32>*
  %210 = load <4 x i32>, <4 x i32>* %209, align 4, !alias.scope !5, !noalias !2
  %211 = add nsw <4 x i32> %207, %202
  %212 = add nsw <4 x i32> %210, %203
  %213 = bitcast i32* %205 to <4 x i32>*
  store <4 x i32> %211, <4 x i32>* %213, align 4, !alias.scope !5, !noalias !2
  %214 = bitcast i32* %208 to <4 x i32>*
  store <4 x i32> %212, <4 x i32>* %214, align 4, !alias.scope !5, !noalias !2
  %215 = add i64 %192, 8
  %216 = icmp eq i64 %215, %158
  br i1 %216, label %217, label %191, !llvm.loop !7

217:                                              ; preds = %191
  br i1 %159, label %288, label %178

218:                                              ; preds = %169
  %219 = getelementptr inbounds [3 x %"union.jxl::ConstACPtr"], [3 x %"union.jxl::ConstACPtr"]* %8, i64 0, i64 %170
  %220 = bitcast %"union.jxl::ConstACPtr"* %219 to i16**
  %221 = load i16*, i16** %220, align 8
  br i1 %160, label %260, label %222

222:                                              ; preds = %218
  %223 = shl i64 %173, 8
  %224 = getelementptr i8, i8* %9, i64 %223
  %225 = getelementptr i8, i8* %147, i64 %223
  %226 = getelementptr i16, i16* %221, i64 %99
  %227 = bitcast i16* %226 to i8*
  %228 = getelementptr i16, i16* %221, i64 %148
  %229 = bitcast i16* %228 to i8*
  %230 = icmp ult i8* %224, %229
  %231 = icmp ugt i8* %225, %227
  %232 = and i1 %230, %231
  br i1 %232, label %260, label %233

233:                                              ; preds = %222, %233
  %234 = phi i64 [ %257, %233 ], [ 0, %222 ]
  %235 = add i64 %234, %99
  %236 = getelementptr inbounds i16, i16* %221, i64 %235
  %237 = bitcast i16* %236 to <4 x i16>*
  %238 = load <4 x i16>, <4 x i16>* %237, align 2, !alias.scope !9
  %239 = getelementptr inbounds i16, i16* %236, i64 4
  %240 = bitcast i16* %239 to <4 x i16>*
  %241 = load <4 x i16>, <4 x i16>* %240, align 2, !alias.scope !9
  %242 = icmp eq <4 x i16> %238, zeroinitializer
  %243 = icmp eq <4 x i16> %241, zeroinitializer
  %244 = zext <4 x i1> %242 to <4 x i32>
  %245 = zext <4 x i1> %243 to <4 x i32>
  %246 = add i64 %234, %174
  %247 = getelementptr inbounds i32, i32* %10, i64 %246
  %248 = bitcast i32* %247 to <4 x i32>*
  %249 = load <4 x i32>, <4 x i32>* %248, align 4, !alias.scope !12, !noalias !9
  %250 = getelementptr inbounds i32, i32* %247, i64 4
  %251 = bitcast i32* %250 to <4 x i32>*
  %252 = load <4 x i32>, <4 x i32>* %251, align 4, !alias.scope !12, !noalias !9
  %253 = add nsw <4 x i32> %249, %244
  %254 = add nsw <4 x i32> %252, %245
  %255 = bitcast i32* %247 to <4 x i32>*
  store <4 x i32> %253, <4 x i32>* %255, align 4, !alias.scope !12, !noalias !9
  %256 = bitcast i32* %250 to <4 x i32>*
  store <4 x i32> %254, <4 x i32>* %256, align 4, !alias.scope !12, !noalias !9
  %257 = add i64 %234, 8
  %258 = icmp eq i64 %257, %161
  br i1 %258, label %259, label %233, !llvm.loop !14

259:                                              ; preds = %233
  br i1 %162, label %288, label %260

260:                                              ; preds = %259, %222, %218
  %261 = phi i64 [ 0, %222 ], [ 0, %218 ], [ %161, %259 ]
  br label %262

262:                                              ; preds = %260, %262
  %263 = phi i64 [ %273, %262 ], [ %261, %260 ]
  %264 = add i64 %263, %99
  %265 = getelementptr inbounds i16, i16* %221, i64 %264
  %266 = load i16, i16* %265, align 2
  %267 = icmp eq i16 %266, 0
  %268 = zext i1 %267 to i32
  %269 = add i64 %263, %174
  %270 = getelementptr inbounds i32, i32* %10, i64 %269
  %271 = load i32, i32* %270, align 4
  %272 = add nsw i32 %271, %268
  store i32 %272, i32* %270, align 4
  %273 = add nuw i64 %263, 1
  %274 = icmp ult i64 %273, %124
  br i1 %274, label %262, label %288, !llvm.loop !15

275:                                              ; preds = %178, %275
  %276 = phi i64 [ %286, %275 ], [ %179, %178 ]
  %277 = add i64 %276, %99
  %278 = getelementptr inbounds i32, i32* %177, i64 %277
  %279 = load i32, i32* %278, align 4
  %280 = icmp eq i32 %279, 0
  %281 = zext i1 %280 to i32
  %282 = add i64 %276, %174
  %283 = getelementptr inbounds i32, i32* %10, i64 %282
  %284 = load i32, i32* %283, align 4
  %285 = add nsw i32 %284, %281
  store i32 %285, i32* %283, align 4
  %286 = add nuw i64 %276, 1
  %287 = icmp ult i64 %286, %124
  br i1 %287, label %275, label %288, !llvm.loop !16

288:                                              ; preds = %275, %262, %217, %259
  br i1 %138, label %323, label %289

289:                                              ; preds = %288
  %290 = shl i64 %173, 8
  br i1 %164, label %310, label %291

291:                                              ; preds = %289, %494
  %292 = phi i64 [ %495, %494 ], [ 0, %289 ]
  %293 = phi i64 [ %496, %494 ], [ %165, %289 ]
  br i1 %139, label %494, label %294

294:                                              ; preds = %291
  %295 = mul nuw nsw i64 %140, %292
  %296 = add i64 %290, %295
  %297 = getelementptr i8, i8* %9, i64 %296
  call void @llvm.memset.p0i8.i64(i8* align 4 %297, i8 -1, i64 %141, i1 false)
  %298 = or i64 %292, 1
  %299 = mul nuw nsw i64 %140, %298
  %300 = add i64 %290, %299
  %301 = getelementptr i8, i8* %9, i64 %300
  call void @llvm.memset.p0i8.i64(i8* align 4 %301, i8 -1, i64 %141, i1 false)
  %302 = or i64 %292, 2
  %303 = mul nuw nsw i64 %140, %302
  %304 = add i64 %290, %303
  %305 = getelementptr i8, i8* %9, i64 %304
  call void @llvm.memset.p0i8.i64(i8* align 4 %305, i8 -1, i64 %141, i1 false)
  %306 = or i64 %292, 3
  %307 = mul nuw nsw i64 %140, %306
  %308 = add i64 %290, %307
  %309 = getelementptr i8, i8* %9, i64 %308
  call void @llvm.memset.p0i8.i64(i8* align 4 %309, i8 -1, i64 %141, i1 false)
  br label %494

310:                                              ; preds = %494, %289
  %311 = phi i64 [ 0, %289 ], [ %495, %494 ]
  br i1 %166, label %323, label %312

312:                                              ; preds = %310, %319
  %313 = phi i64 [ %320, %319 ], [ %311, %310 ]
  %314 = phi i64 [ %321, %319 ], [ %163, %310 ]
  br i1 %139, label %319, label %315

315:                                              ; preds = %312
  %316 = mul nuw nsw i64 %140, %313
  %317 = add i64 %290, %316
  %318 = getelementptr i8, i8* %9, i64 %317
  call void @llvm.memset.p0i8.i64(i8* align 4 %318, i8 -1, i64 %141, i1 false)
  br label %319

319:                                              ; preds = %315, %312
  %320 = add nuw nsw i64 %313, 1
  %321 = add i64 %314, -1
  %322 = icmp eq i64 %321, 0
  br i1 %322, label %323, label %312, !llvm.loop !17

323:                                              ; preds = %310, %319, %288
  %324 = add nuw nsw i64 %170, 1
  %325 = icmp eq i64 %324, 3
  br i1 %325, label %167, label %169

326:                                              ; preds = %108, %98, %167
  %327 = phi i64 [ %116, %167 ], [ %116, %108 ], [ %102, %98 ]
  %328 = phi i64 [ %102, %167 ], [ %102, %108 ], [ %101, %98 ]
  %329 = phi i64 [ %168, %167 ], [ %99, %108 ], [ %99, %98 ]
  %330 = add nuw i64 %100, 1
  %331 = icmp eq i64 %330, %65
  br i1 %331, label %92, label %98

332:                                              ; preds = %74, %13, %6
  %333 = tail call i8* @_ZN3hwy20AllocateAlignedBytesEmPFPvS0_mES0_(i64 524288, i8* (i8*, i64)* null, i8* null) #3, !noalias !19
  %334 = ptrtoint i8* %333 to i64
  %335 = bitcast i8* %333 to %struct.PosAndCount*
  %336 = getelementptr inbounds %class.anon.8, %class.anon.8* %7, i64 0, i32 0
  br label %341

337:                                              ; preds = %490
  %338 = icmp eq i8* %333, null
  br i1 %338, label %340, label %339

339:                                              ; preds = %337
  call void @_ZN3hwy16FreeAlignedBytesEPKvPFvPvS2_ES2_(i8* nonnull %333, void (i8*, i8*)* null, i8* null) #3
  br label %340

340:                                              ; preds = %337, %339
  call void @_ZdlPv(i8* nonnull %9) #11
  ret void

341:                                              ; preds = %490, %332
  %342 = phi i64 [ 0, %332 ], [ %492, %490 ]
  %343 = phi i16 [ 0, %332 ], [ %491, %490 ]
  %344 = getelementptr inbounds [27 x i8], [27 x i8]* @_ZN3jxlL14kStrategyOrderE, i64 0, i64 %342
  %345 = load i8, i8* %344, align 1
  %346 = zext i16 %343 to i32
  %347 = zext i8 %345 to i32
  %348 = shl i32 1, %347
  %349 = and i32 %348, %346
  %350 = icmp eq i32 %349, 0
  br i1 %350, label %351, label %490

351:                                              ; preds = %341
  %352 = trunc i32 %348 to i16
  %353 = or i16 %343, %352
  %354 = or i64 %342, 4294967296
  %355 = getelementptr inbounds [27 x i8], [27 x i8]* @_ZZNK3jxl10AcStrategy16covered_blocks_xEvE4kLut, i64 0, i64 %342
  %356 = load i8, i8* %355, align 1
  %357 = zext i8 %356 to i64
  %358 = shl nuw nsw i64 %357, 6
  %359 = getelementptr inbounds [27 x i8], [27 x i8]* @_ZZNK3jxl10AcStrategy16covered_blocks_yEvE4kLut, i64 0, i64 %342
  %360 = load i8, i8* %359, align 1
  %361 = zext i8 %360 to i64
  %362 = mul nuw nsw i64 %358, %361
  %363 = load i32, i32* %4, align 4
  %364 = and i32 %363, %348
  %365 = icmp eq i32 %364, 0
  br i1 %365, label %366, label %383

366:                                              ; preds = %351
  %367 = zext i8 %345 to i64
  %368 = mul nuw nsw i64 %367, 3
  %369 = getelementptr inbounds [40 x i64], [40 x i64]* @_ZN3jxlL17kCoeffOrderOffsetE, i64 0, i64 %368
  %370 = load i64, i64* %369, align 8
  %371 = shl i64 %370, 6
  %372 = getelementptr inbounds i32, i32* %5, i64 %371
  call void @_ZN3jxl15SetDefaultOrderENS_10AcStrategyEPj(i64 %354, i32* %372) #3
  %373 = add nuw nsw i64 %368, 1
  %374 = getelementptr inbounds [40 x i64], [40 x i64]* @_ZN3jxlL17kCoeffOrderOffsetE, i64 0, i64 %373
  %375 = load i64, i64* %374, align 8
  %376 = shl i64 %375, 6
  %377 = getelementptr inbounds i32, i32* %5, i64 %376
  call void @_ZN3jxl15SetDefaultOrderENS_10AcStrategyEPj(i64 %354, i32* %377) #3
  %378 = add nuw nsw i64 %368, 2
  %379 = getelementptr inbounds [40 x i64], [40 x i64]* @_ZN3jxlL17kCoeffOrderOffsetE, i64 0, i64 %378
  %380 = load i64, i64* %379, align 8
  %381 = shl i64 %380, 6
  %382 = getelementptr inbounds i32, i32* %5, i64 %381
  call void @_ZN3jxl15SetDefaultOrderENS_10AcStrategyEPj(i64 %354, i32* %382) #3
  br label %490

383:                                              ; preds = %351
  %384 = call %"struct.jxl::AcStrategy::CoeffOrderAndLut"* @_ZN3jxl10AcStrategy10CoeffOrderEv() #3
  %385 = getelementptr inbounds [28 x i64], [28 x i64]* @_ZN3jxl10AcStrategy16CoeffOrderAndLut7kOffsetE.const, i64 0, i64 %342
  %386 = load i64, i64* %385, align 8
  %387 = shl i64 %386, 6
  %388 = getelementptr inbounds %"struct.jxl::AcStrategy::CoeffOrderAndLut", %"struct.jxl::AcStrategy::CoeffOrderAndLut"* %384, i64 0, i32 0, i64 %387
  %389 = zext i8 %345 to i64
  %390 = mul nuw nsw i64 %389, 3
  %391 = uitofp i64 %362 to double
  %392 = icmp eq i64 %362, 0
  %393 = getelementptr inbounds %struct.PosAndCount, %struct.PosAndCount* %335, i64 %362
  %394 = ptrtoint %struct.PosAndCount* %393 to i64
  %395 = sub i64 %394, %334
  %396 = ashr exact i64 %395, 3
  %397 = icmp sgt i64 %395, 1024
  %398 = icmp slt i64 %396, 1152921504606846975
  %399 = select i1 %398, i64 %396, i64 1152921504606846975
  br label %403

400:                                              ; preds = %455
  %401 = and i8 %456, 1
  %402 = icmp eq i8 %401, 0
  br i1 %402, label %486, label %490

403:                                              ; preds = %455, %383
  %404 = phi i64 [ 0, %383 ], [ %457, %455 ]
  %405 = phi i8 [ 0, %383 ], [ %456, %455 ]
  %406 = add nuw nsw i64 %390, %404
  %407 = getelementptr inbounds [40 x i64], [40 x i64]* @_ZN3jxlL17kCoeffOrderOffsetE, i64 0, i64 %406
  %408 = load i64, i64* %407, align 8
  %409 = shl i64 %408, 6
  %410 = call double @sqrt(double %391) #3
  %411 = fdiv double 1.000000e+00, %410
  %412 = fptrunc double %411 to float
  br i1 %392, label %413, label %426

413:                                              ; preds = %426, %403
  call void @llvm.lifetime.start.p0i8(i64 1, i8* nonnull %336)
  br i1 %397, label %414, label %422

414:                                              ; preds = %413, %419
  %415 = phi i64 [ %420, %419 ], [ %399, %413 ]
  %416 = shl i64 %415, 3
  %417 = call noalias i8* @_ZnwmRKSt9nothrow_t(i64 %416, %"struct.std::nothrow_t"* nonnull dereferenceable(1) @_ZSt7nothrow) #3
  %418 = icmp eq i8* %417, null
  br i1 %418, label %419, label %423

419:                                              ; preds = %414
  %420 = lshr i64 %415, 1
  %421 = icmp eq i64 %420, 0
  br i1 %421, label %422, label %414

422:                                              ; preds = %419, %413
  call fastcc void @"_ZNSt3__113__stable_sortIRZN3jxl17ComputeCoeffOrderENS1_9SpeedTierERKNS1_7ACImageERKNS1_15AcStrategyImageERKNS1_15FrameDimensionsERjPjE3$_1PZNS1_17ComputeCoeffOrderES2_S5_S8_SB_SC_SD_E11PosAndCountEEvT0_SI_T_NS_15iterator_traitsISI_E15difference_typeEPNSL_10value_typeEl"(%struct.PosAndCount* %335, %struct.PosAndCount* %393, %class.anon.8* nonnull dereferenceable(1) %7, i64 %396, %struct.PosAndCount* null, i64 0) #3
  br label %425

423:                                              ; preds = %414
  %424 = bitcast i8* %417 to %struct.PosAndCount*
  call fastcc void @"_ZNSt3__113__stable_sortIRZN3jxl17ComputeCoeffOrderENS1_9SpeedTierERKNS1_7ACImageERKNS1_15AcStrategyImageERKNS1_15FrameDimensionsERjPjE3$_1PZNS1_17ComputeCoeffOrderES2_S5_S8_SB_SC_SD_E11PosAndCountEEvT0_SI_T_NS_15iterator_traitsISI_E15difference_typeEPNSL_10value_typeEl"(%struct.PosAndCount* %335, %struct.PosAndCount* %393, %class.anon.8* nonnull dereferenceable(1) %7, i64 %396, %struct.PosAndCount* nonnull %424, i64 %415) #3
  call void @_ZdlPv(i8* nonnull %417) #11
  br label %425

425:                                              ; preds = %422, %423
  call void @llvm.lifetime.end.p0i8(i64 1, i8* nonnull %336)
  br i1 %392, label %455, label %459

426:                                              ; preds = %403, %426
  %427 = phi i64 [ %453, %426 ], [ 0, %403 ]
  %428 = getelementptr inbounds i32, i32* %388, i64 %427
  %429 = load i32, i32* %428, align 4
  %430 = zext i32 %429 to i64
  %431 = getelementptr inbounds %struct.PosAndCount, %struct.PosAndCount* %335, i64 %427, i32 0
  store i32 %429, i32* %431, align 4
  %432 = add i64 %409, %430
  %433 = getelementptr inbounds i32, i32* %10, i64 %432
  %434 = load i32, i32* %433, align 4
  %435 = sitofp i32 %434 to float
  %436 = fmul float %412, %435
  %437 = fadd float %436, 0x3FB99999A0000000
  %438 = fptoui float %437 to i32
  %439 = getelementptr inbounds %struct.PosAndCount, %struct.PosAndCount* %335, i64 %427, i32 1
  store i32 %438, i32* %439, align 4
  %440 = or i64 %427, 1
  %441 = getelementptr inbounds i32, i32* %388, i64 %440
  %442 = load i32, i32* %441, align 4
  %443 = zext i32 %442 to i64
  %444 = getelementptr inbounds %struct.PosAndCount, %struct.PosAndCount* %335, i64 %440, i32 0
  store i32 %442, i32* %444, align 4
  %445 = add i64 %409, %443
  %446 = getelementptr inbounds i32, i32* %10, i64 %445
  %447 = load i32, i32* %446, align 4
  %448 = sitofp i32 %447 to float
  %449 = fmul float %412, %448
  %450 = fadd float %449, 0x3FB99999A0000000
  %451 = fptoui float %450 to i32
  %452 = getelementptr inbounds %struct.PosAndCount, %struct.PosAndCount* %335, i64 %440, i32 1
  store i32 %451, i32* %452, align 4
  %453 = add nuw nsw i64 %427, 2
  %454 = icmp eq i64 %453, %362
  br i1 %454, label %413, label %426

455:                                              ; preds = %459, %425
  %456 = phi i8 [ %405, %425 ], [ %483, %459 ]
  %457 = add nuw nsw i64 %404, 1
  %458 = icmp eq i64 %457, 3
  br i1 %458, label %400, label %403

459:                                              ; preds = %425, %459
  %460 = phi i64 [ %484, %459 ], [ 0, %425 ]
  %461 = phi i8 [ %483, %459 ], [ %405, %425 ]
  %462 = getelementptr inbounds %struct.PosAndCount, %struct.PosAndCount* %335, i64 %460, i32 0
  %463 = load i32, i32* %462, align 4
  %464 = add i64 %460, %409
  %465 = getelementptr inbounds i32, i32* %5, i64 %464
  store i32 %463, i32* %465, align 4
  %466 = getelementptr inbounds i32, i32* %388, i64 %460
  %467 = load i32, i32* %466, align 4
  %468 = load i32, i32* %462, align 4
  %469 = icmp ne i32 %467, %468
  %470 = zext i1 %469 to i8
  %471 = or i64 %460, 1
  %472 = getelementptr inbounds %struct.PosAndCount, %struct.PosAndCount* %335, i64 %471, i32 0
  %473 = load i32, i32* %472, align 4
  %474 = add i64 %471, %409
  %475 = getelementptr inbounds i32, i32* %5, i64 %474
  store i32 %473, i32* %475, align 4
  %476 = getelementptr inbounds i32, i32* %388, i64 %471
  %477 = load i32, i32* %476, align 4
  %478 = load i32, i32* %472, align 4
  %479 = icmp ne i32 %477, %478
  %480 = zext i1 %479 to i8
  %481 = and i8 %461, 1
  %482 = or i8 %481, %470
  %483 = or i8 %482, %480
  %484 = add nuw nsw i64 %460, 2
  %485 = icmp eq i64 %484, %362
  br i1 %485, label %455, label %459

486:                                              ; preds = %400
  %487 = xor i32 %348, -1
  %488 = load i32, i32* %4, align 4
  %489 = and i32 %488, %487
  store i32 %489, i32* %4, align 4
  br label %490

490:                                              ; preds = %366, %400, %486, %341
  %491 = phi i16 [ %343, %341 ], [ %353, %486 ], [ %353, %400 ], [ %353, %366 ]
  %492 = add nuw nsw i64 %342, 1
  %493 = icmp eq i64 %492, 27
  br i1 %493, label %337, label %341

494:                                              ; preds = %291, %294
  %495 = add nuw nsw i64 %292, 4
  %496 = add i64 %293, -4
  %497 = icmp eq i64 %496, 0
  br i1 %497, label %310, label %291
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #1

declare void @_ZN3jxl15SetDefaultOrderENS_10AcStrategyEPj(i64, i32*) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN3jxl17EncodePermutationEPKjmmPNS_9BitWriterEiPNS_6AuxOutE(i32* noalias nocapture readonly, i64, i64, %"struct.jxl::BitWriter"*, i32, %"struct.jxl::AuxOut"*) local_unnamed_addr #0 {
  %7 = alloca %"class.std::__1::vector.127", align 8
  %8 = alloca %"class.std::__1::vector.41", align 8
  %9 = alloca %"struct.jxl::EntropyEncodingData", align 8
  %10 = alloca %"struct.jxl::HistogramParams", align 16
  %11 = bitcast %"class.std::__1::vector.127"* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %11) #3
  %12 = getelementptr inbounds %"class.std::__1::vector.127", %"class.std::__1::vector.127"* %7, i64 0, i32 0, i32 0
  %13 = getelementptr inbounds %"class.std::__1::vector.127", %"class.std::__1::vector.127"* %7, i64 0, i32 0, i32 1
  %14 = getelementptr inbounds %"class.std::__1::vector.127", %"class.std::__1::vector.127"* %7, i64 0, i32 0, i32 2, i32 0, i32 0
  %15 = tail call i8* @_Znwm(i64 24) #11
  %16 = bitcast %"class.std::__1::vector.127"* %7 to i8**
  store i8* %15, i8** %16, align 8
  %17 = getelementptr inbounds i8, i8* %15, i64 24
  %18 = bitcast %"class.std::__1::vector.129"** %14 to i8**
  store i8* %17, i8** %18, align 8
  %19 = bitcast %"class.std::__1::vector.129"** %13 to i64*
  tail call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %15, i8 0, i64 24, i1 false) #3
  %20 = ptrtoint i8* %17 to i64
  store i64 %20, i64* %19, align 8
  %21 = bitcast i8* %15 to %"class.std::__1::vector.129"*
  tail call fastcc void @_ZN3jxl12_GLOBAL__N_119TokenizePermutationEPKjmmPNSt3__16vectorINS_5TokenENS3_9allocatorIS5_EEEE(i32* %0, i64 %1, i64 %2, %"class.std::__1::vector.129"* nonnull %21)
  %22 = bitcast %"class.std::__1::vector.41"* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %22) #3
  %23 = getelementptr inbounds %"class.std::__1::vector.41", %"class.std::__1::vector.41"* %8, i64 0, i32 0, i32 0
  %24 = getelementptr inbounds %"class.std::__1::vector.41", %"class.std::__1::vector.41"* %8, i64 0, i32 0, i32 1
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %22, i8 0, i64 24, i1 false) #3
  %25 = bitcast %"struct.jxl::EntropyEncodingData"* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 104, i8* nonnull %25) #3
  %26 = getelementptr inbounds %"struct.jxl::EntropyEncodingData", %"struct.jxl::EntropyEncodingData"* %9, i64 0, i32 1
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %26, i8 -86, i64 80, i1 false)
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %25, i8 0, i64 24, i1 false) #3
  %27 = getelementptr inbounds %"struct.jxl::EntropyEncodingData", %"struct.jxl::EntropyEncodingData"* %9, i64 0, i32 2
  %28 = bitcast %"class.std::__1::vector.149"* %27 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %28, i8 0, i64 24, i1 false) #3
  %29 = getelementptr inbounds %"struct.jxl::EntropyEncodingData", %"struct.jxl::EntropyEncodingData"* %9, i64 0, i32 3
  call void @_ZN3jxl10LZ77ParamsC1Ev(%"struct.jxl::LZ77Params"* %29) #3
  %30 = bitcast %"struct.jxl::HistogramParams"* %10 to i8*
  call void @llvm.lifetime.start.p0i8(i64 56, i8* nonnull %30) #3
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %30, i8 0, i64 56, i1 false)
  %31 = bitcast %"struct.jxl::HistogramParams"* %10 to <4 x i32>*
  store <4 x i32> <i32 2, i32 3, i32 1, i32 2>, <4 x i32>* %31, align 16
  %32 = getelementptr inbounds %"struct.jxl::HistogramParams", %"struct.jxl::HistogramParams"* %10, i64 0, i32 4
  %33 = bitcast %"class.std::__1::vector.156"* %32 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 16 %33, i8 0, i64 24, i1 false) #3
  %34 = getelementptr inbounds %"struct.jxl::HistogramParams", %"struct.jxl::HistogramParams"* %10, i64 0, i32 5
  store i64 -1, i64* %34, align 8
  %35 = getelementptr inbounds %"struct.jxl::HistogramParams", %"struct.jxl::HistogramParams"* %10, i64 0, i32 6
  store i8 0, i8* %35, align 16
  %36 = sext i32 %4 to i64
  %37 = call i64 @_ZN3jxl24BuildAndEncodeHistogramsERKNS_15HistogramParamsEmRNSt3__16vectorINS4_INS_5TokenENS3_9allocatorIS5_EEEENS6_IS8_EEEEPNS_19EntropyEncodingDataEPNS4_IhNS6_IhEEEEPNS_9BitWriterEmPNS_6AuxOutE(%"struct.jxl::HistogramParams"* nonnull dereferenceable(56) %10, i64 8, %"class.std::__1::vector.127"* nonnull dereferenceable(24) %7, %"struct.jxl::EntropyEncodingData"* nonnull %9, %"class.std::__1::vector.41"* nonnull %8, %"struct.jxl::BitWriter"* %3, i64 %36, %"struct.jxl::AuxOut"* %5) #3
  %38 = getelementptr inbounds %"struct.jxl::HistogramParams", %"struct.jxl::HistogramParams"* %10, i64 0, i32 4, i32 0, i32 0
  %39 = load i64*, i64** %38, align 16
  %40 = icmp eq i64* %39, null
  br i1 %40, label %46, label %41

41:                                               ; preds = %6
  %42 = ptrtoint i64* %39 to i64
  %43 = getelementptr inbounds %"struct.jxl::HistogramParams", %"struct.jxl::HistogramParams"* %10, i64 0, i32 4, i32 0, i32 1
  %44 = bitcast i64** %43 to i64*
  store i64 %42, i64* %44, align 8
  %45 = bitcast i64* %39 to i8*
  call void @_ZdlPv(i8* %45) #11
  br label %46

46:                                               ; preds = %6, %41
  call void @llvm.lifetime.end.p0i8(i64 56, i8* nonnull %30) #3
  %47 = load %"class.std::__1::vector.129"*, %"class.std::__1::vector.129"** %12, align 8
  call void @_ZN3jxl11WriteTokensERKNSt3__16vectorINS_5TokenENS0_9allocatorIS2_EEEERKNS_19EntropyEncodingDataERKNS1_IhNS3_IhEEEEPNS_9BitWriterEmPNS_6AuxOutE(%"class.std::__1::vector.129"* dereferenceable(24) %47, %"struct.jxl::EntropyEncodingData"* nonnull dereferenceable(104) %9, %"class.std::__1::vector.41"* nonnull dereferenceable(24) %8, %"struct.jxl::BitWriter"* %3, i64 %36, %"struct.jxl::AuxOut"* %5) #3
  %48 = getelementptr inbounds %"struct.jxl::EntropyEncodingData", %"struct.jxl::EntropyEncodingData"* %9, i64 0, i32 2, i32 0, i32 0
  %49 = load %"struct.jxl::HybridUintConfig"*, %"struct.jxl::HybridUintConfig"** %48, align 8
  %50 = icmp eq %"struct.jxl::HybridUintConfig"* %49, null
  br i1 %50, label %56, label %51

51:                                               ; preds = %46
  %52 = ptrtoint %"struct.jxl::HybridUintConfig"* %49 to i64
  %53 = getelementptr inbounds %"struct.jxl::EntropyEncodingData", %"struct.jxl::EntropyEncodingData"* %9, i64 0, i32 2, i32 0, i32 1
  %54 = bitcast %"struct.jxl::HybridUintConfig"** %53 to i64*
  store i64 %52, i64* %54, align 8
  %55 = bitcast %"struct.jxl::HybridUintConfig"* %49 to i8*
  call void @_ZdlPv(i8* %55) #11
  br label %56

56:                                               ; preds = %51, %46
  %57 = getelementptr inbounds %"struct.jxl::EntropyEncodingData", %"struct.jxl::EntropyEncodingData"* %9, i64 0, i32 0, i32 0, i32 0
  %58 = load %"class.std::__1::vector.143"*, %"class.std::__1::vector.143"** %57, align 8
  %59 = icmp eq %"class.std::__1::vector.143"* %58, null
  br i1 %59, label %101, label %60

60:                                               ; preds = %56
  %61 = bitcast %"class.std::__1::vector.143"* %58 to i8*
  %62 = getelementptr inbounds %"struct.jxl::EntropyEncodingData", %"struct.jxl::EntropyEncodingData"* %9, i64 0, i32 0, i32 0, i32 1
  %63 = load %"class.std::__1::vector.143"*, %"class.std::__1::vector.143"** %62, align 8
  %64 = icmp eq %"class.std::__1::vector.143"* %63, %58
  br i1 %64, label %99, label %65

65:                                               ; preds = %60, %94
  %66 = phi %"class.std::__1::vector.143"* [ %67, %94 ], [ %63, %60 ]
  %67 = getelementptr inbounds %"class.std::__1::vector.143", %"class.std::__1::vector.143"* %66, i64 -1
  %68 = getelementptr inbounds %"class.std::__1::vector.143", %"class.std::__1::vector.143"* %67, i64 0, i32 0, i32 0
  %69 = load %"struct.jxl::ANSEncSymbolInfo"*, %"struct.jxl::ANSEncSymbolInfo"** %68, align 8
  %70 = icmp eq %"struct.jxl::ANSEncSymbolInfo"* %69, null
  br i1 %70, label %94, label %71

71:                                               ; preds = %65
  %72 = bitcast %"struct.jxl::ANSEncSymbolInfo"* %69 to i8*
  %73 = getelementptr inbounds %"class.std::__1::vector.143", %"class.std::__1::vector.143"* %66, i64 -1, i32 0, i32 1
  %74 = load %"struct.jxl::ANSEncSymbolInfo"*, %"struct.jxl::ANSEncSymbolInfo"** %73, align 8
  %75 = icmp eq %"struct.jxl::ANSEncSymbolInfo"* %74, %69
  br i1 %75, label %92, label %76

76:                                               ; preds = %71, %87
  %77 = phi %"struct.jxl::ANSEncSymbolInfo"* [ %78, %87 ], [ %74, %71 ]
  %78 = getelementptr inbounds %"struct.jxl::ANSEncSymbolInfo", %"struct.jxl::ANSEncSymbolInfo"* %77, i64 -1
  %79 = getelementptr inbounds %"struct.jxl::ANSEncSymbolInfo", %"struct.jxl::ANSEncSymbolInfo"* %77, i64 -1, i32 2, i32 0, i32 0
  %80 = load i16*, i16** %79, align 8
  %81 = icmp eq i16* %80, null
  br i1 %81, label %87, label %82

82:                                               ; preds = %76
  %83 = ptrtoint i16* %80 to i64
  %84 = getelementptr inbounds %"struct.jxl::ANSEncSymbolInfo", %"struct.jxl::ANSEncSymbolInfo"* %77, i64 -1, i32 2, i32 0, i32 1
  %85 = bitcast i16** %84 to i64*
  store i64 %83, i64* %85, align 8
  %86 = bitcast i16* %80 to i8*
  call void @_ZdlPv(i8* %86) #11
  br label %87

87:                                               ; preds = %82, %76
  %88 = icmp eq %"struct.jxl::ANSEncSymbolInfo"* %78, %69
  br i1 %88, label %89, label %76

89:                                               ; preds = %87
  %90 = bitcast %"class.std::__1::vector.143"* %67 to i8**
  %91 = load i8*, i8** %90, align 8
  br label %92

92:                                               ; preds = %89, %71
  %93 = phi i8* [ %91, %89 ], [ %72, %71 ]
  store %"struct.jxl::ANSEncSymbolInfo"* %69, %"struct.jxl::ANSEncSymbolInfo"** %73, align 8
  call void @_ZdlPv(i8* %93) #11
  br label %94

94:                                               ; preds = %92, %65
  %95 = icmp eq %"class.std::__1::vector.143"* %67, %58
  br i1 %95, label %96, label %65

96:                                               ; preds = %94
  %97 = bitcast %"struct.jxl::EntropyEncodingData"* %9 to i8**
  %98 = load i8*, i8** %97, align 8
  br label %99

99:                                               ; preds = %96, %60
  %100 = phi i8* [ %98, %96 ], [ %61, %60 ]
  store %"class.std::__1::vector.143"* %58, %"class.std::__1::vector.143"** %62, align 8
  call void @_ZdlPv(i8* %100) #11
  br label %101

101:                                              ; preds = %56, %99
  call void @llvm.lifetime.end.p0i8(i64 104, i8* nonnull %25) #3
  %102 = load i8*, i8** %23, align 8
  %103 = icmp eq i8* %102, null
  br i1 %103, label %107, label %104

104:                                              ; preds = %101
  %105 = ptrtoint i8* %102 to i64
  %106 = bitcast i8** %24 to i64*
  store i64 %105, i64* %106, align 8
  call void @_ZdlPv(i8* nonnull %102) #11
  br label %107

107:                                              ; preds = %101, %104
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %22) #3
  %108 = load %"class.std::__1::vector.129"*, %"class.std::__1::vector.129"** %12, align 8
  %109 = icmp eq %"class.std::__1::vector.129"* %108, null
  br i1 %109, label %131, label %110

110:                                              ; preds = %107
  %111 = bitcast %"class.std::__1::vector.129"* %108 to i8*
  %112 = load %"class.std::__1::vector.129"*, %"class.std::__1::vector.129"** %13, align 8
  %113 = icmp eq %"class.std::__1::vector.129"* %112, %108
  br i1 %113, label %129, label %114

114:                                              ; preds = %110, %125
  %115 = phi %"class.std::__1::vector.129"* [ %116, %125 ], [ %112, %110 ]
  %116 = getelementptr inbounds %"class.std::__1::vector.129", %"class.std::__1::vector.129"* %115, i64 -1
  %117 = getelementptr inbounds %"class.std::__1::vector.129", %"class.std::__1::vector.129"* %116, i64 0, i32 0, i32 0
  %118 = load %"struct.jxl::Token"*, %"struct.jxl::Token"** %117, align 8
  %119 = icmp eq %"struct.jxl::Token"* %118, null
  br i1 %119, label %125, label %120

120:                                              ; preds = %114
  %121 = ptrtoint %"struct.jxl::Token"* %118 to i64
  %122 = getelementptr inbounds %"class.std::__1::vector.129", %"class.std::__1::vector.129"* %115, i64 -1, i32 0, i32 1
  %123 = bitcast %"struct.jxl::Token"** %122 to i64*
  store i64 %121, i64* %123, align 8
  %124 = bitcast %"struct.jxl::Token"* %118 to i8*
  call void @_ZdlPv(i8* %124) #11
  br label %125

125:                                              ; preds = %120, %114
  %126 = icmp eq %"class.std::__1::vector.129"* %116, %108
  br i1 %126, label %127, label %114

127:                                              ; preds = %125
  %128 = load i8*, i8** %16, align 8
  br label %129

129:                                              ; preds = %127, %110
  %130 = phi i8* [ %128, %127 ], [ %111, %110 ]
  store %"class.std::__1::vector.129"* %108, %"class.std::__1::vector.129"** %13, align 8
  call void @_ZdlPv(i8* %130) #11
  br label %131

131:                                              ; preds = %107, %129
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %11) #3
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal fastcc void @_ZN3jxl12_GLOBAL__N_119TokenizePermutationEPKjmmPNSt3__16vectorINS_5TokenENS3_9allocatorIS5_EEEE(i32* noalias nocapture readonly, i64, i64, %"class.std::__1::vector.129"*) unnamed_addr #0 {
  %5 = alloca %"class.std::__1::vector.93", align 8
  %6 = alloca %"class.std::__1::vector.93", align 8
  %7 = bitcast %"class.std::__1::vector.93"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %7) #3
  %8 = getelementptr inbounds %"class.std::__1::vector.93", %"class.std::__1::vector.93"* %5, i64 0, i32 0, i32 0
  %9 = getelementptr inbounds %"class.std::__1::vector.93", %"class.std::__1::vector.93"* %5, i64 0, i32 0, i32 1
  %10 = getelementptr inbounds %"class.std::__1::vector.93", %"class.std::__1::vector.93"* %5, i64 0, i32 0, i32 2, i32 0, i32 0
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %7, i8 0, i64 24, i1 false) #3
  %11 = icmp eq i64 %2, 0
  br i1 %11, label %31, label %12

12:                                               ; preds = %4
  %13 = icmp ugt i64 %2, 4611686018427387903
  br i1 %13, label %14, label %16

14:                                               ; preds = %12
  %15 = bitcast %"class.std::__1::vector.93"* %5 to %"class.std::__1::__vector_base_common"*
  call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* nonnull %15) #12
  unreachable

16:                                               ; preds = %12
  %17 = shl i64 %2, 2
  %18 = tail call i8* @_Znwm(i64 %17) #11
  %19 = bitcast i8* %18 to i32*
  %20 = bitcast %"class.std::__1::vector.93"* %5 to i8**
  store i8* %18, i8** %20, align 8
  %21 = getelementptr inbounds i32, i32* %19, i64 %2
  store i32* %21, i32** %10, align 8
  %22 = bitcast i32** %9 to i64*
  %23 = ptrtoint i8* %18 to i64
  %24 = add nsw i64 %2, -1
  %25 = getelementptr i32, i32* %19, i64 %24
  %26 = ptrtoint i32* %25 to i64
  %27 = sub i64 4, %23
  %28 = add i64 %27, %26
  %29 = and i64 %28, -4
  tail call void @llvm.memset.p0i8.i64(i8* nonnull align 4 %18, i8 0, i64 %29, i1 false) #3
  %30 = ptrtoint i32* %21 to i64
  store i64 %30, i64* %22, align 8
  br label %31

31:                                               ; preds = %16, %4
  %32 = phi i32* [ %19, %16 ], [ null, %4 ]
  %33 = bitcast %"class.std::__1::vector.93"* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %33) #3
  %34 = getelementptr inbounds %"class.std::__1::vector.93", %"class.std::__1::vector.93"* %6, i64 0, i32 0, i32 0
  %35 = add nuw nsw i64 %2, 1
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %33, i8 0, i64 24, i1 false) #3
  %36 = icmp ugt i64 %2, 4611686018427387902
  br i1 %36, label %37, label %39

37:                                               ; preds = %31
  %38 = bitcast %"class.std::__1::vector.93"* %6 to %"class.std::__1::__vector_base_common"*
  call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* nonnull %38) #12
  unreachable

39:                                               ; preds = %31
  %40 = getelementptr inbounds %"class.std::__1::vector.93", %"class.std::__1::vector.93"* %6, i64 0, i32 0, i32 2, i32 0, i32 0
  %41 = getelementptr inbounds %"class.std::__1::vector.93", %"class.std::__1::vector.93"* %6, i64 0, i32 0, i32 1
  %42 = shl i64 %35, 2
  %43 = tail call i8* @_Znwm(i64 %42) #11
  %44 = bitcast i8* %43 to i32*
  %45 = bitcast %"class.std::__1::vector.93"* %6 to i8**
  store i8* %43, i8** %45, align 8
  %46 = getelementptr inbounds i32, i32* %44, i64 %35
  store i32* %46, i32** %40, align 8
  %47 = bitcast i32** %41 to i64*
  %48 = ptrtoint i8* %43 to i64
  %49 = getelementptr i32, i32* %44, i64 %2
  %50 = ptrtoint i32* %49 to i64
  %51 = sub i64 4, %48
  %52 = add i64 %51, %50
  %53 = and i64 %52, -4
  tail call void @llvm.memset.p0i8.i64(i8* nonnull align 4 %43, i8 0, i64 %53, i1 false) #3
  %54 = ptrtoint i32* %46 to i64
  store i64 %54, i64* %47, align 8
  %55 = shl i64 %2, 2
  %56 = add nuw i64 %55, 4
  tail call void @llvm.memset.p0i8.i64(i8* nonnull align 4 %43, i8 0, i64 %56, i1 false) #3, !alias.scope !24, !noalias !27
  br i1 %11, label %93, label %57

57:                                               ; preds = %39, %90
  %58 = phi i64 [ %91, %90 ], [ 0, %39 ]
  %59 = getelementptr inbounds i32, i32* %0, i64 %58
  %60 = load i32, i32* %59, align 4, !alias.scope !30, !noalias !31
  %61 = add i32 %60, 1
  %62 = icmp eq i32 %61, 0
  br i1 %62, label %73, label %63

63:                                               ; preds = %57, %63
  %64 = phi i32 [ %71, %63 ], [ %61, %57 ]
  %65 = phi i32 [ %69, %63 ], [ 0, %57 ]
  %66 = zext i32 %64 to i64
  %67 = getelementptr inbounds i32, i32* %44, i64 %66
  %68 = load i32, i32* %67, align 4, !alias.scope !24, !noalias !27
  %69 = add i32 %68, %65
  %70 = add i32 %64, -1
  %71 = and i32 %70, %64
  %72 = icmp eq i32 %71, 0
  br i1 %72, label %73, label %63

73:                                               ; preds = %63, %57
  %74 = phi i32 [ 0, %57 ], [ %69, %63 ]
  %75 = sub i32 %60, %74
  %76 = getelementptr inbounds i32, i32* %32, i64 %58
  store i32 %75, i32* %76, align 4, !alias.scope !32, !noalias !33
  %77 = zext i32 %61 to i64
  %78 = icmp ugt i64 %77, %2
  br i1 %78, label %90, label %79

79:                                               ; preds = %73, %79
  %80 = phi i64 [ %88, %79 ], [ %77, %73 ]
  %81 = phi i32 [ %87, %79 ], [ %61, %73 ]
  %82 = getelementptr inbounds i32, i32* %44, i64 %80
  %83 = load i32, i32* %82, align 4, !alias.scope !24, !noalias !27
  %84 = add i32 %83, 1
  store i32 %84, i32* %82, align 4, !alias.scope !24, !noalias !27
  %85 = sub i32 0, %81
  %86 = and i32 %81, %85
  %87 = add i32 %86, %81
  %88 = zext i32 %87 to i64
  %89 = icmp ugt i64 %88, %2
  br i1 %89, label %90, label %79

90:                                               ; preds = %79, %73
  %91 = add nuw i64 %58, 1
  %92 = icmp eq i64 %91, %2
  br i1 %92, label %93, label %57

93:                                               ; preds = %90, %39
  br label %94

94:                                               ; preds = %93, %97
  %95 = phi i64 [ %98, %97 ], [ %2, %93 ]
  %96 = icmp ugt i64 %95, %1
  br i1 %96, label %97, label %102

97:                                               ; preds = %94
  %98 = add i64 %95, -1
  %99 = getelementptr inbounds i32, i32* %32, i64 %98
  %100 = load i32, i32* %99, align 4
  %101 = icmp eq i32 %100, 0
  br i1 %101, label %94, label %102

102:                                              ; preds = %94, %97
  %103 = trunc i64 %2 to i32
  %104 = tail call i32 @_ZN3jxl17CoeffOrderContextEj(i32 %103) #3
  %105 = sub i64 %95, %1
  %106 = getelementptr inbounds %"class.std::__1::vector.129", %"class.std::__1::vector.129"* %3, i64 0, i32 0, i32 1
  %107 = load %"struct.jxl::Token"*, %"struct.jxl::Token"** %106, align 8
  %108 = getelementptr inbounds %"class.std::__1::vector.129", %"class.std::__1::vector.129"* %3, i64 0, i32 0, i32 2, i32 0, i32 0
  %109 = load %"struct.jxl::Token"*, %"struct.jxl::Token"** %108, align 8
  %110 = icmp ult %"struct.jxl::Token"* %107, %109
  %111 = ptrtoint %"struct.jxl::Token"* %109 to i64
  br i1 %110, label %112, label %120

112:                                              ; preds = %102
  %113 = trunc i64 %105 to i32
  %114 = getelementptr inbounds %"struct.jxl::Token", %"struct.jxl::Token"* %107, i64 0, i32 0
  %115 = shl i32 %104, 1
  store i32 %115, i32* %114, align 4
  %116 = getelementptr inbounds %"struct.jxl::Token", %"struct.jxl::Token"* %107, i64 0, i32 1
  store i32 %113, i32* %116, align 4
  %117 = getelementptr inbounds %"struct.jxl::Token", %"struct.jxl::Token"* %107, i64 1
  %118 = ptrtoint %"struct.jxl::Token"* %117 to i64
  %119 = bitcast %"struct.jxl::Token"** %106 to i64*
  store i64 %118, i64* %119, align 8
  br label %180

120:                                              ; preds = %102
  %121 = ptrtoint %"struct.jxl::Token"* %107 to i64
  %122 = bitcast %"struct.jxl::Token"** %106 to i64*
  %123 = bitcast %"class.std::__1::vector.129"* %3 to i64*
  %124 = load i64, i64* %123, align 8
  %125 = sub i64 %121, %124
  %126 = ashr exact i64 %125, 3
  %127 = add nsw i64 %126, 1
  %128 = icmp ugt i64 %127, 2305843009213693951
  br i1 %128, label %129, label %131

129:                                              ; preds = %120
  %130 = bitcast %"class.std::__1::vector.129"* %3 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %130) #12
  unreachable

131:                                              ; preds = %120
  %132 = bitcast %"struct.jxl::Token"** %108 to i64*
  %133 = sub i64 %111, %124
  %134 = ashr exact i64 %133, 3
  %135 = icmp ult i64 %134, 1152921504606846975
  br i1 %135, label %136, label %144

136:                                              ; preds = %131
  %137 = ashr exact i64 %133, 2
  %138 = icmp ult i64 %137, %127
  %139 = select i1 %138, i64 %127, i64 %137
  %140 = icmp eq i64 %139, 0
  br i1 %140, label %149, label %141

141:                                              ; preds = %136
  %142 = icmp ugt i64 %139, 2305843009213693951
  br i1 %142, label %143, label %144

143:                                              ; preds = %141
  tail call void @abort() #12
  unreachable

144:                                              ; preds = %141, %131
  %145 = phi i64 [ %139, %141 ], [ 2305843009213693951, %131 ]
  %146 = shl i64 %145, 3
  %147 = tail call i8* @_Znwm(i64 %146) #11
  %148 = bitcast i8* %147 to %"struct.jxl::Token"*
  br label %149

149:                                              ; preds = %144, %136
  %150 = phi i64 [ %145, %144 ], [ 0, %136 ]
  %151 = phi %"struct.jxl::Token"* [ %148, %144 ], [ null, %136 ]
  %152 = getelementptr inbounds %"struct.jxl::Token", %"struct.jxl::Token"* %151, i64 %126
  %153 = getelementptr inbounds %"struct.jxl::Token", %"struct.jxl::Token"* %151, i64 %150
  %154 = ptrtoint %"struct.jxl::Token"* %153 to i64
  %155 = trunc i64 %105 to i32
  %156 = getelementptr inbounds %"struct.jxl::Token", %"struct.jxl::Token"* %152, i64 0, i32 0
  %157 = shl i32 %104, 1
  store i32 %157, i32* %156, align 4
  %158 = getelementptr inbounds %"struct.jxl::Token", %"struct.jxl::Token"* %151, i64 %126, i32 1
  store i32 %155, i32* %158, align 4
  %159 = getelementptr inbounds %"struct.jxl::Token", %"struct.jxl::Token"* %152, i64 1
  %160 = ptrtoint %"struct.jxl::Token"* %159 to i64
  %161 = getelementptr inbounds %"class.std::__1::vector.129", %"class.std::__1::vector.129"* %3, i64 0, i32 0, i32 0
  %162 = load %"struct.jxl::Token"*, %"struct.jxl::Token"** %161, align 8
  %163 = load i64, i64* %122, align 8
  %164 = ptrtoint %"struct.jxl::Token"* %162 to i64
  %165 = sub i64 %163, %164
  %166 = ashr exact i64 %165, 3
  %167 = sub nsw i64 0, %166
  %168 = getelementptr inbounds %"struct.jxl::Token", %"struct.jxl::Token"* %152, i64 %167
  %169 = ptrtoint %"struct.jxl::Token"* %168 to i64
  %170 = icmp sgt i64 %165, 0
  br i1 %170, label %171, label %175

171:                                              ; preds = %149
  %172 = bitcast %"struct.jxl::Token"* %168 to i8*
  %173 = bitcast %"struct.jxl::Token"* %162 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %172, i8* align 4 %173, i64 %165, i1 false) #3
  %174 = load %"struct.jxl::Token"*, %"struct.jxl::Token"** %161, align 8
  br label %175

175:                                              ; preds = %171, %149
  %176 = phi %"struct.jxl::Token"* [ %162, %149 ], [ %174, %171 ]
  store i64 %169, i64* %123, align 8
  store i64 %160, i64* %122, align 8
  store i64 %154, i64* %132, align 8
  %177 = icmp eq %"struct.jxl::Token"* %176, null
  br i1 %177, label %180, label %178

178:                                              ; preds = %175
  %179 = bitcast %"struct.jxl::Token"* %176 to i8*
  tail call void @_ZdlPv(i8* %179) #11
  br label %180

180:                                              ; preds = %178, %175, %112
  br i1 %96, label %181, label %187

181:                                              ; preds = %180
  %182 = bitcast %"struct.jxl::Token"** %106 to i64*
  %183 = bitcast %"class.std::__1::vector.129"* %3 to i64*
  %184 = bitcast %"struct.jxl::Token"** %108 to i64*
  %185 = getelementptr inbounds %"class.std::__1::vector.129", %"class.std::__1::vector.129"* %3, i64 0, i32 0, i32 0
  %186 = load i32*, i32** %8, align 8
  br label %201

187:                                              ; preds = %275, %180
  %188 = load i32*, i32** %34, align 8
  %189 = icmp eq i32* %188, null
  br i1 %189, label %193, label %190

190:                                              ; preds = %187
  %191 = ptrtoint i32* %188 to i64
  store i64 %191, i64* %47, align 8
  %192 = bitcast i32* %188 to i8*
  tail call void @_ZdlPv(i8* %192) #11
  br label %193

193:                                              ; preds = %187, %190
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %33) #3
  %194 = load i32*, i32** %8, align 8
  %195 = icmp eq i32* %194, null
  br i1 %195, label %200, label %196

196:                                              ; preds = %193
  %197 = ptrtoint i32* %194 to i64
  %198 = bitcast i32** %9 to i64*
  store i64 %197, i64* %198, align 8
  %199 = bitcast i32* %194 to i8*
  tail call void @_ZdlPv(i8* %199) #11
  br label %200

200:                                              ; preds = %193, %196
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %7) #3
  ret void

201:                                              ; preds = %275, %181
  %202 = phi i32* [ %186, %181 ], [ %276, %275 ]
  %203 = phi i64 [ %1, %181 ], [ %279, %275 ]
  %204 = phi i32 [ 0, %181 ], [ %278, %275 ]
  %205 = tail call i32 @_ZN3jxl17CoeffOrderContextEj(i32 %204) #3
  %206 = getelementptr inbounds i32, i32* %202, i64 %203
  %207 = load %"struct.jxl::Token"*, %"struct.jxl::Token"** %106, align 8
  %208 = load %"struct.jxl::Token"*, %"struct.jxl::Token"** %108, align 8
  %209 = icmp ult %"struct.jxl::Token"* %207, %208
  %210 = ptrtoint %"struct.jxl::Token"* %208 to i64
  br i1 %209, label %211, label %219

211:                                              ; preds = %201
  %212 = load i32, i32* %206, align 4
  %213 = getelementptr inbounds %"struct.jxl::Token", %"struct.jxl::Token"* %207, i64 0, i32 0
  %214 = shl i32 %205, 1
  store i32 %214, i32* %213, align 4
  %215 = getelementptr inbounds %"struct.jxl::Token", %"struct.jxl::Token"* %207, i64 0, i32 1
  store i32 %212, i32* %215, align 4
  %216 = getelementptr inbounds %"struct.jxl::Token", %"struct.jxl::Token"* %207, i64 1
  %217 = ptrtoint %"struct.jxl::Token"* %216 to i64
  store i64 %217, i64* %182, align 8
  %218 = load i32*, i32** %8, align 8
  br label %275

219:                                              ; preds = %201
  %220 = ptrtoint %"struct.jxl::Token"* %207 to i64
  %221 = load i64, i64* %183, align 8
  %222 = sub i64 %220, %221
  %223 = ashr exact i64 %222, 3
  %224 = add nsw i64 %223, 1
  %225 = icmp ugt i64 %224, 2305843009213693951
  br i1 %225, label %226, label %228

226:                                              ; preds = %219
  %227 = bitcast %"class.std::__1::vector.129"* %3 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %227) #12
  unreachable

228:                                              ; preds = %219
  %229 = sub i64 %210, %221
  %230 = ashr exact i64 %229, 3
  %231 = icmp ult i64 %230, 1152921504606846975
  br i1 %231, label %232, label %240

232:                                              ; preds = %228
  %233 = ashr exact i64 %229, 2
  %234 = icmp ult i64 %233, %224
  %235 = select i1 %234, i64 %224, i64 %233
  %236 = icmp eq i64 %235, 0
  br i1 %236, label %245, label %237

237:                                              ; preds = %232
  %238 = icmp ugt i64 %235, 2305843009213693951
  br i1 %238, label %239, label %240

239:                                              ; preds = %237
  tail call void @abort() #12
  unreachable

240:                                              ; preds = %237, %228
  %241 = phi i64 [ %235, %237 ], [ 2305843009213693951, %228 ]
  %242 = shl i64 %241, 3
  %243 = tail call i8* @_Znwm(i64 %242) #11
  %244 = bitcast i8* %243 to %"struct.jxl::Token"*
  br label %245

245:                                              ; preds = %240, %232
  %246 = phi i64 [ %241, %240 ], [ 0, %232 ]
  %247 = phi %"struct.jxl::Token"* [ %244, %240 ], [ null, %232 ]
  %248 = getelementptr inbounds %"struct.jxl::Token", %"struct.jxl::Token"* %247, i64 %223
  %249 = getelementptr inbounds %"struct.jxl::Token", %"struct.jxl::Token"* %247, i64 %246
  %250 = ptrtoint %"struct.jxl::Token"* %249 to i64
  %251 = load i32, i32* %206, align 4
  %252 = getelementptr inbounds %"struct.jxl::Token", %"struct.jxl::Token"* %248, i64 0, i32 0
  %253 = shl i32 %205, 1
  store i32 %253, i32* %252, align 4
  %254 = getelementptr inbounds %"struct.jxl::Token", %"struct.jxl::Token"* %247, i64 %223, i32 1
  store i32 %251, i32* %254, align 4
  %255 = getelementptr inbounds %"struct.jxl::Token", %"struct.jxl::Token"* %248, i64 1
  %256 = ptrtoint %"struct.jxl::Token"* %255 to i64
  %257 = load %"struct.jxl::Token"*, %"struct.jxl::Token"** %185, align 8
  %258 = load i64, i64* %182, align 8
  %259 = ptrtoint %"struct.jxl::Token"* %257 to i64
  %260 = sub i64 %258, %259
  %261 = ashr exact i64 %260, 3
  %262 = sub nsw i64 0, %261
  %263 = getelementptr inbounds %"struct.jxl::Token", %"struct.jxl::Token"* %248, i64 %262
  %264 = ptrtoint %"struct.jxl::Token"* %263 to i64
  %265 = icmp sgt i64 %260, 0
  br i1 %265, label %266, label %270

266:                                              ; preds = %245
  %267 = bitcast %"struct.jxl::Token"* %263 to i8*
  %268 = bitcast %"struct.jxl::Token"* %257 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %267, i8* align 4 %268, i64 %260, i1 false) #3
  %269 = load %"struct.jxl::Token"*, %"struct.jxl::Token"** %185, align 8
  br label %270

270:                                              ; preds = %266, %245
  %271 = phi %"struct.jxl::Token"* [ %257, %245 ], [ %269, %266 ]
  store i64 %264, i64* %183, align 8
  store i64 %256, i64* %182, align 8
  store i64 %250, i64* %184, align 8
  %272 = icmp eq %"struct.jxl::Token"* %271, null
  br i1 %272, label %275, label %273

273:                                              ; preds = %270
  %274 = bitcast %"struct.jxl::Token"* %271 to i8*
  tail call void @_ZdlPv(i8* %274) #11
  br label %275

275:                                              ; preds = %273, %270, %211
  %276 = phi i32* [ %202, %273 ], [ %202, %270 ], [ %218, %211 ]
  %277 = getelementptr inbounds i32, i32* %276, i64 %203
  %278 = load i32, i32* %277, align 4
  %279 = add i64 %203, 1
  %280 = icmp eq i64 %279, %95
  br i1 %280, label %187, label %201
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

declare i64 @_ZN3jxl24BuildAndEncodeHistogramsERKNS_15HistogramParamsEmRNSt3__16vectorINS4_INS_5TokenENS3_9allocatorIS5_EEEENS6_IS8_EEEEPNS_19EntropyEncodingDataEPNS4_IhNS6_IhEEEEPNS_9BitWriterEmPNS_6AuxOutE(%"struct.jxl::HistogramParams"* dereferenceable(56), i64, %"class.std::__1::vector.127"* dereferenceable(24), %"struct.jxl::EntropyEncodingData"*, %"class.std::__1::vector.41"*, %"struct.jxl::BitWriter"*, i64, %"struct.jxl::AuxOut"*) local_unnamed_addr #2

declare void @_ZN3jxl11WriteTokensERKNSt3__16vectorINS_5TokenENS0_9allocatorIS2_EEEERKNS_19EntropyEncodingDataERKNS1_IhNS3_IhEEEEPNS_9BitWriterEmPNS_6AuxOutE(%"class.std::__1::vector.129"* dereferenceable(24), %"struct.jxl::EntropyEncodingData"* dereferenceable(104), %"class.std::__1::vector.41"* dereferenceable(24), %"struct.jxl::BitWriter"*, i64, %"struct.jxl::AuxOut"*) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN3jxl17EncodeCoeffOrdersEtPKjPNS_9BitWriterEmPNS_6AuxOutE(i16 zeroext, i32* noalias nocapture readonly, %"struct.jxl::BitWriter"*, i64, %"struct.jxl::AuxOut"* noalias) local_unnamed_addr #0 {
  %6 = alloca %"class.std::__1::vector.127", align 8
  %7 = alloca %"class.std::__1::vector.41", align 8
  %8 = alloca %"struct.jxl::EntropyEncodingData", align 8
  %9 = alloca %"struct.jxl::HistogramParams", align 16
  %10 = tail call i8* @_ZN3hwy20AllocateAlignedBytesEmPFPvS0_mES0_(i64 262144, i8* (i8*, i64)* null, i8* null) #3, !noalias !34
  %11 = bitcast %"class.std::__1::vector.127"* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %11) #3
  %12 = getelementptr inbounds %"class.std::__1::vector.127", %"class.std::__1::vector.127"* %6, i64 0, i32 0, i32 0
  %13 = getelementptr inbounds %"class.std::__1::vector.127", %"class.std::__1::vector.127"* %6, i64 0, i32 0, i32 1
  %14 = getelementptr inbounds %"class.std::__1::vector.127", %"class.std::__1::vector.127"* %6, i64 0, i32 0, i32 2, i32 0, i32 0
  %15 = tail call i8* @_Znwm(i64 24) #11
  %16 = bitcast %"class.std::__1::vector.127"* %6 to i8**
  store i8* %15, i8** %16, align 8
  %17 = getelementptr inbounds i8, i8* %15, i64 24
  %18 = bitcast %"class.std::__1::vector.129"** %14 to i8**
  store i8* %17, i8** %18, align 8
  %19 = bitcast %"class.std::__1::vector.129"** %13 to i64*
  tail call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %15, i8 0, i64 24, i1 false) #3
  %20 = ptrtoint i8* %17 to i64
  store i64 %20, i64* %19, align 8
  %21 = zext i16 %0 to i32
  %22 = bitcast i8* %10 to i32*
  br label %25

23:                                               ; preds = %83
  %24 = icmp eq i16 %0, 0
  br i1 %24, label %173, label %87

25:                                               ; preds = %83, %5
  %26 = phi i64 [ 0, %5 ], [ %85, %83 ]
  %27 = phi i16 [ 0, %5 ], [ %84, %83 ]
  %28 = getelementptr inbounds [27 x i8], [27 x i8]* @_ZN3jxlL14kStrategyOrderE, i64 0, i64 %26
  %29 = load i8, i8* %28, align 1
  %30 = zext i16 %27 to i32
  %31 = zext i8 %29 to i32
  %32 = shl i32 1, %31
  %33 = and i32 %32, %30
  %34 = icmp eq i32 %33, 0
  br i1 %34, label %35, label %83

35:                                               ; preds = %25
  %36 = trunc i32 %32 to i16
  %37 = or i16 %27, %36
  %38 = and i32 %32, %21
  %39 = icmp eq i32 %38, 0
  br i1 %39, label %83, label %40

40:                                               ; preds = %35
  %41 = zext i8 %29 to i64
  %42 = mul nuw nsw i64 %41, 3
  %43 = getelementptr inbounds [27 x i8], [27 x i8]* @_ZZNK3jxl10AcStrategy16covered_blocks_xEvE4kLut, i64 0, i64 %26
  %44 = load i8, i8* %43, align 1, !noalias !39
  %45 = zext i8 %44 to i64
  %46 = getelementptr inbounds [27 x i8], [27 x i8]* @_ZZNK3jxl10AcStrategy16covered_blocks_yEvE4kLut, i64 0, i64 %26
  %47 = load i8, i8* %46, align 1, !noalias !39
  %48 = zext i8 %47 to i64
  %49 = mul nuw nsw i64 %48, %45
  %50 = shl nuw nsw i64 %49, 6
  %51 = getelementptr inbounds [28 x i64], [28 x i64]* @_ZN3jxl10AcStrategy16CoeffOrderAndLut7kOffsetE.const, i64 0, i64 %26
  %52 = icmp eq i64 %49, 0
  %53 = getelementptr inbounds [40 x i64], [40 x i64]* @_ZN3jxlL17kCoeffOrderOffsetE, i64 0, i64 %42
  %54 = load i64, i64* %53, align 8
  %55 = shl i64 %54, 6
  %56 = getelementptr inbounds i32, i32* %1, i64 %55
  %57 = load %"class.std::__1::vector.129"*, %"class.std::__1::vector.129"** %12, align 8
  %58 = tail call %"struct.jxl::AcStrategy::CoeffOrderAndLut"* @_ZN3jxl10AcStrategy10CoeffOrderEv() #3, !noalias !39
  %59 = load i64, i64* %51, align 8, !noalias !39
  %60 = shl i64 %59, 6
  %61 = getelementptr inbounds %"struct.jxl::AcStrategy::CoeffOrderAndLut", %"struct.jxl::AcStrategy::CoeffOrderAndLut"* %58, i64 0, i32 1, i64 %60
  br i1 %52, label %74, label %62

62:                                               ; preds = %40, %62
  %63 = phi i64 [ %70, %62 ], [ 0, %40 ]
  %64 = getelementptr inbounds i32, i32* %56, i64 %63
  %65 = load i32, i32* %64, align 4, !alias.scope !39
  %66 = zext i32 %65 to i64
  %67 = getelementptr inbounds i32, i32* %61, i64 %66
  %68 = load i32, i32* %67, align 4, !noalias !39
  %69 = getelementptr inbounds i32, i32* %22, i64 %63
  store i32 %68, i32* %69, align 4, !noalias !39
  %70 = add nuw nsw i64 %63, 1
  %71 = icmp ult i64 %70, %50
  br i1 %71, label %62, label %72

72:                                               ; preds = %62
  %73 = load %"class.std::__1::vector.129"*, %"class.std::__1::vector.129"** %12, align 8
  br label %74

74:                                               ; preds = %72, %40
  %75 = phi %"class.std::__1::vector.129"* [ %73, %72 ], [ %57, %40 ]
  tail call fastcc void @_ZN3jxl12_GLOBAL__N_119TokenizePermutationEPKjmmPNSt3__16vectorINS_5TokenENS3_9allocatorIS5_EEEE(i32* %22, i64 %49, i64 %50, %"class.std::__1::vector.129"* %57) #3, !noalias !39
  %76 = add nuw nsw i64 %42, 1
  %77 = getelementptr inbounds [40 x i64], [40 x i64]* @_ZN3jxlL17kCoeffOrderOffsetE, i64 0, i64 %76
  %78 = load i64, i64* %77, align 8
  %79 = shl i64 %78, 6
  %80 = getelementptr inbounds i32, i32* %1, i64 %79
  %81 = tail call %"struct.jxl::AcStrategy::CoeffOrderAndLut"* @_ZN3jxl10AcStrategy10CoeffOrderEv() #3, !noalias !39
  %82 = getelementptr inbounds %"struct.jxl::AcStrategy::CoeffOrderAndLut", %"struct.jxl::AcStrategy::CoeffOrderAndLut"* %81, i64 0, i32 1, i64 %60
  br i1 %52, label %213, label %201

83:                                               ; preds = %232, %35, %25
  %84 = phi i16 [ %27, %25 ], [ %37, %35 ], [ %37, %232 ]
  %85 = add nuw nsw i64 %26, 1
  %86 = icmp eq i64 %85, 27
  br i1 %86, label %23, label %25

87:                                               ; preds = %23
  %88 = bitcast %"class.std::__1::vector.41"* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %88) #3
  %89 = getelementptr inbounds %"class.std::__1::vector.41", %"class.std::__1::vector.41"* %7, i64 0, i32 0, i32 0
  %90 = getelementptr inbounds %"class.std::__1::vector.41", %"class.std::__1::vector.41"* %7, i64 0, i32 0, i32 1
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %88, i8 0, i64 24, i1 false) #3
  %91 = bitcast %"struct.jxl::EntropyEncodingData"* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 104, i8* nonnull %91) #3
  %92 = getelementptr inbounds %"struct.jxl::EntropyEncodingData", %"struct.jxl::EntropyEncodingData"* %8, i64 0, i32 1
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %92, i8 -86, i64 80, i1 false)
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %91, i8 0, i64 24, i1 false) #3
  %93 = getelementptr inbounds %"struct.jxl::EntropyEncodingData", %"struct.jxl::EntropyEncodingData"* %8, i64 0, i32 2
  %94 = bitcast %"class.std::__1::vector.149"* %93 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %94, i8 0, i64 24, i1 false) #3
  %95 = getelementptr inbounds %"struct.jxl::EntropyEncodingData", %"struct.jxl::EntropyEncodingData"* %8, i64 0, i32 3
  call void @_ZN3jxl10LZ77ParamsC1Ev(%"struct.jxl::LZ77Params"* %95) #3
  %96 = bitcast %"struct.jxl::HistogramParams"* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 56, i8* nonnull %96) #3
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %96, i8 0, i64 56, i1 false)
  %97 = bitcast %"struct.jxl::HistogramParams"* %9 to <4 x i32>*
  store <4 x i32> <i32 2, i32 3, i32 1, i32 2>, <4 x i32>* %97, align 16
  %98 = getelementptr inbounds %"struct.jxl::HistogramParams", %"struct.jxl::HistogramParams"* %9, i64 0, i32 4
  %99 = bitcast %"class.std::__1::vector.156"* %98 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 16 %99, i8 0, i64 24, i1 false) #3
  %100 = getelementptr inbounds %"struct.jxl::HistogramParams", %"struct.jxl::HistogramParams"* %9, i64 0, i32 5
  store i64 -1, i64* %100, align 8
  %101 = getelementptr inbounds %"struct.jxl::HistogramParams", %"struct.jxl::HistogramParams"* %9, i64 0, i32 6
  store i8 0, i8* %101, align 16
  %102 = call i64 @_ZN3jxl24BuildAndEncodeHistogramsERKNS_15HistogramParamsEmRNSt3__16vectorINS4_INS_5TokenENS3_9allocatorIS5_EEEENS6_IS8_EEEEPNS_19EntropyEncodingDataEPNS4_IhNS6_IhEEEEPNS_9BitWriterEmPNS_6AuxOutE(%"struct.jxl::HistogramParams"* nonnull dereferenceable(56) %9, i64 8, %"class.std::__1::vector.127"* nonnull dereferenceable(24) %6, %"struct.jxl::EntropyEncodingData"* nonnull %8, %"class.std::__1::vector.41"* nonnull %7, %"struct.jxl::BitWriter"* %2, i64 %3, %"struct.jxl::AuxOut"* %4) #3
  %103 = getelementptr inbounds %"struct.jxl::HistogramParams", %"struct.jxl::HistogramParams"* %9, i64 0, i32 4, i32 0, i32 0
  %104 = load i64*, i64** %103, align 16
  %105 = icmp eq i64* %104, null
  br i1 %105, label %111, label %106

106:                                              ; preds = %87
  %107 = ptrtoint i64* %104 to i64
  %108 = getelementptr inbounds %"struct.jxl::HistogramParams", %"struct.jxl::HistogramParams"* %9, i64 0, i32 4, i32 0, i32 1
  %109 = bitcast i64** %108 to i64*
  store i64 %107, i64* %109, align 8
  %110 = bitcast i64* %104 to i8*
  call void @_ZdlPv(i8* %110) #11
  br label %111

111:                                              ; preds = %87, %106
  call void @llvm.lifetime.end.p0i8(i64 56, i8* nonnull %96) #3
  %112 = load %"class.std::__1::vector.129"*, %"class.std::__1::vector.129"** %12, align 8
  call void @_ZN3jxl11WriteTokensERKNSt3__16vectorINS_5TokenENS0_9allocatorIS2_EEEERKNS_19EntropyEncodingDataERKNS1_IhNS3_IhEEEEPNS_9BitWriterEmPNS_6AuxOutE(%"class.std::__1::vector.129"* dereferenceable(24) %112, %"struct.jxl::EntropyEncodingData"* nonnull dereferenceable(104) %8, %"class.std::__1::vector.41"* nonnull dereferenceable(24) %7, %"struct.jxl::BitWriter"* %2, i64 %3, %"struct.jxl::AuxOut"* %4) #3
  %113 = getelementptr inbounds %"struct.jxl::EntropyEncodingData", %"struct.jxl::EntropyEncodingData"* %8, i64 0, i32 2, i32 0, i32 0
  %114 = load %"struct.jxl::HybridUintConfig"*, %"struct.jxl::HybridUintConfig"** %113, align 8
  %115 = icmp eq %"struct.jxl::HybridUintConfig"* %114, null
  br i1 %115, label %121, label %116

116:                                              ; preds = %111
  %117 = ptrtoint %"struct.jxl::HybridUintConfig"* %114 to i64
  %118 = getelementptr inbounds %"struct.jxl::EntropyEncodingData", %"struct.jxl::EntropyEncodingData"* %8, i64 0, i32 2, i32 0, i32 1
  %119 = bitcast %"struct.jxl::HybridUintConfig"** %118 to i64*
  store i64 %117, i64* %119, align 8
  %120 = bitcast %"struct.jxl::HybridUintConfig"* %114 to i8*
  call void @_ZdlPv(i8* %120) #11
  br label %121

121:                                              ; preds = %116, %111
  %122 = getelementptr inbounds %"struct.jxl::EntropyEncodingData", %"struct.jxl::EntropyEncodingData"* %8, i64 0, i32 0, i32 0, i32 0
  %123 = load %"class.std::__1::vector.143"*, %"class.std::__1::vector.143"** %122, align 8
  %124 = icmp eq %"class.std::__1::vector.143"* %123, null
  br i1 %124, label %166, label %125

125:                                              ; preds = %121
  %126 = bitcast %"class.std::__1::vector.143"* %123 to i8*
  %127 = getelementptr inbounds %"struct.jxl::EntropyEncodingData", %"struct.jxl::EntropyEncodingData"* %8, i64 0, i32 0, i32 0, i32 1
  %128 = load %"class.std::__1::vector.143"*, %"class.std::__1::vector.143"** %127, align 8
  %129 = icmp eq %"class.std::__1::vector.143"* %128, %123
  br i1 %129, label %164, label %130

130:                                              ; preds = %125, %159
  %131 = phi %"class.std::__1::vector.143"* [ %132, %159 ], [ %128, %125 ]
  %132 = getelementptr inbounds %"class.std::__1::vector.143", %"class.std::__1::vector.143"* %131, i64 -1
  %133 = getelementptr inbounds %"class.std::__1::vector.143", %"class.std::__1::vector.143"* %132, i64 0, i32 0, i32 0
  %134 = load %"struct.jxl::ANSEncSymbolInfo"*, %"struct.jxl::ANSEncSymbolInfo"** %133, align 8
  %135 = icmp eq %"struct.jxl::ANSEncSymbolInfo"* %134, null
  br i1 %135, label %159, label %136

136:                                              ; preds = %130
  %137 = bitcast %"struct.jxl::ANSEncSymbolInfo"* %134 to i8*
  %138 = getelementptr inbounds %"class.std::__1::vector.143", %"class.std::__1::vector.143"* %131, i64 -1, i32 0, i32 1
  %139 = load %"struct.jxl::ANSEncSymbolInfo"*, %"struct.jxl::ANSEncSymbolInfo"** %138, align 8
  %140 = icmp eq %"struct.jxl::ANSEncSymbolInfo"* %139, %134
  br i1 %140, label %157, label %141

141:                                              ; preds = %136, %152
  %142 = phi %"struct.jxl::ANSEncSymbolInfo"* [ %143, %152 ], [ %139, %136 ]
  %143 = getelementptr inbounds %"struct.jxl::ANSEncSymbolInfo", %"struct.jxl::ANSEncSymbolInfo"* %142, i64 -1
  %144 = getelementptr inbounds %"struct.jxl::ANSEncSymbolInfo", %"struct.jxl::ANSEncSymbolInfo"* %142, i64 -1, i32 2, i32 0, i32 0
  %145 = load i16*, i16** %144, align 8
  %146 = icmp eq i16* %145, null
  br i1 %146, label %152, label %147

147:                                              ; preds = %141
  %148 = ptrtoint i16* %145 to i64
  %149 = getelementptr inbounds %"struct.jxl::ANSEncSymbolInfo", %"struct.jxl::ANSEncSymbolInfo"* %142, i64 -1, i32 2, i32 0, i32 1
  %150 = bitcast i16** %149 to i64*
  store i64 %148, i64* %150, align 8
  %151 = bitcast i16* %145 to i8*
  call void @_ZdlPv(i8* %151) #11
  br label %152

152:                                              ; preds = %147, %141
  %153 = icmp eq %"struct.jxl::ANSEncSymbolInfo"* %143, %134
  br i1 %153, label %154, label %141

154:                                              ; preds = %152
  %155 = bitcast %"class.std::__1::vector.143"* %132 to i8**
  %156 = load i8*, i8** %155, align 8
  br label %157

157:                                              ; preds = %154, %136
  %158 = phi i8* [ %156, %154 ], [ %137, %136 ]
  store %"struct.jxl::ANSEncSymbolInfo"* %134, %"struct.jxl::ANSEncSymbolInfo"** %138, align 8
  call void @_ZdlPv(i8* %158) #11
  br label %159

159:                                              ; preds = %157, %130
  %160 = icmp eq %"class.std::__1::vector.143"* %132, %123
  br i1 %160, label %161, label %130

161:                                              ; preds = %159
  %162 = bitcast %"struct.jxl::EntropyEncodingData"* %8 to i8**
  %163 = load i8*, i8** %162, align 8
  br label %164

164:                                              ; preds = %161, %125
  %165 = phi i8* [ %163, %161 ], [ %126, %125 ]
  store %"class.std::__1::vector.143"* %123, %"class.std::__1::vector.143"** %127, align 8
  call void @_ZdlPv(i8* %165) #11
  br label %166

166:                                              ; preds = %121, %164
  call void @llvm.lifetime.end.p0i8(i64 104, i8* nonnull %91) #3
  %167 = load i8*, i8** %89, align 8
  %168 = icmp eq i8* %167, null
  br i1 %168, label %172, label %169

169:                                              ; preds = %166
  %170 = ptrtoint i8* %167 to i64
  %171 = bitcast i8** %90 to i64*
  store i64 %170, i64* %171, align 8
  call void @_ZdlPv(i8* nonnull %167) #11
  br label %172

172:                                              ; preds = %166, %169
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %88) #3
  br label %173

173:                                              ; preds = %23, %172
  %174 = load %"class.std::__1::vector.129"*, %"class.std::__1::vector.129"** %12, align 8
  %175 = icmp eq %"class.std::__1::vector.129"* %174, null
  br i1 %175, label %197, label %176

176:                                              ; preds = %173
  %177 = bitcast %"class.std::__1::vector.129"* %174 to i8*
  %178 = load %"class.std::__1::vector.129"*, %"class.std::__1::vector.129"** %13, align 8
  %179 = icmp eq %"class.std::__1::vector.129"* %178, %174
  br i1 %179, label %195, label %180

180:                                              ; preds = %176, %191
  %181 = phi %"class.std::__1::vector.129"* [ %182, %191 ], [ %178, %176 ]
  %182 = getelementptr inbounds %"class.std::__1::vector.129", %"class.std::__1::vector.129"* %181, i64 -1
  %183 = getelementptr inbounds %"class.std::__1::vector.129", %"class.std::__1::vector.129"* %182, i64 0, i32 0, i32 0
  %184 = load %"struct.jxl::Token"*, %"struct.jxl::Token"** %183, align 8
  %185 = icmp eq %"struct.jxl::Token"* %184, null
  br i1 %185, label %191, label %186

186:                                              ; preds = %180
  %187 = ptrtoint %"struct.jxl::Token"* %184 to i64
  %188 = getelementptr inbounds %"class.std::__1::vector.129", %"class.std::__1::vector.129"* %181, i64 -1, i32 0, i32 1
  %189 = bitcast %"struct.jxl::Token"** %188 to i64*
  store i64 %187, i64* %189, align 8
  %190 = bitcast %"struct.jxl::Token"* %184 to i8*
  call void @_ZdlPv(i8* %190) #11
  br label %191

191:                                              ; preds = %186, %180
  %192 = icmp eq %"class.std::__1::vector.129"* %182, %174
  br i1 %192, label %193, label %180

193:                                              ; preds = %191
  %194 = load i8*, i8** %16, align 8
  br label %195

195:                                              ; preds = %193, %176
  %196 = phi i8* [ %194, %193 ], [ %177, %176 ]
  store %"class.std::__1::vector.129"* %174, %"class.std::__1::vector.129"** %13, align 8
  call void @_ZdlPv(i8* %196) #11
  br label %197

197:                                              ; preds = %173, %195
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %11) #3
  %198 = icmp eq i8* %10, null
  br i1 %198, label %200, label %199

199:                                              ; preds = %197
  call void @_ZN3hwy16FreeAlignedBytesEPKvPFvPvS2_ES2_(i8* nonnull %10, void (i8*, i8*)* null, i8* null) #3
  br label %200

200:                                              ; preds = %197, %199
  ret void

201:                                              ; preds = %74, %201
  %202 = phi i64 [ %209, %201 ], [ 0, %74 ]
  %203 = getelementptr inbounds i32, i32* %80, i64 %202
  %204 = load i32, i32* %203, align 4, !alias.scope !39
  %205 = zext i32 %204 to i64
  %206 = getelementptr inbounds i32, i32* %82, i64 %205
  %207 = load i32, i32* %206, align 4, !noalias !39
  %208 = getelementptr inbounds i32, i32* %22, i64 %202
  store i32 %207, i32* %208, align 4, !noalias !39
  %209 = add nuw nsw i64 %202, 1
  %210 = icmp ult i64 %209, %50
  br i1 %210, label %201, label %211

211:                                              ; preds = %201
  %212 = load %"class.std::__1::vector.129"*, %"class.std::__1::vector.129"** %12, align 8
  br label %213

213:                                              ; preds = %211, %74
  %214 = phi %"class.std::__1::vector.129"* [ %212, %211 ], [ %75, %74 ]
  tail call fastcc void @_ZN3jxl12_GLOBAL__N_119TokenizePermutationEPKjmmPNSt3__16vectorINS_5TokenENS3_9allocatorIS5_EEEE(i32* %22, i64 %49, i64 %50, %"class.std::__1::vector.129"* %75) #3, !noalias !39
  %215 = add nuw nsw i64 %42, 2
  %216 = getelementptr inbounds [40 x i64], [40 x i64]* @_ZN3jxlL17kCoeffOrderOffsetE, i64 0, i64 %215
  %217 = load i64, i64* %216, align 8
  %218 = shl i64 %217, 6
  %219 = getelementptr inbounds i32, i32* %1, i64 %218
  %220 = tail call %"struct.jxl::AcStrategy::CoeffOrderAndLut"* @_ZN3jxl10AcStrategy10CoeffOrderEv() #3, !noalias !39
  %221 = getelementptr inbounds %"struct.jxl::AcStrategy::CoeffOrderAndLut", %"struct.jxl::AcStrategy::CoeffOrderAndLut"* %220, i64 0, i32 1, i64 %60
  br i1 %52, label %232, label %222

222:                                              ; preds = %213, %222
  %223 = phi i64 [ %230, %222 ], [ 0, %213 ]
  %224 = getelementptr inbounds i32, i32* %219, i64 %223
  %225 = load i32, i32* %224, align 4, !alias.scope !39
  %226 = zext i32 %225 to i64
  %227 = getelementptr inbounds i32, i32* %221, i64 %226
  %228 = load i32, i32* %227, align 4, !noalias !39
  %229 = getelementptr inbounds i32, i32* %22, i64 %223
  store i32 %228, i32* %229, align 4, !noalias !39
  %230 = add nuw nsw i64 %223, 1
  %231 = icmp ult i64 %230, %50
  br i1 %231, label %222, label %232

232:                                              ; preds = %222, %213
  tail call fastcc void @_ZN3jxl12_GLOBAL__N_119TokenizePermutationEPKjmmPNSt3__16vectorINS_5TokenENS3_9allocatorIS5_EEEE(i32* %22, i64 %49, i64 %50, %"class.std::__1::vector.129"* %214) #3, !noalias !39
  br label %83
}

; Function Attrs: nounwind
declare void @llvm.assume(i1) #3

declare %"struct.jxl::AcStrategy::CoeffOrderAndLut"* @_ZN3jxl10AcStrategy10CoeffOrderEv() local_unnamed_addr #2

declare i32 @_ZN3jxl17CoeffOrderContextEj(i32) local_unnamed_addr #2

; Function Attrs: noreturn
declare void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"*) local_unnamed_addr #4

; Function Attrs: noreturn nounwind
declare void @abort() local_unnamed_addr #5

; Function Attrs: nobuiltin nofree
declare noalias nonnull i8* @_Znwm(i64) local_unnamed_addr #6

; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(i8*) local_unnamed_addr #7

declare void @_ZN3jxl10LZ77ParamsC1Ev(%"struct.jxl::LZ77Params"*) unnamed_addr #2

declare i8* @_ZN3hwy20AllocateAlignedBytesEmPFPvS0_mES0_(i64, i8* (i8*, i64)*, i8*) local_unnamed_addr #2

declare void @_ZN3hwy16FreeAlignedBytesEPKvPFvPvS2_ES2_(i8*, void (i8*, i8*)*, i8*) local_unnamed_addr #2

; Function Attrs: nofree nounwind
declare double @sqrt(double) local_unnamed_addr #8

; Function Attrs: nounwind ssp uwtable
define internal fastcc void @"_ZNSt3__113__stable_sortIRZN3jxl17ComputeCoeffOrderENS1_9SpeedTierERKNS1_7ACImageERKNS1_15AcStrategyImageERKNS1_15FrameDimensionsERjPjE3$_1PZNS1_17ComputeCoeffOrderES2_S5_S8_SB_SC_SD_E11PosAndCountEEvT0_SI_T_NS_15iterator_traitsISI_E15difference_typeEPNSL_10value_typeEl"(%struct.PosAndCount*, %struct.PosAndCount*, %class.anon.8* dereferenceable(1), i64, %struct.PosAndCount*, i64) unnamed_addr #0 {
  switch i64 %3, label %19 [
    i64 0, label %435
    i64 1, label %435
    i64 2, label %7
  ]

7:                                                ; preds = %6
  %8 = getelementptr inbounds %struct.PosAndCount, %struct.PosAndCount* %1, i64 -1, i32 1
  %9 = load i32, i32* %8, align 4
  %10 = getelementptr inbounds %struct.PosAndCount, %struct.PosAndCount* %0, i64 0, i32 1
  %11 = load i32, i32* %10, align 4
  %12 = icmp ult i32 %9, %11
  br i1 %12, label %13, label %435

13:                                               ; preds = %7
  %14 = getelementptr inbounds %struct.PosAndCount, %struct.PosAndCount* %1, i64 -1
  %15 = bitcast %struct.PosAndCount* %0 to i64*
  %16 = load i64, i64* %15, align 4
  %17 = bitcast %struct.PosAndCount* %14 to i64*
  %18 = load i64, i64* %17, align 4
  store i64 %18, i64* %15, align 4
  store i64 %16, i64* %17, align 4
  br label %435

19:                                               ; preds = %6
  %20 = icmp slt i64 %3, 129
  br i1 %20, label %21, label %49

21:                                               ; preds = %19
  %22 = icmp eq %struct.PosAndCount* %0, %1
  br i1 %22, label %435, label %23

23:                                               ; preds = %21
  %24 = getelementptr inbounds %struct.PosAndCount, %struct.PosAndCount* %0, i64 1
  %25 = icmp eq %struct.PosAndCount* %24, %1
  br i1 %25, label %435, label %26

26:                                               ; preds = %23, %39
  %27 = phi %struct.PosAndCount* [ %42, %39 ], [ %24, %23 ]
  %28 = bitcast %struct.PosAndCount* %27 to i64*
  %29 = load i64, i64* %28, align 4
  %30 = lshr i64 %29, 32
  %31 = trunc i64 %30 to i32
  %32 = icmp eq %struct.PosAndCount* %27, %0
  br i1 %32, label %39, label %33

33:                                               ; preds = %26, %44
  %34 = phi %struct.PosAndCount* [ %35, %44 ], [ %27, %26 ]
  %35 = getelementptr inbounds %struct.PosAndCount, %struct.PosAndCount* %34, i64 -1
  %36 = getelementptr inbounds %struct.PosAndCount, %struct.PosAndCount* %34, i64 -1, i32 1
  %37 = load i32, i32* %36, align 4
  %38 = icmp ugt i32 %37, %31
  br i1 %38, label %44, label %39

39:                                               ; preds = %44, %33, %26
  %40 = phi %struct.PosAndCount* [ %0, %26 ], [ %34, %33 ], [ %0, %44 ]
  %41 = bitcast %struct.PosAndCount* %40 to i64*
  store i64 %29, i64* %41, align 4
  %42 = getelementptr inbounds %struct.PosAndCount, %struct.PosAndCount* %27, i64 1
  %43 = icmp eq %struct.PosAndCount* %42, %1
  br i1 %43, label %435, label %26

44:                                               ; preds = %33
  %45 = bitcast %struct.PosAndCount* %35 to i64*
  %46 = bitcast %struct.PosAndCount* %34 to i64*
  %47 = load i64, i64* %45, align 4
  store i64 %47, i64* %46, align 4
  %48 = icmp eq %struct.PosAndCount* %35, %0
  br i1 %48, label %39, label %33

49:                                               ; preds = %19
  %50 = lshr i64 %3, 1
  %51 = getelementptr inbounds %struct.PosAndCount, %struct.PosAndCount* %0, i64 %50
  %52 = icmp sgt i64 %3, %5
  br i1 %52, label %433, label %53

53:                                               ; preds = %49
  tail call fastcc void @"_ZNSt3__118__stable_sort_moveIRZN3jxl17ComputeCoeffOrderENS1_9SpeedTierERKNS1_7ACImageERKNS1_15AcStrategyImageERKNS1_15FrameDimensionsERjPjE3$_1PZNS1_17ComputeCoeffOrderES2_S5_S8_SB_SC_SD_E11PosAndCountEEvT0_SI_T_NS_15iterator_traitsISI_E15difference_typeEPNSL_10value_typeE"(%struct.PosAndCount* %0, %struct.PosAndCount* %51, %class.anon.8* dereferenceable(1) %2, i64 %50, %struct.PosAndCount* %4)
  %54 = sub nsw i64 %3, %50
  %55 = getelementptr inbounds %struct.PosAndCount, %struct.PosAndCount* %4, i64 %50
  tail call fastcc void @"_ZNSt3__118__stable_sort_moveIRZN3jxl17ComputeCoeffOrderENS1_9SpeedTierERKNS1_7ACImageERKNS1_15AcStrategyImageERKNS1_15FrameDimensionsERjPjE3$_1PZNS1_17ComputeCoeffOrderES2_S5_S8_SB_SC_SD_E11PosAndCountEEvT0_SI_T_NS_15iterator_traitsISI_E15difference_typeEPNSL_10value_typeE"(%struct.PosAndCount* %51, %struct.PosAndCount* %1, %class.anon.8* dereferenceable(1) %2, i64 %54, %struct.PosAndCount* %55)
  %56 = getelementptr inbounds %struct.PosAndCount, %struct.PosAndCount* %4, i64 %3
  br label %188

57:                                               ; preds = %384
  %58 = ptrtoint %struct.PosAndCount* %385 to i64
  %59 = icmp eq %struct.PosAndCount* %385, %56
  br i1 %59, label %435, label %60

60:                                               ; preds = %57
  %61 = add i64 %3, -1
  %62 = getelementptr %struct.PosAndCount, %struct.PosAndCount* %4, i64 %61, i32 0
  %63 = ptrtoint i32* %62 to i64
  %64 = sub i64 %63, %58
  %65 = lshr i64 %64, 3
  %66 = add nuw nsw i64 %65, 1
  %67 = icmp ult i64 %66, 4
  br i1 %67, label %68, label %95

68:                                               ; preds = %186, %95, %60
  %69 = phi %struct.PosAndCount* [ %387, %95 ], [ %387, %60 ], [ %109, %186 ]
  %70 = phi %struct.PosAndCount* [ %385, %95 ], [ %385, %60 ], [ %110, %186 ]
  %71 = ptrtoint %struct.PosAndCount* %70 to i64
  %72 = add i64 %3, -1
  %73 = getelementptr %struct.PosAndCount, %struct.PosAndCount* %4, i64 %72, i32 0
  %74 = ptrtoint i32* %73 to i64
  %75 = sub i64 %74, %71
  %76 = lshr i64 %75, 3
  %77 = add nuw nsw i64 %76, 1
  %78 = and i64 %77, 7
  %79 = icmp eq i64 %78, 0
  br i1 %79, label %91, label %80

80:                                               ; preds = %68, %80
  %81 = phi %struct.PosAndCount* [ %88, %80 ], [ %69, %68 ]
  %82 = phi %struct.PosAndCount* [ %87, %80 ], [ %70, %68 ]
  %83 = phi i64 [ %89, %80 ], [ %78, %68 ]
  %84 = bitcast %struct.PosAndCount* %82 to i64*
  %85 = bitcast %struct.PosAndCount* %81 to i64*
  %86 = load i64, i64* %84, align 4
  store i64 %86, i64* %85, align 4
  %87 = getelementptr inbounds %struct.PosAndCount, %struct.PosAndCount* %82, i64 1
  %88 = getelementptr inbounds %struct.PosAndCount, %struct.PosAndCount* %81, i64 1
  %89 = add i64 %83, -1
  %90 = icmp eq i64 %89, 0
  br i1 %90, label %91, label %80, !llvm.loop !42

91:                                               ; preds = %80, %68
  %92 = phi %struct.PosAndCount* [ %69, %68 ], [ %88, %80 ]
  %93 = phi %struct.PosAndCount* [ %70, %68 ], [ %87, %80 ]
  %94 = icmp ult i64 %75, 56
  br i1 %94, label %435, label %389

95:                                               ; preds = %60
  %96 = add i64 %3, -1
  %97 = getelementptr %struct.PosAndCount, %struct.PosAndCount* %4, i64 %96, i32 0
  %98 = ptrtoint i32* %97 to i64
  %99 = sub i64 %98, %58
  %100 = lshr i64 %99, 3
  %101 = add nuw nsw i64 %100, 1
  %102 = getelementptr %struct.PosAndCount, %struct.PosAndCount* %387, i64 %101
  %103 = getelementptr %struct.PosAndCount, %struct.PosAndCount* %385, i64 %101
  %104 = icmp ult %struct.PosAndCount* %387, %103
  %105 = icmp ult %struct.PosAndCount* %385, %102
  %106 = and i1 %104, %105
  br i1 %106, label %68, label %107

107:                                              ; preds = %95
  %108 = and i64 %66, 4611686018427387900
  %109 = getelementptr %struct.PosAndCount, %struct.PosAndCount* %387, i64 %108
  %110 = getelementptr %struct.PosAndCount, %struct.PosAndCount* %385, i64 %108
  %111 = add nsw i64 %108, -4
  %112 = lshr exact i64 %111, 2
  %113 = add nuw nsw i64 %112, 1
  %114 = and i64 %113, 3
  %115 = icmp ult i64 %111, 12
  br i1 %115, label %167, label %116

116:                                              ; preds = %107
  %117 = sub nsw i64 %113, %114
  br label %118

118:                                              ; preds = %118, %116
  %119 = phi i64 [ 0, %116 ], [ %164, %118 ]
  %120 = phi i64 [ %117, %116 ], [ %165, %118 ]
  %121 = getelementptr %struct.PosAndCount, %struct.PosAndCount* %387, i64 %119
  %122 = getelementptr %struct.PosAndCount, %struct.PosAndCount* %385, i64 %119
  %123 = bitcast %struct.PosAndCount* %122 to <2 x i64>*
  %124 = load <2 x i64>, <2 x i64>* %123, align 4, !alias.scope !43
  %125 = getelementptr %struct.PosAndCount, %struct.PosAndCount* %122, i64 2
  %126 = bitcast %struct.PosAndCount* %125 to <2 x i64>*
  %127 = load <2 x i64>, <2 x i64>* %126, align 4, !alias.scope !43
  %128 = bitcast %struct.PosAndCount* %121 to <2 x i64>*
  store <2 x i64> %124, <2 x i64>* %128, align 4, !alias.scope !46, !noalias !43
  %129 = getelementptr %struct.PosAndCount, %struct.PosAndCount* %121, i64 2
  %130 = bitcast %struct.PosAndCount* %129 to <2 x i64>*
  store <2 x i64> %127, <2 x i64>* %130, align 4, !alias.scope !46, !noalias !43
  %131 = or i64 %119, 4
  %132 = getelementptr %struct.PosAndCount, %struct.PosAndCount* %387, i64 %131
  %133 = getelementptr %struct.PosAndCount, %struct.PosAndCount* %385, i64 %131
  %134 = bitcast %struct.PosAndCount* %133 to <2 x i64>*
  %135 = load <2 x i64>, <2 x i64>* %134, align 4, !alias.scope !43
  %136 = getelementptr %struct.PosAndCount, %struct.PosAndCount* %133, i64 2
  %137 = bitcast %struct.PosAndCount* %136 to <2 x i64>*
  %138 = load <2 x i64>, <2 x i64>* %137, align 4, !alias.scope !43
  %139 = bitcast %struct.PosAndCount* %132 to <2 x i64>*
  store <2 x i64> %135, <2 x i64>* %139, align 4, !alias.scope !46, !noalias !43
  %140 = getelementptr %struct.PosAndCount, %struct.PosAndCount* %132, i64 2
  %141 = bitcast %struct.PosAndCount* %140 to <2 x i64>*
  store <2 x i64> %138, <2 x i64>* %141, align 4, !alias.scope !46, !noalias !43
  %142 = or i64 %119, 8
  %143 = getelementptr %struct.PosAndCount, %struct.PosAndCount* %387, i64 %142
  %144 = getelementptr %struct.PosAndCount, %struct.PosAndCount* %385, i64 %142
  %145 = bitcast %struct.PosAndCount* %144 to <2 x i64>*
  %146 = load <2 x i64>, <2 x i64>* %145, align 4, !alias.scope !43
  %147 = getelementptr %struct.PosAndCount, %struct.PosAndCount* %144, i64 2
  %148 = bitcast %struct.PosAndCount* %147 to <2 x i64>*
  %149 = load <2 x i64>, <2 x i64>* %148, align 4, !alias.scope !43
  %150 = bitcast %struct.PosAndCount* %143 to <2 x i64>*
  store <2 x i64> %146, <2 x i64>* %150, align 4, !alias.scope !46, !noalias !43
  %151 = getelementptr %struct.PosAndCount, %struct.PosAndCount* %143, i64 2
  %152 = bitcast %struct.PosAndCount* %151 to <2 x i64>*
  store <2 x i64> %149, <2 x i64>* %152, align 4, !alias.scope !46, !noalias !43
  %153 = or i64 %119, 12
  %154 = getelementptr %struct.PosAndCount, %struct.PosAndCount* %387, i64 %153
  %155 = getelementptr %struct.PosAndCount, %struct.PosAndCount* %385, i64 %153
  %156 = bitcast %struct.PosAndCount* %155 to <2 x i64>*
  %157 = load <2 x i64>, <2 x i64>* %156, align 4, !alias.scope !43
  %158 = getelementptr %struct.PosAndCount, %struct.PosAndCount* %155, i64 2
  %159 = bitcast %struct.PosAndCount* %158 to <2 x i64>*
  %160 = load <2 x i64>, <2 x i64>* %159, align 4, !alias.scope !43
  %161 = bitcast %struct.PosAndCount* %154 to <2 x i64>*
  store <2 x i64> %157, <2 x i64>* %161, align 4, !alias.scope !46, !noalias !43
  %162 = getelementptr %struct.PosAndCount, %struct.PosAndCount* %154, i64 2
  %163 = bitcast %struct.PosAndCount* %162 to <2 x i64>*
  store <2 x i64> %160, <2 x i64>* %163, align 4, !alias.scope !46, !noalias !43
  %164 = add i64 %119, 16
  %165 = add i64 %120, -4
  %166 = icmp eq i64 %165, 0
  br i1 %166, label %167, label %118, !llvm.loop !48

167:                                              ; preds = %118, %107
  %168 = phi i64 [ 0, %107 ], [ %164, %118 ]
  %169 = icmp eq i64 %114, 0
  br i1 %169, label %186, label %170

170:                                              ; preds = %167, %170
  %171 = phi i64 [ %183, %170 ], [ %168, %167 ]
  %172 = phi i64 [ %184, %170 ], [ %114, %167 ]
  %173 = getelementptr %struct.PosAndCount, %struct.PosAndCount* %387, i64 %171
  %174 = getelementptr %struct.PosAndCount, %struct.PosAndCount* %385, i64 %171
  %175 = bitcast %struct.PosAndCount* %174 to <2 x i64>*
  %176 = load <2 x i64>, <2 x i64>* %175, align 4, !alias.scope !43
  %177 = getelementptr %struct.PosAndCount, %struct.PosAndCount* %174, i64 2
  %178 = bitcast %struct.PosAndCount* %177 to <2 x i64>*
  %179 = load <2 x i64>, <2 x i64>* %178, align 4, !alias.scope !43
  %180 = bitcast %struct.PosAndCount* %173 to <2 x i64>*
  store <2 x i64> %176, <2 x i64>* %180, align 4, !alias.scope !46, !noalias !43
  %181 = getelementptr %struct.PosAndCount, %struct.PosAndCount* %173, i64 2
  %182 = bitcast %struct.PosAndCount* %181 to <2 x i64>*
  store <2 x i64> %179, <2 x i64>* %182, align 4, !alias.scope !46, !noalias !43
  %183 = add i64 %171, 4
  %184 = add i64 %172, -1
  %185 = icmp eq i64 %184, 0
  br i1 %185, label %186, label %170, !llvm.loop !49

186:                                              ; preds = %170, %167
  %187 = icmp eq i64 %66, %108
  br i1 %187, label %435, label %68

188:                                              ; preds = %53, %384
  %189 = phi %struct.PosAndCount* [ %386, %384 ], [ %4, %53 ]
  %190 = phi %struct.PosAndCount* [ %387, %384 ], [ %0, %53 ]
  %191 = phi %struct.PosAndCount* [ %385, %384 ], [ %55, %53 ]
  %192 = icmp eq %struct.PosAndCount* %191, %56
  br i1 %192, label %193, label %368

193:                                              ; preds = %188
  %194 = ptrtoint %struct.PosAndCount* %189 to i64
  %195 = icmp eq %struct.PosAndCount* %189, %55
  br i1 %195, label %435, label %196

196:                                              ; preds = %193
  %197 = add nsw i64 %50, -1
  %198 = getelementptr %struct.PosAndCount, %struct.PosAndCount* %4, i64 %197, i32 0
  %199 = ptrtoint i32* %198 to i64
  %200 = sub i64 %199, %194
  %201 = lshr i64 %200, 3
  %202 = add nuw nsw i64 %201, 1
  %203 = icmp ult i64 %202, 4
  br i1 %203, label %297, label %204

204:                                              ; preds = %196
  %205 = add nsw i64 %50, -1
  %206 = getelementptr %struct.PosAndCount, %struct.PosAndCount* %4, i64 %205, i32 0
  %207 = ptrtoint i32* %206 to i64
  %208 = sub i64 %207, %194
  %209 = lshr i64 %208, 3
  %210 = add nuw nsw i64 %209, 1
  %211 = getelementptr %struct.PosAndCount, %struct.PosAndCount* %190, i64 %210
  %212 = getelementptr %struct.PosAndCount, %struct.PosAndCount* %189, i64 %210
  %213 = icmp ult %struct.PosAndCount* %190, %212
  %214 = icmp ult %struct.PosAndCount* %189, %211
  %215 = and i1 %213, %214
  br i1 %215, label %297, label %216

216:                                              ; preds = %204
  %217 = and i64 %202, 4611686018427387900
  %218 = getelementptr %struct.PosAndCount, %struct.PosAndCount* %189, i64 %217
  %219 = getelementptr %struct.PosAndCount, %struct.PosAndCount* %190, i64 %217
  %220 = add nsw i64 %217, -4
  %221 = lshr exact i64 %220, 2
  %222 = add nuw nsw i64 %221, 1
  %223 = and i64 %222, 3
  %224 = icmp ult i64 %220, 12
  br i1 %224, label %276, label %225

225:                                              ; preds = %216
  %226 = sub nsw i64 %222, %223
  br label %227

227:                                              ; preds = %227, %225
  %228 = phi i64 [ 0, %225 ], [ %273, %227 ]
  %229 = phi i64 [ %226, %225 ], [ %274, %227 ]
  %230 = getelementptr %struct.PosAndCount, %struct.PosAndCount* %189, i64 %228
  %231 = getelementptr %struct.PosAndCount, %struct.PosAndCount* %190, i64 %228
  %232 = bitcast %struct.PosAndCount* %230 to <2 x i64>*
  %233 = load <2 x i64>, <2 x i64>* %232, align 4, !alias.scope !50
  %234 = getelementptr %struct.PosAndCount, %struct.PosAndCount* %230, i64 2
  %235 = bitcast %struct.PosAndCount* %234 to <2 x i64>*
  %236 = load <2 x i64>, <2 x i64>* %235, align 4, !alias.scope !50
  %237 = bitcast %struct.PosAndCount* %231 to <2 x i64>*
  store <2 x i64> %233, <2 x i64>* %237, align 4, !alias.scope !53, !noalias !50
  %238 = getelementptr %struct.PosAndCount, %struct.PosAndCount* %231, i64 2
  %239 = bitcast %struct.PosAndCount* %238 to <2 x i64>*
  store <2 x i64> %236, <2 x i64>* %239, align 4, !alias.scope !53, !noalias !50
  %240 = or i64 %228, 4
  %241 = getelementptr %struct.PosAndCount, %struct.PosAndCount* %189, i64 %240
  %242 = getelementptr %struct.PosAndCount, %struct.PosAndCount* %190, i64 %240
  %243 = bitcast %struct.PosAndCount* %241 to <2 x i64>*
  %244 = load <2 x i64>, <2 x i64>* %243, align 4, !alias.scope !50
  %245 = getelementptr %struct.PosAndCount, %struct.PosAndCount* %241, i64 2
  %246 = bitcast %struct.PosAndCount* %245 to <2 x i64>*
  %247 = load <2 x i64>, <2 x i64>* %246, align 4, !alias.scope !50
  %248 = bitcast %struct.PosAndCount* %242 to <2 x i64>*
  store <2 x i64> %244, <2 x i64>* %248, align 4, !alias.scope !53, !noalias !50
  %249 = getelementptr %struct.PosAndCount, %struct.PosAndCount* %242, i64 2
  %250 = bitcast %struct.PosAndCount* %249 to <2 x i64>*
  store <2 x i64> %247, <2 x i64>* %250, align 4, !alias.scope !53, !noalias !50
  %251 = or i64 %228, 8
  %252 = getelementptr %struct.PosAndCount, %struct.PosAndCount* %189, i64 %251
  %253 = getelementptr %struct.PosAndCount, %struct.PosAndCount* %190, i64 %251
  %254 = bitcast %struct.PosAndCount* %252 to <2 x i64>*
  %255 = load <2 x i64>, <2 x i64>* %254, align 4, !alias.scope !50
  %256 = getelementptr %struct.PosAndCount, %struct.PosAndCount* %252, i64 2
  %257 = bitcast %struct.PosAndCount* %256 to <2 x i64>*
  %258 = load <2 x i64>, <2 x i64>* %257, align 4, !alias.scope !50
  %259 = bitcast %struct.PosAndCount* %253 to <2 x i64>*
  store <2 x i64> %255, <2 x i64>* %259, align 4, !alias.scope !53, !noalias !50
  %260 = getelementptr %struct.PosAndCount, %struct.PosAndCount* %253, i64 2
  %261 = bitcast %struct.PosAndCount* %260 to <2 x i64>*
  store <2 x i64> %258, <2 x i64>* %261, align 4, !alias.scope !53, !noalias !50
  %262 = or i64 %228, 12
  %263 = getelementptr %struct.PosAndCount, %struct.PosAndCount* %189, i64 %262
  %264 = getelementptr %struct.PosAndCount, %struct.PosAndCount* %190, i64 %262
  %265 = bitcast %struct.PosAndCount* %263 to <2 x i64>*
  %266 = load <2 x i64>, <2 x i64>* %265, align 4, !alias.scope !50
  %267 = getelementptr %struct.PosAndCount, %struct.PosAndCount* %263, i64 2
  %268 = bitcast %struct.PosAndCount* %267 to <2 x i64>*
  %269 = load <2 x i64>, <2 x i64>* %268, align 4, !alias.scope !50
  %270 = bitcast %struct.PosAndCount* %264 to <2 x i64>*
  store <2 x i64> %266, <2 x i64>* %270, align 4, !alias.scope !53, !noalias !50
  %271 = getelementptr %struct.PosAndCount, %struct.PosAndCount* %264, i64 2
  %272 = bitcast %struct.PosAndCount* %271 to <2 x i64>*
  store <2 x i64> %269, <2 x i64>* %272, align 4, !alias.scope !53, !noalias !50
  %273 = add i64 %228, 16
  %274 = add i64 %229, -4
  %275 = icmp eq i64 %274, 0
  br i1 %275, label %276, label %227, !llvm.loop !55

276:                                              ; preds = %227, %216
  %277 = phi i64 [ 0, %216 ], [ %273, %227 ]
  %278 = icmp eq i64 %223, 0
  br i1 %278, label %295, label %279

279:                                              ; preds = %276, %279
  %280 = phi i64 [ %292, %279 ], [ %277, %276 ]
  %281 = phi i64 [ %293, %279 ], [ %223, %276 ]
  %282 = getelementptr %struct.PosAndCount, %struct.PosAndCount* %189, i64 %280
  %283 = getelementptr %struct.PosAndCount, %struct.PosAndCount* %190, i64 %280
  %284 = bitcast %struct.PosAndCount* %282 to <2 x i64>*
  %285 = load <2 x i64>, <2 x i64>* %284, align 4, !alias.scope !50
  %286 = getelementptr %struct.PosAndCount, %struct.PosAndCount* %282, i64 2
  %287 = bitcast %struct.PosAndCount* %286 to <2 x i64>*
  %288 = load <2 x i64>, <2 x i64>* %287, align 4, !alias.scope !50
  %289 = bitcast %struct.PosAndCount* %283 to <2 x i64>*
  store <2 x i64> %285, <2 x i64>* %289, align 4, !alias.scope !53, !noalias !50
  %290 = getelementptr %struct.PosAndCount, %struct.PosAndCount* %283, i64 2
  %291 = bitcast %struct.PosAndCount* %290 to <2 x i64>*
  store <2 x i64> %288, <2 x i64>* %291, align 4, !alias.scope !53, !noalias !50
  %292 = add i64 %280, 4
  %293 = add i64 %281, -1
  %294 = icmp eq i64 %293, 0
  br i1 %294, label %295, label %279, !llvm.loop !56

295:                                              ; preds = %279, %276
  %296 = icmp eq i64 %202, %217
  br i1 %296, label %435, label %297

297:                                              ; preds = %295, %204, %196
  %298 = phi %struct.PosAndCount* [ %189, %204 ], [ %189, %196 ], [ %218, %295 ]
  %299 = phi %struct.PosAndCount* [ %190, %204 ], [ %190, %196 ], [ %219, %295 ]
  %300 = ptrtoint %struct.PosAndCount* %298 to i64
  %301 = add nsw i64 %50, -1
  %302 = getelementptr %struct.PosAndCount, %struct.PosAndCount* %4, i64 %301, i32 0
  %303 = ptrtoint i32* %302 to i64
  %304 = sub i64 %303, %300
  %305 = lshr i64 %304, 3
  %306 = add nuw nsw i64 %305, 1
  %307 = and i64 %306, 7
  %308 = icmp eq i64 %307, 0
  br i1 %308, label %320, label %309

309:                                              ; preds = %297, %309
  %310 = phi %struct.PosAndCount* [ %316, %309 ], [ %298, %297 ]
  %311 = phi %struct.PosAndCount* [ %317, %309 ], [ %299, %297 ]
  %312 = phi i64 [ %318, %309 ], [ %307, %297 ]
  %313 = bitcast %struct.PosAndCount* %310 to i64*
  %314 = bitcast %struct.PosAndCount* %311 to i64*
  %315 = load i64, i64* %313, align 4
  store i64 %315, i64* %314, align 4
  %316 = getelementptr inbounds %struct.PosAndCount, %struct.PosAndCount* %310, i64 1
  %317 = getelementptr inbounds %struct.PosAndCount, %struct.PosAndCount* %311, i64 1
  %318 = add i64 %312, -1
  %319 = icmp eq i64 %318, 0
  br i1 %319, label %320, label %309, !llvm.loop !57

320:                                              ; preds = %309, %297
  %321 = phi %struct.PosAndCount* [ %298, %297 ], [ %316, %309 ]
  %322 = phi %struct.PosAndCount* [ %299, %297 ], [ %317, %309 ]
  %323 = icmp ult i64 %304, 56
  br i1 %323, label %435, label %324

324:                                              ; preds = %320, %324
  %325 = phi %struct.PosAndCount* [ %365, %324 ], [ %321, %320 ]
  %326 = phi %struct.PosAndCount* [ %366, %324 ], [ %322, %320 ]
  %327 = bitcast %struct.PosAndCount* %325 to i64*
  %328 = bitcast %struct.PosAndCount* %326 to i64*
  %329 = load i64, i64* %327, align 4
  store i64 %329, i64* %328, align 4
  %330 = getelementptr inbounds %struct.PosAndCount, %struct.PosAndCount* %325, i64 1
  %331 = getelementptr inbounds %struct.PosAndCount, %struct.PosAndCount* %326, i64 1
  %332 = bitcast %struct.PosAndCount* %330 to i64*
  %333 = bitcast %struct.PosAndCount* %331 to i64*
  %334 = load i64, i64* %332, align 4
  store i64 %334, i64* %333, align 4
  %335 = getelementptr inbounds %struct.PosAndCount, %struct.PosAndCount* %325, i64 2
  %336 = getelementptr inbounds %struct.PosAndCount, %struct.PosAndCount* %326, i64 2
  %337 = bitcast %struct.PosAndCount* %335 to i64*
  %338 = bitcast %struct.PosAndCount* %336 to i64*
  %339 = load i64, i64* %337, align 4
  store i64 %339, i64* %338, align 4
  %340 = getelementptr inbounds %struct.PosAndCount, %struct.PosAndCount* %325, i64 3
  %341 = getelementptr inbounds %struct.PosAndCount, %struct.PosAndCount* %326, i64 3
  %342 = bitcast %struct.PosAndCount* %340 to i64*
  %343 = bitcast %struct.PosAndCount* %341 to i64*
  %344 = load i64, i64* %342, align 4
  store i64 %344, i64* %343, align 4
  %345 = getelementptr inbounds %struct.PosAndCount, %struct.PosAndCount* %325, i64 4
  %346 = getelementptr inbounds %struct.PosAndCount, %struct.PosAndCount* %326, i64 4
  %347 = bitcast %struct.PosAndCount* %345 to i64*
  %348 = bitcast %struct.PosAndCount* %346 to i64*
  %349 = load i64, i64* %347, align 4
  store i64 %349, i64* %348, align 4
  %350 = getelementptr inbounds %struct.PosAndCount, %struct.PosAndCount* %325, i64 5
  %351 = getelementptr inbounds %struct.PosAndCount, %struct.PosAndCount* %326, i64 5
  %352 = bitcast %struct.PosAndCount* %350 to i64*
  %353 = bitcast %struct.PosAndCount* %351 to i64*
  %354 = load i64, i64* %352, align 4
  store i64 %354, i64* %353, align 4
  %355 = getelementptr inbounds %struct.PosAndCount, %struct.PosAndCount* %325, i64 6
  %356 = getelementptr inbounds %struct.PosAndCount, %struct.PosAndCount* %326, i64 6
  %357 = bitcast %struct.PosAndCount* %355 to i64*
  %358 = bitcast %struct.PosAndCount* %356 to i64*
  %359 = load i64, i64* %357, align 4
  store i64 %359, i64* %358, align 4
  %360 = getelementptr inbounds %struct.PosAndCount, %struct.PosAndCount* %325, i64 7
  %361 = getelementptr inbounds %struct.PosAndCount, %struct.PosAndCount* %326, i64 7
  %362 = bitcast %struct.PosAndCount* %360 to i64*
  %363 = bitcast %struct.PosAndCount* %361 to i64*
  %364 = load i64, i64* %362, align 4
  store i64 %364, i64* %363, align 4
  %365 = getelementptr inbounds %struct.PosAndCount, %struct.PosAndCount* %325, i64 8
  %366 = getelementptr inbounds %struct.PosAndCount, %struct.PosAndCount* %326, i64 8
  %367 = icmp eq %struct.PosAndCount* %365, %55
  br i1 %367, label %435, label %324, !llvm.loop !58

368:                                              ; preds = %188
  %369 = getelementptr inbounds %struct.PosAndCount, %struct.PosAndCount* %191, i64 0, i32 1
  %370 = load i32, i32* %369, align 4
  %371 = getelementptr inbounds %struct.PosAndCount, %struct.PosAndCount* %189, i64 0, i32 1
  %372 = load i32, i32* %371, align 4
  %373 = icmp ult i32 %370, %372
  br i1 %373, label %374, label %379

374:                                              ; preds = %368
  %375 = bitcast %struct.PosAndCount* %191 to i64*
  %376 = bitcast %struct.PosAndCount* %190 to i64*
  %377 = load i64, i64* %375, align 4
  store i64 %377, i64* %376, align 4
  %378 = getelementptr inbounds %struct.PosAndCount, %struct.PosAndCount* %191, i64 1
  br label %384

379:                                              ; preds = %368
  %380 = bitcast %struct.PosAndCount* %189 to i64*
  %381 = bitcast %struct.PosAndCount* %190 to i64*
  %382 = load i64, i64* %380, align 4
  store i64 %382, i64* %381, align 4
  %383 = getelementptr inbounds %struct.PosAndCount, %struct.PosAndCount* %189, i64 1
  br label %384

384:                                              ; preds = %379, %374
  %385 = phi %struct.PosAndCount* [ %378, %374 ], [ %191, %379 ]
  %386 = phi %struct.PosAndCount* [ %189, %374 ], [ %383, %379 ]
  %387 = getelementptr inbounds %struct.PosAndCount, %struct.PosAndCount* %190, i64 1
  %388 = icmp eq %struct.PosAndCount* %386, %55
  br i1 %388, label %57, label %188

389:                                              ; preds = %91, %389
  %390 = phi %struct.PosAndCount* [ %431, %389 ], [ %92, %91 ]
  %391 = phi %struct.PosAndCount* [ %430, %389 ], [ %93, %91 ]
  %392 = bitcast %struct.PosAndCount* %391 to i64*
  %393 = bitcast %struct.PosAndCount* %390 to i64*
  %394 = load i64, i64* %392, align 4
  store i64 %394, i64* %393, align 4
  %395 = getelementptr inbounds %struct.PosAndCount, %struct.PosAndCount* %391, i64 1
  %396 = getelementptr inbounds %struct.PosAndCount, %struct.PosAndCount* %390, i64 1
  %397 = bitcast %struct.PosAndCount* %395 to i64*
  %398 = bitcast %struct.PosAndCount* %396 to i64*
  %399 = load i64, i64* %397, align 4
  store i64 %399, i64* %398, align 4
  %400 = getelementptr inbounds %struct.PosAndCount, %struct.PosAndCount* %391, i64 2
  %401 = getelementptr inbounds %struct.PosAndCount, %struct.PosAndCount* %390, i64 2
  %402 = bitcast %struct.PosAndCount* %400 to i64*
  %403 = bitcast %struct.PosAndCount* %401 to i64*
  %404 = load i64, i64* %402, align 4
  store i64 %404, i64* %403, align 4
  %405 = getelementptr inbounds %struct.PosAndCount, %struct.PosAndCount* %391, i64 3
  %406 = getelementptr inbounds %struct.PosAndCount, %struct.PosAndCount* %390, i64 3
  %407 = bitcast %struct.PosAndCount* %405 to i64*
  %408 = bitcast %struct.PosAndCount* %406 to i64*
  %409 = load i64, i64* %407, align 4
  store i64 %409, i64* %408, align 4
  %410 = getelementptr inbounds %struct.PosAndCount, %struct.PosAndCount* %391, i64 4
  %411 = getelementptr inbounds %struct.PosAndCount, %struct.PosAndCount* %390, i64 4
  %412 = bitcast %struct.PosAndCount* %410 to i64*
  %413 = bitcast %struct.PosAndCount* %411 to i64*
  %414 = load i64, i64* %412, align 4
  store i64 %414, i64* %413, align 4
  %415 = getelementptr inbounds %struct.PosAndCount, %struct.PosAndCount* %391, i64 5
  %416 = getelementptr inbounds %struct.PosAndCount, %struct.PosAndCount* %390, i64 5
  %417 = bitcast %struct.PosAndCount* %415 to i64*
  %418 = bitcast %struct.PosAndCount* %416 to i64*
  %419 = load i64, i64* %417, align 4
  store i64 %419, i64* %418, align 4
  %420 = getelementptr inbounds %struct.PosAndCount, %struct.PosAndCount* %391, i64 6
  %421 = getelementptr inbounds %struct.PosAndCount, %struct.PosAndCount* %390, i64 6
  %422 = bitcast %struct.PosAndCount* %420 to i64*
  %423 = bitcast %struct.PosAndCount* %421 to i64*
  %424 = load i64, i64* %422, align 4
  store i64 %424, i64* %423, align 4
  %425 = getelementptr inbounds %struct.PosAndCount, %struct.PosAndCount* %391, i64 7
  %426 = getelementptr inbounds %struct.PosAndCount, %struct.PosAndCount* %390, i64 7
  %427 = bitcast %struct.PosAndCount* %425 to i64*
  %428 = bitcast %struct.PosAndCount* %426 to i64*
  %429 = load i64, i64* %427, align 4
  store i64 %429, i64* %428, align 4
  %430 = getelementptr inbounds %struct.PosAndCount, %struct.PosAndCount* %391, i64 8
  %431 = getelementptr inbounds %struct.PosAndCount, %struct.PosAndCount* %390, i64 8
  %432 = icmp eq %struct.PosAndCount* %430, %56
  br i1 %432, label %435, label %389, !llvm.loop !59

433:                                              ; preds = %49
  tail call fastcc void @"_ZNSt3__113__stable_sortIRZN3jxl17ComputeCoeffOrderENS1_9SpeedTierERKNS1_7ACImageERKNS1_15AcStrategyImageERKNS1_15FrameDimensionsERjPjE3$_1PZNS1_17ComputeCoeffOrderES2_S5_S8_SB_SC_SD_E11PosAndCountEEvT0_SI_T_NS_15iterator_traitsISI_E15difference_typeEPNSL_10value_typeEl"(%struct.PosAndCount* %0, %struct.PosAndCount* %51, %class.anon.8* dereferenceable(1) %2, i64 %50, %struct.PosAndCount* %4, i64 %5)
  %434 = sub nsw i64 %3, %50
  tail call fastcc void @"_ZNSt3__113__stable_sortIRZN3jxl17ComputeCoeffOrderENS1_9SpeedTierERKNS1_7ACImageERKNS1_15AcStrategyImageERKNS1_15FrameDimensionsERjPjE3$_1PZNS1_17ComputeCoeffOrderES2_S5_S8_SB_SC_SD_E11PosAndCountEEvT0_SI_T_NS_15iterator_traitsISI_E15difference_typeEPNSL_10value_typeEl"(%struct.PosAndCount* %51, %struct.PosAndCount* %1, %class.anon.8* dereferenceable(1) %2, i64 %434, %struct.PosAndCount* %4, i64 %5)
  tail call fastcc void @"_ZNSt3__115__inplace_mergeIRZN3jxl17ComputeCoeffOrderENS1_9SpeedTierERKNS1_7ACImageERKNS1_15AcStrategyImageERKNS1_15FrameDimensionsERjPjE3$_1PZNS1_17ComputeCoeffOrderES2_S5_S8_SB_SC_SD_E11PosAndCountEEvT0_SI_SI_T_NS_15iterator_traitsISI_E15difference_typeESM_PNSL_10value_typeEl"(%struct.PosAndCount* %0, %struct.PosAndCount* %51, %struct.PosAndCount* %1, %class.anon.8* dereferenceable(1) %2, i64 %50, i64 %434, %struct.PosAndCount* %4, i64 %5)
  ret void

435:                                              ; preds = %91, %389, %320, %324, %39, %186, %295, %193, %57, %23, %21, %7, %13, %6, %6
  ret void
}

; Function Attrs: nobuiltin nofree nounwind
declare noalias i8* @_ZnwmRKSt9nothrow_t(i64, %"struct.std::nothrow_t"* dereferenceable(1)) local_unnamed_addr #9

; Function Attrs: nounwind ssp uwtable
define internal fastcc void @"_ZNSt3__118__stable_sort_moveIRZN3jxl17ComputeCoeffOrderENS1_9SpeedTierERKNS1_7ACImageERKNS1_15AcStrategyImageERKNS1_15FrameDimensionsERjPjE3$_1PZNS1_17ComputeCoeffOrderES2_S5_S8_SB_SC_SD_E11PosAndCountEEvT0_SI_T_NS_15iterator_traitsISI_E15difference_typeEPNSL_10value_typeE"(%struct.PosAndCount*, %struct.PosAndCount*, %class.anon.8* dereferenceable(1), i64, %struct.PosAndCount*) unnamed_addr #0 {
  switch i64 %3, label %33 [
    i64 0, label %461
    i64 1, label %6
    i64 2, label %10
  ]

6:                                                ; preds = %5
  %7 = bitcast %struct.PosAndCount* %0 to i64*
  %8 = bitcast %struct.PosAndCount* %4 to i64*
  %9 = load i64, i64* %7, align 4
  store i64 %9, i64* %8, align 4
  br label %461

10:                                               ; preds = %5
  %11 = getelementptr inbounds %struct.PosAndCount, %struct.PosAndCount* %1, i64 -1
  %12 = getelementptr inbounds %struct.PosAndCount, %struct.PosAndCount* %1, i64 -1, i32 1
  %13 = load i32, i32* %12, align 4
  %14 = getelementptr inbounds %struct.PosAndCount, %struct.PosAndCount* %0, i64 0, i32 1
  %15 = load i32, i32* %14, align 4
  %16 = icmp ult i32 %13, %15
  br i1 %16, label %17, label %25

17:                                               ; preds = %10
  %18 = bitcast %struct.PosAndCount* %11 to i64*
  %19 = bitcast %struct.PosAndCount* %4 to i64*
  %20 = load i64, i64* %18, align 4
  store i64 %20, i64* %19, align 4
  %21 = getelementptr inbounds %struct.PosAndCount, %struct.PosAndCount* %4, i64 1
  %22 = bitcast %struct.PosAndCount* %0 to i64*
  %23 = bitcast %struct.PosAndCount* %21 to i64*
  %24 = load i64, i64* %22, align 4
  store i64 %24, i64* %23, align 4
  br label %461

25:                                               ; preds = %10
  %26 = bitcast %struct.PosAndCount* %0 to i64*
  %27 = bitcast %struct.PosAndCount* %4 to i64*
  %28 = load i64, i64* %26, align 4
  store i64 %28, i64* %27, align 4
  %29 = getelementptr inbounds %struct.PosAndCount, %struct.PosAndCount* %4, i64 1
  %30 = bitcast %struct.PosAndCount* %11 to i64*
  %31 = bitcast %struct.PosAndCount* %29 to i64*
  %32 = load i64, i64* %30, align 4
  store i64 %32, i64* %31, align 4
  br label %461

33:                                               ; preds = %5
  %34 = icmp slt i64 %3, 9
  br i1 %34, label %35, label %80

35:                                               ; preds = %33
  %36 = icmp eq %struct.PosAndCount* %0, %1
  br i1 %36, label %461, label %37

37:                                               ; preds = %35
  %38 = bitcast %struct.PosAndCount* %0 to i64*
  %39 = bitcast %struct.PosAndCount* %4 to i64*
  %40 = load i64, i64* %38, align 4
  store i64 %40, i64* %39, align 4
  %41 = getelementptr inbounds %struct.PosAndCount, %struct.PosAndCount* %0, i64 1
  %42 = icmp eq %struct.PosAndCount* %41, %1
  br i1 %42, label %461, label %43

43:                                               ; preds = %37, %74
  %44 = phi %struct.PosAndCount* [ %78, %74 ], [ %41, %37 ]
  %45 = phi %struct.PosAndCount* [ %47, %74 ], [ %4, %37 ]
  %46 = phi %struct.PosAndCount* [ %44, %74 ], [ %0, %37 ]
  %47 = getelementptr inbounds %struct.PosAndCount, %struct.PosAndCount* %45, i64 1
  %48 = getelementptr inbounds %struct.PosAndCount, %struct.PosAndCount* %46, i64 1, i32 1
  %49 = load i32, i32* %48, align 4
  %50 = getelementptr inbounds %struct.PosAndCount, %struct.PosAndCount* %45, i64 0, i32 1
  %51 = load i32, i32* %50, align 4
  %52 = icmp ult i32 %49, %51
  br i1 %52, label %53, label %72

53:                                               ; preds = %43
  %54 = bitcast %struct.PosAndCount* %45 to i64*
  %55 = bitcast %struct.PosAndCount* %47 to i64*
  %56 = load i64, i64* %54, align 4
  store i64 %56, i64* %55, align 4
  %57 = icmp eq %struct.PosAndCount* %45, %4
  br i1 %57, label %74, label %58

58:                                               ; preds = %53, %67
  %59 = phi %struct.PosAndCount* [ %60, %67 ], [ %45, %53 ]
  %60 = getelementptr inbounds %struct.PosAndCount, %struct.PosAndCount* %59, i64 -1
  %61 = load i32, i32* %48, align 4
  %62 = getelementptr inbounds %struct.PosAndCount, %struct.PosAndCount* %59, i64 -1, i32 1
  %63 = load i32, i32* %62, align 4
  %64 = icmp ult i32 %61, %63
  br i1 %64, label %67, label %65

65:                                               ; preds = %58
  %66 = bitcast %struct.PosAndCount* %59 to i64*
  br label %74

67:                                               ; preds = %58
  %68 = bitcast %struct.PosAndCount* %60 to i64*
  %69 = bitcast %struct.PosAndCount* %59 to i64*
  %70 = load i64, i64* %68, align 4
  store i64 %70, i64* %69, align 4
  %71 = icmp eq %struct.PosAndCount* %60, %4
  br i1 %71, label %74, label %58

72:                                               ; preds = %43
  %73 = bitcast %struct.PosAndCount* %47 to i64*
  br label %74

74:                                               ; preds = %53, %65, %67, %72
  %75 = phi i64* [ %73, %72 ], [ %39, %53 ], [ %66, %65 ], [ %39, %67 ]
  %76 = bitcast %struct.PosAndCount* %44 to i64*
  %77 = load i64, i64* %76, align 4
  store i64 %77, i64* %75, align 4
  %78 = getelementptr inbounds %struct.PosAndCount, %struct.PosAndCount* %44, i64 1
  %79 = icmp eq %struct.PosAndCount* %78, %1
  br i1 %79, label %461, label %43

80:                                               ; preds = %33
  %81 = lshr i64 %3, 1
  %82 = getelementptr inbounds %struct.PosAndCount, %struct.PosAndCount* %0, i64 %81
  tail call fastcc void @"_ZNSt3__113__stable_sortIRZN3jxl17ComputeCoeffOrderENS1_9SpeedTierERKNS1_7ACImageERKNS1_15AcStrategyImageERKNS1_15FrameDimensionsERjPjE3$_1PZNS1_17ComputeCoeffOrderES2_S5_S8_SB_SC_SD_E11PosAndCountEEvT0_SI_T_NS_15iterator_traitsISI_E15difference_typeEPNSL_10value_typeEl"(%struct.PosAndCount* %0, %struct.PosAndCount* %82, %class.anon.8* dereferenceable(1) %2, i64 %81, %struct.PosAndCount* %4, i64 %81)
  %83 = sub nsw i64 %3, %81
  %84 = getelementptr inbounds %struct.PosAndCount, %struct.PosAndCount* %4, i64 %81
  tail call fastcc void @"_ZNSt3__113__stable_sortIRZN3jxl17ComputeCoeffOrderENS1_9SpeedTierERKNS1_7ACImageERKNS1_15AcStrategyImageERKNS1_15FrameDimensionsERjPjE3$_1PZNS1_17ComputeCoeffOrderES2_S5_S8_SB_SC_SD_E11PosAndCountEEvT0_SI_T_NS_15iterator_traitsISI_E15difference_typeEPNSL_10value_typeEl"(%struct.PosAndCount* %82, %struct.PosAndCount* %1, %class.anon.8* dereferenceable(1) %2, i64 %83, %struct.PosAndCount* %84, i64 %83)
  %85 = icmp eq i64 %81, 0
  br i1 %85, label %86, label %260

86:                                               ; preds = %456, %80
  %87 = phi %struct.PosAndCount* [ %82, %80 ], [ %457, %456 ]
  %88 = phi %struct.PosAndCount* [ %4, %80 ], [ %459, %456 ]
  %89 = ptrtoint %struct.PosAndCount* %87 to i64
  %90 = icmp eq %struct.PosAndCount* %87, %1
  br i1 %90, label %461, label %91

91:                                               ; preds = %86
  %92 = getelementptr %struct.PosAndCount, %struct.PosAndCount* %1, i64 -1, i32 0
  %93 = ptrtoint i32* %92 to i64
  %94 = sub i64 %93, %89
  %95 = lshr i64 %94, 3
  %96 = add nuw nsw i64 %95, 1
  %97 = icmp ult i64 %96, 4
  br i1 %97, label %190, label %98

98:                                               ; preds = %91
  %99 = getelementptr %struct.PosAndCount, %struct.PosAndCount* %1, i64 -1, i32 0
  %100 = ptrtoint i32* %99 to i64
  %101 = sub i64 %100, %89
  %102 = lshr i64 %101, 3
  %103 = add nuw nsw i64 %102, 1
  %104 = getelementptr %struct.PosAndCount, %struct.PosAndCount* %88, i64 %103
  %105 = getelementptr %struct.PosAndCount, %struct.PosAndCount* %87, i64 %103
  %106 = icmp ult %struct.PosAndCount* %88, %105
  %107 = icmp ult %struct.PosAndCount* %87, %104
  %108 = and i1 %106, %107
  br i1 %108, label %190, label %109

109:                                              ; preds = %98
  %110 = and i64 %96, 4611686018427387900
  %111 = getelementptr %struct.PosAndCount, %struct.PosAndCount* %88, i64 %110
  %112 = getelementptr %struct.PosAndCount, %struct.PosAndCount* %87, i64 %110
  %113 = add nsw i64 %110, -4
  %114 = lshr exact i64 %113, 2
  %115 = add nuw nsw i64 %114, 1
  %116 = and i64 %115, 3
  %117 = icmp ult i64 %113, 12
  br i1 %117, label %169, label %118

118:                                              ; preds = %109
  %119 = sub nsw i64 %115, %116
  br label %120

120:                                              ; preds = %120, %118
  %121 = phi i64 [ 0, %118 ], [ %166, %120 ]
  %122 = phi i64 [ %119, %118 ], [ %167, %120 ]
  %123 = getelementptr %struct.PosAndCount, %struct.PosAndCount* %88, i64 %121
  %124 = getelementptr %struct.PosAndCount, %struct.PosAndCount* %87, i64 %121
  %125 = bitcast %struct.PosAndCount* %124 to <2 x i64>*
  %126 = load <2 x i64>, <2 x i64>* %125, align 4, !alias.scope !60
  %127 = getelementptr %struct.PosAndCount, %struct.PosAndCount* %124, i64 2
  %128 = bitcast %struct.PosAndCount* %127 to <2 x i64>*
  %129 = load <2 x i64>, <2 x i64>* %128, align 4, !alias.scope !60
  %130 = bitcast %struct.PosAndCount* %123 to <2 x i64>*
  store <2 x i64> %126, <2 x i64>* %130, align 4, !alias.scope !63, !noalias !60
  %131 = getelementptr %struct.PosAndCount, %struct.PosAndCount* %123, i64 2
  %132 = bitcast %struct.PosAndCount* %131 to <2 x i64>*
  store <2 x i64> %129, <2 x i64>* %132, align 4, !alias.scope !63, !noalias !60
  %133 = or i64 %121, 4
  %134 = getelementptr %struct.PosAndCount, %struct.PosAndCount* %88, i64 %133
  %135 = getelementptr %struct.PosAndCount, %struct.PosAndCount* %87, i64 %133
  %136 = bitcast %struct.PosAndCount* %135 to <2 x i64>*
  %137 = load <2 x i64>, <2 x i64>* %136, align 4, !alias.scope !60
  %138 = getelementptr %struct.PosAndCount, %struct.PosAndCount* %135, i64 2
  %139 = bitcast %struct.PosAndCount* %138 to <2 x i64>*
  %140 = load <2 x i64>, <2 x i64>* %139, align 4, !alias.scope !60
  %141 = bitcast %struct.PosAndCount* %134 to <2 x i64>*
  store <2 x i64> %137, <2 x i64>* %141, align 4, !alias.scope !63, !noalias !60
  %142 = getelementptr %struct.PosAndCount, %struct.PosAndCount* %134, i64 2
  %143 = bitcast %struct.PosAndCount* %142 to <2 x i64>*
  store <2 x i64> %140, <2 x i64>* %143, align 4, !alias.scope !63, !noalias !60
  %144 = or i64 %121, 8
  %145 = getelementptr %struct.PosAndCount, %struct.PosAndCount* %88, i64 %144
  %146 = getelementptr %struct.PosAndCount, %struct.PosAndCount* %87, i64 %144
  %147 = bitcast %struct.PosAndCount* %146 to <2 x i64>*
  %148 = load <2 x i64>, <2 x i64>* %147, align 4, !alias.scope !60
  %149 = getelementptr %struct.PosAndCount, %struct.PosAndCount* %146, i64 2
  %150 = bitcast %struct.PosAndCount* %149 to <2 x i64>*
  %151 = load <2 x i64>, <2 x i64>* %150, align 4, !alias.scope !60
  %152 = bitcast %struct.PosAndCount* %145 to <2 x i64>*
  store <2 x i64> %148, <2 x i64>* %152, align 4, !alias.scope !63, !noalias !60
  %153 = getelementptr %struct.PosAndCount, %struct.PosAndCount* %145, i64 2
  %154 = bitcast %struct.PosAndCount* %153 to <2 x i64>*
  store <2 x i64> %151, <2 x i64>* %154, align 4, !alias.scope !63, !noalias !60
  %155 = or i64 %121, 12
  %156 = getelementptr %struct.PosAndCount, %struct.PosAndCount* %88, i64 %155
  %157 = getelementptr %struct.PosAndCount, %struct.PosAndCount* %87, i64 %155
  %158 = bitcast %struct.PosAndCount* %157 to <2 x i64>*
  %159 = load <2 x i64>, <2 x i64>* %158, align 4, !alias.scope !60
  %160 = getelementptr %struct.PosAndCount, %struct.PosAndCount* %157, i64 2
  %161 = bitcast %struct.PosAndCount* %160 to <2 x i64>*
  %162 = load <2 x i64>, <2 x i64>* %161, align 4, !alias.scope !60
  %163 = bitcast %struct.PosAndCount* %156 to <2 x i64>*
  store <2 x i64> %159, <2 x i64>* %163, align 4, !alias.scope !63, !noalias !60
  %164 = getelementptr %struct.PosAndCount, %struct.PosAndCount* %156, i64 2
  %165 = bitcast %struct.PosAndCount* %164 to <2 x i64>*
  store <2 x i64> %162, <2 x i64>* %165, align 4, !alias.scope !63, !noalias !60
  %166 = add i64 %121, 16
  %167 = add i64 %122, -4
  %168 = icmp eq i64 %167, 0
  br i1 %168, label %169, label %120, !llvm.loop !65

169:                                              ; preds = %120, %109
  %170 = phi i64 [ 0, %109 ], [ %166, %120 ]
  %171 = icmp eq i64 %116, 0
  br i1 %171, label %188, label %172

172:                                              ; preds = %169, %172
  %173 = phi i64 [ %185, %172 ], [ %170, %169 ]
  %174 = phi i64 [ %186, %172 ], [ %116, %169 ]
  %175 = getelementptr %struct.PosAndCount, %struct.PosAndCount* %88, i64 %173
  %176 = getelementptr %struct.PosAndCount, %struct.PosAndCount* %87, i64 %173
  %177 = bitcast %struct.PosAndCount* %176 to <2 x i64>*
  %178 = load <2 x i64>, <2 x i64>* %177, align 4, !alias.scope !60
  %179 = getelementptr %struct.PosAndCount, %struct.PosAndCount* %176, i64 2
  %180 = bitcast %struct.PosAndCount* %179 to <2 x i64>*
  %181 = load <2 x i64>, <2 x i64>* %180, align 4, !alias.scope !60
  %182 = bitcast %struct.PosAndCount* %175 to <2 x i64>*
  store <2 x i64> %178, <2 x i64>* %182, align 4, !alias.scope !63, !noalias !60
  %183 = getelementptr %struct.PosAndCount, %struct.PosAndCount* %175, i64 2
  %184 = bitcast %struct.PosAndCount* %183 to <2 x i64>*
  store <2 x i64> %181, <2 x i64>* %184, align 4, !alias.scope !63, !noalias !60
  %185 = add i64 %173, 4
  %186 = add i64 %174, -1
  %187 = icmp eq i64 %186, 0
  br i1 %187, label %188, label %172, !llvm.loop !66

188:                                              ; preds = %172, %169
  %189 = icmp eq i64 %96, %110
  br i1 %189, label %461, label %190

190:                                              ; preds = %188, %98, %91
  %191 = phi %struct.PosAndCount* [ %88, %98 ], [ %88, %91 ], [ %111, %188 ]
  %192 = phi %struct.PosAndCount* [ %87, %98 ], [ %87, %91 ], [ %112, %188 ]
  %193 = ptrtoint %struct.PosAndCount* %192 to i64
  %194 = getelementptr %struct.PosAndCount, %struct.PosAndCount* %1, i64 -1, i32 0
  %195 = ptrtoint i32* %194 to i64
  %196 = sub i64 %195, %193
  %197 = lshr i64 %196, 3
  %198 = add nuw nsw i64 %197, 1
  %199 = and i64 %198, 7
  %200 = icmp eq i64 %199, 0
  br i1 %200, label %212, label %201

201:                                              ; preds = %190, %201
  %202 = phi %struct.PosAndCount* [ %209, %201 ], [ %191, %190 ]
  %203 = phi %struct.PosAndCount* [ %208, %201 ], [ %192, %190 ]
  %204 = phi i64 [ %210, %201 ], [ %199, %190 ]
  %205 = bitcast %struct.PosAndCount* %203 to i64*
  %206 = bitcast %struct.PosAndCount* %202 to i64*
  %207 = load i64, i64* %205, align 4
  store i64 %207, i64* %206, align 4
  %208 = getelementptr inbounds %struct.PosAndCount, %struct.PosAndCount* %203, i64 1
  %209 = getelementptr inbounds %struct.PosAndCount, %struct.PosAndCount* %202, i64 1
  %210 = add i64 %204, -1
  %211 = icmp eq i64 %210, 0
  br i1 %211, label %212, label %201, !llvm.loop !67

212:                                              ; preds = %201, %190
  %213 = phi %struct.PosAndCount* [ %191, %190 ], [ %209, %201 ]
  %214 = phi %struct.PosAndCount* [ %192, %190 ], [ %208, %201 ]
  %215 = icmp ult i64 %196, 56
  br i1 %215, label %461, label %216

216:                                              ; preds = %212, %216
  %217 = phi %struct.PosAndCount* [ %258, %216 ], [ %213, %212 ]
  %218 = phi %struct.PosAndCount* [ %257, %216 ], [ %214, %212 ]
  %219 = bitcast %struct.PosAndCount* %218 to i64*
  %220 = bitcast %struct.PosAndCount* %217 to i64*
  %221 = load i64, i64* %219, align 4
  store i64 %221, i64* %220, align 4
  %222 = getelementptr inbounds %struct.PosAndCount, %struct.PosAndCount* %218, i64 1
  %223 = getelementptr inbounds %struct.PosAndCount, %struct.PosAndCount* %217, i64 1
  %224 = bitcast %struct.PosAndCount* %222 to i64*
  %225 = bitcast %struct.PosAndCount* %223 to i64*
  %226 = load i64, i64* %224, align 4
  store i64 %226, i64* %225, align 4
  %227 = getelementptr inbounds %struct.PosAndCount, %struct.PosAndCount* %218, i64 2
  %228 = getelementptr inbounds %struct.PosAndCount, %struct.PosAndCount* %217, i64 2
  %229 = bitcast %struct.PosAndCount* %227 to i64*
  %230 = bitcast %struct.PosAndCount* %228 to i64*
  %231 = load i64, i64* %229, align 4
  store i64 %231, i64* %230, align 4
  %232 = getelementptr inbounds %struct.PosAndCount, %struct.PosAndCount* %218, i64 3
  %233 = getelementptr inbounds %struct.PosAndCount, %struct.PosAndCount* %217, i64 3
  %234 = bitcast %struct.PosAndCount* %232 to i64*
  %235 = bitcast %struct.PosAndCount* %233 to i64*
  %236 = load i64, i64* %234, align 4
  store i64 %236, i64* %235, align 4
  %237 = getelementptr inbounds %struct.PosAndCount, %struct.PosAndCount* %218, i64 4
  %238 = getelementptr inbounds %struct.PosAndCount, %struct.PosAndCount* %217, i64 4
  %239 = bitcast %struct.PosAndCount* %237 to i64*
  %240 = bitcast %struct.PosAndCount* %238 to i64*
  %241 = load i64, i64* %239, align 4
  store i64 %241, i64* %240, align 4
  %242 = getelementptr inbounds %struct.PosAndCount, %struct.PosAndCount* %218, i64 5
  %243 = getelementptr inbounds %struct.PosAndCount, %struct.PosAndCount* %217, i64 5
  %244 = bitcast %struct.PosAndCount* %242 to i64*
  %245 = bitcast %struct.PosAndCount* %243 to i64*
  %246 = load i64, i64* %244, align 4
  store i64 %246, i64* %245, align 4
  %247 = getelementptr inbounds %struct.PosAndCount, %struct.PosAndCount* %218, i64 6
  %248 = getelementptr inbounds %struct.PosAndCount, %struct.PosAndCount* %217, i64 6
  %249 = bitcast %struct.PosAndCount* %247 to i64*
  %250 = bitcast %struct.PosAndCount* %248 to i64*
  %251 = load i64, i64* %249, align 4
  store i64 %251, i64* %250, align 4
  %252 = getelementptr inbounds %struct.PosAndCount, %struct.PosAndCount* %218, i64 7
  %253 = getelementptr inbounds %struct.PosAndCount, %struct.PosAndCount* %217, i64 7
  %254 = bitcast %struct.PosAndCount* %252 to i64*
  %255 = bitcast %struct.PosAndCount* %253 to i64*
  %256 = load i64, i64* %254, align 4
  store i64 %256, i64* %255, align 4
  %257 = getelementptr inbounds %struct.PosAndCount, %struct.PosAndCount* %218, i64 8
  %258 = getelementptr inbounds %struct.PosAndCount, %struct.PosAndCount* %217, i64 8
  %259 = icmp eq %struct.PosAndCount* %257, %1
  br i1 %259, label %461, label %216, !llvm.loop !68

260:                                              ; preds = %80, %456
  %261 = phi %struct.PosAndCount* [ %458, %456 ], [ %0, %80 ]
  %262 = phi %struct.PosAndCount* [ %459, %456 ], [ %4, %80 ]
  %263 = phi %struct.PosAndCount* [ %457, %456 ], [ %82, %80 ]
  %264 = icmp eq %struct.PosAndCount* %263, %1
  br i1 %264, label %265, label %440

265:                                              ; preds = %260
  %266 = ptrtoint %struct.PosAndCount* %261 to i64
  %267 = icmp eq %struct.PosAndCount* %261, %82
  br i1 %267, label %461, label %268

268:                                              ; preds = %265
  %269 = add nsw i64 %81, -1
  %270 = getelementptr %struct.PosAndCount, %struct.PosAndCount* %0, i64 %269, i32 0
  %271 = ptrtoint i32* %270 to i64
  %272 = sub i64 %271, %266
  %273 = lshr i64 %272, 3
  %274 = add nuw nsw i64 %273, 1
  %275 = icmp ult i64 %274, 4
  br i1 %275, label %369, label %276

276:                                              ; preds = %268
  %277 = add nsw i64 %81, -1
  %278 = getelementptr %struct.PosAndCount, %struct.PosAndCount* %0, i64 %277, i32 0
  %279 = ptrtoint i32* %278 to i64
  %280 = sub i64 %279, %266
  %281 = lshr i64 %280, 3
  %282 = add nuw nsw i64 %281, 1
  %283 = getelementptr %struct.PosAndCount, %struct.PosAndCount* %262, i64 %282
  %284 = getelementptr %struct.PosAndCount, %struct.PosAndCount* %261, i64 %282
  %285 = icmp ult %struct.PosAndCount* %262, %284
  %286 = icmp ult %struct.PosAndCount* %261, %283
  %287 = and i1 %285, %286
  br i1 %287, label %369, label %288

288:                                              ; preds = %276
  %289 = and i64 %274, 4611686018427387900
  %290 = getelementptr %struct.PosAndCount, %struct.PosAndCount* %261, i64 %289
  %291 = getelementptr %struct.PosAndCount, %struct.PosAndCount* %262, i64 %289
  %292 = add nsw i64 %289, -4
  %293 = lshr exact i64 %292, 2
  %294 = add nuw nsw i64 %293, 1
  %295 = and i64 %294, 3
  %296 = icmp ult i64 %292, 12
  br i1 %296, label %348, label %297

297:                                              ; preds = %288
  %298 = sub nsw i64 %294, %295
  br label %299

299:                                              ; preds = %299, %297
  %300 = phi i64 [ 0, %297 ], [ %345, %299 ]
  %301 = phi i64 [ %298, %297 ], [ %346, %299 ]
  %302 = getelementptr %struct.PosAndCount, %struct.PosAndCount* %261, i64 %300
  %303 = getelementptr %struct.PosAndCount, %struct.PosAndCount* %262, i64 %300
  %304 = bitcast %struct.PosAndCount* %302 to <2 x i64>*
  %305 = load <2 x i64>, <2 x i64>* %304, align 4, !alias.scope !69
  %306 = getelementptr %struct.PosAndCount, %struct.PosAndCount* %302, i64 2
  %307 = bitcast %struct.PosAndCount* %306 to <2 x i64>*
  %308 = load <2 x i64>, <2 x i64>* %307, align 4, !alias.scope !69
  %309 = bitcast %struct.PosAndCount* %303 to <2 x i64>*
  store <2 x i64> %305, <2 x i64>* %309, align 4, !alias.scope !72, !noalias !69
  %310 = getelementptr %struct.PosAndCount, %struct.PosAndCount* %303, i64 2
  %311 = bitcast %struct.PosAndCount* %310 to <2 x i64>*
  store <2 x i64> %308, <2 x i64>* %311, align 4, !alias.scope !72, !noalias !69
  %312 = or i64 %300, 4
  %313 = getelementptr %struct.PosAndCount, %struct.PosAndCount* %261, i64 %312
  %314 = getelementptr %struct.PosAndCount, %struct.PosAndCount* %262, i64 %312
  %315 = bitcast %struct.PosAndCount* %313 to <2 x i64>*
  %316 = load <2 x i64>, <2 x i64>* %315, align 4, !alias.scope !69
  %317 = getelementptr %struct.PosAndCount, %struct.PosAndCount* %313, i64 2
  %318 = bitcast %struct.PosAndCount* %317 to <2 x i64>*
  %319 = load <2 x i64>, <2 x i64>* %318, align 4, !alias.scope !69
  %320 = bitcast %struct.PosAndCount* %314 to <2 x i64>*
  store <2 x i64> %316, <2 x i64>* %320, align 4, !alias.scope !72, !noalias !69
  %321 = getelementptr %struct.PosAndCount, %struct.PosAndCount* %314, i64 2
  %322 = bitcast %struct.PosAndCount* %321 to <2 x i64>*
  store <2 x i64> %319, <2 x i64>* %322, align 4, !alias.scope !72, !noalias !69
  %323 = or i64 %300, 8
  %324 = getelementptr %struct.PosAndCount, %struct.PosAndCount* %261, i64 %323
  %325 = getelementptr %struct.PosAndCount, %struct.PosAndCount* %262, i64 %323
  %326 = bitcast %struct.PosAndCount* %324 to <2 x i64>*
  %327 = load <2 x i64>, <2 x i64>* %326, align 4, !alias.scope !69
  %328 = getelementptr %struct.PosAndCount, %struct.PosAndCount* %324, i64 2
  %329 = bitcast %struct.PosAndCount* %328 to <2 x i64>*
  %330 = load <2 x i64>, <2 x i64>* %329, align 4, !alias.scope !69
  %331 = bitcast %struct.PosAndCount* %325 to <2 x i64>*
  store <2 x i64> %327, <2 x i64>* %331, align 4, !alias.scope !72, !noalias !69
  %332 = getelementptr %struct.PosAndCount, %struct.PosAndCount* %325, i64 2
  %333 = bitcast %struct.PosAndCount* %332 to <2 x i64>*
  store <2 x i64> %330, <2 x i64>* %333, align 4, !alias.scope !72, !noalias !69
  %334 = or i64 %300, 12
  %335 = getelementptr %struct.PosAndCount, %struct.PosAndCount* %261, i64 %334
  %336 = getelementptr %struct.PosAndCount, %struct.PosAndCount* %262, i64 %334
  %337 = bitcast %struct.PosAndCount* %335 to <2 x i64>*
  %338 = load <2 x i64>, <2 x i64>* %337, align 4, !alias.scope !69
  %339 = getelementptr %struct.PosAndCount, %struct.PosAndCount* %335, i64 2
  %340 = bitcast %struct.PosAndCount* %339 to <2 x i64>*
  %341 = load <2 x i64>, <2 x i64>* %340, align 4, !alias.scope !69
  %342 = bitcast %struct.PosAndCount* %336 to <2 x i64>*
  store <2 x i64> %338, <2 x i64>* %342, align 4, !alias.scope !72, !noalias !69
  %343 = getelementptr %struct.PosAndCount, %struct.PosAndCount* %336, i64 2
  %344 = bitcast %struct.PosAndCount* %343 to <2 x i64>*
  store <2 x i64> %341, <2 x i64>* %344, align 4, !alias.scope !72, !noalias !69
  %345 = add i64 %300, 16
  %346 = add i64 %301, -4
  %347 = icmp eq i64 %346, 0
  br i1 %347, label %348, label %299, !llvm.loop !74

348:                                              ; preds = %299, %288
  %349 = phi i64 [ 0, %288 ], [ %345, %299 ]
  %350 = icmp eq i64 %295, 0
  br i1 %350, label %367, label %351

351:                                              ; preds = %348, %351
  %352 = phi i64 [ %364, %351 ], [ %349, %348 ]
  %353 = phi i64 [ %365, %351 ], [ %295, %348 ]
  %354 = getelementptr %struct.PosAndCount, %struct.PosAndCount* %261, i64 %352
  %355 = getelementptr %struct.PosAndCount, %struct.PosAndCount* %262, i64 %352
  %356 = bitcast %struct.PosAndCount* %354 to <2 x i64>*
  %357 = load <2 x i64>, <2 x i64>* %356, align 4, !alias.scope !69
  %358 = getelementptr %struct.PosAndCount, %struct.PosAndCount* %354, i64 2
  %359 = bitcast %struct.PosAndCount* %358 to <2 x i64>*
  %360 = load <2 x i64>, <2 x i64>* %359, align 4, !alias.scope !69
  %361 = bitcast %struct.PosAndCount* %355 to <2 x i64>*
  store <2 x i64> %357, <2 x i64>* %361, align 4, !alias.scope !72, !noalias !69
  %362 = getelementptr %struct.PosAndCount, %struct.PosAndCount* %355, i64 2
  %363 = bitcast %struct.PosAndCount* %362 to <2 x i64>*
  store <2 x i64> %360, <2 x i64>* %363, align 4, !alias.scope !72, !noalias !69
  %364 = add i64 %352, 4
  %365 = add i64 %353, -1
  %366 = icmp eq i64 %365, 0
  br i1 %366, label %367, label %351, !llvm.loop !75

367:                                              ; preds = %351, %348
  %368 = icmp eq i64 %274, %289
  br i1 %368, label %461, label %369

369:                                              ; preds = %367, %276, %268
  %370 = phi %struct.PosAndCount* [ %261, %276 ], [ %261, %268 ], [ %290, %367 ]
  %371 = phi %struct.PosAndCount* [ %262, %276 ], [ %262, %268 ], [ %291, %367 ]
  %372 = ptrtoint %struct.PosAndCount* %370 to i64
  %373 = add nsw i64 %81, -1
  %374 = getelementptr %struct.PosAndCount, %struct.PosAndCount* %0, i64 %373, i32 0
  %375 = ptrtoint i32* %374 to i64
  %376 = sub i64 %375, %372
  %377 = lshr i64 %376, 3
  %378 = add nuw nsw i64 %377, 1
  %379 = and i64 %378, 7
  %380 = icmp eq i64 %379, 0
  br i1 %380, label %392, label %381

381:                                              ; preds = %369, %381
  %382 = phi %struct.PosAndCount* [ %388, %381 ], [ %370, %369 ]
  %383 = phi %struct.PosAndCount* [ %389, %381 ], [ %371, %369 ]
  %384 = phi i64 [ %390, %381 ], [ %379, %369 ]
  %385 = bitcast %struct.PosAndCount* %382 to i64*
  %386 = bitcast %struct.PosAndCount* %383 to i64*
  %387 = load i64, i64* %385, align 4
  store i64 %387, i64* %386, align 4
  %388 = getelementptr inbounds %struct.PosAndCount, %struct.PosAndCount* %382, i64 1
  %389 = getelementptr inbounds %struct.PosAndCount, %struct.PosAndCount* %383, i64 1
  %390 = add i64 %384, -1
  %391 = icmp eq i64 %390, 0
  br i1 %391, label %392, label %381, !llvm.loop !76

392:                                              ; preds = %381, %369
  %393 = phi %struct.PosAndCount* [ %370, %369 ], [ %388, %381 ]
  %394 = phi %struct.PosAndCount* [ %371, %369 ], [ %389, %381 ]
  %395 = icmp ult i64 %376, 56
  br i1 %395, label %461, label %396

396:                                              ; preds = %392, %396
  %397 = phi %struct.PosAndCount* [ %437, %396 ], [ %393, %392 ]
  %398 = phi %struct.PosAndCount* [ %438, %396 ], [ %394, %392 ]
  %399 = bitcast %struct.PosAndCount* %397 to i64*
  %400 = bitcast %struct.PosAndCount* %398 to i64*
  %401 = load i64, i64* %399, align 4
  store i64 %401, i64* %400, align 4
  %402 = getelementptr inbounds %struct.PosAndCount, %struct.PosAndCount* %397, i64 1
  %403 = getelementptr inbounds %struct.PosAndCount, %struct.PosAndCount* %398, i64 1
  %404 = bitcast %struct.PosAndCount* %402 to i64*
  %405 = bitcast %struct.PosAndCount* %403 to i64*
  %406 = load i64, i64* %404, align 4
  store i64 %406, i64* %405, align 4
  %407 = getelementptr inbounds %struct.PosAndCount, %struct.PosAndCount* %397, i64 2
  %408 = getelementptr inbounds %struct.PosAndCount, %struct.PosAndCount* %398, i64 2
  %409 = bitcast %struct.PosAndCount* %407 to i64*
  %410 = bitcast %struct.PosAndCount* %408 to i64*
  %411 = load i64, i64* %409, align 4
  store i64 %411, i64* %410, align 4
  %412 = getelementptr inbounds %struct.PosAndCount, %struct.PosAndCount* %397, i64 3
  %413 = getelementptr inbounds %struct.PosAndCount, %struct.PosAndCount* %398, i64 3
  %414 = bitcast %struct.PosAndCount* %412 to i64*
  %415 = bitcast %struct.PosAndCount* %413 to i64*
  %416 = load i64, i64* %414, align 4
  store i64 %416, i64* %415, align 4
  %417 = getelementptr inbounds %struct.PosAndCount, %struct.PosAndCount* %397, i64 4
  %418 = getelementptr inbounds %struct.PosAndCount, %struct.PosAndCount* %398, i64 4
  %419 = bitcast %struct.PosAndCount* %417 to i64*
  %420 = bitcast %struct.PosAndCount* %418 to i64*
  %421 = load i64, i64* %419, align 4
  store i64 %421, i64* %420, align 4
  %422 = getelementptr inbounds %struct.PosAndCount, %struct.PosAndCount* %397, i64 5
  %423 = getelementptr inbounds %struct.PosAndCount, %struct.PosAndCount* %398, i64 5
  %424 = bitcast %struct.PosAndCount* %422 to i64*
  %425 = bitcast %struct.PosAndCount* %423 to i64*
  %426 = load i64, i64* %424, align 4
  store i64 %426, i64* %425, align 4
  %427 = getelementptr inbounds %struct.PosAndCount, %struct.PosAndCount* %397, i64 6
  %428 = getelementptr inbounds %struct.PosAndCount, %struct.PosAndCount* %398, i64 6
  %429 = bitcast %struct.PosAndCount* %427 to i64*
  %430 = bitcast %struct.PosAndCount* %428 to i64*
  %431 = load i64, i64* %429, align 4
  store i64 %431, i64* %430, align 4
  %432 = getelementptr inbounds %struct.PosAndCount, %struct.PosAndCount* %397, i64 7
  %433 = getelementptr inbounds %struct.PosAndCount, %struct.PosAndCount* %398, i64 7
  %434 = bitcast %struct.PosAndCount* %432 to i64*
  %435 = bitcast %struct.PosAndCount* %433 to i64*
  %436 = load i64, i64* %434, align 4
  store i64 %436, i64* %435, align 4
  %437 = getelementptr inbounds %struct.PosAndCount, %struct.PosAndCount* %397, i64 8
  %438 = getelementptr inbounds %struct.PosAndCount, %struct.PosAndCount* %398, i64 8
  %439 = icmp eq %struct.PosAndCount* %437, %82
  br i1 %439, label %461, label %396, !llvm.loop !77

440:                                              ; preds = %260
  %441 = getelementptr inbounds %struct.PosAndCount, %struct.PosAndCount* %263, i64 0, i32 1
  %442 = load i32, i32* %441, align 4
  %443 = getelementptr inbounds %struct.PosAndCount, %struct.PosAndCount* %261, i64 0, i32 1
  %444 = load i32, i32* %443, align 4
  %445 = icmp ult i32 %442, %444
  br i1 %445, label %446, label %451

446:                                              ; preds = %440
  %447 = bitcast %struct.PosAndCount* %263 to i64*
  %448 = bitcast %struct.PosAndCount* %262 to i64*
  %449 = load i64, i64* %447, align 4
  store i64 %449, i64* %448, align 4
  %450 = getelementptr inbounds %struct.PosAndCount, %struct.PosAndCount* %263, i64 1
  br label %456

451:                                              ; preds = %440
  %452 = bitcast %struct.PosAndCount* %261 to i64*
  %453 = bitcast %struct.PosAndCount* %262 to i64*
  %454 = load i64, i64* %452, align 4
  store i64 %454, i64* %453, align 4
  %455 = getelementptr inbounds %struct.PosAndCount, %struct.PosAndCount* %261, i64 1
  br label %456

456:                                              ; preds = %451, %446
  %457 = phi %struct.PosAndCount* [ %450, %446 ], [ %263, %451 ]
  %458 = phi %struct.PosAndCount* [ %261, %446 ], [ %455, %451 ]
  %459 = getelementptr inbounds %struct.PosAndCount, %struct.PosAndCount* %262, i64 1
  %460 = icmp eq %struct.PosAndCount* %458, %82
  br i1 %460, label %86, label %260

461:                                              ; preds = %392, %396, %212, %216, %74, %367, %188, %265, %86, %37, %35, %17, %25, %5, %6
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal fastcc void @"_ZNSt3__115__inplace_mergeIRZN3jxl17ComputeCoeffOrderENS1_9SpeedTierERKNS1_7ACImageERKNS1_15AcStrategyImageERKNS1_15FrameDimensionsERjPjE3$_1PZNS1_17ComputeCoeffOrderES2_S5_S8_SB_SC_SD_E11PosAndCountEEvT0_SI_SI_T_NS_15iterator_traitsISI_E15difference_typeESM_PNSL_10value_typeEl"(%struct.PosAndCount*, %struct.PosAndCount*, %struct.PosAndCount*, %class.anon.8* readnone dereferenceable(1), i64, i64, %struct.PosAndCount*, i64) unnamed_addr #0 {
  %9 = ptrtoint %struct.PosAndCount* %6 to i64
  %10 = icmp eq i64 %5, 0
  br i1 %10, label %965, label %11

11:                                               ; preds = %8, %958
  %12 = phi %struct.PosAndCount* [ %963, %958 ], [ %0, %8 ]
  %13 = phi %struct.PosAndCount* [ %962, %958 ], [ %1, %8 ]
  %14 = phi i64 [ %961, %958 ], [ %5, %8 ]
  %15 = phi i64 [ %960, %958 ], [ %4, %8 ]
  %16 = phi %struct.PosAndCount* [ %959, %958 ], [ %2, %8 ]
  %17 = bitcast %struct.PosAndCount* %13 to i8*
  %18 = icmp sgt i64 %15, %7
  %19 = icmp sgt i64 %14, %7
  %20 = and i1 %18, %19
  br i1 %20, label %21, label %26

21:                                               ; preds = %11
  %22 = icmp eq i64 %15, 0
  br i1 %22, label %965, label %23

23:                                               ; preds = %21
  %24 = getelementptr inbounds %struct.PosAndCount, %struct.PosAndCount* %13, i64 0, i32 1
  %25 = load i32, i32* %24, align 4
  br label %601

26:                                               ; preds = %11
  %27 = ptrtoint %struct.PosAndCount* %13 to i64
  %28 = ptrtoint %struct.PosAndCount* %12 to i64
  %29 = icmp sgt i64 %15, %14
  br i1 %29, label %158, label %30

30:                                               ; preds = %26
  %31 = icmp eq %struct.PosAndCount* %12, %13
  br i1 %31, label %965, label %32

32:                                               ; preds = %30
  %33 = getelementptr %struct.PosAndCount, %struct.PosAndCount* %13, i64 -1, i32 0
  %34 = ptrtoint i32* %33 to i64
  %35 = sub i64 %34, %28
  %36 = lshr i64 %35, 3
  %37 = add nuw nsw i64 %36, 1
  %38 = icmp ult i64 %37, 4
  br i1 %38, label %39, label %66

39:                                               ; preds = %156, %66, %32
  %40 = phi %struct.PosAndCount* [ %12, %66 ], [ %12, %32 ], [ %79, %156 ]
  %41 = phi %struct.PosAndCount* [ %6, %66 ], [ %6, %32 ], [ %80, %156 ]
  %42 = ptrtoint %struct.PosAndCount* %40 to i64
  %43 = getelementptr %struct.PosAndCount, %struct.PosAndCount* %13, i64 -1, i32 0
  %44 = ptrtoint i32* %43 to i64
  %45 = sub i64 %44, %42
  %46 = lshr i64 %45, 3
  %47 = add nuw nsw i64 %46, 1
  %48 = and i64 %47, 7
  %49 = icmp eq i64 %48, 0
  br i1 %49, label %61, label %50

50:                                               ; preds = %39, %50
  %51 = phi %struct.PosAndCount* [ %57, %50 ], [ %40, %39 ]
  %52 = phi %struct.PosAndCount* [ %58, %50 ], [ %41, %39 ]
  %53 = phi i64 [ %59, %50 ], [ %48, %39 ]
  %54 = bitcast %struct.PosAndCount* %51 to i64*
  %55 = bitcast %struct.PosAndCount* %52 to i64*
  %56 = load i64, i64* %54, align 4
  store i64 %56, i64* %55, align 4
  %57 = getelementptr inbounds %struct.PosAndCount, %struct.PosAndCount* %51, i64 1
  %58 = getelementptr inbounds %struct.PosAndCount, %struct.PosAndCount* %52, i64 1
  %59 = add i64 %53, -1
  %60 = icmp eq i64 %59, 0
  br i1 %60, label %61, label %50, !llvm.loop !78

61:                                               ; preds = %50, %39
  %62 = phi %struct.PosAndCount* [ undef, %39 ], [ %58, %50 ]
  %63 = phi %struct.PosAndCount* [ %40, %39 ], [ %57, %50 ]
  %64 = phi %struct.PosAndCount* [ %41, %39 ], [ %58, %50 ]
  %65 = icmp ult i64 %45, 56
  br i1 %65, label %286, label %323

66:                                               ; preds = %32
  %67 = getelementptr %struct.PosAndCount, %struct.PosAndCount* %13, i64 -1, i32 0
  %68 = ptrtoint i32* %67 to i64
  %69 = sub i64 %68, %28
  %70 = lshr i64 %69, 3
  %71 = add nuw nsw i64 %70, 1
  %72 = getelementptr %struct.PosAndCount, %struct.PosAndCount* %6, i64 %71
  %73 = getelementptr %struct.PosAndCount, %struct.PosAndCount* %12, i64 %71
  %74 = icmp ugt %struct.PosAndCount* %73, %6
  %75 = icmp ult %struct.PosAndCount* %12, %72
  %76 = and i1 %74, %75
  br i1 %76, label %39, label %77

77:                                               ; preds = %66
  %78 = and i64 %37, 4611686018427387900
  %79 = getelementptr %struct.PosAndCount, %struct.PosAndCount* %12, i64 %78
  %80 = getelementptr %struct.PosAndCount, %struct.PosAndCount* %6, i64 %78
  %81 = add nsw i64 %78, -4
  %82 = lshr exact i64 %81, 2
  %83 = add nuw nsw i64 %82, 1
  %84 = and i64 %83, 3
  %85 = icmp ult i64 %81, 12
  br i1 %85, label %137, label %86

86:                                               ; preds = %77
  %87 = sub nsw i64 %83, %84
  br label %88

88:                                               ; preds = %88, %86
  %89 = phi i64 [ 0, %86 ], [ %134, %88 ]
  %90 = phi i64 [ %87, %86 ], [ %135, %88 ]
  %91 = getelementptr %struct.PosAndCount, %struct.PosAndCount* %12, i64 %89
  %92 = getelementptr %struct.PosAndCount, %struct.PosAndCount* %6, i64 %89
  %93 = bitcast %struct.PosAndCount* %91 to <2 x i64>*
  %94 = load <2 x i64>, <2 x i64>* %93, align 4, !alias.scope !79
  %95 = getelementptr %struct.PosAndCount, %struct.PosAndCount* %91, i64 2
  %96 = bitcast %struct.PosAndCount* %95 to <2 x i64>*
  %97 = load <2 x i64>, <2 x i64>* %96, align 4, !alias.scope !79
  %98 = bitcast %struct.PosAndCount* %92 to <2 x i64>*
  store <2 x i64> %94, <2 x i64>* %98, align 4, !alias.scope !82, !noalias !79
  %99 = getelementptr %struct.PosAndCount, %struct.PosAndCount* %92, i64 2
  %100 = bitcast %struct.PosAndCount* %99 to <2 x i64>*
  store <2 x i64> %97, <2 x i64>* %100, align 4, !alias.scope !82, !noalias !79
  %101 = or i64 %89, 4
  %102 = getelementptr %struct.PosAndCount, %struct.PosAndCount* %12, i64 %101
  %103 = getelementptr %struct.PosAndCount, %struct.PosAndCount* %6, i64 %101
  %104 = bitcast %struct.PosAndCount* %102 to <2 x i64>*
  %105 = load <2 x i64>, <2 x i64>* %104, align 4, !alias.scope !79
  %106 = getelementptr %struct.PosAndCount, %struct.PosAndCount* %102, i64 2
  %107 = bitcast %struct.PosAndCount* %106 to <2 x i64>*
  %108 = load <2 x i64>, <2 x i64>* %107, align 4, !alias.scope !79
  %109 = bitcast %struct.PosAndCount* %103 to <2 x i64>*
  store <2 x i64> %105, <2 x i64>* %109, align 4, !alias.scope !82, !noalias !79
  %110 = getelementptr %struct.PosAndCount, %struct.PosAndCount* %103, i64 2
  %111 = bitcast %struct.PosAndCount* %110 to <2 x i64>*
  store <2 x i64> %108, <2 x i64>* %111, align 4, !alias.scope !82, !noalias !79
  %112 = or i64 %89, 8
  %113 = getelementptr %struct.PosAndCount, %struct.PosAndCount* %12, i64 %112
  %114 = getelementptr %struct.PosAndCount, %struct.PosAndCount* %6, i64 %112
  %115 = bitcast %struct.PosAndCount* %113 to <2 x i64>*
  %116 = load <2 x i64>, <2 x i64>* %115, align 4, !alias.scope !79
  %117 = getelementptr %struct.PosAndCount, %struct.PosAndCount* %113, i64 2
  %118 = bitcast %struct.PosAndCount* %117 to <2 x i64>*
  %119 = load <2 x i64>, <2 x i64>* %118, align 4, !alias.scope !79
  %120 = bitcast %struct.PosAndCount* %114 to <2 x i64>*
  store <2 x i64> %116, <2 x i64>* %120, align 4, !alias.scope !82, !noalias !79
  %121 = getelementptr %struct.PosAndCount, %struct.PosAndCount* %114, i64 2
  %122 = bitcast %struct.PosAndCount* %121 to <2 x i64>*
  store <2 x i64> %119, <2 x i64>* %122, align 4, !alias.scope !82, !noalias !79
  %123 = or i64 %89, 12
  %124 = getelementptr %struct.PosAndCount, %struct.PosAndCount* %12, i64 %123
  %125 = getelementptr %struct.PosAndCount, %struct.PosAndCount* %6, i64 %123
  %126 = bitcast %struct.PosAndCount* %124 to <2 x i64>*
  %127 = load <2 x i64>, <2 x i64>* %126, align 4, !alias.scope !79
  %128 = getelementptr %struct.PosAndCount, %struct.PosAndCount* %124, i64 2
  %129 = bitcast %struct.PosAndCount* %128 to <2 x i64>*
  %130 = load <2 x i64>, <2 x i64>* %129, align 4, !alias.scope !79
  %131 = bitcast %struct.PosAndCount* %125 to <2 x i64>*
  store <2 x i64> %127, <2 x i64>* %131, align 4, !alias.scope !82, !noalias !79
  %132 = getelementptr %struct.PosAndCount, %struct.PosAndCount* %125, i64 2
  %133 = bitcast %struct.PosAndCount* %132 to <2 x i64>*
  store <2 x i64> %130, <2 x i64>* %133, align 4, !alias.scope !82, !noalias !79
  %134 = add i64 %89, 16
  %135 = add i64 %90, -4
  %136 = icmp eq i64 %135, 0
  br i1 %136, label %137, label %88, !llvm.loop !84

137:                                              ; preds = %88, %77
  %138 = phi i64 [ 0, %77 ], [ %134, %88 ]
  %139 = icmp eq i64 %84, 0
  br i1 %139, label %156, label %140

140:                                              ; preds = %137, %140
  %141 = phi i64 [ %153, %140 ], [ %138, %137 ]
  %142 = phi i64 [ %154, %140 ], [ %84, %137 ]
  %143 = getelementptr %struct.PosAndCount, %struct.PosAndCount* %12, i64 %141
  %144 = getelementptr %struct.PosAndCount, %struct.PosAndCount* %6, i64 %141
  %145 = bitcast %struct.PosAndCount* %143 to <2 x i64>*
  %146 = load <2 x i64>, <2 x i64>* %145, align 4, !alias.scope !79
  %147 = getelementptr %struct.PosAndCount, %struct.PosAndCount* %143, i64 2
  %148 = bitcast %struct.PosAndCount* %147 to <2 x i64>*
  %149 = load <2 x i64>, <2 x i64>* %148, align 4, !alias.scope !79
  %150 = bitcast %struct.PosAndCount* %144 to <2 x i64>*
  store <2 x i64> %146, <2 x i64>* %150, align 4, !alias.scope !82, !noalias !79
  %151 = getelementptr %struct.PosAndCount, %struct.PosAndCount* %144, i64 2
  %152 = bitcast %struct.PosAndCount* %151 to <2 x i64>*
  store <2 x i64> %149, <2 x i64>* %152, align 4, !alias.scope !82, !noalias !79
  %153 = add i64 %141, 4
  %154 = add i64 %142, -1
  %155 = icmp eq i64 %154, 0
  br i1 %155, label %156, label %140, !llvm.loop !85

156:                                              ; preds = %140, %137
  %157 = icmp eq i64 %37, %78
  br i1 %157, label %286, label %39

158:                                              ; preds = %26
  %159 = icmp eq %struct.PosAndCount* %13, %16
  br i1 %159, label %965, label %160

160:                                              ; preds = %158
  %161 = getelementptr %struct.PosAndCount, %struct.PosAndCount* %16, i64 -1, i32 0
  %162 = ptrtoint i32* %161 to i64
  %163 = sub i64 %162, %27
  %164 = lshr i64 %163, 3
  %165 = add nuw nsw i64 %164, 1
  %166 = icmp ult i64 %165, 4
  br i1 %166, label %167, label %194

167:                                              ; preds = %284, %194, %160
  %168 = phi %struct.PosAndCount* [ %13, %194 ], [ %13, %160 ], [ %207, %284 ]
  %169 = phi %struct.PosAndCount* [ %6, %194 ], [ %6, %160 ], [ %208, %284 ]
  %170 = ptrtoint %struct.PosAndCount* %168 to i64
  %171 = getelementptr %struct.PosAndCount, %struct.PosAndCount* %16, i64 -1, i32 0
  %172 = ptrtoint i32* %171 to i64
  %173 = sub i64 %172, %170
  %174 = lshr i64 %173, 3
  %175 = add nuw nsw i64 %174, 1
  %176 = and i64 %175, 7
  %177 = icmp eq i64 %176, 0
  br i1 %177, label %189, label %178

178:                                              ; preds = %167, %178
  %179 = phi %struct.PosAndCount* [ %185, %178 ], [ %168, %167 ]
  %180 = phi %struct.PosAndCount* [ %186, %178 ], [ %169, %167 ]
  %181 = phi i64 [ %187, %178 ], [ %176, %167 ]
  %182 = bitcast %struct.PosAndCount* %179 to i64*
  %183 = bitcast %struct.PosAndCount* %180 to i64*
  %184 = load i64, i64* %182, align 4
  store i64 %184, i64* %183, align 4
  %185 = getelementptr inbounds %struct.PosAndCount, %struct.PosAndCount* %179, i64 1
  %186 = getelementptr inbounds %struct.PosAndCount, %struct.PosAndCount* %180, i64 1
  %187 = add i64 %181, -1
  %188 = icmp eq i64 %187, 0
  br i1 %188, label %189, label %178, !llvm.loop !86

189:                                              ; preds = %178, %167
  %190 = phi %struct.PosAndCount* [ undef, %167 ], [ %186, %178 ]
  %191 = phi %struct.PosAndCount* [ %168, %167 ], [ %185, %178 ]
  %192 = phi %struct.PosAndCount* [ %169, %167 ], [ %186, %178 ]
  %193 = icmp ult i64 %173, 56
  br i1 %193, label %367, label %557

194:                                              ; preds = %160
  %195 = getelementptr %struct.PosAndCount, %struct.PosAndCount* %16, i64 -1, i32 0
  %196 = ptrtoint i32* %195 to i64
  %197 = sub i64 %196, %27
  %198 = lshr i64 %197, 3
  %199 = add nuw nsw i64 %198, 1
  %200 = getelementptr %struct.PosAndCount, %struct.PosAndCount* %6, i64 %199
  %201 = getelementptr %struct.PosAndCount, %struct.PosAndCount* %13, i64 %199
  %202 = icmp ugt %struct.PosAndCount* %201, %6
  %203 = icmp ult %struct.PosAndCount* %13, %200
  %204 = and i1 %202, %203
  br i1 %204, label %167, label %205

205:                                              ; preds = %194
  %206 = and i64 %165, 4611686018427387900
  %207 = getelementptr %struct.PosAndCount, %struct.PosAndCount* %13, i64 %206
  %208 = getelementptr %struct.PosAndCount, %struct.PosAndCount* %6, i64 %206
  %209 = add nsw i64 %206, -4
  %210 = lshr exact i64 %209, 2
  %211 = add nuw nsw i64 %210, 1
  %212 = and i64 %211, 3
  %213 = icmp ult i64 %209, 12
  br i1 %213, label %265, label %214

214:                                              ; preds = %205
  %215 = sub nsw i64 %211, %212
  br label %216

216:                                              ; preds = %216, %214
  %217 = phi i64 [ 0, %214 ], [ %262, %216 ]
  %218 = phi i64 [ %215, %214 ], [ %263, %216 ]
  %219 = getelementptr %struct.PosAndCount, %struct.PosAndCount* %13, i64 %217
  %220 = getelementptr %struct.PosAndCount, %struct.PosAndCount* %6, i64 %217
  %221 = bitcast %struct.PosAndCount* %219 to <2 x i64>*
  %222 = load <2 x i64>, <2 x i64>* %221, align 4, !alias.scope !87
  %223 = getelementptr %struct.PosAndCount, %struct.PosAndCount* %219, i64 2
  %224 = bitcast %struct.PosAndCount* %223 to <2 x i64>*
  %225 = load <2 x i64>, <2 x i64>* %224, align 4, !alias.scope !87
  %226 = bitcast %struct.PosAndCount* %220 to <2 x i64>*
  store <2 x i64> %222, <2 x i64>* %226, align 4, !alias.scope !90, !noalias !87
  %227 = getelementptr %struct.PosAndCount, %struct.PosAndCount* %220, i64 2
  %228 = bitcast %struct.PosAndCount* %227 to <2 x i64>*
  store <2 x i64> %225, <2 x i64>* %228, align 4, !alias.scope !90, !noalias !87
  %229 = or i64 %217, 4
  %230 = getelementptr %struct.PosAndCount, %struct.PosAndCount* %13, i64 %229
  %231 = getelementptr %struct.PosAndCount, %struct.PosAndCount* %6, i64 %229
  %232 = bitcast %struct.PosAndCount* %230 to <2 x i64>*
  %233 = load <2 x i64>, <2 x i64>* %232, align 4, !alias.scope !87
  %234 = getelementptr %struct.PosAndCount, %struct.PosAndCount* %230, i64 2
  %235 = bitcast %struct.PosAndCount* %234 to <2 x i64>*
  %236 = load <2 x i64>, <2 x i64>* %235, align 4, !alias.scope !87
  %237 = bitcast %struct.PosAndCount* %231 to <2 x i64>*
  store <2 x i64> %233, <2 x i64>* %237, align 4, !alias.scope !90, !noalias !87
  %238 = getelementptr %struct.PosAndCount, %struct.PosAndCount* %231, i64 2
  %239 = bitcast %struct.PosAndCount* %238 to <2 x i64>*
  store <2 x i64> %236, <2 x i64>* %239, align 4, !alias.scope !90, !noalias !87
  %240 = or i64 %217, 8
  %241 = getelementptr %struct.PosAndCount, %struct.PosAndCount* %13, i64 %240
  %242 = getelementptr %struct.PosAndCount, %struct.PosAndCount* %6, i64 %240
  %243 = bitcast %struct.PosAndCount* %241 to <2 x i64>*
  %244 = load <2 x i64>, <2 x i64>* %243, align 4, !alias.scope !87
  %245 = getelementptr %struct.PosAndCount, %struct.PosAndCount* %241, i64 2
  %246 = bitcast %struct.PosAndCount* %245 to <2 x i64>*
  %247 = load <2 x i64>, <2 x i64>* %246, align 4, !alias.scope !87
  %248 = bitcast %struct.PosAndCount* %242 to <2 x i64>*
  store <2 x i64> %244, <2 x i64>* %248, align 4, !alias.scope !90, !noalias !87
  %249 = getelementptr %struct.PosAndCount, %struct.PosAndCount* %242, i64 2
  %250 = bitcast %struct.PosAndCount* %249 to <2 x i64>*
  store <2 x i64> %247, <2 x i64>* %250, align 4, !alias.scope !90, !noalias !87
  %251 = or i64 %217, 12
  %252 = getelementptr %struct.PosAndCount, %struct.PosAndCount* %13, i64 %251
  %253 = getelementptr %struct.PosAndCount, %struct.PosAndCount* %6, i64 %251
  %254 = bitcast %struct.PosAndCount* %252 to <2 x i64>*
  %255 = load <2 x i64>, <2 x i64>* %254, align 4, !alias.scope !87
  %256 = getelementptr %struct.PosAndCount, %struct.PosAndCount* %252, i64 2
  %257 = bitcast %struct.PosAndCount* %256 to <2 x i64>*
  %258 = load <2 x i64>, <2 x i64>* %257, align 4, !alias.scope !87
  %259 = bitcast %struct.PosAndCount* %253 to <2 x i64>*
  store <2 x i64> %255, <2 x i64>* %259, align 4, !alias.scope !90, !noalias !87
  %260 = getelementptr %struct.PosAndCount, %struct.PosAndCount* %253, i64 2
  %261 = bitcast %struct.PosAndCount* %260 to <2 x i64>*
  store <2 x i64> %258, <2 x i64>* %261, align 4, !alias.scope !90, !noalias !87
  %262 = add i64 %217, 16
  %263 = add i64 %218, -4
  %264 = icmp eq i64 %263, 0
  br i1 %264, label %265, label %216, !llvm.loop !92

265:                                              ; preds = %216, %205
  %266 = phi i64 [ 0, %205 ], [ %262, %216 ]
  %267 = icmp eq i64 %212, 0
  br i1 %267, label %284, label %268

268:                                              ; preds = %265, %268
  %269 = phi i64 [ %281, %268 ], [ %266, %265 ]
  %270 = phi i64 [ %282, %268 ], [ %212, %265 ]
  %271 = getelementptr %struct.PosAndCount, %struct.PosAndCount* %13, i64 %269
  %272 = getelementptr %struct.PosAndCount, %struct.PosAndCount* %6, i64 %269
  %273 = bitcast %struct.PosAndCount* %271 to <2 x i64>*
  %274 = load <2 x i64>, <2 x i64>* %273, align 4, !alias.scope !87
  %275 = getelementptr %struct.PosAndCount, %struct.PosAndCount* %271, i64 2
  %276 = bitcast %struct.PosAndCount* %275 to <2 x i64>*
  %277 = load <2 x i64>, <2 x i64>* %276, align 4, !alias.scope !87
  %278 = bitcast %struct.PosAndCount* %272 to <2 x i64>*
  store <2 x i64> %274, <2 x i64>* %278, align 4, !alias.scope !90, !noalias !87
  %279 = getelementptr %struct.PosAndCount, %struct.PosAndCount* %272, i64 2
  %280 = bitcast %struct.PosAndCount* %279 to <2 x i64>*
  store <2 x i64> %277, <2 x i64>* %280, align 4, !alias.scope !90, !noalias !87
  %281 = add i64 %269, 4
  %282 = add i64 %270, -1
  %283 = icmp eq i64 %282, 0
  br i1 %283, label %284, label %268, !llvm.loop !93

284:                                              ; preds = %268, %265
  %285 = icmp eq i64 %165, %206
  br i1 %285, label %367, label %167

286:                                              ; preds = %61, %323, %156
  %287 = phi %struct.PosAndCount* [ %80, %156 ], [ %62, %61 ], [ %365, %323 ]
  %288 = icmp eq %struct.PosAndCount* %287, %6
  br i1 %288, label %965, label %289

289:                                              ; preds = %286, %318
  %290 = phi %struct.PosAndCount* [ %320, %318 ], [ %6, %286 ]
  %291 = phi %struct.PosAndCount* [ %321, %318 ], [ %12, %286 ]
  %292 = phi %struct.PosAndCount* [ %319, %318 ], [ %13, %286 ]
  %293 = icmp eq %struct.PosAndCount* %292, %16
  br i1 %293, label %294, label %302

294:                                              ; preds = %289
  %295 = ptrtoint %struct.PosAndCount* %287 to i64
  %296 = ptrtoint %struct.PosAndCount* %290 to i64
  %297 = sub i64 %295, %296
  %298 = icmp eq i64 %297, 0
  br i1 %298, label %965, label %299

299:                                              ; preds = %294
  %300 = bitcast %struct.PosAndCount* %291 to i8*
  %301 = bitcast %struct.PosAndCount* %290 to i8*
  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* align 4 %300, i8* align 4 %301, i64 %297, i1 false) #3
  br label %965

302:                                              ; preds = %289
  %303 = getelementptr inbounds %struct.PosAndCount, %struct.PosAndCount* %292, i64 0, i32 1
  %304 = load i32, i32* %303, align 4
  %305 = getelementptr inbounds %struct.PosAndCount, %struct.PosAndCount* %290, i64 0, i32 1
  %306 = load i32, i32* %305, align 4
  %307 = icmp ult i32 %304, %306
  br i1 %307, label %308, label %313

308:                                              ; preds = %302
  %309 = bitcast %struct.PosAndCount* %292 to i64*
  %310 = bitcast %struct.PosAndCount* %291 to i64*
  %311 = load i64, i64* %309, align 4
  store i64 %311, i64* %310, align 4
  %312 = getelementptr inbounds %struct.PosAndCount, %struct.PosAndCount* %292, i64 1
  br label %318

313:                                              ; preds = %302
  %314 = bitcast %struct.PosAndCount* %290 to i64*
  %315 = bitcast %struct.PosAndCount* %291 to i64*
  %316 = load i64, i64* %314, align 4
  store i64 %316, i64* %315, align 4
  %317 = getelementptr inbounds %struct.PosAndCount, %struct.PosAndCount* %290, i64 1
  br label %318

318:                                              ; preds = %313, %308
  %319 = phi %struct.PosAndCount* [ %312, %308 ], [ %292, %313 ]
  %320 = phi %struct.PosAndCount* [ %290, %308 ], [ %317, %313 ]
  %321 = getelementptr inbounds %struct.PosAndCount, %struct.PosAndCount* %291, i64 1
  %322 = icmp eq %struct.PosAndCount* %320, %287
  br i1 %322, label %965, label %289

323:                                              ; preds = %61, %323
  %324 = phi %struct.PosAndCount* [ %364, %323 ], [ %63, %61 ]
  %325 = phi %struct.PosAndCount* [ %365, %323 ], [ %64, %61 ]
  %326 = bitcast %struct.PosAndCount* %324 to i64*
  %327 = bitcast %struct.PosAndCount* %325 to i64*
  %328 = load i64, i64* %326, align 4
  store i64 %328, i64* %327, align 4
  %329 = getelementptr inbounds %struct.PosAndCount, %struct.PosAndCount* %324, i64 1
  %330 = getelementptr inbounds %struct.PosAndCount, %struct.PosAndCount* %325, i64 1
  %331 = bitcast %struct.PosAndCount* %329 to i64*
  %332 = bitcast %struct.PosAndCount* %330 to i64*
  %333 = load i64, i64* %331, align 4
  store i64 %333, i64* %332, align 4
  %334 = getelementptr inbounds %struct.PosAndCount, %struct.PosAndCount* %324, i64 2
  %335 = getelementptr inbounds %struct.PosAndCount, %struct.PosAndCount* %325, i64 2
  %336 = bitcast %struct.PosAndCount* %334 to i64*
  %337 = bitcast %struct.PosAndCount* %335 to i64*
  %338 = load i64, i64* %336, align 4
  store i64 %338, i64* %337, align 4
  %339 = getelementptr inbounds %struct.PosAndCount, %struct.PosAndCount* %324, i64 3
  %340 = getelementptr inbounds %struct.PosAndCount, %struct.PosAndCount* %325, i64 3
  %341 = bitcast %struct.PosAndCount* %339 to i64*
  %342 = bitcast %struct.PosAndCount* %340 to i64*
  %343 = load i64, i64* %341, align 4
  store i64 %343, i64* %342, align 4
  %344 = getelementptr inbounds %struct.PosAndCount, %struct.PosAndCount* %324, i64 4
  %345 = getelementptr inbounds %struct.PosAndCount, %struct.PosAndCount* %325, i64 4
  %346 = bitcast %struct.PosAndCount* %344 to i64*
  %347 = bitcast %struct.PosAndCount* %345 to i64*
  %348 = load i64, i64* %346, align 4
  store i64 %348, i64* %347, align 4
  %349 = getelementptr inbounds %struct.PosAndCount, %struct.PosAndCount* %324, i64 5
  %350 = getelementptr inbounds %struct.PosAndCount, %struct.PosAndCount* %325, i64 5
  %351 = bitcast %struct.PosAndCount* %349 to i64*
  %352 = bitcast %struct.PosAndCount* %350 to i64*
  %353 = load i64, i64* %351, align 4
  store i64 %353, i64* %352, align 4
  %354 = getelementptr inbounds %struct.PosAndCount, %struct.PosAndCount* %324, i64 6
  %355 = getelementptr inbounds %struct.PosAndCount, %struct.PosAndCount* %325, i64 6
  %356 = bitcast %struct.PosAndCount* %354 to i64*
  %357 = bitcast %struct.PosAndCount* %355 to i64*
  %358 = load i64, i64* %356, align 4
  store i64 %358, i64* %357, align 4
  %359 = getelementptr inbounds %struct.PosAndCount, %struct.PosAndCount* %324, i64 7
  %360 = getelementptr inbounds %struct.PosAndCount, %struct.PosAndCount* %325, i64 7
  %361 = bitcast %struct.PosAndCount* %359 to i64*
  %362 = bitcast %struct.PosAndCount* %360 to i64*
  %363 = load i64, i64* %361, align 4
  store i64 %363, i64* %362, align 4
  %364 = getelementptr inbounds %struct.PosAndCount, %struct.PosAndCount* %324, i64 8
  %365 = getelementptr inbounds %struct.PosAndCount, %struct.PosAndCount* %325, i64 8
  %366 = icmp eq %struct.PosAndCount* %364, %13
  br i1 %366, label %286, label %323, !llvm.loop !94

367:                                              ; preds = %189, %557, %284
  %368 = phi %struct.PosAndCount* [ %208, %284 ], [ %190, %189 ], [ %599, %557 ]
  %369 = icmp eq %struct.PosAndCount* %368, %6
  br i1 %369, label %965, label %370

370:                                              ; preds = %367, %541
  %371 = phi %struct.PosAndCount* [ %549, %541 ], [ %16, %367 ]
  %372 = phi %struct.PosAndCount* [ %552, %541 ], [ %368, %367 ]
  %373 = phi %struct.PosAndCount* [ %551, %541 ], [ %13, %367 ]
  %374 = icmp eq %struct.PosAndCount* %373, %12
  br i1 %374, label %375, label %541

375:                                              ; preds = %370
  %376 = getelementptr %struct.PosAndCount, %struct.PosAndCount* %372, i64 -1, i32 0
  %377 = ptrtoint i32* %376 to i64
  %378 = sub i64 %377, %9
  %379 = lshr i64 %378, 3
  %380 = add nuw nsw i64 %379, 1
  %381 = icmp ult i64 %380, 4
  br i1 %381, label %472, label %382

382:                                              ; preds = %375
  %383 = getelementptr %struct.PosAndCount, %struct.PosAndCount* %372, i64 -1, i32 0
  %384 = ptrtoint i32* %383 to i64
  %385 = sub i64 %384, %9
  %386 = lshr i64 %385, 3
  %387 = xor i64 %386, -1
  %388 = getelementptr %struct.PosAndCount, %struct.PosAndCount* %371, i64 %387
  %389 = getelementptr %struct.PosAndCount, %struct.PosAndCount* %372, i64 %387
  %390 = icmp ult %struct.PosAndCount* %388, %372
  %391 = icmp ult %struct.PosAndCount* %389, %371
  %392 = and i1 %390, %391
  br i1 %392, label %472, label %393

393:                                              ; preds = %382
  %394 = and i64 %380, 4611686018427387900
  %395 = sub nsw i64 0, %394
  %396 = getelementptr %struct.PosAndCount, %struct.PosAndCount* %372, i64 %395
  %397 = sub nsw i64 0, %394
  %398 = getelementptr %struct.PosAndCount, %struct.PosAndCount* %371, i64 %397
  %399 = add nsw i64 %394, -4
  %400 = lshr exact i64 %399, 2
  %401 = add nuw nsw i64 %400, 1
  %402 = and i64 %401, 1
  %403 = icmp eq i64 %399, 0
  br i1 %403, label %450, label %404

404:                                              ; preds = %393
  %405 = sub nuw nsw i64 %401, %402
  %406 = getelementptr %struct.PosAndCount, %struct.PosAndCount* %372, i64 -1
  %407 = getelementptr %struct.PosAndCount, %struct.PosAndCount* %371, i64 -1
  %408 = getelementptr %struct.PosAndCount, %struct.PosAndCount* %372, i64 -1
  %409 = getelementptr %struct.PosAndCount, %struct.PosAndCount* %371, i64 -1
  br label %410

410:                                              ; preds = %410, %404
  %411 = phi i64 [ 0, %404 ], [ %445, %410 ]
  %412 = phi i64 [ %405, %404 ], [ %446, %410 ]
  %413 = sub i64 0, %411
  %414 = sub i64 0, %411
  %415 = getelementptr inbounds %struct.PosAndCount, %struct.PosAndCount* %406, i64 %413
  %416 = getelementptr inbounds %struct.PosAndCount, %struct.PosAndCount* %407, i64 %414
  %417 = getelementptr inbounds %struct.PosAndCount, %struct.PosAndCount* %415, i64 -1
  %418 = bitcast %struct.PosAndCount* %417 to <2 x i64>*
  %419 = load <2 x i64>, <2 x i64>* %418, align 4, !alias.scope !95
  %420 = getelementptr inbounds %struct.PosAndCount, %struct.PosAndCount* %415, i64 -2
  %421 = getelementptr inbounds %struct.PosAndCount, %struct.PosAndCount* %420, i64 -1
  %422 = bitcast %struct.PosAndCount* %421 to <2 x i64>*
  %423 = load <2 x i64>, <2 x i64>* %422, align 4, !alias.scope !95
  %424 = getelementptr inbounds %struct.PosAndCount, %struct.PosAndCount* %416, i64 -1
  %425 = bitcast %struct.PosAndCount* %424 to <2 x i64>*
  store <2 x i64> %419, <2 x i64>* %425, align 4, !alias.scope !98, !noalias !95
  %426 = getelementptr inbounds %struct.PosAndCount, %struct.PosAndCount* %416, i64 -2
  %427 = getelementptr inbounds %struct.PosAndCount, %struct.PosAndCount* %426, i64 -1
  %428 = bitcast %struct.PosAndCount* %427 to <2 x i64>*
  store <2 x i64> %423, <2 x i64>* %428, align 4, !alias.scope !98, !noalias !95
  %429 = sub nuw nsw i64 -4, %411
  %430 = sub nuw nsw i64 -4, %411
  %431 = getelementptr inbounds %struct.PosAndCount, %struct.PosAndCount* %408, i64 %429
  %432 = getelementptr inbounds %struct.PosAndCount, %struct.PosAndCount* %409, i64 %430
  %433 = getelementptr inbounds %struct.PosAndCount, %struct.PosAndCount* %431, i64 -1
  %434 = bitcast %struct.PosAndCount* %433 to <2 x i64>*
  %435 = load <2 x i64>, <2 x i64>* %434, align 4, !alias.scope !95
  %436 = getelementptr inbounds %struct.PosAndCount, %struct.PosAndCount* %431, i64 -2
  %437 = getelementptr inbounds %struct.PosAndCount, %struct.PosAndCount* %436, i64 -1
  %438 = bitcast %struct.PosAndCount* %437 to <2 x i64>*
  %439 = load <2 x i64>, <2 x i64>* %438, align 4, !alias.scope !95
  %440 = getelementptr inbounds %struct.PosAndCount, %struct.PosAndCount* %432, i64 -1
  %441 = bitcast %struct.PosAndCount* %440 to <2 x i64>*
  store <2 x i64> %435, <2 x i64>* %441, align 4, !alias.scope !98, !noalias !95
  %442 = getelementptr inbounds %struct.PosAndCount, %struct.PosAndCount* %432, i64 -2
  %443 = getelementptr inbounds %struct.PosAndCount, %struct.PosAndCount* %442, i64 -1
  %444 = bitcast %struct.PosAndCount* %443 to <2 x i64>*
  store <2 x i64> %439, <2 x i64>* %444, align 4, !alias.scope !98, !noalias !95
  %445 = add i64 %411, 8
  %446 = add i64 %412, -2
  %447 = icmp eq i64 %446, 0
  br i1 %447, label %448, label %410, !llvm.loop !100

448:                                              ; preds = %410
  %449 = sub nuw nsw i64 -8, %411
  br label %450

450:                                              ; preds = %448, %393
  %451 = phi i64 [ 0, %393 ], [ %449, %448 ]
  %452 = icmp eq i64 %402, 0
  br i1 %452, label %470, label %453

453:                                              ; preds = %450
  %454 = getelementptr %struct.PosAndCount, %struct.PosAndCount* %372, i64 -1
  %455 = getelementptr %struct.PosAndCount, %struct.PosAndCount* %371, i64 -1
  %456 = getelementptr inbounds %struct.PosAndCount, %struct.PosAndCount* %454, i64 %451
  %457 = getelementptr inbounds %struct.PosAndCount, %struct.PosAndCount* %455, i64 %451
  %458 = getelementptr inbounds %struct.PosAndCount, %struct.PosAndCount* %456, i64 -1
  %459 = bitcast %struct.PosAndCount* %458 to <2 x i64>*
  %460 = load <2 x i64>, <2 x i64>* %459, align 4, !alias.scope !95
  %461 = getelementptr inbounds %struct.PosAndCount, %struct.PosAndCount* %456, i64 -2
  %462 = getelementptr inbounds %struct.PosAndCount, %struct.PosAndCount* %461, i64 -1
  %463 = bitcast %struct.PosAndCount* %462 to <2 x i64>*
  %464 = load <2 x i64>, <2 x i64>* %463, align 4, !alias.scope !95
  %465 = getelementptr inbounds %struct.PosAndCount, %struct.PosAndCount* %457, i64 -1
  %466 = bitcast %struct.PosAndCount* %465 to <2 x i64>*
  store <2 x i64> %460, <2 x i64>* %466, align 4, !alias.scope !98, !noalias !95
  %467 = getelementptr inbounds %struct.PosAndCount, %struct.PosAndCount* %457, i64 -2
  %468 = getelementptr inbounds %struct.PosAndCount, %struct.PosAndCount* %467, i64 -1
  %469 = bitcast %struct.PosAndCount* %468 to <2 x i64>*
  store <2 x i64> %464, <2 x i64>* %469, align 4, !alias.scope !98, !noalias !95
  br label %470

470:                                              ; preds = %450, %453
  %471 = icmp eq i64 %380, %394
  br i1 %471, label %965, label %472

472:                                              ; preds = %470, %382, %375
  %473 = phi %struct.PosAndCount* [ %372, %382 ], [ %372, %375 ], [ %396, %470 ]
  %474 = phi %struct.PosAndCount* [ %371, %382 ], [ %371, %375 ], [ %398, %470 ]
  %475 = getelementptr %struct.PosAndCount, %struct.PosAndCount* %473, i64 -1, i32 0
  %476 = ptrtoint i32* %475 to i64
  %477 = sub i64 %476, %9
  %478 = lshr i64 %477, 3
  %479 = add nuw nsw i64 %478, 1
  %480 = and i64 %479, 7
  %481 = icmp eq i64 %480, 0
  br i1 %481, label %493, label %482

482:                                              ; preds = %472, %482
  %483 = phi %struct.PosAndCount* [ %486, %482 ], [ %473, %472 ]
  %484 = phi %struct.PosAndCount* [ %487, %482 ], [ %474, %472 ]
  %485 = phi i64 [ %491, %482 ], [ %480, %472 ]
  %486 = getelementptr inbounds %struct.PosAndCount, %struct.PosAndCount* %483, i64 -1
  %487 = getelementptr inbounds %struct.PosAndCount, %struct.PosAndCount* %484, i64 -1
  %488 = bitcast %struct.PosAndCount* %486 to i64*
  %489 = bitcast %struct.PosAndCount* %487 to i64*
  %490 = load i64, i64* %488, align 4
  store i64 %490, i64* %489, align 4
  %491 = add i64 %485, -1
  %492 = icmp eq i64 %491, 0
  br i1 %492, label %493, label %482, !llvm.loop !101

493:                                              ; preds = %482, %472
  %494 = phi %struct.PosAndCount* [ %473, %472 ], [ %486, %482 ]
  %495 = phi %struct.PosAndCount* [ %474, %472 ], [ %487, %482 ]
  %496 = icmp ult i64 %477, 56
  br i1 %496, label %965, label %497

497:                                              ; preds = %493, %497
  %498 = phi %struct.PosAndCount* [ %535, %497 ], [ %494, %493 ]
  %499 = phi %struct.PosAndCount* [ %536, %497 ], [ %495, %493 ]
  %500 = getelementptr inbounds %struct.PosAndCount, %struct.PosAndCount* %498, i64 -1
  %501 = getelementptr inbounds %struct.PosAndCount, %struct.PosAndCount* %499, i64 -1
  %502 = bitcast %struct.PosAndCount* %500 to i64*
  %503 = bitcast %struct.PosAndCount* %501 to i64*
  %504 = load i64, i64* %502, align 4
  store i64 %504, i64* %503, align 4
  %505 = getelementptr inbounds %struct.PosAndCount, %struct.PosAndCount* %498, i64 -2
  %506 = getelementptr inbounds %struct.PosAndCount, %struct.PosAndCount* %499, i64 -2
  %507 = bitcast %struct.PosAndCount* %505 to i64*
  %508 = bitcast %struct.PosAndCount* %506 to i64*
  %509 = load i64, i64* %507, align 4
  store i64 %509, i64* %508, align 4
  %510 = getelementptr inbounds %struct.PosAndCount, %struct.PosAndCount* %498, i64 -3
  %511 = getelementptr inbounds %struct.PosAndCount, %struct.PosAndCount* %499, i64 -3
  %512 = bitcast %struct.PosAndCount* %510 to i64*
  %513 = bitcast %struct.PosAndCount* %511 to i64*
  %514 = load i64, i64* %512, align 4
  store i64 %514, i64* %513, align 4
  %515 = getelementptr inbounds %struct.PosAndCount, %struct.PosAndCount* %498, i64 -4
  %516 = getelementptr inbounds %struct.PosAndCount, %struct.PosAndCount* %499, i64 -4
  %517 = bitcast %struct.PosAndCount* %515 to i64*
  %518 = bitcast %struct.PosAndCount* %516 to i64*
  %519 = load i64, i64* %517, align 4
  store i64 %519, i64* %518, align 4
  %520 = getelementptr inbounds %struct.PosAndCount, %struct.PosAndCount* %498, i64 -5
  %521 = getelementptr inbounds %struct.PosAndCount, %struct.PosAndCount* %499, i64 -5
  %522 = bitcast %struct.PosAndCount* %520 to i64*
  %523 = bitcast %struct.PosAndCount* %521 to i64*
  %524 = load i64, i64* %522, align 4
  store i64 %524, i64* %523, align 4
  %525 = getelementptr inbounds %struct.PosAndCount, %struct.PosAndCount* %498, i64 -6
  %526 = getelementptr inbounds %struct.PosAndCount, %struct.PosAndCount* %499, i64 -6
  %527 = bitcast %struct.PosAndCount* %525 to i64*
  %528 = bitcast %struct.PosAndCount* %526 to i64*
  %529 = load i64, i64* %527, align 4
  store i64 %529, i64* %528, align 4
  %530 = getelementptr inbounds %struct.PosAndCount, %struct.PosAndCount* %498, i64 -7
  %531 = getelementptr inbounds %struct.PosAndCount, %struct.PosAndCount* %499, i64 -7
  %532 = bitcast %struct.PosAndCount* %530 to i64*
  %533 = bitcast %struct.PosAndCount* %531 to i64*
  %534 = load i64, i64* %532, align 4
  store i64 %534, i64* %533, align 4
  %535 = getelementptr inbounds %struct.PosAndCount, %struct.PosAndCount* %498, i64 -8
  %536 = getelementptr inbounds %struct.PosAndCount, %struct.PosAndCount* %499, i64 -8
  %537 = bitcast %struct.PosAndCount* %535 to i64*
  %538 = bitcast %struct.PosAndCount* %536 to i64*
  %539 = load i64, i64* %537, align 4
  store i64 %539, i64* %538, align 4
  %540 = icmp eq %struct.PosAndCount* %535, %6
  br i1 %540, label %965, label %497, !llvm.loop !102

541:                                              ; preds = %370
  %542 = getelementptr inbounds %struct.PosAndCount, %struct.PosAndCount* %373, i64 -1
  %543 = getelementptr inbounds %struct.PosAndCount, %struct.PosAndCount* %372, i64 -1
  %544 = getelementptr inbounds %struct.PosAndCount, %struct.PosAndCount* %372, i64 -1, i32 1
  %545 = load i32, i32* %544, align 4
  %546 = getelementptr inbounds %struct.PosAndCount, %struct.PosAndCount* %373, i64 -1, i32 1
  %547 = load i32, i32* %546, align 4
  %548 = icmp ult i32 %545, %547
  %549 = getelementptr inbounds %struct.PosAndCount, %struct.PosAndCount* %371, i64 -1
  %550 = select i1 %548, %struct.PosAndCount* %542, %struct.PosAndCount* %543
  %551 = select i1 %548, %struct.PosAndCount* %542, %struct.PosAndCount* %373
  %552 = select i1 %548, %struct.PosAndCount* %372, %struct.PosAndCount* %543
  %553 = bitcast %struct.PosAndCount* %550 to i64*
  %554 = bitcast %struct.PosAndCount* %549 to i64*
  %555 = load i64, i64* %553, align 4
  store i64 %555, i64* %554, align 4
  %556 = icmp eq %struct.PosAndCount* %552, %6
  br i1 %556, label %965, label %370

557:                                              ; preds = %189, %557
  %558 = phi %struct.PosAndCount* [ %598, %557 ], [ %191, %189 ]
  %559 = phi %struct.PosAndCount* [ %599, %557 ], [ %192, %189 ]
  %560 = bitcast %struct.PosAndCount* %558 to i64*
  %561 = bitcast %struct.PosAndCount* %559 to i64*
  %562 = load i64, i64* %560, align 4
  store i64 %562, i64* %561, align 4
  %563 = getelementptr inbounds %struct.PosAndCount, %struct.PosAndCount* %558, i64 1
  %564 = getelementptr inbounds %struct.PosAndCount, %struct.PosAndCount* %559, i64 1
  %565 = bitcast %struct.PosAndCount* %563 to i64*
  %566 = bitcast %struct.PosAndCount* %564 to i64*
  %567 = load i64, i64* %565, align 4
  store i64 %567, i64* %566, align 4
  %568 = getelementptr inbounds %struct.PosAndCount, %struct.PosAndCount* %558, i64 2
  %569 = getelementptr inbounds %struct.PosAndCount, %struct.PosAndCount* %559, i64 2
  %570 = bitcast %struct.PosAndCount* %568 to i64*
  %571 = bitcast %struct.PosAndCount* %569 to i64*
  %572 = load i64, i64* %570, align 4
  store i64 %572, i64* %571, align 4
  %573 = getelementptr inbounds %struct.PosAndCount, %struct.PosAndCount* %558, i64 3
  %574 = getelementptr inbounds %struct.PosAndCount, %struct.PosAndCount* %559, i64 3
  %575 = bitcast %struct.PosAndCount* %573 to i64*
  %576 = bitcast %struct.PosAndCount* %574 to i64*
  %577 = load i64, i64* %575, align 4
  store i64 %577, i64* %576, align 4
  %578 = getelementptr inbounds %struct.PosAndCount, %struct.PosAndCount* %558, i64 4
  %579 = getelementptr inbounds %struct.PosAndCount, %struct.PosAndCount* %559, i64 4
  %580 = bitcast %struct.PosAndCount* %578 to i64*
  %581 = bitcast %struct.PosAndCount* %579 to i64*
  %582 = load i64, i64* %580, align 4
  store i64 %582, i64* %581, align 4
  %583 = getelementptr inbounds %struct.PosAndCount, %struct.PosAndCount* %558, i64 5
  %584 = getelementptr inbounds %struct.PosAndCount, %struct.PosAndCount* %559, i64 5
  %585 = bitcast %struct.PosAndCount* %583 to i64*
  %586 = bitcast %struct.PosAndCount* %584 to i64*
  %587 = load i64, i64* %585, align 4
  store i64 %587, i64* %586, align 4
  %588 = getelementptr inbounds %struct.PosAndCount, %struct.PosAndCount* %558, i64 6
  %589 = getelementptr inbounds %struct.PosAndCount, %struct.PosAndCount* %559, i64 6
  %590 = bitcast %struct.PosAndCount* %588 to i64*
  %591 = bitcast %struct.PosAndCount* %589 to i64*
  %592 = load i64, i64* %590, align 4
  store i64 %592, i64* %591, align 4
  %593 = getelementptr inbounds %struct.PosAndCount, %struct.PosAndCount* %558, i64 7
  %594 = getelementptr inbounds %struct.PosAndCount, %struct.PosAndCount* %559, i64 7
  %595 = bitcast %struct.PosAndCount* %593 to i64*
  %596 = bitcast %struct.PosAndCount* %594 to i64*
  %597 = load i64, i64* %595, align 4
  store i64 %597, i64* %596, align 4
  %598 = getelementptr inbounds %struct.PosAndCount, %struct.PosAndCount* %558, i64 8
  %599 = getelementptr inbounds %struct.PosAndCount, %struct.PosAndCount* %559, i64 8
  %600 = icmp eq %struct.PosAndCount* %598, %16
  br i1 %600, label %367, label %557, !llvm.loop !103

601:                                              ; preds = %23, %607
  %602 = phi %struct.PosAndCount* [ %12, %23 ], [ %608, %607 ]
  %603 = phi i64 [ %15, %23 ], [ %609, %607 ]
  %604 = getelementptr inbounds %struct.PosAndCount, %struct.PosAndCount* %602, i64 0, i32 1
  %605 = load i32, i32* %604, align 4
  %606 = icmp ult i32 %25, %605
  br i1 %606, label %611, label %607

607:                                              ; preds = %601
  %608 = getelementptr inbounds %struct.PosAndCount, %struct.PosAndCount* %602, i64 1
  %609 = add nsw i64 %603, -1
  %610 = icmp eq i64 %609, 0
  br i1 %610, label %965, label %601

611:                                              ; preds = %601
  %612 = icmp slt i64 %603, %14
  br i1 %612, label %613, label %645

613:                                              ; preds = %611
  %614 = sdiv i64 %14, 2
  %615 = getelementptr inbounds %struct.PosAndCount, %struct.PosAndCount* %13, i64 %614
  %616 = ptrtoint %struct.PosAndCount* %13 to i64
  %617 = ptrtoint %struct.PosAndCount* %602 to i64
  %618 = sub i64 %616, %617
  %619 = icmp eq i64 %618, 0
  br i1 %619, label %640, label %620

620:                                              ; preds = %613
  %621 = ashr exact i64 %618, 3
  %622 = getelementptr inbounds %struct.PosAndCount, %struct.PosAndCount* %13, i64 %614, i32 1
  %623 = load i32, i32* %622, align 4
  br label %624

624:                                              ; preds = %624, %620
  %625 = phi i64 [ %621, %620 ], [ %636, %624 ]
  %626 = phi %struct.PosAndCount* [ %602, %620 ], [ %635, %624 ]
  %627 = lshr i64 %625, 1
  %628 = getelementptr inbounds %struct.PosAndCount, %struct.PosAndCount* %626, i64 1
  %629 = getelementptr inbounds %struct.PosAndCount, %struct.PosAndCount* %626, i64 %627, i32 1
  %630 = load i32, i32* %629, align 4
  %631 = icmp ult i32 %623, %630
  %632 = getelementptr inbounds %struct.PosAndCount, %struct.PosAndCount* %628, i64 %627
  %633 = xor i64 %627, -1
  %634 = add i64 %625, %633
  %635 = select i1 %631, %struct.PosAndCount* %626, %struct.PosAndCount* %632
  %636 = select i1 %631, i64 %627, i64 %634
  %637 = icmp eq i64 %636, 0
  br i1 %637, label %638, label %624

638:                                              ; preds = %624
  %639 = ptrtoint %struct.PosAndCount* %635 to i64
  br label %640

640:                                              ; preds = %638, %613
  %641 = phi i64 [ %639, %638 ], [ %617, %613 ]
  %642 = phi %struct.PosAndCount* [ %635, %638 ], [ %602, %613 ]
  %643 = sub i64 %641, %617
  %644 = ashr exact i64 %643, 3
  br label %684

645:                                              ; preds = %611
  %646 = icmp eq i64 %603, 1
  br i1 %646, label %647, label %652

647:                                              ; preds = %645
  %648 = bitcast %struct.PosAndCount* %602 to i64*
  %649 = load i64, i64* %648, align 4
  %650 = bitcast %struct.PosAndCount* %13 to i64*
  %651 = load i64, i64* %650, align 4
  store i64 %651, i64* %648, align 4
  store i64 %649, i64* %650, align 4
  br label %965

652:                                              ; preds = %645
  %653 = sdiv i64 %603, 2
  %654 = getelementptr inbounds %struct.PosAndCount, %struct.PosAndCount* %602, i64 %653
  %655 = ptrtoint %struct.PosAndCount* %16 to i64
  %656 = ptrtoint %struct.PosAndCount* %13 to i64
  %657 = sub i64 %655, %656
  %658 = icmp eq i64 %657, 0
  br i1 %658, label %679, label %659

659:                                              ; preds = %652
  %660 = ashr exact i64 %657, 3
  %661 = getelementptr inbounds %struct.PosAndCount, %struct.PosAndCount* %602, i64 %653, i32 1
  %662 = load i32, i32* %661, align 4
  br label %663

663:                                              ; preds = %663, %659
  %664 = phi i64 [ %660, %659 ], [ %675, %663 ]
  %665 = phi %struct.PosAndCount* [ %13, %659 ], [ %674, %663 ]
  %666 = lshr i64 %664, 1
  %667 = getelementptr inbounds %struct.PosAndCount, %struct.PosAndCount* %665, i64 1
  %668 = getelementptr inbounds %struct.PosAndCount, %struct.PosAndCount* %665, i64 %666, i32 1
  %669 = load i32, i32* %668, align 4
  %670 = icmp ult i32 %669, %662
  %671 = getelementptr inbounds %struct.PosAndCount, %struct.PosAndCount* %667, i64 %666
  %672 = xor i64 %666, -1
  %673 = add i64 %664, %672
  %674 = select i1 %670, %struct.PosAndCount* %671, %struct.PosAndCount* %665
  %675 = select i1 %670, i64 %673, i64 %666
  %676 = icmp eq i64 %675, 0
  br i1 %676, label %677, label %663

677:                                              ; preds = %663
  %678 = ptrtoint %struct.PosAndCount* %674 to i64
  br label %679

679:                                              ; preds = %677, %652
  %680 = phi i64 [ %678, %677 ], [ %656, %652 ]
  %681 = phi %struct.PosAndCount* [ %674, %677 ], [ %13, %652 ]
  %682 = sub i64 %680, %656
  %683 = ashr exact i64 %682, 3
  br label %684

684:                                              ; preds = %679, %640
  %685 = phi %struct.PosAndCount* [ %642, %640 ], [ %654, %679 ]
  %686 = phi %struct.PosAndCount* [ %615, %640 ], [ %681, %679 ]
  %687 = phi i64 [ %644, %640 ], [ %653, %679 ]
  %688 = phi i64 [ %614, %640 ], [ %683, %679 ]
  %689 = ptrtoint %struct.PosAndCount* %685 to i64
  %690 = bitcast %struct.PosAndCount* %685 to i8*
  %691 = sub nsw i64 %603, %687
  %692 = sub nsw i64 %14, %688
  %693 = icmp eq %struct.PosAndCount* %685, %13
  br i1 %693, label %951, label %694

694:                                              ; preds = %684
  %695 = icmp eq %struct.PosAndCount* %13, %686
  br i1 %695, label %951, label %696

696:                                              ; preds = %694
  %697 = getelementptr inbounds %struct.PosAndCount, %struct.PosAndCount* %685, i64 1
  %698 = icmp eq %struct.PosAndCount* %697, %13
  br i1 %698, label %699, label %711

699:                                              ; preds = %696
  %700 = bitcast %struct.PosAndCount* %685 to i64*
  %701 = load i64, i64* %700, align 4
  %702 = ptrtoint %struct.PosAndCount* %686 to i64
  %703 = ptrtoint %struct.PosAndCount* %13 to i64
  %704 = sub i64 %702, %703
  %705 = ashr exact i64 %704, 3
  %706 = icmp eq i64 %704, 0
  br i1 %706, label %708, label %707

707:                                              ; preds = %699
  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* align 4 %690, i8* align 4 %17, i64 %704, i1 false) #3
  br label %708

708:                                              ; preds = %707, %699
  %709 = getelementptr inbounds %struct.PosAndCount, %struct.PosAndCount* %685, i64 %705
  %710 = bitcast %struct.PosAndCount* %709 to i64*
  store i64 %701, i64* %710, align 4
  br label %951

711:                                              ; preds = %696
  %712 = getelementptr inbounds %struct.PosAndCount, %struct.PosAndCount* %13, i64 1
  %713 = icmp eq %struct.PosAndCount* %712, %686
  br i1 %713, label %714, label %729

714:                                              ; preds = %711
  %715 = getelementptr inbounds %struct.PosAndCount, %struct.PosAndCount* %686, i64 -1
  %716 = bitcast %struct.PosAndCount* %715 to i64*
  %717 = load i64, i64* %716, align 4
  %718 = ptrtoint %struct.PosAndCount* %715 to i64
  %719 = sub i64 %718, %689
  %720 = icmp eq i64 %719, 0
  br i1 %720, label %726, label %721

721:                                              ; preds = %714
  %722 = ashr exact i64 %719, 3
  %723 = sub nsw i64 0, %722
  %724 = getelementptr inbounds %struct.PosAndCount, %struct.PosAndCount* %686, i64 %723
  %725 = bitcast %struct.PosAndCount* %724 to i8*
  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* align 4 %725, i8* align 4 %690, i64 %719, i1 false) #3
  br label %726

726:                                              ; preds = %721, %714
  %727 = phi %struct.PosAndCount* [ %724, %721 ], [ %686, %714 ]
  %728 = bitcast %struct.PosAndCount* %685 to i64*
  store i64 %717, i64* %728, align 4
  br label %951

729:                                              ; preds = %711
  %730 = ptrtoint %struct.PosAndCount* %13 to i64
  %731 = ptrtoint %struct.PosAndCount* %685 to i64
  %732 = sub i64 %730, %731
  %733 = ashr exact i64 %732, 3
  %734 = ptrtoint %struct.PosAndCount* %686 to i64
  %735 = sub i64 %734, %730
  %736 = ashr exact i64 %735, 3
  %737 = icmp eq i64 %733, %736
  br i1 %737, label %738, label %884

738:                                              ; preds = %729
  %739 = getelementptr %struct.PosAndCount, %struct.PosAndCount* %13, i64 -1
  %740 = ptrtoint %struct.PosAndCount* %739 to i64
  %741 = sub i64 %740, %689
  %742 = lshr i64 %741, 3
  %743 = add nuw nsw i64 %742, 1
  %744 = icmp ult i64 %743, 4
  br i1 %744, label %829, label %745

745:                                              ; preds = %738
  %746 = getelementptr %struct.PosAndCount, %struct.PosAndCount* %685, i64 1
  %747 = getelementptr %struct.PosAndCount, %struct.PosAndCount* %13, i64 -1
  %748 = ptrtoint %struct.PosAndCount* %747 to i64
  %749 = sub i64 %748, %689
  %750 = lshr i64 %749, 3
  %751 = getelementptr %struct.PosAndCount, %struct.PosAndCount* %746, i64 %750
  %752 = getelementptr %struct.PosAndCount, %struct.PosAndCount* %13, i64 1
  %753 = getelementptr %struct.PosAndCount, %struct.PosAndCount* %752, i64 %750
  %754 = icmp ult %struct.PosAndCount* %685, %753
  %755 = icmp ult %struct.PosAndCount* %13, %751
  %756 = and i1 %754, %755
  br i1 %756, label %829, label %757

757:                                              ; preds = %745
  %758 = and i64 %743, 4611686018427387900
  %759 = getelementptr %struct.PosAndCount, %struct.PosAndCount* %13, i64 %758
  %760 = getelementptr %struct.PosAndCount, %struct.PosAndCount* %685, i64 %758
  %761 = add nsw i64 %758, -4
  %762 = lshr exact i64 %761, 2
  %763 = add nuw nsw i64 %762, 1
  %764 = and i64 %763, 1
  %765 = icmp eq i64 %761, 0
  br i1 %765, label %807, label %766

766:                                              ; preds = %757
  %767 = sub nuw nsw i64 %763, %764
  br label %768

768:                                              ; preds = %768, %766
  %769 = phi i64 [ 0, %766 ], [ %804, %768 ]
  %770 = phi i64 [ %767, %766 ], [ %805, %768 ]
  %771 = getelementptr %struct.PosAndCount, %struct.PosAndCount* %13, i64 %769
  %772 = getelementptr %struct.PosAndCount, %struct.PosAndCount* %685, i64 %769
  %773 = bitcast %struct.PosAndCount* %772 to <2 x i64>*
  %774 = load <2 x i64>, <2 x i64>* %773, align 4, !alias.scope !104, !noalias !107
  %775 = getelementptr %struct.PosAndCount, %struct.PosAndCount* %772, i64 2
  %776 = bitcast %struct.PosAndCount* %775 to <2 x i64>*
  %777 = load <2 x i64>, <2 x i64>* %776, align 4, !alias.scope !104, !noalias !107
  %778 = bitcast %struct.PosAndCount* %771 to <2 x i64>*
  %779 = load <2 x i64>, <2 x i64>* %778, align 4, !alias.scope !107
  %780 = getelementptr %struct.PosAndCount, %struct.PosAndCount* %771, i64 2
  %781 = bitcast %struct.PosAndCount* %780 to <2 x i64>*
  %782 = load <2 x i64>, <2 x i64>* %781, align 4, !alias.scope !107
  %783 = bitcast %struct.PosAndCount* %772 to <2 x i64>*
  store <2 x i64> %779, <2 x i64>* %783, align 4, !alias.scope !104, !noalias !107
  %784 = bitcast %struct.PosAndCount* %775 to <2 x i64>*
  store <2 x i64> %782, <2 x i64>* %784, align 4, !alias.scope !104, !noalias !107
  %785 = bitcast %struct.PosAndCount* %771 to <2 x i64>*
  store <2 x i64> %774, <2 x i64>* %785, align 4, !alias.scope !107
  %786 = bitcast %struct.PosAndCount* %780 to <2 x i64>*
  store <2 x i64> %777, <2 x i64>* %786, align 4, !alias.scope !107
  %787 = or i64 %769, 4
  %788 = getelementptr %struct.PosAndCount, %struct.PosAndCount* %13, i64 %787
  %789 = getelementptr %struct.PosAndCount, %struct.PosAndCount* %685, i64 %787
  %790 = bitcast %struct.PosAndCount* %789 to <2 x i64>*
  %791 = load <2 x i64>, <2 x i64>* %790, align 4, !alias.scope !104, !noalias !107
  %792 = getelementptr %struct.PosAndCount, %struct.PosAndCount* %789, i64 2
  %793 = bitcast %struct.PosAndCount* %792 to <2 x i64>*
  %794 = load <2 x i64>, <2 x i64>* %793, align 4, !alias.scope !104, !noalias !107
  %795 = bitcast %struct.PosAndCount* %788 to <2 x i64>*
  %796 = load <2 x i64>, <2 x i64>* %795, align 4, !alias.scope !107
  %797 = getelementptr %struct.PosAndCount, %struct.PosAndCount* %788, i64 2
  %798 = bitcast %struct.PosAndCount* %797 to <2 x i64>*
  %799 = load <2 x i64>, <2 x i64>* %798, align 4, !alias.scope !107
  %800 = bitcast %struct.PosAndCount* %789 to <2 x i64>*
  store <2 x i64> %796, <2 x i64>* %800, align 4, !alias.scope !104, !noalias !107
  %801 = bitcast %struct.PosAndCount* %792 to <2 x i64>*
  store <2 x i64> %799, <2 x i64>* %801, align 4, !alias.scope !104, !noalias !107
  %802 = bitcast %struct.PosAndCount* %788 to <2 x i64>*
  store <2 x i64> %791, <2 x i64>* %802, align 4, !alias.scope !107
  %803 = bitcast %struct.PosAndCount* %797 to <2 x i64>*
  store <2 x i64> %794, <2 x i64>* %803, align 4, !alias.scope !107
  %804 = add i64 %769, 8
  %805 = add i64 %770, -2
  %806 = icmp eq i64 %805, 0
  br i1 %806, label %807, label %768, !llvm.loop !109

807:                                              ; preds = %768, %757
  %808 = phi i64 [ 0, %757 ], [ %804, %768 ]
  %809 = icmp eq i64 %764, 0
  br i1 %809, label %827, label %810

810:                                              ; preds = %807
  %811 = getelementptr %struct.PosAndCount, %struct.PosAndCount* %13, i64 %808
  %812 = getelementptr %struct.PosAndCount, %struct.PosAndCount* %685, i64 %808
  %813 = bitcast %struct.PosAndCount* %812 to <2 x i64>*
  %814 = load <2 x i64>, <2 x i64>* %813, align 4, !alias.scope !104, !noalias !107
  %815 = getelementptr %struct.PosAndCount, %struct.PosAndCount* %812, i64 2
  %816 = bitcast %struct.PosAndCount* %815 to <2 x i64>*
  %817 = load <2 x i64>, <2 x i64>* %816, align 4, !alias.scope !104, !noalias !107
  %818 = bitcast %struct.PosAndCount* %811 to <2 x i64>*
  %819 = load <2 x i64>, <2 x i64>* %818, align 4, !alias.scope !107
  %820 = getelementptr %struct.PosAndCount, %struct.PosAndCount* %811, i64 2
  %821 = bitcast %struct.PosAndCount* %820 to <2 x i64>*
  %822 = load <2 x i64>, <2 x i64>* %821, align 4, !alias.scope !107
  %823 = bitcast %struct.PosAndCount* %812 to <2 x i64>*
  store <2 x i64> %819, <2 x i64>* %823, align 4, !alias.scope !104, !noalias !107
  %824 = bitcast %struct.PosAndCount* %815 to <2 x i64>*
  store <2 x i64> %822, <2 x i64>* %824, align 4, !alias.scope !104, !noalias !107
  %825 = bitcast %struct.PosAndCount* %811 to <2 x i64>*
  store <2 x i64> %814, <2 x i64>* %825, align 4, !alias.scope !107
  %826 = bitcast %struct.PosAndCount* %820 to <2 x i64>*
  store <2 x i64> %817, <2 x i64>* %826, align 4, !alias.scope !107
  br label %827

827:                                              ; preds = %807, %810
  %828 = icmp eq i64 %743, %758
  br i1 %828, label %951, label %829

829:                                              ; preds = %827, %745, %738
  %830 = phi %struct.PosAndCount* [ %13, %745 ], [ %13, %738 ], [ %759, %827 ]
  %831 = phi %struct.PosAndCount* [ %685, %745 ], [ %685, %738 ], [ %760, %827 ]
  %832 = ptrtoint %struct.PosAndCount* %831 to i64
  %833 = getelementptr %struct.PosAndCount, %struct.PosAndCount* %13, i64 -1
  %834 = ptrtoint %struct.PosAndCount* %833 to i64
  %835 = sub i64 %834, %832
  %836 = lshr i64 %835, 3
  %837 = add nuw nsw i64 %836, 1
  %838 = and i64 %837, 3
  %839 = icmp eq i64 %838, 0
  br i1 %839, label %852, label %840

840:                                              ; preds = %829, %840
  %841 = phi %struct.PosAndCount* [ %849, %840 ], [ %830, %829 ]
  %842 = phi %struct.PosAndCount* [ %848, %840 ], [ %831, %829 ]
  %843 = phi i64 [ %850, %840 ], [ %838, %829 ]
  %844 = bitcast %struct.PosAndCount* %842 to i64*
  %845 = load i64, i64* %844, align 4
  %846 = bitcast %struct.PosAndCount* %841 to i64*
  %847 = load i64, i64* %846, align 4
  store i64 %847, i64* %844, align 4
  store i64 %845, i64* %846, align 4
  %848 = getelementptr inbounds %struct.PosAndCount, %struct.PosAndCount* %842, i64 1
  %849 = getelementptr inbounds %struct.PosAndCount, %struct.PosAndCount* %841, i64 1
  %850 = add i64 %843, -1
  %851 = icmp eq i64 %850, 0
  br i1 %851, label %852, label %840, !llvm.loop !110

852:                                              ; preds = %840, %829
  %853 = phi %struct.PosAndCount* [ %830, %829 ], [ %849, %840 ]
  %854 = phi %struct.PosAndCount* [ %831, %829 ], [ %848, %840 ]
  %855 = icmp ult i64 %835, 24
  br i1 %855, label %951, label %856

856:                                              ; preds = %852, %856
  %857 = phi %struct.PosAndCount* [ %882, %856 ], [ %853, %852 ]
  %858 = phi %struct.PosAndCount* [ %881, %856 ], [ %854, %852 ]
  %859 = bitcast %struct.PosAndCount* %858 to i64*
  %860 = load i64, i64* %859, align 4
  %861 = bitcast %struct.PosAndCount* %857 to i64*
  %862 = load i64, i64* %861, align 4
  store i64 %862, i64* %859, align 4
  store i64 %860, i64* %861, align 4
  %863 = getelementptr inbounds %struct.PosAndCount, %struct.PosAndCount* %858, i64 1
  %864 = getelementptr inbounds %struct.PosAndCount, %struct.PosAndCount* %857, i64 1
  %865 = bitcast %struct.PosAndCount* %863 to i64*
  %866 = load i64, i64* %865, align 4
  %867 = bitcast %struct.PosAndCount* %864 to i64*
  %868 = load i64, i64* %867, align 4
  store i64 %868, i64* %865, align 4
  store i64 %866, i64* %867, align 4
  %869 = getelementptr inbounds %struct.PosAndCount, %struct.PosAndCount* %858, i64 2
  %870 = getelementptr inbounds %struct.PosAndCount, %struct.PosAndCount* %857, i64 2
  %871 = bitcast %struct.PosAndCount* %869 to i64*
  %872 = load i64, i64* %871, align 4
  %873 = bitcast %struct.PosAndCount* %870 to i64*
  %874 = load i64, i64* %873, align 4
  store i64 %874, i64* %871, align 4
  store i64 %872, i64* %873, align 4
  %875 = getelementptr inbounds %struct.PosAndCount, %struct.PosAndCount* %858, i64 3
  %876 = getelementptr inbounds %struct.PosAndCount, %struct.PosAndCount* %857, i64 3
  %877 = bitcast %struct.PosAndCount* %875 to i64*
  %878 = load i64, i64* %877, align 4
  %879 = bitcast %struct.PosAndCount* %876 to i64*
  %880 = load i64, i64* %879, align 4
  store i64 %880, i64* %877, align 4
  store i64 %878, i64* %879, align 4
  %881 = getelementptr inbounds %struct.PosAndCount, %struct.PosAndCount* %858, i64 4
  %882 = getelementptr inbounds %struct.PosAndCount, %struct.PosAndCount* %857, i64 4
  %883 = icmp eq %struct.PosAndCount* %881, %13
  br i1 %883, label %951, label %856, !llvm.loop !111

884:                                              ; preds = %729, %884
  %885 = phi i64 [ %887, %884 ], [ %736, %729 ]
  %886 = phi i64 [ %885, %884 ], [ %733, %729 ]
  %887 = srem i64 %886, %885
  %888 = icmp eq i64 %887, 0
  br i1 %888, label %889, label %884

889:                                              ; preds = %884
  %890 = icmp eq i64 %885, 0
  br i1 %890, label %922, label %891

891:                                              ; preds = %889
  %892 = getelementptr inbounds %struct.PosAndCount, %struct.PosAndCount* %685, i64 %885
  %893 = shl nsw i64 %885, 3
  %894 = add i64 %893, -8
  %895 = and i64 %894, 8
  %896 = icmp eq i64 %895, 0
  br i1 %896, label %897, label %919

897:                                              ; preds = %891
  %898 = getelementptr inbounds %struct.PosAndCount, %struct.PosAndCount* %892, i64 -1
  %899 = bitcast %struct.PosAndCount* %898 to i64*
  %900 = load i64, i64* %899, align 4
  %901 = getelementptr inbounds %struct.PosAndCount, %struct.PosAndCount* %898, i64 %733
  br label %902

902:                                              ; preds = %902, %897
  %903 = phi %struct.PosAndCount* [ %898, %897 ], [ %904, %902 ]
  %904 = phi %struct.PosAndCount* [ %901, %897 ], [ %915, %902 ]
  %905 = bitcast %struct.PosAndCount* %904 to i64*
  %906 = bitcast %struct.PosAndCount* %903 to i64*
  %907 = load i64, i64* %905, align 4
  store i64 %907, i64* %906, align 4
  %908 = ptrtoint %struct.PosAndCount* %904 to i64
  %909 = sub i64 %734, %908
  %910 = ashr exact i64 %909, 3
  %911 = icmp slt i64 %733, %910
  %912 = getelementptr inbounds %struct.PosAndCount, %struct.PosAndCount* %904, i64 %733
  %913 = sub nsw i64 %733, %910
  %914 = getelementptr inbounds %struct.PosAndCount, %struct.PosAndCount* %685, i64 %913
  %915 = select i1 %911, %struct.PosAndCount* %912, %struct.PosAndCount* %914
  %916 = icmp eq %struct.PosAndCount* %915, %898
  br i1 %916, label %917, label %902

917:                                              ; preds = %902
  %918 = bitcast %struct.PosAndCount* %904 to i64*
  store i64 %900, i64* %918, align 4
  br label %919

919:                                              ; preds = %917, %891
  %920 = phi %struct.PosAndCount* [ %898, %917 ], [ %892, %891 ]
  %921 = icmp eq i64 %894, 0
  br i1 %921, label %922, label %924

922:                                              ; preds = %919, %981, %889
  %923 = getelementptr inbounds %struct.PosAndCount, %struct.PosAndCount* %685, i64 %736
  br label %951

924:                                              ; preds = %919, %981
  %925 = phi %struct.PosAndCount* [ %947, %981 ], [ %920, %919 ]
  %926 = getelementptr inbounds %struct.PosAndCount, %struct.PosAndCount* %925, i64 -1
  %927 = bitcast %struct.PosAndCount* %926 to i64*
  %928 = load i64, i64* %927, align 4
  %929 = getelementptr inbounds %struct.PosAndCount, %struct.PosAndCount* %926, i64 %733
  br label %930

930:                                              ; preds = %930, %924
  %931 = phi %struct.PosAndCount* [ %926, %924 ], [ %932, %930 ]
  %932 = phi %struct.PosAndCount* [ %929, %924 ], [ %943, %930 ]
  %933 = bitcast %struct.PosAndCount* %932 to i64*
  %934 = bitcast %struct.PosAndCount* %931 to i64*
  %935 = load i64, i64* %933, align 4
  store i64 %935, i64* %934, align 4
  %936 = ptrtoint %struct.PosAndCount* %932 to i64
  %937 = sub i64 %734, %936
  %938 = ashr exact i64 %937, 3
  %939 = icmp slt i64 %733, %938
  %940 = getelementptr inbounds %struct.PosAndCount, %struct.PosAndCount* %932, i64 %733
  %941 = sub nsw i64 %733, %938
  %942 = getelementptr inbounds %struct.PosAndCount, %struct.PosAndCount* %685, i64 %941
  %943 = select i1 %939, %struct.PosAndCount* %940, %struct.PosAndCount* %942
  %944 = icmp eq %struct.PosAndCount* %943, %926
  br i1 %944, label %945, label %930

945:                                              ; preds = %930
  %946 = bitcast %struct.PosAndCount* %932 to i64*
  store i64 %928, i64* %946, align 4
  %947 = getelementptr inbounds %struct.PosAndCount, %struct.PosAndCount* %925, i64 -2
  %948 = bitcast %struct.PosAndCount* %947 to i64*
  %949 = load i64, i64* %948, align 4
  %950 = getelementptr inbounds %struct.PosAndCount, %struct.PosAndCount* %947, i64 %733
  br label %966

951:                                              ; preds = %852, %856, %827, %684, %694, %708, %726, %922
  %952 = phi %struct.PosAndCount* [ %686, %684 ], [ %685, %694 ], [ %709, %708 ], [ %727, %726 ], [ %923, %922 ], [ %13, %827 ], [ %13, %856 ], [ %13, %852 ]
  %953 = add nsw i64 %688, %687
  %954 = add nsw i64 %692, %691
  %955 = icmp slt i64 %953, %954
  br i1 %955, label %956, label %957

956:                                              ; preds = %951
  tail call fastcc void @"_ZNSt3__115__inplace_mergeIRZN3jxl17ComputeCoeffOrderENS1_9SpeedTierERKNS1_7ACImageERKNS1_15AcStrategyImageERKNS1_15FrameDimensionsERjPjE3$_1PZNS1_17ComputeCoeffOrderES2_S5_S8_SB_SC_SD_E11PosAndCountEEvT0_SI_SI_T_NS_15iterator_traitsISI_E15difference_typeESM_PNSL_10value_typeEl"(%struct.PosAndCount* %602, %struct.PosAndCount* %685, %struct.PosAndCount* %952, %class.anon.8* dereferenceable(1) %3, i64 %687, i64 %688, %struct.PosAndCount* %6, i64 %7)
  br label %958

957:                                              ; preds = %951
  tail call fastcc void @"_ZNSt3__115__inplace_mergeIRZN3jxl17ComputeCoeffOrderENS1_9SpeedTierERKNS1_7ACImageERKNS1_15AcStrategyImageERKNS1_15FrameDimensionsERjPjE3$_1PZNS1_17ComputeCoeffOrderES2_S5_S8_SB_SC_SD_E11PosAndCountEEvT0_SI_SI_T_NS_15iterator_traitsISI_E15difference_typeESM_PNSL_10value_typeEl"(%struct.PosAndCount* %952, %struct.PosAndCount* %686, %struct.PosAndCount* %16, %class.anon.8* dereferenceable(1) %3, i64 %691, i64 %692, %struct.PosAndCount* %6, i64 %7)
  br label %958

958:                                              ; preds = %956, %957
  %959 = phi %struct.PosAndCount* [ %16, %956 ], [ %952, %957 ]
  %960 = phi i64 [ %691, %956 ], [ %687, %957 ]
  %961 = phi i64 [ %692, %956 ], [ %688, %957 ]
  %962 = phi %struct.PosAndCount* [ %686, %956 ], [ %685, %957 ]
  %963 = phi %struct.PosAndCount* [ %952, %956 ], [ %602, %957 ]
  %964 = icmp eq i64 %961, 0
  br i1 %964, label %965, label %11

965:                                              ; preds = %958, %21, %607, %318, %541, %493, %497, %470, %8, %647, %367, %299, %294, %286, %158, %30
  ret void

966:                                              ; preds = %966, %945
  %967 = phi %struct.PosAndCount* [ %947, %945 ], [ %968, %966 ]
  %968 = phi %struct.PosAndCount* [ %950, %945 ], [ %979, %966 ]
  %969 = bitcast %struct.PosAndCount* %968 to i64*
  %970 = bitcast %struct.PosAndCount* %967 to i64*
  %971 = load i64, i64* %969, align 4
  store i64 %971, i64* %970, align 4
  %972 = ptrtoint %struct.PosAndCount* %968 to i64
  %973 = sub i64 %734, %972
  %974 = ashr exact i64 %973, 3
  %975 = icmp slt i64 %733, %974
  %976 = getelementptr inbounds %struct.PosAndCount, %struct.PosAndCount* %968, i64 %733
  %977 = sub nsw i64 %733, %974
  %978 = getelementptr inbounds %struct.PosAndCount, %struct.PosAndCount* %685, i64 %977
  %979 = select i1 %975, %struct.PosAndCount* %976, %struct.PosAndCount* %978
  %980 = icmp eq %struct.PosAndCount* %979, %947
  br i1 %980, label %981, label %966

981:                                              ; preds = %966
  %982 = bitcast %struct.PosAndCount* %968 to i64*
  store i64 %949, i64* %982, align 4
  %983 = icmp eq %struct.PosAndCount* %947, %685
  br i1 %983, label %922, label %924
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memmove.p0i8.p0i8.i64(i8* nocapture, i8* nocapture readonly, i64, i1 immarg) #1

; Function Attrs: nounwind readnone speculatable
declare i64 @llvm.usub.sat.i64(i64, i64) #10

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind }
attributes #4 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { noreturn nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nobuiltin nofree "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #8 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #9 = { nobuiltin nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #10 = { nounwind readnone speculatable }
attributes #11 = { builtin nounwind }
attributes #12 = { noreturn nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{!3}
!3 = distinct !{!3, !4}
!4 = distinct !{!4, !"LVerDomain"}
!5 = !{!6}
!6 = distinct !{!6, !4}
!7 = distinct !{!7, !8}
!8 = !{!"llvm.loop.isvectorized", i32 1}
!9 = !{!10}
!10 = distinct !{!10, !11}
!11 = distinct !{!11, !"LVerDomain"}
!12 = !{!13}
!13 = distinct !{!13, !11}
!14 = distinct !{!14, !8}
!15 = distinct !{!15, !8}
!16 = distinct !{!16, !8}
!17 = distinct !{!17, !18}
!18 = !{!"llvm.loop.unroll.disable"}
!19 = !{!20, !22}
!20 = distinct !{!20, !21, !"_ZN3hwy15AllocateAlignedIZN3jxl17ComputeCoeffOrderENS1_9SpeedTierERKNS1_7ACImageERKNS1_15AcStrategyImageERKNS1_15FrameDimensionsERjPjE11PosAndCountEENSt3__110unique_ptrIA_T_NS_12AlignedFreerEEEmPFPvSL_mEPFvSL_SL_ESL_: argument 0"}
!21 = distinct !{!21, !"_ZN3hwy15AllocateAlignedIZN3jxl17ComputeCoeffOrderENS1_9SpeedTierERKNS1_7ACImageERKNS1_15AcStrategyImageERKNS1_15FrameDimensionsERjPjE11PosAndCountEENSt3__110unique_ptrIA_T_NS_12AlignedFreerEEEmPFPvSL_mEPFvSL_SL_ESL_"}
!22 = distinct !{!22, !23, !"_ZN3hwy15AllocateAlignedIZN3jxl17ComputeCoeffOrderENS1_9SpeedTierERKNS1_7ACImageERKNS1_15AcStrategyImageERKNS1_15FrameDimensionsERjPjE11PosAndCountEENSt3__110unique_ptrIA_T_NS_12AlignedFreerEEEm: argument 0"}
!23 = distinct !{!23, !"_ZN3hwy15AllocateAlignedIZN3jxl17ComputeCoeffOrderENS1_9SpeedTierERKNS1_7ACImageERKNS1_15AcStrategyImageERKNS1_15FrameDimensionsERjPjE11PosAndCountEENSt3__110unique_ptrIA_T_NS_12AlignedFreerEEEm"}
!24 = !{!25}
!25 = distinct !{!25, !26, !"_ZN3jxl17ComputeLehmerCodeIjEEvPKT_PjmS4_: argument 1"}
!26 = distinct !{!26, !"_ZN3jxl17ComputeLehmerCodeIjEEvPKT_PjmS4_"}
!27 = !{!28, !29}
!28 = distinct !{!28, !26, !"_ZN3jxl17ComputeLehmerCodeIjEEvPKT_PjmS4_: argument 0"}
!29 = distinct !{!29, !26, !"_ZN3jxl17ComputeLehmerCodeIjEEvPKT_PjmS4_: argument 2"}
!30 = !{!28}
!31 = !{!25, !29}
!32 = !{!29}
!33 = !{!28, !25}
!34 = !{!35, !37}
!35 = distinct !{!35, !36, !"_ZN3hwy15AllocateAlignedIjEENSt3__110unique_ptrIA_T_NS_12AlignedFreerEEEmPFPvS7_mEPFvS7_S7_ES7_: argument 0"}
!36 = distinct !{!36, !"_ZN3hwy15AllocateAlignedIjEENSt3__110unique_ptrIA_T_NS_12AlignedFreerEEEmPFPvS7_mEPFvS7_S7_ES7_"}
!37 = distinct !{!37, !38, !"_ZN3hwy15AllocateAlignedIjEENSt3__110unique_ptrIA_T_NS_12AlignedFreerEEEm: argument 0"}
!38 = distinct !{!38, !"_ZN3hwy15AllocateAlignedIjEENSt3__110unique_ptrIA_T_NS_12AlignedFreerEEEm"}
!39 = !{!40}
!40 = distinct !{!40, !41, !"_ZN3jxl12_GLOBAL__N_116EncodeCoeffOrderEPKjNS_10AcStrategyEPNSt3__16vectorINS_5TokenENS4_9allocatorIS6_EEEEPj: argument 0"}
!41 = distinct !{!41, !"_ZN3jxl12_GLOBAL__N_116EncodeCoeffOrderEPKjNS_10AcStrategyEPNSt3__16vectorINS_5TokenENS4_9allocatorIS6_EEEEPj"}
!42 = distinct !{!42, !18}
!43 = !{!44}
!44 = distinct !{!44, !45}
!45 = distinct !{!45, !"LVerDomain"}
!46 = !{!47}
!47 = distinct !{!47, !45}
!48 = distinct !{!48, !8}
!49 = distinct !{!49, !18}
!50 = !{!51}
!51 = distinct !{!51, !52}
!52 = distinct !{!52, !"LVerDomain"}
!53 = !{!54}
!54 = distinct !{!54, !52}
!55 = distinct !{!55, !8}
!56 = distinct !{!56, !18}
!57 = distinct !{!57, !18}
!58 = distinct !{!58, !8}
!59 = distinct !{!59, !8}
!60 = !{!61}
!61 = distinct !{!61, !62}
!62 = distinct !{!62, !"LVerDomain"}
!63 = !{!64}
!64 = distinct !{!64, !62}
!65 = distinct !{!65, !8}
!66 = distinct !{!66, !18}
!67 = distinct !{!67, !18}
!68 = distinct !{!68, !8}
!69 = !{!70}
!70 = distinct !{!70, !71}
!71 = distinct !{!71, !"LVerDomain"}
!72 = !{!73}
!73 = distinct !{!73, !71}
!74 = distinct !{!74, !8}
!75 = distinct !{!75, !18}
!76 = distinct !{!76, !18}
!77 = distinct !{!77, !8}
!78 = distinct !{!78, !18}
!79 = !{!80}
!80 = distinct !{!80, !81}
!81 = distinct !{!81, !"LVerDomain"}
!82 = !{!83}
!83 = distinct !{!83, !81}
!84 = distinct !{!84, !8}
!85 = distinct !{!85, !18}
!86 = distinct !{!86, !18}
!87 = !{!88}
!88 = distinct !{!88, !89}
!89 = distinct !{!89, !"LVerDomain"}
!90 = !{!91}
!91 = distinct !{!91, !89}
!92 = distinct !{!92, !8}
!93 = distinct !{!93, !18}
!94 = distinct !{!94, !8}
!95 = !{!96}
!96 = distinct !{!96, !97}
!97 = distinct !{!97, !"LVerDomain"}
!98 = !{!99}
!99 = distinct !{!99, !97}
!100 = distinct !{!100, !8}
!101 = distinct !{!101, !18}
!102 = distinct !{!102, !8}
!103 = distinct !{!103, !8}
!104 = !{!105}
!105 = distinct !{!105, !106}
!106 = distinct !{!106, !"LVerDomain"}
!107 = !{!108}
!108 = distinct !{!108, !106}
!109 = distinct !{!109, !8}
!110 = distinct !{!110, !18}
!111 = distinct !{!111, !8}
