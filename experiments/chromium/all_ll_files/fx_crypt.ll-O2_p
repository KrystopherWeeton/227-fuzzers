; ModuleID = '../../third_party/pdfium/core/fdrm/fx_crypt.cpp'
source_filename = "../../third_party/pdfium/core/fdrm/fx_crypt.cpp"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%struct.CRYPT_rc4_context = type { i32, i32, [256 x i32] }
%"class.pdfium::span" = type { %"class.fxcrt::UnownedPtr", i64 }
%"class.fxcrt::UnownedPtr" = type { i8* }
%"class.pdfium::span.0" = type { %"class.fxcrt::UnownedPtr.1", i64 }
%"class.fxcrt::UnownedPtr.1" = type { i8* }
%struct.CRYPT_md5_context = type { [2 x i32], [4 x i32], [64 x i8] }

@_ZN12_GLOBAL__N_111md5_paddingE = internal constant <{ i8, [63 x i8] }> <{ i8 -128, [63 x i8] zeroinitializer }>, align 16

; Function Attrs: nounwind ssp uwtable
define hidden void @_Z18CRYPT_ArcFourSetupP17CRYPT_rc4_contextN6pdfium4spanIKhEE(%struct.CRYPT_rc4_context* nocapture, %"class.pdfium::span"* nocapture readonly) local_unnamed_addr #0 {
  %3 = getelementptr inbounds %struct.CRYPT_rc4_context, %struct.CRYPT_rc4_context* %0, i64 0, i32 0
  store i32 0, i32* %3, align 4
  %4 = getelementptr inbounds %struct.CRYPT_rc4_context, %struct.CRYPT_rc4_context* %0, i64 0, i32 1
  store i32 0, i32* %4, align 4
  br label %5

5:                                                ; preds = %5, %2
  %6 = phi i64 [ 0, %2 ], [ %34, %5 ]
  %7 = phi <4 x i32> [ <i32 0, i32 1, i32 2, i32 3>, %2 ], [ %35, %5 ]
  %8 = getelementptr inbounds %struct.CRYPT_rc4_context, %struct.CRYPT_rc4_context* %0, i64 0, i32 2, i64 %6
  %9 = add <4 x i32> %7, <i32 4, i32 4, i32 4, i32 4>
  %10 = bitcast i32* %8 to <4 x i32>*
  store <4 x i32> %7, <4 x i32>* %10, align 4
  %11 = getelementptr inbounds i32, i32* %8, i64 4
  %12 = bitcast i32* %11 to <4 x i32>*
  store <4 x i32> %9, <4 x i32>* %12, align 4
  %13 = or i64 %6, 8
  %14 = add <4 x i32> %7, <i32 8, i32 8, i32 8, i32 8>
  %15 = getelementptr inbounds %struct.CRYPT_rc4_context, %struct.CRYPT_rc4_context* %0, i64 0, i32 2, i64 %13
  %16 = add <4 x i32> %7, <i32 12, i32 12, i32 12, i32 12>
  %17 = bitcast i32* %15 to <4 x i32>*
  store <4 x i32> %14, <4 x i32>* %17, align 4
  %18 = getelementptr inbounds i32, i32* %15, i64 4
  %19 = bitcast i32* %18 to <4 x i32>*
  store <4 x i32> %16, <4 x i32>* %19, align 4
  %20 = or i64 %6, 16
  %21 = add <4 x i32> %7, <i32 16, i32 16, i32 16, i32 16>
  %22 = getelementptr inbounds %struct.CRYPT_rc4_context, %struct.CRYPT_rc4_context* %0, i64 0, i32 2, i64 %20
  %23 = add <4 x i32> %7, <i32 20, i32 20, i32 20, i32 20>
  %24 = bitcast i32* %22 to <4 x i32>*
  store <4 x i32> %21, <4 x i32>* %24, align 4
  %25 = getelementptr inbounds i32, i32* %22, i64 4
  %26 = bitcast i32* %25 to <4 x i32>*
  store <4 x i32> %23, <4 x i32>* %26, align 4
  %27 = or i64 %6, 24
  %28 = add <4 x i32> %7, <i32 24, i32 24, i32 24, i32 24>
  %29 = getelementptr inbounds %struct.CRYPT_rc4_context, %struct.CRYPT_rc4_context* %0, i64 0, i32 2, i64 %27
  %30 = add <4 x i32> %7, <i32 28, i32 28, i32 28, i32 28>
  %31 = bitcast i32* %29 to <4 x i32>*
  store <4 x i32> %28, <4 x i32>* %31, align 4
  %32 = getelementptr inbounds i32, i32* %29, i64 4
  %33 = bitcast i32* %32 to <4 x i32>*
  store <4 x i32> %30, <4 x i32>* %33, align 4
  %34 = add nuw nsw i64 %6, 32
  %35 = add <4 x i32> %7, <i32 32, i32 32, i32 32, i32 32>
  %36 = icmp eq i64 %34, 256
  br i1 %36, label %37, label %5, !llvm.loop !2

37:                                               ; preds = %5
  %38 = getelementptr inbounds %"class.pdfium::span", %"class.pdfium::span"* %1, i64 0, i32 1
  %39 = getelementptr inbounds %"class.pdfium::span", %"class.pdfium::span"* %1, i64 0, i32 0, i32 0
  br label %41

40:                                               ; preds = %55
  ret void

41:                                               ; preds = %55, %37
  %42 = phi i64 [ 0, %37 ], [ %62, %55 ]
  %43 = phi i32 [ 0, %37 ], [ %58, %55 ]
  %44 = load i64, i64* %38, align 8
  %45 = getelementptr inbounds %struct.CRYPT_rc4_context, %struct.CRYPT_rc4_context* %0, i64 0, i32 2, i64 %42
  %46 = load i32, i32* %45, align 4
  %47 = add nsw i32 %46, %43
  %48 = icmp eq i64 %44, 0
  br i1 %48, label %55, label %49

49:                                               ; preds = %41
  %50 = urem i64 %42, %44
  %51 = load i8*, i8** %39, align 8
  %52 = getelementptr inbounds i8, i8* %51, i64 %50
  %53 = load i8, i8* %52, align 1
  %54 = zext i8 %53 to i32
  br label %55

55:                                               ; preds = %41, %49
  %56 = phi i32 [ %54, %49 ], [ 0, %41 ]
  %57 = add nsw i32 %47, %56
  %58 = and i32 %57, 255
  %59 = zext i32 %58 to i64
  %60 = getelementptr inbounds %struct.CRYPT_rc4_context, %struct.CRYPT_rc4_context* %0, i64 0, i32 2, i64 %59
  %61 = load i32, i32* %60, align 4
  store i32 %61, i32* %45, align 4
  store i32 %46, i32* %60, align 4
  %62 = add nuw nsw i64 %42, 1
  %63 = icmp eq i64 %62, 256
  br i1 %63, label %40, label %41
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @_Z18CRYPT_ArcFourCryptP17CRYPT_rc4_contextN6pdfium4spanIhEE(%struct.CRYPT_rc4_context* nocapture, %"class.pdfium::span.0"* nocapture readonly) local_unnamed_addr #2 {
  %3 = getelementptr inbounds %"class.pdfium::span.0", %"class.pdfium::span.0"* %1, i64 0, i32 0, i32 0
  %4 = load i8*, i8** %3, align 8
  %5 = getelementptr inbounds %"class.pdfium::span.0", %"class.pdfium::span.0"* %1, i64 0, i32 1
  %6 = load i64, i64* %5, align 8
  %7 = getelementptr inbounds i8, i8* %4, i64 %6
  %8 = icmp eq i64 %6, 0
  br i1 %8, label %12, label %9

9:                                                ; preds = %2
  %10 = getelementptr inbounds %struct.CRYPT_rc4_context, %struct.CRYPT_rc4_context* %0, i64 0, i32 0
  %11 = getelementptr inbounds %struct.CRYPT_rc4_context, %struct.CRYPT_rc4_context* %0, i64 0, i32 1
  br label %13

12:                                               ; preds = %13, %2
  ret void

13:                                               ; preds = %9, %13
  %14 = phi i8* [ %4, %9 ], [ %42, %13 ]
  %15 = load i32, i32* %10, align 4
  %16 = add nsw i32 %15, 1
  %17 = and i32 %16, 255
  store i32 %17, i32* %10, align 4
  %18 = load i32, i32* %11, align 4
  %19 = zext i32 %17 to i64
  %20 = getelementptr inbounds %struct.CRYPT_rc4_context, %struct.CRYPT_rc4_context* %0, i64 0, i32 2, i64 %19
  %21 = load i32, i32* %20, align 4
  %22 = add nsw i32 %21, %18
  %23 = and i32 %22, 255
  store i32 %23, i32* %11, align 4
  %24 = zext i32 %23 to i64
  %25 = getelementptr inbounds %struct.CRYPT_rc4_context, %struct.CRYPT_rc4_context* %0, i64 0, i32 2, i64 %24
  %26 = load i32, i32* %20, align 4
  %27 = load i32, i32* %25, align 4
  store i32 %27, i32* %20, align 4
  store i32 %26, i32* %25, align 4
  %28 = zext i32 %17 to i64
  %29 = getelementptr inbounds %struct.CRYPT_rc4_context, %struct.CRYPT_rc4_context* %0, i64 0, i32 2, i64 %28
  %30 = load i32, i32* %29, align 4
  %31 = zext i32 %23 to i64
  %32 = getelementptr inbounds %struct.CRYPT_rc4_context, %struct.CRYPT_rc4_context* %0, i64 0, i32 2, i64 %31
  %33 = load i32, i32* %32, align 4
  %34 = add nsw i32 %33, %30
  %35 = and i32 %34, 255
  %36 = zext i32 %35 to i64
  %37 = getelementptr inbounds %struct.CRYPT_rc4_context, %struct.CRYPT_rc4_context* %0, i64 0, i32 2, i64 %36
  %38 = load i32, i32* %37, align 4
  %39 = load i8, i8* %14, align 1
  %40 = trunc i32 %38 to i8
  %41 = xor i8 %39, %40
  store i8 %41, i8* %14, align 1
  %42 = getelementptr inbounds i8, i8* %14, i64 1
  %43 = icmp eq i8* %42, %7
  br i1 %43, label %12, label %13
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_Z23CRYPT_ArcFourCryptBlockN6pdfium4spanIhEENS0_IKhEE(%"class.pdfium::span.0"* nocapture readonly, %"class.pdfium::span"* nocapture readonly) local_unnamed_addr #0 {
  %3 = alloca %struct.CRYPT_rc4_context, align 4
  %4 = bitcast %struct.CRYPT_rc4_context* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 1032, i8* nonnull %4) #3
  %5 = getelementptr inbounds %struct.CRYPT_rc4_context, %struct.CRYPT_rc4_context* %3, i64 0, i32 2
  %6 = bitcast [256 x i32]* %5 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 4 %6, i8 -86, i64 1024, i1 false)
  %7 = getelementptr inbounds %"class.pdfium::span", %"class.pdfium::span"* %1, i64 0, i32 0, i32 0
  %8 = load i8*, i8** %7, align 8
  %9 = getelementptr inbounds %"class.pdfium::span", %"class.pdfium::span"* %1, i64 0, i32 1
  %10 = load i64, i64* %9, align 8
  %11 = getelementptr inbounds %struct.CRYPT_rc4_context, %struct.CRYPT_rc4_context* %3, i64 0, i32 0
  store i32 0, i32* %11, align 4
  %12 = getelementptr inbounds %struct.CRYPT_rc4_context, %struct.CRYPT_rc4_context* %3, i64 0, i32 1
  store i32 0, i32* %12, align 4
  br label %13

13:                                               ; preds = %13, %2
  %14 = phi i64 [ 0, %2 ], [ %42, %13 ]
  %15 = phi <4 x i32> [ <i32 0, i32 1, i32 2, i32 3>, %2 ], [ %43, %13 ]
  %16 = getelementptr inbounds %struct.CRYPT_rc4_context, %struct.CRYPT_rc4_context* %3, i64 0, i32 2, i64 %14
  %17 = add <4 x i32> %15, <i32 4, i32 4, i32 4, i32 4>
  %18 = bitcast i32* %16 to <4 x i32>*
  store <4 x i32> %15, <4 x i32>* %18, align 4
  %19 = getelementptr inbounds i32, i32* %16, i64 4
  %20 = bitcast i32* %19 to <4 x i32>*
  store <4 x i32> %17, <4 x i32>* %20, align 4
  %21 = or i64 %14, 8
  %22 = add <4 x i32> %15, <i32 8, i32 8, i32 8, i32 8>
  %23 = getelementptr inbounds %struct.CRYPT_rc4_context, %struct.CRYPT_rc4_context* %3, i64 0, i32 2, i64 %21
  %24 = add <4 x i32> %15, <i32 12, i32 12, i32 12, i32 12>
  %25 = bitcast i32* %23 to <4 x i32>*
  store <4 x i32> %22, <4 x i32>* %25, align 4
  %26 = getelementptr inbounds i32, i32* %23, i64 4
  %27 = bitcast i32* %26 to <4 x i32>*
  store <4 x i32> %24, <4 x i32>* %27, align 4
  %28 = or i64 %14, 16
  %29 = add <4 x i32> %15, <i32 16, i32 16, i32 16, i32 16>
  %30 = getelementptr inbounds %struct.CRYPT_rc4_context, %struct.CRYPT_rc4_context* %3, i64 0, i32 2, i64 %28
  %31 = add <4 x i32> %15, <i32 20, i32 20, i32 20, i32 20>
  %32 = bitcast i32* %30 to <4 x i32>*
  store <4 x i32> %29, <4 x i32>* %32, align 4
  %33 = getelementptr inbounds i32, i32* %30, i64 4
  %34 = bitcast i32* %33 to <4 x i32>*
  store <4 x i32> %31, <4 x i32>* %34, align 4
  %35 = or i64 %14, 24
  %36 = add <4 x i32> %15, <i32 24, i32 24, i32 24, i32 24>
  %37 = getelementptr inbounds %struct.CRYPT_rc4_context, %struct.CRYPT_rc4_context* %3, i64 0, i32 2, i64 %35
  %38 = add <4 x i32> %15, <i32 28, i32 28, i32 28, i32 28>
  %39 = bitcast i32* %37 to <4 x i32>*
  store <4 x i32> %36, <4 x i32>* %39, align 4
  %40 = getelementptr inbounds i32, i32* %37, i64 4
  %41 = bitcast i32* %40 to <4 x i32>*
  store <4 x i32> %38, <4 x i32>* %41, align 4
  %42 = add nuw nsw i64 %14, 32
  %43 = add <4 x i32> %15, <i32 32, i32 32, i32 32, i32 32>
  %44 = icmp eq i64 %42, 256
  br i1 %44, label %45, label %13, !llvm.loop !4

45:                                               ; preds = %13
  %46 = icmp eq i64 %10, 0
  br label %47

47:                                               ; preds = %45, %58
  %48 = phi i64 [ %65, %58 ], [ 0, %45 ]
  %49 = phi i32 [ %61, %58 ], [ 0, %45 ]
  %50 = getelementptr inbounds %struct.CRYPT_rc4_context, %struct.CRYPT_rc4_context* %3, i64 0, i32 2, i64 %48
  %51 = load i32, i32* %50, align 4
  %52 = add nsw i32 %51, %49
  br i1 %46, label %58, label %53

53:                                               ; preds = %47
  %54 = urem i64 %48, %10
  %55 = getelementptr inbounds i8, i8* %8, i64 %54
  %56 = load i8, i8* %55, align 1
  %57 = zext i8 %56 to i32
  br label %58

58:                                               ; preds = %53, %47
  %59 = phi i32 [ %57, %53 ], [ 0, %47 ]
  %60 = add nsw i32 %52, %59
  %61 = and i32 %60, 255
  %62 = zext i32 %61 to i64
  %63 = getelementptr inbounds %struct.CRYPT_rc4_context, %struct.CRYPT_rc4_context* %3, i64 0, i32 2, i64 %62
  %64 = load i32, i32* %63, align 4
  store i32 %64, i32* %50, align 4
  store i32 %51, i32* %63, align 4
  %65 = add nuw nsw i64 %48, 1
  %66 = icmp eq i64 %65, 256
  br i1 %66, label %67, label %47

67:                                               ; preds = %58
  %68 = getelementptr inbounds %"class.pdfium::span.0", %"class.pdfium::span.0"* %0, i64 0, i32 0, i32 0
  %69 = load i8*, i8** %68, align 8
  %70 = getelementptr inbounds %"class.pdfium::span.0", %"class.pdfium::span.0"* %0, i64 0, i32 1
  %71 = load i64, i64* %70, align 8
  %72 = getelementptr inbounds i8, i8* %69, i64 %71
  %73 = icmp eq i64 %71, 0
  br i1 %73, label %103, label %74

74:                                               ; preds = %67, %100
  %75 = phi i32 [ %102, %100 ], [ 0, %67 ]
  %76 = phi i32 [ %101, %100 ], [ 0, %67 ]
  %77 = phi i8* [ %98, %100 ], [ %69, %67 ]
  %78 = add nsw i32 %76, 1
  %79 = and i32 %78, 255
  store i32 %79, i32* %11, align 4
  %80 = zext i32 %79 to i64
  %81 = getelementptr inbounds %struct.CRYPT_rc4_context, %struct.CRYPT_rc4_context* %3, i64 0, i32 2, i64 %80
  %82 = load i32, i32* %81, align 4
  %83 = add nsw i32 %82, %75
  %84 = and i32 %83, 255
  store i32 %84, i32* %12, align 4
  %85 = zext i32 %84 to i64
  %86 = getelementptr inbounds %struct.CRYPT_rc4_context, %struct.CRYPT_rc4_context* %3, i64 0, i32 2, i64 %85
  %87 = load i32, i32* %81, align 4
  %88 = load i32, i32* %86, align 4
  store i32 %88, i32* %81, align 4
  store i32 %87, i32* %86, align 4
  %89 = load i32, i32* %81, align 4
  %90 = add nsw i32 %89, %87
  %91 = and i32 %90, 255
  %92 = zext i32 %91 to i64
  %93 = getelementptr inbounds %struct.CRYPT_rc4_context, %struct.CRYPT_rc4_context* %3, i64 0, i32 2, i64 %92
  %94 = load i32, i32* %93, align 4
  %95 = load i8, i8* %77, align 1
  %96 = trunc i32 %94 to i8
  %97 = xor i8 %95, %96
  store i8 %97, i8* %77, align 1
  %98 = getelementptr inbounds i8, i8* %77, i64 1
  %99 = icmp eq i8* %98, %72
  br i1 %99, label %103, label %100

100:                                              ; preds = %74
  %101 = load i32, i32* %11, align 4
  %102 = load i32, i32* %12, align 4
  br label %74

103:                                              ; preds = %74, %67
  call void @llvm.lifetime.end.p0i8(i64 1032, i8* nonnull %4) #3
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #1

; Function Attrs: nounwind ssp uwtable
define hidden void @_Z14CRYPT_MD5Startv(%struct.CRYPT_md5_context* noalias nocapture sret) local_unnamed_addr #0 {
  %2 = getelementptr inbounds %struct.CRYPT_md5_context, %struct.CRYPT_md5_context* %0, i64 0, i32 2, i64 0
  tail call void @llvm.memset.p0i8.i64(i8* align 4 %2, i8 -86, i64 64, i1 false)
  %3 = bitcast %struct.CRYPT_md5_context* %0 to <4 x i32>*
  store <4 x i32> <i32 0, i32 0, i32 1732584193, i32 -271733879>, <4 x i32>* %3, align 4
  %4 = getelementptr inbounds %struct.CRYPT_md5_context, %struct.CRYPT_md5_context* %0, i64 0, i32 1, i64 2
  store i32 -1732584194, i32* %4, align 4
  %5 = getelementptr inbounds %struct.CRYPT_md5_context, %struct.CRYPT_md5_context* %0, i64 0, i32 1, i64 3
  store i32 271733878, i32* %5, align 4
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_Z15CRYPT_MD5UpdateP17CRYPT_md5_contextN6pdfium4spanIKhEE(%struct.CRYPT_md5_context*, %"class.pdfium::span"* nocapture) local_unnamed_addr #0 {
  %3 = getelementptr inbounds %"class.pdfium::span", %"class.pdfium::span"* %1, i64 0, i32 1
  %4 = load i64, i64* %3, align 8
  %5 = icmp eq i64 %4, 0
  br i1 %5, label %71, label %6

6:                                                ; preds = %2
  %7 = getelementptr inbounds %struct.CRYPT_md5_context, %struct.CRYPT_md5_context* %0, i64 0, i32 0, i64 0
  %8 = load i32, i32* %7, align 4
  %9 = lshr i32 %8, 3
  %10 = and i32 %9, 63
  %11 = trunc i64 %4 to i32
  %12 = shl i32 %11, 3
  %13 = add i32 %8, %12
  store i32 %13, i32* %7, align 4
  %14 = load i64, i64* %3, align 8
  %15 = lshr i64 %14, 29
  %16 = getelementptr inbounds %struct.CRYPT_md5_context, %struct.CRYPT_md5_context* %0, i64 0, i32 0, i64 1
  %17 = load i32, i32* %16, align 4
  %18 = trunc i64 %15 to i32
  %19 = add i32 %17, %18
  store i32 %19, i32* %16, align 4
  %20 = zext i32 %13 to i64
  %21 = load i64, i64* %3, align 8
  %22 = shl i64 %21, 3
  %23 = icmp ugt i64 %22, %20
  %24 = zext i1 %23 to i32
  %25 = add i32 %19, %24
  store i32 %25, i32* %16, align 4
  %26 = icmp eq i32 %10, 0
  br i1 %26, label %27, label %29

27:                                               ; preds = %6
  %28 = load i64, i64* %3, align 8
  br label %46

29:                                               ; preds = %6
  %30 = sub nuw nsw i32 64, %10
  %31 = load i64, i64* %3, align 8
  %32 = zext i32 %30 to i64
  %33 = icmp ult i64 %31, %32
  br i1 %33, label %46, label %34

34:                                               ; preds = %29
  %35 = sub i64 %31, %32
  %36 = getelementptr inbounds %"class.pdfium::span", %"class.pdfium::span"* %1, i64 0, i32 0, i32 0
  %37 = load i8*, i8** %36, align 8, !noalias !5
  %38 = getelementptr inbounds i8, i8* %37, i64 %32
  %39 = getelementptr inbounds %struct.CRYPT_md5_context, %struct.CRYPT_md5_context* %0, i64 0, i32 2, i64 0
  %40 = zext i32 %10 to i64
  %41 = getelementptr inbounds %struct.CRYPT_md5_context, %struct.CRYPT_md5_context* %0, i64 0, i32 2, i64 %40
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %41, i8* align 1 %37, i64 %32, i1 false)
  tail call fastcc void @_ZN12_GLOBAL__N_111md5_processEP17CRYPT_md5_contextPKh(%struct.CRYPT_md5_context* %0, i8* %39)
  %42 = load i8*, i8** %36, align 8
  %43 = icmp eq i8* %42, %38
  br i1 %43, label %45, label %44

44:                                               ; preds = %34
  store i8* %38, i8** %36, align 8
  br label %45

45:                                               ; preds = %34, %44
  store i64 %35, i64* %3, align 8
  br label %46

46:                                               ; preds = %27, %29, %45
  %47 = phi i64 [ %35, %45 ], [ %31, %29 ], [ %28, %27 ]
  %48 = phi i32 [ 0, %45 ], [ %10, %29 ], [ 0, %27 ]
  %49 = icmp ugt i64 %47, 63
  br i1 %49, label %50, label %63

50:                                               ; preds = %46
  %51 = getelementptr inbounds %"class.pdfium::span", %"class.pdfium::span"* %1, i64 0, i32 0, i32 0
  %52 = load i8*, i8** %51, align 8, !noalias !8
  br label %53

53:                                               ; preds = %50, %61
  %54 = phi i8* [ %52, %50 ], [ %57, %61 ]
  %55 = phi i64 [ %47, %50 ], [ %56, %61 ]
  %56 = add i64 %55, -64
  %57 = getelementptr inbounds i8, i8* %54, i64 64
  tail call fastcc void @_ZN12_GLOBAL__N_111md5_processEP17CRYPT_md5_contextPKh(%struct.CRYPT_md5_context* %0, i8* %54)
  %58 = load i8*, i8** %51, align 8
  %59 = icmp eq i8* %58, %57
  br i1 %59, label %61, label %60

60:                                               ; preds = %53
  store i8* %57, i8** %51, align 8
  br label %61

61:                                               ; preds = %53, %60
  store i64 %56, i64* %3, align 8
  %62 = icmp ugt i64 %56, 63
  br i1 %62, label %53, label %63

63:                                               ; preds = %61, %46
  %64 = phi i64 [ %47, %46 ], [ %56, %61 ]
  %65 = icmp eq i64 %64, 0
  br i1 %65, label %71, label %66

66:                                               ; preds = %63
  %67 = zext i32 %48 to i64
  %68 = getelementptr inbounds %struct.CRYPT_md5_context, %struct.CRYPT_md5_context* %0, i64 0, i32 2, i64 %67
  %69 = getelementptr inbounds %"class.pdfium::span", %"class.pdfium::span"* %1, i64 0, i32 0, i32 0
  %70 = load i8*, i8** %69, align 8
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %68, i8* align 1 %70, i64 %64, i1 false)
  br label %71

71:                                               ; preds = %66, %63, %2
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal fastcc void @_ZN12_GLOBAL__N_111md5_processEP17CRYPT_md5_contextPKh(%struct.CRYPT_md5_context* nocapture, i8* readonly) unnamed_addr #2 {
  %3 = load i8, i8* %1, align 1
  %4 = zext i8 %3 to i32
  %5 = getelementptr inbounds i8, i8* %1, i64 1
  %6 = load i8, i8* %5, align 1
  %7 = zext i8 %6 to i32
  %8 = shl nuw nsw i32 %7, 8
  %9 = or i32 %8, %4
  %10 = getelementptr inbounds i8, i8* %1, i64 2
  %11 = load i8, i8* %10, align 1
  %12 = zext i8 %11 to i32
  %13 = shl nuw nsw i32 %12, 16
  %14 = or i32 %9, %13
  %15 = getelementptr inbounds i8, i8* %1, i64 3
  %16 = load i8, i8* %15, align 1
  %17 = zext i8 %16 to i32
  %18 = shl nuw i32 %17, 24
  %19 = or i32 %14, %18
  %20 = getelementptr inbounds i8, i8* %1, i64 4
  %21 = load i8, i8* %20, align 1
  %22 = zext i8 %21 to i32
  %23 = getelementptr inbounds i8, i8* %1, i64 5
  %24 = load i8, i8* %23, align 1
  %25 = zext i8 %24 to i32
  %26 = shl nuw nsw i32 %25, 8
  %27 = or i32 %26, %22
  %28 = getelementptr inbounds i8, i8* %1, i64 6
  %29 = load i8, i8* %28, align 1
  %30 = zext i8 %29 to i32
  %31 = shl nuw nsw i32 %30, 16
  %32 = or i32 %27, %31
  %33 = getelementptr inbounds i8, i8* %1, i64 7
  %34 = load i8, i8* %33, align 1
  %35 = zext i8 %34 to i32
  %36 = shl nuw i32 %35, 24
  %37 = or i32 %32, %36
  %38 = getelementptr inbounds i8, i8* %1, i64 8
  %39 = load i8, i8* %38, align 1
  %40 = zext i8 %39 to i32
  %41 = getelementptr inbounds i8, i8* %1, i64 9
  %42 = load i8, i8* %41, align 1
  %43 = zext i8 %42 to i32
  %44 = shl nuw nsw i32 %43, 8
  %45 = or i32 %44, %40
  %46 = getelementptr inbounds i8, i8* %1, i64 10
  %47 = load i8, i8* %46, align 1
  %48 = zext i8 %47 to i32
  %49 = shl nuw nsw i32 %48, 16
  %50 = or i32 %45, %49
  %51 = getelementptr inbounds i8, i8* %1, i64 11
  %52 = load i8, i8* %51, align 1
  %53 = zext i8 %52 to i32
  %54 = shl nuw i32 %53, 24
  %55 = or i32 %50, %54
  %56 = getelementptr inbounds i8, i8* %1, i64 12
  %57 = load i8, i8* %56, align 1
  %58 = zext i8 %57 to i32
  %59 = getelementptr inbounds i8, i8* %1, i64 13
  %60 = load i8, i8* %59, align 1
  %61 = zext i8 %60 to i32
  %62 = shl nuw nsw i32 %61, 8
  %63 = or i32 %62, %58
  %64 = getelementptr inbounds i8, i8* %1, i64 14
  %65 = load i8, i8* %64, align 1
  %66 = zext i8 %65 to i32
  %67 = shl nuw nsw i32 %66, 16
  %68 = or i32 %63, %67
  %69 = getelementptr inbounds i8, i8* %1, i64 15
  %70 = load i8, i8* %69, align 1
  %71 = zext i8 %70 to i32
  %72 = shl nuw i32 %71, 24
  %73 = or i32 %68, %72
  %74 = getelementptr inbounds i8, i8* %1, i64 16
  %75 = load i8, i8* %74, align 1
  %76 = zext i8 %75 to i32
  %77 = getelementptr inbounds i8, i8* %1, i64 17
  %78 = load i8, i8* %77, align 1
  %79 = zext i8 %78 to i32
  %80 = shl nuw nsw i32 %79, 8
  %81 = or i32 %80, %76
  %82 = getelementptr inbounds i8, i8* %1, i64 18
  %83 = load i8, i8* %82, align 1
  %84 = zext i8 %83 to i32
  %85 = shl nuw nsw i32 %84, 16
  %86 = or i32 %81, %85
  %87 = getelementptr inbounds i8, i8* %1, i64 19
  %88 = load i8, i8* %87, align 1
  %89 = zext i8 %88 to i32
  %90 = shl nuw i32 %89, 24
  %91 = or i32 %86, %90
  %92 = getelementptr inbounds i8, i8* %1, i64 20
  %93 = load i8, i8* %92, align 1
  %94 = zext i8 %93 to i32
  %95 = getelementptr inbounds i8, i8* %1, i64 21
  %96 = load i8, i8* %95, align 1
  %97 = zext i8 %96 to i32
  %98 = shl nuw nsw i32 %97, 8
  %99 = or i32 %98, %94
  %100 = getelementptr inbounds i8, i8* %1, i64 22
  %101 = load i8, i8* %100, align 1
  %102 = zext i8 %101 to i32
  %103 = shl nuw nsw i32 %102, 16
  %104 = or i32 %99, %103
  %105 = getelementptr inbounds i8, i8* %1, i64 23
  %106 = load i8, i8* %105, align 1
  %107 = zext i8 %106 to i32
  %108 = shl nuw i32 %107, 24
  %109 = or i32 %104, %108
  %110 = getelementptr inbounds i8, i8* %1, i64 24
  %111 = load i8, i8* %110, align 1
  %112 = zext i8 %111 to i32
  %113 = getelementptr inbounds i8, i8* %1, i64 25
  %114 = load i8, i8* %113, align 1
  %115 = zext i8 %114 to i32
  %116 = shl nuw nsw i32 %115, 8
  %117 = or i32 %116, %112
  %118 = getelementptr inbounds i8, i8* %1, i64 26
  %119 = load i8, i8* %118, align 1
  %120 = zext i8 %119 to i32
  %121 = shl nuw nsw i32 %120, 16
  %122 = or i32 %117, %121
  %123 = getelementptr inbounds i8, i8* %1, i64 27
  %124 = load i8, i8* %123, align 1
  %125 = zext i8 %124 to i32
  %126 = shl nuw i32 %125, 24
  %127 = or i32 %122, %126
  %128 = getelementptr inbounds i8, i8* %1, i64 28
  %129 = load i8, i8* %128, align 1
  %130 = zext i8 %129 to i32
  %131 = getelementptr inbounds i8, i8* %1, i64 29
  %132 = load i8, i8* %131, align 1
  %133 = zext i8 %132 to i32
  %134 = shl nuw nsw i32 %133, 8
  %135 = or i32 %134, %130
  %136 = getelementptr inbounds i8, i8* %1, i64 30
  %137 = load i8, i8* %136, align 1
  %138 = zext i8 %137 to i32
  %139 = shl nuw nsw i32 %138, 16
  %140 = or i32 %135, %139
  %141 = getelementptr inbounds i8, i8* %1, i64 31
  %142 = load i8, i8* %141, align 1
  %143 = zext i8 %142 to i32
  %144 = shl nuw i32 %143, 24
  %145 = or i32 %140, %144
  %146 = getelementptr inbounds i8, i8* %1, i64 32
  %147 = load i8, i8* %146, align 1
  %148 = zext i8 %147 to i32
  %149 = getelementptr inbounds i8, i8* %1, i64 33
  %150 = load i8, i8* %149, align 1
  %151 = zext i8 %150 to i32
  %152 = shl nuw nsw i32 %151, 8
  %153 = or i32 %152, %148
  %154 = getelementptr inbounds i8, i8* %1, i64 34
  %155 = load i8, i8* %154, align 1
  %156 = zext i8 %155 to i32
  %157 = shl nuw nsw i32 %156, 16
  %158 = or i32 %153, %157
  %159 = getelementptr inbounds i8, i8* %1, i64 35
  %160 = load i8, i8* %159, align 1
  %161 = zext i8 %160 to i32
  %162 = shl nuw i32 %161, 24
  %163 = or i32 %158, %162
  %164 = getelementptr inbounds i8, i8* %1, i64 36
  %165 = load i8, i8* %164, align 1
  %166 = zext i8 %165 to i32
  %167 = getelementptr inbounds i8, i8* %1, i64 37
  %168 = load i8, i8* %167, align 1
  %169 = zext i8 %168 to i32
  %170 = shl nuw nsw i32 %169, 8
  %171 = or i32 %170, %166
  %172 = getelementptr inbounds i8, i8* %1, i64 38
  %173 = load i8, i8* %172, align 1
  %174 = zext i8 %173 to i32
  %175 = shl nuw nsw i32 %174, 16
  %176 = or i32 %171, %175
  %177 = getelementptr inbounds i8, i8* %1, i64 39
  %178 = load i8, i8* %177, align 1
  %179 = zext i8 %178 to i32
  %180 = shl nuw i32 %179, 24
  %181 = or i32 %176, %180
  %182 = getelementptr inbounds i8, i8* %1, i64 40
  %183 = load i8, i8* %182, align 1
  %184 = zext i8 %183 to i32
  %185 = getelementptr inbounds i8, i8* %1, i64 41
  %186 = load i8, i8* %185, align 1
  %187 = zext i8 %186 to i32
  %188 = shl nuw nsw i32 %187, 8
  %189 = or i32 %188, %184
  %190 = getelementptr inbounds i8, i8* %1, i64 42
  %191 = load i8, i8* %190, align 1
  %192 = zext i8 %191 to i32
  %193 = shl nuw nsw i32 %192, 16
  %194 = or i32 %189, %193
  %195 = getelementptr inbounds i8, i8* %1, i64 43
  %196 = load i8, i8* %195, align 1
  %197 = zext i8 %196 to i32
  %198 = shl nuw i32 %197, 24
  %199 = or i32 %194, %198
  %200 = getelementptr inbounds i8, i8* %1, i64 44
  %201 = load i8, i8* %200, align 1
  %202 = zext i8 %201 to i32
  %203 = getelementptr inbounds i8, i8* %1, i64 45
  %204 = load i8, i8* %203, align 1
  %205 = zext i8 %204 to i32
  %206 = shl nuw nsw i32 %205, 8
  %207 = or i32 %206, %202
  %208 = getelementptr inbounds i8, i8* %1, i64 46
  %209 = load i8, i8* %208, align 1
  %210 = zext i8 %209 to i32
  %211 = shl nuw nsw i32 %210, 16
  %212 = or i32 %207, %211
  %213 = getelementptr inbounds i8, i8* %1, i64 47
  %214 = load i8, i8* %213, align 1
  %215 = zext i8 %214 to i32
  %216 = shl nuw i32 %215, 24
  %217 = or i32 %212, %216
  %218 = getelementptr inbounds i8, i8* %1, i64 48
  %219 = load i8, i8* %218, align 1
  %220 = zext i8 %219 to i32
  %221 = getelementptr inbounds i8, i8* %1, i64 49
  %222 = load i8, i8* %221, align 1
  %223 = zext i8 %222 to i32
  %224 = shl nuw nsw i32 %223, 8
  %225 = or i32 %224, %220
  %226 = getelementptr inbounds i8, i8* %1, i64 50
  %227 = load i8, i8* %226, align 1
  %228 = zext i8 %227 to i32
  %229 = shl nuw nsw i32 %228, 16
  %230 = or i32 %225, %229
  %231 = getelementptr inbounds i8, i8* %1, i64 51
  %232 = load i8, i8* %231, align 1
  %233 = zext i8 %232 to i32
  %234 = shl nuw i32 %233, 24
  %235 = or i32 %230, %234
  %236 = getelementptr inbounds i8, i8* %1, i64 52
  %237 = load i8, i8* %236, align 1
  %238 = zext i8 %237 to i32
  %239 = getelementptr inbounds i8, i8* %1, i64 53
  %240 = load i8, i8* %239, align 1
  %241 = zext i8 %240 to i32
  %242 = shl nuw nsw i32 %241, 8
  %243 = or i32 %242, %238
  %244 = getelementptr inbounds i8, i8* %1, i64 54
  %245 = load i8, i8* %244, align 1
  %246 = zext i8 %245 to i32
  %247 = shl nuw nsw i32 %246, 16
  %248 = or i32 %243, %247
  %249 = getelementptr inbounds i8, i8* %1, i64 55
  %250 = load i8, i8* %249, align 1
  %251 = zext i8 %250 to i32
  %252 = shl nuw i32 %251, 24
  %253 = or i32 %248, %252
  %254 = getelementptr inbounds i8, i8* %1, i64 56
  %255 = load i8, i8* %254, align 1
  %256 = zext i8 %255 to i32
  %257 = getelementptr inbounds i8, i8* %1, i64 57
  %258 = load i8, i8* %257, align 1
  %259 = zext i8 %258 to i32
  %260 = shl nuw nsw i32 %259, 8
  %261 = or i32 %260, %256
  %262 = getelementptr inbounds i8, i8* %1, i64 58
  %263 = load i8, i8* %262, align 1
  %264 = zext i8 %263 to i32
  %265 = shl nuw nsw i32 %264, 16
  %266 = or i32 %261, %265
  %267 = getelementptr inbounds i8, i8* %1, i64 59
  %268 = load i8, i8* %267, align 1
  %269 = zext i8 %268 to i32
  %270 = shl nuw i32 %269, 24
  %271 = or i32 %266, %270
  %272 = getelementptr inbounds i8, i8* %1, i64 60
  %273 = load i8, i8* %272, align 1
  %274 = zext i8 %273 to i32
  %275 = getelementptr inbounds i8, i8* %1, i64 61
  %276 = load i8, i8* %275, align 1
  %277 = zext i8 %276 to i32
  %278 = shl nuw nsw i32 %277, 8
  %279 = or i32 %278, %274
  %280 = getelementptr inbounds i8, i8* %1, i64 62
  %281 = load i8, i8* %280, align 1
  %282 = zext i8 %281 to i32
  %283 = shl nuw nsw i32 %282, 16
  %284 = or i32 %279, %283
  %285 = getelementptr inbounds i8, i8* %1, i64 63
  %286 = load i8, i8* %285, align 1
  %287 = zext i8 %286 to i32
  %288 = shl nuw i32 %287, 24
  %289 = or i32 %284, %288
  %290 = getelementptr inbounds %struct.CRYPT_md5_context, %struct.CRYPT_md5_context* %0, i64 0, i32 1, i64 0
  %291 = load i32, i32* %290, align 4
  %292 = getelementptr inbounds %struct.CRYPT_md5_context, %struct.CRYPT_md5_context* %0, i64 0, i32 1, i64 1
  %293 = load i32, i32* %292, align 4
  %294 = getelementptr inbounds %struct.CRYPT_md5_context, %struct.CRYPT_md5_context* %0, i64 0, i32 1, i64 2
  %295 = load i32, i32* %294, align 4
  %296 = getelementptr inbounds %struct.CRYPT_md5_context, %struct.CRYPT_md5_context* %0, i64 0, i32 1, i64 3
  %297 = load i32, i32* %296, align 4
  %298 = xor i32 %297, %295
  %299 = and i32 %298, %293
  %300 = xor i32 %299, %297
  %301 = add i32 %19, -680876936
  %302 = add i32 %301, %291
  %303 = add i32 %302, %300
  %304 = shl i32 %303, 7
  %305 = lshr i32 %303, 25
  %306 = or i32 %304, %305
  %307 = add i32 %306, %293
  %308 = xor i32 %295, %293
  %309 = and i32 %307, %308
  %310 = xor i32 %309, %295
  %311 = add i32 %37, -389564586
  %312 = add i32 %311, %297
  %313 = add i32 %312, %310
  %314 = shl i32 %313, 12
  %315 = lshr i32 %313, 20
  %316 = or i32 %314, %315
  %317 = add i32 %316, %307
  %318 = xor i32 %307, %293
  %319 = and i32 %317, %318
  %320 = xor i32 %319, %293
  %321 = add i32 %55, 606105819
  %322 = add i32 %321, %295
  %323 = add i32 %322, %320
  %324 = shl i32 %323, 17
  %325 = lshr i32 %323, 15
  %326 = or i32 %324, %325
  %327 = add i32 %326, %317
  %328 = xor i32 %317, %307
  %329 = and i32 %327, %328
  %330 = xor i32 %329, %307
  %331 = add i32 %73, -1044525330
  %332 = add i32 %331, %293
  %333 = add i32 %332, %330
  %334 = shl i32 %333, 22
  %335 = lshr i32 %333, 10
  %336 = or i32 %334, %335
  %337 = add i32 %336, %327
  %338 = xor i32 %327, %317
  %339 = and i32 %337, %338
  %340 = xor i32 %339, %317
  %341 = add i32 %91, -176418897
  %342 = add i32 %341, %307
  %343 = add i32 %342, %340
  %344 = shl i32 %343, 7
  %345 = lshr i32 %343, 25
  %346 = or i32 %344, %345
  %347 = add i32 %346, %337
  %348 = xor i32 %337, %327
  %349 = and i32 %347, %348
  %350 = xor i32 %349, %327
  %351 = add i32 %109, 1200080426
  %352 = add i32 %351, %317
  %353 = add i32 %352, %350
  %354 = shl i32 %353, 12
  %355 = lshr i32 %353, 20
  %356 = or i32 %354, %355
  %357 = add i32 %356, %347
  %358 = xor i32 %347, %337
  %359 = and i32 %357, %358
  %360 = xor i32 %359, %337
  %361 = add i32 %127, -1473231341
  %362 = add i32 %361, %327
  %363 = add i32 %362, %360
  %364 = shl i32 %363, 17
  %365 = lshr i32 %363, 15
  %366 = or i32 %364, %365
  %367 = add i32 %366, %357
  %368 = xor i32 %357, %347
  %369 = and i32 %367, %368
  %370 = xor i32 %369, %347
  %371 = add i32 %145, -45705983
  %372 = add i32 %371, %337
  %373 = add i32 %372, %370
  %374 = shl i32 %373, 22
  %375 = lshr i32 %373, 10
  %376 = or i32 %374, %375
  %377 = add i32 %376, %367
  %378 = xor i32 %367, %357
  %379 = and i32 %377, %378
  %380 = xor i32 %379, %357
  %381 = add i32 %163, 1770035416
  %382 = add i32 %381, %347
  %383 = add i32 %382, %380
  %384 = shl i32 %383, 7
  %385 = lshr i32 %383, 25
  %386 = or i32 %384, %385
  %387 = add i32 %386, %377
  %388 = xor i32 %377, %367
  %389 = and i32 %387, %388
  %390 = xor i32 %389, %367
  %391 = add i32 %181, -1958414417
  %392 = add i32 %391, %357
  %393 = add i32 %392, %390
  %394 = shl i32 %393, 12
  %395 = lshr i32 %393, 20
  %396 = or i32 %394, %395
  %397 = add i32 %396, %387
  %398 = xor i32 %387, %377
  %399 = and i32 %397, %398
  %400 = xor i32 %399, %377
  %401 = add i32 %199, -42063
  %402 = add i32 %401, %367
  %403 = add i32 %402, %400
  %404 = shl i32 %403, 17
  %405 = lshr i32 %403, 15
  %406 = or i32 %404, %405
  %407 = add i32 %406, %397
  %408 = xor i32 %397, %387
  %409 = and i32 %407, %408
  %410 = xor i32 %409, %387
  %411 = add i32 %217, -1990404162
  %412 = add i32 %411, %377
  %413 = add i32 %412, %410
  %414 = shl i32 %413, 22
  %415 = lshr i32 %413, 10
  %416 = or i32 %414, %415
  %417 = add i32 %416, %407
  %418 = xor i32 %407, %397
  %419 = and i32 %417, %418
  %420 = xor i32 %419, %397
  %421 = add i32 %235, 1804603682
  %422 = add i32 %421, %387
  %423 = add i32 %422, %420
  %424 = shl i32 %423, 7
  %425 = lshr i32 %423, 25
  %426 = or i32 %424, %425
  %427 = add i32 %426, %417
  %428 = xor i32 %417, %407
  %429 = and i32 %427, %428
  %430 = xor i32 %429, %407
  %431 = add i32 %253, -40341101
  %432 = add i32 %431, %397
  %433 = add i32 %432, %430
  %434 = shl i32 %433, 12
  %435 = lshr i32 %433, 20
  %436 = or i32 %434, %435
  %437 = add i32 %436, %427
  %438 = xor i32 %427, %417
  %439 = and i32 %437, %438
  %440 = xor i32 %439, %417
  %441 = add i32 %271, -1502002290
  %442 = add i32 %441, %407
  %443 = add i32 %442, %440
  %444 = shl i32 %443, 17
  %445 = lshr i32 %443, 15
  %446 = or i32 %444, %445
  %447 = add i32 %446, %437
  %448 = xor i32 %437, %427
  %449 = and i32 %447, %448
  %450 = xor i32 %449, %427
  %451 = add i32 %289, 1236535329
  %452 = add i32 %451, %417
  %453 = add i32 %452, %450
  %454 = shl i32 %453, 22
  %455 = lshr i32 %453, 10
  %456 = or i32 %454, %455
  %457 = add i32 %456, %447
  %458 = xor i32 %457, %447
  %459 = and i32 %458, %437
  %460 = xor i32 %459, %447
  %461 = add i32 %37, -165796510
  %462 = add i32 %461, %427
  %463 = add i32 %462, %460
  %464 = shl i32 %463, 5
  %465 = lshr i32 %463, 27
  %466 = or i32 %464, %465
  %467 = add i32 %466, %457
  %468 = xor i32 %467, %457
  %469 = and i32 %468, %447
  %470 = xor i32 %469, %457
  %471 = add i32 %127, -1069501632
  %472 = add i32 %471, %437
  %473 = add i32 %472, %470
  %474 = shl i32 %473, 9
  %475 = lshr i32 %473, 23
  %476 = or i32 %474, %475
  %477 = add i32 %476, %467
  %478 = xor i32 %477, %467
  %479 = and i32 %478, %457
  %480 = xor i32 %479, %467
  %481 = add i32 %217, 643717713
  %482 = add i32 %481, %447
  %483 = add i32 %482, %480
  %484 = shl i32 %483, 14
  %485 = lshr i32 %483, 18
  %486 = or i32 %484, %485
  %487 = add i32 %486, %477
  %488 = xor i32 %487, %477
  %489 = and i32 %488, %467
  %490 = xor i32 %489, %477
  %491 = add i32 %19, -373897302
  %492 = add i32 %491, %457
  %493 = add i32 %492, %490
  %494 = shl i32 %493, 20
  %495 = lshr i32 %493, 12
  %496 = or i32 %494, %495
  %497 = add i32 %496, %487
  %498 = xor i32 %497, %487
  %499 = and i32 %498, %477
  %500 = xor i32 %499, %487
  %501 = add i32 %109, -701558691
  %502 = add i32 %501, %467
  %503 = add i32 %502, %500
  %504 = shl i32 %503, 5
  %505 = lshr i32 %503, 27
  %506 = or i32 %504, %505
  %507 = add i32 %506, %497
  %508 = xor i32 %507, %497
  %509 = and i32 %508, %487
  %510 = xor i32 %509, %497
  %511 = add i32 %199, 38016083
  %512 = add i32 %511, %477
  %513 = add i32 %512, %510
  %514 = shl i32 %513, 9
  %515 = lshr i32 %513, 23
  %516 = or i32 %514, %515
  %517 = add i32 %516, %507
  %518 = xor i32 %517, %507
  %519 = and i32 %518, %497
  %520 = xor i32 %519, %507
  %521 = add i32 %289, -660478335
  %522 = add i32 %521, %487
  %523 = add i32 %522, %520
  %524 = shl i32 %523, 14
  %525 = lshr i32 %523, 18
  %526 = or i32 %524, %525
  %527 = add i32 %526, %517
  %528 = xor i32 %527, %517
  %529 = and i32 %528, %507
  %530 = xor i32 %529, %517
  %531 = add i32 %91, -405537848
  %532 = add i32 %531, %497
  %533 = add i32 %532, %530
  %534 = shl i32 %533, 20
  %535 = lshr i32 %533, 12
  %536 = or i32 %534, %535
  %537 = add i32 %536, %527
  %538 = xor i32 %537, %527
  %539 = and i32 %538, %517
  %540 = xor i32 %539, %527
  %541 = add i32 %181, 568446438
  %542 = add i32 %541, %507
  %543 = add i32 %542, %540
  %544 = shl i32 %543, 5
  %545 = lshr i32 %543, 27
  %546 = or i32 %544, %545
  %547 = add i32 %546, %537
  %548 = xor i32 %547, %537
  %549 = and i32 %548, %527
  %550 = xor i32 %549, %537
  %551 = add i32 %271, -1019803690
  %552 = add i32 %551, %517
  %553 = add i32 %552, %550
  %554 = shl i32 %553, 9
  %555 = lshr i32 %553, 23
  %556 = or i32 %554, %555
  %557 = add i32 %556, %547
  %558 = xor i32 %557, %547
  %559 = and i32 %558, %537
  %560 = xor i32 %559, %547
  %561 = add i32 %73, -187363961
  %562 = add i32 %561, %527
  %563 = add i32 %562, %560
  %564 = shl i32 %563, 14
  %565 = lshr i32 %563, 18
  %566 = or i32 %564, %565
  %567 = add i32 %566, %557
  %568 = xor i32 %567, %557
  %569 = and i32 %568, %547
  %570 = xor i32 %569, %557
  %571 = add i32 %163, 1163531501
  %572 = add i32 %571, %537
  %573 = add i32 %572, %570
  %574 = shl i32 %573, 20
  %575 = lshr i32 %573, 12
  %576 = or i32 %574, %575
  %577 = add i32 %576, %567
  %578 = xor i32 %577, %567
  %579 = and i32 %578, %557
  %580 = xor i32 %579, %567
  %581 = add i32 %253, -1444681467
  %582 = add i32 %581, %547
  %583 = add i32 %582, %580
  %584 = shl i32 %583, 5
  %585 = lshr i32 %583, 27
  %586 = or i32 %584, %585
  %587 = add i32 %586, %577
  %588 = xor i32 %587, %577
  %589 = and i32 %588, %567
  %590 = xor i32 %589, %577
  %591 = add i32 %55, -51403784
  %592 = add i32 %591, %557
  %593 = add i32 %592, %590
  %594 = shl i32 %593, 9
  %595 = lshr i32 %593, 23
  %596 = or i32 %594, %595
  %597 = add i32 %596, %587
  %598 = xor i32 %597, %587
  %599 = and i32 %598, %577
  %600 = xor i32 %599, %587
  %601 = add i32 %145, 1735328473
  %602 = add i32 %601, %567
  %603 = add i32 %602, %600
  %604 = shl i32 %603, 14
  %605 = lshr i32 %603, 18
  %606 = or i32 %604, %605
  %607 = add i32 %606, %597
  %608 = xor i32 %607, %597
  %609 = and i32 %608, %587
  %610 = xor i32 %609, %597
  %611 = add i32 %235, -1926607734
  %612 = add i32 %611, %577
  %613 = add i32 %612, %610
  %614 = shl i32 %613, 20
  %615 = lshr i32 %613, 12
  %616 = or i32 %614, %615
  %617 = add i32 %616, %607
  %618 = xor i32 %608, %617
  %619 = add i32 %109, -378558
  %620 = add i32 %619, %587
  %621 = add i32 %620, %618
  %622 = shl i32 %621, 4
  %623 = lshr i32 %621, 28
  %624 = or i32 %622, %623
  %625 = add i32 %624, %617
  %626 = xor i32 %617, %607
  %627 = xor i32 %626, %625
  %628 = add i32 %163, -2022574463
  %629 = add i32 %628, %597
  %630 = add i32 %629, %627
  %631 = shl i32 %630, 11
  %632 = lshr i32 %630, 21
  %633 = or i32 %631, %632
  %634 = add i32 %633, %625
  %635 = xor i32 %625, %617
  %636 = xor i32 %635, %634
  %637 = add i32 %217, 1839030562
  %638 = add i32 %637, %607
  %639 = add i32 %638, %636
  %640 = shl i32 %639, 16
  %641 = lshr i32 %639, 16
  %642 = or i32 %640, %641
  %643 = add i32 %642, %634
  %644 = xor i32 %634, %625
  %645 = xor i32 %644, %643
  %646 = add i32 %271, -35309556
  %647 = add i32 %646, %617
  %648 = add i32 %647, %645
  %649 = shl i32 %648, 23
  %650 = lshr i32 %648, 9
  %651 = or i32 %649, %650
  %652 = add i32 %651, %643
  %653 = xor i32 %643, %634
  %654 = xor i32 %653, %652
  %655 = add i32 %37, -1530992060
  %656 = add i32 %655, %625
  %657 = add i32 %656, %654
  %658 = shl i32 %657, 4
  %659 = lshr i32 %657, 28
  %660 = or i32 %658, %659
  %661 = add i32 %660, %652
  %662 = xor i32 %652, %643
  %663 = xor i32 %662, %661
  %664 = add i32 %91, 1272893353
  %665 = add i32 %664, %634
  %666 = add i32 %665, %663
  %667 = shl i32 %666, 11
  %668 = lshr i32 %666, 21
  %669 = or i32 %667, %668
  %670 = add i32 %669, %661
  %671 = xor i32 %661, %652
  %672 = xor i32 %671, %670
  %673 = add i32 %145, -155497632
  %674 = add i32 %673, %643
  %675 = add i32 %674, %672
  %676 = shl i32 %675, 16
  %677 = lshr i32 %675, 16
  %678 = or i32 %676, %677
  %679 = add i32 %678, %670
  %680 = xor i32 %670, %661
  %681 = xor i32 %680, %679
  %682 = add i32 %199, -1094730640
  %683 = add i32 %682, %652
  %684 = add i32 %683, %681
  %685 = shl i32 %684, 23
  %686 = lshr i32 %684, 9
  %687 = or i32 %685, %686
  %688 = add i32 %687, %679
  %689 = xor i32 %679, %670
  %690 = xor i32 %689, %688
  %691 = add i32 %253, 681279174
  %692 = add i32 %691, %661
  %693 = add i32 %692, %690
  %694 = shl i32 %693, 4
  %695 = lshr i32 %693, 28
  %696 = or i32 %694, %695
  %697 = add i32 %696, %688
  %698 = xor i32 %688, %679
  %699 = xor i32 %698, %697
  %700 = add i32 %19, -358537222
  %701 = add i32 %700, %670
  %702 = add i32 %701, %699
  %703 = shl i32 %702, 11
  %704 = lshr i32 %702, 21
  %705 = or i32 %703, %704
  %706 = add i32 %705, %697
  %707 = xor i32 %697, %688
  %708 = xor i32 %707, %706
  %709 = add i32 %73, -722521979
  %710 = add i32 %709, %679
  %711 = add i32 %710, %708
  %712 = shl i32 %711, 16
  %713 = lshr i32 %711, 16
  %714 = or i32 %712, %713
  %715 = add i32 %714, %706
  %716 = xor i32 %706, %697
  %717 = xor i32 %716, %715
  %718 = add i32 %127, 76029189
  %719 = add i32 %718, %688
  %720 = add i32 %719, %717
  %721 = shl i32 %720, 23
  %722 = lshr i32 %720, 9
  %723 = or i32 %721, %722
  %724 = add i32 %723, %715
  %725 = xor i32 %715, %706
  %726 = xor i32 %725, %724
  %727 = add i32 %181, -640364487
  %728 = add i32 %727, %697
  %729 = add i32 %728, %726
  %730 = shl i32 %729, 4
  %731 = lshr i32 %729, 28
  %732 = or i32 %730, %731
  %733 = add i32 %732, %724
  %734 = xor i32 %724, %715
  %735 = xor i32 %734, %733
  %736 = add i32 %235, -421815835
  %737 = add i32 %736, %706
  %738 = add i32 %737, %735
  %739 = shl i32 %738, 11
  %740 = lshr i32 %738, 21
  %741 = or i32 %739, %740
  %742 = add i32 %741, %733
  %743 = xor i32 %733, %724
  %744 = xor i32 %743, %742
  %745 = add i32 %289, 530742520
  %746 = add i32 %745, %715
  %747 = add i32 %746, %744
  %748 = shl i32 %747, 16
  %749 = lshr i32 %747, 16
  %750 = or i32 %748, %749
  %751 = add i32 %750, %742
  %752 = xor i32 %742, %733
  %753 = xor i32 %752, %751
  %754 = add i32 %55, -995338651
  %755 = add i32 %754, %724
  %756 = add i32 %755, %753
  %757 = shl i32 %756, 23
  %758 = lshr i32 %756, 9
  %759 = or i32 %757, %758
  %760 = add i32 %759, %751
  %761 = xor i32 %742, -1
  %762 = or i32 %760, %761
  %763 = xor i32 %762, %751
  %764 = add i32 %19, -198630844
  %765 = add i32 %764, %733
  %766 = add i32 %765, %763
  %767 = shl i32 %766, 6
  %768 = lshr i32 %766, 26
  %769 = or i32 %767, %768
  %770 = add i32 %769, %760
  %771 = xor i32 %751, -1
  %772 = or i32 %770, %771
  %773 = xor i32 %772, %760
  %774 = add i32 %145, 1126891415
  %775 = add i32 %774, %742
  %776 = add i32 %775, %773
  %777 = shl i32 %776, 10
  %778 = lshr i32 %776, 22
  %779 = or i32 %777, %778
  %780 = add i32 %779, %770
  %781 = xor i32 %760, -1
  %782 = or i32 %780, %781
  %783 = xor i32 %782, %770
  %784 = add i32 %271, -1416354905
  %785 = add i32 %784, %751
  %786 = add i32 %785, %783
  %787 = shl i32 %786, 15
  %788 = lshr i32 %786, 17
  %789 = or i32 %787, %788
  %790 = add i32 %789, %780
  %791 = xor i32 %770, -1
  %792 = or i32 %790, %791
  %793 = xor i32 %792, %780
  %794 = add i32 %109, -57434055
  %795 = add i32 %794, %760
  %796 = add i32 %795, %793
  %797 = shl i32 %796, 21
  %798 = lshr i32 %796, 11
  %799 = or i32 %797, %798
  %800 = add i32 %799, %790
  %801 = xor i32 %780, -1
  %802 = or i32 %800, %801
  %803 = xor i32 %802, %790
  %804 = add i32 %235, 1700485571
  %805 = add i32 %804, %770
  %806 = add i32 %805, %803
  %807 = shl i32 %806, 6
  %808 = lshr i32 %806, 26
  %809 = or i32 %807, %808
  %810 = add i32 %809, %800
  %811 = xor i32 %790, -1
  %812 = or i32 %810, %811
  %813 = xor i32 %812, %800
  %814 = add i32 %73, -1894986606
  %815 = add i32 %814, %780
  %816 = add i32 %815, %813
  %817 = shl i32 %816, 10
  %818 = lshr i32 %816, 22
  %819 = or i32 %817, %818
  %820 = add i32 %819, %810
  %821 = xor i32 %800, -1
  %822 = or i32 %820, %821
  %823 = xor i32 %822, %810
  %824 = add i32 %199, -1051523
  %825 = add i32 %824, %790
  %826 = add i32 %825, %823
  %827 = shl i32 %826, 15
  %828 = lshr i32 %826, 17
  %829 = or i32 %827, %828
  %830 = add i32 %829, %820
  %831 = xor i32 %810, -1
  %832 = or i32 %830, %831
  %833 = xor i32 %832, %820
  %834 = add i32 %37, -2054922799
  %835 = add i32 %834, %800
  %836 = add i32 %835, %833
  %837 = shl i32 %836, 21
  %838 = lshr i32 %836, 11
  %839 = or i32 %837, %838
  %840 = add i32 %839, %830
  %841 = xor i32 %820, -1
  %842 = or i32 %840, %841
  %843 = xor i32 %842, %830
  %844 = add i32 %163, 1873313359
  %845 = add i32 %844, %810
  %846 = add i32 %845, %843
  %847 = shl i32 %846, 6
  %848 = lshr i32 %846, 26
  %849 = or i32 %847, %848
  %850 = add i32 %849, %840
  %851 = xor i32 %830, -1
  %852 = or i32 %850, %851
  %853 = xor i32 %852, %840
  %854 = add i32 %289, -30611744
  %855 = add i32 %854, %820
  %856 = add i32 %855, %853
  %857 = shl i32 %856, 10
  %858 = lshr i32 %856, 22
  %859 = or i32 %857, %858
  %860 = add i32 %859, %850
  %861 = xor i32 %840, -1
  %862 = or i32 %860, %861
  %863 = xor i32 %862, %850
  %864 = add i32 %127, -1560198380
  %865 = add i32 %864, %830
  %866 = add i32 %865, %863
  %867 = shl i32 %866, 15
  %868 = lshr i32 %866, 17
  %869 = or i32 %867, %868
  %870 = add i32 %869, %860
  %871 = xor i32 %850, -1
  %872 = or i32 %870, %871
  %873 = xor i32 %872, %860
  %874 = add i32 %253, 1309151649
  %875 = add i32 %874, %840
  %876 = add i32 %875, %873
  %877 = shl i32 %876, 21
  %878 = lshr i32 %876, 11
  %879 = or i32 %877, %878
  %880 = add i32 %879, %870
  %881 = xor i32 %860, -1
  %882 = or i32 %880, %881
  %883 = xor i32 %882, %870
  %884 = add i32 %91, -145523070
  %885 = add i32 %884, %850
  %886 = add i32 %885, %883
  %887 = shl i32 %886, 6
  %888 = lshr i32 %886, 26
  %889 = or i32 %887, %888
  %890 = add i32 %889, %880
  %891 = xor i32 %870, -1
  %892 = or i32 %890, %891
  %893 = xor i32 %892, %880
  %894 = add i32 %217, -1120210379
  %895 = add i32 %894, %860
  %896 = add i32 %895, %893
  %897 = shl i32 %896, 10
  %898 = lshr i32 %896, 22
  %899 = or i32 %897, %898
  %900 = add i32 %899, %890
  %901 = xor i32 %880, -1
  %902 = or i32 %900, %901
  %903 = xor i32 %902, %890
  %904 = add i32 %55, 718787259
  %905 = add i32 %904, %870
  %906 = add i32 %905, %903
  %907 = shl i32 %906, 15
  %908 = lshr i32 %906, 17
  %909 = or i32 %907, %908
  %910 = add i32 %909, %900
  %911 = xor i32 %890, -1
  %912 = or i32 %910, %911
  %913 = xor i32 %912, %900
  %914 = add i32 %181, -343485551
  %915 = add i32 %914, %880
  %916 = add i32 %915, %913
  %917 = shl i32 %916, 21
  %918 = lshr i32 %916, 11
  %919 = or i32 %917, %918
  %920 = add i32 %890, %291
  store i32 %920, i32* %290, align 4
  %921 = add i32 %910, %293
  %922 = add i32 %921, %919
  store i32 %922, i32* %292, align 4
  %923 = add i32 %910, %295
  store i32 %923, i32* %294, align 4
  %924 = add i32 %900, %297
  store i32 %924, i32* %296, align 4
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_Z15CRYPT_MD5FinishP17CRYPT_md5_contextPh(%struct.CRYPT_md5_context*, i8* nocapture) local_unnamed_addr #0 {
  %3 = alloca i64, align 8
  %4 = bitcast i64* %3 to [8 x i8]*
  %5 = bitcast i64* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %5) #3
  %6 = getelementptr inbounds [8 x i8], [8 x i8]* %4, i64 0, i64 1
  %7 = getelementptr inbounds [8 x i8], [8 x i8]* %4, i64 0, i64 2
  %8 = getelementptr inbounds [8 x i8], [8 x i8]* %4, i64 0, i64 3
  %9 = getelementptr inbounds [8 x i8], [8 x i8]* %4, i64 0, i64 4
  %10 = getelementptr inbounds [8 x i8], [8 x i8]* %4, i64 0, i64 5
  %11 = getelementptr inbounds [8 x i8], [8 x i8]* %4, i64 0, i64 6
  %12 = getelementptr inbounds [8 x i8], [8 x i8]* %4, i64 0, i64 7
  %13 = getelementptr inbounds %struct.CRYPT_md5_context, %struct.CRYPT_md5_context* %0, i64 0, i32 0, i64 0
  %14 = load i32, i32* %13, align 4
  %15 = trunc i32 %14 to i8
  store i8 %15, i8* %5, align 8
  %16 = lshr i32 %14, 8
  %17 = trunc i32 %16 to i8
  store i8 %17, i8* %6, align 1
  %18 = lshr i32 %14, 16
  %19 = trunc i32 %18 to i8
  store i8 %19, i8* %7, align 2
  %20 = lshr i32 %14, 24
  %21 = trunc i32 %20 to i8
  store i8 %21, i8* %8, align 1
  %22 = getelementptr inbounds %struct.CRYPT_md5_context, %struct.CRYPT_md5_context* %0, i64 0, i32 0, i64 1
  %23 = load i32, i32* %22, align 4
  %24 = trunc i32 %23 to i8
  store i8 %24, i8* %9, align 4
  %25 = lshr i32 %23, 8
  %26 = trunc i32 %25 to i8
  store i8 %26, i8* %10, align 1
  %27 = lshr i32 %23, 16
  %28 = trunc i32 %27 to i8
  store i8 %28, i8* %11, align 2
  %29 = lshr i32 %23, 24
  %30 = trunc i32 %29 to i8
  store i8 %30, i8* %12, align 1
  %31 = lshr i32 %14, 3
  %32 = and i32 %31, 63
  %33 = icmp ult i32 %32, 56
  %34 = select i1 %33, i32 56, i32 120
  %35 = sub nsw i32 %34, %32
  %36 = zext i32 %35 to i64
  %37 = icmp eq i32 %35, 0
  br i1 %37, label %79, label %38

38:                                               ; preds = %2
  %39 = shl nsw i32 %35, 3
  %40 = add i32 %39, %14
  store i32 %40, i32* %13, align 4
  %41 = lshr i32 %35, 29
  %42 = add i32 %41, %23
  %43 = zext i32 %40 to i64
  %44 = shl nuw nsw i64 %36, 3
  %45 = icmp ugt i64 %44, %43
  %46 = zext i1 %45 to i32
  %47 = add i32 %42, %46
  store i32 %47, i32* %22, align 4
  %48 = icmp eq i32 %32, 0
  br i1 %48, label %59, label %49

49:                                               ; preds = %38
  %50 = sub nuw nsw i32 64, %32
  %51 = zext i32 %50 to i64
  %52 = icmp ult i32 %35, %50
  br i1 %52, label %59, label %53

53:                                               ; preds = %49
  %54 = sub nsw i64 %36, %51
  %55 = getelementptr inbounds i8, i8* getelementptr inbounds (<{ i8, [63 x i8] }>, <{ i8, [63 x i8] }>* @_ZN12_GLOBAL__N_111md5_paddingE, i64 0, i32 0), i64 %51
  %56 = getelementptr inbounds %struct.CRYPT_md5_context, %struct.CRYPT_md5_context* %0, i64 0, i32 2, i64 0
  %57 = zext i32 %32 to i64
  %58 = getelementptr inbounds %struct.CRYPT_md5_context, %struct.CRYPT_md5_context* %0, i64 0, i32 2, i64 %57
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %58, i8* align 16 getelementptr inbounds (<{ i8, [63 x i8] }>, <{ i8, [63 x i8] }>* @_ZN12_GLOBAL__N_111md5_paddingE, i64 0, i32 0), i64 %51, i1 false) #3
  tail call fastcc void @_ZN12_GLOBAL__N_111md5_processEP17CRYPT_md5_contextPKh(%struct.CRYPT_md5_context* %0, i8* %56) #3
  br label %59

59:                                               ; preds = %53, %38, %49
  %60 = phi i8* [ getelementptr inbounds (<{ i8, [63 x i8] }>, <{ i8, [63 x i8] }>* @_ZN12_GLOBAL__N_111md5_paddingE, i64 0, i32 0), %49 ], [ getelementptr inbounds (<{ i8, [63 x i8] }>, <{ i8, [63 x i8] }>* @_ZN12_GLOBAL__N_111md5_paddingE, i64 0, i32 0), %38 ], [ %55, %53 ]
  %61 = phi i64 [ %36, %49 ], [ %36, %38 ], [ %54, %53 ]
  %62 = phi i32 [ %32, %49 ], [ 0, %38 ], [ 0, %53 ]
  %63 = icmp ugt i64 %61, 63
  br i1 %63, label %64, label %72

64:                                               ; preds = %59, %64
  %65 = phi i8* [ %68, %64 ], [ %60, %59 ]
  %66 = phi i64 [ %67, %64 ], [ %61, %59 ]
  %67 = add i64 %66, -64
  %68 = getelementptr inbounds i8, i8* %65, i64 64
  tail call fastcc void @_ZN12_GLOBAL__N_111md5_processEP17CRYPT_md5_contextPKh(%struct.CRYPT_md5_context* %0, i8* %65) #3
  %69 = icmp ugt i64 %67, 63
  br i1 %69, label %64, label %70

70:                                               ; preds = %64
  %71 = and i64 %61, 63
  br label %72

72:                                               ; preds = %70, %59
  %73 = phi i8* [ %60, %59 ], [ %68, %70 ]
  %74 = phi i64 [ %61, %59 ], [ %71, %70 ]
  %75 = icmp eq i64 %74, 0
  br i1 %75, label %79, label %76

76:                                               ; preds = %72
  %77 = zext i32 %62 to i64
  %78 = getelementptr inbounds %struct.CRYPT_md5_context, %struct.CRYPT_md5_context* %0, i64 0, i32 2, i64 %77
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %78, i8* align 1 %73, i64 %74, i1 false) #3
  br label %79

79:                                               ; preds = %76, %72, %2
  %80 = load i32, i32* %13, align 4
  %81 = lshr i32 %80, 3
  %82 = and i32 %81, 63
  %83 = add i32 %80, 64
  store i32 %83, i32* %13, align 4
  %84 = load i32, i32* %22, align 4
  %85 = icmp ult i32 %83, 64
  %86 = zext i1 %85 to i32
  %87 = add i32 %84, %86
  store i32 %87, i32* %22, align 4
  %88 = icmp eq i32 %82, 0
  br i1 %88, label %100, label %89

89:                                               ; preds = %79
  %90 = sub nuw nsw i32 64, %82
  %91 = zext i32 %90 to i64
  %92 = icmp ult i32 %82, 56
  br i1 %92, label %100, label %93

93:                                               ; preds = %89
  %94 = sub nuw nsw i64 8, %91
  %95 = getelementptr inbounds [8 x i8], [8 x i8]* %4, i64 0, i64 %91
  %96 = getelementptr inbounds %struct.CRYPT_md5_context, %struct.CRYPT_md5_context* %0, i64 0, i32 2, i64 0
  %97 = zext i32 %82 to i64
  %98 = getelementptr inbounds %struct.CRYPT_md5_context, %struct.CRYPT_md5_context* %0, i64 0, i32 2, i64 %97
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %98, i8* nonnull align 8 %5, i64 %91, i1 false) #3
  tail call fastcc void @_ZN12_GLOBAL__N_111md5_processEP17CRYPT_md5_contextPKh(%struct.CRYPT_md5_context* %0, i8* %96) #3
  %99 = icmp eq i64 %94, 0
  br i1 %99, label %106, label %100

100:                                              ; preds = %79, %89, %93
  %101 = phi i32 [ 0, %93 ], [ 0, %79 ], [ %82, %89 ]
  %102 = phi i64 [ %94, %93 ], [ 8, %79 ], [ 8, %89 ]
  %103 = phi i8* [ %95, %93 ], [ %5, %79 ], [ %5, %89 ]
  %104 = zext i32 %101 to i64
  %105 = getelementptr inbounds %struct.CRYPT_md5_context, %struct.CRYPT_md5_context* %0, i64 0, i32 2, i64 %104
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %105, i8* align 1 %103, i64 %102, i1 false) #3
  br label %106

106:                                              ; preds = %93, %100
  %107 = getelementptr inbounds %struct.CRYPT_md5_context, %struct.CRYPT_md5_context* %0, i64 0, i32 1, i64 0
  %108 = load i32, i32* %107, align 4
  %109 = trunc i32 %108 to i8
  store i8 %109, i8* %1, align 1
  %110 = load i32, i32* %107, align 4
  %111 = lshr i32 %110, 8
  %112 = trunc i32 %111 to i8
  %113 = getelementptr inbounds i8, i8* %1, i64 1
  store i8 %112, i8* %113, align 1
  %114 = load i32, i32* %107, align 4
  %115 = lshr i32 %114, 16
  %116 = trunc i32 %115 to i8
  %117 = getelementptr inbounds i8, i8* %1, i64 2
  store i8 %116, i8* %117, align 1
  %118 = load i32, i32* %107, align 4
  %119 = lshr i32 %118, 24
  %120 = trunc i32 %119 to i8
  %121 = getelementptr inbounds i8, i8* %1, i64 3
  store i8 %120, i8* %121, align 1
  %122 = getelementptr inbounds %struct.CRYPT_md5_context, %struct.CRYPT_md5_context* %0, i64 0, i32 1, i64 1
  %123 = load i32, i32* %122, align 4
  %124 = trunc i32 %123 to i8
  %125 = getelementptr inbounds i8, i8* %1, i64 4
  store i8 %124, i8* %125, align 1
  %126 = load i32, i32* %122, align 4
  %127 = lshr i32 %126, 8
  %128 = trunc i32 %127 to i8
  %129 = getelementptr inbounds i8, i8* %1, i64 5
  store i8 %128, i8* %129, align 1
  %130 = load i32, i32* %122, align 4
  %131 = lshr i32 %130, 16
  %132 = trunc i32 %131 to i8
  %133 = getelementptr inbounds i8, i8* %1, i64 6
  store i8 %132, i8* %133, align 1
  %134 = load i32, i32* %122, align 4
  %135 = lshr i32 %134, 24
  %136 = trunc i32 %135 to i8
  %137 = getelementptr inbounds i8, i8* %1, i64 7
  store i8 %136, i8* %137, align 1
  %138 = getelementptr inbounds %struct.CRYPT_md5_context, %struct.CRYPT_md5_context* %0, i64 0, i32 1, i64 2
  %139 = load i32, i32* %138, align 4
  %140 = trunc i32 %139 to i8
  %141 = getelementptr inbounds i8, i8* %1, i64 8
  store i8 %140, i8* %141, align 1
  %142 = load i32, i32* %138, align 4
  %143 = lshr i32 %142, 8
  %144 = trunc i32 %143 to i8
  %145 = getelementptr inbounds i8, i8* %1, i64 9
  store i8 %144, i8* %145, align 1
  %146 = load i32, i32* %138, align 4
  %147 = lshr i32 %146, 16
  %148 = trunc i32 %147 to i8
  %149 = getelementptr inbounds i8, i8* %1, i64 10
  store i8 %148, i8* %149, align 1
  %150 = load i32, i32* %138, align 4
  %151 = lshr i32 %150, 24
  %152 = trunc i32 %151 to i8
  %153 = getelementptr inbounds i8, i8* %1, i64 11
  store i8 %152, i8* %153, align 1
  %154 = getelementptr inbounds %struct.CRYPT_md5_context, %struct.CRYPT_md5_context* %0, i64 0, i32 1, i64 3
  %155 = load i32, i32* %154, align 4
  %156 = trunc i32 %155 to i8
  %157 = getelementptr inbounds i8, i8* %1, i64 12
  store i8 %156, i8* %157, align 1
  %158 = load i32, i32* %154, align 4
  %159 = lshr i32 %158, 8
  %160 = trunc i32 %159 to i8
  %161 = getelementptr inbounds i8, i8* %1, i64 13
  store i8 %160, i8* %161, align 1
  %162 = load i32, i32* %154, align 4
  %163 = lshr i32 %162, 16
  %164 = trunc i32 %163 to i8
  %165 = getelementptr inbounds i8, i8* %1, i64 14
  store i8 %164, i8* %165, align 1
  %166 = load i32, i32* %154, align 4
  %167 = lshr i32 %166, 24
  %168 = trunc i32 %167 to i8
  %169 = getelementptr inbounds i8, i8* %1, i64 15
  store i8 %168, i8* %169, align 1
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %5) #3
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_Z17CRYPT_MD5GenerateN6pdfium4spanIKhEEPh(%"class.pdfium::span"* nocapture readonly, i8* nocapture) local_unnamed_addr #0 {
  %3 = alloca %struct.CRYPT_md5_context, align 16
  %4 = bitcast %struct.CRYPT_md5_context* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 88, i8* nonnull %4) #3
  %5 = getelementptr inbounds %struct.CRYPT_md5_context, %struct.CRYPT_md5_context* %3, i64 0, i32 2, i64 0
  %6 = getelementptr inbounds %struct.CRYPT_md5_context, %struct.CRYPT_md5_context* %3, i64 0, i32 2, i64 0
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %6, i8 -86, i64 64, i1 false)
  %7 = bitcast %struct.CRYPT_md5_context* %3 to <4 x i32>*
  store <4 x i32> <i32 0, i32 0, i32 1732584193, i32 -271733879>, <4 x i32>* %7, align 16, !alias.scope !11
  %8 = getelementptr inbounds %struct.CRYPT_md5_context, %struct.CRYPT_md5_context* %3, i64 0, i32 1, i64 2
  store i32 -1732584194, i32* %8, align 8, !alias.scope !11
  %9 = getelementptr inbounds %struct.CRYPT_md5_context, %struct.CRYPT_md5_context* %3, i64 0, i32 1, i64 3
  store i32 271733878, i32* %9, align 4, !alias.scope !11
  %10 = getelementptr inbounds %"class.pdfium::span", %"class.pdfium::span"* %0, i64 0, i32 0, i32 0
  %11 = load i8*, i8** %10, align 8
  %12 = getelementptr inbounds %"class.pdfium::span", %"class.pdfium::span"* %0, i64 0, i32 1
  %13 = load i64, i64* %12, align 8
  %14 = icmp eq i64 %13, 0
  br i1 %14, label %40, label %15

15:                                               ; preds = %2
  %16 = getelementptr inbounds %struct.CRYPT_md5_context, %struct.CRYPT_md5_context* %3, i64 0, i32 0, i64 0
  %17 = getelementptr inbounds %struct.CRYPT_md5_context, %struct.CRYPT_md5_context* %3, i64 0, i32 0, i64 1
  %18 = trunc i64 %13 to i32
  %19 = shl i32 %18, 3
  store i32 %19, i32* %16, align 16
  %20 = lshr i64 %13, 29
  %21 = trunc i64 %20 to i32
  %22 = zext i32 %19 to i64
  %23 = shl i64 %13, 3
  %24 = icmp ugt i64 %23, %22
  %25 = zext i1 %24 to i32
  %26 = add i32 %25, %21
  store i32 %26, i32* %17, align 4
  %27 = icmp ugt i64 %13, 63
  br i1 %27, label %28, label %37

28:                                               ; preds = %15, %28
  %29 = phi i8* [ %32, %28 ], [ %11, %15 ]
  %30 = phi i64 [ %31, %28 ], [ %13, %15 ]
  %31 = add i64 %30, -64
  %32 = getelementptr inbounds i8, i8* %29, i64 64
  call fastcc void @_ZN12_GLOBAL__N_111md5_processEP17CRYPT_md5_contextPKh(%struct.CRYPT_md5_context* nonnull %3, i8* %29) #3
  %33 = icmp ugt i64 %31, 63
  br i1 %33, label %28, label %34

34:                                               ; preds = %28
  %35 = and i64 %13, 63
  %36 = icmp eq i64 %35, 0
  br i1 %36, label %40, label %37

37:                                               ; preds = %15, %34
  %38 = phi i64 [ %35, %34 ], [ %13, %15 ]
  %39 = phi i8* [ %32, %34 ], [ %11, %15 ]
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %5, i8* align 1 %39, i64 %38, i1 false) #3
  br label %40

40:                                               ; preds = %2, %34, %37
  call void @_Z15CRYPT_MD5FinishP17CRYPT_md5_contextPh(%struct.CRYPT_md5_context* nonnull %3, i8* %1)
  call void @llvm.lifetime.end.p0i8(i64 88, i8* nonnull %4) #3
  ret void
}

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { nofree norecurse nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = distinct !{!2, !3}
!3 = !{!"llvm.loop.isvectorized", i32 1}
!4 = distinct !{!4, !3}
!5 = !{!6}
!6 = distinct !{!6, !7, !"_ZNK6pdfium4spanIKhE7subspanEmm: argument 0"}
!7 = distinct !{!7, !"_ZNK6pdfium4spanIKhE7subspanEmm"}
!8 = !{!9}
!9 = distinct !{!9, !10, !"_ZNK6pdfium4spanIKhE7subspanEmm: argument 0"}
!10 = distinct !{!10, !"_ZNK6pdfium4spanIKhE7subspanEmm"}
!11 = !{!12}
!12 = distinct !{!12, !13, !"_Z14CRYPT_MD5Startv: argument 0"}
!13 = distinct !{!13, !"_Z14CRYPT_MD5Startv"}
