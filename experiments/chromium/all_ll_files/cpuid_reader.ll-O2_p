; ModuleID = '../../third_party/crashpad/crashpad/snapshot/x86/cpuid_reader.cc'
source_filename = "../../third_party/crashpad/crashpad/snapshot/x86/cpuid_reader.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%"class.crashpad::internal::CpuidReader" = type { i64, i64, %"class.std::__1::basic_string", i32, i32 }
%"class.std::__1::basic_string" = type { %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" = type { %union.anon }
%union.anon = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" = type { i8*, i64, i64 }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short" = type { [23 x i8], %struct.anon }
%struct.anon = type { i8 }
%"struct.crashpad::CPUContextX86_64::Fxsave" = type { i16, i16, i8, i8, i16, %union.anon.1, i32, i32, [8 x %"union.crashpad::CPUContextX86::X87OrMMXRegister"], [16 x [16 x i8]], [48 x i8], [48 x i8] }
%union.anon.1 = type { %struct.anon.3 }
%struct.anon.3 = type { i64, i64 }
%"union.crashpad::CPUContextX86::X87OrMMXRegister" = type { %struct.anon.4 }
%struct.anon.4 = type { [10 x i8], [6 x i8] }

@_ZN8crashpad8internal11CpuidReaderC1Ev = hidden unnamed_addr alias void (%"class.crashpad::internal::CpuidReader"*), void (%"class.crashpad::internal::CpuidReader"*)* @_ZN8crashpad8internal11CpuidReaderC2Ev
@_ZN8crashpad8internal11CpuidReaderD1Ev = hidden unnamed_addr alias void (%"class.crashpad::internal::CpuidReader"*), void (%"class.crashpad::internal::CpuidReader"*)* @_ZN8crashpad8internal11CpuidReaderD2Ev

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN8crashpad8internal11CpuidReaderC2Ev(%"class.crashpad::internal::CpuidReader"*) unnamed_addr #0 align 2 {
  %2 = alloca [4 x i32], align 16
  %3 = getelementptr inbounds %"class.crashpad::internal::CpuidReader", %"class.crashpad::internal::CpuidReader"* %0, i64 0, i32 0
  %4 = getelementptr inbounds %"class.crashpad::internal::CpuidReader", %"class.crashpad::internal::CpuidReader"* %0, i64 0, i32 1
  %5 = getelementptr inbounds %"class.crashpad::internal::CpuidReader", %"class.crashpad::internal::CpuidReader"* %0, i64 0, i32 2
  %6 = getelementptr inbounds %"class.crashpad::internal::CpuidReader", %"class.crashpad::internal::CpuidReader"* %0, i64 0, i32 3
  %7 = getelementptr inbounds %"class.crashpad::internal::CpuidReader", %"class.crashpad::internal::CpuidReader"* %0, i64 0, i32 4
  %8 = bitcast [4 x i32]* %2 to i8*
  %9 = bitcast %"class.crashpad::internal::CpuidReader"* %0 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %9, i8 0, i64 48, i1 false)
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %8) #7
  %10 = getelementptr inbounds [4 x i32], [4 x i32]* %2, i64 0, i64 0
  %11 = getelementptr inbounds [4 x i32], [4 x i32]* %2, i64 0, i64 1
  %12 = getelementptr inbounds [4 x i32], [4 x i32]* %2, i64 0, i64 2
  %13 = getelementptr inbounds [4 x i32], [4 x i32]* %2, i64 0, i64 3
  %14 = tail call { i32, i32, i32, i32 } asm "cpuid", "={ax},={bx},={cx},={dx},{ax},{bx},{cx},{dx},~{dirflag},~{fpsr},~{flags}"(i32 0, i32 0, i32 0, i32 0) #8, !srcloc !2
  %15 = extractvalue { i32, i32, i32, i32 } %14, 0
  %16 = extractvalue { i32, i32, i32, i32 } %14, 1
  %17 = extractvalue { i32, i32, i32, i32 } %14, 2
  %18 = extractvalue { i32, i32, i32, i32 } %14, 3
  store i32 %15, i32* %10, align 16
  store i32 %16, i32* %11, align 4
  store i32 %17, i32* %12, align 8
  store i32 %18, i32* %13, align 4
  store i32 %15, i32* %6, align 8
  %19 = bitcast i32* %11 to i8*
  %20 = call dereferenceable(24) %"class.std::__1::basic_string"* @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEPKcm(%"class.std::__1::basic_string"* %5, i8* %19, i64 4) #7
  %21 = bitcast i32* %13 to i8*
  %22 = call dereferenceable(24) %"class.std::__1::basic_string"* @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEPKcm(%"class.std::__1::basic_string"* %5, i8* %21, i64 4) #7
  %23 = bitcast i32* %12 to i8*
  %24 = call dereferenceable(24) %"class.std::__1::basic_string"* @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEPKcm(%"class.std::__1::basic_string"* %5, i8* %23, i64 4) #7
  %25 = call { i32, i32, i32, i32 } asm "cpuid", "={ax},={bx},={cx},={dx},{ax},{bx},{cx},{dx},~{dirflag},~{fpsr},~{flags}"(i32 1, i32 0, i32 0, i32 0) #8, !srcloc !2
  %26 = extractvalue { i32, i32, i32, i32 } %25, 0
  %27 = extractvalue { i32, i32, i32, i32 } %25, 2
  %28 = extractvalue { i32, i32, i32, i32 } %25, 3
  store i32 %26, i32* %7, align 4
  %29 = zext i32 %27 to i64
  %30 = shl nuw i64 %29, 32
  %31 = zext i32 %28 to i64
  %32 = or i64 %30, %31
  store i64 %32, i64* %3, align 8
  %33 = call { i32, i32, i32, i32 } asm "cpuid", "={ax},={bx},={cx},={dx},{ax},{bx},{cx},{dx},~{dirflag},~{fpsr},~{flags}"(i32 -2147483647, i32 0, i32 0, i32 0) #8, !srcloc !2
  %34 = extractvalue { i32, i32, i32, i32 } %33, 2
  %35 = extractvalue { i32, i32, i32, i32 } %33, 3
  %36 = zext i32 %34 to i64
  %37 = shl nuw i64 %36, 32
  %38 = zext i32 %35 to i64
  %39 = or i64 %37, %38
  store i64 %39, i64* %4, align 8
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %8) #7
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: nounwind ssp uwtable writeonly
define hidden void @_ZNK8crashpad8internal11CpuidReader5CpuidEPjj(%"class.crashpad::internal::CpuidReader"* nocapture readnone, i32* nocapture, i32) local_unnamed_addr #2 align 2 {
  %4 = getelementptr inbounds i32, i32* %1, i64 1
  %5 = getelementptr inbounds i32, i32* %1, i64 2
  %6 = getelementptr inbounds i32, i32* %1, i64 3
  %7 = tail call { i32, i32, i32, i32 } asm "cpuid", "={ax},={bx},={cx},={dx},{ax},{bx},{cx},{dx},~{dirflag},~{fpsr},~{flags}"(i32 %2, i32 0, i32 0, i32 0) #8, !srcloc !2
  %8 = extractvalue { i32, i32, i32, i32 } %7, 0
  %9 = extractvalue { i32, i32, i32, i32 } %7, 1
  %10 = extractvalue { i32, i32, i32, i32 } %7, 2
  %11 = extractvalue { i32, i32, i32, i32 } %7, 3
  store i32 %8, i32* %1, align 4
  store i32 %9, i32* %4, align 4
  store i32 %10, i32* %5, align 4
  store i32 %11, i32* %6, align 4
  ret void
}

declare dereferenceable(24) %"class.std::__1::basic_string"* @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEPKcm(%"class.std::__1::basic_string"*, i8*, i64) local_unnamed_addr #3

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN8crashpad8internal11CpuidReaderD2Ev(%"class.crashpad::internal::CpuidReader"* nocapture readonly) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.crashpad::internal::CpuidReader", %"class.crashpad::internal::CpuidReader"* %0, i64 0, i32 2
  %3 = bitcast %"class.std::__1::basic_string"* %2 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %4 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %3, i64 0, i32 1, i32 0
  %5 = load i8, i8* %4, align 1
  %6 = icmp slt i8 %5, 0
  br i1 %6, label %7, label %10

7:                                                ; preds = %1
  %8 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %2, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %9 = load i8*, i8** %8, align 8
  tail call void @_ZdlPv(i8* %9) #9
  br label %10

10:                                               ; preds = %1, %7
  ret void
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden i32 @_ZNK8crashpad8internal11CpuidReader8RevisionEv(%"class.crashpad::internal::CpuidReader"* nocapture readonly) local_unnamed_addr #4 align 2 {
  %2 = getelementptr inbounds %"class.crashpad::internal::CpuidReader", %"class.crashpad::internal::CpuidReader"* %0, i64 0, i32 4
  %3 = load i32, i32* %2, align 4
  %4 = and i32 %3, 15
  %5 = lshr i32 %3, 4
  %6 = lshr i32 %3, 8
  %7 = and i32 %6, 15
  %8 = lshr i32 %3, 16
  %9 = trunc i32 %8 to i8
  %10 = and i8 %9, 15
  %11 = lshr i32 %3, 20
  %12 = and i32 %11, 255
  %13 = icmp eq i32 %7, 15
  switch i32 %7, label %14 [
    i32 6, label %15
    i32 15, label %15
  ]

14:                                               ; preds = %1
  br label %15

15:                                               ; preds = %1, %1, %14
  %16 = phi i8 [ 0, %14 ], [ %10, %1 ], [ %10, %1 ]
  %17 = select i1 %13, i32 %12, i32 0
  %18 = add nuw nsw i32 %17, %7
  %19 = shl nuw i8 %16, 4
  %20 = trunc i32 %5 to i8
  %21 = and i8 %20, 15
  %22 = or i8 %19, %21
  %23 = shl nuw nsw i32 %18, 16
  %24 = zext i8 %22 to i32
  %25 = shl nuw nsw i32 %24, 8
  %26 = or i32 %23, %4
  %27 = or i32 %26, %25
  ret i32 %27
}

; Function Attrs: nounwind readonly ssp uwtable
define hidden i32 @_ZNK8crashpad8internal11CpuidReader13Leaf7FeaturesEv(%"class.crashpad::internal::CpuidReader"* nocapture readonly) local_unnamed_addr #5 align 2 {
  %2 = getelementptr inbounds %"class.crashpad::internal::CpuidReader", %"class.crashpad::internal::CpuidReader"* %0, i64 0, i32 3
  %3 = load i32, i32* %2, align 8
  %4 = icmp ult i32 %3, 7
  br i1 %4, label %8, label %5

5:                                                ; preds = %1
  %6 = tail call { i32, i32, i32, i32 } asm "cpuid", "={ax},={bx},={cx},={dx},{ax},{bx},{cx},{dx},~{dirflag},~{fpsr},~{flags}"(i32 7, i32 0, i32 0, i32 0) #8, !srcloc !2
  %7 = extractvalue { i32, i32, i32, i32 } %6, 1
  br label %8

8:                                                ; preds = %1, %5
  %9 = phi i32 [ %7, %5 ], [ 0, %1 ]
  ret i32 %9
}

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZNK8crashpad8internal11CpuidReader11SupportsDAZEv(%"class.crashpad::internal::CpuidReader"* nocapture readonly) local_unnamed_addr #0 align 2 {
  %2 = alloca %"struct.crashpad::CPUContextX86_64::Fxsave", align 16
  %3 = getelementptr inbounds %"class.crashpad::internal::CpuidReader", %"class.crashpad::internal::CpuidReader"* %0, i64 0, i32 0
  %4 = load i64, i64* %3, align 8
  %5 = and i64 %4, 16777216
  %6 = icmp eq i64 %5, 0
  br i1 %6, label %13, label %7

7:                                                ; preds = %1
  %8 = bitcast %"struct.crashpad::CPUContextX86_64::Fxsave"* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 512, i8* nonnull %8) #7
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %8, i8 0, i64 512, i1 false)
  call void asm "fxsave $0", "=*m,~{dirflag},~{fpsr},~{flags}"(%"struct.crashpad::CPUContextX86_64::Fxsave"* nonnull %2) #7, !srcloc !3
  %9 = getelementptr inbounds %"struct.crashpad::CPUContextX86_64::Fxsave", %"struct.crashpad::CPUContextX86_64::Fxsave"* %2, i64 0, i32 7
  %10 = load i32, i32* %9, align 4
  %11 = and i32 %10, 64
  %12 = icmp ne i32 %11, 0
  call void @llvm.lifetime.end.p0i8(i64 512, i8* nonnull %8) #7
  br label %13

13:                                               ; preds = %1, %7
  %14 = phi i1 [ %12, %7 ], [ false, %1 ]
  ret i1 %14
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(i8*) local_unnamed_addr #6

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { nounwind ssp uwtable writeonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { norecurse nounwind readonly ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind readonly ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { nounwind }
attributes #8 = { nounwind readnone }
attributes #9 = { builtin nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{i32 3861}
!3 = !{i32 3602}
