; ModuleID = '../../third_party/libaom/source/libaom/av1/encoder/x86/av1_k_means_avx2.c'
source_filename = "../../third_party/libaom/source/libaom/av1/encoder/x86/av1_k_means_avx2.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

; Function Attrs: nounwind ssp uwtable
define hidden void @av1_calc_indices_dim1_avx2(i32* nocapture readonly, i32* nocapture readonly, i8* nocapture, i32, i32) local_unnamed_addr #0 {
  %6 = alloca [8 x <4 x i64>], align 32
  %7 = bitcast [8 x <4 x i64>]* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 256, i8* nonnull %7) #3
  call void @llvm.memset.p0i8.i64(i8* nonnull align 32 %7, i8 -86, i64 256, i1 false)
  %8 = icmp sgt i32 %3, 0
  br i1 %8, label %9, label %19

9:                                                ; preds = %5
  %10 = icmp sgt i32 %4, 0
  %11 = icmp sgt i32 %4, 1
  %12 = getelementptr inbounds [8 x <4 x i64>], [8 x <4 x i64>]* %6, i64 0, i64 0
  %13 = zext i32 %4 to i64
  %14 = zext i32 %4 to i64
  %15 = and i64 %13, 1
  %16 = icmp eq i32 %4, 1
  %17 = sub nsw i64 %13, %15
  %18 = icmp eq i64 %15, 0
  br label %20

19:                                               ; preds = %64, %5
  call void @llvm.lifetime.end.p0i8(i64 256, i8* nonnull %7) #3
  ret void

20:                                               ; preds = %9, %64
  %21 = phi i32* [ %0, %9 ], [ %76, %64 ]
  %22 = phi i8* [ %2, %9 ], [ %75, %64 ]
  %23 = phi i32 [ 0, %9 ], [ %77, %64 ]
  %24 = bitcast i32* %21 to <8 x i32>*
  %25 = load <8 x i32>, <8 x i32>* %24, align 1
  br i1 %10, label %26, label %38

26:                                               ; preds = %20
  br i1 %16, label %27, label %41

27:                                               ; preds = %41, %26
  %28 = phi i64 [ 0, %26 ], [ %61, %41 ]
  br i1 %18, label %38, label %29

29:                                               ; preds = %27
  %30 = getelementptr inbounds i32, i32* %1, i64 %28
  %31 = load i32, i32* %30, align 4
  %32 = insertelement <8 x i32> undef, i32 %31, i32 0
  %33 = shufflevector <8 x i32> %32, <8 x i32> undef, <8 x i32> zeroinitializer
  %34 = sub <8 x i32> %25, %33
  %35 = mul <8 x i32> %34, %34
  %36 = getelementptr inbounds [8 x <4 x i64>], [8 x <4 x i64>]* %6, i64 0, i64 %28
  %37 = bitcast <4 x i64>* %36 to <8 x i32>*
  store <8 x i32> %35, <8 x i32>* %37, align 32
  br label %38

38:                                               ; preds = %29, %27, %20
  br i1 %11, label %39, label %64

39:                                               ; preds = %38
  %40 = load <4 x i64>, <4 x i64>* %12, align 32
  br label %79

41:                                               ; preds = %26, %41
  %42 = phi i64 [ %61, %41 ], [ 0, %26 ]
  %43 = phi i64 [ %62, %41 ], [ %17, %26 ]
  %44 = getelementptr inbounds i32, i32* %1, i64 %42
  %45 = load i32, i32* %44, align 4
  %46 = insertelement <8 x i32> undef, i32 %45, i32 0
  %47 = shufflevector <8 x i32> %46, <8 x i32> undef, <8 x i32> zeroinitializer
  %48 = sub <8 x i32> %25, %47
  %49 = mul <8 x i32> %48, %48
  %50 = getelementptr inbounds [8 x <4 x i64>], [8 x <4 x i64>]* %6, i64 0, i64 %42
  %51 = bitcast <4 x i64>* %50 to <8 x i32>*
  store <8 x i32> %49, <8 x i32>* %51, align 32
  %52 = or i64 %42, 1
  %53 = getelementptr inbounds i32, i32* %1, i64 %52
  %54 = load i32, i32* %53, align 4
  %55 = insertelement <8 x i32> undef, i32 %54, i32 0
  %56 = shufflevector <8 x i32> %55, <8 x i32> undef, <8 x i32> zeroinitializer
  %57 = sub <8 x i32> %25, %56
  %58 = mul <8 x i32> %57, %57
  %59 = getelementptr inbounds [8 x <4 x i64>], [8 x <4 x i64>]* %6, i64 0, i64 %52
  %60 = bitcast <4 x i64>* %59 to <8 x i32>*
  store <8 x i32> %58, <8 x i32>* %60, align 32
  %61 = add nuw nsw i64 %42, 2
  %62 = add i64 %43, -2
  %63 = icmp eq i64 %62, 0
  br i1 %63, label %27, label %41

64:                                               ; preds = %79, %38
  %65 = phi <4 x i64> [ zeroinitializer, %38 ], [ %100, %79 ]
  %66 = bitcast <4 x i64> %65 to <8 x i32>
  %67 = tail call <16 x i16> @llvm.x86.avx2.packusdw(<8 x i32> %66, <8 x i32> undef) #3
  %68 = bitcast <16 x i16> %67 to <4 x i64>
  %69 = shufflevector <4 x i64> %68, <4 x i64> undef, <4 x i32> <i32 0, i32 2, i32 undef, i32 undef>
  %70 = bitcast <4 x i64> %69 to <16 x i16>
  %71 = tail call <32 x i8> @llvm.x86.avx2.packuswb(<16 x i16> %70, <16 x i16> undef) #3
  %72 = bitcast <32 x i8> %71 to <4 x i64>
  %73 = extractelement <4 x i64> %72, i32 0
  %74 = bitcast i8* %22 to i64*
  store i64 %73, i64* %74, align 1
  %75 = getelementptr inbounds i8, i8* %22, i64 8
  %76 = getelementptr inbounds i32, i32* %21, i64 8
  %77 = add nuw nsw i32 %23, 8
  %78 = icmp slt i32 %77, %3
  br i1 %78, label %20, label %19

79:                                               ; preds = %79, %39
  %80 = phi <4 x i64> [ %40, %39 ], [ %93, %79 ]
  %81 = phi i64 [ 1, %39 ], [ %101, %79 ]
  %82 = phi <4 x i64> [ zeroinitializer, %39 ], [ %100, %79 ]
  %83 = getelementptr inbounds [8 x <4 x i64>], [8 x <4 x i64>]* %6, i64 0, i64 %81
  %84 = load <4 x i64>, <4 x i64>* %83, align 32
  %85 = bitcast <4 x i64> %80 to <8 x i32>
  %86 = bitcast <4 x i64> %84 to <8 x i32>
  %87 = icmp sgt <8 x i32> %85, %86
  %88 = sext <8 x i1> %87 to <8 x i32>
  %89 = bitcast <8 x i32> %88 to <4 x i64>
  %90 = xor <4 x i64> %89, <i64 -1, i64 -1, i64 -1, i64 -1>
  %91 = and <4 x i64> %80, %90
  %92 = and <4 x i64> %84, %89
  %93 = or <4 x i64> %92, %91
  store <4 x i64> %93, <4 x i64>* %12, align 32
  %94 = trunc i64 %81 to i32
  %95 = insertelement <8 x i32> undef, i32 %94, i32 0
  %96 = shufflevector <8 x i32> %95, <8 x i32> undef, <8 x i32> zeroinitializer
  %97 = and <4 x i64> %82, %90
  %98 = and <8 x i32> %96, %88
  %99 = bitcast <8 x i32> %98 to <4 x i64>
  %100 = or <4 x i64> %97, %99
  %101 = add nuw nsw i64 %81, 1
  %102 = icmp eq i64 %101, %14
  br i1 %102, label %64, label %79
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: nounwind ssp uwtable
define hidden void @av1_calc_indices_dim2_avx2(i32* nocapture readonly, i32* nocapture readonly, i8* nocapture, i32, i32) local_unnamed_addr #0 {
  %6 = alloca [8 x <4 x i64>], align 32
  %7 = bitcast [8 x <4 x i64>]* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 256, i8* nonnull %7) #3
  call void @llvm.memset.p0i8.i64(i8* nonnull align 32 %7, i8 -86, i64 256, i1 false)
  %8 = icmp sgt i32 %3, 0
  br i1 %8, label %9, label %15

9:                                                ; preds = %5
  %10 = icmp sgt i32 %4, 0
  %11 = icmp sgt i32 %4, 1
  %12 = getelementptr inbounds [8 x <4 x i64>], [8 x <4 x i64>]* %6, i64 0, i64 0
  %13 = zext i32 %4 to i64
  %14 = zext i32 %4 to i64
  br label %16

15:                                               ; preds = %47, %5
  call void @llvm.lifetime.end.p0i8(i64 256, i8* nonnull %7) #3
  ret void

16:                                               ; preds = %9, %47
  %17 = phi i32* [ %0, %9 ], [ %59, %47 ]
  %18 = phi i8* [ %2, %9 ], [ %58, %47 ]
  %19 = phi i32 [ 0, %9 ], [ %60, %47 ]
  %20 = bitcast i32* %17 to <8 x i32>*
  %21 = load <8 x i32>, <8 x i32>* %20, align 1
  %22 = getelementptr inbounds i32, i32* %17, i64 8
  %23 = bitcast i32* %22 to <8 x i32>*
  %24 = load <8 x i32>, <8 x i32>* %23, align 1
  br i1 %10, label %28, label %25

25:                                               ; preds = %28, %16
  br i1 %11, label %26, label %47

26:                                               ; preds = %25
  %27 = load <4 x i64>, <4 x i64>* %12, align 32
  br label %62

28:                                               ; preds = %16, %28
  %29 = phi i64 [ %45, %28 ], [ 0, %16 ]
  %30 = shl nuw nsw i64 %29, 1
  %31 = getelementptr inbounds i32, i32* %1, i64 %30
  %32 = bitcast i32* %31 to i64*
  %33 = load i64, i64* %32, align 1
  %34 = insertelement <2 x i64> undef, i64 %33, i32 0
  %35 = shufflevector <2 x i64> %34, <2 x i64> undef, <4 x i32> zeroinitializer
  %36 = bitcast <4 x i64> %35 to <8 x i32>
  %37 = sub <8 x i32> %21, %36
  %38 = sub <8 x i32> %24, %36
  %39 = mul <8 x i32> %37, %37
  %40 = mul <8 x i32> %38, %38
  %41 = tail call <8 x i32> @llvm.x86.avx2.phadd.d(<8 x i32> %39, <8 x i32> %40) #3
  %42 = shufflevector <8 x i32> %41, <8 x i32> undef, <8 x i32> <i32 0, i32 1, i32 4, i32 5, i32 2, i32 3, i32 6, i32 7>
  %43 = getelementptr inbounds [8 x <4 x i64>], [8 x <4 x i64>]* %6, i64 0, i64 %29
  %44 = bitcast <4 x i64>* %43 to <8 x i32>*
  store <8 x i32> %42, <8 x i32>* %44, align 32
  %45 = add nuw nsw i64 %29, 1
  %46 = icmp eq i64 %45, %13
  br i1 %46, label %25, label %28

47:                                               ; preds = %62, %25
  %48 = phi <4 x i64> [ zeroinitializer, %25 ], [ %83, %62 ]
  %49 = bitcast <4 x i64> %48 to <8 x i32>
  %50 = tail call <16 x i16> @llvm.x86.avx2.packusdw(<8 x i32> %49, <8 x i32> undef) #3
  %51 = bitcast <16 x i16> %50 to <4 x i64>
  %52 = shufflevector <4 x i64> %51, <4 x i64> undef, <4 x i32> <i32 0, i32 2, i32 undef, i32 undef>
  %53 = bitcast <4 x i64> %52 to <16 x i16>
  %54 = tail call <32 x i8> @llvm.x86.avx2.packuswb(<16 x i16> %53, <16 x i16> undef) #3
  %55 = bitcast <32 x i8> %54 to <4 x i64>
  %56 = extractelement <4 x i64> %55, i32 0
  %57 = bitcast i8* %18 to i64*
  store i64 %56, i64* %57, align 1
  %58 = getelementptr inbounds i8, i8* %18, i64 8
  %59 = getelementptr inbounds i32, i32* %17, i64 16
  %60 = add nuw nsw i32 %19, 8
  %61 = icmp slt i32 %60, %3
  br i1 %61, label %16, label %15

62:                                               ; preds = %62, %26
  %63 = phi <4 x i64> [ %27, %26 ], [ %76, %62 ]
  %64 = phi i64 [ 1, %26 ], [ %84, %62 ]
  %65 = phi <4 x i64> [ zeroinitializer, %26 ], [ %83, %62 ]
  %66 = getelementptr inbounds [8 x <4 x i64>], [8 x <4 x i64>]* %6, i64 0, i64 %64
  %67 = load <4 x i64>, <4 x i64>* %66, align 32
  %68 = bitcast <4 x i64> %63 to <8 x i32>
  %69 = bitcast <4 x i64> %67 to <8 x i32>
  %70 = icmp sgt <8 x i32> %68, %69
  %71 = sext <8 x i1> %70 to <8 x i32>
  %72 = bitcast <8 x i32> %71 to <4 x i64>
  %73 = xor <4 x i64> %72, <i64 -1, i64 -1, i64 -1, i64 -1>
  %74 = and <4 x i64> %63, %73
  %75 = and <4 x i64> %67, %72
  %76 = or <4 x i64> %75, %74
  store <4 x i64> %76, <4 x i64>* %12, align 32
  %77 = trunc i64 %64 to i32
  %78 = insertelement <8 x i32> undef, i32 %77, i32 0
  %79 = shufflevector <8 x i32> %78, <8 x i32> undef, <8 x i32> zeroinitializer
  %80 = and <4 x i64> %65, %73
  %81 = and <8 x i32> %79, %71
  %82 = bitcast <8 x i32> %81 to <4 x i64>
  %83 = or <4 x i64> %80, %82
  %84 = add nuw nsw i64 %64, 1
  %85 = icmp eq i64 %84, %14
  br i1 %85, label %47, label %62
}

; Function Attrs: nounwind readnone
declare <16 x i16> @llvm.x86.avx2.packusdw(<8 x i32>, <8 x i32>) #2

; Function Attrs: nounwind readnone
declare <32 x i8> @llvm.x86.avx2.packuswb(<16 x i16>, <16 x i16>) #2

; Function Attrs: nounwind readnone
declare <8 x i32> @llvm.x86.avx2.phadd.d(<8 x i32>, <8 x i32>) #2

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="256" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+avx,+avx2,+cx8,+fxsr,+mmx,+popcnt,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+ssse3,+x87,+xsave" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { nounwind readnone }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
