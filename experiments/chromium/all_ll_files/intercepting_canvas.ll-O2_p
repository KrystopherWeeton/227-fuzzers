; ModuleID = '../../third_party/blink/renderer/platform/graphics/intercepting_canvas.cc'
source_filename = "../../third_party/blink/renderer/platform/graphics/intercepting_canvas.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"class.blink::InterceptingCanvasBase" = type { %class.SkCanvas, i32, i32 }
%class.SkCanvas = type { i32 (...)**, %class.SkDeque, %"class.SkCanvas::MCRec"*, %class.sk_sp, [384 x i64], %class.sk_sp.0, %class.SkSurfaceProps, i32, %"class.std::__1::unique_ptr", %class.SkSurface_Base*, %struct.SkIRect, %struct.SkRect, %"class.std::__1::unique_ptr.2" }
%class.SkDeque = type { i8*, i8*, %"struct.SkDeque::Block"*, %"struct.SkDeque::Block"*, i64, i8*, i32, i32 }
%"struct.SkDeque::Block" = type opaque
%"class.SkCanvas::MCRec" = type opaque
%class.sk_sp = type { %class.SkMarkerStack* }
%class.SkMarkerStack = type opaque
%class.sk_sp.0 = type { %class.SkBaseDevice* }
%class.SkBaseDevice = type opaque
%class.SkSurfaceProps = type { i32, i32 }
%"class.std::__1::unique_ptr" = type { %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %class.SkRasterHandleAllocator* }
%class.SkRasterHandleAllocator = type { i32 (...)** }
%class.SkSurface_Base = type opaque
%struct.SkIRect = type { i32, i32, i32, i32 }
%struct.SkRect = type { float, float, float, float }
%"class.std::__1::unique_ptr.2" = type { %"class.std::__1::__compressed_pair.3" }
%"class.std::__1::__compressed_pair.3" = type { %"struct.std::__1::__compressed_pair_elem.4" }
%"struct.std::__1::__compressed_pair_elem.4" = type { %class.SkGlyphRunBuilder* }
%class.SkGlyphRunBuilder = type opaque
%class.SkPicture = type <{ %class.SkRefCnt.base, i32, %"struct.std::__1::atomic.9", [7 x i8] }>
%class.SkRefCnt.base = type { %class.SkRefCntBase.base }
%class.SkRefCntBase.base = type <{ i32 (...)**, %"struct.std::__1::atomic" }>
%"struct.std::__1::atomic" = type { %"struct.std::__1::__atomic_base" }
%"struct.std::__1::__atomic_base" = type { %"struct.std::__1::__atomic_base.8" }
%"struct.std::__1::__atomic_base.8" = type { %"struct.std::__1::__cxx_atomic_impl" }
%"struct.std::__1::__cxx_atomic_impl" = type { %"struct.std::__1::__cxx_atomic_base_impl" }
%"struct.std::__1::__cxx_atomic_base_impl" = type { i32 }
%"struct.std::__1::atomic.9" = type { %"struct.std::__1::__atomic_base.10" }
%"struct.std::__1::__atomic_base.10" = type { %"struct.std::__1::__cxx_atomic_impl.11" }
%"struct.std::__1::__cxx_atomic_impl.11" = type { %"struct.std::__1::__cxx_atomic_base_impl.12" }
%"struct.std::__1::__cxx_atomic_base_impl.12" = type { i8 }
%class.SkMatrix = type { [9 x float], i32 }
%class.SkPaint = type <{ %class.sk_sp.13, %class.sk_sp.14, %class.sk_sp.15, %class.sk_sp.16, %class.sk_sp.17, %struct.SkRGBA4f, float, float, %union.anon, [4 x i8] }>
%class.sk_sp.13 = type { %class.SkPathEffect* }
%class.SkPathEffect = type { %class.SkFlattenable.base, [4 x i8] }
%class.SkFlattenable.base = type { %class.SkRefCnt.base }
%class.sk_sp.14 = type { %class.SkShader* }
%class.SkShader = type { %class.SkFlattenable.base, [4 x i8] }
%class.sk_sp.15 = type { %class.SkMaskFilter* }
%class.SkMaskFilter = type { %class.SkFlattenable.base, [4 x i8] }
%class.sk_sp.16 = type { %class.SkColorFilter* }
%class.SkColorFilter = type { %class.SkFlattenable.base, [4 x i8] }
%class.sk_sp.17 = type { %class.SkImageFilter* }
%class.SkImageFilter = type opaque
%struct.SkRGBA4f = type { float, float, float, float }
%union.anon = type { %struct.anon }
%struct.anon = type { i32 }
%"class.SkPicture::AbortCallback" = type { i32 (...)** }

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5blink22InterceptingCanvasBase17UnrollDrawPictureEPK9SkPicturePK8SkMatrixPK7SkPaintPNS1_13AbortCallbackE(%"class.blink::InterceptingCanvasBase"*, %class.SkPicture*, %class.SkMatrix*, %class.SkPaint*, %"class.SkPicture::AbortCallback"*) local_unnamed_addr #0 align 2 {
  %6 = alloca { <2 x float>, <2 x float> }, align 8
  %7 = bitcast { <2 x float>, <2 x float> }* %6 to %struct.SkRect*
  %8 = getelementptr inbounds %"class.blink::InterceptingCanvasBase", %"class.blink::InterceptingCanvasBase"* %0, i64 0, i32 0
  %9 = tail call i32 @_ZNK8SkCanvas12getSaveCountEv(%class.SkCanvas* %8) #3
  %10 = icmp eq %class.SkPaint* %3, null
  br i1 %10, label %25, label %11

11:                                               ; preds = %5
  %12 = bitcast { <2 x float>, <2 x float> }* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %12) #3
  %13 = bitcast %class.SkPicture* %1 to { <2 x float>, <2 x float> } (%class.SkPicture*)***
  %14 = load { <2 x float>, <2 x float> } (%class.SkPicture*)**, { <2 x float>, <2 x float> } (%class.SkPicture*)*** %13, align 8
  %15 = getelementptr inbounds { <2 x float>, <2 x float> } (%class.SkPicture*)*, { <2 x float>, <2 x float> } (%class.SkPicture*)** %14, i64 4
  %16 = load { <2 x float>, <2 x float> } (%class.SkPicture*)*, { <2 x float>, <2 x float> } (%class.SkPicture*)** %15, align 8
  %17 = tail call { <2 x float>, <2 x float> } %16(%class.SkPicture* %1) #3
  %18 = getelementptr inbounds { <2 x float>, <2 x float> }, { <2 x float>, <2 x float> }* %6, i64 0, i32 0
  %19 = extractvalue { <2 x float>, <2 x float> } %17, 0
  store <2 x float> %19, <2 x float>* %18, align 8
  %20 = getelementptr inbounds { <2 x float>, <2 x float> }, { <2 x float>, <2 x float> }* %6, i64 0, i32 1
  %21 = extractvalue { <2 x float>, <2 x float> } %17, 1
  store <2 x float> %21, <2 x float>* %20, align 8
  %22 = icmp eq %class.SkMatrix* %2, null
  br i1 %22, label %29, label %23

23:                                               ; preds = %11
  %24 = call zeroext i1 @_ZNK8SkMatrix7mapRectEP6SkRectRKS0_22SkApplyPerspectiveClip(%class.SkMatrix* nonnull %2, %struct.SkRect* nonnull %7, %struct.SkRect* nonnull dereferenceable(16) %7, i32 1) #3
  br label %29

25:                                               ; preds = %5
  %26 = icmp eq %class.SkMatrix* %2, null
  br i1 %26, label %33, label %27

27:                                               ; preds = %25
  %28 = tail call i32 @_ZN8SkCanvas4saveEv(%class.SkCanvas* %8) #3
  br label %32

29:                                               ; preds = %23, %11
  %30 = call i32 @_ZN8SkCanvas9saveLayerEPK6SkRectPK7SkPaint(%class.SkCanvas* %8, %struct.SkRect* nonnull %7, %class.SkPaint* nonnull %3) #3
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %12) #3
  %31 = icmp eq %class.SkMatrix* %2, null
  br i1 %31, label %33, label %32

32:                                               ; preds = %27, %29
  call void @_ZN8SkCanvas6concatERK8SkMatrix(%class.SkCanvas* %8, %class.SkMatrix* nonnull dereferenceable(40) %2) #3
  br label %33

33:                                               ; preds = %25, %29, %32
  %34 = bitcast %class.SkPicture* %1 to void (%class.SkPicture*, %class.SkCanvas*, %"class.SkPicture::AbortCallback"*)***
  %35 = load void (%class.SkPicture*, %class.SkCanvas*, %"class.SkPicture::AbortCallback"*)**, void (%class.SkPicture*, %class.SkCanvas*, %"class.SkPicture::AbortCallback"*)*** %34, align 8
  %36 = getelementptr inbounds void (%class.SkPicture*, %class.SkCanvas*, %"class.SkPicture::AbortCallback"*)*, void (%class.SkPicture*, %class.SkCanvas*, %"class.SkPicture::AbortCallback"*)** %35, i64 3
  %37 = load void (%class.SkPicture*, %class.SkCanvas*, %"class.SkPicture::AbortCallback"*)*, void (%class.SkPicture*, %class.SkCanvas*, %"class.SkPicture::AbortCallback"*)** %36, align 8
  call void %37(%class.SkPicture* %1, %class.SkCanvas* %8, %"class.SkPicture::AbortCallback"* %4) #3
  call void @_ZN8SkCanvas14restoreToCountEi(%class.SkCanvas* %8, i32 %9) #3
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

declare i32 @_ZNK8SkCanvas12getSaveCountEv(%class.SkCanvas*) local_unnamed_addr #2

declare i32 @_ZN8SkCanvas9saveLayerEPK6SkRectPK7SkPaint(%class.SkCanvas*, %struct.SkRect*, %class.SkPaint*) local_unnamed_addr #2

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

declare i32 @_ZN8SkCanvas4saveEv(%class.SkCanvas*) local_unnamed_addr #2

declare void @_ZN8SkCanvas6concatERK8SkMatrix(%class.SkCanvas*, %class.SkMatrix* dereferenceable(40)) local_unnamed_addr #2

declare void @_ZN8SkCanvas14restoreToCountEi(%class.SkCanvas*, i32) local_unnamed_addr #2

declare zeroext i1 @_ZNK8SkMatrix7mapRectEP6SkRectRKS0_22SkApplyPerspectiveClip(%class.SkMatrix*, %struct.SkRect*, %struct.SkRect* dereferenceable(16), i32) local_unnamed_addr #2

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
