; ModuleID = '../../third_party/angle/src/compiler/translator/tree_ops/RemoveUnreferencedVariables.cpp'
source_filename = "../../third_party/angle/src/compiler/translator/tree_ops/RemoveUnreferencedVariables.cpp"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"class.sh::ImmutableString" = type { i8*, i64 }
%"class.sh::TCompiler" = type opaque
%"class.sh::TIntermBlock" = type <{ %"class.sh::TIntermNode", %"class.sh::TIntermAggregateBase", %"class.sh::TVector", i8, [7 x i8] }>
%"class.sh::TIntermNode" = type { i32 (...)**, %"struct.sh::TSourceLoc" }
%"struct.sh::TSourceLoc" = type { i32, i32, i32, i32 }
%"class.sh::TIntermAggregateBase" = type { i32 (...)** }
%"class.sh::TVector" = type { %"class.std::__1::vector" }
%"class.std::__1::vector" = type { %"class.std::__1::__vector_base" }
%"class.std::__1::__vector_base" = type { %"class.sh::TIntermNode"**, %"class.sh::TIntermNode"**, %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %"class.sh::TIntermNode"** }
%"class.sh::TSymbolTable" = type { %"class.sh::TSymbolTableBase", %"class.std::__1::vector.1", %"class.std::__1::vector.6", i8, i32, i32, i32, %struct.ShBuiltInResources, %"class.std::__1::map", %"class.sh::TVariable"* }
%"class.sh::TSymbolTableBase" = type { %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"* }
%"class.sh::TSymbol" = type <{ %"class.sh::ImmutableString", %"class.sh::TSymbolUniqueId", i8, i8, i8, i8 }>
%"class.sh::TSymbolUniqueId" = type { i32 }
%"class.std::__1::vector.1" = type { %"class.std::__1::__vector_base.2" }
%"class.std::__1::__vector_base.2" = type { %"class.std::__1::unique_ptr"*, %"class.std::__1::unique_ptr"*, %"class.std::__1::__compressed_pair.3" }
%"class.std::__1::unique_ptr" = type opaque
%"class.std::__1::__compressed_pair.3" = type { %"struct.std::__1::__compressed_pair_elem.4" }
%"struct.std::__1::__compressed_pair_elem.4" = type { %"class.std::__1::unique_ptr"* }
%"class.std::__1::vector.6" = type { %"class.std::__1::__vector_base.7" }
%"class.std::__1::__vector_base.7" = type { %"class.std::__1::unique_ptr.8"*, %"class.std::__1::unique_ptr.8"*, %"class.std::__1::__compressed_pair.9" }
%"class.std::__1::unique_ptr.8" = type opaque
%"class.std::__1::__compressed_pair.9" = type { %"struct.std::__1::__compressed_pair_elem.10" }
%"struct.std::__1::__compressed_pair_elem.10" = type { %"class.std::__1::unique_ptr.8"* }
%struct.ShBuiltInResources = type { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i64 (i8*, i64)*, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, %"struct.std::__1::array", %"struct.std::__1::array", i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, float, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }
%"struct.std::__1::array" = type { [3 x i32] }
%"class.std::__1::map" = type { %"class.std::__1::__tree" }
%"class.std::__1::__tree" = type { %"class.std::__1::__tree_end_node"*, %"class.std::__1::__compressed_pair.14", %"class.std::__1::__compressed_pair.19" }
%"class.std::__1::__tree_end_node" = type { %"class.std::__1::__tree_node_base"* }
%"class.std::__1::__tree_node_base" = type <{ %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_end_node"*, i8, [7 x i8] }>
%"class.std::__1::__compressed_pair.14" = type { %"struct.std::__1::__compressed_pair_elem.15" }
%"struct.std::__1::__compressed_pair_elem.15" = type { %"class.std::__1::__tree_end_node" }
%"class.std::__1::__compressed_pair.19" = type { %"struct.std::__1::__compressed_pair_elem.20" }
%"struct.std::__1::__compressed_pair_elem.20" = type { i64 }
%"class.sh::TVariable" = type { %"class.sh::TSymbol.base", %"class.sh::TType"*, %"class.sh::TConstantUnion"* }
%"class.sh::TSymbol.base" = type <{ %"class.sh::ImmutableString", %"class.sh::TSymbolUniqueId", i8, i8, i8 }>
%"class.sh::TType" = type { i32, i32, i32, i8, i8, %"struct.sh::TMemoryQualifier", i8, %"struct.sh::TLayoutQualifier", i8, i8, %"class.sh::TSpan", %"class.sh::TVector.22"*, %"class.sh::TInterfaceBlock"*, %"class.sh::TStructure"*, i8, i64, i8* }
%"struct.sh::TMemoryQualifier" = type { i8, i8, i8, i8, i8 }
%"struct.sh::TLayoutQualifier" = type <{ i32, i32, i32, i32, %"struct.sh::WorkGroupSize", i32, i32, i32, i32, i8, i8, [2 x i8], i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i8, [3 x i8] }>
%"struct.sh::WorkGroupSize" = type { [3 x i32] }
%"class.sh::TSpan" = type { i32*, i64 }
%"class.sh::TVector.22" = type opaque
%"class.sh::TInterfaceBlock" = type { %"class.sh::TSymbol.base", %"class.sh::TFieldListCollection", i32, i32 }
%"class.sh::TFieldListCollection" = type { %"class.sh::TVector.23"*, i64, i32, %"class.std::__1::basic_string" }
%"class.sh::TVector.23" = type { %"class.std::__1::vector.24" }
%"class.std::__1::vector.24" = type { %"class.std::__1::__vector_base.25" }
%"class.std::__1::__vector_base.25" = type { %"class.sh::TField"**, %"class.sh::TField"**, %"class.std::__1::__compressed_pair.26" }
%"class.sh::TField" = type <{ %"class.sh::TType"*, %"class.sh::ImmutableString", %"struct.sh::TSourceLoc", i8, [7 x i8] }>
%"class.std::__1::__compressed_pair.26" = type { %"struct.std::__1::__compressed_pair_elem.27" }
%"struct.std::__1::__compressed_pair_elem.27" = type { %"class.sh::TField"** }
%"class.std::__1::basic_string" = type { %"class.std::__1::__compressed_pair.31" }
%"class.std::__1::__compressed_pair.31" = type { %"struct.std::__1::__compressed_pair_elem.32" }
%"struct.std::__1::__compressed_pair_elem.32" = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, pool_allocator<char> >::__rep" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, pool_allocator<char> >::__rep" = type { %union.anon }
%union.anon = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, pool_allocator<char> >::__long" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, pool_allocator<char> >::__long" = type { i8*, i64, i64 }
%"class.sh::TStructure" = type <{ %"class.sh::TSymbol.base", i8, %"class.sh::TFieldListCollection", i8, [7 x i8] }>
%"class.sh::TConstantUnion" = type { %union.anon.36, i32 }
%union.anon.36 = type { i32 }
%"class.sh::(anonymous namespace)::CollectVariableRefCountsTraverser" = type { %"class.sh::TIntermTraverser", %"class.absl::flat_hash_map", %"class.absl::flat_hash_map" }
%"class.sh::TIntermTraverser" = type { i32 (...)**, i8, i8, i8, i32, i32, i8, %"class.std::__1::vector.37", %"class.sh::TSymbolTable"*, %"class.std::__1::vector.44", %"class.std::__1::vector.51", %"class.sh::TVector", %"class.std::__1::vector.58" }
%"class.std::__1::vector.37" = type { %"class.std::__1::__vector_base.38" }
%"class.std::__1::__vector_base.38" = type { %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry"*, %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry"*, %"class.std::__1::__compressed_pair.39" }
%"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry" = type { %"class.sh::TIntermAggregateBase"*, %"class.sh::TIntermNode"*, %"class.sh::TVector" }
%"class.std::__1::__compressed_pair.39" = type { %"struct.std::__1::__compressed_pair_elem.40" }
%"struct.std::__1::__compressed_pair_elem.40" = type { %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry"* }
%"class.std::__1::vector.44" = type { %"class.std::__1::__vector_base.45" }
%"class.std::__1::__vector_base.45" = type { %"struct.sh::TIntermTraverser::NodeInsertMultipleEntry"*, %"struct.sh::TIntermTraverser::NodeInsertMultipleEntry"*, %"class.std::__1::__compressed_pair.46" }
%"struct.sh::TIntermTraverser::NodeInsertMultipleEntry" = type { %"class.sh::TIntermBlock"*, i64, %"class.sh::TVector", %"class.sh::TVector" }
%"class.std::__1::__compressed_pair.46" = type { %"struct.std::__1::__compressed_pair_elem.47" }
%"struct.std::__1::__compressed_pair_elem.47" = type { %"struct.sh::TIntermTraverser::NodeInsertMultipleEntry"* }
%"class.std::__1::vector.51" = type { %"class.std::__1::__vector_base.52" }
%"class.std::__1::__vector_base.52" = type { %"struct.sh::TIntermTraverser::NodeUpdateEntry"*, %"struct.sh::TIntermTraverser::NodeUpdateEntry"*, %"class.std::__1::__compressed_pair.53" }
%"struct.sh::TIntermTraverser::NodeUpdateEntry" = type <{ %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"*, i8, [7 x i8] }>
%"class.std::__1::__compressed_pair.53" = type { %"struct.std::__1::__compressed_pair_elem.54" }
%"struct.std::__1::__compressed_pair_elem.54" = type { %"struct.sh::TIntermTraverser::NodeUpdateEntry"* }
%"class.std::__1::vector.58" = type { %"class.std::__1::__vector_base.59" }
%"class.std::__1::__vector_base.59" = type { %"struct.sh::TIntermTraverser::ParentBlock"*, %"struct.sh::TIntermTraverser::ParentBlock"*, %"class.std::__1::__compressed_pair.60" }
%"struct.sh::TIntermTraverser::ParentBlock" = type { %"class.sh::TIntermBlock"*, i64 }
%"class.std::__1::__compressed_pair.60" = type { %"struct.std::__1::__compressed_pair_elem.61" }
%"struct.std::__1::__compressed_pair_elem.61" = type { %"struct.sh::TIntermTraverser::ParentBlock"* }
%"class.absl::flat_hash_map" = type { %"class.absl::container_internal::raw_hash_map" }
%"class.absl::container_internal::raw_hash_map" = type { %"class.absl::container_internal::raw_hash_set" }
%"class.absl::container_internal::raw_hash_set" = type { i8*, %"union.absl::container_internal::map_slot_type"*, i64, i64, %"class.absl::container_internal::CompressedTuple" }
%"union.absl::container_internal::map_slot_type" = type { %"struct.std::__1::pair" }
%"struct.std::__1::pair" = type { i32, i32 }
%"class.absl::container_internal::CompressedTuple" = type { %"struct.absl::container_internal::internal_compressed_tuple::CompressedTupleImpl" }
%"struct.absl::container_internal::internal_compressed_tuple::CompressedTupleImpl" = type { %"struct.absl::container_internal::internal_compressed_tuple::Storage" }
%"struct.absl::container_internal::internal_compressed_tuple::Storage" = type { i64 }
%"class.sh::(anonymous namespace)::RemoveUnreferencedVariablesTraverser" = type <{ %"class.sh::TIntermTraverser", %"class.absl::flat_hash_map"*, %"class.absl::flat_hash_map"*, i8, [7 x i8] }>
%"class.sh::TIntermSymbol" = type { %"class.sh::TIntermTyped", %"class.sh::TVariable"* }
%"class.sh::TIntermTyped" = type { %"class.sh::TIntermNode" }
%"class.sh::TIntermConstantUnion" = type { %"class.sh::TIntermExpression", %"class.sh::TConstantUnion"* }
%"class.sh::TIntermExpression" = type { %"class.sh::TIntermTyped", %"class.sh::TType" }
%"class.sh::TIntermSwizzle" = type <{ %"class.sh::TIntermExpression", %"class.sh::TIntermTyped"*, %"class.sh::TVector.72", i8, [7 x i8] }>
%"class.sh::TVector.72" = type { %"class.std::__1::vector.73" }
%"class.std::__1::vector.73" = type { %"class.std::__1::__vector_base.74" }
%"class.std::__1::__vector_base.74" = type { i32*, i32*, %"class.std::__1::__compressed_pair.75" }
%"class.std::__1::__compressed_pair.75" = type { %"struct.std::__1::__compressed_pair_elem.76" }
%"struct.std::__1::__compressed_pair_elem.76" = type { i32* }
%"class.sh::TIntermBinary" = type <{ %"class.sh::TIntermOperator.base", [7 x i8], %"class.sh::TIntermTyped"*, %"class.sh::TIntermTyped"*, i8, [7 x i8] }>
%"class.sh::TIntermOperator.base" = type <{ %"class.sh::TIntermExpression", i8 }>
%"class.sh::TIntermUnary" = type { %"class.sh::TIntermOperator.base", %"class.sh::TIntermTyped"*, i8, %"class.sh::TFunction"* }
%"class.sh::TFunction" = type <{ %"class.sh::TSymbol.base", i8, %"class.sh::TVector.80"*, %"class.sh::TVariable"**, i64, %"class.sh::TType"*, %"class.sh::ImmutableString", i8, i8, i8, i8, [4 x i8] }>
%"class.sh::TVector.80" = type opaque
%"class.sh::TIntermTernary" = type { %"class.sh::TIntermExpression", %"class.sh::TIntermTyped"*, %"class.sh::TIntermTyped"*, %"class.sh::TIntermTyped"* }
%"class.sh::TIntermIfElse" = type { %"class.sh::TIntermNode", %"class.sh::TIntermTyped"*, %"class.sh::TIntermBlock"*, %"class.sh::TIntermBlock"* }
%"class.sh::TIntermSwitch" = type { %"class.sh::TIntermNode", %"class.sh::TIntermTyped"*, %"class.sh::TIntermBlock"* }
%"class.sh::TIntermCase" = type { %"class.sh::TIntermNode", %"class.sh::TIntermTyped"* }
%"class.sh::TIntermFunctionPrototype" = type { %"class.sh::TIntermTyped", %"class.sh::TFunction"* }
%"class.sh::TIntermFunctionDefinition" = type { %"class.sh::TIntermNode", %"class.sh::TIntermFunctionPrototype"*, %"class.sh::TIntermBlock"* }
%"class.sh::TIntermAggregate" = type { %"class.sh::TIntermOperator.base", %"class.sh::TIntermAggregateBase", %"class.sh::TVector", i8, i8, %"class.sh::TFunction"* }
%"class.sh::TIntermGlobalQualifierDeclaration" = type <{ %"class.sh::TIntermNode", %"class.sh::TIntermSymbol"*, i8, [7 x i8] }>
%"class.sh::TIntermDeclaration" = type { %"class.sh::TIntermNode", %"class.sh::TIntermAggregateBase", %"class.sh::TVector" }
%"class.sh::TIntermLoop" = type { %"class.sh::TIntermNode", i32, %"class.sh::TIntermNode"*, %"class.sh::TIntermTyped"*, %"class.sh::TIntermTyped"*, %"class.sh::TIntermBlock"* }
%"class.sh::TIntermBranch" = type { %"class.sh::TIntermNode", i8, %"class.sh::TIntermTyped"* }
%"class.sh::TIntermPreprocessorDirective" = type { %"class.sh::TIntermNode", i32, %"class.sh::ImmutableString" }
%"class.angle::PoolAllocator" = type <{ i64, i64, i64, i64, i64, %"struct.angle::PoolAllocator::Header"*, %"struct.angle::PoolAllocator::Header"*, %"class.std::__1::vector.102", i32, [4 x i8], i64, i8, [7 x i8] }>
%"struct.angle::PoolAllocator::Header" = type { %"struct.angle::PoolAllocator::Header"*, i64 }
%"class.std::__1::vector.102" = type { %"class.std::__1::__vector_base.103" }
%"class.std::__1::__vector_base.103" = type { %"struct.angle::PoolAllocator::AllocState"*, %"struct.angle::PoolAllocator::AllocState"*, %"class.std::__1::__compressed_pair.104" }
%"struct.angle::PoolAllocator::AllocState" = type { i64, %"struct.angle::PoolAllocator::Header"* }
%"class.std::__1::__compressed_pair.104" = type { %"struct.std::__1::__compressed_pair_elem.105" }
%"struct.std::__1::__compressed_pair_elem.105" = type { %"struct.angle::PoolAllocator::AllocState"* }
%"class.std::__1::__vector_base_common" = type { i8 }

$_ZN2sh16TIntermTraverser18visitConstantUnionEPNS_20TIntermConstantUnionE = comdat any

$_ZN2sh16TIntermTraverser12visitSwizzleENS_5VisitEPNS_14TIntermSwizzleE = comdat any

$_ZN2sh16TIntermTraverser11visitBinaryENS_5VisitEPNS_13TIntermBinaryE = comdat any

$_ZN2sh16TIntermTraverser10visitUnaryENS_5VisitEPNS_12TIntermUnaryE = comdat any

$_ZN2sh16TIntermTraverser12visitTernaryENS_5VisitEPNS_14TIntermTernaryE = comdat any

$_ZN2sh16TIntermTraverser11visitIfElseENS_5VisitEPNS_13TIntermIfElseE = comdat any

$_ZN2sh16TIntermTraverser11visitSwitchENS_5VisitEPNS_13TIntermSwitchE = comdat any

$_ZN2sh16TIntermTraverser9visitCaseENS_5VisitEPNS_11TIntermCaseE = comdat any

$_ZN2sh16TIntermTraverser23visitFunctionDefinitionENS_5VisitEPNS_25TIntermFunctionDefinitionE = comdat any

$_ZN2sh16TIntermTraverser10visitBlockENS_5VisitEPNS_12TIntermBlockE = comdat any

$_ZN2sh16TIntermTraverser31visitGlobalQualifierDeclarationENS_5VisitEPNS_33TIntermGlobalQualifierDeclarationE = comdat any

$_ZN2sh16TIntermTraverser16visitDeclarationENS_5VisitEPNS_18TIntermDeclarationE = comdat any

$_ZN2sh16TIntermTraverser9visitLoopENS_5VisitEPNS_11TIntermLoopE = comdat any

$_ZN2sh16TIntermTraverser11visitBranchENS_5VisitEPNS_13TIntermBranchE = comdat any

$_ZN2sh16TIntermTraverser26visitPreprocessorDirectiveEPNS_28TIntermPreprocessorDirectiveE = comdat any

$_ZN4absl18container_internal12raw_hash_mapINS0_17FlatHashMapPolicyIijEENS_13hash_internal4HashIiEENSt3__18equal_toIiEENS7_9allocatorINS7_4pairIKijEEEEEixIiS3_LPi0EEEDTclsrT0_5valueclL_ZNS7_9addressofISD_EEPT_RSK_EclL_ZNS7_7declvalIRSD_EEDTclsr3std3__1E9__declvalISK_ELi0EEEvEEEEEOi = comdat any

$_ZN4absl18container_internal12raw_hash_setINS0_17FlatHashMapPolicyIijEENS_13hash_internal4HashIiEENSt3__18equal_toIiEENS7_9allocatorINS7_4pairIKijEEEEE14prepare_insertEm = comdat any

$_ZN4absl18container_internal12raw_hash_setINS0_17FlatHashMapPolicyIijEENS_13hash_internal4HashIiEENSt3__18equal_toIiEENS7_9allocatorINS7_4pairIKijEEEEE6resizeEm = comdat any

$_ZN4absl18container_internal12raw_hash_setINS0_17FlatHashMapPolicyIijEENS_13hash_internal4HashIiEENSt3__18equal_toIiEENS7_9allocatorINS7_4pairIKijEEEEE27drop_deletes_without_resizeEv = comdat any

$_ZN2sh16TIntermTraverser22visitFunctionPrototypeEPNS_24TIntermFunctionPrototypeE = comdat any

$_ZN4absl18container_internal12raw_hash_mapINS0_17FlatHashMapPolicyIijEENS_13hash_internal4HashIiEENSt3__18equal_toIiEENS7_9allocatorINS7_4pairIKijEEEEEixIiS3_EEDTclsrT0_5valueclL_ZNS7_9addressofISD_EEPT_RSJ_EclL_ZNS7_7declvalIRSD_EEDTclsr3std3__1E9__declvalISJ_ELi0EEEvEEEEERSC_ = comdat any

$_ZNSt3__16vectorIN2sh16TIntermTraverser28NodeReplaceWithMultipleEntryENS_9allocatorIS3_EEE24__emplace_back_slow_pathIJPNS1_12TIntermBlockERPNS1_18TIntermDeclarationENS1_7TVectorIPNS1_11TIntermNodeEEEEEEvDpOT_ = comdat any

$_ZN2sh16TIntermTraverser14incrementDepthEPNS_11TIntermNodeE = comdat any

$_ZZN4absl18container_internal10EmptyGroupEvE11empty_group = comdat any

@_ZTVN2sh12_GLOBAL__N_133CollectVariableRefCountsTraverserE = internal unnamed_addr constant { [28 x i8*] } { [28 x i8*] [i8* null, i8* null, i8* bitcast (void (%"class.sh::(anonymous namespace)::CollectVariableRefCountsTraverser"*)* @_ZN2sh12_GLOBAL__N_133CollectVariableRefCountsTraverserD2Ev to i8*), i8* bitcast (void (%"class.sh::(anonymous namespace)::CollectVariableRefCountsTraverser"*)* @_ZN2sh12_GLOBAL__N_133CollectVariableRefCountsTraverserD0Ev to i8*), i8* bitcast (void (%"class.sh::(anonymous namespace)::CollectVariableRefCountsTraverser"*, %"class.sh::TIntermSymbol"*)* @_ZN2sh12_GLOBAL__N_133CollectVariableRefCountsTraverser11visitSymbolEPNS_13TIntermSymbolE to i8*), i8* bitcast (void (%"class.sh::TIntermTraverser"*, %"class.sh::TIntermConstantUnion"*)* @_ZN2sh16TIntermTraverser18visitConstantUnionEPNS_20TIntermConstantUnionE to i8*), i8* bitcast (i1 (%"class.sh::TIntermTraverser"*, i32, %"class.sh::TIntermSwizzle"*)* @_ZN2sh16TIntermTraverser12visitSwizzleENS_5VisitEPNS_14TIntermSwizzleE to i8*), i8* bitcast (i1 (%"class.sh::TIntermTraverser"*, i32, %"class.sh::TIntermBinary"*)* @_ZN2sh16TIntermTraverser11visitBinaryENS_5VisitEPNS_13TIntermBinaryE to i8*), i8* bitcast (i1 (%"class.sh::TIntermTraverser"*, i32, %"class.sh::TIntermUnary"*)* @_ZN2sh16TIntermTraverser10visitUnaryENS_5VisitEPNS_12TIntermUnaryE to i8*), i8* bitcast (i1 (%"class.sh::TIntermTraverser"*, i32, %"class.sh::TIntermTernary"*)* @_ZN2sh16TIntermTraverser12visitTernaryENS_5VisitEPNS_14TIntermTernaryE to i8*), i8* bitcast (i1 (%"class.sh::TIntermTraverser"*, i32, %"class.sh::TIntermIfElse"*)* @_ZN2sh16TIntermTraverser11visitIfElseENS_5VisitEPNS_13TIntermIfElseE to i8*), i8* bitcast (i1 (%"class.sh::TIntermTraverser"*, i32, %"class.sh::TIntermSwitch"*)* @_ZN2sh16TIntermTraverser11visitSwitchENS_5VisitEPNS_13TIntermSwitchE to i8*), i8* bitcast (i1 (%"class.sh::TIntermTraverser"*, i32, %"class.sh::TIntermCase"*)* @_ZN2sh16TIntermTraverser9visitCaseENS_5VisitEPNS_11TIntermCaseE to i8*), i8* bitcast (void (%"class.sh::(anonymous namespace)::CollectVariableRefCountsTraverser"*, %"class.sh::TIntermFunctionPrototype"*)* @_ZN2sh12_GLOBAL__N_133CollectVariableRefCountsTraverser22visitFunctionPrototypeEPNS_24TIntermFunctionPrototypeE to i8*), i8* bitcast (i1 (%"class.sh::TIntermTraverser"*, i32, %"class.sh::TIntermFunctionDefinition"*)* @_ZN2sh16TIntermTraverser23visitFunctionDefinitionENS_5VisitEPNS_25TIntermFunctionDefinitionE to i8*), i8* bitcast (i1 (%"class.sh::(anonymous namespace)::CollectVariableRefCountsTraverser"*, i32, %"class.sh::TIntermAggregate"*)* @_ZN2sh12_GLOBAL__N_133CollectVariableRefCountsTraverser14visitAggregateENS_5VisitEPNS_16TIntermAggregateE to i8*), i8* bitcast (i1 (%"class.sh::TIntermTraverser"*, i32, %"class.sh::TIntermBlock"*)* @_ZN2sh16TIntermTraverser10visitBlockENS_5VisitEPNS_12TIntermBlockE to i8*), i8* bitcast (i1 (%"class.sh::TIntermTraverser"*, i32, %"class.sh::TIntermGlobalQualifierDeclaration"*)* @_ZN2sh16TIntermTraverser31visitGlobalQualifierDeclarationENS_5VisitEPNS_33TIntermGlobalQualifierDeclarationE to i8*), i8* bitcast (i1 (%"class.sh::TIntermTraverser"*, i32, %"class.sh::TIntermDeclaration"*)* @_ZN2sh16TIntermTraverser16visitDeclarationENS_5VisitEPNS_18TIntermDeclarationE to i8*), i8* bitcast (i1 (%"class.sh::TIntermTraverser"*, i32, %"class.sh::TIntermLoop"*)* @_ZN2sh16TIntermTraverser9visitLoopENS_5VisitEPNS_11TIntermLoopE to i8*), i8* bitcast (i1 (%"class.sh::TIntermTraverser"*, i32, %"class.sh::TIntermBranch"*)* @_ZN2sh16TIntermTraverser11visitBranchENS_5VisitEPNS_13TIntermBranchE to i8*), i8* bitcast (void (%"class.sh::TIntermTraverser"*, %"class.sh::TIntermPreprocessorDirective"*)* @_ZN2sh16TIntermTraverser26visitPreprocessorDirectiveEPNS_28TIntermPreprocessorDirectiveE to i8*), i8* bitcast (void (%"class.sh::TIntermTraverser"*, %"class.sh::TIntermBinary"*)* @_ZN2sh16TIntermTraverser14traverseBinaryEPNS_13TIntermBinaryE to i8*), i8* bitcast (void (%"class.sh::TIntermTraverser"*, %"class.sh::TIntermUnary"*)* @_ZN2sh16TIntermTraverser13traverseUnaryEPNS_12TIntermUnaryE to i8*), i8* bitcast (void (%"class.sh::TIntermTraverser"*, %"class.sh::TIntermFunctionDefinition"*)* @_ZN2sh16TIntermTraverser26traverseFunctionDefinitionEPNS_25TIntermFunctionDefinitionE to i8*), i8* bitcast (void (%"class.sh::TIntermTraverser"*, %"class.sh::TIntermAggregate"*)* @_ZN2sh16TIntermTraverser17traverseAggregateEPNS_16TIntermAggregateE to i8*), i8* bitcast (void (%"class.sh::TIntermTraverser"*, %"class.sh::TIntermBlock"*)* @_ZN2sh16TIntermTraverser13traverseBlockEPNS_12TIntermBlockE to i8*), i8* bitcast (void (%"class.sh::TIntermTraverser"*, %"class.sh::TIntermLoop"*)* @_ZN2sh16TIntermTraverser12traverseLoopEPNS_11TIntermLoopE to i8*)] }, align 8
@_ZZN4absl18container_internal10EmptyGroupEvE11empty_group = linkonce_odr hidden constant [16 x i8] c"\FF\80\80\80\80\80\80\80\80\80\80\80\80\80\80\80", comdat, align 16
@_ZN4absl13hash_internal15MixingHashState5kSeedE = external local_unnamed_addr constant i8*, align 8
@_ZTVN2sh12_GLOBAL__N_136RemoveUnreferencedVariablesTraverserE = internal unnamed_addr constant { [28 x i8*] } { [28 x i8*] [i8* null, i8* null, i8* bitcast (void (%"class.sh::TIntermTraverser"*)* @_ZN2sh16TIntermTraverserD2Ev to i8*), i8* bitcast (void (%"class.sh::(anonymous namespace)::RemoveUnreferencedVariablesTraverser"*)* @_ZN2sh12_GLOBAL__N_136RemoveUnreferencedVariablesTraverserD0Ev to i8*), i8* bitcast (void (%"class.sh::(anonymous namespace)::RemoveUnreferencedVariablesTraverser"*, %"class.sh::TIntermSymbol"*)* @_ZN2sh12_GLOBAL__N_136RemoveUnreferencedVariablesTraverser11visitSymbolEPNS_13TIntermSymbolE to i8*), i8* bitcast (void (%"class.sh::TIntermTraverser"*, %"class.sh::TIntermConstantUnion"*)* @_ZN2sh16TIntermTraverser18visitConstantUnionEPNS_20TIntermConstantUnionE to i8*), i8* bitcast (i1 (%"class.sh::TIntermTraverser"*, i32, %"class.sh::TIntermSwizzle"*)* @_ZN2sh16TIntermTraverser12visitSwizzleENS_5VisitEPNS_14TIntermSwizzleE to i8*), i8* bitcast (i1 (%"class.sh::TIntermTraverser"*, i32, %"class.sh::TIntermBinary"*)* @_ZN2sh16TIntermTraverser11visitBinaryENS_5VisitEPNS_13TIntermBinaryE to i8*), i8* bitcast (i1 (%"class.sh::TIntermTraverser"*, i32, %"class.sh::TIntermUnary"*)* @_ZN2sh16TIntermTraverser10visitUnaryENS_5VisitEPNS_12TIntermUnaryE to i8*), i8* bitcast (i1 (%"class.sh::TIntermTraverser"*, i32, %"class.sh::TIntermTernary"*)* @_ZN2sh16TIntermTraverser12visitTernaryENS_5VisitEPNS_14TIntermTernaryE to i8*), i8* bitcast (i1 (%"class.sh::TIntermTraverser"*, i32, %"class.sh::TIntermIfElse"*)* @_ZN2sh16TIntermTraverser11visitIfElseENS_5VisitEPNS_13TIntermIfElseE to i8*), i8* bitcast (i1 (%"class.sh::TIntermTraverser"*, i32, %"class.sh::TIntermSwitch"*)* @_ZN2sh16TIntermTraverser11visitSwitchENS_5VisitEPNS_13TIntermSwitchE to i8*), i8* bitcast (i1 (%"class.sh::TIntermTraverser"*, i32, %"class.sh::TIntermCase"*)* @_ZN2sh16TIntermTraverser9visitCaseENS_5VisitEPNS_11TIntermCaseE to i8*), i8* bitcast (void (%"class.sh::TIntermTraverser"*, %"class.sh::TIntermFunctionPrototype"*)* @_ZN2sh16TIntermTraverser22visitFunctionPrototypeEPNS_24TIntermFunctionPrototypeE to i8*), i8* bitcast (i1 (%"class.sh::TIntermTraverser"*, i32, %"class.sh::TIntermFunctionDefinition"*)* @_ZN2sh16TIntermTraverser23visitFunctionDefinitionENS_5VisitEPNS_25TIntermFunctionDefinitionE to i8*), i8* bitcast (i1 (%"class.sh::(anonymous namespace)::RemoveUnreferencedVariablesTraverser"*, i32, %"class.sh::TIntermAggregate"*)* @_ZN2sh12_GLOBAL__N_136RemoveUnreferencedVariablesTraverser14visitAggregateENS_5VisitEPNS_16TIntermAggregateE to i8*), i8* bitcast (i1 (%"class.sh::TIntermTraverser"*, i32, %"class.sh::TIntermBlock"*)* @_ZN2sh16TIntermTraverser10visitBlockENS_5VisitEPNS_12TIntermBlockE to i8*), i8* bitcast (i1 (%"class.sh::TIntermTraverser"*, i32, %"class.sh::TIntermGlobalQualifierDeclaration"*)* @_ZN2sh16TIntermTraverser31visitGlobalQualifierDeclarationENS_5VisitEPNS_33TIntermGlobalQualifierDeclarationE to i8*), i8* bitcast (i1 (%"class.sh::(anonymous namespace)::RemoveUnreferencedVariablesTraverser"*, i32, %"class.sh::TIntermDeclaration"*)* @_ZN2sh12_GLOBAL__N_136RemoveUnreferencedVariablesTraverser16visitDeclarationENS_5VisitEPNS_18TIntermDeclarationE to i8*), i8* bitcast (i1 (%"class.sh::TIntermTraverser"*, i32, %"class.sh::TIntermLoop"*)* @_ZN2sh16TIntermTraverser9visitLoopENS_5VisitEPNS_11TIntermLoopE to i8*), i8* bitcast (i1 (%"class.sh::TIntermTraverser"*, i32, %"class.sh::TIntermBranch"*)* @_ZN2sh16TIntermTraverser11visitBranchENS_5VisitEPNS_13TIntermBranchE to i8*), i8* bitcast (void (%"class.sh::TIntermTraverser"*, %"class.sh::TIntermPreprocessorDirective"*)* @_ZN2sh16TIntermTraverser26visitPreprocessorDirectiveEPNS_28TIntermPreprocessorDirectiveE to i8*), i8* bitcast (void (%"class.sh::TIntermTraverser"*, %"class.sh::TIntermBinary"*)* @_ZN2sh16TIntermTraverser14traverseBinaryEPNS_13TIntermBinaryE to i8*), i8* bitcast (void (%"class.sh::TIntermTraverser"*, %"class.sh::TIntermUnary"*)* @_ZN2sh16TIntermTraverser13traverseUnaryEPNS_12TIntermUnaryE to i8*), i8* bitcast (void (%"class.sh::TIntermTraverser"*, %"class.sh::TIntermFunctionDefinition"*)* @_ZN2sh16TIntermTraverser26traverseFunctionDefinitionEPNS_25TIntermFunctionDefinitionE to i8*), i8* bitcast (void (%"class.sh::TIntermTraverser"*, %"class.sh::TIntermAggregate"*)* @_ZN2sh16TIntermTraverser17traverseAggregateEPNS_16TIntermAggregateE to i8*), i8* bitcast (void (%"class.sh::(anonymous namespace)::RemoveUnreferencedVariablesTraverser"*, %"class.sh::TIntermBlock"*)* @_ZN2sh12_GLOBAL__N_136RemoveUnreferencedVariablesTraverser13traverseBlockEPNS_12TIntermBlockE to i8*), i8* bitcast (void (%"class.sh::(anonymous namespace)::RemoveUnreferencedVariablesTraverser"*, %"class.sh::TIntermLoop"*)* @_ZN2sh12_GLOBAL__N_136RemoveUnreferencedVariablesTraverser12traverseLoopEPNS_11TIntermLoopE to i8*)] }, align 8
@_ZN2shL21kEmptyImmutableStringE = internal constant %"class.sh::ImmutableString" { i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.2, i32 0, i32 0), i64 0 }, align 8
@.str.2 = private unnamed_addr constant [1 x i8] zeroinitializer, align 1

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZN2sh27RemoveUnreferencedVariablesEPNS_9TCompilerEPNS_12TIntermBlockEPNS_12TSymbolTableE(%"class.sh::TCompiler"*, %"class.sh::TIntermBlock"*, %"class.sh::TSymbolTable"*) local_unnamed_addr #0 {
  %4 = alloca %"class.sh::(anonymous namespace)::CollectVariableRefCountsTraverser", align 8
  %5 = alloca %"class.sh::(anonymous namespace)::RemoveUnreferencedVariablesTraverser", align 8
  %6 = bitcast %"class.sh::(anonymous namespace)::CollectVariableRefCountsTraverser"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 232, i8* nonnull %6) #6
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %6, i8 -86, i64 232, i1 false)
  %7 = getelementptr inbounds %"class.sh::(anonymous namespace)::CollectVariableRefCountsTraverser", %"class.sh::(anonymous namespace)::CollectVariableRefCountsTraverser"* %4, i64 0, i32 0
  call void @_ZN2sh16TIntermTraverserC2EbbbPNS_12TSymbolTableE(%"class.sh::TIntermTraverser"* nonnull %7, i1 zeroext true, i1 zeroext false, i1 zeroext false, %"class.sh::TSymbolTable"* null) #6
  %8 = getelementptr inbounds %"class.sh::(anonymous namespace)::CollectVariableRefCountsTraverser", %"class.sh::(anonymous namespace)::CollectVariableRefCountsTraverser"* %4, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [28 x i8*] }, { [28 x i8*] }* @_ZTVN2sh12_GLOBAL__N_133CollectVariableRefCountsTraverserE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %8, align 8
  %9 = getelementptr inbounds %"class.sh::(anonymous namespace)::CollectVariableRefCountsTraverser", %"class.sh::(anonymous namespace)::CollectVariableRefCountsTraverser"* %4, i64 0, i32 1, i32 0, i32 0, i32 0
  store i8* getelementptr inbounds ([16 x i8], [16 x i8]* @_ZZN4absl18container_internal10EmptyGroupEvE11empty_group, i64 0, i64 0), i8** %9, align 8
  %10 = getelementptr inbounds %"class.sh::(anonymous namespace)::CollectVariableRefCountsTraverser", %"class.sh::(anonymous namespace)::CollectVariableRefCountsTraverser"* %4, i64 0, i32 1, i32 0, i32 0, i32 1
  %11 = bitcast %"union.absl::container_internal::map_slot_type"** %10 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %11, i8 0, i64 32, i1 false) #6
  %12 = getelementptr inbounds %"class.sh::(anonymous namespace)::CollectVariableRefCountsTraverser", %"class.sh::(anonymous namespace)::CollectVariableRefCountsTraverser"* %4, i64 0, i32 2, i32 0, i32 0, i32 0
  store i8* getelementptr inbounds ([16 x i8], [16 x i8]* @_ZZN4absl18container_internal10EmptyGroupEvE11empty_group, i64 0, i64 0), i8** %12, align 8
  %13 = getelementptr inbounds %"class.sh::(anonymous namespace)::CollectVariableRefCountsTraverser", %"class.sh::(anonymous namespace)::CollectVariableRefCountsTraverser"* %4, i64 0, i32 2, i32 0, i32 0, i32 1
  %14 = bitcast %"union.absl::container_internal::map_slot_type"** %13 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %14, i8 0, i64 32, i1 false) #6
  call void @_ZN2sh12TIntermBlock8traverseEPNS_16TIntermTraverserE(%"class.sh::TIntermBlock"* %1, %"class.sh::TIntermTraverser"* nonnull %7) #6
  %15 = bitcast %"class.sh::(anonymous namespace)::RemoveUnreferencedVariablesTraverser"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 176, i8* nonnull %15) #6
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %15, i8 -86, i64 176, i1 false)
  %16 = getelementptr inbounds %"class.sh::(anonymous namespace)::CollectVariableRefCountsTraverser", %"class.sh::(anonymous namespace)::CollectVariableRefCountsTraverser"* %4, i64 0, i32 1
  %17 = getelementptr inbounds %"class.sh::(anonymous namespace)::CollectVariableRefCountsTraverser", %"class.sh::(anonymous namespace)::CollectVariableRefCountsTraverser"* %4, i64 0, i32 2
  %18 = getelementptr inbounds %"class.sh::(anonymous namespace)::RemoveUnreferencedVariablesTraverser", %"class.sh::(anonymous namespace)::RemoveUnreferencedVariablesTraverser"* %5, i64 0, i32 0
  call void @_ZN2sh16TIntermTraverserC2EbbbPNS_12TSymbolTableE(%"class.sh::TIntermTraverser"* nonnull %18, i1 zeroext true, i1 zeroext false, i1 zeroext true, %"class.sh::TSymbolTable"* %2) #6
  %19 = getelementptr inbounds %"class.sh::(anonymous namespace)::RemoveUnreferencedVariablesTraverser", %"class.sh::(anonymous namespace)::RemoveUnreferencedVariablesTraverser"* %5, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [28 x i8*] }, { [28 x i8*] }* @_ZTVN2sh12_GLOBAL__N_136RemoveUnreferencedVariablesTraverserE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %19, align 8
  %20 = getelementptr inbounds %"class.sh::(anonymous namespace)::RemoveUnreferencedVariablesTraverser", %"class.sh::(anonymous namespace)::RemoveUnreferencedVariablesTraverser"* %5, i64 0, i32 1
  store %"class.absl::flat_hash_map"* %16, %"class.absl::flat_hash_map"** %20, align 8
  %21 = getelementptr inbounds %"class.sh::(anonymous namespace)::RemoveUnreferencedVariablesTraverser", %"class.sh::(anonymous namespace)::RemoveUnreferencedVariablesTraverser"* %5, i64 0, i32 2
  store %"class.absl::flat_hash_map"* %17, %"class.absl::flat_hash_map"** %21, align 8
  %22 = getelementptr inbounds %"class.sh::(anonymous namespace)::RemoveUnreferencedVariablesTraverser", %"class.sh::(anonymous namespace)::RemoveUnreferencedVariablesTraverser"* %5, i64 0, i32 3
  store i8 0, i8* %22, align 8
  call void @_ZN2sh12TIntermBlock8traverseEPNS_16TIntermTraverserE(%"class.sh::TIntermBlock"* %1, %"class.sh::TIntermTraverser"* nonnull %18) #6
  %23 = getelementptr inbounds %"class.sh::TIntermBlock", %"class.sh::TIntermBlock"* %1, i64 0, i32 0
  %24 = call zeroext i1 @_ZN2sh16TIntermTraverser10updateTreeEPNS_9TCompilerEPNS_11TIntermNodeE(%"class.sh::TIntermTraverser"* nonnull %18, %"class.sh::TCompiler"* %0, %"class.sh::TIntermNode"* %23) #6
  call void @_ZN2sh16TIntermTraverserD2Ev(%"class.sh::TIntermTraverser"* nonnull %18) #6
  call void @llvm.lifetime.end.p0i8(i64 176, i8* nonnull %15) #6
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [28 x i8*] }, { [28 x i8*] }* @_ZTVN2sh12_GLOBAL__N_133CollectVariableRefCountsTraverserE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %8, align 8
  %25 = getelementptr inbounds %"class.sh::(anonymous namespace)::CollectVariableRefCountsTraverser", %"class.sh::(anonymous namespace)::CollectVariableRefCountsTraverser"* %4, i64 0, i32 2, i32 0, i32 0, i32 3
  %26 = load i64, i64* %25, align 8
  %27 = icmp eq i64 %26, 0
  br i1 %27, label %30, label %28

28:                                               ; preds = %3
  %29 = load i8*, i8** %12, align 8
  call void @_ZdlPv(i8* %29) #13
  store i8* getelementptr inbounds ([16 x i8], [16 x i8]* @_ZZN4absl18container_internal10EmptyGroupEvE11empty_group, i64 0, i64 0), i8** %12, align 8
  call void @llvm.memset.p0i8.i64(i8* align 8 %14, i8 0, i64 32, i1 false) #6
  br label %30

30:                                               ; preds = %28, %3
  %31 = getelementptr inbounds %"class.sh::(anonymous namespace)::CollectVariableRefCountsTraverser", %"class.sh::(anonymous namespace)::CollectVariableRefCountsTraverser"* %4, i64 0, i32 1, i32 0, i32 0, i32 3
  %32 = load i64, i64* %31, align 8
  %33 = icmp eq i64 %32, 0
  br i1 %33, label %36, label %34

34:                                               ; preds = %30
  %35 = load i8*, i8** %9, align 8
  call void @_ZdlPv(i8* %35) #13
  store i8* getelementptr inbounds ([16 x i8], [16 x i8]* @_ZZN4absl18container_internal10EmptyGroupEvE11empty_group, i64 0, i64 0), i8** %9, align 8
  call void @llvm.memset.p0i8.i64(i8* align 8 %11, i8 0, i64 32, i1 false) #6
  br label %36

36:                                               ; preds = %30, %34
  call void @_ZN2sh16TIntermTraverserD2Ev(%"class.sh::TIntermTraverser"* nonnull %7) #6
  call void @llvm.lifetime.end.p0i8(i64 232, i8* nonnull %6) #6
  ret i1 %24
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

declare void @_ZN2sh12TIntermBlock8traverseEPNS_16TIntermTraverserE(%"class.sh::TIntermBlock"*, %"class.sh::TIntermTraverser"*) unnamed_addr #2

declare zeroext i1 @_ZN2sh16TIntermTraverser10updateTreeEPNS_9TCompilerEPNS_11TIntermNodeE(%"class.sh::TIntermTraverser"*, %"class.sh::TCompiler"*, %"class.sh::TIntermNode"*) local_unnamed_addr #2

; Function Attrs: nounwind
declare void @_ZN2sh16TIntermTraverserD2Ev(%"class.sh::TIntermTraverser"*) unnamed_addr #3

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: inlinehint nounwind ssp uwtable
define internal void @_ZN2sh12_GLOBAL__N_133CollectVariableRefCountsTraverserD2Ev(%"class.sh::(anonymous namespace)::CollectVariableRefCountsTraverser"*) unnamed_addr #4 align 2 {
  %2 = getelementptr inbounds %"class.sh::(anonymous namespace)::CollectVariableRefCountsTraverser", %"class.sh::(anonymous namespace)::CollectVariableRefCountsTraverser"* %0, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [28 x i8*] }, { [28 x i8*] }* @_ZTVN2sh12_GLOBAL__N_133CollectVariableRefCountsTraverserE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %2, align 8
  %3 = getelementptr inbounds %"class.sh::(anonymous namespace)::CollectVariableRefCountsTraverser", %"class.sh::(anonymous namespace)::CollectVariableRefCountsTraverser"* %0, i64 0, i32 2, i32 0, i32 0, i32 3
  %4 = load i64, i64* %3, align 8
  %5 = icmp eq i64 %4, 0
  br i1 %5, label %11, label %6

6:                                                ; preds = %1
  %7 = getelementptr inbounds %"class.sh::(anonymous namespace)::CollectVariableRefCountsTraverser", %"class.sh::(anonymous namespace)::CollectVariableRefCountsTraverser"* %0, i64 0, i32 2, i32 0, i32 0, i32 1
  %8 = getelementptr inbounds %"class.sh::(anonymous namespace)::CollectVariableRefCountsTraverser", %"class.sh::(anonymous namespace)::CollectVariableRefCountsTraverser"* %0, i64 0, i32 2, i32 0, i32 0, i32 0
  %9 = load i8*, i8** %8, align 8
  tail call void @_ZdlPv(i8* %9) #13
  store i8* getelementptr inbounds ([16 x i8], [16 x i8]* @_ZZN4absl18container_internal10EmptyGroupEvE11empty_group, i64 0, i64 0), i8** %8, align 8
  %10 = bitcast %"union.absl::container_internal::map_slot_type"** %7 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %10, i8 0, i64 32, i1 false) #6
  br label %11

11:                                               ; preds = %1, %6
  %12 = getelementptr inbounds %"class.sh::(anonymous namespace)::CollectVariableRefCountsTraverser", %"class.sh::(anonymous namespace)::CollectVariableRefCountsTraverser"* %0, i64 0, i32 1, i32 0, i32 0, i32 3
  %13 = load i64, i64* %12, align 8
  %14 = icmp eq i64 %13, 0
  br i1 %14, label %20, label %15

15:                                               ; preds = %11
  %16 = getelementptr inbounds %"class.sh::(anonymous namespace)::CollectVariableRefCountsTraverser", %"class.sh::(anonymous namespace)::CollectVariableRefCountsTraverser"* %0, i64 0, i32 1, i32 0, i32 0, i32 1
  %17 = getelementptr inbounds %"class.sh::(anonymous namespace)::CollectVariableRefCountsTraverser", %"class.sh::(anonymous namespace)::CollectVariableRefCountsTraverser"* %0, i64 0, i32 1, i32 0, i32 0, i32 0
  %18 = load i8*, i8** %17, align 8
  tail call void @_ZdlPv(i8* %18) #13
  store i8* getelementptr inbounds ([16 x i8], [16 x i8]* @_ZZN4absl18container_internal10EmptyGroupEvE11empty_group, i64 0, i64 0), i8** %17, align 8
  %19 = bitcast %"union.absl::container_internal::map_slot_type"** %16 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %19, i8 0, i64 32, i1 false) #6
  br label %20

20:                                               ; preds = %11, %15
  %21 = getelementptr inbounds %"class.sh::(anonymous namespace)::CollectVariableRefCountsTraverser", %"class.sh::(anonymous namespace)::CollectVariableRefCountsTraverser"* %0, i64 0, i32 0
  tail call void @_ZN2sh16TIntermTraverserD2Ev(%"class.sh::TIntermTraverser"* %21) #6
  ret void
}

declare void @_ZN2sh16TIntermTraverserC2EbbbPNS_12TSymbolTableE(%"class.sh::TIntermTraverser"*, i1 zeroext, i1 zeroext, i1 zeroext, %"class.sh::TSymbolTable"*) unnamed_addr #2

; Function Attrs: inlinehint nounwind ssp uwtable
define internal void @_ZN2sh12_GLOBAL__N_133CollectVariableRefCountsTraverserD0Ev(%"class.sh::(anonymous namespace)::CollectVariableRefCountsTraverser"*) unnamed_addr #4 align 2 {
  %2 = getelementptr inbounds %"class.sh::(anonymous namespace)::CollectVariableRefCountsTraverser", %"class.sh::(anonymous namespace)::CollectVariableRefCountsTraverser"* %0, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [28 x i8*] }, { [28 x i8*] }* @_ZTVN2sh12_GLOBAL__N_133CollectVariableRefCountsTraverserE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %2, align 8
  %3 = getelementptr inbounds %"class.sh::(anonymous namespace)::CollectVariableRefCountsTraverser", %"class.sh::(anonymous namespace)::CollectVariableRefCountsTraverser"* %0, i64 0, i32 2, i32 0, i32 0, i32 3
  %4 = load i64, i64* %3, align 8
  %5 = icmp eq i64 %4, 0
  br i1 %5, label %11, label %6

6:                                                ; preds = %1
  %7 = getelementptr inbounds %"class.sh::(anonymous namespace)::CollectVariableRefCountsTraverser", %"class.sh::(anonymous namespace)::CollectVariableRefCountsTraverser"* %0, i64 0, i32 2, i32 0, i32 0, i32 1
  %8 = getelementptr inbounds %"class.sh::(anonymous namespace)::CollectVariableRefCountsTraverser", %"class.sh::(anonymous namespace)::CollectVariableRefCountsTraverser"* %0, i64 0, i32 2, i32 0, i32 0, i32 0
  %9 = load i8*, i8** %8, align 8
  tail call void @_ZdlPv(i8* %9) #13
  store i8* getelementptr inbounds ([16 x i8], [16 x i8]* @_ZZN4absl18container_internal10EmptyGroupEvE11empty_group, i64 0, i64 0), i8** %8, align 8
  %10 = bitcast %"union.absl::container_internal::map_slot_type"** %7 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %10, i8 0, i64 32, i1 false) #6
  br label %11

11:                                               ; preds = %6, %1
  %12 = getelementptr inbounds %"class.sh::(anonymous namespace)::CollectVariableRefCountsTraverser", %"class.sh::(anonymous namespace)::CollectVariableRefCountsTraverser"* %0, i64 0, i32 1, i32 0, i32 0, i32 3
  %13 = load i64, i64* %12, align 8
  %14 = icmp eq i64 %13, 0
  br i1 %14, label %20, label %15

15:                                               ; preds = %11
  %16 = getelementptr inbounds %"class.sh::(anonymous namespace)::CollectVariableRefCountsTraverser", %"class.sh::(anonymous namespace)::CollectVariableRefCountsTraverser"* %0, i64 0, i32 1, i32 0, i32 0, i32 1
  %17 = getelementptr inbounds %"class.sh::(anonymous namespace)::CollectVariableRefCountsTraverser", %"class.sh::(anonymous namespace)::CollectVariableRefCountsTraverser"* %0, i64 0, i32 1, i32 0, i32 0, i32 0
  %18 = load i8*, i8** %17, align 8
  tail call void @_ZdlPv(i8* %18) #13
  store i8* getelementptr inbounds ([16 x i8], [16 x i8]* @_ZZN4absl18container_internal10EmptyGroupEvE11empty_group, i64 0, i64 0), i8** %17, align 8
  %19 = bitcast %"union.absl::container_internal::map_slot_type"** %16 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %19, i8 0, i64 32, i1 false) #6
  br label %20

20:                                               ; preds = %11, %15
  %21 = getelementptr inbounds %"class.sh::(anonymous namespace)::CollectVariableRefCountsTraverser", %"class.sh::(anonymous namespace)::CollectVariableRefCountsTraverser"* %0, i64 0, i32 0
  tail call void @_ZN2sh16TIntermTraverserD2Ev(%"class.sh::TIntermTraverser"* %21) #6
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN2sh12_GLOBAL__N_133CollectVariableRefCountsTraverser11visitSymbolEPNS_13TIntermSymbolE(%"class.sh::(anonymous namespace)::CollectVariableRefCountsTraverser"*, %"class.sh::TIntermSymbol"*) unnamed_addr #5 align 2 {
  %3 = alloca i32, align 4
  %4 = bitcast %"class.sh::TIntermSymbol"* %1 to %"class.sh::TType"* (%"class.sh::TIntermSymbol"*)***
  %5 = load %"class.sh::TType"* (%"class.sh::TIntermSymbol"*)**, %"class.sh::TType"* (%"class.sh::TIntermSymbol"*)*** %4, align 8
  %6 = getelementptr inbounds %"class.sh::TType"* (%"class.sh::TIntermSymbol"*)*, %"class.sh::TType"* (%"class.sh::TIntermSymbol"*)** %5, i64 31
  %7 = load %"class.sh::TType"* (%"class.sh::TIntermSymbol"*)*, %"class.sh::TType"* (%"class.sh::TIntermSymbol"*)** %6, align 8
  %8 = tail call dereferenceable(184) %"class.sh::TType"* %7(%"class.sh::TIntermSymbol"* %1) #6
  tail call fastcc void @_ZN2sh12_GLOBAL__N_133CollectVariableRefCountsTraverser27incrementStructTypeRefCountERKNS_5TTypeE(%"class.sh::(anonymous namespace)::CollectVariableRefCountsTraverser"* %0, %"class.sh::TType"* dereferenceable(184) %8)
  %9 = getelementptr inbounds %"class.sh::(anonymous namespace)::CollectVariableRefCountsTraverser", %"class.sh::(anonymous namespace)::CollectVariableRefCountsTraverser"* %0, i64 0, i32 1
  %10 = tail call dereferenceable(4) %"class.sh::TSymbolUniqueId"* @_ZNK2sh13TIntermSymbol8uniqueIdEv(%"class.sh::TIntermSymbol"* %1) #6
  %11 = getelementptr inbounds %"class.sh::TSymbolUniqueId", %"class.sh::TSymbolUniqueId"* %10, i64 0, i32 0
  %12 = load i32, i32* %11, align 4
  %13 = load i64, i64* bitcast (i8** @_ZN4absl13hash_internal15MixingHashState5kSeedE to i64*), align 8
  %14 = sext i32 %12 to i64
  %15 = add i64 %13, %14
  %16 = zext i64 %15 to i128
  %17 = mul nuw i128 %16, 11376068507788127593
  %18 = lshr i128 %17, 64
  %19 = xor i128 %18, %17
  %20 = trunc i128 %19 to i64
  %21 = getelementptr inbounds %"class.absl::flat_hash_map", %"class.absl::flat_hash_map"* %9, i64 0, i32 0, i32 0, i32 0
  %22 = load i8*, i8** %21, align 8
  %23 = getelementptr inbounds %"class.sh::(anonymous namespace)::CollectVariableRefCountsTraverser", %"class.sh::(anonymous namespace)::CollectVariableRefCountsTraverser"* %0, i64 0, i32 1, i32 0, i32 0, i32 3
  %24 = load i64, i64* %23, align 8
  %25 = lshr i64 %20, 7
  %26 = ptrtoint i8* %22 to i64
  %27 = lshr i64 %26, 12
  %28 = xor i64 %25, %27
  %29 = trunc i128 %19 to i8
  %30 = and i8 %29, 127
  %31 = insertelement <16 x i8> undef, i8 %30, i32 0
  %32 = shufflevector <16 x i8> %31, <16 x i8> undef, <16 x i32> zeroinitializer
  %33 = getelementptr inbounds %"class.sh::(anonymous namespace)::CollectVariableRefCountsTraverser", %"class.sh::(anonymous namespace)::CollectVariableRefCountsTraverser"* %0, i64 0, i32 1, i32 0, i32 0, i32 1
  br label %34

34:                                               ; preds = %64, %2
  %35 = phi i64 [ %28, %2 ], [ %66, %64 ]
  %36 = phi i64 [ 0, %2 ], [ %65, %64 ]
  %37 = and i64 %35, %24
  %38 = getelementptr inbounds i8, i8* %22, i64 %37
  %39 = bitcast i8* %38 to <16 x i8>*
  %40 = load <16 x i8>, <16 x i8>* %39, align 1
  %41 = icmp eq <16 x i8> %32, %40
  %42 = bitcast <16 x i1> %41 to i16
  %43 = icmp eq i16 %42, 0
  br i1 %43, label %60, label %44

44:                                               ; preds = %34
  %45 = zext i16 %42 to i32
  %46 = load %"union.absl::container_internal::map_slot_type"*, %"union.absl::container_internal::map_slot_type"** %33, align 8
  br label %47

47:                                               ; preds = %56, %44
  %48 = phi i32 [ %45, %44 ], [ %58, %56 ]
  %49 = tail call i32 @llvm.cttz.i32(i32 %48, i1 false) #6, !range !2
  %50 = zext i32 %49 to i64
  %51 = add i64 %37, %50
  %52 = and i64 %51, %24
  %53 = getelementptr inbounds %"union.absl::container_internal::map_slot_type", %"union.absl::container_internal::map_slot_type"* %46, i64 %52, i32 0, i32 0
  %54 = load i32, i32* %53, align 4
  %55 = icmp eq i32 %54, %12
  br i1 %55, label %67, label %56, !prof !3

56:                                               ; preds = %47
  %57 = add i32 %48, -1
  %58 = and i32 %57, %48
  %59 = icmp eq i32 %58, 0
  br i1 %59, label %60, label %47

60:                                               ; preds = %56, %34
  %61 = icmp eq <16 x i8> %40, <i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128>
  %62 = bitcast <16 x i1> %61 to i16
  %63 = icmp eq i16 %62, 0
  br i1 %63, label %64, label %73, !prof !4

64:                                               ; preds = %60
  %65 = add i64 %36, 16
  %66 = add i64 %65, %37
  br label %34

67:                                               ; preds = %47
  %68 = getelementptr inbounds i8, i8* %22, i64 %52
  %69 = icmp ne i8* %68, null
  tail call void @llvm.assume(i1 %69) #6
  %70 = load i8, i8* %68, align 1
  %71 = icmp sgt i8 %70, -1
  br i1 %71, label %80, label %72, !prof !3

72:                                               ; preds = %67
  tail call void @llvm.trap() #6
  unreachable

73:                                               ; preds = %60
  %74 = getelementptr inbounds %"class.absl::flat_hash_map", %"class.absl::flat_hash_map"* %9, i64 0, i32 0
  %75 = bitcast i32* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %75) #6
  %76 = tail call dereferenceable(4) %"class.sh::TSymbolUniqueId"* @_ZNK2sh13TIntermSymbol8uniqueIdEv(%"class.sh::TIntermSymbol"* %1) #6
  %77 = getelementptr inbounds %"class.sh::TSymbolUniqueId", %"class.sh::TSymbolUniqueId"* %76, i64 0, i32 0
  %78 = load i32, i32* %77, align 4
  store i32 %78, i32* %3, align 4
  %79 = call dereferenceable(4) i32* @_ZN4absl18container_internal12raw_hash_mapINS0_17FlatHashMapPolicyIijEENS_13hash_internal4HashIiEENSt3__18equal_toIiEENS7_9allocatorINS7_4pairIKijEEEEEixIiS3_LPi0EEEDTclsrT0_5valueclL_ZNS7_9addressofISD_EEPT_RSK_EclL_ZNS7_7declvalIRSD_EEDTclsr3std3__1E9__declvalISK_ELi0EEEvEEEEEOi(%"class.absl::container_internal::raw_hash_map"* %74, i32* nonnull dereferenceable(4) %3)
  store i32 1, i32* %79, align 4
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %75) #6
  br label %84

80:                                               ; preds = %67
  %81 = getelementptr inbounds %"union.absl::container_internal::map_slot_type", %"union.absl::container_internal::map_slot_type"* %46, i64 %52, i32 0, i32 1
  %82 = load i32, i32* %81, align 4
  %83 = add i32 %82, 1
  store i32 %83, i32* %81, align 4
  br label %84

84:                                               ; preds = %80, %73
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN2sh16TIntermTraverser18visitConstantUnionEPNS_20TIntermConstantUnionE(%"class.sh::TIntermTraverser"*, %"class.sh::TIntermConstantUnion"*) unnamed_addr #0 comdat align 2 {
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZN2sh16TIntermTraverser12visitSwizzleENS_5VisitEPNS_14TIntermSwizzleE(%"class.sh::TIntermTraverser"*, i32, %"class.sh::TIntermSwizzle"*) unnamed_addr #0 comdat align 2 {
  ret i1 true
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZN2sh16TIntermTraverser11visitBinaryENS_5VisitEPNS_13TIntermBinaryE(%"class.sh::TIntermTraverser"*, i32, %"class.sh::TIntermBinary"*) unnamed_addr #0 comdat align 2 {
  ret i1 true
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZN2sh16TIntermTraverser10visitUnaryENS_5VisitEPNS_12TIntermUnaryE(%"class.sh::TIntermTraverser"*, i32, %"class.sh::TIntermUnary"*) unnamed_addr #0 comdat align 2 {
  ret i1 true
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZN2sh16TIntermTraverser12visitTernaryENS_5VisitEPNS_14TIntermTernaryE(%"class.sh::TIntermTraverser"*, i32, %"class.sh::TIntermTernary"*) unnamed_addr #0 comdat align 2 {
  ret i1 true
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZN2sh16TIntermTraverser11visitIfElseENS_5VisitEPNS_13TIntermIfElseE(%"class.sh::TIntermTraverser"*, i32, %"class.sh::TIntermIfElse"*) unnamed_addr #0 comdat align 2 {
  ret i1 true
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZN2sh16TIntermTraverser11visitSwitchENS_5VisitEPNS_13TIntermSwitchE(%"class.sh::TIntermTraverser"*, i32, %"class.sh::TIntermSwitch"*) unnamed_addr #0 comdat align 2 {
  ret i1 true
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZN2sh16TIntermTraverser9visitCaseENS_5VisitEPNS_11TIntermCaseE(%"class.sh::TIntermTraverser"*, i32, %"class.sh::TIntermCase"*) unnamed_addr #0 comdat align 2 {
  ret i1 true
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN2sh12_GLOBAL__N_133CollectVariableRefCountsTraverser22visitFunctionPrototypeEPNS_24TIntermFunctionPrototypeE(%"class.sh::(anonymous namespace)::CollectVariableRefCountsTraverser"*, %"class.sh::TIntermFunctionPrototype"*) unnamed_addr #0 align 2 {
  %3 = bitcast %"class.sh::TIntermFunctionPrototype"* %1 to %"class.sh::TType"* (%"class.sh::TIntermFunctionPrototype"*)***
  %4 = load %"class.sh::TType"* (%"class.sh::TIntermFunctionPrototype"*)**, %"class.sh::TType"* (%"class.sh::TIntermFunctionPrototype"*)*** %3, align 8
  %5 = getelementptr inbounds %"class.sh::TType"* (%"class.sh::TIntermFunctionPrototype"*)*, %"class.sh::TType"* (%"class.sh::TIntermFunctionPrototype"*)** %4, i64 31
  %6 = load %"class.sh::TType"* (%"class.sh::TIntermFunctionPrototype"*)*, %"class.sh::TType"* (%"class.sh::TIntermFunctionPrototype"*)** %5, align 8
  %7 = tail call dereferenceable(184) %"class.sh::TType"* %6(%"class.sh::TIntermFunctionPrototype"* %1) #6
  tail call fastcc void @_ZN2sh12_GLOBAL__N_133CollectVariableRefCountsTraverser27incrementStructTypeRefCountERKNS_5TTypeE(%"class.sh::(anonymous namespace)::CollectVariableRefCountsTraverser"* %0, %"class.sh::TType"* dereferenceable(184) %7)
  %8 = getelementptr inbounds %"class.sh::TIntermFunctionPrototype", %"class.sh::TIntermFunctionPrototype"* %1, i64 0, i32 1
  %9 = load %"class.sh::TFunction"*, %"class.sh::TFunction"** %8, align 8
  %10 = getelementptr inbounds %"class.sh::TFunction", %"class.sh::TFunction"* %9, i64 0, i32 4
  %11 = load i64, i64* %10, align 8
  %12 = icmp eq i64 %11, 0
  br i1 %12, label %20, label %13

13:                                               ; preds = %2
  %14 = getelementptr inbounds %"class.sh::TFunction", %"class.sh::TFunction"* %9, i64 0, i32 3
  %15 = load %"class.sh::TVariable"**, %"class.sh::TVariable"*** %14, align 8
  %16 = load %"class.sh::TVariable"*, %"class.sh::TVariable"** %15, align 8
  %17 = getelementptr inbounds %"class.sh::TVariable", %"class.sh::TVariable"* %16, i64 0, i32 1
  %18 = load %"class.sh::TType"*, %"class.sh::TType"** %17, align 8
  tail call fastcc void @_ZN2sh12_GLOBAL__N_133CollectVariableRefCountsTraverser27incrementStructTypeRefCountERKNS_5TTypeE(%"class.sh::(anonymous namespace)::CollectVariableRefCountsTraverser"* %0, %"class.sh::TType"* dereferenceable(184) %18)
  %19 = icmp eq i64 %11, 1
  br i1 %19, label %20, label %21

20:                                               ; preds = %21, %13, %2
  ret void

21:                                               ; preds = %13, %21
  %22 = phi i64 [ %30, %21 ], [ 1, %13 ]
  %23 = load %"class.sh::TFunction"*, %"class.sh::TFunction"** %8, align 8
  %24 = getelementptr inbounds %"class.sh::TFunction", %"class.sh::TFunction"* %23, i64 0, i32 3
  %25 = load %"class.sh::TVariable"**, %"class.sh::TVariable"*** %24, align 8
  %26 = getelementptr inbounds %"class.sh::TVariable"*, %"class.sh::TVariable"** %25, i64 %22
  %27 = load %"class.sh::TVariable"*, %"class.sh::TVariable"** %26, align 8
  %28 = getelementptr inbounds %"class.sh::TVariable", %"class.sh::TVariable"* %27, i64 0, i32 1
  %29 = load %"class.sh::TType"*, %"class.sh::TType"** %28, align 8
  tail call fastcc void @_ZN2sh12_GLOBAL__N_133CollectVariableRefCountsTraverser27incrementStructTypeRefCountERKNS_5TTypeE(%"class.sh::(anonymous namespace)::CollectVariableRefCountsTraverser"* %0, %"class.sh::TType"* dereferenceable(184) %29)
  %30 = add nuw i64 %22, 1
  %31 = icmp eq i64 %30, %11
  br i1 %31, label %20, label %21
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZN2sh16TIntermTraverser23visitFunctionDefinitionENS_5VisitEPNS_25TIntermFunctionDefinitionE(%"class.sh::TIntermTraverser"*, i32, %"class.sh::TIntermFunctionDefinition"*) unnamed_addr #0 comdat align 2 {
  ret i1 true
}

; Function Attrs: nounwind ssp uwtable
define internal zeroext i1 @_ZN2sh12_GLOBAL__N_133CollectVariableRefCountsTraverser14visitAggregateENS_5VisitEPNS_16TIntermAggregateE(%"class.sh::(anonymous namespace)::CollectVariableRefCountsTraverser"*, i32, %"class.sh::TIntermAggregate"*) unnamed_addr #0 align 2 {
  %4 = getelementptr inbounds %"class.sh::TIntermAggregate", %"class.sh::TIntermAggregate"* %2, i64 0, i32 0, i32 0
  %5 = bitcast %"class.sh::TIntermAggregate"* %2 to %"class.sh::TType"* (%"class.sh::TIntermExpression"*)***
  %6 = load %"class.sh::TType"* (%"class.sh::TIntermExpression"*)**, %"class.sh::TType"* (%"class.sh::TIntermExpression"*)*** %5, align 8
  %7 = getelementptr inbounds %"class.sh::TType"* (%"class.sh::TIntermExpression"*)*, %"class.sh::TType"* (%"class.sh::TIntermExpression"*)** %6, i64 31
  %8 = load %"class.sh::TType"* (%"class.sh::TIntermExpression"*)*, %"class.sh::TType"* (%"class.sh::TIntermExpression"*)** %7, align 8
  %9 = tail call dereferenceable(184) %"class.sh::TType"* %8(%"class.sh::TIntermExpression"* %4) #6
  tail call fastcc void @_ZN2sh12_GLOBAL__N_133CollectVariableRefCountsTraverser27incrementStructTypeRefCountERKNS_5TTypeE(%"class.sh::(anonymous namespace)::CollectVariableRefCountsTraverser"* %0, %"class.sh::TType"* dereferenceable(184) %9)
  ret i1 true
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZN2sh16TIntermTraverser10visitBlockENS_5VisitEPNS_12TIntermBlockE(%"class.sh::TIntermTraverser"*, i32, %"class.sh::TIntermBlock"*) unnamed_addr #0 comdat align 2 {
  ret i1 true
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZN2sh16TIntermTraverser31visitGlobalQualifierDeclarationENS_5VisitEPNS_33TIntermGlobalQualifierDeclarationE(%"class.sh::TIntermTraverser"*, i32, %"class.sh::TIntermGlobalQualifierDeclaration"*) unnamed_addr #0 comdat align 2 {
  ret i1 true
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZN2sh16TIntermTraverser16visitDeclarationENS_5VisitEPNS_18TIntermDeclarationE(%"class.sh::TIntermTraverser"*, i32, %"class.sh::TIntermDeclaration"*) unnamed_addr #0 comdat align 2 {
  ret i1 true
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZN2sh16TIntermTraverser9visitLoopENS_5VisitEPNS_11TIntermLoopE(%"class.sh::TIntermTraverser"*, i32, %"class.sh::TIntermLoop"*) unnamed_addr #0 comdat align 2 {
  ret i1 true
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZN2sh16TIntermTraverser11visitBranchENS_5VisitEPNS_13TIntermBranchE(%"class.sh::TIntermTraverser"*, i32, %"class.sh::TIntermBranch"*) unnamed_addr #0 comdat align 2 {
  ret i1 true
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN2sh16TIntermTraverser26visitPreprocessorDirectiveEPNS_28TIntermPreprocessorDirectiveE(%"class.sh::TIntermTraverser"*, %"class.sh::TIntermPreprocessorDirective"*) unnamed_addr #0 comdat align 2 {
  ret void
}

declare void @_ZN2sh16TIntermTraverser14traverseBinaryEPNS_13TIntermBinaryE(%"class.sh::TIntermTraverser"*, %"class.sh::TIntermBinary"*) unnamed_addr #2

declare void @_ZN2sh16TIntermTraverser13traverseUnaryEPNS_12TIntermUnaryE(%"class.sh::TIntermTraverser"*, %"class.sh::TIntermUnary"*) unnamed_addr #2

declare void @_ZN2sh16TIntermTraverser26traverseFunctionDefinitionEPNS_25TIntermFunctionDefinitionE(%"class.sh::TIntermTraverser"*, %"class.sh::TIntermFunctionDefinition"*) unnamed_addr #2

declare void @_ZN2sh16TIntermTraverser17traverseAggregateEPNS_16TIntermAggregateE(%"class.sh::TIntermTraverser"*, %"class.sh::TIntermAggregate"*) unnamed_addr #2

declare void @_ZN2sh16TIntermTraverser13traverseBlockEPNS_12TIntermBlockE(%"class.sh::TIntermTraverser"*, %"class.sh::TIntermBlock"*) unnamed_addr #2

declare void @_ZN2sh16TIntermTraverser12traverseLoopEPNS_11TIntermLoopE(%"class.sh::TIntermTraverser"*, %"class.sh::TIntermLoop"*) unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define internal fastcc void @_ZN2sh12_GLOBAL__N_133CollectVariableRefCountsTraverser27incrementStructTypeRefCountERKNS_5TTypeE(%"class.sh::(anonymous namespace)::CollectVariableRefCountsTraverser"*, %"class.sh::TType"* nocapture readonly dereferenceable(184)) unnamed_addr #5 align 2 {
  %3 = alloca i32, align 4
  %4 = getelementptr inbounds %"class.sh::TType", %"class.sh::TType"* %1, i64 0, i32 0
  %5 = load i32, i32* %4, align 8
  %6 = icmp eq i32 %5, 91
  br i1 %6, label %7, label %24

7:                                                ; preds = %2
  %8 = getelementptr inbounds %"class.sh::TType", %"class.sh::TType"* %1, i64 0, i32 12
  %9 = load %"class.sh::TInterfaceBlock"*, %"class.sh::TInterfaceBlock"** %8, align 8
  %10 = getelementptr inbounds %"class.sh::TInterfaceBlock", %"class.sh::TInterfaceBlock"* %9, i64 0, i32 1, i32 0
  %11 = load %"class.sh::TVector.23"*, %"class.sh::TVector.23"** %10, align 8
  %12 = getelementptr inbounds %"class.sh::TVector.23", %"class.sh::TVector.23"* %11, i64 0, i32 0, i32 0, i32 0
  %13 = load %"class.sh::TField"**, %"class.sh::TField"*** %12, align 8
  %14 = getelementptr inbounds %"class.sh::TVector.23", %"class.sh::TVector.23"* %11, i64 0, i32 0, i32 0, i32 1
  %15 = load %"class.sh::TField"**, %"class.sh::TField"*** %14, align 8
  %16 = icmp eq %"class.sh::TField"** %13, %15
  br i1 %16, label %114, label %17

17:                                               ; preds = %7, %17
  %18 = phi %"class.sh::TField"** [ %22, %17 ], [ %13, %7 ]
  %19 = load %"class.sh::TField"*, %"class.sh::TField"** %18, align 8
  %20 = getelementptr inbounds %"class.sh::TField", %"class.sh::TField"* %19, i64 0, i32 0
  %21 = load %"class.sh::TType"*, %"class.sh::TType"** %20, align 8
  tail call fastcc void @_ZN2sh12_GLOBAL__N_133CollectVariableRefCountsTraverser27incrementStructTypeRefCountERKNS_5TTypeE(%"class.sh::(anonymous namespace)::CollectVariableRefCountsTraverser"* %0, %"class.sh::TType"* dereferenceable(184) %21)
  %22 = getelementptr inbounds %"class.sh::TField"*, %"class.sh::TField"** %18, i64 1
  %23 = icmp eq %"class.sh::TField"** %22, %15
  br i1 %23, label %114, label %17

24:                                               ; preds = %2
  %25 = getelementptr inbounds %"class.sh::TType", %"class.sh::TType"* %1, i64 0, i32 13
  %26 = load %"class.sh::TStructure"*, %"class.sh::TStructure"** %25, align 8
  %27 = icmp eq %"class.sh::TStructure"* %26, null
  br i1 %27, label %114, label %28

28:                                               ; preds = %24
  %29 = getelementptr inbounds %"class.sh::(anonymous namespace)::CollectVariableRefCountsTraverser", %"class.sh::(anonymous namespace)::CollectVariableRefCountsTraverser"* %0, i64 0, i32 2
  %30 = getelementptr inbounds %"class.sh::TStructure", %"class.sh::TStructure"* %26, i64 0, i32 0, i32 1, i32 0
  %31 = load i32, i32* %30, align 4
  %32 = load i64, i64* bitcast (i8** @_ZN4absl13hash_internal15MixingHashState5kSeedE to i64*), align 8
  %33 = sext i32 %31 to i64
  %34 = add i64 %32, %33
  %35 = zext i64 %34 to i128
  %36 = mul nuw i128 %35, 11376068507788127593
  %37 = lshr i128 %36, 64
  %38 = xor i128 %37, %36
  %39 = trunc i128 %38 to i64
  %40 = getelementptr inbounds %"class.absl::flat_hash_map", %"class.absl::flat_hash_map"* %29, i64 0, i32 0, i32 0, i32 0
  %41 = load i8*, i8** %40, align 8
  %42 = getelementptr inbounds %"class.sh::(anonymous namespace)::CollectVariableRefCountsTraverser", %"class.sh::(anonymous namespace)::CollectVariableRefCountsTraverser"* %0, i64 0, i32 2, i32 0, i32 0, i32 3
  %43 = load i64, i64* %42, align 8
  %44 = lshr i64 %39, 7
  %45 = ptrtoint i8* %41 to i64
  %46 = lshr i64 %45, 12
  %47 = xor i64 %44, %46
  %48 = trunc i128 %38 to i8
  %49 = and i8 %48, 127
  %50 = insertelement <16 x i8> undef, i8 %49, i32 0
  %51 = shufflevector <16 x i8> %50, <16 x i8> undef, <16 x i32> zeroinitializer
  %52 = getelementptr inbounds %"class.sh::(anonymous namespace)::CollectVariableRefCountsTraverser", %"class.sh::(anonymous namespace)::CollectVariableRefCountsTraverser"* %0, i64 0, i32 2, i32 0, i32 0, i32 1
  br label %53

53:                                               ; preds = %83, %28
  %54 = phi i64 [ %47, %28 ], [ %85, %83 ]
  %55 = phi i64 [ 0, %28 ], [ %84, %83 ]
  %56 = and i64 %54, %43
  %57 = getelementptr inbounds i8, i8* %41, i64 %56
  %58 = bitcast i8* %57 to <16 x i8>*
  %59 = load <16 x i8>, <16 x i8>* %58, align 1
  %60 = icmp eq <16 x i8> %51, %59
  %61 = bitcast <16 x i1> %60 to i16
  %62 = icmp eq i16 %61, 0
  br i1 %62, label %79, label %63

63:                                               ; preds = %53
  %64 = zext i16 %61 to i32
  %65 = load %"union.absl::container_internal::map_slot_type"*, %"union.absl::container_internal::map_slot_type"** %52, align 8
  br label %66

66:                                               ; preds = %75, %63
  %67 = phi i32 [ %64, %63 ], [ %77, %75 ]
  %68 = tail call i32 @llvm.cttz.i32(i32 %67, i1 false) #6, !range !2
  %69 = zext i32 %68 to i64
  %70 = add i64 %56, %69
  %71 = and i64 %70, %43
  %72 = getelementptr inbounds %"union.absl::container_internal::map_slot_type", %"union.absl::container_internal::map_slot_type"* %65, i64 %71, i32 0, i32 0
  %73 = load i32, i32* %72, align 4
  %74 = icmp eq i32 %73, %31
  br i1 %74, label %86, label %75, !prof !3

75:                                               ; preds = %66
  %76 = add i32 %67, -1
  %77 = and i32 %76, %67
  %78 = icmp eq i32 %77, 0
  br i1 %78, label %79, label %66

79:                                               ; preds = %75, %53
  %80 = icmp eq <16 x i8> %59, <i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128>
  %81 = bitcast <16 x i1> %80 to i16
  %82 = icmp eq i16 %81, 0
  br i1 %82, label %83, label %92, !prof !4

83:                                               ; preds = %79
  %84 = add i64 %55, 16
  %85 = add i64 %84, %56
  br label %53

86:                                               ; preds = %66
  %87 = getelementptr inbounds i8, i8* %41, i64 %71
  %88 = icmp ne i8* %87, null
  tail call void @llvm.assume(i1 %88) #6
  %89 = load i8, i8* %87, align 1
  %90 = icmp sgt i8 %89, -1
  br i1 %90, label %110, label %91, !prof !3

91:                                               ; preds = %86
  tail call void @llvm.trap() #6
  unreachable

92:                                               ; preds = %79
  %93 = getelementptr inbounds %"class.absl::flat_hash_map", %"class.absl::flat_hash_map"* %29, i64 0, i32 0
  %94 = bitcast i32* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %94) #6
  store i32 %31, i32* %3, align 4
  %95 = call dereferenceable(4) i32* @_ZN4absl18container_internal12raw_hash_mapINS0_17FlatHashMapPolicyIijEENS_13hash_internal4HashIiEENSt3__18equal_toIiEENS7_9allocatorINS7_4pairIKijEEEEEixIiS3_LPi0EEEDTclsrT0_5valueclL_ZNS7_9addressofISD_EEPT_RSK_EclL_ZNS7_7declvalIRSD_EEDTclsr3std3__1E9__declvalISK_ELi0EEEvEEEEEOi(%"class.absl::container_internal::raw_hash_map"* %93, i32* nonnull dereferenceable(4) %3)
  store i32 1, i32* %95, align 4
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %94) #6
  %96 = getelementptr inbounds %"class.sh::TStructure", %"class.sh::TStructure"* %26, i64 0, i32 2, i32 0
  %97 = load %"class.sh::TVector.23"*, %"class.sh::TVector.23"** %96, align 8
  %98 = getelementptr inbounds %"class.sh::TVector.23", %"class.sh::TVector.23"* %97, i64 0, i32 0, i32 0, i32 0
  %99 = load %"class.sh::TField"**, %"class.sh::TField"*** %98, align 8
  %100 = getelementptr inbounds %"class.sh::TVector.23", %"class.sh::TVector.23"* %97, i64 0, i32 0, i32 0, i32 1
  %101 = load %"class.sh::TField"**, %"class.sh::TField"*** %100, align 8
  %102 = icmp eq %"class.sh::TField"** %99, %101
  br i1 %102, label %114, label %103

103:                                              ; preds = %92, %103
  %104 = phi %"class.sh::TField"** [ %108, %103 ], [ %99, %92 ]
  %105 = load %"class.sh::TField"*, %"class.sh::TField"** %104, align 8
  %106 = getelementptr inbounds %"class.sh::TField", %"class.sh::TField"* %105, i64 0, i32 0
  %107 = load %"class.sh::TType"*, %"class.sh::TType"** %106, align 8
  call fastcc void @_ZN2sh12_GLOBAL__N_133CollectVariableRefCountsTraverser27incrementStructTypeRefCountERKNS_5TTypeE(%"class.sh::(anonymous namespace)::CollectVariableRefCountsTraverser"* %0, %"class.sh::TType"* dereferenceable(184) %107)
  %108 = getelementptr inbounds %"class.sh::TField"*, %"class.sh::TField"** %104, i64 1
  %109 = icmp eq %"class.sh::TField"** %108, %101
  br i1 %109, label %114, label %103

110:                                              ; preds = %86
  %111 = getelementptr inbounds %"union.absl::container_internal::map_slot_type", %"union.absl::container_internal::map_slot_type"* %65, i64 %71, i32 0, i32 1
  %112 = load i32, i32* %111, align 4
  %113 = add i32 %112, 1
  store i32 %113, i32* %111, align 4
  br label %114

114:                                              ; preds = %103, %17, %92, %7, %110, %24
  ret void
}

declare dereferenceable(4) %"class.sh::TSymbolUniqueId"* @_ZNK2sh13TIntermSymbol8uniqueIdEv(%"class.sh::TIntermSymbol"*) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden dereferenceable(4) i32* @_ZN4absl18container_internal12raw_hash_mapINS0_17FlatHashMapPolicyIijEENS_13hash_internal4HashIiEENSt3__18equal_toIiEENS7_9allocatorINS7_4pairIKijEEEEEixIiS3_LPi0EEEDTclsrT0_5valueclL_ZNS7_9addressofISD_EEPT_RSK_EclL_ZNS7_7declvalIRSD_EEDTclsr3std3__1E9__declvalISK_ELi0EEEvEEEEEOi(%"class.absl::container_internal::raw_hash_map"*, i32* dereferenceable(4)) local_unnamed_addr #5 comdat align 2 {
  %3 = getelementptr inbounds %"class.absl::container_internal::raw_hash_map", %"class.absl::container_internal::raw_hash_map"* %0, i64 0, i32 0
  %4 = load i32, i32* %1, align 4, !noalias !5
  %5 = load i64, i64* bitcast (i8** @_ZN4absl13hash_internal15MixingHashState5kSeedE to i64*), align 8, !noalias !5
  %6 = sext i32 %4 to i64
  %7 = add i64 %5, %6
  %8 = zext i64 %7 to i128
  %9 = mul nuw i128 %8, 11376068507788127593
  %10 = lshr i128 %9, 64
  %11 = xor i128 %10, %9
  %12 = trunc i128 %11 to i64
  %13 = getelementptr inbounds %"class.absl::container_internal::raw_hash_map", %"class.absl::container_internal::raw_hash_map"* %0, i64 0, i32 0, i32 0
  %14 = load i8*, i8** %13, align 8, !noalias !5
  %15 = getelementptr inbounds %"class.absl::container_internal::raw_hash_map", %"class.absl::container_internal::raw_hash_map"* %0, i64 0, i32 0, i32 3
  %16 = load i64, i64* %15, align 8, !noalias !5
  %17 = lshr i64 %12, 7
  %18 = ptrtoint i8* %14 to i64
  %19 = lshr i64 %18, 12
  %20 = xor i64 %17, %19
  %21 = trunc i128 %11 to i8
  %22 = and i8 %21, 127
  %23 = insertelement <16 x i8> undef, i8 %22, i32 0
  %24 = shufflevector <16 x i8> %23, <16 x i8> undef, <16 x i32> zeroinitializer
  %25 = getelementptr inbounds %"class.absl::container_internal::raw_hash_map", %"class.absl::container_internal::raw_hash_map"* %0, i64 0, i32 0, i32 1
  br label %26

26:                                               ; preds = %56, %2
  %27 = phi i64 [ %20, %2 ], [ %58, %56 ]
  %28 = phi i64 [ 0, %2 ], [ %57, %56 ]
  %29 = and i64 %27, %16
  %30 = getelementptr inbounds i8, i8* %14, i64 %29
  %31 = bitcast i8* %30 to <16 x i8>*
  %32 = load <16 x i8>, <16 x i8>* %31, align 1, !noalias !5
  %33 = icmp eq <16 x i8> %24, %32
  %34 = bitcast <16 x i1> %33 to i16
  %35 = icmp eq i16 %34, 0
  br i1 %35, label %52, label %36

36:                                               ; preds = %26
  %37 = zext i16 %34 to i32
  %38 = load %"union.absl::container_internal::map_slot_type"*, %"union.absl::container_internal::map_slot_type"** %25, align 8, !noalias !5
  br label %39

39:                                               ; preds = %48, %36
  %40 = phi i32 [ %37, %36 ], [ %50, %48 ]
  %41 = tail call i32 @llvm.cttz.i32(i32 %40, i1 false) #6, !range !2
  %42 = zext i32 %41 to i64
  %43 = add i64 %29, %42
  %44 = and i64 %43, %16
  %45 = getelementptr inbounds %"union.absl::container_internal::map_slot_type", %"union.absl::container_internal::map_slot_type"* %38, i64 %44, i32 0, i32 0
  %46 = load i32, i32* %45, align 4, !noalias !5
  %47 = icmp eq i32 %46, %4
  br i1 %47, label %67, label %48, !prof !3

48:                                               ; preds = %39
  %49 = add i32 %40, -1
  %50 = and i32 %49, %40
  %51 = icmp eq i32 %50, 0
  br i1 %51, label %52, label %39

52:                                               ; preds = %48, %26
  %53 = icmp eq <16 x i8> %32, <i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128>
  %54 = bitcast <16 x i1> %53 to i16
  %55 = icmp eq i16 %54, 0
  br i1 %55, label %56, label %59, !prof !4

56:                                               ; preds = %52
  %57 = add i64 %28, 16
  %58 = add i64 %57, %29
  br label %26

59:                                               ; preds = %52
  %60 = tail call i64 @_ZN4absl18container_internal12raw_hash_setINS0_17FlatHashMapPolicyIijEENS_13hash_internal4HashIiEENSt3__18equal_toIiEENS7_9allocatorINS7_4pairIKijEEEEE14prepare_insertEm(%"class.absl::container_internal::raw_hash_set"* %3, i64 %12) #6, !noalias !5
  %61 = load %"union.absl::container_internal::map_slot_type"*, %"union.absl::container_internal::map_slot_type"** %25, align 8, !noalias !5
  %62 = getelementptr inbounds %"union.absl::container_internal::map_slot_type", %"union.absl::container_internal::map_slot_type"* %61, i64 %60, i32 0, i32 0
  %63 = load i32, i32* %1, align 4, !noalias !5
  store i32 %63, i32* %62, align 4, !noalias !5
  %64 = getelementptr inbounds %"union.absl::container_internal::map_slot_type", %"union.absl::container_internal::map_slot_type"* %61, i64 %60, i32 0, i32 1
  store i32 0, i32* %64, align 4, !noalias !5
  %65 = load i8*, i8** %13, align 8, !noalias !5
  %66 = load %"union.absl::container_internal::map_slot_type"*, %"union.absl::container_internal::map_slot_type"** %25, align 8, !noalias !5
  br label %67

67:                                               ; preds = %39, %59
  %68 = phi %"union.absl::container_internal::map_slot_type"* [ %66, %59 ], [ %38, %39 ]
  %69 = phi i8* [ %65, %59 ], [ %14, %39 ]
  %70 = phi i64 [ %60, %59 ], [ %44, %39 ]
  %71 = getelementptr inbounds i8, i8* %69, i64 %70
  %72 = icmp ne i8* %71, null
  tail call void @llvm.assume(i1 %72) #6, !noalias !5
  %73 = load i8, i8* %71, align 1
  %74 = icmp sgt i8 %73, -1
  br i1 %74, label %76, label %75, !prof !3

75:                                               ; preds = %67
  tail call void @llvm.trap() #6
  unreachable

76:                                               ; preds = %67
  %77 = getelementptr inbounds %"union.absl::container_internal::map_slot_type", %"union.absl::container_internal::map_slot_type"* %68, i64 %70, i32 0, i32 1
  ret i32* %77
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #1

; Function Attrs: nounwind
declare void @llvm.assume(i1) #6

; Function Attrs: nounwind readnone speculatable
declare i32 @llvm.cttz.i32(i32, i1 immarg) #7

; Function Attrs: cold noreturn nounwind
declare void @llvm.trap() #8

; Function Attrs: noinline nounwind ssp uwtable
define linkonce_odr hidden i64 @_ZN4absl18container_internal12raw_hash_setINS0_17FlatHashMapPolicyIijEENS_13hash_internal4HashIiEENSt3__18equal_toIiEENS7_9allocatorINS7_4pairIKijEEEEE14prepare_insertEm(%"class.absl::container_internal::raw_hash_set"*, i64) local_unnamed_addr #9 comdat align 2 {
  %3 = getelementptr inbounds %"class.absl::container_internal::raw_hash_set", %"class.absl::container_internal::raw_hash_set"* %0, i64 0, i32 0
  %4 = load i8*, i8** %3, align 8
  %5 = getelementptr inbounds %"class.absl::container_internal::raw_hash_set", %"class.absl::container_internal::raw_hash_set"* %0, i64 0, i32 3
  %6 = load i64, i64* %5, align 8
  %7 = lshr i64 %1, 7
  %8 = ptrtoint i8* %4 to i64
  %9 = lshr i64 %8, 12
  %10 = xor i64 %9, %7
  %11 = and i64 %10, %6
  %12 = getelementptr inbounds i8, i8* %4, i64 %11
  %13 = bitcast i8* %12 to <16 x i8>*
  %14 = load <16 x i8>, <16 x i8>* %13, align 1
  %15 = icmp slt <16 x i8> %14, <i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1>
  %16 = bitcast <16 x i1> %15 to i16
  %17 = icmp eq i16 %16, 0
  br i1 %17, label %18, label %30

18:                                               ; preds = %2, %18
  %19 = phi i64 [ %23, %18 ], [ %11, %2 ]
  %20 = phi i64 [ %21, %18 ], [ 0, %2 ]
  %21 = add i64 %20, 16
  %22 = add i64 %21, %19
  %23 = and i64 %22, %6
  %24 = getelementptr inbounds i8, i8* %4, i64 %23
  %25 = bitcast i8* %24 to <16 x i8>*
  %26 = load <16 x i8>, <16 x i8>* %25, align 1
  %27 = icmp slt <16 x i8> %26, <i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1>
  %28 = bitcast <16 x i1> %27 to i16
  %29 = icmp eq i16 %28, 0
  br i1 %29, label %18, label %30

30:                                               ; preds = %18, %2
  %31 = phi i64 [ %11, %2 ], [ %23, %18 ]
  %32 = phi i16 [ %16, %2 ], [ %28, %18 ]
  %33 = zext i16 %32 to i32
  %34 = tail call i32 @llvm.cttz.i32(i32 %33, i1 false) #6, !range !2
  %35 = zext i32 %34 to i64
  %36 = add i64 %31, %35
  %37 = and i64 %36, %6
  %38 = getelementptr inbounds %"class.absl::container_internal::raw_hash_set", %"class.absl::container_internal::raw_hash_set"* %0, i64 0, i32 4, i32 0, i32 0, i32 0
  %39 = load i64, i64* %38, align 8
  %40 = icmp eq i64 %39, 0
  br i1 %40, label %41, label %93

41:                                               ; preds = %30
  %42 = getelementptr inbounds i8, i8* %4, i64 %37
  %43 = load i8, i8* %42, align 1
  %44 = icmp eq i8 %43, -2
  br i1 %44, label %93, label %45, !prof !3

45:                                               ; preds = %41
  %46 = icmp eq i64 %6, 0
  br i1 %46, label %47, label %48

47:                                               ; preds = %45
  tail call void @_ZN4absl18container_internal12raw_hash_setINS0_17FlatHashMapPolicyIijEENS_13hash_internal4HashIiEENSt3__18equal_toIiEENS7_9allocatorINS7_4pairIKijEEEEE6resizeEm(%"class.absl::container_internal::raw_hash_set"* %0, i64 1) #6
  br label %59

48:                                               ; preds = %45
  %49 = getelementptr inbounds %"class.absl::container_internal::raw_hash_set", %"class.absl::container_internal::raw_hash_set"* %0, i64 0, i32 2
  %50 = load i64, i64* %49, align 8
  %51 = lshr i64 %6, 3
  %52 = sub i64 %6, %51
  %53 = lshr i64 %52, 1
  %54 = icmp ugt i64 %50, %53
  br i1 %54, label %56, label %55

55:                                               ; preds = %48
  tail call void @_ZN4absl18container_internal12raw_hash_setINS0_17FlatHashMapPolicyIijEENS_13hash_internal4HashIiEENSt3__18equal_toIiEENS7_9allocatorINS7_4pairIKijEEEEE27drop_deletes_without_resizeEv(%"class.absl::container_internal::raw_hash_set"* %0) #6
  br label %59

56:                                               ; preds = %48
  %57 = shl i64 %6, 1
  %58 = or i64 %57, 1
  tail call void @_ZN4absl18container_internal12raw_hash_setINS0_17FlatHashMapPolicyIijEENS_13hash_internal4HashIiEENSt3__18equal_toIiEENS7_9allocatorINS7_4pairIKijEEEEE6resizeEm(%"class.absl::container_internal::raw_hash_set"* %0, i64 %58) #6
  br label %59

59:                                               ; preds = %47, %55, %56
  %60 = load i8*, i8** %3, align 8
  %61 = load i64, i64* %5, align 8
  %62 = ptrtoint i8* %60 to i64
  %63 = lshr i64 %62, 12
  %64 = xor i64 %63, %7
  %65 = and i64 %64, %61
  %66 = getelementptr inbounds i8, i8* %60, i64 %65
  %67 = bitcast i8* %66 to <16 x i8>*
  %68 = load <16 x i8>, <16 x i8>* %67, align 1
  %69 = icmp slt <16 x i8> %68, <i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1>
  %70 = bitcast <16 x i1> %69 to i16
  %71 = icmp eq i16 %70, 0
  br i1 %71, label %72, label %84

72:                                               ; preds = %59, %72
  %73 = phi i64 [ %77, %72 ], [ %65, %59 ]
  %74 = phi i64 [ %75, %72 ], [ 0, %59 ]
  %75 = add i64 %74, 16
  %76 = add i64 %75, %73
  %77 = and i64 %76, %61
  %78 = getelementptr inbounds i8, i8* %60, i64 %77
  %79 = bitcast i8* %78 to <16 x i8>*
  %80 = load <16 x i8>, <16 x i8>* %79, align 1
  %81 = icmp slt <16 x i8> %80, <i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1>
  %82 = bitcast <16 x i1> %81 to i16
  %83 = icmp eq i16 %82, 0
  br i1 %83, label %72, label %84

84:                                               ; preds = %72, %59
  %85 = phi i64 [ %65, %59 ], [ %77, %72 ]
  %86 = phi i16 [ %70, %59 ], [ %82, %72 ]
  %87 = zext i16 %86 to i32
  %88 = tail call i32 @llvm.cttz.i32(i32 %87, i1 false) #6, !range !2
  %89 = zext i32 %88 to i64
  %90 = add i64 %85, %89
  %91 = and i64 %90, %61
  %92 = load i64, i64* %38, align 8
  br label %93

93:                                               ; preds = %41, %30, %84
  %94 = phi i64 [ %92, %84 ], [ 0, %41 ], [ %39, %30 ]
  %95 = phi i8* [ %60, %84 ], [ %4, %41 ], [ %4, %30 ]
  %96 = phi i64 [ %91, %84 ], [ %37, %41 ], [ %37, %30 ]
  %97 = getelementptr inbounds %"class.absl::container_internal::raw_hash_set", %"class.absl::container_internal::raw_hash_set"* %0, i64 0, i32 2
  %98 = load i64, i64* %97, align 8
  %99 = add i64 %98, 1
  store i64 %99, i64* %97, align 8
  %100 = getelementptr inbounds i8, i8* %95, i64 %96
  %101 = load i8, i8* %100, align 1
  %102 = icmp eq i8 %101, -128
  %103 = zext i1 %102 to i64
  %104 = sub i64 %94, %103
  store i64 %104, i64* %38, align 8
  %105 = trunc i64 %1 to i8
  %106 = and i8 %105, 127
  store i8 %106, i8* %100, align 1
  %107 = load i8*, i8** %3, align 8
  %108 = add i64 %96, -15
  %109 = load i64, i64* %5, align 8
  %110 = and i64 %109, %108
  %111 = and i64 %109, 15
  %112 = add i64 %110, %111
  %113 = getelementptr inbounds i8, i8* %107, i64 %112
  store i8 %106, i8* %113, align 1
  ret i64 %96
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN4absl18container_internal12raw_hash_setINS0_17FlatHashMapPolicyIijEENS_13hash_internal4HashIiEENSt3__18equal_toIiEENS7_9allocatorINS7_4pairIKijEEEEE6resizeEm(%"class.absl::container_internal::raw_hash_set"*, i64) local_unnamed_addr #5 comdat align 2 {
  %3 = getelementptr inbounds %"class.absl::container_internal::raw_hash_set", %"class.absl::container_internal::raw_hash_set"* %0, i64 0, i32 0
  %4 = load i8*, i8** %3, align 8
  %5 = getelementptr inbounds %"class.absl::container_internal::raw_hash_set", %"class.absl::container_internal::raw_hash_set"* %0, i64 0, i32 1
  %6 = load %"union.absl::container_internal::map_slot_type"*, %"union.absl::container_internal::map_slot_type"** %5, align 8
  %7 = getelementptr inbounds %"class.absl::container_internal::raw_hash_set", %"class.absl::container_internal::raw_hash_set"* %0, i64 0, i32 3
  %8 = load i64, i64* %7, align 8
  store i64 %1, i64* %7, align 8
  %9 = add i64 %1, 16
  %10 = add i64 %1, 19
  %11 = and i64 %10, -4
  %12 = shl i64 %1, 3
  %13 = add i64 %11, %12
  %14 = tail call i8* @_Znwm(i64 %13) #13
  store i8* %14, i8** %3, align 8
  %15 = getelementptr inbounds i8, i8* %14, i64 %11
  %16 = bitcast %"union.absl::container_internal::map_slot_type"** %5 to i8**
  store i8* %15, i8** %16, align 8
  tail call void @llvm.memset.p0i8.i64(i8* nonnull align 1 %14, i8 -128, i64 %9, i1 false) #6
  %17 = getelementptr inbounds i8, i8* %14, i64 %1
  store i8 -1, i8* %17, align 1
  %18 = lshr i64 %1, 3
  %19 = sub i64 %1, %18
  %20 = getelementptr inbounds %"class.absl::container_internal::raw_hash_set", %"class.absl::container_internal::raw_hash_set"* %0, i64 0, i32 2
  %21 = load i64, i64* %20, align 8
  %22 = sub i64 %19, %21
  %23 = getelementptr inbounds %"class.absl::container_internal::raw_hash_set", %"class.absl::container_internal::raw_hash_set"* %0, i64 0, i32 4, i32 0, i32 0, i32 0
  store i64 %22, i64* %23, align 8
  %24 = icmp eq i64 %8, 0
  br i1 %24, label %96, label %25

25:                                               ; preds = %2
  %26 = load i64, i64* bitcast (i8** @_ZN4absl13hash_internal15MixingHashState5kSeedE to i64*), align 8
  br label %28

27:                                               ; preds = %92
  br i1 %24, label %96, label %95

28:                                               ; preds = %25, %92
  %29 = phi i64 [ 0, %25 ], [ %93, %92 ]
  %30 = getelementptr inbounds i8, i8* %4, i64 %29
  %31 = load i8, i8* %30, align 1
  %32 = icmp sgt i8 %31, -1
  br i1 %32, label %33, label %92

33:                                               ; preds = %28
  %34 = getelementptr inbounds %"union.absl::container_internal::map_slot_type", %"union.absl::container_internal::map_slot_type"* %6, i64 %29
  %35 = getelementptr inbounds %"union.absl::container_internal::map_slot_type", %"union.absl::container_internal::map_slot_type"* %34, i64 0, i32 0, i32 0
  %36 = load i32, i32* %35, align 4
  %37 = sext i32 %36 to i64
  %38 = add i64 %26, %37
  %39 = zext i64 %38 to i128
  %40 = mul nuw i128 %39, 11376068507788127593
  %41 = lshr i128 %40, 64
  %42 = xor i128 %41, %40
  %43 = trunc i128 %42 to i64
  %44 = load i8*, i8** %3, align 8
  %45 = load i64, i64* %7, align 8
  %46 = lshr i64 %43, 7
  %47 = ptrtoint i8* %44 to i64
  %48 = lshr i64 %47, 12
  %49 = xor i64 %46, %48
  %50 = and i64 %49, %45
  %51 = getelementptr inbounds i8, i8* %44, i64 %50
  %52 = bitcast i8* %51 to <16 x i8>*
  %53 = load <16 x i8>, <16 x i8>* %52, align 1
  %54 = icmp slt <16 x i8> %53, <i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1>
  %55 = bitcast <16 x i1> %54 to i16
  %56 = icmp eq i16 %55, 0
  br i1 %56, label %57, label %69

57:                                               ; preds = %33, %57
  %58 = phi i64 [ %62, %57 ], [ %50, %33 ]
  %59 = phi i64 [ %60, %57 ], [ 0, %33 ]
  %60 = add i64 %59, 16
  %61 = add i64 %60, %58
  %62 = and i64 %61, %45
  %63 = getelementptr inbounds i8, i8* %44, i64 %62
  %64 = bitcast i8* %63 to <16 x i8>*
  %65 = load <16 x i8>, <16 x i8>* %64, align 1
  %66 = icmp slt <16 x i8> %65, <i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1>
  %67 = bitcast <16 x i1> %66 to i16
  %68 = icmp eq i16 %67, 0
  br i1 %68, label %57, label %69

69:                                               ; preds = %57, %33
  %70 = phi i64 [ %50, %33 ], [ %62, %57 ]
  %71 = phi i16 [ %55, %33 ], [ %67, %57 ]
  %72 = zext i16 %71 to i32
  %73 = tail call i32 @llvm.cttz.i32(i32 %72, i1 false) #6, !range !2
  %74 = zext i32 %73 to i64
  %75 = add i64 %70, %74
  %76 = and i64 %75, %45
  %77 = trunc i128 %42 to i8
  %78 = and i8 %77, 127
  %79 = getelementptr inbounds i8, i8* %44, i64 %76
  store i8 %78, i8* %79, align 1
  %80 = load i8*, i8** %3, align 8
  %81 = add i64 %76, -15
  %82 = load i64, i64* %7, align 8
  %83 = and i64 %81, %82
  %84 = and i64 %82, 15
  %85 = add i64 %83, %84
  %86 = getelementptr inbounds i8, i8* %80, i64 %85
  store i8 %78, i8* %86, align 1
  %87 = load %"union.absl::container_internal::map_slot_type"*, %"union.absl::container_internal::map_slot_type"** %5, align 8
  %88 = getelementptr inbounds %"union.absl::container_internal::map_slot_type", %"union.absl::container_internal::map_slot_type"* %87, i64 %76
  %89 = bitcast %"union.absl::container_internal::map_slot_type"* %88 to i64*
  %90 = bitcast %"union.absl::container_internal::map_slot_type"* %34 to i64*
  %91 = load i64, i64* %90, align 4
  store i64 %91, i64* %89, align 4
  br label %92

92:                                               ; preds = %28, %69
  %93 = add nuw i64 %29, 1
  %94 = icmp eq i64 %93, %8
  br i1 %94, label %27, label %28

95:                                               ; preds = %27
  tail call void @_ZdlPv(i8* %4) #13
  br label %96

96:                                               ; preds = %2, %27, %95
  ret void
}

; Function Attrs: noinline nounwind ssp uwtable
define linkonce_odr hidden void @_ZN4absl18container_internal12raw_hash_setINS0_17FlatHashMapPolicyIijEENS_13hash_internal4HashIiEENSt3__18equal_toIiEENS7_9allocatorINS7_4pairIKijEEEEE27drop_deletes_without_resizeEv(%"class.absl::container_internal::raw_hash_set"*) local_unnamed_addr #9 comdat align 2 {
  %2 = getelementptr inbounds %"class.absl::container_internal::raw_hash_set", %"class.absl::container_internal::raw_hash_set"* %0, i64 0, i32 0
  %3 = load i8*, i8** %2, align 8
  %4 = getelementptr inbounds %"class.absl::container_internal::raw_hash_set", %"class.absl::container_internal::raw_hash_set"* %0, i64 0, i32 3
  %5 = load i64, i64* %4, align 8
  tail call void @_ZN4absl18container_internal37ConvertDeletedToEmptyAndFullToDeletedEPam(i8* %3, i64 %5) #6
  %6 = load i64, i64* %4, align 8
  %7 = icmp eq i64 %6, 0
  br i1 %7, label %11, label %8

8:                                                ; preds = %1
  %9 = getelementptr inbounds %"class.absl::container_internal::raw_hash_set", %"class.absl::container_internal::raw_hash_set"* %0, i64 0, i32 1
  %10 = load i64, i64* bitcast (i8** @_ZN4absl13hash_internal15MixingHashState5kSeedE to i64*), align 8
  br label %19

11:                                               ; preds = %123, %1
  %12 = phi i64 [ 0, %1 ], [ %125, %123 ]
  %13 = lshr i64 %12, 3
  %14 = sub i64 %12, %13
  %15 = getelementptr inbounds %"class.absl::container_internal::raw_hash_set", %"class.absl::container_internal::raw_hash_set"* %0, i64 0, i32 2
  %16 = load i64, i64* %15, align 8
  %17 = sub i64 %14, %16
  %18 = getelementptr inbounds %"class.absl::container_internal::raw_hash_set", %"class.absl::container_internal::raw_hash_set"* %0, i64 0, i32 4, i32 0, i32 0, i32 0
  store i64 %17, i64* %18, align 8
  ret void

19:                                               ; preds = %8, %123
  %20 = phi i64 [ %6, %8 ], [ %126, %123 ]
  %21 = phi i64 [ 0, %8 ], [ %125, %123 ]
  %22 = load i8*, i8** %2, align 8
  %23 = getelementptr inbounds i8, i8* %22, i64 %21
  %24 = load i8, i8* %23, align 1
  %25 = icmp eq i8 %24, -2
  br i1 %25, label %26, label %123

26:                                               ; preds = %19
  %27 = ptrtoint i8* %22 to i64
  %28 = load %"union.absl::container_internal::map_slot_type"*, %"union.absl::container_internal::map_slot_type"** %9, align 8
  %29 = getelementptr inbounds %"union.absl::container_internal::map_slot_type", %"union.absl::container_internal::map_slot_type"* %28, i64 %21, i32 0, i32 0
  %30 = load i32, i32* %29, align 4
  %31 = sext i32 %30 to i64
  %32 = add i64 %10, %31
  %33 = zext i64 %32 to i128
  %34 = mul nuw i128 %33, 11376068507788127593
  %35 = lshr i128 %34, 64
  %36 = xor i128 %35, %34
  %37 = trunc i128 %36 to i64
  %38 = lshr i64 %37, 7
  %39 = lshr i64 %27, 12
  %40 = xor i64 %38, %39
  %41 = and i64 %40, %20
  %42 = getelementptr inbounds i8, i8* %22, i64 %41
  %43 = bitcast i8* %42 to <16 x i8>*
  %44 = load <16 x i8>, <16 x i8>* %43, align 1
  %45 = icmp slt <16 x i8> %44, <i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1>
  %46 = bitcast <16 x i1> %45 to i16
  %47 = icmp eq i16 %46, 0
  br i1 %47, label %48, label %60

48:                                               ; preds = %26, %48
  %49 = phi i64 [ %53, %48 ], [ %41, %26 ]
  %50 = phi i64 [ %51, %48 ], [ 0, %26 ]
  %51 = add i64 %50, 16
  %52 = add i64 %51, %49
  %53 = and i64 %52, %20
  %54 = getelementptr inbounds i8, i8* %22, i64 %53
  %55 = bitcast i8* %54 to <16 x i8>*
  %56 = load <16 x i8>, <16 x i8>* %55, align 1
  %57 = icmp slt <16 x i8> %56, <i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1>
  %58 = bitcast <16 x i1> %57 to i16
  %59 = icmp eq i16 %58, 0
  br i1 %59, label %48, label %60

60:                                               ; preds = %48, %26
  %61 = phi i64 [ %41, %26 ], [ %53, %48 ]
  %62 = phi i16 [ %46, %26 ], [ %58, %48 ]
  %63 = zext i16 %62 to i32
  %64 = tail call i32 @llvm.cttz.i32(i32 %63, i1 false) #6, !range !2
  %65 = zext i32 %64 to i64
  %66 = add i64 %61, %65
  %67 = and i64 %66, %20
  %68 = sub i64 %67, %41
  %69 = sub i64 %21, %41
  %70 = xor i64 %68, %69
  %71 = and i64 %70, %20
  %72 = icmp ult i64 %71, 16
  br i1 %72, label %73, label %83, !prof !3

73:                                               ; preds = %60
  %74 = trunc i128 %36 to i8
  %75 = and i8 %74, 127
  store i8 %75, i8* %23, align 1
  %76 = load i8*, i8** %2, align 8
  %77 = add i64 %21, -15
  %78 = load i64, i64* %4, align 8
  %79 = and i64 %78, %77
  %80 = and i64 %78, 15
  %81 = add i64 %79, %80
  %82 = getelementptr inbounds i8, i8* %76, i64 %81
  store i8 %75, i8* %82, align 1
  br label %123

83:                                               ; preds = %60
  %84 = getelementptr inbounds i8, i8* %22, i64 %67
  %85 = load i8, i8* %84, align 1
  %86 = icmp eq i8 %85, -128
  %87 = trunc i128 %36 to i8
  %88 = and i8 %87, 127
  store i8 %88, i8* %84, align 1
  %89 = load i8*, i8** %2, align 8
  %90 = add i64 %67, -15
  %91 = load i64, i64* %4, align 8
  %92 = and i64 %91, %90
  %93 = and i64 %91, 15
  %94 = add i64 %92, %93
  %95 = getelementptr inbounds i8, i8* %89, i64 %94
  store i8 %88, i8* %95, align 1
  %96 = load %"union.absl::container_internal::map_slot_type"*, %"union.absl::container_internal::map_slot_type"** %9, align 8
  br i1 %86, label %97, label %112

97:                                               ; preds = %83
  %98 = getelementptr inbounds %"union.absl::container_internal::map_slot_type", %"union.absl::container_internal::map_slot_type"* %96, i64 %67
  %99 = getelementptr inbounds %"union.absl::container_internal::map_slot_type", %"union.absl::container_internal::map_slot_type"* %96, i64 %21
  %100 = bitcast %"union.absl::container_internal::map_slot_type"* %98 to i64*
  %101 = bitcast %"union.absl::container_internal::map_slot_type"* %99 to i64*
  %102 = load i64, i64* %101, align 4
  store i64 %102, i64* %100, align 4
  %103 = load i8*, i8** %2, align 8
  %104 = getelementptr inbounds i8, i8* %103, i64 %21
  store i8 -128, i8* %104, align 1
  %105 = load i8*, i8** %2, align 8
  %106 = add i64 %21, -15
  %107 = load i64, i64* %4, align 8
  %108 = and i64 %107, %106
  %109 = and i64 %107, 15
  %110 = add i64 %108, %109
  %111 = getelementptr inbounds i8, i8* %105, i64 %110
  store i8 -128, i8* %111, align 1
  br label %123

112:                                              ; preds = %83
  %113 = getelementptr inbounds %"union.absl::container_internal::map_slot_type", %"union.absl::container_internal::map_slot_type"* %96, i64 %21
  %114 = bitcast %"union.absl::container_internal::map_slot_type"* %113 to i64*
  %115 = load i64, i64* %114, align 4
  %116 = getelementptr inbounds %"union.absl::container_internal::map_slot_type", %"union.absl::container_internal::map_slot_type"* %96, i64 %67
  %117 = bitcast %"union.absl::container_internal::map_slot_type"* %116 to i64*
  %118 = load i64, i64* %117, align 4
  store i64 %118, i64* %114, align 4
  %119 = load %"union.absl::container_internal::map_slot_type"*, %"union.absl::container_internal::map_slot_type"** %9, align 8
  %120 = getelementptr inbounds %"union.absl::container_internal::map_slot_type", %"union.absl::container_internal::map_slot_type"* %119, i64 %67
  %121 = bitcast %"union.absl::container_internal::map_slot_type"* %120 to i64*
  store i64 %115, i64* %121, align 4
  %122 = add i64 %21, -1
  br label %123

123:                                              ; preds = %73, %112, %97, %19
  %124 = phi i64 [ %21, %19 ], [ %21, %73 ], [ %21, %97 ], [ %122, %112 ]
  %125 = add i64 %124, 1
  %126 = load i64, i64* %4, align 8
  %127 = icmp eq i64 %125, %126
  br i1 %127, label %11, label %19
}

; Function Attrs: nobuiltin nofree
declare noalias nonnull i8* @_Znwm(i64) local_unnamed_addr #10

; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(i8*) local_unnamed_addr #11

declare void @_ZN4absl18container_internal37ConvertDeletedToEmptyAndFullToDeletedEPam(i8*, i64) local_unnamed_addr #2

; Function Attrs: inlinehint nounwind ssp uwtable
define internal void @_ZN2sh12_GLOBAL__N_136RemoveUnreferencedVariablesTraverserD0Ev(%"class.sh::(anonymous namespace)::RemoveUnreferencedVariablesTraverser"*) unnamed_addr #4 align 2 {
  %2 = getelementptr inbounds %"class.sh::(anonymous namespace)::RemoveUnreferencedVariablesTraverser", %"class.sh::(anonymous namespace)::RemoveUnreferencedVariablesTraverser"* %0, i64 0, i32 0
  tail call void @_ZN2sh16TIntermTraverserD2Ev(%"class.sh::TIntermTraverser"* %2) #6
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN2sh12_GLOBAL__N_136RemoveUnreferencedVariablesTraverser11visitSymbolEPNS_13TIntermSymbolE(%"class.sh::(anonymous namespace)::RemoveUnreferencedVariablesTraverser"* nocapture readonly, %"class.sh::TIntermSymbol"*) unnamed_addr #0 align 2 {
  %3 = alloca i32, align 4
  %4 = getelementptr inbounds %"class.sh::(anonymous namespace)::RemoveUnreferencedVariablesTraverser", %"class.sh::(anonymous namespace)::RemoveUnreferencedVariablesTraverser"* %0, i64 0, i32 3
  %5 = load i8, i8* %4, align 8, !range !8
  %6 = icmp eq i8 %5, 0
  br i1 %6, label %23, label %7

7:                                                ; preds = %2
  %8 = getelementptr inbounds %"class.sh::(anonymous namespace)::RemoveUnreferencedVariablesTraverser", %"class.sh::(anonymous namespace)::RemoveUnreferencedVariablesTraverser"* %0, i64 0, i32 1
  %9 = bitcast %"class.absl::flat_hash_map"** %8 to %"class.absl::container_internal::raw_hash_map"**
  %10 = load %"class.absl::container_internal::raw_hash_map"*, %"class.absl::container_internal::raw_hash_map"** %9, align 8
  %11 = bitcast i32* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %11) #6
  %12 = tail call dereferenceable(4) %"class.sh::TSymbolUniqueId"* @_ZNK2sh13TIntermSymbol8uniqueIdEv(%"class.sh::TIntermSymbol"* %1) #6
  %13 = getelementptr inbounds %"class.sh::TSymbolUniqueId", %"class.sh::TSymbolUniqueId"* %12, i64 0, i32 0
  %14 = load i32, i32* %13, align 4
  store i32 %14, i32* %3, align 4
  %15 = call dereferenceable(4) i32* @_ZN4absl18container_internal12raw_hash_mapINS0_17FlatHashMapPolicyIijEENS_13hash_internal4HashIiEENSt3__18equal_toIiEENS7_9allocatorINS7_4pairIKijEEEEEixIiS3_LPi0EEEDTclsrT0_5valueclL_ZNS7_9addressofISD_EEPT_RSK_EclL_ZNS7_7declvalIRSD_EEDTclsr3std3__1E9__declvalISK_ELi0EEEvEEEEEOi(%"class.absl::container_internal::raw_hash_map"* %10, i32* nonnull dereferenceable(4) %3)
  %16 = load i32, i32* %15, align 4
  %17 = add i32 %16, -1
  store i32 %17, i32* %15, align 4
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %11) #6
  %18 = bitcast %"class.sh::TIntermSymbol"* %1 to %"class.sh::TType"* (%"class.sh::TIntermSymbol"*)***
  %19 = load %"class.sh::TType"* (%"class.sh::TIntermSymbol"*)**, %"class.sh::TType"* (%"class.sh::TIntermSymbol"*)*** %18, align 8
  %20 = getelementptr inbounds %"class.sh::TType"* (%"class.sh::TIntermSymbol"*)*, %"class.sh::TType"* (%"class.sh::TIntermSymbol"*)** %19, i64 31
  %21 = load %"class.sh::TType"* (%"class.sh::TIntermSymbol"*)*, %"class.sh::TType"* (%"class.sh::TIntermSymbol"*)** %20, align 8
  %22 = call dereferenceable(184) %"class.sh::TType"* %21(%"class.sh::TIntermSymbol"* %1) #6
  call fastcc void @_ZN2sh12_GLOBAL__N_136RemoveUnreferencedVariablesTraverser27decrementStructTypeRefCountERKNS_5TTypeE(%"class.sh::(anonymous namespace)::RemoveUnreferencedVariablesTraverser"* %0, %"class.sh::TType"* dereferenceable(184) %22)
  br label %23

23:                                               ; preds = %2, %7
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN2sh16TIntermTraverser22visitFunctionPrototypeEPNS_24TIntermFunctionPrototypeE(%"class.sh::TIntermTraverser"*, %"class.sh::TIntermFunctionPrototype"*) unnamed_addr #0 comdat align 2 {
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal zeroext i1 @_ZN2sh12_GLOBAL__N_136RemoveUnreferencedVariablesTraverser14visitAggregateENS_5VisitEPNS_16TIntermAggregateE(%"class.sh::(anonymous namespace)::RemoveUnreferencedVariablesTraverser"* nocapture readonly, i32, %"class.sh::TIntermAggregate"*) unnamed_addr #0 align 2 {
  %4 = icmp eq i32 %1, 0
  br i1 %4, label %5, label %16

5:                                                ; preds = %3
  %6 = getelementptr inbounds %"class.sh::(anonymous namespace)::RemoveUnreferencedVariablesTraverser", %"class.sh::(anonymous namespace)::RemoveUnreferencedVariablesTraverser"* %0, i64 0, i32 3
  %7 = load i8, i8* %6, align 8, !range !8
  %8 = icmp eq i8 %7, 0
  br i1 %8, label %16, label %9

9:                                                ; preds = %5
  %10 = getelementptr inbounds %"class.sh::TIntermAggregate", %"class.sh::TIntermAggregate"* %2, i64 0, i32 0, i32 0
  %11 = bitcast %"class.sh::TIntermAggregate"* %2 to %"class.sh::TType"* (%"class.sh::TIntermExpression"*)***
  %12 = load %"class.sh::TType"* (%"class.sh::TIntermExpression"*)**, %"class.sh::TType"* (%"class.sh::TIntermExpression"*)*** %11, align 8
  %13 = getelementptr inbounds %"class.sh::TType"* (%"class.sh::TIntermExpression"*)*, %"class.sh::TType"* (%"class.sh::TIntermExpression"*)** %12, i64 31
  %14 = load %"class.sh::TType"* (%"class.sh::TIntermExpression"*)*, %"class.sh::TType"* (%"class.sh::TIntermExpression"*)** %13, align 8
  %15 = tail call dereferenceable(184) %"class.sh::TType"* %14(%"class.sh::TIntermExpression"* %10) #6
  tail call fastcc void @_ZN2sh12_GLOBAL__N_136RemoveUnreferencedVariablesTraverser27decrementStructTypeRefCountERKNS_5TTypeE(%"class.sh::(anonymous namespace)::RemoveUnreferencedVariablesTraverser"* %0, %"class.sh::TType"* dereferenceable(184) %15)
  br label %16

16:                                               ; preds = %5, %9, %3
  ret i1 true
}

; Function Attrs: nounwind ssp uwtable
define internal zeroext i1 @_ZN2sh12_GLOBAL__N_136RemoveUnreferencedVariablesTraverser16visitDeclarationENS_5VisitEPNS_18TIntermDeclarationE(%"class.sh::(anonymous namespace)::RemoveUnreferencedVariablesTraverser"*, i32, %"class.sh::TIntermDeclaration"*) unnamed_addr #0 align 2 {
  %4 = alloca %"class.sh::TIntermDeclaration"*, align 8
  %5 = alloca i32, align 4
  %6 = alloca %"class.sh::TVector", align 16
  %7 = alloca %"class.sh::TIntermBlock"*, align 8
  %8 = alloca i32, align 4
  %9 = alloca i32, align 4
  %10 = icmp eq i32 %1, 0
  br i1 %10, label %11, label %275

11:                                               ; preds = %3
  %12 = bitcast %"class.sh::TIntermDeclaration"* %2 to %"class.sh::TVector"* (%"class.sh::TIntermDeclaration"*)***
  %13 = load %"class.sh::TVector"* (%"class.sh::TIntermDeclaration"*)**, %"class.sh::TVector"* (%"class.sh::TIntermDeclaration"*)*** %12, align 8
  %14 = getelementptr inbounds %"class.sh::TVector"* (%"class.sh::TIntermDeclaration"*)*, %"class.sh::TVector"* (%"class.sh::TIntermDeclaration"*)** %13, i64 27
  %15 = load %"class.sh::TVector"* (%"class.sh::TIntermDeclaration"*)*, %"class.sh::TVector"* (%"class.sh::TIntermDeclaration"*)** %14, align 8
  %16 = tail call %"class.sh::TVector"* %15(%"class.sh::TIntermDeclaration"* %2) #6
  %17 = getelementptr inbounds %"class.sh::TVector", %"class.sh::TVector"* %16, i64 0, i32 0, i32 0, i32 1
  %18 = load %"class.sh::TIntermNode"**, %"class.sh::TIntermNode"*** %17, align 8
  %19 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %18, i64 -1
  %20 = load %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %19, align 8
  %21 = bitcast %"class.sh::TIntermNode"* %20 to %"class.sh::TIntermTyped"* (%"class.sh::TIntermNode"*)***
  %22 = load %"class.sh::TIntermTyped"* (%"class.sh::TIntermNode"*)**, %"class.sh::TIntermTyped"* (%"class.sh::TIntermNode"*)*** %21, align 8
  %23 = getelementptr inbounds %"class.sh::TIntermTyped"* (%"class.sh::TIntermNode"*)*, %"class.sh::TIntermTyped"* (%"class.sh::TIntermNode"*)** %22, i64 4
  %24 = load %"class.sh::TIntermTyped"* (%"class.sh::TIntermNode"*)*, %"class.sh::TIntermTyped"* (%"class.sh::TIntermNode"*)** %23, align 8
  %25 = tail call %"class.sh::TIntermTyped"* %24(%"class.sh::TIntermNode"* %20) #6
  %26 = bitcast %"class.sh::TIntermTyped"* %25 to %"class.sh::TType"* (%"class.sh::TIntermTyped"*)***
  %27 = load %"class.sh::TType"* (%"class.sh::TIntermTyped"*)**, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*** %26, align 8
  %28 = getelementptr inbounds %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)** %27, i64 31
  %29 = load %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)** %28, align 8
  %30 = tail call dereferenceable(184) %"class.sh::TType"* %29(%"class.sh::TIntermTyped"* %25) #6
  %31 = getelementptr inbounds %"class.sh::TType", %"class.sh::TType"* %30, i64 0, i32 2
  %32 = load i32, i32* %31, align 8
  %33 = icmp ugt i32 %32, 2
  br i1 %33, label %277, label %34

34:                                               ; preds = %11
  %35 = getelementptr inbounds %"class.sh::TIntermTyped", %"class.sh::TIntermTyped"* %25, i64 0, i32 0
  %36 = bitcast %"class.sh::TIntermTyped"* %25 to %"class.sh::TIntermSymbol"* (%"class.sh::TIntermNode"*)***
  %37 = load %"class.sh::TIntermSymbol"* (%"class.sh::TIntermNode"*)**, %"class.sh::TIntermSymbol"* (%"class.sh::TIntermNode"*)*** %36, align 8
  %38 = getelementptr inbounds %"class.sh::TIntermSymbol"* (%"class.sh::TIntermNode"*)*, %"class.sh::TIntermSymbol"* (%"class.sh::TIntermNode"*)** %37, i64 19
  %39 = load %"class.sh::TIntermSymbol"* (%"class.sh::TIntermNode"*)*, %"class.sh::TIntermSymbol"* (%"class.sh::TIntermNode"*)** %38, align 8
  %40 = tail call %"class.sh::TIntermSymbol"* %39(%"class.sh::TIntermNode"* %35) #6
  %41 = icmp eq %"class.sh::TIntermSymbol"* %40, null
  br i1 %41, label %62, label %42

42:                                               ; preds = %34
  %43 = getelementptr inbounds %"class.sh::(anonymous namespace)::RemoveUnreferencedVariablesTraverser", %"class.sh::(anonymous namespace)::RemoveUnreferencedVariablesTraverser"* %0, i64 0, i32 1
  %44 = bitcast %"class.absl::flat_hash_map"** %43 to %"class.absl::container_internal::raw_hash_map"**
  %45 = load %"class.absl::container_internal::raw_hash_map"*, %"class.absl::container_internal::raw_hash_map"** %44, align 8
  %46 = bitcast i32* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %46) #6
  %47 = tail call dereferenceable(4) %"class.sh::TSymbolUniqueId"* @_ZNK2sh13TIntermSymbol8uniqueIdEv(%"class.sh::TIntermSymbol"* nonnull %40) #6
  %48 = getelementptr inbounds %"class.sh::TSymbolUniqueId", %"class.sh::TSymbolUniqueId"* %47, i64 0, i32 0
  %49 = load i32, i32* %48, align 4
  store i32 %49, i32* %8, align 4
  %50 = call dereferenceable(4) i32* @_ZN4absl18container_internal12raw_hash_mapINS0_17FlatHashMapPolicyIijEENS_13hash_internal4HashIiEENSt3__18equal_toIiEENS7_9allocatorINS7_4pairIKijEEEEEixIiS3_LPi0EEEDTclsrT0_5valueclL_ZNS7_9addressofISD_EEPT_RSK_EclL_ZNS7_7declvalIRSD_EEDTclsr3std3__1E9__declvalISK_ELi0EEEvEEEEEOi(%"class.absl::container_internal::raw_hash_map"* %45, i32* nonnull dereferenceable(4) %8)
  %51 = load i32, i32* %50, align 4
  %52 = icmp eq i32 %51, 1
  br i1 %52, label %60, label %53

53:                                               ; preds = %42
  %54 = getelementptr inbounds %"class.sh::TIntermSymbol", %"class.sh::TIntermSymbol"* %40, i64 0, i32 1
  %55 = bitcast %"class.sh::TVariable"** %54 to %"class.sh::TSymbol"**
  %56 = load %"class.sh::TSymbol"*, %"class.sh::TSymbol"** %55, align 8
  %57 = getelementptr inbounds %"class.sh::TSymbol", %"class.sh::TSymbol"* %56, i64 0, i32 2
  %58 = load i8, i8* %57, align 4
  %59 = icmp eq i8 %58, 3
  br label %60

60:                                               ; preds = %53, %42
  %61 = phi i1 [ true, %42 ], [ %59, %53 ]
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %46) #6
  br label %62

62:                                               ; preds = %34, %60
  %63 = phi i1 [ %61, %60 ], [ false, %34 ]
  %64 = bitcast %"class.sh::TIntermTyped"* %25 to %"class.sh::TIntermBinary"* (%"class.sh::TIntermNode"*)***
  %65 = load %"class.sh::TIntermBinary"* (%"class.sh::TIntermNode"*)**, %"class.sh::TIntermBinary"* (%"class.sh::TIntermNode"*)*** %64, align 8
  %66 = getelementptr inbounds %"class.sh::TIntermBinary"* (%"class.sh::TIntermNode"*)*, %"class.sh::TIntermBinary"* (%"class.sh::TIntermNode"*)** %65, i64 13
  %67 = load %"class.sh::TIntermBinary"* (%"class.sh::TIntermNode"*)*, %"class.sh::TIntermBinary"* (%"class.sh::TIntermNode"*)** %66, align 8
  %68 = call %"class.sh::TIntermBinary"* %67(%"class.sh::TIntermNode"* %35) #6
  %69 = icmp eq %"class.sh::TIntermBinary"* %68, null
  br i1 %69, label %98, label %70

70:                                               ; preds = %62
  %71 = bitcast i32* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %71) #6
  store i32 -1431655766, i32* %9, align 4
  %72 = getelementptr inbounds %"class.sh::TIntermBinary", %"class.sh::TIntermBinary"* %68, i64 0, i32 2
  %73 = load %"class.sh::TIntermTyped"*, %"class.sh::TIntermTyped"** %72, align 8
  %74 = getelementptr inbounds %"class.sh::TIntermTyped", %"class.sh::TIntermTyped"* %73, i64 0, i32 0
  %75 = bitcast %"class.sh::TIntermTyped"* %73 to %"class.sh::TIntermSymbol"* (%"class.sh::TIntermNode"*)***
  %76 = load %"class.sh::TIntermSymbol"* (%"class.sh::TIntermNode"*)**, %"class.sh::TIntermSymbol"* (%"class.sh::TIntermNode"*)*** %75, align 8
  %77 = getelementptr inbounds %"class.sh::TIntermSymbol"* (%"class.sh::TIntermNode"*)*, %"class.sh::TIntermSymbol"* (%"class.sh::TIntermNode"*)** %76, i64 19
  %78 = load %"class.sh::TIntermSymbol"* (%"class.sh::TIntermNode"*)*, %"class.sh::TIntermSymbol"* (%"class.sh::TIntermNode"*)** %77, align 8
  %79 = call %"class.sh::TIntermSymbol"* %78(%"class.sh::TIntermNode"* %74) #6
  %80 = call dereferenceable(4) %"class.sh::TSymbolUniqueId"* @_ZNK2sh13TIntermSymbol8uniqueIdEv(%"class.sh::TIntermSymbol"* %79) #6
  %81 = getelementptr inbounds %"class.sh::TSymbolUniqueId", %"class.sh::TSymbolUniqueId"* %80, i64 0, i32 0
  %82 = load i32, i32* %81, align 4
  store i32 %82, i32* %9, align 4
  %83 = getelementptr inbounds %"class.sh::(anonymous namespace)::RemoveUnreferencedVariablesTraverser", %"class.sh::(anonymous namespace)::RemoveUnreferencedVariablesTraverser"* %0, i64 0, i32 1
  %84 = bitcast %"class.absl::flat_hash_map"** %83 to %"class.absl::container_internal::raw_hash_map"**
  %85 = load %"class.absl::container_internal::raw_hash_map"*, %"class.absl::container_internal::raw_hash_map"** %84, align 8
  %86 = call dereferenceable(4) i32* @_ZN4absl18container_internal12raw_hash_mapINS0_17FlatHashMapPolicyIijEENS_13hash_internal4HashIiEENSt3__18equal_toIiEENS7_9allocatorINS7_4pairIKijEEEEEixIiS3_EEDTclsrT0_5valueclL_ZNS7_9addressofISD_EEPT_RSJ_EclL_ZNS7_7declvalIRSD_EEDTclsr3std3__1E9__declvalISJ_ELi0EEEvEEEEERSC_(%"class.absl::container_internal::raw_hash_map"* %85, i32* nonnull dereferenceable(4) %9)
  %87 = load i32, i32* %86, align 4
  %88 = icmp eq i32 %87, 1
  br i1 %88, label %90, label %89

89:                                               ; preds = %70
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %71) #6
  br label %277

90:                                               ; preds = %70
  %91 = getelementptr inbounds %"class.sh::TIntermBinary", %"class.sh::TIntermBinary"* %68, i64 0, i32 3
  %92 = load %"class.sh::TIntermTyped"*, %"class.sh::TIntermTyped"** %91, align 8
  %93 = bitcast %"class.sh::TIntermTyped"* %92 to i1 (%"class.sh::TIntermTyped"*)***
  %94 = load i1 (%"class.sh::TIntermTyped"*)**, i1 (%"class.sh::TIntermTyped"*)*** %93, align 8
  %95 = getelementptr inbounds i1 (%"class.sh::TIntermTyped"*)*, i1 (%"class.sh::TIntermTyped"*)** %94, i64 30
  %96 = load i1 (%"class.sh::TIntermTyped"*)*, i1 (%"class.sh::TIntermTyped"*)** %95, align 8
  %97 = call zeroext i1 %96(%"class.sh::TIntermTyped"* %92) #6
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %71) #6
  br i1 %97, label %277, label %99

98:                                               ; preds = %62
  br i1 %63, label %99, label %277

99:                                               ; preds = %90, %98
  %100 = bitcast %"class.sh::TIntermDeclaration"** %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %100)
  store %"class.sh::TIntermDeclaration"* %2, %"class.sh::TIntermDeclaration"** %4, align 8
  %101 = load %"class.sh::TType"* (%"class.sh::TIntermTyped"*)**, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*** %26, align 8
  %102 = getelementptr inbounds %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)** %101, i64 31
  %103 = load %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)** %102, align 8
  %104 = call dereferenceable(184) %"class.sh::TType"* %103(%"class.sh::TIntermTyped"* %25) #6
  %105 = getelementptr inbounds %"class.sh::TType", %"class.sh::TType"* %104, i64 0, i32 14
  %106 = load i8, i8* %105, align 8, !range !8
  %107 = icmp eq i8 %106, 0
  br i1 %107, label %190, label %108

108:                                              ; preds = %99
  %109 = load %"class.sh::TType"* (%"class.sh::TIntermTyped"*)**, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*** %26, align 8
  %110 = getelementptr inbounds %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)** %109, i64 31
  %111 = load %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)** %110, align 8
  %112 = call dereferenceable(184) %"class.sh::TType"* %111(%"class.sh::TIntermTyped"* %25) #6
  %113 = call zeroext i1 @_ZNK2sh5TType16isNamelessStructEv(%"class.sh::TType"* %112) #6
  br i1 %113, label %190, label %114

114:                                              ; preds = %108
  %115 = load %"class.sh::TType"* (%"class.sh::TIntermTyped"*)**, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*** %26, align 8
  %116 = getelementptr inbounds %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)** %115, i64 31
  %117 = load %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)** %116, align 8
  %118 = call dereferenceable(184) %"class.sh::TType"* %117(%"class.sh::TIntermTyped"* %25) #6
  %119 = getelementptr inbounds %"class.sh::TType", %"class.sh::TType"* %118, i64 0, i32 13
  %120 = bitcast %"class.sh::TStructure"** %119 to %"class.sh::TSymbol"**
  %121 = load %"class.sh::TSymbol"*, %"class.sh::TSymbol"** %120, align 8
  %122 = getelementptr inbounds %"class.sh::TSymbol", %"class.sh::TSymbol"* %121, i64 0, i32 1, i32 0
  %123 = load i32, i32* %122, align 4
  %124 = load %"class.sh::TIntermBinary"* (%"class.sh::TIntermNode"*)**, %"class.sh::TIntermBinary"* (%"class.sh::TIntermNode"*)*** %64, align 8
  %125 = getelementptr inbounds %"class.sh::TIntermBinary"* (%"class.sh::TIntermNode"*)*, %"class.sh::TIntermBinary"* (%"class.sh::TIntermNode"*)** %124, i64 13
  %126 = load %"class.sh::TIntermBinary"* (%"class.sh::TIntermNode"*)*, %"class.sh::TIntermBinary"* (%"class.sh::TIntermNode"*)** %125, align 8
  %127 = call %"class.sh::TIntermBinary"* %126(%"class.sh::TIntermNode"* %35) #6
  %128 = icmp eq %"class.sh::TIntermBinary"* %127, null
  br i1 %128, label %144, label %129

129:                                              ; preds = %114
  %130 = load %"class.sh::TIntermBinary"* (%"class.sh::TIntermNode"*)**, %"class.sh::TIntermBinary"* (%"class.sh::TIntermNode"*)*** %64, align 8
  %131 = getelementptr inbounds %"class.sh::TIntermBinary"* (%"class.sh::TIntermNode"*)*, %"class.sh::TIntermBinary"* (%"class.sh::TIntermNode"*)** %130, i64 13
  %132 = load %"class.sh::TIntermBinary"* (%"class.sh::TIntermNode"*)*, %"class.sh::TIntermBinary"* (%"class.sh::TIntermNode"*)** %131, align 8
  %133 = call %"class.sh::TIntermBinary"* %132(%"class.sh::TIntermNode"* %35) #6
  %134 = getelementptr inbounds %"class.sh::TIntermBinary", %"class.sh::TIntermBinary"* %133, i64 0, i32 3
  %135 = load %"class.sh::TIntermTyped"*, %"class.sh::TIntermTyped"** %134, align 8
  %136 = getelementptr inbounds %"class.sh::TIntermTyped", %"class.sh::TIntermTyped"* %135, i64 0, i32 0
  %137 = bitcast %"class.sh::TIntermTyped"* %135 to %"class.sh::TIntermAggregate"* (%"class.sh::TIntermNode"*)***
  %138 = load %"class.sh::TIntermAggregate"* (%"class.sh::TIntermNode"*)**, %"class.sh::TIntermAggregate"* (%"class.sh::TIntermNode"*)*** %137, align 8
  %139 = getelementptr inbounds %"class.sh::TIntermAggregate"* (%"class.sh::TIntermNode"*)*, %"class.sh::TIntermAggregate"* (%"class.sh::TIntermNode"*)** %138, i64 7
  %140 = load %"class.sh::TIntermAggregate"* (%"class.sh::TIntermNode"*)*, %"class.sh::TIntermAggregate"* (%"class.sh::TIntermNode"*)** %139, align 8
  %141 = call %"class.sh::TIntermAggregate"* %140(%"class.sh::TIntermNode"* %136) #6
  %142 = icmp eq %"class.sh::TIntermAggregate"* %141, null
  %143 = select i1 %142, i32 1, i32 2
  br label %144

144:                                              ; preds = %129, %114
  %145 = phi i32 [ 1, %114 ], [ %143, %129 ]
  %146 = getelementptr inbounds %"class.sh::(anonymous namespace)::RemoveUnreferencedVariablesTraverser", %"class.sh::(anonymous namespace)::RemoveUnreferencedVariablesTraverser"* %0, i64 0, i32 2
  %147 = bitcast %"class.absl::flat_hash_map"** %146 to %"class.absl::container_internal::raw_hash_map"**
  %148 = load %"class.absl::container_internal::raw_hash_map"*, %"class.absl::container_internal::raw_hash_map"** %147, align 8
  %149 = bitcast i32* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %149) #6
  store i32 %123, i32* %5, align 4
  %150 = call dereferenceable(4) i32* @_ZN4absl18container_internal12raw_hash_mapINS0_17FlatHashMapPolicyIijEENS_13hash_internal4HashIiEENSt3__18equal_toIiEENS7_9allocatorINS7_4pairIKijEEEEEixIiS3_LPi0EEEDTclsrT0_5valueclL_ZNS7_9addressofISD_EEPT_RSK_EclL_ZNS7_7declvalIRSD_EEDTclsr3std3__1E9__declvalISK_ELi0EEEvEEEEEOi(%"class.absl::container_internal::raw_hash_map"* %148, i32* nonnull dereferenceable(4) %5) #6
  %151 = load i32, i32* %150, align 4
  %152 = icmp ugt i32 %151, %145
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %149) #6
  br i1 %152, label %153, label %190

153:                                              ; preds = %144
  %154 = load %"class.sh::TIntermSymbol"* (%"class.sh::TIntermNode"*)**, %"class.sh::TIntermSymbol"* (%"class.sh::TIntermNode"*)*** %36, align 8
  %155 = getelementptr inbounds %"class.sh::TIntermSymbol"* (%"class.sh::TIntermNode"*)*, %"class.sh::TIntermSymbol"* (%"class.sh::TIntermNode"*)** %154, i64 19
  %156 = load %"class.sh::TIntermSymbol"* (%"class.sh::TIntermNode"*)*, %"class.sh::TIntermSymbol"* (%"class.sh::TIntermNode"*)** %155, align 8
  %157 = call %"class.sh::TIntermSymbol"* %156(%"class.sh::TIntermNode"* %35) #6
  %158 = icmp eq %"class.sh::TIntermSymbol"* %157, null
  br i1 %158, label %170, label %159

159:                                              ; preds = %153
  %160 = load %"class.sh::TIntermSymbol"* (%"class.sh::TIntermNode"*)**, %"class.sh::TIntermSymbol"* (%"class.sh::TIntermNode"*)*** %36, align 8
  %161 = getelementptr inbounds %"class.sh::TIntermSymbol"* (%"class.sh::TIntermNode"*)*, %"class.sh::TIntermSymbol"* (%"class.sh::TIntermNode"*)** %160, i64 19
  %162 = load %"class.sh::TIntermSymbol"* (%"class.sh::TIntermNode"*)*, %"class.sh::TIntermSymbol"* (%"class.sh::TIntermNode"*)** %161, align 8
  %163 = call %"class.sh::TIntermSymbol"* %162(%"class.sh::TIntermNode"* %35) #6
  %164 = getelementptr inbounds %"class.sh::TIntermSymbol", %"class.sh::TIntermSymbol"* %163, i64 0, i32 1
  %165 = bitcast %"class.sh::TVariable"** %164 to %"class.sh::TSymbol"**
  %166 = load %"class.sh::TSymbol"*, %"class.sh::TSymbol"** %165, align 8
  %167 = getelementptr inbounds %"class.sh::TSymbol", %"class.sh::TSymbol"* %166, i64 0, i32 2
  %168 = load i8, i8* %167, align 4
  %169 = icmp eq i8 %168, 3
  br i1 %169, label %273, label %170

170:                                              ; preds = %159, %153
  %171 = call %"class.angle::PoolAllocator"* @_Z22GetGlobalPoolAllocatorv() #6
  %172 = call i8* @_ZN5angle13PoolAllocator8allocateEm(%"class.angle::PoolAllocator"* %171, i64 40) #6
  %173 = bitcast i8* %172 to %"class.sh::TVariable"*
  %174 = getelementptr inbounds %"class.sh::(anonymous namespace)::RemoveUnreferencedVariablesTraverser", %"class.sh::(anonymous namespace)::RemoveUnreferencedVariablesTraverser"* %0, i64 0, i32 0
  %175 = getelementptr inbounds %"class.sh::(anonymous namespace)::RemoveUnreferencedVariablesTraverser", %"class.sh::(anonymous namespace)::RemoveUnreferencedVariablesTraverser"* %0, i64 0, i32 0, i32 8
  %176 = load %"class.sh::TSymbolTable"*, %"class.sh::TSymbolTable"** %175, align 8
  %177 = call %"class.angle::PoolAllocator"* @_Z22GetGlobalPoolAllocatorv() #6
  %178 = call i8* @_ZN5angle13PoolAllocator8allocateEm(%"class.angle::PoolAllocator"* %177, i64 184) #6
  %179 = bitcast i8* %178 to %"class.sh::TType"*
  %180 = load %"class.sh::TType"* (%"class.sh::TIntermTyped"*)**, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*** %26, align 8
  %181 = getelementptr inbounds %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)** %180, i64 31
  %182 = load %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)** %181, align 8
  %183 = call dereferenceable(184) %"class.sh::TType"* %182(%"class.sh::TIntermTyped"* %25) #6
  call void @_ZN2sh5TTypeC1ERKS0_(%"class.sh::TType"* %179, %"class.sh::TType"* dereferenceable(184) %183) #6
  call void @_ZN2sh9TVariableC1EPNS_12TSymbolTableERKNS_15ImmutableStringEPKNS_5TTypeENS_10SymbolTypeENS_10TExtensionE(%"class.sh::TVariable"* %173, %"class.sh::TSymbolTable"* %176, %"class.sh::ImmutableString"* nonnull dereferenceable(16) @_ZN2shL21kEmptyImmutableStringE, %"class.sh::TType"* %179, i8 zeroext 3, i8 zeroext 0) #6
  %184 = bitcast %"class.sh::TIntermDeclaration"** %4 to %"class.sh::TIntermNode"**
  %185 = load %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %184, align 8
  %186 = call %"class.angle::PoolAllocator"* @_Z22GetGlobalPoolAllocatorv() #6
  %187 = call i8* @_ZN5angle13PoolAllocator8allocateEm(%"class.angle::PoolAllocator"* %186, i64 32) #6
  %188 = bitcast i8* %187 to %"class.sh::TIntermSymbol"*
  call void @_ZN2sh13TIntermSymbolC1EPKNS_9TVariableE(%"class.sh::TIntermSymbol"* %188, %"class.sh::TVariable"* %173) #6
  %189 = bitcast i8* %187 to %"class.sh::TIntermNode"*
  call void @_ZN2sh16TIntermTraverser26queueReplacementWithParentEPNS_11TIntermNodeES2_S2_NS0_12OriginalNodeE(%"class.sh::TIntermTraverser"* %174, %"class.sh::TIntermNode"* %185, %"class.sh::TIntermNode"* %35, %"class.sh::TIntermNode"* %189, i32 1) #6
  br label %273

190:                                              ; preds = %144, %108, %99
  %191 = getelementptr inbounds %"class.sh::(anonymous namespace)::RemoveUnreferencedVariablesTraverser", %"class.sh::(anonymous namespace)::RemoveUnreferencedVariablesTraverser"* %0, i64 0, i32 0
  %192 = getelementptr inbounds %"class.sh::(anonymous namespace)::RemoveUnreferencedVariablesTraverser", %"class.sh::(anonymous namespace)::RemoveUnreferencedVariablesTraverser"* %0, i64 0, i32 0, i32 11, i32 0
  %193 = getelementptr inbounds %"class.sh::(anonymous namespace)::RemoveUnreferencedVariablesTraverser", %"class.sh::(anonymous namespace)::RemoveUnreferencedVariablesTraverser"* %0, i64 0, i32 0, i32 11, i32 0, i32 0, i32 1
  %194 = bitcast %"class.sh::TIntermNode"*** %193 to i64*
  %195 = load i64, i64* %194, align 8
  %196 = bitcast %"class.std::__1::vector"* %192 to i64*
  %197 = load i64, i64* %196, align 8
  %198 = sub i64 %195, %197
  %199 = ashr exact i64 %198, 3
  %200 = icmp ult i64 %199, 2
  br i1 %200, label %207, label %201

201:                                              ; preds = %190
  %202 = inttoptr i64 %197 to %"class.sh::TIntermNode"**
  %203 = add nsw i64 %199, -2
  %204 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %202, i64 %203
  %205 = load %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %204, align 8
  %206 = bitcast %"class.sh::TIntermNode"* %205 to %"class.sh::TIntermBlock"* (%"class.sh::TIntermNode"*)***
  br label %207

207:                                              ; preds = %201, %190
  %208 = phi %"class.sh::TIntermBlock"* (%"class.sh::TIntermNode"*)*** [ %206, %201 ], [ null, %190 ]
  %209 = phi %"class.sh::TIntermNode"* [ %205, %201 ], [ null, %190 ]
  %210 = load %"class.sh::TIntermBlock"* (%"class.sh::TIntermNode"*)**, %"class.sh::TIntermBlock"* (%"class.sh::TIntermNode"*)*** %208, align 8
  %211 = getelementptr inbounds %"class.sh::TIntermBlock"* (%"class.sh::TIntermNode"*)*, %"class.sh::TIntermBlock"* (%"class.sh::TIntermNode"*)** %210, i64 8
  %212 = load %"class.sh::TIntermBlock"* (%"class.sh::TIntermNode"*)*, %"class.sh::TIntermBlock"* (%"class.sh::TIntermNode"*)** %211, align 8
  %213 = call %"class.sh::TIntermBlock"* %212(%"class.sh::TIntermNode"* %209) #6
  %214 = icmp eq %"class.sh::TIntermBlock"* %213, null
  br i1 %214, label %272, label %215

215:                                              ; preds = %207
  %216 = bitcast %"class.sh::TVector"* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %216) #6
  %217 = getelementptr inbounds %"class.sh::TVector", %"class.sh::TVector"* %6, i64 0, i32 0, i32 0, i32 0
  %218 = getelementptr inbounds %"class.sh::TVector", %"class.sh::TVector"* %6, i64 0, i32 0, i32 0, i32 1
  %219 = getelementptr inbounds %"class.sh::TVector", %"class.sh::TVector"* %6, i64 0, i32 0, i32 0, i32 2, i32 0, i32 0
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %216, i8 0, i64 24, i1 false) #6
  %220 = getelementptr inbounds %"class.sh::(anonymous namespace)::RemoveUnreferencedVariablesTraverser", %"class.sh::(anonymous namespace)::RemoveUnreferencedVariablesTraverser"* %0, i64 0, i32 0, i32 7
  %221 = bitcast %"class.sh::TIntermBlock"** %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %221) #6
  %222 = load i64, i64* %194, align 8
  %223 = load i64, i64* %196, align 8
  %224 = sub i64 %222, %223
  %225 = ashr exact i64 %224, 3
  %226 = icmp ult i64 %225, 2
  br i1 %226, label %233, label %227

227:                                              ; preds = %215
  %228 = inttoptr i64 %223 to %"class.sh::TIntermNode"**
  %229 = add nsw i64 %225, -2
  %230 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %228, i64 %229
  %231 = load %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %230, align 8
  %232 = bitcast %"class.sh::TIntermNode"* %231 to %"class.sh::TIntermBlock"* (%"class.sh::TIntermNode"*)***
  br label %233

233:                                              ; preds = %227, %215
  %234 = phi %"class.sh::TIntermBlock"* (%"class.sh::TIntermNode"*)*** [ %232, %227 ], [ null, %215 ]
  %235 = phi %"class.sh::TIntermNode"* [ %231, %227 ], [ null, %215 ]
  %236 = load %"class.sh::TIntermBlock"* (%"class.sh::TIntermNode"*)**, %"class.sh::TIntermBlock"* (%"class.sh::TIntermNode"*)*** %234, align 8
  %237 = getelementptr inbounds %"class.sh::TIntermBlock"* (%"class.sh::TIntermNode"*)*, %"class.sh::TIntermBlock"* (%"class.sh::TIntermNode"*)** %236, i64 8
  %238 = load %"class.sh::TIntermBlock"* (%"class.sh::TIntermNode"*)*, %"class.sh::TIntermBlock"* (%"class.sh::TIntermNode"*)** %237, align 8
  %239 = call %"class.sh::TIntermBlock"* %238(%"class.sh::TIntermNode"* %235) #6
  store %"class.sh::TIntermBlock"* %239, %"class.sh::TIntermBlock"** %7, align 8
  %240 = getelementptr inbounds %"class.sh::(anonymous namespace)::RemoveUnreferencedVariablesTraverser", %"class.sh::(anonymous namespace)::RemoveUnreferencedVariablesTraverser"* %0, i64 0, i32 0, i32 7, i32 0, i32 1
  %241 = load %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry"*, %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry"** %240, align 8
  %242 = getelementptr inbounds %"class.sh::(anonymous namespace)::RemoveUnreferencedVariablesTraverser", %"class.sh::(anonymous namespace)::RemoveUnreferencedVariablesTraverser"* %0, i64 0, i32 0, i32 7, i32 0, i32 2, i32 0, i32 0
  %243 = load %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry"*, %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry"** %242, align 8
  %244 = icmp ult %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry"* %241, %243
  br i1 %244, label %245, label %265

245:                                              ; preds = %233
  %246 = icmp eq %"class.sh::TIntermBlock"* %239, null
  %247 = getelementptr inbounds %"class.sh::TIntermBlock", %"class.sh::TIntermBlock"* %239, i64 0, i32 1
  %248 = select i1 %246, %"class.sh::TIntermAggregateBase"* null, %"class.sh::TIntermAggregateBase"* %247
  %249 = bitcast %"class.sh::TIntermDeclaration"** %4 to i64*
  %250 = load i64, i64* %249, align 8
  %251 = getelementptr inbounds %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry", %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry"* %241, i64 0, i32 0
  store %"class.sh::TIntermAggregateBase"* %248, %"class.sh::TIntermAggregateBase"** %251, align 8
  %252 = getelementptr inbounds %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry", %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry"* %241, i64 0, i32 1
  %253 = bitcast %"class.sh::TIntermNode"** %252 to i64*
  store i64 %250, i64* %253, align 8
  %254 = getelementptr inbounds %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry", %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry"* %241, i64 0, i32 2
  %255 = bitcast %"class.sh::TVector"* %6 to <2 x i64>*
  %256 = load <2 x i64>, <2 x i64>* %255, align 16
  %257 = bitcast %"class.sh::TVector"* %254 to <2 x i64>*
  store <2 x i64> %256, <2 x i64>* %257, align 8
  %258 = bitcast %"class.sh::TIntermNode"*** %219 to i64*
  %259 = load i64, i64* %258, align 16
  %260 = getelementptr inbounds %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry", %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry"* %241, i64 0, i32 2, i32 0, i32 0, i32 2, i32 0, i32 0
  %261 = bitcast %"class.sh::TIntermNode"*** %260 to i64*
  store i64 %259, i64* %261, align 8
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %216, i8 0, i64 24, i1 false) #6
  %262 = getelementptr inbounds %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry", %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry"* %241, i64 1
  %263 = ptrtoint %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry"* %262 to i64
  %264 = bitcast %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry"** %240 to i64*
  store i64 %263, i64* %264, align 8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %221) #6
  br label %271

265:                                              ; preds = %233
  call void @_ZNSt3__16vectorIN2sh16TIntermTraverser28NodeReplaceWithMultipleEntryENS_9allocatorIS3_EEE24__emplace_back_slow_pathIJPNS1_12TIntermBlockERPNS1_18TIntermDeclarationENS1_7TVectorIPNS1_11TIntermNodeEEEEEEvDpOT_(%"class.std::__1::vector.37"* %220, %"class.sh::TIntermBlock"** nonnull dereferenceable(8) %7, %"class.sh::TIntermDeclaration"** nonnull dereferenceable(8) %4, %"class.sh::TVector"* nonnull dereferenceable(24) %6) #6
  %266 = load %"class.sh::TIntermNode"**, %"class.sh::TIntermNode"*** %217, align 16
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %221) #6
  %267 = icmp eq %"class.sh::TIntermNode"** %266, null
  br i1 %267, label %271, label %268

268:                                              ; preds = %265
  %269 = ptrtoint %"class.sh::TIntermNode"** %266 to i64
  %270 = bitcast %"class.sh::TIntermNode"*** %218 to i64*
  store i64 %269, i64* %270, align 8
  br label %271

271:                                              ; preds = %268, %265, %245
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %216) #6
  br label %273

272:                                              ; preds = %207
  call void @_ZN2sh16TIntermTraverser16queueReplacementEPNS_11TIntermNodeENS0_12OriginalNodeE(%"class.sh::TIntermTraverser"* %191, %"class.sh::TIntermNode"* null, i32 1) #6
  br label %273

273:                                              ; preds = %159, %170, %271, %272
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %100)
  %274 = getelementptr inbounds %"class.sh::(anonymous namespace)::RemoveUnreferencedVariablesTraverser", %"class.sh::(anonymous namespace)::RemoveUnreferencedVariablesTraverser"* %0, i64 0, i32 3
  store i8 1, i8* %274, align 8
  br label %277

275:                                              ; preds = %3
  %276 = getelementptr inbounds %"class.sh::(anonymous namespace)::RemoveUnreferencedVariablesTraverser", %"class.sh::(anonymous namespace)::RemoveUnreferencedVariablesTraverser"* %0, i64 0, i32 3
  store i8 0, i8* %276, align 8
  br label %277

277:                                              ; preds = %90, %89, %11, %273, %98, %275
  ret i1 true
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN2sh12_GLOBAL__N_136RemoveUnreferencedVariablesTraverser13traverseBlockEPNS_12TIntermBlockE(%"class.sh::(anonymous namespace)::RemoveUnreferencedVariablesTraverser"*, %"class.sh::TIntermBlock"*) unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"class.sh::(anonymous namespace)::RemoveUnreferencedVariablesTraverser", %"class.sh::(anonymous namespace)::RemoveUnreferencedVariablesTraverser"* %0, i64 0, i32 0
  %4 = getelementptr inbounds %"class.sh::TIntermBlock", %"class.sh::TIntermBlock"* %1, i64 0, i32 0
  %5 = tail call zeroext i1 @_ZN2sh16TIntermTraverser14incrementDepthEPNS_11TIntermNodeE(%"class.sh::TIntermTraverser"* %3, %"class.sh::TIntermNode"* %4) #6
  %6 = bitcast %"class.sh::TIntermBlock"* %1 to %"class.sh::TVector"* (%"class.sh::TIntermBlock"*)***
  %7 = load %"class.sh::TVector"* (%"class.sh::TIntermBlock"*)**, %"class.sh::TVector"* (%"class.sh::TIntermBlock"*)*** %6, align 8
  %8 = getelementptr inbounds %"class.sh::TVector"* (%"class.sh::TIntermBlock"*)*, %"class.sh::TVector"* (%"class.sh::TIntermBlock"*)** %7, i64 27
  %9 = load %"class.sh::TVector"* (%"class.sh::TIntermBlock"*)*, %"class.sh::TVector"* (%"class.sh::TIntermBlock"*)** %8, align 8
  %10 = tail call %"class.sh::TVector"* %9(%"class.sh::TIntermBlock"* %1) #6
  %11 = getelementptr inbounds %"class.sh::(anonymous namespace)::RemoveUnreferencedVariablesTraverser", %"class.sh::(anonymous namespace)::RemoveUnreferencedVariablesTraverser"* %0, i64 0, i32 0, i32 1
  %12 = load i8, i8* %11, align 8, !range !8
  %13 = icmp eq i8 %12, 0
  br i1 %13, label %20, label %14

14:                                               ; preds = %2
  %15 = bitcast %"class.sh::(anonymous namespace)::RemoveUnreferencedVariablesTraverser"* %0 to i1 (%"class.sh::TIntermTraverser"*, i32, %"class.sh::TIntermBlock"*)***
  %16 = load i1 (%"class.sh::TIntermTraverser"*, i32, %"class.sh::TIntermBlock"*)**, i1 (%"class.sh::TIntermTraverser"*, i32, %"class.sh::TIntermBlock"*)*** %15, align 8
  %17 = getelementptr inbounds i1 (%"class.sh::TIntermTraverser"*, i32, %"class.sh::TIntermBlock"*)*, i1 (%"class.sh::TIntermTraverser"*, i32, %"class.sh::TIntermBlock"*)** %16, i64 14
  %18 = load i1 (%"class.sh::TIntermTraverser"*, i32, %"class.sh::TIntermBlock"*)*, i1 (%"class.sh::TIntermTraverser"*, i32, %"class.sh::TIntermBlock"*)** %17, align 8
  %19 = tail call zeroext i1 %18(%"class.sh::TIntermTraverser"* %3, i32 0, %"class.sh::TIntermBlock"* %1) #6
  br i1 %19, label %20, label %69

20:                                               ; preds = %14, %2
  %21 = getelementptr inbounds %"class.sh::TVector", %"class.sh::TVector"* %10, i64 0, i32 0, i32 0, i32 1
  %22 = load %"class.sh::TIntermNode"**, %"class.sh::TIntermNode"*** %21, align 8
  %23 = getelementptr inbounds %"class.sh::TVector", %"class.sh::TVector"* %10, i64 0, i32 0, i32 0, i32 0
  %24 = load %"class.sh::TIntermNode"**, %"class.sh::TIntermNode"*** %23, align 8
  %25 = icmp eq %"class.sh::TIntermNode"** %22, %24
  br i1 %25, label %59, label %26

26:                                               ; preds = %20
  %27 = getelementptr inbounds %"class.sh::(anonymous namespace)::RemoveUnreferencedVariablesTraverser", %"class.sh::(anonymous namespace)::RemoveUnreferencedVariablesTraverser"* %0, i64 0, i32 0, i32 2
  %28 = bitcast %"class.sh::(anonymous namespace)::RemoveUnreferencedVariablesTraverser"* %0 to i1 (%"class.sh::TIntermTraverser"*, i32, %"class.sh::TIntermBlock"*)***
  br label %29

29:                                               ; preds = %26, %52
  %30 = phi i8 [ 1, %26 ], [ %53, %52 ]
  %31 = phi %"class.sh::TIntermNode"** [ %22, %26 ], [ %32, %52 ]
  %32 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %31, i64 -1
  %33 = load %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %32, align 8
  %34 = bitcast %"class.sh::TIntermNode"* %33 to void (%"class.sh::TIntermNode"*, %"class.sh::TIntermTraverser"*)***
  %35 = load void (%"class.sh::TIntermNode"*, %"class.sh::TIntermTraverser"*)**, void (%"class.sh::TIntermNode"*, %"class.sh::TIntermTraverser"*)*** %34, align 8
  %36 = getelementptr inbounds void (%"class.sh::TIntermNode"*, %"class.sh::TIntermTraverser"*)*, void (%"class.sh::TIntermNode"*, %"class.sh::TIntermTraverser"*)** %35, i64 2
  %37 = load void (%"class.sh::TIntermNode"*, %"class.sh::TIntermTraverser"*)*, void (%"class.sh::TIntermNode"*, %"class.sh::TIntermTraverser"*)** %36, align 8
  tail call void %37(%"class.sh::TIntermNode"* %33, %"class.sh::TIntermTraverser"* %3) #6
  %38 = and i8 %30, 1
  %39 = icmp eq i8 %38, 0
  br i1 %39, label %52, label %40

40:                                               ; preds = %29
  %41 = load i8, i8* %27, align 1, !range !8
  %42 = icmp eq i8 %41, 0
  br i1 %42, label %52, label %43

43:                                               ; preds = %40
  %44 = load %"class.sh::TIntermNode"**, %"class.sh::TIntermNode"*** %23, align 8
  %45 = icmp eq %"class.sh::TIntermNode"** %32, %44
  br i1 %45, label %52, label %46

46:                                               ; preds = %43
  %47 = load i1 (%"class.sh::TIntermTraverser"*, i32, %"class.sh::TIntermBlock"*)**, i1 (%"class.sh::TIntermTraverser"*, i32, %"class.sh::TIntermBlock"*)*** %28, align 8
  %48 = getelementptr inbounds i1 (%"class.sh::TIntermTraverser"*, i32, %"class.sh::TIntermBlock"*)*, i1 (%"class.sh::TIntermTraverser"*, i32, %"class.sh::TIntermBlock"*)** %47, i64 14
  %49 = load i1 (%"class.sh::TIntermTraverser"*, i32, %"class.sh::TIntermBlock"*)*, i1 (%"class.sh::TIntermTraverser"*, i32, %"class.sh::TIntermBlock"*)** %48, align 8
  %50 = tail call zeroext i1 %49(%"class.sh::TIntermTraverser"* %3, i32 1, %"class.sh::TIntermBlock"* %1) #6
  %51 = zext i1 %50 to i8
  br label %52

52:                                               ; preds = %43, %40, %29, %46
  %53 = phi i8 [ %51, %46 ], [ %30, %43 ], [ %30, %40 ], [ %30, %29 ]
  %54 = load %"class.sh::TIntermNode"**, %"class.sh::TIntermNode"*** %23, align 8
  %55 = icmp eq %"class.sh::TIntermNode"** %32, %54
  br i1 %55, label %56, label %29

56:                                               ; preds = %52
  %57 = and i8 %53, 1
  %58 = icmp eq i8 %57, 0
  br i1 %58, label %69, label %59

59:                                               ; preds = %20, %56
  %60 = getelementptr inbounds %"class.sh::(anonymous namespace)::RemoveUnreferencedVariablesTraverser", %"class.sh::(anonymous namespace)::RemoveUnreferencedVariablesTraverser"* %0, i64 0, i32 0, i32 3
  %61 = load i8, i8* %60, align 2, !range !8
  %62 = icmp eq i8 %61, 0
  br i1 %62, label %69, label %63

63:                                               ; preds = %59
  %64 = bitcast %"class.sh::(anonymous namespace)::RemoveUnreferencedVariablesTraverser"* %0 to i1 (%"class.sh::TIntermTraverser"*, i32, %"class.sh::TIntermBlock"*)***
  %65 = load i1 (%"class.sh::TIntermTraverser"*, i32, %"class.sh::TIntermBlock"*)**, i1 (%"class.sh::TIntermTraverser"*, i32, %"class.sh::TIntermBlock"*)*** %64, align 8
  %66 = getelementptr inbounds i1 (%"class.sh::TIntermTraverser"*, i32, %"class.sh::TIntermBlock"*)*, i1 (%"class.sh::TIntermTraverser"*, i32, %"class.sh::TIntermBlock"*)** %65, i64 14
  %67 = load i1 (%"class.sh::TIntermTraverser"*, i32, %"class.sh::TIntermBlock"*)*, i1 (%"class.sh::TIntermTraverser"*, i32, %"class.sh::TIntermBlock"*)** %66, align 8
  %68 = tail call zeroext i1 %67(%"class.sh::TIntermTraverser"* %3, i32 2, %"class.sh::TIntermBlock"* %1) #6
  br label %69

69:                                               ; preds = %14, %59, %56, %63
  %70 = getelementptr inbounds %"class.sh::(anonymous namespace)::RemoveUnreferencedVariablesTraverser", %"class.sh::(anonymous namespace)::RemoveUnreferencedVariablesTraverser"* %0, i64 0, i32 0, i32 11, i32 0, i32 0, i32 1
  %71 = load %"class.sh::TIntermNode"**, %"class.sh::TIntermNode"*** %70, align 8
  %72 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %71, i64 -1
  store %"class.sh::TIntermNode"** %72, %"class.sh::TIntermNode"*** %70, align 8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN2sh12_GLOBAL__N_136RemoveUnreferencedVariablesTraverser12traverseLoopEPNS_11TIntermLoopE(%"class.sh::(anonymous namespace)::RemoveUnreferencedVariablesTraverser"*, %"class.sh::TIntermLoop"*) unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"class.sh::(anonymous namespace)::RemoveUnreferencedVariablesTraverser", %"class.sh::(anonymous namespace)::RemoveUnreferencedVariablesTraverser"* %0, i64 0, i32 0
  %4 = getelementptr inbounds %"class.sh::TIntermLoop", %"class.sh::TIntermLoop"* %1, i64 0, i32 0
  %5 = tail call zeroext i1 @_ZN2sh16TIntermTraverser14incrementDepthEPNS_11TIntermNodeE(%"class.sh::TIntermTraverser"* %3, %"class.sh::TIntermNode"* %4) #6
  %6 = getelementptr inbounds %"class.sh::(anonymous namespace)::RemoveUnreferencedVariablesTraverser", %"class.sh::(anonymous namespace)::RemoveUnreferencedVariablesTraverser"* %0, i64 0, i32 0, i32 1
  %7 = load i8, i8* %6, align 8, !range !8
  %8 = icmp eq i8 %7, 0
  br i1 %8, label %15, label %9

9:                                                ; preds = %2
  %10 = bitcast %"class.sh::(anonymous namespace)::RemoveUnreferencedVariablesTraverser"* %0 to i1 (%"class.sh::TIntermTraverser"*, i32, %"class.sh::TIntermLoop"*)***
  %11 = load i1 (%"class.sh::TIntermTraverser"*, i32, %"class.sh::TIntermLoop"*)**, i1 (%"class.sh::TIntermTraverser"*, i32, %"class.sh::TIntermLoop"*)*** %10, align 8
  %12 = getelementptr inbounds i1 (%"class.sh::TIntermTraverser"*, i32, %"class.sh::TIntermLoop"*)*, i1 (%"class.sh::TIntermTraverser"*, i32, %"class.sh::TIntermLoop"*)** %11, i64 17
  %13 = load i1 (%"class.sh::TIntermTraverser"*, i32, %"class.sh::TIntermLoop"*)*, i1 (%"class.sh::TIntermTraverser"*, i32, %"class.sh::TIntermLoop"*)** %12, align 8
  %14 = tail call zeroext i1 %13(%"class.sh::TIntermTraverser"* %3, i32 0, %"class.sh::TIntermLoop"* %1) #6
  br i1 %14, label %15, label %39

15:                                               ; preds = %2, %9
  %16 = getelementptr inbounds %"class.sh::TIntermLoop", %"class.sh::TIntermLoop"* %1, i64 0, i32 5
  %17 = load %"class.sh::TIntermBlock"*, %"class.sh::TIntermBlock"** %16, align 8
  %18 = icmp eq %"class.sh::TIntermBlock"* %17, null
  br i1 %18, label %20, label %19

19:                                               ; preds = %15
  tail call void @_ZN2sh12TIntermBlock8traverseEPNS_16TIntermTraverserE(%"class.sh::TIntermBlock"* nonnull %17, %"class.sh::TIntermTraverser"* %3) #6
  br label %20

20:                                               ; preds = %15, %19
  %21 = getelementptr inbounds %"class.sh::TIntermLoop", %"class.sh::TIntermLoop"* %1, i64 0, i32 2
  %22 = load %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %21, align 8
  %23 = icmp eq %"class.sh::TIntermNode"* %22, null
  br i1 %23, label %29, label %24

24:                                               ; preds = %20
  %25 = bitcast %"class.sh::TIntermNode"* %22 to void (%"class.sh::TIntermNode"*, %"class.sh::TIntermTraverser"*)***
  %26 = load void (%"class.sh::TIntermNode"*, %"class.sh::TIntermTraverser"*)**, void (%"class.sh::TIntermNode"*, %"class.sh::TIntermTraverser"*)*** %25, align 8
  %27 = getelementptr inbounds void (%"class.sh::TIntermNode"*, %"class.sh::TIntermTraverser"*)*, void (%"class.sh::TIntermNode"*, %"class.sh::TIntermTraverser"*)** %26, i64 2
  %28 = load void (%"class.sh::TIntermNode"*, %"class.sh::TIntermTraverser"*)*, void (%"class.sh::TIntermNode"*, %"class.sh::TIntermTraverser"*)** %27, align 8
  tail call void %28(%"class.sh::TIntermNode"* nonnull %22, %"class.sh::TIntermTraverser"* %3) #6
  br label %29

29:                                               ; preds = %24, %20
  %30 = getelementptr inbounds %"class.sh::(anonymous namespace)::RemoveUnreferencedVariablesTraverser", %"class.sh::(anonymous namespace)::RemoveUnreferencedVariablesTraverser"* %0, i64 0, i32 0, i32 3
  %31 = load i8, i8* %30, align 2, !range !8
  %32 = icmp eq i8 %31, 0
  br i1 %32, label %39, label %33

33:                                               ; preds = %29
  %34 = bitcast %"class.sh::(anonymous namespace)::RemoveUnreferencedVariablesTraverser"* %0 to i1 (%"class.sh::TIntermTraverser"*, i32, %"class.sh::TIntermLoop"*)***
  %35 = load i1 (%"class.sh::TIntermTraverser"*, i32, %"class.sh::TIntermLoop"*)**, i1 (%"class.sh::TIntermTraverser"*, i32, %"class.sh::TIntermLoop"*)*** %34, align 8
  %36 = getelementptr inbounds i1 (%"class.sh::TIntermTraverser"*, i32, %"class.sh::TIntermLoop"*)*, i1 (%"class.sh::TIntermTraverser"*, i32, %"class.sh::TIntermLoop"*)** %35, i64 17
  %37 = load i1 (%"class.sh::TIntermTraverser"*, i32, %"class.sh::TIntermLoop"*)*, i1 (%"class.sh::TIntermTraverser"*, i32, %"class.sh::TIntermLoop"*)** %36, align 8
  %38 = tail call zeroext i1 %37(%"class.sh::TIntermTraverser"* %3, i32 2, %"class.sh::TIntermLoop"* %1) #6
  br label %39

39:                                               ; preds = %9, %29, %33
  %40 = getelementptr inbounds %"class.sh::(anonymous namespace)::RemoveUnreferencedVariablesTraverser", %"class.sh::(anonymous namespace)::RemoveUnreferencedVariablesTraverser"* %0, i64 0, i32 0, i32 11, i32 0, i32 0, i32 1
  %41 = load %"class.sh::TIntermNode"**, %"class.sh::TIntermNode"*** %40, align 8
  %42 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %41, i64 -1
  store %"class.sh::TIntermNode"** %42, %"class.sh::TIntermNode"*** %40, align 8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal fastcc void @_ZN2sh12_GLOBAL__N_136RemoveUnreferencedVariablesTraverser27decrementStructTypeRefCountERKNS_5TTypeE(%"class.sh::(anonymous namespace)::RemoveUnreferencedVariablesTraverser"* nocapture readonly, %"class.sh::TType"* nocapture readonly dereferenceable(184)) unnamed_addr #0 align 2 {
  %3 = alloca i32, align 4
  %4 = getelementptr inbounds %"class.sh::TType", %"class.sh::TType"* %1, i64 0, i32 13
  %5 = load %"class.sh::TStructure"*, %"class.sh::TStructure"** %4, align 8
  %6 = icmp eq %"class.sh::TStructure"* %5, null
  br i1 %6, label %33, label %7

7:                                                ; preds = %2
  %8 = getelementptr inbounds %"class.sh::(anonymous namespace)::RemoveUnreferencedVariablesTraverser", %"class.sh::(anonymous namespace)::RemoveUnreferencedVariablesTraverser"* %0, i64 0, i32 2
  %9 = bitcast %"class.absl::flat_hash_map"** %8 to %"class.absl::container_internal::raw_hash_map"**
  %10 = load %"class.absl::container_internal::raw_hash_map"*, %"class.absl::container_internal::raw_hash_map"** %9, align 8
  %11 = bitcast i32* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %11) #6
  %12 = getelementptr inbounds %"class.sh::TStructure", %"class.sh::TStructure"* %5, i64 0, i32 0, i32 1, i32 0
  %13 = load i32, i32* %12, align 4
  store i32 %13, i32* %3, align 4
  %14 = call dereferenceable(4) i32* @_ZN4absl18container_internal12raw_hash_mapINS0_17FlatHashMapPolicyIijEENS_13hash_internal4HashIiEENSt3__18equal_toIiEENS7_9allocatorINS7_4pairIKijEEEEEixIiS3_LPi0EEEDTclsrT0_5valueclL_ZNS7_9addressofISD_EEPT_RSK_EclL_ZNS7_7declvalIRSD_EEDTclsr3std3__1E9__declvalISK_ELi0EEEvEEEEEOi(%"class.absl::container_internal::raw_hash_map"* %10, i32* nonnull dereferenceable(4) %3)
  %15 = load i32, i32* %14, align 4
  %16 = add i32 %15, -1
  store i32 %16, i32* %14, align 4
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %11) #6
  %17 = icmp eq i32 %16, 0
  br i1 %17, label %18, label %33

18:                                               ; preds = %7
  %19 = getelementptr inbounds %"class.sh::TStructure", %"class.sh::TStructure"* %5, i64 0, i32 2, i32 0
  %20 = load %"class.sh::TVector.23"*, %"class.sh::TVector.23"** %19, align 8
  %21 = getelementptr inbounds %"class.sh::TVector.23", %"class.sh::TVector.23"* %20, i64 0, i32 0, i32 0, i32 0
  %22 = load %"class.sh::TField"**, %"class.sh::TField"*** %21, align 8
  %23 = getelementptr inbounds %"class.sh::TVector.23", %"class.sh::TVector.23"* %20, i64 0, i32 0, i32 0, i32 1
  %24 = load %"class.sh::TField"**, %"class.sh::TField"*** %23, align 8
  %25 = icmp eq %"class.sh::TField"** %22, %24
  br i1 %25, label %33, label %26

26:                                               ; preds = %18, %26
  %27 = phi %"class.sh::TField"** [ %31, %26 ], [ %22, %18 ]
  %28 = load %"class.sh::TField"*, %"class.sh::TField"** %27, align 8
  %29 = getelementptr inbounds %"class.sh::TField", %"class.sh::TField"* %28, i64 0, i32 0
  %30 = load %"class.sh::TType"*, %"class.sh::TType"** %29, align 8
  call fastcc void @_ZN2sh12_GLOBAL__N_136RemoveUnreferencedVariablesTraverser27decrementStructTypeRefCountERKNS_5TTypeE(%"class.sh::(anonymous namespace)::RemoveUnreferencedVariablesTraverser"* %0, %"class.sh::TType"* dereferenceable(184) %30)
  %31 = getelementptr inbounds %"class.sh::TField"*, %"class.sh::TField"** %27, i64 1
  %32 = icmp eq %"class.sh::TField"** %31, %24
  br i1 %32, label %33, label %26

33:                                               ; preds = %26, %18, %7, %2
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden dereferenceable(4) i32* @_ZN4absl18container_internal12raw_hash_mapINS0_17FlatHashMapPolicyIijEENS_13hash_internal4HashIiEENSt3__18equal_toIiEENS7_9allocatorINS7_4pairIKijEEEEEixIiS3_EEDTclsrT0_5valueclL_ZNS7_9addressofISD_EEPT_RSJ_EclL_ZNS7_7declvalIRSD_EEDTclsr3std3__1E9__declvalISJ_ELi0EEEvEEEEERSC_(%"class.absl::container_internal::raw_hash_map"*, i32* dereferenceable(4)) local_unnamed_addr #5 comdat align 2 {
  %3 = getelementptr inbounds %"class.absl::container_internal::raw_hash_map", %"class.absl::container_internal::raw_hash_map"* %0, i64 0, i32 0
  %4 = load i32, i32* %1, align 4, !noalias !9
  %5 = load i64, i64* bitcast (i8** @_ZN4absl13hash_internal15MixingHashState5kSeedE to i64*), align 8, !noalias !9
  %6 = sext i32 %4 to i64
  %7 = add i64 %5, %6
  %8 = zext i64 %7 to i128
  %9 = mul nuw i128 %8, 11376068507788127593
  %10 = lshr i128 %9, 64
  %11 = xor i128 %10, %9
  %12 = trunc i128 %11 to i64
  %13 = getelementptr inbounds %"class.absl::container_internal::raw_hash_map", %"class.absl::container_internal::raw_hash_map"* %0, i64 0, i32 0, i32 0
  %14 = load i8*, i8** %13, align 8, !noalias !9
  %15 = getelementptr inbounds %"class.absl::container_internal::raw_hash_map", %"class.absl::container_internal::raw_hash_map"* %0, i64 0, i32 0, i32 3
  %16 = load i64, i64* %15, align 8, !noalias !9
  %17 = lshr i64 %12, 7
  %18 = ptrtoint i8* %14 to i64
  %19 = lshr i64 %18, 12
  %20 = xor i64 %17, %19
  %21 = trunc i128 %11 to i8
  %22 = and i8 %21, 127
  %23 = insertelement <16 x i8> undef, i8 %22, i32 0
  %24 = shufflevector <16 x i8> %23, <16 x i8> undef, <16 x i32> zeroinitializer
  %25 = getelementptr inbounds %"class.absl::container_internal::raw_hash_map", %"class.absl::container_internal::raw_hash_map"* %0, i64 0, i32 0, i32 1
  br label %26

26:                                               ; preds = %56, %2
  %27 = phi i64 [ %20, %2 ], [ %58, %56 ]
  %28 = phi i64 [ 0, %2 ], [ %57, %56 ]
  %29 = and i64 %27, %16
  %30 = getelementptr inbounds i8, i8* %14, i64 %29
  %31 = bitcast i8* %30 to <16 x i8>*
  %32 = load <16 x i8>, <16 x i8>* %31, align 1, !noalias !9
  %33 = icmp eq <16 x i8> %24, %32
  %34 = bitcast <16 x i1> %33 to i16
  %35 = icmp eq i16 %34, 0
  br i1 %35, label %52, label %36

36:                                               ; preds = %26
  %37 = zext i16 %34 to i32
  %38 = load %"union.absl::container_internal::map_slot_type"*, %"union.absl::container_internal::map_slot_type"** %25, align 8, !noalias !9
  br label %39

39:                                               ; preds = %48, %36
  %40 = phi i32 [ %37, %36 ], [ %50, %48 ]
  %41 = tail call i32 @llvm.cttz.i32(i32 %40, i1 false) #6, !range !2
  %42 = zext i32 %41 to i64
  %43 = add i64 %29, %42
  %44 = and i64 %43, %16
  %45 = getelementptr inbounds %"union.absl::container_internal::map_slot_type", %"union.absl::container_internal::map_slot_type"* %38, i64 %44, i32 0, i32 0
  %46 = load i32, i32* %45, align 4, !noalias !9
  %47 = icmp eq i32 %46, %4
  br i1 %47, label %67, label %48, !prof !3

48:                                               ; preds = %39
  %49 = add i32 %40, -1
  %50 = and i32 %49, %40
  %51 = icmp eq i32 %50, 0
  br i1 %51, label %52, label %39

52:                                               ; preds = %48, %26
  %53 = icmp eq <16 x i8> %32, <i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128>
  %54 = bitcast <16 x i1> %53 to i16
  %55 = icmp eq i16 %54, 0
  br i1 %55, label %56, label %59, !prof !4

56:                                               ; preds = %52
  %57 = add i64 %28, 16
  %58 = add i64 %57, %29
  br label %26

59:                                               ; preds = %52
  %60 = tail call i64 @_ZN4absl18container_internal12raw_hash_setINS0_17FlatHashMapPolicyIijEENS_13hash_internal4HashIiEENSt3__18equal_toIiEENS7_9allocatorINS7_4pairIKijEEEEE14prepare_insertEm(%"class.absl::container_internal::raw_hash_set"* %3, i64 %12) #6, !noalias !9
  %61 = load %"union.absl::container_internal::map_slot_type"*, %"union.absl::container_internal::map_slot_type"** %25, align 8, !noalias !9
  %62 = getelementptr inbounds %"union.absl::container_internal::map_slot_type", %"union.absl::container_internal::map_slot_type"* %61, i64 %60, i32 0, i32 0
  %63 = load i32, i32* %1, align 4, !noalias !9
  store i32 %63, i32* %62, align 4, !noalias !9
  %64 = getelementptr inbounds %"union.absl::container_internal::map_slot_type", %"union.absl::container_internal::map_slot_type"* %61, i64 %60, i32 0, i32 1
  store i32 0, i32* %64, align 4, !noalias !9
  %65 = load i8*, i8** %13, align 8, !noalias !9
  %66 = load %"union.absl::container_internal::map_slot_type"*, %"union.absl::container_internal::map_slot_type"** %25, align 8, !noalias !9
  br label %67

67:                                               ; preds = %39, %59
  %68 = phi %"union.absl::container_internal::map_slot_type"* [ %66, %59 ], [ %38, %39 ]
  %69 = phi i8* [ %65, %59 ], [ %14, %39 ]
  %70 = phi i64 [ %60, %59 ], [ %44, %39 ]
  %71 = getelementptr inbounds i8, i8* %69, i64 %70
  %72 = icmp ne i8* %71, null
  tail call void @llvm.assume(i1 %72) #6, !noalias !9
  %73 = load i8, i8* %71, align 1
  %74 = icmp sgt i8 %73, -1
  br i1 %74, label %76, label %75, !prof !3

75:                                               ; preds = %67
  tail call void @llvm.trap() #6
  unreachable

76:                                               ; preds = %67
  %77 = getelementptr inbounds %"union.absl::container_internal::map_slot_type", %"union.absl::container_internal::map_slot_type"* %68, i64 %70, i32 0, i32 1
  ret i32* %77
}

declare zeroext i1 @_ZNK2sh5TType16isNamelessStructEv(%"class.sh::TType"*) local_unnamed_addr #2

declare void @_ZN2sh5TTypeC1ERKS0_(%"class.sh::TType"*, %"class.sh::TType"* dereferenceable(184)) unnamed_addr #2

declare void @_ZN2sh9TVariableC1EPNS_12TSymbolTableERKNS_15ImmutableStringEPKNS_5TTypeENS_10SymbolTypeENS_10TExtensionE(%"class.sh::TVariable"*, %"class.sh::TSymbolTable"*, %"class.sh::ImmutableString"* dereferenceable(16), %"class.sh::TType"*, i8 zeroext, i8 zeroext) unnamed_addr #2

declare void @_ZN2sh16TIntermTraverser26queueReplacementWithParentEPNS_11TIntermNodeES2_S2_NS0_12OriginalNodeE(%"class.sh::TIntermTraverser"*, %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"*, i32) local_unnamed_addr #2

declare void @_ZN2sh13TIntermSymbolC1EPKNS_9TVariableE(%"class.sh::TIntermSymbol"*, %"class.sh::TVariable"*) unnamed_addr #2

declare void @_ZN2sh16TIntermTraverser16queueReplacementEPNS_11TIntermNodeENS0_12OriginalNodeE(%"class.sh::TIntermTraverser"*, %"class.sh::TIntermNode"*, i32) local_unnamed_addr #2

declare %"class.angle::PoolAllocator"* @_Z22GetGlobalPoolAllocatorv() local_unnamed_addr #2

declare i8* @_ZN5angle13PoolAllocator8allocateEm(%"class.angle::PoolAllocator"*, i64) local_unnamed_addr #2

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__16vectorIN2sh16TIntermTraverser28NodeReplaceWithMultipleEntryENS_9allocatorIS3_EEE24__emplace_back_slow_pathIJPNS1_12TIntermBlockERPNS1_18TIntermDeclarationENS1_7TVectorIPNS1_11TIntermNodeEEEEEEvDpOT_(%"class.std::__1::vector.37"*, %"class.sh::TIntermBlock"** dereferenceable(8), %"class.sh::TIntermDeclaration"** dereferenceable(8), %"class.sh::TVector"* dereferenceable(24)) local_unnamed_addr #4 comdat align 2 {
  %5 = getelementptr inbounds %"class.std::__1::vector.37", %"class.std::__1::vector.37"* %0, i64 0, i32 0, i32 1
  %6 = bitcast %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry"** %5 to i64*
  %7 = load i64, i64* %6, align 8
  %8 = bitcast %"class.std::__1::vector.37"* %0 to i64*
  %9 = load i64, i64* %8, align 8
  %10 = sub i64 %7, %9
  %11 = sdiv exact i64 %10, 40
  %12 = add nsw i64 %11, 1
  %13 = icmp ugt i64 %12, 461168601842738790
  br i1 %13, label %14, label %16

14:                                               ; preds = %4
  %15 = bitcast %"class.std::__1::vector.37"* %0 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %15) #14
  unreachable

16:                                               ; preds = %4
  %17 = getelementptr inbounds %"class.std::__1::vector.37", %"class.std::__1::vector.37"* %0, i64 0, i32 0, i32 2, i32 0, i32 0
  %18 = bitcast %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry"** %17 to i64*
  %19 = load i64, i64* %18, align 8
  %20 = sub i64 %19, %9
  %21 = sdiv exact i64 %20, 40
  %22 = icmp ult i64 %21, 230584300921369395
  br i1 %22, label %23, label %28

23:                                               ; preds = %16
  %24 = shl nsw i64 %21, 1
  %25 = icmp ult i64 %24, %12
  %26 = select i1 %25, i64 %12, i64 %24
  %27 = icmp eq i64 %26, 0
  br i1 %27, label %33, label %28

28:                                               ; preds = %16, %23
  %29 = phi i64 [ %26, %23 ], [ 461168601842738790, %16 ]
  %30 = mul i64 %29, 40
  %31 = tail call i8* @_Znwm(i64 %30) #13
  %32 = bitcast i8* %31 to %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry"*
  br label %33

33:                                               ; preds = %23, %28
  %34 = phi i64 [ %29, %28 ], [ 0, %23 ]
  %35 = phi %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry"* [ %32, %28 ], [ null, %23 ]
  %36 = getelementptr inbounds %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry", %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry"* %35, i64 %11
  %37 = getelementptr inbounds %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry", %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry"* %35, i64 %34
  %38 = ptrtoint %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry"* %37 to i64
  %39 = load %"class.sh::TIntermBlock"*, %"class.sh::TIntermBlock"** %1, align 8
  %40 = icmp eq %"class.sh::TIntermBlock"* %39, null
  %41 = getelementptr inbounds %"class.sh::TIntermBlock", %"class.sh::TIntermBlock"* %39, i64 0, i32 1
  %42 = select i1 %40, %"class.sh::TIntermAggregateBase"* null, %"class.sh::TIntermAggregateBase"* %41
  %43 = bitcast %"class.sh::TIntermDeclaration"** %2 to i64*
  %44 = load i64, i64* %43, align 8
  %45 = getelementptr inbounds %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry", %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry"* %36, i64 0, i32 0
  store %"class.sh::TIntermAggregateBase"* %42, %"class.sh::TIntermAggregateBase"** %45, align 8
  %46 = getelementptr inbounds %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry", %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry"* %35, i64 %11, i32 1
  %47 = bitcast %"class.sh::TIntermNode"** %46 to i64*
  store i64 %44, i64* %47, align 8
  %48 = getelementptr inbounds %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry", %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry"* %35, i64 %11, i32 2
  %49 = bitcast %"class.sh::TVector"* %48 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %49, i8 0, i64 24, i1 false) #6
  %50 = bitcast %"class.sh::TVector"* %3 to i64*
  %51 = load i64, i64* %50, align 8
  %52 = bitcast %"class.sh::TVector"* %48 to i64*
  store i64 %51, i64* %52, align 8
  %53 = getelementptr inbounds %"class.sh::TVector", %"class.sh::TVector"* %3, i64 0, i32 0, i32 0, i32 1
  %54 = bitcast %"class.sh::TIntermNode"*** %53 to i64*
  %55 = load i64, i64* %54, align 8
  %56 = getelementptr inbounds %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry", %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry"* %35, i64 %11, i32 2, i32 0, i32 0, i32 1
  %57 = bitcast %"class.sh::TIntermNode"*** %56 to i64*
  store i64 %55, i64* %57, align 8
  %58 = getelementptr inbounds %"class.sh::TVector", %"class.sh::TVector"* %3, i64 0, i32 0, i32 0, i32 2, i32 0, i32 0
  %59 = bitcast %"class.sh::TIntermNode"*** %58 to i64*
  %60 = load i64, i64* %59, align 8
  %61 = getelementptr inbounds %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry", %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry"* %35, i64 %11, i32 2, i32 0, i32 0, i32 2, i32 0, i32 0
  %62 = bitcast %"class.sh::TIntermNode"*** %61 to i64*
  store i64 %60, i64* %62, align 8
  %63 = bitcast %"class.sh::TVector"* %3 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %63, i8 0, i64 24, i1 false) #6
  %64 = getelementptr inbounds %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry", %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry"* %36, i64 1
  %65 = ptrtoint %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry"* %64 to i64
  %66 = getelementptr inbounds %"class.std::__1::vector.37", %"class.std::__1::vector.37"* %0, i64 0, i32 0, i32 0
  %67 = load %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry"*, %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry"** %66, align 8
  %68 = load %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry"*, %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry"** %5, align 8
  %69 = icmp eq %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry"* %68, %67
  br i1 %69, label %70, label %72

70:                                               ; preds = %33
  %71 = ptrtoint %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry"* %67 to i64
  br label %100

72:                                               ; preds = %33, %72
  %73 = phi %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry"* [ %75, %72 ], [ %36, %33 ]
  %74 = phi %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry"* [ %76, %72 ], [ %68, %33 ]
  %75 = getelementptr inbounds %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry", %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry"* %73, i64 -1
  %76 = getelementptr inbounds %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry", %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry"* %74, i64 -1
  %77 = bitcast %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry"* %75 to i8*
  %78 = bitcast %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry"* %76 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %77, i8* align 8 %78, i64 16, i1 false) #6
  %79 = getelementptr inbounds %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry", %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry"* %73, i64 -1, i32 2
  %80 = getelementptr inbounds %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry", %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry"* %74, i64 -1, i32 2
  %81 = bitcast %"class.sh::TVector"* %79 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %81, i8 0, i64 24, i1 false) #6
  %82 = bitcast %"class.sh::TVector"* %80 to i64*
  %83 = load i64, i64* %82, align 8
  %84 = bitcast %"class.sh::TVector"* %79 to i64*
  store i64 %83, i64* %84, align 8
  %85 = getelementptr inbounds %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry", %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry"* %74, i64 -1, i32 2, i32 0, i32 0, i32 1
  %86 = bitcast %"class.sh::TIntermNode"*** %85 to i64*
  %87 = load i64, i64* %86, align 8
  %88 = getelementptr inbounds %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry", %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry"* %73, i64 -1, i32 2, i32 0, i32 0, i32 1
  %89 = bitcast %"class.sh::TIntermNode"*** %88 to i64*
  store i64 %87, i64* %89, align 8
  %90 = getelementptr inbounds %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry", %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry"* %74, i64 -1, i32 2, i32 0, i32 0, i32 2, i32 0, i32 0
  %91 = bitcast %"class.sh::TIntermNode"*** %90 to i64*
  %92 = load i64, i64* %91, align 8
  %93 = getelementptr inbounds %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry", %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry"* %73, i64 -1, i32 2, i32 0, i32 0, i32 2, i32 0, i32 0
  %94 = bitcast %"class.sh::TIntermNode"*** %93 to i64*
  store i64 %92, i64* %94, align 8
  %95 = bitcast %"class.sh::TVector"* %80 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %95, i8 0, i64 24, i1 false) #6
  %96 = icmp eq %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry"* %76, %67
  br i1 %96, label %97, label %72

97:                                               ; preds = %72
  %98 = load i64, i64* %8, align 8
  %99 = load %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry"*, %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry"** %5, align 8
  br label %100

100:                                              ; preds = %70, %97
  %101 = phi %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry"* [ %67, %70 ], [ %99, %97 ]
  %102 = phi %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry"* [ %36, %70 ], [ %75, %97 ]
  %103 = phi i64 [ %71, %70 ], [ %98, %97 ]
  %104 = ptrtoint %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry"* %102 to i64
  store i64 %104, i64* %8, align 8
  store i64 %65, i64* %6, align 8
  store i64 %38, i64* %18, align 8
  %105 = inttoptr i64 %103 to %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry"*
  %106 = icmp eq %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry"* %101, %105
  br i1 %106, label %119, label %107

107:                                              ; preds = %100, %117
  %108 = phi %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry"* [ %109, %117 ], [ %101, %100 ]
  %109 = getelementptr inbounds %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry", %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry"* %108, i64 -1
  %110 = getelementptr inbounds %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry", %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry"* %108, i64 -1, i32 2, i32 0, i32 0, i32 0
  %111 = load %"class.sh::TIntermNode"**, %"class.sh::TIntermNode"*** %110, align 8
  %112 = icmp eq %"class.sh::TIntermNode"** %111, null
  br i1 %112, label %117, label %113

113:                                              ; preds = %107
  %114 = ptrtoint %"class.sh::TIntermNode"** %111 to i64
  %115 = getelementptr inbounds %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry", %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry"* %108, i64 -1, i32 2, i32 0, i32 0, i32 1
  %116 = bitcast %"class.sh::TIntermNode"*** %115 to i64*
  store i64 %114, i64* %116, align 8
  br label %117

117:                                              ; preds = %113, %107
  %118 = icmp eq %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry"* %109, %105
  br i1 %118, label %119, label %107

119:                                              ; preds = %117, %100
  %120 = icmp eq i64 %103, 0
  br i1 %120, label %123, label %121

121:                                              ; preds = %119
  %122 = inttoptr i64 %103 to i8*
  tail call void @_ZdlPv(i8* %122) #13
  br label %123

123:                                              ; preds = %119, %121
  ret void
}

; Function Attrs: noreturn
declare void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"*) local_unnamed_addr #12

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZN2sh16TIntermTraverser14incrementDepthEPNS_11TIntermNodeE(%"class.sh::TIntermTraverser"*, %"class.sh::TIntermNode"*) local_unnamed_addr #0 comdat align 2 {
  %3 = ptrtoint %"class.sh::TIntermNode"* %1 to i64
  %4 = getelementptr inbounds %"class.sh::TIntermTraverser", %"class.sh::TIntermTraverser"* %0, i64 0, i32 4
  %5 = getelementptr inbounds %"class.sh::TIntermTraverser", %"class.sh::TIntermTraverser"* %0, i64 0, i32 11, i32 0
  %6 = getelementptr inbounds %"class.sh::TIntermTraverser", %"class.sh::TIntermTraverser"* %0, i64 0, i32 11, i32 0, i32 0, i32 1
  %7 = bitcast %"class.sh::TIntermNode"*** %6 to i64*
  %8 = load i64, i64* %7, align 8
  %9 = bitcast %"class.std::__1::vector"* %5 to i64*
  %10 = load i64, i64* %9, align 8
  %11 = sub i64 %8, %10
  %12 = lshr exact i64 %11, 3
  %13 = trunc i64 %12 to i32
  %14 = load i32, i32* %4, align 4
  %15 = icmp slt i32 %14, %13
  %16 = select i1 %15, i32 %13, i32 %14
  store i32 %16, i32* %4, align 4
  %17 = inttoptr i64 %8 to %"class.sh::TIntermNode"**
  %18 = getelementptr inbounds %"class.sh::TIntermTraverser", %"class.sh::TIntermTraverser"* %0, i64 0, i32 11, i32 0, i32 0, i32 2, i32 0, i32 0
  %19 = load %"class.sh::TIntermNode"**, %"class.sh::TIntermNode"*** %18, align 8
  %20 = icmp eq %"class.sh::TIntermNode"** %19, %17
  br i1 %20, label %25, label %21

21:                                               ; preds = %2
  %22 = inttoptr i64 %8 to i64*
  store i64 %3, i64* %22, align 8
  %23 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %17, i64 1
  %24 = ptrtoint %"class.sh::TIntermNode"** %23 to i64
  store i64 %24, i64* %7, align 8
  br label %233

25:                                               ; preds = %2
  %26 = ptrtoint %"class.sh::TIntermNode"** %19 to i64
  %27 = sub i64 %26, %10
  %28 = ashr exact i64 %27, 3
  %29 = add nsw i64 %28, 1
  %30 = icmp ugt i64 %29, 2305843009213693951
  br i1 %30, label %31, label %33

31:                                               ; preds = %25
  %32 = bitcast %"class.std::__1::vector"* %5 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %32) #14
  unreachable

33:                                               ; preds = %25
  %34 = bitcast %"class.sh::TIntermNode"*** %18 to i64*
  %35 = icmp ult i64 %28, 1152921504606846975
  br i1 %35, label %36, label %41

36:                                               ; preds = %33
  %37 = ashr exact i64 %27, 2
  %38 = icmp ult i64 %37, %29
  %39 = select i1 %38, i64 %29, i64 %37
  %40 = icmp eq i64 %39, 0
  br i1 %40, label %47, label %41

41:                                               ; preds = %36, %33
  %42 = phi i64 [ %39, %36 ], [ 2305843009213693951, %33 ]
  %43 = tail call %"class.angle::PoolAllocator"* @_Z22GetGlobalPoolAllocatorv() #6
  %44 = shl i64 %42, 3
  %45 = tail call i8* @_ZN5angle13PoolAllocator8allocateEm(%"class.angle::PoolAllocator"* %43, i64 %44) #6
  %46 = bitcast i8* %45 to %"class.sh::TIntermNode"**
  br label %47

47:                                               ; preds = %41, %36
  %48 = phi i64 [ %42, %41 ], [ 0, %36 ]
  %49 = phi %"class.sh::TIntermNode"** [ %46, %41 ], [ null, %36 ]
  %50 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %49, i64 %28
  %51 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %49, i64 %48
  %52 = ptrtoint %"class.sh::TIntermNode"** %51 to i64
  %53 = bitcast %"class.sh::TIntermNode"** %50 to i64*
  store i64 %3, i64* %53, align 8
  %54 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %50, i64 1
  %55 = ptrtoint %"class.sh::TIntermNode"** %54 to i64
  %56 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %5, i64 0, i32 0, i32 0
  %57 = load %"class.sh::TIntermNode"**, %"class.sh::TIntermNode"*** %56, align 8
  %58 = ptrtoint %"class.sh::TIntermNode"** %57 to i64
  %59 = load %"class.sh::TIntermNode"**, %"class.sh::TIntermNode"*** %6, align 8
  %60 = icmp eq %"class.sh::TIntermNode"** %59, %57
  br i1 %60, label %230, label %61

61:                                               ; preds = %47
  %62 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %59, i64 -1
  %63 = ptrtoint %"class.sh::TIntermNode"** %62 to i64
  %64 = sub i64 %63, %58
  %65 = lshr i64 %64, 3
  %66 = add nuw nsw i64 %65, 1
  %67 = icmp ult i64 %66, 4
  br i1 %67, label %160, label %68

68:                                               ; preds = %61
  %69 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %59, i64 -1
  %70 = ptrtoint %"class.sh::TIntermNode"** %69 to i64
  %71 = sub i64 %70, %58
  %72 = lshr i64 %71, 3
  %73 = xor i64 %72, -1
  %74 = add nsw i64 %28, %73
  %75 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %49, i64 %74
  %76 = xor i64 %72, -1
  %77 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %59, i64 %76
  %78 = icmp ult %"class.sh::TIntermNode"** %75, %59
  %79 = icmp ult %"class.sh::TIntermNode"** %77, %50
  %80 = and i1 %78, %79
  br i1 %80, label %160, label %81

81:                                               ; preds = %68
  %82 = and i64 %66, 4611686018427387900
  %83 = sub nsw i64 0, %82
  %84 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %50, i64 %83
  %85 = sub nsw i64 0, %82
  %86 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %59, i64 %85
  %87 = add nsw i64 %82, -4
  %88 = lshr exact i64 %87, 2
  %89 = add nuw nsw i64 %88, 1
  %90 = and i64 %89, 1
  %91 = icmp eq i64 %87, 0
  br i1 %91, label %138, label %92

92:                                               ; preds = %81
  %93 = sub nuw nsw i64 %89, %90
  %94 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %50, i64 -1
  %95 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %59, i64 -1
  %96 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %50, i64 -1
  %97 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %59, i64 -1
  br label %98

98:                                               ; preds = %98, %92
  %99 = phi i64 [ 0, %92 ], [ %133, %98 ]
  %100 = phi i64 [ %93, %92 ], [ %134, %98 ]
  %101 = sub i64 0, %99
  %102 = sub i64 0, %99
  %103 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %94, i64 %101
  %104 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %95, i64 %102
  %105 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %104, i64 -1
  %106 = bitcast %"class.sh::TIntermNode"** %105 to <2 x i64>*
  %107 = load <2 x i64>, <2 x i64>* %106, align 8, !alias.scope !12
  %108 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %104, i64 -2
  %109 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %108, i64 -1
  %110 = bitcast %"class.sh::TIntermNode"** %109 to <2 x i64>*
  %111 = load <2 x i64>, <2 x i64>* %110, align 8, !alias.scope !12
  %112 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %103, i64 -1
  %113 = bitcast %"class.sh::TIntermNode"** %112 to <2 x i64>*
  store <2 x i64> %107, <2 x i64>* %113, align 8, !alias.scope !15, !noalias !12
  %114 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %103, i64 -2
  %115 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %114, i64 -1
  %116 = bitcast %"class.sh::TIntermNode"** %115 to <2 x i64>*
  store <2 x i64> %111, <2 x i64>* %116, align 8, !alias.scope !15, !noalias !12
  %117 = sub nuw nsw i64 -4, %99
  %118 = sub nuw nsw i64 -4, %99
  %119 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %96, i64 %117
  %120 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %97, i64 %118
  %121 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %120, i64 -1
  %122 = bitcast %"class.sh::TIntermNode"** %121 to <2 x i64>*
  %123 = load <2 x i64>, <2 x i64>* %122, align 8, !alias.scope !12
  %124 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %120, i64 -2
  %125 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %124, i64 -1
  %126 = bitcast %"class.sh::TIntermNode"** %125 to <2 x i64>*
  %127 = load <2 x i64>, <2 x i64>* %126, align 8, !alias.scope !12
  %128 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %119, i64 -1
  %129 = bitcast %"class.sh::TIntermNode"** %128 to <2 x i64>*
  store <2 x i64> %123, <2 x i64>* %129, align 8, !alias.scope !15, !noalias !12
  %130 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %119, i64 -2
  %131 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %130, i64 -1
  %132 = bitcast %"class.sh::TIntermNode"** %131 to <2 x i64>*
  store <2 x i64> %127, <2 x i64>* %132, align 8, !alias.scope !15, !noalias !12
  %133 = add i64 %99, 8
  %134 = add i64 %100, -2
  %135 = icmp eq i64 %134, 0
  br i1 %135, label %136, label %98, !llvm.loop !17

136:                                              ; preds = %98
  %137 = sub nuw nsw i64 -8, %99
  br label %138

138:                                              ; preds = %136, %81
  %139 = phi i64 [ 0, %81 ], [ %137, %136 ]
  %140 = icmp eq i64 %90, 0
  br i1 %140, label %158, label %141

141:                                              ; preds = %138
  %142 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %50, i64 -1
  %143 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %59, i64 -1
  %144 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %142, i64 %139
  %145 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %143, i64 %139
  %146 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %145, i64 -1
  %147 = bitcast %"class.sh::TIntermNode"** %146 to <2 x i64>*
  %148 = load <2 x i64>, <2 x i64>* %147, align 8, !alias.scope !12
  %149 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %145, i64 -2
  %150 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %149, i64 -1
  %151 = bitcast %"class.sh::TIntermNode"** %150 to <2 x i64>*
  %152 = load <2 x i64>, <2 x i64>* %151, align 8, !alias.scope !12
  %153 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %144, i64 -1
  %154 = bitcast %"class.sh::TIntermNode"** %153 to <2 x i64>*
  store <2 x i64> %148, <2 x i64>* %154, align 8, !alias.scope !15, !noalias !12
  %155 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %144, i64 -2
  %156 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %155, i64 -1
  %157 = bitcast %"class.sh::TIntermNode"** %156 to <2 x i64>*
  store <2 x i64> %152, <2 x i64>* %157, align 8, !alias.scope !15, !noalias !12
  br label %158

158:                                              ; preds = %138, %141
  %159 = icmp eq i64 %66, %82
  br i1 %159, label %230, label %160

160:                                              ; preds = %158, %68, %61
  %161 = phi %"class.sh::TIntermNode"** [ %50, %68 ], [ %50, %61 ], [ %84, %158 ]
  %162 = phi %"class.sh::TIntermNode"** [ %59, %68 ], [ %59, %61 ], [ %86, %158 ]
  %163 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %162, i64 -1
  %164 = ptrtoint %"class.sh::TIntermNode"** %163 to i64
  %165 = sub i64 %164, %58
  %166 = lshr i64 %165, 3
  %167 = add nuw nsw i64 %166, 1
  %168 = and i64 %167, 7
  %169 = icmp eq i64 %168, 0
  br i1 %169, label %181, label %170

170:                                              ; preds = %160, %170
  %171 = phi %"class.sh::TIntermNode"** [ %174, %170 ], [ %161, %160 ]
  %172 = phi %"class.sh::TIntermNode"** [ %175, %170 ], [ %162, %160 ]
  %173 = phi i64 [ %179, %170 ], [ %168, %160 ]
  %174 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %171, i64 -1
  %175 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %172, i64 -1
  %176 = bitcast %"class.sh::TIntermNode"** %175 to i64*
  %177 = load i64, i64* %176, align 8
  %178 = bitcast %"class.sh::TIntermNode"** %174 to i64*
  store i64 %177, i64* %178, align 8
  %179 = add i64 %173, -1
  %180 = icmp eq i64 %179, 0
  br i1 %180, label %181, label %170, !llvm.loop !19

181:                                              ; preds = %170, %160
  %182 = phi %"class.sh::TIntermNode"** [ undef, %160 ], [ %174, %170 ]
  %183 = phi %"class.sh::TIntermNode"** [ %161, %160 ], [ %174, %170 ]
  %184 = phi %"class.sh::TIntermNode"** [ %162, %160 ], [ %175, %170 ]
  %185 = icmp ult i64 %165, 56
  br i1 %185, label %230, label %186

186:                                              ; preds = %181, %186
  %187 = phi %"class.sh::TIntermNode"** [ %224, %186 ], [ %183, %181 ]
  %188 = phi %"class.sh::TIntermNode"** [ %225, %186 ], [ %184, %181 ]
  %189 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %187, i64 -1
  %190 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %188, i64 -1
  %191 = bitcast %"class.sh::TIntermNode"** %190 to i64*
  %192 = load i64, i64* %191, align 8
  %193 = bitcast %"class.sh::TIntermNode"** %189 to i64*
  store i64 %192, i64* %193, align 8
  %194 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %187, i64 -2
  %195 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %188, i64 -2
  %196 = bitcast %"class.sh::TIntermNode"** %195 to i64*
  %197 = load i64, i64* %196, align 8
  %198 = bitcast %"class.sh::TIntermNode"** %194 to i64*
  store i64 %197, i64* %198, align 8
  %199 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %187, i64 -3
  %200 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %188, i64 -3
  %201 = bitcast %"class.sh::TIntermNode"** %200 to i64*
  %202 = load i64, i64* %201, align 8
  %203 = bitcast %"class.sh::TIntermNode"** %199 to i64*
  store i64 %202, i64* %203, align 8
  %204 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %187, i64 -4
  %205 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %188, i64 -4
  %206 = bitcast %"class.sh::TIntermNode"** %205 to i64*
  %207 = load i64, i64* %206, align 8
  %208 = bitcast %"class.sh::TIntermNode"** %204 to i64*
  store i64 %207, i64* %208, align 8
  %209 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %187, i64 -5
  %210 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %188, i64 -5
  %211 = bitcast %"class.sh::TIntermNode"** %210 to i64*
  %212 = load i64, i64* %211, align 8
  %213 = bitcast %"class.sh::TIntermNode"** %209 to i64*
  store i64 %212, i64* %213, align 8
  %214 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %187, i64 -6
  %215 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %188, i64 -6
  %216 = bitcast %"class.sh::TIntermNode"** %215 to i64*
  %217 = load i64, i64* %216, align 8
  %218 = bitcast %"class.sh::TIntermNode"** %214 to i64*
  store i64 %217, i64* %218, align 8
  %219 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %187, i64 -7
  %220 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %188, i64 -7
  %221 = bitcast %"class.sh::TIntermNode"** %220 to i64*
  %222 = load i64, i64* %221, align 8
  %223 = bitcast %"class.sh::TIntermNode"** %219 to i64*
  store i64 %222, i64* %223, align 8
  %224 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %187, i64 -8
  %225 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %188, i64 -8
  %226 = bitcast %"class.sh::TIntermNode"** %225 to i64*
  %227 = load i64, i64* %226, align 8
  %228 = bitcast %"class.sh::TIntermNode"** %224 to i64*
  store i64 %227, i64* %228, align 8
  %229 = icmp eq %"class.sh::TIntermNode"** %225, %57
  br i1 %229, label %230, label %186, !llvm.loop !21

230:                                              ; preds = %181, %186, %158, %47
  %231 = phi %"class.sh::TIntermNode"** [ %50, %47 ], [ %84, %158 ], [ %182, %181 ], [ %224, %186 ]
  %232 = ptrtoint %"class.sh::TIntermNode"** %231 to i64
  store i64 %232, i64* %9, align 8
  store i64 %55, i64* %7, align 8
  store i64 %52, i64* %34, align 8
  br label %233

233:                                              ; preds = %21, %230
  %234 = load i32, i32* %4, align 4
  %235 = getelementptr inbounds %"class.sh::TIntermTraverser", %"class.sh::TIntermTraverser"* %0, i64 0, i32 5
  %236 = load i32, i32* %235, align 8
  %237 = icmp slt i32 %234, %236
  ret i1 %237
}

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { inlinehint nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="128" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nounwind }
attributes #7 = { nounwind readnone speculatable }
attributes #8 = { cold noreturn nounwind }
attributes #9 = { noinline nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="128" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #10 = { nobuiltin nofree "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #11 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #12 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #13 = { builtin nounwind }
attributes #14 = { noreturn nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{i32 0, i32 33}
!3 = !{!"branch_weights", i32 2000, i32 1}
!4 = !{!"branch_weights", i32 1, i32 2000}
!5 = !{!6}
!6 = distinct !{!6, !7, !"_ZN4absl18container_internal12raw_hash_mapINS0_17FlatHashMapPolicyIijEENS_13hash_internal4HashIiEENSt3__18equal_toIiEENS7_9allocatorINS7_4pairIKijEEEEE16try_emplace_implIiJEEENSB_INS0_12raw_hash_setIS3_S6_S9_SE_E8iteratorEbEEOT_DpOT0_: argument 0"}
!7 = distinct !{!7, !"_ZN4absl18container_internal12raw_hash_mapINS0_17FlatHashMapPolicyIijEENS_13hash_internal4HashIiEENSt3__18equal_toIiEENS7_9allocatorINS7_4pairIKijEEEEE16try_emplace_implIiJEEENSB_INS0_12raw_hash_setIS3_S6_S9_SE_E8iteratorEbEEOT_DpOT0_"}
!8 = !{i8 0, i8 2}
!9 = !{!10}
!10 = distinct !{!10, !11, !"_ZN4absl18container_internal12raw_hash_mapINS0_17FlatHashMapPolicyIijEENS_13hash_internal4HashIiEENSt3__18equal_toIiEENS7_9allocatorINS7_4pairIKijEEEEE16try_emplace_implIRSC_JEEENSB_INS0_12raw_hash_setIS3_S6_S9_SE_E8iteratorEbEEOT_DpOT0_: argument 0"}
!11 = distinct !{!11, !"_ZN4absl18container_internal12raw_hash_mapINS0_17FlatHashMapPolicyIijEENS_13hash_internal4HashIiEENSt3__18equal_toIiEENS7_9allocatorINS7_4pairIKijEEEEE16try_emplace_implIRSC_JEEENSB_INS0_12raw_hash_setIS3_S6_S9_SE_E8iteratorEbEEOT_DpOT0_"}
!12 = !{!13}
!13 = distinct !{!13, !14}
!14 = distinct !{!14, !"LVerDomain"}
!15 = !{!16}
!16 = distinct !{!16, !14}
!17 = distinct !{!17, !18}
!18 = !{!"llvm.loop.isvectorized", i32 1}
!19 = distinct !{!19, !20}
!20 = !{!"llvm.loop.unroll.disable"}
!21 = distinct !{!21, !18}
