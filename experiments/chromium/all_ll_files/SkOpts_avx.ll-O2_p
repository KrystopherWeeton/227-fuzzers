; ModuleID = '../../third_party/skia/src/opts/SkOpts_avx.cpp'
source_filename = "../../third_party/skia/src/opts/SkOpts_avx.cpp"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

$_ZN3avx8memset16EPtti = comdat any

$_ZN3avx8memset32EPjji = comdat any

$_ZN3avx8memset64EPmmi = comdat any

$_ZN3avx13rect_memset16EPttimi = comdat any

$_ZN3avx13rect_memset32EPjjimi = comdat any

$_ZN3avx13rect_memset64EPmmimi = comdat any

@_ZN6SkOpts8memset16E = external local_unnamed_addr global void (i16*, i16, i32)*, align 8
@_ZN6SkOpts8memset32E = external local_unnamed_addr global void (i32*, i32, i32)*, align 8
@_ZN6SkOpts8memset64E = external local_unnamed_addr global void (i64*, i64, i32)*, align 8
@_ZN6SkOpts13rect_memset16E = external local_unnamed_addr global void (i16*, i16, i32, i64, i32)*, align 8
@_ZN6SkOpts13rect_memset32E = external local_unnamed_addr global void (i32*, i32, i32, i64, i32)*, align 8
@_ZN6SkOpts13rect_memset64E = external local_unnamed_addr global void (i64*, i64, i32, i64, i32)*, align 8

; Function Attrs: nofree norecurse nounwind ssp uwtable writeonly
define hidden void @_ZN6SkOpts8Init_avxEv() local_unnamed_addr #0 {
  store void (i16*, i16, i32)* @_ZN3avx8memset16EPtti, void (i16*, i16, i32)** @_ZN6SkOpts8memset16E, align 8
  store void (i32*, i32, i32)* @_ZN3avx8memset32EPjji, void (i32*, i32, i32)** @_ZN6SkOpts8memset32E, align 8
  store void (i64*, i64, i32)* @_ZN3avx8memset64EPmmi, void (i64*, i64, i32)** @_ZN6SkOpts8memset64E, align 8
  store void (i16*, i16, i32, i64, i32)* @_ZN3avx13rect_memset16EPttimi, void (i16*, i16, i32, i64, i32)** @_ZN6SkOpts13rect_memset16E, align 8
  store void (i32*, i32, i32, i64, i32)* @_ZN3avx13rect_memset32EPjjimi, void (i32*, i32, i32, i64, i32)** @_ZN6SkOpts13rect_memset32E, align 8
  store void (i64*, i64, i32, i64, i32)* @_ZN3avx13rect_memset64EPmmimi, void (i64*, i64, i32, i64, i32)** @_ZN6SkOpts13rect_memset64E, align 8
  ret void
}

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZN3avx8memset16EPtti(i16*, i16 zeroext, i32) #1 comdat {
  %4 = icmp sgt i32 %2, 15
  br i1 %4, label %5, label %32

5:                                                ; preds = %3
  %6 = insertelement <8 x i16> undef, i16 %1, i32 0
  %7 = shufflevector <8 x i16> %6, <8 x i16> undef, <8 x i32> zeroinitializer
  %8 = add nsw i32 %2, -16
  %9 = lshr i32 %8, 4
  %10 = add nuw nsw i32 %9, 1
  %11 = and i32 %10, 7
  %12 = icmp eq i32 %11, 0
  br i1 %12, label %24, label %13

13:                                               ; preds = %5, %13
  %14 = phi i32 [ %21, %13 ], [ %2, %5 ]
  %15 = phi i16* [ %20, %13 ], [ %0, %5 ]
  %16 = phi i32 [ %22, %13 ], [ %11, %5 ]
  %17 = bitcast i16* %15 to <8 x i16>*
  store <8 x i16> %7, <8 x i16>* %17, align 1
  %18 = getelementptr inbounds i16, i16* %15, i64 8
  %19 = bitcast i16* %18 to <8 x i16>*
  store <8 x i16> %7, <8 x i16>* %19, align 1
  %20 = getelementptr inbounds i16, i16* %15, i64 16
  %21 = add nsw i32 %14, -16
  %22 = add i32 %16, -1
  %23 = icmp eq i32 %22, 0
  br i1 %23, label %24, label %13, !llvm.loop !2

24:                                               ; preds = %13, %5
  %25 = phi i32 [ %2, %5 ], [ %21, %13 ]
  %26 = phi i16* [ %0, %5 ], [ %20, %13 ]
  %27 = phi i16* [ undef, %5 ], [ %20, %13 ]
  %28 = icmp ult i32 %8, 112
  br i1 %28, label %29, label %124

29:                                               ; preds = %124, %24
  %30 = phi i16* [ %27, %24 ], [ %158, %124 ]
  %31 = and i32 %2, 15
  br label %32

32:                                               ; preds = %29, %3
  %33 = phi i16* [ %0, %3 ], [ %30, %29 ]
  %34 = phi i32 [ %2, %3 ], [ %31, %29 ]
  %35 = icmp sgt i32 %34, 0
  br i1 %35, label %36, label %167

36:                                               ; preds = %32
  %37 = add nsw i32 %34, -1
  %38 = zext i32 %37 to i64
  %39 = add nuw nsw i64 %38, 1
  %40 = icmp ult i64 %39, 64
  br i1 %40, label %41, label %44

41:                                               ; preds = %122, %36
  %42 = phi i32 [ %34, %36 ], [ %47, %122 ]
  %43 = phi i16* [ %33, %36 ], [ %48, %122 ]
  br label %161

44:                                               ; preds = %36
  %45 = and i64 %39, 8589934528
  %46 = trunc i64 %45 to i32
  %47 = sub i32 %34, %46
  %48 = getelementptr i16, i16* %33, i64 %45
  %49 = insertelement <16 x i16> undef, i16 %1, i32 0
  %50 = shufflevector <16 x i16> %49, <16 x i16> undef, <16 x i32> zeroinitializer
  %51 = insertelement <16 x i16> undef, i16 %1, i32 0
  %52 = shufflevector <16 x i16> %51, <16 x i16> undef, <16 x i32> zeroinitializer
  %53 = insertelement <16 x i16> undef, i16 %1, i32 0
  %54 = shufflevector <16 x i16> %53, <16 x i16> undef, <16 x i32> zeroinitializer
  %55 = insertelement <16 x i16> undef, i16 %1, i32 0
  %56 = shufflevector <16 x i16> %55, <16 x i16> undef, <16 x i32> zeroinitializer
  %57 = add nsw i64 %45, -64
  %58 = lshr exact i64 %57, 6
  %59 = add nuw nsw i64 %58, 1
  %60 = and i64 %59, 3
  %61 = icmp ult i64 %57, 192
  br i1 %61, label %105, label %62

62:                                               ; preds = %44
  %63 = sub nsw i64 %59, %60
  br label %64

64:                                               ; preds = %64, %62
  %65 = phi i64 [ 0, %62 ], [ %102, %64 ]
  %66 = phi i64 [ %63, %62 ], [ %103, %64 ]
  %67 = getelementptr i16, i16* %33, i64 %65
  %68 = bitcast i16* %67 to <16 x i16>*
  store <16 x i16> %50, <16 x i16>* %68, align 2
  %69 = getelementptr i16, i16* %67, i64 16
  %70 = bitcast i16* %69 to <16 x i16>*
  store <16 x i16> %52, <16 x i16>* %70, align 2
  %71 = getelementptr i16, i16* %67, i64 32
  %72 = bitcast i16* %71 to <16 x i16>*
  store <16 x i16> %54, <16 x i16>* %72, align 2
  %73 = getelementptr i16, i16* %67, i64 48
  %74 = bitcast i16* %73 to <16 x i16>*
  store <16 x i16> %56, <16 x i16>* %74, align 2
  %75 = or i64 %65, 64
  %76 = getelementptr i16, i16* %33, i64 %75
  %77 = bitcast i16* %76 to <16 x i16>*
  store <16 x i16> %50, <16 x i16>* %77, align 2
  %78 = getelementptr i16, i16* %76, i64 16
  %79 = bitcast i16* %78 to <16 x i16>*
  store <16 x i16> %52, <16 x i16>* %79, align 2
  %80 = getelementptr i16, i16* %76, i64 32
  %81 = bitcast i16* %80 to <16 x i16>*
  store <16 x i16> %54, <16 x i16>* %81, align 2
  %82 = getelementptr i16, i16* %76, i64 48
  %83 = bitcast i16* %82 to <16 x i16>*
  store <16 x i16> %56, <16 x i16>* %83, align 2
  %84 = or i64 %65, 128
  %85 = getelementptr i16, i16* %33, i64 %84
  %86 = bitcast i16* %85 to <16 x i16>*
  store <16 x i16> %50, <16 x i16>* %86, align 2
  %87 = getelementptr i16, i16* %85, i64 16
  %88 = bitcast i16* %87 to <16 x i16>*
  store <16 x i16> %52, <16 x i16>* %88, align 2
  %89 = getelementptr i16, i16* %85, i64 32
  %90 = bitcast i16* %89 to <16 x i16>*
  store <16 x i16> %54, <16 x i16>* %90, align 2
  %91 = getelementptr i16, i16* %85, i64 48
  %92 = bitcast i16* %91 to <16 x i16>*
  store <16 x i16> %56, <16 x i16>* %92, align 2
  %93 = or i64 %65, 192
  %94 = getelementptr i16, i16* %33, i64 %93
  %95 = bitcast i16* %94 to <16 x i16>*
  store <16 x i16> %50, <16 x i16>* %95, align 2
  %96 = getelementptr i16, i16* %94, i64 16
  %97 = bitcast i16* %96 to <16 x i16>*
  store <16 x i16> %52, <16 x i16>* %97, align 2
  %98 = getelementptr i16, i16* %94, i64 32
  %99 = bitcast i16* %98 to <16 x i16>*
  store <16 x i16> %54, <16 x i16>* %99, align 2
  %100 = getelementptr i16, i16* %94, i64 48
  %101 = bitcast i16* %100 to <16 x i16>*
  store <16 x i16> %56, <16 x i16>* %101, align 2
  %102 = add i64 %65, 256
  %103 = add i64 %66, -4
  %104 = icmp eq i64 %103, 0
  br i1 %104, label %105, label %64, !llvm.loop !4

105:                                              ; preds = %64, %44
  %106 = phi i64 [ 0, %44 ], [ %102, %64 ]
  %107 = icmp eq i64 %60, 0
  br i1 %107, label %122, label %108

108:                                              ; preds = %105, %108
  %109 = phi i64 [ %119, %108 ], [ %106, %105 ]
  %110 = phi i64 [ %120, %108 ], [ %60, %105 ]
  %111 = getelementptr i16, i16* %33, i64 %109
  %112 = bitcast i16* %111 to <16 x i16>*
  store <16 x i16> %50, <16 x i16>* %112, align 2
  %113 = getelementptr i16, i16* %111, i64 16
  %114 = bitcast i16* %113 to <16 x i16>*
  store <16 x i16> %52, <16 x i16>* %114, align 2
  %115 = getelementptr i16, i16* %111, i64 32
  %116 = bitcast i16* %115 to <16 x i16>*
  store <16 x i16> %54, <16 x i16>* %116, align 2
  %117 = getelementptr i16, i16* %111, i64 48
  %118 = bitcast i16* %117 to <16 x i16>*
  store <16 x i16> %56, <16 x i16>* %118, align 2
  %119 = add i64 %109, 64
  %120 = add i64 %110, -1
  %121 = icmp eq i64 %120, 0
  br i1 %121, label %122, label %108, !llvm.loop !6

122:                                              ; preds = %108, %105
  %123 = icmp eq i64 %39, %45
  br i1 %123, label %167, label %41

124:                                              ; preds = %24, %124
  %125 = phi i32 [ %159, %124 ], [ %25, %24 ]
  %126 = phi i16* [ %158, %124 ], [ %26, %24 ]
  %127 = bitcast i16* %126 to <8 x i16>*
  store <8 x i16> %7, <8 x i16>* %127, align 1
  %128 = getelementptr inbounds i16, i16* %126, i64 8
  %129 = bitcast i16* %128 to <8 x i16>*
  store <8 x i16> %7, <8 x i16>* %129, align 1
  %130 = getelementptr inbounds i16, i16* %126, i64 16
  %131 = bitcast i16* %130 to <8 x i16>*
  store <8 x i16> %7, <8 x i16>* %131, align 1
  %132 = getelementptr inbounds i16, i16* %126, i64 24
  %133 = bitcast i16* %132 to <8 x i16>*
  store <8 x i16> %7, <8 x i16>* %133, align 1
  %134 = getelementptr inbounds i16, i16* %126, i64 32
  %135 = bitcast i16* %134 to <8 x i16>*
  store <8 x i16> %7, <8 x i16>* %135, align 1
  %136 = getelementptr inbounds i16, i16* %126, i64 40
  %137 = bitcast i16* %136 to <8 x i16>*
  store <8 x i16> %7, <8 x i16>* %137, align 1
  %138 = getelementptr inbounds i16, i16* %126, i64 48
  %139 = bitcast i16* %138 to <8 x i16>*
  store <8 x i16> %7, <8 x i16>* %139, align 1
  %140 = getelementptr inbounds i16, i16* %126, i64 56
  %141 = bitcast i16* %140 to <8 x i16>*
  store <8 x i16> %7, <8 x i16>* %141, align 1
  %142 = getelementptr inbounds i16, i16* %126, i64 64
  %143 = bitcast i16* %142 to <8 x i16>*
  store <8 x i16> %7, <8 x i16>* %143, align 1
  %144 = getelementptr inbounds i16, i16* %126, i64 72
  %145 = bitcast i16* %144 to <8 x i16>*
  store <8 x i16> %7, <8 x i16>* %145, align 1
  %146 = getelementptr inbounds i16, i16* %126, i64 80
  %147 = bitcast i16* %146 to <8 x i16>*
  store <8 x i16> %7, <8 x i16>* %147, align 1
  %148 = getelementptr inbounds i16, i16* %126, i64 88
  %149 = bitcast i16* %148 to <8 x i16>*
  store <8 x i16> %7, <8 x i16>* %149, align 1
  %150 = getelementptr inbounds i16, i16* %126, i64 96
  %151 = bitcast i16* %150 to <8 x i16>*
  store <8 x i16> %7, <8 x i16>* %151, align 1
  %152 = getelementptr inbounds i16, i16* %126, i64 104
  %153 = bitcast i16* %152 to <8 x i16>*
  store <8 x i16> %7, <8 x i16>* %153, align 1
  %154 = getelementptr inbounds i16, i16* %126, i64 112
  %155 = bitcast i16* %154 to <8 x i16>*
  store <8 x i16> %7, <8 x i16>* %155, align 1
  %156 = getelementptr inbounds i16, i16* %126, i64 120
  %157 = bitcast i16* %156 to <8 x i16>*
  store <8 x i16> %7, <8 x i16>* %157, align 1
  %158 = getelementptr inbounds i16, i16* %126, i64 128
  %159 = add nsw i32 %125, -128
  %160 = icmp sgt i32 %159, 15
  br i1 %160, label %124, label %29

161:                                              ; preds = %41, %161
  %162 = phi i32 [ %164, %161 ], [ %42, %41 ]
  %163 = phi i16* [ %165, %161 ], [ %43, %41 ]
  %164 = add nsw i32 %162, -1
  %165 = getelementptr inbounds i16, i16* %163, i64 1
  store i16 %1, i16* %163, align 2
  %166 = icmp sgt i32 %164, 0
  br i1 %166, label %161, label %167, !llvm.loop !7

167:                                              ; preds = %161, %122, %32
  ret void
}

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZN3avx8memset32EPjji(i32*, i32, i32) #1 comdat {
  %4 = icmp sgt i32 %2, 7
  br i1 %4, label %5, label %32

5:                                                ; preds = %3
  %6 = insertelement <4 x i32> undef, i32 %1, i32 0
  %7 = shufflevector <4 x i32> %6, <4 x i32> undef, <4 x i32> zeroinitializer
  %8 = add nsw i32 %2, -8
  %9 = lshr i32 %8, 3
  %10 = add nuw nsw i32 %9, 1
  %11 = and i32 %10, 7
  %12 = icmp eq i32 %11, 0
  br i1 %12, label %24, label %13

13:                                               ; preds = %5, %13
  %14 = phi i32 [ %21, %13 ], [ %2, %5 ]
  %15 = phi i32* [ %20, %13 ], [ %0, %5 ]
  %16 = phi i32 [ %22, %13 ], [ %11, %5 ]
  %17 = bitcast i32* %15 to <4 x i32>*
  store <4 x i32> %7, <4 x i32>* %17, align 1
  %18 = getelementptr inbounds i32, i32* %15, i64 4
  %19 = bitcast i32* %18 to <4 x i32>*
  store <4 x i32> %7, <4 x i32>* %19, align 1
  %20 = getelementptr inbounds i32, i32* %15, i64 8
  %21 = add nsw i32 %14, -8
  %22 = add i32 %16, -1
  %23 = icmp eq i32 %22, 0
  br i1 %23, label %24, label %13, !llvm.loop !9

24:                                               ; preds = %13, %5
  %25 = phi i32 [ %2, %5 ], [ %21, %13 ]
  %26 = phi i32* [ %0, %5 ], [ %20, %13 ]
  %27 = phi i32* [ undef, %5 ], [ %20, %13 ]
  %28 = icmp ult i32 %8, 56
  br i1 %28, label %29, label %124

29:                                               ; preds = %124, %24
  %30 = phi i32* [ %27, %24 ], [ %158, %124 ]
  %31 = and i32 %2, 7
  br label %32

32:                                               ; preds = %29, %3
  %33 = phi i32* [ %0, %3 ], [ %30, %29 ]
  %34 = phi i32 [ %2, %3 ], [ %31, %29 ]
  %35 = icmp sgt i32 %34, 0
  br i1 %35, label %36, label %167

36:                                               ; preds = %32
  %37 = add nsw i32 %34, -1
  %38 = zext i32 %37 to i64
  %39 = add nuw nsw i64 %38, 1
  %40 = icmp ult i64 %39, 32
  br i1 %40, label %41, label %44

41:                                               ; preds = %122, %36
  %42 = phi i32 [ %34, %36 ], [ %47, %122 ]
  %43 = phi i32* [ %33, %36 ], [ %48, %122 ]
  br label %161

44:                                               ; preds = %36
  %45 = and i64 %39, 8589934560
  %46 = trunc i64 %45 to i32
  %47 = sub i32 %34, %46
  %48 = getelementptr i32, i32* %33, i64 %45
  %49 = insertelement <8 x i32> undef, i32 %1, i32 0
  %50 = shufflevector <8 x i32> %49, <8 x i32> undef, <8 x i32> zeroinitializer
  %51 = insertelement <8 x i32> undef, i32 %1, i32 0
  %52 = shufflevector <8 x i32> %51, <8 x i32> undef, <8 x i32> zeroinitializer
  %53 = insertelement <8 x i32> undef, i32 %1, i32 0
  %54 = shufflevector <8 x i32> %53, <8 x i32> undef, <8 x i32> zeroinitializer
  %55 = insertelement <8 x i32> undef, i32 %1, i32 0
  %56 = shufflevector <8 x i32> %55, <8 x i32> undef, <8 x i32> zeroinitializer
  %57 = add nsw i64 %45, -32
  %58 = lshr exact i64 %57, 5
  %59 = add nuw nsw i64 %58, 1
  %60 = and i64 %59, 3
  %61 = icmp ult i64 %57, 96
  br i1 %61, label %105, label %62

62:                                               ; preds = %44
  %63 = sub nsw i64 %59, %60
  br label %64

64:                                               ; preds = %64, %62
  %65 = phi i64 [ 0, %62 ], [ %102, %64 ]
  %66 = phi i64 [ %63, %62 ], [ %103, %64 ]
  %67 = getelementptr i32, i32* %33, i64 %65
  %68 = bitcast i32* %67 to <8 x i32>*
  store <8 x i32> %50, <8 x i32>* %68, align 4
  %69 = getelementptr i32, i32* %67, i64 8
  %70 = bitcast i32* %69 to <8 x i32>*
  store <8 x i32> %52, <8 x i32>* %70, align 4
  %71 = getelementptr i32, i32* %67, i64 16
  %72 = bitcast i32* %71 to <8 x i32>*
  store <8 x i32> %54, <8 x i32>* %72, align 4
  %73 = getelementptr i32, i32* %67, i64 24
  %74 = bitcast i32* %73 to <8 x i32>*
  store <8 x i32> %56, <8 x i32>* %74, align 4
  %75 = or i64 %65, 32
  %76 = getelementptr i32, i32* %33, i64 %75
  %77 = bitcast i32* %76 to <8 x i32>*
  store <8 x i32> %50, <8 x i32>* %77, align 4
  %78 = getelementptr i32, i32* %76, i64 8
  %79 = bitcast i32* %78 to <8 x i32>*
  store <8 x i32> %52, <8 x i32>* %79, align 4
  %80 = getelementptr i32, i32* %76, i64 16
  %81 = bitcast i32* %80 to <8 x i32>*
  store <8 x i32> %54, <8 x i32>* %81, align 4
  %82 = getelementptr i32, i32* %76, i64 24
  %83 = bitcast i32* %82 to <8 x i32>*
  store <8 x i32> %56, <8 x i32>* %83, align 4
  %84 = or i64 %65, 64
  %85 = getelementptr i32, i32* %33, i64 %84
  %86 = bitcast i32* %85 to <8 x i32>*
  store <8 x i32> %50, <8 x i32>* %86, align 4
  %87 = getelementptr i32, i32* %85, i64 8
  %88 = bitcast i32* %87 to <8 x i32>*
  store <8 x i32> %52, <8 x i32>* %88, align 4
  %89 = getelementptr i32, i32* %85, i64 16
  %90 = bitcast i32* %89 to <8 x i32>*
  store <8 x i32> %54, <8 x i32>* %90, align 4
  %91 = getelementptr i32, i32* %85, i64 24
  %92 = bitcast i32* %91 to <8 x i32>*
  store <8 x i32> %56, <8 x i32>* %92, align 4
  %93 = or i64 %65, 96
  %94 = getelementptr i32, i32* %33, i64 %93
  %95 = bitcast i32* %94 to <8 x i32>*
  store <8 x i32> %50, <8 x i32>* %95, align 4
  %96 = getelementptr i32, i32* %94, i64 8
  %97 = bitcast i32* %96 to <8 x i32>*
  store <8 x i32> %52, <8 x i32>* %97, align 4
  %98 = getelementptr i32, i32* %94, i64 16
  %99 = bitcast i32* %98 to <8 x i32>*
  store <8 x i32> %54, <8 x i32>* %99, align 4
  %100 = getelementptr i32, i32* %94, i64 24
  %101 = bitcast i32* %100 to <8 x i32>*
  store <8 x i32> %56, <8 x i32>* %101, align 4
  %102 = add i64 %65, 128
  %103 = add i64 %66, -4
  %104 = icmp eq i64 %103, 0
  br i1 %104, label %105, label %64, !llvm.loop !10

105:                                              ; preds = %64, %44
  %106 = phi i64 [ 0, %44 ], [ %102, %64 ]
  %107 = icmp eq i64 %60, 0
  br i1 %107, label %122, label %108

108:                                              ; preds = %105, %108
  %109 = phi i64 [ %119, %108 ], [ %106, %105 ]
  %110 = phi i64 [ %120, %108 ], [ %60, %105 ]
  %111 = getelementptr i32, i32* %33, i64 %109
  %112 = bitcast i32* %111 to <8 x i32>*
  store <8 x i32> %50, <8 x i32>* %112, align 4
  %113 = getelementptr i32, i32* %111, i64 8
  %114 = bitcast i32* %113 to <8 x i32>*
  store <8 x i32> %52, <8 x i32>* %114, align 4
  %115 = getelementptr i32, i32* %111, i64 16
  %116 = bitcast i32* %115 to <8 x i32>*
  store <8 x i32> %54, <8 x i32>* %116, align 4
  %117 = getelementptr i32, i32* %111, i64 24
  %118 = bitcast i32* %117 to <8 x i32>*
  store <8 x i32> %56, <8 x i32>* %118, align 4
  %119 = add i64 %109, 32
  %120 = add i64 %110, -1
  %121 = icmp eq i64 %120, 0
  br i1 %121, label %122, label %108, !llvm.loop !11

122:                                              ; preds = %108, %105
  %123 = icmp eq i64 %39, %45
  br i1 %123, label %167, label %41

124:                                              ; preds = %24, %124
  %125 = phi i32 [ %159, %124 ], [ %25, %24 ]
  %126 = phi i32* [ %158, %124 ], [ %26, %24 ]
  %127 = bitcast i32* %126 to <4 x i32>*
  store <4 x i32> %7, <4 x i32>* %127, align 1
  %128 = getelementptr inbounds i32, i32* %126, i64 4
  %129 = bitcast i32* %128 to <4 x i32>*
  store <4 x i32> %7, <4 x i32>* %129, align 1
  %130 = getelementptr inbounds i32, i32* %126, i64 8
  %131 = bitcast i32* %130 to <4 x i32>*
  store <4 x i32> %7, <4 x i32>* %131, align 1
  %132 = getelementptr inbounds i32, i32* %126, i64 12
  %133 = bitcast i32* %132 to <4 x i32>*
  store <4 x i32> %7, <4 x i32>* %133, align 1
  %134 = getelementptr inbounds i32, i32* %126, i64 16
  %135 = bitcast i32* %134 to <4 x i32>*
  store <4 x i32> %7, <4 x i32>* %135, align 1
  %136 = getelementptr inbounds i32, i32* %126, i64 20
  %137 = bitcast i32* %136 to <4 x i32>*
  store <4 x i32> %7, <4 x i32>* %137, align 1
  %138 = getelementptr inbounds i32, i32* %126, i64 24
  %139 = bitcast i32* %138 to <4 x i32>*
  store <4 x i32> %7, <4 x i32>* %139, align 1
  %140 = getelementptr inbounds i32, i32* %126, i64 28
  %141 = bitcast i32* %140 to <4 x i32>*
  store <4 x i32> %7, <4 x i32>* %141, align 1
  %142 = getelementptr inbounds i32, i32* %126, i64 32
  %143 = bitcast i32* %142 to <4 x i32>*
  store <4 x i32> %7, <4 x i32>* %143, align 1
  %144 = getelementptr inbounds i32, i32* %126, i64 36
  %145 = bitcast i32* %144 to <4 x i32>*
  store <4 x i32> %7, <4 x i32>* %145, align 1
  %146 = getelementptr inbounds i32, i32* %126, i64 40
  %147 = bitcast i32* %146 to <4 x i32>*
  store <4 x i32> %7, <4 x i32>* %147, align 1
  %148 = getelementptr inbounds i32, i32* %126, i64 44
  %149 = bitcast i32* %148 to <4 x i32>*
  store <4 x i32> %7, <4 x i32>* %149, align 1
  %150 = getelementptr inbounds i32, i32* %126, i64 48
  %151 = bitcast i32* %150 to <4 x i32>*
  store <4 x i32> %7, <4 x i32>* %151, align 1
  %152 = getelementptr inbounds i32, i32* %126, i64 52
  %153 = bitcast i32* %152 to <4 x i32>*
  store <4 x i32> %7, <4 x i32>* %153, align 1
  %154 = getelementptr inbounds i32, i32* %126, i64 56
  %155 = bitcast i32* %154 to <4 x i32>*
  store <4 x i32> %7, <4 x i32>* %155, align 1
  %156 = getelementptr inbounds i32, i32* %126, i64 60
  %157 = bitcast i32* %156 to <4 x i32>*
  store <4 x i32> %7, <4 x i32>* %157, align 1
  %158 = getelementptr inbounds i32, i32* %126, i64 64
  %159 = add nsw i32 %125, -64
  %160 = icmp sgt i32 %159, 7
  br i1 %160, label %124, label %29

161:                                              ; preds = %41, %161
  %162 = phi i32 [ %164, %161 ], [ %42, %41 ]
  %163 = phi i32* [ %165, %161 ], [ %43, %41 ]
  %164 = add nsw i32 %162, -1
  %165 = getelementptr inbounds i32, i32* %163, i64 1
  store i32 %1, i32* %163, align 4
  %166 = icmp sgt i32 %164, 0
  br i1 %166, label %161, label %167, !llvm.loop !12

167:                                              ; preds = %161, %122, %32
  ret void
}

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZN3avx8memset64EPmmi(i64*, i64, i32) #2 comdat {
  %4 = icmp sgt i32 %2, 3
  br i1 %4, label %5, label %40

5:                                                ; preds = %3
  %6 = add nsw i32 %2, -4
  %7 = lshr i32 %6, 2
  %8 = add nuw nsw i32 %7, 1
  %9 = and i32 %8, 3
  %10 = icmp eq i32 %9, 0
  br i1 %10, label %23, label %11

11:                                               ; preds = %5
  %12 = insertelement <4 x i64> undef, i64 %1, i32 0
  %13 = shufflevector <4 x i64> %12, <4 x i64> undef, <4 x i32> zeroinitializer
  br label %14

14:                                               ; preds = %14, %11
  %15 = phi i32 [ %20, %14 ], [ %2, %11 ]
  %16 = phi i64* [ %19, %14 ], [ %0, %11 ]
  %17 = phi i32 [ %21, %14 ], [ %9, %11 ]
  %18 = bitcast i64* %16 to <4 x i64>*
  store <4 x i64> %13, <4 x i64>* %18, align 1
  %19 = getelementptr inbounds i64, i64* %16, i64 4
  %20 = add nsw i32 %15, -4
  %21 = add i32 %17, -1
  %22 = icmp eq i32 %21, 0
  br i1 %22, label %23, label %14, !llvm.loop !13

23:                                               ; preds = %14, %5
  %24 = phi i32 [ %2, %5 ], [ %20, %14 ]
  %25 = phi i64* [ %0, %5 ], [ %19, %14 ]
  %26 = phi i64* [ undef, %5 ], [ %19, %14 ]
  %27 = icmp ult i32 %6, 12
  br i1 %27, label %37, label %28

28:                                               ; preds = %23
  %29 = insertelement <4 x i64> undef, i64 %1, i32 0
  %30 = shufflevector <4 x i64> %29, <4 x i64> undef, <4 x i32> zeroinitializer
  %31 = insertelement <4 x i64> undef, i64 %1, i32 0
  %32 = shufflevector <4 x i64> %31, <4 x i64> undef, <4 x i32> zeroinitializer
  %33 = insertelement <4 x i64> undef, i64 %1, i32 0
  %34 = shufflevector <4 x i64> %33, <4 x i64> undef, <4 x i32> zeroinitializer
  %35 = insertelement <4 x i64> undef, i64 %1, i32 0
  %36 = shufflevector <4 x i64> %35, <4 x i64> undef, <4 x i32> zeroinitializer
  br label %132

37:                                               ; preds = %132, %23
  %38 = phi i64* [ %26, %23 ], [ %142, %132 ]
  %39 = and i32 %2, 3
  br label %40

40:                                               ; preds = %37, %3
  %41 = phi i64* [ %0, %3 ], [ %38, %37 ]
  %42 = phi i32 [ %2, %3 ], [ %39, %37 ]
  %43 = icmp sgt i32 %42, 0
  br i1 %43, label %44, label %151

44:                                               ; preds = %40
  %45 = add nsw i32 %42, -1
  %46 = zext i32 %45 to i64
  %47 = add nuw nsw i64 %46, 1
  %48 = icmp ult i64 %47, 16
  br i1 %48, label %49, label %52

49:                                               ; preds = %130, %44
  %50 = phi i32 [ %42, %44 ], [ %55, %130 ]
  %51 = phi i64* [ %41, %44 ], [ %56, %130 ]
  br label %145

52:                                               ; preds = %44
  %53 = and i64 %47, 8589934576
  %54 = trunc i64 %53 to i32
  %55 = sub i32 %42, %54
  %56 = getelementptr i64, i64* %41, i64 %53
  %57 = insertelement <4 x i64> undef, i64 %1, i32 0
  %58 = shufflevector <4 x i64> %57, <4 x i64> undef, <4 x i32> zeroinitializer
  %59 = insertelement <4 x i64> undef, i64 %1, i32 0
  %60 = shufflevector <4 x i64> %59, <4 x i64> undef, <4 x i32> zeroinitializer
  %61 = insertelement <4 x i64> undef, i64 %1, i32 0
  %62 = shufflevector <4 x i64> %61, <4 x i64> undef, <4 x i32> zeroinitializer
  %63 = insertelement <4 x i64> undef, i64 %1, i32 0
  %64 = shufflevector <4 x i64> %63, <4 x i64> undef, <4 x i32> zeroinitializer
  %65 = add nsw i64 %53, -16
  %66 = lshr exact i64 %65, 4
  %67 = add nuw nsw i64 %66, 1
  %68 = and i64 %67, 3
  %69 = icmp ult i64 %65, 48
  br i1 %69, label %113, label %70

70:                                               ; preds = %52
  %71 = sub nsw i64 %67, %68
  br label %72

72:                                               ; preds = %72, %70
  %73 = phi i64 [ 0, %70 ], [ %110, %72 ]
  %74 = phi i64 [ %71, %70 ], [ %111, %72 ]
  %75 = getelementptr i64, i64* %41, i64 %73
  %76 = bitcast i64* %75 to <4 x i64>*
  store <4 x i64> %58, <4 x i64>* %76, align 8
  %77 = getelementptr i64, i64* %75, i64 4
  %78 = bitcast i64* %77 to <4 x i64>*
  store <4 x i64> %60, <4 x i64>* %78, align 8
  %79 = getelementptr i64, i64* %75, i64 8
  %80 = bitcast i64* %79 to <4 x i64>*
  store <4 x i64> %62, <4 x i64>* %80, align 8
  %81 = getelementptr i64, i64* %75, i64 12
  %82 = bitcast i64* %81 to <4 x i64>*
  store <4 x i64> %64, <4 x i64>* %82, align 8
  %83 = or i64 %73, 16
  %84 = getelementptr i64, i64* %41, i64 %83
  %85 = bitcast i64* %84 to <4 x i64>*
  store <4 x i64> %58, <4 x i64>* %85, align 8
  %86 = getelementptr i64, i64* %84, i64 4
  %87 = bitcast i64* %86 to <4 x i64>*
  store <4 x i64> %60, <4 x i64>* %87, align 8
  %88 = getelementptr i64, i64* %84, i64 8
  %89 = bitcast i64* %88 to <4 x i64>*
  store <4 x i64> %62, <4 x i64>* %89, align 8
  %90 = getelementptr i64, i64* %84, i64 12
  %91 = bitcast i64* %90 to <4 x i64>*
  store <4 x i64> %64, <4 x i64>* %91, align 8
  %92 = or i64 %73, 32
  %93 = getelementptr i64, i64* %41, i64 %92
  %94 = bitcast i64* %93 to <4 x i64>*
  store <4 x i64> %58, <4 x i64>* %94, align 8
  %95 = getelementptr i64, i64* %93, i64 4
  %96 = bitcast i64* %95 to <4 x i64>*
  store <4 x i64> %60, <4 x i64>* %96, align 8
  %97 = getelementptr i64, i64* %93, i64 8
  %98 = bitcast i64* %97 to <4 x i64>*
  store <4 x i64> %62, <4 x i64>* %98, align 8
  %99 = getelementptr i64, i64* %93, i64 12
  %100 = bitcast i64* %99 to <4 x i64>*
  store <4 x i64> %64, <4 x i64>* %100, align 8
  %101 = or i64 %73, 48
  %102 = getelementptr i64, i64* %41, i64 %101
  %103 = bitcast i64* %102 to <4 x i64>*
  store <4 x i64> %58, <4 x i64>* %103, align 8
  %104 = getelementptr i64, i64* %102, i64 4
  %105 = bitcast i64* %104 to <4 x i64>*
  store <4 x i64> %60, <4 x i64>* %105, align 8
  %106 = getelementptr i64, i64* %102, i64 8
  %107 = bitcast i64* %106 to <4 x i64>*
  store <4 x i64> %62, <4 x i64>* %107, align 8
  %108 = getelementptr i64, i64* %102, i64 12
  %109 = bitcast i64* %108 to <4 x i64>*
  store <4 x i64> %64, <4 x i64>* %109, align 8
  %110 = add i64 %73, 64
  %111 = add i64 %74, -4
  %112 = icmp eq i64 %111, 0
  br i1 %112, label %113, label %72, !llvm.loop !14

113:                                              ; preds = %72, %52
  %114 = phi i64 [ 0, %52 ], [ %110, %72 ]
  %115 = icmp eq i64 %68, 0
  br i1 %115, label %130, label %116

116:                                              ; preds = %113, %116
  %117 = phi i64 [ %127, %116 ], [ %114, %113 ]
  %118 = phi i64 [ %128, %116 ], [ %68, %113 ]
  %119 = getelementptr i64, i64* %41, i64 %117
  %120 = bitcast i64* %119 to <4 x i64>*
  store <4 x i64> %58, <4 x i64>* %120, align 8
  %121 = getelementptr i64, i64* %119, i64 4
  %122 = bitcast i64* %121 to <4 x i64>*
  store <4 x i64> %60, <4 x i64>* %122, align 8
  %123 = getelementptr i64, i64* %119, i64 8
  %124 = bitcast i64* %123 to <4 x i64>*
  store <4 x i64> %62, <4 x i64>* %124, align 8
  %125 = getelementptr i64, i64* %119, i64 12
  %126 = bitcast i64* %125 to <4 x i64>*
  store <4 x i64> %64, <4 x i64>* %126, align 8
  %127 = add i64 %117, 16
  %128 = add i64 %118, -1
  %129 = icmp eq i64 %128, 0
  br i1 %129, label %130, label %116, !llvm.loop !15

130:                                              ; preds = %116, %113
  %131 = icmp eq i64 %47, %53
  br i1 %131, label %151, label %49

132:                                              ; preds = %132, %28
  %133 = phi i32 [ %24, %28 ], [ %143, %132 ]
  %134 = phi i64* [ %25, %28 ], [ %142, %132 ]
  %135 = bitcast i64* %134 to <4 x i64>*
  store <4 x i64> %30, <4 x i64>* %135, align 1
  %136 = getelementptr inbounds i64, i64* %134, i64 4
  %137 = bitcast i64* %136 to <4 x i64>*
  store <4 x i64> %32, <4 x i64>* %137, align 1
  %138 = getelementptr inbounds i64, i64* %134, i64 8
  %139 = bitcast i64* %138 to <4 x i64>*
  store <4 x i64> %34, <4 x i64>* %139, align 1
  %140 = getelementptr inbounds i64, i64* %134, i64 12
  %141 = bitcast i64* %140 to <4 x i64>*
  store <4 x i64> %36, <4 x i64>* %141, align 1
  %142 = getelementptr inbounds i64, i64* %134, i64 16
  %143 = add nsw i32 %133, -16
  %144 = icmp sgt i32 %143, 3
  br i1 %144, label %132, label %37

145:                                              ; preds = %49, %145
  %146 = phi i32 [ %148, %145 ], [ %50, %49 ]
  %147 = phi i64* [ %149, %145 ], [ %51, %49 ]
  %148 = add nsw i32 %146, -1
  %149 = getelementptr inbounds i64, i64* %147, i64 1
  store i64 %1, i64* %147, align 8
  %150 = icmp sgt i32 %148, 0
  br i1 %150, label %145, label %151, !llvm.loop !16

151:                                              ; preds = %145, %130, %40
  ret void
}

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZN3avx13rect_memset16EPttimi(i16*, i16 zeroext, i32, i64, i32) #1 comdat {
  %6 = icmp sgt i32 %4, 0
  br i1 %6, label %7, label %178

7:                                                ; preds = %5
  %8 = icmp sgt i32 %2, 15
  %9 = insertelement <8 x i16> undef, i16 %1, i32 0
  %10 = shufflevector <8 x i16> %9, <8 x i16> undef, <8 x i32> zeroinitializer
  %11 = and i32 %2, 15
  %12 = add nsw i32 %2, -16
  %13 = lshr i32 %12, 4
  %14 = add nuw nsw i32 %13, 1
  %15 = and i32 %14, 7
  %16 = icmp eq i32 %15, 0
  %17 = icmp ult i32 %12, 112
  %18 = insertelement <16 x i16> undef, i16 %1, i32 0
  %19 = shufflevector <16 x i16> %18, <16 x i16> undef, <16 x i32> zeroinitializer
  %20 = insertelement <16 x i16> undef, i16 %1, i32 0
  %21 = shufflevector <16 x i16> %20, <16 x i16> undef, <16 x i32> zeroinitializer
  %22 = insertelement <16 x i16> undef, i16 %1, i32 0
  %23 = shufflevector <16 x i16> %22, <16 x i16> undef, <16 x i32> zeroinitializer
  %24 = insertelement <16 x i16> undef, i16 %1, i32 0
  %25 = shufflevector <16 x i16> %24, <16 x i16> undef, <16 x i32> zeroinitializer
  br label %26

26:                                               ; preds = %173, %7
  %27 = phi i32 [ %4, %7 ], [ %29, %173 ]
  %28 = phi i16* [ %0, %7 ], [ %176, %173 ]
  %29 = add nsw i32 %27, -1
  br i1 %8, label %30, label %46

30:                                               ; preds = %26
  br i1 %16, label %42, label %31

31:                                               ; preds = %30, %31
  %32 = phi i32 [ %39, %31 ], [ %2, %30 ]
  %33 = phi i16* [ %38, %31 ], [ %28, %30 ]
  %34 = phi i32 [ %40, %31 ], [ %15, %30 ]
  %35 = bitcast i16* %33 to <8 x i16>*
  store <8 x i16> %10, <8 x i16>* %35, align 1
  %36 = getelementptr inbounds i16, i16* %33, i64 8
  %37 = bitcast i16* %36 to <8 x i16>*
  store <8 x i16> %10, <8 x i16>* %37, align 1
  %38 = getelementptr inbounds i16, i16* %33, i64 16
  %39 = add nsw i32 %32, -16
  %40 = add i32 %34, -1
  %41 = icmp eq i32 %40, 0
  br i1 %41, label %42, label %31, !llvm.loop !17

42:                                               ; preds = %31, %30
  %43 = phi i32 [ %2, %30 ], [ %39, %31 ]
  %44 = phi i16* [ %28, %30 ], [ %38, %31 ]
  %45 = phi i16* [ undef, %30 ], [ %38, %31 ]
  br i1 %17, label %46, label %130

46:                                               ; preds = %42, %130, %26
  %47 = phi i16* [ %28, %26 ], [ %45, %42 ], [ %164, %130 ]
  %48 = phi i32 [ %2, %26 ], [ %11, %130 ], [ %11, %42 ]
  %49 = icmp sgt i32 %48, 0
  br i1 %49, label %50, label %173

50:                                               ; preds = %46
  %51 = add nsw i32 %48, -1
  %52 = zext i32 %51 to i64
  %53 = add nuw nsw i64 %52, 1
  %54 = icmp ult i64 %53, 64
  br i1 %54, label %55, label %58

55:                                               ; preds = %128, %50
  %56 = phi i32 [ %48, %50 ], [ %61, %128 ]
  %57 = phi i16* [ %47, %50 ], [ %62, %128 ]
  br label %167

58:                                               ; preds = %50
  %59 = and i64 %53, 8589934528
  %60 = trunc i64 %59 to i32
  %61 = sub i32 %48, %60
  %62 = getelementptr i16, i16* %47, i64 %59
  %63 = add nsw i64 %59, -64
  %64 = lshr exact i64 %63, 6
  %65 = add nuw nsw i64 %64, 1
  %66 = and i64 %65, 3
  %67 = icmp ult i64 %63, 192
  br i1 %67, label %111, label %68

68:                                               ; preds = %58
  %69 = sub nsw i64 %65, %66
  br label %70

70:                                               ; preds = %70, %68
  %71 = phi i64 [ 0, %68 ], [ %108, %70 ]
  %72 = phi i64 [ %69, %68 ], [ %109, %70 ]
  %73 = getelementptr i16, i16* %47, i64 %71
  %74 = bitcast i16* %73 to <16 x i16>*
  store <16 x i16> %19, <16 x i16>* %74, align 2
  %75 = getelementptr i16, i16* %73, i64 16
  %76 = bitcast i16* %75 to <16 x i16>*
  store <16 x i16> %21, <16 x i16>* %76, align 2
  %77 = getelementptr i16, i16* %73, i64 32
  %78 = bitcast i16* %77 to <16 x i16>*
  store <16 x i16> %23, <16 x i16>* %78, align 2
  %79 = getelementptr i16, i16* %73, i64 48
  %80 = bitcast i16* %79 to <16 x i16>*
  store <16 x i16> %25, <16 x i16>* %80, align 2
  %81 = or i64 %71, 64
  %82 = getelementptr i16, i16* %47, i64 %81
  %83 = bitcast i16* %82 to <16 x i16>*
  store <16 x i16> %19, <16 x i16>* %83, align 2
  %84 = getelementptr i16, i16* %82, i64 16
  %85 = bitcast i16* %84 to <16 x i16>*
  store <16 x i16> %21, <16 x i16>* %85, align 2
  %86 = getelementptr i16, i16* %82, i64 32
  %87 = bitcast i16* %86 to <16 x i16>*
  store <16 x i16> %23, <16 x i16>* %87, align 2
  %88 = getelementptr i16, i16* %82, i64 48
  %89 = bitcast i16* %88 to <16 x i16>*
  store <16 x i16> %25, <16 x i16>* %89, align 2
  %90 = or i64 %71, 128
  %91 = getelementptr i16, i16* %47, i64 %90
  %92 = bitcast i16* %91 to <16 x i16>*
  store <16 x i16> %19, <16 x i16>* %92, align 2
  %93 = getelementptr i16, i16* %91, i64 16
  %94 = bitcast i16* %93 to <16 x i16>*
  store <16 x i16> %21, <16 x i16>* %94, align 2
  %95 = getelementptr i16, i16* %91, i64 32
  %96 = bitcast i16* %95 to <16 x i16>*
  store <16 x i16> %23, <16 x i16>* %96, align 2
  %97 = getelementptr i16, i16* %91, i64 48
  %98 = bitcast i16* %97 to <16 x i16>*
  store <16 x i16> %25, <16 x i16>* %98, align 2
  %99 = or i64 %71, 192
  %100 = getelementptr i16, i16* %47, i64 %99
  %101 = bitcast i16* %100 to <16 x i16>*
  store <16 x i16> %19, <16 x i16>* %101, align 2
  %102 = getelementptr i16, i16* %100, i64 16
  %103 = bitcast i16* %102 to <16 x i16>*
  store <16 x i16> %21, <16 x i16>* %103, align 2
  %104 = getelementptr i16, i16* %100, i64 32
  %105 = bitcast i16* %104 to <16 x i16>*
  store <16 x i16> %23, <16 x i16>* %105, align 2
  %106 = getelementptr i16, i16* %100, i64 48
  %107 = bitcast i16* %106 to <16 x i16>*
  store <16 x i16> %25, <16 x i16>* %107, align 2
  %108 = add i64 %71, 256
  %109 = add i64 %72, -4
  %110 = icmp eq i64 %109, 0
  br i1 %110, label %111, label %70, !llvm.loop !18

111:                                              ; preds = %70, %58
  %112 = phi i64 [ 0, %58 ], [ %108, %70 ]
  %113 = icmp eq i64 %66, 0
  br i1 %113, label %128, label %114

114:                                              ; preds = %111, %114
  %115 = phi i64 [ %125, %114 ], [ %112, %111 ]
  %116 = phi i64 [ %126, %114 ], [ %66, %111 ]
  %117 = getelementptr i16, i16* %47, i64 %115
  %118 = bitcast i16* %117 to <16 x i16>*
  store <16 x i16> %19, <16 x i16>* %118, align 2
  %119 = getelementptr i16, i16* %117, i64 16
  %120 = bitcast i16* %119 to <16 x i16>*
  store <16 x i16> %21, <16 x i16>* %120, align 2
  %121 = getelementptr i16, i16* %117, i64 32
  %122 = bitcast i16* %121 to <16 x i16>*
  store <16 x i16> %23, <16 x i16>* %122, align 2
  %123 = getelementptr i16, i16* %117, i64 48
  %124 = bitcast i16* %123 to <16 x i16>*
  store <16 x i16> %25, <16 x i16>* %124, align 2
  %125 = add i64 %115, 64
  %126 = add i64 %116, -1
  %127 = icmp eq i64 %126, 0
  br i1 %127, label %128, label %114, !llvm.loop !19

128:                                              ; preds = %114, %111
  %129 = icmp eq i64 %53, %59
  br i1 %129, label %173, label %55

130:                                              ; preds = %42, %130
  %131 = phi i32 [ %165, %130 ], [ %43, %42 ]
  %132 = phi i16* [ %164, %130 ], [ %44, %42 ]
  %133 = bitcast i16* %132 to <8 x i16>*
  store <8 x i16> %10, <8 x i16>* %133, align 1
  %134 = getelementptr inbounds i16, i16* %132, i64 8
  %135 = bitcast i16* %134 to <8 x i16>*
  store <8 x i16> %10, <8 x i16>* %135, align 1
  %136 = getelementptr inbounds i16, i16* %132, i64 16
  %137 = bitcast i16* %136 to <8 x i16>*
  store <8 x i16> %10, <8 x i16>* %137, align 1
  %138 = getelementptr inbounds i16, i16* %132, i64 24
  %139 = bitcast i16* %138 to <8 x i16>*
  store <8 x i16> %10, <8 x i16>* %139, align 1
  %140 = getelementptr inbounds i16, i16* %132, i64 32
  %141 = bitcast i16* %140 to <8 x i16>*
  store <8 x i16> %10, <8 x i16>* %141, align 1
  %142 = getelementptr inbounds i16, i16* %132, i64 40
  %143 = bitcast i16* %142 to <8 x i16>*
  store <8 x i16> %10, <8 x i16>* %143, align 1
  %144 = getelementptr inbounds i16, i16* %132, i64 48
  %145 = bitcast i16* %144 to <8 x i16>*
  store <8 x i16> %10, <8 x i16>* %145, align 1
  %146 = getelementptr inbounds i16, i16* %132, i64 56
  %147 = bitcast i16* %146 to <8 x i16>*
  store <8 x i16> %10, <8 x i16>* %147, align 1
  %148 = getelementptr inbounds i16, i16* %132, i64 64
  %149 = bitcast i16* %148 to <8 x i16>*
  store <8 x i16> %10, <8 x i16>* %149, align 1
  %150 = getelementptr inbounds i16, i16* %132, i64 72
  %151 = bitcast i16* %150 to <8 x i16>*
  store <8 x i16> %10, <8 x i16>* %151, align 1
  %152 = getelementptr inbounds i16, i16* %132, i64 80
  %153 = bitcast i16* %152 to <8 x i16>*
  store <8 x i16> %10, <8 x i16>* %153, align 1
  %154 = getelementptr inbounds i16, i16* %132, i64 88
  %155 = bitcast i16* %154 to <8 x i16>*
  store <8 x i16> %10, <8 x i16>* %155, align 1
  %156 = getelementptr inbounds i16, i16* %132, i64 96
  %157 = bitcast i16* %156 to <8 x i16>*
  store <8 x i16> %10, <8 x i16>* %157, align 1
  %158 = getelementptr inbounds i16, i16* %132, i64 104
  %159 = bitcast i16* %158 to <8 x i16>*
  store <8 x i16> %10, <8 x i16>* %159, align 1
  %160 = getelementptr inbounds i16, i16* %132, i64 112
  %161 = bitcast i16* %160 to <8 x i16>*
  store <8 x i16> %10, <8 x i16>* %161, align 1
  %162 = getelementptr inbounds i16, i16* %132, i64 120
  %163 = bitcast i16* %162 to <8 x i16>*
  store <8 x i16> %10, <8 x i16>* %163, align 1
  %164 = getelementptr inbounds i16, i16* %132, i64 128
  %165 = add nsw i32 %131, -128
  %166 = icmp sgt i32 %165, 15
  br i1 %166, label %130, label %46

167:                                              ; preds = %55, %167
  %168 = phi i32 [ %170, %167 ], [ %56, %55 ]
  %169 = phi i16* [ %171, %167 ], [ %57, %55 ]
  %170 = add nsw i32 %168, -1
  %171 = getelementptr inbounds i16, i16* %169, i64 1
  store i16 %1, i16* %169, align 2
  %172 = icmp sgt i32 %170, 0
  br i1 %172, label %167, label %173, !llvm.loop !20

173:                                              ; preds = %167, %128, %46
  %174 = bitcast i16* %28 to i8*
  %175 = getelementptr inbounds i8, i8* %174, i64 %3
  %176 = bitcast i8* %175 to i16*
  %177 = icmp sgt i32 %29, 0
  br i1 %177, label %26, label %178

178:                                              ; preds = %173, %5
  ret void
}

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZN3avx13rect_memset32EPjjimi(i32*, i32, i32, i64, i32) #1 comdat {
  %6 = icmp sgt i32 %4, 0
  br i1 %6, label %7, label %178

7:                                                ; preds = %5
  %8 = icmp sgt i32 %2, 7
  %9 = insertelement <4 x i32> undef, i32 %1, i32 0
  %10 = shufflevector <4 x i32> %9, <4 x i32> undef, <4 x i32> zeroinitializer
  %11 = and i32 %2, 7
  %12 = add nsw i32 %2, -8
  %13 = lshr i32 %12, 3
  %14 = add nuw nsw i32 %13, 1
  %15 = and i32 %14, 7
  %16 = icmp eq i32 %15, 0
  %17 = icmp ult i32 %12, 56
  %18 = insertelement <8 x i32> undef, i32 %1, i32 0
  %19 = shufflevector <8 x i32> %18, <8 x i32> undef, <8 x i32> zeroinitializer
  %20 = insertelement <8 x i32> undef, i32 %1, i32 0
  %21 = shufflevector <8 x i32> %20, <8 x i32> undef, <8 x i32> zeroinitializer
  %22 = insertelement <8 x i32> undef, i32 %1, i32 0
  %23 = shufflevector <8 x i32> %22, <8 x i32> undef, <8 x i32> zeroinitializer
  %24 = insertelement <8 x i32> undef, i32 %1, i32 0
  %25 = shufflevector <8 x i32> %24, <8 x i32> undef, <8 x i32> zeroinitializer
  br label %26

26:                                               ; preds = %173, %7
  %27 = phi i32 [ %4, %7 ], [ %29, %173 ]
  %28 = phi i32* [ %0, %7 ], [ %176, %173 ]
  %29 = add nsw i32 %27, -1
  br i1 %8, label %30, label %46

30:                                               ; preds = %26
  br i1 %16, label %42, label %31

31:                                               ; preds = %30, %31
  %32 = phi i32 [ %39, %31 ], [ %2, %30 ]
  %33 = phi i32* [ %38, %31 ], [ %28, %30 ]
  %34 = phi i32 [ %40, %31 ], [ %15, %30 ]
  %35 = bitcast i32* %33 to <4 x i32>*
  store <4 x i32> %10, <4 x i32>* %35, align 1
  %36 = getelementptr inbounds i32, i32* %33, i64 4
  %37 = bitcast i32* %36 to <4 x i32>*
  store <4 x i32> %10, <4 x i32>* %37, align 1
  %38 = getelementptr inbounds i32, i32* %33, i64 8
  %39 = add nsw i32 %32, -8
  %40 = add i32 %34, -1
  %41 = icmp eq i32 %40, 0
  br i1 %41, label %42, label %31, !llvm.loop !21

42:                                               ; preds = %31, %30
  %43 = phi i32 [ %2, %30 ], [ %39, %31 ]
  %44 = phi i32* [ %28, %30 ], [ %38, %31 ]
  %45 = phi i32* [ undef, %30 ], [ %38, %31 ]
  br i1 %17, label %46, label %130

46:                                               ; preds = %42, %130, %26
  %47 = phi i32* [ %28, %26 ], [ %45, %42 ], [ %164, %130 ]
  %48 = phi i32 [ %2, %26 ], [ %11, %130 ], [ %11, %42 ]
  %49 = icmp sgt i32 %48, 0
  br i1 %49, label %50, label %173

50:                                               ; preds = %46
  %51 = add nsw i32 %48, -1
  %52 = zext i32 %51 to i64
  %53 = add nuw nsw i64 %52, 1
  %54 = icmp ult i64 %53, 32
  br i1 %54, label %55, label %58

55:                                               ; preds = %128, %50
  %56 = phi i32 [ %48, %50 ], [ %61, %128 ]
  %57 = phi i32* [ %47, %50 ], [ %62, %128 ]
  br label %167

58:                                               ; preds = %50
  %59 = and i64 %53, 8589934560
  %60 = trunc i64 %59 to i32
  %61 = sub i32 %48, %60
  %62 = getelementptr i32, i32* %47, i64 %59
  %63 = add nsw i64 %59, -32
  %64 = lshr exact i64 %63, 5
  %65 = add nuw nsw i64 %64, 1
  %66 = and i64 %65, 3
  %67 = icmp ult i64 %63, 96
  br i1 %67, label %111, label %68

68:                                               ; preds = %58
  %69 = sub nsw i64 %65, %66
  br label %70

70:                                               ; preds = %70, %68
  %71 = phi i64 [ 0, %68 ], [ %108, %70 ]
  %72 = phi i64 [ %69, %68 ], [ %109, %70 ]
  %73 = getelementptr i32, i32* %47, i64 %71
  %74 = bitcast i32* %73 to <8 x i32>*
  store <8 x i32> %19, <8 x i32>* %74, align 4
  %75 = getelementptr i32, i32* %73, i64 8
  %76 = bitcast i32* %75 to <8 x i32>*
  store <8 x i32> %21, <8 x i32>* %76, align 4
  %77 = getelementptr i32, i32* %73, i64 16
  %78 = bitcast i32* %77 to <8 x i32>*
  store <8 x i32> %23, <8 x i32>* %78, align 4
  %79 = getelementptr i32, i32* %73, i64 24
  %80 = bitcast i32* %79 to <8 x i32>*
  store <8 x i32> %25, <8 x i32>* %80, align 4
  %81 = or i64 %71, 32
  %82 = getelementptr i32, i32* %47, i64 %81
  %83 = bitcast i32* %82 to <8 x i32>*
  store <8 x i32> %19, <8 x i32>* %83, align 4
  %84 = getelementptr i32, i32* %82, i64 8
  %85 = bitcast i32* %84 to <8 x i32>*
  store <8 x i32> %21, <8 x i32>* %85, align 4
  %86 = getelementptr i32, i32* %82, i64 16
  %87 = bitcast i32* %86 to <8 x i32>*
  store <8 x i32> %23, <8 x i32>* %87, align 4
  %88 = getelementptr i32, i32* %82, i64 24
  %89 = bitcast i32* %88 to <8 x i32>*
  store <8 x i32> %25, <8 x i32>* %89, align 4
  %90 = or i64 %71, 64
  %91 = getelementptr i32, i32* %47, i64 %90
  %92 = bitcast i32* %91 to <8 x i32>*
  store <8 x i32> %19, <8 x i32>* %92, align 4
  %93 = getelementptr i32, i32* %91, i64 8
  %94 = bitcast i32* %93 to <8 x i32>*
  store <8 x i32> %21, <8 x i32>* %94, align 4
  %95 = getelementptr i32, i32* %91, i64 16
  %96 = bitcast i32* %95 to <8 x i32>*
  store <8 x i32> %23, <8 x i32>* %96, align 4
  %97 = getelementptr i32, i32* %91, i64 24
  %98 = bitcast i32* %97 to <8 x i32>*
  store <8 x i32> %25, <8 x i32>* %98, align 4
  %99 = or i64 %71, 96
  %100 = getelementptr i32, i32* %47, i64 %99
  %101 = bitcast i32* %100 to <8 x i32>*
  store <8 x i32> %19, <8 x i32>* %101, align 4
  %102 = getelementptr i32, i32* %100, i64 8
  %103 = bitcast i32* %102 to <8 x i32>*
  store <8 x i32> %21, <8 x i32>* %103, align 4
  %104 = getelementptr i32, i32* %100, i64 16
  %105 = bitcast i32* %104 to <8 x i32>*
  store <8 x i32> %23, <8 x i32>* %105, align 4
  %106 = getelementptr i32, i32* %100, i64 24
  %107 = bitcast i32* %106 to <8 x i32>*
  store <8 x i32> %25, <8 x i32>* %107, align 4
  %108 = add i64 %71, 128
  %109 = add i64 %72, -4
  %110 = icmp eq i64 %109, 0
  br i1 %110, label %111, label %70, !llvm.loop !22

111:                                              ; preds = %70, %58
  %112 = phi i64 [ 0, %58 ], [ %108, %70 ]
  %113 = icmp eq i64 %66, 0
  br i1 %113, label %128, label %114

114:                                              ; preds = %111, %114
  %115 = phi i64 [ %125, %114 ], [ %112, %111 ]
  %116 = phi i64 [ %126, %114 ], [ %66, %111 ]
  %117 = getelementptr i32, i32* %47, i64 %115
  %118 = bitcast i32* %117 to <8 x i32>*
  store <8 x i32> %19, <8 x i32>* %118, align 4
  %119 = getelementptr i32, i32* %117, i64 8
  %120 = bitcast i32* %119 to <8 x i32>*
  store <8 x i32> %21, <8 x i32>* %120, align 4
  %121 = getelementptr i32, i32* %117, i64 16
  %122 = bitcast i32* %121 to <8 x i32>*
  store <8 x i32> %23, <8 x i32>* %122, align 4
  %123 = getelementptr i32, i32* %117, i64 24
  %124 = bitcast i32* %123 to <8 x i32>*
  store <8 x i32> %25, <8 x i32>* %124, align 4
  %125 = add i64 %115, 32
  %126 = add i64 %116, -1
  %127 = icmp eq i64 %126, 0
  br i1 %127, label %128, label %114, !llvm.loop !23

128:                                              ; preds = %114, %111
  %129 = icmp eq i64 %53, %59
  br i1 %129, label %173, label %55

130:                                              ; preds = %42, %130
  %131 = phi i32 [ %165, %130 ], [ %43, %42 ]
  %132 = phi i32* [ %164, %130 ], [ %44, %42 ]
  %133 = bitcast i32* %132 to <4 x i32>*
  store <4 x i32> %10, <4 x i32>* %133, align 1
  %134 = getelementptr inbounds i32, i32* %132, i64 4
  %135 = bitcast i32* %134 to <4 x i32>*
  store <4 x i32> %10, <4 x i32>* %135, align 1
  %136 = getelementptr inbounds i32, i32* %132, i64 8
  %137 = bitcast i32* %136 to <4 x i32>*
  store <4 x i32> %10, <4 x i32>* %137, align 1
  %138 = getelementptr inbounds i32, i32* %132, i64 12
  %139 = bitcast i32* %138 to <4 x i32>*
  store <4 x i32> %10, <4 x i32>* %139, align 1
  %140 = getelementptr inbounds i32, i32* %132, i64 16
  %141 = bitcast i32* %140 to <4 x i32>*
  store <4 x i32> %10, <4 x i32>* %141, align 1
  %142 = getelementptr inbounds i32, i32* %132, i64 20
  %143 = bitcast i32* %142 to <4 x i32>*
  store <4 x i32> %10, <4 x i32>* %143, align 1
  %144 = getelementptr inbounds i32, i32* %132, i64 24
  %145 = bitcast i32* %144 to <4 x i32>*
  store <4 x i32> %10, <4 x i32>* %145, align 1
  %146 = getelementptr inbounds i32, i32* %132, i64 28
  %147 = bitcast i32* %146 to <4 x i32>*
  store <4 x i32> %10, <4 x i32>* %147, align 1
  %148 = getelementptr inbounds i32, i32* %132, i64 32
  %149 = bitcast i32* %148 to <4 x i32>*
  store <4 x i32> %10, <4 x i32>* %149, align 1
  %150 = getelementptr inbounds i32, i32* %132, i64 36
  %151 = bitcast i32* %150 to <4 x i32>*
  store <4 x i32> %10, <4 x i32>* %151, align 1
  %152 = getelementptr inbounds i32, i32* %132, i64 40
  %153 = bitcast i32* %152 to <4 x i32>*
  store <4 x i32> %10, <4 x i32>* %153, align 1
  %154 = getelementptr inbounds i32, i32* %132, i64 44
  %155 = bitcast i32* %154 to <4 x i32>*
  store <4 x i32> %10, <4 x i32>* %155, align 1
  %156 = getelementptr inbounds i32, i32* %132, i64 48
  %157 = bitcast i32* %156 to <4 x i32>*
  store <4 x i32> %10, <4 x i32>* %157, align 1
  %158 = getelementptr inbounds i32, i32* %132, i64 52
  %159 = bitcast i32* %158 to <4 x i32>*
  store <4 x i32> %10, <4 x i32>* %159, align 1
  %160 = getelementptr inbounds i32, i32* %132, i64 56
  %161 = bitcast i32* %160 to <4 x i32>*
  store <4 x i32> %10, <4 x i32>* %161, align 1
  %162 = getelementptr inbounds i32, i32* %132, i64 60
  %163 = bitcast i32* %162 to <4 x i32>*
  store <4 x i32> %10, <4 x i32>* %163, align 1
  %164 = getelementptr inbounds i32, i32* %132, i64 64
  %165 = add nsw i32 %131, -64
  %166 = icmp sgt i32 %165, 7
  br i1 %166, label %130, label %46

167:                                              ; preds = %55, %167
  %168 = phi i32 [ %170, %167 ], [ %56, %55 ]
  %169 = phi i32* [ %171, %167 ], [ %57, %55 ]
  %170 = add nsw i32 %168, -1
  %171 = getelementptr inbounds i32, i32* %169, i64 1
  store i32 %1, i32* %169, align 4
  %172 = icmp sgt i32 %170, 0
  br i1 %172, label %167, label %173, !llvm.loop !24

173:                                              ; preds = %167, %128, %46
  %174 = bitcast i32* %28 to i8*
  %175 = getelementptr inbounds i8, i8* %174, i64 %3
  %176 = bitcast i8* %175 to i32*
  %177 = icmp sgt i32 %29, 0
  br i1 %177, label %26, label %178

178:                                              ; preds = %173, %5
  ret void
}

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZN3avx13rect_memset64EPmmimi(i64*, i64, i32, i64, i32) #2 comdat {
  %6 = icmp sgt i32 %4, 0
  br i1 %6, label %7, label %160

7:                                                ; preds = %5
  %8 = icmp sgt i32 %2, 3
  %9 = and i32 %2, 3
  %10 = add nsw i32 %2, -4
  %11 = lshr i32 %10, 2
  %12 = add nuw nsw i32 %11, 1
  %13 = and i32 %12, 3
  %14 = icmp eq i32 %13, 0
  %15 = insertelement <4 x i64> undef, i64 %1, i32 0
  %16 = shufflevector <4 x i64> %15, <4 x i64> undef, <4 x i32> zeroinitializer
  %17 = icmp ult i32 %10, 12
  %18 = insertelement <4 x i64> undef, i64 %1, i32 0
  %19 = shufflevector <4 x i64> %18, <4 x i64> undef, <4 x i32> zeroinitializer
  %20 = insertelement <4 x i64> undef, i64 %1, i32 0
  %21 = shufflevector <4 x i64> %20, <4 x i64> undef, <4 x i32> zeroinitializer
  %22 = insertelement <4 x i64> undef, i64 %1, i32 0
  %23 = shufflevector <4 x i64> %22, <4 x i64> undef, <4 x i32> zeroinitializer
  %24 = insertelement <4 x i64> undef, i64 %1, i32 0
  %25 = shufflevector <4 x i64> %24, <4 x i64> undef, <4 x i32> zeroinitializer
  %26 = insertelement <4 x i64> undef, i64 %1, i32 0
  %27 = shufflevector <4 x i64> %26, <4 x i64> undef, <4 x i32> zeroinitializer
  %28 = insertelement <4 x i64> undef, i64 %1, i32 0
  %29 = shufflevector <4 x i64> %28, <4 x i64> undef, <4 x i32> zeroinitializer
  %30 = insertelement <4 x i64> undef, i64 %1, i32 0
  %31 = shufflevector <4 x i64> %30, <4 x i64> undef, <4 x i32> zeroinitializer
  %32 = insertelement <4 x i64> undef, i64 %1, i32 0
  %33 = shufflevector <4 x i64> %32, <4 x i64> undef, <4 x i32> zeroinitializer
  br label %34

34:                                               ; preds = %155, %7
  %35 = phi i32 [ %4, %7 ], [ %37, %155 ]
  %36 = phi i64* [ %0, %7 ], [ %158, %155 ]
  %37 = add nsw i32 %35, -1
  br i1 %8, label %38, label %52

38:                                               ; preds = %34
  br i1 %14, label %48, label %39

39:                                               ; preds = %38, %39
  %40 = phi i32 [ %45, %39 ], [ %2, %38 ]
  %41 = phi i64* [ %44, %39 ], [ %36, %38 ]
  %42 = phi i32 [ %46, %39 ], [ %13, %38 ]
  %43 = bitcast i64* %41 to <4 x i64>*
  store <4 x i64> %16, <4 x i64>* %43, align 1
  %44 = getelementptr inbounds i64, i64* %41, i64 4
  %45 = add nsw i32 %40, -4
  %46 = add i32 %42, -1
  %47 = icmp eq i32 %46, 0
  br i1 %47, label %48, label %39, !llvm.loop !25

48:                                               ; preds = %39, %38
  %49 = phi i32 [ %2, %38 ], [ %45, %39 ]
  %50 = phi i64* [ %36, %38 ], [ %44, %39 ]
  %51 = phi i64* [ undef, %38 ], [ %44, %39 ]
  br i1 %17, label %52, label %136

52:                                               ; preds = %48, %136, %34
  %53 = phi i64* [ %36, %34 ], [ %51, %48 ], [ %146, %136 ]
  %54 = phi i32 [ %2, %34 ], [ %9, %136 ], [ %9, %48 ]
  %55 = icmp sgt i32 %54, 0
  br i1 %55, label %56, label %155

56:                                               ; preds = %52
  %57 = add nsw i32 %54, -1
  %58 = zext i32 %57 to i64
  %59 = add nuw nsw i64 %58, 1
  %60 = icmp ult i64 %59, 16
  br i1 %60, label %61, label %64

61:                                               ; preds = %134, %56
  %62 = phi i32 [ %54, %56 ], [ %67, %134 ]
  %63 = phi i64* [ %53, %56 ], [ %68, %134 ]
  br label %149

64:                                               ; preds = %56
  %65 = and i64 %59, 8589934576
  %66 = trunc i64 %65 to i32
  %67 = sub i32 %54, %66
  %68 = getelementptr i64, i64* %53, i64 %65
  %69 = add nsw i64 %65, -16
  %70 = lshr exact i64 %69, 4
  %71 = add nuw nsw i64 %70, 1
  %72 = and i64 %71, 3
  %73 = icmp ult i64 %69, 48
  br i1 %73, label %117, label %74

74:                                               ; preds = %64
  %75 = sub nsw i64 %71, %72
  br label %76

76:                                               ; preds = %76, %74
  %77 = phi i64 [ 0, %74 ], [ %114, %76 ]
  %78 = phi i64 [ %75, %74 ], [ %115, %76 ]
  %79 = getelementptr i64, i64* %53, i64 %77
  %80 = bitcast i64* %79 to <4 x i64>*
  store <4 x i64> %27, <4 x i64>* %80, align 8
  %81 = getelementptr i64, i64* %79, i64 4
  %82 = bitcast i64* %81 to <4 x i64>*
  store <4 x i64> %29, <4 x i64>* %82, align 8
  %83 = getelementptr i64, i64* %79, i64 8
  %84 = bitcast i64* %83 to <4 x i64>*
  store <4 x i64> %31, <4 x i64>* %84, align 8
  %85 = getelementptr i64, i64* %79, i64 12
  %86 = bitcast i64* %85 to <4 x i64>*
  store <4 x i64> %33, <4 x i64>* %86, align 8
  %87 = or i64 %77, 16
  %88 = getelementptr i64, i64* %53, i64 %87
  %89 = bitcast i64* %88 to <4 x i64>*
  store <4 x i64> %27, <4 x i64>* %89, align 8
  %90 = getelementptr i64, i64* %88, i64 4
  %91 = bitcast i64* %90 to <4 x i64>*
  store <4 x i64> %29, <4 x i64>* %91, align 8
  %92 = getelementptr i64, i64* %88, i64 8
  %93 = bitcast i64* %92 to <4 x i64>*
  store <4 x i64> %31, <4 x i64>* %93, align 8
  %94 = getelementptr i64, i64* %88, i64 12
  %95 = bitcast i64* %94 to <4 x i64>*
  store <4 x i64> %33, <4 x i64>* %95, align 8
  %96 = or i64 %77, 32
  %97 = getelementptr i64, i64* %53, i64 %96
  %98 = bitcast i64* %97 to <4 x i64>*
  store <4 x i64> %27, <4 x i64>* %98, align 8
  %99 = getelementptr i64, i64* %97, i64 4
  %100 = bitcast i64* %99 to <4 x i64>*
  store <4 x i64> %29, <4 x i64>* %100, align 8
  %101 = getelementptr i64, i64* %97, i64 8
  %102 = bitcast i64* %101 to <4 x i64>*
  store <4 x i64> %31, <4 x i64>* %102, align 8
  %103 = getelementptr i64, i64* %97, i64 12
  %104 = bitcast i64* %103 to <4 x i64>*
  store <4 x i64> %33, <4 x i64>* %104, align 8
  %105 = or i64 %77, 48
  %106 = getelementptr i64, i64* %53, i64 %105
  %107 = bitcast i64* %106 to <4 x i64>*
  store <4 x i64> %27, <4 x i64>* %107, align 8
  %108 = getelementptr i64, i64* %106, i64 4
  %109 = bitcast i64* %108 to <4 x i64>*
  store <4 x i64> %29, <4 x i64>* %109, align 8
  %110 = getelementptr i64, i64* %106, i64 8
  %111 = bitcast i64* %110 to <4 x i64>*
  store <4 x i64> %31, <4 x i64>* %111, align 8
  %112 = getelementptr i64, i64* %106, i64 12
  %113 = bitcast i64* %112 to <4 x i64>*
  store <4 x i64> %33, <4 x i64>* %113, align 8
  %114 = add i64 %77, 64
  %115 = add i64 %78, -4
  %116 = icmp eq i64 %115, 0
  br i1 %116, label %117, label %76, !llvm.loop !26

117:                                              ; preds = %76, %64
  %118 = phi i64 [ 0, %64 ], [ %114, %76 ]
  %119 = icmp eq i64 %72, 0
  br i1 %119, label %134, label %120

120:                                              ; preds = %117, %120
  %121 = phi i64 [ %131, %120 ], [ %118, %117 ]
  %122 = phi i64 [ %132, %120 ], [ %72, %117 ]
  %123 = getelementptr i64, i64* %53, i64 %121
  %124 = bitcast i64* %123 to <4 x i64>*
  store <4 x i64> %27, <4 x i64>* %124, align 8
  %125 = getelementptr i64, i64* %123, i64 4
  %126 = bitcast i64* %125 to <4 x i64>*
  store <4 x i64> %29, <4 x i64>* %126, align 8
  %127 = getelementptr i64, i64* %123, i64 8
  %128 = bitcast i64* %127 to <4 x i64>*
  store <4 x i64> %31, <4 x i64>* %128, align 8
  %129 = getelementptr i64, i64* %123, i64 12
  %130 = bitcast i64* %129 to <4 x i64>*
  store <4 x i64> %33, <4 x i64>* %130, align 8
  %131 = add i64 %121, 16
  %132 = add i64 %122, -1
  %133 = icmp eq i64 %132, 0
  br i1 %133, label %134, label %120, !llvm.loop !27

134:                                              ; preds = %120, %117
  %135 = icmp eq i64 %59, %65
  br i1 %135, label %155, label %61

136:                                              ; preds = %48, %136
  %137 = phi i32 [ %147, %136 ], [ %49, %48 ]
  %138 = phi i64* [ %146, %136 ], [ %50, %48 ]
  %139 = bitcast i64* %138 to <4 x i64>*
  store <4 x i64> %19, <4 x i64>* %139, align 1
  %140 = getelementptr inbounds i64, i64* %138, i64 4
  %141 = bitcast i64* %140 to <4 x i64>*
  store <4 x i64> %21, <4 x i64>* %141, align 1
  %142 = getelementptr inbounds i64, i64* %138, i64 8
  %143 = bitcast i64* %142 to <4 x i64>*
  store <4 x i64> %23, <4 x i64>* %143, align 1
  %144 = getelementptr inbounds i64, i64* %138, i64 12
  %145 = bitcast i64* %144 to <4 x i64>*
  store <4 x i64> %25, <4 x i64>* %145, align 1
  %146 = getelementptr inbounds i64, i64* %138, i64 16
  %147 = add nsw i32 %137, -16
  %148 = icmp sgt i32 %147, 3
  br i1 %148, label %136, label %52

149:                                              ; preds = %61, %149
  %150 = phi i32 [ %152, %149 ], [ %62, %61 ]
  %151 = phi i64* [ %153, %149 ], [ %63, %61 ]
  %152 = add nsw i32 %150, -1
  %153 = getelementptr inbounds i64, i64* %151, i64 1
  store i64 %1, i64* %151, align 8
  %154 = icmp sgt i32 %152, 0
  br i1 %154, label %149, label %155, !llvm.loop !28

155:                                              ; preds = %149, %134, %52
  %156 = bitcast i64* %36 to i8*
  %157 = getelementptr inbounds i8, i8* %156, i64 %3
  %158 = bitcast i8* %157 to i64*
  %159 = icmp sgt i32 %37, 0
  br i1 %159, label %34, label %160

160:                                              ; preds = %155, %5
  ret void
}

attributes #0 = { nofree norecurse nounwind ssp uwtable writeonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+avx,+cx8,+fxsr,+mmx,+popcnt,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+ssse3,+x87,+xsave" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { inlinehint nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="128" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+avx,+cx8,+fxsr,+mmx,+popcnt,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+ssse3,+x87,+xsave" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { inlinehint nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+avx,+cx8,+fxsr,+mmx,+popcnt,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+ssse3,+x87,+xsave" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = distinct !{!2, !3}
!3 = !{!"llvm.loop.unroll.disable"}
!4 = distinct !{!4, !5}
!5 = !{!"llvm.loop.isvectorized", i32 1}
!6 = distinct !{!6, !3}
!7 = distinct !{!7, !8, !5}
!8 = !{!"llvm.loop.unroll.runtime.disable"}
!9 = distinct !{!9, !3}
!10 = distinct !{!10, !5}
!11 = distinct !{!11, !3}
!12 = distinct !{!12, !8, !5}
!13 = distinct !{!13, !3}
!14 = distinct !{!14, !5}
!15 = distinct !{!15, !3}
!16 = distinct !{!16, !8, !5}
!17 = distinct !{!17, !3}
!18 = distinct !{!18, !5}
!19 = distinct !{!19, !3}
!20 = distinct !{!20, !8, !5}
!21 = distinct !{!21, !3}
!22 = distinct !{!22, !5}
!23 = distinct !{!23, !3}
!24 = distinct !{!24, !8, !5}
!25 = distinct !{!25, !3}
!26 = distinct !{!26, !5}
!27 = distinct !{!27, !3}
!28 = distinct !{!28, !8, !5}
