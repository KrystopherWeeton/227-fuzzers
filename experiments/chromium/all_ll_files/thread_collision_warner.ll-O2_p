; ModuleID = '../../base/threading/thread_collision_warner.cc'
source_filename = "../../base/threading/thread_collision_warner.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"struct.base::DCheckAsserter" = type { %"struct.base::AsserterBase" }
%"struct.base::AsserterBase" = type { i32 (...)** }
%"class.base::ThreadCollisionWarner" = type { i32, i32, %"struct.base::AsserterBase"* }

$_ZN4base12AsserterBaseD2Ev = comdat any

$_ZN4base14DCheckAsserterD0Ev = comdat any

@_ZTVN4base14DCheckAsserterE = hidden unnamed_addr constant { [5 x i8*] } { [5 x i8*] [i8* null, i8* null, i8* bitcast (void (%"struct.base::AsserterBase"*)* @_ZN4base12AsserterBaseD2Ev to i8*), i8* bitcast (void (%"struct.base::DCheckAsserter"*)* @_ZN4base14DCheckAsserterD0Ev to i8*), i8* bitcast (void (%"struct.base::DCheckAsserter"*)* @_ZN4base14DCheckAsserter4warnEv to i8*)] }, align 8

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden void @_ZN4base14DCheckAsserter4warnEv(%"struct.base::DCheckAsserter"* nocapture) unnamed_addr #0 align 2 {
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN4base21ThreadCollisionWarner9EnterSelfEv(%"class.base::ThreadCollisionWarner"*) local_unnamed_addr #1 align 2 {
  %2 = tail call i32 @_ZN4base14PlatformThread9CurrentIdEv() #5
  %3 = getelementptr inbounds %"class.base::ThreadCollisionWarner", %"class.base::ThreadCollisionWarner"* %0, i64 0, i32 0
  %4 = cmpxchg volatile i32* %3, i32 0, i32 %2 monotonic monotonic
  %5 = extractvalue { i32, i1 } %4, 0
  %6 = extractvalue { i32, i1 } %4, 1
  %7 = icmp eq i32 %5, %2
  %8 = or i1 %6, %7
  br i1 %8, label %16, label %9

9:                                                ; preds = %1
  %10 = getelementptr inbounds %"class.base::ThreadCollisionWarner", %"class.base::ThreadCollisionWarner"* %0, i64 0, i32 2
  %11 = load %"struct.base::AsserterBase"*, %"struct.base::AsserterBase"** %10, align 8
  %12 = bitcast %"struct.base::AsserterBase"* %11 to void (%"struct.base::AsserterBase"*)***
  %13 = load void (%"struct.base::AsserterBase"*)**, void (%"struct.base::AsserterBase"*)*** %12, align 8
  %14 = getelementptr inbounds void (%"struct.base::AsserterBase"*)*, void (%"struct.base::AsserterBase"*)** %13, i64 2
  %15 = load void (%"struct.base::AsserterBase"*)*, void (%"struct.base::AsserterBase"*)** %14, align 8
  tail call void %15(%"struct.base::AsserterBase"* %11) #5
  br label %16

16:                                               ; preds = %1, %9
  %17 = getelementptr inbounds %"class.base::ThreadCollisionWarner", %"class.base::ThreadCollisionWarner"* %0, i64 0, i32 1
  %18 = atomicrmw volatile add i32* %17, i32 1 monotonic
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN4base21ThreadCollisionWarner5EnterEv(%"class.base::ThreadCollisionWarner"*) local_unnamed_addr #1 align 2 {
  %2 = tail call i32 @_ZN4base14PlatformThread9CurrentIdEv() #5
  %3 = getelementptr inbounds %"class.base::ThreadCollisionWarner", %"class.base::ThreadCollisionWarner"* %0, i64 0, i32 0
  %4 = cmpxchg volatile i32* %3, i32 0, i32 %2 monotonic monotonic
  %5 = extractvalue { i32, i1 } %4, 1
  br i1 %5, label %13, label %6

6:                                                ; preds = %1
  %7 = getelementptr inbounds %"class.base::ThreadCollisionWarner", %"class.base::ThreadCollisionWarner"* %0, i64 0, i32 2
  %8 = load %"struct.base::AsserterBase"*, %"struct.base::AsserterBase"** %7, align 8
  %9 = bitcast %"struct.base::AsserterBase"* %8 to void (%"struct.base::AsserterBase"*)***
  %10 = load void (%"struct.base::AsserterBase"*)**, void (%"struct.base::AsserterBase"*)*** %9, align 8
  %11 = getelementptr inbounds void (%"struct.base::AsserterBase"*)*, void (%"struct.base::AsserterBase"*)** %10, i64 2
  %12 = load void (%"struct.base::AsserterBase"*)*, void (%"struct.base::AsserterBase"*)** %11, align 8
  tail call void %12(%"struct.base::AsserterBase"* %8) #5
  br label %13

13:                                               ; preds = %1, %6
  %14 = getelementptr inbounds %"class.base::ThreadCollisionWarner", %"class.base::ThreadCollisionWarner"* %0, i64 0, i32 1
  %15 = atomicrmw volatile add i32* %14, i32 1 monotonic
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @_ZN4base21ThreadCollisionWarner5LeaveEv(%"class.base::ThreadCollisionWarner"*) local_unnamed_addr #2 align 2 {
  %2 = getelementptr inbounds %"class.base::ThreadCollisionWarner", %"class.base::ThreadCollisionWarner"* %0, i64 0, i32 1
  %3 = atomicrmw volatile add i32* %2, i32 -1 seq_cst
  %4 = icmp eq i32 %3, 1
  br i1 %4, label %5, label %7

5:                                                ; preds = %1
  %6 = getelementptr inbounds %"class.base::ThreadCollisionWarner", %"class.base::ThreadCollisionWarner"* %0, i64 0, i32 0
  store atomic volatile i32 0, i32* %6 monotonic, align 4
  br label %7

7:                                                ; preds = %5, %1
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN4base12AsserterBaseD2Ev(%"struct.base::AsserterBase"*) unnamed_addr #1 comdat align 2 {
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN4base14DCheckAsserterD0Ev(%"struct.base::DCheckAsserter"*) unnamed_addr #1 comdat align 2 {
  %2 = bitcast %"struct.base::DCheckAsserter"* %0 to i8*
  tail call void @_ZdlPv(i8* %2) #6
  ret void
}

declare i32 @_ZN4base14PlatformThread9CurrentIdEv() local_unnamed_addr #3

; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(i8*) local_unnamed_addr #4

attributes #0 = { norecurse nounwind readnone ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nofree norecurse nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind }
attributes #6 = { builtin nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
