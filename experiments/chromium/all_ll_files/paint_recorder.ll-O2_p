; ModuleID = '../../ui/compositor/paint_recorder.cc'
source_filename = "../../ui/compositor/paint_recorder.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"class.ui::PaintRecorder" = type { %"class.ui::PaintContext"*, %class.scoped_refptr.89, %"class.cc::RecordPaintCanvas", %"class.gfx::Canvas", %"class.ui::PaintCache"*, %"class.gfx::Size" }
%class.scoped_refptr.89 = type { %"class.cc::DisplayItemList"* }
%"class.cc::DisplayItemList" = type <{ %"class.base::RefCountedThreadSafe", [4 x i8], %"class.cc::RTree", %"class.cc::DiscardableImageMap", %"class.cc::PaintOpBuffer", %"class.std::__1::vector.68", %"class.std::__1::vector.75", %"class.std::__1::vector.82", i32, [4 x i8] }>
%"class.base::RefCountedThreadSafe" = type { %"class.base::subtle::RefCountedThreadSafeBase" }
%"class.base::subtle::RefCountedThreadSafeBase" = type { %"class.base::AtomicRefCount" }
%"class.base::AtomicRefCount" = type { %"struct.std::__1::atomic" }
%"struct.std::__1::atomic" = type { %"struct.std::__1::__atomic_base" }
%"struct.std::__1::__atomic_base" = type { %"struct.std::__1::__atomic_base.0" }
%"struct.std::__1::__atomic_base.0" = type { %"struct.std::__1::__cxx_atomic_impl" }
%"struct.std::__1::__cxx_atomic_impl" = type { %"struct.std::__1::__cxx_atomic_base_impl" }
%"struct.std::__1::__cxx_atomic_base_impl" = type { i32 }
%"class.cc::RTree" = type <{ i64, %"struct.cc::RTree<unsigned long>::Branch", %"class.std::__1::vector", i8, [7 x i8] }>
%"struct.cc::RTree<unsigned long>::Branch" = type { %"struct.cc::RTree<unsigned long>::Node"*, i64, %"class.gfx::Rect" }
%"struct.cc::RTree<unsigned long>::Node" = type opaque
%"class.gfx::Rect" = type { %"class.gfx::Point", %"class.gfx::Size" }
%"class.gfx::Point" = type { i32, i32 }
%"class.std::__1::vector" = type { %"class.std::__1::__vector_base" }
%"class.std::__1::__vector_base" = type { %"struct.cc::RTree<unsigned long>::Node"*, %"struct.cc::RTree<unsigned long>::Node"*, %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %"struct.cc::RTree<unsigned long>::Node"* }
%"class.cc::DiscardableImageMap" = type { %"class.base::flat_map", %"class.std::__1::vector.9", %"class.base::flat_map.23", i8, i8, [6 x i8], %"class.cc::RTree.33", %"class.std::__1::vector.60" }
%"class.base::flat_map" = type { %"class.base::internal::flat_tree" }
%"class.base::internal::flat_tree" = type { %"class.std::__1::vector.2" }
%"class.std::__1::vector.2" = type { %"class.std::__1::__vector_base.3" }
%"class.std::__1::__vector_base.3" = type { %"struct.std::__1::pair"*, %"struct.std::__1::pair"*, %"class.std::__1::__compressed_pair.4" }
%"struct.std::__1::pair" = type opaque
%"class.std::__1::__compressed_pair.4" = type { %"struct.std::__1::__compressed_pair_elem.5" }
%"struct.std::__1::__compressed_pair_elem.5" = type { %"struct.std::__1::pair"* }
%"class.std::__1::vector.9" = type { %"class.std::__1::__vector_base.10" }
%"class.std::__1::__vector_base.10" = type { %"struct.cc::DiscardableImageMap::AnimatedImageMetadata"*, %"struct.cc::DiscardableImageMap::AnimatedImageMetadata"*, %"class.std::__1::__compressed_pair.18" }
%"struct.cc::DiscardableImageMap::AnimatedImageMetadata" = type { i32, i32, %"class.std::__1::vector.11", i32, i32 }
%"class.std::__1::vector.11" = type { %"class.std::__1::__vector_base.12" }
%"class.std::__1::__vector_base.12" = type { %"struct.cc::FrameMetadata"*, %"struct.cc::FrameMetadata"*, %"class.std::__1::__compressed_pair.13" }
%"struct.cc::FrameMetadata" = type { i8, %"class.base::TimeDelta" }
%"class.base::TimeDelta" = type { i64 }
%"class.std::__1::__compressed_pair.13" = type { %"struct.std::__1::__compressed_pair_elem.14" }
%"struct.std::__1::__compressed_pair_elem.14" = type { %"struct.cc::FrameMetadata"* }
%"class.std::__1::__compressed_pair.18" = type { %"struct.std::__1::__compressed_pair_elem.19" }
%"struct.std::__1::__compressed_pair_elem.19" = type { %"struct.cc::DiscardableImageMap::AnimatedImageMetadata"* }
%"class.base::flat_map.23" = type { %"class.base::internal::flat_tree.24" }
%"class.base::internal::flat_tree.24" = type { %"class.std::__1::vector.25" }
%"class.std::__1::vector.25" = type { %"class.std::__1::__vector_base.26" }
%"class.std::__1::__vector_base.26" = type { %"struct.std::__1::pair.27"*, %"struct.std::__1::pair.27"*, %"class.std::__1::__compressed_pair.28" }
%"struct.std::__1::pair.27" = type { i32, i32 }
%"class.std::__1::__compressed_pair.28" = type { %"struct.std::__1::__compressed_pair_elem.29" }
%"struct.std::__1::__compressed_pair_elem.29" = type { %"struct.std::__1::pair.27"* }
%"class.cc::RTree.33" = type <{ i64, %"struct.cc::RTree<cc::DrawImage>::Branch", %"class.std::__1::vector.52", i8, [7 x i8] }>
%"struct.cc::RTree<cc::DrawImage>::Branch" = type { %"struct.cc::RTree<cc::DrawImage>::Node"*, %"class.cc::DrawImage", %"class.gfx::Rect" }
%"struct.cc::RTree<cc::DrawImage>::Node" = type opaque
%"class.cc::DrawImage" = type <{ %"class.cc::PaintImage", i8, [3 x i8], %struct.SkIRect, i32, %struct.SkSize, i8, [7 x i8], %"class.absl::optional", %"class.absl::optional.47", float, [4 x i8] }>
%"class.cc::PaintImage" = type { %class.sk_sp, %class.sk_sp.40, %"class.gfx::Rect", i32, %class.sk_sp.44, %class.sk_sp.45, i32, i32, i32, i32, i8, i8, i32, i32, %class.sk_sp, %class.scoped_refptr }
%class.sk_sp.40 = type { %"class.cc::PaintOpBuffer"* }
%class.sk_sp.44 = type { %"class.cc::PaintImageGenerator"* }
%"class.cc::PaintImageGenerator" = type opaque
%class.sk_sp.45 = type { %"class.cc::TextureBacking"* }
%"class.cc::TextureBacking" = type opaque
%class.sk_sp = type { %class.SkImage* }
%class.SkImage = type <{ %class.SkRefCnt.base, [4 x i8], %struct.SkImageInfo, i32, [4 x i8] }>
%class.SkRefCnt.base = type { %class.SkRefCntBase.base }
%class.SkRefCntBase.base = type <{ i32 (...)**, %"struct.std::__1::atomic" }>
%struct.SkImageInfo = type { %class.SkColorInfo, %struct.SkISize }
%class.SkColorInfo = type { %class.sk_sp.34, i32, i32 }
%class.sk_sp.34 = type { %class.SkColorSpace* }
%class.SkColorSpace = type <{ %class.SkNVRefCnt, i32, i32, %struct.skcms_TransferFunction, %struct.skcms_Matrix3x3, %struct.skcms_TransferFunction, %struct.skcms_Matrix3x3, %class.SkOnce, [3 x i8] }>
%class.SkNVRefCnt = type { %"struct.std::__1::atomic" }
%struct.skcms_TransferFunction = type { float, float, float, float, float, float, float }
%struct.skcms_Matrix3x3 = type { [3 x [3 x float]] }
%class.SkOnce = type { %"struct.std::__1::atomic.35" }
%"struct.std::__1::atomic.35" = type { %"struct.std::__1::__atomic_base.36" }
%"struct.std::__1::__atomic_base.36" = type { %"struct.std::__1::__atomic_base.37" }
%"struct.std::__1::__atomic_base.37" = type { %"struct.std::__1::__cxx_atomic_impl.38" }
%"struct.std::__1::__cxx_atomic_impl.38" = type { %"struct.std::__1::__cxx_atomic_base_impl.39" }
%"struct.std::__1::__cxx_atomic_base_impl.39" = type { i8 }
%struct.SkISize = type { i32, i32 }
%class.scoped_refptr = type { %"class.cc::PaintWorkletInput"* }
%"class.cc::PaintWorkletInput" = type <{ i32 (...)**, %"class.base::RefCountedThreadSafe.46", [4 x i8] }>
%"class.base::RefCountedThreadSafe.46" = type { %"class.base::subtle::RefCountedThreadSafeBase" }
%struct.SkIRect = type { i32, i32, i32, i32 }
%struct.SkSize = type { float, float }
%"class.absl::optional" = type { %"class.absl::optional_internal::optional_data" }
%"class.absl::optional_internal::optional_data" = type { %"class.absl::optional_internal::optional_data_base" }
%"class.absl::optional_internal::optional_data_base" = type { %"class.absl::optional_internal::optional_data_dtor_base" }
%"class.absl::optional_internal::optional_data_dtor_base" = type { i8, %union.anon }
%union.anon = type { i64 }
%"class.absl::optional.47" = type { %"class.absl::optional_internal::optional_data.48" }
%"class.absl::optional_internal::optional_data.48" = type { %"class.absl::optional_internal::optional_data_base.49" }
%"class.absl::optional_internal::optional_data_base.49" = type { %"class.absl::optional_internal::optional_data_dtor_base.50" }
%"class.absl::optional_internal::optional_data_dtor_base.50" = type { i8, %union.anon.51 }
%union.anon.51 = type { %"class.gfx::ColorSpace" }
%"class.gfx::ColorSpace" = type { i8, i8, i8, i8, [9 x float], [7 x float] }
%"class.std::__1::vector.52" = type { %"class.std::__1::__vector_base.53" }
%"class.std::__1::__vector_base.53" = type { %"struct.cc::RTree<cc::DrawImage>::Node"*, %"struct.cc::RTree<cc::DrawImage>::Node"*, %"class.std::__1::__compressed_pair.54" }
%"class.std::__1::__compressed_pair.54" = type { %"struct.std::__1::__compressed_pair_elem.55" }
%"struct.std::__1::__compressed_pair_elem.55" = type { %"struct.cc::RTree<cc::DrawImage>::Node"* }
%"class.std::__1::vector.60" = type { %"class.std::__1::__vector_base.61" }
%"class.std::__1::__vector_base.61" = type { %"struct.std::__1::pair.62"*, %"struct.std::__1::pair.62"*, %"class.std::__1::__compressed_pair.63" }
%"struct.std::__1::pair.62" = type opaque
%"class.std::__1::__compressed_pair.63" = type { %"struct.std::__1::__compressed_pair_elem.64" }
%"struct.std::__1::__compressed_pair_elem.64" = type { %"struct.std::__1::pair.62"* }
%"class.cc::PaintOpBuffer" = type <{ %class.SkRefCnt.base, [4 x i8], %"class.std::__1::unique_ptr", i64, i64, i64, i64, i64, i32, i8, [3 x i8] }>
%"class.std::__1::unique_ptr" = type { %"class.std::__1::__compressed_pair.41" }
%"class.std::__1::__compressed_pair.41" = type { %"struct.std::__1::__compressed_pair_elem.42" }
%"struct.std::__1::__compressed_pair_elem.42" = type { i8* }
%"class.std::__1::vector.68" = type { %"class.std::__1::__vector_base.69" }
%"class.std::__1::__vector_base.69" = type { %"class.gfx::Rect"*, %"class.gfx::Rect"*, %"class.std::__1::__compressed_pair.70" }
%"class.std::__1::__compressed_pair.70" = type { %"struct.std::__1::__compressed_pair_elem.71" }
%"struct.std::__1::__compressed_pair_elem.71" = type { %"class.gfx::Rect"* }
%"class.std::__1::vector.75" = type { %"class.std::__1::__vector_base.76" }
%"class.std::__1::__vector_base.76" = type { i64*, i64*, %"class.std::__1::__compressed_pair.77" }
%"class.std::__1::__compressed_pair.77" = type { %"struct.std::__1::__compressed_pair_elem.78" }
%"struct.std::__1::__compressed_pair_elem.78" = type { i64* }
%"class.std::__1::vector.82" = type { %"class.std::__1::__vector_base.83" }
%"class.std::__1::__vector_base.83" = type { %"struct.cc::DisplayItemList::PairedBeginInfo"*, %"struct.cc::DisplayItemList::PairedBeginInfo"*, %"class.std::__1::__compressed_pair.84" }
%"struct.cc::DisplayItemList::PairedBeginInfo" = type { i64, i64 }
%"class.std::__1::__compressed_pair.84" = type { %"struct.std::__1::__compressed_pair_elem.85" }
%"struct.std::__1::__compressed_pair_elem.85" = type { %"struct.cc::DisplayItemList::PairedBeginInfo"* }
%"class.cc::RecordPaintCanvas" = type { %"class.cc::PaintCanvas", %"class.cc::DisplayItemList"*, %"class.absl::optional.90", %struct.SkRect }
%"class.cc::PaintCanvas" = type { i32 (...)**, %"class.printing::MetafileSkia"*, %"class.paint_preview::PaintPreviewTracker"* }
%"class.printing::MetafileSkia" = type opaque
%"class.paint_preview::PaintPreviewTracker" = type opaque
%"class.absl::optional.90" = type { %"class.absl::optional_internal::optional_data.91" }
%"class.absl::optional_internal::optional_data.91" = type { %"class.absl::optional_internal::optional_data_base.92" }
%"class.absl::optional_internal::optional_data_base.92" = type { %"class.absl::optional_internal::optional_data_dtor_base.93" }
%"class.absl::optional_internal::optional_data_dtor_base.93" = type { i8, %union.anon.94 }
%union.anon.94 = type { %class.SkNoDrawCanvas }
%class.SkNoDrawCanvas = type { %class.SkCanvasVirtualEnforcer }
%class.SkCanvasVirtualEnforcer = type { %class.SkCanvas }
%class.SkCanvas = type { i32 (...)**, %class.SkDeque, %"class.SkCanvas::MCRec"*, %class.sk_sp.95, [384 x i64], %class.sk_sp.96, %class.SkSurfaceProps, i32, %"class.std::__1::unique_ptr.97", %class.SkSurface_Base*, %struct.SkIRect, %struct.SkRect, %"class.std::__1::unique_ptr.101" }
%class.SkDeque = type { i8*, i8*, %"struct.SkDeque::Block"*, %"struct.SkDeque::Block"*, i64, i8*, i32, i32 }
%"struct.SkDeque::Block" = type opaque
%"class.SkCanvas::MCRec" = type opaque
%class.sk_sp.95 = type { %class.SkMarkerStack* }
%class.SkMarkerStack = type opaque
%class.sk_sp.96 = type { %class.SkBaseDevice* }
%class.SkBaseDevice = type opaque
%class.SkSurfaceProps = type { i32, i32 }
%"class.std::__1::unique_ptr.97" = type { %"class.std::__1::__compressed_pair.98" }
%"class.std::__1::__compressed_pair.98" = type { %"struct.std::__1::__compressed_pair_elem.99" }
%"struct.std::__1::__compressed_pair_elem.99" = type { %class.SkRasterHandleAllocator* }
%class.SkRasterHandleAllocator = type { i32 (...)** }
%class.SkSurface_Base = type opaque
%"class.std::__1::unique_ptr.101" = type { %"class.std::__1::__compressed_pair.102" }
%"class.std::__1::__compressed_pair.102" = type { %"struct.std::__1::__compressed_pair_elem.103" }
%"struct.std::__1::__compressed_pair_elem.103" = type { %class.SkGlyphRunBuilder* }
%class.SkGlyphRunBuilder = type opaque
%struct.SkRect = type { float, float, float, float }
%"class.gfx::Canvas" = type { i32 (...)**, float, %"class.absl::optional.111", %"class.absl::optional.118", %"class.cc::PaintCanvas"* }
%"class.absl::optional.111" = type { %"class.absl::optional_internal::optional_data.112" }
%"class.absl::optional_internal::optional_data.112" = type { %"class.absl::optional_internal::optional_data_base.113" }
%"class.absl::optional_internal::optional_data_base.113" = type { %"class.absl::optional_internal::optional_data_dtor_base.114" }
%"class.absl::optional_internal::optional_data_dtor_base.114" = type { i8, %union.anon.115 }
%union.anon.115 = type { %class.SkBitmap }
%class.SkBitmap = type { %class.sk_sp.116, %class.SkPixmap, %class.sk_sp.117 }
%class.sk_sp.116 = type { %class.SkPixelRef* }
%class.SkPixelRef = type opaque
%class.SkPixmap = type { i8*, i64, %struct.SkImageInfo }
%class.sk_sp.117 = type { %class.SkMipmap* }
%class.SkMipmap = type opaque
%"class.absl::optional.118" = type { %"class.absl::optional_internal::optional_data.119" }
%"class.absl::optional_internal::optional_data.119" = type { %"class.absl::optional_internal::optional_data_base.120" }
%"class.absl::optional_internal::optional_data_base.120" = type { %"class.absl::optional_internal::optional_data_dtor_base.121" }
%"class.absl::optional_internal::optional_data_dtor_base.121" = type { i8, [7 x i8], %union.anon.122 }
%union.anon.122 = type { %"class.cc::SkiaPaintCanvas" }
%"class.cc::SkiaPaintCanvas" = type <{ %"class.cc::PaintCanvas", %class.SkCanvas*, %class.SkBitmap, %"class.std::__1::unique_ptr.123", %"class.cc::ImageProvider"*, %"struct.cc::SkiaPaintCanvas::ContextFlushes", i32, [4 x i8] }>
%"class.std::__1::unique_ptr.123" = type { %"class.std::__1::__compressed_pair.124" }
%"class.std::__1::__compressed_pair.124" = type { %"struct.std::__1::__compressed_pair_elem.125" }
%"struct.std::__1::__compressed_pair_elem.125" = type { %class.SkCanvas* }
%"class.cc::ImageProvider" = type opaque
%"struct.cc::SkiaPaintCanvas::ContextFlushes" = type { i8, i32 }
%"class.gfx::Size" = type { i32, i32 }
%"class.ui::PaintContext" = type <{ %"class.cc::DisplayItemList"*, float, %"class.gfx::Rect", %"class.gfx::Vector2d", i8, [3 x i8] }>
%"class.gfx::Vector2d" = type { i32, i32 }
%"class.ui::PaintCache" = type <{ %class.sk_sp.40, float, [4 x i8] }>
%class.SkRefCntBase = type <{ i32 (...)**, %"struct.std::__1::atomic", [4 x i8] }>
%"class.std::__1::__vector_base_common" = type { i8 }

$_ZNSt3__16vectorIN3gfx4RectENS_9allocatorIS2_EEE8__appendEmRKS2_ = comdat any

@_ZN2ui13PaintRecorderC1ERKNS_12PaintContextERKN3gfx4SizeEffPNS_10PaintCacheE = hidden unnamed_addr alias void (%"class.ui::PaintRecorder"*, %"class.ui::PaintContext"*, %"class.gfx::Size"*, float, float, %"class.ui::PaintCache"*), void (%"class.ui::PaintRecorder"*, %"class.ui::PaintContext"*, %"class.gfx::Size"*, float, float, %"class.ui::PaintCache"*)* @_ZN2ui13PaintRecorderC2ERKNS_12PaintContextERKN3gfx4SizeEffPNS_10PaintCacheE
@_ZN2ui13PaintRecorderC1ERKNS_12PaintContextERKN3gfx4SizeE = hidden unnamed_addr alias void (%"class.ui::PaintRecorder"*, %"class.ui::PaintContext"*, %"class.gfx::Size"*), void (%"class.ui::PaintRecorder"*, %"class.ui::PaintContext"*, %"class.gfx::Size"*)* @_ZN2ui13PaintRecorderC2ERKNS_12PaintContextERKN3gfx4SizeE
@_ZN2ui13PaintRecorderD1Ev = hidden unnamed_addr alias void (%"class.ui::PaintRecorder"*), void (%"class.ui::PaintRecorder"*)* @_ZN2ui13PaintRecorderD2Ev

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2ui13PaintRecorderC2ERKNS_12PaintContextERKN3gfx4SizeEffPNS_10PaintCacheE(%"class.ui::PaintRecorder"*, %"class.ui::PaintContext"* dereferenceable(40), %"class.gfx::Size"* nocapture readonly dereferenceable(8), float, float, %"class.ui::PaintCache"*) unnamed_addr #0 align 2 {
  %7 = alloca { <2 x float>, <2 x float> }, align 8
  %8 = bitcast { <2 x float>, <2 x float> }* %7 to %struct.SkRect*
  %9 = alloca %"class.gfx::Rect", align 4
  %10 = getelementptr inbounds %"class.ui::PaintRecorder", %"class.ui::PaintRecorder"* %0, i64 0, i32 0
  store %"class.ui::PaintContext"* %1, %"class.ui::PaintContext"** %10, align 8
  %11 = getelementptr inbounds %"class.ui::PaintRecorder", %"class.ui::PaintRecorder"* %0, i64 0, i32 1
  %12 = icmp eq %"class.ui::PaintCache"* %5, null
  br i1 %12, label %19, label %13

13:                                               ; preds = %6
  %14 = tail call i8* @_Znwm(i64 640) #8
  %15 = bitcast i8* %14 to %"class.cc::DisplayItemList"*
  tail call void @_ZN2cc15DisplayItemListC1ENS0_9UsageHintE(%"class.cc::DisplayItemList"* nonnull %15, i32 1) #9
  %16 = bitcast i8* %14 to i32*
  %17 = atomicrmw add i32* %16, i32 1 monotonic
  %18 = bitcast %class.scoped_refptr.89* %11 to i8**
  store i8* %14, i8** %18, align 8
  br label %23

19:                                               ; preds = %6
  %20 = getelementptr inbounds %class.scoped_refptr.89, %class.scoped_refptr.89* %11, i64 0, i32 0
  store %"class.cc::DisplayItemList"* null, %"class.cc::DisplayItemList"** %20, align 8
  %21 = getelementptr inbounds %"class.ui::PaintContext", %"class.ui::PaintContext"* %1, i64 0, i32 0
  %22 = load %"class.cc::DisplayItemList"*, %"class.cc::DisplayItemList"** %21, align 8
  br label %23

23:                                               ; preds = %19, %13
  %24 = phi %"class.cc::DisplayItemList"* [ %15, %13 ], [ %22, %19 ]
  %25 = getelementptr inbounds %"class.ui::PaintRecorder", %"class.ui::PaintRecorder"* %0, i64 0, i32 2
  %26 = bitcast { <2 x float>, <2 x float> }* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %26) #9
  %27 = bitcast %"class.gfx::Rect"* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %27) #9
  %28 = getelementptr inbounds %"class.gfx::Rect", %"class.gfx::Rect"* %9, i64 0, i32 0, i32 0
  store i32 0, i32* %28, align 4
  %29 = getelementptr inbounds %"class.gfx::Rect", %"class.gfx::Rect"* %9, i64 0, i32 0, i32 1
  store i32 0, i32* %29, align 4
  %30 = getelementptr inbounds %"class.gfx::Rect", %"class.gfx::Rect"* %9, i64 0, i32 1
  %31 = bitcast %"class.gfx::Size"* %2 to i64*
  %32 = bitcast %"class.gfx::Size"* %30 to i64*
  %33 = load i64, i64* %31, align 4
  store i64 %33, i64* %32, align 4
  %34 = call { <2 x float>, <2 x float> } @_ZN3gfx12RectToSkRectERKNS_4RectE(%"class.gfx::Rect"* nonnull dereferenceable(16) %9) #9
  %35 = getelementptr inbounds { <2 x float>, <2 x float> }, { <2 x float>, <2 x float> }* %7, i64 0, i32 0
  %36 = extractvalue { <2 x float>, <2 x float> } %34, 0
  store <2 x float> %36, <2 x float>* %35, align 8
  %37 = getelementptr inbounds { <2 x float>, <2 x float> }, { <2 x float>, <2 x float> }* %7, i64 0, i32 1
  %38 = extractvalue { <2 x float>, <2 x float> } %34, 1
  store <2 x float> %38, <2 x float>* %37, align 8
  call void @_ZN2cc17RecordPaintCanvasC1EPNS_15DisplayItemListERK6SkRect(%"class.cc::RecordPaintCanvas"* %25, %"class.cc::DisplayItemList"* %24, %struct.SkRect* nonnull dereferenceable(16) %8) #9
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %27) #9
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %26) #9
  %39 = getelementptr inbounds %"class.ui::PaintRecorder", %"class.ui::PaintRecorder"* %0, i64 0, i32 3
  %40 = getelementptr inbounds %"class.cc::RecordPaintCanvas", %"class.cc::RecordPaintCanvas"* %25, i64 0, i32 0
  %41 = getelementptr inbounds %"class.ui::PaintContext", %"class.ui::PaintContext"* %1, i64 0, i32 1
  %42 = load float, float* %41, align 8
  call void @_ZN3gfx6CanvasC1EPN2cc11PaintCanvasEf(%"class.gfx::Canvas"* %39, %"class.cc::PaintCanvas"* %40, float %42) #9
  %43 = getelementptr inbounds %"class.ui::PaintRecorder", %"class.ui::PaintRecorder"* %0, i64 0, i32 4
  store %"class.ui::PaintCache"* %5, %"class.ui::PaintCache"** %43, align 8
  %44 = getelementptr inbounds %"class.ui::PaintRecorder", %"class.ui::PaintRecorder"* %0, i64 0, i32 5
  %45 = bitcast %"class.gfx::Size"* %44 to i64*
  %46 = load i64, i64* %31, align 4
  store i64 %46, i64* %45, align 8
  %47 = load %"class.ui::PaintContext"*, %"class.ui::PaintContext"** %10, align 8
  %48 = getelementptr inbounds %"class.ui::PaintContext", %"class.ui::PaintContext"* %47, i64 0, i32 4
  %49 = load i8, i8* %48, align 4, !range !2
  %50 = icmp eq i8 %49, 0
  br i1 %50, label %52, label %51

51:                                               ; preds = %23
  call void @_ZN3gfx6Canvas4SaveEv(%"class.gfx::Canvas"* %39) #9
  call void @_ZN3gfx6Canvas5ScaleEff(%"class.gfx::Canvas"* %39, float %3, float %4) #9
  br label %52

52:                                               ; preds = %23, %51
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

declare { <2 x float>, <2 x float> } @_ZN3gfx12RectToSkRectERKNS_4RectE(%"class.gfx::Rect"* dereferenceable(16)) local_unnamed_addr #2

declare void @_ZN2cc17RecordPaintCanvasC1EPNS_15DisplayItemListERK6SkRect(%"class.cc::RecordPaintCanvas"*, %"class.cc::DisplayItemList"*, %struct.SkRect* dereferenceable(16)) unnamed_addr #2

declare void @_ZN3gfx6CanvasC1EPN2cc11PaintCanvasEf(%"class.gfx::Canvas"*, %"class.cc::PaintCanvas"*, float) unnamed_addr #2

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #1

declare void @_ZN3gfx6Canvas4SaveEv(%"class.gfx::Canvas"*) local_unnamed_addr #2

declare void @_ZN3gfx6Canvas5ScaleEff(%"class.gfx::Canvas"*, float, float) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2ui13PaintRecorderC2ERKNS_12PaintContextERKN3gfx4SizeE(%"class.ui::PaintRecorder"*, %"class.ui::PaintContext"* dereferenceable(40), %"class.gfx::Size"* dereferenceable(8)) unnamed_addr #0 align 2 {
  %4 = alloca i64, align 8
  %5 = bitcast i64* %4 to %"class.gfx::Size"*
  %6 = bitcast i64* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %6) #9
  %7 = getelementptr inbounds %"class.ui::PaintContext", %"class.ui::PaintContext"* %1, i64 0, i32 4
  %8 = load i8, i8* %7, align 4, !range !2
  %9 = icmp eq i8 %8, 0
  br i1 %9, label %13, label %10

10:                                               ; preds = %3
  %11 = getelementptr inbounds %"class.ui::PaintContext", %"class.ui::PaintContext"* %1, i64 0, i32 1
  %12 = load float, float* %11, align 8
  br label %13

13:                                               ; preds = %3, %10
  %14 = phi float [ %12, %10 ], [ 1.000000e+00, %3 ]
  %15 = tail call i64 @_ZN3gfx18ScaleToRoundedSizeERKNS_4SizeEf(%"class.gfx::Size"* dereferenceable(8) %2, float %14) #9
  store i64 %15, i64* %4, align 8
  %16 = getelementptr inbounds %"class.ui::PaintContext", %"class.ui::PaintContext"* %1, i64 0, i32 1
  %17 = load float, float* %16, align 8
  call void @_ZN2ui13PaintRecorderC2ERKNS_12PaintContextERKN3gfx4SizeEffPNS_10PaintCacheE(%"class.ui::PaintRecorder"* %0, %"class.ui::PaintContext"* dereferenceable(40) %1, %"class.gfx::Size"* nonnull dereferenceable(8) %5, float %17, float %17, %"class.ui::PaintCache"* null)
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %6) #9
  ret void
}

declare i64 @_ZN3gfx18ScaleToRoundedSizeERKNS_4SizeEf(%"class.gfx::Size"* dereferenceable(8), float) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2ui13PaintRecorderD2Ev(%"class.ui::PaintRecorder"*) unnamed_addr #0 align 2 {
  %2 = alloca %"class.gfx::Rect", align 4
  %3 = alloca %class.sk_sp.40, align 8
  %4 = alloca { i64, i64 }, align 8
  %5 = bitcast { i64, i64 }* %4 to %"class.gfx::Rect"*
  %6 = getelementptr inbounds %"class.ui::PaintRecorder", %"class.ui::PaintRecorder"* %0, i64 0, i32 0
  %7 = load %"class.ui::PaintContext"*, %"class.ui::PaintContext"** %6, align 8
  %8 = getelementptr inbounds %"class.ui::PaintContext", %"class.ui::PaintContext"* %7, i64 0, i32 4
  %9 = load i8, i8* %8, align 4, !range !2
  %10 = icmp eq i8 %9, 0
  br i1 %10, label %13, label %11

11:                                               ; preds = %1
  %12 = getelementptr inbounds %"class.ui::PaintRecorder", %"class.ui::PaintRecorder"* %0, i64 0, i32 3
  tail call void @_ZN3gfx6Canvas7RestoreEv(%"class.gfx::Canvas"* %12) #9
  br label %13

13:                                               ; preds = %1, %11
  %14 = getelementptr inbounds %"class.ui::PaintRecorder", %"class.ui::PaintRecorder"* %0, i64 0, i32 4
  %15 = load %"class.ui::PaintCache"*, %"class.ui::PaintCache"** %14, align 8
  %16 = icmp eq %"class.ui::PaintCache"* %15, null
  br i1 %16, label %81, label %17

17:                                               ; preds = %13
  %18 = getelementptr inbounds %"class.ui::PaintRecorder", %"class.ui::PaintRecorder"* %0, i64 0, i32 1, i32 0
  %19 = load %"class.cc::DisplayItemList"*, %"class.cc::DisplayItemList"** %18, align 8
  %20 = bitcast %"class.gfx::Rect"* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %20) #9
  %21 = getelementptr inbounds %"class.cc::DisplayItemList", %"class.cc::DisplayItemList"* %19, i64 0, i32 8
  %22 = bitcast %"class.gfx::Rect"* %2 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 4 %22, i8 0, i64 16, i1 false)
  %23 = load i32, i32* %21, align 8
  %24 = icmp eq i32 %23, 1
  br i1 %24, label %56, label %25

25:                                               ; preds = %17
  %26 = getelementptr inbounds %"class.cc::DisplayItemList", %"class.cc::DisplayItemList"* %19, i64 0, i32 5
  %27 = getelementptr inbounds %"class.cc::DisplayItemList", %"class.cc::DisplayItemList"* %19, i64 0, i32 4, i32 5
  %28 = load i64, i64* %27, align 8
  %29 = getelementptr inbounds %"class.cc::DisplayItemList", %"class.cc::DisplayItemList"* %19, i64 0, i32 5, i32 0, i32 1
  %30 = bitcast %"class.gfx::Rect"** %29 to i64*
  %31 = load i64, i64* %30, align 8
  %32 = bitcast %"class.std::__1::vector.68"* %26 to i64*
  %33 = load i64, i64* %32, align 8
  %34 = sub i64 %31, %33
  %35 = ashr exact i64 %34, 4
  %36 = icmp ugt i64 %28, %35
  %37 = inttoptr i64 %33 to %"class.gfx::Rect"*
  br i1 %36, label %38, label %40

38:                                               ; preds = %25
  %39 = sub i64 %28, %35
  call void @_ZNSt3__16vectorIN3gfx4RectENS_9allocatorIS2_EEE8__appendEmRKS2_(%"class.std::__1::vector.68"* %26, i64 %39, %"class.gfx::Rect"* nonnull dereferenceable(16) %2) #9
  br label %44

40:                                               ; preds = %25
  %41 = icmp ult i64 %28, %35
  br i1 %41, label %42, label %44

42:                                               ; preds = %40
  %43 = getelementptr inbounds %"class.gfx::Rect", %"class.gfx::Rect"* %37, i64 %28
  store %"class.gfx::Rect"* %43, %"class.gfx::Rect"** %29, align 8
  br label %44

44:                                               ; preds = %42, %40, %38
  %45 = getelementptr inbounds %"class.cc::DisplayItemList", %"class.cc::DisplayItemList"* %19, i64 0, i32 7, i32 0, i32 0
  %46 = load %"struct.cc::DisplayItemList::PairedBeginInfo"*, %"struct.cc::DisplayItemList::PairedBeginInfo"** %45, align 8
  %47 = getelementptr inbounds %"class.cc::DisplayItemList", %"class.cc::DisplayItemList"* %19, i64 0, i32 7, i32 0, i32 1
  %48 = load %"struct.cc::DisplayItemList::PairedBeginInfo"*, %"struct.cc::DisplayItemList::PairedBeginInfo"** %47, align 8
  %49 = icmp eq %"struct.cc::DisplayItemList::PairedBeginInfo"* %46, %48
  br i1 %49, label %56, label %50

50:                                               ; preds = %44
  %51 = getelementptr inbounds %"struct.cc::DisplayItemList::PairedBeginInfo", %"struct.cc::DisplayItemList::PairedBeginInfo"* %48, i64 -1, i32 0
  %52 = load i64, i64* %51, align 8
  %53 = getelementptr inbounds %"class.cc::DisplayItemList", %"class.cc::DisplayItemList"* %19, i64 0, i32 5, i32 0, i32 0
  %54 = load %"class.gfx::Rect"*, %"class.gfx::Rect"** %53, align 8
  %55 = getelementptr inbounds %"class.gfx::Rect", %"class.gfx::Rect"* %54, i64 %52
  call void @_ZN3gfx4Rect5UnionERKS0_(%"class.gfx::Rect"* %55, %"class.gfx::Rect"* nonnull dereferenceable(16) %2) #9
  br label %56

56:                                               ; preds = %17, %44, %50
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %20) #9
  %57 = load %"class.cc::DisplayItemList"*, %"class.cc::DisplayItemList"** %18, align 8
  call void @_ZN2cc15DisplayItemList8FinalizeEv(%"class.cc::DisplayItemList"* %57) #9
  %58 = load %"class.ui::PaintCache"*, %"class.ui::PaintCache"** %14, align 8
  %59 = load %"class.cc::DisplayItemList"*, %"class.cc::DisplayItemList"** %18, align 8
  call void @_ZN2cc15DisplayItemList15ReleaseAsRecordEv(%class.sk_sp.40* nonnull sret %3, %"class.cc::DisplayItemList"* %59) #9
  %60 = load %"class.ui::PaintContext"*, %"class.ui::PaintContext"** %6, align 8
  %61 = getelementptr inbounds %"class.ui::PaintContext", %"class.ui::PaintContext"* %60, i64 0, i32 1
  %62 = load float, float* %61, align 8
  call void @_ZN2ui10PaintCache16SetPaintOpBufferE5sk_spIN2cc13PaintOpBufferEEf(%"class.ui::PaintCache"* %58, %class.sk_sp.40* nonnull %3, float %62) #9
  %63 = getelementptr inbounds %class.sk_sp.40, %class.sk_sp.40* %3, i64 0, i32 0
  %64 = load %"class.cc::PaintOpBuffer"*, %"class.cc::PaintOpBuffer"** %63, align 8
  %65 = icmp eq %"class.cc::PaintOpBuffer"* %64, null
  br i1 %65, label %76, label %66

66:                                               ; preds = %56
  %67 = getelementptr inbounds %"class.cc::PaintOpBuffer", %"class.cc::PaintOpBuffer"* %64, i64 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0
  %68 = atomicrmw add i32* %67, i32 -1 acq_rel
  %69 = icmp eq i32 %68, 1
  br i1 %69, label %70, label %76

70:                                               ; preds = %66
  %71 = bitcast %"class.cc::PaintOpBuffer"* %64 to %class.SkRefCntBase*
  %72 = bitcast %"class.cc::PaintOpBuffer"* %64 to void (%class.SkRefCntBase*)***
  %73 = load void (%class.SkRefCntBase*)**, void (%class.SkRefCntBase*)*** %72, align 8
  %74 = getelementptr inbounds void (%class.SkRefCntBase*)*, void (%class.SkRefCntBase*)** %73, i64 2
  %75 = load void (%class.SkRefCntBase*)*, void (%class.SkRefCntBase*)** %74, align 8
  call void %75(%class.SkRefCntBase* nonnull %71) #9
  br label %76

76:                                               ; preds = %56, %66, %70
  %77 = load %"class.ui::PaintCache"*, %"class.ui::PaintCache"** %14, align 8
  %78 = load %"class.ui::PaintContext"*, %"class.ui::PaintContext"** %6, align 8
  %79 = getelementptr inbounds %"class.ui::PaintRecorder", %"class.ui::PaintRecorder"* %0, i64 0, i32 5
  %80 = call zeroext i1 @_ZN2ui10PaintCache8UseCacheERKNS_12PaintContextERKN3gfx4SizeE(%"class.ui::PaintCache"* %77, %"class.ui::PaintContext"* dereferenceable(40) %78, %"class.gfx::Size"* dereferenceable(8) %79) #9
  br label %128

81:                                               ; preds = %13
  %82 = bitcast { i64, i64 }* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %82) #9
  %83 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %4, i64 0, i32 1
  %84 = load %"class.ui::PaintContext"*, %"class.ui::PaintContext"** %6, align 8
  %85 = getelementptr inbounds %"class.ui::PaintRecorder", %"class.ui::PaintRecorder"* %0, i64 0, i32 5
  %86 = tail call { i64, i64 } @_ZNK2ui12PaintContext18ToLayerSpaceBoundsERKN3gfx4SizeE(%"class.ui::PaintContext"* %84, %"class.gfx::Size"* dereferenceable(8) %85) #9
  %87 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %4, i64 0, i32 0
  %88 = extractvalue { i64, i64 } %86, 0
  store i64 %88, i64* %87, align 8
  %89 = extractvalue { i64, i64 } %86, 1
  store i64 %89, i64* %83, align 8
  %90 = load %"class.ui::PaintContext"*, %"class.ui::PaintContext"** %6, align 8
  %91 = getelementptr inbounds %"class.ui::PaintContext", %"class.ui::PaintContext"* %90, i64 0, i32 0
  %92 = load %"class.cc::DisplayItemList"*, %"class.cc::DisplayItemList"** %91, align 8
  %93 = getelementptr inbounds %"class.cc::DisplayItemList", %"class.cc::DisplayItemList"* %92, i64 0, i32 8
  %94 = load i32, i32* %93, align 8
  %95 = icmp eq i32 %94, 1
  br i1 %95, label %127, label %96

96:                                               ; preds = %81
  %97 = getelementptr inbounds %"class.cc::DisplayItemList", %"class.cc::DisplayItemList"* %92, i64 0, i32 5
  %98 = getelementptr inbounds %"class.cc::DisplayItemList", %"class.cc::DisplayItemList"* %92, i64 0, i32 4, i32 5
  %99 = load i64, i64* %98, align 8
  %100 = getelementptr inbounds %"class.cc::DisplayItemList", %"class.cc::DisplayItemList"* %92, i64 0, i32 5, i32 0, i32 1
  %101 = bitcast %"class.gfx::Rect"** %100 to i64*
  %102 = load i64, i64* %101, align 8
  %103 = bitcast %"class.std::__1::vector.68"* %97 to i64*
  %104 = load i64, i64* %103, align 8
  %105 = sub i64 %102, %104
  %106 = ashr exact i64 %105, 4
  %107 = icmp ugt i64 %99, %106
  %108 = inttoptr i64 %104 to %"class.gfx::Rect"*
  br i1 %107, label %109, label %111

109:                                              ; preds = %96
  %110 = sub i64 %99, %106
  call void @_ZNSt3__16vectorIN3gfx4RectENS_9allocatorIS2_EEE8__appendEmRKS2_(%"class.std::__1::vector.68"* %97, i64 %110, %"class.gfx::Rect"* nonnull dereferenceable(16) %5) #9
  br label %115

111:                                              ; preds = %96
  %112 = icmp ult i64 %99, %106
  br i1 %112, label %113, label %115

113:                                              ; preds = %111
  %114 = getelementptr inbounds %"class.gfx::Rect", %"class.gfx::Rect"* %108, i64 %99
  store %"class.gfx::Rect"* %114, %"class.gfx::Rect"** %100, align 8
  br label %115

115:                                              ; preds = %113, %111, %109
  %116 = getelementptr inbounds %"class.cc::DisplayItemList", %"class.cc::DisplayItemList"* %92, i64 0, i32 7, i32 0, i32 0
  %117 = load %"struct.cc::DisplayItemList::PairedBeginInfo"*, %"struct.cc::DisplayItemList::PairedBeginInfo"** %116, align 8
  %118 = getelementptr inbounds %"class.cc::DisplayItemList", %"class.cc::DisplayItemList"* %92, i64 0, i32 7, i32 0, i32 1
  %119 = load %"struct.cc::DisplayItemList::PairedBeginInfo"*, %"struct.cc::DisplayItemList::PairedBeginInfo"** %118, align 8
  %120 = icmp eq %"struct.cc::DisplayItemList::PairedBeginInfo"* %117, %119
  br i1 %120, label %127, label %121

121:                                              ; preds = %115
  %122 = getelementptr inbounds %"struct.cc::DisplayItemList::PairedBeginInfo", %"struct.cc::DisplayItemList::PairedBeginInfo"* %119, i64 -1, i32 0
  %123 = load i64, i64* %122, align 8
  %124 = getelementptr inbounds %"class.cc::DisplayItemList", %"class.cc::DisplayItemList"* %92, i64 0, i32 5, i32 0, i32 0
  %125 = load %"class.gfx::Rect"*, %"class.gfx::Rect"** %124, align 8
  %126 = getelementptr inbounds %"class.gfx::Rect", %"class.gfx::Rect"* %125, i64 %123
  call void @_ZN3gfx4Rect5UnionERKS0_(%"class.gfx::Rect"* %126, %"class.gfx::Rect"* nonnull dereferenceable(16) %5) #9
  br label %127

127:                                              ; preds = %81, %115, %121
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %82) #9
  br label %128

128:                                              ; preds = %127, %76
  %129 = getelementptr inbounds %"class.ui::PaintRecorder", %"class.ui::PaintRecorder"* %0, i64 0, i32 3
  call void @_ZN3gfx6CanvasD1Ev(%"class.gfx::Canvas"* %129) #9
  %130 = getelementptr inbounds %"class.ui::PaintRecorder", %"class.ui::PaintRecorder"* %0, i64 0, i32 2
  call void @_ZN2cc17RecordPaintCanvasD1Ev(%"class.cc::RecordPaintCanvas"* %130) #9
  %131 = getelementptr inbounds %"class.ui::PaintRecorder", %"class.ui::PaintRecorder"* %0, i64 0, i32 1, i32 0
  %132 = load %"class.cc::DisplayItemList"*, %"class.cc::DisplayItemList"** %131, align 8
  %133 = icmp eq %"class.cc::DisplayItemList"* %132, null
  br i1 %133, label %140, label %134

134:                                              ; preds = %128
  %135 = getelementptr inbounds %"class.cc::DisplayItemList", %"class.cc::DisplayItemList"* %132, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %136 = atomicrmw sub i32* %135, i32 1 acq_rel
  %137 = icmp eq i32 %136, 1
  br i1 %137, label %138, label %140

138:                                              ; preds = %134
  call void @_ZN2cc15DisplayItemListD1Ev(%"class.cc::DisplayItemList"* nonnull %132) #9
  %139 = bitcast %"class.cc::DisplayItemList"* %132 to i8*
  call void @_ZdlPv(i8* %139) #8
  br label %140

140:                                              ; preds = %128, %134, %138
  ret void
}

declare void @_ZN3gfx6Canvas7RestoreEv(%"class.gfx::Canvas"*) local_unnamed_addr #2

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

declare void @_ZN2cc15DisplayItemList8FinalizeEv(%"class.cc::DisplayItemList"*) local_unnamed_addr #2

declare void @_ZN2ui10PaintCache16SetPaintOpBufferE5sk_spIN2cc13PaintOpBufferEEf(%"class.ui::PaintCache"*, %class.sk_sp.40*, float) local_unnamed_addr #2

declare void @_ZN2cc15DisplayItemList15ReleaseAsRecordEv(%class.sk_sp.40* sret, %"class.cc::DisplayItemList"*) local_unnamed_addr #2

declare zeroext i1 @_ZN2ui10PaintCache8UseCacheERKNS_12PaintContextERKN3gfx4SizeE(%"class.ui::PaintCache"*, %"class.ui::PaintContext"* dereferenceable(40), %"class.gfx::Size"* dereferenceable(8)) local_unnamed_addr #2

declare { i64, i64 } @_ZNK2ui12PaintContext18ToLayerSpaceBoundsERKN3gfx4SizeE(%"class.ui::PaintContext"*, %"class.gfx::Size"* dereferenceable(8)) local_unnamed_addr #2

; Function Attrs: nounwind
declare void @_ZN3gfx6CanvasD1Ev(%"class.gfx::Canvas"*) unnamed_addr #3

; Function Attrs: nounwind
declare void @_ZN2cc17RecordPaintCanvasD1Ev(%"class.cc::RecordPaintCanvas"*) unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__16vectorIN3gfx4RectENS_9allocatorIS2_EEE8__appendEmRKS2_(%"class.std::__1::vector.68"*, i64, %"class.gfx::Rect"* dereferenceable(16)) local_unnamed_addr #0 comdat align 2 {
  %4 = getelementptr inbounds %"class.std::__1::vector.68", %"class.std::__1::vector.68"* %0, i64 0, i32 0, i32 2, i32 0, i32 0
  %5 = bitcast %"class.gfx::Rect"** %4 to i64*
  %6 = load i64, i64* %5, align 8
  %7 = getelementptr inbounds %"class.std::__1::vector.68", %"class.std::__1::vector.68"* %0, i64 0, i32 0, i32 1
  %8 = bitcast %"class.gfx::Rect"** %7 to i64*
  %9 = load i64, i64* %8, align 8
  %10 = sub i64 %6, %9
  %11 = ashr exact i64 %10, 4
  %12 = icmp ult i64 %11, %1
  br i1 %12, label %50, label %13

13:                                               ; preds = %3
  %14 = inttoptr i64 %9 to %"class.gfx::Rect"*
  %15 = getelementptr inbounds %"class.gfx::Rect", %"class.gfx::Rect"* %14, i64 %1
  %16 = icmp eq i64 %1, 0
  br i1 %16, label %48, label %17

17:                                               ; preds = %13
  %18 = bitcast %"class.gfx::Rect"* %2 to i8*
  %19 = shl nsw i64 %1, 4
  %20 = add i64 %19, -16
  %21 = lshr exact i64 %20, 4
  %22 = add nuw nsw i64 %21, 1
  %23 = and i64 %22, 3
  %24 = icmp eq i64 %23, 0
  br i1 %24, label %32, label %25

25:                                               ; preds = %17, %25
  %26 = phi %"class.gfx::Rect"* [ %29, %25 ], [ %14, %17 ]
  %27 = phi i64 [ %30, %25 ], [ %23, %17 ]
  %28 = bitcast %"class.gfx::Rect"* %26 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %28, i8* align 4 %18, i64 16, i1 false) #9
  %29 = getelementptr inbounds %"class.gfx::Rect", %"class.gfx::Rect"* %26, i64 1
  %30 = add i64 %27, -1
  %31 = icmp eq i64 %30, 0
  br i1 %31, label %32, label %25, !llvm.loop !3

32:                                               ; preds = %25, %17
  %33 = phi %"class.gfx::Rect"* [ %14, %17 ], [ %29, %25 ]
  %34 = icmp ult i64 %20, 48
  br i1 %34, label %35, label %37

35:                                               ; preds = %37, %32
  %36 = ptrtoint %"class.gfx::Rect"* %15 to i64
  br label %48

37:                                               ; preds = %32, %37
  %38 = phi %"class.gfx::Rect"* [ %46, %37 ], [ %33, %32 ]
  %39 = bitcast %"class.gfx::Rect"* %38 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %39, i8* align 4 %18, i64 16, i1 false) #9
  %40 = getelementptr inbounds %"class.gfx::Rect", %"class.gfx::Rect"* %38, i64 1
  %41 = bitcast %"class.gfx::Rect"* %40 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %41, i8* align 4 %18, i64 16, i1 false) #9
  %42 = getelementptr inbounds %"class.gfx::Rect", %"class.gfx::Rect"* %38, i64 2
  %43 = bitcast %"class.gfx::Rect"* %42 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %43, i8* align 4 %18, i64 16, i1 false) #9
  %44 = getelementptr inbounds %"class.gfx::Rect", %"class.gfx::Rect"* %38, i64 3
  %45 = bitcast %"class.gfx::Rect"* %44 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %45, i8* align 4 %18, i64 16, i1 false) #9
  %46 = getelementptr inbounds %"class.gfx::Rect", %"class.gfx::Rect"* %38, i64 4
  %47 = icmp eq %"class.gfx::Rect"* %46, %15
  br i1 %47, label %35, label %37

48:                                               ; preds = %13, %35
  %49 = phi i64 [ %36, %35 ], [ %9, %13 ]
  store i64 %49, i64* %8, align 8
  br label %132

50:                                               ; preds = %3
  %51 = bitcast %"class.std::__1::vector.68"* %0 to i64*
  %52 = load i64, i64* %51, align 8
  %53 = sub i64 %9, %52
  %54 = ashr exact i64 %53, 4
  %55 = add i64 %54, %1
  %56 = icmp ugt i64 %55, 1152921504606846975
  br i1 %56, label %57, label %59

57:                                               ; preds = %50
  %58 = bitcast %"class.std::__1::vector.68"* %0 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %58) #10
  unreachable

59:                                               ; preds = %50
  %60 = sub i64 %6, %52
  %61 = ashr exact i64 %60, 4
  %62 = icmp ult i64 %61, 576460752303423487
  br i1 %62, label %63, label %71

63:                                               ; preds = %59
  %64 = ashr exact i64 %60, 3
  %65 = icmp ult i64 %64, %55
  %66 = select i1 %65, i64 %55, i64 %64
  %67 = icmp eq i64 %66, 0
  br i1 %67, label %76, label %68

68:                                               ; preds = %63
  %69 = icmp ugt i64 %66, 1152921504606846975
  br i1 %69, label %70, label %71

70:                                               ; preds = %68
  tail call void @abort() #10
  unreachable

71:                                               ; preds = %59, %68
  %72 = phi i64 [ %66, %68 ], [ 1152921504606846975, %59 ]
  %73 = shl i64 %72, 4
  %74 = tail call i8* @_Znwm(i64 %73) #8
  %75 = bitcast i8* %74 to %"class.gfx::Rect"*
  br label %76

76:                                               ; preds = %71, %63
  %77 = phi i64 [ %72, %71 ], [ 0, %63 ]
  %78 = phi %"class.gfx::Rect"* [ %75, %71 ], [ null, %63 ]
  %79 = getelementptr inbounds %"class.gfx::Rect", %"class.gfx::Rect"* %78, i64 %54
  %80 = getelementptr inbounds %"class.gfx::Rect", %"class.gfx::Rect"* %78, i64 %77
  %81 = getelementptr inbounds %"class.gfx::Rect", %"class.gfx::Rect"* %79, i64 %1
  %82 = bitcast %"class.gfx::Rect"* %2 to i8*
  %83 = shl nsw i64 %1, 4
  %84 = add i64 %83, -16
  %85 = lshr exact i64 %84, 4
  %86 = add nuw nsw i64 %85, 1
  %87 = and i64 %86, 3
  %88 = icmp eq i64 %87, 0
  br i1 %88, label %96, label %89

89:                                               ; preds = %76, %89
  %90 = phi %"class.gfx::Rect"* [ %93, %89 ], [ %79, %76 ]
  %91 = phi i64 [ %94, %89 ], [ %87, %76 ]
  %92 = bitcast %"class.gfx::Rect"* %90 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %92, i8* align 4 %82, i64 16, i1 false) #9
  %93 = getelementptr inbounds %"class.gfx::Rect", %"class.gfx::Rect"* %90, i64 1
  %94 = add i64 %91, -1
  %95 = icmp eq i64 %94, 0
  br i1 %95, label %96, label %89, !llvm.loop !5

96:                                               ; preds = %89, %76
  %97 = phi %"class.gfx::Rect"* [ %79, %76 ], [ %93, %89 ]
  %98 = icmp ult i64 %84, 48
  br i1 %98, label %110, label %99

99:                                               ; preds = %96, %99
  %100 = phi %"class.gfx::Rect"* [ %108, %99 ], [ %97, %96 ]
  %101 = bitcast %"class.gfx::Rect"* %100 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %101, i8* align 4 %82, i64 16, i1 false) #9
  %102 = getelementptr inbounds %"class.gfx::Rect", %"class.gfx::Rect"* %100, i64 1
  %103 = bitcast %"class.gfx::Rect"* %102 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %103, i8* align 4 %82, i64 16, i1 false) #9
  %104 = getelementptr inbounds %"class.gfx::Rect", %"class.gfx::Rect"* %100, i64 2
  %105 = bitcast %"class.gfx::Rect"* %104 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %105, i8* align 4 %82, i64 16, i1 false) #9
  %106 = getelementptr inbounds %"class.gfx::Rect", %"class.gfx::Rect"* %100, i64 3
  %107 = bitcast %"class.gfx::Rect"* %106 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %107, i8* align 4 %82, i64 16, i1 false) #9
  %108 = getelementptr inbounds %"class.gfx::Rect", %"class.gfx::Rect"* %100, i64 4
  %109 = icmp eq %"class.gfx::Rect"* %81, %108
  br i1 %109, label %110, label %99

110:                                              ; preds = %99, %96
  %111 = ptrtoint %"class.gfx::Rect"* %80 to i64
  %112 = ptrtoint %"class.gfx::Rect"* %81 to i64
  %113 = getelementptr inbounds %"class.std::__1::vector.68", %"class.std::__1::vector.68"* %0, i64 0, i32 0, i32 0
  %114 = load %"class.gfx::Rect"*, %"class.gfx::Rect"** %113, align 8
  %115 = load i64, i64* %8, align 8
  %116 = ptrtoint %"class.gfx::Rect"* %114 to i64
  %117 = sub i64 %115, %116
  %118 = ashr exact i64 %117, 4
  %119 = sub nsw i64 0, %118
  %120 = getelementptr inbounds %"class.gfx::Rect", %"class.gfx::Rect"* %79, i64 %119
  %121 = ptrtoint %"class.gfx::Rect"* %120 to i64
  %122 = icmp sgt i64 %117, 0
  br i1 %122, label %123, label %127

123:                                              ; preds = %110
  %124 = bitcast %"class.gfx::Rect"* %120 to i8*
  %125 = bitcast %"class.gfx::Rect"* %114 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %124, i8* align 4 %125, i64 %117, i1 false) #9
  %126 = load %"class.gfx::Rect"*, %"class.gfx::Rect"** %113, align 8
  br label %127

127:                                              ; preds = %110, %123
  %128 = phi %"class.gfx::Rect"* [ %114, %110 ], [ %126, %123 ]
  store i64 %121, i64* %51, align 8
  store i64 %112, i64* %8, align 8
  store i64 %111, i64* %5, align 8
  %129 = icmp eq %"class.gfx::Rect"* %128, null
  br i1 %129, label %132, label %130

130:                                              ; preds = %127
  %131 = bitcast %"class.gfx::Rect"* %128 to i8*
  tail call void @_ZdlPv(i8* %131) #8
  br label %132

132:                                              ; preds = %130, %127, %48
  ret void
}

; Function Attrs: noreturn
declare void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"*) local_unnamed_addr #4

; Function Attrs: noreturn nounwind
declare void @abort() local_unnamed_addr #5

; Function Attrs: nobuiltin nofree
declare noalias nonnull i8* @_Znwm(i64) local_unnamed_addr #6

; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(i8*) local_unnamed_addr #7

declare void @_ZN3gfx4Rect5UnionERKS0_(%"class.gfx::Rect"*, %"class.gfx::Rect"* dereferenceable(16)) local_unnamed_addr #2

declare void @_ZN2cc15DisplayItemListC1ENS0_9UsageHintE(%"class.cc::DisplayItemList"*, i32) unnamed_addr #2

; Function Attrs: nounwind
declare void @_ZN2cc15DisplayItemListD1Ev(%"class.cc::DisplayItemList"*) unnamed_addr #3

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { noreturn nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nobuiltin nofree "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #8 = { builtin nounwind }
attributes #9 = { nounwind }
attributes #10 = { noreturn nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{i8 0, i8 2}
!3 = distinct !{!3, !4}
!4 = !{!"llvm.loop.unroll.disable"}
!5 = distinct !{!5, !4}
