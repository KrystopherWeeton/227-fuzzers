; ModuleID = '../../third_party/blink/renderer/platform/fonts/shaping/harfbuzz_font_cache.cc'
source_filename = "../../third_party/blink/renderer/platform/fonts/shaping/harfbuzz_font_cache.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"class.blink::HbFontCacheEntry" = type { %"class.WTF::RefCounted", %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr.1" }
%"class.WTF::RefCounted" = type { %"class.base::RefCounted" }
%"class.base::RefCounted" = type { %"class.base::subtle::RefCountedBase" }
%"class.base::subtle::RefCountedBase" = type { i32 }
%"class.std::__1::unique_ptr" = type { %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %struct.hb_font_t* }
%"class.std::__1::unique_ptr.1" = type { %"class.std::__1::__compressed_pair.2" }
%"class.std::__1::__compressed_pair.2" = type { %"struct.std::__1::__compressed_pair_elem.3" }
%"struct.std::__1::__compressed_pair_elem.3" = type { %"struct.blink::HarfBuzzFontData"* }
%"struct.blink::HarfBuzzFontData" = type { %class.SkFont, float, float, float, i32, i32, %class.scoped_refptr, %class.scoped_refptr.24 }
%class.SkFont = type <{ %class.sk_sp, float, float, float, i8, i8, i8, i8 }>
%class.sk_sp = type { %class.SkTypeface* }
%class.SkTypeface = type <{ %class.SkWeakRefCnt, i32, %class.SkFontStyle, %struct.SkRect, %class.SkOnce, i8, [6 x i8] }>
%class.SkWeakRefCnt = type { %class.SkRefCnt.base, %"struct.std::__1::atomic" }
%class.SkRefCnt.base = type { %class.SkRefCntBase.base }
%class.SkRefCntBase.base = type <{ i32 (...)**, %"struct.std::__1::atomic" }>
%"struct.std::__1::atomic" = type { %"struct.std::__1::__atomic_base" }
%"struct.std::__1::__atomic_base" = type { %"struct.std::__1::__atomic_base.4" }
%"struct.std::__1::__atomic_base.4" = type { %"struct.std::__1::__cxx_atomic_impl" }
%"struct.std::__1::__cxx_atomic_impl" = type { %"struct.std::__1::__cxx_atomic_base_impl" }
%"struct.std::__1::__cxx_atomic_base_impl" = type { i32 }
%class.SkFontStyle = type { i32 }
%struct.SkRect = type { float, float, float, float }
%class.SkOnce = type { %"struct.std::__1::atomic.5" }
%"struct.std::__1::atomic.5" = type { %"struct.std::__1::__atomic_base.6" }
%"struct.std::__1::__atomic_base.6" = type { %"struct.std::__1::__atomic_base.7" }
%"struct.std::__1::__atomic_base.7" = type { %"struct.std::__1::__cxx_atomic_impl.8" }
%"struct.std::__1::__cxx_atomic_impl.8" = type { %"struct.std::__1::__cxx_atomic_base_impl.9" }
%"struct.std::__1::__cxx_atomic_base_impl.9" = type { i8 }
%class.scoped_refptr = type { %"class.blink::OpenTypeVerticalData"* }
%"class.blink::OpenTypeVerticalData" = type <{ %"class.WTF::RefCounted.10", [4 x i8], %"class.WTF::HashMap", %"class.WTF::Vector", %"class.WTF::Vector", %"class.WTF::Vector.14", i16, [6 x i8], %"class.WTF::HashMap.19", float, float, i32, [4 x i8] }>
%"class.WTF::RefCounted.10" = type { %"class.base::RefCounted.11" }
%"class.base::RefCounted.11" = type { %"class.base::subtle::RefCountedBase" }
%"class.WTF::HashMap" = type { %"class.WTF::HashTable" }
%"class.WTF::HashTable" = type <{ %"struct.WTF::KeyValuePair"*, i32, i32, i32, [4 x i8] }>
%"struct.WTF::KeyValuePair" = type { i16, i16 }
%"class.WTF::Vector" = type { %"class.WTF::VectorBuffer" }
%"class.WTF::VectorBuffer" = type { %"class.WTF::VectorBufferBase" }
%"class.WTF::VectorBufferBase" = type { i16*, i32, i32 }
%"class.WTF::Vector.14" = type { %"class.WTF::VectorBuffer.15" }
%"class.WTF::VectorBuffer.15" = type { %"class.WTF::VectorBufferBase.16" }
%"class.WTF::VectorBufferBase.16" = type { i16*, i32, i32 }
%"class.WTF::HashMap.19" = type { %"class.WTF::HashTable.20" }
%"class.WTF::HashTable.20" = type <{ %"struct.WTF::KeyValuePair.23"*, i32, i32, i32, [4 x i8] }>
%"struct.WTF::KeyValuePair.23" = type { i16, i16 }
%class.scoped_refptr.24 = type { %"class.blink::UnicodeRangeSet"* }
%"class.blink::UnicodeRangeSet" = type { %"class.WTF::RefCounted.25", %"class.WTF::Vector.27" }
%"class.WTF::RefCounted.25" = type { %"class.base::RefCounted.26" }
%"class.base::RefCounted.26" = type { %"class.base::subtle::RefCountedBase" }
%"class.WTF::Vector.27" = type { %"class.WTF::VectorBuffer.28" }
%"class.WTF::VectorBuffer.28" = type { %"class.WTF::VectorBufferBase.29" }
%"class.WTF::VectorBufferBase.29" = type { %"struct.blink::UnicodeRange"*, i32, i32 }
%"struct.blink::UnicodeRange" = type { i32, i32 }
%struct.hb_font_t = type opaque
%class.SkRefCntBase = type <{ i32 (...)**, %"struct.std::__1::atomic", [4 x i8] }>

$_ZN5blink16HarfBuzzFontDataD2Ev = comdat any

@_ZN5blink16HbFontCacheEntryC1EP9hb_font_t = hidden unnamed_addr alias void (%"class.blink::HbFontCacheEntry"*, %struct.hb_font_t*), void (%"class.blink::HbFontCacheEntry"*, %struct.hb_font_t*)* @_ZN5blink16HbFontCacheEntryC2EP9hb_font_t
@_ZN5blink16HbFontCacheEntryD1Ev = hidden unnamed_addr alias void (%"class.blink::HbFontCacheEntry"*), void (%"class.blink::HbFontCacheEntry"*)* @_ZN5blink16HbFontCacheEntryD2Ev

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5blink16HbFontCacheEntryC2EP9hb_font_t(%"class.blink::HbFontCacheEntry"* nocapture, %struct.hb_font_t*) unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"class.blink::HbFontCacheEntry", %"class.blink::HbFontCacheEntry"* %0, i64 0, i32 0, i32 0, i32 0, i32 0
  store i32 1, i32* %3, align 4
  %4 = getelementptr inbounds %"class.blink::HbFontCacheEntry", %"class.blink::HbFontCacheEntry"* %0, i64 0, i32 1
  %5 = ptrtoint %struct.hb_font_t* %1 to i64
  %6 = bitcast %"class.std::__1::unique_ptr"* %4 to i64*
  store i64 %5, i64* %6, align 8
  %7 = tail call noalias i8* @malloc(i64 64) #6
  %8 = bitcast i8* %7 to %class.SkFont*
  tail call void @_ZN6SkFontC1Ev(%class.SkFont* %8) #6
  %9 = getelementptr inbounds i8, i8* %7, i64 36
  %10 = bitcast i8* %9 to i32*
  store i32 0, i32* %10, align 4
  %11 = getelementptr inbounds i8, i8* %7, i64 40
  %12 = bitcast i8* %11 to i32*
  store i32 0, i32* %12, align 8
  %13 = getelementptr inbounds i8, i8* %7, i64 48
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %13, i8 0, i64 16, i1 false) #6
  %14 = getelementptr inbounds %"class.blink::HbFontCacheEntry", %"class.blink::HbFontCacheEntry"* %0, i64 0, i32 2, i32 0, i32 0, i32 0
  %15 = bitcast %"struct.blink::HarfBuzzFontData"** %14 to i8**
  store i8* %7, i8** %15, align 8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5blink16HbFontCacheEntryD2Ev(%"class.blink::HbFontCacheEntry"* nocapture) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.blink::HbFontCacheEntry", %"class.blink::HbFontCacheEntry"* %0, i64 0, i32 2, i32 0, i32 0, i32 0
  %3 = load %"struct.blink::HarfBuzzFontData"*, %"struct.blink::HarfBuzzFontData"** %2, align 8
  store %"struct.blink::HarfBuzzFontData"* null, %"struct.blink::HarfBuzzFontData"** %2, align 8
  %4 = icmp eq %"struct.blink::HarfBuzzFontData"* %3, null
  br i1 %4, label %7, label %5

5:                                                ; preds = %1
  tail call void @_ZN5blink16HarfBuzzFontDataD2Ev(%"struct.blink::HarfBuzzFontData"* nonnull %3) #6
  %6 = bitcast %"struct.blink::HarfBuzzFontData"* %3 to i8*
  tail call void @free(i8* %6) #6
  br label %7

7:                                                ; preds = %1, %5
  %8 = getelementptr inbounds %"class.blink::HbFontCacheEntry", %"class.blink::HbFontCacheEntry"* %0, i64 0, i32 1, i32 0, i32 0, i32 0
  %9 = load %struct.hb_font_t*, %struct.hb_font_t** %8, align 8
  store %struct.hb_font_t* null, %struct.hb_font_t** %8, align 8
  %10 = icmp eq %struct.hb_font_t* %9, null
  br i1 %10, label %12, label %11

11:                                               ; preds = %7
  tail call void @hb_font_destroy(%struct.hb_font_t* nonnull %9) #6
  br label %12

12:                                               ; preds = %7, %11
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden noalias %"class.blink::HbFontCacheEntry"* @_ZN5blink16HbFontCacheEntry6CreateEP9hb_font_t(%struct.hb_font_t*) local_unnamed_addr #0 align 2 {
  %2 = tail call noalias i8* @malloc(i64 24) #6
  %3 = bitcast i8* %2 to %"class.blink::HbFontCacheEntry"*
  %4 = bitcast i8* %2 to i32*
  store i32 1, i32* %4, align 4
  %5 = getelementptr inbounds i8, i8* %2, i64 8
  %6 = ptrtoint %struct.hb_font_t* %0 to i64
  %7 = bitcast i8* %5 to i64*
  store i64 %6, i64* %7, align 8
  %8 = tail call noalias i8* @malloc(i64 64) #6
  %9 = bitcast i8* %8 to %class.SkFont*
  tail call void @_ZN6SkFontC1Ev(%class.SkFont* %9) #6
  %10 = getelementptr inbounds i8, i8* %8, i64 36
  %11 = bitcast i8* %10 to i32*
  store i32 0, i32* %11, align 4
  %12 = getelementptr inbounds i8, i8* %8, i64 40
  %13 = bitcast i8* %12 to i32*
  store i32 0, i32* %13, align 8
  %14 = getelementptr inbounds i8, i8* %8, i64 48
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %14, i8 0, i64 16, i1 false) #6
  %15 = getelementptr inbounds i8, i8* %2, i64 16
  %16 = bitcast i8* %15 to i8**
  store i8* %8, i8** %16, align 8
  ret %"class.blink::HbFontCacheEntry"* %3
}

; Function Attrs: nofree nounwind
declare noalias i8* @malloc(i64) local_unnamed_addr #1

declare void @hb_font_destroy(%struct.hb_font_t*) local_unnamed_addr #2

declare void @_ZN6SkFontC1Ev(%class.SkFont*) unnamed_addr #2

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZN5blink16HarfBuzzFontDataD2Ev(%"struct.blink::HarfBuzzFontData"*) unnamed_addr #3 comdat align 2 {
  %2 = getelementptr inbounds %"struct.blink::HarfBuzzFontData", %"struct.blink::HarfBuzzFontData"* %0, i64 0, i32 7, i32 0
  %3 = load %"class.blink::UnicodeRangeSet"*, %"class.blink::UnicodeRangeSet"** %2, align 8
  %4 = icmp eq %"class.blink::UnicodeRangeSet"* %3, null
  br i1 %4, label %25, label %5

5:                                                ; preds = %1
  %6 = getelementptr inbounds %"class.blink::UnicodeRangeSet", %"class.blink::UnicodeRangeSet"* %3, i64 0, i32 0, i32 0
  %7 = getelementptr inbounds %"class.blink::UnicodeRangeSet", %"class.blink::UnicodeRangeSet"* %3, i64 0, i32 0, i32 0, i32 0
  tail call void @_ZNK4base6subtle14RefCountedBase11ReleaseImplEv(%"class.base::subtle::RefCountedBase"* %7) #6
  %8 = getelementptr inbounds %"class.blink::UnicodeRangeSet", %"class.blink::UnicodeRangeSet"* %3, i64 0, i32 0, i32 0, i32 0, i32 0
  %9 = load i32, i32* %8, align 4
  %10 = icmp eq i32 %9, 0
  br i1 %10, label %11, label %25

11:                                               ; preds = %5
  %12 = getelementptr inbounds %"class.base::RefCounted.26", %"class.base::RefCounted.26"* %6, i64 2
  %13 = bitcast %"class.base::RefCounted.26"* %12 to %"struct.blink::UnicodeRange"**
  %14 = load %"struct.blink::UnicodeRange"*, %"struct.blink::UnicodeRange"** %13, align 8
  %15 = icmp eq %"struct.blink::UnicodeRange"* %14, null
  %16 = bitcast %"struct.blink::UnicodeRange"* %14 to i8*
  br i1 %15, label %23, label %17, !prof !2

17:                                               ; preds = %11
  %18 = getelementptr inbounds %"class.base::RefCounted.26", %"class.base::RefCounted.26"* %6, i64 5, i32 0, i32 0
  %19 = load i32, i32* %18, align 4
  %20 = icmp eq i32 %19, 0
  br i1 %20, label %22, label %21, !prof !3

21:                                               ; preds = %17
  store i32 0, i32* %18, align 4
  br label %22

22:                                               ; preds = %21, %17
  tail call void @_ZN3WTF18PartitionAllocator11FreeBackingEPv(i8* nonnull %16) #6
  br label %23

23:                                               ; preds = %22, %11
  %24 = bitcast %"class.blink::UnicodeRangeSet"* %3 to i8*
  tail call void @free(i8* %24) #6
  br label %25

25:                                               ; preds = %1, %5, %23
  %26 = getelementptr inbounds %"struct.blink::HarfBuzzFontData", %"struct.blink::HarfBuzzFontData"* %0, i64 0, i32 6, i32 0
  %27 = load %"class.blink::OpenTypeVerticalData"*, %"class.blink::OpenTypeVerticalData"** %26, align 8
  %28 = icmp eq %"class.blink::OpenTypeVerticalData"* %27, null
  br i1 %28, label %81, label %29

29:                                               ; preds = %25
  %30 = getelementptr inbounds %"class.blink::OpenTypeVerticalData", %"class.blink::OpenTypeVerticalData"* %27, i64 0, i32 0, i32 0, i32 0
  tail call void @_ZNK4base6subtle14RefCountedBase11ReleaseImplEv(%"class.base::subtle::RefCountedBase"* %30) #6
  %31 = getelementptr inbounds %"class.blink::OpenTypeVerticalData", %"class.blink::OpenTypeVerticalData"* %27, i64 0, i32 0, i32 0, i32 0, i32 0
  %32 = load i32, i32* %31, align 4
  %33 = icmp eq i32 %32, 0
  br i1 %33, label %34, label %81

34:                                               ; preds = %29
  %35 = getelementptr inbounds %"class.blink::OpenTypeVerticalData", %"class.blink::OpenTypeVerticalData"* %27, i64 0, i32 8, i32 0, i32 0
  %36 = load %"struct.WTF::KeyValuePair.23"*, %"struct.WTF::KeyValuePair.23"** %35, align 8
  %37 = icmp eq %"struct.WTF::KeyValuePair.23"* %36, null
  br i1 %37, label %40, label %38, !prof !2

38:                                               ; preds = %34
  %39 = bitcast %"struct.WTF::KeyValuePair.23"* %36 to i8*
  tail call void @_ZN3WTF18PartitionAllocator11FreeBackingEPv(i8* nonnull %39) #6
  store %"struct.WTF::KeyValuePair.23"* null, %"struct.WTF::KeyValuePair.23"** %35, align 8
  br label %40

40:                                               ; preds = %38, %34
  %41 = getelementptr inbounds %"class.blink::OpenTypeVerticalData", %"class.blink::OpenTypeVerticalData"* %27, i64 0, i32 5, i32 0, i32 0, i32 0
  %42 = load i16*, i16** %41, align 8
  %43 = icmp eq i16* %42, null
  %44 = bitcast i16* %42 to i8*
  br i1 %43, label %51, label %45, !prof !2

45:                                               ; preds = %40
  %46 = getelementptr inbounds %"class.blink::OpenTypeVerticalData", %"class.blink::OpenTypeVerticalData"* %27, i64 0, i32 5, i32 0, i32 0, i32 2
  %47 = load i32, i32* %46, align 4
  %48 = icmp eq i32 %47, 0
  br i1 %48, label %50, label %49, !prof !3

49:                                               ; preds = %45
  store i32 0, i32* %46, align 4
  br label %50

50:                                               ; preds = %49, %45
  tail call void @_ZN3WTF18PartitionAllocator11FreeBackingEPv(i8* nonnull %44) #6
  store i16* null, i16** %41, align 8
  br label %51

51:                                               ; preds = %50, %40
  %52 = getelementptr inbounds %"class.blink::OpenTypeVerticalData", %"class.blink::OpenTypeVerticalData"* %27, i64 0, i32 4, i32 0, i32 0, i32 0
  %53 = load i16*, i16** %52, align 8
  %54 = icmp eq i16* %53, null
  %55 = bitcast i16* %53 to i8*
  br i1 %54, label %62, label %56, !prof !2

56:                                               ; preds = %51
  %57 = getelementptr inbounds %"class.blink::OpenTypeVerticalData", %"class.blink::OpenTypeVerticalData"* %27, i64 0, i32 4, i32 0, i32 0, i32 2
  %58 = load i32, i32* %57, align 4
  %59 = icmp eq i32 %58, 0
  br i1 %59, label %61, label %60, !prof !3

60:                                               ; preds = %56
  store i32 0, i32* %57, align 4
  br label %61

61:                                               ; preds = %60, %56
  tail call void @_ZN3WTF18PartitionAllocator11FreeBackingEPv(i8* nonnull %55) #6
  store i16* null, i16** %52, align 8
  br label %62

62:                                               ; preds = %61, %51
  %63 = getelementptr inbounds %"class.blink::OpenTypeVerticalData", %"class.blink::OpenTypeVerticalData"* %27, i64 0, i32 3, i32 0, i32 0, i32 0
  %64 = load i16*, i16** %63, align 8
  %65 = icmp eq i16* %64, null
  %66 = bitcast i16* %64 to i8*
  br i1 %65, label %73, label %67, !prof !2

67:                                               ; preds = %62
  %68 = getelementptr inbounds %"class.blink::OpenTypeVerticalData", %"class.blink::OpenTypeVerticalData"* %27, i64 0, i32 3, i32 0, i32 0, i32 2
  %69 = load i32, i32* %68, align 4
  %70 = icmp eq i32 %69, 0
  br i1 %70, label %72, label %71, !prof !3

71:                                               ; preds = %67
  store i32 0, i32* %68, align 4
  br label %72

72:                                               ; preds = %71, %67
  tail call void @_ZN3WTF18PartitionAllocator11FreeBackingEPv(i8* nonnull %66) #6
  store i16* null, i16** %63, align 8
  br label %73

73:                                               ; preds = %72, %62
  %74 = getelementptr inbounds %"class.blink::OpenTypeVerticalData", %"class.blink::OpenTypeVerticalData"* %27, i64 0, i32 2, i32 0, i32 0
  %75 = load %"struct.WTF::KeyValuePair"*, %"struct.WTF::KeyValuePair"** %74, align 8
  %76 = icmp eq %"struct.WTF::KeyValuePair"* %75, null
  br i1 %76, label %79, label %77, !prof !2

77:                                               ; preds = %73
  %78 = bitcast %"struct.WTF::KeyValuePair"* %75 to i8*
  tail call void @_ZN3WTF18PartitionAllocator11FreeBackingEPv(i8* nonnull %78) #6
  br label %79

79:                                               ; preds = %73, %77
  %80 = bitcast %"class.blink::OpenTypeVerticalData"* %27 to i8*
  tail call void @free(i8* %80) #6
  br label %81

81:                                               ; preds = %25, %29, %79
  %82 = getelementptr inbounds %"struct.blink::HarfBuzzFontData", %"struct.blink::HarfBuzzFontData"* %0, i64 0, i32 0, i32 0, i32 0
  %83 = load %class.SkTypeface*, %class.SkTypeface** %82, align 8
  %84 = icmp eq %class.SkTypeface* %83, null
  br i1 %84, label %95, label %85

85:                                               ; preds = %81
  %86 = getelementptr inbounds %class.SkTypeface, %class.SkTypeface* %83, i64 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0
  %87 = atomicrmw add i32* %86, i32 -1 acq_rel
  %88 = icmp eq i32 %87, 1
  br i1 %88, label %89, label %95

89:                                               ; preds = %85
  %90 = bitcast %class.SkTypeface* %83 to %class.SkRefCntBase*
  %91 = bitcast %class.SkTypeface* %83 to void (%class.SkRefCntBase*)***
  %92 = load void (%class.SkRefCntBase*)**, void (%class.SkRefCntBase*)*** %91, align 8
  %93 = getelementptr inbounds void (%class.SkRefCntBase*)*, void (%class.SkRefCntBase*)** %92, i64 2
  %94 = load void (%class.SkRefCntBase*)*, void (%class.SkRefCntBase*)** %93, align 8
  tail call void %94(%class.SkRefCntBase* nonnull %90) #6
  br label %95

95:                                               ; preds = %81, %85, %89
  ret void
}

declare void @_ZNK4base6subtle14RefCountedBase11ReleaseImplEv(%"class.base::subtle::RefCountedBase"*) local_unnamed_addr #2

declare void @_ZN3WTF18PartitionAllocator11FreeBackingEPv(i8*) local_unnamed_addr #2

; Function Attrs: nounwind
declare void @free(i8* nocapture) local_unnamed_addr #4

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #5

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { inlinehint nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { argmemonly nounwind }
attributes #6 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{!"branch_weights", i32 2000, i32 1}
!3 = !{!"branch_weights", i32 1, i32 2000}
