; ModuleID = '../../device/vr/util/fps_meter.cc'
source_filename = "../../device/vr/util/fps_meter.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"class.device::FPSMeter" = type { %"class.device::SampleQueue", %"class.base::TimeTicks" }
%"class.device::SampleQueue" = type { i64, i64, i64, %"class.std::__1::vector" }
%"class.std::__1::vector" = type { %"class.std::__1::__vector_base" }
%"class.std::__1::__vector_base" = type { i64*, i64*, %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { i64* }
%"class.base::TimeTicks" = type { %"class.base::time_internal::TimeBase" }
%"class.base::time_internal::TimeBase" = type { i64 }

@_ZN6device8FPSMeterC1Ev = hidden unnamed_addr alias void (%"class.device::FPSMeter"*), void (%"class.device::FPSMeter"*)* @_ZN6device8FPSMeterC2Ev
@_ZN6device8FPSMeterC1Em = hidden unnamed_addr alias void (%"class.device::FPSMeter"*, i64), void (%"class.device::FPSMeter"*, i64)* @_ZN6device8FPSMeterC2Em
@_ZN6device8FPSMeterD1Ev = hidden unnamed_addr alias void (%"class.device::FPSMeter"*), void (%"class.device::FPSMeter"*)* @_ZN6device8FPSMeterD2Ev

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN6device8FPSMeterC2Ev(%"class.device::FPSMeter"*) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.device::FPSMeter", %"class.device::FPSMeter"* %0, i64 0, i32 0
  tail call void @_ZN6device11SampleQueueC1Em(%"class.device::SampleQueue"* %2, i64 10) #4
  %3 = getelementptr inbounds %"class.device::FPSMeter", %"class.device::FPSMeter"* %0, i64 0, i32 1, i32 0, i32 0
  store i64 0, i64* %3, align 8
  ret void
}

declare void @_ZN6device11SampleQueueC1Em(%"class.device::SampleQueue"*, i64) unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN6device8FPSMeterC2Em(%"class.device::FPSMeter"*, i64) unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"class.device::FPSMeter", %"class.device::FPSMeter"* %0, i64 0, i32 0
  tail call void @_ZN6device11SampleQueueC1Em(%"class.device::SampleQueue"* %3, i64 %1) #4
  %4 = getelementptr inbounds %"class.device::FPSMeter", %"class.device::FPSMeter"* %0, i64 0, i32 1, i32 0, i32 0
  store i64 0, i64* %4, align 8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN6device8FPSMeterD2Ev(%"class.device::FPSMeter"*) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.device::FPSMeter", %"class.device::FPSMeter"* %0, i64 0, i32 0
  tail call void @_ZN6device11SampleQueueD1Ev(%"class.device::SampleQueue"* %2) #4
  ret void
}

; Function Attrs: nounwind
declare void @_ZN6device11SampleQueueD1Ev(%"class.device::SampleQueue"*) unnamed_addr #2

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden i64 @_ZN6device8FPSMeter16GetNumFrameTimesEv(%"class.device::FPSMeter"* nocapture readonly) local_unnamed_addr #3 align 2 {
  %2 = getelementptr inbounds %"class.device::FPSMeter", %"class.device::FPSMeter"* %0, i64 0, i32 0, i32 2
  %3 = load i64, i64* %2, align 8
  ret i64 %3
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN6device8FPSMeter8AddFrameERKN4base9TimeTicksE(%"class.device::FPSMeter"*, %"class.base::TimeTicks"* nocapture readonly dereferenceable(8)) local_unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"class.device::FPSMeter", %"class.device::FPSMeter"* %0, i64 0, i32 1, i32 0, i32 0
  %4 = load i64, i64* %3, align 8
  %5 = icmp eq i64 %4, 0
  %6 = getelementptr inbounds %"class.base::TimeTicks", %"class.base::TimeTicks"* %1, i64 0, i32 0, i32 0
  %7 = load i64, i64* %6, align 8
  br i1 %5, label %8, label %9

8:                                                ; preds = %2
  store i64 %7, i64* %3, align 8
  br label %12

9:                                                ; preds = %2
  %10 = sub nsw i64 %7, %4
  store i64 %7, i64* %3, align 8
  %11 = getelementptr inbounds %"class.device::FPSMeter", %"class.device::FPSMeter"* %0, i64 0, i32 0
  tail call void @_ZN6device11SampleQueue9AddSampleEl(%"class.device::SampleQueue"* %11, i64 %10) #4
  br label %12

12:                                               ; preds = %9, %8
  ret void
}

declare void @_ZN6device11SampleQueue9AddSampleEl(%"class.device::SampleQueue"*, i64) local_unnamed_addr #1

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden zeroext i1 @_ZNK6device8FPSMeter13CanComputeFPSEv(%"class.device::FPSMeter"* nocapture readonly) local_unnamed_addr #3 align 2 {
  %2 = getelementptr inbounds %"class.device::FPSMeter", %"class.device::FPSMeter"* %0, i64 0, i32 0, i32 3
  %3 = getelementptr inbounds %"class.device::FPSMeter", %"class.device::FPSMeter"* %0, i64 0, i32 0, i32 3, i32 0, i32 1
  %4 = bitcast i64** %3 to i64*
  %5 = load i64, i64* %4, align 8
  %6 = bitcast %"class.std::__1::vector"* %2 to i64*
  %7 = load i64, i64* %6, align 8
  %8 = icmp ne i64 %5, %7
  ret i1 %8
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden double @_ZNK6device8FPSMeter6GetFPSEv(%"class.device::FPSMeter"* nocapture readonly) local_unnamed_addr #3 align 2 {
  %2 = getelementptr inbounds %"class.device::FPSMeter", %"class.device::FPSMeter"* %0, i64 0, i32 0, i32 3
  %3 = getelementptr inbounds %"class.device::FPSMeter", %"class.device::FPSMeter"* %0, i64 0, i32 0, i32 3, i32 0, i32 1
  %4 = bitcast i64** %3 to i64*
  %5 = load i64, i64* %4, align 8
  %6 = bitcast %"class.std::__1::vector"* %2 to i64*
  %7 = load i64, i64* %6, align 8
  %8 = icmp eq i64 %5, %7
  br i1 %8, label %18, label %9

9:                                                ; preds = %1
  %10 = sub i64 %5, %7
  %11 = ashr exact i64 %10, 3
  %12 = uitofp i64 %11 to double
  %13 = fmul double %12, 1.000000e+06
  %14 = getelementptr inbounds %"class.device::FPSMeter", %"class.device::FPSMeter"* %0, i64 0, i32 0, i32 0
  %15 = load i64, i64* %14, align 8
  %16 = sitofp i64 %15 to double
  %17 = fdiv double %13, %16
  br label %18

18:                                               ; preds = %1, %9
  %19 = phi double [ %17, %9 ], [ 0.000000e+00, %1 ]
  ret double %19
}

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { norecurse nounwind readonly ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
