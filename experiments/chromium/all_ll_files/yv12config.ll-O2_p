; ModuleID = '../../third_party/libvpx/source/libvpx/vpx_scale/generic/yv12config.c'
source_filename = "../../third_party/libvpx/source/libvpx/vpx_scale/generic/yv12config.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.yv12_buffer_config = type { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i8*, i8*, i8*, i8*, i8*, i64, i32, i64, i32, i32, i32, i32, i32, i32, i32, i32, i32 }
%struct.vpx_codec_frame_buffer = type { i8*, i64, i8* }

; Function Attrs: nounwind ssp uwtable
define hidden i32 @vp8_yv12_de_alloc_frame_buffer(%struct.yv12_buffer_config*) local_unnamed_addr #0 {
  %2 = icmp eq %struct.yv12_buffer_config* %0, null
  br i1 %2, label %12, label %3

3:                                                ; preds = %1
  %4 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %0, i64 0, i32 18
  %5 = load i64, i64* %4, align 8
  %6 = icmp eq i64 %5, 0
  br i1 %6, label %10, label %7

7:                                                ; preds = %3
  %8 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %0, i64 0, i32 17
  %9 = load i8*, i8** %8, align 8
  tail call void @vpx_free(i8* %9) #3
  br label %10

10:                                               ; preds = %3, %7
  %11 = bitcast %struct.yv12_buffer_config* %0 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %11, i8 0, i64 160, i1 false)
  br label %12

12:                                               ; preds = %1, %10
  %13 = phi i32 [ 0, %10 ], [ -1, %1 ]
  ret i32 %13
}

declare void @vpx_free(i8*) local_unnamed_addr #1

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #2

; Function Attrs: nounwind ssp uwtable
define hidden i32 @vp8_yv12_realloc_frame_buffer(%struct.yv12_buffer_config*, i32, i32, i32) local_unnamed_addr #0 {
  %5 = icmp eq %struct.yv12_buffer_config* %0, null
  br i1 %5, label %82, label %6

6:                                                ; preds = %4
  %7 = add nsw i32 %1, 15
  %8 = and i32 %7, -16
  %9 = add nsw i32 %2, 15
  %10 = and i32 %9, -16
  %11 = shl nsw i32 %3, 1
  %12 = add i32 %8, 31
  %13 = add i32 %12, %11
  %14 = and i32 %13, -32
  %15 = add nsw i32 %10, %11
  %16 = mul nsw i32 %14, %15
  %17 = ashr exact i32 %8, 1
  %18 = ashr exact i32 %10, 1
  %19 = ashr exact i32 %14, 1
  %20 = add nsw i32 %18, %3
  %21 = mul nsw i32 %19, %20
  %22 = shl i32 %21, 1
  %23 = add nsw i32 %22, %16
  %24 = sext i32 %23 to i64
  %25 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %0, i64 0, i32 17
  %26 = load i8*, i8** %25, align 8
  %27 = icmp eq i8* %26, null
  br i1 %27, label %28, label %32

28:                                               ; preds = %6
  %29 = tail call i8* @vpx_memalign(i64 32, i64 %24) #3
  store i8* %29, i8** %25, align 8
  %30 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %0, i64 0, i32 18
  store i64 %24, i64* %30, align 8
  %31 = icmp eq i8* %29, null
  br i1 %31, label %82, label %36

32:                                               ; preds = %6
  %33 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %0, i64 0, i32 18
  %34 = load i64, i64* %33, align 8
  %35 = icmp ult i64 %34, %24
  br i1 %35, label %82, label %36

36:                                               ; preds = %28, %32
  %37 = phi i8* [ %26, %32 ], [ %29, %28 ]
  %38 = and i32 %3, 31
  %39 = icmp eq i32 %38, 0
  br i1 %39, label %40, label %82

40:                                               ; preds = %36
  %41 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %0, i64 0, i32 2
  store i32 %1, i32* %41, align 8
  %42 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %0, i64 0, i32 3
  store i32 %2, i32* %42, align 4
  %43 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %0, i64 0, i32 0
  store i32 %8, i32* %43, align 8
  %44 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %0, i64 0, i32 1
  store i32 %10, i32* %44, align 4
  %45 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %0, i64 0, i32 4
  store i32 %14, i32* %45, align 8
  %46 = add nsw i32 %1, 1
  %47 = sdiv i32 %46, 2
  %48 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %0, i64 0, i32 7
  store i32 %47, i32* %48, align 4
  %49 = add nsw i32 %2, 1
  %50 = sdiv i32 %49, 2
  %51 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %0, i64 0, i32 8
  store i32 %50, i32* %51, align 8
  %52 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %0, i64 0, i32 5
  store i32 %17, i32* %52, align 4
  %53 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %0, i64 0, i32 6
  store i32 %18, i32* %53, align 8
  %54 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %0, i64 0, i32 9
  store i32 %19, i32* %54, align 4
  %55 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %0, i64 0, i32 10
  store i32 0, i32* %55, align 8
  %56 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %0, i64 0, i32 11
  store i32 0, i32* %56, align 4
  %57 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %0, i64 0, i32 12
  store i32 0, i32* %57, align 8
  %58 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %0, i64 0, i32 19
  store i32 %3, i32* %58, align 8
  %59 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %0, i64 0, i32 20
  store i64 %24, i64* %59, align 8
  %60 = mul nsw i32 %14, %3
  %61 = sext i32 %60 to i64
  %62 = getelementptr inbounds i8, i8* %37, i64 %61
  %63 = sext i32 %3 to i64
  %64 = getelementptr inbounds i8, i8* %62, i64 %63
  %65 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %0, i64 0, i32 13
  store i8* %64, i8** %65, align 8
  %66 = sext i32 %16 to i64
  %67 = getelementptr inbounds i8, i8* %37, i64 %66
  %68 = sdiv i32 %3, 2
  %69 = mul nsw i32 %19, %68
  %70 = sext i32 %69 to i64
  %71 = getelementptr inbounds i8, i8* %67, i64 %70
  %72 = sext i32 %68 to i64
  %73 = getelementptr inbounds i8, i8* %71, i64 %72
  %74 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %0, i64 0, i32 14
  store i8* %73, i8** %74, align 8
  %75 = sext i32 %21 to i64
  %76 = getelementptr inbounds i8, i8* %67, i64 %75
  %77 = getelementptr inbounds i8, i8* %76, i64 %70
  %78 = getelementptr inbounds i8, i8* %77, i64 %72
  %79 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %0, i64 0, i32 15
  store i8* %78, i8** %79, align 8
  %80 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %0, i64 0, i32 16
  store i8* null, i8** %80, align 8
  %81 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %0, i64 0, i32 28
  store i32 0, i32* %81, align 4
  br label %82

82:                                               ; preds = %4, %40, %28, %32, %36
  %83 = phi i32 [ 0, %40 ], [ -1, %28 ], [ -1, %32 ], [ -3, %36 ], [ -2, %4 ]
  ret i32 %83
}

declare i8* @vpx_memalign(i64, i64) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define hidden i32 @vp8_yv12_alloc_frame_buffer(%struct.yv12_buffer_config*, i32, i32, i32) local_unnamed_addr #0 {
  %5 = icmp eq %struct.yv12_buffer_config* %0, null
  br i1 %5, label %16, label %6

6:                                                ; preds = %4
  %7 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %0, i64 0, i32 18
  %8 = load i64, i64* %7, align 8
  %9 = icmp eq i64 %8, 0
  br i1 %9, label %13, label %10

10:                                               ; preds = %6
  %11 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %0, i64 0, i32 17
  %12 = load i8*, i8** %11, align 8
  tail call void @vpx_free(i8* %12) #3
  br label %13

13:                                               ; preds = %6, %10
  %14 = bitcast %struct.yv12_buffer_config* %0 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %14, i8 0, i64 160, i1 false) #3
  %15 = tail call i32 @vp8_yv12_realloc_frame_buffer(%struct.yv12_buffer_config* nonnull %0, i32 %1, i32 %2, i32 %3)
  br label %16

16:                                               ; preds = %4, %13
  %17 = phi i32 [ %15, %13 ], [ -2, %4 ]
  ret i32 %17
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @vpx_free_frame_buffer(%struct.yv12_buffer_config*) local_unnamed_addr #0 {
  %2 = icmp eq %struct.yv12_buffer_config* %0, null
  br i1 %2, label %12, label %3

3:                                                ; preds = %1
  %4 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %0, i64 0, i32 18
  %5 = load i64, i64* %4, align 8
  %6 = icmp eq i64 %5, 0
  br i1 %6, label %10, label %7

7:                                                ; preds = %3
  %8 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %0, i64 0, i32 17
  %9 = load i8*, i8** %8, align 8
  tail call void @vpx_free(i8* %9) #3
  br label %10

10:                                               ; preds = %3, %7
  %11 = bitcast %struct.yv12_buffer_config* %0 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %11, i8 0, i64 160, i1 false)
  br label %12

12:                                               ; preds = %1, %10
  %13 = phi i32 [ 0, %10 ], [ -1, %1 ]
  ret i32 %13
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @vpx_realloc_frame_buffer(%struct.yv12_buffer_config*, i32, i32, i32, i32, i32, i32, i32, %struct.vpx_codec_frame_buffer*, i32 (i8*, i64, %struct.vpx_codec_frame_buffer*)*, i8*) local_unnamed_addr #0 {
  %12 = icmp sgt i32 %1, 16384
  %13 = icmp sgt i32 %2, 16384
  %14 = or i1 %12, %13
  br i1 %14, label %147, label %15

15:                                               ; preds = %11
  %16 = and i32 %6, 31
  %17 = icmp eq i32 %16, 0
  br i1 %17, label %18, label %147

18:                                               ; preds = %15
  %19 = icmp eq %struct.yv12_buffer_config* %0, null
  br i1 %19, label %147, label %20

20:                                               ; preds = %18
  %21 = icmp eq i32 %7, 0
  %22 = select i1 %21, i32 1, i32 %7
  %23 = add nsw i32 %1, 7
  %24 = and i32 %23, -8
  %25 = add nsw i32 %2, 7
  %26 = and i32 %25, -8
  %27 = shl nsw i32 %6, 1
  %28 = add i32 %24, 31
  %29 = add i32 %28, %27
  %30 = and i32 %29, -32
  %31 = add nsw i32 %27, %26
  %32 = sext i32 %31 to i64
  %33 = sext i32 %30 to i64
  %34 = mul nsw i64 %33, %32
  %35 = sext i32 %7 to i64
  %36 = add nsw i64 %34, %35
  %37 = ashr i32 %24, %3
  %38 = ashr i32 %26, %4
  %39 = ashr i32 %30, %3
  %40 = ashr i32 %6, %3
  %41 = ashr i32 %6, %4
  %42 = shl i32 %41, 1
  %43 = add nsw i32 %42, %38
  %44 = sext i32 %43 to i64
  %45 = sext i32 %39 to i64
  %46 = mul nsw i64 %45, %44
  %47 = add nsw i64 %46, %35
  %48 = add nsw i32 %5, 1
  %49 = sext i32 %48 to i64
  %50 = shl i64 %47, 1
  %51 = add i64 %50, %36
  %52 = mul i64 %51, %49
  %53 = icmp eq i32 (i8*, i64, %struct.vpx_codec_frame_buffer*)* %9, null
  br i1 %53, label %72, label %54

54:                                               ; preds = %20
  %55 = add i64 %52, 31
  %56 = tail call i32 %9(i8* %10, i64 %55, %struct.vpx_codec_frame_buffer* %8) #3
  %57 = icmp slt i32 %56, 0
  br i1 %57, label %147, label %58

58:                                               ; preds = %54
  %59 = getelementptr inbounds %struct.vpx_codec_frame_buffer, %struct.vpx_codec_frame_buffer* %8, i64 0, i32 0
  %60 = load i8*, i8** %59, align 8
  %61 = icmp eq i8* %60, null
  br i1 %61, label %147, label %62

62:                                               ; preds = %58
  %63 = getelementptr inbounds %struct.vpx_codec_frame_buffer, %struct.vpx_codec_frame_buffer* %8, i64 0, i32 1
  %64 = load i64, i64* %63, align 8
  %65 = icmp ult i64 %64, %55
  br i1 %65, label %147, label %66

66:                                               ; preds = %62
  %67 = ptrtoint i8* %60 to i64
  %68 = add i64 %67, 31
  %69 = and i64 %68, -32
  %70 = inttoptr i64 %69 to i8*
  %71 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %0, i64 0, i32 17
  store i8* %70, i8** %71, align 8
  br label %83

72:                                               ; preds = %20
  %73 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %0, i64 0, i32 18
  %74 = load i64, i64* %73, align 8
  %75 = icmp ugt i64 %52, %74
  br i1 %75, label %76, label %83

76:                                               ; preds = %72
  %77 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %0, i64 0, i32 17
  %78 = load i8*, i8** %77, align 8
  tail call void @vpx_free(i8* %78) #3
  %79 = bitcast i8** %77 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %79, i8 0, i64 16, i1 false)
  %80 = tail call i8* @vpx_memalign(i64 32, i64 %52) #3
  store i8* %80, i8** %77, align 8
  %81 = icmp eq i8* %80, null
  br i1 %81, label %147, label %82

82:                                               ; preds = %76
  store i64 %52, i64* %73, align 8
  tail call void @llvm.memset.p0i8.i64(i8* nonnull align 1 %80, i8 0, i64 %52, i1 false)
  br label %83

83:                                               ; preds = %66, %72, %82
  %84 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %0, i64 0, i32 2
  store i32 %1, i32* %84, align 8
  %85 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %0, i64 0, i32 3
  store i32 %2, i32* %85, align 4
  %86 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %0, i64 0, i32 0
  store i32 %24, i32* %86, align 8
  %87 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %0, i64 0, i32 1
  store i32 %26, i32* %87, align 4
  %88 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %0, i64 0, i32 4
  store i32 %30, i32* %88, align 8
  %89 = add nsw i32 %3, %1
  %90 = ashr i32 %89, %3
  %91 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %0, i64 0, i32 7
  store i32 %90, i32* %91, align 4
  %92 = add nsw i32 %4, %2
  %93 = ashr i32 %92, %4
  %94 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %0, i64 0, i32 8
  store i32 %93, i32* %94, align 8
  %95 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %0, i64 0, i32 5
  store i32 %37, i32* %95, align 4
  %96 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %0, i64 0, i32 6
  store i32 %38, i32* %96, align 8
  %97 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %0, i64 0, i32 9
  store i32 %39, i32* %97, align 4
  %98 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %0, i64 0, i32 19
  store i32 %6, i32* %98, align 8
  %99 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %0, i64 0, i32 20
  store i64 %52, i64* %99, align 8
  %100 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %0, i64 0, i32 21
  store i32 %3, i32* %100, align 8
  %101 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %0, i64 0, i32 22
  store i32 %4, i32* %101, align 4
  %102 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %0, i64 0, i32 17
  %103 = load i8*, i8** %102, align 8
  %104 = icmp eq i32 %5, 0
  %105 = ptrtoint i8* %103 to i64
  %106 = lshr i64 %105, 1
  %107 = inttoptr i64 %106 to i8*
  %108 = select i1 %104, i32 0, i32 8
  %109 = select i1 %104, i8* %103, i8* %107
  %110 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %0, i64 0, i32 29
  store i32 %108, i32* %110, align 8
  %111 = mul nsw i32 %30, %6
  %112 = sext i32 %111 to i64
  %113 = getelementptr inbounds i8, i8* %109, i64 %112
  %114 = sext i32 %6 to i64
  %115 = getelementptr inbounds i8, i8* %113, i64 %114
  %116 = ptrtoint i8* %115 to i64
  %117 = add nsw i32 %22, -1
  %118 = sext i32 %117 to i64
  %119 = add i64 %116, %118
  %120 = sub nsw i32 0, %22
  %121 = sext i32 %120 to i64
  %122 = and i64 %119, %121
  %123 = inttoptr i64 %122 to i8*
  %124 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %0, i64 0, i32 13
  store i8* %123, i8** %124, align 8
  %125 = getelementptr inbounds i8, i8* %109, i64 %36
  %126 = mul nsw i32 %39, %41
  %127 = sext i32 %126 to i64
  %128 = getelementptr inbounds i8, i8* %125, i64 %127
  %129 = sext i32 %40 to i64
  %130 = getelementptr inbounds i8, i8* %128, i64 %129
  %131 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %0, i64 0, i32 14
  %132 = getelementptr inbounds i8, i8* %125, i64 %47
  %133 = getelementptr inbounds i8, i8* %132, i64 %127
  %134 = getelementptr inbounds i8, i8* %133, i64 %129
  %135 = insertelement <2 x i8*> undef, i8* %130, i32 0
  %136 = insertelement <2 x i8*> %135, i8* %134, i32 1
  %137 = ptrtoint <2 x i8*> %136 to <2 x i64>
  %138 = insertelement <2 x i64> undef, i64 %118, i32 0
  %139 = shufflevector <2 x i64> %138, <2 x i64> undef, <2 x i32> zeroinitializer
  %140 = add <2 x i64> %139, %137
  %141 = insertelement <2 x i64> undef, i64 %121, i32 0
  %142 = shufflevector <2 x i64> %141, <2 x i64> undef, <2 x i32> zeroinitializer
  %143 = and <2 x i64> %140, %142
  %144 = inttoptr <2 x i64> %143 to <2 x i8*>
  %145 = bitcast i8** %131 to <2 x i8*>*
  store <2 x i8*> %144, <2 x i8*>* %145, align 8
  %146 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %0, i64 0, i32 28
  store i32 0, i32* %146, align 4
  br label %147

147:                                              ; preds = %18, %83, %58, %62, %54, %76, %15, %11
  %148 = phi i32 [ -1, %11 ], [ -3, %15 ], [ 0, %83 ], [ -1, %58 ], [ -1, %62 ], [ -1, %54 ], [ -1, %76 ], [ -2, %18 ]
  ret i32 %148
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @vpx_alloc_frame_buffer(%struct.yv12_buffer_config*, i32, i32, i32, i32, i32, i32, i32) local_unnamed_addr #0 {
  %9 = icmp eq %struct.yv12_buffer_config* %0, null
  br i1 %9, label %20, label %10

10:                                               ; preds = %8
  %11 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %0, i64 0, i32 18
  %12 = load i64, i64* %11, align 8
  %13 = icmp eq i64 %12, 0
  br i1 %13, label %17, label %14

14:                                               ; preds = %10
  %15 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %0, i64 0, i32 17
  %16 = load i8*, i8** %15, align 8
  tail call void @vpx_free(i8* %16) #3
  br label %17

17:                                               ; preds = %10, %14
  %18 = bitcast %struct.yv12_buffer_config* %0 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %18, i8 0, i64 160, i1 false) #3
  %19 = tail call i32 @vpx_realloc_frame_buffer(%struct.yv12_buffer_config* nonnull %0, i32 %1, i32 %2, i32 %3, i32 %4, i32 %5, i32 %6, i32 %7, %struct.vpx_codec_frame_buffer* null, i32 (i8*, i64, %struct.vpx_codec_frame_buffer*)* null, i8* null)
  br label %20

20:                                               ; preds = %8, %17
  %21 = phi i32 [ %19, %17 ], [ -2, %8 ]
  ret i32 %21
}

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
