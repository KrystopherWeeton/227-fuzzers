; ModuleID = '../../third_party/blink/renderer/platform/wtf/date_math.cc'
source_filename = "../../third_party/blink/renderer/platform/wtf/date_math.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"struct.WTF::KnownZone" = type { [4 x i8], i32 }
%"class.WTF::StringImpl" = type { i32, i32, %"struct.std::__1::atomic" }
%"struct.std::__1::atomic" = type { %"struct.std::__1::__atomic_base" }
%"struct.std::__1::__atomic_base" = type { %"struct.std::__1::__atomic_base.2" }
%"struct.std::__1::__atomic_base.2" = type { %"struct.std::__1::__cxx_atomic_impl" }
%"struct.std::__1::__cxx_atomic_impl" = type { %"struct.std::__1::__cxx_atomic_base_impl" }
%"struct.std::__1::__cxx_atomic_base_impl" = type { i32 }
%"class.WTF::String" = type { %class.scoped_refptr }
%class.scoped_refptr = type { %"class.WTF::StringImpl"* }
%"class.WTF::StringView" = type <{ %"class.WTF::StringImpl"*, i8*, i32, [4 x i8] }>
%"class.icu_69::TimeZone" = type { %"class.icu_69::UObject", %"class.icu_69::UnicodeString" }
%"class.icu_69::UObject" = type { i32 (...)** }
%"class.icu_69::UnicodeString" = type { %"class.icu_69::Replaceable", %"union.icu_69::UnicodeString::StackBufferOrFields" }
%"class.icu_69::Replaceable" = type { %"class.icu_69::UObject" }
%"union.icu_69::UnicodeString::StackBufferOrFields" = type { %struct.anon.0, [32 x i8] }
%struct.anon.0 = type { i16, i32, i32, i16* }
%"class.icu_69::BasicTimeZone" = type { %"class.icu_69::TimeZone" }
%"class.WTF::IntegerToStringConverter" = type <{ [13 x i8], [3 x i8], i8*, i32, [4 x i8] }>
%"class.base::Time" = type { %"class.base::time_internal::TimeBase" }
%"class.base::time_internal::TimeBase" = type { i64 }
%"struct.base::Time::Exploded" = type { i32, i32, i32, i32, i32, i32, i32, i32 }
%"class.WTF::StringBuilder" = type <{ %"class.WTF::String", %union.anon.3, i32, i8, i8, [2 x i8] }>
%union.anon.3 = type { %"class.WTF::Vector" }
%"class.WTF::Vector" = type { %"class.WTF::VectorBuffer" }
%"class.WTF::VectorBuffer" = type { %"class.WTF::VectorBufferBase", [16 x i8] }
%"class.WTF::VectorBufferBase" = type { i8*, i32, i32 }
%"class.WTF::Vector.4" = type { %"class.WTF::VectorBuffer.5" }
%"class.WTF::VectorBuffer.5" = type { %"class.WTF::VectorBufferBase.6", [16 x i8] }
%"class.WTF::VectorBufferBase.6" = type { i16*, i32, i32 }
%"class.logging::CheckOpResult" = type { i8* }
%"class.logging::CheckError" = type { %"class.logging::LogMessage"* }
%"class.logging::LogMessage" = type { i32 (...)**, i32, %"class.std::__1::basic_ostringstream", i64, i8*, i32, %"class.base::ScopedClearLastErrorBase" }
%"class.std::__1::basic_ostringstream" = type { %"class.std::__1::basic_ostream.base", %"class.std::__1::basic_stringbuf", %"class.std::__1::basic_ios.base" }
%"class.std::__1::basic_ostream.base" = type { i32 (...)** }
%"class.std::__1::basic_stringbuf" = type <{ %"class.std::__1::basic_streambuf", %"class.std::__1::basic_string", i8*, i32, [4 x i8] }>
%"class.std::__1::basic_streambuf" = type { i32 (...)**, %"class.std::__1::locale", i8*, i8*, i8*, i8*, i8*, i8* }
%"class.std::__1::locale" = type { %"class.std::__1::locale::__imp"* }
%"class.std::__1::locale::__imp" = type opaque
%"class.std::__1::basic_string" = type { %"class.std::__1::__compressed_pair.9" }
%"class.std::__1::__compressed_pair.9" = type { %"struct.std::__1::__compressed_pair_elem.10" }
%"struct.std::__1::__compressed_pair_elem.10" = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" = type { %union.anon.11 }
%union.anon.11 = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" = type { i8*, i64, i64 }
%"class.std::__1::basic_ios.base" = type <{ %"class.std::__1::ios_base", %"class.std::__1::basic_ostream"*, i32 }>
%"class.std::__1::ios_base" = type { i32 (...)**, i32, i64, i64, i32, i32, i8*, i8*, void (i32, %"class.std::__1::ios_base"*, i32)**, i32*, i64, i64, i64*, i64, i64, i8**, i64, i64 }
%"class.std::__1::basic_ostream" = type { i32 (...)**, %"class.std::__1::basic_ios.base" }
%"class.base::ScopedClearLastErrorBase" = type { i32 }

$_ZN3WTF13StringBuilder6AppendERKNS_10StringViewE = comdat any

$_ZN3WTF13StringBuilder6AppendEh = comdat any

$_ZN3WTF6VectorIDsLj8ENS_18PartitionAllocatorEE14AppendSlowCaseIRDsEEvOT_ = comdat any

$_ZN3WTF6VectorIDsLj8ENS_18PartitionAllocatorEE14ExpandCapacityEj = comdat any

$_ZN3WTF6VectorIDsLj8ENS_18PartitionAllocatorEE16ReallocateBufferEj = comdat any

$_ZN3WTF18PartitionAllocator13QuantizedSizeIDsEEmm = comdat any

$_ZN3WTF12VectorBufferIDsLj8ENS_18PartitionAllocatorEE22ReallyDeallocateBufferEPDs = comdat any

$_ZN3WTF6VectorIhLj16ENS_18PartitionAllocatorEE14AppendSlowCaseIRhEEvOT_ = comdat any

$_ZN3WTF6VectorIhLj16ENS_18PartitionAllocatorEE14ExpandCapacityEj = comdat any

$_ZN3WTF6VectorIhLj16ENS_18PartitionAllocatorEE16ReallocateBufferEj = comdat any

$_ZN3WTF18PartitionAllocator13QuantizedSizeIhEEmm = comdat any

$_ZN3WTF12VectorBufferIhLj16ENS_18PartitionAllocatorEE22ReallyDeallocateBufferEPh = comdat any

@_ZN3WTFL16kFirstDayOfMonthE = internal unnamed_addr constant [2 x [12 x i32]] [[12 x i32] [i32 0, i32 31, i32 59, i32 90, i32 120, i32 151, i32 181, i32 212, i32 243, i32 273, i32 304, i32 334], [12 x i32] [i32 0, i32 31, i32 60, i32 91, i32 121, i32 152, i32 182, i32 213, i32 244, i32 274, i32 305, i32 335]], align 16
@_ZN3WTFL12kWeekdayNameE = internal constant [7 x [4 x i8]] [[4 x i8] c"Sun\00", [4 x i8] c"Mon\00", [4 x i8] c"Tue\00", [4 x i8] c"Wed\00", [4 x i8] c"Thu\00", [4 x i8] c"Fri\00", [4 x i8] c"Sat\00"], align 16
@.str = private unnamed_addr constant [3 x i8] c", \00", align 1
@_ZN3WTFL10kMonthNameE = internal constant [12 x [4 x i8]] [[4 x i8] c"Jan\00", [4 x i8] c"Feb\00", [4 x i8] c"Mar\00", [4 x i8] c"Apr\00", [4 x i8] c"May\00", [4 x i8] c"Jun\00", [4 x i8] c"Jul\00", [4 x i8] c"Aug\00", [4 x i8] c"Sep\00", [4 x i8] c"Oct\00", [4 x i8] c"Nov\00", [4 x i8] c"Dec\00"], align 16
@.str.1 = private unnamed_addr constant [3 x i8] c"AM\00", align 1
@.str.2 = private unnamed_addr constant [3 x i8] c"PM\00", align 1
@.str.3 = private unnamed_addr constant [4 x i8] c"GMT\00", align 1
@.str.4 = private unnamed_addr constant [4 x i8] c"UTC\00", align 1
@_ZN3WTFL11known_zonesE = internal constant [10 x %"struct.WTF::KnownZone"] [%"struct.WTF::KnownZone" { [4 x i8] c"UT\00\00", i32 0 }, %"struct.WTF::KnownZone" { [4 x i8] c"GMT\00", i32 0 }, %"struct.WTF::KnownZone" { [4 x i8] c"EST\00", i32 -300 }, %"struct.WTF::KnownZone" { [4 x i8] c"EDT\00", i32 -240 }, %"struct.WTF::KnownZone" { [4 x i8] c"CST\00", i32 -360 }, %"struct.WTF::KnownZone" { [4 x i8] c"CDT\00", i32 -300 }, %"struct.WTF::KnownZone" { [4 x i8] c"MST\00", i32 -420 }, %"struct.WTF::KnownZone" { [4 x i8] c"MDT\00", i32 -360 }, %"struct.WTF::KnownZone" { [4 x i8] c"PST\00", i32 -480 }, %"struct.WTF::KnownZone" { [4 x i8] c"PDT\00", i32 -420 }], align 16
@.str.5 = private unnamed_addr constant [37 x i8] c"janfebmaraprmayjunjulaugsepoctnovdec\00", align 1
@_ZN3WTF19kASCIICaseFoldTableE = external local_unnamed_addr constant [256 x i8], align 16
@_ZN3WTF10StringImpl6empty_E = external local_unnamed_addr global %"class.WTF::StringImpl"*, align 8
@.str.6 = private unnamed_addr constant [33 x i8] c"expanded_capacity > old_capacity\00", align 1
@.str.7 = private unnamed_addr constant [55 x i8] c"../../third_party/blink/renderer/platform/wtf/vector.h\00", align 1
@.str.9 = private unnamed_addr constant [44 x i8] c"count <= MaxElementCountInBackingStore<T>()\00", align 1
@.str.10 = private unnamed_addr constant [78 x i8] c"../../third_party/blink/renderer/platform/wtf/allocator/partition_allocator.h\00", align 1
@__PRETTY_FUNCTION__._ZN3WTF21GetStringWithTypeNameIDsEEPKcv = private unnamed_addr constant [56 x i8] c"const char *WTF::GetStringWithTypeName() [T = char16_t]\00", align 1
@__PRETTY_FUNCTION__._ZN3WTF21GetStringWithTypeNameIhEEPKcv = private unnamed_addr constant [61 x i8] c"const char *WTF::GetStringWithTypeName() [T = unsigned char]\00", align 1

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden zeroext i1 @_ZN3WTF10IsLeapYearEi(i32) local_unnamed_addr #0 {
  %2 = and i32 %0, 3
  %3 = icmp eq i32 %2, 0
  br i1 %3, label %4, label %10

4:                                                ; preds = %1
  %5 = srem i32 %0, 400
  %6 = icmp eq i32 %5, 0
  br i1 %6, label %10, label %7

7:                                                ; preds = %4
  %8 = srem i32 %0, 100
  %9 = icmp ne i32 %8, 0
  br label %10

10:                                               ; preds = %7, %4, %1
  %11 = phi i1 [ false, %1 ], [ true, %4 ], [ %9, %7 ]
  ret i1 %11
}

; Function Attrs: nounwind readnone ssp uwtable
define hidden i32 @_ZN3WTF8MsToYearEd(double) local_unnamed_addr #1 {
  %2 = fdiv double %0, 0x421D63C37F000000
  %3 = tail call double @llvm.floor.f64(double %2)
  %4 = fadd double %3, 1.970000e+03
  %5 = fptosi double %4 to i32
  %6 = add nsw i32 %5, -1
  %7 = sitofp i32 %6 to double
  %8 = fmul double %7, 2.500000e-01
  %9 = tail call double @llvm.floor.f64(double %8) #12
  %10 = fadd double %9, -4.920000e+02
  %11 = insertelement <2 x double> undef, double %7, i32 0
  %12 = shufflevector <2 x double> %11, <2 x double> undef, <2 x i32> zeroinitializer
  %13 = fdiv <2 x double> %12, <double 4.000000e+02, double 1.000000e+02>
  %14 = call <2 x double> @llvm.floor.v2f64(<2 x double> %13)
  %15 = fadd <2 x double> %14, <double -4.000000e+00, double -1.900000e+01>
  %16 = add nsw i32 %5, -1970
  %17 = sitofp i32 %16 to double
  %18 = fmul double %17, 3.650000e+02
  %19 = fadd double %18, %10
  %20 = extractelement <2 x double> %15, i32 1
  %21 = fsub double %19, %20
  %22 = extractelement <2 x double> %15, i32 0
  %23 = fadd double %22, %21
  %24 = fmul double %23, 8.640000e+07
  %25 = fcmp ogt double %24, %0
  br i1 %25, label %42, label %26

26:                                               ; preds = %1
  %27 = and i32 %5, 3
  %28 = icmp eq i32 %27, 0
  br i1 %28, label %29, label %36

29:                                               ; preds = %26
  %30 = srem i32 %5, 400
  %31 = icmp eq i32 %30, 0
  %32 = srem i32 %5, 100
  %33 = icmp ne i32 %32, 0
  %34 = or i1 %31, %33
  %35 = select i1 %34, double 3.162240e+10, double 3.153600e+10
  br label %36

36:                                               ; preds = %26, %29
  %37 = phi double [ %35, %29 ], [ 3.153600e+10, %26 ]
  %38 = fadd double %24, %37
  %39 = fcmp ugt double %38, %0
  br i1 %39, label %42, label %40

40:                                               ; preds = %36
  %41 = add nsw i32 %5, 1
  br label %42

42:                                               ; preds = %1, %36, %40
  %43 = phi i32 [ %41, %40 ], [ %5, %36 ], [ %6, %1 ]
  ret i32 %43
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nounwind readnone speculatable
declare double @llvm.floor.f64(double) #3

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nounwind readnone ssp uwtable
define hidden i32 @_ZN3WTF9DayInYearEdi(double, i32) local_unnamed_addr #1 {
  %3 = fdiv double %0, 8.640000e+07
  %4 = tail call double @llvm.floor.f64(double %3) #12
  %5 = add nsw i32 %1, -1
  %6 = sitofp i32 %5 to double
  %7 = fmul double %6, 2.500000e-01
  %8 = tail call double @llvm.floor.f64(double %7) #12
  %9 = fadd double %8, -4.920000e+02
  %10 = insertelement <2 x double> undef, double %6, i32 0
  %11 = shufflevector <2 x double> %10, <2 x double> undef, <2 x i32> zeroinitializer
  %12 = fdiv <2 x double> %11, <double 4.000000e+02, double 1.000000e+02>
  %13 = call <2 x double> @llvm.floor.v2f64(<2 x double> %12)
  %14 = fadd <2 x double> %13, <double -4.000000e+00, double -1.900000e+01>
  %15 = add nsw i32 %1, -1970
  %16 = sitofp i32 %15 to double
  %17 = fmul double %16, 3.650000e+02
  %18 = fadd double %17, %9
  %19 = extractelement <2 x double> %14, i32 1
  %20 = fsub double %18, %19
  %21 = extractelement <2 x double> %14, i32 0
  %22 = fadd double %21, %20
  %23 = fsub double %4, %22
  %24 = fptosi double %23 to i32
  ret i32 %24
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden i32 @_ZN3WTF18MonthFromDayInYearEib(i32, i1 zeroext) local_unnamed_addr #0 {
  %3 = icmp slt i32 %0, 31
  br i1 %3, label %35, label %4

4:                                                ; preds = %2
  %5 = select i1 %1, i32 60, i32 59
  %6 = icmp sgt i32 %5, %0
  br i1 %6, label %35, label %7

7:                                                ; preds = %4
  %8 = add nuw nsw i32 %5, 31
  %9 = icmp sgt i32 %8, %0
  br i1 %9, label %35, label %10

10:                                               ; preds = %7
  %11 = add nuw nsw i32 %5, 61
  %12 = icmp sgt i32 %11, %0
  br i1 %12, label %35, label %13

13:                                               ; preds = %10
  %14 = add nuw nsw i32 %5, 92
  %15 = icmp sgt i32 %14, %0
  br i1 %15, label %35, label %16

16:                                               ; preds = %13
  %17 = add nuw nsw i32 %5, 122
  %18 = icmp sgt i32 %17, %0
  br i1 %18, label %35, label %19

19:                                               ; preds = %16
  %20 = add nuw nsw i32 %5, 153
  %21 = icmp sgt i32 %20, %0
  br i1 %21, label %35, label %22

22:                                               ; preds = %19
  %23 = add nuw nsw i32 %5, 184
  %24 = icmp sgt i32 %23, %0
  br i1 %24, label %35, label %25

25:                                               ; preds = %22
  %26 = add nuw nsw i32 %5, 214
  %27 = icmp sgt i32 %26, %0
  br i1 %27, label %35, label %28

28:                                               ; preds = %25
  %29 = add nuw nsw i32 %5, 245
  %30 = icmp sgt i32 %29, %0
  br i1 %30, label %35, label %31

31:                                               ; preds = %28
  %32 = add nuw nsw i32 %5, 275
  %33 = icmp sgt i32 %32, %0
  %34 = select i1 %33, i32 10, i32 11
  br label %35

35:                                               ; preds = %31, %28, %25, %22, %19, %16, %13, %10, %7, %4, %2
  %36 = phi i32 [ 0, %2 ], [ 1, %4 ], [ 2, %7 ], [ 3, %10 ], [ 4, %13 ], [ 5, %16 ], [ 6, %19 ], [ 7, %22 ], [ 8, %25 ], [ 9, %28 ], [ %34, %31 ]
  ret i32 %36
}

; Function Attrs: nounwind readnone ssp uwtable
define hidden i32 @_ZN3WTF23DayInMonthFromDayInYearEib(i32, i1 zeroext) local_unnamed_addr #1 {
  %3 = icmp slt i32 %0, 31
  br i1 %3, label %4, label %6

4:                                                ; preds = %2
  %5 = add nsw i32 %0, 1
  br label %40

6:                                                ; preds = %2
  %7 = select i1 %1, i32 59, i32 58
  %8 = icmp slt i32 %7, %0
  br i1 %8, label %9, label %37

9:                                                ; preds = %6
  %10 = add nuw nsw i32 %7, 31
  %11 = icmp slt i32 %10, %0
  br i1 %11, label %12, label %37

12:                                               ; preds = %9
  %13 = add nuw nsw i32 %7, 61
  %14 = icmp slt i32 %13, %0
  br i1 %14, label %15, label %37

15:                                               ; preds = %12
  %16 = add nuw nsw i32 %7, 92
  %17 = icmp slt i32 %16, %0
  br i1 %17, label %18, label %37

18:                                               ; preds = %15
  %19 = add nuw nsw i32 %7, 122
  %20 = icmp slt i32 %19, %0
  br i1 %20, label %21, label %37

21:                                               ; preds = %18
  %22 = add nuw nsw i32 %7, 153
  %23 = icmp slt i32 %22, %0
  br i1 %23, label %24, label %37

24:                                               ; preds = %21
  %25 = add nuw nsw i32 %7, 184
  %26 = icmp slt i32 %25, %0
  br i1 %26, label %27, label %37

27:                                               ; preds = %24
  %28 = add nuw nsw i32 %7, 214
  %29 = icmp slt i32 %28, %0
  br i1 %29, label %30, label %37

30:                                               ; preds = %27
  %31 = add nuw nsw i32 %7, 245
  %32 = icmp slt i32 %31, %0
  br i1 %32, label %33, label %37

33:                                               ; preds = %30
  %34 = add nuw nsw i32 %7, 275
  %35 = icmp slt i32 %34, %0
  %36 = select i1 %35, i32 %34, i32 %31
  br label %37

37:                                               ; preds = %30, %27, %24, %21, %18, %15, %12, %9, %6, %33
  %38 = phi i32 [ 30, %6 ], [ %7, %9 ], [ %10, %12 ], [ %13, %15 ], [ %16, %18 ], [ %19, %21 ], [ %22, %24 ], [ %25, %27 ], [ %28, %30 ], [ %36, %33 ]
  %39 = sub nsw i32 %0, %38
  br label %40

40:                                               ; preds = %37, %4
  %41 = phi i32 [ %5, %4 ], [ %39, %37 ]
  ret i32 %41
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden i32 @_ZN3WTF9DayInYearEiii(i32, i32, i32) local_unnamed_addr #0 {
  %4 = and i32 %0, 3
  %5 = icmp eq i32 %4, 0
  br i1 %5, label %6, label %13

6:                                                ; preds = %3
  %7 = srem i32 %0, 400
  %8 = icmp eq i32 %7, 0
  br i1 %8, label %13, label %9

9:                                                ; preds = %6
  %10 = srem i32 %0, 100
  %11 = icmp ne i32 %10, 0
  %12 = zext i1 %11 to i64
  br label %13

13:                                               ; preds = %3, %6, %9
  %14 = phi i64 [ 0, %3 ], [ 1, %6 ], [ %12, %9 ]
  %15 = sext i32 %1 to i64
  %16 = getelementptr inbounds [2 x [12 x i32]], [2 x [12 x i32]]* @_ZN3WTFL16kFirstDayOfMonthE, i64 0, i64 %14, i64 %15
  %17 = load i32, i32* %16, align 4
  %18 = add i32 %2, -1
  %19 = add i32 %18, %17
  ret i32 %19
}

; Function Attrs: nounwind readnone ssp uwtable
define hidden double @_ZN3WTF18DateToDaysFrom1970Eiii(i32, i32, i32) local_unnamed_addr #1 {
  %4 = sdiv i32 %1, 12
  %5 = add nsw i32 %4, %0
  %6 = srem i32 %1, 12
  %7 = icmp slt i32 %6, 0
  %8 = add nsw i32 %6, 12
  %9 = select i1 %7, i32 %8, i32 %6
  %10 = ashr i32 %6, 31
  %11 = add nsw i32 %5, %10
  %12 = add nsw i32 %11, -1
  %13 = sitofp i32 %12 to double
  %14 = fmul double %13, 2.500000e-01
  %15 = tail call double @llvm.floor.f64(double %14) #12
  %16 = fadd double %15, -4.920000e+02
  %17 = fdiv double %13, 1.000000e+02
  %18 = tail call double @llvm.floor.f64(double %17) #12
  %19 = fadd double %18, -1.900000e+01
  %20 = fdiv double %13, 4.000000e+02
  %21 = tail call double @llvm.floor.f64(double %20) #12
  %22 = fadd double %21, -4.000000e+00
  %23 = add nsw i32 %11, -1970
  %24 = sitofp i32 %23 to double
  %25 = fmul double %24, 3.650000e+02
  %26 = fadd double %25, %16
  %27 = fsub double %26, %19
  %28 = fadd double %22, %27
  %29 = tail call double @llvm.floor.f64(double %28)
  %30 = and i32 %11, 3
  %31 = icmp eq i32 %30, 0
  br i1 %31, label %32, label %39

32:                                               ; preds = %3
  %33 = srem i32 %11, 400
  %34 = icmp eq i32 %33, 0
  br i1 %34, label %39, label %35

35:                                               ; preds = %32
  %36 = srem i32 %11, 100
  %37 = icmp ne i32 %36, 0
  %38 = zext i1 %37 to i64
  br label %39

39:                                               ; preds = %3, %32, %35
  %40 = phi i64 [ 0, %3 ], [ 1, %32 ], [ %38, %35 ]
  %41 = sext i32 %9 to i64
  %42 = getelementptr inbounds [2 x [12 x i32]], [2 x [12 x i32]]* @_ZN3WTFL16kFirstDayOfMonthE, i64 0, i64 %40, i64 %41
  %43 = load i32, i32* %42, align 4
  %44 = add i32 %2, -1
  %45 = add i32 %44, %43
  %46 = sitofp i32 %45 to double
  %47 = fadd double %29, %46
  ret double %47
}

; Function Attrs: nounwind ssp uwtable
define hidden { i8, i64 } @_ZN3WTF37ParseDateFromNullTerminatedCharactersEPKc(i8*) local_unnamed_addr #4 {
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i8*, align 8
  %6 = alloca %"class.WTF::String", align 8
  %7 = alloca %"class.WTF::StringView", align 8
  %8 = alloca %"class.WTF::StringView", align 8
  %9 = alloca %"class.WTF::String", align 8
  %10 = alloca %"class.WTF::StringView", align 8
  %11 = alloca %"class.WTF::StringView", align 8
  %12 = alloca %"class.WTF::String", align 8
  %13 = alloca %"class.WTF::StringView", align 8
  %14 = alloca i32, align 4
  %15 = alloca i32, align 4
  %16 = alloca i32, align 4
  %17 = ptrtoint i8* %0 to i64
  %18 = load i8, i8* %0, align 1
  %19 = icmp eq i8 %18, 0
  br i1 %19, label %49, label %20

20:                                               ; preds = %1, %41
  %21 = phi i64 [ %44, %41 ], [ %17, %1 ]
  %22 = phi i8 [ %45, %41 ], [ %18, %1 ]
  %23 = phi i8* [ %43, %41 ], [ %0, %1 ]
  %24 = phi i32 [ %42, %41 ], [ 0, %1 ]
  %25 = icmp slt i8 %22, 33
  br i1 %25, label %26, label %29

26:                                               ; preds = %20
  %27 = icmp eq i32 %24, 0
  br i1 %27, label %28, label %41

28:                                               ; preds = %26
  switch i8 %22, label %49 [
    i8 32, label %41
    i8 13, label %41
    i8 12, label %41
    i8 11, label %41
    i8 10, label %41
    i8 9, label %41
  ]

29:                                               ; preds = %20
  %30 = icmp eq i8 %22, 40
  br i1 %30, label %31, label %33

31:                                               ; preds = %29
  %32 = add nsw i32 %24, 1
  br label %41

33:                                               ; preds = %29
  %34 = icmp eq i8 %22, 41
  %35 = icmp sgt i32 %24, 0
  %36 = and i1 %34, %35
  br i1 %36, label %37, label %39

37:                                               ; preds = %33
  %38 = add nsw i32 %24, -1
  br label %41

39:                                               ; preds = %33
  %40 = icmp eq i32 %24, 0
  br i1 %40, label %49, label %41

41:                                               ; preds = %39, %37, %31, %28, %28, %28, %28, %28, %28, %26
  %42 = phi i32 [ %32, %31 ], [ %38, %37 ], [ %24, %39 ], [ 0, %28 ], [ %24, %26 ], [ 0, %28 ], [ 0, %28 ], [ 0, %28 ], [ 0, %28 ], [ 0, %28 ]
  %43 = getelementptr inbounds i8, i8* %23, i64 1
  %44 = ptrtoint i8* %43 to i64
  %45 = load i8, i8* %43, align 1
  %46 = icmp eq i8 %45, 0
  br i1 %46, label %47, label %20

47:                                               ; preds = %41
  %48 = ptrtoint i8* %43 to i64
  br label %49

49:                                               ; preds = %39, %28, %47, %1
  %50 = phi i64 [ %17, %1 ], [ %48, %47 ], [ %21, %28 ], [ %21, %39 ]
  %51 = inttoptr i64 %50 to i8*
  %52 = load i8, i8* %51, align 1
  %53 = icmp eq i8 %52, 0
  %54 = add i8 %52, -48
  %55 = icmp ult i8 %54, 10
  %56 = or i1 %53, %55
  br i1 %56, label %206, label %57

57:                                               ; preds = %49
  %58 = bitcast i32* %4 to [4 x i8]*
  %59 = bitcast i32* %4 to i8*
  %60 = getelementptr inbounds [4 x i8], [4 x i8]* %58, i64 0, i64 1
  %61 = getelementptr inbounds [4 x i8], [4 x i8]* %58, i64 0, i64 2
  %62 = getelementptr inbounds [4 x i8], [4 x i8]* %58, i64 0, i64 3
  br label %63

63:                                               ; preds = %152, %57
  %64 = phi i8 [ %52, %57 ], [ %157, %152 ]
  %65 = phi i8* [ %51, %57 ], [ %153, %152 ]
  %66 = phi i8* [ %51, %57 ], [ %156, %152 ]
  %67 = phi i64 [ -1, %57 ], [ %155, %152 ]
  %68 = phi i64 [ %50, %57 ], [ %154, %152 ]
  %69 = icmp slt i8 %64, 33
  br i1 %69, label %70, label %71

70:                                               ; preds = %63
  switch i8 %64, label %149 [
    i8 32, label %73
    i8 13, label %73
    i8 12, label %73
    i8 11, label %73
    i8 10, label %73
    i8 9, label %73
  ]

71:                                               ; preds = %63
  %72 = icmp eq i8 %64, 40
  br i1 %72, label %73, label %149

73:                                               ; preds = %71, %70, %70, %70, %70, %70, %70
  %74 = ptrtoint i8* %66 to i64
  %75 = sub i64 %68, %74
  %76 = icmp sgt i64 %75, 2
  br i1 %76, label %77, label %113

77:                                               ; preds = %73
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %59) #12
  store i32 -1431655766, i32* %4, align 4
  %78 = load i8, i8* %66, align 1
  %79 = icmp eq i8 %78, 0
  br i1 %79, label %108, label %80

80:                                               ; preds = %77
  %81 = getelementptr inbounds i8, i8* %66, i64 1
  %82 = zext i8 %78 to i64
  %83 = getelementptr inbounds [256 x i8], [256 x i8]* @_ZN3WTF19kASCIICaseFoldTableE, i64 0, i64 %82
  %84 = load i8, i8* %83, align 1
  store i8 %84, i8* %59, align 4
  %85 = load i8, i8* %81, align 1
  %86 = icmp eq i8 %85, 0
  br i1 %86, label %108, label %95

87:                                               ; preds = %102
  %88 = ptrtoint i8* %106 to i64
  %89 = trunc i64 %88 to i32
  %90 = sub i32 %89, ptrtoint ([37 x i8]* @.str.5 to i32)
  %91 = srem i32 %90, 3
  %92 = icmp eq i32 %91, 0
  %93 = sdiv i32 %90, 3
  br i1 %92, label %108, label %94

94:                                               ; preds = %102, %87
  br label %108

95:                                               ; preds = %80
  %96 = getelementptr inbounds i8, i8* %66, i64 2
  %97 = zext i8 %85 to i64
  %98 = getelementptr inbounds [256 x i8], [256 x i8]* @_ZN3WTF19kASCIICaseFoldTableE, i64 0, i64 %97
  %99 = load i8, i8* %98, align 1
  store i8 %99, i8* %60, align 1
  %100 = load i8, i8* %96, align 1
  %101 = icmp eq i8 %100, 0
  br i1 %101, label %108, label %102

102:                                              ; preds = %95
  %103 = zext i8 %100 to i64
  %104 = getelementptr inbounds [256 x i8], [256 x i8]* @_ZN3WTF19kASCIICaseFoldTableE, i64 0, i64 %103
  %105 = load i8, i8* %104, align 1
  store i8 %105, i8* %61, align 2
  store i8 0, i8* %62, align 1
  %106 = call i8* @strstr(i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.str.5, i64 0, i64 0), i8* nonnull %59) #13
  %107 = icmp eq i8* %106, null
  br i1 %107, label %94, label %87

108:                                              ; preds = %95, %94, %87, %80, %77
  %109 = phi i32 [ -1, %94 ], [ %93, %87 ], [ -1, %95 ], [ -1, %80 ], [ -1, %77 ]
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %59) #12
  %110 = sext i32 %109 to i64
  %111 = load i8, i8* %65, align 1
  %112 = icmp eq i8 %111, 0
  br i1 %112, label %145, label %113

113:                                              ; preds = %108, %73
  %114 = phi i64 [ %110, %108 ], [ %67, %73 ]
  %115 = phi i8 [ %111, %108 ], [ %64, %73 ]
  br label %116

116:                                              ; preds = %137, %113
  %117 = phi i64 [ %140, %137 ], [ %68, %113 ]
  %118 = phi i8 [ %141, %137 ], [ %115, %113 ]
  %119 = phi i8* [ %139, %137 ], [ %65, %113 ]
  %120 = phi i32 [ %138, %137 ], [ 0, %113 ]
  %121 = icmp slt i8 %118, 33
  br i1 %121, label %122, label %125

122:                                              ; preds = %116
  %123 = icmp eq i32 %120, 0
  br i1 %123, label %124, label %137

124:                                              ; preds = %122
  switch i8 %118, label %145 [
    i8 32, label %137
    i8 13, label %137
    i8 12, label %137
    i8 11, label %137
    i8 10, label %137
    i8 9, label %137
  ]

125:                                              ; preds = %116
  %126 = icmp eq i8 %118, 40
  br i1 %126, label %127, label %129

127:                                              ; preds = %125
  %128 = add nsw i32 %120, 1
  br label %137

129:                                              ; preds = %125
  %130 = icmp eq i8 %118, 41
  %131 = icmp sgt i32 %120, 0
  %132 = and i1 %130, %131
  br i1 %132, label %133, label %135

133:                                              ; preds = %129
  %134 = add nsw i32 %120, -1
  br label %137

135:                                              ; preds = %129
  %136 = icmp eq i32 %120, 0
  br i1 %136, label %145, label %137

137:                                              ; preds = %135, %133, %127, %124, %124, %124, %124, %124, %124, %122
  %138 = phi i32 [ %128, %127 ], [ %134, %133 ], [ %120, %135 ], [ 0, %124 ], [ %120, %122 ], [ 0, %124 ], [ 0, %124 ], [ 0, %124 ], [ 0, %124 ], [ 0, %124 ]
  %139 = getelementptr inbounds i8, i8* %119, i64 1
  %140 = ptrtoint i8* %139 to i64
  %141 = load i8, i8* %139, align 1
  %142 = icmp eq i8 %141, 0
  br i1 %142, label %143, label %116

143:                                              ; preds = %137
  %144 = ptrtoint i8* %139 to i64
  br label %145

145:                                              ; preds = %135, %124, %143, %108
  %146 = phi i64 [ %110, %108 ], [ %114, %143 ], [ %114, %124 ], [ %114, %135 ]
  %147 = phi i64 [ %68, %108 ], [ %144, %143 ], [ %117, %124 ], [ %117, %135 ]
  %148 = inttoptr i64 %147 to i8*
  br label %152

149:                                              ; preds = %71, %70
  %150 = getelementptr inbounds i8, i8* %65, i64 1
  %151 = ptrtoint i8* %150 to i64
  br label %152

152:                                              ; preds = %149, %145
  %153 = phi i8* [ %150, %149 ], [ %148, %145 ]
  %154 = phi i64 [ %151, %149 ], [ %147, %145 ]
  %155 = phi i64 [ %67, %149 ], [ %146, %145 ]
  %156 = phi i8* [ %66, %149 ], [ %148, %145 ]
  %157 = load i8, i8* %153, align 1
  %158 = icmp eq i8 %157, 0
  %159 = add i8 %157, -48
  %160 = icmp ult i8 %159, 10
  %161 = or i1 %158, %160
  br i1 %161, label %162, label %63

162:                                              ; preds = %152
  %163 = icmp ne i64 %155, -1
  %164 = icmp eq i8* %156, %153
  %165 = or i1 %163, %164
  br i1 %165, label %206, label %166

166:                                              ; preds = %162
  %167 = bitcast i32* %3 to [4 x i8]*
  %168 = bitcast i32* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %168) #12
  %169 = getelementptr inbounds [4 x i8], [4 x i8]* %167, i64 0, i64 1
  %170 = getelementptr inbounds [4 x i8], [4 x i8]* %167, i64 0, i64 2
  %171 = getelementptr inbounds [4 x i8], [4 x i8]* %167, i64 0, i64 3
  store i32 -1431655766, i32* %3, align 4
  %172 = load i8, i8* %156, align 1
  %173 = icmp eq i8 %172, 0
  br i1 %173, label %202, label %174

174:                                              ; preds = %166
  %175 = getelementptr inbounds i8, i8* %156, i64 1
  %176 = zext i8 %172 to i64
  %177 = getelementptr inbounds [256 x i8], [256 x i8]* @_ZN3WTF19kASCIICaseFoldTableE, i64 0, i64 %176
  %178 = load i8, i8* %177, align 1
  store i8 %178, i8* %168, align 4
  %179 = load i8, i8* %175, align 1
  %180 = icmp eq i8 %179, 0
  br i1 %180, label %202, label %189

181:                                              ; preds = %196
  %182 = ptrtoint i8* %200 to i64
  %183 = trunc i64 %182 to i32
  %184 = sub i32 %183, ptrtoint ([37 x i8]* @.str.5 to i32)
  %185 = srem i32 %184, 3
  %186 = icmp eq i32 %185, 0
  %187 = sdiv i32 %184, 3
  br i1 %186, label %202, label %188

188:                                              ; preds = %196, %181
  br label %202

189:                                              ; preds = %174
  %190 = getelementptr inbounds i8, i8* %156, i64 2
  %191 = zext i8 %179 to i64
  %192 = getelementptr inbounds [256 x i8], [256 x i8]* @_ZN3WTF19kASCIICaseFoldTableE, i64 0, i64 %191
  %193 = load i8, i8* %192, align 1
  store i8 %193, i8* %169, align 1
  %194 = load i8, i8* %190, align 1
  %195 = icmp eq i8 %194, 0
  br i1 %195, label %202, label %196

196:                                              ; preds = %189
  %197 = zext i8 %194 to i64
  %198 = getelementptr inbounds [256 x i8], [256 x i8]* @_ZN3WTF19kASCIICaseFoldTableE, i64 0, i64 %197
  %199 = load i8, i8* %198, align 1
  store i8 %199, i8* %170, align 2
  store i8 0, i8* %171, align 1
  %200 = call i8* @strstr(i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.str.5, i64 0, i64 0), i8* nonnull %168) #13
  %201 = icmp eq i8* %200, null
  br i1 %201, label %188, label %181

202:                                              ; preds = %189, %188, %181, %174, %166
  %203 = phi i32 [ -1, %188 ], [ %187, %181 ], [ -1, %189 ], [ -1, %174 ], [ -1, %166 ]
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %168) #12
  %204 = sext i32 %203 to i64
  %205 = load i8, i8* %153, align 1
  br label %206

206:                                              ; preds = %202, %162, %49
  %207 = phi i8* [ %153, %162 ], [ %153, %202 ], [ %51, %49 ]
  %208 = phi i64 [ %154, %162 ], [ %154, %202 ], [ %50, %49 ]
  %209 = phi i8 [ %157, %162 ], [ %205, %202 ], [ %52, %49 ]
  %210 = phi i64 [ %155, %162 ], [ %204, %202 ], [ -1, %49 ]
  %211 = icmp eq i8 %209, 0
  br i1 %211, label %243, label %212

212:                                              ; preds = %206, %233
  %213 = phi i64 [ %236, %233 ], [ %208, %206 ]
  %214 = phi i8 [ %237, %233 ], [ %209, %206 ]
  %215 = phi i8* [ %235, %233 ], [ %207, %206 ]
  %216 = phi i32 [ %234, %233 ], [ 0, %206 ]
  %217 = icmp slt i8 %214, 33
  br i1 %217, label %218, label %221

218:                                              ; preds = %212
  %219 = icmp eq i32 %216, 0
  br i1 %219, label %220, label %233

220:                                              ; preds = %218
  switch i8 %214, label %241 [
    i8 32, label %233
    i8 13, label %233
    i8 12, label %233
    i8 11, label %233
    i8 10, label %233
    i8 9, label %233
  ]

221:                                              ; preds = %212
  %222 = icmp eq i8 %214, 40
  br i1 %222, label %223, label %225

223:                                              ; preds = %221
  %224 = add nsw i32 %216, 1
  br label %233

225:                                              ; preds = %221
  %226 = icmp eq i8 %214, 41
  %227 = icmp sgt i32 %216, 0
  %228 = and i1 %226, %227
  br i1 %228, label %229, label %231

229:                                              ; preds = %225
  %230 = add nsw i32 %216, -1
  br label %233

231:                                              ; preds = %225
  %232 = icmp eq i32 %216, 0
  br i1 %232, label %239, label %233

233:                                              ; preds = %231, %229, %223, %220, %220, %220, %220, %220, %220, %218
  %234 = phi i32 [ %224, %223 ], [ %230, %229 ], [ %216, %231 ], [ 0, %220 ], [ %216, %218 ], [ 0, %220 ], [ 0, %220 ], [ 0, %220 ], [ 0, %220 ], [ 0, %220 ]
  %235 = getelementptr inbounds i8, i8* %215, i64 1
  %236 = ptrtoint i8* %235 to i64
  %237 = load i8, i8* %235, align 1
  %238 = icmp eq i8 %237, 0
  br i1 %238, label %1098, label %212

239:                                              ; preds = %231
  %240 = inttoptr i64 %213 to i8*
  br label %243

241:                                              ; preds = %220
  %242 = inttoptr i64 %213 to i8*
  br label %243

243:                                              ; preds = %241, %239, %206
  %244 = phi i8* [ %242, %241 ], [ %240, %239 ], [ %207, %206 ]
  %245 = load i8, i8* %244, align 1
  %246 = icmp eq i8 %245, 0
  br i1 %246, label %1098, label %247

247:                                              ; preds = %243
  %248 = bitcast i8** %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %248) #12
  store i8* inttoptr (i64 -6148914691236517206 to i8*), i8** %5, align 8
  %249 = call i64 @strtoll(i8* %244, i8** nonnull %5, i32 10) #12
  %250 = load i8*, i8** %5, align 8
  %251 = icmp eq i8* %250, %244
  %252 = add i64 %249, -9223372036854775807
  %253 = icmp ult i64 %252, 2
  %254 = or i1 %251, %253
  br i1 %254, label %1027, label %255

255:                                              ; preds = %247
  %256 = load i8, i8* %250, align 1
  %257 = icmp eq i8 %256, 0
  %258 = icmp slt i64 %249, 0
  %259 = or i1 %258, %257
  br i1 %259, label %1027, label %260

260:                                              ; preds = %255
  %261 = icmp sgt i64 %249, 31
  %262 = icmp eq i8 %256, 47
  br i1 %261, label %263, label %295

263:                                              ; preds = %260
  br i1 %262, label %264, label %1027

264:                                              ; preds = %263
  %265 = getelementptr inbounds i8, i8* %250, i64 1
  %266 = load i8, i8* %265, align 1
  %267 = icmp ne i8 %266, 0
  %268 = icmp slt i64 %249, 2147483647
  %269 = and i1 %268, %267
  br i1 %269, label %270, label %1027

270:                                              ; preds = %264
  %271 = trunc i64 %249 to i32
  %272 = call i64 @strtoll(i8* %265, i8** nonnull %5, i32 10) #12
  %273 = load i8*, i8** %5, align 8
  %274 = icmp eq i8* %273, %265
  %275 = add i64 %272, -9223372036854775807
  %276 = icmp ult i64 %275, 2
  %277 = or i1 %274, %276
  br i1 %277, label %1027, label %278

278:                                              ; preds = %270
  %279 = add nsw i64 %272, -1
  %280 = getelementptr inbounds i8, i8* %273, i64 1
  %281 = load i8, i8* %273, align 1
  %282 = icmp eq i8 %281, 47
  br i1 %282, label %283, label %1027

283:                                              ; preds = %278
  %284 = load i8, i8* %280, align 1
  %285 = icmp eq i8 %284, 0
  br i1 %285, label %1027, label %286

286:                                              ; preds = %283
  %287 = call i64 @strtoll(i8* %280, i8** nonnull %5, i32 10) #12
  %288 = load i8*, i8** %5, align 8
  %289 = icmp eq i8* %288, %280
  %290 = add i64 %287, -9223372036854775807
  %291 = icmp ult i64 %290, 2
  %292 = or i1 %289, %291
  br i1 %292, label %1027, label %293

293:                                              ; preds = %286
  %294 = ptrtoint i8* %288 to i64
  br label %414

295:                                              ; preds = %260
  %296 = icmp eq i64 %210, -1
  %297 = and i1 %296, %262
  br i1 %297, label %298, label %318

298:                                              ; preds = %295
  %299 = getelementptr inbounds i8, i8* %250, i64 1
  %300 = call i64 @strtoll(i8* %299, i8** nonnull %5, i32 10) #12
  %301 = load i8*, i8** %5, align 8
  %302 = icmp eq i8* %301, %299
  %303 = add i64 %300, -9223372036854775807
  %304 = icmp ult i64 %303, 2
  %305 = or i1 %302, %304
  %306 = add nsw i64 %300, -1
  %307 = icmp ugt i64 %306, 30
  %308 = or i1 %307, %305
  br i1 %308, label %1027, label %309

309:                                              ; preds = %298
  %310 = add nsw i64 %249, -1
  %311 = load i8, i8* %301, align 1
  %312 = icmp eq i8 %311, 47
  %313 = getelementptr inbounds i8, i8* %301, i64 1
  %314 = select i1 %312, i8* %313, i8* %301
  %315 = ptrtoint i8* %314 to i64
  %316 = load i8, i8* %314, align 1
  %317 = icmp eq i8 %316, 0
  br i1 %317, label %1027, label %414

318:                                              ; preds = %295
  %319 = icmp eq i8 %256, 45
  %320 = getelementptr inbounds i8, i8* %250, i64 1
  %321 = select i1 %319, i8* %320, i8* %250
  %322 = ptrtoint i8* %321 to i64
  %323 = load i8, i8* %321, align 1
  %324 = icmp eq i8 %323, 0
  br i1 %324, label %354, label %325

325:                                              ; preds = %318, %346
  %326 = phi i64 [ %349, %346 ], [ %322, %318 ]
  %327 = phi i8 [ %350, %346 ], [ %323, %318 ]
  %328 = phi i8* [ %348, %346 ], [ %321, %318 ]
  %329 = phi i32 [ %347, %346 ], [ 0, %318 ]
  %330 = icmp slt i8 %327, 33
  br i1 %330, label %331, label %334

331:                                              ; preds = %325
  %332 = icmp eq i32 %329, 0
  br i1 %332, label %333, label %346

333:                                              ; preds = %331
  switch i8 %327, label %354 [
    i8 32, label %346
    i8 13, label %346
    i8 12, label %346
    i8 11, label %346
    i8 10, label %346
    i8 9, label %346
  ]

334:                                              ; preds = %325
  %335 = icmp eq i8 %327, 40
  br i1 %335, label %336, label %338

336:                                              ; preds = %334
  %337 = add nsw i32 %329, 1
  br label %346

338:                                              ; preds = %334
  %339 = icmp eq i8 %327, 41
  %340 = icmp sgt i32 %329, 0
  %341 = and i1 %339, %340
  br i1 %341, label %342, label %344

342:                                              ; preds = %338
  %343 = add nsw i32 %329, -1
  br label %346

344:                                              ; preds = %338
  %345 = icmp eq i32 %329, 0
  br i1 %345, label %354, label %346

346:                                              ; preds = %344, %342, %336, %333, %333, %333, %333, %333, %333, %331
  %347 = phi i32 [ %337, %336 ], [ %343, %342 ], [ %329, %344 ], [ 0, %333 ], [ %329, %331 ], [ 0, %333 ], [ 0, %333 ], [ 0, %333 ], [ 0, %333 ], [ 0, %333 ]
  %348 = getelementptr inbounds i8, i8* %328, i64 1
  %349 = ptrtoint i8* %348 to i64
  %350 = load i8, i8* %348, align 1
  %351 = icmp eq i8 %350, 0
  br i1 %351, label %352, label %325

352:                                              ; preds = %346
  %353 = ptrtoint i8* %348 to i64
  br label %354

354:                                              ; preds = %344, %333, %352, %318
  %355 = phi i64 [ %322, %318 ], [ %353, %352 ], [ %326, %333 ], [ %326, %344 ]
  %356 = inttoptr i64 %355 to i8*
  %357 = load i8, i8* %356, align 1
  %358 = icmp eq i8 %357, 44
  %359 = getelementptr inbounds i8, i8* %356, i64 1
  %360 = ptrtoint i8* %359 to i64
  %361 = select i1 %358, i64 %360, i64 %355
  br i1 %296, label %362, label %414

362:                                              ; preds = %354
  %363 = inttoptr i64 %361 to i8*
  %364 = bitcast i32* %2 to [4 x i8]*
  %365 = bitcast i32* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %365) #12
  %366 = getelementptr inbounds [4 x i8], [4 x i8]* %364, i64 0, i64 1
  %367 = getelementptr inbounds [4 x i8], [4 x i8]* %364, i64 0, i64 2
  %368 = getelementptr inbounds [4 x i8], [4 x i8]* %364, i64 0, i64 3
  store i32 -1431655766, i32* %2, align 4
  %369 = load i8, i8* %363, align 1
  %370 = icmp eq i8 %369, 0
  br i1 %370, label %398, label %371

371:                                              ; preds = %362
  %372 = getelementptr inbounds i8, i8* %363, i64 1
  %373 = zext i8 %369 to i64
  %374 = getelementptr inbounds [256 x i8], [256 x i8]* @_ZN3WTF19kASCIICaseFoldTableE, i64 0, i64 %373
  %375 = load i8, i8* %374, align 1
  store i8 %375, i8* %365, align 4
  %376 = load i8, i8* %372, align 1
  %377 = icmp eq i8 %376, 0
  br i1 %377, label %398, label %385

378:                                              ; preds = %392
  %379 = ptrtoint i8* %396 to i64
  %380 = trunc i64 %379 to i32
  %381 = sub i32 %380, ptrtoint ([37 x i8]* @.str.5 to i32)
  %382 = srem i32 %381, 3
  %383 = sdiv i32 %381, 3
  %384 = icmp eq i32 %382, 0
  br i1 %384, label %399, label %398

385:                                              ; preds = %371
  %386 = getelementptr inbounds i8, i8* %363, i64 2
  %387 = zext i8 %376 to i64
  %388 = getelementptr inbounds [256 x i8], [256 x i8]* @_ZN3WTF19kASCIICaseFoldTableE, i64 0, i64 %387
  %389 = load i8, i8* %388, align 1
  store i8 %389, i8* %366, align 1
  %390 = load i8, i8* %386, align 1
  %391 = icmp eq i8 %390, 0
  br i1 %391, label %398, label %392

392:                                              ; preds = %385
  %393 = zext i8 %390 to i64
  %394 = getelementptr inbounds [256 x i8], [256 x i8]* @_ZN3WTF19kASCIICaseFoldTableE, i64 0, i64 %393
  %395 = load i8, i8* %394, align 1
  store i8 %395, i8* %367, align 2
  store i8 0, i8* %368, align 1
  %396 = call i8* @strstr(i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.str.5, i64 0, i64 0), i8* nonnull %365) #13
  %397 = icmp eq i8* %396, null
  br i1 %397, label %398, label %378

398:                                              ; preds = %392, %385, %378, %371, %362
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %365) #12
  br label %1027

399:                                              ; preds = %378
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %365) #12
  %400 = sext i32 %383 to i64
  %401 = add i32 %381, 5
  %402 = icmp ult i32 %401, 3
  br i1 %402, label %1027, label %403

403:                                              ; preds = %399, %409
  %404 = phi i8* [ %410, %409 ], [ %363, %399 ]
  %405 = load i8, i8* %404, align 1
  switch i8 %405, label %406 [
    i8 0, label %1027
    i8 45, label %411
    i8 44, label %411
  ]

406:                                              ; preds = %403
  %407 = icmp slt i8 %405, 33
  br i1 %407, label %408, label %409

408:                                              ; preds = %406
  switch i8 %405, label %409 [
    i8 32, label %411
    i8 13, label %411
    i8 12, label %411
    i8 11, label %411
    i8 10, label %411
    i8 9, label %411
  ]

409:                                              ; preds = %408, %406
  %410 = getelementptr inbounds i8, i8* %404, i64 1
  br label %403

411:                                              ; preds = %408, %408, %408, %408, %408, %408, %403, %403
  %412 = getelementptr inbounds i8, i8* %404, i64 1
  %413 = ptrtoint i8* %412 to i64
  br label %414

414:                                              ; preds = %411, %354, %309, %293
  %415 = phi i8* [ %288, %293 ], [ %301, %309 ], [ %250, %411 ], [ %250, %354 ]
  %416 = phi i64 [ %294, %293 ], [ %315, %309 ], [ %413, %411 ], [ %361, %354 ]
  %417 = phi i64 [ %279, %293 ], [ %310, %309 ], [ %400, %411 ], [ %210, %354 ]
  %418 = phi i64 [ %287, %293 ], [ %300, %309 ], [ %249, %411 ], [ %249, %354 ]
  %419 = phi i32 [ %271, %293 ], [ 0, %309 ], [ 0, %411 ], [ 0, %354 ]
  %420 = icmp ugt i64 %417, 11
  br i1 %420, label %1027, label %421

421:                                              ; preds = %414
  %422 = icmp slt i32 %419, 1
  br i1 %422, label %423, label %436

423:                                              ; preds = %421
  %424 = inttoptr i64 %416 to i8*
  %425 = load i8, i8* %424, align 1
  %426 = icmp eq i8 %425, 0
  br i1 %426, label %436, label %427

427:                                              ; preds = %423
  %428 = call i64 @strtol(i8* %424, i8** nonnull %5, i32 10) #12
  %429 = load i8*, i8** %5, align 8
  %430 = icmp ne i8* %429, %424
  %431 = add i64 %428, 2147483647
  %432 = icmp ult i64 %431, 4294967294
  %433 = and i1 %432, %430
  br i1 %433, label %434, label %1027

434:                                              ; preds = %427
  %435 = trunc i64 %428 to i32
  br label %436

436:                                              ; preds = %434, %423, %421
  %437 = phi i8* [ %415, %423 ], [ %415, %421 ], [ %429, %434 ]
  %438 = phi i32 [ 0, %423 ], [ %419, %421 ], [ %435, %434 ]
  %439 = load i8, i8* %437, align 1
  %440 = icmp eq i8 %439, 0
  br i1 %440, label %441, label %443

441:                                              ; preds = %436
  %442 = ptrtoint i8* %437 to i64
  br label %692

443:                                              ; preds = %436
  %444 = icmp slt i8 %439, 33
  br i1 %444, label %445, label %446

445:                                              ; preds = %443
  switch i8 %439, label %1027 [
    i8 32, label %447
    i8 13, label %447
    i8 12, label %447
    i8 11, label %447
    i8 10, label %447
    i8 9, label %447
  ]

446:                                              ; preds = %443
  switch i8 %439, label %1027 [
    i8 44, label %447
    i8 58, label %481
  ]

447:                                              ; preds = %446, %445, %445, %445, %445, %445, %445
  %448 = getelementptr inbounds i8, i8* %437, i64 1
  store i8* %448, i8** %5, align 8
  %449 = ptrtoint i8* %448 to i64
  %450 = load i8, i8* %448, align 1
  %451 = icmp eq i8 %450, 0
  br i1 %451, label %481, label %452

452:                                              ; preds = %447, %473
  %453 = phi i64 [ %476, %473 ], [ %449, %447 ]
  %454 = phi i8 [ %477, %473 ], [ %450, %447 ]
  %455 = phi i8* [ %475, %473 ], [ %448, %447 ]
  %456 = phi i32 [ %474, %473 ], [ 0, %447 ]
  %457 = icmp slt i8 %454, 33
  br i1 %457, label %458, label %461

458:                                              ; preds = %452
  %459 = icmp eq i32 %456, 0
  br i1 %459, label %460, label %473

460:                                              ; preds = %458
  switch i8 %454, label %481 [
    i8 32, label %473
    i8 13, label %473
    i8 12, label %473
    i8 11, label %473
    i8 10, label %473
    i8 9, label %473
  ]

461:                                              ; preds = %452
  %462 = icmp eq i8 %454, 40
  br i1 %462, label %463, label %465

463:                                              ; preds = %461
  %464 = add nsw i32 %456, 1
  br label %473

465:                                              ; preds = %461
  %466 = icmp eq i8 %454, 41
  %467 = icmp sgt i32 %456, 0
  %468 = and i1 %466, %467
  br i1 %468, label %469, label %471

469:                                              ; preds = %465
  %470 = add nsw i32 %456, -1
  br label %473

471:                                              ; preds = %465
  %472 = icmp eq i32 %456, 0
  br i1 %472, label %481, label %473

473:                                              ; preds = %471, %469, %463, %460, %460, %460, %460, %460, %460, %458
  %474 = phi i32 [ %464, %463 ], [ %470, %469 ], [ %456, %471 ], [ 0, %460 ], [ %456, %458 ], [ 0, %460 ], [ 0, %460 ], [ 0, %460 ], [ 0, %460 ], [ 0, %460 ]
  %475 = getelementptr inbounds i8, i8* %455, i64 1
  %476 = ptrtoint i8* %475 to i64
  %477 = load i8, i8* %475, align 1
  %478 = icmp eq i8 %477, 0
  br i1 %478, label %479, label %452

479:                                              ; preds = %473
  %480 = ptrtoint i8* %475 to i64
  br label %481

481:                                              ; preds = %471, %460, %479, %447, %446
  %482 = phi i64 [ %416, %446 ], [ %449, %447 ], [ %480, %479 ], [ %453, %460 ], [ %453, %471 ]
  %483 = phi i32 [ -1, %446 ], [ %438, %447 ], [ %438, %479 ], [ %438, %460 ], [ %438, %471 ]
  %484 = inttoptr i64 %482 to i8*
  %485 = call i64 @strtoll(i8* %484, i8** nonnull %5, i32 10) #12
  %486 = load i8*, i8** %5, align 8
  %487 = icmp eq i8* %486, %484
  %488 = add i64 %485, -9223372036854775807
  %489 = icmp ult i64 %488, 2
  %490 = or i1 %487, %489
  %491 = select i1 %490, i64 0, i64 %485
  br i1 %487, label %692, label %492

492:                                              ; preds = %481
  %493 = icmp ugt i64 %491, 23
  br i1 %493, label %1027, label %494

494:                                              ; preds = %492
  %495 = load i8, i8* %486, align 1
  %496 = icmp eq i8 %495, 0
  br i1 %496, label %1027, label %497

497:                                              ; preds = %494
  %498 = getelementptr inbounds i8, i8* %486, i64 1
  %499 = icmp eq i8 %495, 58
  br i1 %499, label %500, label %1027

500:                                              ; preds = %497
  %501 = call i64 @strtoll(i8* %498, i8** nonnull %5, i32 10) #12
  %502 = load i8*, i8** %5, align 8
  %503 = icmp eq i8* %502, %498
  %504 = add i64 %501, -9223372036854775807
  %505 = icmp ult i64 %504, 2
  %506 = or i1 %503, %505
  br i1 %506, label %1027, label %507

507:                                              ; preds = %500
  %508 = ptrtoint i8* %502 to i64
  %509 = icmp ugt i64 %501, 59
  br i1 %509, label %1027, label %510

510:                                              ; preds = %507
  %511 = load i8, i8* %502, align 1
  switch i8 %511, label %512 [
    i8 58, label %515
    i8 0, label %526
  ]

512:                                              ; preds = %510
  %513 = icmp slt i8 %511, 33
  br i1 %513, label %514, label %1027

514:                                              ; preds = %512
  switch i8 %511, label %1027 [
    i8 32, label %526
    i8 13, label %526
    i8 12, label %526
    i8 11, label %526
    i8 10, label %526
    i8 9, label %526
  ]

515:                                              ; preds = %510
  %516 = getelementptr inbounds i8, i8* %502, i64 1
  %517 = call i64 @strtoll(i8* %516, i8** nonnull %5, i32 10) #12
  %518 = load i8*, i8** %5, align 8
  %519 = icmp eq i8* %518, %516
  %520 = add i64 %517, -9223372036854775807
  %521 = icmp ult i64 %520, 2
  %522 = or i1 %519, %521
  br i1 %522, label %1027, label %523

523:                                              ; preds = %515
  %524 = ptrtoint i8* %518 to i64
  %525 = icmp ugt i64 %517, 59
  br i1 %525, label %1027, label %526

526:                                              ; preds = %523, %514, %514, %514, %514, %514, %514, %510
  %527 = phi i64 [ %524, %523 ], [ %508, %514 ], [ %508, %510 ], [ %508, %514 ], [ %508, %514 ], [ %508, %514 ], [ %508, %514 ], [ %508, %514 ]
  %528 = phi i64 [ %517, %523 ], [ 0, %514 ], [ 0, %510 ], [ 0, %514 ], [ 0, %514 ], [ 0, %514 ], [ 0, %514 ], [ 0, %514 ]
  %529 = inttoptr i64 %527 to i8*
  %530 = load i8, i8* %529, align 1
  %531 = icmp eq i8 %530, 0
  br i1 %531, label %561, label %532

532:                                              ; preds = %526, %553
  %533 = phi i64 [ %556, %553 ], [ %527, %526 ]
  %534 = phi i8 [ %557, %553 ], [ %530, %526 ]
  %535 = phi i8* [ %555, %553 ], [ %529, %526 ]
  %536 = phi i32 [ %554, %553 ], [ 0, %526 ]
  %537 = icmp slt i8 %534, 33
  br i1 %537, label %538, label %541

538:                                              ; preds = %532
  %539 = icmp eq i32 %536, 0
  br i1 %539, label %540, label %553

540:                                              ; preds = %538
  switch i8 %534, label %561 [
    i8 32, label %553
    i8 13, label %553
    i8 12, label %553
    i8 11, label %553
    i8 10, label %553
    i8 9, label %553
  ]

541:                                              ; preds = %532
  %542 = icmp eq i8 %534, 40
  br i1 %542, label %543, label %545

543:                                              ; preds = %541
  %544 = add nsw i32 %536, 1
  br label %553

545:                                              ; preds = %541
  %546 = icmp eq i8 %534, 41
  %547 = icmp sgt i32 %536, 0
  %548 = and i1 %546, %547
  br i1 %548, label %549, label %551

549:                                              ; preds = %545
  %550 = add nsw i32 %536, -1
  br label %553

551:                                              ; preds = %545
  %552 = icmp eq i32 %536, 0
  br i1 %552, label %561, label %553

553:                                              ; preds = %551, %549, %543, %540, %540, %540, %540, %540, %540, %538
  %554 = phi i32 [ %544, %543 ], [ %550, %549 ], [ %536, %551 ], [ 0, %540 ], [ %536, %538 ], [ 0, %540 ], [ 0, %540 ], [ 0, %540 ], [ 0, %540 ], [ 0, %540 ]
  %555 = getelementptr inbounds i8, i8* %535, i64 1
  %556 = ptrtoint i8* %555 to i64
  %557 = load i8, i8* %555, align 1
  %558 = icmp eq i8 %557, 0
  br i1 %558, label %559, label %532

559:                                              ; preds = %553
  %560 = ptrtoint i8* %555 to i64
  br label %561

561:                                              ; preds = %551, %540, %559, %526
  %562 = phi i64 [ %527, %526 ], [ %560, %559 ], [ %533, %540 ], [ %533, %551 ]
  %563 = bitcast %"class.WTF::String"* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %563) #12
  %564 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %6, i64 0, i32 0, i32 0
  store %"class.WTF::StringImpl"* inttoptr (i64 -6148914691236517206 to %"class.WTF::StringImpl"*), %"class.WTF::StringImpl"** %564, align 8
  %565 = inttoptr i64 %562 to i8*
  %566 = icmp eq i64 %562, 0
  br i1 %566, label %569, label %567

567:                                              ; preds = %561
  %568 = tail call i64 @strlen(i8* nonnull %565) #13
  br label %569

569:                                              ; preds = %567, %561
  %570 = phi i64 [ %568, %567 ], [ 0, %561 ]
  call void @_ZN3WTF6StringC2EPKcm(%"class.WTF::String"* nonnull %6, i8* %565, i64 %570) #12
  %571 = bitcast %"class.WTF::StringView"* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %571) #12
  %572 = load i64, i64* bitcast (%"class.WTF::StringImpl"** @_ZN3WTF10StringImpl6empty_E to i64*), align 8
  %573 = bitcast %"class.WTF::StringView"* %7 to i64*
  store i64 %572, i64* %573, align 8
  %574 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %7, i64 0, i32 1
  store i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.1, i64 0, i64 0), i8** %574, align 8
  %575 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %7, i64 0, i32 2
  store i32 2, i32* %575, align 8
  %576 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %564, align 8
  %577 = icmp eq %"class.WTF::StringImpl"* %576, null
  br i1 %577, label %583, label %578

578:                                              ; preds = %569
  %579 = call zeroext i1 @_ZNK3WTF10StringImpl27StartsWithIgnoringASCIICaseERKNS_10StringViewE(%"class.WTF::StringImpl"* nonnull %576, %"class.WTF::StringView"* nonnull dereferenceable(24) %7) #12
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %571) #12
  br i1 %579, label %584, label %580

580:                                              ; preds = %578
  %581 = load i64, i64* bitcast (%"class.WTF::StringImpl"** @_ZN3WTF10StringImpl6empty_E to i64*), align 8
  %582 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %564, align 8
  br label %620

583:                                              ; preds = %569
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %571) #12
  br label %620

584:                                              ; preds = %578
  %585 = icmp sgt i64 %491, 12
  br i1 %585, label %672, label %586

586:                                              ; preds = %584
  %587 = icmp eq i64 %491, 12
  %588 = select i1 %587, i64 0, i64 %491
  %589 = getelementptr inbounds i8, i8* %565, i64 2
  %590 = ptrtoint i8* %589 to i64
  %591 = load i8, i8* %589, align 1
  %592 = icmp eq i8 %591, 0
  br i1 %592, label %672, label %593

593:                                              ; preds = %586, %614
  %594 = phi i64 [ %617, %614 ], [ %590, %586 ]
  %595 = phi i8 [ %618, %614 ], [ %591, %586 ]
  %596 = phi i8* [ %616, %614 ], [ %589, %586 ]
  %597 = phi i32 [ %615, %614 ], [ 0, %586 ]
  %598 = icmp slt i8 %595, 33
  br i1 %598, label %599, label %602

599:                                              ; preds = %593
  %600 = icmp eq i32 %597, 0
  br i1 %600, label %601, label %614

601:                                              ; preds = %599
  switch i8 %595, label %672 [
    i8 32, label %614
    i8 13, label %614
    i8 12, label %614
    i8 11, label %614
    i8 10, label %614
    i8 9, label %614
  ]

602:                                              ; preds = %593
  %603 = icmp eq i8 %595, 40
  br i1 %603, label %604, label %606

604:                                              ; preds = %602
  %605 = add nsw i32 %597, 1
  br label %614

606:                                              ; preds = %602
  %607 = icmp eq i8 %595, 41
  %608 = icmp sgt i32 %597, 0
  %609 = and i1 %607, %608
  br i1 %609, label %610, label %612

610:                                              ; preds = %606
  %611 = add nsw i32 %597, -1
  br label %614

612:                                              ; preds = %606
  %613 = icmp eq i32 %597, 0
  br i1 %613, label %672, label %614

614:                                              ; preds = %612, %610, %604, %601, %601, %601, %601, %601, %601, %599
  %615 = phi i32 [ %605, %604 ], [ %611, %610 ], [ %597, %612 ], [ 0, %601 ], [ %597, %599 ], [ 0, %601 ], [ 0, %601 ], [ 0, %601 ], [ 0, %601 ], [ 0, %601 ]
  %616 = getelementptr inbounds i8, i8* %596, i64 1
  %617 = ptrtoint i8* %616 to i64
  %618 = load i8, i8* %616, align 1
  %619 = icmp eq i8 %618, 0
  br i1 %619, label %670, label %593

620:                                              ; preds = %583, %580
  %621 = phi %"class.WTF::StringImpl"* [ %582, %580 ], [ null, %583 ]
  %622 = phi i64 [ %581, %580 ], [ %572, %583 ]
  %623 = bitcast %"class.WTF::StringView"* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %623) #12
  %624 = bitcast %"class.WTF::StringView"* %8 to i64*
  store i64 %622, i64* %624, align 8
  %625 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %8, i64 0, i32 1
  store i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.2, i64 0, i64 0), i8** %625, align 8
  %626 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %8, i64 0, i32 2
  store i32 2, i32* %626, align 8
  %627 = icmp eq %"class.WTF::StringImpl"* %621, null
  br i1 %627, label %630, label %628

628:                                              ; preds = %620
  %629 = call zeroext i1 @_ZNK3WTF10StringImpl27StartsWithIgnoringASCIICaseERKNS_10StringViewE(%"class.WTF::StringImpl"* nonnull %621, %"class.WTF::StringView"* nonnull dereferenceable(24) %8) #12
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %623) #12
  br i1 %629, label %631, label %672

630:                                              ; preds = %620
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %623) #12
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %563) #12
  br label %692

631:                                              ; preds = %628
  %632 = icmp sgt i64 %491, 12
  br i1 %632, label %672, label %633

633:                                              ; preds = %631
  %634 = icmp eq i64 %491, 12
  %635 = add nsw i64 %491, 12
  %636 = select i1 %634, i64 12, i64 %635
  %637 = getelementptr inbounds i8, i8* %565, i64 2
  %638 = ptrtoint i8* %637 to i64
  %639 = load i8, i8* %637, align 1
  %640 = icmp eq i8 %639, 0
  br i1 %640, label %672, label %641

641:                                              ; preds = %633, %662
  %642 = phi i64 [ %665, %662 ], [ %638, %633 ]
  %643 = phi i8 [ %666, %662 ], [ %639, %633 ]
  %644 = phi i8* [ %664, %662 ], [ %637, %633 ]
  %645 = phi i32 [ %663, %662 ], [ 0, %633 ]
  %646 = icmp slt i8 %643, 33
  br i1 %646, label %647, label %650

647:                                              ; preds = %641
  %648 = icmp eq i32 %645, 0
  br i1 %648, label %649, label %662

649:                                              ; preds = %647
  switch i8 %643, label %672 [
    i8 32, label %662
    i8 13, label %662
    i8 12, label %662
    i8 11, label %662
    i8 10, label %662
    i8 9, label %662
  ]

650:                                              ; preds = %641
  %651 = icmp eq i8 %643, 40
  br i1 %651, label %652, label %654

652:                                              ; preds = %650
  %653 = add nsw i32 %645, 1
  br label %662

654:                                              ; preds = %650
  %655 = icmp eq i8 %643, 41
  %656 = icmp sgt i32 %645, 0
  %657 = and i1 %655, %656
  br i1 %657, label %658, label %660

658:                                              ; preds = %654
  %659 = add nsw i32 %645, -1
  br label %662

660:                                              ; preds = %654
  %661 = icmp eq i32 %645, 0
  br i1 %661, label %672, label %662

662:                                              ; preds = %660, %658, %652, %649, %649, %649, %649, %649, %649, %647
  %663 = phi i32 [ %653, %652 ], [ %659, %658 ], [ %645, %660 ], [ 0, %649 ], [ %645, %647 ], [ 0, %649 ], [ 0, %649 ], [ 0, %649 ], [ 0, %649 ], [ 0, %649 ]
  %664 = getelementptr inbounds i8, i8* %644, i64 1
  %665 = ptrtoint i8* %664 to i64
  %666 = load i8, i8* %664, align 1
  %667 = icmp eq i8 %666, 0
  br i1 %667, label %668, label %641

668:                                              ; preds = %662
  %669 = ptrtoint i8* %664 to i64
  br label %672

670:                                              ; preds = %614
  %671 = ptrtoint i8* %616 to i64
  br label %672

672:                                              ; preds = %612, %601, %660, %649, %670, %668, %633, %631, %628, %586, %584
  %673 = phi i64 [ %638, %633 ], [ %562, %631 ], [ %562, %628 ], [ %590, %586 ], [ %562, %584 ], [ %669, %668 ], [ %671, %670 ], [ %642, %649 ], [ %642, %660 ], [ %594, %601 ], [ %594, %612 ]
  %674 = phi i64 [ %636, %633 ], [ %491, %631 ], [ %491, %628 ], [ %588, %586 ], [ %491, %584 ], [ %636, %668 ], [ %588, %670 ], [ %636, %649 ], [ %636, %660 ], [ %588, %601 ], [ %588, %612 ]
  %675 = phi i1 [ true, %633 ], [ false, %631 ], [ true, %628 ], [ true, %586 ], [ false, %584 ], [ true, %668 ], [ true, %670 ], [ true, %649 ], [ true, %660 ], [ true, %601 ], [ true, %612 ]
  %676 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %564, align 8
  %677 = icmp eq %"class.WTF::StringImpl"* %676, null
  br i1 %677, label %691, label %678

678:                                              ; preds = %672
  %679 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %676, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %680 = load atomic i32, i32* %679 monotonic, align 4
  %681 = and i32 %680, 2
  %682 = icmp eq i32 %681, 0
  %683 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %676, i64 0, i32 0
  %684 = load i32, i32* %683, align 4
  br i1 %682, label %685, label %687

685:                                              ; preds = %678
  %686 = add i32 %684, -1
  store i32 %686, i32* %683, align 4
  br label %687

687:                                              ; preds = %685, %678
  %688 = phi i32 [ %686, %685 ], [ %684, %678 ]
  %689 = icmp eq i32 %688, 0
  br i1 %689, label %690, label %691

690:                                              ; preds = %687
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %676) #12
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %563) #12
  br i1 %675, label %692, label %1027

691:                                              ; preds = %687, %672
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %563) #12
  br i1 %675, label %692, label %1027

692:                                              ; preds = %691, %690, %630, %481, %441
  %693 = phi i64 [ %442, %441 ], [ %482, %481 ], [ %673, %691 ], [ %562, %630 ], [ %673, %690 ]
  %694 = phi i32 [ %438, %441 ], [ %483, %481 ], [ %483, %691 ], [ %483, %630 ], [ %483, %690 ]
  %695 = phi i64 [ 0, %441 ], [ 0, %481 ], [ %674, %691 ], [ %491, %630 ], [ %674, %690 ]
  %696 = phi i64 [ 0, %441 ], [ 0, %481 ], [ %501, %691 ], [ %501, %630 ], [ %501, %690 ]
  %697 = phi i64 [ 0, %441 ], [ 0, %481 ], [ %528, %691 ], [ %528, %630 ], [ %528, %690 ]
  %698 = inttoptr i64 %693 to i8*
  %699 = load i8, i8* %698, align 1
  %700 = add i8 %699, -48
  %701 = icmp ult i8 %700, 10
  %702 = icmp eq i32 %694, -1
  %703 = and i1 %702, %701
  br i1 %703, label %704, label %745

704:                                              ; preds = %692
  %705 = call i64 @strtol(i8* %698, i8** nonnull %5, i32 10) #12
  %706 = load i8*, i8** %5, align 8
  %707 = icmp ne i8* %706, %698
  %708 = add i64 %705, 2147483647
  %709 = icmp ult i64 %708, 4294967294
  %710 = and i1 %709, %707
  %711 = ptrtoint i8* %706 to i64
  br i1 %710, label %712, label %1027

712:                                              ; preds = %704
  %713 = trunc i64 %705 to i32
  %714 = load i8, i8* %706, align 1
  %715 = icmp eq i8 %714, 0
  br i1 %715, label %745, label %716

716:                                              ; preds = %712, %737
  %717 = phi i64 [ %740, %737 ], [ %711, %712 ]
  %718 = phi i8 [ %741, %737 ], [ %714, %712 ]
  %719 = phi i8* [ %739, %737 ], [ %706, %712 ]
  %720 = phi i32 [ %738, %737 ], [ 0, %712 ]
  %721 = icmp slt i8 %718, 33
  br i1 %721, label %722, label %725

722:                                              ; preds = %716
  %723 = icmp eq i32 %720, 0
  br i1 %723, label %724, label %737

724:                                              ; preds = %722
  switch i8 %718, label %745 [
    i8 32, label %737
    i8 13, label %737
    i8 12, label %737
    i8 11, label %737
    i8 10, label %737
    i8 9, label %737
  ]

725:                                              ; preds = %716
  %726 = icmp eq i8 %718, 40
  br i1 %726, label %727, label %729

727:                                              ; preds = %725
  %728 = add nsw i32 %720, 1
  br label %737

729:                                              ; preds = %725
  %730 = icmp eq i8 %718, 41
  %731 = icmp sgt i32 %720, 0
  %732 = and i1 %730, %731
  br i1 %732, label %733, label %735

733:                                              ; preds = %729
  %734 = add nsw i32 %720, -1
  br label %737

735:                                              ; preds = %729
  %736 = icmp eq i32 %720, 0
  br i1 %736, label %745, label %737

737:                                              ; preds = %735, %733, %727, %724, %724, %724, %724, %724, %724, %722
  %738 = phi i32 [ %728, %727 ], [ %734, %733 ], [ %720, %735 ], [ 0, %724 ], [ %720, %722 ], [ 0, %724 ], [ 0, %724 ], [ 0, %724 ], [ 0, %724 ], [ 0, %724 ]
  %739 = getelementptr inbounds i8, i8* %719, i64 1
  %740 = ptrtoint i8* %739 to i64
  %741 = load i8, i8* %739, align 1
  %742 = icmp eq i8 %741, 0
  br i1 %742, label %743, label %716

743:                                              ; preds = %737
  %744 = ptrtoint i8* %739 to i64
  br label %745

745:                                              ; preds = %735, %724, %743, %712, %692
  %746 = phi i64 [ %693, %692 ], [ %711, %712 ], [ %744, %743 ], [ %717, %724 ], [ %717, %735 ]
  %747 = phi i32 [ %694, %692 ], [ %713, %712 ], [ %713, %743 ], [ %713, %724 ], [ %713, %735 ]
  %748 = inttoptr i64 %746 to i8*
  %749 = load i8, i8* %748, align 1
  %750 = icmp eq i8 %749, 0
  br i1 %750, label %970, label %751

751:                                              ; preds = %745
  %752 = bitcast %"class.WTF::String"* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %752) #12
  %753 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %9, i64 0, i32 0, i32 0
  store %"class.WTF::StringImpl"* inttoptr (i64 -6148914691236517206 to %"class.WTF::StringImpl"*), %"class.WTF::StringImpl"** %753, align 8
  %754 = icmp eq i64 %746, 0
  br i1 %754, label %757, label %755

755:                                              ; preds = %751
  %756 = call i64 @strlen(i8* nonnull %748) #13
  br label %757

757:                                              ; preds = %755, %751
  %758 = phi i64 [ %756, %755 ], [ 0, %751 ]
  call void @_ZN3WTF6StringC2EPKcm(%"class.WTF::String"* nonnull %9, i8* %748, i64 %758) #12
  %759 = bitcast %"class.WTF::StringView"* %10 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %759) #12
  %760 = load i64, i64* bitcast (%"class.WTF::StringImpl"** @_ZN3WTF10StringImpl6empty_E to i64*), align 8
  %761 = bitcast %"class.WTF::StringView"* %10 to i64*
  store i64 %760, i64* %761, align 8
  %762 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %10, i64 0, i32 1
  store i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.3, i64 0, i64 0), i8** %762, align 8
  %763 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %10, i64 0, i32 2
  store i32 3, i32* %763, align 8
  %764 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %753, align 8
  %765 = icmp eq %"class.WTF::StringImpl"* %764, null
  br i1 %765, label %769, label %766

766:                                              ; preds = %757
  %767 = call zeroext i1 @_ZNK3WTF10StringImpl27StartsWithIgnoringASCIICaseERKNS_10StringViewE(%"class.WTF::StringImpl"* nonnull %764, %"class.WTF::StringView"* nonnull dereferenceable(24) %10) #12
  %768 = bitcast %"class.WTF::StringView"* %11 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %768) #12
  br i1 %767, label %785, label %774

769:                                              ; preds = %757
  %770 = bitcast %"class.WTF::StringView"* %11 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %770) #12
  %771 = bitcast %"class.WTF::StringView"* %11 to i64*
  store i64 %760, i64* %771, align 8
  %772 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %11, i64 0, i32 1
  store i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.4, i64 0, i64 0), i8** %772, align 8
  %773 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %11, i64 0, i32 2
  store i32 3, i32* %773, align 8
  br label %783

774:                                              ; preds = %766
  %775 = load i64, i64* bitcast (%"class.WTF::StringImpl"** @_ZN3WTF10StringImpl6empty_E to i64*), align 8
  %776 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %753, align 8
  %777 = bitcast %"class.WTF::StringView"* %11 to i64*
  store i64 %775, i64* %777, align 8
  %778 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %11, i64 0, i32 1
  store i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.4, i64 0, i64 0), i8** %778, align 8
  %779 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %11, i64 0, i32 2
  store i32 3, i32* %779, align 8
  %780 = icmp eq %"class.WTF::StringImpl"* %776, null
  br i1 %780, label %783, label %781

781:                                              ; preds = %774
  %782 = call zeroext i1 @_ZNK3WTF10StringImpl27StartsWithIgnoringASCIICaseERKNS_10StringViewE(%"class.WTF::StringImpl"* nonnull %776, %"class.WTF::StringView"* nonnull dereferenceable(24) %11) #12
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %768) #12
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %759) #12
  br i1 %782, label %786, label %789

783:                                              ; preds = %774, %769
  %784 = phi i8* [ %770, %769 ], [ %768, %774 ]
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %784) #12
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %759) #12
  br label %789

785:                                              ; preds = %766
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %768) #12
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %759) #12
  br label %786

786:                                              ; preds = %785, %781
  %787 = getelementptr inbounds i8, i8* %748, i64 3
  %788 = ptrtoint i8* %787 to i64
  br label %789

789:                                              ; preds = %786, %783, %781
  %790 = phi i8 [ 0, %783 ], [ 1, %786 ], [ 0, %781 ]
  %791 = phi i8* [ %748, %783 ], [ %787, %786 ], [ %748, %781 ]
  %792 = phi i64 [ %746, %783 ], [ %788, %786 ], [ %746, %781 ]
  %793 = load i8, i8* %791, align 1
  switch i8 %793, label %842 [
    i8 43, label %794
    i8 45, label %794
  ]

794:                                              ; preds = %789, %789
  %795 = call i64 @strtol(i8* %791, i8** nonnull %5, i32 10) #12
  %796 = load i8*, i8** %5, align 8
  %797 = icmp ne i8* %796, %791
  %798 = add i64 %795, 2147483647
  %799 = icmp ult i64 %798, 4294967294
  %800 = and i1 %799, %797
  %801 = ptrtoint i8* %796 to i64
  br i1 %800, label %802, label %913

802:                                              ; preds = %794
  %803 = trunc i64 %795 to i32
  %804 = add i32 %803, 9959
  %805 = icmp ugt i32 %804, 19918
  br i1 %805, label %913, label %806

806:                                              ; preds = %802
  %807 = icmp slt i32 %803, 0
  %808 = select i1 %807, i32 -1, i32 1
  %809 = sub nsw i32 0, %803
  %810 = select i1 %807, i32 %809, i32 %803
  %811 = load i8, i8* %796, align 1
  %812 = icmp eq i8 %811, 58
  br i1 %812, label %827, label %813

813:                                              ; preds = %806
  %814 = icmp sgt i32 %810, 23
  br i1 %814, label %815, label %824

815:                                              ; preds = %813
  %816 = trunc i32 %810 to i16
  %817 = udiv i16 %816, 100
  %818 = mul nuw i16 %817, 60
  %819 = zext i16 %818 to i32
  %820 = urem i16 %816, 100
  %821 = zext i16 %820 to i32
  %822 = add nuw nsw i32 %819, %821
  %823 = mul nsw i32 %822, %808
  br label %913

824:                                              ; preds = %813
  %825 = mul nsw i32 %810, 60
  %826 = mul nsw i32 %825, %808
  br label %913

827:                                              ; preds = %806
  %828 = getelementptr inbounds i8, i8* %796, i64 1
  %829 = ptrtoint i8* %828 to i64
  %830 = call i64 @strtol(i8* %828, i8** nonnull %5, i32 10) #12
  %831 = load i8*, i8** %5, align 8
  %832 = icmp ne i8* %831, %828
  %833 = add i64 %830, 2147483647
  %834 = icmp ult i64 %833, 4294967294
  %835 = and i1 %834, %832
  br i1 %835, label %836, label %913

836:                                              ; preds = %827
  %837 = ptrtoint i8* %831 to i64
  %838 = trunc i64 %830 to i32
  %839 = mul nsw i32 %810, 60
  %840 = add nsw i32 %839, %838
  %841 = mul nsw i32 %840, %808
  br label %913

842:                                              ; preds = %789
  %843 = bitcast %"class.WTF::String"* %12 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %843) #12
  %844 = icmp eq i64 %792, 0
  br i1 %844, label %847, label %845

845:                                              ; preds = %842
  %846 = call i64 @strlen(i8* nonnull %791) #13
  br label %847

847:                                              ; preds = %845, %842
  %848 = phi i64 [ %846, %845 ], [ 0, %842 ]
  call void @_ZN3WTF6StringC2EPKcm(%"class.WTF::String"* nonnull %12, i8* %791, i64 %848) #12
  %849 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %12, i64 0, i32 0, i32 0
  %850 = bitcast %"class.WTF::String"* %12 to i64*
  %851 = load i64, i64* %850, align 8
  store %"class.WTF::StringImpl"* null, %"class.WTF::StringImpl"** %849, align 8
  %852 = bitcast %"class.WTF::String"* %9 to i64*
  %853 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %753, align 8
  store i64 %851, i64* %852, align 8
  %854 = icmp eq %"class.WTF::StringImpl"* %853, null
  br i1 %854, label %884, label %855

855:                                              ; preds = %847
  %856 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %853, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %857 = load atomic i32, i32* %856 monotonic, align 4
  %858 = and i32 %857, 2
  %859 = icmp eq i32 %858, 0
  %860 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %853, i64 0, i32 0
  %861 = load i32, i32* %860, align 4
  br i1 %859, label %862, label %864

862:                                              ; preds = %855
  %863 = add i32 %861, -1
  store i32 %863, i32* %860, align 4
  br label %864

864:                                              ; preds = %862, %855
  %865 = phi i32 [ %863, %862 ], [ %861, %855 ]
  %866 = icmp eq i32 %865, 0
  br i1 %866, label %867, label %868

867:                                              ; preds = %864
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %853) #12
  br label %868

868:                                              ; preds = %867, %864
  %869 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %849, align 8
  %870 = icmp eq %"class.WTF::StringImpl"* %869, null
  br i1 %870, label %884, label %871

871:                                              ; preds = %868
  %872 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %869, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %873 = load atomic i32, i32* %872 monotonic, align 4
  %874 = and i32 %873, 2
  %875 = icmp eq i32 %874, 0
  %876 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %869, i64 0, i32 0
  %877 = load i32, i32* %876, align 4
  br i1 %875, label %878, label %880

878:                                              ; preds = %871
  %879 = add i32 %877, -1
  store i32 %879, i32* %876, align 4
  br label %880

880:                                              ; preds = %878, %871
  %881 = phi i32 [ %879, %878 ], [ %877, %871 ]
  %882 = icmp eq i32 %881, 0
  br i1 %882, label %883, label %884

883:                                              ; preds = %880
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %869) #12
  br label %884

884:                                              ; preds = %883, %880, %868, %847
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %843) #12
  %885 = bitcast %"class.WTF::StringView"* %13 to i8*
  %886 = bitcast %"class.WTF::StringView"* %13 to i64*
  %887 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %13, i64 0, i32 1
  %888 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %13, i64 0, i32 2
  br label %889

889:                                              ; preds = %910, %884
  %890 = phi i64 [ 0, %884 ], [ %911, %910 ]
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %885) #12
  %891 = getelementptr inbounds [10 x %"struct.WTF::KnownZone"], [10 x %"struct.WTF::KnownZone"]* @_ZN3WTFL11known_zonesE, i64 0, i64 %890, i32 0, i64 0
  %892 = call i64 @strlen(i8* nonnull %891) #13
  %893 = icmp ult i64 %892, 4294967296
  br i1 %893, label %895, label %894, !prof !2

894:                                              ; preds = %889
  call void @llvm.trap() #12
  unreachable

895:                                              ; preds = %889
  %896 = trunc i64 %892 to i32
  %897 = load i64, i64* bitcast (%"class.WTF::StringImpl"** @_ZN3WTF10StringImpl6empty_E to i64*), align 8
  store i64 %897, i64* %886, align 8
  store i8* %891, i8** %887, align 8
  store i32 %896, i32* %888, align 8
  %898 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %753, align 8
  %899 = icmp eq %"class.WTF::StringImpl"* %898, null
  br i1 %899, label %902, label %900

900:                                              ; preds = %895
  %901 = call zeroext i1 @_ZNK3WTF10StringImpl27StartsWithIgnoringASCIICaseERKNS_10StringViewE(%"class.WTF::StringImpl"* nonnull %898, %"class.WTF::StringView"* nonnull dereferenceable(24) %13) #12
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %885) #12
  br i1 %901, label %904, label %910

902:                                              ; preds = %895
  %903 = icmp eq i32 %896, 0
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %885) #12
  br i1 %903, label %904, label %910

904:                                              ; preds = %902, %900
  %905 = getelementptr inbounds [10 x %"struct.WTF::KnownZone"], [10 x %"struct.WTF::KnownZone"]* @_ZN3WTFL11known_zonesE, i64 0, i64 %890, i32 1
  %906 = load i32, i32* %905, align 4
  %907 = call i64 @strlen(i8* %891) #13
  %908 = getelementptr inbounds i8, i8* %791, i64 %907
  %909 = ptrtoint i8* %908 to i64
  br label %913

910:                                              ; preds = %902, %900
  %911 = add nuw nsw i64 %890, 1
  %912 = icmp eq i64 %911, 10
  br i1 %912, label %913, label %889

913:                                              ; preds = %910, %815, %824, %836, %904, %827, %802, %794
  %914 = phi i8 [ 1, %904 ], [ %790, %802 ], [ %790, %827 ], [ %790, %794 ], [ 1, %836 ], [ 1, %824 ], [ 1, %815 ], [ %790, %910 ]
  %915 = phi i32 [ %906, %904 ], [ 0, %802 ], [ 0, %827 ], [ 0, %794 ], [ %841, %836 ], [ %826, %824 ], [ %823, %815 ], [ 0, %910 ]
  %916 = phi i64 [ %909, %904 ], [ %801, %802 ], [ %829, %827 ], [ %792, %794 ], [ %837, %836 ], [ %801, %824 ], [ %801, %815 ], [ %792, %910 ]
  %917 = phi i32 [ 0, %904 ], [ 1, %802 ], [ 1, %827 ], [ 1, %794 ], [ 0, %836 ], [ 0, %824 ], [ 0, %815 ], [ 0, %910 ]
  %918 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %753, align 8
  %919 = icmp eq %"class.WTF::StringImpl"* %918, null
  br i1 %919, label %933, label %920

920:                                              ; preds = %913
  %921 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %918, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %922 = load atomic i32, i32* %921 monotonic, align 4
  %923 = and i32 %922, 2
  %924 = icmp eq i32 %923, 0
  %925 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %918, i64 0, i32 0
  %926 = load i32, i32* %925, align 4
  br i1 %924, label %927, label %929

927:                                              ; preds = %920
  %928 = add i32 %926, -1
  store i32 %928, i32* %925, align 4
  br label %929

929:                                              ; preds = %927, %920
  %930 = phi i32 [ %928, %927 ], [ %926, %920 ]
  %931 = icmp eq i32 %930, 0
  br i1 %931, label %932, label %933

932:                                              ; preds = %929
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %918) #12
  br label %933

933:                                              ; preds = %932, %929, %913
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %752) #12
  %934 = icmp eq i32 %917, 0
  br i1 %934, label %935, label %1027

935:                                              ; preds = %933
  %936 = inttoptr i64 %916 to i8*
  %937 = load i8, i8* %936, align 1
  %938 = icmp eq i8 %937, 0
  br i1 %938, label %970, label %939

939:                                              ; preds = %935, %960
  %940 = phi i64 [ %963, %960 ], [ %916, %935 ]
  %941 = phi i8 [ %964, %960 ], [ %937, %935 ]
  %942 = phi i8* [ %962, %960 ], [ %936, %935 ]
  %943 = phi i32 [ %961, %960 ], [ 0, %935 ]
  %944 = icmp slt i8 %941, 33
  br i1 %944, label %945, label %948

945:                                              ; preds = %939
  %946 = icmp eq i32 %943, 0
  br i1 %946, label %947, label %960

947:                                              ; preds = %945
  switch i8 %941, label %968 [
    i8 32, label %960
    i8 13, label %960
    i8 12, label %960
    i8 11, label %960
    i8 10, label %960
    i8 9, label %960
  ]

948:                                              ; preds = %939
  %949 = icmp eq i8 %941, 40
  br i1 %949, label %950, label %952

950:                                              ; preds = %948
  %951 = add nsw i32 %943, 1
  br label %960

952:                                              ; preds = %948
  %953 = icmp eq i8 %941, 41
  %954 = icmp sgt i32 %943, 0
  %955 = and i1 %953, %954
  br i1 %955, label %956, label %958

956:                                              ; preds = %952
  %957 = add nsw i32 %943, -1
  br label %960

958:                                              ; preds = %952
  %959 = icmp eq i32 %943, 0
  br i1 %959, label %966, label %960

960:                                              ; preds = %958, %956, %950, %947, %947, %947, %947, %947, %947, %945
  %961 = phi i32 [ %951, %950 ], [ %957, %956 ], [ %943, %958 ], [ 0, %947 ], [ %943, %945 ], [ 0, %947 ], [ 0, %947 ], [ 0, %947 ], [ 0, %947 ], [ 0, %947 ]
  %962 = getelementptr inbounds i8, i8* %942, i64 1
  %963 = ptrtoint i8* %962 to i64
  %964 = load i8, i8* %962, align 1
  %965 = icmp eq i8 %964, 0
  br i1 %965, label %970, label %939

966:                                              ; preds = %958
  %967 = inttoptr i64 %940 to i8*
  br label %970

968:                                              ; preds = %947
  %969 = inttoptr i64 %940 to i8*
  br label %970

970:                                              ; preds = %960, %968, %966, %935, %745
  %971 = phi i8 [ 0, %745 ], [ %914, %935 ], [ %914, %968 ], [ %914, %966 ], [ %914, %960 ]
  %972 = phi i32 [ 0, %745 ], [ %915, %935 ], [ %915, %968 ], [ %915, %966 ], [ %915, %960 ]
  %973 = phi i8* [ %748, %745 ], [ %936, %935 ], [ %969, %968 ], [ %967, %966 ], [ %962, %960 ]
  %974 = load i8, i8* %973, align 1
  %975 = icmp ne i8 %974, 0
  %976 = icmp eq i32 %747, -1
  %977 = and i1 %976, %975
  br i1 %977, label %978, label %1014

978:                                              ; preds = %970
  %979 = call i64 @strtol(i8* %973, i8** nonnull %5, i32 10) #12
  %980 = load i8*, i8** %5, align 8
  %981 = icmp ne i8* %980, %973
  %982 = add i64 %979, 2147483647
  %983 = icmp ult i64 %982, 4294967294
  %984 = and i1 %983, %981
  br i1 %984, label %985, label %1027

985:                                              ; preds = %978
  %986 = trunc i64 %979 to i32
  %987 = load i8, i8* %980, align 1
  %988 = icmp eq i8 %987, 0
  br i1 %988, label %1018, label %989

989:                                              ; preds = %985, %1009
  %990 = phi i8* [ %1011, %1009 ], [ %980, %985 ]
  %991 = phi i8 [ %1012, %1009 ], [ %987, %985 ]
  %992 = phi i32 [ %1010, %1009 ], [ 0, %985 ]
  %993 = icmp slt i8 %991, 33
  br i1 %993, label %994, label %997

994:                                              ; preds = %989
  %995 = icmp eq i32 %992, 0
  br i1 %995, label %996, label %1009

996:                                              ; preds = %994
  switch i8 %991, label %1014 [
    i8 32, label %1009
    i8 13, label %1009
    i8 12, label %1009
    i8 11, label %1009
    i8 10, label %1009
    i8 9, label %1009
  ]

997:                                              ; preds = %989
  %998 = icmp eq i8 %991, 40
  br i1 %998, label %999, label %1001

999:                                              ; preds = %997
  %1000 = add nsw i32 %992, 1
  br label %1009

1001:                                             ; preds = %997
  %1002 = icmp eq i8 %991, 41
  %1003 = icmp sgt i32 %992, 0
  %1004 = and i1 %1002, %1003
  br i1 %1004, label %1005, label %1007

1005:                                             ; preds = %1001
  %1006 = add nsw i32 %992, -1
  br label %1009

1007:                                             ; preds = %1001
  %1008 = icmp eq i32 %992, 0
  br i1 %1008, label %1027, label %1009

1009:                                             ; preds = %1007, %1005, %999, %996, %996, %996, %996, %996, %996, %994
  %1010 = phi i32 [ %1000, %999 ], [ %1006, %1005 ], [ %992, %1007 ], [ 0, %996 ], [ %992, %994 ], [ 0, %996 ], [ 0, %996 ], [ 0, %996 ], [ 0, %996 ], [ 0, %996 ]
  %1011 = getelementptr inbounds i8, i8* %990, i64 1
  %1012 = load i8, i8* %1011, align 1
  %1013 = icmp eq i8 %1012, 0
  br i1 %1013, label %1018, label %989

1014:                                             ; preds = %996, %970
  %1015 = phi i8 [ %974, %970 ], [ %991, %996 ]
  %1016 = phi i32 [ %747, %970 ], [ %986, %996 ]
  %1017 = icmp eq i8 %1015, 0
  br i1 %1017, label %1018, label %1027

1018:                                             ; preds = %1009, %1014, %985
  %1019 = phi i32 [ %1016, %1014 ], [ %986, %985 ], [ %986, %1009 ]
  %1020 = icmp ult i32 %1019, 100
  br i1 %1020, label %1021, label %1028

1021:                                             ; preds = %1018
  %1022 = icmp slt i32 %1019, 50
  br i1 %1022, label %1023, label %1025

1023:                                             ; preds = %1021
  %1024 = add nuw nsw i32 %1019, 2000
  br label %1028

1025:                                             ; preds = %1021
  %1026 = add nuw nsw i32 %1019, 1900
  br label %1028

1027:                                             ; preds = %403, %1007, %247, %255, %263, %264, %270, %283, %278, %286, %298, %309, %398, %399, %414, %427, %933, %691, %446, %492, %494, %497, %500, %507, %515, %523, %690, %704, %978, %1014, %512, %514, %445
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %248) #12
  br label %1098

1028:                                             ; preds = %1018, %1023, %1025
  %1029 = phi i32 [ %1024, %1023 ], [ %1026, %1025 ], [ %1019, %1018 ]
  %1030 = sitofp i64 %697 to double
  %1031 = add nsw i64 %418, -32075
  %1032 = sitofp i64 %1031 to double
  %1033 = sitofp i32 %1029 to double
  %1034 = fadd double %1033, 4.800000e+03
  %1035 = add nsw i64 %417, -13
  %1036 = sdiv i64 %1035, 12
  %1037 = sitofp i64 %1036 to double
  %1038 = fadd double %1034, %1037
  %1039 = fmul double %1038, 1.461000e+03
  %1040 = fmul double %1039, 2.500000e-01
  %1041 = call double @llvm.floor.f64(double %1040) #12
  %1042 = fadd double %1041, %1032
  %1043 = add nsw i64 %417, -1
  %1044 = mul i64 %1036, -12
  %1045 = add i64 %1043, %1044
  %1046 = mul nsw i64 %1045, 367
  %1047 = sdiv i64 %1046, 12
  %1048 = sitofp i64 %1047 to double
  %1049 = fadd double %1042, %1048
  %1050 = fadd double %1033, 4.900000e+03
  %1051 = fadd double %1050, %1037
  %1052 = fdiv double %1051, 1.000000e+02
  %1053 = fmul double %1052, 3.000000e+00
  %1054 = fmul double %1053, 2.500000e-01
  %1055 = call double @llvm.floor.f64(double %1054) #12
  %1056 = fsub double %1049, %1055
  %1057 = fadd double %1056, 0xC1429EC600000000
  %1058 = fmul double %1057, 2.400000e+01
  %1059 = sitofp i64 %695 to double
  %1060 = fadd double %1058, %1059
  %1061 = fmul double %1060, 6.000000e+01
  %1062 = sitofp i64 %696 to double
  %1063 = fadd double %1061, %1062
  %1064 = fmul double %1063, 6.000000e+01
  %1065 = fadd double %1064, %1030
  %1066 = fmul double %1065, 1.000000e+03
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %248) #12
  %1067 = fcmp uno double %1066, 0.000000e+00
  br i1 %1067, label %1098, label %1068

1068:                                             ; preds = %1028
  %1069 = icmp eq i8 %971, 0
  br i1 %1069, label %1070, label %1092

1070:                                             ; preds = %1068
  %1071 = call %"class.icu_69::TimeZone"* @_ZN6icu_698TimeZone13createDefaultEv() #12
  %1072 = bitcast i32* %14 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %1072) #12
  store i32 -1431655766, i32* %14, align 4
  %1073 = bitcast i32* %15 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %1073) #12
  store i32 -1431655766, i32* %15, align 4
  %1074 = bitcast i32* %16 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %1074) #12
  store i32 0, i32* %16, align 4
  %1075 = bitcast %"class.icu_69::TimeZone"* %1071 to %"class.icu_69::BasicTimeZone"*
  %1076 = bitcast %"class.icu_69::TimeZone"* %1071 to void (%"class.icu_69::BasicTimeZone"*, double, i32, i32, i32*, i32*, i32*)***
  %1077 = load void (%"class.icu_69::BasicTimeZone"*, double, i32, i32, i32*, i32*, i32*)**, void (%"class.icu_69::BasicTimeZone"*, double, i32, i32, i32*, i32*, i32*)*** %1076, align 8
  %1078 = getelementptr inbounds void (%"class.icu_69::BasicTimeZone"*, double, i32, i32, i32*, i32*, i32*)*, void (%"class.icu_69::BasicTimeZone"*, double, i32, i32, i32*, i32*, i32*)** %1077, i64 20
  %1079 = load void (%"class.icu_69::BasicTimeZone"*, double, i32, i32, i32*, i32*, i32*)*, void (%"class.icu_69::BasicTimeZone"*, double, i32, i32, i32*, i32*, i32*)** %1078, align 8
  call void %1079(%"class.icu_69::BasicTimeZone"* %1075, double %1066, i32 4, i32 4, i32* nonnull dereferenceable(4) %14, i32* nonnull dereferenceable(4) %15, i32* nonnull dereferenceable(4) %16) #12
  %1080 = load i32, i32* %14, align 4
  %1081 = load i32, i32* %15, align 4
  %1082 = add nsw i32 %1081, %1080
  %1083 = sitofp i32 %1082 to double
  %1084 = fdiv double %1083, 6.000000e+04
  %1085 = fptosi double %1084 to i32
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %1074) #12
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %1073) #12
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %1072) #12
  %1086 = icmp eq %"class.icu_69::TimeZone"* %1071, null
  br i1 %1086, label %1092, label %1087

1087:                                             ; preds = %1070
  %1088 = bitcast %"class.icu_69::TimeZone"* %1071 to void (%"class.icu_69::TimeZone"*)***
  %1089 = load void (%"class.icu_69::TimeZone"*)**, void (%"class.icu_69::TimeZone"*)*** %1088, align 8
  %1090 = getelementptr inbounds void (%"class.icu_69::TimeZone"*)*, void (%"class.icu_69::TimeZone"*)** %1089, i64 1
  %1091 = load void (%"class.icu_69::TimeZone"*)*, void (%"class.icu_69::TimeZone"*)** %1090, align 8
  call void %1091(%"class.icu_69::TimeZone"* nonnull %1071) #12
  br label %1092

1092:                                             ; preds = %1087, %1070, %1068
  %1093 = phi i32 [ %972, %1068 ], [ %1085, %1070 ], [ %1085, %1087 ]
  %1094 = sitofp i32 %1093 to double
  %1095 = fmul double %1094, 6.000000e+04
  %1096 = fsub double %1066, %1095
  %1097 = call i64 @_ZN4base4Time10FromJsTimeEd(double %1096) #12
  br label %1098

1098:                                             ; preds = %233, %243, %1028, %1027, %1092
  %1099 = phi i8 [ 1, %1092 ], [ 0, %1027 ], [ 0, %1028 ], [ 0, %243 ], [ 0, %233 ]
  %1100 = phi i64 [ %1097, %1092 ], [ undef, %1027 ], [ undef, %1028 ], [ undef, %243 ], [ undef, %233 ]
  %1101 = insertvalue { i8, i64 } undef, i8 %1099, 0
  %1102 = insertvalue { i8, i64 } %1101, i64 %1100, 1
  ret { i8, i64 } %1102
}

declare %"class.icu_69::TimeZone"* @_ZN6icu_698TimeZone13createDefaultEv() local_unnamed_addr #5

declare i64 @_ZN4base4Time10FromJsTimeEd(double) local_unnamed_addr #5

; Function Attrs: nounwind ssp uwtable
define hidden %"class.WTF::StringImpl"* @_ZN3WTF21MakeRFC2822DateStringEN4base4TimeEi(i64, i32) local_unnamed_addr #4 {
  %3 = alloca %"class.WTF::IntegerToStringConverter", align 8
  %4 = alloca %"class.WTF::IntegerToStringConverter", align 8
  %5 = alloca %"class.WTF::IntegerToStringConverter", align 8
  %6 = alloca %"class.WTF::IntegerToStringConverter", align 8
  %7 = alloca %"class.WTF::IntegerToStringConverter", align 8
  %8 = alloca %"class.WTF::IntegerToStringConverter", align 8
  %9 = alloca %"class.WTF::IntegerToStringConverter", align 8
  %10 = alloca %"class.base::Time", align 8
  %11 = alloca %"struct.base::Time::Exploded", align 4
  %12 = alloca %"class.WTF::StringBuilder", align 8
  %13 = alloca %"class.WTF::StringView", align 8
  %14 = alloca %"class.WTF::StringView", align 8
  %15 = alloca %"class.WTF::StringView", align 8
  %16 = getelementptr inbounds %"class.base::Time", %"class.base::Time"* %10, i64 0, i32 0, i32 0
  store i64 %0, i64* %16, align 8
  %17 = bitcast %"struct.base::Time::Exploded"* %11 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %17) #12
  %18 = getelementptr inbounds %"struct.base::Time::Exploded", %"struct.base::Time::Exploded"* %11, i64 0, i32 0
  %19 = getelementptr inbounds %"struct.base::Time::Exploded", %"struct.base::Time::Exploded"* %11, i64 0, i32 1
  %20 = getelementptr inbounds %"struct.base::Time::Exploded", %"struct.base::Time::Exploded"* %11, i64 0, i32 2
  %21 = getelementptr inbounds %"struct.base::Time::Exploded", %"struct.base::Time::Exploded"* %11, i64 0, i32 3
  %22 = getelementptr inbounds %"struct.base::Time::Exploded", %"struct.base::Time::Exploded"* %11, i64 0, i32 4
  %23 = getelementptr inbounds %"struct.base::Time::Exploded", %"struct.base::Time::Exploded"* %11, i64 0, i32 5
  %24 = getelementptr inbounds %"struct.base::Time::Exploded", %"struct.base::Time::Exploded"* %11, i64 0, i32 6
  %25 = bitcast %"struct.base::Time::Exploded"* %11 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 4 %25, i8 -86, i64 32, i1 false)
  call void @_ZNK4base4Time7ExplodeEbPNS0_8ExplodedE(%"class.base::Time"* nonnull %10, i1 zeroext false, %"struct.base::Time::Exploded"* nonnull %11) #12
  %26 = bitcast %"class.WTF::StringBuilder"* %12 to i8*
  call void @llvm.lifetime.start.p0i8(i64 48, i8* nonnull %26) #12
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %26, i8 -86, i64 48, i1 false)
  %27 = getelementptr inbounds %"class.WTF::StringBuilder", %"class.WTF::StringBuilder"* %12, i64 0, i32 0, i32 0, i32 0
  store %"class.WTF::StringImpl"* null, %"class.WTF::StringImpl"** %27, align 8
  %28 = getelementptr inbounds %"class.WTF::StringBuilder", %"class.WTF::StringBuilder"* %12, i64 0, i32 1
  %29 = bitcast %union.anon.3* %28 to i8*
  store i8 0, i8* %29, align 8
  %30 = getelementptr inbounds %"class.WTF::StringBuilder", %"class.WTF::StringBuilder"* %12, i64 0, i32 2
  store i32 0, i32* %30, align 8
  %31 = getelementptr inbounds %"class.WTF::StringBuilder", %"class.WTF::StringBuilder"* %12, i64 0, i32 3
  store i8 1, i8* %31, align 4
  %32 = getelementptr inbounds %"class.WTF::StringBuilder", %"class.WTF::StringBuilder"* %12, i64 0, i32 4
  store i8 0, i8* %32, align 1
  %33 = bitcast %"class.WTF::StringView"* %13 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %33) #12
  %34 = load i32, i32* %20, align 4
  %35 = sext i32 %34 to i64
  %36 = getelementptr inbounds [7 x [4 x i8]], [7 x [4 x i8]]* @_ZN3WTFL12kWeekdayNameE, i64 0, i64 %35, i64 0
  %37 = icmp eq i8* %36, null
  br i1 %37, label %44, label %38

38:                                               ; preds = %2
  %39 = call i64 @strlen(i8* nonnull %36) #13
  %40 = icmp ult i64 %39, 4294967296
  br i1 %40, label %42, label %41, !prof !2

41:                                               ; preds = %38
  call void @llvm.trap() #12
  unreachable

42:                                               ; preds = %38
  %43 = trunc i64 %39 to i32
  br label %44

44:                                               ; preds = %2, %42
  %45 = phi i32 [ %43, %42 ], [ 0, %2 ]
  %46 = load i64, i64* bitcast (%"class.WTF::StringImpl"** @_ZN3WTF10StringImpl6empty_E to i64*), align 8
  %47 = bitcast %"class.WTF::StringView"* %13 to i64*
  store i64 %46, i64* %47, align 8
  %48 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %13, i64 0, i32 1
  store i8* %36, i8** %48, align 8
  %49 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %13, i64 0, i32 2
  store i32 %45, i32* %49, align 8
  call void @_ZN3WTF13StringBuilder6AppendERKNS_10StringViewE(%"class.WTF::StringBuilder"* nonnull %12, %"class.WTF::StringView"* nonnull dereferenceable(24) %13)
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %33) #12
  %50 = bitcast %"class.WTF::StringView"* %14 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %50) #12
  %51 = load i64, i64* bitcast (%"class.WTF::StringImpl"** @_ZN3WTF10StringImpl6empty_E to i64*), align 8
  %52 = bitcast %"class.WTF::StringView"* %14 to i64*
  store i64 %51, i64* %52, align 8
  %53 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %14, i64 0, i32 1
  store i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i64 0, i64 0), i8** %53, align 8
  %54 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %14, i64 0, i32 2
  store i32 2, i32* %54, align 8
  call void @_ZN3WTF13StringBuilder6AppendERKNS_10StringViewE(%"class.WTF::StringBuilder"* nonnull %12, %"class.WTF::StringView"* nonnull dereferenceable(24) %14)
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %50) #12
  %55 = load i32, i32* %21, align 4
  %56 = getelementptr inbounds %"class.WTF::IntegerToStringConverter", %"class.WTF::IntegerToStringConverter"* %9, i64 0, i32 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %56) #12
  %57 = getelementptr inbounds %"class.WTF::IntegerToStringConverter", %"class.WTF::IntegerToStringConverter"* %9, i64 0, i32 0, i64 12
  %58 = getelementptr inbounds %"class.WTF::IntegerToStringConverter", %"class.WTF::IntegerToStringConverter"* %9, i64 0, i32 2
  %59 = getelementptr inbounds %"class.WTF::IntegerToStringConverter", %"class.WTF::IntegerToStringConverter"* %9, i64 0, i32 3
  %60 = getelementptr inbounds %"class.WTF::IntegerToStringConverter", %"class.WTF::IntegerToStringConverter"* %9, i64 0, i32 0, i64 13
  %61 = icmp slt i32 %55, 0
  %62 = sub i32 0, %55
  %63 = select i1 %61, i32 %62, i32 %55
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %56, i8 -86, i64 32, i1 false) #12
  store i8* %57, i8** %58, align 8
  %64 = urem i32 %63, 10
  %65 = udiv i32 %63, 10
  %66 = trunc i32 %64 to i8
  %67 = or i8 %66, 48
  store i8 %67, i8* %57, align 4
  %68 = icmp ugt i32 %63, 9
  br i1 %68, label %69, label %91

69:                                               ; preds = %44
  %70 = getelementptr inbounds %"class.WTF::IntegerToStringConverter", %"class.WTF::IntegerToStringConverter"* %9, i64 0, i32 0, i64 11
  store i8* %70, i8** %58, align 8
  %71 = urem i32 %65, 10
  %72 = trunc i32 %71 to i8
  %73 = or i8 %72, 48
  store i8 %73, i8* %70, align 1
  %74 = icmp ugt i32 %63, 99
  br i1 %74, label %75, label %91

75:                                               ; preds = %69
  %76 = udiv i32 %63, 100
  %77 = getelementptr inbounds %"class.WTF::IntegerToStringConverter", %"class.WTF::IntegerToStringConverter"* %9, i64 0, i32 0, i64 10
  store i8* %77, i8** %58, align 8
  %78 = urem i32 %76, 10
  %79 = trunc i32 %78 to i8
  %80 = or i8 %79, 48
  store i8 %80, i8* %77, align 2
  %81 = icmp ugt i32 %63, 999
  br i1 %81, label %82, label %91

82:                                               ; preds = %75, %82
  %83 = phi i32 [ %85, %82 ], [ %76, %75 ]
  %84 = load i8*, i8** %58, align 8
  %85 = udiv i32 %83, 10
  %86 = getelementptr inbounds i8, i8* %84, i64 -1
  store i8* %86, i8** %58, align 8
  %87 = urem i32 %85, 10
  %88 = trunc i32 %87 to i8
  %89 = or i8 %88, 48
  store i8 %89, i8* %86, align 1
  %90 = icmp ugt i32 %83, 99
  br i1 %90, label %82, label %91

91:                                               ; preds = %82, %75, %69, %44
  br i1 %61, label %92, label %95

92:                                               ; preds = %91
  %93 = load i8*, i8** %58, align 8
  %94 = getelementptr inbounds i8, i8* %93, i64 -1
  store i8* %94, i8** %58, align 8
  store i8 45, i8* %94, align 1
  br label %95

95:                                               ; preds = %91, %92
  %96 = bitcast i8** %58 to i64*
  %97 = load i64, i64* %96, align 8
  %98 = ptrtoint i8* %60 to i64
  %99 = sub i64 %98, %97
  %100 = trunc i64 %99 to i32
  store i32 %100, i32* %59, align 8
  %101 = inttoptr i64 %97 to i8*
  call void @_ZN3WTF13StringBuilder6AppendEPKhj(%"class.WTF::StringBuilder"* nonnull %12, i8* %101, i32 %100) #12
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %56) #12
  call void @_ZN3WTF13StringBuilder6AppendEh(%"class.WTF::StringBuilder"* nonnull %12, i8 zeroext 32) #12
  %102 = bitcast %"class.WTF::StringView"* %15 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %102) #12
  %103 = load i32, i32* %19, align 4
  %104 = add nsw i32 %103, -1
  %105 = sext i32 %104 to i64
  %106 = getelementptr inbounds [12 x [4 x i8]], [12 x [4 x i8]]* @_ZN3WTFL10kMonthNameE, i64 0, i64 %105, i64 0
  %107 = icmp eq i8* %106, null
  br i1 %107, label %114, label %108

108:                                              ; preds = %95
  %109 = call i64 @strlen(i8* nonnull %106) #13
  %110 = icmp ult i64 %109, 4294967296
  br i1 %110, label %112, label %111, !prof !2

111:                                              ; preds = %108
  call void @llvm.trap() #12
  unreachable

112:                                              ; preds = %108
  %113 = trunc i64 %109 to i32
  br label %114

114:                                              ; preds = %95, %112
  %115 = phi i32 [ %113, %112 ], [ 0, %95 ]
  %116 = load i64, i64* bitcast (%"class.WTF::StringImpl"** @_ZN3WTF10StringImpl6empty_E to i64*), align 8
  %117 = bitcast %"class.WTF::StringView"* %15 to i64*
  store i64 %116, i64* %117, align 8
  %118 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %15, i64 0, i32 1
  store i8* %106, i8** %118, align 8
  %119 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %15, i64 0, i32 2
  store i32 %115, i32* %119, align 8
  call void @_ZN3WTF13StringBuilder6AppendERKNS_10StringViewE(%"class.WTF::StringBuilder"* nonnull %12, %"class.WTF::StringView"* nonnull dereferenceable(24) %15)
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %102) #12
  call void @_ZN3WTF13StringBuilder6AppendEh(%"class.WTF::StringBuilder"* nonnull %12, i8 zeroext 32) #12
  %120 = load i32, i32* %18, align 4
  %121 = getelementptr inbounds %"class.WTF::IntegerToStringConverter", %"class.WTF::IntegerToStringConverter"* %8, i64 0, i32 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %121) #12
  %122 = getelementptr inbounds %"class.WTF::IntegerToStringConverter", %"class.WTF::IntegerToStringConverter"* %8, i64 0, i32 0, i64 12
  %123 = getelementptr inbounds %"class.WTF::IntegerToStringConverter", %"class.WTF::IntegerToStringConverter"* %8, i64 0, i32 2
  %124 = getelementptr inbounds %"class.WTF::IntegerToStringConverter", %"class.WTF::IntegerToStringConverter"* %8, i64 0, i32 3
  %125 = getelementptr inbounds %"class.WTF::IntegerToStringConverter", %"class.WTF::IntegerToStringConverter"* %8, i64 0, i32 0, i64 13
  %126 = icmp slt i32 %120, 0
  %127 = sub i32 0, %120
  %128 = select i1 %126, i32 %127, i32 %120
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %121, i8 -86, i64 32, i1 false) #12
  store i8* %122, i8** %123, align 8
  %129 = urem i32 %128, 10
  %130 = udiv i32 %128, 10
  %131 = trunc i32 %129 to i8
  %132 = or i8 %131, 48
  store i8 %132, i8* %122, align 4
  %133 = icmp ugt i32 %128, 9
  br i1 %133, label %134, label %156

134:                                              ; preds = %114
  %135 = getelementptr inbounds %"class.WTF::IntegerToStringConverter", %"class.WTF::IntegerToStringConverter"* %8, i64 0, i32 0, i64 11
  store i8* %135, i8** %123, align 8
  %136 = urem i32 %130, 10
  %137 = trunc i32 %136 to i8
  %138 = or i8 %137, 48
  store i8 %138, i8* %135, align 1
  %139 = icmp ugt i32 %128, 99
  br i1 %139, label %140, label %156

140:                                              ; preds = %134
  %141 = udiv i32 %128, 100
  %142 = getelementptr inbounds %"class.WTF::IntegerToStringConverter", %"class.WTF::IntegerToStringConverter"* %8, i64 0, i32 0, i64 10
  store i8* %142, i8** %123, align 8
  %143 = urem i32 %141, 10
  %144 = trunc i32 %143 to i8
  %145 = or i8 %144, 48
  store i8 %145, i8* %142, align 2
  %146 = icmp ugt i32 %128, 999
  br i1 %146, label %147, label %156

147:                                              ; preds = %140, %147
  %148 = phi i32 [ %150, %147 ], [ %141, %140 ]
  %149 = load i8*, i8** %123, align 8
  %150 = udiv i32 %148, 10
  %151 = getelementptr inbounds i8, i8* %149, i64 -1
  store i8* %151, i8** %123, align 8
  %152 = urem i32 %150, 10
  %153 = trunc i32 %152 to i8
  %154 = or i8 %153, 48
  store i8 %154, i8* %151, align 1
  %155 = icmp ugt i32 %148, 99
  br i1 %155, label %147, label %156

156:                                              ; preds = %147, %140, %134, %114
  br i1 %126, label %157, label %160

157:                                              ; preds = %156
  %158 = load i8*, i8** %123, align 8
  %159 = getelementptr inbounds i8, i8* %158, i64 -1
  store i8* %159, i8** %123, align 8
  store i8 45, i8* %159, align 1
  br label %160

160:                                              ; preds = %156, %157
  %161 = bitcast i8** %123 to i64*
  %162 = load i64, i64* %161, align 8
  %163 = ptrtoint i8* %125 to i64
  %164 = sub i64 %163, %162
  %165 = trunc i64 %164 to i32
  store i32 %165, i32* %124, align 8
  %166 = inttoptr i64 %162 to i8*
  call void @_ZN3WTF13StringBuilder6AppendEPKhj(%"class.WTF::StringBuilder"* nonnull %12, i8* %166, i32 %165) #12
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %121) #12
  call void @_ZN3WTF13StringBuilder6AppendEh(%"class.WTF::StringBuilder"* nonnull %12, i8 zeroext 32) #12
  %167 = load i32, i32* %22, align 4
  %168 = icmp slt i32 %167, 10
  br i1 %168, label %169, label %170

169:                                              ; preds = %160
  call void @_ZN3WTF13StringBuilder6AppendEh(%"class.WTF::StringBuilder"* nonnull %12, i8 zeroext 48) #12
  br label %170

170:                                              ; preds = %169, %160
  %171 = getelementptr inbounds %"class.WTF::IntegerToStringConverter", %"class.WTF::IntegerToStringConverter"* %7, i64 0, i32 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %171) #12
  %172 = getelementptr inbounds %"class.WTF::IntegerToStringConverter", %"class.WTF::IntegerToStringConverter"* %7, i64 0, i32 0, i64 12
  %173 = getelementptr inbounds %"class.WTF::IntegerToStringConverter", %"class.WTF::IntegerToStringConverter"* %7, i64 0, i32 2
  %174 = getelementptr inbounds %"class.WTF::IntegerToStringConverter", %"class.WTF::IntegerToStringConverter"* %7, i64 0, i32 3
  %175 = getelementptr inbounds %"class.WTF::IntegerToStringConverter", %"class.WTF::IntegerToStringConverter"* %7, i64 0, i32 0, i64 13
  %176 = icmp slt i32 %167, 0
  %177 = sub i32 0, %167
  %178 = select i1 %176, i32 %177, i32 %167
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %171, i8 -86, i64 32, i1 false) #12
  store i8* %172, i8** %173, align 8
  %179 = urem i32 %178, 10
  %180 = udiv i32 %178, 10
  %181 = trunc i32 %179 to i8
  %182 = or i8 %181, 48
  store i8 %182, i8* %172, align 4
  %183 = icmp ugt i32 %178, 9
  br i1 %183, label %184, label %213

184:                                              ; preds = %170
  %185 = getelementptr inbounds %"class.WTF::IntegerToStringConverter", %"class.WTF::IntegerToStringConverter"* %7, i64 0, i32 0, i64 11
  store i8* %185, i8** %173, align 8
  %186 = urem i32 %180, 10
  %187 = trunc i32 %186 to i8
  %188 = or i8 %187, 48
  store i8 %188, i8* %185, align 1
  %189 = icmp ugt i32 %178, 99
  br i1 %189, label %190, label %213

190:                                              ; preds = %184
  %191 = udiv i32 %178, 100
  %192 = getelementptr inbounds %"class.WTF::IntegerToStringConverter", %"class.WTF::IntegerToStringConverter"* %7, i64 0, i32 0, i64 10
  store i8* %192, i8** %173, align 8
  %193 = urem i32 %191, 10
  %194 = trunc i32 %193 to i8
  %195 = or i8 %194, 48
  store i8 %195, i8* %192, align 2
  %196 = icmp ugt i32 %178, 999
  br i1 %196, label %197, label %213

197:                                              ; preds = %190
  %198 = udiv i32 %178, 1000
  %199 = getelementptr inbounds %"class.WTF::IntegerToStringConverter", %"class.WTF::IntegerToStringConverter"* %7, i64 0, i32 0, i64 9
  store i8* %199, i8** %173, align 8
  %200 = urem i32 %198, 10
  %201 = trunc i32 %200 to i8
  %202 = or i8 %201, 48
  store i8 %202, i8* %199, align 1
  %203 = icmp ugt i32 %178, 9999
  br i1 %203, label %204, label %213

204:                                              ; preds = %197, %204
  %205 = phi i32 [ %207, %204 ], [ %198, %197 ]
  %206 = load i8*, i8** %173, align 8
  %207 = udiv i32 %205, 10
  %208 = getelementptr inbounds i8, i8* %206, i64 -1
  store i8* %208, i8** %173, align 8
  %209 = urem i32 %207, 10
  %210 = trunc i32 %209 to i8
  %211 = or i8 %210, 48
  store i8 %211, i8* %208, align 1
  %212 = icmp ugt i32 %205, 99
  br i1 %212, label %204, label %213

213:                                              ; preds = %204, %197, %190, %184, %170
  br i1 %176, label %214, label %217

214:                                              ; preds = %213
  %215 = load i8*, i8** %173, align 8
  %216 = getelementptr inbounds i8, i8* %215, i64 -1
  store i8* %216, i8** %173, align 8
  store i8 45, i8* %216, align 1
  br label %217

217:                                              ; preds = %213, %214
  %218 = bitcast i8** %173 to i64*
  %219 = load i64, i64* %218, align 8
  %220 = ptrtoint i8* %175 to i64
  %221 = sub i64 %220, %219
  %222 = trunc i64 %221 to i32
  store i32 %222, i32* %174, align 8
  %223 = inttoptr i64 %219 to i8*
  call void @_ZN3WTF13StringBuilder6AppendEPKhj(%"class.WTF::StringBuilder"* nonnull %12, i8* %223, i32 %222) #12
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %171) #12
  call void @_ZN3WTF13StringBuilder6AppendEh(%"class.WTF::StringBuilder"* nonnull %12, i8 zeroext 58) #12
  %224 = load i32, i32* %23, align 4
  %225 = icmp slt i32 %224, 10
  br i1 %225, label %226, label %227

226:                                              ; preds = %217
  call void @_ZN3WTF13StringBuilder6AppendEh(%"class.WTF::StringBuilder"* nonnull %12, i8 zeroext 48) #12
  br label %227

227:                                              ; preds = %226, %217
  %228 = getelementptr inbounds %"class.WTF::IntegerToStringConverter", %"class.WTF::IntegerToStringConverter"* %6, i64 0, i32 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %228) #12
  %229 = getelementptr inbounds %"class.WTF::IntegerToStringConverter", %"class.WTF::IntegerToStringConverter"* %6, i64 0, i32 0, i64 12
  %230 = getelementptr inbounds %"class.WTF::IntegerToStringConverter", %"class.WTF::IntegerToStringConverter"* %6, i64 0, i32 2
  %231 = getelementptr inbounds %"class.WTF::IntegerToStringConverter", %"class.WTF::IntegerToStringConverter"* %6, i64 0, i32 3
  %232 = getelementptr inbounds %"class.WTF::IntegerToStringConverter", %"class.WTF::IntegerToStringConverter"* %6, i64 0, i32 0, i64 13
  %233 = icmp slt i32 %224, 0
  %234 = sub i32 0, %224
  %235 = select i1 %233, i32 %234, i32 %224
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %228, i8 -86, i64 32, i1 false) #12
  store i8* %229, i8** %230, align 8
  %236 = urem i32 %235, 10
  %237 = udiv i32 %235, 10
  %238 = trunc i32 %236 to i8
  %239 = or i8 %238, 48
  store i8 %239, i8* %229, align 4
  %240 = icmp ugt i32 %235, 9
  br i1 %240, label %241, label %270

241:                                              ; preds = %227
  %242 = getelementptr inbounds %"class.WTF::IntegerToStringConverter", %"class.WTF::IntegerToStringConverter"* %6, i64 0, i32 0, i64 11
  store i8* %242, i8** %230, align 8
  %243 = urem i32 %237, 10
  %244 = trunc i32 %243 to i8
  %245 = or i8 %244, 48
  store i8 %245, i8* %242, align 1
  %246 = icmp ugt i32 %235, 99
  br i1 %246, label %247, label %270

247:                                              ; preds = %241
  %248 = udiv i32 %235, 100
  %249 = getelementptr inbounds %"class.WTF::IntegerToStringConverter", %"class.WTF::IntegerToStringConverter"* %6, i64 0, i32 0, i64 10
  store i8* %249, i8** %230, align 8
  %250 = urem i32 %248, 10
  %251 = trunc i32 %250 to i8
  %252 = or i8 %251, 48
  store i8 %252, i8* %249, align 2
  %253 = icmp ugt i32 %235, 999
  br i1 %253, label %254, label %270

254:                                              ; preds = %247
  %255 = udiv i32 %235, 1000
  %256 = getelementptr inbounds %"class.WTF::IntegerToStringConverter", %"class.WTF::IntegerToStringConverter"* %6, i64 0, i32 0, i64 9
  store i8* %256, i8** %230, align 8
  %257 = urem i32 %255, 10
  %258 = trunc i32 %257 to i8
  %259 = or i8 %258, 48
  store i8 %259, i8* %256, align 1
  %260 = icmp ugt i32 %235, 9999
  br i1 %260, label %261, label %270

261:                                              ; preds = %254, %261
  %262 = phi i32 [ %264, %261 ], [ %255, %254 ]
  %263 = load i8*, i8** %230, align 8
  %264 = udiv i32 %262, 10
  %265 = getelementptr inbounds i8, i8* %263, i64 -1
  store i8* %265, i8** %230, align 8
  %266 = urem i32 %264, 10
  %267 = trunc i32 %266 to i8
  %268 = or i8 %267, 48
  store i8 %268, i8* %265, align 1
  %269 = icmp ugt i32 %262, 99
  br i1 %269, label %261, label %270

270:                                              ; preds = %261, %254, %247, %241, %227
  br i1 %233, label %271, label %274

271:                                              ; preds = %270
  %272 = load i8*, i8** %230, align 8
  %273 = getelementptr inbounds i8, i8* %272, i64 -1
  store i8* %273, i8** %230, align 8
  store i8 45, i8* %273, align 1
  br label %274

274:                                              ; preds = %270, %271
  %275 = bitcast i8** %230 to i64*
  %276 = load i64, i64* %275, align 8
  %277 = ptrtoint i8* %232 to i64
  %278 = sub i64 %277, %276
  %279 = trunc i64 %278 to i32
  store i32 %279, i32* %231, align 8
  %280 = inttoptr i64 %276 to i8*
  call void @_ZN3WTF13StringBuilder6AppendEPKhj(%"class.WTF::StringBuilder"* nonnull %12, i8* %280, i32 %279) #12
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %228) #12
  call void @_ZN3WTF13StringBuilder6AppendEh(%"class.WTF::StringBuilder"* nonnull %12, i8 zeroext 58) #12
  %281 = load i32, i32* %24, align 4
  %282 = icmp slt i32 %281, 10
  br i1 %282, label %283, label %284

283:                                              ; preds = %274
  call void @_ZN3WTF13StringBuilder6AppendEh(%"class.WTF::StringBuilder"* nonnull %12, i8 zeroext 48) #12
  br label %284

284:                                              ; preds = %283, %274
  %285 = getelementptr inbounds %"class.WTF::IntegerToStringConverter", %"class.WTF::IntegerToStringConverter"* %5, i64 0, i32 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %285) #12
  %286 = getelementptr inbounds %"class.WTF::IntegerToStringConverter", %"class.WTF::IntegerToStringConverter"* %5, i64 0, i32 0, i64 12
  %287 = getelementptr inbounds %"class.WTF::IntegerToStringConverter", %"class.WTF::IntegerToStringConverter"* %5, i64 0, i32 2
  %288 = getelementptr inbounds %"class.WTF::IntegerToStringConverter", %"class.WTF::IntegerToStringConverter"* %5, i64 0, i32 3
  %289 = getelementptr inbounds %"class.WTF::IntegerToStringConverter", %"class.WTF::IntegerToStringConverter"* %5, i64 0, i32 0, i64 13
  %290 = icmp slt i32 %281, 0
  %291 = sub i32 0, %281
  %292 = select i1 %290, i32 %291, i32 %281
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %285, i8 -86, i64 32, i1 false) #12
  store i8* %286, i8** %287, align 8
  %293 = urem i32 %292, 10
  %294 = udiv i32 %292, 10
  %295 = trunc i32 %293 to i8
  %296 = or i8 %295, 48
  store i8 %296, i8* %286, align 4
  %297 = icmp ugt i32 %292, 9
  br i1 %297, label %298, label %327

298:                                              ; preds = %284
  %299 = getelementptr inbounds %"class.WTF::IntegerToStringConverter", %"class.WTF::IntegerToStringConverter"* %5, i64 0, i32 0, i64 11
  store i8* %299, i8** %287, align 8
  %300 = urem i32 %294, 10
  %301 = trunc i32 %300 to i8
  %302 = or i8 %301, 48
  store i8 %302, i8* %299, align 1
  %303 = icmp ugt i32 %292, 99
  br i1 %303, label %304, label %327

304:                                              ; preds = %298
  %305 = udiv i32 %292, 100
  %306 = getelementptr inbounds %"class.WTF::IntegerToStringConverter", %"class.WTF::IntegerToStringConverter"* %5, i64 0, i32 0, i64 10
  store i8* %306, i8** %287, align 8
  %307 = urem i32 %305, 10
  %308 = trunc i32 %307 to i8
  %309 = or i8 %308, 48
  store i8 %309, i8* %306, align 2
  %310 = icmp ugt i32 %292, 999
  br i1 %310, label %311, label %327

311:                                              ; preds = %304
  %312 = udiv i32 %292, 1000
  %313 = getelementptr inbounds %"class.WTF::IntegerToStringConverter", %"class.WTF::IntegerToStringConverter"* %5, i64 0, i32 0, i64 9
  store i8* %313, i8** %287, align 8
  %314 = urem i32 %312, 10
  %315 = trunc i32 %314 to i8
  %316 = or i8 %315, 48
  store i8 %316, i8* %313, align 1
  %317 = icmp ugt i32 %292, 9999
  br i1 %317, label %318, label %327

318:                                              ; preds = %311, %318
  %319 = phi i32 [ %321, %318 ], [ %312, %311 ]
  %320 = load i8*, i8** %287, align 8
  %321 = udiv i32 %319, 10
  %322 = getelementptr inbounds i8, i8* %320, i64 -1
  store i8* %322, i8** %287, align 8
  %323 = urem i32 %321, 10
  %324 = trunc i32 %323 to i8
  %325 = or i8 %324, 48
  store i8 %325, i8* %322, align 1
  %326 = icmp ugt i32 %319, 99
  br i1 %326, label %318, label %327

327:                                              ; preds = %318, %311, %304, %298, %284
  br i1 %290, label %328, label %331

328:                                              ; preds = %327
  %329 = load i8*, i8** %287, align 8
  %330 = getelementptr inbounds i8, i8* %329, i64 -1
  store i8* %330, i8** %287, align 8
  store i8 45, i8* %330, align 1
  br label %331

331:                                              ; preds = %327, %328
  %332 = bitcast i8** %287 to i64*
  %333 = load i64, i64* %332, align 8
  %334 = ptrtoint i8* %289 to i64
  %335 = sub i64 %334, %333
  %336 = trunc i64 %335 to i32
  store i32 %336, i32* %288, align 8
  %337 = inttoptr i64 %333 to i8*
  call void @_ZN3WTF13StringBuilder6AppendEPKhj(%"class.WTF::StringBuilder"* nonnull %12, i8* %337, i32 %336) #12
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %285) #12
  call void @_ZN3WTF13StringBuilder6AppendEh(%"class.WTF::StringBuilder"* nonnull %12, i8 zeroext 32) #12
  %338 = icmp sgt i32 %1, 0
  %339 = select i1 %338, i8 43, i8 45
  call void @_ZN3WTF13StringBuilder6AppendEh(%"class.WTF::StringBuilder"* nonnull %12, i8 zeroext %339) #12
  %340 = icmp slt i32 %1, 0
  %341 = sub nsw i32 0, %1
  %342 = select i1 %340, i32 %341, i32 %1
  %343 = udiv i32 %342, 60
  %344 = urem i32 %342, 60
  %345 = icmp ult i32 %342, 600
  br i1 %345, label %346, label %347

346:                                              ; preds = %331
  call void @_ZN3WTF13StringBuilder6AppendEh(%"class.WTF::StringBuilder"* nonnull %12, i8 zeroext 48) #12
  br label %347

347:                                              ; preds = %346, %331
  %348 = getelementptr inbounds %"class.WTF::IntegerToStringConverter", %"class.WTF::IntegerToStringConverter"* %4, i64 0, i32 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %348) #12
  %349 = getelementptr inbounds %"class.WTF::IntegerToStringConverter", %"class.WTF::IntegerToStringConverter"* %4, i64 0, i32 0, i64 12
  %350 = getelementptr inbounds %"class.WTF::IntegerToStringConverter", %"class.WTF::IntegerToStringConverter"* %4, i64 0, i32 2
  %351 = getelementptr inbounds %"class.WTF::IntegerToStringConverter", %"class.WTF::IntegerToStringConverter"* %4, i64 0, i32 3
  %352 = getelementptr inbounds %"class.WTF::IntegerToStringConverter", %"class.WTF::IntegerToStringConverter"* %4, i64 0, i32 0, i64 13
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %348, i8 -86, i64 32, i1 false) #12
  store i8* %349, i8** %350, align 8
  %353 = urem i32 %343, 10
  %354 = trunc i32 %353 to i8
  %355 = or i8 %354, 48
  store i8 %355, i8* %349, align 4
  %356 = icmp ugt i32 %342, 599
  %357 = ptrtoint i8* %349 to i64
  br i1 %356, label %358, label %393

358:                                              ; preds = %347
  %359 = udiv i32 %342, 600
  %360 = getelementptr inbounds %"class.WTF::IntegerToStringConverter", %"class.WTF::IntegerToStringConverter"* %4, i64 0, i32 0, i64 11
  store i8* %360, i8** %350, align 8
  %361 = urem i32 %359, 10
  %362 = trunc i32 %361 to i8
  %363 = or i8 %362, 48
  store i8 %363, i8* %360, align 1
  %364 = icmp ugt i32 %342, 5999
  %365 = ptrtoint i8* %360 to i64
  br i1 %364, label %366, label %393

366:                                              ; preds = %358
  %367 = udiv i32 %342, 6000
  %368 = getelementptr inbounds %"class.WTF::IntegerToStringConverter", %"class.WTF::IntegerToStringConverter"* %4, i64 0, i32 0, i64 10
  store i8* %368, i8** %350, align 8
  %369 = urem i32 %367, 10
  %370 = trunc i32 %369 to i8
  %371 = or i8 %370, 48
  store i8 %371, i8* %368, align 2
  %372 = icmp ugt i32 %342, 59999
  %373 = ptrtoint i8* %368 to i64
  br i1 %372, label %374, label %393

374:                                              ; preds = %366
  %375 = udiv i32 %342, 60000
  %376 = getelementptr inbounds %"class.WTF::IntegerToStringConverter", %"class.WTF::IntegerToStringConverter"* %4, i64 0, i32 0, i64 9
  store i8* %376, i8** %350, align 8
  %377 = urem i32 %375, 10
  %378 = trunc i32 %377 to i8
  %379 = or i8 %378, 48
  store i8 %379, i8* %376, align 1
  %380 = icmp ugt i32 %342, 599999
  br i1 %380, label %381, label %390

381:                                              ; preds = %374, %381
  %382 = phi i32 [ %384, %381 ], [ %375, %374 ]
  %383 = load i8*, i8** %350, align 8
  %384 = udiv i32 %382, 10
  %385 = getelementptr inbounds i8, i8* %383, i64 -1
  store i8* %385, i8** %350, align 8
  %386 = urem i32 %384, 10
  %387 = trunc i32 %386 to i8
  %388 = or i8 %387, 48
  store i8 %388, i8* %385, align 1
  %389 = icmp ugt i32 %382, 99
  br i1 %389, label %381, label %390

390:                                              ; preds = %381, %374
  %391 = bitcast i8** %350 to i64*
  %392 = load i64, i64* %391, align 8
  br label %393

393:                                              ; preds = %390, %366, %347, %358
  %394 = phi i64 [ %392, %390 ], [ %373, %366 ], [ %357, %347 ], [ %365, %358 ]
  %395 = ptrtoint i8* %352 to i64
  %396 = sub i64 %395, %394
  %397 = trunc i64 %396 to i32
  store i32 %397, i32* %351, align 8
  %398 = inttoptr i64 %394 to i8*
  call void @_ZN3WTF13StringBuilder6AppendEPKhj(%"class.WTF::StringBuilder"* nonnull %12, i8* %398, i32 %397) #12
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %348) #12
  %399 = icmp ult i32 %344, 10
  br i1 %399, label %400, label %401

400:                                              ; preds = %393
  call void @_ZN3WTF13StringBuilder6AppendEh(%"class.WTF::StringBuilder"* nonnull %12, i8 zeroext 48) #12
  br label %401

401:                                              ; preds = %400, %393
  %402 = getelementptr inbounds %"class.WTF::IntegerToStringConverter", %"class.WTF::IntegerToStringConverter"* %3, i64 0, i32 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %402) #12
  %403 = getelementptr inbounds %"class.WTF::IntegerToStringConverter", %"class.WTF::IntegerToStringConverter"* %3, i64 0, i32 0, i64 12
  %404 = getelementptr inbounds %"class.WTF::IntegerToStringConverter", %"class.WTF::IntegerToStringConverter"* %3, i64 0, i32 2
  %405 = getelementptr inbounds %"class.WTF::IntegerToStringConverter", %"class.WTF::IntegerToStringConverter"* %3, i64 0, i32 3
  %406 = getelementptr inbounds %"class.WTF::IntegerToStringConverter", %"class.WTF::IntegerToStringConverter"* %3, i64 0, i32 0, i64 13
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %402, i8 -86, i64 32, i1 false) #12
  store i8* %403, i8** %404, align 8
  %407 = trunc i32 %344 to i8
  %408 = urem i8 %407, 10
  %409 = udiv i8 %407, 10
  %410 = or i8 %408, 48
  store i8 %410, i8* %403, align 4
  %411 = icmp ugt i32 %344, 9
  br i1 %411, label %412, label %416

412:                                              ; preds = %401
  %413 = getelementptr inbounds %"class.WTF::IntegerToStringConverter", %"class.WTF::IntegerToStringConverter"* %3, i64 0, i32 0, i64 11
  store i8* %413, i8** %404, align 8
  %414 = urem i8 %409, 10
  %415 = or i8 %414, 48
  store i8 %415, i8* %413, align 1
  br label %416

416:                                              ; preds = %401, %412
  %417 = phi i8* [ %403, %401 ], [ %413, %412 ]
  %418 = ptrtoint i8* %417 to i64
  %419 = ptrtoint i8* %406 to i64
  %420 = sub i64 %419, %418
  %421 = trunc i64 %420 to i32
  store i32 %421, i32* %405, align 8
  call void @_ZN3WTF13StringBuilder6AppendEPKhj(%"class.WTF::StringBuilder"* nonnull %12, i8* %417, i32 %421) #12
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %402) #12
  %422 = call %"class.WTF::StringImpl"* @_ZN3WTF13StringBuilder8ToStringEv(%"class.WTF::StringBuilder"* nonnull %12) #12
  call void @_ZN3WTF13StringBuilder5ClearEv(%"class.WTF::StringBuilder"* nonnull %12) #12
  %423 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %27, align 8
  %424 = icmp eq %"class.WTF::StringImpl"* %423, null
  br i1 %424, label %438, label %425

425:                                              ; preds = %416
  %426 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %423, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %427 = load atomic i32, i32* %426 monotonic, align 4
  %428 = and i32 %427, 2
  %429 = icmp eq i32 %428, 0
  %430 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %423, i64 0, i32 0
  %431 = load i32, i32* %430, align 4
  br i1 %429, label %432, label %434

432:                                              ; preds = %425
  %433 = add i32 %431, -1
  store i32 %433, i32* %430, align 4
  br label %434

434:                                              ; preds = %432, %425
  %435 = phi i32 [ %433, %432 ], [ %431, %425 ]
  %436 = icmp eq i32 %435, 0
  br i1 %436, label %437, label %438

437:                                              ; preds = %434
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %423) #12
  br label %438

438:                                              ; preds = %416, %434, %437
  call void @llvm.lifetime.end.p0i8(i64 48, i8* nonnull %26) #12
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %17) #12
  ret %"class.WTF::StringImpl"* %422
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #2

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN3WTF13StringBuilder6AppendERKNS_10StringViewE(%"class.WTF::StringBuilder"*, %"class.WTF::StringView"* dereferenceable(24)) local_unnamed_addr #4 comdat align 2 {
  %3 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %1, i64 0, i32 2
  %4 = load i32, i32* %3, align 8
  %5 = icmp eq i32 %4, 0
  br i1 %5, label %81, label %6

6:                                                ; preds = %2
  %7 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %1, i64 0, i32 0
  %8 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %7, align 8
  %9 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %8, i64 1
  %10 = bitcast %"class.WTF::StringImpl"* %9 to i8*
  %11 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %1, i64 0, i32 1
  %12 = load i8*, i8** %11, align 8
  %13 = icmp eq i8* %12, %10
  %14 = bitcast i8* %12 to i16*
  br i1 %13, label %15, label %20

15:                                               ; preds = %6
  %16 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %8, i64 0, i32 1
  %17 = load i32, i32* %16, align 4
  %18 = icmp eq i32 %4, %17
  %19 = select i1 %18, %"class.WTF::StringImpl"* %8, %"class.WTF::StringImpl"* null
  br label %20

20:                                               ; preds = %6, %15
  %21 = phi %"class.WTF::StringImpl"* [ %19, %15 ], [ null, %6 ]
  %22 = getelementptr inbounds %"class.WTF::StringBuilder", %"class.WTF::StringBuilder"* %0, i64 0, i32 2
  %23 = load i32, i32* %22, align 8
  %24 = icmp eq i32 %23, 0
  br i1 %24, label %25, label %74

25:                                               ; preds = %20
  %26 = getelementptr inbounds %"class.WTF::StringBuilder", %"class.WTF::StringBuilder"* %0, i64 0, i32 4
  %27 = load i8, i8* %26, align 1, !range !3
  %28 = icmp eq i8 %27, 0
  %29 = icmp ne %"class.WTF::StringImpl"* %21, null
  %30 = and i1 %29, %28
  br i1 %30, label %31, label %74

31:                                               ; preds = %25
  %32 = ptrtoint %"class.WTF::StringImpl"* %21 to i64
  %33 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %21, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %34 = load atomic i32, i32* %33 monotonic, align 4
  %35 = and i32 %34, 2
  %36 = icmp eq i32 %35, 0
  br i1 %36, label %37, label %49

37:                                               ; preds = %31
  %38 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %21, i64 0, i32 0
  %39 = load i32, i32* %38, align 4
  %40 = zext i32 %39 to i33
  %41 = tail call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %40, i33 1) #12
  %42 = extractvalue { i33, i1 } %41, 1
  %43 = extractvalue { i33, i1 } %41, 0
  %44 = icmp slt i33 %43, 0
  %45 = or i1 %42, %44
  br i1 %45, label %46, label %47, !prof !4

46:                                               ; preds = %37
  tail call void @llvm.trap() #12
  unreachable

47:                                               ; preds = %37
  %48 = trunc i33 %43 to i32
  store i32 %48, i32* %38, align 4
  br label %49

49:                                               ; preds = %31, %47
  %50 = bitcast %"class.WTF::StringBuilder"* %0 to i64*
  %51 = getelementptr inbounds %"class.WTF::StringBuilder", %"class.WTF::StringBuilder"* %0, i64 0, i32 0, i32 0, i32 0
  %52 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %51, align 8
  store i64 %32, i64* %50, align 8
  %53 = icmp eq %"class.WTF::StringImpl"* %52, null
  br i1 %53, label %67, label %54

54:                                               ; preds = %49
  %55 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %52, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %56 = load atomic i32, i32* %55 monotonic, align 4
  %57 = and i32 %56, 2
  %58 = icmp eq i32 %57, 0
  %59 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %52, i64 0, i32 0
  %60 = load i32, i32* %59, align 4
  br i1 %58, label %61, label %63

61:                                               ; preds = %54
  %62 = add i32 %60, -1
  store i32 %62, i32* %59, align 4
  br label %63

63:                                               ; preds = %61, %54
  %64 = phi i32 [ %62, %61 ], [ %60, %54 ]
  %65 = icmp eq i32 %64, 0
  br i1 %65, label %66, label %67

66:                                               ; preds = %63
  tail call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %52) #12
  br label %67

67:                                               ; preds = %66, %63, %49
  %68 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %21, i64 0, i32 1
  %69 = load i32, i32* %68, align 4
  store i32 %69, i32* %22, align 8
  %70 = load atomic i32, i32* %33 monotonic, align 4
  %71 = getelementptr inbounds %"class.WTF::StringBuilder", %"class.WTF::StringBuilder"* %0, i64 0, i32 3
  %72 = trunc i32 %70 to i8
  %73 = and i8 %72, 1
  store i8 %73, i8* %71, align 4
  br label %81

74:                                               ; preds = %20, %25
  %75 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %8, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %76 = load atomic i32, i32* %75 monotonic, align 4
  %77 = and i32 %76, 1
  %78 = icmp eq i32 %77, 0
  br i1 %78, label %80, label %79

79:                                               ; preds = %74
  tail call void @_ZN3WTF13StringBuilder6AppendEPKhj(%"class.WTF::StringBuilder"* %0, i8* %12, i32 %4) #12
  br label %81

80:                                               ; preds = %74
  tail call void @_ZN3WTF13StringBuilder6AppendEPKDsj(%"class.WTF::StringBuilder"* %0, i16* %14, i32 %4) #12
  br label %81

81:                                               ; preds = %67, %80, %79, %2
  ret void
}

declare %"class.WTF::StringImpl"* @_ZN3WTF13StringBuilder8ToStringEv(%"class.WTF::StringBuilder"*) local_unnamed_addr #5

; Function Attrs: nounwind ssp uwtable
define hidden i64 @_ZN3WTF18ConvertToLocalTimeEN4base4TimeE(i64) local_unnamed_addr #4 {
  %2 = alloca %"class.base::Time", align 8
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = getelementptr inbounds %"class.base::Time", %"class.base::Time"* %2, i64 0, i32 0, i32 0
  store i64 %0, i64* %6, align 8
  %7 = call double @_ZNK4base4Time8ToJsTimeEv(%"class.base::Time"* nonnull %2) #12
  %8 = call %"class.icu_69::TimeZone"* @_ZN6icu_698TimeZone13createDefaultEv() #12
  %9 = bitcast i32* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %9) #12
  store i32 -1431655766, i32* %3, align 4
  %10 = bitcast i32* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %10) #12
  store i32 -1431655766, i32* %4, align 4
  %11 = bitcast i32* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %11) #12
  store i32 0, i32* %5, align 4
  %12 = bitcast %"class.icu_69::TimeZone"* %8 to void (%"class.icu_69::TimeZone"*, double, i8, i32*, i32*, i32*)***
  %13 = load void (%"class.icu_69::TimeZone"*, double, i8, i32*, i32*, i32*)**, void (%"class.icu_69::TimeZone"*, double, i8, i32*, i32*, i32*)*** %12, align 8
  %14 = getelementptr inbounds void (%"class.icu_69::TimeZone"*, double, i8, i32*, i32*, i32*)*, void (%"class.icu_69::TimeZone"*, double, i8, i32*, i32*, i32*)** %13, i64 6
  %15 = load void (%"class.icu_69::TimeZone"*, double, i8, i32*, i32*, i32*)*, void (%"class.icu_69::TimeZone"*, double, i8, i32*, i32*, i32*)** %14, align 8
  call void %15(%"class.icu_69::TimeZone"* %8, double %7, i8 signext 0, i32* nonnull dereferenceable(4) %3, i32* nonnull dereferenceable(4) %4, i32* nonnull dereferenceable(4) %5) #12
  %16 = load i32, i32* %3, align 4
  %17 = load i32, i32* %4, align 4
  %18 = add nsw i32 %17, %16
  %19 = sitofp i32 %18 to double
  %20 = fadd double %7, %19
  %21 = fmul double %20, 1.000000e+03
  %22 = fcmp ult double %21, 0xC3E0000000000000
  %23 = fcmp ugt double %21, 0x43DFFFFFFFFFFFFF
  %24 = fcmp ogt double %21, 0xC3E0000000000000
  %25 = select i1 %24, double %21, double 0xC3E0000000000000
  %26 = fptosi double %25 to i64
  %27 = select i1 %22, i64 0, i64 9223372036854775807
  %28 = select i1 %23, i64 %27, i64 %26
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %11) #12
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %10) #12
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %9) #12
  %29 = icmp eq %"class.icu_69::TimeZone"* %8, null
  br i1 %29, label %35, label %30

30:                                               ; preds = %1
  %31 = bitcast %"class.icu_69::TimeZone"* %8 to void (%"class.icu_69::TimeZone"*)***
  %32 = load void (%"class.icu_69::TimeZone"*)**, void (%"class.icu_69::TimeZone"*)*** %31, align 8
  %33 = getelementptr inbounds void (%"class.icu_69::TimeZone"*)*, void (%"class.icu_69::TimeZone"*)** %32, i64 1
  %34 = load void (%"class.icu_69::TimeZone"*)*, void (%"class.icu_69::TimeZone"*)** %33, align 8
  call void %34(%"class.icu_69::TimeZone"* nonnull %8) #12
  br label %35

35:                                               ; preds = %1, %30
  ret i64 %28
}

declare double @_ZNK4base4Time8ToJsTimeEv(%"class.base::Time"*) local_unnamed_addr #5

; Function Attrs: argmemonly nofree nounwind readonly
declare i64 @strlen(i8* nocapture) local_unnamed_addr #6

; Function Attrs: nofree nounwind readonly
declare i8* @strstr(i8*, i8* nocapture) local_unnamed_addr #7

; Function Attrs: nofree nounwind
declare i64 @strtoll(i8* readonly, i8** nocapture, i32) local_unnamed_addr #8

; Function Attrs: nofree nounwind
declare i64 @strtol(i8* readonly, i8** nocapture, i32) local_unnamed_addr #8

declare void @_ZN3WTF6StringC2EPKcm(%"class.WTF::String"*, i8*, i64) unnamed_addr #5

declare zeroext i1 @_ZNK3WTF10StringImpl27StartsWithIgnoringASCIICaseERKNS_10StringViewE(%"class.WTF::StringImpl"*, %"class.WTF::StringView"* dereferenceable(24)) local_unnamed_addr #5

declare void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"*) local_unnamed_addr #5

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #2

declare void @_ZNK4base4Time7ExplodeEbPNS0_8ExplodedE(%"class.base::Time"*, i1 zeroext, %"struct.base::Time::Exploded"*) local_unnamed_addr #5

declare void @_ZN3WTF13StringBuilder6AppendEPKhj(%"class.WTF::StringBuilder"*, i8*, i32) local_unnamed_addr #5

declare void @_ZN3WTF13StringBuilder6AppendEPKDsj(%"class.WTF::StringBuilder"*, i16*, i32) local_unnamed_addr #5

; Function Attrs: nounwind readnone speculatable
declare { i33, i1 } @llvm.sadd.with.overflow.i33(i33, i33) #3

; Function Attrs: cold noreturn nounwind
declare void @llvm.trap() #9

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN3WTF13StringBuilder6AppendEh(%"class.WTF::StringBuilder"*, i8 zeroext) local_unnamed_addr #4 comdat align 2 {
  %3 = alloca i16, align 2
  %4 = alloca i8, align 1
  store i8 %1, i8* %4, align 1
  %5 = getelementptr inbounds %"class.WTF::StringBuilder", %"class.WTF::StringBuilder"* %0, i64 0, i32 3
  %6 = load i8, i8* %5, align 4, !range !3
  %7 = icmp eq i8 %6, 0
  br i1 %7, label %8, label %35

8:                                                ; preds = %2
  %9 = zext i8 %1 to i16
  %10 = bitcast i16* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 2, i8* nonnull %10)
  store i16 %9, i16* %3, align 2
  %11 = getelementptr inbounds %"class.WTF::StringBuilder", %"class.WTF::StringBuilder"* %0, i64 0, i32 4
  %12 = load i8, i8* %11, align 1, !range !3
  %13 = icmp eq i8 %12, 0
  br i1 %13, label %14, label %15

14:                                               ; preds = %8
  tail call void @_ZN3WTF13StringBuilder14CreateBuffer16Ej(%"class.WTF::StringBuilder"* %0, i32 1) #12
  br label %15

15:                                               ; preds = %14, %8
  %16 = getelementptr inbounds %"class.WTF::StringBuilder", %"class.WTF::StringBuilder"* %0, i64 0, i32 1
  %17 = getelementptr inbounds %"class.WTF::StringBuilder", %"class.WTF::StringBuilder"* %0, i64 0, i32 1, i32 0, i32 0, i32 0, i32 2
  %18 = load i32, i32* %17, align 4
  %19 = getelementptr inbounds %"class.WTF::StringBuilder", %"class.WTF::StringBuilder"* %0, i64 0, i32 1, i32 0, i32 0, i32 0, i32 1
  %20 = load i32, i32* %19, align 8
  %21 = icmp eq i32 %18, %20
  br i1 %21, label %29, label %22, !prof !4

22:                                               ; preds = %15
  %23 = bitcast %union.anon.3* %16 to i16**
  %24 = load i16*, i16** %23, align 8
  %25 = zext i32 %18 to i64
  %26 = getelementptr inbounds i16, i16* %24, i64 %25
  store i16 %9, i16* %26, align 2
  %27 = load i32, i32* %17, align 4
  %28 = add i32 %27, 1
  store i32 %28, i32* %17, align 4
  br label %31

29:                                               ; preds = %15
  %30 = bitcast %union.anon.3* %16 to %"class.WTF::Vector.4"*
  call void @_ZN3WTF6VectorIDsLj8ENS_18PartitionAllocatorEE14AppendSlowCaseIRDsEEvOT_(%"class.WTF::Vector.4"* %30, i16* nonnull dereferenceable(2) %3) #12
  br label %31

31:                                               ; preds = %22, %29
  %32 = getelementptr inbounds %"class.WTF::StringBuilder", %"class.WTF::StringBuilder"* %0, i64 0, i32 2
  %33 = load i32, i32* %32, align 8
  %34 = add i32 %33, 1
  store i32 %34, i32* %32, align 8
  call void @llvm.lifetime.end.p0i8(i64 2, i8* nonnull %10)
  br label %59

35:                                               ; preds = %2
  %36 = getelementptr inbounds %"class.WTF::StringBuilder", %"class.WTF::StringBuilder"* %0, i64 0, i32 4
  %37 = load i8, i8* %36, align 1, !range !3
  %38 = icmp eq i8 %37, 0
  br i1 %38, label %39, label %40

39:                                               ; preds = %35
  tail call void @_ZN3WTF13StringBuilder13CreateBuffer8Ej(%"class.WTF::StringBuilder"* %0, i32 1) #12
  br label %40

40:                                               ; preds = %35, %39
  %41 = getelementptr inbounds %"class.WTF::StringBuilder", %"class.WTF::StringBuilder"* %0, i64 0, i32 1, i32 0
  %42 = getelementptr inbounds %"class.WTF::StringBuilder", %"class.WTF::StringBuilder"* %0, i64 0, i32 1, i32 0, i32 0, i32 0, i32 2
  %43 = load i32, i32* %42, align 4
  %44 = getelementptr inbounds %"class.WTF::StringBuilder", %"class.WTF::StringBuilder"* %0, i64 0, i32 1, i32 0, i32 0, i32 0, i32 1
  %45 = load i32, i32* %44, align 8
  %46 = icmp eq i32 %43, %45
  br i1 %46, label %54, label %47, !prof !4

47:                                               ; preds = %40
  %48 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %41, i64 0, i32 0, i32 0, i32 0
  %49 = load i8*, i8** %48, align 8
  %50 = zext i32 %43 to i64
  %51 = getelementptr inbounds i8, i8* %49, i64 %50
  store i8 %1, i8* %51, align 1
  %52 = load i32, i32* %42, align 4
  %53 = add i32 %52, 1
  store i32 %53, i32* %42, align 4
  br label %55

54:                                               ; preds = %40
  call void @_ZN3WTF6VectorIhLj16ENS_18PartitionAllocatorEE14AppendSlowCaseIRhEEvOT_(%"class.WTF::Vector"* %41, i8* nonnull dereferenceable(1) %4) #12
  br label %55

55:                                               ; preds = %47, %54
  %56 = getelementptr inbounds %"class.WTF::StringBuilder", %"class.WTF::StringBuilder"* %0, i64 0, i32 2
  %57 = load i32, i32* %56, align 8
  %58 = add i32 %57, 1
  store i32 %58, i32* %56, align 8
  br label %59

59:                                               ; preds = %55, %31
  ret void
}

declare void @_ZN3WTF13StringBuilder14CreateBuffer16Ej(%"class.WTF::StringBuilder"*, i32) local_unnamed_addr #5

; Function Attrs: noinline nounwind ssp uwtable
define linkonce_odr hidden void @_ZN3WTF6VectorIDsLj8ENS_18PartitionAllocatorEE14AppendSlowCaseIRDsEEvOT_(%"class.WTF::Vector.4"*, i16* dereferenceable(2)) local_unnamed_addr #10 comdat align 2 {
  %3 = getelementptr inbounds %"class.WTF::Vector.4", %"class.WTF::Vector.4"* %0, i64 0, i32 0, i32 0, i32 2
  %4 = load i32, i32* %3, align 4
  %5 = add i32 %4, 1
  %6 = getelementptr inbounds %"class.WTF::Vector.4", %"class.WTF::Vector.4"* %0, i64 0, i32 0, i32 0, i32 0
  %7 = load i16*, i16** %6, align 8
  %8 = icmp ugt i16* %7, %1
  br i1 %8, label %13, label %9

9:                                                ; preds = %2
  %10 = zext i32 %4 to i64
  %11 = getelementptr inbounds i16, i16* %7, i64 %10
  %12 = icmp ugt i16* %11, %1
  br i1 %12, label %15, label %13

13:                                               ; preds = %9, %2
  tail call void @_ZN3WTF6VectorIDsLj8ENS_18PartitionAllocatorEE14ExpandCapacityEj(%"class.WTF::Vector.4"* %0, i32 %5) #12
  %14 = load i16*, i16** %6, align 8
  br label %22

15:                                               ; preds = %9
  %16 = ptrtoint i16* %1 to i64
  %17 = ptrtoint i16* %7 to i64
  %18 = sub i64 %16, %17
  %19 = ashr exact i64 %18, 1
  tail call void @_ZN3WTF6VectorIDsLj8ENS_18PartitionAllocatorEE14ExpandCapacityEj(%"class.WTF::Vector.4"* %0, i32 %5) #12
  %20 = load i16*, i16** %6, align 8
  %21 = getelementptr inbounds i16, i16* %20, i64 %19
  br label %22

22:                                               ; preds = %13, %15
  %23 = phi i16* [ %14, %13 ], [ %20, %15 ]
  %24 = phi i16* [ %1, %13 ], [ %21, %15 ]
  %25 = load i32, i32* %3, align 4
  %26 = zext i32 %25 to i64
  %27 = getelementptr inbounds i16, i16* %23, i64 %26
  %28 = load i16, i16* %24, align 2
  store i16 %28, i16* %27, align 2
  %29 = load i32, i32* %3, align 4
  %30 = add i32 %29, 1
  store i32 %30, i32* %3, align 4
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN3WTF6VectorIDsLj8ENS_18PartitionAllocatorEE14ExpandCapacityEj(%"class.WTF::Vector.4"*, i32) local_unnamed_addr #4 comdat align 2 {
  %3 = alloca %"class.logging::CheckOpResult", align 8
  %4 = alloca %"class.logging::CheckOpResult", align 8
  %5 = alloca %"class.logging::CheckError", align 8
  %6 = getelementptr inbounds %"class.WTF::Vector.4", %"class.WTF::Vector.4"* %0, i64 0, i32 0, i32 0, i32 1
  %7 = load i32, i32* %6, align 8
  %8 = shl i32 %7, 1
  %9 = bitcast %"class.logging::CheckOpResult"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %9) #12
  %10 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %4, i64 0, i32 0
  store i8* inttoptr (i64 -6148914691236517206 to i8*), i8** %10, align 8
  %11 = bitcast %"class.logging::CheckOpResult"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %11)
  %12 = icmp ugt i32 %8, %7
  br i1 %12, label %13, label %14

13:                                               ; preds = %2
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %11)
  store i8* null, i8** %10, align 8
  br label %23

14:                                               ; preds = %2
  %15 = tail call i8* @_ZN7logging15CheckOpValueStrEj(i32 %8) #12
  %16 = tail call i8* @_ZN7logging15CheckOpValueStrEj(i32 %7) #12
  call void @_ZN7logging13CheckOpResultC1EPKcPcS3_(%"class.logging::CheckOpResult"* nonnull %3, i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str.6, i64 0, i64 0), i8* %15, i8* %16) #12
  %17 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %3, i64 0, i32 0
  %18 = load i8*, i8** %17, align 8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %11)
  store i8* %18, i8** %10, align 8
  %19 = icmp eq i8* %18, null
  br i1 %19, label %23, label %20

20:                                               ; preds = %14
  %21 = bitcast %"class.logging::CheckError"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %21) #12
  call void @_ZN7logging10CheckError7CheckOpEPKciPNS_13CheckOpResultE(%"class.logging::CheckError"* nonnull sret %5, i8* getelementptr inbounds ([55 x i8], [55 x i8]* @.str.7, i64 0, i64 0), i32 1715, %"class.logging::CheckOpResult"* nonnull %4) #12
  %22 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %5) #12
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %5) #12
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %21) #12
  br label %23

23:                                               ; preds = %13, %14, %20
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %9) #12
  %24 = icmp ugt i32 %8, 4
  %25 = select i1 %24, i32 %8, i32 4
  %26 = icmp ugt i32 %25, %1
  %27 = select i1 %26, i32 %25, i32 %1
  %28 = load i32, i32* %6, align 8
  %29 = icmp ult i32 %28, %27
  br i1 %29, label %30, label %51, !prof !2

30:                                               ; preds = %23
  %31 = getelementptr inbounds %"class.WTF::Vector.4", %"class.WTF::Vector.4"* %0, i64 0, i32 0, i32 0, i32 0
  %32 = load i16*, i16** %31, align 8
  %33 = icmp eq i16* %32, null
  br i1 %33, label %34, label %50

34:                                               ; preds = %30
  %35 = icmp ugt i32 %27, 8
  br i1 %35, label %36, label %44

36:                                               ; preds = %34
  %37 = zext i32 %27 to i64
  %38 = call i64 @_ZN3WTF18PartitionAllocator13QuantizedSizeIDsEEmm(i64 %37) #12
  %39 = call i8* @_ZN3WTF18PartitionAllocator15AllocateBackingEmPKc(i64 %38, i8* getelementptr inbounds ([56 x i8], [56 x i8]* @__PRETTY_FUNCTION__._ZN3WTF21GetStringWithTypeNameIDsEEPKcv, i64 0, i64 0)) #12
  %40 = ptrtoint i8* %39 to i64
  %41 = bitcast %"class.WTF::Vector.4"* %0 to i64*
  store atomic i64 %40, i64* %41 monotonic, align 8
  %42 = lshr i64 %38, 1
  %43 = trunc i64 %42 to i32
  br label %48

44:                                               ; preds = %34
  %45 = getelementptr inbounds %"class.WTF::Vector.4", %"class.WTF::Vector.4"* %0, i64 0, i32 0, i32 1, i64 0
  %46 = ptrtoint i8* %45 to i64
  %47 = bitcast %"class.WTF::Vector.4"* %0 to i64*
  store atomic i64 %46, i64* %47 monotonic, align 8
  br label %48

48:                                               ; preds = %44, %36
  %49 = phi i32 [ 8, %44 ], [ %43, %36 ]
  store i32 %49, i32* %6, align 8
  br label %51

50:                                               ; preds = %30
  call void @_ZN3WTF6VectorIDsLj8ENS_18PartitionAllocatorEE16ReallocateBufferEj(%"class.WTF::Vector.4"* %0, i32 %27) #12
  br label %51

51:                                               ; preds = %23, %48, %50
  ret void
}

declare void @_ZN7logging10CheckError7CheckOpEPKciPNS_13CheckOpResultE(%"class.logging::CheckError"* sret, i8*, i32, %"class.logging::CheckOpResult"*) local_unnamed_addr #5

declare dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"*) local_unnamed_addr #5

; Function Attrs: nounwind
declare void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"*) unnamed_addr #11

declare i8* @_ZN7logging15CheckOpValueStrEj(i32) local_unnamed_addr #5

declare void @_ZN7logging13CheckOpResultC1EPKcPcS3_(%"class.logging::CheckOpResult"*, i8*, i8*, i8*) unnamed_addr #5

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN3WTF6VectorIDsLj8ENS_18PartitionAllocatorEE16ReallocateBufferEj(%"class.WTF::Vector.4"*, i32) local_unnamed_addr #4 comdat align 2 {
  %3 = icmp ult i32 %1, 9
  br i1 %3, label %4, label %29

4:                                                ; preds = %2
  %5 = getelementptr inbounds %"class.WTF::Vector.4", %"class.WTF::Vector.4"* %0, i64 0, i32 0, i32 0, i32 0
  %6 = load i16*, i16** %5, align 8
  %7 = icmp eq i16* %6, null
  %8 = getelementptr inbounds %"class.WTF::Vector.4", %"class.WTF::Vector.4"* %0, i64 0, i32 0, i32 1, i64 0
  %9 = bitcast i8* %8 to i16*
  %10 = icmp eq i16* %6, %9
  %11 = or i1 %10, %7
  br i1 %11, label %12, label %16

12:                                               ; preds = %4
  %13 = ptrtoint i8* %8 to i64
  %14 = bitcast %"class.WTF::Vector.4"* %0 to i64*
  store atomic i64 %13, i64* %14 monotonic, align 8
  %15 = getelementptr inbounds %"class.WTF::Vector.4", %"class.WTF::Vector.4"* %0, i64 0, i32 0, i32 0, i32 1
  store i32 8, i32* %15, align 8
  br label %58

16:                                               ; preds = %4
  %17 = getelementptr inbounds %"class.WTF::Vector.4", %"class.WTF::Vector.4"* %0, i64 0, i32 0, i32 0, i32 2
  %18 = load i32, i32* %17, align 4
  %19 = getelementptr inbounds %"class.WTF::Vector.4", %"class.WTF::Vector.4"* %0, i64 0, i32 0
  %20 = ptrtoint i8* %8 to i64
  %21 = bitcast %"class.WTF::Vector.4"* %0 to i64*
  store atomic i64 %20, i64* %21 monotonic, align 8
  %22 = getelementptr inbounds %"class.WTF::Vector.4", %"class.WTF::Vector.4"* %0, i64 0, i32 0, i32 0, i32 1
  store i32 8, i32* %22, align 8
  %23 = icmp eq i8* %8, null
  br i1 %23, label %28, label %24, !prof !4

24:                                               ; preds = %16
  %25 = zext i32 %18 to i64
  %26 = bitcast i16* %6 to i8*
  %27 = shl nuw nsw i64 %25, 1
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 2 %8, i8* nonnull align 2 %26, i64 %27, i1 false) #12
  br label %28

28:                                               ; preds = %24, %16
  tail call void @_ZN3WTF12VectorBufferIDsLj8ENS_18PartitionAllocatorEE22ReallyDeallocateBufferEPDs(%"class.WTF::VectorBuffer.5"* %19, i16* nonnull %6) #12
  br label %58

29:                                               ; preds = %2
  %30 = zext i32 %1 to i64
  %31 = tail call i64 @_ZN3WTF18PartitionAllocator13QuantizedSizeIDsEEmm(i64 %30) #12
  %32 = tail call i8* @_ZN3WTF18PartitionAllocator15AllocateBackingEmPKc(i64 %31, i8* getelementptr inbounds ([56 x i8], [56 x i8]* @__PRETTY_FUNCTION__._ZN3WTF21GetStringWithTypeNameIDsEEPKcv, i64 0, i64 0)) #12
  %33 = lshr i64 %31, 1
  %34 = ptrtoint i8* %32 to i64
  %35 = getelementptr inbounds %"class.WTF::Vector.4", %"class.WTF::Vector.4"* %0, i64 0, i32 0, i32 0, i32 0
  %36 = load i16*, i16** %35, align 8
  %37 = icmp ne i8* %32, null
  %38 = icmp ne i16* %36, null
  %39 = and i1 %37, %38
  br i1 %39, label %40, label %47, !prof !2

40:                                               ; preds = %29
  %41 = getelementptr inbounds %"class.WTF::Vector.4", %"class.WTF::Vector.4"* %0, i64 0, i32 0, i32 0, i32 2
  %42 = load i32, i32* %41, align 4
  %43 = zext i32 %42 to i64
  %44 = bitcast i16* %36 to i8*
  %45 = shl nuw nsw i64 %43, 1
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 2 %32, i8* nonnull align 2 %44, i64 %45, i1 false) #12
  %46 = load i16*, i16** %35, align 8
  br label %47

47:                                               ; preds = %29, %40
  %48 = phi i16* [ %36, %29 ], [ %46, %40 ]
  %49 = getelementptr inbounds %"class.WTF::Vector.4", %"class.WTF::Vector.4"* %0, i64 0, i32 0, i32 1, i64 0
  %50 = bitcast i8* %49 to i16*
  %51 = icmp eq i16* %48, %50
  br i1 %51, label %54, label %52, !prof !2

52:                                               ; preds = %47
  %53 = getelementptr inbounds %"class.WTF::Vector.4", %"class.WTF::Vector.4"* %0, i64 0, i32 0
  tail call void @_ZN3WTF12VectorBufferIDsLj8ENS_18PartitionAllocatorEE22ReallyDeallocateBufferEPDs(%"class.WTF::VectorBuffer.5"* %53, i16* %48) #12
  br label %54

54:                                               ; preds = %47, %52
  %55 = bitcast %"class.WTF::Vector.4"* %0 to i64*
  store atomic i64 %34, i64* %55 monotonic, align 8
  %56 = trunc i64 %33 to i32
  %57 = getelementptr inbounds %"class.WTF::Vector.4", %"class.WTF::Vector.4"* %0, i64 0, i32 0, i32 0, i32 1
  store i32 %56, i32* %57, align 8
  br label %58

58:                                               ; preds = %28, %54, %12
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden i64 @_ZN3WTF18PartitionAllocator13QuantizedSizeIDsEEmm(i64) local_unnamed_addr #4 comdat align 2 {
  %2 = alloca %"class.logging::CheckOpResult", align 8
  %3 = alloca %"class.logging::CheckOpResult", align 8
  %4 = alloca %"class.logging::CheckError", align 8
  %5 = bitcast %"class.logging::CheckOpResult"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %5) #12
  %6 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %3, i64 0, i32 0
  store i8* inttoptr (i64 -6148914691236517206 to i8*), i8** %6, align 8
  %7 = bitcast %"class.logging::CheckOpResult"* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %7)
  %8 = icmp ugt i64 %0, 1072693248
  br i1 %8, label %10, label %9

9:                                                ; preds = %1
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %7)
  store i8* null, i8** %6, align 8
  br label %19

10:                                               ; preds = %1
  %11 = tail call i8* @_ZN7logging15CheckOpValueStrEm(i64 %0) #12
  %12 = tail call i8* @_ZN7logging15CheckOpValueStrEm(i64 1072693248) #12
  call void @_ZN7logging13CheckOpResultC1EPKcPcS3_(%"class.logging::CheckOpResult"* nonnull %2, i8* getelementptr inbounds ([44 x i8], [44 x i8]* @.str.9, i64 0, i64 0), i8* %11, i8* %12) #12
  %13 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %2, i64 0, i32 0
  %14 = load i8*, i8** %13, align 8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %7)
  store i8* %14, i8** %6, align 8
  %15 = icmp eq i8* %14, null
  br i1 %15, label %19, label %16

16:                                               ; preds = %10
  %17 = bitcast %"class.logging::CheckError"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %17) #12
  call void @_ZN7logging10CheckError7CheckOpEPKciPNS_13CheckOpResultE(%"class.logging::CheckError"* nonnull sret %4, i8* getelementptr inbounds ([78 x i8], [78 x i8]* @.str.10, i64 0, i64 0), i32 31, %"class.logging::CheckOpResult"* nonnull %3) #12
  %18 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %4) #12
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %4) #12
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %17) #12
  br label %19

19:                                               ; preds = %9, %10, %16
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %5) #12
  %20 = shl i64 %0, 1
  %21 = call i64 @_ZN3WTF10Partitions23BufferPotentialCapacityEm(i64 %20) #12
  ret i64 %21
}

declare i64 @_ZN3WTF10Partitions23BufferPotentialCapacityEm(i64) local_unnamed_addr #5

declare i8* @_ZN7logging15CheckOpValueStrEm(i64) local_unnamed_addr #5

declare i8* @_ZN3WTF18PartitionAllocator15AllocateBackingEmPKc(i64, i8*) local_unnamed_addr #5

; Function Attrs: noinline nounwind ssp uwtable
define linkonce_odr hidden void @_ZN3WTF12VectorBufferIDsLj8ENS_18PartitionAllocatorEE22ReallyDeallocateBufferEPDs(%"class.WTF::VectorBuffer.5"*, i16*) local_unnamed_addr #10 comdat align 2 {
  %3 = bitcast i16* %1 to i8*
  tail call void @_ZN3WTF18PartitionAllocator11FreeBackingEPv(i8* %3) #12
  ret void
}

declare void @_ZN3WTF18PartitionAllocator11FreeBackingEPv(i8*) local_unnamed_addr #5

declare void @_ZN3WTF13StringBuilder13CreateBuffer8Ej(%"class.WTF::StringBuilder"*, i32) local_unnamed_addr #5

; Function Attrs: noinline nounwind ssp uwtable
define linkonce_odr hidden void @_ZN3WTF6VectorIhLj16ENS_18PartitionAllocatorEE14AppendSlowCaseIRhEEvOT_(%"class.WTF::Vector"*, i8* dereferenceable(1)) local_unnamed_addr #10 comdat align 2 {
  %3 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %0, i64 0, i32 0, i32 0, i32 2
  %4 = load i32, i32* %3, align 4
  %5 = add i32 %4, 1
  %6 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %0, i64 0, i32 0, i32 0, i32 0
  %7 = load i8*, i8** %6, align 8
  %8 = icmp ugt i8* %7, %1
  br i1 %8, label %13, label %9

9:                                                ; preds = %2
  %10 = zext i32 %4 to i64
  %11 = getelementptr inbounds i8, i8* %7, i64 %10
  %12 = icmp ugt i8* %11, %1
  br i1 %12, label %15, label %13

13:                                               ; preds = %9, %2
  tail call void @_ZN3WTF6VectorIhLj16ENS_18PartitionAllocatorEE14ExpandCapacityEj(%"class.WTF::Vector"* %0, i32 %5) #12
  %14 = load i8*, i8** %6, align 8
  br label %21

15:                                               ; preds = %9
  %16 = ptrtoint i8* %1 to i64
  %17 = ptrtoint i8* %7 to i64
  %18 = sub i64 %16, %17
  tail call void @_ZN3WTF6VectorIhLj16ENS_18PartitionAllocatorEE14ExpandCapacityEj(%"class.WTF::Vector"* %0, i32 %5) #12
  %19 = load i8*, i8** %6, align 8
  %20 = getelementptr inbounds i8, i8* %19, i64 %18
  br label %21

21:                                               ; preds = %13, %15
  %22 = phi i8* [ %14, %13 ], [ %19, %15 ]
  %23 = phi i8* [ %1, %13 ], [ %20, %15 ]
  %24 = load i32, i32* %3, align 4
  %25 = zext i32 %24 to i64
  %26 = getelementptr inbounds i8, i8* %22, i64 %25
  %27 = load i8, i8* %23, align 1
  store i8 %27, i8* %26, align 1
  %28 = load i32, i32* %3, align 4
  %29 = add i32 %28, 1
  store i32 %29, i32* %3, align 4
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN3WTF6VectorIhLj16ENS_18PartitionAllocatorEE14ExpandCapacityEj(%"class.WTF::Vector"*, i32) local_unnamed_addr #4 comdat align 2 {
  %3 = alloca %"class.logging::CheckOpResult", align 8
  %4 = alloca %"class.logging::CheckOpResult", align 8
  %5 = alloca %"class.logging::CheckError", align 8
  %6 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %0, i64 0, i32 0, i32 0, i32 1
  %7 = load i32, i32* %6, align 8
  %8 = shl i32 %7, 1
  %9 = bitcast %"class.logging::CheckOpResult"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %9) #12
  %10 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %4, i64 0, i32 0
  store i8* inttoptr (i64 -6148914691236517206 to i8*), i8** %10, align 8
  %11 = bitcast %"class.logging::CheckOpResult"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %11)
  %12 = icmp ugt i32 %8, %7
  br i1 %12, label %13, label %14

13:                                               ; preds = %2
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %11)
  store i8* null, i8** %10, align 8
  br label %23

14:                                               ; preds = %2
  %15 = tail call i8* @_ZN7logging15CheckOpValueStrEj(i32 %8) #12
  %16 = tail call i8* @_ZN7logging15CheckOpValueStrEj(i32 %7) #12
  call void @_ZN7logging13CheckOpResultC1EPKcPcS3_(%"class.logging::CheckOpResult"* nonnull %3, i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str.6, i64 0, i64 0), i8* %15, i8* %16) #12
  %17 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %3, i64 0, i32 0
  %18 = load i8*, i8** %17, align 8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %11)
  store i8* %18, i8** %10, align 8
  %19 = icmp eq i8* %18, null
  br i1 %19, label %23, label %20

20:                                               ; preds = %14
  %21 = bitcast %"class.logging::CheckError"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %21) #12
  call void @_ZN7logging10CheckError7CheckOpEPKciPNS_13CheckOpResultE(%"class.logging::CheckError"* nonnull sret %5, i8* getelementptr inbounds ([55 x i8], [55 x i8]* @.str.7, i64 0, i64 0), i32 1715, %"class.logging::CheckOpResult"* nonnull %4) #12
  %22 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %5) #12
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %5) #12
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %21) #12
  br label %23

23:                                               ; preds = %13, %14, %20
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %9) #12
  %24 = icmp ugt i32 %8, 4
  %25 = select i1 %24, i32 %8, i32 4
  %26 = icmp ugt i32 %25, %1
  %27 = select i1 %26, i32 %25, i32 %1
  %28 = load i32, i32* %6, align 8
  %29 = icmp ult i32 %28, %27
  br i1 %29, label %30, label %50, !prof !2

30:                                               ; preds = %23
  %31 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %0, i64 0, i32 0, i32 0, i32 0
  %32 = load i8*, i8** %31, align 8
  %33 = icmp eq i8* %32, null
  br i1 %33, label %34, label %49

34:                                               ; preds = %30
  %35 = icmp ugt i32 %27, 16
  br i1 %35, label %36, label %43

36:                                               ; preds = %34
  %37 = zext i32 %27 to i64
  %38 = call i64 @_ZN3WTF18PartitionAllocator13QuantizedSizeIhEEmm(i64 %37) #12
  %39 = call i8* @_ZN3WTF18PartitionAllocator15AllocateBackingEmPKc(i64 %38, i8* getelementptr inbounds ([61 x i8], [61 x i8]* @__PRETTY_FUNCTION__._ZN3WTF21GetStringWithTypeNameIhEEPKcv, i64 0, i64 0)) #12
  %40 = ptrtoint i8* %39 to i64
  %41 = bitcast %"class.WTF::Vector"* %0 to i64*
  store atomic i64 %40, i64* %41 monotonic, align 8
  %42 = trunc i64 %38 to i32
  br label %47

43:                                               ; preds = %34
  %44 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %0, i64 0, i32 0, i32 1, i64 0
  %45 = ptrtoint i8* %44 to i64
  %46 = bitcast %"class.WTF::Vector"* %0 to i64*
  store atomic i64 %45, i64* %46 monotonic, align 8
  br label %47

47:                                               ; preds = %43, %36
  %48 = phi i32 [ 16, %43 ], [ %42, %36 ]
  store i32 %48, i32* %6, align 8
  br label %50

49:                                               ; preds = %30
  call void @_ZN3WTF6VectorIhLj16ENS_18PartitionAllocatorEE16ReallocateBufferEj(%"class.WTF::Vector"* %0, i32 %27) #12
  br label %50

50:                                               ; preds = %23, %47, %49
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN3WTF6VectorIhLj16ENS_18PartitionAllocatorEE16ReallocateBufferEj(%"class.WTF::Vector"*, i32) local_unnamed_addr #4 comdat align 2 {
  %3 = icmp ult i32 %1, 17
  br i1 %3, label %4, label %26

4:                                                ; preds = %2
  %5 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %0, i64 0, i32 0, i32 0, i32 0
  %6 = load i8*, i8** %5, align 8
  %7 = icmp eq i8* %6, null
  %8 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %0, i64 0, i32 0, i32 1, i64 0
  %9 = icmp eq i8* %8, %6
  %10 = or i1 %7, %9
  br i1 %10, label %11, label %15

11:                                               ; preds = %4
  %12 = ptrtoint i8* %8 to i64
  %13 = bitcast %"class.WTF::Vector"* %0 to i64*
  store atomic i64 %12, i64* %13 monotonic, align 8
  %14 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %0, i64 0, i32 0, i32 0, i32 1
  store i32 16, i32* %14, align 8
  br label %51

15:                                               ; preds = %4
  %16 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %0, i64 0, i32 0, i32 0, i32 2
  %17 = load i32, i32* %16, align 4
  %18 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %0, i64 0, i32 0
  %19 = ptrtoint i8* %8 to i64
  %20 = bitcast %"class.WTF::Vector"* %0 to i64*
  store atomic i64 %19, i64* %20 monotonic, align 8
  %21 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %0, i64 0, i32 0, i32 0, i32 1
  store i32 16, i32* %21, align 8
  %22 = icmp eq i8* %8, null
  br i1 %22, label %25, label %23, !prof !4

23:                                               ; preds = %15
  %24 = zext i32 %17 to i64
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 1 %8, i8* nonnull align 1 %6, i64 %24, i1 false) #12
  br label %25

25:                                               ; preds = %23, %15
  tail call void @_ZN3WTF12VectorBufferIhLj16ENS_18PartitionAllocatorEE22ReallyDeallocateBufferEPh(%"class.WTF::VectorBuffer"* %18, i8* nonnull %6) #12
  br label %51

26:                                               ; preds = %2
  %27 = zext i32 %1 to i64
  %28 = tail call i64 @_ZN3WTF18PartitionAllocator13QuantizedSizeIhEEmm(i64 %27) #12
  %29 = tail call i8* @_ZN3WTF18PartitionAllocator15AllocateBackingEmPKc(i64 %28, i8* getelementptr inbounds ([61 x i8], [61 x i8]* @__PRETTY_FUNCTION__._ZN3WTF21GetStringWithTypeNameIhEEPKcv, i64 0, i64 0)) #12
  %30 = ptrtoint i8* %29 to i64
  %31 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %0, i64 0, i32 0, i32 0, i32 0
  %32 = load i8*, i8** %31, align 8
  %33 = icmp ne i8* %29, null
  %34 = icmp ne i8* %32, null
  %35 = and i1 %33, %34
  br i1 %35, label %36, label %41, !prof !2

36:                                               ; preds = %26
  %37 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %0, i64 0, i32 0, i32 0, i32 2
  %38 = load i32, i32* %37, align 4
  %39 = zext i32 %38 to i64
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 1 %29, i8* nonnull align 1 %32, i64 %39, i1 false) #12
  %40 = load i8*, i8** %31, align 8
  br label %41

41:                                               ; preds = %26, %36
  %42 = phi i8* [ %32, %26 ], [ %40, %36 ]
  %43 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %0, i64 0, i32 0, i32 1, i64 0
  %44 = icmp eq i8* %43, %42
  br i1 %44, label %47, label %45, !prof !2

45:                                               ; preds = %41
  %46 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %0, i64 0, i32 0
  tail call void @_ZN3WTF12VectorBufferIhLj16ENS_18PartitionAllocatorEE22ReallyDeallocateBufferEPh(%"class.WTF::VectorBuffer"* %46, i8* %42) #12
  br label %47

47:                                               ; preds = %41, %45
  %48 = bitcast %"class.WTF::Vector"* %0 to i64*
  store atomic i64 %30, i64* %48 monotonic, align 8
  %49 = trunc i64 %28 to i32
  %50 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %0, i64 0, i32 0, i32 0, i32 1
  store i32 %49, i32* %50, align 8
  br label %51

51:                                               ; preds = %25, %47, %11
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden i64 @_ZN3WTF18PartitionAllocator13QuantizedSizeIhEEmm(i64) local_unnamed_addr #4 comdat align 2 {
  %2 = alloca %"class.logging::CheckOpResult", align 8
  %3 = alloca %"class.logging::CheckOpResult", align 8
  %4 = alloca %"class.logging::CheckError", align 8
  %5 = bitcast %"class.logging::CheckOpResult"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %5) #12
  %6 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %3, i64 0, i32 0
  store i8* inttoptr (i64 -6148914691236517206 to i8*), i8** %6, align 8
  %7 = bitcast %"class.logging::CheckOpResult"* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %7)
  %8 = icmp ugt i64 %0, 2145386496
  br i1 %8, label %10, label %9

9:                                                ; preds = %1
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %7)
  store i8* null, i8** %6, align 8
  br label %19

10:                                               ; preds = %1
  %11 = tail call i8* @_ZN7logging15CheckOpValueStrEm(i64 %0) #12
  %12 = tail call i8* @_ZN7logging15CheckOpValueStrEm(i64 2145386496) #12
  call void @_ZN7logging13CheckOpResultC1EPKcPcS3_(%"class.logging::CheckOpResult"* nonnull %2, i8* getelementptr inbounds ([44 x i8], [44 x i8]* @.str.9, i64 0, i64 0), i8* %11, i8* %12) #12
  %13 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %2, i64 0, i32 0
  %14 = load i8*, i8** %13, align 8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %7)
  store i8* %14, i8** %6, align 8
  %15 = icmp eq i8* %14, null
  br i1 %15, label %19, label %16

16:                                               ; preds = %10
  %17 = bitcast %"class.logging::CheckError"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %17) #12
  call void @_ZN7logging10CheckError7CheckOpEPKciPNS_13CheckOpResultE(%"class.logging::CheckError"* nonnull sret %4, i8* getelementptr inbounds ([78 x i8], [78 x i8]* @.str.10, i64 0, i64 0), i32 31, %"class.logging::CheckOpResult"* nonnull %3) #12
  %18 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %4) #12
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %4) #12
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %17) #12
  br label %19

19:                                               ; preds = %9, %10, %16
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %5) #12
  %20 = call i64 @_ZN3WTF10Partitions23BufferPotentialCapacityEm(i64 %0) #12
  ret i64 %20
}

; Function Attrs: noinline nounwind ssp uwtable
define linkonce_odr hidden void @_ZN3WTF12VectorBufferIhLj16ENS_18PartitionAllocatorEE22ReallyDeallocateBufferEPh(%"class.WTF::VectorBuffer"*, i8*) local_unnamed_addr #10 comdat align 2 {
  tail call void @_ZN3WTF18PartitionAllocator11FreeBackingEPv(i8* %1) #12
  ret void
}

declare void @_ZN3WTF13StringBuilder5ClearEv(%"class.WTF::StringBuilder"*) local_unnamed_addr #5

; Function Attrs: nounwind readnone speculatable
declare <2 x double> @llvm.floor.v2f64(<2 x double>) #3

attributes #0 = { norecurse nounwind readnone ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind readnone ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind }
attributes #3 = { nounwind readnone speculatable }
attributes #4 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { argmemonly nofree nounwind readonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { nofree nounwind readonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #8 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #9 = { cold noreturn nounwind }
attributes #10 = { noinline nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #11 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #12 = { nounwind }
attributes #13 = { nounwind readonly }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{!"branch_weights", i32 2000, i32 1}
!3 = !{i8 0, i8 2}
!4 = !{!"branch_weights", i32 1, i32 2000}
