; ModuleID = '../../base/third_party/double_conversion/double-conversion/string-to-double.cc'
source_filename = "../../base/third_party/double_conversion/double-conversion/string-to-double.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"class.std::__1::ctype" = type <{ %"class.std::__1::locale::facet", i16*, i8, [7 x i8] }>
%"class.std::__1::locale::facet" = type { %"class.std::__1::__shared_count" }
%"class.std::__1::__shared_count" = type { i32 (...)**, i64 }
%"class.std::__1::locale::id" = type <{ %"struct.std::__1::once_flag", i32, [4 x i8] }>
%"struct.std::__1::once_flag" = type { i64 }
%"class.double_conversion::StringToDoubleConverter" = type <{ i32, [4 x i8], double, double, i8*, i8*, i16, [6 x i8] }>
%"class.std::__1::locale" = type { %"class.std::__1::locale::__imp"* }
%"class.std::__1::locale::__imp" = type opaque

$_ZNK17double_conversion23StringToDoubleConverter12StringToIeeeIPKcEEdT_ibPi = comdat any

$_ZNK17double_conversion23StringToDoubleConverter12StringToIeeeIPKtEEdT_ibPi = comdat any

@_ZZN17double_conversion12_GLOBAL__N_17ToLowerEcE5cType = internal unnamed_addr global %"class.std::__1::ctype"* null, align 8
@_ZGVZN17double_conversion12_GLOBAL__N_17ToLowerEcE5cType = internal global i64 0, align 8
@_ZNSt3__15ctypeIcE2idE = external global %"class.std::__1::locale::id", align 8

; Function Attrs: nounwind ssp uwtable
define hidden double @_ZNK17double_conversion23StringToDoubleConverter14StringToDoubleEPKciPi(%"class.double_conversion::StringToDoubleConverter"*, i8*, i32, i32*) local_unnamed_addr #0 align 2 {
  %5 = tail call double @_ZNK17double_conversion23StringToDoubleConverter12StringToIeeeIPKcEEdT_ibPi(%"class.double_conversion::StringToDoubleConverter"* %0, i8* %1, i32 %2, i1 zeroext true, i32* %3)
  ret double %5
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden double @_ZNK17double_conversion23StringToDoubleConverter12StringToIeeeIPKcEEdT_ibPi(%"class.double_conversion::StringToDoubleConverter"*, i8*, i32, i1 zeroext, i32*) local_unnamed_addr #0 comdat align 2 {
  %6 = alloca [782 x i8], align 16
  %7 = alloca i8, align 1
  %8 = alloca i8*, align 8
  %9 = ptrtoint i8* %1 to i64
  %10 = sext i32 %2 to i64
  %11 = getelementptr inbounds i8, i8* %1, i64 %10
  store i32 0, i32* %4, align 4
  %12 = getelementptr inbounds %"class.double_conversion::StringToDoubleConverter", %"class.double_conversion::StringToDoubleConverter"* %0, i64 0, i32 0
  %13 = load i32, i32* %12, align 8
  %14 = and i32 %13, 4
  %15 = icmp ne i32 %14, 0
  %16 = and i32 %13, 8
  %17 = icmp ne i32 %16, 0
  %18 = and i32 %13, 16
  %19 = icmp ne i32 %18, 0
  %20 = and i32 %13, 32
  %21 = icmp ne i32 %20, 0
  %22 = and i32 %13, 64
  %23 = icmp ne i32 %22, 0
  %24 = icmp eq i32 %2, 0
  br i1 %24, label %25, label %28

25:                                               ; preds = %5
  %26 = getelementptr inbounds %"class.double_conversion::StringToDoubleConverter", %"class.double_conversion::StringToDoubleConverter"* %0, i64 0, i32 2
  %27 = load double, double* %26, align 8
  br label %1692

28:                                               ; preds = %5
  %29 = and i32 %13, 24
  %30 = icmp eq i32 %29, 0
  br i1 %30, label %56, label %31

31:                                               ; preds = %28
  %32 = load i8, i8* %1, align 1
  %33 = sext i8 %32 to i32
  %34 = tail call fastcc zeroext i1 @_ZN17double_conversionL12isWhitespaceEi(i32 %33) #5
  br i1 %34, label %39, label %48

35:                                               ; preds = %39
  %36 = load i8, i8* %41, align 1
  %37 = sext i8 %36 to i32
  %38 = tail call fastcc zeroext i1 @_ZN17double_conversionL12isWhitespaceEi(i32 %37) #5
  br i1 %38, label %39, label %46

39:                                               ; preds = %31, %35
  %40 = phi i8* [ %41, %35 ], [ %1, %31 ]
  %41 = getelementptr inbounds i8, i8* %40, i64 1
  %42 = icmp eq i8* %41, %11
  br i1 %42, label %43, label %35

43:                                               ; preds = %39
  store i32 %2, i32* %4, align 4
  %44 = getelementptr inbounds %"class.double_conversion::StringToDoubleConverter", %"class.double_conversion::StringToDoubleConverter"* %0, i64 0, i32 2
  %45 = load double, double* %44, align 8
  br label %1692

46:                                               ; preds = %35
  %47 = ptrtoint i8* %41 to i64
  br label %48

48:                                               ; preds = %46, %31
  %49 = phi i64 [ %9, %31 ], [ %47, %46 ]
  %50 = inttoptr i64 %49 to i8*
  %51 = icmp eq i8* %50, %1
  %52 = or i1 %17, %51
  br i1 %52, label %56, label %53

53:                                               ; preds = %48
  %54 = getelementptr inbounds %"class.double_conversion::StringToDoubleConverter", %"class.double_conversion::StringToDoubleConverter"* %0, i64 0, i32 3
  %55 = load double, double* %54, align 8
  br label %1692

56:                                               ; preds = %28, %48
  %57 = phi i8* [ %50, %48 ], [ %1, %28 ]
  %58 = phi i64 [ %49, %48 ], [ %9, %28 ]
  %59 = load i8, i8* %57, align 1
  switch i8 %59, label %86 [
    i8 43, label %60
    i8 45, label %60
  ]

60:                                               ; preds = %56, %56
  %61 = icmp eq i8 %59, 45
  %62 = zext i1 %61 to i8
  %63 = getelementptr inbounds i8, i8* %57, i64 1
  %64 = icmp eq i8* %63, %11
  br i1 %64, label %75, label %65

65:                                               ; preds = %60, %71
  %66 = phi i64 [ %72, %71 ], [ 1, %60 ]
  %67 = getelementptr inbounds i8, i8* %57, i64 %66
  %68 = load i8, i8* %67, align 1
  %69 = sext i8 %68 to i32
  %70 = tail call fastcc zeroext i1 @_ZN17double_conversionL12isWhitespaceEi(i32 %69) #5
  br i1 %70, label %71, label %78

71:                                               ; preds = %65
  %72 = add nuw nsw i64 %66, 1
  %73 = getelementptr inbounds i8, i8* %57, i64 %72
  %74 = icmp eq i8* %73, %11
  br i1 %74, label %75, label %65

75:                                               ; preds = %71, %60
  %76 = getelementptr inbounds %"class.double_conversion::StringToDoubleConverter", %"class.double_conversion::StringToDoubleConverter"* %0, i64 0, i32 3
  %77 = load double, double* %76, align 8
  br label %1692

78:                                               ; preds = %65
  %79 = getelementptr inbounds i8, i8* %57, i64 %66
  %80 = ptrtoint i8* %79 to i64
  %81 = icmp eq i64 %66, 1
  %82 = or i1 %21, %81
  br i1 %82, label %86, label %83

83:                                               ; preds = %78
  %84 = getelementptr inbounds %"class.double_conversion::StringToDoubleConverter", %"class.double_conversion::StringToDoubleConverter"* %0, i64 0, i32 3
  %85 = load double, double* %84, align 8
  br label %1692

86:                                               ; preds = %78, %56
  %87 = phi i64 [ %58, %56 ], [ %80, %78 ]
  %88 = phi i8 [ 0, %56 ], [ %62, %78 ]
  %89 = getelementptr inbounds %"class.double_conversion::StringToDoubleConverter", %"class.double_conversion::StringToDoubleConverter"* %0, i64 0, i32 4
  %90 = load i8*, i8** %89, align 8
  %91 = icmp eq i8* %90, null
  br i1 %91, label %190, label %92

92:                                               ; preds = %86
  %93 = inttoptr i64 %87 to i8*
  %94 = load i8, i8* %93, align 1
  br i1 %23, label %95, label %113

95:                                               ; preds = %92
  %96 = load atomic i8, i8* bitcast (i64* @_ZGVZN17double_conversion12_GLOBAL__N_17ToLowerEcE5cType to i8*) acquire, align 8
  %97 = icmp eq i8 %96, 0
  br i1 %97, label %98, label %104, !prof !2

98:                                               ; preds = %95
  %99 = tail call i32 @__cxa_guard_acquire(i64* nonnull @_ZGVZN17double_conversion12_GLOBAL__N_17ToLowerEcE5cType) #5
  %100 = icmp eq i32 %99, 0
  br i1 %100, label %104, label %101

101:                                              ; preds = %98
  %102 = tail call dereferenceable(8) %"class.std::__1::locale"* @_ZNSt3__16locale7classicEv() #5
  %103 = tail call %"class.std::__1::locale::facet"* @_ZNKSt3__16locale9use_facetERNS0_2idE(%"class.std::__1::locale"* %102, %"class.std::__1::locale::id"* nonnull dereferenceable(16) @_ZNSt3__15ctypeIcE2idE) #5
  store %"class.std::__1::locale::facet"* %103, %"class.std::__1::locale::facet"** bitcast (%"class.std::__1::ctype"** @_ZZN17double_conversion12_GLOBAL__N_17ToLowerEcE5cType to %"class.std::__1::locale::facet"**), align 8
  tail call void @__cxa_guard_release(i64* nonnull @_ZGVZN17double_conversion12_GLOBAL__N_17ToLowerEcE5cType) #5
  br label %104

104:                                              ; preds = %101, %98, %95
  %105 = load %"class.std::__1::ctype"*, %"class.std::__1::ctype"** @_ZZN17double_conversion12_GLOBAL__N_17ToLowerEcE5cType, align 8
  %106 = bitcast %"class.std::__1::ctype"* %105 to i8 (%"class.std::__1::ctype"*, i8)***
  %107 = load i8 (%"class.std::__1::ctype"*, i8)**, i8 (%"class.std::__1::ctype"*, i8)*** %106, align 8
  %108 = getelementptr inbounds i8 (%"class.std::__1::ctype"*, i8)*, i8 (%"class.std::__1::ctype"*, i8)** %107, i64 5
  %109 = load i8 (%"class.std::__1::ctype"*, i8)*, i8 (%"class.std::__1::ctype"*, i8)** %108, align 8
  %110 = tail call signext i8 %109(%"class.std::__1::ctype"* %105, i8 signext %94) #5
  %111 = load i8, i8* %90, align 1
  %112 = icmp eq i8 %110, %111
  br i1 %112, label %116, label %190

113:                                              ; preds = %92
  %114 = load i8, i8* %90, align 1
  %115 = icmp eq i8 %114, %94
  br i1 %115, label %146, label %190

116:                                              ; preds = %104
  %117 = load i8*, i8** %89, align 8
  br label %118

118:                                              ; preds = %116, %137
  %119 = phi i8* [ %93, %116 ], [ %124, %137 ]
  %120 = phi i8* [ %117, %116 ], [ %121, %137 ]
  %121 = getelementptr inbounds i8, i8* %120, i64 1
  %122 = load i8, i8* %121, align 1
  %123 = icmp eq i8 %122, 0
  %124 = getelementptr inbounds i8, i8* %119, i64 1
  br i1 %123, label %161, label %125

125:                                              ; preds = %118
  %126 = icmp eq i8* %124, %11
  br i1 %126, label %158, label %127

127:                                              ; preds = %125
  %128 = load i8, i8* %124, align 1
  %129 = load atomic i8, i8* bitcast (i64* @_ZGVZN17double_conversion12_GLOBAL__N_17ToLowerEcE5cType to i8*) acquire, align 8
  %130 = icmp eq i8 %129, 0
  br i1 %130, label %131, label %137, !prof !2

131:                                              ; preds = %127
  %132 = tail call i32 @__cxa_guard_acquire(i64* nonnull @_ZGVZN17double_conversion12_GLOBAL__N_17ToLowerEcE5cType) #5
  %133 = icmp eq i32 %132, 0
  br i1 %133, label %137, label %134

134:                                              ; preds = %131
  %135 = tail call dereferenceable(8) %"class.std::__1::locale"* @_ZNSt3__16locale7classicEv() #5
  %136 = tail call %"class.std::__1::locale::facet"* @_ZNKSt3__16locale9use_facetERNS0_2idE(%"class.std::__1::locale"* %135, %"class.std::__1::locale::id"* nonnull dereferenceable(16) @_ZNSt3__15ctypeIcE2idE) #5
  store %"class.std::__1::locale::facet"* %136, %"class.std::__1::locale::facet"** bitcast (%"class.std::__1::ctype"** @_ZZN17double_conversion12_GLOBAL__N_17ToLowerEcE5cType to %"class.std::__1::locale::facet"**), align 8
  tail call void @__cxa_guard_release(i64* nonnull @_ZGVZN17double_conversion12_GLOBAL__N_17ToLowerEcE5cType) #5
  br label %137

137:                                              ; preds = %127, %131, %134
  %138 = load %"class.std::__1::ctype"*, %"class.std::__1::ctype"** @_ZZN17double_conversion12_GLOBAL__N_17ToLowerEcE5cType, align 8
  %139 = bitcast %"class.std::__1::ctype"* %138 to i8 (%"class.std::__1::ctype"*, i8)***
  %140 = load i8 (%"class.std::__1::ctype"*, i8)**, i8 (%"class.std::__1::ctype"*, i8)*** %139, align 8
  %141 = getelementptr inbounds i8 (%"class.std::__1::ctype"*, i8)*, i8 (%"class.std::__1::ctype"*, i8)** %140, i64 5
  %142 = load i8 (%"class.std::__1::ctype"*, i8)*, i8 (%"class.std::__1::ctype"*, i8)** %141, align 8
  %143 = tail call signext i8 %142(%"class.std::__1::ctype"* %138, i8 signext %128) #5
  %144 = load i8, i8* %121, align 1
  %145 = icmp eq i8 %143, %144
  br i1 %145, label %118, label %158

146:                                              ; preds = %113, %155
  %147 = phi i8* [ %152, %155 ], [ %93, %113 ]
  %148 = phi i8* [ %149, %155 ], [ %90, %113 ]
  %149 = getelementptr inbounds i8, i8* %148, i64 1
  %150 = load i8, i8* %149, align 1
  %151 = icmp eq i8 %150, 0
  %152 = getelementptr inbounds i8, i8* %147, i64 1
  br i1 %151, label %161, label %153

153:                                              ; preds = %146
  %154 = icmp eq i8* %152, %11
  br i1 %154, label %158, label %155

155:                                              ; preds = %153
  %156 = load i8, i8* %152, align 1
  %157 = icmp eq i8 %156, %150
  br i1 %157, label %146, label %158

158:                                              ; preds = %153, %155, %125, %137
  %159 = getelementptr inbounds %"class.double_conversion::StringToDoubleConverter", %"class.double_conversion::StringToDoubleConverter"* %0, i64 0, i32 3
  %160 = load double, double* %159, align 8
  br label %1692

161:                                              ; preds = %146, %118
  %162 = phi i8* [ %124, %118 ], [ %152, %146 ]
  %163 = and i32 %13, 20
  %164 = icmp ne i32 %163, 0
  %165 = icmp eq i8* %11, %162
  %166 = or i1 %164, %165
  br i1 %166, label %170, label %167

167:                                              ; preds = %161
  %168 = getelementptr inbounds %"class.double_conversion::StringToDoubleConverter", %"class.double_conversion::StringToDoubleConverter"* %0, i64 0, i32 3
  %169 = load double, double* %168, align 8
  br label %1692

170:                                              ; preds = %161
  %171 = or i1 %15, %165
  br i1 %171, label %183, label %172

172:                                              ; preds = %170, %177
  %173 = phi i8* [ %178, %177 ], [ %162, %170 ]
  %174 = load i8, i8* %173, align 1
  %175 = sext i8 %174 to i32
  %176 = tail call fastcc zeroext i1 @_ZN17double_conversionL12isWhitespaceEi(i32 %175) #5
  br i1 %176, label %177, label %180

177:                                              ; preds = %172
  %178 = getelementptr inbounds i8, i8* %173, i64 1
  %179 = icmp eq i8* %178, %11
  br i1 %179, label %183, label %172

180:                                              ; preds = %172
  %181 = getelementptr inbounds %"class.double_conversion::StringToDoubleConverter", %"class.double_conversion::StringToDoubleConverter"* %0, i64 0, i32 3
  %182 = load double, double* %181, align 8
  br label %1692

183:                                              ; preds = %177, %170
  %184 = phi i8* [ %162, %170 ], [ %11, %177 ]
  %185 = ptrtoint i8* %184 to i64
  %186 = sub i64 %185, %9
  %187 = trunc i64 %186 to i32
  store i32 %187, i32* %4, align 4
  %188 = icmp eq i8 %88, 0
  %189 = select i1 %188, double 0x7FF0000000000000, double 0xFFF0000000000000
  br label %1692

190:                                              ; preds = %104, %86, %113
  %191 = getelementptr inbounds %"class.double_conversion::StringToDoubleConverter", %"class.double_conversion::StringToDoubleConverter"* %0, i64 0, i32 5
  %192 = load i8*, i8** %191, align 8
  %193 = icmp eq i8* %192, null
  %194 = inttoptr i64 %87 to i8*
  br i1 %193, label %292, label %195

195:                                              ; preds = %190
  %196 = load i8, i8* %194, align 1
  br i1 %23, label %197, label %215

197:                                              ; preds = %195
  %198 = load atomic i8, i8* bitcast (i64* @_ZGVZN17double_conversion12_GLOBAL__N_17ToLowerEcE5cType to i8*) acquire, align 8
  %199 = icmp eq i8 %198, 0
  br i1 %199, label %200, label %206, !prof !2

200:                                              ; preds = %197
  %201 = tail call i32 @__cxa_guard_acquire(i64* nonnull @_ZGVZN17double_conversion12_GLOBAL__N_17ToLowerEcE5cType) #5
  %202 = icmp eq i32 %201, 0
  br i1 %202, label %206, label %203

203:                                              ; preds = %200
  %204 = tail call dereferenceable(8) %"class.std::__1::locale"* @_ZNSt3__16locale7classicEv() #5
  %205 = tail call %"class.std::__1::locale::facet"* @_ZNKSt3__16locale9use_facetERNS0_2idE(%"class.std::__1::locale"* %204, %"class.std::__1::locale::id"* nonnull dereferenceable(16) @_ZNSt3__15ctypeIcE2idE) #5
  store %"class.std::__1::locale::facet"* %205, %"class.std::__1::locale::facet"** bitcast (%"class.std::__1::ctype"** @_ZZN17double_conversion12_GLOBAL__N_17ToLowerEcE5cType to %"class.std::__1::locale::facet"**), align 8
  tail call void @__cxa_guard_release(i64* nonnull @_ZGVZN17double_conversion12_GLOBAL__N_17ToLowerEcE5cType) #5
  br label %206

206:                                              ; preds = %203, %200, %197
  %207 = load %"class.std::__1::ctype"*, %"class.std::__1::ctype"** @_ZZN17double_conversion12_GLOBAL__N_17ToLowerEcE5cType, align 8
  %208 = bitcast %"class.std::__1::ctype"* %207 to i8 (%"class.std::__1::ctype"*, i8)***
  %209 = load i8 (%"class.std::__1::ctype"*, i8)**, i8 (%"class.std::__1::ctype"*, i8)*** %208, align 8
  %210 = getelementptr inbounds i8 (%"class.std::__1::ctype"*, i8)*, i8 (%"class.std::__1::ctype"*, i8)** %209, i64 5
  %211 = load i8 (%"class.std::__1::ctype"*, i8)*, i8 (%"class.std::__1::ctype"*, i8)** %210, align 8
  %212 = tail call signext i8 %211(%"class.std::__1::ctype"* %207, i8 signext %196) #5
  %213 = load i8, i8* %192, align 1
  %214 = icmp eq i8 %212, %213
  br i1 %214, label %218, label %292

215:                                              ; preds = %195
  %216 = load i8, i8* %192, align 1
  %217 = icmp eq i8 %216, %196
  br i1 %217, label %248, label %294

218:                                              ; preds = %206
  %219 = load i8*, i8** %191, align 8
  br label %220

220:                                              ; preds = %218, %239
  %221 = phi i8* [ %194, %218 ], [ %226, %239 ]
  %222 = phi i8* [ %219, %218 ], [ %223, %239 ]
  %223 = getelementptr inbounds i8, i8* %222, i64 1
  %224 = load i8, i8* %223, align 1
  %225 = icmp eq i8 %224, 0
  %226 = getelementptr inbounds i8, i8* %221, i64 1
  br i1 %225, label %263, label %227

227:                                              ; preds = %220
  %228 = icmp eq i8* %226, %11
  br i1 %228, label %260, label %229

229:                                              ; preds = %227
  %230 = load i8, i8* %226, align 1
  %231 = load atomic i8, i8* bitcast (i64* @_ZGVZN17double_conversion12_GLOBAL__N_17ToLowerEcE5cType to i8*) acquire, align 8
  %232 = icmp eq i8 %231, 0
  br i1 %232, label %233, label %239, !prof !2

233:                                              ; preds = %229
  %234 = tail call i32 @__cxa_guard_acquire(i64* nonnull @_ZGVZN17double_conversion12_GLOBAL__N_17ToLowerEcE5cType) #5
  %235 = icmp eq i32 %234, 0
  br i1 %235, label %239, label %236

236:                                              ; preds = %233
  %237 = tail call dereferenceable(8) %"class.std::__1::locale"* @_ZNSt3__16locale7classicEv() #5
  %238 = tail call %"class.std::__1::locale::facet"* @_ZNKSt3__16locale9use_facetERNS0_2idE(%"class.std::__1::locale"* %237, %"class.std::__1::locale::id"* nonnull dereferenceable(16) @_ZNSt3__15ctypeIcE2idE) #5
  store %"class.std::__1::locale::facet"* %238, %"class.std::__1::locale::facet"** bitcast (%"class.std::__1::ctype"** @_ZZN17double_conversion12_GLOBAL__N_17ToLowerEcE5cType to %"class.std::__1::locale::facet"**), align 8
  tail call void @__cxa_guard_release(i64* nonnull @_ZGVZN17double_conversion12_GLOBAL__N_17ToLowerEcE5cType) #5
  br label %239

239:                                              ; preds = %229, %233, %236
  %240 = load %"class.std::__1::ctype"*, %"class.std::__1::ctype"** @_ZZN17double_conversion12_GLOBAL__N_17ToLowerEcE5cType, align 8
  %241 = bitcast %"class.std::__1::ctype"* %240 to i8 (%"class.std::__1::ctype"*, i8)***
  %242 = load i8 (%"class.std::__1::ctype"*, i8)**, i8 (%"class.std::__1::ctype"*, i8)*** %241, align 8
  %243 = getelementptr inbounds i8 (%"class.std::__1::ctype"*, i8)*, i8 (%"class.std::__1::ctype"*, i8)** %242, i64 5
  %244 = load i8 (%"class.std::__1::ctype"*, i8)*, i8 (%"class.std::__1::ctype"*, i8)** %243, align 8
  %245 = tail call signext i8 %244(%"class.std::__1::ctype"* %240, i8 signext %230) #5
  %246 = load i8, i8* %223, align 1
  %247 = icmp eq i8 %245, %246
  br i1 %247, label %220, label %260

248:                                              ; preds = %215, %257
  %249 = phi i8* [ %254, %257 ], [ %194, %215 ]
  %250 = phi i8* [ %251, %257 ], [ %192, %215 ]
  %251 = getelementptr inbounds i8, i8* %250, i64 1
  %252 = load i8, i8* %251, align 1
  %253 = icmp eq i8 %252, 0
  %254 = getelementptr inbounds i8, i8* %249, i64 1
  br i1 %253, label %263, label %255

255:                                              ; preds = %248
  %256 = icmp eq i8* %254, %11
  br i1 %256, label %260, label %257

257:                                              ; preds = %255
  %258 = load i8, i8* %254, align 1
  %259 = icmp eq i8 %258, %252
  br i1 %259, label %248, label %260

260:                                              ; preds = %255, %257, %227, %239
  %261 = getelementptr inbounds %"class.double_conversion::StringToDoubleConverter", %"class.double_conversion::StringToDoubleConverter"* %0, i64 0, i32 3
  %262 = load double, double* %261, align 8
  br label %1692

263:                                              ; preds = %248, %220
  %264 = phi i8* [ %226, %220 ], [ %254, %248 ]
  %265 = and i32 %13, 20
  %266 = icmp ne i32 %265, 0
  %267 = icmp eq i8* %11, %264
  %268 = or i1 %266, %267
  br i1 %268, label %272, label %269

269:                                              ; preds = %263
  %270 = getelementptr inbounds %"class.double_conversion::StringToDoubleConverter", %"class.double_conversion::StringToDoubleConverter"* %0, i64 0, i32 3
  %271 = load double, double* %270, align 8
  br label %1692

272:                                              ; preds = %263
  %273 = or i1 %15, %267
  br i1 %273, label %285, label %274

274:                                              ; preds = %272, %279
  %275 = phi i8* [ %280, %279 ], [ %264, %272 ]
  %276 = load i8, i8* %275, align 1
  %277 = sext i8 %276 to i32
  %278 = tail call fastcc zeroext i1 @_ZN17double_conversionL12isWhitespaceEi(i32 %277) #5
  br i1 %278, label %279, label %282

279:                                              ; preds = %274
  %280 = getelementptr inbounds i8, i8* %275, i64 1
  %281 = icmp eq i8* %280, %11
  br i1 %281, label %285, label %274

282:                                              ; preds = %274
  %283 = getelementptr inbounds %"class.double_conversion::StringToDoubleConverter", %"class.double_conversion::StringToDoubleConverter"* %0, i64 0, i32 3
  %284 = load double, double* %283, align 8
  br label %1692

285:                                              ; preds = %279, %272
  %286 = phi i8* [ %264, %272 ], [ %11, %279 ]
  %287 = ptrtoint i8* %286 to i64
  %288 = sub i64 %287, %9
  %289 = trunc i64 %288 to i32
  store i32 %289, i32* %4, align 4
  %290 = icmp eq i8 %88, 0
  %291 = select i1 %290, double 0x7FF8000000000000, double 0xFFF8000000000000
  br label %1692

292:                                              ; preds = %190, %206
  %293 = load i8, i8* %194, align 1
  br label %294

294:                                              ; preds = %292, %215
  %295 = phi i8 [ %293, %292 ], [ %196, %215 ]
  %296 = icmp eq i8 %295, 48
  br i1 %296, label %297, label %1243

297:                                              ; preds = %294
  %298 = getelementptr inbounds %"class.double_conversion::StringToDoubleConverter", %"class.double_conversion::StringToDoubleConverter"* %0, i64 0, i32 6
  %299 = load i16, i16* %298, align 8
  %300 = zext i16 %299 to i32
  %301 = icmp eq i16 %299, 0
  %302 = getelementptr inbounds i8, i8* %194, i64 1
  %303 = ptrtoint i8* %302 to i64
  %304 = icmp eq i8* %302, %11
  br i1 %301, label %305, label %306

305:                                              ; preds = %297
  br i1 %304, label %328, label %334

306:                                              ; preds = %297
  br i1 %304, label %328, label %307

307:                                              ; preds = %306
  %308 = getelementptr inbounds i8, i8* %194, i64 2
  %309 = icmp eq i8* %308, %11
  br i1 %309, label %334, label %310

310:                                              ; preds = %307
  %311 = load i8, i8* %302, align 1
  %312 = sext i8 %311 to i32
  %313 = icmp eq i32 %312, %300
  br i1 %313, label %314, label %324

314:                                              ; preds = %310
  %315 = load i8, i8* %308, align 1
  %316 = sext i8 %315 to i32
  %317 = add nsw i32 %316, -48
  %318 = icmp ult i32 %317, 10
  %319 = icmp slt i8 %315, 58
  %320 = and i1 %319, %318
  %321 = ptrtoint i8* %308 to i64
  %322 = select i1 %320, i64 %321, i64 %303
  %323 = select i1 %320, i8* %308, i8* %302
  br label %324

324:                                              ; preds = %314, %310
  %325 = phi i64 [ %303, %310 ], [ %322, %314 ]
  %326 = phi i8* [ %302, %310 ], [ %323, %314 ]
  %327 = icmp eq i8* %326, %11
  br i1 %327, label %328, label %334

328:                                              ; preds = %306, %324, %305
  %329 = phi i64 [ %303, %305 ], [ %325, %324 ], [ %303, %306 ]
  %330 = sub i64 %329, %9
  %331 = trunc i64 %330 to i32
  store i32 %331, i32* %4, align 4
  %332 = icmp eq i8 %88, 0
  %333 = select i1 %332, double 0.000000e+00, double -0.000000e+00
  br label %1692

334:                                              ; preds = %307, %324, %305
  %335 = phi i64 [ %303, %305 ], [ %325, %324 ], [ %303, %307 ]
  %336 = load i32, i32* %12, align 8
  %337 = trunc i32 %336 to i8
  %338 = icmp slt i8 %337, 0
  %339 = and i32 %336, 129
  %340 = icmp eq i32 %339, 0
  %341 = inttoptr i64 %335 to i8*
  %342 = load i8, i8* %341, align 1
  br i1 %340, label %1190, label %343

343:                                              ; preds = %334
  switch i8 %342, label %1238 [
    i8 120, label %344
    i8 88, label %344
    i8 48, label %1192
  ]

344:                                              ; preds = %343, %343
  %345 = getelementptr inbounds i8, i8* %341, i64 1
  %346 = ptrtoint i8* %345 to i64
  %347 = icmp eq i8* %345, %11
  br i1 %347, label %348, label %351

348:                                              ; preds = %344
  %349 = getelementptr inbounds %"class.double_conversion::StringToDoubleConverter", %"class.double_conversion::StringToDoubleConverter"* %0, i64 0, i32 3
  %350 = load double, double* %349, align 8
  br label %1692

351:                                              ; preds = %344
  br i1 %338, label %352, label %599

352:                                              ; preds = %351, %404
  %353 = phi i8* [ %405, %404 ], [ %345, %351 ]
  %354 = phi i8 [ 1, %404 ], [ 0, %351 ]
  %355 = load i8, i8* %353, align 1
  %356 = sext i8 %355 to i32
  %357 = add nsw i32 %356, -48
  %358 = icmp ult i32 %357, 10
  %359 = icmp slt i8 %355, 64
  %360 = and i1 %359, %358
  br i1 %360, label %362, label %361

361:                                              ; preds = %352
  switch i8 %355, label %463 [
    i8 102, label %362
    i8 101, label %362
    i8 100, label %362
    i8 99, label %362
    i8 98, label %362
    i8 97, label %362
    i8 70, label %362
    i8 69, label %362
    i8 68, label %362
    i8 67, label %362
    i8 66, label %362
    i8 65, label %362
    i8 46, label %406
  ]

362:                                              ; preds = %361, %361, %361, %361, %361, %361, %361, %361, %361, %361, %361, %361, %352
  br i1 %301, label %363, label %366

363:                                              ; preds = %362
  %364 = getelementptr inbounds i8, i8* %353, i64 1
  %365 = icmp eq i8* %364, %11
  br i1 %365, label %599, label %404

366:                                              ; preds = %362
  %367 = add i8 %355, -97
  %368 = icmp ult i8 %367, 6
  %369 = or i1 %368, %360
  br i1 %369, label %377, label %370

370:                                              ; preds = %366
  %371 = icmp sgt i8 %355, 64
  br i1 %371, label %375, label %372

372:                                              ; preds = %370
  %373 = getelementptr inbounds i8, i8* %353, i64 1
  %374 = icmp eq i8* %373, %11
  br i1 %374, label %599, label %404

375:                                              ; preds = %370
  %376 = icmp sgt i8 %355, 70
  br label %377

377:                                              ; preds = %375, %366
  %378 = phi i1 [ %376, %375 ], [ false, %366 ]
  %379 = getelementptr inbounds i8, i8* %353, i64 1
  %380 = icmp eq i8* %379, %11
  %381 = or i1 %380, %378
  br i1 %381, label %401, label %382

382:                                              ; preds = %377
  %383 = getelementptr inbounds i8, i8* %353, i64 2
  %384 = icmp eq i8* %383, %11
  br i1 %384, label %404, label %385

385:                                              ; preds = %382
  %386 = load i8, i8* %379, align 1
  %387 = sext i8 %386 to i32
  %388 = icmp eq i32 %387, %300
  br i1 %388, label %389, label %398

389:                                              ; preds = %385
  %390 = load i8, i8* %383, align 1
  %391 = sext i8 %390 to i32
  %392 = add nsw i32 %391, -48
  %393 = icmp ult i32 %392, 10
  %394 = icmp slt i8 %390, 64
  %395 = and i1 %394, %393
  br i1 %395, label %397, label %396

396:                                              ; preds = %389
  switch i8 %390, label %398 [
    i8 102, label %397
    i8 101, label %397
    i8 100, label %397
    i8 99, label %397
    i8 98, label %397
    i8 97, label %397
    i8 70, label %397
    i8 69, label %397
    i8 68, label %397
    i8 67, label %397
    i8 66, label %397
    i8 65, label %397
  ]

397:                                              ; preds = %396, %396, %396, %396, %396, %396, %396, %396, %396, %396, %396, %396, %389
  br label %398

398:                                              ; preds = %397, %396, %385
  %399 = phi i8* [ %383, %397 ], [ %379, %385 ], [ %379, %396 ]
  %400 = icmp eq i8* %399, %11
  br i1 %400, label %599, label %404

401:                                              ; preds = %377
  %402 = xor i1 %378, true
  %403 = or i1 %380, %402
  br i1 %403, label %599, label %404

404:                                              ; preds = %401, %398, %382, %372, %363
  %405 = phi i8* [ %379, %401 ], [ %364, %363 ], [ %399, %398 ], [ %373, %372 ], [ %379, %382 ]
  br label %352

406:                                              ; preds = %361
  %407 = getelementptr inbounds i8, i8* %353, i64 1
  %408 = icmp eq i8* %407, %11
  br i1 %408, label %599, label %409

409:                                              ; preds = %406, %461
  %410 = phi i8* [ %462, %461 ], [ %407, %406 ]
  %411 = phi i8 [ 1, %461 ], [ %354, %406 ]
  %412 = load i8, i8* %410, align 1
  %413 = sext i8 %412 to i32
  %414 = add nsw i32 %413, -48
  %415 = icmp ult i32 %414, 10
  %416 = icmp slt i8 %412, 64
  %417 = and i1 %416, %415
  br i1 %417, label %419, label %418

418:                                              ; preds = %409
  switch i8 %412, label %463 [
    i8 102, label %419
    i8 101, label %419
    i8 100, label %419
    i8 99, label %419
    i8 98, label %419
    i8 97, label %419
    i8 70, label %419
    i8 69, label %419
    i8 68, label %419
    i8 67, label %419
    i8 66, label %419
    i8 65, label %419
  ]

419:                                              ; preds = %418, %418, %418, %418, %418, %418, %418, %418, %418, %418, %418, %418, %409
  br i1 %301, label %420, label %423

420:                                              ; preds = %419
  %421 = getelementptr inbounds i8, i8* %410, i64 1
  %422 = icmp eq i8* %421, %11
  br i1 %422, label %599, label %461

423:                                              ; preds = %419
  %424 = add i8 %412, -97
  %425 = icmp ult i8 %424, 6
  %426 = or i1 %425, %417
  br i1 %426, label %434, label %427

427:                                              ; preds = %423
  %428 = icmp sgt i8 %412, 64
  br i1 %428, label %432, label %429

429:                                              ; preds = %427
  %430 = getelementptr inbounds i8, i8* %410, i64 1
  %431 = icmp eq i8* %430, %11
  br i1 %431, label %599, label %461

432:                                              ; preds = %427
  %433 = icmp sgt i8 %412, 70
  br label %434

434:                                              ; preds = %432, %423
  %435 = phi i1 [ %433, %432 ], [ false, %423 ]
  %436 = getelementptr inbounds i8, i8* %410, i64 1
  %437 = icmp eq i8* %436, %11
  %438 = or i1 %437, %435
  br i1 %438, label %458, label %439

439:                                              ; preds = %434
  %440 = getelementptr inbounds i8, i8* %410, i64 2
  %441 = icmp eq i8* %440, %11
  br i1 %441, label %461, label %442

442:                                              ; preds = %439
  %443 = load i8, i8* %436, align 1
  %444 = sext i8 %443 to i32
  %445 = icmp eq i32 %444, %300
  br i1 %445, label %446, label %455

446:                                              ; preds = %442
  %447 = load i8, i8* %440, align 1
  %448 = sext i8 %447 to i32
  %449 = add nsw i32 %448, -48
  %450 = icmp ult i32 %449, 10
  %451 = icmp slt i8 %447, 64
  %452 = and i1 %451, %450
  br i1 %452, label %454, label %453

453:                                              ; preds = %446
  switch i8 %447, label %455 [
    i8 102, label %454
    i8 101, label %454
    i8 100, label %454
    i8 99, label %454
    i8 98, label %454
    i8 97, label %454
    i8 70, label %454
    i8 69, label %454
    i8 68, label %454
    i8 67, label %454
    i8 66, label %454
    i8 65, label %454
  ]

454:                                              ; preds = %453, %453, %453, %453, %453, %453, %453, %453, %453, %453, %453, %453, %446
  br label %455

455:                                              ; preds = %454, %453, %442
  %456 = phi i8* [ %440, %454 ], [ %436, %442 ], [ %436, %453 ]
  %457 = icmp eq i8* %456, %11
  br i1 %457, label %599, label %461

458:                                              ; preds = %434
  %459 = xor i1 %435, true
  %460 = or i1 %437, %459
  br i1 %460, label %599, label %461

461:                                              ; preds = %458, %455, %439, %429, %420
  %462 = phi i8* [ %436, %458 ], [ %421, %420 ], [ %456, %455 ], [ %430, %429 ], [ %436, %439 ]
  br label %409

463:                                              ; preds = %361, %418
  %464 = phi i8 [ %412, %418 ], [ %355, %361 ]
  %465 = phi i8* [ %410, %418 ], [ %353, %361 ]
  %466 = phi i8 [ %411, %418 ], [ %354, %361 ]
  %467 = and i8 %466, 1
  %468 = icmp eq i8 %467, 0
  br i1 %468, label %599, label %469

469:                                              ; preds = %463
  switch i8 %464, label %599 [
    i8 112, label %470
    i8 80, label %470
  ]

470:                                              ; preds = %469, %469
  br i1 %301, label %471, label %474

471:                                              ; preds = %470
  %472 = getelementptr inbounds i8, i8* %465, i64 1
  %473 = icmp eq i8* %472, %11
  br i1 %473, label %599, label %502

474:                                              ; preds = %470
  %475 = add nsw i8 %464, -97
  %476 = icmp ugt i8 %475, 5
  %477 = getelementptr inbounds i8, i8* %465, i64 1
  %478 = icmp eq i8* %477, %11
  %479 = or i1 %476, %478
  br i1 %479, label %499, label %480

480:                                              ; preds = %474
  %481 = getelementptr inbounds i8, i8* %465, i64 2
  %482 = icmp eq i8* %481, %11
  br i1 %482, label %502, label %483

483:                                              ; preds = %480
  %484 = load i8, i8* %477, align 1
  %485 = sext i8 %484 to i32
  %486 = icmp eq i32 %485, %300
  br i1 %486, label %487, label %496

487:                                              ; preds = %483
  %488 = load i8, i8* %481, align 1
  %489 = sext i8 %488 to i32
  %490 = add nsw i32 %489, -48
  %491 = icmp ult i32 %490, 10
  %492 = icmp slt i8 %488, 64
  %493 = and i1 %492, %491
  br i1 %493, label %495, label %494

494:                                              ; preds = %487
  switch i8 %488, label %496 [
    i8 102, label %495
    i8 101, label %495
    i8 100, label %495
    i8 99, label %495
    i8 98, label %495
    i8 97, label %495
    i8 70, label %495
    i8 69, label %495
    i8 68, label %495
    i8 67, label %495
    i8 66, label %495
    i8 65, label %495
  ]

495:                                              ; preds = %494, %494, %494, %494, %494, %494, %494, %494, %494, %494, %494, %494, %487
  br label %496

496:                                              ; preds = %495, %494, %483
  %497 = phi i8* [ %481, %495 ], [ %477, %483 ], [ %477, %494 ]
  %498 = icmp eq i8* %497, %11
  br i1 %498, label %599, label %502

499:                                              ; preds = %474
  %500 = xor i1 %476, true
  %501 = or i1 %478, %500
  br i1 %501, label %599, label %502

502:                                              ; preds = %499, %496, %480, %471
  %503 = phi i8* [ %477, %499 ], [ %472, %471 ], [ %497, %496 ], [ %477, %480 ]
  %504 = load i8, i8* %503, align 1
  switch i8 %504, label %510 [
    i8 43, label %505
    i8 45, label %505
  ]

505:                                              ; preds = %502, %502
  %506 = getelementptr inbounds i8, i8* %503, i64 1
  %507 = icmp eq i8* %506, %11
  br i1 %507, label %599, label %508

508:                                              ; preds = %505
  %509 = load i8, i8* %506, align 1
  br label %510

510:                                              ; preds = %508, %502
  %511 = phi i8 [ %509, %508 ], [ %504, %502 ]
  %512 = phi i8* [ %506, %508 ], [ %503, %502 ]
  %513 = sext i8 %511 to i32
  %514 = add nsw i32 %513, -48
  %515 = icmp ult i32 %514, 10
  %516 = icmp slt i8 %511, 58
  %517 = and i1 %516, %515
  br i1 %517, label %518, label %599

518:                                              ; preds = %510
  %519 = getelementptr inbounds i8, i8* %512, i64 1
  %520 = icmp eq i8* %519, %11
  br i1 %301, label %521, label %522

521:                                              ; preds = %518
  br i1 %520, label %617, label %542

522:                                              ; preds = %518
  br i1 %520, label %617, label %523

523:                                              ; preds = %522
  %524 = getelementptr inbounds i8, i8* %512, i64 2
  %525 = icmp eq i8* %524, %11
  br i1 %525, label %542, label %526

526:                                              ; preds = %523
  %527 = load i8, i8* %519, align 1
  %528 = sext i8 %527 to i32
  %529 = icmp eq i32 %528, %300
  br i1 %529, label %530, label %539

530:                                              ; preds = %526
  %531 = load i8, i8* %524, align 1
  %532 = sext i8 %531 to i32
  %533 = add nsw i32 %532, -48
  %534 = icmp ult i32 %533, 10
  %535 = icmp slt i8 %531, 64
  %536 = and i1 %535, %534
  br i1 %536, label %538, label %537

537:                                              ; preds = %530
  switch i8 %531, label %539 [
    i8 102, label %538
    i8 101, label %538
    i8 100, label %538
    i8 99, label %538
    i8 98, label %538
    i8 97, label %538
    i8 70, label %538
    i8 69, label %538
    i8 68, label %538
    i8 67, label %538
    i8 66, label %538
    i8 65, label %538
  ]

538:                                              ; preds = %537, %537, %537, %537, %537, %537, %537, %537, %537, %537, %537, %537, %530
  br label %539

539:                                              ; preds = %538, %537, %526
  %540 = phi i8* [ %524, %538 ], [ %519, %526 ], [ %519, %537 ]
  %541 = icmp eq i8* %540, %11
  br i1 %541, label %617, label %542

542:                                              ; preds = %539, %523, %521
  %543 = phi i8* [ %519, %523 ], [ %540, %539 ], [ %519, %521 ]
  %544 = load i8, i8* %543, align 1
  %545 = sext i8 %544 to i32
  %546 = add nsw i32 %545, -48
  %547 = icmp ult i32 %546, 10
  %548 = icmp slt i8 %544, 58
  %549 = and i1 %548, %547
  br i1 %549, label %550, label %583

550:                                              ; preds = %542, %575
  %551 = phi i8* [ %576, %575 ], [ %543, %542 ]
  %552 = getelementptr inbounds i8, i8* %551, i64 1
  %553 = icmp eq i8* %552, %11
  br i1 %301, label %554, label %555

554:                                              ; preds = %550
  br i1 %553, label %617, label %575

555:                                              ; preds = %550
  br i1 %553, label %617, label %556

556:                                              ; preds = %555
  %557 = getelementptr inbounds i8, i8* %551, i64 2
  %558 = icmp eq i8* %557, %11
  br i1 %558, label %575, label %559

559:                                              ; preds = %556
  %560 = load i8, i8* %552, align 1
  %561 = sext i8 %560 to i32
  %562 = icmp eq i32 %561, %300
  br i1 %562, label %563, label %572

563:                                              ; preds = %559
  %564 = load i8, i8* %557, align 1
  %565 = sext i8 %564 to i32
  %566 = add nsw i32 %565, -48
  %567 = icmp ult i32 %566, 10
  %568 = icmp slt i8 %564, 64
  %569 = and i1 %568, %567
  br i1 %569, label %571, label %570

570:                                              ; preds = %563
  switch i8 %564, label %572 [
    i8 102, label %571
    i8 101, label %571
    i8 100, label %571
    i8 99, label %571
    i8 98, label %571
    i8 97, label %571
    i8 70, label %571
    i8 69, label %571
    i8 68, label %571
    i8 67, label %571
    i8 66, label %571
    i8 65, label %571
  ]

571:                                              ; preds = %570, %570, %570, %570, %570, %570, %570, %570, %570, %570, %570, %570, %563
  br label %572

572:                                              ; preds = %571, %570, %559
  %573 = phi i8* [ %557, %571 ], [ %552, %559 ], [ %552, %570 ]
  %574 = icmp eq i8* %573, %11
  br i1 %574, label %617, label %575

575:                                              ; preds = %572, %556, %554
  %576 = phi i8* [ %552, %554 ], [ %573, %572 ], [ %552, %556 ]
  %577 = load i8, i8* %576, align 1
  %578 = sext i8 %577 to i32
  %579 = add nsw i32 %578, -48
  %580 = icmp ult i32 %579, 10
  %581 = icmp slt i8 %577, 58
  %582 = and i1 %581, %580
  br i1 %582, label %550, label %583

583:                                              ; preds = %575, %542
  %584 = phi i8 [ %544, %542 ], [ %577, %575 ]
  %585 = phi i8* [ %543, %542 ], [ %576, %575 ]
  %586 = icmp eq i8* %585, %11
  %587 = or i1 %15, %586
  br i1 %587, label %617, label %588

588:                                              ; preds = %583
  %589 = sext i8 %584 to i32
  %590 = tail call fastcc zeroext i1 @_ZN17double_conversionL12isWhitespaceEi(i32 %589) #5
  br i1 %590, label %591, label %599

591:                                              ; preds = %588, %595
  %592 = phi i8* [ %593, %595 ], [ %585, %588 ]
  %593 = getelementptr inbounds i8, i8* %592, i64 1
  %594 = icmp eq i8* %593, %11
  br i1 %594, label %617, label %595

595:                                              ; preds = %591
  %596 = load i8, i8* %593, align 1
  %597 = sext i8 %596 to i32
  %598 = tail call fastcc zeroext i1 @_ZN17double_conversionL12isWhitespaceEi(i32 %597) #5
  br i1 %598, label %591, label %599

599:                                              ; preds = %401, %363, %398, %372, %458, %420, %455, %429, %595, %588, %351, %463, %469, %499, %471, %496, %510, %406, %505
  %600 = load i8, i8* %345, align 1
  %601 = sext i8 %600 to i32
  %602 = add nsw i32 %601, -48
  %603 = icmp ult i32 %602, 10
  %604 = icmp slt i8 %600, 64
  %605 = and i1 %604, %603
  br i1 %605, label %617, label %606

606:                                              ; preds = %599
  %607 = add i8 %600, -65
  %608 = icmp ult i8 %607, 38
  br i1 %608, label %612, label %609

609:                                              ; preds = %612, %606
  %610 = getelementptr inbounds %"class.double_conversion::StringToDoubleConverter", %"class.double_conversion::StringToDoubleConverter"* %0, i64 0, i32 3
  %611 = load double, double* %610, align 8
  br label %1692

612:                                              ; preds = %606
  %613 = zext i8 %607 to i64
  %614 = lshr i64 270582939711, %613
  %615 = and i64 %614, 1
  %616 = icmp eq i64 %615, 0
  br i1 %616, label %609, label %617

617:                                              ; preds = %554, %555, %572, %591, %612, %599, %521, %522, %539, %583
  %618 = phi i1 [ true, %583 ], [ true, %539 ], [ true, %522 ], [ true, %521 ], [ false, %599 ], [ false, %612 ], [ true, %591 ], [ true, %572 ], [ true, %555 ], [ true, %554 ]
  %619 = icmp ne i8 %88, 0
  %620 = getelementptr inbounds %"class.double_conversion::StringToDoubleConverter", %"class.double_conversion::StringToDoubleConverter"* %0, i64 0, i32 3
  %621 = load double, double* %620, align 8
  %622 = load i8, i8* %345, align 1
  %623 = icmp eq i8 %622, 48
  br i1 %623, label %629, label %624

624:                                              ; preds = %635, %617
  %625 = phi i64 [ %346, %617 ], [ %636, %635 ]
  %626 = phi i8 [ %622, %617 ], [ %638, %635 ]
  %627 = phi i8* [ %345, %617 ], [ %637, %635 ]
  %628 = select i1 %3, i64 53, i64 24
  br label %669

629:                                              ; preds = %617, %635
  %630 = phi i8* [ %637, %635 ], [ %345, %617 ]
  %631 = getelementptr inbounds i8, i8* %630, i64 1
  %632 = ptrtoint i8* %631 to i64
  %633 = icmp eq i8* %631, %11
  br i1 %301, label %634, label %640

634:                                              ; preds = %629
  br i1 %633, label %664, label %635

635:                                              ; preds = %658, %641, %634
  %636 = phi i64 [ %632, %634 ], [ %632, %641 ], [ %659, %658 ]
  %637 = phi i8* [ %631, %634 ], [ %631, %641 ], [ %660, %658 ]
  %638 = load i8, i8* %637, align 1
  %639 = icmp eq i8 %638, 48
  br i1 %639, label %629, label %624

640:                                              ; preds = %629
  br i1 %633, label %662, label %641

641:                                              ; preds = %640
  %642 = getelementptr inbounds i8, i8* %630, i64 2
  %643 = icmp eq i8* %642, %11
  br i1 %643, label %635, label %644

644:                                              ; preds = %641
  %645 = load i8, i8* %631, align 1
  %646 = sext i8 %645 to i32
  %647 = icmp eq i32 %646, %300
  br i1 %647, label %648, label %658

648:                                              ; preds = %644
  %649 = load i8, i8* %642, align 1
  %650 = sext i8 %649 to i32
  %651 = add nsw i32 %650, -48
  %652 = icmp ult i32 %651, 10
  %653 = icmp slt i8 %649, 64
  %654 = and i1 %653, %652
  br i1 %654, label %656, label %655

655:                                              ; preds = %648
  switch i8 %649, label %658 [
    i8 102, label %656
    i8 101, label %656
    i8 100, label %656
    i8 99, label %656
    i8 98, label %656
    i8 97, label %656
    i8 70, label %656
    i8 69, label %656
    i8 68, label %656
    i8 67, label %656
    i8 66, label %656
    i8 65, label %656
  ]

656:                                              ; preds = %655, %655, %655, %655, %655, %655, %655, %655, %655, %655, %655, %655, %648
  %657 = ptrtoint i8* %642 to i64
  br label %658

658:                                              ; preds = %656, %655, %644
  %659 = phi i64 [ %657, %656 ], [ %632, %655 ], [ %632, %644 ]
  %660 = phi i8* [ %642, %656 ], [ %631, %655 ], [ %631, %644 ]
  %661 = icmp eq i8* %660, %11
  br i1 %661, label %666, label %635

662:                                              ; preds = %640
  %663 = ptrtoint i8* %11 to i64
  br label %666

664:                                              ; preds = %634
  %665 = ptrtoint i8* %11 to i64
  br label %666

666:                                              ; preds = %658, %664, %662
  %667 = phi i64 [ %663, %662 ], [ %665, %664 ], [ %659, %658 ]
  %668 = select i1 %619, double -0.000000e+00, double 0.000000e+00
  br label %1164

669:                                              ; preds = %924, %624
  %670 = phi i64 [ %625, %624 ], [ %925, %924 ]
  %671 = phi i8 [ %626, %624 ], [ %930, %924 ]
  %672 = phi i8* [ %627, %624 ], [ %926, %924 ]
  %673 = phi i32 [ 0, %624 ], [ %927, %924 ]
  %674 = phi i64 [ 0, %624 ], [ %928, %924 ]
  %675 = phi i8 [ 0, %624 ], [ %929, %924 ]
  %676 = sext i8 %671 to i32
  %677 = add nsw i32 %676, -48
  %678 = icmp ult i32 %677, 10
  br i1 %678, label %708, label %679

679:                                              ; preds = %669
  %680 = add i8 %671, -97
  %681 = icmp ult i8 %680, 6
  br i1 %681, label %682, label %684

682:                                              ; preds = %679
  %683 = add nsw i32 %676, -87
  br label %708

684:                                              ; preds = %679
  %685 = add i8 %671, -65
  %686 = icmp ult i8 %685, 6
  br i1 %686, label %687, label %689

687:                                              ; preds = %684
  %688 = add nsw i32 %676, -55
  br label %708

689:                                              ; preds = %684
  br i1 %618, label %690, label %694

690:                                              ; preds = %689
  switch i8 %671, label %694 [
    i8 46, label %691
    i8 112, label %944
    i8 80, label %944
  ]

691:                                              ; preds = %690
  %692 = getelementptr inbounds i8, i8* %672, i64 1
  %693 = ptrtoint i8* %692 to i64
  br label %924

694:                                              ; preds = %690, %689
  %695 = phi i1 [ true, %690 ], [ false, %689 ]
  %696 = icmp eq i8* %672, %11
  %697 = or i1 %15, %696
  br i1 %697, label %939, label %698

698:                                              ; preds = %694
  %699 = tail call fastcc zeroext i1 @_ZN17double_conversionL12isWhitespaceEi(i32 %676) #5
  br i1 %699, label %700, label %1692

700:                                              ; preds = %698, %704
  %701 = phi i8* [ %702, %704 ], [ %672, %698 ]
  %702 = getelementptr inbounds i8, i8* %701, i64 1
  %703 = icmp eq i8* %702, %11
  br i1 %703, label %931, label %704

704:                                              ; preds = %700
  %705 = load i8, i8* %702, align 1
  %706 = sext i8 %705 to i32
  %707 = tail call fastcc zeroext i1 @_ZN17double_conversionL12isWhitespaceEi(i32 %706) #5
  br i1 %707, label %700, label %1692

708:                                              ; preds = %669, %687, %682
  %709 = phi i32 [ %683, %682 ], [ %688, %687 ], [ %677, %669 ]
  %710 = and i8 %675, 1
  %711 = icmp eq i8 %710, 0
  %712 = add nsw i32 %673, -4
  %713 = select i1 %711, i32 %673, i32 %712
  %714 = shl nsw i64 %674, 4
  %715 = sext i32 %709 to i64
  %716 = add nsw i64 %714, %715
  %717 = ashr i64 %716, %628
  %718 = trunc i64 %717 to i32
  %719 = icmp eq i32 %718, 0
  br i1 %719, label %875, label %720

720:                                              ; preds = %708
  %721 = trunc i64 %717 to i32
  %722 = icmp sgt i32 %721, 1
  br i1 %722, label %723, label %729

723:                                              ; preds = %720, %723
  %724 = phi i32 [ %726, %723 ], [ 1, %720 ]
  %725 = phi i32 [ %727, %723 ], [ %721, %720 ]
  %726 = add nuw nsw i32 %724, 1
  %727 = lshr i32 %725, 1
  %728 = icmp ugt i32 %725, 3
  br i1 %728, label %723, label %729

729:                                              ; preds = %723, %720
  %730 = phi i32 [ 1, %720 ], [ %726, %723 ]
  %731 = shl nsw i32 -1, %730
  %732 = xor i32 %731, -1
  %733 = trunc i64 %716 to i32
  %734 = and i32 %732, %733
  %735 = zext i32 %730 to i64
  %736 = ashr i64 %716, %735
  %737 = add nsw i32 %730, %713
  br label %738

738:                                              ; preds = %820, %729
  %739 = phi i8 [ %671, %729 ], [ %811, %820 ]
  %740 = phi i8* [ %672, %729 ], [ %812, %820 ]
  %741 = phi i32 [ %737, %729 ], [ %828, %820 ]
  %742 = phi i8 [ %675, %729 ], [ %813, %820 ]
  %743 = phi i8 [ 1, %729 ], [ %824, %820 ]
  br i1 %301, label %744, label %748

744:                                              ; preds = %738
  %745 = getelementptr inbounds i8, i8* %740, i64 1
  %746 = ptrtoint i8* %745 to i64
  %747 = icmp eq i8* %745, %11
  br i1 %747, label %849, label %795

748:                                              ; preds = %738
  %749 = sext i8 %739 to i32
  %750 = add nsw i32 %749, -48
  %751 = icmp ult i32 %750, 10
  %752 = icmp slt i8 %739, 64
  %753 = and i1 %752, %751
  %754 = add i8 %739, -97
  %755 = icmp ult i8 %754, 6
  %756 = or i1 %755, %753
  br i1 %756, label %765, label %757

757:                                              ; preds = %748
  %758 = icmp sgt i8 %739, 64
  br i1 %758, label %763, label %759

759:                                              ; preds = %757
  %760 = getelementptr inbounds i8, i8* %740, i64 1
  %761 = ptrtoint i8* %760 to i64
  %762 = icmp eq i8* %760, %11
  br i1 %762, label %847, label %795

763:                                              ; preds = %757
  %764 = icmp sgt i8 %739, 70
  br label %765

765:                                              ; preds = %763, %748
  %766 = phi i1 [ %764, %763 ], [ false, %748 ]
  %767 = getelementptr inbounds i8, i8* %740, i64 1
  %768 = ptrtoint i8* %767 to i64
  %769 = icmp eq i8* %767, %11
  %770 = or i1 %769, %766
  br i1 %770, label %792, label %771

771:                                              ; preds = %765
  %772 = getelementptr inbounds i8, i8* %740, i64 2
  %773 = icmp eq i8* %772, %11
  br i1 %773, label %795, label %774

774:                                              ; preds = %771
  %775 = load i8, i8* %767, align 1
  %776 = sext i8 %775 to i32
  %777 = icmp eq i32 %300, %776
  br i1 %777, label %778, label %788

778:                                              ; preds = %774
  %779 = load i8, i8* %772, align 1
  %780 = sext i8 %779 to i32
  %781 = add nsw i32 %780, -48
  %782 = icmp ult i32 %781, 10
  %783 = icmp slt i8 %779, 64
  %784 = and i1 %783, %782
  br i1 %784, label %786, label %785

785:                                              ; preds = %778
  switch i8 %779, label %788 [
    i8 102, label %786
    i8 101, label %786
    i8 100, label %786
    i8 99, label %786
    i8 98, label %786
    i8 97, label %786
    i8 70, label %786
    i8 69, label %786
    i8 68, label %786
    i8 67, label %786
    i8 66, label %786
    i8 65, label %786
  ]

786:                                              ; preds = %785, %785, %785, %785, %785, %785, %785, %785, %785, %785, %785, %785, %778
  %787 = ptrtoint i8* %772 to i64
  br label %788

788:                                              ; preds = %786, %785, %774
  %789 = phi i64 [ %787, %786 ], [ %768, %785 ], [ %768, %774 ]
  %790 = phi i8* [ %772, %786 ], [ %767, %785 ], [ %767, %774 ]
  %791 = icmp eq i8* %790, %11
  br i1 %791, label %851, label %795

792:                                              ; preds = %765
  %793 = xor i1 %766, true
  %794 = or i1 %769, %793
  br i1 %794, label %829, label %795

795:                                              ; preds = %792, %788, %771, %759, %744
  %796 = phi i64 [ %746, %744 ], [ %768, %792 ], [ %768, %771 ], [ %789, %788 ], [ %761, %759 ]
  %797 = phi i8* [ %745, %744 ], [ %767, %792 ], [ %767, %771 ], [ %790, %788 ], [ %760, %759 ]
  br i1 %618, label %798, label %804

798:                                              ; preds = %795
  %799 = load i8, i8* %797, align 1
  %800 = icmp eq i8 %799, 46
  br i1 %800, label %801, label %809

801:                                              ; preds = %798
  %802 = getelementptr inbounds i8, i8* %797, i64 1
  %803 = ptrtoint i8* %802 to i64
  br label %804

804:                                              ; preds = %801, %795
  %805 = phi i64 [ %803, %801 ], [ %796, %795 ]
  %806 = phi i8* [ %802, %801 ], [ %797, %795 ]
  %807 = phi i8 [ 1, %801 ], [ %742, %795 ]
  %808 = load i8, i8* %806, align 1
  br label %809

809:                                              ; preds = %804, %798
  %810 = phi i64 [ %805, %804 ], [ %796, %798 ]
  %811 = phi i8 [ %808, %804 ], [ %799, %798 ]
  %812 = phi i8* [ %806, %804 ], [ %797, %798 ]
  %813 = phi i8 [ %807, %804 ], [ %742, %798 ]
  %814 = sext i8 %811 to i32
  %815 = add nsw i32 %814, -48
  %816 = icmp ult i32 %815, 10
  %817 = icmp slt i8 %811, 64
  %818 = and i1 %817, %816
  br i1 %818, label %820, label %819

819:                                              ; preds = %809
  switch i8 %811, label %831 [
    i8 102, label %820
    i8 101, label %820
    i8 100, label %820
    i8 99, label %820
    i8 98, label %820
    i8 97, label %820
    i8 70, label %820
    i8 69, label %820
    i8 68, label %820
    i8 67, label %820
    i8 66, label %820
    i8 65, label %820
  ]

820:                                              ; preds = %819, %819, %819, %819, %819, %819, %819, %819, %819, %819, %819, %819, %809
  %821 = icmp ne i8 %743, 0
  %822 = icmp eq i8 %811, 48
  %823 = and i1 %821, %822
  %824 = zext i1 %823 to i8
  %825 = and i8 %813, 1
  %826 = icmp eq i8 %825, 0
  %827 = add nsw i32 %741, 4
  %828 = select i1 %826, i32 %827, i32 %741
  br label %738

829:                                              ; preds = %792
  %830 = ptrtoint i8* %767 to i64
  br label %831

831:                                              ; preds = %819, %829
  %832 = phi i64 [ %830, %829 ], [ %810, %819 ]
  %833 = phi i8* [ %767, %829 ], [ %812, %819 ]
  %834 = or i1 %15, %618
  %835 = icmp eq i8* %833, %11
  %836 = or i1 %834, %835
  br i1 %836, label %851, label %837

837:                                              ; preds = %831, %842
  %838 = phi i8* [ %843, %842 ], [ %833, %831 ]
  %839 = load i8, i8* %838, align 1
  %840 = sext i8 %839 to i32
  %841 = tail call fastcc zeroext i1 @_ZN17double_conversionL12isWhitespaceEi(i32 %840) #5
  br i1 %841, label %842, label %1692

842:                                              ; preds = %837
  %843 = getelementptr inbounds i8, i8* %838, i64 1
  %844 = icmp eq i8* %843, %11
  br i1 %844, label %845, label %837

845:                                              ; preds = %842
  %846 = ptrtoint i8* %11 to i64
  br label %851

847:                                              ; preds = %759
  %848 = ptrtoint i8* %11 to i64
  br label %851

849:                                              ; preds = %744
  %850 = ptrtoint i8* %11 to i64
  br label %851

851:                                              ; preds = %788, %847, %849, %845, %831
  %852 = phi i64 [ %832, %831 ], [ %846, %845 ], [ %848, %847 ], [ %850, %849 ], [ %789, %788 ]
  %853 = add nsw i32 %730, -1
  %854 = shl i32 1, %853
  %855 = icmp sgt i32 %734, %854
  br i1 %855, label %856, label %858

856:                                              ; preds = %851
  %857 = add nsw i64 %736, 1
  br label %866

858:                                              ; preds = %851
  %859 = icmp eq i32 %734, %854
  br i1 %859, label %860, label %866

860:                                              ; preds = %858
  %861 = and i64 %736, 1
  %862 = xor i8 %743, 1
  %863 = zext i8 %862 to i64
  %864 = or i64 %861, %863
  %865 = add nsw i64 %864, %736
  br label %866

866:                                              ; preds = %860, %858, %856
  %867 = phi i64 [ %857, %856 ], [ %736, %858 ], [ %865, %860 ]
  %868 = shl i64 1, %628
  %869 = and i64 %867, %868
  %870 = icmp ne i64 %869, 0
  %871 = zext i1 %870 to i32
  %872 = add nsw i32 %741, %871
  %873 = zext i1 %870 to i64
  %874 = ashr i64 %867, %873
  br i1 %618, label %944, label %1105

875:                                              ; preds = %708
  br i1 %301, label %876, label %880

876:                                              ; preds = %875
  %877 = getelementptr inbounds i8, i8* %672, i64 1
  %878 = ptrtoint i8* %877 to i64
  %879 = icmp eq i8* %877, %11
  br i1 %879, label %933, label %924

880:                                              ; preds = %875
  %881 = icmp slt i8 %671, 64
  %882 = and i1 %881, %678
  %883 = add i8 %671, -97
  %884 = icmp ult i8 %883, 6
  %885 = or i1 %884, %882
  br i1 %885, label %894, label %886

886:                                              ; preds = %880
  %887 = icmp sgt i8 %671, 64
  br i1 %887, label %892, label %888

888:                                              ; preds = %886
  %889 = getelementptr inbounds i8, i8* %672, i64 1
  %890 = ptrtoint i8* %889 to i64
  %891 = icmp eq i8* %889, %11
  br i1 %891, label %935, label %924

892:                                              ; preds = %886
  %893 = icmp sgt i8 %671, 70
  br label %894

894:                                              ; preds = %892, %880
  %895 = phi i1 [ %893, %892 ], [ false, %880 ]
  %896 = getelementptr inbounds i8, i8* %672, i64 1
  %897 = ptrtoint i8* %896 to i64
  %898 = icmp eq i8* %896, %11
  %899 = or i1 %898, %895
  br i1 %899, label %921, label %900

900:                                              ; preds = %894
  %901 = getelementptr inbounds i8, i8* %672, i64 2
  %902 = icmp eq i8* %901, %11
  br i1 %902, label %924, label %903

903:                                              ; preds = %900
  %904 = load i8, i8* %896, align 1
  %905 = sext i8 %904 to i32
  %906 = icmp eq i32 %300, %905
  br i1 %906, label %907, label %917

907:                                              ; preds = %903
  %908 = load i8, i8* %901, align 1
  %909 = sext i8 %908 to i32
  %910 = add nsw i32 %909, -48
  %911 = icmp ult i32 %910, 10
  %912 = icmp slt i8 %908, 64
  %913 = and i1 %912, %911
  br i1 %913, label %915, label %914

914:                                              ; preds = %907
  switch i8 %908, label %917 [
    i8 102, label %915
    i8 101, label %915
    i8 100, label %915
    i8 99, label %915
    i8 98, label %915
    i8 97, label %915
    i8 70, label %915
    i8 69, label %915
    i8 68, label %915
    i8 67, label %915
    i8 66, label %915
    i8 65, label %915
  ]

915:                                              ; preds = %914, %914, %914, %914, %914, %914, %914, %914, %914, %914, %914, %914, %907
  %916 = ptrtoint i8* %901 to i64
  br label %917

917:                                              ; preds = %915, %914, %903
  %918 = phi i64 [ %916, %915 ], [ %897, %914 ], [ %897, %903 ]
  %919 = phi i8* [ %901, %915 ], [ %896, %914 ], [ %896, %903 ]
  %920 = icmp eq i8* %919, %11
  br i1 %920, label %939, label %924

921:                                              ; preds = %894
  %922 = xor i1 %895, true
  %923 = or i1 %898, %922
  br i1 %923, label %937, label %924

924:                                              ; preds = %921, %917, %900, %888, %876, %691
  %925 = phi i64 [ %878, %876 ], [ %897, %921 ], [ %897, %900 ], [ %918, %917 ], [ %890, %888 ], [ %693, %691 ]
  %926 = phi i8* [ %877, %876 ], [ %896, %921 ], [ %896, %900 ], [ %919, %917 ], [ %889, %888 ], [ %692, %691 ]
  %927 = phi i32 [ %713, %876 ], [ %713, %921 ], [ %713, %900 ], [ %713, %917 ], [ %713, %888 ], [ %673, %691 ]
  %928 = phi i64 [ %716, %876 ], [ %716, %921 ], [ %716, %900 ], [ %716, %917 ], [ %716, %888 ], [ %674, %691 ]
  %929 = phi i8 [ %675, %876 ], [ %675, %921 ], [ %675, %900 ], [ %675, %917 ], [ %675, %888 ], [ 1, %691 ]
  %930 = load i8, i8* %926, align 1
  br label %669

931:                                              ; preds = %700
  %932 = ptrtoint i8* %11 to i64
  br i1 %695, label %944, label %1105

933:                                              ; preds = %876
  %934 = ptrtoint i8* %11 to i64
  br i1 %618, label %949, label %1105

935:                                              ; preds = %888
  %936 = ptrtoint i8* %11 to i64
  br i1 %618, label %955, label %1105

937:                                              ; preds = %921
  %938 = ptrtoint i8* %896 to i64
  br label %939

939:                                              ; preds = %917, %937, %694
  %940 = phi i1 [ %695, %694 ], [ %618, %937 ], [ %618, %917 ]
  %941 = phi i64 [ %670, %694 ], [ %938, %937 ], [ %918, %917 ]
  %942 = phi i32 [ %673, %694 ], [ %713, %937 ], [ %713, %917 ]
  %943 = phi i64 [ %674, %694 ], [ %716, %937 ], [ %716, %917 ]
  br i1 %940, label %944, label %1105

944:                                              ; preds = %690, %690, %931, %866, %939
  %945 = phi i64 [ %941, %939 ], [ %852, %866 ], [ %932, %931 ], [ %670, %690 ], [ %670, %690 ]
  %946 = phi i64 [ %943, %939 ], [ %874, %866 ], [ %674, %931 ], [ %674, %690 ], [ %674, %690 ]
  %947 = phi i32 [ %942, %939 ], [ %872, %866 ], [ %673, %931 ], [ %673, %690 ], [ %673, %690 ]
  %948 = inttoptr i64 %945 to i8*
  br i1 %301, label %949, label %955

949:                                              ; preds = %933, %944
  %950 = phi i8* [ %948, %944 ], [ %11, %933 ]
  %951 = phi i32 [ %947, %944 ], [ %713, %933 ]
  %952 = phi i64 [ %946, %944 ], [ %716, %933 ]
  %953 = getelementptr inbounds i8, i8* %950, i64 1
  %954 = ptrtoint i8* %953 to i64
  br label %998

955:                                              ; preds = %935, %944
  %956 = phi i8* [ %948, %944 ], [ %11, %935 ]
  %957 = phi i32 [ %947, %944 ], [ %713, %935 ]
  %958 = phi i64 [ %946, %944 ], [ %716, %935 ]
  %959 = load i8, i8* %956, align 1
  %960 = sext i8 %959 to i32
  %961 = add nsw i32 %960, -48
  %962 = icmp ult i32 %961, 10
  %963 = icmp slt i8 %959, 64
  %964 = and i1 %963, %962
  %965 = add i8 %959, -97
  %966 = icmp ult i8 %965, 6
  %967 = or i1 %966, %964
  br i1 %967, label %975, label %968

968:                                              ; preds = %955
  %969 = icmp sgt i8 %959, 64
  br i1 %969, label %973, label %970

970:                                              ; preds = %968
  %971 = getelementptr inbounds i8, i8* %956, i64 1
  %972 = ptrtoint i8* %971 to i64
  br label %998

973:                                              ; preds = %968
  %974 = icmp sgt i8 %959, 70
  br label %975

975:                                              ; preds = %973, %955
  %976 = phi i1 [ %974, %973 ], [ false, %955 ]
  %977 = getelementptr inbounds i8, i8* %956, i64 1
  %978 = ptrtoint i8* %977 to i64
  %979 = icmp eq i8* %977, %11
  %980 = or i1 %979, %976
  br i1 %980, label %998, label %981

981:                                              ; preds = %975
  %982 = getelementptr inbounds i8, i8* %956, i64 2
  %983 = icmp eq i8* %982, %11
  br i1 %983, label %998, label %984

984:                                              ; preds = %981
  %985 = load i8, i8* %977, align 1
  %986 = sext i8 %985 to i32
  %987 = icmp eq i32 %300, %986
  br i1 %987, label %988, label %1004

988:                                              ; preds = %984
  %989 = load i8, i8* %982, align 1
  %990 = sext i8 %989 to i32
  %991 = add nsw i32 %990, -48
  %992 = icmp ult i32 %991, 10
  %993 = icmp slt i8 %989, 64
  %994 = and i1 %993, %992
  br i1 %994, label %996, label %995

995:                                              ; preds = %988
  switch i8 %989, label %998 [
    i8 102, label %996
    i8 101, label %996
    i8 100, label %996
    i8 99, label %996
    i8 98, label %996
    i8 97, label %996
    i8 70, label %996
    i8 69, label %996
    i8 68, label %996
    i8 67, label %996
    i8 66, label %996
    i8 65, label %996
  ]

996:                                              ; preds = %995, %995, %995, %995, %995, %995, %995, %995, %995, %995, %995, %995, %988
  %997 = ptrtoint i8* %982 to i64
  br label %998

998:                                              ; preds = %996, %995, %981, %975, %970, %949
  %999 = phi i32 [ %951, %949 ], [ %957, %975 ], [ %957, %981 ], [ %957, %996 ], [ %957, %995 ], [ %957, %970 ]
  %1000 = phi i64 [ %952, %949 ], [ %958, %975 ], [ %958, %981 ], [ %958, %996 ], [ %958, %995 ], [ %958, %970 ]
  %1001 = phi i64 [ %954, %949 ], [ %978, %975 ], [ %978, %981 ], [ %997, %996 ], [ %978, %995 ], [ %972, %970 ]
  %1002 = phi i8* [ %953, %949 ], [ %977, %975 ], [ %977, %981 ], [ %982, %996 ], [ %977, %995 ], [ %971, %970 ]
  %1003 = load i8, i8* %1002, align 1
  br label %1004

1004:                                             ; preds = %998, %984
  %1005 = phi i32 [ %999, %998 ], [ %957, %984 ]
  %1006 = phi i64 [ %1000, %998 ], [ %958, %984 ]
  %1007 = phi i64 [ %1001, %998 ], [ %978, %984 ]
  %1008 = phi i8 [ %1003, %998 ], [ %985, %984 ]
  %1009 = phi i8* [ %1002, %998 ], [ %977, %984 ]
  switch i8 %1008, label %1016 [
    i8 43, label %1010
    i8 45, label %1013
  ]

1010:                                             ; preds = %1004
  %1011 = getelementptr inbounds i8, i8* %1009, i64 1
  %1012 = ptrtoint i8* %1011 to i64
  br label %1016

1013:                                             ; preds = %1004
  %1014 = getelementptr inbounds i8, i8* %1009, i64 1
  %1015 = ptrtoint i8* %1014 to i64
  br label %1016

1016:                                             ; preds = %1013, %1010, %1004
  %1017 = phi i64 [ %1007, %1004 ], [ %1015, %1013 ], [ %1012, %1010 ]
  %1018 = phi i8* [ %1009, %1004 ], [ %1014, %1013 ], [ %1011, %1010 ]
  %1019 = phi i1 [ false, %1004 ], [ true, %1013 ], [ false, %1010 ]
  %1020 = load i8, i8* %1018, align 1
  %1021 = sext i8 %1020 to i32
  %1022 = add nsw i32 %1021, -48
  %1023 = icmp ult i32 %1022, 10
  br i1 %1023, label %1024, label %1099

1024:                                             ; preds = %1016, %1086
  %1025 = phi i32 [ %1090, %1086 ], [ %1021, %1016 ]
  %1026 = phi i8 [ %1089, %1086 ], [ %1020, %1016 ]
  %1027 = phi i8* [ %1088, %1086 ], [ %1018, %1016 ]
  %1028 = phi i32 [ %1038, %1086 ], [ 0, %1016 ]
  %1029 = icmp slt i32 %1028, 0
  %1030 = sub nsw i32 0, %1028
  %1031 = select i1 %1029, i32 %1030, i32 %1028
  %1032 = icmp slt i32 %1031, 97201
  br i1 %1032, label %1033, label %1037

1033:                                             ; preds = %1024
  %1034 = mul nsw i32 %1028, 10
  %1035 = add nsw i32 %1025, -48
  %1036 = add i32 %1035, %1034
  br label %1037

1037:                                             ; preds = %1033, %1024
  %1038 = phi i32 [ %1036, %1033 ], [ %1028, %1024 ]
  br i1 %301, label %1039, label %1043

1039:                                             ; preds = %1037
  %1040 = getelementptr inbounds i8, i8* %1027, i64 1
  %1041 = ptrtoint i8* %1040 to i64
  %1042 = icmp eq i8* %1040, %11
  br i1 %1042, label %1093, label %1086

1043:                                             ; preds = %1037
  %1044 = icmp slt i8 %1026, 64
  %1045 = add i8 %1026, -97
  %1046 = icmp ult i8 %1045, 6
  %1047 = or i1 %1044, %1046
  br i1 %1047, label %1056, label %1048

1048:                                             ; preds = %1043
  %1049 = icmp sgt i8 %1026, 64
  br i1 %1049, label %1054, label %1050

1050:                                             ; preds = %1048
  %1051 = getelementptr inbounds i8, i8* %1027, i64 1
  %1052 = ptrtoint i8* %1051 to i64
  %1053 = icmp eq i8* %1051, %11
  br i1 %1053, label %1095, label %1086

1054:                                             ; preds = %1048
  %1055 = icmp sgt i8 %1026, 70
  br label %1056

1056:                                             ; preds = %1054, %1043
  %1057 = phi i1 [ %1055, %1054 ], [ false, %1043 ]
  %1058 = getelementptr inbounds i8, i8* %1027, i64 1
  %1059 = ptrtoint i8* %1058 to i64
  %1060 = icmp eq i8* %1058, %11
  %1061 = or i1 %1060, %1057
  br i1 %1061, label %1083, label %1062

1062:                                             ; preds = %1056
  %1063 = getelementptr inbounds i8, i8* %1027, i64 2
  %1064 = icmp eq i8* %1063, %11
  br i1 %1064, label %1086, label %1065

1065:                                             ; preds = %1062
  %1066 = load i8, i8* %1058, align 1
  %1067 = sext i8 %1066 to i32
  %1068 = icmp eq i32 %300, %1067
  br i1 %1068, label %1069, label %1079

1069:                                             ; preds = %1065
  %1070 = load i8, i8* %1063, align 1
  %1071 = sext i8 %1070 to i32
  %1072 = add nsw i32 %1071, -48
  %1073 = icmp ult i32 %1072, 10
  %1074 = icmp slt i8 %1070, 64
  %1075 = and i1 %1074, %1073
  br i1 %1075, label %1077, label %1076

1076:                                             ; preds = %1069
  switch i8 %1070, label %1079 [
    i8 102, label %1077
    i8 101, label %1077
    i8 100, label %1077
    i8 99, label %1077
    i8 98, label %1077
    i8 97, label %1077
    i8 70, label %1077
    i8 69, label %1077
    i8 68, label %1077
    i8 67, label %1077
    i8 66, label %1077
    i8 65, label %1077
  ]

1077:                                             ; preds = %1076, %1076, %1076, %1076, %1076, %1076, %1076, %1076, %1076, %1076, %1076, %1076, %1069
  %1078 = ptrtoint i8* %1063 to i64
  br label %1079

1079:                                             ; preds = %1077, %1076, %1065
  %1080 = phi i64 [ %1078, %1077 ], [ %1059, %1076 ], [ %1059, %1065 ]
  %1081 = phi i8* [ %1063, %1077 ], [ %1058, %1076 ], [ %1058, %1065 ]
  %1082 = icmp eq i8* %1081, %11
  br i1 %1082, label %1099, label %1086

1083:                                             ; preds = %1056
  %1084 = xor i1 %1057, true
  %1085 = or i1 %1060, %1084
  br i1 %1085, label %1097, label %1086

1086:                                             ; preds = %1083, %1079, %1062, %1050, %1039
  %1087 = phi i64 [ %1041, %1039 ], [ %1059, %1083 ], [ %1059, %1062 ], [ %1080, %1079 ], [ %1052, %1050 ]
  %1088 = phi i8* [ %1040, %1039 ], [ %1058, %1083 ], [ %1058, %1062 ], [ %1081, %1079 ], [ %1051, %1050 ]
  %1089 = load i8, i8* %1088, align 1
  %1090 = sext i8 %1089 to i32
  %1091 = add nsw i32 %1090, -48
  %1092 = icmp ult i32 %1091, 10
  br i1 %1092, label %1024, label %1099

1093:                                             ; preds = %1039
  %1094 = ptrtoint i8* %11 to i64
  br label %1099

1095:                                             ; preds = %1050
  %1096 = ptrtoint i8* %11 to i64
  br label %1099

1097:                                             ; preds = %1083
  %1098 = ptrtoint i8* %1058 to i64
  br label %1099

1099:                                             ; preds = %1086, %1079, %1097, %1093, %1095, %1016
  %1100 = phi i64 [ %1017, %1016 ], [ %1094, %1093 ], [ %1096, %1095 ], [ %1098, %1097 ], [ %1087, %1086 ], [ %1080, %1079 ]
  %1101 = phi i32 [ 0, %1016 ], [ %1038, %1093 ], [ %1038, %1095 ], [ %1038, %1097 ], [ %1038, %1079 ], [ %1038, %1086 ]
  %1102 = sub nsw i32 0, %1101
  %1103 = select i1 %1019, i32 %1102, i32 %1101
  %1104 = add nsw i32 %1103, %1005
  br label %1105

1105:                                             ; preds = %933, %935, %931, %866, %1099, %939
  %1106 = phi i64 [ %1100, %1099 ], [ %941, %939 ], [ %852, %866 ], [ %932, %931 ], [ %936, %935 ], [ %934, %933 ]
  %1107 = phi i64 [ %1006, %1099 ], [ %943, %939 ], [ %874, %866 ], [ %674, %931 ], [ %716, %935 ], [ %716, %933 ]
  %1108 = phi i32 [ %1104, %1099 ], [ %942, %939 ], [ %872, %866 ], [ %673, %931 ], [ %713, %935 ], [ %713, %933 ]
  %1109 = icmp eq i32 %1108, 0
  %1110 = icmp eq i64 %1107, 0
  %1111 = or i1 %1110, %1109
  br i1 %1111, label %1112, label %1119

1112:                                             ; preds = %1105
  br i1 %619, label %1113, label %1116

1113:                                             ; preds = %1112
  br i1 %1110, label %1164, label %1114

1114:                                             ; preds = %1113
  %1115 = sub nsw i64 0, %1107
  br label %1116

1116:                                             ; preds = %1114, %1112
  %1117 = phi i64 [ %1115, %1114 ], [ %1107, %1112 ]
  %1118 = sitofp i64 %1117 to double
  br label %1164

1119:                                             ; preds = %1105
  %1120 = icmp ugt i64 %1107, 9007199254740991
  br i1 %1120, label %1121, label %1127

1121:                                             ; preds = %1119, %1121
  %1122 = phi i32 [ %1125, %1121 ], [ %1108, %1119 ]
  %1123 = phi i64 [ %1124, %1121 ], [ %1107, %1119 ]
  %1124 = lshr i64 %1123, 1
  %1125 = add nsw i32 %1122, 1
  %1126 = icmp ugt i64 %1123, 18014398509481983
  br i1 %1126, label %1121, label %1127

1127:                                             ; preds = %1121, %1119
  %1128 = phi i64 [ %1107, %1119 ], [ %1124, %1121 ]
  %1129 = phi i32 [ %1108, %1119 ], [ %1125, %1121 ]
  %1130 = icmp sgt i32 %1129, 971
  br i1 %1130, label %1160, label %1131

1131:                                             ; preds = %1127
  %1132 = icmp slt i32 %1129, -1074
  br i1 %1132, label %1160, label %1133

1133:                                             ; preds = %1131
  %1134 = icmp ne i32 %1129, -1074
  %1135 = and i64 %1128, 4503599627370496
  %1136 = icmp eq i64 %1135, 0
  %1137 = and i1 %1134, %1136
  br i1 %1137, label %1138, label %1147

1138:                                             ; preds = %1133, %1138
  %1139 = phi i32 [ %1142, %1138 ], [ %1129, %1133 ]
  %1140 = phi i64 [ %1141, %1138 ], [ %1128, %1133 ]
  %1141 = shl i64 %1140, 1
  %1142 = add nsw i32 %1139, -1
  %1143 = icmp sgt i32 %1142, -1074
  %1144 = and i64 %1140, 2251799813685248
  %1145 = icmp eq i64 %1144, 0
  %1146 = and i1 %1143, %1145
  br i1 %1146, label %1138, label %1147

1147:                                             ; preds = %1138, %1133
  %1148 = phi i64 [ %1128, %1133 ], [ %1141, %1138 ]
  %1149 = phi i32 [ %1129, %1133 ], [ %1142, %1138 ]
  %1150 = phi i1 [ %1136, %1133 ], [ %1145, %1138 ]
  %1151 = icmp eq i32 %1149, -1074
  %1152 = and i1 %1151, %1150
  %1153 = add nsw i32 %1149, 1075
  %1154 = zext i32 %1153 to i64
  %1155 = shl i64 %1154, 52
  %1156 = select i1 %1152, i64 0, i64 %1155
  %1157 = and i64 %1148, 4503599627370495
  %1158 = or i64 %1156, %1157
  %1159 = bitcast i64 %1158 to double
  br label %1160

1160:                                             ; preds = %1147, %1131, %1127
  %1161 = phi double [ %1159, %1147 ], [ 0x7FF0000000000000, %1127 ], [ 0.000000e+00, %1131 ]
  %1162 = fsub double -0.000000e+00, %1161
  %1163 = select i1 %619, double %1162, double %1161
  br label %1164

1164:                                             ; preds = %666, %1113, %1116, %1160
  %1165 = phi i64 [ %1106, %1160 ], [ %1106, %1116 ], [ %1106, %1113 ], [ %667, %666 ]
  %1166 = phi double [ %1163, %1160 ], [ %1118, %1116 ], [ -0.000000e+00, %1113 ], [ %668, %666 ]
  br i1 %19, label %1167, label %1186

1167:                                             ; preds = %1164
  %1168 = inttoptr i64 %1165 to i8*
  %1169 = icmp eq i8* %11, %1168
  br i1 %1169, label %1186, label %1170

1170:                                             ; preds = %1167
  %1171 = load i8, i8* %1168, align 1
  %1172 = sext i8 %1171 to i32
  %1173 = tail call fastcc zeroext i1 @_ZN17double_conversionL12isWhitespaceEi(i32 %1172) #5
  br i1 %1173, label %1178, label %1186

1174:                                             ; preds = %1178
  %1175 = load i8, i8* %1180, align 1
  %1176 = sext i8 %1175 to i32
  %1177 = tail call fastcc zeroext i1 @_ZN17double_conversionL12isWhitespaceEi(i32 %1176) #5
  br i1 %1177, label %1178, label %1184

1178:                                             ; preds = %1170, %1174
  %1179 = phi i8* [ %1180, %1174 ], [ %1168, %1170 ]
  %1180 = getelementptr inbounds i8, i8* %1179, i64 1
  %1181 = icmp eq i8* %1180, %11
  br i1 %1181, label %1182, label %1174

1182:                                             ; preds = %1178
  %1183 = ptrtoint i8* %11 to i64
  br label %1186

1184:                                             ; preds = %1174
  %1185 = ptrtoint i8* %1180 to i64
  br label %1186

1186:                                             ; preds = %1184, %1170, %1182, %1167, %1164
  %1187 = phi i64 [ %1165, %1164 ], [ %1165, %1167 ], [ %1183, %1182 ], [ %1165, %1170 ], [ %1185, %1184 ]
  %1188 = sub i64 %1187, %9
  %1189 = trunc i64 %1188 to i32
  store i32 %1189, i32* %4, align 4
  br label %1692

1190:                                             ; preds = %334
  %1191 = icmp eq i8 %342, 48
  br i1 %1191, label %1192, label %1238

1192:                                             ; preds = %343, %1190
  br label %1193

1193:                                             ; preds = %1192, %1199
  %1194 = phi i8* [ %1201, %1199 ], [ %341, %1192 ]
  %1195 = getelementptr inbounds i8, i8* %1194, i64 1
  %1196 = ptrtoint i8* %1195 to i64
  %1197 = icmp eq i8* %1195, %11
  br i1 %301, label %1198, label %1204

1198:                                             ; preds = %1193
  br i1 %1197, label %1228, label %1199

1199:                                             ; preds = %1198, %1222, %1205
  %1200 = phi i64 [ %1196, %1198 ], [ %1223, %1222 ], [ %1196, %1205 ]
  %1201 = inttoptr i64 %1200 to i8*
  %1202 = load i8, i8* %1201, align 1
  %1203 = icmp eq i8 %1202, 48
  br i1 %1203, label %1193, label %1236

1204:                                             ; preds = %1193
  br i1 %1197, label %1226, label %1205

1205:                                             ; preds = %1204
  %1206 = getelementptr inbounds i8, i8* %1194, i64 2
  %1207 = icmp eq i8* %1206, %11
  br i1 %1207, label %1199, label %1208

1208:                                             ; preds = %1205
  %1209 = load i8, i8* %1195, align 1
  %1210 = sext i8 %1209 to i32
  %1211 = icmp eq i32 %1210, %300
  br i1 %1211, label %1212, label %1222

1212:                                             ; preds = %1208
  %1213 = load i8, i8* %1206, align 1
  %1214 = sext i8 %1213 to i32
  %1215 = add nsw i32 %1214, -48
  %1216 = icmp ult i32 %1215, 10
  %1217 = icmp slt i8 %1213, 58
  %1218 = and i1 %1217, %1216
  %1219 = ptrtoint i8* %1206 to i64
  %1220 = select i1 %1218, i64 %1219, i64 %1196
  %1221 = select i1 %1218, i8* %1206, i8* %1195
  br label %1222

1222:                                             ; preds = %1212, %1208
  %1223 = phi i64 [ %1196, %1208 ], [ %1220, %1212 ]
  %1224 = phi i8* [ %1195, %1208 ], [ %1221, %1212 ]
  %1225 = icmp eq i8* %1224, %11
  br i1 %1225, label %1230, label %1199

1226:                                             ; preds = %1204
  %1227 = ptrtoint i8* %11 to i64
  br label %1230

1228:                                             ; preds = %1198
  %1229 = ptrtoint i8* %11 to i64
  br label %1230

1230:                                             ; preds = %1222, %1228, %1226
  %1231 = phi i64 [ %1227, %1226 ], [ %1229, %1228 ], [ %1223, %1222 ]
  %1232 = sub i64 %1231, %9
  %1233 = trunc i64 %1232 to i32
  store i32 %1233, i32* %4, align 4
  %1234 = icmp eq i8 %88, 0
  %1235 = select i1 %1234, double 0.000000e+00, double -0.000000e+00
  br label %1692

1236:                                             ; preds = %1199
  %1237 = inttoptr i64 %1200 to i8*
  br label %1238

1238:                                             ; preds = %343, %1236, %1190
  %1239 = phi i8* [ %341, %1190 ], [ %1237, %1236 ], [ %341, %343 ]
  %1240 = phi i64 [ %335, %1190 ], [ %1200, %1236 ], [ %335, %343 ]
  %1241 = and i32 %336, 2
  %1242 = icmp ne i32 %1241, 0
  br label %1243

1243:                                             ; preds = %294, %1238
  %1244 = phi i8* [ %194, %294 ], [ %1239, %1238 ]
  %1245 = phi i1 [ false, %294 ], [ true, %1238 ]
  %1246 = phi i64 [ %87, %294 ], [ %1240, %1238 ]
  %1247 = phi i1 [ false, %294 ], [ %1242, %1238 ]
  %1248 = zext i1 %1247 to i8
  %1249 = getelementptr inbounds [782 x i8], [782 x i8]* %6, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 782, i8* nonnull %1249) #5
  %1250 = load i8, i8* %1244, align 1
  %1251 = add i8 %1250, -48
  %1252 = icmp ult i8 %1251, 10
  br i1 %1252, label %1253, label %1335

1253:                                             ; preds = %1243
  %1254 = getelementptr inbounds %"class.double_conversion::StringToDoubleConverter", %"class.double_conversion::StringToDoubleConverter"* %0, i64 0, i32 6
  br label %1255

1255:                                             ; preds = %1253, %1294
  %1256 = phi i8 [ %1250, %1253 ], [ %1297, %1294 ]
  %1257 = phi i8* [ %1244, %1253 ], [ %1296, %1294 ]
  %1258 = phi i32 [ 0, %1253 ], [ %1279, %1294 ]
  %1259 = phi i8 [ %1248, %1253 ], [ %1286, %1294 ]
  %1260 = phi i8 [ 0, %1253 ], [ %1278, %1294 ]
  %1261 = phi i32 [ 0, %1253 ], [ %1277, %1294 ]
  %1262 = phi i32 [ 0, %1253 ], [ %1276, %1294 ]
  %1263 = icmp slt i32 %1262, 772
  br i1 %1263, label %1264, label %1269

1264:                                             ; preds = %1255
  %1265 = add nsw i32 %1258, 1
  %1266 = sext i32 %1258 to i64
  %1267 = getelementptr inbounds [782 x i8], [782 x i8]* %6, i64 0, i64 %1266
  store i8 %1256, i8* %1267, align 1
  %1268 = add nsw i32 %1262, 1
  br label %1275

1269:                                             ; preds = %1255
  %1270 = add nsw i32 %1261, 1
  %1271 = and i8 %1260, 1
  %1272 = icmp ne i8 %1256, 48
  %1273 = zext i1 %1272 to i8
  %1274 = or i8 %1271, %1273
  br label %1275

1275:                                             ; preds = %1269, %1264
  %1276 = phi i32 [ %1268, %1264 ], [ %1262, %1269 ]
  %1277 = phi i32 [ %1261, %1264 ], [ %1270, %1269 ]
  %1278 = phi i8 [ %1260, %1264 ], [ %1274, %1269 ]
  %1279 = phi i32 [ %1265, %1264 ], [ %1258, %1269 ]
  %1280 = icmp eq i8 %1259, 0
  br i1 %1280, label %1284, label %1281

1281:                                             ; preds = %1275
  %1282 = load i8, i8* %1257, align 1
  %1283 = icmp slt i8 %1282, 56
  br label %1284

1284:                                             ; preds = %1275, %1281
  %1285 = phi i1 [ false, %1275 ], [ %1283, %1281 ]
  %1286 = zext i1 %1285 to i8
  %1287 = load i16, i16* %1254, align 8
  %1288 = zext i16 %1287 to i32
  %1289 = icmp eq i16 %1287, 0
  br i1 %1289, label %1290, label %1300

1290:                                             ; preds = %1284
  %1291 = getelementptr inbounds i8, i8* %1257, i64 1
  %1292 = ptrtoint i8* %1291 to i64
  %1293 = icmp eq i8* %1291, %11
  br i1 %1293, label %1623, label %1294

1294:                                             ; preds = %1290, %1329, %1310, %1312
  %1295 = phi i64 [ %1292, %1290 ], [ %1330, %1329 ], [ %1308, %1310 ], [ %1308, %1312 ]
  %1296 = inttoptr i64 %1295 to i8*
  %1297 = load i8, i8* %1296, align 1
  %1298 = add i8 %1297, -48
  %1299 = icmp ult i8 %1298, 10
  br i1 %1299, label %1255, label %1333

1300:                                             ; preds = %1284
  %1301 = load i8, i8* %1257, align 1
  %1302 = sext i8 %1301 to i32
  %1303 = add nsw i32 %1302, -48
  %1304 = icmp ult i32 %1303, 10
  %1305 = icmp slt i8 %1301, 58
  %1306 = and i1 %1305, %1304
  %1307 = getelementptr inbounds i8, i8* %1257, i64 1
  %1308 = ptrtoint i8* %1307 to i64
  %1309 = icmp eq i8* %1307, %11
  br i1 %1306, label %1311, label %1310

1310:                                             ; preds = %1300
  br i1 %1309, label %1625, label %1294

1311:                                             ; preds = %1300
  br i1 %1309, label %1627, label %1312

1312:                                             ; preds = %1311
  %1313 = getelementptr inbounds i8, i8* %1257, i64 2
  %1314 = icmp eq i8* %1313, %11
  br i1 %1314, label %1294, label %1315

1315:                                             ; preds = %1312
  %1316 = load i8, i8* %1307, align 1
  %1317 = sext i8 %1316 to i32
  %1318 = icmp eq i32 %1317, %1288
  br i1 %1318, label %1319, label %1329

1319:                                             ; preds = %1315
  %1320 = load i8, i8* %1313, align 1
  %1321 = sext i8 %1320 to i32
  %1322 = add nsw i32 %1321, -48
  %1323 = icmp ult i32 %1322, 10
  %1324 = icmp slt i8 %1320, 58
  %1325 = and i1 %1324, %1323
  %1326 = ptrtoint i8* %1313 to i64
  %1327 = select i1 %1325, i64 %1326, i64 %1308
  %1328 = select i1 %1325, i8* %1313, i8* %1307
  br label %1329

1329:                                             ; preds = %1319, %1315
  %1330 = phi i64 [ %1308, %1315 ], [ %1327, %1319 ]
  %1331 = phi i8* [ %1307, %1315 ], [ %1328, %1319 ]
  %1332 = icmp eq i8* %1331, %11
  br i1 %1332, label %1637, label %1294

1333:                                             ; preds = %1294
  %1334 = inttoptr i64 %1295 to i8*
  br label %1335

1335:                                             ; preds = %1333, %1243
  %1336 = phi i64 [ %1246, %1243 ], [ %1295, %1333 ]
  %1337 = phi i32 [ 0, %1243 ], [ %1276, %1333 ]
  %1338 = phi i32 [ 0, %1243 ], [ %1277, %1333 ]
  %1339 = phi i8 [ 0, %1243 ], [ %1278, %1333 ]
  %1340 = phi i8 [ %1248, %1243 ], [ %1286, %1333 ]
  %1341 = phi i32 [ 0, %1243 ], [ %1279, %1333 ]
  %1342 = phi i8* [ %1244, %1243 ], [ %1334, %1333 ]
  %1343 = phi i8 [ %1250, %1243 ], [ %1297, %1333 ]
  %1344 = icmp eq i32 %1337, 0
  %1345 = select i1 %1344, i8 0, i8 %1340
  %1346 = icmp eq i8 %1343, 46
  br i1 %1346, label %1347, label %1491

1347:                                             ; preds = %1335
  %1348 = icmp ne i8 %1345, 0
  %1349 = xor i1 %1348, true
  %1350 = or i1 %15, %1349
  br i1 %1350, label %1354, label %1351

1351:                                             ; preds = %1347
  %1352 = getelementptr inbounds %"class.double_conversion::StringToDoubleConverter", %"class.double_conversion::StringToDoubleConverter"* %0, i64 0, i32 3
  %1353 = load double, double* %1352, align 8
  br label %1690

1354:                                             ; preds = %1347
  br i1 %1348, label %1647, label %1355

1355:                                             ; preds = %1354
  %1356 = getelementptr inbounds %"class.double_conversion::StringToDoubleConverter", %"class.double_conversion::StringToDoubleConverter"* %0, i64 0, i32 6
  %1357 = load i16, i16* %1356, align 8
  %1358 = zext i16 %1357 to i32
  %1359 = icmp eq i16 %1357, 0
  %1360 = getelementptr inbounds i8, i8* %1342, i64 1
  %1361 = ptrtoint i8* %1360 to i64
  %1362 = icmp eq i8* %1360, %11
  br i1 %1362, label %1363, label %1368

1363:                                             ; preds = %1355
  br i1 %1344, label %1364, label %1637

1364:                                             ; preds = %1363
  br i1 %1245, label %1631, label %1365

1365:                                             ; preds = %1364
  %1366 = getelementptr inbounds %"class.double_conversion::StringToDoubleConverter", %"class.double_conversion::StringToDoubleConverter"* %0, i64 0, i32 3
  %1367 = load double, double* %1366, align 8
  br label %1690

1368:                                             ; preds = %1355
  br i1 %1344, label %1369, label %1417

1369:                                             ; preds = %1368
  %1370 = load i8, i8* %1360, align 1
  %1371 = icmp eq i8 %1370, 48
  br i1 %1371, label %1372, label %1417

1372:                                             ; preds = %1369, %1411
  %1373 = phi i8* [ %1414, %1411 ], [ %1360, %1369 ]
  %1374 = phi i32 [ %1413, %1411 ], [ 0, %1369 ]
  %1375 = getelementptr inbounds i8, i8* %1373, i64 1
  %1376 = ptrtoint i8* %1375 to i64
  %1377 = icmp eq i8* %1375, %11
  br i1 %1359, label %1378, label %1379

1378:                                             ; preds = %1372
  br i1 %1377, label %1403, label %1411

1379:                                             ; preds = %1372
  br i1 %1377, label %1401, label %1380

1380:                                             ; preds = %1379
  %1381 = getelementptr inbounds i8, i8* %1373, i64 2
  %1382 = icmp eq i8* %1381, %11
  br i1 %1382, label %1411, label %1383

1383:                                             ; preds = %1380
  %1384 = load i8, i8* %1375, align 1
  %1385 = sext i8 %1384 to i32
  %1386 = icmp eq i32 %1385, %1358
  br i1 %1386, label %1387, label %1397

1387:                                             ; preds = %1383
  %1388 = load i8, i8* %1381, align 1
  %1389 = sext i8 %1388 to i32
  %1390 = add nsw i32 %1389, -48
  %1391 = icmp ult i32 %1390, 10
  %1392 = icmp slt i8 %1388, 58
  %1393 = and i1 %1392, %1391
  %1394 = ptrtoint i8* %1381 to i64
  %1395 = select i1 %1393, i64 %1394, i64 %1376
  %1396 = select i1 %1393, i8* %1381, i8* %1375
  br label %1397

1397:                                             ; preds = %1387, %1383
  %1398 = phi i64 [ %1376, %1383 ], [ %1395, %1387 ]
  %1399 = phi i8* [ %1375, %1383 ], [ %1396, %1387 ]
  %1400 = icmp eq i8* %1399, %11
  br i1 %1400, label %1405, label %1411

1401:                                             ; preds = %1379
  %1402 = ptrtoint i8* %11 to i64
  br label %1405

1403:                                             ; preds = %1378
  %1404 = ptrtoint i8* %11 to i64
  br label %1405

1405:                                             ; preds = %1397, %1403, %1401
  %1406 = phi i64 [ %1402, %1401 ], [ %1404, %1403 ], [ %1398, %1397 ]
  %1407 = sub i64 %1406, %9
  %1408 = trunc i64 %1407 to i32
  store i32 %1408, i32* %4, align 4
  %1409 = icmp eq i8 %88, 0
  %1410 = select i1 %1409, double 0.000000e+00, double -0.000000e+00
  br label %1690

1411:                                             ; preds = %1380, %1397, %1378
  %1412 = phi i64 [ %1376, %1378 ], [ %1398, %1397 ], [ %1376, %1380 ]
  %1413 = add nsw i32 %1374, -1
  %1414 = inttoptr i64 %1412 to i8*
  %1415 = load i8, i8* %1414, align 1
  %1416 = icmp eq i8 %1415, 48
  br i1 %1416, label %1372, label %1417

1417:                                             ; preds = %1411, %1369, %1368
  %1418 = phi i64 [ %1361, %1368 ], [ %1361, %1369 ], [ %1412, %1411 ]
  %1419 = phi i32 [ 0, %1368 ], [ 0, %1369 ], [ %1413, %1411 ]
  %1420 = inttoptr i64 %1418 to i8*
  %1421 = load i8, i8* %1420, align 1
  %1422 = add i8 %1421, -48
  %1423 = icmp ult i8 %1422, 10
  br i1 %1423, label %1424, label %1491

1424:                                             ; preds = %1417, %1452
  %1425 = phi i8 [ %1455, %1452 ], [ %1421, %1417 ]
  %1426 = phi i8* [ %1454, %1452 ], [ %1420, %1417 ]
  %1427 = phi i32 [ %1447, %1452 ], [ %1341, %1417 ]
  %1428 = phi i8 [ %1446, %1452 ], [ %1339, %1417 ]
  %1429 = phi i32 [ %1445, %1452 ], [ %1337, %1417 ]
  %1430 = phi i32 [ %1444, %1452 ], [ %1419, %1417 ]
  %1431 = icmp slt i32 %1429, 772
  br i1 %1431, label %1432, label %1438

1432:                                             ; preds = %1424
  %1433 = add nsw i32 %1427, 1
  %1434 = sext i32 %1427 to i64
  %1435 = getelementptr inbounds [782 x i8], [782 x i8]* %6, i64 0, i64 %1434
  store i8 %1425, i8* %1435, align 1
  %1436 = add nsw i32 %1429, 1
  %1437 = add nsw i32 %1430, -1
  br label %1443

1438:                                             ; preds = %1424
  %1439 = and i8 %1428, 1
  %1440 = icmp ne i8 %1425, 48
  %1441 = zext i1 %1440 to i8
  %1442 = or i8 %1439, %1441
  br label %1443

1443:                                             ; preds = %1438, %1432
  %1444 = phi i32 [ %1437, %1432 ], [ %1430, %1438 ]
  %1445 = phi i32 [ %1436, %1432 ], [ %1429, %1438 ]
  %1446 = phi i8 [ %1428, %1432 ], [ %1442, %1438 ]
  %1447 = phi i32 [ %1433, %1432 ], [ %1427, %1438 ]
  br i1 %1359, label %1448, label %1458

1448:                                             ; preds = %1443
  %1449 = getelementptr inbounds i8, i8* %1426, i64 1
  %1450 = ptrtoint i8* %1449 to i64
  %1451 = icmp eq i8* %1449, %11
  br i1 %1451, label %1617, label %1452

1452:                                             ; preds = %1448, %1487, %1468, %1470
  %1453 = phi i64 [ %1450, %1448 ], [ %1488, %1487 ], [ %1466, %1468 ], [ %1466, %1470 ]
  %1454 = inttoptr i64 %1453 to i8*
  %1455 = load i8, i8* %1454, align 1
  %1456 = add i8 %1455, -48
  %1457 = icmp ult i8 %1456, 10
  br i1 %1457, label %1424, label %1491

1458:                                             ; preds = %1443
  %1459 = load i8, i8* %1426, align 1
  %1460 = sext i8 %1459 to i32
  %1461 = add nsw i32 %1460, -48
  %1462 = icmp ult i32 %1461, 10
  %1463 = icmp slt i8 %1459, 58
  %1464 = and i1 %1463, %1462
  %1465 = getelementptr inbounds i8, i8* %1426, i64 1
  %1466 = ptrtoint i8* %1465 to i64
  %1467 = icmp eq i8* %1465, %11
  br i1 %1464, label %1469, label %1468

1468:                                             ; preds = %1458
  br i1 %1467, label %1619, label %1452

1469:                                             ; preds = %1458
  br i1 %1467, label %1621, label %1470

1470:                                             ; preds = %1469
  %1471 = getelementptr inbounds i8, i8* %1426, i64 2
  %1472 = icmp eq i8* %1471, %11
  br i1 %1472, label %1452, label %1473

1473:                                             ; preds = %1470
  %1474 = load i8, i8* %1465, align 1
  %1475 = sext i8 %1474 to i32
  %1476 = icmp eq i32 %1475, %1358
  br i1 %1476, label %1477, label %1487

1477:                                             ; preds = %1473
  %1478 = load i8, i8* %1471, align 1
  %1479 = sext i8 %1478 to i32
  %1480 = add nsw i32 %1479, -48
  %1481 = icmp ult i32 %1480, 10
  %1482 = icmp slt i8 %1478, 58
  %1483 = and i1 %1482, %1481
  %1484 = ptrtoint i8* %1471 to i64
  %1485 = select i1 %1483, i64 %1484, i64 %1466
  %1486 = select i1 %1483, i8* %1471, i8* %1465
  br label %1487

1487:                                             ; preds = %1477, %1473
  %1488 = phi i64 [ %1466, %1473 ], [ %1485, %1477 ]
  %1489 = phi i8* [ %1465, %1473 ], [ %1486, %1477 ]
  %1490 = icmp eq i8* %1489, %11
  br i1 %1490, label %1631, label %1452

1491:                                             ; preds = %1452, %1417, %1335
  %1492 = phi i64 [ %1336, %1335 ], [ %1418, %1417 ], [ %1453, %1452 ]
  %1493 = phi i32 [ 0, %1335 ], [ %1419, %1417 ], [ %1444, %1452 ]
  %1494 = phi i32 [ %1337, %1335 ], [ %1337, %1417 ], [ %1445, %1452 ]
  %1495 = phi i8 [ %1339, %1335 ], [ %1339, %1417 ], [ %1446, %1452 ]
  %1496 = phi i32 [ %1341, %1335 ], [ %1341, %1417 ], [ %1447, %1452 ]
  %1497 = xor i1 %1245, true
  %1498 = or i32 %1494, %1493
  %1499 = icmp eq i32 %1498, 0
  %1500 = and i1 %1499, %1497
  br i1 %1500, label %1501, label %1504

1501:                                             ; preds = %1491
  %1502 = getelementptr inbounds %"class.double_conversion::StringToDoubleConverter", %"class.double_conversion::StringToDoubleConverter"* %0, i64 0, i32 3
  %1503 = load double, double* %1502, align 8
  br label %1690

1504:                                             ; preds = %1491
  %1505 = inttoptr i64 %1492 to i8*
  %1506 = load i8, i8* %1505, align 1
  switch i8 %1506, label %1572 [
    i8 101, label %1507
    i8 69, label %1507
  ]

1507:                                             ; preds = %1504, %1504
  %1508 = icmp ne i8 %1345, 0
  %1509 = xor i1 %1508, true
  %1510 = or i1 %15, %1509
  br i1 %1510, label %1514, label %1511

1511:                                             ; preds = %1507
  %1512 = getelementptr inbounds %"class.double_conversion::StringToDoubleConverter", %"class.double_conversion::StringToDoubleConverter"* %0, i64 0, i32 3
  %1513 = load double, double* %1512, align 8
  br label %1690

1514:                                             ; preds = %1507
  br i1 %1508, label %1637, label %1515

1515:                                             ; preds = %1514
  %1516 = getelementptr inbounds i8, i8* %1505, i64 1
  %1517 = icmp eq i8* %1516, %11
  br i1 %1517, label %1518, label %1522

1518:                                             ; preds = %1515
  br i1 %15, label %1631, label %1519

1519:                                             ; preds = %1518
  %1520 = getelementptr inbounds %"class.double_conversion::StringToDoubleConverter", %"class.double_conversion::StringToDoubleConverter"* %0, i64 0, i32 3
  %1521 = load double, double* %1520, align 8
  br label %1690

1522:                                             ; preds = %1515
  %1523 = load i8, i8* %1516, align 1
  switch i8 %1523, label %1531 [
    i8 43, label %1524
    i8 45, label %1524
  ]

1524:                                             ; preds = %1522, %1522
  %1525 = getelementptr inbounds i8, i8* %1505, i64 2
  %1526 = icmp eq i8* %1525, %11
  br i1 %1526, label %1527, label %1531

1527:                                             ; preds = %1524
  br i1 %15, label %1631, label %1528

1528:                                             ; preds = %1527
  %1529 = getelementptr inbounds %"class.double_conversion::StringToDoubleConverter", %"class.double_conversion::StringToDoubleConverter"* %0, i64 0, i32 3
  %1530 = load double, double* %1529, align 8
  br label %1690

1531:                                             ; preds = %1522, %1524
  %1532 = phi i8* [ %1516, %1522 ], [ %1525, %1524 ]
  %1533 = phi i8 [ 43, %1522 ], [ %1523, %1524 ]
  %1534 = icmp eq i8* %1532, %11
  br i1 %1534, label %1539, label %1535

1535:                                             ; preds = %1531
  %1536 = load i8, i8* %1532, align 1
  %1537 = add i8 %1536, -48
  %1538 = icmp ugt i8 %1537, 9
  br i1 %1538, label %1539, label %1543

1539:                                             ; preds = %1535, %1531
  br i1 %15, label %1631, label %1540

1540:                                             ; preds = %1539
  %1541 = getelementptr inbounds %"class.double_conversion::StringToDoubleConverter", %"class.double_conversion::StringToDoubleConverter"* %0, i64 0, i32 3
  %1542 = load double, double* %1541, align 8
  br label %1690

1543:                                             ; preds = %1535, %1561
  %1544 = phi i8 [ %1562, %1561 ], [ %1536, %1535 ]
  %1545 = phi i8* [ %1559, %1561 ], [ %1532, %1535 ]
  %1546 = phi i32 [ %1558, %1561 ], [ 0, %1535 ]
  %1547 = sext i8 %1544 to i32
  %1548 = add nsw i32 %1547, -48
  %1549 = icmp sgt i32 %1546, 107374181
  br i1 %1549, label %1550, label %1554

1550:                                             ; preds = %1543
  %1551 = icmp eq i32 %1546, 107374182
  %1552 = icmp slt i32 %1548, 4
  %1553 = and i1 %1551, %1552
  br i1 %1553, label %1554, label %1557

1554:                                             ; preds = %1550, %1543
  %1555 = mul nsw i32 %1546, 10
  %1556 = add nsw i32 %1548, %1555
  br label %1557

1557:                                             ; preds = %1550, %1554
  %1558 = phi i32 [ %1556, %1554 ], [ 1073741823, %1550 ]
  %1559 = getelementptr inbounds i8, i8* %1545, i64 1
  %1560 = icmp eq i8* %1559, %11
  br i1 %1560, label %1565, label %1561

1561:                                             ; preds = %1557
  %1562 = load i8, i8* %1559, align 1
  %1563 = add i8 %1562, -48
  %1564 = icmp ult i8 %1563, 10
  br i1 %1564, label %1543, label %1565

1565:                                             ; preds = %1561, %1557
  %1566 = phi i8* [ %1559, %1561 ], [ %11, %1557 ]
  %1567 = ptrtoint i8* %1566 to i64
  %1568 = icmp eq i8 %1533, 45
  %1569 = sub nsw i32 0, %1558
  %1570 = select i1 %1568, i32 %1569, i32 %1558
  %1571 = add nsw i32 %1570, %1493
  br label %1572

1572:                                             ; preds = %1565, %1504
  %1573 = phi i8* [ %1566, %1565 ], [ %1505, %1504 ]
  %1574 = phi i64 [ %1567, %1565 ], [ %1492, %1504 ]
  %1575 = phi i32 [ %1571, %1565 ], [ %1493, %1504 ]
  %1576 = and i32 %13, 20
  %1577 = icmp ne i32 %1576, 0
  %1578 = icmp eq i8* %11, %1573
  %1579 = or i1 %1577, %1578
  br i1 %1579, label %1583, label %1580

1580:                                             ; preds = %1572
  %1581 = getelementptr inbounds %"class.double_conversion::StringToDoubleConverter", %"class.double_conversion::StringToDoubleConverter"* %0, i64 0, i32 3
  %1582 = load double, double* %1581, align 8
  br label %1690

1583:                                             ; preds = %1572
  %1584 = or i1 %15, %1578
  br i1 %1584, label %1598, label %1585

1585:                                             ; preds = %1583, %1590
  %1586 = phi i8* [ %1591, %1590 ], [ %1573, %1583 ]
  %1587 = load i8, i8* %1586, align 1
  %1588 = sext i8 %1587 to i32
  %1589 = tail call fastcc zeroext i1 @_ZN17double_conversionL12isWhitespaceEi(i32 %1588) #5
  br i1 %1589, label %1590, label %1593

1590:                                             ; preds = %1585
  %1591 = getelementptr inbounds i8, i8* %1586, i64 1
  %1592 = icmp eq i8* %1591, %11
  br i1 %1592, label %1596, label %1585

1593:                                             ; preds = %1585
  %1594 = getelementptr inbounds %"class.double_conversion::StringToDoubleConverter", %"class.double_conversion::StringToDoubleConverter"* %0, i64 0, i32 3
  %1595 = load double, double* %1594, align 8
  br label %1690

1596:                                             ; preds = %1590
  %1597 = ptrtoint i8* %11 to i64
  br label %1598

1598:                                             ; preds = %1583, %1596
  %1599 = phi i64 [ %1574, %1583 ], [ %1597, %1596 ]
  br i1 %19, label %1600, label %1637

1600:                                             ; preds = %1598
  %1601 = inttoptr i64 %1599 to i8*
  %1602 = icmp eq i8* %11, %1601
  br i1 %1602, label %1637, label %1603

1603:                                             ; preds = %1600
  %1604 = load i8, i8* %1601, align 1
  %1605 = sext i8 %1604 to i32
  %1606 = tail call fastcc zeroext i1 @_ZN17double_conversionL12isWhitespaceEi(i32 %1605) #5
  br i1 %1606, label %1611, label %1637

1607:                                             ; preds = %1611
  %1608 = load i8, i8* %1613, align 1
  %1609 = sext i8 %1608 to i32
  %1610 = tail call fastcc zeroext i1 @_ZN17double_conversionL12isWhitespaceEi(i32 %1609) #5
  br i1 %1610, label %1611, label %1629

1611:                                             ; preds = %1603, %1607
  %1612 = phi i8* [ %1613, %1607 ], [ %1601, %1603 ]
  %1613 = getelementptr inbounds i8, i8* %1612, i64 1
  %1614 = icmp eq i8* %1613, %11
  br i1 %1614, label %1615, label %1607

1615:                                             ; preds = %1611
  %1616 = ptrtoint i8* %11 to i64
  br label %1637

1617:                                             ; preds = %1448
  %1618 = ptrtoint i8* %11 to i64
  br label %1631

1619:                                             ; preds = %1468
  %1620 = ptrtoint i8* %11 to i64
  br label %1631

1621:                                             ; preds = %1469
  %1622 = ptrtoint i8* %11 to i64
  br label %1631

1623:                                             ; preds = %1290
  %1624 = ptrtoint i8* %11 to i64
  br label %1637

1625:                                             ; preds = %1310
  %1626 = ptrtoint i8* %11 to i64
  br label %1637

1627:                                             ; preds = %1311
  %1628 = ptrtoint i8* %11 to i64
  br label %1637

1629:                                             ; preds = %1607
  %1630 = ptrtoint i8* %1613 to i64
  br label %1637

1631:                                             ; preds = %1487, %1364, %1518, %1527, %1539, %1617, %1619, %1621
  %1632 = phi i64 [ %1622, %1621 ], [ %1620, %1619 ], [ %1618, %1617 ], [ %1492, %1539 ], [ %1492, %1527 ], [ %1492, %1518 ], [ %1361, %1364 ], [ %1488, %1487 ]
  %1633 = phi i32 [ %1444, %1621 ], [ %1444, %1619 ], [ %1444, %1617 ], [ %1493, %1539 ], [ %1493, %1527 ], [ %1493, %1518 ], [ 0, %1364 ], [ %1444, %1487 ]
  %1634 = phi i8 [ %1446, %1621 ], [ %1446, %1619 ], [ %1446, %1617 ], [ %1495, %1539 ], [ %1495, %1527 ], [ %1495, %1518 ], [ %1339, %1364 ], [ %1446, %1487 ]
  %1635 = phi i32 [ %1447, %1621 ], [ %1447, %1619 ], [ %1447, %1617 ], [ %1496, %1539 ], [ %1496, %1527 ], [ %1496, %1518 ], [ %1341, %1364 ], [ %1447, %1487 ]
  %1636 = add nsw i32 %1338, %1633
  br label %1661

1637:                                             ; preds = %1329, %1629, %1623, %1625, %1627, %1603, %1615, %1600, %1598, %1514, %1363
  %1638 = phi i64 [ %1361, %1363 ], [ %1599, %1598 ], [ %1492, %1514 ], [ %1599, %1600 ], [ %1616, %1615 ], [ %1599, %1603 ], [ %1624, %1623 ], [ %1626, %1625 ], [ %1628, %1627 ], [ %1630, %1629 ], [ %1330, %1329 ]
  %1639 = phi i32 [ 0, %1363 ], [ %1575, %1598 ], [ %1493, %1514 ], [ %1575, %1600 ], [ %1575, %1615 ], [ %1575, %1603 ], [ 0, %1623 ], [ 0, %1625 ], [ 0, %1627 ], [ %1575, %1629 ], [ 0, %1329 ]
  %1640 = phi i32 [ %1338, %1363 ], [ %1338, %1598 ], [ %1338, %1514 ], [ %1338, %1600 ], [ %1338, %1615 ], [ %1338, %1603 ], [ %1277, %1623 ], [ %1277, %1625 ], [ %1277, %1627 ], [ %1338, %1629 ], [ %1277, %1329 ]
  %1641 = phi i8 [ %1339, %1363 ], [ %1495, %1598 ], [ %1495, %1514 ], [ %1495, %1600 ], [ %1495, %1615 ], [ %1495, %1603 ], [ %1278, %1623 ], [ %1278, %1625 ], [ %1278, %1627 ], [ %1495, %1629 ], [ %1278, %1329 ]
  %1642 = phi i8 [ %1340, %1363 ], [ %1345, %1598 ], [ %1345, %1514 ], [ %1345, %1600 ], [ %1345, %1615 ], [ %1345, %1603 ], [ %1286, %1623 ], [ %1286, %1625 ], [ %1286, %1627 ], [ %1345, %1629 ], [ %1286, %1329 ]
  %1643 = phi i32 [ %1341, %1363 ], [ %1496, %1598 ], [ %1496, %1514 ], [ %1496, %1600 ], [ %1496, %1615 ], [ %1496, %1603 ], [ %1279, %1623 ], [ %1279, %1625 ], [ %1279, %1627 ], [ %1496, %1629 ], [ %1279, %1329 ]
  %1644 = add nsw i32 %1640, %1639
  %1645 = and i8 %1642, 1
  %1646 = icmp eq i8 %1645, 0
  br i1 %1646, label %1661, label %1647

1647:                                             ; preds = %1354, %1637
  %1648 = phi i32 [ %1643, %1637 ], [ %1341, %1354 ]
  %1649 = phi i64 [ %1638, %1637 ], [ %1336, %1354 ]
  call void @llvm.lifetime.start.p0i8(i64 1, i8* nonnull %7) #5
  store i8 -86, i8* %7, align 1
  %1650 = bitcast i8** %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %1650) #5
  store i8* %1249, i8** %8, align 8
  %1651 = sext i32 %1648 to i64
  %1652 = getelementptr inbounds [782 x i8], [782 x i8]* %6, i64 0, i64 %1651
  %1653 = icmp ne i8 %88, 0
  %1654 = getelementptr inbounds %"class.double_conversion::StringToDoubleConverter", %"class.double_conversion::StringToDoubleConverter"* %0, i64 0, i32 6
  %1655 = load i16, i16* %1654, align 8
  %1656 = getelementptr inbounds %"class.double_conversion::StringToDoubleConverter", %"class.double_conversion::StringToDoubleConverter"* %0, i64 0, i32 3
  %1657 = load double, double* %1656, align 8
  %1658 = call fastcc double @_ZN17double_conversionL17RadixStringToIeeeILi3EPcEEdPT0_S2_btbbdbPb(i8** nonnull %8, i8* %1652, i1 zeroext %1653, i16 zeroext %1655, i1 zeroext %15, double %1657, i1 zeroext %3, i8* nonnull %7)
  %1659 = sub i64 %1649, %9
  %1660 = trunc i64 %1659 to i32
  store i32 %1660, i32* %4, align 4
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %1650) #5
  call void @llvm.lifetime.end.p0i8(i64 1, i8* nonnull %7) #5
  br label %1690

1661:                                             ; preds = %1631, %1637
  %1662 = phi i32 [ %1636, %1631 ], [ %1644, %1637 ]
  %1663 = phi i32 [ %1635, %1631 ], [ %1643, %1637 ]
  %1664 = phi i8 [ %1634, %1631 ], [ %1641, %1637 ]
  %1665 = phi i64 [ %1632, %1631 ], [ %1638, %1637 ]
  %1666 = and i8 %1664, 1
  %1667 = icmp eq i8 %1666, 0
  br i1 %1667, label %1673, label %1668

1668:                                             ; preds = %1661
  %1669 = add nsw i32 %1663, 1
  %1670 = sext i32 %1663 to i64
  %1671 = getelementptr inbounds [782 x i8], [782 x i8]* %6, i64 0, i64 %1670
  store i8 49, i8* %1671, align 1
  %1672 = add nsw i32 %1662, -1
  br label %1673

1673:                                             ; preds = %1661, %1668
  %1674 = phi i32 [ %1672, %1668 ], [ %1662, %1661 ]
  %1675 = phi i32 [ %1669, %1668 ], [ %1663, %1661 ]
  %1676 = sext i32 %1675 to i64
  %1677 = getelementptr inbounds [782 x i8], [782 x i8]* %6, i64 0, i64 %1676
  store i8 0, i8* %1677, align 1
  br i1 %3, label %1678, label %1680

1678:                                             ; preds = %1673
  %1679 = call double @_ZN17double_conversion6StrtodENS_6VectorIKcEEi(i8* nonnull %1249, i32 %1675, i32 %1674) #5
  br label %1683

1680:                                             ; preds = %1673
  %1681 = call float @_ZN17double_conversion6StrtofENS_6VectorIKcEEi(i8* nonnull %1249, i32 %1675, i32 %1674) #5
  %1682 = fpext float %1681 to double
  br label %1683

1683:                                             ; preds = %1680, %1678
  %1684 = phi double [ %1679, %1678 ], [ %1682, %1680 ]
  %1685 = sub i64 %1665, %9
  %1686 = trunc i64 %1685 to i32
  store i32 %1686, i32* %4, align 4
  %1687 = icmp eq i8 %88, 0
  %1688 = fsub double -0.000000e+00, %1684
  %1689 = select i1 %1687, double %1684, double %1688
  br label %1690

1690:                                             ; preds = %1540, %1528, %1519, %1683, %1647, %1593, %1580, %1511, %1501, %1405, %1365, %1351
  %1691 = phi double [ %1658, %1647 ], [ %1689, %1683 ], [ %1367, %1365 ], [ %1410, %1405 ], [ %1503, %1501 ], [ %1595, %1593 ], [ %1582, %1580 ], [ %1513, %1511 ], [ %1353, %1351 ], [ %1542, %1540 ], [ %1530, %1528 ], [ %1521, %1519 ]
  call void @llvm.lifetime.end.p0i8(i64 782, i8* nonnull %1249) #5
  br label %1692

1692:                                             ; preds = %704, %837, %698, %1186, %75, %83, %158, %167, %180, %183, %260, %269, %282, %285, %609, %1690, %1230, %348, %328, %53, %43, %25
  %1693 = phi double [ %27, %25 ], [ %55, %53 ], [ %45, %43 ], [ %189, %183 ], [ %182, %180 ], [ %169, %167 ], [ %160, %158 ], [ %291, %285 ], [ %284, %282 ], [ %271, %269 ], [ %262, %260 ], [ %333, %328 ], [ %350, %348 ], [ %1235, %1230 ], [ %1691, %1690 ], [ %611, %609 ], [ %85, %83 ], [ %77, %75 ], [ %1166, %1186 ], [ %621, %698 ], [ %621, %837 ], [ %621, %704 ]
  ret double %1693
}

; Function Attrs: nounwind ssp uwtable
define hidden double @_ZNK17double_conversion23StringToDoubleConverter14StringToDoubleEPKtiPi(%"class.double_conversion::StringToDoubleConverter"*, i16*, i32, i32*) local_unnamed_addr #0 align 2 {
  %5 = tail call double @_ZNK17double_conversion23StringToDoubleConverter12StringToIeeeIPKtEEdT_ibPi(%"class.double_conversion::StringToDoubleConverter"* %0, i16* %1, i32 %2, i1 zeroext true, i32* %3)
  ret double %5
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden double @_ZNK17double_conversion23StringToDoubleConverter12StringToIeeeIPKtEEdT_ibPi(%"class.double_conversion::StringToDoubleConverter"*, i16*, i32, i1 zeroext, i32*) local_unnamed_addr #0 comdat align 2 {
  %6 = alloca i16*, align 8
  %7 = alloca [782 x i8], align 16
  %8 = alloca i8, align 1
  %9 = alloca i8*, align 8
  %10 = bitcast i16** %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %10) #5
  store i16* %1, i16** %6, align 8
  %11 = sext i32 %2 to i64
  %12 = getelementptr inbounds i16, i16* %1, i64 %11
  store i32 0, i32* %4, align 4
  %13 = getelementptr inbounds %"class.double_conversion::StringToDoubleConverter", %"class.double_conversion::StringToDoubleConverter"* %0, i64 0, i32 0
  %14 = load i32, i32* %13, align 8
  %15 = and i32 %14, 4
  %16 = icmp ne i32 %15, 0
  %17 = and i32 %14, 8
  %18 = icmp ne i32 %17, 0
  %19 = and i32 %14, 16
  %20 = icmp ne i32 %19, 0
  %21 = and i32 %14, 32
  %22 = icmp ne i32 %21, 0
  %23 = and i32 %14, 64
  %24 = icmp ne i32 %23, 0
  %25 = icmp eq i32 %2, 0
  br i1 %25, label %26, label %29

26:                                               ; preds = %5
  %27 = getelementptr inbounds %"class.double_conversion::StringToDoubleConverter", %"class.double_conversion::StringToDoubleConverter"* %0, i64 0, i32 2
  %28 = load double, double* %27, align 8
  br label %1566

29:                                               ; preds = %5
  %30 = and i32 %14, 24
  %31 = icmp eq i32 %30, 0
  br i1 %31, label %32, label %34

32:                                               ; preds = %29
  %33 = load i16, i16* %1, align 2
  br label %56

34:                                               ; preds = %29, %39
  %35 = phi i16* [ %40, %39 ], [ %1, %29 ]
  %36 = load i16, i16* %35, align 2
  %37 = zext i16 %36 to i32
  %38 = tail call fastcc zeroext i1 @_ZN17double_conversionL12isWhitespaceEi(i32 %37) #5
  br i1 %38, label %39, label %50

39:                                               ; preds = %34
  %40 = getelementptr inbounds i16, i16* %35, i64 1
  store i16* %40, i16** %6, align 8
  %41 = icmp eq i16* %40, %12
  br i1 %41, label %42, label %34

42:                                               ; preds = %39
  %43 = ptrtoint i16* %40 to i64
  %44 = ptrtoint i16* %1 to i64
  %45 = sub i64 %43, %44
  %46 = lshr exact i64 %45, 1
  %47 = trunc i64 %46 to i32
  store i32 %47, i32* %4, align 4
  %48 = getelementptr inbounds %"class.double_conversion::StringToDoubleConverter", %"class.double_conversion::StringToDoubleConverter"* %0, i64 0, i32 2
  %49 = load double, double* %48, align 8
  br label %1566

50:                                               ; preds = %34
  %51 = icmp eq i16* %35, %1
  %52 = or i1 %18, %51
  br i1 %52, label %56, label %53

53:                                               ; preds = %50
  %54 = getelementptr inbounds %"class.double_conversion::StringToDoubleConverter", %"class.double_conversion::StringToDoubleConverter"* %0, i64 0, i32 3
  %55 = load double, double* %54, align 8
  br label %1566

56:                                               ; preds = %32, %50
  %57 = phi i16 [ %33, %32 ], [ %36, %50 ]
  %58 = phi i16* [ %1, %32 ], [ %35, %50 ]
  switch i16 %57, label %87 [
    i16 43, label %59
    i16 45, label %59
  ]

59:                                               ; preds = %56, %56
  %60 = icmp eq i16 %57, 45
  %61 = zext i1 %60 to i8
  %62 = getelementptr inbounds i16, i16* %58, i64 1
  store i16* %62, i16** %6, align 8
  %63 = icmp eq i16* %62, %12
  br i1 %63, label %74, label %64

64:                                               ; preds = %59, %70
  %65 = phi i64 [ %71, %70 ], [ 1, %59 ]
  %66 = getelementptr inbounds i16, i16* %58, i64 %65
  %67 = load i16, i16* %66, align 2
  %68 = zext i16 %67 to i32
  %69 = tail call fastcc zeroext i1 @_ZN17double_conversionL12isWhitespaceEi(i32 %68) #5
  br i1 %69, label %70, label %77

70:                                               ; preds = %64
  %71 = add nuw nsw i64 %65, 1
  %72 = getelementptr inbounds i16, i16* %58, i64 %71
  %73 = icmp eq i16* %72, %12
  br i1 %73, label %74, label %64

74:                                               ; preds = %70, %59
  %75 = getelementptr inbounds %"class.double_conversion::StringToDoubleConverter", %"class.double_conversion::StringToDoubleConverter"* %0, i64 0, i32 3
  %76 = load double, double* %75, align 8
  br label %1566

77:                                               ; preds = %64
  %78 = getelementptr inbounds i16, i16* %58, i64 %65
  %79 = icmp eq i64 %65, 1
  %80 = or i1 %22, %79
  br i1 %80, label %84, label %81

81:                                               ; preds = %77
  %82 = getelementptr inbounds %"class.double_conversion::StringToDoubleConverter", %"class.double_conversion::StringToDoubleConverter"* %0, i64 0, i32 3
  %83 = load double, double* %82, align 8
  br label %1566

84:                                               ; preds = %77
  %85 = ptrtoint i16* %78 to i64
  %86 = bitcast i16** %6 to i64*
  store i64 %85, i64* %86, align 8
  br label %87

87:                                               ; preds = %84, %56
  %88 = phi i16* [ %78, %84 ], [ %58, %56 ]
  %89 = phi i8 [ %61, %84 ], [ 0, %56 ]
  %90 = getelementptr inbounds %"class.double_conversion::StringToDoubleConverter", %"class.double_conversion::StringToDoubleConverter"* %0, i64 0, i32 4
  %91 = load i8*, i8** %90, align 8
  %92 = icmp eq i8* %91, null
  br i1 %92, label %156, label %93

93:                                               ; preds = %87
  %94 = load i16, i16* %88, align 2
  %95 = trunc i16 %94 to i8
  br i1 %24, label %96, label %116

96:                                               ; preds = %93
  %97 = load atomic i8, i8* bitcast (i64* @_ZGVZN17double_conversion12_GLOBAL__N_17ToLowerEcE5cType to i8*) acquire, align 8
  %98 = icmp eq i8 %97, 0
  br i1 %98, label %99, label %105, !prof !2

99:                                               ; preds = %96
  %100 = tail call i32 @__cxa_guard_acquire(i64* nonnull @_ZGVZN17double_conversion12_GLOBAL__N_17ToLowerEcE5cType) #5
  %101 = icmp eq i32 %100, 0
  br i1 %101, label %105, label %102

102:                                              ; preds = %99
  %103 = tail call dereferenceable(8) %"class.std::__1::locale"* @_ZNSt3__16locale7classicEv() #5
  %104 = tail call %"class.std::__1::locale::facet"* @_ZNKSt3__16locale9use_facetERNS0_2idE(%"class.std::__1::locale"* %103, %"class.std::__1::locale::id"* nonnull dereferenceable(16) @_ZNSt3__15ctypeIcE2idE) #5
  store %"class.std::__1::locale::facet"* %104, %"class.std::__1::locale::facet"** bitcast (%"class.std::__1::ctype"** @_ZZN17double_conversion12_GLOBAL__N_17ToLowerEcE5cType to %"class.std::__1::locale::facet"**), align 8
  tail call void @__cxa_guard_release(i64* nonnull @_ZGVZN17double_conversion12_GLOBAL__N_17ToLowerEcE5cType) #5
  br label %105

105:                                              ; preds = %102, %99, %96
  %106 = load %"class.std::__1::ctype"*, %"class.std::__1::ctype"** @_ZZN17double_conversion12_GLOBAL__N_17ToLowerEcE5cType, align 8
  %107 = bitcast %"class.std::__1::ctype"* %106 to i8 (%"class.std::__1::ctype"*, i8)***
  %108 = load i8 (%"class.std::__1::ctype"*, i8)**, i8 (%"class.std::__1::ctype"*, i8)*** %107, align 8
  %109 = getelementptr inbounds i8 (%"class.std::__1::ctype"*, i8)*, i8 (%"class.std::__1::ctype"*, i8)** %108, i64 5
  %110 = load i8 (%"class.std::__1::ctype"*, i8)*, i8 (%"class.std::__1::ctype"*, i8)** %109, align 8
  %111 = tail call signext i8 %110(%"class.std::__1::ctype"* %106, i8 signext %95) #5
  %112 = load i8, i8* %91, align 1
  %113 = icmp eq i8 %111, %112
  br i1 %113, label %114, label %156

114:                                              ; preds = %105
  %115 = load i8*, i8** %90, align 8
  br label %119

116:                                              ; preds = %93
  %117 = load i8, i8* %91, align 1
  %118 = icmp eq i8 %117, %95
  br i1 %118, label %119, label %156

119:                                              ; preds = %114, %116
  %120 = phi i8* [ %115, %114 ], [ %91, %116 ]
  %121 = call fastcc zeroext i1 @_ZN17double_conversion12_GLOBAL__N_116ConsumeSubStringIPKtEEbPT_S4_PKcb(i16** nonnull %6, i16* %12, i8* %120, i1 zeroext %24)
  br i1 %121, label %125, label %122

122:                                              ; preds = %119
  %123 = getelementptr inbounds %"class.double_conversion::StringToDoubleConverter", %"class.double_conversion::StringToDoubleConverter"* %0, i64 0, i32 3
  %124 = load double, double* %123, align 8
  br label %1566

125:                                              ; preds = %119
  %126 = and i32 %14, 20
  %127 = icmp ne i32 %126, 0
  %128 = load i16*, i16** %6, align 8
  %129 = icmp eq i16* %128, %12
  %130 = or i1 %127, %129
  br i1 %130, label %134, label %131

131:                                              ; preds = %125
  %132 = getelementptr inbounds %"class.double_conversion::StringToDoubleConverter", %"class.double_conversion::StringToDoubleConverter"* %0, i64 0, i32 3
  %133 = load double, double* %132, align 8
  br label %1566

134:                                              ; preds = %125
  %135 = or i1 %16, %129
  br i1 %135, label %147, label %136

136:                                              ; preds = %134, %141
  %137 = phi i16* [ %142, %141 ], [ %128, %134 ]
  %138 = load i16, i16* %137, align 2
  %139 = zext i16 %138 to i32
  %140 = tail call fastcc zeroext i1 @_ZN17double_conversionL12isWhitespaceEi(i32 %139) #5
  br i1 %140, label %141, label %144

141:                                              ; preds = %136
  %142 = getelementptr inbounds i16, i16* %137, i64 1
  store i16* %142, i16** %6, align 8
  %143 = icmp eq i16* %142, %12
  br i1 %143, label %147, label %136

144:                                              ; preds = %136
  %145 = getelementptr inbounds %"class.double_conversion::StringToDoubleConverter", %"class.double_conversion::StringToDoubleConverter"* %0, i64 0, i32 3
  %146 = load double, double* %145, align 8
  br label %1566

147:                                              ; preds = %141, %134
  %148 = phi i16* [ %128, %134 ], [ %142, %141 ]
  %149 = ptrtoint i16* %148 to i64
  %150 = ptrtoint i16* %1 to i64
  %151 = sub i64 %149, %150
  %152 = lshr exact i64 %151, 1
  %153 = trunc i64 %152 to i32
  store i32 %153, i32* %4, align 4
  %154 = icmp eq i8 %89, 0
  %155 = select i1 %154, double 0x7FF0000000000000, double 0xFFF0000000000000
  br label %1566

156:                                              ; preds = %105, %87, %116
  %157 = getelementptr inbounds %"class.double_conversion::StringToDoubleConverter", %"class.double_conversion::StringToDoubleConverter"* %0, i64 0, i32 5
  %158 = load i8*, i8** %157, align 8
  %159 = icmp eq i8* %158, null
  br i1 %159, label %224, label %160

160:                                              ; preds = %156
  %161 = load i16*, i16** %6, align 8
  %162 = load i16, i16* %161, align 2
  %163 = trunc i16 %162 to i8
  br i1 %24, label %164, label %184

164:                                              ; preds = %160
  %165 = load atomic i8, i8* bitcast (i64* @_ZGVZN17double_conversion12_GLOBAL__N_17ToLowerEcE5cType to i8*) acquire, align 8
  %166 = icmp eq i8 %165, 0
  br i1 %166, label %167, label %173, !prof !2

167:                                              ; preds = %164
  %168 = tail call i32 @__cxa_guard_acquire(i64* nonnull @_ZGVZN17double_conversion12_GLOBAL__N_17ToLowerEcE5cType) #5
  %169 = icmp eq i32 %168, 0
  br i1 %169, label %173, label %170

170:                                              ; preds = %167
  %171 = tail call dereferenceable(8) %"class.std::__1::locale"* @_ZNSt3__16locale7classicEv() #5
  %172 = tail call %"class.std::__1::locale::facet"* @_ZNKSt3__16locale9use_facetERNS0_2idE(%"class.std::__1::locale"* %171, %"class.std::__1::locale::id"* nonnull dereferenceable(16) @_ZNSt3__15ctypeIcE2idE) #5
  store %"class.std::__1::locale::facet"* %172, %"class.std::__1::locale::facet"** bitcast (%"class.std::__1::ctype"** @_ZZN17double_conversion12_GLOBAL__N_17ToLowerEcE5cType to %"class.std::__1::locale::facet"**), align 8
  tail call void @__cxa_guard_release(i64* nonnull @_ZGVZN17double_conversion12_GLOBAL__N_17ToLowerEcE5cType) #5
  br label %173

173:                                              ; preds = %170, %167, %164
  %174 = load %"class.std::__1::ctype"*, %"class.std::__1::ctype"** @_ZZN17double_conversion12_GLOBAL__N_17ToLowerEcE5cType, align 8
  %175 = bitcast %"class.std::__1::ctype"* %174 to i8 (%"class.std::__1::ctype"*, i8)***
  %176 = load i8 (%"class.std::__1::ctype"*, i8)**, i8 (%"class.std::__1::ctype"*, i8)*** %175, align 8
  %177 = getelementptr inbounds i8 (%"class.std::__1::ctype"*, i8)*, i8 (%"class.std::__1::ctype"*, i8)** %176, i64 5
  %178 = load i8 (%"class.std::__1::ctype"*, i8)*, i8 (%"class.std::__1::ctype"*, i8)** %177, align 8
  %179 = tail call signext i8 %178(%"class.std::__1::ctype"* %174, i8 signext %163) #5
  %180 = load i8, i8* %158, align 1
  %181 = icmp eq i8 %179, %180
  br i1 %181, label %182, label %224

182:                                              ; preds = %173
  %183 = load i8*, i8** %157, align 8
  br label %187

184:                                              ; preds = %160
  %185 = load i8, i8* %158, align 1
  %186 = icmp eq i8 %185, %163
  br i1 %186, label %187, label %224

187:                                              ; preds = %182, %184
  %188 = phi i8* [ %183, %182 ], [ %158, %184 ]
  %189 = call fastcc zeroext i1 @_ZN17double_conversion12_GLOBAL__N_116ConsumeSubStringIPKtEEbPT_S4_PKcb(i16** nonnull %6, i16* %12, i8* %188, i1 zeroext %24)
  br i1 %189, label %193, label %190

190:                                              ; preds = %187
  %191 = getelementptr inbounds %"class.double_conversion::StringToDoubleConverter", %"class.double_conversion::StringToDoubleConverter"* %0, i64 0, i32 3
  %192 = load double, double* %191, align 8
  br label %1566

193:                                              ; preds = %187
  %194 = and i32 %14, 20
  %195 = icmp ne i32 %194, 0
  %196 = load i16*, i16** %6, align 8
  %197 = icmp eq i16* %196, %12
  %198 = or i1 %195, %197
  br i1 %198, label %202, label %199

199:                                              ; preds = %193
  %200 = getelementptr inbounds %"class.double_conversion::StringToDoubleConverter", %"class.double_conversion::StringToDoubleConverter"* %0, i64 0, i32 3
  %201 = load double, double* %200, align 8
  br label %1566

202:                                              ; preds = %193
  %203 = or i1 %16, %197
  br i1 %203, label %215, label %204

204:                                              ; preds = %202, %209
  %205 = phi i16* [ %210, %209 ], [ %196, %202 ]
  %206 = load i16, i16* %205, align 2
  %207 = zext i16 %206 to i32
  %208 = tail call fastcc zeroext i1 @_ZN17double_conversionL12isWhitespaceEi(i32 %207) #5
  br i1 %208, label %209, label %212

209:                                              ; preds = %204
  %210 = getelementptr inbounds i16, i16* %205, i64 1
  store i16* %210, i16** %6, align 8
  %211 = icmp eq i16* %210, %12
  br i1 %211, label %215, label %204

212:                                              ; preds = %204
  %213 = getelementptr inbounds %"class.double_conversion::StringToDoubleConverter", %"class.double_conversion::StringToDoubleConverter"* %0, i64 0, i32 3
  %214 = load double, double* %213, align 8
  br label %1566

215:                                              ; preds = %209, %202
  %216 = phi i16* [ %196, %202 ], [ %210, %209 ]
  %217 = ptrtoint i16* %216 to i64
  %218 = ptrtoint i16* %1 to i64
  %219 = sub i64 %217, %218
  %220 = lshr exact i64 %219, 1
  %221 = trunc i64 %220 to i32
  store i32 %221, i32* %4, align 4
  %222 = icmp eq i8 %89, 0
  %223 = select i1 %222, double 0x7FF8000000000000, double 0xFFF8000000000000
  br label %1566

224:                                              ; preds = %173, %156, %184
  %225 = load i16*, i16** %6, align 8
  %226 = load i16, i16* %225, align 2
  %227 = icmp eq i16 %226, 48
  br i1 %227, label %228, label %1154

228:                                              ; preds = %224
  %229 = getelementptr inbounds %"class.double_conversion::StringToDoubleConverter", %"class.double_conversion::StringToDoubleConverter"* %0, i64 0, i32 6
  %230 = load i16, i16* %229, align 8
  %231 = icmp eq i16 %230, 0
  %232 = getelementptr inbounds i16, i16* %225, i64 1
  store i16* %232, i16** %6, align 8
  %233 = icmp eq i16* %232, %12
  %234 = ptrtoint i16* %232 to i64
  br i1 %231, label %235, label %236

235:                                              ; preds = %228
  br i1 %233, label %256, label %264

236:                                              ; preds = %228
  br i1 %233, label %256, label %237

237:                                              ; preds = %236
  %238 = getelementptr inbounds i16, i16* %225, i64 2
  %239 = icmp eq i16* %238, %12
  br i1 %239, label %264, label %240

240:                                              ; preds = %237
  %241 = load i16, i16* %232, align 2
  %242 = icmp eq i16 %241, %230
  br i1 %242, label %243, label %252

243:                                              ; preds = %240
  %244 = load i16, i16* %238, align 2
  %245 = zext i16 %244 to i32
  %246 = add nsw i32 %245, -48
  %247 = icmp ult i32 %246, 10
  %248 = icmp ult i16 %244, 58
  %249 = and i1 %248, %247
  br i1 %249, label %250, label %252

250:                                              ; preds = %243
  store i16* %238, i16** %6, align 8
  %251 = ptrtoint i16* %238 to i64
  br label %252

252:                                              ; preds = %243, %250, %240
  %253 = phi i64 [ %251, %250 ], [ %234, %240 ], [ %234, %243 ]
  %254 = phi i16* [ %238, %250 ], [ %232, %240 ], [ %232, %243 ]
  %255 = icmp eq i16* %254, %12
  br i1 %255, label %256, label %264

256:                                              ; preds = %236, %252, %235
  %257 = phi i64 [ %234, %236 ], [ %253, %252 ], [ %234, %235 ]
  %258 = ptrtoint i16* %1 to i64
  %259 = sub i64 %257, %258
  %260 = lshr exact i64 %259, 1
  %261 = trunc i64 %260 to i32
  store i32 %261, i32* %4, align 4
  %262 = icmp eq i8 %89, 0
  %263 = select i1 %262, double 0.000000e+00, double -0.000000e+00
  br label %1566

264:                                              ; preds = %237, %252, %235
  %265 = phi i16* [ %232, %237 ], [ %254, %252 ], [ %232, %235 ]
  %266 = load i32, i32* %13, align 8
  %267 = trunc i32 %266 to i8
  %268 = icmp slt i8 %267, 0
  %269 = and i32 %266, 129
  %270 = icmp eq i32 %269, 0
  %271 = load i16, i16* %265, align 2
  br i1 %270, label %1104, label %272

272:                                              ; preds = %264
  switch i16 %271, label %1149 [
    i16 120, label %273
    i16 88, label %273
    i16 48, label %1106
  ]

273:                                              ; preds = %272, %272
  %274 = getelementptr inbounds i16, i16* %265, i64 1
  store i16* %274, i16** %6, align 8
  %275 = icmp eq i16* %274, %12
  %276 = ptrtoint i16* %274 to i64
  br i1 %275, label %277, label %280

277:                                              ; preds = %273
  %278 = getelementptr inbounds %"class.double_conversion::StringToDoubleConverter", %"class.double_conversion::StringToDoubleConverter"* %0, i64 0, i32 3
  %279 = load double, double* %278, align 8
  br label %1566

280:                                              ; preds = %273
  br i1 %268, label %281, label %523

281:                                              ; preds = %280, %332
  %282 = phi i16* [ %333, %332 ], [ %274, %280 ]
  %283 = phi i8 [ 1, %332 ], [ 0, %280 ]
  %284 = load i16, i16* %282, align 2
  %285 = zext i16 %284 to i32
  %286 = add nsw i32 %285, -48
  %287 = icmp ult i32 %286, 10
  %288 = icmp ult i16 %284, 64
  %289 = and i1 %288, %287
  br i1 %289, label %291, label %290

290:                                              ; preds = %281
  switch i16 %284, label %390 [
    i16 102, label %291
    i16 101, label %291
    i16 100, label %291
    i16 99, label %291
    i16 98, label %291
    i16 97, label %291
    i16 70, label %291
    i16 69, label %291
    i16 68, label %291
    i16 67, label %291
    i16 66, label %291
    i16 65, label %291
    i16 46, label %334
  ]

291:                                              ; preds = %290, %290, %290, %290, %290, %290, %290, %290, %290, %290, %290, %290, %281
  br i1 %231, label %292, label %295

292:                                              ; preds = %291
  %293 = getelementptr inbounds i16, i16* %282, i64 1
  %294 = icmp eq i16* %293, %12
  br i1 %294, label %523, label %332

295:                                              ; preds = %291
  %296 = add nsw i16 %284, -97
  %297 = icmp ult i16 %296, 6
  %298 = or i1 %297, %289
  br i1 %298, label %306, label %299

299:                                              ; preds = %295
  %300 = icmp ugt i16 %284, 64
  br i1 %300, label %304, label %301

301:                                              ; preds = %299
  %302 = getelementptr inbounds i16, i16* %282, i64 1
  %303 = icmp eq i16* %302, %12
  br i1 %303, label %523, label %332

304:                                              ; preds = %299
  %305 = icmp ugt i16 %284, 70
  br label %306

306:                                              ; preds = %304, %295
  %307 = phi i1 [ %305, %304 ], [ false, %295 ]
  %308 = getelementptr inbounds i16, i16* %282, i64 1
  %309 = icmp eq i16* %308, %12
  %310 = or i1 %309, %307
  br i1 %310, label %329, label %311

311:                                              ; preds = %306
  %312 = getelementptr inbounds i16, i16* %282, i64 2
  %313 = icmp eq i16* %312, %12
  br i1 %313, label %332, label %314

314:                                              ; preds = %311
  %315 = load i16, i16* %308, align 2
  %316 = icmp eq i16 %315, %230
  br i1 %316, label %317, label %326

317:                                              ; preds = %314
  %318 = load i16, i16* %312, align 2
  %319 = zext i16 %318 to i32
  %320 = add nsw i32 %319, -48
  %321 = icmp ult i32 %320, 10
  %322 = icmp ult i16 %318, 64
  %323 = and i1 %322, %321
  br i1 %323, label %325, label %324

324:                                              ; preds = %317
  switch i16 %318, label %326 [
    i16 102, label %325
    i16 101, label %325
    i16 100, label %325
    i16 99, label %325
    i16 98, label %325
    i16 97, label %325
    i16 70, label %325
    i16 69, label %325
    i16 68, label %325
    i16 67, label %325
    i16 66, label %325
    i16 65, label %325
  ]

325:                                              ; preds = %324, %324, %324, %324, %324, %324, %324, %324, %324, %324, %324, %324, %317
  br label %326

326:                                              ; preds = %325, %324, %314
  %327 = phi i16* [ %312, %325 ], [ %308, %314 ], [ %308, %324 ]
  %328 = icmp eq i16* %327, %12
  br i1 %328, label %523, label %332

329:                                              ; preds = %306
  %330 = xor i1 %307, true
  %331 = or i1 %309, %330
  br i1 %331, label %523, label %332

332:                                              ; preds = %329, %326, %311, %301, %292
  %333 = phi i16* [ %308, %329 ], [ %293, %292 ], [ %327, %326 ], [ %302, %301 ], [ %308, %311 ]
  br label %281

334:                                              ; preds = %290
  %335 = getelementptr inbounds i16, i16* %282, i64 1
  %336 = icmp eq i16* %335, %12
  br i1 %336, label %523, label %337

337:                                              ; preds = %334, %388
  %338 = phi i16* [ %389, %388 ], [ %335, %334 ]
  %339 = phi i8 [ 1, %388 ], [ %283, %334 ]
  %340 = load i16, i16* %338, align 2
  %341 = zext i16 %340 to i32
  %342 = add nsw i32 %341, -48
  %343 = icmp ult i32 %342, 10
  %344 = icmp ult i16 %340, 64
  %345 = and i1 %344, %343
  br i1 %345, label %347, label %346

346:                                              ; preds = %337
  switch i16 %340, label %390 [
    i16 102, label %347
    i16 101, label %347
    i16 100, label %347
    i16 99, label %347
    i16 98, label %347
    i16 97, label %347
    i16 70, label %347
    i16 69, label %347
    i16 68, label %347
    i16 67, label %347
    i16 66, label %347
    i16 65, label %347
  ]

347:                                              ; preds = %346, %346, %346, %346, %346, %346, %346, %346, %346, %346, %346, %346, %337
  br i1 %231, label %348, label %351

348:                                              ; preds = %347
  %349 = getelementptr inbounds i16, i16* %338, i64 1
  %350 = icmp eq i16* %349, %12
  br i1 %350, label %523, label %388

351:                                              ; preds = %347
  %352 = add nsw i16 %340, -97
  %353 = icmp ult i16 %352, 6
  %354 = or i1 %353, %345
  br i1 %354, label %362, label %355

355:                                              ; preds = %351
  %356 = icmp ugt i16 %340, 64
  br i1 %356, label %360, label %357

357:                                              ; preds = %355
  %358 = getelementptr inbounds i16, i16* %338, i64 1
  %359 = icmp eq i16* %358, %12
  br i1 %359, label %523, label %388

360:                                              ; preds = %355
  %361 = icmp ugt i16 %340, 70
  br label %362

362:                                              ; preds = %360, %351
  %363 = phi i1 [ %361, %360 ], [ false, %351 ]
  %364 = getelementptr inbounds i16, i16* %338, i64 1
  %365 = icmp eq i16* %364, %12
  %366 = or i1 %365, %363
  br i1 %366, label %385, label %367

367:                                              ; preds = %362
  %368 = getelementptr inbounds i16, i16* %338, i64 2
  %369 = icmp eq i16* %368, %12
  br i1 %369, label %388, label %370

370:                                              ; preds = %367
  %371 = load i16, i16* %364, align 2
  %372 = icmp eq i16 %371, %230
  br i1 %372, label %373, label %382

373:                                              ; preds = %370
  %374 = load i16, i16* %368, align 2
  %375 = zext i16 %374 to i32
  %376 = add nsw i32 %375, -48
  %377 = icmp ult i32 %376, 10
  %378 = icmp ult i16 %374, 64
  %379 = and i1 %378, %377
  br i1 %379, label %381, label %380

380:                                              ; preds = %373
  switch i16 %374, label %382 [
    i16 102, label %381
    i16 101, label %381
    i16 100, label %381
    i16 99, label %381
    i16 98, label %381
    i16 97, label %381
    i16 70, label %381
    i16 69, label %381
    i16 68, label %381
    i16 67, label %381
    i16 66, label %381
    i16 65, label %381
  ]

381:                                              ; preds = %380, %380, %380, %380, %380, %380, %380, %380, %380, %380, %380, %380, %373
  br label %382

382:                                              ; preds = %381, %380, %370
  %383 = phi i16* [ %368, %381 ], [ %364, %370 ], [ %364, %380 ]
  %384 = icmp eq i16* %383, %12
  br i1 %384, label %523, label %388

385:                                              ; preds = %362
  %386 = xor i1 %363, true
  %387 = or i1 %365, %386
  br i1 %387, label %523, label %388

388:                                              ; preds = %385, %382, %367, %357, %348
  %389 = phi i16* [ %364, %385 ], [ %349, %348 ], [ %383, %382 ], [ %358, %357 ], [ %364, %367 ]
  br label %337

390:                                              ; preds = %290, %346
  %391 = phi i16 [ %340, %346 ], [ %284, %290 ]
  %392 = phi i16* [ %338, %346 ], [ %282, %290 ]
  %393 = phi i8 [ %339, %346 ], [ %283, %290 ]
  %394 = and i8 %393, 1
  %395 = icmp eq i8 %394, 0
  br i1 %395, label %523, label %396

396:                                              ; preds = %390
  switch i16 %391, label %523 [
    i16 112, label %397
    i16 80, label %397
  ]

397:                                              ; preds = %396, %396
  br i1 %231, label %398, label %401

398:                                              ; preds = %397
  %399 = getelementptr inbounds i16, i16* %392, i64 1
  %400 = icmp eq i16* %399, %12
  br i1 %400, label %523, label %428

401:                                              ; preds = %397
  %402 = add nsw i16 %391, -97
  %403 = icmp ugt i16 %402, 5
  %404 = getelementptr inbounds i16, i16* %392, i64 1
  %405 = icmp eq i16* %404, %12
  %406 = or i1 %403, %405
  br i1 %406, label %425, label %407

407:                                              ; preds = %401
  %408 = getelementptr inbounds i16, i16* %392, i64 2
  %409 = icmp eq i16* %408, %12
  br i1 %409, label %428, label %410

410:                                              ; preds = %407
  %411 = load i16, i16* %404, align 2
  %412 = icmp eq i16 %411, %230
  br i1 %412, label %413, label %422

413:                                              ; preds = %410
  %414 = load i16, i16* %408, align 2
  %415 = zext i16 %414 to i32
  %416 = add nsw i32 %415, -48
  %417 = icmp ult i32 %416, 10
  %418 = icmp ult i16 %414, 64
  %419 = and i1 %418, %417
  br i1 %419, label %421, label %420

420:                                              ; preds = %413
  switch i16 %414, label %422 [
    i16 102, label %421
    i16 101, label %421
    i16 100, label %421
    i16 99, label %421
    i16 98, label %421
    i16 97, label %421
    i16 70, label %421
    i16 69, label %421
    i16 68, label %421
    i16 67, label %421
    i16 66, label %421
    i16 65, label %421
  ]

421:                                              ; preds = %420, %420, %420, %420, %420, %420, %420, %420, %420, %420, %420, %420, %413
  br label %422

422:                                              ; preds = %421, %420, %410
  %423 = phi i16* [ %408, %421 ], [ %404, %410 ], [ %404, %420 ]
  %424 = icmp eq i16* %423, %12
  br i1 %424, label %523, label %428

425:                                              ; preds = %401
  %426 = xor i1 %403, true
  %427 = or i1 %405, %426
  br i1 %427, label %523, label %428

428:                                              ; preds = %425, %422, %407, %398
  %429 = phi i16* [ %404, %425 ], [ %399, %398 ], [ %423, %422 ], [ %404, %407 ]
  %430 = load i16, i16* %429, align 2
  switch i16 %430, label %436 [
    i16 43, label %431
    i16 45, label %431
  ]

431:                                              ; preds = %428, %428
  %432 = getelementptr inbounds i16, i16* %429, i64 1
  %433 = icmp eq i16* %432, %12
  br i1 %433, label %523, label %434

434:                                              ; preds = %431
  %435 = load i16, i16* %432, align 2
  br label %436

436:                                              ; preds = %434, %428
  %437 = phi i16 [ %435, %434 ], [ %430, %428 ]
  %438 = phi i16* [ %432, %434 ], [ %429, %428 ]
  %439 = zext i16 %437 to i32
  %440 = add nsw i32 %439, -48
  %441 = icmp ult i32 %440, 10
  %442 = icmp ult i16 %437, 58
  %443 = and i1 %442, %441
  br i1 %443, label %444, label %523

444:                                              ; preds = %436
  %445 = getelementptr inbounds i16, i16* %438, i64 1
  %446 = icmp eq i16* %445, %12
  br i1 %231, label %447, label %448

447:                                              ; preds = %444
  br i1 %446, label %541, label %467

448:                                              ; preds = %444
  br i1 %446, label %541, label %449

449:                                              ; preds = %448
  %450 = getelementptr inbounds i16, i16* %438, i64 2
  %451 = icmp eq i16* %450, %12
  br i1 %451, label %467, label %452

452:                                              ; preds = %449
  %453 = load i16, i16* %445, align 2
  %454 = icmp eq i16 %453, %230
  br i1 %454, label %455, label %464

455:                                              ; preds = %452
  %456 = load i16, i16* %450, align 2
  %457 = zext i16 %456 to i32
  %458 = add nsw i32 %457, -48
  %459 = icmp ult i32 %458, 10
  %460 = icmp ult i16 %456, 64
  %461 = and i1 %460, %459
  br i1 %461, label %463, label %462

462:                                              ; preds = %455
  switch i16 %456, label %464 [
    i16 102, label %463
    i16 101, label %463
    i16 100, label %463
    i16 99, label %463
    i16 98, label %463
    i16 97, label %463
    i16 70, label %463
    i16 69, label %463
    i16 68, label %463
    i16 67, label %463
    i16 66, label %463
    i16 65, label %463
  ]

463:                                              ; preds = %462, %462, %462, %462, %462, %462, %462, %462, %462, %462, %462, %462, %455
  br label %464

464:                                              ; preds = %463, %462, %452
  %465 = phi i16* [ %450, %463 ], [ %445, %452 ], [ %445, %462 ]
  %466 = icmp eq i16* %465, %12
  br i1 %466, label %541, label %467

467:                                              ; preds = %464, %449, %447
  %468 = phi i16* [ %445, %449 ], [ %465, %464 ], [ %445, %447 ]
  %469 = load i16, i16* %468, align 2
  %470 = zext i16 %469 to i32
  %471 = add nsw i32 %470, -48
  %472 = icmp ult i32 %471, 10
  %473 = icmp ult i16 %469, 58
  %474 = and i1 %473, %472
  br i1 %474, label %475, label %507

475:                                              ; preds = %467, %499
  %476 = phi i16* [ %500, %499 ], [ %468, %467 ]
  %477 = getelementptr inbounds i16, i16* %476, i64 1
  %478 = icmp eq i16* %477, %12
  br i1 %231, label %479, label %480

479:                                              ; preds = %475
  br i1 %478, label %541, label %499

480:                                              ; preds = %475
  br i1 %478, label %541, label %481

481:                                              ; preds = %480
  %482 = getelementptr inbounds i16, i16* %476, i64 2
  %483 = icmp eq i16* %482, %12
  br i1 %483, label %499, label %484

484:                                              ; preds = %481
  %485 = load i16, i16* %477, align 2
  %486 = icmp eq i16 %485, %230
  br i1 %486, label %487, label %496

487:                                              ; preds = %484
  %488 = load i16, i16* %482, align 2
  %489 = zext i16 %488 to i32
  %490 = add nsw i32 %489, -48
  %491 = icmp ult i32 %490, 10
  %492 = icmp ult i16 %488, 64
  %493 = and i1 %492, %491
  br i1 %493, label %495, label %494

494:                                              ; preds = %487
  switch i16 %488, label %496 [
    i16 102, label %495
    i16 101, label %495
    i16 100, label %495
    i16 99, label %495
    i16 98, label %495
    i16 97, label %495
    i16 70, label %495
    i16 69, label %495
    i16 68, label %495
    i16 67, label %495
    i16 66, label %495
    i16 65, label %495
  ]

495:                                              ; preds = %494, %494, %494, %494, %494, %494, %494, %494, %494, %494, %494, %494, %487
  br label %496

496:                                              ; preds = %495, %494, %484
  %497 = phi i16* [ %482, %495 ], [ %477, %484 ], [ %477, %494 ]
  %498 = icmp eq i16* %497, %12
  br i1 %498, label %541, label %499

499:                                              ; preds = %496, %481, %479
  %500 = phi i16* [ %477, %479 ], [ %497, %496 ], [ %477, %481 ]
  %501 = load i16, i16* %500, align 2
  %502 = zext i16 %501 to i32
  %503 = add nsw i32 %502, -48
  %504 = icmp ult i32 %503, 10
  %505 = icmp ult i16 %501, 58
  %506 = and i1 %505, %504
  br i1 %506, label %475, label %507

507:                                              ; preds = %499, %467
  %508 = phi i16 [ %469, %467 ], [ %501, %499 ]
  %509 = phi i16* [ %468, %467 ], [ %500, %499 ]
  %510 = icmp eq i16* %509, %12
  %511 = or i1 %16, %510
  br i1 %511, label %541, label %512

512:                                              ; preds = %507
  %513 = zext i16 %508 to i32
  %514 = tail call fastcc zeroext i1 @_ZN17double_conversionL12isWhitespaceEi(i32 %513) #5
  br i1 %514, label %515, label %523

515:                                              ; preds = %512, %519
  %516 = phi i16* [ %517, %519 ], [ %509, %512 ]
  %517 = getelementptr inbounds i16, i16* %516, i64 1
  %518 = icmp eq i16* %517, %12
  br i1 %518, label %541, label %519

519:                                              ; preds = %515
  %520 = load i16, i16* %517, align 2
  %521 = zext i16 %520 to i32
  %522 = tail call fastcc zeroext i1 @_ZN17double_conversionL12isWhitespaceEi(i32 %521) #5
  br i1 %522, label %515, label %523

523:                                              ; preds = %329, %292, %326, %301, %385, %348, %382, %357, %519, %512, %280, %390, %396, %425, %398, %422, %436, %334, %431
  %524 = load i16, i16* %274, align 2
  %525 = zext i16 %524 to i32
  %526 = add nsw i32 %525, -48
  %527 = icmp ult i32 %526, 10
  %528 = icmp ult i16 %524, 64
  %529 = and i1 %528, %527
  br i1 %529, label %541, label %530

530:                                              ; preds = %523
  %531 = add i16 %524, -65
  %532 = icmp ult i16 %531, 38
  br i1 %532, label %536, label %533

533:                                              ; preds = %536, %530
  %534 = getelementptr inbounds %"class.double_conversion::StringToDoubleConverter", %"class.double_conversion::StringToDoubleConverter"* %0, i64 0, i32 3
  %535 = load double, double* %534, align 8
  br label %1566

536:                                              ; preds = %530
  %537 = zext i16 %531 to i64
  %538 = lshr i64 270582939711, %537
  %539 = and i64 %538, 1
  %540 = icmp eq i64 %539, 0
  br i1 %540, label %533, label %541

541:                                              ; preds = %479, %480, %496, %515, %536, %523, %447, %448, %464, %507
  %542 = phi i1 [ true, %507 ], [ true, %464 ], [ true, %448 ], [ true, %447 ], [ false, %523 ], [ false, %536 ], [ true, %515 ], [ true, %496 ], [ true, %480 ], [ true, %479 ]
  %543 = icmp ne i8 %89, 0
  %544 = getelementptr inbounds %"class.double_conversion::StringToDoubleConverter", %"class.double_conversion::StringToDoubleConverter"* %0, i64 0, i32 3
  %545 = load double, double* %544, align 8
  %546 = load i16, i16* %274, align 2
  %547 = icmp eq i16 %546, 48
  br i1 %547, label %553, label %548

548:                                              ; preds = %559, %541
  %549 = phi i64 [ %276, %541 ], [ %560, %559 ]
  %550 = phi i16 [ %546, %541 ], [ %562, %559 ]
  %551 = phi i16* [ %274, %541 ], [ %561, %559 ]
  %552 = select i1 %3, i64 53, i64 24
  br label %592

553:                                              ; preds = %541, %559
  %554 = phi i16* [ %561, %559 ], [ %274, %541 ]
  %555 = getelementptr inbounds i16, i16* %554, i64 1
  store i16* %555, i16** %6, align 8
  %556 = icmp eq i16* %555, %12
  %557 = ptrtoint i16* %555 to i64
  br i1 %231, label %558, label %564

558:                                              ; preds = %553
  br i1 %556, label %587, label %559

559:                                              ; preds = %581, %565, %558
  %560 = phi i64 [ %557, %558 ], [ %582, %581 ], [ %557, %565 ]
  %561 = phi i16* [ %555, %558 ], [ %583, %581 ], [ %555, %565 ]
  %562 = load i16, i16* %561, align 2
  %563 = icmp eq i16 %562, 48
  br i1 %563, label %553, label %548

564:                                              ; preds = %553
  br i1 %556, label %585, label %565

565:                                              ; preds = %564
  %566 = getelementptr inbounds i16, i16* %554, i64 2
  %567 = icmp eq i16* %566, %12
  br i1 %567, label %559, label %568

568:                                              ; preds = %565
  %569 = load i16, i16* %555, align 2
  %570 = icmp eq i16 %569, %230
  br i1 %570, label %571, label %581

571:                                              ; preds = %568
  %572 = load i16, i16* %566, align 2
  %573 = zext i16 %572 to i32
  %574 = add nsw i32 %573, -48
  %575 = icmp ult i32 %574, 10
  %576 = icmp ult i16 %572, 64
  %577 = and i1 %576, %575
  br i1 %577, label %579, label %578

578:                                              ; preds = %571
  switch i16 %572, label %581 [
    i16 102, label %579
    i16 101, label %579
    i16 100, label %579
    i16 99, label %579
    i16 98, label %579
    i16 97, label %579
    i16 70, label %579
    i16 69, label %579
    i16 68, label %579
    i16 67, label %579
    i16 66, label %579
    i16 65, label %579
  ]

579:                                              ; preds = %578, %578, %578, %578, %578, %578, %578, %578, %578, %578, %578, %578, %571
  store i16* %566, i16** %6, align 8
  %580 = ptrtoint i16* %566 to i64
  br label %581

581:                                              ; preds = %579, %578, %568
  %582 = phi i64 [ %580, %579 ], [ %557, %568 ], [ %557, %578 ]
  %583 = phi i16* [ %566, %579 ], [ %555, %568 ], [ %555, %578 ]
  %584 = icmp eq i16* %583, %12
  br i1 %584, label %589, label %559

585:                                              ; preds = %564
  %586 = ptrtoint i16* %555 to i64
  br label %589

587:                                              ; preds = %558
  %588 = ptrtoint i16* %555 to i64
  br label %589

589:                                              ; preds = %581, %587, %585
  %590 = phi i64 [ %586, %585 ], [ %588, %587 ], [ %582, %581 ]
  %591 = select i1 %543, double -0.000000e+00, double 0.000000e+00
  br label %1075

592:                                              ; preds = %845, %548
  %593 = phi i64 [ %846, %845 ], [ %549, %548 ]
  %594 = phi i16 [ %851, %845 ], [ %550, %548 ]
  %595 = phi i16* [ %847, %845 ], [ %551, %548 ]
  %596 = phi i32 [ %848, %845 ], [ 0, %548 ]
  %597 = phi i64 [ %849, %845 ], [ 0, %548 ]
  %598 = phi i8 [ %850, %845 ], [ 0, %548 ]
  %599 = zext i16 %594 to i32
  %600 = add nsw i32 %599, -48
  %601 = icmp ult i32 %600, 10
  br i1 %601, label %627, label %602

602:                                              ; preds = %592
  %603 = add i16 %594, -97
  %604 = icmp ult i16 %603, 6
  br i1 %604, label %627, label %605

605:                                              ; preds = %602
  %606 = add i16 %594, -65
  %607 = icmp ult i16 %606, 6
  br i1 %607, label %627, label %608

608:                                              ; preds = %605
  br i1 %542, label %609, label %613

609:                                              ; preds = %608
  switch i16 %594, label %613 [
    i16 46, label %610
    i16 112, label %866
    i16 80, label %866
  ]

610:                                              ; preds = %609
  %611 = getelementptr inbounds i16, i16* %595, i64 1
  store i16* %611, i16** %6, align 8
  %612 = ptrtoint i16* %611 to i64
  br label %845

613:                                              ; preds = %609, %608
  %614 = phi i1 [ true, %609 ], [ false, %608 ]
  %615 = icmp eq i16* %595, %12
  %616 = or i1 %16, %615
  br i1 %616, label %860, label %617

617:                                              ; preds = %613
  %618 = tail call fastcc zeroext i1 @_ZN17double_conversionL12isWhitespaceEi(i32 %599) #5
  br i1 %618, label %619, label %1566

619:                                              ; preds = %617, %623
  %620 = phi i16* [ %621, %623 ], [ %595, %617 ]
  %621 = getelementptr inbounds i16, i16* %620, i64 1
  store i16* %621, i16** %6, align 8
  %622 = icmp eq i16* %621, %12
  br i1 %622, label %852, label %623

623:                                              ; preds = %619
  %624 = load i16, i16* %621, align 2
  %625 = zext i16 %624 to i32
  %626 = tail call fastcc zeroext i1 @_ZN17double_conversionL12isWhitespaceEi(i32 %625) #5
  br i1 %626, label %619, label %1566

627:                                              ; preds = %605, %602, %592
  %628 = phi i32 [ -48, %592 ], [ -87, %602 ], [ -55, %605 ]
  %629 = shl i32 %599, 24
  %630 = ashr exact i32 %629, 24
  %631 = add nsw i32 %630, %628
  %632 = and i8 %598, 1
  %633 = icmp eq i8 %632, 0
  %634 = add nsw i32 %596, -4
  %635 = select i1 %633, i32 %596, i32 %634
  %636 = shl nsw i64 %597, 4
  %637 = sext i32 %631 to i64
  %638 = add nsw i64 %636, %637
  %639 = ashr i64 %638, %552
  %640 = trunc i64 %639 to i32
  %641 = icmp eq i32 %640, 0
  br i1 %641, label %797, label %642

642:                                              ; preds = %627
  %643 = trunc i64 %639 to i32
  %644 = icmp sgt i32 %643, 1
  br i1 %644, label %645, label %651

645:                                              ; preds = %642, %645
  %646 = phi i32 [ %648, %645 ], [ 1, %642 ]
  %647 = phi i32 [ %649, %645 ], [ %643, %642 ]
  %648 = add nuw nsw i32 %646, 1
  %649 = lshr i32 %647, 1
  %650 = icmp ugt i32 %647, 3
  br i1 %650, label %645, label %651

651:                                              ; preds = %645, %642
  %652 = phi i32 [ 1, %642 ], [ %648, %645 ]
  %653 = shl nsw i32 -1, %652
  %654 = xor i32 %653, -1
  %655 = trunc i64 %638 to i32
  %656 = and i32 %654, %655
  %657 = zext i32 %652 to i64
  %658 = ashr i64 %638, %657
  %659 = add nsw i32 %652, %635
  br label %660

660:                                              ; preds = %741, %651
  %661 = phi i16 [ %594, %651 ], [ %732, %741 ]
  %662 = phi i16* [ %595, %651 ], [ %733, %741 ]
  %663 = phi i32 [ %659, %651 ], [ %749, %741 ]
  %664 = phi i8 [ %598, %651 ], [ %734, %741 ]
  %665 = phi i8 [ 1, %651 ], [ %745, %741 ]
  br i1 %231, label %666, label %670

666:                                              ; preds = %660
  %667 = getelementptr inbounds i16, i16* %662, i64 1
  store i16* %667, i16** %6, align 8
  %668 = icmp eq i16* %667, %12
  %669 = ptrtoint i16* %667 to i64
  br i1 %668, label %770, label %716

670:                                              ; preds = %660
  %671 = zext i16 %661 to i32
  %672 = add nsw i32 %671, -48
  %673 = icmp ult i32 %672, 10
  %674 = icmp ult i16 %661, 64
  %675 = and i1 %674, %673
  %676 = add i16 %661, -97
  %677 = icmp ult i16 %676, 6
  %678 = or i1 %677, %675
  br i1 %678, label %687, label %679

679:                                              ; preds = %670
  %680 = icmp ugt i16 %661, 64
  br i1 %680, label %685, label %681

681:                                              ; preds = %679
  %682 = getelementptr inbounds i16, i16* %662, i64 1
  store i16* %682, i16** %6, align 8
  %683 = icmp eq i16* %682, %12
  %684 = ptrtoint i16* %682 to i64
  br i1 %683, label %768, label %716

685:                                              ; preds = %679
  %686 = icmp ugt i16 %661, 70
  br label %687

687:                                              ; preds = %685, %670
  %688 = phi i1 [ %686, %685 ], [ false, %670 ]
  %689 = getelementptr inbounds i16, i16* %662, i64 1
  store i16* %689, i16** %6, align 8
  %690 = icmp eq i16* %689, %12
  %691 = or i1 %690, %688
  %692 = ptrtoint i16* %689 to i64
  br i1 %691, label %713, label %693

693:                                              ; preds = %687
  %694 = getelementptr inbounds i16, i16* %662, i64 2
  %695 = icmp eq i16* %694, %12
  br i1 %695, label %716, label %696

696:                                              ; preds = %693
  %697 = load i16, i16* %689, align 2
  %698 = icmp eq i16 %697, %230
  br i1 %698, label %699, label %709

699:                                              ; preds = %696
  %700 = load i16, i16* %694, align 2
  %701 = zext i16 %700 to i32
  %702 = add nsw i32 %701, -48
  %703 = icmp ult i32 %702, 10
  %704 = icmp ult i16 %700, 64
  %705 = and i1 %704, %703
  br i1 %705, label %707, label %706

706:                                              ; preds = %699
  switch i16 %700, label %709 [
    i16 102, label %707
    i16 101, label %707
    i16 100, label %707
    i16 99, label %707
    i16 98, label %707
    i16 97, label %707
    i16 70, label %707
    i16 69, label %707
    i16 68, label %707
    i16 67, label %707
    i16 66, label %707
    i16 65, label %707
  ]

707:                                              ; preds = %706, %706, %706, %706, %706, %706, %706, %706, %706, %706, %706, %706, %699
  store i16* %694, i16** %6, align 8
  %708 = ptrtoint i16* %694 to i64
  br label %709

709:                                              ; preds = %707, %706, %696
  %710 = phi i64 [ %708, %707 ], [ %692, %696 ], [ %692, %706 ]
  %711 = phi i16* [ %694, %707 ], [ %689, %696 ], [ %689, %706 ]
  %712 = icmp eq i16* %711, %12
  br i1 %712, label %772, label %716

713:                                              ; preds = %687
  %714 = xor i1 %688, true
  %715 = or i1 %690, %714
  br i1 %715, label %750, label %716

716:                                              ; preds = %713, %709, %693, %681, %666
  %717 = phi i64 [ %692, %693 ], [ %684, %681 ], [ %710, %709 ], [ %669, %666 ], [ %692, %713 ]
  %718 = phi i16* [ %689, %693 ], [ %682, %681 ], [ %711, %709 ], [ %667, %666 ], [ %689, %713 ]
  br i1 %542, label %719, label %725

719:                                              ; preds = %716
  %720 = load i16, i16* %718, align 2
  %721 = icmp eq i16 %720, 46
  br i1 %721, label %722, label %730

722:                                              ; preds = %719
  %723 = getelementptr inbounds i16, i16* %718, i64 1
  store i16* %723, i16** %6, align 8
  %724 = ptrtoint i16* %723 to i64
  br label %725

725:                                              ; preds = %722, %716
  %726 = phi i64 [ %724, %722 ], [ %717, %716 ]
  %727 = phi i16* [ %723, %722 ], [ %718, %716 ]
  %728 = phi i8 [ 1, %722 ], [ %664, %716 ]
  %729 = load i16, i16* %727, align 2
  br label %730

730:                                              ; preds = %725, %719
  %731 = phi i64 [ %726, %725 ], [ %717, %719 ]
  %732 = phi i16 [ %729, %725 ], [ %720, %719 ]
  %733 = phi i16* [ %727, %725 ], [ %718, %719 ]
  %734 = phi i8 [ %728, %725 ], [ %664, %719 ]
  %735 = zext i16 %732 to i32
  %736 = add nsw i32 %735, -48
  %737 = icmp ult i32 %736, 10
  %738 = icmp ult i16 %732, 64
  %739 = and i1 %738, %737
  br i1 %739, label %741, label %740

740:                                              ; preds = %730
  switch i16 %732, label %752 [
    i16 102, label %741
    i16 101, label %741
    i16 100, label %741
    i16 99, label %741
    i16 98, label %741
    i16 97, label %741
    i16 70, label %741
    i16 69, label %741
    i16 68, label %741
    i16 67, label %741
    i16 66, label %741
    i16 65, label %741
  ]

741:                                              ; preds = %740, %740, %740, %740, %740, %740, %740, %740, %740, %740, %740, %740, %730
  %742 = icmp ne i8 %665, 0
  %743 = icmp eq i16 %732, 48
  %744 = and i1 %742, %743
  %745 = zext i1 %744 to i8
  %746 = and i8 %734, 1
  %747 = icmp eq i8 %746, 0
  %748 = add nsw i32 %663, 4
  %749 = select i1 %747, i32 %748, i32 %663
  br label %660

750:                                              ; preds = %713
  %751 = ptrtoint i16* %689 to i64
  br label %752

752:                                              ; preds = %740, %750
  %753 = phi i64 [ %751, %750 ], [ %731, %740 ]
  %754 = phi i16* [ %689, %750 ], [ %733, %740 ]
  %755 = or i1 %16, %542
  %756 = icmp eq i16* %754, %12
  %757 = or i1 %755, %756
  br i1 %757, label %772, label %758

758:                                              ; preds = %752, %763
  %759 = phi i16* [ %764, %763 ], [ %754, %752 ]
  %760 = load i16, i16* %759, align 2
  %761 = zext i16 %760 to i32
  %762 = tail call fastcc zeroext i1 @_ZN17double_conversionL12isWhitespaceEi(i32 %761) #5
  br i1 %762, label %763, label %1566

763:                                              ; preds = %758
  %764 = getelementptr inbounds i16, i16* %759, i64 1
  store i16* %764, i16** %6, align 8
  %765 = icmp eq i16* %764, %12
  br i1 %765, label %766, label %758

766:                                              ; preds = %763
  %767 = ptrtoint i16* %764 to i64
  br label %772

768:                                              ; preds = %681
  %769 = ptrtoint i16* %682 to i64
  br label %772

770:                                              ; preds = %666
  %771 = ptrtoint i16* %667 to i64
  br label %772

772:                                              ; preds = %709, %768, %770, %766, %752
  %773 = phi i64 [ %767, %766 ], [ %753, %752 ], [ %769, %768 ], [ %771, %770 ], [ %710, %709 ]
  %774 = phi i16* [ %12, %766 ], [ %754, %752 ], [ %12, %768 ], [ %12, %770 ], [ %12, %709 ]
  %775 = add nsw i32 %652, -1
  %776 = shl i32 1, %775
  %777 = icmp sgt i32 %656, %776
  br i1 %777, label %778, label %780

778:                                              ; preds = %772
  %779 = add nsw i64 %658, 1
  br label %788

780:                                              ; preds = %772
  %781 = icmp eq i32 %656, %776
  br i1 %781, label %782, label %788

782:                                              ; preds = %780
  %783 = and i64 %658, 1
  %784 = xor i8 %665, 1
  %785 = zext i8 %784 to i64
  %786 = or i64 %783, %785
  %787 = add nsw i64 %786, %658
  br label %788

788:                                              ; preds = %782, %780, %778
  %789 = phi i64 [ %779, %778 ], [ %658, %780 ], [ %787, %782 ]
  %790 = shl i64 1, %552
  %791 = and i64 %789, %790
  %792 = icmp ne i64 %791, 0
  %793 = zext i1 %792 to i32
  %794 = add nsw i32 %663, %793
  %795 = zext i1 %792 to i64
  %796 = ashr i64 %789, %795
  br i1 %542, label %866, label %1015

797:                                              ; preds = %627
  br i1 %231, label %798, label %802

798:                                              ; preds = %797
  %799 = getelementptr inbounds i16, i16* %595, i64 1
  store i16* %799, i16** %6, align 8
  %800 = icmp eq i16* %799, %12
  %801 = ptrtoint i16* %799 to i64
  br i1 %800, label %854, label %845

802:                                              ; preds = %797
  %803 = icmp ult i16 %594, 64
  %804 = and i1 %803, %601
  %805 = add i16 %594, -97
  %806 = icmp ult i16 %805, 6
  %807 = or i1 %806, %804
  br i1 %807, label %816, label %808

808:                                              ; preds = %802
  %809 = icmp ugt i16 %594, 64
  br i1 %809, label %814, label %810

810:                                              ; preds = %808
  %811 = getelementptr inbounds i16, i16* %595, i64 1
  store i16* %811, i16** %6, align 8
  %812 = icmp eq i16* %811, %12
  %813 = ptrtoint i16* %811 to i64
  br i1 %812, label %856, label %845

814:                                              ; preds = %808
  %815 = icmp ugt i16 %594, 70
  br label %816

816:                                              ; preds = %814, %802
  %817 = phi i1 [ %815, %814 ], [ false, %802 ]
  %818 = getelementptr inbounds i16, i16* %595, i64 1
  store i16* %818, i16** %6, align 8
  %819 = icmp eq i16* %818, %12
  %820 = or i1 %819, %817
  %821 = ptrtoint i16* %818 to i64
  br i1 %820, label %842, label %822

822:                                              ; preds = %816
  %823 = getelementptr inbounds i16, i16* %595, i64 2
  %824 = icmp eq i16* %823, %12
  br i1 %824, label %845, label %825

825:                                              ; preds = %822
  %826 = load i16, i16* %818, align 2
  %827 = icmp eq i16 %826, %230
  br i1 %827, label %828, label %838

828:                                              ; preds = %825
  %829 = load i16, i16* %823, align 2
  %830 = zext i16 %829 to i32
  %831 = add nsw i32 %830, -48
  %832 = icmp ult i32 %831, 10
  %833 = icmp ult i16 %829, 64
  %834 = and i1 %833, %832
  br i1 %834, label %836, label %835

835:                                              ; preds = %828
  switch i16 %829, label %838 [
    i16 102, label %836
    i16 101, label %836
    i16 100, label %836
    i16 99, label %836
    i16 98, label %836
    i16 97, label %836
    i16 70, label %836
    i16 69, label %836
    i16 68, label %836
    i16 67, label %836
    i16 66, label %836
    i16 65, label %836
  ]

836:                                              ; preds = %835, %835, %835, %835, %835, %835, %835, %835, %835, %835, %835, %835, %828
  store i16* %823, i16** %6, align 8
  %837 = ptrtoint i16* %823 to i64
  br label %838

838:                                              ; preds = %836, %835, %825
  %839 = phi i64 [ %837, %836 ], [ %821, %825 ], [ %821, %835 ]
  %840 = phi i16* [ %823, %836 ], [ %818, %825 ], [ %818, %835 ]
  %841 = icmp eq i16* %840, %12
  br i1 %841, label %860, label %845

842:                                              ; preds = %816
  %843 = xor i1 %817, true
  %844 = or i1 %819, %843
  br i1 %844, label %858, label %845

845:                                              ; preds = %842, %838, %822, %810, %798, %610
  %846 = phi i64 [ %813, %810 ], [ %839, %838 ], [ %801, %798 ], [ %821, %842 ], [ %821, %822 ], [ %612, %610 ]
  %847 = phi i16* [ %811, %810 ], [ %840, %838 ], [ %799, %798 ], [ %818, %842 ], [ %818, %822 ], [ %611, %610 ]
  %848 = phi i32 [ %635, %810 ], [ %635, %838 ], [ %635, %798 ], [ %635, %842 ], [ %635, %822 ], [ %596, %610 ]
  %849 = phi i64 [ %638, %810 ], [ %638, %838 ], [ %638, %798 ], [ %638, %842 ], [ %638, %822 ], [ %597, %610 ]
  %850 = phi i8 [ %598, %810 ], [ %598, %838 ], [ %598, %798 ], [ %598, %842 ], [ %598, %822 ], [ 1, %610 ]
  %851 = load i16, i16* %847, align 2
  br label %592

852:                                              ; preds = %619
  %853 = ptrtoint i16* %621 to i64
  br i1 %614, label %866, label %1015

854:                                              ; preds = %798
  %855 = ptrtoint i16* %799 to i64
  br label %860

856:                                              ; preds = %810
  %857 = ptrtoint i16* %811 to i64
  br label %860

858:                                              ; preds = %842
  %859 = ptrtoint i16* %818 to i64
  br label %860

860:                                              ; preds = %838, %854, %856, %858, %613
  %861 = phi i64 [ %593, %613 ], [ %855, %854 ], [ %857, %856 ], [ %859, %858 ], [ %839, %838 ]
  %862 = phi i16* [ %595, %613 ], [ %12, %854 ], [ %12, %856 ], [ %818, %858 ], [ %12, %838 ]
  %863 = phi i1 [ %614, %613 ], [ %542, %854 ], [ %542, %856 ], [ %542, %858 ], [ %542, %838 ]
  %864 = phi i32 [ %596, %613 ], [ %635, %854 ], [ %635, %856 ], [ %635, %858 ], [ %635, %838 ]
  %865 = phi i64 [ %597, %613 ], [ %638, %854 ], [ %638, %856 ], [ %638, %858 ], [ %638, %838 ]
  br i1 %863, label %866, label %1015

866:                                              ; preds = %609, %609, %852, %788, %860
  %867 = phi i16* [ %862, %860 ], [ %774, %788 ], [ %12, %852 ], [ %595, %609 ], [ %595, %609 ]
  %868 = phi i64 [ %865, %860 ], [ %796, %788 ], [ %597, %852 ], [ %597, %609 ], [ %597, %609 ]
  %869 = phi i32 [ %864, %860 ], [ %794, %788 ], [ %596, %852 ], [ %596, %609 ], [ %596, %609 ]
  br i1 %231, label %870, label %873

870:                                              ; preds = %866
  %871 = getelementptr inbounds i16, i16* %867, i64 1
  store i16* %871, i16** %6, align 8
  %872 = ptrtoint i16* %871 to i64
  br label %912

873:                                              ; preds = %866
  %874 = load i16, i16* %867, align 2
  %875 = zext i16 %874 to i32
  %876 = add nsw i32 %875, -48
  %877 = icmp ult i32 %876, 10
  %878 = icmp ult i16 %874, 64
  %879 = and i1 %878, %877
  %880 = add i16 %874, -97
  %881 = icmp ult i16 %880, 6
  %882 = or i1 %881, %879
  br i1 %882, label %890, label %883

883:                                              ; preds = %873
  %884 = icmp ugt i16 %874, 64
  br i1 %884, label %888, label %885

885:                                              ; preds = %883
  %886 = getelementptr inbounds i16, i16* %867, i64 1
  store i16* %886, i16** %6, align 8
  %887 = ptrtoint i16* %886 to i64
  br label %912

888:                                              ; preds = %883
  %889 = icmp ugt i16 %874, 70
  br label %890

890:                                              ; preds = %888, %873
  %891 = phi i1 [ %889, %888 ], [ false, %873 ]
  %892 = getelementptr inbounds i16, i16* %867, i64 1
  store i16* %892, i16** %6, align 8
  %893 = icmp eq i16* %892, %12
  %894 = or i1 %893, %891
  %895 = ptrtoint i16* %892 to i64
  br i1 %894, label %912, label %896

896:                                              ; preds = %890
  %897 = getelementptr inbounds i16, i16* %867, i64 2
  %898 = icmp eq i16* %897, %12
  br i1 %898, label %912, label %899

899:                                              ; preds = %896
  %900 = load i16, i16* %892, align 2
  %901 = icmp eq i16 %900, %230
  br i1 %901, label %902, label %916

902:                                              ; preds = %899
  %903 = load i16, i16* %897, align 2
  %904 = zext i16 %903 to i32
  %905 = add nsw i32 %904, -48
  %906 = icmp ult i32 %905, 10
  %907 = icmp ult i16 %903, 64
  %908 = and i1 %907, %906
  br i1 %908, label %910, label %909

909:                                              ; preds = %902
  switch i16 %903, label %912 [
    i16 102, label %910
    i16 101, label %910
    i16 100, label %910
    i16 99, label %910
    i16 98, label %910
    i16 97, label %910
    i16 70, label %910
    i16 69, label %910
    i16 68, label %910
    i16 67, label %910
    i16 66, label %910
    i16 65, label %910
  ]

910:                                              ; preds = %909, %909, %909, %909, %909, %909, %909, %909, %909, %909, %909, %909, %902
  store i16* %897, i16** %6, align 8
  %911 = ptrtoint i16* %897 to i64
  br label %912

912:                                              ; preds = %910, %909, %896, %890, %885, %870
  %913 = phi i64 [ %895, %896 ], [ %895, %890 ], [ %872, %870 ], [ %887, %885 ], [ %911, %910 ], [ %895, %909 ]
  %914 = phi i16* [ %892, %896 ], [ %892, %890 ], [ %871, %870 ], [ %886, %885 ], [ %897, %910 ], [ %892, %909 ]
  %915 = load i16, i16* %914, align 2
  br label %916

916:                                              ; preds = %912, %899
  %917 = phi i64 [ %913, %912 ], [ %895, %899 ]
  %918 = phi i16 [ %915, %912 ], [ %900, %899 ]
  %919 = phi i16* [ %914, %912 ], [ %892, %899 ]
  switch i16 %918, label %926 [
    i16 43, label %920
    i16 45, label %923
  ]

920:                                              ; preds = %916
  %921 = getelementptr inbounds i16, i16* %919, i64 1
  store i16* %921, i16** %6, align 8
  %922 = ptrtoint i16* %921 to i64
  br label %926

923:                                              ; preds = %916
  %924 = getelementptr inbounds i16, i16* %919, i64 1
  store i16* %924, i16** %6, align 8
  %925 = ptrtoint i16* %924 to i64
  br label %926

926:                                              ; preds = %923, %920, %916
  %927 = phi i64 [ %917, %916 ], [ %922, %920 ], [ %925, %923 ]
  %928 = phi i16* [ %919, %916 ], [ %921, %920 ], [ %924, %923 ]
  %929 = phi i1 [ false, %916 ], [ false, %920 ], [ true, %923 ]
  %930 = load i16, i16* %928, align 2
  %931 = zext i16 %930 to i32
  %932 = add nsw i32 %931, -48
  %933 = icmp ult i32 %932, 10
  br i1 %933, label %934, label %1008

934:                                              ; preds = %926, %995
  %935 = phi i32 [ %999, %995 ], [ %931, %926 ]
  %936 = phi i16 [ %998, %995 ], [ %930, %926 ]
  %937 = phi i16* [ %997, %995 ], [ %928, %926 ]
  %938 = phi i32 [ %948, %995 ], [ 0, %926 ]
  %939 = icmp slt i32 %938, 0
  %940 = sub nsw i32 0, %938
  %941 = select i1 %939, i32 %940, i32 %938
  %942 = icmp slt i32 %941, 97201
  br i1 %942, label %943, label %947

943:                                              ; preds = %934
  %944 = mul nsw i32 %938, 10
  %945 = add nsw i32 %935, -48
  %946 = add i32 %945, %944
  br label %947

947:                                              ; preds = %943, %934
  %948 = phi i32 [ %946, %943 ], [ %938, %934 ]
  br i1 %231, label %949, label %953

949:                                              ; preds = %947
  %950 = getelementptr inbounds i16, i16* %937, i64 1
  store i16* %950, i16** %6, align 8
  %951 = icmp eq i16* %950, %12
  %952 = ptrtoint i16* %950 to i64
  br i1 %951, label %1002, label %995

953:                                              ; preds = %947
  %954 = icmp ult i16 %936, 64
  %955 = add i16 %936, -97
  %956 = icmp ult i16 %955, 6
  %957 = or i1 %954, %956
  br i1 %957, label %966, label %958

958:                                              ; preds = %953
  %959 = icmp ugt i16 %936, 64
  br i1 %959, label %964, label %960

960:                                              ; preds = %958
  %961 = getelementptr inbounds i16, i16* %937, i64 1
  store i16* %961, i16** %6, align 8
  %962 = icmp eq i16* %961, %12
  %963 = ptrtoint i16* %961 to i64
  br i1 %962, label %1004, label %995

964:                                              ; preds = %958
  %965 = icmp ugt i16 %936, 70
  br label %966

966:                                              ; preds = %964, %953
  %967 = phi i1 [ %965, %964 ], [ false, %953 ]
  %968 = getelementptr inbounds i16, i16* %937, i64 1
  store i16* %968, i16** %6, align 8
  %969 = icmp eq i16* %968, %12
  %970 = or i1 %969, %967
  %971 = ptrtoint i16* %968 to i64
  br i1 %970, label %992, label %972

972:                                              ; preds = %966
  %973 = getelementptr inbounds i16, i16* %937, i64 2
  %974 = icmp eq i16* %973, %12
  br i1 %974, label %995, label %975

975:                                              ; preds = %972
  %976 = load i16, i16* %968, align 2
  %977 = icmp eq i16 %976, %230
  br i1 %977, label %978, label %988

978:                                              ; preds = %975
  %979 = load i16, i16* %973, align 2
  %980 = zext i16 %979 to i32
  %981 = add nsw i32 %980, -48
  %982 = icmp ult i32 %981, 10
  %983 = icmp ult i16 %979, 64
  %984 = and i1 %983, %982
  br i1 %984, label %986, label %985

985:                                              ; preds = %978
  switch i16 %979, label %988 [
    i16 102, label %986
    i16 101, label %986
    i16 100, label %986
    i16 99, label %986
    i16 98, label %986
    i16 97, label %986
    i16 70, label %986
    i16 69, label %986
    i16 68, label %986
    i16 67, label %986
    i16 66, label %986
    i16 65, label %986
  ]

986:                                              ; preds = %985, %985, %985, %985, %985, %985, %985, %985, %985, %985, %985, %985, %978
  store i16* %973, i16** %6, align 8
  %987 = ptrtoint i16* %973 to i64
  br label %988

988:                                              ; preds = %986, %985, %975
  %989 = phi i64 [ %987, %986 ], [ %971, %975 ], [ %971, %985 ]
  %990 = phi i16* [ %973, %986 ], [ %968, %975 ], [ %968, %985 ]
  %991 = icmp eq i16* %990, %12
  br i1 %991, label %1008, label %995

992:                                              ; preds = %966
  %993 = xor i1 %967, true
  %994 = or i1 %969, %993
  br i1 %994, label %1006, label %995

995:                                              ; preds = %992, %988, %972, %960, %949
  %996 = phi i64 [ %971, %992 ], [ %952, %949 ], [ %989, %988 ], [ %963, %960 ], [ %971, %972 ]
  %997 = phi i16* [ %968, %992 ], [ %950, %949 ], [ %990, %988 ], [ %961, %960 ], [ %968, %972 ]
  %998 = load i16, i16* %997, align 2
  %999 = zext i16 %998 to i32
  %1000 = add nsw i32 %999, -48
  %1001 = icmp ult i32 %1000, 10
  br i1 %1001, label %934, label %1008

1002:                                             ; preds = %949
  %1003 = ptrtoint i16* %950 to i64
  br label %1008

1004:                                             ; preds = %960
  %1005 = ptrtoint i16* %961 to i64
  br label %1008

1006:                                             ; preds = %992
  %1007 = ptrtoint i16* %968 to i64
  br label %1008

1008:                                             ; preds = %988, %995, %1002, %1004, %1006, %926
  %1009 = phi i64 [ %927, %926 ], [ %1003, %1002 ], [ %1005, %1004 ], [ %1007, %1006 ], [ %989, %988 ], [ %996, %995 ]
  %1010 = phi i16* [ %928, %926 ], [ %12, %1002 ], [ %12, %1004 ], [ %968, %1006 ], [ %12, %988 ], [ %997, %995 ]
  %1011 = phi i32 [ 0, %926 ], [ %948, %1002 ], [ %948, %1004 ], [ %948, %1006 ], [ %948, %995 ], [ %948, %988 ]
  %1012 = sub nsw i32 0, %1011
  %1013 = select i1 %929, i32 %1012, i32 %1011
  %1014 = add nsw i32 %1013, %869
  br label %1015

1015:                                             ; preds = %852, %788, %1008, %860
  %1016 = phi i64 [ %1009, %1008 ], [ %861, %860 ], [ %773, %788 ], [ %853, %852 ]
  %1017 = phi i16* [ %1010, %1008 ], [ %862, %860 ], [ %774, %788 ], [ %12, %852 ]
  %1018 = phi i64 [ %868, %1008 ], [ %865, %860 ], [ %796, %788 ], [ %597, %852 ]
  %1019 = phi i32 [ %1014, %1008 ], [ %864, %860 ], [ %794, %788 ], [ %596, %852 ]
  %1020 = icmp eq i32 %1019, 0
  %1021 = icmp eq i64 %1018, 0
  %1022 = or i1 %1021, %1020
  br i1 %1022, label %1023, label %1030

1023:                                             ; preds = %1015
  br i1 %543, label %1024, label %1027

1024:                                             ; preds = %1023
  br i1 %1021, label %1075, label %1025

1025:                                             ; preds = %1024
  %1026 = sub nsw i64 0, %1018
  br label %1027

1027:                                             ; preds = %1025, %1023
  %1028 = phi i64 [ %1026, %1025 ], [ %1018, %1023 ]
  %1029 = sitofp i64 %1028 to double
  br label %1075

1030:                                             ; preds = %1015
  %1031 = icmp ugt i64 %1018, 9007199254740991
  br i1 %1031, label %1032, label %1038

1032:                                             ; preds = %1030, %1032
  %1033 = phi i32 [ %1036, %1032 ], [ %1019, %1030 ]
  %1034 = phi i64 [ %1035, %1032 ], [ %1018, %1030 ]
  %1035 = lshr i64 %1034, 1
  %1036 = add nsw i32 %1033, 1
  %1037 = icmp ugt i64 %1034, 18014398509481983
  br i1 %1037, label %1032, label %1038

1038:                                             ; preds = %1032, %1030
  %1039 = phi i64 [ %1018, %1030 ], [ %1035, %1032 ]
  %1040 = phi i32 [ %1019, %1030 ], [ %1036, %1032 ]
  %1041 = icmp sgt i32 %1040, 971
  br i1 %1041, label %1071, label %1042

1042:                                             ; preds = %1038
  %1043 = icmp slt i32 %1040, -1074
  br i1 %1043, label %1071, label %1044

1044:                                             ; preds = %1042
  %1045 = icmp ne i32 %1040, -1074
  %1046 = and i64 %1039, 4503599627370496
  %1047 = icmp eq i64 %1046, 0
  %1048 = and i1 %1045, %1047
  br i1 %1048, label %1049, label %1058

1049:                                             ; preds = %1044, %1049
  %1050 = phi i32 [ %1053, %1049 ], [ %1040, %1044 ]
  %1051 = phi i64 [ %1052, %1049 ], [ %1039, %1044 ]
  %1052 = shl i64 %1051, 1
  %1053 = add nsw i32 %1050, -1
  %1054 = icmp sgt i32 %1053, -1074
  %1055 = and i64 %1051, 2251799813685248
  %1056 = icmp eq i64 %1055, 0
  %1057 = and i1 %1054, %1056
  br i1 %1057, label %1049, label %1058

1058:                                             ; preds = %1049, %1044
  %1059 = phi i64 [ %1039, %1044 ], [ %1052, %1049 ]
  %1060 = phi i32 [ %1040, %1044 ], [ %1053, %1049 ]
  %1061 = phi i1 [ %1047, %1044 ], [ %1056, %1049 ]
  %1062 = icmp eq i32 %1060, -1074
  %1063 = and i1 %1062, %1061
  %1064 = add nsw i32 %1060, 1075
  %1065 = zext i32 %1064 to i64
  %1066 = shl i64 %1065, 52
  %1067 = select i1 %1063, i64 0, i64 %1066
  %1068 = and i64 %1059, 4503599627370495
  %1069 = or i64 %1067, %1068
  %1070 = bitcast i64 %1069 to double
  br label %1071

1071:                                             ; preds = %1058, %1042, %1038
  %1072 = phi double [ %1070, %1058 ], [ 0x7FF0000000000000, %1038 ], [ 0.000000e+00, %1042 ]
  %1073 = fsub double -0.000000e+00, %1072
  %1074 = select i1 %543, double %1073, double %1072
  br label %1075

1075:                                             ; preds = %589, %1024, %1027, %1071
  %1076 = phi i64 [ %1016, %1024 ], [ %1016, %1071 ], [ %1016, %1027 ], [ %590, %589 ]
  %1077 = phi i16* [ %1017, %1024 ], [ %1017, %1071 ], [ %1017, %1027 ], [ %12, %589 ]
  %1078 = phi double [ -0.000000e+00, %1024 ], [ %1074, %1071 ], [ %1029, %1027 ], [ %591, %589 ]
  %1079 = xor i1 %20, true
  %1080 = icmp eq i16* %1077, %12
  %1081 = or i1 %1080, %1079
  br i1 %1081, label %1098, label %1082

1082:                                             ; preds = %1075
  %1083 = load i16, i16* %1077, align 2
  %1084 = zext i16 %1083 to i32
  %1085 = tail call fastcc zeroext i1 @_ZN17double_conversionL12isWhitespaceEi(i32 %1084) #5
  br i1 %1085, label %1090, label %1098

1086:                                             ; preds = %1090
  %1087 = load i16, i16* %1092, align 2
  %1088 = zext i16 %1087 to i32
  %1089 = tail call fastcc zeroext i1 @_ZN17double_conversionL12isWhitespaceEi(i32 %1088) #5
  br i1 %1089, label %1090, label %1096

1090:                                             ; preds = %1082, %1086
  %1091 = phi i16* [ %1092, %1086 ], [ %1077, %1082 ]
  %1092 = getelementptr inbounds i16, i16* %1091, i64 1
  store i16* %1092, i16** %6, align 8
  %1093 = icmp eq i16* %1092, %12
  br i1 %1093, label %1094, label %1086

1094:                                             ; preds = %1090
  %1095 = ptrtoint i16* %1092 to i64
  br label %1098

1096:                                             ; preds = %1086
  %1097 = ptrtoint i16* %1092 to i64
  br label %1098

1098:                                             ; preds = %1082, %1096, %1094, %1075
  %1099 = phi i64 [ %1076, %1075 ], [ %1095, %1094 ], [ %1097, %1096 ], [ %1076, %1082 ]
  %1100 = ptrtoint i16* %1 to i64
  %1101 = sub i64 %1099, %1100
  %1102 = lshr exact i64 %1101, 1
  %1103 = trunc i64 %1102 to i32
  store i32 %1103, i32* %4, align 4
  br label %1566

1104:                                             ; preds = %264
  %1105 = icmp eq i16 %271, 48
  br i1 %1105, label %1106, label %1149

1106:                                             ; preds = %272, %1104
  br label %1107

1107:                                             ; preds = %1106, %1112
  %1108 = phi i16* [ %1113, %1112 ], [ %265, %1106 ]
  %1109 = getelementptr inbounds i16, i16* %1108, i64 1
  store i16* %1109, i16** %6, align 8
  %1110 = icmp eq i16* %1109, %12
  br i1 %231, label %1111, label %1116

1111:                                             ; preds = %1107
  br i1 %1110, label %1139, label %1112

1112:                                             ; preds = %1111, %1133, %1118
  %1113 = phi i16* [ %1109, %1111 ], [ %1135, %1133 ], [ %1109, %1118 ]
  %1114 = load i16, i16* %1113, align 2
  %1115 = icmp eq i16 %1114, 48
  br i1 %1115, label %1107, label %1149

1116:                                             ; preds = %1107
  %1117 = ptrtoint i16* %1109 to i64
  br i1 %1110, label %1137, label %1118

1118:                                             ; preds = %1116
  %1119 = getelementptr inbounds i16, i16* %1108, i64 2
  %1120 = icmp eq i16* %1119, %12
  br i1 %1120, label %1112, label %1121

1121:                                             ; preds = %1118
  %1122 = load i16, i16* %1109, align 2
  %1123 = icmp eq i16 %1122, %230
  br i1 %1123, label %1124, label %1133

1124:                                             ; preds = %1121
  %1125 = load i16, i16* %1119, align 2
  %1126 = zext i16 %1125 to i32
  %1127 = add nsw i32 %1126, -48
  %1128 = icmp ult i32 %1127, 10
  %1129 = icmp ult i16 %1125, 58
  %1130 = and i1 %1129, %1128
  br i1 %1130, label %1131, label %1133

1131:                                             ; preds = %1124
  store i16* %1119, i16** %6, align 8
  %1132 = ptrtoint i16* %1119 to i64
  br label %1133

1133:                                             ; preds = %1124, %1131, %1121
  %1134 = phi i64 [ %1132, %1131 ], [ %1117, %1121 ], [ %1117, %1124 ]
  %1135 = phi i16* [ %1119, %1131 ], [ %1109, %1121 ], [ %1109, %1124 ]
  %1136 = icmp eq i16* %1135, %12
  br i1 %1136, label %1141, label %1112

1137:                                             ; preds = %1116
  %1138 = ptrtoint i16* %1109 to i64
  br label %1141

1139:                                             ; preds = %1111
  %1140 = ptrtoint i16* %1109 to i64
  br label %1141

1141:                                             ; preds = %1133, %1139, %1137
  %1142 = phi i64 [ %1138, %1137 ], [ %1140, %1139 ], [ %1134, %1133 ]
  %1143 = ptrtoint i16* %1 to i64
  %1144 = sub i64 %1142, %1143
  %1145 = lshr exact i64 %1144, 1
  %1146 = trunc i64 %1145 to i32
  store i32 %1146, i32* %4, align 4
  %1147 = icmp eq i8 %89, 0
  %1148 = select i1 %1147, double 0.000000e+00, double -0.000000e+00
  br label %1566

1149:                                             ; preds = %1112, %272, %1104
  %1150 = phi i16 [ %271, %1104 ], [ %271, %272 ], [ %1114, %1112 ]
  %1151 = phi i16* [ %265, %1104 ], [ %265, %272 ], [ %1113, %1112 ]
  %1152 = and i32 %266, 2
  %1153 = icmp ne i32 %1152, 0
  br label %1154

1154:                                             ; preds = %224, %1149
  %1155 = phi i16 [ %1150, %1149 ], [ %226, %224 ]
  %1156 = phi i16* [ %1151, %1149 ], [ %225, %224 ]
  %1157 = phi i1 [ true, %1149 ], [ false, %224 ]
  %1158 = phi i1 [ %1153, %1149 ], [ false, %224 ]
  %1159 = zext i1 %1158 to i8
  %1160 = getelementptr inbounds [782 x i8], [782 x i8]* %7, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 782, i8* nonnull %1160) #5
  %1161 = add i16 %1155, -48
  %1162 = icmp ult i16 %1161, 10
  br i1 %1162, label %1163, label %1236

1163:                                             ; preds = %1154
  %1164 = getelementptr inbounds %"class.double_conversion::StringToDoubleConverter", %"class.double_conversion::StringToDoubleConverter"* %0, i64 0, i32 6
  br label %1165

1165:                                             ; preds = %1163, %1203
  %1166 = phi i16 [ %1155, %1163 ], [ %1205, %1203 ]
  %1167 = phi i16* [ %1156, %1163 ], [ %1204, %1203 ]
  %1168 = phi i32 [ 0, %1163 ], [ %1190, %1203 ]
  %1169 = phi i8 [ %1159, %1163 ], [ %1197, %1203 ]
  %1170 = phi i8 [ 0, %1163 ], [ %1189, %1203 ]
  %1171 = phi i32 [ 0, %1163 ], [ %1188, %1203 ]
  %1172 = phi i32 [ 0, %1163 ], [ %1187, %1203 ]
  %1173 = icmp slt i32 %1172, 772
  br i1 %1173, label %1174, label %1180

1174:                                             ; preds = %1165
  %1175 = trunc i16 %1166 to i8
  %1176 = add nsw i32 %1168, 1
  %1177 = sext i32 %1168 to i64
  %1178 = getelementptr inbounds [782 x i8], [782 x i8]* %7, i64 0, i64 %1177
  store i8 %1175, i8* %1178, align 1
  %1179 = add nsw i32 %1172, 1
  br label %1186

1180:                                             ; preds = %1165
  %1181 = add nsw i32 %1171, 1
  %1182 = and i8 %1170, 1
  %1183 = icmp ne i16 %1166, 48
  %1184 = zext i1 %1183 to i8
  %1185 = or i8 %1182, %1184
  br label %1186

1186:                                             ; preds = %1180, %1174
  %1187 = phi i32 [ %1179, %1174 ], [ %1172, %1180 ]
  %1188 = phi i32 [ %1171, %1174 ], [ %1181, %1180 ]
  %1189 = phi i8 [ %1170, %1174 ], [ %1185, %1180 ]
  %1190 = phi i32 [ %1176, %1174 ], [ %1168, %1180 ]
  %1191 = icmp eq i8 %1169, 0
  br i1 %1191, label %1195, label %1192

1192:                                             ; preds = %1186
  %1193 = load i16, i16* %1167, align 2
  %1194 = icmp ult i16 %1193, 56
  br label %1195

1195:                                             ; preds = %1186, %1192
  %1196 = phi i1 [ false, %1186 ], [ %1194, %1192 ]
  %1197 = zext i1 %1196 to i8
  %1198 = load i16, i16* %1164, align 8
  %1199 = icmp eq i16 %1198, 0
  br i1 %1199, label %1200, label %1208

1200:                                             ; preds = %1195
  %1201 = getelementptr inbounds i16, i16* %1167, i64 1
  store i16* %1201, i16** %6, align 8
  %1202 = icmp eq i16* %1201, %12
  br i1 %1202, label %1506, label %1203

1203:                                             ; preds = %1200, %1233, %1217, %1219
  %1204 = phi i16* [ %1201, %1200 ], [ %1234, %1233 ], [ %1215, %1217 ], [ %1215, %1219 ]
  %1205 = load i16, i16* %1204, align 2
  %1206 = add i16 %1205, -48
  %1207 = icmp ult i16 %1206, 10
  br i1 %1207, label %1165, label %1236

1208:                                             ; preds = %1195
  %1209 = load i16, i16* %1167, align 2
  %1210 = zext i16 %1209 to i32
  %1211 = add nsw i32 %1210, -48
  %1212 = icmp ult i32 %1211, 10
  %1213 = icmp ult i16 %1209, 58
  %1214 = and i1 %1213, %1212
  %1215 = getelementptr inbounds i16, i16* %1167, i64 1
  store i16* %1215, i16** %6, align 8
  %1216 = icmp eq i16* %1215, %12
  br i1 %1214, label %1218, label %1217

1217:                                             ; preds = %1208
  br i1 %1216, label %1506, label %1203

1218:                                             ; preds = %1208
  br i1 %1216, label %1506, label %1219

1219:                                             ; preds = %1218
  %1220 = getelementptr inbounds i16, i16* %1167, i64 2
  %1221 = icmp eq i16* %1220, %12
  br i1 %1221, label %1203, label %1222

1222:                                             ; preds = %1219
  %1223 = load i16, i16* %1215, align 2
  %1224 = icmp eq i16 %1223, %1198
  br i1 %1224, label %1225, label %1233

1225:                                             ; preds = %1222
  %1226 = load i16, i16* %1220, align 2
  %1227 = zext i16 %1226 to i32
  %1228 = add nsw i32 %1227, -48
  %1229 = icmp ult i32 %1228, 10
  %1230 = icmp ult i16 %1226, 58
  %1231 = and i1 %1230, %1229
  br i1 %1231, label %1232, label %1233

1232:                                             ; preds = %1225
  store i16* %1220, i16** %6, align 8
  br label %1233

1233:                                             ; preds = %1225, %1232, %1222
  %1234 = phi i16* [ %1220, %1232 ], [ %1215, %1222 ], [ %1215, %1225 ]
  %1235 = icmp eq i16* %1234, %12
  br i1 %1235, label %1506, label %1203

1236:                                             ; preds = %1203, %1154
  %1237 = phi i32 [ 0, %1154 ], [ %1187, %1203 ]
  %1238 = phi i32 [ 0, %1154 ], [ %1188, %1203 ]
  %1239 = phi i8 [ 0, %1154 ], [ %1189, %1203 ]
  %1240 = phi i8 [ %1159, %1154 ], [ %1197, %1203 ]
  %1241 = phi i32 [ 0, %1154 ], [ %1190, %1203 ]
  %1242 = phi i16* [ %1156, %1154 ], [ %1204, %1203 ]
  %1243 = phi i16 [ %1155, %1154 ], [ %1205, %1203 ]
  %1244 = icmp eq i32 %1237, 0
  %1245 = select i1 %1244, i8 0, i8 %1240
  %1246 = icmp eq i16 %1243, 46
  br i1 %1246, label %1247, label %1381

1247:                                             ; preds = %1236
  %1248 = icmp ne i8 %1245, 0
  %1249 = xor i1 %1248, true
  %1250 = or i1 %16, %1249
  br i1 %1250, label %1254, label %1251

1251:                                             ; preds = %1247
  %1252 = getelementptr inbounds %"class.double_conversion::StringToDoubleConverter", %"class.double_conversion::StringToDoubleConverter"* %0, i64 0, i32 3
  %1253 = load double, double* %1252, align 8
  br label %1564

1254:                                             ; preds = %1247
  br i1 %1248, label %1515, label %1255

1255:                                             ; preds = %1254
  %1256 = getelementptr inbounds %"class.double_conversion::StringToDoubleConverter", %"class.double_conversion::StringToDoubleConverter"* %0, i64 0, i32 6
  %1257 = load i16, i16* %1256, align 8
  %1258 = icmp eq i16 %1257, 0
  %1259 = getelementptr inbounds i16, i16* %1242, i64 1
  store i16* %1259, i16** %6, align 8
  %1260 = icmp eq i16* %1259, %12
  br i1 %1260, label %1261, label %1266

1261:                                             ; preds = %1255
  br i1 %1244, label %1262, label %1506

1262:                                             ; preds = %1261
  br i1 %1157, label %1501, label %1263

1263:                                             ; preds = %1262
  %1264 = getelementptr inbounds %"class.double_conversion::StringToDoubleConverter", %"class.double_conversion::StringToDoubleConverter"* %0, i64 0, i32 3
  %1265 = load double, double* %1264, align 8
  br label %1564

1266:                                             ; preds = %1255
  %1267 = load i16, i16* %1259, align 2
  %1268 = icmp eq i16 %1267, 48
  %1269 = and i1 %1244, %1268
  br i1 %1269, label %1270, label %1314

1270:                                             ; preds = %1266, %1309
  %1271 = phi i16* [ %1310, %1309 ], [ %1259, %1266 ]
  %1272 = phi i32 [ %1311, %1309 ], [ 0, %1266 ]
  %1273 = getelementptr inbounds i16, i16* %1271, i64 1
  store i16* %1273, i16** %6, align 8
  %1274 = icmp eq i16* %1273, %12
  br i1 %1258, label %1275, label %1276

1275:                                             ; preds = %1270
  br i1 %1274, label %1299, label %1309

1276:                                             ; preds = %1270
  %1277 = ptrtoint i16* %1273 to i64
  br i1 %1274, label %1297, label %1278

1278:                                             ; preds = %1276
  %1279 = getelementptr inbounds i16, i16* %1271, i64 2
  %1280 = icmp eq i16* %1279, %12
  br i1 %1280, label %1309, label %1281

1281:                                             ; preds = %1278
  %1282 = load i16, i16* %1273, align 2
  %1283 = icmp eq i16 %1282, %1257
  br i1 %1283, label %1284, label %1293

1284:                                             ; preds = %1281
  %1285 = load i16, i16* %1279, align 2
  %1286 = zext i16 %1285 to i32
  %1287 = add nsw i32 %1286, -48
  %1288 = icmp ult i32 %1287, 10
  %1289 = icmp ult i16 %1285, 58
  %1290 = and i1 %1289, %1288
  br i1 %1290, label %1291, label %1293

1291:                                             ; preds = %1284
  store i16* %1279, i16** %6, align 8
  %1292 = ptrtoint i16* %1279 to i64
  br label %1293

1293:                                             ; preds = %1284, %1291, %1281
  %1294 = phi i64 [ %1292, %1291 ], [ %1277, %1281 ], [ %1277, %1284 ]
  %1295 = phi i16* [ %1279, %1291 ], [ %1273, %1281 ], [ %1273, %1284 ]
  %1296 = icmp eq i16* %1295, %12
  br i1 %1296, label %1301, label %1309

1297:                                             ; preds = %1276
  %1298 = ptrtoint i16* %1273 to i64
  br label %1301

1299:                                             ; preds = %1275
  %1300 = ptrtoint i16* %1273 to i64
  br label %1301

1301:                                             ; preds = %1293, %1299, %1297
  %1302 = phi i64 [ %1298, %1297 ], [ %1300, %1299 ], [ %1294, %1293 ]
  %1303 = ptrtoint i16* %1 to i64
  %1304 = sub i64 %1302, %1303
  %1305 = lshr exact i64 %1304, 1
  %1306 = trunc i64 %1305 to i32
  store i32 %1306, i32* %4, align 4
  %1307 = icmp eq i8 %89, 0
  %1308 = select i1 %1307, double 0.000000e+00, double -0.000000e+00
  br label %1564

1309:                                             ; preds = %1278, %1293, %1275
  %1310 = phi i16* [ %1273, %1278 ], [ %1295, %1293 ], [ %1273, %1275 ]
  %1311 = add nsw i32 %1272, -1
  %1312 = load i16, i16* %1310, align 2
  %1313 = icmp eq i16 %1312, 48
  br i1 %1313, label %1270, label %1314

1314:                                             ; preds = %1309, %1266
  %1315 = phi i16 [ %1267, %1266 ], [ %1312, %1309 ]
  %1316 = phi i16* [ %1259, %1266 ], [ %1310, %1309 ]
  %1317 = phi i32 [ 0, %1266 ], [ %1311, %1309 ]
  %1318 = add i16 %1315, -48
  %1319 = icmp ult i16 %1318, 10
  br i1 %1319, label %1320, label %1381

1320:                                             ; preds = %1314, %1348
  %1321 = phi i16 [ %1350, %1348 ], [ %1315, %1314 ]
  %1322 = phi i16* [ %1349, %1348 ], [ %1316, %1314 ]
  %1323 = phi i32 [ %1344, %1348 ], [ %1241, %1314 ]
  %1324 = phi i8 [ %1343, %1348 ], [ %1239, %1314 ]
  %1325 = phi i32 [ %1342, %1348 ], [ %1237, %1314 ]
  %1326 = phi i32 [ %1341, %1348 ], [ %1317, %1314 ]
  %1327 = icmp slt i32 %1325, 772
  br i1 %1327, label %1328, label %1335

1328:                                             ; preds = %1320
  %1329 = trunc i16 %1321 to i8
  %1330 = add nsw i32 %1323, 1
  %1331 = sext i32 %1323 to i64
  %1332 = getelementptr inbounds [782 x i8], [782 x i8]* %7, i64 0, i64 %1331
  store i8 %1329, i8* %1332, align 1
  %1333 = add nsw i32 %1325, 1
  %1334 = add nsw i32 %1326, -1
  br label %1340

1335:                                             ; preds = %1320
  %1336 = and i8 %1324, 1
  %1337 = icmp ne i16 %1321, 48
  %1338 = zext i1 %1337 to i8
  %1339 = or i8 %1336, %1338
  br label %1340

1340:                                             ; preds = %1335, %1328
  %1341 = phi i32 [ %1334, %1328 ], [ %1326, %1335 ]
  %1342 = phi i32 [ %1333, %1328 ], [ %1325, %1335 ]
  %1343 = phi i8 [ %1324, %1328 ], [ %1339, %1335 ]
  %1344 = phi i32 [ %1330, %1328 ], [ %1323, %1335 ]
  br i1 %1258, label %1345, label %1353

1345:                                             ; preds = %1340
  %1346 = getelementptr inbounds i16, i16* %1322, i64 1
  store i16* %1346, i16** %6, align 8
  %1347 = icmp eq i16* %1346, %12
  br i1 %1347, label %1501, label %1348

1348:                                             ; preds = %1345, %1378, %1362, %1364
  %1349 = phi i16* [ %1346, %1345 ], [ %1379, %1378 ], [ %1360, %1362 ], [ %1360, %1364 ]
  %1350 = load i16, i16* %1349, align 2
  %1351 = add i16 %1350, -48
  %1352 = icmp ult i16 %1351, 10
  br i1 %1352, label %1320, label %1381

1353:                                             ; preds = %1340
  %1354 = load i16, i16* %1322, align 2
  %1355 = zext i16 %1354 to i32
  %1356 = add nsw i32 %1355, -48
  %1357 = icmp ult i32 %1356, 10
  %1358 = icmp ult i16 %1354, 58
  %1359 = and i1 %1358, %1357
  %1360 = getelementptr inbounds i16, i16* %1322, i64 1
  store i16* %1360, i16** %6, align 8
  %1361 = icmp eq i16* %1360, %12
  br i1 %1359, label %1363, label %1362

1362:                                             ; preds = %1353
  br i1 %1361, label %1501, label %1348

1363:                                             ; preds = %1353
  br i1 %1361, label %1501, label %1364

1364:                                             ; preds = %1363
  %1365 = getelementptr inbounds i16, i16* %1322, i64 2
  %1366 = icmp eq i16* %1365, %12
  br i1 %1366, label %1348, label %1367

1367:                                             ; preds = %1364
  %1368 = load i16, i16* %1360, align 2
  %1369 = icmp eq i16 %1368, %1257
  br i1 %1369, label %1370, label %1378

1370:                                             ; preds = %1367
  %1371 = load i16, i16* %1365, align 2
  %1372 = zext i16 %1371 to i32
  %1373 = add nsw i32 %1372, -48
  %1374 = icmp ult i32 %1373, 10
  %1375 = icmp ult i16 %1371, 58
  %1376 = and i1 %1375, %1374
  br i1 %1376, label %1377, label %1378

1377:                                             ; preds = %1370
  store i16* %1365, i16** %6, align 8
  br label %1378

1378:                                             ; preds = %1370, %1377, %1367
  %1379 = phi i16* [ %1365, %1377 ], [ %1360, %1367 ], [ %1360, %1370 ]
  %1380 = icmp eq i16* %1379, %12
  br i1 %1380, label %1501, label %1348

1381:                                             ; preds = %1348, %1314, %1236
  %1382 = phi i16 [ %1243, %1236 ], [ %1315, %1314 ], [ %1350, %1348 ]
  %1383 = phi i16* [ %1242, %1236 ], [ %1316, %1314 ], [ %1349, %1348 ]
  %1384 = phi i32 [ 0, %1236 ], [ %1317, %1314 ], [ %1341, %1348 ]
  %1385 = phi i32 [ %1237, %1236 ], [ %1237, %1314 ], [ %1342, %1348 ]
  %1386 = phi i8 [ %1239, %1236 ], [ %1239, %1314 ], [ %1343, %1348 ]
  %1387 = phi i32 [ %1241, %1236 ], [ %1241, %1314 ], [ %1344, %1348 ]
  %1388 = xor i1 %1157, true
  %1389 = or i32 %1385, %1384
  %1390 = icmp eq i32 %1389, 0
  %1391 = and i1 %1390, %1388
  br i1 %1391, label %1392, label %1395

1392:                                             ; preds = %1381
  %1393 = getelementptr inbounds %"class.double_conversion::StringToDoubleConverter", %"class.double_conversion::StringToDoubleConverter"* %0, i64 0, i32 3
  %1394 = load double, double* %1393, align 8
  br label %1564

1395:                                             ; preds = %1381
  switch i16 %1382, label %1464 [
    i16 101, label %1396
    i16 69, label %1396
  ]

1396:                                             ; preds = %1395, %1395
  %1397 = icmp ne i8 %1245, 0
  %1398 = xor i1 %1397, true
  %1399 = or i1 %16, %1398
  br i1 %1399, label %1403, label %1400

1400:                                             ; preds = %1396
  %1401 = getelementptr inbounds %"class.double_conversion::StringToDoubleConverter", %"class.double_conversion::StringToDoubleConverter"* %0, i64 0, i32 3
  %1402 = load double, double* %1401, align 8
  br label %1564

1403:                                             ; preds = %1396
  br i1 %1397, label %1506, label %1404

1404:                                             ; preds = %1403
  %1405 = getelementptr inbounds i16, i16* %1383, i64 1
  store i16* %1405, i16** %6, align 8
  %1406 = icmp eq i16* %1405, %12
  br i1 %1406, label %1407, label %1412

1407:                                             ; preds = %1404
  br i1 %16, label %1408, label %1409

1408:                                             ; preds = %1407
  store i16* %1383, i16** %6, align 8
  br label %1501

1409:                                             ; preds = %1407
  %1410 = getelementptr inbounds %"class.double_conversion::StringToDoubleConverter", %"class.double_conversion::StringToDoubleConverter"* %0, i64 0, i32 3
  %1411 = load double, double* %1410, align 8
  br label %1564

1412:                                             ; preds = %1404
  %1413 = load i16, i16* %1405, align 2
  switch i16 %1413, label %1423 [
    i16 43, label %1414
    i16 45, label %1414
  ]

1414:                                             ; preds = %1412, %1412
  %1415 = zext i16 %1413 to i32
  %1416 = getelementptr inbounds i16, i16* %1383, i64 2
  store i16* %1416, i16** %6, align 8
  %1417 = icmp eq i16* %1416, %12
  br i1 %1417, label %1418, label %1423

1418:                                             ; preds = %1414
  br i1 %16, label %1419, label %1420

1419:                                             ; preds = %1418
  store i16* %1383, i16** %6, align 8
  br label %1501

1420:                                             ; preds = %1418
  %1421 = getelementptr inbounds %"class.double_conversion::StringToDoubleConverter", %"class.double_conversion::StringToDoubleConverter"* %0, i64 0, i32 3
  %1422 = load double, double* %1421, align 8
  br label %1564

1423:                                             ; preds = %1412, %1414
  %1424 = phi i16* [ %1416, %1414 ], [ %1405, %1412 ]
  %1425 = phi i32 [ %1415, %1414 ], [ 43, %1412 ]
  %1426 = icmp eq i16* %1424, %12
  br i1 %1426, label %1431, label %1427

1427:                                             ; preds = %1423
  %1428 = load i16, i16* %1424, align 2
  %1429 = add i16 %1428, -48
  %1430 = icmp ugt i16 %1429, 9
  br i1 %1430, label %1431, label %1436

1431:                                             ; preds = %1427, %1423
  br i1 %16, label %1432, label %1433

1432:                                             ; preds = %1431
  store i16* %1383, i16** %6, align 8
  br label %1501

1433:                                             ; preds = %1431
  %1434 = getelementptr inbounds %"class.double_conversion::StringToDoubleConverter", %"class.double_conversion::StringToDoubleConverter"* %0, i64 0, i32 3
  %1435 = load double, double* %1434, align 8
  br label %1564

1436:                                             ; preds = %1427, %1454
  %1437 = phi i16 [ %1455, %1454 ], [ %1428, %1427 ]
  %1438 = phi i16* [ %1452, %1454 ], [ %1424, %1427 ]
  %1439 = phi i32 [ %1451, %1454 ], [ 0, %1427 ]
  %1440 = zext i16 %1437 to i32
  %1441 = add nsw i32 %1440, -48
  %1442 = icmp sgt i32 %1439, 107374181
  br i1 %1442, label %1443, label %1447

1443:                                             ; preds = %1436
  %1444 = icmp eq i32 %1439, 107374182
  %1445 = icmp slt i32 %1441, 4
  %1446 = and i1 %1444, %1445
  br i1 %1446, label %1447, label %1450

1447:                                             ; preds = %1443, %1436
  %1448 = mul nsw i32 %1439, 10
  %1449 = add nsw i32 %1441, %1448
  br label %1450

1450:                                             ; preds = %1443, %1447
  %1451 = phi i32 [ %1449, %1447 ], [ 1073741823, %1443 ]
  %1452 = getelementptr inbounds i16, i16* %1438, i64 1
  store i16* %1452, i16** %6, align 8
  %1453 = icmp eq i16* %1452, %12
  br i1 %1453, label %1458, label %1454

1454:                                             ; preds = %1450
  %1455 = load i16, i16* %1452, align 2
  %1456 = add i16 %1455, -48
  %1457 = icmp ult i16 %1456, 10
  br i1 %1457, label %1436, label %1458

1458:                                             ; preds = %1454, %1450
  %1459 = and i32 %1425, 255
  %1460 = icmp eq i32 %1459, 45
  %1461 = sub nsw i32 0, %1451
  %1462 = select i1 %1460, i32 %1461, i32 %1451
  %1463 = add nsw i32 %1462, %1384
  br label %1464

1464:                                             ; preds = %1458, %1395
  %1465 = phi i16* [ %1452, %1458 ], [ %1383, %1395 ]
  %1466 = phi i32 [ %1463, %1458 ], [ %1384, %1395 ]
  %1467 = and i32 %14, 20
  %1468 = icmp ne i32 %1467, 0
  %1469 = icmp eq i16* %1465, %12
  %1470 = or i1 %1468, %1469
  br i1 %1470, label %1474, label %1471

1471:                                             ; preds = %1464
  %1472 = getelementptr inbounds %"class.double_conversion::StringToDoubleConverter", %"class.double_conversion::StringToDoubleConverter"* %0, i64 0, i32 3
  %1473 = load double, double* %1472, align 8
  br label %1564

1474:                                             ; preds = %1464
  %1475 = or i1 %16, %1469
  %1476 = select i1 %16, i16* %1465, i16* %12
  br i1 %1475, label %1488, label %1477

1477:                                             ; preds = %1474, %1482
  %1478 = phi i16* [ %1483, %1482 ], [ %1465, %1474 ]
  %1479 = load i16, i16* %1478, align 2
  %1480 = zext i16 %1479 to i32
  %1481 = tail call fastcc zeroext i1 @_ZN17double_conversionL12isWhitespaceEi(i32 %1480) #5
  br i1 %1481, label %1482, label %1485

1482:                                             ; preds = %1477
  %1483 = getelementptr inbounds i16, i16* %1478, i64 1
  store i16* %1483, i16** %6, align 8
  %1484 = icmp eq i16* %1483, %12
  br i1 %1484, label %1488, label %1477

1485:                                             ; preds = %1477
  %1486 = getelementptr inbounds %"class.double_conversion::StringToDoubleConverter", %"class.double_conversion::StringToDoubleConverter"* %0, i64 0, i32 3
  %1487 = load double, double* %1486, align 8
  br label %1564

1488:                                             ; preds = %1482, %1474
  %1489 = phi i16* [ %1476, %1474 ], [ %12, %1482 ]
  %1490 = xor i1 %20, true
  %1491 = icmp eq i16* %1489, %12
  %1492 = or i1 %1491, %1490
  br i1 %1492, label %1506, label %1493

1493:                                             ; preds = %1488, %1498
  %1494 = phi i16* [ %1499, %1498 ], [ %1489, %1488 ]
  %1495 = load i16, i16* %1494, align 2
  %1496 = zext i16 %1495 to i32
  %1497 = tail call fastcc zeroext i1 @_ZN17double_conversionL12isWhitespaceEi(i32 %1496) #5
  br i1 %1497, label %1498, label %1506

1498:                                             ; preds = %1493
  %1499 = getelementptr inbounds i16, i16* %1494, i64 1
  store i16* %1499, i16** %6, align 8
  %1500 = icmp eq i16* %1499, %12
  br i1 %1500, label %1506, label %1493

1501:                                             ; preds = %1345, %1378, %1362, %1363, %1262, %1408, %1419, %1432
  %1502 = phi i32 [ %1384, %1432 ], [ %1384, %1419 ], [ %1384, %1408 ], [ 0, %1262 ], [ %1341, %1363 ], [ %1341, %1362 ], [ %1341, %1378 ], [ %1341, %1345 ]
  %1503 = phi i8 [ %1386, %1432 ], [ %1386, %1419 ], [ %1386, %1408 ], [ %1239, %1262 ], [ %1343, %1363 ], [ %1343, %1362 ], [ %1343, %1378 ], [ %1343, %1345 ]
  %1504 = phi i32 [ %1387, %1432 ], [ %1387, %1419 ], [ %1387, %1408 ], [ %1241, %1262 ], [ %1344, %1363 ], [ %1344, %1362 ], [ %1344, %1378 ], [ %1344, %1345 ]
  %1505 = add nsw i32 %1238, %1502
  br label %1532

1506:                                             ; preds = %1218, %1217, %1233, %1200, %1498, %1493, %1488, %1403, %1261
  %1507 = phi i32 [ 0, %1261 ], [ %1384, %1403 ], [ %1466, %1488 ], [ %1466, %1493 ], [ %1466, %1498 ], [ 0, %1200 ], [ 0, %1233 ], [ 0, %1217 ], [ 0, %1218 ]
  %1508 = phi i32 [ %1238, %1261 ], [ %1238, %1403 ], [ %1238, %1488 ], [ %1238, %1493 ], [ %1238, %1498 ], [ %1188, %1200 ], [ %1188, %1233 ], [ %1188, %1217 ], [ %1188, %1218 ]
  %1509 = phi i8 [ %1239, %1261 ], [ %1386, %1403 ], [ %1386, %1488 ], [ %1386, %1493 ], [ %1386, %1498 ], [ %1189, %1200 ], [ %1189, %1233 ], [ %1189, %1217 ], [ %1189, %1218 ]
  %1510 = phi i8 [ %1240, %1261 ], [ %1245, %1403 ], [ %1245, %1488 ], [ %1245, %1493 ], [ %1245, %1498 ], [ %1197, %1200 ], [ %1197, %1233 ], [ %1197, %1217 ], [ %1197, %1218 ]
  %1511 = phi i32 [ %1241, %1261 ], [ %1387, %1403 ], [ %1387, %1488 ], [ %1387, %1493 ], [ %1387, %1498 ], [ %1190, %1200 ], [ %1190, %1233 ], [ %1190, %1217 ], [ %1190, %1218 ]
  %1512 = add nsw i32 %1508, %1507
  %1513 = and i8 %1510, 1
  %1514 = icmp eq i8 %1513, 0
  br i1 %1514, label %1532, label %1515

1515:                                             ; preds = %1254, %1506
  %1516 = phi i32 [ %1511, %1506 ], [ %1241, %1254 ]
  call void @llvm.lifetime.start.p0i8(i64 1, i8* nonnull %8) #5
  store i8 -86, i8* %8, align 1
  %1517 = bitcast i8** %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %1517) #5
  store i8* %1160, i8** %9, align 8
  %1518 = sext i32 %1516 to i64
  %1519 = getelementptr inbounds [782 x i8], [782 x i8]* %7, i64 0, i64 %1518
  %1520 = icmp ne i8 %89, 0
  %1521 = getelementptr inbounds %"class.double_conversion::StringToDoubleConverter", %"class.double_conversion::StringToDoubleConverter"* %0, i64 0, i32 6
  %1522 = load i16, i16* %1521, align 8
  %1523 = getelementptr inbounds %"class.double_conversion::StringToDoubleConverter", %"class.double_conversion::StringToDoubleConverter"* %0, i64 0, i32 3
  %1524 = load double, double* %1523, align 8
  %1525 = call fastcc double @_ZN17double_conversionL17RadixStringToIeeeILi3EPcEEdPT0_S2_btbbdbPb(i8** nonnull %9, i8* %1519, i1 zeroext %1520, i16 zeroext %1522, i1 zeroext %16, double %1524, i1 zeroext %3, i8* nonnull %8)
  %1526 = bitcast i16** %6 to i64*
  %1527 = load i64, i64* %1526, align 8
  %1528 = ptrtoint i16* %1 to i64
  %1529 = sub i64 %1527, %1528
  %1530 = lshr exact i64 %1529, 1
  %1531 = trunc i64 %1530 to i32
  store i32 %1531, i32* %4, align 4
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %1517) #5
  call void @llvm.lifetime.end.p0i8(i64 1, i8* nonnull %8) #5
  br label %1564

1532:                                             ; preds = %1501, %1506
  %1533 = phi i32 [ %1505, %1501 ], [ %1512, %1506 ]
  %1534 = phi i32 [ %1504, %1501 ], [ %1511, %1506 ]
  %1535 = phi i8 [ %1503, %1501 ], [ %1509, %1506 ]
  %1536 = and i8 %1535, 1
  %1537 = icmp eq i8 %1536, 0
  br i1 %1537, label %1543, label %1538

1538:                                             ; preds = %1532
  %1539 = add nsw i32 %1534, 1
  %1540 = sext i32 %1534 to i64
  %1541 = getelementptr inbounds [782 x i8], [782 x i8]* %7, i64 0, i64 %1540
  store i8 49, i8* %1541, align 1
  %1542 = add nsw i32 %1533, -1
  br label %1543

1543:                                             ; preds = %1532, %1538
  %1544 = phi i32 [ %1542, %1538 ], [ %1533, %1532 ]
  %1545 = phi i32 [ %1539, %1538 ], [ %1534, %1532 ]
  %1546 = sext i32 %1545 to i64
  %1547 = getelementptr inbounds [782 x i8], [782 x i8]* %7, i64 0, i64 %1546
  store i8 0, i8* %1547, align 1
  br i1 %3, label %1548, label %1550

1548:                                             ; preds = %1543
  %1549 = call double @_ZN17double_conversion6StrtodENS_6VectorIKcEEi(i8* nonnull %1160, i32 %1545, i32 %1544) #5
  br label %1553

1550:                                             ; preds = %1543
  %1551 = call float @_ZN17double_conversion6StrtofENS_6VectorIKcEEi(i8* nonnull %1160, i32 %1545, i32 %1544) #5
  %1552 = fpext float %1551 to double
  br label %1553

1553:                                             ; preds = %1550, %1548
  %1554 = phi double [ %1549, %1548 ], [ %1552, %1550 ]
  %1555 = bitcast i16** %6 to i64*
  %1556 = load i64, i64* %1555, align 8
  %1557 = ptrtoint i16* %1 to i64
  %1558 = sub i64 %1556, %1557
  %1559 = lshr exact i64 %1558, 1
  %1560 = trunc i64 %1559 to i32
  store i32 %1560, i32* %4, align 4
  %1561 = icmp eq i8 %89, 0
  %1562 = fsub double -0.000000e+00, %1554
  %1563 = select i1 %1561, double %1554, double %1562
  br label %1564

1564:                                             ; preds = %1433, %1420, %1409, %1553, %1515, %1485, %1471, %1400, %1392, %1301, %1263, %1251
  %1565 = phi double [ %1525, %1515 ], [ %1563, %1553 ], [ %1265, %1263 ], [ %1308, %1301 ], [ %1394, %1392 ], [ %1487, %1485 ], [ %1473, %1471 ], [ %1402, %1400 ], [ %1253, %1251 ], [ %1435, %1433 ], [ %1422, %1420 ], [ %1411, %1409 ]
  call void @llvm.lifetime.end.p0i8(i64 782, i8* nonnull %1160) #5
  br label %1566

1566:                                             ; preds = %623, %758, %617, %74, %81, %1098, %122, %131, %144, %147, %190, %199, %212, %215, %533, %1564, %1141, %277, %256, %53, %42, %26
  %1567 = phi double [ %28, %26 ], [ %55, %53 ], [ %49, %42 ], [ %155, %147 ], [ %146, %144 ], [ %133, %131 ], [ %124, %122 ], [ %223, %215 ], [ %214, %212 ], [ %201, %199 ], [ %192, %190 ], [ %263, %256 ], [ %279, %277 ], [ %1148, %1141 ], [ %1565, %1564 ], [ %535, %533 ], [ %1078, %1098 ], [ %76, %74 ], [ %83, %81 ], [ %545, %617 ], [ %545, %758 ], [ %545, %623 ]
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %10) #5
  ret double %1567
}

; Function Attrs: nounwind ssp uwtable
define hidden float @_ZNK17double_conversion23StringToDoubleConverter13StringToFloatEPKciPi(%"class.double_conversion::StringToDoubleConverter"*, i8*, i32, i32*) local_unnamed_addr #0 align 2 {
  %5 = tail call double @_ZNK17double_conversion23StringToDoubleConverter12StringToIeeeIPKcEEdT_ibPi(%"class.double_conversion::StringToDoubleConverter"* %0, i8* %1, i32 %2, i1 zeroext false, i32* %3)
  %6 = fptrunc double %5 to float
  ret float %6
}

; Function Attrs: nounwind ssp uwtable
define hidden float @_ZNK17double_conversion23StringToDoubleConverter13StringToFloatEPKtiPi(%"class.double_conversion::StringToDoubleConverter"*, i16*, i32, i32*) local_unnamed_addr #0 align 2 {
  %5 = tail call double @_ZNK17double_conversion23StringToDoubleConverter12StringToIeeeIPKtEEdT_ibPi(%"class.double_conversion::StringToDoubleConverter"* %0, i16* %1, i32 %2, i1 zeroext false, i32* %3)
  %6 = fptrunc double %5 to float
  ret float %6
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: nounwind ssp uwtable
define internal fastcc double @_ZN17double_conversionL17RadixStringToIeeeILi3EPcEEdPT0_S2_btbbdbPb(i8**, i8*, i1 zeroext, i16 zeroext, i1 zeroext, double, i1 zeroext, i8* nocapture) unnamed_addr #0 {
  store i8 1, i8* %7, align 1
  %9 = load i8*, i8** %0, align 8
  %10 = load i8, i8* %9, align 1
  %11 = icmp eq i8 %10, 48
  br i1 %11, label %12, label %15

12:                                               ; preds = %8
  %13 = zext i16 %3 to i32
  %14 = icmp eq i16 %3, 0
  br label %27

15:                                               ; preds = %51, %8
  %16 = phi i8 [ %10, %8 ], [ %53, %51 ]
  %17 = phi i8* [ %9, %8 ], [ %52, %51 ]
  %18 = sext i8 %16 to i32
  %19 = add nsw i32 %18, -48
  %20 = icmp ult i32 %19, 10
  %21 = icmp slt i32 %19, 8
  %22 = and i1 %20, %21
  br i1 %22, label %23, label %57

23:                                               ; preds = %15
  %24 = select i1 %6, i64 53, i64 24
  %25 = zext i16 %3 to i32
  %26 = icmp eq i16 %3, 0
  br label %74

27:                                               ; preds = %12, %51
  %28 = phi i8* [ %9, %12 ], [ %52, %51 ]
  %29 = getelementptr inbounds i8, i8* %28, i64 1
  store i8* %29, i8** %0, align 8
  %30 = icmp eq i8* %29, %1
  br i1 %14, label %31, label %32

31:                                               ; preds = %27
  br i1 %30, label %55, label %51

32:                                               ; preds = %27
  br i1 %30, label %55, label %33

33:                                               ; preds = %32
  %34 = getelementptr inbounds i8, i8* %28, i64 2
  %35 = icmp eq i8* %34, %1
  br i1 %35, label %51, label %36

36:                                               ; preds = %33
  %37 = load i8, i8* %29, align 1
  %38 = sext i8 %37 to i32
  %39 = icmp eq i32 %38, %13
  br i1 %39, label %40, label %48

40:                                               ; preds = %36
  %41 = load i8, i8* %34, align 1
  %42 = sext i8 %41 to i32
  %43 = add nsw i32 %42, -48
  %44 = icmp ult i32 %43, 10
  %45 = icmp slt i8 %41, 56
  %46 = and i1 %45, %44
  br i1 %46, label %47, label %48

47:                                               ; preds = %40
  store i8* %34, i8** %0, align 8
  br label %48

48:                                               ; preds = %47, %40, %36
  %49 = phi i8* [ %29, %40 ], [ %34, %47 ], [ %29, %36 ]
  %50 = icmp eq i8* %49, %1
  br i1 %50, label %55, label %51

51:                                               ; preds = %31, %48, %33
  %52 = phi i8* [ %29, %31 ], [ %49, %48 ], [ %29, %33 ]
  %53 = load i8, i8* %52, align 1
  %54 = icmp eq i8 %53, 48
  br i1 %54, label %27, label %15

55:                                               ; preds = %32, %48, %31
  store i8 0, i8* %7, align 1
  %56 = select i1 %2, double -0.000000e+00, double 0.000000e+00
  br label %288

57:                                               ; preds = %211, %15
  %58 = phi i8 [ %16, %15 ], [ %213, %211 ]
  %59 = phi i64 [ 0, %15 ], [ %81, %211 ]
  %60 = phi i8* [ %17, %15 ], [ %212, %211 ]
  %61 = icmp eq i8* %60, %1
  %62 = or i1 %61, %4
  br i1 %62, label %219, label %63

63:                                               ; preds = %57
  %64 = sext i8 %58 to i32
  %65 = tail call fastcc zeroext i1 @_ZN17double_conversionL12isWhitespaceEi(i32 %64) #5
  br i1 %65, label %66, label %288

66:                                               ; preds = %63, %70
  %67 = phi i8* [ %68, %70 ], [ %60, %63 ]
  %68 = getelementptr inbounds i8, i8* %67, i64 1
  store i8* %68, i8** %0, align 8
  %69 = icmp eq i8* %68, %1
  br i1 %69, label %219, label %70

70:                                               ; preds = %66
  %71 = load i8, i8* %68, align 1
  %72 = sext i8 %71 to i32
  %73 = tail call fastcc zeroext i1 @_ZN17double_conversionL12isWhitespaceEi(i32 %72) #5
  br i1 %73, label %66, label %288

74:                                               ; preds = %23, %211
  %75 = phi i32 [ %19, %23 ], [ %215, %211 ]
  %76 = phi i8 [ %16, %23 ], [ %213, %211 ]
  %77 = phi i8* [ %17, %23 ], [ %212, %211 ]
  %78 = phi i64 [ 0, %23 ], [ %81, %211 ]
  %79 = shl nsw i64 %78, 3
  %80 = sext i32 %75 to i64
  %81 = add nsw i64 %79, %80
  %82 = ashr i64 %81, %24
  %83 = trunc i64 %82 to i32
  %84 = icmp eq i32 %83, 0
  br i1 %84, label %181, label %85

85:                                               ; preds = %74
  %86 = trunc i64 %82 to i32
  %87 = icmp sgt i32 %86, 1
  br i1 %87, label %88, label %94

88:                                               ; preds = %85, %88
  %89 = phi i32 [ %91, %88 ], [ 1, %85 ]
  %90 = phi i32 [ %92, %88 ], [ %86, %85 ]
  %91 = add nuw nsw i32 %89, 1
  %92 = lshr i32 %90, 1
  %93 = icmp ugt i32 %90, 3
  br i1 %93, label %88, label %94

94:                                               ; preds = %88, %85
  %95 = phi i32 [ 1, %85 ], [ %91, %88 ]
  %96 = shl nsw i32 -1, %95
  %97 = xor i32 %96, -1
  %98 = trunc i64 %81 to i32
  %99 = and i32 %97, %98
  %100 = zext i32 %95 to i64
  %101 = ashr i64 %81, %100
  br label %102

102:                                              ; preds = %149, %94
  %103 = phi i8 [ %76, %94 ], [ %143, %149 ]
  %104 = phi i8* [ %77, %94 ], [ %142, %149 ]
  %105 = phi i32 [ %95, %94 ], [ %154, %149 ]
  %106 = phi i8 [ 1, %94 ], [ %153, %149 ]
  br i1 %26, label %107, label %110

107:                                              ; preds = %102
  %108 = getelementptr inbounds i8, i8* %104, i64 1
  store i8* %108, i8** %0, align 8
  %109 = icmp eq i8* %108, %1
  br i1 %109, label %155, label %141

110:                                              ; preds = %102
  %111 = sext i8 %103 to i32
  %112 = add nsw i32 %111, -48
  %113 = icmp ugt i32 %112, 9
  %114 = icmp sgt i8 %103, 55
  %115 = getelementptr inbounds i8, i8* %104, i64 1
  store i8* %115, i8** %0, align 8
  %116 = icmp eq i8* %115, %1
  %117 = or i1 %114, %113
  %118 = or i1 %116, %117
  br i1 %118, label %137, label %119

119:                                              ; preds = %110
  %120 = getelementptr inbounds i8, i8* %104, i64 2
  %121 = icmp eq i8* %120, %1
  br i1 %121, label %141, label %122

122:                                              ; preds = %119
  %123 = load i8, i8* %115, align 1
  %124 = sext i8 %123 to i32
  %125 = icmp eq i32 %124, %25
  br i1 %125, label %126, label %134

126:                                              ; preds = %122
  %127 = load i8, i8* %120, align 1
  %128 = sext i8 %127 to i32
  %129 = add nsw i32 %128, -48
  %130 = icmp ult i32 %129, 10
  %131 = icmp slt i8 %127, 56
  %132 = and i1 %131, %130
  br i1 %132, label %133, label %134

133:                                              ; preds = %126
  store i8* %120, i8** %0, align 8
  br label %134

134:                                              ; preds = %133, %126, %122
  %135 = phi i8* [ %115, %126 ], [ %120, %133 ], [ %115, %122 ]
  %136 = icmp eq i8* %135, %1
  br i1 %136, label %155, label %141

137:                                              ; preds = %110
  %138 = or i1 %114, %113
  %139 = xor i1 %138, true
  %140 = or i1 %116, %139
  br i1 %140, label %155, label %141

141:                                              ; preds = %119, %134, %107, %137
  %142 = phi i8* [ %115, %119 ], [ %135, %134 ], [ %108, %107 ], [ %115, %137 ]
  %143 = load i8, i8* %142, align 1
  %144 = sext i8 %143 to i32
  %145 = add nsw i32 %144, -48
  %146 = icmp ult i32 %145, 10
  %147 = icmp slt i8 %143, 56
  %148 = and i1 %147, %146
  br i1 %148, label %149, label %155

149:                                              ; preds = %141
  %150 = icmp ne i8 %106, 0
  %151 = icmp eq i8 %143, 48
  %152 = and i1 %150, %151
  %153 = zext i1 %152 to i8
  %154 = add nuw nsw i32 %105, 3
  br label %102

155:                                              ; preds = %141, %134, %107, %137
  %156 = phi i8* [ %142, %141 ], [ %1, %134 ], [ %1, %107 ], [ %115, %137 ]
  %157 = icmp eq i8* %156, %1
  %158 = or i1 %157, %4
  br i1 %158, label %167, label %159

159:                                              ; preds = %155, %164
  %160 = phi i8* [ %165, %164 ], [ %156, %155 ]
  %161 = load i8, i8* %160, align 1
  %162 = sext i8 %161 to i32
  %163 = tail call fastcc zeroext i1 @_ZN17double_conversionL12isWhitespaceEi(i32 %162) #5
  br i1 %163, label %164, label %288

164:                                              ; preds = %159
  %165 = getelementptr inbounds i8, i8* %160, i64 1
  store i8* %165, i8** %0, align 8
  %166 = icmp eq i8* %165, %1
  br i1 %166, label %167, label %159

167:                                              ; preds = %164, %155
  %168 = add nsw i32 %95, -1
  %169 = shl i32 1, %168
  %170 = icmp sgt i32 %99, %169
  br i1 %170, label %171, label %173

171:                                              ; preds = %167
  %172 = add nsw i64 %101, 1
  br label %222

173:                                              ; preds = %167
  %174 = icmp eq i32 %99, %169
  br i1 %174, label %175, label %222

175:                                              ; preds = %173
  %176 = and i64 %101, 1
  %177 = xor i8 %106, 1
  %178 = zext i8 %177 to i64
  %179 = or i64 %176, %178
  %180 = add nsw i64 %179, %101
  br label %222

181:                                              ; preds = %74
  br i1 %26, label %182, label %185

182:                                              ; preds = %181
  %183 = getelementptr inbounds i8, i8* %77, i64 1
  store i8* %183, i8** %0, align 8
  %184 = icmp eq i8* %183, %1
  br i1 %184, label %219, label %211

185:                                              ; preds = %181
  %186 = icmp sgt i8 %76, 55
  %187 = getelementptr inbounds i8, i8* %77, i64 1
  store i8* %187, i8** %0, align 8
  %188 = icmp eq i8* %187, %1
  %189 = or i1 %188, %186
  br i1 %189, label %208, label %190

190:                                              ; preds = %185
  %191 = getelementptr inbounds i8, i8* %77, i64 2
  %192 = icmp eq i8* %191, %1
  br i1 %192, label %211, label %193

193:                                              ; preds = %190
  %194 = load i8, i8* %187, align 1
  %195 = sext i8 %194 to i32
  %196 = icmp eq i32 %195, %25
  br i1 %196, label %197, label %205

197:                                              ; preds = %193
  %198 = load i8, i8* %191, align 1
  %199 = sext i8 %198 to i32
  %200 = add nsw i32 %199, -48
  %201 = icmp ult i32 %200, 10
  %202 = icmp slt i8 %198, 56
  %203 = and i1 %202, %201
  br i1 %203, label %204, label %205

204:                                              ; preds = %197
  store i8* %191, i8** %0, align 8
  br label %205

205:                                              ; preds = %204, %197, %193
  %206 = phi i8* [ %187, %197 ], [ %191, %204 ], [ %187, %193 ]
  %207 = icmp eq i8* %206, %1
  br i1 %207, label %219, label %211

208:                                              ; preds = %185
  %209 = xor i1 %186, true
  %210 = or i1 %188, %209
  br i1 %210, label %219, label %211

211:                                              ; preds = %190, %208, %182, %205
  %212 = phi i8* [ %187, %190 ], [ %187, %208 ], [ %183, %182 ], [ %206, %205 ]
  %213 = load i8, i8* %212, align 1
  %214 = sext i8 %213 to i32
  %215 = add nsw i32 %214, -48
  %216 = icmp ult i32 %215, 10
  %217 = icmp slt i32 %215, 8
  %218 = and i1 %216, %217
  br i1 %218, label %74, label %57

219:                                              ; preds = %205, %182, %208, %66, %57
  %220 = phi i64 [ %59, %57 ], [ %59, %66 ], [ %81, %208 ], [ %81, %182 ], [ %81, %205 ]
  store i8 0, i8* %7, align 1
  %221 = icmp eq i64 %220, 0
  br label %234

222:                                              ; preds = %171, %173, %175
  %223 = phi i64 [ %172, %171 ], [ %101, %173 ], [ %180, %175 ]
  %224 = shl i64 1, %24
  %225 = and i64 %223, %224
  %226 = icmp ne i64 %225, 0
  %227 = zext i1 %226 to i32
  %228 = add nuw nsw i32 %105, %227
  %229 = zext i1 %226 to i64
  %230 = ashr i64 %223, %229
  store i8 0, i8* %7, align 1
  %231 = icmp eq i32 %228, 0
  %232 = icmp eq i64 %230, 0
  %233 = or i1 %231, %232
  br i1 %233, label %234, label %243

234:                                              ; preds = %219, %222
  %235 = phi i1 [ %221, %219 ], [ %232, %222 ]
  %236 = phi i64 [ %220, %219 ], [ %230, %222 ]
  br i1 %2, label %237, label %240

237:                                              ; preds = %234
  br i1 %235, label %288, label %238

238:                                              ; preds = %237
  %239 = sub nsw i64 0, %236
  br label %240

240:                                              ; preds = %238, %234
  %241 = phi i64 [ %239, %238 ], [ %236, %234 ]
  %242 = sitofp i64 %241 to double
  br label %288

243:                                              ; preds = %222
  %244 = icmp ugt i64 %230, 9007199254740991
  br i1 %244, label %245, label %251

245:                                              ; preds = %243, %245
  %246 = phi i32 [ %249, %245 ], [ %228, %243 ]
  %247 = phi i64 [ %248, %245 ], [ %230, %243 ]
  %248 = lshr i64 %247, 1
  %249 = add nsw i32 %246, 1
  %250 = icmp ugt i64 %247, 18014398509481983
  br i1 %250, label %245, label %251

251:                                              ; preds = %245, %243
  %252 = phi i64 [ %230, %243 ], [ %248, %245 ]
  %253 = phi i32 [ %228, %243 ], [ %249, %245 ]
  %254 = icmp sgt i32 %253, 971
  br i1 %254, label %284, label %255

255:                                              ; preds = %251
  %256 = icmp slt i32 %253, -1074
  br i1 %256, label %284, label %257

257:                                              ; preds = %255
  %258 = icmp ne i32 %253, -1074
  %259 = and i64 %252, 4503599627370496
  %260 = icmp eq i64 %259, 0
  %261 = and i1 %258, %260
  br i1 %261, label %262, label %271

262:                                              ; preds = %257, %262
  %263 = phi i32 [ %266, %262 ], [ %253, %257 ]
  %264 = phi i64 [ %265, %262 ], [ %252, %257 ]
  %265 = shl i64 %264, 1
  %266 = add nsw i32 %263, -1
  %267 = icmp sgt i32 %266, -1074
  %268 = and i64 %264, 2251799813685248
  %269 = icmp eq i64 %268, 0
  %270 = and i1 %267, %269
  br i1 %270, label %262, label %271

271:                                              ; preds = %262, %257
  %272 = phi i64 [ %252, %257 ], [ %265, %262 ]
  %273 = phi i32 [ %253, %257 ], [ %266, %262 ]
  %274 = phi i1 [ %260, %257 ], [ %269, %262 ]
  %275 = icmp eq i32 %273, -1074
  %276 = and i1 %275, %274
  %277 = add nsw i32 %273, 1075
  %278 = zext i32 %277 to i64
  %279 = shl i64 %278, 52
  %280 = select i1 %276, i64 0, i64 %279
  %281 = and i64 %272, 4503599627370495
  %282 = or i64 %280, %281
  %283 = bitcast i64 %282 to double
  br label %284

284:                                              ; preds = %251, %255, %271
  %285 = phi double [ %283, %271 ], [ 0x7FF0000000000000, %251 ], [ 0.000000e+00, %255 ]
  %286 = fsub double -0.000000e+00, %285
  %287 = select i1 %2, double %286, double %285
  br label %288

288:                                              ; preds = %159, %70, %63, %237, %284, %240, %55
  %289 = phi double [ %56, %55 ], [ %242, %240 ], [ %287, %284 ], [ -0.000000e+00, %237 ], [ %5, %63 ], [ %5, %70 ], [ %5, %159 ]
  ret double %289
}

declare double @_ZN17double_conversion6StrtodENS_6VectorIKcEEi(i8*, i32, i32) local_unnamed_addr #2

declare float @_ZN17double_conversion6StrtofENS_6VectorIKcEEi(i8*, i32, i32) local_unnamed_addr #2

; Function Attrs: norecurse nounwind readnone ssp uwtable
define internal fastcc zeroext i1 @_ZN17double_conversionL12isWhitespaceEi(i32) unnamed_addr #3 {
  %2 = icmp slt i32 %0, 128
  br i1 %2, label %4, label %3

3:                                                ; preds = %1
  switch i32 %0, label %14 [
    i32 160, label %12
    i32 8232, label %12
    i32 8233, label %12
    i32 5760, label %12
    i32 6158, label %12
    i32 8192, label %12
    i32 8193, label %12
    i32 8194, label %12
    i32 8195, label %12
    i32 8196, label %12
    i32 8197, label %12
    i32 8198, label %12
    i32 8199, label %12
    i32 8200, label %12
    i32 8201, label %12
    i32 8202, label %12
    i32 8239, label %12
    i32 8287, label %12
    i32 12288, label %12
    i32 65279, label %12
  ]

4:                                                ; preds = %1
  %5 = add i32 %0, -9
  %6 = icmp ult i32 %5, 24
  br i1 %6, label %7, label %12

7:                                                ; preds = %4
  %8 = trunc i32 %5 to i24
  %9 = lshr i24 -8388577, %8
  %10 = and i24 %9, 1
  %11 = icmp ne i24 %10, 0
  ret i1 %11

12:                                               ; preds = %4, %3, %3, %3, %3, %3, %3, %3, %3, %3, %3, %3, %3, %3, %3, %3, %3, %3, %3, %3, %3, %14
  %13 = phi i1 [ true, %3 ], [ false, %14 ], [ true, %3 ], [ true, %3 ], [ true, %3 ], [ true, %3 ], [ true, %3 ], [ true, %3 ], [ true, %3 ], [ true, %3 ], [ true, %3 ], [ true, %3 ], [ true, %3 ], [ true, %3 ], [ true, %3 ], [ true, %3 ], [ true, %3 ], [ true, %3 ], [ true, %3 ], [ true, %3 ], [ true, %3 ], [ false, %4 ]
  ret i1 %13

14:                                               ; preds = %3
  br label %12
}

; Function Attrs: nofree nounwind
declare i32 @__cxa_guard_acquire(i64*) local_unnamed_addr #4

declare dereferenceable(8) %"class.std::__1::locale"* @_ZNSt3__16locale7classicEv() local_unnamed_addr #2

; Function Attrs: nofree nounwind
declare void @__cxa_guard_release(i64*) local_unnamed_addr #4

declare %"class.std::__1::locale::facet"* @_ZNKSt3__16locale9use_facetERNS0_2idE(%"class.std::__1::locale"*, %"class.std::__1::locale::id"* dereferenceable(16)) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define internal fastcc zeroext i1 @_ZN17double_conversion12_GLOBAL__N_116ConsumeSubStringIPKtEEbPT_S4_PKcb(i16** nocapture, i16* readnone, i8* nocapture readonly, i1 zeroext) unnamed_addr #0 {
  br i1 %3, label %7, label %5

5:                                                ; preds = %4
  %6 = load i16*, i16** %0, align 8
  br label %36

7:                                                ; preds = %4, %27
  %8 = phi i8* [ %9, %27 ], [ %2, %4 ]
  %9 = getelementptr inbounds i8, i8* %8, i64 1
  %10 = load i8, i8* %9, align 1
  %11 = icmp eq i8 %10, 0
  %12 = load i16*, i16** %0, align 8
  %13 = getelementptr inbounds i16, i16* %12, i64 1
  store i16* %13, i16** %0, align 8
  br i1 %11, label %50, label %14

14:                                               ; preds = %7
  %15 = icmp eq i16* %13, %1
  br i1 %15, label %50, label %16

16:                                               ; preds = %14
  %17 = load i16, i16* %13, align 2
  %18 = trunc i16 %17 to i8
  %19 = load atomic i8, i8* bitcast (i64* @_ZGVZN17double_conversion12_GLOBAL__N_17ToLowerEcE5cType to i8*) acquire, align 8
  %20 = icmp eq i8 %19, 0
  br i1 %20, label %21, label %27, !prof !2

21:                                               ; preds = %16
  %22 = tail call i32 @__cxa_guard_acquire(i64* nonnull @_ZGVZN17double_conversion12_GLOBAL__N_17ToLowerEcE5cType) #5
  %23 = icmp eq i32 %22, 0
  br i1 %23, label %27, label %24

24:                                               ; preds = %21
  %25 = tail call dereferenceable(8) %"class.std::__1::locale"* @_ZNSt3__16locale7classicEv() #5
  %26 = tail call %"class.std::__1::locale::facet"* @_ZNKSt3__16locale9use_facetERNS0_2idE(%"class.std::__1::locale"* %25, %"class.std::__1::locale::id"* nonnull dereferenceable(16) @_ZNSt3__15ctypeIcE2idE) #5
  store %"class.std::__1::locale::facet"* %26, %"class.std::__1::locale::facet"** bitcast (%"class.std::__1::ctype"** @_ZZN17double_conversion12_GLOBAL__N_17ToLowerEcE5cType to %"class.std::__1::locale::facet"**), align 8
  tail call void @__cxa_guard_release(i64* nonnull @_ZGVZN17double_conversion12_GLOBAL__N_17ToLowerEcE5cType) #5
  br label %27

27:                                               ; preds = %16, %21, %24
  %28 = load %"class.std::__1::ctype"*, %"class.std::__1::ctype"** @_ZZN17double_conversion12_GLOBAL__N_17ToLowerEcE5cType, align 8
  %29 = bitcast %"class.std::__1::ctype"* %28 to i8 (%"class.std::__1::ctype"*, i8)***
  %30 = load i8 (%"class.std::__1::ctype"*, i8)**, i8 (%"class.std::__1::ctype"*, i8)*** %29, align 8
  %31 = getelementptr inbounds i8 (%"class.std::__1::ctype"*, i8)*, i8 (%"class.std::__1::ctype"*, i8)** %30, i64 5
  %32 = load i8 (%"class.std::__1::ctype"*, i8)*, i8 (%"class.std::__1::ctype"*, i8)** %31, align 8
  %33 = tail call signext i8 %32(%"class.std::__1::ctype"* %28, i8 signext %18) #5
  %34 = load i8, i8* %9, align 1
  %35 = icmp eq i8 %33, %34
  br i1 %35, label %7, label %50

36:                                               ; preds = %5, %45
  %37 = phi i16* [ %42, %45 ], [ %6, %5 ]
  %38 = phi i8* [ %39, %45 ], [ %2, %5 ]
  %39 = getelementptr inbounds i8, i8* %38, i64 1
  %40 = load i8, i8* %39, align 1
  %41 = icmp eq i8 %40, 0
  %42 = getelementptr inbounds i16, i16* %37, i64 1
  store i16* %42, i16** %0, align 8
  br i1 %41, label %50, label %43

43:                                               ; preds = %36
  %44 = icmp eq i16* %42, %1
  br i1 %44, label %50, label %45

45:                                               ; preds = %43
  %46 = load i16, i16* %42, align 2
  %47 = trunc i16 %46 to i8
  %48 = load i8, i8* %39, align 1
  %49 = icmp eq i8 %48, %47
  br i1 %49, label %36, label %50

50:                                               ; preds = %45, %43, %36, %27, %14, %7
  %51 = phi i1 [ true, %7 ], [ false, %14 ], [ false, %27 ], [ true, %36 ], [ false, %43 ], [ false, %45 ]
  ret i1 %51
}

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { norecurse nounwind readnone ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nofree nounwind }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{!"branch_weights", i32 1, i32 1048575}
