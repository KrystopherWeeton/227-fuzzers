; ModuleID = '../../third_party/libzip/src/lib/zip_source_buffer.c'
source_filename = "../../third_party/libzip/src/lib/zip_source_buffer.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.zip_source = type { %struct.zip_source*, %union.anon, i8*, %struct.zip_error, i64, i32, i32, i8, %struct.zip*, i32, i8, i8 }
%union.anon = type { i64 (i8*, i8*, i64, i32)* }
%struct.zip_error = type { i32, i32, i8* }
%struct.zip = type { %struct.zip_source*, i32, %struct.zip_error, i32, i32, i8*, %struct.zip_string*, %struct.zip_string*, i8, i64, i64, %struct.zip_entry*, i32, i32, %struct.zip_source**, %struct.zip_hash*, %struct.zip_progress* }
%struct.zip_string = type { i8*, i16, i32, i8*, i32 }
%struct.zip_entry = type { %struct.zip_dirent*, %struct.zip_dirent*, %struct.zip_source*, i8 }
%struct.zip_dirent = type { i32, i8, i8, i8, i16, i16, i16, i32, i64, i32, i64, i64, %struct.zip_string*, %struct.zip_extra_field*, %struct.zip_string*, i32, i16, i32, i64, i16, i16, i8* }
%struct.zip_extra_field = type { %struct.zip_extra_field*, i32, i16, i16, i8* }
%struct.zip_hash = type opaque
%struct.zip_progress = type opaque
%struct.zip_buffer_fragment = type { i8*, i64 }
%struct.zip_file_attributes = type { i64, i8, i8, i8, i8, i32, i16, i16 }
%struct.buffer = type { %struct.zip_buffer_fragment*, i64*, i64, i64, i64, i64, %struct.buffer*, i64, i64, i64 }
%struct.zip_stat = type { i64, i8*, i64, i64, i64, i64, i32, i16, i16, i32 }

; Function Attrs: nounwind ssp uwtable
define hidden %struct.zip_source* @zip_source_buffer(%struct.zip*, i8*, i64, i32) local_unnamed_addr #0 {
  %5 = alloca %struct.zip_buffer_fragment, align 8
  %6 = icmp eq %struct.zip* %0, null
  br i1 %6, label %22, label %7

7:                                                ; preds = %4
  %8 = getelementptr inbounds %struct.zip, %struct.zip* %0, i64 0, i32 2
  %9 = bitcast %struct.zip_buffer_fragment* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %9) #5
  %10 = icmp eq i8* %1, null
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %9, i8 -86, i64 16, i1 false) #5
  br i1 %10, label %11, label %16

11:                                               ; preds = %7
  %12 = icmp eq i64 %2, 0
  br i1 %12, label %14, label %13

13:                                               ; preds = %11
  tail call void @zip_error_set(%struct.zip_error* %8, i32 18, i32 0) #5
  br label %20

14:                                               ; preds = %11
  %15 = tail call %struct.zip_source* @zip_source_buffer_fragment_with_attributes_create(%struct.zip_buffer_fragment* null, i64 0, i32 %3, %struct.zip_file_attributes* null, %struct.zip_error* %8) #5
  br label %20

16:                                               ; preds = %7
  %17 = getelementptr inbounds %struct.zip_buffer_fragment, %struct.zip_buffer_fragment* %5, i64 0, i32 0
  %18 = getelementptr inbounds %struct.zip_buffer_fragment, %struct.zip_buffer_fragment* %5, i64 0, i32 1
  store i8* %1, i8** %17, align 8
  store i64 %2, i64* %18, align 8
  %19 = call %struct.zip_source* @zip_source_buffer_fragment_with_attributes_create(%struct.zip_buffer_fragment* nonnull %5, i64 1, i32 %3, %struct.zip_file_attributes* null, %struct.zip_error* %8) #5
  br label %20

20:                                               ; preds = %13, %14, %16
  %21 = phi %struct.zip_source* [ null, %13 ], [ %15, %14 ], [ %19, %16 ]
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %9) #5
  br label %22

22:                                               ; preds = %4, %20
  %23 = phi %struct.zip_source* [ %21, %20 ], [ null, %4 ]
  ret %struct.zip_source* %23
}

; Function Attrs: nounwind ssp uwtable
define hidden %struct.zip_source* @zip_source_buffer_with_attributes_create(i8*, i64, i32, %struct.zip_file_attributes* readonly, %struct.zip_error*) local_unnamed_addr #0 {
  %6 = alloca %struct.zip_buffer_fragment, align 8
  %7 = bitcast %struct.zip_buffer_fragment* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %7) #5
  %8 = icmp eq i8* %0, null
  %9 = bitcast %struct.zip_buffer_fragment* %6 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %9, i8 -86, i64 16, i1 false)
  br i1 %8, label %10, label %15

10:                                               ; preds = %5
  %11 = icmp eq i64 %1, 0
  br i1 %11, label %13, label %12

12:                                               ; preds = %10
  tail call void @zip_error_set(%struct.zip_error* %4, i32 18, i32 0) #5
  br label %19

13:                                               ; preds = %10
  %14 = tail call %struct.zip_source* @zip_source_buffer_fragment_with_attributes_create(%struct.zip_buffer_fragment* null, i64 0, i32 %2, %struct.zip_file_attributes* %3, %struct.zip_error* %4)
  br label %19

15:                                               ; preds = %5
  %16 = getelementptr inbounds %struct.zip_buffer_fragment, %struct.zip_buffer_fragment* %6, i64 0, i32 0
  %17 = getelementptr inbounds %struct.zip_buffer_fragment, %struct.zip_buffer_fragment* %6, i64 0, i32 1
  store i8* %0, i8** %16, align 8
  store i64 %1, i64* %17, align 8
  %18 = call %struct.zip_source* @zip_source_buffer_fragment_with_attributes_create(%struct.zip_buffer_fragment* nonnull %6, i64 1, i32 %2, %struct.zip_file_attributes* %3, %struct.zip_error* %4)
  br label %19

19:                                               ; preds = %15, %13, %12
  %20 = phi %struct.zip_source* [ null, %12 ], [ %14, %13 ], [ %18, %15 ]
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %7) #5
  ret %struct.zip_source* %20
}

; Function Attrs: nounwind ssp uwtable
define hidden %struct.zip_source* @zip_source_buffer_create(i8*, i64, i32, %struct.zip_error*) local_unnamed_addr #0 {
  %5 = alloca %struct.zip_buffer_fragment, align 8
  %6 = bitcast %struct.zip_buffer_fragment* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %6) #5
  %7 = icmp eq i8* %0, null
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %6, i8 -86, i64 16, i1 false) #5
  br i1 %7, label %8, label %13

8:                                                ; preds = %4
  %9 = icmp eq i64 %1, 0
  br i1 %9, label %11, label %10

10:                                               ; preds = %8
  tail call void @zip_error_set(%struct.zip_error* %3, i32 18, i32 0) #5
  br label %17

11:                                               ; preds = %8
  %12 = tail call %struct.zip_source* @zip_source_buffer_fragment_with_attributes_create(%struct.zip_buffer_fragment* null, i64 0, i32 %2, %struct.zip_file_attributes* null, %struct.zip_error* %3) #5
  br label %17

13:                                               ; preds = %4
  %14 = getelementptr inbounds %struct.zip_buffer_fragment, %struct.zip_buffer_fragment* %5, i64 0, i32 0
  %15 = getelementptr inbounds %struct.zip_buffer_fragment, %struct.zip_buffer_fragment* %5, i64 0, i32 1
  store i8* %0, i8** %14, align 8
  store i64 %1, i64* %15, align 8
  %16 = call %struct.zip_source* @zip_source_buffer_fragment_with_attributes_create(%struct.zip_buffer_fragment* nonnull %5, i64 1, i32 %2, %struct.zip_file_attributes* null, %struct.zip_error* %3) #5
  br label %17

17:                                               ; preds = %10, %11, %13
  %18 = phi %struct.zip_source* [ null, %10 ], [ %12, %11 ], [ %16, %13 ]
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %6) #5
  ret %struct.zip_source* %18
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

declare void @zip_error_set(%struct.zip_error*, i32, i32) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden %struct.zip_source* @zip_source_buffer_fragment_with_attributes_create(%struct.zip_buffer_fragment* readonly, i64, i32, %struct.zip_file_attributes* readonly, %struct.zip_error*) local_unnamed_addr #0 {
  %6 = icmp eq %struct.zip_buffer_fragment* %0, null
  %7 = icmp ne i64 %1, 0
  %8 = and i1 %6, %7
  br i1 %8, label %9, label %10

9:                                                ; preds = %5
  tail call void @zip_error_set(%struct.zip_error* %4, i32 18, i32 0) #5
  br label %37

10:                                               ; preds = %5
  %11 = tail call fastcc %struct.buffer* @buffer_new(%struct.zip_buffer_fragment* %0, i64 %1, i32 %2, %struct.zip_error* %4)
  %12 = icmp eq %struct.buffer* %11, null
  br i1 %12, label %37, label %13

13:                                               ; preds = %10
  %14 = tail call noalias i8* @malloc(i64 64) #5
  %15 = icmp eq i8* %14, null
  br i1 %15, label %16, label %17

16:                                               ; preds = %13
  tail call void @zip_error_set(%struct.zip_error* %4, i32 14, i32 0) #5
  tail call fastcc void @buffer_free(%struct.buffer* nonnull %11)
  br label %37

17:                                               ; preds = %13
  %18 = getelementptr inbounds i8, i8* %14, i64 48
  %19 = bitcast i8* %18 to %struct.buffer**
  store %struct.buffer* %11, %struct.buffer** %19, align 8
  %20 = getelementptr inbounds i8, i8* %14, i64 56
  %21 = bitcast i8* %20 to %struct.buffer**
  store %struct.buffer* null, %struct.buffer** %21, align 8
  %22 = tail call i64 @time(i64* null) #5
  %23 = getelementptr inbounds i8, i8* %14, i64 16
  %24 = bitcast i8* %23 to i64*
  store i64 %22, i64* %24, align 8
  %25 = icmp eq %struct.zip_file_attributes* %3, null
  %26 = getelementptr inbounds i8, i8* %14, i64 24
  br i1 %25, label %29, label %27

27:                                               ; preds = %17
  %28 = bitcast %struct.zip_file_attributes* %3 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %26, i8* nonnull align 8 %28, i64 24, i1 false)
  br label %31

29:                                               ; preds = %17
  %30 = bitcast i8* %26 to %struct.zip_file_attributes*
  tail call void @zip_file_attributes_init(%struct.zip_file_attributes* %30) #5
  br label %31

31:                                               ; preds = %29, %27
  %32 = bitcast i8* %14 to %struct.zip_error*
  tail call void @zip_error_init(%struct.zip_error* nonnull %32) #5
  %33 = tail call %struct.zip_source* @zip_source_function_create(i64 (i8*, i8*, i64, i32)* nonnull @read_data, i8* nonnull %14, %struct.zip_error* %4) #5
  %34 = icmp eq %struct.zip_source* %33, null
  br i1 %34, label %35, label %37

35:                                               ; preds = %31
  %36 = load %struct.buffer*, %struct.buffer** %19, align 8
  tail call fastcc void @buffer_free(%struct.buffer* %36)
  tail call void @free(i8* nonnull %14) #5
  br label %37

37:                                               ; preds = %31, %10, %35, %16, %9
  %38 = phi %struct.zip_source* [ null, %9 ], [ null, %16 ], [ null, %35 ], [ null, %10 ], [ %33, %31 ]
  ret %struct.zip_source* %38
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: nounwind ssp uwtable
define hidden %struct.zip_source* @zip_source_buffer_fragment(%struct.zip*, %struct.zip_buffer_fragment* readonly, i64, i32) local_unnamed_addr #0 {
  %5 = icmp eq %struct.zip* %0, null
  br i1 %5, label %9, label %6

6:                                                ; preds = %4
  %7 = getelementptr inbounds %struct.zip, %struct.zip* %0, i64 0, i32 2
  %8 = tail call %struct.zip_source* @zip_source_buffer_fragment_with_attributes_create(%struct.zip_buffer_fragment* %1, i64 %2, i32 %3, %struct.zip_file_attributes* null, %struct.zip_error* %7)
  br label %9

9:                                                ; preds = %4, %6
  %10 = phi %struct.zip_source* [ %8, %6 ], [ null, %4 ]
  ret %struct.zip_source* %10
}

; Function Attrs: nounwind ssp uwtable
define hidden %struct.zip_source* @zip_source_buffer_fragment_create(%struct.zip_buffer_fragment* readonly, i64, i32, %struct.zip_error*) local_unnamed_addr #0 {
  %5 = tail call %struct.zip_source* @zip_source_buffer_fragment_with_attributes_create(%struct.zip_buffer_fragment* %0, i64 %1, i32 %2, %struct.zip_file_attributes* null, %struct.zip_error* %3)
  ret %struct.zip_source* %5
}

; Function Attrs: nounwind ssp uwtable
define internal fastcc %struct.buffer* @buffer_new(%struct.zip_buffer_fragment* nocapture readonly, i64, i32, %struct.zip_error*) unnamed_addr #0 {
  %5 = tail call noalias i8* @malloc(i64 80) #5
  %6 = bitcast i8* %5 to %struct.buffer*
  %7 = icmp eq i8* %5, null
  br i1 %7, label %75, label %8

8:                                                ; preds = %4
  %9 = getelementptr inbounds i8, i8* %5, i64 32
  %10 = bitcast i8* %9 to i64*
  %11 = getelementptr inbounds i8, i8* %5, i64 56
  %12 = bitcast i8* %11 to i64*
  %13 = bitcast i8* %5 to %struct.zip_buffer_fragment**
  %14 = getelementptr inbounds i8, i8* %5, i64 8
  %15 = bitcast i8* %14 to i64**
  %16 = getelementptr inbounds i8, i8* %5, i64 16
  %17 = bitcast i8* %16 to i64*
  %18 = getelementptr inbounds i8, i8* %5, i64 24
  %19 = bitcast i8* %18 to i64*
  %20 = icmp eq i64 %1, 0
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %5, i8 0, i64 72, i1 false)
  br i1 %20, label %21, label %28

21:                                               ; preds = %8
  %22 = tail call noalias i8* @malloc(i64 8) #5
  %23 = bitcast i8* %14 to i8**
  store i8* %22, i8** %23, align 8
  %24 = icmp eq i8* %22, null
  br i1 %24, label %25, label %26

25:                                               ; preds = %21
  tail call void @free(i8* nonnull %5) #5
  tail call void @zip_error_set(%struct.zip_error* %3, i32 14, i32 0) #5
  br label %75

26:                                               ; preds = %21
  %27 = bitcast i8* %22 to i64*
  store i64 0, i64* %27, align 8
  br label %75

28:                                               ; preds = %8
  %29 = shl i64 %1, 4
  %30 = call i8* @malloc(i64 %29)
  %31 = icmp eq i8* %30, null
  br i1 %31, label %41, label %32

32:                                               ; preds = %28
  %33 = bitcast i8* %5 to i8**
  store i8* %30, i8** %33, align 8
  %34 = bitcast i8* %14 to i8**
  %35 = load i8*, i8** %34, align 8
  %36 = shl i64 %1, 3
  %37 = add i64 %36, 8
  %38 = tail call i8* @realloc(i8* %35, i64 %37) #5
  %39 = icmp eq i8* %38, null
  br i1 %39, label %41, label %40

40:                                               ; preds = %32
  store i8* %38, i8** %34, align 8
  store i64 %1, i64* %19, align 8
  br label %42

41:                                               ; preds = %32, %28
  tail call void @zip_error_set(%struct.zip_error* null, i32 14, i32 0) #5
  tail call void @zip_error_set(%struct.zip_error* %3, i32 14, i32 0) #5
  tail call fastcc void @buffer_free(%struct.buffer* nonnull %6)
  br label %75

42:                                               ; preds = %65, %40
  %43 = phi i64 [ %67, %65 ], [ 0, %40 ]
  %44 = phi i64 [ %66, %65 ], [ 0, %40 ]
  %45 = phi i64 [ %68, %65 ], [ 0, %40 ]
  %46 = getelementptr inbounds %struct.zip_buffer_fragment, %struct.zip_buffer_fragment* %0, i64 %45, i32 1
  %47 = load i64, i64* %46, align 8
  %48 = icmp eq i64 %47, 0
  br i1 %48, label %65, label %49

49:                                               ; preds = %42
  %50 = getelementptr inbounds %struct.zip_buffer_fragment, %struct.zip_buffer_fragment* %0, i64 %45, i32 0
  %51 = load i8*, i8** %50, align 8
  %52 = icmp eq i8* %51, null
  br i1 %52, label %53, label %54

53:                                               ; preds = %49
  tail call void @zip_error_set(%struct.zip_error* %3, i32 18, i32 0) #5
  tail call fastcc void @buffer_free(%struct.buffer* nonnull %6)
  br label %75

54:                                               ; preds = %49
  %55 = load %struct.zip_buffer_fragment*, %struct.zip_buffer_fragment** %13, align 8
  %56 = getelementptr inbounds %struct.zip_buffer_fragment, %struct.zip_buffer_fragment* %55, i64 %44, i32 0
  store i8* %51, i8** %56, align 8
  %57 = load i64, i64* %46, align 8
  %58 = load %struct.zip_buffer_fragment*, %struct.zip_buffer_fragment** %13, align 8
  %59 = getelementptr inbounds %struct.zip_buffer_fragment, %struct.zip_buffer_fragment* %58, i64 %44, i32 1
  store i64 %57, i64* %59, align 8
  %60 = load i64*, i64** %15, align 8
  %61 = getelementptr inbounds i64, i64* %60, i64 %45
  store i64 %43, i64* %61, align 8
  %62 = load i64, i64* %46, align 8
  %63 = add i64 %62, %43
  %64 = add i64 %44, 1
  br label %65

65:                                               ; preds = %42, %54
  %66 = phi i64 [ %44, %42 ], [ %64, %54 ]
  %67 = phi i64 [ %43, %42 ], [ %63, %54 ]
  %68 = add nuw i64 %45, 1
  %69 = icmp eq i64 %68, %1
  br i1 %69, label %70, label %42

70:                                               ; preds = %65
  %71 = load i64*, i64** %15, align 8
  store i64 %66, i64* %17, align 8
  %72 = icmp eq i32 %2, 0
  %73 = select i1 %72, i64 %66, i64 0
  store i64 %73, i64* %10, align 8
  %74 = getelementptr inbounds i64, i64* %71, i64 %66
  store i64 %67, i64* %74, align 8
  store i64 %67, i64* %12, align 8
  br label %75

75:                                               ; preds = %26, %70, %41, %53, %4, %25
  %76 = phi %struct.buffer* [ null, %25 ], [ null, %41 ], [ null, %4 ], [ null, %53 ], [ %6, %70 ], [ %6, %26 ]
  ret %struct.buffer* %76
}

; Function Attrs: nofree nounwind
declare noalias i8* @malloc(i64) local_unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define internal fastcc void @buffer_free(%struct.buffer*) unnamed_addr #0 {
  %2 = icmp eq %struct.buffer* %0, null
  br i1 %2, label %43, label %3

3:                                                ; preds = %1
  %4 = getelementptr inbounds %struct.buffer, %struct.buffer* %0, i64 0, i32 6
  %5 = load %struct.buffer*, %struct.buffer** %4, align 8
  %6 = icmp eq %struct.buffer* %5, null
  br i1 %6, label %7, label %10

7:                                                ; preds = %3
  %8 = getelementptr inbounds %struct.buffer, %struct.buffer* %0, i64 0, i32 4
  %9 = load i64, i64* %8, align 8
  br label %20

10:                                               ; preds = %3
  %11 = getelementptr inbounds %struct.buffer, %struct.buffer* %5, i64 0, i32 6
  store %struct.buffer* null, %struct.buffer** %11, align 8
  %12 = load %struct.buffer*, %struct.buffer** %4, align 8
  %13 = getelementptr inbounds %struct.buffer, %struct.buffer* %12, i64 0, i32 5
  store i64 0, i64* %13, align 8
  %14 = getelementptr inbounds %struct.buffer, %struct.buffer* %0, i64 0, i32 4
  %15 = load i64, i64* %14, align 8
  %16 = getelementptr inbounds %struct.buffer, %struct.buffer* %0, i64 0, i32 5
  %17 = load i64, i64* %16, align 8
  %18 = icmp ugt i64 %15, %17
  %19 = select i1 %18, i64 %15, i64 %17
  store i64 %19, i64* %14, align 8
  br label %20

20:                                               ; preds = %7, %10
  %21 = phi i64 [ %9, %7 ], [ %19, %10 ]
  %22 = getelementptr inbounds %struct.buffer, %struct.buffer* %0, i64 0, i32 2
  %23 = load i64, i64* %22, align 8
  %24 = icmp ult i64 %21, %23
  %25 = getelementptr inbounds %struct.buffer, %struct.buffer* %0, i64 0, i32 0
  %26 = load %struct.zip_buffer_fragment*, %struct.zip_buffer_fragment** %25, align 8
  br i1 %24, label %27, label %36

27:                                               ; preds = %20, %27
  %28 = phi %struct.zip_buffer_fragment* [ %35, %27 ], [ %26, %20 ]
  %29 = phi i64 [ %32, %27 ], [ %21, %20 ]
  %30 = getelementptr inbounds %struct.zip_buffer_fragment, %struct.zip_buffer_fragment* %28, i64 %29, i32 0
  %31 = load i8*, i8** %30, align 8
  tail call void @free(i8* %31) #5
  %32 = add nuw i64 %29, 1
  %33 = load i64, i64* %22, align 8
  %34 = icmp ult i64 %32, %33
  %35 = load %struct.zip_buffer_fragment*, %struct.zip_buffer_fragment** %25, align 8
  br i1 %34, label %27, label %36

36:                                               ; preds = %27, %20
  %37 = phi %struct.zip_buffer_fragment* [ %26, %20 ], [ %35, %27 ]
  %38 = bitcast %struct.zip_buffer_fragment* %37 to i8*
  tail call void @free(i8* %38) #5
  %39 = getelementptr inbounds %struct.buffer, %struct.buffer* %0, i64 0, i32 1
  %40 = bitcast i64** %39 to i8**
  %41 = load i8*, i8** %40, align 8
  tail call void @free(i8* %41) #5
  %42 = bitcast %struct.buffer* %0 to i8*
  tail call void @free(i8* %42) #5
  br label %43

43:                                               ; preds = %1, %36
  ret void
}

; Function Attrs: nounwind
declare i64 @time(i64*) local_unnamed_addr #4

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #1

declare void @zip_file_attributes_init(%struct.zip_file_attributes*) local_unnamed_addr #2

declare void @zip_error_init(%struct.zip_error*) local_unnamed_addr #2

declare %struct.zip_source* @zip_source_function_create(i64 (i8*, i8*, i64, i32)*, i8*, %struct.zip_error*) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define internal i64 @read_data(i8*, i8*, i64, i32) #0 {
  switch i32 %3, label %538 [
    i32 8, label %5
    i32 17, label %23
    i32 2, label %540
    i32 9, label %148
    i32 4, label %157
    i32 5, label %160
    i32 19, label %167
    i32 0, label %173
    i32 1, label %180
    i32 15, label %249
    i32 10, label %265
    i32 6, label %269
    i32 12, label %313
    i32 3, label %357
    i32 14, label %382
    i32 7, label %384
    i32 13, label %393
    i32 11, label %402
  ]

5:                                                ; preds = %4
  %6 = bitcast i8* %0 to %struct.zip_error*
  %7 = tail call noalias i8* @malloc(i64 80) #5
  %8 = icmp eq i8* %7, null
  br i1 %8, label %15, label %9

9:                                                ; preds = %5
  %10 = getelementptr inbounds i8, i8* %7, i64 8
  tail call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %7, i8 0, i64 72, i1 false) #5
  %11 = tail call noalias i8* @malloc(i64 8) #5
  %12 = bitcast i8* %10 to i8**
  store i8* %11, i8** %12, align 8
  %13 = icmp eq i8* %11, null
  br i1 %13, label %14, label %18

14:                                               ; preds = %9
  tail call void @free(i8* nonnull %7) #5
  tail call void @zip_error_set(%struct.zip_error* %6, i32 14, i32 0) #5
  br label %15

15:                                               ; preds = %14, %5
  %16 = getelementptr inbounds i8, i8* %0, i64 56
  %17 = bitcast i8* %16 to %struct.buffer**
  store %struct.buffer* null, %struct.buffer** %17, align 8
  br label %540

18:                                               ; preds = %9
  %19 = bitcast i8* %11 to i64*
  store i64 0, i64* %19, align 8
  %20 = getelementptr inbounds i8, i8* %0, i64 56
  %21 = bitcast i8* %20 to i8**
  store i8* %7, i8** %21, align 8
  %22 = getelementptr inbounds i8, i8* %7, i64 64
  call void @llvm.memset.p0i8.i64(i8* align 8 %22, i8 0, i64 16, i1 false)
  br label %540

23:                                               ; preds = %4
  %24 = getelementptr inbounds i8, i8* %0, i64 48
  %25 = bitcast i8* %24 to %struct.buffer**
  %26 = load %struct.buffer*, %struct.buffer** %25, align 8
  %27 = bitcast i8* %0 to %struct.zip_error*
  %28 = icmp eq i64 %2, 0
  br i1 %28, label %29, label %39

29:                                               ; preds = %23
  %30 = tail call noalias i8* @malloc(i64 80) #5
  %31 = bitcast i8* %30 to %struct.buffer*
  %32 = icmp eq i8* %30, null
  br i1 %32, label %132, label %33

33:                                               ; preds = %29
  %34 = getelementptr inbounds i8, i8* %30, i64 8
  tail call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %30, i8 0, i64 72, i1 false) #5
  %35 = tail call noalias i8* @malloc(i64 8) #5
  %36 = bitcast i8* %34 to i8**
  store i8* %35, i8** %36, align 8
  %37 = icmp eq i8* %35, null
  br i1 %37, label %38, label %135

38:                                               ; preds = %33
  tail call void @free(i8* nonnull %30) #5
  tail call void @zip_error_set(%struct.zip_error* %27, i32 14, i32 0) #5
  br label %132

39:                                               ; preds = %23
  %40 = getelementptr inbounds %struct.buffer, %struct.buffer* %26, i64 0, i32 7
  %41 = load i64, i64* %40, align 8
  %42 = icmp ult i64 %41, %2
  br i1 %42, label %43, label %44

43:                                               ; preds = %39
  tail call void @zip_error_set(%struct.zip_error* %27, i32 18, i32 0) #5
  br label %132

44:                                               ; preds = %39
  %45 = getelementptr inbounds %struct.buffer, %struct.buffer* %26, i64 0, i32 6
  %46 = load %struct.buffer*, %struct.buffer** %45, align 8
  %47 = icmp eq %struct.buffer* %46, null
  br i1 %47, label %49, label %48

48:                                               ; preds = %44
  tail call void @zip_error_set(%struct.zip_error* %27, i32 29, i32 0) #5
  br label %132

49:                                               ; preds = %44
  %50 = getelementptr inbounds %struct.buffer, %struct.buffer* %26, i64 0, i32 2
  %51 = load i64, i64* %50, align 8
  %52 = add i64 %51, -1
  %53 = icmp eq i64 %52, 0
  %54 = getelementptr inbounds %struct.buffer, %struct.buffer* %26, i64 0, i32 1
  %55 = load i64*, i64** %54, align 8
  br i1 %53, label %78, label %56

56:                                               ; preds = %49, %74
  %57 = phi i64 [ %76, %74 ], [ %52, %49 ]
  %58 = phi i64 [ %75, %74 ], [ 0, %49 ]
  %59 = sub i64 %57, %58
  %60 = lshr i64 %59, 1
  %61 = add i64 %60, %58
  %62 = getelementptr inbounds i64, i64* %55, i64 %61
  %63 = load i64, i64* %62, align 8
  %64 = icmp ugt i64 %63, %2
  br i1 %64, label %65, label %67

65:                                               ; preds = %56
  %66 = add i64 %61, -1
  br label %74

67:                                               ; preds = %56
  %68 = icmp eq i64 %61, %51
  br i1 %68, label %78, label %69

69:                                               ; preds = %67
  %70 = add i64 %61, 1
  %71 = getelementptr inbounds i64, i64* %55, i64 %70
  %72 = load i64, i64* %71, align 8
  %73 = icmp ugt i64 %72, %2
  br i1 %73, label %78, label %74

74:                                               ; preds = %69, %65
  %75 = phi i64 [ %58, %65 ], [ %70, %69 ]
  %76 = phi i64 [ %66, %65 ], [ %57, %69 ]
  %77 = icmp ugt i64 %76, %75
  br i1 %77, label %56, label %78

78:                                               ; preds = %74, %69, %67, %49
  %79 = phi i64 [ 0, %49 ], [ %75, %74 ], [ %51, %67 ], [ %61, %69 ]
  %80 = getelementptr inbounds i64, i64* %55, i64 %79
  %81 = load i64, i64* %80, align 8
  %82 = sub i64 %2, %81
  %83 = icmp eq i64 %82, 0
  br i1 %83, label %89, label %84

84:                                               ; preds = %78
  %85 = getelementptr inbounds %struct.buffer, %struct.buffer* %26, i64 0, i32 0
  %86 = load %struct.zip_buffer_fragment*, %struct.zip_buffer_fragment** %85, align 8
  %87 = getelementptr inbounds %struct.zip_buffer_fragment, %struct.zip_buffer_fragment* %86, i64 %79, i32 1
  %88 = load i64, i64* %87, align 8
  br label %95

89:                                               ; preds = %78
  %90 = add i64 %79, -1
  %91 = getelementptr inbounds %struct.buffer, %struct.buffer* %26, i64 0, i32 0
  %92 = load %struct.zip_buffer_fragment*, %struct.zip_buffer_fragment** %91, align 8
  %93 = getelementptr inbounds %struct.zip_buffer_fragment, %struct.zip_buffer_fragment* %92, i64 %90, i32 1
  %94 = load i64, i64* %93, align 8
  br label %95

95:                                               ; preds = %89, %84
  %96 = phi i64 [ %94, %89 ], [ %88, %84 ]
  %97 = phi %struct.zip_buffer_fragment* [ %92, %89 ], [ %86, %84 ]
  %98 = phi i64 [ %90, %89 ], [ %79, %84 ]
  %99 = phi i64 [ %94, %89 ], [ %82, %84 ]
  %100 = sub i64 %96, %99
  %101 = icmp ugt i64 %100, %2
  br i1 %101, label %102, label %103

102:                                              ; preds = %95
  tail call void @zip_error_set(%struct.zip_error* %27, i32 28, i32 0) #5
  br label %132

103:                                              ; preds = %95
  %104 = add i64 %98, 1
  %105 = tail call fastcc %struct.buffer* @buffer_new(%struct.zip_buffer_fragment* %97, i64 %104, i32 0, %struct.zip_error* %27) #5
  %106 = icmp eq %struct.buffer* %105, null
  br i1 %106, label %132, label %107

107:                                              ; preds = %103
  %108 = getelementptr inbounds %struct.buffer, %struct.buffer* %105, i64 0, i32 0
  %109 = load %struct.zip_buffer_fragment*, %struct.zip_buffer_fragment** %108, align 8
  %110 = getelementptr inbounds %struct.buffer, %struct.buffer* %105, i64 0, i32 2
  %111 = load i64, i64* %110, align 8
  %112 = add i64 %111, -1
  %113 = getelementptr inbounds %struct.zip_buffer_fragment, %struct.zip_buffer_fragment* %109, i64 %112, i32 1
  store i64 %99, i64* %113, align 8
  %114 = getelementptr inbounds %struct.buffer, %struct.buffer* %105, i64 0, i32 1
  %115 = load i64*, i64** %114, align 8
  %116 = load i64, i64* %110, align 8
  %117 = getelementptr inbounds i64, i64* %115, i64 %116
  store i64 %2, i64* %117, align 8
  %118 = getelementptr inbounds %struct.buffer, %struct.buffer* %105, i64 0, i32 7
  store i64 %2, i64* %118, align 8
  %119 = getelementptr inbounds %struct.buffer, %struct.buffer* %26, i64 0, i32 4
  %120 = load i64, i64* %119, align 8
  %121 = load i64, i64* %110, align 8
  %122 = add i64 %121, -1
  %123 = icmp ult i64 %120, %122
  %124 = select i1 %123, i64 %120, i64 %122
  %125 = getelementptr inbounds %struct.buffer, %struct.buffer* %105, i64 0, i32 4
  store i64 %124, i64* %125, align 8
  store %struct.buffer* %105, %struct.buffer** %45, align 8
  %126 = getelementptr inbounds %struct.buffer, %struct.buffer* %105, i64 0, i32 6
  store %struct.buffer* %26, %struct.buffer** %126, align 8
  %127 = load i64, i64* %110, align 8
  %128 = getelementptr inbounds %struct.buffer, %struct.buffer* %26, i64 0, i32 5
  store i64 %127, i64* %128, align 8
  %129 = getelementptr inbounds %struct.buffer, %struct.buffer* %105, i64 0, i32 5
  store i64 %104, i64* %129, align 8
  %130 = getelementptr inbounds i8, i8* %0, i64 56
  %131 = bitcast i8* %130 to %struct.buffer**
  store %struct.buffer* %105, %struct.buffer** %131, align 8
  br label %140

132:                                              ; preds = %43, %48, %102, %103, %38, %29
  %133 = getelementptr inbounds i8, i8* %0, i64 56
  %134 = bitcast i8* %133 to %struct.buffer**
  store %struct.buffer* null, %struct.buffer** %134, align 8
  br label %540

135:                                              ; preds = %33
  %136 = bitcast i8* %35 to i64*
  store i64 0, i64* %136, align 8
  %137 = getelementptr inbounds i8, i8* %0, i64 56
  %138 = bitcast i8* %137 to %struct.buffer**
  %139 = bitcast i8* %137 to i8**
  store i8* %30, i8** %139, align 8
  br label %140

140:                                              ; preds = %135, %107
  %141 = phi %struct.buffer** [ %131, %107 ], [ %138, %135 ]
  %142 = phi %struct.buffer* [ %105, %107 ], [ %31, %135 ]
  %143 = getelementptr inbounds %struct.buffer, %struct.buffer* %142, i64 0, i32 8
  store i64 %2, i64* %143, align 8
  %144 = load %struct.buffer*, %struct.buffer** %141, align 8
  %145 = getelementptr inbounds %struct.buffer, %struct.buffer* %144, i64 0, i32 2
  %146 = load i64, i64* %145, align 8
  %147 = getelementptr inbounds %struct.buffer, %struct.buffer* %144, i64 0, i32 9
  store i64 %146, i64* %147, align 8
  br label %540

148:                                              ; preds = %4
  %149 = getelementptr inbounds i8, i8* %0, i64 48
  %150 = bitcast i8* %149 to %struct.buffer**
  %151 = load %struct.buffer*, %struct.buffer** %150, align 8
  tail call fastcc void @buffer_free(%struct.buffer* %151)
  %152 = getelementptr inbounds i8, i8* %0, i64 56
  %153 = bitcast i8* %152 to %struct.buffer**
  %154 = bitcast i8* %152 to i64*
  %155 = load i64, i64* %154, align 8
  %156 = bitcast i8* %149 to i64*
  store i64 %155, i64* %156, align 8
  store %struct.buffer* null, %struct.buffer** %153, align 8
  br label %540

157:                                              ; preds = %4
  %158 = bitcast i8* %0 to %struct.zip_error*
  %159 = tail call i64 @zip_error_to_data(%struct.zip_error* %158, i8* %1, i64 %2) #5
  br label %540

160:                                              ; preds = %4
  %161 = getelementptr inbounds i8, i8* %0, i64 48
  %162 = bitcast i8* %161 to %struct.buffer**
  %163 = load %struct.buffer*, %struct.buffer** %162, align 8
  tail call fastcc void @buffer_free(%struct.buffer* %163)
  %164 = getelementptr inbounds i8, i8* %0, i64 56
  %165 = bitcast i8* %164 to %struct.buffer**
  %166 = load %struct.buffer*, %struct.buffer** %165, align 8
  tail call fastcc void @buffer_free(%struct.buffer* %166)
  tail call void @free(i8* %0) #5
  br label %540

167:                                              ; preds = %4
  %168 = icmp ult i64 %2, 24
  br i1 %168, label %169, label %171

169:                                              ; preds = %167
  %170 = bitcast i8* %0 to %struct.zip_error*
  tail call void @zip_error_set(%struct.zip_error* %170, i32 18, i32 0) #5
  br label %540

171:                                              ; preds = %167
  %172 = getelementptr inbounds i8, i8* %0, i64 24
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %1, i8* align 8 %172, i64 24, i1 false)
  br label %540

173:                                              ; preds = %4
  %174 = getelementptr inbounds i8, i8* %0, i64 48
  %175 = bitcast i8* %174 to %struct.buffer**
  %176 = load %struct.buffer*, %struct.buffer** %175, align 8
  %177 = getelementptr inbounds %struct.buffer, %struct.buffer* %176, i64 0, i32 8
  store i64 0, i64* %177, align 8
  %178 = load %struct.buffer*, %struct.buffer** %175, align 8
  %179 = getelementptr inbounds %struct.buffer, %struct.buffer* %178, i64 0, i32 9
  store i64 0, i64* %179, align 8
  br label %540

180:                                              ; preds = %4
  %181 = icmp slt i64 %2, 0
  br i1 %181, label %182, label %184

182:                                              ; preds = %180
  %183 = bitcast i8* %0 to %struct.zip_error*
  tail call void @zip_error_set(%struct.zip_error* %183, i32 18, i32 0) #5
  br label %540

184:                                              ; preds = %180
  %185 = getelementptr inbounds i8, i8* %0, i64 48
  %186 = bitcast i8* %185 to %struct.buffer**
  %187 = load %struct.buffer*, %struct.buffer** %186, align 8
  %188 = getelementptr inbounds %struct.buffer, %struct.buffer* %187, i64 0, i32 7
  %189 = load i64, i64* %188, align 8
  %190 = getelementptr inbounds %struct.buffer, %struct.buffer* %187, i64 0, i32 8
  %191 = load i64, i64* %190, align 8
  %192 = sub i64 %189, %191
  %193 = icmp ugt i64 %192, %2
  %194 = select i1 %193, i64 %2, i64 %192
  %195 = icmp eq i64 %194, 0
  br i1 %195, label %540, label %196

196:                                              ; preds = %184
  %197 = icmp slt i64 %194, 0
  br i1 %197, label %540, label %198

198:                                              ; preds = %196
  %199 = getelementptr inbounds %struct.buffer, %struct.buffer* %187, i64 0, i32 9
  %200 = load i64, i64* %199, align 8
  %201 = getelementptr inbounds %struct.buffer, %struct.buffer* %187, i64 0, i32 1
  %202 = load i64*, i64** %201, align 8
  %203 = getelementptr inbounds i64, i64* %202, i64 %200
  %204 = load i64, i64* %203, align 8
  %205 = sub i64 %191, %204
  %206 = getelementptr inbounds %struct.buffer, %struct.buffer* %187, i64 0, i32 0
  %207 = load %struct.zip_buffer_fragment*, %struct.zip_buffer_fragment** %206, align 8
  %208 = getelementptr inbounds %struct.zip_buffer_fragment, %struct.zip_buffer_fragment* %207, i64 %200, i32 1
  %209 = load i64, i64* %208, align 8
  %210 = sub i64 %209, %205
  %211 = icmp ult i64 %194, %210
  %212 = select i1 %211, i64 %194, i64 %210
  %213 = getelementptr inbounds %struct.zip_buffer_fragment, %struct.zip_buffer_fragment* %207, i64 %200, i32 0
  %214 = load i8*, i8** %213, align 8
  %215 = getelementptr inbounds i8, i8* %214, i64 %205
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %1, i8* align 1 %215, i64 %212, i1 false) #5
  %216 = load %struct.zip_buffer_fragment*, %struct.zip_buffer_fragment** %206, align 8
  %217 = getelementptr inbounds %struct.zip_buffer_fragment, %struct.zip_buffer_fragment* %216, i64 %200, i32 1
  %218 = load i64, i64* %217, align 8
  %219 = sub i64 %218, %205
  %220 = icmp eq i64 %212, %219
  %221 = zext i1 %220 to i64
  %222 = add i64 %200, %221
  %223 = icmp ugt i64 %194, %210
  br i1 %223, label %224, label %244

224:                                              ; preds = %198, %224
  %225 = phi %struct.zip_buffer_fragment* [ %236, %224 ], [ %216, %198 ]
  %226 = phi i64 [ %241, %224 ], [ %222, %198 ]
  %227 = phi i64 [ %242, %224 ], [ %212, %198 ]
  %228 = sub i64 %194, %227
  %229 = getelementptr inbounds %struct.zip_buffer_fragment, %struct.zip_buffer_fragment* %225, i64 %226, i32 1
  %230 = load i64, i64* %229, align 8
  %231 = icmp ult i64 %228, %230
  %232 = select i1 %231, i64 %228, i64 %230
  %233 = getelementptr inbounds i8, i8* %1, i64 %227
  %234 = getelementptr inbounds %struct.zip_buffer_fragment, %struct.zip_buffer_fragment* %225, i64 %226, i32 0
  %235 = load i8*, i8** %234, align 8
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %233, i8* align 1 %235, i64 %232, i1 false) #5
  %236 = load %struct.zip_buffer_fragment*, %struct.zip_buffer_fragment** %206, align 8
  %237 = getelementptr inbounds %struct.zip_buffer_fragment, %struct.zip_buffer_fragment* %236, i64 %226, i32 1
  %238 = load i64, i64* %237, align 8
  %239 = icmp eq i64 %232, %238
  %240 = zext i1 %239 to i64
  %241 = add i64 %226, %240
  %242 = add i64 %232, %227
  %243 = icmp ugt i64 %194, %242
  br i1 %243, label %224, label %244, !llvm.loop !2

244:                                              ; preds = %224, %198
  %245 = phi i64 [ %222, %198 ], [ %241, %224 ]
  %246 = phi i64 [ %212, %198 ], [ %242, %224 ]
  %247 = load i64, i64* %190, align 8
  %248 = add i64 %247, %246
  store i64 %248, i64* %190, align 8
  store i64 %245, i64* %199, align 8
  br label %540

249:                                              ; preds = %4
  %250 = bitcast i8* %0 to %struct.zip_error*
  %251 = tail call noalias i8* @malloc(i64 80) #5
  %252 = icmp eq i8* %251, null
  br i1 %252, label %540, label %253

253:                                              ; preds = %249
  %254 = getelementptr inbounds i8, i8* %251, i64 8
  tail call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %251, i8 0, i64 72, i1 false) #5
  %255 = tail call noalias i8* @malloc(i64 8) #5
  %256 = bitcast i8* %254 to i8**
  store i8* %255, i8** %256, align 8
  %257 = icmp eq i8* %255, null
  br i1 %257, label %258, label %259

258:                                              ; preds = %253
  tail call void @free(i8* nonnull %251) #5
  tail call void @zip_error_set(%struct.zip_error* %250, i32 14, i32 0) #5
  br label %540

259:                                              ; preds = %253
  %260 = bitcast i8* %255 to i64*
  store i64 0, i64* %260, align 8
  %261 = getelementptr inbounds i8, i8* %0, i64 48
  %262 = bitcast i8* %261 to %struct.buffer**
  %263 = load %struct.buffer*, %struct.buffer** %262, align 8
  tail call fastcc void @buffer_free(%struct.buffer* %263)
  %264 = bitcast i8* %261 to i8**
  store i8* %251, i8** %264, align 8
  br label %540

265:                                              ; preds = %4
  %266 = getelementptr inbounds i8, i8* %0, i64 56
  %267 = bitcast i8* %266 to %struct.buffer**
  %268 = load %struct.buffer*, %struct.buffer** %267, align 8
  tail call fastcc void @buffer_free(%struct.buffer* %268)
  store %struct.buffer* null, %struct.buffer** %267, align 8
  br label %540

269:                                              ; preds = %4
  %270 = getelementptr inbounds i8, i8* %0, i64 48
  %271 = bitcast i8* %270 to %struct.buffer**
  %272 = load %struct.buffer*, %struct.buffer** %271, align 8
  %273 = bitcast i8* %0 to %struct.zip_error*
  %274 = getelementptr inbounds %struct.buffer, %struct.buffer* %272, i64 0, i32 8
  %275 = load i64, i64* %274, align 8
  %276 = getelementptr inbounds %struct.buffer, %struct.buffer* %272, i64 0, i32 7
  %277 = load i64, i64* %276, align 8
  %278 = tail call i64 @zip_source_seek_compute_offset(i64 %275, i64 %277, i8* %1, i64 %2, %struct.zip_error* %273) #5
  %279 = icmp slt i64 %278, 0
  br i1 %279, label %540, label %280

280:                                              ; preds = %269
  store i64 %278, i64* %274, align 8
  %281 = getelementptr inbounds %struct.buffer, %struct.buffer* %272, i64 0, i32 2
  %282 = load i64, i64* %281, align 8
  %283 = add i64 %282, -1
  %284 = icmp eq i64 %283, 0
  br i1 %284, label %310, label %285

285:                                              ; preds = %280
  %286 = getelementptr inbounds %struct.buffer, %struct.buffer* %272, i64 0, i32 1
  %287 = load i64*, i64** %286, align 8
  br label %288

288:                                              ; preds = %306, %285
  %289 = phi i64 [ %283, %285 ], [ %308, %306 ]
  %290 = phi i64 [ 0, %285 ], [ %307, %306 ]
  %291 = sub i64 %289, %290
  %292 = lshr i64 %291, 1
  %293 = add i64 %292, %290
  %294 = getelementptr inbounds i64, i64* %287, i64 %293
  %295 = load i64, i64* %294, align 8
  %296 = icmp ugt i64 %295, %278
  br i1 %296, label %297, label %299

297:                                              ; preds = %288
  %298 = add i64 %293, -1
  br label %306

299:                                              ; preds = %288
  %300 = icmp eq i64 %293, %282
  br i1 %300, label %310, label %301

301:                                              ; preds = %299
  %302 = add i64 %293, 1
  %303 = getelementptr inbounds i64, i64* %287, i64 %302
  %304 = load i64, i64* %303, align 8
  %305 = icmp ugt i64 %304, %278
  br i1 %305, label %310, label %306

306:                                              ; preds = %301, %297
  %307 = phi i64 [ %290, %297 ], [ %302, %301 ]
  %308 = phi i64 [ %298, %297 ], [ %289, %301 ]
  %309 = icmp ugt i64 %308, %307
  br i1 %309, label %288, label %310

310:                                              ; preds = %306, %301, %299, %280
  %311 = phi i64 [ 0, %280 ], [ %307, %306 ], [ %282, %299 ], [ %293, %301 ]
  %312 = getelementptr inbounds %struct.buffer, %struct.buffer* %272, i64 0, i32 9
  store i64 %311, i64* %312, align 8
  br label %540

313:                                              ; preds = %4
  %314 = getelementptr inbounds i8, i8* %0, i64 56
  %315 = bitcast i8* %314 to %struct.buffer**
  %316 = load %struct.buffer*, %struct.buffer** %315, align 8
  %317 = bitcast i8* %0 to %struct.zip_error*
  %318 = getelementptr inbounds %struct.buffer, %struct.buffer* %316, i64 0, i32 8
  %319 = load i64, i64* %318, align 8
  %320 = getelementptr inbounds %struct.buffer, %struct.buffer* %316, i64 0, i32 7
  %321 = load i64, i64* %320, align 8
  %322 = tail call i64 @zip_source_seek_compute_offset(i64 %319, i64 %321, i8* %1, i64 %2, %struct.zip_error* %317) #5
  %323 = icmp slt i64 %322, 0
  br i1 %323, label %540, label %324

324:                                              ; preds = %313
  store i64 %322, i64* %318, align 8
  %325 = getelementptr inbounds %struct.buffer, %struct.buffer* %316, i64 0, i32 2
  %326 = load i64, i64* %325, align 8
  %327 = add i64 %326, -1
  %328 = icmp eq i64 %327, 0
  br i1 %328, label %354, label %329

329:                                              ; preds = %324
  %330 = getelementptr inbounds %struct.buffer, %struct.buffer* %316, i64 0, i32 1
  %331 = load i64*, i64** %330, align 8
  br label %332

332:                                              ; preds = %350, %329
  %333 = phi i64 [ %327, %329 ], [ %352, %350 ]
  %334 = phi i64 [ 0, %329 ], [ %351, %350 ]
  %335 = sub i64 %333, %334
  %336 = lshr i64 %335, 1
  %337 = add i64 %336, %334
  %338 = getelementptr inbounds i64, i64* %331, i64 %337
  %339 = load i64, i64* %338, align 8
  %340 = icmp ugt i64 %339, %322
  br i1 %340, label %341, label %343

341:                                              ; preds = %332
  %342 = add i64 %337, -1
  br label %350

343:                                              ; preds = %332
  %344 = icmp eq i64 %337, %326
  br i1 %344, label %354, label %345

345:                                              ; preds = %343
  %346 = add i64 %337, 1
  %347 = getelementptr inbounds i64, i64* %331, i64 %346
  %348 = load i64, i64* %347, align 8
  %349 = icmp ugt i64 %348, %322
  br i1 %349, label %354, label %350

350:                                              ; preds = %345, %341
  %351 = phi i64 [ %334, %341 ], [ %346, %345 ]
  %352 = phi i64 [ %342, %341 ], [ %333, %345 ]
  %353 = icmp ugt i64 %352, %351
  br i1 %353, label %332, label %354

354:                                              ; preds = %350, %345, %343, %324
  %355 = phi i64 [ 0, %324 ], [ %351, %350 ], [ %326, %343 ], [ %337, %345 ]
  %356 = getelementptr inbounds %struct.buffer, %struct.buffer* %316, i64 0, i32 9
  store i64 %355, i64* %356, align 8
  br label %540

357:                                              ; preds = %4
  %358 = icmp ult i64 %2, 64
  br i1 %358, label %359, label %361

359:                                              ; preds = %357
  %360 = bitcast i8* %0 to %struct.zip_error*
  tail call void @zip_error_set(%struct.zip_error* %360, i32 18, i32 0) #5
  br label %540

361:                                              ; preds = %357
  %362 = bitcast i8* %1 to %struct.zip_stat*
  tail call void @zip_stat_init(%struct.zip_stat* %362) #5
  %363 = getelementptr inbounds i8, i8* %0, i64 16
  %364 = bitcast i8* %363 to i64*
  %365 = load i64, i64* %364, align 8
  %366 = getelementptr inbounds i8, i8* %1, i64 40
  %367 = bitcast i8* %366 to i64*
  store i64 %365, i64* %367, align 8
  %368 = getelementptr inbounds i8, i8* %0, i64 48
  %369 = bitcast i8* %368 to %struct.buffer**
  %370 = load %struct.buffer*, %struct.buffer** %369, align 8
  %371 = getelementptr inbounds %struct.buffer, %struct.buffer* %370, i64 0, i32 7
  %372 = load i64, i64* %371, align 8
  %373 = getelementptr inbounds i8, i8* %1, i64 24
  %374 = bitcast i8* %373 to i64*
  store i64 %372, i64* %374, align 8
  %375 = getelementptr inbounds i8, i8* %1, i64 32
  %376 = bitcast i8* %375 to i64*
  store i64 %372, i64* %376, align 8
  %377 = getelementptr inbounds i8, i8* %1, i64 52
  %378 = bitcast i8* %377 to i16*
  store i16 0, i16* %378, align 4
  %379 = getelementptr inbounds i8, i8* %1, i64 54
  %380 = bitcast i8* %379 to i16*
  store i16 0, i16* %380, align 2
  %381 = bitcast i8* %1 to i64*
  store i64 220, i64* %381, align 8
  br label %540

382:                                              ; preds = %4
  %383 = tail call i64 (i32, ...) @zip_source_make_command_bitmap(i32 19, i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 17, i32 9, i32 15, i32 10, i32 12, i32 13, i32 11, i32 -1) #5
  br label %540

384:                                              ; preds = %4
  %385 = getelementptr inbounds i8, i8* %0, i64 48
  %386 = bitcast i8* %385 to %struct.buffer**
  %387 = load %struct.buffer*, %struct.buffer** %386, align 8
  %388 = getelementptr inbounds %struct.buffer, %struct.buffer* %387, i64 0, i32 8
  %389 = load i64, i64* %388, align 8
  %390 = icmp slt i64 %389, 0
  br i1 %390, label %391, label %540

391:                                              ; preds = %384
  %392 = bitcast i8* %0 to %struct.zip_error*
  tail call void @zip_error_set(%struct.zip_error* %392, i32 30, i32 75) #5
  br label %540

393:                                              ; preds = %4
  %394 = getelementptr inbounds i8, i8* %0, i64 56
  %395 = bitcast i8* %394 to %struct.buffer**
  %396 = load %struct.buffer*, %struct.buffer** %395, align 8
  %397 = getelementptr inbounds %struct.buffer, %struct.buffer* %396, i64 0, i32 8
  %398 = load i64, i64* %397, align 8
  %399 = icmp slt i64 %398, 0
  br i1 %399, label %400, label %540

400:                                              ; preds = %393
  %401 = bitcast i8* %0 to %struct.zip_error*
  tail call void @zip_error_set(%struct.zip_error* %401, i32 30, i32 75) #5
  br label %540

402:                                              ; preds = %4
  %403 = icmp slt i64 %2, 0
  br i1 %403, label %404, label %406

404:                                              ; preds = %402
  %405 = bitcast i8* %0 to %struct.zip_error*
  tail call void @zip_error_set(%struct.zip_error* %405, i32 18, i32 0) #5
  br label %540

406:                                              ; preds = %402
  %407 = getelementptr inbounds i8, i8* %0, i64 56
  %408 = bitcast i8* %407 to %struct.buffer**
  %409 = load %struct.buffer*, %struct.buffer** %408, align 8
  %410 = bitcast i8* %0 to %struct.zip_error*
  %411 = getelementptr inbounds %struct.buffer, %struct.buffer* %409, i64 0, i32 8
  %412 = load i64, i64* %411, align 8
  %413 = add i64 %412, %2
  %414 = add i64 %413, 65535
  %415 = icmp ult i64 %414, %2
  br i1 %415, label %416, label %417

416:                                              ; preds = %406
  tail call void @zip_error_set(%struct.zip_error* %410, i32 18, i32 0) #5
  br label %540

417:                                              ; preds = %406
  %418 = getelementptr inbounds %struct.buffer, %struct.buffer* %409, i64 0, i32 1
  %419 = load i64*, i64** %418, align 8
  %420 = getelementptr inbounds %struct.buffer, %struct.buffer* %409, i64 0, i32 2
  %421 = load i64, i64* %420, align 8
  %422 = getelementptr inbounds i64, i64* %419, i64 %421
  %423 = load i64, i64* %422, align 8
  %424 = icmp ugt i64 %413, %423
  br i1 %424, label %425, label %481

425:                                              ; preds = %417
  %426 = sub i64 %414, %423
  %427 = lshr i64 %426, 16
  %428 = add i64 %427, %421
  %429 = getelementptr inbounds %struct.buffer, %struct.buffer* %409, i64 0, i32 3
  %430 = load i64, i64* %429, align 8
  %431 = icmp ugt i64 %428, %430
  br i1 %431, label %432, label %457

432:                                              ; preds = %425
  %433 = icmp eq i64 %430, 0
  %434 = select i1 %433, i64 16, i64 %430
  br label %435

435:                                              ; preds = %435, %432
  %436 = phi i64 [ %434, %432 ], [ %438, %435 ]
  %437 = icmp ult i64 %436, %428
  %438 = shl i64 %436, 1
  br i1 %437, label %435, label %439

439:                                              ; preds = %435
  %440 = icmp ugt i64 %430, %436
  br i1 %440, label %457, label %441

441:                                              ; preds = %439
  %442 = bitcast %struct.buffer* %409 to i8**
  %443 = load i8*, i8** %442, align 8
  %444 = shl i64 %436, 4
  %445 = tail call i8* @realloc(i8* %443, i64 %444) #5
  %446 = icmp eq i8* %445, null
  br i1 %446, label %456, label %447

447:                                              ; preds = %441
  store i8* %445, i8** %442, align 8
  %448 = bitcast i64** %418 to i8**
  %449 = load i8*, i8** %448, align 8
  %450 = shl i64 %436, 3
  %451 = add i64 %450, 8
  %452 = tail call i8* @realloc(i8* %449, i64 %451) #5
  %453 = icmp eq i8* %452, null
  br i1 %453, label %456, label %454

454:                                              ; preds = %447
  store i8* %452, i8** %448, align 8
  store i64 %436, i64* %429, align 8
  %455 = load i64, i64* %420, align 8
  br label %457

456:                                              ; preds = %447, %441
  tail call void @zip_error_set(%struct.zip_error* %410, i32 14, i32 0) #5
  tail call void @zip_error_set(%struct.zip_error* %410, i32 14, i32 0) #5
  br label %540

457:                                              ; preds = %454, %439, %425
  %458 = phi i64 [ %455, %454 ], [ %421, %439 ], [ %421, %425 ]
  %459 = icmp ult i64 %458, %428
  br i1 %459, label %460, label %481

460:                                              ; preds = %457
  %461 = getelementptr inbounds %struct.buffer, %struct.buffer* %409, i64 0, i32 0
  br label %462

462:                                              ; preds = %470, %460
  %463 = phi i64 [ %458, %460 ], [ %479, %470 ]
  %464 = phi i64 [ %423, %460 ], [ %476, %470 ]
  %465 = tail call noalias i8* @malloc(i64 65536) #5
  %466 = load %struct.zip_buffer_fragment*, %struct.zip_buffer_fragment** %461, align 8
  %467 = getelementptr inbounds %struct.zip_buffer_fragment, %struct.zip_buffer_fragment* %466, i64 %463, i32 0
  store i8* %465, i8** %467, align 8
  %468 = icmp eq i8* %465, null
  br i1 %468, label %469, label %470

469:                                              ; preds = %462
  tail call void @zip_error_set(%struct.zip_error* %410, i32 14, i32 0) #5
  br label %540

470:                                              ; preds = %462
  %471 = load %struct.zip_buffer_fragment*, %struct.zip_buffer_fragment** %461, align 8
  %472 = load i64, i64* %420, align 8
  %473 = getelementptr inbounds %struct.zip_buffer_fragment, %struct.zip_buffer_fragment* %471, i64 %472, i32 1
  store i64 65536, i64* %473, align 8
  %474 = load i64, i64* %420, align 8
  %475 = add i64 %474, 1
  store i64 %475, i64* %420, align 8
  %476 = add i64 %464, 65536
  %477 = load i64*, i64** %418, align 8
  %478 = getelementptr inbounds i64, i64* %477, i64 %475
  store i64 %476, i64* %478, align 8
  %479 = load i64, i64* %420, align 8
  %480 = icmp ult i64 %479, %428
  br i1 %480, label %462, label %481

481:                                              ; preds = %470, %457, %417
  %482 = getelementptr inbounds %struct.buffer, %struct.buffer* %409, i64 0, i32 9
  %483 = load i64, i64* %482, align 8
  %484 = icmp eq i64 %2, 0
  br i1 %484, label %529, label %485

485:                                              ; preds = %481
  %486 = load i64, i64* %411, align 8
  %487 = load i64*, i64** %418, align 8
  %488 = getelementptr inbounds i64, i64* %487, i64 %483
  %489 = load i64, i64* %488, align 8
  %490 = sub i64 %486, %489
  %491 = getelementptr inbounds %struct.buffer, %struct.buffer* %409, i64 0, i32 0
  %492 = load %struct.zip_buffer_fragment*, %struct.zip_buffer_fragment** %491, align 8
  %493 = getelementptr inbounds %struct.zip_buffer_fragment, %struct.zip_buffer_fragment* %492, i64 %483, i32 1
  %494 = load i64, i64* %493, align 8
  %495 = sub i64 %494, %490
  %496 = icmp ugt i64 %495, %2
  %497 = select i1 %496, i64 %2, i64 %495
  %498 = getelementptr inbounds %struct.zip_buffer_fragment, %struct.zip_buffer_fragment* %492, i64 %483, i32 0
  %499 = load i8*, i8** %498, align 8
  %500 = getelementptr inbounds i8, i8* %499, i64 %490
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %500, i8* align 1 %1, i64 %497, i1 false) #5
  %501 = load %struct.zip_buffer_fragment*, %struct.zip_buffer_fragment** %491, align 8
  %502 = getelementptr inbounds %struct.zip_buffer_fragment, %struct.zip_buffer_fragment* %501, i64 %483, i32 1
  %503 = load i64, i64* %502, align 8
  %504 = sub i64 %503, %490
  %505 = icmp eq i64 %497, %504
  %506 = zext i1 %505 to i64
  %507 = add i64 %483, %506
  %508 = icmp ult i64 %495, %2
  br i1 %508, label %509, label %529

509:                                              ; preds = %485, %509
  %510 = phi %struct.zip_buffer_fragment* [ %521, %509 ], [ %501, %485 ]
  %511 = phi i64 [ %526, %509 ], [ %507, %485 ]
  %512 = phi i64 [ %527, %509 ], [ %497, %485 ]
  %513 = sub i64 %2, %512
  %514 = getelementptr inbounds %struct.zip_buffer_fragment, %struct.zip_buffer_fragment* %510, i64 %511, i32 1
  %515 = load i64, i64* %514, align 8
  %516 = icmp ult i64 %513, %515
  %517 = select i1 %516, i64 %513, i64 %515
  %518 = getelementptr inbounds %struct.zip_buffer_fragment, %struct.zip_buffer_fragment* %510, i64 %511, i32 0
  %519 = load i8*, i8** %518, align 8
  %520 = getelementptr inbounds i8, i8* %1, i64 %512
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %519, i8* align 1 %520, i64 %517, i1 false) #5
  %521 = load %struct.zip_buffer_fragment*, %struct.zip_buffer_fragment** %491, align 8
  %522 = getelementptr inbounds %struct.zip_buffer_fragment, %struct.zip_buffer_fragment* %521, i64 %511, i32 1
  %523 = load i64, i64* %522, align 8
  %524 = icmp eq i64 %517, %523
  %525 = zext i1 %524 to i64
  %526 = add i64 %511, %525
  %527 = add i64 %517, %512
  %528 = icmp ult i64 %527, %2
  br i1 %528, label %509, label %529, !llvm.loop !4

529:                                              ; preds = %485, %509, %481
  %530 = phi i64 [ 0, %481 ], [ %497, %485 ], [ %527, %509 ]
  %531 = phi i64 [ %483, %481 ], [ %507, %485 ], [ %526, %509 ]
  %532 = load i64, i64* %411, align 8
  %533 = add i64 %532, %530
  store i64 %533, i64* %411, align 8
  store i64 %531, i64* %482, align 8
  %534 = getelementptr inbounds %struct.buffer, %struct.buffer* %409, i64 0, i32 7
  %535 = load i64, i64* %534, align 8
  %536 = icmp ugt i64 %533, %535
  br i1 %536, label %537, label %540

537:                                              ; preds = %529
  store i64 %533, i64* %534, align 8
  br label %540

538:                                              ; preds = %4
  %539 = bitcast i8* %0 to %struct.zip_error*
  tail call void @zip_error_set(%struct.zip_error* %539, i32 28, i32 0) #5
  br label %540

540:                                              ; preds = %354, %313, %310, %269, %249, %258, %537, %529, %469, %456, %416, %244, %196, %184, %132, %15, %393, %384, %359, %361, %259, %4, %538, %404, %400, %391, %382, %265, %182, %173, %171, %169, %160, %157, %148, %140, %18
  %541 = phi i64 [ -1, %538 ], [ -1, %404 ], [ -1, %400 ], [ -1, %391 ], [ %383, %382 ], [ 0, %265 ], [ -1, %182 ], [ 0, %173 ], [ -1, %169 ], [ 24, %171 ], [ 0, %160 ], [ %159, %157 ], [ 0, %148 ], [ 0, %140 ], [ 0, %18 ], [ 0, %4 ], [ 0, %259 ], [ -1, %359 ], [ 64, %361 ], [ %389, %384 ], [ %398, %393 ], [ -1, %15 ], [ -1, %132 ], [ %246, %244 ], [ 0, %184 ], [ -1, %196 ], [ -1, %416 ], [ %530, %537 ], [ %530, %529 ], [ -1, %469 ], [ -1, %456 ], [ -1, %258 ], [ -1, %249 ], [ 0, %310 ], [ -1, %269 ], [ 0, %354 ], [ -1, %313 ]
  ret i64 %541
}

; Function Attrs: nounwind
declare void @free(i8* nocapture) local_unnamed_addr #4

; Function Attrs: nounwind ssp uwtable
define hidden %struct.zip_source* @zip_source_buffer_with_attributes(%struct.zip*, i8*, i64, i32, %struct.zip_file_attributes* readonly) local_unnamed_addr #0 {
  %6 = alloca %struct.zip_buffer_fragment, align 8
  %7 = getelementptr inbounds %struct.zip, %struct.zip* %0, i64 0, i32 2
  %8 = bitcast %struct.zip_buffer_fragment* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %8) #5
  %9 = icmp eq i8* %1, null
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %8, i8 -86, i64 16, i1 false) #5
  br i1 %9, label %10, label %15

10:                                               ; preds = %5
  %11 = icmp eq i64 %2, 0
  br i1 %11, label %13, label %12

12:                                               ; preds = %10
  tail call void @zip_error_set(%struct.zip_error* %7, i32 18, i32 0) #5
  br label %19

13:                                               ; preds = %10
  %14 = tail call %struct.zip_source* @zip_source_buffer_fragment_with_attributes_create(%struct.zip_buffer_fragment* null, i64 0, i32 %3, %struct.zip_file_attributes* %4, %struct.zip_error* %7) #5
  br label %19

15:                                               ; preds = %5
  %16 = getelementptr inbounds %struct.zip_buffer_fragment, %struct.zip_buffer_fragment* %6, i64 0, i32 0
  %17 = getelementptr inbounds %struct.zip_buffer_fragment, %struct.zip_buffer_fragment* %6, i64 0, i32 1
  store i8* %1, i8** %16, align 8
  store i64 %2, i64* %17, align 8
  %18 = call %struct.zip_source* @zip_source_buffer_fragment_with_attributes_create(%struct.zip_buffer_fragment* nonnull %6, i64 1, i32 %3, %struct.zip_file_attributes* %4, %struct.zip_error* %7) #5
  br label %19

19:                                               ; preds = %12, %13, %15
  %20 = phi %struct.zip_source* [ null, %12 ], [ %14, %13 ], [ %18, %15 ]
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %8) #5
  ret %struct.zip_source* %20
}

declare i64 @zip_error_to_data(%struct.zip_error*, i8*, i64) local_unnamed_addr #2

declare void @zip_stat_init(%struct.zip_stat*) local_unnamed_addr #2

declare i64 @zip_source_make_command_bitmap(i32, ...) local_unnamed_addr #2

declare i64 @zip_source_seek_compute_offset(i64, i64, i8*, i64, %struct.zip_error*) local_unnamed_addr #2

; Function Attrs: nounwind
declare noalias i8* @realloc(i8* nocapture, i64) local_unnamed_addr #4

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = distinct !{!2, !3}
!3 = !{!"llvm.loop.unroll.disable"}
!4 = distinct !{!4, !3}
