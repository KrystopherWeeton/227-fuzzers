; ModuleID = '../../third_party/libaom/source/libaom/av1/common/mvref_common.c'
source_filename = "../../third_party/libaom/source/libaom/av1/common/mvref_common.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"
module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%struct.AV1Common = type { %struct.CurrentFrame, %struct.aom_internal_error_info*, i32, i32, i32, i32, i32, i32, i8, [33 x i32], i32, %struct.RefCntBuffer*, %struct.RefCntBuffer*, [8 x i32], %struct.scale_factors, [8 x %struct.scale_factors], [8 x %struct.RefCntBuffer*], i32, i32, i32, %struct.FeatureFlags, %struct.CommonModeInfoParams, %struct.CommonQuantParams, %struct.segmentation, i8*, %struct.loop_filter_info_n, %struct.loopfilter, [3 x %struct.RestorationInfo], i32*, %struct.RestorationLineBuffers*, %struct.yv12_buffer_config, %struct.CdefInfo, %struct.aom_film_grain_t, %struct.DeltaQInfo, [8 x %struct.WarpedMotionParams], %struct.SequenceHeader*, %struct.frame_contexts*, %struct.frame_contexts*, %struct.CommonTileParams, %struct.BufferPool*, %struct.CommonContexts, i32, [8 x i32], %struct.TPL_MV_REF*, i32, [8 x i32], [8 x i8], i32, i32 }
%struct.CurrentFrame = type { i8, i8, i32, i32, i32, %struct.SkipModeInfo, i32, i32 }
%struct.SkipModeInfo = type { i32, i32, i32, i32 }
%struct.aom_internal_error_info = type { i32, i32, [200 x i8], i32, [1 x %struct.__jmp_buf_tag] }
%struct.__jmp_buf_tag = type { [8 x i64], i32, %struct.__sigset_t }
%struct.__sigset_t = type { [16 x i64] }
%struct.RefCntBuffer = type { i32, i32, [7 x i32], i32, [7 x i32], %struct.MV_REF*, i8*, %struct.segmentation, i32, i32, i32, i32, [8 x %struct.WarpedMotionParams], i32, i8, %struct.aom_film_grain_t, %struct.aom_codec_frame_buffer, %struct.yv12_buffer_config, i8, [4 x i32], [8 x i8], [2 x i8], %struct.frame_contexts }
%struct.MV_REF = type { %union.int_mv, i8 }
%union.int_mv = type { i32 }
%struct.aom_codec_frame_buffer = type { i8*, i64, i8* }
%struct.frame_contexts = type { [5 x [13 x [3 x i16]]], [5 x [2 x [9 x [3 x i16]]]], [2 x [3 x [3 x i16]]], [2 x [2 x [6 x i16]]], [2 x [2 x [7 x i16]]], [2 x [2 x [8 x i16]]], [2 x [2 x [9 x i16]]], [2 x [2 x [10 x i16]]], [2 x [2 x [11 x i16]]], [2 x [2 x [12 x i16]]], [5 x [2 x [4 x [4 x i16]]]], [5 x [2 x [42 x [5 x i16]]]], [5 x [2 x [21 x [5 x i16]]]], [6 x [3 x i16]], [2 x [3 x i16]], [6 x [3 x i16]], [3 x [3 x i16]], [8 x [9 x i16]], [22 x [3 x i16]], [22 x [17 x i16]], [4 x [3 x i16]], [22 x [3 x i16]], [4 x [5 x i16]], [22 x [4 x i16]], [22 x [3 x i16]], [7 x [8 x i16]], [7 x [8 x i16]], [7 x [5 x [9 x i16]]], [7 x [5 x [9 x i16]]], [7 x [3 x [3 x i16]]], [2 x [3 x i16]], [5 x [3 x i16]], [3 x [6 x [3 x i16]]], [5 x [3 x i16]], [3 x [3 x [3 x i16]]], [3 x [3 x [3 x i16]]], [3 x [2 x [3 x i16]]], [21 x [3 x i16]], [6 x [3 x i16]], [6 x [3 x i16]], [3 x [3 x i16]], [3 x [3 x i16]], [4 x [3 x i16]], %struct.nmv_context, %struct.nmv_context, [3 x i16], %struct.segmentation_probs, [22 x [3 x i16]], [6 x i16], [4 x i16], [3 x i16], [3 x i16], [4 x [14 x i16]], [2 x [13 x [15 x i16]]], [20 x [11 x i16]], [16 x [4 x i16]], [5 x [5 x [14 x i16]]], [8 x [8 x i16]], [4 x [3 x [4 x i16]]], [5 x i16], [4 x [5 x i16]], [5 x i16], [3 x [4 x [13 x [17 x i16]]]], [4 x [4 x [17 x i16]]], [9 x i16], [6 x [17 x i16]], i32 }
%struct.nmv_context = type { [5 x i16], [2 x %struct.nmv_component] }
%struct.nmv_component = type { [12 x i16], [2 x [5 x i16]], [5 x i16], [3 x i16], [3 x i16], [3 x i16], [3 x i16], [10 x [3 x i16]] }
%struct.segmentation_probs = type { [9 x i16], [3 x [3 x i16]], [3 x [9 x i16]] }
%struct.scale_factors = type { i32, i32, i32, i32, i32 (i32, %struct.scale_factors*)*, i32 (i32, %struct.scale_factors*)* }
%struct.FeatureFlags = type { i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i32, i32, i8 }
%struct.CommonModeInfoParams = type { i32, i32, i32, i32, i32, %struct.MB_MODE_INFO*, i32, i32, i8, %struct.MB_MODE_INFO**, i32, i32, i8*, void (%struct.CommonModeInfoParams*)*, void (%struct.CommonModeInfoParams*)*, void (%struct.CommonModeInfoParams*, i32, i32)* }
%struct.CommonQuantParams = type { i32, i32, i32, i32, i32, i32, [8 x [2 x i16]], [8 x [2 x i16]], [8 x [2 x i16]], [16 x [3 x [19 x i8*]]], [16 x [3 x [19 x i8*]]], [8 x [19 x i8*]], [8 x [19 x i8*]], [8 x [19 x i8*]], i8, i32, i32, i32 }
%struct.segmentation = type { i8, i8, i8, i8, [8 x [8 x i16]], [8 x i32], i32, i8 }
%struct.loop_filter_info_n = type { [64 x %struct.loop_filter_thresh], [3 x [8 x [2 x [8 x [2 x i8]]]]] }
%struct.loop_filter_thresh = type { [16 x i8], [16 x i8], [16 x i8] }
%struct.loopfilter = type { [2 x i32], i32, i32, i32, i8, i8, [8 x i8], [2 x i8], i32 }
%struct.RestorationInfo = type { i32, i32, i32, i32, i32, %struct.RestorationUnitInfo*, %struct.RestorationStripeBoundaries, i32 }
%struct.RestorationUnitInfo = type { i32, [12 x i8], %struct.WienerInfo, %struct.SgrprojInfo, [4 x i8] }
%struct.WienerInfo = type { [8 x i16], [8 x i16] }
%struct.SgrprojInfo = type { i32, [2 x i32] }
%struct.RestorationStripeBoundaries = type { i8*, i8*, i32, i32 }
%struct.RestorationLineBuffers = type { [3 x [392 x i16]], [3 x [392 x i16]] }
%struct.yv12_buffer_config = type { %union.anon, %union.anon.0, %union.anon.2, %union.anon.4, %union.anon.6, %union.anon.8, i32, [3 x i8*], i8*, i32, i8*, i64, i32, i64, i32, i32, i32, i32, i32, i32, i8, i32, i32, i32, i32, i32, i32, %struct.aom_metadata_array* }
%union.anon = type { %struct.anon }
%struct.anon = type { i32, i32 }
%union.anon.0 = type { %struct.anon.1 }
%struct.anon.1 = type { i32, i32 }
%union.anon.2 = type { %struct.anon.3 }
%struct.anon.3 = type { i32, i32 }
%union.anon.4 = type { %struct.anon.5 }
%struct.anon.5 = type { i32, i32 }
%union.anon.6 = type { %struct.anon.7 }
%struct.anon.7 = type { i32, i32 }
%union.anon.8 = type { %struct.anon.9 }
%struct.anon.9 = type { i8*, i8*, i8* }
%struct.aom_metadata_array = type { i64, %struct.aom_metadata** }
%struct.aom_metadata = type { i32, i8*, i64, i32 }
%struct.CdefInfo = type { [3 x i16*], [3 x i16*], i16*, [3 x i64], [3 x i64], i64, i32, i32, [16 x i32], [16 x i32], i32, i32, i32 }
%struct.aom_film_grain_t = type { i32, i32, [14 x [2 x i32]], i32, [10 x [2 x i32]], i32, [10 x [2 x i32]], i32, i32, i32, [24 x i32], [25 x i32], [25 x i32], i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i16 }
%struct.DeltaQInfo = type { i32, i32, i32, i32, i32 }
%struct.WarpedMotionParams = type { [8 x i32], i16, i16, i16, i16, i8, i8 }
%struct.SequenceHeader = type { i32, i32, i32, i32, i8, i32, i32, i8, i32, i32, %struct.OrderHintInfo, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i32, i8, i8, i32, i32, i32, i32, i32, i32, i32, i8, i8, i32, [32 x i32], i32, %struct.aom_timing, i8, %struct.aom_dec_model_info, i8, [32 x i8], [32 x i8], [33 x %struct.aom_dec_model_op_parameters] }
%struct.OrderHintInfo = type { i32, i32, i32, i32 }
%struct.aom_timing = type { i32, i32, i32, i32 }
%struct.aom_dec_model_info = type { i32, i32, i32, i32 }
%struct.aom_dec_model_op_parameters = type { i32, i64, i64, i32, i32, i32, i32, i32 }
%struct.CommonTileParams = type { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, [65 x i32], [65 x i32], i32, i32 }
%struct.BufferPool = type { %union.pthread_mutex_t, i8*, i32 (i8*, i64, %struct.aom_codec_frame_buffer*)*, i32 (i8*, %struct.aom_codec_frame_buffer*)*, [16 x %struct.RefCntBuffer], %struct.InternalFrameBufferList }
%union.pthread_mutex_t = type { %struct.__pthread_mutex_s }
%struct.__pthread_mutex_s = type { i32, i32, i32, i32, i32, i16, i16, %struct.__pthread_internal_list }
%struct.__pthread_internal_list = type { %struct.__pthread_internal_list*, %struct.__pthread_internal_list* }
%struct.InternalFrameBufferList = type { i32, %struct.InternalFrameBuffer* }
%struct.InternalFrameBuffer = type { i8*, i64, i32 }
%struct.CommonContexts = type { i8**, [3 x i8**], i8**, i32, i32, i32 }
%struct.TPL_MV_REF = type { %union.int_mv, i8 }
%struct.MB_MODE_INFO = type <{ i8, i8, i8, i8, i32, [2 x %union.int_mv], [2 x i8], [2 x i8], %union.int_interpfilters, i8, i8, i8, i8, %struct.WarpedMotionParams, i8, i8, [6 x i8], %struct.INTERINTER_COMPOUND_DATA, [2 x i8], %struct.FILTER_INTRA_MODE_INFO, i8, i8, %struct.PALETTE_MODE_INFO, i8, i8, [16 x i8], i8, [4 x i8], i16, [7 x i8] }>
%union.int_interpfilters = type { i32 }
%struct.INTERINTER_COMPOUND_DATA = type { i8*, i8, i8, i8, i8 }
%struct.FILTER_INTRA_MODE_INFO = type { i8, i8 }
%struct.PALETTE_MODE_INFO = type { [24 x i16], [2 x i8] }
%struct.mv = type { i16, i16 }
%struct.macroblockd = type { i32, i32, i32, i8, [3 x %struct.macroblockd_plane], %struct.TileInfo, %struct.MB_MODE_INFO**, i8, i8, i8, i8, %struct.MB_MODE_INFO*, %struct.MB_MODE_INFO*, %struct.MB_MODE_INFO*, %struct.MB_MODE_INFO*, i8*, i32, i32, i32, i32, i32, [2 x %struct.scale_factors*], %struct.yv12_buffer_config*, [3 x i8*], [3 x [32 x i8]], i8*, [32 x i8], i8*, i8*, [32 x i8], [3 x %struct.WienerInfo], [3 x %struct.SgrprojInfo], i8, i8, [29 x [8 x %struct.candidate_mv]], [29 x [8 x i16]], i8, i8, [8 x i8], %struct.frame_contexts*, i32, [8 x i32], [8 x i32], i32, i32, %struct.aom_internal_error_info*, %struct.WarpedMotionParams*, i8, [4 x i8], [4 x i8], i8*, %struct.cfl_ctx, [2 x i16], i16*, [2 x i8*], [8 x i8] }
%struct.macroblockd_plane = type { i8, i32, i32, %struct.buf_2d, [2 x %struct.buf_2d], i8*, i8*, [8 x [2 x i16]], i8*, i8, i8, [8 x [19 x i8*]], [8 x [19 x i8*]] }
%struct.buf_2d = type { i8*, i8*, i32, i32, i32 }
%struct.TileInfo = type { i32, i32, i32, i32, i32, i32 }
%struct.candidate_mv = type { %union.int_mv, %union.int_mv }
%struct.cfl_ctx = type { [1024 x i16], [1024 x i16], [2 x i32], i32, [2 x [32 x i16]], i32, i32, i32, i32, i32, i32 }
%struct.REF_FRAME_INFO = type { i32, %struct.RefCntBuffer*, i32 }

@block_size_wide = internal unnamed_addr constant [22 x i8] c"\04\04\08\08\08\10\10\10   @@@\80\80\04\10\08 \10@", align 16
@block_size_high = internal unnamed_addr constant [22 x i8] c"\04\08\04\08\10\08\10 \10 @ @\80@\80\10\04 \08@\10", align 16
@mi_size_wide = internal unnamed_addr constant [22 x i8] c"\01\01\02\02\02\04\04\04\08\08\08\10\10\10  \01\04\02\08\04\10", align 16
@mi_size_high = internal unnamed_addr constant [22 x i8] c"\01\02\01\02\04\02\04\08\04\08\10\08\10 \10 \04\01\08\02\10\04", align 16
@.str = private unnamed_addr constant [48 x i8] c"Inter frame requests a look-ahead frame as LAST\00", align 1
@.str.1 = private unnamed_addr constant [50 x i8] c"Inter frame requests a look-ahead frame as GOLDEN\00", align 1
@av1_set_frame_refs.ref_frame_list = internal unnamed_addr constant [5 x i8] c"\02\03\05\06\07", align 1
@ref_frame_map = internal unnamed_addr constant [21 x [2 x i8]] [[2 x i8] c"\01\05", [2 x i8] c"\02\05", [2 x i8] c"\03\05", [2 x i8] c"\04\05", [2 x i8] c"\01\06", [2 x i8] c"\02\06", [2 x i8] c"\03\06", [2 x i8] c"\04\06", [2 x i8] c"\01\07", [2 x i8] c"\02\07", [2 x i8] c"\03\07", [2 x i8] c"\04\07", [2 x i8] c"\01\02", [2 x i8] c"\01\03", [2 x i8] c"\01\04", [2 x i8] c"\05\07", [2 x i8] c"\02\03", [2 x i8] c"\02\04", [2 x i8] c"\03\04", [2 x i8] c"\05\06", [2 x i8] c"\06\07"], align 16
@div_mult = internal unnamed_addr constant [32 x i32] [i32 0, i32 16384, i32 8192, i32 5461, i32 4096, i32 3276, i32 2730, i32 2340, i32 2048, i32 1820, i32 1638, i32 1489, i32 1365, i32 1260, i32 1170, i32 1092, i32 1024, i32 963, i32 910, i32 862, i32 819, i32 780, i32 744, i32 712, i32 682, i32 655, i32 630, i32 606, i32 585, i32 564, i32 546, i32 528], align 16

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @av1_copy_frame_mvs(%struct.AV1Common* nocapture readonly, %struct.MB_MODE_INFO* nocapture readonly, i32, i32, i32, i32) local_unnamed_addr #0 {
  %7 = getelementptr inbounds %struct.AV1Common, %struct.AV1Common* %0, i64 0, i32 21, i32 4
  %8 = load i32, i32* %7, align 16
  %9 = add nsw i32 %8, 1
  %10 = ashr i32 %9, 1
  %11 = add nsw i32 %4, 1
  %12 = ashr i32 %11, 1
  %13 = add nsw i32 %5, 1
  %14 = ashr i32 %13, 1
  %15 = icmp sgt i32 %5, 0
  br i1 %15, label %16, label %80

16:                                               ; preds = %6
  %17 = getelementptr inbounds %struct.AV1Common, %struct.AV1Common* %0, i64 0, i32 12
  %18 = load %struct.RefCntBuffer*, %struct.RefCntBuffer** %17, align 16
  %19 = getelementptr inbounds %struct.RefCntBuffer, %struct.RefCntBuffer* %18, i64 0, i32 5
  %20 = load %struct.MV_REF*, %struct.MV_REF** %19, align 8
  %21 = ashr i32 %2, 1
  %22 = mul nsw i32 %10, %21
  %23 = sext i32 %22 to i64
  %24 = getelementptr inbounds %struct.MV_REF, %struct.MV_REF* %20, i64 %23
  %25 = ashr i32 %3, 1
  %26 = sext i32 %25 to i64
  %27 = getelementptr inbounds %struct.MV_REF, %struct.MV_REF* %24, i64 %26
  %28 = icmp sgt i32 %4, 0
  %29 = sext i32 %10 to i64
  %30 = getelementptr inbounds %struct.MB_MODE_INFO, %struct.MB_MODE_INFO* %1, i64 0, i32 6, i64 0
  %31 = getelementptr inbounds %struct.MB_MODE_INFO, %struct.MB_MODE_INFO* %1, i64 0, i32 5, i64 0
  %32 = bitcast %union.int_mv* %31 to i16*
  %33 = bitcast %union.int_mv* %31 to %struct.mv*
  %34 = getelementptr inbounds %struct.mv, %struct.mv* %33, i64 0, i32 1
  %35 = getelementptr inbounds %union.int_mv, %union.int_mv* %31, i64 0, i32 0
  %36 = getelementptr inbounds %struct.MB_MODE_INFO, %struct.MB_MODE_INFO* %1, i64 0, i32 6, i64 1
  %37 = getelementptr inbounds %struct.MB_MODE_INFO, %struct.MB_MODE_INFO* %1, i64 0, i32 5, i64 1
  %38 = bitcast %union.int_mv* %37 to i16*
  %39 = bitcast %union.int_mv* %37 to %struct.mv*
  %40 = getelementptr inbounds %struct.mv, %struct.mv* %39, i64 0, i32 1
  %41 = getelementptr inbounds %union.int_mv, %union.int_mv* %37, i64 0, i32 0
  br label %42

42:                                               ; preds = %16, %76
  %43 = phi i32 [ 0, %16 ], [ %78, %76 ]
  %44 = phi %struct.MV_REF* [ %27, %16 ], [ %77, %76 ]
  br i1 %28, label %45, label %76

45:                                               ; preds = %42, %102
  %46 = phi %struct.MV_REF* [ %103, %102 ], [ %44, %42 ]
  %47 = phi i32 [ %104, %102 ], [ 0, %42 ]
  %48 = getelementptr inbounds %struct.MV_REF, %struct.MV_REF* %46, i64 0, i32 1
  store i8 -1, i8* %48, align 4
  %49 = getelementptr inbounds %struct.MV_REF, %struct.MV_REF* %46, i64 0, i32 0, i32 0
  store i32 0, i32* %49, align 4
  %50 = load i8, i8* %30, align 1
  %51 = icmp sgt i8 %50, 0
  br i1 %51, label %52, label %73

52:                                               ; preds = %45
  %53 = sext i8 %50 to i64
  %54 = getelementptr inbounds %struct.AV1Common, %struct.AV1Common* %0, i64 0, i32 46, i64 %53
  %55 = load i8, i8* %54, align 1
  %56 = icmp eq i8 %55, 0
  br i1 %56, label %57, label %73

57:                                               ; preds = %52
  %58 = load i16, i16* %32, align 4
  %59 = sext i16 %58 to i32
  %60 = icmp slt i32 %59, 0
  %61 = sub nsw i32 0, %59
  %62 = select i1 %60, i32 %61, i32 %59
  %63 = icmp sgt i32 %62, 4095
  br i1 %63, label %73, label %64

64:                                               ; preds = %57
  %65 = load i16, i16* %34, align 2
  %66 = sext i16 %65 to i32
  %67 = icmp slt i32 %66, 0
  %68 = sub nsw i32 0, %66
  %69 = select i1 %67, i32 %68, i32 %66
  %70 = icmp sgt i32 %69, 4095
  br i1 %70, label %73, label %71

71:                                               ; preds = %64
  store i8 %50, i8* %48, align 4
  %72 = load i32, i32* %35, align 4
  store i32 %72, i32* %49, align 4
  br label %73

73:                                               ; preds = %45, %71, %52, %64, %57
  %74 = load i8, i8* %36, align 1
  %75 = icmp sgt i8 %74, 0
  br i1 %75, label %81, label %102

76:                                               ; preds = %102, %42
  %77 = getelementptr inbounds %struct.MV_REF, %struct.MV_REF* %44, i64 %29
  %78 = add nuw nsw i32 %43, 1
  %79 = icmp slt i32 %78, %14
  br i1 %79, label %42, label %80

80:                                               ; preds = %76, %6
  ret void

81:                                               ; preds = %73
  %82 = sext i8 %74 to i64
  %83 = getelementptr inbounds %struct.AV1Common, %struct.AV1Common* %0, i64 0, i32 46, i64 %82
  %84 = load i8, i8* %83, align 1
  %85 = icmp eq i8 %84, 0
  br i1 %85, label %86, label %102

86:                                               ; preds = %81
  %87 = load i16, i16* %38, align 4
  %88 = sext i16 %87 to i32
  %89 = icmp slt i32 %88, 0
  %90 = sub nsw i32 0, %88
  %91 = select i1 %89, i32 %90, i32 %88
  %92 = icmp sgt i32 %91, 4095
  br i1 %92, label %102, label %93

93:                                               ; preds = %86
  %94 = load i16, i16* %40, align 2
  %95 = sext i16 %94 to i32
  %96 = icmp slt i32 %95, 0
  %97 = sub nsw i32 0, %95
  %98 = select i1 %96, i32 %97, i32 %95
  %99 = icmp sgt i32 %98, 4095
  br i1 %99, label %102, label %100

100:                                              ; preds = %93
  store i8 %74, i8* %48, align 4
  %101 = load i32, i32* %41, align 4
  store i32 %101, i32* %49, align 4
  br label %102

102:                                              ; preds = %100, %93, %86, %81, %73
  %103 = getelementptr inbounds %struct.MV_REF, %struct.MV_REF* %46, i64 1
  %104 = add nuw nsw i32 %47, 1
  %105 = icmp slt i32 %104, %12
  br i1 %105, label %45, label %76
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: nounwind ssp uwtable
define hidden void @av1_find_mv_refs(%struct.AV1Common* readonly, %struct.macroblockd* readonly, %struct.MB_MODE_INFO* nocapture readonly, i8 signext, i8*, [8 x %struct.candidate_mv]*, [8 x i16]*, [2 x %union.int_mv]*, %union.int_mv*, i16* nocapture) local_unnamed_addr #2 {
  %11 = alloca [2 x i8], align 1
  %12 = alloca i8, align 1
  %13 = alloca i8, align 1
  %14 = alloca i8, align 1
  %15 = alloca [3 x [2 x i32]], align 16
  %16 = alloca i8, align 1
  %17 = alloca [2 x [2 x %union.int_mv]], align 16
  %18 = alloca [2 x [2 x %union.int_mv]], align 16
  %19 = alloca i64, align 8
  %20 = alloca i64, align 8
  %21 = alloca [2 x [2 x %union.int_mv]], align 16
  %22 = alloca [2 x %union.int_mv], align 4
  %23 = getelementptr inbounds %struct.macroblockd, %struct.macroblockd* %1, i64 0, i32 0
  %24 = load i32, i32* %23, align 16
  %25 = getelementptr inbounds %struct.macroblockd, %struct.macroblockd* %1, i64 0, i32 1
  %26 = load i32, i32* %25, align 4
  %27 = bitcast [2 x %union.int_mv]* %22 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %27) #9
  %28 = getelementptr inbounds [2 x %union.int_mv], [2 x %union.int_mv]* %22, i64 0, i64 0
  %29 = getelementptr inbounds [2 x %union.int_mv], [2 x %union.int_mv]* %22, i64 0, i64 0, i32 0
  store i32 -1431655766, i32* %29, align 4
  %30 = getelementptr inbounds [2 x %union.int_mv], [2 x %union.int_mv]* %22, i64 0, i64 1, i32 0
  store i32 -1431655766, i32* %30, align 4
  %31 = icmp eq i8 %3, 0
  br i1 %31, label %32, label %36

32:                                               ; preds = %10
  store i32 0, i32* %30, align 4
  store i32 0, i32* %29, align 4
  %33 = icmp eq %union.int_mv* %8, null
  br i1 %33, label %65, label %34

34:                                               ; preds = %32
  %35 = getelementptr inbounds %union.int_mv, %union.int_mv* %8, i64 0, i32 0
  store i32 -2147450880, i32* %35, align 4
  br label %65

36:                                               ; preds = %10
  %37 = getelementptr inbounds %struct.MB_MODE_INFO, %struct.MB_MODE_INFO* %2, i64 0, i32 0
  %38 = load i8, i8* %37, align 8
  %39 = getelementptr inbounds %struct.AV1Common, %struct.AV1Common* %0, i64 0, i32 20, i32 1
  %40 = load i8, i8* %39, align 1, !range !2
  %41 = zext i8 %40 to i32
  %42 = getelementptr inbounds %struct.AV1Common, %struct.AV1Common* %0, i64 0, i32 20, i32 2
  %43 = load i8, i8* %42, align 2, !range !2
  %44 = zext i8 %43 to i32
  %45 = icmp slt i8 %3, 8
  %46 = sext i8 %3 to i64
  br i1 %45, label %47, label %53

47:                                               ; preds = %36
  %48 = getelementptr inbounds %struct.AV1Common, %struct.AV1Common* %0, i64 0, i32 34, i64 %46
  %49 = tail call fastcc i32 @gm_get_motion_vector(%struct.WarpedMotionParams* %48, i32 %41, i8 zeroext %38, i32 %26, i32 %24, i32 %44)
  store i32 %49, i32* %29, align 4
  store i32 0, i32* %30, align 4
  %50 = icmp eq %union.int_mv* %8, null
  br i1 %50, label %65, label %51

51:                                               ; preds = %47
  %52 = getelementptr inbounds %union.int_mv, %union.int_mv* %8, i64 %46, i32 0
  store i32 %49, i32* %52, align 4
  br label %65

53:                                               ; preds = %36
  %54 = add nsw i64 %46, -8
  %55 = getelementptr inbounds [21 x [2 x i8]], [21 x [2 x i8]]* @ref_frame_map, i64 0, i64 %54, i64 0
  %56 = load i8, i8* %55, align 2
  %57 = getelementptr inbounds [21 x [2 x i8]], [21 x [2 x i8]]* @ref_frame_map, i64 0, i64 %54, i64 1
  %58 = load i8, i8* %57, align 1
  %59 = sext i8 %56 to i64
  %60 = getelementptr inbounds %struct.AV1Common, %struct.AV1Common* %0, i64 0, i32 34, i64 %59
  %61 = tail call fastcc i32 @gm_get_motion_vector(%struct.WarpedMotionParams* %60, i32 %41, i8 zeroext %38, i32 %26, i32 %24, i32 %44)
  store i32 %61, i32* %29, align 4
  %62 = sext i8 %58 to i64
  %63 = getelementptr inbounds %struct.AV1Common, %struct.AV1Common* %0, i64 0, i32 34, i64 %62
  %64 = tail call fastcc i32 @gm_get_motion_vector(%struct.WarpedMotionParams* %63, i32 %41, i8 zeroext %38, i32 %26, i32 %24, i32 %44)
  store i32 %64, i32* %30, align 4
  br label %65

65:                                               ; preds = %53, %51, %47, %32, %34
  %66 = phi i32 [ %64, %53 ], [ 0, %51 ], [ 0, %47 ], [ 0, %32 ], [ 0, %34 ]
  %67 = phi i32 [ %61, %53 ], [ %49, %51 ], [ %49, %47 ], [ 0, %32 ], [ 0, %34 ]
  %68 = sext i8 %3 to i64
  %69 = getelementptr inbounds i8, i8* %4, i64 %68
  %70 = getelementptr inbounds [8 x %struct.candidate_mv], [8 x %struct.candidate_mv]* %5, i64 %68, i64 0
  %71 = getelementptr inbounds [8 x i16], [8 x i16]* %6, i64 %68, i64 0
  %72 = icmp eq [2 x %union.int_mv]* %7, null
  %73 = getelementptr inbounds [2 x %union.int_mv], [2 x %union.int_mv]* %7, i64 %68, i64 0
  %74 = select i1 %72, %union.int_mv* null, %union.int_mv* %73
  %75 = bitcast i64* %19 to [2 x i32]*
  %76 = bitcast i64* %20 to [2 x i32]*
  %77 = getelementptr inbounds %struct.macroblockd, %struct.macroblockd* %1, i64 0, i32 32
  %78 = load i8, i8* %77, align 4
  %79 = getelementptr inbounds %struct.macroblockd, %struct.macroblockd* %1, i64 0, i32 33
  %80 = load i8, i8* %79, align 1
  %81 = icmp ugt i8 %78, %80
  %82 = select i1 %81, i8 %78, i8 %80
  %83 = zext i8 %82 to i32
  %84 = getelementptr inbounds %struct.AV1Common, %struct.AV1Common* %0, i64 0, i32 35
  %85 = load %struct.SequenceHeader*, %struct.SequenceHeader** %84, align 16
  %86 = getelementptr inbounds %struct.SequenceHeader, %struct.SequenceHeader* %85, i64 0, i32 7
  %87 = load i8, i8* %86, align 4
  %88 = zext i8 %87 to i64
  %89 = getelementptr inbounds [22 x i8], [22 x i8]* @mi_size_wide, i64 0, i64 %88
  %90 = load i8, i8* %89, align 1
  %91 = zext i8 %90 to i32
  %92 = add nsw i32 %91, -1
  %93 = and i32 %92, %24
  %94 = and i32 %92, %26
  %95 = icmp ugt i8 %82, 16
  br i1 %95, label %147, label %96

96:                                               ; preds = %65
  %97 = and i32 %93, %83
  %98 = icmp eq i32 %97, 0
  br i1 %98, label %103, label %99

99:                                               ; preds = %96
  %100 = and i32 %94, %83
  %101 = icmp eq i32 %100, 0
  %102 = zext i1 %101 to i32
  br label %103

103:                                              ; preds = %99, %96
  %104 = phi i32 [ 1, %96 ], [ %102, %99 ]
  br label %105

105:                                              ; preds = %111, %103
  %106 = phi i32 [ %83, %103 ], [ %112, %111 ]
  %107 = icmp sge i32 %106, %91
  %108 = and i32 %106, %94
  %109 = icmp eq i32 %108, 0
  %110 = or i1 %107, %109
  br i1 %110, label %118, label %111

111:                                              ; preds = %105
  %112 = shl i32 %106, 1
  %113 = and i32 %112, %94
  %114 = icmp eq i32 %113, 0
  %115 = and i32 %112, %93
  %116 = icmp eq i32 %115, 0
  %117 = or i1 %114, %116
  br i1 %117, label %105, label %118

118:                                              ; preds = %111, %105
  %119 = phi i32 [ %104, %105 ], [ 0, %111 ]
  %120 = icmp ult i8 %78, %80
  br i1 %120, label %121, label %126

121:                                              ; preds = %118
  %122 = getelementptr inbounds %struct.macroblockd, %struct.macroblockd* %1, i64 0, i32 36
  %123 = load i8, i8* %122, align 8, !range !2
  %124 = icmp eq i8 %123, 0
  %125 = select i1 %124, i32 1, i32 %119
  br label %126

126:                                              ; preds = %121, %118
  %127 = phi i32 [ %119, %118 ], [ %125, %121 ]
  br i1 %81, label %128, label %133

128:                                              ; preds = %126
  %129 = getelementptr inbounds %struct.macroblockd, %struct.macroblockd* %1, i64 0, i32 37
  %130 = load i8, i8* %129, align 1, !range !2
  %131 = icmp eq i8 %130, 0
  %132 = select i1 %131, i32 0, i32 %127
  br label %133

133:                                              ; preds = %128, %126
  %134 = phi i32 [ %127, %126 ], [ %132, %128 ]
  %135 = getelementptr inbounds %struct.macroblockd, %struct.macroblockd* %1, i64 0, i32 6
  %136 = load %struct.MB_MODE_INFO**, %struct.MB_MODE_INFO*** %135, align 8
  %137 = load %struct.MB_MODE_INFO*, %struct.MB_MODE_INFO** %136, align 8
  %138 = getelementptr inbounds %struct.MB_MODE_INFO, %struct.MB_MODE_INFO* %137, i64 0, i32 1
  %139 = load i8, i8* %138, align 1
  %140 = icmp eq i8 %139, 6
  br i1 %140, label %141, label %147

141:                                              ; preds = %133
  %142 = icmp ne i8 %78, %80
  %143 = and i32 %106, %93
  %144 = icmp eq i32 %143, 0
  %145 = or i1 %142, %144
  %146 = select i1 %145, i32 %134, i32 0
  br label %147

147:                                              ; preds = %141, %133, %65
  %148 = phi i32 [ %146, %141 ], [ 0, %65 ], [ %134, %133 ]
  %149 = getelementptr inbounds [2 x i8], [2 x i8]* %11, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 2, i8* nonnull %149) #9
  store i8 -86, i8* %149, align 1
  %150 = getelementptr inbounds [2 x i8], [2 x i8]* %11, i64 0, i64 1
  store i8 -86, i8* %150, align 1
  %151 = icmp ult i8 %80, 2
  %152 = and i32 %24, 1
  %153 = icmp ne i32 %152, 0
  %154 = and i1 %153, %151
  %155 = zext i1 %154 to i32
  %156 = icmp ult i8 %78, 2
  %157 = and i32 %26, 1
  %158 = icmp ne i32 %157, 0
  %159 = and i1 %158, %156
  %160 = zext i1 %159 to i32
  %161 = icmp sgt i8 %3, 7
  br i1 %161, label %162, label %168

162:                                              ; preds = %147
  %163 = add nsw i64 %68, -8
  %164 = getelementptr inbounds [21 x [2 x i8]], [21 x [2 x i8]]* @ref_frame_map, i64 0, i64 %163, i64 0
  %165 = load i8, i8* %164, align 2
  store i8 %165, i8* %149, align 1
  %166 = getelementptr inbounds [21 x [2 x i8]], [21 x [2 x i8]]* @ref_frame_map, i64 0, i64 %163, i64 1
  %167 = load i8, i8* %166, align 1
  br label %169

168:                                              ; preds = %147
  store i8 %3, i8* %149, align 1
  br label %169

169:                                              ; preds = %168, %162
  %170 = phi i8 [ %167, %162 ], [ -1, %168 ]
  store i8 %170, i8* %150, align 1
  %171 = getelementptr inbounds i16, i16* %9, i64 %68
  store i16 0, i16* %171, align 2
  store i8 0, i8* %69, align 1
  %172 = getelementptr inbounds %struct.macroblockd, %struct.macroblockd* %1, i64 0, i32 7
  %173 = load i8, i8* %172, align 16, !range !2
  %174 = icmp eq i8 %173, 0
  br i1 %174, label %192, label %175

175:                                              ; preds = %169
  %176 = select i1 %154, i32 -5, i32 -6
  %177 = load i8, i8* %79, align 1
  %178 = icmp ult i8 %177, 2
  %179 = select i1 %154, i32 -3, i32 -4
  %180 = select i1 %178, i32 %179, i32 %176
  %181 = getelementptr inbounds %struct.macroblockd, %struct.macroblockd* %1, i64 0, i32 5, i32 0
  %182 = load i32, i32* %181, align 4
  %183 = sub nsw i32 %182, %24
  %184 = getelementptr inbounds %struct.macroblockd, %struct.macroblockd* %1, i64 0, i32 5, i32 1
  %185 = load i32, i32* %184, align 4
  %186 = xor i32 %24, -1
  %187 = add i32 %185, %186
  %188 = icmp sgt i32 %183, %180
  %189 = icmp slt i32 %187, %180
  %190 = select i1 %189, i32 %187, i32 %180
  %191 = select i1 %188, i32 %183, i32 %190
  br label %192

192:                                              ; preds = %175, %169
  %193 = phi i32 [ %191, %175 ], [ 0, %169 ]
  %194 = getelementptr inbounds %struct.macroblockd, %struct.macroblockd* %1, i64 0, i32 8
  %195 = load i8, i8* %194, align 1, !range !2
  %196 = icmp eq i8 %195, 0
  br i1 %196, label %214, label %197

197:                                              ; preds = %192
  %198 = select i1 %159, i32 -5, i32 -6
  %199 = load i8, i8* %77, align 4
  %200 = icmp ult i8 %199, 2
  %201 = select i1 %159, i32 -3, i32 -4
  %202 = select i1 %200, i32 %201, i32 %198
  %203 = getelementptr inbounds %struct.macroblockd, %struct.macroblockd* %1, i64 0, i32 5, i32 2
  %204 = load i32, i32* %203, align 4
  %205 = sub nsw i32 %204, %26
  %206 = getelementptr inbounds %struct.macroblockd, %struct.macroblockd* %1, i64 0, i32 5, i32 3
  %207 = load i32, i32* %206, align 4
  %208 = xor i32 %26, -1
  %209 = add i32 %207, %208
  %210 = icmp sgt i32 %205, %202
  %211 = icmp slt i32 %209, %202
  %212 = select i1 %211, i32 %209, i32 %202
  %213 = select i1 %210, i32 %205, i32 %212
  br label %214

214:                                              ; preds = %197, %192
  %215 = phi i32 [ %213, %197 ], [ 0, %192 ]
  call void @llvm.lifetime.start.p0i8(i64 1, i8* nonnull %12) #9
  store i8 0, i8* %12, align 1
  call void @llvm.lifetime.start.p0i8(i64 1, i8* nonnull %13) #9
  store i8 0, i8* %13, align 1
  call void @llvm.lifetime.start.p0i8(i64 1, i8* nonnull %14) #9
  store i8 0, i8* %14, align 1
  %216 = icmp slt i32 %193, 0
  %217 = sub i32 0, %193
  %218 = select i1 %216, i32 %217, i32 %193
  %219 = icmp sgt i32 %218, 0
  br i1 %219, label %220, label %281

220:                                              ; preds = %214
  %221 = load i8, i8* %77, align 4
  %222 = zext i8 %221 to i32
  %223 = getelementptr inbounds %struct.AV1Common, %struct.AV1Common* %0, i64 0, i32 21, i32 4
  %224 = load i32, i32* %223, align 16
  %225 = sub nsw i32 %224, %26
  %226 = icmp sgt i32 %225, %222
  %227 = select i1 %226, i32 %222, i32 %225
  %228 = icmp slt i32 %227, 16
  %229 = select i1 %228, i32 %227, i32 16
  %230 = icmp ugt i8 %221, 15
  %231 = getelementptr inbounds %struct.macroblockd, %struct.macroblockd* %1, i64 0, i32 6
  %232 = load %struct.MB_MODE_INFO**, %struct.MB_MODE_INFO*** %231, align 8
  %233 = getelementptr inbounds %struct.macroblockd, %struct.macroblockd* %1, i64 0, i32 2
  %234 = load i32, i32* %233, align 8
  %235 = sub nsw i32 0, %234
  %236 = sext i32 %235 to i64
  %237 = getelementptr inbounds %struct.MB_MODE_INFO*, %struct.MB_MODE_INFO** %232, i64 %236
  %238 = icmp sgt i32 %227, 0
  br i1 %238, label %239, label %281

239:                                              ; preds = %220
  %240 = getelementptr inbounds %struct.AV1Common, %struct.AV1Common* %0, i64 0, i32 34, i64 0
  br label %241

241:                                              ; preds = %279, %239
  %242 = phi i32 [ 0, %239 ], [ %272, %279 ]
  %243 = phi i8 [ %221, %239 ], [ %280, %279 ]
  %244 = phi i32 [ 0, %239 ], [ %277, %279 ]
  %245 = zext i32 %244 to i64
  %246 = getelementptr inbounds %struct.MB_MODE_INFO*, %struct.MB_MODE_INFO** %237, i64 %245
  %247 = load %struct.MB_MODE_INFO*, %struct.MB_MODE_INFO** %246, align 8
  %248 = getelementptr inbounds %struct.MB_MODE_INFO, %struct.MB_MODE_INFO* %247, i64 0, i32 0
  %249 = load i8, i8* %248, align 8
  %250 = zext i8 %249 to i64
  %251 = getelementptr inbounds [22 x i8], [22 x i8]* @mi_size_wide, i64 0, i64 %250
  %252 = load i8, i8* %251, align 1
  %253 = icmp ult i8 %243, %252
  %254 = select i1 %253, i8 %243, i8 %252
  %255 = zext i8 %254 to i32
  %256 = icmp ugt i32 %255, 4
  %257 = select i1 %256, i32 %255, i32 4
  %258 = select i1 %230, i32 %257, i32 %255
  %259 = icmp ult i8 %243, 2
  %260 = icmp ugt i8 %243, %252
  %261 = or i1 %259, %260
  br i1 %261, label %271, label %262

262:                                              ; preds = %241
  %263 = getelementptr inbounds [22 x i8], [22 x i8]* @mi_size_high, i64 0, i64 %250
  %264 = load i8, i8* %263, align 1
  %265 = zext i8 %264 to i32
  %266 = icmp slt i32 %217, %265
  %267 = select i1 %266, i32 %217, i32 %265
  %268 = and i32 %267, 65535
  %269 = icmp ugt i32 %268, 2
  %270 = select i1 %269, i32 %268, i32 2
  br label %271

271:                                              ; preds = %262, %241
  %272 = phi i32 [ %242, %241 ], [ %268, %262 ]
  %273 = phi i32 [ 2, %241 ], [ %270, %262 ]
  %274 = and i32 %273, 65535
  %275 = mul nuw nsw i32 %274, %258
  %276 = trunc i32 %275 to i16
  call fastcc void @add_ref_mv_candidate(%struct.MB_MODE_INFO* %247, i8* nonnull %149, i8* %69, i8* nonnull %13, i8* nonnull %14, %struct.candidate_mv* %70, i16* %71, %union.int_mv* nonnull %28, %struct.WarpedMotionParams* %240, i16 zeroext %276) #9
  %277 = add nuw nsw i32 %258, %244
  %278 = icmp slt i32 %277, %229
  br i1 %278, label %279, label %281

279:                                              ; preds = %271
  %280 = load i8, i8* %77, align 4
  br label %241

281:                                              ; preds = %271, %220, %214
  %282 = phi i32 [ 0, %214 ], [ 0, %220 ], [ %272, %271 ]
  %283 = icmp slt i32 %215, 0
  %284 = sub i32 0, %215
  %285 = select i1 %283, i32 %284, i32 %215
  %286 = icmp sgt i32 %285, 0
  br i1 %286, label %287, label %345

287:                                              ; preds = %281
  %288 = load i8, i8* %79, align 1
  %289 = zext i8 %288 to i32
  %290 = getelementptr inbounds %struct.AV1Common, %struct.AV1Common* %0, i64 0, i32 21, i32 3
  %291 = load i32, i32* %290, align 4
  %292 = sub nsw i32 %291, %24
  %293 = icmp sgt i32 %292, %289
  %294 = select i1 %293, i32 %289, i32 %292
  %295 = icmp slt i32 %294, 16
  %296 = select i1 %295, i32 %294, i32 16
  %297 = icmp ugt i8 %288, 15
  %298 = icmp sgt i32 %294, 0
  br i1 %298, label %299, label %345

299:                                              ; preds = %287
  %300 = getelementptr inbounds %struct.macroblockd, %struct.macroblockd* %1, i64 0, i32 6
  %301 = getelementptr inbounds %struct.macroblockd, %struct.macroblockd* %1, i64 0, i32 2
  %302 = getelementptr inbounds %struct.AV1Common, %struct.AV1Common* %0, i64 0, i32 34, i64 0
  br label %303

303:                                              ; preds = %343, %299
  %304 = phi i32 [ 0, %299 ], [ %337, %343 ]
  %305 = phi i8 [ %288, %299 ], [ %344, %343 ]
  %306 = phi i32 [ 0, %299 ], [ %341, %343 ]
  %307 = load %struct.MB_MODE_INFO**, %struct.MB_MODE_INFO*** %300, align 8
  %308 = load i32, i32* %301, align 8
  %309 = mul nsw i32 %308, %306
  %310 = add nsw i32 %309, -1
  %311 = sext i32 %310 to i64
  %312 = getelementptr inbounds %struct.MB_MODE_INFO*, %struct.MB_MODE_INFO** %307, i64 %311
  %313 = load %struct.MB_MODE_INFO*, %struct.MB_MODE_INFO** %312, align 8
  %314 = getelementptr inbounds %struct.MB_MODE_INFO, %struct.MB_MODE_INFO* %313, i64 0, i32 0
  %315 = load i8, i8* %314, align 8
  %316 = zext i8 %315 to i64
  %317 = getelementptr inbounds [22 x i8], [22 x i8]* @mi_size_high, i64 0, i64 %316
  %318 = load i8, i8* %317, align 1
  %319 = icmp ult i8 %305, %318
  %320 = select i1 %319, i8 %305, i8 %318
  %321 = zext i8 %320 to i32
  %322 = icmp ugt i32 %321, 4
  %323 = select i1 %322, i32 %321, i32 4
  %324 = select i1 %297, i32 %323, i32 %321
  %325 = icmp ult i8 %305, 2
  %326 = icmp ugt i8 %305, %318
  %327 = or i1 %325, %326
  br i1 %327, label %336, label %328

328:                                              ; preds = %303
  %329 = getelementptr inbounds [22 x i8], [22 x i8]* @mi_size_wide, i64 0, i64 %316
  %330 = load i8, i8* %329, align 1
  %331 = zext i8 %330 to i32
  %332 = icmp slt i32 %284, %331
  %333 = select i1 %332, i32 %284, i32 %331
  %334 = icmp sgt i32 %333, 2
  %335 = select i1 %334, i32 %333, i32 2
  br label %336

336:                                              ; preds = %328, %303
  %337 = phi i32 [ %304, %303 ], [ %333, %328 ]
  %338 = phi i32 [ 2, %303 ], [ %335, %328 ]
  %339 = mul nsw i32 %338, %324
  %340 = trunc i32 %339 to i16
  call fastcc void @add_ref_mv_candidate(%struct.MB_MODE_INFO* %313, i8* nonnull %149, i8* %69, i8* nonnull %12, i8* nonnull %14, %struct.candidate_mv* %70, i16* %71, %union.int_mv* nonnull %28, %struct.WarpedMotionParams* %302, i16 zeroext %340) #9
  %341 = add nuw nsw i32 %324, %306
  %342 = icmp slt i32 %341, %296
  br i1 %342, label %343, label %345

343:                                              ; preds = %336
  %344 = load i8, i8* %79, align 1
  br label %303

345:                                              ; preds = %336, %287, %281
  %346 = phi i32 [ 0, %281 ], [ 0, %287 ], [ %337, %336 ]
  %347 = icmp eq i32 %148, 0
  br i1 %347, label %377, label %348

348:                                              ; preds = %345
  %349 = load i8, i8* %77, align 4
  %350 = zext i8 %349 to i32
  %351 = getelementptr inbounds %struct.macroblockd, %struct.macroblockd* %1, i64 0, i32 5, i32 0
  %352 = load i32, i32* %351, align 4
  %353 = icmp slt i32 %352, %24
  br i1 %353, label %354, label %377

354:                                              ; preds = %348
  %355 = add nsw i32 %26, %350
  %356 = getelementptr inbounds %struct.macroblockd, %struct.macroblockd* %1, i64 0, i32 5, i32 2
  %357 = load i32, i32* %356, align 4
  %358 = icmp slt i32 %355, %357
  br i1 %358, label %377, label %359

359:                                              ; preds = %354
  %360 = getelementptr inbounds %struct.macroblockd, %struct.macroblockd* %1, i64 0, i32 5, i32 1
  %361 = load i32, i32* %360, align 4
  %362 = icmp slt i32 %361, %24
  br i1 %362, label %377, label %363

363:                                              ; preds = %359
  %364 = getelementptr inbounds %struct.macroblockd, %struct.macroblockd* %1, i64 0, i32 5, i32 3
  %365 = load i32, i32* %364, align 4
  %366 = icmp slt i32 %355, %365
  br i1 %366, label %367, label %377

367:                                              ; preds = %363
  %368 = getelementptr inbounds %struct.macroblockd, %struct.macroblockd* %1, i64 0, i32 6
  %369 = load %struct.MB_MODE_INFO**, %struct.MB_MODE_INFO*** %368, align 8
  %370 = getelementptr inbounds %struct.macroblockd, %struct.macroblockd* %1, i64 0, i32 2
  %371 = load i32, i32* %370, align 8
  %372 = sub i32 %350, %371
  %373 = sext i32 %372 to i64
  %374 = getelementptr inbounds %struct.MB_MODE_INFO*, %struct.MB_MODE_INFO** %369, i64 %373
  %375 = load %struct.MB_MODE_INFO*, %struct.MB_MODE_INFO** %374, align 8
  %376 = getelementptr inbounds %struct.AV1Common, %struct.AV1Common* %0, i64 0, i32 34, i64 0
  call fastcc void @add_ref_mv_candidate(%struct.MB_MODE_INFO* %375, i8* nonnull %149, i8* %69, i8* nonnull %13, i8* nonnull %14, %struct.candidate_mv* %70, i16* %71, %union.int_mv* nonnull %28, %struct.WarpedMotionParams* %376, i16 zeroext 4) #9
  br label %377

377:                                              ; preds = %367, %363, %359, %354, %348, %345
  %378 = load i8, i8* %13, align 1
  %379 = icmp ne i8 %378, 0
  %380 = zext i1 %379 to i32
  %381 = load i8, i8* %12, align 1
  %382 = icmp ne i8 %381, 0
  %383 = zext i1 %382 to i32
  %384 = add nuw nsw i32 %383, %380
  %385 = load i8, i8* %69, align 1
  %386 = zext i8 %385 to i32
  %387 = icmp eq i8 %385, 0
  br i1 %387, label %445, label %388

388:                                              ; preds = %377
  %389 = zext i8 %385 to i64
  %390 = icmp ult i8 %385, 16
  br i1 %390, label %391, label %393

391:                                              ; preds = %443, %388
  %392 = phi i64 [ 0, %388 ], [ %394, %443 ]
  br label %449

393:                                              ; preds = %388
  %394 = and i64 %389, 240
  %395 = add nsw i64 %394, -16
  %396 = lshr exact i64 %395, 4
  %397 = add nuw nsw i64 %396, 1
  %398 = and i64 %397, 1
  %399 = icmp eq i64 %395, 0
  br i1 %399, label %429, label %400

400:                                              ; preds = %393
  %401 = sub nuw nsw i64 %397, %398
  br label %402

402:                                              ; preds = %402, %400
  %403 = phi i64 [ 0, %400 ], [ %426, %402 ]
  %404 = phi i64 [ %401, %400 ], [ %427, %402 ]
  %405 = getelementptr inbounds [8 x i16], [8 x i16]* %6, i64 %68, i64 %403
  %406 = bitcast i16* %405 to <8 x i16>*
  %407 = load <8 x i16>, <8 x i16>* %406, align 2
  %408 = getelementptr inbounds i16, i16* %405, i64 8
  %409 = bitcast i16* %408 to <8 x i16>*
  %410 = load <8 x i16>, <8 x i16>* %409, align 2
  %411 = add <8 x i16> %407, <i16 640, i16 640, i16 640, i16 640, i16 640, i16 640, i16 640, i16 640>
  %412 = add <8 x i16> %410, <i16 640, i16 640, i16 640, i16 640, i16 640, i16 640, i16 640, i16 640>
  %413 = bitcast i16* %405 to <8 x i16>*
  store <8 x i16> %411, <8 x i16>* %413, align 2
  %414 = bitcast i16* %408 to <8 x i16>*
  store <8 x i16> %412, <8 x i16>* %414, align 2
  %415 = or i64 %403, 16
  %416 = getelementptr inbounds [8 x i16], [8 x i16]* %6, i64 %68, i64 %415
  %417 = bitcast i16* %416 to <8 x i16>*
  %418 = load <8 x i16>, <8 x i16>* %417, align 2
  %419 = getelementptr inbounds i16, i16* %416, i64 8
  %420 = bitcast i16* %419 to <8 x i16>*
  %421 = load <8 x i16>, <8 x i16>* %420, align 2
  %422 = add <8 x i16> %418, <i16 640, i16 640, i16 640, i16 640, i16 640, i16 640, i16 640, i16 640>
  %423 = add <8 x i16> %421, <i16 640, i16 640, i16 640, i16 640, i16 640, i16 640, i16 640, i16 640>
  %424 = bitcast i16* %416 to <8 x i16>*
  store <8 x i16> %422, <8 x i16>* %424, align 2
  %425 = bitcast i16* %419 to <8 x i16>*
  store <8 x i16> %423, <8 x i16>* %425, align 2
  %426 = add i64 %403, 32
  %427 = add i64 %404, -2
  %428 = icmp eq i64 %427, 0
  br i1 %428, label %429, label %402, !llvm.loop !3

429:                                              ; preds = %402, %393
  %430 = phi i64 [ 0, %393 ], [ %426, %402 ]
  %431 = icmp eq i64 %398, 0
  br i1 %431, label %443, label %432

432:                                              ; preds = %429
  %433 = getelementptr inbounds [8 x i16], [8 x i16]* %6, i64 %68, i64 %430
  %434 = bitcast i16* %433 to <8 x i16>*
  %435 = load <8 x i16>, <8 x i16>* %434, align 2
  %436 = getelementptr inbounds i16, i16* %433, i64 8
  %437 = bitcast i16* %436 to <8 x i16>*
  %438 = load <8 x i16>, <8 x i16>* %437, align 2
  %439 = add <8 x i16> %435, <i16 640, i16 640, i16 640, i16 640, i16 640, i16 640, i16 640, i16 640>
  %440 = add <8 x i16> %438, <i16 640, i16 640, i16 640, i16 640, i16 640, i16 640, i16 640, i16 640>
  %441 = bitcast i16* %433 to <8 x i16>*
  store <8 x i16> %439, <8 x i16>* %441, align 2
  %442 = bitcast i16* %436 to <8 x i16>*
  store <8 x i16> %440, <8 x i16>* %442, align 2
  br label %443

443:                                              ; preds = %429, %432
  %444 = icmp eq i64 %394, %389
  br i1 %444, label %445, label %391

445:                                              ; preds = %449, %443, %377
  %446 = getelementptr inbounds %struct.AV1Common, %struct.AV1Common* %0, i64 0, i32 20, i32 6
  %447 = load i8, i8* %446, align 2, !range !2
  %448 = icmp eq i8 %447, 0
  br i1 %448, label %535, label %456

449:                                              ; preds = %391, %449
  %450 = phi i64 [ %454, %449 ], [ %392, %391 ]
  %451 = getelementptr inbounds [8 x i16], [8 x i16]* %6, i64 %68, i64 %450
  %452 = load i16, i16* %451, align 2
  %453 = add i16 %452, 640
  store i16 %453, i16* %451, align 2
  %454 = add nuw nsw i64 %450, 1
  %455 = icmp eq i64 %454, %389
  br i1 %455, label %445, label %449, !llvm.loop !5

456:                                              ; preds = %445
  %457 = load i8, i8* %79, align 1
  %458 = icmp ugt i8 %457, 2
  %459 = select i1 %458, i8 %457, i8 2
  %460 = zext i8 %459 to i32
  %461 = load i8, i8* %77, align 4
  %462 = icmp ugt i8 %461, 2
  %463 = select i1 %462, i8 %461, i8 2
  %464 = zext i8 %463 to i32
  %465 = icmp ult i8 %457, 16
  %466 = select i1 %465, i8 %457, i8 16
  %467 = zext i8 %466 to i32
  %468 = icmp ult i8 %461, 16
  %469 = select i1 %468, i8 %461, i8 16
  %470 = zext i8 %469 to i32
  %471 = bitcast [3 x [2 x i32]]* %15 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %471) #9
  %472 = getelementptr inbounds [3 x [2 x i32]], [3 x [2 x i32]]* %15, i64 0, i64 0, i64 0
  %473 = getelementptr inbounds [3 x [2 x i32]], [3 x [2 x i32]]* %15, i64 0, i64 0, i64 1
  %474 = getelementptr inbounds [3 x [2 x i32]], [3 x [2 x i32]]* %15, i64 0, i64 1, i64 0
  %475 = getelementptr inbounds [3 x [2 x i32]], [3 x [2 x i32]]* %15, i64 0, i64 1, i64 1
  %476 = getelementptr inbounds [3 x [2 x i32]], [3 x [2 x i32]]* %15, i64 0, i64 2, i64 0
  %477 = getelementptr inbounds [3 x [2 x i32]], [3 x [2 x i32]]* %15, i64 0, i64 2, i64 1
  store i32 %460, i32* %472, align 16
  store i32 -2, i32* %473, align 4
  store i32 %460, i32* %474, align 8
  store i32 %464, i32* %475, align 4
  %478 = add nsw i32 %460, -2
  store i32 %478, i32* %476, align 16
  store i32 %464, i32* %477, align 4
  %479 = add i8 %457, -2
  %480 = icmp ult i8 %479, 14
  %481 = add i8 %461, -2
  %482 = icmp ult i8 %481, 14
  %483 = and i1 %480, %482
  %484 = icmp ugt i8 %457, 15
  %485 = select i1 %484, i32 4, i32 2
  %486 = icmp ugt i8 %461, 15
  %487 = select i1 %486, i32 4, i32 2
  %488 = icmp eq i8 %466, 0
  br i1 %488, label %509, label %489

489:                                              ; preds = %456
  %490 = icmp eq i8 %469, 0
  br label %491

491:                                              ; preds = %496, %489
  %492 = phi i32 [ 0, %489 ], [ %498, %496 ]
  %493 = phi i32 [ 0, %489 ], [ %497, %496 ]
  br i1 %490, label %496, label %500

494:                                              ; preds = %496
  %495 = icmp eq i32 %497, 0
  br i1 %495, label %509, label %512

496:                                              ; preds = %500, %491
  %497 = phi i32 [ %493, %491 ], [ %506, %500 ]
  %498 = add nuw nsw i32 %492, %485
  %499 = icmp ult i32 %498, %467
  br i1 %499, label %491, label %494

500:                                              ; preds = %491, %500
  %501 = phi i32 [ %507, %500 ], [ 0, %491 ]
  %502 = phi i32 [ %506, %500 ], [ %493, %491 ]
  %503 = call fastcc i32 @add_tpl_ref_mv(%struct.AV1Common* %0, %struct.macroblockd* %1, i32 %24, i32 %26, i8 signext %3, i32 %492, i32 %501, %union.int_mv* nonnull %28, i8* %69, %struct.candidate_mv* %70, i16* %71, i16* %9) #9
  %504 = or i32 %501, %492
  %505 = icmp eq i32 %504, 0
  %506 = select i1 %505, i32 %503, i32 %502
  %507 = add nuw nsw i32 %501, %487
  %508 = icmp ult i32 %507, %470
  br i1 %508, label %500, label %496

509:                                              ; preds = %494, %456
  %510 = load i16, i16* %171, align 2
  %511 = or i16 %510, 8
  store i16 %511, i16* %171, align 2
  br label %512

512:                                              ; preds = %509, %494
  br i1 %483, label %513, label %516

513:                                              ; preds = %512
  %514 = and i32 %24, 15
  %515 = and i32 %26, 15
  br label %517

516:                                              ; preds = %527, %512
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %471) #9
  br label %535

517:                                              ; preds = %530, %513
  %518 = phi i32 [ -2, %513 ], [ %534, %530 ]
  %519 = phi i32 [ %460, %513 ], [ %532, %530 ]
  %520 = phi i64 [ 0, %513 ], [ %528, %530 ]
  %521 = add nsw i32 %519, %514
  %522 = add nsw i32 %518, %515
  %523 = or i32 %521, %522
  %524 = icmp ugt i32 %523, 15
  br i1 %524, label %527, label %525

525:                                              ; preds = %517
  %526 = call fastcc i32 @add_tpl_ref_mv(%struct.AV1Common* %0, %struct.macroblockd* %1, i32 %24, i32 %26, i8 signext %3, i32 %519, i32 %518, %union.int_mv* nonnull %28, i8* %69, %struct.candidate_mv* %70, i16* %71, i16* %9) #9
  br label %527

527:                                              ; preds = %525, %517
  %528 = add nuw nsw i64 %520, 1
  %529 = icmp eq i64 %520, 2
  br i1 %529, label %516, label %530

530:                                              ; preds = %527
  %531 = getelementptr inbounds [3 x [2 x i32]], [3 x [2 x i32]]* %15, i64 0, i64 %528, i64 0
  %532 = load i32, i32* %531, align 8
  %533 = getelementptr inbounds [3 x [2 x i32]], [3 x [2 x i32]]* %15, i64 0, i64 %528, i64 1
  %534 = load i32, i32* %533, align 4
  br label %517

535:                                              ; preds = %516, %445
  call void @llvm.lifetime.start.p0i8(i64 1, i8* nonnull %16) #9
  store i8 0, i8* %16, align 1
  %536 = getelementptr inbounds %struct.macroblockd, %struct.macroblockd* %1, i64 0, i32 5, i32 0
  %537 = load i32, i32* %536, align 4
  %538 = icmp slt i32 %537, %24
  br i1 %538, label %539, label %561

539:                                              ; preds = %535
  %540 = getelementptr inbounds %struct.macroblockd, %struct.macroblockd* %1, i64 0, i32 5, i32 2
  %541 = load i32, i32* %540, align 4
  %542 = icmp slt i32 %541, %26
  br i1 %542, label %543, label %561

543:                                              ; preds = %539
  %544 = getelementptr inbounds %struct.macroblockd, %struct.macroblockd* %1, i64 0, i32 5, i32 1
  %545 = load i32, i32* %544, align 4
  %546 = icmp slt i32 %545, %24
  br i1 %546, label %561, label %547

547:                                              ; preds = %543
  %548 = getelementptr inbounds %struct.macroblockd, %struct.macroblockd* %1, i64 0, i32 5, i32 3
  %549 = load i32, i32* %548, align 4
  %550 = icmp slt i32 %549, %26
  br i1 %550, label %561, label %551

551:                                              ; preds = %547
  %552 = getelementptr inbounds %struct.macroblockd, %struct.macroblockd* %1, i64 0, i32 6
  %553 = load %struct.MB_MODE_INFO**, %struct.MB_MODE_INFO*** %552, align 8
  %554 = getelementptr inbounds %struct.macroblockd, %struct.macroblockd* %1, i64 0, i32 2
  %555 = load i32, i32* %554, align 8
  %556 = xor i32 %555, -1
  %557 = sext i32 %556 to i64
  %558 = getelementptr inbounds %struct.MB_MODE_INFO*, %struct.MB_MODE_INFO** %553, i64 %557
  %559 = load %struct.MB_MODE_INFO*, %struct.MB_MODE_INFO** %558, align 8
  %560 = getelementptr inbounds %struct.AV1Common, %struct.AV1Common* %0, i64 0, i32 34, i64 0
  call fastcc void @add_ref_mv_candidate(%struct.MB_MODE_INFO* %559, i8* nonnull %149, i8* %69, i8* nonnull %13, i8* nonnull %16, %struct.candidate_mv* %70, i16* %71, %union.int_mv* nonnull %28, %struct.WarpedMotionParams* %560, i16 zeroext 4) #9
  br label %561

561:                                              ; preds = %551, %547, %543, %539, %535
  %562 = getelementptr inbounds %struct.AV1Common, %struct.AV1Common* %0, i64 0, i32 21, i32 4
  %563 = getelementptr inbounds %struct.macroblockd, %struct.macroblockd* %1, i64 0, i32 6
  %564 = getelementptr inbounds %struct.macroblockd, %struct.macroblockd* %1, i64 0, i32 2
  %565 = getelementptr inbounds %struct.AV1Common, %struct.AV1Common* %0, i64 0, i32 34, i64 0
  %566 = getelementptr inbounds %struct.AV1Common, %struct.AV1Common* %0, i64 0, i32 21, i32 3
  %567 = xor i32 %157, 1
  %568 = xor i32 %152, 1
  br label %577

569:                                              ; preds = %726
  %570 = load i8, i8* %13, align 1
  %571 = icmp ne i8 %570, 0
  %572 = zext i1 %571 to i8
  %573 = load i8, i8* %12, align 1
  %574 = icmp ne i8 %573, 0
  %575 = zext i1 %574 to i8
  %576 = add nuw nsw i8 %575, %572
  switch i32 %384, label %750 [
    i32 0, label %730
    i32 1, label %740
  ]

577:                                              ; preds = %726, %561
  %578 = phi i32 [ 2, %561 ], [ %728, %726 ]
  %579 = phi i32 [ %346, %561 ], [ %727, %726 ]
  %580 = phi i32 [ %282, %561 ], [ %657, %726 ]
  %581 = shl nuw i32 %578, 1
  %582 = sub nsw i32 1, %581
  %583 = add nuw nsw i32 %582, %155
  %584 = add nuw nsw i32 %582, %160
  %585 = sub nsw i32 0, %583
  %586 = icmp sge i32 %218, %585
  %587 = icmp slt i32 %580, %585
  %588 = and i1 %586, %587
  br i1 %588, label %589, label %656

589:                                              ; preds = %577
  %590 = load i8, i8* %77, align 4
  %591 = zext i8 %590 to i32
  %592 = load i32, i32* %562, align 16
  %593 = sub nsw i32 %592, %26
  %594 = icmp sgt i32 %593, %591
  %595 = select i1 %594, i32 %591, i32 %593
  %596 = icmp slt i32 %595, 16
  %597 = select i1 %596, i32 %595, i32 16
  %598 = icmp ugt i8 %590, 1
  %599 = zext i1 %598 to i32
  %600 = or i32 %567, %599
  %601 = icmp ugt i8 %590, 15
  %602 = load %struct.MB_MODE_INFO**, %struct.MB_MODE_INFO*** %563, align 8
  %603 = load i32, i32* %564, align 8
  %604 = mul nsw i32 %603, %583
  %605 = sext i32 %604 to i64
  %606 = getelementptr inbounds %struct.MB_MODE_INFO*, %struct.MB_MODE_INFO** %602, i64 %605
  %607 = icmp sgt i32 %595, 0
  br i1 %607, label %608, label %656

608:                                              ; preds = %589
  %609 = sub i32 %583, %193
  %610 = add nsw i32 %609, 1
  %611 = xor i32 %583, -1
  br label %612

612:                                              ; preds = %654, %608
  %613 = phi i32 [ %580, %608 ], [ %647, %654 ]
  %614 = phi i8 [ %590, %608 ], [ %655, %654 ]
  %615 = phi i32 [ 0, %608 ], [ %652, %654 ]
  %616 = add nuw nsw i32 %615, %600
  %617 = zext i32 %616 to i64
  %618 = getelementptr inbounds %struct.MB_MODE_INFO*, %struct.MB_MODE_INFO** %606, i64 %617
  %619 = load %struct.MB_MODE_INFO*, %struct.MB_MODE_INFO** %618, align 8
  %620 = getelementptr inbounds %struct.MB_MODE_INFO, %struct.MB_MODE_INFO* %619, i64 0, i32 0
  %621 = load i8, i8* %620, align 8
  %622 = zext i8 %621 to i64
  %623 = getelementptr inbounds [22 x i8], [22 x i8]* @mi_size_wide, i64 0, i64 %622
  %624 = load i8, i8* %623, align 1
  %625 = icmp ult i8 %614, %624
  %626 = select i1 %625, i8 %614, i8 %624
  %627 = zext i8 %626 to i32
  %628 = icmp ugt i32 %627, 4
  %629 = select i1 %628, i32 %627, i32 4
  %630 = icmp ugt i32 %627, 2
  %631 = select i1 %630, i32 %627, i32 2
  %632 = select i1 %601, i32 %629, i32 %631
  %633 = icmp ult i8 %614, 2
  %634 = icmp ugt i8 %614, %624
  %635 = or i1 %633, %634
  br i1 %635, label %646, label %636

636:                                              ; preds = %612
  %637 = getelementptr inbounds [22 x i8], [22 x i8]* @mi_size_high, i64 0, i64 %622
  %638 = load i8, i8* %637, align 1
  %639 = zext i8 %638 to i32
  %640 = icmp slt i32 %610, %639
  %641 = select i1 %640, i32 %610, i32 %639
  %642 = and i32 %641, 65535
  %643 = icmp ugt i32 %642, 2
  %644 = select i1 %643, i32 %642, i32 2
  %645 = add i32 %642, %611
  br label %646

646:                                              ; preds = %636, %612
  %647 = phi i32 [ %613, %612 ], [ %645, %636 ]
  %648 = phi i32 [ 2, %612 ], [ %644, %636 ]
  %649 = and i32 %648, 65535
  %650 = mul nuw nsw i32 %649, %632
  %651 = trunc i32 %650 to i16
  call fastcc void @add_ref_mv_candidate(%struct.MB_MODE_INFO* %619, i8* nonnull %149, i8* %69, i8* nonnull %13, i8* nonnull %16, %struct.candidate_mv* %70, i16* %71, %union.int_mv* nonnull %28, %struct.WarpedMotionParams* %565, i16 zeroext %651) #9
  %652 = add nuw nsw i32 %632, %615
  %653 = icmp slt i32 %652, %597
  br i1 %653, label %654, label %656

654:                                              ; preds = %646
  %655 = load i8, i8* %77, align 4
  br label %612

656:                                              ; preds = %646, %589, %577
  %657 = phi i32 [ %580, %577 ], [ %580, %589 ], [ %647, %646 ]
  %658 = sub nsw i32 0, %584
  %659 = icmp sge i32 %285, %658
  %660 = icmp slt i32 %579, %658
  %661 = and i1 %659, %660
  br i1 %661, label %662, label %726

662:                                              ; preds = %656
  %663 = load i8, i8* %79, align 1
  %664 = zext i8 %663 to i32
  %665 = load i32, i32* %566, align 4
  %666 = sub nsw i32 %665, %24
  %667 = icmp sgt i32 %666, %664
  %668 = select i1 %667, i32 %664, i32 %666
  %669 = icmp slt i32 %668, 16
  %670 = select i1 %669, i32 %668, i32 16
  %671 = icmp ugt i8 %663, 1
  %672 = zext i1 %671 to i32
  %673 = or i32 %568, %672
  %674 = icmp ugt i8 %663, 15
  %675 = icmp sgt i32 %668, 0
  br i1 %675, label %676, label %726

676:                                              ; preds = %662
  %677 = sub i32 %584, %215
  %678 = add nsw i32 %677, 1
  %679 = xor i32 %584, -1
  br label %680

680:                                              ; preds = %724, %676
  %681 = phi i32 [ %579, %676 ], [ %718, %724 ]
  %682 = phi i8 [ %663, %676 ], [ %725, %724 ]
  %683 = phi i32 [ 0, %676 ], [ %722, %724 ]
  %684 = load %struct.MB_MODE_INFO**, %struct.MB_MODE_INFO*** %563, align 8
  %685 = add nuw nsw i32 %683, %673
  %686 = load i32, i32* %564, align 8
  %687 = mul nsw i32 %686, %685
  %688 = add nsw i32 %687, %584
  %689 = sext i32 %688 to i64
  %690 = getelementptr inbounds %struct.MB_MODE_INFO*, %struct.MB_MODE_INFO** %684, i64 %689
  %691 = load %struct.MB_MODE_INFO*, %struct.MB_MODE_INFO** %690, align 8
  %692 = getelementptr inbounds %struct.MB_MODE_INFO, %struct.MB_MODE_INFO* %691, i64 0, i32 0
  %693 = load i8, i8* %692, align 8
  %694 = zext i8 %693 to i64
  %695 = getelementptr inbounds [22 x i8], [22 x i8]* @mi_size_high, i64 0, i64 %694
  %696 = load i8, i8* %695, align 1
  %697 = icmp ult i8 %682, %696
  %698 = select i1 %697, i8 %682, i8 %696
  %699 = zext i8 %698 to i32
  %700 = icmp ugt i32 %699, 4
  %701 = select i1 %700, i32 %699, i32 4
  %702 = icmp ugt i32 %699, 2
  %703 = select i1 %702, i32 %699, i32 2
  %704 = select i1 %674, i32 %701, i32 %703
  %705 = icmp ult i8 %682, 2
  %706 = icmp ugt i8 %682, %696
  %707 = or i1 %705, %706
  br i1 %707, label %717, label %708

708:                                              ; preds = %680
  %709 = getelementptr inbounds [22 x i8], [22 x i8]* @mi_size_wide, i64 0, i64 %694
  %710 = load i8, i8* %709, align 1
  %711 = zext i8 %710 to i32
  %712 = icmp slt i32 %678, %711
  %713 = select i1 %712, i32 %678, i32 %711
  %714 = icmp sgt i32 %713, 2
  %715 = select i1 %714, i32 %713, i32 2
  %716 = add i32 %713, %679
  br label %717

717:                                              ; preds = %708, %680
  %718 = phi i32 [ %681, %680 ], [ %716, %708 ]
  %719 = phi i32 [ 2, %680 ], [ %715, %708 ]
  %720 = mul nsw i32 %719, %704
  %721 = trunc i32 %720 to i16
  call fastcc void @add_ref_mv_candidate(%struct.MB_MODE_INFO* %691, i8* nonnull %149, i8* %69, i8* nonnull %12, i8* nonnull %16, %struct.candidate_mv* %70, i16* %71, %union.int_mv* nonnull %28, %struct.WarpedMotionParams* %565, i16 zeroext %721) #9
  %722 = add nuw nsw i32 %704, %683
  %723 = icmp slt i32 %722, %670
  br i1 %723, label %724, label %726

724:                                              ; preds = %717
  %725 = load i8, i8* %79, align 1
  br label %680

726:                                              ; preds = %717, %662, %656
  %727 = phi i32 [ %579, %656 ], [ %579, %662 ], [ %718, %717 ]
  %728 = add nuw nsw i32 %578, 1
  %729 = icmp eq i32 %728, 4
  br i1 %729, label %569, label %577

730:                                              ; preds = %569
  %731 = icmp eq i8 %576, 0
  br i1 %731, label %757, label %732

732:                                              ; preds = %730
  %733 = load i16, i16* %171, align 2
  %734 = or i16 %733, 1
  store i16 %734, i16* %171, align 2
  %735 = icmp eq i8 %576, 1
  br i1 %735, label %736, label %738

736:                                              ; preds = %732
  %737 = or i16 %733, 17
  store i16 %737, i16* %171, align 2
  br label %757

738:                                              ; preds = %732
  %739 = or i16 %733, 33
  store i16 %739, i16* %171, align 2
  br label %757

740:                                              ; preds = %569
  %741 = load i8, i8* %14, align 1
  %742 = icmp eq i8 %741, 0
  %743 = select i1 %742, i16 3, i16 2
  %744 = load i16, i16* %171, align 2
  %745 = or i16 %743, %744
  store i16 %745, i16* %171, align 2
  switch i8 %576, label %748 [
    i8 1, label %746
    i8 0, label %757
  ]

746:                                              ; preds = %740
  %747 = or i16 %745, 48
  store i16 %747, i16* %171, align 2
  br label %757

748:                                              ; preds = %740
  %749 = or i16 %745, 64
  store i16 %749, i16* %171, align 2
  br label %757

750:                                              ; preds = %569
  %751 = load i8, i8* %14, align 1
  %752 = icmp eq i8 %751, 0
  %753 = load i16, i16* %171, align 2
  %754 = select i1 %752, i16 5, i16 4
  %755 = or i16 %753, %754
  %756 = or i16 %755, 80
  store i16 %756, i16* %171, align 2
  br label %757

757:                                              ; preds = %750, %748, %746, %740, %738, %736, %730
  br i1 %387, label %794, label %760

758:                                              ; preds = %789
  %759 = icmp sgt i32 %791, 0
  br i1 %759, label %760, label %794

760:                                              ; preds = %757, %758
  %761 = phi i32 [ %791, %758 ], [ %386, %757 ]
  %762 = icmp sgt i32 %761, 1
  br i1 %762, label %763, label %794

763:                                              ; preds = %760
  %764 = sext i32 %761 to i64
  %765 = load i16, i16* %71, align 2
  br label %766

766:                                              ; preds = %789, %763
  %767 = phi i16 [ %765, %763 ], [ %790, %789 ]
  %768 = phi i64 [ 1, %763 ], [ %792, %789 ]
  %769 = phi i32 [ 0, %763 ], [ %791, %789 ]
  %770 = add nsw i64 %768, -1
  %771 = getelementptr inbounds [8 x i16], [8 x i16]* %6, i64 %68, i64 %768
  %772 = load i16, i16* %771, align 2
  %773 = icmp ult i16 %767, %772
  br i1 %773, label %774, label %789

774:                                              ; preds = %766
  %775 = getelementptr inbounds [8 x i16], [8 x i16]* %6, i64 %68, i64 %770
  %776 = getelementptr inbounds [8 x %struct.candidate_mv], [8 x %struct.candidate_mv]* %5, i64 %68, i64 %770
  %777 = getelementptr inbounds %struct.candidate_mv, %struct.candidate_mv* %776, i64 0, i32 0, i32 0
  %778 = load i32, i32* %777, align 4
  %779 = getelementptr inbounds [8 x %struct.candidate_mv], [8 x %struct.candidate_mv]* %5, i64 %68, i64 %770, i32 1, i32 0
  %780 = load i32, i32* %779, align 4
  %781 = getelementptr inbounds [8 x %struct.candidate_mv], [8 x %struct.candidate_mv]* %5, i64 %68, i64 %768
  %782 = bitcast %struct.candidate_mv* %781 to i64*
  %783 = bitcast %struct.candidate_mv* %776 to i64*
  %784 = load i64, i64* %782, align 4
  store i64 %784, i64* %783, align 4
  %785 = getelementptr inbounds %struct.candidate_mv, %struct.candidate_mv* %781, i64 0, i32 0, i32 0
  store i32 %778, i32* %785, align 4
  %786 = getelementptr inbounds [8 x %struct.candidate_mv], [8 x %struct.candidate_mv]* %5, i64 %68, i64 %768, i32 1, i32 0
  store i32 %780, i32* %786, align 4
  %787 = load i16, i16* %771, align 2
  store i16 %787, i16* %775, align 2
  store i16 %767, i16* %771, align 2
  %788 = trunc i64 %768 to i32
  br label %789

789:                                              ; preds = %774, %766
  %790 = phi i16 [ %767, %774 ], [ %772, %766 ]
  %791 = phi i32 [ %788, %774 ], [ %769, %766 ]
  %792 = add nuw nsw i64 %768, 1
  %793 = icmp eq i64 %792, %764
  br i1 %793, label %758, label %766

794:                                              ; preds = %760, %758, %757
  %795 = load i8, i8* %69, align 1
  %796 = icmp ugt i8 %795, %385
  br i1 %796, label %797, label %837

797:                                              ; preds = %794
  %798 = zext i8 %795 to i32
  %799 = add nuw nsw i32 %386, 1
  %800 = zext i8 %385 to i64
  %801 = add nuw nsw i64 %800, 1
  br label %804

802:                                              ; preds = %832
  %803 = icmp sgt i32 %833, %386
  br i1 %803, label %804, label %837

804:                                              ; preds = %802, %797
  %805 = phi i32 [ %798, %797 ], [ %833, %802 ]
  %806 = icmp slt i32 %799, %805
  br i1 %806, label %807, label %837

807:                                              ; preds = %804
  %808 = sext i32 %805 to i64
  br label %809

809:                                              ; preds = %832, %807
  %810 = phi i64 [ %800, %807 ], [ %835, %832 ]
  %811 = phi i64 [ %801, %807 ], [ %834, %832 ]
  %812 = phi i32 [ %386, %807 ], [ %833, %832 ]
  %813 = getelementptr inbounds [8 x i16], [8 x i16]* %6, i64 %68, i64 %810
  %814 = load i16, i16* %813, align 2
  %815 = getelementptr inbounds [8 x i16], [8 x i16]* %6, i64 %68, i64 %811
  %816 = load i16, i16* %815, align 2
  %817 = icmp ult i16 %814, %816
  br i1 %817, label %818, label %832

818:                                              ; preds = %809
  %819 = getelementptr inbounds [8 x %struct.candidate_mv], [8 x %struct.candidate_mv]* %5, i64 %68, i64 %810
  %820 = getelementptr inbounds %struct.candidate_mv, %struct.candidate_mv* %819, i64 0, i32 0, i32 0
  %821 = load i32, i32* %820, align 4
  %822 = getelementptr inbounds [8 x %struct.candidate_mv], [8 x %struct.candidate_mv]* %5, i64 %68, i64 %810, i32 1, i32 0
  %823 = load i32, i32* %822, align 4
  %824 = getelementptr inbounds [8 x %struct.candidate_mv], [8 x %struct.candidate_mv]* %5, i64 %68, i64 %811
  %825 = bitcast %struct.candidate_mv* %824 to i64*
  %826 = bitcast %struct.candidate_mv* %819 to i64*
  %827 = load i64, i64* %825, align 4
  store i64 %827, i64* %826, align 4
  %828 = getelementptr inbounds %struct.candidate_mv, %struct.candidate_mv* %824, i64 0, i32 0, i32 0
  store i32 %821, i32* %828, align 4
  %829 = getelementptr inbounds [8 x %struct.candidate_mv], [8 x %struct.candidate_mv]* %5, i64 %68, i64 %811, i32 1, i32 0
  store i32 %823, i32* %829, align 4
  %830 = load i16, i16* %815, align 2
  store i16 %830, i16* %813, align 2
  store i16 %814, i16* %815, align 2
  %831 = trunc i64 %811 to i32
  br label %832

832:                                              ; preds = %818, %809
  %833 = phi i32 [ %831, %818 ], [ %812, %809 ]
  %834 = add i64 %811, 1
  %835 = add nuw nsw i64 %810, 1
  %836 = icmp eq i64 %834, %808
  br i1 %836, label %802, label %809

837:                                              ; preds = %804, %802, %794
  %838 = load i8, i8* %77, align 4
  %839 = icmp ult i8 %838, 16
  %840 = select i1 %839, i8 %838, i8 16
  %841 = zext i8 %840 to i32
  %842 = load i32, i32* %562, align 16
  %843 = sub nsw i32 %842, %26
  %844 = icmp sgt i32 %843, %841
  %845 = select i1 %844, i32 %841, i32 %843
  %846 = load i8, i8* %79, align 1
  %847 = icmp ult i8 %846, 16
  %848 = select i1 %847, i8 %846, i8 16
  %849 = zext i8 %848 to i32
  %850 = load i32, i32* %566, align 4
  %851 = sub nsw i32 %850, %24
  %852 = icmp sgt i32 %851, %849
  %853 = select i1 %852, i32 %849, i32 %851
  %854 = icmp slt i32 %845, %853
  %855 = select i1 %854, i32 %845, i32 %853
  %856 = icmp sgt i8 %170, -1
  br i1 %856, label %863, label %857

857:                                              ; preds = %837
  %858 = icmp sgt i32 %855, 0
  %859 = and i1 %219, %858
  br i1 %859, label %860, label %1131

860:                                              ; preds = %857
  %861 = getelementptr inbounds %struct.AV1Common, %struct.AV1Common* %0, i64 0, i32 45, i64 %68
  %862 = load i8, i8* %69, align 1
  br label %1127

863:                                              ; preds = %837
  %864 = load i8, i8* %69, align 1
  %865 = icmp ult i8 %864, 2
  br i1 %865, label %866, label %1044

866:                                              ; preds = %863
  %867 = bitcast [2 x [2 x %union.int_mv]]* %17 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %867) #9
  %868 = getelementptr inbounds [2 x [2 x %union.int_mv]], [2 x [2 x %union.int_mv]]* %17, i64 0, i64 0
  %869 = bitcast [2 x [2 x %union.int_mv]]* %18 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %867, i8 -86, i64 16, i1 false) #9
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %869) #9
  %870 = getelementptr inbounds [2 x [2 x %union.int_mv]], [2 x [2 x %union.int_mv]]* %18, i64 0, i64 0
  %871 = bitcast i64* %19 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %869, i8 -86, i64 16, i1 false) #9
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %871) #9
  store i64 0, i64* %19, align 8
  %872 = bitcast i64* %20 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %872) #9
  store i64 0, i64* %20, align 8
  %873 = icmp sgt i32 %855, 0
  %874 = and i1 %219, %873
  br i1 %874, label %875, label %878

875:                                              ; preds = %866
  %876 = bitcast i64* %19 to i32*
  %877 = bitcast i64* %20 to i32*
  br label %883

878:                                              ; preds = %883, %866
  %879 = and i1 %286, %873
  %880 = bitcast i64* %19 to i32*
  br i1 %879, label %881, label %899

881:                                              ; preds = %878
  %882 = bitcast i64* %20 to i32*
  br label %907

883:                                              ; preds = %883, %875
  %884 = phi i32 [ 0, %875 ], [ %897, %883 ]
  %885 = load %struct.MB_MODE_INFO**, %struct.MB_MODE_INFO*** %563, align 8
  %886 = load i32, i32* %564, align 8
  %887 = sub i32 %884, %886
  %888 = sext i32 %887 to i64
  %889 = getelementptr inbounds %struct.MB_MODE_INFO*, %struct.MB_MODE_INFO** %885, i64 %888
  %890 = load %struct.MB_MODE_INFO*, %struct.MB_MODE_INFO** %889, align 8
  call fastcc void @process_compound_ref_mv_candidate(%struct.MB_MODE_INFO* %890, %struct.AV1Common* %0, i8* nonnull %149, [2 x %union.int_mv]* nonnull %868, i32* nonnull %876, [2 x %union.int_mv]* nonnull %870, i32* nonnull %877) #9
  %891 = getelementptr inbounds %struct.MB_MODE_INFO, %struct.MB_MODE_INFO* %890, i64 0, i32 0
  %892 = load i8, i8* %891, align 8
  %893 = zext i8 %892 to i64
  %894 = getelementptr inbounds [22 x i8], [22 x i8]* @mi_size_wide, i64 0, i64 %893
  %895 = load i8, i8* %894, align 1
  %896 = zext i8 %895 to i32
  %897 = add nuw nsw i32 %884, %896
  %898 = icmp slt i32 %897, %855
  br i1 %898, label %883, label %878

899:                                              ; preds = %907, %878
  %900 = bitcast [2 x [2 x %union.int_mv]]* %21 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %900) #9
  %901 = getelementptr inbounds [2 x [2 x %union.int_mv]], [2 x [2 x %union.int_mv]]* %21, i64 0, i64 0, i64 0, i32 0
  %902 = getelementptr inbounds [2 x [2 x %union.int_mv]], [2 x [2 x %union.int_mv]]* %21, i64 0, i64 0, i64 1, i32 0
  %903 = getelementptr inbounds [2 x [2 x %union.int_mv]], [2 x [2 x %union.int_mv]]* %21, i64 0, i64 1, i64 0, i32 0
  %904 = getelementptr inbounds [2 x [2 x %union.int_mv]], [2 x [2 x %union.int_mv]]* %21, i64 0, i64 1, i64 1, i32 0
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %900, i8 -86, i64 16, i1 false) #9
  %905 = load i32, i32* %880, align 8
  %906 = icmp sgt i32 %905, 0
  br i1 %906, label %964, label %943

907:                                              ; preds = %907, %881
  %908 = phi i32 [ 0, %881 ], [ %922, %907 ]
  %909 = load %struct.MB_MODE_INFO**, %struct.MB_MODE_INFO*** %563, align 8
  %910 = load i32, i32* %564, align 8
  %911 = mul nsw i32 %910, %908
  %912 = add nsw i32 %911, -1
  %913 = sext i32 %912 to i64
  %914 = getelementptr inbounds %struct.MB_MODE_INFO*, %struct.MB_MODE_INFO** %909, i64 %913
  %915 = load %struct.MB_MODE_INFO*, %struct.MB_MODE_INFO** %914, align 8
  call fastcc void @process_compound_ref_mv_candidate(%struct.MB_MODE_INFO* %915, %struct.AV1Common* %0, i8* nonnull %149, [2 x %union.int_mv]* nonnull %868, i32* nonnull %880, [2 x %union.int_mv]* nonnull %870, i32* nonnull %882) #9
  %916 = getelementptr inbounds %struct.MB_MODE_INFO, %struct.MB_MODE_INFO* %915, i64 0, i32 0
  %917 = load i8, i8* %916, align 8
  %918 = zext i8 %917 to i64
  %919 = getelementptr inbounds [22 x i8], [22 x i8]* @mi_size_high, i64 0, i64 %918
  %920 = load i8, i8* %919, align 1
  %921 = zext i8 %920 to i32
  %922 = add nuw nsw i32 %908, %921
  %923 = icmp slt i32 %922, %855
  br i1 %923, label %907, label %899

924:                                              ; preds = %1599
  %925 = getelementptr inbounds %struct.candidate_mv, %struct.candidate_mv* %70, i64 0, i32 0, i32 0
  %926 = load i32, i32* %901, align 16
  store i32 %926, i32* %925, align 4
  %927 = load i8, i8* %69, align 1
  %928 = zext i8 %927 to i64
  %929 = getelementptr inbounds [8 x %struct.candidate_mv], [8 x %struct.candidate_mv]* %5, i64 %68, i64 %928, i32 1, i32 0
  %930 = load i32, i32* %902, align 4
  store i32 %930, i32* %929, align 4
  %931 = load i8, i8* %69, align 1
  %932 = zext i8 %931 to i64
  %933 = getelementptr inbounds [8 x i16], [8 x i16]* %6, i64 %68, i64 %932
  store i16 2, i16* %933, align 2
  %934 = load i8, i8* %69, align 1
  %935 = add i8 %934, 1
  store i8 %935, i8* %69, align 1
  %936 = zext i8 %935 to i64
  %937 = getelementptr inbounds [8 x %struct.candidate_mv], [8 x %struct.candidate_mv]* %5, i64 %68, i64 %936, i32 0, i32 0
  %938 = load i32, i32* %903, align 8
  store i32 %938, i32* %937, align 4
  %939 = load i8, i8* %69, align 1
  %940 = zext i8 %939 to i64
  %941 = getelementptr inbounds [8 x %struct.candidate_mv], [8 x %struct.candidate_mv]* %5, i64 %68, i64 %940, i32 1, i32 0
  %942 = load i32, i32* %904, align 4
  store i32 %942, i32* %941, align 4
  br label %1037

943:                                              ; preds = %964, %1607, %899
  %944 = phi i32 [ 0, %899 ], [ 1, %964 ], [ 2, %1607 ]
  %945 = bitcast i64* %20 to i32*
  %946 = load i32, i32* %945, align 8
  %947 = icmp sgt i32 %946, 0
  %948 = icmp ult i32 %944, 2
  %949 = and i1 %948, %947
  br i1 %949, label %950, label %972

950:                                              ; preds = %943
  %951 = zext i32 %944 to i64
  %952 = getelementptr inbounds [2 x [2 x %union.int_mv]], [2 x [2 x %union.int_mv]]* %18, i64 0, i64 0, i64 0, i32 0
  %953 = getelementptr inbounds [2 x [2 x %union.int_mv]], [2 x [2 x %union.int_mv]]* %21, i64 0, i64 %951, i64 0, i32 0
  %954 = load i32, i32* %952, align 16
  store i32 %954, i32* %953, align 8
  %955 = add nuw nsw i64 %951, 1
  %956 = icmp sgt i32 %946, 1
  %957 = icmp ult i64 %955, 2
  %958 = and i1 %957, %956
  br i1 %958, label %959, label %969

959:                                              ; preds = %950
  %960 = getelementptr inbounds [2 x [2 x %union.int_mv]], [2 x [2 x %union.int_mv]]* %21, i64 0, i64 1, i64 0, i32 0
  %961 = getelementptr inbounds [2 x [2 x %union.int_mv]], [2 x [2 x %union.int_mv]]* %18, i64 0, i64 0, i64 1, i32 0
  %962 = load i32, i32* %961, align 4
  %963 = add nuw nsw i64 1, 1
  store i32 %962, i32* %960, align 8
  br label %969

964:                                              ; preds = %899
  %965 = getelementptr inbounds [2 x [2 x %union.int_mv]], [2 x [2 x %union.int_mv]]* %17, i64 0, i64 0, i64 0, i32 0
  %966 = getelementptr inbounds [2 x [2 x %union.int_mv]], [2 x [2 x %union.int_mv]]* %21, i64 0, i64 0, i64 0, i32 0
  %967 = load i32, i32* %965, align 16
  store i32 %967, i32* %966, align 16
  %968 = icmp sgt i32 %905, 1
  br i1 %968, label %1607, label %943

969:                                              ; preds = %959, %950
  %970 = phi i64 [ %955, %950 ], [ 2, %959 ]
  %971 = trunc i64 %970 to i32
  br label %972

972:                                              ; preds = %969, %943
  %973 = phi i32 [ %944, %943 ], [ %971, %969 ]
  %974 = icmp ult i32 %973, 2
  br i1 %974, label %975, label %1009

975:                                              ; preds = %972
  %976 = zext i32 %973 to i64
  %977 = sub nsw i64 2, %976
  %978 = sub nsw i64 1, %976
  %979 = and i64 %977, 7
  %980 = icmp eq i64 %979, 0
  br i1 %980, label %988, label %981

981:                                              ; preds = %975, %981
  %982 = phi i64 [ %985, %981 ], [ %976, %975 ]
  %983 = phi i64 [ %986, %981 ], [ %979, %975 ]
  %984 = getelementptr inbounds [2 x [2 x %union.int_mv]], [2 x [2 x %union.int_mv]]* %21, i64 0, i64 %982, i64 0, i32 0
  store i32 %67, i32* %984, align 8
  %985 = add nuw nsw i64 %982, 1
  %986 = add i64 %983, -1
  %987 = icmp eq i64 %986, 0
  br i1 %987, label %988, label %981, !llvm.loop !7

988:                                              ; preds = %981, %975
  %989 = phi i64 [ %976, %975 ], [ %985, %981 ]
  %990 = icmp ult i64 %978, 7
  br i1 %990, label %1009, label %991

991:                                              ; preds = %988, %991
  %992 = phi i64 [ %1008, %991 ], [ %989, %988 ]
  %993 = getelementptr inbounds [2 x [2 x %union.int_mv]], [2 x [2 x %union.int_mv]]* %21, i64 0, i64 %992, i64 0, i32 0
  store i32 %67, i32* %993, align 8
  %994 = add nuw nsw i64 %992, 1
  %995 = getelementptr inbounds [2 x [2 x %union.int_mv]], [2 x [2 x %union.int_mv]]* %21, i64 0, i64 %994, i64 0, i32 0
  store i32 %67, i32* %995, align 8
  %996 = add nuw nsw i64 %992, 2
  %997 = getelementptr inbounds [2 x [2 x %union.int_mv]], [2 x [2 x %union.int_mv]]* %21, i64 0, i64 %996, i64 0, i32 0
  store i32 %67, i32* %997, align 8
  %998 = add nuw nsw i64 %992, 3
  %999 = getelementptr inbounds [2 x [2 x %union.int_mv]], [2 x [2 x %union.int_mv]]* %21, i64 0, i64 %998, i64 0, i32 0
  store i32 %67, i32* %999, align 8
  %1000 = add nuw nsw i64 %992, 4
  %1001 = getelementptr inbounds [2 x [2 x %union.int_mv]], [2 x [2 x %union.int_mv]]* %21, i64 0, i64 %1000, i64 0, i32 0
  store i32 %67, i32* %1001, align 8
  %1002 = add nuw nsw i64 %992, 5
  %1003 = getelementptr inbounds [2 x [2 x %union.int_mv]], [2 x [2 x %union.int_mv]]* %21, i64 0, i64 %1002, i64 0, i32 0
  store i32 %67, i32* %1003, align 8
  %1004 = add nuw nsw i64 %992, 6
  %1005 = getelementptr inbounds [2 x [2 x %union.int_mv]], [2 x [2 x %union.int_mv]]* %21, i64 0, i64 %1004, i64 0, i32 0
  store i32 %67, i32* %1005, align 8
  %1006 = add nuw nsw i64 %992, 7
  %1007 = getelementptr inbounds [2 x [2 x %union.int_mv]], [2 x [2 x %union.int_mv]]* %21, i64 0, i64 %1006, i64 0, i32 0
  store i32 %67, i32* %1007, align 8
  %1008 = add nuw nsw i64 %992, 8
  br label %991

1009:                                             ; preds = %988, %972
  %1010 = getelementptr inbounds [2 x i32], [2 x i32]* %75, i64 0, i64 1
  %1011 = load i32, i32* %1010, align 4
  %1012 = icmp sgt i32 %1011, 0
  br i1 %1012, label %1533, label %1538

1013:                                             ; preds = %1599
  %1014 = load i32, i32* %901, align 16
  %1015 = getelementptr inbounds %struct.candidate_mv, %struct.candidate_mv* %70, i64 0, i32 0, i32 0
  %1016 = load i32, i32* %1015, align 4
  %1017 = icmp eq i32 %1014, %1016
  %1018 = load i32, i32* %902, align 4
  br i1 %1017, label %1019, label %1031

1019:                                             ; preds = %1013
  %1020 = getelementptr inbounds [8 x %struct.candidate_mv], [8 x %struct.candidate_mv]* %5, i64 %68, i64 0, i32 1, i32 0
  %1021 = load i32, i32* %1020, align 4
  %1022 = icmp eq i32 %1018, %1021
  br i1 %1022, label %1023, label %1031

1023:                                             ; preds = %1019
  %1024 = zext i8 %1600 to i64
  %1025 = getelementptr inbounds [8 x %struct.candidate_mv], [8 x %struct.candidate_mv]* %5, i64 %68, i64 %1024, i32 0, i32 0
  %1026 = load i32, i32* %903, align 8
  store i32 %1026, i32* %1025, align 4
  %1027 = load i8, i8* %69, align 1
  %1028 = zext i8 %1027 to i64
  %1029 = getelementptr inbounds [8 x %struct.candidate_mv], [8 x %struct.candidate_mv]* %5, i64 %68, i64 %1028, i32 1, i32 0
  %1030 = load i32, i32* %904, align 4
  store i32 %1030, i32* %1029, align 4
  br label %1037

1031:                                             ; preds = %1019, %1013
  %1032 = zext i8 %1600 to i64
  %1033 = getelementptr inbounds [8 x %struct.candidate_mv], [8 x %struct.candidate_mv]* %5, i64 %68, i64 %1032, i32 0, i32 0
  store i32 %1014, i32* %1033, align 4
  %1034 = load i8, i8* %69, align 1
  %1035 = zext i8 %1034 to i64
  %1036 = getelementptr inbounds [8 x %struct.candidate_mv], [8 x %struct.candidate_mv]* %5, i64 %68, i64 %1035, i32 1, i32 0
  store i32 %1018, i32* %1036, align 4
  br label %1037

1037:                                             ; preds = %1023, %1031, %924
  %1038 = load i8, i8* %69, align 1
  %1039 = zext i8 %1038 to i64
  %1040 = getelementptr inbounds [8 x i16], [8 x i16]* %6, i64 %68, i64 %1039
  store i16 2, i16* %1040, align 2
  %1041 = load i8, i8* %69, align 1
  %1042 = add i8 %1041, 1
  store i8 %1042, i8* %69, align 1
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %900) #9
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %872) #9
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %871) #9
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %869) #9
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %867) #9
  %1043 = icmp eq i8 %1042, 0
  br i1 %1043, label %1602, label %1044

1044:                                             ; preds = %1037, %863
  %1045 = getelementptr inbounds %struct.macroblockd, %struct.macroblockd* %1, i64 0, i32 17
  %1046 = getelementptr inbounds %struct.macroblockd, %struct.macroblockd* %1, i64 0, i32 18
  %1047 = getelementptr inbounds %struct.macroblockd, %struct.macroblockd* %1, i64 0, i32 19
  %1048 = getelementptr inbounds %struct.macroblockd, %struct.macroblockd* %1, i64 0, i32 20
  br label %1049

1049:                                             ; preds = %1049, %1044
  %1050 = phi i64 [ 0, %1044 ], [ %1123, %1049 ]
  %1051 = getelementptr inbounds [8 x %struct.candidate_mv], [8 x %struct.candidate_mv]* %5, i64 %68, i64 %1050
  %1052 = bitcast %struct.candidate_mv* %1051 to %struct.mv*
  %1053 = load i8, i8* %77, align 4
  %1054 = zext i8 %1053 to i32
  %1055 = shl nuw nsw i32 %1054, 5
  %1056 = load i8, i8* %79, align 1
  %1057 = zext i8 %1056 to i32
  %1058 = shl nuw nsw i32 %1057, 5
  %1059 = load i32, i32* %1045, align 4
  %1060 = sub nsw i32 %1059, %1055
  %1061 = add nsw i32 %1060, -128
  %1062 = load i32, i32* %1046, align 8
  %1063 = add nuw nsw i32 %1055, 128
  %1064 = add i32 %1063, %1062
  %1065 = load i32, i32* %1047, align 4
  %1066 = sub nsw i32 %1065, %1058
  %1067 = add nsw i32 %1066, -128
  %1068 = load i32, i32* %1048, align 16
  %1069 = add nuw nsw i32 %1058, 128
  %1070 = add i32 %1069, %1068
  %1071 = getelementptr inbounds %struct.mv, %struct.mv* %1052, i64 0, i32 1
  %1072 = load i16, i16* %1071, align 2
  %1073 = sext i16 %1072 to i32
  %1074 = icmp sgt i32 %1061, %1073
  %1075 = icmp slt i32 %1064, %1073
  %1076 = select i1 %1075, i32 %1064, i32 %1073
  %1077 = select i1 %1074, i32 %1061, i32 %1076
  %1078 = trunc i32 %1077 to i16
  store i16 %1078, i16* %1071, align 2
  %1079 = bitcast %struct.candidate_mv* %1051 to i16*
  %1080 = load i16, i16* %1079, align 2
  %1081 = sext i16 %1080 to i32
  %1082 = icmp sgt i32 %1067, %1081
  %1083 = icmp slt i32 %1070, %1081
  %1084 = select i1 %1083, i32 %1070, i32 %1081
  %1085 = select i1 %1082, i32 %1067, i32 %1084
  %1086 = trunc i32 %1085 to i16
  store i16 %1086, i16* %1079, align 2
  %1087 = getelementptr inbounds [8 x %struct.candidate_mv], [8 x %struct.candidate_mv]* %5, i64 %68, i64 %1050, i32 1
  %1088 = bitcast %union.int_mv* %1087 to %struct.mv*
  %1089 = load i8, i8* %77, align 4
  %1090 = zext i8 %1089 to i32
  %1091 = shl nuw nsw i32 %1090, 5
  %1092 = load i8, i8* %79, align 1
  %1093 = zext i8 %1092 to i32
  %1094 = shl nuw nsw i32 %1093, 5
  %1095 = load i32, i32* %1045, align 4
  %1096 = sub nsw i32 %1095, %1091
  %1097 = add nsw i32 %1096, -128
  %1098 = load i32, i32* %1046, align 8
  %1099 = add nuw nsw i32 %1091, 128
  %1100 = add i32 %1099, %1098
  %1101 = load i32, i32* %1047, align 4
  %1102 = sub nsw i32 %1101, %1094
  %1103 = add nsw i32 %1102, -128
  %1104 = load i32, i32* %1048, align 16
  %1105 = add nuw nsw i32 %1094, 128
  %1106 = add i32 %1105, %1104
  %1107 = getelementptr inbounds %struct.mv, %struct.mv* %1088, i64 0, i32 1
  %1108 = load i16, i16* %1107, align 2
  %1109 = sext i16 %1108 to i32
  %1110 = icmp sgt i32 %1097, %1109
  %1111 = icmp slt i32 %1100, %1109
  %1112 = select i1 %1111, i32 %1100, i32 %1109
  %1113 = select i1 %1110, i32 %1097, i32 %1112
  %1114 = trunc i32 %1113 to i16
  store i16 %1114, i16* %1107, align 2
  %1115 = bitcast %union.int_mv* %1087 to i16*
  %1116 = load i16, i16* %1115, align 2
  %1117 = sext i16 %1116 to i32
  %1118 = icmp sgt i32 %1103, %1117
  %1119 = icmp slt i32 %1106, %1117
  %1120 = select i1 %1119, i32 %1106, i32 %1117
  %1121 = select i1 %1118, i32 %1103, i32 %1120
  %1122 = trunc i32 %1121 to i16
  store i16 %1122, i16* %1115, align 2
  %1123 = add nuw nsw i64 %1050, 1
  %1124 = load i8, i8* %69, align 1
  %1125 = zext i8 %1124 to i64
  %1126 = icmp ult i64 %1123, %1125
  br i1 %1126, label %1049, label %1602

1127:                                             ; preds = %1253, %860
  %1128 = phi i8 [ %862, %860 ], [ %1254, %1253 ]
  %1129 = phi i32 [ 0, %860 ], [ %1261, %1253 ]
  %1130 = icmp ult i8 %1128, 2
  br i1 %1130, label %1138, label %1131

1131:                                             ; preds = %1253, %1127, %857
  %1132 = and i1 %286, %858
  br i1 %1132, label %1135, label %1133

1133:                                             ; preds = %1131
  %1134 = load i8, i8* %69, align 1
  br label %1267

1135:                                             ; preds = %1131
  %1136 = getelementptr inbounds %struct.AV1Common, %struct.AV1Common* %0, i64 0, i32 45, i64 %68
  %1137 = load i8, i8* %69, align 1
  br label %1263

1138:                                             ; preds = %1127
  %1139 = load %struct.MB_MODE_INFO**, %struct.MB_MODE_INFO*** %563, align 8
  %1140 = load i32, i32* %564, align 8
  %1141 = sub i32 %1129, %1140
  %1142 = sext i32 %1141 to i64
  %1143 = getelementptr inbounds %struct.MB_MODE_INFO*, %struct.MB_MODE_INFO** %1139, i64 %1142
  %1144 = load %struct.MB_MODE_INFO*, %struct.MB_MODE_INFO** %1143, align 8
  %1145 = getelementptr inbounds %struct.MB_MODE_INFO, %struct.MB_MODE_INFO* %1144, i64 0, i32 6, i64 0
  %1146 = load i8, i8* %1145, align 1
  %1147 = icmp sgt i8 %1146, 0
  br i1 %1147, label %1148, label %1198

1148:                                             ; preds = %1138
  %1149 = getelementptr inbounds %struct.MB_MODE_INFO, %struct.MB_MODE_INFO* %1144, i64 0, i32 5, i64 0
  %1150 = bitcast %union.int_mv* %1149 to i8*
  %1151 = bitcast %union.int_mv* %1149 to i16*
  %1152 = load i16, i16* %1151, align 4
  %1153 = getelementptr inbounds i8, i8* %1150, i64 2
  %1154 = bitcast i8* %1153 to i16*
  %1155 = load i16, i16* %1154, align 2
  %1156 = sext i8 %1146 to i64
  %1157 = getelementptr inbounds %struct.AV1Common, %struct.AV1Common* %0, i64 0, i32 45, i64 %1156
  %1158 = load i32, i32* %1157, align 4
  %1159 = load i32, i32* %861, align 4
  %1160 = icmp eq i32 %1158, %1159
  %1161 = sub i16 0, %1152
  %1162 = sub i16 0, %1155
  %1163 = select i1 %1160, i16 %1155, i16 %1162
  %1164 = select i1 %1160, i16 %1152, i16 %1161
  %1165 = zext i8 %1128 to i32
  %1166 = icmp eq i8 %1128, 0
  br i1 %1166, label %1183, label %1167

1167:                                             ; preds = %1148
  %1168 = zext i16 %1163 to i32
  %1169 = shl nuw i32 %1168, 16
  %1170 = zext i16 %1164 to i32
  %1171 = or i32 %1169, %1170
  %1172 = zext i8 %1128 to i64
  br label %1173

1173:                                             ; preds = %1178, %1167
  %1174 = phi i64 [ 0, %1167 ], [ %1179, %1178 ]
  %1175 = getelementptr inbounds [8 x %struct.candidate_mv], [8 x %struct.candidate_mv]* %5, i64 %68, i64 %1174, i32 0, i32 0
  %1176 = load i32, i32* %1175, align 4
  %1177 = icmp eq i32 %1171, %1176
  br i1 %1177, label %1181, label %1178

1178:                                             ; preds = %1173
  %1179 = add nuw nsw i64 %1174, 1
  %1180 = icmp eq i64 %1179, %1172
  br i1 %1180, label %1188, label %1173

1181:                                             ; preds = %1173
  %1182 = trunc i64 %1174 to i32
  br label %1183

1183:                                             ; preds = %1181, %1148
  %1184 = phi i32 [ 0, %1148 ], [ %1182, %1181 ]
  %1185 = icmp eq i32 %1184, %1165
  br i1 %1185, label %1186, label %1198

1186:                                             ; preds = %1183
  %1187 = zext i8 %1128 to i64
  br label %1188

1188:                                             ; preds = %1178, %1186
  %1189 = phi i64 [ %1187, %1186 ], [ %1172, %1178 ]
  %1190 = getelementptr inbounds [8 x %struct.candidate_mv], [8 x %struct.candidate_mv]* %5, i64 %68, i64 %1189
  %1191 = bitcast %struct.candidate_mv* %1190 to i8*
  %1192 = bitcast %struct.candidate_mv* %1190 to i16*
  store i16 %1164, i16* %1192, align 4
  %1193 = getelementptr inbounds i8, i8* %1191, i64 2
  %1194 = bitcast i8* %1193 to i16*
  store i16 %1163, i16* %1194, align 2
  %1195 = getelementptr inbounds [8 x i16], [8 x i16]* %6, i64 %68, i64 %1189
  store i16 2, i16* %1195, align 2
  %1196 = load i8, i8* %69, align 1
  %1197 = add i8 %1196, 1
  store i8 %1197, i8* %69, align 1
  br label %1198

1198:                                             ; preds = %1188, %1183, %1138
  %1199 = phi i8 [ %1197, %1188 ], [ %1128, %1183 ], [ %1128, %1138 ]
  %1200 = getelementptr inbounds %struct.MB_MODE_INFO, %struct.MB_MODE_INFO* %1144, i64 0, i32 6, i64 1
  %1201 = load i8, i8* %1200, align 1
  %1202 = icmp sgt i8 %1201, 0
  br i1 %1202, label %1203, label %1253

1203:                                             ; preds = %1198
  %1204 = getelementptr inbounds %struct.MB_MODE_INFO, %struct.MB_MODE_INFO* %1144, i64 0, i32 5, i64 1
  %1205 = bitcast %union.int_mv* %1204 to i8*
  %1206 = bitcast %union.int_mv* %1204 to i16*
  %1207 = load i16, i16* %1206, align 4
  %1208 = getelementptr inbounds i8, i8* %1205, i64 2
  %1209 = bitcast i8* %1208 to i16*
  %1210 = load i16, i16* %1209, align 2
  %1211 = sext i8 %1201 to i64
  %1212 = getelementptr inbounds %struct.AV1Common, %struct.AV1Common* %0, i64 0, i32 45, i64 %1211
  %1213 = load i32, i32* %1212, align 4
  %1214 = load i32, i32* %861, align 4
  %1215 = icmp eq i32 %1213, %1214
  %1216 = sub i16 0, %1207
  %1217 = sub i16 0, %1210
  %1218 = select i1 %1215, i16 %1210, i16 %1217
  %1219 = select i1 %1215, i16 %1207, i16 %1216
  %1220 = zext i8 %1199 to i32
  %1221 = icmp eq i8 %1199, 0
  br i1 %1221, label %1238, label %1222

1222:                                             ; preds = %1203
  %1223 = zext i16 %1218 to i32
  %1224 = shl nuw i32 %1223, 16
  %1225 = zext i16 %1219 to i32
  %1226 = or i32 %1224, %1225
  %1227 = zext i8 %1199 to i64
  br label %1228

1228:                                             ; preds = %1233, %1222
  %1229 = phi i64 [ 0, %1222 ], [ %1234, %1233 ]
  %1230 = getelementptr inbounds [8 x %struct.candidate_mv], [8 x %struct.candidate_mv]* %5, i64 %68, i64 %1229, i32 0, i32 0
  %1231 = load i32, i32* %1230, align 4
  %1232 = icmp eq i32 %1226, %1231
  br i1 %1232, label %1236, label %1233

1233:                                             ; preds = %1228
  %1234 = add nuw nsw i64 %1229, 1
  %1235 = icmp eq i64 %1234, %1227
  br i1 %1235, label %1243, label %1228

1236:                                             ; preds = %1228
  %1237 = trunc i64 %1229 to i32
  br label %1238

1238:                                             ; preds = %1236, %1203
  %1239 = phi i32 [ 0, %1203 ], [ %1237, %1236 ]
  %1240 = icmp eq i32 %1239, %1220
  br i1 %1240, label %1241, label %1253

1241:                                             ; preds = %1238
  %1242 = zext i8 %1199 to i64
  br label %1243

1243:                                             ; preds = %1233, %1241
  %1244 = phi i64 [ %1242, %1241 ], [ %1227, %1233 ]
  %1245 = getelementptr inbounds [8 x %struct.candidate_mv], [8 x %struct.candidate_mv]* %5, i64 %68, i64 %1244
  %1246 = bitcast %struct.candidate_mv* %1245 to i8*
  %1247 = bitcast %struct.candidate_mv* %1245 to i16*
  store i16 %1219, i16* %1247, align 4
  %1248 = getelementptr inbounds i8, i8* %1246, i64 2
  %1249 = bitcast i8* %1248 to i16*
  store i16 %1218, i16* %1249, align 2
  %1250 = getelementptr inbounds [8 x i16], [8 x i16]* %6, i64 %68, i64 %1244
  store i16 2, i16* %1250, align 2
  %1251 = load i8, i8* %69, align 1
  %1252 = add i8 %1251, 1
  store i8 %1252, i8* %69, align 1
  br label %1253

1253:                                             ; preds = %1243, %1238, %1198
  %1254 = phi i8 [ %1252, %1243 ], [ %1199, %1238 ], [ %1199, %1198 ]
  %1255 = getelementptr inbounds %struct.MB_MODE_INFO, %struct.MB_MODE_INFO* %1144, i64 0, i32 0
  %1256 = load i8, i8* %1255, align 8
  %1257 = zext i8 %1256 to i64
  %1258 = getelementptr inbounds [22 x i8], [22 x i8]* @mi_size_wide, i64 0, i64 %1257
  %1259 = load i8, i8* %1258, align 1
  %1260 = zext i8 %1259 to i32
  %1261 = add nuw nsw i32 %1129, %1260
  %1262 = icmp slt i32 %1261, %855
  br i1 %1262, label %1127, label %1131

1263:                                             ; preds = %1391, %1135
  %1264 = phi i8 [ %1137, %1135 ], [ %1392, %1391 ]
  %1265 = phi i32 [ 0, %1135 ], [ %1399, %1391 ]
  %1266 = icmp ult i8 %1264, 2
  br i1 %1266, label %1275, label %1270

1267:                                             ; preds = %1391, %1133
  %1268 = phi i8 [ %1134, %1133 ], [ %1392, %1391 ]
  %1269 = icmp eq i8 %1268, 0
  br i1 %1269, label %1401, label %1270

1270:                                             ; preds = %1263, %1267
  %1271 = getelementptr inbounds %struct.macroblockd, %struct.macroblockd* %1, i64 0, i32 17
  %1272 = getelementptr inbounds %struct.macroblockd, %struct.macroblockd* %1, i64 0, i32 18
  %1273 = getelementptr inbounds %struct.macroblockd, %struct.macroblockd* %1, i64 0, i32 19
  %1274 = getelementptr inbounds %struct.macroblockd, %struct.macroblockd* %1, i64 0, i32 20
  br label %1471

1275:                                             ; preds = %1263
  %1276 = load %struct.MB_MODE_INFO**, %struct.MB_MODE_INFO*** %563, align 8
  %1277 = load i32, i32* %564, align 8
  %1278 = mul nsw i32 %1277, %1265
  %1279 = add nsw i32 %1278, -1
  %1280 = sext i32 %1279 to i64
  %1281 = getelementptr inbounds %struct.MB_MODE_INFO*, %struct.MB_MODE_INFO** %1276, i64 %1280
  %1282 = load %struct.MB_MODE_INFO*, %struct.MB_MODE_INFO** %1281, align 8
  %1283 = getelementptr inbounds %struct.MB_MODE_INFO, %struct.MB_MODE_INFO* %1282, i64 0, i32 6, i64 0
  %1284 = load i8, i8* %1283, align 1
  %1285 = icmp sgt i8 %1284, 0
  br i1 %1285, label %1286, label %1336

1286:                                             ; preds = %1275
  %1287 = getelementptr inbounds %struct.MB_MODE_INFO, %struct.MB_MODE_INFO* %1282, i64 0, i32 5, i64 0
  %1288 = bitcast %union.int_mv* %1287 to i8*
  %1289 = bitcast %union.int_mv* %1287 to i16*
  %1290 = load i16, i16* %1289, align 4
  %1291 = getelementptr inbounds i8, i8* %1288, i64 2
  %1292 = bitcast i8* %1291 to i16*
  %1293 = load i16, i16* %1292, align 2
  %1294 = sext i8 %1284 to i64
  %1295 = getelementptr inbounds %struct.AV1Common, %struct.AV1Common* %0, i64 0, i32 45, i64 %1294
  %1296 = load i32, i32* %1295, align 4
  %1297 = load i32, i32* %1136, align 4
  %1298 = icmp eq i32 %1296, %1297
  %1299 = sub i16 0, %1290
  %1300 = sub i16 0, %1293
  %1301 = select i1 %1298, i16 %1293, i16 %1300
  %1302 = select i1 %1298, i16 %1290, i16 %1299
  %1303 = zext i8 %1264 to i32
  %1304 = icmp eq i8 %1264, 0
  br i1 %1304, label %1321, label %1305

1305:                                             ; preds = %1286
  %1306 = zext i16 %1301 to i32
  %1307 = shl nuw i32 %1306, 16
  %1308 = zext i16 %1302 to i32
  %1309 = or i32 %1307, %1308
  %1310 = zext i8 %1264 to i64
  br label %1311

1311:                                             ; preds = %1316, %1305
  %1312 = phi i64 [ 0, %1305 ], [ %1317, %1316 ]
  %1313 = getelementptr inbounds [8 x %struct.candidate_mv], [8 x %struct.candidate_mv]* %5, i64 %68, i64 %1312, i32 0, i32 0
  %1314 = load i32, i32* %1313, align 4
  %1315 = icmp eq i32 %1309, %1314
  br i1 %1315, label %1319, label %1316

1316:                                             ; preds = %1311
  %1317 = add nuw nsw i64 %1312, 1
  %1318 = icmp eq i64 %1317, %1310
  br i1 %1318, label %1326, label %1311

1319:                                             ; preds = %1311
  %1320 = trunc i64 %1312 to i32
  br label %1321

1321:                                             ; preds = %1319, %1286
  %1322 = phi i32 [ 0, %1286 ], [ %1320, %1319 ]
  %1323 = icmp eq i32 %1322, %1303
  br i1 %1323, label %1324, label %1336

1324:                                             ; preds = %1321
  %1325 = zext i8 %1264 to i64
  br label %1326

1326:                                             ; preds = %1316, %1324
  %1327 = phi i64 [ %1325, %1324 ], [ %1310, %1316 ]
  %1328 = getelementptr inbounds [8 x %struct.candidate_mv], [8 x %struct.candidate_mv]* %5, i64 %68, i64 %1327
  %1329 = bitcast %struct.candidate_mv* %1328 to i8*
  %1330 = bitcast %struct.candidate_mv* %1328 to i16*
  store i16 %1302, i16* %1330, align 4
  %1331 = getelementptr inbounds i8, i8* %1329, i64 2
  %1332 = bitcast i8* %1331 to i16*
  store i16 %1301, i16* %1332, align 2
  %1333 = getelementptr inbounds [8 x i16], [8 x i16]* %6, i64 %68, i64 %1327
  store i16 2, i16* %1333, align 2
  %1334 = load i8, i8* %69, align 1
  %1335 = add i8 %1334, 1
  store i8 %1335, i8* %69, align 1
  br label %1336

1336:                                             ; preds = %1326, %1321, %1275
  %1337 = phi i8 [ %1335, %1326 ], [ %1264, %1321 ], [ %1264, %1275 ]
  %1338 = getelementptr inbounds %struct.MB_MODE_INFO, %struct.MB_MODE_INFO* %1282, i64 0, i32 6, i64 1
  %1339 = load i8, i8* %1338, align 1
  %1340 = icmp sgt i8 %1339, 0
  br i1 %1340, label %1341, label %1391

1341:                                             ; preds = %1336
  %1342 = getelementptr inbounds %struct.MB_MODE_INFO, %struct.MB_MODE_INFO* %1282, i64 0, i32 5, i64 1
  %1343 = bitcast %union.int_mv* %1342 to i8*
  %1344 = bitcast %union.int_mv* %1342 to i16*
  %1345 = load i16, i16* %1344, align 4
  %1346 = getelementptr inbounds i8, i8* %1343, i64 2
  %1347 = bitcast i8* %1346 to i16*
  %1348 = load i16, i16* %1347, align 2
  %1349 = sext i8 %1339 to i64
  %1350 = getelementptr inbounds %struct.AV1Common, %struct.AV1Common* %0, i64 0, i32 45, i64 %1349
  %1351 = load i32, i32* %1350, align 4
  %1352 = load i32, i32* %1136, align 4
  %1353 = icmp eq i32 %1351, %1352
  %1354 = sub i16 0, %1345
  %1355 = sub i16 0, %1348
  %1356 = select i1 %1353, i16 %1348, i16 %1355
  %1357 = select i1 %1353, i16 %1345, i16 %1354
  %1358 = zext i8 %1337 to i32
  %1359 = icmp eq i8 %1337, 0
  br i1 %1359, label %1376, label %1360

1360:                                             ; preds = %1341
  %1361 = zext i16 %1356 to i32
  %1362 = shl nuw i32 %1361, 16
  %1363 = zext i16 %1357 to i32
  %1364 = or i32 %1362, %1363
  %1365 = zext i8 %1337 to i64
  br label %1366

1366:                                             ; preds = %1371, %1360
  %1367 = phi i64 [ 0, %1360 ], [ %1372, %1371 ]
  %1368 = getelementptr inbounds [8 x %struct.candidate_mv], [8 x %struct.candidate_mv]* %5, i64 %68, i64 %1367, i32 0, i32 0
  %1369 = load i32, i32* %1368, align 4
  %1370 = icmp eq i32 %1364, %1369
  br i1 %1370, label %1374, label %1371

1371:                                             ; preds = %1366
  %1372 = add nuw nsw i64 %1367, 1
  %1373 = icmp eq i64 %1372, %1365
  br i1 %1373, label %1381, label %1366

1374:                                             ; preds = %1366
  %1375 = trunc i64 %1367 to i32
  br label %1376

1376:                                             ; preds = %1374, %1341
  %1377 = phi i32 [ 0, %1341 ], [ %1375, %1374 ]
  %1378 = icmp eq i32 %1377, %1358
  br i1 %1378, label %1379, label %1391

1379:                                             ; preds = %1376
  %1380 = zext i8 %1337 to i64
  br label %1381

1381:                                             ; preds = %1371, %1379
  %1382 = phi i64 [ %1380, %1379 ], [ %1365, %1371 ]
  %1383 = getelementptr inbounds [8 x %struct.candidate_mv], [8 x %struct.candidate_mv]* %5, i64 %68, i64 %1382
  %1384 = bitcast %struct.candidate_mv* %1383 to i8*
  %1385 = bitcast %struct.candidate_mv* %1383 to i16*
  store i16 %1357, i16* %1385, align 4
  %1386 = getelementptr inbounds i8, i8* %1384, i64 2
  %1387 = bitcast i8* %1386 to i16*
  store i16 %1356, i16* %1387, align 2
  %1388 = getelementptr inbounds [8 x i16], [8 x i16]* %6, i64 %68, i64 %1382
  store i16 2, i16* %1388, align 2
  %1389 = load i8, i8* %69, align 1
  %1390 = add i8 %1389, 1
  store i8 %1390, i8* %69, align 1
  br label %1391

1391:                                             ; preds = %1381, %1376, %1336
  %1392 = phi i8 [ %1337, %1336 ], [ %1337, %1376 ], [ %1390, %1381 ]
  %1393 = getelementptr inbounds %struct.MB_MODE_INFO, %struct.MB_MODE_INFO* %1282, i64 0, i32 0
  %1394 = load i8, i8* %1393, align 8
  %1395 = zext i8 %1394 to i64
  %1396 = getelementptr inbounds [22 x i8], [22 x i8]* @mi_size_high, i64 0, i64 %1395
  %1397 = load i8, i8* %1396, align 1
  %1398 = zext i8 %1397 to i32
  %1399 = add nuw nsw i32 %1265, %1398
  %1400 = icmp slt i32 %1399, %855
  br i1 %1400, label %1263, label %1267

1401:                                             ; preds = %1471, %1267
  %1402 = phi i8 [ 0, %1267 ], [ %1510, %1471 ]
  %1403 = icmp eq %union.int_mv* %74, null
  br i1 %1403, label %1602, label %1404

1404:                                             ; preds = %1401
  %1405 = icmp ult i8 %1402, 2
  br i1 %1405, label %1406, label %1516

1406:                                             ; preds = %1404
  %1407 = zext i8 %1402 to i64
  %1408 = sub nsw i64 2, %1407
  %1409 = icmp ult i64 %1408, 8
  br i1 %1409, label %1410, label %1412

1410:                                             ; preds = %1469, %1406
  %1411 = phi i64 [ %1407, %1406 ], [ %1414, %1469 ]
  br label %1517

1412:                                             ; preds = %1406
  %1413 = and i64 %1408, -8
  %1414 = add nsw i64 %1413, %1407
  %1415 = insertelement <4 x i32> undef, i32 %67, i32 0
  %1416 = shufflevector <4 x i32> %1415, <4 x i32> undef, <4 x i32> zeroinitializer
  %1417 = insertelement <4 x i32> undef, i32 %67, i32 0
  %1418 = shufflevector <4 x i32> %1417, <4 x i32> undef, <4 x i32> zeroinitializer
  %1419 = add nsw i64 %1413, -8
  %1420 = lshr exact i64 %1419, 3
  %1421 = add nuw nsw i64 %1420, 1
  %1422 = and i64 %1421, 3
  %1423 = icmp ult i64 %1419, 24
  br i1 %1423, label %1455, label %1424

1424:                                             ; preds = %1412
  %1425 = sub nsw i64 %1421, %1422
  br label %1426

1426:                                             ; preds = %1426, %1424
  %1427 = phi i64 [ 0, %1424 ], [ %1452, %1426 ]
  %1428 = phi i64 [ %1425, %1424 ], [ %1453, %1426 ]
  %1429 = add i64 %1427, %1407
  %1430 = getelementptr inbounds %union.int_mv, %union.int_mv* %74, i64 %1429, i32 0
  %1431 = bitcast i32* %1430 to <4 x i32>*
  store <4 x i32> %1416, <4 x i32>* %1431, align 4
  %1432 = getelementptr inbounds i32, i32* %1430, i64 4
  %1433 = bitcast i32* %1432 to <4 x i32>*
  store <4 x i32> %1418, <4 x i32>* %1433, align 4
  %1434 = or i64 %1427, 8
  %1435 = add i64 %1434, %1407
  %1436 = getelementptr inbounds %union.int_mv, %union.int_mv* %74, i64 %1435, i32 0
  %1437 = bitcast i32* %1436 to <4 x i32>*
  store <4 x i32> %1416, <4 x i32>* %1437, align 4
  %1438 = getelementptr inbounds i32, i32* %1436, i64 4
  %1439 = bitcast i32* %1438 to <4 x i32>*
  store <4 x i32> %1418, <4 x i32>* %1439, align 4
  %1440 = or i64 %1427, 16
  %1441 = add i64 %1440, %1407
  %1442 = getelementptr inbounds %union.int_mv, %union.int_mv* %74, i64 %1441, i32 0
  %1443 = bitcast i32* %1442 to <4 x i32>*
  store <4 x i32> %1416, <4 x i32>* %1443, align 4
  %1444 = getelementptr inbounds i32, i32* %1442, i64 4
  %1445 = bitcast i32* %1444 to <4 x i32>*
  store <4 x i32> %1418, <4 x i32>* %1445, align 4
  %1446 = or i64 %1427, 24
  %1447 = add i64 %1446, %1407
  %1448 = getelementptr inbounds %union.int_mv, %union.int_mv* %74, i64 %1447, i32 0
  %1449 = bitcast i32* %1448 to <4 x i32>*
  store <4 x i32> %1416, <4 x i32>* %1449, align 4
  %1450 = getelementptr inbounds i32, i32* %1448, i64 4
  %1451 = bitcast i32* %1450 to <4 x i32>*
  store <4 x i32> %1418, <4 x i32>* %1451, align 4
  %1452 = add i64 %1427, 32
  %1453 = add i64 %1428, -4
  %1454 = icmp eq i64 %1453, 0
  br i1 %1454, label %1455, label %1426, !llvm.loop !9

1455:                                             ; preds = %1426, %1412
  %1456 = phi i64 [ 0, %1412 ], [ %1452, %1426 ]
  %1457 = icmp eq i64 %1422, 0
  br i1 %1457, label %1469, label %1458

1458:                                             ; preds = %1455, %1458
  %1459 = phi i64 [ %1466, %1458 ], [ %1456, %1455 ]
  %1460 = phi i64 [ %1467, %1458 ], [ %1422, %1455 ]
  %1461 = add i64 %1459, %1407
  %1462 = getelementptr inbounds %union.int_mv, %union.int_mv* %74, i64 %1461, i32 0
  %1463 = bitcast i32* %1462 to <4 x i32>*
  store <4 x i32> %1416, <4 x i32>* %1463, align 4
  %1464 = getelementptr inbounds i32, i32* %1462, i64 4
  %1465 = bitcast i32* %1464 to <4 x i32>*
  store <4 x i32> %1418, <4 x i32>* %1465, align 4
  %1466 = add i64 %1459, 8
  %1467 = add i64 %1460, -1
  %1468 = icmp eq i64 %1467, 0
  br i1 %1468, label %1469, label %1458, !llvm.loop !10

1469:                                             ; preds = %1458, %1455
  %1470 = icmp eq i64 %1408, %1413
  br i1 %1470, label %1513, label %1410

1471:                                             ; preds = %1471, %1270
  %1472 = phi i64 [ 0, %1270 ], [ %1509, %1471 ]
  %1473 = getelementptr inbounds [8 x %struct.candidate_mv], [8 x %struct.candidate_mv]* %5, i64 %68, i64 %1472, i32 0
  %1474 = bitcast %union.int_mv* %1473 to %struct.mv*
  %1475 = load i8, i8* %77, align 4
  %1476 = zext i8 %1475 to i32
  %1477 = shl nuw nsw i32 %1476, 5
  %1478 = load i8, i8* %79, align 1
  %1479 = zext i8 %1478 to i32
  %1480 = shl nuw nsw i32 %1479, 5
  %1481 = load i32, i32* %1271, align 4
  %1482 = sub nsw i32 %1481, %1477
  %1483 = add nsw i32 %1482, -128
  %1484 = load i32, i32* %1272, align 8
  %1485 = add nuw nsw i32 %1477, 128
  %1486 = add i32 %1485, %1484
  %1487 = load i32, i32* %1273, align 4
  %1488 = sub nsw i32 %1487, %1480
  %1489 = add nsw i32 %1488, -128
  %1490 = load i32, i32* %1274, align 16
  %1491 = add nuw nsw i32 %1480, 128
  %1492 = add i32 %1491, %1490
  %1493 = getelementptr inbounds %struct.mv, %struct.mv* %1474, i64 0, i32 1
  %1494 = load i16, i16* %1493, align 2
  %1495 = sext i16 %1494 to i32
  %1496 = icmp sgt i32 %1483, %1495
  %1497 = icmp slt i32 %1486, %1495
  %1498 = select i1 %1497, i32 %1486, i32 %1495
  %1499 = select i1 %1496, i32 %1483, i32 %1498
  %1500 = trunc i32 %1499 to i16
  store i16 %1500, i16* %1493, align 2
  %1501 = bitcast %union.int_mv* %1473 to i16*
  %1502 = load i16, i16* %1501, align 2
  %1503 = sext i16 %1502 to i32
  %1504 = icmp sgt i32 %1489, %1503
  %1505 = icmp slt i32 %1492, %1503
  %1506 = select i1 %1505, i32 %1492, i32 %1503
  %1507 = select i1 %1504, i32 %1489, i32 %1506
  %1508 = trunc i32 %1507 to i16
  store i16 %1508, i16* %1501, align 2
  %1509 = add nuw nsw i64 %1472, 1
  %1510 = load i8, i8* %69, align 1
  %1511 = zext i8 %1510 to i64
  %1512 = icmp ult i64 %1509, %1511
  br i1 %1512, label %1471, label %1401

1513:                                             ; preds = %1517, %1469
  %1514 = load i8, i8* %69, align 1
  %1515 = icmp eq i8 %1514, 0
  br i1 %1515, label %1602, label %1516

1516:                                             ; preds = %1404, %1513
  br label %1522

1517:                                             ; preds = %1410, %1517
  %1518 = phi i64 [ %1520, %1517 ], [ %1411, %1410 ]
  %1519 = getelementptr inbounds %union.int_mv, %union.int_mv* %74, i64 %1518, i32 0
  store i32 %67, i32* %1519, align 4
  %1520 = add nuw nsw i64 %1518, 1
  %1521 = icmp eq i64 %1520, 2
  br i1 %1521, label %1513, label %1517, !llvm.loop !11

1522:                                             ; preds = %1516, %1522
  %1523 = phi i64 [ %1527, %1522 ], [ 0, %1516 ]
  %1524 = getelementptr inbounds [8 x %struct.candidate_mv], [8 x %struct.candidate_mv]* %5, i64 %68, i64 %1523, i32 0, i32 0
  %1525 = load i32, i32* %1524, align 4
  %1526 = getelementptr inbounds %union.int_mv, %union.int_mv* %74, i64 %1523, i32 0
  store i32 %1525, i32* %1526, align 4
  %1527 = add nuw nsw i64 %1523, 1
  %1528 = load i8, i8* %69, align 1
  %1529 = icmp ult i8 %1528, 2
  %1530 = select i1 %1529, i8 %1528, i8 2
  %1531 = zext i8 %1530 to i64
  %1532 = icmp ult i64 %1527, %1531
  br i1 %1532, label %1522, label %1602

1533:                                             ; preds = %1009
  %1534 = getelementptr inbounds [2 x [2 x %union.int_mv]], [2 x [2 x %union.int_mv]]* %17, i64 0, i64 1, i64 0, i32 0
  %1535 = getelementptr inbounds [2 x [2 x %union.int_mv]], [2 x [2 x %union.int_mv]]* %21, i64 0, i64 0, i64 1, i32 0
  %1536 = load i32, i32* %1534, align 8
  store i32 %1536, i32* %1535, align 4
  %1537 = icmp sgt i32 %1011, 1
  br i1 %1537, label %1603, label %1538

1538:                                             ; preds = %1533, %1603, %1009
  %1539 = phi i32 [ 0, %1009 ], [ 1, %1533 ], [ 2, %1603 ]
  %1540 = getelementptr inbounds [2 x i32], [2 x i32]* %76, i64 0, i64 1
  %1541 = load i32, i32* %1540, align 4
  %1542 = icmp sgt i32 %1541, 0
  %1543 = icmp ult i32 %1539, 2
  %1544 = and i1 %1543, %1542
  br i1 %1544, label %1545, label %1562

1545:                                             ; preds = %1538
  %1546 = zext i32 %1539 to i64
  %1547 = getelementptr inbounds [2 x [2 x %union.int_mv]], [2 x [2 x %union.int_mv]]* %18, i64 0, i64 1, i64 0, i32 0
  %1548 = getelementptr inbounds [2 x [2 x %union.int_mv]], [2 x [2 x %union.int_mv]]* %21, i64 0, i64 %1546, i64 1, i32 0
  %1549 = load i32, i32* %1547, align 8
  store i32 %1549, i32* %1548, align 4
  %1550 = add nuw nsw i64 %1546, 1
  %1551 = icmp sgt i32 %1541, 1
  %1552 = icmp ult i64 %1550, 2
  %1553 = and i1 %1552, %1551
  br i1 %1553, label %1554, label %1559

1554:                                             ; preds = %1545
  %1555 = getelementptr inbounds [2 x [2 x %union.int_mv]], [2 x [2 x %union.int_mv]]* %21, i64 0, i64 1, i64 1, i32 0
  %1556 = getelementptr inbounds [2 x [2 x %union.int_mv]], [2 x [2 x %union.int_mv]]* %18, i64 0, i64 1, i64 1, i32 0
  %1557 = load i32, i32* %1556, align 4
  %1558 = add nuw nsw i64 1, 1
  store i32 %1557, i32* %1555, align 4
  br label %1559

1559:                                             ; preds = %1554, %1545
  %1560 = phi i64 [ %1550, %1545 ], [ 2, %1554 ]
  %1561 = trunc i64 %1560 to i32
  br label %1562

1562:                                             ; preds = %1559, %1538
  %1563 = phi i32 [ %1539, %1538 ], [ %1561, %1559 ]
  %1564 = icmp ult i32 %1563, 2
  br i1 %1564, label %1565, label %1599

1565:                                             ; preds = %1562
  %1566 = zext i32 %1563 to i64
  %1567 = sub nsw i64 2, %1566
  %1568 = sub nsw i64 1, %1566
  %1569 = and i64 %1567, 7
  %1570 = icmp eq i64 %1569, 0
  br i1 %1570, label %1578, label %1571

1571:                                             ; preds = %1565, %1571
  %1572 = phi i64 [ %1575, %1571 ], [ %1566, %1565 ]
  %1573 = phi i64 [ %1576, %1571 ], [ %1569, %1565 ]
  %1574 = getelementptr inbounds [2 x [2 x %union.int_mv]], [2 x [2 x %union.int_mv]]* %21, i64 0, i64 %1572, i64 1, i32 0
  store i32 %66, i32* %1574, align 4
  %1575 = add nuw nsw i64 %1572, 1
  %1576 = add i64 %1573, -1
  %1577 = icmp eq i64 %1576, 0
  br i1 %1577, label %1578, label %1571, !llvm.loop !12

1578:                                             ; preds = %1571, %1565
  %1579 = phi i64 [ %1566, %1565 ], [ %1575, %1571 ]
  %1580 = icmp ult i64 %1568, 7
  br i1 %1580, label %1599, label %1581

1581:                                             ; preds = %1578, %1581
  %1582 = phi i64 [ %1598, %1581 ], [ %1579, %1578 ]
  %1583 = getelementptr inbounds [2 x [2 x %union.int_mv]], [2 x [2 x %union.int_mv]]* %21, i64 0, i64 %1582, i64 1, i32 0
  store i32 %66, i32* %1583, align 4
  %1584 = add nuw nsw i64 %1582, 1
  %1585 = getelementptr inbounds [2 x [2 x %union.int_mv]], [2 x [2 x %union.int_mv]]* %21, i64 0, i64 %1584, i64 1, i32 0
  store i32 %66, i32* %1585, align 4
  %1586 = add nuw nsw i64 %1582, 2
  %1587 = getelementptr inbounds [2 x [2 x %union.int_mv]], [2 x [2 x %union.int_mv]]* %21, i64 0, i64 %1586, i64 1, i32 0
  store i32 %66, i32* %1587, align 4
  %1588 = add nuw nsw i64 %1582, 3
  %1589 = getelementptr inbounds [2 x [2 x %union.int_mv]], [2 x [2 x %union.int_mv]]* %21, i64 0, i64 %1588, i64 1, i32 0
  store i32 %66, i32* %1589, align 4
  %1590 = add nuw nsw i64 %1582, 4
  %1591 = getelementptr inbounds [2 x [2 x %union.int_mv]], [2 x [2 x %union.int_mv]]* %21, i64 0, i64 %1590, i64 1, i32 0
  store i32 %66, i32* %1591, align 4
  %1592 = add nuw nsw i64 %1582, 5
  %1593 = getelementptr inbounds [2 x [2 x %union.int_mv]], [2 x [2 x %union.int_mv]]* %21, i64 0, i64 %1592, i64 1, i32 0
  store i32 %66, i32* %1593, align 4
  %1594 = add nuw nsw i64 %1582, 6
  %1595 = getelementptr inbounds [2 x [2 x %union.int_mv]], [2 x [2 x %union.int_mv]]* %21, i64 0, i64 %1594, i64 1, i32 0
  store i32 %66, i32* %1595, align 4
  %1596 = add nuw nsw i64 %1582, 7
  %1597 = getelementptr inbounds [2 x [2 x %union.int_mv]], [2 x [2 x %union.int_mv]]* %21, i64 0, i64 %1596, i64 1, i32 0
  store i32 %66, i32* %1597, align 4
  %1598 = add nuw nsw i64 %1582, 8
  br label %1581

1599:                                             ; preds = %1578, %1562
  %1600 = load i8, i8* %69, align 1
  %1601 = icmp eq i8 %1600, 0
  br i1 %1601, label %924, label %1013

1602:                                             ; preds = %1522, %1049, %1037, %1401, %1513
  call void @llvm.lifetime.end.p0i8(i64 1, i8* nonnull %16) #9
  call void @llvm.lifetime.end.p0i8(i64 1, i8* nonnull %14) #9
  call void @llvm.lifetime.end.p0i8(i64 1, i8* nonnull %13) #9
  call void @llvm.lifetime.end.p0i8(i64 1, i8* nonnull %12) #9
  call void @llvm.lifetime.end.p0i8(i64 2, i8* nonnull %149) #9
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %27) #9
  ret void

1603:                                             ; preds = %1533
  %1604 = getelementptr inbounds [2 x [2 x %union.int_mv]], [2 x [2 x %union.int_mv]]* %17, i64 0, i64 1, i64 1, i32 0
  %1605 = getelementptr inbounds [2 x [2 x %union.int_mv]], [2 x [2 x %union.int_mv]]* %21, i64 0, i64 1, i64 1, i32 0
  %1606 = load i32, i32* %1604, align 4
  store i32 %1606, i32* %1605, align 4
  br label %1538

1607:                                             ; preds = %964
  %1608 = getelementptr inbounds [2 x [2 x %union.int_mv]], [2 x [2 x %union.int_mv]]* %17, i64 0, i64 0, i64 1, i32 0
  %1609 = getelementptr inbounds [2 x [2 x %union.int_mv]], [2 x [2 x %union.int_mv]]* %21, i64 0, i64 1, i64 0, i32 0
  %1610 = load i32, i32* %1608, align 4
  store i32 %1610, i32* %1609, align 8
  br label %943
}

; Function Attrs: inlinehint norecurse nounwind readonly ssp uwtable
define internal fastcc i32 @gm_get_motion_vector(%struct.WarpedMotionParams* nocapture readonly, i32, i8 zeroext, i32, i32, i32) unnamed_addr #3 {
  %7 = getelementptr inbounds %struct.WarpedMotionParams, %struct.WarpedMotionParams* %0, i64 0, i32 5
  %8 = load i8, i8* %7, align 4
  %9 = icmp eq i8 %8, 0
  br i1 %9, label %181, label %10

10:                                               ; preds = %6
  %11 = getelementptr inbounds %struct.WarpedMotionParams, %struct.WarpedMotionParams* %0, i64 0, i32 0, i64 0
  %12 = icmp eq i8 %8, 1
  br i1 %12, label %13, label %59

13:                                               ; preds = %10
  %14 = load i32, i32* %11, align 4
  %15 = lshr i32 %14, 13
  %16 = trunc i32 %15 to i16
  %17 = getelementptr inbounds %struct.WarpedMotionParams, %struct.WarpedMotionParams* %0, i64 0, i32 0, i64 1
  %18 = load i32, i32* %17, align 4
  %19 = lshr i32 %18, 13
  %20 = trunc i32 %19 to i16
  %21 = icmp eq i32 %5, 0
  br i1 %21, label %181, label %22

22:                                               ; preds = %13
  %23 = shl i32 %15, 16
  %24 = ashr exact i32 %23, 16
  %25 = srem i32 %24, 8
  %26 = icmp eq i32 %25, 0
  br i1 %26, label %40, label %27

27:                                               ; preds = %22
  %28 = trunc i32 %25 to i16
  %29 = sub i16 %16, %28
  %30 = icmp slt i32 %25, 0
  %31 = sub nsw i32 0, %25
  %32 = select i1 %30, i32 %31, i32 %25
  %33 = icmp sgt i32 %32, 4
  br i1 %33, label %34, label %40

34:                                               ; preds = %27
  %35 = icmp sgt i32 %25, 0
  br i1 %35, label %36, label %38

36:                                               ; preds = %34
  %37 = add i16 %29, 8
  br label %40

38:                                               ; preds = %34
  %39 = add i16 %29, -8
  br label %40

40:                                               ; preds = %38, %36, %27, %22
  %41 = phi i16 [ %16, %22 ], [ %37, %36 ], [ %39, %38 ], [ %29, %27 ]
  %42 = shl i32 %19, 16
  %43 = ashr exact i32 %42, 16
  %44 = srem i32 %43, 8
  %45 = icmp eq i32 %44, 0
  br i1 %45, label %181, label %46

46:                                               ; preds = %40
  %47 = trunc i32 %44 to i16
  %48 = sub i16 %20, %47
  %49 = icmp slt i32 %44, 0
  %50 = sub nsw i32 0, %44
  %51 = select i1 %49, i32 %50, i32 %44
  %52 = icmp sgt i32 %51, 4
  br i1 %52, label %53, label %181

53:                                               ; preds = %46
  %54 = icmp sgt i32 %44, 0
  br i1 %54, label %55, label %57

55:                                               ; preds = %53
  %56 = add i16 %48, 8
  br label %181

57:                                               ; preds = %53
  %58 = add i16 %48, -8
  br label %181

59:                                               ; preds = %10
  %60 = zext i8 %2 to i64
  %61 = getelementptr inbounds [22 x i8], [22 x i8]* @block_size_wide, i64 0, i64 %60
  %62 = load i8, i8* %61, align 1
  %63 = shl i32 %3, 2
  %64 = lshr i8 %62, 1
  %65 = zext i8 %64 to i32
  %66 = add i32 %63, -1
  %67 = add i32 %66, %65
  %68 = getelementptr inbounds [22 x i8], [22 x i8]* @block_size_high, i64 0, i64 %60
  %69 = load i8, i8* %68, align 1
  %70 = shl i32 %4, 2
  %71 = lshr i8 %69, 1
  %72 = zext i8 %71 to i32
  %73 = add i32 %70, -1
  %74 = add i32 %73, %72
  %75 = getelementptr inbounds %struct.WarpedMotionParams, %struct.WarpedMotionParams* %0, i64 0, i32 0, i64 2
  %76 = load i32, i32* %75, align 4
  %77 = add nsw i32 %76, -65536
  %78 = mul nsw i32 %77, %67
  %79 = getelementptr inbounds %struct.WarpedMotionParams, %struct.WarpedMotionParams* %0, i64 0, i32 0, i64 3
  %80 = load i32, i32* %79, align 4
  %81 = mul nsw i32 %74, %80
  %82 = load i32, i32* %11, align 4
  %83 = add i32 %82, %78
  %84 = add i32 %83, %81
  %85 = getelementptr inbounds %struct.WarpedMotionParams, %struct.WarpedMotionParams* %0, i64 0, i32 0, i64 4
  %86 = load i32, i32* %85, align 4
  %87 = mul nsw i32 %86, %67
  %88 = getelementptr inbounds %struct.WarpedMotionParams, %struct.WarpedMotionParams* %0, i64 0, i32 0, i64 5
  %89 = load i32, i32* %88, align 4
  %90 = add nsw i32 %89, -65536
  %91 = mul nsw i32 %90, %74
  %92 = getelementptr inbounds %struct.WarpedMotionParams, %struct.WarpedMotionParams* %0, i64 0, i32 0, i64 1
  %93 = load i32, i32* %92, align 4
  %94 = add i32 %93, %87
  %95 = add i32 %94, %91
  %96 = icmp eq i32 %1, 0
  %97 = icmp slt i32 %84, 0
  br i1 %96, label %106, label %98

98:                                               ; preds = %59
  br i1 %97, label %99, label %103

99:                                               ; preds = %98
  %100 = sub i32 4096, %84
  %101 = ashr i32 %100, 13
  %102 = sub nsw i32 0, %101
  br label %114

103:                                              ; preds = %98
  %104 = add nuw nsw i32 %84, 4096
  %105 = ashr i32 %104, 13
  br label %114

106:                                              ; preds = %59
  br i1 %97, label %107, label %111

107:                                              ; preds = %106
  %108 = sub i32 8192, %84
  %109 = ashr i32 %108, 14
  %110 = sub nsw i32 0, %109
  br label %124

111:                                              ; preds = %106
  %112 = add nuw nsw i32 %84, 8192
  %113 = ashr i32 %112, 14
  br label %124

114:                                              ; preds = %99, %103
  %115 = phi i32 [ %105, %103 ], [ %102, %99 ]
  %116 = icmp slt i32 %95, 0
  br i1 %116, label %117, label %121

117:                                              ; preds = %114
  %118 = sub i32 4096, %95
  %119 = ashr i32 %118, 13
  %120 = sub nsw i32 0, %119
  br label %138

121:                                              ; preds = %114
  %122 = add nuw nsw i32 %95, 4096
  %123 = ashr i32 %122, 13
  br label %138

124:                                              ; preds = %111, %107
  %125 = phi i32 [ %110, %107 ], [ %113, %111 ]
  %126 = shl nsw i32 %125, 1
  %127 = icmp slt i32 %95, 0
  br i1 %127, label %128, label %132

128:                                              ; preds = %124
  %129 = sub i32 8192, %95
  %130 = ashr i32 %129, 14
  %131 = sub nsw i32 0, %130
  br label %135

132:                                              ; preds = %124
  %133 = add nuw nsw i32 %95, 8192
  %134 = ashr i32 %133, 14
  br label %135

135:                                              ; preds = %132, %128
  %136 = phi i32 [ %131, %128 ], [ %134, %132 ]
  %137 = shl nsw i32 %136, 1
  br label %138

138:                                              ; preds = %117, %121, %135
  %139 = phi i32 [ %126, %135 ], [ %115, %117 ], [ %115, %121 ]
  %140 = phi i32 [ %137, %135 ], [ %120, %117 ], [ %123, %121 ]
  %141 = trunc i32 %140 to i16
  %142 = trunc i32 %139 to i16
  %143 = icmp eq i32 %5, 0
  br i1 %143, label %181, label %144

144:                                              ; preds = %138
  %145 = shl i32 %140, 16
  %146 = ashr exact i32 %145, 16
  %147 = srem i32 %146, 8
  %148 = icmp eq i32 %147, 0
  br i1 %148, label %162, label %149

149:                                              ; preds = %144
  %150 = trunc i32 %147 to i16
  %151 = sub i16 %141, %150
  %152 = icmp slt i32 %147, 0
  %153 = sub nsw i32 0, %147
  %154 = select i1 %152, i32 %153, i32 %147
  %155 = icmp sgt i32 %154, 4
  br i1 %155, label %156, label %162

156:                                              ; preds = %149
  %157 = icmp sgt i32 %147, 0
  br i1 %157, label %158, label %160

158:                                              ; preds = %156
  %159 = add i16 %151, 8
  br label %162

160:                                              ; preds = %156
  %161 = add i16 %151, -8
  br label %162

162:                                              ; preds = %160, %158, %149, %144
  %163 = phi i16 [ %141, %144 ], [ %159, %158 ], [ %161, %160 ], [ %151, %149 ]
  %164 = shl i32 %139, 16
  %165 = ashr exact i32 %164, 16
  %166 = srem i32 %165, 8
  %167 = icmp eq i32 %166, 0
  br i1 %167, label %181, label %168

168:                                              ; preds = %162
  %169 = trunc i32 %166 to i16
  %170 = sub i16 %142, %169
  %171 = icmp slt i32 %166, 0
  %172 = sub nsw i32 0, %166
  %173 = select i1 %171, i32 %172, i32 %166
  %174 = icmp sgt i32 %173, 4
  br i1 %174, label %175, label %181

175:                                              ; preds = %168
  %176 = icmp sgt i32 %166, 0
  br i1 %176, label %177, label %179

177:                                              ; preds = %175
  %178 = add i16 %170, 8
  br label %181

179:                                              ; preds = %175
  %180 = add i16 %170, -8
  br label %181

181:                                              ; preds = %179, %177, %168, %162, %57, %55, %46, %40, %6, %13, %138
  %182 = phi i16 [ %20, %13 ], [ %142, %138 ], [ 0, %6 ], [ %20, %40 ], [ %56, %55 ], [ %58, %57 ], [ %48, %46 ], [ %142, %162 ], [ %178, %177 ], [ %180, %179 ], [ %170, %168 ]
  %183 = phi i16 [ %16, %13 ], [ %141, %138 ], [ 0, %6 ], [ %41, %40 ], [ %41, %55 ], [ %41, %57 ], [ %41, %46 ], [ %163, %162 ], [ %163, %177 ], [ %163, %179 ], [ %163, %168 ]
  %184 = zext i16 %182 to i32
  %185 = shl nuw i32 %184, 16
  %186 = zext i16 %183 to i32
  %187 = or i32 %185, %186
  ret i32 %187
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @av1_find_best_ref_mvs(i32, %union.int_mv* nocapture, %union.int_mv* nocapture, %union.int_mv* nocapture, i32) local_unnamed_addr #0 {
  %6 = icmp eq i32 %4, 0
  %7 = bitcast %union.int_mv* %1 to %struct.mv*
  br i1 %6, label %46, label %8

8:                                                ; preds = %5
  %9 = bitcast %union.int_mv* %1 to i16*
  %10 = load i16, i16* %9, align 2
  %11 = sext i16 %10 to i32
  %12 = srem i32 %11, 8
  %13 = icmp eq i32 %12, 0
  br i1 %13, label %27, label %14

14:                                               ; preds = %8
  %15 = trunc i32 %12 to i16
  %16 = sub i16 %10, %15
  store i16 %16, i16* %9, align 2
  %17 = icmp slt i32 %12, 0
  %18 = sub nsw i32 0, %12
  %19 = select i1 %17, i32 %18, i32 %12
  %20 = icmp sgt i32 %19, 4
  br i1 %20, label %21, label %27

21:                                               ; preds = %14
  %22 = icmp sgt i32 %12, 0
  br i1 %22, label %23, label %25

23:                                               ; preds = %21
  %24 = add i16 %16, 8
  store i16 %24, i16* %9, align 2
  br label %27

25:                                               ; preds = %21
  %26 = add i16 %16, -8
  store i16 %26, i16* %9, align 2
  br label %27

27:                                               ; preds = %25, %23, %14, %8
  %28 = getelementptr inbounds %struct.mv, %struct.mv* %7, i64 0, i32 1
  %29 = load i16, i16* %28, align 2
  %30 = sext i16 %29 to i32
  %31 = srem i32 %30, 8
  %32 = icmp eq i32 %31, 0
  br i1 %32, label %66, label %33

33:                                               ; preds = %27
  %34 = trunc i32 %31 to i16
  %35 = sub i16 %29, %34
  store i16 %35, i16* %28, align 2
  %36 = icmp slt i32 %31, 0
  %37 = sub nsw i32 0, %31
  %38 = select i1 %36, i32 %37, i32 %31
  %39 = icmp sgt i32 %38, 4
  br i1 %39, label %40, label %66

40:                                               ; preds = %33
  %41 = icmp sgt i32 %31, 0
  br i1 %41, label %42, label %44

42:                                               ; preds = %40
  %43 = add i16 %35, 8
  store i16 %43, i16* %28, align 2
  br label %66

44:                                               ; preds = %40
  %45 = add i16 %35, -8
  store i16 %45, i16* %28, align 2
  br label %66

46:                                               ; preds = %5
  %47 = icmp eq i32 %0, 0
  br i1 %47, label %48, label %126

48:                                               ; preds = %46
  %49 = bitcast %union.int_mv* %1 to i16*
  %50 = load i16, i16* %49, align 2
  %51 = and i16 %50, 1
  %52 = icmp eq i16 %51, 0
  br i1 %52, label %57, label %53

53:                                               ; preds = %48
  %54 = icmp sgt i16 %50, 0
  %55 = select i1 %54, i16 -1, i16 1
  %56 = add i16 %55, %50
  store i16 %56, i16* %49, align 2
  br label %57

57:                                               ; preds = %53, %48
  %58 = getelementptr inbounds %struct.mv, %struct.mv* %7, i64 0, i32 1
  %59 = load i16, i16* %58, align 2
  %60 = and i16 %59, 1
  %61 = icmp eq i16 %60, 0
  br i1 %61, label %106, label %62

62:                                               ; preds = %57
  %63 = icmp sgt i16 %59, 0
  %64 = select i1 %63, i16 -1, i16 1
  %65 = add i16 %64, %59
  store i16 %65, i16* %58, align 2
  br label %106

66:                                               ; preds = %27, %33, %42, %44
  %67 = getelementptr inbounds %union.int_mv, %union.int_mv* %1, i64 1
  %68 = bitcast %union.int_mv* %67 to %struct.mv*
  %69 = bitcast %union.int_mv* %67 to i16*
  %70 = load i16, i16* %69, align 2
  %71 = sext i16 %70 to i32
  %72 = srem i32 %71, 8
  %73 = icmp eq i32 %72, 0
  br i1 %73, label %87, label %74

74:                                               ; preds = %66
  %75 = trunc i32 %72 to i16
  %76 = sub i16 %70, %75
  store i16 %76, i16* %69, align 2
  %77 = icmp slt i32 %72, 0
  %78 = sub nsw i32 0, %72
  %79 = select i1 %77, i32 %78, i32 %72
  %80 = icmp sgt i32 %79, 4
  br i1 %80, label %81, label %87

81:                                               ; preds = %74
  %82 = icmp sgt i32 %72, 0
  br i1 %82, label %85, label %83

83:                                               ; preds = %81
  %84 = add i16 %76, -8
  store i16 %84, i16* %69, align 2
  br label %87

85:                                               ; preds = %81
  %86 = add i16 %76, 8
  store i16 %86, i16* %69, align 2
  br label %87

87:                                               ; preds = %85, %83, %74, %66
  %88 = getelementptr inbounds %struct.mv, %struct.mv* %68, i64 0, i32 1
  %89 = load i16, i16* %88, align 2
  %90 = sext i16 %89 to i32
  %91 = srem i32 %90, 8
  %92 = icmp eq i32 %91, 0
  br i1 %92, label %126, label %93

93:                                               ; preds = %87
  %94 = trunc i32 %91 to i16
  %95 = sub i16 %89, %94
  store i16 %95, i16* %88, align 2
  %96 = icmp slt i32 %91, 0
  %97 = sub nsw i32 0, %91
  %98 = select i1 %96, i32 %97, i32 %91
  %99 = icmp sgt i32 %98, 4
  br i1 %99, label %100, label %126

100:                                              ; preds = %93
  %101 = icmp sgt i32 %91, 0
  br i1 %101, label %104, label %102

102:                                              ; preds = %100
  %103 = add i16 %95, -8
  store i16 %103, i16* %88, align 2
  br label %126

104:                                              ; preds = %100
  %105 = add i16 %95, 8
  store i16 %105, i16* %88, align 2
  br label %126

106:                                              ; preds = %62, %57
  %107 = getelementptr inbounds %union.int_mv, %union.int_mv* %1, i64 1
  %108 = bitcast %union.int_mv* %107 to %struct.mv*
  %109 = bitcast %union.int_mv* %107 to i16*
  %110 = load i16, i16* %109, align 2
  %111 = and i16 %110, 1
  %112 = icmp eq i16 %111, 0
  br i1 %112, label %117, label %113

113:                                              ; preds = %106
  %114 = icmp sgt i16 %110, 0
  %115 = select i1 %114, i16 -1, i16 1
  %116 = add i16 %115, %110
  store i16 %116, i16* %109, align 2
  br label %117

117:                                              ; preds = %113, %106
  %118 = getelementptr inbounds %struct.mv, %struct.mv* %108, i64 0, i32 1
  %119 = load i16, i16* %118, align 2
  %120 = and i16 %119, 1
  %121 = icmp eq i16 %120, 0
  br i1 %121, label %126, label %122

122:                                              ; preds = %117
  %123 = icmp sgt i16 %119, 0
  %124 = select i1 %123, i16 -1, i16 1
  %125 = add i16 %124, %119
  store i16 %125, i16* %118, align 2
  br label %126

126:                                              ; preds = %46, %122, %117, %104, %102, %93, %87
  %127 = getelementptr inbounds %union.int_mv, %union.int_mv* %1, i64 0, i32 0
  %128 = getelementptr inbounds %union.int_mv, %union.int_mv* %2, i64 0, i32 0
  %129 = load i32, i32* %127, align 4
  store i32 %129, i32* %128, align 4
  %130 = getelementptr inbounds %union.int_mv, %union.int_mv* %1, i64 1, i32 0
  %131 = getelementptr inbounds %union.int_mv, %union.int_mv* %3, i64 0, i32 0
  %132 = load i32, i32* %130, align 4
  store i32 %132, i32* %131, align 4
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @av1_setup_frame_buf_refs(%struct.AV1Common* nocapture readonly) local_unnamed_addr #0 {
  %2 = getelementptr inbounds %struct.AV1Common, %struct.AV1Common* %0, i64 0, i32 0, i32 2
  %3 = load i32, i32* %2, align 4
  %4 = getelementptr inbounds %struct.AV1Common, %struct.AV1Common* %0, i64 0, i32 12
  %5 = load %struct.RefCntBuffer*, %struct.RefCntBuffer** %4, align 16
  %6 = getelementptr inbounds %struct.RefCntBuffer, %struct.RefCntBuffer* %5, i64 0, i32 1
  store i32 %3, i32* %6, align 4
  %7 = getelementptr inbounds %struct.AV1Common, %struct.AV1Common* %0, i64 0, i32 0, i32 3
  %8 = load i32, i32* %7, align 8
  %9 = load %struct.RefCntBuffer*, %struct.RefCntBuffer** %4, align 16
  %10 = getelementptr inbounds %struct.RefCntBuffer, %struct.RefCntBuffer* %9, i64 0, i32 3
  store i32 %8, i32* %10, align 4
  %11 = getelementptr inbounds %struct.AV1Common, %struct.AV1Common* %0, i64 0, i32 13, i64 0
  %12 = load i32, i32* %11, align 4
  %13 = icmp eq i32 %12, -1
  br i1 %13, label %28, label %14

14:                                               ; preds = %1
  %15 = sext i32 %12 to i64
  %16 = getelementptr inbounds %struct.AV1Common, %struct.AV1Common* %0, i64 0, i32 16, i64 %15
  %17 = load %struct.RefCntBuffer*, %struct.RefCntBuffer** %16, align 8
  %18 = icmp eq %struct.RefCntBuffer* %17, null
  br i1 %18, label %28, label %19

19:                                               ; preds = %14
  %20 = getelementptr inbounds %struct.RefCntBuffer, %struct.RefCntBuffer* %17, i64 0, i32 1
  %21 = load i32, i32* %20, align 4
  %22 = load %struct.RefCntBuffer*, %struct.RefCntBuffer** %4, align 16
  %23 = getelementptr inbounds %struct.RefCntBuffer, %struct.RefCntBuffer* %22, i64 0, i32 2, i64 0
  store i32 %21, i32* %23, align 4
  %24 = getelementptr inbounds %struct.RefCntBuffer, %struct.RefCntBuffer* %17, i64 0, i32 3
  %25 = load i32, i32* %24, align 4
  %26 = load %struct.RefCntBuffer*, %struct.RefCntBuffer** %4, align 16
  %27 = getelementptr inbounds %struct.RefCntBuffer, %struct.RefCntBuffer* %26, i64 0, i32 4, i64 0
  store i32 %25, i32* %27, align 4
  br label %28

28:                                               ; preds = %19, %14, %1
  %29 = getelementptr inbounds %struct.AV1Common, %struct.AV1Common* %0, i64 0, i32 13, i64 1
  %30 = load i32, i32* %29, align 4
  %31 = icmp eq i32 %30, -1
  br i1 %31, label %46, label %32

32:                                               ; preds = %28
  %33 = sext i32 %30 to i64
  %34 = getelementptr inbounds %struct.AV1Common, %struct.AV1Common* %0, i64 0, i32 16, i64 %33
  %35 = load %struct.RefCntBuffer*, %struct.RefCntBuffer** %34, align 8
  %36 = icmp eq %struct.RefCntBuffer* %35, null
  br i1 %36, label %46, label %37

37:                                               ; preds = %32
  %38 = getelementptr inbounds %struct.RefCntBuffer, %struct.RefCntBuffer* %35, i64 0, i32 1
  %39 = load i32, i32* %38, align 4
  %40 = load %struct.RefCntBuffer*, %struct.RefCntBuffer** %4, align 16
  %41 = getelementptr inbounds %struct.RefCntBuffer, %struct.RefCntBuffer* %40, i64 0, i32 2, i64 1
  store i32 %39, i32* %41, align 4
  %42 = getelementptr inbounds %struct.RefCntBuffer, %struct.RefCntBuffer* %35, i64 0, i32 3
  %43 = load i32, i32* %42, align 4
  %44 = load %struct.RefCntBuffer*, %struct.RefCntBuffer** %4, align 16
  %45 = getelementptr inbounds %struct.RefCntBuffer, %struct.RefCntBuffer* %44, i64 0, i32 4, i64 1
  store i32 %43, i32* %45, align 4
  br label %46

46:                                               ; preds = %28, %32, %37
  %47 = getelementptr inbounds %struct.AV1Common, %struct.AV1Common* %0, i64 0, i32 13, i64 2
  %48 = load i32, i32* %47, align 4
  %49 = icmp eq i32 %48, -1
  br i1 %49, label %64, label %50

50:                                               ; preds = %46
  %51 = sext i32 %48 to i64
  %52 = getelementptr inbounds %struct.AV1Common, %struct.AV1Common* %0, i64 0, i32 16, i64 %51
  %53 = load %struct.RefCntBuffer*, %struct.RefCntBuffer** %52, align 8
  %54 = icmp eq %struct.RefCntBuffer* %53, null
  br i1 %54, label %64, label %55

55:                                               ; preds = %50
  %56 = getelementptr inbounds %struct.RefCntBuffer, %struct.RefCntBuffer* %53, i64 0, i32 1
  %57 = load i32, i32* %56, align 4
  %58 = load %struct.RefCntBuffer*, %struct.RefCntBuffer** %4, align 16
  %59 = getelementptr inbounds %struct.RefCntBuffer, %struct.RefCntBuffer* %58, i64 0, i32 2, i64 2
  store i32 %57, i32* %59, align 4
  %60 = getelementptr inbounds %struct.RefCntBuffer, %struct.RefCntBuffer* %53, i64 0, i32 3
  %61 = load i32, i32* %60, align 4
  %62 = load %struct.RefCntBuffer*, %struct.RefCntBuffer** %4, align 16
  %63 = getelementptr inbounds %struct.RefCntBuffer, %struct.RefCntBuffer* %62, i64 0, i32 4, i64 2
  store i32 %61, i32* %63, align 4
  br label %64

64:                                               ; preds = %46, %50, %55
  %65 = getelementptr inbounds %struct.AV1Common, %struct.AV1Common* %0, i64 0, i32 13, i64 3
  %66 = load i32, i32* %65, align 4
  %67 = icmp eq i32 %66, -1
  br i1 %67, label %82, label %68

68:                                               ; preds = %64
  %69 = sext i32 %66 to i64
  %70 = getelementptr inbounds %struct.AV1Common, %struct.AV1Common* %0, i64 0, i32 16, i64 %69
  %71 = load %struct.RefCntBuffer*, %struct.RefCntBuffer** %70, align 8
  %72 = icmp eq %struct.RefCntBuffer* %71, null
  br i1 %72, label %82, label %73

73:                                               ; preds = %68
  %74 = getelementptr inbounds %struct.RefCntBuffer, %struct.RefCntBuffer* %71, i64 0, i32 1
  %75 = load i32, i32* %74, align 4
  %76 = load %struct.RefCntBuffer*, %struct.RefCntBuffer** %4, align 16
  %77 = getelementptr inbounds %struct.RefCntBuffer, %struct.RefCntBuffer* %76, i64 0, i32 2, i64 3
  store i32 %75, i32* %77, align 4
  %78 = getelementptr inbounds %struct.RefCntBuffer, %struct.RefCntBuffer* %71, i64 0, i32 3
  %79 = load i32, i32* %78, align 4
  %80 = load %struct.RefCntBuffer*, %struct.RefCntBuffer** %4, align 16
  %81 = getelementptr inbounds %struct.RefCntBuffer, %struct.RefCntBuffer* %80, i64 0, i32 4, i64 3
  store i32 %79, i32* %81, align 4
  br label %82

82:                                               ; preds = %64, %68, %73
  %83 = getelementptr inbounds %struct.AV1Common, %struct.AV1Common* %0, i64 0, i32 13, i64 4
  %84 = load i32, i32* %83, align 4
  %85 = icmp eq i32 %84, -1
  br i1 %85, label %100, label %86

86:                                               ; preds = %82
  %87 = sext i32 %84 to i64
  %88 = getelementptr inbounds %struct.AV1Common, %struct.AV1Common* %0, i64 0, i32 16, i64 %87
  %89 = load %struct.RefCntBuffer*, %struct.RefCntBuffer** %88, align 8
  %90 = icmp eq %struct.RefCntBuffer* %89, null
  br i1 %90, label %100, label %91

91:                                               ; preds = %86
  %92 = getelementptr inbounds %struct.RefCntBuffer, %struct.RefCntBuffer* %89, i64 0, i32 1
  %93 = load i32, i32* %92, align 4
  %94 = load %struct.RefCntBuffer*, %struct.RefCntBuffer** %4, align 16
  %95 = getelementptr inbounds %struct.RefCntBuffer, %struct.RefCntBuffer* %94, i64 0, i32 2, i64 4
  store i32 %93, i32* %95, align 4
  %96 = getelementptr inbounds %struct.RefCntBuffer, %struct.RefCntBuffer* %89, i64 0, i32 3
  %97 = load i32, i32* %96, align 4
  %98 = load %struct.RefCntBuffer*, %struct.RefCntBuffer** %4, align 16
  %99 = getelementptr inbounds %struct.RefCntBuffer, %struct.RefCntBuffer* %98, i64 0, i32 4, i64 4
  store i32 %97, i32* %99, align 4
  br label %100

100:                                              ; preds = %82, %86, %91
  %101 = getelementptr inbounds %struct.AV1Common, %struct.AV1Common* %0, i64 0, i32 13, i64 5
  %102 = load i32, i32* %101, align 4
  %103 = icmp eq i32 %102, -1
  br i1 %103, label %118, label %104

104:                                              ; preds = %100
  %105 = sext i32 %102 to i64
  %106 = getelementptr inbounds %struct.AV1Common, %struct.AV1Common* %0, i64 0, i32 16, i64 %105
  %107 = load %struct.RefCntBuffer*, %struct.RefCntBuffer** %106, align 8
  %108 = icmp eq %struct.RefCntBuffer* %107, null
  br i1 %108, label %118, label %109

109:                                              ; preds = %104
  %110 = getelementptr inbounds %struct.RefCntBuffer, %struct.RefCntBuffer* %107, i64 0, i32 1
  %111 = load i32, i32* %110, align 4
  %112 = load %struct.RefCntBuffer*, %struct.RefCntBuffer** %4, align 16
  %113 = getelementptr inbounds %struct.RefCntBuffer, %struct.RefCntBuffer* %112, i64 0, i32 2, i64 5
  store i32 %111, i32* %113, align 4
  %114 = getelementptr inbounds %struct.RefCntBuffer, %struct.RefCntBuffer* %107, i64 0, i32 3
  %115 = load i32, i32* %114, align 4
  %116 = load %struct.RefCntBuffer*, %struct.RefCntBuffer** %4, align 16
  %117 = getelementptr inbounds %struct.RefCntBuffer, %struct.RefCntBuffer* %116, i64 0, i32 4, i64 5
  store i32 %115, i32* %117, align 4
  br label %118

118:                                              ; preds = %100, %104, %109
  %119 = getelementptr inbounds %struct.AV1Common, %struct.AV1Common* %0, i64 0, i32 13, i64 6
  %120 = load i32, i32* %119, align 4
  %121 = icmp eq i32 %120, -1
  br i1 %121, label %136, label %122

122:                                              ; preds = %118
  %123 = sext i32 %120 to i64
  %124 = getelementptr inbounds %struct.AV1Common, %struct.AV1Common* %0, i64 0, i32 16, i64 %123
  %125 = load %struct.RefCntBuffer*, %struct.RefCntBuffer** %124, align 8
  %126 = icmp eq %struct.RefCntBuffer* %125, null
  br i1 %126, label %136, label %127

127:                                              ; preds = %122
  %128 = getelementptr inbounds %struct.RefCntBuffer, %struct.RefCntBuffer* %125, i64 0, i32 1
  %129 = load i32, i32* %128, align 4
  %130 = load %struct.RefCntBuffer*, %struct.RefCntBuffer** %4, align 16
  %131 = getelementptr inbounds %struct.RefCntBuffer, %struct.RefCntBuffer* %130, i64 0, i32 2, i64 6
  store i32 %129, i32* %131, align 4
  %132 = getelementptr inbounds %struct.RefCntBuffer, %struct.RefCntBuffer* %125, i64 0, i32 3
  %133 = load i32, i32* %132, align 4
  %134 = load %struct.RefCntBuffer*, %struct.RefCntBuffer** %4, align 16
  %135 = getelementptr inbounds %struct.RefCntBuffer, %struct.RefCntBuffer* %134, i64 0, i32 4, i64 6
  store i32 %133, i32* %135, align 4
  br label %136

136:                                              ; preds = %127, %122, %118
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @av1_setup_frame_sign_bias(%struct.AV1Common* nocapture) local_unnamed_addr #0 {
  %2 = getelementptr inbounds %struct.AV1Common, %struct.AV1Common* %0, i64 0, i32 35
  %3 = getelementptr inbounds %struct.AV1Common, %struct.AV1Common* %0, i64 0, i32 0, i32 2
  %4 = getelementptr inbounds %struct.AV1Common, %struct.AV1Common* %0, i64 0, i32 13, i64 0
  %5 = load i32, i32* %4, align 4
  %6 = icmp eq i32 %5, -1
  br i1 %6, label %30, label %7

7:                                                ; preds = %1
  %8 = sext i32 %5 to i64
  %9 = getelementptr inbounds %struct.AV1Common, %struct.AV1Common* %0, i64 0, i32 16, i64 %8
  %10 = load %struct.RefCntBuffer*, %struct.RefCntBuffer** %9, align 8
  %11 = load %struct.SequenceHeader*, %struct.SequenceHeader** %2, align 16
  %12 = getelementptr inbounds %struct.SequenceHeader, %struct.SequenceHeader* %11, i64 0, i32 10, i32 0
  %13 = load i32, i32* %12, align 8
  %14 = icmp ne i32 %13, 0
  %15 = icmp ne %struct.RefCntBuffer* %10, null
  %16 = and i1 %15, %14
  br i1 %16, label %17, label %30

17:                                               ; preds = %7
  %18 = getelementptr inbounds %struct.RefCntBuffer, %struct.RefCntBuffer* %10, i64 0, i32 1
  %19 = load i32, i32* %18, align 4
  %20 = load i32, i32* %3, align 4
  %21 = getelementptr inbounds %struct.SequenceHeader, %struct.SequenceHeader* %11, i64 0, i32 10, i32 1
  %22 = load i32, i32* %21, align 4
  %23 = sub nsw i32 %19, %20
  %24 = shl i32 1, %22
  %25 = add nsw i32 %24, -1
  %26 = and i32 %25, %23
  %27 = and i32 %24, %23
  %28 = icmp sgt i32 %26, %27
  %29 = zext i1 %28 to i32
  br label %30

30:                                               ; preds = %1, %7, %17
  %31 = phi i32 [ %29, %17 ], [ 0, %7 ], [ 0, %1 ]
  %32 = getelementptr inbounds %struct.AV1Common, %struct.AV1Common* %0, i64 0, i32 45, i64 1
  store i32 %31, i32* %32, align 4
  %33 = getelementptr inbounds %struct.AV1Common, %struct.AV1Common* %0, i64 0, i32 13, i64 1
  %34 = load i32, i32* %33, align 4
  %35 = icmp eq i32 %34, -1
  br i1 %35, label %59, label %36

36:                                               ; preds = %30
  %37 = sext i32 %34 to i64
  %38 = getelementptr inbounds %struct.AV1Common, %struct.AV1Common* %0, i64 0, i32 16, i64 %37
  %39 = load %struct.RefCntBuffer*, %struct.RefCntBuffer** %38, align 8
  %40 = load %struct.SequenceHeader*, %struct.SequenceHeader** %2, align 16
  %41 = getelementptr inbounds %struct.SequenceHeader, %struct.SequenceHeader* %40, i64 0, i32 10, i32 0
  %42 = load i32, i32* %41, align 8
  %43 = icmp ne i32 %42, 0
  %44 = icmp ne %struct.RefCntBuffer* %39, null
  %45 = and i1 %44, %43
  br i1 %45, label %46, label %59

46:                                               ; preds = %36
  %47 = getelementptr inbounds %struct.RefCntBuffer, %struct.RefCntBuffer* %39, i64 0, i32 1
  %48 = load i32, i32* %47, align 4
  %49 = load i32, i32* %3, align 4
  %50 = getelementptr inbounds %struct.SequenceHeader, %struct.SequenceHeader* %40, i64 0, i32 10, i32 1
  %51 = load i32, i32* %50, align 4
  %52 = sub nsw i32 %48, %49
  %53 = shl i32 1, %51
  %54 = add nsw i32 %53, -1
  %55 = and i32 %54, %52
  %56 = and i32 %53, %52
  %57 = icmp sgt i32 %55, %56
  %58 = zext i1 %57 to i32
  br label %59

59:                                               ; preds = %46, %36, %30
  %60 = phi i32 [ %58, %46 ], [ 0, %36 ], [ 0, %30 ]
  %61 = getelementptr inbounds %struct.AV1Common, %struct.AV1Common* %0, i64 0, i32 45, i64 2
  store i32 %60, i32* %61, align 4
  %62 = getelementptr inbounds %struct.AV1Common, %struct.AV1Common* %0, i64 0, i32 13, i64 2
  %63 = load i32, i32* %62, align 4
  %64 = icmp eq i32 %63, -1
  br i1 %64, label %88, label %65

65:                                               ; preds = %59
  %66 = sext i32 %63 to i64
  %67 = getelementptr inbounds %struct.AV1Common, %struct.AV1Common* %0, i64 0, i32 16, i64 %66
  %68 = load %struct.RefCntBuffer*, %struct.RefCntBuffer** %67, align 8
  %69 = load %struct.SequenceHeader*, %struct.SequenceHeader** %2, align 16
  %70 = getelementptr inbounds %struct.SequenceHeader, %struct.SequenceHeader* %69, i64 0, i32 10, i32 0
  %71 = load i32, i32* %70, align 8
  %72 = icmp ne i32 %71, 0
  %73 = icmp ne %struct.RefCntBuffer* %68, null
  %74 = and i1 %73, %72
  br i1 %74, label %75, label %88

75:                                               ; preds = %65
  %76 = getelementptr inbounds %struct.RefCntBuffer, %struct.RefCntBuffer* %68, i64 0, i32 1
  %77 = load i32, i32* %76, align 4
  %78 = load i32, i32* %3, align 4
  %79 = getelementptr inbounds %struct.SequenceHeader, %struct.SequenceHeader* %69, i64 0, i32 10, i32 1
  %80 = load i32, i32* %79, align 4
  %81 = sub nsw i32 %77, %78
  %82 = shl i32 1, %80
  %83 = add nsw i32 %82, -1
  %84 = and i32 %83, %81
  %85 = and i32 %82, %81
  %86 = icmp sgt i32 %84, %85
  %87 = zext i1 %86 to i32
  br label %88

88:                                               ; preds = %75, %65, %59
  %89 = phi i32 [ %87, %75 ], [ 0, %65 ], [ 0, %59 ]
  %90 = getelementptr inbounds %struct.AV1Common, %struct.AV1Common* %0, i64 0, i32 45, i64 3
  store i32 %89, i32* %90, align 4
  %91 = getelementptr inbounds %struct.AV1Common, %struct.AV1Common* %0, i64 0, i32 13, i64 3
  %92 = load i32, i32* %91, align 4
  %93 = icmp eq i32 %92, -1
  br i1 %93, label %117, label %94

94:                                               ; preds = %88
  %95 = sext i32 %92 to i64
  %96 = getelementptr inbounds %struct.AV1Common, %struct.AV1Common* %0, i64 0, i32 16, i64 %95
  %97 = load %struct.RefCntBuffer*, %struct.RefCntBuffer** %96, align 8
  %98 = load %struct.SequenceHeader*, %struct.SequenceHeader** %2, align 16
  %99 = getelementptr inbounds %struct.SequenceHeader, %struct.SequenceHeader* %98, i64 0, i32 10, i32 0
  %100 = load i32, i32* %99, align 8
  %101 = icmp ne i32 %100, 0
  %102 = icmp ne %struct.RefCntBuffer* %97, null
  %103 = and i1 %102, %101
  br i1 %103, label %104, label %117

104:                                              ; preds = %94
  %105 = getelementptr inbounds %struct.RefCntBuffer, %struct.RefCntBuffer* %97, i64 0, i32 1
  %106 = load i32, i32* %105, align 4
  %107 = load i32, i32* %3, align 4
  %108 = getelementptr inbounds %struct.SequenceHeader, %struct.SequenceHeader* %98, i64 0, i32 10, i32 1
  %109 = load i32, i32* %108, align 4
  %110 = sub nsw i32 %106, %107
  %111 = shl i32 1, %109
  %112 = add nsw i32 %111, -1
  %113 = and i32 %112, %110
  %114 = and i32 %111, %110
  %115 = icmp sgt i32 %113, %114
  %116 = zext i1 %115 to i32
  br label %117

117:                                              ; preds = %104, %94, %88
  %118 = phi i32 [ %116, %104 ], [ 0, %94 ], [ 0, %88 ]
  %119 = getelementptr inbounds %struct.AV1Common, %struct.AV1Common* %0, i64 0, i32 45, i64 4
  store i32 %118, i32* %119, align 4
  %120 = getelementptr inbounds %struct.AV1Common, %struct.AV1Common* %0, i64 0, i32 13, i64 4
  %121 = load i32, i32* %120, align 4
  %122 = icmp eq i32 %121, -1
  br i1 %122, label %146, label %123

123:                                              ; preds = %117
  %124 = sext i32 %121 to i64
  %125 = getelementptr inbounds %struct.AV1Common, %struct.AV1Common* %0, i64 0, i32 16, i64 %124
  %126 = load %struct.RefCntBuffer*, %struct.RefCntBuffer** %125, align 8
  %127 = load %struct.SequenceHeader*, %struct.SequenceHeader** %2, align 16
  %128 = getelementptr inbounds %struct.SequenceHeader, %struct.SequenceHeader* %127, i64 0, i32 10, i32 0
  %129 = load i32, i32* %128, align 8
  %130 = icmp ne i32 %129, 0
  %131 = icmp ne %struct.RefCntBuffer* %126, null
  %132 = and i1 %131, %130
  br i1 %132, label %133, label %146

133:                                              ; preds = %123
  %134 = getelementptr inbounds %struct.RefCntBuffer, %struct.RefCntBuffer* %126, i64 0, i32 1
  %135 = load i32, i32* %134, align 4
  %136 = load i32, i32* %3, align 4
  %137 = getelementptr inbounds %struct.SequenceHeader, %struct.SequenceHeader* %127, i64 0, i32 10, i32 1
  %138 = load i32, i32* %137, align 4
  %139 = sub nsw i32 %135, %136
  %140 = shl i32 1, %138
  %141 = add nsw i32 %140, -1
  %142 = and i32 %141, %139
  %143 = and i32 %140, %139
  %144 = icmp sgt i32 %142, %143
  %145 = zext i1 %144 to i32
  br label %146

146:                                              ; preds = %133, %123, %117
  %147 = phi i32 [ %145, %133 ], [ 0, %123 ], [ 0, %117 ]
  %148 = getelementptr inbounds %struct.AV1Common, %struct.AV1Common* %0, i64 0, i32 45, i64 5
  store i32 %147, i32* %148, align 4
  %149 = getelementptr inbounds %struct.AV1Common, %struct.AV1Common* %0, i64 0, i32 13, i64 5
  %150 = load i32, i32* %149, align 4
  %151 = icmp eq i32 %150, -1
  br i1 %151, label %175, label %152

152:                                              ; preds = %146
  %153 = sext i32 %150 to i64
  %154 = getelementptr inbounds %struct.AV1Common, %struct.AV1Common* %0, i64 0, i32 16, i64 %153
  %155 = load %struct.RefCntBuffer*, %struct.RefCntBuffer** %154, align 8
  %156 = load %struct.SequenceHeader*, %struct.SequenceHeader** %2, align 16
  %157 = getelementptr inbounds %struct.SequenceHeader, %struct.SequenceHeader* %156, i64 0, i32 10, i32 0
  %158 = load i32, i32* %157, align 8
  %159 = icmp ne i32 %158, 0
  %160 = icmp ne %struct.RefCntBuffer* %155, null
  %161 = and i1 %160, %159
  br i1 %161, label %162, label %175

162:                                              ; preds = %152
  %163 = getelementptr inbounds %struct.RefCntBuffer, %struct.RefCntBuffer* %155, i64 0, i32 1
  %164 = load i32, i32* %163, align 4
  %165 = load i32, i32* %3, align 4
  %166 = getelementptr inbounds %struct.SequenceHeader, %struct.SequenceHeader* %156, i64 0, i32 10, i32 1
  %167 = load i32, i32* %166, align 4
  %168 = sub nsw i32 %164, %165
  %169 = shl i32 1, %167
  %170 = add nsw i32 %169, -1
  %171 = and i32 %170, %168
  %172 = and i32 %169, %168
  %173 = icmp sgt i32 %171, %172
  %174 = zext i1 %173 to i32
  br label %175

175:                                              ; preds = %162, %152, %146
  %176 = phi i32 [ %174, %162 ], [ 0, %152 ], [ 0, %146 ]
  %177 = getelementptr inbounds %struct.AV1Common, %struct.AV1Common* %0, i64 0, i32 45, i64 6
  store i32 %176, i32* %177, align 4
  %178 = getelementptr inbounds %struct.AV1Common, %struct.AV1Common* %0, i64 0, i32 13, i64 6
  %179 = load i32, i32* %178, align 4
  %180 = icmp eq i32 %179, -1
  br i1 %180, label %204, label %181

181:                                              ; preds = %175
  %182 = sext i32 %179 to i64
  %183 = getelementptr inbounds %struct.AV1Common, %struct.AV1Common* %0, i64 0, i32 16, i64 %182
  %184 = load %struct.RefCntBuffer*, %struct.RefCntBuffer** %183, align 8
  %185 = load %struct.SequenceHeader*, %struct.SequenceHeader** %2, align 16
  %186 = getelementptr inbounds %struct.SequenceHeader, %struct.SequenceHeader* %185, i64 0, i32 10, i32 0
  %187 = load i32, i32* %186, align 8
  %188 = icmp ne i32 %187, 0
  %189 = icmp ne %struct.RefCntBuffer* %184, null
  %190 = and i1 %189, %188
  br i1 %190, label %191, label %204

191:                                              ; preds = %181
  %192 = getelementptr inbounds %struct.RefCntBuffer, %struct.RefCntBuffer* %184, i64 0, i32 1
  %193 = load i32, i32* %192, align 4
  %194 = load i32, i32* %3, align 4
  %195 = getelementptr inbounds %struct.SequenceHeader, %struct.SequenceHeader* %185, i64 0, i32 10, i32 1
  %196 = load i32, i32* %195, align 4
  %197 = sub nsw i32 %193, %194
  %198 = shl i32 1, %196
  %199 = add nsw i32 %198, -1
  %200 = and i32 %199, %197
  %201 = and i32 %198, %197
  %202 = icmp sgt i32 %200, %201
  %203 = zext i1 %202 to i32
  br label %204

204:                                              ; preds = %191, %181, %175
  %205 = phi i32 [ %203, %191 ], [ 0, %181 ], [ 0, %175 ]
  %206 = getelementptr inbounds %struct.AV1Common, %struct.AV1Common* %0, i64 0, i32 45, i64 7
  store i32 %205, i32* %206, align 4
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @av1_setup_motion_field(%struct.AV1Common* nocapture) local_unnamed_addr #2 {
  %2 = alloca [7 x %struct.RefCntBuffer*], align 16
  %3 = alloca [7 x i32], align 16
  %4 = getelementptr inbounds %struct.AV1Common, %struct.AV1Common* %0, i64 0, i32 35
  %5 = load %struct.SequenceHeader*, %struct.SequenceHeader** %4, align 16
  %6 = getelementptr inbounds %struct.AV1Common, %struct.AV1Common* %0, i64 0, i32 46
  %7 = bitcast [8 x i8]* %6 to i64*
  store i64 0, i64* %7, align 4
  %8 = getelementptr inbounds %struct.SequenceHeader, %struct.SequenceHeader* %5, i64 0, i32 10, i32 0
  %9 = load i32, i32* %8, align 4
  %10 = icmp eq i32 %9, 0
  br i1 %10, label %168, label %11

11:                                               ; preds = %1
  %12 = getelementptr inbounds %struct.AV1Common, %struct.AV1Common* %0, i64 0, i32 43
  %13 = load %struct.TPL_MV_REF*, %struct.TPL_MV_REF** %12, align 16
  %14 = getelementptr inbounds %struct.AV1Common, %struct.AV1Common* %0, i64 0, i32 21, i32 3
  %15 = load i32, i32* %14, align 4
  %16 = add nsw i32 %15, 32
  %17 = ashr i32 %16, 1
  %18 = getelementptr inbounds %struct.AV1Common, %struct.AV1Common* %0, i64 0, i32 21, i32 11
  %19 = load i32, i32* %18, align 4
  %20 = ashr i32 %19, 1
  %21 = mul i32 %17, %20
  %22 = icmp sgt i32 %21, 0
  br i1 %22, label %23, label %41

23:                                               ; preds = %11
  %24 = zext i32 %21 to i64
  %25 = add nsw i64 %24, -1
  %26 = and i64 %24, 3
  %27 = icmp ult i64 %25, 3
  br i1 %27, label %30, label %28

28:                                               ; preds = %23
  %29 = sub nsw i64 %24, %26
  br label %57

30:                                               ; preds = %57, %23
  %31 = phi i64 [ 0, %23 ], [ %71, %57 ]
  %32 = icmp eq i64 %26, 0
  br i1 %32, label %41, label %33

33:                                               ; preds = %30, %33
  %34 = phi i64 [ %38, %33 ], [ %31, %30 ]
  %35 = phi i64 [ %39, %33 ], [ %26, %30 ]
  %36 = getelementptr inbounds %struct.TPL_MV_REF, %struct.TPL_MV_REF* %13, i64 %34, i32 0, i32 0
  store i32 -2147450880, i32* %36, align 4
  %37 = getelementptr inbounds %struct.TPL_MV_REF, %struct.TPL_MV_REF* %13, i64 %34, i32 1
  store i8 0, i8* %37, align 4
  %38 = add nuw nsw i64 %34, 1
  %39 = add i64 %35, -1
  %40 = icmp eq i64 %39, 0
  br i1 %40, label %41, label %33, !llvm.loop !13

41:                                               ; preds = %30, %33, %11
  %42 = getelementptr inbounds %struct.AV1Common, %struct.AV1Common* %0, i64 0, i32 12
  %43 = load %struct.RefCntBuffer*, %struct.RefCntBuffer** %42, align 16
  %44 = getelementptr inbounds %struct.RefCntBuffer, %struct.RefCntBuffer* %43, i64 0, i32 1
  %45 = load i32, i32* %44, align 4
  %46 = bitcast [7 x %struct.RefCntBuffer*]* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 56, i8* nonnull %46) #9
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %46, i8 -86, i64 56, i1 false)
  %47 = bitcast [7 x i32]* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 28, i8* nonnull %47) #9
  %48 = getelementptr inbounds [7 x i32], [7 x i32]* %3, i64 0, i64 3
  %49 = getelementptr inbounds [7 x i32], [7 x i32]* %3, i64 0, i64 4
  %50 = getelementptr inbounds [7 x i32], [7 x i32]* %3, i64 0, i64 5
  %51 = getelementptr inbounds [7 x i32], [7 x i32]* %3, i64 0, i64 6
  %52 = getelementptr inbounds %struct.SequenceHeader, %struct.SequenceHeader* %5, i64 0, i32 10, i32 1
  %53 = bitcast [7 x i32]* %3 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %53, i8 -86, i64 28, i1 false)
  %54 = getelementptr inbounds %struct.AV1Common, %struct.AV1Common* %0, i64 0, i32 13, i64 0
  %55 = load i32, i32* %54, align 4
  %56 = icmp eq i32 %55, -1
  br i1 %56, label %82, label %74

57:                                               ; preds = %57, %28
  %58 = phi i64 [ 0, %28 ], [ %71, %57 ]
  %59 = phi i64 [ %29, %28 ], [ %72, %57 ]
  %60 = getelementptr inbounds %struct.TPL_MV_REF, %struct.TPL_MV_REF* %13, i64 %58, i32 0, i32 0
  store i32 -2147450880, i32* %60, align 4
  %61 = getelementptr inbounds %struct.TPL_MV_REF, %struct.TPL_MV_REF* %13, i64 %58, i32 1
  store i8 0, i8* %61, align 4
  %62 = or i64 %58, 1
  %63 = getelementptr inbounds %struct.TPL_MV_REF, %struct.TPL_MV_REF* %13, i64 %62, i32 0, i32 0
  store i32 -2147450880, i32* %63, align 4
  %64 = getelementptr inbounds %struct.TPL_MV_REF, %struct.TPL_MV_REF* %13, i64 %62, i32 1
  store i8 0, i8* %64, align 4
  %65 = or i64 %58, 2
  %66 = getelementptr inbounds %struct.TPL_MV_REF, %struct.TPL_MV_REF* %13, i64 %65, i32 0, i32 0
  store i32 -2147450880, i32* %66, align 4
  %67 = getelementptr inbounds %struct.TPL_MV_REF, %struct.TPL_MV_REF* %13, i64 %65, i32 1
  store i8 0, i8* %67, align 4
  %68 = or i64 %58, 3
  %69 = getelementptr inbounds %struct.TPL_MV_REF, %struct.TPL_MV_REF* %13, i64 %68, i32 0, i32 0
  store i32 -2147450880, i32* %69, align 4
  %70 = getelementptr inbounds %struct.TPL_MV_REF, %struct.TPL_MV_REF* %13, i64 %68, i32 1
  store i8 0, i8* %70, align 4
  %71 = add nuw nsw i64 %58, 4
  %72 = add i64 %59, -4
  %73 = icmp eq i64 %72, 0
  br i1 %73, label %30, label %57

74:                                               ; preds = %41
  %75 = sext i32 %55 to i64
  %76 = getelementptr inbounds %struct.AV1Common, %struct.AV1Common* %0, i64 0, i32 16, i64 %75
  %77 = load %struct.RefCntBuffer*, %struct.RefCntBuffer** %76, align 8
  %78 = icmp eq %struct.RefCntBuffer* %77, null
  br i1 %78, label %82, label %79

79:                                               ; preds = %74
  %80 = getelementptr inbounds %struct.RefCntBuffer, %struct.RefCntBuffer* %77, i64 0, i32 1
  %81 = load i32, i32* %80, align 4
  br label %82

82:                                               ; preds = %41, %74, %79
  %83 = phi %struct.RefCntBuffer* [ %77, %79 ], [ null, %74 ], [ null, %41 ]
  %84 = phi i32 [ %81, %79 ], [ 0, %74 ], [ 0, %41 ]
  %85 = getelementptr inbounds [7 x %struct.RefCntBuffer*], [7 x %struct.RefCntBuffer*]* %2, i64 0, i64 0
  store %struct.RefCntBuffer* %83, %struct.RefCntBuffer** %85, align 16
  %86 = getelementptr inbounds [7 x i32], [7 x i32]* %3, i64 0, i64 0
  store i32 %84, i32* %86, align 16
  %87 = load i32, i32* %8, align 4
  %88 = icmp eq i32 %87, 0
  br i1 %88, label %97, label %89

89:                                               ; preds = %82
  %90 = load i32, i32* %52, align 4
  %91 = sub nsw i32 %84, %45
  %92 = shl i32 1, %90
  %93 = add nsw i32 %92, -1
  %94 = and i32 %93, %91
  %95 = and i32 %92, %91
  %96 = icmp sgt i32 %94, %95
  br i1 %96, label %99, label %97

97:                                               ; preds = %82, %89
  %98 = icmp eq i32 %84, %45
  br i1 %98, label %99, label %169

99:                                               ; preds = %97, %89
  %100 = phi i8 [ 1, %89 ], [ -1, %97 ]
  %101 = getelementptr inbounds %struct.AV1Common, %struct.AV1Common* %0, i64 0, i32 46, i64 1
  store i8 %100, i8* %101, align 1
  br label %169

102:                                              ; preds = %361
  %103 = getelementptr inbounds %struct.RefCntBuffer, %struct.RefCntBuffer* %363, i64 0, i32 2, i64 6
  %104 = load i32, i32* %103, align 8
  %105 = load i32, i32* %48, align 4
  %106 = icmp eq i32 %104, %105
  br i1 %106, label %109, label %107

107:                                              ; preds = %102
  %108 = tail call fastcc i32 @motion_field_projection(%struct.AV1Common* %0, i8 signext 1, i32 2)
  br label %109

109:                                              ; preds = %102, %107, %361
  %110 = phi i32 [ 2, %361 ], [ 1, %107 ], [ 1, %102 ]
  %111 = load i32, i32* %8, align 4
  %112 = icmp eq i32 %111, 0
  br i1 %112, label %165, label %113

113:                                              ; preds = %109
  %114 = load i32, i32* %49, align 16
  %115 = load i32, i32* %52, align 4
  %116 = sub nsw i32 %114, %45
  %117 = shl i32 1, %115
  %118 = add nsw i32 %117, -1
  %119 = and i32 %118, %116
  %120 = and i32 %117, %116
  %121 = icmp sgt i32 %119, %120
  br i1 %121, label %122, label %129

122:                                              ; preds = %113
  %123 = tail call fastcc i32 @motion_field_projection(%struct.AV1Common* %0, i8 signext 5, i32 0)
  %124 = icmp ne i32 %123, 0
  %125 = zext i1 %124 to i32
  %126 = sub nuw nsw i32 %110, %125
  %127 = load i32, i32* %8, align 4
  %128 = icmp eq i32 %127, 0
  br i1 %128, label %165, label %129

129:                                              ; preds = %113, %122
  %130 = phi i32 [ %126, %122 ], [ %110, %113 ]
  %131 = load i32, i32* %50, align 4
  %132 = load i32, i32* %52, align 4
  %133 = sub nsw i32 %131, %45
  %134 = shl i32 1, %132
  %135 = add nsw i32 %134, -1
  %136 = and i32 %135, %133
  %137 = and i32 %134, %133
  %138 = icmp sgt i32 %136, %137
  br i1 %138, label %139, label %146

139:                                              ; preds = %129
  %140 = tail call fastcc i32 @motion_field_projection(%struct.AV1Common* %0, i8 signext 6, i32 0)
  %141 = icmp ne i32 %140, 0
  %142 = zext i1 %141 to i32
  %143 = sub nsw i32 %130, %142
  %144 = load i32, i32* %8, align 4
  %145 = icmp eq i32 %144, 0
  br i1 %145, label %162, label %146

146:                                              ; preds = %129, %139
  %147 = phi i32 [ %143, %139 ], [ %130, %129 ]
  %148 = load i32, i32* %51, align 8
  %149 = load i32, i32* %52, align 4
  %150 = sub nsw i32 %148, %45
  %151 = shl i32 1, %149
  %152 = add nsw i32 %151, -1
  %153 = and i32 %152, %150
  %154 = and i32 %151, %150
  %155 = icmp sgt i32 %153, %154
  %156 = icmp sgt i32 %147, -1
  %157 = and i1 %156, %155
  br i1 %157, label %158, label %162

158:                                              ; preds = %146
  %159 = tail call fastcc i32 @motion_field_projection(%struct.AV1Common* %0, i8 signext 7, i32 0)
  %160 = icmp eq i32 %159, 0
  %161 = add nsw i32 %147, -1
  br i1 %160, label %165, label %162

162:                                              ; preds = %139, %158, %146
  %163 = phi i32 [ %147, %146 ], [ %161, %158 ], [ %143, %139 ]
  %164 = icmp sgt i32 %163, -1
  br i1 %164, label %165, label %167

165:                                              ; preds = %109, %122, %158, %162
  %166 = tail call fastcc i32 @motion_field_projection(%struct.AV1Common* %0, i8 signext 2, i32 2)
  br label %167

167:                                              ; preds = %165, %162
  call void @llvm.lifetime.end.p0i8(i64 28, i8* nonnull %47) #9
  call void @llvm.lifetime.end.p0i8(i64 56, i8* nonnull %46) #9
  br label %168

168:                                              ; preds = %1, %167
  ret void

169:                                              ; preds = %97, %99
  %170 = getelementptr inbounds %struct.AV1Common, %struct.AV1Common* %0, i64 0, i32 13, i64 1
  %171 = load i32, i32* %170, align 4
  %172 = icmp eq i32 %171, -1
  br i1 %172, label %181, label %173

173:                                              ; preds = %169
  %174 = sext i32 %171 to i64
  %175 = getelementptr inbounds %struct.AV1Common, %struct.AV1Common* %0, i64 0, i32 16, i64 %174
  %176 = load %struct.RefCntBuffer*, %struct.RefCntBuffer** %175, align 8
  %177 = icmp eq %struct.RefCntBuffer* %176, null
  br i1 %177, label %181, label %178

178:                                              ; preds = %173
  %179 = getelementptr inbounds %struct.RefCntBuffer, %struct.RefCntBuffer* %176, i64 0, i32 1
  %180 = load i32, i32* %179, align 4
  br label %181

181:                                              ; preds = %178, %173, %169
  %182 = phi %struct.RefCntBuffer* [ %176, %178 ], [ null, %173 ], [ null, %169 ]
  %183 = phi i32 [ %180, %178 ], [ 0, %173 ], [ 0, %169 ]
  %184 = getelementptr inbounds [7 x %struct.RefCntBuffer*], [7 x %struct.RefCntBuffer*]* %2, i64 0, i64 1
  store %struct.RefCntBuffer* %182, %struct.RefCntBuffer** %184, align 8
  %185 = getelementptr inbounds [7 x i32], [7 x i32]* %3, i64 0, i64 1
  store i32 %183, i32* %185, align 4
  %186 = load i32, i32* %8, align 4
  %187 = icmp eq i32 %186, 0
  br i1 %187, label %196, label %188

188:                                              ; preds = %181
  %189 = load i32, i32* %52, align 4
  %190 = sub nsw i32 %183, %45
  %191 = shl i32 1, %189
  %192 = add nsw i32 %191, -1
  %193 = and i32 %192, %190
  %194 = and i32 %191, %190
  %195 = icmp sgt i32 %193, %194
  br i1 %195, label %198, label %196

196:                                              ; preds = %188, %181
  %197 = icmp eq i32 %183, %45
  br i1 %197, label %198, label %201

198:                                              ; preds = %196, %188
  %199 = phi i8 [ 1, %188 ], [ -1, %196 ]
  %200 = getelementptr inbounds %struct.AV1Common, %struct.AV1Common* %0, i64 0, i32 46, i64 2
  store i8 %199, i8* %200, align 1
  br label %201

201:                                              ; preds = %196, %198
  %202 = getelementptr inbounds %struct.AV1Common, %struct.AV1Common* %0, i64 0, i32 13, i64 2
  %203 = load i32, i32* %202, align 4
  %204 = icmp eq i32 %203, -1
  br i1 %204, label %213, label %205

205:                                              ; preds = %201
  %206 = sext i32 %203 to i64
  %207 = getelementptr inbounds %struct.AV1Common, %struct.AV1Common* %0, i64 0, i32 16, i64 %206
  %208 = load %struct.RefCntBuffer*, %struct.RefCntBuffer** %207, align 8
  %209 = icmp eq %struct.RefCntBuffer* %208, null
  br i1 %209, label %213, label %210

210:                                              ; preds = %205
  %211 = getelementptr inbounds %struct.RefCntBuffer, %struct.RefCntBuffer* %208, i64 0, i32 1
  %212 = load i32, i32* %211, align 4
  br label %213

213:                                              ; preds = %210, %205, %201
  %214 = phi %struct.RefCntBuffer* [ %208, %210 ], [ null, %205 ], [ null, %201 ]
  %215 = phi i32 [ %212, %210 ], [ 0, %205 ], [ 0, %201 ]
  %216 = getelementptr inbounds [7 x %struct.RefCntBuffer*], [7 x %struct.RefCntBuffer*]* %2, i64 0, i64 2
  store %struct.RefCntBuffer* %214, %struct.RefCntBuffer** %216, align 16
  %217 = getelementptr inbounds [7 x i32], [7 x i32]* %3, i64 0, i64 2
  store i32 %215, i32* %217, align 8
  %218 = load i32, i32* %8, align 4
  %219 = icmp eq i32 %218, 0
  br i1 %219, label %228, label %220

220:                                              ; preds = %213
  %221 = load i32, i32* %52, align 4
  %222 = sub nsw i32 %215, %45
  %223 = shl i32 1, %221
  %224 = add nsw i32 %223, -1
  %225 = and i32 %224, %222
  %226 = and i32 %223, %222
  %227 = icmp sgt i32 %225, %226
  br i1 %227, label %230, label %228

228:                                              ; preds = %220, %213
  %229 = icmp eq i32 %215, %45
  br i1 %229, label %230, label %233

230:                                              ; preds = %228, %220
  %231 = phi i8 [ 1, %220 ], [ -1, %228 ]
  %232 = getelementptr inbounds %struct.AV1Common, %struct.AV1Common* %0, i64 0, i32 46, i64 3
  store i8 %231, i8* %232, align 1
  br label %233

233:                                              ; preds = %228, %230
  %234 = getelementptr inbounds %struct.AV1Common, %struct.AV1Common* %0, i64 0, i32 13, i64 3
  %235 = load i32, i32* %234, align 4
  %236 = icmp eq i32 %235, -1
  br i1 %236, label %245, label %237

237:                                              ; preds = %233
  %238 = sext i32 %235 to i64
  %239 = getelementptr inbounds %struct.AV1Common, %struct.AV1Common* %0, i64 0, i32 16, i64 %238
  %240 = load %struct.RefCntBuffer*, %struct.RefCntBuffer** %239, align 8
  %241 = icmp eq %struct.RefCntBuffer* %240, null
  br i1 %241, label %245, label %242

242:                                              ; preds = %237
  %243 = getelementptr inbounds %struct.RefCntBuffer, %struct.RefCntBuffer* %240, i64 0, i32 1
  %244 = load i32, i32* %243, align 4
  br label %245

245:                                              ; preds = %242, %237, %233
  %246 = phi %struct.RefCntBuffer* [ %240, %242 ], [ null, %237 ], [ null, %233 ]
  %247 = phi i32 [ %244, %242 ], [ 0, %237 ], [ 0, %233 ]
  %248 = getelementptr inbounds [7 x %struct.RefCntBuffer*], [7 x %struct.RefCntBuffer*]* %2, i64 0, i64 3
  store %struct.RefCntBuffer* %246, %struct.RefCntBuffer** %248, align 8
  %249 = getelementptr inbounds [7 x i32], [7 x i32]* %3, i64 0, i64 3
  store i32 %247, i32* %249, align 4
  %250 = load i32, i32* %8, align 4
  %251 = icmp eq i32 %250, 0
  br i1 %251, label %260, label %252

252:                                              ; preds = %245
  %253 = load i32, i32* %52, align 4
  %254 = sub nsw i32 %247, %45
  %255 = shl i32 1, %253
  %256 = add nsw i32 %255, -1
  %257 = and i32 %256, %254
  %258 = and i32 %255, %254
  %259 = icmp sgt i32 %257, %258
  br i1 %259, label %262, label %260

260:                                              ; preds = %252, %245
  %261 = icmp eq i32 %247, %45
  br i1 %261, label %262, label %265

262:                                              ; preds = %260, %252
  %263 = phi i8 [ 1, %252 ], [ -1, %260 ]
  %264 = getelementptr inbounds %struct.AV1Common, %struct.AV1Common* %0, i64 0, i32 46, i64 4
  store i8 %263, i8* %264, align 1
  br label %265

265:                                              ; preds = %260, %262
  %266 = getelementptr inbounds %struct.AV1Common, %struct.AV1Common* %0, i64 0, i32 13, i64 4
  %267 = load i32, i32* %266, align 4
  %268 = icmp eq i32 %267, -1
  br i1 %268, label %277, label %269

269:                                              ; preds = %265
  %270 = sext i32 %267 to i64
  %271 = getelementptr inbounds %struct.AV1Common, %struct.AV1Common* %0, i64 0, i32 16, i64 %270
  %272 = load %struct.RefCntBuffer*, %struct.RefCntBuffer** %271, align 8
  %273 = icmp eq %struct.RefCntBuffer* %272, null
  br i1 %273, label %277, label %274

274:                                              ; preds = %269
  %275 = getelementptr inbounds %struct.RefCntBuffer, %struct.RefCntBuffer* %272, i64 0, i32 1
  %276 = load i32, i32* %275, align 4
  br label %277

277:                                              ; preds = %274, %269, %265
  %278 = phi %struct.RefCntBuffer* [ %272, %274 ], [ null, %269 ], [ null, %265 ]
  %279 = phi i32 [ %276, %274 ], [ 0, %269 ], [ 0, %265 ]
  %280 = getelementptr inbounds [7 x %struct.RefCntBuffer*], [7 x %struct.RefCntBuffer*]* %2, i64 0, i64 4
  store %struct.RefCntBuffer* %278, %struct.RefCntBuffer** %280, align 16
  %281 = getelementptr inbounds [7 x i32], [7 x i32]* %3, i64 0, i64 4
  store i32 %279, i32* %281, align 16
  %282 = load i32, i32* %8, align 4
  %283 = icmp eq i32 %282, 0
  br i1 %283, label %292, label %284

284:                                              ; preds = %277
  %285 = load i32, i32* %52, align 4
  %286 = sub nsw i32 %279, %45
  %287 = shl i32 1, %285
  %288 = add nsw i32 %287, -1
  %289 = and i32 %288, %286
  %290 = and i32 %287, %286
  %291 = icmp sgt i32 %289, %290
  br i1 %291, label %294, label %292

292:                                              ; preds = %284, %277
  %293 = icmp eq i32 %279, %45
  br i1 %293, label %294, label %297

294:                                              ; preds = %292, %284
  %295 = phi i8 [ 1, %284 ], [ -1, %292 ]
  %296 = getelementptr inbounds %struct.AV1Common, %struct.AV1Common* %0, i64 0, i32 46, i64 5
  store i8 %295, i8* %296, align 1
  br label %297

297:                                              ; preds = %292, %294
  %298 = getelementptr inbounds %struct.AV1Common, %struct.AV1Common* %0, i64 0, i32 13, i64 5
  %299 = load i32, i32* %298, align 4
  %300 = icmp eq i32 %299, -1
  br i1 %300, label %309, label %301

301:                                              ; preds = %297
  %302 = sext i32 %299 to i64
  %303 = getelementptr inbounds %struct.AV1Common, %struct.AV1Common* %0, i64 0, i32 16, i64 %302
  %304 = load %struct.RefCntBuffer*, %struct.RefCntBuffer** %303, align 8
  %305 = icmp eq %struct.RefCntBuffer* %304, null
  br i1 %305, label %309, label %306

306:                                              ; preds = %301
  %307 = getelementptr inbounds %struct.RefCntBuffer, %struct.RefCntBuffer* %304, i64 0, i32 1
  %308 = load i32, i32* %307, align 4
  br label %309

309:                                              ; preds = %306, %301, %297
  %310 = phi %struct.RefCntBuffer* [ %304, %306 ], [ null, %301 ], [ null, %297 ]
  %311 = phi i32 [ %308, %306 ], [ 0, %301 ], [ 0, %297 ]
  %312 = getelementptr inbounds [7 x %struct.RefCntBuffer*], [7 x %struct.RefCntBuffer*]* %2, i64 0, i64 5
  store %struct.RefCntBuffer* %310, %struct.RefCntBuffer** %312, align 8
  %313 = getelementptr inbounds [7 x i32], [7 x i32]* %3, i64 0, i64 5
  store i32 %311, i32* %313, align 4
  %314 = load i32, i32* %8, align 4
  %315 = icmp eq i32 %314, 0
  br i1 %315, label %324, label %316

316:                                              ; preds = %309
  %317 = load i32, i32* %52, align 4
  %318 = sub nsw i32 %311, %45
  %319 = shl i32 1, %317
  %320 = add nsw i32 %319, -1
  %321 = and i32 %320, %318
  %322 = and i32 %319, %318
  %323 = icmp sgt i32 %321, %322
  br i1 %323, label %326, label %324

324:                                              ; preds = %316, %309
  %325 = icmp eq i32 %311, %45
  br i1 %325, label %326, label %329

326:                                              ; preds = %324, %316
  %327 = phi i8 [ 1, %316 ], [ -1, %324 ]
  %328 = getelementptr inbounds %struct.AV1Common, %struct.AV1Common* %0, i64 0, i32 46, i64 6
  store i8 %327, i8* %328, align 1
  br label %329

329:                                              ; preds = %324, %326
  %330 = getelementptr inbounds %struct.AV1Common, %struct.AV1Common* %0, i64 0, i32 13, i64 6
  %331 = load i32, i32* %330, align 4
  %332 = icmp eq i32 %331, -1
  br i1 %332, label %341, label %333

333:                                              ; preds = %329
  %334 = sext i32 %331 to i64
  %335 = getelementptr inbounds %struct.AV1Common, %struct.AV1Common* %0, i64 0, i32 16, i64 %334
  %336 = load %struct.RefCntBuffer*, %struct.RefCntBuffer** %335, align 8
  %337 = icmp eq %struct.RefCntBuffer* %336, null
  br i1 %337, label %341, label %338

338:                                              ; preds = %333
  %339 = getelementptr inbounds %struct.RefCntBuffer, %struct.RefCntBuffer* %336, i64 0, i32 1
  %340 = load i32, i32* %339, align 4
  br label %341

341:                                              ; preds = %338, %333, %329
  %342 = phi %struct.RefCntBuffer* [ %336, %338 ], [ null, %333 ], [ null, %329 ]
  %343 = phi i32 [ %340, %338 ], [ 0, %333 ], [ 0, %329 ]
  %344 = getelementptr inbounds [7 x %struct.RefCntBuffer*], [7 x %struct.RefCntBuffer*]* %2, i64 0, i64 6
  store %struct.RefCntBuffer* %342, %struct.RefCntBuffer** %344, align 16
  %345 = getelementptr inbounds [7 x i32], [7 x i32]* %3, i64 0, i64 6
  store i32 %343, i32* %345, align 8
  %346 = load i32, i32* %8, align 4
  %347 = icmp eq i32 %346, 0
  br i1 %347, label %356, label %348

348:                                              ; preds = %341
  %349 = load i32, i32* %52, align 4
  %350 = sub nsw i32 %343, %45
  %351 = shl i32 1, %349
  %352 = add nsw i32 %351, -1
  %353 = and i32 %352, %350
  %354 = and i32 %351, %350
  %355 = icmp sgt i32 %353, %354
  br i1 %355, label %358, label %356

356:                                              ; preds = %348, %341
  %357 = icmp eq i32 %343, %45
  br i1 %357, label %358, label %361

358:                                              ; preds = %356, %348
  %359 = phi i8 [ 1, %348 ], [ -1, %356 ]
  %360 = getelementptr inbounds %struct.AV1Common, %struct.AV1Common* %0, i64 0, i32 46, i64 7
  store i8 %359, i8* %360, align 1
  br label %361

361:                                              ; preds = %358, %356
  %362 = getelementptr inbounds [7 x %struct.RefCntBuffer*], [7 x %struct.RefCntBuffer*]* %2, i64 0, i64 0
  %363 = load %struct.RefCntBuffer*, %struct.RefCntBuffer** %362, align 16
  %364 = icmp eq %struct.RefCntBuffer* %363, null
  br i1 %364, label %109, label %102
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

; Function Attrs: nounwind ssp uwtable
define internal fastcc i32 @motion_field_projection(%struct.AV1Common* nocapture readonly, i8 signext, i32) unnamed_addr #2 {
  %4 = alloca [8 x i32], align 16
  %5 = getelementptr inbounds %struct.AV1Common, %struct.AV1Common* %0, i64 0, i32 43
  %6 = load %struct.TPL_MV_REF*, %struct.TPL_MV_REF** %5, align 16
  %7 = bitcast [8 x i32]* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %7) #9
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %7, i8 0, i64 32, i1 false)
  %8 = add i8 %1, -1
  %9 = icmp ult i8 %8, 8
  br i1 %9, label %10, label %206

10:                                               ; preds = %3
  %11 = sext i8 %1 to i64
  %12 = add nsw i64 %11, -1
  %13 = getelementptr inbounds %struct.AV1Common, %struct.AV1Common* %0, i64 0, i32 13, i64 %12
  %14 = load i32, i32* %13, align 4
  %15 = icmp eq i32 %14, -1
  br i1 %15, label %206, label %16

16:                                               ; preds = %10
  %17 = sext i32 %14 to i64
  %18 = getelementptr inbounds %struct.AV1Common, %struct.AV1Common* %0, i64 0, i32 16, i64 %17
  %19 = load %struct.RefCntBuffer*, %struct.RefCntBuffer** %18, align 8
  %20 = icmp eq %struct.RefCntBuffer* %19, null
  br i1 %20, label %206, label %21

21:                                               ; preds = %16
  %22 = getelementptr inbounds %struct.RefCntBuffer, %struct.RefCntBuffer* %19, i64 0, i32 18
  %23 = load i8, i8* %22, align 8
  switch i8 %23, label %24 [
    i8 0, label %206
    i8 2, label %206
  ]

24:                                               ; preds = %21
  %25 = getelementptr inbounds %struct.RefCntBuffer, %struct.RefCntBuffer* %19, i64 0, i32 8
  %26 = load i32, i32* %25, align 4
  %27 = getelementptr inbounds %struct.AV1Common, %struct.AV1Common* %0, i64 0, i32 21, i32 3
  %28 = load i32, i32* %27, align 4
  %29 = icmp eq i32 %26, %28
  br i1 %29, label %30, label %206

30:                                               ; preds = %24
  %31 = getelementptr inbounds %struct.RefCntBuffer, %struct.RefCntBuffer* %19, i64 0, i32 9
  %32 = load i32, i32* %31, align 8
  %33 = getelementptr inbounds %struct.AV1Common, %struct.AV1Common* %0, i64 0, i32 21, i32 4
  %34 = load i32, i32* %33, align 16
  %35 = icmp eq i32 %32, %34
  br i1 %35, label %36, label %206

36:                                               ; preds = %30
  %37 = getelementptr inbounds %struct.RefCntBuffer, %struct.RefCntBuffer* %19, i64 0, i32 1
  %38 = load i32, i32* %37, align 4
  %39 = getelementptr inbounds %struct.AV1Common, %struct.AV1Common* %0, i64 0, i32 35
  %40 = load %struct.SequenceHeader*, %struct.SequenceHeader** %39, align 16
  %41 = getelementptr inbounds %struct.SequenceHeader, %struct.SequenceHeader* %40, i64 0, i32 10, i32 0
  %42 = load i32, i32* %41, align 4
  %43 = icmp eq i32 %42, 0
  br i1 %43, label %44, label %208

44:                                               ; preds = %36
  %45 = getelementptr inbounds [8 x i32], [8 x i32]* %4, i64 0, i64 1
  %46 = bitcast i32* %45 to <4 x i32>*
  store <4 x i32> zeroinitializer, <4 x i32>* %46, align 4
  %47 = getelementptr inbounds [8 x i32], [8 x i32]* %4, i64 0, i64 5
  store i32 0, i32* %47, align 4
  %48 = getelementptr inbounds [8 x i32], [8 x i32]* %4, i64 0, i64 6
  store i32 0, i32* %48, align 8
  br label %267

49:                                               ; preds = %267
  %50 = add nsw i32 %32, 1
  %51 = ashr i32 %50, 1
  %52 = add nuw nsw i32 %26, 1
  %53 = ashr i32 %52, 1
  %54 = icmp sgt i32 %32, 0
  %55 = icmp slt i32 %273, 0
  %56 = sub nsw i32 0, %273
  %57 = select i1 %55, i32 %56, i32 %273
  %58 = icmp sgt i32 %57, 31
  %59 = icmp sgt i32 %273, 0
  %60 = icmp slt i32 %273, 31
  %61 = select i1 %60, i32 %273, i32 31
  %62 = icmp sgt i32 %273, -31
  %63 = select i1 %62, i32 %273, i32 -31
  %64 = select i1 %59, i32 %61, i32 %63
  %65 = and i32 %2, -2
  %66 = icmp eq i32 %65, 2
  %67 = getelementptr inbounds %struct.AV1Common, %struct.AV1Common* %0, i64 0, i32 21, i32 11
  %68 = sext i32 %51 to i64
  %69 = sext i32 %53 to i64
  br label %70

70:                                               ; preds = %49, %77
  %71 = phi i64 [ 0, %49 ], [ %78, %77 ]
  br i1 %54, label %72, label %77

72:                                               ; preds = %70
  %73 = mul nsw i64 %71, %68
  %74 = trunc i64 %71 to i32
  %75 = and i32 %74, 2147483640
  %76 = add nuw nsw i32 %75, 8
  br label %80

77:                                               ; preds = %203, %70
  %78 = add nuw nsw i64 %71, 1
  %79 = icmp slt i64 %78, %69
  br i1 %79, label %70, label %206

80:                                               ; preds = %72, %203
  %81 = phi i64 [ 0, %72 ], [ %204, %203 ]
  %82 = add nsw i64 %81, %73
  %83 = getelementptr inbounds %struct.MV_REF, %struct.MV_REF* %275, i64 %82
  %84 = bitcast %struct.MV_REF* %83 to %struct.mv*
  %85 = bitcast %struct.MV_REF* %83 to i16*
  %86 = load i16, i16* %85, align 4
  %87 = getelementptr inbounds %struct.mv, %struct.mv* %84, i64 0, i32 1
  %88 = load i16, i16* %87, align 2
  %89 = getelementptr inbounds %struct.MV_REF, %struct.MV_REF* %275, i64 %82, i32 1
  %90 = load i8, i8* %89, align 4
  %91 = icmp sgt i8 %90, 0
  br i1 %91, label %92, label %203

92:                                               ; preds = %80
  %93 = sext i8 %90 to i64
  %94 = getelementptr inbounds [8 x i32], [8 x i32]* %4, i64 0, i64 %93
  %95 = load i32, i32* %94, align 4
  %96 = icmp slt i32 %95, 0
  %97 = sub nsw i32 0, %95
  %98 = select i1 %96, i32 %97, i32 %95
  %99 = icmp sgt i32 %98, 31
  %100 = icmp slt i32 %95, 1
  %101 = or i1 %99, %100
  %102 = or i1 %101, %58
  br i1 %102, label %203, label %103

103:                                              ; preds = %92
  %104 = icmp slt i32 %95, 31
  %105 = select i1 %104, i32 %95, i32 31
  %106 = sext i16 %86 to i32
  %107 = sext i32 %105 to i64
  %108 = getelementptr inbounds [32 x i32], [32 x i32]* @div_mult, i64 0, i64 %107
  %109 = load i32, i32* %108, align 4
  %110 = mul i32 %109, %64
  %111 = mul i32 %110, %106
  %112 = icmp slt i32 %111, 0
  br i1 %112, label %113, label %117

113:                                              ; preds = %103
  %114 = sub i32 8192, %111
  %115 = ashr i32 %114, 14
  %116 = sub nsw i32 0, %115
  br label %120

117:                                              ; preds = %103
  %118 = add nuw nsw i32 %111, 8192
  %119 = ashr i32 %118, 14
  br label %120

120:                                              ; preds = %117, %113
  %121 = phi i32 [ %116, %113 ], [ %119, %117 ]
  %122 = sext i16 %88 to i32
  %123 = mul i32 %110, %122
  %124 = icmp slt i32 %123, 0
  br i1 %124, label %125, label %129

125:                                              ; preds = %120
  %126 = sub i32 8192, %123
  %127 = ashr i32 %126, 14
  %128 = sub nsw i32 0, %127
  br label %132

129:                                              ; preds = %120
  %130 = add nuw nsw i32 %123, 8192
  %131 = ashr i32 %130, 14
  br label %132

132:                                              ; preds = %125, %129
  %133 = phi i32 [ %128, %125 ], [ %131, %129 ]
  %134 = icmp slt i32 %121, 16383
  %135 = select i1 %134, i32 %121, i32 16383
  %136 = icmp sgt i32 %135, -16383
  %137 = select i1 %136, i32 %135, i32 -16383
  %138 = icmp slt i32 %133, 16383
  %139 = select i1 %138, i32 %133, i32 16383
  %140 = icmp sgt i32 %139, -16383
  %141 = select i1 %140, i32 %139, i32 -16383
  %142 = trunc i64 %81 to i32
  %143 = and i32 %142, 2147483640
  %144 = icmp sgt i32 %137, -1
  br i1 %144, label %145, label %147

145:                                              ; preds = %132
  %146 = lshr i32 %137, 6
  br label %151

147:                                              ; preds = %132
  %148 = sub nsw i32 0, %137
  %149 = ashr i32 %148, 6
  %150 = sub nsw i32 0, %149
  br label %151

151:                                              ; preds = %147, %145
  %152 = phi i32 [ %146, %145 ], [ %150, %147 ]
  %153 = icmp sgt i32 %141, -1
  br i1 %153, label %154, label %157

154:                                              ; preds = %151
  %155 = lshr i32 %141, 6
  %156 = and i32 %155, 1023
  br label %161

157:                                              ; preds = %151
  %158 = sub nsw i32 0, %141
  %159 = ashr i32 %158, 6
  %160 = sub nsw i32 0, %159
  br label %161

161:                                              ; preds = %157, %154
  %162 = phi i32 [ %156, %154 ], [ %160, %157 ]
  %163 = sub nsw i32 0, %152
  %164 = select i1 %66, i32 %163, i32 %152
  %165 = add i32 %164, %74
  %166 = sub nsw i32 0, %162
  %167 = select i1 %66, i32 %166, i32 %162
  %168 = add i32 %167, %142
  %169 = icmp slt i32 %165, 0
  br i1 %169, label %203, label %170

170:                                              ; preds = %161
  %171 = load i32, i32* %27, align 4
  %172 = ashr i32 %171, 1
  %173 = icmp sge i32 %165, %172
  %174 = icmp slt i32 %168, 0
  %175 = or i1 %174, %173
  br i1 %175, label %203, label %176

176:                                              ; preds = %170
  %177 = load i32, i32* %33, align 16
  %178 = ashr i32 %177, 1
  %179 = icmp slt i32 %168, %178
  br i1 %179, label %180, label %203

180:                                              ; preds = %176
  %181 = icmp slt i32 %165, %75
  %182 = icmp sge i32 %165, %76
  %183 = or i1 %182, %181
  %184 = add nsw i32 %143, -8
  %185 = icmp slt i32 %168, %184
  %186 = or i1 %183, %185
  %187 = xor i1 %186, true
  %188 = add nuw nsw i32 %143, 16
  %189 = icmp slt i32 %168, %188
  %190 = and i1 %189, %187
  br i1 %190, label %191, label %203

191:                                              ; preds = %180
  %192 = load i32, i32* %67, align 4
  %193 = ashr i32 %192, 1
  %194 = mul nsw i32 %193, %165
  %195 = add nsw i32 %194, %168
  %196 = sext i32 %195 to i64
  %197 = getelementptr inbounds %struct.TPL_MV_REF, %struct.TPL_MV_REF* %6, i64 %196
  %198 = bitcast %struct.TPL_MV_REF* %197 to %struct.mv*
  %199 = bitcast %struct.TPL_MV_REF* %197 to i16*
  store i16 %86, i16* %199, align 4
  %200 = getelementptr inbounds %struct.mv, %struct.mv* %198, i64 0, i32 1
  store i16 %88, i16* %200, align 2
  %201 = trunc i32 %95 to i8
  %202 = getelementptr inbounds %struct.TPL_MV_REF, %struct.TPL_MV_REF* %6, i64 %196, i32 1
  store i8 %201, i8* %202, align 4
  br label %203

203:                                              ; preds = %92, %180, %161, %170, %176, %191, %80
  %204 = add nuw nsw i64 %81, 1
  %205 = icmp slt i64 %204, %68
  br i1 %205, label %80, label %77

206:                                              ; preds = %77, %267, %3, %10, %24, %30, %21, %21, %16
  %207 = phi i32 [ 0, %16 ], [ 0, %21 ], [ 0, %21 ], [ 0, %30 ], [ 0, %24 ], [ 0, %10 ], [ 0, %3 ], [ 1, %267 ], [ 1, %77 ]
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %7) #9
  ret i32 %207

208:                                              ; preds = %36
  %209 = getelementptr inbounds %struct.AV1Common, %struct.AV1Common* %0, i64 0, i32 12
  %210 = load %struct.RefCntBuffer*, %struct.RefCntBuffer** %209, align 16
  %211 = getelementptr inbounds %struct.RefCntBuffer, %struct.RefCntBuffer* %210, i64 0, i32 1
  %212 = load i32, i32* %211, align 4
  %213 = getelementptr inbounds %struct.SequenceHeader, %struct.SequenceHeader* %40, i64 0, i32 10, i32 1
  %214 = load i32, i32* %213, align 4
  %215 = sub nsw i32 %38, %212
  %216 = shl i32 1, %214
  %217 = add nsw i32 %216, -1
  %218 = and i32 %217, %215
  %219 = and i32 %216, %215
  %220 = sub nsw i32 %218, %219
  %221 = getelementptr inbounds %struct.SequenceHeader, %struct.SequenceHeader* %40, i64 0, i32 10, i32 1
  %222 = getelementptr inbounds %struct.RefCntBuffer, %struct.RefCntBuffer* %19, i64 0, i32 2, i64 0
  %223 = load i32, i32* %221, align 4
  %224 = getelementptr inbounds [8 x i32], [8 x i32]* %4, i64 0, i64 1
  %225 = bitcast i32* %222 to <4 x i32>*
  %226 = load <4 x i32>, <4 x i32>* %225, align 4
  %227 = insertelement <4 x i32> undef, i32 %38, i32 0
  %228 = shufflevector <4 x i32> %227, <4 x i32> undef, <4 x i32> zeroinitializer
  %229 = sub nsw <4 x i32> %228, %226
  %230 = insertelement <4 x i32> undef, i32 %223, i32 0
  %231 = shl <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>, %230
  %232 = shufflevector <4 x i32> %231, <4 x i32> undef, <4 x i32> zeroinitializer
  %233 = add nsw <4 x i32> %232, <i32 -1, i32 -1, i32 -1, i32 -1>
  %234 = and <4 x i32> %233, %229
  %235 = and <4 x i32> %232, %229
  %236 = sub nsw <4 x i32> %234, %235
  %237 = bitcast i32* %224 to <4 x i32>*
  store <4 x i32> %236, <4 x i32>* %237, align 4
  %238 = getelementptr inbounds %struct.RefCntBuffer, %struct.RefCntBuffer* %19, i64 0, i32 2, i64 4
  %239 = load i32, i32* %238, align 4
  %240 = load i32, i32* %221, align 4
  %241 = sub nsw i32 %38, %239
  %242 = shl i32 1, %240
  %243 = add nsw i32 %242, -1
  %244 = and i32 %243, %241
  %245 = and i32 %242, %241
  %246 = sub nsw i32 %244, %245
  %247 = getelementptr inbounds [8 x i32], [8 x i32]* %4, i64 0, i64 5
  store i32 %246, i32* %247, align 4
  %248 = getelementptr inbounds %struct.RefCntBuffer, %struct.RefCntBuffer* %19, i64 0, i32 2, i64 5
  %249 = load i32, i32* %248, align 4
  %250 = load i32, i32* %221, align 4
  %251 = sub nsw i32 %38, %249
  %252 = shl i32 1, %250
  %253 = add nsw i32 %252, -1
  %254 = and i32 %253, %251
  %255 = and i32 %252, %251
  %256 = sub nsw i32 %254, %255
  %257 = getelementptr inbounds [8 x i32], [8 x i32]* %4, i64 0, i64 6
  store i32 %256, i32* %257, align 8
  %258 = getelementptr inbounds %struct.RefCntBuffer, %struct.RefCntBuffer* %19, i64 0, i32 2, i64 6
  %259 = load i32, i32* %258, align 4
  %260 = load i32, i32* %221, align 4
  %261 = sub nsw i32 %38, %259
  %262 = shl i32 1, %260
  %263 = add nsw i32 %262, -1
  %264 = and i32 %263, %261
  %265 = and i32 %262, %261
  %266 = sub nsw i32 %264, %265
  br label %267

267:                                              ; preds = %44, %208
  %268 = phi i32 [ %220, %208 ], [ 0, %44 ]
  %269 = phi i32 [ %266, %208 ], [ 0, %44 ]
  %270 = getelementptr inbounds [8 x i32], [8 x i32]* %4, i64 0, i64 7
  store i32 %269, i32* %270, align 4
  %271 = icmp eq i32 %2, 2
  %272 = sub nsw i32 0, %268
  %273 = select i1 %271, i32 %272, i32 %268
  %274 = getelementptr inbounds %struct.RefCntBuffer, %struct.RefCntBuffer* %19, i64 0, i32 5
  %275 = load %struct.MV_REF*, %struct.MV_REF** %274, align 8
  %276 = icmp sgt i32 %26, 0
  br i1 %276, label %49, label %206
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden zeroext i8 @av1_selectSamples(%struct.mv* nocapture readonly, i32* nocapture, i32* nocapture, i32, i8 zeroext) local_unnamed_addr #0 {
  %6 = zext i8 %4 to i64
  %7 = getelementptr inbounds [22 x i8], [22 x i8]* @block_size_wide, i64 0, i64 %6
  %8 = load i8, i8* %7, align 1
  %9 = zext i8 %8 to i32
  %10 = getelementptr inbounds [22 x i8], [22 x i8]* @block_size_high, i64 0, i64 %6
  %11 = load i8, i8* %10, align 1
  %12 = zext i8 %11 to i32
  %13 = icmp ugt i32 %9, %12
  %14 = select i1 %13, i32 %9, i32 %12
  %15 = icmp slt i32 %14, 112
  %16 = select i1 %15, i32 %14, i32 112
  %17 = icmp sgt i32 %16, 16
  %18 = select i1 %17, i32 %16, i32 16
  %19 = icmp sgt i32 %3, 0
  br i1 %19, label %20, label %27

20:                                               ; preds = %5
  %21 = getelementptr inbounds %struct.mv, %struct.mv* %0, i64 0, i32 1
  %22 = getelementptr inbounds %struct.mv, %struct.mv* %0, i64 0, i32 0
  %23 = zext i32 %3 to i64
  br label %28

24:                                               ; preds = %73
  %25 = icmp ugt i8 %74, 1
  %26 = select i1 %25, i8 %74, i8 1
  ret i8 %26

27:                                               ; preds = %5
  ret i8 1

28:                                               ; preds = %73, %20
  %29 = phi i64 [ 0, %20 ], [ %75, %73 ]
  %30 = phi i8 [ 0, %20 ], [ %74, %73 ]
  %31 = shl nuw nsw i64 %29, 1
  %32 = getelementptr inbounds i32, i32* %2, i64 %31
  %33 = load i32, i32* %32, align 4
  %34 = getelementptr inbounds i32, i32* %1, i64 %31
  %35 = load i32, i32* %34, align 4
  %36 = sub nsw i32 %33, %35
  %37 = load i16, i16* %21, align 2
  %38 = sext i16 %37 to i32
  %39 = sub i32 %36, %38
  %40 = icmp slt i32 %39, 0
  %41 = sub nsw i32 0, %39
  %42 = select i1 %40, i32 %41, i32 %39
  %43 = or i64 %31, 1
  %44 = getelementptr inbounds i32, i32* %2, i64 %43
  %45 = load i32, i32* %44, align 4
  %46 = getelementptr inbounds i32, i32* %1, i64 %43
  %47 = load i32, i32* %46, align 4
  %48 = sub nsw i32 %45, %47
  %49 = load i16, i16* %22, align 2
  %50 = sext i16 %49 to i32
  %51 = sub i32 %48, %50
  %52 = icmp slt i32 %51, 0
  %53 = sub nsw i32 0, %51
  %54 = select i1 %52, i32 %53, i32 %51
  %55 = add nuw nsw i32 %54, %42
  %56 = icmp sgt i32 %55, %18
  br i1 %56, label %73, label %57

57:                                               ; preds = %28
  %58 = zext i8 %30 to i64
  %59 = icmp eq i64 %29, %58
  br i1 %59, label %71, label %60

60:                                               ; preds = %57
  %61 = zext i8 %30 to i64
  %62 = shl nuw nsw i64 %61, 1
  %63 = getelementptr inbounds i32, i32* %1, i64 %62
  %64 = bitcast i32* %34 to i64*
  %65 = bitcast i32* %63 to i64*
  %66 = load i64, i64* %64, align 4
  store i64 %66, i64* %65, align 4
  %67 = getelementptr inbounds i32, i32* %2, i64 %62
  %68 = bitcast i32* %32 to i64*
  %69 = bitcast i32* %67 to i64*
  %70 = load i64, i64* %68, align 4
  store i64 %70, i64* %69, align 4
  br label %71

71:                                               ; preds = %57, %60
  %72 = add i8 %30, 1
  br label %73

73:                                               ; preds = %28, %71
  %74 = phi i8 [ %72, %71 ], [ %30, %28 ]
  %75 = add nuw nsw i64 %29, 1
  %76 = icmp eq i64 %75, %23
  br i1 %76, label %24, label %28
}

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i8 @av1_findSamples(%struct.AV1Common* nocapture readonly, %struct.macroblockd* nocapture readonly, i32* nocapture, i32* nocapture) local_unnamed_addr #2 {
  %5 = getelementptr inbounds %struct.macroblockd, %struct.macroblockd* %1, i64 0, i32 6
  %6 = load %struct.MB_MODE_INFO**, %struct.MB_MODE_INFO*** %5, align 8
  %7 = load %struct.MB_MODE_INFO*, %struct.MB_MODE_INFO** %6, align 8
  %8 = getelementptr inbounds %struct.MB_MODE_INFO, %struct.MB_MODE_INFO* %7, i64 0, i32 6, i64 0
  %9 = load i8, i8* %8, align 8
  %10 = getelementptr inbounds %struct.macroblockd, %struct.macroblockd* %1, i64 0, i32 7
  %11 = load i8, i8* %10, align 16, !range !2
  %12 = icmp ne i8 %11, 0
  %13 = getelementptr inbounds %struct.macroblockd, %struct.macroblockd* %1, i64 0, i32 8
  %14 = load i8, i8* %13, align 1, !range !2
  %15 = icmp eq i8 %14, 0
  %16 = getelementptr inbounds %struct.macroblockd, %struct.macroblockd* %1, i64 0, i32 2
  %17 = load i32, i32* %16, align 8
  %18 = getelementptr inbounds %struct.macroblockd, %struct.macroblockd* %1, i64 0, i32 0
  %19 = load i32, i32* %18, align 16
  %20 = getelementptr inbounds %struct.macroblockd, %struct.macroblockd* %1, i64 0, i32 1
  %21 = load i32, i32* %20, align 4
  br i1 %12, label %22, label %163

22:                                               ; preds = %4
  %23 = sub nsw i32 0, %17
  %24 = sext i32 %23 to i64
  %25 = getelementptr inbounds %struct.MB_MODE_INFO*, %struct.MB_MODE_INFO** %6, i64 %24
  %26 = load %struct.MB_MODE_INFO*, %struct.MB_MODE_INFO** %25, align 8
  %27 = getelementptr inbounds %struct.MB_MODE_INFO, %struct.MB_MODE_INFO* %26, i64 0, i32 0
  %28 = load i8, i8* %27, align 8
  %29 = zext i8 %28 to i64
  %30 = getelementptr inbounds [22 x i8], [22 x i8]* @mi_size_wide, i64 0, i64 %29
  %31 = load i8, i8* %30, align 1
  %32 = getelementptr inbounds %struct.macroblockd, %struct.macroblockd* %1, i64 0, i32 32
  %33 = load i8, i8* %32, align 4
  %34 = zext i8 %31 to i32
  %35 = icmp ugt i8 %33, %31
  br i1 %35, label %36, label %44

36:                                               ; preds = %22
  %37 = zext i8 %33 to i32
  %38 = getelementptr inbounds %struct.AV1Common, %struct.AV1Common* %0, i64 0, i32 21, i32 4
  %39 = load i32, i32* %38, align 16
  %40 = sub nsw i32 %39, %21
  %41 = icmp sgt i32 %40, %37
  %42 = select i1 %41, i32 %37, i32 %40
  %43 = icmp sgt i32 %42, 0
  br i1 %43, label %89, label %163

44:                                               ; preds = %22
  %45 = srem i32 %21, %34
  %46 = icmp slt i32 %45, 1
  %47 = zext i1 %46 to i32
  %48 = sub nsw i32 %34, %45
  %49 = zext i8 %33 to i32
  %50 = icmp sle i32 %48, %49
  %51 = zext i1 %50 to i32
  %52 = getelementptr inbounds %struct.MB_MODE_INFO, %struct.MB_MODE_INFO* %26, i64 0, i32 6, i64 0
  %53 = load i8, i8* %52, align 8
  %54 = icmp eq i8 %53, %9
  br i1 %54, label %55, label %163

55:                                               ; preds = %44
  %56 = getelementptr inbounds %struct.MB_MODE_INFO, %struct.MB_MODE_INFO* %26, i64 0, i32 6, i64 1
  %57 = load i8, i8* %56, align 1
  %58 = icmp eq i8 %57, -1
  br i1 %58, label %59, label %163

59:                                               ; preds = %55
  %60 = getelementptr inbounds [22 x i8], [22 x i8]* @block_size_wide, i64 0, i64 %29
  %61 = load i8, i8* %60, align 1
  %62 = getelementptr inbounds [22 x i8], [22 x i8]* @block_size_high, i64 0, i64 %29
  %63 = load i8, i8* %62, align 1
  %64 = zext i8 %63 to i32
  %65 = shl i32 %45, 2
  %66 = lshr i8 %61, 1
  %67 = zext i8 %66 to i32
  %68 = sub i32 %67, %65
  %69 = sdiv i32 %64, -2
  %70 = shl i32 %68, 3
  %71 = add i32 %70, -8
  store i32 %71, i32* %2, align 4
  %72 = shl i32 %69, 3
  %73 = add i32 %72, -8
  %74 = getelementptr inbounds i32, i32* %2, i64 1
  store i32 %73, i32* %74, align 4
  %75 = getelementptr inbounds %struct.MB_MODE_INFO, %struct.MB_MODE_INFO* %26, i64 0, i32 5, i64 0
  %76 = bitcast %union.int_mv* %75 to %struct.mv*
  %77 = getelementptr inbounds %struct.mv, %struct.mv* %76, i64 0, i32 1
  %78 = load i16, i16* %77, align 2
  %79 = sext i16 %78 to i32
  %80 = add nsw i32 %71, %79
  store i32 %80, i32* %3, align 4
  %81 = load i32, i32* %74, align 4
  %82 = bitcast %union.int_mv* %75 to i16*
  %83 = load i16, i16* %82, align 8
  %84 = sext i16 %83 to i32
  %85 = add nsw i32 %81, %84
  %86 = getelementptr inbounds i32, i32* %3, i64 1
  store i32 %85, i32* %86, align 4
  %87 = getelementptr inbounds i32, i32* %2, i64 2
  %88 = getelementptr inbounds i32, i32* %3, i64 2
  br label %163

89:                                               ; preds = %36, %161
  %90 = phi i32 [ %149, %161 ], [ %39, %36 ]
  %91 = phi i8 [ %150, %161 ], [ %33, %36 ]
  %92 = phi %struct.MB_MODE_INFO** [ %162, %161 ], [ %6, %36 ]
  %93 = phi i32* [ %153, %161 ], [ %2, %36 ]
  %94 = phi i32* [ %152, %161 ], [ %3, %36 ]
  %95 = phi i32 [ %155, %161 ], [ 0, %36 ]
  %96 = phi i8 [ %151, %161 ], [ 0, %36 ]
  %97 = sub i32 %95, %17
  %98 = sext i32 %97 to i64
  %99 = getelementptr inbounds %struct.MB_MODE_INFO*, %struct.MB_MODE_INFO** %92, i64 %98
  %100 = load %struct.MB_MODE_INFO*, %struct.MB_MODE_INFO** %99, align 8
  %101 = getelementptr inbounds %struct.MB_MODE_INFO, %struct.MB_MODE_INFO* %100, i64 0, i32 0
  %102 = load i8, i8* %101, align 8
  %103 = zext i8 %102 to i64
  %104 = getelementptr inbounds [22 x i8], [22 x i8]* @mi_size_wide, i64 0, i64 %103
  %105 = load i8, i8* %104, align 1
  %106 = getelementptr inbounds %struct.MB_MODE_INFO, %struct.MB_MODE_INFO* %100, i64 0, i32 6, i64 0
  %107 = load i8, i8* %106, align 8
  %108 = icmp eq i8 %107, %9
  br i1 %108, label %109, label %148

109:                                              ; preds = %89
  %110 = getelementptr inbounds %struct.MB_MODE_INFO, %struct.MB_MODE_INFO* %100, i64 0, i32 6, i64 1
  %111 = load i8, i8* %110, align 1
  %112 = icmp eq i8 %111, -1
  br i1 %112, label %113, label %148

113:                                              ; preds = %109
  %114 = getelementptr inbounds [22 x i8], [22 x i8]* @block_size_wide, i64 0, i64 %103
  %115 = load i8, i8* %114, align 1
  %116 = getelementptr inbounds [22 x i8], [22 x i8]* @block_size_high, i64 0, i64 %103
  %117 = load i8, i8* %116, align 1
  %118 = zext i8 %117 to i32
  %119 = shl i32 %95, 2
  %120 = lshr i8 %115, 1
  %121 = zext i8 %120 to i32
  %122 = add nsw i32 %119, %121
  %123 = sdiv i32 %118, -2
  %124 = shl i32 %122, 3
  %125 = add i32 %124, -8
  store i32 %125, i32* %93, align 4
  %126 = shl i32 %123, 3
  %127 = add i32 %126, -8
  %128 = getelementptr inbounds i32, i32* %93, i64 1
  store i32 %127, i32* %128, align 4
  %129 = getelementptr inbounds %struct.MB_MODE_INFO, %struct.MB_MODE_INFO* %100, i64 0, i32 5, i64 0
  %130 = bitcast %union.int_mv* %129 to %struct.mv*
  %131 = getelementptr inbounds %struct.mv, %struct.mv* %130, i64 0, i32 1
  %132 = load i16, i16* %131, align 2
  %133 = sext i16 %132 to i32
  %134 = add nsw i32 %125, %133
  store i32 %134, i32* %94, align 4
  %135 = load i32, i32* %128, align 4
  %136 = bitcast %union.int_mv* %129 to i16*
  %137 = load i16, i16* %136, align 8
  %138 = sext i16 %137 to i32
  %139 = add nsw i32 %135, %138
  %140 = getelementptr inbounds i32, i32* %94, i64 1
  store i32 %139, i32* %140, align 4
  %141 = add i8 %96, 1
  %142 = icmp ugt i8 %141, 7
  br i1 %142, label %504, label %143

143:                                              ; preds = %113
  %144 = getelementptr inbounds i32, i32* %94, i64 2
  %145 = getelementptr inbounds i32, i32* %93, i64 2
  %146 = load i8, i8* %32, align 4
  %147 = load i32, i32* %38, align 16
  br label %148

148:                                              ; preds = %143, %89, %109
  %149 = phi i32 [ %147, %143 ], [ %90, %109 ], [ %90, %89 ]
  %150 = phi i8 [ %146, %143 ], [ %91, %109 ], [ %91, %89 ]
  %151 = phi i8 [ %141, %143 ], [ %96, %109 ], [ %96, %89 ]
  %152 = phi i32* [ %144, %143 ], [ %94, %109 ], [ %94, %89 ]
  %153 = phi i32* [ %145, %143 ], [ %93, %109 ], [ %93, %89 ]
  %154 = zext i8 %105 to i32
  %155 = add nuw nsw i32 %95, %154
  %156 = zext i8 %150 to i32
  %157 = sub nsw i32 %149, %21
  %158 = icmp sgt i32 %157, %156
  %159 = select i1 %158, i32 %156, i32 %157
  %160 = icmp slt i32 %155, %159
  br i1 %160, label %161, label %163

161:                                              ; preds = %148
  %162 = load %struct.MB_MODE_INFO**, %struct.MB_MODE_INFO*** %5, align 8
  br label %89

163:                                              ; preds = %148, %36, %44, %55, %59, %4
  %164 = phi i32 [ 1, %4 ], [ %47, %59 ], [ %47, %55 ], [ %47, %44 ], [ 1, %36 ], [ 1, %148 ]
  %165 = phi i32 [ 1, %4 ], [ %51, %59 ], [ %51, %55 ], [ %51, %44 ], [ 1, %36 ], [ 1, %148 ]
  %166 = phi i8 [ 0, %4 ], [ 1, %59 ], [ 0, %55 ], [ 0, %44 ], [ 0, %36 ], [ %151, %148 ]
  %167 = phi i32* [ %3, %4 ], [ %88, %59 ], [ %3, %55 ], [ %3, %44 ], [ %3, %36 ], [ %152, %148 ]
  %168 = phi i32* [ %2, %4 ], [ %87, %59 ], [ %2, %55 ], [ %2, %44 ], [ %2, %36 ], [ %153, %148 ]
  br i1 %15, label %361, label %169

169:                                              ; preds = %163
  %170 = load %struct.MB_MODE_INFO**, %struct.MB_MODE_INFO*** %5, align 8
  %171 = getelementptr inbounds %struct.MB_MODE_INFO*, %struct.MB_MODE_INFO** %170, i64 -1
  %172 = load %struct.MB_MODE_INFO*, %struct.MB_MODE_INFO** %171, align 8
  %173 = getelementptr inbounds %struct.MB_MODE_INFO, %struct.MB_MODE_INFO* %172, i64 0, i32 0
  %174 = load i8, i8* %173, align 8
  %175 = zext i8 %174 to i64
  %176 = getelementptr inbounds [22 x i8], [22 x i8]* @mi_size_high, i64 0, i64 %175
  %177 = load i8, i8* %176, align 1
  %178 = getelementptr inbounds %struct.macroblockd, %struct.macroblockd* %1, i64 0, i32 33
  %179 = load i8, i8* %178, align 1
  %180 = icmp ugt i8 %179, %177
  br i1 %180, label %181, label %189

181:                                              ; preds = %169
  %182 = zext i8 %179 to i32
  %183 = getelementptr inbounds %struct.AV1Common, %struct.AV1Common* %0, i64 0, i32 21, i32 3
  %184 = load i32, i32* %183, align 4
  %185 = sub nsw i32 %184, %19
  %186 = icmp sgt i32 %185, %182
  %187 = select i1 %186, i32 %182, i32 %185
  %188 = icmp sgt i32 %187, 0
  br i1 %188, label %233, label %308

189:                                              ; preds = %169
  %190 = zext i8 %177 to i32
  %191 = srem i32 %19, %190
  %192 = icmp sgt i32 %191, 0
  %193 = select i1 %192, i32 0, i32 %164
  %194 = getelementptr inbounds %struct.MB_MODE_INFO, %struct.MB_MODE_INFO* %172, i64 0, i32 6, i64 0
  %195 = load i8, i8* %194, align 8
  %196 = icmp eq i8 %195, %9
  br i1 %196, label %197, label %308

197:                                              ; preds = %189
  %198 = getelementptr inbounds %struct.MB_MODE_INFO, %struct.MB_MODE_INFO* %172, i64 0, i32 6, i64 1
  %199 = load i8, i8* %198, align 1
  %200 = icmp eq i8 %199, -1
  br i1 %200, label %201, label %308

201:                                              ; preds = %197
  %202 = getelementptr inbounds [22 x i8], [22 x i8]* @block_size_wide, i64 0, i64 %175
  %203 = load i8, i8* %202, align 1
  %204 = zext i8 %203 to i32
  %205 = getelementptr inbounds [22 x i8], [22 x i8]* @block_size_high, i64 0, i64 %175
  %206 = load i8, i8* %205, align 1
  %207 = sdiv i32 %204, -2
  %208 = shl i32 %191, 2
  %209 = lshr i8 %206, 1
  %210 = zext i8 %209 to i32
  %211 = sub i32 %210, %208
  %212 = shl i32 %207, 3
  %213 = add i32 %212, -8
  store i32 %213, i32* %168, align 4
  %214 = shl i32 %211, 3
  %215 = add i32 %214, -8
  %216 = getelementptr inbounds i32, i32* %168, i64 1
  store i32 %215, i32* %216, align 4
  %217 = getelementptr inbounds %struct.MB_MODE_INFO, %struct.MB_MODE_INFO* %172, i64 0, i32 5, i64 0
  %218 = bitcast %union.int_mv* %217 to %struct.mv*
  %219 = getelementptr inbounds %struct.mv, %struct.mv* %218, i64 0, i32 1
  %220 = load i16, i16* %219, align 2
  %221 = sext i16 %220 to i32
  %222 = add nsw i32 %213, %221
  store i32 %222, i32* %167, align 4
  %223 = load i32, i32* %216, align 4
  %224 = bitcast %union.int_mv* %217 to i16*
  %225 = load i16, i16* %224, align 8
  %226 = sext i16 %225 to i32
  %227 = add nsw i32 %223, %226
  %228 = getelementptr inbounds i32, i32* %167, i64 1
  store i32 %227, i32* %228, align 4
  %229 = getelementptr inbounds i32, i32* %168, i64 2
  %230 = getelementptr inbounds i32, i32* %167, i64 2
  %231 = add i8 %166, 1
  %232 = icmp ugt i8 %231, 7
  br i1 %232, label %504, label %308

233:                                              ; preds = %181, %306
  %234 = phi i32 [ %294, %306 ], [ %184, %181 ]
  %235 = phi i8 [ %295, %306 ], [ %179, %181 ]
  %236 = phi %struct.MB_MODE_INFO** [ %307, %306 ], [ %170, %181 ]
  %237 = phi i32* [ %298, %306 ], [ %168, %181 ]
  %238 = phi i32* [ %297, %306 ], [ %167, %181 ]
  %239 = phi i32 [ %300, %306 ], [ 0, %181 ]
  %240 = phi i8 [ %296, %306 ], [ %166, %181 ]
  %241 = mul nsw i32 %239, %17
  %242 = add nsw i32 %241, -1
  %243 = sext i32 %242 to i64
  %244 = getelementptr inbounds %struct.MB_MODE_INFO*, %struct.MB_MODE_INFO** %236, i64 %243
  %245 = load %struct.MB_MODE_INFO*, %struct.MB_MODE_INFO** %244, align 8
  %246 = getelementptr inbounds %struct.MB_MODE_INFO, %struct.MB_MODE_INFO* %245, i64 0, i32 0
  %247 = load i8, i8* %246, align 8
  %248 = zext i8 %247 to i64
  %249 = getelementptr inbounds [22 x i8], [22 x i8]* @mi_size_high, i64 0, i64 %248
  %250 = load i8, i8* %249, align 1
  %251 = getelementptr inbounds %struct.MB_MODE_INFO, %struct.MB_MODE_INFO* %245, i64 0, i32 6, i64 0
  %252 = load i8, i8* %251, align 8
  %253 = icmp eq i8 %252, %9
  br i1 %253, label %254, label %293

254:                                              ; preds = %233
  %255 = getelementptr inbounds %struct.MB_MODE_INFO, %struct.MB_MODE_INFO* %245, i64 0, i32 6, i64 1
  %256 = load i8, i8* %255, align 1
  %257 = icmp eq i8 %256, -1
  br i1 %257, label %258, label %293

258:                                              ; preds = %254
  %259 = getelementptr inbounds [22 x i8], [22 x i8]* @block_size_wide, i64 0, i64 %248
  %260 = load i8, i8* %259, align 1
  %261 = zext i8 %260 to i32
  %262 = getelementptr inbounds [22 x i8], [22 x i8]* @block_size_high, i64 0, i64 %248
  %263 = load i8, i8* %262, align 1
  %264 = sdiv i32 %261, -2
  %265 = shl i32 %239, 2
  %266 = lshr i8 %263, 1
  %267 = zext i8 %266 to i32
  %268 = add nsw i32 %265, %267
  %269 = shl i32 %264, 3
  %270 = add i32 %269, -8
  store i32 %270, i32* %237, align 4
  %271 = shl i32 %268, 3
  %272 = add i32 %271, -8
  %273 = getelementptr inbounds i32, i32* %237, i64 1
  store i32 %272, i32* %273, align 4
  %274 = getelementptr inbounds %struct.MB_MODE_INFO, %struct.MB_MODE_INFO* %245, i64 0, i32 5, i64 0
  %275 = bitcast %union.int_mv* %274 to %struct.mv*
  %276 = getelementptr inbounds %struct.mv, %struct.mv* %275, i64 0, i32 1
  %277 = load i16, i16* %276, align 2
  %278 = sext i16 %277 to i32
  %279 = add nsw i32 %270, %278
  store i32 %279, i32* %238, align 4
  %280 = load i32, i32* %273, align 4
  %281 = bitcast %union.int_mv* %274 to i16*
  %282 = load i16, i16* %281, align 8
  %283 = sext i16 %282 to i32
  %284 = add nsw i32 %280, %283
  %285 = getelementptr inbounds i32, i32* %238, i64 1
  store i32 %284, i32* %285, align 4
  %286 = add i8 %240, 1
  %287 = icmp ugt i8 %286, 7
  br i1 %287, label %504, label %288

288:                                              ; preds = %258
  %289 = getelementptr inbounds i32, i32* %238, i64 2
  %290 = getelementptr inbounds i32, i32* %237, i64 2
  %291 = load i8, i8* %178, align 1
  %292 = load i32, i32* %183, align 4
  br label %293

293:                                              ; preds = %288, %233, %254
  %294 = phi i32 [ %292, %288 ], [ %234, %254 ], [ %234, %233 ]
  %295 = phi i8 [ %291, %288 ], [ %235, %254 ], [ %235, %233 ]
  %296 = phi i8 [ %286, %288 ], [ %240, %254 ], [ %240, %233 ]
  %297 = phi i32* [ %289, %288 ], [ %238, %254 ], [ %238, %233 ]
  %298 = phi i32* [ %290, %288 ], [ %237, %254 ], [ %237, %233 ]
  %299 = zext i8 %250 to i32
  %300 = add nuw nsw i32 %239, %299
  %301 = zext i8 %295 to i32
  %302 = sub nsw i32 %294, %19
  %303 = icmp sgt i32 %302, %301
  %304 = select i1 %303, i32 %301, i32 %302
  %305 = icmp slt i32 %300, %304
  br i1 %305, label %306, label %308

306:                                              ; preds = %293
  %307 = load %struct.MB_MODE_INFO**, %struct.MB_MODE_INFO*** %5, align 8
  br label %233

308:                                              ; preds = %293, %181, %201, %197, %189
  %309 = phi i32 [ %193, %189 ], [ %193, %197 ], [ %193, %201 ], [ %164, %181 ], [ %164, %293 ]
  %310 = phi i8 [ %166, %189 ], [ %166, %197 ], [ %231, %201 ], [ %166, %181 ], [ %296, %293 ]
  %311 = phi i32* [ %167, %189 ], [ %167, %197 ], [ %230, %201 ], [ %167, %181 ], [ %297, %293 ]
  %312 = phi i32* [ %168, %189 ], [ %168, %197 ], [ %229, %201 ], [ %168, %181 ], [ %298, %293 ]
  %313 = icmp ne i32 %309, 0
  %314 = and i1 %12, %313
  br i1 %314, label %315, label %361

315:                                              ; preds = %308
  %316 = load %struct.MB_MODE_INFO**, %struct.MB_MODE_INFO*** %5, align 8
  %317 = xor i32 %17, -1
  %318 = sext i32 %317 to i64
  %319 = getelementptr inbounds %struct.MB_MODE_INFO*, %struct.MB_MODE_INFO** %316, i64 %318
  %320 = load %struct.MB_MODE_INFO*, %struct.MB_MODE_INFO** %319, align 8
  %321 = getelementptr inbounds %struct.MB_MODE_INFO, %struct.MB_MODE_INFO* %320, i64 0, i32 6, i64 0
  %322 = load i8, i8* %321, align 8
  %323 = icmp eq i8 %322, %9
  br i1 %323, label %324, label %361

324:                                              ; preds = %315
  %325 = getelementptr inbounds %struct.MB_MODE_INFO, %struct.MB_MODE_INFO* %320, i64 0, i32 6, i64 1
  %326 = load i8, i8* %325, align 1
  %327 = icmp eq i8 %326, -1
  br i1 %327, label %328, label %361

328:                                              ; preds = %324
  %329 = getelementptr inbounds %struct.MB_MODE_INFO, %struct.MB_MODE_INFO* %320, i64 0, i32 0
  %330 = load i8, i8* %329, align 8
  %331 = zext i8 %330 to i64
  %332 = getelementptr inbounds [22 x i8], [22 x i8]* @block_size_wide, i64 0, i64 %331
  %333 = load i8, i8* %332, align 1
  %334 = zext i8 %333 to i32
  %335 = getelementptr inbounds [22 x i8], [22 x i8]* @block_size_high, i64 0, i64 %331
  %336 = load i8, i8* %335, align 1
  %337 = zext i8 %336 to i32
  %338 = sdiv i32 %334, -2
  %339 = sdiv i32 %337, -2
  %340 = shl i32 %338, 3
  %341 = add i32 %340, -8
  store i32 %341, i32* %312, align 4
  %342 = shl i32 %339, 3
  %343 = add i32 %342, -8
  %344 = getelementptr inbounds i32, i32* %312, i64 1
  store i32 %343, i32* %344, align 4
  %345 = getelementptr inbounds %struct.MB_MODE_INFO, %struct.MB_MODE_INFO* %320, i64 0, i32 5, i64 0
  %346 = bitcast %union.int_mv* %345 to %struct.mv*
  %347 = getelementptr inbounds %struct.mv, %struct.mv* %346, i64 0, i32 1
  %348 = load i16, i16* %347, align 2
  %349 = sext i16 %348 to i32
  %350 = add nsw i32 %341, %349
  store i32 %350, i32* %311, align 4
  %351 = load i32, i32* %344, align 4
  %352 = bitcast %union.int_mv* %345 to i16*
  %353 = load i16, i16* %352, align 8
  %354 = sext i16 %353 to i32
  %355 = add nsw i32 %351, %354
  %356 = getelementptr inbounds i32, i32* %311, i64 1
  store i32 %355, i32* %356, align 4
  %357 = getelementptr inbounds i32, i32* %312, i64 2
  %358 = getelementptr inbounds i32, i32* %311, i64 2
  %359 = add i8 %310, 1
  %360 = icmp ugt i8 %359, 7
  br i1 %360, label %504, label %361

361:                                              ; preds = %163, %328, %324, %315, %308
  %362 = phi i8 [ %310, %308 ], [ %166, %163 ], [ %359, %328 ], [ %310, %324 ], [ %310, %315 ]
  %363 = phi i32* [ %311, %308 ], [ %167, %163 ], [ %358, %328 ], [ %311, %324 ], [ %311, %315 ]
  %364 = phi i32* [ %312, %308 ], [ %168, %163 ], [ %357, %328 ], [ %312, %324 ], [ %312, %315 ]
  %365 = icmp eq i32 %165, 0
  br i1 %365, label %504, label %366

366:                                              ; preds = %361
  %367 = getelementptr inbounds %struct.macroblockd, %struct.macroblockd* %1, i64 0, i32 32
  %368 = load i8, i8* %367, align 4
  %369 = getelementptr inbounds %struct.macroblockd, %struct.macroblockd* %1, i64 0, i32 33
  %370 = load i8, i8* %369, align 1
  %371 = icmp ugt i8 %368, %370
  %372 = select i1 %371, i8 %368, i8 %370
  %373 = zext i8 %372 to i32
  %374 = getelementptr inbounds %struct.AV1Common, %struct.AV1Common* %0, i64 0, i32 35
  %375 = load %struct.SequenceHeader*, %struct.SequenceHeader** %374, align 16
  %376 = getelementptr inbounds %struct.SequenceHeader, %struct.SequenceHeader* %375, i64 0, i32 7
  %377 = load i8, i8* %376, align 4
  %378 = zext i8 %377 to i64
  %379 = getelementptr inbounds [22 x i8], [22 x i8]* @mi_size_wide, i64 0, i64 %378
  %380 = load i8, i8* %379, align 1
  %381 = zext i8 %380 to i32
  %382 = add nsw i32 %381, -1
  %383 = and i32 %382, %19
  %384 = and i32 %382, %21
  %385 = icmp ugt i8 %372, 16
  br i1 %385, label %504, label %386

386:                                              ; preds = %366
  %387 = and i32 %383, %373
  %388 = icmp eq i32 %387, 0
  br i1 %388, label %393, label %389

389:                                              ; preds = %386
  %390 = and i32 %384, %373
  %391 = icmp eq i32 %390, 0
  %392 = zext i1 %391 to i32
  br label %393

393:                                              ; preds = %389, %386
  %394 = phi i32 [ 1, %386 ], [ %392, %389 ]
  br label %395

395:                                              ; preds = %401, %393
  %396 = phi i32 [ %373, %393 ], [ %402, %401 ]
  %397 = icmp sge i32 %396, %381
  %398 = and i32 %396, %384
  %399 = icmp eq i32 %398, 0
  %400 = or i1 %397, %399
  br i1 %400, label %408, label %401

401:                                              ; preds = %395
  %402 = shl i32 %396, 1
  %403 = and i32 %402, %384
  %404 = icmp eq i32 %403, 0
  %405 = and i32 %402, %383
  %406 = icmp eq i32 %405, 0
  %407 = or i1 %404, %406
  br i1 %407, label %395, label %408

408:                                              ; preds = %401, %395
  %409 = phi i32 [ %394, %395 ], [ 0, %401 ]
  %410 = icmp ult i8 %368, %370
  br i1 %410, label %411, label %416

411:                                              ; preds = %408
  %412 = getelementptr inbounds %struct.macroblockd, %struct.macroblockd* %1, i64 0, i32 36
  %413 = load i8, i8* %412, align 8, !range !2
  %414 = icmp eq i8 %413, 0
  %415 = select i1 %414, i32 1, i32 %409
  br label %416

416:                                              ; preds = %411, %408
  %417 = phi i32 [ %409, %408 ], [ %415, %411 ]
  br i1 %371, label %418, label %423

418:                                              ; preds = %416
  %419 = getelementptr inbounds %struct.macroblockd, %struct.macroblockd* %1, i64 0, i32 37
  %420 = load i8, i8* %419, align 1, !range !2
  %421 = icmp eq i8 %420, 0
  %422 = select i1 %421, i32 0, i32 %417
  br label %423

423:                                              ; preds = %418, %416
  %424 = phi i32 [ %417, %416 ], [ %422, %418 ]
  %425 = load %struct.MB_MODE_INFO**, %struct.MB_MODE_INFO*** %5, align 8
  %426 = load %struct.MB_MODE_INFO*, %struct.MB_MODE_INFO** %425, align 8
  %427 = getelementptr inbounds %struct.MB_MODE_INFO, %struct.MB_MODE_INFO* %426, i64 0, i32 1
  %428 = load i8, i8* %427, align 1
  %429 = icmp eq i8 %428, 6
  br i1 %429, label %430, label %437

430:                                              ; preds = %423
  %431 = icmp eq i8 %368, %370
  %432 = and i32 %396, %383
  %433 = icmp ne i32 %432, 0
  %434 = and i1 %431, %433
  %435 = icmp eq i32 %424, 0
  %436 = or i1 %434, %435
  br i1 %436, label %504, label %439

437:                                              ; preds = %423
  %438 = icmp eq i32 %424, 0
  br i1 %438, label %504, label %439

439:                                              ; preds = %430, %437
  %440 = zext i8 %368 to i32
  %441 = getelementptr inbounds %struct.macroblockd, %struct.macroblockd* %1, i64 0, i32 5, i32 0
  %442 = load i32, i32* %441, align 4
  %443 = icmp sgt i32 %19, %442
  br i1 %443, label %444, label %502

444:                                              ; preds = %439
  %445 = add nsw i32 %21, %440
  %446 = getelementptr inbounds %struct.macroblockd, %struct.macroblockd* %1, i64 0, i32 5, i32 2
  %447 = load i32, i32* %446, align 4
  %448 = icmp slt i32 %445, %447
  br i1 %448, label %502, label %449

449:                                              ; preds = %444
  %450 = getelementptr inbounds %struct.macroblockd, %struct.macroblockd* %1, i64 0, i32 5, i32 1
  %451 = load i32, i32* %450, align 4
  %452 = icmp sgt i32 %19, %451
  br i1 %452, label %502, label %453

453:                                              ; preds = %449
  %454 = getelementptr inbounds %struct.macroblockd, %struct.macroblockd* %1, i64 0, i32 5, i32 3
  %455 = load i32, i32* %454, align 4
  %456 = icmp slt i32 %445, %455
  br i1 %456, label %457, label %502

457:                                              ; preds = %453
  %458 = sub i32 %440, %17
  %459 = sext i32 %458 to i64
  %460 = getelementptr inbounds %struct.MB_MODE_INFO*, %struct.MB_MODE_INFO** %425, i64 %459
  %461 = load %struct.MB_MODE_INFO*, %struct.MB_MODE_INFO** %460, align 8
  %462 = getelementptr inbounds %struct.MB_MODE_INFO, %struct.MB_MODE_INFO* %461, i64 0, i32 6, i64 0
  %463 = load i8, i8* %462, align 8
  %464 = icmp eq i8 %463, %9
  br i1 %464, label %465, label %502

465:                                              ; preds = %457
  %466 = getelementptr inbounds %struct.MB_MODE_INFO, %struct.MB_MODE_INFO* %461, i64 0, i32 6, i64 1
  %467 = load i8, i8* %466, align 1
  %468 = icmp eq i8 %467, -1
  br i1 %468, label %469, label %502

469:                                              ; preds = %465
  %470 = getelementptr inbounds %struct.MB_MODE_INFO, %struct.MB_MODE_INFO* %461, i64 0, i32 0
  %471 = load i8, i8* %470, align 8
  %472 = zext i8 %471 to i64
  %473 = getelementptr inbounds [22 x i8], [22 x i8]* @block_size_wide, i64 0, i64 %472
  %474 = load i8, i8* %473, align 1
  %475 = getelementptr inbounds [22 x i8], [22 x i8]* @block_size_high, i64 0, i64 %472
  %476 = load i8, i8* %475, align 1
  %477 = zext i8 %476 to i32
  %478 = shl nuw nsw i32 %440, 2
  %479 = lshr i8 %474, 1
  %480 = zext i8 %479 to i32
  %481 = add nuw nsw i32 %478, %480
  %482 = sdiv i32 %477, -2
  %483 = shl nuw nsw i32 %481, 3
  %484 = add nsw i32 %483, -8
  store i32 %484, i32* %364, align 4
  %485 = shl i32 %482, 3
  %486 = add i32 %485, -8
  %487 = getelementptr inbounds i32, i32* %364, i64 1
  store i32 %486, i32* %487, align 4
  %488 = getelementptr inbounds %struct.MB_MODE_INFO, %struct.MB_MODE_INFO* %461, i64 0, i32 5, i64 0
  %489 = bitcast %union.int_mv* %488 to %struct.mv*
  %490 = getelementptr inbounds %struct.mv, %struct.mv* %489, i64 0, i32 1
  %491 = load i16, i16* %490, align 2
  %492 = sext i16 %491 to i32
  %493 = add nsw i32 %484, %492
  store i32 %493, i32* %363, align 4
  %494 = load i32, i32* %487, align 4
  %495 = bitcast %union.int_mv* %488 to i16*
  %496 = load i16, i16* %495, align 8
  %497 = sext i16 %496 to i32
  %498 = add nsw i32 %494, %497
  %499 = getelementptr inbounds i32, i32* %363, i64 1
  store i32 %498, i32* %499, align 4
  %500 = add i8 %362, 1
  %501 = icmp ugt i8 %500, 7
  br i1 %501, label %504, label %502

502:                                              ; preds = %453, %449, %439, %444, %457, %465, %469
  %503 = phi i8 [ %362, %453 ], [ %362, %449 ], [ %362, %444 ], [ %362, %439 ], [ %500, %469 ], [ %362, %465 ], [ %362, %457 ]
  br label %504

504:                                              ; preds = %113, %258, %430, %366, %361, %437, %502, %469, %328, %201
  %505 = phi i8 [ 8, %201 ], [ 8, %328 ], [ 8, %469 ], [ %362, %437 ], [ %362, %361 ], [ %503, %502 ], [ %362, %430 ], [ %362, %366 ], [ 8, %258 ], [ 8, %113 ]
  ret i8 %505
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @av1_setup_skip_mode_allowed(%struct.AV1Common* nocapture) local_unnamed_addr #0 {
  %2 = getelementptr inbounds %struct.AV1Common, %struct.AV1Common* %0, i64 0, i32 35
  %3 = load %struct.SequenceHeader*, %struct.SequenceHeader** %2, align 16
  %4 = getelementptr inbounds %struct.AV1Common, %struct.AV1Common* %0, i64 0, i32 0, i32 5, i32 0
  store i32 0, i32* %4, align 4
  %5 = getelementptr inbounds %struct.AV1Common, %struct.AV1Common* %0, i64 0, i32 0, i32 5, i32 2
  store i32 -1, i32* %5, align 4
  %6 = getelementptr inbounds %struct.AV1Common, %struct.AV1Common* %0, i64 0, i32 0, i32 5, i32 3
  store i32 -1, i32* %6, align 4
  %7 = getelementptr inbounds %struct.SequenceHeader, %struct.SequenceHeader* %3, i64 0, i32 10, i32 0
  %8 = load i32, i32* %7, align 4
  %9 = icmp eq i32 %8, 0
  br i1 %9, label %120, label %10

10:                                               ; preds = %1
  %11 = getelementptr inbounds %struct.AV1Common, %struct.AV1Common* %0, i64 0, i32 0, i32 0
  %12 = load i8, i8* %11, align 16
  %13 = and i8 %12, -3
  %14 = icmp eq i8 %13, 0
  br i1 %14, label %120, label %15

15:                                               ; preds = %10
  %16 = getelementptr inbounds %struct.AV1Common, %struct.AV1Common* %0, i64 0, i32 0, i32 1
  %17 = load i8, i8* %16, align 1
  %18 = icmp eq i8 %17, 0
  br i1 %18, label %120, label %19

19:                                               ; preds = %15
  %20 = getelementptr inbounds %struct.AV1Common, %struct.AV1Common* %0, i64 0, i32 0, i32 2
  %21 = load i32, i32* %20, align 4
  %22 = getelementptr inbounds %struct.SequenceHeader, %struct.SequenceHeader* %3, i64 0, i32 10, i32 1
  br label %28

23:                                               ; preds = %77
  %24 = icmp ne i32 %81, -1
  %25 = xor i1 %24, true
  %26 = icmp eq i32 %80, -1
  %27 = or i1 %26, %25
  br i1 %27, label %88, label %83

28:                                               ; preds = %77, %19
  %29 = phi i32 [ 0, %19 ], [ %34, %77 ]
  %30 = phi i32 [ -1, %19 ], [ %81, %77 ]
  %31 = phi i32 [ -1, %19 ], [ %80, %77 ]
  %32 = phi i32 [ -1, %19 ], [ %79, %77 ]
  %33 = phi i32 [ 2147483647, %19 ], [ %78, %77 ]
  %34 = add nuw nsw i32 %29, 1
  %35 = trunc i32 %34 to i8
  %36 = add nsw i8 %35, -1
  %37 = icmp ult i8 %36, 8
  br i1 %37, label %38, label %77

38:                                               ; preds = %28
  %39 = sext i8 %35 to i64
  %40 = add nsw i64 %39, -1
  %41 = getelementptr inbounds %struct.AV1Common, %struct.AV1Common* %0, i64 0, i32 13, i64 %40
  %42 = load i32, i32* %41, align 4
  %43 = icmp eq i32 %42, -1
  br i1 %43, label %77, label %44

44:                                               ; preds = %38
  %45 = sext i32 %42 to i64
  %46 = getelementptr inbounds %struct.AV1Common, %struct.AV1Common* %0, i64 0, i32 16, i64 %45
  %47 = load %struct.RefCntBuffer*, %struct.RefCntBuffer** %46, align 8
  %48 = icmp eq %struct.RefCntBuffer* %47, null
  br i1 %48, label %77, label %49

49:                                               ; preds = %44
  %50 = getelementptr inbounds %struct.RefCntBuffer, %struct.RefCntBuffer* %47, i64 0, i32 1
  %51 = load i32, i32* %50, align 4
  %52 = load i32, i32* %22, align 4
  %53 = sub nsw i32 %51, %21
  %54 = shl i32 1, %52
  %55 = add nsw i32 %54, -1
  %56 = and i32 %55, %53
  %57 = and i32 %54, %53
  %58 = icmp slt i32 %56, %57
  br i1 %58, label %59, label %67

59:                                               ; preds = %49
  %60 = icmp eq i32 %32, -1
  br i1 %60, label %66, label %61

61:                                               ; preds = %59
  %62 = sub nsw i32 %51, %32
  %63 = and i32 %55, %62
  %64 = and i32 %54, %62
  %65 = icmp sgt i32 %63, %64
  br i1 %65, label %66, label %77

66:                                               ; preds = %61, %59
  br label %77

67:                                               ; preds = %49
  %68 = icmp sgt i32 %56, %57
  br i1 %68, label %69, label %77

69:                                               ; preds = %67
  %70 = icmp eq i32 %33, 2147483647
  br i1 %70, label %76, label %71

71:                                               ; preds = %69
  %72 = sub nsw i32 %51, %33
  %73 = and i32 %55, %72
  %74 = and i32 %54, %72
  %75 = icmp slt i32 %73, %74
  br i1 %75, label %76, label %77

76:                                               ; preds = %71, %69
  br label %77

77:                                               ; preds = %28, %38, %66, %61, %71, %76, %67, %44
  %78 = phi i32 [ %33, %44 ], [ %33, %66 ], [ %33, %61 ], [ %51, %76 ], [ %33, %71 ], [ %33, %67 ], [ %33, %38 ], [ %33, %28 ]
  %79 = phi i32 [ %32, %44 ], [ %51, %66 ], [ %32, %61 ], [ %32, %76 ], [ %32, %71 ], [ %32, %67 ], [ %32, %38 ], [ %32, %28 ]
  %80 = phi i32 [ %31, %44 ], [ %31, %66 ], [ %31, %61 ], [ %29, %76 ], [ %31, %71 ], [ %31, %67 ], [ %31, %38 ], [ %31, %28 ]
  %81 = phi i32 [ %30, %44 ], [ %29, %66 ], [ %30, %61 ], [ %30, %76 ], [ %30, %71 ], [ %30, %67 ], [ %30, %38 ], [ %30, %28 ]
  %82 = icmp eq i32 %34, 7
  br i1 %82, label %23, label %28

83:                                               ; preds = %23
  store i32 1, i32* %4, align 4
  %84 = icmp slt i32 %81, %80
  %85 = select i1 %84, i32 %81, i32 %80
  store i32 %85, i32* %5, align 4
  %86 = icmp sgt i32 %81, %80
  %87 = select i1 %86, i32 %81, i32 %80
  store i32 %87, i32* %6, align 4
  br label %120

88:                                               ; preds = %23
  %89 = and i1 %26, %24
  br i1 %89, label %90, label %120

90:                                               ; preds = %88
  %91 = icmp eq i32 %79, -1
  %92 = getelementptr inbounds %struct.AV1Common, %struct.AV1Common* %0, i64 0, i32 13, i64 0
  %93 = load i32, i32* %92, align 4
  %94 = icmp eq i32 %93, -1
  br i1 %94, label %121, label %95

95:                                               ; preds = %90
  %96 = sext i32 %93 to i64
  %97 = getelementptr inbounds %struct.AV1Common, %struct.AV1Common* %0, i64 0, i32 16, i64 %96
  %98 = load %struct.RefCntBuffer*, %struct.RefCntBuffer** %97, align 8
  %99 = icmp eq %struct.RefCntBuffer* %98, null
  br i1 %99, label %121, label %100

100:                                              ; preds = %95
  %101 = getelementptr inbounds %struct.RefCntBuffer, %struct.RefCntBuffer* %98, i64 0, i32 1
  %102 = load i32, i32* %101, align 4
  br i1 %91, label %121, label %103

103:                                              ; preds = %100
  %104 = load i32, i32* %22, align 4
  %105 = sub nsw i32 %102, %79
  %106 = shl i32 1, %104
  %107 = add nsw i32 %106, -1
  %108 = and i32 %107, %105
  %109 = and i32 %106, %105
  %110 = icmp slt i32 %108, %109
  %111 = select i1 %110, i32 %102, i32 -1
  %112 = xor i1 %110, true
  %113 = sext i1 %112 to i32
  br label %121

114:                                              ; preds = %295, %300
  %115 = phi i32 [ %302, %300 ], [ %273, %295 ]
  store i32 1, i32* %4, align 4
  %116 = icmp slt i32 %81, %115
  %117 = select i1 %116, i32 %81, i32 %115
  store i32 %117, i32* %5, align 4
  %118 = icmp sgt i32 %81, %115
  %119 = select i1 %118, i32 %81, i32 %115
  store i32 %119, i32* %6, align 4
  br label %120

120:                                              ; preds = %10, %83, %114, %88, %300, %15, %1
  ret void

121:                                              ; preds = %103, %95, %100, %90
  %122 = phi i32 [ -1, %95 ], [ -1, %100 ], [ -1, %90 ], [ %111, %103 ]
  %123 = phi i32 [ -1, %95 ], [ -1, %100 ], [ -1, %90 ], [ %113, %103 ]
  %124 = getelementptr inbounds %struct.AV1Common, %struct.AV1Common* %0, i64 0, i32 13, i64 1
  %125 = load i32, i32* %124, align 4
  %126 = icmp eq i32 %125, -1
  br i1 %126, label %151, label %127

127:                                              ; preds = %121
  %128 = sext i32 %125 to i64
  %129 = getelementptr inbounds %struct.AV1Common, %struct.AV1Common* %0, i64 0, i32 16, i64 %128
  %130 = load %struct.RefCntBuffer*, %struct.RefCntBuffer** %129, align 8
  %131 = icmp eq %struct.RefCntBuffer* %130, null
  br i1 %131, label %151, label %132

132:                                              ; preds = %127
  %133 = getelementptr inbounds %struct.RefCntBuffer, %struct.RefCntBuffer* %130, i64 0, i32 1
  %134 = load i32, i32* %133, align 4
  br i1 %91, label %151, label %135

135:                                              ; preds = %132
  %136 = load i32, i32* %22, align 4
  %137 = sub nsw i32 %134, %79
  %138 = shl i32 1, %136
  %139 = add nsw i32 %138, -1
  %140 = and i32 %139, %137
  %141 = and i32 %138, %137
  %142 = icmp slt i32 %140, %141
  br i1 %142, label %143, label %151

143:                                              ; preds = %135
  %144 = icmp eq i32 %122, -1
  br i1 %144, label %150, label %145

145:                                              ; preds = %143
  %146 = sub nsw i32 %134, %122
  %147 = and i32 %139, %146
  %148 = and i32 %138, %146
  %149 = icmp sgt i32 %147, %148
  br i1 %149, label %150, label %151

150:                                              ; preds = %145, %143
  br label %151

151:                                              ; preds = %121, %127, %132, %135, %145, %150
  %152 = phi i32 [ %122, %127 ], [ %134, %150 ], [ %122, %145 ], [ %122, %135 ], [ %122, %132 ], [ %122, %121 ]
  %153 = phi i32 [ %123, %127 ], [ 1, %150 ], [ %123, %145 ], [ %123, %135 ], [ %123, %132 ], [ %123, %121 ]
  %154 = getelementptr inbounds %struct.AV1Common, %struct.AV1Common* %0, i64 0, i32 13, i64 2
  %155 = load i32, i32* %154, align 4
  %156 = icmp eq i32 %155, -1
  br i1 %156, label %181, label %157

157:                                              ; preds = %151
  %158 = sext i32 %155 to i64
  %159 = getelementptr inbounds %struct.AV1Common, %struct.AV1Common* %0, i64 0, i32 16, i64 %158
  %160 = load %struct.RefCntBuffer*, %struct.RefCntBuffer** %159, align 8
  %161 = icmp eq %struct.RefCntBuffer* %160, null
  br i1 %161, label %181, label %162

162:                                              ; preds = %157
  %163 = getelementptr inbounds %struct.RefCntBuffer, %struct.RefCntBuffer* %160, i64 0, i32 1
  %164 = load i32, i32* %163, align 4
  br i1 %91, label %181, label %165

165:                                              ; preds = %162
  %166 = load i32, i32* %22, align 4
  %167 = sub nsw i32 %164, %79
  %168 = shl i32 1, %166
  %169 = add nsw i32 %168, -1
  %170 = and i32 %169, %167
  %171 = and i32 %168, %167
  %172 = icmp slt i32 %170, %171
  br i1 %172, label %173, label %181

173:                                              ; preds = %165
  %174 = icmp eq i32 %152, -1
  br i1 %174, label %180, label %175

175:                                              ; preds = %173
  %176 = sub nsw i32 %164, %152
  %177 = and i32 %169, %176
  %178 = and i32 %168, %176
  %179 = icmp sgt i32 %177, %178
  br i1 %179, label %180, label %181

180:                                              ; preds = %175, %173
  br label %181

181:                                              ; preds = %151, %157, %162, %165, %175, %180
  %182 = phi i32 [ %152, %157 ], [ %164, %180 ], [ %152, %175 ], [ %152, %165 ], [ %152, %162 ], [ %152, %151 ]
  %183 = phi i32 [ %153, %157 ], [ 2, %180 ], [ %153, %175 ], [ %153, %165 ], [ %153, %162 ], [ %153, %151 ]
  %184 = getelementptr inbounds %struct.AV1Common, %struct.AV1Common* %0, i64 0, i32 13, i64 3
  %185 = load i32, i32* %184, align 4
  %186 = icmp eq i32 %185, -1
  br i1 %186, label %211, label %187

187:                                              ; preds = %181
  %188 = sext i32 %185 to i64
  %189 = getelementptr inbounds %struct.AV1Common, %struct.AV1Common* %0, i64 0, i32 16, i64 %188
  %190 = load %struct.RefCntBuffer*, %struct.RefCntBuffer** %189, align 8
  %191 = icmp eq %struct.RefCntBuffer* %190, null
  br i1 %191, label %211, label %192

192:                                              ; preds = %187
  %193 = getelementptr inbounds %struct.RefCntBuffer, %struct.RefCntBuffer* %190, i64 0, i32 1
  %194 = load i32, i32* %193, align 4
  br i1 %91, label %211, label %195

195:                                              ; preds = %192
  %196 = load i32, i32* %22, align 4
  %197 = sub nsw i32 %194, %79
  %198 = shl i32 1, %196
  %199 = add nsw i32 %198, -1
  %200 = and i32 %199, %197
  %201 = and i32 %198, %197
  %202 = icmp slt i32 %200, %201
  br i1 %202, label %203, label %211

203:                                              ; preds = %195
  %204 = icmp eq i32 %182, -1
  br i1 %204, label %210, label %205

205:                                              ; preds = %203
  %206 = sub nsw i32 %194, %182
  %207 = and i32 %199, %206
  %208 = and i32 %198, %206
  %209 = icmp sgt i32 %207, %208
  br i1 %209, label %210, label %211

210:                                              ; preds = %205, %203
  br label %211

211:                                              ; preds = %181, %187, %192, %195, %205, %210
  %212 = phi i32 [ %182, %187 ], [ %194, %210 ], [ %182, %205 ], [ %182, %195 ], [ %182, %192 ], [ %182, %181 ]
  %213 = phi i32 [ %183, %187 ], [ 3, %210 ], [ %183, %205 ], [ %183, %195 ], [ %183, %192 ], [ %183, %181 ]
  %214 = getelementptr inbounds %struct.AV1Common, %struct.AV1Common* %0, i64 0, i32 13, i64 4
  %215 = load i32, i32* %214, align 4
  %216 = icmp eq i32 %215, -1
  br i1 %216, label %241, label %217

217:                                              ; preds = %211
  %218 = sext i32 %215 to i64
  %219 = getelementptr inbounds %struct.AV1Common, %struct.AV1Common* %0, i64 0, i32 16, i64 %218
  %220 = load %struct.RefCntBuffer*, %struct.RefCntBuffer** %219, align 8
  %221 = icmp eq %struct.RefCntBuffer* %220, null
  br i1 %221, label %241, label %222

222:                                              ; preds = %217
  %223 = getelementptr inbounds %struct.RefCntBuffer, %struct.RefCntBuffer* %220, i64 0, i32 1
  %224 = load i32, i32* %223, align 4
  br i1 %91, label %241, label %225

225:                                              ; preds = %222
  %226 = load i32, i32* %22, align 4
  %227 = sub nsw i32 %224, %79
  %228 = shl i32 1, %226
  %229 = add nsw i32 %228, -1
  %230 = and i32 %229, %227
  %231 = and i32 %228, %227
  %232 = icmp slt i32 %230, %231
  br i1 %232, label %233, label %241

233:                                              ; preds = %225
  %234 = icmp eq i32 %212, -1
  br i1 %234, label %240, label %235

235:                                              ; preds = %233
  %236 = sub nsw i32 %224, %212
  %237 = and i32 %229, %236
  %238 = and i32 %228, %236
  %239 = icmp sgt i32 %237, %238
  br i1 %239, label %240, label %241

240:                                              ; preds = %235, %233
  br label %241

241:                                              ; preds = %211, %217, %222, %225, %235, %240
  %242 = phi i32 [ %212, %217 ], [ %224, %240 ], [ %212, %235 ], [ %212, %225 ], [ %212, %222 ], [ %212, %211 ]
  %243 = phi i32 [ %213, %217 ], [ 4, %240 ], [ %213, %235 ], [ %213, %225 ], [ %213, %222 ], [ %213, %211 ]
  %244 = getelementptr inbounds %struct.AV1Common, %struct.AV1Common* %0, i64 0, i32 13, i64 5
  %245 = load i32, i32* %244, align 4
  %246 = icmp eq i32 %245, -1
  br i1 %246, label %271, label %247

247:                                              ; preds = %241
  %248 = sext i32 %245 to i64
  %249 = getelementptr inbounds %struct.AV1Common, %struct.AV1Common* %0, i64 0, i32 16, i64 %248
  %250 = load %struct.RefCntBuffer*, %struct.RefCntBuffer** %249, align 8
  %251 = icmp eq %struct.RefCntBuffer* %250, null
  br i1 %251, label %271, label %252

252:                                              ; preds = %247
  %253 = getelementptr inbounds %struct.RefCntBuffer, %struct.RefCntBuffer* %250, i64 0, i32 1
  %254 = load i32, i32* %253, align 4
  br i1 %91, label %271, label %255

255:                                              ; preds = %252
  %256 = load i32, i32* %22, align 4
  %257 = sub nsw i32 %254, %79
  %258 = shl i32 1, %256
  %259 = add nsw i32 %258, -1
  %260 = and i32 %259, %257
  %261 = and i32 %258, %257
  %262 = icmp slt i32 %260, %261
  br i1 %262, label %263, label %271

263:                                              ; preds = %255
  %264 = icmp eq i32 %242, -1
  br i1 %264, label %270, label %265

265:                                              ; preds = %263
  %266 = sub nsw i32 %254, %242
  %267 = and i32 %259, %266
  %268 = and i32 %258, %266
  %269 = icmp sgt i32 %267, %268
  br i1 %269, label %270, label %271

270:                                              ; preds = %265, %263
  br label %271

271:                                              ; preds = %241, %247, %252, %255, %265, %270
  %272 = phi i32 [ %242, %247 ], [ %254, %270 ], [ %242, %265 ], [ %242, %255 ], [ %242, %252 ], [ %242, %241 ]
  %273 = phi i32 [ %243, %247 ], [ 5, %270 ], [ %243, %265 ], [ %243, %255 ], [ %243, %252 ], [ %243, %241 ]
  %274 = getelementptr inbounds %struct.AV1Common, %struct.AV1Common* %0, i64 0, i32 13, i64 6
  %275 = load i32, i32* %274, align 4
  %276 = icmp eq i32 %275, -1
  br i1 %276, label %300, label %277

277:                                              ; preds = %271
  %278 = sext i32 %275 to i64
  %279 = getelementptr inbounds %struct.AV1Common, %struct.AV1Common* %0, i64 0, i32 16, i64 %278
  %280 = load %struct.RefCntBuffer*, %struct.RefCntBuffer** %279, align 8
  %281 = icmp eq %struct.RefCntBuffer* %280, null
  br i1 %281, label %300, label %282

282:                                              ; preds = %277
  %283 = getelementptr inbounds %struct.RefCntBuffer, %struct.RefCntBuffer* %280, i64 0, i32 1
  %284 = load i32, i32* %283, align 4
  br i1 %91, label %300, label %285

285:                                              ; preds = %282
  %286 = load i32, i32* %22, align 4
  %287 = sub nsw i32 %284, %79
  %288 = shl i32 1, %286
  %289 = add nsw i32 %288, -1
  %290 = and i32 %289, %287
  %291 = and i32 %288, %287
  %292 = icmp slt i32 %290, %291
  br i1 %292, label %293, label %300

293:                                              ; preds = %285
  %294 = icmp eq i32 %272, -1
  br i1 %294, label %300, label %295

295:                                              ; preds = %293
  %296 = sub nsw i32 %284, %272
  %297 = and i32 %289, %296
  %298 = and i32 %288, %296
  %299 = icmp sgt i32 %297, %298
  br i1 %299, label %300, label %114

300:                                              ; preds = %293, %295, %285, %282, %277, %271
  %301 = phi i32 [ %272, %277 ], [ %272, %285 ], [ %272, %282 ], [ %272, %271 ], [ %284, %295 ], [ %284, %293 ]
  %302 = phi i32 [ %273, %277 ], [ %273, %285 ], [ %273, %282 ], [ %273, %271 ], [ 6, %295 ], [ 6, %293 ]
  %303 = icmp eq i32 %301, -1
  br i1 %303, label %120, label %114
}

; Function Attrs: nounwind ssp uwtable
define hidden void @av1_set_frame_refs(%struct.AV1Common* nocapture readonly, i32* nocapture, i32, i32) local_unnamed_addr #2 {
  %5 = alloca [8 x %struct.REF_FRAME_INFO], align 16
  %6 = alloca [7 x i32], align 16
  %7 = getelementptr inbounds %struct.AV1Common, %struct.AV1Common* %0, i64 0, i32 0, i32 2
  %8 = load i32, i32* %7, align 4
  %9 = getelementptr inbounds %struct.AV1Common, %struct.AV1Common* %0, i64 0, i32 35
  %10 = load %struct.SequenceHeader*, %struct.SequenceHeader** %9, align 16
  %11 = getelementptr inbounds %struct.SequenceHeader, %struct.SequenceHeader* %10, i64 0, i32 10, i32 1
  %12 = load i32, i32* %11, align 4
  %13 = shl i32 1, %12
  %14 = bitcast [8 x %struct.REF_FRAME_INFO]* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 192, i8* nonnull %14) #9
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %14, i8 -86, i64 192, i1 false)
  %15 = bitcast [7 x i32]* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 28, i8* nonnull %15) #9
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %15, i8 0, i64 28, i1 false)
  %16 = getelementptr inbounds %struct.SequenceHeader, %struct.SequenceHeader* %10, i64 0, i32 10, i32 0
  %17 = zext i32 %2 to i64
  %18 = zext i32 %3 to i64
  br label %23

19:                                               ; preds = %58
  %20 = icmp ne i32 %59, -1
  %21 = icmp slt i32 %59, %13
  %22 = and i1 %20, %21
  br i1 %22, label %66, label %63

23:                                               ; preds = %58, %4
  %24 = phi i64 [ 0, %4 ], [ %61, %58 ]
  %25 = phi i32 [ -1, %4 ], [ %60, %58 ]
  %26 = phi i32 [ -1, %4 ], [ %59, %58 ]
  %27 = getelementptr inbounds [8 x %struct.REF_FRAME_INFO], [8 x %struct.REF_FRAME_INFO]* %5, i64 0, i64 %24, i32 0
  %28 = trunc i64 %24 to i32
  store i32 %28, i32* %27, align 8
  %29 = getelementptr inbounds [8 x %struct.REF_FRAME_INFO], [8 x %struct.REF_FRAME_INFO]* %5, i64 0, i64 %24, i32 2
  store i32 -1, i32* %29, align 8
  %30 = getelementptr inbounds %struct.AV1Common, %struct.AV1Common* %0, i64 0, i32 16, i64 %24
  %31 = load %struct.RefCntBuffer*, %struct.RefCntBuffer** %30, align 8
  %32 = getelementptr inbounds [8 x %struct.REF_FRAME_INFO], [8 x %struct.REF_FRAME_INFO]* %5, i64 0, i64 %24, i32 1
  store %struct.RefCntBuffer* %31, %struct.RefCntBuffer** %32, align 8
  %33 = icmp eq %struct.RefCntBuffer* %31, null
  br i1 %33, label %58, label %34

34:                                               ; preds = %23
  %35 = getelementptr inbounds %struct.RefCntBuffer, %struct.RefCntBuffer* %31, i64 0, i32 1
  %36 = load i32, i32* %35, align 4
  %37 = icmp eq i32 %36, -1
  br i1 %37, label %52, label %38

38:                                               ; preds = %34
  %39 = load i32, i32* %16, align 4
  %40 = icmp eq i32 %39, 0
  br i1 %40, label %49, label %41

41:                                               ; preds = %38
  %42 = load i32, i32* %11, align 4
  %43 = sub nsw i32 %36, %8
  %44 = shl i32 1, %42
  %45 = add nsw i32 %44, -1
  %46 = and i32 %45, %43
  %47 = and i32 %44, %43
  %48 = sub nsw i32 %46, %47
  br label %49

49:                                               ; preds = %38, %41
  %50 = phi i32 [ %48, %41 ], [ 0, %38 ]
  %51 = add nsw i32 %50, %13
  br label %52

52:                                               ; preds = %34, %49
  %53 = phi i32 [ %51, %49 ], [ -1, %34 ]
  store i32 %53, i32* %29, align 8
  %54 = icmp eq i64 %24, %17
  %55 = select i1 %54, i32 %53, i32 %26
  %56 = icmp eq i64 %24, %18
  %57 = select i1 %56, i32 %53, i32 %25
  br label %58

58:                                               ; preds = %52, %23
  %59 = phi i32 [ %26, %23 ], [ %55, %52 ]
  %60 = phi i32 [ %25, %23 ], [ %57, %52 ]
  %61 = add nuw nsw i64 %24, 1
  %62 = icmp eq i64 %61, 8
  br i1 %62, label %19, label %23

63:                                               ; preds = %19
  %64 = getelementptr inbounds %struct.AV1Common, %struct.AV1Common* %0, i64 0, i32 1
  %65 = load %struct.aom_internal_error_info*, %struct.aom_internal_error_info** %64, align 8
  tail call void (%struct.aom_internal_error_info*, i32, i8*, ...) @aom_internal_error(%struct.aom_internal_error_info* %65, i32 7, i8* getelementptr inbounds ([48 x i8], [48 x i8]* @.str, i64 0, i64 0)) #9
  br label %66

66:                                               ; preds = %19, %63
  %67 = icmp ne i32 %60, -1
  %68 = icmp slt i32 %60, %13
  %69 = and i1 %67, %68
  br i1 %69, label %73, label %70

70:                                               ; preds = %66
  %71 = getelementptr inbounds %struct.AV1Common, %struct.AV1Common* %0, i64 0, i32 1
  %72 = load %struct.aom_internal_error_info*, %struct.aom_internal_error_info** %71, align 8
  tail call void (%struct.aom_internal_error_info*, i32, i8*, ...) @aom_internal_error(%struct.aom_internal_error_info* %72, i32 7, i8* getelementptr inbounds ([50 x i8], [50 x i8]* @.str.1, i64 0, i64 0)) #9
  br label %73

73:                                               ; preds = %66, %70
  call void @qsort(i8* nonnull %14, i64 8, i64 24, i32 (i8*, i8*)* nonnull @compare_ref_frame_info) #9
  %74 = getelementptr inbounds [8 x %struct.REF_FRAME_INFO], [8 x %struct.REF_FRAME_INFO]* %5, i64 0, i64 0, i32 2
  %75 = load i32, i32* %74, align 16
  %76 = icmp eq i32 %75, -1
  br i1 %76, label %79, label %77

77:                                               ; preds = %73
  %78 = icmp slt i32 %75, %13
  br i1 %78, label %79, label %84

79:                                               ; preds = %73, %77
  %80 = phi i32 [ 0, %77 ], [ 1, %73 ]
  %81 = getelementptr inbounds [8 x %struct.REF_FRAME_INFO], [8 x %struct.REF_FRAME_INFO]* %5, i64 0, i64 1, i32 2
  %82 = load i32, i32* %81, align 8
  %83 = icmp eq i32 %82, -1
  br i1 %83, label %278, label %276

84:                                               ; preds = %330, %321, %312, %303, %294, %285, %276, %77
  %85 = phi i32 [ 0, %77 ], [ 1, %276 ], [ 2, %285 ], [ 3, %294 ], [ 4, %303 ], [ 5, %312 ], [ 6, %321 ], [ 7, %330 ]
  %86 = phi i32 [ 0, %77 ], [ %80, %276 ], [ %281, %285 ], [ %290, %294 ], [ %299, %303 ], [ %308, %312 ], [ %317, %321 ], [ %326, %330 ]
  %87 = add nsw i32 %85, -1
  %88 = getelementptr inbounds [8 x %struct.REF_FRAME_INFO], [8 x %struct.REF_FRAME_INFO]* %5, i64 0, i64 7, i32 0
  %89 = load i32, i32* %88, align 8
  %90 = getelementptr inbounds i32, i32* %1, i64 6
  store i32 %89, i32* %90, align 4
  %91 = getelementptr inbounds [7 x i32], [7 x i32]* %6, i64 0, i64 6
  store i32 1, i32* %91, align 8
  %92 = icmp eq i32 %85, 7
  br i1 %92, label %107, label %93

93:                                               ; preds = %84
  %94 = zext i32 %85 to i64
  %95 = getelementptr inbounds [8 x %struct.REF_FRAME_INFO], [8 x %struct.REF_FRAME_INFO]* %5, i64 0, i64 %94, i32 0
  %96 = load i32, i32* %95, align 8
  %97 = getelementptr inbounds i32, i32* %1, i64 4
  store i32 %96, i32* %97, align 4
  %98 = getelementptr inbounds [7 x i32], [7 x i32]* %6, i64 0, i64 4
  store i32 1, i32* %98, align 16
  %99 = icmp ugt i32 %85, 5
  br i1 %99, label %107, label %100

100:                                              ; preds = %93
  %101 = add nuw nsw i32 %85, 1
  %102 = zext i32 %101 to i64
  %103 = getelementptr inbounds [8 x %struct.REF_FRAME_INFO], [8 x %struct.REF_FRAME_INFO]* %5, i64 0, i64 %102, i32 0
  %104 = load i32, i32* %103, align 8
  %105 = getelementptr inbounds i32, i32* %1, i64 5
  store i32 %104, i32* %105, align 4
  %106 = getelementptr inbounds [7 x i32], [7 x i32]* %6, i64 0, i64 5
  store i32 1, i32* %106, align 4
  br label %107

107:                                              ; preds = %84, %332, %93, %100
  %108 = phi i32 [ 1, %93 ], [ 1, %100 ], [ 0, %332 ], [ 1, %84 ]
  %109 = phi i32 [ 0, %93 ], [ 1, %100 ], [ 0, %332 ], [ 0, %84 ]
  %110 = phi i32 [ 1, %93 ], [ 1, %100 ], [ 0, %332 ], [ 0, %84 ]
  %111 = phi i32 [ %86, %93 ], [ %86, %100 ], [ %333, %332 ], [ %86, %84 ]
  %112 = phi i32 [ %87, %93 ], [ %87, %100 ], [ 7, %332 ], [ %87, %84 ]
  %113 = icmp sgt i32 %111, %112
  br i1 %113, label %114, label %116

114:                                              ; preds = %107
  %115 = sext i32 %111 to i64
  br label %152

116:                                              ; preds = %330, %107
  %117 = phi i32 [ %112, %107 ], [ 7, %330 ]
  %118 = phi i32 [ %111, %107 ], [ %326, %330 ]
  %119 = phi i32 [ %110, %107 ], [ 0, %330 ]
  %120 = phi i32 [ %109, %107 ], [ 0, %330 ]
  %121 = phi i32 [ %108, %107 ], [ 0, %330 ]
  %122 = getelementptr inbounds [7 x i32], [7 x i32]* %6, i64 0, i64 0
  %123 = getelementptr inbounds i32, i32* %1, i64 3
  %124 = getelementptr inbounds [7 x i32], [7 x i32]* %6, i64 0, i64 3
  %125 = sext i32 %118 to i64
  %126 = sext i32 %117 to i64
  %127 = getelementptr inbounds [8 x %struct.REF_FRAME_INFO], [8 x %struct.REF_FRAME_INFO]* %5, i64 0, i64 %125, i32 0
  %128 = load i32, i32* %127, align 8
  %129 = icmp eq i32 %128, %2
  br i1 %129, label %130, label %131

130:                                              ; preds = %116
  store i32 %2, i32* %1, align 4
  br label %131

131:                                              ; preds = %130, %116
  %132 = phi i32 [ 1, %130 ], [ 0, %116 ]
  %133 = icmp eq i32 %128, %3
  br i1 %133, label %134, label %135

134:                                              ; preds = %131
  store i32 %3, i32* %123, align 4
  br label %135

135:                                              ; preds = %131, %134
  %136 = phi i32 [ 0, %131 ], [ 1, %134 ]
  %137 = add nsw i64 %125, 1
  %138 = icmp slt i32 %118, %117
  br i1 %138, label %447, label %139

139:                                              ; preds = %530, %533, %521, %508, %495, %482, %469, %456, %135
  %140 = phi i32 [ %136, %135 ], [ %457, %456 ], [ %470, %469 ], [ %483, %482 ], [ %496, %495 ], [ %509, %508 ], [ %522, %521 ], [ %522, %530 ], [ 1, %533 ]
  %141 = phi i32 [ %132, %135 ], [ %453, %456 ], [ %466, %469 ], [ %479, %482 ], [ %492, %495 ], [ %505, %508 ], [ %518, %521 ], [ %531, %533 ], [ %531, %530 ]
  store i32 %141, i32* %122, align 16
  store i32 %140, i32* %124, align 4
  %142 = getelementptr inbounds [7 x i32], [7 x i32]* %6, i64 0, i64 1
  %143 = sext i32 %117 to i64
  %144 = getelementptr inbounds [8 x %struct.REF_FRAME_INFO], [8 x %struct.REF_FRAME_INFO]* %5, i64 0, i64 %143, i32 0
  %145 = load i32, i32* %144, align 8
  %146 = icmp eq i32 %145, %2
  %147 = icmp eq i32 %145, %3
  %148 = or i1 %146, %147
  br i1 %148, label %149, label %170

149:                                              ; preds = %139
  %150 = add nsw i64 %143, -1
  %151 = icmp sgt i32 %117, %118
  br i1 %151, label %387, label %152

152:                                              ; preds = %441, %149, %393, %402, %411, %420, %429, %438, %191, %223, %249, %273, %204, %170, %230, %256, %114
  %153 = phi i64 [ %115, %114 ], [ %125, %256 ], [ %125, %230 ], [ %125, %204 ], [ %125, %170 ], [ %125, %273 ], [ %125, %249 ], [ %125, %223 ], [ %125, %191 ], [ %125, %438 ], [ %125, %429 ], [ %125, %420 ], [ %125, %411 ], [ %125, %402 ], [ %125, %393 ], [ %125, %149 ], [ %125, %441 ]
  %154 = phi i64 [ 0, %114 ], [ 4, %256 ], [ 3, %230 ], [ 2, %204 ], [ 1, %170 ], [ 4, %273 ], [ 3, %249 ], [ 2, %223 ], [ 1, %191 ], [ 0, %438 ], [ 0, %429 ], [ 0, %420 ], [ 0, %411 ], [ 0, %402 ], [ 0, %393 ], [ 0, %149 ], [ 0, %441 ]
  %155 = getelementptr inbounds [8 x %struct.REF_FRAME_INFO], [8 x %struct.REF_FRAME_INFO]* %5, i64 0, i64 %153, i32 0
  %156 = getelementptr inbounds [5 x i8], [5 x i8]* @av1_set_frame_refs.ref_frame_list, i64 0, i64 %154
  %157 = load i8, i8* %156, align 1
  %158 = sext i8 %157 to i64
  %159 = add nsw i64 %158, -1
  %160 = getelementptr inbounds [7 x i32], [7 x i32]* %6, i64 0, i64 %159
  %161 = load i32, i32* %160, align 4
  %162 = icmp eq i32 %161, 1
  br i1 %162, label %167, label %164

163:                                              ; preds = %376, %384, %167, %345, %359, %373, %267, %252
  call void @llvm.lifetime.end.p0i8(i64 28, i8* nonnull %15) #9
  call void @llvm.lifetime.end.p0i8(i64 192, i8* nonnull %14) #9
  ret void

164:                                              ; preds = %152
  %165 = load i32, i32* %155, align 8
  %166 = getelementptr inbounds i32, i32* %1, i64 %159
  store i32 %165, i32* %166, align 4
  store i32 1, i32* %160, align 4
  br label %167

167:                                              ; preds = %152, %164
  %168 = add nuw nsw i64 %154, 1
  %169 = icmp eq i64 %168, 5
  br i1 %169, label %163, label %334

170:                                              ; preds = %441, %432, %423, %414, %405, %396, %387, %139
  %171 = phi i64 [ %143, %139 ], [ %150, %387 ], [ %394, %396 ], [ %403, %405 ], [ %412, %414 ], [ %421, %423 ], [ %430, %432 ], [ %439, %441 ]
  %172 = trunc i64 %171 to i32
  %173 = shl i64 %171, 32
  %174 = ashr exact i64 %173, 32
  %175 = getelementptr inbounds [8 x %struct.REF_FRAME_INFO], [8 x %struct.REF_FRAME_INFO]* %5, i64 0, i64 %174, i32 0
  %176 = load i32, i32* %175, align 8
  %177 = getelementptr inbounds i32, i32* %1, i64 1
  store i32 %176, i32* %177, align 4
  store i32 1, i32* %142, align 4
  %178 = getelementptr inbounds [7 x i32], [7 x i32]* %6, i64 0, i64 2
  %179 = icmp slt i32 %118, %172
  br i1 %179, label %180, label %152

180:                                              ; preds = %170
  %181 = shl i64 %171, 32
  %182 = add i64 %181, -4294967296
  %183 = ashr exact i64 %182, 32
  br label %184

184:                                              ; preds = %191, %180
  %185 = phi i64 [ %183, %180 ], [ %192, %191 ]
  %186 = getelementptr inbounds [8 x %struct.REF_FRAME_INFO], [8 x %struct.REF_FRAME_INFO]* %5, i64 0, i64 %185, i32 0
  %187 = load i32, i32* %186, align 8
  %188 = icmp eq i32 %187, %2
  %189 = icmp eq i32 %187, %3
  %190 = or i1 %188, %189
  br i1 %190, label %191, label %194

191:                                              ; preds = %184
  %192 = add nsw i64 %185, -1
  %193 = icmp sgt i64 %185, %125
  br i1 %193, label %184, label %152

194:                                              ; preds = %184
  %195 = trunc i64 %185 to i32
  %196 = shl i64 %185, 32
  %197 = ashr exact i64 %196, 32
  %198 = getelementptr inbounds [8 x %struct.REF_FRAME_INFO], [8 x %struct.REF_FRAME_INFO]* %5, i64 0, i64 %197, i32 0
  %199 = load i32, i32* %198, align 8
  %200 = getelementptr inbounds i32, i32* %1, i64 2
  store i32 %199, i32* %200, align 4
  store i32 1, i32* %178, align 8
  %201 = add nsw i32 %195, -1
  %202 = getelementptr inbounds [7 x i32], [7 x i32]* %6, i64 0, i64 4
  %203 = icmp eq i32 %119, 1
  br i1 %203, label %226, label %204

204:                                              ; preds = %194
  %205 = icmp slt i32 %118, %195
  br i1 %205, label %206, label %152

206:                                              ; preds = %204
  %207 = sext i32 %201 to i64
  br label %208

208:                                              ; preds = %223, %206
  %209 = phi i64 [ %207, %206 ], [ %224, %223 ]
  %210 = getelementptr inbounds [8 x %struct.REF_FRAME_INFO], [8 x %struct.REF_FRAME_INFO]* %5, i64 0, i64 %209, i32 0
  %211 = load i32, i32* %210, align 8
  %212 = icmp eq i32 %211, %2
  %213 = icmp eq i32 %211, %3
  %214 = or i1 %212, %213
  br i1 %214, label %223, label %215

215:                                              ; preds = %208
  %216 = trunc i64 %209 to i32
  %217 = shl i64 %209, 32
  %218 = ashr exact i64 %217, 32
  %219 = getelementptr inbounds [8 x %struct.REF_FRAME_INFO], [8 x %struct.REF_FRAME_INFO]* %5, i64 0, i64 %218, i32 0
  %220 = load i32, i32* %219, align 8
  %221 = getelementptr inbounds i32, i32* %1, i64 4
  store i32 %220, i32* %221, align 4
  store i32 1, i32* %202, align 16
  %222 = add nsw i32 %216, -1
  br label %226

223:                                              ; preds = %208
  %224 = add nsw i64 %209, -1
  %225 = icmp sgt i64 %209, %125
  br i1 %225, label %208, label %152

226:                                              ; preds = %215, %194
  %227 = phi i32 [ %201, %194 ], [ %222, %215 ]
  %228 = getelementptr inbounds [7 x i32], [7 x i32]* %6, i64 0, i64 5
  %229 = icmp eq i32 %120, 1
  br i1 %229, label %252, label %230

230:                                              ; preds = %226
  %231 = icmp sgt i32 %118, %227
  br i1 %231, label %152, label %232

232:                                              ; preds = %230
  %233 = sext i32 %227 to i64
  br label %234

234:                                              ; preds = %249, %232
  %235 = phi i64 [ %233, %232 ], [ %250, %249 ]
  %236 = getelementptr inbounds [8 x %struct.REF_FRAME_INFO], [8 x %struct.REF_FRAME_INFO]* %5, i64 0, i64 %235, i32 0
  %237 = load i32, i32* %236, align 8
  %238 = icmp eq i32 %237, %2
  %239 = icmp eq i32 %237, %3
  %240 = or i1 %238, %239
  br i1 %240, label %249, label %241

241:                                              ; preds = %234
  %242 = trunc i64 %235 to i32
  %243 = shl i64 %235, 32
  %244 = ashr exact i64 %243, 32
  %245 = getelementptr inbounds [8 x %struct.REF_FRAME_INFO], [8 x %struct.REF_FRAME_INFO]* %5, i64 0, i64 %244, i32 0
  %246 = load i32, i32* %245, align 8
  %247 = getelementptr inbounds i32, i32* %1, i64 5
  store i32 %246, i32* %247, align 4
  store i32 1, i32* %228, align 4
  %248 = add nsw i32 %242, -1
  br label %252

249:                                              ; preds = %234
  %250 = add nsw i64 %235, -1
  %251 = icmp sgt i64 %235, %125
  br i1 %251, label %234, label %152

252:                                              ; preds = %241, %226
  %253 = phi i32 [ %227, %226 ], [ %248, %241 ]
  %254 = getelementptr inbounds [7 x i32], [7 x i32]* %6, i64 0, i64 6
  %255 = icmp eq i32 %121, 1
  br i1 %255, label %163, label %256

256:                                              ; preds = %252
  %257 = icmp sgt i32 %118, %253
  br i1 %257, label %152, label %258

258:                                              ; preds = %256
  %259 = sext i32 %253 to i64
  br label %260

260:                                              ; preds = %273, %258
  %261 = phi i64 [ %259, %258 ], [ %274, %273 ]
  %262 = getelementptr inbounds [8 x %struct.REF_FRAME_INFO], [8 x %struct.REF_FRAME_INFO]* %5, i64 0, i64 %261, i32 0
  %263 = load i32, i32* %262, align 8
  %264 = icmp eq i32 %263, %2
  %265 = icmp eq i32 %263, %3
  %266 = or i1 %264, %265
  br i1 %266, label %273, label %267

267:                                              ; preds = %260
  %268 = shl i64 %261, 32
  %269 = ashr exact i64 %268, 32
  %270 = getelementptr inbounds [8 x %struct.REF_FRAME_INFO], [8 x %struct.REF_FRAME_INFO]* %5, i64 0, i64 %269, i32 0
  %271 = load i32, i32* %270, align 8
  %272 = getelementptr inbounds i32, i32* %1, i64 6
  store i32 %271, i32* %272, align 4
  store i32 1, i32* %254, align 8
  br label %163

273:                                              ; preds = %260
  %274 = add nsw i64 %261, -1
  %275 = icmp sgt i64 %261, %125
  br i1 %275, label %260, label %152

276:                                              ; preds = %79
  %277 = icmp slt i32 %82, %13
  br i1 %277, label %280, label %84

278:                                              ; preds = %79
  %279 = add nuw nsw i32 %80, 1
  br label %280

280:                                              ; preds = %278, %276
  %281 = phi i32 [ %279, %278 ], [ %80, %276 ]
  %282 = getelementptr inbounds [8 x %struct.REF_FRAME_INFO], [8 x %struct.REF_FRAME_INFO]* %5, i64 0, i64 2, i32 2
  %283 = load i32, i32* %282, align 16
  %284 = icmp eq i32 %283, -1
  br i1 %284, label %287, label %285

285:                                              ; preds = %280
  %286 = icmp slt i32 %283, %13
  br i1 %286, label %289, label %84

287:                                              ; preds = %280
  %288 = add nuw nsw i32 %281, 1
  br label %289

289:                                              ; preds = %287, %285
  %290 = phi i32 [ %288, %287 ], [ %281, %285 ]
  %291 = getelementptr inbounds [8 x %struct.REF_FRAME_INFO], [8 x %struct.REF_FRAME_INFO]* %5, i64 0, i64 3, i32 2
  %292 = load i32, i32* %291, align 8
  %293 = icmp eq i32 %292, -1
  br i1 %293, label %296, label %294

294:                                              ; preds = %289
  %295 = icmp slt i32 %292, %13
  br i1 %295, label %298, label %84

296:                                              ; preds = %289
  %297 = add nuw nsw i32 %290, 1
  br label %298

298:                                              ; preds = %296, %294
  %299 = phi i32 [ %297, %296 ], [ %290, %294 ]
  %300 = getelementptr inbounds [8 x %struct.REF_FRAME_INFO], [8 x %struct.REF_FRAME_INFO]* %5, i64 0, i64 4, i32 2
  %301 = load i32, i32* %300, align 16
  %302 = icmp eq i32 %301, -1
  br i1 %302, label %305, label %303

303:                                              ; preds = %298
  %304 = icmp slt i32 %301, %13
  br i1 %304, label %307, label %84

305:                                              ; preds = %298
  %306 = add nuw nsw i32 %299, 1
  br label %307

307:                                              ; preds = %305, %303
  %308 = phi i32 [ %306, %305 ], [ %299, %303 ]
  %309 = getelementptr inbounds [8 x %struct.REF_FRAME_INFO], [8 x %struct.REF_FRAME_INFO]* %5, i64 0, i64 5, i32 2
  %310 = load i32, i32* %309, align 8
  %311 = icmp eq i32 %310, -1
  br i1 %311, label %314, label %312

312:                                              ; preds = %307
  %313 = icmp slt i32 %310, %13
  br i1 %313, label %316, label %84

314:                                              ; preds = %307
  %315 = add nuw nsw i32 %308, 1
  br label %316

316:                                              ; preds = %314, %312
  %317 = phi i32 [ %315, %314 ], [ %308, %312 ]
  %318 = getelementptr inbounds [8 x %struct.REF_FRAME_INFO], [8 x %struct.REF_FRAME_INFO]* %5, i64 0, i64 6, i32 2
  %319 = load i32, i32* %318, align 16
  %320 = icmp eq i32 %319, -1
  br i1 %320, label %323, label %321

321:                                              ; preds = %316
  %322 = icmp slt i32 %319, %13
  br i1 %322, label %325, label %84

323:                                              ; preds = %316
  %324 = add nuw nsw i32 %317, 1
  br label %325

325:                                              ; preds = %323, %321
  %326 = phi i32 [ %324, %323 ], [ %317, %321 ]
  %327 = getelementptr inbounds [8 x %struct.REF_FRAME_INFO], [8 x %struct.REF_FRAME_INFO]* %5, i64 0, i64 7, i32 2
  %328 = load i32, i32* %327, align 8
  %329 = icmp eq i32 %328, -1
  br i1 %329, label %332, label %330

330:                                              ; preds = %325
  %331 = icmp slt i32 %328, %13
  br i1 %331, label %116, label %84

332:                                              ; preds = %325
  %333 = add nuw nsw i32 %326, 1
  br label %107

334:                                              ; preds = %167
  %335 = getelementptr inbounds [5 x i8], [5 x i8]* @av1_set_frame_refs.ref_frame_list, i64 0, i64 %168
  %336 = load i8, i8* %335, align 1
  %337 = sext i8 %336 to i64
  %338 = add nsw i64 %337, -1
  %339 = getelementptr inbounds [7 x i32], [7 x i32]* %6, i64 0, i64 %338
  %340 = load i32, i32* %339, align 4
  %341 = icmp eq i32 %340, 1
  br i1 %341, label %345, label %342

342:                                              ; preds = %334
  %343 = load i32, i32* %155, align 8
  %344 = getelementptr inbounds i32, i32* %1, i64 %338
  store i32 %343, i32* %344, align 4
  store i32 1, i32* %339, align 4
  br label %345

345:                                              ; preds = %342, %334
  %346 = add nuw nsw i64 %154, 2
  %347 = icmp eq i64 %346, 5
  br i1 %347, label %163, label %348

348:                                              ; preds = %345
  %349 = getelementptr inbounds [5 x i8], [5 x i8]* @av1_set_frame_refs.ref_frame_list, i64 0, i64 %346
  %350 = load i8, i8* %349, align 1
  %351 = sext i8 %350 to i64
  %352 = add nsw i64 %351, -1
  %353 = getelementptr inbounds [7 x i32], [7 x i32]* %6, i64 0, i64 %352
  %354 = load i32, i32* %353, align 4
  %355 = icmp eq i32 %354, 1
  br i1 %355, label %359, label %356

356:                                              ; preds = %348
  %357 = load i32, i32* %155, align 8
  %358 = getelementptr inbounds i32, i32* %1, i64 %352
  store i32 %357, i32* %358, align 4
  store i32 1, i32* %353, align 4
  br label %359

359:                                              ; preds = %356, %348
  %360 = add nuw nsw i64 %154, 3
  %361 = icmp eq i64 %360, 5
  br i1 %361, label %163, label %362

362:                                              ; preds = %359
  %363 = getelementptr inbounds [5 x i8], [5 x i8]* @av1_set_frame_refs.ref_frame_list, i64 0, i64 %360
  %364 = load i8, i8* %363, align 1
  %365 = sext i8 %364 to i64
  %366 = add nsw i64 %365, -1
  %367 = getelementptr inbounds [7 x i32], [7 x i32]* %6, i64 0, i64 %366
  %368 = load i32, i32* %367, align 4
  %369 = icmp eq i32 %368, 1
  br i1 %369, label %373, label %370

370:                                              ; preds = %362
  %371 = load i32, i32* %155, align 8
  %372 = getelementptr inbounds i32, i32* %1, i64 %366
  store i32 %371, i32* %372, align 4
  store i32 1, i32* %367, align 4
  br label %373

373:                                              ; preds = %370, %362
  %374 = add nuw nsw i64 %154, 4
  %375 = icmp eq i64 %374, 5
  br i1 %375, label %163, label %376

376:                                              ; preds = %373
  %377 = getelementptr inbounds [5 x i8], [5 x i8]* @av1_set_frame_refs.ref_frame_list, i64 0, i64 %374
  %378 = load i8, i8* %377, align 1
  %379 = sext i8 %378 to i64
  %380 = add nsw i64 %379, -1
  %381 = getelementptr inbounds [7 x i32], [7 x i32]* %6, i64 0, i64 %380
  %382 = load i32, i32* %381, align 4
  %383 = icmp eq i32 %382, 1
  br i1 %383, label %163, label %384

384:                                              ; preds = %376
  %385 = load i32, i32* %155, align 8
  %386 = getelementptr inbounds i32, i32* %1, i64 %380
  store i32 %385, i32* %386, align 4
  store i32 1, i32* %381, align 4
  br label %163

387:                                              ; preds = %149
  %388 = getelementptr inbounds [8 x %struct.REF_FRAME_INFO], [8 x %struct.REF_FRAME_INFO]* %5, i64 0, i64 %150, i32 0
  %389 = load i32, i32* %388, align 8
  %390 = icmp eq i32 %389, %2
  %391 = icmp eq i32 %389, %3
  %392 = or i1 %390, %391
  br i1 %392, label %393, label %170

393:                                              ; preds = %387
  %394 = add nsw i64 %143, -2
  %395 = icmp sgt i64 %150, %125
  br i1 %395, label %396, label %152

396:                                              ; preds = %393
  %397 = getelementptr inbounds [8 x %struct.REF_FRAME_INFO], [8 x %struct.REF_FRAME_INFO]* %5, i64 0, i64 %394, i32 0
  %398 = load i32, i32* %397, align 8
  %399 = icmp eq i32 %398, %2
  %400 = icmp eq i32 %398, %3
  %401 = or i1 %399, %400
  br i1 %401, label %402, label %170

402:                                              ; preds = %396
  %403 = add nsw i64 %143, -3
  %404 = icmp sgt i64 %394, %125
  br i1 %404, label %405, label %152

405:                                              ; preds = %402
  %406 = getelementptr inbounds [8 x %struct.REF_FRAME_INFO], [8 x %struct.REF_FRAME_INFO]* %5, i64 0, i64 %403, i32 0
  %407 = load i32, i32* %406, align 8
  %408 = icmp eq i32 %407, %2
  %409 = icmp eq i32 %407, %3
  %410 = or i1 %408, %409
  br i1 %410, label %411, label %170

411:                                              ; preds = %405
  %412 = add nsw i64 %143, -4
  %413 = icmp sgt i64 %403, %125
  br i1 %413, label %414, label %152

414:                                              ; preds = %411
  %415 = getelementptr inbounds [8 x %struct.REF_FRAME_INFO], [8 x %struct.REF_FRAME_INFO]* %5, i64 0, i64 %412, i32 0
  %416 = load i32, i32* %415, align 8
  %417 = icmp eq i32 %416, %2
  %418 = icmp eq i32 %416, %3
  %419 = or i1 %417, %418
  br i1 %419, label %420, label %170

420:                                              ; preds = %414
  %421 = add nsw i64 %143, -5
  %422 = icmp sgt i64 %412, %125
  br i1 %422, label %423, label %152

423:                                              ; preds = %420
  %424 = getelementptr inbounds [8 x %struct.REF_FRAME_INFO], [8 x %struct.REF_FRAME_INFO]* %5, i64 0, i64 %421, i32 0
  %425 = load i32, i32* %424, align 8
  %426 = icmp eq i32 %425, %2
  %427 = icmp eq i32 %425, %3
  %428 = or i1 %426, %427
  br i1 %428, label %429, label %170

429:                                              ; preds = %423
  %430 = add nsw i64 %143, -6
  %431 = icmp sgt i64 %421, %125
  br i1 %431, label %432, label %152

432:                                              ; preds = %429
  %433 = getelementptr inbounds [8 x %struct.REF_FRAME_INFO], [8 x %struct.REF_FRAME_INFO]* %5, i64 0, i64 %430, i32 0
  %434 = load i32, i32* %433, align 8
  %435 = icmp eq i32 %434, %2
  %436 = icmp eq i32 %434, %3
  %437 = or i1 %435, %436
  br i1 %437, label %438, label %170

438:                                              ; preds = %432
  %439 = add nsw i64 %143, -7
  %440 = icmp sgt i64 %430, %125
  br i1 %440, label %441, label %152

441:                                              ; preds = %438
  %442 = getelementptr inbounds [8 x %struct.REF_FRAME_INFO], [8 x %struct.REF_FRAME_INFO]* %5, i64 0, i64 %439, i32 0
  %443 = load i32, i32* %442, align 8
  %444 = icmp eq i32 %443, %2
  %445 = icmp eq i32 %443, %3
  %446 = or i1 %444, %445
  br i1 %446, label %152, label %170

447:                                              ; preds = %135
  %448 = getelementptr inbounds [8 x %struct.REF_FRAME_INFO], [8 x %struct.REF_FRAME_INFO]* %5, i64 0, i64 %137, i32 0
  %449 = load i32, i32* %448, align 8
  %450 = icmp eq i32 %449, %2
  br i1 %450, label %451, label %452

451:                                              ; preds = %447
  store i32 %2, i32* %1, align 4
  br label %452

452:                                              ; preds = %451, %447
  %453 = phi i32 [ 1, %451 ], [ %132, %447 ]
  %454 = icmp eq i32 %449, %3
  br i1 %454, label %455, label %456

455:                                              ; preds = %452
  store i32 %3, i32* %123, align 4
  br label %456

456:                                              ; preds = %455, %452
  %457 = phi i32 [ %136, %452 ], [ 1, %455 ]
  %458 = add nsw i64 %125, 2
  %459 = icmp slt i64 %137, %126
  br i1 %459, label %460, label %139

460:                                              ; preds = %456
  %461 = getelementptr inbounds [8 x %struct.REF_FRAME_INFO], [8 x %struct.REF_FRAME_INFO]* %5, i64 0, i64 %458, i32 0
  %462 = load i32, i32* %461, align 8
  %463 = icmp eq i32 %462, %2
  br i1 %463, label %464, label %465

464:                                              ; preds = %460
  store i32 %2, i32* %1, align 4
  br label %465

465:                                              ; preds = %464, %460
  %466 = phi i32 [ 1, %464 ], [ %453, %460 ]
  %467 = icmp eq i32 %462, %3
  br i1 %467, label %468, label %469

468:                                              ; preds = %465
  store i32 %3, i32* %123, align 4
  br label %469

469:                                              ; preds = %468, %465
  %470 = phi i32 [ %457, %465 ], [ 1, %468 ]
  %471 = add nsw i64 %125, 3
  %472 = icmp slt i64 %458, %126
  br i1 %472, label %473, label %139

473:                                              ; preds = %469
  %474 = getelementptr inbounds [8 x %struct.REF_FRAME_INFO], [8 x %struct.REF_FRAME_INFO]* %5, i64 0, i64 %471, i32 0
  %475 = load i32, i32* %474, align 8
  %476 = icmp eq i32 %475, %2
  br i1 %476, label %477, label %478

477:                                              ; preds = %473
  store i32 %2, i32* %1, align 4
  br label %478

478:                                              ; preds = %477, %473
  %479 = phi i32 [ 1, %477 ], [ %466, %473 ]
  %480 = icmp eq i32 %475, %3
  br i1 %480, label %481, label %482

481:                                              ; preds = %478
  store i32 %3, i32* %123, align 4
  br label %482

482:                                              ; preds = %481, %478
  %483 = phi i32 [ %470, %478 ], [ 1, %481 ]
  %484 = add nsw i64 %125, 4
  %485 = icmp slt i64 %471, %126
  br i1 %485, label %486, label %139

486:                                              ; preds = %482
  %487 = getelementptr inbounds [8 x %struct.REF_FRAME_INFO], [8 x %struct.REF_FRAME_INFO]* %5, i64 0, i64 %484, i32 0
  %488 = load i32, i32* %487, align 8
  %489 = icmp eq i32 %488, %2
  br i1 %489, label %490, label %491

490:                                              ; preds = %486
  store i32 %2, i32* %1, align 4
  br label %491

491:                                              ; preds = %490, %486
  %492 = phi i32 [ 1, %490 ], [ %479, %486 ]
  %493 = icmp eq i32 %488, %3
  br i1 %493, label %494, label %495

494:                                              ; preds = %491
  store i32 %3, i32* %123, align 4
  br label %495

495:                                              ; preds = %494, %491
  %496 = phi i32 [ %483, %491 ], [ 1, %494 ]
  %497 = add nsw i64 %125, 5
  %498 = icmp slt i64 %484, %126
  br i1 %498, label %499, label %139

499:                                              ; preds = %495
  %500 = getelementptr inbounds [8 x %struct.REF_FRAME_INFO], [8 x %struct.REF_FRAME_INFO]* %5, i64 0, i64 %497, i32 0
  %501 = load i32, i32* %500, align 8
  %502 = icmp eq i32 %501, %2
  br i1 %502, label %503, label %504

503:                                              ; preds = %499
  store i32 %2, i32* %1, align 4
  br label %504

504:                                              ; preds = %503, %499
  %505 = phi i32 [ 1, %503 ], [ %492, %499 ]
  %506 = icmp eq i32 %501, %3
  br i1 %506, label %507, label %508

507:                                              ; preds = %504
  store i32 %3, i32* %123, align 4
  br label %508

508:                                              ; preds = %507, %504
  %509 = phi i32 [ %496, %504 ], [ 1, %507 ]
  %510 = add nsw i64 %125, 6
  %511 = icmp slt i64 %497, %126
  br i1 %511, label %512, label %139

512:                                              ; preds = %508
  %513 = getelementptr inbounds [8 x %struct.REF_FRAME_INFO], [8 x %struct.REF_FRAME_INFO]* %5, i64 0, i64 %510, i32 0
  %514 = load i32, i32* %513, align 8
  %515 = icmp eq i32 %514, %2
  br i1 %515, label %516, label %517

516:                                              ; preds = %512
  store i32 %2, i32* %1, align 4
  br label %517

517:                                              ; preds = %516, %512
  %518 = phi i32 [ 1, %516 ], [ %505, %512 ]
  %519 = icmp eq i32 %514, %3
  br i1 %519, label %520, label %521

520:                                              ; preds = %517
  store i32 %3, i32* %123, align 4
  br label %521

521:                                              ; preds = %520, %517
  %522 = phi i32 [ %509, %517 ], [ 1, %520 ]
  %523 = icmp slt i64 %510, %126
  br i1 %523, label %524, label %139

524:                                              ; preds = %521
  %525 = add nsw i64 %125, 7
  %526 = getelementptr inbounds [8 x %struct.REF_FRAME_INFO], [8 x %struct.REF_FRAME_INFO]* %5, i64 0, i64 %525, i32 0
  %527 = load i32, i32* %526, align 8
  %528 = icmp eq i32 %527, %2
  br i1 %528, label %529, label %530

529:                                              ; preds = %524
  store i32 %2, i32* %1, align 4
  br label %530

530:                                              ; preds = %529, %524
  %531 = phi i32 [ 1, %529 ], [ %518, %524 ]
  %532 = icmp eq i32 %527, %3
  br i1 %532, label %533, label %139

533:                                              ; preds = %530
  store i32 %3, i32* %123, align 4
  br label %139
}

declare void @aom_internal_error(%struct.aom_internal_error_info*, i32, i8*, ...) local_unnamed_addr #4

; Function Attrs: nofree
declare void @qsort(i8*, i64, i64, i32 (i8*, i8*)* nocapture) local_unnamed_addr #5

; Function Attrs: norecurse nounwind readonly ssp uwtable
define internal i32 @compare_ref_frame_info(i8* nocapture readonly, i8* nocapture readonly) #6 {
  %3 = getelementptr inbounds i8, i8* %0, i64 16
  %4 = bitcast i8* %3 to i32*
  %5 = load i32, i32* %4, align 8
  %6 = getelementptr inbounds i8, i8* %1, i64 16
  %7 = bitcast i8* %6 to i32*
  %8 = load i32, i32* %7, align 8
  %9 = sub nsw i32 %5, %8
  %10 = icmp eq i32 %9, 0
  br i1 %10, label %11, label %17

11:                                               ; preds = %2
  %12 = bitcast i8* %0 to i32*
  %13 = load i32, i32* %12, align 8
  %14 = bitcast i8* %1 to i32*
  %15 = load i32, i32* %14, align 8
  %16 = sub nsw i32 %13, %15
  br label %17

17:                                               ; preds = %2, %11
  %18 = phi i32 [ %16, %11 ], [ %9, %2 ]
  ret i32 %18
}

; Function Attrs: nounwind ssp uwtable
define internal fastcc i32 @add_tpl_ref_mv(%struct.AV1Common* nocapture readonly, %struct.macroblockd* nocapture readonly, i32, i32, i8 signext, i32, i32, %union.int_mv* nocapture readonly, i8* nocapture, %struct.candidate_mv* nocapture, i16* nocapture, i16* nocapture) unnamed_addr #2 {
  %13 = and i32 %2, 1
  %14 = xor i32 %13, 1
  %15 = add i32 %14, %2
  %16 = add i32 %15, %5
  %17 = getelementptr inbounds %struct.macroblockd, %struct.macroblockd* %1, i64 0, i32 5, i32 0
  %18 = load i32, i32* %17, align 4
  %19 = icmp slt i32 %16, %18
  br i1 %19, label %508, label %20

20:                                               ; preds = %12
  %21 = and i32 %3, 1
  %22 = xor i32 %21, 1
  %23 = add nsw i32 %22, %6
  %24 = add nsw i32 %23, %3
  %25 = getelementptr inbounds %struct.macroblockd, %struct.macroblockd* %1, i64 0, i32 5, i32 2
  %26 = load i32, i32* %25, align 4
  %27 = icmp slt i32 %24, %26
  br i1 %27, label %508, label %28

28:                                               ; preds = %20
  %29 = getelementptr inbounds %struct.macroblockd, %struct.macroblockd* %1, i64 0, i32 5, i32 1
  %30 = load i32, i32* %29, align 4
  %31 = icmp slt i32 %16, %30
  br i1 %31, label %32, label %508

32:                                               ; preds = %28
  %33 = getelementptr inbounds %struct.macroblockd, %struct.macroblockd* %1, i64 0, i32 5, i32 3
  %34 = load i32, i32* %33, align 4
  %35 = icmp slt i32 %24, %34
  br i1 %35, label %36, label %508

36:                                               ; preds = %32
  %37 = getelementptr inbounds %struct.AV1Common, %struct.AV1Common* %0, i64 0, i32 43
  %38 = load %struct.TPL_MV_REF*, %struct.TPL_MV_REF** %37, align 16
  %39 = ashr i32 %16, 1
  %40 = getelementptr inbounds %struct.AV1Common, %struct.AV1Common* %0, i64 0, i32 21, i32 11
  %41 = load i32, i32* %40, align 4
  %42 = ashr i32 %41, 1
  %43 = mul nsw i32 %42, %39
  %44 = sext i32 %43 to i64
  %45 = getelementptr inbounds %struct.TPL_MV_REF, %struct.TPL_MV_REF* %38, i64 %44
  %46 = ashr i32 %24, 1
  %47 = sext i32 %46 to i64
  %48 = getelementptr inbounds %struct.TPL_MV_REF, %struct.TPL_MV_REF* %45, i64 %47
  %49 = getelementptr inbounds %struct.TPL_MV_REF, %struct.TPL_MV_REF* %48, i64 0, i32 0, i32 0
  %50 = load i32, i32* %49, align 4
  %51 = icmp eq i32 %50, -2147450880
  br i1 %51, label %508, label %52

52:                                               ; preds = %36
  %53 = icmp sgt i8 %4, 7
  br i1 %53, label %54, label %61

54:                                               ; preds = %52
  %55 = sext i8 %4 to i64
  %56 = add nsw i64 %55, -8
  %57 = getelementptr inbounds [21 x [2 x i8]], [21 x [2 x i8]]* @ref_frame_map, i64 0, i64 %56, i64 0
  %58 = load i8, i8* %57, align 2
  %59 = getelementptr inbounds [21 x [2 x i8]], [21 x [2 x i8]]* @ref_frame_map, i64 0, i64 %56, i64 1
  %60 = load i8, i8* %59, align 1
  br label %61

61:                                               ; preds = %52, %54
  %62 = phi i8 [ %58, %54 ], [ %4, %52 ]
  %63 = phi i8 [ %60, %54 ], [ -1, %52 ]
  %64 = getelementptr inbounds %struct.AV1Common, %struct.AV1Common* %0, i64 0, i32 12
  %65 = load %struct.RefCntBuffer*, %struct.RefCntBuffer** %64, align 16
  %66 = getelementptr inbounds %struct.RefCntBuffer, %struct.RefCntBuffer* %65, i64 0, i32 1
  %67 = load i32, i32* %66, align 4
  %68 = add i8 %62, -1
  %69 = icmp ult i8 %68, 8
  br i1 %69, label %70, label %80

70:                                               ; preds = %61
  %71 = sext i8 %62 to i64
  %72 = add nsw i64 %71, -1
  %73 = getelementptr inbounds %struct.AV1Common, %struct.AV1Common* %0, i64 0, i32 13, i64 %72
  %74 = load i32, i32* %73, align 4
  %75 = icmp eq i32 %74, -1
  br i1 %75, label %80, label %76

76:                                               ; preds = %70
  %77 = sext i32 %74 to i64
  %78 = getelementptr inbounds %struct.AV1Common, %struct.AV1Common* %0, i64 0, i32 16, i64 %77
  %79 = load %struct.RefCntBuffer*, %struct.RefCntBuffer** %78, align 8
  br label %80

80:                                               ; preds = %61, %70, %76
  %81 = phi %struct.RefCntBuffer* [ %79, %76 ], [ null, %70 ], [ null, %61 ]
  %82 = getelementptr inbounds %struct.AV1Common, %struct.AV1Common* %0, i64 0, i32 35
  %83 = load %struct.SequenceHeader*, %struct.SequenceHeader** %82, align 16
  %84 = getelementptr inbounds %struct.SequenceHeader, %struct.SequenceHeader* %83, i64 0, i32 10, i32 0
  %85 = load i32, i32* %84, align 4
  %86 = icmp eq i32 %85, 0
  br i1 %86, label %98, label %87

87:                                               ; preds = %80
  %88 = getelementptr inbounds %struct.RefCntBuffer, %struct.RefCntBuffer* %81, i64 0, i32 1
  %89 = load i32, i32* %88, align 4
  %90 = getelementptr inbounds %struct.SequenceHeader, %struct.SequenceHeader* %83, i64 0, i32 10, i32 1
  %91 = load i32, i32* %90, align 4
  %92 = sub nsw i32 %67, %89
  %93 = shl i32 1, %91
  %94 = add nsw i32 %93, -1
  %95 = and i32 %94, %92
  %96 = and i32 %93, %92
  %97 = sub nsw i32 %95, %96
  br label %98

98:                                               ; preds = %80, %87
  %99 = phi i32 [ %97, %87 ], [ 0, %80 ]
  %100 = getelementptr inbounds %struct.AV1Common, %struct.AV1Common* %0, i64 0, i32 20, i32 1
  %101 = load i8, i8* %100, align 1, !range !2
  %102 = getelementptr inbounds %struct.AV1Common, %struct.AV1Common* %0, i64 0, i32 20, i32 2
  %103 = load i8, i8* %102, align 2, !range !2
  %104 = getelementptr inbounds %struct.TPL_MV_REF, %struct.TPL_MV_REF* %48, i64 0, i32 1
  %105 = load i8, i8* %104, align 4
  %106 = zext i8 %105 to i32
  %107 = icmp ult i32 %106, 31
  %108 = select i1 %107, i32 %106, i32 31
  %109 = icmp sgt i32 %99, 0
  %110 = icmp slt i32 %99, 31
  %111 = select i1 %110, i32 %99, i32 31
  %112 = icmp sgt i32 %99, -31
  %113 = select i1 %112, i32 %99, i32 -31
  %114 = select i1 %109, i32 %111, i32 %113
  %115 = shl i32 %50, 16
  %116 = ashr exact i32 %115, 16
  %117 = zext i32 %108 to i64
  %118 = getelementptr inbounds [32 x i32], [32 x i32]* @div_mult, i64 0, i64 %117
  %119 = load i32, i32* %118, align 4
  %120 = mul i32 %119, %114
  %121 = mul i32 %120, %116
  %122 = icmp slt i32 %121, 0
  br i1 %122, label %123, label %127

123:                                              ; preds = %98
  %124 = sub i32 8192, %121
  %125 = ashr i32 %124, 14
  %126 = sub nsw i32 0, %125
  br label %130

127:                                              ; preds = %98
  %128 = add nuw nsw i32 %121, 8192
  %129 = ashr i32 %128, 14
  br label %130

130:                                              ; preds = %127, %123
  %131 = phi i32 [ %126, %123 ], [ %129, %127 ]
  %132 = ashr i32 %50, 16
  %133 = mul i32 %120, %132
  %134 = icmp slt i32 %133, 0
  br i1 %134, label %135, label %139

135:                                              ; preds = %130
  %136 = sub i32 8192, %133
  %137 = ashr i32 %136, 14
  %138 = sub nsw i32 0, %137
  br label %142

139:                                              ; preds = %130
  %140 = add nuw nsw i32 %133, 8192
  %141 = ashr i32 %140, 14
  br label %142

142:                                              ; preds = %135, %139
  %143 = phi i32 [ %138, %135 ], [ %141, %139 ]
  %144 = icmp slt i32 %131, 16383
  %145 = select i1 %144, i32 %131, i32 16383
  %146 = icmp sgt i32 %145, -16383
  %147 = select i1 %146, i32 %145, i32 -16383
  %148 = trunc i32 %147 to i16
  %149 = icmp slt i32 %143, 16383
  %150 = select i1 %149, i32 %143, i32 16383
  %151 = icmp sgt i32 %150, -16383
  %152 = select i1 %151, i32 %150, i32 -16383
  %153 = trunc i32 %152 to i16
  %154 = icmp eq i8 %103, 0
  br i1 %154, label %188, label %155

155:                                              ; preds = %142
  %156 = srem i32 %147, 8
  %157 = icmp eq i32 %156, 0
  br i1 %157, label %171, label %158

158:                                              ; preds = %155
  %159 = trunc i32 %156 to i16
  %160 = sub nsw i16 %148, %159
  %161 = icmp slt i32 %156, 0
  %162 = sub nsw i32 0, %156
  %163 = select i1 %161, i32 %162, i32 %156
  %164 = icmp sgt i32 %163, 4
  br i1 %164, label %165, label %171

165:                                              ; preds = %158
  %166 = icmp sgt i32 %156, 0
  br i1 %166, label %167, label %169

167:                                              ; preds = %165
  %168 = add nsw i16 %160, 8
  br label %171

169:                                              ; preds = %165
  %170 = add nsw i16 %160, -8
  br label %171

171:                                              ; preds = %169, %167, %158, %155
  %172 = phi i16 [ %148, %155 ], [ %168, %167 ], [ %170, %169 ], [ %160, %158 ]
  %173 = srem i32 %152, 8
  %174 = icmp eq i32 %173, 0
  br i1 %174, label %205, label %175

175:                                              ; preds = %171
  %176 = trunc i32 %173 to i16
  %177 = sub nsw i16 %153, %176
  %178 = icmp slt i32 %173, 0
  %179 = sub nsw i32 0, %173
  %180 = select i1 %178, i32 %179, i32 %173
  %181 = icmp sgt i32 %180, 4
  br i1 %181, label %182, label %205

182:                                              ; preds = %175
  %183 = icmp sgt i32 %173, 0
  br i1 %183, label %184, label %186

184:                                              ; preds = %182
  %185 = add nsw i16 %177, 8
  br label %205

186:                                              ; preds = %182
  %187 = add nsw i16 %177, -8
  br label %205

188:                                              ; preds = %142
  %189 = icmp eq i8 %101, 0
  br i1 %189, label %190, label %205

190:                                              ; preds = %188
  %191 = and i16 %148, 1
  %192 = icmp eq i16 %191, 0
  br i1 %192, label %197, label %193

193:                                              ; preds = %190
  %194 = icmp sgt i16 %148, 0
  %195 = select i1 %194, i16 -1, i16 1
  %196 = add nsw i16 %195, %148
  br label %197

197:                                              ; preds = %193, %190
  %198 = phi i16 [ %148, %190 ], [ %196, %193 ]
  %199 = and i16 %153, 1
  %200 = icmp eq i16 %199, 0
  br i1 %200, label %205, label %201

201:                                              ; preds = %197
  %202 = icmp sgt i16 %153, 0
  %203 = select i1 %202, i16 -1, i16 1
  %204 = add nsw i16 %203, %153
  br label %205

205:                                              ; preds = %171, %175, %184, %186, %188, %197, %201
  %206 = phi i16 [ %153, %197 ], [ %204, %201 ], [ %153, %188 ], [ %153, %171 ], [ %185, %184 ], [ %187, %186 ], [ %177, %175 ]
  %207 = phi i16 [ %198, %197 ], [ %198, %201 ], [ %148, %188 ], [ %172, %171 ], [ %172, %184 ], [ %172, %186 ], [ %172, %175 ]
  %208 = icmp eq i8 %63, -1
  br i1 %208, label %209, label %281

209:                                              ; preds = %205
  %210 = or i32 %6, %5
  %211 = icmp eq i32 %210, 0
  br i1 %211, label %212, label %238

212:                                              ; preds = %209
  %213 = sext i16 %207 to i32
  %214 = bitcast %union.int_mv* %7 to i16*
  %215 = load i16, i16* %214, align 4
  %216 = sext i16 %215 to i32
  %217 = sub nsw i32 %213, %216
  %218 = icmp slt i32 %217, 0
  %219 = sub nsw i32 0, %217
  %220 = select i1 %218, i32 %219, i32 %217
  %221 = icmp sgt i32 %220, 15
  br i1 %221, label %233, label %222

222:                                              ; preds = %212
  %223 = bitcast %union.int_mv* %7 to %struct.mv*
  %224 = sext i16 %206 to i32
  %225 = getelementptr inbounds %struct.mv, %struct.mv* %223, i64 0, i32 1
  %226 = load i16, i16* %225, align 2
  %227 = sext i16 %226 to i32
  %228 = sub nsw i32 %224, %227
  %229 = icmp slt i32 %228, 0
  %230 = sub nsw i32 0, %228
  %231 = select i1 %229, i32 %230, i32 %228
  %232 = icmp sgt i32 %231, 15
  br i1 %232, label %233, label %238

233:                                              ; preds = %222, %212
  %234 = sext i8 %4 to i64
  %235 = getelementptr inbounds i16, i16* %11, i64 %234
  %236 = load i16, i16* %235, align 2
  %237 = or i16 %236, 8
  store i16 %237, i16* %235, align 2
  br label %238

238:                                              ; preds = %222, %233, %209
  %239 = load i8, i8* %8, align 1
  %240 = icmp eq i8 %239, 0
  br i1 %240, label %264, label %241

241:                                              ; preds = %238
  %242 = zext i16 %206 to i32
  %243 = shl nuw i32 %242, 16
  %244 = zext i16 %207 to i32
  %245 = or i32 %243, %244
  %246 = zext i8 %239 to i64
  br label %247

247:                                              ; preds = %241, %252
  %248 = phi i64 [ 0, %241 ], [ %253, %252 ]
  %249 = getelementptr inbounds %struct.candidate_mv, %struct.candidate_mv* %9, i64 %248, i32 0, i32 0
  %250 = load i32, i32* %249, align 4
  %251 = icmp eq i32 %245, %250
  br i1 %251, label %255, label %252

252:                                              ; preds = %247
  %253 = add nuw nsw i64 %248, 1
  %254 = icmp ult i64 %253, %246
  br i1 %254, label %247, label %262

255:                                              ; preds = %247
  %256 = trunc i64 %248 to i32
  %257 = and i64 %248, 4294967295
  %258 = getelementptr inbounds i16, i16* %10, i64 %257
  %259 = load i16, i16* %258, align 2
  %260 = add i16 %259, 2
  store i16 %260, i16* %258, align 2
  %261 = load i8, i8* %8, align 1
  br label %264

262:                                              ; preds = %252
  %263 = trunc i64 %253 to i32
  br label %264

264:                                              ; preds = %262, %238, %255
  %265 = phi i8 [ %261, %255 ], [ 0, %238 ], [ %239, %262 ]
  %266 = phi i32 [ %256, %255 ], [ 0, %238 ], [ %263, %262 ]
  %267 = zext i8 %265 to i32
  %268 = icmp eq i32 %266, %267
  %269 = icmp ult i8 %265, 8
  %270 = and i1 %269, %268
  br i1 %270, label %271, label %508

271:                                              ; preds = %264
  %272 = zext i16 %206 to i32
  %273 = shl nuw i32 %272, 16
  %274 = zext i16 %207 to i32
  %275 = or i32 %273, %274
  %276 = zext i32 %266 to i64
  %277 = getelementptr inbounds %struct.candidate_mv, %struct.candidate_mv* %9, i64 %276, i32 0, i32 0
  store i32 %275, i32* %277, align 4
  %278 = getelementptr inbounds i16, i16* %10, i64 %276
  store i16 2, i16* %278, align 2
  %279 = load i8, i8* %8, align 1
  %280 = add i8 %279, 1
  store i8 %280, i8* %8, align 1
  br label %508

281:                                              ; preds = %205
  %282 = add i8 %63, -1
  %283 = icmp ult i8 %282, 8
  br i1 %283, label %284, label %294

284:                                              ; preds = %281
  %285 = sext i8 %63 to i64
  %286 = add nsw i64 %285, -1
  %287 = getelementptr inbounds %struct.AV1Common, %struct.AV1Common* %0, i64 0, i32 13, i64 %286
  %288 = load i32, i32* %287, align 4
  %289 = icmp eq i32 %288, -1
  br i1 %289, label %294, label %290

290:                                              ; preds = %284
  %291 = sext i32 %288 to i64
  %292 = getelementptr inbounds %struct.AV1Common, %struct.AV1Common* %0, i64 0, i32 16, i64 %291
  %293 = load %struct.RefCntBuffer*, %struct.RefCntBuffer** %292, align 8
  br label %294

294:                                              ; preds = %281, %284, %290
  %295 = phi %struct.RefCntBuffer* [ %293, %290 ], [ null, %284 ], [ null, %281 ]
  br i1 %86, label %314, label %296

296:                                              ; preds = %294
  %297 = getelementptr inbounds %struct.RefCntBuffer, %struct.RefCntBuffer* %295, i64 0, i32 1
  %298 = load i32, i32* %297, align 4
  %299 = getelementptr inbounds %struct.SequenceHeader, %struct.SequenceHeader* %83, i64 0, i32 10, i32 1
  %300 = load i32, i32* %299, align 4
  %301 = sub nsw i32 %67, %298
  %302 = shl i32 1, %300
  %303 = add nsw i32 %302, -1
  %304 = and i32 %303, %301
  %305 = and i32 %302, %301
  %306 = sub nsw i32 %304, %305
  %307 = icmp slt i32 %306, 31
  br i1 %307, label %308, label %312

308:                                              ; preds = %296
  %309 = icmp sgt i32 %306, 0
  %310 = icmp sgt i32 %306, -31
  %311 = select i1 %310, i32 %306, i32 -31
  br i1 %309, label %312, label %314

312:                                              ; preds = %296, %308
  %313 = phi i32 [ %306, %308 ], [ 31, %296 ]
  br label %314

314:                                              ; preds = %308, %294, %312
  %315 = phi i32 [ %313, %312 ], [ 0, %294 ], [ %311, %308 ]
  %316 = mul i32 %315, %119
  %317 = mul i32 %316, %116
  %318 = icmp slt i32 %317, 0
  br i1 %318, label %319, label %323

319:                                              ; preds = %314
  %320 = sub i32 8192, %317
  %321 = ashr i32 %320, 14
  %322 = sub nsw i32 0, %321
  br label %326

323:                                              ; preds = %314
  %324 = add nuw nsw i32 %317, 8192
  %325 = ashr i32 %324, 14
  br label %326

326:                                              ; preds = %323, %319
  %327 = phi i32 [ %322, %319 ], [ %325, %323 ]
  %328 = mul i32 %316, %132
  %329 = icmp slt i32 %328, 0
  br i1 %329, label %330, label %334

330:                                              ; preds = %326
  %331 = sub i32 8192, %328
  %332 = ashr i32 %331, 14
  %333 = sub nsw i32 0, %332
  br label %337

334:                                              ; preds = %326
  %335 = add nuw nsw i32 %328, 8192
  %336 = ashr i32 %335, 14
  br label %337

337:                                              ; preds = %330, %334
  %338 = phi i32 [ %333, %330 ], [ %336, %334 ]
  %339 = icmp slt i32 %327, 16383
  %340 = select i1 %339, i32 %327, i32 16383
  %341 = icmp sgt i32 %340, -16383
  %342 = select i1 %341, i32 %340, i32 -16383
  %343 = trunc i32 %342 to i16
  %344 = icmp slt i32 %338, 16383
  %345 = select i1 %344, i32 %338, i32 16383
  %346 = icmp sgt i32 %345, -16383
  %347 = select i1 %346, i32 %345, i32 -16383
  %348 = trunc i32 %347 to i16
  br i1 %154, label %382, label %349

349:                                              ; preds = %337
  %350 = srem i32 %342, 8
  %351 = icmp eq i32 %350, 0
  br i1 %351, label %365, label %352

352:                                              ; preds = %349
  %353 = trunc i32 %350 to i16
  %354 = sub nsw i16 %343, %353
  %355 = icmp slt i32 %350, 0
  %356 = sub nsw i32 0, %350
  %357 = select i1 %355, i32 %356, i32 %350
  %358 = icmp sgt i32 %357, 4
  br i1 %358, label %359, label %365

359:                                              ; preds = %352
  %360 = icmp sgt i32 %350, 0
  br i1 %360, label %361, label %363

361:                                              ; preds = %359
  %362 = add nsw i16 %354, 8
  br label %365

363:                                              ; preds = %359
  %364 = add nsw i16 %354, -8
  br label %365

365:                                              ; preds = %363, %361, %352, %349
  %366 = phi i16 [ %343, %349 ], [ %362, %361 ], [ %364, %363 ], [ %354, %352 ]
  %367 = srem i32 %347, 8
  %368 = icmp eq i32 %367, 0
  br i1 %368, label %399, label %369

369:                                              ; preds = %365
  %370 = trunc i32 %367 to i16
  %371 = sub nsw i16 %348, %370
  %372 = icmp slt i32 %367, 0
  %373 = sub nsw i32 0, %367
  %374 = select i1 %372, i32 %373, i32 %367
  %375 = icmp sgt i32 %374, 4
  br i1 %375, label %376, label %399

376:                                              ; preds = %369
  %377 = icmp sgt i32 %367, 0
  br i1 %377, label %378, label %380

378:                                              ; preds = %376
  %379 = add nsw i16 %371, 8
  br label %399

380:                                              ; preds = %376
  %381 = add nsw i16 %371, -8
  br label %399

382:                                              ; preds = %337
  %383 = icmp eq i8 %101, 0
  br i1 %383, label %384, label %399

384:                                              ; preds = %382
  %385 = and i16 %343, 1
  %386 = icmp eq i16 %385, 0
  br i1 %386, label %391, label %387

387:                                              ; preds = %384
  %388 = icmp sgt i16 %343, 0
  %389 = select i1 %388, i16 -1, i16 1
  %390 = add nsw i16 %389, %343
  br label %391

391:                                              ; preds = %387, %384
  %392 = phi i16 [ %343, %384 ], [ %390, %387 ]
  %393 = and i16 %348, 1
  %394 = icmp eq i16 %393, 0
  br i1 %394, label %399, label %395

395:                                              ; preds = %391
  %396 = icmp sgt i16 %348, 0
  %397 = select i1 %396, i16 -1, i16 1
  %398 = add nsw i16 %397, %348
  br label %399

399:                                              ; preds = %365, %369, %378, %380, %382, %391, %395
  %400 = phi i16 [ %348, %391 ], [ %398, %395 ], [ %348, %382 ], [ %348, %365 ], [ %379, %378 ], [ %381, %380 ], [ %371, %369 ]
  %401 = phi i16 [ %392, %391 ], [ %392, %395 ], [ %343, %382 ], [ %366, %365 ], [ %366, %378 ], [ %366, %380 ], [ %366, %369 ]
  %402 = or i32 %6, %5
  %403 = icmp eq i32 %402, 0
  br i1 %403, label %404, label %452

404:                                              ; preds = %399
  %405 = sext i16 %207 to i32
  %406 = bitcast %union.int_mv* %7 to i16*
  %407 = load i16, i16* %406, align 4
  %408 = sext i16 %407 to i32
  %409 = sub nsw i32 %405, %408
  %410 = icmp slt i32 %409, 0
  %411 = sub nsw i32 0, %409
  %412 = select i1 %410, i32 %411, i32 %409
  %413 = icmp sgt i32 %412, 15
  br i1 %413, label %447, label %414

414:                                              ; preds = %404
  %415 = bitcast %union.int_mv* %7 to %struct.mv*
  %416 = sext i16 %206 to i32
  %417 = getelementptr inbounds %struct.mv, %struct.mv* %415, i64 0, i32 1
  %418 = load i16, i16* %417, align 2
  %419 = sext i16 %418 to i32
  %420 = sub nsw i32 %416, %419
  %421 = icmp slt i32 %420, 0
  %422 = sub nsw i32 0, %420
  %423 = select i1 %421, i32 %422, i32 %420
  %424 = icmp sgt i32 %423, 15
  br i1 %424, label %447, label %425

425:                                              ; preds = %414
  %426 = sext i16 %401 to i32
  %427 = getelementptr inbounds %union.int_mv, %union.int_mv* %7, i64 1
  %428 = bitcast %union.int_mv* %427 to i16*
  %429 = load i16, i16* %428, align 4
  %430 = sext i16 %429 to i32
  %431 = sub nsw i32 %426, %430
  %432 = icmp slt i32 %431, 0
  %433 = sub nsw i32 0, %431
  %434 = select i1 %432, i32 %433, i32 %431
  %435 = icmp sgt i32 %434, 15
  br i1 %435, label %447, label %436

436:                                              ; preds = %425
  %437 = bitcast %union.int_mv* %427 to %struct.mv*
  %438 = sext i16 %400 to i32
  %439 = getelementptr inbounds %struct.mv, %struct.mv* %437, i64 0, i32 1
  %440 = load i16, i16* %439, align 2
  %441 = sext i16 %440 to i32
  %442 = sub nsw i32 %438, %441
  %443 = icmp slt i32 %442, 0
  %444 = sub nsw i32 0, %442
  %445 = select i1 %443, i32 %444, i32 %442
  %446 = icmp sgt i32 %445, 15
  br i1 %446, label %447, label %452

447:                                              ; preds = %436, %425, %414, %404
  %448 = sext i8 %4 to i64
  %449 = getelementptr inbounds i16, i16* %11, i64 %448
  %450 = load i16, i16* %449, align 2
  %451 = or i16 %450, 8
  store i16 %451, i16* %449, align 2
  br label %452

452:                                              ; preds = %436, %447, %399
  %453 = load i8, i8* %8, align 1
  %454 = icmp eq i8 %453, 0
  br i1 %454, label %486, label %455

455:                                              ; preds = %452
  %456 = zext i16 %206 to i32
  %457 = shl nuw i32 %456, 16
  %458 = zext i16 %207 to i32
  %459 = or i32 %457, %458
  %460 = zext i16 %400 to i32
  %461 = shl nuw i32 %460, 16
  %462 = zext i16 %401 to i32
  %463 = or i32 %461, %462
  %464 = zext i8 %453 to i64
  br label %465

465:                                              ; preds = %455, %474
  %466 = phi i64 [ 0, %455 ], [ %475, %474 ]
  %467 = getelementptr inbounds %struct.candidate_mv, %struct.candidate_mv* %9, i64 %466, i32 0, i32 0
  %468 = load i32, i32* %467, align 4
  %469 = icmp eq i32 %459, %468
  br i1 %469, label %470, label %474

470:                                              ; preds = %465
  %471 = getelementptr inbounds %struct.candidate_mv, %struct.candidate_mv* %9, i64 %466, i32 1, i32 0
  %472 = load i32, i32* %471, align 4
  %473 = icmp eq i32 %463, %472
  br i1 %473, label %477, label %474

474:                                              ; preds = %465, %470
  %475 = add nuw nsw i64 %466, 1
  %476 = icmp ult i64 %475, %464
  br i1 %476, label %465, label %484

477:                                              ; preds = %470
  %478 = trunc i64 %466 to i32
  %479 = and i64 %466, 4294967295
  %480 = getelementptr inbounds i16, i16* %10, i64 %479
  %481 = load i16, i16* %480, align 2
  %482 = add i16 %481, 2
  store i16 %482, i16* %480, align 2
  %483 = load i8, i8* %8, align 1
  br label %486

484:                                              ; preds = %474
  %485 = trunc i64 %475 to i32
  br label %486

486:                                              ; preds = %484, %452, %477
  %487 = phi i8 [ %483, %477 ], [ 0, %452 ], [ %453, %484 ]
  %488 = phi i32 [ %478, %477 ], [ 0, %452 ], [ %485, %484 ]
  %489 = zext i8 %487 to i32
  %490 = icmp eq i32 %488, %489
  %491 = icmp ult i8 %487, 8
  %492 = and i1 %491, %490
  br i1 %492, label %493, label %508

493:                                              ; preds = %486
  %494 = zext i16 %206 to i32
  %495 = shl nuw i32 %494, 16
  %496 = zext i16 %207 to i32
  %497 = or i32 %495, %496
  %498 = zext i32 %488 to i64
  %499 = getelementptr inbounds %struct.candidate_mv, %struct.candidate_mv* %9, i64 %498, i32 0, i32 0
  store i32 %497, i32* %499, align 4
  %500 = zext i16 %400 to i32
  %501 = shl nuw i32 %500, 16
  %502 = zext i16 %401 to i32
  %503 = or i32 %501, %502
  %504 = getelementptr inbounds %struct.candidate_mv, %struct.candidate_mv* %9, i64 %498, i32 1, i32 0
  store i32 %503, i32* %504, align 4
  %505 = getelementptr inbounds i16, i16* %10, i64 %498
  store i16 2, i16* %505, align 2
  %506 = load i8, i8* %8, align 1
  %507 = add i8 %506, 1
  store i8 %507, i8* %8, align 1
  br label %508

508:                                              ; preds = %32, %12, %20, %28, %271, %264, %493, %486, %36
  %509 = phi i32 [ 0, %32 ], [ 0, %36 ], [ 1, %486 ], [ 1, %493 ], [ 1, %264 ], [ 1, %271 ], [ 0, %28 ], [ 0, %20 ], [ 0, %12 ]
  ret i32 %509
}

; Function Attrs: inlinehint nofree norecurse nounwind ssp uwtable
define internal fastcc void @process_compound_ref_mv_candidate(%struct.MB_MODE_INFO* nocapture readonly, %struct.AV1Common* nocapture readonly, i8* nocapture readonly, [2 x %union.int_mv]* nocapture, i32* nocapture, [2 x %union.int_mv]* nocapture, i32* nocapture) unnamed_addr #7 {
  %8 = getelementptr inbounds %struct.MB_MODE_INFO, %struct.MB_MODE_INFO* %0, i64 0, i32 6, i64 0
  %9 = load i8, i8* %8, align 1
  %10 = icmp sgt i8 %9, 0
  %11 = getelementptr inbounds %struct.MB_MODE_INFO, %struct.MB_MODE_INFO* %0, i64 0, i32 5, i64 0
  %12 = bitcast %union.int_mv* %11 to i8*
  %13 = bitcast %union.int_mv* %11 to i16*
  %14 = getelementptr inbounds i8, i8* %12, i64 2
  %15 = bitcast i8* %14 to i16*
  %16 = sext i8 %9 to i64
  %17 = getelementptr inbounds %struct.AV1Common, %struct.AV1Common* %1, i64 0, i32 45, i64 %16
  %18 = getelementptr inbounds %struct.MB_MODE_INFO, %struct.MB_MODE_INFO* %0, i64 0, i32 5, i64 0, i32 0
  %19 = load i8, i8* %2, align 1
  %20 = icmp eq i8 %9, %19
  br i1 %20, label %21, label %30

21:                                               ; preds = %7
  %22 = load i32, i32* %4, align 4
  %23 = icmp slt i32 %22, 2
  br i1 %23, label %24, label %30

24:                                               ; preds = %21
  %25 = sext i32 %22 to i64
  %26 = getelementptr inbounds [2 x %union.int_mv], [2 x %union.int_mv]* %3, i64 0, i64 %25, i32 0
  %27 = load i32, i32* %18, align 4
  store i32 %27, i32* %26, align 4
  %28 = load i32, i32* %4, align 4
  %29 = add nsw i32 %28, 1
  store i32 %29, i32* %4, align 4
  br label %54

30:                                               ; preds = %21, %7
  br i1 %10, label %31, label %54

31:                                               ; preds = %30
  %32 = load i32, i32* %6, align 4
  %33 = icmp slt i32 %32, 2
  br i1 %33, label %34, label %54

34:                                               ; preds = %31
  %35 = load i16, i16* %13, align 4
  %36 = load i16, i16* %15, align 2
  %37 = load i32, i32* %17, align 4
  %38 = sext i8 %19 to i64
  %39 = getelementptr inbounds %struct.AV1Common, %struct.AV1Common* %1, i64 0, i32 45, i64 %38
  %40 = load i32, i32* %39, align 4
  %41 = icmp eq i32 %37, %40
  %42 = sub i16 0, %35
  %43 = sub i16 0, %36
  %44 = select i1 %41, i16 %36, i16 %43
  %45 = select i1 %41, i16 %35, i16 %42
  %46 = sext i32 %32 to i64
  %47 = getelementptr inbounds [2 x %union.int_mv], [2 x %union.int_mv]* %5, i64 0, i64 %46
  %48 = bitcast %union.int_mv* %47 to i8*
  %49 = bitcast %union.int_mv* %47 to i16*
  store i16 %45, i16* %49, align 4
  %50 = getelementptr inbounds i8, i8* %48, i64 2
  %51 = bitcast i8* %50 to i16*
  store i16 %44, i16* %51, align 2
  %52 = load i32, i32* %6, align 4
  %53 = add nsw i32 %52, 1
  store i32 %53, i32* %6, align 4
  br label %54

54:                                               ; preds = %24, %34, %31, %30
  %55 = getelementptr inbounds i8, i8* %2, i64 1
  %56 = load i8, i8* %55, align 1
  %57 = icmp eq i8 %9, %56
  br i1 %57, label %58, label %62

58:                                               ; preds = %54
  %59 = getelementptr inbounds i32, i32* %4, i64 1
  %60 = load i32, i32* %59, align 4
  %61 = icmp slt i32 %60, 2
  br i1 %61, label %87, label %62

62:                                               ; preds = %58, %54
  br i1 %10, label %63, label %93

63:                                               ; preds = %62
  %64 = getelementptr inbounds i32, i32* %6, i64 1
  %65 = load i32, i32* %64, align 4
  %66 = icmp slt i32 %65, 2
  br i1 %66, label %67, label %93

67:                                               ; preds = %63
  %68 = load i16, i16* %13, align 4
  %69 = load i16, i16* %15, align 2
  %70 = load i32, i32* %17, align 4
  %71 = sext i8 %56 to i64
  %72 = getelementptr inbounds %struct.AV1Common, %struct.AV1Common* %1, i64 0, i32 45, i64 %71
  %73 = load i32, i32* %72, align 4
  %74 = icmp eq i32 %70, %73
  %75 = sub i16 0, %68
  %76 = sub i16 0, %69
  %77 = select i1 %74, i16 %69, i16 %76
  %78 = select i1 %74, i16 %68, i16 %75
  %79 = sext i32 %65 to i64
  %80 = getelementptr inbounds [2 x %union.int_mv], [2 x %union.int_mv]* %5, i64 1, i64 %79
  %81 = bitcast %union.int_mv* %80 to i8*
  %82 = bitcast %union.int_mv* %80 to i16*
  store i16 %78, i16* %82, align 4
  %83 = getelementptr inbounds i8, i8* %81, i64 2
  %84 = bitcast i8* %83 to i16*
  store i16 %77, i16* %84, align 2
  %85 = load i32, i32* %64, align 4
  %86 = add nsw i32 %85, 1
  store i32 %86, i32* %64, align 4
  br label %93

87:                                               ; preds = %58
  %88 = sext i32 %60 to i64
  %89 = getelementptr inbounds [2 x %union.int_mv], [2 x %union.int_mv]* %3, i64 1, i64 %88, i32 0
  %90 = load i32, i32* %18, align 4
  store i32 %90, i32* %89, align 4
  %91 = load i32, i32* %59, align 4
  %92 = add nsw i32 %91, 1
  store i32 %92, i32* %59, align 4
  br label %93

93:                                               ; preds = %87, %67, %63, %62
  %94 = getelementptr inbounds %struct.MB_MODE_INFO, %struct.MB_MODE_INFO* %0, i64 0, i32 6, i64 1
  %95 = load i8, i8* %94, align 1
  %96 = icmp sgt i8 %95, 0
  %97 = getelementptr inbounds %struct.MB_MODE_INFO, %struct.MB_MODE_INFO* %0, i64 0, i32 5, i64 1
  %98 = bitcast %union.int_mv* %97 to i8*
  %99 = bitcast %union.int_mv* %97 to i16*
  %100 = getelementptr inbounds i8, i8* %98, i64 2
  %101 = bitcast i8* %100 to i16*
  %102 = sext i8 %95 to i64
  %103 = getelementptr inbounds %struct.AV1Common, %struct.AV1Common* %1, i64 0, i32 45, i64 %102
  %104 = getelementptr inbounds %struct.MB_MODE_INFO, %struct.MB_MODE_INFO* %0, i64 0, i32 5, i64 1, i32 0
  %105 = load i8, i8* %2, align 1
  %106 = icmp eq i8 %95, %105
  br i1 %106, label %107, label %110

107:                                              ; preds = %93
  %108 = load i32, i32* %4, align 4
  %109 = icmp slt i32 %108, 2
  br i1 %109, label %134, label %110

110:                                              ; preds = %107, %93
  br i1 %96, label %111, label %140

111:                                              ; preds = %110
  %112 = load i32, i32* %6, align 4
  %113 = icmp slt i32 %112, 2
  br i1 %113, label %114, label %140

114:                                              ; preds = %111
  %115 = load i16, i16* %99, align 4
  %116 = load i16, i16* %101, align 2
  %117 = load i32, i32* %103, align 4
  %118 = sext i8 %105 to i64
  %119 = getelementptr inbounds %struct.AV1Common, %struct.AV1Common* %1, i64 0, i32 45, i64 %118
  %120 = load i32, i32* %119, align 4
  %121 = icmp eq i32 %117, %120
  %122 = sub i16 0, %115
  %123 = sub i16 0, %116
  %124 = select i1 %121, i16 %116, i16 %123
  %125 = select i1 %121, i16 %115, i16 %122
  %126 = sext i32 %112 to i64
  %127 = getelementptr inbounds [2 x %union.int_mv], [2 x %union.int_mv]* %5, i64 0, i64 %126
  %128 = bitcast %union.int_mv* %127 to i8*
  %129 = bitcast %union.int_mv* %127 to i16*
  store i16 %125, i16* %129, align 4
  %130 = getelementptr inbounds i8, i8* %128, i64 2
  %131 = bitcast i8* %130 to i16*
  store i16 %124, i16* %131, align 2
  %132 = load i32, i32* %6, align 4
  %133 = add nsw i32 %132, 1
  store i32 %133, i32* %6, align 4
  br label %140

134:                                              ; preds = %107
  %135 = sext i32 %108 to i64
  %136 = getelementptr inbounds [2 x %union.int_mv], [2 x %union.int_mv]* %3, i64 0, i64 %135, i32 0
  %137 = load i32, i32* %104, align 4
  store i32 %137, i32* %136, align 4
  %138 = load i32, i32* %4, align 4
  %139 = add nsw i32 %138, 1
  store i32 %139, i32* %4, align 4
  br label %140

140:                                              ; preds = %134, %114, %111, %110
  %141 = load i8, i8* %55, align 1
  %142 = icmp eq i8 %95, %141
  br i1 %142, label %143, label %147

143:                                              ; preds = %140
  %144 = getelementptr inbounds i32, i32* %4, i64 1
  %145 = load i32, i32* %144, align 4
  %146 = icmp slt i32 %145, 2
  br i1 %146, label %172, label %147

147:                                              ; preds = %143, %140
  br i1 %96, label %148, label %178

148:                                              ; preds = %147
  %149 = getelementptr inbounds i32, i32* %6, i64 1
  %150 = load i32, i32* %149, align 4
  %151 = icmp slt i32 %150, 2
  br i1 %151, label %152, label %178

152:                                              ; preds = %148
  %153 = load i16, i16* %99, align 4
  %154 = load i16, i16* %101, align 2
  %155 = load i32, i32* %103, align 4
  %156 = sext i8 %141 to i64
  %157 = getelementptr inbounds %struct.AV1Common, %struct.AV1Common* %1, i64 0, i32 45, i64 %156
  %158 = load i32, i32* %157, align 4
  %159 = icmp eq i32 %155, %158
  %160 = sub i16 0, %153
  %161 = sub i16 0, %154
  %162 = select i1 %159, i16 %154, i16 %161
  %163 = select i1 %159, i16 %153, i16 %160
  %164 = sext i32 %150 to i64
  %165 = getelementptr inbounds [2 x %union.int_mv], [2 x %union.int_mv]* %5, i64 1, i64 %164
  %166 = bitcast %union.int_mv* %165 to i8*
  %167 = bitcast %union.int_mv* %165 to i16*
  store i16 %163, i16* %167, align 4
  %168 = getelementptr inbounds i8, i8* %166, i64 2
  %169 = bitcast i8* %168 to i16*
  store i16 %162, i16* %169, align 2
  %170 = load i32, i32* %149, align 4
  %171 = add nsw i32 %170, 1
  store i32 %171, i32* %149, align 4
  br label %178

172:                                              ; preds = %143
  %173 = sext i32 %145 to i64
  %174 = getelementptr inbounds [2 x %union.int_mv], [2 x %union.int_mv]* %3, i64 1, i64 %173, i32 0
  %175 = load i32, i32* %104, align 4
  store i32 %175, i32* %174, align 4
  %176 = load i32, i32* %144, align 4
  %177 = add nsw i32 %176, 1
  store i32 %177, i32* %144, align 4
  br label %178

178:                                              ; preds = %172, %152, %148, %147
  ret void
}

; Function Attrs: inlinehint nounwind ssp uwtable
define internal fastcc void @add_ref_mv_candidate(%struct.MB_MODE_INFO* nocapture readonly, i8* nocapture readonly, i8* nocapture, i8* nocapture, i8* nocapture, %struct.candidate_mv* nocapture, i16* nocapture, %union.int_mv* nocapture readonly, %struct.WarpedMotionParams* nocapture readonly, i16 zeroext) unnamed_addr #8 {
  %11 = getelementptr inbounds %struct.MB_MODE_INFO, %struct.MB_MODE_INFO* %0, i64 0, i32 28
  %12 = load i16, i16* %11, align 1
  %13 = trunc i16 %12 to i8
  %14 = icmp sgt i8 %13, -1
  br i1 %14, label %15, label %19

15:                                               ; preds = %10
  %16 = getelementptr inbounds %struct.MB_MODE_INFO, %struct.MB_MODE_INFO* %0, i64 0, i32 6, i64 0
  %17 = load i8, i8* %16, align 8
  %18 = icmp slt i8 %17, 1
  br i1 %18, label %181, label %19

19:                                               ; preds = %10, %15
  %20 = getelementptr inbounds i8, i8* %1, i64 1
  %21 = load i8, i8* %20, align 1
  %22 = icmp eq i8 %21, -1
  br i1 %22, label %23, label %101

23:                                               ; preds = %19
  %24 = getelementptr inbounds %struct.MB_MODE_INFO, %struct.MB_MODE_INFO* %0, i64 0, i32 2
  %25 = getelementptr inbounds %struct.MB_MODE_INFO, %struct.MB_MODE_INFO* %0, i64 0, i32 0
  %26 = getelementptr inbounds %union.int_mv, %union.int_mv* %7, i64 0, i32 0
  %27 = getelementptr inbounds %struct.MB_MODE_INFO, %struct.MB_MODE_INFO* %0, i64 0, i32 6, i64 0
  %28 = load i8, i8* %27, align 1
  %29 = load i8, i8* %1, align 1
  %30 = icmp eq i8 %28, %29
  br i1 %30, label %31, label %96

31:                                               ; preds = %23
  %32 = load i8, i8* %24, align 2
  %33 = load i8, i8* %25, align 8
  %34 = zext i8 %33 to i64
  %35 = getelementptr inbounds [22 x i8], [22 x i8]* @block_size_wide, i64 0, i64 %34
  %36 = load i8, i8* %35, align 1
  %37 = getelementptr inbounds [22 x i8], [22 x i8]* @block_size_high, i64 0, i64 %34
  %38 = load i8, i8* %37, align 1
  switch i8 %32, label %48 [
    i8 15, label %39
    i8 23, label %39
  ]

39:                                               ; preds = %31, %31
  %40 = sext i8 %28 to i64
  %41 = getelementptr inbounds %struct.WarpedMotionParams, %struct.WarpedMotionParams* %8, i64 %40, i32 5
  %42 = load i8, i8* %41, align 4
  %43 = icmp ult i8 %36, %38
  %44 = select i1 %43, i8 %36, i8 %38
  %45 = icmp ult i8 %44, 8
  %46 = icmp ult i8 %42, 2
  %47 = or i1 %45, %46
  br i1 %47, label %48, label %50

48:                                               ; preds = %31, %39
  %49 = getelementptr inbounds %struct.MB_MODE_INFO, %struct.MB_MODE_INFO* %0, i64 0, i32 5, i64 0, i32 0
  br label %50

50:                                               ; preds = %39, %48
  %51 = phi i32* [ %49, %48 ], [ %26, %39 ]
  %52 = load i32, i32* %51, align 4
  %53 = load i8, i8* %2, align 1
  %54 = icmp eq i8 %53, 0
  br i1 %54, label %74, label %55

55:                                               ; preds = %50
  %56 = zext i8 %53 to i64
  br label %57

57:                                               ; preds = %55, %69
  %58 = phi i64 [ 0, %55 ], [ %70, %69 ]
  %59 = getelementptr inbounds %struct.candidate_mv, %struct.candidate_mv* %5, i64 %58, i32 0, i32 0
  %60 = load i32, i32* %59, align 4
  %61 = icmp eq i32 %60, %52
  br i1 %61, label %62, label %69

62:                                               ; preds = %57
  %63 = trunc i64 %58 to i32
  %64 = and i64 %58, 4294967295
  %65 = getelementptr inbounds i16, i16* %6, i64 %64
  %66 = load i16, i16* %65, align 2
  %67 = add i16 %66, %9
  store i16 %67, i16* %65, align 2
  %68 = load i8, i8* %2, align 1
  br label %74

69:                                               ; preds = %57
  %70 = add nuw nsw i64 %58, 1
  %71 = icmp ult i64 %70, %56
  br i1 %71, label %57, label %72

72:                                               ; preds = %69
  %73 = trunc i64 %70 to i32
  br label %74

74:                                               ; preds = %72, %50, %62
  %75 = phi i8 [ %68, %62 ], [ 0, %50 ], [ %53, %72 ]
  %76 = phi i32 [ %63, %62 ], [ 0, %50 ], [ %73, %72 ]
  %77 = zext i8 %75 to i32
  %78 = icmp eq i32 %76, %77
  %79 = icmp ult i8 %75, 8
  %80 = and i1 %79, %78
  br i1 %80, label %81, label %87

81:                                               ; preds = %74
  %82 = zext i32 %76 to i64
  %83 = getelementptr inbounds %struct.candidate_mv, %struct.candidate_mv* %5, i64 %82, i32 0, i32 0
  store i32 %52, i32* %83, align 4
  %84 = getelementptr inbounds i16, i16* %6, i64 %82
  store i16 %9, i16* %84, align 2
  %85 = load i8, i8* %2, align 1
  %86 = add i8 %85, 1
  store i8 %86, i8* %2, align 1
  br label %87

87:                                               ; preds = %81, %74
  %88 = load i8, i8* %24, align 2
  switch i8 %88, label %92 [
    i8 16, label %89
    i8 24, label %89
    i8 19, label %89
    i8 20, label %89
    i8 21, label %89
    i8 22, label %89
  ]

89:                                               ; preds = %87, %87, %87, %87, %87, %87
  %90 = load i8, i8* %4, align 1
  %91 = add i8 %90, 1
  store i8 %91, i8* %4, align 1
  br label %92

92:                                               ; preds = %87, %89
  %93 = load i8, i8* %3, align 1
  %94 = add i8 %93, 1
  store i8 %94, i8* %3, align 1
  %95 = load i8, i8* %1, align 1
  br label %96

96:                                               ; preds = %23, %92
  %97 = phi i8 [ %29, %23 ], [ %95, %92 ]
  %98 = getelementptr inbounds %struct.MB_MODE_INFO, %struct.MB_MODE_INFO* %0, i64 0, i32 6, i64 1
  %99 = load i8, i8* %98, align 1
  %100 = icmp eq i8 %99, %97
  br i1 %100, label %182, label %181

101:                                              ; preds = %19
  %102 = getelementptr inbounds %struct.MB_MODE_INFO, %struct.MB_MODE_INFO* %0, i64 0, i32 6, i64 0
  %103 = load i8, i8* %102, align 8
  %104 = load i8, i8* %1, align 1
  %105 = icmp eq i8 %103, %104
  br i1 %105, label %106, label %181

106:                                              ; preds = %101
  %107 = getelementptr inbounds %struct.MB_MODE_INFO, %struct.MB_MODE_INFO* %0, i64 0, i32 6, i64 1
  %108 = load i8, i8* %107, align 1
  %109 = icmp eq i8 %108, %21
  br i1 %109, label %110, label %181

110:                                              ; preds = %106
  %111 = getelementptr inbounds %struct.MB_MODE_INFO, %struct.MB_MODE_INFO* %0, i64 0, i32 2
  %112 = load i8, i8* %111, align 2
  %113 = getelementptr inbounds %struct.MB_MODE_INFO, %struct.MB_MODE_INFO* %0, i64 0, i32 0
  %114 = load i8, i8* %113, align 8
  %115 = zext i8 %114 to i64
  %116 = getelementptr inbounds [22 x i8], [22 x i8]* @block_size_wide, i64 0, i64 %115
  %117 = load i8, i8* %116, align 1
  %118 = getelementptr inbounds [22 x i8], [22 x i8]* @block_size_high, i64 0, i64 %115
  %119 = load i8, i8* %118, align 1
  %120 = icmp ult i8 %117, %119
  %121 = select i1 %120, i8 %117, i8 %119
  %122 = icmp ult i8 %121, 8
  switch i8 %112, label %133 [
    i8 15, label %125
    i8 23, label %125
  ]

123:                                              ; preds = %256
  %124 = zext i8 %259 to i64
  br label %138

125:                                              ; preds = %110, %110
  %126 = sext i8 %103 to i64
  %127 = getelementptr inbounds %struct.WarpedMotionParams, %struct.WarpedMotionParams* %8, i64 %126, i32 5
  %128 = load i8, i8* %127, align 4
  %129 = icmp ult i8 %128, 2
  %130 = or i1 %122, %129
  br i1 %130, label %133, label %131

131:                                              ; preds = %125
  %132 = getelementptr inbounds %union.int_mv, %union.int_mv* %7, i64 0, i32 0
  br label %135

133:                                              ; preds = %110, %125
  %134 = getelementptr inbounds %struct.MB_MODE_INFO, %struct.MB_MODE_INFO* %0, i64 0, i32 5, i64 0, i32 0
  br label %135

135:                                              ; preds = %131, %133
  %136 = phi i32* [ %132, %131 ], [ %134, %133 ]
  %137 = load i32, i32* %136, align 4
  switch i8 %112, label %254 [
    i8 15, label %246
    i8 23, label %246
  ]

138:                                              ; preds = %123, %154
  %139 = phi i64 [ 0, %123 ], [ %155, %154 ]
  %140 = getelementptr inbounds %struct.candidate_mv, %struct.candidate_mv* %5, i64 %139, i32 0, i32 0
  %141 = load i32, i32* %140, align 4
  %142 = icmp eq i32 %141, %137
  br i1 %142, label %143, label %154

143:                                              ; preds = %138
  %144 = getelementptr inbounds %struct.candidate_mv, %struct.candidate_mv* %5, i64 %139, i32 1, i32 0
  %145 = load i32, i32* %144, align 4
  %146 = icmp eq i32 %145, %258
  br i1 %146, label %147, label %154

147:                                              ; preds = %143
  %148 = trunc i64 %139 to i32
  %149 = and i64 %139, 4294967295
  %150 = getelementptr inbounds i16, i16* %6, i64 %149
  %151 = load i16, i16* %150, align 2
  %152 = add i16 %151, %9
  store i16 %152, i16* %150, align 2
  %153 = load i8, i8* %2, align 1
  br label %159

154:                                              ; preds = %138, %143
  %155 = add nuw nsw i64 %139, 1
  %156 = icmp ult i64 %155, %124
  br i1 %156, label %138, label %157

157:                                              ; preds = %154
  %158 = trunc i64 %155 to i32
  br label %159

159:                                              ; preds = %157, %256, %147
  %160 = phi i8 [ %153, %147 ], [ 0, %256 ], [ %259, %157 ]
  %161 = phi i32 [ %148, %147 ], [ 0, %256 ], [ %158, %157 ]
  %162 = zext i8 %160 to i32
  %163 = icmp eq i32 %161, %162
  %164 = icmp ult i8 %160, 8
  %165 = and i1 %164, %163
  br i1 %165, label %166, label %173

166:                                              ; preds = %159
  %167 = zext i32 %161 to i64
  %168 = getelementptr inbounds %struct.candidate_mv, %struct.candidate_mv* %5, i64 %167, i32 0, i32 0
  store i32 %137, i32* %168, align 4
  %169 = getelementptr inbounds %struct.candidate_mv, %struct.candidate_mv* %5, i64 %167, i32 1, i32 0
  store i32 %258, i32* %169, align 4
  %170 = getelementptr inbounds i16, i16* %6, i64 %167
  store i16 %9, i16* %170, align 2
  %171 = load i8, i8* %2, align 1
  %172 = add i8 %171, 1
  store i8 %172, i8* %2, align 1
  br label %173

173:                                              ; preds = %166, %159
  %174 = load i8, i8* %111, align 2
  switch i8 %174, label %178 [
    i8 16, label %175
    i8 24, label %175
    i8 19, label %175
    i8 20, label %175
    i8 21, label %175
    i8 22, label %175
  ]

175:                                              ; preds = %173, %173, %173, %173, %173, %173
  %176 = load i8, i8* %4, align 1
  %177 = add i8 %176, 1
  store i8 %177, i8* %4, align 1
  br label %178

178:                                              ; preds = %173, %175
  %179 = load i8, i8* %3, align 1
  %180 = add i8 %179, 1
  store i8 %180, i8* %3, align 1
  br label %181

181:                                              ; preds = %96, %243, %178, %106, %101, %15
  ret void

182:                                              ; preds = %96
  %183 = load i8, i8* %24, align 2
  %184 = load i8, i8* %25, align 8
  %185 = zext i8 %184 to i64
  %186 = getelementptr inbounds [22 x i8], [22 x i8]* @block_size_wide, i64 0, i64 %185
  %187 = load i8, i8* %186, align 1
  %188 = getelementptr inbounds [22 x i8], [22 x i8]* @block_size_high, i64 0, i64 %185
  %189 = load i8, i8* %188, align 1
  switch i8 %183, label %199 [
    i8 15, label %190
    i8 23, label %190
  ]

190:                                              ; preds = %182, %182
  %191 = sext i8 %97 to i64
  %192 = getelementptr inbounds %struct.WarpedMotionParams, %struct.WarpedMotionParams* %8, i64 %191, i32 5
  %193 = load i8, i8* %192, align 4
  %194 = icmp ult i8 %187, %189
  %195 = select i1 %194, i8 %187, i8 %189
  %196 = icmp ult i8 %195, 8
  %197 = icmp ult i8 %193, 2
  %198 = or i1 %196, %197
  br i1 %198, label %199, label %201

199:                                              ; preds = %190, %182
  %200 = getelementptr inbounds %struct.MB_MODE_INFO, %struct.MB_MODE_INFO* %0, i64 0, i32 5, i64 1, i32 0
  br label %201

201:                                              ; preds = %199, %190
  %202 = phi i32* [ %200, %199 ], [ %26, %190 ]
  %203 = load i32, i32* %202, align 4
  %204 = load i8, i8* %2, align 1
  %205 = icmp eq i8 %204, 0
  br i1 %205, label %225, label %206

206:                                              ; preds = %201
  %207 = zext i8 %204 to i64
  br label %208

208:                                              ; preds = %213, %206
  %209 = phi i64 [ 0, %206 ], [ %214, %213 ]
  %210 = getelementptr inbounds %struct.candidate_mv, %struct.candidate_mv* %5, i64 %209, i32 0, i32 0
  %211 = load i32, i32* %210, align 4
  %212 = icmp eq i32 %211, %203
  br i1 %212, label %218, label %213

213:                                              ; preds = %208
  %214 = add nuw nsw i64 %209, 1
  %215 = icmp ult i64 %214, %207
  br i1 %215, label %208, label %216

216:                                              ; preds = %213
  %217 = trunc i64 %214 to i32
  br label %225

218:                                              ; preds = %208
  %219 = trunc i64 %209 to i32
  %220 = and i64 %209, 4294967295
  %221 = getelementptr inbounds i16, i16* %6, i64 %220
  %222 = load i16, i16* %221, align 2
  %223 = add i16 %222, %9
  store i16 %223, i16* %221, align 2
  %224 = load i8, i8* %2, align 1
  br label %225

225:                                              ; preds = %218, %216, %201
  %226 = phi i8 [ %224, %218 ], [ 0, %201 ], [ %204, %216 ]
  %227 = phi i32 [ %219, %218 ], [ 0, %201 ], [ %217, %216 ]
  %228 = zext i8 %226 to i32
  %229 = icmp eq i32 %227, %228
  %230 = icmp ult i8 %226, 8
  %231 = and i1 %230, %229
  br i1 %231, label %232, label %238

232:                                              ; preds = %225
  %233 = zext i32 %227 to i64
  %234 = getelementptr inbounds %struct.candidate_mv, %struct.candidate_mv* %5, i64 %233, i32 0, i32 0
  store i32 %203, i32* %234, align 4
  %235 = getelementptr inbounds i16, i16* %6, i64 %233
  store i16 %9, i16* %235, align 2
  %236 = load i8, i8* %2, align 1
  %237 = add i8 %236, 1
  store i8 %237, i8* %2, align 1
  br label %238

238:                                              ; preds = %232, %225
  %239 = load i8, i8* %24, align 2
  switch i8 %239, label %243 [
    i8 16, label %240
    i8 24, label %240
    i8 19, label %240
    i8 20, label %240
    i8 21, label %240
    i8 22, label %240
  ]

240:                                              ; preds = %238, %238, %238, %238, %238, %238
  %241 = load i8, i8* %4, align 1
  %242 = add i8 %241, 1
  store i8 %242, i8* %4, align 1
  br label %243

243:                                              ; preds = %240, %238
  %244 = load i8, i8* %3, align 1
  %245 = add i8 %244, 1
  store i8 %245, i8* %3, align 1
  br label %181

246:                                              ; preds = %135, %135
  %247 = sext i8 %21 to i64
  %248 = getelementptr inbounds %struct.WarpedMotionParams, %struct.WarpedMotionParams* %8, i64 %247, i32 5
  %249 = load i8, i8* %248, align 4
  %250 = icmp ult i8 %249, 2
  %251 = or i1 %122, %250
  br i1 %251, label %254, label %252

252:                                              ; preds = %246
  %253 = getelementptr inbounds %union.int_mv, %union.int_mv* %7, i64 1, i32 0
  br label %256

254:                                              ; preds = %246, %135
  %255 = getelementptr inbounds %struct.MB_MODE_INFO, %struct.MB_MODE_INFO* %0, i64 0, i32 5, i64 1, i32 0
  br label %256

256:                                              ; preds = %254, %252
  %257 = phi i32* [ %255, %254 ], [ %253, %252 ]
  %258 = load i32, i32* %257, align 4
  %259 = load i8, i8* %2, align 1
  %260 = icmp eq i8 %259, 0
  br i1 %260, label %159, label %123
}

attributes #0 = { nofree norecurse nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { inlinehint norecurse nounwind readonly ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nofree "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { norecurse nounwind readonly ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { inlinehint nofree norecurse nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #8 = { inlinehint nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #9 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{i8 0, i8 2}
!3 = distinct !{!3, !4}
!4 = !{!"llvm.loop.isvectorized", i32 1}
!5 = distinct !{!5, !6, !4}
!6 = !{!"llvm.loop.unroll.runtime.disable"}
!7 = distinct !{!7, !8}
!8 = !{!"llvm.loop.unroll.disable"}
!9 = distinct !{!9, !4}
!10 = distinct !{!10, !8}
!11 = distinct !{!11, !6, !4}
!12 = distinct !{!12, !8}
!13 = distinct !{!13, !8}
